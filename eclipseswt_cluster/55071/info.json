{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0e328ba173edc38124135548448fc23", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "774c579c97944ccf8de1e9c4a109a3f6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  int [] createGdipImage()", "signatureAfterChange": "  long [] createGdipImage()", "diff": ["-int /*long*/ [] createGdipImage() {", "+long /*int*/ [] createGdipImage() {", "-\t\t\t\tint /*long*/ hDC = device.internal_new_GC(null);", "-\t\t\t\tint /*long*/ srcHdc = OS.CreateCompatibleDC(hDC);", "-\t\t\t\tint /*long*/ oldSrcBitmap = OS.SelectObject(srcHdc, handle);", "-\t\t\t\tint /*long*/ memHdc = OS.CreateCompatibleDC(hDC);", "-\t\t\t\tint /*long*/ memDib = createDIB(imgWidth, imgHeight, 32);", "+\t\t\t\tlong /*int*/ hDC = device.internal_new_GC(null);", "+\t\t\t\tlong /*int*/ srcHdc = OS.CreateCompatibleDC(hDC);", "+\t\t\t\tlong /*int*/ oldSrcBitmap = OS.SelectObject(srcHdc, handle);", "+\t\t\t\tlong /*int*/ memHdc = OS.CreateCompatibleDC(hDC);", "+\t\t\t\tlong /*int*/ memDib = createDIB(imgWidth, imgHeight, 32);", "-\t\t\t\tint /*long*/ oldMemBitmap = OS.SelectObject(memHdc, memDib);\t", "+\t\t\t\tlong /*int*/ oldMemBitmap = OS.SelectObject(memHdc, memDib);\t", "-\t\t\t\tint /*long*/ hHeap = OS.GetProcessHeap();", "-\t\t\t\tint /*long*/ pixels = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, srcData.length);", "+\t\t\t\tlong /*int*/ hHeap = OS.GetProcessHeap();", "+\t\t\t\tlong /*int*/ pixels = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, srcData.length);", "-\t\t\t\treturn new int /*long*/ []{Gdip.Bitmap_new(imgWidth, imgHeight, dibBM.bmWidthBytes, Gdip.PixelFormat32bppARGB, pixels), pixels};", "+\t\t\t\treturn new long /*int*/ []{Gdip.Bitmap_new(imgWidth, imgHeight, dibBM.bmWidthBytes, Gdip.PixelFormat32bppARGB, pixels), pixels};", "-\t\t\treturn new int /*long*/ []{Gdip.Bitmap_new(handle, 0), 0};", "+\t\t\treturn new long /*int*/ []{Gdip.Bitmap_new(handle, 0), 0};", "-\t\t\tint /*long*/ hBitmap = iconInfo.hbmColor;", "+\t\t\tlong /*int*/ hBitmap = iconInfo.hbmColor;", "-\t\t\tint /*long*/ img = 0, pixels = 0;", "+\t\t\tlong /*int*/ img = 0, pixels = 0;", "-\t\t\t\tint /*long*/ hDC = device.internal_new_GC(null);", "-\t\t\t\tint /*long*/ srcHdc = OS.CreateCompatibleDC(hDC);", "-\t\t\t\tint /*long*/ oldSrcBitmap = OS.SelectObject(srcHdc, hBitmap);", "-\t\t\t\tint /*long*/ memHdc = OS.CreateCompatibleDC(hDC);", "-\t\t\t\tint /*long*/ memDib = createDIB(imgWidth, imgHeight, 32);", "+\t\t\t\tlong /*int*/ hDC = device.internal_new_GC(null);", "+\t\t\t\tlong /*int*/ srcHdc = OS.CreateCompatibleDC(hDC);", "+\t\t\t\tlong /*int*/ oldSrcBitmap = OS.SelectObject(srcHdc, hBitmap);", "+\t\t\t\tlong /*int*/ memHdc = OS.CreateCompatibleDC(hDC);", "+\t\t\t\tlong /*int*/ memDib = createDIB(imgWidth, imgHeight, 32);", "-\t\t\t\tint /*long*/ oldMemBitmap = OS.SelectObject(memHdc, memDib);\t", "+\t\t\t\tlong /*int*/ oldMemBitmap = OS.SelectObject(memHdc, memDib);\t", "-\t\t\t\tint /*long*/ hHeap = OS.GetProcessHeap();", "+\t\t\t\tlong /*int*/ hHeap = OS.GetProcessHeap();", "-\t\t\treturn new int /*long*/ []{img, pixels};", "+\t\t\treturn new long /*int*/ []{img, pixels};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e058b0bbc1a62a292b083fce4972f47b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 147, "signatureBeforeChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (long aWebProgress, long aRequest, int aStateFlags, int aStatus)", "diff": ["-int OnStateChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStateFlags, int aStatus) {", "+int OnStateChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int aStateFlags, int aStatus) {", "-\t\tint /*long*/ name = XPCOM.nsEmbedCString_new ();", "+\t\tlong /*int*/ name = XPCOM.nsEmbedCString_new ();", "-\t\t\tint /*long*/ buffer = XPCOM.nsEmbedCString_get (name);", "+\t\t\tlong /*int*/ buffer = XPCOM.nsEmbedCString_get (name);", "-\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\tlong /*int*/[] result = new long /*int*/[1];", "-\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\tlong /*int*/[] result = new long /*int*/[1];", "-\t\t\tint /*long*/[] window = new int /*long*/[1];", "+\t\t\tlong /*int*/[] window = new long /*int*/[1];", "-\t\t\tint /*long*/ name = XPCOM.nsEmbedCString_new ();", "+\t\t\tlong /*int*/ name = XPCOM.nsEmbedCString_new ();", "-\t\t\tint /*long*/ buffer = XPCOM.nsEmbedCString_get (name);", "+\t\t\tlong /*int*/ buffer = XPCOM.nsEmbedCString_get (name);", "-\t\t\t\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);", "+\t\t\t\tlong /*int*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);", "-\t\t\t\tint /*long*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);", "+\t\t\t\tlong /*int*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);", "-\t\t\t\tint /*long*/ ptr = C.malloc (htmlBytes.length);", "+\t\t\t\tlong /*int*/ ptr = C.malloc (htmlBytes.length);", "-\t\t\t\tint /*long*/ current = ptr;", "+\t\t\t\tlong /*int*/ current = ptr;", "-\t\t\t\tint /*long*/[] window = new int /*long*/[1];", "+\t\t\t\tlong /*int*/[] window = new long /*int*/[1];", "-\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\tlong /*int*/[] result = new long /*int*/[1];", "-\t\t\t\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new ();", "+\t\t\t\tlong /*int*/ aSpec = XPCOM.nsEmbedCString_new ();", "-\t\t\t\tint /*long*/ buffer = XPCOM.nsEmbedCString_get (aSpec);", "+\t\t\t\tlong /*int*/ buffer = XPCOM.nsEmbedCString_get (aSpec);", "-\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\tlong /*int*/[] result = new long /*int*/[1];"]}], "num": 55071}
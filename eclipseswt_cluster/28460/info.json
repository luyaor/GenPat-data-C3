{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "432bddf5701cad4808a5c8664af9761a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd7f185d115775fc5503529d3734cc78", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "82faecf1f2984afac33e97f949b0dc3c26cac05d", "commitAfterChange": "b0c7af088efc6ba82eb28695daa107df5d61cc2f", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 54, "signatureBeforeChange": " void onMouseUp(Event event)", "signatureAfterChange": " void onMouse(Event event)", "diff": ["-void onMouseUp(Event event) {", "-\tif (event.button != 1) return;", "+void onMouse(Event event) {", "-\tif (closeRect.contains(x, y)) {", "-\t\tcloseImageState = HOT;", "-\t\tredraw(closeRect.x, closeRect.y, closeRect.width, closeRect.height, false);", "-\t\tif (selectedIndex == -1) return;", "-\t\tCTabItem2 item = items[selectedIndex];", "-\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "-\t\te.widget = this;", "-\t\te.time = event.time;", "-\t\te.item = item;", "-\t\te.doit = true;", "-\t\tfor (int i = 0; i < closeListeners.length; i++) {", "-\t\t\tcloseListeners[i].itemClosed(e);", "-\t\t}", "-\t\tif (e.doit) item.dispose();", "-\t\treturn;", "-\t}", "-\tif (chevronRect.contains(x, y)) {", "-\t\tchevronImageState = HOT;", "-\t\tredraw(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height, false);", "-\t\tRectangle rect = new Rectangle(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height);", "-\t\tif (listListeners.length == 0) {", "-\t\t\tshowList(rect, SWT.LEFT);", "-\t\t} else {", "-\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "-\t\t\te.widget = this;", "-\t\t\te.time = event.time;", "-\t\t\te.rect = rect;", "-\t\t\t", "-\t\t\tfor (int i = 0; i < listListeners.length; i++) {", "-\t\t\t\tlistListeners[i].showList(e);", "+\tswitch (event.type) {", "+\t\tcase SWT.MouseExit: {", "+\t\t\tif (closeImageState != NORMAL) {", "+\t\t\t\tcloseImageState = NORMAL;", "+\t\t\t\tredraw(closeRect.x, closeRect.y, closeRect.width, closeRect.height, false);", "-\t\t}", "-\t\treturn;", "-\t}", "-\tif (expandRect.contains(x, y)) {", "-\t\texpandImageState = HOT;", "-\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "-\t\te.widget = this;", "-\t\te.time = event.time;", "-\t\te.doit = true;", "-\t\tfor (int i = 0; i < expandListeners.length; i++) {", "-\t\t\tif (expanded) {", "-\t\t\t\texpandListeners[i].collapse(e);", "-\t\t\t} else {", "-\t\t\t\texpandListeners[i].expand(e);", "+\t\t\tif (expandImageState != NORMAL) {", "+\t\t\t\texpandImageState = NORMAL;", "+\t\t\t\tredraw(expandRect.x, expandRect.y, expandRect.width, expandRect.height, false);", "+\t\t\tif (chevronImageState != NORMAL) {", "+\t\t\t\tchevronImageState = NORMAL;", "+\t\t\t\tredraw(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height, false);", "+\t\t\t}", "+\t\t\tbreak;", "-\t\tif (e.doit) {", "-\t\t\texpanded = !expanded;", "+\t\tcase SWT.MouseDown: {", "+\t\t\tif (closeRect.contains(x, y)) {", "+\t\t\t\tif (event.button != 1) return;", "+\t\t\t\tcloseImageState = SELECTED;", "+\t\t\t\tredraw(closeRect.x, closeRect.y, closeRect.width, closeRect.height, false);", "+\t\t\t\tupdate();", "+\t\t\t\treturn;", "+\t\t\t} ", "+\t\t\tif (expandRect.contains(x, y)) {", "+\t\t\t\tif (event.button != 1) return;", "+\t\t\t\texpandImageState = SELECTED;", "+\t\t\t\tredraw(expandRect.x, expandRect.y, expandRect.width, expandRect.height, false);", "+\t\t\t\tupdate();", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tif (chevronRect.contains(x, y)) {", "+\t\t\t\tif (event.button != 1) return;", "+\t\t\t\tchevronImageState = SELECTED;", "+\t\t\t\tredraw(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height, false);", "+\t\t\t\tupdate();", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\tif (items[i].getBounds().contains(x, y)) {", "+\t\t\t\t\tif (i == selectedIndex) {", "+\t\t\t\t\t\tshowSelection();", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t\tsetSelection(i, true);", "+\t\t\t\t\tsetFocus();", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;", "-\t\tredraw(expandRect.x, expandRect.y, expandRect.width, expandRect.height, false);", "-\t\treturn;", "-\t}", "-\tif (single && items.length > 1) {", "-\t\tfor (int i=0; i<items.length; i++) {", "-\t\t\tRectangle bounds = items[i].getBounds();", "-\t\t\tif (bounds.contains(x, y)) {", "-\t\t\t\tRectangle rect = new Rectangle(bounds.x, bounds.y, bounds.width, bounds.height);", "+\t\tcase SWT.MouseMove: {", "+\t\t\tboolean close = false, expand = false, chevron = false;", "+\t\t\tif (closeRect.contains(x, y)) {", "+\t\t\t\tclose = true;", "+\t\t\t\tif (closeImageState != HOT) {", "+\t\t\t\t\tcloseImageState = HOT;", "+\t\t\t\t\tredraw(closeRect.x, closeRect.y, closeRect.width, closeRect.height, false);", "+\t\t\t\t}", "+\t\t\t} ", "+\t\t\tif (expandRect.contains(x, y)) {", "+\t\t\t\texpand = true;", "+\t\t\t\tif (expandImageState != HOT) {", "+\t\t\t\t\texpandImageState = HOT;", "+\t\t\t\t\tredraw(expandRect.x, expandRect.y, expandRect.width, expandRect.height, false);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (chevronRect.contains(x, y)) {", "+\t\t\t\tchevron = true;", "+\t\t\t\tif (chevronImageState != HOT) {", "+\t\t\t\t\tchevronImageState = HOT;", "+\t\t\t\t\tredraw(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height, false);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (closeImageState == HOT && !close) {", "+\t\t\t\tcloseImageState = NORMAL;", "+\t\t\t\tredraw(closeRect.x, closeRect.y, closeRect.width, closeRect.height, false);", "+\t\t\t}", "+\t\t\tif (expandImageState == HOT && !expand) {", "+\t\t\t\texpandImageState = NORMAL;", "+\t\t\t\tredraw(expandRect.x, expandRect.y, expandRect.width, expandRect.height, false);", "+\t\t\t}", "+\t\t\tif (chevronImageState == HOT && !chevron) {", "+\t\t\t\tchevronImageState = NORMAL;", "+\t\t\t\tredraw(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height, false);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}", "+\t\tcase SWT.MouseUp: {", "+\t\t\tif (event.button != 1) return;", "+\t\t\tif (closeRect.contains(x, y)) {", "+\t\t\t\tcloseImageState = HOT;", "+\t\t\t\tredraw(closeRect.x, closeRect.y, closeRect.width, closeRect.height, false);", "+\t\t\t\tif (selectedIndex == -1) return;", "+\t\t\t\tCTabItem2 item = items[selectedIndex];", "+\t\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "+\t\t\t\te.widget = this;", "+\t\t\t\te.time = event.time;", "+\t\t\t\te.item = item;", "+\t\t\t\te.doit = true;", "+\t\t\t\tfor (int i = 0; i < closeListeners.length; i++) {", "+\t\t\t\t\tcloseListeners[i].itemClosed(e);", "+\t\t\t\t}", "+\t\t\t\tif (e.doit) item.dispose();", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tif (chevronRect.contains(x, y)) {", "+\t\t\t\tchevronImageState = HOT;", "+\t\t\t\tredraw(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height, false);", "+\t\t\t\tRectangle rect = new Rectangle(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height);", "-\t\t\t\t\tshowList(rect, SWT.RIGHT);", "+\t\t\t\t\tshowList(rect, SWT.LEFT);", "-\t\t\t\t\tfor (int j = 0; j < listListeners.length; j++) {", "-\t\t\t\t\t\tlistListeners[j].showList(e);", "+\t\t\t\t\t", "+\t\t\t\t\tfor (int i = 0; i < listListeners.length; i++) {", "+\t\t\t\t\t\tlistListeners[i].showList(e);", "+\t\t\tif (expandRect.contains(x, y)) {", "+\t\t\t\texpandImageState = HOT;", "+\t\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "+\t\t\t\te.widget = this;", "+\t\t\t\te.time = event.time;", "+\t\t\t\te.doit = true;", "+\t\t\t\tfor (int i = 0; i < expandListeners.length; i++) {", "+\t\t\t\t\tif (expanded) {", "+\t\t\t\t\t\texpandListeners[i].collapse(e);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\texpandListeners[i].expand(e);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (e.doit) {", "+\t\t\t\t\texpanded = !expanded;", "+\t\t\t\t}", "+\t\t\t\tredraw(expandRect.x, expandRect.y, expandRect.width, expandRect.height, false);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tif (single && items.length > 1) {", "+\t\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\t\tRectangle bounds = items[i].getBounds();", "+\t\t\t\t\tif (bounds.contains(x, y)) {", "+\t\t\t\t\t\tRectangle rect = new Rectangle(bounds.x, bounds.y, bounds.width, bounds.height);", "+\t\t\t\t\t\tif (listListeners.length == 0) {", "+\t\t\t\t\t\t\tshowList(rect, SWT.RIGHT);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "+\t\t\t\t\t\t\te.widget = this;", "+\t\t\t\t\t\t\te.time = event.time;", "+\t\t\t\t\t\t\te.rect = rect;", "+\t\t\t\t\t\t\tfor (int j = 0; j < listListeners.length; j++) {", "+\t\t\t\t\t\t\t\tlistListeners[j].showList(e);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb51bc181118963354b8cd354d40b870", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 29, "signatureBeforeChange": "  void updateText ()", "signatureAfterChange": "  private static int parseShortcut(String text)", "diff": ["-void updateText () {", "-\tif ((style & SWT.SEPARATOR) != 0) return;", "-\tshort [] outIndex = new short [1];", "-\tif (OS.GetIndMenuItemWithCommandID (parent.handle, id, 1, null, outIndex) != OS.noErr) {", "-\t\terror (SWT.ERROR_CANNOT_SET_TEXT);", "-\tchar [] buffer = new char [text.length ()];", "-\ttext.getChars (0, buffer.length, buffer, 0);", "-\tint i=0, j=0;", "-\twhile (i < buffer.length) {", "-\t\tif (accelerator != 0 && buffer [i] == '\\t') break;", "-\t\tif ((buffer [j++] = buffer [i++]) == Mnemonic) {", "-\t\t\tif (i == buffer.length) {continue;}", "-\t\t\tif (buffer [i] == Mnemonic) {i++; continue;}", "-\t\t\tj--;", "+", "+private static int parseShortcut(String text) {", "+\tint accelerator= 0;", "+\t", "+\tint pos= text.indexOf('\\t');", "+\tif (pos >= 0) {", "+\t\ttext= text.substring(pos+1);", "+\t\t", "+\t\t/*", "+\t\t * This parsing code is wrong because it works only for the english version of eclipse", "+\t\t */", "+\t\tStringTokenizer st= new StringTokenizer(text, \"+\");", "+\t\twhile (st.hasMoreTokens()) {", "+\t\t\tString t= st.nextToken().toUpperCase();", "+\t\t\tif (\"SHIFT\".equals(t))", "+\t\t\t\taccelerator |= SWT.SHIFT;", "+\t\t\telse if (\"CTRL\".equals(t))", "+\t\t\t\taccelerator |= SWT.CONTROL;", "+\t\t\telse if (\"ALT\".equals(t))", "+\t\t\t\taccelerator |= SWT.ALT;", "+\t\t\telse if (\"F1\".equals(t))", "+\t\t\t\taccelerator |= SWT.F1;", "+\t\t\telse if (\"F2\".equals(t))", "+\t\t\t\taccelerator |= SWT.F2;", "+\t\t\telse if (\"F3\".equals(t))", "+\t\t\t\taccelerator |= SWT.F3;", "+\t\t\telse if (\"F4\".equals(t))", "+\t\t\t\taccelerator |= SWT.F4;", "+\t\t\telse if (\"F5\".equals(t))", "+\t\t\t\taccelerator |= SWT.F5;", "+\t\t\telse if (\"F6\".equals(t))", "+\t\t\t\taccelerator |= SWT.F6;", "+\t\t\telse if (\"F7\".equals(t))", "+\t\t\t\taccelerator |= SWT.F7;", "+\t\t\telse if (\"F8\".equals(t))", "+\t\t\t\taccelerator |= SWT.F8;", "+\t\t\telse if (\"F9\".equals(t))", "+\t\t\t\taccelerator |= SWT.F9;", "+\t\t\telse if (\"F10\".equals(t))", "+\t\t\t\taccelerator |= SWT.F10;", "+\t\t\telse if (\"F11\".equals(t))", "+\t\t\t\taccelerator |= SWT.F11;", "+\t\t\telse if (\"F12\".equals(t))", "+\t\t\t\taccelerator |= SWT.F12;", "+\t\t\telse if (\"DELETE\".equals(t))", "+\t\t\t\taccelerator |= SWT.DEL;", "+\t\t\telse if (\"ENTER\".equals(t))", "+\t\t\t\taccelerator |= SWT.CR;", "+\t\t\telse if (\"ARROW UP\".equals(t) || \"ARROW_UP\".equals(t))", "+\t\t\t\taccelerator |= SWT.ARROW_UP;", "+\t\t\telse if (\"ARROW DOWN\".equals(t) || \"ARROW_DOWN\".equals(t))", "+\t\t\t\taccelerator |= SWT.ARROW_DOWN;", "+\t\t\telse if (\"ARROW LEFT\".equals(t) || \"ARROW_LEFT\".equals(t))", "+\t\t\t\taccelerator |= SWT.ARROW_LEFT;", "+\t\t\telse if (\"ARROW RIGHT\".equals(t) || \"ARROW_RIGHT\".equals(t))", "+\t\t\t\taccelerator |= SWT.ARROW_RIGHT;", "+\t\t\telse if (\"SPACE\".equals(t))", "+\t\t\t\taccelerator |= ' ';", "+\t\t\telse if (\"TAB\".equals(t))", "+\t\t\t\taccelerator |= '\\t';", "+\t\t\telse {", "+\t\t\t\tif (t.length() > 1)", "+\t\t\t\t\tSystem.err.println(\"MenuItem.parseShortcut: unknown: <\" + t + \">\");", "+\t\t\t\telse {", "+\t\t\t\t\taccelerator |= t.charAt(0);", "+\t\t\t\t\tbreak;\t// must be last", "+\t\t\t\t}", "+\t\t\t}", "-\tint str = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, j);", "-\tif (str == 0) error (SWT.ERROR_CANNOT_SET_TEXT);", "-\tOS.SetMenuItemTextWithCFString (parent.handle, outIndex [0], str);", "-\tint [] outHierMenu = new int [1];", "-\tOS.GetMenuItemHierarchicalMenu (parent.handle, outIndex [0], outHierMenu);", "-\tif (outHierMenu [0] != 0) OS.SetMenuTitleWithCFString (outHierMenu [0], str);", "-\tOS.CFRelease (str);", "+\treturn accelerator;"]}], "num": 28460}
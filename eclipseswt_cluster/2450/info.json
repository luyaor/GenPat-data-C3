{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c11b8f6c7052de59f0141b6687dc68cf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "232bfce415254dbdce1260dde0b4559a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tint sendKeyEvent (int type, MacEvent mEvent, Event event)", "signatureAfterChange": "  int kEventRawKeyDown (int nextHandler, int theEvent, int userData)", "diff": ["+", "+int kEventRawKeyDown (int nextHandler, int theEvent, int userData) {", "+\tint result = super.kEventRawKeyDown (nextHandler, theEvent, userData);", "+\tif (result == OS.noErr) return result;", "+\t/*", "+\t* Feature in the Macintosh.  For some reason, when the user hits an", "+\t* up or down arrow to traverse the items in a Data Browser, the item", "+\t* scrolls to the left such that the white space that is normally", "+\t* visible to the right of the every item is scrolled out of view.", "+\t* The fix is to do the arrow traversal in Java and not call the", "+\t* default handler.", "+\t*/", "+\tint [] keyCode = new int [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "+\tswitch (keyCode [0]) {", "+\t\tcase 125: { /* Down */", "+\t\t\tint index = getSelectionIndex ();", "+\t\t\tsetSelection (Math.min (itemCount - 1, index + 1));", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t\tcase 126: { /* Up*/", "+\t\t\tint index = getSelectionIndex ();", "+\t\t\tsetSelection (Math.max (0, index - 1));", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t}", "+\treturn OS.eventNotHandledErr;", "+}", "-", "-\tint sendKeyEvent (int type, MacEvent mEvent, Event event) {", "-\t\t//processEvent (type, new MacEvent(eRefHandle));", "-\t\treturn OS.eventNotHandledErr;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "142b607a50cb0b0a53a7bb3afb046603", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "c878e19e1d71776f11d9ab1e76e433925b403c28", "commitAfterChange": "88bea82899fc1c73ee08f9a73be0ffb1e5544aa2", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  int kEventRawKeyDown (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventRawKeyDown (int nextHandler, int theEvent, int userData)", "diff": ["+\tint [] modifiers = new int [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "+\tif (modifiers [0] == OS.cmdKey) {", "+\t\tint [] keyCode = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "+\t\tswitch (keyCode [0]) {", "+\t\t\tcase 7: /* X */", "+\t\t\t\tcut ();", "+\t\t\t\treturn OS.noErr;", "+\t\t\tcase 8: /* C */", "+\t\t\t\tcopy ();", "+\t\t\t\treturn OS.noErr;", "+\t\t\tcase 9: /* V */", "+\t\t\t\tpaste ();", "+\t\t\t\treturn OS.noErr;", "+\t\t}", "+\t}"]}], "num": 2450}
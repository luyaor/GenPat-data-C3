{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab8c87907c53c1699201a4ac58ca1d35", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63918ae85bf83de5721d943fe72b3937", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Table.java", "commitBeforeChange": "69ca4def95e26b4f7985d8aa70882f0b37698d59", "commitAfterChange": "c7ffe68125d78bc1bb1c15b6e270edf7c3020f35", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "  public void test_setSelection$I()", "signatureAfterChange": "  public void test_setSelection$I()", "diff": ["+\t", "-\t\tfail(\"No exception thrown for selection range == null\");", "-\t}", "-\tcatch (IllegalArgumentException e) {", "-\t}", "-\t", "-\tmakeCleanEnvironment(true);", "-\t", "-\tfor (int i = 0; i < number; i++)", "-\t\titems[i] = new TableItem(table, 0);", "-\ttable.setSelection(new int[] {});", "-\tassertEquals(new int[] {}, table.getSelectionIndices());", "-\ttable.setSelection(new int[] {0, 3, 2});", "-\tif (fCheckSWTPolicy)", "-\t\tassertEquals(new int[] {2}, table.getSelectionIndices());", "-\ttable.setSelection(new int[] {3, 2, 1});", "-\tif (fCheckSWTPolicy)", "-\t\tassertEquals(new int[] {1}, table.getSelectionIndices());", "-\ttable.setSelection(new int[] {1, 4, 0});", "-\tif (fCheckSWTPolicy)", "-\t\tassertEquals(new int[] {0}, table.getSelectionIndices());", "-\ttable.setSelection(new int[] {0, 4, 1});", "-\tif (fCheckSWTPolicy)", "-\t\tassertEquals(new int[] {0}, table.getSelectionIndices());", "-\ttable.setSelection(new int[] {2, 3, 4});", "-\tif (fCheckSWTPolicy)", "-\t\tassertEquals(new int[] {4}, table.getSelectionIndices());", "-\ttable.setSelection(new int[] {4, 4, 4, 4, 4, 4, 4});", "-\tassertEquals(new int[] {4}, table.getSelectionIndices());", "-\ttable.setSelection(new int[] {4});", "-\tassertEquals(new int[] {4}, table.getSelectionIndices());", "-\t", "-\tmakeCleanEnvironment(true);", "-\t", "-\tfor (int i = 0; i < number; i++)", "-\t\titems[i] = new TableItem(table, 0);", "-\ttry {", "-\t\ttable.setSelection((TableItem[]) null);", "+\t", "+\ttable.setSelection(new int[] {});", "+\tassertEquals(new int[] {}, table.getSelectionIndices());", "+", "+\ttable.setSelection(new int[] {0});", "+\tassertEquals(new int[] {0}, table.getSelectionIndices());", "+", "+\ttable.setSelection(new int[] {2});", "+\tassertEquals(new int[] {2}, table.getSelectionIndices());", "+", "+\ttable.setSelection(new int[] {4});", "+\tassertEquals(new int[] {4}, table.getSelectionIndices());", "+", "+\ttable.setSelection(new int[] {number-1});", "+\tassertEquals(new int[] {number-1}, table.getSelectionIndices());", "+", "+\ttable.deselectAll();", "+\ttable.setSelection(new int[] {number});", "+\tassertEquals(new int[] {}, table.getSelectionIndices());", "+", "+\ttable.setSelection(new int[] {-1});", "+\tassertEquals(new int[] {}, table.getSelectionIndices());", "+", "+\ttable.setSelection(new int[] {0, 3, 2});", "+\tassertEquals(new int[] {}, table.getSelectionIndices());", "+\t", "+\ttable.setSelection(new int[] {3, 2, 1});", "+\tassertEquals(new int[] {}, table.getSelectionIndices());", "+\t", "+\ttable.setSelection(new int[] {4, 4, 4, 4, 4, 4, 4});", "+\tassertEquals(new int[] {}, table.getSelectionIndices());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d10c337eeab9d569b4bafe1e0bfe637", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Table.java", "commitBeforeChange": "69ca4def95e26b4f7985d8aa70882f0b37698d59", "commitAfterChange": "c7ffe68125d78bc1bb1c15b6e270edf7c3020f35", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "  public void test_select$I()", "signatureAfterChange": "  public void test_select$I()", "diff": ["+\ttable.select(new int[] {2, 10, 14});", "+\tassertSame(new int[] {2, 10, 14}, table.getSelectionIndices());", "+\t", "+\ttable.deselectAll();", "+\ttable.deselectAll();", "+\ttable.select(new int[] {number, 0, number-1});", "+\tassertSame(new int[] {0, number-1}, table.getSelectionIndices());", "+\t", "+\ttable.deselectAll();", "+\ttable.select(new int[] {number, 0, -1});", "+\tassertSame(new int[] {0}, table.getSelectionIndices());", "+\t", "+\ttable.deselectAll();", "+\ttable.select(new int[] {0});", "+\tassertSame(new int[] {0}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {10});", "+\tassertSame(new int[] {0, 10}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {2});", "+\tassertSame(new int[] {0, 2, 10}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {14});", "+\tassertSame(new int[] {0, 2, 10, 14}, table.getSelectionIndices());", "+\t", "+\ttable.deselectAll();", "+\ttable.select(new int[] {15});", "+\tassertSame(new int[] {}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {-1});", "+\tassertSame(new int[] {}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {4, 4, 4});", "+\tassertSame(new int[] {4}, table.getSelectionIndices());", "+", "+\titems = new TableItem[number];", "+\tfor (int i = 0; i < number; i++)", "+\t\titems[i] = new TableItem(table, 0);", "+", "+\tfinally {", "+\t\tassertEquals(0, table.getSelectionCount());", "+\t}", "+", "+\ttable.select(new int[] {0});", "+\tassertSame(new int[] {0}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {10});", "+\tassertSame(new int[] {10}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {2});", "+\tassertSame(new int[] {2}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {14});", "+\tassertSame(new int[] {14}, table.getSelectionIndices());", "+\t", "+\ttable.deselectAll();", "+\ttable.select(new int[] {15});", "+\tassertSame(new int[] {}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {-1});", "+\tassertSame(new int[] {}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {10, 2, 14});", "+\tassertSame(new int[] {}, table.getSelectionIndices());", "+\t", "+\ttable.select(new int[] {4, 4, 4});", "+\tassertSame(new int[] {}, table.getSelectionIndices());"]}], "num": 59}
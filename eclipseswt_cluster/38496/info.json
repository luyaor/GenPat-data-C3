{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b78accd064b5093ec0c59cf796152e5f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ee9afeeb4ad82641c5b5e37c556c40d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "fabfac354ba77dfbc16a5fdfaff79beee369b36f", "commitAfterChange": "77f06688bfac39a45b447aab335a7b06b05d1b28", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  int kEventMenuDrawItemContent (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventMenuDrawItemContent (int nextHandler, int theEvent, int userData)", "diff": ["-\t\t\tString accelText = item.text.substring (accelIndex);", "-\t\t\tint result = OS.CallNextEventHandler (nextHandler, theEvent);", "-\t\t\tRect rect = new Rect ();", "-\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamMenuItemBounds, OS.typeQDRectangle, null, Rect.sizeof, null, rect);", "-\t\t\tint [] context = new int [1];", "-\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamCGContextRef, OS.typeCGContextRef, null, 4, null, context);", "-\t\t\tchar [] buffer = new char [accelText.length ()];", "-\t\t\taccelText.getChars (0, buffer.length, buffer, 0);", "-\t\t\tint str = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-\t\t\tshort [] extraHeight = new short [1], extraWidth = new short [1];", "-\t\t\tOS.GetThemeMenuItemExtra ((short) OS.kThemeMenuItemHierarchical, extraHeight, extraWidth);", "-\t\t\trect.right -= extraWidth [0] / 2;", "-\t\t\tOS.DrawThemeTextBox (str, (short) OS.kThemeMenuItemCmdKeyFont, OS.kThemeStateActive, false, rect, (short) OS.teFlushRight, context [0]);", "-\t\t\tOS.CFRelease (str);", "-\t\t\treturn result;", "+\t\t\tString accelText = item.text.substring (accelIndex + 1);", "+\t\t\tint length = accelText.length ();", "+\t\t\tif (length != 0) {", "+\t\t\t\tint result = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\t\tRect rect = new Rect ();", "+\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamMenuItemBounds, OS.typeQDRectangle, null, Rect.sizeof, null, rect);", "+\t\t\t\tint [] context = new int [1];", "+\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamCGContextRef, OS.typeCGContextRef, null, 4, null, context);", "+", "+\t\t\t\t/* Draw the key */", "+\t\t\t\tshort left = rect.left;\t", "+\t\t\t\tint modifierIndex = modifierIndex (accelText);", "+\t\t\t\tchar [] buffer = new char [length - modifierIndex - 1];", "+\t\t\t\taccelText.getChars (modifierIndex + 1, length, buffer, 0);", "+\t\t\t\tint font = OS.kThemeMenuItemFont;", "+\t\t\t\tif (buffer.length > 1) font = OS.kThemeMenuItemCmdKeyFont;", "+\t\t\t\tbyte [] family = new byte [256];", "+\t\t\t\tshort [] size = new short [1];", "+\t\t\t\tbyte [] style = new byte [1];", "+\t\t\t\tOS.GetThemeFont ((short) font, (short) OS.smSystemScript, family, size, style);", "+\t\t\t\tFontInfo info = new FontInfo ();", "+\t\t\t\tOS.FetchFontInfo (family[0], size[0], style[0], info);", "+\t\t\t\tint [] metric = new int [1];", "+\t\t\t\tOS.GetThemeMetric (OS.kThemeMetricMenuIconTrailingEdgeMargin, metric);", "+\t\t\t\trect.left = (short) (rect.right - info.widMax - metric [0]);", "+\t\t\t\tint str = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\tOS.DrawThemeTextBox (str, (short) font, OS.kThemeStateActive, false, rect, (short) OS.teFlushDefault, context [0]);", "+\t\t\t\tOS.CFRelease (str);", "+\t\t\t\t", "+\t\t\t\t/* Draw the modifiers */", "+\t\t\t\tif (modifierIndex != -1) {", "+\t\t\t\t\tbuffer = new char [modifierIndex + 1];", "+\t\t\t\t\taccelText.getChars (0, buffer.length, buffer, 0);", "+\t\t\t\t\trect.right = rect.left;", "+\t\t\t\t\trect.left = left;", "+\t\t\t\t\tstr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\t\tOS.DrawThemeTextBox (str, (short) OS.kThemeMenuItemCmdKeyFont, OS.kThemeStateActive, false, rect, (short) OS.teFlushRight, context [0]);", "+\t\t\t\t\tOS.CFRelease (str);", "+\t\t\t\t}", "+\t\t\t\treturn result;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e38af7bee67f19dab0ce635889475af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Spinner.java", "commitBeforeChange": "f980f92ddaa06400d01ca6217ebe85dd24cefb9a", "commitAfterChange": "3b2084ccd7c41c3bd66bd7a2f6a555b1cfa73eff", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "  void update (int value, boolean notify, boolean force)", "signatureAfterChange": "  void setSelection (int value, boolean notify)", "diff": ["+", "+void setSelection (int value, boolean notify) {", "+\tOS.SetControl32BitValue (buttonHandle, value);", "+\tString string = String.valueOf (value);", "+\tif (hooks (SWT.Verify) || filters (SWT.Verify)) {", "+\t\tint [] actualSize = new int [1];", "+\t\tint [] ptr = new int [1];", "+\t\tint length = 0;", "+\t\tif (OS.GetControlData (textHandle, (short)OS.kControlEntireControl, OS.kControlEditTextCFStringTag, 4, ptr, actualSize) == OS.noErr) {", "+\t\t\tlength = OS.CFStringGetLength (ptr [0]);", "+\t\t\tOS.CFRelease (ptr [0]);", "+\t\t}", "+\t\tstring = verifyText (string, 0, length, null);", "+\t\tif (string == null) return;", "+\t}", "+\tchar [] buffer = new char [string.length ()];", "+\tstring.getChars (0, buffer.length, buffer, 0);", "+\tint ptr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\tif (ptr == 0) error (SWT.ERROR_CANNOT_SET_TEXT);", "+\tOS.SetControlData (textHandle, OS.kControlEntireControl, OS.kControlEditTextCFStringTag, 4, new int[] {ptr});", "+\tOS.CFRelease (ptr);", "+\tsendEvent (SWT.Modify);", "+\tif (notify) postEvent (SWT.Selection);", "-", "-void update (int value, boolean notify, boolean force) {", "-\tint pos = OS.GetControl32BitValue (buttonHandle);", "-\tif (force) {", "-\t\tvalue = pos;", "-\t} else {", "-\t\tint max = OS.GetControl32BitMaximum (buttonHandle);", "-\t\tint min = OS.GetControl32BitMinimum (buttonHandle);", "-\t\t//TODO handle wrapping", "-\t\tif (value > max) value = max;", "-\t\tif (value < min) value = min;", "-\t}\t", "-\tif (value != pos || force) {", "-\t\tOS.SetControl32BitValue (buttonHandle, value);", "-\t\tString text = String.valueOf (value);", "-\t\tif (hooks (SWT.Verify) || filters (SWT.Verify)) {", "-\t\t\tint [] actualSize = new int [1];", "-\t\t\tint [] ptr = new int [1];", "-\t\t\tint length = 0;", "-\t\t\tif (OS.GetControlData (textHandle, (short)OS.kControlEntireControl, OS.kControlEditTextCFStringTag, 4, ptr, actualSize) == OS.noErr) {", "-\t\t\t\tlength = OS.CFStringGetLength (ptr [0]);", "-\t\t\t\tOS.CFRelease (ptr [0]);", "-\t\t\t};", "-\t\t\ttext = verifyText (text, 0, length, null);  ", "-\t\t}", "-\t\tchar [] buffer = new char [text.length ()];", "-\t\ttext.getChars (0, buffer.length, buffer, 0);", "-\t\tint ptr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, text.length ());", "-\t\tif (ptr == 0) error (SWT.ERROR_CANNOT_SET_TEXT);\t\t", "-\t\tOS.SetControlData (textHandle, OS.kControlEntireControl, OS.kControlEditTextCFStringTag, 4, new int[] {ptr});", "-\t\tOS.CFRelease (ptr);", "-\t\tsendEvent (SWT.Modify);", "-\t\tif (notify) {", "-\t\t\tpostEvent (SWT.Selection);", "-\t\t}", "-\t}"]}], "num": 38496}
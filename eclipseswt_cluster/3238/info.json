{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d64bba73c0028f2d7bd518c78116e0c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70a0ef7931b2ed005b0b8f677bf40177", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JavadocBasher/org/eclipse/swt/tools/internal/JavadocBasher.java", "commitBeforeChange": "fc949910d259b2f09c2a6d209f57255840ca1162", "commitAfterChange": "34b48a1450d691429218250a2c0b9f1d585dff6c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \r \r \tvoid bashFile(final File source, final File target, File out)", "signatureAfterChange": "\r \r \r \tvoid bashFile(final File source, final File target, File out)", "diff": ["-\t\tfinal HashMap comments = new HashMap();\r", "+\t\tfinal HashMap<String, String> comments = new HashMap<String, String>();\r", "+\t\t\t@SuppressWarnings(\"unchecked\")\r", "-\t\t\t\t\t\tfor (Iterator iterator = node.parameters().iterator(); iterator.hasNext();) {\r", "-\t\t\t\t\t\t\tSingleVariableDeclaration param = (SingleVariableDeclaration) iterator.next();\r", "+\t\t\t\t\t\tfor (Iterator<SingleVariableDeclaration> iterator = node.parameters().iterator(); iterator.hasNext();) {\r", "+\t\t\t\t\t\t\tSingleVariableDeclaration param = iterator.next();\r", "-\t\tfinal List edits = new ArrayList();\r", "+\t\tfinal List<Edit> edits = new ArrayList<Edit>();\r", "-\t\t\t\t\tString newComment = (String)comments.get(key);\r", "+\t\t\t\t\tString newComment = comments.get(key);\r", "+\t\t\t@SuppressWarnings(\"unchecked\")\r", "-\t\t\t\t\tfor (Iterator iterator = node.parameters().iterator(); iterator.hasNext();) {\r", "-\t\t\t\t\t\tSingleVariableDeclaration param = (SingleVariableDeclaration) iterator.next();\r", "+\t\t\t\t\tfor (Iterator<SingleVariableDeclaration> iterator = node.parameters().iterator(); iterator.hasNext();) {\r", "+\t\t\t\t\t\tSingleVariableDeclaration param = iterator.next();\r", "-\t\t\t\t\tString newComment = (String)comments.get(key);\r", "+\t\t\t\t\tString newComment = comments.get(key);\r", "-\t\t\t\t\tString newComment = (String)comments.get(key);\r", "+\t\t\t\t\tString newComment = comments.get(key);\r", "-\t\t\tEdit edit = (Edit)edits.get(i);\r", "+\t\t\tEdit edit = edits.get(i);\r", "-\t\t\tfor (Iterator iterator = comments.keySet().iterator(); iterator.hasNext();) {\r", "-\t\t\t\tString name = (String) iterator.next();\r", "-\t\t\t\tif (((String) comments.get(name)).length() > 0){\r", "+\t\t\tfor (Iterator<String> iterator = comments.keySet().iterator(); iterator.hasNext();) {\r", "+\t\t\t\tString name = iterator.next();\r", "+\t\t\t\tif (comments.get(name).length() > 0){\r", "-\t\t\t\tfBashed.add(target);\r", "+\t\t\t\tfBashed.add(target.toString());\r", "-\t\t\tfUnchanged.add(target);\r", "+\t\t\tfUnchanged.add(target.toString());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3f0b21e89ed8b7ea6e85ed0f7a23b88", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "d45fca5fe38816ea0e49d88992f8a36f2c79c3af", "commitAfterChange": "fc949910d259b2f09c2a6d209f57255840ca1162", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  void generateSends(boolean superCall)", "signatureAfterChange": "  void generateSends(boolean superCall)", "diff": ["-\tTreeMap set = new TreeMap();", "-\tTreeMap set64 = new TreeMap();", "+\tTreeMap<String, Node> set = new TreeMap<String, Node>();", "+\tTreeMap<String, Node> set64 = new TreeMap<String, Node>();", "-\tTreeMap tagsSet = new TreeMap();", "-\tfor (Iterator iterator = set.keySet().iterator(); iterator.hasNext();) {", "-\t\tString key = (String)iterator.next();", "-\t\tNode method = (Node)set.get(key);", "+\tTreeMap<String, Node> tagsSet = new TreeMap<String, Node>();", "+\tfor (Iterator<String> iterator = set.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = iterator.next();", "+\t\tNode method = set.get(key);", "-\tTreeMap all = new TreeMap();", "-\tfor (Iterator iterator = tagsSet.keySet().iterator(); iterator.hasNext();) {", "-\t\tString key = (String) iterator.next();", "-\t\tNode method = (Node)tagsSet.get(key);", "+\tTreeMap<String, Node> all = new TreeMap<String, Node>();", "+\tfor (Iterator<String> iterator = tagsSet.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = iterator.next();", "+\t\tNode method = tagsSet.get(key);", "-\tfor (Iterator iterator = set.keySet().iterator(); iterator.hasNext();) {", "-\t\tString key = (String) iterator.next();", "+\tfor (Iterator<String> iterator = set.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = iterator.next();", "-\tfor (Iterator iterator = set64.keySet().iterator(); iterator.hasNext();) {", "-\t\tString key = (String) iterator.next();", "+\tfor (Iterator<String> iterator = set64.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = iterator.next();", "-\tfor (Iterator iterator = all.keySet().iterator(); iterator.hasNext();) {", "-\t\tString key = (String)iterator.next();", "-\t\tNode method = (Node)all.get(key);", "+\tfor (Iterator<String> iterator = all.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = iterator.next();", "+\t\tNode method = all.get(key);", "-\t\tArrayList tags = new ArrayList();", "+\t\tArrayList<String> tags = new ArrayList<String>();", "-\t\tfor (Iterator iterator2 = tags.iterator(); iterator2.hasNext();) {", "-\t\t\tString tag = (String) iterator2.next();", "+\t\tfor (Iterator<String> iterator2 = tags.iterator(); iterator2.hasNext();) {", "+\t\t\tString tag = iterator2.next();"]}], "num": 3238}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ced397e11a6fd0c3dd5aa4c9fd83146", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15c3e57036de8956e2bcd2dd5d969cdd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "c67a9c15e1d189241e01e956e2e9b242a9fda50d", "commitAfterChange": "dc5446ab4c95d58f2fa8f5395a9138a20c9237ec", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  void setBounds (int x, int y, int width, int height)", "signatureAfterChange": "  void setBounds (int x, int y, int width, int height)", "diff": ["-\t\trect.width = width - (arrow != null ? ARROW_WIDTH : 0);", "+\t\trect.width = width;", "+\t\tif ((style & SWT.DROP_DOWN) != 0) rect.width -= ARROW_WIDTH + INSET;", "-\t}", "-\tif (arrow != null) {", "-\t\trect = button.frame();", "-\t\tNSRect arrowRect = new NSRect();", "-\t\tarrowRect.x = width - ARROW_WIDTH;", "-\t\tarrowRect.width = ARROW_WIDTH;", "-\t\tarrowRect.height = rect.height;", "-\t\tarrow.setFrame(arrowRect);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98d8ebf92ca24c43d81eb00e5ad6550d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "7839abafc2697fc9e03d4ccdc0123f26f40d167c", "commitAfterChange": "b3f5c32b33c36513021ff265fa7b9f332e44c257", "methodNumberBeforeChange": 209, "methodNumberAfterChange": 209, "signatureBeforeChange": "  void setToolTipText (Shell shell, String newString)", "signatureAfterChange": "  void setToolTipText (Shell shell, String newString)", "diff": ["-\t\t\tbyte[] buffer = null;", "-\t\t\tif (newString != null && newString.length() > 0) {", "-\t\t\t\tchar[] chars = fixMnemonic(newString, false);", "-\t\t\t\tbuffer = Converter.wcsToMbcs(null, chars, true);", "-\t\t\t}", "-\t\t\tOS.gtk_widget_set_tooltip_text (shell.handle, null);", "-\t\t\tOS.gtk_tooltip_trigger_tooltip_query (OS.gdk_display_get_default ());", "-\t\t\tOS.gtk_widget_set_tooltip_text (shell.handle, buffer);", "+\t\t\tshell.setToolTipText (shell.handle, eventHandle (), newString);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "448ed97fd7c76e366dfc093583d1fdc8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "6f2458ace0a6f47ce0de64336c1150a04c7a0893", "commitAfterChange": "306bec7607b19121918a808335b7ecf61e93fdf9", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": "  void drawChevron(GC gc)", "signatureAfterChange": "  void drawChevron(GC gc)", "diff": ["+\tDisplay display = getDisplay();", "-\tFont f = new Font(getDisplay(), fd);", "-\tint fHeight = f.getFontData()[0].getHeight() * getDisplay().getDPI().y / 72;", "+\tFont f = new Font(display, fd);", "+\tint fHeight = f.getFontData()[0].getHeight() * display.getDPI().y / 72;", "+\tColor chevronBorder = display.getSystemColor(BUTTON_BORDER);", "-\t\t\tColor chevronBorder = single ? getSelectionForeground() : getForeground();", "-\t\t\tDisplay display = getDisplay();", "-\t\t\tgc.setBackground(display.getSystemColor(SWT.COLOR_WHITE));", "+\t\t\tgc.setBackground(display.getSystemColor(BUTTON_FILL));", "-\t\t\tgc.setForeground(borderColor);", "+\t\t\tgc.setForeground(chevronBorder);", "-\t\t\tgc.setForeground(display.getSystemColor(SWT.COLOR_BLACK));", "-\t\t\tDisplay display = getDisplay();", "-\t\t\tgc.setBackground(display.getSystemColor(SWT.COLOR_WHITE));", "+\t\t\tgc.setBackground(display.getSystemColor(BUTTON_FILL));", "-\t\t\tgc.setForeground(borderColor);", "+\t\t\tgc.setForeground(chevronBorder);", "-\t\t\tgc.setForeground(display.getSystemColor(SWT.COLOR_BLACK));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "293ee7398c07b3d2e595dffcc6bc4cf8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/gtk/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "bfa7fdee9c085608d5d05880678feb74b663edf6", "commitAfterChange": "56d7296ca97caab4d55a03fef16b1386812f14a1", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 33, "signatureBeforeChange": " protected void init()", "signatureAfterChange": " protected void init()", "diff": ["-\t//TODO: Should we look at printToFile, or driver/name for \"Print to File\", or both? (see gtk bug 345590)", "-\t\tbyte [] buffer = Converter.wcsToMbcs (null, data.fileName, true);", "-\t\tOS.gtk_print_settings_set(settings, OS.GTK_PRINT_SETTINGS_OUTPUT_URI, buffer);", "-\t}", "-\tif (data.driver.equals(\"GtkPrintBackendFile\") && data.name.equals(\"Print to File\") && data.fileName != null) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\tbyte [] buffer = Converter.wcsToMbcs (null, data.fileName, true);", "-\t\tOS.gtk_print_settings_set(settings, OS.GTK_PRINT_SETTINGS_OUTPUT_URI, buffer);", "+\t\tbyte [] uri = uriFromFilename(data.fileName);", "+\t\tif (uri != null) {", "+\t\t\tOS.gtk_print_settings_set(settings, OS.GTK_PRINT_SETTINGS_OUTPUT_URI, uri);", "+\t\t}"]}], "num": 62436}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e0b536e536fc1159a9e6875c3780f87", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "554907941e81bbf1403469678236ef30", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "5a4ec706c1fb816c9cff4c4e7493b85db9b7b5b8", "commitAfterChange": "30b3672ceb3d2c5d7c5e65c4765952fcea275186", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 83, "signatureBeforeChange": "  LRESULT sendMouseDownEvent (int type, int button, int msg, int wParam, int lParam)", "signatureAfterChange": "  LRESULT sendMouseDownEvent (int type, int button, int msg, int wParam, int lParam)", "diff": ["+\tDisplay display = this.display;", "+\tdisplay.captureChanged = false;", "+\tif (!sendMouseEvent (type, button, handle, msg, wParam, lParam)) {", "+\t\tif (!display.captureChanged && !isDisposed ()) {", "+\t\t\tif (OS.GetCapture () != handle) OS.SetCapture (handle);", "+\t\t}", "+\t\treturn LRESULT.ZERO;", "+\t}", "+\t", "-\tDisplay display = this.display;", "-\tdisplay.captureChanged = false;", "-\tif (!sendMouseEvent (type, button, handle, msg, wParam, lParam)) {", "-\t\tif (!display.captureChanged && !isDisposed ()) {", "-\t\t\tif (OS.GetCapture () != handle) OS.SetCapture (handle);", "+\tif ((style & SWT.FULL_SELECTION) == 0) {", "+\t\tif (hooks (SWT.MeasureItem)) {", "+\t\t\tOS.SendMessage (handle, OS.LVM_SUBITEMHITTEST, 0, pinfo);", "+\t\t\tif (pinfo.iItem == -1) {", "+\t\t\t\tint count = (int)/*64*/OS.SendMessage (handle, OS.LVM_GETITEMCOUNT, 0, 0);", "+\t\t\t\tif (count != 0) {", "+\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\trect.left = OS.LVIR_ICON;", "+\t\t\t\t\tignoreCustomDraw = true;", "+\t\t\t\t\tint /*long*/ code = OS.SendMessage (handle, OS.LVM_GETITEMRECT, 0, rect);", "+\t\t\t\t\tignoreCustomDraw = false;", "+\t\t\t\t\tif (code != 0) {", "+\t\t\t\t\t\tpinfo.x = rect.left;", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SUBITEMHITTEST, 0, pinfo);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (pinfo.iSubItem != 0) pinfo.iItem = -1;", "+\t\t\t}", "-\t\treturn LRESULT.ZERO;", "-", "+\t", "+\t", "+\t/* Determine whether the user has selected an item based on SWT.MeasureItem */", "+\tfullRowSelect = false;", "+\tif (pinfo.iItem != -1) {", "+\t\tif ((style & SWT.FULL_SELECTION) == 0) {", "+\t\t\tif (hooks (SWT.MeasureItem)) {", "+\t\t\t\tfullRowSelect = hitTestSelection (pinfo.iItem, pinfo.x, pinfo.y);", "+\t\t\t}", "+\t\t}", "+\t}", "+", "+\t\tif (fullRowSelect) dragDetect = true;", "+\t}", "+\t", "+\t/*", "+\t* Temporarily set LVS_EX_FULLROWSELECT to allow drag and drop", "+\t* and the mouse to manipulate items based on the results of", "+\t* the SWT.MeasureItem event.", "+\t*/", "+\tif (fullRowSelect) {", "+\t\tOS.UpdateWindow (handle);", "+\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);", "+\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, OS.LVS_EX_FULLROWSELECT, OS.LVS_EX_FULLROWSELECT);", "+\tif (fullRowSelect) {", "+\t\tfullRowSelect = false;", "+\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);", "+\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, OS.LVS_EX_FULLROWSELECT, 0);", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65d1dbb3d7d9f5ac7ce5950585826206", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/internal/image/PNGFileFormat.java", "commitBeforeChange": "d3b92e32ba6e7306ac0ec642259677116bfdd0da", "commitAfterChange": "1ab3725b71ffd1c9b4175fa522e7afe028651147", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " void unloadIntoByteStream(ImageLoader loader)", "signatureAfterChange": " void unloadIntoByteStream(ImageLoader loader)", "diff": ["+\ttry {", "+\t\t/* PNG only supports single image (use MNG for multi-image). */", "+\t\tImageData imageData = loader.data[0];", "+\t", "+\t\t/* Step 1: Write PNG signature. */", "+\t\twriteSignature();", "+\t\t", "+\t\t/* Step 2: Write IHDR chunk. */", "+\t\tint width = imageData.width;", "+\t\tint height = imageData.height;", "+\t\tPaletteData palette = imageData.palette;", "+\t\tbyte colorType = PngIhdrChunk.COLOR_TYPE_RGB;", "+\t\tbyte bitDepth = 8;", "+\t\tif (!palette.isDirect) {", "+\t\t\tcolorType = PngIhdrChunk.COLOR_TYPE_PALETTE;", "+\t\t\tbitDepth = (byte) Math.min(imageData.depth, 8);", "+\t\t}", "+\t\tif (imageData.getTransparencyType() == SWT.TRANSPARENCY_ALPHA) {", "+\t\t\tcolorType = PngIhdrChunk.COLOR_TYPE_RGB_WITH_ALPHA;", "+\t\t}", "+\t\tbyte compressionMethod = 0; // must be zero", "+\t\tbyte filterMethod = 0; // must be zero", "+\t\tbyte interlaceMethod = PngIhdrChunk.INTERLACE_METHOD_NONE;", "+\t\toutputStream.write(new PngIhdrChunk(width, height, bitDepth, colorType, compressionMethod, filterMethod, interlaceMethod).getReference());", "+\t\t", "+\t\t/* Step 3: Write PLTE (palette) chunk, if any. */", "+\t\tif (!palette.isDirect) {", "+\t\t\toutputStream.write(new PngPlteChunk(palette).getReference());", "+\t\t}", "+\t\t", "+\t\t/* Step 4: Write tRNS (transparency) chunk, if any. */", "+\t\tif (imageData.transparentPixel != -1) {", "+\t\t\tRGB transparentRGB = palette.getRGB(imageData.transparentPixel);", "+\t\t\toutputStream.write(new PngTrnsChunk(transparentRGB).getReference());", "+\t\t}", "+\t\t", "+\t\t/* Step 5: Write IDAT chunk. */", "+\t\tcompress(imageData);", "+\t\toutputStream.write(new PngIdatChunk(headerByte1, headerByte2, data, adler).getReference());", "+\t\t", "+\t\t/* Step 6: Write IEND chunk. */", "+\t\toutputStream.write(new PngIendChunk().getReference());", "+\t} catch (IOException e) {", "+\t\tSWT.error(SWT.ERROR_IO, e);", "+\t}", "+}"]}], "num": 49292}
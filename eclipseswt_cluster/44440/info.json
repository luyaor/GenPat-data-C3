{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90e9aa78e59ef9a87d2431d356f93af5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46c839fa8a8db047e203d837c14ab0fd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "ea7476519b9e21c42e4d4550669901e532bedcab", "commitAfterChange": "76b33e0e494479a9009365afe16385a154f070b7", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": " void doPageDown(boolean select, int height)", "signatureAfterChange": " void doPageDown(boolean select, int height)", "diff": ["-\t}", "-\tPoint point = getCaret().getLocation();", "-\tint lineCount = content.getLineCount();", "-\t//int index = getBottomIndex();", "-\tint clientAreaHeight = getClientArea().height;", "-\tint index = getLineIndex(clientAreaHeight);", "-\tint y = 0;", "-\tif (index > 0) {", "-\t\tint linePixel = getLinePixel(index);", "-\t\tint lineHeight = lineCache.getLineHeight(index);", "-\t\ty = Math.max(0, linePixel + lineHeight - clientAreaHeight);", "-\t}", "-\twhile (index < lineCount - 1) {", "-\t\tint paragraphHeight = lineCache.getLineHeight(index);", "-\t\tif (y + paragraphHeight > height) {", "-\t\t\tif (wordWrap) {", "-\t\t\t\tString line = content.getLine(index);", "-\t\t\t\tint lineOffset = content.getOffsetAtLine(index);", "-\t\t\t\tTextLayout layout = renderer.getTextLayout(line, lineOffset);", "-\t\t\t\tint count = layout.getLineCount();", "-\t\t\t\trenderer.disposeTextLayout(layout);", "-\t\t\t} else {", "-\t\t\t\ty = height;", "+\t}\t", "+\tint oldColumnX = columnX;", "+\tint oldHScrollOffset = horizontalScrollOffset;", "+\tif (isFixedLineHeight()) {", "+\t\tint lineCount = content.getLineCount();", "+\t\tint caretLine = getCaretLine();", "+\t\tif (caretLine < lineCount - 1) {", "+\t\t\tint lines = height / lineHeight;", "+\t\t\tint scrollLines = Math.min(lineCount - caretLine - 1, lines);", "+\t\t\t// ensure that scrollLines never gets negative and at leat one ", "+\t\t\t// line is scrolled. fixes bug 5602.", "+\t\t\tscrollLines = Math.max(1, scrollLines);", "+\t\t\tcaretLine += scrollLines;", "+\t\t\t//caretOffset = getOffsetAtMouseLocation(columnX, caretLine); ", "+\t\t\tcaretOffset = getOffsetAtPoint(columnX, getLinePixel(caretLine));", "+\t\t\tif (select) {", "+\t\t\t\tdoSelection(ST.COLUMN_NEXT);", "-\t\t\tbreak;", "+\t\t\t// scroll one page down or to the bottom", "+\t\t\tint verticalMaximum = lineCount * getVerticalIncrement();", "+\t\t\tint pageSize = getClientArea().height;", "+\t\t\tint scrollOffset = verticalScrollOffset + scrollLines * getVerticalIncrement();", "+\t\t\tif (scrollOffset + pageSize > verticalMaximum) {", "+\t\t\t\tscrollOffset = verticalMaximum - pageSize;", "+\t\t\t}", "+\t\t\tif (scrollOffset > verticalScrollOffset) {", "+\t\t\t\tsetVerticalScrollOffset(scrollOffset, true);", "+\t\t\t}", "-\t\ty += paragraphHeight;", "-\t\tindex++;", "-\t}", "-\tif (y == 0) return;", "-\tsetVerticalScrollOffset(verticalScrollOffset + y, true);", "-\tcaretOffset = getOffsetAtPoint(point.x, point.y + 1);", "-\tsetCaretLocation();", "+\t} else {", "+\t\tint oldVScrollOffset = verticalScrollOffset;", "+\t\tint caretY = getCaret().getLocation().y;", "+\t\tboolean scroll = getLineIndex(getClientArea().height) != content.getLineCount() - 1;", "+\t\tif (scroll) {", "+\t\t\tsetVerticalScrollOffset(verticalScrollOffset + height, true);", "+\t\t\tclaimBottomFreeSpace();", "+\t\t}", "+\t\tcaretY += height - (verticalScrollOffset - oldVScrollOffset);", "+\t\tcaretOffset = getOffsetAtPoint(columnX, caretY);", "+\t\tsetCaretLocation();", "+\t\tif (select) {", "+\t\t\tdoSelection(ST.COLUMN_NEXT);", "+\t\t}", "+\t}\t", "+\tshowCaret();", "+\tint hScrollChange = oldHScrollOffset - horizontalScrollOffset;", "+\tcolumnX = oldColumnX + hScrollChange;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17a0c56e19c606c0e407761c7eddae3a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 232, "methodNumberAfterChange": 83, "signatureBeforeChange": " void doPageDown(boolean select, int lines)", "signatureAfterChange": " void doPageDown(boolean select, int height)", "diff": ["-void doPageDown(boolean select, int lines) {", "-\tint lineCount = content.getLineCount();", "-\tint oldColumnX = columnX;", "-\tint oldHScrollOffset = horizontalScrollOffset;", "-\tint caretLine;", "-\t", "+void doPageDown(boolean select, int height) {", "-\t}", "-\tcaretLine = getCaretLine();", "-\tif (caretLine < lineCount - 1) {", "-\t\tint verticalMaximum = lineCount * getVerticalIncrement();", "-\t\tint pageSize = getClientArea().height;", "-\t\tint scrollLines = Math.min(lineCount - caretLine - 1, lines);", "-\t\tint scrollOffset;", "-\t\t", "-\t\t// ensure that scrollLines never gets negative and at leat one ", "-\t\t// line is scrolled. fixes bug 5602.", "-\t\tscrollLines = Math.max(1, scrollLines);", "-\t\tcaretLine += scrollLines;", "-\t\tcaretOffset = getOffsetAtMouseLocation(columnX, caretLine); ", "+\t}\t", "+\tint oldColumnX = columnX;", "+\tint oldHScrollOffset = horizontalScrollOffset;", "+\tif (isFixedLineHeight()) {", "+\t\tint lineCount = content.getLineCount();", "+\t\tint caretLine = getCaretLine();", "+\t\tif (caretLine < lineCount - 1) {", "+\t\t\tint lineHeight = renderer.getLineHeight();", "+\t\t\tint lines = height / lineHeight;", "+\t\t\tint scrollLines = Math.min(lineCount - caretLine - 1, lines);", "+\t\t\t// ensure that scrollLines never gets negative and at leat one ", "+\t\t\t// line is scrolled. fixes bug 5602.", "+\t\t\tscrollLines = Math.max(1, scrollLines);", "+\t\t\tcaretOffset = getOffsetAtPoint(columnX, getLinePixel(caretLine + scrollLines));", "+\t\t\tif (select) {", "+\t\t\t\tdoSelection(ST.COLUMN_NEXT);", "+\t\t\t}", "+\t\t\t// scroll one page down or to the bottom", "+\t\t\tint verticalMaximum = lineCount * getVerticalIncrement();", "+\t\t\tint pageSize = getClientArea().height;", "+\t\t\tint scrollOffset = getVerticalScrollOffset() + scrollLines * getVerticalIncrement();", "+\t\t\tif (scrollOffset + pageSize > verticalMaximum) {", "+\t\t\t\tscrollOffset = verticalMaximum - pageSize;", "+\t\t\t}", "+\t\t\tif (scrollOffset > getVerticalScrollOffset()) {", "+\t\t\t\tscrollVertical(scrollOffset - getVerticalScrollOffset(), true);", "+\t\t\t}", "+\t\t}", "+\t} else {", "+\t\tint oldVScrollOffset = getVerticalScrollOffset();", "+\t\tint caretY = getCaret().getLocation().y;", "+\t\tboolean scroll = getLineIndex(getClientArea().height) != content.getLineCount() - 1;", "+\t\tif (scroll) {", "+\t\t\tscrollVertical(height, true);", "+\t\t\tclaimBottomFreeSpace();", "+\t\t}", "+\t\tcaretY += height - (getVerticalScrollOffset() - oldVScrollOffset);", "+\t\tcaretOffset = getOffsetAtPoint(columnX, caretY);", "+\t\tsetCaretLocation();", "-\t\t// scroll one page down or to the bottom", "-\t\tscrollOffset = verticalScrollOffset + scrollLines * getVerticalIncrement();", "-\t\tif (scrollOffset + pageSize > verticalMaximum) {", "-\t\t\tscrollOffset = verticalMaximum - pageSize;", "-\t\t}", "-\t\tif (scrollOffset > verticalScrollOffset) {\t\t", "-\t\t\tsetVerticalScrollOffset(scrollOffset, true);", "-\t\t}", "-\t}", "-\t// explicitly go to the calculated caret line. may be different ", "-\t// from content.getLineAtOffset(caretOffset) when in word wrap mode", "-\tshowCaret(caretLine);", "-\t// restore the original horizontal caret position", "+\t}\t", "+\tshowCaret();"]}], "num": 44440}
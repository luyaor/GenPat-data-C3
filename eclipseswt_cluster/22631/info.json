{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "905bfd25a2841ced58ec2d0907eb6dbc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5ba4d61499144f84d79be1a0a5dd949", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "3b350dd4c4b9460951698e03648662ba16994245", "commitAfterChange": "21e23b791a319e5180c60f1da8d0340d3dcffe74", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 88, "signatureBeforeChange": " public void setSelection(int index)", "signatureAfterChange": " public void setSelection(int index)", "diff": ["-\tif (!single) {", "-\t\tif (oldIndex != -1) {", "-\t\t\titems[oldIndex].closeImageState = NONE;", "-\t\t}", "-\t\titems[selectedIndex].closeImageState = NORMAL;", "+\tif (oldIndex != -1) {", "+\t\titems[oldIndex].closeImageState = NONE;", "+\titems[selectedIndex].closeImageState = NORMAL;", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2675199c473d38b364a9cdde6527870c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "8e70a2fd959c494ba8bd65fbe0be155b1733c20f", "commitAfterChange": "f735e96c5f274596870c6e7656dfa81cdc99b43a", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["-\tif (!isEmbedded) {", "-\t\t/*", "-\t\t * Feature in the Macintosh.  On OS 10.2, it is necessary", "-\t\t * to explicitly check in with the Process Manager and set", "-\t\t * the current process to be the front process in order for", "-\t\t * windows to come to the front by default.  The fix is call", "-\t\t * both GetCurrentProcess() and SetFrontProcess().", "-\t\t * ", "-\t\t * NOTE: It is not actually necessary to use the process", "-\t\t * serial number returned by GetCurrentProcess() in the", "-\t\t * call to SetFrontProcess() (ie. kCurrentProcess can be", "-\t\t * used) but both functions must be called in order for", "-\t\t * windows to come to the front.", "-\t\t */", "-\t\tint [] psn = new int [2];", "-\t\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "-\t\t\tint pid = OS.getpid ();", "-\t\t\tint /*long*/ ptr = getAppName().UTF8String();", "-\t\t\tif (ptr != 0) OS.CPSSetProcessName (psn, ptr);", "-\t\t\tOS.TransformProcessType (psn, OS.kProcessTransformToForegroundApplication);", "-\t\t\tOS.SetFrontProcess (psn);", "-\t\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid));", "-\t\t\tif (ptr != 0) {", "-\t\t\t\tNSString path = NSString.stringWithUTF8String (ptr);", "-\t\t\t\tNSImage image = (NSImage) new NSImage().alloc();", "-\t\t\t\timage = image.initByReferencingFile(path);", "-\t\t\t\tdockImage = image;", "-\t\t\t\tapplication.setApplicationIconImage(image);", "-\t\t\t}", "+\t/*", "+\t * Feature in the Macintosh.  On OS 10.2, it is necessary", "+\t * to explicitly check in with the Process Manager and set", "+\t * the current process to be the front process in order for", "+\t * windows to come to the front by default.  The fix is call", "+\t * both GetCurrentProcess() and SetFrontProcess().", "+\t * ", "+\t * NOTE: It is not actually necessary to use the process", "+\t * serial number returned by GetCurrentProcess() in the", "+\t * call to SetFrontProcess() (ie. kCurrentProcess can be", "+\t * used) but both functions must be called in order for", "+\t * windows to come to the front.", "+\t */", "+\tint [] psn = new int [2];", "+\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "+\t\tint pid = OS.getpid ();", "+\t\tint /*long*/ ptr = getAppName().UTF8String();", "+\t\tif (ptr != 0) OS.CPSSetProcessName (psn, ptr);", "+\t\tOS.TransformProcessType (psn, OS.kProcessTransformToForegroundApplication);", "+\t\tOS.SetFrontProcess (psn);", "+\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid));", "+\t\tif (ptr != 0) {", "+\t\t\tNSString path = NSString.stringWithUTF8String (ptr);", "+\t\t\tNSImage image = (NSImage) new NSImage().alloc();", "+\t\t\timage = image.initByReferencingFile(path);", "+\t\t\tdockImage = image;", "+\t\t\tapplication.setApplicationIconImage(image);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4bf507019d47690776909d62fcdae04", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "a0b17ddcd82034f148c4a13380770610bd7a9c5a", "commitAfterChange": "95e3cb8908d279494afb41e5472d5319ecdee12e", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": " boolean updateTabHeight(int oldHeight, boolean force)", "signatureAfterChange": " boolean updateTabHeight(int oldHeight, boolean force)", "diff": ["-\tif (!simple) {", "-\t\tif (onBottom) {", "-\t\t\tcurve = bezier(0, tabHeight + 2,", "-\t\t\t               CURVE_LEFT, tabHeight + 2,", "-\t\t\t\t\t       CURVE_WIDTH - CURVE_RIGHT, 1,", "-\t\t\t               CURVE_WIDTH, 1,", "-\t\t\t               CURVE_WIDTH);", "-\t\t\t// workaround to get rid of blip at end of bezier", "-\t\t\tint index = -1;", "-\t\t\tfor (int i = 0; i < curve.length/2; i++) {", "-\t\t\t\tif (curve[2*i+1] > tabHeight) {", "-\t\t\t\t\tindex = i;", "-\t\t\t\t} else {", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "+\tif (onBottom) {", "+\t\tcurve = bezier(0, tabHeight + 2,", "+\t\t               CURVE_LEFT, tabHeight + 2,", "+\t\t\t\t       CURVE_WIDTH - CURVE_RIGHT, 1,", "+\t\t               CURVE_WIDTH, 1,", "+\t\t               CURVE_WIDTH);", "+\t\t// workaround to get rid of blip at end of bezier", "+\t\tint index = -1;", "+\t\tfor (int i = 0; i < curve.length/2; i++) {", "+\t\t\tif (curve[2*i+1] > tabHeight) {", "+\t\t\t\tindex = i;", "+\t\t\t} else {", "+\t\t\t\tbreak;", "-\t\t\tif (index > 0) {", "-\t\t\t\tint[] newCurve = new int[curve.length - 2*(index-1)];", "-\t\t\t\tSystem.arraycopy(curve, 2*(index-1), newCurve, 0, newCurve.length);", "-\t\t\t\tcurve = newCurve;", "-\t\t\t}\t", "-\t\t} else {", "-\t\t\tcurve = bezier(0, 0,", "-\t\t\t               CURVE_LEFT, 0, ", "-\t\t\t               CURVE_WIDTH - CURVE_RIGHT, tabHeight + 1,", "-\t\t\t               CURVE_WIDTH, tabHeight + 1,", "-\t\t\t               CURVE_WIDTH);", "+\t\tif (index > 0) {", "+\t\t\tint[] newCurve = new int[curve.length - 2*(index-1)];", "+\t\t\tSystem.arraycopy(curve, 2*(index-1), newCurve, 0, newCurve.length);", "+\t\t\tcurve = newCurve;", "+\t\t}\t", "+\t} else {", "+\t\tcurve = bezier(0, 0,", "+\t\t               CURVE_LEFT, 0, ", "+\t\t               CURVE_WIDTH - CURVE_RIGHT, tabHeight + 1,", "+\t\t               CURVE_WIDTH, tabHeight + 1,", "+\t\t               CURVE_WIDTH);"]}], "num": 22631}
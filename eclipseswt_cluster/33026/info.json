{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "edfccd33c735f008b3c2ce6c84bdcff4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86626ee2af78d4d24d2f7a5794e199f1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "17d5bcbf142c35cae2dbd838d742b3d14d3d4742", "commitAfterChange": "87acbd6a077adb5322492cfda574017291005ec0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "  void drawBorder(GC gc, int x, int y, GdkColor selectionColor)", "signatureAfterChange": "  void drawBorder(GC gc, int x, int y, GdkColor selectionColor)", "diff": ["-\t\tif (style != null && style.borderStyle != SWT.NONE) {", "-\t\t\tint byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, styles[i].start) - ptr);", "-\t\t\tint byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, styles[i+1].start) - ptr);", "-\t\t\tint[] ranges = new int[]{byteStart, byteEnd};", "-\t\t\tint /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);", "-\t\t\tif (rgn != 0) {", "-\t\t\t\tint[] nRects = new int[1];", "-\t\t\t\tint /*long*/[] rects = new int /*long*/[1];", "-\t\t\t\tOS.gdk_region_get_rectangles(rgn, rects, nRects);", "-\t\t\t\tGdkRectangle rect = new GdkRectangle();", "+\t\tif (style == null) continue;", "+\t\tboolean drawUnderline = false;", "+\t\tif (style.underline && style.underlineColor != null && OS.GTK_VERSION < OS.VERSION(2, 6, 0)) drawUnderline = true;", "+\t\tif (style.underline && style.underlineStyle == SWT.UNDERLINE_ERROR && OS.GTK_VERSION < OS.VERSION(2, 4, 0)) drawUnderline = true;", "+\t\tboolean drawStrikeout = false;", "+\t\tif (style.strikeout && style.strikeoutColor != null && OS.GTK_VERSION < OS.VERSION(2, 6, 0)) drawStrikeout = true;", "+\t\tboolean drawBorder = style.borderStyle != SWT.NONE;", "+\t\tif (!drawUnderline && !drawBorder && !drawStrikeout) continue;", "+", "+\t\tint byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, styles[i].start) - ptr);", "+\t\tint byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, styles[i+1].start) - ptr);", "+\t\tint[] ranges = new int[]{byteStart, byteEnd};", "+\t\tint /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);", "+\t\tif (rgn != 0) {", "+\t\t\tint[] nRects = new int[1];", "+\t\t\tint /*long*/[] rects = new int /*long*/[1];", "+\t\t\tOS.gdk_region_get_rectangles(rgn, rects, nRects);", "+\t\t\tGdkRectangle rect = new GdkRectangle();", "+\t\t\tif (drawBorder) {", "-\t\t\t\tif (rects[0] != 0) OS.g_free(rects[0]);", "-\t\t\t\tOS.gdk_region_destroy(rgn);", "+\t\t\tif (drawUnderline) {", "+\t\t\t\tGdkColor color = selectionColor;", "+\t\t\t\tif (color == null && style.underlineColor != null) color = style.underlineColor.handle;", "+\t\t\t\tif (color == null) color = data.foreground;", "+\t\t\t\tOS.gdk_gc_set_foreground(gdkGC, color);", "+\t\t\t\tint underlineThickness = 1;", "+\t\t\t\tOS.gdk_gc_set_line_attributes(gdkGC, underlineThickness, OS.GDK_LINE_SOLID, OS.GDK_CAP_BUTT, OS.GDK_JOIN_MITER);", "+\t\t\t\tfor (int j=0; j<nRects[0]; j++) {", "+\t\t\t\t\tOS.memmove(rect, rects[0] + (j * GdkRectangle.sizeof), GdkRectangle.sizeof);", "+\t\t\t\t\tint offset = getOffset(rect.x - x, rect.y - y, null);", "+\t\t\t\t\tint lineIndex = getLineIndex(offset);", "+\t\t\t\t\tFontMetrics metrics = getLineMetrics(lineIndex);", "+\t\t\t\t\tint underlineY = rect.y + metrics.ascent + 1 - style.rise;", "+\t\t\t\t\tswitch (style.underlineStyle) {", "+\t\t\t\t\t\tcase SWT.UNDERLINE_ERROR: {", "+\t\t\t\t\t\t\tint squigglyThickness = 1;", "+\t\t\t\t\t\t\tint squigglyHeight = 2 * squigglyThickness;", "+\t\t\t\t\t\t\tint squigglyY = Math.min(underlineY, rect.y + rect.height - squigglyHeight - 1);", "+\t\t\t\t\t\t\tint[] points = computePolyline(rect.x, squigglyY, rect.x + rect.width, squigglyY + squigglyHeight);", "+\t\t\t\t\t\t\tOS.gdk_draw_lines(data.drawable, gdkGC, points, points.length / 2);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcase SWT.UNDERLINE_DOUBLE:", "+\t\t\t\t\t\t\tOS.gdk_draw_line(data.drawable, gdkGC, rect.x, underlineY + underlineThickness * 2, rect.x + rect.width, underlineY + underlineThickness * 2);", "+\t\t\t\t\t\t\t//FALLTHROUGH", "+\t\t\t\t\t\tcase SWT.UNDERLINE_SINGLE:", "+\t\t\t\t\t\t\tOS.gdk_draw_line(data.drawable, gdkGC, rect.x, underlineY, rect.x + rect.width, underlineY);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (drawStrikeout) {", "+\t\t\t\tGdkColor color = selectionColor;", "+\t\t\t\tif (color == null && style.strikeoutColor != null) color = style.strikeoutColor.handle;", "+\t\t\t\tif (color == null) color = data.foreground;", "+\t\t\t\tOS.gdk_gc_set_foreground(gdkGC, color);", "+\t\t\t\tint strikeoutThickness = 1;", "+\t\t\t\tOS.gdk_gc_set_line_attributes(gdkGC, strikeoutThickness, OS.GDK_LINE_SOLID, OS.GDK_CAP_BUTT, OS.GDK_JOIN_MITER);", "+\t\t\t\tfor (int j=0; j<nRects[0]; j++) {", "+\t\t\t\t\tOS.memmove(rect, rects[0] + (j * GdkRectangle.sizeof), GdkRectangle.sizeof);", "+\t\t\t\t\tint strikeoutY = rect.y + rect.height / 2;", "+\t\t\t\t\tOS.gdk_draw_line(data.drawable, gdkGC, rect.x, strikeoutY, rect.x + rect.width - 1, strikeoutY);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (rects[0] != 0) OS.g_free(rects[0]);", "+\t\t\tOS.gdk_region_destroy(rgn);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fab13b04144e5c9f2fc425b08a81065e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "ab0b2d3bbe9918e6c436a9c99106bcc28d4fcea4", "commitAfterChange": "1aa76e023bb4927eb3b7cf526018017f11838086", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  void drawBorder(GC gc, int x, int y, GdkColor selectionColor)", "signatureAfterChange": "  void drawBorder(GC gc, int x, int y, GdkColor selectionColor)", "diff": ["-\t\tboolean drawUnderline = false;", "-\t\tif (style.underline && style.underlineColor != null) drawUnderline = true;", "-\t\tif (style.underline && style.underlineStyle == SWT.UNDERLINE_ERROR && OS.GTK_VERSION < OS.VERSION(2, 4, 0)) drawUnderline = true;", "-\t\tboolean drawStrikeout = false;", "-\t\tif (style.strikeout && style.strikeoutColor != null) drawStrikeout = true;", "+\t\t", "-\t\tif (!drawUnderline && !drawBorder && !drawStrikeout) continue;", "-", "-\t\tint start = translateOffset(styles[i].start);", "-\t\tint end = translateOffset(styles[i+1].start - 1);", "-\t\tint byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, start) - ptr);", "-\t\tint byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, end + 1) - ptr);", "-\t\tint[] ranges = new int[]{byteStart, byteEnd};", "-\t\tint /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);", "-\t\tif (rgn != 0) {", "-\t\t\tint[] nRects = new int[1];", "-\t\t\tint /*long*/[] rects = new int /*long*/[1];", "-\t\t\tOS.gdk_region_get_rectangles(rgn, rects, nRects);", "-\t\t\tGdkRectangle rect = new GdkRectangle();", "-\t\t\tif (drawBorder) {", "+\t\tif (drawBorder && !style.isAdherentBorder(styles[i+1].style)) {", "+\t\t\tint start = styles[i].start;", "+\t\t\tfor (int j = i; j > 0 && style.isAdherentBorder(styles[j-1].style); j--) {", "+\t\t\t\tstart = styles[j - 1].start;", "+\t\t\t}", "+\t\t\tstart = translateOffset(start);", "+\t\t\tint end = translateOffset(styles[i+1].start - 1);", "+\t\t\tint byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, start) - ptr);", "+\t\t\tint byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, end + 1) - ptr);", "+\t\t\tint[] ranges = new int[]{byteStart, byteEnd};", "+\t\t\tint /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);", "+\t\t\tif (rgn != 0) {", "+\t\t\t\tint[] nRects = new int[1];", "+\t\t\t\tint /*long*/[] rects = new int /*long*/[1];", "+\t\t\t\tOS.gdk_region_get_rectangles(rgn, rects, nRects);", "+\t\t\t\tGdkRectangle rect = new GdkRectangle();", "+\t\t\t\tint width = 1;", "+\t\t\t\tfloat[] dashes = null;", "+\t\t\t\tswitch (style.borderStyle) {", "+\t\t\t\t\tcase SWT.BORDER_SOLID: break;", "+\t\t\t\t\tcase SWT.BORDER_DASH: dashes = width != 0 ? GC.LINE_DASH : GC.LINE_DASH_ZERO; break;", "+\t\t\t\t\tcase SWT.BORDER_DOT: dashes = width != 0 ? GC.LINE_DOT : GC.LINE_DOT_ZERO; break;", "+\t\t\t\t}", "-\t\t\t\t\tint width = 1;", "-\t\t\t\t\tfloat[] dashes = null;", "-\t\t\t\t\tswitch (style.borderStyle) {", "-\t\t\t\t\t\tcase SWT.BORDER_SOLID: break;", "-\t\t\t\t\t\tcase SWT.BORDER_DASH: dashes = width != 0 ? GC.LINE_DASH : GC.LINE_DASH_ZERO; break;", "-\t\t\t\t\t\tcase SWT.BORDER_DOT: dashes = width != 0 ? GC.LINE_DOT : GC.LINE_DOT_ZERO; break;", "-\t\t\t\t\t}", "-\t\t\t\t\tint width = 1;", "-\t\t\t\t\tfloat[] dashes = null;", "-\t\t\t\t\tswitch (style.borderStyle) {", "-\t\t\t\t\t\tcase SWT.BORDER_SOLID: break;", "-\t\t\t\t\t\tcase SWT.BORDER_DASH: dashes = width != 0 ? GC.LINE_DASH : GC.LINE_DASH_ZERO; break;", "-\t\t\t\t\t\tcase SWT.BORDER_DOT: dashes = width != 0 ? GC.LINE_DOT : GC.LINE_DOT_ZERO; break;", "-\t\t\t\t\t}", "+\t\t\t\tif (rects[0] != 0) OS.g_free(rects[0]);", "+\t\t\t\tOS.gdk_region_destroy(rgn);", "-\t\t\tif (drawUnderline) {", "+\t\t}", "+\t\t", "+\t\tboolean drawUnderline = false;", "+\t\tif (style.underline && style.underlineColor != null) drawUnderline = true;", "+\t\tif (style.underline && style.underlineStyle == SWT.UNDERLINE_ERROR && OS.GTK_VERSION < OS.VERSION(2, 4, 0)) drawUnderline = true;", "+\t\tif (drawUnderline && !style.isAdherentUnderline(styles[i+1].style)) {", "+\t\t\tint start = styles[i].start;", "+\t\t\tfor (int j = i; j > 0 && style.isAdherentUnderline(styles[j-1].style); j--) {", "+\t\t\t\tstart = styles[j - 1].start;", "+\t\t\t}", "+\t\t\tstart = translateOffset(start);", "+\t\t\tint end = translateOffset(styles[i+1].start - 1);", "+\t\t\tint byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, start) - ptr);", "+\t\t\tint byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, end + 1) - ptr);", "+\t\t\tint[] ranges = new int[]{byteStart, byteEnd};", "+\t\t\tint /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);", "+\t\t\tif (rgn != 0) {", "+\t\t\t\tint[] nRects = new int[1];", "+\t\t\t\tint /*long*/[] rects = new int /*long*/[1];", "+\t\t\t\tOS.gdk_region_get_rectangles(rgn, rects, nRects);", "+\t\t\t\tGdkRectangle rect = new GdkRectangle();", "+\t\t\t\t\tif (gcValues == null) {", "+\t\t\t\t\t\tgcValues = new GdkGCValues();", "+\t\t\t\t\t\tOS.gdk_gc_get_values(gdkGC, gcValues);", "+\t\t\t\t\t}", "+\t\t\t\tif (rects[0] != 0) OS.g_free(rects[0]);", "+\t\t\t\tOS.gdk_region_destroy(rgn);", "-\t\t\tif (drawStrikeout) {", "+\t\t}", "+\t\t", "+\t\tboolean drawStrikeout = false;", "+\t\tif (style.strikeout && style.strikeoutColor != null) drawStrikeout = true;", "+\t\tif (drawStrikeout && !style.isAdherentStrikeout(styles[i+1].style)) {", "+\t\t\tint start = styles[i].start;", "+\t\t\tfor (int j = i; j > 0 && style.isAdherentStrikeout(styles[j-1].style); j--) {", "+\t\t\t\tstart = styles[j - 1].start;", "+\t\t\t}", "+\t\t\tstart = translateOffset(start);", "+\t\t\tint end = translateOffset(styles[i+1].start - 1);", "+\t\t\tint byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, start) - ptr);", "+\t\t\tint byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, end + 1) - ptr);", "+\t\t\tint[] ranges = new int[]{byteStart, byteEnd};", "+\t\t\tint /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);", "+\t\t\tif (rgn != 0) {", "+\t\t\t\tint[] nRects = new int[1];", "+\t\t\t\tint /*long*/[] rects = new int /*long*/[1];", "+\t\t\t\tOS.gdk_region_get_rectangles(rgn, rects, nRects);", "+\t\t\t\tGdkRectangle rect = new GdkRectangle();", "+\t\t\t\t\tif (gcValues == null) {", "+\t\t\t\t\t\tgcValues = new GdkGCValues();", "+\t\t\t\t\t\tOS.gdk_gc_get_values(gdkGC, gcValues);", "+\t\t\t\t\t}", "+\t\t\t\tif (rects[0] != 0) OS.g_free(rects[0]);", "+\t\t\t\tOS.gdk_region_destroy(rgn);", "-\t\t\tif (rects[0] != 0) OS.g_free(rects[0]);", "-\t\t\tOS.gdk_region_destroy(rgn);"]}], "num": 33026}
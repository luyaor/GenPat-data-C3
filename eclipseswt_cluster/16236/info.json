{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d73cb7b20536fb38d0c41ca188292fdd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aef8d1ff90a5d19de52f501852428b6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "cc7a79cec8920b1b6175a6c2124e7f63a3823262", "commitAfterChange": "d8f34c9ec09bc11f5d7b71293f9d378725f3146c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": "  int drawItemProc (int browser, int id, int property, int itemState, int theRect, int gdDepth, int colorDevice)", "signatureAfterChange": "  int drawItemProc (int browser, int id, int property, int itemState, int theRect, int gdDepth, int colorDevice)", "diff": ["+\tint columnIndex = 0;", "+\tif (columnCount > 0) {", "+\t\tfor (columnIndex=0; columnIndex<columnCount; columnIndex++) {", "+\t\t\tif (columns [columnIndex].id == property) break;", "+\t\t}", "+\t\tif (columnIndex == columnCount) return OS.noErr;", "+\t}", "+\tif ((style & SWT.VIRTUAL) != 0) {", "+\t\tif (!item.cached) {", "+\t\t\tif (!checkData (item, false)) return OS.noErr;", "+\t\t\tif (setScrollWidth (item)) {", "+\t\t\t\tRect rect = new Rect();", "+\t\t\t\tif (OS.GetDataBrowserItemPartBounds (handle, id, property, OS.kDataBrowserPropertyEnclosingPart, rect) == OS.noErr) {", "+\t\t\t\t\tredrawWidget (handle, rect.left, rect.top, rect.right, rect.bottom, false);", "+\t\t\t\t}", "+\t\t\t\treturn OS.noErr;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tboolean selected = (itemState & OS.kDataBrowserItemIsSelected) != 0;", "-\tOS.DisposeRgn (clip);", "-\tColor background = item.getBackground ();", "-\tgc.setBackground (background);", "-\tgc.fillRectangle (x - 1, y, itemRect.right - x + 2, itemRect.bottom - y);", "-\tImage image = item.image;", "-\tif (image != null) {", "-\t\tRectangle bounds = image.getBounds ();", "-\t\tgc.drawImage (image, 0, 0, bounds.width, bounds.height, x, y + (height - bounds.height) / 2, bounds.width, bounds.height);", "-\t\tx += bounds.width + 2;", "+\tif (columnCount != 0) {", "+\t\tif (selected && ((style & SWT.FULL_SELECTION) != 0 || columnIndex == 0)) {", "+\t\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "+\t\t} else {", "+\t\t\tgc.setBackground (item.getBackground (columnIndex));\t\t\t", "+\t\t}", "+\t\tif (columnIndex == 0) {", "+\t\t\tgc.fillRectangle (x - 1, y, itemRect.right - x + 2, itemRect.bottom - y);", "+\t\t} else {", "+\t\t\tgc.fillRectangle (itemRect.left, itemRect.top, itemRect.right - itemRect.left, itemRect.bottom - itemRect.top);", "+\t\t}", "-\tFont font = item.getFont ();", "-\tgc.setFont (font);", "-\tPoint extent = gc.stringExtent (item.text);", "-\tif ((itemState & OS.kDataBrowserItemIsSelected) != 0) {", "+\tint rectRgn = OS.NewRgn ();", "+\tOS.RectRgn (rectRgn, rect);", "+\tOS.OffsetRgn (rectRgn, (short)-controlRect.left, (short)-controlRect.top);", "+\tOS.SectRgn (rectRgn, clip, clip);", "+\tOS.DisposeRgn (rectRgn);", "+\tgc.setClipping (Region.carbon_new (display, clip));", "+\tOS.DisposeRgn (clip);", "+\tImage image = item.getImage (columnIndex);", "+\tString text = item.getText (columnIndex);", "+\tgc.setFont (item.getFont (columnIndex));", "+\tPoint extent = gc.stringExtent (text);", "+\tint itemWidth = extent.x;", "+\tRectangle imageBounds = null;", "+\tif (image != null) {", "+\t\timageBounds = image.getBounds ();", "+\t\titemWidth += this.imageBounds.width + 2;", "+\t}", "+\tif (columnCount != 0) {", "+\t\tTreeColumn column = columns [columnIndex];", "+\t\tif ((column.style & SWT.CENTER) != 0) x += (width - itemWidth) / 2;", "+\t\tif ((column.style & SWT.RIGHT) != 0) x += width - itemWidth;", "+\t}", "+\tif (image != null) {", "+\t\tgc.drawImage (image, 0, 0, imageBounds.width, imageBounds.height, x, y + (height - this.imageBounds.height) / 2, this.imageBounds.width, this.imageBounds.height);", "+\t\tx += this.imageBounds.width + 2;", "+\t}", "+\tif (selected && ((style & SWT.FULL_SELECTION) != 0 || columnIndex == 0)) {", "-\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "-\t\tgc.fillRectangle (x - 1, y, extent.x + 2, height);", "+\t\tif (columnCount == 0) {", "+\t\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "+\t\t\tgc.fillRectangle (x - 1, y, extent.x + 2, height);", "+\t\t}", "-\t\tColor foreground = item.getForeground ();", "+\t\tif (columnCount == 0) {", "+\t\t\tgc.setBackground (item.getBackground ());", "+\t\t\tgc.fillRectangle (x - 1, y, extent.x + 2, height);", "+\t\t}", "+\t\tColor foreground = item.getForeground (columnIndex);", "-\tgc.drawString (item.text, x, y + (height - extent.y) / 2, true);", "+\tgc.drawString (text, x, y + (height - extent.y) / 2, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec32c65017b19cc9a88183f74782fd44", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "4e26a427ac42e69f96956a4289fb585a800b6717", "commitAfterChange": "c2b86fdf9049f110bf26f3d531b6cb6b5755b030", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 96, "signatureBeforeChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "diff": ["-\t\t\t\tif (column != null && !column.getResizable ()) {", "+\t\t\t\tif (column == null || !column.getResizable ()) {", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.HDN_BEGINDRAG: {", "+\t\t\t\tNMHEADER phdn = new NMHEADER ();", "+\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "+\t\t\t\tif (phdn.iItem != -1) {", "+\t\t\t\t\tTableColumn column = columns [phdn.iItem];", "+\t\t\t\t\tif (column == null || !column.getMoveable ()) {", "+\t\t\t\t\t\tOS.ReleaseCapture ();", "+\t\t\t\t\t\treturn LRESULT.ONE;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.HDN_ENDDRAG: {", "+\t\t\t\tNMHEADER phdn = new NMHEADER ();", "+\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "+\t\t\t\tif (phdn.iItem != -1 && phdn.pitem != 0) {", "+\t\t\t\t\tHDITEM pitem = new HDITEM ();", "+\t\t\t\t\tOS.MoveMemory (pitem, phdn.pitem, HDITEM.sizeof);", "+\t\t\t\t\tif ((pitem.mask & OS.HDI_ORDER) != 0 && pitem.iOrder != -1) {", "+\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\tif (count == 1 && columns [0] == null) break;", "+\t\t\t\t\t\tint [] order = new int [count];", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_GETCOLUMNORDERARRAY, count, order);", "+\t\t\t\t\t\tint index = 0;", "+\t\t\t\t\t\twhile (index < order.length) {", "+\t\t\t\t\t\t \tif (order [index] == phdn.iItem) break;", "+\t\t\t\t\t\t\tindex++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (index == order.length) index = 0;", "+\t\t\t\t\t\tif (index == pitem.iOrder) break;", "+\t\t\t\t\t\tint start = Math.min (index, pitem.iOrder);", "+\t\t\t\t\t\tint end = Math.max (index, pitem.iOrder);", "+\t\t\t\t\t\tfor (int i=start; i<=end; i++) {", "+\t\t\t\t\t\t\tTableColumn column = columns [order [i]];", "+\t\t\t\t\t\t\tif (!column.isDisposed ()) {", "+\t\t\t\t\t\t\t\tcolumn.postEvent (SWT.Move);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tfor (int i=phdn.iItem+1; i<count; i++) {", "-\t\t\t\t\t\t\t\t\tif (!newColumns [i].isDisposed ()) {", "-\t\t\t\t\t\t\t\t\t\tnewColumns [i].sendEvent (SWT.Move);", "+\t\t\t\t\t\t\t\tint [] order = new int [count];", "+\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_GETCOLUMNORDERARRAY, count, order);", "+\t\t\t\t\t\t\t\tboolean moved = false;", "+\t\t\t\t\t\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\t\t\t\t\t\tTableColumn nextColumn = newColumns [order [i]];", "+\t\t\t\t\t\t\t\t\tif (moved && !nextColumn.isDisposed ()) {", "+\t\t\t\t\t\t\t\t\t\tnextColumn.sendEvent (SWT.Move);", "+\t\t\t\t\t\t\t\t\tif (nextColumn == column) moved = true;"]}], "num": 16236}
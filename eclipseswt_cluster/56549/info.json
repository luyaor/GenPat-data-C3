{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "06d5cfe65f54d61b7d10c22d35eb35e9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b50a6babeef424ef2340d8738e975cc5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "1215228ca28cd877225ea2d6d4c5dd6eb8a8d47a", "commitAfterChange": "437b26428f10a35a326ef6b319e71308ad9cdb90", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 97, "signatureBeforeChange": "  int getClipping(int widget, int topWidget, boolean clipChildren, boolean clipSiblings, int[] child_tiles)", "signatureAfterChange": "  int getClipping(int widget, int topWidget, boolean clipChildren, boolean clipSiblings, int[] child_tiles)", "diff": ["-\tint child_tile = 0;", "-\tint widget_tile = OS.PhGetTile(); // NOTE: PhGetTile native initializes the tile", "+\tif(OS.QNX_MAJOR >= 6 && OS.QNX_MINOR >= 3)", "+        if(widget > 0)", "+        {", "+            int visTiles = OS.PtGetVisibleTiles(widget);", "+            PhPoint_t pt = new PhPoint_t();", "+            PhRect_t tranRect = new PhRect_t();", "+            OS.PtWidgetExtent(widget, tranRect);", "+            OS.PtWidgetOffset(widget, pt);", "+            pt.x += tranRect.ul_x;", "+            pt.y += tranRect.ul_y;", "+            int tranPoint = OS.malloc(4);", "+            OS.memmove(tranPoint, pt, 4);", "+            OS.PhDeTranslateTiles(visTiles, tranPoint);", "+            return visTiles;", "+        } else", "+        {", "+            return 0;", "+        }", "+    int child_tile = 0;", "+    int widget_tile = OS.PhGetTile();", "+    PhRect_t rect = new PhRect_t();", "+    int args[] = {", "+        1006, 0, 0, 2015, 0, 0", "+    };", "+    if(clipSiblings && OS.PtWidgetClass(topWidget) != OS.PtWindow())", "+    {", "+        for(int temp_widget = topWidget; (temp_widget = OS.PtWidgetBrotherInFront(temp_widget)) != 0;)", "+            if(OS.PtWidgetIsRealized(temp_widget))", "+            {", "+                int tile = OS.PhGetTile();", "+                if(child_tile == 0)", "+                    child_tile = tile;", "+                else", "+                    child_tile = OS.PhAddMergeTiles(tile, child_tile, null);", "+                OS.PtWidgetExtent(temp_widget, tile);", "+                args[1] = args[4] = 0;", "+                OS.PtGetResources(temp_widget, args.length / 3, args);", "+                if((args[1] & 0x100) != 0)", "+                {", "+                    int basic_flags = args[4];", "+                    OS.memmove(rect, tile, 8);", "+                    if((basic_flags & 1) != 0)", "+                        rect.ul_y++;", "+                    if((basic_flags & 2) != 0)", "+                        rect.lr_y--;", "+                    if((basic_flags & 8) != 0)", "+                        rect.ul_x++;", "+                    if((basic_flags & 4) != 0)", "+                        rect.lr_x--;", "+                    OS.memmove(tile, rect, 8);", "+                }", "+            }", "-\tPhRect_t rect = new PhRect_t ();", "-\tint args [] = {OS.Pt_ARG_FLAGS, 0, 0, OS.Pt_ARG_BASIC_FLAGS, 0, 0};", "-\t", "-\t/* Get the rectangle of all siblings in front of the widget */", "-\tif (clipSiblings && OS.PtWidgetClass(topWidget) != OS.PtWindow()) {", "-\t\tint temp_widget = topWidget;", "-\t\twhile ((temp_widget = OS.PtWidgetBrotherInFront(temp_widget)) != 0) {", "-\t\t\tif (OS.PtWidgetIsRealized(temp_widget)) {", "-\t\t\t\tint tile = OS.PhGetTile();", "-\t\t\t\tif (child_tile == 0) child_tile = tile;\t\t\t", "-\t\t\t\telse child_tile = OS.PhAddMergeTiles(tile, child_tile, null);", "-\t\t\t\tOS.PtWidgetExtent(temp_widget, tile); // NOTE: tile->rect", "-\t\t\t\targs [1] = args [4] = 0;", "-\t\t\t\tOS.PtGetResources(temp_widget, args.length / 3, args);", "-\t\t\t\tif ((args [1] & OS.Pt_HIGHLIGHTED) != 0) {", "-\t\t\t\t\tint basic_flags = args [4];", "-\t\t\t\t\tOS.memmove(rect, tile, PhRect_t.sizeof);", "-\t\t\t\t\tif ((basic_flags & OS.Pt_TOP_ETCH) != 0) rect.ul_y++;", "-\t\t\t\t\tif ((basic_flags & OS.Pt_BOTTOM_ETCH) != 0) rect.lr_y--;", "-\t\t\t\t\tif ((basic_flags & OS.Pt_RIGHT_ETCH) != 0) rect.ul_x++;", "-\t\t\t\t\tif ((basic_flags & OS.Pt_LEFT_ETCH) != 0) rect.lr_x--;", "-\t\t\t\t\tOS.memmove(tile, rect, PhRect_t.sizeof);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t/* Translate the siblings rectangles to the widget's coordinates */", "-\t\tOS.PtWidgetCanvas(topWidget, widget_tile); // NOTE: widget_tile->rect", "-\t\tOS.PhDeTranslateTiles(child_tile, widget_tile); // NOTE: widget_tile->rect.ul", "-\t}", "-\t\t\t", "-\t/* Get the rectangle of the widget's children */", "-\tif (clipChildren) {", "-\t\tint temp_widget = OS.PtWidgetChildBack(widget);", "-\t\twhile (temp_widget != 0) {", "-\t\t\tif (OS.PtWidgetIsRealized(temp_widget)) {", "-\t\t\t\tint tile = OS.PhGetTile();", "-\t\t\t\tif (child_tile == 0) child_tile = tile;\t\t\t", "-\t\t\t\telse child_tile = OS.PhAddMergeTiles(tile, child_tile, null);", "-\t\t\t\tOS.PtWidgetExtent(temp_widget, tile); // NOTE: tile->rect", "-\t\t\t\targs [1] = args [4] = 0;", "-\t\t\t\tOS.PtGetResources(temp_widget, args.length / 3, args);", "-\t\t\t\tif ((args [1] & OS.Pt_HIGHLIGHTED) != 0) {", "-\t\t\t\t\tint basic_flags = args [4];", "-\t\t\t\t\tOS.memmove(rect, tile, PhRect_t.sizeof);", "-\t\t\t\t\tif ((basic_flags & OS.Pt_TOP_ETCH) != 0) rect.ul_y++;", "-\t\t\t\t\tif ((basic_flags & OS.Pt_BOTTOM_ETCH) != 0) rect.lr_y--;", "-\t\t\t\t\tif ((basic_flags & OS.Pt_RIGHT_ETCH) != 0) rect.ul_x++;", "-\t\t\t\t\tif ((basic_flags & OS.Pt_LEFT_ETCH) != 0) rect.lr_x--;", "-\t\t\t\t\tOS.memmove(tile, rect, PhRect_t.sizeof);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\ttemp_widget = OS.PtWidgetBrotherInFront(temp_widget);", "-\t\t}", "-\t}", "+        OS.PtWidgetCanvas(topWidget, widget_tile);", "+        OS.PhDeTranslateTiles(child_tile, widget_tile);", "+    }", "+    if(clipChildren)", "+    {", "+        for(int temp_widget = OS.PtWidgetChildBack(widget); temp_widget != 0; temp_widget = OS.PtWidgetBrotherInFront(temp_widget))", "+            if(OS.PtWidgetIsRealized(temp_widget))", "+            {", "+                int tile = OS.PhGetTile();", "+                if(child_tile == 0)", "+                    child_tile = tile;", "+                else", "+                    child_tile = OS.PhAddMergeTiles(tile, child_tile, null);", "+                OS.PtWidgetExtent(temp_widget, tile);", "+                args[1] = args[4] = 0;", "+                OS.PtGetResources(temp_widget, args.length / 3, args);", "+                if((args[1] & 0x100) != 0)", "+                {", "+                    int basic_flags = args[4];", "+                    OS.memmove(rect, tile, 8);", "+                    if((basic_flags & 1) != 0)", "+                        rect.ul_y++;", "+                    if((basic_flags & 2) != 0)", "+                        rect.lr_y--;", "+                    if((basic_flags & 8) != 0)", "+                        rect.ul_x++;", "+                    if((basic_flags & 4) != 0)", "+                        rect.lr_x--;", "+                    OS.memmove(tile, rect, 8);", "+                }", "+            }", "-\t/* Get the widget's rectangle */", "-\tOS.PtWidgetCanvas(widget, widget_tile); // NOTE: widget_tile->rect", "-\tOS.PhDeTranslateTiles(widget_tile, widget_tile); // NOTE: widget_tile->rect.ul", "-", "-", "-\t/* Clip the widget's rectangle from the child/siblings rectangle's */", "-\tif (child_tile != 0) {", "-\t\tif (child_tiles != null) {", "-\t\t\tchild_tiles[0] = OS.PhIntersectTilings(widget_tile, child_tile, new short[1]);", "-\t\t}", "-\t\tint clip_tile = OS.PhClipTilings(widget_tile, child_tile, null);", "-\t\tOS.PhFreeTiles(child_tile);", "-\t\treturn clip_tile;", "-\t}", "-\treturn widget_tile;", "+    }", "+    OS.PtWidgetCanvas(widget, widget_tile);", "+    OS.PhDeTranslateTiles(widget_tile, widget_tile);", "+    if(child_tile != 0)", "+    {", "+        if(child_tiles != null)", "+            child_tiles[0] = OS.PhIntersectTilings(widget_tile, child_tile, new short[1]);", "+        int clip_tile = OS.PhClipTilings(widget_tile, child_tile, null);", "+        OS.PhFreeTiles(child_tile);", "+        return clip_tile;", "+    } else", "+    {", "+        return widget_tile;", "+    }"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a3999291c34b5bd21c3160d10db1001", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "092b2855e233cbf3935eaffa5764177de9f718cb", "commitAfterChange": "d25ad14a7abefd03d6cc5a7336e5b196b082f470", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 39, "signatureBeforeChange": "  void initializeSystemResources ()", "signatureAfterChange": "  void initializeSystemResources ()", "diff": ["+\t", "+\tint tooltipShellHandle = OS.gtk_window_new (OS.GTK_WINDOW_POPUP);", "+\tif (tooltipShellHandle == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\tbyte[] gtk_tooltips = Converter.wcsToMbcs (null, \"gtk-tooltips\", true);", "+\tOS.gtk_widget_set_name (tooltipShellHandle, gtk_tooltips);", "+\tOS.gtk_widget_realize (tooltipShellHandle);", "-\tnullPixmap = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), 1, 1, -1);", "+\tnullPixmap = OS.gdk_pixmap_new (OS.GDK_ROOT_PARENT(), 1, 1, -1);", "-\tOS.memmove (style, OS.gtk_widget_get_style (shellHandle));", "+\tOS.memmove (style, OS.gtk_widget_get_style (shellHandle));\t", "+\tGtkStyle tooltipStyle = new GtkStyle();", "+\tOS.memmove (tooltipStyle, OS.gtk_widget_get_style (tooltipShellHandle));", "-\tgdkColor.pixel = style.text3_pixel;", "-\tgdkColor.red   = style.text3_red;", "-\tgdkColor.green = style.text3_green;", "-\tgdkColor.blue  = style.text3_blue;", "+\tgdkColor.pixel = tooltipStyle.fg0_pixel;", "+\tgdkColor.red   = tooltipStyle.fg0_red;", "+\tgdkColor.green = tooltipStyle.fg0_green;", "+\tgdkColor.blue  = tooltipStyle.fg0_blue;", "-\tgdkColor.pixel = style.base3_pixel;", "-\tgdkColor.red   = style.base3_red;", "-\tgdkColor.green = style.base3_green;", "-\tgdkColor.blue  = style.base3_blue;", "+\tgdkColor.pixel = tooltipStyle.bg0_pixel;", "+\tgdkColor.red   = tooltipStyle.bg0_red;", "+\tgdkColor.green = tooltipStyle.bg0_green;", "+\tgdkColor.blue  = tooltipStyle.bg0_blue;", "+\tOS.gtk_widget_destroy (tooltipShellHandle);"]}], "num": 56549}
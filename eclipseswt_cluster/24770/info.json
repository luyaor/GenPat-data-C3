{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "917b2887cbc3221b0cf1dae008e52740", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b27d2e6ab60173ece436a0589b6f538e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "ef782aa1d47f4cc453e1ff5e98420459bde2afbb", "commitAfterChange": "5a273c2ef1049cff7bd4d5ace6d67f7530a2ce69", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " public void getClipping(Region region)", "signatureAfterChange": " public void getClipping(Region region)", "diff": ["-\tregion.subtract(region);", "-\tNSRect rect = null;", "-\tif (data.view != null) {", "-\t\trect = data.view.visibleRect();", "-\t} else {", "-\t\trect = new NSRect();", "-\t\tif (data.image != null) {", "-\t\t\tNSSize size = data.image.handle.size();", "-\t\t\trect.width = size.width;", "-\t\t\trect.height = size.height;", "-\t\t} else if (data.size != null) {", "-\t\t\trect.width = data.size.width;", "-\t\t\trect.height = data.size.height;", "-\t\t}", "-\t}", "-\tregion.add((int)rect.x, (int)rect.y, (int)rect.width, (int)rect.height);", "-\tNSRect paintRect = data.paintRect;", "-\tif (paintRect != null) {", "-\t\tregion.intersect((int)paintRect.x, (int)paintRect.y, (int)paintRect.width, (int)paintRect.height);", "-\t}", "-\tif (data.clipPath != null) {", "-\t\tNSBezierPath clip = data.clipPath.bezierPathByFlatteningPath();", "-\t\tint count = (int)/*64*/clip.elementCount();", "-\t\tint pointCount = 0;", "-\t\tRegion clipRgn = new Region(device);", "-\t\tint[] pointArray = new int[count * 2];", "-\t\tint /*long*/ points = OS.malloc(NSPoint.sizeof);", "-\t\tif (points == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tNSPoint pt = new NSPoint();", "-\t\tfor (int i = 0; i < count; i++) {", "-\t\t\tint element = (int)/*64*/clip.elementAtIndex(i, points);", "-\t\t\tswitch (element) {", "-\t\t\t\tcase OS.NSMoveToBezierPathElement:", "-\t\t\t\t\tif (pointCount != 0) clipRgn.add(pointArray, pointCount);", "-\t\t\t\t\tpointCount = 0;", "-\t\t\t\t\tOS.memmove(pt, points, NSPoint.sizeof);", "-\t\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "-\t\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OS.NSLineToBezierPathElement:", "-\t\t\t\t\tOS.memmove(pt, points, NSPoint.sizeof);", "-\t\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "-\t\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase OS.NSClosePathBezierPathElement:", "-\t\t\t\t\tif (pointCount != 0) clipRgn.add(pointArray, pointCount);", "-\t\t\t\t\tpointCount = 0;", "-\t\t\t\t\tbreak;", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tregion.subtract(region);", "+\t\tNSRect rect = null;", "+\t\tif (data.view != null) {", "+\t\t\trect = data.view.visibleRect();", "+\t\t} else {", "+\t\t\trect = new NSRect();", "+\t\t\tif (data.image != null) {", "+\t\t\t\tNSSize size = data.image.handle.size();", "+\t\t\t\trect.width = size.width;", "+\t\t\t\trect.height = size.height;", "+\t\t\t} else if (data.size != null) {", "+\t\t\t\trect.width = data.size.width;", "+\t\t\t\trect.height = data.size.height;", "-\t\tif (pointCount != 0) clipRgn.add(pointArray, pointCount);", "-\t\tOS.free(points);", "-\t\tregion.intersect(clipRgn);", "-\t\tclipRgn.dispose();", "-\t}", "-\tif (data.inverseTransform != null) {", "-\t\tregion.convertRgn(data.inverseTransform);", "+\t\tregion.add((int)rect.x, (int)rect.y, (int)rect.width, (int)rect.height);", "+\t\tNSRect paintRect = data.paintRect;", "+\t\tif (paintRect != null) {", "+\t\t\tregion.intersect((int)paintRect.x, (int)paintRect.y, (int)paintRect.width, (int)paintRect.height);", "+\t\t}", "+\t\tif (data.clipPath != null) {", "+\t\t\tNSBezierPath clip = data.clipPath.bezierPathByFlatteningPath();", "+\t\t\tint count = (int)/*64*/clip.elementCount();", "+\t\t\tint pointCount = 0;", "+\t\t\tRegion clipRgn = new Region(device);", "+\t\t\tint[] pointArray = new int[count * 2];", "+\t\t\tint /*long*/ points = OS.malloc(NSPoint.sizeof);", "+\t\t\tif (points == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\tNSPoint pt = new NSPoint();", "+\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\tint element = (int)/*64*/clip.elementAtIndex(i, points);", "+\t\t\t\tswitch (element) {", "+\t\t\t\t\tcase OS.NSMoveToBezierPathElement:", "+\t\t\t\t\t\tif (pointCount != 0) clipRgn.add(pointArray, pointCount);", "+\t\t\t\t\t\tpointCount = 0;", "+\t\t\t\t\t\tOS.memmove(pt, points, NSPoint.sizeof);", "+\t\t\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "+\t\t\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OS.NSLineToBezierPathElement:", "+\t\t\t\t\t\tOS.memmove(pt, points, NSPoint.sizeof);", "+\t\t\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "+\t\t\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OS.NSClosePathBezierPathElement:", "+\t\t\t\t\t\tif (pointCount != 0) clipRgn.add(pointArray, pointCount);", "+\t\t\t\t\t\tpointCount = 0;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (pointCount != 0) clipRgn.add(pointArray, pointCount);", "+\t\t\tOS.free(points);", "+\t\t\tregion.intersect(clipRgn);", "+\t\t\tclipRgn.dispose();", "+\t\t}", "+\t\tif (data.inverseTransform != null) {", "+\t\t\tregion.convertRgn(data.inverseTransform);", "+\t\t}", "+\t} finally {", "+\t\tif (pool != null) pool.release();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6599d62b5e97b045c93f23cb755eb4dd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Path.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public PathData getPathData()", "signatureAfterChange": " public PathData getPathData()", "diff": ["-\tint count = (int)/*64*/handle.elementCount();", "-\tint pointCount = 0, typeCount = 0;", "-\tbyte[] types = new byte[count];", "-\tfloat[] pointArray = new float[count * 6];", "-\tint /*long*/ points = OS.malloc(3 * NSPoint.sizeof);", "-\tif (points == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tNSPoint pt = new NSPoint();", "-\tfor (int i = 0; i < count; i++) {", "-\t\tint element = (int)/*64*/handle.elementAtIndex(i, points);", "-\t\tswitch (element) {", "-\t\t\tcase OS.NSMoveToBezierPathElement:", "-\t\t\t\ttypes[typeCount++] = SWT.PATH_MOVE_TO;", "-\t\t\t\tOS.memmove(pt, points, NSPoint.sizeof);", "-\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "-\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "-\t\t\t\tbreak;", "-\t\t\tcase OS.NSLineToBezierPathElement:", "-\t\t\t\ttypes[typeCount++] = SWT.PATH_LINE_TO;", "-\t\t\t\tOS.memmove(pt, points, NSPoint.sizeof);", "-\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "-\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "-\t\t\t\tbreak;", "-\t\t\tcase OS.NSCurveToBezierPathElement:", "-\t\t\t\ttypes[typeCount++] = SWT.PATH_CUBIC_TO;", "-\t\t\t\tOS.memmove(pt, points, NSPoint.sizeof);", "-\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "-\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "-\t\t\t\tOS.memmove(pt, points + NSPoint.sizeof, NSPoint.sizeof);", "-\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "-\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "-\t\t\t\tOS.memmove(pt, points + NSPoint.sizeof + NSPoint.sizeof, NSPoint.sizeof);", "-\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "-\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "-\t\t\t\tbreak;", "-\t\t\tcase OS.NSClosePathBezierPathElement:", "-\t\t\t\ttypes[typeCount++] = SWT.PATH_CLOSE;", "-\t\t\t\tbreak;", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tint count = (int)/*64*/handle.elementCount();", "+\t\tint pointCount = 0, typeCount = 0;", "+\t\tbyte[] types = new byte[count];", "+\t\tfloat[] pointArray = new float[count * 6];", "+\t\tint /*long*/ points = OS.malloc(3 * NSPoint.sizeof);", "+\t\tif (points == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tNSPoint pt = new NSPoint();", "+\t\tfor (int i = 0; i < count; i++) {", "+\t\t\tint element = (int)/*64*/handle.elementAtIndex(i, points);", "+\t\t\tswitch (element) {", "+\t\t\t\tcase OS.NSMoveToBezierPathElement:", "+\t\t\t\t\ttypes[typeCount++] = SWT.PATH_MOVE_TO;", "+\t\t\t\t\tOS.memmove(pt, points, NSPoint.sizeof);", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase OS.NSLineToBezierPathElement:", "+\t\t\t\t\ttypes[typeCount++] = SWT.PATH_LINE_TO;", "+\t\t\t\t\tOS.memmove(pt, points, NSPoint.sizeof);", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase OS.NSCurveToBezierPathElement:", "+\t\t\t\t\ttypes[typeCount++] = SWT.PATH_CUBIC_TO;", "+\t\t\t\t\tOS.memmove(pt, points, NSPoint.sizeof);", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "+\t\t\t\t\tOS.memmove(pt, points + NSPoint.sizeof, NSPoint.sizeof);", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "+\t\t\t\t\tOS.memmove(pt, points + NSPoint.sizeof + NSPoint.sizeof, NSPoint.sizeof);", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase OS.NSClosePathBezierPathElement:", "+\t\t\t\t\ttypes[typeCount++] = SWT.PATH_CLOSE;", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\tOS.free(points);", "+\t\tif (pointCount != pointArray.length) {", "+\t\t\tfloat[] temp = new float[pointCount];", "+\t\t\tSystem.arraycopy(pointArray, 0, temp, 0, pointCount);", "+\t\t\tpointArray = temp;", "+\t\t}", "+\t\tPathData data = new PathData();", "+\t\tdata.types = types;", "+\t\tdata.points = pointArray;", "+\t\treturn data;", "+\t} finally {", "+\t\tif (pool != null)  pool.release();", "-\tOS.free(points);", "-\tif (pointCount != pointArray.length) {", "-\t\tfloat[] temp = new float[pointCount];", "-\t\tSystem.arraycopy(pointArray, 0, temp, 0, pointCount);", "-\t\tpointArray = temp;", "-\t}", "-\tPathData data = new PathData();", "-\tdata.types = types;", "-\tdata.points = pointArray;", "-\treturn data;"]}], "num": 24770}
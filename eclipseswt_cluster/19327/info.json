{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ba46df9981f3db792c96ad3634f82ef", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6e68faf350ce447ecac295168c32168", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "dfd4650fd75100a5a002cab81ff3277b16862845", "commitAfterChange": "d01fac9d213e0fa304edfed85d0f0844e9d59792", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 4, "signatureBeforeChange": "  int createGdipBrush()", "signatureAfterChange": "  void checkGC(int mask)", "diff": ["+", "+void checkGC(int mask) {", "+\tint state = data.state;", "+\tif ((state & mask) == mask) return;", "+\tstate = (state ^ mask) & mask;", "+\tdata.state |= mask;", "+\tint gdipGraphics = data.gdipGraphics;", "+\tif (gdipGraphics != 0) {", "+\t\tint pen = data.gdipPen;", "+\t\tint width = data.lineWidth;", "+\t\tif ((state & FOREGROUND) != 0) {", "+\t\t\tif (data.gdipFgBrush != 0) Gdip.SolidBrush_delete(data.gdipFgBrush);", "+\t\t\tdata.gdipFgBrush = 0;", "+\t\t\tint brush;", "+\t\t\tPattern pattern = data.foregroundPattern;", "+\t\t\tif (pattern != null) {", "+\t\t\t\tbrush = pattern.handle;", "+\t\t\t} else {", "+\t\t\t\tint foreground = data.foreground;", "+\t\t\t\tint rgb = ((foreground >> 16) & 0xFF) | (foreground & 0xFF00) | ((foreground & 0xFF) << 16);", "+\t\t\t\tint color = Gdip.Color_new(data.alpha << 24 | rgb);", "+\t\t\t\tif (color == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tbrush = Gdip.SolidBrush_new(color);", "+\t\t\t\tif (brush == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tGdip.Color_delete(color);", "+\t\t\t\tdata.gdipFgBrush = brush;", "+\t\t\t\tbrush = data.gdipFgBrush;", "+\t\t\t}", "+\t\t\tif (pen != 0) {", "+\t\t\t\tGdip.Pen_SetBrush(pen, brush);", "+\t\t\t} else {", "+\t\t\t\tpen = data.gdipPen = Gdip.Pen_new(brush, Math.max (1, width));", "+\t\t\t}", "+\t\t}", "+\t\tif ((state & LINE_WIDTH) != 0) {", "+\t\t\tGdip.Pen_SetWidth(pen, Math.max (1, width));\t\t\t", "+\t\t}", "+\t\tif ((state & LINE_STYLE) != 0) {", "+\t\t\tfloat[] dashes = null;", "+\t\t\tint dashStyle = Gdip.DashStyleSolid; ", "+\t\t\tswitch (data.lineStyle) {", "+\t\t\t\tcase SWT.LINE_SOLID: break;", "+\t\t\t\tcase SWT.LINE_DOT: dashStyle = Gdip.DashStyleDot; if (width == 0) dashes = LINE_DOT_ZERO; break;", "+\t\t\t\tcase SWT.LINE_DASH: dashStyle = Gdip.DashStyleDash; if (width == 0) dashes = LINE_DASH_ZERO; break;", "+\t\t\t\tcase SWT.LINE_DASHDOT: dashStyle = Gdip.DashStyleDashDot; if (width == 0) dashes = LINE_DASHDOT_ZERO; break;", "+\t\t\t\tcase SWT.LINE_DASHDOTDOT: dashStyle = Gdip.DashStyleDashDotDot; if (width == 0) dashes = LINE_DASHDOTDOT_ZERO; break;", "+\t\t\t\tcase SWT.LINE_CUSTOM: {", "+\t\t\t\t\tif (data.lineDashes != null) {", "+\t\t\t\t\t\tdashes = new float[data.lineDashes.length * 2];", "+\t\t\t\t\t\tfor (int i = 0; i < data.lineDashes.length; i++) {", "+\t\t\t\t\t\t\tfloat dash = (float)data.lineDashes[i] / Math.max (1, width);", "+\t\t\t\t\t\t\tdashes[i] = dash;", "+\t\t\t\t\t\t\tdashes[i + data.lineDashes.length] = dash;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (dashes != null) {", "+\t\t\t\tGdip.Pen_SetDashPattern(pen, dashes, dashes.length);", "+\t\t\t\tGdip.Pen_SetDashStyle(pen, Gdip.DashStyleCustom);", "+\t\t\t} else {", "+\t\t\t\tGdip.Pen_SetDashStyle(pen, dashStyle);", "+\t\t\t}", "+\t\t}", "+\t\tif ((state & LINE_JOIN) != 0) {", "+\t\t\tint joinStyle = 0;", "+\t\t\tswitch (data.lineJoin) {", "+\t\t\t\tcase SWT.JOIN_MITER: joinStyle = Gdip.LineJoinMiter; break;", "+\t\t\t\tcase SWT.JOIN_BEVEL: joinStyle = Gdip.LineJoinBevel; break;", "+\t\t\t\tcase SWT.JOIN_ROUND: joinStyle = Gdip.LineJoinRound; break;", "+\t\t\t}", "+\t\t\tGdip.Pen_SetLineJoin(pen, joinStyle);", "+\t\t}", "+\t\tif ((state & LINE_CAP) != 0) {", "+\t\t\tint dashCap = Gdip.DashCapFlat, capStyle = 0;", "+\t\t\tswitch (data.lineCap) {", "+\t\t\t\tcase SWT.CAP_FLAT: capStyle = Gdip.LineCapFlat; break;", "+\t\t\t\tcase SWT.CAP_ROUND: capStyle = Gdip.LineCapRound; dashCap = Gdip.DashCapRound; break;", "+\t\t\t\tcase SWT.CAP_SQUARE: capStyle = Gdip.LineCapSquare; break;", "+\t\t\t}", "+\t\t\tGdip.Pen_SetLineCap(pen, capStyle, capStyle, dashCap);", "+\t\t}", "+\t\tif ((state & BACKGROUND) != 0) {", "+\t\t\tif (data.gdipBgBrush != 0) Gdip.SolidBrush_delete(data.gdipBgBrush);", "+\t\t\tdata.gdipBgBrush = 0;", "+\t\t\tPattern pattern = data.backgroundPattern;", "+\t\t\tif (pattern != null) {", "+\t\t\t\tdata.gdipBrush = pattern.handle;", "+\t\t\t} else {", "+\t\t\t\tint background = data.background;", "+\t\t\t\tint rgb = ((background >> 16) & 0xFF) | (background & 0xFF00) | ((background & 0xFF) << 16);", "+\t\t\t\tint color = Gdip.Color_new(data.alpha << 24 | rgb);", "+\t\t\t\tif (color == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tint brush = Gdip.SolidBrush_new(color);", "+\t\t\t\tif (brush == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tGdip.Color_delete(color);", "+\t\t\t\tdata.gdipBrush = data.gdipBgBrush = brush;", "+\t\t\t}", "+\t\t}", "+\t\tif ((state & FONT) != 0) {", "+\t\t\tOS.SelectObject(handle, data.hFont);", "+\t\t\tint font = createGdipFont(handle, data.hFont);", "+\t\t\tif (data.gdipFont != 0) Gdip.Font_delete(data.gdipFont);", "+\t\t\tdata.gdipFont = font;", "+\t\t}", "+\t\treturn;", "+\t}", "+\tif ((state & (FOREGROUND | LINE_CAP | LINE_JOIN | LINE_STYLE | LINE_WIDTH)) != 0) {", "+\t\tint color = data.foreground;", "+\t\tint width = data.lineWidth;", "+\t\tint[] dashes = null;", "+\t\tint lineStyle = OS.PS_SOLID;", "+\t\tswitch (data.lineStyle) {", "+\t\t\tcase SWT.LINE_SOLID: break;", "+\t\t\tcase SWT.LINE_DASH: lineStyle = OS.PS_DASH; break;", "+\t\t\tcase SWT.LINE_DOT: lineStyle = OS.PS_DOT; break;", "+\t\t\tcase SWT.LINE_DASHDOT: lineStyle = OS.PS_DASHDOT; break;", "+\t\t\tcase SWT.LINE_DASHDOTDOT: lineStyle = OS.PS_DASHDOTDOT; break;", "+\t\t\tcase SWT.LINE_CUSTOM: {", "+\t\t\t\tif (data.lineDashes == null) {", "+\t\t\t\t\tlineStyle = OS.PS_USERSTYLE;", "+\t\t\t\t\tdashes = data.lineDashes;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\tif ((state & LINE_STYLE) != 0) {", "+\t\t\tOS.SetBkMode(handle, data.lineStyle == SWT.LINE_SOLID ? OS.OPAQUE : OS.TRANSPARENT); ", "+\t\t}", "+\t\tint joinStyle = 0;", "+\t\tswitch (data.lineJoin) {", "+\t\t\tcase SWT.JOIN_MITER: joinStyle = OS.PS_JOIN_MITER; break;", "+\t\t\tcase SWT.JOIN_ROUND: joinStyle = OS.PS_JOIN_ROUND; break;", "+\t\t\tcase SWT.JOIN_BEVEL: joinStyle = OS.PS_JOIN_BEVEL; break;", "+\t\t}", "+\t\tint capStyle = 0;", "+\t\tswitch (data.lineCap) {", "+\t\t\tcase SWT.CAP_ROUND: capStyle = OS.PS_ENDCAP_ROUND; break;", "+\t\t\tcase SWT.CAP_FLAT: capStyle = OS.PS_ENDCAP_FLAT; break;", "+\t\t\tcase SWT.CAP_SQUARE: capStyle = OS.PS_ENDCAP_SQUARE;break;", "+\t\t}", "+\t\tint style = lineStyle | joinStyle | capStyle;", "+\t\t/*", "+\t\t* Feature in Windows.  Windows does not honour line styles other then", "+\t\t* PS_SOLID for pens wider than 1 pixel created with CreatePen().  The fix", "+\t\t* is to use ExtCreatePen() instead.", "+\t\t*/", "+\t\tint newPen;", "+\t\tif (OS.IsWinCE || (width == 0 && lineStyle != OS.PS_USERSTYLE) || style == 0) {", "+\t\t\tnewPen = OS.CreatePen(style & OS.PS_STYLE_MASK, width, color);", "+\t\t} else {", "+\t\t\tLOGBRUSH logBrush = new LOGBRUSH();", "+\t\t\tlogBrush.lbStyle = OS.BS_SOLID;", "+\t\t\tlogBrush.lbColor = color;", "+\t\t\t/* Feature in Windows. PS_GEOMETRIC pens cannot have zero width. */", "+\t\t\tnewPen = OS.ExtCreatePen (style | OS.PS_GEOMETRIC, Math.max(1, width), logBrush, dashes != null ? dashes.length : 0, dashes);", "+\t\t}", "+\t\tOS.SelectObject(handle, newPen);", "+\t\tdata.state |= PEN;", "+\t\tif (data.hPen != 0) OS.DeleteObject(data.hPen);", "+\t\tdata.hPen = data.hOldPen = newPen;", "+\t} else if ((state & PEN) != 0) {", "+\t\tOS.SelectObject(handle, data.hOldPen);", "+\t}", "+\tif ((state & BACKGROUND) != 0) {", "+\t\tint newBrush = OS.CreateSolidBrush(data.background);", "+\t\tOS.SelectObject(handle, newBrush);", "+\t\tdata.state |= BRUSH;", "+\t\tif (data.hBrush != 0) OS.DeleteObject(data.hBrush);", "+\t\tdata.hOldBrush = data.hBrush = newBrush;", "+\t} else if ((state & BRUSH) != 0) {", "+\t\tOS.SelectObject(handle, data.hOldBrush);", "+\t}", "+\tif ((state & NULL_BRUSH) != 0) {", "+\t\tdata.hOldBrush = OS.SelectObject(handle, OS.GetStockObject(OS.NULL_BRUSH));", "+\t\tdata.state &= ~BRUSH;", "+\t}", "+\tif ((state & NULL_PEN) != 0) {", "+\t\tdata.hOldPen = OS.SelectObject(handle, OS.GetStockObject(OS.NULL_PEN));", "+\t\tdata.state &= ~PEN;", "+\t}", "+\tif ((state & BACKGROUND_TEXT) != 0) {", "+\t\tOS.SetBkColor(handle, data.background);", "+\t}", "+\tif ((state & FOREGROUND_TEXT) != 0) {", "+\t\tOS.SetTextColor(handle, data.foreground);", "+\t}", "+\tif ((state & FONT) != 0) {", "+\t\tOS.SelectObject(handle, data.hFont);", "+\t}", "-int createGdipBrush() {", "-\tint colorRef = OS.GetBkColor (handle);", "-\tint rgb = ((colorRef >> 16) & 0xFF) | (colorRef & 0xFF00) | ((colorRef & 0xFF) << 16);", "-\tint color = Gdip.Color_new(data.alpha << 24 | rgb);", "-\tif (color == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tint brush = Gdip.SolidBrush_new(color);", "-\tif (brush == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tGdip.Color_delete(color);", "-\treturn brush;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6b54ef10771898dc5e012e81ed2c498", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "7171ce75440e1c2f381de2d9486e536f525ae21d", "commitAfterChange": "1ff9f8c8caac6f13183a5c8b16956fa33502e9e0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "signatureAfterChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "diff": ["-\tint foreground = gc.data.foreground;", "-\tint gdipGraphics = gc.data.gdipGraphics;", "+\tGCData data = gc.data;", "+\tint gdipGraphics = data.gdipGraphics;", "+\tint foreground = data.foreground;", "+\tint alpha = data.alpha;", "+\tboolean gdip = gdipGraphics != 0 && (alpha != 0xFF || data.foregroundPattern != null);", "+\tint foregroundBrush = 0;", "+\tif (gdip) {", "+\t\tgc.checkGC(GC.FOREGROUND);", "+\t\tforegroundBrush = gc.getFgBrush();", "+\t}", "+\tint clipRgn = 0;", "-\tif (gdipGraphics != 0) {", "+\tRect gdipRect = new Rect();", "+\tif (gdipGraphics != 0 && !gdip) {", "+\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeNone);", "+\t\tint rgn = Gdip.Region_new();", "+\t\tGdip.Graphics_GetClip(gdipGraphics, rgn);", "+\t\tif (!Gdip.Region_IsInfinite(rgn, gdipGraphics)) {", "+\t\t\tclipRgn = Gdip.Region_GetHRGN(rgn, gdipGraphics);", "+\t\t}", "+\t\tGdip.Region_delete(rgn);", "+\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf);", "+\tif (clipRgn != 0) {", "+\t\tOS.SelectClipRgn(hdc, clipRgn);", "+\t\tOS.DeleteObject(clipRgn);", "+\t}", "-\tint selBrush = 0, selPen = 0;", "+\tint selBrush = 0, selPen = 0, selBrushFg = 0;", "-\t\tselBrush = OS.CreateSolidBrush(selectionBackground.handle);", "-\t\tselPen = OS.CreatePen(OS.BS_SOLID, 1, selectionForeground.handle);", "+\t\tif (gdip) {", "+\t\t\tint bg = selectionBackground.handle;", "+\t\t\tint argb = ((alpha & 0xFF) << 24) | ((bg >> 16) & 0xFF) | (bg & 0xFF00) | ((bg & 0xFF) << 16);", "+\t\t\tint color = Gdip.Color_new(argb); ", "+\t\t\tselBrush = Gdip.SolidBrush_new(color);", "+\t\t\tGdip.Color_delete(color);", "+\t\t\tint fg = selectionForeground.handle;", "+\t\t\targb = ((alpha & 0xFF) << 24) | ((fg >> 16) & 0xFF) | (fg & 0xFF00) | ((fg & 0xFF) << 16);", "+\t\t\tcolor = Gdip.Color_new(argb); ", "+\t\t\tselBrushFg = Gdip.SolidBrush_new(color);", "+\t\t\tselPen = Gdip.Pen_new(selBrushFg, 1);", "+\t\t\tGdip.Color_delete(color);", "+\t\t} else {", "+\t\t\tselBrush = OS.CreateSolidBrush(selectionBackground.handle);", "+\t\t\tselPen = OS.CreatePen(OS.BS_SOLID, 1, selectionForeground.handle);", "+\t\t}", "-\tint rop2 = 0;", "-\tif (OS.IsWinCE) {", "-\t\trop2 = OS.SetROP2(hdc, OS.R2_COPYPEN);", "-\t\tOS.SetROP2(hdc, rop2);", "-\t} else {", "-\t\trop2 = OS.GetROP2(hdc);", "-\t}", "-\tint dwRop = rop2 == OS.R2_XORPEN ? OS.PATINVERT : OS.PATCOPY;", "-\t\t\t\t\t\tOS.SelectObject(hdc, selBrush);", "-\t\t\t\t\t\tOS.PatBlt(hdc, drawX, drawY, run.width, lineHeight - lineSpacing, dwRop);", "+\t\t\t\t\t\tif (gdip) {", "+\t\t\t\t\t\t\tGdip.Graphics_FillRectangle(gdipGraphics, selBrush, drawX, drawY, run.width, lineHeight - lineSpacing);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tOS.SelectObject(hdc, selBrush);", "+\t\t\t\t\t\t\tOS.PatBlt(hdc, drawX, drawY, run.width, lineHeight - lineSpacing, OS.PATCOPY);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tint hBrush = OS.CreateSolidBrush (bg);", "-\t\t\t\t\t\t\tint oldBrush = OS.SelectObject(hdc, hBrush);", "-\t\t\t\t\t\t\tOS.PatBlt(hdc, drawX, drawRunY, run.width, run.ascent + run.descent, dwRop);", "-\t\t\t\t\t\t\tOS.SelectObject(hdc, oldBrush);", "-\t\t\t\t\t\t\tOS.DeleteObject(hBrush);", "+\t\t\t\t\t\t\tif (gdip) {", "+\t\t\t\t\t\t\t\tint argb = ((alpha & 0xFF) << 24) | ((bg >> 16) & 0xFF) | (bg & 0xFF00) | ((bg & 0xFF) << 16);", "+\t\t\t\t\t\t\t\tint color = Gdip.Color_new(argb); ", "+\t\t\t\t\t\t\t\tint brush = Gdip.SolidBrush_new(color);", "+\t\t\t\t\t\t\t\tGdip.Graphics_FillRectangle(gdipGraphics, brush, drawX, drawRunY, run.width, run.ascent + run.descent);", "+\t\t\t\t\t\t\t\tGdip.Color_delete(color);", "+\t\t\t\t\t\t\t\tGdip.SolidBrush_delete(brush);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tint hBrush = OS.CreateSolidBrush (bg);", "+\t\t\t\t\t\t\t\tint oldBrush = OS.SelectObject(hdc, hBrush);", "+\t\t\t\t\t\t\t\tOS.PatBlt(hdc, drawX, drawRunY, run.width, run.ascent + run.descent, OS.PATCOPY);", "+\t\t\t\t\t\t\t\tOS.SelectObject(hdc, oldBrush);", "+\t\t\t\t\t\t\t\tOS.DeleteObject(hBrush);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tOS.SelectObject(hdc, selBrush);", "-\t\t\t\t\t\t\tOS.PatBlt(hdc, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top, dwRop);", "+\t\t\t\t\t\t\tif (gdip) {", "+\t\t\t\t\t\t\t\tGdip.Graphics_FillRectangle(gdipGraphics, selBrush, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tOS.SelectObject(hdc, selBrush);", "+\t\t\t\t\t\t\t\tOS.PatBlt(hdc, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top, OS.PATCOPY);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\tint fg = foreground;", "-\t\t\t\t\tif (fullSelection) {", "-\t\t\t\t\t\tfg = selectionForeground.handle;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (run.style != null && run.style.foreground != null) fg = run.style.foreground.handle;", "-\t\t\t\t\t}", "-\t\t\t\t\tOS.SetTextColor(hdc, fg);", "+\t\t\t\t\tboolean partialSelection = hasSelection && !fullSelection && !(selectionStart > end || run.start > selectionEnd);", "-\t\t\t\t\tOS.ScriptTextOut(hdc, run.psc, drawX, drawRunY, 0, null, run.analysis , 0, 0, run.glyphs, run.glyphCount, run.advances, run.justify, run.goffsets);", "-\t\t\t\t\tif ((run.style != null) && (run.style.underline || run.style.strikeout)) {", "-\t\t\t\t\t\tint newPen = hasSelection && fg == selectionForeground.handle ? selPen : OS.CreatePen(OS.BS_SOLID, 1, fg);", "-\t\t\t\t\t\tint oldPen = OS.SelectObject(hdc, newPen);", "-\t\t\t\t\t\tif (run.style.underline) {", "-\t\t\t\t\t\t\tint underlineY = drawY + baseline + 1 - run.style.rise;", "-\t\t\t\t\t\t\tOS.MoveToEx(hdc, drawX, underlineY, 0);", "-\t\t\t\t\t\t\tOS.LineTo(hdc, drawX + run.width, underlineY);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (run.style.strikeout) {", "-\t\t\t\t\t\t\tint strikeoutY = drawRunY + run.leading + (run.ascent - run.style.rise) / 2;", "-\t\t\t\t\t\t\tOS.MoveToEx(hdc, drawX, strikeoutY, 0);", "-\t\t\t\t\t\t\tOS.LineTo(hdc, drawX + run.width, strikeoutY);\t", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tOS.SelectObject(hdc, oldPen);", "-\t\t\t\t\t\tif (!hasSelection || fg != selectionForeground.handle) OS.DeleteObject(newPen);", "-\t\t\t\t\t}", "-\t\t\t\t\tboolean partialSelection = hasSelection && !(selectionStart > end || run.start > selectionEnd);", "-\t\t\t\t\tif (!fullSelection && partialSelection && fg != selectionForeground.handle) {", "-\t\t\t\t\t\tOS.SetTextColor(hdc, selectionForeground.handle);", "+\t\t\t\t\tif (partialSelection) {", "-\t\t\t\t\t\tOS.ScriptTextOut(hdc, run.psc, drawX, drawRunY, OS.ETO_CLIPPED, rect, run.analysis , 0, 0, run.glyphs, run.glyphCount, run.advances, run.justify, run.goffsets);", "-\t\t\t\t\t\tif ((run.style != null) && (run.style.underline || run.style.strikeout)) {\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\tint oldPen = OS.SelectObject(hdc, selPen);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (gdip) {", "+\t\t\t\t\t\tOS.BeginPath(hdc);", "+\t\t\t\t\t\tOS.ScriptTextOut(hdc, run.psc, drawX, drawRunY, 0, null, run.analysis , 0, 0, run.glyphs, run.glyphCount, run.advances, run.justify, run.goffsets);", "+\t\t\t\t\t\tOS.EndPath(hdc);", "+\t\t\t\t\t\tint count = OS.GetPath(hdc, null, null, 0);", "+\t\t\t\t\t\tint[] points = new int[count*2];", "+\t\t\t\t\t\tbyte[] types = new byte[count];", "+\t\t\t\t\t\tOS.GetPath(hdc, points, types, count);", "+\t\t\t\t\t\tfor (int typeIndex = 0; typeIndex < types.length; typeIndex++) {", "+\t\t\t\t\t\t\tint newType = 0;", "+\t\t\t\t\t\t\tint type = types[typeIndex] & 0xFF;", "+\t\t\t\t\t\t\tswitch (type & ~OS.PT_CLOSEFIGURE) {", "+\t\t\t\t\t\t\t\tcase OS.PT_MOVETO: newType = Gdip.PathPointTypeStart; break;", "+\t\t\t\t\t\t\t\tcase OS.PT_LINETO: newType = Gdip.PathPointTypeLine; break;", "+\t\t\t\t\t\t\t\tcase OS.PT_BEZIERTO: newType = Gdip.PathPointTypeBezier; break;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif ((type & OS.PT_CLOSEFIGURE) != 0) newType |= Gdip.PathPointTypeCloseSubpath;", "+\t\t\t\t\t\t\ttypes[typeIndex] = (byte)newType;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint path = Gdip.GraphicsPath_new(points, types, count, Gdip.FillModeAlternate);", "+\t\t\t\t\t\tif (path == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\t\t\tint brush = foregroundBrush;", "+\t\t\t\t\t\tif (fullSelection) {", "+\t\t\t\t\t\t\tbrush = selBrushFg;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (run.style != null && run.style.foreground != null) {", "+\t\t\t\t\t\t\t\tint fg = run.style.foreground.handle;", "+\t\t\t\t\t\t\t\tint argb = ((alpha & 0xFF) << 24) | ((fg >> 16) & 0xFF) | (fg & 0xFF00) | ((fg & 0xFF) << 16);", "+\t\t\t\t\t\t\t\tint color = Gdip.Color_new(argb); ", "+\t\t\t\t\t\t\t\tbrush = Gdip.SolidBrush_new(color);", "+\t\t\t\t\t\t\t\tGdip.Color_delete(color);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint gstate = 0;", "+\t\t\t\t\t\tif (partialSelection) {", "+\t\t\t\t\t\t\tgdipRect.X = rect.left;", "+\t\t\t\t\t\t\tgdipRect.Y = rect.top;", "+\t\t\t\t\t\t\tgdipRect.Width = rect.right - rect.left;", "+\t\t\t\t\t\t\tgdipRect.Height = rect.bottom - rect.top;", "+\t\t\t\t\t\t\tgstate = Gdip.Graphics_Save(gdipGraphics);", "+\t\t\t\t\t\t\tGdip.Graphics_SetClip(gdipGraphics, gdipRect, Gdip.CombineModeExclude);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint antialias = Gdip.Graphics_GetSmoothingMode(gdipGraphics), textAntialias = 0;", "+\t\t\t\t\t\tint mode = Gdip.Graphics_GetTextRenderingHint(data.gdipGraphics);", "+\t\t\t\t\t\tswitch (mode) {", "+\t\t\t\t\t\t\tcase Gdip.TextRenderingHintSystemDefault: textAntialias = Gdip.SmoothingModeAntiAlias; break;", "+\t\t\t\t\t\t\tcase Gdip.TextRenderingHintSingleBitPerPixel:", "+\t\t\t\t\t\t\tcase Gdip.TextRenderingHintSingleBitPerPixelGridFit: textAntialias = Gdip.SmoothingModeNone; break;", "+\t\t\t\t\t\t\tcase Gdip.TextRenderingHintAntiAlias:", "+\t\t\t\t\t\t\tcase Gdip.TextRenderingHintAntiAliasGridFit:", "+\t\t\t\t\t\t\tcase Gdip.TextRenderingHintClearTypeGridFit: textAntialias = Gdip.SmoothingModeAntiAlias; break;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, textAntialias);", "+\t\t\t\t\t\tGdip.Graphics_FillPath(gdipGraphics, brush, path);", "+\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, antialias);", "+\t\t\t\t\t\tif (run.style != null && (run.style.underline || run.style.strikeout)) {", "+\t\t\t\t\t\t\tint newPen = hasSelection ? selPen : Gdip.Pen_new(brush, 1);", "+\t\t\t\t\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeNone);", "-\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, rect.left, underlineY, 0);", "-\t\t\t\t\t\t\t\tOS.LineTo(hdc, rect.right, underlineY);", "+\t\t\t\t\t\t\t\tGdip.Graphics_DrawLine(gdipGraphics, newPen, drawX, underlineY, drawX + run.width, underlineY);", "-\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, rect.left, strikeoutY, 0);", "-\t\t\t\t\t\t\t\tOS.LineTo(hdc, rect.right, strikeoutY);\t", "+\t\t\t\t\t\t\t\tGdip.Graphics_DrawLine(gdipGraphics, newPen, drawX, strikeoutY, drawX + run.width, strikeoutY);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (newPen != selPen) Gdip.Pen_delete(newPen);", "+\t\t\t\t\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (partialSelection) {", "+\t\t\t\t\t\t\tGdip.Graphics_Restore(gdipGraphics, gstate);", "+\t\t\t\t\t\t\tgstate = Gdip.Graphics_Save(gdipGraphics);", "+\t\t\t\t\t\t\tGdip.Graphics_SetClip(gdipGraphics, gdipRect, Gdip.CombineModeIntersect);", "+\t\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, textAntialias);", "+\t\t\t\t\t\t\tGdip.Graphics_FillPath(gdipGraphics, selBrushFg, path);", "+\t\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, antialias);", "+\t\t\t\t\t\t\tif (run.style != null && (run.style.underline || run.style.strikeout)) {", "+\t\t\t\t\t\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeNone);", "+\t\t\t\t\t\t\t\tif (run.style.underline) {", "+\t\t\t\t\t\t\t\t\tint underlineY = drawY + baseline + 1 - run.style.rise;", "+\t\t\t\t\t\t\t\t\tGdip.Graphics_DrawLine(gdipGraphics, selPen, rect.left, underlineY, rect.right, underlineY);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (run.style.strikeout) {", "+\t\t\t\t\t\t\t\t\tint strikeoutY = drawRunY + run.leading + (run.ascent - run.style.rise) / 2;", "+\t\t\t\t\t\t\t\t\tGdip.Graphics_DrawLine(gdipGraphics, selPen, rect.left, strikeoutY, rect.right, strikeoutY);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tGdip.Graphics_Restore(gdipGraphics, gstate);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tGdip.GraphicsPath_delete(path);", "+\t\t\t\t\t\tif (brush != selBrushFg && brush != foregroundBrush) Gdip.SolidBrush_delete(brush);", "+\t\t\t\t\t}  else {", "+\t\t\t\t\t\tint fg = foreground;", "+\t\t\t\t\t\tif (fullSelection) {", "+\t\t\t\t\t\t\tfg = selectionForeground.handle;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (run.style != null && run.style.foreground != null) fg = run.style.foreground.handle;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.SetTextColor(hdc, fg);", "+\t\t\t\t\t\tOS.ScriptTextOut(hdc, run.psc, drawX, drawRunY, 0, null, run.analysis , 0, 0, run.glyphs, run.glyphCount, run.advances, run.justify, run.goffsets);", "+\t\t\t\t\t\tif (run.style != null && (run.style.underline || run.style.strikeout)) {", "+\t\t\t\t\t\t\tint newPen = hasSelection && fg == selectionForeground.handle ? selPen : OS.CreatePen(OS.BS_SOLID, 1, fg);", "+\t\t\t\t\t\t\tint oldPen = OS.SelectObject(hdc, newPen);", "+\t\t\t\t\t\t\tif (run.style.underline) {", "+\t\t\t\t\t\t\t\tint underlineY = drawY + baseline + 1 - run.style.rise;", "+\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, drawX, underlineY, 0);", "+\t\t\t\t\t\t\t\tOS.LineTo(hdc, drawX + run.width, underlineY);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (run.style.strikeout) {", "+\t\t\t\t\t\t\t\tint strikeoutY = drawRunY + run.leading + (run.ascent - run.style.rise) / 2;", "+\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, drawX, strikeoutY, 0);", "+\t\t\t\t\t\t\t\tOS.LineTo(hdc, drawX + run.width, strikeoutY);\t", "+\t\t\t\t\t\t\tif (!hasSelection || fg != selectionForeground.handle) OS.DeleteObject(newPen);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (partialSelection && fg != selectionForeground.handle) {", "+\t\t\t\t\t\t\tOS.SetTextColor(hdc, selectionForeground.handle);", "+\t\t\t\t\t\t\tOS.ScriptTextOut(hdc, run.psc, drawX, drawRunY, OS.ETO_CLIPPED, rect, run.analysis , 0, 0, run.glyphs, run.glyphCount, run.advances, run.justify, run.goffsets);", "+\t\t\t\t\t\t\tif (run.style != null && (run.style.underline || run.style.strikeout)) {\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tint oldPen = OS.SelectObject(hdc, selPen);", "+\t\t\t\t\t\t\t\tif (run.style.underline) {", "+\t\t\t\t\t\t\t\t\tint underlineY = drawY + baseline + 1 - run.style.rise;", "+\t\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, rect.left, underlineY, 0);", "+\t\t\t\t\t\t\t\t\tOS.LineTo(hdc, rect.right, underlineY);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (run.style.strikeout) {", "+\t\t\t\t\t\t\t\t\tint strikeoutY = drawRunY + run.leading + (run.ascent - run.style.rise) / 2;", "+\t\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, rect.left, strikeoutY, 0);", "+\t\t\t\t\t\t\t\t\tOS.LineTo(hdc, rect.right, strikeoutY);\t", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tOS.SelectObject(hdc, oldPen);", "+\t\t\t\t\t\t\t}", "-\tif (gdipGraphics != 0) {", "-\t\tGdip.Graphics_ReleaseHDC(gdipGraphics, hdc);", "+\tif (gdip) {", "+\t\tif (selBrush != 0) Gdip.SolidBrush_delete(selBrush);", "+\t\tif (selBrushFg != 0) Gdip.SolidBrush_delete(selBrushFg);", "+\t\tif (selPen != 0) Gdip.Pen_delete(selPen);", "+\t} else {", "+\t\tif (gdipGraphics != 0) Gdip.Graphics_ReleaseHDC(gdipGraphics, hdc);", "+\t\tif (selBrush != 0) OS.DeleteObject (selBrush);", "+\t\tif (selPen != 0) OS.DeleteObject (selPen);", "-\tif (selBrush != 0) OS.DeleteObject (selBrush);", "-\tif (selPen != 0) OS.DeleteObject (selPen);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f15d660f7e4d6b2e2c998f81b3795c05", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "8386c3c902c23747f1b08cd80a8da053d565b75b", "commitAfterChange": "9883c2890fbff9756b4f164322e89e3f367f01c6", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r \r LRESULT WM_KEYDOWN (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_KEYDOWN (int wParam, int lParam)", "diff": ["-\tif ((style & SWT.CHECK) != 0 && wParam == OS.VK_SPACE) {\r", "-\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);\r", "-\t\tif (hItem != 0) {\r", "-\t\t\tTVITEM tvItem = new TVITEM ();\r", "-\t\t\ttvItem.mask = OS.TVIF_HANDLE | OS.TVIF_STATE | OS.TVIF_PARAM;\r", "-\t\t\ttvItem.stateMask = OS.TVIS_STATEIMAGEMASK;\r", "-\t\t\ttvItem.hItem = hItem;\r", "-\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);\r", "-\t\t\tint state = tvItem.state >> 12;\r", "-\t\t\tif ((state & 0x1) != 0) {\r", "-\t\t\t\tstate++;\r", "-\t\t\t} else  {\r", "-\t\t\t\t--state;\r", "-\t\t\t}\t\t\r", "-\t\t\ttvItem.state = state << 12;\r", "-\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "-\t\t\tEvent event = new Event ();\r", "-\t\t\tevent.item = items [tvItem.lParam];\r", "-\t\t\tevent.detail = SWT.CHECK;\r", "-\t\t\tpostEvent (SWT.Selection, event);\r", "+\tswitch (wParam) {\r", "+\t\tcase OS.VK_SPACE: {\r", "+\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);\r", "+\t\t\tif (hItem != 0) {\r", "+\t\t\t\thAnchor = hItem;\r", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_ENSUREVISIBLE, 0, hItem);\r", "+\t\t\t\tTVITEM tvItem = new TVITEM ();\r", "+\t\t\t\ttvItem.mask = OS.TVIF_STATE | OS.TVIF_PARAM;\r", "+\t\t\t\ttvItem.hItem = hItem;\r", "+\t\t\t\tif ((style & SWT.CHECK) != 0) {\r", "+\t\t\t\t\ttvItem.stateMask = OS.TVIS_STATEIMAGEMASK;\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);\r", "+\t\t\t\t\tint state = tvItem.state >> 12;\r", "+\t\t\t\t\tif ((state & 0x1) != 0) {\r", "+\t\t\t\t\t\tstate++;\r", "+\t\t\t\t\t} else  {\r", "+\t\t\t\t\t\t--state;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\ttvItem.state = state << 12;\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "+\t\t\t\t}\r", "+\t\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;\r", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);\r", "+\t\t\t\tif ((style & SWT.MULTI) != 0 && OS.GetKeyState (OS.VK_CONTROL) < 0) {\r", "+\t\t\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) != 0) {\r", "+\t\t\t\t\t\ttvItem.state &= ~OS.TVIS_SELECTED;\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\ttvItem.state |= OS.TVIS_SELECTED;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\ttvItem.state |= OS.TVIS_SELECTED;\r", "+\t\t\t\t}\r", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "+\t\t\t\tTreeItem item = items [tvItem.lParam];\r", "+\t\t\t\tEvent event = new Event ();\r", "+\t\t\t\tevent.item = item;\r", "+\t\t\t\tpostEvent (SWT.Selection, event);\r", "+\t\t\t\tif ((style & SWT.CHECK) != 0) {\r", "+\t\t\t\t\tevent = new Event ();\r", "+\t\t\t\t\tevent.item = item;\r", "+\t\t\t\t\tevent.detail = SWT.CHECK;\r", "+\t\t\t\t\tpostEvent (SWT.Selection, event);\r", "+\t\t\t\t}\r", "+\t\t\t\treturn LRESULT.ZERO;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\tcase OS.VK_UP:\r", "+\t\tcase OS.VK_DOWN:\r", "+\t\tcase OS.VK_PRIOR:\r", "+\t\tcase OS.VK_NEXT:\r", "+\t\tcase OS.VK_HOME:\r", "+\t\tcase OS.VK_END: {\r", "+\t\t\tif ((style & SWT.SINGLE) != 0) break;\r", "+\t\t\tif (OS.GetKeyState (OS.VK_SHIFT) < 0) {\r", "+\t\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);\r", "+\t\t\t\tif (hItem != 0) {\r", "+\t\t\t\t\tif (hAnchor == 0) hAnchor = hItem;\r", "+\t\t\t\t\tboolean selected = false;\r", "+\t\t\t\t\tignoreSelect = ignoreDeselect = true;\r", "+\t\t\t\t\tint code = callWindowProc (OS.WM_KEYDOWN, wParam, lParam);\r", "+\t\t\t\t\tignoreSelect = ignoreDeselect = false;\r", "+\t\t\t\t\tint hNewItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);\r", "+\t\t\t\t\tTVITEM tvItem = new TVITEM ();\r", "+\t\t\t\t\ttvItem.mask = OS.TVIF_STATE;\r", "+\t\t\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;\r", "+\t\t\t\t\tint hDeselectItem = hItem;\t\t\t\t\t\r", "+\t\t\t\t\tRECT rect1 = new RECT ();\r", "+\t\t\t\t\trect1.left = hAnchor;\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect1);\r", "+\t\t\t\t\tRECT rect2 = rect2 = new RECT ();\r", "+\t\t\t\t\trect2.left = hDeselectItem;\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect2);\r", "+\t\t\t\t\tint flags = rect1.top < rect2.top ? OS.TVGN_PREVIOUSVISIBLE : OS.TVGN_NEXTVISIBLE;\r", "+\t\t\t\t\twhile (hDeselectItem != hAnchor) {\r", "+\t\t\t\t\t\ttvItem.hItem = hDeselectItem;\r", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "+\t\t\t\t\t\thDeselectItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, flags, hDeselectItem);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tint hSelectItem = hAnchor;\r", "+\t\t\t\t\trect1.left = hNewItem;\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect1);\r", "+\t\t\t\t\trect2.left = hSelectItem;\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect2);\r", "+\t\t\t\t\ttvItem.state = OS.TVIS_SELECTED;\r", "+\t\t\t\t\tflags = rect1.top < rect2.top ? OS.TVGN_PREVIOUSVISIBLE : OS.TVGN_NEXTVISIBLE;\r", "+\t\t\t\t\twhile (hSelectItem != hNewItem) {\r", "+\t\t\t\t\t\ttvItem.hItem = hSelectItem;\r", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "+\t\t\t\t\t\thSelectItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, flags, hSelectItem);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\ttvItem.hItem = hNewItem;\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "+\t\t\t\t\ttvItem.mask = OS.TVIF_STATE | OS.TVIF_PARAM;\r", "+\t\t\t\t\ttvItem.hItem = hNewItem;\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);\r", "+\t\t\t\t\tEvent event = new Event ();\r", "+\t\t\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) != 0) {\r", "+\t\t\t\t\t\tevent.item = items [tvItem.lParam];\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tpostEvent (SWT.Selection, event);\r", "+\t\t\t\t\treturn new LRESULT (code);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tif (OS.GetKeyState (OS.VK_CONTROL) < 0) {\r", "+\t\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);\r", "+\t\t\t\tif (hItem != 0) {\r", "+\t\t\t\t\tTVITEM tvItem = new TVITEM ();\r", "+\t\t\t\t\ttvItem.mask = OS.TVIF_STATE;\r", "+\t\t\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;\r", "+\t\t\t\t\ttvItem.hItem = hItem;\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);\r", "+\t\t\t\t\tboolean oldSelected = (tvItem.state & OS.TVIS_SELECTED) != 0;\r", "+\t\t\t\t\tint hNewItem = 0;\r", "+\t\t\t\t\tswitch (wParam) {\r", "+\t\t\t\t\t\tcase OS.VK_UP:\r", "+\t\t\t\t\t\t\thNewItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_PREVIOUSVISIBLE, hItem);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase OS.VK_DOWN:\r", "+\t\t\t\t\t\t\thNewItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, hItem);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase OS.VK_HOME:\r", "+\t\t\t\t\t\t\thNewItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_ROOT, 0);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase OS.VK_PRIOR:\r", "+\t\t\t\t\t\t\thNewItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_FIRSTVISIBLE, 0);\r", "+\t\t\t\t\t\t\tif (hNewItem == hItem) {\r", "+\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.WM_VSCROLL, OS.SB_PAGEUP, 0);\r", "+\t\t\t\t\t\t\t\thNewItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_FIRSTVISIBLE, 0);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase OS.VK_NEXT:\t\t\t\r", "+\t\t\t\t\t\t\tRECT rect = new RECT (), clientRect = new RECT ();\r", "+\t\t\t\t\t\t\tOS.GetClientRect (handle, clientRect);\r", "+\t\t\t\t\t\t\thNewItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_FIRSTVISIBLE, 0);\r", "+\t\t\t\t\t\t\tdo {\r", "+\t\t\t\t\t\t\t\tint hVisible = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, hNewItem);\r", "+\t\t\t\t\t\t\t\tif (hVisible == 0) break;\r", "+\t\t\t\t\t\t\t\trect.left = hVisible;\r", "+\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect);\r", "+\t\t\t\t\t\t\t\tif (rect.bottom > clientRect.bottom) break;\r", "+\t\t\t\t\t\t\t\tif ((hNewItem = hVisible) == hItem) {\r", "+\t\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.WM_VSCROLL, OS.SB_PAGEDOWN, 0);\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t} while (hNewItem != 0);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase OS.VK_END:\r", "+\t\t\t\t\t\t\thNewItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, 0);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif (hNewItem != 0) {\r", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_ENSUREVISIBLE, 0, hNewItem);\r", "+\t\t\t\t\t\ttvItem.hItem = hNewItem;\r", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);\r", "+\t\t\t\t\t\tboolean newSelected = (tvItem.state & OS.TVIS_SELECTED) != 0;\r", "+\t\t\t\t\t\tif (!newSelected && drawCount == 0) {\r", "+\t\t\t\t\t\t\tOS.UpdateWindow (handle);\r", "+\t\t\t\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\t\t\t\t\t/*\r", "+\t\t\t\t\t\t\t* This code is intentionally commented.\r", "+\t\t\t\t\t\t\t*/\r", "+//\t\t\t\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tignoreSelect = true;\r", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SELECTITEM, OS.TVGN_CARET, hNewItem);\r", "+\t\t\t\t\t\tignoreSelect = false;\r", "+\t\t\t\t\t\tif (oldSelected) {\r", "+\t\t\t\t\t\t\ttvItem.state = OS.TVIS_SELECTED;\r", "+\t\t\t\t\t\t\ttvItem.hItem = hItem;\r", "+\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tif (!newSelected) {\r", "+\t\t\t\t\t\t\ttvItem.state = 0;\r", "+\t\t\t\t\t\t\ttvItem.hItem = hNewItem;\r", "+\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tif (!newSelected && drawCount == 0) {\r", "+\t\t\t\t\t\t\tRECT rect1 = new RECT (), rect2 = new RECT ();\r", "+\t\t\t\t\t\t\trect1.left = hItem;  rect2.left = hNewItem;\r", "+\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect1);\r", "+\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect2);\r", "+\t\t\t\t\t\t\t/*\r", "+\t\t\t\t\t\t\t* This code is intentionally commented.\r", "+\t\t\t\t\t\t\t*/\r", "+//\t\t\t\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);\r", "+\t\t\t\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);\r", "+\t\t\t\t\t\t\tif (OS.IsWinCE) {\r", "+\t\t\t\t\t\t\t\tOS.InvalidateRect (handle, rect1, false);\r", "+\t\t\t\t\t\t\t\tOS.InvalidateRect (handle, rect2, false);\r", "+\t\t\t\t\t\t\t\tOS.UpdateWindow (handle);\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tint flags = OS.RDW_UPDATENOW | OS.RDW_INVALIDATE;\r", "+\t\t\t\t\t\t\t\tOS.RedrawWindow (handle, rect1, 0, flags);\r", "+\t\t\t\t\t\t\t\tOS.RedrawWindow (handle, rect2, 0, flags);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\treturn LRESULT.ZERO;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tbreak;\r"]}], "num": 19327}
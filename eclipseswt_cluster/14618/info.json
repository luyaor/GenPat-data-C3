{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e19352988855e4c88e4f37ab0a8801da", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59caf08931f2aa326a1935449293d39c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "fb708aa88544f8882b0e977aedacf69c07c840ce", "commitAfterChange": "b5382ff64d0b46150aeba7fc4f0579a270771fa7", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " void makeAvailable (TreeItem item)", "signatureAfterChange": " void makeAvailable (TreeItem item)", "diff": ["-\tTreeItem parentItem = item.parentItem;", "-\tint parentAvailableIndex = parentItem.availableIndex;", "-\tTreeItem[] parentAvailableDescendents = parentItem.computeAvailableDescendents ();", "-\tTreeItem[] newAvailableItems = new TreeItem [availableItems.length + 1];", "+\tint parentItemCount = item.parentItem.items.length; ", "+\tint index = 0;", "+\tif (parentItemCount == 1) {\t\t/* this is the only child of parentItem */", "+\t\tindex = item.parentItem.availableIndex + 1;", "+\t} else {", "+\t\t/* determine this item's index in its parent */", "+\t\tint itemIndex = 0;", "+\t\tTreeItem[] items = item.parentItem.items;", "+\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\tif (items [i] == item) {", "+\t\t\t\titemIndex = i;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\tif (itemIndex != parentItemCount - 1) {\t/* this is not the last child */", "+\t\t\tindex = items [itemIndex + 1].availableIndex;", "+\t\t} else {\t/* this is the last child */", "+\t\t\tTreeItem previousItem = items [itemIndex - 1];", "+\t\t\tindex = previousItem.availableIndex + previousItem.computeAvailableDescendentCount ();", "+\t\t}", "+\t}", "-\tSystem.arraycopy (availableItems, 0, newAvailableItems, 0, parentAvailableIndex);", "-\tSystem.arraycopy (parentAvailableDescendents, 0, newAvailableItems, parentAvailableIndex, parentAvailableDescendents.length);", "-\tint startIndex = parentAvailableIndex + parentAvailableDescendents.length - 1;", "-\tSystem.arraycopy (", "-\t\t\tavailableItems,", "-\t\t\tstartIndex,", "-\t\t\tnewAvailableItems,", "-\t\t\tparentAvailableIndex + parentAvailableDescendents.length,", "-\t\t\tavailableItems.length - startIndex);", "+\tTreeItem[] itemsToInsert = item.computeAvailableDescendents ();", "+\tTreeItem[] newAvailableItems = new TreeItem [availableItems.length + itemsToInsert.length];", "+\tSystem.arraycopy (availableItems, 0, newAvailableItems, 0, index);", "+\tSystem.arraycopy (itemsToInsert, 0, newAvailableItems, index, itemsToInsert.length);", "+\tSystem.arraycopy (availableItems, index, newAvailableItems, index + itemsToInsert.length, availableItems.length - index);", "-\tfor (int i = parentAvailableIndex; i < availableItems.length; i++) {", "+\tfor (int i = index; i < availableItems.length; i++) {", "-\tRectangle bounds = item.getBounds ();", "-\tint rightX = bounds.x + bounds.width;", "+\tint rightX = 0;", "+\tfor (int i = 0; i < itemsToInsert.length; i++) {", "+\t\tRectangle bounds = itemsToInsert [i].getBounds ();", "+\t\trightX = Math.max (rightX, bounds.x + bounds.width);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df9eca73b25d8fae8ad34c59dd7a98e3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 60, "signatureBeforeChange": " void removingItem(SelectableItem item)", "signatureAfterChange": " void makeAvailable(TreeItem item)", "diff": ["+ */", "+void makeAvailable(TreeItem item) {", "+\tTreeItem parentItem = item.getParentItem();", "+\tint parentAvailableIndex = parentItem.availableIndex;", "+\tTreeItem[] parentAvailableDescendents = parentItem.computeAvailableDescendents();", "+\tTreeItem[] newAvailableItems = new TreeItem[availableItems.length + 1];", "+\t", "+\tSystem.arraycopy(availableItems, 0, newAvailableItems, 0, parentAvailableIndex);", "+\tSystem.arraycopy(parentAvailableDescendents, 0, newAvailableItems, parentAvailableIndex, parentAvailableDescendents.length);", "+\tint startIndex = parentAvailableIndex + parentAvailableDescendents.length - 1;", "+\tSystem.arraycopy(", "+\t\t\tavailableItems,", "+\t\t\tstartIndex,", "+\t\t\tnewAvailableItems,", "+\t\t\tparentAvailableIndex + parentAvailableDescendents.length,", "+\t\t\tavailableItems.length - startIndex);", "+\tavailableItems = newAvailableItems;", "+\t", "+\t/* update availableIndex as needed */", "+\tfor (int i = parentAvailableIndex; i < availableItems.length; i++) {", "+\t\tavailableItems[i].availableIndex = i;", "+\t}", "+\tupdateVerticalBar();", "+\tupdateHorizontalBar();", "- */", "-void removingItem(SelectableItem item) {", "-\tVector selection = getSelectionVector();", "-\tTreeItem parentItem = ((TreeItem) item).getParentItem();", "-\tTreeItem newSelectionItem = null;", "-\tboolean isLastSelected = (selection.size() == 1) && (selection.elementAt(0) == item);", "-\tint itemIndex = getVisibleIndex(item);", "-\t", "-\tif (isLastSelected == true) {", "-\t\t// try selecting the following item", "-\t\tnewSelectionItem = (TreeItem) getVisibleItem(itemIndex + 1);", "-\t\tif (newSelectionItem == null || newSelectionItem.getParentItem() != parentItem) {", "-\t\t\t// select parent item if there is no item following the removed  ", "-\t\t\t// one on the same tree level", "-\t\t\tnewSelectionItem = parentItem;", "-\t\t}", "-\t\tif (newSelectionItem != null) {", "-\t\t\tselectNotify(newSelectionItem, true);", "-\t\t}", "-\t}", "-\tsuper.removingItem(item);", "-\tif (isExpandingItem(item) == false) {", "-\t\t// redraw plus/minus image, hierarchy lines,", "-\t\t// redrawing here assumes that no update happens between now and ", "-\t\t// after the item has actually been removed. Otherwise this call ", "-\t\t// would need to be in removedItem and we would need to store the", "-\t\t// \"itemIndex\" here to redraw correctly.", "-\t\tredrawAfterModify(item, itemIndex);", "-\t}\t", "-}"]}], "num": 14618}
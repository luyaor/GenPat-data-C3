{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ae779d79b2da8f98700e129b7eaffd0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41284b0ac3ff5ab7a45799e5d1a7e452", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/coolbar/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "882fb3c9cf2bee472ef2152155ef18c3d0d2d853", "commitAfterChange": "9d056f973a0b0da966a2c2f2478c52db3cc41550", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r void onMouseUp(Event event)", "signatureAfterChange": "\r void onMouseUp(Event event)", "diff": ["+\tsetCursor(null);\r", "+\tdragging = null;\r", "+}\r", "-\tint xDelta = Math.abs(click.x - event.x), yDelta = Math.abs(click.y - event.y);\r", "-\tif (xDelta <= CLICK_DISTANCE && yDelta <= CLICK_DISTANCE) {\r", "-\t\tPoint location = findItem(target);\r", "-\t\tint row = location.y;\r", "-\t\tint index = location.x;\r", "-\t\tif (items[row].length > 1) {\r", "-\t\t\tPoint size = target.getSize();\r", "-\t\t\tint maxSize = getSize().x - (items[row].length - 1) * CoolItem.MINIMUM_WIDTH;\r", "-\t\t\tif (size.x == maxSize) {\r", "-\t\t\t\t/* The item is at its maximum width. It should be resized to its minimum width. */\r", "-\t\t\t\tint distance = size.x - CoolItem.MINIMUM_WIDTH;\r", "-\t\t\t\tif (index + 1 < items[row].length) {\r", "-\t\t\t\t\t/* There is an item to the right. Maximize it. */\r", "-\t\t\t\t\tCoolItem right = items[row][index + 1];\r", "-\t\t\t\t\tmoveLeft(right, distance);\r", "-\t\t\t\t}\r", "-\t\t\t\telse {\r", "-\t\t\t\t\t/* There is no item to the right. Move the item all the way right. */\r", "-\t\t\t\t\tmoveRight(target, distance);\r", "-\t\t\t\t}\r", "-\t\t\telse if (size.x < target.preferredWidth) {\r", "-\t\t\t\t/* The item is less than its preferredWidth. Resize to preferredWidth. */\r", "-\t\t\t\tint distance = target.preferredWidth - size.x;\r", "-\t\t\t\tif (index + 1 < items[row].length) {\r", "-\t\t\t\t\tCoolItem right = items[row][index + 1];\r", "-\t\t\t\t\tmoveRight(right, distance);\t\r", "-\t\t\t\t\tdistance = target.preferredWidth - target.getSize().x;\r", "-\t\t\t\t}\r", "-\t\t\t\tif (distance > 0) {\r", "-\t\t\t\t\tmoveLeft(target, distance);\r", "-\t\t\t\t}\r", "-\t\t\t\t/* The item is at its minimum width. Maximize it. */\r", "-\t\t\t\tfor (int i = 0; i < items[row].length; i++) {\r", "-\t\t\t\t\tif (i != index) items[row][i].requestedWidth = CoolItem.MINIMUM_WIDTH;\t\r", "-\t\t\t\t}\r", "-\t\t\t\ttarget.requestedWidth = getDisplay().getBounds().width;\r", "-\t\t\t\tlayoutItems();\r", "-\t\t\ttarget = getGrabbedItem(event.x, event.y);\r", "-\t\t\tif (target != null) setCursor(hoverCursor);\r", "-\t\t\telse setCursor(null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "146cb07436f8a9b54309e896e4b80bd6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/coolbar/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "d453bdc21d7e75673978cbe57802d5b03ce8bf76", "commitAfterChange": "9a8a68d96b31fe9667940acc0f04fb99afeb7cf2", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r void onMouseUp(Event event)", "signatureAfterChange": "\r void onMouseUp(Event event)", "diff": ["-\tif (getGrabbedItem(event.x, event.y) != null) {\r", "-\t\tsetCursor(hoverCursor);\r", "+\tCoolItem target = getGrabbedItem(event.x, event.y);\r", "+\tif (target == null) {\r", "+\t\tsetCursor(null);\r", "+\t\treturn;\t\r", "-\telse {\r", "-\t\tsetCursor(null);\t\r", "-\t}\t\r", "+\tint xDelta = Math.abs(click.x - event.x), yDelta = Math.abs(click.y - event.y);\r", "+\tif (xDelta <= CLICK_DISTANCE && yDelta <= CLICK_DISTANCE) {\r", "+\t\tPoint location = findItem(target);\r", "+\t\tint row = location.y;\r", "+\t\tint index = location.x;\r", "+\t\tif (items[row].length > 1) {\r", "+\t\t\tPoint size = target.getSize();\r", "+\t\t\tint maxSize = getSize().x - (items[row].length - 1) * CoolItem.MINIMUM_WIDTH;\r", "+\t\t\tif (size.x == maxSize) {\r", "+\t\t\t\t/* The item is at its maximum width. It should be resized to its minimum width. */\r", "+\t\t\t\tint distance = size.x - CoolItem.MINIMUM_WIDTH;\r", "+\t\t\t\tif (index + 1 < items[row].length) {\r", "+\t\t\t\t\t/* There is an item to the right. Maximize it. */\r", "+\t\t\t\t\tCoolItem right = items[row][index + 1];\r", "+\t\t\t\t\tmoveLeft(right, distance);\r", "+\t\t\t\t}\r", "+\t\t\t\telse {\r", "+\t\t\t\t\t/* There is no item to the right. Move the item all the way right. */\r", "+\t\t\t\t\tmoveRight(target, distance);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\telse if (size.x < target.preferredWidth) {\r", "+\t\t\t\t/* The item is less than its preferredWidth. Resize to preferredWidth. */\r", "+\t\t\t\tint distance = target.preferredWidth - size.x;\r", "+\t\t\t\tif (index + 1 < items[row].length) {\r", "+\t\t\t\t\tCoolItem right = items[row][index + 1];\r", "+\t\t\t\t\tmoveRight(right, distance);\t\r", "+\t\t\t\t\tdistance = target.preferredWidth - target.getSize().x;\r", "+\t\t\t\t}\r", "+\t\t\t\tif (distance > 0) {\r", "+\t\t\t\t\tmoveLeft(target, distance);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\telse {\r", "+\t\t\t\t/* The item is at its minimum width. Maximize it. */\r", "+\t\t\t\tfor (int i = 0; i < items[row].length; i++) {\r", "+\t\t\t\t\tif (i != index) items[row][i].requestedWidth = CoolItem.MINIMUM_WIDTH;\t\r", "+\t\t\t\t}\r", "+\t\t\t\ttarget.requestedWidth = getDisplay().getBounds().width;\r", "+\t\t\t\tlayoutItems();\r", "+\t\t\t}\r", "+\t\t\ttarget = getGrabbedItem(event.x, event.y);\r", "+\t\t\tif (target != null) setCursor(hoverCursor);\r", "+\t\t\telse setCursor(null);\r", "+\t\t}\r", "+\t}\r"]}], "num": 171}
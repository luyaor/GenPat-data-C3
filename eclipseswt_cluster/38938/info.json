{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "329a2e0ac39fc375666d99afadfff92d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7aecdd1e21a1f99b762c0804952e2df", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ExpandBar.java", "commitBeforeChange": "a7d5fd3d9c6e5068ddcdfcd54f78631d29228ff7", "commitAfterChange": "f2fdacc1748ba70c63b400772bf7b53217fb343f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void drawWidget (GC gc, RECT clipRect)", "signatureAfterChange": "  void drawWidget (GC gc, RECT clipRect)", "diff": ["-\tint /*long*/ hCaptionFont = 0, oldFont = 0;\t", "+\tint /*long*/ hCurrentFont = 0, oldFont = 0;\t", "-\t\tif (!OS.IsWinCE && hFont == 0) {", "-\t\t\tNONCLIENTMETRICS info = OS.IsUnicode ? (NONCLIENTMETRICS) new NONCLIENTMETRICSW () : new NONCLIENTMETRICSA ();", "-\t\t\tinfo.cbSize = NONCLIENTMETRICS.sizeof;", "-\t\t\tif (OS.SystemParametersInfo (OS.SPI_GETNONCLIENTMETRICS, 0, info, 0)) {", "-\t\t\t\tLOGFONT logFont = OS.IsUnicode ? (LOGFONT) ((NONCLIENTMETRICSW)info).lfCaptionFont : ((NONCLIENTMETRICSA)info).lfCaptionFont;", "-\t\t\t\thCaptionFont = OS.CreateFontIndirect (logFont);", "-\t\t\t\toldFont = OS.SelectObject (gc.handle, hCaptionFont);", "+\t\tif (hFont != 0) {", "+\t\t\thCurrentFont = hFont;", "+\t\t} else {", "+\t\t\tif (!OS.IsWinCE) {", "+\t\t\t\tNONCLIENTMETRICS info = OS.IsUnicode ? (NONCLIENTMETRICS) new NONCLIENTMETRICSW () : new NONCLIENTMETRICSA ();", "+\t\t\t\tinfo.cbSize = NONCLIENTMETRICS.sizeof;", "+\t\t\t\tif (OS.SystemParametersInfo (OS.SPI_GETNONCLIENTMETRICS, 0, info, 0)) {", "+\t\t\t\t\tLOGFONT logFont = OS.IsUnicode ? (LOGFONT) ((NONCLIENTMETRICSW)info).lfCaptionFont : ((NONCLIENTMETRICSA)info).lfCaptionFont;", "+\t\t\t\t\thCurrentFont = OS.CreateFontIndirect (logFont);", "+\t\t\t\t}", "+\t\t}", "+\t\tif (hCurrentFont != 0) {", "+\t\t\toldFont = OS.SelectObject (gc.handle, hCurrentFont);", "+\t\t}", "+\t\tif (foreground != -1) {", "+\t\t\tOS.SetTextColor (gc.handle, foreground);", "-\tif (hCaptionFont != 0) {", "+\tif (hCurrentFont != 0) {", "-\t\tOS.DeleteObject (hCaptionFont);", "+\t\tif (hCurrentFont != hFont) OS.DeleteObject (hCurrentFont);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d36c62efed00ad40cb79d76f896f9708", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "d70097b3723123dbd8abcf6b34b2f106be849ad8", "commitAfterChange": "b6666a5139ca22ba429077362792bdaf8b234877", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  static Hashtable gio_getMimeInfo()", "signatureAfterChange": "  static Hashtable gio_getMimeInfo()", "diff": ["-\tint /*long*/ mimeDatabase;", "+\tint /*long*/ mimeDatabase = 0, fileInfo = 0;", "-\tif (fileInputStream == 0) {", "-\t\tOS.g_object_unref (mimeDatabase);", "-\t\treturn null;", "-\t}", "-\tint /*long*/ [] modTimestamp = new int /*long*/ [2];", "-\tbuffer = Converter.wcsToMbcs (null, \"*\", true);", "-\tint /*long*/ fileInfo = OS.g_file_query_info(mimeDatabase, buffer, 0, 0, 0);", "-\tOS.g_file_info_get_modification_time(fileInfo, modTimestamp);", "-\tif (modTime != 0 && modTimestamp[0] == modTime) {", "-\t\treturn mimeTable;", "-\t} else {", "-\t\tmimeTable = new Hashtable();", "-\t\tmodTime = modTimestamp[0];", "-\t\tint /*long*/ reader = OS.g_data_input_stream_new (fileInputStream);", "-\t\tint[] length = new int[1];", "-\t\t", "-\t\tif (reader != 0) {", "-\t\t\tint /*long*/ linePtr = OS.g_data_input_stream_read_line (reader, length, 0, 0);", "-\t\t\twhile (linePtr != 0) {", "-\t\t\t\tbyte[] lineBytes = new byte[length[0]];", "-\t\t\t\tOS.memmove(lineBytes, linePtr, length[0]);", "-\t\t\t\tString line = new String (Converter.mbcsToWcs (null, lineBytes));", "-\t", "-\t\t\t\tint separatorIndex = line.indexOf (':');", "-\t\t\t\tif (separatorIndex > 0) {", "-\t\t\t\t\tVector mimeTypes = new Vector ();", "-\t\t\t\t    String mimeType = line.substring (0, separatorIndex);", "-\t\t\t\t\tString extensionFormat = line.substring (separatorIndex+1);", "-\t\t\t\t\tint extensionIndex = extensionFormat.indexOf (\".\");", "-\t\t\t\t\tif (extensionIndex > 0) {", "-\t\t\t\t\t\tString extension = extensionFormat.substring (extensionIndex);", "-\t\t\t\t\t\tmimeTypes.add (mimeType);", "-\t\t\t\t\t\tif (mimeTable.containsKey (extension)) {", "-\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t * If mimeType already exists, it is required to update", "-\t\t\t\t\t\t\t * the existing key (mime-type) with the new extension. ", "-\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\tVector value = (Vector) mimeTable.get (extension);", "-\t\t\t\t\t\t\tmimeTypes.addAll (value);", "+\ttry {", "+\t\tif (fileInputStream != 0) {", "+\t\t\tint /*long*/ [] modTimestamp = new int /*long*/ [2];", "+\t\t\tbuffer = Converter.wcsToMbcs (null, \"*\", true);", "+\t\t\tfileInfo = OS.g_file_query_info(mimeDatabase, buffer, 0, 0, 0);", "+\t\t\tOS.g_file_info_get_modification_time(fileInfo, modTimestamp);", "+\t\t\tif (modTime != 0 && modTimestamp[0] == modTime) {", "+\t\t\t\treturn mimeTable;", "+\t\t\t} else {", "+\t\t\t\tmimeTable = new Hashtable();", "+\t\t\t\tmodTime = modTimestamp[0];", "+\t\t\t\tint /*long*/ reader = OS.g_data_input_stream_new (fileInputStream);", "+\t\t\t\tint[] length = new int[1];", "+\t\t\t\t", "+\t\t\t\tif (reader != 0) {", "+\t\t\t\t\tint /*long*/ linePtr = OS.g_data_input_stream_read_line (reader, length, 0, 0);", "+\t\t\t\t\twhile (linePtr != 0) {", "+\t\t\t\t\t\tbyte[] lineBytes = new byte[length[0]];", "+\t\t\t\t\t\tOS.memmove(lineBytes, linePtr, length[0]);", "+\t\t\t\t\t\tString line = new String (Converter.mbcsToWcs (null, lineBytes));", "+\t\t\t", "+\t\t\t\t\t\tint separatorIndex = line.indexOf (':');", "+\t\t\t\t\t\tif (separatorIndex > 0) {", "+\t\t\t\t\t\t\tVector mimeTypes = new Vector ();", "+\t\t\t\t\t\t    String mimeType = line.substring (0, separatorIndex);", "+\t\t\t\t\t\t\tString extensionFormat = line.substring (separatorIndex+1);", "+\t\t\t\t\t\t\tint extensionIndex = extensionFormat.indexOf (\".\");", "+\t\t\t\t\t\t\tif (extensionIndex > 0) {", "+\t\t\t\t\t\t\t\tString extension = extensionFormat.substring (extensionIndex);", "+\t\t\t\t\t\t\t\tmimeTypes.add (mimeType);", "+\t\t\t\t\t\t\t\tif (mimeTable.containsKey (extension)) {", "+\t\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t\t * If mimeType already exists, it is required to update", "+\t\t\t\t\t\t\t\t\t * the existing key (mime-type) with the new extension. ", "+\t\t\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\t\t\tVector value = (Vector) mimeTable.get (extension);", "+\t\t\t\t\t\t\t\t\tmimeTypes.addAll (value);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tmimeTable.put (extension, mimeTypes);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tmimeTable.put (extension, mimeTypes);", "+\t\t\t\t\t\tOS.g_free(linePtr);", "+\t\t\t\t\t\tlinePtr = OS.g_data_input_stream_read_line (reader, length, 0, 0);", "-\t\t\t\tlinePtr = OS.g_data_input_stream_read_line (reader, length, 0, 0);", "+\t\t\t\tif (reader != 0) OS.g_object_unref (reader);", "+\t\t\t\treturn mimeTable;", "-\t\t}", "-\t\treturn mimeTable;", "+\t\t} ", "+\t\treturn null;", "+\t} finally {", "+\t\tif (fileInfo != 0) OS.g_object_unref(fileInfo);", "+\t\tif (fileInputStream != 0) OS.g_object_unref(fileInputStream);", "+\t\tif (mimeDatabase != 0) \tOS.g_object_unref (mimeDatabase);"]}], "num": 38938}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6b8205d39845771c74818e89f12bb30", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dd11dd20be1cf56c984511438aa1ac3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "fddcf2f032850d3eb6550c44c0aeb80fc19a12d0", "commitAfterChange": "3ae6372c58eb26df700867f6c185ea003b6c1de1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static int getDesktop(Display display)", "signatureAfterChange": " static int getDesktop(Display display)", "diff": ["-\tif (display == null) return DESKTOP_UNKNOWN;", "-\t", "-\t// If the desktop type for this display is already known, return it.", "-\tInteger desktopValue = (Integer) display.getData( desktopData );", "-\tif (desktopValue != null) {", "-\t\treturn desktopValue.intValue();", "-\t}", "+\tif (display == null) return DESKTOP_UNKNOWN;\t", "+\tInteger desktopValue = (Integer)display.getData(DESKTOP_DATA);", "+\tif (desktopValue != null) return desktopValue.intValue();", "-", "-\tif (isGnomeDesktop()) {", "-\t\tif (gnome_init()) desktop = DESKTOP_GNOME;", "-\t}", "-\t// Save the desktop type on the display itself.", "-\tdisplay.setData( desktopData, new Integer(desktop) );", "+\tif (isGnomeDesktop() && gnome_init()) desktop = DESKTOP_GNOME;", "+\tdisplay.setData(DESKTOP_DATA, new Integer(desktop));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fdb68bec16519b6d145eee1279f0b4a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "5e356c18b07e7f5af1a6b17c096783ad43ee7650", "commitAfterChange": "bec9de216652a0f1829bdec4dfa5d60c81e5e090", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 9, "signatureBeforeChange": " static int getDesktop(Display display)", "signatureAfterChange": " static int getDesktop(Display display)", "diff": ["-/* Determine the desktop for the given display. */", "-static int getDesktop(Display display) {", "-\tif (display == null) return DESKTOP_UNKNOWN;", "-\t", "-\t// If the desktop type for this display is already known, return it.", "-\tInteger desktopValue = (Integer) display.getData( desktopData );", "-\tif (desktopValue != null) {", "-\t\treturn desktopValue.intValue();", "-\t}", "-\tint desktop = DESKTOP_UNKNOWN;", "-\tif (isGnomeDesktop(display)) {", "-\t\tdesktop = DESKTOP_GNOME;", "-\t\t// Save the desktop type on the display itself.", "-\t\tdisplay.setData( desktopData, new Integer(desktop) );", "-\t\treturn desktop;", "-\tint xDisplay = display.xDisplay;", "-\tbyte[] cdeName   = Converter.wcsToMbcs (null, \"_DT_SM_PREFERENCES\", true);", "-\tbyte[] kdeName   = Converter.wcsToMbcs (null, \"KWIN_RUNNING\", true);", "-\t// Obtain the atoms for the various window manager signature properties.", "-\t// On CDE, the atom below may exist without DTWM running. If the atom ", "-\t// below is defined, the CDE database exists and the available", "-\t// applications can be queried.", "-\tint cde   = OS.XInternAtom( xDisplay, cdeName, true );", "-\tint kde   = OS.XInternAtom( xDisplay, kdeName, true );", "-\t", "-\t// Get the list of properties on the root window.", "-\tint   rootWindow = OS.XDefaultRootWindow( xDisplay );", "-\tint[] numProp = new int[1];", "-\tint   propList = OS.XListProperties( xDisplay, rootWindow, numProp );", "-\tif (propList == 0) return DESKTOP_UNKNOWN;", "-\tint[] property = new int[ numProp[0] ];", "-\tOS.memmove( property, propList, (property.length * 4) );", "-\tOS.XFree( propList );", "-\t", "-\t// A given WM (desktop) is active if the property exists on the root window.", "-\tfor (int index = 0; desktop == DESKTOP_UNKNOWN && index < property.length; index++) {", "-\t\tif (property[ index ] == OS.None) continue; // do not match atoms that do not exist", "-\t\tif (property[ index ] == cde) {", "-\t\t\tif (cde_init( display )) desktop = DESKTOP_CDE;", "-\t\t}\t", "-\t\tif (property[ index ] == kde) {", "-\t\t\tif (kde_init()) desktop = DESKTOP_KDE;", "-\t\t}\t", "-\t// Save the desktop type on the display itself.", "-\tdisplay.setData( desktopData, new Integer(desktop) );", "-\treturn desktop;", "+/* Determine the desktop for the given display. */", "+static int getDesktop(Display display) {", "+\tif (display == null) return DESKTOP_UNKNOWN;\t", "+\tInteger desktopValue = (Integer)display.getData(DESKTOP_DATA);", "+\tif (desktopValue != null) return desktopValue.intValue();", "+\tint desktop = DESKTOP_UNKNOWN;", "+\tif (isGnomeDesktop(display)) {", "+\t\tdesktop = DESKTOP_GNOME;", "+\t\tdisplay.setData(DESKTOP_DATA, new Integer(desktop));", "+\t\treturn desktop;", "+\t}", "+", "+\tint xDisplay = display.xDisplay;", "+\t/* Use the character encoding for the default locale */", "+\tbyte[] cdeName = Converter.wcsToMbcs(null, \"_DT_SM_PREFERENCES\", true);", "+\tbyte[] kdeName = Converter.wcsToMbcs(null, \"KWIN_RUNNING\", true);", "+\t/* Obtain the atoms for the various window manager signature properties.", "+\t * On CDE, the atom below may exist without DTWM running. If the atom ", "+\t * below is defined, the CDE database exists and the available", "+\t * applications can be queried.", "+\t */", "+\tint cde = OS.XInternAtom(xDisplay, cdeName, true);", "+\tint kde = OS.XInternAtom(xDisplay, kdeName, true);", "+\t", "+\t/* Get the list of properties on the root window. */", "+\tint rootWindow = OS.XDefaultRootWindow(xDisplay);", "+\tint[] numProp = new int[1];", "+\tint propList = OS.XListProperties(xDisplay, rootWindow, numProp);", "+\tif (propList == 0) return DESKTOP_UNKNOWN;", "+\tint[] property = new int[numProp[0]];", "+\tOS.memmove(property, propList, (property.length * 4));", "+\tOS.XFree(propList);", "+\t", "+\t/* A given WM (desktop) is active if the property exists on the root window. */", "+\tfor (int index = 0; desktop == DESKTOP_UNKNOWN && index < property.length; index++) {", "+\t\tif (property[index] == OS.None) continue; /* do not match atoms that do not exist */", "+\t\tif (property[index] == cde && cde_init(display)) desktop = DESKTOP_CDE;", "+\t\tif (property[index] == kde && kde_init()) desktop = DESKTOP_KDE;", "+\t}", "+\t", "+\tdisplay.setData(DESKTOP_DATA, new Integer(desktop));", "+\treturn desktop;", "+}"]}], "num": 48025}
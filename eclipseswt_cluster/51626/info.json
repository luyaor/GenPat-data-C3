{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ffed8c8806c844da299267e1ee9210c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12eedefa3fc961a50f710a1e553587b1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/carbon/org/eclipse/swt/program/Program.java", "commitBeforeChange": "14581ca5a7841e362a4bb6a68c76d00675c70760", "commitAfterChange": "2882bbd7423650466596733b7f7109e5d58042c8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "  static String[] parseCommand(String cmd)", "signatureAfterChange": " public ImageData getImageData ()", "diff": ["-", "-static String[] parseCommand(String cmd) {", "-\tVector args = new Vector();", "-\tint sIndex = 0;", "-\tint eIndex;", "-\twhile (sIndex < cmd.length()) {", "-\t\t/* Trim initial white space of argument. */", "-\t\twhile (sIndex < cmd.length() && Compatibility.isWhitespace(cmd.charAt(sIndex))) {", "-\t\t\tsIndex++;", "-\t\t}", "-\t\tif (sIndex < cmd.length()) {", "-\t\t\t/* If the command is a quoted string */", "-\t\t\tif (cmd.charAt(sIndex) == '\"' || cmd.charAt(sIndex) == '\\'') {", "-\t\t\t\t/* Find the terminating quote (or end of line).", "-\t\t\t\t * This code currently does not handle escaped characters (e.g., \" a\\\"b\").", "-\t\t\t\t */", "-\t\t\t\teIndex = sIndex + 1;", "-\t\t\t\twhile (eIndex < cmd.length() && cmd.charAt(eIndex) != cmd.charAt(sIndex)) eIndex++;", "-\t\t\t\tif (eIndex >= cmd.length()) { ", "-\t\t\t\t\t/* The terminating quote was not found", "-\t\t\t\t\t * Add the argument as is with only one initial quote.", "-\t\t\t\t\t */", "-\t\t\t\t\targs.addElement(cmd.substring(sIndex, eIndex));", "-\t\t\t\t}", "-\t\t\t\telse {", "-\t\t\t\t\t/* Add the argument, trimming off the quotes. */", "-\t\t\t\t\targs.addElement(cmd.substring(sIndex+1, eIndex));", "-\t\t\t\t}", "-\t\t\t\tsIndex = eIndex + 1;", "-\t\t\t}\t\t\t", "-\t\t\telse {", "-\t\t\t\t/* Use white space for the delimiters. */", "-\t\t\t\teIndex = sIndex;", "-\t\t\t\twhile (eIndex < cmd.length() && !Compatibility.isWhitespace(cmd.charAt(eIndex))) eIndex++;", "-\t\t\t\targs.addElement(cmd.substring(sIndex, eIndex));", "-\t\t\t\tsIndex = eIndex + 1;", "-\t}\t", "-\tString[] result = new String[args.size()];", "-\targs.copyInto(result);", "-\treturn result;", "+\tint[] iconRef = new int[1];", "+\tOS.GetIconRefFromFileInfo(fsRef, 0, null, 0, 0, 0, iconRef, null);", "+\tint[] family = new int[1];", "+\tint rc = OS.IconRefToIconFamily(iconRef[0], OS.kSelectorAlLAvailableData, family);", "+\tOS.ReleaseIconRef(iconRef[0]);", "+\tif (rc != OS.noErr) return null;", "+//\tImageData result = createImageFromFamily(family[0], OS.kLarge32BitData, OS.kLarge8BitMask, 32, 32);", "+\tImageData result = createImageFromFamily(family[0], OS.kSmall32BitData, OS.kSmall8BitMask, 16, 16);", "+\tOS.DisposeHandle(family[0]);", "+\tif (result == null) {", "+\t\tRGB[] rgbs = new RGB[] {", "+\t\t\tnew RGB(0xff, 0xff, 0xff), ", "+\t\t\tnew RGB(0x5f, 0x5f, 0x5f),", "+\t\t\tnew RGB(0x80, 0x80, 0x80),", "+\t\t\tnew RGB(0xC0, 0xC0, 0xC0),", "+\t\t\tnew RGB(0xDF, 0xDF, 0xBF),", "+\t\t\tnew RGB(0xFF, 0xDF, 0x9F),", "+\t\t\tnew RGB(0x00, 0x00, 0x00),", "+\t\t};  ", "+\t\tresult = new ImageData(16, 16, 4, new PaletteData(rgbs)\t);", "+\t\tresult.transparentPixel = 6; // use black for transparency", "+\t\tString[] p= {", "+\t\t\t\"CCCCCCCCGGG\",", "+\t\t\t\"CFAAAAACBGG\",", "+\t\t\t\"CAAAAAACFBG\",", "+\t\t\t\"CAAAAAACBBB\",", "+\t\t\t\"CAAAAAAAAEB\",", "+\t\t\t\"CAAAAAAAAEB\",", "+\t\t\t\"CAAAAAAAAEB\",", "+\t\t\t\"CAAAAAAAAEB\",", "+\t\t\t\"CAAAAAAAAEB\",", "+\t\t\t\"CAAAAAAAAEB\",", "+\t\t\t\"CAAAAAAAAEB\",", "+\t\t\t\"CAAAAAAAAEB\",", "+\t\t\t\"CDDDDDDDDDB\",", "+\t\t\t\"CBBBBBBBBBB\",", "+\t\t};", "+\t\tfor (int y= 0; y < p.length; y++) {", "+\t\t\tfor (int x= 0; x < 11; x++) {", "+\t\t\t\tresult.setPixel(x+3, y+1, p[y].charAt(x)-'A');", "+\t\t\t}", "+\t}", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8e390575c0cd6289d525c233e6e6cb1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "4edc576de20a88abac088ae701d29ce3e54ede4f", "commitAfterChange": "c2ec875b36ecf39df432358c14d183b7d7f45fe0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public ImageData getImageData ()", "signatureAfterChange": " public ImageData getImageData ()", "diff": ["-\tint[] iconRef = new int[1];", "-\tOS.GetIconRefFromFileInfo(fsRef, 0, null, 0, 0, 0, iconRef, null);", "-\tint[] family = new int[1];", "-\tint rc = OS.IconRefToIconFamily(iconRef[0], OS.kSelectorAlLAvailableData, family);", "-\tOS.ReleaseIconRef(iconRef[0]);", "-\tif (rc != OS.noErr) return null;", "-//\tImageData result = createImageFromFamily(family[0], OS.kLarge32BitData, OS.kLarge8BitMask, 32, 32);", "-\tImageData result = createImageFromFamily(family[0], OS.kSmall32BitData, OS.kSmall8BitMask, 16, 16);", "-\tOS.DisposeHandle(family[0]);", "-\tif (result == null) {", "-\t\tRGB[] rgbs = new RGB[] {", "-\t\t\tnew RGB(0xff, 0xff, 0xff), ", "-\t\t\tnew RGB(0x5f, 0x5f, 0x5f),", "-\t\t\tnew RGB(0x80, 0x80, 0x80),", "-\t\t\tnew RGB(0xC0, 0xC0, 0xC0),", "-\t\t\tnew RGB(0xDF, 0xDF, 0xBF),", "-\t\t\tnew RGB(0xFF, 0xDF, 0x9F),", "-\t\t\tnew RGB(0x00, 0x00, 0x00),", "-\t\t};  ", "-\t\tresult = new ImageData(16, 16, 4, new PaletteData(rgbs)\t);", "-\t\tresult.transparentPixel = 6; // use black for transparency", "-\t\tString[] p= {", "-\t\t\t\"CCCCCCCCGGG\",", "-\t\t\t\"CFAAAAACBGG\",", "-\t\t\t\"CAAAAAACFBG\",", "-\t\t\t\"CAAAAAACBBB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CDDDDDDDDDB\",", "-\t\t\t\"CBBBBBBBBBB\",", "-\t\t};", "-\t\tfor (int y= 0; y < p.length; y++) {", "-\t\t\tfor (int x= 0; x < 11; x++) {", "-\t\t\t\tresult.setPixel(x+3, y+1, p[y].charAt(x)-'A');", "-\t\t\t}", "-\t\t}", "-\t}", "-\treturn result;", "+//\tint[] iconRef = new int[1];", "+//\tOS.GetIconRefFromFileInfo(fsRef, 0, null, 0, 0, 0, iconRef, null);", "+//\tint[] family = new int[1];", "+//\tint rc = OS.IconRefToIconFamily(iconRef[0], OS.kSelectorAlLAvailableData, family);", "+//\tOS.ReleaseIconRef(iconRef[0]);", "+//\tif (rc != OS.noErr) return null;", "+////\tImageData result = createImageFromFamily(family[0], OS.kLarge32BitData, OS.kLarge8BitMask, 32, 32);", "+//\tImageData result = createImageFromFamily(family[0], OS.kSmall32BitData, OS.kSmall8BitMask, 16, 16);", "+//\tOS.DisposeHandle(family[0]);", "+//\tif (result == null) {", "+//\t\tRGB[] rgbs = new RGB[] {", "+//\t\t\tnew RGB(0xff, 0xff, 0xff), ", "+//\t\t\tnew RGB(0x5f, 0x5f, 0x5f),", "+//\t\t\tnew RGB(0x80, 0x80, 0x80),", "+//\t\t\tnew RGB(0xC0, 0xC0, 0xC0),", "+//\t\t\tnew RGB(0xDF, 0xDF, 0xBF),", "+//\t\t\tnew RGB(0xFF, 0xDF, 0x9F),", "+//\t\t\tnew RGB(0x00, 0x00, 0x00),", "+//\t\t};  ", "+//\t\tresult = new ImageData(16, 16, 4, new PaletteData(rgbs)\t);", "+//\t\tresult.transparentPixel = 6; // use black for transparency", "+//\t\tString[] p= {", "+//\t\t\t\"CCCCCCCCGGG\",", "+//\t\t\t\"CFAAAAACBGG\",", "+//\t\t\t\"CAAAAAACFBG\",", "+//\t\t\t\"CAAAAAACBBB\",", "+//\t\t\t\"CAAAAAAAAEB\",", "+//\t\t\t\"CAAAAAAAAEB\",", "+//\t\t\t\"CAAAAAAAAEB\",", "+//\t\t\t\"CAAAAAAAAEB\",", "+//\t\t\t\"CAAAAAAAAEB\",", "+//\t\t\t\"CAAAAAAAAEB\",", "+//\t\t\t\"CAAAAAAAAEB\",", "+//\t\t\t\"CAAAAAAAAEB\",", "+//\t\t\t\"CDDDDDDDDDB\",", "+//\t\t\t\"CBBBBBBBBBB\",", "+//\t\t};", "+//\t\tfor (int y= 0; y < p.length; y++) {", "+//\t\t\tfor (int x= 0; x < 11; x++) {", "+//\t\t\t\tresult.setPixel(x+3, y+1, p[y].charAt(x)-'A');", "+//\t\t\t}", "+//\t\t}", "+//\t}", "+//\treturn result;", "+\treturn null;"]}], "num": 51626}
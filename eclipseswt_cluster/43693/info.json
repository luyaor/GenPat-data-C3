{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5042b61eef9dd0acc1d05bc5f462eadc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "876c6730fbe5c62ef8c937db1c62d497", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "fddcf2f032850d3eb6550c44c0aeb80fc19a12d0", "commitAfterChange": "3ae6372c58eb26df700867f6c185ea003b6c1de1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " private static String[] getExtensions(Display display)", "signatureAfterChange": " static String[] getExtensions(Display display)", "diff": ["-private static String[] getExtensions(Display display) {", "+static String[] getExtensions(Display display) {", "-\t\t\t", "-\t// Create a unique set of the file extensions.", "+\t/* Create a unique set of the file extensions. */", "-\t\tVector mimeExts = (Vector)mimeInfo.get( mimeType );", "+\t\tVector mimeExts = (Vector)mimeInfo.get(mimeType);", "-\t\t\tif (!extensions.contains(mimeExts.elementAt(index) )) {", "-\t\t\t\textensions.addElement(mimeExts.elementAt(index) );", "+\t\t\tif (!extensions.contains(mimeExts.elementAt(index))) {", "+\t\t\t\textensions.addElement(mimeExts.elementAt(index));", "-\t// Return the list of extensions.", "+\t/* Return the list of extensions. */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78c1757776f077ddbeebdef6965ad80b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "fddcf2f032850d3eb6550c44c0aeb80fc19a12d0", "commitAfterChange": "3ae6372c58eb26df700867f6c185ea003b6c1de1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 11, "signatureBeforeChange": "  private static boolean isGnomeDesktop()", "signatureAfterChange": "  static boolean isGnomeDesktop()", "diff": ["-", "-private static boolean isGnomeDesktop() {", "-\t/*", "-\t * A Gnome Window Manager is detected by looking for a specific", "-\t * property on the root window.", "-\t */", "-\tbyte[] name = Converter.wcsToMbcs(null, \"_WIN_SUPPORTING_WM_CHECK\", true);", "-\tint atom = OS.gdk_atom_intern(name, true);", "-\tif (atom == OS.GDK_NONE) return false;\t", "-\tint[] actualType = new int[1];", "-\tint[] actualFormat = new int[1];", "-\tint[] actualLength = new int[1];", "-\tint[] data = new int[1];", "-\tif (!OS.gdk_property_get(OS.GDK_ROOT_PARENT(), atom, OS.XA_CARDINAL,", "-\t\t0, 1, 0, actualType, actualFormat, actualLength, data)) return false;", "-\tif (data[0] != 0) OS.g_free(data[0]);", "-\treturn actualLength[0] > 0;", "+", "+static boolean isGnomeDesktop() {", "+\t/*", "+\t * A Gnome Window Manager is detected by looking for a specific", "+\t * property on the root window.", "+\t */", "+\tbyte[] name = Converter.wcsToMbcs(null, \"_WIN_SUPPORTING_WM_CHECK\", true);", "+\tint atom = OS.gdk_atom_intern(name, true);", "+\tif (atom == OS.GDK_NONE) return false;\t", "+\tint[] actualType = new int[1];", "+\tint[] actualFormat = new int[1];", "+\tint[] actualLength = new int[1];", "+\tint[] data = new int[1];", "+\tif (!OS.gdk_property_get(OS.GDK_ROOT_PARENT(), atom, OS.XA_CARDINAL,", "+\t\t0, 1, 0, actualType, actualFormat, actualLength, data)) return false;", "+\tif (data[0] != 0) OS.g_free(data[0]);", "+\treturn actualLength[0] > 0;"]}], "num": 43693}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c44c0340a6f27bf4cc787ecd51d6459", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab95be3faf70cdc48a83824b99cbb30c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "26107c4df698e35753dc6a3dcb5e875af68d4199", "commitAfterChange": "98bbb377c8fa0a6157f81dc426a5fddf7133e096", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 20, "signatureBeforeChange": " int processSelection  (int int0, int int1, int int2)", "signatureAfterChange": "  int processSelection  (int int0, int int1, int int2)", "diff": ["-*/", "+", "+\tif ((style & SWT.DROP_DOWN) != 0) {", "+\t\tint eventPtr = OS.gtk_get_current_event ();", "+\t\tif (eventPtr != 0) {", "+\t\t\tGdkEvent gdkEvent = new GdkEvent ();", "+\t\t\tOS.memmove (gdkEvent, eventPtr, GdkEvent.sizeof);", "+\t\t\tswitch (gdkEvent.type) {", "+\t\t\t\tcase OS.GDK_BUTTON_PRESS:", "+\t\t\t\tcase OS.GDK_2BUTTON_PRESS: ", "+\t\t\t\tcase OS.GDK_BUTTON_RELEASE: {", "+\t\t\t\t\tdouble [] x_win = new double [1];", "+\t\t\t\t\tdouble [] y_win = new double [1];", "+\t\t\t\t\tOS.gdk_event_get_coords (eventPtr, x_win, y_win);", "+\t\t\t\t\tif ((int) x_win [0] > OS.GTK_WIDGET_WIDTH (boxHandle)) {", "+\t\t\t\t\t\tevent.detail = SWT.ARROW;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "514dd60ef9ef6c5d9f0b595e1836d08d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "1051f4ce684a4239d50c42e8ac0e4ce13591cb56", "commitAfterChange": "ef701f46e5b2e0f2985bbdd5c26f3756062468e4", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "  LRESULT WM_CHAR (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_CHAR (int wParam, int lParam)", "diff": ["-\t\tcase OS.VK_ESCAPE:", "+\t\t\t/*", "+\t\t\t* Feature in Windows.  Windows sends NM_RETURN from WM_KEYDOWN", "+\t\t\t* instead of using WM_CHAR.  This means that application code", "+\t\t\t* that expects to consume the key press and therefore avoid the", "+\t\t\t* SWT.DefaultSelection event from WM_CHAR will fail.  The fix", "+\t\t\t* is to implement SWT.DefaultSelection in WM_CHAR instead of", "+\t\t\t* using NM_RETURN.", "+\t\t\t*/", "+\t\t\tEvent event = new Event ();", "+\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "+\t\t\tif (hItem != 0) {", "+\t\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\t\ttvItem.hItem = hItem;", "+\t\t\t\ttvItem.mask = OS.TVIF_PARAM;", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "+\t\t\t\tevent.item = items [tvItem.lParam];", "+\t\t\t}", "+\t\t\tpostEvent (SWT.DefaultSelection, event);", "+\t\t\t//FALL THROUGH", "+\t\tcase OS.VK_ESCAPE:"]}], "num": 45466}
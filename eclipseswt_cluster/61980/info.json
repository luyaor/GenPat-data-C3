{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "15f07535d42db6d6ad146d036f92cb4c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcf14ca5a6406b5c1170dfc9f1042435", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "eca9561f00e8f6869c3f064d2cc210213e7961a5", "commitAfterChange": "7b035d7945e49f32511c350507eda7aad65fec22", "methodNumberBeforeChange": 209, "methodNumberAfterChange": 210, "signatureBeforeChange": "\r void setBidiCaret(boolean setKeyboard)", "signatureAfterChange": "\r void setBidiKeyboardLanguage()", "diff": ["-void setBidiCaret(boolean setKeyboard) {\r", "-\tif (setKeyboard) {\r", "-\t\tif (offsetInLine > 0 && bidi.isRightToLeft(offsetInLine - 1) != bidi.isRightToLeft(offsetInLine)) {\r", "-\t\t\t// continue with previous character type\r", "-\t\t\tbidi.setKeyboardLanguage(offsetInLine - 1);\r", "-\t\t} \r", "-\t\telse  {\r", "-\t\t\tbidi.setKeyboardLanguage(offsetInLine);\r", "-\t\t}\t\r", "-\t}\r", "+void setBidiKeyboardLanguage() {\r", "+\tint line = content.getLineAtOffset(caretOffset);\r", "+\tint lineStartOffset = content.getOffsetAtLine(line);\r", "+\tint offsetInLine = caretOffset - lineStartOffset;\r", "+\tString lineText = content.getLine(line);\r", "+\tGC gc = new GC(this);\r", "+\tStyledTextBidi bidi;\r", "+\tint lineLength = lineText.length();\r", "+\r", "+\t// Don't supply the bold styles/font since we don't want to measure anything\r", "+\tbidi = new StyledTextBidi(gc, tabWidth, lineText, null, null, getStyleOffsets(lineText, lineStartOffset));\r", "+\tif (offsetInLine == 0) {\r", "+\t\tbidi.setKeyboardLanguage(offsetInLine);\r", "+\t}\r", "+\telse\r", "+\tif (offsetInLine >= lineLength) {\r", "+\t\toffsetInLine = Math.min(offsetInLine, lineLength - 1);\r", "+\t\tbidi.setKeyboardLanguage(offsetInLine);\r", "+\t}\r", "+\telse\r", "+\tif (lastCaretDirection == ST.COLUMN_NEXT) {\r", "+\t\t// continue with previous character type\r", "+\t\tbidi.setKeyboardLanguage(offsetInLine - 1);\r", "+\t} \r", "+\telse {\r", "+\t\tbidi.setKeyboardLanguage(offsetInLine);\r", "+\t}\t\r", "+\tgc.dispose();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed993af6fbe102bbbe1dd8c31fb88b1a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 58, "signatureBeforeChange": " int processMouseDown (MacMouseEvent mmEvent)", "signatureAfterChange": "\t  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "diff": ["-}", "-int processMouseDown (MacMouseEvent mmEvent) {", "-\tDisplay display = getDisplay ();", "-\tShell shell = getShell ();", "-\tdisplay.hideToolTip ();", "-    int button= mmEvent.getButton();", "-\tsendMouseEvent (SWT.MouseDown, button, mmEvent);", "-\tif (button == 2 && hooks (SWT.DragDetect)) {", "-\t\tsendEvent (SWT.DragDetect);", "-\t}", "-\tif (button == 3 && menu != null) {", "-        /* AW", "-\t\tOS.XmProcessTraversal (handle, OS.XmTRAVERSE_CURRENT);", "-\t\tmenu.setVisible (true);", "-\t\t*/", "-\t}", "-\tint clickTime = display.getDoubleClickTime ();", "-\tint lastTime = display.lastTime, eventTime = mmEvent.getWhen();", "-\tint lastButton = display.lastButton, eventButton = button;", "-\tif (lastButton == eventButton && lastTime != 0 && Math.abs (lastTime - eventTime) <= clickTime) {", "-\t\tsendMouseEvent (SWT.MouseDoubleClick, eventButton, mmEvent);", "-\t}", "-\tdisplay.lastTime = eventTime == 0 ? 1 : eventTime;", "-\tdisplay.lastButton = eventButton;", "+", "+int kEventMouseDown (int nextHandler, int theEvent, int userData) {", "+\tShell shell = getShell ();", "+\tif ((state & GRAB) != 0) {", "+\t\tint [] clickCount = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamClickCount, OS.typeUInt32, null, 4, null, clickCount);", "+\t\tsendMouseEvent (SWT.MouseDown, theEvent);", "+\t\tif (clickCount [0] == 2) sendMouseEvent (SWT.MouseDoubleClick, theEvent);", "+\t\tDisplay display = getDisplay ();", "+\t\tdisplay.grabControl = this;", "+\t}", "-\t*/", "+\t*/\t", "-\treturn 0;", "+\treturn OS.eventNotHandledErr;"]}], "num": 61980}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6de0e6f1a3af2f316efeb59cf3b1c7e6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fc1da55e84aa9651422127c16a27f26", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ce2f35c3f6b1d0b5778f68f011b1d8668d3c5c72", "commitAfterChange": "00bee382096a1807d86474fed7c933116a37eeb8", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 90, "signatureBeforeChange": "\r void drawLine(String line, int lineIndex, int paintY, GC gc, Color widgetBackground, Color widgetForeground, boolean clearBackground)", "signatureAfterChange": "\r void drawLine(String line, int lineIndex, int paintY, GC gc, Color widgetBackground, Color widgetForeground, boolean clearBackground)", "diff": ["-\tint selectionEndX = 0;\r", "-\tint clientAreaWidth = getClientArea().width;\r", "-\tint selectionStartOffset;\r", "-\tint selectionEndOffset; \r", "-\tint selectionLength;\r", "-\tboolean lineSelection;\r", "+\tint selectionStart = selection.x;\r", "+\tint selectionEnd = selection.y;\r", "+\tStyledTextBidi bidi = null;\r", "+\t}\r", "+\tif (isBidi()) {\r", "+\t\tint[] boldStyles = getBoldRanges(styles, lineOffset, lineLength);\r", "+\t\tsetLineFont(gc, gc.getFont().getFontData()[0], SWT.NORMAL);\r", "+\t\tbidi = new StyledTextBidi(gc, tabWidth, line, boldStyles, boldFont, getStyleOffsets (line, lineOffset));\t\t\r", "-\t// calculate offset of selection start and end relative to the line start\r", "-\tselectionStartOffset = Math.max(0, selection.x - lineOffset);\r", "-\tselectionEndOffset = selection.y - lineOffset; \r", "-\tselectionLength = selectionEndOffset - selectionStartOffset;\t\r", "-\tif (selectionLength == 0 || selectionVisible == false) {\r", "-\t\tselectionStartOffset = 0;\r", "-\t\tselectionEndOffset = 0;\r", "-\t}\r", "-\tlineSelection = selectionEndOffset > 0 && selectionStartOffset <= lineLength;\r", "-\tif (lineSelection == false && clearBackground) {\r", "-\t\t// draw background for completely unselected line\r", "+\tif (clearBackground && ((getStyle() & SWT.FULL_SELECTION) == 0 || selectionStart > lineOffset || selectionEnd <= lineOffset + lineLength)) {\r", "+\t\t// draw background if full selection is off or if line is not completely selected\r", "-\t\tgc.fillRectangle(0, paintY, clientAreaWidth, lineHeight);\r", "-\t}\t\r", "-\tif (selectionStartOffset > 0) {\r", "-\t\tString unselectedLine;\t\t\r", "-\t\tif (selectionStartOffset > lineLength) {\r", "-\t\t\tunselectedLine = line;\r", "-\t\t}\r", "-\t\telse {\r", "-\t\t\tif (clearBackground) {\r", "-\t\t\t\t// draw background for partially unselected line\r", "-\t\t\t\tint selectionStartX = textWidth(line, lineOffset, 0, selectionStartOffset, styles, 0, gc);\r", "-\t\t\t\tgc.setBackground(lineBackground);\r", "-\t\t\t\tgc.setForeground(lineBackground);\r", "-\t\t\t\tgc.fillRectangle(0, paintY, selectionStartX - horizontalScrollOffset, lineHeight);\r", "-\t\t\t}\r", "-\t\t\tunselectedLine = line.substring(0, selectionStartOffset);\r", "-\t\t}\r", "-\t\tdrawStyledLine(unselectedLine, lineOffset, 0, styles, 0, paintY, gc, lineBackground, widgetForeground);\r", "+\t\tgc.fillRectangle(0, paintY, getClientArea().width, lineHeight);\r", "-\tif (selectionLength > 0 && lineSelection) {\r", "-\t\t// draw selected text\r", "-\t\tselectionEndX = drawLineSelection(line, lineOffset, selectionStartOffset, selectionLength, styles, paintY, gc) - horizontalScrollOffset;\r", "-\t\tif (selectionEndX < clientAreaWidth && clearBackground) {\r", "-\t\t\t// draw background after selection\r", "-\t\t\tgc.setBackground(lineBackground);\r", "-\t\t\tgc.setForeground(lineBackground);\r", "-\t\t\tgc.fillRectangle(selectionEndX, paintY, clientAreaWidth - selectionEndX, lineHeight);\r", "-\t\t}\r", "-\t\tselectionEndX += horizontalScrollOffset;\r", "+\tif (selectionStart != selectionEnd) {\r", "+\t\tdrawLineSelectionBackground(line, lineOffset, styles, paintY, gc, bidi);\r", "-\tif (selectionEndOffset < lineLength) {\r", "-\t\tselectionEndOffset = Math.max(0, selectionEndOffset);\r", "-\t\tdrawStyledLine(line, lineOffset, selectionEndOffset, styles, selectionEndX, paintY, gc, lineBackground, widgetForeground);\r", "+\tif (selectionStart != selectionEnd && ((selectionStart >= lineOffset && selectionStart < lineOffset + lineLength) || (selectionStart < lineOffset && selectionEnd > lineOffset))) {\r", "+\t\tstyles = getSelectionLineStyles(styles);\r", "+\t}\r", "+\tif (isBidi()) {\r", "+\t\tint paintX = textWidth(line, lineOffset, 0, 0, styles, 0, gc, bidi);\r", "+\t\tdrawStyledLine(line, lineOffset, 0, styles, paintX, paintY, gc, lineBackground, widgetForeground, bidi);\r", "+\t}\r", "+\telse {\r", "+\t\tdrawStyledLine(line, lineOffset, 0, styles, 0, paintY, gc, lineBackground, widgetForeground, bidi);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "207d50593bfc5c3391af31d633c91dc4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/DisplayRenderer.java", "commitBeforeChange": "3d9a745937224b38cf406ad93b5005f8ff95bd1b", "commitAfterChange": "1cb1a83b374d003844ef54f22d246c9e3e7d60bd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void drawLineSelectionBackground(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi)", "signatureAfterChange": " protected void drawLineBreakSelection(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi)", "diff": ["-protected void drawLineSelectionBackground(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi) {", "+protected void drawLineBreakSelection(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi) {", "-\tLineCache lineCache = parent.internalGetLineCache();", "-\tStyledTextContent content = getContent();", "-\tint selectionBackgroundWidth = -1;", "-\tint selectionLength = selectionEnd - selectionStart;", "-\tboolean wordWrap = parent.internalGetWordWrap();", "-\tboolean isRightOriented = (parent.getStyle() & SWT.MIRRORED) != 0;", "-\tif (selectionEnd == selectionStart || selectionEnd < 0 || selectionStart > lineLength) {", "+\tif (selectionEnd == selectionStart || selectionEnd < 0 || selectionStart > lineLength || selectionEnd <= lineLength) {", "-\t\tpaintX = parent.getBidiTextPosition(line, selectionStart, bidi);", "+\t\tpaintX = bidi.getTextWidth();", "+\t\t// handle empty line case", "+\t\tif (paintX == 0) {", "+\t\t\tpaintX = StyledText.XINSET;", "+\t\t}", "-\t\tpaintX = getTextPosition(line, lineOffset, selectionStart, filterLineStyles(styles), gc);", "-\t}", "-\t// selection extends past end of line?", "-\tif (selectionEnd > lineLength) {", "-\t\tif ((parent.getStyle() & SWT.FULL_SELECTION) != 0) {", "-\t\t\t// use the greater of the client area width and the content ", "-\t\t\t// width. fixes 1G8IYRD", "-\t\t\tselectionBackgroundWidth = Math.max(getClientArea().width, lineCache.getWidth());", "-\t\t}", "-\t\telse {", "-\t\t\tselectionLength = lineLength - selectionStart;", "-\t\t}", "+\t\tpaintX = getTextPosition(line, lineOffset, lineLength, filterLineStyles(styles), gc);", "-\tif (selectionBackgroundWidth == -1) {", "+\tif ((parent.getStyle() & SWT.FULL_SELECTION) != 0) {", "+\t\tLineCache lineCache = parent.internalGetLineCache();", "+\t\t// use the greater of the client area width and the content ", "+\t\t// width. fixes 1G8IYRD", "+\t\tint selectionBackgroundWidth = Math.max(getClientArea().width, lineCache.getWidth());", "+\t\tgc.fillRectangle(paintX - horizontalScrollOffset + leftMargin, paintY, selectionBackgroundWidth, lineHeight);", "+\t}", "+\telse {", "-", "-\t\tif (wordWrap) {", "+\t\tif (parent.internalGetWordWrap()) {", "+\t\t\tStyledTextContent content = getContent();", "-\t\t\t// offset of this line?\t\t\t", "+\t\t\t// offset of this line?", "-\t\tif (bidi != null) {", "-\t\t\tselectionBackgroundWidth = parent.getBidiTextPosition(line, selectionStart + selectionLength, bidi) - paintX;", "-\t\t}", "-\t\telse {", "-\t\t\tselectionBackgroundWidth = getTextWidth(line, lineOffset, selectionStart, selectionLength, styles, paintX, gc);", "-\t\t}", "-\t\tif (selectionBackgroundWidth < 0) {", "-\t\t\t// width can be negative when in R2L bidi segment", "-\t\t\tpaintX += selectionBackgroundWidth;", "-\t\t\tselectionBackgroundWidth *= -1;", "-\t\t}", "-\t\tif (selectionEnd > lineLength && isWrappedLine == false) {", "-\t\t\tselectionEnd = selectionStart + selectionLength;", "-\t\t\t// if the selection extends past this line, render an additional ", "-\t\t\t// whitespace background at the end of the line to represent the ", "-\t\t\t// selected line break", "-\t\t\tif (bidi != null && selectionEnd > 0 && (bidi.isRightToLeft(selectionEnd - 1) || (isRightOriented && bidi.isRightToLeft(selectionEnd - 1) == false))) {", "-\t\t\t\tint lineEndX = bidi.getTextWidth();", "-\t\t\t\tgc.fillRectangle(lineEndX - horizontalScrollOffset + leftMargin, paintY, lineEndSpaceWidth, lineHeight);", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tselectionBackgroundWidth += lineEndSpaceWidth;", "-\t\t\t}", "+\t\tif (isWrappedLine == false) {", "+\t\t\t// render the line break selection", "+\t\t\tgc.fillRectangle(paintX - horizontalScrollOffset + leftMargin, paintY, lineEndSpaceWidth, lineHeight);", "-\t// handle empty line case", "-\tif (bidi != null && paintX == 0) {", "-\t\tpaintX = StyledText.XINSET;\t", "-\t}", "-\t// fill the background first since expanded tabs are not ", "-\t// drawn as spaces. tabs just move the draw position. ", "-\tgc.fillRectangle(paintX - horizontalScrollOffset + leftMargin, paintY, selectionBackgroundWidth, lineHeight);"]}], "num": 6539}
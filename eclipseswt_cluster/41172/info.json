{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f116f53be21fa33c533b296a279b772b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b5d761ea0285ead70400fa89b623f3e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "21ad7e1c41ce1d63dd243622044164fd46b26ef4", "commitAfterChange": "1c5467f79f5b1c73782459594b2f72f13320a777", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "  boolean setScrollWidth (TableItem [] items, boolean set)", "signatureAfterChange": "  boolean setScrollWidth ()", "diff": ["+boolean setScrollWidth () {", "+\treturn setScrollWidth (items, true);", "+}", "-", "-boolean setScrollWidth (TableItem [] items, boolean set) {", "-\tif (columnCount != 0) return false;", "-\tif (currentItem != null) {", "-//\t\tfixScrollWidth = true;", "-\t\treturn false;", "-\t}", "-\tif (drawCount != 0) return false;", "-\tGC gc = new GC (this);", "-\t\tTableItem item = items [i];", "-\t\t\tnewWidth = Math.max (newWidth, item.calculateWidth (0, gc, true));", "-\t\t\tif (gc.isDisposed ()) gc = new GC (this);", "-//\tif (!set) {", "-//\t\tshort [] width = new short [1];", "-//\t\tOS.GetDataBrowserTableViewNamedColumnWidth (handle, column_id, width);", "-//\t\tif (width [0] >= newWidth) return false;", "-//\t}", "-//\tOS.SetDataBrowserTableViewNamedColumnWidth (handle, column_id, (short) newWidth);", "-\tif (!set) {", "-\t\tif (firstColumn.width() > newWidth) return false;", "-\tfirstColumn.setWidth (newWidth);", "-\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "642d1ffad2844e98ffde636601778fc2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "21ad7e1c41ce1d63dd243622044164fd46b26ef4", "commitAfterChange": "1c5467f79f5b1c73782459594b2f72f13320a777", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": "  boolean setScrollWidth (boolean set, int[] childIds, boolean recurse)", "signatureAfterChange": "  boolean setScrollWidth (TreeItem item, boolean recurse, boolean callMeasureItem)", "diff": ["+", "+boolean setScrollWidth (TreeItem item, boolean recurse, boolean callMeasureItem) {", "+\treturn setScrollWidth (new TreeItem[] {item}, recurse, callMeasureItem);", "+}", "-", "-boolean setScrollWidth (boolean set, int[] childIds, boolean recurse) {", "-//\tif (ignoreRedraw || drawCount != 0) return false;", "-//\tif (columnCount != 0 || childIds == null) return false;", "-//\tGC gc = new GC (this);", "-//\tint newWidth = calculateWidth (childIds, gc, recurse, 0, 0);", "-//\tgc.dispose ();", "-//\tnewWidth += getInsetWidth (column_id, false);", "-//\tif (!set) {", "-//\t\tshort [] width = new short [1];", "-//\t\tOS.GetDataBrowserTableViewNamedColumnWidth (handle, column_id, width);", "-//\t\tif (width [0] >= newWidth) return false;", "-//\t}", "-//\tOS.SetDataBrowserTableViewNamedColumnWidth (handle, column_id, (short) newWidth);", "-\treturn true;"]}], "num": 41172}
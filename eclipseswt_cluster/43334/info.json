{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3025d42284c09c7b29a5ac7752dd4138", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d600b2cc5404f8023f8d4fe737784dd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "a69e6c83c8a519463fb81c79bec48584d8e6673d", "commitAfterChange": "54942bc8122ab5be263e29cd3c306c3f16f22421", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public Image (Device device, String filename)", "signatureAfterChange": " public Image (Device device, String filename)", "diff": ["-\t\tint status = Gdip.Image_GetLastStatus(bitmap);", "-\t\tif (bitmap != 0 && status == 0) {", "-\t\t\tint transparentColor = -1;", "+\t\tif (bitmap != 0) {", "-\t\t\tint width = Gdip.Image_GetWidth(bitmap);", "-\t\t\tint height = Gdip.Image_GetHeight(bitmap);", "-\t\t\tif (filename.toLowerCase().endsWith(\".ico\")) {", "-\t\t\t\tthis.type = SWT.ICON;", "-\t\t\t\tint[] hicon = new int[1];", "-\t\t\t\tGdip.Bitmap_GetHICON(bitmap, hicon);", "-\t\t\t\tthis.handle = hicon[0];", "-\t\t\t} else {", "-\t\t\t\tthis.type = SWT.BITMAP;", "-\t\t\t\tint pixelFormat = Gdip.Image_GetPixelFormat(bitmap);", "-\t\t\t\tswitch (pixelFormat) {", "-\t\t\t\t\tcase Gdip.PixelFormat32bppARGB:", "-\t\t\t\t\t\tint lockedBitmapData = Gdip.BitmapData_new();", "-\t\t\t\t\t\tif (lockedBitmapData == 0) break;", "-\t\t\t\t\t\tGdip.Bitmap_LockBits(bitmap, 0, 0, pixelFormat, lockedBitmapData);", "-\t\t\t\t\t\tBitmapData bitmapData = new BitmapData();", "-\t\t\t\t\t\tGdip.MoveMemory(bitmapData, lockedBitmapData, BitmapData.sizeof);", "-\t\t\t\t\t\tint stride = bitmapData.Stride;", "-\t\t\t\t\t\tint pixels = bitmapData.Scan0;", "-\t\t\t\t\t\tbyte[] line = new byte[stride];", "-\t\t \t\t \t\talphaData = new byte[width * height];", "-\t\t \t\t \t\tfor (int y = 0; y < height; y++) {", "-\t\t \t\t \t\t\tOS.MoveMemory(line, pixels + (y * stride), stride);", "-\t\t \t\t \t\t \tfor (int x = 0; x < width; x++) {", "-\t\t \t\t \t\t \t\talphaData[y*width+x] = line[x*4 + 3];", "-\t\t \t\t \t\t \t}", "-\t\t \t\t \t\t}", "-\t\t \t\t \t\tGdip.Bitmap_UnlockBits(bitmap, lockedBitmapData);", "-\t\t\t\t\t\tGdip.BitmapData_delete(lockedBitmapData);", "-\t\t\t\t\t\tthis.handle = createDIB(width, height, 32);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Gdip.PixelFormat1bppIndexed:", "-\t\t\t\t\tcase Gdip.PixelFormat4bppIndexed:", "-\t\t\t\t\tcase Gdip.PixelFormat8bppIndexed:", "-\t\t\t\t\t\tint paletteSize = Gdip.Image_GetPaletteSize(bitmap);", "-\t\t\t\t\t\tint hHeap = OS.GetProcessHeap();", "-\t\t\t\t\t\tint palette = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, paletteSize);", "-\t\t\t\t\t\tif (palette == 0) break;", "-\t\t\t\t\t\tGdip.Image_GetPalette(bitmap, palette, paletteSize);", "-\t\t\t\t\t\tColorPalette colorPalette = new ColorPalette();", "-\t\t\t\t\t\tGdip.MoveMemory(colorPalette, palette, ColorPalette.sizeof);", "-\t\t\t\t\t\tint[] entries = new int[colorPalette.Count];", "-\t\t\t\t\t\tOS.MoveMemory(entries, palette + 8, entries.length * 4);", "-\t\t\t\t\t\tOS.HeapFree(hHeap, 0, palette);", "-\t\t\t\t\t\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER();", "-\t\t\t\t\t\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;", "-\t\t\t\t\t\tbmiHeader.biWidth = width;", "-\t\t\t\t\t\tbmiHeader.biHeight = -height;", "-\t\t\t\t\t\tbmiHeader.biPlanes = 1;", "-\t\t\t\t\t\tbmiHeader.biBitCount = (short)8;", "-\t\t\t\t\t\tbmiHeader.biCompression = OS.BI_RGB;", "-\t\t\t\t\t\tbyte[] bmi = new byte[BITMAPINFOHEADER.sizeof + colorPalette.Count * 4];", "-\t\t\t\t\t\tOS.MoveMemory(bmi, bmiHeader, BITMAPINFOHEADER.sizeof);\t\t\t\t\t", "-\t\t\t\t\t\tint offset = BITMAPINFOHEADER.sizeof;", "-\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++) {", "-\t\t\t\t\t\t\tif (((entries[i] >> 24) & 0xFF) == 0 && (colorPalette.Flags & Gdip.PaletteFlagsHasAlpha) != 0) {", "-\t\t\t\t\t\t\t\ttransparentPixel = i;", "-\t\t\t\t\t\t\t\ttransparentColor = entries[i] & 0xFFFFFF;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbmi[offset] = (byte)((entries[i] & 0xFF) >> 0);", "-\t\t\t\t\t\t\tbmi[offset + 1] = (byte)((entries[i] & 0xFF00) >> 8);", "-\t\t\t\t\t\t\tbmi[offset + 2] = (byte)((entries[i] & 0xFF0000) >> 16);", "-\t\t\t\t\t\t\tbmi[offset + 3] = 0;", "-\t\t\t\t\t\t\toffset += 4;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tint[] pBits = new int[1];", "-\t\t\t\t\t\tthis.handle = OS.CreateDIBSection(0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);\t\t\t\t\t\t", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Gdip.PixelFormat16bppGrayScale:", "-\t\t\t\t\tcase Gdip.PixelFormat16bppRGB555:", "-\t\t\t\t\tcase Gdip.PixelFormat16bppRGB565:", "-\t\t\t\t\t\tthis.handle = createDIB(width, height, 16);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase Gdip.PixelFormat24bppRGB:", "-\t\t\t\t\t\tthis.handle = createDIB(width, height, 24);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tthis.handle = createDIB(width, height, 32);", "-\t\t\t\t}", "-\t\t\t\tif (handle != 0) {", "-\t\t\t\t\tint hDC = device.internal_new_GC(null);", "-\t\t\t\t\tint srcHDC = OS.CreateCompatibleDC(hDC);", "-\t\t\t\t\tint oldSrcBitmap = OS.SelectObject(srcHDC, handle);", "-\t\t\t\t\tint graphics = Gdip.Graphics_new(srcHDC);", "-\t\t\t\t\tif (graphics != 0) {", "-\t\t\t\t\t\tif (transparentColor != -1) {", "-\t\t\t\t\t\t\tint color = Gdip.Color_new(transparentColor | 0xFF000000);", "-\t\t\t\t\t\t\tif (color != 0) {", "-\t\t\t\t\t\t\t\tint brush = Gdip.SolidBrush_new(color);", "-\t\t\t\t\t\t\t\tif (brush != 0) {", "-\t\t\t\t\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, 0, 0, width, height);", "-\t\t\t\t\t\t\t\t\tGdip.SolidBrush_delete(brush);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tGdip.Color_delete(color);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tRect rect = new Rect();", "-\t\t\t\t\t\trect.Width = width;", "-\t\t\t\t\t\trect.Height = height;", "-\t\t\t\t\t\tstatus = Gdip.Graphics_DrawImage(graphics, bitmap, rect, 0, 0, width, height, Gdip.UnitPixel, 0, 0, 0);", "-\t\t\t\t\t\tif (status != 0) {", "-\t\t\t\t\t\t\terror = SWT.ERROR_INVALID_IMAGE;", "-\t\t\t\t\t\t\tOS.DeleteObject(handle);", "-\t\t\t\t\t\t\thandle = 0;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tGdip.Graphics_delete(graphics);", "+\t\t\tint status = Gdip.Image_GetLastStatus(bitmap);\t\t\t", "+\t\t\tif (status == 0) {", "+\t\t\t\tif (filename.toLowerCase().endsWith(\".ico\")) {", "+\t\t\t\t\tthis.type = SWT.ICON;", "+\t\t\t\t\tint[] hicon = new int[1];", "+\t\t\t\t\tGdip.Bitmap_GetHICON(bitmap, hicon);", "+\t\t\t\t\tthis.handle = hicon[0];", "+\t\t\t\t} else {", "+\t\t\t\t\tthis.type = SWT.BITMAP;", "+\t\t\t\t\tint width = Gdip.Image_GetWidth(bitmap);", "+\t\t\t\t\tint height = Gdip.Image_GetHeight(bitmap);", "+\t\t\t\t\tint pixelFormat = Gdip.Image_GetPixelFormat(bitmap);", "+\t\t\t\t\tswitch (pixelFormat) {", "+\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB555:", "+\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB565:", "+\t\t\t\t\t\t\tthis.handle = createDIB(width, height, 16);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Gdip.PixelFormat24bppRGB:", "+\t\t\t\t\t\t\tthis.handle = createDIB(width, height, 24);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase Gdip.PixelFormat32bppRGB:", "+\t\t\t\t\t\t// These will loose either precision or transparency", "+\t\t\t\t\t\tcase Gdip.PixelFormat16bppGrayScale:", "+\t\t\t\t\t\tcase Gdip.PixelFormat48bppRGB:", "+\t\t\t\t\t\tcase Gdip.PixelFormat32bppPARGB:", "+\t\t\t\t\t\tcase Gdip.PixelFormat64bppARGB:", "+\t\t\t\t\t\tcase Gdip.PixelFormat64bppPARGB:", "+\t\t\t\t\t\t\tthis.handle = createDIB(width, height, 32);", "+\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\tOS.SelectObject(srcHDC, oldSrcBitmap);", "-\t\t\t\t\tOS.DeleteDC(srcHDC);", "-\t\t\t\t\tdevice.internal_dispose_GC(hDC, null);", "+\t\t\t\t\tif (this.handle != 0) {", "+\t\t\t\t\t\t/* ", "+\t\t\t\t\t\t* This performs better than getting the bits with Bitmap.LockBits(),", "+\t\t\t\t\t\t* but it cannot be used when there is transparency.", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tint hDC = device.internal_new_GC(null);", "+\t\t\t\t\t\tint srcHDC = OS.CreateCompatibleDC(hDC);", "+\t\t\t\t\t\tint oldSrcBitmap = OS.SelectObject(srcHDC, this.handle);", "+\t\t\t\t\t\tint graphics = Gdip.Graphics_new(srcHDC);", "+\t\t\t\t\t\tif (graphics != 0) {", "+\t\t\t\t\t\t\tRect rect = new Rect();", "+\t\t\t\t\t\t\trect.Width = width;", "+\t\t\t\t\t\t\trect.Height = height;", "+\t\t\t\t\t\t\tstatus = Gdip.Graphics_DrawImage(graphics, bitmap, rect, 0, 0, width, height, Gdip.UnitPixel, 0, 0, 0);", "+\t\t\t\t\t\t\tif (status != 0) {", "+\t\t\t\t\t\t\t\terror = SWT.ERROR_INVALID_IMAGE;", "+\t\t\t\t\t\t\t\tOS.DeleteObject(handle);", "+\t\t\t\t\t\t\t\tthis.handle = 0;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tGdip.Graphics_delete(graphics);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.SelectObject(srcHDC, oldSrcBitmap);", "+\t\t\t\t\t\tOS.DeleteDC(srcHDC);", "+\t\t\t\t\t\tdevice.internal_dispose_GC(hDC, null);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint lockedBitmapData = Gdip.BitmapData_new();", "+\t\t\t\t\t\tif (lockedBitmapData != 0) {", "+\t\t\t\t\t\t\tGdip.Bitmap_LockBits(bitmap, 0, 0, pixelFormat, lockedBitmapData);", "+\t\t\t\t\t\t\tBitmapData bitmapData = new BitmapData();", "+\t\t\t\t\t\t\tGdip.MoveMemory(bitmapData, lockedBitmapData, BitmapData.sizeof);", "+\t\t\t\t\t\t\tint stride = bitmapData.Stride;", "+\t\t\t\t\t\t\tint pixels = bitmapData.Scan0;", "+\t\t\t\t\t\t\tint depth = 0, scanlinePad = 4, transparentPixel = -1;", "+\t\t\t\t\t\t\tswitch (bitmapData.PixelFormat) {", "+\t\t\t\t\t\t\t\tcase Gdip.PixelFormat1bppIndexed: depth = 1; break;", "+\t\t\t\t\t\t\t\tcase Gdip.PixelFormat4bppIndexed: depth = 4; break;", "+\t\t\t\t\t\t\t\tcase Gdip.PixelFormat8bppIndexed: depth = 8; break;", "+\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppARGB1555:", "+\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB555:", "+\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB565: depth = 16; break;", "+\t\t\t\t\t\t\t\tcase Gdip.PixelFormat24bppRGB: depth = 24; break;", "+\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppRGB:", "+\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppARGB: depth = 32; break;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (depth != 0) {", "+\t\t\t\t\t\t\t\tPaletteData paletteData = null;", "+\t\t\t\t\t\t\t\tswitch (bitmapData.PixelFormat) {", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat1bppIndexed:", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat4bppIndexed:", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat8bppIndexed:", "+\t\t\t\t\t\t\t\t\t\tint paletteSize = Gdip.Image_GetPaletteSize(bitmap);", "+\t\t\t\t\t\t\t\t\t\tint hHeap = OS.GetProcessHeap();", "+\t\t\t\t\t\t\t\t\t\tint palette = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, paletteSize);", "+\t\t\t\t\t\t\t\t\t\tif (palette == 0) break;", "+\t\t\t\t\t\t\t\t\t\tGdip.Image_GetPalette(bitmap, palette, paletteSize);", "+\t\t\t\t\t\t\t\t\t\tColorPalette colorPalette = new ColorPalette();", "+\t\t\t\t\t\t\t\t\t\tGdip.MoveMemory(colorPalette, palette, ColorPalette.sizeof);", "+\t\t\t\t\t\t\t\t\t\tint[] entries = new int[colorPalette.Count];", "+\t\t\t\t\t\t\t\t\t\tOS.MoveMemory(entries, palette + 8, entries.length * 4);", "+\t\t\t\t\t\t\t\t\t\tOS.HeapFree(hHeap, 0, palette);", "+\t\t\t\t\t\t\t\t\t\tRGB[] rgbs = new RGB[colorPalette.Count];", "+\t\t\t\t\t\t\t\t\t\tpaletteData = new PaletteData(rgbs);", "+\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++) {", "+\t\t\t\t\t\t\t\t\t\t\tif (((entries[i] >> 24) & 0xFF) == 0 && (colorPalette.Flags & Gdip.PaletteFlagsHasAlpha) != 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\ttransparentPixel = i;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\trgbs[i] = new RGB(((entries[i] & 0xFF0000) >> 16), ((entries[i] & 0xFF00) >> 8), ((entries[i] & 0xFF) >> 0));", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppARGB1555:", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB555: paletteData = new PaletteData(0x7C00, 0x3E0, 0x1F); break;", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB565: paletteData = new PaletteData(0xF800, 0x7E0, 0x1F); break;", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat24bppRGB: paletteData = new PaletteData(0xFF, 0xFF00, 0xFF0000); break;", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppRGB:", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppARGB: paletteData = new PaletteData(0xFF00, 0xFF0000, 0xFF000000); break;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbyte[] data = new byte[stride * height], alphaData = null;", "+\t\t\t\t\t\t\t\tOS.MoveMemory(data, pixels, data.length);", "+\t\t\t\t\t\t\t\tswitch (bitmapData.PixelFormat) {", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppARGB1555:", "+\t\t\t\t\t\t \t\t \t\talphaData = new byte[width * height];", "+\t\t\t\t\t\t \t\t \t\tfor (int i = 1, j = 0; i < data.length; i += 2, j++) {", "+\t\t\t\t\t\t \t\t \t\t\talphaData[j] = (byte)((data[i] & 0x80) != 0 ? 255 : 0);", "+\t\t\t\t\t\t \t\t \t\t}", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppARGB:", "+\t\t\t\t\t\t \t\t \t\talphaData = new byte[width * height];", "+\t\t\t\t\t\t \t\t \t\tfor (int i = 3, j = 0; i < data.length; i += 4, j++) {", "+\t\t\t\t\t\t \t\t \t\t\talphaData[j] = data[i];", "+\t\t\t\t\t\t \t\t \t\t}", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t \t\t \t\tGdip.Bitmap_UnlockBits(bitmap, lockedBitmapData);", "+\t\t\t\t\t\t\t\tGdip.BitmapData_delete(lockedBitmapData);", "+\t\t\t\t\t\t\t\tImageData img = new ImageData(width, height, depth, paletteData, scanlinePad, data);", "+\t\t\t\t\t\t\t\timg.transparentPixel = transparentPixel;", "+\t\t\t\t\t\t\t\timg.alphaData = alphaData;", "+\t\t\t\t\t\t\t\tinit(device, img);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\tif (handle == 0) SWT.error(error);", "+\t\t\tif (this.handle == 0) SWT.error(error);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30428024cef1f576d1f09a8fc97107b3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "caa84d2b9df2c3b9eedb5f86a4ec38796c3a6c51", "commitAfterChange": "1a91a0641b6efab2fd52bee03ca0dd6d01f80e4e", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": "  void hookDOMListeners ()", "signatureAfterChange": "  void hookDOMListeners (nsIDOMEventTarget target, boolean isTop)", "diff": ["-", "-void hookDOMListeners () {", "-\tint /*long*/[] result = new int /*long*/[1];", "-\tint rc = webBrowser.GetContentDOMWindow (result);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-", "-\tnsIDOMWindow window = new nsIDOMWindow (result[0]);", "-\tresult[0] = 0;", "-\trc = window.QueryInterface (nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-", "-\tnsIDOMEventTarget target = new nsIDOMEventTarget (result[0]);", "-\tresult[0] = 0;", "-\thookDOMListeners (target, true);", "-\ttarget.Release ();", "-", "-\t/* Listeners must be hooked in pages contained in frames */", "-\trc = window.GetFrames (result);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\tnsIDOMWindowCollection frames = new nsIDOMWindowCollection (result[0]);", "-\tresult[0] = 0;", "-\tint[] frameCount = new int[1];", "-\trc = frames.GetLength (frameCount); /* PRUint32 */", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tint count = frameCount[0];", "-", "-\tif (count > 0) {", "-\t\tfor (int i = 0; i < count; i++) {", "-\t\t\trc = frames.Item (i, result);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-", "-\t\t\tnsIDOMWindow frame = new nsIDOMWindow (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\trc = frame.QueryInterface (nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-", "-\t\t\ttarget = new nsIDOMEventTarget (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\thookDOMListeners (target, false);", "-\t\t\ttarget.Release ();", "-\t\t\tframe.Release ();", "-\t\t}", "-\t}", "-\tframes.Release ();", "-\twindow.Release ();"]}], "num": 43334}
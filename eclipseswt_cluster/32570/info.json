{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ec3fa8bfdef1c37f9db0de706d6e50f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49524735c3c546a413478a29b818dac6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 71, "signatureBeforeChange": " public void setFont (Font value)", "signatureAfterChange": " public void setFont(Font font)", "diff": ["-public void setFont (Font value) {", "-\tcheckWidget();", "-\tFont oldFont = getFont();", "-\tsuper.setFont(value);", "-\tFont font = getFont();", "-\tif (font.equals (oldFont)) return;", "-\t\t", "-\tGC gc = new GC(this);", "-\t", "-\t/* recompute the receiver's cached font height and item height values */", "-\tfontHeight = gc.getFontMetrics().getHeight();", "-\titemHeight = Math.max(fontHeight, imageHeight) + 2 * getCellPadding();", "-\tPoint headerSize = header.getSize();", "-\tint newHeaderHeight = Math.max(fontHeight, headerImageHeight) + 2 * getHeaderPadding();", "-\tif (headerSize.y != newHeaderHeight) {", "-\t\theader.setSize(headerSize.x, newHeaderHeight);", "-\t}", "-\t/* ", "-\t * Notify all columns of the font change so that they can recompute", "-\t * their cached string widths.", "-\t */", "-\tfor (int i = 0; i < columns.length; i++) {", "-\t\tcolumns[i].updateFont(gc);", "-\t/* ", "-\t * Notify all items of the font change so that those items that", "-\t * use the receiver's font can recompute their cached string widths.", "-\t */", "-\tfor (int i = 0; i < items.length; i++) {", "-\t\titems[i].updateFont(gc);", "-\t}", "-\t", "-\tgc.dispose();", "-\t", "-\tif (header.isVisible()) header.redraw();", "-\tredraw();", "-}", "+}", "+public void setFont(Font font) {", "+\tcheckWidget();", "+\tVector children = new Vector();", "+\tEnumeration elements;", "+\tAbstractTreeItem item;", "+", "+\tif (font != null && font.equals(getFont()) == true) {", "+\t\treturn;", "+\t}", "+\tsetRedraw(false);\t\t\t\t\t\t\t\t\t// disable redraw because itemChanged() triggers undesired redraw", "+\tresetItemData();\t", "+\tsuper.setFont(font);", "+", "+\t// Call itemChanged for all tree items", "+\telements = getRoot().getChildren().elements();", "+\twhile (elements.hasMoreElements() == true) {", "+\t\tchildren.addElement(elements.nextElement());", "+\t}", "+\t// traverse the tree depth first\t", "+\tint size;", "+\twhile ((size = children.size()) != 0) {", "+\t\titem = (AbstractTreeItem)children.elementAt(size - 1);", "+\t\tchildren.removeElementAt(size - 1);", "+\t\titemChanged(item, 0, getClientArea().width);", "+\t\telements = item.getChildren().elements();", "+\t\twhile (elements.hasMoreElements() == true) {", "+\t\t\tchildren.addElement(elements.nextElement());", "+\t\t}\t\t\t", "+\t}", "+\tsetRedraw(true);\t\t\t\t\t\t\t\t\t// re-enable redraw", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6203980ace9d2e1232054cd5757d4aa6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 95, "signatureBeforeChange": " public void setFont(Font font)", "signatureAfterChange": " public void setFont (Font value)", "diff": ["-}", "-public void setFont(Font font) {", "-\tcheckWidget();", "-\tint itemCount = getItemCount();", "-", "-\tif (font != null && font.equals(getFont()) == true) {", "-\t\treturn;", "-\t}", "-\tsetRedraw(false);\t\t\t\t\t\t// disable redraw because itemChanged() triggers undesired redraw\t", "-\tresetItemData();\t", "-\tsuper.setFont(font);", "+public void setFont (Font value) {", "+\tcheckWidget ();", "+\tFont oldFont = getFont ();", "+\tsuper.setFont (value);", "+\tFont font = getFont ();", "+\tif (font.equals (oldFont)) return;", "+\t\t", "+\tGC gc = new GC (this);", "-\tGC gc = new GC(this);", "-\tPoint extent = gc.stringExtent(\"String\");", "-\tfontHeight = extent.y;", "-\tgc.dispose();", "+\t/* recompute the receiver's cached font height and item height values */", "+\tfontHeight = gc.getFontMetrics ().getHeight ();", "+\titemHeight = Math.max (fontHeight, imageHeight) + 2 * getCellPadding ();", "+\tPoint headerSize = header.getSize ();", "+\tint newHeaderHeight = Math.max (fontHeight, headerImageHeight) + 2 * getHeaderPadding ();", "+\tif (headerSize.y != newHeaderHeight) {", "+\t\theader.setSize (headerSize.x, newHeaderHeight);", "+\t}", "+\theader.setFont (font);", "+", "+\t/* ", "+\t * Notify all columns and items of the font change so that elements that", "+\t * use the receiver's font can recompute their cached string widths.", "+\t */", "+\tfor (int i = 0; i < columns.length; i++) {", "+\t\tcolumns [i].updateFont (gc);", "+\t}", "+\tfor (int i = 0; i < items.length; i++) {", "+\t\titems [i].updateFont (gc);", "+\t}", "-\tfor (int i = 0; i < itemCount; i++) {", "-\t\tTableItem item = getItem (i);", "-\t\titem.clearTextWidths ();", "-\t\titemChanged (item, 0, getClientArea ().width);", "-\t}", "-\tsetRedraw(true);\t\t\t\t\t\t// re-enable redraw", "-\tgetHeader().setFont(font);", "+\tgc.dispose ();", "+\t", "+\tif (header.isVisible ()) header.redraw ();", "+\t", "+\t/* update scrollbars */", "+\tupdateHorizontalBar ();", "+\tScrollBar vBar = getVerticalBar ();", "+\tint thumb = (getClientArea ().height - getHeaderHeight ()) / itemHeight;", "+\tvBar.setThumb (thumb);", "+\tvBar.setPageIncrement (thumb);", "+\ttopIndex = vBar.getSelection ();", "+\tvBar.setVisible (thumb < vBar.getMaximum ());", "+\tredraw ();"]}], "num": 32570}
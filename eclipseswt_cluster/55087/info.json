{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "907d813a8a631143cd5d24956ed792c8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ec595af49d045485426f882dffade77", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "b796db7a88d068fbce3590cf91dcc3e9c7f9c320", "commitAfterChange": "37c57c08e60a278244a46818f49a47ece9a0e524", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 7, "signatureBeforeChange": " public DropTarget(Control control, int style)", "signatureAfterChange": " public DropTarget(Control control, int style)", "diff": ["- */", "-public DropTarget(Control control, int style) {", "-\tsuper(control, checkStyle(style));", "-\tthis.control = control;", "-//\tif (DragTrackingHandler == null || DragTrackingHandler == null) {", "-//\t\tDND.error(DND.ERROR_CANNOT_INIT_DROP);", "-//\t}", "-//\tif (control.getData(DND.DROP_TARGET_KEY) != null) {", "-//\t\tDND.error(DND.ERROR_CANNOT_INIT_DROP);", "-//\t}", "-\tcontrol.setData(DND.DROP_TARGET_KEY, this);", "-\tcontrolListener = new Listener () {", "-\t\tpublic void handleEvent (Event event) {", "-\t\t\tif (!DropTarget.this.isDisposed()) {", "-\t\t\t\tDropTarget.this.dispose();", "-\t\t\t}", "-\t\t}", "-\t};", "-\tcontrol.addListener (SWT.Dispose, controlListener);", "-\t", "-\tthis.addListener(SWT.Dispose, new Listener() {", "-\t\tpublic void handleEvent (Event event) {", "-\t\t\tonDispose();", "-\t\t}", "-\t});", "-", "-\tObject effect = control.getData(DEFAULT_DROP_TARGET_EFFECT);", "-\tif (effect instanceof DropTargetEffect) {", "-\t\tdropEffect = (DropTargetEffect) effect;", "-\t} else if (control instanceof Table) {", "-\t\tdropEffect = new TableDropTargetEffect((Table) control);", "-\t} else if (control instanceof Tree) {", "-\t\tdropEffect = new TreeDropTargetEffect((Tree) control);", "-\tdragOverHeartbeat = new Runnable() {", "-\t\tpublic void run() {", "-\t\t\tControl control = DropTarget.this.control;", "-\t\t\tif (control == null || control.isDisposed() || dragOverStart == 0) return;", "-\t\t\tlong time = System.currentTimeMillis();", "-\t\t\tint delay = DRAGOVER_HYSTERESIS;", "-\t\t\tif (time < dragOverStart) {", "-\t\t\t\tdelay = (int)(dragOverStart - time);", "-\t\t\t} else {\t", "-\t\t\t\tint allowedOperations = dragOverEvent.operations;", "-\t\t\t\tTransferData[] allowedTypes = dragOverEvent.dataTypes;", "-\t\t\t\t//pass a copy of data types in to listeners in case application modifies it", "-\t\t\t\tTransferData[] dataTypes = new TransferData[allowedTypes.length];", "-\t\t\t\tSystem.arraycopy(allowedTypes, 0, dataTypes, 0, dataTypes.length);", "-\t", "-\t\t\t\tDNDEvent event = new DNDEvent();", "-\t\t\t\tevent.widget = dragOverEvent.widget;", "-\t\t\t\tevent.x = dragOverEvent.x;", "-\t\t\t\tevent.y = dragOverEvent.y;", "-\t\t\t\tevent.time = (int)time;", "-\t\t\t\tevent.feedback = DND.FEEDBACK_SELECT;", "-\t\t\t\tevent.dataTypes = dataTypes;", "-\t\t\t\tevent.dataType = selectedDataType;", "-\t\t\t\tevent.operations = dragOverEvent.operations;", "-\t\t\t\tevent.detail  = selectedOperation;", "-\t\t\t\tif (dropEffect != null) {", "-\t\t\t\t\tevent.item = dropEffect.getItem(event.x, event.y);", "-\t\t\t\t}", "-\t\t\t\tselectedDataType = null;", "-\t\t\t\tselectedOperation = DND.DROP_NONE;\t\t\t\t", "-\t\t\t\tnotifyListeners(DND.DragOver, event);", "-\t\t\t\tif (event.dataType != null) {", "-\t\t\t\t\tfor (int i = 0; i < allowedTypes.length; i++) {", "-\t\t\t\t\t\tif (allowedTypes[i].type == event.dataType.type) {", "-\t\t\t\t\t\t\tselectedDataType = event.dataType;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (selectedDataType != null && (event.detail & allowedOperations) != 0) {", "-\t\t\t\t\tselectedOperation = event.detail;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcontrol = DropTarget.this.control;", "-\t\t\tif (control == null || control.isDisposed()) return;", "-\t\t\tcontrol.getDisplay().timerExec(delay, dragOverHeartbeat);", "-\t\t}", "-\t};", "+ */", "+public DropTarget(Control control, int style) {", "+\tsuper(control, checkStyle(style));", "+\tthis.control = control;", "+", "+\tif (control.getData(DND.DROP_TARGET_KEY) != null) {", "+\t\tDND.error(DND.ERROR_CANNOT_INIT_DROP);", "+\t}", "+", "+\tcontrol.setData(DND.DROP_TARGET_KEY, this);", "+", "+\tcontrolListener = new Listener () {", "+\t\tpublic void handleEvent (Event event) {", "+\t\t\tif (!DropTarget.this.isDisposed()) {", "+\t\t\t\tDropTarget.this.dispose();", "+\t\t\t}", "+\t\t}", "+\t};", "+\tcontrol.addListener (SWT.Dispose, controlListener);", "+\t", "+\tthis.addListener(SWT.Dispose, new Listener() {", "+\t\tpublic void handleEvent (Event event) {", "+\t\t\tonDispose();", "+\t\t}", "+\t});", "+", "+\tObject effect = control.getData(DEFAULT_DROP_TARGET_EFFECT);", "+\tif (effect instanceof DropTargetEffect) {", "+\t\tdropEffect = (DropTargetEffect) effect;", "+\t} else if (control instanceof Table) {", "+\t\tdropEffect = new TableDropTargetEffect((Table) control);", "+\t} else if (control instanceof Tree) {", "+\t\tdropEffect = new TreeDropTargetEffect((Tree) control);", "+\t}", "+", "+\taddDragHandlers();\t", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c411dda43040ae996885caf36c4340df", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "b796db7a88d068fbce3590cf91dcc3e9c7f9c320", "commitAfterChange": "37c57c08e60a278244a46818f49a47ece9a0e524", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t\tpublic void run()", "signatureAfterChange": "  static int dropTargetProc(int id, int sel, int arg0)", "diff": ["-\tdragOverHeartbeat = new Runnable() {", "-\t\tpublic void run() {", "-\t\t\tControl control = DropTarget.this.control;", "-\t\t\tif (control == null || control.isDisposed() || dragOverStart == 0) return;", "-\t\t\tlong time = System.currentTimeMillis();", "-\t\t\tint delay = DRAGOVER_HYSTERESIS;", "-\t\t\tif (time < dragOverStart) {", "-\t\t\t\tdelay = (int)(dragOverStart - time);", "-\t\t\t} else {\t", "-\t\t\t\tint allowedOperations = dragOverEvent.operations;", "-\t\t\t\tTransferData[] allowedTypes = dragOverEvent.dataTypes;", "-\t\t\t\t//pass a copy of data types in to listeners in case application modifies it", "-\t\t\t\tTransferData[] dataTypes = new TransferData[allowedTypes.length];", "-\t\t\t\tSystem.arraycopy(allowedTypes, 0, dataTypes, 0, dataTypes.length);", "-\t", "-\t\t\t\tDNDEvent event = new DNDEvent();", "-\t\t\t\tevent.widget = dragOverEvent.widget;", "-\t\t\t\tevent.x = dragOverEvent.x;", "-\t\t\t\tevent.y = dragOverEvent.y;", "-\t\t\t\tevent.time = (int)time;", "-\t\t\t\tevent.feedback = DND.FEEDBACK_SELECT;", "-\t\t\t\tevent.dataTypes = dataTypes;", "-\t\t\t\tevent.dataType = selectedDataType;", "-\t\t\t\tevent.operations = dragOverEvent.operations;", "-\t\t\t\tevent.detail  = selectedOperation;", "-\t\t\t\tif (dropEffect != null) {", "-\t\t\t\t\tevent.item = dropEffect.getItem(event.x, event.y);", "-\t\t\t\t}", "-\t\t\t\tselectedDataType = null;", "-\t\t\t\tselectedOperation = DND.DROP_NONE;\t\t\t\t", "-\t\t\t\tnotifyListeners(DND.DragOver, event);", "-\t\t\t\tif (event.dataType != null) {", "-\t\t\t\t\tfor (int i = 0; i < allowedTypes.length; i++) {", "-\t\t\t\t\t\tif (allowedTypes[i].type == event.dataType.type) {", "-\t\t\t\t\t\t\tselectedDataType = event.dataType;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (selectedDataType != null && (event.detail & allowedOperations) != 0) {", "-\t\t\t\t\tselectedOperation = event.detail;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcontrol = DropTarget.this.control;", "-\t\t\tif (control == null || control.isDisposed()) return;", "-\t\t\tcontrol.getDisplay().timerExec(delay, dragOverHeartbeat);", "-\t\t}", "+", "+static int /*long*/ dropTargetProc(int /*long*/ id, int /*long*/ sel, int /*long*/ arg0) {", "+\tDisplay display = Display.findDisplay(Thread.currentThread());", "+\tif (display == null || display.isDisposed()) return 0;", "+\tWidget widget = display.findWidget(id);", "+\tif (widget == null) return 0;", "+\tDropTarget dt = (DropTarget)widget.getData(DND.DROP_TARGET_KEY);", "+\tif (dt == null) return 0;", "+\t", "+\t// arg0 is _always_ the sender, and implements NSDraggingInfo.", "+\t// Looks like an NSObject for our purposes, though.", "+\tNSObject sender = new NSObject(arg0);", "+\t", "+\tif (sel == OS.sel_draggingEntered_) {", "+\t\treturn dt.draggingEntered(sender);", "+\t} else if (sel == OS.sel_draggingUpdated_) {", "+\t\treturn dt.draggingUpdated(sender);", "+\t} else if (sel == OS.sel_draggingExited_) {", "+\t\tdt.draggingExited(sender);", "+\t} else if (sel == OS.sel_performDragOperation_) {", "+\t\treturn dt.performDragOperation(sender) ? 1 : 0;", "+\t}", "+\t", "+\treturn 0;", "+}"]}], "num": 55087}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f064863ff26e4728a8c3d02246185e04", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9cb7ce88bb59fe0fcd08d6a7e2a63d5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "92c0429938b5315756c2b79bf85400cb1d8ff0de", "commitAfterChange": "2c3825fcb700a103615c6286323cb92f0a465eb5", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " public boolean setText(String html)", "signatureAfterChange": " public boolean setText(String html)", "diff": ["-\tif (html == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+\t", "+\t/* Convert the String containing HTML to an array of", "+\t * bytes with UTF-8 data.", "+\t */", "+\tbyte[] data = null;", "+\ttry {", "+\t\tdata = html.getBytes(\"UTF-8\"); //$NON-NLS-1$", "+\t} catch (UnsupportedEncodingException e) {", "+\t\treturn false;", "+\t}", "+\t/* render HTML in memory */\t\t", "+\tInputStream inputStream = new InputStream(data);", "+\tinputStream.AddRef();", "+", "-\tint rc = webBrowser.QueryInterface(nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);", "+\tint rc = webBrowser.QueryInterface(nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result);", "-", "-\tnsIWebNavigation webNavigation = new nsIWebNavigation(result[0]);", "-\t/*", "-\t* Note.  Stop any pending request.  This is required to avoid displaying a ", "-\t* blank page as a result of consecutive calls to setUrl and/or setText.", "-\t* The previous request would otherwise render the new html content and ", "-\t* reset the html field before the browser actually navigates to the blank", "-\t* page as requested below.", "-\t*/", "-\trc = webNavigation.Stop(nsIWebNavigation.STOP_ALL);", "+\t", "+\tnsIInterfaceRequestor interfaceRequestor = new nsIInterfaceRequestor(result[0]);", "+\tresult[0] = 0;", "+\trc = interfaceRequestor.GetInterface(nsIDocShell.NS_IDOCSHELL_IID, result);\t\t\t\t", "-\tthis.html = html;", "-\tchar[] arg = \"about:blank\".toCharArray(); //$NON-NLS-1$", "-\tchar[] c = new char[arg.length+1];", "-\tSystem.arraycopy(arg,0,c,0,arg.length);", "-\trc = webNavigation.LoadURI(c, nsIWebNavigation.LOAD_FLAGS_NONE, 0, 0, 0);", "-\twebNavigation.Release();", "-\treturn rc == XPCOM.NS_OK;", "+\tif (result[0] == 0) error(XPCOM.NS_ERROR_NO_INTERFACE);", "+\tinterfaceRequestor.Release();", "+\t", "+\tnsIDocShell docShell = new nsIDocShell(result[0]);", "+\tresult[0] = 0;", "+\t\t", "+\trc = XPCOM.NS_GetServiceManager(result);", "+\tif (rc != XPCOM.NS_OK) error(rc);", "+\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\t", "+\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\tresult[0] = 0;", "+\trc = serviceManager.GetService(XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result);", "+\tif (rc != XPCOM.NS_OK) error(rc);", "+\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "+", "+\tnsIIOService ioService = new nsIIOService(result[0]);", "+\tresult[0] = 0;", "+\t/*", "+\t* Note.  Mozilla ignores LINK tags used to load CSS stylesheets", "+\t* when the URI protocol for the nsInputStreamChannel", "+\t* is about:blank.  The fix is to specify the file protocol.", "+\t*/", "+\tbyte[] aString = \"file:\".getBytes(); //$NON-NLS-1$", "+\tint aSpec = XPCOM.nsEmbedCString_new(aString, aString.length);", "+\trc = ioService.NewURI(aSpec, null, 0, result);", "+\tXPCOM.nsEmbedCString_delete(aSpec);", "+\tif (rc != XPCOM.NS_OK) error(rc);", "+\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\tioService.Release();", "+\t", "+\tnsIURI uri = new nsIURI(result[0]);", "+\tresult[0] = 0;", "+\trc = XPCOM.NS_GetComponentManager(result);", "+\tif (rc != XPCOM.NS_OK) error(rc);", "+\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+", "+\t/* aContentType */", "+\tbyte[] buffer = \"text/plain\".getBytes(); //$NON-NLS-1$", "+\tbyte[] contentTypeBuffer = new byte[buffer.length + 1];", "+\tSystem.arraycopy(buffer, 0, contentTypeBuffer, 0, buffer.length);", "+\tint aContentType = XPCOM.nsEmbedCString_new(contentTypeBuffer, contentTypeBuffer.length);", "+", "+\tbuffer = \"UTF-8\".getBytes(); //$NON-NLS-1$", "+\tbyte[] contentCharsetBuffer = new byte[buffer.length + 1];", "+\tSystem.arraycopy(buffer, 0, contentCharsetBuffer, 0, buffer.length);", "+\tint aContentCharset = XPCOM.nsEmbedCString_new(contentCharsetBuffer, contentCharsetBuffer.length);", "+", "+\t/*", "+\t* Feature in Mozilla. LoadStream invokes the nsIInputStream argument", "+\t* through a different thread.  The callback mechanism must attach ", "+\t* a non java thread to the JVM otherwise the nsIInputStream Read and", "+\t* Close methods never get called.", "+\t*/", "+\trc = docShell.LoadStream(inputStream.getAddress(), uri.getAddress(), aContentType,  aContentCharset, 0);", "+\tif (rc != XPCOM.NS_OK) error(rc);", "+", "+\tXPCOM.nsEmbedCString_delete(aContentCharset);", "+\tXPCOM.nsEmbedCString_delete(aContentType);", "+\turi.Release();", "+\tinputStream.Release();", "+\tdocShell.Release();", "+\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2af5f19bf63ab4650defc160ee843da0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/gtk/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "79e00f2ac248796c568c596a901dfc32bfa767fe", "commitAfterChange": "92c0429938b5315756c2b79bf85400cb1d8ff0de", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " public boolean setText(String html)", "signatureAfterChange": " public boolean setText(String html)", "diff": ["-\tif (html == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+\t", "+\t/* Convert the String containing HTML to an array of", "+\t * bytes with UTF-8 data.", "+\t */", "+\tbyte[] data = null;", "+\ttry {", "+\t\tdata = html.getBytes(\"UTF-8\"); //$NON-NLS-1$", "+\t} catch (UnsupportedEncodingException e) {", "+\t\treturn false;", "+\t}", "+\t/* render HTML in memory */\t\t", "+\tInputStream inputStream = new InputStream(data);", "+\tinputStream.AddRef();", "+", "-\tint rc = webBrowser.QueryInterface(nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);", "+\tint rc = webBrowser.QueryInterface(nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result);", "-", "-\tnsIWebNavigation webNavigation = new nsIWebNavigation(result[0]);", "-\t/*", "-\t* Note.  Stop any pending request.  This is required to avoid displaying a ", "-\t* blank page as a result of consecutive calls to setUrl and/or setText.", "-\t* The previous request would otherwise render the new html content and ", "-\t* reset the html field before the browser actually navigates to the blank", "-\t* page as requested below.", "-\t*/", "-\trc = webNavigation.Stop(nsIWebNavigation.STOP_ALL);", "+\t", "+\tnsIInterfaceRequestor interfaceRequestor = new nsIInterfaceRequestor(result[0]);", "+\tresult[0] = 0;", "+\trc = interfaceRequestor.GetInterface(nsIDocShell.NS_IDOCSHELL_IID, result);\t\t\t\t", "-\tthis.html = html;", "-\tchar[] arg = \"about:blank\".toCharArray(); //$NON-NLS-1$", "-\tchar[] c = new char[arg.length+1];", "-\tSystem.arraycopy(arg,0,c,0,arg.length);", "-\trc = webNavigation.LoadURI(c, nsIWebNavigation.LOAD_FLAGS_NONE, 0, 0, 0);", "-\twebNavigation.Release();", "-\treturn rc == XPCOM.NS_OK;", "+\tif (result[0] == 0) error(XPCOM.NS_ERROR_NO_INTERFACE);", "+\tinterfaceRequestor.Release();", "+\t", "+\tnsIDocShell docShell = new nsIDocShell(result[0]);", "+\tresult[0] = 0;", "+\t\t", "+\trc = XPCOM.NS_GetServiceManager(result);", "+\tif (rc != XPCOM.NS_OK) error(rc);", "+\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\t", "+\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\tresult[0] = 0;", "+\trc = serviceManager.GetService(XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result);", "+\tif (rc != XPCOM.NS_OK) error(rc);", "+\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "+", "+\tnsIIOService ioService = new nsIIOService(result[0]);", "+\tresult[0] = 0;", "+\t/*", "+\t* Note.  Mozilla ignores LINK tags used to load CSS stylesheets", "+\t* when the URI protocol for the nsInputStreamChannel", "+\t* is about:blank.  The fix is to specify the file protocol.", "+\t*/", "+\tbyte[] aString = \"file:\".getBytes(); //$NON-NLS-1$", "+\tint aSpec = XPCOM.nsEmbedCString_new(aString, aString.length);", "+\trc = ioService.NewURI(aSpec, null, 0, result);", "+\tXPCOM.nsEmbedCString_delete(aSpec);", "+\tif (rc != XPCOM.NS_OK) error(rc);", "+\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\tioService.Release();", "+\t", "+\tnsIURI uri = new nsIURI(result[0]);", "+\tresult[0] = 0;", "+\trc = XPCOM.NS_GetComponentManager(result);", "+\tif (rc != XPCOM.NS_OK) error(rc);", "+\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+", "+\t/* aContentType */", "+\tbyte[] buffer = \"text/plain\".getBytes(); //$NON-NLS-1$", "+\tbyte[] contentTypeBuffer = new byte[buffer.length + 1];", "+\tSystem.arraycopy(buffer, 0, contentTypeBuffer, 0, buffer.length);", "+\tint aContentType = XPCOM.nsEmbedCString_new(contentTypeBuffer, contentTypeBuffer.length);", "+", "+\tbuffer = \"UTF-8\".getBytes(); //$NON-NLS-1$", "+\tbyte[] contentCharsetBuffer = new byte[buffer.length + 1];", "+\tSystem.arraycopy(buffer, 0, contentCharsetBuffer, 0, buffer.length);", "+\tint aContentCharset = XPCOM.nsEmbedCString_new(contentCharsetBuffer, contentCharsetBuffer.length);", "+", "+\t/*", "+\t* Feature in Mozilla. LoadStream invokes the nsIInputStream argument", "+\t* through a different thread.  The callback mechanism must attach ", "+\t* a non java thread to the JVM otherwise the nsIInputStream Read and", "+\t* Close methods never get called.", "+\t*/", "+\trc = docShell.LoadStream(inputStream.getAddress(), uri.getAddress(), aContentType,  aContentCharset, 0);", "+\tif (rc != XPCOM.NS_OK) error(rc);", "+", "+\tXPCOM.nsEmbedCString_delete(aContentCharset);", "+\tXPCOM.nsEmbedCString_delete(aContentType);", "+\turi.Release();", "+\tinputStream.Release();", "+\tdocShell.Release();", "+\treturn true;"]}], "num": 56737}
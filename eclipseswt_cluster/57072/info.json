{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4f6207d0f758f95929a8f20df5d3e17", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6fb5e501c2f87cc82a2a9a508fdba96", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "f135b4f0f641a74742450e517c8eea6ca96ed4e2", "commitAfterChange": "45ef21343f042c253c486e154386fddf347c970a", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": "  public boolean execute (String script)", "signatureAfterChange": "  public boolean execute (String script)", "diff": ["-\t\tserviceManager.Release ();", "-\t\t\t\t\t\t\t\trc = XPCOM.JS_EvaluateUCScriptForPrincipals (pathBytes, nativeContext, globalJSObject, principals, scriptChars, length, urlbytes, 0, result);", "-\t\t\t\t\t\t\t\treturn rc != 0;", "+", "+\t\t\t\t\t\t\t\taContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_CONTEXTSTACK_CONTRACTID, true);", "+\t\t\t\t\t\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIJSContextStack.NS_IJSCONTEXTSTACK_IID, result);", "+\t\t\t\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\t\t\t\t\t\t\tserviceManager.Release ();", "+", "+\t\t\t\t\t\t\t\tnsIJSContextStack stack = new nsIJSContextStack (result[0]);", "+\t\t\t\t\t\t\t\tresult[0] = 0;", "+\t\t\t\t\t\t\t\trc = stack.Push (nativeContext);", "+\t\t\t\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\t\t\t\tboolean success = XPCOM.JS_EvaluateUCScriptForPrincipals (pathBytes, nativeContext, globalJSObject, principals, scriptChars, length, urlbytes, 0, result) != 0;", "+\t\t\t\t\t\t\t\tresult[0] = 0;", "+\t\t\t\t\t\t\t\trc = stack.Pop (result);", "+\t\t\t\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\t\t\t\tstack.Release ();", "+", "+\t\t\t\t\t\t\t\treturn success;", "+\t\tserviceManager.Release ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "277d3cccfae09020d70a8e5a3c088d2d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "3b62eb433496cf86ac0c221960e3863bba8fba1c", "commitAfterChange": "c490cd80117327668a27bfc2cf331153b9c9d950", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 140, "signatureBeforeChange": "  int IsPreferred (int aContentType, int aDesiredContentType, int retval)", "signatureAfterChange": "  int IsPreferred (int aContentType, int aDesiredContentType, int retval)", "diff": ["-\t\tbyte[] typeBytes = new byte[size + 1];", "+\t\tbyte[] typeBytes = new byte[size];", "-\t\t\trc = serviceManager.GetService (XPCOM.NS_CATEGORYMANAGER_CID, nsICategoryManager.NS_ICATEGORYMANAGER_IID, result);", "-\t\t\tserviceManager.Release ();", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\t\tnsICategoryManager categoryManager = new nsICategoryManager (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tbyte[] categoryBytes = MozillaDelegate.wcsToMbcs (null, \"Gecko-Content-Viewers\", true);\t//$NON-NLS-1$", "-\t\t\trc = categoryManager.GetCategoryEntry (categoryBytes, typeBytes, result);", "-\t\t\tcategoryManager.Release ();", "-\t\t\t/* if no viewer for the content type is registered then rc == XPCOM.NS_ERROR_NOT_AVAILABLE */", "-\t\t\tpreferred = rc == XPCOM.NS_OK;", "+\t\t\t/* First try to use the nsIWebNavigationInfo if it's available (>= mozilla 1.8) */", "+\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_WEBNAVIGATIONINFO_CONTRACTID, true);", "+\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIWebNavigationInfo.NS_IWEBNAVIGATIONINFO_IID, result);", "+\t\t\tif (rc == 0) {", "+\t\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, contentType, true);", "+\t\t\t\tint /*long*/ typePtr = XPCOM.nsEmbedCString_new (bytes, bytes.length);", "+\t\t\t\tnsIWebNavigationInfo info = new nsIWebNavigationInfo (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\trc = info.IsTypeSupported (typePtr, 0, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tinfo.Release ();", "+\t\t\t\tXPCOM.nsEmbedCString_delete (typePtr);", "+\t\t\t\tpreferred = result[0] != 0;", "+\t\t\t} else {", "+\t\t\t\t/* nsIWebNavigationInfo is not available, so do the type lookup */", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\trc = serviceManager.GetService (XPCOM.NS_CATEGORYMANAGER_CID, nsICategoryManager.NS_ICATEGORYMANAGER_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\t\t\t\tnsICategoryManager categoryManager = new nsICategoryManager (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tbyte[] categoryBytes = MozillaDelegate.wcsToMbcs (null, \"Gecko-Content-Viewers\", true);\t//$NON-NLS-1$", "+\t\t\t\trc = categoryManager.GetCategoryEntry (categoryBytes, typeBytes, result);", "+\t\t\t\tcategoryManager.Release ();", "+\t\t\t\t/* if no viewer for the content type is registered then rc == XPCOM.NS_ERROR_NOT_AVAILABLE */", "+\t\t\t\tpreferred = rc == XPCOM.NS_OK;", "+\t\t\t}", "+\t\t\tserviceManager.Release ();"]}], "num": 57072}
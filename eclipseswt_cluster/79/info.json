{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da0520d20aab36e711534fb5bcb9b2b4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7233e6f6f2be5ba29c5a1884c4243ba7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "6b31c0eed18de0d04a1940c687302d2c80ed3928", "commitAfterChange": "35d4101635c3eba5225d3cfcce67f526f793f806", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public Image(Device device, ImageData source, ImageData mask)", "signatureAfterChange": " public Image(Device device, ImageData source, ImageData mask)", "diff": ["+\t\t// convertMask seems to assumes the palette of the is indexed, or that a black pixel also has an alpha component of 0.", "+\t\t// So, we need to clear the alpha out of the mask data.", "+\t\tint maskSize = mask.data.length;", "+\t\tfor (int i = 0; i < maskSize; i += 4)", "+\t\t\tmask.data[i] = 0;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20df7a672309561bf0c0fda0b6f498af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Image.java", "commitBeforeChange": "5f7f702707f302b75507f5daec7d9dd49e3a4042", "commitAfterChange": "cb24623ebaa03ea200027efdd5c87647a2d2d515", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLjava_io_InputStream()", "signatureAfterChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLjava_io_InputStream()", "diff": ["-\t\t\t\t\tassertEquals(\"Incorrect exception thrown for invalid image InputStream\", SWT.ERROR_INVALID_IMAGE, e);", "+//\t\t\t\t\tTODO: test if correct exception is thrown. See bug 70167\t\t\t\t\t", "+//\t\t\t\t\tassertEquals(\"Incorrect exception thrown for invalid image InputStream\", SWT.ERROR_INVALID_IMAGE, e);", "-\t\tfileName = SwtTestCase.imageFilenames[0];", "-\t\t\tfor (int i=0; i<numFormats; i++) {", "-\t\t\t\tString format = SwtTestCase.imageFormats[i];", "-\t\t\t\tstream = SwtTestCase.class.getResourceAsStream(fileName + \".\" + format);", "-\t\t\t\timage = new Image(tempDisplay, stream);", "-\t\t\t\timage.dispose();", "-\t\t\t\ttry {", "-\t\t\t\t\tstream.close();", "-\t\t\t\t} catch (IOException e) {}", "+\t\t\tint numFileNames = SwtTestCase.imageFilenames.length;", "+\t\t\tfor (int k=0; k<numFileNames; k++) {", "+\t\t\t\tfileName = SwtTestCase.imageFilenames[k];\t\t", "+\t\t\t\tfor (int i=0; i<numFormats; i++) {", "+\t\t\t\t\tString format = SwtTestCase.imageFormats[i];", "+\t\t\t\t\tstream = SwtTestCase.class.getResourceAsStream(fileName + \".\" + format);", "+\t\t\t\t\timage = new Image(tempDisplay, stream);", "+\t\t\t\t\timage.dispose();", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tstream.close();", "+\t\t\t\t\t} catch (IOException e) {}", "+\t\t\t\t}"]}], "num": 79}
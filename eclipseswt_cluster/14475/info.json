{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3673798f98d051b61be613e4221ed2a5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "141e44694d6e2b7af77865ff9c856543", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "f9c32536bfb6b84d391acb7e318ee62e8e1d61a5", "commitAfterChange": "e68f4b04e4aa20115a97f7fad53d6f3eb1475feb", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "  int gtk_motion_notify_event (int widget, int event)", "signatureAfterChange": "  int gtk_motion_notify_event (int widget, int event)", "diff": ["-\t\t\t\tint width = OS.GTK_WIDGET_WIDTH (shellHandle);", "-\t\t\t\tint height = OS.GTK_WIDGET_HEIGHT (shellHandle);", "-\t\t\t\tint trim = border + border;", "-\t\t\t\tint [] x_pos = new int [1], y_pos = new int [1];", "-\t\t\t\tOS.gtk_window_get_position (shellHandle, x_pos, y_pos);", "-\t\t\t\tint x = x_pos [0], y = y_pos [0];", "-\t\t\t\tswitch (resizeMode) {", "+\t\t\t\tint dx = (int)(gdkEvent.x_root - display.resizeLocationX);", "+\t\t\t\tint dy = (int)(gdkEvent.y_root - display.resizeLocationY);", "+\t\t\t\tint x = display.resizeBoundsX;", "+\t\t\t\tint y = display.resizeBoundsY;", "+\t\t\t\tint width = display.resizeBoundsWidth;", "+\t\t\t\tint height = display.resizeBoundsHeight;", "+\t\t\t\tint newWidth = Math.max(width - dx, Math.max(minWidth, border + border));", "+\t\t\t\tint newHeight = Math.max(height - dy, Math.max(minHeight, border + border));", "+\t\t\t\tswitch (display.resizeMode) {", "-\t\t\t\t\t\tx = (int)gdkEvent.x_root;", "-\t\t\t\t\t\twidth -= (int)gdkEvent.x;", "-\t\t\t\t\t\tx = Math.min (x, x + width - trim);", "-\t\t\t\t\t\twidth = Math.max (trim, Math.max (minWidth, width));", "+\t\t\t\t\t\tx += width - newWidth;", "+\t\t\t\t\t\twidth = newWidth;", "-\t\t\t\t\t\tx = (int)gdkEvent.x_root;", "-\t\t\t\t\t\twidth -= (int)gdkEvent.x;", "-\t\t\t\t\t\ty = (int)gdkEvent.y_root;", "-\t\t\t\t\t\theight -= (int)gdkEvent.y;", "-\t\t\t\t\t\tx = Math.min (x, x + width - trim);", "-\t\t\t\t\t\twidth = Math.max (trim, Math.max (minWidth, width));", "-\t\t\t\t\t\ty = Math.min (y, y + height - trim);", "-\t\t\t\t\t\theight = Math.max (trim, Math.max (minHeight, height));", "+\t\t\t\t\t\tx += width - newWidth;", "+\t\t\t\t\t\twidth = newWidth;", "+\t\t\t\t\t\ty += height - newHeight;", "+\t\t\t\t\t\theight = newHeight;", "-\t\t\t\t\t\ty = (int)gdkEvent.y_root;", "-\t\t\t\t\t\theight -= (int)gdkEvent.y;", "-\t\t\t\t\t\ty = Math.min (y, y + height - trim);", "-\t\t\t\t\t\theight = Math.max (trim, Math.max (minHeight, height));", "+\t\t\t\t\t\ty += height - newHeight;", "+\t\t\t\t\t\theight = newHeight;", "-\t\t\t\t\t\ty = (int)gdkEvent.y_root;", "-\t\t\t\t\t\theight -= (int)gdkEvent.y;", "-\t\t\t\t\t\twidth = (int)gdkEvent.x;", "-\t\t\t\t\t\ty = Math.min (y, y + height - trim);", "-\t\t\t\t\t\theight = Math.max (trim, Math.max (minHeight, height));", "-\t\t\t\t\t\twidth = Math.max (trim, Math.max (minWidth, width));", "+\t\t\t\t\t\twidth = Math.max(width + dx, Math.max(minWidth, border + border));", "+\t\t\t\t\t\ty += height - newHeight;", "+\t\t\t\t\t\theight = newHeight;", "-\t\t\t\t\t\twidth = (int)gdkEvent.x;", "-\t\t\t\t\t\twidth = Math.max (trim, Math.max (minWidth, width));", "+\t\t\t\t\t\twidth = Math.max(width + dx, Math.max(minWidth, border + border));", "-\t\t\t\t\t\twidth = (int)gdkEvent.x;", "-\t\t\t\t\t\theight = (int)gdkEvent.y;", "-\t\t\t\t\t\twidth = Math.max (trim, Math.max (minWidth, width));", "-\t\t\t\t\t\theight = Math.max (trim, Math.max (minHeight, height));", "+\t\t\t\t\t\twidth = Math.max(width + dx, Math.max(minWidth, border + border));", "+\t\t\t\t\t\theight = Math.max(height + dy, Math.max(minHeight, border + border));", "-\t\t\t\t\t\theight = (int)gdkEvent.y;", "-\t\t\t\t\t\theight = Math.max (trim, Math.max (minHeight, height));", "+\t\t\t\t\t\theight = Math.max(height + dy, Math.max(minHeight, border + border));", "-\t\t\t\t\t\tx = (int)gdkEvent.x_root;", "-\t\t\t\t\t\twidth -= (int)gdkEvent.x;", "-\t\t\t\t\t\theight = (int)gdkEvent.y;", "-\t\t\t\t\t\tx = Math.min (x, x + width - trim);", "-\t\t\t\t\t\twidth = Math.max (trim, Math.max (minWidth, width));", "-\t\t\t\t\t\theight = Math.max (trim, Math.max (minHeight, height));", "+\t\t\t\t\t\tx += width - newWidth;", "+\t\t\t\t\t\twidth = newWidth;", "+\t\t\t\t\t\theight = Math.max(height + dy, Math.max(minHeight, border + border));", "-\t\t\t\tif (x != x_pos [0] || y != y_pos [0]) {", "+\t\t\t\tif (x != display.resizeBoundsX || y != display.resizeBoundsY) {", "-\t\t\t\tif (mode != resizeMode) {", "+\t\t\t\tif (mode != display.resizeMode) {", "-\t\t\t\t\tresizeMode = mode;", "+\t\t\t\t\tdisplay.resizeMode = mode;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baf9ea6a690ff0a8a13b300bc8ab0145", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "907c4dd47a285571bf0d66e34d1a9323e15dd90b", "commitAfterChange": "e4b1a868ce731255239223c8ff6f43351c81a864", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 83, "signatureBeforeChange": " boolean setItemSize()", "signatureAfterChange": " boolean setItemSize()", "diff": ["-\tif (size.x <= 0 || size.y <= 0 || items.length == 0) return false;", "-\tint style = getStyle();", "-\tboolean highlight = borderLeft > 0 && (style & SWT.FLAT) == 0;", "-\tboolean changed = false;", "-\txClient = borderLeft + marginWidth;", "-\tif (highlight) xClient += HIGHLIGHT_MARGIN;", "-\tif (onBottom) {", "-\t\tyClient = borderTop + marginHeight; ", "-\t\tif (highlight) yClient += HIGHLIGHT_MARGIN;", "-\t} else {", "-\t\tyClient = borderTop + tabHeight + HIGHLIGHT_HEADER + marginHeight; ", "-\t}", "-\t", "-\tint[] widths = new int[items.length];", "-\tGC gc = new GC(this);", "-\tfor (int i = 0; i < items.length; i++) {", "-\t\twidths[i] = items[i].preferredWidth(gc, i == selectedIndex);", "-\t}", "-\tgc.dispose();", "-\tif (items.length > 1) {", "-\t\tint selectedWidth = selectedIndex == -1 ? 0 : widths[selectedIndex];", "-\t\tint count = selectedIndex == -1 ? items.length : items.length - 1;", "-\t\tint averageWidth = (tabAreaWidth - selectedWidth) / count;", "-\t\tint oldAverageWidth = 0;", "-\t\twhile (averageWidth > oldAverageWidth) {", "-\t\t\tint width = tabAreaWidth - selectedWidth;", "-\t\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\t\tif (i == selectedIndex) continue;", "-\t\t\t\tif (widths[i] < averageWidth) {", "-\t\t\t\t\twidth -= widths[i];", "-\t\t\t\t\tcount--;", "+\tint[] widths = new int[items.length];", "+\tCTabFolderEvent e = new CTabFolderEvent(this);", "+\te.widget = this;", "+\te.time = (int)System.currentTimeMillis();", "+\te.doit = true;", "+\tfor (int i = 0; i < items.length; i++) {", "+\t\te.x = e.y = e.width = e.height = 0;", "+\t\te.item = items[i];", "+\t\tfor (int j = 0; j < folderListeners.length; j++) {", "+\t\t\tfolderListeners[j].getTabSize(e);", "+\t\t}", "+\t\twidths[i] = e.width;", "+\t}", "+\tif (e.doit) {", "+\t\twidths = new int[items.length];", "+\t\tif (size.x <= 0 || size.y <= 0 || items.length == 0) return false;", "+\t\tint style = getStyle();", "+\t\tboolean highlight = borderLeft > 0 && (style & SWT.FLAT) == 0;", "+\t\txClient = borderLeft + marginWidth;", "+\t\tif (highlight) xClient += HIGHLIGHT_MARGIN;", "+\t\tif (onBottom) {", "+\t\t\tyClient = borderTop + marginHeight; ", "+\t\t\tif (highlight) yClient += HIGHLIGHT_MARGIN;", "+\t\t} else {", "+\t\t\tyClient = borderTop + tabHeight + HIGHLIGHT_HEADER + marginHeight; ", "+\t\t}", "+\t\t", "+\t\tGC gc = new GC(this);", "+\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\twidths[i] = items[i].preferredWidth(gc, i == selectedIndex);", "+\t\t}", "+\t\tgc.dispose();", "+\t\tif (items.length > 1) {", "+\t\t\tint selectedWidth = selectedIndex == -1 ? 0 : widths[selectedIndex];", "+\t\t\tint count = selectedIndex == -1 ? items.length : items.length - 1;", "+\t\t\tint averageWidth = (tabAreaWidth - selectedWidth) / count;", "+\t\t\tint oldAverageWidth = 0;", "+\t\t\twhile (averageWidth > oldAverageWidth) {", "+\t\t\t\tint width = tabAreaWidth - selectedWidth;", "+\t\t\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\t\t\tif (i == selectedIndex) continue;", "+\t\t\t\t\tif (widths[i] < averageWidth) {", "+\t\t\t\t\t\twidth -= widths[i];", "+\t\t\t\t\t\tcount--;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\toldAverageWidth = averageWidth;", "+\t\t\t\tif (count > 0) {", "+\t\t\t\t\taverageWidth = width / count;", "-\t\t\toldAverageWidth = averageWidth;", "-\t\t\tif (count > 0) {", "-\t\t\t\taverageWidth = width / count;", "-\t\t\t}", "-\t\t}", "-\t\taverageWidth = Math.max(averageWidth, MIN_TAB_WIDTH * tabHeight);", "-\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\tif (i == selectedIndex) continue;", "-\t\t\tif (widths[i] > averageWidth) {", "-\t\t\t\twidths[i] = averageWidth;", "+\t\t\taverageWidth = Math.max(averageWidth, MIN_TAB_WIDTH * tabHeight);", "+\t\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\t\tif (i == selectedIndex) continue;", "+\t\t\t\tif (widths[i] > averageWidth) {", "+\t\t\t\t\twidths[i] = averageWidth;", "+\t\t\t\t}", "+\tboolean changed = false;"]}], "num": 14475}
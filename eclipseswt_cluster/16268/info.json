{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57bfdbca4723a1b59a1ce2716d443d5f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51f936deee5731b7df33356fa2b0dc3a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public FontData [] getFontList (String faceName, boolean scalable)", "signatureAfterChange": " public FontData[] getFontList (String faceName, boolean scalable)", "diff": ["-public FontData [] getFontList (String faceName, boolean scalable) {\t", "+public FontData[] getFontList (String faceName, boolean scalable) {\t", "-\t/* AW", "-\tString xlfd;", "-\tif (faceName == null) {", "-\t\txlfd = \"-*-*-*-*-*-*-*-*-*-*-*-*-*-*\";", "-\t} else {", "-\t\tint dashIndex = faceName.indexOf('-');", "-\t\tif (dashIndex < 0) {", "-\t\t\txlfd = \"-*-\" + faceName + \"-*-*-*-*-*-*-*-*-*-*-*-*\";", "-\t\t} else {", "-\t\t\txlfd = \"-\" + faceName + \"-*-*-*-*-*-*-*-*-*-*-*-*\";", "+\t//NOT DONE - scalable", "+\tint nFds = 0;", "+\tFontData[] fds = new FontData[4];", "+", "+\tint[] font = new int[1];", "+\tshort[] fontFamily = new short[1];", "+\tshort[] style = new short[1];", "+\tshort[] size = new short[1];", "+\tbyte[] buffer = new byte[256];", "+\tint familyIter = OS.NewPtr(16 * 4);", "+\tint fontIter = OS.NewPtr(16 * 4);", "+\tOS.FMCreateFontFamilyIterator(0, 0, 0, familyIter);", "+\twhile (OS.FMGetNextFontFamily(familyIter, fontFamily) != OS.kFMIterationCompleted) {", "+\t\tOS.FMGetFontFamilyName(fontFamily[0], buffer);", "+\t\tint length = buffer[0] & 0xFF;", "+\t\tchar[] chars = new char[length];", "+\t\tfor (int i=0; i<length; i++) {", "+\t\t\tchars[i]= (char)buffer[i+1];", "+\t\t}", "+\t\tString name = new String(chars);", "+\t\tif (faceName == null || Compatibility.equalsIgnoreCase(faceName, name)) {", "+\t\t\tOS.FMCreateFontFamilyInstanceIterator(fontFamily[0], fontIter);", "+\t\t\twhile (OS.FMGetNextFontFamilyInstance(fontIter, font, style, size) != OS.kFMIterationCompleted) {", "+\t\t\t\tint s = SWT.NORMAL;", "+\t\t\t\tif ((style[0] & OS.italic) != 0) s |= SWT.ITALIC;", "+\t\t\t\tif ((style[0] & OS.bold) != 0) s |= SWT.BOLD;", "+\t\t\t\tFontData data = new FontData(name, s, size[0]);", "+\t\t\t\tif (nFds == fds.length) {", "+\t\t\t\t\tFontData[] newFds = new FontData[fds.length + 4];", "+\t\t\t\t\tSystem.arraycopy(fds, 0, newFds, 0, nFds);", "+\t\t\t\t\tfds = newFds;", "+\t\t\t\t}", "+\t\t\t\tfds[nFds++] = data;", "+\t\t\t}", "+\t\t\tOS.FMDisposeFontFamilyInstanceIterator(fontIter);", "-\t*/", "-\t/* Use the character encoding for the default locale */", "-\t/* AW", "-\tbyte [] buffer1 = Converter.wcsToMbcs (null, xlfd, true);", "-\tint [] ret = new int [1];", "-\tint listPtr = OS.XListFonts (xDisplay, buffer1, 65535, ret);", "-\tint ptr = listPtr;", "-\tint [] intBuf = new int [1];", "-\tFontData [] fd = new FontData [ret [0]];", "-\tint fdIndex = 0;", "-\tfor (int i = 0; i < ret [0]; i++) {", "-\t\tOS.memmove (intBuf, ptr, 4);", "-\t\tint charPtr = intBuf [0];", "-\t\tint length = OS.strlen (charPtr);", "-\t\tbyte [] buffer2 = new byte [length];", "-\t\tOS.memmove (buffer2, charPtr, length);", "-\t\t// Use the character encoding for the default locale", "-\t\tchar [] chars = Converter.mbcsToWcs (null, buffer2);", "-\t\tFontData data = FontData.motif_new (new String (chars));", "-\t\tboolean isScalable = data.averageWidth == 0 && data.pixels == 0 && data.points == 0;", "-\t\tif (isScalable == scalable) {", "-\t\t\tfd [fdIndex++] = data;", "-\t\t}", "-\t\tptr += 4;", "-\t}", "-\tOS.XFreeFontNames (listPtr);", "-\tif (fdIndex == ret [0]) return fd;", "-\tFontData [] result = new FontData [fdIndex];", "-\tSystem.arraycopy (fd, 0, result, 0, fdIndex);", "+\tOS.FMDisposeFontFamilyIterator(familyIter);", "+\tOS.DisposePtr(familyIter);", "+\tOS.DisposePtr(fontIter);", "+\t", "+\tif (nFds == fds.length) return fds;", "+\tFontData[] result = new FontData[nFds];", "+\tSystem.arraycopy(fds, 0, result, 0, nFds);", "-\t*/", "-\treturn new FontData [0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e1378c510cfb6fe7d59ac21b5927be2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "c738133a2fdbe3d60fd9dfabbfd9e737153e1aa5", "commitAfterChange": "c9992cb98fd2a837c866ff6f32642b9e42588c7e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public FontData[] getFontList (String faceName, boolean scalable)", "signatureAfterChange": " public FontData[] getFontList (String faceName, boolean scalable)", "diff": ["-\t", "-\t/* Temporary code.", "-\t * For now, we know that on Pango at least three font families are guaranteed", "-\t * to be present: Sans, Serif, and Monspace.", "-\t */", "-\tif (scalable) return getScalableFontList(faceName);", "-\treturn getNonScalableFontList(faceName);", "-}", "+", "+\t//FIXME - check scalable flag", "+\tint[] family = new int[1];", "+\tint[] face = new int[1];", "+\tint[] families = new int[1];", "+\tint[] n_families = new int[1];", "+\tint[] faces = new int[1];", "+\tint[] n_faces = new int[1];", "+\tint context = OS.gdk_pango_context_get();", "+\tOS.pango_context_list_families(context, families, n_families);", "+\tint nFds = 0;", "+\tFontData[] fds = new FontData[faceName != null ? 4 : n_families[0]];", "+\tfor (int i=0; i<n_families[0]; i++) {", "+\t\tOS.memmove(family, families[0] + i * 4, 4);", "+\t\tOS.pango_font_family_list_faces(family[0], faces, n_faces);", "+\t\tfor (int j=0; j<n_faces[0]; j++) {", "+\t\t\tOS.memmove(face, faces[0] + j * 4, 4);", "+\t\t\tint fontDesc = OS.pango_font_face_describe(face[0]);", "+\t\t\tFont font = Font.gtk_new(this, fontDesc);", "+\t\t\tFontData data = font.getFontData()[0];", "+\t\t\tif (faceName == null || Compatibility.equalsIgnoreCase(faceName, data.name)) {", "+\t\t\t\tif (nFds == fds.length) {", "+\t\t\t\t\tFontData[] newFds = new FontData[fds.length + n_families[0]];", "+\t\t\t\t\tSystem.arraycopy(fds, 0, newFds, 0, nFds);", "+\t\t\t\t\tfds = newFds;", "+\t\t\t\t}", "+\t\t\t\tfds[nFds++] = data;", "+\t\t\t}", "+\t\t\tOS.pango_font_description_free(fontDesc);", "+\t\t}", "+\t\tOS.g_free(faces[0]);", "+\t}", "+\tOS.g_free(families[0]);", "+\tOS.g_object_unref(context);", "+", "+\tif (nFds == fds.length) return fds;", "+\tFontData[] result = new FontData[nFds];", "+\tSystem.arraycopy(fds, 0, result, 0, nFds);", "+\treturn result;"]}], "num": 16268}
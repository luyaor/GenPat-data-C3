{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e22b34f1ec790e564213da243927d37", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4526638d55c1227ca165a0412fb1d142", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "78a8f740f3c6b657a393a18384703a04727c8884", "commitAfterChange": "9ff9d9222d7fdb61c93507f2b2ab53ff9e4332fb", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create(Composite parent, int style)", "signatureAfterChange": "  public void create(Composite parent, int style)", "diff": ["-\t\t\t\t/*", "-\t\t\t\t* Tabbing out of the browser can fail as a result of the WebSite", "-\t\t\t\t* control embedded within the Browser.  The workaround is to", "-\t\t\t\t* listen for traversals and re-perform the traversal on the", "-\t\t\t\t* appropriate control.", "-\t\t\t\t*/", "+\t\t\t\t\t/*", "+\t\t\t\t\t * Tabbing out of the browser can fail as a result of the WebSite", "+\t\t\t\t\t * control embedded within the Browser.  The workaround is to", "+\t\t\t\t\t * listen for traversals and re-perform the traversal on the", "+\t\t\t\t\t * appropriate control.", "+\t\t\t\t\t */", "+\t\t\t\t\t/*", "+\t\t\t\t\t * Return traversals can sometimes come through TranslateAccelerator,", "+\t\t\t\t\t * depending on where focus is within the Browser.  Traversal", "+\t\t\t\t\t * events should always be triggered by a key event from the DOM,", "+\t\t\t\t\t * so if a Traversal from TranslateAccelerator is detected", "+\t\t\t\t\t * (e.doit == true) then stop its propagation.", "+\t\t\t\t\t */", "+\t\t\t\t\tif (e.detail == SWT.TRAVERSE_RETURN && e.doit && e.widget instanceof Browser) {", "+\t\t\t\t\t\te.type = SWT.None;", "+\t\t\t\t\t\te.doit = false;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f52c6ce4fe63ec06c52db87de8d517d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "5ec019025250a666d7ee69d99aa3d3c4e05e7317", "commitAfterChange": "d758ff603766d7abc7a9cca73d1b2fe834948150", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  int commandProc (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int commandProc (int nextHandler, int theEvent, int userData)", "diff": ["-\t\t\t\t\t\tint [] outCommandID = new int [1];", "-\t\t\t\t\t\tshort menuIndex = command.menu_menuItemIndex;", "-\t\t\t\t\t\tOS.GetMenuItemCommandID (menuRef, menuIndex, outCommandID);", "-\t\t\t\t\t\tMenuItem item = findMenuItem (outCommandID [0]);", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t* Feature in the Macintosh.  When a menu item is selected by the", "+\t\t\t\t\t\t* user, the Macintosh sends kEventMenuOpening, remembers the index", "+\t\t\t\t\t\t* of the item the user selected, sends kEventMenuClosed and then", "+\t\t\t\t\t\t* sends kEventProcessCommand.  If application code modifies the menu", "+\t\t\t\t\t\t* inside of kEventMenuClosed by adding or removing items, the index", "+\t\t\t\t\t\t* of the item that the user selected is invalid.  The fix is to detect", "+\t\t\t\t\t\t* that a menu has been modified during kEventMenuClosed and use the", "+\t\t\t\t\t\t* last target item remembered kEventMenuTargetItem.", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tMenuItem item = null;", "+\t\t\t\t\t\tif (menu.closed && menu.modified) {", "+\t\t\t\t\t\t\titem = menu.lastTarget;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\titem = findMenuItem (command.commandID);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t} ", "+\t\t\t\t\t\t}"]}], "num": 24535}
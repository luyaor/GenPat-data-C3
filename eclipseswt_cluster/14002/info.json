{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "751dc2c1468e653b49dc9b334d84a468", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5328b2d3a79b3e45f168882347edc596", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void setContents(Object[] data, Transfer[] dataTypes)", "signatureAfterChange": "  public void setContents(Object[] data, Transfer[] dataTypes)", "diff": ["- */", "+", "-\t", "-\tif (data == null) {", "+\tif (display == null) DND.error(SWT.ERROR_WIDGET_DISPOSED);", "+\tif (display.isDisposed()) DND.error(SWT.ERROR_DEVICE_DISPOSED);", "+\tif (data == null || dataTypes == null || data.length != dataTypes.length) {", "-\tif (dataTypes == null || data.length != dataTypes.length) {", "-\t\tDND.error(SWT.ERROR_INVALID_ARGUMENT);", "-\t}", "-\t", "-\tif (display.isDisposed())", "-\t\tDND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);", "-\tint[] scrapHandle= new int[1];", "+\tint[] scrapHandle = new int[1];", "-\tint scrap= scrapHandle[0];", "-\t\t", "-\tint status= 1;", "-\t", "+\tint scrap = scrapHandle[0];", "-\t\tint[] ids= dataTypes[i].getTypeIds();", "+\t\tint[] ids = dataTypes[i].getTypeIds();", "-\t\t\tTransferData transferData= new TransferData();", "-\t\t\t/* Use the character encoding for the default locale */", "-\t\t\ttransferData.type= ids[j];", "+\t\t\tTransferData transferData = new TransferData();", "+\t\t\ttransferData.type = ids[j];", "-\t\t\tif (transferData.result == 1) {", "-\t\t\t\t/*", "-\t\t\t\tif (transferData.format == 8) {", "-\t\t\t\t\tbyte[] buffer = new byte[transferData.length];", "-\t\t\t\t\tOS.memmove(buffer, transferData.pValue, transferData.length);", "-\t\t\t\t\tbyte[] bName = Converter.wcsToMbcs(null, names[j], true);", "-\t\t\t\t\tstatus = OS.XmClipboardCopy(xDisplay, xWindow, item_id[0], bName, buffer, transferData.length, 0, null);", "-\t\t\t\t}", "-\t\t\t\t*/", "-\t\t\t\tstatus= OS.PutScrapFlavor(scrap, transferData.type, 0, transferData.data);", "+\t\t\tif (transferData.result != OS.noErr)", "+\t\t\t\tDND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);", "+\t\t\tif (OS.PutScrapFlavor(scrap, transferData.type, 0, transferData.data.length, transferData.data) != OS.noErr){", "+\t\t\t\tDND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);", "-\t", "-\tif (status != OS.kNoErr)", "-\t\tDND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc7cdbd5a27ce4f65469664647916123", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/photon/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "da5b2096f70170c1ee5967072f15746afe644075", "commitAfterChange": "e1a1a9a2764b9fd42d3fd4db27d8d960a32582f7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public void setContents(Object[] data, Transfer[] transferAgents)", "signatureAfterChange": "\r public void setContents(Object[] data, Transfer[] transferAgents)", "diff": ["+\tif (display.isDisposed() ) return;\r", "+\t\r", "+\tif (data == null) {\r", "+\t\tint ig = OS.PhInputGroup(0);\r", "+\t\tif (OS.PhClipboardCopy((short)ig, 0, null) != 0) {\r", "+\t\t\tDND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);\r", "+\t\t}\r", "+\t\treturn;\r", "+\t}\r", "+\tif (transferAgents == null || data.length != transferAgents.length) {\r", "+\t\tDND.error(SWT.ERROR_INVALID_ARGUMENT);\r", "+\t}\r", "+\t\r", "+\tbyte[] clips = new byte[0];\r", "+\tint count = 0;\r", "+\tfor (int i = 0; i < transferAgents.length; i++) {\r", "+\t\tString[] names = transferAgents[i].getTypeNames();\r", "+\t\tint[] ids = transferAgents[i].getTypeIds();\r", "+\t\tfor (int j = 0; j < names.length; j++) {\r", "+\t\t\tTransferData transferData = new TransferData();\r", "+\t\t\ttransferData.type = ids[j];\r", "+\t\t\ttransferAgents[i].javaToNative(data[i], transferData);\r", "+\t\t\tPhClipHeader clip = new PhClipHeader();\r", "+\t\t\tclip.data = transferData.pData;\r", "+\t\t\tclip.length = (short)transferData.length;\r", "+\t\t\tbyte[] temp = Converter.wcsToMbcs(null, names[j], true);\r", "+\t\t\tbyte[] type = new byte[8];\r", "+\t\t\tSystem.arraycopy(temp, 0, type, 0, Math.min(type.length, temp.length));\r", "+\t\t\tclip.type_0 = type[0];\r", "+\t\t\tclip.type_1 = type[1];\r", "+\t\t\tclip.type_2 = type[2];\r", "+\t\t\tclip.type_3 = type[3];\r", "+\t\t\tclip.type_4 = type[4];\r", "+\t\t\tclip.type_5 = type[5];\r", "+\t\t\tclip.type_6 = type[6];\r", "+\t\t\tclip.type_7 = type[7];\r", "+\t\t\tbyte[] buffer = new byte[PhClipHeader.sizeof];\r", "+\t\t\tOS.memmove(buffer, clip, PhClipHeader.sizeof);\r", "+\t\t\tbyte[] newClips = new byte[clips.length + buffer.length];\r", "+\t\t\tSystem.arraycopy(clips, 0, newClips, 0, clips.length);\r", "+\t\t\tSystem.arraycopy(buffer, 0, newClips, clips.length, buffer.length);\r", "+\t\t\tclips = newClips;\r", "+\t\t\tcount++;\r", "+\t\t}\r", "+\t}\r", "+\t\r", "+\tif (count > 0){\r", "+\t\tint ig = OS.PhInputGroup(0);\r", "+\t\tif (OS.PhClipboardCopy((short)ig, count, clips) != 0) {\r", "+\t\t\tDND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);\r", "+\t\t}\r", "+\t}\r"]}], "num": 14002}
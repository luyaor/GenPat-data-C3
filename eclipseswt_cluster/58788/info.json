{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ce15528057522d5823fa84d7ba43f1d7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36c747da8dc0d1be53262c7fafba7fdd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "db31883b9f41fd00bb5b0a446bfa1b3f53fba5d7", "commitAfterChange": "95bcccfd921c2b52375a1f493e992d80dc6832b5", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\tint code = OS.CallNextEventHandler (nextHandler, theEvent);", "+\tint code = OS.eventNotHandledErr;", "-\t\t\tif (attributeName.equals(OS.kAXChildrenAttribute)) {", "+\t\t\tif (attributeName.equals (OS.kAXRoleAttribute) || attributeName.equals (OS.kAXRoleDescriptionAttribute)) {", "+\t\t\t\tString roleText = OS.kAXStaticTextRole;", "+\t\t\t\tbuffer = new char [roleText.length ()];", "+\t\t\t\troleText.getChars (0, buffer.length, buffer, 0);", "+\t\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\t\tif (attributeName.equals (OS.kAXRoleAttribute)) {", "+\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "+\t\t\t\t\t} else { // kAXRoleDescriptionAttribute", "+\t\t\t\t\t\tint stringRef2 = OS.HICopyAccessibilityRoleDescription (stringRef [0], 0);", "+\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef2});", "+\t\t\t\t\t\tOS.CFRelease(stringRef2);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\t\tcode = OS.noErr;", "+\t\t\t\t}", "+\t\t\t} else if (attributeName.equals(OS.kAXChildrenAttribute)) {", "-\t\t\t\treturn OS.noErr;", "-\t\t\t}", "-\t\t\tString text = null;", "-\t\t\tif (attributeName.equals (OS.kAXRoleAttribute)) {", "-\t\t\t\ttext = OS.kAXStaticTextRole;", "-\t\t\t}", "-\t\t\tif (attributeName.equals (OS.kAXRoleDescriptionAttribute)) {", "-\t\t\t\tbuffer = new char [OS.kAXStaticTextRole.length ()];", "-\t\t\t\tOS.kAXStaticTextRole.getChars (0, buffer.length, buffer, 0);", "-\t\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-\t\t\t\tif (stringRef [0] != 0) {", "-\t\t\t\t\tint stringRef2 = OS.HICopyAccessibilityRoleDescription (stringRef [0], 0);", "-\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef2});", "-\t\t\t\t\tOS.CFRelease(stringRef [0]);", "-\t\t\t\t\tOS.CFRelease(stringRef2);", "-\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (attributeName.equals (OS.kAXTitleAttribute) || attributeName.equals (OS.kAXDescriptionAttribute)) {", "-\t\t\t\ttext = treeItem.getText (columnIndex);", "-\t\t\t}", "-\t\t\tif (text != null) {", "+\t\t\t\tcode = OS.noErr;", "+\t\t\t} else if (attributeName.equals (OS.kAXTitleAttribute) || attributeName.equals (OS.kAXDescriptionAttribute)) {", "+\t\t\t\tString text = treeItem.getText (columnIndex);", "-\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\tcode = OS.noErr;", "-\t\tcode = accessible.internal_kEventAccessibleGetNamedAttribute (nextHandler, theEvent, userData);", "+\t\tcode = accessible.internal_kEventAccessibleGetNamedAttribute (nextHandler, theEvent, code);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "589827d1b844909a8484d85d2706b89c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "db31883b9f41fd00bb5b0a446bfa1b3f53fba5d7", "commitAfterChange": "95bcccfd921c2b52375a1f493e992d80dc6832b5", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\tint code = OS.CallNextEventHandler (nextHandler, theEvent);", "+\tint code = OS.eventNotHandledErr;", "-\t\t\t\tif (attributeName.equals(OS.kAXChildrenAttribute)) {", "+\t\t\t\tif (attributeName.equals (OS.kAXRoleAttribute) || attributeName.equals (OS.kAXRoleDescriptionAttribute)) {", "+\t\t\t\t\tString roleText = OS.kAXStaticTextRole;", "+\t\t\t\t\tbuffer = new char [roleText.length ()];", "+\t\t\t\t\troleText.getChars (0, buffer.length, buffer, 0);", "+\t\t\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\t\t\tif (attributeName.equals (OS.kAXRoleAttribute)) {", "+\t\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "+\t\t\t\t\t\t} else { // kAXRoleDescriptionAttribute", "+\t\t\t\t\t\t\tint stringRef2 = OS.HICopyAccessibilityRoleDescription (stringRef [0], 0);", "+\t\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef2});", "+\t\t\t\t\t\t\tOS.CFRelease(stringRef2);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\t\t\tcode = OS.noErr;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (attributeName.equals(OS.kAXChildrenAttribute)) {", "-\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t}", "-\t\t\t\tString text = null;", "-\t\t\t\tif (attributeName.equals (OS.kAXRoleAttribute)) {", "-\t\t\t\t\ttext = OS.kAXStaticTextRole;", "-\t\t\t\t}", "-\t\t\t\tif (attributeName.equals (OS.kAXRoleDescriptionAttribute)) {", "-\t\t\t\t\tbuffer = new char [OS.kAXStaticTextRole.length ()];", "-\t\t\t\t\tOS.kAXStaticTextRole.getChars (0, buffer.length, buffer, 0);", "-\t\t\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-\t\t\t\t\tif (stringRef [0] != 0) {", "-\t\t\t\t\t\tint stringRef2 = OS.HICopyAccessibilityRoleDescription (stringRef [0], 0);", "-\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef2});", "-\t\t\t\t\t\tOS.CFRelease(stringRef [0]);", "-\t\t\t\t\t\tOS.CFRelease(stringRef2);", "-\t\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (attributeName.equals (OS.kAXTitleAttribute) || attributeName.equals (OS.kAXDescriptionAttribute)) {", "-\t\t\t\t\ttext = tableItem.getText (columnIndex);", "-\t\t\t\t}", "-\t\t\t\tif (text != null) {", "+\t\t\t\t\tcode = OS.noErr;", "+\t\t\t\t} else if (attributeName.equals (OS.kAXTitleAttribute) || attributeName.equals (OS.kAXDescriptionAttribute)) {", "+\t\t\t\t\tString text = tableItem.getText (columnIndex);", "-\t\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\t\tcode = OS.noErr;", "-\t\tcode = accessible.internal_kEventAccessibleGetNamedAttribute (nextHandler, theEvent, userData);", "+\t\tcode = accessible.internal_kEventAccessibleGetNamedAttribute (nextHandler, theEvent, code);"]}], "num": 58788}
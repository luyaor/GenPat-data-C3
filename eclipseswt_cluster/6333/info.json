{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "616d3377b355780ffbbfb7679923fff6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3c2cdbc1e209930e00b14184b6a0ea8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "5d5d6c8770a1d46c82c940b44d6a2e4884862a10", "commitAfterChange": "28aa455ae3ab9d2b8c756bcae7568a88b06cc8eb", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 82, "signatureBeforeChange": " public void setAdvanced(boolean advanced)", "signatureAfterChange": " public void setAdvanced(boolean advanced)", "diff": ["+\tif ((data.style & SWT.MIRRORED) != 0) {", "+\t\tif (!advanced) {", "+\t\t\tsetAlpha(0xFF);", "+\t\t\tsetAntialias(SWT.DEFAULT);", "+\t\t\tsetBackgroundPattern(null);", "+\t\t\tsetClipping(0);", "+\t\t\tsetForegroundPattern(null);", "+\t\t\tsetInterpolation(SWT.DEFAULT);", "+\t\t\tsetTextAntialias(SWT.DEFAULT);", "+\t\t\tsetTransform(null);", "+\t\t}", "+\t\treturn;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8bd125f1b64277e819caadb159712c2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "commitAfterChange": "8259fbf3a4cd584fe1bf4b258013abcf2c1655a4", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "  Event sendMeasureItemEvent (TableItem item, int row, int column, int hDC)", "signatureAfterChange": "  Event sendMeasureItemEvent (TableItem item, int row, int column, int hDC)", "diff": ["-\t\tif (event.height > getItemHeight ()) setItemHeight (event.height);", "+\t\tint /*long*/ empty = OS.SendMessage (handle, OS.LVM_APPROXIMATEVIEWRECT, 0, 0);", "+\t\tint /*long*/ oneItem = OS.SendMessage (handle, OS.LVM_APPROXIMATEVIEWRECT, 1, 0);", "+\t\tint itemHeight = OS.HIWORD (oneItem) - OS.HIWORD (empty);", "+\t\tif (event.height > itemHeight) setItemHeight (event.height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43bc4cb98524af27f2abe05be32fdaa0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "781bc473ae283b52db11df96bd63b6ac78600870", "commitAfterChange": "19497a80620870a4c6de27fc22fe0142080bccae", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " public void setImeInputMode (int mode)", "signatureAfterChange": " public void setImeInputMode (int mode)", "diff": ["-\t\t\tif ((mode & (SWT.DBCS | SWT.NATIVE)) != 0) {", "+\t\t\tboolean fullShape = (mode & SWT.DBCS) != 0;", "+\t\t\tif ((mode & SWT.NATIVE) != 0) {", "+\t\t\t\tint /*long*/ hkl = OS.GetKeyboardLayout (0);", "+\t\t\t\tint langid = OS.PRIMARYLANGID (OS.LOWORD (hkl));", "+\t\t\t\tif (langid == OS.LANG_JAPANESE) {", "+\t\t\t\t\tfullShape = true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (fullShape) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2512048e423bce3b802ed8bf0342508", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ProgressBar.java", "commitBeforeChange": "9d80fa41aebed8140fd6eb7eab6449cb2fe17efe", "commitAfterChange": "6940f18b48d4360234489967f75e7e89afce228a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void setSelection (int value)", "signatureAfterChange": " public void setSelection (int value)", "diff": ["-\t* a normal state, PBM_SETPOS does not set the position.", "+\t* a normal state, PBM_SETPOS does not set the position", "+\t* of the bar when the selection is equal to the minimum.", "+\tboolean fixSelection = false;", "-\t\tstate = OS.SendMessage (handle, OS.PBM_GETSTATE, 0, 0);", "-\t\tOS.SendMessage (handle, OS.PBM_SETSTATE, OS.PBST_NORMAL, 0);", "+\t\tint minumum = /*64*/OS.SendMessage (handle, OS.PBM_GETRANGE, 1, 0);", "+\t\tint selection = (int)/*64*/OS.SendMessage (handle, OS.PBM_GETPOS, 0, 0);", "+\t\tif (selection == minumum) {", "+\t\t\tfixSelection = true;", "+\t\t\tstate = OS.SendMessage (handle, OS.PBM_GETSTATE, 0, 0);", "+\t\t\tOS.SendMessage (handle, OS.PBM_SETSTATE, OS.PBST_NORMAL, 0);", "+\t\t}", "-\t\tOS.SendMessage (handle, OS.PBM_SETSTATE, state, 0);", "+\t\tif (fixSelection) OS.SendMessage (handle, OS.PBM_SETSTATE, state, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6a4dc1b3ac829c784ec7a3aaa367f9f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "e1929f1c3f43e3e6bd5928e5d3ab409bc77b273b", "commitAfterChange": "e110ad777de5522fc2aab164f7eb6f0ab0953b03", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tint width = 0, height = rect.bottom - rect.top;", "-\tif (columnCount == 0) {", "-\t\twidth = getScrollWidth ();", "+\tint height = rect.bottom - rect.top;", "+\tint bits = 0;", "+\tif (wHint != SWT.DEFAULT) {", "+\t\tbits |= wHint & 0xFFFF;", "+\t\tint width = 0;", "+\t\tbits |= width & 0xFFFF;", "+\tint result = OS.SendMessage (handle, OS.LVM_APPROXIMATEVIEWRECT, -1, bits | 0xFFFF0000);", "+\tint width = result & 0xFFFF;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70890d2588514c4c330f33a3f72bcaea", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "4c6c40a57003101341cff1885924156310d140e2", "commitAfterChange": "b20b1574fcd2810edc0e2ee351b119380a6c3e9c", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void setSelection (boolean selected)", "signatureAfterChange": " public void setSelection (boolean selected)", "diff": ["+\tif ((style & SWT.CHECK) != 0) {", "+\t\tif (grayed) {", "+\t\t\tif (selected) {", "+\t\t\t\tOS.SetControl32BitMaximum (handle, 2);", "+\t\t\t\tOS.SetControl32BitValue (handle, 2);", "+\t\t\t} else {", "+\t\t\t\tOS.SetControl32BitMaximum (handle, 0);", "+\t\t\t\tOS.SetControl32BitValue (handle, 0);", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t\tOS.SetControl32BitMaximum (handle, 1);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53d95a00bc0b8ad581f3ffd1c85079fc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "5e25a1d6de8e8f0c1e45910e13ae0be069575b8b", "commitAfterChange": "01b53f04043d77e5b4a54bcfe36da2df748745a8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void createScrolledHandle (int parentHandle)", "signatureAfterChange": "  void createScrolledHandle (int parentHandle)", "diff": ["+\tif ((style & SWT.EMBEDDED) != 0) {", "+\t\tsocketHandle = OS.gtk_socket_new ();", "+\t\tif (socketHandle == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.gtk_container_add (handle, socketHandle);", "+\t\tOS.gtk_widget_show (socketHandle);", "+\t\tembeddedHandle = OS.gtk_socket_get_id (socketHandle);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "179dc04a7093f069d29026356ad92c09", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "af9f857dda29d2ee1989cc89928edc6e0958ebc8", "commitAfterChange": "4b24af5ef710affbf05bf5fb1df78e69400546d5", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "  \tprivate int handleWindowCallback(int nextHandler, int eRefHandle, int whichWindow)", "signatureAfterChange": "  \tprivate int handleWindowCallback(int nextHandler, int eRefHandle, int whichWindow)", "diff": ["+\t\tint eventClass= OS.GetEventClass(eRefHandle);", "-\t\tswitch (eventKind) {", "-\t\tcase OS.kEventWindowActivated:", "-\t\t\twindowProc(whichWindow, SWT.FocusIn, new Boolean(true));", "-\t\t\treturn OS.kNoErr;", "-\t\tcase OS.kEventWindowDeactivated:", "-\t\t\twindowProc(whichWindow, SWT.FocusIn, new Boolean(false));", "-\t\t\treturn OS.kNoErr;", "-\t\tcase OS.kEventWindowBoundsChanged:", "-\t\t\tint[] attr= new int[1];", "-\t\t\tOS.GetEventParameter(eRefHandle, OS.kEventParamAttributes, OS.typeUInt32, null, null, attr);\t", "-\t\t\twindowProc(whichWindow, SWT.Resize, new Integer(attr[0]));", "-\t\t\treturn OS.kNoErr;", "-\t\tcase OS.kEventWindowClose:", "-\t\t\twindowProc(whichWindow, SWT.Dispose, null);", "-\t\t\treturn OS.kNoErr;", "-\t\tcase OS.kEventWindowDrawContent:", "-\t\t\tif (toolTipWindowHandle == whichWindow) {", "-\t\t\t\tprocessPaintToolTip(whichWindow);", "+\t\t", "+\t\tswitch (eventClass) {", "+\t\t\t", "+\t\tcase OS.kEventClassMouse:", "+\t\t\treturn handleMouseCallback(nextHandler, eRefHandle);", "+\t\t\t", "+\t\tcase OS.kEventClassWindow:", "+\t\t\tswitch (eventKind) {", "+\t\t\tcase OS.kEventWindowActivated:", "+\t\t\t\tfActiveWindow= whichWindow;", "+\t\t\t\twindowProc(whichWindow, SWT.FocusIn, new Boolean(true));", "-\t\t\t} else {", "-\t\t\t\tupdateWindow2(whichWindow);", "+\t\t\tcase OS.kEventWindowDeactivated:", "+\t\t\t\tfActiveWindow= 0;", "+\t\t\t\twindowProc(whichWindow, SWT.FocusIn, new Boolean(false));", "+\t\t\tcase OS.kEventWindowBoundsChanged:", "+\t\t\t\tint[] attr= new int[1];", "+\t\t\t\tOS.GetEventParameter(eRefHandle, OS.kEventParamAttributes, OS.typeUInt32, null, null, attr);\t", "+\t\t\t\twindowProc(whichWindow, SWT.Resize, new Integer(attr[0]));", "+\t\t\t\treturn OS.kNoErr;", "+\t\t\tcase OS.kEventWindowClose:", "+\t\t\t\twindowProc(whichWindow, SWT.Dispose, null);", "+\t\t\t\treturn OS.kNoErr;", "+\t\t\tcase OS.kEventWindowDrawContent:", "+\t\t\t\tif (toolTipWindowHandle == whichWindow) {", "+\t\t\t\t\tprocessPaintToolTip(whichWindow);", "+\t\t\t\t\treturn OS.kNoErr;", "+\t\t\t\t} else {", "+\t\t\t\t\tupdateWindow2(whichWindow);", "+\t\t\t\t\treturn OS.kNoErr;", "+\t\t\t\t}", "+\t\t\t\t//break;", "+\t\t\tdefault:", "+\t\t\t\tSystem.out.println(\"handleWindowCallback: kEventClassWindow kind:\" + eventKind);", "+\t\t\t\tbreak;", "-\t\t\t//break;", "+\t\t\tbreak;", "+\t\t\t", "-\t\t\tSystem.out.println(\"handleWindowCallback: \" + eventKind);", "+\t\t\tSystem.out.println(\"handleWindowCallback: unexpected event class: \" + MacUtil.toString(eventClass));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ae1ff152e8af180e60aa5bb1e124fa9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "a53437729f6b833bebcd1cd271f9203f7eb7006f", "commitAfterChange": "9fc2725aa1b37f44cd97ca487a78d905409b2bab", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["-\t\t\t/*", "-\t\t\t* This code is intentionally commented.  Because GTK", "-\t\t\t* enforces radio behavior in a button group a radio group", "-\t\t\t* is not created for each set of contiguous buttons, each", "-\t\t\t* radio button will not draw unpressed.  The fix is to use", "-\t\t\t* toggle buttons instead.", "-\t\t\t*/", "-//\t\t\thandle = OS.gtk_radio_menu_item_new_with_label (0, buffer);", "-//\t\t\tbreak;", "+\t\t\tgroupHandle = OS.gtk_radio_menu_item_new (0);", "+\t\t\tif (groupHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\tOS.g_object_ref (groupHandle);", "+\t\t\tOS.gtk_object_sink (groupHandle);", "+\t\t\tint /*long*/ group = OS.gtk_radio_menu_item_get_group (groupHandle);", "+\t\t\thandle = OS.gtk_radio_menu_item_new_with_label (group, buffer);", "+\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0113c4f035d14a9043c8e5029b0a5aa6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "4c6c40a57003101341cff1885924156310d140e2", "commitAfterChange": "b20b1574fcd2810edc0e2ee351b119380a6c3e9c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "  int kEventControlHit (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventControlHit (int nextHandler, int theEvent, int userData)", "diff": ["+\t\t}", "+\t} else {", "+\t\tif ((style & SWT.CHECK) != 0) {", "+\t\t\tif (grayed) {", "+\t\t\t\tswitch (OS.GetControl32BitValue (handle)) {", "+\t\t\t\t\tcase 0: ", "+\t\t\t\t\t\tOS.SetControl32BitMaximum (handle, 2);", "+\t\t\t\t\t\tOS.SetControl32BitValue (handle, 2);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase 1:", "+\t\t\t\t\tcase 2:", "+\t\t\t\t\t\tOS.SetControl32BitMaximum (handle, 0);", "+\t\t\t\t\t\tOS.SetControl32BitValue (handle, 0);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56ea5d39bf2ce17fd6a7c6cfcd853cae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "213da59fa07696ed6ab84844f50f7f5b1efa0fa9", "commitAfterChange": "53cdfc1c63b34e7e8a0e30474b69632d898d9141", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r void createHandle ()", "signatureAfterChange": "\r \r void createHandle ()", "diff": ["-\tif ((style & SWT.CHECK) != 0) setCheckboxImageList (true);\r", "+\tif ((style & SWT.CHECK) != 0) {\r", "+\t\tint empty = OS.SendMessage (handle, OS.LVM_APPROXIMATEVIEWRECT, 0, 0);\r", "+\t\tint oneItem = OS.SendMessage (handle, OS.LVM_APPROXIMATEVIEWRECT, 1, 0);\r", "+\t\tint width = (oneItem >> 16) - (empty >> 16), height = width;\r", "+\t\tsetCheckboxImageList (width, height);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0add313f315a66c75cbff4683916ab92", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "5aebd96e6e03d77d1ec1be3bdce35459d0a39900", "commitAfterChange": "da8686b28118a56acbe181513b1c7f6508988143", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["-\t\t\t\t\t\t\tgdipFont = GC.createGdipFont(hdc, hFont);", "+\t\t\t\t\t\t\tgdipFont = Gdip.Font_new(hdc, hFont);", "+\t\t\t\t\t\t\tif (gdipFont == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\t\t\t\tif (!Gdip.Font_IsAvailable(gdipFont)) {", "+\t\t\t\t\t\t\t\tGdip.Font_delete(gdipFont);", "+\t\t\t\t\t\t\t\tgdipFont = 0;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tpRect = drawRunTextGDIP(gdipGraphics, run, rect, gdipFont, baseline, gdipForeground, gdipSelForeground, selectionStart, selectionEnd, alpha);", "+\t\t\t\t\t\tif (gdipFont != 0) {", "+\t\t\t\t\t\t\tpRect = drawRunTextGDIP(gdipGraphics, run, rect, gdipFont, baseline, gdipForeground, gdipSelForeground, selectionStart, selectionEnd, alpha);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tpRect = drawRunTextGDIPRaster(gdipGraphics, run, rect, baseline, foreground, selForeground, selectionStart, selectionEnd);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85f3c21a7d92ab45631a6eefe122e4d1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/carbon/org/eclipse/swt/browser/MozillaDelegate.java", "commitBeforeChange": "a83fcf6055f867f0050aa97de300cbeb9da19a0d", "commitAfterChange": "56fb1e5d19b79846a4a91435e0ae039e4404a5a0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  static int eventProc3 (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  static int eventProc3 (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tbrowser.getShell ().forceActive ();", "-\t\t((Mozilla)browser.webBrowser).Activate ();", "+\t\tswitch (OS.GetEventClass (theEvent)) {", "+\t\t\tcase OS.kEventClassMouse:", "+\t\t\t\tbrowser.getShell ().forceActive ();", "+\t\t\t\t((Mozilla)browser.webBrowser).Activate ();", "+\t\t\t\tbreak;", "+\t\t\tcase OS.kEventClassKeyboard:", "+\t\t\t\t/*", "+\t\t\t\t* Bug in Carbon.  OSX crashes if a HICocoaView is disposed during a key event,", "+\t\t\t\t* presumably as a result of attempting to use it after its refcount has reached", "+\t\t\t\t* 0.  The workaround is to temporarily add an extra ref to the view while the", "+\t\t\t\t* DOM listener is handling the event, in case the Browser gets disposed in a", "+\t\t\t\t* callback.", "+\t\t\t\t*/", "+\t\t\t\tint handle = browser.handle;", "+\t\t\t\tOS.CFRetain (handle);", "+\t\t\t\tint result = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\t\tOS.CFRelease (handle);", "+\t\t\t\treturn result;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6d008e13f5f32f0e227e7a0c8a5853b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "90ac1ec2423f83c68a9e555770c8ebceed58ed58", "commitAfterChange": "3269f2ba1f8c41f6e6d5ceb7a17f30ff59fcc5e0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+\t", "+\t/*", "+\t* Feature in Windows.  The height returned by LVM_APPROXIMATEVIEWRECT", "+\t* includes the trim plus the height of the items plus one extra row.", "+\t* The fix is to subtract the height of one row from the result height.", "+\t*/", "+\tint empty = OS.SendMessage (handle, OS.LVM_APPROXIMATEVIEWRECT, 0, 0);", "+\tint oneItem = OS.SendMessage (handle, OS.LVM_APPROXIMATEVIEWRECT, 1, 0);", "+\theight -= (oneItem >> 16) - (empty >> 16);", "+\t", "-\t/*", "-\t* Feature in Windows.  For some reason, LVM_APPROXIMATEVIEWRECT", "-\t* does not include the space for the vertical scroll bar but does", "-\t* take into account the horizontal scroll bar when calculating the", "-\t* space needed to show the items.  The fix is to add in this space.", "-\t*/", "-\tif (((style & SWT.H_SCROLL) != 0) && (hHint != SWT.DEFAULT)) {", "+\tif ((style & SWT.H_SCROLL) != 0) {"]}], "num": 6333}
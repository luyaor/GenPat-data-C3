{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84850b8074f2bf3c56745d7901b03aff", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba60f903cdce2e117754f8f76ae7025b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "eb0dd46e7194a9f7d813095a5dca290fae54babc", "commitAfterChange": "8174cf2444655210718c9dde4ae430f251492a85", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t/*\r", "-\t * Feature in Photon - The preferred width calculated by\r", "-\t * PtWidgetPreferredSize is the current width.\r", "-\t */", "-\tPhDim_t dim = new PhDim_t();\r", "-\tif (!OS.PtWidgetIsRealized (handle)) OS.PtExtentWidget (handle);\r", "-\tOS.PtWidgetPreferredSize(handle, dim);\r", "-\tint width = 0, height = dim.h;\r", "-\tint [] args = new int [] {\r", "-\t\tOS.Pt_ARG_LIST_ITEM_COUNT, 0, 0,\r", "-\t\tOS.Pt_ARG_ITEMS, 0, 0,\r", "-\t\tOS.Pt_ARG_LIST_FONT, 0, 0,\r", "-\t};\r", "+\tint [] args = new int [] {OS.Pt_ARG_WIDTH, 0, 0, OS.Pt_ARG_HEIGHT, 0, 0};\r", "-\tPhRect_t rect = new PhRect_t();\r", "-\tint font = args [7];\r", "-\tint [] buffer = new int [1];\r", "-\tfor (int i = 0; i < args [1]; i++) {\r", "-\t\tOS.memmove (buffer, args [4] + (i * 4), 4);\r", "-\t\tint str = buffer [0];\r", "-\t\tint length = OS.strlen (str);\r", "-\t\tif (length > 0) {\r", "-\t\t\tOS.PfExtentText(rect, null, font, str, length);\r", "-\t\t\twidth = Math.max(width, rect.lr_x - rect.ul_x + 1);\r", "-\t\t}\r", "-\t}\r", "-\trect = new PhRect_t ();\r", "-\tPhArea_t area = new PhArea_t ();\r", "-\trect.lr_x = (short) (width + 1);\r", "-\tOS.PtSetAreaFromWidgetCanvas (handle, rect, area);\r", "-\twidth = area.size_w;\r", "+\tint resizeFlags = OS.Pt_RESIZE_X_ALWAYS | OS.Pt_RESIZE_Y_ALWAYS;\r", "+\tOS.PtSetResource (handle, OS.Pt_ARG_RESIZE_FLAGS, resizeFlags, OS.Pt_RESIZE_XY_BITS);\r", "+\tif (!OS.PtWidgetIsRealized (handle)) OS.PtExtentWidgetFamily (handle);\r", "+\tPhDim_t dim = new PhDim_t ();\r", "+\tOS.PtWidgetPreferredSize (handle, dim);\r", "+\tint width = dim.w, height = dim.h;\r", "+\tOS.PtSetResource (handle, OS.Pt_ARG_RESIZE_FLAGS, 0, OS.Pt_RESIZE_XY_BITS);\r", "+\tOS.PtSetResources (handle, args.length / 3, args);\r", "+\t\t\t", "-\t\trect = new PhRect_t ();\r", "-\t\tarea = new PhArea_t ();\r", "+\t\tPhRect_t rect = new PhRect_t ();\r", "+\t\tPhArea_t area = new PhArea_t ();\r", "-\t\t\tif ((scroll = getVerticalBar()) != null)\r", "-\t\t\t\twidth += scroll.getSize().x;\r", "+\t\t\tif ((scroll = getVerticalBar()) != null) width += scroll.getSize ().x;\r", "-\t\t\tif ((scroll = getHorizontalBar()) != null)\r", "-\t\t\t\theight += scroll.getSize().y;\r", "+\t\t\tif ((scroll = getHorizontalBar()) != null) height += scroll.getSize ().y;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca3a2818ec9aa9ae5c171f5dc77fceee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "85f1fc56d7da27f427cc958ea00c02335ade970a", "commitAfterChange": "166233a02615ac1e2681ccfd00cba112f3ec895b", "methodNumberBeforeChange": 203, "methodNumberAfterChange": 202, "signatureBeforeChange": " void handleTextChanged(TextChangedEvent event)", "signatureAfterChange": " void handleTextChanged(TextChangedEvent event)", "diff": ["-\tlineCache.textChanged(lastTextChangeStart, ", "-\t\tlastTextChangeNewLineCount, ", "-\t\tlastTextChangeReplaceLineCount);", "+\tlineCache.textChanged(lastTextChangeStart, lastTextChangeNewLineCount, lastTextChangeReplaceLineCount);", "-\t// fixes 1GB93QT", "-\tupdateSelection(", "-\t\tlastTextChangeStart, ", "-\t\tlastTextChangeReplaceCharCount, ", "-\t\tlastTextChangeNewCharCount);", "+\tupdateSelection(lastTextChangeStart, lastTextChangeReplaceCharCount, lastTextChangeNewCharCount);", "+\tRectangle clientArea = getClientArea();", "+\tint firstLine = content.getLineAtOffset(lastTextChangeStart);", "+\tint lastLine = firstLine + lastTextChangeNewLineCount;", "+\tint firstLineTop = getLinePixel(firstLine);", "+\tint newLastLineBottom = getLinePixel(lastLine + 1);", "+\tif (newLastLineBottom != lastLineBottom) {", "+\t\t//TODO fails if margin != 0", "+\t\tscroll(0, newLastLineBottom, 0, lastLineBottom, clientArea.width, clientArea.height - newLastLineBottom, true);", "+\t}", "+\tsuper.redraw(0, firstLineTop, clientArea.width, newLastLineBottom - firstLineTop, false);", "+\tif (newLastLineBottom == lastLineBottom) {\t\t", "+\t\tupdate();", "+\t}", "-\t\t// Only check for unused space when lines are deleted.", "-\t\t// Fixes 1GFL4LY", "-\t\t// Scroll up so that empty lines below last text line are used.", "-\t\t// Fixes 1GEYJM0", "-\t\t// fixes bug 8273", "-\t}", "-\tboolean directDraw;", "-\tif (isFixedLineHeight()) {", "-\t\tdirectDraw = lastTextChangeNewLineCount == 0 && lastTextChangeReplaceLineCount == 0;", "-\t} else {", "-\t\tint lastLine = content.getLineAtOffset(lastTextChangeStart) + lastTextChangeNewLineCount;", "-\t\tint newLineBottom = getLinePixel(lastLine + 1);", "-\t\tdirectDraw = lastLineBottom == newLineBottom;", "-\t\tif (!directDraw) {", "-\t\t\t//TODO use scroll() instead of redraw()", "-\t\t\tint firstLine = content.getLineAtOffset(lastTextChangeStart);", "-\t\t\tint firstLineTop = Math.max(getLinePixel(firstLine), topMargin);", "-\t\t\tRectangle clientArea = getClientArea();", "-\t\t\tsuper.redraw(clientArea.x, firstLineTop, clientArea.width, clientArea.height - firstLineTop, false);", "-\t\t}", "-\t}", "-\t// do direct drawing if the text change is confined to a single line.", "-\t// optimization and fixes bug 13999. see also handleTextChanging.", "-\tif (directDraw) {", "-\t\tint startLine = content.getLineAtOffset(lastTextChangeStart);", "-\t\tint startY = getLinePixel(startLine);", "-\t\tint height = lineCache.getLineHeight(startLine);", "-\t\tif (DOUBLE_BUFFER) {", "-\t\t\tCaret caret = getCaret();", "-\t\t\tboolean caretVisible = false;", "-\t\t\tif (caret != null) {", "-\t\t\t\tcaretVisible = caret.getVisible();", "-\t\t\t\tcaret.setVisible(false);", "-\t\t\t}", "-\t\t\tGC gc = new GC(this);", "-\t\t\tperformPaint(gc, startLine, startY, height);", "-\t\t\tgc.dispose();", "-\t\t\tif (caret != null) {", "-\t\t\t\tcaret.setVisible(caretVisible);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tsuper.redraw(0, startY, getClientArea().width, height, false);", "-\t\t\tupdate();", "-\t\t}"]}], "num": 60765}
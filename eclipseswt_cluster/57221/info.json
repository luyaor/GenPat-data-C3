{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59d0abee7a2f713d7d27cadeb2f2b3b6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fec41fc8be083740877b23490f6d3ec0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "be7a6b56ec36f2937282f99ce8f6d3a09d752bb5", "commitAfterChange": "388089e4bec9dc7b9e91ccd2ec44faabbba9290c", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "  void fillBackground (int control, int context, Rectangle bounds)", "signatureAfterChange": "  void fillBackground (int control, int context, Rectangle bounds)", "diff": ["-\tif (OS.HIVIEW) {", "-\t\tOS.CGContextSaveGState (context);", "-\t\tCGRect rect = new CGRect ();", "-\t\tif (bounds != null) {", "-\t\t\trect.x = bounds.x;", "-\t\t\trect.y = bounds.y;", "-\t\t\trect.width = bounds.width;", "-\t\t\trect.height = bounds.height;", "-\t\t} else {", "-\t\t\tOS.HIViewGetBounds (control, rect);", "-\t\t}", "-\t\tControl widget = findBackgroundControl ();", "-\t\tif (widget != null && widget.backgroundImage != null) {", "-\t\t\tCGPoint pt = new CGPoint();", "-\t\t\tOS.HIViewConvertPoint (pt, control, widget.handle);", "-\t\t\tOS.CGContextTranslateCTM (context, -pt.x, -pt.y);", "-\t\t\tPattern pattern = new Pattern (display, widget.backgroundImage);", "-\t\t\tGCData data = new GCData ();", "-\t\t\tdata.device = display;", "-\t\t\tdata.background = widget.getBackgroundColor ().handle;", "-\t\t\tGC gc = GC.carbon_new (context, data);", "-\t\t\tgc.setBackgroundPattern (pattern);", "-\t\t\tgc.fillRectangle ((int) (rect.x + pt.x), (int) (rect.y + pt.y), (int) rect.width, (int) rect.height);", "-\t\t\tgc.dispose ();", "-\t\t\tpattern.dispose();", "-\t\t} else if (widget != null && widget.background != null) {", "-\t\t\tint colorspace = OS.CGColorSpaceCreateDeviceRGB ();", "-\t\t\tOS.CGContextSetFillColorSpace (context, colorspace);", "-\t\t\tOS.CGContextSetFillColor (context, widget.background);", "-\t\t\tOS.CGColorSpaceRelease (colorspace);", "+\tOS.CGContextSaveGState (context);", "+\tCGRect rect = new CGRect ();", "+\tif (bounds != null) {", "+\t\trect.x = bounds.x;", "+\t\trect.y = bounds.y;", "+\t\trect.width = bounds.width;", "+\t\trect.height = bounds.height;", "+\t} else {", "+\t\tOS.HIViewGetBounds (control, rect);", "+\t}", "+\tControl widget = findBackgroundControl ();", "+\tif (widget != null && widget.backgroundImage != null) {", "+\t\tCGPoint pt = new CGPoint();", "+\t\tOS.HIViewConvertPoint (pt, control, widget.handle);", "+\t\tOS.CGContextTranslateCTM (context, -pt.x, -pt.y);", "+\t\tPattern pattern = new Pattern (display, widget.backgroundImage);", "+\t\tGCData data = new GCData ();", "+\t\tdata.device = display;", "+\t\tdata.background = widget.getBackgroundColor ().handle;", "+\t\tGC gc = GC.carbon_new (context, data);", "+\t\tgc.setBackgroundPattern (pattern);", "+\t\tgc.fillRectangle ((int) (rect.x + pt.x), (int) (rect.y + pt.y), (int) rect.width, (int) rect.height);", "+\t\tgc.dispose ();", "+\t\tpattern.dispose();", "+\t} else if (widget != null && widget.background != null) {", "+\t\tint colorspace = OS.CGColorSpaceCreateDeviceRGB ();", "+\t\tOS.CGContextSetFillColorSpace (context, colorspace);", "+\t\tOS.CGContextSetFillColor (context, widget.background);", "+\t\tOS.CGColorSpaceRelease (colorspace);", "+\t\tOS.CGContextSetAlpha (context, getThemeAlpha ());", "+\t\tOS.CGContextFillRect (context, rect);", "+\t} else {", "+\t\tif (OS.VERSION >= 0x1040) {", "+\t\t\tOS.HIThemeSetFill (OS.kThemeBrushDialogBackgroundActive, 0, context, OS.kHIThemeOrientationNormal);", "-\t\t\tif (OS.VERSION >= 0x1040) {", "-\t\t\t\tOS.HIThemeSetFill (OS.kThemeBrushDialogBackgroundActive, 0, context, OS.kHIThemeOrientationNormal);", "-\t\t\t\tOS.CGContextSetAlpha (context, getThemeAlpha ());", "-\t\t\t\tOS.CGContextFillRect (context, rect);", "-\t\t\t} else {", "-\t\t\t\tRect rect1 = new Rect ();", "-\t\t\t\trect1.left = (short) rect.x;", "-\t\t\t\trect1.top = (short) rect.y;", "-\t\t\t\trect1.right = (short) (rect.x + rect.width);", "-\t\t\t\trect1.bottom = (short) (rect.y + rect.height);", "-\t\t\t\tOS.SetThemeBackground ((short) OS.kThemeBrushDialogBackgroundActive, (short) 0, true);", "-\t\t\t\tOS.EraseRect (rect1);", "-\t\t\t}", "-\t\t}", "-\t\tOS.CGContextRestoreGState (context);", "-\t} else {", "-\t\tRect rect = new Rect ();", "-\t\tOS.GetControlBounds (control, rect);", "-\t\tif (OS.HIVIEW) {", "-\t\t\trect.right += rect.left;", "-\t\t\trect.bottom += rect.top;", "-\t\t\trect.left = rect.top = 0;", "-\t\t}", "-\t\tif (background != null) {", "-\t\t\tOS.RGBForeColor (toRGBColor (background));", "-\t\t\tOS.PaintRect (rect);", "-\t\t} else {", "-\t\t\tOS.SetThemeBackground((short) OS.kThemeBrushDialogBackgroundActive, (short) 0, true);", "-\t\t\tOS.EraseRect (rect);", "+\t\t\tRect rect1 = new Rect ();", "+\t\t\trect1.left = (short) rect.x;", "+\t\t\trect1.top = (short) rect.y;", "+\t\t\trect1.right = (short) (rect.x + rect.width);", "+\t\t\trect1.bottom = (short) (rect.y + rect.height);", "+\t\t\tOS.SetThemeBackground ((short) OS.kThemeBrushDialogBackgroundActive, (short) 0, true);", "+\t\t\tOS.EraseRect (rect1);", "+\tOS.CGContextRestoreGState (context);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f41c18aa039efa06b94084c9eefaec30", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "11fb5ee98008bfc54d8ec3b150166d2290700e35", "commitAfterChange": "b775687e595c4350d5b88a3030424e809a900726", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["-\tapplicationCallback3 = new Callback(this, \"applicationProc\", 3);", "-\tint proc3 = applicationCallback3.getAddress();", "-\tif (proc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\tCallback callback = new Callback(this, \"applicationProc\", 3);", "-\tint appProc3 = callback.getAddress();", "-\tif (appProc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\tString className = \"SWTApplication\";", "-\tint cls = OS.objc_allocateClassPair(OS.class_NSApplication, className, 0);", "-\tOS.class_addMethod(cls, OS.sel_sendEvent_1, appProc3, \"@:@\");", "-\tOS.objc_registerClassPair(cls);", "-\tapplication = new NSApplication(OS.objc_msgSend(cls, OS.sel_sharedApplication));", "+//\tapplicationCallback3 = new Callback(this, \"applicationProc\", 3);", "+//\tint proc3 = applicationCallback3.getAddress();", "+//\tif (proc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+//\tCallback callback = new Callback(this, \"applicationProc\", 3);", "+//\tint appProc3 = callback.getAddress();", "+//\tif (appProc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+//\tString className = \"SWTApplication\";", "+//\tint cls = OS.objc_allocateClassPair(OS.class_NSApplication, className, 0);", "+//\tOS.class_addMethod(cls, OS.sel_sendEvent_1, appProc3, \"@:@\");", "+//\tOS.objc_registerClassPair(cls);", "+//\tapplication = new NSApplication(OS.objc_msgSend(cls, OS.sel_sharedApplication));", "+\tapplication = NSApplication.sharedApplication();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "700d53dadf585811d71f6faf84ee2ab2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "be7a6b56ec36f2937282f99ce8f6d3a09d752bb5", "commitAfterChange": "388089e4bec9dc7b9e91ccd2ec44faabbba9290c", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void drawWidget (int control, int context, int damageRgn, int visibleRgn, int theEvent)", "signatureAfterChange": "  void drawWidget (int control, int context, int damageRgn, int visibleRgn, int theEvent)", "diff": ["-\tint port = 0; ", "-\tint [] buffer = null;", "-\tif (!OS.HIVIEW) {", "-\t\tbuffer = new int [1];", "-\t\tRect portRect = new Rect ();", "-\t\tport = OS.GetWindowPort (shellHandle);", "-\t\tOS.GetPortBounds (port, portRect);", "-\t\tOS.QDBeginCGContext (port, buffer);", "-\t\tcontext = buffer [0];", "-\t\tOS.CGContextScaleCTM (context, 1, -1);", "-\t\tOS.CGContextTranslateCTM (context, 0, portRect.top - portRect.bottom);", "-\t}", "-\tif (!OS.HIVIEW) OS.QDEndCGContext (port, buffer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "818ec61d392f4770d27bfa28445a7e63", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/cocoa/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "0a50d92817a0ec852579e15a962a04552ba58310", "commitAfterChange": "5f8c70f9663ba812b07371317d526ce083d22a28", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 21, "signatureBeforeChange": " void setupNewPage()", "signatureAfterChange": " void setupNewPage()", "diff": ["-\tif (!inPage) {", "-\t\tinPage= true;", "-\t\tOS.PMSessionBeginPageNoDialog(printSession, pageFormat, null);", "-\t\tint[] buffer = new int[1];", "-\t\tOS.PMSessionGetGraphicsContext(printSession, 0, buffer);", "-\t\tif (context == 0) {", "-\t\t\tcontext = buffer[0];", "-\t\t} else {", "-\t\t\tif (context != buffer[0]) SWT.error(SWT.ERROR_UNSPECIFIED);", "-\t\t}", "-\t\tPMRect paperRect= new PMRect();", "-\t\tOS.PMGetAdjustedPaperRect(pageFormat, paperRect);", "-\t\tOS.CGContextScaleCTM(context, 1, -1);", "-\t\tOS.CGContextTranslateCTM(context, 0, -(float)(paperRect.bottom-paperRect.top));", "-\t\tOS.CGContextSetStrokeColorSpace(context, colorspace);", "-\t\tOS.CGContextSetFillColorSpace(context, colorspace);", "-\t}", "+//\tif (!inPage) {", "+//\t\tinPage= true;", "+//\t\tOS.PMSessionBeginPageNoDialog(printSession, pageFormat, null);", "+//\t\tint[] buffer = new int[1];", "+//\t\tOS.PMSessionGetGraphicsContext(printSession, 0, buffer);", "+//\t\tif (context == 0) {", "+//\t\t\tcontext = buffer[0];", "+//\t\t} else {", "+//\t\t\tif (context != buffer[0]) SWT.error(SWT.ERROR_UNSPECIFIED);", "+//\t\t}", "+//\t\tPMRect paperRect= new PMRect();", "+//\t\tOS.PMGetAdjustedPaperRect(pageFormat, paperRect);", "+//\t\tOS.CGContextScaleCTM(context, 1, -1);", "+//\t\tOS.CGContextTranslateCTM(context, 0, -(float)(paperRect.bottom-paperRect.top));", "+//\t\tOS.CGContextSetStrokeColorSpace(context, colorspace);", "+//\t\tOS.CGContextSetFillColorSpace(context, colorspace);", "+//\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "636e2711c4e5acaa896ee283ac75c23f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "9ce3caf7099b0ff9960462568879f32784494b1f", "commitAfterChange": "b620cf6cc88ddbd1317abb72e435ea48ca4572d3", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["-\t\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 6, 0)) {", "-\t\t\t\thandle = OS.gtk_menu_tool_button_new (0, null);", "-\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\t/*", "-\t\t\t\t * Feature in GTK. The arrow button of DropDown tool-item is ", "-\t\t\t\t * disabled when it does not contain menu. The fix is to", "-\t\t\t\t * find the arrow button handle and enable it.", "-\t\t\t\t */", "-\t\t\t\tlong /*int*/ child = OS.gtk_bin_get_child (handle);", "-\t\t\t\tlong /*int*/ list = OS.gtk_container_get_children (child);", "-\t\t\t\tarrowHandle = OS.g_list_nth_data (list, 1);", "-\t\t\t\tOS.gtk_widget_set_sensitive (arrowHandle, true);", "-\t\t\t\tOS.gtk_widget_set_size_request(OS.gtk_bin_get_child(arrowHandle), 8, 6);", "-\t\t\t} else {", "-\t\t\t\t/*", "-\t\t\t\t * GTK does not support GtkMenuToolButton until 2.6.", "-\t\t\t\t * So, we try to emulate it on the un-supported version.", "-\t\t\t\t */", "-\t\t\t\thandle = OS.gtk_tool_button_new (0, null);", "-\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\tarrowBoxHandle = gtk_box_new (OS.GTK_ORIENTATION_HORIZONTAL, false, 0);", "-\t\t\t\tif (arrowBoxHandle == 0) error(SWT.ERROR_NO_HANDLES);", "-\t\t\t\tarrowHandle = OS.gtk_arrow_new (OS.GTK_ARROW_DOWN, OS.GTK_SHADOW_NONE);", "-\t\t\t\tif (arrowHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\tOS.gtk_widget_set_size_request (arrowHandle, 8, 6);", "-\t\t\t\tOS.gtk_container_add (arrowBoxHandle, labelHandle);\t", "-\t\t\t\tOS.gtk_container_add (arrowBoxHandle, arrowHandle);", "-\t\t\t\t/*", "-\t\t\t\t * As we are try to emulate GtkMenuToolButton and in order", "-\t\t\t\t * to display both the label and image, it is required", "-\t\t\t\t * the set the toolitem as important. This will entitle", "-\t\t\t\t * to display the label all the times.    ", "-\t\t\t\t */", "-\t\t\t\tOS.gtk_tool_item_set_is_important (handle, true);", "-\t\t\t}", "+\t\t\thandle = OS.gtk_menu_tool_button_new (0, null);", "+\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t/*", "+\t\t\t * Feature in GTK. The arrow button of DropDown tool-item is ", "+\t\t\t * disabled when it does not contain menu. The fix is to", "+\t\t\t * find the arrow button handle and enable it.", "+\t\t\t */", "+\t\t\tlong /*int*/ child = OS.gtk_bin_get_child (handle);", "+\t\t\tlong /*int*/ list = OS.gtk_container_get_children (child);", "+\t\t\tarrowHandle = OS.g_list_nth_data (list, 1);", "+\t\t\tOS.gtk_widget_set_sensitive (arrowHandle, true);", "+\t\t\tOS.gtk_widget_set_size_request(OS.gtk_bin_get_child(arrowHandle), 8, 6);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b3a4208ff8e4dff8c3544eecfe7796e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "df118cfee649740c3cfc2ab13c4b8610502d4d4e", "commitAfterChange": "49ca7a603b8ba36618c52950618a40e222d8f456", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  void releaseWidget ()", "signatureAfterChange": "  void releaseWidget ()", "diff": ["-\t\tmenu.destroyWidget ();", "-\t} else {", "-\t\tif ((parent.style & SWT.BAR) != 0) {", "-\t\t\tshort [] outIndex = new short [1];", "-\t\t\tif (OS.GetIndMenuItemWithCommandID (parent.handle, id, 1, null, outIndex) == OS.noErr) {", "-\t\t\t\tint [] outMenuRef = new int [1];", "-\t\t\t\tOS.GetMenuItemHierarchicalMenu (parent.handle, outIndex [0], outMenuRef);", "-\t\t\t\tif (outMenuRef [0] != 0) {", "-\t\t\t\t\tOS.DeleteMenu (OS.GetMenuID (outMenuRef [0]));", "-\t\t\t\t\tOS.DisposeMenu (outMenuRef [0]);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\tmenu.releaseHandle ();", "-\tif (this == parent.defaultItem) {", "-\t\tparent.defaultItem = null;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "829ab85846b2bc9a921ff09cfff34961", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/WebSite.java", "commitBeforeChange": "e9c811762751416cc44a67667a332572107d4583", "commitAfterChange": "e937f989f66a0c9adeb042797da58cef9a65f09a", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "  int MapUrlToZone(int pwszUrl, int pdwZone, int dwFlags)", "signatureAfterChange": "  int MapUrlToZone(int pwszUrl, int pdwZone, int dwFlags)", "diff": ["-int MapUrlToZone(int pwszUrl, int pdwZone, int dwFlags) {", "-\tint cnt = OS.wcslen(pwszUrl);", "-\tchar[] buffer = new char[cnt];", "-\t/* ", "-\t* Note.  pwszUrl is unicode on both unicode and ansi platforms.", "-\t* The nbr of chars is multiplied by the constant 2 and not by TCHAR.sizeof since", "-\t* TCHAR.sizeof returns 1 on ansi platforms.", "-\t*/", "-\tOS.MoveMemory(buffer, pwszUrl, cnt * 2);", "-\tString url = new String(buffer);", "-\t", "+int MapUrlToZone(int pwszUrl, int pdwZone, int dwFlags) {\t", "-\t*/", "-\tint zone = Browser.URLZONE_INTRANET;", "-\t", "-\t/*", "-\t* Note.  Some ActiveX plugins crash when executing", "-\t* inside the embedded explorer itself running into", "-\t* a JVM.  The current workaround is to detect when", "-\t* such ActiveX is about to be started and refuse", "-\t* to execute it.", "-\t* ActiveX blocked in an object tag:", "-\t* - Shockwave director plugin (mime: application/x-director)", "-\t* - Java plugin", "-\t*/", "-", "-\tif (url.startsWith(Browser.URL_DIRECTOR) ||", "-\t\t(url.startsWith(Browser.URL_JAVA) && url.indexOf(Browser.URL_CAB) != -1) ||", "-\t\t(url.startsWith(Browser.URL_JAVA_15) && url.indexOf(Browser.URL_CAB) != -1)) {", "-\t\tzone = Browser.URLZONE_LOCAL_MACHINE;", "-\t}", "-\tCOM.MoveMemory(pdwZone, new int[] {zone}, 4);", "+\t*/\t", "+\tCOM.MoveMemory(pdwZone, new int[] {Browser.URLZONE_INTRANET}, 4);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcdafd10f67a8c362d58f2533d3b7d9f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "f4bb8ef7d86d4b06d34d232ac624ae216be4183a", "commitAfterChange": "358e077459326bfde3a675b949aa20349d21bc3d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 8, "signatureBeforeChange": "  @Override void createHandle (int index)", "signatureAfterChange": "   @Override void createHandle (int index)", "diff": ["-void createHandle (int index) {", "-\tif ((style & SWT.CALENDAR) != 0) {", "-\t\tstate |= HANDLE;", "-\t\tfixedHandle = OS.g_object_new (display.gtk_fixed_get_type (), 0);", "-\t\tif (fixedHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tgtk_widget_set_has_window (fixedHandle, true);", "-\t\thandle = OS.gtk_calendar_new ();", "-\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tOS.gtk_container_add (fixedHandle, handle);", "-\t\tOS.gtk_calendar_set_display_options(handle, OS.GTK_CALENDAR_SHOW_HEADING | OS.GTK_CALENDAR_SHOW_DAY_NAMES);", "-\t} else {", "-\t\tsuper.createHandle(index);", "+", "+@Override", "+void createHandle (int index) {", "+\tcreateHandle ();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad26139e91f93b45260afe80c3beeaa5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "be7a6b56ec36f2937282f99ce8f6d3a09d752bb5", "commitAfterChange": "388089e4bec9dc7b9e91ccd2ec44faabbba9290c", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 48, "signatureBeforeChange": "  Rect inset ()", "signatureAfterChange": "  Rect inset ()", "diff": ["-\tif (OS.HIVIEW) {", "-\t\tif ((style & SWT.SINGLE) != 0 && (style & SWT.BORDER) == 0) {", "-\t\t\tRect rect = new Rect ();", "-\t\t\trect.left = rect.top = rect.right = rect.bottom = 1;", "-\t\t\treturn rect; ", "-\t\t}", "-\t\treturn new Rect ();", "+\tif ((style & SWT.SINGLE) != 0 && (style & SWT.BORDER) == 0) {", "+\t\tRect rect = new Rect ();", "+\t\trect.left = rect.top = rect.right = rect.bottom = 1;", "+\t\treturn rect; ", "-\tRect rect = new Rect ();", "-\tint [] outMetric = new int [1];", "-\tif (drawFocusRing ()) {", "-\t\tOS.GetThemeMetric (OS.kThemeMetricFocusRectOutset, outMetric);", "-\t\trect.left += outMetric [0];", "-\t\trect.top += outMetric [0];", "-\t\trect.right += outMetric [0];", "-\t\trect.bottom += outMetric [0];", "-\t}", "-\tif (hasBorder ()) {", "-\t\tOS.GetThemeMetric (OS.kThemeMetricEditTextFrameOutset, outMetric);", "-\t\trect.left += outMetric [0];", "-\t\trect.top += outMetric [0];", "-\t\trect.right += outMetric [0];", "-\t\trect.bottom += outMetric [0];", "-\t}", "-\treturn rect;\t", "+\treturn new Rect ();"]}], "num": 57221}
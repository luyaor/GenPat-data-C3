{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "afb5b6b8cd9a39540ab484b5c0a5d700", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40026e19ac812b6f878745afd3aee86f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "f4bc655ea4a4b248e43db670cad0235471c4a782", "commitAfterChange": "feee6c2c2fe2169ddc7162c0a719e37d04f2f7ba", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "  void setPen(int newColor, int newWidth, int lineStyle, int capStyle, int joinStyle, int[] dashes)", "signatureAfterChange": "  void setPen(int newColor, int newWidth, int lineStyle, int capStyle, int joinStyle, int[] dashes)", "diff": ["-\t\t* line width is widen.", "+\t\t* line width is widened.", "-\t\t/*", "-\t\t* Feature in Windows. PS_GEOMETRIC pens cannot have", "-\t\t* zero width. ", "-\t\t*/", "-\t\tif (newWidth == 0) newWidth = 1;", "+\t\tif (newWidth == 0 || newWidth == 1) {", "+\t\t\tif (dashes == null && (style & OS.PS_ENDCAP_MASK) == OS.PS_ENDCAP_FLAT && (style & OS.PS_JOIN_MASK) == OS.PS_JOIN_MITER) {", "+\t\t\t\tstyle &= ~(OS.PS_ENDCAP_MASK | OS.PS_JOIN_MASK | OS.PS_TYPE_MASK);", "+\t\t\t\textPen = false;", "+\t\t\t}", "+\t\t}", "-\t\tnewPen = OS.ExtCreatePen (style | OS.PS_GEOMETRIC, width, logBrush, dashes != null ? dashes.length : 0, dashes);", "+\t\t/* Feature in Windows. PS_GEOMETRIC pens cannot have zero width. */", "+\t\tnewPen = OS.ExtCreatePen (style | OS.PS_GEOMETRIC, Math.max(1, width), logBrush, dashes != null ? dashes.length : 0, dashes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c9e537fcd80c0c367165a2f389b8bcb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "d2b23ce77d0de5b5edbb1b403be8a419f0aeb8a4", "commitAfterChange": "2b888af12d27483b24d0a1bde566785233f1e6ba", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  RECT drawBorder(boolean advance, int graphics, int x, int y, int lineHeight, int color, int selectionColor, boolean fullSelection, RECT clipRect, RECT rect, int alpha, StyleItem[] line, int index, int selectionStart, int selectionEnd)", "signatureAfterChange": "  RECT drawBorder(boolean advance, int graphics, int x, int y, int lineHeight, int color, int selectionColor, boolean fullSelection, RECT clipRect, RECT rect, int alpha, StyleItem[] line, int index, int selectionStart, int selectionEnd)", "diff": ["-\tif (index + 1 >= line.length || line[index + 1].style != style) {", "+\tif (index + 1 >= line.length || !style.isAdherentBorder(line[index + 1].style)) {", "-\t\tfor (int i = index; i > 0 && line[i - 1].style == style; i--) {", "+\t\tfor (int i = index; i > 0 && style.isAdherentBorder(line[i - 1].style); i--) {", "-\t\t\tint /*long*/ newPen = OS.ExtCreatePen (lineStyle | OS.PS_GEOMETRIC, Math.max(1, lineWidth), logBrush, 0, null);", "+\t\t\tint /*long*/ newPen = OS.ExtCreatePen(lineStyle | OS.PS_GEOMETRIC, Math.max(1, lineWidth), logBrush, 0, null);"]}], "num": 26746}
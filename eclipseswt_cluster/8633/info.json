{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9f58a3a98f115dcd5c2eca31fa711ba6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16c830e08b7bd6a45cce1aa4efa92bd6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Slider.java", "commitBeforeChange": "045071fcdac47057b951289364c1190503389fc4", "commitAfterChange": "659d841b033b864efe4f5fce4abb5b8822188e47", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tcheckWidget ();", "-\t// We are interested in the preferred size.", "-\t// The native widget gives us what it thinks the minimum reasonable", "-\t// size; we'll say we prefer to be twice that long, and exactly", "-\t// that wide.", "-\tint x,y;", "-\tPoint size = super.computeSize (wHint, hHint, changed);", "-\tif (hHint==SWT.DEFAULT) {", "-\t\tx = size.x;", "-\t\tif ((style & SWT.HORIZONTAL) != 0) x = 2*x;", "-\t} else x = hHint;", "-\tif (wHint==SWT.DEFAULT) {", "-\t\ty = size.y;", "-\t\tif ((style & SWT.VERTICAL) != 0) y = 2*y;", "-\t} else y = wHint;", "-\t", "-\treturn new Point(x,y);", "+\tcheckWidget();", "+\tPoint size = computeNativeSize(handle, wHint, hHint, changed);", "+\tif ((style & SWT.HORIZONTAL) != 0) {", "+\t\tif (wHint == SWT.DEFAULT) size.x = 2 * size.x;", "+\t} else {", "+\t\tif (hHint == SWT.DEFAULT) size.y = 2 * size.y;", "+\t}", "+\treturn size;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86f12c94d293be49a789936220825bb4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "11d31cfcd46f7ddba8b45a9587232d34b5772fed", "commitAfterChange": "c2ca70ca89de07d0ce2b2e26b82f7a84f0d554a2", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " \t \tprivate void drawFrame(Object callData)", "signatureAfterChange": " \t \tprivate void drawFrame(Object callData)", "diff": ["-\t\t", "+", "-\t\t\t\tint b= 1;", "-\t\t\t\tbounds.set(0+b, 0+b, bounds.getWidth()-2*b, bounds.getHeight()-2*b);", "+\t\t\t\tbounds.setLocation(0, 0);", "+\t\t\t\tbounds.inset(FOCUS_BORDER, FOCUS_BORDER, FOCUS_BORDER, FOCUS_BORDER);", "-\t\t\t\t\tControl focus= getDisplay().getFocusControl();", "-\t\t\t\t\tboolean hasFocus= focus == this;", "-\t\t\t\t\t//System.out.println(\"drawFrame: \" + hasFocus);", "-\t\t\t\t\tOS.DrawThemeFocusRect(bounds.getData(), hasFocus);", "+\t\t\t\t\tOS.DrawThemeFocusRect(bounds.getData(), false);", "+\t\t\t\t\tif (getDisplay().getFocusControl() == this)", "+\t\t\t\t\t\tOS.DrawThemeFocusRect(bounds.getData(), true);"]}], "num": 8633}
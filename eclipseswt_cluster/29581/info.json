{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52a10d344a1edc1aaf44087e019bdd3c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "442c6113fc1eb05d7003b30cffd1f961", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "df55805e4a74ab0fc8f545a1792d755c95a4e419", "commitAfterChange": "b178ded274cefa13fff8fc6fb8115ee14a844dc8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void copyArea(int srcX, int srcY, int width, int height, int destX, int destY, boolean paint)", "signatureAfterChange": " public void copyArea(int srcX, int srcY, int width, int height, int destX, int destY, boolean paint)", "diff": ["-\t\t\t\tGdkRectangle srcRect = new GdkRectangle ();", "-\t\t\t\tsrcRect.x = srcX;", "-\t\t\t\tsrcRect.y = srcY;", "-\t\t\t\tsrcRect.width = width;", "-\t\t\t\tsrcRect.height = height;", "-\t\t\t\tlong /*int*/ copyRegion = OS.gdk_region_rectangle (srcRect);", "-\t\t\t\tOS.gdk_region_intersect(copyRegion, visibleRegion);", "-\t\t\t\tlong /*int*/ invalidateRegion = OS.gdk_region_rectangle (srcRect);\t", "-\t\t\t\tOS.gdk_region_subtract (invalidateRegion, visibleRegion);", "-\t\t\t\tOS.gdk_region_offset (invalidateRegion, deltaX, deltaY);", "-\t\t\t\tOS.gdk_window_invalidate_region(drawable, invalidateRegion, false);", "-\t\t\t\tOS.gdk_region_destroy (visibleRegion);", "-\t\t\t\tOS.gdk_region_destroy (copyRegion);", "-\t\t\t\tOS.gdk_region_destroy (invalidateRegion);", "+\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION(3, 0, 0)) {", "+\t\t\t\t\tcairo_rectangle_int_t srcRect = new cairo_rectangle_int_t ();", "+\t\t\t\t\tsrcRect.x = srcX;", "+\t\t\t\t\tsrcRect.y = srcY;", "+\t\t\t\t\tsrcRect.width = width;", "+\t\t\t\t\tsrcRect.height = height;", "+\t\t\t\t\tlong /*int*/ copyRegion = Cairo.cairo_region_create_rectangle (srcRect);", "+\t\t\t\t\tCairo.cairo_region_intersect (copyRegion, visibleRegion);", "+\t\t\t\t\tlong /*int*/ invalidateRegion = Cairo.cairo_region_create_rectangle (srcRect);", "+\t\t\t\t\tCairo.cairo_region_subtract (invalidateRegion, visibleRegion);", "+\t\t\t\t\tCairo.cairo_region_translate (invalidateRegion, deltaX, deltaY);", "+\t\t\t\t\tOS.gdk_window_invalidate_region(drawable, invalidateRegion, false);", "+\t\t\t\t\tCairo.cairo_region_destroy (visibleRegion);", "+\t\t\t\t\tCairo.cairo_region_destroy (copyRegion);", "+\t\t\t\t\tCairo.cairo_region_destroy (invalidateRegion);", "+\t\t\t\t} else {", "+\t\t\t\t\tGdkRectangle srcRect = new GdkRectangle ();", "+\t\t\t\t\tsrcRect.x = srcX;", "+\t\t\t\t\tsrcRect.y = srcY;", "+\t\t\t\t\tsrcRect.width = width;", "+\t\t\t\t\tsrcRect.height = height;", "+\t\t\t\t\tlong /*int*/ copyRegion = OS.gdk_region_rectangle (srcRect);", "+\t\t\t\t\tOS.gdk_region_intersect (copyRegion, visibleRegion);", "+\t\t\t\t\tlong /*int*/ invalidateRegion = OS.gdk_region_rectangle (srcRect);", "+\t\t\t\t\tOS.gdk_region_subtract (invalidateRegion, visibleRegion);", "+\t\t\t\t\tOS.gdk_region_offset (invalidateRegion, deltaX, deltaY);", "+\t\t\t\t\tOS.gdk_window_invalidate_region(drawable, invalidateRegion, false);", "+\t\t\t\t\tOS.gdk_region_destroy (visibleRegion);", "+\t\t\t\t\tOS.gdk_region_destroy (copyRegion);", "+\t\t\t\t\tOS.gdk_region_destroy (invalidateRegion);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a06c1ff5b9c9d14e78347b084007051a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "dbb652fe193019d96be9d6af80af3f6e1918e181", "commitAfterChange": "a9865ce41544b9634fe7b5cf08a114ae91a2faeb", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  static String kde_getMimeTypeCommand(String mimeType)", "signatureAfterChange": "  static Program kde_getProgram(Display display, String mimeType)", "diff": ["+", "+static Program kde_getProgram(Display display, String mimeType) {", "+\tProgram program = null;", "+\t/* Use the character encoding for the default locale */", "+\tbyte[] buffer = Converter.wcsToMbcs(null, mimeType, true);", "+\tint /*long*/ mimeTypeName = KDE.QString_new(buffer);", "+\tint /*long*/ serviceList = KDE.KMimeType_offers(mimeTypeName);", "+\tif (serviceList != 0) {", "+\t\tKDE.KServiceList_delete(serviceList);", "+\t\tprogram = new Program();", "+\t\tprogram.display = display;", "+\t\tprogram.name = mimeType;", "+\t\tprogram.command = \"KRun::runURL(url,mimeType)\";", "+\t\tint /*long*/ kMimeType = KDE.KMimeType_mimeType(mimeTypeName);", "+\t\tif (kMimeType != 0) {", "+\t\t\tint /*long*/ mimeIcon = KDE.KMimeType_icon(kMimeType, 0, false);", "+\t\t\tint /*long*/ loader = KDE.KGlobal_iconLoader();", "+\t\t\tint /*long*/ path = KDE.KIconLoader_iconPath(loader, mimeIcon, KDE.KICON_SMALL, true);", "+\t\t\tprogram.iconPath = kde_convertQStringAndFree(path);", "+\t\t\tKDE.QString_delete(mimeIcon);", "+\t\t\tKDE.KMimeType_delete(kMimeType);", "+\t\t}", "+\t\t", "+\t}", "+\tKDE.QString_delete(mimeTypeName);", "+\treturn program;", "-", "-static String kde_getMimeTypeCommand(String mimeType) {", "-\t/* Use the character encoding for the default locale */", "-\tbyte[] buffer = Converter.wcsToMbcs(null, mimeType, true);", "-\tint qMimeType = KDE.QString_new(buffer);", "-\tint serviceList = KDE.KMimeType_offers(qMimeType);", "-\tKDE.QString_delete(qMimeType);", "-\tif (serviceList == 0) return null;", "-\tKDE.KServiceList_delete(serviceList);", "-\treturn \"KRun::runURL(url,mimeType)\";"]}], "num": 29581}
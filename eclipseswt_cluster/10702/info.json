{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "caf5dd019c3745173e5f01c6470e696f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3012db286a3412099f0586db9b4f576d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/AppFileLocProvider.java", "commitBeforeChange": "a2e5fa832165f5a47276264ef4f8d8a7fddf99c3", "commitAfterChange": "f9fb719ff3ba79c646f79b3803a1ec6e89424986", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  int getFile(int prop, int persistent, int _retval)", "signatureAfterChange": "  int getFile(int prop, int persistent, int _retval)", "diff": ["-\t\t// the following line is intentionally commented because", "-\t\t// it causes problems for Mozilla < 1.7", "-\t\t//propertyValue = profilePath;", "+\t\t/*", "+\t\t* Answering a value for this property causes problems in Mozilla versions", "+\t\t* < 1.7.  Unfortunately this property is queried early enough in the", "+\t\t* Browser creation process that the Mozilla version being used is not", "+\t\t* yet determined.  However it is known if XULRunner is being used or not.", "+\t\t* ", "+\t\t* For now answer a value for this property iff XULRunner is the GRE.", "+\t\t* If the range of Mozilla versions supported by the Browser is changed", "+\t\t* in the future to be >= 1.7 then this value can always be answered.  ", "+\t\t*/", "+\t\tif (isXULRunner) propertyValue = profilePath;", "-\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NULL_POINTER);", "+\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NO_INTERFACE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8e899f9c77fe3eebcb8e0125c49a591", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "a64332092eee09ca0e2a60966d4a0fae1dd0357a", "commitAfterChange": "5b5b7684e2a723201a7740aa93803e5513b0fc38", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 123, "signatureBeforeChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["-\t\t\t\t* When content is being streamed to Mozilla this is the only place", "-\t\t\t\t* where registered functions can be re-installed such that they will", "-\t\t\t\t* be invokable at load time by JS contained in the stream.", "+\t\t\t\t* For Mozilla < 1.9.2, when content is being set via nsIWebBrowserStream, this", "+\t\t\t\t* is the only place where registered functions can be re-installed such that", "+\t\t\t\t* they will be invokable at load time by JS contained in the text.", "+\t\t\t\t/* ", "+\t\t\t\t* For Mozilla >= 1.9.2, when content is being set via nsIWebBrowserStream,", "+\t\t\t\t* registered functions must be re-installed in the subsequent Start Request", "+\t\t\t\t* in order to be invokable at load time by JS contained in the text.", "+\t\t\t\t*/", "+\t\t\t\tregisterFunctionsOnState = nsIWebProgressListener.STATE_IS_REQUEST | nsIWebProgressListener.STATE_START;", "+\t\t\t} else {", "+\t\t\t\tregisterFunctionsOnState = 0;", "-", "-\t\tregisterFunctionsOnState = 0;"]}], "num": 10702}
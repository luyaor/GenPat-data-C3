{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "513b9793207519b02a3faafad3c062fd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bad79fe1ca5585c95e7246caab545e0e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/coolbar/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "527e849a2526f3d8802def278cb1e6f6d555176e", "commitAfterChange": "732b93a3746a83c09a87316a75d0a62edeb31a1a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r void processPaint (GC gc)", "signatureAfterChange": "\r void onPaint(Event event)", "diff": ["-void processPaint (GC gc) {\r", "-\tif (rows.size() == 0) return;", "+}\r", "+void onPaint(Event event) {\r", "+\tGC gc = event.gc;\r", "+\tif (items.length == 0) return;", "-\tint y = getRowHeight(0) + ROW_SPACING;\r", "-\tint stopX = getBounds().width;\r", "-\tfor (int i = 1; i < rows.size(); i++) {\r", "-\t\tgc.setForeground(shadowColor);\r", "-\t\tgc.drawLine(0, y, stopX, y);\t\r", "-\t\tgc.setForeground(highlightColor);\r", "-\t\tgc.drawLine(0, y + 1, stopX, y + 1);\r", "-\t\ty += getRowHeight(i) + ROW_SPACING;\r", "+\tColor lightShadowColor = display.getSystemColor(SWT.COLOR_WIDGET_LIGHT_SHADOW);\r", "+\r", "+\tint y = 0;\r", "+\tint stopX = getBounds().width;\r", "+\tfor (int row = 0; row < items.length; row++) {\r", "+\t\tRectangle bounds = new Rectangle(0, 0, 0, 0);\r", "+\t\tfor (int i = 0; i < items[row].length; i++) {\r", "+\t\t\tbounds = items[row][i].getBounds();\r", "+\t\t\tif (!gc.getClipping().intersects(bounds)) continue;\r", "+\t\t\tint grabberHeight = bounds.height - (2 * CoolItem.MARGIN_HEIGHT) - 1;\r", "+\t\r", "+\t\t\t/* Draw separator. */\r", "+\t\t\tgc.setForeground(shadowColor);\r", "+\t\t\tgc.drawLine(bounds.x, bounds.y, bounds.x, bounds.y + bounds.height - 1);\r", "+\t\t\tgc.setForeground(highlightColor);\r", "+\t\t\tgc.drawLine(bounds.x + 1, bounds.y, bounds.x + 1, bounds.y + bounds.height - 1);\r", "+\t\t\r", "+\t\t\t/* Draw grabber. */\r", "+\t\t\tgc.setForeground(shadowColor);\r", "+\t\t\tgc.drawRectangle(\r", "+\t\t\t\tbounds.x + CoolItem.MARGIN_WIDTH, \r", "+\t\t\t\tbounds.y + CoolItem.MARGIN_HEIGHT, \r", "+\t\t\t\t2, \r", "+\t\t\t\tgrabberHeight);\r", "+\t\t\tgc.setForeground(highlightColor);\r", "+\t\t\tgc.drawLine(\r", "+\t\t\t\tbounds.x + CoolItem.MARGIN_WIDTH, \r", "+\t\t\t\tbounds.y + CoolItem.MARGIN_HEIGHT + 1, \r", "+\t\t\t\tbounds.x + CoolItem.MARGIN_WIDTH, \r", "+\t\t\t\tbounds.y + CoolItem.MARGIN_HEIGHT + grabberHeight - 1);\r", "+\t\t\tgc.drawLine(\r", "+\t\t\t\tbounds.x + CoolItem.MARGIN_WIDTH, \r", "+\t\t\t\tbounds.y + CoolItem.MARGIN_HEIGHT, \r", "+\t\t\t\tbounds.x + CoolItem.MARGIN_WIDTH + 1, \r", "+\t\t\t\tbounds.y + CoolItem.MARGIN_HEIGHT);\r", "+\t\t}\r", "+\t\tif (row + 1 < items.length) {\r", "+\t\t\t/* Draw row separator. */\r", "+\t\t\tint separatorY = bounds.y + bounds.height;\r", "+\t\t\tgc.setForeground(shadowColor);\r", "+\t\t\tgc.drawLine(0, separatorY, stopX, separatorY);\t\r", "+\t\t\tgc.setForeground(highlightColor);\r", "+\t\t\tgc.drawLine(0, separatorY + 1, stopX, separatorY + 1);\t\t\t\r", "+\t\t}\r", "-\tgc.setForeground(getForeground());", "-\tgc.setBackground(getBackground());", "+\tgc.setForeground(getForeground());\r", "+\tgc.setBackground(getBackground());\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ddcd2699dfb4f983d00d9d369a30d6a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/coolbar/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "527e849a2526f3d8802def278cb1e6f6d555176e", "commitAfterChange": "732b93a3746a83c09a87316a75d0a62edeb31a1a", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 25, "signatureBeforeChange": "\r Point layout (int width, boolean resize)", "signatureAfterChange": "\r int layout (int width)", "diff": ["+int layout (int width) {\r", "+\tint y = 0, maxWidth = 0;\r", "+\tfor (int row = 0; row < items.length; row++) {\r", "+\t\tint count = items[row].length;\r", "+\t\tint available = width - count * CoolItem.MINIMUM_WIDTH;\r", "+\t\tif (available < 0) available = count * CoolItem.MINIMUM_WIDTH;\r", "+\t\tint x = 0;\r", "+\r", "+\t\t/* determine the height of the row */\r", "+\t\tint rowHeight = 0;\r", "+\t\tfor (int i = 0; i < items[row].length; i++) {\r", "+\t\t\tCoolItem item = items[row][i];\r", "+\t\t\tif (item.control != null) {\r", "+\t\t\t\trowHeight = Math.max(rowHeight, item.control.getSize().y);\r", "-}\r", "-Point layout (int width, boolean resize) {\r", "-\tint y = ROW_SPACING, maxWidth = 0;\r", "-\tfor (int i = 0; i < rows.size(); i++) {\r", "-\t\tVector row = (Vector) rows.elementAt(i);\r", "-\t\tint count = row.size();\r", "-\t\tif (count > 0) {\r", "-\t\t\tint available = width - count * CoolItem.MINIMUM_WIDTH;\r", "-\t\t\tif (available < 0) available = count * CoolItem.MINIMUM_WIDTH;\r", "-\t\t\tint x = 0, rowHeight = getRowHeight(i);\r", "-\t\t\tfor (int j = 0; j < count; j++) {\r", "-\t\t\t\tCoolItem child = (CoolItem) row.elementAt(j);\r", "-\t\t\t\tint newWidth = available + CoolItem.MINIMUM_WIDTH;\r", "-\t\t\t\tif (j + 1 < count) {\r", "-\t\t\t\t\tnewWidth = Math.min(newWidth, child.requestedWidth);\r", "-\t\t\t\t\tavailable -= (newWidth - CoolItem.MINIMUM_WIDTH);\r", "+\t\trowHeight += 2 * CoolItem.MARGIN_HEIGHT;\r", "+\t\tif (row > 0) y += ROW_SPACING;\r", "+\t\r", "+\t\t/* lay the items out */\r", "+\t\tfor (int i = 0; i < count; i++) {\r", "+\t\t\tCoolItem child = items[row][i];\r", "+\t\t\tint newWidth = available + CoolItem.MINIMUM_WIDTH;\r", "+\t\t\tif (i + 1 < count) {\r", "+\t\t\t\tnewWidth = Math.min(newWidth, child.requestedWidth);\r", "+\t\t\t\tavailable -= (newWidth - CoolItem.MINIMUM_WIDTH);\r", "+\t\t\t}\r", "+\t\t\tRectangle oldBounds = child.getBounds();\r", "+\t\t\tRectangle newBounds = new Rectangle(x, y, newWidth, rowHeight);\r", "+\t\t\tif (!oldBounds.equals(newBounds)) {\r", "+\t\t\t\tchild.setBounds(newBounds.x, newBounds.y, newBounds.width, newBounds.height);\r", "+\t\t\t\tRectangle damage = new Rectangle(0, 0, 0, 0);\r", "+\t\t\t\t/* Cases are in descending order from most area to redraw to least. */\r", "+\t\t\t\tif (oldBounds.y != newBounds.y) {\r", "+\t\t\t\t\tdamage = newBounds;\r", "+\t\t\t\t\tdamage.add(oldBounds);\r", "+\t\t\t\t\t/* Redraw the row separator as well. */\r", "+\t\t\t\t\tdamage.y -= ROW_SPACING;\r", "+\t\t\t\t\tdamage.height += 2 * ROW_SPACING;\r", "-\t\t\t\tif (resize) child.setBounds(x, y, newWidth, rowHeight);\r", "-\t\t\t\tx += resize ? newWidth : child.preferredWidth;\r", "-\t\t\t}\t\t\r", "-\t\t\tmaxWidth = Math.max(maxWidth, x);\r", "-\t\t\ty += ROW_SPACING + rowHeight;\r", "+\t\t\t\telse if (oldBounds.height != newBounds.height) {\r", "+\t\t\t\t\t/* \r", "+\t\t\t\t\t * Draw from the bottom of the gripper to the bottom of the new area.\r", "+\t\t\t\t\t * (Bottom of the gripper is -3 from the bottom of the item).\r", "+\t\t\t\t\t */\r", "+\t\t\t\t\tdamage.y = newBounds.y + Math.min(oldBounds.height, newBounds.height) - 3;\r", "+\t\t\t\t\tdamage.height = newBounds.y + newBounds.height + ROW_SPACING;\r", "+\t\t\t\t\tdamage.x = oldBounds.x;\r", "+\t\t\t\t\tdamage.width = oldBounds.width;\r", "+\t\t\t\t}\r", "+\t\t\t\telse if (oldBounds.x != newBounds.x) {\r", "+\t\t\t\t\t/* Redraw only the difference between the separators. */\r", "+\t\t\t\t\tdamage.x = Math.min(oldBounds.x, newBounds.x);\r", "+\t\t\t\t\tdamage.width = Math.abs(oldBounds.x - newBounds.x) + CoolItem.MINIMUM_WIDTH;\r", "+\t\t\t\t\tdamage.y = oldBounds.y;\r", "+\t\t\t\t\tdamage.height = oldBounds.height;\r", "+\t\t\t\t}\r", "+\t\t\t\tredraw(damage.x, damage.y, damage.width, damage.height, false);\r", "+\t\t\t}\r", "+\t\t\tx += newWidth;\r", "+\t\tmaxWidth = Math.max(maxWidth, x);\r", "+\t\ty += rowHeight;\r", "-\treturn new Point(maxWidth, y);\r", "+\treturn y;\r"]}], "num": 16807}
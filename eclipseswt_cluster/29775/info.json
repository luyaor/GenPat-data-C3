{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ead55ac71fef8616a3f2caf3dc6a567", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a779091352d97a45f647e40ec6f9061d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 57, "signatureBeforeChange": " final void redrawHandle (int x, int y, int width, int height, int widgetHandle, boolean all)", "signatureAfterChange": " final void redrawHandle (int x, int y, int width, int height, int widgetHandle, boolean all)", "diff": ["-\tRect r= new Rect();", "-\tOS.SetRect(r, (short)x, (short)y, (short)(x + width), (short)(y + height));", "-\tif (width <= 0 || height <= 0) {", "-\t\tOS.HIViewSetNeedsDisplay(widgetHandle, true);", "-\t\treturn;", "-\t\t//OS.GetControlBounds(widgetHandle, r.getData());", "+\t", "+\tif (false) {", "+\t\tint rgn= OS.NewRgn();", "+\t\tOS.RectRgn(rgn, new MacRect(x, y, width, height).getData());", "+\t\tOS.HIViewSetNeedsDisplayInRegion(widgetHandle, rgn, true);", "+\t\tOS.DisposeRgn(rgn);", "+\t} else {", "+\t\tMacRect br= new MacRect();", "+\t\tOS.GetControlBounds(widgetHandle, br.getData());", "+\t    if (!br.isEmpty()) {", "+\t        x+= br.getX();", "+\t        y+= br.getY();", "+\t        if (width == 0)", "+\t        \twidth= br.getWidth();", "+\t        else", "+\t\t\t\twidth+= 1; // AW strange workaround for Caret", "+\t        if (height == 0)", "+\t\t\t\theight= br.getHeight();", "+\t                ", "+\t        int rgn= OS.NewRgn();", "+\t        OS.RectRgn(rgn, new MacRect(x, y, width, height).getData());", "+\t                ", "+\t        int region= OS.NewRgn();", "+\t        if (MacUtil.getVisibleRegion(widgetHandle, region, all) == OS.kNoErr) {", "+\t        ", "+\t            OS.SectRgn(region, rgn, region);", "+\t        ", "+\t            OS.InvalWindowRgn(OS.GetControlOwner(widgetHandle), region);", "+\t        }", "+\t        ", "+\t        OS.DisposeRgn(rgn);", "+\t        OS.DisposeRgn(region);", "+\t    }", "-\tint rgn= OS.NewRgn();", "-\tOS.RectRgn(rgn, r);", "-\tOS.HIViewSetNeedsDisplayInRegion(widgetHandle, rgn, true);", "-\tOS.DisposeRgn(rgn);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed6e735059285b68e066be7a89448eee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet205.java", "commitBeforeChange": "20484d81041a6bb493003f692de13beee6ceb29f", "commitAfterChange": "789cafaaafd872de22048c1bf4e248615ee61318", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public static void main(String[] args)", "signatureAfterChange": " \t public static void main(String[] args)", "diff": ["+\tshell.setText(\"Embedding Objects in StyledText\");", "-\tString text = \"Embedded Images test, the first image is blue: \\uFFFC, the second one if magenta: \\uFFFC, and last one green: \\uFFFC.\";", "-\tfinal int[] offsets = {47, 77, 100};", "+\tfinal Button button = new Button(shell, SWT.PUSH);", "+\tbutton.setText(\"Button\");", "+\tbutton.pack();", "+\tString text = \"Here is some text with a blue image \\uFFFC, a magenta image \\uFFFC, a green image \\uFFFC, and a button: \\uFFFC.\";", "+\tfinal int[] imageOffsets = {36, 55, 72};", "-\t\tTextStyle imageStyle = new TextStyle (null, null, null);", "-\t\timageStyle.metrics = new GlyphMetrics (bounds.height, 0, bounds.width); ", "-\t\tlayout.setStyle(imageStyle, offsets[i], offsets[i]);", "+\t\tTextStyle imageStyle = new TextStyle(null, null, null);", "+\t\timageStyle.metrics = new GlyphMetrics(bounds.height, 0, bounds.width); ", "+\t\tlayout.setStyle(imageStyle, imageOffsets[i], imageOffsets[i]);", "-", "+\tRectangle bounds = button.getBounds();", "+\tTextStyle buttonStyle = new TextStyle(null, null, null);", "+\tbuttonStyle.metrics = new GlyphMetrics(bounds.height, 0, bounds.width); ", "+\tfinal int buttonOffset = text.length() - 2;", "+\tlayout.setStyle(buttonStyle, buttonOffset, buttonOffset);", "-\t\t\t\tint offset = offsets[i];", "+\t\t\t\tint offset = imageOffsets[i];", "+\t\t\tint lineIndex = layout.getLineIndex(buttonOffset);", "+\t\t\tFontMetrics lineMetrics = layout.getLineMetrics(lineIndex);", "+\t\t\tPoint point = layout.getLocation(buttonOffset, false);", "+\t\t\tGlyphMetrics glyphMetrics = layout.getStyle(buttonOffset).metrics;", "+\t\t\tbutton.setLocation(point.x + margin.x, point.y + margin.y + lineMetrics.getAscent() - glyphMetrics.ascent);", "-\tdisplay.dispose ();", "+\tdisplay.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41e1420e47c18f4d122c22b4a2df33c9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "f54e41448034ec247ad049d3a28f78159fa1e0ee", "commitAfterChange": "34c584c8119c0f52680701ebb1b115322f2f4505", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r public boolean open ()", "signatureAfterChange": "\r public boolean open ()", "diff": ["+\t\r", "+\tint ptrGrabResult = OS.XGrabPointer (\r", "+\t\txDisplay,\r", "+\t\txWindow,\r", "+\t\t0,\r", "+\t\tOS.ButtonPressMask | OS.ButtonReleaseMask | OS.PointerMotionMask,\r", "+\t\tOS.GrabModeAsync,\r", "+\t\tOS.GrabModeAsync,\r", "+\t\tOS.None,\r", "+\t\tOS.None,\r", "+\t\tOS.CurrentTime);\r", "+\tint kbdGrabResult = OS.XGrabKeyboard (\r", "+\t\txDisplay,\r", "+\t\txWindow,\r", "+\t\t0,\r", "+\t\tOS.GrabModeAsync,\r", "+\t\tOS.GrabModeAsync,\r", "+\t\tOS.CurrentTime);\r", "+\t\t\t\t\r", "-\t\t\t\t\tif (isDisposed ()) return false;\r", "+\t\t\t\t\tif (isDisposed ()) {\r", "+\t\t\t\t\t\tif (ptrGrabResult == OS.GrabSuccess) OS.XUngrabPointer (xDisplay, OS.CurrentTime);\r", "+\t\t\t\t\t\tif (kbdGrabResult == OS.GrabSuccess) OS.XUngrabKeyboard (xDisplay, OS.CurrentTime);\r", "+\t\t\t\t\t\treturn false;\r", "+\t\t\t\t\t}\r", "-\t\t\t\t\t\tif (isDisposed ()) return false;\r", "+\t\t\t\t\t\tif (isDisposed ()) {\r", "+\t\t\t\t\t\t\tif (ptrGrabResult == OS.GrabSuccess) OS.XUngrabPointer (xDisplay, OS.CurrentTime);\r", "+\t\t\t\t\t\t\tif (kbdGrabResult == OS.GrabSuccess) OS.XUngrabKeyboard (xDisplay, OS.CurrentTime);\r", "+\t\t\t\t\t\t\treturn false;\r", "+\t\t\t\t\t\t}\r", "+\tif (ptrGrabResult == OS.GrabSuccess) OS.XUngrabPointer (xDisplay, OS.CurrentTime);\r", "+\tif (kbdGrabResult == OS.GrabSuccess) OS.XUngrabKeyboard (xDisplay, OS.CurrentTime);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "285353d961c73f76634cf89b9f5b2983", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "db35a0fea379040e77b4418433132e2917cf7f22", "commitAfterChange": "3cace3c27d8d6053d1deaead90a985278fba8102", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " StyleItem[] merge (int items, int itemCount)", "signatureAfterChange": " StyleItem[] merge (int items, int itemCount)", "diff": ["+\tboolean merge = itemCount > TOO_MANY_RUNS;", "+\tSCRIPT_PROPERTIES sp = new SCRIPT_PROPERTIES();", "+\t\t\tif (nextItemIndex < itemCount && merge) {", "+\t\t\t\tif (!item.lineBreak) {", "+\t\t\t\t\tOS.MoveMemory(sp, device.scripts[item.analysis.eScript], SCRIPT_PROPERTIES.sizeof);", "+\t\t\t\t\tif (!sp.fComplex || item.tab) {", "+\t\t\t\t\t\tfor (int i = 0; i < MERGE_MAX; i++) {", "+\t\t\t\t\t\t\tif (nextItemIndex == itemCount) break;", "+\t\t\t\t\t\t\tchar c = segmentsText.charAt(itemLimit);", "+\t\t\t\t\t\t\tif (c == '\\n' || c == '\\r') break;", "+\t\t\t\t\t\t\tif (c == '\\t' != item.tab) break;", "+\t\t\t\t\t\t\tOS.MoveMemory(sp, device.scripts[scriptItem.a.eScript], SCRIPT_PROPERTIES.sizeof);", "+\t\t\t\t\t\t\tif (!item.tab && sp.fComplex) break;", "+\t\t\t\t\t\t\tnextItemIndex++;", "+\t\t\t\t\t\t\tOS.MoveMemory(scriptItem, items + nextItemIndex * SCRIPT_ITEM.sizeof, SCRIPT_ITEM.sizeof);", "+\t\t\t\t\t\t\titemLimit = scriptItem.iCharPos;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e917585fd0e648ad2b56e38b92c4fa89", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "26aa979781f0037710304353201abd8b6f8f299c", "commitAfterChange": "f19b0105ae672d2b363d1f662e3dcd851e30b426", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r int copyPhImage(int image)", "signatureAfterChange": "\r \r int copyPhImage(int image)", "diff": ["-\tint imageHandle = OS.PiDuplicateImage (image, 0);\r", "-\t/* Bug in Photon - The image returned by PiDuplicateImage\r", "-\thas the same mask_bm as the original image.\r", "+\tint newImage = OS.PiDuplicateImage (image, 0);\r", "+\r", "+\t/*\r", "+\t* Bug in Photon.  The image returned by PiDuplicateImage might\r", "+\t* have the same mask_bm/alpha as the original image.  The fix\r", "+\t* is to detect this case and copy mask_bm/alpha if necessary.\r", "-\tOS.memmove (phImage, imageHandle, PhImage_t.sizeof);\r", "-\tif (phImage.mask_bm != 0) {\r", "-\t\tint length = phImage.mask_bpl * phImage.size_h;\r", "-\t\tint ptr = OS.malloc (length);\r", "-\t\tOS.memmove(ptr, phImage.mask_bm, length);\r", "-\t\tphImage.mask_bm = ptr;\r", "-\t\tOS.memmove (imageHandle, phImage, PhImage_t.sizeof);\r", "+\tOS.memmove (phImage, image, PhImage_t.sizeof);\r", "+\tPhImage_t newPhImage = new PhImage_t();\r", "+\tOS.memmove(newPhImage, newImage, PhImage_t.sizeof);\r", "+\tif (newPhImage.mask_bm != 0 && phImage.mask_bm == newPhImage.mask_bm) {\r", "+\t\tint length = newPhImage.mask_bpl * newPhImage.size_h;\r", "+\t\tint ptr = OS.malloc(length);\r", "+\t\tOS.memmove(ptr, newPhImage.mask_bm, length);\r", "+\t\tnewPhImage.mask_bm = ptr;\r", "-\treturn imageHandle;\r", "+\tif (newPhImage.alpha != 0 && phImage.alpha == newPhImage.alpha) {\r", "+\t\tPgAlpha_t alpha = new PgAlpha_t();\r", "+\t\tOS.memmove(alpha, phImage.alpha, PgAlpha_t.sizeof);\r", "+\t\tif (alpha.src_alpha_map_map != 0) {\r", "+\t\t\tint length = alpha.src_alpha_map_bpl * alpha.src_alpha_map_dim_h;\r", "+\t\t\tint ptr = OS.malloc(length);\r", "+\t\t\tOS.memmove(ptr, alpha.src_alpha_map_map, length);\r", "+\t\t\talpha.src_alpha_map_map = ptr;\r", "+\t\t}\r", "+\t\tint ptr = OS.malloc(PgAlpha_t.sizeof);\r", "+\t\tOS.memmove(ptr, alpha, PgAlpha_t.sizeof);\r", "+\t\tnewPhImage.alpha = ptr;\r", "+\t}\r", "+\tOS.memmove(newImage, newPhImage, PhImage_t.sizeof);\r", "+\treturn newImage;\r"]}], "num": 29775}
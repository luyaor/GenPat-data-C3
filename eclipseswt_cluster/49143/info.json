{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "348172865a00a6f057c78e847af29295", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "868bc2ad9669722a9a6d5b8d675e43e5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "f4bb8ef7d86d4b06d34d232ac624ae216be4183a", "commitAfterChange": "358e077459326bfde3a675b949aa20349d21bc3d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 14, "signatureBeforeChange": "  void createDropDownButton()", "signatureAfterChange": "  void createDropDownButton ()", "diff": ["-void createDropDownButton() {", "-\tdown = new Button(this, SWT.ARROW  | SWT.DOWN);", "-\tgtk_widget_set_can_focus (down.handle, false);", "-\tdown.addListener(SWT.Selection, new Listener() {", "-\t\tpublic void handleEvent(Event event) {", "-\t\t\tboolean dropped = isDropped();", "-\t\t\tpopupCalendar.calendarDisplayed = !dropped;", "-\t\t\tsetFocus();", "-\t\t\tdropDownCalendar (!dropped);", "-\t\t}", "-\t});", "-", "-\tpopupListener = new Listener () {", "-\t\tpublic void handleEvent (Event event) {", "-\t\t\tif (event.widget == popupShell) {", "-\t\t\t\tpopupShellEvent (event);", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tif (event.widget == popupCalendar) {", "-\t\t\t\tpopupCalendarEvent (event);", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tif (event.widget == DateTime.this) {", "-\t\t\t\tonDispose (event);", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tif (event.widget == getShell ()) {", "-\t\t\t\tgetDisplay().asyncExec(new Runnable() {", "-\t\t\t\t\tpublic void run() {", "-\t\t\t\t\t\tif (isDisposed()) return;", "-\t\t\t\t\t\thandleFocus (SWT.FocusOut);", "-\t\t\t\t\t}", "-\t\t\t\t});", "-\t\t\t}", "-\t\t}", "-\t};", "-\tpopupFilter = new Listener() {", "-\t\tpublic void handleEvent(Event event) {", "-\t\t\tShell shell = ((Control)event.widget).getShell ();", "-\t\t\tif (shell == DateTime.this.getShell ()) {", "-\t\t\t\thandleFocus (SWT.FocusOut);", "-\t\t\t}", "-\t\t}", "-\t};", "-}", "+", "+void createDropDownButton () {", "+\tdown = new Button (this, SWT.ARROW  | SWT.DOWN);", "+\tgtk_widget_set_can_focus (down.handle, false);", "+\tdown.addListener (SWT.Selection, new Listener () {", "+\t\tpublic void handleEvent (Event event) {", "+\t\t\tpopupCalendar.calendarDisplayed = !isDropped ();", "+\t\t\tsetFocus ();", "+\t\t\tdropDownCalendar (!isDropped ());", "+\t\t}", "+\t});", "+", "+\tpopupListener = new Listener () {", "+\t\tpublic void handleEvent (Event event) {", "+\t\t\tif (event.widget == popupShell) {", "+\t\t\t\tpopupShellEvent (event);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tif (event.widget == popupCalendar) {", "+\t\t\t\tpopupCalendarEvent (event);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tif (event.widget == DateTime.this) {", "+\t\t\t\tonDispose (event);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tif (event.widget == getShell ()) {", "+\t\t\t\tgetDisplay ().asyncExec (new Runnable () {", "+\t\t\t\t\tpublic void run () {", "+\t\t\t\t\t\tif (isDisposed ()) return;", "+\t\t\t\t\t\thandleFocus (SWT.FocusOut);", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t}", "+\t\t}", "+\t};", "+\tpopupFilter = new Listener () {", "+\t\tpublic void handleEvent (Event event) {", "+\t\t\tShell shell = ((Control)event.widget).getShell ();", "+\t\t\tif (shell == DateTime.this.getShell ()) {", "+\t\t\t\thandleFocus (SWT.FocusOut);", "+\t\t\t}", "+\t\t}", "+\t};", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c5deccabafc255fd9cac8cbddc7a641", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet277.java", "commitBeforeChange": "df88720ffacc1e4aedc46ad9c7993c18542607af", "commitAfterChange": "2714d1aedfa884938b6f4895d2c057e3d1f79ae1", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "  \tstatic nsITransfer createTransfer ()", "signatureAfterChange": "  \tstatic nsITransfer createTransfer ()", "diff": ["-\t\t\t\t\tnsICancelable = null;", "-\t\t\t\t\tcancelButton.setEnabled (false);", "-\t\t\t\t\tstatusLabel.setData (\"\");", "-\t\t\t\t\tstatusLabel.setText (\"\");", "+\t\t\t\t\tremoveFromTable ();", "-\t\t\t\tString string = (String)statusLabel.getData () + \" (\" + currentKBytes + \"/\" + totalKBytes + \")\";", "-\t\t\t\tstatusLabel.setText (string);", "+\t\t\t\ttableItem.setText (1, baseString + \" (\" + currentKBytes + \"/\" + totalKBytes + \")\");", "+\t\t\t\ttable.getColumn (1).pack ();", "-\t\t\tpublic void init (nsIURI source, nsIURI target, String displayName, nsIMIMEInfo MIMEInfo, double startTime, nsILocalFile tempFile, nsICancelable cancelable) {", "-\t\t\t\tnsICancelable = cancelable;", "-\t\t\t\tcancelButton.setEnabled (true);", "-\t\t\t\tString string = \"Downloading \" + source.getSpec () + \" to \" + target.getSpec ();", "-\t\t\t\tstatusLabel.setData (string);", "-\t\t\t\tstatusLabel.setText (string);", "+\t\t\tpublic void init (nsIURI source, nsIURI target, String displayName, nsIMIMEInfo MIMEInfo, double startTime, nsILocalFile tempFile, final nsICancelable cancelable) {", "+\t\t\t\ttableItem = new TableItem (table, SWT.NONE);", "+\t\t\t\tbutton = new Button (table, SWT.PUSH);", "+\t\t\t\tbutton.setText (\"Cancel\");", "+\t\t\t\tbutton.pack ();", "+\t\t\t\tbutton.addListener (SWT.Selection, new Listener () {", "+\t\t\t\t\tpublic void handleEvent (Event event) {", "+\t\t\t\t\t\tcancelable.cancel (Mozilla.NS_ERROR_ABORT);", "+\t\t\t\t\t\tremoveFromTable ();", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t\tTableEditor editor = new TableEditor (table);", "+\t\t\t\teditor.setEditor (button, tableItem, 0);", "+\t\t\t\teditor.minimumWidth = button.computeSize (SWT.DEFAULT, SWT.DEFAULT).x;", "+\t\t\t\tbaseString = \"Downloading to \" + target.getPath ();", "+\t\t\t\ttableItem.setText (1, baseString);", "+\t\t\t\tif (table.getItemCount () == 1) {", "+\t\t\t\t\t((GridData)table.getLayoutData ()).exclude = false;\t/* show the table */", "+\t\t\t\t\ttable.getColumn (0).setWidth (editor.minimumWidth);", "+\t\t\t\t}", "+\t\t\t\ttable.getColumn (1).pack ();", "+\t\t\t\ttable.getShell ().pack ();", "+", "+\t\t\t/* the following are not part of the nsITransfer interface but are here for the snippet's convenience */", "+\t\t\tButton button;", "+\t\t\tTableItem tableItem;", "+\t\t\tString baseString;", "+", "+\t\t\tvoid removeFromTable () {", "+\t\t\t\ttableItem.dispose ();", "+\t\t\t\tbutton.dispose ();", "+\t\t\t\tif (table.getItemCount () == 0) {", "+\t\t\t\t\t((GridData)table.getLayoutData ()).exclude = true;\t/* hide the table */", "+\t\t\t\t}", "+\t\t\t\ttable.getColumn (1).pack ();", "+\t\t\t\ttable.getShell ().pack ();", "+\t\t\t}"]}], "num": 49143}
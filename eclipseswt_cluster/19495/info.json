{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85a49ae1be0a1238a8e9949687ecc892", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fd12eda989fe2f430a036f50e9e3a87", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "444917b413ab57ed5d6b6ade8c5b5c63d6e5c5c4", "commitAfterChange": "0d91639586859ce4261d393e72ea9fbc2b8ece3c", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " \t \tvoid sendEvent(int event, int childID, Object eventData)", "signatureAfterChange": " \t \tvoid sendEvent(int event, Object eventData)", "diff": ["-\tvoid sendEvent(int event, int childID, Object eventData) {", "+\tvoid sendEvent(int event, Object eventData) {", "-\t\t\t\t//TODO - needs to have old and new state", "+\t\t\t\t//TODO needs the state that changed", "+//\t\t\t\tOS.g_signal_emit_by_name (handle, ATK.state_change, );", "+\t\t\t\t//TODO needs the new bounds", "+//\t\t\t\tOS.g_signal_emit_by_name (handle, ATK.bounds_changed);", "+\t\t\t\tOS.g_signal_emit_by_name (handle, ATK.load_complete);", "+\t\t\t\tOS.g_signal_emit_by_name (handle, ATK.load_stopped);", "+\t\t\t\tOS.g_signal_emit_by_name (handle, ATK.reload);", "+\t\t\t\tOS.g_object_notify(handle, ATK.end_index);", "+\t\t\t\tOS.g_object_notify(handle, ATK.number_of_anchors);", "+\t\t\t\tOS.g_object_notify(handle, ATK.selected_link);", "+\t\t\t\tOS.g_object_notify(handle, ATK.start_index);", "+\t\t\t\tOS.g_signal_emit_by_name (handle, ATK.link_activated);", "+\t\t\t\t//TODO needs the index the link that was selected", "+//\t\t\t\tOS.g_signal_emit_by_name (handle, ATK.link_selected);", "+\t\t\t\tOS.g_object_notify(handle, ATK.accessible_hypertext_nlinks);", "+\t\t\t\tOS.g_signal_emit_by_name (handle, ATK.attributes_changed);", "+\t\t\t\tOS.g_object_notify(handle, ATK.accessible_table_caption_object);", "+\t\t\t\tOS.g_object_notify(handle, ATK.accessible_table_column_description);", "+\t\t\t\tOS.g_object_notify(handle, ATK.accessible_table_column_header);", "-\t\t\tcase ACC.EVENT_TABLE_CHANGED:", "+\t\t\tcase ACC.EVENT_TABLE_CHANGED: {", "+\t\t\t\tif (!(eventData instanceof int[])) break;", "+\t\t\t\tint[] array = (int[])eventData;", "+\t\t\t\tint type =  array[0];", "+\t\t\t\tint rowStart = array[1];", "+\t\t\t\tint rowCount = array[2];", "+\t\t\t\tint columnStart = array[3];", "+\t\t\t\tint columnCount = array[4];", "+\t\t\t\tswitch (type) {", "+\t\t\t\t\tcase ACC.DELETE:", "+\t\t\t\t\t\tif (rowCount > 0) OS.g_signal_emit_by_name (handle, ATK.row_deleted, rowStart, rowCount);", "+\t\t\t\t\t\tif (columnCount > 0) OS.g_signal_emit_by_name (handle, ATK.column_deleted, columnStart, columnCount);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase ACC.INSERT:", "+\t\t\t\t\t\tif (rowCount > 0) OS.g_signal_emit_by_name (handle, ATK.row_inserted, rowStart, rowCount);", "+\t\t\t\t\t\tif (columnCount > 0) OS.g_signal_emit_by_name (handle, ATK.column_inserted, columnStart, columnCount);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t\tOS.g_object_notify(handle, ATK.accessible_table_row_description);", "+\t\t\t\tOS.g_object_notify(handle, ATK.accessible_table_row_header);", "+\t\t\t\tOS.g_object_notify(handle, ATK.accessible_table_summary);", "+\t\t\t\tOS.g_signal_emit_by_name (handle, ATK.text_attributes_changed);", "-\t\t\t\tbreak;", "+\t\t\t\t//TODO needs the new position of the caret", "+\t\t\t\tOS.g_signal_emit_by_name (handle, ATK.text_caret_moved);", "-\t\t\tcase ACC.EVENT_TEXT_CHANGED:", "+\t\t\tcase ACC.EVENT_TEXT_CHANGED: {", "+\t\t\t\tif (!(eventData instanceof Object[])) break;", "+\t\t\t\tObject[] data = (Object[])eventData;", "+\t\t\t\tint type = ((Integer)data[0]).intValue();", "+\t\t\t\tint start = ((Integer)data[1]).intValue();", "+\t\t\t\tint end = ((Integer)data[2]).intValue();", "+\t\t\t\tswitch (type) {", "+\t\t\t\t\tcase ACC.DELETE:", "+\t\t\t\t\t\tOS.g_signal_emit_by_name (handle, ATK.text_changed_delete, start, end -start);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase ACC.INSERT:", "+\t\t\t\t\t\tOS.g_signal_emit_by_name (handle, ATK.text_changed_insert, start, end -start);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c40d6124174d5d2d345c30dcc680117c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "aa18f3accd80eff265f1d8e33eb5ad4979b7674e", "commitAfterChange": "49c0b804a79ac30f301e8fb0f31e7a8dd1b6578e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "  void HandlePreviewKeyDown (int sender, int e)", "signatureAfterChange": "  void HandlePreviewKeyDown (int sender, int e)", "diff": ["-void HandlePreviewKeyDown (int sender, int e) {", "-\tsuper.HandlePreviewKeyDown (sender, e);", "-\t//TODO", "+void HandlePreviewKeyDown (int sender, int e) {", "+\tsuper.HandlePreviewKeyDown (sender, e);", "+\tif (!checkEvent (e)) return;", "+\tint key = OS.KeyEventArgs_Key (e);", "+\tswitch (key) {", "+\t\tcase OS.Key_Left:", "+\t\tcase OS.Key_Right:", "+\t\tcase OS.Key_Up:", "+\t\tcase OS.Key_Down:", "+\t\t\tint xChange = 0, yChange = 0;", "+\t\t\tint stepSize = PAGE_INCREMENT;", "+\t\t\tint keyboardDevice = OS.KeyboardEventArgs_KeyboardDevice(e);", "+\t\t\tint modifiers = OS.KeyboardDevice_Modifiers(keyboardDevice);", "+\t\t\tOS.GCHandle_Free(keyboardDevice);", "+\t\t\tif ((modifiers & OS.ModifierKeys_Control) != 0) stepSize = INCREMENT;", "+\t\t\tif ((style & SWT.VERTICAL) != 0) {", "+\t\t\t\tif (key == OS.Key_Up || key == OS.Key_Down) break;", "+\t\t\t\txChange = key == OS.Key_Left ? -stepSize : stepSize;", "+\t\t\t} else {", "+\t\t\t\tif (key == OS.Key_Left || key == OS.Key_Right) break;", "+\t\t\t\tyChange = key == OS.Key_Up ? -stepSize : stepSize;", "+\t\t\t}", "+\t\t\t", "+\t\t\tRectangle bounds = getBounds ();", "+\t\t\tint width = bounds.width, height = bounds.height;", "+\t\t\tRectangle parentBounds = parent.getBounds ();", "+\t\t\tint parentWidth = parentBounds.width;", "+\t\t\tint parentHeight = parentBounds.height;", "+\t\t\tint newX = lastX, newY = lastY;", "+\t\t\tif ((style & SWT.VERTICAL) != 0) {", "+\t\t\t\tnewX = Math.min (Math.max (0, lastX + xChange), parentWidth - width);", "+\t\t\t} else {", "+\t\t\t\tnewY = Math.min (Math.max (0, lastY + yChange), parentHeight - height);", "+\t\t\t}", "+\t\t\tif (newX == lastX && newY == lastY) return;", "+\t\t\tEvent event = new Event ();", "+\t\t\tevent.x = newX;", "+\t\t\tevent.y = newY;", "+\t\t\tevent.width = width;", "+\t\t\tevent.height = height;", "+\t\t\tsendEvent (SWT.Selection, event);", "+\t\t\tif (isDisposed ()) break;", "+\t\t\tif (event.doit) {", "+\t\t\t\tsetBounds (event.x, event.y, width, height);", "+\t\t\t\tif (isDisposed ()) break;", "+\t\t\t\tlastX = event.x;", "+\t\t\t\tlastY = event.y;", "+\t\t\t\tif (isDisposed ()) return;", "+\t\t\t\tint cursorX = event.x, cursorY = event.y;", "+\t\t\t\tif ((style & SWT.VERTICAL) != 0) {", "+\t\t\t\t\tcursorY += height / 2;", "+\t\t\t\t} else {", "+\t\t\t\t\tcursorX += width / 2;", "+\t\t\t\t}", "+\t\t\t\tdisplay.setCursorLocation (parent.toDisplay (cursorX, cursorY));", "+\t\t\t}", "+\t\t\tOS.RoutedEventArgs_Handled(e, true);", "+\t\t\tbreak;", "+\t}\t"]}], "num": 19495}
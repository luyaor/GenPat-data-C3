{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00f87f9ee59a44cb133e35df1e4b52d6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aaac851cd2b22a5ed5b46624a92a0c2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "7f1555a570e0630345de4a3befbd9ab7828e99f7", "commitAfterChange": "d9938ffe936060d86e28a5c1d8df54b2cab1524f", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " void paint(GC gc, Point paintPosition, TableColumn column)", "signatureAfterChange": " void paint(GC gc, Point paintPosition, TableColumn column)", "diff": ["-", "+\tTable parent = getParent ();", "+\tint itemHeight = parent.getItemHeight ();", "+\t", "+\t}", "+\tColor background = gc.getBackground();", "+\tif (!isSelected() || ((parent.getStyle() & SWT.HIDE_SELECTION) != 0 && !parent.isFocusControl())) {", "+\t\tint width = column.getBounds().width;", "+\t\tint height = itemHeight;", "+\t\tgc.setBackground(getBackground(columnIndex));", "+\t\tgc.fillRectangle(paintPosition.x, paintPosition.y, width, height);", "+\t} else {", "+\t\tif (columnIndex == TableColumn.FIRST) {", "+\t\t\tint width = getImageIndentPixel();", "+\t\t\tint height = itemHeight;", "+\t\t\tgc.setBackground(getBackground (columnIndex));", "+\t\t\tgc.fillRectangle(paintPosition.x, paintPosition.y, width, height);", "+\t\t} else {", "+\t\t\tif ((parent.getStyle() & SWT.FULL_SELECTION) == 0) {", "+\t\t\t\tint width = column.getBounds ().width;", "+\t\t\t\tint height = itemHeight;", "+\t\t\t\tgc.setBackground(getBackground (columnIndex));", "+\t\t\t\tgc.fillRectangle(paintPosition.x, paintPosition.y, width, height);", "+\t\t\t}", "+\t\t}", "+\tgc.setBackground(background);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4e3f8da91455befe0ec48669982c933", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "7f1555a570e0630345de4a3befbd9ab7828e99f7", "commitAfterChange": "d9938ffe936060d86e28a5c1d8df54b2cab1524f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " Point drawImage(GC gc, Point destinationPosition, int index)", "signatureAfterChange": " Point drawImage(GC gc, Point destinationPosition, int index)", "diff": ["+\tint itemHeight = parent.getItemHeight();", "-\t\t// full row select would obscure transparent images in all but the first column", "-\t\t// so always clear the image area in this case. Fixes 1FYNITC", "-\t\tif ((parent.getStyle() & SWT.FULL_SELECTION) != 0 && index != TableColumn.FIRST) {", "+\t\tif (index == TableColumn.FIRST){", "+\t\t\tgc.setBackground(getBackground(index));", "-\t\t\t\tdestinationImageExtent.x, destinationImageExtent.y);", "+\t\t\t\tdestinationImageExtent.x, itemHeight);", "+\t\t} else {", "+\t\t\t// full row select would obscure transparent images in all but the first column", "+\t\t\t// so always clear the image area in this case. Fixes 1FYNITC", "+\t\t\tif ((parent.getStyle() & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\tgc.fillRectangle(", "+\t\t\t\t\tdestinationPosition.x, destinationPosition.y,\t\t\t", "+\t\t\t\t\tdestinationImageExtent.x, destinationImageExtent.y);", "+\t\t\t}", "-\t\timageOffset = (parent.getItemHeight() - destinationImageExtent.y) / 2;", "+\t\timageOffset = (itemHeight - destinationImageExtent.y) / 2;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4072f38988c5a39c8559dbc315414302", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "d210fa9d39566655f9c3694b37a81a867775c6fb", "commitAfterChange": "3ad31e0f367aa1b600ee746ae8b160bb349a69e1", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 45, "signatureBeforeChange": "\r void paint(GC gc, int yPosition)", "signatureAfterChange": "\r void paint(GC gc, int yPosition)", "diff": ["-\tTree parent = getParent();\r", "-\tPoint paintPosition = new Point(getPaintStartX(), yPosition);\r", "-\t\r", "+\t\r", "+\tTree parent = getParent();\r", "+\tPoint paintPosition = new Point(getPaintStartX(), yPosition);\r", "+\tPoint extent = getSelectionExtent();\r", "-\tdrawSelection(gc, paintPosition);\r", "+\tif (isSelected() == true) {\r", "+\t\tgc.setBackground(getSelectionBackgroundColor());\r", "+\t\tgc.setForeground(getSelectionForegroundColor());\r", "+\t\tgc.fillRectangle(paintPosition.x, paintPosition.y, extent.x, extent.y);\r", "+\t} else {\r", "+\t\tgc.setBackground(getBackground());\r", "+\t\tgc.setForeground(getForeground());\r", "+\t\tif(getBackground() != parent.getBackground()){\r", "+\t\t\tgc.fillRectangle(paintPosition.x, paintPosition.y, extent.x, extent.y);\t\t\r", "+\t\t}\r", "+\t}\t\r", "+\tif (text != null) {\t\t\r", "+\t\tgc.drawString(text, getTextXPos(), paintPosition.y + getTextYPosition(gc), true);\r", "+\t}\r", "-\tdrawText(gc, new Point(getTextXPos(), paintPosition.y + getTextYPosition(gc)));\r"]}], "num": 1040}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59dad2eb1a6c5570dd2454d7d6c84d55", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c21af013118415910532bfb6a65e64a4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/CleanupNatives.java", "commitBeforeChange": "7e039cddeb4e9a7b9f7a0fba1c2fc2cfd9799452", "commitAfterChange": "730e0fc882d66da1ef6ae8758d8bb1231694d58a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public void generate(Method method)", "signatureAfterChange": "  public void generate(Method method)", "diff": ["-\t\t\tint modifiers = method.getModifiers();", "-\t\t\tClass clazz = method.getDeclaringClass();", "-\t\t\tString modifiersStr = Modifier.toString(modifiers);", "-\t\t\toutput(modifiersStr);", "-\t\t\tif (modifiersStr.length() > 0) output(\" \");", "-\t\t\toutput(getTypeSignature3(method.getReturnType()));", "-\t\t\toutput(\" \" );", "-\t\t\toutput(method.getName());", "-\t\t\toutput(\"(\");", "-\t\t\tClass[] paramTypes = method.getParameterTypes();", "-\t\t\tString[] paramNames = getArgNames(method);", "-\t\t\tfor (int i = 0; i < paramTypes.length; i++) {", "-\t\t\t\tClass paramType = paramTypes[i];", "-\t\t\t\tif (i != 0) output(\", \");", "-\t\t\t\tString sig = getTypeSignature3(paramType);", "-\t\t\t\tif (clazz.getPackage().equals(paramType.getPackage())) sig = getClassName(paramType);", "-\t\t\t\toutput(sig);", "-\t\t\t\toutput(\" \");", "-\t\t\t\toutput(paramNames[i]);", "-\t\t\t}", "-\t\t\toutputln(\");\");", "+//\t\t\tint modifiers = method.getModifiers();", "+//\t\t\tClass clazz = method.getDeclaringClass();", "+//\t\t\tString modifiersStr = Modifier.toString(modifiers);", "+//\t\t\toutput(modifiersStr);", "+//\t\t\tif (modifiersStr.length() > 0) output(\" \");", "+//\t\t\toutput(getTypeSignature3(method.getReturnType()));", "+//\t\t\toutput(\" \" );", "+//\t\t\toutput(method.getName());", "+//\t\t\toutput(\"(\");", "+//\t\t\tClass[] paramTypes = method.getParameterTypes();", "+//\t\t\tString[] paramNames = getArgNames(method);", "+//\t\t\tfor (int i = 0; i < paramTypes.length; i++) {", "+//\t\t\t\tClass paramType = paramTypes[i];", "+//\t\t\t\tif (i != 0) output(\", \");", "+//\t\t\t\tString sig = getTypeSignature3(paramType);", "+//\t\t\t\tif (clazz.getPackage().equals(paramType.getPackage())) sig = getClassName(paramType);", "+//\t\t\t\toutput(sig);", "+//\t\t\t\toutput(\" \");", "+//\t\t\t\toutput(paramNames[i]);", "+//\t\t\t}", "+//\t\t\toutputln(\");\");", "-//\toutput(\"NOT USED=\" + method.toString() + \"\\n\");", "+\toutput(\"NOT USED=\" + method.toString() + \"\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56929efa594068c554c4f1f337d264bb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "98fc614af4e0736880ddc01f544655cbdad4088c", "commitAfterChange": "3b27b41db1dd3c54eec31645b5eb2d11fe630ed4", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 43, "signatureBeforeChange": "  void generateFunctions()", "signatureAfterChange": "  void generateFunctions()", "diff": ["-\t\t\t\tNamedNodeMap attributes = node.getAttributes();", "-\t\t\t\tString name = attributes.getNamedItem(\"name\").getNodeValue();", "-\t\t\t\tout(\"public static final native \");", "-\t\t\t\tNode returnNode = getReturnNode(node.getChildNodes());", "-\t\t\t\tif (returnNode != null) {", "-\t\t\t\t\tout(getType(returnNode));", "-\t\t\t\t\tout(\" \");", "-\t\t\t\t} else {", "-\t\t\t\t\tout(\"void \");", "-\t\t\t\t}", "-\t\t\t\tout(name);", "-\t\t\t\tout(\"(\");", "-\t\t\t\tNodeList params = node.getChildNodes();", "-\t\t\t\tboolean first = true;", "-\t\t\t\tfor (int j = 0; j < params.getLength(); j++) {", "-\t\t\t\t\tNode param = params.item(j);", "-\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "-\t\t\t\t\t\tNamedNodeMap paramAttributes = param.getAttributes();", "-\t\t\t\t\t\tif (!first) out(\", \");", "-\t\t\t\t\t\tout(getType(param));", "-\t\t\t\t\t\tfirst = false;", "+\t\t\t\tif (getGen(node)) {", "+\t\t\t\t\tNamedNodeMap attributes = node.getAttributes();", "+\t\t\t\t\tString name = attributes.getNamedItem(\"name\").getNodeValue();", "+\t\t\t\t\tout(\"public static final native \");", "+\t\t\t\t\tNode returnNode = getReturnNode(node.getChildNodes());", "+\t\t\t\t\tif (returnNode != null) {", "+\t\t\t\t\t\tout(getType(returnNode));", "-\t\t\t\t\t\tout(paramAttributes.getNamedItem(\"name\").getNodeValue());", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tout(\"void \");", "+\t\t\t\t\tout(name);", "+\t\t\t\t\tout(\"(\");", "+\t\t\t\t\tNodeList params = node.getChildNodes();", "+\t\t\t\t\tboolean first = true;", "+\t\t\t\t\tfor (int j = 0; j < params.getLength(); j++) {", "+\t\t\t\t\t\tNode param = params.item(j);", "+\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "+\t\t\t\t\t\t\tNamedNodeMap paramAttributes = param.getAttributes();", "+\t\t\t\t\t\t\tif (!first) out(\", \");", "+\t\t\t\t\t\t\tout(getType(param));", "+\t\t\t\t\t\t\tfirst = false;", "+\t\t\t\t\t\t\tout(\" \");", "+\t\t\t\t\t\t\tout(paramAttributes.getNamedItem(\"name\").getNodeValue());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tout(\");\");", "+\t\t\t\t\toutln();", "-\t\t\t\tout(\");\");", "-\t\t\t\toutln();"]}], "num": 41776}
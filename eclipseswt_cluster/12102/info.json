{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "03a8303e19c26c6893c4244e1ca145e2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdd4099210ba49aefe37cbd5a7ae7752", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 71, "signatureBeforeChange": " Vector getPaintColumns(Rectangle paintArea)", "signatureAfterChange": " void onPageDown (int stateMask)", "diff": ["- */", "-Vector getPaintColumns(Rectangle paintArea) {", "-\tEnumeration columns = internalGetColumnVector().elements();", "-\tVector paintColumns = new Vector();", "-\tTableColumn column;", "-\tRectangle columnBounds;", "-\tint paintAreaRightBorder = paintArea.x + paintArea.width;", "-", "-\twhile (columns.hasMoreElements() == true) {", "-\t\tcolumn = (TableColumn) columns.nextElement();", "-\t\tcolumnBounds = column.getBounds();", "-\t\tif ((columnBounds.x + columnBounds.width >= paintArea.x) &&\t// does the paintArea overlap the current column?", "-\t\t\t(columnBounds.x <= paintAreaRightBorder)) {", "-\t\t\tpaintColumns.addElement(column);", "-\t\t}", "-\t}", "-\treturn paintColumns;", "-}", "+void onPageDown (int stateMask) {", "+\tint visibleItemCount = (getClientArea ().height - getHeaderHeight ()) / itemHeight;", "+\tif ((stateMask & (SWT.CTRL | SWT.SHIFT)) == 0) {", "+\t\t/* PageDown with no modifiers */", "+\t\tint newFocusIndex = focusItem.index + visibleItemCount - 1;", "+\t\tnewFocusIndex = Math.min (newFocusIndex, items.length - 1);", "+\t\tif (newFocusIndex == focusItem.index) return;", "+\t\tTableItem item = items [newFocusIndex];", "+\t\tselectItem (item, false);", "+\t\tsetFocusItem (item, true);", "+\t\tshowItem (item);", "+\t\tredrawItem (item.index, true);", "+\t\treturn;", "+\t}", "+\tif ((stateMask & (SWT.CTRL | SWT.SHIFT)) == (SWT.CTRL | SWT.SHIFT)) {", "+\t\t/* CTRL+Shift+PageDown */", "+\t\tint newTopIndex = topIndex + visibleItemCount;", "+\t\tnewTopIndex = Math.min (newTopIndex, items.length - visibleItemCount);", "+\t\tif (newTopIndex == topIndex) return;", "+\t\tsetTopIndex (newTopIndex);", "+\t\treturn;", "+\t}", "+\tif ((style & SWT.SINGLE) != 0) {", "+\t\tif ((stateMask & SWT.SHIFT) != 0) {", "+\t\t\t/* Shift+PageDown */", "+\t\t\tint newFocusIndex = focusItem.index + visibleItemCount - 1;", "+\t\t\tnewFocusIndex = Math.min (newFocusIndex, items.length - 1);", "+\t\t\tif (newFocusIndex == focusItem.index) return;", "+\t\t\tTableItem item = items [newFocusIndex];", "+\t\t\tselectItem (item, false);", "+\t\t\tsetFocusItem (item, true);", "+\t\t\tshowItem (item);", "+\t\t\tredrawItem (item.index, true);", "+\t\t\treturn;", "+\t\t}", "+\t\t/* CTRL+PageDown */", "+\t\tint newTopIndex = topIndex + visibleItemCount;", "+\t\tnewTopIndex = Math.min (newTopIndex, items.length - visibleItemCount);", "+\t\tif (newTopIndex == topIndex) return;", "+\t\tsetTopIndex (newTopIndex);", "+\t\treturn;", "+\t}", "+\t/* SWT.MULTI */", "+\tif ((stateMask & SWT.CTRL) != 0) {", "+\t\t/* CTRL+PageDown */", "+\t\tint bottomIndex = Math.min (topIndex + visibleItemCount - 1, items.length - 1);", "+\t\tif (focusItem.index != bottomIndex) {", "+\t\t\t/* move focus to bottom item in viewport */", "+\t\t\tsetFocusItem (items [bottomIndex], true);", "+\t\t\tredrawItem (bottomIndex, true);", "+\t\t} else {", "+\t\t\t/* at bottom of viewport, so set focus to bottom item one page down */", "+\t\t\tint newFocusIndex = Math.min (items.length - 1, bottomIndex + visibleItemCount);", "+\t\t\tif (newFocusIndex == focusItem.index) return;", "+\t\t\tsetFocusItem (items [newFocusIndex], true);", "+\t\t\tshowItem (items [newFocusIndex]);", "+\t\t\tredrawItem (newFocusIndex, true);", "+\t\t}", "+\t\treturn;", "+\t}", "+\t/* Shift+PageDown */", "+\tif (anchorItem == null) anchorItem = focusItem;", "+\tint anchorIndex = anchorItem.index;", "+\tint bottomIndex = Math.min (topIndex + visibleItemCount - 1, items.length - 1);", "+\tint selectIndex;", "+\tif (focusItem.index != bottomIndex) {", "+\t\t/* select from focus to bottom item in viewport */", "+\t\tselectIndex = bottomIndex;", "+\t} else {", "+\t\t/* already at bottom of viewport, so select to bottom of one page down */", "+\t\tselectIndex = Math.min (items.length - 1, bottomIndex + visibleItemCount);", "+\t\tif (selectIndex == focusItem.index && focusItem.isSelected ()) return;", "+\t}", "+\tTableItem selectedItem = items [selectIndex];", "+\tTableItem[] newSelection = new TableItem [Math.abs (anchorIndex - selectIndex) + 1];", "+\tint step = anchorIndex < selectIndex ? 1 : -1;", "+\tint writeIndex = 0;", "+\tfor (int i = anchorIndex; i != selectIndex; i += step) {", "+\t\tnewSelection [writeIndex++] = items [i];", "+\t}", "+\tnewSelection [writeIndex] = items [selectIndex];", "+\tsetSelection (newSelection);", "+\tsetFocusItem (selectedItem, true);", "+\tshowItem (selectedItem);", "+\tEvent newEvent = new Event ();", "+\tnewEvent.item = selectedItem;", "+\tpostEvent (SWT.Selection, newEvent);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "791c1002b00b3bcf7751077f9f38e7e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 72, "signatureBeforeChange": " void scrollVerticalAddingItem(int index)", "signatureAfterChange": " void onPageUp (int stateMask)", "diff": ["+}", "+void onPageUp (int stateMask) {", "+\tint visibleItemCount = (getClientArea ().height - getHeaderHeight ()) / itemHeight;", "+\tif ((stateMask & (SWT.CTRL | SWT.SHIFT)) == 0) {", "+\t\t/* PageUp with no modifiers */", "+\t\tint newFocusIndex = Math.max (0, focusItem.index - visibleItemCount + 1);", "+\t\tif (newFocusIndex == focusItem.index) return;", "+\t\tTableItem item = items [newFocusIndex];", "+\t\tselectItem (item, false);", "+\t\tsetFocusItem (item, true);", "+\t\tshowItem (item);", "+\t\tredrawItem (item.index, true);", "+\t\treturn;", "+\t}", "+\tif ((stateMask & (SWT.CTRL | SWT.SHIFT)) == (SWT.CTRL | SWT.SHIFT)) {", "+\t\t/* CTRL+Shift+PageUp */", "+\t\tint newTopIndex = Math.max (0, topIndex - visibleItemCount);", "+\t\tif (newTopIndex == topIndex) return;", "+\t\tsetTopIndex (newTopIndex);", "+\t\treturn;", "+\t}", "+\tif ((style & SWT.SINGLE) != 0) {", "+\t\tif ((stateMask & SWT.SHIFT) != 0) {", "+\t\t\t/* Shift+PageUp */", "+\t\t\tint newFocusIndex = Math.max (0, focusItem.index - visibleItemCount + 1);", "+\t\t\tif (newFocusIndex == focusItem.index) return;", "+\t\t\tTableItem item = items [newFocusIndex];", "+\t\t\tselectItem (item, false);", "+\t\t\tsetFocusItem (item, true);", "+\t\t\tshowItem (item);", "+\t\t\tredrawItem (item.index, true);", "+\t\t\treturn;", "+\t\t}", "+\t\t/* CTRL+PageUp */", "+\t\tint newTopIndex = Math.max (0, topIndex - visibleItemCount);", "+\t\tif (newTopIndex == topIndex) return;", "+\t\tsetTopIndex (newTopIndex);", "+\t\treturn;", "+\t}", "+\t/* SWT.MULTI */", "+\tif ((stateMask & SWT.CTRL) != 0) {", "+\t\t/* CTRL+PageUp */", "+\t\tif (focusItem.index != topIndex) {", "+\t\t\t/* move focus to top item in viewport */", "+\t\t\tsetFocusItem (items [topIndex], true);", "+\t\t\tredrawItem (topIndex, true);", "+\t\t} else {", "+\t\t\t/* at top of viewport, so set focus to top item one page up */", "+\t\t\tint newFocusIndex = Math.max (0, focusItem.index - visibleItemCount);", "+\t\t\tif (newFocusIndex == focusItem.index) return;", "+\t\t\tsetFocusItem (items [newFocusIndex], true);", "+\t\t\tshowItem (items [newFocusIndex]);", "+\t\t\tredrawItem (newFocusIndex, true);", "+\t\t}", "+\t\treturn;", "+\t}", "+\t/* Shift+PageUp */", "+\tif (anchorItem == null) anchorItem = focusItem;", "+\tint anchorIndex = anchorItem.index;", "+\tint selectIndex;", "+\tif (focusItem.index != topIndex) {", "+\t\t/* select from focus to top item in viewport */", "+\t\tselectIndex = topIndex;", "+\t} else {", "+\t\t/* already at top of viewport, so select to top of one page up */", "+\t\tselectIndex = Math.max (0, topIndex - visibleItemCount);", "+\t\tif (selectIndex == focusItem.index && focusItem.isSelected ()) return;", "+\t}", "+\tTableItem selectedItem = items [selectIndex];", "+\tTableItem[] newSelection = new TableItem [Math.abs (anchorIndex - selectIndex) + 1];", "+\tint step = anchorIndex < selectIndex ? 1 : -1;", "+\tint writeIndex = 0;", "+\tfor (int i = anchorIndex; i != selectIndex; i += step) {", "+\t\tnewSelection [writeIndex++] = items [i];", "+\t}", "+\tnewSelection [writeIndex] = items [selectIndex];", "+\tsetSelection (newSelection);", "+\tsetFocusItem (selectedItem, true);", "+\tshowItem (selectedItem);", "+\tEvent newEvent = new Event ();", "+\tnewEvent.item = selectedItem;", "+\tpostEvent (SWT.Selection, newEvent);", "+}", "- */", "-void scrollVerticalAddingItem(int index) {", "-\tint itemHeight = getItemHeight();", "-\tint sourceY = getHeaderHeight();", "-\tRectangle clientArea = getClientArea();\t", "-", "-\tif (index >= getTopIndex()) {", "-\t\tsourceY += (index-getTopIndex()) * itemHeight;", "-\t}", "-\tscroll(", "-\t\t0, sourceY + itemHeight, \t\t\t\t// destination x, y", "-\t\t0, sourceY,\t\t\t\t\t\t\t\t// source x, y", "-\t\tclientArea.width, clientArea.height, true);", "-}"]}], "num": 12102}
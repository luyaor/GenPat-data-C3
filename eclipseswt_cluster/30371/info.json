{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4db72fcd7bf599ccdab1fa2e47102a7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43c0ec9db4f1d5034646da0097d5b046", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/internal/Converter.java", "commitBeforeChange": "48a36dcdf308b5e9a0e19f554c302e2e875b588d", "commitAfterChange": "8727d22e38059537dcc917ca55f0d6ddcedac706", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public static char [] mbcsToWcs (String codePage, byte [] buffer)", "signatureAfterChange": " public static char [] mbcsToWcs (String codePage, byte [] buffer)", "diff": ["-\t/*", "-\t * Optimize for English ASCII encoding.  If no conversion is", "-\t * performed, it is safe to return any object that will also not", "-\t * be converted if this routine is called again with the result.", "-\t * This ensures that double conversion will not be performed", "-\t * on the same bytes.  Note that this relies on the fact that", "-\t * lead bytes are never in the range 0..0x7F.", "-\t */", "-\tchar [] wideCharStr = new char [length];", "-\t/* AW", "-\tfor (int i=0; i<length; i++) {", "-\t\tif ((buffer [i] & 0xFF) <= 0x7F) {", "-\t\t\twideCharStr [i] = (char) buffer [i]; // all bytes <= 0x7F, so no ((char) (buffer[i]&0xFF)) needed", "-\t\t} else {", "-\t\t\tsynchronized (Converter.class) {", "-\t\t\t\tString cp = codePage != null ? codePage : CodePage;", "-\t\t\t\tif (LastMBToWC != 0 && !cp.equals (LastMBToWCCodePage)) {", "-\t\t\t\t\tOS.iconv_close (LastMBToWC);", "-\t\t\t\t\tLastMBToWC = 0;", "-\t\t\t\t}", "-\t\t\t\tif (LastMBToWC == 0) {", "-\t\t\t\t\tLastMBToWCCodePage = cp;", "-\t\t\t\t\tLastMBToWC = OS.iconv_open (Unicode, getAsciiBytes (cp));", "-\t\t\t\t}", "-\t\t\t\tint cd = LastMBToWC;", "-\t\t\t\tif (cd == 0) return EMPTY_CHAR_ARRAY;", "-\t\t\t\tint inBytes = length;", "-\t\t\t\tint outBytes = length * 2;", "-\t\t\t\tint ptr1, ptr2;", "-\t\t\t\tif (length <= BufferSize * 2) {", "-\t\t\t\t\tptr1 = BufferTimes2;", "-\t\t\t\t\tptr2 = BufferTimes4;", "-\t\t\t\t} else {", "-\t\t\t\t\tptr1 = OS.XtMalloc (inBytes);", "-\t\t\t\t\tptr2 = OS.XtMalloc (outBytes);", "-\t\t\t\t}", "-\t\t\t\tint [] inBuf = {ptr1};", "-\t\t\t\tint [] inBytesLeft = {inBytes};", "-\t\t\t\tint [] outBuf = {ptr2};", "-\t\t\t\tint [] outBytesLeft = {outBytes};", "-\t\t\t\tOS.memmove (ptr1, buffer, inBytes);", "-\t\t\t\tint result = OS.iconv (cd, inBuf, inBytesLeft, outBuf, outBytesLeft);", "-\t\t\t\toutBytes = outBuf [0] - ptr2;", "-\t\t\t\twideCharStr = new char [outBytes / 2];", "-\t\t\t\tOS.memmove (wideCharStr, ptr2, outBytes);", "-\t\t\t\tif (ptr1 != BufferTimes2) OS.XtFree (ptr1);", "-\t\t\t\tif (ptr2 != BufferTimes4) OS.XtFree (ptr2);", "-\t\t\t}", "-\t\t\treturn wideCharStr;", "-\t\t}", "-\t}", "-\t*/", "-\treturn wideCharStr;", "+\tString s= new String(buffer);", "+\tint n= s.length();", "+\tchar[] chars= new char[n];", "+\ts.getChars(0, n, chars, 0);", "+\treturn chars;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6616e09e56d5f299df31efe93b917c5d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "5291fb5ab98b8edb9d85f8aabfcd8636dd2d27f5", "commitAfterChange": "68eede6cc61dccf58685c545d1d833d2102b72d0", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  void createItem (MenuItem item, int index)", "signatureAfterChange": "  void createItem (MenuItem item, int index)", "diff": ["-\t\t\t\tlpNewItem = new TCHAR (0, \"\", true);", "+\t\t\t\tlpNewItem = new TCHAR (0, \" \", true);", "-\t\t\t* Bug in Windows.  For some reason, when InsertMenuItem ()", "+\t\t\t* Bug in Windows.  For some reason, when InsertMenuItem()", "-\t\t\t* to use SetMenuItemInfo () to set the text at a later time.", "-\t\t\t* The fix is to insert the item with an empty string.", "+\t\t\t* to use SetMenuItemInfo() to set the text at a later time.", "+\t\t\t* The fix is to insert the item with some text.", "+\t\t\t* ", "+\t\t\t* Feature in Windows.  When an empty string is used instead", "+\t\t\t* of a space and InsertMenuItem() is used to set a submenu", "+\t\t\t* before setting text to a non-empty string, the menu item", "+\t\t\t* becomes unexpectedly disabled.  The fix is to insert a", "+\t\t\t* space.", "-\t\t\tint pszText = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, TCHAR.sizeof);", "+\t\t\tTCHAR buffer = new TCHAR (0, \" \", true);", "+\t\t\tint byteCount = buffer.length () * TCHAR.sizeof;", "+\t\t\tint pszText = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, byteCount);", "+\t\t\tOS.MoveMemory (pszText, buffer, byteCount);\t"]}], "num": 30371}
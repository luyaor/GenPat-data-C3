{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e989f4fc5c645bb076a898057bbc9a9e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49d10a6daf264f13fa7897c46e6cf6c5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "a49f2cbc4da47f935eb3107bc9632b88888ad41f", "commitAfterChange": "8f88e2ea9dda5fd31ba5034707b2295762e68f5c", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " void shape (final int hdc, final StyleItem run)", "signatureAfterChange": " void shape (final int hdc, final StyleItem run)", "diff": ["+\t", "+\t", "+\t/*", "+\t* Feature in Uniscribe, the U+FEFF is not supported by", "+\t* some fonts in the system causing the remaining chars in", "+\t* the run not to draw, even though the font supports them.", "+\t* The fix is to replace U+FEFF by U+200B (ZERO-WIDTH SPACE).   ", "+\t*/", "+\tfor (int i = 0; i < chars.length; i++) {", "+\t\tif (chars[i] == '\\uFEFF') chars[i] = '\\u200B';", "+\t}", "+", "-\tboolean shapeSucceed = shape(hdc, run, chars, buffer,  maxGlyphs);", "+\tfinal SCRIPT_PROPERTIES sp = new SCRIPT_PROPERTIES();", "+\tOS.MoveMemory(sp, device.scripts[script], SCRIPT_PROPERTIES.sizeof);", "+\tboolean shapeSucceed = shape(hdc, run, chars, buffer,  maxGlyphs, sp);", "-\t\tSCRIPT_PROPERTIES properties = new SCRIPT_PROPERTIES();", "-\t\tOS.MoveMemory(properties, device.scripts[script], SCRIPT_PROPERTIES.sizeof);", "-\t\tif (properties.fPrivateUseArea) {", "+\t\tif (sp.fPrivateUseArea) {", "-\t\t\tshapeSucceed = shape(hdc, run, chars, buffer,  maxGlyphs);", "+\t\t\tshapeSucceed = shape(hdc, run, chars, buffer,  maxGlyphs, sp);", "-\t\t\t\tshapeSucceed = shape(hdc, run, chars, buffer,  maxGlyphs);", "+\t\t\t\tshapeSucceed = shape(hdc, run, chars, buffer,  maxGlyphs, sp);", "-\t\t\tshapeSucceed = shape(hdc, run, chars, buffer,  maxGlyphs);", "+\t\t\tshapeSucceed = shape(hdc, run, chars, buffer,  maxGlyphs, sp);", "-\t\t\t\tint EnumFontFamExProc(int lpelfe, int lpntme, int FontType, int lParam) {", "-\t\t\t\t\tOS.MoveMemory(newLogFont, lpelfe, LOGFONT.sizeof);", "+\t\t\t\tint /*long*/ EnumFontFamExProc (int /*long*/ lpelfe, int /*long*/ lpntme, int /*long*/ FontType, int /*long*/ lParam) {", "+\t\t\t\t\tOS.MoveMemory(newLogFont, lpelfe, LOGFONT.sizeof);", "-\t\t\t\t\tif (shape(hdc, run, chars, buffer, maxGlyphs)) {", "+\t\t\t\t\tif (shape(hdc, run, chars, buffer, maxGlyphs, sp)) {", "-\t\t\tSCRIPT_PROPERTIES properties = new SCRIPT_PROPERTIES();", "-\t\t\tOS.MoveMemory(properties, device.scripts[script], SCRIPT_PROPERTIES.sizeof);", "-\t\t\tint charSet = properties.fAmbiguousCharSet ? OS.DEFAULT_CHARSET : properties.bCharSet;", "+\t\t\tint charSet = sp.fAmbiguousCharSet ? OS.DEFAULT_CHARSET : sp.bCharSet;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19c16d4561adfaf8485e1c6c29defd88", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "10946719389470f65e13f1be11fcaf6eb8e0708e", "commitAfterChange": "e42c019f2a285ee0693f813be28788620d9b1560", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " void shape (final int hdc, final StyleItem run)", "signatureAfterChange": " void shape (final int hdc, final StyleItem run)", "diff": ["-\t", "-\t/*", "-\t* Feature in Uniscribe, the U+FEFF is not supported by", "-\t* some fonts in the system causing the remaining chars in", "-\t* the run not to draw, even though the font supports them.", "-\t* The fix is to replace U+FEFF by U+200B (ZERO-WIDTH SPACE).   ", "-\t*/", "-\tfor (int i = 0; i < chars.length; i++) {", "-\t\tif (chars[i] == '\\uFEFF') chars[i] = '\\u200B';", "-\t}", "-", "-\t\t/* ", "-\t\t * Shape failed.", "-\t\t * Try to shape with fNoGlyphIndex when the run is in the ", "-\t\t * Private Use Area. This allows for end-user-defined character (EUDC).", "-\t\t */", "-\t\tif (sp.fPrivateUseArea) {", "+\t\tboolean useGDI = !sp.fComplex;", "+\t\t/*", "+\t\t* Bug in Windows.  There are non-complex scripts that are", "+\t\t* not supported by GDI. The fix is to detect these scripts", "+\t\t* by checking the Unicode ranges and use Uniscribe instead.", "+\t\t*   ", "+\t\t* These are the scripts: ", "+\t\t* \t0x0530..0x058F is Armenian", "+\t\t*   0x10A0..0x10FF is Georgian", "+\t\t*   0xA000..0xA4CF is Yi", "+\t\t*/", "+\t\tchar c = chars[0];", "+\t\tif (0x0530 <= c && c <= 0x058F || 0x10A0 <= c && c <= 0x10FF || 0xA000 <= c && c <= 0xA4CF) {", "+\t\t\tuseGDI = false;", "+\t\t}", "+\t\tif (useGDI) {", "+\t\t\tint /*long*/ hFont = OS.GetCurrentObject(hdc, OS.OBJ_FONT);", "+\t\t\tLOGFONT logFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW () : new LOGFONTA ();", "+\t\t\tOS.GetObject(hFont, LOGFONT.sizeof, logFont);", "+\t\t\tLOGFONT systemLogFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW () : new LOGFONTA ();", "+\t\t\tOS.GetObject(device.systemFont.handle, LOGFONT.sizeof, systemLogFont);", "+\t\t\tsystemLogFont.lfHeight = logFont.lfHeight;", "+\t\t\tsystemLogFont.lfWeight = logFont.lfWeight;", "+\t\t\tsystemLogFont.lfItalic = logFont.lfItalic;", "+\t\t\tsystemLogFont.lfWidth = logFont.lfWidth;", "+\t\t\tint /*long*/ newFont = OS.CreateFontIndirect (systemLogFont);", "+\t\t\tOS.SelectObject(hdc, newFont);", "+\t\t\tif (shapeSucceed) {", "+\t\t\t\trun.fallbackFont = newFont;", "+\t\t\t} else {", "+\t\t\t\tOS.SelectObject(hdc, hFont);", "+\t\t\t\tOS.DeleteObject(newFont);", "+\t\t\t\trun.analysis.fNoGlyphIndex = false;", "+\t\t\t}"]}], "num": 56076}
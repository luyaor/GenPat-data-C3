{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "02f0a4bb06139fbf3701a0053d9fb891", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "119bd179b4155777a73c7b162f902f08", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "f664172a0e735d142051b2da26600fbd256e07a6", "commitAfterChange": "894e6297387f95786ffea31acd399cd5951b0afc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  Point adjustMoveCursor (int xDisplay, int xWindow)", "signatureAfterChange": "  Point adjustMoveCursor ()", "diff": ["-Point adjustMoveCursor (int xDisplay, int xWindow) {", "-\treturn new Point (0, 0);", "+Point adjustMoveCursor () {", "+\tRectangle bounds = computeBounds ();", "+\tint newX = bounds.x + bounds.width / 2;", "+\tint newY = bounds.y;", "+\t/*", "+\t * Convert to screen coordinates iff needed", "+ \t */", "+\tif (parent != null) {", "+\t\tRect rect = new Rect ();", "+\t\tOS.GetControlBounds (parent.handle, rect);", "+\t\tnewX += rect.left; ", "+\t\tnewY += rect.top; ", "+\t\tint window = OS.GetControlOwner (parent.handle);", "+\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\t\tnewX += rect.left; ", "+\t\tnewY += rect.top; ", "+\t}", "+\tCGPoint pt = new CGPoint ();", "+\tpt.x = newX;  pt.y = newY;", "+\tOS.CGWarpMouseCursorPosition (pt);", "+\treturn new Point ((int) pt.x, (int) pt.y);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ed4041f3294cdfa8f16b2475f4f3af5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "7afad412b1f337fa41ce05bd71e8b868b817a3ad", "commitAfterChange": "60a9b0215b046632b51b65b9dcf0569516e0686e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void copyArea(Image image, int x, int y)", "signatureAfterChange": " public void copyArea(Image image, int x, int y)", "diff": ["-\tif (data.control != 0) {", "-\t\tint[] offscreen = new int[1];", "-\t\tOS.HIViewCreateOffscreenImage(data.control, 0, null, offscreen);", "-\t\tcopyArea(image, x, y, offscreen[0]);", "-\t\tif (offscreen[0] != 0) OS.CGImageRelease(offscreen[0]);", "-\t} else if (data.image != null) {", "+\tif (data.image != null) {", "-\t} else if (data.window != 0) {", "+\t} else if (data.window != 0 || data.control != 0) {", "+\t\tif (data.control != 0) {", "+\t\t\tRect rect = new Rect ();", "+\t\t\tint window = OS.GetControlOwner (data.control);", "+\t\t\tif (OS.HIVIEW) {", "+\t\t\t\tCGPoint pt = new CGPoint ();", "+\t\t\t\tOS.HIViewConvertPoint (pt, data.control, 0);", "+\t\t\t\tx += (int) pt.x;", "+\t\t\t\ty += (int) pt.y;", "+\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowStructureRgn, rect);", "+\t\t\t} else {", "+\t\t\t\tOS.GetControlBounds (data.control, rect);", "+\t\t\t\tx += rect.left;", "+\t\t\t\ty += rect.top;", "+\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\t\t\t}", "+\t\t\tx += rect.left;", "+\t\t\ty += rect.top;", "+\t\t\trect = data.insetRect;", "+\t\t\tx -= rect.left;", "+\t\t\ty -= rect.top;", "+\t\t}"]}], "num": 48898}
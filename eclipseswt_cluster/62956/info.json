{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b1648a7d2e51afd3a66774db91d2c73", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02fc529ac2724b5f8871dd8fe9a986a2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "e7fb43dbb2484659429530f9cab714cb6e3de9f3", "commitAfterChange": "d69b8bce251422ebdcfdac8edd7d2bcf938dfebd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r static int getDesktop ()", "signatureAfterChange": " static int getDesktop( Display display )", "diff": ["-\r", "-static int getDesktop () {\r", "-\tFile root = new File (\"/proc\");\r", "-\tif (!root.exists () || !root.isDirectory ()) return DESKTOP_UNKNOWN;\r", "-\tFile [] procDirs = root.listFiles ();\r", "-\tfor (int i=0; i<procDirs.length; i++) {\r", "-\t\tString directory = procDirs [i].getAbsolutePath ();\r", "-\t\tFile file = new File (directory + \"/stat\");\r", "-\t\tif (file.exists ()) {\r", "-\t\t\tString procName = getProcName (file);\r", "-\t\t\tif (procName.indexOf (\"gnome\") >= 0) {\r", "-\t\t\t\treturn gnome_init() ? DESKTOP_GNOME : DESKTOP_UNKNOWN;\t\t\r", "-\t\t\t}\r", "-\t\t\tif (procName.indexOf (\"kdeinit\") >= 0) {\r", "-\t\t\t\treturn kde_init () ? DESKTOP_KDE : DESKTOP_UNKNOWN;\r", "-\t\t\t}\t\r", "-\t\t}\r", "-\t}\r", "-\treturn DESKTOP_UNKNOWN;\r", "-}\r", "+/* Determine the desktop for the given display. */", "+static int getDesktop( Display display ) {", "+\tif (display == null) return DESKTOP_UNKNOWN;", "+\t", "+\t// If the desktop type for this display is already known, return it.", "+\tInteger desktopValue = (Integer) display.getData( desktopData );", "+\tif (desktopValue != null) {", "+\t\treturn desktopValue.intValue();", "+\t}", "+\t", "+\t// Obtain the atoms for the various window manager signature properties.", "+\tint desktop = DESKTOP_UNKNOWN;", "+\tint xDisplay = display.xDisplay;", "+\tbyte[] gnomeName = Converter.wcsToMbcs (null, \"GNOME_NAME_SERVER\", true);", "+\tbyte[] cdeName   = Converter.wcsToMbcs (null, \"DTWM_IS_RUNNING\", true);", "+\tbyte[] kdeName   = Converter.wcsToMbcs (null, \"KWIN_RUNNING\", true);", "+\tint gnome = OS.XInternAtom( xDisplay, gnomeName, true );", "+\tint cde   = OS.XInternAtom( xDisplay, cdeName, true );", "+\tint kde   = OS.XInternAtom( xDisplay, kdeName, true );", "+\t", "+\t// Get the list of properties on the root window.", "+\tint   rootWindow = OS.XDefaultRootWindow( xDisplay );", "+\tint[] numProp = new int[1];", "+\tint   propList = OS.XListProperties( xDisplay, rootWindow, numProp );", "+\tif (propList == 0) return DESKTOP_UNKNOWN;", "+\tint[] property = new int[ numProp[0] ];", "+\tOS.memmove( property, propList, (property.length * 4) );", "+\tOS.XFree( propList );", "+\t", "+\t// A given WM (desktop) is active if the property exists on the root window.", "+\tfor (int index = 0; desktop == DESKTOP_UNKNOWN && index < property.length; index++) {", "+\t\tif (property[ index ] == OS.None) continue; // do not match atoms that do not exist", "+\t\tif (property[ index ] == gnome) {", "+\t\t\tif (gnome_init()) desktop = DESKTOP_GNOME;\t\t", "+\t\t}", "+\t\tif (property[ index ] == cde) {", "+\t\t\tif (cde_init( display )) desktop = DESKTOP_CDE;", "+\t\t}\t", "+\t\tif (property[ index ] == kde) {", "+\t\t\tif (kde_init()) desktop = DESKTOP_KDE;", "+\t\t}\t", "+\t}", "+\t", "+\t// Save the desktop type on the display itself.", "+\tdisplay.setData( desktopData, new Integer(desktop) );", "+\treturn desktop;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53a34515a984e6b1ca027313dc53d382", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d97d105ad2e32278f8b437528f42d75cf13b55bc", "commitAfterChange": "f9bb5d40accd622147de6079abe42fd37fe5f2d7", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight)", "signatureAfterChange": " void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight)", "diff": ["+", "+\t/* Merge clipping with mask if necessary */", "+\tif (data.clipRgn != 0)\t {", "+\t\tint newWidth =  imgWidth;", "+\t\tint newHeight = imgHeight;", "+\t\tint bytesPerLine = (((newWidth + 7) / 8) + 3) / 4 * 4;", "+\t\tbyte[] maskData = new byte[bytesPerLine * newHeight];", "+\t\tint mask = OS.gdk_bitmap_create_from_data(0, maskData, bytesPerLine * 8, newHeight);", "+\t\tif (mask != 0) {", "+\t\t\tint gc = OS.gdk_gc_new(mask);", "+\t\t\tOS.gdk_region_offset(data.clipRgn, -destX + srcX, -destY + srcY);", "+\t\t\tOS.gdk_gc_set_clip_region(gc, data.clipRgn);", "+\t\t\tOS.gdk_region_offset(data.clipRgn, -destX, -destY);", "+\t\t\tGdkColor color = new GdkColor();", "+\t\t\tcolor.pixel = 1;", "+\t\t\tOS.gdk_gc_set_foreground(gc, color);", "+\t\t\tOS.gdk_draw_rectangle(mask, gc, 1, 0, 0, newWidth, newHeight);", "+\t\t\tOS.gdk_gc_set_function(gc, OS.GDK_AND);", "+\t\t\tOS.gdk_draw_drawable(mask, gc, maskPixmap, 0, 0, 0, 0, newWidth, newHeight);", "+\t\t\tOS.g_object_unref(gc);", "+\t\t\tif (maskPixmap != 0 && srcImage.mask != maskPixmap) OS.g_object_unref(maskPixmap);", "+\t\t\tmaskPixmap = mask;", "+\t\t}", "+\t}", "+", "-\t\t\t\t\t\tif (OS.gdk_image_get_pixel(gdkImagePtr, x + srcX, y + srcY) != 0) {", "-\t\t\t\t\t\t\tline[x*4+3] = (byte)0xFF;", "-\t\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (OS.gdk_image_get_pixel(gdkImagePtr, x + srcX, y + srcY) == 0) {", "-\t\t\t\t\tOS.gdk_pixbuf_render_to_drawable_alpha(", "-\t\t\t\t\t\tscaledPixbuf, data.drawable,", "-\t\t\t\t\t\t0, 0, destX, destY, destWidth, destHeight,", "-\t\t\t\t\t\tOS.GDK_PIXBUF_ALPHA_BILEVEL, 128, OS.GDK_RGB_DITHER_NORMAL, 0, 0);", "+\t\t\t\t\tint[] colorBuffer = new int[1];", "+\t\t\t\t\tint[] maskBuffer = new int[1];", "+\t\t\t\t\tOS.gdk_pixbuf_render_pixmap_and_mask(scaledPixbuf, colorBuffer, maskBuffer, 128);", "+\t\t\t\t\tcolorPixmap = colorBuffer[0];", "+\t\t\t\t\tmaskPixmap = maskBuffer[0];", "-\t} else {", "-\t", "-\t\t/* Blit cliping the mask */", "-\t\tGdkGCValues values = new GdkGCValues();", "-\t\tOS.gdk_gc_get_values(handle, values);", "-\t\tOS.gdk_gc_set_clip_mask(handle, maskPixmap);", "-\t\tOS.gdk_gc_set_clip_origin(handle, destX - srcX, destY - srcY);", "-\t\tOS.gdk_draw_drawable(drawable, handle, colorPixmap, srcX, srcY, destX, destY, srcWidth, srcHeight);", "-\t\tOS.gdk_gc_set_values(handle, values, OS.GDK_GC_CLIP_MASK | OS.GDK_GC_CLIP_X_ORIGIN | OS.GDK_GC_CLIP_Y_ORIGIN);", "+\t\tsrcX = 0;", "+\t\tsrcY = 0;", "+\t\tsrcWidth = destWidth;", "+\t\tsrcHeight = destHeight;", "+\t/* Blit cliping the mask */", "+\tGdkGCValues values = new GdkGCValues();", "+\tOS.gdk_gc_get_values(handle, values);", "+\tOS.gdk_gc_set_clip_mask(handle, maskPixmap);", "+\tOS.gdk_gc_set_clip_origin(handle, destX - srcX, destY - srcY);", "+\tOS.gdk_draw_drawable(drawable, handle, colorPixmap, srcX, srcY, destX, destY, srcWidth, srcHeight);", "+\tOS.gdk_gc_set_values(handle, values, OS.GDK_GC_CLIP_MASK | OS.GDK_GC_CLIP_X_ORIGIN | OS.GDK_GC_CLIP_Y_ORIGIN);", "+\tif (data.clipRgn != 0) OS.gdk_gc_set_clip_region(handle, data.clipRgn);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a0739418f5361de7ddd626561e3f03d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/internal/mozilla/nsID.java", "commitBeforeChange": "a6f6f0c6da1338c791fd15a091bf8705c5ee725c", "commitAfterChange": "8bf573ee7c876cf0329fbd1d4a8ab0c1b4560a42", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void Parse (String aIDStr)", "signatureAfterChange": "  public void Parse(String aIDStr)", "diff": ["-public void Parse (String aIDStr) {", "-\tif (aIDStr == null) throw new Error ();", "+public void Parse(String aIDStr) {", "+\tif(aIDStr == null) throw new Error ();", "-\tfor (; i < 8; i++) m0 = (m0 << 4) + Integer.parseInt (aIDStr.substring (i, i + 1), 16);", "+\tfor (; i < 8; i++) {", "+\t\tint digit = Character.digit (aIDStr.charAt (i), 16);", "+\t\tif (digit == -1) throw new Error ();", "+\t\tm0 = (m0 << 4) + digit;", "+\t}", "-\tfor (; i < 13; i++) m1 = (short)((m1 << 4) + Integer.parseInt (aIDStr.substring (i, i + 1), 16));", "+\tfor (; i < 13; i++) {", "+\t\tint digit = Character.digit (aIDStr.charAt (i), 16);", "+\t\tif (digit == -1) throw new Error ();", "+\t\tm1 = (short)((m1 << 4) + digit);", "+\t}", "-\tfor (; i < 18; i++) m2 = (short)((m2 << 4) + Integer.parseInt (aIDStr.substring (i, i + 1), 16));", "+\tfor (; i < 18; i++) {", "+\t\tint digit = Character.digit (aIDStr.charAt (i), 16);", "+\t\tif (digit == -1) throw new Error ();", "+\t\tm2 = (short)((m2 << 4) + digit);", "+\t}", "-\tfor (; i < 21; i++) m3[0] = (byte)((m3[0] << 4) + Integer.parseInt (aIDStr.substring (i, i + 1), 16));", "-\tfor (; i < 23; i++) m3[1] = (byte)((m3[1] << 4) + Integer.parseInt (aIDStr.substring (i, i + 1), 16));", "+\tfor (; i < 21; i++) {", "+\t\tint digit = Character.digit (aIDStr.charAt (i), 16);", "+\t\tif (digit == -1) throw new Error ();", "+\t\tm3[0] = (byte)((m3[0] << 4) + digit);", "+\t}", "+\tfor (; i < 23; i++) {", "+\t\tint digit = Character.digit (aIDStr.charAt (i), 16);", "+\t\tif (digit == -1) throw new Error ();", "+\t\tm3[1] = (byte)((m3[1] << 4) + digit);", "+\t}", "-\tfor (; i < 26; i++) m3[2] = (byte)((m3[2] << 4) + Integer.parseInt (aIDStr.substring (i, i + 1), 16));", "-\tfor (; i < 28; i++) m3[3] = (byte)((m3[3] << 4) + Integer.parseInt (aIDStr.substring (i, i + 1), 16));", "-\tfor (; i < 30; i++) m3[4] = (byte)((m3[4] << 4) + Integer.parseInt (aIDStr.substring (i, i + 1), 16));", "-\tfor (; i < 32; i++) m3[5] = (byte)((m3[5] << 4) + Integer.parseInt (aIDStr.substring (i, i + 1), 16));", "-\tfor (; i < 34; i++) m3[6] = (byte)((m3[6] << 4) + Integer.parseInt (aIDStr.substring (i, i + 1), 16));", "-\tfor (; i < 36; i++) m3[7] = (byte)((m3[7] << 4) + Integer.parseInt (aIDStr.substring (i, i + 1), 16));", "+\tfor (; i < 26; i++) {", "+\t\tint digit = Character.digit (aIDStr.charAt (i), 16);", "+\t\tif (digit == -1) throw new Error ();", "+\t\tm3[2] = (byte)((m3[2] << 4) + digit);", "+\t}", "+\tfor (; i < 28; i++) {", "+\t\tint digit = Character.digit (aIDStr.charAt (i), 16);", "+\t\tif (digit == -1) throw new Error ();", "+\t\tm3[3] = (byte)((m3[3] << 4) + digit);", "+\t}", "+\tfor (; i < 30; i++) {", "+\t\tint digit = Character.digit (aIDStr.charAt (i), 16);", "+\t\tif (digit == -1) throw new Error ();", "+\t\tm3[4] = (byte)((m3[4] << 4) + digit);", "+\t}", "+\tfor (; i < 32; i++) {", "+\t\tint digit = Character.digit (aIDStr.charAt (i), 16);", "+\t\tif (digit == -1) throw new Error ();", "+\t\tm3[5] = (byte)((m3[5] << 4) + digit);", "+\t}", "+\tfor (; i < 34; i++) {", "+\t\tint digit = Character.digit (aIDStr.charAt (i), 16);", "+\t\tif (digit == -1) throw new Error ();", "+\t\tm3[6] = (byte)((m3[6] << 4) + digit);", "+\t}", "+\tfor (; i < 36; i++) {", "+\t\tint digit = Character.digit (aIDStr.charAt (i), 16);", "+\t\tif (digit == -1) throw new Error ();", "+\t\tm3[7] = (byte)((m3[7] << 4) + digit);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "292bd45c9485cfee386f97a90a8bb6c9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "63b50c5fea4ab60936c84a3080eb596f376bf6a1", "commitAfterChange": "45c66a5bd7603371a720a2a643661cd929a5ff6a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tint width, height;", "+\tint width = 0, height = 0;", "-\t\tTXNLongRect oTextRect = new TXNLongRect ();", "-\t\tOS.TXNGetRectBounds (txnObject, null, null, oTextRect);", "-\t\twidth = oTextRect.right - oTextRect.left;", "-\t\theight = oTextRect.bottom - oTextRect.top;", "+\t\tif (OS.VERSION >= 0x1030) {", "+\t\t\tif ((style & SWT.WRAP) != 0) {", "+\t\t\t\tint [] oDataHandle = new int [1];", "+\t\t\t\tOS.TXNGetData (txnObject, OS.kTXNStartOffset, OS.kTXNEndOffset, oDataHandle);", "+\t\t\t\tif (oDataHandle [0] != 0) {", "+\t\t\t\t\tint length = OS.GetHandleSize (oDataHandle [0]);", "+\t\t\t\t\tif (length != 0) {", "+\t\t\t\t\t\tint [] ptr = new int [1];", "+\t\t\t\t\t\tOS.HLock (oDataHandle [0]);", "+\t\t\t\t\t\tOS.memcpy (ptr, oDataHandle [0], 4);", "+\t\t\t\t\t\tint str = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, ptr [0], length / 2);", "+\t\t\t\t\t\tif (str != 0) {", "+\t\t\t\t\t\t\tfloat [] w = new float [1], h = new float [1];", "+\t\t\t\t\t\t\tHIThemeTextInfo info = new HIThemeTextInfo ();", "+\t\t\t\t\t\t\tinfo.state = OS.kThemeStateActive;", "+\t\t\t\t\t\t\tif (font != null) {", "+\t\t\t\t\t\t\t\tOS.TextFont (font.id);", "+\t\t\t\t\t\t\t\tOS.TextFace (font.style);", "+\t\t\t\t\t\t\t\tOS.TextSize (font.size);", "+\t\t\t\t\t\t\t\tinfo.fontID = (short) OS.kThemeCurrentPortFont; ", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tinfo.fontID = (short) defaultThemeFont ();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tOS.HIThemeGetTextDimensions (str, wHint == SWT.DEFAULT ? 0 : wHint, info, w, h, null);", "+\t\t\t\t\t\t\tOS.CFRelease (str);", "+\t\t\t\t\t\t\twidth = (int) w [0];", "+\t\t\t\t\t\t\theight = (int) h [0];", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.HUnlock (oDataHandle[0]);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.DisposeHandle (oDataHandle[0]);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tCGRect rect = new CGRect ();", "+\t\t\t\tOS.TXNGetHIRect (txnObject, OS.kTXNTextRectKey, rect);", "+\t\t\t\twidth = (int) rect.width;", "+\t\t\t\theight = (int) rect.height;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tTXNLongRect oTextRect = new TXNLongRect ();", "+\t\t\tOS.TXNGetRectBounds (txnObject, null, null, oTextRect);", "+\t\t\twidth = oTextRect.right - oTextRect.left;", "+\t\t\theight = oTextRect.bottom - oTextRect.top;", "+\t\t}", "-\twidth = trim.width;  height = trim.height;", "+\twidth = trim.width;", "+\theight = trim.height;"]}], "num": 62956}
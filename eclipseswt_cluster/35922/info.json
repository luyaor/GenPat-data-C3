{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8531e5d297d19a7734fc7d88776579f4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ac015716c27db27e5419546f81c7971", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "3f33e2ee9272fba6be3a63b7b75ef498c2473100", "commitAfterChange": "b4868533def1ddff0d2225e5c0ba417b8720cc48", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " StyleItem[] reorder (StyleItem[] runs)", "signatureAfterChange": " StyleItem[] reorder (StyleItem[] runs)", "diff": ["-\tbyte[] bidiLevels = new byte[runs.length];", "-\tfor (int i=0; i<runs.length; i++) {", "+\tint length = runs.length;", "+\tif (length <= 1) return runs;", "+\tbyte[] bidiLevels = new byte[length];", "+\tfor (int i=0; i<length; i++) {", "-\tint[] log2vis = new int[runs.length];", "-\tOS.ScriptLayout(runs.length, bidiLevels, null, log2vis);", "-\tStyleItem[] result = new StyleItem[runs.length];", "-\tfor (int i=0; i<runs.length; i++) {", "+\t/*", "+\t* Feature in Windows.  If the orientation is RTL Uniscribe will", "+\t* resolve the level of line breaks to 1, this can cause the line ", "+\t* break to be reorder to the middle of the line. The fix is to set", "+\t* the level to zero to prevent it to be reordered.", "+\t*/", "+\tStyleItem lastRun = runs[length - 1];", "+\tif (lastRun.lineBreak && !lastRun.softBreak) {", "+\t\tbidiLevels[length - 1] = 0;", "+\t}", "+\tint[] log2vis = new int[length];", "+\tOS.ScriptLayout(length, bidiLevels, null, log2vis);", "+\tStyleItem[] result = new StyleItem[length];", "+\tfor (int i=0; i<length; i++) {", "-\t\tfor (int i = 0; i < (result.length - 1) / 2 ; i++) {", "+\t\tfor (int i = 0; i < (length - 1) / 2 ; i++) {", "-\t\t\tresult[i] = result[result.length - i - 2];", "-\t\t\tresult[result.length - i - 2] = tmp;", "+\t\t\tresult[i] = result[length - i - 2];", "+\t\t\tresult[length - i - 2] = tmp;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81a0a300158e481b0b8d1c43c281571e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/wpf/org/eclipse/swt/dnd/ByteArrayTransfer.java", "commitBeforeChange": "8e746dffcecf23a840e3dfc0bae71b16f86cd38f", "commitAfterChange": "76097374ea0b9824b33cdc5c544b526a4229ae52", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 5, "signatureBeforeChange": "   int createDotNetString (String string)", "signatureAfterChange": " protected Object nativeToJava(TransferData transferData)", "diff": ["-", "-int createDotNetString (String string) {", "-\tif (string == null) return 0;", "-\tint length = string.length();", "-\tchar[] buffer = new char[length + 1];", "-\tstring.getChars(0, length, buffer, 0);", "-\treturn OS.gcnew_String(buffer);", "-}", "+\tif ( !isSupportedType(transferData) || transferData.pValue == 0) return null;", "+\tint byteArray = transferData.pValue;", "+\tint length = OS.Array_GetLength(byteArray, 0);", "+\tbyte[] buffer = new byte[length];", "+\tif (length == 0) return buffer;", "+\tOS.memcpy(buffer, transferData.pValue, length);", "+\treturn buffer;"]}], "num": 35922}
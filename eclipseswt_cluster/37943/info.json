{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90aec14f389ec9b184b28d698c7eccc2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b7c0ca82d9d50f0d5d50448a9ca5454", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "59eec4b8f7997739d601bb838ff1820a65819338", "commitAfterChange": "bf22825fa1cfccb273b10d6e2a81933de5666e42", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public String open ()", "signatureAfterChange": "\r public String open ()", "diff": ["-\t\t/* Use the character encoding for the default locale */\r", "-\t\tTCHAR prefix = new TCHAR (0, struct.nFileOffset - 1);\r", "-\t\tint byteCount2 = prefix.length () * TCHAR.sizeof;\r", "-\t\tOS.MoveMemory (prefix, lpstrFile, byteCount2);\r", "-\t\tfilterPath = prefix.toString (0, prefix.length ());\r", "-\t\t\r", "-\t\t* Get each file from the buffer.  Files are delimited\r", "-\t\t* by a NULL character with 2 NULL characters at the end.\r", "+\t\t* Bug in WinCE HPC.  For some reason, nFileOffset and\r", "+\t\t* nFileExtension are always zero.  The fix is to parse\r", "+\t\t* lpstrFile to calculate nFileOffset.  Note: WinCE does\r", "+\t\t* not support multiple selection.\r", "-\t\tint count = 0;\r", "-\t\tfileNames = new String [(style & SWT.MULTI) != 0 ? 4 : 1];\r", "-\t\tint start = struct.nFileOffset;\r", "-\t\tdo {\r", "-\t\t\tint end = start;\r", "-\t\t\twhile (end < buffer.length () && buffer.tcharAt (end) != 0) end++;\r", "-\t\t\tString string = buffer.toString (start, end - start);\r", "-\t\t\tstart = end;\r", "-\t\t\tif (count == fileNames.length) {\r", "-\t\t\t\tString [] newFileNames = new String [fileNames.length + 4];\r", "-\t\t\t\tSystem.arraycopy (fileNames, 0, newFileNames, 0, fileNames.length);\r", "+\t\tint nFileOffset = struct.nFileOffset;\r", "+\t\tif (OS.IsHPC && nFileOffset == 0) {\r", "+\t\t\tint index = 0; \r", "+\t\t\twhile (index < buffer.length ()) {\r", "+\t\t\t\tint ch = buffer.tcharAt (index);\r", "+\t\t\t\tif (ch == 0) break;\r", "+\t\t\t\tif (ch == '\\\\') nFileOffset = index;\r", "+\t\t\t\tindex++;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (nFileOffset != 0) {\r", "+\t\t\r", "+\t\t\t/* Use the character encoding for the default locale */\r", "+\t\t\tTCHAR prefix = new TCHAR (0, nFileOffset - 1);\r", "+\t\t\tint byteCount2 = prefix.length () * TCHAR.sizeof;\r", "+\t\t\tOS.MoveMemory (prefix, lpstrFile, byteCount2);\r", "+\t\t\tfilterPath = prefix.toString (0, prefix.length ());\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* Get each file from the buffer.  Files are delimited\r", "+\t\t\t* by a NULL character with 2 NULL characters at the end.\r", "+\t\t\t*/\r", "+\t\t\tint count = 0;\r", "+\t\t\tfileNames = new String [(style & SWT.MULTI) != 0 ? 4 : 1];\r", "+\t\t\tint start = nFileOffset;\r", "+\t\t\tdo {\r", "+\t\t\t\tint end = start;\r", "+\t\t\t\twhile (end < buffer.length () && buffer.tcharAt (end) != 0) end++;\r", "+\t\t\t\tString string = buffer.toString (start, end - start);\r", "+\t\t\t\tstart = end;\r", "+\t\t\t\tif (count == fileNames.length) {\r", "+\t\t\t\t\tString [] newFileNames = new String [fileNames.length + 4];\r", "+\t\t\t\t\tSystem.arraycopy (fileNames, 0, newFileNames, 0, fileNames.length);\r", "+\t\t\t\t\tfileNames = newFileNames;\r", "+\t\t\t\t}\r", "+\t\t\t\tfileNames [count++] = string;\r", "+\t\t\t\tif ((style & SWT.MULTI) == 0) break;\r", "+\t\t\t\tstart++;\r", "+\t\t\t} while (start < buffer.length () && buffer.tcharAt (start) != 0);\r", "+\t\t\t\r", "+\t\t\tif (fileNames.length > 0) fileName = fileNames  [0];\r", "+\t\t\tString separator = \"\";\r", "+\t\t\tint length = filterPath.length ();\r", "+\t\t\tif (length > 0 && filterPath.charAt (length - 1) != '\\\\') {\r", "+\t\t\t\tseparator = \"\\\\\";\r", "+\t\t\t}\r", "+\t\t\tfullPath = filterPath + separator + fileName;\r", "+\t\t\tif (count < fileNames.length) {\r", "+\t\t\t\tString [] newFileNames = new String [count];\r", "+\t\t\t\tSystem.arraycopy (fileNames, 0, newFileNames, 0, count);\r", "-\t\t\tfileNames [count++] = string;\r", "-\t\t\tif ((style & SWT.MULTI) == 0) break;\r", "-\t\t\tstart++;\r", "-\t\t} while (start < buffer.length () && buffer.tcharAt (start) != 0);\r", "-\t\t\r", "-\t\tif (fileNames.length > 0) fileName = fileNames  [0];\r", "-\t\tString separator = \"\";\r", "-\t\tint length = filterPath.length ();\r", "-\t\tif (length > 0 && filterPath.charAt (length - 1) != '\\\\') {\r", "-\t\t\tseparator = \"\\\\\";\r", "-\t\t}\r", "-\t\tfullPath = filterPath + separator + fileName;\r", "-\t\tif (count < fileNames.length) {\r", "-\t\t\tString [] newFileNames = new String [count];\r", "-\t\t\tSystem.arraycopy (fileNames, 0, newFileNames, 0, count);\r", "-\t\t\tfileNames = newFileNames;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55a0e782319c5fbc55c01a4a97fe55df", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "d4eb14ad4f7b1074d4935c2b9211f94b2750616d", "commitAfterChange": "7d562ae8941ad5655a314eac8dd19e3b2aaef50c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public String open ()", "signatureAfterChange": "\r public String open ()", "diff": ["-\tif (title == null) title = \"\";\r", "+\tif (title == null) title = \"\";\t\r", "-\tbyte [] buffer3 = Converter.wcsToMbcs (0, title, true);\r", "-\tint lpstrTitle = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, buffer3.length);\r", "-\tOS.MoveMemory (lpstrTitle, buffer3, buffer3.length); \r", "+\tTCHAR buffer3 = new TCHAR (0, title, true);\r", "+\tint byteCount3 = buffer3.length () * TCHAR.sizeof;\r", "+\tint lpstrTitle = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, byteCount3);\r", "+\tOS.MoveMemory (lpstrTitle, buffer3, byteCount3); \r", "-\tbyte [] buffer4 = Converter.wcsToMbcs (0, strFilter, true);\r", "-\tint lpstrFilter = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, buffer4.length);\r", "-\tOS.MoveMemory (lpstrFilter, buffer4, buffer4.length);\r", "+\tTCHAR buffer4 = new TCHAR (0, strFilter, true);\r", "+\tint byteCount4 = buffer4.length () * TCHAR.sizeof;\r", "+\tint lpstrFilter = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, byteCount4);\r", "+\tOS.MoveMemory (lpstrFilter, buffer4, byteCount4);\r", "-\tbyte [] name = Converter.wcsToMbcs (0, fileName, false);\r", "-\tif (filterPath == null) filterPath = \"\";\r", "-\t/* Use the character encoding for the default locale */\r", "-\tbyte [] path = Converter.wcsToMbcs (0, filterPath, false);\r", "+\tTCHAR name = new TCHAR (0, fileName, true);\r", "-\tbyte [] buffer2 = new byte [name.length + 1];\r", "-\tSystem.arraycopy (name, 0, buffer2, 0, name.length);\r", "-\tif (OS.GetFileTitle (buffer2, null, (short) 0) < 0) {\r", "-\t\tname = new byte [0];\r", "+\tif (!OS.IsWinCE) {\r", "+\t\tif (OS.GetFileTitle (name, null, (short) 0) < 0) {\r", "+\t\t\tname = new TCHAR (0, \"\", true);\r", "+\t\t}\r", "-\tint bufferSize = 256;\r", "-\tif ((style & SWT.MULTI) != 0) bufferSize = Math.max (256, BUFFER_SIZE);\r", "-\tint lpstrFile = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, bufferSize);\r", "-\tOS.MoveMemory (lpstrFile, name, Math.min (name.length, bufferSize - 1)); \r", "+\tint nMaxFile = 256;\r", "+\tif ((style & SWT.MULTI) != 0) nMaxFile = Math.max (nMaxFile, BUFFER_SIZE);\r", "+\tint byteCount = nMaxFile * TCHAR.sizeof;\r", "+\tint lpstrFile = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, byteCount);\r", "+\tint byteCountFile = Math.min (name.length () * TCHAR.sizeof, byteCount - TCHAR.sizeof);\r", "+\tOS.MoveMemory (lpstrFile, name, byteCountFile); \r", "-\tint lpstrInitialDir = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, bufferSize);\r", "-\tOS.MoveMemory (lpstrInitialDir, path, Math.min (path.length, bufferSize - 1)); \r", "+\tif (filterPath == null) filterPath = \"\";\r", "+\t/* Use the character encoding for the default locale */\r", "+\tTCHAR path = new TCHAR (0, filterPath, true);\r", "+\tint lpstrInitialDir = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, byteCount);\r", "+\tint byteCountDir = Math.min (path.length () * TCHAR.sizeof, byteCount - TCHAR.sizeof);\r", "+\tOS.MoveMemory (lpstrInitialDir, path, byteCountDir); \r", "-\tstruct.nMaxFile = bufferSize;\r", "+\tstruct.nMaxFile = nMaxFile;\r", "-\t\tOS.MoveMemory (lpstrFile, new byte [1], 1);\r", "+\t\tOS.MoveMemory (lpstrFile, new TCHAR (0, \"\", true), TCHAR.sizeof);\r", "-\t\tint count = 0;\r", "-\t\tfileNames = new String [1];\r", "-\t\tbyte [] buffer = new byte [struct.nMaxFile];\r", "-\t\tOS.MoveMemory (buffer, lpstrFile, buffer.length);\r", "-\t\tbyte [] prefix = new byte [struct.nFileOffset - 1];\r", "-\t\tSystem.arraycopy (buffer, 0, prefix, 0, prefix.length);\r", "+\t\t\r", "-\t\tfilterPath = new String (Converter.mbcsToWcs (0, prefix));\r", "+\t\tTCHAR buffer = new TCHAR (0, struct.nMaxFile);\r", "+\t\tint byteCount1 = buffer.length () * TCHAR.sizeof;\r", "+\t\tOS.MoveMemory (buffer, lpstrFile, byteCount1);\r", "+\t\t\r", "+\t\t/* Use the character encoding for the default locale */\r", "+\t\tTCHAR prefix = new TCHAR (0, struct.nFileOffset - 1);\r", "+\t\tint byteCount2 = prefix.length () * TCHAR.sizeof;\r", "+\t\tOS.MoveMemory (prefix, lpstrFile, byteCount2);\r", "+\t\tfilterPath = prefix.toString (0, prefix.length ());\r", "+\t\t\r", "+\t\t/*\r", "+\t\t* Get each file from the buffer.  Files are delimited\r", "+\t\t* by a NULL character with 2 NULL characters at the end.\r", "+\t\t*/\r", "+\t\tint count = 0;\r", "+\t\tfileNames = new String [(style & SWT.MULTI) != 0 ? 4 : 1];\r", "-\t\t\twhile (end < buffer.length && buffer [end] != 0) end++;\r", "-\t\t\tbyte [] buffer1 = new byte [end - start];\r", "-\t\t\tSystem.arraycopy (buffer, start, buffer1, 0, buffer1.length);\r", "+\t\t\twhile (end < buffer.length () && buffer.tcharAt (end) != 0) end++;\r", "+\t\t\tString string = buffer.toString (start, end - start);\r", "-\t\t\t/* Use the character encoding for the default locale */\r", "-\t\t\tString string = new String (Converter.mbcsToWcs (0, buffer1));\r", "-\t\t} while (start < buffer.length && buffer [start] != 0);\r", "+\t\t} while (start < buffer.length () && buffer.tcharAt (start) != 0);\r", "+\t\t\r"]}], "num": 37943}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cb8a569b9c510b1a5b3b723deb494530", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa6a6d70d36922e28f037e584630e596", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "7e90566151ab4dd456ace3119e90ad7d648ee3fc", "commitAfterChange": "1befe0136682863b5f3d5f45a2080356caf14bf7", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 130, "signatureBeforeChange": "  static int applicationDelegateProc(int id, int sel, int arg0)", "signatureAfterChange": "  static int applicationDelegateProc(int id, int sel, int arg0)", "diff": ["-\t} ", "-\treturn 0;", "+\t} else if (sel == OS.sel_applicationWillResignActive_) {", "+\t\tShell[] shells = display.getShells();", "+\t\tfor (int i = 0; i < shells.length; i++) {", "+\t\t\tshells[i].clearLevel();", "+\t\t}", "+\t}", "+ \treturn 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6285a47a7bf2563338e2d5601319b19", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/wpf/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "8604a879350c0f8dd07baf7e03c174d8d959a20b", "commitAfterChange": "36eb677d4acfbe9a055214ef28f591b972bc821e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void setContents(Object[] data, Transfer[] dataTypes, int clipboards)", "signatureAfterChange": " public void setContents(Object[] data, Transfer[] dataTypes, int clipboards)", "diff": ["-\t\tTransferData transferData = new TransferData(); ", "-\t\ttransfer.javaToNative(data[i], transferData);", "-\t\tOS.Clipboard_SetData(transferData.format, transferData.pValue);", "-\t\tOS.GCHandle_Free(transferData.pValue);", "+\t\tint[] formats = transfer.getTypeIds();", "+\t\tfor (int j = 0; j < formats.length; j++) {", "+\t\t\tTransferData transferData = new TransferData(); ", "+\t\t\ttransferData.format = formats[j];", "+\t\t\ttransfer.javaToNative(data[i], transferData);", "+\t\t\tif (transferData.pValue != 0) {", "+\t\t\t\tOS.Clipboard_SetData(transferData.format, transferData.pValue);", "+\t\t\t\tOS.GCHandle_Free(transferData.pValue);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "715efe48f2982de5a8252869ea38c831", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "abd107467b5837fa0581218bc9beec69bc66414f", "commitAfterChange": "23c2bc8468cd1d7c6b5e538683fc80265d48ca63", "methodNumberBeforeChange": 199, "methodNumberAfterChange": 199, "signatureBeforeChange": " void handleResize(Event event)", "signatureAfterChange": " void handleResize(Event event)", "diff": ["-\t\t\tlineCache.calculateClientArea();", "+\t\t\t//lineCache.calculateClientArea();", "+\t\t\tlineCache.calculate(0, content.getLineCount());", "+\t\t\t//TODO fix verticalScrollOffset", "+\t\t\tint height = 0;", "+\t\t\tfor (int i = 0; i < topIndex; i++) {", "+\t\t\t\theight += lineCache.getLineHeight(i);", "+\t\t\t}", "+\t\t\theight -= partialHeight;", "+\t\t\tverticalScrollOffset = height;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0e6b7ddf5b0abfcd6fce6528c828062", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/ByteArrayTransfer.java", "commitBeforeChange": "8727d22e38059537dcc917ca55f0d6ddcedac706", "commitAfterChange": "0e7716ec8b85ed8b2a10afa69a4dfa63fe12298f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public boolean isSupportedType(TransferData transferData)", "signatureAfterChange": "  public boolean isSupportedType(TransferData transferData)", "diff": ["+\tif (transferData != null) {", "+\t\tint[] types= getTypeIds();", "+\t\tfor (int i= 0; i < types.length; i++) {", "+\t\t\tif (transferData.type == types[i])", "+\t\t\t\treturn true;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a3934bbab00b884b5f9db7430c2a36d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "b16a097ce1f227d4fd237cb6f8c0ba950eb50b9e", "commitAfterChange": "ad9e4c7cb4e85f9de20630936ecc2b154a562c71", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 91, "signatureBeforeChange": " public void setSelection (TreeItem [] items)", "signatureAfterChange": " public void setSelection (TreeItem [] items)", "diff": ["-\tif (length > 0 && items [0] != null) showItem (items [0], true);", "+\tif (length > 0) {", "+\t\tint index = -1;", "+\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\tif (items [i] != null) {", "+\t\t\t\tindex = i;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\tif (index != -1) showItem (items [index], true);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99edcbb9cc176f169125b7a9b73c8765", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "5f2f9722fb558345b2e1962ac41660a1bc2aed06", "commitAfterChange": "6d9ffc9776ed53230601b1f118f94e4523e13f00", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "\r public int indexOf (String string, int start)", "signatureAfterChange": "\r public int indexOf (String string, int start)", "diff": ["+\t\r", "+\t/*\r", "+\t* Bug in Windows.  For some reason, CB_FINDSTRINGEXACT\r", "+\t* will not find empty strings even though it is legal\r", "+\t* to insert an empty string into a combo.  The fix is\r", "+\t* to search the combo, an item at a time.\r", "+\t*/\r", "+\tif (string.length () == 0) {\r", "+\t\tint count = getItemCount ();\r", "+\t\tfor (int i=start; i<count; i++) {\r", "+\t\t\tif (string.equals (getItem (i))) return i;\r", "+\t\t}\r", "+\t\treturn -1;\r", "+\t}\r", "+\r", "+\t/* Use CB_FINDSTRINGEXACT to search for the item */\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4333827d1a19020a2ee901198da79752", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabItem.java", "commitBeforeChange": "79096269bec9be1584da7b8d31d5fe9573da995d", "commitAfterChange": "6509ef8bfeb70fc2d3b31e1b10ac7b68ca1e7295", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " void drawUnselected(GC gc)", "signatureAfterChange": " void drawUnselected(GC gc)", "diff": ["-\tif (!isShowing()) return;", "+\tif (!showing) return;", "-\tif (parent.indexOf(this) != parent.selectedIndex - 1) {", "+\tint nextVisible = -1;", "+\tfor (int i = parent.indexOf(this)+1; i < parent.items.length; i++) {", "+\t\tif (parent.items[i].showing) {", "+\t\t\tnextVisible = i;", "+\t\t\tbreak;", "+\t\t}", "+\t}", "+\tif (nextVisible == -1 || nextVisible != parent.selectedIndex) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eac440ed40df18b76ed5483c5da974d8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "0f88e2b7a0af4609640cfaac1bcd1fa7ed97ef34", "commitAfterChange": "43a9a30d155c15e81841e9561ffb9e9909a6062e", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": "  void onDispose (Display display)", "signatureAfterChange": "  void onDispose (Display display)", "diff": ["+\tif (listener != null) {", "+\t\tint[] folderEvents = new int[] {", "+\t\t\tSWT.Dispose,", "+\t\t\tSWT.Resize,  ", "+\t\t\tSWT.FocusIn,", "+\t\t\tSWT.Activate,", "+\t\t\tSWT.Deactivate,", "+\t\t\tSWT.Show,", "+\t\t\tSWT.KeyDown,", "+\t\t};", "+\t\tfor (int i = 0; i < folderEvents.length; i++) {", "+\t\t\tbrowser.removeListener (folderEvents[i], listener);", "+\t\t}", "+\t\tlistener = null;", "+\t}", "+", "-", "+\t"]}], "num": 764}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4230d4d43138d8ec584d713a96ca0902", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e92c8c72a34a76bd0fc7573079af121", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TextTransfer.java", "commitBeforeChange": "74553fa6850361f786837718de64643b391519f8", "commitAfterChange": "bf33a068cd8d34feb66b3cb1cbaacdbe09b72620", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-\tif (!isSupportedType(transferData) || transferData.pIDataObject == 0) {", "-\t\ttransferData.result = COM.E_FAIL;", "-\t\treturn null;", "-\t}", "+\tif (!isSupportedType(transferData) || transferData.pIDataObject == 0) return null;", "-\t", "-", "-\t\t", "-\tif (transferData.result != COM.S_OK) {", "-\t\treturn null;", "-\t}", "-\t", "+\tif (transferData.result != COM.S_OK) return null;", "-\t/* Ensure byteCount is a multiple of 2 bytes on UNICODE platforms */", "-\tint size = COM.GlobalSize(hMem) / TCHAR.sizeof * TCHAR.sizeof;", "-\tTCHAR buffer = new TCHAR(0, size / TCHAR.sizeof);", "-\tint ptr = COM.GlobalLock(hMem);", "-\tCOM.MoveMemory(buffer, ptr, size);", "-\tCOM.GlobalUnlock(hMem);\t", "-\tCOM.GlobalFree(hMem);", "-\treturn buffer.toString(0, buffer.strlen());", "+\ttry {", "+\t\tswitch (transferData.type) {", "+\t\t\tcase CF_UNICODETEXTID: {", "+\t\t\t\t/* Ensure byteCount is a multiple of 2 bytes on UNICODE platforms */", "+\t\t\t\tint size = COM.GlobalSize(hMem) / TCHAR.sizeof * TCHAR.sizeof;", "+\t\t\t\tif (size == 0) return null;", "+\t\t\t\tTCHAR buffer = new TCHAR(0, size / TCHAR.sizeof);", "+\t\t\t\tint ptr = COM.GlobalLock(hMem);", "+\t\t\t\tif (ptr == 0) return null;", "+\t\t\t\ttry {", "+\t\t\t\t\tCOM.MoveMemory(buffer, ptr, size);", "+\t\t\t\t\treturn buffer.toString(0, buffer.strlen());", "+\t\t\t\t} finally {", "+\t\t\t\t\tCOM.GlobalUnlock(hMem);\t", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcase CF_TEXTID: {", "+\t\t\t\tint lpMultiByteStr = COM.GlobalLock(hMem);", "+\t\t\t\tif (lpMultiByteStr == 0) return null;", "+\t\t\t\ttry {", "+\t\t\t\t\tint cchWideChar = COM.MultiByteToWideChar (CodePage, COM.MB_PRECOMPOSED, lpMultiByteStr, -1, null, 0);", "+\t\t\t\t\tif (cchWideChar == 0) return null;", "+\t\t\t\t\tchar[] lpWideCharStr = new char [cchWideChar - 1];", "+\t\t\t\t\tCOM.MultiByteToWideChar (CodePage, COM.MB_PRECOMPOSED, lpMultiByteStr, -1, lpWideCharStr, lpWideCharStr.length);", "+\t\t\t\t\treturn new String(lpWideCharStr);", "+\t\t\t\t} finally {", "+\t\t\t\t\tCOM.GlobalUnlock(hMem);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t} finally {", "+\t\tCOM.GlobalFree(hMem);", "+\t}", "+\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b50428ec9d19fa3e5fca4099b3e4d487", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "b2a57ac5aeda1a37b1c7d7c906ff837c3c7313d8", "commitAfterChange": "f3828846066629968a44d377ba246bddf80a917b", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 44, "signatureBeforeChange": "\r \t\r \tint accLocation(int pxLeft, int pyTop, int pcxWidth, int pcyHeight, int varChild_vt, int varChild_reserved1, int varChild_lVal, int varChild_reserved2)", "signatureAfterChange": "\r \t\r \tint accLocation(int pxLeft, int pyTop, int pcxWidth, int pcyHeight, int varChild_vt, int varChild_reserved1, int varChild_lVal, int varChild_reserved2)", "diff": ["-\t\tif (accessibleControlListeners.size() == 0) {\r", "-\t\t\treturn iaccessible.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild_vt, varChild_reserved1, varChild_lVal, varChild_reserved2);\r", "+\t\tif (iaccessible == null) return COM.CO_E_OBJNOTCONNECTED;\r", "+\t\tif ((varChild_vt & 0xFFFF) != COM.VT_I4) return COM.E_INVALIDARG;\r", "+\r", "+\t\t/* Get the default location from the OS. */\r", "+\t\tint osLeft = 0, osTop = 0, osWidth = 0, osHeight = 0;\r", "+\t\tint code = iaccessible.accLocation(pxLeft, pyTop, pcxWidth, pcyHeight, varChild_vt, varChild_reserved1, varChild_lVal, varChild_reserved2);\r", "+\t\tif (code == COM.E_INVALIDARG) code = COM.S_FALSE; // proxy doesn't know about app childID\r", "+\t\tif (accessibleControlListeners.size() == 0) return code;\r", "+\t\tif (code == COM.S_OK) {\r", "+\t\t\tint[] pLeft = new int[1], pTop = new int[1], pWidth = new int[1], pHeight = new int[1];\r", "+\t\t\tCOM.MoveMemory(pLeft, pxLeft, 4);\r", "+\t\t\tCOM.MoveMemory(pTop, pyTop, 4);\r", "+\t\t\tCOM.MoveMemory(pWidth, pcxWidth, 4);\r", "+\t\t\tCOM.MoveMemory(pHeight, pcyHeight, 4);\r", "+\t\t\tosLeft = pLeft[0]; osTop = pTop[0]; osWidth = pWidth[0]; osHeight = pHeight[0];\r", "-\t\tif ((varChild_vt & 0xFFFF) != COM.VT_I4) return COM.E_INVALIDARG;\r", "-\t\tevent.childID = varChild_lVal - 1;\r", "+\t\tevent.childID = (varChild_lVal == COM.CHILDID_SELF) ? ACC.CHILDID_SELF : varChild_lVal - 1;\r", "+\t\tevent.x = osLeft;\r", "+\t\tevent.y = osTop;\r", "+\t\tevent.width = osWidth;\r", "+\t\tevent.height = osHeight;\r"]}], "num": 1048}
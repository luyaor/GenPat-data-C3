{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e832d181389ce920bdb42974a7c57db6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b8c5fe9aedbadb331624a918b01fcd1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "f8500e186a498428f3e1d946e4db818184e6f78b", "commitAfterChange": "33cdf1771837247f32d8f71a9383b0c77d8c27f4", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public Point getSize ()", "signatureAfterChange": " public Point getSize ()", "diff": ["-\t\t\tRECT rect = new RECT ();", "+\t\t\tRECT rect1 = new RECT ();", "-\t\t\tif (OS.GetMenuItemRect (hwndParent, handle, count - 1, rect)) {", "-\t\t\t\tOS.MapWindowPoints (0, hwndParent, rect, 2);", "-\t\t\t\tint width = rect.right + 4;", "-\t\t\t\tint height = rect.bottom + 4;", "-\t\t\t\treturn new Point (width, height);", "+\t\t\tif (OS.GetMenuItemRect (hwndParent, handle, 0, rect1)) {", "+\t\t\t\tRECT rect2 = new RECT ();", "+\t\t\t\tif (OS.GetMenuItemRect (hwndParent, handle, count - 1, rect2)) {", "+\t\t\t\t\tint width = (rect2.right - rect2.left) + 4;", "+\t\t\t\t\tint height = (rect2.bottom - rect1.top) + 4;", "+\t\t\t\t\treturn new Point (width, height);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa2a44f78548f103c5b6bcab382485b1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "f72bfdff3bc176627d604e0a70e04d5844399d73", "commitAfterChange": "06f7df35a761c3b3ac5b1850e81b81415f7cfef4", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["-\tif (!OS.IsPPC) return super.WM_LBUTTONDOWN (wParam, lParam);", "-\tLRESULT result = null;", "-\tif (!sendMouseEvent (SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam)) {", "-\t\tresult = LRESULT.ZERO;", "-\t}", "-\t/*", "-\t* Note: On WinCE PPC, only attempt to recognize the gesture for", "-\t* a context menu when the control contains a valid menu or there", "-\t* are listeners for the MenuDetect event.", "-\t* ", "-\t* Note: On WinCE PPC, the gesture that brings up a popup menu", "-\t* on the text widget must keep the current text selection.  As a", "-\t* result, the window proc is only called if the menu is not shown.", "-\t*/", "-\tboolean hasMenu = menu != null && !menu.isDisposed ();", "-\tif (hasMenu || hooks (SWT.MenuDetect)) {", "-\t\tint x = (short) (lParam & 0xFFFF);", "-\t\tint y = (short) (lParam >> 16);", "-\t\tSHRGINFO shrg = new SHRGINFO ();", "-\t\tshrg.cbSize = SHRGINFO.sizeof;", "-\t\tshrg.hwndClient = handle;", "-\t\tshrg.ptDown_x = x;", "-\t\tshrg.ptDown_y = y; ", "-\t\tshrg.dwFlags = OS.SHRG_RETURNCMD;", "-\t\tint type = OS.SHRecognizeGesture (shrg);", "-\t\tif (type == OS.GN_CONTEXTMENU) {", "-\t\t\tshowMenu (x, y);", "-\t\t\treturn LRESULT.ONE;", "+\tif (OS.IsPPC) {", "+\t\tLRESULT result = null;", "+\t\tboolean dispatch = sendMouseEvent (SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam);", "+\t\t/*", "+\t\t* Note: On WinCE PPC, only attempt to recognize the gesture for", "+\t\t* a context menu when the control contains a valid menu or there", "+\t\t* are listeners for the MenuDetect event.", "+\t\t* ", "+\t\t* Note: On WinCE PPC, the gesture that brings up a popup menu", "+\t\t* on the text widget must keep the current text selection.  As a", "+\t\t* result, the window proc is only called if the menu is not shown.", "+\t\t*/", "+\t\tboolean hasMenu = menu != null && !menu.isDisposed ();", "+\t\tif (hasMenu || hooks (SWT.MenuDetect)) {", "+\t\t\tint x = (short) (lParam & 0xFFFF);", "+\t\t\tint y = (short) (lParam >> 16);", "+\t\t\tSHRGINFO shrg = new SHRGINFO ();", "+\t\t\tshrg.cbSize = SHRGINFO.sizeof;", "+\t\t\tshrg.hwndClient = handle;", "+\t\t\tshrg.ptDown_x = x;", "+\t\t\tshrg.ptDown_y = y; ", "+\t\t\tshrg.dwFlags = OS.SHRG_RETURNCMD;", "+\t\t\tint type = OS.SHRecognizeGesture (shrg);", "+\t\t\tif (type == OS.GN_CONTEXTMENU) {", "+\t\t\t\tshowMenu (x, y);", "+\t\t\t\treturn LRESULT.ONE;", "+\t\t\t}", "+\t\tif (dispatch) {", "+\t\t\tresult = new LRESULT (callWindowProc (handle, OS.WM_LBUTTONDOWN, wParam, lParam));", "+\t\t} else {", "+\t\t\tresult = LRESULT.ZERO;", "+\t\t}", "+\t\tif (OS.GetCapture () != handle) OS.SetCapture (handle);", "+\t\treturn result;", "-\tif (OS.GetCapture () != handle) OS.SetCapture (handle);", "-\treturn result;", "+\t return super.WM_LBUTTONDOWN (wParam, lParam);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b064a3638d50f382140383ff8689a10a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/DragSource.java", "commitBeforeChange": "ea4586e456e1cdae3b63bb826f14f9516f6accba", "commitAfterChange": "4f375a43a124d0c6499643b95010a738e7d29f44", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  private int QueryContinueDrag(int fEscapePressed, int grfKeyState)", "signatureAfterChange": "  private int QueryContinueDrag(int fEscapePressed, int grfKeyState)", "diff": ["-\t\tOS.MapWindowPoints (0, hwndDrag, pt, 1);", "-\t\tOS.ImageList_DragMove(pt.x, pt.y);", "+\t\tRECT rect = new RECT ();", "+\t\tOS.GetWindowRect (hwndDrag, rect);", "+\t\tOS.ImageList_DragMove (pt.x - rect.left, pt.y - rect.top);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a19674e28408ef0f514cc1c1bd8ee19d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "e27af9edbc37fc3f795c2a59ac30799d616b20cf", "commitAfterChange": "30e8044688ba62159f92439db3c6fa804252d489", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "\r void paintSubItem(Event event, TableItem paintItem, TableColumn column, int paintYPosition)", "signatureAfterChange": "\r void paintSubItem(Event event, TableItem paintItem, TableColumn column, int paintYPosition)", "diff": ["+\tPoint paintPosition;\r", "-\t\t\titemDrawStopX - clipX, event.height);\t\t\r", "+\t\t\tMath.max(0, itemDrawStopX - clipX), event.height);\t\t\r", "-\tcolumn.paint(paintItem, event.gc, paintYPosition);\r", "+\tpaintPosition = new Point(columnBounds.x, paintYPosition);\r", "+\tpaintItem.paint(event.gc, paintPosition, column);\r"]}], "num": 43743}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c35064cd53581c548c3f5528f59584c5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "372f44167232413d016b3aa9a901ceff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "e38f7ba08e4cd9896dddbc5916c5187c2e1b63eb", "commitAfterChange": "7349d1b65ee9a9edeeac8e2e96a33b2c8d655b80", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tint getValueAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \t \tint getValueAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tString osValueAttribute = null;", "+\t\tint childID = getChildIDFromEvent(theEvent);", "-\t\tevent.childID = getChildIDFromEvent(theEvent);", "-\t\tevent.result = osValueAttribute;", "+\t\tevent.childID = childID;", "+\t\tevent.detail = -1;", "+\t\tevent.result = null;", "-\t\tswitch (event.detail) {", "-\t\tcase ACC.ROLE_RADIOBUTTON: // 1 = on, 0 = off", "-\t\tcase ACC.ROLE_CHECKBUTTON: // 1 = checked, 0 = unchecked, 2 = mixed", "-\t\tcase ACC.ROLE_SCROLLBAR: // numeric value representing the position of the scroller", "-\t\tcase ACC.ROLE_TABITEM:  // 1 = selected, 0 = not selected", "-\t\tcase ACC.ROLE_SLIDER: // the value associated with the position of the slider thumb", "-\t\tcase ACC.ROLE_PROGRESSBAR: // the value associated with the fill level of the progress bar", "-\t\t\tif (event.result == null) return code;", "-\t\t\tint number = Integer.parseInt(event.result);", "-\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFTypeRef, 4, new int [] {number});", "-\t\t\tbreak;", "-\t\tcase ACC.ROLE_TABFOLDER: // the accessibility object representing the currently selected tab item", "-\t\tcase ACC.ROLE_COMBOBOX: // text of the currently selected item", "-\t\tcase ACC.ROLE_TEXT: // text in the text field", "-\t\t\tif (event.result == null) return code;", "-\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringToStringRef(event.result)});", "-\t\t\tbreak;", "-\t\tcase ACC.ROLE_LABEL: // text in the label", "-\t\t\t/* On a Mac, the 'value' of a label is the same as the 'name' of the label. */", "-\t\t\tAccessibleEvent e = new AccessibleEvent(this);", "-\t\t\te.childID = getChildIDFromEvent(theEvent);", "-\t\t\te.result = osValueAttribute;", "-\t\t\tfor (int i = 0; i < accessibleListeners.size(); i++) {", "-\t\t\t\tAccessibleListener listener = (AccessibleListener) accessibleListeners.elementAt(i);", "-\t\t\t\tlistener.getName(e);", "+\t\tint role = event.detail;", "+\t\tString value = event.result;", "+\t\tif (value != null || role == ACC.ROLE_LABEL) {", "+\t\t\tint stringRef = 0;", "+\t\t\tswitch (role) {", "+\t\t\tcase ACC.ROLE_RADIOBUTTON: // 1 = on, 0 = off", "+\t\t\tcase ACC.ROLE_CHECKBUTTON: // 1 = checked, 0 = unchecked, 2 = mixed", "+\t\t\tcase ACC.ROLE_SCROLLBAR: // numeric value representing the position of the scroller", "+\t\t\tcase ACC.ROLE_TABITEM:  // 1 = selected, 0 = not selected", "+\t\t\tcase ACC.ROLE_SLIDER: // the value associated with the position of the slider thumb", "+\t\t\tcase ACC.ROLE_PROGRESSBAR: // the value associated with the fill level of the progress bar", "+\t\t\t\ttry {", "+\t\t\t\t\tint number = Integer.parseInt(value);", "+\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeSInt32, 4, new int [] {number});", "+\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t} catch (NumberFormatException ex) {", "+\t\t\t\t\tif (value.equalsIgnoreCase(\"true\")) {", "+\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeBoolean, 4, new boolean [] {true});", "+\t\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (value.equalsIgnoreCase(\"false\")) {", "+\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeBoolean, 4, new boolean [] {false});", "+\t\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase ACC.ROLE_TABFOLDER: // the accessibility object representing the currently selected tab item", "+\t\t\t\t//break;", "+\t\t\tcase ACC.ROLE_COMBOBOX: // text of the currently selected item", "+\t\t\tcase ACC.ROLE_TEXT: // text in the text field", "+\t\t\t\tstringRef = stringToStringRef(value);", "+\t\t\t\tbreak;", "+\t\t\tcase ACC.ROLE_LABEL: // text in the label", "+\t\t\t\t/* On a Mac, the 'value' of a label is the same as the 'name' of the label. */", "+\t\t\t\tAccessibleEvent e = new AccessibleEvent(this);", "+\t\t\t\te.childID = childID;", "+\t\t\t\te.result = null;", "+\t\t\t\tfor (int i = 0; i < accessibleListeners.size(); i++) {", "+\t\t\t\t\tAccessibleListener listener = (AccessibleListener) accessibleListeners.elementAt(i);", "+\t\t\t\t\tlistener.getName(e);", "+\t\t\t\t}", "+\t\t\t\tif (e.result != null) {", "+\t\t\t\t\tstringRef = stringToStringRef(e.result);", "+\t\t\t\t} else {", "+\t\t\t\t\tif (value != null) stringRef = stringToStringRef(value);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "-\t\t\tif (e.result == null) return code;", "-\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringToStringRef(e.result)});", "-\t\t\tbreak;", "+\t\t\tif (stringRef != 0) {", "+\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef});", "+\t\t\t\tOS.CFRelease(stringRef);", "+\t\t\t\treturn OS.noErr;", "+\t\t\t}", "-\t\treturn OS.noErr;", "+\t\treturn code;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8363b72b9706ea0949bf1ee6a36febad", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "ee359c5255474db5647bd098f9e5599338f8c1aa", "commitAfterChange": "46b2808e803b0a1f72cf9e4d36b0adc76790e712", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "diff": ["+\tgc.checkGC(GC.FOREGROUND_FILL);", "+\tif (gc.data.updateClip) gc.setCGClipping();", "+\tOS.CGContextSaveGState(gc.handle);", "-\tOS.CGContextSaveGState(gc.handle);", "-\tRectangle rect = null;", "-\tRegion clipping = null, region = null;", "+\tint rgn = 0;", "+\tCGRect rect = null;", "+\tCallback callback = null;", "-\t\tif (run.style == null || run.style.background == null) continue;", "-\t\tOS.CGContextSetFillColor(gc.handle, run.style.background.handle);", "-\t\tif (clipping == null) {", "-\t\t\tregion = new Region();", "-\t\t\tclipping = new Region();", "-\t\t\tgc.getClipping(clipping);", "-\t\t\trect = clipping.getBounds();", "-\t\t}", "+\t\tTextStyle style = run.style;", "+\t\tif (style == null || style.background == null) continue;", "-\t\t\t\t\tOS.ATSUGetTextHighlight(layout, OS.Long2Fix(x), OS.Long2Fix(y + lineY + lineAscent[i]), highStart, highLen, region.handle);", "-\t\t\t\t\tregion.intersect(clipping);", "-\t\t\t\t\tgc.setClipping(region);", "-\t\t\t\t\tgc.fillRectangle(rect);", "+\t\t\t\t\tif (rgn == 0) rgn = OS.NewRgn();", "+\t\t\t\t\tOS.ATSUGetTextHighlight(layout, OS.Long2Fix(x), OS.Long2Fix(y + lineY + lineAscent[i]), highStart, highLen, rgn);", "+\t\t\t\t\tOS.CGContextSaveGState(gc.handle);", "+\t\t\t\t\tif (callback == null) {", "+\t\t\t\t\t\tcallback = new Callback(this, \"regionToRects\", 4);", "+\t\t\t\t\t\tif (callback.getAddress() == 0) SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.QDRegionToRects(rgn, OS.kQDParseRegionFromTopLeft, callback.getAddress(), gc.handle);", "+\t\t\t\t\tif (rect == null) rect = new CGRect();", "+\t\t\t\t\tOS.CGContextGetPathBoundingBox(gc.handle, rect);", "+\t\t\t\t\tOS.CGContextEOClip(gc.handle);", "+\t\t\t\t\tOS.CGContextSetFillColorSpace(gc.handle, device.colorspace);", "+\t\t\t\t\tOS.CGContextSetFillColor(gc.handle, style.background.handle);", "+\t\t\t\t\tOS.CGContextFillRect(gc.handle, rect);", "+\t\t\t\t\tOS.CGContextRestoreGState(gc.handle);", "-\tif (clipping != null) {", "-\t\tgc.setClipping(clipping);", "-\t\tOS.CGContextRestoreGState(gc.handle);", "-\t\tOS.CGContextSaveGState(gc.handle);", "-\t\tclipping.dispose();", "-\t\tregion.dispose();", "-\t}", "+\tif (callback != null) callback.dispose();", "+\tif (rgn != 0) OS.DisposeRgn(rgn);", "-\tOS.CGContextSetFillColor(gc.handle, gc.data.foreground);"]}], "num": 47359}
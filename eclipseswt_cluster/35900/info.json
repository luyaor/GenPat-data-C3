{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45be04a50036c7553921029bc0d8d824", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b49a3e6601cdf943a6a539f1e6d11d9e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "6930fdd35d9cdffd6d05c778fb4b82a2018d7fcb", "commitAfterChange": "4b4619a6b5b2cd61a37c980601ead9593d587b9d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  void applyEditSegments ()", "signatureAfterChange": "  void applyEditSegments ()", "diff": ["-\tif (!hooks (SWT.Segments) && !filters (SWT.Segments)) return;", "+\tif (!hooks (SWT.Segments) && !filters (SWT.Segments) && (state & HAS_AUTO_DIRECTION) == 0) return;", "-", "-\t/* Get segments text */", "-\tEvent event = new Event ();", "-\tevent.text = string;", "-\tevent.segments = segments;", "-\tsendEvent (SWT.Segments, event);", "+\t/* Get segments */", "+\tsegments = null;", "+\tEvent event = getSegments (string);", "+\tif (event == null || event.segments == null) return;", "-\tif (segments == null) return;", "-\tint nSegments = segments.length;", "+\tint nSegments = segments.length; ", "-\tlength = string == null ? 0 : string.length ();", "-", "-\tfor (int i = 1; i < nSegments; i++) {", "-\t\tif (event.segments [i] < event.segments [i - 1] || event.segments [i] > length) {", "-\t\t\terror (SWT.ERROR_INVALID_ARGUMENT);", "-\t\t}", "-\t}", "-", "+\t}", "+\tif (segmentsChars != null && segmentsChars.length > 0) {", "+\t\t/* ", "+\t\t * In addition to enforcing the required direction by prepending a UCC (LRE", "+\t\t * or RLE), also set the direction through a Window style.", "+\t\t * This is to ensure correct caret movement, and makes sense even when the", "+\t\t * UCC was added by an authentic SegmentListener.", "+\t\t */", "+\t\tif (segmentsChars[0] == RLE) {", "+\t\t\tsuper.updateTextDirection(SWT.RIGHT_TO_LEFT);", "+\t\t} else if (segmentsChars[0] == LRE) {", "+\t\t\tsuper.updateTextDirection(SWT.LEFT_TO_RIGHT);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "462794ae2bb1bd6e1f0205a2f654a889", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "2353899a24ebfcb319f8565185c51f1eb7d4d7d0", "commitAfterChange": "9de15cee635b8b62090b1701f3da6136926121d9", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public String getText (int start, int end)", "signatureAfterChange": " public String getText (int start, int end)", "diff": ["-\tint numChars = end - start + 1;", "-\tif (numChars < 0 || start < 0) return \"\";", "+\tif (!(0 <= start && start <= end)) error (SWT.ERROR_INVALID_RANGE);", "-\t\treturn hiddenText.substring (start, Math.min (hiddenText.length (), end));", "+\t\tif (hiddenText.length () <= end) error (SWT.ERROR_INVALID_RANGE);", "+\t\treturn hiddenText.substring (start, end);", "-\tint length = (numChars * 4 /* MB_CUR_MAX */) + 1;", "+\tint ptr = OS.XmTextGetString (handle);", "+\tif (ptr == 0) return \"\";", "+\tint length = OS.strlen (ptr);", "-\tint code = OS.XmTextGetSubstring (handle, start, numChars, length, buffer);", "-\tif (code == OS.XmCOPY_FAILED) return \"\";", "-\tchar [] unicode = Converter.mbcsToWcs (getCodePage (), buffer);", "-\tif (code == OS.XmCOPY_TRUNCATED) {", "-\t\tnumChars = OS.XmTextGetLastPosition (handle) - start;", "-\t}", "-\treturn new String (unicode, 0, numChars);", "+\tOS.memmove (buffer, ptr, length);", "+\tOS.XtFree (ptr);", "+\tif (length <= end) error (SWT.ERROR_INVALID_RANGE);", "+\treturn new String (Converter.mbcsToWcs (getCodePage (), buffer));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd238f8e4d5fe3ce5012417989141bb6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "5ed9eadeff488afd5cd81c46122632ed8c74a1f7", "commitAfterChange": "ea15a960a853001410e58a3d24c8aee2da7a0620", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "  void clear ()", "signatureAfterChange": "  void clear ()", "diff": ["-\ttext = \"\";", "-\timage = null;", "-\tif (stringHandle != null) {", "-\t\tfor (int i = 0; i < stringHandle.length; i++) {", "-\t\t\tif (stringHandle [i] != 0) OS.GCHandle_Free (stringHandle [i]);", "-\t\t}", "-\t}", "-\tstringHandle = null;", "-\tstrings = null;", "+\tif (imageList != 0) OS.ArrayList_Clear (imageList);", "+\tif (stringList != 0) OS.ArrayList_Clear (stringList);", "+\tupdateCheckState (false);", "-\tint count = Math.max (1, parent.columnCount);", "-\tfor (int i = 0; i < count; i++) {", "-\t\tresetText (i);", "-\t\tresetImage (i);", "-\t}", "+\tif (ignoreNotify) return;", "+\tint row = OS.ContentControl_Content (handle);", "+\tOS.SWTRow_NotifyPropertyChanged (row, Table.TEXT_NOTIFY);", "+\tOS.SWTRow_NotifyPropertyChanged (row, Table.IMAGE_NOTIFY);", "+\tOS.GCHandle_Free (row);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f2de963f2387f4d1d46effccdafe8a6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "5c812e1875423c70eb06fe83223ed77171c7c77d", "commitAfterChange": "35b5529a5d7d4dd6537d0fb3ab92f23837526141", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public void remove (int start, int end)", "signatureAfterChange": "  void remove (int index, boolean fixScroll)", "diff": ["+", "+void remove (int index, boolean fixScroll) {", "+\tif (fixScroll) setScrollWidth();", "-\tfor (int i=0; i<length; i++) remove (start);"]}], "num": 35900}
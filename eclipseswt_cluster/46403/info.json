{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b66b8cdc74c6a1d8759ddd9ce28992a4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "761eb3bc6ccce876b90cd9cdce5aef45", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "86e590387fc98740eb431ea80c5942750b2c6d0c", "commitAfterChange": "b9e679d47d2b65f7ad52dcb0b148e03cb3e9caf3", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": "  void initializeCallbacks ()", "signatureAfterChange": "  void initializeCallbacks ()", "diff": ["+\tclosures [Widget.BACKSPACE] = OS.g_cclosure_new (windowProc2, Widget.BACKSPACE, 0);", "+\tclosures [Widget.BACKSPACE_INVERSE] = OS.g_cclosure_new (windowProc2, Widget.BACKSPACE_INVERSE, 0);", "+\tclosures [Widget.COPY_CLIPBOARD] = OS.g_cclosure_new (windowProc2, Widget.COPY_CLIPBOARD, 0);", "+\tclosures [Widget.COPY_CLIPBOARD_INVERSE] = OS.g_cclosure_new (windowProc2, Widget.COPY_CLIPBOARD_INVERSE, 0);", "+\tclosures [Widget.CUT_CLIPBOARD] = OS.g_cclosure_new (windowProc2, Widget.CUT_CLIPBOARD, 0);", "+\tclosures [Widget.CUT_CLIPBOARD_INVERSE] = OS.g_cclosure_new (windowProc2, Widget.CUT_CLIPBOARD_INVERSE, 0);", "+\tclosures [Widget.PASTE_CLIPBOARD] = OS.g_cclosure_new (windowProc2, Widget.PASTE_CLIPBOARD, 0);", "+\tclosures [Widget.PASTE_CLIPBOARD_INVERSE] = OS.g_cclosure_new (windowProc2, Widget.PASTE_CLIPBOARD_INVERSE, 0);", "+\tclosures [Widget.DIRECTION_CHANGED] = OS.g_cclosure_new (windowProc3, Widget.DIRECTION_CHANGED, 0);", "+\tclosures [Widget.DELETE_FROM_CURSOR] = OS.g_cclosure_new (windowProc4, Widget.DELETE_FROM_CURSOR, 0);", "+\tclosures [Widget.DELETE_FROM_CURSOR_INVERSE] = OS.g_cclosure_new (windowProc4, Widget.DELETE_FROM_CURSOR_INVERSE, 0);", "+\tclosures [Widget.MOVE_CURSOR] = OS.g_cclosure_new (windowProc5, Widget.MOVE_CURSOR, 0);", "+\tclosures [Widget.MOVE_CURSOR_INVERSE] = OS.g_cclosure_new (windowProc5, Widget.MOVE_CURSOR_INVERSE, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a116437f968a19d7f6030be17b99eec5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OpenGL/cocoa/org/eclipse/swt/opengl/GLCanvas.java", "commitBeforeChange": "510a9055a880b0149407b8b6f474eee88b6c1452", "commitAfterChange": "6d6e8bfdd21aebcd1012a6cbb789486aef5cbee8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public GLData getGLData ()", "signatureAfterChange": " public GLData getGLData ()", "diff": ["-\tint [] value = new int [1];", "-\t//TODO implement getGLData()", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_DOUBLEBUFFER, value);", "-//\tdata.doubleBuffer = value [0] != 0;", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_STEREO, value);", "-//\tdata.stereo = value [0] != 0;", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_RED_SIZE, value);", "-//\tdata.redSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_GREEN_SIZE, value);", "-//\tdata.greenSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_BLUE_SIZE, value);", "-//\tdata.blueSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_ALPHA_SIZE, value);", "-//\tdata.alphaSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_DEPTH_SIZE, value);", "-//\tdata.depthSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_STENCIL_SIZE, value);", "-//\tdata.stencilSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_ACCUM_RED_SIZE, value);", "-//\tdata.accumRedSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_ACCUM_GREEN_SIZE, value);", "-//\tdata.accumGreenSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_ACCUM_BLUE_SIZE, value);", "-//\tdata.accumBlueSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_ACCUM_ALPHA_SIZE, value);", "-//\tdata.accumAlphaSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_SAMPLE_BUFFERS_ARB, value);", "-//\tdata.sampleBuffers = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_SAMPLES_ARB, value);", "-\tdata.samples = value [0];", "+\tint /*long*/ [] value = new int /*long*/ [1];", "+\tpixelFormat.getValues(value, OS.NSOpenGLPFADoubleBuffer, 0);", "+\tdata.doubleBuffer = value [0] != 0;", "+\tpixelFormat.getValues(value, OS.NSOpenGLPFAStereo, 0);", "+\tdata.stereo = value [0] != 0;", "+", "+\tpixelFormat.getValues(value, OS.NSOpenGLPFAAlphaSize, 0);", "+\tdata.alphaSize = (int/*64*/)value [0];", "+", "+\t/*", "+\t * Feature in Cocoa: NSOpenGL/CoreOpenGL only supports specifying the total number of bits", "+\t * in the size of the color component. For compatibility we split the color size less any alpha", "+\t * into thirds and allocate a third to each color.", "+\t */", "+\tpixelFormat.getValues(value, OS.NSOpenGLPFAColorSize, 0);", "+", "+\tint colorSize = ((int/*64*/)(value[0] - data.alphaSize)) / 3;", "+", "+\tdata.redSize = colorSize;", "+\tdata.greenSize = colorSize;", "+\tdata.blueSize = colorSize;", "+\t", "+\tpixelFormat.getValues(value, OS.NSOpenGLPFADepthSize, 0);", "+\tdata.depthSize = (int/*64*/)value [0];", "+\tpixelFormat.getValues(value, OS.NSOpenGLPFAStencilSize, 0);", "+\tdata.stencilSize = (int/*64*/)value [0];", "+\t", "+\t/*", "+\t * Feature(?) in Cocoa: NSOpenGL/CoreOpenGL doesn't support setting an accumulation buffer alpha, but", "+\t * has an alpha if the color values for the accumulation buffer were set. Allocate the values evenly", "+\t * in that case.", "+\t */", "+\tpixelFormat.getValues(value, OS.NSOpenGLPFAAccumSize, 0);", "+", "+\tint accumColorSize = (int/*64*/)(value[0]) / 4;\t", "+\tdata.accumRedSize = accumColorSize;", "+\tdata.accumGreenSize = accumColorSize;", "+\tdata.accumBlueSize = accumColorSize;", "+\tdata.accumAlphaSize = accumColorSize;", "+", "+\tpixelFormat.getValues(value, OS.NSOpenGLPFASampleBuffers, 0);", "+\tdata.sampleBuffers = (int/*64*/)value [0];", "+\tpixelFormat.getValues(value, OS.NSOpenGLPFASamples, 0);", "+\tdata.samples = (int/*64*/)value [0];"]}], "num": 46403}
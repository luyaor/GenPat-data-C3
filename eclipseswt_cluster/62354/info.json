{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e47c8daaceee36acd75873e53a483608", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "745737fb00188982d6ad05b9271a55b5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 63, "signatureBeforeChange": " void showToolTip (int handle, String toolTipText)", "signatureAfterChange": " void showToolTip (int handle, String toolTipText)", "diff": ["-\torg.eclipse.swt.internal.carbon.Point loc= new org.eclipse.swt.internal.carbon.Point();", "-\tOS.GetGlobalMouse(loc);", "-\tint x= loc.h + 16;", "-\tint y= loc.v + 16;", "+\tMacPoint loc= new MacPoint();", "+\tOS.GetGlobalMouse(loc.getData());", "+\tint x= loc.getX() + 16;", "+\tint y= loc.getY() + 16;", "-\tRect screenBounds= new Rect();", "-\tOS.GetAvailableWindowPositioningBounds(OS.GetMainDevice(), screenBounds);", "-\tx = Math.max (0, Math.min (x, screenBounds.right - screenBounds.left - width ));", "-\ty = Math.max (0, Math.min (y, screenBounds.bottom - screenBounds.top - height ));", "+\tMacRect screenBounds= new MacRect();", "+\tOS.GetAvailableWindowPositioningBounds(OS.GetMainDevice(), screenBounds.getData());", "+\tx = Math.max (0, Math.min (x, screenBounds.getWidth() - width ));", "+\ty = Math.max (0, Math.min (y, screenBounds.getHeight() - height ));", "-\tRect rect = new Rect();", "-\trect.left = (short)x;", "-\trect.top = (short)y;", "-\trect.right = (short)(x + width);", "-\trect.bottom = (short)(y + height);", "-\tif (OS.CreateNewWindow(OS.kHelpWindowClass, 0, rect, wHandle) == OS.noErr) {", "+\tif (OS.CreateNewWindow(OS.kHelpWindowClass, 0, new MacRect(x, y, width, height).getData(), wHandle) == OS.kNoErr) {", "-\t\tint[] refHandler= new int[1];", "-\t\tOS.InstallEventHandler(OS.GetWindowEventTarget(toolTipWindowHandle), fTooltipWindowProc,", "-\t\t\t\t\t\tmask.length / 2, mask, toolTipWindowHandle, refHandler);", "-\t\tfToolTipRefHandler= refHandler[0];", "+\t\tOS.InstallEventHandler(OS.GetWindowEventTarget(toolTipWindowHandle), fWindowProc, mask, toolTipWindowHandle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0dc09eacb948e079456bc0b38cdddc7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " \t \tprivate boolean focus(boolean doClip, Rect bounds)", "signatureAfterChange": "  \tprivate boolean focus(boolean doClip, MacRect bounds)", "diff": ["-\t", "-\tprivate boolean focus(boolean doClip, Rect bounds) {", "+", "+\tprivate boolean focus(boolean doClip, MacRect bounds) {", "-\t\tif (data.isFocused && !data.pendingClip) {", "+\t\tif (fIsFocused && !fPendingClip) {", "-\t\tOS.GetGWorld(data.savePort, data.saveGWorld);\t\t", "-\t\tOS.SetGWorld(handle, data.saveGWorld[0]);", "+\t\tOS.GetGWorld(fSavePort, fSaveGWorld);\t\t", "+\t\tOS.SetGWorld(handle, fSaveGWorld[0]);", "-\t\t\tRect r= new Rect();", "-\t\t\tMacUtil.getControlBounds(data.controlHandle, r);", "-\t\t\tdx= r.left;", "-\t\t\tdy= r.top;", "+\t\t\tOS.GetControlBounds(data.controlHandle, fRect.getData());", "+\t\t\tdx= fRect.getX();", "+\t\t\tdy= fRect.getY();", "-\t\t\torg.eclipse.swt.internal.carbon.Point p= new org.eclipse.swt.internal.carbon.Point();", "-\t\t\tp.h= (short)-dx;", "-\t\t\tp.v= (short)-dy;", "-\t\t\tOS.QDSetPatternOrigin(p);", "+\t\t\tMacPoint p= new MacPoint(-dx, -dy);", "+\t\t\tOS.QDSetPatternOrigin(p.getData());", "-\t\tif (data.saveClip == 0)", "-\t\t\tdata.saveClip= OS.NewRgn();", "-\t\tOS.GetClip(data.saveClip);", "+\t\tOS.GetClip(fSaveClip);", "-\t\t// calculate new clip based on the Control's bound and GC clipping region", "+\t\t// calculate new clip based on the controls bound and GC clipping region", "-\t\t\t\t\t\t", "-\t\t\tint result= OS.NewRgn();", "-\t\t\tif (data.damageRgn == 0) {", "-\t\t\t\t// since we've got no damage region", "-\t\t\t\t// we assume that focus has been called for direct drawing.", "-\t\t\t\t// We need to calculate the visible region of the control.", "-\t\t\t\tMacUtil.getVisibleRegion(data.controlHandle, result, data.clipAgainstChildren); ", "-\t\t\t\tOS.OffsetRgn(result, (short)-dx, (short)-dy);", "-\t\t\t} else {", "-\t\t\t\t// the damage area takes the visible region of the Control into account", "-\t\t\t\tOS.CopyRgn(data.damageRgn, result);", "+\t\t\tint result= OS.NewRgn();", "+\t\t\tMacUtil.getVisibleRegion(data.controlHandle, result, true);", "+\t\t\tOS.OffsetRgn(result, (short)-dx, (short)-dy);", "+", "+\t\t\t// clip against damage ", "+\t\t\tif (fDamageRgn != 0) {", "+\t\t\t\tint dRgn= OS.NewRgn();", "+\t\t\t\tOS.CopyRgn(fDamageRgn, dRgn);", "+\t\t\t\tOS.OffsetRgn(dRgn, (short)-dx, (short)-dy);", "+\t\t\t\tOS.SectRgn(result, dRgn, result);", "-\t\t\tif (data.clipRgn != 0)", "+\t\t\tif (data.clipRgn != 0) {", "+\t\t\t}", "-\t\t\t", "-\t\t\t// optionally extract clip bounds", "-\t\t\t\tOS.GetRegionBounds(result, bounds);", "-\t\t\t\t", "+\t\t\t\tOS.GetRegionBounds(result, bounds.getData());", "-\t\t\t\t\tOS.GetRegionBounds(data.clipRgn, bounds);", "+\t\t\t\t\tOS.GetRegionBounds(data.clipRgn, bounds.getData());", "-\t\t\t\t\tOS.SetRect(bounds, (short)0, (short)0, (short)0x7fff, (short)0x7fff);", "+\t\t\t\t\tbounds.set(0, 0, 0x8fff, 0x8fff);", "-\t\tdata.pendingClip= false;", "+\t\tfPendingClip= false;"]}], "num": 62354}
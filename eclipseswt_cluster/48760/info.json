{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc64e711edf36bda84bf52193c0f0b04", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08d9b5998d2faa3434826779e87d37a2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet162.java", "commitBeforeChange": "97fd0ac369cf01c79a83269dd215bc66fb80f094", "commitAfterChange": "8093e4de11a4b3e09a48b5b00387350ee1d8feab", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static void main (String [] args)", "signatureAfterChange": "  public static void main (String [] args)", "diff": ["-\tfinal Table table = new Table (shell, SWT.BORDER);", "+\tfinal Table table = new Table (shell, SWT.FULL_SELECTION | SWT.BORDER);", "-\t\t\tsuper.getName (e);", "+\t\t\t/* The first column of a table item is returned in the \"name\" property. */", "-\t\t\t\tPoint pt = display.getCursorLocation ();", "-\t\t\t\tpt = display.map (null, table, pt);", "-\t\t\t\tfor (int i = 0; i < table.getColumnCount (); i++) {", "-\t\t\t\t\tif (item.getBounds (i).contains (pt)) {", "-\t\t\t\t\t\tint [] data = (int []) item.getData (STATE);", "-\t\t\t\t\t\tboolean checked = false;", "-\t\t\t\t\t\tif (data != null) {", "-\t\t\t\t\t\t\tfor (int j = 0; j < data.length; j++) {", "-\t\t\t\t\t\t\t\tif (data [j] == i) {", "-\t\t\t\t\t\t\t\t\tchecked = true;", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\te.result = item.getText (i) + \" \" + (checked ? \"checked\" : \"unchecked\");", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "+\t\t\t\te.result = item.getText (0);", "+\t\t\t}", "+\t\t}", "+\t\tpublic void getDescription (AccessibleEvent e) {", "+\t\t\t/* The names of all columns of a table item except the first are returned in the \"description\" property. */", "+\t\t\tif (e.childID >= 0 && e.childID < table.getItemCount ()) {", "+\t\t\t\tTableItem item = table.getItem (e.childID);", "+\t\t\t\te.result = \"\";", "+\t\t\t\tfor (int i = 1; i < table.getColumnCount (); i++) {", "+\t\t\t\t\te.result += item.getText (i) + \" \" + (isChecked(item, i) ? \"checked\" : \"unchecked\");", "+\t\t\t\t\tif (i + 1 < table.getColumnCount()) e.result += \", \";", "-\t\t\tsuper.getState (e);", "-\t\t\t\tint [] data = (int []) item.getData (STATE);", "-\t\t\t\tif (data != null) {", "-\t\t\t\t\tPoint pt = display.getCursorLocation ();", "-\t\t\t\t\tpt = display.map (null, table, pt);", "-\t\t\t\t\tfor (int i = 0; i < data.length; i++) {", "-\t\t\t\t\t\tif (item.getBounds (data [i]).contains (pt)) {", "-\t\t\t\t\t\t\te.detail |= ACC.STATE_CHECKED;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "+\t\t\t\tfor (int i = 1; i < table.getColumnCount (); i++) {", "+\t\t\t\t\tif (isChecked(item, i)) {", "+\t\t\t\t\t\te.detail |= ACC.STATE_CHECKED;", "+\tshell.pack();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1158b3a8eaee2b56b8158adb7be860c7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet162.java", "commitBeforeChange": "e0067777a5e0e0baaa32e22da277487e16b46856", "commitAfterChange": "96ee0aab22d519a560bc2f0087edb27d95811175", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static void main (String [] args)", "signatureAfterChange": "  public static void main (String [] args)", "diff": ["-\tfinal Display display = new Display ();", "-\tImage checkedImage = getCheckedImage (display);", "-\tImage uncheckedImage = getUncheckedImage (display);", "+\tDisplay display = new Display ();", "+\tfinal Image checkedImage = getStateImage (display, true);", "+\tfinal Image uncheckedImage = getStateImage (display, false);", "+", "+\t", "-\tTableColumn column1 = new TableColumn (table, SWT.NONE);", "-\tTableColumn column2 = new TableColumn (table, SWT.NONE);", "-\tTableColumn column3 = new TableColumn (table, SWT.NONE);", "-\tTableItem item1 = new TableItem (table, SWT.NONE);", "-\titem1.setText (new String [] {\"first item\", \"a\", \"b\"});", "-\titem1.setImage (1, uncheckedImage);", "-\titem1.setImage (2, uncheckedImage);", "-\titem1.setData (STATE, null);", "-\tTableItem item2 = new TableItem (table, SWT.NONE);", "-\titem2.setText (new String [] {\"second item\", \"c\", \"d\"});", "-\titem2.setImage (1, uncheckedImage);", "-\titem2.setImage (2, checkedImage);", "-\titem2.setData (STATE, new int [] {2});", "-\tTableItem item3 = new TableItem (table, SWT.NONE);", "-\titem3.setText (new String [] {\"third\", \"e\", \"f\"});", "-\titem3.setImage (1, checkedImage);", "-\titem3.setImage (2, checkedImage);", "-\titem3.setData (STATE, new int [] {1, 2});", "-\tcolumn1.pack ();", "-\tcolumn2.pack ();", "-\tcolumn3.pack ();", "-\tAccessible accessible = table.getAccessible ();", "-\taccessible.addAccessibleListener (new AccessibleAdapter () {", "-\t\tpublic void getName (AccessibleEvent e) {", "-\t\t\t/* The first column of a table item is returned in the \"name\" property. */", "-\t\t\tif (e.childID >= 0 && e.childID < table.getItemCount ()) {", "-\t\t\t\tTableItem item = table.getItem (e.childID);", "-\t\t\t\te.result = item.getText (0);", "-\t\t\t}", "-\t\t}", "-\t\tpublic void getDescription (AccessibleEvent e) {", "-\t\t\t/* The names of all columns of a table item except the first are returned in the \"description\" property. */", "-\t\t\tif (e.childID >= 0 && e.childID < table.getItemCount ()) {", "-\t\t\t\tTableItem item = table.getItem (e.childID);", "-\t\t\t\te.result = \"\";", "-\t\t\t\tfor (int i = 1; i < table.getColumnCount (); i++) {", "-\t\t\t\t\te.result += item.getText (i) + \" \" + (isChecked(item, i) ? \"checked\" : \"unchecked\");", "-\t\t\t\t\tif (i + 1 < table.getColumnCount()) e.result += \", \";", "-\t\t\t\t}", "-\t\t\t}", "+\tfor (int i = 0; i < ITEM_NAMES.length; i++) {", "+\t\tTableItem item = new TableItem (table, SWT.NONE);", "+\t\titem.setText (ITEM_NAMES[i]);", "+\t\titem.setImage (i % 2 == 0 ? checkedImage : uncheckedImage);", "+\t}", "+\ttable.addSelectionListener(new SelectionAdapter(){", "+\t\tpublic void widgetDefaultSelected(SelectionEvent e) {", "+\t\t\tTableItem item = (TableItem)e.item;", "+\t\t\titem.setImage(item.getImage() == checkedImage ? uncheckedImage : checkedImage);", "-\taccessible.addAccessibleControlListener (new AccessibleControlAdapter () {", "+", "+\ttable.getAccessible ().addAccessibleControlListener (new AccessibleControlAdapter () {", "+\t\tpublic void getRole(AccessibleControlEvent e) {", "+\t\t\te.detail = ACC.ROLE_CHECKBUTTON;", "+\t\t}", "-\t\t\t\tfor (int i = 1; i < table.getColumnCount (); i++) {", "-\t\t\t\t\tif (isChecked(item, i)) {", "-\t\t\t\t\t\te.detail |= ACC.STATE_CHECKED;", "-\t\t\t\t\t}", "+\t\t\t\tif (item.getImage() == checkedImage) {", "+\t\t\t\t\te.detail |= ACC.STATE_CHECKED;", "+"]}], "num": 48760}
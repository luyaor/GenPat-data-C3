{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c600405a8035844753a2c45ce1fea3fb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9e37cce347e824cf8dcaf0c56678cb7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "7c255c33f088ef04ac6271863f814fd0cde593d4", "commitAfterChange": "31b7e14bceda4eac6e74ea4bd2865b1d0782034c", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "  boolean sendGestureEvent (GESTUREINFO gi)", "signatureAfterChange": "  boolean sendGestureEvent (GESTUREINFO gi)", "diff": ["-\tPOINT screenLoc = new POINT();", "-\tscreenLoc.x = gi.x;", "-\tscreenLoc.y = gi.y;", "-\tOS.MapWindowPoints (0, gi.hwndTarget, screenLoc, 1);", "-\tevent.x = screenLoc.x;", "-\tevent.y = screenLoc.y;", "-\t", "-\tswitch (gi.dwID){", "+\tPOINT point = new POINT ();", "+\tpoint.x = gi.x;", "+\tpoint.y = gi.y;", "+\tOS.MapWindowPoints (0, gi.hwndTarget, point, 1);", "+\tevent.x = point.x;", "+\tevent.y = point.y;", "+\tswitch (gi.dwID) {", "-\t\t\tint fingerDistance = OS.LODWORD(gi.ullArguments);", "+\t\t\tint fingerDistance = OS.LODWORD (gi.ullArguments);", "-\t\t\t// gi.ullArguments is the distance between the fingers. Scale factor is relative", "-\t\t\t// to that original value.", "+\t\t\t/*", "+\t\t\t* The gi.ullArguments is the distance between the fingers. ", "+\t\t\t* Scale factor is relative to that original value.", "+\t\t\t*/", "-\t\t\t\tdisplay.lastX = screenLoc.x;", "-\t\t\t\tdisplay.lastY = screenLoc.y;", "+\t\t\t\tdisplay.lastX = point.x;", "+\t\t\t\tdisplay.lastY = point.y;", "-", "-\t\t\tif (display.lastX == screenLoc.x && display.lastY == screenLoc.y && event.detail == SWT.GESTURE_PAN) return false;", "-\t\t\t", "-\t\t\tevent.xDirection = screenLoc.x - display.lastX;", "-\t\t\tevent.yDirection = screenLoc.y - display.lastY;", "-", "-\t\t\tdisplay.lastX = screenLoc.x;", "-\t\t\tdisplay.lastY = screenLoc.y;\t\t\t", "+\t\t\tif (display.lastX == point.x && display.lastY == point.y && event.detail == SWT.GESTURE_PAN) return false;", "+\t\t\tevent.xDirection = point.x - display.lastX;", "+\t\t\tevent.yDirection = point.y - display.lastY;", "+\t\t\tdisplay.lastX = point.x;", "+\t\t\tdisplay.lastY = point.y;\t\t\t", "-\t\t\tdouble rotationInRadians = OS.GID_ROTATE_ANGLE_FROM_ARGUMENT(OS.LODWORD(gi.ullArguments));", "+\t\t\tdouble rotationInRadians = OS.GID_ROTATE_ANGLE_FROM_ARGUMENT (OS.LODWORD (gi.ullArguments));", "-\t\t\t// Feature in Win32: Rotation events are sent even when the fingers are at rest.", "-\t\t\t// If the current rotation is the same as the last one received don't send the event.", "+\t\t\t/*", "+\t\t\t* Feature in Win32. Rotation events are sent even when the fingers are at rest.", "+\t\t\t* If the current rotation is the same as the last one received don't send the event.", "+\t\t\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec880a747c450e69a7102769e7bb0a03", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "a8f238df882329c9d6f40cafabcea0043c35b1a1", "commitAfterChange": "ab71f26fec1a45ce0657bac58c38b33a315f0b0e", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "  public Rectangle map (Control from, Control to, int x, int y, int width, int height)", "signatureAfterChange": "  public Point map (Control from, Control to, int x, int y)", "diff": ["+", "+public Point map (Control from, Control to, int x, int y) {", "+\tcheckDevice ();", "+\tif (from != null && from.isDisposed()) error (SWT.ERROR_INVALID_ARGUMENT);", "+\tif (to != null && to.isDisposed()) error (SWT.ERROR_INVALID_ARGUMENT);", "+\tPoint point = new Point (x, y);", "+\tif (from != null) {", "+\t\tRect rect = new Rect ();", "+\t\tOS.GetControlBounds (from.handle, rect);", "+\t\tpoint.x += rect.left; ", "+\t\tpoint.y += rect.top;", "+\t\tint window = OS.GetControlOwner (from.handle);", "+\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\t\tpoint.x += rect.left;", "+\t\tpoint.y += rect.top;", "+\t}", "+\tif (to != null) {", "+\t\tRect rect = new Rect ();", "+\t\tOS.GetControlBounds (to.handle, rect);", "+\t\tpoint.x -= rect.left; ", "+\t\tpoint.y -= rect.top;", "+\t\tint window = OS.GetControlOwner (to.handle);", "+\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\t\tpoint.x -= rect.left;", "+\t\tpoint.y -= rect.top;", "+\t}", "+\treturn point;", "+}"]}], "num": 23909}
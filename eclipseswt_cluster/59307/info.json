{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b5f9fbdb27360f157c4d99d2fdf5855", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46d8a66946eb42ab0b7e70fc9f888225", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "efe87bcee29339df205151a2a1bc120bf82170e7", "commitAfterChange": "95c5bd5be9e5e4341c644ca11834dbb39f3c43f7", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "signatureAfterChange": "  void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "diff": ["+\t\t/*", "+\t\t* Feature in Windows.  AlphaBlend() alters the alpha", "+\t\t* channel if the destination is a 32 bit depth bitmap.", "+\t\t* The fix is to draw to a temporary 24 bit depth bitmap", "+\t\t* first and then draw the temporary bitmap.", "+\t\t*/", "+\t\tboolean fixAlpha = false;", "+\t\tint dstBitmap = OS.GetCurrentObject(handle, OS.OBJ_BITMAP);", "+\t\tif (dstBitmap != 0) {", "+\t\t\tBITMAP dstBM = new BITMAP();", "+\t\t\tOS.GetObject(dstBitmap, BITMAP.sizeof, dstBM);", "+\t\t\tfixAlpha = dstBM.bmPlanes * dstBM.bmBitsPixel == 32;", "+\t\t}", "+\t\tint dstDib = 0, oldDstBitmap = 0, dstHdc = handle, dstX = destX, dstY = destY;", "+\t\tif (fixAlpha) {", "+\t\t\tdstDib = Image.createDIB(destWidth, destHeight, 24);", "+\t\t\tif (dstDib == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\tdstHdc = OS.CreateCompatibleDC(handle);", "+\t\t\toldDstBitmap = OS.SelectObject(dstHdc, dstDib);", "+\t\t\tOS.BitBlt(dstHdc, 0, 0, destWidth, destHeight, handle, destX, destY, OS.SRCCOPY);", "+\t\t\tdstX = dstY = 0;", "+\t\t}", "-\t\t\tOS.AlphaBlend(handle, destX, destY, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, blend);", "+\t\t\tOS.AlphaBlend(dstHdc, dstX, dstY, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, blend);", "-\t\t\tOS.AlphaBlend(handle, destX, destY, destWidth, destHeight, memHdc, 0, 0, srcWidth, srcHeight, blend);", "+\t\t\tOS.AlphaBlend(dstHdc, dstX, dstY, destWidth, destHeight, memHdc, 0, 0, srcWidth, srcHeight, blend);", "+\t\tif (fixAlpha) {", "+\t\t\tOS.BitBlt(handle, destX, destY, destWidth, destHeight, dstHdc, 0, 0, OS.SRCCOPY);", "+\t\t\tOS.SelectObject(dstHdc, oldDstBitmap);", "+\t\t\tOS.DeleteDC(dstHdc);", "+\t\t\tOS.DeleteObject(dstDib);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "637bbb2801d125e0e14530bf15a2dd08", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "f873a5e536bc324b9546bd9afbfa96c060b9f76e", "commitAfterChange": "c897ae21534e07170db934f50fc4eaad2e3589aa", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public Rectangle getBounds ()", "signatureAfterChange": " public Rectangle getBounds ()", "diff": ["-\tint x = OS.GTK_WIDGET_X (topHandle);", "-\tint y = OS.GTK_WIDGET_Y (topHandle);", "-\tint width = OS.GTK_WIDGET_WIDTH (topHandle);", "-\tint height = OS.GTK_WIDGET_HEIGHT (topHandle);", "+\tint x, y, width, height;", "+\t/*", "+\t* Bug in GTK.  Toolbar items are only allocated their minimum size", "+\t* in versions before 2.4.0.  The fix is to use the total size", "+\t* available minus any borders.", "+\t*/", "+\tif (OS.GTK_VERSION < OS.VERSION (2, 4, 0) && control != null && !control.isDisposed ()) {", "+\t\tint border = OS.gtk_container_get_border_width (parent.handle);", "+\t\tbyte [] shadowType = Converter.wcsToMbcs (null, \"shadow_type\", true);", "+\t\tint [] shadow = new int [1];", "+\t\tOS.gtk_widget_style_get (parent.handle, shadowType, shadow, 0);", "+\t\tif (shadow [0] != OS.GTK_SHADOW_NONE) {", "+\t\t\tborder += OS.gtk_style_get_xthickness (OS.gtk_widget_get_style (parent.handle));", "+\t\t}", "+\t\tif ((parent.style & SWT.VERTICAL) != 0) {", "+\t\t\tx = border;", "+\t\t\ty = OS.GTK_WIDGET_Y (topHandle) + border;", "+\t\t\twidth = OS.GTK_WIDGET_WIDTH (parent.handle) - border*2;", "+\t\t\theight = OS.GTK_WIDGET_HEIGHT (topHandle);\t\t\t", "+\t\t} else {", "+\t\t\tx = OS.GTK_WIDGET_X (topHandle) + border;", "+\t\t\ty = border;", "+\t\t\twidth = OS.GTK_WIDGET_WIDTH (topHandle);", "+\t\t\theight = OS.GTK_WIDGET_HEIGHT (parent.handle) - border*2;", "+\t\t}", "+\t} else {", "+\t\tx = OS.GTK_WIDGET_X (topHandle);", "+\t\ty = OS.GTK_WIDGET_Y (topHandle);", "+\t\twidth = OS.GTK_WIDGET_WIDTH (topHandle);", "+\t\theight = OS.GTK_WIDGET_HEIGHT (topHandle);\t\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "215ea745de47507236ca309da9a7f540", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "6938a0dacfb030f7e7b03dc092215adacd9a08a9", "commitAfterChange": "2f091781ca405b743f12ec57a146bdda9d7d30d0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void copyArea(int srcX, int srcY, int width, int height, int destX, int destY)", "signatureAfterChange": "  void copyArea (Image image, int x, int y, int srcImage)", "diff": ["+", "+void copyArea (Image image, int x, int y, int /*long*/ srcImage) {", "+\tif (srcImage == 0) return;", "+\tNSBitmapImageRep rep = image.imageRep;", "+\tint /*long*/ bpc = rep.bitsPerSample();", "+\tint /*long*/ width = rep.pixelsWide();", "+\tint /*long*/ height = rep.pixelsHigh();", "+\tint /*long*/ bpr = rep.bytesPerRow();", "+\tint alphaInfo = rep.hasAlpha() ? OS.kCGImageAlphaFirst : OS.kCGImageAlphaNoneSkipFirst;", "+\tint /*long*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "+\tint /*long*/ context = OS.CGBitmapContextCreate(rep.bitmapData(), width, height, bpc, bpr, colorspace, alphaInfo);", "+\tOS.CGColorSpaceRelease(colorspace);", "+\tif (context != 0) {", "+\t \tCGRect rect = new CGRect();", "+\t \trect.origin.x = -x;", "+\t \trect.origin.y = y;", "+\t \trect.size.width = OS.CGImageGetWidth(srcImage);", "+\t\trect.size.height = OS.CGImageGetHeight(srcImage);", "+\t\tOS.CGContextTranslateCTM(context, 0, -(rect.size.height - height));", "+\t\tOS.CGContextDrawImage(context, rect, srcImage);", "+\t\tOS.CGContextRelease(context);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14da9affa05679b1083d25d3d452c646", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "d36a760e6b66fcc16fa6686b7aca002e4f64430e", "commitAfterChange": "d6d065ae0f40b44bdee462fcdf2077b4fae1a0c6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["+\t\t/*", "+\t\t * Feature in Carbon: Separator control decides how to orient itself", "+\t\t * based on the width and height. If height >= width it orients", "+\t\t * vertically, else it orients horizontally. ", "+\t\t * Fix is to have two native controls to implement the separator label.", "+\t\t * The top control (userPaneControl) honors the bounds set by the", "+\t\t * user and the inner one (separatorControl) creates the separator", "+\t\t * with the correct orientation.", "+\t\t */", "+\t\tint features = OS.kControlSupportsEmbedding;", "+\t\tOS.CreateUserPaneControl (window, null, features, outControl);", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\toutControl[0] = 0;", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tint separatorHandle = outControl [0];", "+\t\tOS.HIViewAddSubview (handle, separatorHandle);", "+\t\tCGRect r = new CGRect();", "+\t\tr.width = DEFAULT_WIDTH;", "+\t\tr.height = DEFAULT_HEIGHT;", "+\t\tOS.HIViewSetFrame (handle, r);", "+\t\tHILayoutInfo layout = new HILayoutInfo ();", "+\t\tlayout.version = 0;", "+\t\tOS.HIViewGetLayoutInfo (separatorHandle, layout);", "+\t\tif ((style & SWT.HORIZONTAL) != 0) {", "+\t\t\tr.height = 3;", "+\t\t\tlayout.scale.x.ratio = 1.0f;", "+\t\t\tlayout.position.y.kind = OS.kHILayoutPositionCenter;", "+\t\t} else {", "+\t\t\tr.width = 3;", "+\t\t\tlayout.position.x.kind = OS.kHILayoutPositionCenter;", "+\t\t\tlayout.scale.y.ratio = 1.0f;", "+\t\t}", "+\t\tOS.HIViewSetFrame (separatorHandle, r);", "+\t\tOS.HIViewSetLayoutInfo (separatorHandle, layout);", "-\t}", "-\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\thandle = outControl [0];", "-\tif ((style & SWT.WRAP) == 0) {", "-\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlStaticTextIsMultilineTag, 1, new byte[] {0});", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\tif ((style & SWT.WRAP) == 0) {", "+\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlStaticTextIsMultilineTag, 1, new byte[] {0});", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3395f4bb6cf71663d3292f43a9d4427e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "ae8649cbc5451548c97f158ddd1902c665a55911", "commitAfterChange": "e934566bfa3f9a03488420628fca653fd296f4f2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public Rectangle getBounds(int start, int end)", "signatureAfterChange": " public Rectangle getBounds(int start, int end)", "diff": ["+\t", "+\t/* ", "+\t* Bug in Pango. The region returned by gdk_pango_layout_get_clip_region()", "+\t* includes areas from lines outside of the requested range.  The fix", "+\t* is to subtract these areas from the clip region.", "+\t*/", "+\tPangoRectangle pangoRect = new PangoRectangle();", "+\tint /*long*/ iter = OS.pango_layout_get_iter(layout);", "+\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint /*long*/ linesRegion = OS.gdk_region_new();", "+\tif (linesRegion == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint lineStart = 0, lineEnd = 0;", "+\tdo {", "+\t\tOS.pango_layout_iter_get_line_extents(iter, null, pangoRect);", "+\t\tif (OS.pango_layout_iter_next_line(iter)) {", "+\t\t\tlineEnd = OS.pango_layout_iter_get_index(iter) - 1;", "+\t\t} else {", "+\t\t\tlineEnd = OS.strlen(ptr);", "+\t\t}", "+\t\tif (lineStart <= byteStart || byteEnd <= lineEnd) {", "+\t\t\trect.x = OS.PANGO_PIXELS(pangoRect.x);", "+\t\t\trect.y = OS.PANGO_PIXELS(pangoRect.y);", "+\t\t\trect.width = OS.PANGO_PIXELS(pangoRect.width);", "+\t\t\trect.height = OS.PANGO_PIXELS(pangoRect.height);", "+\t\t\tOS.gdk_region_union_with_rect(linesRegion, rect);", "+\t\t}", "+\t\tlineStart = lineEnd + 1;", "+\t} while (lineStart <= byteEnd);", "+\tOS.gdk_region_intersect(clipRegion, linesRegion);", "+\tOS.gdk_region_destroy(linesRegion);", "+\tOS.pango_layout_iter_free(iter);", "+\t"]}], "num": 59307}
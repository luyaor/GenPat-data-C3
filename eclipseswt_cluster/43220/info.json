{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b034f2b6d7bb462102ca94ea8fa75a1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "145edef128a3b44c106fa1f3ab240a8b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "e38f7ba08e4cd9896dddbc5916c5187c2e1b63eb", "commitAfterChange": "7349d1b65ee9a9edeeac8e2e96a33b2c8d655b80", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tint getRoleDescriptionAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \t \tint getRoleDescriptionAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t", "-\tint getRoleDescriptionAttribute (int nextHandler, int theEvent, int userData) {", "-\t\tint code = OS.CallNextEventHandler (nextHandler, theEvent);", "-\t\tevent.detail = osToRole(osRoleAttribute);", "-\t\tint [] stringRef = new int [1];", "-\t\tstringRef [0] = stringToStringRef (roleToOs (event.detail));", "-\t\tif (stringRef [0] == 0) return code;", "-\t\tint [] stringRef2 = new int [1];", "-\t\tstringRef2 [0] = OS.HICopyAccessibilityRoleDescription (stringRef [0], 0);", "-\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef2);", "-\t\treturn OS.noErr;", "+\t", "+\tint getRoleDescriptionAttribute (int nextHandler, int theEvent, int userData) {", "+\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "+\t\tevent.childID = getChildIDFromEvent(theEvent);", "+\t\tevent.detail = -1;", "+\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\tlistener.getRole(event);", "+\t\t}", "+\t\tif (event.detail != -1) {", "+\t\t\tString appRole = roleToOs (event.detail);", "+\t\t\tString appSubrole = null;", "+\t\t\tint index = appRole.indexOf(':');", "+\t\t\tif (index != -1) {", "+\t\t\t\tappSubrole = appRole.substring(index + 1);", "+\t\t\t\tappRole = appRole.substring(0, index);", "+\t\t\t}", "+\t\t\tint stringRef1 = stringToStringRef (appRole);", "+\t\t\tif (stringRef1 != 0) {", "+\t\t\t\tint stringRef2 = 0;", "+\t\t\t\tif (appSubrole != null) stringRef2 = stringToStringRef (appSubrole);", "+\t\t\t\tint stringRef3 = OS.HICopyAccessibilityRoleDescription (stringRef1, stringRef2);", "+\t\t\t\tOS.CFRelease(stringRef1);", "+\t\t\t\tif (stringRef2 != 0) OS.CFRelease(stringRef2);", "+\t\t\t\tif (stringRef3 != 0) {", "+\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef3});", "+\t\t\t\t\tOS.CFRelease(stringRef3);", "+\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn OS.CallNextEventHandler (nextHandler, theEvent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f559714c7917847541a02bc2d2ed10ca", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "e7fb43dbb2484659429530f9cab714cb6e3de9f3", "commitAfterChange": "d69b8bce251422ebdcfdac8edd7d2bcf938dfebd", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r public ImageData getImageData ()", "signatureAfterChange": " public ImageData getImageData ()", "diff": ["- */\r", "-public ImageData getImageData () {\r", "-\tString iconPath = null;\r", "-\tswitch (Desktop) {\r", "-\t\tcase DESKTOP_KDE:\t\r", "-\t\t\tString urlString = \"file://any.\" + extension;\r", "-\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, urlString, true);\r", "-\t\t\tint qString = KDE.QString_new(buffer);\r", "-\t\t\tint url = KDE.KURL_new(qString);\r", "-\t\t\tKDE.QString_delete(qString);\t\t\t\r", "-\t\t\tint mimeType = KDE.KMimeType_findByURL(url);\r", "-\t\t\tif (mimeType == 0) return null;\t\t\t\r", "-\t\t\tint mimeIcon = KDE.KMimeType_icon(mimeType, 0, 0);\r", "-\t\t\tint loader = KDE.KGlobal_iconLoader();\r", "-\t\t\tint path = KDE.KIconLoader_iconPath(loader, mimeIcon, KDE.KICON_SMALL, 1);\r", "-\t\t\ticonPath = kde_convertQStringAndFree(path);\r", "-\t\t\tbreak;\r", "-\t\tcase DESKTOP_GNOME:\r", "-\t\t\tString fakeFileName = \"file.\" + extension;\r", "-\t\t\tString mime = gnome_getMimeType(fakeFileName);\r", "-\t\t\tif (mime == null) return null;\r", "-\t\t\ticonPath = gnome_getMimeValue(mime, \"icon-filename\");\r", "-\t\t\tif (iconPath == null) return null;\r", "-\t\t\tbreak;\r", "-\t\tcase DESKTOP_UNKNOWN:\r", "-\t\t\treturn null;\r", "-\t}\r", "-\tif (iconPath.endsWith (\"xpm\")) {\r", "-\t\t//BAD\r", "-\t\tDisplay display = Display.getCurrent (); \r", "-\t\tint xDisplay = display.xDisplay;\r", "-\t\tint drawable = OS.XDefaultRootWindow (xDisplay);\t\t\r", "-\t\tint [] pixmap_ptr = new int [1], mask_ptr = new int [1];\r", "-\t\tbyte [] buffer = Converter.wcsToMbcs (null, iconPath, true);\r", "-\t\tint result = OS.XpmReadFileToPixmap (xDisplay, drawable, buffer, pixmap_ptr, mask_ptr, 0);\r", "-\t\tif (result < 0) return null;\r", "-\t\tImage image = Image.motif_new (display, SWT.BITMAP, pixmap_ptr[0], mask_ptr [0]);\r", "-\t\tImageData imageData = image.getImageData ();\r", "-\t\timage.dispose ();\r", "-\t\treturn imageData;\t\t\r", "-\t}\r", "-\ttry {\r", "-\t\treturn new ImageData (iconPath);\r", "-\t} catch (Exception e) {\r", "-\t\treturn null;\r", "-\t}\r", "-}\r", "+ */", "+public ImageData getImageData () {", "+\tString iconPath = null;", "+\tswitch (getDesktop( display )) {", "+\t\tcase DESKTOP_KDE: {\t", "+\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, name, true);", "+\t\t\tint mimeTypeName = KDE.QString_new( buffer );", "+\t\t\tint mimeType = KDE.KMimeType_mimeType( mimeTypeName );", "+\t\t\tKDE.QString_delete( mimeTypeName );\t\t\t", "+\t\t\tif (mimeType == 0) return null;\t\t\t", "+\t\t\tint mimeIcon = KDE.KMimeType_icon(mimeType, 0, 0);", "+\t\t\tint loader = KDE.KGlobal_iconLoader();", "+\t\t\tint path = KDE.KIconLoader_iconPath(loader, mimeIcon, KDE.KICON_SMALL, 1);", "+\t\t\tif (path == 0) return null;", "+\t\t\ticonPath = kde_convertQStringAndFree(path);", "+\t\t\tbreak;", "+\t\t}", "+\t\t", "+\t\tcase DESKTOP_GNOME: {", "+\t\t\tString fakeFileName = \"file\" + extension;", "+\t\t\tString mime = gnome_getMimeType(fakeFileName);", "+\t\t\tif (mime == null) return null;", "+\t\t\ticonPath = gnome_getMimeValue(mime, \"icon-filename\");", "+\t\t\tif (iconPath == null) return null;", "+\t\t\tbreak;", "+\t\t}", "+\t\t", "+\t\tcase DESKTOP_CDE: {", "+\t\t\treturn cde_getImageData();", "+\t\t}", "+\t\t", "+\t\tcase DESKTOP_UNKNOWN: {", "+\t\t\treturn null;", "+\t\t}", "+\t}", "+\tif (iconPath.endsWith (\"xpm\")) {", "+\t\tint xDisplay = display.xDisplay;", "+\t\tint screen  = OS.XDefaultScreenOfDisplay( xDisplay );", "+\t\tint fgPixel = OS.XWhitePixel( display.xDisplay, OS.XDefaultScreen( xDisplay ) );", "+\t\tint bgPixel = OS.XBlackPixel( display.xDisplay, OS.XDefaultScreen( xDisplay ) );", "+\t\tbyte [] iconName = Converter.wcsToMbcs (null, iconPath, true);", "+\t\tint pixmap = OS.XmGetPixmap( screen, iconName, fgPixel, bgPixel );", "+    \tif (pixmap == OS.XmUNSPECIFIED_PIXMAP) return null;", "+\t\tImage image = Image.motif_new (display, SWT.BITMAP, pixmap, 0);", "+\t\tImageData imageData = image.getImageData ();", "+\t\t", "+\t\t// The pixmap returned from XmGetPixmap is cached by Motif", "+\t\t// and must be deleted by XmDestroyPixmap. Because it cannot", "+\t\t// be deleted directly by XFreePixmap, image.dispose() must not", "+\t\t// be called. The following code should do an equivalent image.dispose().", "+\t\tOS.XmDestroyPixmap( screen, pixmap );", "+\t\treturn imageData;\t\t", "+\t}", "+\ttry {", "+\t\treturn new ImageData (iconPath);", "+\t} catch (Exception e) {", "+\t\treturn null;", "+\t}", "+}"]}], "num": 43220}
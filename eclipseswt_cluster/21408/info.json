{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "527e916af526facdc659805fb313e6c7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dabb460ecdb59422ce09939bfc994c90", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "4ef51dfe2ffecc59d5fe9c7cb2f4cd3516b4c0b2", "commitAfterChange": "b582abcbb5af9e9e8a0d429cf605c4541967d6dc", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "\t  int kEventControlTrack (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "\t  int kEventControlTrack (int nextHandler, int theEvent, int userData)", "diff": ["-//\tif (isEnabledModal ()) sendMouseEvent (SWT.MouseMove, theEvent);", "-\treturn OS.eventNotHandledErr;", "+\tint result = super.kEventControlTrack (nextHandler, theEvent, userData);", "+\tif (result == OS.noErr) return result;", "+\t/*", "+\t* Feature in the Macintosh.  Some controls call TrackControl() to track", "+\t* the mouse.  Unfortunately, mouse move events and the mouse up events are", "+\t* consumed.  The fix is to call the default handler and send a fake mouse up", "+\t* when tracking is finished if the mouse event was consumed.", "+\t* ", "+\t* NOTE: No mouse move events are sent while tracking.  There is no", "+\t* fix for this at this time.", "+\t*/", "+\tdisplay.grabControl = null;", "+\tdisplay.runDeferredEvents ();", "+\tint oldChord = OS.GetCurrentEventButtonState ();", "+\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "+\tint newChord = OS.GetCurrentEventButtonState ();", "+\tif (newChord != oldChord) {", "+\t\tint [] masks = {OS.kEventClassMouse, OS.kEventMouseUp};", "+\t\tint mouseUpEvent = OS.AcquireFirstMatchingEventInQueue (OS.GetCurrentEventQueue (), masks.length, masks, OS.kEventQueueOptionsNone);", "+\t\tif (mouseUpEvent != 0) {", "+\t\t\tOS.ReleaseEvent (mouseUpEvent);", "+\t\t} else {", "+\t\t\torg.eclipse.swt.internal.carbon.Point outPt = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\tOS.GetGlobalMouse (outPt);", "+\t\t\tRect rect = new Rect ();", "+\t\t\tint window = OS.GetControlOwner (handle);", "+\t\t\tint x, y;", "+\t\t\tif (OS.HIVIEW) {", "+\t\t\t\tCGPoint pt = new CGPoint ();", "+\t\t\t\tpt.x = outPt.h;", "+\t\t\t\tpt.y = outPt.v;", "+\t\t\t\tOS.HIViewConvertPoint (pt, 0, handle);", "+\t\t\t\tx = (int) pt.x;", "+\t\t\t\ty = (int) pt.y;", "+\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowStructureRgn, rect);", "+\t\t\t} else {", "+\t\t\t\tOS.GetControlBounds (handle, rect);", "+\t\t\t\tx = outPt.h - rect.left;", "+\t\t\t\ty = outPt.v - rect.top;", "+\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\t\t\t}", "+\t\t\tx -= rect.left;", "+\t\t\ty -=  rect.top;", "+\t\t\tshort [] button = new short [1];", "+\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button);", "+\t\t\tint modifiers = OS.GetCurrentEventKeyModifiers ();", "+\t\t\tsendMouseEvent (SWT.MouseUp, button [0], display.clickCount, false, newChord, (short)x, (short)y, modifiers);", "+\t\t}", "+\t}", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3998b9e5fa4d942f386b28eddc3a2e08", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "11b2f530ba94f7cc0a5ec9019c355ecb80b0c317", "commitAfterChange": "957328edcfe9c61a24ed9f119d0fe3469ab92148", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r static int scaleImage(Image image, PhImage_t phImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight)", "signatureAfterChange": "\r static int scaleImage(Image image, PhImage_t phImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight)", "diff": ["-//\t\t\tint[] palette = new int[256];\r", "-//\t\t\tfor (int i = 0; i < palette.length; i++) {\r", "-//\t\t\t\tpalette[i] = i;\r", "-//\t\t\t}\r", "-//\t\t\tint palettePtr = OS.malloc(palette.length * 4);\r", "-//\t\t\tOS.memmove(palettePtr, palette, palette.length * 4);\r", "-//\t\t\t/*\r", "-//\t\t\t* Feature on Photon - It is only possible to draw on images of\r", "-//\t\t\t* type Pg_IMAGE_PALETTE_BYTE and Pg_IMAGE_DIRECT_888.\r", "-//\t\t\t*/\r", "-//\t\t\tint alphaImage = OS.PhCreateImage(null, (short)destWidth, (short)destHeight, OS.Pg_IMAGE_PALETTE_BYTE, palettePtr, palette.length, 0);\r", "-//\t\t\tif (alphaImage == 0) {\r", "-//\t\t\t\tImage.destroyImage(memImage);\r", "-//\t\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);\r", "-//\t\t\t}\r", "-//\t\t\tmc = OS.PmMemCreateMC(alphaImage, scale, trans);\r", "-//\t\t\tif (mc == 0) {\r", "-//\t\t\t\tImage.destroyImage(alphaImage);\r", "-//\t\t\t\tImage.destroyImage(memImage);\r", "-//\t\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);\r", "-//\t\t\t}\r", "-//\t\t\tOS.PmMemStart(mc);\r", "-//\t\t\tOS.PgSetPalette(palettePtr, 0, (short)0, (short)palette.length, OS.Pg_PALSET_SOFT, 0);\r", "-//\t\t\tOS.PgDrawImage(alpha.src_alpha_map_map, OS.Pg_IMAGE_PALETTE_BYTE, pos, dim, alpha.src_alpha_map_bpl, 0);\r", "-//\t\t\tOS.PgSetPalette(0, 0, (short)0, (short)-1, 0, 0);\r", "-//\t\t\tOS.PmMemFlush(mc, alphaImage);\r", "-//\t\t\tOS.PmMemStop(mc);\r", "-//\t\t\tOS.PmMemReleaseMC(mc);\r", "-//\t\t\tOS.free(palettePtr);\r", "-//\t\t\t\t\r", "-//\t\t\t/* Transfer the image to the scaled image alpha data*/\r", "-//\t\t\tPhImage_t phAlphaImage = new PhImage_t();\r", "-//\t\t\tOS.memmove(phAlphaImage, alphaImage, PhImage_t.sizeof);\r", "-//\t\t\talpha.src_alpha_map_dim_w = (short)phAlphaImage.bpl;\r", "-//\t\t\talpha.src_alpha_map_dim_h = (short)phAlphaImage.size_h;\r", "-//\t\t\talpha.src_alpha_map_map = phAlphaImage.image;\r", "-//\r", "-//\t\t\t/* Release the temporary image but not the image data */\r", "-//\t\t\tphAlphaImage.image = 0;\r", "-//\t\t\tphAlphaImage.bpl = 0;\r", "-//\t\t\tphAlphaImage.flags = OS.Ph_RELEASE_IMAGE_ALL;\r", "-//\t\t\tOS.memmove(alphaImage, phAlphaImage, PhImage_t.sizeof);\r", "-//\t\t\tOS.PhReleaseImage(alphaImage);\r", "-//\t\t\tOS.free(alphaImage);\r", "-\t\t\t\r", "-\t\t\t// The code above can not be used because it generates an image with\r", "-\t\t\t// scanline padding.  It seems that Photon does not accept\r", "-\t\t\t// padding in src_alpha_map, even though there is a field to specify\r", "-\t\t\t// the number of bytes per line - src_alpha_map_map_bpl.\r", "-\t\t\tbyte[] srcAlphaData = new byte[alpha.src_alpha_map_dim_w * alpha.src_alpha_map_dim_h];\r", "-\t\t\tOS.memmove(srcAlphaData, alpha.src_alpha_map_map, srcAlphaData.length);\r", "-\t\t\tbyte[] destAlphaData = new byte[destWidth * destHeight];\r", "-\t\t\tImageData.stretch8(srcAlphaData, alpha.src_alpha_map_dim_w, 0, 0, srcWidth, srcHeight, destAlphaData, destWidth, 0, 0, destWidth, destHeight, null, false, false);\r", "-\t\t\tint ptr = OS.malloc(destAlphaData.length);\r", "-\t\t\tOS.memmove(ptr, destAlphaData, destAlphaData.length);\r", "-\t\t\talpha.src_alpha_map_dim_w = (short)destWidth;\r", "-\t\t\talpha.src_alpha_map_dim_h = (short)destHeight;\r", "-\t\t\talpha.src_alpha_map_map = ptr;\r", "+\t\t\tint[] palette = new int[256];\r", "+\t\t\tfor (int i = 0; i < palette.length; i++) {\r", "+\t\t\t\tpalette[i] = i;\r", "+\t\t\t}\r", "+\t\t\tint palettePtr = OS.malloc(palette.length * 4);\r", "+\t\t\tOS.memmove(palettePtr, palette, palette.length * 4);\r", "+\t\t\t/*\r", "+\t\t\t* Feature on Photon - It is only possible to draw on images of\r", "+\t\t\t* type Pg_IMAGE_PALETTE_BYTE and Pg_IMAGE_DIRECT_888.\r", "+\t\t\t*/\r", "+\t\t\tint alphaImage = OS.PhCreateImage(null, (short)destWidth, (short)destHeight, OS.Pg_IMAGE_PALETTE_BYTE, palettePtr, palette.length, 0);\r", "+\t\t\tif (alphaImage == 0) {\r", "+\t\t\t\tOS.free(palettePtr);\r", "+\t\t\t\tOS.free(alphaPtr);\r", "+\t\t\t\tImage.destroyImage(memImage);\r", "+\t\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);\r", "+\t\t\t}\r", "+\t\t\tmc = OS.PmMemCreateMC(alphaImage, scale, trans);\r", "+\t\t\tif (mc == 0) {\r", "+\t\t\t\tOS.free(palettePtr);\r", "+\t\t\t\tOS.free(alphaPtr);\r", "+\t\t\t\tImage.destroyImage(alphaImage);\r", "+\t\t\t\tImage.destroyImage(memImage);\r", "+\t\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);\r", "+\t\t\t}\r", "+\t\t\tOS.PmMemStart(mc);\r", "+\t\t\tOS.PgSetPalette(palettePtr, 0, (short)0, (short)palette.length, OS.Pg_PALSET_SOFT, 0);\r", "+\t\t\tOS.PgDrawImage(alpha.src_alpha_map_map, OS.Pg_IMAGE_PALETTE_BYTE, pos, dim, alpha.src_alpha_map_bpl, 0);\r", "+\t\t\tOS.PgSetPalette(0, 0, (short)0, (short)-1, 0, 0);\r", "+\t\t\tOS.PmMemFlush(mc, alphaImage);\r", "+\t\t\tOS.PmMemStop(mc);\r", "+\t\t\tOS.PmMemReleaseMC(mc);\r", "+\t\t\tOS.free(palettePtr);\r", "+\t\t\t\t\r", "+\t\t\t/* Transfer the image to the scaled image alpha data*/\r", "+\t\t\tPhImage_t phAlphaImage = new PhImage_t();\r", "+\t\t\tOS.memmove(phAlphaImage, alphaImage, PhImage_t.sizeof);\r", "+\t\t\talpha.src_alpha_map_bpl = (short)phAlphaImage.bpl;\r", "+\t\t\talpha.src_alpha_map_dim_w = (short)phAlphaImage.bpl;\r", "+\t\t\talpha.src_alpha_map_dim_h = (short)phAlphaImage.size_h;\r", "+\t\t\talpha.src_alpha_map_map = phAlphaImage.image;\r", "+\r", "+\t\t\t/* Release the temporary image but not the image data */\r", "+\t\t\tphAlphaImage.image = 0;\r", "+\t\t\tphAlphaImage.bpl = 0;\r", "+\t\t\tphAlphaImage.flags = OS.Ph_RELEASE_IMAGE_ALL;\r", "+\t\t\tOS.memmove(alphaImage, phAlphaImage, PhImage_t.sizeof);\r", "+\t\t\tOS.PhReleaseImage(alphaImage);\r", "+\t\t\tOS.free(alphaImage);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6207c61be03a6e99a203d6ae737e637", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/carbon/org/eclipse/swt/browser/MozillaDelegate.java", "commitBeforeChange": "4ae9adf7e48c460902e20d5f61ddccfcc390a2c6", "commitAfterChange": "f59ba0592c53d088f646480ae0595db0a856908e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  int getHandle ()", "signatureAfterChange": "  int getHandle ()", "diff": ["-\tframe = SWT_AWT.new_Frame (browser);", "-\tint embedHandle = (int)Cocoa.getNativeHandleFromAWT (frame);", "+    int embedHandle = Cocoa.objc_msgSend (Cocoa.C_NSImageView, Cocoa.S_alloc);", "+\tif (embedHandle == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tNSRect r = new NSRect();", "+\tembedHandle = Cocoa.objc_msgSend (embedHandle, Cocoa.S_initWithFrame, r);", "+\tint rc;", "+\tint[] outControl = new int[1];", "+\tif (OS.VERSION >= 0x1050) {", "+\t\trc = Cocoa.HICocoaViewCreate(embedHandle, 0, outControl);", "+\t} else {", "+\t\ttry {", "+\t\t\tSystem.loadLibrary(\"frameembedding\");", "+\t\t} catch (UnsatisfiedLinkError e) {}", "+\t\trc = Cocoa.HIJavaViewCreateWithCocoaView(outControl, embedHandle);", "+\t}", "+\tif (rc != OS.noErr || outControl[0] == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint subHIView = outControl[0];", "+\tHILayoutInfo newLayoutInfo = new HILayoutInfo();", "+\tnewLayoutInfo.version = 0;", "+\tOS.HIViewGetLayoutInfo(subHIView, newLayoutInfo);", "+\tHISideBinding biding = newLayoutInfo.binding.top;", "+\tbiding.toView = 0;", "+\tbiding.kind = OS.kHILayoutBindMin;", "+\tbiding.offset = 0;", "+\tbiding = newLayoutInfo.binding.left;", "+\tbiding.toView = 0;", "+\tbiding.kind = OS.kHILayoutBindMin;", "+\tbiding.offset = 0;", "+\tbiding = newLayoutInfo.binding.bottom;", "+\tbiding.toView = 0;", "+\tbiding.kind = OS.kHILayoutBindMax;", "+\tbiding.offset = 0;", "+\tbiding = newLayoutInfo.binding.right;", "+\tbiding.toView = 0;", "+\tbiding.kind = OS.kHILayoutBindMax;", "+\tbiding.offset = 0;", "+\tOS.HIViewSetLayoutInfo(subHIView, newLayoutInfo);", "+\tOS.HIViewChangeFeatures(subHIView, OS.kHIViewFeatureIsOpaque, 0);", "+\tOS.HIViewSetVisible(subHIView, true);", "+\tint parentHandle = browser.handle;", "+\tOS.HIViewAddSubview(browser.handle, subHIView);", "+\tCGRect rect = new CGRect();", "+\tOS.HIViewGetFrame(parentHandle, rect);", "+\trect.x = rect.y = 0;", "+\tOS.HIViewSetFrame(subHIView, rect);"]}], "num": 21408}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "545002e2b735958ab0a46d7d274a9529", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52de4f8bb0153441e1d99745c4375fd3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ce2f35c3f6b1d0b5778f68f011b1d8668d3c5c72", "commitAfterChange": "00bee382096a1807d86474fed7c933116a37eeb8", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 125, "signatureBeforeChange": "\r void doSelectionLineEnd()", "signatureAfterChange": "\r StyleRange[] getSelectionLineStyles(StyleRange[] styles)", "diff": ["- */\r", "-void doSelectionLineEnd() {\r", "-\tint line = content.getLineAtOffset(caretOffset);\r", "-\tint lineOffset = content.getOffsetAtLine(line);\r", "-\t\t\r", "-\tif (selection.x == lineOffset && line < content.getLineCount() - 1) {\r", "-\t\tline++;\r", "-\t\tcaretOffset = content.getOffsetAtLine(line);\r", "-\t\tshowCaret();\r", "-\t}\r", "-\telse {\r", "-\t\tdoLineEnd();\r", "-\t}\r", "-}\r", "+ */\r", "+StyleRange[] getSelectionLineStyles(StyleRange[] styles) {\r", "+\tint selectionStart = selection.x;\r", "+\tint selectionEnd = selection.y;\r", "+\tVector newStyles = new Vector(styles.length);\t\r", "+\tStyleRange selectionStyle = null;\r", "+\tColor foreground = getSelectionForeground();\r", "+\tColor background = getSelectionBackground();\r", "+\r\r", "+\t// potential optimization: ignore styles if there is no bold style and the entire line is selected\r", "+\tfor (int i = 0; i < styles.length; i++) {\r", "+\t\tStyleRange style = styles[i];\r", "+\t\tint styleEnd = style.start + style.length;\r", "+\t\t\r", "+\t\tif (styleEnd <= selectionStart) {\r", "+\t\t\tnewStyles.addElement(style);\r", "+\t\t}\r", "+\t\telse // style overlaps selection start? (i.e., starts before selection start, ends after selection start\r", "+\t\tif (style.start < selectionStart && styleEnd > selectionStart) {\r", "+\t\t\tStyleRange newStyle = (StyleRange) style.clone();\r", "+\t\t\tnewStyle.length -= styleEnd - selectionStart;\r", "+\t\t\tnewStyles.addElement(newStyle);\r", "+\t\t\t// create new selection style with same font style starting at selection start ending at style end\r", "+\t\t\tselectionStyle = new StyleRange(selectionStart, styleEnd - selectionStart, foreground, background, newStyle.fontStyle);\r", "+\t\t\tnewStyles.addElement(selectionStyle);\r", "+\t\t\t// if style extends beyond selection a new style is returned for the unselected part of the style\r", "+\t\t\tnewStyle = setSelectionStyleEnd(selectionStyle, style);\r", "+\t\t\tif (newStyle != null) {\r", "+\t\t\t\tnewStyles.addElement(newStyle);\t\t\t\t\t\r", "+\t\t\t}\t\t\t\t\r", "+\t\t}\r", "+\t\telse // style starts within selection?\r", "+\t\tif (style.start >= selectionStart && style.start < selectionEnd) {\r", "+\t\t\tStyleRange newStyle;\r", "+\t\t\tint selectionStyleEnd;\r", "+\t\t\t// no selection style created yet?\r", "+\t\t\tif (selectionStyle == null) {\r", "+\t\t\t\t// create selection style with regular font style, starting at selection start, ending at style start\r", "+\t\t\t\tselectionStyle = new StyleRange(selectionStart, style.start - selectionStart, foreground, background);\r", "+\t\t\t\tnewStyles.addElement(selectionStyle);\r", "+\t\t\t\tif (style.start == selectionStart) {\r", "+\t\t\t\t\tselectionStyle.fontStyle = style.fontStyle;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tselectionStyleEnd = selectionStyle.start + selectionStyle.length;\r", "+\t\t\t// gap between current selection style end and style start?\r", "+\t\t\tif (style.start > selectionStyleEnd && selectionStyle.fontStyle != SWT.NORMAL) {\r", "+\t\t\t\t// create selection style with regular font style, starting at selection style end, ending at style start\r", "+\t\t\t\tselectionStyle = new StyleRange(selectionStyleEnd, style.start - selectionStyleEnd, foreground, background);\r", "+\t\t\t\tnewStyles.addElement(selectionStyle);\r", "+\t\t\t}\r", "+\t\t\tif (selectionStyle.fontStyle != style.fontStyle) {\r", "+\t\t\t\t// selection style end = style start\r", "+\t\t\t\tselectionStyle.length = style.start - selectionStyle.start;\r", "+\t\t\t\t// create selection style with style font style, starting at style start, ending at style end\r", "+\t\t\t\tselectionStyle = new StyleRange(style.start, style.length, foreground, background, style.fontStyle);\r", "+\t\t\t\tnewStyles.addElement(selectionStyle);\r", "+\t\t\t}\r", "+\t\t\telse {\r", "+\t\t\t\t// selection style end = style end\r", "+\t\t\t\tselectionStyle.length = styleEnd - selectionStyle.start;\r", "+\t\t\t}\r", "+\t\t\t// if style extends beyond selection a new style is returned for the unselected part of the style\r", "+\t\t\tnewStyle = setSelectionStyleEnd(selectionStyle, style);\r", "+\t\t\tif (newStyle != null) {\r", "+\t\t\t\tnewStyles.addElement(newStyle);\t\t\t\t\t\r", "+\t\t\t}\t\t\t\t\r", "+\t\t}\r", "+\t\telse {\r", "+\t\t\t// no selection style created yet?\r", "+\t\t\tif (selectionStyle == null) {\r", "+\t\t\t\t// create selection style with regular font style, starting at selection start, ending at selection end\r", "+\t\t\t\tselectionStyle = new StyleRange(selectionStart, selectionEnd - selectionStart, foreground, background);\r", "+\t\t\t\tnewStyles.addElement(selectionStyle);\r", "+\t\t\t}\r", "+\t\t\telse // does the current selection style end before the selection end?\r", "+\t\t\tif (selectionStyle.start + selectionStyle.length < selectionEnd) {\r", "+\t\t\t\tif (selectionStyle.fontStyle != SWT.NORMAL) {\r", "+\t\t\t\t\tint selectionStyleEnd = selectionStyle.start + selectionStyle.length;\r", "+\t\t\t\t\t// create selection style with regular font style, starting at selection style end, ending at selection end\r", "+\t\t\t\t\tselectionStyle = new StyleRange(selectionStyleEnd, selectionEnd - selectionStyleEnd, foreground, background);\r", "+\t\t\t\t\tnewStyles.addElement(selectionStyle);\r", "+\t\t\t\t}\r", "+\t\t\t\telse {\r", "+\t\t\t\t\tselectionStyle.length = selectionEnd - selectionStyle.start;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tnewStyles.addElement(style);\r", "+\t\t}\r", "+\t}\r", "+\tif (selectionStyle == null) {\r", "+\t\t// create selection style with regular font style, starting at selection start, ending at selection end\r", "+\t\tselectionStyle = new StyleRange(selectionStart, selectionEnd - selectionStart, foreground, background);\r", "+\t\tnewStyles.addElement(selectionStyle);\r", "+\t}\r", "+\telse // does the current selection style end before the selection end?\r", "+\tif (selectionStyle.start + selectionStyle.length < selectionEnd) {\r", "+\t\tif (selectionStyle.fontStyle != SWT.NORMAL) {\r", "+\t\t\tint selectionStyleEnd = selectionStyle.start + selectionStyle.length;\r", "+\t\t\t// create selection style with regular font style, starting at selection style end, ending at selection end\r", "+\t\t\tselectionStyle = new StyleRange(selectionStyleEnd, selectionEnd - selectionStyleEnd, foreground, background);\r", "+\t\t\tnewStyles.addElement(selectionStyle);\r", "+\t\t}\r", "+\t\telse {\r", "+\t\t\tselectionStyle.length = selectionEnd - selectionStyle.start;\r", "+\t\t}\r", "+\t}\r", "+\tstyles = new StyleRange[newStyles.size()];\r", "+\tnewStyles.copyInto(styles);\r", "+\treturn styles;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a35f825e5097c7a8521899402eb84c1e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/DisplayRenderer.java", "commitBeforeChange": "5544ce1d748561f71c4f1d1997c431f82e5c4c86", "commitAfterChange": "24e0049851c0d0a09cb9f25e5892d112e2936fed", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " protected StyleRange[] mergeSelectionLineStyles(StyleRange[] styles)", "signatureAfterChange": " protected Color getSelectionForeground()", "diff": ["+}", "+protected Color getSelectionForeground() {", "+\treturn parent.getSelectionForeground();", "-*/", "-protected StyleRange[] mergeSelectionLineStyles(StyleRange[] styles) {", "-\tPoint selection = parent.internalGetSelection();\t", "-\tint selectionStart = selection.x;", "-\tint selectionEnd = selection.y;", "-\tVector newStyles = new Vector(styles.length);\t", "-\tStyleRange selectionStyle = null;", "-\tColor foreground = parent.getSelectionForeground();", "-\tColor background = parent.getSelectionBackground();", "-", "-\t// potential optimization: ignore styles if there is no bold style and the entire line is selected", "-\tfor (int i = 0; i < styles.length; i++) {", "-\t\tStyleRange style = styles[i];", "-\t\tint styleEnd = style.start + style.length;", "-\t\t", "-\t\tif (styleEnd <= selectionStart) {", "-\t\t\tnewStyles.addElement(style);", "-\t\t}", "-\t\telse // style overlaps selection start? (i.e., starts before selection start, ends after selection start", "-\t\tif (style.start < selectionStart && styleEnd > selectionStart) {", "-\t\t\tStyleRange newStyle = (StyleRange) style.clone();", "-\t\t\tnewStyle.length -= styleEnd - selectionStart;", "-\t\t\tnewStyles.addElement(newStyle);", "-\t\t\t// create new selection style with same font style starting at selection start ending at style end", "-\t\t\tselectionStyle = new StyleRange(selectionStart, styleEnd - selectionStart, foreground, background, newStyle.fontStyle);", "-\t\t\tnewStyles.addElement(selectionStyle);", "-\t\t\t// if style extends beyond selection a new style is returned for the unselected part of the style", "-\t\t\tnewStyle = setSelectionStyleEnd(selectionStyle, style);", "-\t\t\tif (newStyle != null) {", "-\t\t\t\tnewStyles.addElement(newStyle);\t\t\t\t\t", "-\t\t\t}\t\t\t\t", "-\t\t}", "-\t\telse // style starts within selection?", "-\t\tif (style.start >= selectionStart && style.start < selectionEnd) {", "-\t\t\tStyleRange newStyle;", "-\t\t\tint selectionStyleEnd;", "-\t\t\t// no selection style created yet?", "-\t\t\tif (selectionStyle == null) {", "-\t\t\t\t// create selection style with regular font style, starting at selection start, ending at style start", "-\t\t\t\tselectionStyle = new StyleRange(selectionStart, style.start - selectionStart, foreground, background);", "-\t\t\t\tnewStyles.addElement(selectionStyle);", "-\t\t\t\tif (style.start == selectionStart) {", "-\t\t\t\t\tselectionStyle.fontStyle = style.fontStyle;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tselectionStyleEnd = selectionStyle.start + selectionStyle.length;", "-\t\t\t// gap between current selection style end and style start?", "-\t\t\tif (style.start > selectionStyleEnd && selectionStyle.fontStyle != SWT.NORMAL) {", "-\t\t\t\t// create selection style with regular font style, starting at selection style end, ending at style start", "-\t\t\t\tselectionStyle = new StyleRange(selectionStyleEnd, style.start - selectionStyleEnd, foreground, background);", "-\t\t\t\tnewStyles.addElement(selectionStyle);", "-\t\t\t}", "-\t\t\tif (selectionStyle.fontStyle != style.fontStyle) {", "-\t\t\t\t// selection style end = style start", "-\t\t\t\tselectionStyle.length = style.start - selectionStyle.start;", "-\t\t\t\t// create selection style with style font style, starting at style start, ending at style end", "-\t\t\t\tselectionStyle = new StyleRange(style.start, style.length, foreground, background, style.fontStyle);", "-\t\t\t\tnewStyles.addElement(selectionStyle);", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\t// selection style end = style end", "-\t\t\t\tselectionStyle.length = styleEnd - selectionStyle.start;", "-\t\t\t}", "-\t\t\t// if style extends beyond selection a new style is returned for the unselected part of the style", "-\t\t\tnewStyle = setSelectionStyleEnd(selectionStyle, style);", "-\t\t\tif (newStyle != null) {", "-\t\t\t\tnewStyles.addElement(newStyle);\t\t\t\t\t", "-\t\t\t}\t\t\t\t", "-\t\t}", "-\t\telse {", "-\t\t\t// no selection style created yet?", "-\t\t\tif (selectionStyle == null) {", "-\t\t\t\t// create selection style with regular font style, starting at selection start, ending at selection end", "-\t\t\t\tselectionStyle = new StyleRange(selectionStart, selectionEnd - selectionStart, foreground, background);", "-\t\t\t\tnewStyles.addElement(selectionStyle);", "-\t\t\t}", "-\t\t\telse // does the current selection style end before the selection end?", "-\t\t\tif (selectionStyle.start + selectionStyle.length < selectionEnd) {", "-\t\t\t\tif (selectionStyle.fontStyle != SWT.NORMAL) {", "-\t\t\t\t\tint selectionStyleEnd = selectionStyle.start + selectionStyle.length;", "-\t\t\t\t\t// create selection style with regular font style, starting at selection style end, ending at selection end", "-\t\t\t\t\tselectionStyle = new StyleRange(selectionStyleEnd, selectionEnd - selectionStyleEnd, foreground, background);", "-\t\t\t\t\tnewStyles.addElement(selectionStyle);", "-\t\t\t\t}", "-\t\t\t\telse {", "-\t\t\t\t\tselectionStyle.length = selectionEnd - selectionStyle.start;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tnewStyles.addElement(style);", "-\t\t}", "-\t}", "-\tif (selectionStyle == null) {", "-\t\t// create selection style with regular font style, starting at selection start, ending at selection end", "-\t\tselectionStyle = new StyleRange(selectionStart, selectionEnd - selectionStart, foreground, background);", "-\t\tnewStyles.addElement(selectionStyle);", "-\t}", "-\telse // does the current selection style end before the selection end?", "-\tif (selectionStyle.start + selectionStyle.length < selectionEnd) {", "-\t\tif (selectionStyle.fontStyle != SWT.NORMAL) {", "-\t\t\tint selectionStyleEnd = selectionStyle.start + selectionStyle.length;", "-\t\t\t// create selection style with regular font style, starting at selection style end, ending at selection end", "-\t\t\tselectionStyle = new StyleRange(selectionStyleEnd, selectionEnd - selectionStyleEnd, foreground, background);", "-\t\t\tnewStyles.addElement(selectionStyle);", "-\t\t}", "-\t\telse {", "-\t\t\tselectionStyle.length = selectionEnd - selectionStyle.start;", "-\t\t}", "-\t}", "-\tstyles = new StyleRange[newStyles.size()];", "-\tnewStyles.copyInto(styles);", "-\treturn styles;"]}], "num": 43888}
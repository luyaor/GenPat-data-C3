{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4418a8d702200d51ecb0713462d553a7", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41d1c6381eb2227040651ed4f8686d83", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_List.java", "commitBeforeChange": "34b48a1450d691429218250a2c0b9f1d585dff6c", "commitAfterChange": "6c48129efab113803ef6d6a35457b5eb7eea82a5", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "  public void test_setSelection$I()", "signatureAfterChange": "  public void test_setSelection$I()", "diff": ["-\tassertEquals(\"MULTI: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"MULTI: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"MULTI: setSelection(new int [] {2})\", list.getSelectionIndices(), new int[] {2});", "+\tassertArrayEquals(\"MULTI: setSelection(new int [] {2})\", list.getSelectionIndices(), new int[] {2});", "-\tassertEquals(\"MULTI: setSelection(new int [] {number})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"MULTI: setSelection(new int [] {number})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"MULTI: setSelection(new int [] {-1, number})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"MULTI: setSelection(new int [] {-1, number})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"MULTI: setSelection(new int [] {number - 1, number})\", list.getSelectionIndices(), new int[] {number - 1});", "+\tassertArrayEquals(\"MULTI: setSelection(new int [] {number - 1, number})\", list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(\"MULTI: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[] {0});", "+\tassertArrayEquals(\"MULTI: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[] {0});", "-\tassertEquals(\"MULTI: setSelection(new int [] {number, number})\", new int[0], list.getSelectionIndices());", "+\tassertArrayEquals(\"MULTI: setSelection(new int [] {number, number})\", new int[0], list.getSelectionIndices());", "-\tassertEquals(\"MULTI: setSelection(new int [] {number - 1, number - 1})\", list.getSelectionIndices(), new int[] {number - 1});", "+\tassertArrayEquals(\"MULTI: setSelection(new int [] {number - 1, number - 1})\", list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(\"EMPTY MULTI: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY MULTI: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {0})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY MULTI: setSelection(new int [] {0})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {-1})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY MULTI: setSelection(new int [] {-1})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {0, 0})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY MULTI: setSelection(new int [] {0, 0})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY MULTI: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {0, -1})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY MULTI: setSelection(new int [] {0, -1})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"SINGLE: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"SINGLE: setSelection(new int [] {2})\", list.getSelectionIndices(), new int[] {2});", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {2})\", list.getSelectionIndices(), new int[] {2});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {number})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"SINGLE: setSelection(new int [] {1, 0})\", list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {1, 0})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {0, 1, 2, 3, 5})\", list.getSelectionIndices(), new int [] {});", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {0, 1, 2, 3, 5})\", list.getSelectionIndices(), new int [] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {-1, number})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {-1, number})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number})\", list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {number - 1, number})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(indices)\", list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(\"SINGLE: setSelection(indices)\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number, number})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {number, number})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number - 1})\", list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {number - 1, number - 1})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {0, number, 1})\", list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {0, number, 1})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, 0, number - 2})\", list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {number - 1, 0, number - 2})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"EMPTY SINGLE: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY SINGLE: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {0})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY SINGLE: setSelection(new int [] {0})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {-1})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY SINGLE: setSelection(new int [] {-1})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {0, 0})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY SINGLE: setSelection(new int [] {0, 0})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY SINGLE: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {0, -1})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY SINGLE: setSelection(new int [] {0, -1})\", list.getSelectionIndices(), new int[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79a68cdb7d47e99f77fe26334add1c21", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_List.java", "commitBeforeChange": "ae857a34264d288e1dc57e6e3cb1970e51ca7ffa", "commitAfterChange": "1acbdc06fccff8d6f8ed7a4bad9ea879798c7b62", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "  public void test_setSelectionII()", "signatureAfterChange": "  public void test_setSelectionII()", "diff": ["-\tint number = 5;", "+\tint number = 8;", "-\tlist.setSelection(1, 1);", "-\tassertEquals(list.getSelectionIndices(), new int[] {1});", "-", "-\tlist.setSelection(10, 1);", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "-", "-\tlist.setSelection(3, 1);", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "-", "-\tlist.setSelection(-1, -1);", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "-", "-\tlist.setSelection(1, 3);", "-\tassertSame(list.getSelectionIndices(), new int[] {1, 2, 3});", "-", "-\tif (fCheckSWTPolicy == true) {", "-\t\tlist.setSelection(-1, 3);", "-\t\tassertSame(list.getSelectionIndices(), new int[] {0, 1, 2, 3});", "-", "-\t\tlist.setSelection(-1, 30);", "-\t\tassertSame(list.getSelectionIndices(), new int[] {0, 1, 2, 3, 4});", "-\t}", "-", "-\titems = new String[] { \"item0\", \"item1\", \"item2\", \"item3\" };", "-\tlist.setItems(items);", "-\tassertSame(list.getSelectionIndices(), new int[] { 1, 2 });", "-\tlist.setSelection(3, 3);", "-\tassertEquals(list.getSelectionIndices(), new int[] { 3 });", "-\tlist.setSelection(3, 2);", "-\tassertEquals(list.getSelectionIndices(), new int[] {}); ///IS THAT THE CORRECT ANSWER ??", "+\tassertEquals(list.getSelectionIndices(), new int[] {1, 2});", "+\tassertEquals(list.getFocusIndex(), 1);", "-\tlist.setSelection(0, 3);", "-\tassertSame(list.getSelectionIndices(), new int[] { 0, 1, 2, 3 });", "-\tlist.setSelection(4, 4);", "-\tassertEquals(list.getSelectionIndices(), new int[] {}); ///IS THAT THE CORRECT ANSWER ??", "+\tlist.setSelection(-3, -2);", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), 1);", "+\t", "+\tlist.setSelection(0, 1);", "+\tassertEquals(list.getSelectionIndices(), new int[] {0, 1});", "+\tassertEquals(list.getFocusIndex(), 0);", "+\t", "+\tlist.setSelection(-2, -1);", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), 0);", "-\tlist.setSelection(2, 5);", "-\tassertSame(list.getSelectionIndices(), new int[] { 2, 3 });", "-\tlist.setSelection(-2, 500);", "-\tassertSame(list.getSelectionIndices(), new int[] { 0, 1, 2, 3 });", "+\tlist.setSelection(number - 2, number - 1);", "+\tassertEquals(list.getSelectionIndices(), new int[] {number - 2, number - 1});", "+\tassertEquals(list.getFocusIndex(), number - 2);", "+", "+\tlist.setSelection(number - 1, number);", "+\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertEquals(list.getFocusIndex(), number - 1);", "+", "+\tlist.setSelection(-1, 0);", "+\tassertEquals(list.getSelectionIndices(), new int[] {0});", "+\tassertEquals(list.getFocusIndex(), 0);", "+\t", "+\tlist.setSelection(number, number + 1);", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), 0);", "+\t", "+\tlist.setSelection(0, 0);", "+\tassertEquals(list.getSelectionIndices(), new int[] {0});", "+\tassertEquals(list.getFocusIndex(), 0);", "+\t", "+\tlist.setSelection(2, 1);", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), 0);", "+", "+\tlist.setSelection(number - 1, number - 1);", "+\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertEquals(list.getFocusIndex(), number - 1);", "+\t", "+\tlist.setSelection(-1, -1);", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), number - 1);", "-", "+\tassertEquals(list.getFocusIndex(), 2);", "-\tlist.deselectAll();", "-\tlist.setSelection(10, 1);", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tlist.setSelection(-3, -2);", "+\tassertEquals(list.getSelectionIndices(), new int[] {2});", "+\tassertEquals(list.getFocusIndex(), 2);", "+\t", "+\tlist.setSelection(0, 1);", "+\tassertEquals(list.getSelectionIndices(), new int[] {1});", "+\tassertEquals(list.getFocusIndex(), 1);", "+\t", "+\tlist.setSelection(-2, -1);", "+\tassertEquals(list.getSelectionIndices(), new int[] {1});", "+\tassertEquals(list.getFocusIndex(), 1);", "-\tlist.setSelection(3, 1);", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tlist.setSelection(number - 2, number - 1);", "+\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertEquals(list.getFocusIndex(), number - 1);", "+\tlist.setSelection(number - 1, number);", "+\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertEquals(list.getFocusIndex(), number - 1);", "+", "+\tlist.setSelection(-1, 0);", "+\tassertEquals(list.getSelectionIndices(), new int[] {0});", "+\tassertEquals(list.getFocusIndex(), 0);", "+\t", "+\tlist.setSelection(number, number + 1);", "+\tassertEquals(list.getSelectionIndices(), new int[] {0});", "+\tassertEquals(list.getFocusIndex(), 0);", "+\t", "+\tlist.setSelection(0, 0);", "+\tassertEquals(list.getSelectionIndices(), new int[] {0});", "+\tassertEquals(list.getFocusIndex(), 0);", "+\t", "+\tlist.setSelection(2, 1);", "+\tassertEquals(list.getSelectionIndices(), new int[] {0});", "+\tassertEquals(list.getFocusIndex(), 0);", "+", "+\tlist.setSelection(number - 1, number - 1);", "+\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertEquals(list.getFocusIndex(), number - 1);", "+\t", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "-", "-\tlist.setSelection(1, 3);", "-\tassertEquals(list.getSelectionIndices(), new int[] {3});", "-", "-\tlist.setSelection(-1, 3);", "-\tassertEquals(list.getSelectionIndices(), new int[] {3});", "-", "-\tlist.setSelection(-1, 30);", "-\tassertEquals(list.getSelectionIndices(), new int[] {3});", "-", "-\tlist.setSelection(1, 2);", "-\tassertEquals(list.getSelectionIndices(), new int[] { 2 });", "-", "-\tlist.setSelection(3, 3);", "-\tassertEquals(list.getSelectionIndices(), new int[] { 3 });", "-", "-\tlist.setSelection(3, 2);", "-\tassertEquals(list.getSelectionIndices(), new int[] { 3 });", "-", "-\tlist.setSelection(0, 3);", "-\tassertEquals(list.getSelectionIndices(), new int[] { 3 });", "-", "-\tlist.deselectAll();", "-\tlist.setSelection(4, 4);", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "-", "-\tlist.setSelection(2, 5);", "-\tassertEquals(list.getSelectionIndices(), new int[] { 3 });", "-", "-\tlist.setSelection(-2, 500);", "-\tassertEquals(list.getSelectionIndices(), new int[] { 3 });", "+\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertEquals(list.getFocusIndex(), number - 1);"]}], "num": 60237}
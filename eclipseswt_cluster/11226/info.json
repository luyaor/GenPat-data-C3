{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33a254300bd5248f42c918dc9a2c35df", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b73e9c8505254fa4d9ee7ad5401f25ae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "ba37366be2ce4b81c2ea0b47314627621478b774", "commitAfterChange": "2c04ec257a967dc9b71448cc82c356c64107e558", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tint Next(int celt, int rgvar, int pceltFetched)", "signatureAfterChange": " \tint Next(int celt, int rgvar, int pceltFetched)", "diff": ["-\tint Next(int celt, int rgvar, int pceltFetched) {", "+\tint Next(int celt, int /*long*/ rgvar, int /*long*/ pceltFetched) {", "-\t\t\tint[] ppvObject = new int[1];", "+\t\t\tint /*long*/[] ppvObject = new int /*long*/[1];", "-\t\t\t\t\tCOM.MoveMemory(rgvar + i * 16 + 8, new int[] { accessible.objIAccessible.getAddress() }, 4);", "+\t\t\t\t\tCOM.MoveMemory(rgvar + i * 16 + 8, new int /*long*/[] { accessible.objIAccessible.getAddress() }, OS.PTR_SIZEOF);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25342445e24d76df32bbf52ecc0eef3b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "075a49840c046c62dc7adb3fc54f6d6df5b0ad40", "commitAfterChange": "8eb3c5627dbf43c31a784f365fbe909f5c9d345a", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " \tint Next(int celt, int rgvar, int pceltFetched)", "signatureAfterChange": " \tint Next(int celt, int rgvar, int pceltFetched)", "diff": ["+\t */", "+\t\t\tienumvariant.Release();", "-\t\t\t\t\tint address = ((Accessible) nextItem).objIAccessible.getAddress();", "+\t\t\t\t\tAccessible accessible = (Accessible) nextItem;", "+\t\t\t\t\taccessible.AddRef();", "-\t\t\t\t\tCOM.MoveMemory(rgvar + i * 16 + 8, new int[] { address }, 4);", "+\t\t\t\t\tCOM.MoveMemory(rgvar + i * 16 + 8, new int[] { accessible.objIAccessible.getAddress() }, 4);"]}], "num": 11226}
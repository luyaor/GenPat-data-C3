{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "358e13ff417df1d88526bdb73efd5052", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65fbcaf447d1bdd6542d5fea4a165a75", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 48, "signatureBeforeChange": " int processPaint (Object callData)", "signatureAfterChange": "  void updateArrow ()", "diff": ["-}", "-int processPaint (Object callData) {", "-", "-\tif ((style & SWT.SEPARATOR) != 0 && control != null)", "-\t\treturn 0;", "-\t\t", "-\tMacRect bounds= new MacRect();", "-\tOS.GetControlBounds(handle, bounds.getData());", "-\tbounds.setLocation(0, 0);", "-\t", "-\tint width= bounds.getWidth();", "-\tint height= bounds.getHeight();", "-\t", "-\tfinal Display display = getDisplay ();", "-", "-\tDrawable drawable= new Drawable() {", "-\t\tpublic int internal_new_GC (GCData data) {", "-\t\t\tdata.device = display;", "-\t\t\tdata.foreground = parent.getForegroundPixel();", "-\t\t\tdata.background = parent.getBackgroundPixel();", "-\t\t\tdata.font = parent.font.handle;", "-\t\t\tdata.controlHandle = handle;", "-\t\t\treturn OS.GetWindowPort(OS.GetControlOwner(handle));", "-\t\t}", "-\t\tpublic void internal_dispose_GC (int xGC, GCData data) {", "-\t\t}", "-\t};", "-\t", "-\tboolean hasCursor= hasCursor ();", "-", "-\tGC gc= new GC(drawable);", "-\t", "-\tMacControlEvent me= (MacControlEvent) callData;", "-\tRectangle r= gc.carbon_focus(me.getDamageRegionHandle());", "-\tif (!r.isEmpty()) {", "-\t\t", "-\t\t// erase background", "-\t\tgc.fillRectangle(0, 0, width, height);", "-\t\t", "-\t\tif ((style & SWT.SEPARATOR) != 0) {", "-\t\t", "-\t\t\tOS.DrawThemeSeparator(bounds.getData(), OS.kThemeStateActive);", "-\t\t\t", "-\t\t\t\t\t", "-\t\t\tif ((parent.style & SWT.FLAT) != 0 && set) {", "-\t\t\t\tgc.setBackground(Color.carbon_new(display, 0xE0E0E0, false));", "-\t\t\t\tgc.fillRoundRectangle(1, 1, width-2, height-2, 8, 8);", "-\t\t\t\tgc.setForeground(display.getSystemColor(SWT.COLOR_GRAY));", "-\t\t\t\tgc.drawRoundRectangle(1, 1, width-3, height-3, 8, 8);", "-\t\t\t}", "-\t\t", "-\t\t\tImage currentImage = image;", "-\t\t\tboolean enabled = getEnabled();", "-\t\t", "-\t\t\tshort[] newInfo= new short[3];", "-\t\t\t\t\t", "-\t\t\tnewInfo[1]= set ? OS.kThemeButtonOn : OS.kThemeButtonOff;", "-\t\t\t", "-\t\t\tif ((parent.style & SWT.FLAT) != 0) {", "-\t\t\t\t", "-\t\t\t\tif (hasCursor && enabled) {", "-\t\t\t\t\tif (OS.StillDown())", "-\t\t\t\t\t\tnewInfo[0]= OS.kThemeStatePressed;", "-\t\t\t\t\telse", "-\t\t\t\t\t\tnewInfo[0]= OS.kThemeStateActive;", "-\t\t\t\t} else", "-\t\t\t\t\tnewInfo= null;", "-\t\t\t\t", "-\t\t\t\t/* Determine if hot image should be used */", "-\t\t\t\tif (enabled && hasCursor && hotImage != null) {", "-\t\t\t\t\tcurrentImage = hotImage;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tnewInfo[0]= (hasCursor && OS.StillDown()) ? OS.kThemeStatePressed : OS.kThemeStateActive;", "-\t\t\t}", "-\t", "-\t\t\tif (newInfo != null) {", "-\t\t\t\tMacRect b= new MacRect(1, 1, width-2, height-2);", "-\t\t\t\tOS.DrawThemeButton(b.getData(), OS.kThemeSmallBevelButton, newInfo, fPrevInfo, 0, 0, 0);", "-\t\t\t}", "-\t\t\tfPrevInfo= newInfo;", "-\t\t\t\t", "-\t\t\tif (enabled) {", "-\t\t\t\tgc.setForeground (parent.getForeground());", "-\t\t\t} else {", "-\t\t\t\tcurrentImage = disabledImage;", "-\t\t\t\tif (currentImage == null && image != null) {", "-\t\t\t\t\tcurrentImage = new Image (display, image, SWT.IMAGE_DISABLE);", "-\t\t\t\t}", "-\t\t\t\tColor disabledColor = display.getSystemColor (SWT.COLOR_WIDGET_NORMAL_SHADOW);", "-\t\t\t\tgc.setForeground (disabledColor);", "-\t\t\t}", "-\t\t\t", "-\t\t\tint textX = 0, textY = 0, textWidth = 0, textHeight = 0;", "-\t\t\tif (text.length() > 0) {", "-\t\t\t\tint flags = SWT.DRAW_DELIMITER | SWT.DRAW_TAB | SWT.DRAW_MNEMONIC;", "-\t\t\t\tPoint textExtent = gc.textExtent (text, flags);", "-\t\t\t\ttextWidth = textExtent.x;", "-\t\t\t\ttextHeight = textExtent.y;", "-\t\t\t}\t", "-\t\t\tint imageX = 0, imageY = 0, imageWidth = 0, imageHeight = 0;", "-\t\t\tif (currentImage != null) {", "-\t\t\t\ttry { // AW FIXME", "-\t\t\t\t\tRectangle imageBounds = currentImage.getBounds ();", "-\t\t\t\t\timageWidth = imageBounds.width;", "-\t\t\t\t\timageHeight = imageBounds.height;", "-\t\t\t\t} catch (SWTError e) {", "-\t\t\t\t\tSystem.out.println(\"ToolItem.processPaint: error in image.getBounds: \" + e);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\tint spacing = 0;", "-\t\t\tif (textWidth != 0 && imageWidth != 0) spacing = 2;", "-\t\t\tif ((parent.style & SWT.RIGHT) != 0) {", "-\t\t\t\timageX = (width - imageWidth - textWidth - spacing) / 2;", "-\t\t\t\timageY = (height - imageHeight) / 2;", "-\t\t\t\ttextX = spacing + imageX + imageWidth;", "-\t\t\t\ttextY = (height - textHeight) / 2;", "-\t\t\t} else {\t\t", "-\t\t\t\timageX = (width - imageWidth) / 2;", "-\t\t\t\timageY = (height - imageHeight - textHeight - spacing) / 2;", "-\t\t\t\ttextX = (width - textWidth) / 2;", "-\t\t\t\ttextY = spacing + imageY + imageHeight;", "-\t\t\t}", "-\t\t\t", "-\t\t\tif ((style & SWT.DROP_DOWN) != 0) {", "-\t\t\t\ttextX -= 6;  imageX -=6;", "-\t\t\t}", "-\t\t\tif (textWidth > 0) {", "-\t\t\t\tint flags = SWT.DRAW_DELIMITER | SWT.DRAW_TAB | SWT.DRAW_MNEMONIC | SWT.DRAW_TRANSPARENT;", "-\t\t\t\tgc.drawText(text, textX, textY, flags);", "-\t\t\t}", "-\t\t\tif (imageWidth > 0)", "-\t\t\t\tgc.drawImage(currentImage, imageX, imageY);", "-\t\t\t\t", "-\t\t\tif ((style & SWT.DROP_DOWN) != 0) {", "-\t\t\t\tint startX = width - 12, startY = (height - 2) / 2;", "-\t\t\t\tint [] arrow = {startX, startY, startX + 3, startY + 3, startX + 6, startY};", "-\t\t\t\tgc.setBackground (gc.getForeground ());", "-\t\t\t\tgc.fillPolygon (arrow);", "-\t\t\t\tgc.drawPolygon (arrow);", "-\t\t\t}", "-\t\t\tif (!enabled && disabledImage == null) {", "-\t\t\t\tif (currentImage != null) currentImage.dispose ();", "-\t\t\t}", "-\tgc.carbon_unfocus();", "+", "+void updateArrow () {", "+\tif (arrowCIcon != 0) destroyCIcon (arrowCIcon);", "+\tarrowCIcon = 0;", "+\tDisplay display = getDisplay ();", "+\tImage image = new Image (display, 6, 4);", "+\tGC gc = new GC (image);", "+\tint startX = 0, startY = 0;", "+\tint [] arrow = {startX, startY, startX + 3, startY + 3, startX + 6, startY};", "+\tgc.setBackground (parent.getForeground ());", "+\tgc.fillPolygon (arrow);", "+\tgc.drawPolygon (arrow);", "-\t", "-\treturn 0;", "+\tImageData data = image.getImageData ();", "+\tdata.transparentPixel = 0xFFFFFFFF;", "+\timage.dispose ();", "+\timage = new Image (getDisplay (), data, data.getTransparencyMask());", "+\tarrowCIcon = createCIcon (image);", "+\timage.dispose ();", "+\tControlButtonContentInfo inContent = new ControlButtonContentInfo ();", "+\tinContent.contentType = (short) OS.kControlContentCIconHandle;", "+\tinContent.iconRef = arrowCIcon;", "+\tOS.SetBevelButtonContentInfo (arrowHandle, inContent);\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d7694f8e092170df36cc36e9c4ce841", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "021c9ffb1f03bab865a8755698d6a0a3d739b6cc", "commitAfterChange": "a22dc50286ff5b97c74cd0b12653f08fe95a1ee7", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 71, "signatureBeforeChange": " void onMouse(Event event)", "signatureAfterChange": " void onMouse(Event event)", "diff": ["+\tif( isDisposed() ) {", "+\t\treturn;", "+\t}", "-\t\t\tif (minImageState != SWT.NONE) {", "-\t\t\t\tminImageState = SWT.NONE;", "-\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "-\t\t\t}", "-\t\t\tif (maxImageState != SWT.NONE) {", "-\t\t\t\tmaxImageState = SWT.NONE;", "-\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "-\t\t\t}", "-\t\t\tif (chevronImageState != SWT.NONE) {", "-\t\t\t\tchevronImageState = SWT.NONE;", "-\t\t\t\tredraw(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height, false);", "-\t\t\t}", "+\t\tcase SWT.MouseHover:", "+\t\t\tif (hoverTb && hoverRect.contains(x, y) && !hovering) {", "+\t\t\t\thovering = true;", "+\t\t\t\tupdateItems();", "+\t\t\t\thoverTimerRunning = true;", "+\t\t\t\tevent.display.timerExec(2000, new Runnable() {", "+\t\t\t\t\tpublic void run() {", "+\t\t\t\t\t\tif (isDisposed()) return;", "+\t\t\t\t\t\tif (hovering) {", "+\t\t\t\t\t\t\tDisplay display = getDisplay();", "+\t\t\t\t\t\t\tControl c = display.getCursorControl();", "+\t\t\t\t\t\t\tboolean reschedule = false;", "+\t\t\t\t\t\t\tif (c != null) {", "+\t\t\t\t\t\t\t\tfor (int i = 0; i < controls.length; i++) {", "+\t\t\t\t\t\t\t\t\tControl temp = c;", "+\t\t\t\t\t\t\t\t\tdo {", "+\t\t\t\t\t\t\t\t\t\tif (temp.equals(controls[i])) {", "+\t\t\t\t\t\t\t\t\t\t\treschedule = true;", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\ttemp = temp.getParent();", "+\t\t\t\t\t\t\t\t\t\t\tif (temp == null || temp.equals(CTabFolder.this)) break;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t} while (!reschedule);", "+\t\t\t\t\t\t\t\t\tif (reschedule) break;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (reschedule && hoverTimerRunning) {", "+\t\t\t\t\t\t\t\tdisplay.timerExec(2000, this);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\thovering = false;", "+\t\t\t\t\t\t\t\tupdateItems();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t\treturn;", "+\t\t\t}", "-\t\t\tif (minRect.contains(x, y)) {", "-\t\t\t\tminImageState = SWT.SELECTED;", "-\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "-\t\t\t\tupdate();", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tif (maxRect.contains(x, y)) {", "-\t\t\t\tmaxImageState = SWT.SELECTED;", "-\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "-\t\t\t\tupdate();", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tif (chevronRect.contains(x, y)) {", "-\t\t\t\tif (chevronImageState != SWT.HOT) {", "-\t\t\t\t\tchevronImageState = SWT.HOT;", "-\t\t\t\t} else {", "-\t\t\t\t\tchevronImageState = SWT.SELECTED;", "-\t\t\t\t}", "-\t\t\t\tredraw(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height, false);", "-\t\t\t\tupdate();", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tboolean close = false, minimize = false, maximize = false, chevron = false;", "-\t\t\tif (minRect.contains(x, y)) {", "-\t\t\t\tminimize = true;", "-\t\t\t\tif (minImageState != SWT.SELECTED && minImageState != SWT.HOT) {", "-\t\t\t\t\tminImageState = SWT.HOT;", "-\t\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (maxRect.contains(x, y)) {", "-\t\t\t\tmaximize = true;", "-\t\t\t\tif (maxImageState != SWT.SELECTED && maxImageState != SWT.HOT) {", "-\t\t\t\t\tmaxImageState = SWT.HOT;", "-\t\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (chevronRect.contains(x, y)) {", "-\t\t\t\tchevron = true;", "-\t\t\t\tif (chevronImageState != SWT.SELECTED && chevronImageState != SWT.HOT) {", "-\t\t\t\t\tchevronImageState = SWT.HOT;", "-\t\t\t\t\tredraw(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height, false);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (minImageState != SWT.NONE && !minimize) {", "-\t\t\t\tminImageState = SWT.NONE;", "-\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "-\t\t\t}", "-\t\t\tif (maxImageState != SWT.NONE && !maximize) {", "-\t\t\t\tmaxImageState = SWT.NONE;", "-\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "-\t\t\t}", "-\t\t\tif (chevronImageState != SWT.NONE && !chevron) {", "-\t\t\t\tchevronImageState = SWT.NONE;", "-\t\t\t\tredraw(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height, false);", "-\t\t\t}", "+\t\t\tboolean close = false;", "-\t\t\tif (chevronRect.contains(x, y)) {", "-\t\t\t\tboolean selected = chevronImageState == SWT.SELECTED;", "-\t\t\t\tif (!selected) return;", "-\t\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "-\t\t\t\te.widget = this;", "-\t\t\t\te.time = event.time;", "-\t\t\t\te.x = chevronRect.x;", "-\t\t\t\te.y = chevronRect.y;", "-\t\t\t\te.width = chevronRect.width;", "-\t\t\t\te.height = chevronRect.height;", "-\t\t\t\te.doit = true;", "-\t\t\t\tfor (int i = 0; i < folderListeners.length; i++) {", "-\t\t\t\t\tfolderListeners[i].showList(e);", "-\t\t\t\t}", "-\t\t\t\tif (e.doit && !isDisposed()) {", "-\t\t\t\t\tshowList(chevronRect);", "-\t\t\t\t}", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tif (minRect.contains(x, y)) {", "-\t\t\t\tboolean selected = minImageState == SWT.SELECTED;", "-\t\t\t\tminImageState = SWT.HOT;", "-\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "-\t\t\t\tif (!selected) return;", "-\t\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "-\t\t\t\te.widget = this;", "-\t\t\t\te.time = event.time;", "-\t\t\t\tfor (int i = 0; i < folderListeners.length; i++) {", "-\t\t\t\t\tif (minimized) {", "-\t\t\t\t\t\tfolderListeners[i].restore(e);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tfolderListeners[i].minimize(e);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tif (maxRect.contains(x, y)) {", "-\t\t\t\tboolean selected = maxImageState == SWT.SELECTED;", "-\t\t\t\tmaxImageState = SWT.HOT;", "-\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "-\t\t\t\tif (!selected) return;", "-\t\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "-\t\t\t\te.widget = this;", "-\t\t\t\te.time = event.time;", "-\t\t\t\tfor (int i = 0; i < folderListeners.length; i++) {", "-\t\t\t\t\tif (maximized) {", "-\t\t\t\t\t\tfolderListeners[i].restore(e);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tfolderListeners[i].maximize(e);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn;", "-\t\t\t}"]}], "num": 32306}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93dd0594052eda814f0c637d1bae1fbd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c71f9c8d121576de997a2e0a5a2a4598", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/TabFolder.java", "commitBeforeChange": "21db765cd71e211ed7a422832ea159585ff971e3", "commitAfterChange": "cfc1e42b8ee7293ce68f0fd9dcd0e1b2cb8bb08a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  private void handleSelectionChange(int newValue)", "signatureAfterChange": "  private void handleSelectionChange(int newValue)", "diff": ["-", "-\tTabItem item = null;", "-\tint index= oldValue;", "-", "-\tif (index != -1) item = items [index];", "-\tif (item != null) {", "-\t\tControl control = item.control;", "-\t\tif (control != null && !control.isDisposed ()) {", "-\t\t\tcontrol.setVisible (false);", "-\t\t}", "-\t}", "-\t\t", "-\tindex= newValue;", "-\tif (index != -1) item = items [index];", "-\tif (item != null) {", "-\t\tControl control = item.control;", "-\t\tif (control != null && !control.isDisposed ()) {", "-\t\t\tcontrol.setBounds (getClientArea ());", "-\t\t\tcontrol.setVisible (true);", "-\t\t}", "-\t}", "-\tEvent event = new Event ();", "-\tevent.item = item;", "-\tpostEvent (SWT.Selection, event);", "+\tif (false)", "+\t\tsetSelection (newValue, true);", "+\t", "+\telse {", "+\t\tTabItem item = null;", "+\t\tint index= oldValue;", "+\t", "+\t\tif (index != -1) item = items [index];", "+\t\tif (item != null) {", "+\t\t\tControl control = item.control;", "+\t\t\tif (control != null && !control.isDisposed ()) {", "+\t\t\t\tcontrol.setVisible (false);", "+\t\t\t}", "+\t\t}", "+\t\t\t", "+\t\tindex= newValue;", "+\t\tif (index != -1) item = items [index];", "+\t\tif (item != null) {", "+\t\t\tControl control = item.control;", "+\t\t\tif (control != null && !control.isDisposed ()) {", "+\t\t\t\tcontrol.setBounds (getClientArea ());", "+\t\t\t\tcontrol.setVisible (true);", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tEvent event = new Event ();", "+\t\tevent.item = item;", "+\t\tpostEvent (SWT.Selection, event);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd663ba158ece3b7e2f4445ade71b971", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "e90ab2125687aa309a4ccb3b915236a2c38bbe42", "commitAfterChange": "4cdc1e7237ed4ed5f9297953113ca3141adaaffe", "methodNumberBeforeChange": 184, "methodNumberAfterChange": 184, "signatureBeforeChange": "  long applicationNextEventMatchingMask (long id, long sel, long mask, long expiration, long mode, long dequeue)", "signatureAfterChange": "  long applicationNextEventMatchingMask (long id, long sel, long mask, long expiration, long mode, long dequeue)", "diff": ["-\tobjc_super super_struct = new objc_super();", "-\tsuper_struct.receiver = id;", "-\tsuper_struct.super_class = OS.objc_msgSend(id, OS.sel_superclass);", "-\tlong /*int*/ result = OS.objc_msgSendSuper(super_struct, sel, mask, expiration, mode, dequeue != 0);", "-\tif (result != 0) {", "-\t\t/*", "-\t\t * Feature of Cocoa.  When an NSComboBox's items list is visible it runs an event", "-\t\t * loop that will close the list in response to a processed NSApplicationDefined", "-\t\t * event.", "-\t\t *", "-\t\t * Mozilla-style Browsers are a common source of NSApplicationDefined events that", "-\t\t * will cause this to happen, which is not desirable in the context of SWT.  The", "-\t\t * workaround is to detect this case and to not return the event that would trigger", "-\t\t * this to happen.", "-\t\t */", "-\t\tif (dequeue != 0 && currentCombo != null && !currentCombo.isDisposed()) {", "-\t\t\tNSEvent nsEvent = new NSEvent(result);", "-\t\t\tif (mozillaRunning) {", "-\t\t\t\tif (nsEvent.type() == OS.NSApplicationDefined) {", "-\t\t\t\t\treturn 0;", "+\tsendPreExternalEventDispatchEvent();", "+\ttry {", "+\t\tobjc_super super_struct = new objc_super();", "+\t\tsuper_struct.receiver = id;", "+\t\tsuper_struct.super_class = OS.objc_msgSend(id, OS.sel_superclass);", "+\t\tlong /*int*/ result = OS.objc_msgSendSuper(super_struct, sel, mask, expiration, mode, dequeue != 0);", "+\t\tif (result != 0) {", "+\t\t\t/*", "+\t\t\t * Feature of Cocoa.  When an NSComboBox's items list is visible it runs an event", "+\t\t\t * loop that will close the list in response to a processed NSApplicationDefined", "+\t\t\t * event.", "+\t\t\t *", "+\t\t\t * Mozilla-style Browsers are a common source of NSApplicationDefined events that", "+\t\t\t * will cause this to happen, which is not desirable in the context of SWT.  The", "+\t\t\t * workaround is to detect this case and to not return the event that would trigger", "+\t\t\t * this to happen.", "+\t\t\t */", "+\t\t\tif (dequeue != 0 && currentCombo != null && !currentCombo.isDisposed()) {", "+\t\t\t\tNSEvent nsEvent = new NSEvent(result);", "+\t\t\t\tif (mozillaRunning) {", "+\t\t\t\t\tif (nsEvent.type() == OS.NSApplicationDefined) {", "+\t\t\t\t\t\treturn 0;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (nsEvent.type() == OS.NSKeyDown) {", "+\t\t\t\t\tcurrentCombo.sendTrackingKeyEvent(nsEvent, SWT.KeyDown);", "-\t\t\tif (nsEvent.type() == OS.NSKeyDown) {", "-\t\t\t\tcurrentCombo.sendTrackingKeyEvent(nsEvent, SWT.KeyDown);", "+\t\t\tif (dequeue != 0 && trackingControl != null && !trackingControl.isDisposed()) {", "+\t\t\t\tapplicationSendTrackingEvent(new NSEvent(result), trackingControl);", "-\t\tif (dequeue != 0 && trackingControl != null && !trackingControl.isDisposed()) {", "-\t\t\tapplicationSendTrackingEvent(new NSEvent(result), trackingControl);", "-\t\t}", "+\t\treturn result;", "+\t} finally {", "+\t\tsendPostExternalEventDispatchEvent();", "-\treturn result;"]}], "num": 39388}
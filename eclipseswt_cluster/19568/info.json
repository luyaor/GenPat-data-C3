{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c6ba55f0cdd0f18192d9745def65979", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9772aa75b9081bb6fd30a89ba1da307c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "28611873c812080da03092456ee7cc4c93ef80a3", "commitAfterChange": "e657e76e5131e900496ccd41899277450879646c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t\t\tpublic int windowProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int transparentProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["-\t\tObject windowProc = new Object () {", "-\t\t\tpublic int windowProc (int hwnd, int msg, int wParam, int lParam) {", "-\t\t\t\tswitch (msg) {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* We typically do not want to answer that the transparent window is", "-\t\t\t\t\t* transparent to hits since doing so negates the effect of having it", "-\t\t\t\t\t* to grab events.  However, clients of the tracker should not be aware", "-\t\t\t\t\t* of this transparent window.  Therefore if there is a hit query", "-\t\t\t\t\t* performed as a result of client code then answer that the transparent", "-\t\t\t\t\t* window is transparent to hits so that its existence will not impact", "-\t\t\t\t\t* the client.", "-\t\t\t\t\t*/", "-\t\t\t\t\tcase OS.WM_NCHITTEST:", "-\t\t\t\t\t\tif (inEvent) return OS.HTTRANSPARENT;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.WM_SETCURSOR:", "-\t\t\t\t\t\tif (clientCursor != 0) {", "-\t\t\t\t\t\t\tOS.SetCursor (clientCursor);", "-\t\t\t\t\t\t\treturn 1;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (resizeCursor != 0) {", "-\t\t\t\t\t\t\tOS.SetCursor (resizeCursor);", "-\t\t\t\t\t\t\treturn 1;", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn OS.CallWindowProc (oldProc, hwnd, msg, wParam, lParam);", "-\t\t\t}", "+", "+int transparentProc (int hwnd, int msg, int wParam, int lParam) {", "+\tswitch (msg) {", "+\t\t/*", "+\t\t* We typically do not want to answer that the transparent window is", "+\t\t* transparent to hits since doing so negates the effect of having it", "+\t\t* to grab events.  However, clients of the tracker should not be aware", "+\t\t* of this transparent window.  Therefore if there is a hit query", "+\t\t* performed as a result of client code then answer that the transparent", "+\t\t* window is transparent to hits so that its existence will not impact", "+\t\t* the client.", "+\t\t*/", "+\t\tcase OS.WM_NCHITTEST:", "+\t\t\tif (inEvent) return OS.HTTRANSPARENT;", "+\t\t\tbreak;", "+\t\tcase OS.WM_SETCURSOR:", "+\t\t\tif (clientCursor != 0) {", "+\t\t\t\tOS.SetCursor (clientCursor);", "+\t\t\t\treturn 1;", "+\t\t\t}", "+\t\t\tif (resizeCursor != 0) {", "+\t\t\t\tOS.SetCursor (resizeCursor);", "+\t\t\t\treturn 1;", "+\t\t\t}", "+\t}", "+\treturn OS.CallWindowProc (oldProc, hwnd, msg, wParam, lParam);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3dc15317309173e792d024ee3c9d6b8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "272967205f3824ec29456112026262c64ae69dfa", "commitAfterChange": "fc62fa389f9358a82d98c59fbeba910f7ca8c593", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  int callWindowProc (int msg, int wParam, int lParam)", "signatureAfterChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["-int callWindowProc (int msg, int wParam, int lParam) {", "+int callWindowProc (int hwnd, int msg, int wParam, int lParam) {", "-\treturn OS.CallWindowProc (ComboProc, handle, msg, wParam, lParam);", "+\tif (hwnd == handle) {", "+\t\treturn OS.CallWindowProc (ComboProc, hwnd, msg, wParam, lParam);", "+\t}", "+\tint hwndText = OS.GetDlgItem (handle, CBID_EDIT);", "+\tif (hwnd == hwndText) {", "+\t\treturn OS.CallWindowProc (EditProc, hwnd, msg, wParam, lParam);", "+\t}", "+\tint hwndList = OS.GetDlgItem (handle, CBID_LIST);", "+\tif (hwnd == hwndList) {", "+\t\treturn OS.CallWindowProc (ListProc, hwnd, msg, wParam, lParam);", "+\t}", "+\treturn OS.DefWindowProc (hwnd, msg, wParam, lParam);", "+}"]}], "num": 19568}
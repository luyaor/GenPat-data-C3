{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b142b25bc46ee3f88116d23374e5cf3c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "175cef98dc7b9465b470754b2a881d00", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "35b4cbb3b7bb44a742ea63d0ccddf753c64fd69a", "commitAfterChange": "e5951bd17b31b8cb707a15cbf154c50c6581fd3e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public Browser(Composite parent, int style)", "signatureAfterChange": " \t\t public Browser(Composite parent, int style)", "diff": ["+\t\t", "-\tsuper(parent, style);", "+\tsuper(parent, style | SWT.EMBEDDED);", "+\tif (!isLinux) return;", "+\tbrowserCount++;", "+\tGTK.gtk_init_check(new int[1], null);", "+\tif (browserCount == 1) {", "+\t\tfinal Display display = getDisplay();", "+\t\tdisplay.asyncExec(new Runnable() {", "+\t\t\tpublic void run() {", "+\t\t\t\twhile (GTK.gtk_events_pending() != 0) {", "+\t\t\t\t\tGTK.gtk_main_iteration();", "+\t\t\t\t}", "+\t\t\t\tif (browserCount == 0) return;", "+\t\t\t\tdisplay.timerExec(25, this);\t\t", "+\t\t\t}", "+\t\t});", "+\t}", "+\tgtkHandle = GTK.gtk_plug_new(embeddedHandle);", "+\t", "+\tint[] result = new int[1];", "+\tif (browserCount == 1) {", "+\t\tString mozillaPath = GRE.mozillaPath;", "+\t\tif (mozillaPath == null) throw new SWTError(XPCOM.errorMsg(XPCOM.NS_ERROR_FAILURE));", "+", "+\t\tlocProvider = new AppFileLocProvider();", "+\t\tlocProvider.AddRef();", "+", "+\t\tint[] retVal = new int[1];", "+\t\tint rc = XPCOM.NS_NewLocalFile(mozillaPath, true, retVal);", "+\t\tif (rc != XPCOM.NS_OK) throw new SWTError(XPCOM.errorMsg(rc));", "+\t\tif (retVal[0] == 0) throw new SWTError(XPCOM.errorMsg(XPCOM.NS_ERROR_NULL_POINTER));", "+\t", "+\t\tnsILocalFile localFile = new nsILocalFile(retVal[0]);", "+\t\trc = XPCOM.NS_InitEmbedding(localFile.getAddress(), locProvider.getAddress());", "+\t\tif (rc != XPCOM.NS_OK) throw new SWTError(XPCOM.errorMsg(rc));", "+\t\tlocalFile.Release(); ", "+", "+\t\trc = XPCOM.NS_GetComponentManager(result);", "+\t\tif (rc != XPCOM.NS_OK) throw new SWTError(XPCOM.errorMsg(rc));", "+\t\tif (result[0] == 0) throw new SWTError(XPCOM.errorMsg(XPCOM.NS_NOINTERFACE));", "+", "+\t\tnsIComponentManager componentManager = new nsIComponentManager(result[0]);", "+\t\tresult[0] = 0;", "+\t\trc = componentManager.CreateInstance(XPCOM.NS_APPSHELL_CID, 0, nsIAppShell.NS_IAPPSHELL_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) throw new SWTError(XPCOM.errorMsg(rc));", "+\t\tif (result[0] == 0) throw new SWTError(XPCOM.errorMsg(XPCOM.NS_NOINTERFACE));\t\t", "+\t\tcomponentManager.Release();", "+", "+\t\tappShell = new nsIAppShell(result[0]); ", "+\t\trc = appShell.Create(null, null);", "+\t\tif (rc != XPCOM.NS_OK) throw new SWTError(XPCOM.errorMsg(rc));", "+\t\trc = appShell.Spinup();", "+\t\tif (rc != XPCOM.NS_OK) throw new SWTError(XPCOM.errorMsg(rc));", "+\t}", "+\tint rc = XPCOM.NS_GetComponentManager(result);", "+\tif (rc != XPCOM.NS_OK) throw new SWTError(XPCOM.errorMsg(rc));", "+\tif (result[0] == 0) throw new SWTError(XPCOM.errorMsg(XPCOM.NS_NOINTERFACE));", "+", "+\tnsIComponentManager componentManager = new nsIComponentManager(result[0]);", "+\tresult[0] = 0;", "+\tnsID NS_IWEBBROWSER_CID = new nsID(\"F1EAC761-87E9-11d3-AF80-00A024FFC08C\"); //$NON-NLS-1$", "+\trc = componentManager.CreateInstance(NS_IWEBBROWSER_CID, 0, nsIWebBrowser.NS_IWEBBROWSER_IID, result);", "+\tif (rc != XPCOM.NS_OK) throw new SWTError(XPCOM.errorMsg(rc));", "+\tif (result[0] == 0) throw new SWTError(XPCOM.errorMsg(XPCOM.NS_NOINTERFACE));\t", "+\tcomponentManager.Release();", "+", "+\twebBrowser = new nsIWebBrowser(result[0]); ", "+", "+\tcreateCOMInterfaces();", "+\tAddRef();", "+", "+\trc = webBrowser.SetContainerWindow(webBrowserChrome.getAddress());", "+\tif (rc != XPCOM.NS_OK) throw new SWTError(XPCOM.errorMsg(rc));", "+\t", "+\trc = webBrowser.QueryInterface(nsIBaseWindow.NS_IBASEWINDOW_IID, result);", "+\tif (rc != XPCOM.NS_OK) throw new SWTError(XPCOM.errorMsg(rc));", "+\tif (result[0] == 0) throw new SWTError(XPCOM.errorMsg(XPCOM.NS_ERROR_NO_INTERFACE));", "+", "+\tfinal nsIBaseWindow baseWindow = new nsIBaseWindow(result[0]);\t", "+\trc = baseWindow.InitWindow(gtkHandle, 0, 0, 0, 2, 2);", "+\tif (rc != XPCOM.NS_OK) throw new SWTError(XPCOM.errorMsg(XPCOM.NS_ERROR_FAILURE));", "+\trc = baseWindow.Create();", "+\tif (rc != XPCOM.NS_OK) throw new SWTError(XPCOM.errorMsg(XPCOM.NS_ERROR_FAILURE));", "+\trc = baseWindow.SetVisibility(true);", "+\tif (rc != XPCOM.NS_OK) throw new SWTError(XPCOM.errorMsg(XPCOM.NS_ERROR_FAILURE));", "+\tbaseWindow.Release();", "+", "+\trc = webBrowser.AddWebBrowserListener(weakReference.getAddress(), nsIWebProgressListener.NS_IWEBPROGRESSLISTENER_IID);", "+\tif (rc != XPCOM.NS_OK) throw new SWTError(XPCOM.errorMsg(rc));", "+", "+\trc = webBrowser.SetParentURIContentListener(uriContentListener.getAddress());", "+\tif (rc != XPCOM.NS_OK) throw new SWTError(XPCOM.errorMsg(rc));", "+", "+\tListener listener = new Listener() {", "+\t\tpublic void handleEvent(Event event) {", "+\t\t\tswitch (event.type) {", "+\t\t\t\tcase SWT.Dispose: onDispose(); break;", "+\t\t\t\tcase SWT.Resize: onResize(); break;", "+\t\t\t\tcase SWT.FocusIn: onFocusGained(event);\tbreak;", "+\t\t\t\tcase SWT.FocusOut: onFocusLost(event); break;", "+\t\t\t}", "+\t\t}", "+\t};\t", "+\tint[] folderEvents = new int[]{", "+\t\tSWT.Dispose,", "+\t\tSWT.Resize,  ", "+\t\tSWT.FocusIn, ", "+\t\tSWT.FocusOut, ", "+\t};", "+\tfor (int i = 0; i < folderEvents.length; i++) {", "+\t\taddListener(folderEvents[i], listener);", "+\t}", "+", "+\tGTK.gtk_widget_show(gtkHandle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67976559128daa899dd785e21b2f4155", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/PromptService.java", "commitBeforeChange": "7cf3772778f97ec4ca9f0b569299f170a7e8057b", "commitAfterChange": "54e8da872bf5cc2a10b70e58c071377dd137c9ea", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  public int PromptUsernameAndPassword(int parent, int dialogTitle, int text, int username, int password, int checkMsg, int checkValue, int _retval)", "signatureAfterChange": "  public int PromptUsernameAndPassword(int parent, int dialogTitle, int text, int username, int password, int checkMsg, int checkValue, int _retval)", "diff": ["-\treturn XPCOM.NS_ERROR_NOT_IMPLEMENTED;", "+\tBrowser browser = getBrowser(parent);", "+\tString titleLabel = null, textLabel, checkLabel = null;", "+\tString[] userLabel = new String[1], passLabel = new String[1];", "+\tchar[] dest;", "+\tint length;", "+\tif (dialogTitle != 0) {", "+\t\tlength = XPCOM.nsCRT_strlen_PRUnichar(dialogTitle);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, dialogTitle, length * 2);", "+\t\ttitleLabel = new String(dest);", "+\t} else {", "+\t\ttitleLabel = SWT.getMessage(\"SWT_Prompt\"); //$NON-NLS-1$", "+\t}", "+\t", "+\tlength = XPCOM.nsCRT_strlen_PRUnichar(text);", "+\tdest = new char[length];", "+\tXPCOM.memmove(dest, text, length * 2);", "+\ttextLabel = new String(dest);", "+\t", "+\tint[] userAddr = new int[1];", "+\tXPCOM.memmove(userAddr, username, 4);", "+\tif (userAddr[0] != 0) {", "+\t\tlength = XPCOM.nsCRT_strlen_PRUnichar(userAddr[0]);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, userAddr[0], length * 2);", "+\t\tuserLabel[0] = new String(dest);\t\t", "+\t}", "+\t", "+\tint[] passAddr = new int[1];", "+\tXPCOM.memmove(passAddr, password, 4);", "+\tif (passAddr[0] != 0) {", "+\t\tlength = XPCOM.nsCRT_strlen_PRUnichar(passAddr[0]);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, passAddr[0], length * 2);", "+\t\tpassLabel[0] = new String(dest);\t\t", "+\t}", "+\t", "+\tif (checkMsg != 0) {", "+\t\tlength = XPCOM.nsCRT_strlen_PRUnichar(checkMsg);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, checkMsg, length * 2);", "+\t\tcheckLabel = new String(dest);", "+\t}", "+\t", "+\tPromptDialog dialog = new PromptDialog(browser.getShell());", "+\tint[] check = new int[1], result = new int[1];", "+\tif (checkValue != 0) XPCOM.memmove(check, checkValue, 4);", "+\tdialog.promptUsernameAndPassword(titleLabel, textLabel, checkLabel, userLabel, passLabel, check, result);", "+", "+\tXPCOM.memmove(_retval, result, 4);", "+\tif (result[0] == 1) {", "+\t\t/* ", "+\t\t* User selected OK. User name and password are returned as PRUnichar values. Any default", "+\t\t* value that we override must be freed using the nsIMemory service.", "+\t\t*/", "+\t\tint cnt, size, ptr;", "+\t\tchar[] buffer;", "+\t\tif (userLabel[0] != null) {", "+\t\t\tcnt = userLabel[0].length();", "+\t\t\tbuffer = new char[cnt + 1];", "+\t\t\tuserLabel[0].getChars(0, cnt, buffer, 0);", "+\t\t\tsize = buffer.length * 2;", "+\t\t\tptr = XPCOM.PR_Malloc(size);", "+\t\t\tXPCOM.memmove(ptr, buffer, size);", "+\t\t\tXPCOM.memmove(username, new int[] {ptr}, 4);", "+", "+\t\t\tif (userAddr[0] != 0) {", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);", "+\t\t\t", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tbyte[] tmp = XPCOM.NS_MEMORY_CONTRACTID.getBytes();", "+\t\t\t\tbyte[] aContractID = new byte[tmp.length + 1];", "+\t\t\t\tSystem.arraycopy(tmp, 0, aContractID, 0, tmp.length);", "+\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\t\tserviceManager.Release();", "+\t\t\t\t", "+\t\t\t\tnsIMemory memory = new nsIMemory(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tmemory.Free(userAddr[0]);", "+\t\t\t\tmemory.Release();", "+\t\t\t}", "+\t\t}", "+\t\tif (passLabel[0] != null) {", "+\t\t\tcnt = passLabel[0].length();", "+\t\t\tbuffer = new char[cnt + 1];", "+\t\t\tpassLabel[0].getChars(0, cnt, buffer, 0);", "+\t\t\tsize = buffer.length * 2;", "+\t\t\tptr = XPCOM.PR_Malloc(size);", "+\t\t\tXPCOM.memmove(ptr, buffer, size);", "+\t\t\tXPCOM.memmove(password, new int[] {ptr}, 4);", "+\t\t\t", "+\t\t\tif (passAddr[0] != 0) {", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);", "+\t\t\t", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tbyte[] tmp = XPCOM.NS_MEMORY_CONTRACTID.getBytes();", "+\t\t\t\tbyte[] aContractID = new byte[tmp.length + 1];", "+\t\t\t\tSystem.arraycopy(tmp, 0, aContractID, 0, tmp.length);", "+\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\t\tserviceManager.Release();", "+\t\t\t\t", "+\t\t\t\tnsIMemory memory = new nsIMemory(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tmemory.Free(passAddr[0]);", "+\t\t\t\tmemory.Release();", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (checkValue != 0) XPCOM.memmove(checkValue, check, 4);", "+\treturn XPCOM.NS_OK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "716387b67f84ed4ec0ba22aeaa5d6c69", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/mozilla/org/eclipse/swt/browser/PromptService.java", "commitBeforeChange": "d948e31334802b91d52f31c690b6477b906d1132", "commitAfterChange": "3b1d004d4abc583d9591cd3ea8e017b781daf0ee", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  public int PromptUsernameAndPassword(int parent, int dialogTitle, int text, int username, int password, int checkMsg, int checkValue, int _retval)", "signatureAfterChange": "  public int PromptUsernameAndPassword(int parent, int dialogTitle, int text, int username, int password, int checkMsg, int checkValue, int _retval)", "diff": ["-\treturn XPCOM.NS_ERROR_NOT_IMPLEMENTED;", "+\tBrowser browser = getBrowser(parent);", "+\tString titleLabel = null, textLabel, checkLabel = null;", "+\tString[] userLabel = new String[1], passLabel = new String[1];", "+\tchar[] dest;", "+\tint length;", "+\tif (dialogTitle != 0) {", "+\t\tlength = XPCOM.nsCRT_strlen_PRUnichar(dialogTitle);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, dialogTitle, length * 2);", "+\t\ttitleLabel = new String(dest);", "+\t} else {", "+\t\ttitleLabel = SWT.getMessage(\"SWT_Prompt\"); //$NON-NLS-1$", "+\t}", "+\t", "+\tlength = XPCOM.nsCRT_strlen_PRUnichar(text);", "+\tdest = new char[length];", "+\tXPCOM.memmove(dest, text, length * 2);", "+\ttextLabel = new String(dest);", "+\t", "+\tint[] userAddr = new int[1];", "+\tXPCOM.memmove(userAddr, username, 4);", "+\tif (userAddr[0] != 0) {", "+\t\tlength = XPCOM.nsCRT_strlen_PRUnichar(userAddr[0]);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, userAddr[0], length * 2);", "+\t\tuserLabel[0] = new String(dest);\t\t", "+\t}", "+\t", "+\tint[] passAddr = new int[1];", "+\tXPCOM.memmove(passAddr, password, 4);", "+\tif (passAddr[0] != 0) {", "+\t\tlength = XPCOM.nsCRT_strlen_PRUnichar(passAddr[0]);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, passAddr[0], length * 2);", "+\t\tpassLabel[0] = new String(dest);\t\t", "+\t}", "+\t", "+\tif (checkMsg != 0) {", "+\t\tlength = XPCOM.nsCRT_strlen_PRUnichar(checkMsg);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, checkMsg, length * 2);", "+\t\tcheckLabel = new String(dest);", "+\t}", "+\t", "+\tPromptDialog dialog = new PromptDialog(browser.getShell());", "+\tint[] check = new int[1], result = new int[1];", "+\tif (checkValue != 0) XPCOM.memmove(check, checkValue, 4);", "+\tdialog.promptUsernameAndPassword(titleLabel, textLabel, checkLabel, userLabel, passLabel, check, result);", "+", "+\tXPCOM.memmove(_retval, result, 4);", "+\tif (result[0] == 1) {", "+\t\t/* ", "+\t\t* User selected OK. User name and password are returned as PRUnichar values. Any default", "+\t\t* value that we override must be freed using the nsIMemory service.", "+\t\t*/", "+\t\tint cnt, size, ptr;", "+\t\tchar[] buffer;", "+\t\tif (userLabel[0] != null) {", "+\t\t\tcnt = userLabel[0].length();", "+\t\t\tbuffer = new char[cnt + 1];", "+\t\t\tuserLabel[0].getChars(0, cnt, buffer, 0);", "+\t\t\tsize = buffer.length * 2;", "+\t\t\tptr = XPCOM.PR_Malloc(size);", "+\t\t\tXPCOM.memmove(ptr, buffer, size);", "+\t\t\tXPCOM.memmove(username, new int[] {ptr}, 4);", "+", "+\t\t\tif (userAddr[0] != 0) {", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);", "+\t\t\t", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tbyte[] tmp = XPCOM.NS_MEMORY_CONTRACTID.getBytes();", "+\t\t\t\tbyte[] aContractID = new byte[tmp.length + 1];", "+\t\t\t\tSystem.arraycopy(tmp, 0, aContractID, 0, tmp.length);", "+\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\t\tserviceManager.Release();", "+\t\t\t\t", "+\t\t\t\tnsIMemory memory = new nsIMemory(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tmemory.Free(userAddr[0]);", "+\t\t\t\tmemory.Release();", "+\t\t\t}", "+\t\t}", "+\t\tif (passLabel[0] != null) {", "+\t\t\tcnt = passLabel[0].length();", "+\t\t\tbuffer = new char[cnt + 1];", "+\t\t\tpassLabel[0].getChars(0, cnt, buffer, 0);", "+\t\t\tsize = buffer.length * 2;", "+\t\t\tptr = XPCOM.PR_Malloc(size);", "+\t\t\tXPCOM.memmove(ptr, buffer, size);", "+\t\t\tXPCOM.memmove(password, new int[] {ptr}, 4);", "+\t\t\t", "+\t\t\tif (passAddr[0] != 0) {", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);", "+\t\t\t", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tbyte[] tmp = XPCOM.NS_MEMORY_CONTRACTID.getBytes();", "+\t\t\t\tbyte[] aContractID = new byte[tmp.length + 1];", "+\t\t\t\tSystem.arraycopy(tmp, 0, aContractID, 0, tmp.length);", "+\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\t\tserviceManager.Release();", "+\t\t\t\t", "+\t\t\t\tnsIMemory memory = new nsIMemory(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tmemory.Free(passAddr[0]);", "+\t\t\t\tmemory.Release();", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (checkValue != 0) XPCOM.memmove(checkValue, check, 4);", "+\treturn XPCOM.NS_OK;"]}], "num": 58485}
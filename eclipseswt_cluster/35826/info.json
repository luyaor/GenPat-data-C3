{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6daa78a1ede615c92c13fff7998d30c5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6d6496a10c7ca9ba22e99fc1ec86d24", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "c50367f5a47e2a6effad63f64029f1b5d0e6e7f1", "commitAfterChange": "8b3cbf3b5eee3deb1dafe90fe80e8c033230f02c", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": " \t LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": " \t LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["+\t\t\tif (ignoreResize) {", "+\t\t\t\t/*", "+\t\t\t\t* Feature in Windows.  When LVSCW_AUTOSIZE_USEHEADER is used", "+\t\t\t\t* with LVM_SETCOLUMNWIDTH to resize the last column, the last", "+\t\t\t\t* column is expanded to fill the client area.  The fix is to", "+\t\t\t\t* insert and remove a temporary last column for the duration", "+\t\t\t\t* of LVM_SETCOLUMNWIDTH.  As a result, LVN_GETDISPINFO should", "+\t\t\t\t* be ignored for the temporary column.", "+\t\t\t\t*/", "+\t\t\t\tint hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "+\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\tif (count == 1 && columns [0] == null) count = 0;", "+\t\t\t\tif (count - 1 >= plvfi.iSubItem) break;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e53ce5d0c2ca584a4fbd88ecd02c736c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "f38c6e259682997e3ae8e6c34beda9c0c421c9d4", "commitAfterChange": "978a5068b13063ede30b740ed3c44a97b7570e39", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void init(Device device, int width, int height)", "signatureAfterChange": "  void init(Device device, int width, int height)", "diff": ["+\t/*", "+\t* Feature in Windows.  CreateCompatibleBitmap() may fail", "+\t* for large images.  The fix is to create a DIB section", "+\t* in that case.", "+\t*/", "+\tif (handle == 0) {", "+\t\tint bits = OS.GetDeviceCaps(hDC, OS.BITSPIXEL);", "+\t\tint planes = OS.GetDeviceCaps(hDC, OS.PLANES);", "+\t\tint depth = bits * planes;", "+\t\tif (depth < 16) depth = 16;", "+\t\thandle = createDIB(width, height, depth);", "+\t}"]}], "num": 35826}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a439a7a49b66f2cae3078687d07af29f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52fecdc1ff3e30be9db3a30a6a6f2ec2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "ee543bcb83fee603dbf808a397bfdb1dd9d1075a", "commitAfterChange": "4d0cb802366fe6174a4b8ac8db904ee38766dceb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create(Composite parent, int style)", "signatureAfterChange": "  public void create(Composite parent, int style)", "diff": ["+\t\t\t\t\tunhookMouseListeners(documents);", "+\t\t\t\t\tfor (int i = 0; i < documents.length; i++) {", "+\t\t\t\t\t\tdocuments[i].dispose();", "+\t\t\t\t\t}", "+\t\t\t\t\tdocuments = null;", "-\t\t\t\t\t\t\tCOM.MoveMemory(pCancel, new short[]{newEvent.doit ? COM.VARIANT_FALSE : COM.VARIANT_TRUE}, 2);", "-\t\t\t\t\t   }\t\t\t\t\t", "+\t\t\t\t\t\t\tCOM.MoveMemory(pCancel, new short[] {newEvent.doit ? COM.VARIANT_FALSE : COM.VARIANT_TRUE}, 2);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (newEvent.doit) {", "+\t\t\t\t\t\t\tvarResult = event.arguments[0];", "+\t\t\t\t\t\t\tIDispatch dispatch = varResult.getDispatch();", "+\t\t\t\t\t\t\tVariant variant = new Variant(auto);", "+\t\t\t\t\t\t\tIDispatch top = variant.getDispatch();", "+\t\t\t\t\t\t\tboolean isTop = top.getAddress() == dispatch.getAddress();", "+\t\t\t\t\t\t\tif (isTop) {", "+\t\t\t\t\t\t\t\t/* unhook mouse listeners and unref the last document(s) */", "+\t\t\t\t\t\t\t\tunhookMouseListeners(documents);", "+\t\t\t\t\t\t\t\tfor (int i = 0; i < documents.length; i++) {", "+\t\t\t\t\t\t\t\t\tdocuments[i].dispose();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tdocuments = new OleAutomation[0];", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15768603ffdabf57ffd6cdd97f8fd2b3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "ea64a3586726e69b3a6487ec2ec021a68fc2a5a5", "commitAfterChange": "7b86bb84dfcfe4aea3b7f4a6b9bef988b3d5bbf6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create(Composite parent, int style)", "signatureAfterChange": "  public void create(Composite parent, int style)", "diff": ["+\t\t\t\t\t\t\t\tisAboutBlank = false;", "-\t\t\t\t\t\t\tlastNavigateURL = url;", "+\t\t\t\t\t\t\tvarResult = event.arguments[0];", "+\t\t\t\t\t\t\tIDispatch dispatch = varResult.getDispatch();", "+\t\t\t\t\t\t\tVariant variant = new Variant(auto); /* does not need to be disposed */", "+\t\t\t\t\t\t\tIDispatch top = variant.getDispatch();", "+\t\t\t\t\t\t\tif (top.getAddress() == dispatch.getAddress()) {", "+\t\t\t\t\t\t\t\tisAboutBlank = url.startsWith(ABOUT_BLANK);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tVariant variant = new Variant(auto);", "+\t\t\t\t\t\t\tVariant variant = new Variant(auto); /* does not need to be disposed */", "-\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t * This code is intentionally commented.  A Variant constructed from an", "-\t\t\t\t\t\t\t * OleAutomation object does not increase its reference count.  The IDispatch", "-\t\t\t\t\t\t\t * obtained from this Variant did not increase the reference count for the", "-\t\t\t\t\t\t\t * OleAutomation instance either. ", "-\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\t//top.Release();", "-\t\t\t\t\t\t\t//variant.dispose();", "+", "-\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* This code is intentionally commented.  This IDispatch was received", "-\t\t\t\t\t\t* as an argument from the OleEvent and it will be disposed along with", "-\t\t\t\t\t\t* the other arguments.  ", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\t//dispatch.Release();", "-\t\t\t\t\t\t\tisAboutBlank = url.startsWith(ABOUT_BLANK);", "+\t\t\t\t\t\t\tvarResult = event.arguments[0];", "+\t\t\t\t\t\t\tIDispatch dispatch = varResult.getDispatch();", "+\t\t\t\t\t\t\tVariant variant = new Variant(auto); /* does not need to be disposed */", "+\t\t\t\t\t\t\tIDispatch top = variant.getDispatch();", "+\t\t\t\t\t\t\tif (top.getAddress() == dispatch.getAddress()) {", "+\t\t\t\t\t\t\t\tisAboutBlank = url.startsWith(ABOUT_BLANK);", "+\t\t\t\t\t\t\t\tlastNavigateURL = url;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tVariant variant = new Variant(auto);", "+\t\t\t\t\t\tVariant variant = new Variant(auto); /* does not need to be disposed */", "-\t\t\t\t\t\t\tVariant variant = new Variant(browser.auto);", "+\t\t\t\t\t\t\tVariant variant = new Variant(browser.auto); /* does not need to be disposed */", "-\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t* This code is intentionally commented.  A Variant constructed from an", "-\t\t\t\t\t\t\t* OleAutomation object does not increase its reference count.  The IDispatch", "-\t\t\t\t\t\t\t* obtained from this Variant did not increase the reference count for the", "-\t\t\t\t\t\t\t* OleAutomation instance either. ", "-\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t//variant.dispose();", "-\t\t\t\t\t\t\t//iDispatch.Release();"]}], "num": 45210}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "498fd52b0e2e90a001dffb378059342b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63cffea1d256354ef43f626c70d6a2c5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "527e05cfb7d03ed9f1f2f525ae603a117bd65322", "commitAfterChange": "037e5168473a95763f975d71b44c32103e25ab3b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["+\t\t\tdispose();", "+\t\tif (System.getProperty(\"java.io.tmpdir\") == null) { //$NON-NLS-1$", "+\t\t\tdispose();", "+\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [Missing system property java.io.tmpdir is required to create Mozilla profile]\"); //$NON-NLS-1$", "+\t\t}", "+", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [NS_InitEmbedding \"+mozillaPath+\" error \"+rc+\"]\");", "+\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [NS_InitEmbedding \"+mozillaPath+\" error \"+rc+\"]\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tresult[0] = 0;", "+\t\tresult[0] = 0;\t\t", "-\t\tbuffer = \"Prompt Service\".getBytes();", "+\t\tbuffer = \"Prompt Service\".getBytes(); //$NON-NLS-1$", "-\t\tbuffer = \"Helper App Launcher Dialog\".getBytes();", "+\t\tbuffer = \"Helper App Launcher Dialog\".getBytes(); //$NON-NLS-1$", "-\t\tbuffer = \"Download\".getBytes();", "+\t\tbuffer = \"Download\".getBytes(); //$NON-NLS-1$", "+\t}", "+\tif (profileFolder == null) {", "+\t\tint rc = XPCOM.NS_GetServiceManager(result);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\t\t", "+\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\t\tresult[0] = 0;\t\t", "+\t\t/* Create a temporary profile */", "+\t\tbyte[] buffer = XPCOM.NS_PROFILE_CONTRACTID.getBytes();", "+\t\tbyte[] aContractID = new byte[buffer.length + 1];", "+\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "+\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIProfile.NS_IPROFILE_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "+\t\tserviceManager.Release();", "+", "+\t\tnsIProfile profile = new nsIProfile(result[0]);", "+\t\tresult[0] = 0;", "+\t\tString randomName = \"org.eclipse.swt.browser.Browser_\" + Long.toHexString(System.currentTimeMillis()); //$NON-NLS-1$", "+\t\tchar[] profileName = new char[randomName.length() + 1];", "+\t\trandomName.getChars(0, randomName.length(), profileName, 0);", "+\t\tString folder = new File(System.getProperty(\"java.io.tmpdir\"), randomName).getAbsolutePath();", "+\t\tchar[] nativeProfileDir = new char[folder.length() + 1];", "+\t\tfolder.getChars(0, folder.length(), nativeProfileDir, 0);", "+\t\trc = profile.CreateNewProfile(profileName, nativeProfileDir, null, false);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\trc = profile.SetCurrentProfile(profileName);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t/*", "+\t\t* Feature in Mozilla.  The guest profile created with CreateNewProfile can be seen in a", "+\t\t* standalone Mozilla inside the \"User Profile Dialog\". That behaviour is unwanted.  The", "+\t\t* workaround is to remove the profile from the profile list immediately after it has been", "+\t\t* created. The temporary folder storing the profile must be deleted when the display is disposed.", "+\t\t*/", "+\t\trc = profile.DeleteProfile(profileName, false);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tprofile.Release();", "+\t\t", "+\t\tprofileFolder = folder;", "+\t\t", "+\t\tgetDisplay().addListener(SWT.Dispose, new Listener() {", "+\t\t\tpublic void handleEvent(Event e) {", "+\t\t\t\t/* Delete the temporary profile */", "+\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\t\t\t\t\t\t\t", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tbyte[] buffer = XPCOM.NS_PROFILE_CONTRACTID.getBytes();", "+\t\t\t\tbyte[] aContractID = new byte[buffer.length + 1];", "+\t\t\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "+\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIProfile.NS_IPROFILE_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\t\tserviceManager.Release();", "+\t\t\t\t", "+\t\t\t\tnsIProfile profile = new nsIProfile(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\trc = profile.ShutDownCurrentProfile(nsIProfile.SHUTDOWN_CLEANSE);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\t\tprofile.Release();\t\t\t", "+", "+\t\t\t\tdeleteFile(new File(profileFolder));", "+\t\t\t\t", "+\t\t\t\t/*", "+\t\t\t\t* Note.  It is possible a new Display and a new Browser be created", "+\t\t\t\t* next.  In that case, a new profile must be created. ", "+\t\t\t\t*/", "+\t\t\t\tprofileFolder = null;", "+\t\t\t}", "+\t\t});", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faa06e60534c13b5b4891cbffd707aac", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/Check64CompilationParticipant.java", "commitBeforeChange": "e9f7cb66c5064542dfb452f0fb70088c0628ea74", "commitAfterChange": "0e2401ad2734bf1872067c127ae6b51635876794", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void createProblemFor(IResource resource, int start, int end, String message)", "signatureAfterChange": "  void createProblems(IJavaProject project, String root) throws CoreException", "diff": ["-", "-void createProblemFor(IResource resource, int start, int end, String message) {", "-\t\tIMarker marker = resource.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);", "-\t\tint severity = IMarker.SEVERITY_ERROR;", "-\t\tmarker.setAttributes(", "-\t\t\tnew String[] {IMarker.MESSAGE, IMarker.SEVERITY, IMarker.CHAR_START, IMarker.CHAR_END, IMarker.SOURCE_ID},", "-\t\t\tnew Object[] {message, new Integer(severity), new Integer(start), new Integer(end), SOURCE_ID});", "-\t} catch (CoreException e) {", "-\t\te.printStackTrace();", "-\t}", "-}", "+", "+void createProblems(IJavaProject project, String root) throws CoreException {", "+\ttry {", "+\t\tInputStream is = new BufferedInputStream(new FileInputStream(root + \"/log.xml\"));", "+\t\tIProject proj = project.getProject();\t", "+\t\t\t\t\t\t\t\t\t\tIMarker marker = resource.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);", "+\t\t\t\t\t\t\t\t\t\tint severity = IMarker.SEVERITY_ERROR;", "+\t\t\t\t\t\t\t\t\t\tmarker.setAttributes(", "+\t\t\t\t\t\t\t\t\t\t\tnew String[] {IMarker.MESSAGE, IMarker.SEVERITY, IMarker.CHAR_START, IMarker.CHAR_END, IMarker.SOURCE_ID},", "+\t\t\t\t\t\t\t\t\t\t\tnew Object[] {message, new Integer(severity), new Integer(start), new Integer(end), SOURCE_ID});", "+\t} catch (Exception e) {", "+\t\tthrow new CoreException(new Status(IStatus.ERROR, Activator.PLUGIN_ID, \"Problem creating 64-bit problems\", e));", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2fa1c714bf6964a6f4d4f7d1830a7db", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "33a44d8f9cd8fb97f47f03bd3dfd0a34047d5e0b", "commitAfterChange": "eb5fa7d6608bbc21cdb8c7606a37ce0601413346", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["+\t\t* Check for proxy values set as documented java properties and update mozilla's", "+\t\t* preferences with these values if needed.", "+\t\t*/", "+\t\tString proxyHost = System.getProperty (PROPERTY_PROXYHOST);", "+\t\tString proxyPortString = System.getProperty (PROPERTY_PROXYPORT);", "+", "+\t\tint port = -1;", "+\t\tif (proxyPortString != null) {", "+\t\t\ttry {", "+\t\t\t\tint value = Integer.valueOf (proxyPortString).intValue ();", "+\t\t\t\tif (0 <= value && value <= MAX_PORT) port = value;", "+\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t/* do nothing, java property has non-integer value */", "+\t\t\t}", "+\t\t}", "+", "+\t\tif (proxyHost != null) {", "+\t\t\tbyte[] contractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_PREFLOCALIZEDSTRING_CONTRACTID, true);", "+\t\t\trc = componentManager.CreateInstanceByContractID (contractID, 0, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\t\t\tlocalizedString = new nsIPrefLocalizedString (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tint length = proxyHost.length ();", "+\t\t\tchar[] charBuffer = new char[length + 1];", "+\t\t\tproxyHost.getChars (0, length, charBuffer, 0);", "+\t\t\trc = localizedString.SetDataWithLength (length, charBuffer);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PREFERENCE_PROXYHOST_FTP, true);", "+\t\t\trc = prefBranch.SetComplexValue (buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress ());", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PREFERENCE_PROXYHOST_HTTP, true);", "+\t\t\trc = prefBranch.SetComplexValue (buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress ());", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PREFERENCE_PROXYHOST_SSL, true);", "+\t\t\trc = prefBranch.SetComplexValue (buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress ());", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tlocalizedString.Release ();", "+\t\t}", "+", "+\t\tif (port != -1) {", "+\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PREFERENCE_PROXYPORT_FTP, true);", "+\t\t\trc = prefBranch.SetIntPref (buffer, port);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PREFERENCE_PROXYPORT_HTTP, true);", "+\t\t\trc = prefBranch.SetIntPref (buffer, port);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PREFERENCE_PROXYPORT_SSL, true);", "+\t\t\trc = prefBranch.SetIntPref (buffer, port);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t}", "+", "+\t\tif (proxyHost != null || port != -1) {", "+\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PREFERENCE_PROXYTYPE, true);", "+\t\t\trc = prefBranch.SetIntPref (buffer, 1);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t}", "+", "+\t\t/*", "+", "-\tupdateProxy ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfd58027c4aafee4a0f710d6da438c89", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "2c8a13d0df1694740c0af6220e23682b3ddd10de", "commitAfterChange": "056762a1d7c74e75bfac132d1e756819b6f3b39e", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": "  public boolean setUrl (String url)", "signatureAfterChange": "  public boolean setUrl (String url, String postData, String[] headers)", "diff": ["-public boolean setUrl (String url) {", "+public boolean setUrl (String url, String postData, String[] headers) {", "+\tresult[0] = 0;", "-\trc = webNavigation.LoadURI (uri, nsIWebNavigation.LOAD_FLAGS_NONE, 0, 0, 0);", "+", "+    nsIMIMEInputStream postDataStream = null;", "+    InputStream dataStream = null;", "+\tif (postData != null) {", "+    \trc = XPCOM.NS_GetComponentManager (result);", "+    \tif (rc != XPCOM.NS_OK) error (rc);", "+    \tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+    \tnsIComponentManager componentManager = new nsIComponentManager (result[0]);", "+    \tresult[0] = 0;", "+    \tbyte[] contractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MIMEINPUTSTREAM_CONTRACTID, true);", "+    \trc = componentManager.CreateInstanceByContractID (contractID, 0, nsIMIMEInputStream.NS_IMIMEINPUTSTREAM_IID, result);", "+    \tcomponentManager.Release();", "+", "+    \tif (rc == XPCOM.NS_OK && result[0] != 0) { /* nsIMIMEInputStream is not in mozilla 1.4 */", "+    \t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, postData, false);", "+    \t\tdataStream = new InputStream (bytes);", "+    \t\tdataStream.AddRef ();", "+    \t\tpostDataStream = new nsIMIMEInputStream (result[0]);", "+    \t\trc = postDataStream.SetData (dataStream.getAddress ());", "+    \t\tif (rc != XPCOM.NS_OK) error (rc);", "+    \t\trc = postDataStream.SetAddContentLength (1);", "+    \t\tif (rc != XPCOM.NS_OK) error (rc);", "+    \t\tbyte[] name = MozillaDelegate.wcsToMbcs (null, HEADER_CONTENTTYPE, true);", "+    \t\tbyte[] value = MozillaDelegate.wcsToMbcs (null, MIMETYPE_FORMURLENCODED, true);", "+    \t\trc = postDataStream.AddHeader (name, value);", "+    \t\tif (rc != XPCOM.NS_OK) error (rc);", "+    \t}", "+    \tresult[0] = 0;", "+\t}", "+", "+    InputStream headersStream = null;", "+    if (headers != null) {", "+\t\tStringBuffer buffer = new StringBuffer ();", "+\t\tfor (int i = 0; i < headers.length; i++) {", "+\t\t\tString current = headers[i];", "+\t\t\tint sep = current.indexOf (':');", "+\t\t\tif (sep != -1) {", "+\t\t\t\tString key = current.substring (0, sep).trim ();", "+\t\t\t\tString value = current.substring (sep + 1).trim ();", "+\t\t\t\tif (key.length () > 0 && value.length () > 0) {", "+\t\t\t\t\tbuffer.append (key);", "+\t\t\t\t\tbuffer.append (':');", "+\t\t\t\t\tbuffer.append (value);", "+\t\t\t\t\tbuffer.append (\"\\r\\n\");", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+    \tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, buffer.toString (), true);", "+    \theadersStream = new InputStream (bytes);", "+    \theadersStream.AddRef ();", "+    }", "+", "+\trc = webNavigation.LoadURI (", "+\t\turi,", "+\t\tnsIWebNavigation.LOAD_FLAGS_NONE,", "+\t\t0,", "+\t\tpostDataStream == null ? 0 : postDataStream.getAddress (),", "+\t\theadersStream == null ? 0 : headersStream.getAddress ());", "+\tif (dataStream != null) dataStream.Release ();", "+\tif (headersStream != null) headersStream.Release ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c71f7f4e3954a983d99be727025a352", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/gtk/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "d9ff0920e38dbe40e7e183fc285b75f5b4dcdb26", "commitAfterChange": "1f80efece3a80bdcdd937ba5e6082d6ded3b47de", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["+\t\t\tdispose();", "+\t\t}", "+\t\tString tempDir = System.getProperty(\"java.io.tmpdir\"); //$NON-NLS-1$", "+\t\tif (tempDir == null) {", "+\t\t\tdispose();", "+\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [Missing system property java.io.tmpdir is required to create Mozilla profile]\"); //$NON-NLS-1$", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [NS_InitEmbedding \"+mozillaPath+\" error \"+rc+\"]\");", "+\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [NS_InitEmbedding \"+mozillaPath+\" error \"+rc+\"]\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tresult[0] = 0;", "-\t\tbyte[] buffer = XPCOM.NS_WINDOWWATCHER_CONTRACTID.getBytes();", "+\t\tresult[0] = 0;\t\t", "+\t\t/* Create a temporary profile */", "+\t\tbyte[] buffer = XPCOM.NS_PROFILE_CONTRACTID.getBytes();", "+\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "+\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIProfile.NS_IPROFILE_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "+\t\t", "+\t\tnsIProfile profile = new nsIProfile(result[0]);", "+\t\tresult[0] = 0;", "+\t\tString randomName = \"org.eclipse.swt.browser.Browser_\" + Long.toHexString(System.currentTimeMillis()); //$NON-NLS-1$", "+\t\tchar[] profileName = new char[randomName.length() + 1];", "+\t\trandomName.getChars(0, randomName.length(), profileName, 0);", "+\t\tprofileFolder = new File(tempDir, randomName).getAbsolutePath();", "+\t\tchar[] nativeProfileDir = new char[profileFolder.length() + 1];", "+\t\tprofileFolder.getChars(0, profileFolder.length(), nativeProfileDir, 0);", "+\t\trc = profile.CreateNewProfile(profileName, nativeProfileDir, null, false);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\trc = profile.SetCurrentProfile(profileName);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t/*", "+\t\t* Feature in Mozilla.  The guest profile created with CreateNewProfile can be seen in a", "+\t\t* standalone Mozilla inside the \"User Profile Dialog\". That behaviour is unwanted.  The", "+\t\t* workaround is to remove the profile from the profile list immediately after it has been", "+\t\t* created. The temporary folder storing the profile must be deleted when the display is disposed.", "+\t\t*/", "+\t\trc = profile.DeleteProfile(profileName, false);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tprofile.Release();", "+", "+\t\tbuffer = XPCOM.NS_WINDOWWATCHER_CONTRACTID.getBytes();", "+\t\taContractID = new byte[buffer.length + 1];", "-\t\tbuffer = \"Prompt Service\".getBytes();", "+\t\tbuffer = \"Prompt Service\".getBytes(); //$NON-NLS-1$", "-\t\tbuffer = \"Helper App Launcher Dialog\".getBytes();", "+\t\tbuffer = \"Helper App Launcher Dialog\".getBytes(); //$NON-NLS-1$", "-\t\tbuffer = \"Download\".getBytes();", "+\t\tbuffer = \"Download\".getBytes(); //$NON-NLS-1$", "+\tgetDisplay().addListener(SWT.Dispose, new Listener() {", "+\t\tpublic void handleEvent(Event e) {", "+\t\t\t/* Delete the temporary profile */", "+\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\t\t\t\t\t\t", "+\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tbyte[] buffer = XPCOM.NS_PROFILE_CONTRACTID.getBytes();", "+\t\t\tbyte[] aContractID = new byte[buffer.length + 1];", "+\t\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "+\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIProfile.NS_IPROFILE_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\tserviceManager.Release();", "+\t\t\t", "+\t\t\tnsIProfile profile = new nsIProfile(result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\trc = profile.ShutDownCurrentProfile(nsIProfile.SHUTDOWN_CLEANSE);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tprofile.Release();\t\t\t", "+", "+\t\t\tdeleteFile(new File(profileFolder));", "+\t\t}", "+\t});", "+}"]}], "num": 15883}
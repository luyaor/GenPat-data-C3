{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d591e6bce7c4c9a84572a57ef5a01042", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "793d879eaa46f5a7ee8c87345e3d400c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "9e4aa4f79d8d08d57d797296be9d3269723e755b", "commitAfterChange": "c7a37ce473beb9045c99b97900ef561257b98af2", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 51, "signatureBeforeChange": " \t \tid getValueAttribute (int childID)", "signatureAfterChange": " \t \tid getValueAttribute (int childID)", "diff": ["+\t", "-\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "-\t\tevent.childID = childID;", "-\t\tevent.detail = -1;", "-\t\tevent.result = null; //TODO: could pass the OS value to the app", "-\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "-\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "-\t\t\tlistener.getRole(event);", "-\t\t\tlistener.getValue(event);", "-\t\t}", "-\t\tint role = event.detail;", "-\t\tString value = event.result;", "-", "-\t\tswitch (role) {", "-\t\tcase ACC.ROLE_RADIOBUTTON: // 1 = on, 0 = off", "-\t\tcase ACC.ROLE_CHECKBUTTON: // 1 = checked, 0 = unchecked, 2 = mixed", "-\t\tcase ACC.ROLE_SCROLLBAR: // numeric value representing the position of the scroller", "-\t\tcase ACC.ROLE_SLIDER: // the value associated with the position of the slider thumb", "-\t\tcase ACC.ROLE_PROGRESSBAR: // the value associated with the fill level of the progress bar", "-\t\t\tif (value != null) {", "-\t\t\t\ttry {", "-\t\t\t\t\tint number = Integer.parseInt(value);", "-\t\t\t\t\treturnValue = NSNumber.numberWithInt(number);", "-\t\t\t\t} catch (NumberFormatException ex) {", "-\t\t\t\t\tif (value.equalsIgnoreCase(\"true\")) {", "-\t\t\t\t\t\treturnValue = NSNumber.numberWithBool(true);", "-\t\t\t\t\t} else if (value.equalsIgnoreCase(\"false\")) {", "-\t\t\t\t\t\treturnValue = NSNumber.numberWithBool(false);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\treturnValue = NSNumber.numberWithBool(false);", "+\t\tif (accessibleValueListeners.size() > 0) {", "+\t\t\tAccessibleValueEvent event = new AccessibleValueEvent(this);", "+\t\t\tfor (int i = 0; i < accessibleValueListeners.size(); i++) {", "+\t\t\t\tAccessibleValueListener listener = (AccessibleValueListener) accessibleValueListeners.elementAt(i);", "+\t\t\t\tlistener.getCurrentValue(event);", "-\t\t\tbreak;", "-\t\tcase ACC.ROLE_TABFOLDER: // the accessibility object representing the currently selected tab item", "-\t\tcase ACC.ROLE_TABITEM:  // 1 = selected, 0 = not selected", "-\t\t\tAccessibleControlEvent ace = new AccessibleControlEvent(this);", "-\t\t\tace.childID = -4;", "+\t\t\treturnValue = NSNumber.numberWithDouble(event.value.doubleValue());", "+\t\t} else {", "+\t\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "+\t\t\tevent.childID = childID;", "+\t\t\tevent.detail = -1;", "+\t\t\tevent.result = null; //TODO: could pass the OS value to the app", "-\t\t\t\tlistener.getSelection(ace);", "+\t\t\t\tlistener.getRole(event);", "+\t\t\t\tlistener.getValue(event);", "-\t\t\tif (ace.childID >= ACC.CHILDID_SELF) {", "-\t\t\t\tif (role == ACC.ROLE_TABITEM) {", "-\t\t\t \t\treturnValue = NSNumber.numberWithBool(ace.childID == childID);", "-\t\t\t\t} else {", "-\t\t\t\t\treturnValue = new id(OS.NSAccessibilityUnignoredAncestor(childIDToOs(ace.childID).id));", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t \t\treturnValue = NSNumber.numberWithBool(false);\t\t\t\t", "+\t\t\tint role = event.detail;", "+\t\t\tString value = event.result;", "+\t", "+\t\t\tswitch (role) {", "+\t\t\t\tcase ACC.ROLE_RADIOBUTTON: // 1 = on, 0 = off", "+\t\t\t\tcase ACC.ROLE_CHECKBUTTON: // 1 = checked, 0 = unchecked, 2 = mixed", "+\t\t\t\tcase ACC.ROLE_SCROLLBAR: // numeric value representing the position of the scroller", "+\t\t\t\tcase ACC.ROLE_SLIDER: // the value associated with the position of the slider thumb", "+\t\t\t\tcase ACC.ROLE_PROGRESSBAR: // the value associated with the fill level of the progress bar", "+\t\t\t\t\tif (value != null) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tint number = Integer.parseInt(value);", "+\t\t\t\t\t\t\treturnValue = NSNumber.numberWithBool(number == 0 ? false : true);", "+\t\t\t\t\t\t} catch (NumberFormatException ex) {", "+\t\t\t\t\t\t\tif (value.equalsIgnoreCase(\"true\")) {", "+\t\t\t\t\t\t\t\treturnValue = NSNumber.numberWithBool(true);", "+\t\t\t\t\t\t\t} else if (value.equalsIgnoreCase(\"false\")) {", "+\t\t\t\t\t\t\t\treturnValue = NSNumber.numberWithBool(false);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\treturnValue = NSNumber.numberWithBool(false);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ACC.ROLE_TABFOLDER: // the accessibility object representing the currently selected tab item", "+\t\t\t\tcase ACC.ROLE_TABITEM:  // 1 = selected, 0 = not selected", "+\t\t\t\t\tAccessibleControlEvent ace = new AccessibleControlEvent(this);", "+\t\t\t\t\tace.childID = -4;", "+\t\t\t\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\t\t\t\tlistener.getSelection(ace);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (ace.childID >= ACC.CHILDID_SELF) {", "+\t\t\t\t\t\tif (role == ACC.ROLE_TABITEM) {", "+\t\t\t\t\t \t\treturnValue = NSNumber.numberWithBool(ace.childID == childID);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\treturnValue = new id(OS.NSAccessibilityUnignoredAncestor(childIDToOs(ace.childID).id));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t \t\treturnValue = NSNumber.numberWithBool(false);\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ACC.ROLE_COMBOBOX: // text of the currently selected item", "+\t\t\t\tcase ACC.ROLE_TEXT: // text in the text field", "+\t\t\t\t\tif (value != null) returnValue = NSString.stringWith(value);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ACC.ROLE_LABEL: // text in the label", "+\t\t\t\t\t/* On a Mac, the 'value' of a label is the same as the 'name' of the label. */", "+\t\t\t\t\tAccessibleEvent e = new AccessibleEvent(this);", "+\t\t\t\t\te.childID = childID;", "+\t\t\t\t\te.result = null;", "+\t\t\t\t\tfor (int i = 0; i < accessibleListeners.size(); i++) {", "+\t\t\t\t\t\tAccessibleListener listener = (AccessibleListener) accessibleListeners.elementAt(i);", "+\t\t\t\t\t\tlistener.getName(e);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (e.result != null) {", "+\t\t\t\t\t\treturnValue = NSString.stringWith(e.result);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (value != null) returnValue = NSString.stringWith(value);", "+\t\t\t\t\t}", "+\t\t\t\t\treturnValue = returnValue == null ? NSString.string() : returnValue;", "+\t\t\t\t\tbreak;", "-\t\t\tbreak;", "-\t\tcase ACC.ROLE_COMBOBOX: // text of the currently selected item", "-\t\tcase ACC.ROLE_TEXT: // text in the text field", "-\t\t\tif (value != null) returnValue = NSString.stringWith(value);", "-\t\t\tbreak;", "-\t\tcase ACC.ROLE_LABEL: // text in the label", "-\t\t\t/* On a Mac, the 'value' of a label is the same as the 'name' of the label. */", "-\t\t\tAccessibleEvent e = new AccessibleEvent(this);", "-\t\t\te.childID = childID;", "-\t\t\te.result = null;", "-\t\t\tfor (int i = 0; i < accessibleListeners.size(); i++) {", "-\t\t\t\tAccessibleListener listener = (AccessibleListener) accessibleListeners.elementAt(i);", "-\t\t\t\tlistener.getName(e);", "-\t\t\t}", "-\t\t\tif (e.result != null) {", "-\t\t\t\treturnValue = NSString.stringWith(e.result);", "-\t\t\t} else {", "-\t\t\t\tif (value != null) returnValue = NSString.stringWith(value);", "-\t\t\t}", "-\t\t\tbreak;", "-\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2e9699635df7c1c18c9e2ca9915c762", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "9e4aa4f79d8d08d57d797296be9d3269723e755b", "commitAfterChange": "c7a37ce473beb9045c99b97900ef561257b98af2", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 74, "signatureBeforeChange": " \t \tid getVisibleCharacterRangeAttribute (int childID)", "signatureAfterChange": " \t \tid getVisibleCharacterRangeAttribute (int childID)", "diff": ["-\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "-\t\tevent.childID = childID;", "-\t\tevent.result = null;", "-\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "-\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "-\t\t\tlistener.getValue(event);", "-\t\t}", "-\t\t", "-", "-\t\tif (event.result != null) {", "-\t\t\trange.location = 0;", "-\t\t\trange.length = event.result.length();", "+\t\tif (accessibleTextExtendedListeners.size() > 0) {", "+\t\t\tAccessibleTextExtendedEvent event = new AccessibleTextExtendedEvent(this);", "+\t\t\tevent.childID = childID;", "+\t\t\tfor (int i=0; i<accessibleTextExtendedListeners.size(); i++) {", "+\t\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) accessibleTextExtendedListeners.elementAt(i);", "+\t\t\t\tlistener.getVisibleRanges(event);", "+\t\t\t}", "+\t\t\trange.location = event.start;", "+\t\t\trange.length = event.end + 1;", "-\t\t\treturn null;", "-//\t\t\trange.location = range.length = 0;", "+\t\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "+\t\t\tevent.childID = childID;", "+\t\t\tevent.result = null;", "+\t\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\t\tlistener.getValue(event);", "+\t\t\t}", "+\t\t\tif (event.result != null) {", "+\t\t\t\trange.location = 0;", "+\t\t\t\trange.length = event.result.length();", "+\t\t\t} else {", "+\t\t\t\treturn null;", "+\t\t\t}"]}], "num": 1076}
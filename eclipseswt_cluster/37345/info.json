{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a311aff4d1332ed4224eb3c8b9841d0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22a923bf47ace3e8c5985528a18133ce", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "463c68d1347a53948b0bb7218107d8da7274a01f", "commitAfterChange": "8b327755e1d1f1ca2cb6a17a1fe754d64b9da4af", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["-\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\tint rc = webBrowser.GetContentDOMWindow (result);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\t/*", "+\t\t * Feature of XULRunner.  Activation and deactivation of the GRE must be", "+\t\t * performed by the embedder on non-Windows platforms.  Listen for focus", "+\t\t * events on the page being loaded so that activate and deactivate handling", "+\t\t * can be done as needed.", "+\t\t */", "+\t\tif (IsXULRunner) {", "+\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\tint rc = webBrowser.GetContentDOMWindow (result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t", "+\t\t\tnsIDOMWindow window = new nsIDOMWindow (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\trc = window.QueryInterface (nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t", "+\t\t\tnsIDOMEventTarget target = new nsIDOMEventTarget (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tnsEmbedString string = new nsEmbedString (XPCOM.DOMEVENT_FOCUS);", "+\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tstring.dispose ();", "+\t\t\tstring = new nsEmbedString (XPCOM.DOMEVENT_UNLOAD);", "+\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tstring.dispose ();", "+\t\t\ttarget.Release ();", "-\t\tnsIDOMWindow window = new nsIDOMWindow (result[0]);", "-\t\tresult[0] = 0;", "-\t\trc = window.QueryInterface (nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\t\t/* Listeners must be hooked in pages contained in frames */", "+\t\t\trc = window.GetFrames (result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\t\tnsIDOMWindowCollection frames = new nsIDOMWindowCollection (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tint[] frameCount = new int[1];", "+\t\t\trc = frames.GetLength (frameCount); /* PRUint32 */", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tint count = frameCount[0];", "-\t\tnsIDOMEventTarget target = new nsIDOMEventTarget (result[0]);", "-\t\tresult[0] = 0;", "-\t\tnsEmbedString string = new nsEmbedString (XPCOM.DOMEVENT_FOCUS);", "-\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tstring.dispose ();", "-\t\tstring = new nsEmbedString (XPCOM.DOMEVENT_UNLOAD);", "-\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tstring.dispose ();", "-\t\ttarget.Release ();", "-", "-\t\trc = window.GetFrames (result);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\tnsIDOMWindowCollection frames = new nsIDOMWindowCollection (result[0]);", "-\t\tresult[0] = 0;", "-\t\tint[] frameCount = new int[1];", "-\t\trc = frames.GetLength (frameCount); /* PRUint32 */", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tint count = frameCount[0];", "-", "-\t\tif (count > 0) {", "-\t\t\tfor (int i = 0; i < count; i++) {", "-\t\t\t\trc = frames.Item (i, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-", "-\t\t\t\tnsIDOMWindow frame = new nsIDOMWindow (result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = frame.QueryInterface (nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\t\t\tframe.Release ();", "-", "-\t\t\t\ttarget = new nsIDOMEventTarget (result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tstring = new nsEmbedString (XPCOM.DOMEVENT_FOCUS);", "-\t\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tstring.dispose ();", "-\t\t\t\tstring = new nsEmbedString (XPCOM.DOMEVENT_UNLOAD);", "-\t\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tstring.dispose ();", "-\t\t\t\ttarget.Release ();", "+\t\t\tif (count > 0) {", "+\t\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\t\trc = frames.Item (i, result);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t", "+\t\t\t\t\tnsIDOMWindow frame = new nsIDOMWindow (result[0]);", "+\t\t\t\t\tresult[0] = 0;", "+\t\t\t\t\trc = frame.QueryInterface (nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\t\t\t\tframe.Release ();", "+\t", "+\t\t\t\t\ttarget = new nsIDOMEventTarget (result[0]);", "+\t\t\t\t\tresult[0] = 0;", "+\t\t\t\t\tstring = new nsEmbedString (XPCOM.DOMEVENT_FOCUS);", "+\t\t\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\tstring.dispose ();", "+\t\t\t\t\tstring = new nsEmbedString (XPCOM.DOMEVENT_UNLOAD);", "+\t\t\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\tstring.dispose ();", "+\t\t\t\t\ttarget.Release ();", "+\t\t\t\t}", "+\t\t\tframes.Release ();", "+\t\t\twindow.Release ();", "-\t\tframes.Release ();", "-\t\twindow.Release ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0ff2d0aac062b134e2910ecfc87cbf7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "7b1329ce4559c314d7caaf6d49255a2e36ae8db9", "commitAfterChange": "24fd6f27ac88e7d1cba0fa9d22650617bd958c27", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 4, "signatureBeforeChange": "  nsIVariant convertToJS (Object value, nsIComponentManager componentManager)", "signatureAfterChange": "  static nsIVariant convertToJS (Object value, nsIComponentManager componentManager)", "diff": ["+", "+static nsIVariant convertToJS (Object value, nsIComponentManager componentManager) {", "+\tint /*long*/[] result = new int /*long*/[1];", "+\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_VARIANT_CONTRACTID, true);", "+\tint rc = componentManager.CreateInstanceByContractID (aContractID, 0, nsIWritableVariant.NS_IWRITABLEVARIANT_IID, result);", "+\tnsIWritableVariant variant = new nsIWritableVariant (result[0]);", "+\tresult[0] = 0;", "+", "+\tif (value == null) {", "+\t\trc = variant.SetAsEmpty ();", "+\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\treturn variant;", "+\t}", "+\tif (value instanceof String) {", "+\t\tString stringValue = (String)value;", "+\t\tint length = stringValue.length ();", "+\t\tchar[] chars = new char[length];", "+\t\tstringValue.getChars (0, length, chars, 0);", "+\t\trc = variant.SetAsWStringWithSize (length, chars);", "+\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\treturn variant;", "+\t}", "+\tif (value instanceof Boolean) {", "+\t\tBoolean booleanValue = (Boolean)value;", "+\t\trc = variant.SetAsBool (booleanValue.booleanValue () ? 1 : 0);", "+\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\treturn variant;", "+\t}", "+\tif (value instanceof Number) {", "+\t\tNumber numberValue = (Number)value;", "+\t\trc = variant.SetAsDouble (numberValue.doubleValue ());", "+\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\treturn variant;", "+\t}", "+\tif (value instanceof Object[]) {", "+\t\tObject[] arrayValue = (Object[])value;", "+\t\tint length = arrayValue.length;", "+\t\tif (length == 0) {", "+\t\t\trc = variant.SetAsEmptyArray ();", "+\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t} else {", "+\t\t\tint /*long*/ arrayPtr = C.malloc (C.PTR_SIZEOF * length);", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tObject currentObject = arrayValue[i];", "+\t\t\t\ttry {", "+\t\t\t\t\tnsIVariant currentVariant = convertToJS (currentObject, componentManager);", "+\t\t\t\t\tC.memmove (arrayPtr + C.PTR_SIZEOF * i, new int /*long*/[] {currentVariant.getAddress ()}, C.PTR_SIZEOF);", "+\t\t\t\t} catch (SWTException e) {", "+\t\t\t\t\t/* invalid return value type */", "+\t\t\t\t\tC.free (arrayPtr);", "+\t\t\t\t\tvariant.Release ();", "+\t\t\t\t\t/* release the variants that had previously been added to the array */", "+\t\t\t\t\tfor (int j = 0; j < i; j++) {", "+\t\t\t\t\t\tint /*long*/[] ptr = new int /*long*/[1];", "+\t\t\t\t\t\tC.memmove (ptr, arrayPtr + C.PTR_SIZEOF * j, C.PTR_SIZEOF);", "+\t\t\t\t\t\tnew nsISupports (ptr[0]).Release ();", "+\t\t\t\t\t}", "+\t\t\t\t\tthrow e;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tint /*long*/ idPtr = C.malloc (nsID.sizeof);", "+\t\t\tXPCOM.memmove (idPtr, Mozilla.IsPre_4 ? nsIVariant.NS_IVARIANT_IID : nsIVariant.NS_IVARIANT_10_IID, nsID.sizeof);", "+\t\t\trc = variant.SetAsArray (nsIDataType.VTYPE_INTERFACE_IS, idPtr, length, arrayPtr);", "+\t\t\tC.free (idPtr);", "+\t\t\tC.free (arrayPtr);", "+\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t}", "+\t\treturn variant;", "+\t}", "+", "+\tvariant.Release ();", "+\tSWT.error (SWT.ERROR_INVALID_RETURN_VALUE);", "+\treturn null;", "+}", "-", "-nsIVariant convertToJS (Object value, nsIComponentManager componentManager) {", "-\tint /*long*/[] result = new int /*long*/[1];", "-\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_VARIANT_CONTRACTID, true);", "-\tint rc = componentManager.CreateInstanceByContractID (aContractID, 0, nsIWritableVariant.NS_IWRITABLEVARIANT_IID, result);", "-\tnsIWritableVariant variant = new nsIWritableVariant (result[0]);", "-\tresult[0] = 0;", "-", "-\tif (value == null) {", "-\t\trc = variant.SetAsEmpty ();", "-\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\treturn variant;", "-\t}", "-\tif (value instanceof String) {", "-\t\tString stringValue = (String)value;", "-\t\tint length = stringValue.length ();", "-\t\tchar[] chars = new char[length];", "-\t\tstringValue.getChars (0, length, chars, 0);", "-\t\trc = variant.SetAsWStringWithSize (length, chars);", "-\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\treturn variant;", "-\t}", "-\tif (value instanceof Boolean) {", "-\t\tBoolean booleanValue = (Boolean)value;", "-\t\trc = variant.SetAsBool (booleanValue.booleanValue () ? 1 : 0);", "-\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\treturn variant;", "-\t}", "-\tif (value instanceof Number) {", "-\t\tNumber numberValue = (Number)value;", "-\t\trc = variant.SetAsDouble (numberValue.doubleValue ());", "-\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\treturn variant;", "-\t}", "-\tif (value instanceof Object[]) {", "-\t\tObject[] arrayValue = (Object[])value;", "-\t\tint length = arrayValue.length;", "-\t\tif (length == 0) {", "-\t\t\trc = variant.SetAsEmptyArray ();", "-\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t} else {", "-\t\t\tint /*long*/ arrayPtr = C.malloc (C.PTR_SIZEOF * length);", "-\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\tObject currentObject = arrayValue[i];", "-\t\t\t\ttry {", "-\t\t\t\t\tnsIVariant currentVariant = convertToJS (currentObject, componentManager);", "-\t\t\t\t\tC.memmove (arrayPtr + C.PTR_SIZEOF * i, new int /*long*/[] {currentVariant.getAddress ()}, C.PTR_SIZEOF);", "-\t\t\t\t} catch (SWTException e) {", "-\t\t\t\t\t/* invalid return value type */", "-\t\t\t\t\tC.free (arrayPtr);", "-\t\t\t\t\tvariant.Release ();", "-\t\t\t\t\t/* release the variants that had previously been added to the array */", "-\t\t\t\t\tfor (int j = 0; j < i; j++) {", "-\t\t\t\t\t\tint /*long*/[] ptr = new int /*long*/[1];", "-\t\t\t\t\t\tC.memmove (ptr, arrayPtr + C.PTR_SIZEOF * j, C.PTR_SIZEOF);", "-\t\t\t\t\t\tnew nsISupports (ptr[0]).Release ();", "-\t\t\t\t\t}", "-\t\t\t\t\tthrow e;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tint /*long*/ idPtr = C.malloc (nsID.sizeof);", "-\t\t\tXPCOM.memmove (idPtr, nsIVariant.NS_IVARIANT_IID, nsID.sizeof);", "-\t\t\trc = variant.SetAsArray (nsIDataType.VTYPE_INTERFACE_IS, idPtr, length, arrayPtr);", "-\t\t\tC.free (idPtr);", "-\t\t\tC.free (arrayPtr);", "-\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t}", "-\t\treturn variant;", "-\t}", "-", "-\tvariant.Release ();", "-\tSWT.error (SWT.ERROR_INVALID_RETURN_VALUE);", "-\treturn null;", "-}"]}], "num": 37345}
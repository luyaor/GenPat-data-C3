{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "922572437f3f74fbefcd930e65d3eb44", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b850e9ef3910ec8df45800242a6d2bef", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "2bed7005ff668e2462e9fab74f3683eaa644a8fd", "commitAfterChange": "d349945df9189fe6c3a178ddfc0a7a2267eaa7f2", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 91, "signatureBeforeChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["-\t\t\t\tkeyMsg.hwnd = control.handle;", "-\t\t\t\tint flags = OS.PM_REMOVE | OS.PM_NOYIELD | OS.PM_QS_INPUT | OS.PM_QS_POSTMESSAGE;", "-\t\t\t\tdo {", "-\t\t\t\t\tif (!(consumed |= filterMessage (keyMsg))) {", "-\t\t\t\t\t\tOS.TranslateMessage (keyMsg);", "-\t\t\t\t\t\tconsumed |= OS.DispatchMessage (keyMsg) == 1;\t", "-\t\t\t\t\t}", "-\t\t\t\t} while (OS.PeekMessage (keyMsg, keyMsg.hwnd, OS.WM_KEYFIRST, OS.WM_KEYLAST, flags));", "+\t\t\t\t/*", "+\t\t\t\t* Feature in Windows.  When the user types an accent key such", "+\t\t\t\t* as ^ in order to get an accented character on a German keyboard,", "+\t\t\t\t* calling TranslateMessage(), ToUnicode() or ToAscii() consumes", "+\t\t\t\t* the key.  This means that a subsequent call to TranslateMessage()", "+\t\t\t\t* will see a regular key rather than the accented key.  The fix", "+\t\t\t\t* is to use MapVirtualKey() and VkKeyScan () to detect an accent", "+\t\t\t\t* and avoid calls to TranslateMessage().", "+\t\t\t\t*/", "+\t\t\t\tboolean accentKey = false;", "+\t\t\t\tswitch (keyMsg.message) {", "+\t\t\t\t\tcase OS.WM_KEYDOWN:", "+\t\t\t\t\tcase OS.WM_SYSKEYDOWN:", "+\t\t\t\t\t\tif (!OS.IsWinCE) {", "+\t\t\t\t\t\t\t/* ", "+\t\t\t\t\t\t\t* Bug in Windows. The high bit in the result of MapVirtualKey() on", "+\t\t\t\t\t\t\t* Windows NT is bit 32 while the high bit on Windows 95 is bit 16.", "+\t\t\t\t\t\t\t* They should both be bit 32.  The fix is to test the right bit.", "+\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\tint mapKey = OS.MapVirtualKey (keyMsg.wParam, 2);", "+\t\t\t\t\t\t\taccentKey = (mapKey & (OS.IsWinNT ? 0x80000000 : 0x8000)) != 0;", "+\t\t\t\t\t\t\tif (!accentKey) {", "+\t\t\t\t\t\t\t\tfor (int i=0; i<ACCENTS.length; i++) {", "+\t\t\t\t\t\t\t\t\tint value = OS.VkKeyScan (ACCENTS [i]);", "+\t\t\t\t\t\t\t\t\tif (value != -1 && (value & 0xFF) == keyMsg.wParam) {", "+\t\t\t\t\t\t\t\t\t\tint state = value >> 8;", "+\t\t\t\t\t\t\t\t\t\tif ((OS.GetKeyState (OS.VK_SHIFT) < 0) != ((state & 0x1) != 0)) break;", "+\t\t\t\t\t\t\t\t\t\tif ((OS.GetKeyState (OS.VK_CONTROL) < 0) != ((state & 0x2) != 0)) break;", "+\t\t\t\t\t\t\t\t\t\tif ((OS.GetKeyState (OS.VK_MENU) < 0) != ((state & 0x4) != 0)) break;", "+\t\t\t\t\t\t\t\t\t\taccentKey = true;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (!accentKey && !ignoreNextKey) {", "+\t\t\t\t\tkeyMsg.hwnd = control.handle;", "+\t\t\t\t\tint flags = OS.PM_REMOVE | OS.PM_NOYIELD | OS.PM_QS_INPUT | OS.PM_QS_POSTMESSAGE;", "+\t\t\t\t\tdo {", "+\t\t\t\t\t\tif (!(consumed |= filterMessage (keyMsg))) {", "+\t\t\t\t\t\t\tOS.TranslateMessage (keyMsg);", "+\t\t\t\t\t\t\tconsumed |= OS.DispatchMessage (keyMsg) == 1;\t", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} while (OS.PeekMessage (keyMsg, keyMsg.hwnd, OS.WM_KEYFIRST, OS.WM_KEYLAST, flags));", "+\t\t\t\t}", "+\t\t\t\tswitch (keyMsg.message) {", "+\t\t\t\t\tcase OS.WM_KEYDOWN:", "+\t\t\t\t\tcase OS.WM_SYSKEYDOWN: ignoreNextKey = accentKey;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7189cca068fedaeaa47d2d375e82d77e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleFrame.java", "commitBeforeChange": "8f10333701e25806ab36d4aa987b63387f1ed181", "commitAfterChange": "c97fb73aac3def3e86cabbd6714586bc23f79c49", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " static int getMsgProc(int code, int wParam, int lParam)", "signatureAfterChange": " static int getMsgProc(int code, int wParam, int lParam)", "diff": ["+\t\t\t\t\tboolean accentKey = false;", "+\t\t\t\t\tswitch (msg.message) {", "+\t\t\t\t\t\tcase OS.WM_KEYDOWN:", "+\t\t\t\t\t\tcase OS.WM_SYSKEYDOWN:", "+\t\t\t\t\t\t\tif (!OS.IsWinCE) {", "+\t\t\t\t\t\t\t\t/* ", "+\t\t\t\t\t\t\t\t* Bug in Windows. The high bit in the result of MapVirtualKey() on", "+\t\t\t\t\t\t\t\t* Windows NT is bit 32 while the high bit on Windows 95 is bit 16.", "+\t\t\t\t\t\t\t\t* They should both be bit 32.  The fix is to test the right bit.", "+\t\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\t\tint mapKey = OS.MapVirtualKey (msg.wParam, 2);", "+\t\t\t\t\t\t\t\tif (mapKey != 0) {", "+\t\t\t\t\t\t\t\t\taccentKey = (mapKey & (OS.IsWinNT ? 0x80000000 : 0x8000)) != 0;", "+\t\t\t\t\t\t\t\t\tif (!accentKey) {", "+\t\t\t\t\t\t\t\t\t\tfor (int i=0; i<ACCENTS.length; i++) {", "+\t\t\t\t\t\t\t\t\t\t\tint value = OS.VkKeyScan (ACCENTS [i]);", "+\t\t\t\t\t\t\t\t\t\t\tif (value != -1 && (value & 0xFF) == msg.wParam) {", "+\t\t\t\t\t\t\t\t\t\t\t\tint state = value >> 8;", "+\t\t\t\t\t\t\t\t\t\t\t\tif ((OS.GetKeyState (OS.VK_SHIFT) < 0) != ((state & 0x1) != 0)) break;", "+\t\t\t\t\t\t\t\t\t\t\t\tif ((OS.GetKeyState (OS.VK_CONTROL) < 0) != ((state & 0x2) != 0)) break;", "+\t\t\t\t\t\t\t\t\t\t\t\tif ((OS.GetKeyState (OS.VK_MENU) < 0) != ((state & 0x4) != 0)) break;", "+\t\t\t\t\t\t\t\t\t\t\t\taccentKey = true;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\tif (!consumed) {", "+\t\t\t\t\tif (!consumed && !accentKey && !ignoreNextKey) {", "+\t\t\t\t\tswitch (msg.message) {", "+\t\t\t\t\t\tcase OS.WM_KEYDOWN:", "+\t\t\t\t\t\tcase OS.WM_SYSKEYDOWN: ignoreNextKey = accentKey;", "+\t\t\t\t\t}", "+"]}], "num": 15523}
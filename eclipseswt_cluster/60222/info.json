{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34dbd82b0cfbaa05d1b2f78ebeb795c7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ada49d1d43bbd585e3fee201403f762d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "869d0b47847f64e864b376350d43251357ab2f40", "commitAfterChange": "156d213c176b38959f26be8a2a687b54e9492204", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 139, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\tif (!customDraw && findImageControl () == null) break;", "+\t\t\tif (!customDraw && findImageControl () == null) {", "+\t\t\t\t/*", "+\t\t\t\t* Feature in Windows.  When the table is disabled, it draws", "+\t\t\t\t* with a gray background but does not gray the text.  The fix", "+\t\t\t\t* is to explicitly gray the text using Custom Draw.", "+\t\t\t\t*/", "+\t\t\t\tif (OS.IsWindowEnabled (handle)) break;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe9e4ac1bfc3216d4747eb27f769e468", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "7152a684c8d80864a8c57a6df893f5f00704dc06", "commitAfterChange": "9d1ef85b1ebc1573224e081fdb9056605ae0a470", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": " \t \tstatic void setGValue (int value, Number number)", "signatureAfterChange": " \t \tstatic void setGValue (int value, Number number)", "diff": ["-\t\tOS.g_value_unset(value);", "+\t\tif (OS.G_VALUE_TYPE(value) != 0) OS.g_value_unset(value);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "218d089eb16e3663ee52d27f5d2366e5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "8be6c60e3fac2725ecc106848ea61dbf07f3abdf", "commitAfterChange": "5d3d31a4407a80d3425d30eb086d8544cee3ff99", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 139, "signatureBeforeChange": "  int OnStartURIOpen (int aURI, int retval)", "signatureAfterChange": "  int OnStartURIOpen (int aURI, int retval)", "diff": ["+\tif (locationListeners.length == 0) {", "+\t\tXPCOM.memmove (retval, new int[] {0}, 4); /* PRBool */", "+\t\treturn XPCOM.NS_OK;", "+\t}", "-\tif (locationListeners.length == 0) {", "-\t\tXPCOM.memmove (retval, new int[] {0}, 4); /* PRBool */", "-\t\treturn XPCOM.NS_OK;", "-\t}", "-\t\tLocationEvent event = new LocationEvent (browser);", "-\t\tevent.display = browser.getDisplay();", "-\t\tevent.widget = browser;", "-\t\tevent.location = value;", "-\t\t/*", "-\t\t * If the URI indicates that the page is being rendered from memory", "-\t\t * (via setText()) then set it to about:blank to be consistent with IE.", "+\t\t/* ", "+\t\t * listeners should not be notified of internal transitions like \"javascipt:...\"", "+\t\t * because this is an implementation side-effect, not a true navigate", "-\t\tif (event.location.equals (URI_FROMMEMORY)) event.location = ABOUT_BLANK;", "-\t\tevent.doit = doit;", "-\t\tfor (int i = 0; i < locationListeners.length; i++) {", "-\t\t\tlocationListeners[i].changing (event);", "+\t\tif (!value.startsWith (PREFIX_JAVASCRIPT)) {", "+\t\t\tLocationEvent event = new LocationEvent (browser);", "+\t\t\tevent.display = browser.getDisplay();", "+\t\t\tevent.widget = browser;", "+\t\t\tevent.location = value;", "+\t\t\t/*", "+\t\t\t * If the URI indicates that the page is being rendered from memory", "+\t\t\t * (via setText()) then set it to about:blank to be consistent with IE.", "+\t\t\t */", "+\t\t\tif (event.location.equals (URI_FROMMEMORY)) event.location = ABOUT_BLANK;", "+\t\t\tevent.doit = doit;", "+\t\t\tfor (int i = 0; i < locationListeners.length; i++) {", "+\t\t\t\tlocationListeners[i].changing (event);", "+\t\t\t}", "+\t\t\tdoit = event.doit;", "-\t\tdoit = event.doit;"]}], "num": 60222}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3393b870666b4df27d69e026909e9d4", "detectedBy": ["DIFF_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4edf4f8ce574253e400a2a9bcf490b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Display.java", "commitBeforeChange": "3ace99cc2cbeca175428eabbe777b2fc353f5d7d", "commitAfterChange": "38b0d2b8f58957af87b01bf2967bf37e853d55b0", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 66, "signatureBeforeChange": "  public void test_setSynchronizerLorg_eclipse_swt_widgets_Synchronizer()", "signatureAfterChange": "  public void test_setSynchronizerLorg_eclipse_swt_widgets_Synchronizer()", "diff": ["-\twarnUnimpl(\"Test test_setSynchronizerLorg_eclipse_swt_widgets_Synchronizer not written\");", "+\tfinal Display display = new Display();", "+\tfinal boolean[] asyncExecRan = new boolean[] {false};", "+\t", "+\ttry {", "+\t\ttry {", "+\t\t\tdisplay.setSynchronizer(null);", "+\t\t\tfail(\"No exception thrown for post with null argument\");", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t\tassertEquals(\"Incorrect exception thrown for set synchronizer with null argument\", SWT.ERROR_NULL_ARGUMENT, e);", "+\t\t}", "+\t\t", "+\t\tclass MySynchronizer extends Synchronizer {", "+\t\t\tboolean invoked = false;", "+\t\t\tMySynchronizer(Display d) {", "+\t\t\t\tsuper(d);", "+\t\t\t}", "+\t\t\tprotected void asyncExec (Runnable runnable) {", "+\t\t\t\tinvoked = true;", "+\t\t\t\tsuper.asyncExec(runnable);", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tMySynchronizer mySynchronizer = new MySynchronizer(display);", "+\t\tdisplay.setSynchronizer(mySynchronizer);", "+\t\tdisplay.asyncExec(new Runnable() {", "+\t\t\tpublic void run() {", "+\t\t\t\tasyncExecRan[0] = true;", "+\t\t\t}", "+\t\t});", "+\t\twhile (display.readAndDispatch()) {}", "+\t\tassertTrue(mySynchronizer.invoked);", "+\t\tassertTrue(asyncExecRan[0]);", "+\t} finally {", "+\t\tdisplay.dispose();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e03ff18b3285e6e85503ed3eab85138e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Display.java", "commitBeforeChange": "3ace99cc2cbeca175428eabbe777b2fc353f5d7d", "commitAfterChange": "38b0d2b8f58957af87b01bf2967bf37e853d55b0", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 76, "signatureBeforeChange": "  public void test_timerExecILjava_lang_Runnable()", "signatureAfterChange": "  public void test_timerExecILjava_lang_Runnable()", "diff": ["-\twarnUnimpl(\"Test test_timerExecILjava_lang_Runnable not written\");", "+\tfinal Display display = new Display();", "+\ttry {", "+\t\tfinal boolean[] timerExecRan = new boolean[] {false};", "+\t\tfinal boolean[] threadRan = new boolean[] {false};", "+\t\t", "+\t\ttry {", "+\t\t\tdisplay.timerExec(0, null);", "+\t\t\tfail(\"No exception thrown for timerExec with null runnable\");", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t\tassertEquals(\"Incorrect exception thrown for timerExec with null runnable\", SWT.ERROR_NULL_ARGUMENT, e);", "+\t\t}", "+\t\t", "+\t\tdisplay.timerExec(-100, new Runnable() {", "+\t\t\tpublic void run() {", "+\t\t\t\ttimerExecRan[0] = true;", "+\t\t\t}", "+\t\t});", "+\t\t\t\t", "+\t\tfinal int delay = 3000;", "+\t\tfinal long startTime = System.currentTimeMillis();", "+\t\tdisplay.timerExec(delay, new Runnable() {", "+\t\t\tpublic void run() {", "+\t\t\t\tlong endTime = System.currentTimeMillis();", "+\t\t\t\tassertTrue(endTime >= (startTime + delay));", "+\t\t\t\tthreadRan[0] = true;", "+\t\t\t}", "+\t\t});", "+\t\twhile (!threadRan[0]) {", "+\t\t\t// The read and dispatch loop must be running in order", "+\t\t\t// for the runnable in the timer exec to be executed.", "+\t\t\tdisplay.readAndDispatch();", "+\t\t}", "+\t\t", "+\t\t// Verify the timerExec with less than zero milliseconds didn't execute.", "+\t\tassertFalse(timerExecRan[0]);", "+\t} finally {", "+\t\tdisplay.dispose();", "+\t}"]}], "num": 28615}
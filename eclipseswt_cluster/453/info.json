{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b610e211c3a9ee4e8412c21d01f2e10a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "955152877a51668d68dc80c009e2b5ac", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "dcb5b6438c44256a7129a57371b071347a181363", "commitAfterChange": "b143d7b976c65e3f6942581f889b75845a4e7417", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " static void initImages (final Display display)", "signatureAfterChange": " static void initImages (final Display display)", "diff": ["-\tif (display.getData (ID_CHECKMARK) != null) return;", "-\t", "-\t\tnew RGB (0, 0, 255), new RGB (255, 0, 255), new RGB (0, 255, 255), new RGB (255, 255, 255)});\t", "-\tImageData collapsed = new ImageData (", "-\t\t9, 9, 4, \t\t\t\t\t\t\t\t\t\t/* width, height, depth */", "-\t\tfourBit, 4,", "-\t\tnew byte[] {", "-\t\t\t119, 119, 119, 119, 112, 0, 0, 0, 127, -1, -1, -1,", "-\t\t\t112, 0, 0, 0, 127, -1, 15, -1, 112, 0, 0, 0,", "-\t\t\t127, -1, 15, -1, 112, 0, 0, 0, 127, 0, 0, 15,", "-\t\t\t112, 0, 0, 0, 127, -1, 15, -1, 112, 0, 0, 0,", "-\t\t\t127, -1, 15, -1, 112, 0, 0, 0, 127, -1, -1, -1,", "-\t\t\t112, 0, 0, 0, 119, 119, 119, 119, 112, 0, 0, 0});", "-\tcollapsed.transparentPixel = 15;\t\t\t/* white for transparency */", "-\tImageData expanded = new ImageData (", "-\t\t9, 9, 4, \t\t\t\t\t\t\t\t\t\t/* width, height, depth */", "-\t\tfourBit, 4,", "-\t\tnew byte[] {", "-\t\t\t119, 119, 119, 119, 112, 0, 0, 0, 127, -1, -1, -1,", "-\t\t\t112, 0, 0, 0, 127, -1, -1, -1, 112, 0, 0, 0,", "-\t\t\t127, -1, -1, -1, 112, 0, 0, 0, 127, 0, 0, 15,", "-\t\t\t112, 0, 0, 0, 127, -1, -1, -1, 112, 0, 0, 0,", "-\t\t\t127, -1, -1, -1, 112, 0, 0, 0, 127, -1, -1, -1,", "-\t\t\t112, 0, 0, 0, 119, 119, 119, 119, 112, 0, 0, 0});", "-\texpanded.transparentPixel = 15;\t\t\t/* use white for transparency */", "-\t\t", "-\tPaletteData uncheckedPalette = new PaletteData (\t", "-\t\tnew RGB[] {new RGB (128, 128, 128), new RGB (255, 255, 255)});", "-\tPaletteData grayUncheckedPalette = new PaletteData (\t", "-\t\tnew RGB[] {new RGB (128, 128, 128), new RGB (192, 192, 192)});", "+\t\tnew RGB (0, 0, 255), new RGB (255, 0, 255), new RGB (0, 255, 255), new RGB (255, 255, 255)});", "+", "+\tif (display.getData (ID_EXPANDED) == null) {", "+\t\tImageData expanded = new ImageData (", "+\t\t\t9, 9, 4, \t\t\t\t\t\t\t\t\t\t/* width, height, depth */", "+\t\t\tfourBit, 4,", "+\t\t\tnew byte[] {", "+\t\t\t\t119, 119, 119, 119, 112, 0, 0, 0, 127, -1, -1, -1,", "+\t\t\t\t112, 0, 0, 0, 127, -1, -1, -1, 112, 0, 0, 0,", "+\t\t\t\t127, -1, -1, -1, 112, 0, 0, 0, 127, 0, 0, 15,", "+\t\t\t\t112, 0, 0, 0, 127, -1, -1, -1, 112, 0, 0, 0,", "+\t\t\t\t127, -1, -1, -1, 112, 0, 0, 0, 127, -1, -1, -1,", "+\t\t\t\t112, 0, 0, 0, 119, 119, 119, 119, 112, 0, 0, 0});", "+\t\texpanded.transparentPixel = 15;\t\t\t/* use white for transparency */", "+\t\tdisplay.setData (ID_EXPANDED, new Image (display, expanded));", "+\t}", "+", "+\tif (display.getData (ID_COLLAPSED) == null) {", "+\t\tImageData collapsed = new ImageData (", "+\t\t\t9, 9, 4, \t\t\t\t\t\t\t\t\t\t/* width, height, depth */", "+\t\t\tfourBit, 4,", "+\t\t\tnew byte[] {", "+\t\t\t\t119, 119, 119, 119, 112, 0, 0, 0, 127, -1, -1, -1,", "+\t\t\t\t112, 0, 0, 0, 127, -1, 15, -1, 112, 0, 0, 0,", "+\t\t\t\t127, -1, 15, -1, 112, 0, 0, 0, 127, 0, 0, 15,", "+\t\t\t\t112, 0, 0, 0, 127, -1, 15, -1, 112, 0, 0, 0,", "+\t\t\t\t127, -1, 15, -1, 112, 0, 0, 0, 127, -1, -1, -1,", "+\t\t\t\t112, 0, 0, 0, 119, 119, 119, 119, 112, 0, 0, 0});", "+\t\tcollapsed.transparentPixel = 15;\t\t/* use white for transparency */", "+\t\tdisplay.setData (ID_COLLAPSED, new Image (display, collapsed));", "+\t}", "+", "-\tImageData unchecked = new ImageData (11, 11, 1, uncheckedPalette, 2, checkbox);", "-\tImageData grayUnchecked = new ImageData (11, 11, 1, grayUncheckedPalette, 2, checkbox);", "-", "-\tdisplay.setData (ID_EXPANDED, new Image (display, expanded));", "-\tdisplay.setData (ID_COLLAPSED, new Image (display, collapsed));", "-\tdisplay.setData (ID_UNCHECKED, new Image (display, unchecked));", "-\tdisplay.setData (ID_GRAYUNCHECKED, new Image (display, grayUnchecked));", "-\tdisplay.setData (ID_CHECKMARK, new Image (display, checkmark));", "-\tdisplay.setData (ID_CONNECTOR_COLOR, new Color (display, 170, 170, 170));", "+\tif (display.getData (ID_CHECKMARK) == null) {", "+\t\tdisplay.setData (ID_CHECKMARK, new Image (display, checkmark));", "+\t}", "+\tif (display.getData (ID_UNCHECKED) == null) {", "+\t\tPaletteData uncheckedPalette = new PaletteData (\t", "+\t\t\tnew RGB[] {new RGB (128, 128, 128), new RGB (255, 255, 255)});", "+\t\tImageData unchecked = new ImageData (11, 11, 1, uncheckedPalette, 2, checkbox);", "+\t\tdisplay.setData (ID_UNCHECKED, new Image (display, unchecked));", "+\t}", "+\t", "+\tif (display.getData (ID_GRAYUNCHECKED) == null) {", "+\t\tPaletteData grayUncheckedPalette = new PaletteData (\t", "+\t\t\tnew RGB[] {new RGB (128, 128, 128), new RGB (192, 192, 192)});", "+\t\tImageData grayUnchecked = new ImageData (11, 11, 1, grayUncheckedPalette, 2, checkbox);", "+\t\tdisplay.setData (ID_GRAYUNCHECKED, new Image (display, grayUnchecked));", "+\t}", "+\t", "+\tif (display.getData (ID_CONNECTOR_COLOR) == null) {", "+\t\tdisplay.setData (ID_CONNECTOR_COLOR, new Color (display, 170, 170, 170));", "+\t}", "+", "+\t\t\tColor connectorColor = (Color) display.getData (ID_CONNECTOR_COLOR);", "+\t\t\tif (connectorColor != null) connectorColor.dispose ();", "-\t\t\tColor connectorColor = (Color) display.getData (ID_CONNECTOR_COLOR);", "-\t\t\tif (connectorColor != null) connectorColor.dispose ();", "+\t\t\tdisplay.setData (ID_CONNECTOR_COLOR, null);", "-\t\t\tdisplay.setData (ID_CONNECTOR_COLOR, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fdb4238169082f931d598712da3227c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "97d7bbf8cfdbb6f96f4719f1f7be7a03fa93a649", "commitAfterChange": "86e7cf5504ff5ce8b2c98ba1a25038a04c256d57", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight, int depth)", "signatureAfterChange": " void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight, int depth)", "diff": ["-\tint colorPixmap = srcImage.pixmap;", "-\tint maskPixmap = srcImage.mask;", "+\tint colorPixmap = 0, maskPixmap = 0;", "-\tif (!(simple || (srcWidth == destWidth && srcHeight == destHeight))) {", "+\tif (simple || (srcWidth == destWidth && srcHeight == destHeight)) {", "+\t\tcolorPixmap = srcImage.pixmap;", "+\t\tmaskPixmap = srcImage.mask;", "+\t} else {", "-\t\tint xImagePtr = scalePixmap(xDisplay, colorPixmap, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "-\t\tint xMaskPtr = scalePixmap(xDisplay, maskPixmap, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "+\t\tint xImagePtr = scalePixmap(xDisplay, srcImage.pixmap, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "+\t\tif (xImagePtr != 0) {", "+\t\t\tint xMaskPtr = scalePixmap(xDisplay, srcImage.mask, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "+\t\t\tif (xMaskPtr != 0) {", "+\t\t\t\t/* Create color scaled pixmaps */", "+\t\t\t\tcolorPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, depth);", "+\t\t\t\tint tempGC = OS.XCreateGC(xDisplay, colorPixmap, 0, null);", "+\t\t\t\tOS.XPutImage(xDisplay, colorPixmap, tempGC, xImagePtr, 0, 0, 0, 0, destWidth, destHeight);", "+\t\t\t\tOS.XFreeGC(xDisplay, tempGC);", "+\t\t", "+\t\t\t\t/* Create mask scaled pixmaps */", "+\t\t\t\tmaskPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, 1);", "+\t\t\t\ttempGC = OS.XCreateGC(xDisplay, maskPixmap, 0, null);", "+\t\t\t\tOS.XPutImage(xDisplay, maskPixmap, tempGC, xMaskPtr, 0, 0, 0, 0, destWidth, destHeight);", "+\t\t\t\tOS.XFreeGC(xDisplay, tempGC);", "-\t\t/* Create color scaled pixmaps */", "-\t\tcolorPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, depth);", "-\t\tint tempGC = OS.XCreateGC(xDisplay, colorPixmap, 0, null);", "-\t\tOS.XPutImage(xDisplay, colorPixmap, tempGC, xImagePtr, 0, 0, 0, 0, destWidth, destHeight);", "-\t\tOS.XDestroyImage(xImagePtr);", "-\t\tOS.XFreeGC(xDisplay, tempGC);", "-", "-\t\t/* Create mask scaled pixmaps */", "-\t\tmaskPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, 1);", "-\t\ttempGC = OS.XCreateGC(xDisplay, maskPixmap, 0, null);", "-\t\tOS.XPutImage(xDisplay, maskPixmap, tempGC, xMaskPtr, 0, 0, 0, 0, destWidth, destHeight);", "-\t\tOS.XDestroyImage(xMaskPtr);", "-\t\tOS.XFreeGC(xDisplay, tempGC);", "+\t\t\t\tOS.XDestroyImage(xMaskPtr);", "+\t\t\t}", "+\t\t\tOS.XDestroyImage(xImagePtr);", "+\t\t}", "-\tXGCValues values = new XGCValues();", "-\tOS.XGetGCValues(xDisplay, handle, OS.GCForeground | OS. GCBackground | OS.GCFunction, values);", "-\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "-\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "-\tOS.XSetForeground(xDisplay, handle, foreground);", "-\tOS.XSetBackground(xDisplay, handle, ~foreground);", "-\tOS.XSetFunction(xDisplay, handle, OS.GXand);", "-\tOS.XCopyPlane(xDisplay, maskPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY, 1);", "-\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "-\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "-\tOS.XSetForeground(xDisplay, handle, values.foreground);", "-\tOS.XSetBackground(xDisplay, handle, values.background);", "-\tOS.XSetFunction(xDisplay, handle, values.function);", "+\tif (colorPixmap != 0 && maskPixmap != 0) {", "+\t\tXGCValues values = new XGCValues();", "+\t\tOS.XGetGCValues(xDisplay, handle, OS.GCForeground | OS. GCBackground | OS.GCFunction, values);", "+\t\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "+\t\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "+\t\tOS.XSetForeground(xDisplay, handle, foreground);", "+\t\tOS.XSetBackground(xDisplay, handle, ~foreground);", "+\t\tOS.XSetFunction(xDisplay, handle, OS.GXand);", "+\t\tOS.XCopyPlane(xDisplay, maskPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY, 1);", "+\t\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "+\t\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "+\t\tOS.XSetForeground(xDisplay, handle, values.foreground);", "+\t\tOS.XSetBackground(xDisplay, handle, values.background);", "+\t\tOS.XSetFunction(xDisplay, handle, values.function);", "+\t}", "-\tif (srcImage.pixmap != colorPixmap) OS.XFreePixmap(xDisplay, colorPixmap);", "-\tif (srcImage.mask != maskPixmap) OS.XFreePixmap(xDisplay, maskPixmap);", "+\tif (colorPixmap != 0 && srcImage.pixmap != colorPixmap) OS.XFreePixmap(xDisplay, colorPixmap);", "+\tif (maskPixmap != 0 && srcImage.mask != maskPixmap) OS.XFreePixmap(xDisplay, maskPixmap);"]}], "num": 453}
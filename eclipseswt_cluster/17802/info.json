{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36722ba1a4876b8958aa9be6f56b453e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "321ead5383790111ece499c027e02f67", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 13, "signatureBeforeChange": " public Rectangle getBounds(int index)", "signatureAfterChange": " public Rectangle getBounds (int columnIndex)", "diff": ["- */", "-public Rectangle getBounds(int index) {", "-\tcheckWidget();", "-\tTable parent = getParent ();", "+}", "+public Rectangle getBounds (int columnIndex) {", "+\tcheckWidget ();", "-\tRectangle itemBounds;", "-\tRectangle columnBounds;", "-\tRectangle checkboxBounds;", "-\tTableColumn column;", "-\tint itemIndex = parent.indexOf(this);", "-\tint itemHeight = parent.getItemHeight();", "-\tint gridLineWidth = parent.getLinesVisible() ? parent.getGridLineWidth() : 0;", "-\tint itemYPos;", "+\tTableColumn[] columns = parent.columns;", "+\tint columnCount = columns.length;", "+\tint validColumnCount = Math.max (1, columnCount);", "+\tif (!(0 <= columnIndex && columnIndex < validColumnCount)) {", "+\t\treturn new Rectangle (0, 0, 0, 0);", "+\t}", "+\t/*", "+\t * If there are no columns then this is the bounds of the receiver's content.", "+\t */", "+\tif (columnCount == 0) {", "+\t\tint width = getContentWidth (0);", "+\t\treturn new Rectangle (", "+\t\t\tgetContentX (0),", "+\t\t\tparent.getItemY (this),", "+\t\t\twidth,", "+\t\t\tparent.itemHeight - 1);", "+\t}", "-\tif (itemIndex == -1 || index < 0 || index >= parent.internalGetColumnCount()) {", "-\t\titemBounds = new Rectangle(0, 0, 0, 0);", "+\tTableColumn column = columns [columnIndex];", "+\tif (columnIndex == 0) {", "+\t\t/* ", "+\t\t * For column 0 this is bounds from the beginning of the content to the", "+\t\t * end of the column.", "+\t\t */", "+\t\tint x = getContentX (0);", "+\t\tint offset = x - column.getX ();", "+\t\tint width = Math.max (0, column.width - offset);\t\t/* max is for columns with small widths */", "+\t\treturn new Rectangle (x, parent.getItemY (this), width, parent.itemHeight - 1);", "-\telse {", "-\t\tcolumn = parent.internalGetColumn(index);", "-\t\tcolumnBounds = column.getBounds();", "-\t\titemYPos = columnBounds.y + itemHeight * itemIndex;", "-\t\titemBounds = new Rectangle(", "-\t\t\tcolumnBounds.x, itemYPos, ", "-\t\t\tcolumnBounds.width - gridLineWidth, itemHeight - gridLineWidth);", "-\t\tif (index == TableColumn.FIRST) {", "-\t\t\tif (isCheckable() == true) {", "-\t\t\t\tcheckboxBounds = getCheckboxBounds();", "-\t\t\t\titemBounds.x = checkboxBounds.x + checkboxBounds.width + CHECKBOX_PADDING;\t// add checkbox start, width and space behind checkbox", "-\t\t\t\titemBounds.width -= itemBounds.x;", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tint imageIndent = getImageIndentPixel();", "-\t\t\t\titemBounds.x += imageIndent;", "-\t\t\t\titemBounds.width -= imageIndent;", "-\t\t\t}", "-\t\t}", "-\t}", "-\treturn itemBounds;", "+\t/*", "+\t * For columns > 0 this is the bounds of the table cell.", "+\t */", "+\treturn new Rectangle (column.getX (), parent.getItemY (this), column.width, parent.itemHeight - 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49524735c3c546a413478a29b818dac6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 71, "signatureBeforeChange": " public void setFont (Font value)", "signatureAfterChange": " public void setFont(Font font)", "diff": ["-public void setFont (Font value) {", "-\tcheckWidget();", "-\tFont oldFont = getFont();", "-\tsuper.setFont(value);", "-\tFont font = getFont();", "-\tif (font.equals (oldFont)) return;", "-\t\t", "-\tGC gc = new GC(this);", "-\t", "-\t/* recompute the receiver's cached font height and item height values */", "-\tfontHeight = gc.getFontMetrics().getHeight();", "-\titemHeight = Math.max(fontHeight, imageHeight) + 2 * getCellPadding();", "-\tPoint headerSize = header.getSize();", "-\tint newHeaderHeight = Math.max(fontHeight, headerImageHeight) + 2 * getHeaderPadding();", "-\tif (headerSize.y != newHeaderHeight) {", "-\t\theader.setSize(headerSize.x, newHeaderHeight);", "-\t}", "-\t/* ", "-\t * Notify all columns of the font change so that they can recompute", "-\t * their cached string widths.", "-\t */", "-\tfor (int i = 0; i < columns.length; i++) {", "-\t\tcolumns[i].updateFont(gc);", "-\t/* ", "-\t * Notify all items of the font change so that those items that", "-\t * use the receiver's font can recompute their cached string widths.", "-\t */", "-\tfor (int i = 0; i < items.length; i++) {", "-\t\titems[i].updateFont(gc);", "-\t}", "-\t", "-\tgc.dispose();", "-\t", "-\tif (header.isVisible()) header.redraw();", "-\tredraw();", "-}", "+}", "+public void setFont(Font font) {", "+\tcheckWidget();", "+\tVector children = new Vector();", "+\tEnumeration elements;", "+\tAbstractTreeItem item;", "+", "+\tif (font != null && font.equals(getFont()) == true) {", "+\t\treturn;", "+\t}", "+\tsetRedraw(false);\t\t\t\t\t\t\t\t\t// disable redraw because itemChanged() triggers undesired redraw", "+\tresetItemData();\t", "+\tsuper.setFont(font);", "+", "+\t// Call itemChanged for all tree items", "+\telements = getRoot().getChildren().elements();", "+\twhile (elements.hasMoreElements() == true) {", "+\t\tchildren.addElement(elements.nextElement());", "+\t}", "+\t// traverse the tree depth first\t", "+\tint size;", "+\twhile ((size = children.size()) != 0) {", "+\t\titem = (AbstractTreeItem)children.elementAt(size - 1);", "+\t\tchildren.removeElementAt(size - 1);", "+\t\titemChanged(item, 0, getClientArea().width);", "+\t\telements = item.getChildren().elements();", "+\t\twhile (elements.hasMoreElements() == true) {", "+\t\t\tchildren.addElement(elements.nextElement());", "+\t\t}\t\t\t", "+\t}", "+\tsetRedraw(true);\t\t\t\t\t\t\t\t\t// re-enable redraw", "+}"]}], "num": 17802}
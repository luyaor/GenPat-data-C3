{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d4bc24cd199a97f319219bf4d3e49930", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e85014bd8043f064fde6c9789a4478b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "4f4c47acced6715e0f6a76f259372df7c93c0a3e", "commitAfterChange": "61f597f77bae4a8b673ae18f59f40157652eabb4", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  void drawBitmapTransparent(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "signatureAfterChange": "  void drawBitmapTransparent(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "diff": ["-\tint transBlue = 0, transGreen = 0, transRed = 0;", "-\tif (bm.bmBitsPixel <= 8) {", "-\t\tif (isDib) {", "-\t\t\t/* Palette-based DIBSECTION */", "-\t\t\tif (OS.IsWinCE) {", "-\t\t\t\tbyte[] pBits = new byte[1];", "-\t\t\t\tOS.MoveMemory(pBits, bm.bmBits, 1);", "-\t\t\t\tbyte oldValue = pBits[0];\t\t\t", "-\t\t\t\tint mask = (0xFF << (8 - bm.bmBitsPixel)) & 0x00FF;", "-\t\t\t\tpBits[0] = (byte)((srcImage.transparentPixel << (8 - bm.bmBitsPixel)) | (pBits[0] & ~mask));", "-\t\t\t\tOS.MoveMemory(bm.bmBits, pBits, 1);", "-\t\t\t\tint color = OS.GetPixel(srcHdc, 0, 0);", "-          \t\tpBits[0] = oldValue;", "-           \t\tOS.MoveMemory(bm.bmBits, pBits, 1);\t\t\t\t", "-\t\t\t\ttransBlue = (color & 0xFF0000) >> 16;", "-\t\t\t\ttransGreen = (color & 0xFF00) >> 8;", "-\t\t\t\ttransRed = color & 0xFF;\t\t\t\t", "-\t\t\t} else {", "-\t\t\t\tint maxColors = 1 << bm.bmBitsPixel;", "-\t\t\t\tbyte[] oldColors = new byte[maxColors * 4];", "-\t\t\t\tOS.GetDIBColorTable(srcHdc, 0, maxColors, oldColors);", "-\t\t\t\tint offset = srcImage.transparentPixel * 4;\t\t\t\t", "-\t\t\t\tboolean fixPalette = false;", "-\t\t\t\tfor (int i = 0; i < oldColors.length; i += 4) {", "-\t\t\t\t\tif (i != offset) {", "-\t\t\t\t\t\tif (oldColors[offset] == oldColors[i] && oldColors[offset+1] == oldColors[i+1] && oldColors[offset+2] == oldColors[i+2]) {", "-\t\t\t\t\t\t\tfixPalette = true;", "-\t\t\t\t\t\t\tbreak;", "+\tint transparentColor = srcImage.transparentColor;", "+\tif (transparentColor == -1) {", "+\t\tint transBlue = 0, transGreen = 0, transRed = 0;\t\t", "+\t\tboolean fixPalette = false;", "+\t\tif (bm.bmBitsPixel <= 8) {", "+\t\t\tif (isDib) {", "+\t\t\t\t/* Palette-based DIBSECTION */", "+\t\t\t\tif (OS.IsWinCE) {", "+\t\t\t\t\tbyte[] pBits = new byte[1];", "+\t\t\t\t\tOS.MoveMemory(pBits, bm.bmBits, 1);", "+\t\t\t\t\tbyte oldValue = pBits[0];\t\t\t", "+\t\t\t\t\tint mask = (0xFF << (8 - bm.bmBitsPixel)) & 0x00FF;", "+\t\t\t\t\tpBits[0] = (byte)((srcImage.transparentPixel << (8 - bm.bmBitsPixel)) | (pBits[0] & ~mask));", "+\t\t\t\t\tOS.MoveMemory(bm.bmBits, pBits, 1);", "+\t\t\t\t\tint color = OS.GetPixel(srcHdc, 0, 0);", "+\t          \t\tpBits[0] = oldValue;", "+\t           \t\tOS.MoveMemory(bm.bmBits, pBits, 1);\t\t\t\t", "+\t\t\t\t\ttransBlue = (color & 0xFF0000) >> 16;", "+\t\t\t\t\ttransGreen = (color & 0xFF00) >> 8;", "+\t\t\t\t\ttransRed = color & 0xFF;\t\t\t\t", "+\t\t\t\t} else {", "+\t\t\t\t\tint maxColors = 1 << bm.bmBitsPixel;", "+\t\t\t\t\tbyte[] oldColors = new byte[maxColors * 4];", "+\t\t\t\t\tOS.GetDIBColorTable(srcHdc, 0, maxColors, oldColors);", "+\t\t\t\t\tint offset = srcImage.transparentPixel * 4;\t\t", "+\t\t\t\t\tfor (int i = 0; i < oldColors.length; i += 4) {", "+\t\t\t\t\t\tif (i != offset) {", "+\t\t\t\t\t\t\tif (oldColors[offset] == oldColors[i] && oldColors[offset+1] == oldColors[i+1] && oldColors[offset+2] == oldColors[i+2]) {", "+\t\t\t\t\t\t\t\tfixPalette = true;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\tif (fixPalette) {", "+\t\t\t\t\t\tbyte[] newColors = new byte[oldColors.length];", "+\t\t\t\t\t\ttransRed = transGreen = transBlue = 0xff;", "+\t\t\t\t\t\tnewColors[offset] = (byte)transBlue;", "+\t\t\t\t\t\tnewColors[offset+1] = (byte)transGreen;", "+\t\t\t\t\t\tnewColors[offset+2] = (byte)transRed;", "+\t\t\t\t\t\tOS.SetDIBColorTable(srcHdc, 0, maxColors, newColors);", "+\t\t\t\t\t\toriginalColors = oldColors;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\ttransBlue = oldColors[offset] & 0xFF;", "+\t\t\t\t\t\ttransGreen = oldColors[offset+1] & 0xFF;", "+\t\t\t\t\t\ttransRed = oldColors[offset+2] & 0xFF;", "+\t\t\t\t\t}", "-\t\t\t\tif (fixPalette) {", "-\t\t\t\t\tbyte[] newColors = new byte[oldColors.length];", "-\t\t\t\t\ttransRed = transGreen = transBlue = 0xff;", "-\t\t\t\t\tnewColors[offset] = (byte)transBlue;", "-\t\t\t\t\tnewColors[offset+1] = (byte)transGreen;", "-\t\t\t\t\tnewColors[offset+2] = (byte)transRed;", "-\t\t\t\t\tOS.SetDIBColorTable(srcHdc, 0, maxColors, newColors);", "-\t\t\t\t\toriginalColors = oldColors;", "-\t\t\t\t} else {", "-\t\t\t\t\ttransBlue = oldColors[offset] & 0xFF;", "-\t\t\t\t\ttransGreen = oldColors[offset+1] & 0xFF;", "-\t\t\t\t\ttransRed = oldColors[offset+2] & 0xFF;", "-\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t/* Palette-based bitmap */", "+\t\t\t\tint numColors = 1 << bm.bmBitsPixel;", "+\t\t\t\t/* Set the few fields necessary to get the RGB data out */", "+\t\t\t\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER();", "+\t\t\t\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;", "+\t\t\t\tbmiHeader.biPlanes = bm.bmPlanes;", "+\t\t\t\tbmiHeader.biBitCount = bm.bmBitsPixel;", "+\t\t\t\tbyte[] bmi = new byte[BITMAPINFOHEADER.sizeof + numColors * 4];", "+\t\t\t\tOS.MoveMemory(bmi, bmiHeader, BITMAPINFOHEADER.sizeof);", "+\t\t\t\tif (OS.IsWinCE) SWT.error(SWT.ERROR_NOT_IMPLEMENTED);", "+\t\t\t\tOS.GetDIBits(srcHdc, srcImage.handle, 0, 0, 0, bmi, OS.DIB_RGB_COLORS);", "+\t\t\t\tint offset = BITMAPINFOHEADER.sizeof + 4 * srcImage.transparentPixel;", "+\t\t\t\ttransRed = bmi[offset + 2] & 0xFF;", "+\t\t\t\ttransGreen = bmi[offset + 1] & 0xFF;", "+\t\t\t\ttransBlue = bmi[offset] & 0xFF;", "-\t\t\t/* Palette-based bitmap */", "-\t\t\tint numColors = 1 << bm.bmBitsPixel;", "-\t\t\t/* Set the few fields necessary to get the RGB data out */", "-\t\t\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER();", "-\t\t\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;", "-\t\t\tbmiHeader.biPlanes = bm.bmPlanes;", "-\t\t\tbmiHeader.biBitCount = bm.bmBitsPixel;", "-\t\t\tbyte[] bmi = new byte[BITMAPINFOHEADER.sizeof + numColors * 4];", "-\t\t\tOS.MoveMemory(bmi, bmiHeader, BITMAPINFOHEADER.sizeof);", "-\t\t\tif (OS.IsWinCE) SWT.error(SWT.ERROR_NOT_IMPLEMENTED);", "-\t\t\tOS.GetDIBits(srcHdc, srcImage.handle, 0, 0, 0, bmi, OS.DIB_RGB_COLORS);", "-\t\t\tint offset = BITMAPINFOHEADER.sizeof + 4 * srcImage.transparentPixel;", "-\t\t\ttransRed = bmi[offset + 2] & 0xFF;", "-\t\t\ttransGreen = bmi[offset + 1] & 0xFF;", "-\t\t\ttransBlue = bmi[offset] & 0xFF;", "+\t\t\t/* Direct color image */", "+\t\t\tint pixel = srcImage.transparentPixel;", "+\t\t\tswitch (bm.bmBitsPixel) {", "+\t\t\t\tcase 16:", "+\t\t\t\t\ttransBlue = (pixel & 0x1F) << 3;", "+\t\t\t\t\ttransGreen = (pixel & 0x3E0) >> 2;", "+\t\t\t\t\ttransRed = (pixel & 0x7C00) >> 7;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 24:", "+\t\t\t\t\ttransBlue = (pixel & 0xFF0000) >> 16;", "+\t\t\t\t\ttransGreen = (pixel & 0xFF00) >> 8;", "+\t\t\t\t\ttransRed = pixel & 0xFF;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 32:", "+\t\t\t\t\ttransBlue = (pixel & 0xFF000000) >>> 24;", "+\t\t\t\t\ttransGreen = (pixel & 0xFF0000) >> 16;", "+\t\t\t\t\ttransRed = (pixel & 0xFF00) >> 8;", "+\t\t\t\t\tbreak;", "+\t\t\t}", "-\t} else {", "-\t\t/* Direct color image */", "-\t\tint pixel = srcImage.transparentPixel;", "-\t\tswitch (bm.bmBitsPixel) {", "-\t\t\tcase 16:", "-\t\t\t\ttransBlue = (pixel & 0x1F) << 3;", "-\t\t\t\ttransGreen = (pixel & 0x3E0) >> 2;", "-\t\t\t\ttransRed = (pixel & 0x7C00) >> 7;", "-\t\t\t\tbreak;", "-\t\t\tcase 24:", "-\t\t\t\ttransBlue = (pixel & 0xFF0000) >> 16;", "-\t\t\t\ttransGreen = (pixel & 0xFF00) >> 8;", "-\t\t\t\ttransRed = pixel & 0xFF;", "-\t\t\t\tbreak;", "-\t\t\tcase 32:", "-\t\t\t\ttransBlue = (pixel & 0xFF000000) >>> 24;", "-\t\t\t\ttransGreen = (pixel & 0xFF0000) >> 16;", "-\t\t\t\ttransRed = (pixel & 0xFF00) >> 8;", "-\t\t\t\tbreak;", "-\t\t}", "+\t\ttransparentColor = transBlue << 16 | transGreen << 8 | transRed;", "+\t\tif (!fixPalette) srcImage.transparentColor = transparentColor;", "-\tint transparentColor = transBlue << 16 | transGreen << 8 | transRed;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc40e74810f68bc5c3350d64806ed307", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "69fe255a91d281ad913c54b0bad5a3812ad465cb", "commitAfterChange": "aebd0142bcef6136a18a211fc092cba38791460d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  int createAlphaFromMask (Image image)", "signatureAfterChange": "  int createAlphaFromMask (int hBitmap, int alpha, byte [] alphaData, int transparentPixel)", "diff": ["-int createAlphaFromMask (Image image) {", "-\tif (OS.COMCTL32_MAJOR < 6) return image.handle;", "-\tImageData data = image.getImageData ();", "-\tint alpha = data.alpha;", "-\tbyte [] alphaData = data.alphaData;", "-\tint transparentPixel = data.transparentPixel;", "-\tif (alpha != -1 || alphaData != null || transparentPixel != -1) {", "-\t\tBITMAP bm = new BITMAP ();", "-\t\tOS.GetObject (image.handle, BITMAP.sizeof, bm);", "-\t\tint imgWidth = bm.bmWidth;", "-\t\tint imgHeight = bm.bmHeight;", "-\t\tint hDC = display.internal_new_GC (null);", "-\t\tint srcHdc = OS.CreateCompatibleDC (hDC);", "-\t\tint oldSrcBitmap = OS.SelectObject (srcHdc, image.handle);", "-\t\tint memHdc = OS.CreateCompatibleDC (hDC);\t\t", "-\t\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER ();", "-\t\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;", "-\t\tbmiHeader.biWidth = imgWidth;", "-\t\tbmiHeader.biHeight = -imgHeight;", "-\t\tbmiHeader.biPlanes = 1;", "-\t\tbmiHeader.biBitCount = (short)32;", "-\t\tbmiHeader.biCompression = OS.BI_RGB;", "-\t\tbyte []\tbmi = new byte [BITMAPINFOHEADER.sizeof];", "-\t\tOS.MoveMemory (bmi, bmiHeader, BITMAPINFOHEADER.sizeof);", "-\t\tint [] pBits = new int [1];", "-\t\tint memDib = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "-\t\tif (memDib == 0) SWT.error (SWT.ERROR_NO_HANDLES);\t\t", "-\t\tint oldMemBitmap = OS.SelectObject (memHdc, memDib);", "-\t\tBITMAP dibBM = new BITMAP ();", "-\t\tOS.GetObject (memDib, BITMAP.sizeof, dibBM);", "-\t\tint sizeInBytes = dibBM.bmWidthBytes * dibBM.bmHeight;", "-\t \tOS.BitBlt (memHdc, 0, 0, imgWidth, imgHeight, srcHdc, 0, 0, OS.SRCCOPY);", "-\t \tbyte red = 0, green = 0, blue = 0;", "-\t \tif (transparentPixel != -1) {", "-\t\t\tif (bm.bmBitsPixel <= 8)  {", "-\t\t\t\tbyte [] color = new byte [4];", "-\t\t\t\tOS.GetDIBColorTable (srcHdc, transparentPixel, 1, color);", "-\t\t\t\tblue = color [0];", "-\t\t\t\tgreen = color [1];", "-\t\t\t\tred = color [2];", "-\t\t\t} else {", "-\t\t\t\tswitch (bm.bmBitsPixel) {", "-\t\t\t\t\tcase 16:", "-\t\t\t\t\t\tblue = (byte)((transparentPixel & 0x1F) << 3);", "-\t\t\t\t\t\tgreen = (byte)((transparentPixel & 0x3E0) >> 2);", "-\t\t\t\t\t\tred = (byte)((transparentPixel & 0x7C00) >> 7);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 24:", "-\t\t\t\t\t\tblue = (byte)((transparentPixel & 0xFF0000) >> 16);", "-\t\t\t\t\t\tgreen = (byte)((transparentPixel & 0xFF00) >> 8);", "-\t\t\t\t\t\tred = (byte)(transparentPixel & 0xFF);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 32:", "-\t\t\t\t\t\tblue = (byte)((transparentPixel & 0xFF000000) >>> 24);", "-\t\t\t\t\t\tgreen = (byte)((transparentPixel & 0xFF0000) >> 16);", "-\t\t\t\t\t\tred = (byte)((transparentPixel & 0xFF00) >> 8);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t \t}", "-\t\tOS.SelectObject (srcHdc, oldSrcBitmap);", "-\t\tOS.SelectObject (memHdc, oldMemBitmap);", "-\t\tOS.DeleteObject (srcHdc);", "-\t\tOS.DeleteObject (memHdc);", "-\t\tdisplay.internal_dispose_GC (hDC, null);", "-\t\t", "-\t \tbyte [] srcData = new byte [sizeInBytes];", "-\t\tOS.MoveMemory (srcData, pBits [0], sizeInBytes);", "-\t\tif (alpha != -1) {", "-\t\t\tfor (int y = 0, dp = 0; y < imgHeight; ++y) {", "-\t\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "-\t\t\t\t\tsrcData [dp + 3] = (byte)alpha;", "-\t\t\t\t\tdp += 4;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else if (alphaData != null) {", "-\t\t\tfor (int y = 0, dp = 0, ap = 0; y < imgHeight; ++y) {", "-\t\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "-\t\t\t\t\tsrcData [dp + 3] = alphaData [ap++];", "-\t\t\t\t\tdp += 4;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else if (transparentPixel != -1) {", "-\t\t\tfor (int y = 0, dp = 0; y < imgHeight; ++y) {", "-\t\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "-\t\t\t\t\tif (srcData [dp] == blue && srcData [dp + 1] == green && srcData [dp + 2] == red) {", "-\t\t\t\t\t\tsrcData [dp + 3] = (byte)0;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tsrcData [dp + 3] = (byte)0xFF;", "-\t\t\t\t\t}", "-\t\t\t\t\tdp += 4;", "-\t\t\t\t}", "+int createAlphaFromMask (int hBitmap, int alpha, byte [] alphaData, int transparentPixel) {", "+\tBITMAP bm = new BITMAP ();", "+\tOS.GetObject (hBitmap, BITMAP.sizeof, bm);", "+\tint imgWidth = bm.bmWidth;", "+\tint imgHeight = bm.bmHeight;", "+\tint hDC = OS.GetDC (0);", "+\tint srcHdc = OS.CreateCompatibleDC (hDC);", "+\tint oldSrcBitmap = OS.SelectObject (srcHdc, hBitmap);", "+\tint memHdc = OS.CreateCompatibleDC (hDC);\t\t", "+\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER ();", "+\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;", "+\tbmiHeader.biWidth = imgWidth;", "+\tbmiHeader.biHeight = -imgHeight;", "+\tbmiHeader.biPlanes = 1;", "+\tbmiHeader.biBitCount = (short)32;", "+\tbmiHeader.biCompression = OS.BI_RGB;", "+\tbyte []\tbmi = new byte [BITMAPINFOHEADER.sizeof];", "+\tOS.MoveMemory (bmi, bmiHeader, BITMAPINFOHEADER.sizeof);", "+\tint [] pBits = new int [1];", "+\tint memDib = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "+\tif (memDib == 0) SWT.error (SWT.ERROR_NO_HANDLES);\t\t", "+\tint oldMemBitmap = OS.SelectObject (memHdc, memDib);", "+\tBITMAP dibBM = new BITMAP ();", "+\tOS.GetObject (memDib, BITMAP.sizeof, dibBM);", "+\tint sizeInBytes = dibBM.bmWidthBytes * dibBM.bmHeight;", "+ \tOS.BitBlt (memHdc, 0, 0, imgWidth, imgHeight, srcHdc, 0, 0, OS.SRCCOPY);", "+ \tbyte red = 0, green = 0, blue = 0;", "+ \tif (transparentPixel != -1) {", "+\t\tif (bm.bmBitsPixel <= 8)  {", "+\t\t\tbyte [] color = new byte [4];", "+\t\t\tOS.GetDIBColorTable (srcHdc, transparentPixel, 1, color);", "+\t\t\tblue = color [0];", "+\t\t\tgreen = color [1];", "+\t\t\tred = color [2];", "+\t\t} else {", "+\t\t\tswitch (bm.bmBitsPixel) {", "+\t\t\t\tcase 16:", "+\t\t\t\t\tblue = (byte)((transparentPixel & 0x1F) << 3);", "+\t\t\t\t\tgreen = (byte)((transparentPixel & 0x3E0) >> 2);", "+\t\t\t\t\tred = (byte)((transparentPixel & 0x7C00) >> 7);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 24:", "+\t\t\t\t\tblue = (byte)((transparentPixel & 0xFF0000) >> 16);", "+\t\t\t\t\tgreen = (byte)((transparentPixel & 0xFF00) >> 8);", "+\t\t\t\t\tred = (byte)(transparentPixel & 0xFF);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 32:", "+\t\t\t\t\tblue = (byte)((transparentPixel & 0xFF000000) >>> 24);", "+\t\t\t\t\tgreen = (byte)((transparentPixel & 0xFF0000) >> 16);", "+\t\t\t\t\tred = (byte)((transparentPixel & 0xFF00) >> 8);", "+\t\t\t\t\tbreak;", "-\t\tOS.MoveMemory (pBits [0], srcData, sizeInBytes);", "-\t\treturn memDib;", "+ \t}", "+\tOS.SelectObject (srcHdc, oldSrcBitmap);", "+\tOS.SelectObject (memHdc, oldMemBitmap);", "+\tOS.DeleteObject (srcHdc);", "+\tOS.DeleteObject (memHdc);", "+\tOS.ReleaseDC (0, hDC);", "+ \tbyte [] srcData = new byte [sizeInBytes];", "+\tOS.MoveMemory (srcData, pBits [0], sizeInBytes);", "+\tif (alpha != -1) {", "+\t\tfor (int y = 0, dp = 0; y < imgHeight; ++y) {", "+\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "+\t\t\t\tsrcData [dp + 3] = (byte)alpha;", "+\t\t\t\tdp += 4;", "+\t\t\t}", "+\t\t}", "+\t} else if (alphaData != null) {", "+\t\tfor (int y = 0, dp = 0, ap = 0; y < imgHeight; ++y) {", "+\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "+\t\t\t\tsrcData [dp + 3] = alphaData [ap++];", "+\t\t\t\tdp += 4;", "+\t\t\t}", "+\t\t}", "+\t} else if (transparentPixel != -1) {", "+\t\tfor (int y = 0, dp = 0; y < imgHeight; ++y) {", "+\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "+\t\t\t\tif (srcData [dp] == blue && srcData [dp + 1] == green && srcData [dp + 2] == red) {", "+\t\t\t\t\tsrcData [dp + 3] = (byte)0;", "+\t\t\t\t} else {", "+\t\t\t\t\tsrcData [dp + 3] = (byte)0xFF;", "+\t\t\t\t}", "+\t\t\t\tdp += 4;", "+\t\t\t}", "+\t\t}", "-\treturn image.handle;", "+\tOS.MoveMemory (pBits [0], srcData, sizeInBytes);", "+\treturn memDib;"]}], "num": 58348}
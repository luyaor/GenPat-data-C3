{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4060c8899a5a3c40113829d200b2aa3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21c5ea21948c5db808e793d378e8e12e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "diff": ["-\tint sizeof = org.eclipse.swt.internal.carbon.Point.sizeof;", "-\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "-\tOS.GetEventParameter (theEvent, OS.kEventParamMouseLocation, OS.typeQDPoint, null, sizeof, null, pt);", "+\tint offsetX, offsetY;", "-\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "-\tint offsetX = pt.h - rect.left;", "-\tint offsetY = pt.v - rect.top;", "-\tOS.GetControlBounds (handle, rect);", "-\toffsetX -= rect.left;", "-\toffsetY -= rect.top;", "-\t", "-\tint port = OS.GetWindowPort (window);", "+\tif (OS.HIVIEW) {", "+\t\tCGPoint pt = new CGPoint ();", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamWindowMouseLocation, OS.typeHIPoint, null, CGPoint.sizeof, null, pt);", "+\t\tOS.HIViewConvertPoint (pt, 0, handle);", "+\t\toffsetX = (int) pt.x;", "+\t\toffsetY = (int) pt.y;\t\t", "+\t} else {", "+\t\tint sizeof = org.eclipse.swt.internal.carbon.Point.sizeof;", "+\t\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseLocation, OS.typeQDPoint, null, sizeof, null, pt);", "+\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\t\toffsetX = pt.h - rect.left;", "+\t\toffsetY = pt.v - rect.top;", "+\t\tOS.GetControlBounds (handle, rect);", "+\t\toffsetX -= rect.left;", "+\t\toffsetY -= rect.top;", "+\t}", "+", "+\tint port = OS.HIVIEW ? -1 : OS.GetWindowPort (window);", "+\tCGPoint pt = new CGPoint ();", "-\t\t\t\tOS.GetControlBounds (parent.handle, rect);", "-\t\t\t\tint x = outPt.h - rect.left;", "-\t\t\t\tint y = outPt.v - rect.top;\t\t\t\t", "+\t\t\t\tint x, y;", "+\t\t\t\tif (OS.HIVIEW) {", "+\t\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowStructureRgn, rect);", "+\t\t\t\t\tpt.x = outPt.h - rect.left;", "+\t\t\t\t\tpt.y = outPt.v - rect.top;", "+\t\t\t\t\tOS.HIViewConvertPoint (pt, 0, parent.handle);", "+\t\t\t\t\tx = (int) pt.x;", "+\t\t\t\t\ty = (int) pt.y;", "+\t\t\t\t} else {", "+\t\t\t\t\tOS.GetControlBounds (parent.handle, rect);", "+\t\t\t\t\tx = outPt.h - rect.left;", "+\t\t\t\t\ty = outPt.v - rect.top;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b72568b7bb34f8c002efc88eaf786b2c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tint sizeof = org.eclipse.swt.internal.carbon.Point.sizeof;", "-\t\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "-\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseLocation, OS.typeQDPoint, null, sizeof, null, pt);", "-\t\tRect rect = new Rect ();", "-\t\tint window = OS.GetControlOwner (handle);", "-\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "-\t\tint x = pt.h - rect.left;", "-\t\tint y = pt.v - rect.top;", "-\t\tOS.GetControlBounds (handle, rect);", "-\t\tx -= rect.left;", "-\t\ty -= rect.top;", "-\t\tint width = rect.right - rect.left;", "-\t\tif (width - x < 12) {", "-\t\t\tx = rect.left;", "-\t\t\ty = rect.bottom;", "-\t\t\tOS.GetControlBounds (parent.handle, rect);", "+\t\tif (OS.HIVIEW) {", "+\t\t\tCGPoint pt = new CGPoint ();", "+\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamWindowMouseLocation, OS.typeHIPoint, null, CGPoint.sizeof, null, pt);", "+\t\t\tOS.HIViewConvertPoint (pt, 0, parent.handle);", "+\t\t\tint x = (int) pt.x;", "+\t\t\tint y = (int) pt.y;", "+\t\t\tCGRect rect = new CGRect ();", "+\t\t\tOS.HIViewGetBounds (handle, rect);", "+\t\t\tif (width - x < 12) {", "+\t\t\t\tEvent event = new Event ();", "+\t\t\t\tevent.detail = SWT.ARROW;", "+\t\t\t\tevent.x = x;", "+\t\t\t\tevent.y = y;", "+\t\t\t\tpostEvent (SWT.Selection, event);\t\t\t\t", "+\t\t\t}", "+\t\t} else {", "+\t\t\tint sizeof = org.eclipse.swt.internal.carbon.Point.sizeof;", "+\t\t\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseLocation, OS.typeQDPoint, null, sizeof, null, pt);", "+\t\t\tRect rect = new Rect ();", "+\t\t\tint window = OS.GetControlOwner (handle);", "+\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\t\t\tint x = pt.h - rect.left;", "+\t\t\tint y = pt.v - rect.top;", "+\t\t\tOS.GetControlBounds (handle, rect);", "-\t\t\tEvent event = new Event ();", "-\t\t\tevent.detail = SWT.ARROW;", "-\t\t\tevent.x = x;", "-\t\t\tevent.y = y;", "-\t\t\tpostEvent (SWT.Selection, event);", "+\t\t\tint width = rect.right - rect.left;", "+\t\t\tif (width - x < 12) {", "+\t\t\t\tx = rect.left;", "+\t\t\t\ty = rect.bottom;", "+\t\t\t\tOS.GetControlBounds (parent.handle, rect);", "+\t\t\t\tx -= rect.left;", "+\t\t\t\ty -= rect.top;", "+\t\t\t\tEvent event = new Event ();", "+\t\t\t\tevent.detail = SWT.ARROW;", "+\t\t\t\tevent.x = x;", "+\t\t\t\tevent.y = y;", "+\t\t\t\tpostEvent (SWT.Selection, event);", "+\t\t\t}", "-\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "-\t\tint x = outPt.h - rect.left;", "-\t\tint y = outPt.v - rect.top;", "-\t\tOS.GetControlBounds (parent.handle, rect);", "+\t\tint x, y;", "+\t\tif (OS.HIVIEW) {", "+\t\t\tCGPoint pt = new CGPoint ();", "+\t\t\tpt.x = outPt.h;", "+\t\t\tpt.y = outPt.v;", "+\t\t\tOS.HIViewConvertPoint (pt, 0, parent.handle);", "+\t\t\tx = (int) pt.x;", "+\t\t\ty = (int) pt.y;", "+\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowStructureRgn, rect);", "+\t\t} else {", "+\t\t\tOS.GetControlBounds (parent.handle, rect);", "+\t\t\tx = outPt.h - rect.left;", "+\t\t\ty = outPt.v - rect.top;", "+\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0bb4a17961d3079ebf92187218b7693", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "efd2b19e6f0f74c27009a05b4ddce186552ea417", "commitAfterChange": "7964cbf3b02c1c8a872cf670d05fdba45e9e894e", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 96, "signatureBeforeChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "diff": ["-\tshort [] button = new short [1];", "-\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button);", "-\tint result = sendMouseEvent (SWT.MouseDown, button [0], display.clickCount, 0, false, theEvent) ? OS.eventNotHandledErr : OS.noErr;", "-\tif (isDisposed ()) return OS.noErr;", "-\tif (display.clickCount == 2) {", "-\t\tresult = sendMouseEvent (SWT.MouseDoubleClick, button [0], display.clickCount, 0, false, theEvent) ? OS.eventNotHandledErr : OS.noErr;", "+\tint x = -1, y = -1;", "+\tboolean dragging = false;", "+\tboolean [] consume = new boolean [1];", "+\tif ((state & DRAG_DETECT) != 0 && hooks (SWT.DragDetect)) {", "+\t\tif (OS.HIVIEW) {", "+\t\t\tCGPoint pt = new CGPoint ();", "+\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamWindowMouseLocation, OS.typeHIPoint, null, CGPoint.sizeof, null, pt);", "+\t\t\tOS.HIViewConvertPoint (pt, 0, handle);", "+\t\t\tx = (int) pt.x;", "+\t\t\ty = (int) pt.y;", "+\t\t} else {", "+\t\t\tint sizeof = org.eclipse.swt.internal.carbon.Point.sizeof;", "+\t\t\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseLocation, OS.typeQDPoint, null, sizeof, null, pt);", "+\t\t\tRect rect = new Rect ();", "+\t\t\tint window = OS.GetControlOwner (handle);", "+\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\t\t\tx = pt.h - rect.left;", "+\t\t\ty = pt.v - rect.top;", "+\t\t\tOS.GetControlBounds (handle, rect);", "+\t\t\tx -= rect.left;", "+\t\t\ty -= rect.top;", "+\t\t}", "+\t\tif (dragDetect (x, y, true, consume)) dragging = true;", "-\tif (hooks (SWT.DragDetect)) {", "-\t\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "-\t\tint sizeof = org.eclipse.swt.internal.carbon.Point.sizeof;", "-\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseLocation, OS.typeQDPoint, null, sizeof, null, pt);", "-\t\tdisplay.dragMouseStart = pt;", "-\t\tdisplay.dragging = false;", "+\tshort [] button = new short [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button);", "+\tif (!sendMouseEvent (SWT.MouseDown, button [0], display.clickCount, 0, false, theEvent)) consume [0] = true;", "+\tif (isDisposed ()) return OS.noErr;", "+\tif (display.clickCount == 2) {", "+\t\tif (!sendMouseEvent (SWT.MouseDoubleClick, button [0], display.clickCount, 0, false, theEvent)) consume [0] = true;", "+\t\tif (isDisposed ()) return OS.noErr;", "+\t}", "+\tif (dragging) {", "+\t\tsendDragEvent (x, y);", "+\t\tif (isDisposed ()) return OS.noErr;", "-\treturn result;", "+\treturn consume [0] ? OS.noErr : OS.eventNotHandledErr;"]}], "num": 13089}
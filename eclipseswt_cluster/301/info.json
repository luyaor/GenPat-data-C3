{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "16395ca9070b231bce6da1d2450bd168", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c256d56eb8fe60b2112378fc2e329489", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "a06ac5b2fbfe2a36939378719c1e2bf8050edcfb", "commitAfterChange": "a9de84c73dac1498f19dd852bb2b6d33bfa5fdba", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "diff": ["-\t\t\t\tif ((style & SWT.NO_BACKGROUND) != 0) {", "-\t\t\t\t\t/* This code is intentionally commented because it may be slow to copy bits from the screen */", "-\t\t\t\t\t//paintGC.copyArea (image, ps.left, ps.top);", "-\t\t\t\t} else {", "-\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\tOS.SetRect (rect, 0, 0, width, height);", "-\t\t\t\t\tdrawBackground (gc.handle, rect);", "-\t\t\t\t}", "+\t\t\t\tif ((style & SWT.NO_BACKGROUND) != 0) {", "+\t\t\t\t\t/* This code is intentionally commented because it may be slow to copy bits from the screen */", "+\t\t\t\t\t//paintGC.copyArea (image, ps.left, ps.top);", "+\t\t\t\t} else {", "+\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\tOS.SetRect (rect, ps.left, ps.top, ps.right, ps.bottom);", "+\t\t\t\t\tdrawBackground (gc.handle, rect);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "494819c81e2c34e349effe9f54eddeee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/Variant.java", "commitBeforeChange": "ef390566d4164ae7a1f970e53f45de12a5265cf6", "commitAfterChange": "ee543bcb83fee603dbf808a397bfdb1dd9d1075a", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " void getData(int pData)", "signatureAfterChange": " void getData(int pData)", "diff": ["-void getData(int pData){", "+void getData(int /*long*/ pData){", "+\t\t//TODO - use VARIANT structure", "-\t\tCOM.MoveMemory(pData + 8, new int[]{byRefPtr}, 4);", "+\t\tCOM.MoveMemory(pData + 8, new int /*long*/[]{byRefPtr}, OS.PTR_SIZEOF);", "-\t\t\tCOM.MoveMemory(pData + 8, new int[]{(booleanData) ? COM.VARIANT_TRUE : COM.VARIANT_FALSE}, 2);", "+\t\t\tCOM.MoveMemory(pData + 8, new short[]{(booleanData) ? COM.VARIANT_TRUE : COM.VARIANT_FALSE}, 2);", "-\t\t\tCOM.MoveMemory(pData + 8, new int[]{dispatchData.getAddress()}, 4);", "+\t\t\tCOM.MoveMemory(pData + 8, new int /*long*/[]{dispatchData.getAddress()}, OS.PTR_SIZEOF);", "-\t\t\tCOM.MoveMemory(pData + 8, new int[]{unknownData.getAddress()}, 4);", "+\t\t\tCOM.MoveMemory(pData + 8, new int /*long*/[]{unknownData.getAddress()}, OS.PTR_SIZEOF);", "-\t\t\tint ptr = COM.SysAllocString(data);", "-\t\t\tCOM.MoveMemory(pData + 8, new int[] {ptr}, 4);", "+\t\t\tint /*long*/ ptr = COM.SysAllocString(data);", "+\t\t\tCOM.MoveMemory(pData + 8, new int /*long*/[] {ptr}, OS.PTR_SIZEOF);"]}], "num": 301}
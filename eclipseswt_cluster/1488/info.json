{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "faf1fe335669951982e41c0f2b7b59ec", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5866b7c9e5d632300b87f1a23908a38b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "fe19c6b899c9d8b993e07c5615867efe06d6b5e9", "commitAfterChange": "334d7080489139dc1a4126aa22dc5abc3a92b653", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "\r void initializeList ()", "signatureAfterChange": "\r void initializeList ()", "diff": ["-\tif (argList [7] == OS.XmREVERSED_GROUND_COLORS) {\r", "-\t\tlistSelect = listForeground;\r", "-\t} else {\r", "-\t\tif (argList [7] == OS.XmHIGHLIGHT_COLOR) {\r", "+\tswitch (argList [7]) {\r", "+\t\tcase OS.XmDEFAULT_SELECT_COLOR:\r", "+\t\t\tlistSelect = listForeground;\r", "+\t\t\tbreak;\r", "+\t\tcase OS.XmREVERSED_GROUND_COLORS:\r", "+\t\t\tlistSelect = listForeground;\r", "+\t\t\tbreak;\r", "+\t\tcase OS.XmHIGHLIGHT_COLOR:\r", "-\t\t} else {\r", "-\t\t\tlistSelect = argList[7];\t// the middle color to use\r", "-\t\t}\r", "+\t\t\tbreak;\r", "+\t\tdefault:\r", "+\t\t\tlistSelect = argList [7];\t// the middle color to use\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdcdccbc1cb6d54a543b7c13ac872136", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 77, "signatureBeforeChange": "\r int processSetFocus (int callData)", "signatureAfterChange": "\r int processSetFocus (int callData)", "diff": ["-\t/* Ignore focus changes caused by grabbing and ungrabing. */\r", "+\t/* Ignore focus changes caused by grabbing and ungrabing */\r", "-\t/* Only process focus callbacks between windows. */\r", "+\t/* Only process focus callbacks between windows */\r", "-\t/* Process the focus change for the widget. */\r", "-\tif (xEvent.type == OS.FocusIn) {\r", "-\t\tint result = processFocusIn ();\r", "-\t\tint index = 0;\r", "-\t\tShell shell = getShell ();\r", "-\t\tControl [] focusIn = getPath ();\r", "-\t\tControl lastFocus = shell.lastFocus;\r", "-\t\tif (lastFocus != null) {\r", "-\t\t\tif (!lastFocus.isDisposed ()) {\r", "-\t\t\t\tControl [] focusOut = lastFocus.getPath ();\r", "-\t\t\t\tint length = Math.min (focusIn.length, focusOut.length);\r", "-\t\t\t\twhile (index < length) {\r", "-\t\t\t\t\tif (focusIn [index] != focusOut [index]) break;\r", "-\t\t\t\t\tindex++;\r", "+\t/* Process the focus change for the widget */\r", "+\tswitch (xEvent.type) {\r", "+\t\tcase OS.FocusIn: {\r", "+\t\t\tprocessFocusIn ();\r", "+\t\t\t// widget could be disposed at this point\r", "+\t\t\tif (handle == 0) return 0;\r", "+\t\t\tint index = 0;\r", "+\t\t\tShell shell = getShell ();\r", "+\t\t\tControl [] focusIn = getPath ();\r", "+\t\t\tControl lastFocus = shell.lastFocus;\r", "+\t\t\tif (lastFocus != null) {\r", "+\t\t\t\tif (!lastFocus.isDisposed ()) {\r", "+\t\t\t\t\tControl [] focusOut = lastFocus.getPath ();\r", "+\t\t\t\t\tint length = Math.min (focusIn.length, focusOut.length);\r", "+\t\t\t\t\twhile (index < length) {\r", "+\t\t\t\t\t\tif (focusIn [index] != focusOut [index]) break;\r", "+\t\t\t\t\t\tindex++;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tfor (int i=focusOut.length-1; i>=index; --i) {\r", "+\t\t\t\t\t\tfocusOut [i].sendEvent (SWT.Deactivate);\r", "+\t\t\t\t\t}\r", "-\t\t\t\tfor (int i=focusOut.length-1; i>=index; --i) {\r", "+\t\t\t\tshell.lastFocus = null;\r", "+\t\t\t}\r", "+\t\t\tfor (int i=focusIn.length-1; i>=index; --i) {\r", "+\t\t\t\tfocusIn [i].sendEvent (SWT.Activate);\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\tcase OS.FocusOut: {\r", "+\t\t\tprocessFocusOut ();\r", "+\t\t\t// widget could be disposed at this point\r", "+\t\t\tif (handle == 0) return 0;\r", "+\t\t\tShell shell = getShell ();\r", "+\t\t\tshell.lastFocus = this;\r", "+\t\t\tDisplay display = getDisplay ();\r", "+\t\t\tControl focusControl = display.getFocusControl ();\r", "+\t\t\tif (focusControl == null || shell != focusControl.getShell ()) {\r", "+\t\t\t\tControl [] focusOut = getPath ();\r", "+\t\t\t\tfor (int i=focusOut.length-1; i>=0; --i) {\r", "+\t\t\t\tshell.lastFocus = null;\r", "-\t\t\tshell.lastFocus = null;\r", "+\t\t\tbreak;\r", "-\t\tfor (int i=focusIn.length-1; i>=index; --i) {\r", "-\t\t\tfocusIn [i].sendEvent (SWT.Activate);\r", "-\t\t}\r", "-\t\treturn result;\r", "-\t}\r", "-\tif (xEvent.type == OS.FocusOut) {\r", "-\t\tint result = processFocusOut ();\r", "-\t\tShell shell = getShell ();\r", "-\t\tshell.lastFocus = this;\r", "-\t\tDisplay display = getDisplay ();\r", "-\t\tControl focusControl = display.getFocusControl ();\r", "-\t\tif (focusControl == null || shell != focusControl.getShell ()) {\r", "-\t\t\tControl [] focusOut = getPath ();\r", "-\t\t\tfor (int i=focusOut.length-1; i>=0; --i) {\r", "-\t\t\t\tfocusOut [i].sendEvent (SWT.Deactivate);\r", "-\t\t\t}\r", "-\t\t\tshell.lastFocus = null;\r", "-\t\t}\r", "-\t\treturn result;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b523ecebfb6d185eb93a88a08181425c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "8536c362cf03324cd7b8eb94c0f8c933e76622fa", "commitAfterChange": "10ae44b5fb35c622bc17801dd2b34cb558f71723", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 80, "signatureBeforeChange": "\r \r boolean sendMouseEvent (int type, int button, int msg, int wParam, int lParam)", "signatureAfterChange": "\r \r boolean sendMouseEvent (int type, int button, int msg, int wParam, int lParam)", "diff": ["-\tevent.time = OS.GetMessageTime ();\r", "-\tif (type == SWT.MouseDown || type == SWT.MouseDoubleClick) {\r", "-\t\tif (button == 1) event.stateMask &= ~SWT.BUTTON1;\r", "-\t\tif (button == 2) event.stateMask &= ~SWT.BUTTON2;\r", "-\t\tif (button == 3) event.stateMask &= ~SWT.BUTTON3;\r", "-\t} else if (type == SWT.MouseUp) {\r", "-\t\tif (button == 1) event.stateMask |= SWT.BUTTON1;\r", "-\t\tif (button == 2) event.stateMask |= SWT.BUTTON2;\r", "-\t\tif (button == 3) event.stateMask |= SWT.BUTTON3;\r", "+\tswitch (type) {\r", "+\t\tcase SWT.MouseDown:\r", "+\t\tcase SWT.MouseDoubleClick:\r", "+\t\t\tif (button == 1) event.stateMask &= ~SWT.BUTTON1;\r", "+\t\t\tif (button == 2) event.stateMask &= ~SWT.BUTTON2;\r", "+\t\t\tif (button == 3) event.stateMask &= ~SWT.BUTTON3;\r", "+\t\t\tbreak;\r", "+\t\tcase SWT.MouseUp:\r", "+\t\t\tif (button == 1) event.stateMask |= SWT.BUTTON1;\r", "+\t\t\tif (button == 2) event.stateMask |= SWT.BUTTON2;\r", "+\t\t\tif (button == 3) event.stateMask |= SWT.BUTTON3;\r", "+\t\t\tbreak;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dbf0fc8fa27a8ffdf72a252e213517c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/WebSite.java", "commitBeforeChange": "03e9e6eb9d4ad36ec8f95263229d6fbf1b98311a", "commitAfterChange": "52911904339b8301dfbfd66cbe5eb5d710bce246", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  int TranslateAccelerator(int lpMsg, int pguidCmdGroup, int nCmdID)", "signatureAfterChange": "  int TranslateAccelerator(int lpMsg, int pguidCmdGroup, int nCmdID)", "diff": ["-\t* and can cause a crash in some contexts.  F5 causes a refresh, which is not appropriate", "+\t* and can cause a crash in some contexts.  CTRL-O is being intercepted by IE, but this", "+\t* accelerator should be handled by Eclipse. F5 causes a refresh, which is not appropriate", "-\t* shortcuts by IE when necessary.", "+\t* shortcuts by IE when necessary, and in some cases ensure that Eclipse has an opportunity", "+\t* to handle these accelerators.", "-\tif (msg.message == OS.WM_KEYDOWN && msg.wParam == OS.VK_N && OS.GetKeyState (OS.VK_CONTROL) < 0) {", "-\t\tresult = COM.S_OK;", "-\t} else {", "-\t\tif (msg.message == OS.WM_KEYDOWN && msg.wParam == OS.VK_F5) {", "-\t\t\tOleAutomation auto = new OleAutomation(this);", "-\t\t\tint[] rgdispid = auto.getIDsOfNames(new String[] { \"LocationURL\" }); //$NON-NLS-1$", "-\t\t\tVariant pVarResult = auto.getProperty(rgdispid[0]);", "-\t\t\tauto.dispose();", "-\t\t\tif (pVarResult != null) {", "-\t\t\t\tif (pVarResult.getType() == OLE.VT_BSTR) {", "-\t\t\t\t\tString url = pVarResult.getString();", "-\t\t\t\t\tif (url.equals(IE.ABOUT_BLANK)) result = COM.S_OK;", "+\tif (msg.message == OS.WM_KEYDOWN) {", "+\t\tswitch (msg.wParam) {", "+\t\t\tcase OS.VK_N:", "+\t\t\tcase OS.VK_O:", "+\t\t\t\tif (OS.GetKeyState (OS.VK_CONTROL) < 0) {", "+\t\t\t\t\tgetParent().setData(CONSUME_KEY, \"true\"); //$NON-NLS-1$", "+\t\t\t\t\tresult = COM.S_OK;", "-\t\t\t\tpVarResult.dispose();", "-\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase OS.VK_F5:", "+\t\t\t\tOleAutomation auto = new OleAutomation(this);", "+\t\t\t\tint[] rgdispid = auto.getIDsOfNames(new String[] { \"LocationURL\" }); //$NON-NLS-1$", "+\t\t\t\tVariant pVarResult = auto.getProperty(rgdispid[0]);", "+\t\t\t\tauto.dispose();", "+\t\t\t\tif (pVarResult != null) {", "+\t\t\t\t\tif (pVarResult.getType() == OLE.VT_BSTR) {", "+\t\t\t\t\t\tString url = pVarResult.getString();", "+\t\t\t\t\t\tif (url.equals(IE.ABOUT_BLANK)) result = COM.S_OK;", "+\t\t\t\t\t}", "+\t\t\t\t\tpVarResult.dispose();", "+\t\t\t\t}", "+\t\t\t\tbreak;"]}], "num": 1488}
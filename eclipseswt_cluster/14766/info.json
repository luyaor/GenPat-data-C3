{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "848afa4474c6a48ec7eeebf9850d9752", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e81bfa72625b1b37348272ae0ec4b1a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/HelperAppLauncherDialog.java", "commitBeforeChange": "fa9e8850e4ffa67d5a9822f39154f193309ae6c5", "commitAfterChange": "dc3b37dd3939bff381ddf74be1db387c65cc7eb3", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  public int PromptForSaveToFile(int arg0, int arg1, int arg2, int arg3, int arg4)", "signatureAfterChange": "  public int PromptForSaveToFile(int arg0, int arg1, int arg2, int arg3, int arg4)", "diff": ["-\tnsIHelperAppLauncher helperAppLauncher = null;", "+\tboolean hasLauncher = false;", "+", "-\t* Feature in Mozilla.  The nsIHelperAppLauncherDialog interface is not frozen ", "-\t* despite being the only way to download files when embedding Mozilla.  Starting ", "-\t* with Mozilla 1.5, the method PromptForSaveToFile takes an extra argument and ", "-\t* previous arguments are shifted by one position.  The workaround is to provide ", "-\t* an XPCOMObject that fits the newer API.  In all cases the first argument is a ", "-\t* nsISupports reference. In the newer versions, that argument is nsIHelperAppLauncher,", "-\t* a subclass of nsISupports.  The ordering of the arguments is inferred from the ", "-\t* type of the first argument. ", "+\t* The interface for nsIHelperAppLauncherDialog changed as of mozilla 1.5 when an", "+\t* extra argument was added to the PromptForSaveToFile method (this resulted in all", "+\t* subsequent arguments shifting right).  The workaround is to provide an XPCOMObject ", "+\t* that fits the newer API, and to use the first argument's type to infer whether", "+\t* the old or new nsIHelperAppLauncherDialog interface is being used (and by extension", "+\t* the ordering of the arguments).  In mozilla >= 1.5 the first argument is an", "+\t* nsIHelperAppLauncher. ", "+\t/*", "+\t * The interface for nsIHelperAppLauncher changed as of mozilla 1.8, so the first", "+\t * argument must be queried for both the old and new nsIHelperAppLauncher interfaces. ", "+\t */", "-\tint[] result = new int[1];", "-\tint rc = support.QueryInterface(nsIHelperAppLauncher.NS_IHELPERAPPLAUNCHER_IID, result);", "-\tif (rc != XPCOM.NS_OK || result[0] != arg0) { ", "+\tint [] result = new int [1];", "+\tint rc = support.QueryInterface(nsIHelperAppLauncher_1_8.NS_IHELPERAPPLAUNCHER_IID, result);", "+\tboolean usingMozilla18 = rc == 0;", "+\tif (usingMozilla18) {", "+\t\thasLauncher = true;", "+\t\tnsISupports supports = new nsISupports(result[0]);", "+\t\tsupports.Release();", "+\t} else {", "+\t\tresult[0] = 0;", "+\t\trc = support.QueryInterface(nsIHelperAppLauncher.NS_IHELPERAPPLAUNCHER_IID, result);", "+\t\tif (rc == 0) {", "+\t\t\thasLauncher = true;", "+\t\t\tnsISupports supports = new nsISupports(result[0]);", "+\t\t\tsupports.Release();", "+\t\t}", "+\t}", "+\tresult[0] = 0;", "+", "+\tif (hasLauncher) {\t/* >= 1.5 */", "+\t\taDefaultFile = arg2;", "+\t\taSuggestedFileExtension = arg3;", "+\t\t_retval = arg4;", "+\t} else {\t\t\t/* 1.4 */", "-\telse {", "-\t\thelperAppLauncher = new nsIHelperAppLauncher(arg0);", "-\t\taDefaultFile = arg2;", "-\t\taSuggestedFileExtension = arg3;", "-\t\t_retval = arg4;", "-\t}", "-\tresult[0] = 0;", "+", "-\t", "+", "-\t\tif (helperAppLauncher != null) {", "-\t\t\trc = helperAppLauncher.Cancel();", "+\t\tif (hasLauncher) {", "+\t\t\tif (usingMozilla18) {", "+\t\t\t\tnsIHelperAppLauncher_1_8 launcher = new nsIHelperAppLauncher_1_8(arg0);", "+\t\t\t\trc = launcher.Cancel(XPCOM.NS_BINDING_ABORTED);", "+\t\t\t} else {", "+\t\t\t\tnsIHelperAppLauncher launcher = new nsIHelperAppLauncher(arg0);", "+\t\t\t\trc = launcher.Cancel();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fca71f183909bf87a0196a422948f71", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/mozilla/org/eclipse/swt/browser/HelperAppLauncherDialog.java", "commitBeforeChange": "33e28eebdecca667c8eddf0dda11d4395124d824", "commitAfterChange": "b52ca2bdf41a4bba7beb24ac0d20ba09ccb243ce", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  public int PromptForSaveToFile(int arg0, int arg1, int arg2, int arg3, int arg4)", "signatureAfterChange": "  public int PromptForSaveToFile(int arg0, int arg1, int arg2, int arg3, int arg4)", "diff": ["-\tnsIHelperAppLauncher helperAppLauncher = null;", "+\tboolean hasLauncher = false;", "+", "-\t* Feature in Mozilla.  The nsIHelperAppLauncherDialog interface is not frozen ", "-\t* despite being the only way to download files when embedding Mozilla.  Starting ", "-\t* with Mozilla 1.5, the method PromptForSaveToFile takes an extra argument and ", "-\t* previous arguments are shifted by one position.  The workaround is to provide ", "-\t* an XPCOMObject that fits the newer API.  In all cases the first argument is a ", "-\t* nsISupports reference. In the newer versions, that argument is nsIHelperAppLauncher,", "-\t* a subclass of nsISupports.  The ordering of the arguments is inferred from the ", "-\t* type of the first argument. ", "+\t* The interface for nsIHelperAppLauncherDialog changed as of mozilla 1.5 when an", "+\t* extra argument was added to the PromptForSaveToFile method (this resulted in all", "+\t* subsequent arguments shifting right).  The workaround is to provide an XPCOMObject ", "+\t* that fits the newer API, and to use the first argument's type to infer whether", "+\t* the old or new nsIHelperAppLauncherDialog interface is being used (and by extension", "+\t* the ordering of the arguments).  In mozilla >= 1.5 the first argument is an", "+\t* nsIHelperAppLauncher. ", "+\t/*", "+\t * The interface for nsIHelperAppLauncher changed as of mozilla 1.8, so the first", "+\t * argument must be queried for both the old and new nsIHelperAppLauncher interfaces. ", "+\t */", "-\tint rc = support.QueryInterface(nsIHelperAppLauncher.NS_IHELPERAPPLAUNCHER_IID, result);", "-\tif (rc != XPCOM.NS_OK || result[0] != arg0) { ", "+\tint rc = support.QueryInterface(nsIHelperAppLauncher_1_8.NS_IHELPERAPPLAUNCHER_IID, result);", "+\tboolean usingMozilla18 = rc == 0;", "+\tif (usingMozilla18) {", "+\t\thasLauncher = true;", "+\t\tnsISupports supports = new nsISupports(result[0]);", "+\t\tsupports.Release();", "+\t} else {", "+\t\tresult[0] = 0;", "+\t\trc = support.QueryInterface(nsIHelperAppLauncher.NS_IHELPERAPPLAUNCHER_IID, result);", "+\t\tif (rc == 0) {", "+\t\t\thasLauncher = true;", "+\t\t\tnsISupports supports = new nsISupports(result[0]);", "+\t\t\tsupports.Release();", "+\t\t}", "+\t}", "+\tresult[0] = 0;", "+", "+\tif (hasLauncher) {\t/* >= 1.5 */", "+\t\taDefaultFile = arg2;", "+\t\taSuggestedFileExtension = arg3;", "+\t\t_retval = arg4;", "+\t} else {\t\t\t/* 1.4 */", "-\telse {", "-\t\thelperAppLauncher = new nsIHelperAppLauncher(arg0);", "-\t\taDefaultFile = arg2;", "-\t\taSuggestedFileExtension = arg3;", "-\t\t_retval = arg4;", "-\t}", "-\tresult[0] = 0;", "+", "-\t", "+", "-\t\tif (helperAppLauncher != null) {", "-\t\t\trc = helperAppLauncher.Cancel();", "+\t\tif (hasLauncher) {", "+\t\t\tif (usingMozilla18) {", "+\t\t\t\tnsIHelperAppLauncher_1_8 launcher = new nsIHelperAppLauncher_1_8(arg0);", "+\t\t\t\trc = launcher.Cancel(XPCOM.NS_BINDING_ABORTED);", "+\t\t\t} else {", "+\t\t\t\tnsIHelperAppLauncher launcher = new nsIHelperAppLauncher(arg0);", "+\t\t\t\trc = launcher.Cancel();", "+\t\t\t}"]}], "num": 14766}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c6a11d624e6d62091f415b2a12078304", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6575998f53ee68635a06584568f39d56", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "2c8a13d0df1694740c0af6220e23682b3ddd10de", "commitAfterChange": "056762a1d7c74e75bfac132d1e756819b6f3b39e", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 22, "signatureBeforeChange": "  boolean navigate(String url, boolean silent)", "signatureAfterChange": "  boolean navigate(String url, String postData, String headers[], boolean silent)", "diff": ["+", "+boolean navigate(String url, String postData, String headers[], boolean silent) {", "+\tnavigate = true;", "+\tint count = 1;", "+\tif (postData != null) count++;", "+\tif (headers != null) count++;", "+\tVariant[] rgvarg = new Variant[count];", "+\tint[] rgdispidNamedArgs = new int[count];", "+\tint[] rgdispid = auto.getIDsOfNames(new String[] { \"Navigate\", \"URL\", \"PostData\", \"Headers\" }); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$", "+\tint index = 0;", "+\trgvarg[index] = new Variant(url);", "+\trgdispidNamedArgs[index++] = rgdispid[1];", "+\tif (postData != null) {", "+\t\trgvarg[index] = createSafeArray(postData);", "+\t\trgdispidNamedArgs[index++] = rgdispid[2];", "+\t}", "+\tif (headers != null) {", "+\t\tStringBuffer buffer = new StringBuffer();", "+\t\tfor (int i = 0; i < headers.length; i++) {", "+\t\t\tString current = headers[i];", "+\t\t\tint sep = current.indexOf(':');", "+\t\t\tif (sep != -1) {", "+\t\t\t\tString key = current.substring(0, sep).trim();", "+\t\t\t\tString value = current.substring(sep + 1).trim();", "+\t\t\t\tif (key.length() > 0 && value.length() > 0) {", "+\t\t\t\t\tbuffer.append(key);", "+\t\t\t\t\tbuffer.append(':');", "+\t\t\t\t\tbuffer.append(value);", "+\t\t\t\t\tbuffer.append(\"\\r\\n\");", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\trgvarg[index] = new Variant(buffer.toString());", "+\t\trgdispidNamedArgs[index++] = rgdispid[3];", "+\t}", "+\tboolean oldValue = false;", "+\tif (silent && !OS.IsWinCE && IsIE7) {", "+\t\tint hResult = OS.CoInternetIsFeatureEnabled(OS.FEATURE_DISABLE_NAVIGATION_SOUNDS, OS.GET_FEATURE_FROM_PROCESS);", "+\t\toldValue = hResult == COM.S_OK;", "+\t\tOS.CoInternetSetFeatureEnabled(OS.FEATURE_DISABLE_NAVIGATION_SOUNDS, OS.SET_FEATURE_ON_PROCESS, true);", "+\t}", "+\tVariant pVarResult = auto.invoke(rgdispid[0], rgvarg, rgdispidNamedArgs);", "+\tif (silent && !OS.IsWinCE && IsIE7) {", "+\t\tOS.CoInternetSetFeatureEnabled(OS.FEATURE_DISABLE_NAVIGATION_SOUNDS, OS.SET_FEATURE_ON_PROCESS, oldValue);", "+\t}", "+\tfor (int i = 0; i < count; i++) {", "+\t\trgvarg[i].dispose();", "+\t}", "+\tif (pVarResult == null) return false;", "+\tboolean result = pVarResult.getType() == OLE.VT_EMPTY;", "+\tpVarResult.dispose();", "+\treturn result;", "-boolean navigate(String url, boolean silent) {", "-\tnavigate = true;", "-\tint[] rgdispid = auto.getIDsOfNames(new String[] { \"Navigate\", \"URL\" }); //$NON-NLS-1$ //$NON-NLS-2$", "-\tVariant[] rgvarg = new Variant[1];", "-\trgvarg[0] = new Variant(url);", "-\tint[] rgdispidNamedArgs = new int[1];", "-\trgdispidNamedArgs[0] = rgdispid[1];", "-\tboolean oldValue = false;", "-\tif (silent && !OS.IsWinCE && IsIE7) {", "-\t\tint hResult = OS.CoInternetIsFeatureEnabled(OS.FEATURE_DISABLE_NAVIGATION_SOUNDS, OS.GET_FEATURE_FROM_PROCESS);", "-\t\toldValue = hResult == COM.S_OK;", "-\t\tOS.CoInternetSetFeatureEnabled(OS.FEATURE_DISABLE_NAVIGATION_SOUNDS, OS.SET_FEATURE_ON_PROCESS, true);", "-\t}", "-\tVariant pVarResult = auto.invoke(rgdispid[0], rgvarg, rgdispidNamedArgs);", "-\tif (silent && !OS.IsWinCE && IsIE7) {", "-\t\tOS.CoInternetSetFeatureEnabled(OS.FEATURE_DISABLE_NAVIGATION_SOUNDS, OS.SET_FEATURE_ON_PROCESS, oldValue);", "-\t}", "-\trgvarg[0].dispose();", "-\tif (pVarResult == null) return false;", "-\tboolean result = pVarResult.getType() == OLE.VT_EMPTY;", "-\tpVarResult.dispose();", "-\treturn result;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1fb246cf6713d3c871dd6b0a92865d2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleControlSite.java", "commitBeforeChange": "bd432d5503e3b467245c44ddc188a8b0b6ceca5a", "commitAfterChange": "c4f953c90faceb32a6a69ff132cd69cd560b6bd5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r private void connectEventSink()", "signatureAfterChange": "\r void addEventListener(int iunknown, GUID guid, int eventID, OleListener listener)", "diff": ["+}\r", "+void addEventListener(int iunknown, GUID guid, int eventID, OleListener listener) {\r", "+\tif (listener == null || iunknown == 0 || guid == null) OLE.error (SWT.ERROR_NULL_ARGUMENT);\r", "+\t// have we connected to this kind of event sink before?\r", "+\tint index = -1;\r", "+\tfor (int i = 0; i < oleEventSinkGUID.length; i++) {\r", "+\t\tif (COM.IsEqualGUID(oleEventSinkGUID[i], guid)) {\r", "+\t\t\tif (iunknown == oleEventSinkIUnknown[i]) {\r", "+\t\t\t\tindex = i; \r", "+\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\tif (index != -1) {\r", "+\t\toleEventSink[index].addListener(eventID, listener);\r", "+\t} else {\r", "+\t\tint oldLength = oleEventSink.length;\r", "+\t\tOleEventSink[] newOleEventSink = new OleEventSink[oldLength + 1];\r", "+\t\tGUID[] newOleEventSinkGUID = new GUID[oldLength + 1];\r", "+\t\tint[] newOleEventSinkIUnknown = new int[oldLength + 1];\r", "+\t\tSystem.arraycopy(oleEventSink, 0, newOleEventSink, 0, oldLength);\r", "+\t\tSystem.arraycopy(oleEventSinkGUID, 0, newOleEventSinkGUID, 0, oldLength);\r", "+\t\tSystem.arraycopy(oleEventSinkIUnknown, 0, newOleEventSinkIUnknown, 0, oldLength);\r", "+\t\toleEventSink = newOleEventSink;\r", "+\t\toleEventSinkGUID = newOleEventSinkGUID;\r", "+\t\toleEventSinkIUnknown = newOleEventSinkIUnknown;\r", "+\t\t\r", "+\t\toleEventSink[oldLength] = new OleEventSink(this, iunknown, guid);\r", "+\t\toleEventSinkGUID[oldLength] = guid;\r", "+\t\toleEventSinkIUnknown[oldLength] = iunknown;\r", "+\t\toleEventSink[oldLength].AddRef();\r", "+\t\toleEventSink[oldLength].connect();\r", "+\t\toleEventSink[oldLength].addListener(eventID, listener);\r", "+\t\t\r", "+\t}\r", "-private void connectEventSink() {\r", "-\toleEventSink = new OleEventSink(this);\r", "-\toleEventSink.AddRef();\r", "-\toleEventSink.connect(objIUnknown);\r", "-}\r"]}], "num": 59173}
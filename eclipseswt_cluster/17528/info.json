{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78bd916c2a8448b5fabbe25ae3aa7ebc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb77762478af2f7872716ed7ecd0a1e9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java", "commitBeforeChange": "e26934ac680ad70439130b120695448c0a630d25", "commitAfterChange": "95842c4b8acd967ae07a3fa166a616e528ae2f66", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 3, "signatureBeforeChange": " void setStyle(Widget widget)", "signatureAfterChange": "  \tpublic StyleRange[] getStyles(InputStream stream)", "diff": ["- */", "-void setStyle(Widget widget) {", "-\tPoint sel = text.getSelectionRange();", "-\tif ((sel == null) || (sel.y == 0)) return;", "-\tStyleRange style;", "-\tfor (int i = sel.x; i<sel.x+sel.y; i++) {", "-\t\tStyleRange range = text.getStyleRangeAtOffset(i);", "-\t\tif (range != null) {", "-\t\t\tstyle = (StyleRange)range.clone();", "-\t\t\tstyle.start = i;", "-\t\t\tstyle.length = 1;", "-\t\t} else {", "-\t\t\tstyle = new StyleRange(i, 1, null, null, SWT.NORMAL);", "-\t\t}", "-\t\tif (widget == boldButton) {", "-\t\t\tstyle.fontStyle ^= SWT.BOLD;", "-\t\t} else if (widget == italicButton) {", "-\t\t\tstyle.fontStyle ^= SWT.ITALIC;\t\t\t\t\t\t", "-\t\t} else if (widget == underlineButton) {", "-\t\t\tstyle.underline = !style.underline;", "-\t\t} else if (widget == strikeoutButton) {", "-\t\t\tstyle.strikeout = !style.strikeout;", "-\t\t}", "-\t\ttext.setStyleRange(style);", "-\t}", "-\ttext.setSelectionRange(sel.x + sel.y, 0);\t\t\t", "-}", "+", "+\tpublic StyleRange[] getStyles(InputStream stream) {", "+\t\tStyleRange[] styles = new StyleRange[256];", "+\t\tint count = 0;", "+\t\ttry {", "+\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(stream));", "+\t\t\tString line;", "+\t\t\twhile ((line = reader.readLine()) != null) {", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(line, \";\", false);  //$NON-NLS-1$", "+\t\t\t\tStyleRange range = new StyleRange();", "+\t\t\t\trange.start = Integer.parseInt(tokenizer.nextToken());", "+\t\t\t\trange.length = Integer.parseInt(tokenizer.nextToken());", "+\t\t\t\trange.fontStyle = Integer.parseInt(tokenizer.nextToken());", "+\t\t\t\trange.strikeout = tokenizer.nextToken().equals(\"true\");  //$NON-NLS-1$", "+\t\t\t\trange.underline = tokenizer.nextToken().equals(\"true\");  //$NON-NLS-1$", "+\t\t\t\tif (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\tint red = Integer.parseInt(tokenizer.nextToken());", "+\t\t\t\t\tint green = Integer.parseInt(tokenizer.nextToken());", "+\t\t\t\t\tint blue = Integer.parseInt(tokenizer.nextToken());", "+\t\t\t\t\trange.foreground = new Color(display, red, green, blue);", "+\t\t\t\t}", "+\t\t\t\tif (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\tint red = Integer.parseInt(tokenizer.nextToken());", "+\t\t\t\t\tint green = Integer.parseInt(tokenizer.nextToken());", "+\t\t\t\t\tint blue = Integer.parseInt(tokenizer.nextToken());", "+\t\t\t\t\trange.background = new Color(display, red, green, blue);", "+\t\t\t\t}", "+\t\t\t\tif (count >= styles.length) {", "+\t\t\t\t\tStyleRange[] newStyles =  new StyleRange[styles.length + 256];", "+\t\t\t\t\tSystem.arraycopy(styles, 0, newStyles, 0, styles.length);", "+\t\t\t\t\tstyles = newStyles;", "+\t\t\t\t}", "+\t\t\t\tstyles[count++] = range;", "+\t\t\t}", "+\t\t} catch (IOException e) {", "+\t\t\te.printStackTrace();", "+\t\t}", "+\t\tif (count < styles.length) {", "+\t\t\tStyleRange[] newStyles = new StyleRange[count];", "+\t\t\tSystem.arraycopy(styles, 0, newStyles, 0, count);", "+\t\t\tstyles = newStyles;", "+\t\t}", "+\t\treturn styles;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6feabbc1205e4b18599df3f627dea779", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java", "commitBeforeChange": "e26934ac680ad70439130b120695448c0a630d25", "commitAfterChange": "95842c4b8acd967ae07a3fa166a616e528ae2f66", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 85, "signatureBeforeChange": " void handleExtendedModify(ExtendedModifyEvent event)", "signatureAfterChange": " \t \tvoid handleModify (ModifyEvent event)", "diff": ["-}", "-void handleExtendedModify(ExtendedModifyEvent event) {", "-\tif (event.length == 0) return;", "-\tStyleRange style;", "-\tif (event.length == 1 || text.getTextRange(event.start, event.length).equals(text.getLineDelimiter())) {", "-\t\t// Have the new text take on the style of the text to its right (during", "-\t\t// typing) if no style information is active.", "-\t\tint caretOffset = text.getCaretOffset();", "-\t\tstyle = null;", "-\t\tif (caretOffset < text.getCharCount()) style = text.getStyleRangeAtOffset(caretOffset);", "-\t\tif (style != null) {", "-\t\t\tstyle = (StyleRange) style.clone ();", "-\t\t\tstyle.start = event.start;", "-\t\t\tstyle.length = event.length;", "-\t\t} else {", "-\t\t\tstyle = new StyleRange(event.start, event.length, null, null, SWT.NORMAL);", "-\t\t}\t\t", "-\t\tif (boldButton.getSelection()) style.fontStyle |= SWT.BOLD;", "-\t\tif (italicButton.getSelection()) style.fontStyle |= SWT.ITALIC;", "-\t\tstyle.underline = underlineButton.getSelection();", "-\t\tstyle.strikeout = strikeoutButton.getSelection();", "-\t\tif (!style.isUnstyled()) text.setStyleRange(style);", "-\t} else {", "-\t\t// paste occurring, have text take on the styles it had when it was", "-\t\t// cut/copied", "-\t\tfor (int i=0; i<cachedStyles.size(); i++) {", "-\t\t\tstyle = (StyleRange)cachedStyles.elementAt(i);", "-\t\t\tStyleRange newStyle = (StyleRange)style.clone();", "-\t\t\tnewStyle.start = style.start + event.start;", "-\t\t\ttext.setStyleRange(newStyle);", "-}", "+\t", "+\tvoid handleModify (ModifyEvent event) {", "+\t\tif (newCharCount > 0 && start >= 0) {", "+\t\t\tStyleRange style = new StyleRange();", "+\t\t\tif (textFont != null && !textFont.equals(styledText.getFont())) {", "+\t\t\t\tstyle.font = textFont;", "+\t\t\t} else {", "+\t\t\t\tstyle.fontStyle = SWT.NONE;", "+\t\t\t\tif (boldControl.getSelection()) style.fontStyle |= SWT.BOLD;", "+\t\t\t\tif (italicControl.getSelection()) style.fontStyle |= SWT.ITALIC;", "+\t\t\t}", "+\t\t\tstyle.foreground = textForeground;", "+\t\t\tstyle.background = textBackground;", "+\t\t\tint underlineStyle = styleState & UNDERLINE;", "+\t\t\tif (underlineStyle != 0) {", "+\t\t\t\tstyle.underline = true;", "+\t\t\t\tstyle.underlineColor = underlineColor;", "+\t\t\t\tswitch (underlineStyle) {", "+\t\t\t\t\tcase UNDERLINE_SINGLE:\tstyle.underlineStyle = SWT.UNDERLINE_SINGLE; break;", "+\t\t\t\t\tcase UNDERLINE_DOUBLE:\tstyle.underlineStyle = SWT.UNDERLINE_DOUBLE; break;", "+\t\t\t\t\tcase UNDERLINE_SQUIGGLE:\tstyle.underlineStyle = SWT.UNDERLINE_SQUIGGLE; break;", "+\t\t\t\t\tcase UNDERLINE_ERROR:\tstyle.underlineStyle = SWT.UNDERLINE_ERROR; break;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif ((styleState & STRIKEOUT) != 0) {", "+\t\t\t\tstyle.strikeout = true;", "+\t\t\t\tstyle.strikeoutColor = strikeoutColor;", "+\t\t\t}", "+\t\t\tint borderStyle = styleState & BORDER;", "+\t\t\tif (borderStyle != 0) {", "+\t\t\t\tstyle.borderColor = borderColor;", "+\t\t\t\tswitch (borderStyle) {", "+\t\t\t\t\tcase BORDER_DASH:\tstyle.borderStyle = SWT.BORDER_DASH; break;", "+\t\t\t\t\tcase BORDER_DOT:\tstyle.borderStyle = SWT.BORDER_DOT; break;", "+\t\t\t\t\tcase BORDER_SOLID: style.borderStyle = SWT.BORDER_SOLID; break;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tint[] ranges = {start, newCharCount};", "+\t\t\tStyleRange[] styles = {style}; ", "+\t\t\tstyledText.setStyleRanges(start, newCharCount, ranges, styles);", "+\t\t}", "+\t\tdisposeRanges(selectedRanges);", "+\t}"]}], "num": 17528}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "36d7fcc9c6ffbca094be751196b15949", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aab39f741d284ff17c912968db8078c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "df50fa66edbf171262925f429290b7e2a0ec54bb", "commitAfterChange": "d12fe81a2f20724b5a4c78562e4cf8a705a47721", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 48, "signatureBeforeChange": " void headerOnMouseDown (Event event)", "signatureAfterChange": " void headerOnMouseDown (Event event)", "diff": ["+\tTreeColumn[] orderedColumns = getOrderedColumns ();", "-\tfor (int i = 0; i < columns.length; i++) {", "-\t\tTreeColumn column = columns [i]; ", "+\tfor (int i = 0; i < orderedColumns.length; i++) {", "+\t\tTreeColumn column = orderedColumns [i]; ", "-\t\t/* if within column but not near resizable separator line then fire column Selection */", "+\t\t/*", "+\t\t * If within column but not near separator line then start column drag", "+\t\t * if column is moveable, or just fire column Selection otherwise.", "+\t\t */", "+\t\t\tif (column.moveable && column.getOrderIndex () > 0) {", "+\t\t\t\t/* open tracker on the dragged column's header cell */", "+\t\t\t\tint columnX = column.getX ();", "+\t\t\t\tint pointerOffset = event.x - columnX;", "+\t\t\t\tTracker tracker = new Tracker (this, SWT.NONE);", "+\t\t\t\ttracker.setRectangles (new Rectangle[] {", "+\t\t\t\t\tnew Rectangle (columnX, 0, column.width, getHeaderHeight ())", "+\t\t\t\t});", "+\t\t\t\tif (!tracker.open ()) return;\t/* cancelled */", "+\t\t\t\t/* determine which column was dragged onto */", "+\t\t\t\tRectangle result = tracker.getRectangles () [0];", "+\t\t\t\tint pointerX = result.x + pointerOffset;", "+\t\t\t\tif (pointerX < 0) return;\t/* dragged too far left */", "+\t\t\t\tx = -horizontalOffset;", "+\t\t\t\tfor (int destIndex = 0; destIndex < orderedColumns.length; destIndex++) {", "+\t\t\t\t\tTreeColumn destColumn = orderedColumns [destIndex];", "+\t\t\t\t\tx += destColumn.width;", "+\t\t\t\t\tif (pointerX < x) {", "+\t\t\t\t\t\tint oldIndex = column.getOrderIndex ();", "+\t\t\t\t\t\tif (destIndex == oldIndex) {\t/* dragged onto self */", "+\t\t\t\t\t\t\tEvent newEvent = new Event ();", "+\t\t\t\t\t\t\tnewEvent.widget = column;", "+\t\t\t\t\t\t\tcolumn.postEvent (SWT.Selection, newEvent);", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint leftmostIndex = Math.min (destIndex, oldIndex);", "+\t\t\t\t\t\tint[] oldOrder = getColumnOrder ();", "+\t\t\t\t\t\tint[] newOrder = new int [oldOrder.length];", "+\t\t\t\t\t\tSystem.arraycopy (oldOrder, 0, newOrder, 0, leftmostIndex);", "+\t\t\t\t\t\tif (leftmostIndex == oldIndex) {", "+\t\t\t\t\t\t\t/* column moving to the right */", "+\t\t\t\t\t\t\tSystem.arraycopy (oldOrder, oldIndex + 1, newOrder, oldIndex, destIndex - oldIndex);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t/* column moving to the left */", "+\t\t\t\t\t\t\tSystem.arraycopy (oldOrder, destIndex, newOrder, destIndex + 1, oldIndex - destIndex);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tnewOrder [destIndex] = oldOrder [oldIndex];", "+\t\t\t\t\t\tint rightmostIndex = Math.max (destIndex, oldIndex);", "+\t\t\t\t\t\tSystem.arraycopy (", "+\t\t\t\t\t\t\toldOrder,", "+\t\t\t\t\t\t\trightmostIndex + 1,", "+\t\t\t\t\t\t\tnewOrder,", "+\t\t\t\t\t\t\trightmostIndex + 1,", "+\t\t\t\t\t\t\tnewOrder.length - rightmostIndex - 1);", "+\t\t\t\t\t\tsetColumnOrder (newOrder);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn;\t\t/* dragged too far right */", "+\t\t\t}", "+\t\t\t/* column is not moveable */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66a00a14d4efb3b7c40fce1972ebc331", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "67f5dddda70c13b09d8ff28fb887ba2276d381a3", "commitAfterChange": "e5504ca1a8a80d4ea240a80f80e667e7b05edb6f", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 48, "signatureBeforeChange": " void headerOnMouseDown (Event event)", "signatureAfterChange": " void headerOnMouseDown (Event event)", "diff": ["+}", "+\tint x = -horizontalOffset;", "-\t\tTableColumn column = orderedColumns [i]; ", "-\t\tint x = column.getX () + column.width;", "-\t\t/* if close to a column separator line then begin column resize */", "-\t\tif (Math.abs (x - event.x) <= TOLLERANCE_COLUMNRESIZE) {", "-\t\t\tif (!column.resizable) return;", "+\t\tTableColumn column = orderedColumns [i];", "+\t\tx += column.width;", "+\t\t/* if close to a resizable column separator line then begin column resize */", "+\t\tif (column.resizable && Math.abs (x - event.x) <= TOLLERANCE_COLUMNRESIZE) {", "-\t\t/* if within column but not near separator line then fire column Selection */", "+\t\t/*", "+\t\t * If within column but not near separator line then start column drag", "+\t\t * if column is moveable, or just fire column Selection otherwise.", "+\t\t */", "+\t\t\tif (column.moveable) {", "+\t\t\t\t/* open tracker on the dragged column's header cell */", "+\t\t\t\tint columnX = column.getX ();", "+\t\t\t\tint pointerOffset = event.x - columnX;", "+\t\t\t\tTracker tracker = new Tracker (this, SWT.NONE);", "+\t\t\t\ttracker.setRectangles (new Rectangle[] {", "+\t\t\t\t\tnew Rectangle (columnX, 0, column.width, getHeaderHeight ())", "+\t\t\t\t});", "+\t\t\t\tif (!tracker.open ()) return;\t/* cancelled */", "+\t\t\t\t/* determine which column was dragged onto */", "+\t\t\t\tRectangle result = tracker.getRectangles () [0];", "+\t\t\t\tint pointerX = result.x + pointerOffset;", "+\t\t\t\tif (pointerX < 0) return;\t/* dragged too far left */", "+\t\t\t\tx = -horizontalOffset;", "+\t\t\t\tfor (int destIndex = 0; destIndex < orderedColumns.length; destIndex++) {", "+\t\t\t\t\tTableColumn destColumn = orderedColumns [destIndex];", "+\t\t\t\t\tx += destColumn.width;", "+\t\t\t\t\tif (pointerX < x) {", "+\t\t\t\t\t\tint oldIndex = column.getOrderIndex ();", "+\t\t\t\t\t\tif (destIndex == oldIndex) {\t/* dragged onto self */", "+\t\t\t\t\t\t\tEvent newEvent = new Event ();", "+\t\t\t\t\t\t\tnewEvent.widget = column;", "+\t\t\t\t\t\t\tcolumn.postEvent (SWT.Selection, newEvent);", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint leftmostIndex = Math.min (destIndex, oldIndex);", "+\t\t\t\t\t\tint[] oldOrder = getColumnOrder ();", "+\t\t\t\t\t\tint[] newOrder = new int [oldOrder.length];", "+\t\t\t\t\t\tSystem.arraycopy (oldOrder, 0, newOrder, 0, leftmostIndex);", "+\t\t\t\t\t\tif (leftmostIndex == oldIndex) {", "+\t\t\t\t\t\t\t/* column moving to the right */", "+\t\t\t\t\t\t\tSystem.arraycopy (oldOrder, oldIndex + 1, newOrder, oldIndex, destIndex - oldIndex);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t/* column moving to the left */", "+\t\t\t\t\t\t\tSystem.arraycopy (oldOrder, destIndex, newOrder, destIndex + 1, oldIndex - destIndex);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tnewOrder [destIndex] = oldOrder [oldIndex];", "+\t\t\t\t\t\tint rightmostIndex = Math.max (destIndex, oldIndex);", "+\t\t\t\t\t\tSystem.arraycopy (", "+\t\t\t\t\t\t\toldOrder,", "+\t\t\t\t\t\t\trightmostIndex + 1,", "+\t\t\t\t\t\t\tnewOrder,", "+\t\t\t\t\t\t\trightmostIndex + 1,", "+\t\t\t\t\t\t\tnewOrder.length - rightmostIndex - 1);", "+\t\t\t\t\t\tsetColumnOrder (newOrder);", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn;\t\t/* dragged too far right */", "+\t\t\t}", "+\t\t\t/* column is not moveable */"]}], "num": 41152}
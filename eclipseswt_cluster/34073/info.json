{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f228de656a938d2bd16283a4e8936f00", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a232bdd8b4792afb129535001c26cc2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "2c906419c5eea1f5e4ccf875843061da48a630cd", "commitAfterChange": "840e85ce787016bff6b6e895ee4e79055955eb32", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void setEnabled (boolean enabled)", "signatureAfterChange": " public void setEnabled (boolean enabled)", "diff": ["+\tif (enabled) {", "+\t\t/*", "+\t\t* Bug in GTK.  GtkButton requires an enter notify before it", "+\t\t* allows the button to be pressed, but events are dropped when", "+\t\t* widgets are insensitive.  The fix is to hide and show the", "+\t\t* button if the pointer is within its bounds.", "+\t\t*/", "+\t\tint [] x = new int [1], y = new int [1];", "+\t\tOS.gdk_window_get_pointer (parent.paintWindow (), x, y, null);", "+\t\tif (getBounds ().contains (x [0], y [0])) {", "+\t\t\tOS.gtk_widget_hide (handle);", "+\t\t\tOS.gtk_widget_show (handle);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cadc2e21e08dae40b67876451971b530", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "4e2aa03a056cdb0b186f24b54b9a9e25d8e80922", "commitAfterChange": "8f74400627fe378267067a48a1bbad7ee433b09b", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 83, "signatureBeforeChange": " void doMouseLocationChange(int x, int y, boolean select)", "signatureAfterChange": " void doMouseLocationChange(int x, int y, boolean select)", "diff": ["+\t", "+\tif (blockSelection) {", "+\t\tint[] trailing = new int[1]; ", "+\t\tint offset = getOffsetAtPoint(x, y, trailing, true);", "+\t\tif (offset != -1) {", "+\t\t\tx = getPointAtOffset(offset + trailing[0]).x;", "+\t\t}", "+\t\tif (!select) clearBlockSelection();", "+\t\tsetBlockSelectionLocation(x, y);", "+\t\treturn;", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4eb1278b427419f1ecdd0f9bbe7a2ea", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Spinner.java", "commitBeforeChange": "3114c0771e236970e2e710942b819990aa75f96f", "commitAfterChange": "1359c9d736921f98adeef22ea619472306ea5591", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "  String verifyText (String string, int start, int end, Event keyEvent)", "signatureAfterChange": "  String verifyText (String string, int start, int end, Event keyEvent)", "diff": ["+\tint [] max = new int [1];", "+\tint [] min = new int [1];", "+\tOS.SendMessage (hwndUpDown , OS.UDM_GETRANGE32, min, max);", "-\t\tif (!Character.isDigit (string.charAt (index))) break;", "+\t\tchar ch = string.charAt (index);", "+\t\tif (!(Character.isDigit (ch) || (min [0]  < 0 && ch == '-') || (max [0] > 0 && ch == '+'))) break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ca6fba30bbede2d654a9c008ce362b1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Spinner.java", "commitBeforeChange": "37c2198a0078851bae95adad18ac2bcab12b7c0a", "commitAfterChange": "19989c4fec88a024fca05eb48c8712aef47d01b1", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void setSelection (int value)", "signatureAfterChange": " public void setSelection (int value)", "diff": ["-\tsetSelection (value, true, false);", "+\tint [] max = new int [1], min = new int [1];", "+\tOS.SendMessage (hwndUpDown , OS.UDM_GETRANGE32, min, max);", "+\tvalue = Math.min (Math.max (min [0], value), max [0]);", "+\tsetSelection (value, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f93d74201cb84aedfc786116f8c2c90", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "400bebb2a46a56d23a0e63f638771142001b2d2f", "commitAfterChange": "d475996e7d9059997d1075e3c5ef1c229b534c6a", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "  int kEventUnicodeKeyPressed (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventUnicodeKeyPressed (int nextHandler, int theEvent, int userData)", "diff": ["+\t\t/*", "+\t\t* Feature in the Macintosh.  For some reason, when the user hits an", "+\t\t* up or down arrow to traverse the items in a Data Browser, the item", "+\t\t* scrolls to the left such that the white space that is normally", "+\t\t* visible to the right of the every item is scrolled out of view.", "+\t\t* The fix is to save and restore the horizontal scroll position.", "+\t\t*/", "-\t\tcase 126: { /* Up*/", "+\t\tcase 126: /* Up*/", "+\t\t\tint [] top = new int [1], left = new int [1];", "+\t\t\tOS.GetDataBrowserScrollPosition (handle, top, left);", "+\t\t\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\tOS.GetDataBrowserScrollPosition (handle, top, null);", "+\t\t\tOS.SetDataBrowserScrollPosition (handle, top [0], left [0]);", "+\t\t\t", "-\t\t\tbreak;", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdf77a1b64de1d801ee41a43484e2d6d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "808a628075be9b31a9497eddcb5914d6f43e0b1e", "commitAfterChange": "8c0cfc19eca4f241c34603eca33803e9daafabd5", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": "  void setKeyState (Event event, GdkEventKey keyEvent)", "signatureAfterChange": "  void setKeyState (Event event, GdkEventKey keyEvent)", "diff": ["+\t\t\t\t\tint [] keyval = new int [1], effective_group= new int [1], level = new int [1], consumed_modifiers = new int [1];", "+\t\t\t\t\tif (OS.gdk_keymap_translate_keyboard_state(0, keyEvent.hardware_keycode, 0, keyEvent.group, keyval, effective_group, level, consumed_modifiers)) {", "+\t\t\t\t\t\tevent.keyCode = OS.gdk_keyval_to_unicode (keyval [0]);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fa58e7815797fa38d897abd10126748", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "01d02b7c2746e08488dca474b2bc7eb2b58bb4b7", "commitAfterChange": "f59deb797c64e856894963e4e3c0f3b80ed11213", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r public void clearSelection ()", "signatureAfterChange": "\r public void clearSelection ()", "diff": ["-\tOS.SendMessage (handle, OS.EM_SETSEL, -1, 0);\r", "+\tif (OS.IsWinCE) {\r", "+\t\t/*\r", "+\t\t* Bug in WinCE.  Calling EM_SETSEL with -1 and 0 is equivalent\r", "+\t\t* to calling EM_SETSEL with 0 and -1.  It causes the entire\r", "+\t\t* text to be selected instead of clearing the selection.  The\r", "+\t\t* fix is to set the start of the selection to the  end of the\r", "+\t\t* current selection.\r", "+\t\t*/ \r", "+\t\tint [] end = new int [1];\r", "+\t\tOS.SendMessage (handle, OS.EM_GETSEL, (int []) null, end);\r", "+\t\tOS.SendMessage (handle, OS.EM_SETSEL, end [0], end [0]);\r", "+\t} else {\r", "+\t\tOS.SendMessage (handle, OS.EM_SETSEL, -1, 0);\r", "+\t}\r"]}], "num": 34073}
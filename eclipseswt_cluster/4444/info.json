{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "64d20fe1e072fdd86c4d10f4234af38c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d321fd01214ff066ae6ffd6e3493ad9a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/datetime/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "661902bf7ee70a356b86fa6a9079f1e6fe9f6a55", "commitAfterChange": "3864b2941ae222550e4957f26587a537efcbde93", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 44, "signatureBeforeChange": "  void incrementField(int amount)", "signatureAfterChange": "  void incrementField(int amount)", "diff": ["+\tif (fieldName == Calendar.HOUR) {", "+\t\tint max = calendar.getMaximum(Calendar.HOUR);", "+\t\tint min = calendar.getMinimum(Calendar.HOUR);", "+\t\tif ((value == max && amount == 1) || (value == min && amount == -1)) {", "+\t\t\tint temp = currentField;", "+\t\t\tcurrentField = getFieldIndex(Calendar.AM_PM);", "+\t\t\tsetTextField(Calendar.AM_PM, (calendar.get(Calendar.AM_PM) + 1) % 2, true, true);", "+\t\t\tcurrentField = temp;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f3bbd0ea8b113016e8ae5f38a03774f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "cd1cc037b1168f84b19a92aa831a5521ef1002b1", "commitAfterChange": "85174ac8bb4fb0238065cc23ba99cf50babde940", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tRECT oldRect = new RECT ();", "-\tOS.GetWindowRect (handle, oldRect);", "-\tint oldWidth = oldRect.right - oldRect.left;", "-\tint oldHeight = oldRect.bottom - oldRect.top;", "-\tint border = getBorderWidth ();", "-\tint newWidth = wHint == SWT.DEFAULT ? 0x3FFF : wHint + (border * 2);", "-\tint newHeight = hHint == SWT.DEFAULT ? 0x3FFF : hHint + (border * 2);", "-\tboolean redraw = drawCount == 0 && OS.IsWindowVisible (handle);", "-\tignoreResize = true;", "-\tif (redraw) OS.UpdateWindow (handle);", "-\tint flags = OS.SWP_NOACTIVATE | OS.SWP_NOMOVE | OS.SWP_NOREDRAW | OS.SWP_NOZORDER;", "-\tOS.SetWindowPos (handle, 0, 0, 0, newWidth, newHeight, flags);", "-\tint count = OS.SendMessage (handle, OS.TB_BUTTONCOUNT, 0, 0);", "-\tif (count != 0) {", "+\tif ((style & SWT.VERTICAL) != 0) {", "-\t\tOS.SendMessage (handle, OS.TB_GETITEMRECT, count - 1, rect);", "-\t\twidth = Math.max (width, rect.right);", "-\t\theight = Math.max (height, rect.bottom);", "+\t\tTBBUTTON lpButton = new TBBUTTON ();", "+\t\tint count = OS.SendMessage (handle, OS.TB_BUTTONCOUNT, 0, 0);", "+\t\tfor (int i=0; i<count; i++) {", "+\t\t\tOS.SendMessage (handle, OS.TB_GETITEMRECT, i, rect);", "+\t\t\theight = Math.max (height, rect.bottom);", "+\t\t\tOS.SendMessage (handle, OS.TB_GETBUTTON, i, lpButton);", "+\t\t\tif ((lpButton.fsStyle & OS.BTNS_SEP) == 0) {", "+\t\t\t\twidth = Math.max (width, rect.right);", "+\t\t\t}", "+\t\t}", "+\t} else {", "+\t\tRECT oldRect = new RECT ();", "+\t\tOS.GetWindowRect (handle, oldRect);", "+\t\tint oldWidth = oldRect.right - oldRect.left;", "+\t\tint oldHeight = oldRect.bottom - oldRect.top;", "+\t\tint border = getBorderWidth ();", "+\t\tint newWidth = wHint == SWT.DEFAULT ? 0x3FFF : wHint + border * 2;", "+\t\tint newHeight = hHint == SWT.DEFAULT ? 0x3FFF : hHint + border * 2;", "+\t\tboolean redraw = drawCount == 0 && OS.IsWindowVisible (handle);", "+\t\tignoreResize = true;", "+\t\tif (redraw) OS.UpdateWindow (handle);", "+\t\tint flags = OS.SWP_NOACTIVATE | OS.SWP_NOMOVE | OS.SWP_NOREDRAW | OS.SWP_NOZORDER;", "+\t\tOS.SetWindowPos (handle, 0, 0, 0, newWidth, newHeight, flags);", "+\t\tint count = OS.SendMessage (handle, OS.TB_BUTTONCOUNT, 0, 0);", "+\t\tif (count != 0) {", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.SendMessage (handle, OS.TB_GETITEMRECT, count - 1, rect);", "+\t\t\twidth = Math.max (width, rect.right);", "+\t\t\theight = Math.max (height, rect.bottom);", "+\t\t}", "+\t\tOS.SetWindowPos (handle, 0, 0, 0, oldWidth, oldHeight, flags);", "+\t\tif (redraw) OS.ValidateRect (handle, null);", "+\t\tignoreResize = false;", "-\tOS.SetWindowPos (handle, 0, 0, 0, oldWidth, oldHeight, flags);", "-\tif (redraw) OS.ValidateRect (handle, null);", "-\tignoreResize = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b9c7b6470a7d5c1337f75b926a65b43", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "ad7a9e5b3b139f6b5bd4c2f25f8cf8b336105a91", "commitAfterChange": "52d678e47ee00e0c9d7473cd6841b89c8499131e", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 68, "signatureBeforeChange": " public void setItems (String [] items)", "signatureAfterChange": " public void setItems (String [] items)", "diff": ["-\tlockText = ignoreSelect = true;", "-\tOS.gtk_list_clear_items (listHandle, 0, -1);", "-\tint /*long*/ font = getFontDescription ();", "-\tGdkColor color = getForegroundColor ();", "-\tint direction = OS.gtk_widget_get_direction (handle);", "-\tint i = 0;", "-\twhile (i < items.length) {", "-\t\tString string = items [i];", "-\t\tbyte [] buffer = Converter.wcsToMbcs (null, string, true);", "-\t\tint /*long*/ item = OS.gtk_list_item_new_with_label (buffer);", "-\t\tint /*long*/ label = OS.gtk_bin_get_child (item); ", "-\t\tOS.gtk_widget_modify_fg (label, OS.GTK_STATE_NORMAL, color);", "-\t\tOS.gtk_widget_modify_font (label, font);", "-\t\tOS.gtk_widget_set_direction (label, direction);", "-\t\tOS.gtk_container_add (listHandle, item);", "-\t\tOS.gtk_widget_show (item);", "-\t\ti++;", "-\t}", "+\tint count = this.items.length;", "-\tSystem.arraycopy (items, 0, this.items, 0, i);", "-\tlockText = ignoreSelect = false;", "-\tOS.gtk_entry_set_text (entryHandle, new byte[1]);", "+\tSystem.arraycopy (items, 0, this.items, 0, items.length);", "+\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {", "+\t\tclearText ();", "+\t\tfor (int i = count - 1; i >= 0; i--) {", "+\t\t\tOS.gtk_combo_box_remove_text (handle, i);", "+\t\t}", "+\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\tString string = items [i];", "+\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, string, true);", "+\t\t\tOS.gtk_combo_box_insert_text (handle, i, buffer);", "+\t\t}", "+\t} else {", "+\t\tlockText = ignoreSelect = true;", "+\t\tOS.gtk_list_clear_items (listHandle, 0, -1);", "+\t\tint /*long*/ font = getFontDescription ();", "+\t\tGdkColor color = getForegroundColor ();", "+\t\tint direction = OS.gtk_widget_get_direction (handle);", "+\t\tint i = 0;", "+\t\twhile (i < items.length) {", "+\t\t\tString string = items [i];", "+\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, string, true);", "+\t\t\tint /*long*/ item = OS.gtk_list_item_new_with_label (buffer);", "+\t\t\tint /*long*/ label = OS.gtk_bin_get_child (item); ", "+\t\t\tOS.gtk_widget_modify_fg (label, OS.GTK_STATE_NORMAL, color);", "+\t\t\tOS.gtk_widget_modify_font (label, font);", "+\t\t\tOS.gtk_widget_set_direction (label, direction);", "+\t\t\tOS.gtk_container_add (listHandle, item);", "+\t\t\tOS.gtk_widget_show (item);", "+\t\t\ti++;", "+\t\t}", "+\t\tlockText = ignoreSelect = false;", "+\t\tOS.gtk_entry_set_text (entryHandle, new byte[1]);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f4b5f3063b976e3d621ce6552e41270", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ColorDialog.java", "commitBeforeChange": "c7335c0f205812ea0c3e6b492f36f313fd885911", "commitAfterChange": "a4edb9923d601c62393d7dc6943e1924ebf22ff6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  int CCHookProc (int hdlg, int uiMsg, int lParam, int lpData)", "signatureAfterChange": "  int CCHookProc (int hdlg, int uiMsg, int lParam, int lpData)", "diff": ["-\t\tcase OS.WM_INITDIALOG:", "+\t\tcase OS.WM_INITDIALOG: {", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.GetWindowRect (hdlg, rect);", "+\t\t\twidth = rect.right - rect.left;", "+\t\t\theight = rect.bottom - rect.top;", "+\t\t}", "+\t\tcase OS.WM_DESTROY: {", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.GetWindowRect (hdlg, rect);", "+\t\t\tint newWidth = rect.right - rect.left;", "+\t\t\tint newHeight = rect.bottom - rect.top;", "+\t\t\tif (newWidth < width || newHeight < height) {", "+\t\t\t\t//display.fullOpen = false;", "+\t\t\t} else {", "+\t\t\t\tif (newWidth > width || newHeight > height) {", "+\t\t\t\t\t//display.fullOpen = true;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "711f40f9d8708fe8f4d57418a18be60e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "6fe853b29d6dcedf69f8209e4b19fa3cf0a85a8b", "commitAfterChange": "cc7a79cec8920b1b6175a6c2124e7f63a3823262", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 49, "signatureBeforeChange": "  void releaseWidget ()", "signatureAfterChange": "  void releaseWidget ()", "diff": ["+", "+\tint hwndHeader =  OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "+\tint columnCount = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\tfor (int i=0; i<columnCount; i++) {", "+\t\tTreeColumn column = columns [i];", "+\t\tif (!column.isDisposed ()) column.releaseResources ();", "+\t}", "+\tcolumns = null;", "+\titems = null;", "-\t* Feature in Windows.  For some reason, when", "-\t* TVM_GETIMAGELIST or TVM_SETIMAGELIST is sent,", "-\t* the tree issues NM_CUSTOMDRAW messages.  This", "-\t* behavior is unwanted when the tree is being", "-\t* disposed.  The fix is to ingore NM_CUSTOMDRAW", "-\t* messages by usnig the custom draw flag.", "+\t* Feature in Windows.  For some reason, when TVM_GETIMAGELIST", "+\t* or TVM_SETIMAGELIST is sent, the tree issues NM_CUSTOMDRAW", "+\t* messages.  This behavior is unwanted when the tree is being", "+\t* disposed.  The fix is to ingore NM_CUSTOMDRAW messages by", "+\t* clearing the custom draw flag.", "-\titems = null;", "+\t\tOS.SendMessage (hwndHeader, OS.HDM_SETIMAGELIST, 0, 0);", "+\t\tOS.SendMessage (hwndHeader, OS.HDM_SETIMAGELIST, 0, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9723ac99d26e68c7b935cf799534727", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ExpandBar.java", "commitBeforeChange": "564af48002efb7dde4608cffc2bddfed66929de1", "commitAfterChange": "25e834c280324b3e7770e2b3f82a7d7ca7a1f981", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 30, "signatureBeforeChange": "  public void setSpacing (int spacing)", "signatureAfterChange": "  public void setSpacing (int spacing)", "diff": ["-\tOS.gtk_box_set_spacing (handle, spacing);", "-\tOS.gtk_container_set_border_width (handle, spacing);", "+\tif (spacing == this.spacing) return;", "+\tthis.spacing = spacing;", "+\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {", "+\t\tOS.gtk_box_set_spacing (handle, spacing);", "+\t\tOS.gtk_container_set_border_width (handle, spacing);", "+\t} else {", "+\t\tint width = Math.max (0, getClientArea ().width - spacing * 2);", "+\t\tfor (int i = 0; i < itemCount; i++) {", "+\t\t\tExpandItem item = items[i];", "+\t\t\tif (item.width != width) item.setBounds (0, 0, width, item.height, false, true);", "+\t\t}", "+\t\tlayoutItems (0, true);", "+\t\tredraw ();", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "284ebfccaceeb39060bff5269f338ce6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "6fe853b29d6dcedf69f8209e4b19fa3cf0a85a8b", "commitAfterChange": "cc7a79cec8920b1b6175a6c2124e7f63a3823262", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+\tif (hwndHeader != 0) {", "+\t\tHDITEM hdItem = new HDITEM ();", "+\t\thdItem.mask = OS.HDI_WIDTH;", "+\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\tfor (int i=0; i<count; i++) {", "+\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, i, hdItem);", "+\t\t\twidth += hdItem.cxy;", "+\t\t}", "+\t\tRECT rect = new RECT ();\t\t\t\t\t", "+\t\tOS.GetWindowRect (hwndHeader, rect);", "+\t\theight += rect.bottom - rect.top;", "+\t}", "-\twidth += border * 2;  height += border * 2;", "+\twidth += border * 2;", "+\theight += border * 2;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e9c45dbfe70ef018634e7c0a3fbf325", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "b36f97e8a58715f907c2ff4f1fa2768aeeedb4d3", "commitAfterChange": "47c737ebfb92a90218e4490fc6b9c7b2ae60d200", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 95, "signatureBeforeChange": "  String toolTipText (NMTTDISPINFO hdr)", "signatureAfterChange": "  String toolTipText (NMTTDISPINFO hdr)", "diff": ["+", "+\tif (headerToolTipHandle == hdr.hwndFrom) {", "+\t\tint hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "+\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\tif (count == 1 && columns [0] == null) count = 0;", "+\t\tfor (int i=0; i<count; i++) {", "+\t\t\tTableColumn column = columns [i];", "+\t\t\tif (column.id == hdr.idFrom) return column.toolTipText;", "+\t\t}", "+\t}"]}], "num": 4444}
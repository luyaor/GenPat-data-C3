{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "16f75bbc44ef9e8b0a4533bd91b5efe5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24c357515f7996fa57767bad34d04b13", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "1f3302e72f7f6c10f0a01518cfff58f90ce78f5c", "commitAfterChange": "581ec33d70d5ed2c93e8eb3c8f75ca3e522ecaca", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " void onPaint (Event event)", "signatureAfterChange": " void onPaint (Event event)", "diff": ["-\t/* repaint grid lines */", "-\tif (linesVisible) {", "-\t\tColor oldForeground = gc.getForeground ();", "-\t\tgc.setForeground (display.getSystemColor (SWT.COLOR_WIDGET_LIGHT_SHADOW));", "-\t\tif (numColumns > 0 && startColumn != -1) {", "-\t\t\t/* vertical column lines */", "-\t\t\tfor (int i = startColumn; i <= endColumn; i++) {", "-\t\t\t\tint x = columns [i].getX () + columns [i].width - 1;", "-\t\t\t\tgc.drawLine (x, clipping.y, x, clipping.y + clipping.height);", "-\t\t\t}", "-\t\t}", "-\t\t/* horizontal item lines */", "-\t\tint bottomY = clipping.y + clipping.height;", "-\t\tint rightX = clipping.x + clipping.width;", "-\t\tint y = (clipping.y - headerHeight) / itemHeight * itemHeight + headerHeight;", "-\t\twhile (y <= bottomY) {", "-\t\t\tgc.drawLine (clipping.x, y, rightX, y);", "-\t\t\ty += itemHeight;", "-\t\t}", "-\t\tgc.setForeground (oldForeground);", "-\t}", "-\t", "-\tif (availableItemsCount < startIndex) return;\t\t/* no items to paint */", "-\tint endIndex = startIndex + Compatibility.ceil (clipping.height, itemHeight);", "-\tif (endIndex < 0) return;\t\t/* no items to paint */", "+\tint endIndex = -1;", "+\tif (startIndex < availableItemsCount) {", "+\t\tendIndex = startIndex + Compatibility.ceil (clipping.height, itemHeight);", "+\t}", "+", "+\t/* fill background not handled by items */", "+\tgc.setBackground (getBackground ());", "+\tgc.setClipping (clipping);", "+\tRectangle clientArea = getClientArea ();", "+\tint bottomY = endIndex >= 0 ? getItemY (availableItems [endIndex]) + itemHeight : 0;", "+\tint fillHeight = Math.max (0, clientArea.height - bottomY);", "+\tif (fillHeight > 0) {\t/* space below bottom item */", "+\t\tgc.fillRectangle (0, bottomY, clientArea.width, fillHeight);", "+\t}", "+\tif (columns.length > 0) {", "+\t\tTreeColumn column = columns [columns.length - 1];\t/* last column */", "+\t\tint rightX = column.getX () + column.width;", "+\t\tif (rightX < clientArea.width) {", "+\t\t\tgc.fillRectangle (rightX, 0, clientArea.width - rightX, clientArea.height - fillHeight);", "+\t\t}", "+\t}", "+", "+\t/* repaint grid lines */", "+\tif (linesVisible) {", "+\t\tColor oldForeground = gc.getForeground ();", "+\t\tgc.setForeground (display.getSystemColor (SWT.COLOR_WIDGET_LIGHT_SHADOW));", "+\t\tif (numColumns > 0 && startColumn != -1) {", "+\t\t\t/* vertical column lines */", "+\t\t\tfor (int i = startColumn; i <= endColumn; i++) {", "+\t\t\t\tint x = columns [i].getX () + columns [i].width - 1;", "+\t\t\t\tgc.drawLine (x, clipping.y, x, clipping.y + clipping.height);", "+\t\t\t}", "+\t\t}", "+\t\t/* horizontal item lines */", "+\t\tbottomY = clipping.y + clipping.height;", "+\t\tint rightX = clipping.x + clipping.width;", "+\t\tint y = (clipping.y - headerHeight) / itemHeight * itemHeight + headerHeight;", "+\t\twhile (y <= bottomY) {", "+\t\t\tgc.drawLine (clipping.x, y, rightX, y);", "+\t\t\ty += itemHeight;", "+\t\t}", "+\t\tgc.setForeground (oldForeground);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fd5cebd827682e2ee13964cc6e2fc37", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "1f3302e72f7f6c10f0a01518cfff58f90ce78f5c", "commitAfterChange": "581ec33d70d5ed2c93e8eb3c8f75ca3e522ecaca", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " void onPaint (Event event)", "signatureAfterChange": " void onPaint (Event event)", "diff": ["-\t/* repaint grid lines */", "-\tif (linesVisible) {", "-\t\tColor oldForeground = gc.getForeground ();", "-\t\tgc.setForeground (display.getSystemColor (SWT.COLOR_WIDGET_LIGHT_SHADOW));", "-\t\tif (numColumns > 0 && startColumn != -1) {", "-\t\t\t/* vertical column lines */", "-\t\t\tfor (int i = startColumn; i <= endColumn; i++) {", "-\t\t\t\tint x = orderedColumns [i].getX () + orderedColumns [i].width - 1;", "-\t\t\t\tgc.drawLine (x, clipping.y, x, clipping.y + clipping.height);", "-\t\t\t}", "-\t\t}", "-\t\t/* horizontal item lines */", "-\t\tint bottomY = clipping.y + clipping.height;", "-\t\tint rightX = clipping.x + clipping.width;", "-\t\tint y = (clipping.y - headerHeight) / itemHeight * itemHeight + headerHeight;", "-\t\twhile (y <= bottomY) {", "-\t\t\tgc.drawLine (clipping.x, y, rightX, y);", "-\t\t\ty += itemHeight;", "-\t\t}", "-\t\tgc.setForeground (oldForeground);", "-\t}", "-\t", "-\tif (itemsCount < startIndex) return;\t\t/* no items to paint */", "-\tint endIndex = startIndex + Compatibility.ceil (clipping.height, itemHeight);", "-\tif (endIndex < 0) return;\t\t/* no items to paint */", "+\tint endIndex = -1;", "+\tif (startIndex < itemsCount) {", "+\t\tendIndex = startIndex + Compatibility.ceil (clipping.height, itemHeight);", "+\t}", "+", "+\t/* fill background not handled by items */", "+\tgc.setBackground (getBackground ());", "+\tgc.setClipping (clipping);", "+\tRectangle clientArea = getClientArea ();", "+\tint bottomY = endIndex >= 0 ? getItemY (items [endIndex]) + itemHeight : 0;", "+\tint fillHeight = Math.max (0, clientArea.height - bottomY);", "+\tif (fillHeight > 0) {\t/* space below bottom item */", "+\t\tgc.fillRectangle (0, bottomY, clientArea.width, fillHeight);", "+\t}", "+\tif (columns.length > 0) {", "+\t\tTableColumn column = columns [columns.length - 1];\t/* last column */", "+\t\tint rightX = column.getX () + column.width;", "+\t\tif (rightX < clientArea.width) {", "+\t\t\tgc.fillRectangle (rightX, 0, clientArea.width - rightX, clientArea.height - fillHeight);", "+\t\t}", "+\t}", "+", "+\t/* repaint grid lines */", "+\tif (linesVisible) {", "+\t\tColor oldForeground = gc.getForeground ();", "+\t\tgc.setForeground (display.getSystemColor (SWT.COLOR_WIDGET_LIGHT_SHADOW));", "+\t\tif (numColumns > 0 && startColumn != -1) {", "+\t\t\t/* vertical column lines */", "+\t\t\tfor (int i = startColumn; i <= endColumn; i++) {", "+\t\t\t\tint x = columns [i].getX () + columns [i].width - 1;", "+\t\t\t\tgc.drawLine (x, clipping.y, x, clipping.y + clipping.height);", "+\t\t\t}", "+\t\t}", "+\t\t/* horizontal item lines */", "+\t\tbottomY = clipping.y + clipping.height;", "+\t\tint rightX = clipping.x + clipping.width;", "+\t\tint y = (clipping.y - headerHeight) / itemHeight * itemHeight + headerHeight;", "+\t\twhile (y <= bottomY) {", "+\t\t\tgc.drawLine (clipping.x, y, rightX, y);", "+\t\t\ty += itemHeight;", "+\t\t}", "+\t\tgc.setForeground (oldForeground);", "+\t}"]}], "num": 59247}
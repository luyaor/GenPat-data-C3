{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50c44b7cdbfdad48f35b048af10f8be3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baf179dbb2e3579273bc9238dfd12f5d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGeneratorAppUI.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  void createMembersPanel(Composite panel)", "signatureAfterChange": "  void createMembersPanel(Composite panel)", "diff": ["-\t\t\tItemData memberData = (ItemData)item.getData();", "+\t\t\tJNIItem memberData = (JNIItem)item.getData();", "-\t\t\tMetaData metaData = app.getMetaData();", "-\t\t\tif (memberData instanceof FieldData) {", "-\t\t\t\tFieldData fieldData = (FieldData)memberData;", "+\t\t\tif (memberData instanceof JNIField) {", "+\t\t\t\tJNIField field = (JNIField)memberData;", "-\t\t\t\t\t\tfieldData.setCast(text);", "-\t\t\t\t\t\titem.setText(column, fieldData.getCast());", "+\t\t\t\t\t\tfield.setCast(text);", "+\t\t\t\t\t\titem.setText(column, field.getCast());", "-\t\t\t\t\t\tfieldData.setAccessor(text.equals(fieldData.getField().getName()) ? \"\" : text);", "-\t\t\t\t\t\titem.setText(column, fieldData.getAccessor());", "+\t\t\t\t\t\tfield.setAccessor(text.equals(field.getName()) ? \"\" : text);", "+\t\t\t\t\t\titem.setText(column, field.getAccessor());", "-\t\t\t\t\t\tfieldData.setExclude(text);", "-\t\t\t\t\t\titem.setText(column, fieldData.getExclude());", "+\t\t\t\t\t\tfield.setExclude(text);", "+\t\t\t\t\t\titem.setText(column, field.getExclude());", "-\t\t\t\tmetaData.setMetaData(fieldData.getField(), fieldData);", "-\t\t\t} else if (memberData instanceof MethodData) {", "-\t\t\t\tMethodData methodData = (MethodData)memberData;", "+\t\t\t} else if (memberData instanceof JNIMethod) {", "+\t\t\t\tJNIMethod method = (JNIMethod)memberData;", "-\t\t\t\t\t\tmethodData.setAccessor(text.equals(methodData.getMethod().getName()) ? \"\" : text);", "-\t\t\t\t\t\titem.setText(column, methodData.getAccessor());", "+\t\t\t\t\t\tmethod.setAccessor(text.equals(method.getName()) ? \"\" : text);", "+\t\t\t\t\t\titem.setText(column, method.getAccessor());", "-\t\t\t\t\t\tmethodData.setExclude(text);", "-\t\t\t\t\t\titem.setText(column, methodData.getExclude());", "+\t\t\t\t\t\tmethod.setExclude(text);", "+\t\t\t\t\t\titem.setText(column, method.getExclude());", "-\t\t\t\tmetaData.setMetaData(methodData.getMethod(), methodData);", "-\t\t\tItemData data = (ItemData)item.getData();", "+\t\t\tJNIItem data = (JNIItem)item.getData();", "-\t\t\tMetaData metaData = app.getMetaData();", "-\t\t\tif (data instanceof FieldData) {", "-\t\t\t\tFieldData fieldData = (FieldData)data;", "-\t\t\t\tmetaData.setMetaData(fieldData.getField(), fieldData);", "-\t\t\t\tmembersLt.getColumn(column).pack();", "-\t\t\t} else if (data instanceof MethodData) {", "-\t\t\t\tMethodData methodData = (MethodData)data;", "-\t\t\t\tmetaData.setMetaData(methodData.getMethod(), methodData);", "-\t\t\t\tmembersLt.getColumn(column).pack();", "-\t\t\t}", "+\t\t\tmembersLt.getColumn(column).pack();", "-\t\t\t\t\tItemData itemData = (ItemData)item.getData();", "-\t\t\t\t\tif (itemData instanceof FieldData) {", "-\t\t\t\t\t\tFieldData data = (FieldData)itemData;", "+\t\t\t\t\tObject itemData = item.getData();", "+\t\t\t\t\tif (itemData instanceof JNIField) {", "+\t\t\t\t\t\tJNIField field = (JNIField)itemData;", "-\t\t\t\t\t\t\t\tcase FIELD_CAST_COLUMN: text = data.getCast(); break;", "+\t\t\t\t\t\t\t\tcase FIELD_CAST_COLUMN: text = field.getCast(); break;", "-\t\t\t\t\t\t\t\t\ttext = data.getAccessor(); ", "+\t\t\t\t\t\t\t\t\ttext = field.getAccessor(); ", "-\t\t\t\t\t\t\t\t\t\ttext = data.getField().getName();", "+\t\t\t\t\t\t\t\t\t\ttext = field.getName();", "-\t\t\t\t\t\t\t\tcase FIELD_EXCLUDE_COLUMN: text = data.getExclude(); break;", "+\t\t\t\t\t\t\t\tcase FIELD_EXCLUDE_COLUMN: text = field.getExclude(); break;", "-\t\t\t\t\t\t\tmemberEditorLt.setItems(FieldData.getAllFlags());", "-\t\t\t\t\t\t\tmemberEditorLt.setSelection(data.getFlags());", "+\t\t\t\t\t\t\tmemberEditorLt.setItems(JNIField.FLAGS);", "+\t\t\t\t\t\t\tmemberEditorLt.setSelection(field.getFlags());", "-\t\t\t\t\t} else if (itemData instanceof MethodData) {", "-\t\t\t\t\t\tMethodData data = (MethodData)itemData;", "+\t\t\t\t\t} else if (itemData instanceof JNIMethod) {", "+\t\t\t\t\t\tJNIMethod method = (JNIMethod)itemData;", "-\t\t\t\t\t\t\t\t\ttext = data.getAccessor();", "-\t\t\t\t\t\t\t\t\tif (text.length() == 0) text = data.getMethod().getName();", "+\t\t\t\t\t\t\t\t\ttext = method.getAccessor();", "+\t\t\t\t\t\t\t\t\tif (text.length() == 0) text = method.getName();", "-\t\t\t\t\t\t\t\tcase METHOD_EXCLUDE_COLUMN: text = data.getExclude(); break;", "+\t\t\t\t\t\t\t\tcase METHOD_EXCLUDE_COLUMN: text = method.getExclude(); break;", "-\t\t\t\t\t\t\tmemberEditorLt.setItems(MethodData.getAllFlags());", "-\t\t\t\t\t\t\tmemberEditorLt.setSelection(data.getFlags());", "+\t\t\t\t\t\t\tmemberEditorLt.setItems(JNIMethod.FLAGS);", "+\t\t\t\t\t\t\tmemberEditorLt.setSelection(method.getFlags());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a8e154478f8dddb3cf5fbb059ec9b8b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGeneratorAppUI.java", "commitBeforeChange": "538267cb94137fcc12876cd1d12be54cf7685c40", "commitAfterChange": "e66b3ab5b69ccfced123b97aa21b24b29ad00f29", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  void createClassesPanel(Composite panel)", "signatureAfterChange": "  void createClassesPanel(Composite panel)", "diff": ["+\tcolumn = new TableColumn(classesLt, SWT.NONE, CLASS_FLAGS_COLUMN);", "+\tcolumn.setText(\"Flags\");", "+\t", "+\tclassTextEditor = new TableEditor(classesLt);", "+\tclassTextEditor.grabHorizontal = true;", "+\tclassEditorTx = new Text(classesLt, SWT.SINGLE);", "+\tclassTextEditor.setEditor(classEditorTx);", "+\tListener classTextListener = new Listener() {", "+\t\tpublic void handleEvent(Event e) {", "+\t\t\tclassEditorTx.setVisible(false);", "+\t\t\tTableItem item = classTextEditor.getItem();", "+\t\t\tif (item == null) return;", "+\t\t\tint column = classTextEditor.getColumn();", "+\t\t\tClassData classData = (ClassData)item.getData();", "+\t\t\tif (column == CLASS_EXCLUDE_COLUMN) {", "+\t\t\t\tString text = classEditorTx.getText();", "+\t\t\t\tclassData.setExclude(text);", "+\t\t\t\titem.setText(column, classData.getExclude());", "+\t\t\t\tMetaData metaData = app.getMetaData();", "+\t\t\t\tmetaData.setMetaData(classData.getClazz(), classData);", "+\t\t\t\tclassesLt.getColumn(column).pack();", "+\t\t\t}", "+\t\t}", "+\t};", "+\tclassEditorTx.addListener(SWT.DefaultSelection, classTextListener);", "+\tclassEditorTx.addListener(SWT.FocusOut, classTextListener);", "+\t", "+\tclassListEditor = new TableEditor(classesLt);", "+\tclassEditorLt = new List(classesLt, SWT.MULTI | SWT.BORDER);", "+\tclassEditorLt.setItems(ClassData.getAllFlags());", "+\tPoint size = classEditorLt.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\tclassListEditor.minimumWidth = size.x;", "+\tclassListEditor.minimumHeight = size.y;", "+\tclassListEditor.setEditor(classEditorLt);", "+\tListener classesListListener = new Listener() {", "+\t\tpublic void handleEvent(Event e) {", "+\t\t\tclassEditorLt.setVisible(false);", "+\t\t\tTableItem item = classListEditor.getItem();", "+\t\t\tif (item == null) return;", "+\t\t\tint column = classListEditor.getColumn();", "+\t\t\tClassData classData = (ClassData)item.getData();", "+\t\t\tif (column == CLASS_FLAGS_COLUMN) {", "+\t\t\t\tString[] flags = classEditorLt.getSelection();", "+\t\t\t\tclassData.setFlags(flags);", "+\t\t\t\titem.setText(column, getFlagsString(classData.getFlags()));", "+\t\t\t\titem.setChecked(classData.isGenerate());", "+\t\t\t\tMetaData metaData = app.getMetaData();", "+\t\t\t\tmetaData.setMetaData(classData.getClazz(), classData);", "+\t\t\t\tclassesLt.getColumn(column).pack();", "+\t\t\t}", "+\t\t}", "+\t};", "+\tclassEditorLt.addListener(SWT.DefaultSelection, classesListListener);", "+\tclassEditorLt.addListener(SWT.FocusOut, classesListListener);", "+", "+\tclassesLt.addListener(SWT.MouseDown, new Listener() {", "+\t\tpublic void handleEvent(Event e) {", "+\t\t\tif (e.button != 1) return;", "+\t\t\tPoint pt = new Point(e.x, e.y);", "+\t\t\tTableItem item = classesLt.getItem(pt);", "+\t\t\tif (item == null) return;", "+\t\t\tint column = -1;", "+\t\t\tfor (int i = 0; i < classesLt.getColumnCount(); i++) {", "+\t\t\t\tif (item.getBounds(i).contains(pt)) {", "+\t\t\t\t\tcolumn = i;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}\t\t\t\t", "+\t\t\t}", "+\t\t\tif (column == -1) return;", "+\t\t\tClassData data = (ClassData)item.getData();", "+\t\t\tif (column == CLASS_EXCLUDE_COLUMN) {", "+\t\t\t\tclassTextEditor.setColumn(column);", "+\t\t\t\tclassTextEditor.setItem(item);", "+\t\t\t\tclassEditorTx.setText(data.getExclude());", "+\t\t\t\tclassEditorTx.selectAll();", "+\t\t\t\tclassEditorTx.setVisible(true);", "+\t\t\t\tclassEditorTx.setFocus();", "+\t\t\t} else if (column == CLASS_FLAGS_COLUMN) {", "+\t\t\t\tif (classesLt.getClientArea().contains(pt.x, pt.y + classEditorLt.getSize().y)) {", "+\t\t\t\t\tclassListEditor.verticalAlignment = SWT.TOP;", "+\t\t\t\t} else {", "+\t\t\t\t\tclassListEditor.verticalAlignment = SWT.BOTTOM;", "+\t\t\t\t}", "+\t\t\t\tclassListEditor.setColumn(column);", "+\t\t\t\tclassListEditor.setItem(item);", "+\t\t\t\tclassEditorLt.setSelection(data.getFlags());", "+\t\t\t\tclassEditorLt.setVisible(true);", "+\t\t\t\tclassEditorLt.setFocus();", "+\t\t\t}", "+\t\t}", "+\t});"]}], "num": 35445}
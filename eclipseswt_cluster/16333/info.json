{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34ee6386c27d0138326a0e117ceea7c9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aac018937761e7c80d57a97b234eeb5d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void add (String string)", "signatureAfterChange": "  public void add (String string)", "diff": ["- */", "+", "-    Pair p= new Pair(string);", "-\tfData.add(p);", "-\tOS.AddDataBrowserItems(handle, OS.kDataBrowserNoItem, 1, new int[] { p.fId }, 0);", "+\tint [] id = new int [] {itemCount + 1};", "+\tif (OS.AddDataBrowserItems (handle, OS.kDataBrowserNoItem, 1, id, 0) != OS.noErr) {", "+\t\terror (SWT.ERROR_ITEM_NOT_ADDED);", "+\t}", "+\tif (itemCount == items.length) {", "+\t\tString [] newItems = new String [itemCount + 4];", "+\t\tSystem.arraycopy (items, 0, newItems, 0, items.length);", "+\t\titems = newItems;", "+\t}", "+\titems [itemCount++] = string;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "151cfb1845a9ea835cac7a1f96260d25", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "89dd18f56416766e9f25e99fa93a3cfdf736ff7e", "commitAfterChange": "0333c3cd6e1227d0185cdb60c13b053083d72b21", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void setContents(Object[] data, Transfer[] dataTypes)", "signatureAfterChange": " public void setContents(Object[] data, Transfer[] dataTypes)", "diff": ["-\t", "-\tOS.ClearCurrentScrap();", "-\tint[] scrapHandle = new int[1];", "-\tOS.GetCurrentScrap(scrapHandle);", "-\tint scrap = scrapHandle[0];", "+\tif (OS.ClearCurrentScrap() != OS.noErr) {", "+\t\tDND.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t}", "+\tint[] scrap = new int[1];", "+\tif (OS.GetCurrentScrap(scrap) != OS.noErr) {", "+\t\tDND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);", "+\t}", "-\tfor (int i= 0; i < dataTypes.length; i++) {", "-\t\tint[] ids = dataTypes[i].getTypeIds();", "-\t\tfor (int j= 0; j < ids.length; j++) {", "+\tfor (int i=0; i<dataTypes.length; i++) {", "+\t\tint[] typeIds = dataTypes[i].getTypeIds();", "+\t\tfor (int j=0; j<typeIds.length; j++) {", "-\t\t\ttransferData.type = ids[j];", "-\t\t\tdataTypes[i].javaToNative(data[i], transferData);", "-\t\t\tif (transferData.result != OS.noErr)", "+\t\t\ttransferData.type = typeIds[j];", "+\t\t\tdataTypes[i].javaToNative(data[i], transferData); ", "+\t\t\tif (transferData.result != OS.noErr) {", "-\t\t\tif (OS.PutScrapFlavor(scrap, transferData.type, 0, transferData.data.length, transferData.data) != OS.noErr){", "+\t\t\t}", "+\t\t\t//Drag and Drop can handle multiple items in one transfer but the", "+\t\t\t//Clipboard can not.", "+\t\t\tbyte[] datum = transferData.data[0];", "+\t\t\tif (OS.PutScrapFlavor(scrap[0], transferData.type, 0, datum.length, datum) != OS.noErr){"]}], "num": 16333}
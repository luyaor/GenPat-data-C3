{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c71ab2ea442f23859b1d633ec7a417bd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f22b72cdb7fa216b5d73a91551e5f11", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "e7fb43dbb2484659429530f9cab714cb6e3de9f3", "commitAfterChange": "d69b8bce251422ebdcfdac8edd7d2bcf938dfebd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public static String [] getExtensions ()", "signatureAfterChange": " public static String [] getExtensions ()", "diff": ["- */\r", "-public static String [] getExtensions () {\r", "-\tswitch (Desktop) {\r", "-\t\tcase DESKTOP_KDE:\r", "-\t\t\tVector names = new Vector ();\r", "-\t\t\tint serviceList = KDE.KService_allServices ();\r", "-\t\t\tint listBeginning = KDE.KServiceList_begin (serviceList);\r", "-\t\t\tint listEnd = KDE.KServiceList_end (serviceList);\r", "-\t\t\tint iterator = KDE.KServiceListIterator_new (listBeginning);\r", "-\t\t\twhile (true) {\r", "-\t\t\t\tif (KDE.KServiceListIterator_equals (iterator, listEnd) != 0) break;\r", "-\t\t\t\tint kService = KDE.KServiceListIterator_dereference (iterator);\r", "-\t\t\t\tint serviceType = KDE.KService_type (kService);\r", "-\t\t\t\tbyte [] applicationType = Converter.wcsToMbcs (null, \"Application\", true);\r", "-\t\t\t\tint appString = KDE.QString_new (applicationType);\r", "-\t\t\t\tif (KDE.QString_equals (serviceType, appString) != 0) {\r", "-\t\t\t\t\tint appName = KDE.KService_name (kService);\r", "-\t\t\t\t\tnames.addElement (kde_convertQStringAndFree (appName));\r", "-\t\t\t\t}\r", "-\t\t\t\tKDE.QString_delete (appString);\r", "-\t\t\t\tKDE.KServiceListIterator_increment (iterator);\r", "-\t\t\t}\r", "-\t\t\tKDE.KServiceListIterator_delete (iterator);\r", "-\t\t\tKDE.KServiceList_delete (serviceList);\r", "-\t\t\tString[] appNames = new String [names.size ()];\r", "-\t\t\tfor (int i=0; i <names.size (); i++) {\r", "-\t\t\t\tappNames [i] = (String) names.elementAt (i);\r", "-\t\t\t}\r", "-\t\t\treturn appNames;\r", "-\r", "-\t\tcase DESKTOP_GNOME:\r", "-\t\t\t// Obtain the mime type/extension information.\r", "-\t\t\tHashtable mimeInfo = gnome_getMimeInfo();\r", "-\t\t\tint  index;\r", "-\t\t\t\r", "-\t\t\t// Create a sorted set of the file extensions.\r", "-\t\t\tVector extensions = new Vector();\r", "-\t\t\tIterator keys = mimeInfo.keySet().iterator();\r", "-\t\t\twhile (keys.hasNext()) {\r", "-\t\t\t\tString mimeType = (String) keys.next();\r", "-\t\t\t\tVector mimeExts = (Vector) mimeInfo.get( mimeType );\r", "-\t\t\t\tfor (index = 0; index < mimeExts.size(); index++){\r", "-\t\t\t\t\tif (!extensions.contains( mimeExts.elementAt( index ) )) {\r", "-\t\t\t\t\t\textensions.add( mimeExts.elementAt( index ) );\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\t// Return the list of extensions.\r", "-\t\t\tString[] extStrings = new String[ extensions.size() ];\r", "-\t\t\tfor (index = 0; index < extensions.size(); index++) {\r", "-\t\t\t\textStrings[ index ] = (String) extensions.elementAt( index );\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\treturn extStrings;\r", "-\t}\r", "-\treturn new String[0];\r", "-}\r", "+ */", "+public static String [] getExtensions () {", "+\treturn getExtensions( Display.getCurrent() );", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eca9a388aa00eca0c58b0bfb1ffac577", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "e7fb43dbb2484659429530f9cab714cb6e3de9f3", "commitAfterChange": "d69b8bce251422ebdcfdac8edd7d2bcf938dfebd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public static String [] getExtensions ()", "signatureAfterChange": " private static String[] getExtensions( Display display )", "diff": ["- */\r", "-public static String [] getExtensions () {\r", "-\tswitch (Desktop) {\r", "-\t\tcase DESKTOP_KDE:\r", "-\t\t\tVector names = new Vector ();\r", "-\t\t\tint serviceList = KDE.KService_allServices ();\r", "-\t\t\tint listBeginning = KDE.KServiceList_begin (serviceList);\r", "-\t\t\tint listEnd = KDE.KServiceList_end (serviceList);\r", "-\t\t\tint iterator = KDE.KServiceListIterator_new (listBeginning);\r", "-\t\t\twhile (true) {\r", "-\t\t\t\tif (KDE.KServiceListIterator_equals (iterator, listEnd) != 0) break;\r", "-\t\t\t\tint kService = KDE.KServiceListIterator_dereference (iterator);\r", "-\t\t\t\tint serviceType = KDE.KService_type (kService);\r", "-\t\t\t\tbyte [] applicationType = Converter.wcsToMbcs (null, \"Application\", true);\r", "-\t\t\t\tint appString = KDE.QString_new (applicationType);\r", "-\t\t\t\tif (KDE.QString_equals (serviceType, appString) != 0) {\r", "-\t\t\t\t\tint appName = KDE.KService_name (kService);\r", "-\t\t\t\t\tnames.addElement (kde_convertQStringAndFree (appName));\r", "-\t\t\t\t}\r", "-\t\t\t\tKDE.QString_delete (appString);\r", "-\t\t\t\tKDE.KServiceListIterator_increment (iterator);\r", "-\t\t\t}\r", "-\t\t\tKDE.KServiceListIterator_delete (iterator);\r", "-\t\t\tKDE.KServiceList_delete (serviceList);\r", "-\t\t\tString[] appNames = new String [names.size ()];\r", "-\t\t\tfor (int i=0; i <names.size (); i++) {\r", "-\t\t\t\tappNames [i] = (String) names.elementAt (i);\r", "-\t\t\t}\r", "-\t\t\treturn appNames;\r", "-\r", "-\t\tcase DESKTOP_GNOME:\r", "-\t\t\t// Obtain the mime type/extension information.\r", "-\t\t\tHashtable mimeInfo = gnome_getMimeInfo();\r", "-\t\t\tint  index;\r", "-\t\t\t\r", "-\t\t\t// Create a sorted set of the file extensions.\r", "-\t\t\tVector extensions = new Vector();\r", "-\t\t\tIterator keys = mimeInfo.keySet().iterator();\r", "-\t\t\twhile (keys.hasNext()) {\r", "-\t\t\t\tString mimeType = (String) keys.next();\r", "-\t\t\t\tVector mimeExts = (Vector) mimeInfo.get( mimeType );\r", "-\t\t\t\tfor (index = 0; index < mimeExts.size(); index++){\r", "-\t\t\t\t\tif (!extensions.contains( mimeExts.elementAt( index ) )) {\r", "-\t\t\t\t\t\textensions.add( mimeExts.elementAt( index ) );\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\t// Return the list of extensions.\r", "-\t\t\tString[] extStrings = new String[ extensions.size() ];\r", "-\t\t\tfor (index = 0; index < extensions.size(); index++) {\r", "-\t\t\t\textStrings[ index ] = (String) extensions.elementAt( index );\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\treturn extStrings;\r", "-\t}\r", "-\treturn new String[0];\r", "-}\r", "+ */", "+private static String[] getExtensions( Display display ) {", "+\tint desktop = getDesktop( display );", "+\tHashtable mimeInfo = null;", "+\tif (desktop == DESKTOP_KDE)   mimeInfo = kde_getMimeInfo();", "+\tif (desktop == DESKTOP_GNOME) mimeInfo = gnome_getMimeInfo();", "+\tif (desktop == DESKTOP_CDE)   mimeInfo = cde_getDataTypeInfo();", "+\tif (mimeInfo == null) return new String[0];", "+", "+\t\t\t", "+\t// Create a unique set of the file extensions.", "+\tVector extensions = new Vector();", "+\tIterator keys = mimeInfo.keySet().iterator();", "+\twhile (keys.hasNext()) {", "+\t\tString mimeType = (String) keys.next();", "+\t\tVector mimeExts = (Vector) mimeInfo.get( mimeType );", "+\t\tfor (int index = 0; index < mimeExts.size(); index++){", "+\t\t\tif (!extensions.contains( mimeExts.elementAt( index ) )) {", "+\t\t\t\textensions.add( mimeExts.elementAt( index ) );", "+\t\t\t}", "+\t\t}", "+\t}", "+\t\t\t", "+\t// Return the list of extensions.", "+\tString[] extStrings = new String[ extensions.size() ];", "+\tfor (int index = 0; index < extensions.size(); index++) {", "+\t\textStrings[ index ] = (String) extensions.elementAt( index );", "+\t}\t\t\t", "+\treturn extStrings;", "+}"]}], "num": 10153}
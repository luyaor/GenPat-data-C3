{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5dc62739392c6e13f09d29c3fb6a7edc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebdb561f15d53a703d76a6d916b462e7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ExpandItem.java", "commitBeforeChange": "a3a1752d4cca52a10819bc086957df9ad04a0a87", "commitAfterChange": "9effcc166dfa61e54b0f9bb76b17f1175f53b69b", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  void resizeControl (int yScroll)", "signatureAfterChange": "  void resizeControl (int yScroll)", "diff": ["-\tGtkAllocation allocation = new GtkAllocation ();", "-\t\t\tint x = 0;", "-\t\t\tint y = 0;", "-\t\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "-\t\t\t\tOS.gtk_widget_get_allocation(clientHandle, allocation);", "-\t\t\t\tx = allocation.x;", "-\t\t\t\ty = allocation.y;", "-\t\t\t} else {", "-\t\t\t\tx = OS.GTK_WIDGET_X (clientHandle);", "-\t\t\t\ty = OS.GTK_WIDGET_Y (clientHandle);", "-\t\t\t}", "+\t\t\tGtkAllocation allocation = new GtkAllocation ();", "+\t\t\tgtk_widget_get_allocation (clientHandle, allocation);", "+\t\t\tint x = allocation.x;", "+\t\t\tint y = allocation.y;", "-\t\t\t\tint width = 0;", "-\t\t\t\tint height = 0;", "-\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "-\t\t\t\t\tOS.gtk_widget_get_allocation(clientHandle, allocation);", "-\t\t\t\t\twidth = allocation.width;", "-\t\t\t\t\theight = allocation.height;\t", "-\t\t\t\t} else {", "-\t\t\t\t\twidth = OS.GTK_WIDGET_WIDTH (clientHandle);", "-\t\t\t\t\theight = OS.GTK_WIDGET_HEIGHT (clientHandle);\t", "-\t\t\t\t}", "+\t\t\t\tint width = allocation.width;", "+\t\t\t\tint height = allocation.height;\t", "-\t\t\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "-\t\t\t\t\t\t\tOS.gtk_widget_get_allocation(parent.scrolledHandle, allocation);", "-\t\t\t\t\t\t\twidth = allocation.width - parent.vScrollBarWidth () - 2 * parent.spacing;\t", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\twidth = OS.GTK_WIDGET_WIDTH (parent.scrolledHandle) - parent.vScrollBarWidth () - 2 * parent.spacing;\t", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tgtk_widget_get_allocation (parent.scrolledHandle, allocation);", "+\t\t\t\t\t\twidth = allocation.width - parent.vScrollBarWidth () - 2 * parent.spacing;\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21ed30b033ab4c19f03ba06268bfc683", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "4631a5a5553c2a27a1c80b2611f4f0cea8081a20", "commitAfterChange": "21eb151f1a668a710645fe690cf473d0b86ddaf0", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public Rectangle getClipping()", "signatureAfterChange": " public Rectangle getClipping()", "diff": ["-\tlong /*int*/ rgn = 0;", "-\t\tif (OS.GTK_VERSION >= OS.VERSION(3, 0, 0)) {", "-\t\t\trgn = Cairo.cairo_region_create ();", "-\t\t\tcairo_rectangle_int_t rect = new cairo_rectangle_int_t ();", "-\t\t\trect.width = width;", "-\t\t\trect.height = height;", "-\t\t\tCairo.cairo_region_union_rectangle (rgn, rect);", "-\t\t\tif (damageRgn != 0) {", "-\t\t\t\tCairo.cairo_region_intersect (rgn, damageRgn);", "-\t\t\t}", "-\t\t\t/* Intersect visible bounds with clipping */", "-\t\t\tif (clipRgn != 0) {", "-\t\t\t\t/* Convert clipping to device space if needed */", "-\t\t\t\tif (data.clippingTransform != null) {", "-\t\t\t\t\tclipRgn = convertRgn(clipRgn, data.clippingTransform);", "-\t\t\t\t\tCairo.cairo_region_intersect (rgn, clipRgn);", "-\t\t\t\t\tCairo.cairo_region_destroy (clipRgn);", "-\t\t\t\t} else {", "-\t\t\t\t\tCairo.cairo_region_intersect (rgn, clipRgn);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t/* Convert to user space */", "-\t\t\tif (cairo != 0) {", "-\t\t\t\tdouble[] matrix = new double[6];", "-\t\t\t\tCairo.cairo_get_matrix(cairo, matrix);", "-\t\t\t\tCairo.cairo_matrix_invert(matrix);", "-\t\t\t\tclipRgn = convertRgn(rgn, matrix);", "-\t\t\t\tCairo.cairo_region_destroy (rgn);", "-\t\t\t\trgn = clipRgn;", "-\t\t\t}", "-\t\t\tCairo.cairo_region_get_extents (rgn, rect);", "-\t\t\tCairo.cairo_region_destroy (rgn);", "-\t\t\tx = rect.x;", "-\t\t\ty = rect.y;", "-\t\t\twidth = rect.width;", "-\t\t\theight = rect.height;", "-\t\t} else {", "-\t\t\trgn = OS.gdk_region_new ();", "-\t\t\tGdkRectangle rect = new GdkRectangle();", "-\t\t\trect.width = width;", "-\t\t\trect.height = height;", "-\t\t\tOS.gdk_region_union_with_rect(rgn, rect);", "-\t\t\tif (damageRgn != 0) {", "-\t\t\t\tOS.gdk_region_intersect (rgn, damageRgn);", "-\t\t\t}", "-\t\t\t/* Intersect visible bounds with clipping */", "-\t\t\tif (clipRgn != 0) {", "-\t\t\t\t/* Convert clipping to device space if needed */", "-\t\t\t\tif (data.clippingTransform != null) {", "-\t\t\t\t\tclipRgn = convertRgn(clipRgn, data.clippingTransform);", "-\t\t\t\t\tOS.gdk_region_intersect (rgn, clipRgn);", "-\t\t\t\t\tOS.gdk_region_destroy (clipRgn);", "-\t\t\t\t} else {", "-\t\t\t\t\tOS.gdk_region_intersect (rgn, clipRgn);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t/* Convert to user space */", "-\t\t\tif (cairo != 0) {", "-\t\t\t\tdouble[] matrix = new double[6];", "-\t\t\t\tCairo.cairo_get_matrix(cairo, matrix);", "-\t\t\t\tCairo.cairo_matrix_invert(matrix);", "-\t\t\t\tclipRgn = convertRgn(rgn, matrix);", "-\t\t\t\tOS.gdk_region_destroy (rgn);", "-\t\t\t\trgn = clipRgn;", "-\t\t\t}", "-\t\t\tOS.gdk_region_get_clipbox(rgn, rect);", "-\t\t\tOS.gdk_region_destroy (rgn);", "-\t\t\tx = rect.x;", "-\t\t\ty = rect.y;", "-\t\t\twidth = rect.width;", "-\t\t\theight = rect.height;", "+\t\tlong /*int*/ rgn = OS.gdk_region_new();", "+\t\tGdkRectangle rect = new GdkRectangle();", "+\t\trect.width = width;", "+\t\trect.height = height;", "+\t\tOS.gdk_region_union_with_rect(rgn, rect);", "+\t\tif (damageRgn != 0) {", "+\t\t\tOS.gdk_region_intersect (rgn, damageRgn);", "-\t\t", "+\t\t/* Intersect visible bounds with clipping */", "+\t\tif (clipRgn != 0) {", "+\t\t\t/* Convert clipping to device space if needed */", "+\t\t\tif (data.clippingTransform != null) {", "+\t\t\t\tclipRgn = convertRgn(clipRgn, data.clippingTransform);", "+\t\t\t\tOS.gdk_region_intersect(rgn, clipRgn);", "+\t\t\t\tOS.gdk_region_destroy(clipRgn);", "+\t\t\t} else {", "+\t\t\t\tOS.gdk_region_intersect(rgn, clipRgn);", "+\t\t\t}", "+\t\t}", "+\t\t/* Convert to user space */", "+\t\tif (cairo != 0) {", "+\t\t\tdouble[] matrix = new double[6];", "+\t\t\tCairo.cairo_get_matrix(cairo, matrix);", "+\t\t\tCairo.cairo_matrix_invert(matrix);", "+\t\t\tclipRgn = convertRgn(rgn, matrix);", "+\t\t\tOS.gdk_region_destroy(rgn);", "+\t\t\trgn = clipRgn;", "+\t\t}", "+\t\tOS.gdk_region_get_clipbox(rgn, rect);", "+\t\tOS.gdk_region_destroy(rgn);", "+\t\tx = rect.x;", "+\t\ty = rect.y;", "+\t\twidth = rect.width;", "+\t\theight = rect.height;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0da22079d8c9ec2a4a8c62ebfb2b082", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/ViewForm.java", "commitBeforeChange": "dfc9c2c27083a19c0dc0cbc4bc9dda0223b753d5", "commitAfterChange": "2b27afb0bcf4e50e1711377ad024c076547fac90", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  void onPaint(GC gc)", "signatureAfterChange": "  void onPaint(GC gc)", "diff": ["-\t\t", "-\tif (drawLine1 != -1) {", "-\t\t// top seperator line", "-\t\tgc.setForeground(borderColor1);", "-\t\tgc.drawLine(d.x + BORDER_LEFT, drawLine1, d.x + d.width - BORDER_RIGHT, drawLine1);\t", "-\t}", "-\tif (drawLine2 != -1) {", "-\t\t// content separator line", "-\t\tgc.setForeground(borderColor1);", "-\t\tgc.drawLine(d.x + BORDER_LEFT, drawLine2, d.x + d.width - BORDER_RIGHT, drawLine2);", "-\t}", "-\t// highlight on top", "-\tint y = drawLine1;", "-\tif (y == -1){", "-\t\ty = drawLine2;", "-\t}", "-\tif (y != -1) {", "-\t\tgc.setForeground(getDisplay().getSystemColor(SWT.COLOR_WIDGET_HIGHLIGHT_SHADOW));", "-\t\tgc.drawLine(d.x + BORDER_LEFT + marginWidth, d.y + BORDER_TOP + marginHeight, ", "-\t\t            d.x + BORDER_LEFT + marginWidth, y - 1);", "-\t\tgc.drawLine(d.x + BORDER_LEFT + marginWidth, d.y + BORDER_TOP + marginHeight,", "-\t\t            d.x + d.width - BORDER_RIGHT - marginWidth - 1, d.y + BORDER_TOP + marginHeight);", "-\t}", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c2a9b897e186b2fd715c40eb7f97ceb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "a3a1752d4cca52a10819bc086957df9ad04a0a87", "commitAfterChange": "9effcc166dfa61e54b0f9bb76b17f1175f53b69b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  int gtk_clicked (int widget)", "signatureAfterChange": "  int gtk_clicked (int widget)", "diff": ["-\t\t\t\t\t\tGtkAllocation handleAllocation = new GtkAllocation ();", "-\t\t\t\t\t\tGtkAllocation arrowHandleAllocation = new GtkAllocation ();", "-\t\t\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "-\t\t\t\t\t\t\tOS.gtk_widget_get_allocation(arrowHandle, arrowHandleAllocation);", "-\t\t\t\t\t\t\tOS.gtk_widget_get_allocation(handle, handleAllocation);", "-\t\t\t\t\t\t\tx = arrowHandleAllocation.x - handleAllocation.x;", "-\t\t\t\t\t\t\twidth = arrowHandleAllocation.width;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tx = OS.GTK_WIDGET_X (arrowHandle) - OS.GTK_WIDGET_X (handle);", "-\t\t\t\t\t\t\twidth = OS.GTK_WIDGET_WIDTH (arrowHandle);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "+\t\t\t\t\t\tGtkAllocation allocation = new GtkAllocation ();", "+\t\t\t\t\t\tgtk_widget_get_allocation (arrowHandle, allocation);", "+\t\t\t\t\t\tx = allocation.x;", "+\t\t\t\t\t\twidth = allocation.width;", "+\t\t\t\t\t\tgtk_widget_get_allocation (handle, allocation);", "+\t\t\t\t\t\tx -= allocation.x;", "-\t\t\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "-\t\t\t\t\t\t\tOS.gtk_widget_get_allocation(topHandle, allocation);", "-\t\t\t\t\t\t\tevent.x = allocation.x;", "-\t\t\t\t\t\t\tif ((parent.style & SWT.MIRRORED) != 0) event.x = parent.getClientWidth () - allocation.width - event.x;", "-\t\t\t\t\t\t\tevent.y = allocation.y + allocation.height;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tevent.x = OS.GTK_WIDGET_X (topHandle);", "-\t\t\t\t\t\t\tif ((parent.style & SWT.MIRRORED) != 0) event.x = parent.getClientWidth () - OS.GTK_WIDGET_WIDTH (topHandle) - event.x;", "-\t\t\t\t\t\t\tevent.y = OS.GTK_WIDGET_Y (topHandle) + OS.GTK_WIDGET_HEIGHT (topHandle);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "+\t\t\t\t\t\tgtk_widget_get_allocation (topHandle, allocation);", "+\t\t\t\t\t\tevent.x = allocation.x;", "+\t\t\t\t\t\tif ((parent.style & SWT.MIRRORED) != 0) event.x = parent.getClientWidth () - allocation.width - event.x;", "+\t\t\t\t\t\tevent.y = allocation.y + allocation.height;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20704d3fcbda8a10d95a785ce6aeecf7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "a3a1752d4cca52a10819bc086957df9ad04a0a87", "commitAfterChange": "9effcc166dfa61e54b0f9bb76b17f1175f53b69b", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "  int setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "signatureAfterChange": "  int setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "diff": ["+\tGtkAllocation allocation = new GtkAllocation ();", "+\tgtk_widget_get_allocation (topHandle, allocation);", "-\t\tint oldWidth = 0;", "-\t\tint oldX = 0;", "-\t\tGtkAllocation allocation = new GtkAllocation ();", "-\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "-\t\t\tOS.gtk_widget_get_allocation(topHandle, allocation);", "-\t\t\toldWidth = (state & ZERO_WIDTH) != 0 ? 0 : allocation.width;", "-\t\t\toldX = clientWidth - oldWidth - allocation.x;", "-\t\t} else {", "-\t\t\toldWidth = (state & ZERO_WIDTH) != 0 ? 0 : OS.GTK_WIDGET_WIDTH (topHandle);", "-\t\t\toldX = clientWidth - oldWidth - OS.GTK_WIDGET_X (topHandle);", "-\t\t}", "-\t\t", "+\t\tint oldWidth = (state & ZERO_WIDTH) != 0 ? 0 : allocation.width;", "+\t\tint oldX = clientWidth - oldWidth - allocation.x;", "-\t\t\ty = OS.GTK_WIDGET_Y (topHandle);", "+\t\t\ty = allocation.y;", "-\t\tint oldX = OS.GTK_WIDGET_X (topHandle);", "-\t\tint oldY = OS.GTK_WIDGET_Y (topHandle);", "+\t\tint oldX = allocation.x;", "+\t\tint oldY = allocation.y;", "-\t\tint oldWidth = 0;", "-\t\tint oldHeight = 0;", "-\t\tGtkAllocation allocation = new GtkAllocation ();", "-\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "-\t\t\tOS.gtk_widget_get_allocation(topHandle, allocation);", "-\t\t\toldWidth = (state & ZERO_WIDTH) != 0 ? 0 : allocation.width;", "-\t\t\toldHeight = (state & ZERO_HEIGHT) != 0 ? 0 : allocation.height;", "-\t\t} else {", "-\t\t\toldWidth = (state & ZERO_WIDTH) != 0 ? 0 : OS.GTK_WIDGET_WIDTH (topHandle);", "-\t\t\toldHeight = (state & ZERO_HEIGHT) != 0 ? 0 : OS.GTK_WIDGET_HEIGHT (topHandle);", "-\t\t}", "+\t\tint oldWidth = (state & ZERO_WIDTH) != 0 ? 0 : allocation.width;", "+\t\tint oldHeight = (state & ZERO_HEIGHT) != 0 ? 0 : allocation.height;", "-\t\tGtkAllocation allocation = new GtkAllocation ();", "-\t\t} else {", "-\t\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "-\t\t\t\tOS.gtk_widget_get_allocation(topHandle, allocation);", "-\t\t\t} else {", "-\t\t\t\tallocation.x = OS.GTK_WIDGET_X (topHandle);", "-\t\t\t\tallocation.y = OS.GTK_WIDGET_Y (topHandle);\t", "-\t\t\t}", "-", "-\t\t} else {", "-\t\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "-\t\t\t\tOS.gtk_widget_get_allocation(topHandle, allocation);", "-\t\t\t} else {", "-\t\t\t\tallocation.width = OS.GTK_WIDGET_WIDTH (topHandle);", "-\t\t\t\tallocation.height = OS.GTK_WIDGET_HEIGHT (topHandle);", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82c0bab23d68a6011ffea8edd8a2c900", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "c52a498d1686cfc621ac513da35a69d8c16a84ba", "commitAfterChange": "d0cfa98c33dae187ddb28fd1d4be338006975a20", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  void drawText (int context, int flags, float x, float y, int line, float [] ascent, float [] descent, float [] leading, float fontAscent)", "signatureAfterChange": " public void drawText(String string, int x, int y, boolean isTransparent)", "diff": ["-", "-void drawText (int /*long*/ context, int flags, float /*double*/ x, float /*double*/ y, int /*long*/ line, float /*double*/ [] ascent, float /*double*/ [] descent, float /*double*/ [] leading, float /*double*/ fontAscent) {", "-\tdouble width = 0;", "-\tif ((flags & SWT.DRAW_DELIMITER) != 0 || (flags & SWT.DRAW_TRANSPARENT) == 0) {", "-\t\twidth = OS.CTLineGetTypographicBounds(line, ascent, descent, leading);", "-\t}", "-\tif ((flags & SWT.DRAW_TRANSPARENT) == 0) {", "-\t\tCGRect rect = new CGRect();", "-\t\trect.origin.x = x;", "-\t\trect.origin.y = y;", "-\t\trect.size.width = (float)Math.ceil(width);", "-\t\trect.size.height = (float)Math.ceil(ascent[0] + descent[0] + leading[0]);", "-\t\tOS.CGContextSaveGState(context);", "-\t\tfloat /*double*/ oldAlpha = data.background[3];", "-\t\tdata.background[3] = data.alpha / 255f;", "-\t\tOS.CGContextSetFillColor(context, data.background);", "-\t\tdata.background[3] = oldAlpha;", "-\t\tOS.CGContextFillRect(context, rect);", "-\t\tOS.CGContextRestoreGState(context);", "-\t}", "-\tOS.CGContextSetTextPosition(context, x, y + fontAscent);", "-\tOS.CTLineDraw(line, context);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06850082011d93f4d6fbd8f104f310ff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "ac974de9da95e2001454f2d3c2ad1159e165254a", "commitAfterChange": "6eed09ef63d812f113250ffc9b38871b7bfdd632", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  void computeRuns ()", "signatureAfterChange": "  void computeRuns ()", "diff": ["-\t\t\tif (underlineStyle != OS.PANGO_UNDERLINE_NONE) {", "-\t\t\t\tif (style.underlineColor == null || OS.GTK_VERSION >= OS.VERSION(2, 6, 0)) {", "-\t\t\t\t\tint /*long*/ attr = OS.pango_attr_underline_new(underlineStyle);", "-\t\t\t\t\tOS.memmove(attribute, attr, PangoAttribute.sizeof);", "-\t\t\t\t\tattribute.start_index = byteStart;", "-\t\t\t\t\tattribute.end_index = byteEnd;", "-\t\t\t\t\tOS.memmove(attr, attribute, PangoAttribute.sizeof);", "-\t\t\t\t\tOS.pango_attr_list_insert(attrList, attr);", "-\t\t\t\t\tif (style.underlineColor != null) {", "-\t\t\t\t\t\tGdkColor color = style.underlineColor.handle;", "-\t\t\t\t\t\tattr = OS.pango_attr_underline_color_new(color.red, color.green, color.blue);", "-\t\t\t\t\t\tOS.memmove(attribute, attr, PangoAttribute.sizeof);", "-\t\t\t\t\t\tattribute.start_index = byteStart;", "-\t\t\t\t\t\tattribute.end_index = byteEnd;", "-\t\t\t\t\t\tOS.memmove(attr, attribute, PangoAttribute.sizeof);", "-\t\t\t\t\t\tOS.pango_attr_list_insert(attrList, attr);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (style.strikeout) {", "-\t\t\tif (style.strikeoutColor == null || OS.GTK_VERSION >= OS.VERSION(2, 6, 0)) {", "-\t\t\t\tint /*long*/ attr = OS.pango_attr_strikethrough_new(true);", "+\t\t\tif (underlineStyle != OS.PANGO_UNDERLINE_NONE && style.underlineColor == null) {", "+\t\t\t\tint /*long*/ attr = OS.pango_attr_underline_new(underlineStyle);", "-\t\t\t\tif (style.strikeoutColor != null) {", "-\t\t\t\t\tGdkColor color = style.strikeoutColor.handle;", "-\t\t\t\t\tattr = OS.pango_attr_strikethrough_color_new(color.red, color.green, color.blue);", "-\t\t\t\t\tOS.memmove(attribute, attr, PangoAttribute.sizeof);", "-\t\t\t\t\tattribute.start_index = byteStart;", "-\t\t\t\t\tattribute.end_index = byteEnd;", "-\t\t\t\t\tOS.memmove(attr, attribute, PangoAttribute.sizeof);", "-\t\t\t\t\tOS.pango_attr_list_insert(attrList, attr);", "-\t\t\t\t}", "+\t\t}", "+\t\tif (style.strikeout && style.strikeoutColor == null) {", "+\t\t\tint /*long*/ attr = OS.pango_attr_strikethrough_new(true);", "+\t\t\tOS.memmove(attribute, attr, PangoAttribute.sizeof);", "+\t\t\tattribute.start_index = byteStart;", "+\t\t\tattribute.end_index = byteEnd;", "+\t\t\tOS.memmove(attr, attribute, PangoAttribute.sizeof);", "+\t\t\tOS.pango_attr_list_insert(attrList, attr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "377c2e3d826f90f75fdffd396f62dce1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ScrollBar.java", "commitBeforeChange": "a3a1752d4cca52a10819bc086957df9ad04a0a87", "commitAfterChange": "9effcc166dfa61e54b0f9bb76b17f1175f53b69b", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public Rectangle getThumbTrackBounds ()", "signatureAfterChange": " public Rectangle getThumbTrackBounds ()", "diff": ["-\tint stepperSize = 0;\t", "+\tgtk_widget_get_allocation (handle, allocation);", "-\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "-\t\t\tOS.gtk_widget_get_allocation(handle, allocation);", "-\t\t\tstepperSize = allocation.width;", "-\t\t\tx = allocation.x;", "-\t\t} else {", "-\t\t\tstepperSize = OS.GTK_WIDGET_WIDTH (handle);\t", "-\t\t\tx = OS.GTK_WIDGET_X (handle);", "-\t\t}", "+\t\tint stepperSize = allocation.width;", "+\t\tx = allocation.x;", "-\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "-\t\t\twidth = allocation.width;", "-\t\t\theight = allocation.height - y;\t", "-\t\t} else {", "-\t\t\twidth = OS.GTK_WIDGET_WIDTH (handle);", "-\t\t\theight = OS.GTK_WIDGET_HEIGHT (handle) - y;\t", "-\t\t}", "+\t\twidth = allocation.width;", "+\t\theight = allocation.height - y;\t", "-\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "-\t\t\tOS.gtk_widget_get_allocation(handle, allocation);", "-\t\t\tstepperSize = allocation.height;", "-\t\t} else {", "-\t\t\tstepperSize = OS.GTK_WIDGET_HEIGHT (handle);\t", "-\t\t}", "+\t\tint stepperSize = allocation.height;", "-\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "-\t\t\ty = allocation.y;", "-\t\t\twidth = allocation.width -x;", "-\t\t} else {", "-\t\t\ty = OS.GTK_WIDGET_Y (handle);", "-\t\t\twidth = OS.GTK_WIDGET_WIDTH (handle) - x;\t", "-\t\t}", "+\t\ty = allocation.y;", "+\t\twidth = allocation.width -x;", "-\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "-\t\t\theight = allocation.height;", "-\t\t} else {", "-\t\t\theight = OS.GTK_WIDGET_HEIGHT (handle);\t", "-\t\t}", "+\t\theight = allocation.height;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25888a439694fe460a6975591f15a6b5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ExpandBar.java", "commitBeforeChange": "bd61e9373da7273cd410271556ae244e7083bc6f", "commitAfterChange": "9d60ac884ad5436b1284ebea3463d0bfa1b3d278", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "diff": ["-\t\tif ((ps.right - ps.left) != 0 && (ps.bottom - ps.top) != 0) {", "-\t\t\tint hTheme = 0;", "-\t\t\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "-\t\t\t\thTheme = OS.OpenThemeData (handle, EXPLORERBAR); ", "-\t\t\t}", "-\t\t\tRECT clipRect = new RECT ();", "-\t\t\tOS.SetRect (clipRect, ps.left, ps.top, ps.right, ps.bottom);", "-\t\t\tif (hTheme != 0) {", "-\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\tOS.GetClientRect (handle, rect);", "-\t\t\t\tOS.DrawThemeBackground (hTheme, gc.handle, OS.EBP_HEADERBACKGROUND, 0, rect, clipRect);\t\t\t\t", "-\t\t\t} else {", "-\t\t\t\tdrawBackground (gc.handle);", "-\t\t\t}", "-\t\t\tboolean drawFocus = false;", "-\t\t\tif (handle == OS.GetFocus ()) {", "-\t\t\t\tint uiState = OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "-\t\t\t\tdrawFocus = (uiState & OS.UISF_HIDEFOCUS) == 0;", "-\t\t\t}", "-\t\t\tfor (int i = 0; i < itemCount; i++) {", "-\t\t\t\tExpandItem item = items[i];", "-\t\t\t\titem.drawItem (gc, hTheme, clipRect, i == focusIndex && drawFocus);\t\t", "-\t\t\t}", "-\t\t\tif (hTheme != 0) OS.CloseThemeData (hTheme);", "+\t\tint width = ps.right - ps.left;", "+\t\tint height = ps.bottom - ps.top;", "+\t\tif (width != 0 && height != 0) {", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.SetRect (rect, ps.left, ps.top, ps.right, ps.bottom);", "+\t\t\tdrawWidget (gc, rect);", "-\t\t\t\tevent.x = clipRect.left;", "-\t\t\t\tevent.y = clipRect.top;", "-\t\t\t\tevent.width = clipRect.right - clipRect.left;", "-\t\t\t\tevent.height = clipRect.bottom - clipRect.top;", "+\t\t\t\tevent.x = rect.left;", "+\t\t\t\tevent.y = rect.top;", "+\t\t\t\tevent.width = width;", "+\t\t\t\tevent.height = height;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33b9f1db8d78b6dc05dffa31a734c6a2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "9f800048edf52ed70457895b32ddfeee108ffda8", "commitAfterChange": "90ba9cb2ff16ee7ec96ab5262879eb4d4ffb3bc7", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 83, "signatureBeforeChange": "  void setItemHeight ()", "signatureAfterChange": " void setItemHeight (int itemHeight)", "diff": ["-void setItemHeight () {", "-\t* Bug in Windows.  When both a header and grid lines are", "-\t* displayed, the grid lines do not take into account the", "-\t* height of the header and draw in the wrong place.  The", "-\t* fix is to set the height of the table items to be the", "-\t* height of the header so that the lines draw in the right", "-\t* place.  The height of a table item is the maximum of the", "-\t* height of the font or the height of image list.", "-\t*", "-\t* NOTE: In version 5.80 of COMCTL32.DLL, the bug is fixed.", "-\tif (OS.COMCTL32_VERSION >= OS.VERSION (5, 80)) return;", "-\tint hOldList = OS.SendMessage (handle, OS.LVM_GETIMAGELIST, OS.LVSIL_SMALL, 0);", "-\tif (hOldList != 0) return;", "-\tint hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "-\tRECT rect = new RECT ();", "-\tOS.GetWindowRect (hwndHeader, rect);", "-\tint height = rect.bottom - rect.top - 1;", "-\tint hImageList = OS.ImageList_Create (1, height, 0, 0, 0);", "-\tOS.SendMessage (handle, OS.LVM_SETIMAGELIST, OS.LVSIL_SMALL, hImageList);", "-\tfixCheckboxImageList ();", "-\tOS.SendMessage (handle, OS.LVM_SETIMAGELIST, OS.LVSIL_SMALL, 0);", "-\tif (headerImageList != null) {", "-\t\tint hHeaderImageList = headerImageList.getHandle ();", "-\t\tOS.SendMessage (hwndHeader, OS.HDM_SETIMAGELIST, 0, hHeaderImageList);", "-\tOS.ImageList_Destroy (hImageList);", "+ */", "+/*public*/ void setItemHeight (int itemHeight) {", "+\tcheckWidget ();", "+\tif (itemHeight < -1) error (SWT.ERROR_INVALID_ARGUMENT);", "+\tthis.itemHeight = itemHeight;", "+\tsetItemHeight (true);", "+\tsetScrollWidth (null, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "207d50593bfc5c3391af31d633c91dc4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/DisplayRenderer.java", "commitBeforeChange": "3d9a745937224b38cf406ad93b5005f8ff95bd1b", "commitAfterChange": "1cb1a83b374d003844ef54f22d246c9e3e7d60bd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void drawLineSelectionBackground(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi)", "signatureAfterChange": " protected void drawLineBreakSelection(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi)", "diff": ["-protected void drawLineSelectionBackground(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi) {", "+protected void drawLineBreakSelection(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi) {", "-\tLineCache lineCache = parent.internalGetLineCache();", "-\tStyledTextContent content = getContent();", "-\tint selectionBackgroundWidth = -1;", "-\tint selectionLength = selectionEnd - selectionStart;", "-\tboolean wordWrap = parent.internalGetWordWrap();", "-\tboolean isRightOriented = (parent.getStyle() & SWT.MIRRORED) != 0;", "-\tif (selectionEnd == selectionStart || selectionEnd < 0 || selectionStart > lineLength) {", "+\tif (selectionEnd == selectionStart || selectionEnd < 0 || selectionStart > lineLength || selectionEnd <= lineLength) {", "-\t\tpaintX = parent.getBidiTextPosition(line, selectionStart, bidi);", "+\t\tpaintX = bidi.getTextWidth();", "+\t\t// handle empty line case", "+\t\tif (paintX == 0) {", "+\t\t\tpaintX = StyledText.XINSET;", "+\t\t}", "-\t\tpaintX = getTextPosition(line, lineOffset, selectionStart, filterLineStyles(styles), gc);", "-\t}", "-\t// selection extends past end of line?", "-\tif (selectionEnd > lineLength) {", "-\t\tif ((parent.getStyle() & SWT.FULL_SELECTION) != 0) {", "-\t\t\t// use the greater of the client area width and the content ", "-\t\t\t// width. fixes 1G8IYRD", "-\t\t\tselectionBackgroundWidth = Math.max(getClientArea().width, lineCache.getWidth());", "-\t\t}", "-\t\telse {", "-\t\t\tselectionLength = lineLength - selectionStart;", "-\t\t}", "+\t\tpaintX = getTextPosition(line, lineOffset, lineLength, filterLineStyles(styles), gc);", "-\tif (selectionBackgroundWidth == -1) {", "+\tif ((parent.getStyle() & SWT.FULL_SELECTION) != 0) {", "+\t\tLineCache lineCache = parent.internalGetLineCache();", "+\t\t// use the greater of the client area width and the content ", "+\t\t// width. fixes 1G8IYRD", "+\t\tint selectionBackgroundWidth = Math.max(getClientArea().width, lineCache.getWidth());", "+\t\tgc.fillRectangle(paintX - horizontalScrollOffset + leftMargin, paintY, selectionBackgroundWidth, lineHeight);", "+\t}", "+\telse {", "-", "-\t\tif (wordWrap) {", "+\t\tif (parent.internalGetWordWrap()) {", "+\t\t\tStyledTextContent content = getContent();", "-\t\t\t// offset of this line?\t\t\t", "+\t\t\t// offset of this line?", "-\t\tif (bidi != null) {", "-\t\t\tselectionBackgroundWidth = parent.getBidiTextPosition(line, selectionStart + selectionLength, bidi) - paintX;", "-\t\t}", "-\t\telse {", "-\t\t\tselectionBackgroundWidth = getTextWidth(line, lineOffset, selectionStart, selectionLength, styles, paintX, gc);", "-\t\t}", "-\t\tif (selectionBackgroundWidth < 0) {", "-\t\t\t// width can be negative when in R2L bidi segment", "-\t\t\tpaintX += selectionBackgroundWidth;", "-\t\t\tselectionBackgroundWidth *= -1;", "-\t\t}", "-\t\tif (selectionEnd > lineLength && isWrappedLine == false) {", "-\t\t\tselectionEnd = selectionStart + selectionLength;", "-\t\t\t// if the selection extends past this line, render an additional ", "-\t\t\t// whitespace background at the end of the line to represent the ", "-\t\t\t// selected line break", "-\t\t\tif (bidi != null && selectionEnd > 0 && (bidi.isRightToLeft(selectionEnd - 1) || (isRightOriented && bidi.isRightToLeft(selectionEnd - 1) == false))) {", "-\t\t\t\tint lineEndX = bidi.getTextWidth();", "-\t\t\t\tgc.fillRectangle(lineEndX - horizontalScrollOffset + leftMargin, paintY, lineEndSpaceWidth, lineHeight);", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tselectionBackgroundWidth += lineEndSpaceWidth;", "-\t\t\t}", "+\t\tif (isWrappedLine == false) {", "+\t\t\t// render the line break selection", "+\t\t\tgc.fillRectangle(paintX - horizontalScrollOffset + leftMargin, paintY, lineEndSpaceWidth, lineHeight);", "-\t// handle empty line case", "-\tif (bidi != null && paintX == 0) {", "-\t\tpaintX = StyledText.XINSET;\t", "-\t}", "-\t// fill the background first since expanded tabs are not ", "-\t// drawn as spaces. tabs just move the draw position. ", "-\tgc.fillRectangle(paintX - horizontalScrollOffset + leftMargin, paintY, selectionBackgroundWidth, lineHeight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4db6500ef1f29615a1d61cd1f19e671", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "9cc72cd00c181250b1f51b95a0528a6b993c1ed9", "commitAfterChange": "1c6100db3e7e2869dd9939a388c01ffe02266ae6", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public Rectangle getBounds ()", "signatureAfterChange": " public Rectangle getBounds ()", "diff": ["-\t/*", "-\t* Bug in GTK.  Toolbar items are only allocated their minimum size", "-\t* in versions before 2.4.0.  The fix is to use the total size", "-\t* available minus any borders.", "-\t*/", "-\tif (OS.GTK_VERSION < OS.VERSION (2, 4, 0) && control != null && !control.isDisposed ()) {", "-\t\tint border = OS.gtk_container_get_border_width (parent.handle);", "-\t\tbyte [] shadowType = Converter.wcsToMbcs (null, \"shadow_type\", true);", "-\t\tint [] shadow = new int [1];", "-\t\tOS.gtk_widget_style_get (parent.handle, shadowType, shadow, 0);", "-\t\tif (shadow [0] != OS.GTK_SHADOW_NONE) {", "-\t\t\tborder += OS.gtk_style_get_xthickness (OS.gtk_widget_get_style (parent.handle));", "-\t\t}", "-\t\tif ((parent.style & SWT.VERTICAL) != 0) {", "-\t\t\tx = border;", "-\t\t\ty = OS.GTK_WIDGET_Y (topHandle) + border;", "-\t\t\twidth = OS.GTK_WIDGET_WIDTH (parent.handle) - border*2;", "-\t\t\theight = OS.GTK_WIDGET_HEIGHT (topHandle);\t\t\t", "-\t\t} else {", "-\t\t\tx = OS.GTK_WIDGET_X (topHandle) + border;", "-\t\t\ty = border;", "-\t\t\twidth = OS.GTK_WIDGET_WIDTH (topHandle);", "-\t\t\theight = OS.GTK_WIDGET_HEIGHT (parent.handle) - border*2;", "-\t\t}", "-\t} else {", "-\t\tx = OS.GTK_WIDGET_X (topHandle);", "-\t\ty = OS.GTK_WIDGET_Y (topHandle);", "-\t\twidth = OS.GTK_WIDGET_WIDTH (topHandle);", "-\t\theight = OS.GTK_WIDGET_HEIGHT (topHandle);\t\t", "-\t}", "+\tx = OS.GTK_WIDGET_X (topHandle);", "+\ty = OS.GTK_WIDGET_Y (topHandle);", "+\twidth = OS.GTK_WIDGET_WIDTH (topHandle);", "+\theight = OS.GTK_WIDGET_HEIGHT (topHandle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "649dec2e6ab419c62a7c973ad50e652f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "91d12e7fb40e96dc6324f0e393e3f0f025792ace", "commitAfterChange": "14be55c4cbe46a16b7300921fd246420e99a1bad", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 103, "signatureBeforeChange": " \t LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": " \t LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\t\tif (pnmlv.iItem != -1 && (pnmlv.uChanged & OS.LVIF_STATE) != 0) {", "-\t\t\t\t\tboolean isFocus = (pnmlv.uNewState & OS.LVIS_FOCUSED) != 0;", "-\t\t\t\t\tint index = OS.SendMessage (handle, OS.LVM_GETNEXTITEM, -1, OS.LVNI_FOCUSED);", "-\t\t\t\t\tif ((style & SWT.MULTI) != 0) {", "-\t\t\t\t\t\tif (OS.GetKeyState (OS.VK_CONTROL) < 0) {", "-\t\t\t\t\t\t\tif (!isFocus) {", "-\t\t\t\t\t\t\t\tif (index == pnmlv.iItem) {", "-\t\t\t\t\t\t\t\t\tboolean isSelected = (pnmlv.uNewState & OS.LVIS_SELECTED) != 0;", "-\t\t\t\t\t\t\t\t\tboolean wasSelected = (pnmlv.uOldState & OS.LVIS_SELECTED) != 0;", "-\t\t\t\t\t\t\t\t\tisFocus = isSelected != wasSelected;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tisFocus = mouseDown;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (OS.GetKeyState (OS.VK_SPACE) < 0) isFocus = true;", "-\t\t\t\t\tif (isFocus) {", "-\t\t\t\t\t\tEvent event = new Event();", "-\t\t\t\t\t\tif (index != -1) {", "-\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t* This code is intentionally commented.", "-\t\t\t\t\t\t\t*/", "-//\t\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_ENSUREVISIBLE, index, 0);", "-\t\t\t\t\t\t\tevent.item = _getItem (index);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tpostEvent (SWT.Selection, event);", "+\t\t\t\tif ((pnmlv.uChanged & OS.LVIF_STATE) != 0) {", "+\t\t\t\t\tif (pnmlv.iItem == -1) {", "+\t\t\t\t\t\twasSelected = true;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tboolean oldSelected = (pnmlv.uNewState & OS.LVIS_SELECTED) != 0;", "+\t\t\t\t\t\tboolean newSelected = (pnmlv.uOldState & OS.LVIS_SELECTED) != 0;", "+\t\t\t\t\t\tif (oldSelected != newSelected) wasSelected = true;"]}], "num": 26789}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56461458dc8b6ef6229b9ab9696dc974", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72f3cc7bb2879facd334fdb89daf6325", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/cocoa/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "4a54739762437bd8066c9b7d36c4c3d14493b18a", "commitAfterChange": "271f940e0df4170fc833286729bdba3441aed75a", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  void webView_didFailProvisionalLoadWithError_forFrame(int sender, int error, int frame)", "signatureAfterChange": "  void webView_didFailProvisionalLoadWithError_forFrame(int sender, int error, int frame)", "diff": ["-\tif (errorCode <= OS.NSURLErrorBadURL) {", "-\t\tNSString description = nserror.localizedDescription();", "-\t\tif (description != null) {", "-\t\t\tString descriptionString = description.getString();", "-\t\t\tString urlString = null;", "-\t\t\tNSDictionary info = nserror.userInfo();", "-\t\t\tif (info != null) {", "-\t\t\t\tNSString key = new NSString(OS.NSErrorFailingURLStringKey());", "-\t\t\t\tid id = info.valueForKey(key);", "-\t\t\t\tif (id != null) {", "-\t\t\t\t\tNSString url = new NSString(id);", "-\t\t\t\t\turlString = url.getString();", "+\tif (OS.NSURLErrorBadURL < errorCode) return;", "+", "+\tNSURL failingURL = null;", "+\tNSDictionary info = nserror.userInfo();", "+\tif (info != null) {", "+\t\tid id = info.valueForKey(NSString.stringWith(\"NSErrorFailingURLKey\")); //$NON-NLS-1$", "+\t\tif (id != null) failingURL = new NSURL(id);", "+\t}", "+", "+\tif (failingURL != null && OS.NSURLErrorServerCertificateNotYetValid <= errorCode && errorCode <= OS.NSURLErrorSecureConnectionFailed) {", "+\t\t/* handle invalid certificate error */", "+\t\tid certificates = info.objectForKey(NSString.stringWith(\"NSErrorPeerCertificateChainKey\")); //$NON-NLS-1$", "+", "+\t\tint /*long*/[] policySearch = new int /*long*/[1];", "+\t\tint /*long*/[] policyRef = new int /*long*/[1];", "+\t\tint /*long*/[] trustRef = new int /*long*/[1];", "+\t\tboolean success = false;", "+\t\tint result = OS.SecPolicySearchCreate(OS.CSSM_CERT_X_509v3, 0, 0, policySearch);", "+\t\tif (result == 0 && policySearch[0] != 0) {", "+\t\t\tresult = OS.SecPolicySearchCopyNext(policySearch[0], policyRef);", "+\t\t\tif (result == 0 && policyRef[0] != 0) {", "+\t\t\t\tresult = OS.SecTrustCreateWithCertificates(certificates.id, policyRef[0], trustRef);", "+\t\t\t\tif (result == 0 && trustRef[0] != 0) {", "+\t\t\t\t\tSFCertificateTrustPanel panel = SFCertificateTrustPanel.sharedCertificateTrustPanel();", "+\t\t\t\t\tString failingUrlString = failingURL.absoluteString().getString();", "+\t\t\t\t\tString message = Compatibility.getMessage(\"SWT_InvalidCert_Message\", new Object[] {failingUrlString}); //$NON-NLS-1$", "+\t\t\t\t\tpanel.setAlternateButtonTitle(NSString.stringWith(Compatibility.getMessage(\"SWT_Cancel\"))); //$NON-NLS-1$", "+\t\t\t\t\tpanel.setShowsHelp(true);", "+\t\t\t\t\tfailingURL.retain();", "+\t\t\t\t\tNSWindow window = browser.getShell().view.window();", "+\t\t\t\t\tpanel.beginSheetForWindow(window, delegate, OS.sel_createPanelDidEnd, failingURL.id, trustRef[0], NSString.stringWith(message));", "+\t\t\t\t\tsuccess = true;", "-\t\t\tString message = urlString != null ? urlString + \"\\n\\n\" : \"\"; //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\tmessage += Compatibility.getMessage (\"SWT_Page_Load_Failed\", new Object[] {descriptionString}); //$NON-NLS-1$", "-\t\t\tMessageBox messageBox = new MessageBox(browser.getShell(), SWT.OK | SWT.ICON_ERROR);", "-\t\t\tmessageBox.setMessage(message);", "-\t\t\tmessageBox.open();", "+", "+\t\tif (trustRef[0] != 0) OS.CFRelease(trustRef[0]);", "+\t\tif (policyRef[0] != 0) OS.CFRelease(policyRef[0]);", "+\t\tif (policySearch[0] != 0) OS.CFRelease(policySearch[0]);", "+\t\tif (success) return;", "+\t}", "+", "+\t/* handle other types of errors */", "+\tNSString description = nserror.localizedDescription();", "+\tif (description != null) {", "+\t\tString descriptionString = description.getString();", "+\t\tString message = failingURL != null ? failingURL.absoluteString().getString() + \"\\n\\n\" : \"\"; //$NON-NLS-1$ //$NON-NLS-2$", "+\t\tmessage += Compatibility.getMessage (\"SWT_Page_Load_Failed\", new Object[] {descriptionString}); //$NON-NLS-1$", "+\t\tMessageBox messageBox = new MessageBox(browser.getShell(), SWT.OK | SWT.ICON_ERROR);", "+\t\tmessageBox.setMessage(message);", "+\t\tmessageBox.open();", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51f936deee5731b7df33356fa2b0dc3a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public FontData [] getFontList (String faceName, boolean scalable)", "signatureAfterChange": " public FontData[] getFontList (String faceName, boolean scalable)", "diff": ["-public FontData [] getFontList (String faceName, boolean scalable) {\t", "+public FontData[] getFontList (String faceName, boolean scalable) {\t", "-\t/* AW", "-\tString xlfd;", "-\tif (faceName == null) {", "-\t\txlfd = \"-*-*-*-*-*-*-*-*-*-*-*-*-*-*\";", "-\t} else {", "-\t\tint dashIndex = faceName.indexOf('-');", "-\t\tif (dashIndex < 0) {", "-\t\t\txlfd = \"-*-\" + faceName + \"-*-*-*-*-*-*-*-*-*-*-*-*\";", "-\t\t} else {", "-\t\t\txlfd = \"-\" + faceName + \"-*-*-*-*-*-*-*-*-*-*-*-*\";", "+\t//NOT DONE - scalable", "+\tint nFds = 0;", "+\tFontData[] fds = new FontData[4];", "+", "+\tint[] font = new int[1];", "+\tshort[] fontFamily = new short[1];", "+\tshort[] style = new short[1];", "+\tshort[] size = new short[1];", "+\tbyte[] buffer = new byte[256];", "+\tint familyIter = OS.NewPtr(16 * 4);", "+\tint fontIter = OS.NewPtr(16 * 4);", "+\tOS.FMCreateFontFamilyIterator(0, 0, 0, familyIter);", "+\twhile (OS.FMGetNextFontFamily(familyIter, fontFamily) != OS.kFMIterationCompleted) {", "+\t\tOS.FMGetFontFamilyName(fontFamily[0], buffer);", "+\t\tint length = buffer[0] & 0xFF;", "+\t\tchar[] chars = new char[length];", "+\t\tfor (int i=0; i<length; i++) {", "+\t\t\tchars[i]= (char)buffer[i+1];", "+\t\t}", "+\t\tString name = new String(chars);", "+\t\tif (faceName == null || Compatibility.equalsIgnoreCase(faceName, name)) {", "+\t\t\tOS.FMCreateFontFamilyInstanceIterator(fontFamily[0], fontIter);", "+\t\t\twhile (OS.FMGetNextFontFamilyInstance(fontIter, font, style, size) != OS.kFMIterationCompleted) {", "+\t\t\t\tint s = SWT.NORMAL;", "+\t\t\t\tif ((style[0] & OS.italic) != 0) s |= SWT.ITALIC;", "+\t\t\t\tif ((style[0] & OS.bold) != 0) s |= SWT.BOLD;", "+\t\t\t\tFontData data = new FontData(name, s, size[0]);", "+\t\t\t\tif (nFds == fds.length) {", "+\t\t\t\t\tFontData[] newFds = new FontData[fds.length + 4];", "+\t\t\t\t\tSystem.arraycopy(fds, 0, newFds, 0, nFds);", "+\t\t\t\t\tfds = newFds;", "+\t\t\t\t}", "+\t\t\t\tfds[nFds++] = data;", "+\t\t\t}", "+\t\t\tOS.FMDisposeFontFamilyInstanceIterator(fontIter);", "-\t*/", "-\t/* Use the character encoding for the default locale */", "-\t/* AW", "-\tbyte [] buffer1 = Converter.wcsToMbcs (null, xlfd, true);", "-\tint [] ret = new int [1];", "-\tint listPtr = OS.XListFonts (xDisplay, buffer1, 65535, ret);", "-\tint ptr = listPtr;", "-\tint [] intBuf = new int [1];", "-\tFontData [] fd = new FontData [ret [0]];", "-\tint fdIndex = 0;", "-\tfor (int i = 0; i < ret [0]; i++) {", "-\t\tOS.memmove (intBuf, ptr, 4);", "-\t\tint charPtr = intBuf [0];", "-\t\tint length = OS.strlen (charPtr);", "-\t\tbyte [] buffer2 = new byte [length];", "-\t\tOS.memmove (buffer2, charPtr, length);", "-\t\t// Use the character encoding for the default locale", "-\t\tchar [] chars = Converter.mbcsToWcs (null, buffer2);", "-\t\tFontData data = FontData.motif_new (new String (chars));", "-\t\tboolean isScalable = data.averageWidth == 0 && data.pixels == 0 && data.points == 0;", "-\t\tif (isScalable == scalable) {", "-\t\t\tfd [fdIndex++] = data;", "-\t\t}", "-\t\tptr += 4;", "-\t}", "-\tOS.XFreeFontNames (listPtr);", "-\tif (fdIndex == ret [0]) return fd;", "-\tFontData [] result = new FontData [fdIndex];", "-\tSystem.arraycopy (fd, 0, result, 0, fdIndex);", "+\tOS.FMDisposeFontFamilyIterator(familyIter);", "+\tOS.DisposePtr(familyIter);", "+\tOS.DisposePtr(fontIter);", "+\t", "+\tif (nFds == fds.length) return fds;", "+\tFontData[] result = new FontData[nFds];", "+\tSystem.arraycopy(fds, 0, result, 0, nFds);", "-\t*/", "-\treturn new FontData [0];"]}], "num": 23811}
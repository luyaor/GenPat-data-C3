{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44ca71647d0182663fbcfae4c9591292", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcb775df1223f89dd3a17fd115835e25", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleFactory.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tstatic int getType (byte[] widgetTypeName, Accessible accessible, int parentType, int childId)", "signatureAfterChange": "  \tstatic int getType (String widgetTypeName, Accessible accessible, int parentType, int childId)", "diff": ["-", "-\tstatic int /*long*/ getType (byte[] widgetTypeName, Accessible accessible, int /*long*/ parentType, int childId) {", "+\tstatic int /*long*/ getType (String widgetTypeName, Accessible accessible, int /*long*/ parentType, int childId) {", "-\t\tAccessibleControlListener[] listeners = accessible.getControlListeners ();", "-\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\tlisteners [i].getRole (event);", "+\t\tVector listeners = accessible.accessibleControlListeners;", "+\t\tfor (int i = 0, length = listeners.size(); i < length; i++) {", "+\t\t\tAccessibleControlListener listener = (AccessibleControlListener)listeners.elementAt (i);", "+\t\t\tlistener.getRole (event);", "-\t\tboolean action = false, hypertext = false, selection = false, text = false;", "+\t\tboolean action = false, hypertext = false, selection = false, table = false, text = false, value = false;", "+\t\t\tfor (int i = 0; i < tableRoles.length; i++) {", "+\t\t\t\tif (event.detail == tableRoles [i]) {", "+\t\t\t\t\ttable = true;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < valueRoles.length; i++) {", "+\t\t\t\tif (event.detail == valueRoles [i]) {", "+\t\t\t\t\tvalue = true;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\taction = hypertext = selection = text = true;", "+\t\t\taction = hypertext = selection = table = text = value = true;", "-\t\tString swtTypeName = new String (SWT_TYPE_PREFIX);", "-\t\tswtTypeName += new String (widgetTypeName);", "+\t\tString swtTypeName = SWT_TYPE_PREFIX + widgetTypeName;", "+\t\tif (table) swtTypeName += \"Table\"; //$NON-NLS-1$", "+\t\tif (value) swtTypeName += \"Value\"; //$NON-NLS-1$", "-\t\tint /*long*/ type = 0;", "-\t\tLONG typeInt = (LONG)Types.get (swtTypeName);", "-\t\tif (typeInt != null) {", "-\t\t\ttype = typeInt.value;", "-\t\t} else {", "+\t\tbyte[] nameBytes = Converter.wcsToMbcs(null, swtTypeName, true);", "+\t\tint /*long*/ type = OS.g_type_from_name(nameBytes);", "+\t\tif (type == 0) {", "+\t\t\tif (AccessibleObject.DEBUG) System.out.println(\"-->New Type=\" + swtTypeName); //$NON-NLS-1$", "-\t\t\tObjectIfaceDefinition = OS.g_malloc (GTypeInfo.sizeof); ", "-\t\t\tOS.memmove (ObjectIfaceDefinition, typeInfo, GTypeInfo.sizeof);", "-\t\t\tbyte[] nameBytes = Converter.wcsToMbcs(null, swtTypeName, true);", "-\t\t\ttype = OS.g_type_register_static (parentType, nameBytes, ObjectIfaceDefinition, 0);", "-\t\t\tOS.g_type_add_interface_static (type, AccessibleObject.ATK_COMPONENT_TYPE, ComponentIfaceDefinition);", "-\t\t\tif (action) OS.g_type_add_interface_static (type, AccessibleObject.ATK_ACTION_TYPE, ActionIfaceDefinition);", "-\t\t\tif (hypertext) OS.g_type_add_interface_static (type, AccessibleObject.ATK_HYPERTEXT_TYPE, HypertextIfaceDefinition);", "-\t\t\tif (selection) OS.g_type_add_interface_static (type, AccessibleObject.ATK_SELECTION_TYPE, SelectionIfaceDefinition);", "-\t\t\tif (text) OS.g_type_add_interface_static (type, AccessibleObject.ATK_TEXT_TYPE, TextIfaceDefinition);", "-\t\t\tTypes.put (swtTypeName, new LONG (type));", "+\t\t\tint /*long*/ definition = OS.g_malloc (GTypeInfo.sizeof); ", "+\t\t\tOS.memmove (definition, typeInfo, GTypeInfo.sizeof);", "+\t\t\ttype = OS.g_type_register_static (parentType, nameBytes, definition, 0);", "+\t\t\tOS.g_type_add_interface_static (type, ATK.ATK_TYPE_COMPONENT(), ComponentIfaceDefinition);", "+\t\t\tif (action) OS.g_type_add_interface_static (type, ATK.ATK_TYPE_ACTION(), ActionIfaceDefinition);", "+\t\t\tif (hypertext) OS.g_type_add_interface_static (type, ATK.ATK_TYPE_HYPERTEXT(), HypertextIfaceDefinition);", "+\t\t\tif (selection) OS.g_type_add_interface_static (type, ATK.ATK_TYPE_SELECTION(), SelectionIfaceDefinition);", "+\t\t\tif (table) OS.g_type_add_interface_static (type, ATK.ATK_TYPE_TABLE(), TableIfaceDefinition);", "+\t\t\tif (text) OS.g_type_add_interface_static (type, ATK.ATK_TYPE_TEXT(), TextIfaceDefinition);", "+\t\t\tif (value) OS.g_type_add_interface_static (type, ATK.ATK_TYPE_VALUE(), ValueIfaceDefinition);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "906eafbabb0e66859263ea984e4d53ee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleFactory.java", "commitBeforeChange": "8c1742e67c1e4d288877ced18ec4003ddd91b26c", "commitAfterChange": "6cd1ca6632ac80e9ec1f495926ca79670db9ab98", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tstatic int getType (byte[] widgetTypeName, Accessible accessible, int parentType, int childId)", "signatureAfterChange": "  \tstatic int getType (byte[] widgetTypeName, Accessible accessible, int parentType, int childId)", "diff": ["-\t\tif (action) swtTypeName += \"Action\";", "-\t\tif (hypertext) swtTypeName += \"Hypertext\";", "-\t\tif (selection) swtTypeName += \"Selection\";", "-\t\tif (text) swtTypeName += \"Text\";", "+\t\tif (action) swtTypeName += \"Action\"; //$NON-NLS-1$", "+\t\tif (hypertext) swtTypeName += \"Hypertext\"; //$NON-NLS-1$", "+\t\tif (selection) swtTypeName += \"Selection\"; //$NON-NLS-1$", "+\t\tif (text) swtTypeName += \"Text\"; //$NON-NLS-1$", "-\t\t\tATK.g_type_query (parentType, queryPtr);", "+\t\t\tOS.g_type_query (parentType, queryPtr);", "-\t\t\tATK.memmove (query, queryPtr, GTypeQuery.sizeof);", "+\t\t\tOS.memmove (query, queryPtr, GTypeQuery.sizeof);", "-\t\t\tATK.memmove (ObjectIfaceDefinition, typeInfo, GTypeInfo.sizeof);", "+\t\t\tOS.memmove (ObjectIfaceDefinition, typeInfo, GTypeInfo.sizeof);", "-\t\t\ttype = ATK.g_type_register_static (parentType, nameBytes, ObjectIfaceDefinition, 0);", "-\t\t\tATK.g_type_add_interface_static (type, AccessibleObject.ATK_COMPONENT_TYPE, ComponentIfaceDefinition);", "-\t\t\tif (action) ATK.g_type_add_interface_static (type, AccessibleObject.ATK_ACTION_TYPE, ActionIfaceDefinition);", "-\t\t\tif (hypertext) ATK.g_type_add_interface_static (type, AccessibleObject.ATK_HYPERTEXT_TYPE, HypertextIfaceDefinition);", "-\t\t\tif (selection) ATK.g_type_add_interface_static (type, AccessibleObject.ATK_SELECTION_TYPE, SelectionIfaceDefinition);", "-\t\t\tif (text) ATK.g_type_add_interface_static (type, AccessibleObject.ATK_TEXT_TYPE, TextIfaceDefinition);", "+\t\t\ttype = OS.g_type_register_static (parentType, nameBytes, ObjectIfaceDefinition, 0);", "+\t\t\tOS.g_type_add_interface_static (type, AccessibleObject.ATK_COMPONENT_TYPE, ComponentIfaceDefinition);", "+\t\t\tif (action) OS.g_type_add_interface_static (type, AccessibleObject.ATK_ACTION_TYPE, ActionIfaceDefinition);", "+\t\t\tif (hypertext) OS.g_type_add_interface_static (type, AccessibleObject.ATK_HYPERTEXT_TYPE, HypertextIfaceDefinition);", "+\t\t\tif (selection) OS.g_type_add_interface_static (type, AccessibleObject.ATK_SELECTION_TYPE, SelectionIfaceDefinition);", "+\t\t\tif (text) OS.g_type_add_interface_static (type, AccessibleObject.ATK_TEXT_TYPE, TextIfaceDefinition);"]}], "num": 61101}
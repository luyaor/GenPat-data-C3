{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d88026d0d4d33f5c0733ead272873c2e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ffe28fef26075f9f3e737c26669ef85", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "f664172a0e735d142051b2da26600fbd256e07a6", "commitAfterChange": "894e6297387f95786ffea31acd399cd5951b0afc", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public boolean open ()", "signatureAfterChange": " public boolean open ()", "diff": ["-\treturn false;", "+\tboolean cancelled = false;", "+\ttracking = true;", "+\tint window = display.createOverlayWindow ();", "+\tOS.ShowWindow (window);", "+\tdrawRectangles (window, false);", "+\tPoint cursorPos;", "+\tif (OS.StillDown ()) {", "+\t\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "+\t\tOS.GetGlobalMouse (pt);", "+\t\tcursorPos = new Point (pt.h, pt.v);", "+\t} else {", "+\t\tif ((style & SWT.RESIZE) != 0) {", "+\t\t\tcursorPos = adjustResizeCursor ();", "+\t\t} else {", "+\t\t\tcursorPos = adjustMoveCursor ();", "+\t\t}", "+\t}", "+\t", "+\tint oldX = cursorPos.x, oldY = cursorPos.y;", "+\t/*", "+\t* Tracker behaves like a Dialog with its own OS event loop.", "+\t*/", "+\tEvent event = new Event ();", "+\tint [] outEvent  = new int [1];", "+\twhile (tracking && !cancelled) {", "+\t\tint status = OS.ReceiveNextEvent (0, null, OS.kEventDurationNoWait, true, outEvent);", "+\t\tif (status != OS.noErr) continue;", "+\t\tint eventClass = OS.GetEventClass (outEvent [0]);", "+\t\tint eventKind = OS.GetEventKind (outEvent [0]);", "+\t\tint newX = oldX, newY = oldY;\t", "+\t\tswitch (eventClass) {", "+\t\t\tcase OS.kEventClassMouse: {", "+\t\t\t\tswitch (eventKind) {", "+\t\t\t\t\tcase OS.kEventMouseUp:", "+\t\t\t\t\tcase OS.kEventMouseMoved:", "+\t\t\t\t\tcase OS.kEventMouseDragged:", "+\t\t\t\t\t\tint sizeof = org.eclipse.swt.internal.carbon.Point.sizeof;", "+\t\t\t\t\t\torg.eclipse.swt.internal.carbon.Point where = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\t\t\t\tOS.GetEventParameter (outEvent [0], OS.kEventParamMouseLocation, OS.typeQDPoint, null, sizeof, null, where);", "+\t\t\t\t\t\tnewX = where.h;", "+\t\t\t\t\t\tnewY = where.v;\t", "+\t\t\t\t\t\tif (newX != oldX || newY != oldY) {", "+\t\t\t\t\t\t\tdrawRectangles (window, true);", "+\t\t\t\t\t\t\tevent.x = newX;", "+\t\t\t\t\t\t\tevent.y = newY;", "+\t\t\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {", "+\t\t\t\t\t\t\t   resizeRectangles (newX - oldX, newY - oldY);", "+\t\t\t\t\t\t\t\tcursorPos = adjustResizeCursor ();", "+\t\t\t\t\t\t\t\tnewX = cursorPos.x; newY = cursorPos.y;", "+\t\t\t\t\t\t\t\tinEvent = true;", "+\t\t\t\t\t\t\t\tsendEvent (SWT.Resize, event);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tmoveRectangles (newX - oldX, newY - oldY);", "+\t\t\t\t\t\t\t\tinEvent = true;", "+\t\t\t\t\t\t\t\tsendEvent (SWT.Move, event);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tinEvent = false;", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t* It is possible (but unlikely), that application", "+\t\t\t\t\t\t\t* code could have disposed the widget in the move", "+\t\t\t\t\t\t\t* event.  If this happens, return false to indicate", "+\t\t\t\t\t\t\t* that the tracking has failed.", "+\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\tif (isDisposed ()) return false;", "+\t\t\t\t\t\t\tdrawRectangles (window, false);", "+\t\t\t\t\t\t\toldX = newX;  oldY = newY;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\ttracking = eventKind != OS.kEventMouseUp;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.kEventClassKeyboard: {", "+\t\t\t\tswitch (eventKind) {", "+\t\t\t\t\tcase OS.kEventRawKeyDown:", "+\t\t\t\t\tcase OS.kEventRawKeyModifiersChanged:", "+\t\t\t\t\tcase OS.kEventRawKeyRepeat: {", "+\t\t\t\t\t\tint [] keyCode = new int [1];", "+\t\t\t\t\t\tOS.GetEventParameter (outEvent [0], OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "+\t\t\t\t\t\tint [] modifiers = new int [1];", "+\t\t\t\t\t\tOS.GetEventParameter (outEvent [0], OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "+\t\t\t\t\t\tint stepSize = (modifiers [0] & OS.controlKey) != 0 ? STEPSIZE_SMALL : STEPSIZE_LARGE;", "+\t\t\t\t\t\tint xChange = 0, yChange = 0;", "+\t\t\t\t\t\tswitch (keyCode [0]) {", "+\t\t\t\t\t\t\tcase 53: /* Esc */", "+\t\t\t\t\t\t\t\tcancelled = true;", "+\t\t\t\t\t\t\t\ttracking = false;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 36: /* Return */", "+\t\t\t\t\t\t\t\ttracking = false;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 123: /* Left arrow */", "+\t\t\t\t\t\t\t\txChange = -stepSize;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 124: /* Right arrow */", "+\t\t\t\t\t\t\t\txChange = stepSize;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 126: /* Up arrow */", "+\t\t\t\t\t\t\t\tyChange = -stepSize;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 125: /* Down arrow */", "+\t\t\t\t\t\t\t\tyChange = stepSize;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (xChange != 0 || yChange != 0) {", "+\t\t\t\t\t\t\tdrawRectangles (window, true);", "+\t\t\t\t\t\t\tnewX = oldX + xChange;", "+\t\t\t\t\t\t\tnewY = oldY + yChange;", "+\t\t\t\t\t\t\tevent.x = newX;", "+\t\t\t\t\t\t\tevent.y = newY;", "+\t\t\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {", "+\t\t\t\t\t\t\t\tresizeRectangles (xChange, yChange);", "+\t\t\t\t\t\t\t\tcursorPos = adjustResizeCursor ();", "+\t\t\t\t\t\t\t\tinEvent = true;", "+\t\t\t\t\t\t\t\tsendEvent (SWT.Resize, event);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tmoveRectangles (xChange, yChange);", "+\t\t\t\t\t\t\t\tcursorPos = adjustMoveCursor ();", "+\t\t\t\t\t\t\t\tinEvent = true;", "+\t\t\t\t\t\t\t\tsendEvent (SWT.Move, event);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tinEvent = false;", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t* It is possible (but unlikely) that application", "+\t\t\t\t\t\t\t* code could have disposed the widget in the move", "+\t\t\t\t\t\t\t* event.  If this happens return false to indicate", "+\t\t\t\t\t\t\t* that the tracking has failed.", "+\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\tif (isDisposed ()) return false;", "+\t\t\t\t\t\t\tdrawRectangles (window, false);", "+\t\t\t\t\t\t\toldX = cursorPos.x;  oldY = cursorPos.y;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t/*", "+\t\t* Don't dispatch mouse and key events in general, EXCEPT once this", "+\t\t* tracker has finished its work.", "+\t\t*/", "+\t\tboolean dispatch = true;", "+\t\tif (tracking && !cancelled) {", "+\t\t\tif (eventClass == OS.kEventClassMouse) dispatch = false;", "+\t\t\tif (eventClass == OS.kEventClassKeyboard) dispatch = false;", "+\t\t}", "+\t\tif (dispatch) OS.SendEventToEventTarget (outEvent [0], OS.GetEventDispatcherTarget ());", "+\t\tOS.ReleaseEvent (outEvent [0]);", "+\t\tif (clientCursor != null && resizeCursor == null) {", "+\t\t\tdisplay.setCursor (clientCursor.handle);", "+\t\t}", "+\t}", "+\tdrawRectangles (window, true);", "+\tOS.DisposeWindow (window);", "+\ttracking = false;", "+\tdisplay.grabControl = null;", "+\treturn !cancelled;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aefe5dfbcc75481c1fb730bd51cfd92", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "910a51a1e521c79a2c38bb1f98041987e1f83e5d", "commitAfterChange": "ffc16581a40cf16d7e32473d774b507b4174e221", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 14, "signatureBeforeChange": " public boolean open ()", "signatureAfterChange": " public boolean open ()", "diff": ["-\tint sense = OS.Ph_EV_DRAG | OS.Ph_EV_KEY | OS.Ph_EV_BUT_PRESS |\r", "-\t\tOS.Ph_EV_BUT_RELEASE | OS.Ph_EV_PTR_MOTION;\r", "-\tint [] args = {\r", "-\t\tOS.Pt_ARG_WIDTH, 0, 0,\r", "-\t\tOS.Pt_ARG_HEIGHT, 0, 0,\r", "-\t\tOS.Pt_ARG_REGION_OPAQUE, 0, ~0,\r", "-\t\tOS.Pt_ARG_REGION_SENSE, sense, ~0,\r", "-\t\tOS.Pt_ARG_FILL_COLOR, OS.Pg_TRANSPARENT, 0,\r", "-\t};\r", "-\tOS.PtSetParentWidget (0);\r", "-\tint handle = OS.PtCreateWidget (OS.PtRegion (), 0, args.length / 3, args);\r", "-\tOS.PtRealizeWidget (handle);\r", "-\tPhRect_t rect = new PhRect_t ();\r", "-\tint rid = OS.PtWidgetRid (handle);\r", "+\tif (rectangles == null) return false;\r", "+\t\r", "-\tOS.PhInitDrag (rid, OS.Ph_DRAG_KEY_MOTION | OS.Ph_TRACK_DRAG, rect, null, input_group, null, null, null, null, null);\r", "-\tint oldX = info.pos_x;\r", "-\tint oldY = info.pos_y;\r", "+\t\r", "+\tif ((style & SWT.MENU) == 0) {\r", "+\t\t/*\r", "+\t\t* This code is intentionally commented. Tracking can happen through\r", "+\t\t* the keyboard.\r", "+\t\t*/\r", "+//\t\tif ((info.button_state & OS.Ph_BUTTON_SELECT) == 0) return false;\r", "+\t}\r", "+\t\r", "+\tint region = 0;\r", "+\tif (info.dragger == 0) {\r", "+\t\tPgDisplaySettings_t settings = new PgDisplaySettings_t ();\r", "+\t\tOS.PgGetVideoMode (settings);\r", "+\t\tint sense = OS.Ph_EV_DRAG | OS.Ph_EV_KEY | OS.Ph_EV_BUT_PRESS |\r", "+\t\t\tOS.Ph_EV_BUT_RELEASE | OS.Ph_EV_PTR_MOTION;\r", "+\t\tint [] args = {\r", "+\t\t\tOS.Pt_ARG_WIDTH, settings.xres, 0,\r", "+\t\t\tOS.Pt_ARG_HEIGHT, settings.yres, 0,\r", "+\t\t\tOS.Pt_ARG_REGION_OPAQUE, 0, ~0,\r", "+\t\t\tOS.Pt_ARG_REGION_SENSE, sense, ~0,\r", "+\t\t\tOS.Pt_ARG_REGION_FLAGS, OS.Ph_FORCE_BOUNDARY, OS.Ph_FORCE_BOUNDARY,\r", "+\t\t\tOS.Pt_ARG_FILL_COLOR, OS.Pg_TRANSPARENT, 0,\r", "+\t\t};\r", "+\t\tregion = OS.PtCreateWidget (OS.PtRegion (), OS.Pt_NO_PARENT, args.length / 3, args);\r", "+\t\tOS.PtRealizeWidget (region);\r", "+\t\r", "+\t\tPhRect_t rect = new PhRect_t ();\r", "+\t\tint rid = OS.PtWidgetRid (region);\r", "+\t\tOS.PhInitDrag (rid, OS.Ph_DRAG_KEY_MOTION | OS.Ph_TRACK_DRAG, rect, null, input_group, null, null, null, null, null);\r", "+\t}\r", "+\r", "+\tint oldX, oldY;\r", "-\tPhEvent_t event = new PhEvent_t ();\r", "-\tEvent ev = new Event ();\r", "+\tPhEvent_t phEvent = new PhEvent_t ();\r", "+\tEvent event = new Event ();\r", "+\tPoint cursorPos;\r", "-\tdrawRectangles ();\r", "-\tboolean tracking = true;\r", "+\tdrawRectangles (rectangles);\r", "+\tif ((style & SWT.MENU) == 0) {\r", "+\t\toldX = info.pos_x;\r", "+\t\toldY = info.pos_y;\r", "+\t} else {\r", "+\t\tif ((style & SWT.RESIZE) != 0) {\r", "+\t\t\tcursorPos = adjustResizeCursor ();\r", "+\t\t} else {\r", "+\t\t\tcursorPos = adjustMoveCursor ();\r", "+\t\t}\r", "+\t\toldX = cursorPos.x;\r", "+\t\toldY = cursorPos.y;\r", "+\t}\r", "+\t\r", "+\ttracking = true;\r", "-\t\tOS.memmove (event, buffer, PhEvent_t.sizeof);\r", "-\t\tif (event.type == OS.Ph_EV_DRAG) {\r", "-\t\t\tswitch (event.subtype) {\r", "+\t\tOS.memmove (phEvent, buffer, PhEvent_t.sizeof);\r", "+\t\tif (phEvent.type == OS.Ph_EV_BUT_RELEASE) {\r", "+\t\t\tSystem.out.println(WidgetTable.get(phEvent.collector_handle));\r", "+\t\t}\r", "+\t\tif (phEvent.type == OS.Ph_EV_DRAG) {\r", "+\t\t\tswitch (phEvent.subtype) {\r", "-\t\t\t\t\t\tdrawRectangles ();\r", "-\t\t\t\t\t\tfor (int i=0; i<rectangles.length; i++) {\r", "-\t\t\t\t\t\t\trectangles [i].x += newX - oldX;\r", "-\t\t\t\t\t\t\trectangles [i].y += newY - oldY;\r", "+\t\t\t\t\t\tdrawRectangles (rectangles);\r", "+\t\t\t\t\t\tevent.x = newX;\r", "+\t\t\t\t\t\tevent.y = newY;\r", "+\t\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {\r", "+\t\t\t\t\t\t\tresizeRectangles (newX - oldX, newY - oldY);\r", "+\t\t\t\t\t\t\tcursorPos = adjustResizeCursor ();\r", "+\t\t\t\t\t\t\tnewX = cursorPos.x; newY = cursorPos.y;\r", "+\t\t\t\t\t\t\tsendEvent (SWT.Resize, event);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tmoveRectangles (newX - oldX, newY - oldY);\r", "+\t\t\t\t\t\t\tsendEvent (SWT.Move, event);\r", "-\t\t\t\t\t\tev.x = newX;\r", "-\t\t\t\t\t\tev.y = newY;\r", "-\t\t\t\t\t\tsendEvent (SWT.Move, ev);\r", "-\t\t\t\t\t\tdrawRectangles ();\r", "-\t\t\t\t\t\toldX = newX;\r", "-\t\t\t\t\t\toldY = newY;\r", "+\t\t\t\t\t\tdrawRectangles (rectangles);\r", "+\t\t\t\t\t\toldX = newX;  oldY = newY;\r", "-\t\t\t\t\t\tcancelled = ke.key_sym == OS.Pk_Escape;\r", "+\t\t\t\t\t\tint stepSize = (ke.key_mods & OS.Pk_KM_Ctrl) != 0 ? STEPSIZE_SMALL : STEPSIZE_LARGE;\r", "+\t\t\t\t\t\tint xChange = 0, yChange = 0;\r", "+\t\t\t\t\t\tswitch (ke.key_sym) {\r", "+\t\t\t\t\t\t\tcase OS.Pk_Escape:\r", "+\t\t\t\t\t\t\t\tcancelled = true;\r", "+\t\t\t\t\t\t\t\ttracking = false;\r", "+\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\tcase OS.Pk_Return:\r", "+\t\t\t\t\t\t\t\ttracking = false;\r", "+\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\tcase OS.Pk_Left:\r", "+\t\t\t\t\t\t\t\txChange = -stepSize;\r", "+\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\tcase OS.Pk_Right:\r", "+\t\t\t\t\t\t\t\txChange = stepSize;\r", "+\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\tcase OS.Pk_Up:\r", "+\t\t\t\t\t\t\t\tyChange = -stepSize;\r", "+\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\tcase OS.Pk_Down:\r", "+\t\t\t\t\t\t\t\tyChange = stepSize;\r", "+\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tif (xChange != 0 || yChange != 0) {\r", "+\t\t\t\t\t\t\tdrawRectangles (rectangles);\r", "+\t\t\t\t\t\t\tint newX = oldX + xChange;\r", "+\t\t\t\t\t\t\tint newY = oldY + yChange;\r", "+\t\t\t\t\t\t\tevent.x = newX;\r", "+\t\t\t\t\t\t\tevent.y = newY;\r", "+\t\t\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {\r", "+\t\t\t\t\t\t\t\tresizeRectangles (xChange, yChange);\r", "+\t\t\t\t\t\t\t\tcursorPos = adjustResizeCursor ();\r", "+\t\t\t\t\t\t\t\tsendEvent (SWT.Resize, event);\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tmoveRectangles (xChange, yChange);\r", "+\t\t\t\t\t\t\t\tcursorPos = adjustMoveCursor ();\r", "+\t\t\t\t\t\t\t\tsendEvent (SWT.Move, event);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t/*\r", "+\t\t\t\t\t\t\t* It is possible (but unlikely) that application\r", "+\t\t\t\t\t\t\t* code could have disposed the widget in the move\r", "+\t\t\t\t\t\t\t* event.  If this happens return false to indicate\r", "+\t\t\t\t\t\t\t* that the tracking has failed.\r", "+\t\t\t\t\t\t\t*/\r", "+\t\t\t\t\t\t\tif (isDisposed ()) return false;\r", "+\t\t\t\t\t\t\tdrawRectangles (rectangles);\r", "+\t\t\t\t\t\t\toldX = cursorPos.x;  oldY = cursorPos.y;\r", "+\t\t\t\t\t\t}\r", "+\t\t\tif (phEvent.collector_handle != 0) {\r", "+\t\t\t\tsetCursor (phEvent.collector_handle);\r", "+\t\t\t}\r", "+\t\t\t/*\r", "+\t\t\t* Don't dispatch mouse and key events in general, EXCEPT once this\r", "+\t\t\t* tracker has finished its work.\r", "+\t\t\t*/\r", "+\t\t\tif (tracking && !cancelled) continue;\r", "+\t\t\t\t\r", "-\tdrawRectangles ();\r", "+\tdrawRectangles (rectangles);\r", "-\tOS.PtDestroyWidget (handle);\r", "+\tif (region != 0) OS.PtDestroyWidget (region);\r"]}], "num": 62097}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0f6d1d1cab8c68ab59c06eae816b90c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bd2f6d02519e816f2b5a1a664384f17", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "03f864053a819bb2c8e3afbda94c0e0bd4fb3b51", "commitAfterChange": "ce858f918bbe31cedabd008a4a19b9547bae0adc", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 99, "signatureBeforeChange": " public boolean post(Event event)", "signatureAfterChange": " public boolean post(Event event)", "diff": ["-\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "-\tif (event == null) error (SWT.ERROR_NULL_ARGUMENT);", "-\tint type = event.type;", "-\tswitch (type) {", "-\t\tcase SWT.KeyDown:", "-\t\tcase SWT.KeyUp: {", "-\t\t\tint vKey = Display.untranslateKey (event.keyCode);", "-\t\t\tif (vKey != 0) {", "-\t\t\t\treturn OS.CGPostKeyboardEvent (0, vKey, type == SWT.KeyDown) == 0;", "-\t\t\t} else {", "-\t\t\t\tvKey = -1;", "-\t\t\t\tint kchrPtr = OS.GetScriptManagerVariable ((short) OS.smKCHRCache);", "-\t\t\t\tint key = -1;", "-\t\t\t\tint [] state = new int [1];", "-\t\t\t\tint [] encoding = new int [1];", "-\t\t\t\tshort keyScript = (short) OS.GetScriptManagerVariable ((short) OS.smKeyScript);", "-\t\t\t\tshort regionCode = (short) OS.GetScriptManagerVariable ((short) OS.smRegionCode);", "-\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, regionCode, null, encoding) == OS.paramErr) {", "-\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, (short) OS.kTextRegionDontCare, null, encoding) == OS.paramErr) {", "-\t\t\t\t\t\tencoding [0] = OS.kTextEncodingMacRoman;", "+\tsynchronized (Device.class) {", "+\t\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "+\t\tif (event == null) error (SWT.ERROR_NULL_ARGUMENT);", "+\t\tint type = event.type;", "+\t\tswitch (type) {", "+\t\t\tcase SWT.KeyDown:", "+\t\t\tcase SWT.KeyUp: {", "+\t\t\t\tint vKey = Display.untranslateKey (event.keyCode);", "+\t\t\t\tif (vKey != 0) {", "+\t\t\t\t\treturn OS.CGPostKeyboardEvent (0, vKey, type == SWT.KeyDown) == 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tvKey = -1;", "+\t\t\t\t\tint kchrPtr = OS.GetScriptManagerVariable ((short) OS.smKCHRCache);", "+\t\t\t\t\tint key = -1;", "+\t\t\t\t\tint [] state = new int [1];", "+\t\t\t\t\tint [] encoding = new int [1];", "+\t\t\t\t\tshort keyScript = (short) OS.GetScriptManagerVariable ((short) OS.smKeyScript);", "+\t\t\t\t\tshort regionCode = (short) OS.GetScriptManagerVariable ((short) OS.smRegionCode);", "+\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, regionCode, null, encoding) == OS.paramErr) {", "+\t\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, (short) OS.kTextRegionDontCare, null, encoding) == OS.paramErr) {", "+\t\t\t\t\t\t\tencoding [0] = OS.kTextEncodingMacRoman;", "+\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tint [] encodingInfo = new int [1];", "-\t\t\t\tOS.CreateUnicodeToTextInfoByEncoding (encoding [0], encodingInfo);", "-\t\t\t\tif (encodingInfo [0] != 0) {", "-\t\t\t\t\tchar [] input = {event.character};", "-\t\t\t\t\tbyte [] buffer = new byte [2];", "-\t\t\t\t\tOS.ConvertFromUnicodeToPString (encodingInfo [0], 2, input, buffer);", "-\t\t\t\t\tOS.DisposeUnicodeToTextInfo (encodingInfo);", "-\t\t\t\t\tkey = buffer [1] & 0x7f;", "-\t\t\t\t}", "-\t\t\t\tif (key == -1) return false;\t\t\t\t", "-\t\t\t\tfor (int i = 0 ; i <= 0x7F ; i++) {", "-\t\t\t\t\tint result1 = OS.KeyTranslate (kchrPtr, (short) (i | 512), state);", "-\t\t\t\t\tint result2 = OS.KeyTranslate (kchrPtr, (short) i, state);", "-\t\t\t\t\tif ((result1 & 0x7f) == key || (result2 & 0x7f) == key) {", "-\t\t\t\t\t\tvKey = i;", "-\t\t\t\t\t\tbreak;", "+\t\t\t\t\tint [] encodingInfo = new int [1];", "+\t\t\t\t\tOS.CreateUnicodeToTextInfoByEncoding (encoding [0], encodingInfo);", "+\t\t\t\t\tif (encodingInfo [0] != 0) {", "+\t\t\t\t\t\tchar [] input = {event.character};", "+\t\t\t\t\t\tbyte [] buffer = new byte [2];", "+\t\t\t\t\t\tOS.ConvertFromUnicodeToPString (encodingInfo [0], 2, input, buffer);", "+\t\t\t\t\t\tOS.DisposeUnicodeToTextInfo (encodingInfo);", "+\t\t\t\t\t\tkey = buffer [1] & 0x7f;", "+\t\t\t\t\tif (key == -1) return false;\t\t\t\t", "+\t\t\t\t\tfor (int i = 0 ; i <= 0x7F ; i++) {", "+\t\t\t\t\t\tint result1 = OS.KeyTranslate (kchrPtr, (short) (i | 512), state);", "+\t\t\t\t\t\tint result2 = OS.KeyTranslate (kchrPtr, (short) i, state);", "+\t\t\t\t\t\tif ((result1 & 0x7f) == key || (result2 & 0x7f) == key) {", "+\t\t\t\t\t\t\tvKey = i;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (vKey == -1) return false;", "+\t\t\t\t\treturn OS.CGPostKeyboardEvent (key, vKey, type == SWT.KeyDown) == 0;", "-\t\t\t\tif (vKey == -1) return false;", "-\t\t\t\treturn OS.CGPostKeyboardEvent (key, vKey, type == SWT.KeyDown) == 0;", "-\t\t}", "-\t\tcase SWT.MouseDown:", "-\t\tcase SWT.MouseMove: ", "-\t\tcase SWT.MouseUp: {", "-\t\t\tCGPoint mouseCursorPosition = new CGPoint ();", "-\t\t\tint chord = OS.GetCurrentEventButtonState ();", "-\t\t\tif (type == SWT.MouseMove) {", "-\t\t\t\tmouseCursorPosition.x = event.x;", "-\t\t\t\tmouseCursorPosition.y = event.y;", "-\t\t\t\treturn OS.CGPostMouseEvent (mouseCursorPosition, true, 5, (chord & 0x1) != 0, (chord & 0x2) != 0, (chord & 0x4) != 0, (chord & 0x8) != 0, (chord & 0x10) != 0) == 0;", "-\t\t\t} else {", "-\t\t\t\tint button = event.button;", "-\t\t\t\tif (button < 1 || button > 5) return false;", "-\t\t\t\tboolean button1 = false, button2 = false, button3 = false, button4 = false, button5 = false;", "- \t\t\t\tswitch (button) {", "-\t\t\t\t\tcase 1: {", "-\t\t\t\t\t\tbutton1 = type == SWT.MouseDown;", "-\t\t\t\t\t\tbutton2 = (chord & 0x4) != 0;", "-\t\t\t\t\t\tbutton3 = (chord & 0x2) != 0;", "-\t\t\t\t\t\tbutton4 = (chord & 0x8) != 0;", "-\t\t\t\t\t\tbutton5 = (chord & 0x10) != 0;", "-\t\t\t\t\t\tbreak;", "+\t\t\tcase SWT.MouseDown:", "+\t\t\tcase SWT.MouseMove: ", "+\t\t\tcase SWT.MouseUp: {", "+\t\t\t\tCGPoint mouseCursorPosition = new CGPoint ();", "+\t\t\t\tint chord = OS.GetCurrentEventButtonState ();", "+\t\t\t\tif (type == SWT.MouseMove) {", "+\t\t\t\t\tmouseCursorPosition.x = event.x;", "+\t\t\t\t\tmouseCursorPosition.y = event.y;", "+\t\t\t\t\treturn OS.CGPostMouseEvent (mouseCursorPosition, true, 5, (chord & 0x1) != 0, (chord & 0x2) != 0, (chord & 0x4) != 0, (chord & 0x8) != 0, (chord & 0x10) != 0) == 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tint button = event.button;", "+\t\t\t\t\tif (button < 1 || button > 5) return false;", "+\t\t\t\t\tboolean button1 = false, button2 = false, button3 = false, button4 = false, button5 = false;", "+\t \t\t\t\tswitch (button) {", "+\t\t\t\t\t\tcase 1: {", "+\t\t\t\t\t\t\tbutton1 = type == SWT.MouseDown;", "+\t\t\t\t\t\t\tbutton2 = (chord & 0x4) != 0;", "+\t\t\t\t\t\t\tbutton3 = (chord & 0x2) != 0;", "+\t\t\t\t\t\t\tbutton4 = (chord & 0x8) != 0;", "+\t\t\t\t\t\t\tbutton5 = (chord & 0x10) != 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcase 2: {", "+\t\t\t\t\t\t\tbutton1 = (chord & 0x1) != 0;", "+\t\t\t\t\t\t\tbutton2 = type == SWT.MouseDown;", "+\t\t\t\t\t\t\tbutton3 = (chord & 0x2) != 0;", "+\t\t\t\t\t\t\tbutton4 = (chord & 0x8) != 0;", "+\t\t\t\t\t\t\tbutton5 = (chord & 0x10) != 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcase 3: {", "+\t\t\t\t\t\t\tbutton1 = (chord & 0x1) != 0;", "+\t\t\t\t\t\t\tbutton2 = (chord & 0x4) != 0;", "+\t\t\t\t\t\t\tbutton3 = type == SWT.MouseDown;", "+\t\t\t\t\t\t\tbutton4 = (chord & 0x8) != 0;", "+\t\t\t\t\t\t\tbutton5 = (chord & 0x10) != 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcase 4: {", "+\t\t\t\t\t\t\tbutton1 = (chord & 0x1) != 0;", "+\t\t\t\t\t\t\tbutton2 = (chord & 0x4) != 0;", "+\t\t\t\t\t\t\tbutton3 = (chord & 0x2) != 0;", "+\t\t\t\t\t\t\tbutton4 = type == SWT.MouseDown;", "+\t\t\t\t\t\t\tbutton5 = (chord & 0x10) != 0;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcase 5: {", "+\t\t\t\t\t\t\tbutton1 = (chord & 0x1) != 0;", "+\t\t\t\t\t\t\tbutton2 = (chord & 0x4) != 0;", "+\t\t\t\t\t\t\tbutton3 = (chord & 0x2) != 0;", "+\t\t\t\t\t\t\tbutton4 = (chord & 0x8) != 0;", "+\t\t\t\t\t\t\tbutton5 = type == SWT.MouseDown;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "-\t\t\t\t\tcase 2: {", "-\t\t\t\t\t\tbutton1 = (chord & 0x1) != 0;", "-\t\t\t\t\t\tbutton2 = type == SWT.MouseDown;", "-\t\t\t\t\t\tbutton3 = (chord & 0x2) != 0;", "-\t\t\t\t\t\tbutton4 = (chord & 0x8) != 0;", "-\t\t\t\t\t\tbutton5 = (chord & 0x10) != 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tcase 3: {", "-\t\t\t\t\t\tbutton1 = (chord & 0x1) != 0;", "-\t\t\t\t\t\tbutton2 = (chord & 0x4) != 0;", "-\t\t\t\t\t\tbutton3 = type == SWT.MouseDown;", "-\t\t\t\t\t\tbutton4 = (chord & 0x8) != 0;", "-\t\t\t\t\t\tbutton5 = (chord & 0x10) != 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tcase 4: {", "-\t\t\t\t\t\tbutton1 = (chord & 0x1) != 0;", "-\t\t\t\t\t\tbutton2 = (chord & 0x4) != 0;", "-\t\t\t\t\t\tbutton3 = (chord & 0x2) != 0;", "-\t\t\t\t\t\tbutton4 = type == SWT.MouseDown;", "-\t\t\t\t\t\tbutton5 = (chord & 0x10) != 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tcase 5: {", "-\t\t\t\t\t\tbutton1 = (chord & 0x1) != 0;", "-\t\t\t\t\t\tbutton2 = (chord & 0x4) != 0;", "-\t\t\t\t\t\tbutton3 = (chord & 0x2) != 0;", "-\t\t\t\t\t\tbutton4 = (chord & 0x8) != 0;", "-\t\t\t\t\t\tbutton5 = type == SWT.MouseDown;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "+\t\t\t\t\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\t\t\tOS.GetGlobalMouse (pt);", "+\t\t\t\t\tmouseCursorPosition.x = pt.h;", "+\t\t\t\t\tmouseCursorPosition.y = pt.v;", "+\t\t\t\t\treturn OS.CGPostMouseEvent (mouseCursorPosition, true, 5, button1, button3, button2, button4, button5) == 0;", "-\t\t\t\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "-\t\t\t\tOS.GetGlobalMouse (pt);", "-\t\t\t\tmouseCursorPosition.x = pt.h;", "-\t\t\t\tmouseCursorPosition.y = pt.v;", "-\t\t\t\treturn OS.CGPostMouseEvent (mouseCursorPosition, true, 5, button1, button3, button2, button4, button5) == 0;", "-\t\t}", "-\t\tcase SWT.MouseWheel: {", "-\t\t\treturn OS.CGPostScrollWheelEvent (1, event.count) == 0;", "-\t\t}", "-\t} ", "-\treturn false;", "+\t\t\tcase SWT.MouseWheel: {", "+\t\t\t\treturn OS.CGPostScrollWheelEvent (1, event.count) == 0;", "+\t\t\t}", "+\t\t} ", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "884844b1b9d444e954524602f596b9d8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "9be50f235bbc31557960b17275b7cebd73643650", "commitAfterChange": "10db8dbc96013208bcbf8d30efcda65b3990ef39", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public boolean isDisposed ()", "signatureAfterChange": " public boolean isDisposed ()", "diff": ["-\treturn disposed;", "+\tsynchronized (Device.class) {", "+\t\treturn disposed;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57cf2269afb99838090188a2cbdfcc0d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "03f864053a819bb2c8e3afbda94c0e0bd4fb3b51", "commitAfterChange": "ce858f918bbe31cedabd008a4a19b9547bae0adc", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": "  static synchronized void register (Display display)", "signatureAfterChange": "  static void register (Display display)", "diff": ["-static synchronized void register (Display display) {", "-\tfor (int i=0; i<Displays.length; i++) {", "-\t\tif (Displays [i] == null) {", "-\t\t\tDisplays [i] = display;", "-\t\t\treturn;", "+static void register (Display display) {", "+\tsynchronized (Device.class) {", "+\t\tfor (int i=0; i<Displays.length; i++) {", "+\t\t\tif (Displays [i] == null) {", "+\t\t\t\tDisplays [i] = display;", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\tDisplay [] newDisplays = new Display [Displays.length + 4];", "+\t\tSystem.arraycopy (Displays, 0, newDisplays, 0, Displays.length);", "+\t\tnewDisplays [Displays.length] = display;", "+\t\tDisplays = newDisplays;", "-\tDisplay [] newDisplays = new Display [Displays.length + 4];", "-\tSystem.arraycopy (Displays, 0, newDisplays, 0, Displays.length);", "-\tnewDisplays [Displays.length] = display;", "-\tDisplays = newDisplays;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "678a13017e43d4e419fd68db861be6e9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "03f864053a819bb2c8e3afbda94c0e0bd4fb3b51", "commitAfterChange": "ce858f918bbe31cedabd008a4a19b9547bae0adc", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " public Thread getThread ()", "signatureAfterChange": " public Thread getThread ()", "diff": ["-\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "-\treturn thread;", "+\tsynchronized (Device.class) {", "+\t\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "+\t\treturn thread;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b571a0783adcffca5217d2e587f6c860", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "9be50f235bbc31557960b17275b7cebd73643650", "commitAfterChange": "10db8dbc96013208bcbf8d30efcda65b3990ef39", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public void asyncExec (Runnable runnable)", "signatureAfterChange": " public void asyncExec (Runnable runnable)", "diff": ["-\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "-\tsynchronized (idleLock) {", "-\t\tif (idleNeeded && idleHandle == 0) {", "- \t\t\t//NOTE: calling unlocked function in OS", "-\t\t\tidleHandle = OS._g_idle_add (idleProc, 0);", "+\tsynchronized (Device.class) {", "+\t\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "+\t\tsynchronized (idleLock) {", "+\t\t\tif (idleNeeded && idleHandle == 0) {", "+\t \t\t\t//NOTE: calling unlocked function in OS", "+\t\t\t\tidleHandle = OS._g_idle_add (idleProc, 0);", "+\t\t\t}", "+\t\tsynchronizer.asyncExec (runnable);", "-\tsynchronizer.asyncExec (runnable);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e60fb21a07fd8525c1a1007b92f93fc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "03f864053a819bb2c8e3afbda94c0e0bd4fb3b51", "commitAfterChange": "ce858f918bbe31cedabd008a4a19b9547bae0adc", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 149, "signatureBeforeChange": " public void wake ()", "signatureAfterChange": " public void wake ()", "diff": ["-\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "-\tif (thread == Thread.currentThread ()) return;", "-\twakeThread ();", "+\tsynchronized (Device.class) {", "+\t\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "+\t\tif (thread == Thread.currentThread ()) return;", "+\t\twakeThread ();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2aa57b28d181f782f7caa2799df4a9ea", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "9be50f235bbc31557960b17275b7cebd73643650", "commitAfterChange": "10db8dbc96013208bcbf8d30efcda65b3990ef39", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void dispose ()", "signatureAfterChange": " public void dispose ()", "diff": ["-\tif (isDisposed()) return;", "-\tcheckDevice ();", "-\trelease ();", "-\tdestroy ();", "-\tderegister (this);", "-\txDisplay = 0;", "-\tdisposed = true;", "-\tif (tracking) {", "-\t\tsynchronized (trackingLock) {", "-\t\t\tobjects = null;", "-\t\t\terrors = null;", "-\t\t\ttrackingLock = null;", "+\tsynchronized (Device.class) {", "+\t\tif (isDisposed()) return;", "+\t\tcheckDevice ();", "+\t\trelease ();", "+\t\tdestroy ();", "+\t\tderegister (this);", "+\t\txDisplay = 0;", "+\t\tdisposed = true;", "+\t\tif (tracking) {", "+\t\t\tsynchronized (trackingLock) {", "+\t\t\t\tobjects = null;", "+\t\t\t\terrors = null;", "+\t\t\t\ttrackingLock = null;", "+\t\t\t}"]}], "num": 37419}
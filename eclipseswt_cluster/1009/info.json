{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1de94e438d1ba1949cd4c8ab50670f1f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dcf2ebd2792e956f85638c90641d7e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/DragSource.java", "commitBeforeChange": "dc8419ad609087e1d696f25909aa2fbe9dc3ac30", "commitAfterChange": "eba5e3267357744c83a02289bba7c0c45fa3900d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void drag(Event dragEvent)", "signatureAfterChange": "  void drag(Event dragEvent)", "diff": ["-\t\t\tif (transfer instanceof FileTransfer) {", "-\t\t\t\tTransferData transferData = new TransferData();", "-\t\t\t\ttransferData.type = types[0];", "-\t\t\t\tDNDEvent event2 = new DNDEvent();", "-\t\t\t\tevent2.widget = this;", "-\t\t\t\tevent2.time = (int)System.currentTimeMillis(); ", "-\t\t\t\tevent2.dataType = transferData; ", "-\t\t\t\tnotifyListeners(DND.DragSetData, event2);", "-\t\t\t\tif (event2.data != null) {", "-\t\t\t\t\tfor (int j = 0; j < types.length; j++) {", "-\t\t\t\t\t\ttransferData.type = types[j];", "-\t\t\t\t\t\ttransfer.javaToNative(event2.data, transferData);", "-\t\t\t\t\t\tif (transferData.result == OS.noErr) {", "-\t\t\t\t\t\t\tfor (int k = 0; k < transferData.data.length; k++) {", "-\t\t\t\t\t\t\t\tbyte[] datum = transferData.data[k];", "-\t\t\t\t\t\t\t\tOS.AddDragItemFlavor(theDrag[0], 1 + k, types[j], datum, datum.length, 0);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tfor (int j = 0; j < types.length; j++) {", "-\t\t\t\t\tOS.AddDragItemFlavor(theDrag[0], 1, types[j], null, 0, 0);\t", "-\t\t\t\t}\t", "+\t\t\tfor (int j = 0; j < types.length; j++) {", "+\t\t\t\tOS.AddDragItemFlavor(theDrag[0], 1, types[j], null, 0, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb87c3d1afea5c330cd17b6b4da77049", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "1f6933a1b15056c0d45fcdf5019d55449793c82d", "commitAfterChange": "03b27348c501db581e6b7fd3b2d0cc945cd398ee", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 88, "signatureBeforeChange": " boolean setItemSize()", "signatureAfterChange": " boolean setItemSize()", "diff": ["-\tCTabFolderEvent e = new CTabFolderEvent(this);", "-\te.widget = this;", "-\te.time = (int)System.currentTimeMillis();", "-\te.doit = true;", "-\tfor (int i = 0; i < items.length; i++) {", "-\t\te.x = e.y = e.width = e.height = 0;", "-\t\te.item = items[i];", "-\t\tfor (int j = 0; j < folderListeners.length; j++) {", "-\t\t\tfolderListeners[j].getTabSize(e);", "-\t\t}", "-\t\twidths[i] = e.width;", "+\twidths = new int[items.length];", "+\tif (size.x <= 0 || size.y <= 0 || items.length == 0) return false;", "+\txClient = borderLeft + marginWidth + highlight_margin;", "+\tif (onBottom) {", "+\t\tyClient = borderTop + highlight_margin + marginHeight;", "+\t} else {", "+\t\tyClient = borderTop + tabHeight + highlight_header + marginHeight; ", "-\tif (e.doit) {", "-\t\twidths = new int[items.length];", "-\t\tif (size.x <= 0 || size.y <= 0 || items.length == 0) return false;", "-\t\txClient = borderLeft + marginWidth + highlight_margin;", "-\t\tif (onBottom) {", "-\t\t\tyClient = borderTop + highlight_margin + marginHeight;", "-\t\t} else {", "-\t\t\tyClient = borderTop + tabHeight + highlight_header + marginHeight; ", "+\t", "+\tGC gc = new GC(this);", "+\tfor (int i = 0; i < items.length; i++) {", "+\t\twidths[i] = items[i].preferredWidth(gc, i == selectedIndex);", "+\t}", "+\tgc.dispose();", "+\t", "+\tif (!single && items.length > 1) {", "+\t\tint totalWidth = 0;", "+\t\tint tabAreaWidth = size.x - borderLeft - borderRight - minRect.width - maxRect.width;", "+\t\tif (!simple) tabAreaWidth -= curveWidth - curveIndent;", "+\t\tint count = items.length;", "+\t\tfor (int i = 0 ; i < count; i++) {", "+\t\t\ttotalWidth += widths[i];", "-\t\t", "-\t\tGC gc = new GC(this);", "-\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\twidths[i] = items[i].preferredWidth(gc, i == selectedIndex);", "-\t\t}", "-\t\tgc.dispose();", "-\t\t", "-\t\tif (!single && items.length > 1) {", "-\t\t\tint totalWidth = 0;", "-\t\t\tint tabAreaWidth = size.x - borderLeft - borderRight - minRect.width - maxRect.width;", "-\t\t\tint count = items.length;", "+\t\tif (totalWidth > tabAreaWidth) {", "+\t\t\t// try to compress items", "+\t\t\tint minWidth = MIN_TAB_WIDTH * tabHeight;", "+\t\t\ttotalWidth = 0;", "+\t\t\tint large = 0;", "-\t\t\t\ttotalWidth += widths[i];", "+\t\t\t\ttotalWidth += Math.min(widths[i], minWidth);", "+\t\t\t\tif (widths[i] > minWidth) large++;", "-\t\t\tif (totalWidth > tabAreaWidth) {", "-\t\t\t\t// try to compress items", "-\t\t\t\tint minWidth = MIN_TAB_WIDTH * tabHeight;", "-\t\t\t\ttotalWidth = 0;", "-\t\t\t\tint large = 0;", "-\t\t\t\tfor (int i = 0 ; i < count; i++) {", "-\t\t\t\t\ttotalWidth += Math.min(widths[i], minWidth);", "-\t\t\t\t\tif (widths[i] > minWidth) large++;", "+\t\t\tif (totalWidth >= tabAreaWidth) {", "+\t\t\t\t// maximum compression required", "+\t\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\t\twidths[i] = Math.min(widths[i], minWidth);", "-\t\t\t\tif (totalWidth >= tabAreaWidth) {", "-\t\t\t\t\t// maximum compression required", "-\t\t\t\t\tfor (int i = 0; i < count; i++) {", "-\t\t\t\t\t\twidths[i] = Math.min(widths[i], minWidth);", "+\t\t\t} else {", "+\t\t\t\t// determine compression for each item", "+\t\t\t\tint extra = (tabAreaWidth - totalWidth)/large;", "+\t\t\t\twhile (true) {", "+\t\t\t\t\ttotalWidth = 0;", "+\t\t\t\t\tlarge = 0;", "+\t\t\t\t\tfor (int i = 0 ; i < count; i++) {", "+\t\t\t\t\t\ttotalWidth += Math.min(widths[i], minWidth + extra);", "+\t\t\t\t\t\tif (widths[i] > minWidth + extra) large++;", "-\t\t\t\t} else {", "-\t\t\t\t\t// determine compression for each item", "-\t\t\t\t\tint extra = (tabAreaWidth - totalWidth)/large;", "-\t\t\t\t\twhile (true) {", "-\t\t\t\t\t\ttotalWidth = 0;", "-\t\t\t\t\t\tlarge = 0;", "-\t\t\t\t\t\tfor (int i = 0 ; i < count; i++) {", "-\t\t\t\t\t\t\ttotalWidth += Math.min(widths[i], minWidth + extra);", "-\t\t\t\t\t\t\tif (widths[i] > minWidth + extra) large++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (totalWidth >= tabAreaWidth) {", "-\t\t\t\t\t\t\textra--;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (large == 0 ||tabAreaWidth - totalWidth < large) break;", "-\t\t\t\t\t\textra++;", "+\t\t\t\t\tif (totalWidth >= tabAreaWidth) {", "+\t\t\t\t\t\textra--;", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\t\t\t\twidths[i] = Math.min(widths[i], minWidth + extra);", "-\t\t\t\t\t}\t", "+\t\t\t\t\tif (large == 0 ||tabAreaWidth - totalWidth < large) break;", "+\t\t\t\t\textra++;", "+\t\t\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\t\t\twidths[i] = Math.min(widths[i], minWidth + extra);", "+\t\t\t\t}\t", "-\tfor (int i = 0; i < items.length; i++) { ", "+\tfor (int i = 0; i < items.length; i++) {", "+\t\tif (!simple && !single && i == selectedIndex) widths[i] += curveWidth - curveIndent;"]}], "num": 1009}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4d8ab108227fe90a49e3935ccc541a0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e38700aebfa4699db85d8000b369d1d3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TableDropTargetEffect.java", "commitBeforeChange": "494a07a91e999bc680c78e11c98014ab6f49ad58", "commitAfterChange": "b72a54c239832030fdc651f7ab7e2873109921f3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \tpublic void dragLeave(DropTargetEvent event)", "signatureAfterChange": " \tpublic void dragLeave(DropTargetEvent event)", "diff": ["+\t\t}", "+\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION(5, 1)) {", "+\t\t\tif (iItemInsert != -1) {", "+\t\t\t\tLVINSERTMARK plvim = new LVINSERTMARK ();", "+\t\t\t\tplvim.cbSize = LVINSERTMARK.sizeof;", "+\t\t\t\tplvim.iItem = -1;", "+\t\t\t\tOS.SendMessage(handle, OS.LVM_SETINSERTMARK, 0, plvim);", "+\t\t\t\tiItemInsert = -1;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "881765bff9f2e676c2fa1dfcfd2dff61", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "ec0aa33aacfbef8d812c3cb436af52990fcf99c4", "commitAfterChange": "a137c5853ab0ae7afcd3da9d3d83b4bdd3098087", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 129, "signatureBeforeChange": " public void update()", "signatureAfterChange": " public void update()", "diff": ["+\t/*", "+\t* Feature in Windows.  When an application does not remove", "+\t* events from the event queue for some time, Windows assumes", "+\t* the application is not responding and no longer sends paint", "+\t* events to the application.  The fix is to detect that the", "+\t* application is not responding and call PeekMessage() with", "+\t* PM_REMOVE to tell Windows that the application is ready", "+\t* to dispatch events.  Note that the message does not have", "+\t* to be found or dispatched in order to wake Windows up.", "+\t* ", "+\t* NOTE: This allows other cross thread messages to be delivered,", "+\t* most notably WM_ACTIVATE.", "+\t*/\t", "+\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (4, 10)) {", "+\t\tif (OS.IsHungAppWindow (hwndMessage)) {", "+\t\t\tMSG msg = new MSG ();", "+\t\t\tint flags = OS.PM_REMOVE | OS.PM_NOYIELD;", "+\t\t\tOS.PeekMessage (msg, hwndMessage, SWT_NULL, SWT_NULL, flags);", "+\t\t}", "+\t}"]}], "num": 42902}
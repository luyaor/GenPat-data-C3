{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a69dfc7dab6b2336b4503e79a2fe77e6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e93908a2a53f2adcac21e02b02f4aee2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "110086181c2b776548d7fb6356a66a72758bdfb3", "commitAfterChange": "c9423c4b019d7603ed1b538413adc438ecc39041", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\t\twindow = (NSWindow) new SWTWindow ().alloc ();", "+\t\tif ((style & SWT.TOOL) != 0) {", "+\t\t\twindow = (NSWindow) new SWTPanel().alloc();", "+\t\t\tstyleMask |= OS.NSUtilityWindowMask;", "+ \t\t} else {", "+ \t\t\twindow = (NSWindow) new SWTWindow().alloc ();", "+ \t\t}", "+\t\tif ((style & SWT.TOOL) != 0) {", "+\t\t\t// Feature in Cocoa: NSPanels that use NSUtilityWindowMask are always promoted to the floating window layer.", "+\t\t\t// Fix is to call setFloatingPanel:NO, which turns off this behavior.", "+\t\t\t((NSPanel)window).setFloatingPanel(false);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc836e949b1d138082ff2743d7b4774b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "2b3120470b46968368044df3f94129d586bc41d5", "commitAfterChange": "30ea0c96d9ff7cdaadcc4282f37da7eaa76961bd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["+\tif ((style & SWT.VIRTUAL) != 0) {", "+\t\t/*", "+\t\t* Feature in GTK. The fixed_height_mode property only exists in GTK 2.3.2 and greater.", "+\t\t*/", "+\t\tif (OS.gtk_major_version () * 100 + OS.gtk_minor_version () * 10 + OS.gtk_micro_version () >= 232) {", "+\t\t\tOS.g_object_set (handle, OS.fixed_height_mode, true, 0);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e66503cf5eb7cb8017eab72f7eb7a46", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "64f2c1de30bab2f5f952a29e5a347c5ce3a66f53", "commitAfterChange": "3f8e43ba988222ed59500a610b44cf04a53ddc14", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\t\twidget.setBezelStyle(OS.NSRoundedBezelStyle);", "+\t\tif ((style & SWT.FLAT) != 0) {", "+\t\t\twidget.setBezelStyle(OS.NSShadowlessSquareBezelStyle);", "+//\t\t\tif ((style & SWT.BORDER) == 0) widget.setShowsBorderOnlyWhileMouseInside(true);", "+\t\t} else {", "+\t\t\twidget.setBezelStyle(OS.NSRoundedBezelStyle);", "+\t\t}", "-\t\twidget.setBezelStyle(OS.NSRegularSquareBezelStyle);", "+\t\tif ((style & SWT.FLAT) != 0) {", "+\t\t\twidget.setBezelStyle(OS.NSShadowlessSquareBezelStyle);", "+//\t\t\tif ((style & SWT.BORDER) == 0) widget.setShowsBorderOnlyWhileMouseInside(true);", "+\t\t} else {", "+\t\t\twidget.setBezelStyle(OS.NSRoundedBezelStyle);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71c4e860837e040cdd2c46b52d76d9d6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "b1cf2e4603483e60f07f7d3719c97083be10e9b2", "commitAfterChange": "f2eaf4de8227661ef29880af04d52e370a50fc82", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  int getMargin (int index)", "signatureAfterChange": "  int getMargin (int index)", "diff": ["-\t\tmargin += rect.left + 4;", "+\t\tif ((style & SWT.VERTICAL) != 0) {", "+\t\t\tmargin += rect.top + 4;", "+\t\t} else {", "+\t\t\tmargin += rect.left + 4;", "+\t\t}", "-\t\tmargin += rect.left + rect.right; ", "+\t\tif ((style & SWT.VERTICAL) != 0) {", "+\t\t\tmargin += rect.top + rect.bottom;", "+\t\t} else {", "+\t\t\tmargin += rect.left + rect.right;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fca249d4e58b30685ddf2e144120b00d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "761d4c67b620dd7a9276cb5e97a48f876548dd5b", "commitAfterChange": "a2a25b887ac737c108dd8bcffec5e11a0093e092", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": "  public void setVisible (boolean visible)", "signatureAfterChange": "  public void setVisible (boolean visible)", "diff": ["-\t\tOS.Window_Show (shellHandle);", "+\t\tif ((style & SWT.ON_TOP) != 0) {", "+\t\t\tOS.Popup_IsOpen (shellHandle, visible);", "+\t\t} else {", "+\t\t\tOS.Window_Show (shellHandle);", "+\t\t}", "-\t\tif (!closing) OS.Window_Hide (shellHandle);", "+\t\tif (!closing) {", "+\t\t\tif ((style & SWT.ON_TOP) != 0) {", "+\t\t\t\tOS.Popup_IsOpen (shellHandle, visible);", "+\t\t\t} else {\t\t\t\t", "+\t\t\t\tOS.Window_Hide (shellHandle);", "+\t\t\t}", "+\t\t}", "+//\tif (drawCount != 0) {", "+//\t\tif (((state & HIDDEN) == 0) == visible) return;", "+//\t} else {", "+//\t\tif (visible == OS.IsWindowVisible (handle)) return;", "+//\t}", "+//\t", "+//\t/*", "+//\t* Feature in Windows.  When ShowWindow() is called used to hide", "+//\t* a window, Windows attempts to give focus to the parent. If the", "+//\t* parent is disabled by EnableWindow(), focus is assigned to", "+//\t* another windows on the desktop.  This means that if you hide", "+//\t* a modal window before the parent is enabled, the parent will", "+//\t* not come to the front.  The fix is to change the modal state", "+//\t* before hiding or showing a window so that this does not occur.", "+//\t*/", "+//\tint mask = SWT.PRIMARY_MODAL | SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL;", "+//\tif ((style & mask) != 0) {", "+//\t\tif (visible) {", "+//\t\t\tdisplay.setModalShell (this);", "+//\t\t\tControl control = display._getFocusControl ();", "+//\t\t\tif (control != null && !control.isActive ()) {", "+//\t\t\t\tbringToTop ();", "+//\t\t\t\tif (isDisposed ()) return;", "+//\t\t\t}", "+//\t\t\tint hwndShell = OS.GetActiveWindow ();", "+//\t\t\tif (hwndShell == 0) {", "+//\t\t\t\tif (parent != null) hwndShell = parent.handle;", "+//\t\t\t}", "+//\t\t\tif (hwndShell != 0) {", "+//\t\t\t\tOS.SendMessage (hwndShell, OS.WM_CANCELMODE, 0, 0);", "+//\t\t\t}", "+//\t\t\tOS.ReleaseCapture ();", "+//\t\t} else {", "+//\t\t\tdisplay.clearModal (this);", "+//\t\t}", "+//\t} else {", "+//\t\tupdateModal ();", "+//\t}", "+//\t", "+//\t/*", "+//\t* Bug in Windows.  Calling ShowOwnedPopups() to hide the", "+//\t* child windows of a hidden window causes the application", "+//\t* to be deactivated.  The fix is to call ShowOwnedPopups()", "+//\t* to hide children before hiding the parent.", "+//\t*/", "+//\tif (showWithParent && !visible) {", "+//\t\tif (!OS.IsWinCE) OS.ShowOwnedPopups (handle, false);", "+//\t}", "+//\tsuper.setVisible (visible);", "+//\tif (isDisposed ()) return;", "+//\tif (showWithParent == visible) return;", "+//\tshowWithParent = visible;", "+//\tif (visible) {", "+//\t\tif (!OS.IsWinCE) OS.ShowOwnedPopups (handle, true);", "+//\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1500c77bb9d5760f88ba6b6cc9c261d3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "e2c2a7a74542ff409e980bc4b2fbaa161b141be9", "commitAfterChange": "06b0b6bb52d1fd2fb63bfd651ac4ecf3e0f11d0d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\tint newFont, oldFont = 0;", "-\t\tint hDC = OS.GetDC (handle);", "-\t\tnewFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "-\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "-\t\tint count = OS.SendMessage (handle, OS.CB_GETCOUNT, 0, 0);", "-\t\tRECT rect = new RECT ();", "-\t\tint flags = OS.DT_CALCRECT | OS.DT_NOPREFIX;", "-\t\tif ((style & SWT.READ_ONLY) == 0) flags |= OS.DT_EDITCONTROL;", "-\t\tint length = OS.GetWindowTextLength (handle);", "-\t\tint cp = getCodePage ();", "-\t\tTCHAR buffer = new TCHAR (cp, length + 1);", "-\t\tOS.GetWindowText (handle, buffer, length + 1);", "-\t\tOS.DrawText (hDC, buffer, length, rect, flags);", "-\t\twidth = Math.max (width, rect.right - rect.left);", "-\t\tfor (int i=0; i<count; i++) {", "-\t\t\tlength = OS.SendMessage (handle, OS.CB_GETLBTEXTLEN, i, 0);", "-\t\t\tif (length != OS.CB_ERR) {", "-\t\t\t\tif (length + 1 > buffer.length ()) buffer = new TCHAR (cp, length + 1);", "-\t\t\t\tint result = OS.SendMessage (handle, OS.CB_GETLBTEXT, i, buffer);", "-\t\t\t\tif (result != OS.CB_ERR) {", "-\t\t\t\t\tOS.DrawText (hDC, buffer, length, rect, flags);", "-\t\t\t\t\twidth = Math.max (width, rect.right - rect.left);", "+\t\tif ((style & SWT.H_SCROLL) != 0) {", "+\t\t\twidth = OS.SendMessage (handle, OS.CB_GETHORIZONTALEXTENT, 0, 0);", "+\t\t} else {", "+\t\t\tint newFont, oldFont = 0;", "+\t\t\tint hDC = OS.GetDC (handle);", "+\t\t\tnewFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "+\t\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "+\t\t\tint count = OS.SendMessage (handle, OS.CB_GETCOUNT, 0, 0);", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tint flags = OS.DT_CALCRECT | OS.DT_NOPREFIX;", "+\t\t\tif ((style & SWT.READ_ONLY) == 0) flags |= OS.DT_EDITCONTROL;", "+\t\t\tint length = OS.GetWindowTextLength (handle);", "+\t\t\tint cp = getCodePage ();", "+\t\t\tTCHAR buffer = new TCHAR (cp, length + 1);", "+\t\t\tOS.GetWindowText (handle, buffer, length + 1);", "+\t\t\tOS.DrawText (hDC, buffer, length, rect, flags);", "+\t\t\twidth = Math.max (width, rect.right - rect.left);", "+\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\tlength = OS.SendMessage (handle, OS.CB_GETLBTEXTLEN, i, 0);", "+\t\t\t\tif (length != OS.CB_ERR) {", "+\t\t\t\t\tif (length + 1 > buffer.length ()) buffer = new TCHAR (cp, length + 1);", "+\t\t\t\t\tint result = OS.SendMessage (handle, OS.CB_GETLBTEXT, i, buffer);", "+\t\t\t\t\tif (result != OS.CB_ERR) {", "+\t\t\t\t\t\tOS.DrawText (hDC, buffer, length, rect, flags);", "+\t\t\t\t\t\twidth = Math.max (width, rect.right - rect.left);", "+\t\t\t\t\t}", "+\t\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "+\t\t\tOS.ReleaseDC (handle, hDC);", "-\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "-\t\tOS.ReleaseDC (handle, hDC);", "+\tif ((style & SWT.H_SCROLL) != 0) height += OS.GetSystemMetrics (OS.SM_CYHSCROLL);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cd6e6ac4cb83fb021d0cf2ffcfcd807", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TrayItem.java", "commitBeforeChange": "41b211239dcc60a51b5a132c5f6db397730ad928", "commitAfterChange": "dc662d9de06efde9d22036b6c0e5348eb9db4cec", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["+\t/*", "+\t* Feature in Windows.  When the user clicks on the tray", "+\t* icon, another application may be the foreground window.", "+\t* This means that the event loop is not running and can", "+\t* cause problems.  For example, if a menu is shown, when", "+\t* the user clicks outside of the menu to cancel it, the", "+\t* menu is not hidden until an event is processed.  If", "+\t* another application is the foreground window, then the", "+\t* menu is not hidden.  The fix is to force the tray icon", "+\t* message window to the foreground when sending an event.", "+\t*/", "-\t\t\tpostEvent (SWT.Selection);", "+\t\t\tif (hooks (SWT.Selection)) {", "+\t\t\t\tOS.SetForegroundWindow (hwnd);", "+\t\t\t\tpostEvent (SWT.Selection);", "+\t\t\t}", "-\t\t\tpostEvent (SWT.DefaultSelection);", "+\t\t\tif (hooks (SWT.DefaultSelection)) {", "+\t\t\t\tOS.SetForegroundWindow (hwnd);", "+\t\t\t\tpostEvent (SWT.DefaultSelection);", "+\t\t\t}", "-\t\t\t/*", "-\t\t\t* Feature in Windows.  When the user clicks outside of the", "-\t\t\t* menu to cancel it, the menu is not hidden until an event", "-\t\t\t* is processed.  If another application is the foreground", "-\t\t\t* window, then the menu is not hidden.  The fix is to force", "-\t\t\t* the tray icon message window to the foreground.", "-\t\t\t*/", "-\t\t\tOS.SetForegroundWindow (hwnd);", "-\t\t\tsendEvent (SWT.MenuDetect);", "-\t\t\t// widget could be disposed at this point", "-\t\t\tif (isDisposed()) return 0;", "+\t\t\tif (hooks (SWT.MenuDetect)) {", "+\t\t\t\tOS.SetForegroundWindow (hwnd);", "+\t\t\t\tsendEvent (SWT.MenuDetect);", "+\t\t\t\t// widget could be disposed at this point", "+\t\t\t\tif (isDisposed()) return 0;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fb679168cc91656ef0d25f8b22a06f7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "3ad7a3ebece37a67d0e7f3df035759203dd95550", "commitAfterChange": "73bece2a93a84ede732dede8b40b2d8c17119094", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 71, "signatureBeforeChange": "  void setForeground (float [] color)", "signatureAfterChange": "  void setForeground (float [] color)", "diff": ["+\t\tif ((style & SWT.MULTI) != 0 && !isEnabled()) nsColor = NSColor.disabledControlTextColor();", "-\t\tnsColor = NSColor.colorWithCalibratedRed (color [0], color [1], color [2], 1);", "+\t\tfloat /*double*/ alpha = 1;", "+\t\tif ((style & SWT.MULTI) != 0 && !isEnabled()) alpha = 0.5f;", "+\t\tnsColor = NSColor.colorWithCalibratedRed (color [0], color [1], color [2], alpha);"]}], "num": 53680}
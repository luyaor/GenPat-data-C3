{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d7b0c554f2595f0c3a5a129d56042fe", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f8702e03affe3046cb85edfb4b2885f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "272967205f3824ec29456112026262c64ae69dfa", "commitAfterChange": "fc62fa389f9358a82d98c59fbeba910f7ca8c593", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 76, "signatureBeforeChange": "  LRESULT WM_IME_CHAR (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmIMEChar (int hwnd, int wParam, int lParam)", "diff": ["-", "-LRESULT WM_IME_CHAR (int wParam, int lParam) {", "-", "-\t/* Process a DBCS character */", "-\tDisplay display = this.display;", "-\tdisplay.lastKey = 0;", "-\tdisplay.lastAscii = wParam;", "-\tdisplay.lastVirtual = display.lastNull = display.lastDead = false;", "-\tif (!sendKeyEvent (SWT.KeyDown, OS.WM_IME_CHAR, wParam, lParam)) {", "-\t\treturn LRESULT.ZERO;", "-\t}", "-", "-\t/*", "-\t* Feature in Windows.  The Windows text widget uses", "-\t* two 2 WM_CHAR's to process a DBCS key instead of", "-\t* using WM_IME_CHAR.  The fix is to allow the text", "-\t* widget to get the WM_CHAR's but ignore sending", "-\t* them to the application.", "-\t*/", "-\tignoreCharacter = true;", "-\tint result = callWindowProc (OS.WM_IME_CHAR, wParam, lParam);", "-\tMSG msg = new MSG ();", "-\tint flags = OS.PM_REMOVE | OS.PM_NOYIELD | OS.PM_QS_INPUT | OS.PM_QS_POSTMESSAGE;", "-\twhile (OS.PeekMessage (msg, handle, OS.WM_CHAR, OS.WM_CHAR, flags)) {", "-\t\tOS.TranslateMessage (msg);", "-\t\tOS.DispatchMessage (msg);", "-\t}", "-\tignoreCharacter = false;", "-\t", "-\tsendKeyEvent (SWT.KeyUp, OS.WM_IME_CHAR, wParam, lParam);", "-\t// widget could be disposed at this point", "-\tdisplay.lastKey = display.lastAscii = 0;", "-\treturn new LRESULT (result);", "+LRESULT wmIMEChar (int hwnd, int wParam, int lParam) {", "+", "+\t/* Process a DBCS character */", "+\tDisplay display = this.display;", "+\tdisplay.lastKey = 0;", "+\tdisplay.lastAscii = wParam;", "+\tdisplay.lastVirtual = display.lastNull = display.lastDead = false;", "+\tif (!sendKeyEvent (SWT.KeyDown, OS.WM_IME_CHAR, wParam, lParam)) {", "+\t\treturn LRESULT.ZERO;", "+\t}", "+", "+\t/*", "+\t* Feature in Windows.  The Windows text widget uses", "+\t* two 2 WM_CHAR's to process a DBCS key instead of", "+\t* using WM_IME_CHAR.  The fix is to allow the text", "+\t* widget to get the WM_CHAR's but ignore sending", "+\t* them to the application.", "+\t*/", "+\tignoreCharacter = true;", "+\tint result = callWindowProc (hwnd, OS.WM_IME_CHAR, wParam, lParam);", "+\tMSG msg = new MSG ();", "+\tint flags = OS.PM_REMOVE | OS.PM_NOYIELD | OS.PM_QS_INPUT | OS.PM_QS_POSTMESSAGE;", "+\twhile (OS.PeekMessage (msg, hwnd, OS.WM_CHAR, OS.WM_CHAR, flags)) {", "+\t\tOS.TranslateMessage (msg);", "+\t\tOS.DispatchMessage (msg);", "+\t}", "+\tignoreCharacter = false;", "+\t", "+\tsendKeyEvent (SWT.KeyUp, OS.WM_IME_CHAR, wParam, lParam);", "+\t// widget could be disposed at this point", "+\tdisplay.lastKey = display.lastAscii = 0;", "+\treturn new LRESULT (result);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b2e23448a32e3d5ba2525f142317a84", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "272967205f3824ec29456112026262c64ae69dfa", "commitAfterChange": "fc62fa389f9358a82d98c59fbeba910f7ca8c593", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 73, "signatureBeforeChange": "  LRESULT WM_CHAR (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmChar (int hwnd, int wParam, int lParam)", "diff": ["-LRESULT WM_CHAR (int wParam, int lParam) {", "-\tif (ignoreCharacter) return null;", "-\tLRESULT result = super.WM_CHAR (wParam, lParam);", "-\tif (result != null) return result;", "-\t/*", "-\t* Feature in Windows.  For some reason, when the", "-\t* widget is a single line text widget, when the", "-\t* user presses tab, return or escape, Windows beeps.", "-\t* The fix is to look for these keys and not call", "-\t* the window proc.", "-\t* ", "-\t* NOTE: This only happens when the drop down list", "-\t* is not visible.", "-\t*/", "-\tswitch (wParam) {", "-\t\tcase SWT.TAB: return LRESULT.ZERO;", "-\t\tcase SWT.CR:", "-\t\t\tpostEvent (SWT.DefaultSelection);", "-\t\t\t// FALL THROUGH", "-\t\tcase SWT.ESC: ", "-\t\t\tif (OS.SendMessage (handle, OS.CB_GETDROPPEDSTATE, 0, 0) == 0) {", "-\t\t\t\treturn LRESULT.ZERO;", "-\t\t\t}", "-\t}", "-\treturn result;", "-}", "+", "+LRESULT wmChar (int hwnd, int wParam, int lParam) {", "+\tif (ignoreCharacter) return null;", "+\tLRESULT result = super.wmChar (hwnd, wParam, lParam);", "+\tif (result != null) return result;", "+\t/*", "+\t* Feature in Windows.  For some reason, when the", "+\t* widget is a single line text widget, when the", "+\t* user presses tab, return or escape, Windows beeps.", "+\t* The fix is to look for these keys and not call", "+\t* the window proc.", "+\t* ", "+\t* NOTE: This only happens when the drop down list", "+\t* is not visible.", "+\t*/", "+\tswitch (wParam) {", "+\t\tcase SWT.TAB: return LRESULT.ZERO;", "+\t\tcase SWT.CR:", "+\t\t\tpostEvent (SWT.DefaultSelection);", "+\t\t\t// FALL THROUGH", "+\t\tcase SWT.ESC: ", "+\t\t\tif (OS.SendMessage (hwnd, OS.CB_GETDROPPEDSTATE, 0, 0) == 0) {", "+\t\t\t\treturn LRESULT.ZERO;", "+\t\t\t}", "+\t}", "+\treturn result;"]}], "num": 55833}
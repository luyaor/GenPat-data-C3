{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67546576bb7d48780b2317e6564696a0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8898a8fc7c8f0b8dc3a56a6b8357486", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "4554e604711848107217e581c2ea19dd3a200ccc", "commitAfterChange": "943950684f8a4ea21db196bca596eabbe07db1ea", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void addColumn (TreeColumn column)", "signatureAfterChange": " void addColumn (TreeColumn column)", "diff": ["-\tif (index == 0 && columnCount > 1) {", "+\tint orderedIndex = column.getOrderIndex ();", "+\tif (orderedIndex == 0 && columnCount > 1) {", "-\t\t * The new second column now has more space available to it than it did while it", "-\t\t * was the first column since it no longer has to show hierarchy decorations, so", "-\t\t * recompute its displayText.", "+\t\t * The new second ordered column now has more space available to it than it did while", "+\t\t * it was the first ordered column since it no longer has to show hierarchy decorations,", "+\t\t * so recompute its displayText.", "+\t\tTreeColumn[] orderedColumns = parent.getOrderedColumns ();", "+\t\tint secondColumnIndex = orderedColumns [1].getIndex ();", "-\t\tgc.setFont (getFont (1, false));", "-\t\tcomputeDisplayText (1, gc);", "+\t\tgc.setFont (getFont (secondColumnIndex, false));", "+\t\tcomputeDisplayText (secondColumnIndex, gc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b51fb5c4c6bdc32f50989be0384b76e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "4554e604711848107217e581c2ea19dd3a200ccc", "commitAfterChange": "943950684f8a4ea21db196bca596eabbe07db1ea", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " void removeColumn (TreeColumn column, int index)", "signatureAfterChange": " void removeColumn (TreeColumn column, int index, int orderedIndex)", "diff": ["-void removeColumn (TreeColumn column, int index) {", "+void removeColumn (TreeColumn column, int index, int orderedIndex) {", "-\t\t\titems [i].removeColumn (column, index);", "+\t\t\titems [i].removeColumn (column, index, orderedIndex);", "+\t}", "+", "+\tif (orderedIndex == 0) {", "-\t\t * The new first column will not have as much width available to it as it did when it was", "-\t\t * the second column since it now has to show hierarchy decorations as well, so recompute", "-\t\t * its displayText. ", "+\t\t * The new first ordered column will not have as much width available to it as it did when", "+\t\t * it was the second ordered column since it now has to show hierarchy decorations as well,", "+\t\t * so recompute its displayText. ", "+\t\tint firstColumnIndex = parent.getOrderedColumns () [0].getIndex ();", "-\t\tgc.setFont (getFont (0, false));", "-\t\tcomputeDisplayText (0, gc);", "+\t\tgc.setFont (getFont (firstColumnIndex, false));", "+\t\tcomputeDisplayText (firstColumnIndex, gc);", "-\t\titems [i].removeColumn (column, index);", "+\t\titems [i].removeColumn (column, index, orderedIndex);"]}], "num": 27056}
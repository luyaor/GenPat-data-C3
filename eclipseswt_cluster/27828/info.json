{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "860e3dc826500875dfbfdffcfaa58a93", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73441f092959f0ae6153c26aa36d07c0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabItem.java", "commitBeforeChange": "37dd5b45c717603ed638fff2257cc13bcbb77f6a", "commitAfterChange": "8eba6ff70d96340be32539fddaffb1fea3259678", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " int preferredWidth(GC gc, boolean isSelected)", "signatureAfterChange": " int preferredWidth(GC gc, boolean isSelected)", "diff": ["+\tCTabFolderEvent e = new CTabFolderEvent(this);", "+\te.widget = this;", "+\te.time = (int)System.currentTimeMillis();", "+\te.doit = true;", "+\te.x = e.y = e.width = e.height = 0;", "+\te.item = this;", "+\tfor (int j = 0; j < parent.folderListeners.length; j++) {", "+\t\t\tparent.folderListeners[j].getTabSize(e);", "+\t}", "+\tif (e.doit = false) return e.width;", "+\tif (isDisposed()) return 0;", "-\tif (isSelected) w += 8; // why 8?", "+\tif (!parent.simple && isSelected) w += CTabFolder.CURVE_INDENT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b629c43099ab740b95392b316b498eea", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "9b0ca7d6c3f26d5bcc0865630f591cc14b967bb0", "commitAfterChange": "5d2aa70de2e6cd273dddb20b33e744b162177c39", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 55, "signatureBeforeChange": " \t\t\t\t\t\tpublic void run ()", "signatureAfterChange": " void onMenu(Event event)", "diff": ["+void onMenu(Event event) {", "+\tif (single && selectedIndex != -1) {", "+\t\tfinal CTabFolderEvent e = new CTabFolderEvent(CTabFolder2.this);", "+\t\te.widget = this;", "+\t\te.time = event.time;", "+\t\tRectangle rect = items[selectedIndex].getBounds();", "+\t\trect.y += onBottom ? -HIGHLIGHT_HEADER : HIGHLIGHT_HEADER;", "+\t\te.rect = rect;", "+\t\tif (listListeners.length == 0) {", "+\t\t\tshowList(e.rect, SWT.LEFT);", "+\t\t} else {", "+\t\t\tfor (int j = 0; j < listListeners.length; j++) {", "+\t\t\t\tlistListeners[j].showList(e);", "+\t\t\t}", "+\t\t}", "+\t}", "+}", "-\t\t\t\t\tdisplay.timerExec (time, new Runnable() {", "-\t\t\t\t\t\tpublic void run () {", "-\t\t\t\t\t\t\tif (isDisposed() || selectedIndex == -1 || e.time < upTime) return;", "-\t\t\t\t\t\t\tRectangle rect = items[selectedIndex].getBounds();", "-\t\t\t\t\t\t\trect.y += onBottom ? -HIGHLIGHT_HEADER :HIGHLIGHT_HEADER;", "-\t\t\t\t\t\t\te.rect = rect;", "-\t\t\t\t\t\t\tif (listListeners.length == 0) {", "-\t\t\t\t\t\t\t\tshowList(e.rect, SWT.LEFT);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int j = 0; j < listListeners.length; j++) {", "-\t\t\t\t\t\t\t\t\tlistListeners[j].showList(e);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baf9ea6a690ff0a8a13b300bc8ab0145", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "907c4dd47a285571bf0d66e34d1a9323e15dd90b", "commitAfterChange": "e4b1a868ce731255239223c8ff6f43351c81a864", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 83, "signatureBeforeChange": " boolean setItemSize()", "signatureAfterChange": " boolean setItemSize()", "diff": ["-\tif (size.x <= 0 || size.y <= 0 || items.length == 0) return false;", "-\tint style = getStyle();", "-\tboolean highlight = borderLeft > 0 && (style & SWT.FLAT) == 0;", "-\tboolean changed = false;", "-\txClient = borderLeft + marginWidth;", "-\tif (highlight) xClient += HIGHLIGHT_MARGIN;", "-\tif (onBottom) {", "-\t\tyClient = borderTop + marginHeight; ", "-\t\tif (highlight) yClient += HIGHLIGHT_MARGIN;", "-\t} else {", "-\t\tyClient = borderTop + tabHeight + HIGHLIGHT_HEADER + marginHeight; ", "-\t}", "-\t", "-\tint[] widths = new int[items.length];", "-\tGC gc = new GC(this);", "-\tfor (int i = 0; i < items.length; i++) {", "-\t\twidths[i] = items[i].preferredWidth(gc, i == selectedIndex);", "-\t}", "-\tgc.dispose();", "-\tif (items.length > 1) {", "-\t\tint selectedWidth = selectedIndex == -1 ? 0 : widths[selectedIndex];", "-\t\tint count = selectedIndex == -1 ? items.length : items.length - 1;", "-\t\tint averageWidth = (tabAreaWidth - selectedWidth) / count;", "-\t\tint oldAverageWidth = 0;", "-\t\twhile (averageWidth > oldAverageWidth) {", "-\t\t\tint width = tabAreaWidth - selectedWidth;", "-\t\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\t\tif (i == selectedIndex) continue;", "-\t\t\t\tif (widths[i] < averageWidth) {", "-\t\t\t\t\twidth -= widths[i];", "-\t\t\t\t\tcount--;", "+\tint[] widths = new int[items.length];", "+\tCTabFolderEvent e = new CTabFolderEvent(this);", "+\te.widget = this;", "+\te.time = (int)System.currentTimeMillis();", "+\te.doit = true;", "+\tfor (int i = 0; i < items.length; i++) {", "+\t\te.x = e.y = e.width = e.height = 0;", "+\t\te.item = items[i];", "+\t\tfor (int j = 0; j < folderListeners.length; j++) {", "+\t\t\tfolderListeners[j].getTabSize(e);", "+\t\t}", "+\t\twidths[i] = e.width;", "+\t}", "+\tif (e.doit) {", "+\t\twidths = new int[items.length];", "+\t\tif (size.x <= 0 || size.y <= 0 || items.length == 0) return false;", "+\t\tint style = getStyle();", "+\t\tboolean highlight = borderLeft > 0 && (style & SWT.FLAT) == 0;", "+\t\txClient = borderLeft + marginWidth;", "+\t\tif (highlight) xClient += HIGHLIGHT_MARGIN;", "+\t\tif (onBottom) {", "+\t\t\tyClient = borderTop + marginHeight; ", "+\t\t\tif (highlight) yClient += HIGHLIGHT_MARGIN;", "+\t\t} else {", "+\t\t\tyClient = borderTop + tabHeight + HIGHLIGHT_HEADER + marginHeight; ", "+\t\t}", "+\t\t", "+\t\tGC gc = new GC(this);", "+\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\twidths[i] = items[i].preferredWidth(gc, i == selectedIndex);", "+\t\t}", "+\t\tgc.dispose();", "+\t\tif (items.length > 1) {", "+\t\t\tint selectedWidth = selectedIndex == -1 ? 0 : widths[selectedIndex];", "+\t\t\tint count = selectedIndex == -1 ? items.length : items.length - 1;", "+\t\t\tint averageWidth = (tabAreaWidth - selectedWidth) / count;", "+\t\t\tint oldAverageWidth = 0;", "+\t\t\twhile (averageWidth > oldAverageWidth) {", "+\t\t\t\tint width = tabAreaWidth - selectedWidth;", "+\t\t\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\t\t\tif (i == selectedIndex) continue;", "+\t\t\t\t\tif (widths[i] < averageWidth) {", "+\t\t\t\t\t\twidth -= widths[i];", "+\t\t\t\t\t\tcount--;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\toldAverageWidth = averageWidth;", "+\t\t\t\tif (count > 0) {", "+\t\t\t\t\taverageWidth = width / count;", "-\t\t\toldAverageWidth = averageWidth;", "-\t\t\tif (count > 0) {", "-\t\t\t\taverageWidth = width / count;", "-\t\t\t}", "-\t\t}", "-\t\taverageWidth = Math.max(averageWidth, MIN_TAB_WIDTH * tabHeight);", "-\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\tif (i == selectedIndex) continue;", "-\t\t\tif (widths[i] > averageWidth) {", "-\t\t\t\twidths[i] = averageWidth;", "+\t\t\taverageWidth = Math.max(averageWidth, MIN_TAB_WIDTH * tabHeight);", "+\t\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\t\tif (i == selectedIndex) continue;", "+\t\t\t\tif (widths[i] > averageWidth) {", "+\t\t\t\t\twidths[i] = averageWidth;", "+\t\t\t\t}", "+\tboolean changed = false;"]}], "num": 27828}
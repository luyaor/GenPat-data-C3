{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4dc3067905bb0837d5013c39f5b40d32", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77023f724520138c817632684d4c27ab", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "2329406946d89122eb3bd38a262415d60b3058b9", "commitAfterChange": "cded08d14de8be5b307c83a69e77cb7eb2c5024a", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public FontData [] getFontList (String faceName, boolean scalable)", "signatureAfterChange": " public FontData [] getFontList (String faceName, boolean scalable)", "diff": ["-\tint count = nFonts - offset;", "-\tFontData [] result = new FontData [count];", "-\tfor (int i=0; i<count; i++) {", "-\t\tint index = i + offset;", "-\t\tresult [i] = FontData.win32_new (logFonts [index], Compatibility.round(pixels [index] * 72, logPixelsY));", "+\tint count = 0;", "+\tFontData [] result = new FontData [nFonts - offset];", "+\tfor (int i=offset; i<nFonts; i++) {", "+\t\tFontData fd = FontData.win32_new (logFonts [i], pixels [i] * 72f / logPixelsY);", "+\t\tint j;", "+\t\tfor (j = 0; j < count; j++) {", "+\t\t\tif (fd.equals (result [j])) break;", "+\t\t}", "+\t\tif (j == count) result [count++] = fd;", "+\t}", "+\tif (count != result.length) {", "+\t\tFontData [] newResult = new FontData [count];", "+\t\tSystem.arraycopy (result, 0, newResult, 0, count);", "+\t\tresult = newResult;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "250522cfd9b260c3763c654c5eddbb92", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "8bbf9a524ec5b5f341ffd681f4710a6a330ca006", "commitAfterChange": "d3b206e01faa675b7fa895b346472d1c29b5afd3", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 72, "signatureBeforeChange": " public Shell [] getShells ()", "signatureAfterChange": " public Shell [] getShells ()", "diff": ["-\tint count = 0;", "-\tfor (int i=0; i<controlTable.length; i++) {", "-\t\tControl control = controlTable [i];", "-\t\tif (control != null && control instanceof Shell) count++;", "-\t}", "-\tShell [] result = new Shell [count];", "-\tfor (int i=0; i<controlTable.length; i++) {", "+\tShell [] result = new Shell [16];", "+\tfor (int i = 0; i < controlTable.length; i++) {", "-\t\t\tresult [index++] = (Shell) control;", "+\t\t\tint j = 0;", "+\t\t\twhile (j < index) {", "+\t\t\t\tif (result [j] == control) break;", "+\t\t\t\tj++;", "+\t\t\t}", "+\t\t\tif (j == index) {", "+\t\t\t\tif (index == result.length) {", "+\t\t\t\t\tShell [] newResult = new Shell [index + 16];", "+\t\t\t\t\tSystem.arraycopy (result, 0, newResult, 0, index);", "+\t\t\t\t\tresult = newResult;", "+\t\t\t\t}", "+\t\t\t\tresult [index++] = (Shell) control;\t", "+\t\t\t}", "-\treturn result;", "+\tif (index == result.length) return result;", "+\tShell [] newResult = new Shell [index];", "+\tSystem.arraycopy (result, 0, newResult, 0, index);", "+\treturn newResult;"]}], "num": 48987}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "248a083efe48c29c0ff314286eddf98b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25b1917c2af13f48713e3184b153c079", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "2a4b70b83f3e32ea68d97233ce18ec34e72f909f", "commitAfterChange": "301859a1f2628890a59796e61cd0500045ef9bd8", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "  int gtk_delete_range (int widget, int iter1, int iter2)", "signatureAfterChange": "  int gtk_delete_range (int widget, int iter1, int iter2)", "diff": ["-\tbyte [] startIter =  new byte [ITER_SIZEOF];", "-\tbyte [] endIter =  new byte [ITER_SIZEOF];", "+\tbyte [] startIter = new byte [ITER_SIZEOF];", "+\tbyte [] endIter = new byte [ITER_SIZEOF];", "+\t\treturn 0;", "+\t}", "+\tif (newText.length () > 0) {", "+\t\tbyte [] buffer = Converter.wcsToMbcs (null, newText, false);", "+\t\tOS.g_signal_handlers_block_matched (bufferHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, DELETE_RANGE);", "+\t\tOS.gtk_text_buffer_delete (bufferHandle, startIter, endIter);", "+\t\tOS.g_signal_handlers_unblock_matched (bufferHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, DELETE_RANGE);", "+\t\tOS.g_signal_handlers_block_matched (bufferHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, INSERT_TEXT);", "+\t\tOS.gtk_text_buffer_insert (bufferHandle, startIter, buffer, buffer.length);", "+\t\tOS.g_signal_handlers_unblock_matched (bufferHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, INSERT_TEXT);", "+\t\tOS.g_signal_stop_emission_by_name (bufferHandle, OS.delete_range);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f02bbce365207ffcb3ecb91926c0ff01", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "ad7a9e5b3b139f6b5bd4c2f25f8cf8b336105a91", "commitAfterChange": "52d678e47ee00e0c9d7473cd6841b89c8499131e", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 73, "signatureBeforeChange": " public void setText (String string)", "signatureAfterChange": " public void setText (String string)", "diff": ["+\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {", "+\t\t\tOS.g_signal_handlers_block_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "+\t\t\tOS.gtk_combo_box_set_active (handle, index);", "+\t\t\tOS.g_signal_handlers_unblock_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "+\t\t\treturn;", "+\t\t}", "+\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {", "+\t\tOS.g_signal_handlers_block_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "+\t}", "+\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {", "+\t\tOS.g_signal_handlers_unblock_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b78fabb240313bbed59cbde625c5919", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "5291fb5ab98b8edb9d85f8aabfcd8636dd2d27f5", "commitAfterChange": "68eede6cc61dccf58685c545d1d833d2102b72d0", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void setMenu (Menu menu)", "signatureAfterChange": " public void setMenu (Menu menu)", "diff": ["+\t\tboolean success = false;", "+\t\t", "+\t\t/*", "+\t\t* Bug in Windows.  When GetMenuItemInfo() is used to get the text,", "+\t\t* for an item that has a bitmap set using MIIM_BITMAP, the text is", "+\t\t* not returned.  This means that when SetMenuItemInfo() is used to", "+\t\t* set the submenu and the current menu state, the text is lost.", "+\t\t* The fix is to temporarily remove the bitmap and restore it after", "+\t\t* the text and submenu have been set.", "+\t\t*/", "+\t\tif (!OS.IsWinCE) {", "+\t\t\tif ((OS.WIN32_MAJOR << 16 | OS.WIN32_MINOR) >= (4 << 16 | 10)) {", "+\t\t\t\tif (image != null) {", "+\t\t\t\t\tinfo.fMask = OS.MIIM_BITMAP;", "+\t\t\t\t\tinfo.hbmpItem = 0;", "+\t\t\t\t\tsuccess = OS.SetMenuItemInfo (hMenu, id, false, info);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t", "-\t\tboolean success = OS.GetMenuItemInfo (hMenu, index, true, info);", "+\t\tsuccess = OS.GetMenuItemInfo (hMenu, index, true, info);", "-\t\t\t* On WinCE, InsertMenuItem is not available.  SetMenuItemInfo", "-\t\t\t* does not set the menu item state and submenu use InsertMenu", "-\t\t\t* to set these fields and SetMenuItemInfo to set the menu item", "-\t\t\t* data.  NOTE: SetMenuItemInfo is also used to set the string", "-\t\t\t* that was queried from the original menu item.", "+\t\t\t* On WinCE, InsertMenuItem() is not available.  The fix is to", "+\t\t\t* use SetMenuItemInfo() but this call does not set the menu item", "+\t\t\t* state and submenu.  The fix is to use InsertMenu() to insert", "+\t\t\t* the item, SetMenuItemInfo() to set the string and EnableMenuItem()", "+\t\t\t* and CheckMenuItem() to set the state.", "-\t\t\tTCHAR lpNewItem = new TCHAR (0, \"\", true);", "+\t\t\tTCHAR lpNewItem = new TCHAR (0, \" \", true);", "+\t\t\t/*", "+\t\t\t* Restore the bitmap that was removed to work around a problem", "+\t\t\t* in GetMenuItemInfo() and menu items that have bitmaps set with", "+\t\t\t* MIIM_BITMAP.", "+\t\t\t*/", "+\t\t\tif ((OS.WIN32_MAJOR << 16 | OS.WIN32_MINOR) >= (4 << 16 | 10)) {", "+\t\t\t\tif (image != null) {", "+\t\t\t\t\tinfo.fMask = OS.MIIM_BITMAP;", "+\t\t\t\t\tinfo.hbmpItem = OS.HBMMENU_CALLBACK;", "+\t\t\t\t\tsuccess = OS.SetMenuItemInfo (hMenu, id, false, info);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t"]}], "num": 13300}
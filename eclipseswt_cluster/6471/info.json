{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42900ce8adcd3e4483b76a1691f46638", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43a5a386c44a35984043f945a73bd9e0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "165ef20666a328e69332f6011a32b35bb8e1e01a", "commitAfterChange": "883e5deef3becc19a00d940a486c36754f7b23e5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void copyArea(int x, int y, int width, int height, int destX, int destY)", "signatureAfterChange": " public void copyArea(int x, int y, int width, int height, int destX, int destY)", "diff": ["-\t\t\tint rid = OS.PtWidgetRid(widget);\r", "-\t\t\tif (rid == 0) return;\r", "-\t\t\tshort[] unused = new short[1];\r", "-\t\t\tint[] child_tiles_buffer = new int[1];\r", "-\t\t\tint child_clip = getClipping(widget, data.topWidget, true, true, child_tiles_buffer);\r", "-\t\t\tint child_tiles = child_tiles_buffer[0];\r", "+\t\t\tint child_clip = getClipping(widget, data.topWidget, true, true, null);\r", "-\t\t\t\tOS.PhBlit(rid, rect, delta);\r", "+\t\t\t\tOS.PtBlit(widget, rect, delta);\r", "-\t\t\t\t/*\r", "-\t\t\t\t* Determine source rectangles that should be copied considering\r", "-\t\t\t\t* the clipping region.\r", "-\t\t\t\t*/\r", "-\t\t\t\tint dest = OS.PhGetTile();\r", "-\t\t\t\tOS.memmove(dest, rect, PhRect_t.sizeof);\r", "-\t\t\t\tOS.PhTranslateTiles(dest, delta);\r", "+\t\t\t\tint srcTile = OS.PhGetTile();\r", "+\t\t\t\tOS.memmove(srcTile, rect, PhRect_t.sizeof);\r", "-\t\t\t\t\t\tclip = OS.PhIntersectTilings(clip, child_clip, unused);\r", "+\t\t\t\t\t\tshort[] unused = new short[1];\r", "+\t\t\t\t\t\tint newClip = OS.PhIntersectTilings(clip, child_clip, unused);\r", "+\t\t\t\t\t\tOS.PhFreeTiles(clip);\r", "+\t\t\t\t\t\tclip = newClip;\r", "-\t\t\t\tint dest_tiles = OS.PhIntersectTilings(dest, clip, unused);\r", "+\t\t\t\tOS.PtClippedBlit(widget, srcTile, delta, clip);\r", "-\t\t\t\tOS.PhFreeTiles(dest);\r", "-\t\t\t\tPhPoint_t inverseDelta = new PhPoint_t();\r", "-\t\t\t\tinverseDelta.x = (short)(-delta.x);\r", "-\t\t\t\tinverseDelta.y = (short)(-delta.y);\r", "-\t\t\t\tOS.PhTranslateTiles(dest_tiles, inverseDelta);\r", "-\t\t\t\t\r", "-\t\t\t\t/* Exclude rectangles obscured by widgets. */\r", "-\t\t\t\tif (child_tiles != 0) {\r", "-\t\t\t\t\tdest_tiles = OS.PhClipTilings(dest_tiles, child_tiles, null);\r", "-\t\t\t\t}\r", "-\t\t\t\t\r", "-\t\t\t\t/* Copy rectangles. */\r", "-\t\t\t\tint[] src_rects_count = new int[1];\r", "-\t\t\t\tint src_rects = OS.PhTilesToRects(dest_tiles, src_rects_count);\r", "-\t\t\t\tOS.PhFreeTiles(dest_tiles);\r", "-\t\t\t\tPhRect_t src_rect = new PhRect_t();\r", "-\t\t\t\tfor (int i = 0; i<src_rects_count[0]; i++) {\r", "-\t\t\t\t\tOS.memmove(src_rect, src_rects + (i * PhRect_t.sizeof), PhRect_t.sizeof);\r", "-\t\t\t\t\tOS.PhBlit(rid, src_rect, delta);\r", "-\t\t\t\t}\r", "-\t\t\t\tOS.free(src_rects);\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\t/*\r", "-\t\t\t* Damage destination rectangles that where obscured by widgets\r", "-\t\t\t* in the source rectangle.\r", "-\t\t\t*/\r", "-\t\t\tint src = OS.PhGetTile();\r", "-\t\t\tOS.memmove(src, rect, PhRect_t.sizeof);\r", "-\t\t\tint widget_damage_tiles = 0;\r", "-\t\t\tif (child_tiles != 0) {\r", "-\t\t\t\twidget_damage_tiles = OS.PhIntersectTilings(src, child_tiles, unused);\r", "-\t\t\t\tOS.PhTranslateTiles(widget_damage_tiles, delta);\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\t/*\r", "-\t\t\t* Damage the source rectangle excluding the intersecting area\r", "-\t\t\t* with the destination rectangle.\r", "-\t\t\t*/\r", "-\t\t\tint src_damage_tiles;\r", "-\t\t\tif (!overlaps) {\r", "-\t\t\t\tsrc_damage_tiles = src;\r", "-\t\t\t} else {\r", "-\t\t\t\tint dest = OS.PhGetTile();\r", "-\t\t\t\tOS.memmove(dest, rect, PhRect_t.sizeof);\r", "-\t\t\t\tOS.PhTranslateTiles(dest, delta);\r", "-\t\t\t\tsrc_damage_tiles = OS.PhClipTilings(src, dest, null);\r", "-\t\t\t\tOS.PhFreeTiles(dest);\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\t/* Merge all damage rectangles. */\r", "-\t\t\tint damage_tiles = src_damage_tiles;\r", "-\t\t\tif (widget_damage_tiles != 0) {\r", "-\t\t\t\tdamage_tiles = OS.PhAddMergeTiles(src_damage_tiles, widget_damage_tiles, null);\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\t/*\r", "-\t\t\t* TEMPORARY CODE\r", "-\t\t\t* \r", "-\t\t\t* Damage areas that were obscure and became visible. Photon\r", "-\t\t\t* post expose events for those areas, but these events can not\r", "-\t\t\t* be flushed with PtFlush().\r", "-\t\t\t*/\r", "-\t\t\tsrc = OS.PhGetTile();\r", "-\t\t\tOS.memmove(src, rect, PhRect_t.sizeof);\r", "-\t\t\tint widget_tile = OS.PhGetTile();\r", "-\t\t\tOS.PtWidgetCanvas(widget, widget_tile); // NOTE: widget_tile->rect\r", "-\t\t\tOS.PhDeTranslateTiles(widget_tile, widget_tile); // NOTE: widget_tile->rect.ul\r", "-\t\t\tint obscured_tiles = OS.PhClipTilings(src, widget_tile, null);\r", "-\t\t\tOS.PhFreeTiles(widget_tile);\r", "-\t\t\tOS.PhTranslateTiles(obscured_tiles, delta);\r", "-\t\t\tdamage_tiles = OS.PhAddMergeTiles(damage_tiles, obscured_tiles, null);\r", "-\r", "-\t\t\t/* Exclude damage rectangles obscured by widgets. */\r", "-\t\t\tdamage_tiles = OS.PhClipTilings(damage_tiles, child_tiles, null);\r", "-\r", "-\t\t\tOS.PhFreeTiles (child_tiles);\r", "-\r", "-\t\t\t/* Damage rectangles. */\t\t\t\r", "-\t\t\tint[] damage_rects_count = new int[1];\r", "-\t\t\tint damage_rects = OS.PhTilesToRects(damage_tiles, damage_rects_count);\r", "-\t\t\tOS.PhFreeTiles(damage_tiles);\r", "-\t\t\tfor (int i=0; i<damage_rects_count[0]; i++) {\r", "-\t\t\t\tOS.memmove(rect, damage_rects + (i * PhRect_t.sizeof), PhRect_t.sizeof);\r", "-\t\t\t\tOS.PtDamageExtent (widget, rect);\r", "-\t\t\t}\r", "-\t\t\tOS.free(damage_rects);\r", "+\t\t\t}\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f26ef0c292ee5b0c5150bb33368106e0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "cbcd0e0565ec334adcd72c72cd7b27611dcb8fe5", "commitAfterChange": "e1005846cdfadf7508dd7f305c70b9a674339ddc", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": " void shape (final int hdc, final StyleItem run)", "signatureAfterChange": " void shape (final int hdc, final StyleItem run)", "diff": ["-\tfinal int[] buffer = new int[1];", "-\tfinal char[] chars = new char[run.length];", "+\tint[] buffer = new int[1];", "+\tchar[] chars = new char[run.length];", "-\tfinal int maxGlyphs = (chars.length * 3 / 2) + 16;", "-\tfinal int hHeap = OS.GetProcessHeap();", "+\tint maxGlyphs = (chars.length * 3 / 2) + 16;", "+\tint hHeap = OS.GetProcessHeap();", "-\t\tfinal int script = run.analysis.eScript;", "-\t\tfinal int hFont = OS.GetCurrentObject(hdc, OS.OBJ_FONT);", "-\t\tfinal LOGFONT logFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW () : new LOGFONTA ();", "-\t\tOS.GetObject(hFont, LOGFONT.sizeof, logFont);", "-\t\tLOGFONT cachedLogFont = device.logFontsCache != null ? device.logFontsCache[script] : null;", "-\t\tif (cachedLogFont != null) {", "-\t\t\tcachedLogFont.lfHeight = logFont.lfHeight;", "-\t\t\tcachedLogFont.lfWeight = logFont.lfWeight;", "-\t\t\tcachedLogFont.lfItalic = logFont.lfItalic;", "-\t\t\tcachedLogFont.lfWidth = logFont.lfWidth;", "-\t\t\tint newFont = OS.CreateFontIndirect(cachedLogFont);", "-\t\t\tOS.SelectObject(hdc, newFont);", "-\t\t\tOS.ScriptShape(hdc, run.psc, chars, chars.length, maxGlyphs, run.analysis, run.glyphs, run.clusters, run.visAttrs, buffer);", "-\t\t\trun.glyphCount = buffer[0];", "-\t\t\trun.fallbackFont = newFont;", "-\t\t} else {", "-\t\t\tfinal LOGFONT newLogFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW () : new LOGFONTA ();", "-\t\t\tif (device.logFontsCache == null) device.logFontsCache = new LOGFONT[device.scripts.length];", "-\t\t\tSCRIPT_PROPERTIES properties = new SCRIPT_PROPERTIES();", "-\t\t\tOS.MoveMemory(properties, device.scripts[script], SCRIPT_PROPERTIES.sizeof);", "-\t\t\tint charSet = properties.fAmbiguousCharSet ? OS.DEFAULT_CHARSET : properties.bCharSet;", "-\t\t\tObject object = new Object () {", "-\t\t\t\tpublic int EnumFontFamExProc(int lpelfe, int lpntme, int FontType, int lParam) {", "-\t\t\t\t\tOS.MoveMemory(newLogFont, lpelfe, LOGFONT.sizeof);", "-\t\t\t\t\tif (FontType == OS.RASTER_FONTTYPE) return 1;", "-\t\t\t\t\tnewLogFont.lfHeight = logFont.lfHeight;", "-\t\t\t\t\tnewLogFont.lfWeight = logFont.lfWeight;", "-\t\t\t\t\tnewLogFont.lfItalic = logFont.lfItalic;", "-\t\t\t\t\tnewLogFont.lfWidth = logFont.lfWidth;", "-\t\t\t\t\tint newFont = OS.CreateFontIndirect(newLogFont);", "-\t\t\t\t\tOS.SelectObject(hdc, newFont);", "-\t\t\t\t\tif (shape(hdc, run, chars, buffer, maxGlyphs)) {", "-\t\t\t\t\t\trun.fallbackFont = newFont;", "-\t\t\t\t\t\tLOGFONT cacheLogFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW () : new LOGFONTA ();", "-\t\t\t\t\t\tOS.MoveMemory(cacheLogFont, lpelfe, LOGFONT.sizeof);", "-\t\t\t\t\t\tdevice.logFontsCache[script] = cacheLogFont;", "-\t\t\t\t\t\treturn 0;", "-\t\t\t\t\t}", "+\t\tif (mLangFontLink2 != 0) {", "+\t\t\tint[] dwCodePages = new int[1];", "+\t\t\tint[] cchCodePages = new int[1];", "+\t\t\t/* GetStrCodePages() */", "+\t\t\tOS.VtblCall(4, mLangFontLink2, chars, chars.length, 0, dwCodePages, cchCodePages);", "+\t\t\tint[] hNewFont = new int[1];", "+\t\t\t/* MapFont() */", "+\t\t\tif (OS.VtblCall(10, mLangFontLink2, hdc, dwCodePages[0], chars[0], hNewFont) == OS.S_OK) {", "+\t\t\t\tint hFont = OS.SelectObject(hdc, hNewFont[0]);", "+\t\t\t\tif (shape(hdc, run, chars, buffer, maxGlyphs)) {", "+\t\t\t\t\trun.fallbackFont = hNewFont[0];", "+\t\t\t\t} else {", "+\t\t\t\t\t/* ReleaseFont() */", "+\t\t\t\t\tOS.VtblCall(8, mLangFontLink2, hNewFont[0]);", "-\t\t\t\t\tOS.DeleteObject(newFont);", "-\t\t\t\t\treturn 1;", "+\t\t\t\t\tOS.ScriptShape(hdc, run.psc, chars, chars.length, maxGlyphs, run.analysis, run.glyphs, run.clusters, run.visAttrs, buffer);", "+\t\t\t\t\trun.glyphCount = buffer[0];", "-\t\t\t};", "-\t\t\tCallback callback = new Callback(object, \"EnumFontFamExProc\", 4); //$NON-NLS-1$", "-\t\t\tint address = callback.getAddress();", "-\t\t\tif (address == 0) SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\t\tnewLogFont.lfCharSet = (byte)charSet;", "-\t\t\tOS.EnumFontFamiliesEx(hdc, newLogFont, address, 0, 0);", "-\t\t\tcallback.dispose();", "-\t\t\tif (run.fallbackFont == 0) {", "-\t\t\t\tOS.ScriptShape(hdc, run.psc, chars, chars.length, maxGlyphs, run.analysis, run.glyphs, run.clusters, run.visAttrs, buffer);", "-\t\t\t\tdevice.logFontsCache[script] = logFont;", "-\t\t\t\trun.glyphCount = buffer[0];", "-\t\t\t}\t\t", "+\t\t\t}"]}], "num": 6471}
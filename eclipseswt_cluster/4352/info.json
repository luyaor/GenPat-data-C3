{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78359f105eaaf35f530a00191bca07b8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40a3da68aa632ce1671fd8835c9fd49f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "374f716744ba50780a3f59a366727e4389e9df6d", "commitAfterChange": "e495a0aa12eb5304fa2f0cfd1b592a332e58c8ab", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  final void initializeSystemColors()", "signatureAfterChange": "  final void initializeSystemColors()", "diff": ["-\t", "-\t/* Get the theme colors */", "-\tint colormap = OS.gdk_colormap_get_system();", "-\tGtkStyle style = new GtkStyle(OS.gtk_widget_get_default_style());\t", "-\t\t", "-\tGdkColor gdkColor;", "+\tint shellHandle = OS.gtk_window_new (OS.GTK_WINDOW_TOPLEVEL);", "+\tif (shellHandle == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\tOS.gtk_widget_realize (shellHandle);", "+\tGdkColor gdkColor;", "+\tGtkStyle style = new GtkStyle(OS.gtk_widget_get_style (shellHandle));", "+", "+\tgdkColor = new GdkColor();", "+\tgdkColor.pixel = style.black_pixel;", "+\tgdkColor.red   = style.black_red;", "+\tgdkColor.green = style.black_green;", "+\tgdkColor.blue  = style.black_blue;", "+\tCOLOR_WIDGET_DARK_SHADOW = gdkColor;", "+\t", "-\tOS.gdk_colormap_alloc_color(colormap, gdkColor, true, true);", "-\tCOLOR_WIDGET_DARK_SHADOW = gdkColor;", "-", "-\tgdkColor = new GdkColor();", "-\tgdkColor.pixel = style.mid0_pixel;", "-\tgdkColor.red   = style.mid0_red;", "-\tgdkColor.green = style.mid0_green;", "-\tgdkColor.blue  = style.mid0_blue;", "-\tOS.gdk_colormap_alloc_color(colormap, gdkColor, true, true);", "-\tgdkColor.pixel = style.light0_pixel;", "-\tgdkColor.red   = style.light0_red;", "-\tgdkColor.green = style.light0_green;", "-\tgdkColor.blue  = style.light0_blue;", "-\tOS.gdk_colormap_alloc_color(colormap, gdkColor, true, true);", "+\tgdkColor.pixel = style.bg0_pixel;", "+\tgdkColor.red   = style.bg0_red;", "+\tgdkColor.green = style.bg0_green;", "+\tgdkColor.blue  = style.bg0_blue;", "-\tOS.gdk_colormap_alloc_color(colormap, gdkColor, true, true);", "-\tOS.gdk_colormap_alloc_color(colormap, gdkColor, true, true);", "-\tOS.gdk_colormap_alloc_color(colormap, gdkColor, true, true);", "-\tOS.gdk_colormap_alloc_color(colormap, gdkColor, true, true);", "-\tOS.gdk_colormap_alloc_color(colormap, gdkColor, true, true);", "-\tOS.gdk_colormap_alloc_color(colormap, gdkColor, true, true);", "-\tOS.gdk_colormap_alloc_color(colormap, gdkColor, true, true);", "+", "+\tgdkColor = new GdkColor();", "+\tgdkColor.pixel = style.text3_pixel;", "+\tgdkColor.red   = style.text3_red;", "+\tgdkColor.green = style.text3_green;", "+\tgdkColor.blue  = style.text3_blue;", "+\tCOLOR_INFO_FOREGROUND = gdkColor;", "-\tOS.gdk_colormap_alloc_color(colormap, gdkColor, true, true);", "+\t", "+\tgdkColor = new GdkColor();", "+\tgdkColor.pixel = style.bg3_pixel;", "+\tgdkColor.red   = style.bg3_red;", "+\tgdkColor.green = style.bg3_green;", "+\tgdkColor.blue  = style.bg3_blue;", "+\tCOLOR_TITLE_BACKGROUND = gdkColor;", "+\t", "+\tgdkColor = new GdkColor();", "+\tgdkColor.pixel = style.fg3_pixel;", "+\tgdkColor.red   = style.fg3_red;", "+\tgdkColor.green = style.fg3_green;", "+\tgdkColor.blue  = style.fg3_blue;", "+\tCOLOR_TITLE_FOREGROUND = gdkColor;", "+\t", "+\tgdkColor = new GdkColor();", "+\tgdkColor.pixel = style.light3_pixel;", "+\tgdkColor.red   = style.light3_red;", "+\tgdkColor.green = style.light3_green;", "+\tgdkColor.blue  = style.light3_blue;", "+\tCOLOR_TITLE_BACKGROUND_GRADIENT = gdkColor;", "+\t", "+\tgdkColor = new GdkColor();", "+\tgdkColor.pixel = style.bg4_pixel;", "+\tgdkColor.red   = style.bg4_red;", "+\tgdkColor.green = style.bg4_green;", "+\tgdkColor.blue  = style.bg4_blue;", "+\tCOLOR_TITLE_INACTIVE_BACKGROUND = gdkColor;", "+\t", "+\tgdkColor = new GdkColor();", "+\tgdkColor.pixel = style.fg4_pixel;", "+\tgdkColor.red   = style.fg4_red;", "+\tgdkColor.green = style.fg4_green;", "+\tgdkColor.blue  = style.fg4_blue;", "+\tCOLOR_TITLE_INACTIVE_FOREGROUND = gdkColor;", "+\t", "+\tgdkColor = new GdkColor();", "+\tgdkColor.pixel = style.light4_pixel;", "+\tgdkColor.red   = style.light4_red;", "+\tgdkColor.green = style.light4_green;", "+\tgdkColor.blue  = style.light4_blue;", "+\tCOLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT = gdkColor;", "+", "+\tOS.gtk_widget_destroy (shellHandle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "150dd3637d47496e6eeb999325599b9a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "b6d63697d93cb9f75fd821f66bd8fc084e724f13", "commitAfterChange": "15ec5c8e79c9345376b7505c278118c20f985176", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 57, "signatureBeforeChange": "  void handleEvent(int evt)", "signatureAfterChange": "  void handleEvent(int evt)", "diff": ["+\tboolean ctrl = Cocoa.objc_msgSend(evt, Cocoa.S_ctrlKey) != 0;", "+\tboolean shift = Cocoa.objc_msgSend(evt, Cocoa.S_shiftKey) != 0;", "+\tboolean alt = Cocoa.objc_msgSend(evt, Cocoa.S_altKey) != 0;", "+\tboolean meta = Cocoa.objc_msgSend(evt, Cocoa.S_metaKey) != 0;", "+", "-\t\tboolean ctrl = Cocoa.objc_msgSend(evt, Cocoa.S_ctrlKey) != 0;", "-\t\tboolean shift = Cocoa.objc_msgSend(evt, Cocoa.S_shiftKey) != 0;", "-\t\tboolean alt = Cocoa.objc_msgSend(evt, Cocoa.S_altKey) != 0;", "-\t\tboolean meta = Cocoa.objc_msgSend(evt, Cocoa.S_metaKey) != 0;", "+\t\tif (!keyEvent.doit) {", "+\t\t\tCocoa.objc_msgSend(evt, Cocoa.S_preventDefault);", "+\t\t}", "+", "+\t/* mouse event */", "+", "+\tint clientX = Cocoa.objc_msgSend(evt, Cocoa.S_clientX);", "+\tint clientY = Cocoa.objc_msgSend(evt, Cocoa.S_clientY);", "+\tint detail = Cocoa.objc_msgSend(evt, Cocoa.S_detail);", "+\tint button = Cocoa.objc_msgSend(evt, Cocoa.S_button);", "+", "+\tEvent mouseEvent = new Event ();", "+\tmouseEvent.widget = browser;", "+\tmouseEvent.x = clientX; mouseEvent.y = clientY;", "+\tmouseEvent.stateMask = (alt ? SWT.ALT : 0) | (ctrl ? SWT.CTRL : 0) | (shift ? SWT.SHIFT : 0) | (meta ? SWT.COMMAND : 0);", "+", "+\tif (DOMEVENT_MOUSEDOWN.equals (typeString)) {", "+\t\tmouseEvent.type = SWT.MouseDown;", "+\t\tmouseEvent.button = button + 1;", "+\t\tmouseEvent.count = detail;", "+\t} else if (DOMEVENT_MOUSEUP.equals (typeString)) {", "+\t\tmouseEvent.type = SWT.MouseUp;", "+\t\tmouseEvent.button = button + 1;", "+\t\tmouseEvent.count = detail;", "+\t\tswitch (mouseEvent.button) {", "+\t\t\tcase 1: mouseEvent.stateMask |= SWT.BUTTON1; break;", "+\t\t\tcase 2: mouseEvent.stateMask |= SWT.BUTTON2; break;", "+\t\t\tcase 3: mouseEvent.stateMask |= SWT.BUTTON3; break;", "+\t\t\tcase 4: mouseEvent.stateMask |= SWT.BUTTON4; break;", "+\t\t\tcase 5: mouseEvent.stateMask |= SWT.BUTTON5; break;", "+\t\t}", "+\t} else if (DOMEVENT_MOUSEMOVE.equals (typeString)) {", "+\t\t/*", "+\t\t* Bug in Safari.  Spurious and redundant mousemove events are received in", "+\t\t* various contexts, including following every MouseUp.  The workaround is", "+\t\t* to not fire MouseMove events whose x and y values match the last MouseMove  ", "+\t\t*/", "+\t\tif (mouseEvent.x == lastMouseMoveX && mouseEvent.y == lastMouseMoveY) return;", "+\t\tmouseEvent.type = SWT.MouseMove;", "+\t\tlastMouseMoveX = mouseEvent.x; lastMouseMoveY = mouseEvent.y;", "+\t}", "+", "+\tbrowser.notifyListeners (mouseEvent.type, mouseEvent);", "+\tif (detail == 2 && DOMEVENT_MOUSEDOWN.equals (typeString)) {", "+\t\tmouseEvent = new Event ();", "+\t\tmouseEvent.widget = browser;", "+\t\tmouseEvent.x = clientX; mouseEvent.y = clientY;", "+\t\tmouseEvent.stateMask = (alt ? SWT.ALT : 0) | (ctrl ? SWT.CTRL : 0) | (shift ? SWT.SHIFT : 0) | (meta ? SWT.COMMAND : 0);", "+\t\tmouseEvent.type = SWT.MouseDoubleClick;", "+\t\tmouseEvent.button = button + 1;", "+\t\tmouseEvent.count = detail;", "+\t\tbrowser.notifyListeners (mouseEvent.type, mouseEvent);", "+\t}"]}], "num": 4352}
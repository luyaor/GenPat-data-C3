{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "86800465152141a90beec0b62874c922", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53b882d131b2d250b8e71391033bd8d5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextBidi.java", "commitBeforeChange": "03ae8f681d20cd46536e3b60d1701c0ce98bf515", "commitAfterChange": "70ad0effe5f094be7c9f0fc126e3f2ba49252b61", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r private Vector getDirectionRuns(int logicalStart, int length)", "signatureAfterChange": "\r private Vector getDirectionRuns(int logicalStart, int length)", "diff": ["-\t\t\tint segType = classBuffer[segmentLogicalStart];\r", "+\t\t\tboolean isRightToLeftSegment = isRightToLeft(segmentLogicalStart);\r", "-\t\t\t\t\tsegType == classBuffer[segmentLogicalEnd + 1] &&\r", "+\t\t\t\t\t// If our segment type is RtoL, the order index for the next character should be one less, if there\r", "+\t\t\t\t\t// is no direction change.\r", "+\t\t\t\t\t// If our segment type is LtoR, the order index for the next character will be one more if there is\r", "+\t\t\t\t\t// no direction change.\r", "+\t\t\t\t\t((isRightToLeftSegment && (order[segmentLogicalEnd + 1]+ 1 == order[segmentLogicalEnd])) ||\r", "+\t\t\t\t\t(isRightToLeftSegment == false && (order[segmentLogicalEnd + 1]- 1 == order[segmentLogicalEnd]))) &&\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffeaa29b659073e57ff804048f2d3a62", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextBidi.java", "commitBeforeChange": "5ba9287f6caa82e9989a01a562fc97d015948ef7", "commitAfterChange": "8c259c2fdd0bffd2ea76820f5d04cd4a52c2e4a7", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " private Vector getDirectionRuns(int logicalStart, int length)", "signatureAfterChange": " private Vector getDirectionRuns(int logicalStart, int length)", "diff": ["+\tint checkSide = isRightOriented ? -1 : 1;  ", "-\t\t\t\t\t((isRightToLeftSegment && (order[segmentLogicalEnd + 1]+ 1 == order[segmentLogicalEnd])) ||", "-\t\t\t\t\t(isRightToLeftSegment == false && (order[segmentLogicalEnd + 1]- 1 == order[segmentLogicalEnd]))) &&", "+\t\t\t\t  \t(order[segmentLogicalEnd + 1] == order[segmentLogicalEnd] || \t// treat ligatures as part of the direction segment", "+  \t\t\t\t\t(isRightToLeftSegment && (order[segmentLogicalEnd + 1] + checkSide == order[segmentLogicalEnd])) ||", "+\t\t\t\t\t(isRightToLeftSegment == false && (order[segmentLogicalEnd + 1] - checkSide == order[segmentLogicalEnd]))) &&"]}], "num": 24386}
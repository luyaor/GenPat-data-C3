{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6c0e9fda502f4800647a8c23ecf90f8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c36841995fe1c5efcf2307596c54b8a6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "d73f8f0bcf60169fe33b6dbd2d883c2f48f8638f", "commitAfterChange": "5ce9e32287c36f4649c3c726d93f7ff6e2af5bd1", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " void makeAvailable (TreeItem item)", "signatureAfterChange": " void makeAvailable (TreeItem item)", "diff": ["-\tTreeItem[] itemsToInsert = item.computeAvailableDescendents ();", "-\tTreeItem[] newAvailableItems = new TreeItem [availableItems.length + itemsToInsert.length];", "+\tTreeItem[] newAvailableItems = new TreeItem [availableItems.length + 1];", "-\tSystem.arraycopy (itemsToInsert, 0, newAvailableItems, index, itemsToInsert.length);", "-\tSystem.arraycopy (availableItems, index, newAvailableItems, index + itemsToInsert.length, availableItems.length - index);", "+\tnewAvailableItems [index] = item;", "+\tSystem.arraycopy (availableItems, index, newAvailableItems, index + 1, availableItems.length - index);", "-\tupdateVerticalBar ();", "-\tint rightX = 0;", "-\tfor (int i = 0; i < itemsToInsert.length; i++) {", "-\t\tRectangle bounds = itemsToInsert [i].getBounds ();", "-\t\trightX = Math.max (rightX, bounds.x + bounds.width);", "-\t}", "-\tupdateHorizontalBar (rightX, rightX);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab30786c86566ac3c7c208dbcc6d2d7a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/internal/BidiUtil.java", "commitBeforeChange": "4d5c21d276610d76998a87692a93017e18f6ddcc", "commitAfterChange": "d590e5665c7c6b6893429cc18bf26504a41d5603", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " public static void setKeyboardLanguage(int language)", "signatureAfterChange": " public static void setKeyboardLanguage(int language)", "diff": ["-\t// don't switch the keyboard if it doesn't need to be", "-\t", "-\tif (language == KEYBOARD_BIDI) {", "-\t\t// get the list of active languages", "-\t\tint /*long*/[] list = getKeyboardLanguageList();", "-\t\t// set to first bidi language", "-\t\tfor (int i=0; i<list.length; i++) {", "-\t\t\tint id = OS.PRIMARYLANGID(OS.LOWORD(list[i]));", "-\t\t\tif ((id == LANG_ARABIC) || (id == LANG_HEBREW)) {", "-\t\t\t\tOS.ActivateKeyboardLayout(list[i], 0);", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t}", "-\t} else {", "-\t\t// get the list of active languages", "-\t\tint /*long*/[] list = getKeyboardLanguageList();", "-\t\t// set to the first non-bidi language (anything not", "-\t\t// Hebrew or Arabic)", "-\t\tfor (int i=0; i<list.length; i++) {", "-\t\t\tint id = OS.PRIMARYLANGID(OS.LOWORD(list[i]));", "-\t\t\tif ((id != LANG_HEBREW) && (id != LANG_ARABIC)) {", "-\t\t\t\tOS.ActivateKeyboardLayout(list[i], 0);", "-\t\t\t\treturn;", "-\t\t\t}", "+\tboolean bidi = language == KEYBOARD_BIDI; ", "+\tint /*long*/[] list = getKeyboardLanguageList();", "+\tfor (int i=0; i<list.length; i++) {", "+\t\tif (bidi == isBidiLang(list[i])) {", "+\t\t\tOS.ActivateKeyboardLayout(list[i], 0);", "+\t\t\treturn;"]}], "num": 3406}
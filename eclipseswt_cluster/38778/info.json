{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75090315db0a0be5fd77395f7e9f3bd8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dca839dbdafcc703695c0a0e33ce125", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "commitAfterChange": "bbeab947327689cb203638e742e58f555e6c1b64", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 104, "signatureBeforeChange": " private void showToolTip (int x, int y)", "signatureAfterChange": " void showToolTip (int x, int y)", "diff": ["+void showToolTip (int x, int y) {", "+\tfinal Shell tip = new Shell (getShell(), SWT.ON_TOP);", "+\tfinal Label label = new Label (tip, SWT.CENTER);", "+\tDisplay display = tip.getDisplay();", "+\tlabel.setForeground (display.getSystemColor (SWT.COLOR_INFO_FOREGROUND));", "+\tlabel.setBackground (display.getSystemColor (SWT.COLOR_INFO_BACKGROUND));", "+\t", "+\tif (!updateToolTip(x, y, label)) {", "+\t\ttip.dispose();", "+\t\treturn;", "+\tfinal int [] events = new int[] {SWT.MouseExit, SWT.MouseHover, SWT.MouseMove};", "+\tfinal Listener[] listener = new Listener[1];", "+\tlistener[0] = new Listener() {", "+\t\tpublic void handleEvent(Event event) {", "+\t\t\tswitch (event.type) {", "+\t\t\t\tcase SWT.MouseHover:", "+\t\t\t\tcase SWT.MouseMove:", "+\t\t\t\t\tif (updateToolTip(event.x, event.y, label)) break;", "+\t\t\t\t\t// FALL THROUGH", "+\t\t\t\tcase SWT.MouseExit:", "+\t\t\t\t\tfor (int i = 0; i < events.length; i++) {", "+\t\t\t\t\t\tremoveListener(events[i], listener[0]);", "+\t\t\t\t\t}", "+\t\t\t\t\ttip.dispose();", "+\t\t\t\t\ttipShowing = false;", "+\t\t\t\t\tbreak;", "+\t};", "+\tfor (int i = 0; i < events.length; i++) {", "+\t\taddListener(events[i], listener[0]);", "+\ttipShowing = true;", "+\ttip.setVisible(true);", "-}", "-private void showToolTip (int x, int y) {", "-\tCTabItem item = getItem(new Point (x, y));", "-\tif (item != null) {", "-\t\tif (item == toolTipItem) return;", "-\t\ttoolTipItem = item;", "-\t\tString tooltip = item.getToolTipText();", "-\t\tif (tooltip != null) {\t\t\t", "-\t\t\tDisplay display = tip.getDisplay();", "-\t\t\tlabel.setForeground (display.getSystemColor (SWT.COLOR_INFO_FOREGROUND));", "-\t\t\tlabel.setBackground (display.getSystemColor (SWT.COLOR_INFO_BACKGROUND));", "-\t\t\tlabel.setText(tooltip);", "-\t\t\tPoint labelSize = label.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\t\tlabelSize.x += 2; labelSize.y += 2;", "-\t\t\tlabel.setSize(labelSize);", "-\t\t\ttip.pack();", "-\t\t\t/*", "-\t\t\t * On some platforms, there is a minimum size for a shell  ", "-\t\t\t * which may be greater than the label size.", "-\t\t\t * To avoid having the background of the tip shell showing", "-\t\t\t * around the label, force the label to fill the entire client area.", "-\t\t\t */", "-\t\t\tRectangle area = tip.getClientArea();", "-\t\t\tlabel.setSize(area.width, area.height);", "-\t\t\t/*", "-\t\t\t * Position the tooltip and ensure that it is not located off", "-\t\t\t * the screen.", "-\t\t\t */", "-\t\t\tPoint pt = new Point(item.x + item.width / 4, item.y + item.height + 2);", "-\t\t\tpt = toDisplay(pt);", "-\t\t\tRectangle rect = display.getBounds();", "-\t\t\tPoint tipSize = tip.getSize();", "-\t\t\tpt.x = Math.max (0, Math.min (pt.x, rect.width - tipSize.x));", "-\t\t\tpt.y = Math.max (0, Math.min (pt.y, rect.height - tipSize.y));", "-\t\t\ttip.setLocation(pt);", "-\t\t\ttip.setVisible(true);", "-\t\t\treturn;", "-\t\t}", "-\t", "-\ttoolTipItem = null;", "-\tif (tip != null && !tip.isDisposed() && tip.isVisible()) tip.setVisible(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dd1889814f279db40ee982c7889641f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "ea0345c3a53f5f855ec326cfec4508279407a40a", "commitAfterChange": "0215664973954ec1e7f14d34d79815e704ff9294", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public CTabFolder(Composite parent, int style)", "signatureAfterChange": "\r public CTabFolder(Composite parent, int style)", "diff": ["-\tListener listener = new Listener() {\r", "-\t\tpublic void handleEvent(Event event) {\r", "-\t\t\thandleEvents(event);\r", "-\t\t}\r", "-\t};\r", "-\taddListener(SWT.Dispose, listener);\r", "-\taddListener(SWT.MouseUp, listener);\r", "-\taddListener(SWT.MouseDoubleClick, listener);\r", "-\taddListener(SWT.MouseMove, listener);\r", "-\taddListener(SWT.MouseExit, listener);\r", "-\taddListener(SWT.Paint, listener);\r", "-\taddListener(SWT.Resize, listener);\r", "-\tscrollLeft.addListener(SWT.Selection, listener);\r", "-\tscrollRight.addListener(SWT.Selection, listener);\r", "-\tcloseItem.addListener(SWT.Selection, listener);\r", "-\tinactiveCloseItem.addListener(SWT.Selection, listener);\r", "-\tinactiveCloseBar.addListener (SWT.MouseExit, listener);\r", "-\t\r", "-\tsetBorderVisible((style & SWT.BORDER) != 0);\r", "-\t\r", "-\taddMouseTrackListener (new MouseTrackAdapter () {\r", "-\t\tpublic void mouseExit(MouseEvent e) {\r", "-\t\t\tif (tip.isDisposed()) return;\r", "-\t\t\tif (tip.isVisible()) tip.setVisible(false);\r", "-\t\t}\r", "-\t\tpublic void mouseHover(MouseEvent e) {\r", "-\t\t\tif (tip.isDisposed()) return;\r", "-\t\t\tPoint pt = new Point (e.x, e.y);\r", "-\t\t\tCTabItem item = getItem(pt);\r", "-\t\t\tif (item != null) {\r", "-\t\t\t\tString tooltip = item.getToolTipText();\r", "-\t\t\t\tif (tooltip != null) {\r", "-\t\t\t\t\t\r", "-\t\t\t\t\tLabel label = (Label) (tip.getChildren() [0]);\r", "-\t\t\t\t\tlabel.setText(tooltip);\r", "-\t\t\t\t\ttip.pack();\r", "-\r", "-\t\t\t\t\tpt.y += 16;\r", "-\t\t\t\t\tpt = toDisplay(pt);\r", "-\t\t\t\t\t/*\r", "-\t\t\t\t\t* Ensure that the tooltip is on the screen.\r", "-\t\t\t\t\t*/\r", "-\t\t\t\t\tDisplay display = tip.getDisplay();\r", "-\t\t\t\t\tRectangle rect = display.getBounds();\r", "-\t\t\t\t\tPoint size = tip.getSize();\r", "-\t\t\t\t\tpt.x = Math.max (0, Math.min (pt.x, rect.width - size.x));\r", "-\t\t\t\t\tpt.y = Math.max (0, Math.min (pt.y, rect.height - size.y));\r", "-\t\t\t\t\ttip.setLocation(pt);\r", "-\t\t\t\t\t\r", "-\t\t\t\t\ttip.setVisible(true);\r", "-\t\t\t\t\treturn;\r", "-\t\t\t\t}\r", "+\t// Add all listeners\r", "+\tListener listener = new Listener() {\r", "+\t\tpublic void handleEvent(Event event) {\r", "+\t\t\tswitch (event.type) {\r", "+\t\t\t\tcase SWT.Dispose:\t\tonDispose(); break;\r", "+\t\t\t\tcase SWT.Paint:\t\t\tonPaint(event);\tbreak;\r", "+\t\t\t\tcase SWT.Resize:\t\tonResize();\tbreak;\r", "+\t\t\t\tcase SWT.MouseDoubleClick:\tonMouseDoubleClick(event);\tbreak;\r", "+\t\t\t\tcase SWT.MouseDown:\t\tonMouseDown(event);\tbreak;\r", "+\t\t\t\tcase SWT.MouseExit:\t\tonMouseExit(event);\tbreak;\r", "+\t\t\t\tcase SWT.MouseHover:\tonMouseHover(event);\tbreak;\r", "+\t\t\t\tcase SWT.MouseMove:\t\tonMouseMove(event);\tbreak;\r", "+\t\t\t\tcase SWT.Selection:\t\tonSelection(event);\tbreak;\r", "-\r", "-\t\t\ttip.setVisible(false);\r", "-\t});\r", "+\t};\r", "+\tint[] folderEvents = new int[]{SWT.Dispose, SWT.MouseDown, SWT.MouseDoubleClick, SWT.MouseMove, SWT.MouseExit, SWT.MouseHover, SWT.Paint, SWT.Resize};\r", "+\tfor (int i = 0; i < folderEvents.length; i++) {\r", "+\t\taddListener(folderEvents[i], listener);\r", "+\t}\r", "+\tscrollLeft.addListener(SWT.Selection, listener);\r", "+\tscrollRight.addListener(SWT.Selection, listener);\r", "+\tcloseItem.addListener(SWT.Selection, listener);\r", "+\tinactiveCloseItem.addListener(SWT.Selection, listener);\r", "+\tinactiveCloseBar.addListener (SWT.MouseExit, listener);\r", "+\t\r", "+\tsetBorderVisible((style & SWT.BORDER) != 0);\r"]}], "num": 38778}
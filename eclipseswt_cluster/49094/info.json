{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f2b802bbb2f0b6170443670c453f581e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d23e145e682b9f401fe7b2b4fd4728a9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "e47df76d163af4f58b4ff75ede51b2d44b867113", "commitAfterChange": "3f7ecfe6e315a0b4f295c795b6e7685b24b44f23", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\t * Bug in Safari. The WebView must be added after the top window is visible", "-\t * or it eats mouse events from the top window. A second issue is that the WebView ", "-\t * does not receive mouse and key events when it is added to a visible top window. ", "-\t * It is assumed that Safari hooks its own event listener when the top window ", "-\t * emits the kEventWindowShown event. The workaround to the first problem is to add", "-\t * the WebView to the HIView after the top window is visible. The workaround to the second", "-\t * problem is to send a fake kEventWindowShown event to the top window after the WebView", "-\t * has been added to the HIView (after the top window is visible) to give Safari a chance", "-\t * to hook events.", "+\t * Bug in Safari. The WebView does not receive mouse and key events when it is added", "+\t * to a visible top window.  It is assumed that Safari hooks its own event listener", "+\t * when the top window emits the kEventWindowShown event. The workaround is to send a", "+\t * fake kEventWindowShown event to the top window after the WebView has been added", "+\t * to the HIView (after the top window is visible) to give Safari a chance to hook", "+\t * events.", "+\tOS.HIViewAddSubview(handle, webViewHandle);", "+\tOS.HIViewSetVisible(webViewHandle, true);\t", "-\t\tadded = true;", "-\t\tOS.HIViewAddSubview(handle, webViewHandle);", "-\t\tOS.HIViewSetVisible(webViewHandle, true);", "-\t\t", "-\t\t\t\t\tif (!added && e.widget == getShell()) {", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* Bug in Safari. The WebView must be added after the top window is visible", "-\t\t\t\t\t\t* or it eats mouse events from the top window. A second issue is that the WebView ", "-\t\t\t\t\t\t* does not receive mouse and key events when it is added to a visible top window. ", "-\t\t\t\t\t\t* It is assumed that Safari hooks its own event listener when the top window ", "-\t\t\t\t\t\t* emits the kEventWindowShown event. The workaround to the first problem is to add", "-\t\t\t\t\t\t* the WebView to the HIView after the top window is visible. The workaround to the second", "-\t\t\t\t\t\t* problem is to send a fake kEventWindowShown event to the top window after the WebView", "-\t\t\t\t\t\t* has been added to the HIView (after the top window is visible) to give Safari a chance", "-\t\t\t\t\t\t* to hook events.", "-\t\t\t\t\t\t* ", "-\t\t\t\t\t\t* Note. SWT.Show is sent before the Shell is actually visible. The workaround is to", "-\t\t\t\t\t\t* add the WebView to the HiView from an asyncExec, after this notification has returned and", "-\t\t\t\t\t\t* made the Shell visible.", "-\t\t\t\t\t\t* Note. Because the Shell is already visible when WebView is added to the HiView and the real", "-\t\t\t\t\t\t* kEventWindowShow event has therefore been sent already, we need to send a fake kEventWindowShown", "-\t\t\t\t\t\t* event so that Safari can hook its events.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tfinal Shell shell = getShell();", "-\t\t\t\t\t\tgetDisplay().asyncExec(new Runnable() { ", "-\t\t\t\t\t\t\tpublic void run() {", "-\t\t\t\t\t\t\t\tif (isDisposed() || shell.isDisposed()) return;", "-\t\t\t\t\t\t\t\tif (added || !shell.isVisible()) return;", "-\t\t\t\t\t\t\t\tadded = true;", "-\t\t\t\t\t\t\t\tOS.HIViewAddSubview(handle, webViewHandle);", "-\t\t\t\t\t\t\t\tOS.HIViewSetVisible(webViewHandle, true);", "-", "-\t\t\t\t\t\t\t\tint[] showEvent = new int[1];", "-\t\t\t\t\t\t\t\tOS.CreateEvent(0, OS.kEventClassWindow, OS.kEventWindowShown, 0.0, OS.kEventAttributeUserEvent, showEvent);", "-\t\t\t\t\t\t\t\tOS.SetEventParameter(showEvent[0], OS.kEventParamDirectObject, OS.typeWindowRef, 4, new int[] {OS.GetControlOwner(handle)});", "-\t\t\t\t\t\t\t\tOS.SendEventToEventTarget(showEvent[0], OS.GetWindowEventTarget(OS.GetControlOwner(handle)));", "-\t\t\t\t\t\t\t\tif (showEvent[0] != 0) OS.ReleaseEvent(showEvent[0]);", "-", "-\t\t\t\t\t\t\t\tCGRect bounds = new CGRect();", "-\t\t\t\t\t\t\t\tOS.HIViewGetFrame(handle, bounds);", "-\t\t\t\t\t\t\t\t/* ", "-\t\t\t\t\t\t\t\t* Note.  Setting negative width or height causes Safari to always", "-\t\t\t\t\t\t\t\t* display incorrectly even if further resize events are correct.", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\tif (bounds.width < 0) bounds.width = 0;", "-\t\t\t\t\t\t\t\tif (bounds.height < 0) bounds.height = 0;", "-\t\t\t\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t});", "-\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa114682f54756c00e7b9f603a456b9d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "2e101cd05354a2b8b2c5bd7ff2ea32310e5732d7", "commitAfterChange": "3d14fe31ddd39bccba6a2856fcd2adc1154c62d5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\tOS.HIViewAddSubview(handle, webViewHandle);", "-\tOS.HIViewSetVisible(webViewHandle, true);", "-\t\t\t", "+\t/*", "+\t* Bug in Safari. The WebView must be added after the top window is visible", "+\t* or it eats mouse events from the top window. A second issue is that the WebView ", "+\t* does not receive mouse and key events when it is added to a visible top window. ", "+\t* It is assumed that Safari hooks its own event listener when the top window ", "+\t* emits the kEventWindowShown event. The workaround to the first problem is to add", "+\t* the WebView to the HIView after the top window is visible. The workaround to the second", "+\t* problem is to send a fake kEventWindowShown event to the top window after the WebView", "+\t* has been added to the HIView (after the top window is visible) to give Safari a chance", "+\t* to hook events.", "+\t*/", "+\tif (getShell().isVisible()) {", "+\t\tadded = true;", "+\t\tOS.HIViewAddSubview(handle, webViewHandle);", "+\t\tOS.HIViewSetVisible(webViewHandle, true);", "+\t\t", "+\t\tint[] showEvent = new int[1];", "+\t\tOS.CreateEvent(0, OS.kEventClassWindow, OS.kEventWindowShown, 0.0, OS.kEventAttributeUserEvent, showEvent);", "+\t\tOS.SetEventParameter(showEvent[0], OS.kEventParamDirectObject, OS.typeWindowRef, 4, new int[] {OS.GetControlOwner(handle)});", "+\t\tOS.SendEventToEventTarget(showEvent[0], OS.GetWindowEventTarget(OS.GetControlOwner(handle)));", "+\t\tif (showEvent[0] != 0) OS.ReleaseEvent(showEvent[0]);", "+\t}", "+", "+\t\t\t\t\tif (!added && e.widget == getShell()) {", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t* Bug in Safari. The WebView must be added after the top window is visible", "+\t\t\t\t\t\t* or it eats mouse events from the top window. A second issue is that the WebView ", "+\t\t\t\t\t\t* does not receive mouse and key events when it is added to a visible top window. ", "+\t\t\t\t\t\t* It is assumed that Safari hooks its own event listener when the top window ", "+\t\t\t\t\t\t* emits the kEventWindowShown event. The workaround to the first problem is to add", "+\t\t\t\t\t\t* the WebView to the HIView after the top window is visible. The workaround to the second", "+\t\t\t\t\t\t* problem is to send a fake kEventWindowShown event to the top window after the WebView", "+\t\t\t\t\t\t* has been added to the HIView (after the top window is visible) to give Safari a chance", "+\t\t\t\t\t\t* to hook events.", "+\t\t\t\t\t\t* ", "+\t\t\t\t\t\t* Note. SWT.Show is sent before the Shell is actually visible. The workaround is to", "+\t\t\t\t\t\t* add the WebView to the HiView from an asyncExec, after this notification has returned and", "+\t\t\t\t\t\t* made the Shell visible.", "+\t\t\t\t\t\t* Note. Because the Shell is already visible when WebView is added to the HiView and the real", "+\t\t\t\t\t\t* kEventWindowShow event has therefore been sent already, we need to send a fake kEventWindowShown", "+\t\t\t\t\t\t* event so that Safari can hook its events.", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tfinal Shell shell = getShell();", "+\t\t\t\t\t\tgetDisplay().asyncExec(new Runnable() { ", "+\t\t\t\t\t\t\tpublic void run() {", "+\t\t\t\t\t\t\t\tif (isDisposed() || shell.isDisposed()) return;", "+\t\t\t\t\t\t\t\tif (added || !shell.isVisible()) return;", "+\t\t\t\t\t\t\t\tadded = true;", "+\t\t\t\t\t\t\t\tOS.HIViewAddSubview(handle, webViewHandle);", "+\t\t\t\t\t\t\t\tOS.HIViewSetVisible(webViewHandle, true);", "+", "+\t\t\t\t\t\t\t\tint[] showEvent = new int[1];", "+\t\t\t\t\t\t\t\tOS.CreateEvent(0, OS.kEventClassWindow, OS.kEventWindowShown, 0.0, OS.kEventAttributeUserEvent, showEvent);", "+\t\t\t\t\t\t\t\tOS.SetEventParameter(showEvent[0], OS.kEventParamDirectObject, OS.typeWindowRef, 4, new int[] {OS.GetControlOwner(handle)});", "+\t\t\t\t\t\t\t\tOS.SendEventToEventTarget(showEvent[0], OS.GetWindowEventTarget(OS.GetControlOwner(handle)));", "+\t\t\t\t\t\t\t\tif (showEvent[0] != 0) OS.ReleaseEvent(showEvent[0]);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t});", "+\t\t\t\t\t}"]}], "num": 49094}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5066b8138b1702708c58357ebdea1e22", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eecee0eb79d52083bcad2f852155935f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/events/KeyEvent.java", "commitBeforeChange": "276fef9746789814e21bd8e3a8e36c8ecc1732db", "commitAfterChange": "88318078b5ca53da5f23d800b3a84760481b2a7b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public String toString()", "signatureAfterChange": " public String toString()", "diff": ["-\t\t+ \" character='\" + ((character == 0) ? \"\\\\0\" : \"\" + character) + \"'\"", "-\t\t+ \" keyCode=\" + keyCode", "-\t\t+ \" keyLocation=\" + keyLocation", "-\t\t+ \" stateMask=\" + stateMask", "+\t\t+ \" character='\" + ((character == 0) ? \"\\\\0\" : String.valueOf(character)) + \"'=0x\" + Integer.toHexString(character)", "+\t\t+ \" keyCode=0x\" + Integer.toHexString(keyCode)", "+\t\t+ \" keyLocation=0x\" + Integer.toHexString(keyLocation)", "+\t\t+ \" stateMask=0x\" + Integer.toHexString(stateMask)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34d779a5099cd327f35922cc505ca58e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "545180c481c04bddb5f358152056c1461a4a34d1", "commitAfterChange": "9cd26d5223bd03ea08324197722fd8b6203b707d", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " public Point textExtent(String string, int flags)", "signatureAfterChange": " public Point textExtent(String string, int flags)", "diff": ["-\tint length = string.length();", "-\tif (length == 0) return new Point(0, data.fontAscent + data.fontDescent);", "-\tif (data.layout == 0) createLayout ();", "-\tint layout = data.layout;", "-\tlength = setString(string, flags);", "-\tint width, height;", "-\tATSTrapezoid trapezoid = new ATSTrapezoid();", "-\tif ((flags & SWT.DRAW_DELIMITER) != 0) {", "-\t\twidth = 0;", "-\t\theight = 0;", "-\t\tint[] breakCount = new int[1];", "-\t\tOS.ATSUGetSoftLineBreaks(layout, 0, length, 0, null, breakCount);", "-\t\tint[] breaks = new int[breakCount[0] + 1];", "-\t\tOS.ATSUGetSoftLineBreaks(layout, 0, length, breakCount[0], breaks, breakCount);", "-\t\tbreaks[breakCount[0]] = length;", "-\t\tfor (int i=0, start=0; i<breaks.length; i++) {", "-\t\t\tint lineBreak = breaks[i];", "-\t\t\tOS.ATSUGetGlyphBounds(layout, 0, 0, start, lineBreak - start, (short)OS.kATSUseDeviceOrigins, 1, trapezoid, null);", "-\t\t\twidth = Math.max(width, OS.Fix2Long(trapezoid.upperRight_x) - OS.Fix2Long(trapezoid.upperLeft_x));", "-\t\t\theight += OS.Fix2Long(trapezoid.lowerRight_y) - OS.Fix2Long(trapezoid.upperRight_y);", "-\t\t\tstart = lineBreak;", "-\t\t}", "+\tint length = setString(string, flags);", "+\tif (data.stringWidth != -1) return new Point(data.stringWidth, data.stringHeight);", "+\tint width = 0, height;", "+\tif (length == 0) {", "+\t\theight = data.fontAscent + data.fontDescent;", "-\t\tOS.ATSUGetGlyphBounds(layout, 0, 0, 0, length, (short)OS.kATSUseDeviceOrigins, 1, trapezoid, null);", "-\t\twidth = OS.Fix2Long(trapezoid.upperRight_x) - OS.Fix2Long(trapezoid.upperLeft_x);", "-\t\theight = OS.Fix2Long(trapezoid.lowerRight_y) - OS.Fix2Long(trapezoid.upperRight_y);", "+\t\tATSTrapezoid trapezoid = new ATSTrapezoid();", "+\t\tif ((flags & SWT.DRAW_DELIMITER) != 0) {", "+\t\t\theight = 0;", "+\t\t\tint layout = data.layout;", "+\t\t\tint[] breakCount = new int[1];", "+\t\t\tOS.ATSUGetSoftLineBreaks(layout, 0, length, 0, null, breakCount);", "+\t\t\tint[] breaks = new int[breakCount[0] + 1];", "+\t\t\tOS.ATSUGetSoftLineBreaks(layout, 0, length, breakCount[0], breaks, breakCount);", "+\t\t\tbreaks[breakCount[0]] = length;", "+\t\t\tfor (int i=0, start=0; i<breaks.length; i++) {", "+\t\t\t\tint lineBreak = breaks[i];", "+\t\t\t\tOS.ATSUGetGlyphBounds(layout, 0, 0, start, lineBreak - start, (short)OS.kATSUseDeviceOrigins, 1, trapezoid, null);", "+\t\t\t\twidth = Math.max(width, OS.Fix2Long(trapezoid.upperRight_x) - OS.Fix2Long(trapezoid.upperLeft_x));", "+\t\t\t\theight += OS.Fix2Long(trapezoid.lowerRight_y) - OS.Fix2Long(trapezoid.upperRight_y);", "+\t\t\t\tstart = lineBreak;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tOS.ATSUGetGlyphBounds(data.layout, 0, 0, 0, length, (short)OS.kATSUseDeviceOrigins, 1, trapezoid, null);", "+\t\t\twidth = OS.Fix2Long(trapezoid.upperRight_x) - OS.Fix2Long(trapezoid.upperLeft_x);", "+\t\t\theight = OS.Fix2Long(trapezoid.lowerRight_y) - OS.Fix2Long(trapezoid.upperRight_y);", "+\t\t}", "-\treturn new Point(width, height);", "+\treturn new Point(data.stringWidth = width, data.stringHeight = height);"]}], "num": 32583}
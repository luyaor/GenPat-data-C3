{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ddc4d9ee4fbf31eb9ecee8eafbe455a5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a19e9c309559413b0a70b9dc53a4f83a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "d7f67e8b48c54b2018c6a5f759c5479dd3e1cfe5", "commitAfterChange": "c83c3ac091bc0c96fc3831473381c286685245e0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void dispose ()", "signatureAfterChange": " public void dispose ()", "diff": ["-\tRectangle parentBounds = parent.getClientArea ();", "+\tRectangle parentBounds = parent.clientArea;", "+\tint nextColumnAlignment = parent.columns.length > 1 ? parent.columns [1].getAlignment () : SWT.LEFT;", "-\t * If column 0 was disposed and if the parent has style CHECK then", "-\t * the new column 0 will change, so explicitly redraw it if it appears to", "-\t * the left of the disposed column in the column order.", "+\t * If column 0 was disposed then the new column 0 must be redrawn if it appears to the", "+\t * left of the disposed column in the column order AND one the following are true:", "+\t * - the parent has style CHECK, since these will now appear in the new column 0", "+\t * - the new column 0 had non-left alignment before the dispose, since the parent will have", "+\t * \tchanged this to LEFT in the call to dispose(true)", "-\tif ((parent.style & SWT.CHECK) != 0 && index == 0) {", "+\tif (index == 0 && ((parent.style & SWT.CHECK) != 0 || nextColumnAlignment != SWT.LEFT)) {", "-\t\t\t\tparent.redraw (newColumn0.getX (), 0, newColumn0.width, parentBounds.height, false);", "+\t\t\t\tint newColumn0x = newColumn0.getX (); ", "+\t\t\t\tparent.redraw (newColumn0x, 0, newColumn0.width, parentBounds.height, false);", "+\t\t\t\t/* if the alignment changed then the header text must be repainted with its new alignment */", "+\t\t\t\tif (nextColumnAlignment != SWT.LEFT && parent.getHeaderVisible () && parent.drawCount == 0) {", "+\t\t\t\t\tparent.header.redraw (newColumn0x, 0, newColumn0.width, parent.header.getClientArea ().height, false);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9a6c748524f74616b338143ab4d4274", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "8a9ef840bc86ae2bf34f98752798326225f9d841", "commitAfterChange": "37ab6e99930a6eb0c65b6690b0349f90233e4e96", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 58, "signatureBeforeChange": "  void handleEvent(int evt)", "signatureAfterChange": "  void handleEvent(int evt)", "diff": ["+\tif (typeString.equals(DOMEVENT_FOCUSIN)) {", "+\t\thasNewFocusElement = true;", "+\t\treturn;", "+\t}", "+\tif (typeString.equals(DOMEVENT_FOCUSOUT)) {", "+\t\thasNewFocusElement = false;", "+\t\treturn;", "+\t}", "+", "-\t\tif (!keyEvent.doit) {", "+", "+\t\tboolean doit = keyEvent.doit;", "+\t\t/*", "+\t\t* Bug in Safari.  Attempting to traverse out of Safari backwards (Shift+Tab) leaves", "+\t\t* Safari in a strange state where it no longer has focus but still receives keys.", "+\t\t* The Carbon-based Safari examples have the same problem.  The workaround is to", "+\t\t* only allow forward Tab traversals within the Browser.", "+\t\t*/", "+\t\tif (doit && keyEvent.keyCode == SWT.TAB && (keyEvent.stateMask & SWT.SHIFT) != 0) {", "+\t\t\tdoit = false;", "+\t\t}", "+\t\tif (!doit) {", "+\t\t} else {", "+\t\t\tif (keyEvent.keyCode == SWT.TAB && DOMEVENT_KEYUP.equals(typeString)) {", "+\t\t\t\tif (!hasNewFocusElement) {", "+\t\t\t\t\tbrowser.traverse(SWT.TRAVERSE_TAB_NEXT);", "+\t\t\t\t}", "+\t\t\t\thasNewFocusElement = false;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57f85339bccbd792ead07c65276e8040", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "f99fa3a1cda272de1e13f169bf4c1cf723f1dd66", "commitAfterChange": "6ba72389388a2aca30ea9d8b04ec9023b6a0b89a", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 64, "signatureBeforeChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "diff": ["-\t\t\t\t\tbufferedPaint = true;", "+\t\t\t\t\tif ((style & SWT.TRANSPARENT) == 0) bufferedPaint = true;", "-\t\t\tif ((style & (SWT.NO_MERGE_PAINTS | SWT.DOUBLE_BUFFERED)) != 0) {", "+\t\t\tif (((style & SWT.DOUBLE_BUFFERED) != 0 && (style & SWT.TRANSPARENT) == 0) || (style & SWT.NO_MERGE_PAINTS) != 0) {", "-\t\t\t\tif ((style & SWT.DOUBLE_BUFFERED) != 0) {", "+\t\t\t\tif ((style & SWT.DOUBLE_BUFFERED) != 0 && (style & SWT.TRANSPARENT) == 0) {", "-\t\t\t\t\tif ((style & SWT.NO_BACKGROUND) != 0) {", "+\t\t\t\t\tif ((style & (SWT.NO_BACKGROUND | SWT.TRANSPARENT)) != 0) {", "-\t\t\t\t\t\tif ((style & (SWT.DOUBLE_BUFFERED | SWT.NO_BACKGROUND)) == 0) {", "+\t\t\t\t\t\tif ((style & (SWT.DOUBLE_BUFFERED | SWT.NO_BACKGROUND | SWT.TRANSPARENT)) == 0) {", "-\t\t\t\t\tif ((style & (SWT.DOUBLE_BUFFERED | SWT.NO_BACKGROUND)) == 0) {", "+\t\t\t\t\tif ((style & (SWT.DOUBLE_BUFFERED | SWT.NO_BACKGROUND | SWT.TRANSPARENT)) == 0) {", "-\t\t\t\tif ((style & SWT.DOUBLE_BUFFERED) != 0) {", "+\t\t\t\tif ((style & SWT.DOUBLE_BUFFERED) != 0 && (style & SWT.TRANSPARENT) == 0) {", "-\t\tif ((style & SWT.NO_BACKGROUND) == 0) {", "+\t\tif ((style & (SWT.NO_BACKGROUND | SWT.TRANSPARENT)) == 0) {"]}], "num": 24218}
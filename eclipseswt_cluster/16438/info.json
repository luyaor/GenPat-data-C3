{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a25a2ef25b27882cf77d8c4a179ee88", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64231392b7fdb769bc63c86cefeacd70", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleType.java", "commitBeforeChange": "a73836b62f7b4598932e8c5312c4b064291c921f", "commitAfterChange": "9e104f73db7a2c845f9e17635faa75853418512a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t \tint createInstance (Accessible accessible, int widget)", "signatureAfterChange": "  \tstatic AccessibleType getInstance ()", "diff": ["-\t", "-\tint createInstance (Accessible accessible, int widget) {", "-\t\tint type = handle;", "-\t\tAccessible acc = accessible;", "-\t\tif (acc == null) {", "-\t\t\t// we don't care about this control, so create it with the parent's ", "-\t\t\t// type so that its accessibility callbacks will not pass though here", "-\t\t\ttype = OS.g_type_parent (type);", "-\t\t\tint result = OS.g_object_new (type, 0);", "-\t\t\tOS.atk_object_initialize (result, widget);", "-\t\t\treturn result;", "-\t\t}", "-\t\tAccessibleObject object = new AccessibleObject (type, widget, acc);", "-\t\taccessibleObjects.put (new Integer (object.handle), object);", "-\t\tacc.accessibleObject = object;", "-\t\treturn object.handle;", "-\t}", "+\tstatic AccessibleType getInstance () {", "+\t\treturn instance;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a16d8c575b3f8d9fc5901b9d2a845d4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleFactory.java", "commitBeforeChange": "1600566572476d9a59d55b12b53edda457f44a52", "commitAfterChange": "9b8efc09a689dca8137a73eb726757d83f71f8ea", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  \tint atkObjectFactory_create_accessible (int widget)", "signatureAfterChange": "  \tint atkObjectFactory_create_accessible (int widget)", "diff": ["-\t\treturn accessibleType.createObject (accessible, widget);", "+\t\tif (accessible == null) {", "+\t\t\t// we don't care about this control, so create it with the parent's ", "+\t\t\t// type so that its accessibility callbacks will not pass though here", "+\t\t\tint result = ATK.g_object_new (objectParentType, 0);", "+\t\t\tATK.atk_object_initialize (result, widget);", "+\t\t\treturn result;", "+\t\t}", "+\t\tAccessibleObject object = new AccessibleObject (objectType, widget, accessible, objectParentType, false);", "+\t\taccessible.accessibleObject = object;", "+\t\treturn object.handle;"]}], "num": 16438}
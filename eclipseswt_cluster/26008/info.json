{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "edb58b2c2a144e83790ad4681a5a3fcc", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f3f08bb5b015b66b10793f60dcd17d6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "b197fadb3502216356123da9439cdb60982a1cd2", "commitAfterChange": "849f9fe02214fcd8662b26bd0db659c0d86c1384", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " void doPageUp(int stateMask)", "signatureAfterChange": " void doPageUp(int stateMask)", "diff": ["+\tint visibleItemCount = (getClientArea().height - getHeaderHeight()) / itemHeight;", "-\t\tint visibleItemCount = (getClientArea().height - getHeaderHeight()) / itemHeight;", "-\t// TODO handle modifier key cases", "+\tif ((stateMask & (SWT.CTRL | SWT.SHIFT)) == (SWT.CTRL | SWT.SHIFT)) {", "+\t\tint newTopIndex = Math.max (0, topIndex - visibleItemCount);", "+\t\tif (newTopIndex == topIndex) return;", "+\t\tsetTopItem(availableItems[newTopIndex]);", "+\t\treturn;", "+\t}", "+\tif ((style & SWT.SINGLE) != 0) {", "+\t\tif ((stateMask & SWT.SHIFT) != 0) {", "+\t\t\tint newFocusIndex = focusItem.availableIndex - visibleItemCount + 1;", "+\t\t\tnewFocusIndex = Math.max(newFocusIndex, 0);", "+\t\t\tTreeItem2 item = availableItems[newFocusIndex];", "+\t\t\tselectItem(item, false);", "+\t\t\tsetFocusItem(item, true);", "+\t\t\tshowItem(item);", "+\t\t\tredrawItem(item.availableIndex);", "+\t\t\treturn;", "+\t\t}", "+\t\tint newTopIndex = Math.max (0, topIndex - visibleItemCount);", "+\t\tif (newTopIndex == topIndex) return;", "+\t\tsetTopItem(availableItems[newTopIndex]);", "+\t\treturn;", "+\t}", "+\tif ((stateMask & SWT.CTRL) != 0) {", "+\t\tif (focusItem.availableIndex != topIndex) {", "+\t\t\tsetFocusItem(availableItems[topIndex], true);", "+\t\t\tredrawItem(topIndex);", "+\t\t\treturn;", "+\t\t}", "+\t\tif (focusItem.availableIndex == 0) return;\t\t/* at top */", "+\t\tint newTopIndex = Math.max(0, topIndex - visibleItemCount + 1);", "+\t\tsetFocusItem(availableItems[newTopIndex], false);", "+\t\tsetTopItem(availableItems[newTopIndex]);", "+\t\treturn;", "+\t}", "+\t/* SWT.SHIFT */", "+\tif (anchorItem == null) anchorItem = focusItem;", "+\tint anchorIndex = anchorItem.availableIndex;", "+\tint selectIndex = Math.max(0,focusItem.availableIndex - visibleItemCount + 1);", "+\tTreeItem2 selectedItem = availableItems[selectIndex];", "+\tTreeItem2[] newSelection = new TreeItem2 [Math.abs(anchorIndex - selectIndex) + 1];", "+\tint step = anchorIndex < selectIndex ? 1 : -1;", "+\tint writeIndex = 0;", "+\tfor (int i = anchorIndex; i != selectIndex; i += step) {", "+\t\tnewSelection[writeIndex++] = availableItems[i];", "+\t}", "+\tnewSelection[writeIndex] = availableItems[selectIndex];", "+\tsetSelection(newSelection);", "+\tsetFocusItem(selectedItem, true);", "+\tshowItem(selectedItem);", "+\tEvent newEvent = new Event();", "+\tnewEvent.item = selectedItem;", "+\tsendEvent(SWT.Selection, newEvent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "823189791c6d59e6dc6cb7165c071f0c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "b197fadb3502216356123da9439cdb60982a1cd2", "commitAfterChange": "849f9fe02214fcd8662b26bd0db659c0d86c1384", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " void doPageDown(int stateMask)", "signatureAfterChange": " void doPageDown(int stateMask)", "diff": ["+\tint visibleItemCount = (getClientArea().height - getHeaderHeight()) / itemHeight;", "-\t\tint visibleItemCount = (getClientArea().height - getHeaderHeight()) / itemHeight;", "-\t// TODO handle modifier key cases", "+\tif ((stateMask & (SWT.CTRL | SWT.SHIFT)) == (SWT.CTRL | SWT.SHIFT)) {", "+\t\tint newTopIndex = topIndex + visibleItemCount;", "+\t\tnewTopIndex = Math.min (newTopIndex, availableItems.length - visibleItemCount);", "+\t\tif (newTopIndex == topIndex) return;", "+\t\tsetTopItem(availableItems[newTopIndex]);", "+\t\treturn;", "+\t}", "+\tif ((style & SWT.SINGLE) != 0) {", "+\t\tif ((stateMask & SWT.SHIFT) != 0) {", "+\t\t\tint newFocusIndex = focusItem.availableIndex + visibleItemCount - 1;", "+\t\t\tnewFocusIndex = Math.min(newFocusIndex, availableItems.length - 1);", "+\t\t\tTreeItem2 item = availableItems[newFocusIndex];", "+\t\t\tselectItem(item, false);", "+\t\t\tsetFocusItem(item, true);", "+\t\t\tshowItem(item);", "+\t\t\tredrawItem(item.availableIndex);", "+\t\t\treturn;", "+\t\t}", "+\t\tint newTopIndex = topIndex + visibleItemCount;", "+\t\tnewTopIndex = Math.min (newTopIndex, availableItems.length - visibleItemCount);", "+\t\tif (newTopIndex == topIndex) return;", "+\t\tsetTopItem(availableItems[newTopIndex]);", "+\t\treturn;", "+\t}", "+\tif ((stateMask & SWT.CTRL) != 0) {", "+\t\tint bottomIndex = Math.min(topIndex + visibleItemCount - 1, availableItems.length - 1);", "+\t\tif (focusItem.availableIndex != bottomIndex) {", "+\t\t\tsetFocusItem(availableItems[bottomIndex], true);", "+\t\t\tredrawItem(bottomIndex);", "+\t\t\treturn;", "+\t\t}", "+\t\tif (focusItem.availableIndex == availableItems.length - 1) return;\t/* at bottom */", "+\t\tbottomIndex = Math.min(bottomIndex + visibleItemCount - 1, availableItems.length - 1);", "+\t\tsetFocusItem(availableItems[bottomIndex], false);", "+\t\tshowItem(availableItems[bottomIndex]);", "+\t\treturn;", "+\t}", "+\t/* SWT.SHIFT */", "+\tif (anchorItem == null) anchorItem = focusItem;", "+\tint anchorIndex = anchorItem.availableIndex;", "+\tint selectIndex = focusItem.availableIndex + visibleItemCount - 1;", "+\tselectIndex = Math.min (selectIndex, availableItems.length - 1);", "+\tTreeItem2 selectedItem = availableItems[selectIndex];", "+\tTreeItem2[] newSelection = new TreeItem2 [Math.abs(anchorIndex - selectIndex) + 1];", "+\tint step = anchorIndex < selectIndex ? 1 : -1;", "+\tint writeIndex = 0;", "+\tfor (int i = anchorIndex; i != selectIndex; i += step) {", "+\t\tnewSelection[writeIndex++] = availableItems[i];", "+\t}", "+\tnewSelection[writeIndex] = availableItems[selectIndex];", "+\tsetSelection(newSelection);", "+\tsetFocusItem(selectedItem, true);", "+\tshowItem(selectedItem);", "+\tEvent newEvent = new Event();", "+\tnewEvent.item = selectedItem;", "+\tsendEvent(SWT.Selection, newEvent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69c37134efe3209799910dda56e62bf0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 23, "signatureBeforeChange": " Image getExpandedImage()", "signatureAfterChange": " void doPageDown(int stateMask)", "diff": ["+}", "+void doPageDown(int stateMask) {", "+\tint visibleItemCount = (getClientArea().height - getHeaderHeight()) / itemHeight;", "+\tif ((stateMask & (SWT.CTRL | SWT.SHIFT)) == 0) {", "+\t\tint newFocusIndex = focusItem.availableIndex + visibleItemCount - 1;", "+\t\tnewFocusIndex = Math.min(newFocusIndex, availableItems.length - 1);", "+\t\tTreeItem item = availableItems[newFocusIndex];", "+\t\tselectItem(item, false);", "+\t\tsetFocusItem(item, true);", "+\t\tshowItem(item);", "+\t\tredrawItem(item.availableIndex);", "+\t\treturn;", "+\t}", "+\tif ((stateMask & (SWT.CTRL | SWT.SHIFT)) == (SWT.CTRL | SWT.SHIFT)) {", "+\t\tint newTopIndex = topIndex + visibleItemCount;", "+\t\tnewTopIndex = Math.min (newTopIndex, availableItems.length - visibleItemCount);", "+\t\tif (newTopIndex == topIndex) return;", "+\t\tsetTopItem(availableItems[newTopIndex]);", "+\t\treturn;", "+\t}", "+\tif ((style & SWT.SINGLE) != 0) {", "+\t\tif ((stateMask & SWT.SHIFT) != 0) {", "+\t\t\tint newFocusIndex = focusItem.availableIndex + visibleItemCount - 1;", "+\t\t\tnewFocusIndex = Math.min(newFocusIndex, availableItems.length - 1);", "+\t\t\tTreeItem item = availableItems[newFocusIndex];", "+\t\t\tselectItem(item, false);", "+\t\t\tsetFocusItem(item, true);", "+\t\t\tshowItem(item);", "+\t\t\tredrawItem(item.availableIndex);", "+\t\t\treturn;", "+\t\t}", "+\t\tint newTopIndex = topIndex + visibleItemCount;", "+\t\tnewTopIndex = Math.min (newTopIndex, availableItems.length - visibleItemCount);", "+\t\tif (newTopIndex == topIndex) return;", "+\t\tsetTopItem(availableItems[newTopIndex]);", "+\t\treturn;", "+\t}", "+\tif ((stateMask & SWT.CTRL) != 0) {", "+\t\tint bottomIndex = Math.min(topIndex + visibleItemCount - 1, availableItems.length - 1);", "+\t\tif (focusItem.availableIndex != bottomIndex) {", "+\t\t\tsetFocusItem(availableItems[bottomIndex], true);", "+\t\t\tredrawItem(bottomIndex);", "+\t\t\treturn;", "+\t\t}", "+\t\tif (focusItem.availableIndex == availableItems.length - 1) return;\t/* at bottom */", "+\t\tbottomIndex = Math.min(bottomIndex + visibleItemCount - 1, availableItems.length - 1);", "+\t\tsetFocusItem(availableItems[bottomIndex], false);", "+\t\tshowItem(availableItems[bottomIndex]);", "+\t\treturn;", "+\t}", "+\t/* SWT.SHIFT */", "+\tif (anchorItem == null) anchorItem = focusItem;", "+\tint anchorIndex = anchorItem.availableIndex;", "+\tint selectIndex = focusItem.availableIndex + visibleItemCount - 1;", "+\tselectIndex = Math.min (selectIndex, availableItems.length - 1);", "+\tTreeItem selectedItem = availableItems[selectIndex];", "+\tTreeItem[] newSelection = new TreeItem [Math.abs(anchorIndex - selectIndex) + 1];", "+\tint step = anchorIndex < selectIndex ? 1 : -1;", "+\tint writeIndex = 0;", "+\tfor (int i = anchorIndex; i != selectIndex; i += step) {", "+\t\tnewSelection[writeIndex++] = availableItems[i];", "+\t}", "+\tnewSelection[writeIndex] = availableItems[selectIndex];", "+\tsetSelection(newSelection);", "+\tsetFocusItem(selectedItem, true);", "+\tshowItem(selectedItem);", "+\tEvent newEvent = new Event();", "+\tnewEvent.item = selectedItem;", "+\tsendEvent(SWT.Selection, newEvent);", "+}", "- */", "-Image getExpandedImage() {", "-\tif (expandedImage == null) {", "-\t\texpandedImage = new Image(display, ExpandedImageData);", "-\t}", "-\treturn expandedImage;", "-}"]}], "num": 26008}
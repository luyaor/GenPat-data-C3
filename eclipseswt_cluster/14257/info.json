{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ddeae69460dedf3c15bf07bbdf88a53", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84dfec3b7c0b38230ddeb58858e7f5ff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "13f187d2546a8965ba01c196bed5477d3b0ad8f7", "commitAfterChange": "b0c47ff63bb2be4efd712e7d76e41c37e545f510", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "   void setItemCount (TreeItem parentItem, int count)", "signatureAfterChange": "   void setItemCount (TreeItem parentItem, int count)", "diff": ["-\t\t* Bug in Cocoa. When reloading an item that is not expandable,", "-\t\t* the NSOutlineView does not attempt to fix selection. Therefore,", "-\t\t* if child item is selected, and all children are removed", "-\t\t* from its parent, the NSOutlineViews selected row does not change,", "-\t\t* and an incorrect selection is left in the view.  The fix is to", "-\t\t* deselect all child items before reloading the parent when setting ", "-\t\t* the child count to 0. ", "+\t\t* Bug in Cocoa.  When removing selected items from an NSOutlineView, the selection", "+\t\t* is not properly updated.  The fix is to ensure that the item and its subitems", "+\t\t* are deselected before the item is removed by the reloadItem call. ", "-\t\tif (count == 0) {", "-\t\t\tfor (int i = 0; i < children.length; i++) {", "-\t\t\t\tTreeItem treeItem = children[i];", "-\t\t\t\tif (treeItem != null) widget.deselectRow(widget.rowForItem(treeItem.handle));", "+\t\tif (expanded) {", "+\t\t\tfor (int index = count; index < itemCount; index ++) {", "+\t\t\t\tTreeItem item = children [index];", "+\t\t\t\tif (item != null && !item.isDisposed ()) item.clearSelection ();", "-\twidget.noteNumberOfRowsChanged();", "-\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0410dcc4c8dc8e1ce5c478a45d07889", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/Transfer.java", "commitBeforeChange": "90cffad57b2c0ad67dbf68bc30b3f25f5bc7e83e", "commitAfterChange": "e6996491cee7311e9013affa5737d1b990fc94fa", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public static int registerType(String formatName)", "signatureAfterChange": " public static int registerType(String formatName)", "diff": ["-\tfor (int i = 0; i < typeCount; i++) {", "-\t\tString type = types[i];", "+\t/* Note the type 0 is not used */", "+\tint index = 1;", "+\twhile (index < TYPES.length) {", "+\t\tString type = TYPES[index];", "-\t\t\treturn i;", "+\t\t\treturn index;", "+\t\tindex++;", "-\tif (typeCount + 1 == types.length) { // types[0] is null", "-\t\tString[] newTypes = new String[types.length + 4];", "-\t\tSystem.arraycopy(types, 0, newTypes, 0, types.length);", "-\t\ttypes = newTypes;", "+\tif (index == TYPES.length) {", "+\t\tString[] newTypes = new String[TYPES.length + 4];", "+\t\tSystem.arraycopy(TYPES, 0, newTypes, 0, TYPES.length);", "+\t\tTYPES = newTypes;", "-\ttypes[++typeCount] = formatName;", "-\treturn typeCount;", "+\tTYPES[index] = formatName;", "+\treturn index;"]}], "num": 14257}
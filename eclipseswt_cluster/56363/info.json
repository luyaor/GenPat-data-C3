{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "814488a96932c08b2f05aeab400d6e08", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b88ae932a2b23d98a469f91ec622e12a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "2af93dbd1644168624ca28d452a4ce599d0e9d63", "commitAfterChange": "6a25fc42ad45038e5678af0a5bbcc5f1b86f5434", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple)", "signatureAfterChange": "  void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple)", "diff": ["-\t\t\tCairo.cairo_rectangle(cairo, destX + 0.5, destY + 0.5, destWidth, destHeight);", "+\t\t\tCairo.cairo_rectangle(cairo, destX , destY, destWidth, destHeight);", "-\t\t\tCairo.cairo_translate(cairo, destX - srcX + 0.5, destY - srcY + 0.5);", "+\t\t\tCairo.cairo_translate(cairo, destX - srcX, destY - srcY);", "-\t\t\tCairo.cairo_pattern_set_filter(pattern, filter);", "-\t\t\t\tCairo.cairo_pattern_set_extend(pattern, Cairo.CAIRO_EXTEND_REFLECT);", "+\t\t\t\t/*", "+\t\t\t\t* Bug in Cairo.  When drawing the image streched with an interpolation", "+\t\t\t\t* alghorithm, the edges of the image are faded.  This is not a bug, but", "+\t\t\t\t* it is not desired.  To avoid the faded edges, it should be possible to", "+\t\t\t\t* use cairo_pattern_set_extend() to set the pattern extend to either", "+\t\t\t\t* CAIRO_EXTEND_REFLECT or CAIRO_EXTEND_PAD, but these are not implemented", "+\t\t\t\t* in some versions of cairo (1.2.x) and have bugs in others (in 1.4.2 it", "+\t\t\t\t* draws with black edges).  The fix is to implement CAIRO_EXTEND_REFLECT", "+\t\t\t\t* by creating an image that is 3 times bigger than the original, drawing", "+\t\t\t\t* the original image in every quadrant (with an appropriate transform) and", "+\t\t\t\t* use this image as the pattern.", "+\t\t\t\t* ", "+\t\t\t\t* NOTE: For some reaons, it is necessary to use CAIRO_EXTEND_PAD with", "+\t\t\t\t* the image that was created or the edges are still faded.", "+\t\t\t\t*/", "+\t\t\t\tif (Cairo.cairo_version () >= Cairo.CAIRO_VERSION_ENCODE(1, 4, 2)) {", "+\t\t\t\t\tint /*long*/ surface = Cairo.cairo_image_surface_create(Cairo.CAIRO_FORMAT_ARGB32, imgWidth * 3, imgHeight * 3);", "+\t\t\t\t\tint /*long*/ cr = Cairo.cairo_create(surface);", "+\t\t\t\t\tCairo.cairo_set_source_surface(cr, srcImage.surface, imgWidth, imgHeight);", "+\t\t\t\t\tCairo.cairo_paint(cr);", "+\t\t\t\t\tCairo.cairo_scale(cr, -1, -1);", "+\t\t\t\t\tCairo.cairo_set_source_surface(cr, srcImage.surface, -imgWidth, -imgHeight);", "+\t\t\t\t\tCairo.cairo_paint(cr);", "+\t\t\t\t\tCairo.cairo_set_source_surface(cr, srcImage.surface, -imgWidth * 3, -imgHeight);", "+\t\t\t\t\tCairo.cairo_paint(cr);", "+\t\t\t\t\tCairo.cairo_set_source_surface(cr, srcImage.surface, -imgWidth, -imgHeight * 3);", "+\t\t\t\t\tCairo.cairo_paint(cr);", "+\t\t\t\t\tCairo.cairo_set_source_surface(cr, srcImage.surface, -imgWidth * 3, -imgHeight * 3);", "+\t\t\t\t\tCairo.cairo_paint(cr);", "+\t\t\t\t\tCairo.cairo_scale(cr, 1, -1);", "+\t\t\t\t\tCairo.cairo_set_source_surface(cr, srcImage.surface, -imgWidth, imgHeight);", "+\t\t\t\t\tCairo.cairo_paint(cr);", "+\t\t\t\t\tCairo.cairo_set_source_surface(cr, srcImage.surface, -imgWidth * 3, imgHeight);", "+\t\t\t\t\tCairo.cairo_paint(cr);", "+\t\t\t\t\tCairo.cairo_scale(cr, -1, -1);", "+\t\t\t\t\tCairo.cairo_set_source_surface(cr, srcImage.surface, imgWidth, -imgHeight);", "+\t\t\t\t\tCairo.cairo_paint(cr);", "+\t\t\t\t\tCairo.cairo_set_source_surface(cr, srcImage.surface, imgWidth, -imgHeight * 3);", "+\t\t\t\t\tCairo.cairo_paint(cr);", "+\t\t\t\t\tCairo.cairo_destroy(cr);", "+\t\t\t\t\tint /*long*/ newPattern = Cairo.cairo_pattern_create_for_surface(surface);", "+\t\t\t\t\tCairo.cairo_surface_destroy(surface);", "+\t\t\t\t\tif (newPattern == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\t\tCairo.cairo_pattern_destroy(pattern);", "+\t\t\t\t\tpattern = newPattern;", "+\t\t\t\t\tCairo.cairo_pattern_set_extend(pattern, Cairo.CAIRO_EXTEND_PAD);", "+\t\t\t\t\tdouble[] matrix = new double[6]; ", "+\t\t\t\t\tCairo.cairo_matrix_init_translate(matrix, imgWidth, imgHeight);", "+\t\t\t\t\tCairo.cairo_pattern_set_matrix(pattern, matrix);", "+\t\t\t\t}", "+//\t\t\t\tCairo.cairo_pattern_set_extend(pattern, Cairo.CAIRO_EXTEND_REFLECT);", "+\t\t\tCairo.cairo_pattern_set_filter(pattern, filter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20b8e528cf222aa8d0ab8bdbec1ca70d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "f71f1339048e21058c2e35ceaab6f0c8849acb94", "commitAfterChange": "aa692dc2f68547194a602c1cfba812bf6cddb924", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple)", "signatureAfterChange": "  void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple)", "diff": ["-\t\t\tCairo.cairo_rectangle(cairo, destX + 0.5, destY + 0.5, destWidth, destHeight);", "+\t\t\tCairo.cairo_rectangle(cairo, destX , destY, destWidth, destHeight);", "-\t\t\tCairo.cairo_translate(cairo, destX - srcX + 0.5, destY - srcY + 0.5);", "+\t\t\tCairo.cairo_translate(cairo, destX - srcX, destY - srcY);", "-\t\t\tCairo.cairo_pattern_set_filter(pattern, filter);", "-\t\t\t\tCairo.cairo_pattern_set_extend(pattern, Cairo.CAIRO_EXTEND_REFLECT);", "+\t\t\t\t/*", "+\t\t\t\t* Bug in Cairo.  When drawing the image streched with an interpolation", "+\t\t\t\t* alghorithm, the edges of the image are faded.  This is not a bug, but", "+\t\t\t\t* it is not desired.  To avoid the faded edges, it should be possible to", "+\t\t\t\t* use cairo_pattern_set_extend() to set the pattern extend to either", "+\t\t\t\t* CAIRO_EXTEND_REFLECT or CAIRO_EXTEND_PAD, but these are not implemented", "+\t\t\t\t* in some versions of cairo (1.2.x) and have bugs in others (in 1.4.2 it", "+\t\t\t\t* draws with black edges).  The fix is to implement CAIRO_EXTEND_REFLECT", "+\t\t\t\t* by creating an image that is 3 times bigger than the original, drawing", "+\t\t\t\t* the original image in every quadrant (with an appropriate transform) and", "+\t\t\t\t* use this image as the pattern.", "+\t\t\t\t* ", "+\t\t\t\t* NOTE: For some reaons, it is necessary to use CAIRO_EXTEND_PAD with", "+\t\t\t\t* the image that was created or the edges are still faded.", "+\t\t\t\t*/", "+\t\t\t\tif (Cairo.cairo_version () >= Cairo.CAIRO_VERSION_ENCODE(1, 4, 2)) {", "+\t\t\t\t\tint /*long*/ surface = Cairo.cairo_image_surface_create(Cairo.CAIRO_FORMAT_ARGB32, imgWidth * 3, imgHeight * 3);", "+\t\t\t\t\tint /*long*/ cr = Cairo.cairo_create(surface);", "+\t\t\t\t\tCairo.cairo_set_source_surface(cr, srcImage.surface, imgWidth, imgHeight);", "+\t\t\t\t\tCairo.cairo_paint(cr);", "+\t\t\t\t\tCairo.cairo_scale(cr, -1, -1);", "+\t\t\t\t\tCairo.cairo_set_source_surface(cr, srcImage.surface, -imgWidth, -imgHeight);", "+\t\t\t\t\tCairo.cairo_paint(cr);", "+\t\t\t\t\tCairo.cairo_set_source_surface(cr, srcImage.surface, -imgWidth * 3, -imgHeight);", "+\t\t\t\t\tCairo.cairo_paint(cr);", "+\t\t\t\t\tCairo.cairo_set_source_surface(cr, srcImage.surface, -imgWidth, -imgHeight * 3);", "+\t\t\t\t\tCairo.cairo_paint(cr);", "+\t\t\t\t\tCairo.cairo_set_source_surface(cr, srcImage.surface, -imgWidth * 3, -imgHeight * 3);", "+\t\t\t\t\tCairo.cairo_paint(cr);", "+\t\t\t\t\tCairo.cairo_scale(cr, 1, -1);", "+\t\t\t\t\tCairo.cairo_set_source_surface(cr, srcImage.surface, -imgWidth, imgHeight);", "+\t\t\t\t\tCairo.cairo_paint(cr);", "+\t\t\t\t\tCairo.cairo_set_source_surface(cr, srcImage.surface, -imgWidth * 3, imgHeight);", "+\t\t\t\t\tCairo.cairo_paint(cr);", "+\t\t\t\t\tCairo.cairo_scale(cr, -1, -1);", "+\t\t\t\t\tCairo.cairo_set_source_surface(cr, srcImage.surface, imgWidth, -imgHeight);", "+\t\t\t\t\tCairo.cairo_paint(cr);", "+\t\t\t\t\tCairo.cairo_set_source_surface(cr, srcImage.surface, imgWidth, -imgHeight * 3);", "+\t\t\t\t\tCairo.cairo_paint(cr);", "+\t\t\t\t\tCairo.cairo_destroy(cr);", "+\t\t\t\t\tint /*long*/ newPattern = Cairo.cairo_pattern_create_for_surface(surface);", "+\t\t\t\t\tCairo.cairo_surface_destroy(surface);", "+\t\t\t\t\tif (newPattern == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\t\tCairo.cairo_pattern_destroy(pattern);", "+\t\t\t\t\tpattern = newPattern;", "+\t\t\t\t\tCairo.cairo_pattern_set_extend(pattern, Cairo.CAIRO_EXTEND_PAD);", "+\t\t\t\t\tdouble[] matrix = new double[6]; ", "+\t\t\t\t\tCairo.cairo_matrix_init_translate(matrix, imgWidth, imgHeight);", "+\t\t\t\t\tCairo.cairo_pattern_set_matrix(pattern, matrix);", "+\t\t\t\t}", "+//\t\t\t\tCairo.cairo_pattern_set_extend(pattern, Cairo.CAIRO_EXTEND_REFLECT);", "+\t\t\tCairo.cairo_pattern_set_filter(pattern, filter);"]}], "num": 56363}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e7c5b2ad6af25c1c2c1157a7f314e181", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "530e0931164a4b6729c36d6a5b262a46", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 326, "methodNumberAfterChange": 327, "signatureBeforeChange": " \tint get_hyperlink(int index, int ppHyperlink)", "signatureAfterChange": " \tint get_hyperlink(int index, int ppHyperlink)", "diff": ["-\t\tif (accessible != null) {", "-\t\t\taccessible.AddRef();", "-\t\t\tsetPtrVARIANT(ppHyperlink, COM.VT_DISPATCH, accessible.getAddress());", "+\t\tif (accessible == null) {", "+\t\t\tsetIntVARIANT(ppHyperlink, COM.VT_EMPTY, 0);", "+\t\t\treturn COM.E_INVALIDARG;", "+\t\taccessible.AddRef();", "+\t\tsetPtrVARIANT(ppHyperlink, COM.VT_DISPATCH, accessible.getAddress());", "-\t\t// TODO: @retval E_INVALIDARG if bad [in] passed, [out] value is NULL"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d20070c14365848c8dde9595583d66f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "14fcb5c33f6c3e75f42f5bb21413327f3a2629e2", "commitAfterChange": "c70794332fc3e9d08cc7a0de2c926d998f7a5df4", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  int kEventControlClick (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventControlClick (int nextHandler, int theEvent, int userData)", "diff": ["-\tif ((state & CANVAS) != 0 && (style & SWT.NO_FOCUS) == 0 && hooksKeys ()) {", "-\t\tint [] theControl = new int [1];", "-\t\tint window = OS.GetControlOwner (handle);", "-\t\tOS.GetKeyboardFocus (window, theControl);", "-\t\tif (handle != theControl [0]) {", "-\t\t\tshort [] count = new short [1];", "-\t\t\tOS.CountSubControls (handle, count);", "-\t\t\tif (count [0] == 0) {", "-\t\t\t\tif (OS.SetKeyboardFocus (window, handle, (short) OS.kControlFocusNextPart) == OS.noErr) {", "-\t\t\t\t\treturn OS.noErr;", "+\tif ((state & CANVAS) != 0) {", "+\t\tif (!OS.IsControlEnabled (topHandle ())) return result;", "+\t\tif ((style & SWT.NO_FOCUS) == 0 && hooksKeys ()) {", "+\t\t\tint [] theControl = new int [1];", "+\t\t\tint window = OS.GetControlOwner (handle);", "+\t\t\tOS.GetKeyboardFocus (window, theControl);", "+\t\t\tif (handle != theControl [0]) {", "+\t\t\t\tshort [] count = new short [1];", "+\t\t\t\tOS.CountSubControls (handle, count);", "+\t\t\t\tif (count [0] == 0) {", "+\t\t\t\t\tif (OS.SetKeyboardFocus (window, handle, (short) OS.kControlFocusNextPart) == OS.noErr) {", "+\t\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\t}"]}], "num": 59895}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0117962316a49c1a9d73167a76b2a3d5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeda48fd3db30399dd9547358f34a4c4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d87314ab612493a85f5f519713d00bb1e5928d58", "commitAfterChange": "7c705f29562792401a3a185f9a537b664a3bbdd8", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["+\t/*", "+\t* Feature in the Macintosh.  On OS 10.2, it is necessary", "+\t* to explicitly check in with the Process Manager and set", "+\t* the current process to be the front process in order for", "+\t* windows to come to the front by default.  The fix is call", "+\t* both GetCurrentProcess() and SetFrontProcess().", "+\t* ", "+\t* NOTE: It is not actually necessary to use the process", "+\t* serial number returned by GetCurrentProcess() in the", "+\t* call to SetFrontProcess() (ie. kCurrentProcess can be", "+\t* used) but both functions must be called in order for", "+\t* windows to come to the front.", "+\t*/", "+\tint [] psn = new int [2];", "+\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "+\t\tOS.CPSEnableForegroundOperation (psn, 0x03, 0x3C, 0x2C, 0x1103);", "+\t\tif (APP_NAME != null) {", "+\t\t\tbyte[] buffer = new byte[APP_NAME.length () + 1];", "+\t\t\tfor (int i = 0; i < buffer.length - 1; i++) {", "+\t\t\t\tbuffer[i] = (byte) APP_NAME.charAt (i);\t\t\t\t\t", "+\t\t\t}", "+\t\t\tOS.CPSSetProcessName (psn, buffer);", "+\t\t}", "+\t\tOS.SetFrontProcess (psn);", "+\t}", "+\t/*", "+\t* Feature in the Macintosh.  In order to get the standard", "+\t* application menu to appear on the menu bar, an application", "+\t* must manipulate the menu bar.  If the application does not", "+\t* install a menu bar, the application menu will not appear.", "+\t* The fix is to use ClearMenuBar() to manipulate the menu", "+\t* bar before any application has had a chance install a menu", "+\t* bar.", "+\t*/", "+\tOS.ClearMenuBar ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e015237765ce95ec44111b2e106d0cbc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "0b2b02cc39542c5651b71c1c19a6c2de4afd2ef9", "commitAfterChange": "54936e5eba312fa3fa114a9ca5e62f04eea30071", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["-\tif (!isBundled ()) {", "-\t\t/*", "-\t\t * Feature in the Macintosh.  On OS 10.2, it is necessary", "-\t\t * to explicitly check in with the Process Manager and set", "-\t\t * the current process to be the front process in order for", "-\t\t * windows to come to the front by default.  The fix is call", "-\t\t * both GetCurrentProcess() and SetFrontProcess().", "-\t\t * ", "-\t\t * NOTE: It is not actually necessary to use the process", "-\t\t * serial number returned by GetCurrentProcess() in the", "-\t\t * call to SetFrontProcess() (ie. kCurrentProcess can be", "-\t\t * used) but both functions must be called in order for", "-\t\t * windows to come to the front.", "-\t\t */", "-\t\tint [] psn = new int [2];", "-\t\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "-\t\t\tint pid = OS.getpid ();", "-\t\t\tint /*long*/ ptr = getAppName().UTF8String();", "-\t\t\tif (ptr != 0) OS.CPSSetProcessName (psn, ptr);", "+\t/*", "+\t * Feature in the Macintosh.  On OS 10.2, it is necessary", "+\t * to explicitly check in with the Process Manager and set", "+\t * the current process to be the front process in order for", "+\t * windows to come to the front by default.  The fix is call", "+\t * both GetCurrentProcess() and SetFrontProcess().", "+\t * ", "+\t * NOTE: It is not actually necessary to use the process", "+\t * serial number returned by GetCurrentProcess() in the", "+\t * call to SetFrontProcess() (ie. kCurrentProcess can be", "+\t * used) but both functions must be called in order for", "+\t * windows to come to the front.", "+\t */", "+\tint [] psn = new int [2];", "+\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "+\t\tint pid = OS.getpid ();", "+\t\tint /*long*/ ptr = getAppName().UTF8String();", "+\t\tif (ptr != 0) OS.CPSSetProcessName (psn, ptr);", "+\t\tif (!isBundled ()) {", "-\t\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid));", "-\t\t\tif (ptr != 0) {", "-\t\t\t\tNSString path = NSString.stringWithUTF8String (ptr);", "-\t\t\t\tNSImage image = (NSImage) new NSImage().alloc();", "-\t\t\t\timage = image.initByReferencingFile(path);", "-\t\t\t\tdockImage = image;", "-\t\t\t\tapplication.setApplicationIconImage(image);", "-\t\t\t}", "+\t\t}", "+\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid));", "+\t\tif (ptr != 0) {", "+\t\t\tNSString path = NSString.stringWithUTF8String (ptr);", "+\t\t\tNSImage image = (NSImage) new NSImage().alloc();", "+\t\t\timage = image.initByReferencingFile(path);", "+\t\t\tdockImage = image;", "+\t\t\tapplication.setApplicationIconImage(image);"]}], "num": 61329}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c93e15dab29c9f4524dce796c1b7b38", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57fe2796c241e0fea2f6cbf64b52792b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "7062e8fe1522be954953abe736d74a670f61f8b5", "commitAfterChange": "84b2f7384099fd4b35f3cdd74a78ca15b410fdfe", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  int monitorEnumProc (int hmonitor, int hdc, int lprcMonitor, int dwData)", "signatureAfterChange": "  int monitorEnumProc (int hmonitor, int hdc, int lprcMonitor, int dwData)", "diff": ["-\t\tMonitor[] newMonitors = new Monitor[monitors.length + 4];", "-\t\tSystem.arraycopy(monitors, 0, newMonitors, 0, monitors.length);", "+\t\tMonitor[] newMonitors = new Monitor [monitors.length + 4];", "+\t\tSystem.arraycopy (monitors, 0, newMonitors, 0, monitors.length);", "-\tMONITORINFO lpmi = new MONITORINFO();", "+\tMONITORINFO lpmi = new MONITORINFO ();", "-\tOS.GetMonitorInfo(hmonitor, lpmi);", "-\tMonitor monitor = new Monitor();", "-\tmonitor.handle = hmonitor;\t\t", "-\tmonitor.bounds = new Rectangle(lpmi.rcMonitor_left, lpmi.rcMonitor_top, lpmi.rcMonitor_right, lpmi.rcMonitor_bottom);", "-\tmonitor.clientArea = new Rectangle(lpmi.rcWork_left, lpmi.rcWork_top, lpmi.rcWork_right, lpmi.rcWork_bottom);\t\t\t\t", "-\tmonitors[monitorCount] = monitor;", "-\tmonitorCount++;", "+\tOS.GetMonitorInfo (hmonitor, lpmi);", "+\tMonitor monitor = new Monitor ();", "+\tmonitor.handle = hmonitor;", "+\tmonitor.x = lpmi.rcMonitor_left;", "+\tmonitor.y = lpmi.rcMonitor_top;", "+\tmonitor.width = lpmi.rcMonitor_right - lpmi.rcMonitor_left;", "+\tmonitor.height = lpmi.rcMonitor_bottom - lpmi.rcMonitor_top;", "+\tmonitor.clientX = lpmi.rcWork_left;", "+\tmonitor.clientY = lpmi.rcWork_top;", "+\tmonitor.clientWidth = lpmi.rcWork_right - lpmi.rcWork_left;", "+\tmonitor.clientHeight = lpmi.rcWork_bottom - lpmi.rcWork_top;", "+\tmonitors [monitorCount++] = monitor;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46aabe4960af5a511de35c7b9618383b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "24d19b3d7f33db77171fd62ba6a99b8de47c34c1", "commitAfterChange": "fac8d627952a2fc4c000be7083041ef017b0bc95", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public Monitor getPrimaryMonitor ()", "signatureAfterChange": " public Monitor getPrimaryMonitor ()", "diff": ["-\tMonitor monitor = new Monitor ();", "-\tRectangle rect = getBounds ();", "-\tmonitor.x = rect.x;", "-\tmonitor.y = rect.y;", "-\tmonitor.width = rect.width;", "-\tmonitor.height = rect.height;", "-\trect = getClientArea ();", "-\tmonitor.clientX = rect.x;", "-\tmonitor.clientY = rect.y;", "-\tmonitor.clientWidth = rect.width;", "-\tmonitor.clientHeight = rect.height;", "-\treturn monitor;", "+\t/*", "+\t* Note.  Photon does not define a primary monitor.", "+\t* The workaround is to arbitrarily return the first", "+\t* monitor whose coordinates are (0, 0), or the first", "+\t* monitor returned by getMonitors().", "+\t*/", "+\tMonitor [] monitors = getMonitors ();", "+\tif (monitors.length == 1) return monitors [0];", "+\tfor (int i = 0; i < monitors.length; i++) {", "+\t\tMonitor monitor = monitors [i];", "+\t\tif (monitor.x == 0 && monitor.y == 0) return monitor;", "+\t}", "+\treturn monitors [0];"]}], "num": 1593}
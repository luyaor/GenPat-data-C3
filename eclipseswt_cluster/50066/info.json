{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "267b02e668bf4896b36911f6db78e21e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e3cc36b13a7f0ac362118aa68790a28", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TableDropTargetEffect.java", "commitBeforeChange": "494a07a91e999bc680c78e11c98014ab6f49ad58", "commitAfterChange": "b72a54c239832030fdc651f7ab7e2873109921f3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void dragOver(DropTargetEvent event)", "signatureAfterChange": " \tpublic void dragOver(DropTargetEvent event)", "diff": ["+\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION(5, 1)) {", "+\t\t\tif (pinfo.iItem != -1 && (effect & (DND.FEEDBACK_INSERT_BEFORE | DND.FEEDBACK_INSERT_AFTER)) != 0) {", "+\t\t\t\t\tLVINSERTMARK plvim = new LVINSERTMARK ();", "+\t\t\t\t\tplvim.cbSize = LVINSERTMARK.sizeof;", "+\t\t\t\t\tplvim.dwFlags = (effect & DND.FEEDBACK_INSERT_AFTER) != 0 ? OS.LVIM_AFTER : 0;", "+\t\t\t\t\tplvim.iItem = pinfo.iItem;", "+\t\t\t\t\tif (OS.SendMessage(handle, OS.LVM_SETINSERTMARK, 0, plvim) != 0) {", "+\t\t\t\t\t\tiItemInsert = pinfo.iItem;", "+\t\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (iItemInsert != -1) {", "+\t\t\t\t\tLVINSERTMARK plvim = new LVINSERTMARK ();", "+\t\t\t\t\tplvim.cbSize = LVINSERTMARK.sizeof;", "+\t\t\t\t\tplvim.iItem = -1;", "+\t\t\t\t\tOS.SendMessage(handle, OS.LVM_SETINSERTMARK, 0, plvim);", "+\t\t\t\t\tiItemInsert = -1;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "364b9d96c1e2fa1762a536cf1a085156", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "76b6937e3c059f081f25e0ff2818c09766722c11", "commitAfterChange": "dbcf617c3014caea0ed6c0653866bb16c67441cc", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "  LRESULT WM_LBUTTONDBLCLK (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDBLCLK (int wParam, int lParam)", "diff": ["-\treturn super.WM_LBUTTONDBLCLK (wParam, lParam);", "+\tLRESULT result =  super.WM_LBUTTONDBLCLK (wParam, lParam);", "+\t/*", "+\t * In a tree with multiple columns, the NM_DBLCLK event is only received ", "+\t * for the first column.  The following code detects a double click", "+\t * in the other columns and issues a DefaultSelection event.", "+\t */", "+\tif (!ignoreSelect) {", "+\t\tif (hwndHeader != 0 && (style & SWT.FULL_SELECTION) != 0) {", "+\t\t\tTVHITTESTINFO lpht = new TVHITTESTINFO ();", "+\t\t\tlpht.x = (short) (lParam & 0xFFFF);", "+\t\t\tlpht.y = (short) (lParam >> 16);", "+\t\t\tOS.SendMessage (handle, OS.TVM_HITTEST, 0, lpht);", "+\t\t\tif (lpht.hItem != 0 && (lpht.flags & OS.TVHT_ONITEM) == 0) {", "+\t\t\t\tEvent event = new Event ();", "+\t\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\t\ttvItem.hItem = lpht.hItem;", "+\t\t\t\ttvItem.mask = OS.TVIF_PARAM;", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "+\t\t\t\tevent.item = items [tvItem.lParam];", "+\t\t\t\tpostEvent (SWT.DefaultSelection, event);", "+\t\t\t}", "+\t\t}", "+\t}", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c004ab6d2a081d01dfdc9526d5a3980", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "89b8a19df17b0b9e1ecd606fa26fc33623296ee1", "commitAfterChange": "4f98072059a9bdb951f6b1c456e89b55a75dc35b", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " public void showColumn (TableColumn column)", "signatureAfterChange": " public void showColumn (TableColumn column)", "diff": ["+\t/*", "+\t* Bug in Windows.  When a table that is drawing grid lines", "+\t* is slowly scrolled horizontally to the left, the table does", "+\t* not redraw the newly exposed vertical grid lines.  The fix", "+\t* is to save the old scroll position, call the window proc,", "+\t* get the new scroll position and redraw the new area.", "+\t*/", "+\tint oldPos = 0;", "+\tint bits = OS.SendMessage (handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0);", "+\tif ((bits & OS.LVS_EX_GRIDLINES) != 0) {", "+\t\tSCROLLINFO info = new SCROLLINFO ();", "+\t\tinfo.cbSize = SCROLLINFO.sizeof;", "+\t\tinfo.fMask = OS.SIF_POS;", "+\t\tOS.GetScrollInfo (handle, OS.SB_HORZ, info);", "+\t\toldPos = info.nPos;", "+\t}", "+\t\t}", "+\t}", "+\t/*", "+\t* Bug in Windows.  When a table that is drawing grid lines", "+\t* is slowly scrolled horizontally to the left, the table does", "+\t* not redraw the newly exposed vertical grid lines.  The fix", "+\t* is to save the old scroll position, call the window proc,", "+\t* get the new scroll position and redraw the new area.", "+\t*/", "+\tif ((bits & OS.LVS_EX_GRIDLINES) != 0) {", "+\t\tSCROLLINFO info = new SCROLLINFO ();", "+\t\tinfo.cbSize = SCROLLINFO.sizeof;", "+\t\tinfo.fMask = OS.SIF_POS;", "+\t\tOS.GetScrollInfo (handle, OS.SB_HORZ, info);", "+\t\tint newPos = info.nPos;", "+\t\tif (newPos < oldPos) {", "+\t\t\trect.right = oldPos - newPos + GRID_WIDTH;", "+\t\t\tOS.InvalidateRect (handle, rect, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e3770ea46ea8d6e2d8cfafe88477b02", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Scrollable.java", "commitBeforeChange": "9fe476af057cb3b5201c454aa9ae7e069447d62b", "commitAfterChange": "d68255164459d996ac06cd65f80082bd55901ef5", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  LRESULT WM_MOUSEWHEEL (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_MOUSEWHEEL (int wParam, int lParam)", "diff": ["-\t", "-\t\tint msg = (vertical) ? OS.WM_VSCROLL : (horizontal) ? OS.WM_HSCROLL : 0;", "+\t\tint msg = vertical ? OS.WM_VSCROLL : horizontal ? OS.WM_HSCROLL : 0;", "-\t\tint code = 0;", "-  \t\tif (linesToScroll [0] == OS.WHEEL_PAGESCROLL) {\t", "-   \t\t\tcode = delta < 0 ? OS.SB_PAGEDOWN : OS.SB_PAGEUP;", "-  \t\t} else {", "-  \t\t\tcode = delta < 0 ? OS.SB_LINEDOWN : OS.SB_LINEUP;", "-  \t\t\tif (msg == OS.WM_VSCROLL) {", "-  \t\t\t\tdelta *= linesToScroll [0];", "-  \t\t\t}", "-  \t\t}", "-  \t\t/* Check if the delta and the remainder have the same direction (sign) */", "-  \t\tif ((delta ^ scrollRemainder) >= 0) delta += scrollRemainder;", "-\t\tint count = Math.abs (delta) / OS.WHEEL_DELTA;", "-\t\tfor (int i=0; i<count; i++) {", "-\t\t\tOS.SendMessage (handle, msg, code, 0);", "+\t\tboolean pageScroll = linesToScroll [0] == OS.WHEEL_PAGESCROLL;", "+\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\tScrollBar bar = vertical ? verticalBar : horizontalBar;", "+\t\t\tSCROLLINFO info = new SCROLLINFO ();", "+\t\t\tinfo.cbSize = SCROLLINFO.sizeof;", "+\t\t\tinfo.fMask = OS.SIF_POS;", "+\t\t\tOS.GetScrollInfo (handle, bar.scrollBarType (), info);", "+\t\t\tif (vertical && !pageScroll) delta *= linesToScroll [0];", "+\t\t\tint increment = pageScroll ? bar.getPageIncrement () : bar.getIncrement ();", "+\t\t\tinfo.nPos -=  increment * delta / OS.WHEEL_DELTA;", "+\t\t\tOS.SetScrollInfo (handle, bar.scrollBarType (), info, true);", "+\t\t\tOS.SendMessage (handle, msg, OS.SB_THUMBPOSITION, 0);", "+\t\t} else {", "+\t\t\tint code = 0;", "+\t  \t\tif (pageScroll) {", "+\t   \t\t\tcode = delta < 0 ? OS.SB_PAGEDOWN : OS.SB_PAGEUP;", "+\t  \t\t} else {", "+\t  \t\t\tcode = delta < 0 ? OS.SB_LINEDOWN : OS.SB_LINEUP;", "+\t  \t\t\tif (msg == OS.WM_VSCROLL) delta *= linesToScroll [0];", "+\t  \t\t}", "+\t  \t\t/* Check if the delta and the remainder have the same direction (sign) */", "+\t  \t\tif ((delta ^ scrollRemainder) >= 0) delta += scrollRemainder;", "+\t\t\tint count = Math.abs (delta) / OS.WHEEL_DELTA;", "+\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\tOS.SendMessage (handle, msg, code, 0);", "+\t\t\t}"]}], "num": 50066}
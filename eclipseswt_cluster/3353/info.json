{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5304d5d2c6dba5b9ab9774ff6363b5ed", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ad0894f56ace89f68f4e827b18bf4c4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples.paint/org/eclipse/swt/examples/paint/ContinuousPaintSession.java", "commitBeforeChange": "188fe2f5cffd36c8c2bfd5270ff9b50827c1adb1", "commitAfterChange": "a00c4e1f66e67aec4dc29233162965c7f8c70ce4", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \tprivate final void prepareRetrigger()", "signatureAfterChange": "\r \tprivate final void prepareRetrigger()", "diff": ["-\t\t\t * Since it is not possible to cancel a timerExec(), we tag the Runnable's with an\r", "-\t\t\t * identifier in order to distinguish the valid one from the stale ones.  In practice,\r", "+\t\t\t * Since it is not possible to cancel a timerExec(), we remember the Runnable that is\r", "+\t\t\t * active in order to distinguish the valid one from the stale ones.  In practice,\r", "-\t\t\tdisplay.timerExec(retriggerInterval, new RetriggerHandler(++retriggerId));\r", "+\t\t\tretriggerHandler = new Runnable() {\r", "+\t\t\t\tpublic void run() {\r", "+\t\t\t\t\tif (retriggerHandler == this) {\r", "+\t\t\t\t\t\trender(points[0]);\r", "+\t\t\t\t\t\tprepareRetrigger();\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t};\t\t\t\r", "+\t\t\tdisplay.timerExec(retriggerInterval, retriggerHandler);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3d140bcc58e382e8c2f649be75f3d88", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples.paint/src/org/eclipse/swt/examples/paint/ContinuousPaintSession.java", "commitBeforeChange": "188fe2f5cffd36c8c2bfd5270ff9b50827c1adb1", "commitAfterChange": "a00c4e1f66e67aec4dc29233162965c7f8c70ce4", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \tprivate final void prepareRetrigger()", "signatureAfterChange": "\r \tprivate final void prepareRetrigger()", "diff": ["-\t\t\t * Since it is not possible to cancel a timerExec(), we tag the Runnable's with an\r", "-\t\t\t * identifier in order to distinguish the valid one from the stale ones.  In practice,\r", "+\t\t\t * Since it is not possible to cancel a timerExec(), we remember the Runnable that is\r", "+\t\t\t * active in order to distinguish the valid one from the stale ones.  In practice,\r", "-\t\t\tdisplay.timerExec(retriggerInterval, new RetriggerHandler(++retriggerId));\r", "+\t\t\tretriggerHandler = new Runnable() {\r", "+\t\t\t\tpublic void run() {\r", "+\t\t\t\t\tif (retriggerHandler == this) {\r", "+\t\t\t\t\t\trender(points[0]);\r", "+\t\t\t\t\t\tprepareRetrigger();\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t};\t\t\t\r", "+\t\t\tdisplay.timerExec(retriggerInterval, retriggerHandler);\r"]}], "num": 3353}
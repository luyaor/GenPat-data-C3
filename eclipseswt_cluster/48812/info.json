{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24e9fce4c995bb8aeab6066277e6b107", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e727706ff98c111ff53a172affd8063c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Icon Exe/org/eclipse/swt/tools/internal/IconExe.java", "commitBeforeChange": "105560e878ccce9b41b522bd40df22e142961f14", "commitAfterChange": "b96b06c10d6754464e0cdd7982d566a638346dca", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static void main(String[] args)", "signatureAfterChange": " \tpublic static void main(String[] args)", "diff": ["-\t\tif (args.length != 2) {", "+\t\tif (args.length < 2) {", "-\t\t\tImageData[] data = loader.load(args[1]);", "+\t\t\tImageData[] data = null;", "+\t\t\t", "+\t\t\tif (args.length == 2) {", "+\t\t\t\t/* ICO case */", "+\t\t\t\tdata = loader.load(args[1]);", "+\t\t\t} else {", "+\t\t\t\t/* BMP case - each following argument is a single BMP file", "+\t\t\t\t * BMP is handled for testing purpose only. The ICO file is the", "+\t\t\t\t * official Microsoft format for image resources.", "+\t\t\t\t */", "+\t\t\t\tdata = new ImageData[args.length - 1];", "+\t\t\t\tfor (int i = 1; i < args.length; i++) {", "+\t\t\t\t\tImageData[] current = loader.load(args[i]);", "+\t\t\t\t\tdata[i - 1] = current[0];", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c4ceda4cd33c48cf41a7ed7d6bbf151", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "f2afadf3ecbde81e97161d4a80435b171827f960", "commitAfterChange": "cf34d636662ca6587452948946037bfb3d522d9c", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["-\t\tint offset = 0;", "-\t\tfor (int y = 0; y < height; y++) {", "+\t\tfor (int y = 0, offset = 0; y < height; y++) {", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t/*", "+\t\t* TODO is it impossible to retrieve the RGB values when alpha is zero? If this is true", "+\t\t* then this code is necessary because the transparent pixel needs the RGB values to work. ", "+\t\t*/", "+\t\tif (transparentPixel != -1) {", "+\t\t\tbyte[] alphaData = data.alphaData = new byte[width * height];", "+\t\t\tfor (int y = 0, offset = 3, alphaOffset = 0; y < height; y++) {", "+\t\t\t\tfor (int x = 0; x < width; x++, offset += 4) {", "+\t\t\t\t\talphaData[alphaOffset++] = srcData[offset];", "+\t\tdata.transparentPixel = transparentPixel;", "-\tdata.transparentPixel = transparentPixel;"]}], "num": 48812}
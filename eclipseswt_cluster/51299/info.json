{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d31c4c4935f8a97256583eea58f29911", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96aef9253d639f1421fd23acae3c5c65", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "25e0b9cefcf6aad913e775e22fb19b1e3de2a216", "commitAfterChange": "abdb7df6c5ef7f31dd770f626e22ad0d039e1629", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "  void init(Device device, String name, int height, int style)", "signatureAfterChange": "  void init(Device device, String name, float height, int style, String atsName)", "diff": ["-void init(Device device, String name, int height, int style) {", "+void init(Device device, String name, float height, int style, String atsName) {", "-\tint[] font = new int[1];", "-\tbyte[] buffer = name.getBytes();", "-\tthis.id = OS.kInvalidFontFamily;", "-\tif (OS.ATSUFindFontFromName(buffer, buffer.length, OS.kFontFamilyName, OS.kFontNoPlatformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, font) == OS.noErr) {", "-\t\tshort[] family = new short[1];", "-\t\tOS.FMGetFontFamilyInstanceFromFont(font[0], family, new short[1]);", "-\t\tthis.id = family[0];", "+\tint font = 0;", "+\tif (atsName != null) {\t\t", "+\t\tint ptr = createCFString(atsName);", "+\t\tif (ptr != 0) {", "+\t\t\tfont = OS.ATSFontFindFromName(ptr, OS.kATSOptionFlagsDefault);", "+\t\t\tOS.CFRelease(ptr);", "+\t\t}", "+\t} else {", "+\t\tatsName = name;", "+\t\tif ((style & SWT.BOLD) != 0) atsName += \" Bold\";", "+\t\tif ((style & SWT.ITALIC) != 0) atsName += \" Italic\";", "+\t\tint ptr = createCFString(atsName);", "+\t\tif (ptr != 0) {", "+\t\t\tfont = OS.ATSFontFindFromName(ptr, OS.kATSOptionFlagsDefault);", "+\t\t\tOS.CFRelease(ptr);", "+\t\t}", "+\t\tif (font == 0 && (style & SWT.ITALIC) != 0) {", "+\t\t\tthis.style |= OS.italic;", "+\t\t\tatsName = name;", "+\t\t\tif ((style & SWT.BOLD) != 0) atsName += \" Bold\";", "+\t\t\tptr = createCFString(atsName);", "+\t\t\tif (ptr != 0) {", "+\t\t\t\tfont = OS.ATSFontFindFromName(ptr, OS.kATSOptionFlagsDefault);", "+\t\t\t\tOS.CFRelease(ptr);", "+\t\t\t}", "+\t\t}", "+\t\tif (font == 0 && (style & SWT.BOLD) != 0) {", "+\t\t\tthis.style |= OS.bold;", "+\t\t\tatsName = name;", "+\t\t\tptr = createCFString(atsName);", "+\t\t\tif (ptr != 0) {", "+\t\t\t\tfont = OS.ATSFontFindFromName(ptr, OS.kATSOptionFlagsDefault);", "+\t\t\t\tOS.CFRelease(ptr);", "+\t\t\t}", "+\t\t}", "-\tif (this.id == OS.kInvalidFontFamily) this.id = OS.GetAppFont();", "-\tif ((style & SWT.ITALIC) != 0) this.style |= OS.italic;", "-\tif ((style & SWT.BOLD) != 0) this.style |= OS.bold;", "-\tthis.size = (short)height;", "-\tOS.FMGetFontFromFontFamilyInstance(id, this.style, font, null);", "-\tif (font[0] == 0) {", "+\tthis.size = height;", "+\tif (font == 0) {", "-\t\tthis.handle = font[0];", "+\t\tthis.handle = font;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "407f200399779fed38b775778abbf1b1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "e7fb43dbb2484659429530f9cab714cb6e3de9f3", "commitAfterChange": "d69b8bce251422ebdcfdac8edd7d2bcf938dfebd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public static Program findProgram (String extension)", "signatureAfterChange": " private static Program findProgram( Display display, String extension )", "diff": ["- */\r", "-public static Program findProgram (String extension) {\r", "-\tif (extension == null) SWT.error (SWT.ERROR_NULL_ARGUMENT);\r", "-\tif (extension.length () == 0) return null;\r", "-\tif (extension.charAt (0) != '.') extension = \".\" + extension;\r", "-\tString command = null;\r", "-\tString name = \"\";\r", "-\tswitch (Desktop) {\r", "-\t\tcase DESKTOP_KDE: {\r", "-\t\t\tString urlString = \"file://any.\" + extension;\r", "-\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, urlString, true);\r", "-\t\t\tint qString = KDE.QString_new (buffer);\r", "-\t\t\tint url = KDE.KURL_new (qString);\r", "-\t\t\tKDE.QString_delete (qString);\r", "-\t\t\tint mimeType = KDE.KMimeType_findByURL (url);\r", "-\t\t\tint mimeName = KDE.KMimeType_name (mimeType);\r", "-\t\t\tint service = KDE.KServiceTypeProfile_preferredService (mimeName, 1);\r", "-\t\t\tif (service == 0) return null;\r", "-\t\t\tint execQString = KDE.KService_exec (service);\r", "-\t\t\tcommand = kde_convertQStringAndFree (execQString);\r", "-\t\t\tbreak;\t\r", "-\t\t}\r", "-\t\t\r", "-\t\tcase DESKTOP_GNOME: {\r", "-\t\t\tString fileName = \"file\" + extension;\r", "-\t\t\tString mimeType = gnome_getMimeType (fileName);\r", "-\t\t\tif (mimeType == null) return null;\r", "-\t\t\tcommand = gnome_getMimeValue (mimeType, \"open\");\r", "-\t\t\tif (command == null) return null;\r", "-\t\t\tname = mimeType;\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t\t\r", "-\t\tcase DESKTOP_UNKNOWN:\r", "-\t\t\treturn null;\r", "-\t}\r", "-\tProgram program   = new Program ();\r", "-\tprogram.name      = name;\r", "-\tprogram.command   = command;\r", "-\tprogram.extension = extension;\r", "-\treturn program;\r", "-}\r", "+ */", "+private static Program findProgram( Display display, String extension ) {", "+\tif (extension == null) SWT.error (SWT.ERROR_NULL_ARGUMENT);", "+\tif (extension.length () == 0) return null;", "+\tif (extension.charAt (0) != '.') extension = \".\" + extension;", "+\tString command = null;", "+\tString name = null;", "+\tint desktop = getDesktop( display );", "+\tHashtable mimeInfo = null;", "+\tif (desktop == DESKTOP_KDE)   mimeInfo = kde_getMimeInfo();", "+\tif (desktop == DESKTOP_GNOME) mimeInfo = gnome_getMimeInfo();", "+\tif (desktop == DESKTOP_CDE)   mimeInfo = cde_getDataTypeInfo();", "+\tif (mimeInfo == null) return null;", "+", "+\t// Find the data type matching the extension.", "+\tIterator keys = mimeInfo.keySet().iterator();", "+\twhile (name == null && keys.hasNext()) {", "+\t\tString mimeType = (String) keys.next();", "+\t\tVector mimeExts = (Vector) mimeInfo.get( mimeType );", "+\t\tfor (int index = 0; index < mimeExts.size(); index++){", "+\t\t\tif (extension.equals( mimeExts.elementAt( index ) )) {", "+\t\t\t\tname = mimeType;", "+\t\t\t}", "+\t\t}", "+\t}\t\t\t", "+\tif (name == null) return null;", "+", "+\t// Get the corresponding command for the mime type.", "+\tif (desktop == DESKTOP_KDE)   command = kde_getMimeTypeCommand( name );", "+\tif (desktop == DESKTOP_GNOME) command = gnome_getMimeValue( name, \"open\" );", "+\tif (desktop == DESKTOP_CDE)   command = cde_getAction( name );", "+\tif (command == null) return null;", "+\t", "+\t// Return the corresponding program.", "+\tProgram program   = new Program ();", "+\tprogram.name      = name;", "+\tprogram.command   = command;", "+\tprogram.extension = extension;", "+\tprogram.display   = display;", "+\treturn program;", "+}"]}], "num": 51299}
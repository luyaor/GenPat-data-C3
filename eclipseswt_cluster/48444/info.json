{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6778a3216fb6a141a6e2ec6b33a7d036", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0943d65b9c2f0664b3010bad34b2354", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "ca3a04fdfae246c22177761bf6daff1ede311b67", "commitAfterChange": "787e5637344a9138e1fc4621acdbfe3b801d61a1", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public boolean open ()", "signatureAfterChange": " public boolean open ()", "diff": ["-\tNSRect frame = NSScreen.mainScreen().frame();", "+\tNSArray screens = NSScreen.screens();", "+\tfloat minX = Float.MAX_VALUE, maxX = Float.MIN_VALUE;", "+\tfloat minY = Float.MAX_VALUE, maxY = Float.MIN_VALUE;\t", "+\tint count = screens.count();", "+\tfor (int i = 0; i < count; i++) {", "+\t\tNSScreen screen = new NSScreen(screens.objectAtIndex(i));", "+\t\tNSRect frame = screen.frame();", "+\t\tfloat x1 = frame.x, x2 = frame.x + frame.width;", "+\t\tfloat y1 = frame.y, y2 = frame.y + frame.height;", "+\t\tif (x1 < minX) minX = x1;", "+\t\tif (x2 < minX) minX = x2;", "+\t\tif (x1 > maxX) maxX = x1;", "+\t\tif (x2 > maxX) maxX = x2;", "+\t\tif (y1 < minY) minY = y1;", "+\t\tif (y2 < minY) minY = y2;", "+\t\tif (y1 > maxY) maxY = y1;", "+\t\tif (y2 > maxY) maxY = y2;", "+\t}\t", "+\tNSRect frame = new NSRect();", "+\tframe.x = minX;", "+\tframe.y = minY;", "+\tframe.width = maxX - minX;", "+\tframe.height = maxY - minY;", "+\tframe.x = frame.y = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8149c67dfd2cd1466b74adeffa23d61a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": " void expandAncestors ()", "signatureAfterChange": " Point drawVerticalItemConnector(GC gc, Point position)", "diff": ["-void expandAncestors () {", "-\tif (parentItem != null) parentItem.expandAncestors ();", "-\tsetExpanded (true);", "+ */", "+Point drawVerticalItemConnector(GC gc, Point position) {", "+\tTree2 parent = getParent();", "+\tTreeItem2 parentItem = getParentItem();\t", "+\tRectangle indicatorRectangle = parent.getHierarchyIndicatorRect();", "+\tint itemHeight = parent.getItemHeight();", "+\tint itemHeightDiv2 = itemHeight / 2 + itemHeight % 2;", "+\tint indicatorHeightDiv2 = indicatorRectangle.height / 2 + indicatorRectangle.height % 2;", "+\tint lineX = position.x + indicatorRectangle.width / 2;", "+\tint lineStartY = position.y - itemHeightDiv2;\t", "+\tint lineEndY = position.y + itemHeightDiv2 - itemHeight % 2;", "+\tTreeItem2 predecessor;", "+\tboolean isFirstChild = false;", "+", "+\tif (isRoot() == true) {", "+\t\tif (getIndex() == 0) {", "+\t\t\treturn position;\t\t\t\t\t\t\t\t\t// first root, don't draw vertical line", "+\t\t}", "+\t}", "+\telse\t", "+\tif (getIndex() == 0) {\t\t\t\t\t\t\t\t\t\t// if item is first child", "+\t\tlineStartY += itemHeightDiv2;", "+\t\tisFirstChild = true;", "+\t}", "+\tpredecessor = getPredecessor();", "+\tif (predecessor != null && predecessor.isLeaf() == false) {", "+\t\tlineStartY += indicatorHeightDiv2;\t\t\t\t\t\t// leave space for the hierarchy image", "+\t}", "+\tif (isLeaf() == false) {", "+\t\tlineEndY -= indicatorHeightDiv2;", "+\t}", "+\tgc.drawLine(lineX, lineStartY, lineX, lineEndY);", "+\tif (parentItem != null) {", "+\t\tparentItem.drawVerticalItemConnector(gc, position.y, isFirstChild);", "+\t}", "+\treturn position;", "+}"]}], "num": 48444}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f0374376d878d40e323075989816669", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "277a6655cdd5cc0b9f029d15acdec635", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/mozilla/org/eclipse/swt/browser/PromptService.java", "commitBeforeChange": "a6131ac9e2d912fd79a498410994704f80907b17", "commitAfterChange": "e758c60c4fb72428ae282ccc25e3e75b0adf65c4", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  public int Prompt(int parent, int dialogTitle, int text, int value, int checkMsg, int checkValue, int _retval)", "signatureAfterChange": "  public int Prompt (int parent, int dialogTitle, int text, int value, int checkMsg, int checkValue, int _retval)", "diff": ["-public int /*long*/ Prompt(int /*long*/ parent, int /*long*/ dialogTitle, int /*long*/ text, int /*long*/ value, int /*long*/ checkMsg, int /*long*/ checkValue, int /*long*/ _retval) {", "-\tBrowser browser = getBrowser(parent);", "+public int /*long*/ Prompt (int /*long*/ parent, int /*long*/ dialogTitle, int /*long*/ text, int /*long*/ value, int /*long*/ checkMsg, int /*long*/ checkValue, int /*long*/ _retval) {", "+\tBrowser browser = getBrowser (parent);", "-\t\tlength = XPCOM.strlen_PRUnichar(dialogTitle);", "+\t\tlength = XPCOM.strlen_PRUnichar (dialogTitle);", "-\t\tXPCOM.memmove(dest, dialogTitle, length * 2);", "-\t\ttitleLabel = new String(dest);", "+\t\tXPCOM.memmove (dest, dialogTitle, length * 2);", "+\t\ttitleLabel = new String (dest);", "-\tlength = XPCOM.strlen_PRUnichar(text);", "+\tlength = XPCOM.strlen_PRUnichar (text);", "-\tXPCOM.memmove(dest, text, length * 2);", "-\ttextLabel = new String(dest);", "+\tXPCOM.memmove (dest, text, length * 2);", "+\ttextLabel = new String (dest);", "-\tXPCOM.memmove(valueAddr, value, OS.PTR_SIZEOF);", "+\tXPCOM.memmove (valueAddr, value, C.PTR_SIZEOF);", "-\t\tlength = XPCOM.strlen_PRUnichar(valueAddr[0]);", "+\t\tlength = XPCOM.strlen_PRUnichar (valueAddr[0]);", "-\t\tXPCOM.memmove(dest, valueAddr[0], length * 2);", "-\t\tvalueLabel[0] = new String(dest);\t\t", "+\t\tXPCOM.memmove (dest, valueAddr[0], length * 2);", "+\t\tvalueLabel[0] = new String (dest);\t\t", "-\t\tlength = XPCOM.strlen_PRUnichar(checkMsg);", "+\t\tlength = XPCOM.strlen_PRUnichar (checkMsg);", "-\t\tXPCOM.memmove(dest, checkMsg, length * 2);", "-\t\tcheckLabel = new String(dest);", "+\t\tXPCOM.memmove (dest, checkMsg, length * 2);", "+\t\tcheckLabel = new String (dest);", "-\tPromptDialog dialog = new PromptDialog(browser.getShell());", "+\tPromptDialog dialog = new PromptDialog (browser.getShell());", "-\tif (checkValue != 0) XPCOM.memmove(check, checkValue, 4);", "-\tdialog.prompt(titleLabel, textLabel, checkLabel, valueLabel, check, result);", "+\tif (checkValue != 0) XPCOM.memmove (check, checkValue, 4);", "+\tdialog.prompt (titleLabel, textLabel, checkLabel, valueLabel, check, result);", "-\tXPCOM.memmove(_retval, result, 4);", "+\tXPCOM.memmove (_retval, result, 4);", "-\t\t\tcnt = valueLabel[0].length();", "+\t\t\tcnt = valueLabel[0].length ();", "-\t\t\tvalueLabel[0].getChars(0, cnt, buffer, 0);", "+\t\t\tvalueLabel[0].getChars (0, cnt, buffer, 0);", "-\t\t\tptr = OS.g_malloc(size);", "-\t\t\tXPCOM.memmove(ptr, buffer, size);", "-\t\t\tXPCOM.memmove(value, new int /*long*/[] {ptr}, OS.PTR_SIZEOF);", "+\t\t\tptr = C.malloc (size);", "+\t\t\tXPCOM.memmove (ptr, buffer, size);", "+\t\t\tXPCOM.memmove (value, new int /*long*/[] {ptr}, C.PTR_SIZEOF);", "-\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result2);", "-\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "-\t\t\t\tif (result2[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result2);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\t\t\t\tif (result2[0] == 0) SWT.error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result2[0]);", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result2[0]);", "-\t\t\t\tbyte[] aContractID = Converter.wcsToMbcs(null, XPCOM.NS_MEMORY_CONTRACTID, true);", "-\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIMemory.NS_IMEMORY_IID, result2);", "-\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "-\t\t\t\tif (result2[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);\t\t", "-\t\t\t\tserviceManager.Release();", "+\t\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\t\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result2);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\t\t\t\tif (result2[0] == 0) SWT.error (XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\t\tserviceManager.Release ();", "-\t\t\t\tnsIMemory memory = new nsIMemory(result2[0]);", "+\t\t\t\tnsIMemory memory = new nsIMemory (result2[0]);", "-\t\t\t\tmemory.Free(valueAddr[0]);", "-\t\t\t\tmemory.Release();", "+\t\t\t\tmemory.Free (valueAddr[0]);", "+\t\t\t\tmemory.Release ();", "-\tif (checkValue != 0) XPCOM.memmove(checkValue, check, 4);", "+\tif (checkValue != 0) XPCOM.memmove (checkValue, check, 4);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9efd9ec497d3e036aafeae1d1e293230", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/mozilla/org/eclipse/swt/browser/PromptService.java", "commitBeforeChange": "a6131ac9e2d912fd79a498410994704f80907b17", "commitAfterChange": "e758c60c4fb72428ae282ccc25e3e75b0adf65c4", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  public int PromptUsernameAndPassword(int parent, int dialogTitle, int text, int username, int password, int checkMsg, int checkValue, int _retval)", "signatureAfterChange": "  public int PromptUsernameAndPassword (int parent, int dialogTitle, int text, int username, int password, int checkMsg, int checkValue, int _retval)", "diff": ["-public int /*long*/ PromptUsernameAndPassword(int /*long*/ parent, int /*long*/ dialogTitle, int /*long*/ text, int /*long*/ username, int /*long*/ password, int /*long*/ checkMsg, int /*long*/ checkValue, int /*long*/ _retval) {", "-\tBrowser browser = getBrowser(parent);", "+public int /*long*/ PromptUsernameAndPassword (int /*long*/ parent, int /*long*/ dialogTitle, int /*long*/ text, int /*long*/ username, int /*long*/ password, int /*long*/ checkMsg, int /*long*/ checkValue, int /*long*/ _retval) {", "+\tBrowser browser = getBrowser (parent);", "-\t\tlength = XPCOM.strlen_PRUnichar(dialogTitle);", "+\t\tlength = XPCOM.strlen_PRUnichar (dialogTitle);", "-\t\tXPCOM.memmove(dest, dialogTitle, length * 2);", "-\t\ttitleLabel = new String(dest);", "+\t\tXPCOM.memmove (dest, dialogTitle, length * 2);", "+\t\ttitleLabel = new String (dest);", "-\tlength = XPCOM.strlen_PRUnichar(text);", "+\tlength = XPCOM.strlen_PRUnichar (text);", "-\tXPCOM.memmove(dest, text, length * 2);", "-\ttextLabel = new String(dest);", "+\tXPCOM.memmove (dest, text, length * 2);", "+\ttextLabel = new String (dest);", "-\tXPCOM.memmove(userAddr, username, OS.PTR_SIZEOF);", "+\tXPCOM.memmove (userAddr, username, C.PTR_SIZEOF);", "-\t\tlength = XPCOM.strlen_PRUnichar(userAddr[0]);", "+\t\tlength = XPCOM.strlen_PRUnichar (userAddr[0]);", "-\t\tXPCOM.memmove(dest, userAddr[0], length * 2);", "-\t\tuserLabel[0] = new String(dest);\t\t", "+\t\tXPCOM.memmove (dest, userAddr[0], length * 2);", "+\t\tuserLabel[0] = new String (dest);\t\t", "-\tXPCOM.memmove(passAddr, password, OS.PTR_SIZEOF);", "+\tXPCOM.memmove (passAddr, password, C.PTR_SIZEOF);", "-\t\tlength = XPCOM.strlen_PRUnichar(passAddr[0]);", "+\t\tlength = XPCOM.strlen_PRUnichar (passAddr[0]);", "-\t\tXPCOM.memmove(dest, passAddr[0], length * 2);", "-\t\tpassLabel[0] = new String(dest);\t\t", "+\t\tXPCOM.memmove (dest, passAddr[0], length * 2);", "+\t\tpassLabel[0] = new String (dest);\t\t", "-\t\tlength = XPCOM.strlen_PRUnichar(checkMsg);", "+\t\tlength = XPCOM.strlen_PRUnichar (checkMsg);", "-\t\tXPCOM.memmove(dest, checkMsg, length * 2);", "-\t\tcheckLabel = new String(dest);", "+\t\tXPCOM.memmove (dest, checkMsg, length * 2);", "+\t\tcheckLabel = new String (dest);", "-\tPromptDialog dialog = new PromptDialog(browser.getShell());", "+\tPromptDialog dialog = new PromptDialog (browser.getShell());", "-\tif (checkValue != 0) XPCOM.memmove(check, checkValue, 4);", "-\tdialog.promptUsernameAndPassword(titleLabel, textLabel, checkLabel, userLabel, passLabel, check, result);", "+\tif (checkValue != 0) XPCOM.memmove (check, checkValue, 4);", "+\tdialog.promptUsernameAndPassword (titleLabel, textLabel, checkLabel, userLabel, passLabel, check, result);", "-\tXPCOM.memmove(_retval, result, 4);", "+\tXPCOM.memmove (_retval, result, 4);", "-\t\t\tcnt = userLabel[0].length();", "+\t\t\tcnt = userLabel[0].length ();", "-\t\t\tuserLabel[0].getChars(0, cnt, buffer, 0);", "+\t\t\tuserLabel[0].getChars (0, cnt, buffer, 0);", "-\t\t\tptr = OS.g_malloc(size);", "-\t\t\tXPCOM.memmove(ptr, buffer, size);", "-\t\t\tXPCOM.memmove(username, new int /*long*/[] {ptr}, OS.PTR_SIZEOF);", "+\t\t\tptr = C.malloc (size);", "+\t\t\tXPCOM.memmove (ptr, buffer, size);", "+\t\t\tXPCOM.memmove (username, new int /*long*/[] {ptr}, C.PTR_SIZEOF);", "-\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result2);", "-\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "-\t\t\t\tif (result2[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result2);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\t\t\t\tif (result2[0] == 0) SWT.error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result2[0]);", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result2[0]);", "-\t\t\t\tbyte[] aContractID = Converter.wcsToMbcs(null, XPCOM.NS_MEMORY_CONTRACTID, true);", "-\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIMemory.NS_IMEMORY_IID, result2);", "-\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "-\t\t\t\tif (result[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);\t\t", "-\t\t\t\tserviceManager.Release();", "+\t\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\t\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result2);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\t\t\t\tif (result[0] == 0) SWT.error (XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\t\tserviceManager.Release ();", "-\t\t\t\tnsIMemory memory = new nsIMemory(result2[0]);", "+\t\t\t\tnsIMemory memory = new nsIMemory (result2[0]);", "-\t\t\t\tmemory.Free(userAddr[0]);", "-\t\t\t\tmemory.Release();", "+\t\t\t\tmemory.Free (userAddr[0]);", "+\t\t\t\tmemory.Release ();", "-\t\t\tcnt = passLabel[0].length();", "+\t\t\tcnt = passLabel[0].length ();", "-\t\t\tpassLabel[0].getChars(0, cnt, buffer, 0);", "+\t\t\tpassLabel[0].getChars (0, cnt, buffer, 0);", "-\t\t\tptr = OS.g_malloc(size);", "-\t\t\tXPCOM.memmove(ptr, buffer, size);", "-\t\t\tXPCOM.memmove(password, new int /*long*/[] {ptr}, OS.PTR_SIZEOF);", "+\t\t\tptr = C.malloc (size);", "+\t\t\tXPCOM.memmove (ptr, buffer, size);", "+\t\t\tXPCOM.memmove (password, new int /*long*/[] {ptr}, C.PTR_SIZEOF);", "-\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result2);", "-\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "-\t\t\t\tif (result2[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);", "-\t\t\t", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result2[0]);", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result2);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\t\t\t\tif (result2[0] == 0) SWT.error (XPCOM.NS_NOINTERFACE);", "+", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result2[0]);", "-\t\t\t\tbyte[] aContractID = Converter.wcsToMbcs(null, XPCOM.NS_MEMORY_CONTRACTID, true);", "-\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIMemory.NS_IMEMORY_IID, result2);", "-\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "-\t\t\t\tif (result2[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);\t\t", "-\t\t\t\tserviceManager.Release();", "-\t\t\t\t", "-\t\t\t\tnsIMemory memory = new nsIMemory(result2[0]);", "+\t\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\t\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result2);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\t\t\t\tif (result2[0] == 0) SWT.error (XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\t\tserviceManager.Release ();", "+", "+\t\t\t\tnsIMemory memory = new nsIMemory (result2[0]);", "-\t\t\t\tmemory.Free(passAddr[0]);", "-\t\t\t\tmemory.Release();", "+\t\t\t\tmemory.Free (passAddr[0]);", "+\t\t\t\tmemory.Release ();", "-\tif (checkValue != 0) XPCOM.memmove(checkValue, check, 4);", "+\tif (checkValue != 0) XPCOM.memmove (checkValue, check, 4);"]}], "num": 32146}
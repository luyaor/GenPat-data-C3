{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6d4f238076ad2f9e7f7b015ce28a68c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baa4b2ad17d916d091d4387d7bd42d81", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Color.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public boolean equals (Object object)", "signatureAfterChange": " public boolean equals(Object object)", "diff": ["-public boolean equals (Object object) {", "+public boolean equals(Object object) {", "-\treturn device == color.device && handle == color.handle; ", "+\tfloat[] rgbColor = color.handle;", "+\tif (handle == rgbColor) return true;", "+\treturn device == color.device && handle[0] == rgbColor[0] &&", "+\t\thandle[1] == rgbColor[1] && handle[2] == rgbColor[2];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53b882d131b2d250b8e71391033bd8d5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextBidi.java", "commitBeforeChange": "03ae8f681d20cd46536e3b60d1701c0ce98bf515", "commitAfterChange": "70ad0effe5f094be7c9f0fc126e3f2ba49252b61", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r private Vector getDirectionRuns(int logicalStart, int length)", "signatureAfterChange": "\r private Vector getDirectionRuns(int logicalStart, int length)", "diff": ["-\t\t\tint segType = classBuffer[segmentLogicalStart];\r", "+\t\t\tboolean isRightToLeftSegment = isRightToLeft(segmentLogicalStart);\r", "-\t\t\t\t\tsegType == classBuffer[segmentLogicalEnd + 1] &&\r", "+\t\t\t\t\t// If our segment type is RtoL, the order index for the next character should be one less, if there\r", "+\t\t\t\t\t// is no direction change.\r", "+\t\t\t\t\t// If our segment type is LtoR, the order index for the next character will be one more if there is\r", "+\t\t\t\t\t// no direction change.\r", "+\t\t\t\t\t((isRightToLeftSegment && (order[segmentLogicalEnd + 1]+ 1 == order[segmentLogicalEnd])) ||\r", "+\t\t\t\t\t(isRightToLeftSegment == false && (order[segmentLogicalEnd + 1]- 1 == order[segmentLogicalEnd]))) &&\r"]}], "num": 35439}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1f3b259fd207f65905fdb71c08980b3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70890d2588514c4c330f33a3f72bcaea", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "4c6c40a57003101341cff1885924156310d140e2", "commitAfterChange": "b20b1574fcd2810edc0e2ee351b119380a6c3e9c", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void setSelection (boolean selected)", "signatureAfterChange": " public void setSelection (boolean selected)", "diff": ["+\tif ((style & SWT.CHECK) != 0) {", "+\t\tif (grayed) {", "+\t\t\tif (selected) {", "+\t\t\t\tOS.SetControl32BitMaximum (handle, 2);", "+\t\t\t\tOS.SetControl32BitValue (handle, 2);", "+\t\t\t} else {", "+\t\t\t\tOS.SetControl32BitMaximum (handle, 0);", "+\t\t\t\tOS.SetControl32BitValue (handle, 0);", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t\tOS.SetControl32BitMaximum (handle, 1);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "179dc04a7093f069d29026356ad92c09", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "af9f857dda29d2ee1989cc89928edc6e0958ebc8", "commitAfterChange": "4b24af5ef710affbf05bf5fb1df78e69400546d5", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "  \tprivate int handleWindowCallback(int nextHandler, int eRefHandle, int whichWindow)", "signatureAfterChange": "  \tprivate int handleWindowCallback(int nextHandler, int eRefHandle, int whichWindow)", "diff": ["+\t\tint eventClass= OS.GetEventClass(eRefHandle);", "-\t\tswitch (eventKind) {", "-\t\tcase OS.kEventWindowActivated:", "-\t\t\twindowProc(whichWindow, SWT.FocusIn, new Boolean(true));", "-\t\t\treturn OS.kNoErr;", "-\t\tcase OS.kEventWindowDeactivated:", "-\t\t\twindowProc(whichWindow, SWT.FocusIn, new Boolean(false));", "-\t\t\treturn OS.kNoErr;", "-\t\tcase OS.kEventWindowBoundsChanged:", "-\t\t\tint[] attr= new int[1];", "-\t\t\tOS.GetEventParameter(eRefHandle, OS.kEventParamAttributes, OS.typeUInt32, null, null, attr);\t", "-\t\t\twindowProc(whichWindow, SWT.Resize, new Integer(attr[0]));", "-\t\t\treturn OS.kNoErr;", "-\t\tcase OS.kEventWindowClose:", "-\t\t\twindowProc(whichWindow, SWT.Dispose, null);", "-\t\t\treturn OS.kNoErr;", "-\t\tcase OS.kEventWindowDrawContent:", "-\t\t\tif (toolTipWindowHandle == whichWindow) {", "-\t\t\t\tprocessPaintToolTip(whichWindow);", "+\t\t", "+\t\tswitch (eventClass) {", "+\t\t\t", "+\t\tcase OS.kEventClassMouse:", "+\t\t\treturn handleMouseCallback(nextHandler, eRefHandle);", "+\t\t\t", "+\t\tcase OS.kEventClassWindow:", "+\t\t\tswitch (eventKind) {", "+\t\t\tcase OS.kEventWindowActivated:", "+\t\t\t\tfActiveWindow= whichWindow;", "+\t\t\t\twindowProc(whichWindow, SWT.FocusIn, new Boolean(true));", "-\t\t\t} else {", "-\t\t\t\tupdateWindow2(whichWindow);", "+\t\t\tcase OS.kEventWindowDeactivated:", "+\t\t\t\tfActiveWindow= 0;", "+\t\t\t\twindowProc(whichWindow, SWT.FocusIn, new Boolean(false));", "+\t\t\tcase OS.kEventWindowBoundsChanged:", "+\t\t\t\tint[] attr= new int[1];", "+\t\t\t\tOS.GetEventParameter(eRefHandle, OS.kEventParamAttributes, OS.typeUInt32, null, null, attr);\t", "+\t\t\t\twindowProc(whichWindow, SWT.Resize, new Integer(attr[0]));", "+\t\t\t\treturn OS.kNoErr;", "+\t\t\tcase OS.kEventWindowClose:", "+\t\t\t\twindowProc(whichWindow, SWT.Dispose, null);", "+\t\t\t\treturn OS.kNoErr;", "+\t\t\tcase OS.kEventWindowDrawContent:", "+\t\t\t\tif (toolTipWindowHandle == whichWindow) {", "+\t\t\t\t\tprocessPaintToolTip(whichWindow);", "+\t\t\t\t\treturn OS.kNoErr;", "+\t\t\t\t} else {", "+\t\t\t\t\tupdateWindow2(whichWindow);", "+\t\t\t\t\treturn OS.kNoErr;", "+\t\t\t\t}", "+\t\t\t\t//break;", "+\t\t\tdefault:", "+\t\t\t\tSystem.out.println(\"handleWindowCallback: kEventClassWindow kind:\" + eventKind);", "+\t\t\t\tbreak;", "-\t\t\t//break;", "+\t\t\tbreak;", "+\t\t\t", "-\t\t\tSystem.out.println(\"handleWindowCallback: \" + eventKind);", "+\t\t\tSystem.out.println(\"handleWindowCallback: unexpected event class: \" + MacUtil.toString(eventClass));"]}], "num": 22173}
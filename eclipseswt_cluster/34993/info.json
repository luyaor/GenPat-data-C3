{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3b10fea11b5e646b10c527eb05ccbf5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d466a64b9edaaef2713bb212d372fd66", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "6122989045357f961a964dee75c97dc5a0234ee7", "commitAfterChange": "7622ffa887cfbcd10aa3d1084d2e29b8a1464cdd", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \t \tint get_accDescription(int varChild_vt, int varChild_reserved1, int varChild_lVal, int varChild_reserved2, int pszDescription)", "signatureAfterChange": " \t \tint get_accDescription(int varChild_vt, int varChild_reserved1, int varChild_lVal, int varChild_reserved2, int pszDescription)", "diff": ["-\t\tif (accessibleListeners.size() == 0) return code;", "+\t\t// TEMPORARY CODE - process tree even if there are no apps listening", "+\t\tif (accessibleListeners.size() == 0 && !(control instanceof Tree)) return code;", "+\t\t", "+\t\t// TEMPORARY CODE", "+\t\t/* Currently our tree columns are emulated using custom draw,", "+\t\t * so we need to create the description using the tree column", "+\t\t * header text and tree item text. */", "+\t\tif (varChild_lVal != COM.CHILDID_SELF) {", "+\t\t\tif (control instanceof Tree) {", "+\t\t\t\tTree tree = (Tree) control;", "+\t\t\t\tint columnCount = tree.getColumnCount ();", "+\t\t\t\tif (columnCount > 1) {", "+\t\t\t\t\tint hwnd = control.handle, hItem = 0;", "+\t\t\t\t\tif (OS.COMCTL32_MAJOR >= 6) {", "+\t\t\t\t\t\thItem = OS.SendMessage (hwnd, OS.TVM_MAPACCIDTOHTREEITEM, varChild_lVal, 0);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\thItem = varChild_lVal;", "+\t\t\t\t\t}", "+\t\t\t\t\tWidget widget = tree.getDisplay ().findWidget (hwnd, hItem);", "+\t\t\t\t\tevent.result = \"\";", "+\t\t\t\t\tif (widget != null && widget instanceof TreeItem) {", "+\t\t\t\t\t\tTreeItem item = (TreeItem) widget;", "+\t\t\t\t\t\tfor (int i = 1; i < columnCount; i++) {", "+\t\t\t\t\t\t\tevent.result += tree.getColumn(i).getText() + \": \" + item.getText(i);", "+\t\t\t\t\t\t\tif (i + 1 < columnCount) event.result += \", \";", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "414bf8cec7faa28114c2a25d79226e4b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "400a41972553b6a4188a913a649f045d7101753f", "commitAfterChange": "c4d7ef9fa9d180a8b347ee889da144e25eaab670", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": " public boolean sleep ()", "signatureAfterChange": " public boolean sleep ()", "diff": ["-//\tint display_fd = OS.ConnectionNumber (xDisplay);", "-//\tint max_fd = display_fd > read_fd ? display_fd : read_fd;", "-//\tdo {", "-//\t\tOS.FD_ZERO (fd_set);", "-//\t\tOS.FD_SET (display_fd, fd_set);", "-//\t\tOS.FD_SET (read_fd, fd_set);", "-//\t\ttimeout [0] = 0;", "-//\t\ttimeout [1] = 100000;", "-//\t\tif (OS.select (max_fd + 1, fd_set, null, null, timeout) != 0) break;", "-//\t\tif (getMessageCount () != 0) return true;", "-//\t\tint xtContext = OS.XtDisplayToApplicationContext (xDisplay);", "-//\t\tif (OS.XtAppPending (xtContext) != 0) return true;", "-//\t} while (true);", "-//\treturn OS.FD_ISSET (display_fd, fd_set);", "-", "-\t//TODO need to sleep waiting for the next event", "+\tint result;", "+\tint display_fd = OS.ConnectionNumber (xDisplay);", "+\tint max_fd = display_fd > read_fd ? display_fd : read_fd;", "-\t\tif (getMessageCount () != 0) break;", "-\t\tif (OS.XtAppPending (xtContext) != 0) return true;", "-\t\ttry {", "+\t\tOS.FD_ZERO (fd_set);", "+\t\tOS.FD_SET (display_fd, fd_set);", "+\t\tOS.FD_SET (read_fd, fd_set);", "+\t\ttimeout [0] = 0;", "+\t\ttimeout [1] = 100000;", "+\t\t/* Exit the OS lock to allow other threads to enter GTK */", "+\t\tint count = Callback.getEntryCount ();", "+\t\tfor (int i = 0; i < count; i++) {", "-\t\t\t\tOS_LOCK.wait (50);", "+\t\t\t\tOS.MonitorExit (OS_LOCK);", "-\t\t} catch (Exception e) {", "-\t\t\treturn false;", "-\t} while (true);", "-\treturn true;", "+\t\ttry {", "+\t\t\tresult = OS.select (max_fd + 1, fd_set, null, null, timeout);", "+\t\t} finally {", "+\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\tsynchronized (OS_LOCK) {", "+\t\t\t\t\tOS.MonitorEnter (OS_LOCK);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t} while (result == 0 && OS.XtAppPending (xtContext) == 0 && getMessageCount () == 0);", "+\treturn OS.FD_ISSET (display_fd, fd_set);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "006e02b7a0d2a9717940f9c011650b14", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "0dcefc726a59adc3ce7b6dc24a58e5d592ba7749", "commitAfterChange": "88ffa6b3ea08098641f0307e99d3b91e831f45af", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 133, "signatureBeforeChange": "  GdkColor defaultBackground ()", "signatureAfterChange": "  void setBackgroundColor (int handle, GdkColor color)", "diff": ["-GdkColor defaultBackground () {", "-\treturn display.COLOR_WIDGET_BACKGROUND;", "-}", "+void setBackgroundColor (int handle, GdkColor color) {", "+\tint index = OS.GTK_STATE_NORMAL;", "+\tint style = OS.gtk_widget_get_modifier_style (handle);", "+\tint ptr = OS.gtk_rc_style_get_bg_pixmap_name (style, index);", "+\tif (ptr != 0) OS.g_free (ptr);", "+\tString name = color == null ? \"<parent>\" : \"<none>\";", "+\tbyte[] buffer = Converter.wcsToMbcs (null, name, true);", "+\tptr = OS.g_malloc (buffer.length);", "+\tOS.memmove (ptr, buffer, buffer.length);", "+\tOS.gtk_rc_style_set_bg_pixmap_name (style, index, ptr);", "+\tOS.gtk_rc_style_set_bg (style, index, color);", "+\tint flag = OS.gtk_rc_style_get_color_flags(style, index);", "+\tflag = (color == null) ? flag & ~OS.GTK_RC_BG : flag | OS.GTK_RC_BG;", "+\tOS.gtk_rc_style_set_color_flags(style, index, flag);", "+\tOS.gtk_widget_modify_style (handle, style);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1d484bc2d93bfba1eb0d9c44c77d588", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "87d79b28b78da8b56644c5ffdf26400d97e4e059", "commitAfterChange": "ec7edbaede68f4fd7608786e759e23fd6dbe2200", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 19, "signatureBeforeChange": "  int processMouseMove (int callData, int arg1, int int2)", "signatureAfterChange": "  boolean setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "diff": ["+", "+boolean setBounds (int x, int y, int width, int height, boolean move, boolean resize) {", "+\tint topHandle = topHandle ();", "+\tboolean sameOrigin = true, sameExtent = true;", "+\tif (move) {", "+\t\tint oldX = OS.GTK_WIDGET_X (topHandle);", "+\t\tint oldY = OS.GTK_WIDGET_Y (topHandle);", "+\t\tsameOrigin = x == oldX && y == oldY;", "+\t\tif (!sameOrigin) {", "+\t\t\tmoveHandle (x, y);", "+\t\t\tsendEvent(SWT.Move);", "+\t\t}", "+\t}", "+\tif (resize) {", "+\t\twidth = Math.max (1, width);", "+\t\theight = Math.max (1, height);", "+\t\tint oldWidth = OS.GTK_WIDGET_WIDTH (topHandle);", "+\t\tint oldHeight = OS.GTK_WIDGET_HEIGHT (topHandle);", "+\t\tsameExtent = width == oldWidth && height == oldHeight;", "+\t\tif (!sameExtent) {", "+\t\t\tresizeHandle (width, height);", "+\t\t\tsendEvent(SWT.Resize);", "+\t\t}", "+\t}", "+\treturn !sameOrigin || !sameExtent;", "-\t/*", "-\tGdkEvent gdkEvent = new GdkEvent (callData);", "-\tint[] px = new int[1], py = new int[1];", "-\tOS.gdk_window_get_pointer(_gdkWindow(), px, py, 0);\t", "-\tint time = OS.gdk_event_get_time(callData);", "-\tint[] pMods = new int[1];", "-\tOS.gdk_event_get_state(callData, pMods);", "-\tsendMouseEvent (SWT.MouseMove, 0, pMods[0], time, px[0], py[0]);*/", "-\treturn 1;"]}], "num": 34993}
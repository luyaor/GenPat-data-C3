{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "340013a2f6259ab927d26740c0f2e2ac", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7d79c83cc4280e4ef42ab95fc29b561", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet151.java", "commitBeforeChange": "fb5b460d0cd1322d5dade6f3cc57c1e1f7f85066", "commitAfterChange": "71a079a82aecf22804fbd623b6b9ddb2a35a45b5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static void main (String [] args)", "signatureAfterChange": "  public static void main (String [] args)", "diff": ["-\tfinal Display display = new Display ();", "-\tShell shell = new Shell (display);", "+\tfinal Display display = new Display();", "+\tShell shell = new Shell(display);", "-\tfinal Random random = new Random();", "-\tthread = new Thread() {", "+\tThread thread = new Thread() {", "+\t\t\tRandom random = new Random();", "-\t\t\t\t// add 1000 random numbers to a sorted array", "-\t\t\t\tfor (int j = 0; j < 1000; j++) {", "-\t\t\t\t\tint next  = random.nextInt();", "-\t\t\t\t\tint[] newItems = new int[values.length + 1];", "-\t\t\t\t\tint index = 0;", "-\t\t\t\t\tfor (int i = 0; i < values.length; i++) {", "-\t\t\t\t\t\tif (values[i] > next) break;", "-\t\t\t\t\t\tindex++;", "-\t\t\t\t\t}", "-\t\t\t\t\tSystem.arraycopy(values, 0, newItems, 0, index);", "-\t\t\t\t\tnewItems[index] = next;", "-\t\t\t\t\tSystem.arraycopy(values, index, newItems, index+1, values.length-index);", "-\t\t\t\t\tvalues = newItems;", "+\t\t\t\tfinal int[] newValues = new int[1000];", "+\t\t\t\tfor (int i = 0; i < newValues.length; i++) {", "+\t\t\t\t\tnewValues[i] = random.nextInt();", "+\t\t\t\tArrays.sort(newValues);", "-\t\t\t\t\t\ttable.setItemCount(values.length);", "+\t\t\t\t\t\tif (values == null) {", "+\t\t\t\t\t\t\ttable.setItemCount(1000);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tvalues = newValues;", "-\t\t\t\t\t\t// bug 69398 on Windows", "-\t\t\t\t\t\ttable.redraw();", "-\tshell.open ();", "-\twhile (!shell.isDisposed ()) {", "-\t\tif (!display.readAndDispatch ()) display.sleep ();", "+\tshell.open();", "+\twhile (!shell.isDisposed() || thread.isAlive()) {", "+\t\tif (!display.readAndDispatch()) display.sleep();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daeac5b16d2e12672896960663cb2273", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 55, "signatureBeforeChange": " void removeColumn(TreeColumn column)", "signatureAfterChange": " void removeItem(TreeItem2 item)", "diff": ["-void removeColumn(TreeColumn column) {", "-\tint numColumns = getColumnCount();", "-\tint index = column.getIndex();", "-", "-\tTreeColumn[] newColumns = new TreeColumn[columns.length - 1];", "-\tSystem.arraycopy(columns, 0, newColumns, 0, index);", "-\tSystem.arraycopy(columns, index + 1, newColumns, index, columns.length - index);", "-\tcolumns = newColumns;", "-\t", "-\tTreeColumn lastColumn = columns[columns.length - 1];", "-\tgetHorizontalBar().setMaximum(lastColumn.getX() + lastColumn.width);", "+ */", "+void removeItem(TreeItem2 item) {", "+\tgetRoot().removeItem(item);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2caacfb06967000fee0353fc4d2bf9e3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " void addItem (TreeItem2 item, int index)", "signatureAfterChange": " void calculateVisibleItemCountParent()", "diff": ["-}", "-void addItem (TreeItem2 item, int index) {", "-\t/* adds a child item to the receiver */", "-\tTreeItem2[] newChildren = new TreeItem2 [items.length + 1];", "-\tSystem.arraycopy (items, 0, newChildren, 0, index);", "-\tnewChildren[index] = item;", "-\tSystem.arraycopy (items, index, newChildren, index + 1, items.length - index);", "-\titems = newChildren;", "-\t/* if item should be available immediately then update parent accordingly */", "-\tif (item.isAvailable ()) {", "-\t\tparent.makeAvailable (item);", "-\t\tparent.redrawFromItemDownwards (availableIndex);", "-\t} else {", "-\t\t/* receiver will need update if this is its first child */", "-\t\tif (isAvailable () && items.length == 1) redrawItem ();", "+ */", "+void calculateVisibleItemCountParent() {", "+\tTreeItem2 parentItem = getParentItem();", "+", "+\tif (parentItem != null) {", "+\t\tparentItem.calculateVisibleItemCount();", "+\t}", "+\telse {", "+\t\tgetParent().getRoot().calculateVisibleItemCount();"]}], "num": 12476}
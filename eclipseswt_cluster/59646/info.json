{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a845067d13586811e97be97f0fca8fe8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a2733fb46300d4f81acc192e51e87cc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGeneratorAppUI.java", "commitBeforeChange": "e66b3ab5b69ccfced123b97aa21b24b29ad00f29", "commitAfterChange": "9ff459aea9c65d12a590e5fff3429d1e3fcda2be", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 26, "signatureBeforeChange": "  void createMembersPanel(Composite panel)", "signatureAfterChange": "  void createMembersPanel(Composite panel)", "diff": ["-\tmemberListEditor = new TableEditor(membersLt);", "-\tmemberEditorLt = new List(membersLt, SWT.MULTI | SWT.BORDER);", "-\tmemberListEditor.setEditor(memberEditorLt);", "+\tfinal Shell floater = new Shell(shell, SWT.NO_TRIM);", "+\tfloater.setLayout(new FillLayout());", "+\tmemberListEditor = new FlagsEditor(membersLt);", "+\tmemberEditorLt = new List(floater, SWT.MULTI | SWT.BORDER);", "-\t\t\tmemberEditorLt.setVisible(false);", "+\t\t\tfloater.setVisible(false);", "-\t\t\t\t\tif (membersLt.getClientArea().contains(pt.x, pt.y + memberEditorLt.getSize().y)) {", "-\t\t\t\t\t\tmemberListEditor.verticalAlignment = SWT.TOP;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tmemberListEditor.verticalAlignment = SWT.BOTTOM;", "-\t\t\t\t\t}", "-\t\t\t\t\tPoint size = memberEditorLt.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\t\t\t\tmemberListEditor.minimumWidth = size.x;", "-\t\t\t\t\tmemberListEditor.minimumHeight = size.y;", "-\t\t\t\t\tmemberEditorLt.setVisible(true);", "+\t\t\t\t\tfloater.setLocation(membersLt.toDisplay(e.x, e.y));", "+\t\t\t\t\tfloater.pack();", "+\t\t\t\t\tfloater.setVisible(true);", "-\t\t\t\t\tif (membersLt.getClientArea().contains(pt.x, pt.y + memberEditorLt.getSize().y)) {", "-\t\t\t\t\t\tmemberListEditor.verticalAlignment = SWT.TOP;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tmemberListEditor.verticalAlignment = SWT.BOTTOM;", "-\t\t\t\t\t}", "-\t\t\t\t\tPoint size = memberEditorLt.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\t\t\t\tmemberListEditor.minimumWidth = size.x;", "-\t\t\t\t\tmemberListEditor.minimumHeight = size.y;", "-\t\t\t\t\tmemberEditorLt.setVisible(true);", "+\t\t\t\t\tfloater.setLocation(membersLt.toDisplay(e.x, e.y));", "+\t\t\t\t\tfloater.pack();", "+\t\t\t\t\tfloater.setVisible(true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dffb429ecd5f9985b05510a929c9f39", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": " void createHandle (int index)", "diff": ["-    handle= OS.NewControl(0, new Rect(), null, false, (short)(OS.kControlSupportsEmbedding | OS.kControlSupportsFocus | OS.kControlGetsFocusOnClick), (short)0, (short)0, (short)OS.kControlUserPaneProc, 0);", "+\thandle= MacUtil.createDrawingArea(parentHandle, -1, true, 0, 0, 0);\t\t", "-\tMacUtil.insertControl(handle, parentHandle, -1);", "-\tOS.HIViewSetVisible(handle, true);", "+", "+\tint wHandle= OS.GetControlOwner(parentHandle);", "+\tMacRect bounds= new MacRect();", "+\tOS.GetControlBounds(handle, bounds.getData());", "+\tint frameType= OS.kTXNTextEditStyleFrameType;", "+\tint iFileType= OS.kTXNUnicodeTextFile;", "+\tint iPermanentEncoding= OS.kTXNSystemDefaultEncoding;", "+\tint[] tnxObject= new int[1];", "+\tint[] frameID= new int[1];", "-\tint wHandle= OS.GetControlOwner(parentHandle);\t", "-\tint[] rootHandle= new int[1];", "-\tOS.GetRootControl(wHandle, rootHandle);", "-\tint root= rootHandle[0];", "+\tint root;", "+\tif (true) {", "+\t\tint[] rootHandle= new int[1];", "+\t\tOS.GetRootControl(wHandle, rootHandle);", "+\t\troot= rootHandle[0];", "+\t} else {", "+\t\troot= OS.HIViewGetRoot(wHandle);", "+\t}", "-\tint frameType= OS.kTXNTextEditStyleFrameType;", "-\tint iFileType= OS.kTXNUnicodeTextFile;", "-\tint iPermanentEncoding= OS.kTXNSystemDefaultEncoding;", "-\tint[] tnxObject= new int[1];", "-\tint[] frameID= new int[1];", "-\tRect bounds= new Rect();", "-\tMacUtil.getControlBounds(handle, bounds);", "-\tint status= OS.TXNNewObject(0, wHandle, bounds, frameOptions, frameType, iFileType,", "-\t\t\t\t\tiPermanentEncoding, tnxObject, frameID, handle);", "-\tif (status != OS.noErr)", "+\tint status= OS.TXNNewObject(0, wHandle, bounds.getData(), frameOptions, frameType, iFileType, iPermanentEncoding,", "+\t\t\t\t\t\ttnxObject, frameID, handle);", "+\tif (status != OS.kNoErr)", "-\t\tint rc= OS.GetIndexedSubControl(root, i, child);", "-\t\t//OS.HIViewRemoveFromSuperview(child[0]);", "+\t\tOS.GetIndexedSubControl(root, i, child);", "+\t\tOS.HIViewRemoveFromSuperview(child[0]);", "-\t\t//WidgetTable.put(child[0], this);", "-\ttx= tnxObject[0];", "-\ttxFrameID= frameID[0];", "-\tOS.TXNActivate(tx, txFrameID, OS.kScrollBarsSyncWithFocus);", "+\tfTX= tnxObject[0];", "+\tfFrameID= frameID[0];", "+\tOS.TXNActivate(fTX, fFrameID, OS.kScrollBarsSyncWithFocus);", "-\tOS.TXNFocus(tx, false);", "+\tOS.TXNFocus(fTX, false);", "-\tOS.TXNSetData(tx, OS.kTXNUnicodeTextData, new char[] { ' ' }, 2, 0, 0);", "-\tOS.TXNSetData(tx, OS.kTXNUnicodeTextData, new char[0], 0, 0, 1);", "+\tOS.TXNSetData(fTX, new char[] { ' ' }, 0, 0);", "+\tOS.TXNSetData(fTX, new char[0], 0, 1);", "-\tRect margins= new Rect();", "-\tmargins.top= margins.left= margins.bottom= margins.right= MARGIN;", "-\tint ptr= OS.NewPtr(Rect.sizeof);", "-\tOS.memcpy(ptr, margins, Rect.sizeof);", "-\tOS.TXNSetTXNObjectControls(tx, false, 1, new int[] { OS.kTXNMarginsTag }, new int[] {ptr});", "-\tOS.DisposePtr(ptr);", "-\tOS.TXNSetTXNObjectControls(tx, false, 1, new int[] { OS.kTXNDoFontSubstitution }, new int[] { 1 });", "+\tOS.setTXNMargins(fTX, (short)MARGIN);", "+", "+\tOS.TXNSetTXNObjectControls(fTX, false, 1, new int[] { OS.kTXNDoFontSubstitution }, new int[] { 1 });"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "678e344e684c1d924d38b727740f5db0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "021c9ffb1f03bab865a8755698d6a0a3d739b6cc", "commitAfterChange": "a22dc50286ff5b97c74cd0b12653f08fe95a1ee7", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 95, "signatureBeforeChange": " boolean setItemSize(GC gc)", "signatureAfterChange": " boolean setItemSize(GC gc)", "diff": ["+}", "-", "-\tRectangle trim = renderer.computeTrim(CTabFolderRenderer.PART_BORDER, SWT.NONE, 0, 0, 0, 0);", "-\tint borderRight = trim.width + trim.x;", "-\tint borderLeft = -trim.x;", "-\t", "+\tToolBar chevron = getChevron();", "+\tif (chevron != null) chevron.setVisible(false);", "-\t\tshowChevron = true;", "+\t\tshowChevron = chevronVisible && items.length > 1;", "+\t\tif (showChevron) {", "+\t\t\tchevron.setVisible(true);", "+\t\t}", "-\t\t\twidth = Math.min(width, getRightItemEdge(gc) - borderLeft);", "+\t\t\twidth = Math.min(width, getRightItemEdge(gc) - getLeftItemEdge(gc, CTabFolderRenderer.PART_BORDER));", "-", "-\tint tabAreaWidth = size.x - borderLeft - borderRight - 3;", "-\tif (showMin) tabAreaWidth -= renderer.computeSize(CTabFolderRenderer.PART_MIN_BUTTON, SWT.NONE, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "-\tif (showMax) tabAreaWidth -= renderer.computeSize(CTabFolderRenderer.PART_MAX_BUTTON, SWT.NONE, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "-\tif (topRightAlignment == SWT.RIGHT && topRight != null) {", "-\t\tPoint rightSize = topRight.computeSize(SWT.DEFAULT, SWT.DEFAULT, false);", "-\t\ttabAreaWidth -= rightSize.x + 3;", "-\t}", "-\ttabAreaWidth = Math.max(0, tabAreaWidth);", "-", "+\tint tabAreaWidth = Math.max(0, getRightItemEdge(gc) - getLeftItemEdge(gc, CTabFolderRenderer.PART_BORDER));", "-\t\tshowChevron = items.length > 1;", "-\t\tif (showChevron) tabAreaWidth -= renderer.computeSize(CTabFolderRenderer.PART_CHEVRON_BUTTON, SWT.NONE, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "+\t\tshowChevron = chevronVisible && items.length > 1;", "+\t\tif (showChevron) {", "+\t\t\ttabAreaWidth -= chevron.computeSize(SWT.DEFAULT, SWT.DEFAULT).x;", "+\t\t\tchevron.setVisible(true);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ea6f08eac65e5cd01b002c6e6571c51", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "e5acbe6c16a694c7f3c29cf4f69a551bf55b4776", "commitAfterChange": "0a7e0762eb6a91569487ff333d468559f2ea1861", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "\r public void setWrapIndices (int [] indices)", "signatureAfterChange": "\r public void setWrapIndices (int [] indices)", "diff": ["-\tint count = OS.SendMessage (handle, OS.RB_GETBANDCOUNT, 0, 0);\r", "+\tint count = getItemCount ();\r", "-\tREBARBANDINFO rbBand = new REBARBANDINFO ();\r", "-\trbBand.cbSize = REBARBANDINFO.sizeof;\r", "-\trbBand.fMask = OS.RBBIM_STYLE;\r", "-\tfor (int i=0; i<count; i++) {\r", "-\t\tOS.SendMessage (handle, OS.RB_GETBANDINFO, i, rbBand);\r", "-\t\tif ((rbBand.fStyle & OS.RBBS_BREAK) != 0) {\r", "+\tsetRedraw (false);\r", "+\tCoolItem [] items = getItems ();\r", "+\tfor (int i=0; i<items.length; i++) {\r", "+\t\tCoolItem item = items [i];\r", "+\t\tif (item.getWrap ()) {\r", "-\t\t\trbBand.fStyle &= ~OS.RBBS_BREAK;\r", "-\t\t\tOS.SendMessage (handle, OS.RB_SETBANDINFO, i, rbBand);\r", "+\t\t\titem.setWrap (false);\r", "-\t/*\r", "-\t* Resize the last item in the row to the maximum size.\r", "-\t*/\r", "-\r", "-\t\trbBand.fMask = OS.RBBIM_STYLE;\t\t\r", "-\t\tOS.SendMessage (handle, OS.RB_GETBANDINFO, indices [i], rbBand);\r", "-\t\trbBand.fStyle |= OS.RBBS_BREAK;\r", "-\t\tOS.SendMessage (handle, OS.RB_SETBANDINFO, indices [i], rbBand);\r", "-\t\t/*\r", "-\t\t* Ensure that the last item in the previous row is at the maximum size.\r", "-\t\t*/\r", "-\t\tresizeToMaximumWidth (indices [i] - 1);\r", "+\t\tint index = indices [i];\r", "+\t\tif (0 <= index && index < items.length) {\r", "+\t\t\tCoolItem item = items [index];\r", "+\t\t\titem.setWrap (true);\r", "+\t\t\tresizeToMaximumWidth (index - 1);\r", "+\t\t}\r", "+\tsetRedraw (true);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c32cb6b768c2aca80c46438aabbdd2d9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "eb0dd46e7194a9f7d813095a5dca290fae54babc", "commitAfterChange": "8174cf2444655210718c9dde4ae430f251492a85", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "\r \r int processMouse (int info)", "signatureAfterChange": "\r \r int processMouse (int info)", "diff": ["-\tEvent event = new Event ();\r", "+\tint type = 0;\r", "-\t\t\tevent.type = SWT.MouseDown;\r", "+\t\t\ttype = SWT.MouseDown;\r", "-\t\t\t//TEMPORARY CODE\r", "-//\t\t\tif ((state & CANVAS) != 0) return OS.Pt_CONTINUE;\r", "-\t\t\tevent.type = SWT.MouseUp;\r", "+\t\t\ttype = SWT.MouseUp;\r", "-\t\t\tevent.type = SWT.MouseMove;\r", "+\t\t\ttype = SWT.MouseMove;\r", "-\t\t\tswitch (ev.subtype) {\r", "-\t\t\t\tcase OS.Ph_EV_DRAG_MOTION_EVENT:\r", "-\t\t\t\t\tevent.type = SWT.MouseMove;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase OS.Ph_EV_DRAG_COMPLETE:\r", "-\t\t\t\t\tevent.type = SWT.MouseUp;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tdefault:\r", "-\t\t\t\t\treturn OS.Pt_CONTINUE;\r", "+\t\t\tif (ev.subtype != OS.Ph_EV_DRAG_MOTION_EVENT) {\r", "+\t\t\t\treturn OS.Pt_CONTINUE;\r", "+\t\t\ttype = SWT.MouseMove;\r", "-\tevent.time = ev.timestamp;\r", "-\tevent.x = pe.pos_x + ev.translation_x;\r", "-\tevent.y = pe.pos_y + ev.translation_y;\r", "-\tif (event.type == SWT.MouseDown || event.type == SWT.MouseUp) {\r", "-\t\tswitch (pe.buttons) {\r", "-\t\t\tcase OS.Ph_BUTTON_SELECT:\tevent.button = 1; break;\r", "-\t\t\tcase OS.Ph_BUTTON_ADJUST:\tevent.button = 2; break;\r", "-\t\t\tcase OS.Ph_BUTTON_MENU:\t\tevent.button = 3; break;\r", "+\tEvent event = new Event ();\r", "+\tevent.time = ev.timestamp;\r", "+\tsetMouseState (event, pe, ev);\r", "+\tpostEvent (type, event);\r", "+\tif (type == SWT.MouseDown) {\r", "+\t\tif (event.button == 3) {\r", "+\t\t\tif (menu != null && !menu.isDisposed ()) {\r", "+\t\t\t\tDisplay display = getDisplay ();\r", "+\t\t\t\tdisplay.runDeferredEvents ();\r", "+\t\t\t\tmenu.setVisible (true);\r", "+\t\t\t}\r", "-\t}\r", "-\tsetMouseState (ev.type, event, pe);\r", "-\tpostEvent (event.type, event);\r", "-\tif (ev.type == OS.Ph_EV_BUT_PRESS && pe.click_count == 2) {\r", "-\t\tEvent clickEvent = new Event ();\r", "-\t\tclickEvent.time = event.time;\r", "-\t\tclickEvent.x = event.x;\r", "-\t\tclickEvent.y = event.y;\r", "-\t\tclickEvent.button = event.button;\r", "-\t\tclickEvent.stateMask = event.stateMask;\r", "-\t\tpostEvent (SWT.MouseDoubleClick, clickEvent);\r", "-\t}\r", "-\tif (event.type == SWT.MouseDown) {\r", "+\t\tif (pe.click_count == 2) {\r", "+\t\t\tEvent clickEvent = new Event ();\r", "+\t\t\tclickEvent.time = event.time;\r", "+\t\t\tclickEvent.x = event.x;\r", "+\t\t\tclickEvent.y = event.y;\r", "+\t\t\tclickEvent.button = event.button;\r", "+\t\t\tclickEvent.stateMask = event.stateMask;\r", "+\t\t\tpostEvent (SWT.MouseDoubleClick, clickEvent);\r", "+\t\t}\r"]}], "num": 59646}
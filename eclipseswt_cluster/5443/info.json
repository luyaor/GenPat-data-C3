{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "000853c63eb98b160689083c341cf083", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09bc15e8cdb26b47685d1ff24b68d8f0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CLabel.java", "commitBeforeChange": "65c87a607b760458761f1e972f7bac14bae5d4cc", "commitAfterChange": "3eceed62c4e91355e0aea7f92e2c2057accd054b", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 29, "signatureBeforeChange": "  void onPaint(PaintEvent event)", "signatureAfterChange": "  void onPaint(PaintEvent event)", "diff": ["-\tint availableWidth = Math.max(0, rect.width - 2*hIndent);", "+\tint availableWidth = Math.max(0, rect.width - (leftMargin + rightMargin));", "-\tint x = rect.x + hIndent;", "+\tint x = rect.x + leftMargin;", "-\t\tx = rect.width - hIndent - extent.x;", "+\t\tx = rect.width - rightMargin - extent.x;", "+\t/*", "+\t * Compute text height and image height. If image height is more than", "+\t * the text height, draw image starting from top margin. Else draw text", "+\t * starting from top margin.", "+\t */", "+\tRectangle imageRect = null;", "+\tint lineHeight = 0, textHeight = 0, imageHeight = 0;", "+\t", "+\tif (img != null) {", "+\t    imageRect = img.getBounds();", "+\t    imageHeight = imageRect.height;", "+\t}", "+\tif (lines != null) {", "+\t    lineHeight = gc.getFontMetrics().getHeight();", "+\t    textHeight = lines.length * lineHeight;", "+\t}", "+\t", "+\tint imageY = 0, midPoint = 0, lineY = 0;", "+\tif (imageHeight > textHeight ) {", "+\t    if (topMargin == DEFAULT_MARGIN && bottomMargin == DEFAULT_MARGIN) imageY = rect.y + (rect.height - imageHeight) / 2;", "+\t    else imageY = topMargin;", "+\t    midPoint = imageY + imageHeight/2;", "+\t    lineY = midPoint - textHeight / 2;", "+\t}", "+\telse {", "+\t    if (topMargin == DEFAULT_MARGIN && bottomMargin == DEFAULT_MARGIN) lineY = rect.y + (rect.height - textHeight) / 2;", "+\t    else lineY = topMargin;", "+\t    midPoint = lineY + textHeight/2;", "+\t    imageY = midPoint - imageHeight / 2;", "+\t}", "+\t", "-\t\tRectangle imageRect = img.getBounds();", "-\t\tgc.drawImage(img, 0, 0, imageRect.width, imageRect.height, ", "-\t\t                x, (rect.height-imageRect.height)/2, imageRect.width, imageRect.height);", "+\t\tgc.drawImage(img, 0, 0, imageRect.width, imageHeight, ", "+\t\t                x, imageY, imageRect.width, imageHeight);", "+\t", "-\t\tint lineHeight = gc.getFontMetrics().getHeight();", "-\t\tint textHeight = lines.length * lineHeight;", "-\t\tint lineY = Math.max(vIndent, rect.y + (rect.height - textHeight) / 2);", "-\t\t\t\t\tlineX = Math.max(x, rect.x + rect.width - hIndent - lineWidth);", "+\t\t\t\t\tlineX = Math.max(x, rect.x + rect.width - rightMargin - lineWidth);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1922ed967e8d0b846dd06f5bd89384e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Spinner.java", "commitBeforeChange": "48e52aa22d171fa426dd2029dfc554b40adc5e47", "commitAfterChange": "ab395137a9ad910580d0b3cefc99184f207fe751", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 44, "signatureBeforeChange": "  String verifyText (String string, int start, int end, Event keyEvent)", "signatureAfterChange": "  String verifyText (String string, int start, int end)", "diff": ["-String verifyText (String string, int start, int end, Event keyEvent) {", "+String verifyText (String string, int start, int end) {", "-\tif (keyEvent != null) {", "-\t\tevent.character = keyEvent.character;", "-\t\tevent.keyCode = keyEvent.keyCode;", "-\t\tevent.stateMask = keyEvent.stateMask;", "+\tif (string.length () == 1) {", "+\t\tevent.character = string.charAt (0);", "+\t\tsetInputState (event, SWT.KeyDown, 0, 0);", "-//\tint index = 0;", "-//\tif (digits > 0) {", "-//\t\tString decimalSeparator = getDecimalSeparator ();", "-//\t\tindex = string.indexOf (decimalSeparator);", "-//\t\tif (index != -1) {", "-//\t\t\tstring = string.substring (0, index) + string.substring (index + 1);", "-//\t\t}", "-//\t\tindex = 0;", "-//\t}", "-//\twhile (index < string.length ()) {", "-//\t\tif (!Character.isDigit (string.charAt (index))) break;", "-//\t\tindex++;", "-//\t}", "-//\tevent.doit = index == string.length ();", "-//\tif (!OS.IsUnicode && OS.IsDBLocale) {", "-//\t\tevent.start = mbcsToWcsPos (start);", "-//\t\tevent.end = mbcsToWcsPos (end);", "-//\t}", "-\t//TODO", "+\tint index = 0;", "+\tif (digits > 0) {", "+\t\tString decimalSeparator = getDecimalSeparator ();", "+\t\tindex = string.indexOf (decimalSeparator);", "+\t\tif (index != -1) {", "+\t\t\tstring = string.substring (0, index) + string.substring (index + 1);", "+\t\t}", "+\t\tindex = 0;", "+\t}", "+\tif (string.length() > 0) {", "+\t\tif (min < 0 && string.charAt (0) == '-') index++;", "+\t}", "+\twhile (index < string.length ()) {", "+\t\tif (!Character.isDigit (string.charAt (index))) break;", "+\t\tindex++;", "+\t}", "+\tevent.doit = index == string.length ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7fb647a226932e9f0e94b180d4ae6d4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/FillLayout.java", "commitBeforeChange": "2f78cb1cdfd78921908da71ee40e718bf63dd05d", "commitAfterChange": "0e7696f510ceb6cc1a154ce2436355e8a224e13e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  protected void layout (Composite composite, boolean flushCache)", "signatureAfterChange": "  protected void layout (Composite composite, boolean flushCache)", "diff": ["+\tint width = rect.width - marginWidth * 2;", "+\tint height = rect.height - marginHeight * 2;", "-\t\tint x = rect.x + ((rect.width % count) / 2);", "-\t\tint width = rect.width / count;", "-\t\tint y = rect.y, height = rect.height;", "+\t\twidth -= (count - 1) * spacing;", "+\t\tint x = rect.x + marginWidth, extra = width % count;", "+\t\tint y = rect.y + marginHeight, cellWidth = width / count;", "-\t\t\tchild.setBounds (x, y, width, height);", "-\t\t\tx += width;", "+\t\t\tint childWidth = cellWidth;", "+\t\t\tif (i == 0) {", "+\t\t\t\tchildWidth += extra / 2;", "+\t\t\t} else {", "+\t\t\t\tif (i == count - 1) childWidth += (extra + 1) / 2;", "+\t\t\t}", "+\t\t\tchild.setBounds (x, y, childWidth, height);", "+\t\t\tx += childWidth + spacing;", "-\t\tint x = rect.x, width = rect.width;", "-\t\tint y = rect.y + ((rect.height % count) / 2);", "-\t\tint height = rect.height / count;", "+\t\theight -= (count - 1) * spacing;", "+\t\tint x = rect.x + marginWidth, cellHeight = height / count;", "+\t\tint y = rect.y + marginHeight, extra = height % count;", "-\t\t\tchild.setBounds (x, y, width, height);", "-\t\t\ty += height;", "+\t\t\tint childHeight = cellHeight;", "+\t\t\tif (i == 0) {", "+\t\t\t\tchildHeight += extra / 2;", "+\t\t\t} else {", "+\t\t\t\tif (i == count - 1) childHeight += (extra + 1) / 2;", "+\t\t\t}", "+\t\t\tchild.setBounds (x, y, width, childHeight);", "+\t\t\ty += childHeight + spacing;"]}], "num": 5443}
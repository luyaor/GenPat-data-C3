{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c69a8a7d7e4e546f2ecbfdd5d067543", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03bf9796adef292dea6320dd0cebfa89", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public Point getLocation(int offset, boolean trailing)", "signatureAfterChange": " public Point getLocation(int offset, boolean trailing)", "diff": ["-\tcomputeRuns();", "-\tint length = text.length();", "-\tif (!(0 <= offset && offset <= length)) SWT.error(SWT.ERROR_INVALID_RANGE);", "-\tif (length == 0) return new Point(0, 0);", "-\toffset = translateOffset(offset);", "-\tint /*long*/ glyphIndex = layoutManager.glyphIndexForCharacterAtIndex(offset);", "-\tNSRect rect = layoutManager.lineFragmentUsedRectForGlyphAtIndex(glyphIndex, 0);", "-\tNSPoint point = layoutManager.locationForGlyphAtIndex(glyphIndex);", "-\tif (trailing) {", "-\t\tNSRange range = new NSRange();", "-\t\trange.location = glyphIndex;", "-\t\trange.length = 1;", "-\t\tNSRect bounds = layoutManager.boundingRectForGlyphRange(range, textContainer);", "-\t\tpoint.x += bounds.width;", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tcomputeRuns();", "+\t\tint length = text.length();", "+\t\tif (!(0 <= offset && offset <= length)) SWT.error(SWT.ERROR_INVALID_RANGE);", "+\t\tif (length == 0) return new Point(0, 0);", "+\t\toffset = translateOffset(offset);", "+\t\tint /*long*/ glyphIndex = layoutManager.glyphIndexForCharacterAtIndex(offset);", "+\t\tNSRect rect = layoutManager.lineFragmentUsedRectForGlyphAtIndex(glyphIndex, 0);", "+\t\tNSPoint point = layoutManager.locationForGlyphAtIndex(glyphIndex);", "+\t\tif (trailing) {", "+\t\t\tNSRange range = new NSRange();", "+\t\t\trange.location = glyphIndex;", "+\t\t\trange.length = 1;", "+\t\t\tNSRect bounds = layoutManager.boundingRectForGlyphRange(range, textContainer);", "+\t\t\tpoint.x += bounds.width;", "+\t\t}", "+\t\treturn new Point((int)point.x, (int)rect.y);", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "-\treturn new Point((int)point.x, (int)rect.y);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4aff9b4c887348bfb37ccd49f190847d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public FontMetrics getLineMetrics (int lineIndex)", "signatureAfterChange": " public FontMetrics getLineMetrics (int lineIndex)", "diff": ["-\tcomputeRuns();", "-\tint lineCount = getLineCount();", "-\tif (!(0 <= lineIndex && lineIndex < lineCount)) SWT.error(SWT.ERROR_INVALID_RANGE);", "-\tint length = text.length();", "-\tif (length == 0) {", "-\t\tFont font = this.font != null ? this.font : device.systemFont;", "-\t\tNSFont nsFont = font.handle;", "-\t\tint ascent = (int)(0.5f + nsFont.ascender());", "-\t\tint descent = (int)(0.5f + (-nsFont.descender() + nsFont.leading()));\t", "-\t\tascent = Math.max(ascent, this.ascent);", "-\t\tdescent = Math.max(descent, this.descent);", "-\t\treturn FontMetrics.cocoa_new(ascent, descent, 0, 0, ascent + descent);", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tcomputeRuns();", "+\t\tint lineCount = getLineCount();", "+\t\tif (!(0 <= lineIndex && lineIndex < lineCount)) SWT.error(SWT.ERROR_INVALID_RANGE);", "+\t\tint length = text.length();", "+\t\tif (length == 0) {", "+\t\t\tFont font = this.font != null ? this.font : device.systemFont;", "+\t\t\tNSFont nsFont = font.handle;", "+\t\t\tint ascent = (int)(0.5f + nsFont.ascender());", "+\t\t\tint descent = (int)(0.5f + (-nsFont.descender() + nsFont.leading()));\t", "+\t\t\tascent = Math.max(ascent, this.ascent);", "+\t\t\tdescent = Math.max(descent, this.descent);", "+\t\t\treturn FontMetrics.cocoa_new(ascent, descent, 0, 0, ascent + descent);", "+\t\t}", "+\t\tRectangle rect = getLineBounds(lineIndex);", "+\t\tint baseline = (int)layoutManager.typesetter().baselineOffsetInLayoutManager(layoutManager, getLineOffsets()[lineIndex]);", "+\t\treturn FontMetrics.cocoa_new(rect.height - baseline, baseline, 0, 0, rect.height);", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "-\tRectangle rect = getLineBounds(lineIndex);", "-\tint baseline = (int)layoutManager.typesetter().baselineOffsetInLayoutManager(layoutManager, getLineOffsets()[lineIndex]);", "-\treturn FontMetrics.cocoa_new(rect.height - baseline, baseline, 0, 0, rect.height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a69ce233424d9542e64251b2a9a1e16", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public Rectangle getBounds(int start, int end)", "signatureAfterChange": " public Rectangle getBounds(int start, int end)", "diff": ["-\tcomputeRuns();", "-\tint length = text.length();", "-\tif (length == 0) return new Rectangle(0, 0, 0, 0);", "-\tif (start > end) return new Rectangle(0, 0, 0, 0);", "-\tstart = Math.min(Math.max(0, start), length - 1);", "-\tend = Math.min(Math.max(0, end), length - 1);", "-\tstart = translateOffset(start);", "-\tend = translateOffset(end);", "-\tNSRange range = new NSRange();", "-\trange.location = layoutManager.glyphIndexForCharacterAtIndex(start);", "-\trange.length = layoutManager.glyphIndexForCharacterAtIndex(end + 1) - range.location;", "-\tNSRect rect = layoutManager.boundingRectForGlyphRange(range, textContainer);", "-\treturn new Rectangle((int)rect.x, (int)rect.y, (int)Math.ceil(rect.width), (int)Math.ceil(rect.height));", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tcomputeRuns();", "+\t\tint length = text.length();", "+\t\tif (length == 0) return new Rectangle(0, 0, 0, 0);", "+\t\tif (start > end) return new Rectangle(0, 0, 0, 0);", "+\t\tstart = Math.min(Math.max(0, start), length - 1);", "+\t\tend = Math.min(Math.max(0, end), length - 1);", "+\t\tstart = translateOffset(start);", "+\t\tend = translateOffset(end);", "+\t\tNSRange range = new NSRange();", "+\t\trange.location = layoutManager.glyphIndexForCharacterAtIndex(start);", "+\t\trange.length = layoutManager.glyphIndexForCharacterAtIndex(end + 1) - range.location;", "+\t\tNSRect rect = layoutManager.boundingRectForGlyphRange(range, textContainer);", "+\t\treturn new Rectangle((int)rect.x, (int)rect.y, (int)Math.ceil(rect.width), (int)Math.ceil(rect.height));", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a82215718d2d0e406bd7bd0ed380baeb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "1abca3de880ca8fa3712038f321ffb3a0803dd38", "commitAfterChange": "1fcdb5569a20cdd8ecab2986180db47c5142ee2d", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public Point getLocation(int offset, boolean trailing)", "signatureAfterChange": " public Point getLocation(int offset, boolean trailing)", "diff": ["-\t\toffset = translateOffset(offset);", "-\t\tint /*long*/ glyphIndex = layoutManager.glyphIndexForCharacterAtIndex(offset);", "-\t\tNSRect rect = layoutManager.lineFragmentUsedRectForGlyphAtIndex(glyphIndex, 0);", "-\t\tNSPoint point = layoutManager.locationForGlyphAtIndex(glyphIndex);", "-\t\tboolean rtl = false;", "-\t\tNSRange range  = new NSRange();", "-\t\trange.location = glyphIndex;", "-\t\trange.length = 1;", "-\t\tbyte[] bidiLevels = new byte[1];", "-\t\tint /*long*/ result = layoutManager.getGlyphsInRange(range, 0, 0, 0, 0, bidiLevels);", "-\t\tif (result > 0) {", "-\t\t\trtl = (bidiLevels[0] & 1) != 0;", "-\t\t}", "-\t\tif (trailing != rtl) {", "-\t\t\tint /*long*/ [] rectCount = new int /*long*/ [1];", "-\t\t\tint /*long*/ pArray = layoutManager.rectArrayForGlyphRange(range, range, textContainer, rectCount);", "-\t\t\tif (rectCount[0] > 0) {", "-\t\t\t\tNSRect bounds = new NSRect();", "-\t\t\t\tOS.memmove(bounds, pArray, NSRect.sizeof);", "-\t\t\t\tfixRect(bounds);", "-\t\t\t\tpoint.x += bounds.width;", "+\t\tif (offset == length) {", "+\t\t\tNSRect rect = lineBounds[lineBounds.length - 1];", "+\t\t\treturn new Point((int)(rect.x + rect.width), (int)rect.y);", "+\t\t} else {", "+\t\t\toffset = translateOffset(offset);", "+\t\t\tint /*long*/ glyphIndex = layoutManager.glyphIndexForCharacterAtIndex(offset);", "+\t\t\tNSRect rect = layoutManager.lineFragmentUsedRectForGlyphAtIndex(glyphIndex, 0);", "+\t\t\tNSPoint point = layoutManager.locationForGlyphAtIndex(glyphIndex);", "+\t\t\tboolean rtl = false;", "+\t\t\tNSRange range  = new NSRange();", "+\t\t\trange.location = glyphIndex;", "+\t\t\trange.length = 1;", "+\t\t\tbyte[] bidiLevels = new byte[1];", "+\t\t\tint /*long*/ result = layoutManager.getGlyphsInRange(range, 0, 0, 0, 0, bidiLevels);", "+\t\t\tif (result > 0) {", "+\t\t\t\trtl = (bidiLevels[0] & 1) != 0;", "+\t\t\tif (trailing != rtl) {", "+\t\t\t\tint /*long*/ [] rectCount = new int /*long*/ [1];", "+\t\t\t\tint /*long*/ pArray = layoutManager.rectArrayForGlyphRange(range, range, textContainer, rectCount);", "+\t\t\t\tif (rectCount[0] > 0) {", "+\t\t\t\t\tNSRect bounds = new NSRect();", "+\t\t\t\t\tOS.memmove(bounds, pArray, NSRect.sizeof);", "+\t\t\t\t\tfixRect(bounds);", "+\t\t\t\t\tpoint.x += bounds.width;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn new Point((int)point.x, (int)rect.y);", "-\t\treturn new Point((int)point.x, (int)rect.y);"]}], "num": 11523}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a7af5c712dec71b3e71836047b6365d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "470e6528d5dc9b28e4567fd192775c4d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 56, "signatureBeforeChange": " void makeVisible()", "signatureAfterChange": " void removeItem (TreeItem item, int index)", "diff": ["- */", "-void makeVisible() {", "-\tTreeItem parentItem = getParentItem();", "-\t", "-\tif (isVisible() == false && parentItem != null) {", "-\t\tgetParent().expand(parentItem, true);\t\t\t// have to call Tree.expand directly in order to trigger Expand event", "-\t\tparentItem.makeVisible();", "-\t}", "-}", "+ */", "+void removeItem (TreeItem item, int index) {", "+\tif (isDisposed ()) return;", "+\tTreeItem[] newItems = new TreeItem[items.length - 1];", "+\tSystem.arraycopy (items, 0, newItems, 0, index);", "+\tSystem.arraycopy (items, index + 1, newItems, index, newItems.length - index);", "+\titems = newItems;", "+\t// TODO second condition below is ugly, handles creation of item within Expand callback", "+\tif (items.length == 0 && !parent.inExpand) {", "+\t\texpanded = false;", "+\t\tif (isAvailable ()) redrawItem ();\t/* expander no longer needed */", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94aece66e68d51a9795810a46f983d09", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " void calculateVisibleItemCountParent()", "signatureAfterChange": " void addItem (TreeItem item, int index)", "diff": ["- */", "-void calculateVisibleItemCountParent() {", "-\tTreeItem parentItem = getParentItem();", "+}", "+void addItem (TreeItem item, int index) {", "+\t/* adds a child item to the receiver */", "+\tTreeItem[] newChildren = new TreeItem [items.length + 1];", "+\tSystem.arraycopy (items, 0, newChildren, 0, index);", "+\tnewChildren[index] = item;", "+\tSystem.arraycopy (items, index, newChildren, index + 1, items.length - index);", "+\titems = newChildren;", "-\tif (parentItem != null) {", "-\t\tparentItem.calculateVisibleItemCount();", "-\t}", "-\telse {", "-\t\tgetParent().getRoot().calculateVisibleItemCount();", "+\t/* if item should be available immediately then update parent accordingly */", "+\tif (item.isAvailable ()) {", "+\t\tparent.makeAvailable (item);", "+\t\tparent.redrawFromItemDownwards (availableIndex);", "+\t} else {", "+\t\t/* receiver will need update if this is its first child */", "+\t\tif (isAvailable () && items.length == 1) redrawItem ();"]}], "num": 62534}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7e4b7b77cd76811524346ccb2fa0d242", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0a3983b333336e563d8340d9e88063b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 60, "signatureBeforeChange": " public void dispose()", "signatureAfterChange": "  public void dispose()", "diff": ["-}", "-public void dispose() {", "-\tif (isDisposed ()) return;", "-\tint startIndex = -1, endIndex = -1;", "-\tTree2 parent = this.parent;", "-\tint index = getIndex ();", "-\t", "-\t/* determine the indices, if any, that will need to be visually updated */", "-\tif (isAvailable ()) {", "-\t\tif (isLastChild () && index > 0) {", "-\t\t\t/* vertical connector lines no longer needed for this item */", "-\t\t\tif (parentItem != null) {", "-\t\t\t\tstartIndex = parentItem.getItems ()[index - 1].availableIndex;", "-\t\t\t} else {", "-\t\t\t\tstartIndex = parent.getItems ()[index - 1].availableIndex;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tstartIndex = availableIndex;", "-\t\t}", "-\t\tendIndex = parent.availableItems.length - 1;", "-\t}", "-\t/* for performance do this upfront for whole descendent chain */", "-\tTreeItem2 focusItem = parent.focusItem; ", "-\tif (focusItem != null && focusItem.hasAncestor (this)) {", "-\t\tparent.setFocusItem (this, false);", "-\t\tparent.reassignFocus ();", "-\t\tparent.redrawItem (parent.focusItem.availableIndex);", "-\t}", "-\tif (parentItem != null) {", "-\t\tparentItem.removeItem (this, index);", "-\t}", "-\tdispose (true);", "-\tif (startIndex != -1) {", "-\t\tparent.redrawItems (startIndex, endIndex);", "-\t}", "-}", "+", "+public void dispose() {", "+\tif (isDisposed()) return;", "+\t// if the tree is being disposed don't bother collapsing the item since all ", "+\t// items in the tree will be deleted and redraws will not be processed anyway", "+\tTree2 parent = getParent();", "+\tif (parent.isRemovingAll() == false) {", "+\t\tparent.collapseNoRedraw(this);", "+\t}\t", "+\t", "+\t\tparentItem.removeItem(this);", "+\telse {", "+\t\tparent.removeItem(this);", "+\t}", "+\t", "+\tsuper.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a095d89844d140a04ccf71a48e1b3752", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void dispose()", "signatureAfterChange": " public void dispose()", "diff": ["+}", "+public void dispose() {", "+\tif (isDisposed ()) return;", "+\tint startIndex = -1, endIndex = -1;", "+\tTree parent = this.parent;", "+\tint index = getIndex ();", "+\t/* determine the indices, if any, that will need to be visually updated */", "+\tif (isAvailable ()) {", "+\t\tif (isLastChild () && index > 0) {", "+\t\t\t/* vertical connector lines no longer needed for this item */", "+\t\t\tif (parentItem != null) {", "+\t\t\t\tstartIndex = parentItem.getItems ()[index - 1].availableIndex;", "+\t\t\t} else {", "+\t\t\t\tstartIndex = parent.getItems ()[index - 1].availableIndex;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tstartIndex = availableIndex;", "+\t\tendIndex = parent.availableItems.length - 1;", "+", "+\t/* for performance do this upfront for whole descendent chain */", "+\tTreeItem focusItem = parent.focusItem; ", "+\tif (focusItem != null && focusItem.hasAncestor (this)) {", "+\t\tparent.setFocusItem (this, false);", "+\t\tparent.reassignFocus ();", "+\t\tparent.redrawItem (parent.focusItem.availableIndex);", "+\t\tparentItem.removeItem (this, index);", "+\tdispose (true);", "+\tif (startIndex != -1) {", "+\t\tparent.redrawItems (startIndex, endIndex);", "+\t}", "-", "-public void dispose() {", "-\tif (isDisposed()) return;", "-\t// if the tree is being disposed don't bother collapsing the item since all ", "-\t// items in the tree will be deleted and redraws will not be processed anyway", "-\tTree parent = getParent();", "-\tif (parent.isRemovingAll() == false) {", "-\t\tparent.collapseNoRedraw(this);", "-\t}\t", "-\t", "-\t\tparentItem.removeItem(this);", "-\telse {", "-\t\tparent.removeItem(this);", "-\tsuper.dispose();"]}], "num": 20216}
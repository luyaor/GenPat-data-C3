{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8436c5c156d2e021427997919015f2c8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6195c303e292855303440df3ab4cd33", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "90874dd0f318ad72c86947cdc4c25287bab952a0", "commitAfterChange": "d83561e2a470cacc6095411b57b2532529e6968b", "methodNumberBeforeChange": 155, "methodNumberAfterChange": 155, "signatureBeforeChange": "  boolean setKeyState (Event event, int type, int theEvent)", "signatureAfterChange": "  boolean setKeyState (Event event, int type, int theEvent)", "diff": ["-\t\t\t\tint result = OS.KeyTranslate (display.kchrPtr, (short)keyCode [0], display.kchrState);", "-\t\t\t\tif (result <= 0x7f) {", "-\t\t\t\t\tevent.keyCode = result & 0x7f;", "-\t\t\t\t} else {", "-\t\t\t\t\tint [] encoding = new int [1];", "-\t\t\t\t\tshort keyScript = (short) OS.GetScriptManagerVariable ((short) OS.smKeyScript);", "-\t\t\t\t\tshort regionCode = (short) OS.GetScriptManagerVariable ((short) OS.smRegionCode);", "-\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, regionCode, null, encoding) == OS.paramErr) {", "-\t\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, (short) OS.kTextRegionDontCare, null, encoding) == OS.paramErr) {", "-\t\t\t\t\t\t\tencoding [0] = OS.kTextEncodingMacRoman;", "-\t\t\t\t\t\t}", "+\t\t\t\tint [] layoutRef = new int [1];", "+\t\t\t\tint layoutKind = OS.kKLKCHRKind;", "+\t\t\t\tif (OS.KLGetCurrentKeyboardLayout (layoutRef) == OS.noErr) {", "+\t\t\t\t\tint [] layoutKindRef = new int [1];", "+\t\t\t\t\tOS.KLGetKeyboardLayoutProperty (layoutRef[0], OS.kKLKind, layoutKindRef);", "+\t\t\t\t\tlayoutKind = layoutKindRef [0];", "+\t\t\t\t}", "+\t\t\t\tif (layoutKind == OS.kKLuchrKind) {", "+\t\t\t\t\tint [] layoutPtr = new int [1];", "+\t\t\t\t\tOS.KLGetKeyboardLayoutProperty (layoutRef[0], OS.kKLuchrData, layoutPtr);", "+\t\t\t\t\tint maxStringLength = 256;", "+\t\t\t\t\tchar [] output = new char [maxStringLength];", "+\t\t\t\t\tint [] actualStringLength = new int [1];", "+\t\t\t\t\tOS.UCKeyTranslate (layoutPtr[0], (short)keyCode[0], (short)OS.kUCKeyActionDown, 0, OS.LMGetKbdType (), 0, display.kchrState, maxStringLength, actualStringLength, output);", "+\t\t\t\t\tif (actualStringLength[0] < 1) {", "+\t\t\t\t\t\t// part of a multi-key key", "+\t\t\t\t\t\tevent.keyCode = 0;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tevent.keyCode = output[0];", "-\t\t\t\t\tint [] encodingInfo = new int [1];", "-\t\t\t\t\tOS.CreateTextToUnicodeInfoByEncoding (encoding [0], encodingInfo);", "-\t\t\t\t\tif (encodingInfo [0] != 0) {", "-\t\t\t\t\t\tchar [] chars = new char [1];", "-\t\t\t\t\t\tint [] nchars = new int [1];", "-\t\t\t\t\t\tbyte [] buffer = new byte [2];", "-\t\t\t\t\t\tbuffer [0] = 1;", "-\t\t\t\t\t\tbuffer [1] = (byte) (result & 0xFF);", "-\t\t\t\t\t\tOS.ConvertFromPStringToUnicode (encodingInfo [0], buffer, chars.length * 2, nchars, chars);", "-\t\t\t\t\t\tOS.DisposeTextToUnicodeInfo (encodingInfo);", "-\t\t\t\t\t\tevent.keyCode = chars [0];", "+\t\t\t\t} else {", "+\t\t\t\t\tint result = OS.KeyTranslate (display.kchrPtr, (short)keyCode [0], display.kchrState);", "+\t\t\t\t\tif (result <= 0x7f) {", "+\t\t\t\t\t\tevent.keyCode = result & 0x7f;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint [] encoding = new int [1];", "+\t\t\t\t\t\tshort keyScript = (short) OS.GetScriptManagerVariable ((short) OS.smKeyScript);", "+\t\t\t\t\t\tshort regionCode = (short) OS.GetScriptManagerVariable ((short) OS.smRegionCode);", "+\t\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, regionCode, null, encoding) == OS.paramErr) {", "+\t\t\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, (short) OS.kTextRegionDontCare, null, encoding) == OS.paramErr) {", "+\t\t\t\t\t\t\t\tencoding [0] = OS.kTextEncodingMacRoman;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint [] encodingInfo = new int [1];", "+\t\t\t\t\t\tOS.CreateTextToUnicodeInfoByEncoding (encoding [0], encodingInfo);", "+\t\t\t\t\t\tif (encodingInfo [0] != 0) {", "+\t\t\t\t\t\t\tchar [] chars = new char [1];", "+\t\t\t\t\t\t\tint [] nchars = new int [1];", "+\t\t\t\t\t\t\tbyte [] buffer = new byte [2];", "+\t\t\t\t\t\t\tbuffer [0] = 1;", "+\t\t\t\t\t\t\tbuffer [1] = (byte) (result & 0xFF);", "+\t\t\t\t\t\t\tOS.ConvertFromPStringToUnicode (encodingInfo [0], buffer, chars.length * 2, nchars, chars);", "+\t\t\t\t\t\t\tOS.DisposeTextToUnicodeInfo (encodingInfo);", "+\t\t\t\t\t\t\tevent.keyCode = chars [0];", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69dc2d2ab57875ce74c6efd196ac47fb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "b683aa10176d904b43fcc24b25f27de44d98f32a", "commitAfterChange": "db44f811fdd3778cffa3b94af6d227463daf97df", "methodNumberBeforeChange": 155, "methodNumberAfterChange": 155, "signatureBeforeChange": "  boolean setKeyState (Event event, int type, NSEvent nsEvent)", "signatureAfterChange": "  boolean setKeyState (Event event, int type, NSEvent nsEvent)", "diff": ["-\t\t\t\t//TODO this is wrong for shifted keys like ';', '1' and non-english keyboards", "-\t\t\t\tNSString unmodifiedChars = nsEvent.charactersIgnoringModifiers ().lowercaseString();", "-\t\t\t\tif (unmodifiedChars.length() > 0) event.keyCode = (char)unmodifiedChars.characterAtIndex(0);", "+\t\t\t\tint /*long*/ uchrPtr = 0;", "+\t\t\t\tint /*long*/ currentKbd = OS.TISCopyCurrentKeyboardInputSource();", "+\t\t\t\tint /*long*/ uchrCFData = OS.TISGetInputSourceProperty(currentKbd, OS.kTISPropertyUnicodeKeyLayoutData());", "+\t\t\t\t", "+\t\t\t\tif (uchrCFData != 0) {", "+\t\t\t\t\t// If the keyboard changed since the last keystroke clear the dead key state.", "+\t\t\t\t\tif (uchrCFData != display.currentKeyboardUCHRdata) display.deadKeyState[0] = 0;", "+\t\t\t\t\tuchrPtr = OS.CFDataGetBytePtr(uchrCFData);", "+\t\t\t\t\t", "+\t\t\t\t\tif (uchrPtr != 0 && OS.CFDataGetLength(uchrCFData) > 0) {", "+\t\t\t\t\t\tint /*long*/ cgEvent = nsEvent.CGEvent();", "+\t\t\t\t\t\tlong keyboardType = OS.CGEventGetIntegerValueField(cgEvent, OS.kCGKeyboardEventKeyboardType);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tint maxStringLength = 256;", "+\t\t\t\t\t\tchar [] output = new char [maxStringLength];", "+\t\t\t\t\t\tint [] actualStringLength = new int [1];", "+\t\t\t\t\t\tOS.UCKeyTranslate (uchrPtr, (short)keyCode, (short)OS.kUCKeyActionDown, 0, (int)keyboardType, 0, display.deadKeyState, maxStringLength, actualStringLength, output);", "+\t\t\t\t\t\tif (actualStringLength[0] < 1) {", "+\t\t\t\t\t\t\t// part of a multi-key key", "+\t\t\t\t\t\t\tevent.keyCode = 0;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tevent.keyCode = output[0];", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// KCHR keyboard layouts are no longer supported, so fall back to the basic but flawed", "+\t\t\t\t\t// method of determining which key was pressed.", "+\t\t\t\t\tNSString unmodifiedChars = nsEvent.charactersIgnoringModifiers ().lowercaseString();", "+\t\t\t\t\tif (unmodifiedChars.length() > 0) event.keyCode = (char)unmodifiedChars.characterAtIndex(0);", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif (currentKbd != 0) OS.CFRelease(currentKbd);"]}], "num": 50770}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "05d5c40ec1745efb5808ec65420675af", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0ca2dc90753c34676cdb25044712999", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Image.java", "commitBeforeChange": "c8c3b0d56ac96eed1deeae3cbebb069fecdd4ef9", "commitAfterChange": "db54bb9c515ce97cb7d05101b9fa91b631d7bee5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLorg_eclipse_swt_graphics_ImageDataLorg_eclipse_swt_graphics_ImageData()", "signatureAfterChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLorg_eclipse_swt_graphics_ImageDataLorg_eclipse_swt_graphics_ImageData()", "diff": ["+\tImageData data = null;", "+\tImageData data1 = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\tImage image = null;", "+\t", "+\ttry {", "+\t\timage = new Image(display, data, data1);", "+\t\timage.dispose();", "+\t\tfail(\"No exception thrown for ImageData source == null\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\tdata = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\tdata1 = null;", "+\ttry {", "+\t\timage = new Image(display, data, data1);", "+\t\timage.dispose();", "+\t\tfail(\"No exception thrown for ImageData mask == null\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\tdata = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\tdata1 = new ImageData(1, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\ttry {", "+\t\timage = new Image(display, data, data1);", "+\t\timage.dispose();", "+\t\tfail(\"No exception thrown for ImageData source width != ImageData mask width\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\tdata = new ImageData(10, 1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\tdata1 = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\ttry {", "+\t\timage = new Image(display, data, data1);", "+\t\timage.dispose();", "+\t\tfail(\"No exception thrown for ImageData source height != ImageData mask height\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\tdata = new ImageData(10, 10, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\tdata1 = new ImageData(10, 10, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\ttry {", "+\t\timage = new Image(display, data, data1);", "+\t\timage.dispose();", "+\t\tfail(\"No exception thrown for ImageData mask color depth != 1\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\t// This test isn't finished yet, don't remove until it is!  Should test mask support."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d598f447877898466d8f5339ac98228a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Font.java", "commitBeforeChange": "2272262fa1ad2a17677f9473dd0c94e9b168217c", "commitAfterChange": "66413abed4d13d9d98291abd8415d641f3043b15", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_Device$Lorg_eclipse_swt_graphics_FontData()", "signatureAfterChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_Device$Lorg_eclipse_swt_graphics_FontData()", "diff": ["-\twarnUnimpl(\"Test test_ConstructorLorg_eclipse_swt_graphics_Device$Lorg_eclipse_swt_graphics_FontData not written\");", "+\t", "+\t// null  device argument", "+\t", "+\tboolean exceptionThrown = false;", "+\ttry {", "+\t\tFontData[] data = new FontData[1];", "+\t\tFont font = new Font(null,data);", "+\t\tfont.dispose();", "+\t} catch (IllegalArgumentException e) {", "+\t\texceptionThrown = true;", "+\t} ", "+\tassertTrue(exceptionThrown);", "+\t", "+\t// null data argument", "+\t", "+\texceptionThrown = false;", "+\ttry {", "+\t\tFontData[] data = null;", "+\t\tFont font = new Font(display,data);", "+\t\tfont.dispose();", "+\t} catch (IllegalArgumentException e) {", "+\t\texceptionThrown = true;", "+\t} ", "+\tassertTrue(exceptionThrown);", "+", "+\t// zero length data array", "+\t", "+\texceptionThrown = false;", "+\ttry {", "+\t\tFontData[] data = new FontData[0];", "+\t\tFont font = new Font(display,data);", "+\t\tfont.dispose();", "+\t} catch (IllegalArgumentException e) {", "+\t\texceptionThrown = true;", "+\t} ", "+\tassertTrue(exceptionThrown);", "+\t", "+\t// null data element", "+\t", "+\texceptionThrown = false;", "+\ttry {", "+\t\tFontData[] data = {", "+\t\t\tnull,", "+\t\t\tnew FontData()", "+\t\t};", "+\t\tFont font = new Font(display,data);", "+\t\tfont.dispose();", "+\t} catch (IllegalArgumentException e) {", "+\t\texceptionThrown = true;", "+\t} ", "+\tassertTrue(\"null data element 0\",exceptionThrown);", "+", "+\texceptionThrown = false;", "+\ttry {", "+\t\tFontData[] data = {", "+\t\t\tnew FontData(),", "+\t\t\tnull", "+\t\t};", "+\t\tFont font = new Font(display,data);", "+\t\tfont.dispose();", "+\t} catch (IllegalArgumentException e) {", "+\t\texceptionThrown = true;", "+\t} ", "+\tassertTrue(\"null data element 1\",exceptionThrown);", "+\t", "+\t// test that FontData is set correctly", "+\t", "+\tFontData data = new FontData();", "+\tFont font = new Font(display,data);", "+\tFontData[] returnedData = font.getFontData();", "+\tassertEquals(data,returnedData[0]);", "+\tfont.dispose();"]}], "num": 50450}
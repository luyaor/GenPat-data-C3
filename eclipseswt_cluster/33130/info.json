{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e40d39c69541d1450d30d8c34ce292c9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cd344f23a50e3acaf3e6d0061a440fd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "16f7714e341fe5d5bf0773c0a0980725cc289841", "commitAfterChange": "949a243710db76895ae62e7e3836ee5ccd5921de", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": "  Control findControl(int handle)", "signatureAfterChange": "  Control findControl (int handle)", "diff": ["-Control findControl(int handle) {", "+Control findControl (int handle) {", "-\t/*", "-\t* This code is intentionally commented.  It is possible", "-\t* find the SWT control that is associated with a handle", "-\t* that belongs to another process when the handle was", "-\t* created by an in-proc OLE client.  In this case, the", "-\t* handle comes from another process, but it is a child", "-\t* of an SWT control.  For now, it is necessary to look", "-\t* at handles that do not belong to the SWT process.", "-\t*/", "-//\tint [] hwndProcessId = new int [1];", "-//\tOS.GetWindowThreadProcessId (handle, hwndProcessId);", "-//\tif (hwndProcessId [0] != processId) return null;", "-\t\tControl control = WidgetTable.get (handle);", "-\t\tif (control != null && control.handle == handle) {", "-\t\t\treturn control;", "-\t\t}", "+\t\tControl control = getControl (handle);", "+\t\tif (control != null) return control;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe98ca1d0839bed774b2c0a1be213efb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "74b44aac273bace6e70511de497711ba9cb87f49", "commitAfterChange": "6e4b0c1d4fdb9e23181a7b945123e706fd39c5bb", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "  int mouseHoverProc (int id, int handle)", "signatureAfterChange": "  int mouseHoverProc (int id, int handle)", "diff": ["-\tif (hoverControl == null) return 0;", "-\tif (hoverControl.handle == handle && !hoverControl.isDisposed ()) {", "+\tif (currentControl == null) return 0;", "+\tif (!currentControl.isDisposed ()) {", "-\t\tPoint pt = hoverControl.toControl (getCursorLocation ());", "-\t\thoverControl.sendMouseEvent (SWT.MouseHover, (short)0, chord, (short)pt.x, (short)pt.y, modifiers);", "+\t\tPoint pt = currentControl.toControl (getCursorLocation ());", "+\t\tcurrentControl.sendMouseEvent (SWT.MouseHover, (short)0, chord, (short)pt.x, (short)pt.y, modifiers);", "-\thoverControl = null;"]}], "num": 33130}
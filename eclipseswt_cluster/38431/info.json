{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19640f1e4b5f5ddf53e7b93dcb508835", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c71ed4d98fd00c8cdaa3cff4ff775094", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "345e8fd707790ae4ed8802abc9f867aec8778dc0", "commitAfterChange": "6bcdd59bde0c05e0237aca7d3eedb971d755541b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple)", "signatureAfterChange": " void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple)", "diff": ["- \t\tsimple = srcX == 0 && srcY == 0 &&", "- \t\t\tsrcWidth == destWidth && destWidth == imgWidth &&", "- \t\t\tsrcHeight == destHeight && destHeight == imgHeight;", "- \t}\t", "-\tif (srcImage.alpha != -1 || srcImage.alphaData != null) {", "-\t\tdrawImageAlpha(srcImage, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, simple, imgWidth, imgHeight);", "-\t} else if (srcImage.transparentPixel != -1 || srcImage.mask != 0) {", "-\t\tdrawImageMask(srcImage, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, simple, imgWidth, imgHeight);", "-\t} else {", "-\t\tdrawImage(srcImage, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, simple, imgWidth, imgHeight);", "-\t}", "-}", "+ \t}", "+\tif (srcImage.alpha == 0)\t// fully transparent", "+\t\treturn;", "+", "+\tif (srcImage.pixmap == 0)", "+\t\treturn;", "+\tint srcBits= OS.DerefHandle(srcImage.pixmap);", "+\tif (srcBits == 0)", "+\t\treturn;", "+\tint destBits= OS.GetPortBitMapForCopyBits(handle);", "+\tif (destBits == 0)", "+\t\treturn;", "+", "+\tMacRect ib= new MacRect(srcX, srcY, srcWidth, srcHeight);", "+\tfRect.set(destX, destY, destWidth, destHeight);", "+", "+ \ttry {", "+\t\t\t", "+\t\t\tOS.RGBBackColor(0x00FFFFFF);", "+\t\t\tOS.RGBForeColor(0x00000000);", "+", "+\t\t\tif (srcImage.alpha != -1 || srcImage.alphaData != null) {", "+\t\t\t\t", "+\t\t\t\tif (srcImage.alpha == 255) {\t// fully opaque", "+\t\t\t\t\tOS.CopyBits(srcBits, destBits, ib.getData(), fRect.getData(), (short)0, 0);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t//OS.CopyDeepMask(srcBits, maskBits, destBits, ib.getData(), ib.getData(), fRect.getData(), (short)0, 0);", "+\t\t\t\tSystem.out.println(\"GC.drawImage: alpha drawing not nyi\");", "+", "+\t\t\t} else if (srcImage.transparentPixel != -1 || srcImage.mask != 0) {", "+\t\t\t\t/* Generate the mask if necessary. */", "+\t\t\t\tif (srcImage.transparentPixel != -1) srcImage.createMask();", "+\t\t\t\tint maskBits= srcImage.mask != 0 ? OS.DerefHandle(srcImage.mask) : 0;", "+\t\t\t\tif (maskBits != 0)", "+\t\t\t\t\tOS.CopyMask(srcBits, maskBits, destBits, ib.getData(), ib.getData(), fRect.getData());", "+", "+\t\t\t\t/* Destroy the image mask if there is a GC created on the image */", "+\t\t\t\tif (srcImage.transparentPixel != -1 && srcImage.memGC != null) srcImage.destroyMask();", "+", "+\t\t\t} else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fccb9add808188055e33040393707fc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": " void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple)", "signatureAfterChange": "  void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple)", "diff": ["-void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple) {", "-\tMacRect bounds= new MacRect();", "-\tOS.GetPixBounds(srcImage.pixmap, bounds.getData());", "- \tint imgWidth = bounds.getWidth();", "- \tint imgHeight = bounds.getHeight();", "+void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple) {", "+ \tint imageHandle = srcImage.handle;", "+ \tint imgWidth = OS.CGImageGetWidth(imageHandle);", "+ \tint imgHeight = OS.CGImageGetHeight(imageHandle);", "+ \t\tsimple = srcX == 0 && srcY == 0 &&", "+ \t\t\tsrcWidth == destWidth && destWidth == imgWidth &&", "+ \t\t\tsrcHeight == destHeight && destHeight == imgHeight;", "-", "-\tif (srcImage.alpha == 0)\t// fully transparent", "-\t\treturn;", "-", "-\tif (srcImage.pixmap == 0)", "-\t\treturn;", "-\tint srcBits= OS.DerefHandle(srcImage.pixmap);", "-\tif (srcBits == 0)", "-\t\treturn;", "-\tint destBits= OS.GetPortBitMapForCopyBits(handle);", "-\tif (destBits == 0)", "-\t\treturn;", "-", "- \ttry {", "-\t\tif (focus(true, null)) {", "-\t", "-\t\t\tMacRect ib= new MacRect(srcX, srcY, srcWidth, srcHeight);", "-\t\t\tfRect.set(destX, destY, destWidth, destHeight);", "-\t\t", "-\t\t\tOS.RGBBackColor((short)0xFFFF, (short)0xFFFF, (short)0xFFFF);", "-\t\t\tOS.RGBForeColor((short)0x0000, (short)0x0000, (short)0x0000);", "-", "-\t\t\tif (srcImage.alpha != -1 || srcImage.alphaData != null) {", "-\t\t\t\t", "-\t\t\t\tif (srcImage.alpha == 255) {\t// fully opaque", "-\t\t\t\t\tOS.CopyBits(srcBits, destBits, ib.getData(), fRect.getData(), (short)0, 0);", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t//OS.CopyDeepMask(srcBits, maskBits, destBits, ib.getData(), ib.getData(), fRect.getData(), (short)0, 0);", "-\t\t\t\tSystem.out.println(\"GC.drawImage: alpha drawing not nyi\");", "-", "-\t\t\t} else if (srcImage.transparentPixel != -1 || srcImage.mask != 0) {", "-\t\t\t\t/* Generate the mask if necessary. */", "-\t\t\t\tif (srcImage.transparentPixel != -1) srcImage.createMask();", "-\t", "-\t\t\t\tint maskBits= srcImage.mask != 0 ? OS.DerefHandle(srcImage.mask) : 0;", "-\t\t\t\tif (maskBits != 0)", "-\t\t\t\t\tOS.CopyMask(srcBits, maskBits, destBits, ib.getData(), ib.getData(), fRect.getData());", "-", "-\t\t\t\t/* Destroy the image mask if there is a GC created on the image */", "-\t\t\t\tif (srcImage.transparentPixel != -1 && srcImage.memGC != null) srcImage.destroyMask();", "-", "-\t\t\t} else {", "-\t\t\t\tOS.CopyBits(srcBits, destBits, ib.getData(), fRect.getData(), (short)0, 0);", "-\t\t\t}", "-\t\t}", "-\t} finally {", "-\t\tunfocus(true);", "-\t}", "+ \tOS.CGContextSaveGState(handle);", "+ \tOS.CGContextScaleCTM(handle, 1, -1);", "+ \tOS.CGContextTranslateCTM(handle, 0, -(destHeight + 2 * destY));", "+ \tCGRect rect = new CGRect();", "+ \trect.x = destX;", "+ \trect.y = destY;", "+ \trect.width = destWidth;", "+\trect.height = destHeight;", "+ \tif (simple) {", "+ \t\tOS.CGContextDrawImage(handle, rect, imageHandle);", "+ \t} else {", "+\t \tint width = OS.CGImageGetWidth(imageHandle);", "+\t\tint height = OS.CGImageGetHeight(imageHandle);", "+\t\tint bpc = OS.CGImageGetBitsPerComponent(imageHandle);", "+\t\tint bpp = OS.CGImageGetBitsPerPixel(imageHandle);", "+\t\tint bpr = OS.CGImageGetBytesPerRow(imageHandle);", "+\t\tint colorspace = OS.CGImageGetColorSpace(imageHandle);", "+\t\tint alphaInfo = OS.CGImageGetAlphaInfo(imageHandle);", "+\t\tint data = srcImage.data + (srcY * bpr) + srcX * 4;", "+\t\tint provider = OS.CGDataProviderCreateWithData(0, data, srcHeight * bpr, 0);", "+\t\tif (provider == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tint subImage = OS.CGImageCreate(srcWidth, srcHeight, bpc, bpp, bpr, colorspace, alphaInfo, provider, null, false, 0);", "+\t\tOS.CGDataProviderRelease(provider);", "+\t\tif (subImage == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+ \t\tOS.CGContextDrawImage(handle, rect, subImage);", "+ \t\tOS.CGImageRelease(subImage);", "+ \t}", "+ \tOS.CGContextRestoreGState(handle);"]}], "num": 38431}
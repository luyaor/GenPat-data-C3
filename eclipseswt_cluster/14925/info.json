{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f6add9fd8fe43162058e1eb8d46cb87", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c41175bce7c9f27bd8fcec7e4048124", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "bd4d1f77f4b1ff6b81882d3d6af94d27dd6eef79", "commitAfterChange": "a29ead267e20209d48db539a375ce453914d2d9b", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  \tint accHitTest(int xLeft, int yTop, int pvarChild)", "signatureAfterChange": "  \tint accHitTest(int xLeft, int yTop, int pvarChild)", "diff": ["-\t\tif (childID == ACC.CHILDID_SELF) childID = COM.CHILDID_SELF;", "-\t\telse if (!(control instanceof Tree)) childID++; // Tree item childIDs are pointers (not 1-based indices)", "-\t\tCOM.MoveMemory(pvarChild + 8, new int[] { childID }, 4);", "+\t\tCOM.MoveMemory(pvarChild + 8, new int[] { childIDToOs(childID) }, 4);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90ee590bf7aef46df2326120d6521a65", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "bd4d1f77f4b1ff6b81882d3d6af94d27dd6eef79", "commitAfterChange": "a29ead267e20209d48db539a375ce453914d2d9b", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \t \tint get_accState(int varChild_vt, int varChild_reserved1, int varChild_lVal, int varChild_reserved2, int pvarState)", "signatureAfterChange": " \t \tint get_accState(int varChild_vt, int varChild_reserved1, int varChild_lVal, int varChild_reserved2, int pvarState)", "diff": ["+\t\tevent.childID = osToChildID(varChild_lVal);", "-\t\tif (varChild_lVal == COM.CHILDID_SELF) {", "-\t\t\tevent.childID = ACC.CHILDID_SELF;", "-\t\t} else {", "+\t\t// TEMPORARY CODE", "+\t\t/* Currently our checkbox table and tree are emulated using state mask", "+\t\t * images, so we need to determine if the item state is 'checked'. */", "+\t\tif (varChild_lVal != COM.CHILDID_SELF) {", "-\t\t\t\t/* Tree item childIDs are pointers (not 1-based indices). */", "-\t\t\t\tevent.childID = varChild_lVal;", "-", "-\t\t\t\t// TEMPORARY CODE", "-\t\t\t\t/* Currently our checkbox tree is emulated using state mask images,", "-\t\t\t\t * so we need to determine if the item is 'checked' here. */", "-\t\t\t\tevent.childID = varChild_lVal - 1;", "-\t\t\t\t", "-\t\t\t\t// TEMPORARY CODE", "-\t\t\t\t/* Currently our checkbox table is emulated using state mask images,", "-\t\t\t\t * so we need to determine if the item is 'checked' here. */", "-\t\t\t} else {", "-\t\t\t\tevent.childID = varChild_lVal - 1;"]}], "num": 14925}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c20e2e2066513a4346153e21ef04568", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8959b2e2f0ab00a5119fce3b34e15323", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "02c7e8fbdb10b222f8d1e2635055c3a06dfd6bce", "commitAfterChange": "7ebed4b25c577490446ba68dfccd18feab0eef8f", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "diff": ["-\t\t", "-\t\t/* Get the damage */", "-\t\tint [] lpRgnData = null;", "-\t\tboolean isComplex = false;", "-\t\tboolean exposeRegion = false;", "-\t\tint rgn = 0;", "-\t\tif ((style & (SWT.NO_MERGE_PAINTS | SWT.DOUBLE_BUFFERED)) != 0) {", "-\t\t\trgn = OS.CreateRectRgn (0, 0, 0, 0);", "-\t\t\tisComplex = OS.GetUpdateRgn (handle, rgn, false) == OS.COMPLEXREGION;", "-\t\t}", "-", "-\t\tif ((style & SWT.NO_MERGE_PAINTS) != 0) {", "-\t\t\tif (isComplex) {", "-\t\t\t\tint nBytes = OS.GetRegionData (rgn, 0, null);", "-\t\t\t\tlpRgnData = new int [nBytes / 4];", "-\t\t\t\texposeRegion = OS.GetRegionData (rgn, nBytes, lpRgnData) != 0;", "-\t\t\t}", "-\t\t}", "-\t", "+", "+\t\t/* Get the system region for the paint HDC */", "+\t\tint sysRgn = 0;", "+\t\tif ((style & (SWT.NO_MERGE_PAINTS | SWT.DOUBLE_BUFFERED)) != 0) {", "+\t\t\tsysRgn = OS.CreateRectRgn (0, 0, 0, 0);", "+\t\t\tif (OS.GetRandomRgn (gc.handle, sysRgn, OS.SYSRGN) == 1) {", "+\t\t\t\tif (OS.IsWinNT) {", "+\t\t\t\t\tPOINT pt = new POINT();", "+\t\t\t\t\tOS.MapWindowPoints (0, handle, pt, 1);", "+\t\t\t\t\tOS.OffsetRgn (sysRgn, pt.x, pt.y);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "-\t\t\t\tOS.OffsetRgn (rgn, -ps.left, -ps.top);", "-\t\t\t\tOS.SelectClipRgn (gc.handle, rgn);", "-\t\t\t\tOS.SetMetaRgn (gc.handle);", "+\t\t\t\tOS.OffsetRgn (sysRgn, -ps.left, -ps.top);", "+\t\t\t\tOS.SelectClipRgn (gc.handle, sysRgn);", "+\t\t\t\tOS.OffsetRgn (sysRgn, ps.left, ps.top);", "+\t\t\t\tOS.SetMetaRgn (gc.handle);\t", "-\t\t\tevent.gc = gc;", "-\t\t\tif (isComplex && exposeRegion) {", "-\t\t\t\tRECT rect = new RECT ();", "+\t\t\tevent.gc = gc;\t\t\t", "+\t\t\tRECT rect = null;", "+\t\t\tif ((style & SWT.NO_MERGE_PAINTS) != 0 && OS.GetRgnBox (sysRgn, rect = new RECT ()) == OS.COMPLEXREGION) {", "+\t\t\t\tint nBytes = OS.GetRegionData (sysRgn, 0, null);", "+\t\t\t\tint [] lpRgnData = new int [nBytes / 4];", "+\t\t\t\tOS.GetRegionData (sysRgn, nBytes, lpRgnData);", "-\t\t\t\t\tOS.SetRect (rect,", "-\t\t\t\t\t\tlpRgnData [8 + (i << 2)],", "-\t\t\t\t\t\tlpRgnData [8 + (i << 2) + 1],", "-\t\t\t\t\t\tlpRgnData [8 + (i << 2) + 2],", "-\t\t\t\t\t\tlpRgnData [8 + (i << 2) + 3]);", "+\t\t\t\t\tint offset = 8 + (i << 2);", "+\t\t\t\t\tOS.SetRect (rect, lpRgnData [offset], lpRgnData [offset + 1], lpRgnData [offset + 2], lpRgnData [offset + 3]);", "-\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\tif (rect == null) rect = new RECT ();", "-\t\t\t\t\tpaintGC.drawImage(image, ps.left, ps.top);", "+\t\t\t\t\tpaintGC.drawImage (image, ps.left, ps.top);", "-\t\t\t\timage.dispose();", "+\t\t\t\timage.dispose ();", "-\t\tif (rgn != 0) OS.DeleteObject (rgn);", "+\t\tif (sysRgn != 0) OS.DeleteObject (sysRgn);", "-\tif (!OS.IsWinCE) { ", "+\tif (!OS.IsWinCE && !isDisposed ()) { "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b7557b7f0a023bf109e42f4d00380ca", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "dfd4650fd75100a5a002cab81ff3277b16862845", "commitAfterChange": "d01fac9d213e0fa304edfed85d0f0844e9d59792", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "  void initGdip(boolean draw, boolean fill)", "signatureAfterChange": "  void initGdip()", "diff": ["-void initGdip(boolean draw, boolean fill) {", "+void initGdip() {", "-\tif (gdipGraphics == 0) {", "-\t\t/*", "-\t\t* Feature in GDI+. The GDI+ clipping set with Graphics->SetClip()", "-\t\t* is always intersected with the GDI clipping at the time the", "-\t\t* GDI+ graphics is created.  This means that the clipping ", "-\t\t* cannot be reset.  The fix is to clear the clipping before", "-\t\t* the GDI+ graphics is created and reset it afterwards.", "-\t\t*/", "-\t\tint hRgn = OS.CreateRectRgn(0, 0, 0, 0);", "-\t\tint result = OS.GetClipRgn(handle, hRgn);", "-\t\tif (!OS.IsWinCE) {", "-\t\t\tPOINT pt = new POINT ();", "-\t\t\tOS.GetWindowOrgEx (handle, pt);", "-\t\t\tOS.OffsetRgn (hRgn, pt.x, pt.y);", "-\t\t}", "-\t\tOS.SelectClipRgn(handle, 0);", "-\t\tgdipGraphics = data.gdipGraphics = Gdip.Graphics_new(handle);", "-\t\tif (gdipGraphics == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tGdip.Graphics_SetPageUnit(gdipGraphics, Gdip.UnitPixel);", "-\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf);", "-\t\tif (result == 1) setClipping(hRgn);", "-\t\tOS.DeleteObject(hRgn);", "+\tif (gdipGraphics != 0) return ;", "+\t/*", "+\t* Feature in GDI+. The GDI+ clipping set with Graphics->SetClip()", "+\t* is always intersected with the GDI clipping at the time the", "+\t* GDI+ graphics is created.  This means that the clipping ", "+\t* cannot be reset.  The fix is to clear the clipping before", "+\t* the GDI+ graphics is created and reset it afterwards.", "+\t*/", "+\tint hRgn = OS.CreateRectRgn(0, 0, 0, 0);", "+\tint result = OS.GetClipRgn(handle, hRgn);", "+\tif (!OS.IsWinCE) {", "+\t\tPOINT pt = new POINT ();", "+\t\tOS.GetWindowOrgEx (handle, pt);", "+\t\tOS.OffsetRgn (hRgn, pt.x, pt.y);", "-\tif (draw && data.gdipPen == 0) data.gdipPen = createGdipPen();", "-\tif (fill && data.gdipBrush == 0) data.gdipBrush = createGdipBrush();", "+\tOS.SelectClipRgn(handle, 0);", "+\tgdipGraphics = data.gdipGraphics = Gdip.Graphics_new(handle);", "+\tif (gdipGraphics == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tGdip.Graphics_SetPageUnit(gdipGraphics, Gdip.UnitPixel);", "+\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf);", "+\tif (result == 1) setClipping(hRgn);", "+\tOS.DeleteObject(hRgn);\t\t", "+\tdata.state = 0;", "+\tif (data.hPen != 0) {", "+\t\tOS.SelectObject(handle, OS.GetStockObject(OS.NULL_PEN));", "+\t\tOS.DeleteObject(data.hPen);", "+\t\tdata.hPen = 0;", "+\t}", "+\tif (data.hBrush != 0) {", "+\t\tOS.SelectObject(handle, OS.GetStockObject(OS.NULL_BRUSH));", "+\t\tOS.DeleteObject(data.hBrush);", "+\t\tdata.hBrush = 0;", "+\t}"]}], "num": 27624}
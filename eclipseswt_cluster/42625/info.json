{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f930932ed48f0f15740b5db7b31ee7a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "502288afdbd691e3d1bf7c889b1ac651", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "28611873c812080da03092456ee7cc4c93ef80a3", "commitAfterChange": "e657e76e5131e900496ccd41899277450879646c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " public boolean open ()", "signatureAfterChange": " public boolean open ()", "diff": ["-\tboolean cancelled = false;", "+\tcancelled = false;", "-\tEvent event = new Event ();", "-\tMSG msg = new MSG ();", "-\tboolean isMirrored = parent != null && (parent.style & SWT.MIRRORED) != 0;", "-\t\tfinal int oldProc = OS.GetWindowLong (hwndTransparent, OS.GWL_WNDPROC);", "-\t\tObject windowProc = new Object () {", "-\t\t\tpublic int windowProc (int hwnd, int msg, int wParam, int lParam) {", "-\t\t\t\tswitch (msg) {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* We typically do not want to answer that the transparent window is", "-\t\t\t\t\t* transparent to hits since doing so negates the effect of having it", "-\t\t\t\t\t* to grab events.  However, clients of the tracker should not be aware", "-\t\t\t\t\t* of this transparent window.  Therefore if there is a hit query", "-\t\t\t\t\t* performed as a result of client code then answer that the transparent", "-\t\t\t\t\t* window is transparent to hits so that its existence will not impact", "-\t\t\t\t\t* the client.", "-\t\t\t\t\t*/", "-\t\t\t\t\tcase OS.WM_NCHITTEST:", "-\t\t\t\t\t\tif (inEvent) return OS.HTTRANSPARENT;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.WM_SETCURSOR:", "-\t\t\t\t\t\tif (clientCursor != 0) {", "-\t\t\t\t\t\t\tOS.SetCursor (clientCursor);", "-\t\t\t\t\t\t\treturn 1;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (resizeCursor != 0) {", "-\t\t\t\t\t\t\tOS.SetCursor (resizeCursor);", "-\t\t\t\t\t\t\treturn 1;", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn OS.CallWindowProc (oldProc, hwnd, msg, wParam, lParam);", "-\t\t\t}", "-\t\t};", "-\t\tnewProc = new Callback (windowProc, \"windowProc\", 4); //$NON-NLS-1$", "+\t\toldProc = OS.GetWindowLong (hwndTransparent, OS.GWL_WNDPROC);", "+\t\tnewProc = new Callback (this, \"transparentProc\", 4); //$NON-NLS-1$", "-\t", "-\tint oldX = cursorPos.x, oldY = cursorPos.y;", "-\t/*", "-\t* Tracker behaves like a Dialog with its own OS event loop.", "-\t*/", "+\toldX = cursorPos.x;", "+\toldY = cursorPos.y;", "+", "+\t/* Tracker behaves like a Dialog with its own OS event loop. */", "+\tMSG msg = new MSG ();", "+\t\tOS.TranslateMessage (msg);", "-\t\t\t\tint newPos = OS.GetMessagePos ();", "-\t\t\t\tint newX = (short) (newPos & 0xFFFF);", "-\t\t\t\tint newY = (short) (newPos >> 16);\t", "-\t\t\t\tif (newX != oldX || newY != oldY) {", "-\t\t\t\t\tRectangle [] oldRectangles = rectangles;", "-\t\t\t\t\tboolean oldStippled = stippled;", "-\t\t\t\t\tRectangle [] rectsToErase = new Rectangle [rectangles.length];", "-\t\t\t\t\tfor (int i = 0; i < rectangles.length; i++) {", "-\t\t\t\t\t\tRectangle current = rectangles [i];", "-\t\t\t\t\t\trectsToErase [i] = new Rectangle (current.x, current.y, current.width, current.height);", "-\t\t\t\t\t}", "-\t\t\t\t\tevent.x = newX;", "-\t\t\t\t\tevent.y = newY;", "-\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {", "-\t\t\t\t\t\tif (isMirrored) {", "-\t\t\t\t\t\t   resizeRectangles (oldX - newX, newY - oldY);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t   resizeRectangles (newX - oldX, newY - oldY);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tinEvent = true;", "-\t\t\t\t\t\tsendEvent (SWT.Resize, event);", "-\t\t\t\t\t\tinEvent = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* It is possible (but unlikely), that application", "-\t\t\t\t\t\t* code could have disposed the widget in the resize", "-\t\t\t\t\t\t* event.  If this happens, return false to indicate", "-\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t * changed the rectangles in the resize event.  If this", "-\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\telse {", "-\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\tdrawRectangles (rectsToErase, oldStippled);", "-\t\t\t\t\t\t\tdrawRectangles (rectangles, stippled);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcursorPos = adjustResizeCursor ();", "-\t\t\t\t\t\tnewX = cursorPos.x;  newY = cursorPos.y;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tif (isMirrored) {", "-\t\t\t\t\t\t\tmoveRectangles (oldX - newX, newY - oldY); ", "-\t\t\t\t\t\t} else { ", "-\t\t\t\t\t\t\tmoveRectangles (newX - oldX, newY - oldY);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tinEvent = true;", "-\t\t\t\t\t\tsendEvent (SWT.Move, event);", "-\t\t\t\t\t\tinEvent = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* It is possible (but unlikely), that application", "-\t\t\t\t\t\t* code could have disposed the widget in the move", "-\t\t\t\t\t\t* event.  If this happens, return false to indicate", "-\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t * changed the rectangles in the move event.  If this", "-\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\tdrawRectangles (rectsToErase, oldStippled);", "-\t\t\t\t\t\t\tdrawRectangles (rectangles, stippled);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\toldX = newX;  oldY = newY;", "-\t\t\t\t}", "-\t\t\t\ttracking = msg.message != OS.WM_LBUTTONUP;", "+\t\t\t\twmMouse (message, msg.wParam, msg.lParam);", "-\t\t\tcase OS.WM_SYSKEYDOWN:", "-\t\t\t\tcancelled = true;\t\t\t", "-\t\t\t\ttracking = false;", "-\t\t\t\tbreak;", "-\t\t\tcase OS.WM_KEYDOWN:", "-\t\t\t\tint stepSize = OS.GetKeyState (OS.VK_CONTROL) < 0 ? STEPSIZE_SMALL : STEPSIZE_LARGE;", "-\t\t\t\tint xChange = 0, yChange = 0;", "-\t\t\t\tswitch (msg.wParam) {", "-\t\t\t\t\tcase OS.VK_ESCAPE:", "-\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\ttracking = false;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.VK_RETURN:", "-\t\t\t\t\t\ttracking = false;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.VK_LEFT:", "-\t\t\t\t\t\txChange = isMirrored ? stepSize : -stepSize;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.VK_RIGHT:", "-\t\t\t\t\t\txChange = isMirrored ? -stepSize : stepSize;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.VK_UP:", "-\t\t\t\t\t\tyChange = -stepSize;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.VK_DOWN:", "-\t\t\t\t\t\tyChange = stepSize;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tif (xChange != 0 || yChange != 0) {", "-\t\t\t\t\tRectangle [] oldRectangles = rectangles;", "-\t\t\t\t\tboolean oldStippled = stippled;", "-\t\t\t\t\tRectangle [] rectsToErase = new Rectangle [rectangles.length];", "-\t\t\t\t\tfor (int i = 0; i < rectangles.length; i++) {", "-\t\t\t\t\t\tRectangle current = rectangles [i];", "-\t\t\t\t\t\trectsToErase [i] = new Rectangle (current.x, current.y, current.width, current.height);", "-\t\t\t\t\t}", "-\t\t\t\t\tevent.x = oldX + xChange;", "-\t\t\t\t\tevent.y = oldY + yChange;", "-\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {", "-\t\t\t\t\t\tresizeRectangles (xChange, yChange);", "-\t\t\t\t\t\tinEvent = true;", "-\t\t\t\t\t\tsendEvent (SWT.Resize, event);", "-\t\t\t\t\t\tinEvent = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* It is possible (but unlikely) that application", "-\t\t\t\t\t\t* code could have disposed the widget in the resize", "-\t\t\t\t\t\t* event.  If this happens return false to indicate", "-\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t * changed the rectangles in the resize event.  If this", "-\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\tdrawRectangles (rectsToErase, oldStippled);", "-\t\t\t\t\t\t\tdrawRectangles (rectangles, stippled);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcursorPos = adjustResizeCursor ();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tmoveRectangles (xChange, yChange);", "-\t\t\t\t\t\tinEvent = true;", "-\t\t\t\t\t\tsendEvent (SWT.Move, event);", "-\t\t\t\t\t\tinEvent = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* It is possible (but unlikely) that application", "-\t\t\t\t\t\t* code could have disposed the widget in the move", "-\t\t\t\t\t\t* event.  If this happens return false to indicate", "-\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t * changed the rectangles in the move event.  If this", "-\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\tdrawRectangles (rectsToErase, oldStippled);", "-\t\t\t\t\t\t\tdrawRectangles (rectangles, stippled);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcursorPos = adjustMoveCursor ();", "-\t\t\t\t\t}", "-\t\t\t\t\toldX = cursorPos.x;  oldY = cursorPos.y;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\t\tcase OS.WM_IME_CHAR: wmIMEChar (msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\t\tcase OS.WM_CHAR: wmChar (msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\t\tcase OS.WM_KEYDOWN: wmKeyDown (msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\t\tcase OS.WM_KEYUP: wmKeyUp (msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\t\tcase OS.WM_SYSCHAR: wmSysChar (0, msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\t\tcase OS.WM_SYSKEYDOWN: wmSysKeyDown (msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\t\tcase OS.WM_SYSKEYUP: wmSysKeyUp (msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\toldProc = 0;", "+\t\tresizeCursor = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f09af6537e5a1cb89c418ae3ce39a3df", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "8687cd618665675e4d4eec2fb36e773a2eec96b3", "commitAfterChange": "dec417ccdc6a050dac541d5eb88bff5d26e71096", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 19, "signatureBeforeChange": " public boolean open ()", "signatureAfterChange": " public boolean open ()", "diff": ["-\tboolean cancelled = false;", "+\tcancelled = false;", "-\tint window = display.createOverlayWindow ();", "+\twindow = display.createOverlayWindow ();", "-\t", "-\tint oldX = cursorPos.x, oldY = cursorPos.y;", "-\t/*", "-\t* Tracker behaves like a Dialog with its own OS event loop.", "-\t*/", "-\tEvent event = new Event ();", "+\toldX = cursorPos.x;", "+\toldY = cursorPos.y;", "+", "+\t/* Tracker behaves like a Dialog with its own OS event loop. */", "-\t\tint eventClass = OS.GetEventClass (outEvent [0]);", "-\t\tint eventKind = OS.GetEventKind (outEvent [0]);", "-\t\tint newX = oldX, newY = oldY;\t", "+\t\tint event = outEvent [0];", "+\t\tint eventClass = OS.GetEventClass (event);", "+\t\tint eventKind = OS.GetEventKind (event);", "+\t\tint nextHandler = 0;", "-\t\t\tcase OS.kEventClassMouse: {", "+\t\t\tcase OS.kEventClassMouse:", "-\t\t\t\t\tcase OS.kEventMouseUp:", "-\t\t\t\t\tcase OS.kEventMouseMoved:", "-\t\t\t\t\tcase OS.kEventMouseDragged:", "-\t\t\t\t\t\tint sizeof = org.eclipse.swt.internal.carbon.Point.sizeof;", "-\t\t\t\t\t\torg.eclipse.swt.internal.carbon.Point where = new org.eclipse.swt.internal.carbon.Point ();", "-\t\t\t\t\t\tOS.GetEventParameter (outEvent [0], OS.kEventParamMouseLocation, OS.typeQDPoint, null, sizeof, null, where);", "-\t\t\t\t\t\tnewX = where.h;", "-\t\t\t\t\t\tnewY = where.v;\t", "-\t\t\t\t\t\tif (newX != oldX || newY != oldY) {", "-\t\t\t\t\t\t\tRectangle [] oldRectangles = rectangles;", "-\t\t\t\t\t\t\tRectangle [] rectsToErase = new Rectangle [rectangles.length];", "-\t\t\t\t\t\t\tfor (int i = 0; i < rectangles.length; i++) {", "-\t\t\t\t\t\t\t\tRectangle current = rectangles [i];", "-\t\t\t\t\t\t\t\trectsToErase [i] = new Rectangle (current.x, current.y, current.width, current.height);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tevent.x = newX;", "-\t\t\t\t\t\t\tevent.y = newY;", "-\t\t\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {", "-\t\t\t\t\t\t\t\tresizeRectangles (newX - oldX, newY - oldY);", "-\t\t\t\t\t\t\t\tinEvent = true;", "-\t\t\t\t\t\t\t\tsendEvent (SWT.Resize, event);", "-\t\t\t\t\t\t\t\tinEvent = false;", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t* It is possible (but unlikely), that application", "-\t\t\t\t\t\t\t\t* code could have disposed the widget in the move", "-\t\t\t\t\t\t\t\t* event.  If this happens, return false to indicate", "-\t\t\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t\t\t * changed the rectangles in the resize event.  If this", "-\t\t\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\telse {", "-\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\t\t\tdrawRectangles (window, rectsToErase, true);", "-\t\t\t\t\t\t\t\t\tdrawRectangles (window, rectangles, false);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcursorPos = adjustResizeCursor ();", "-\t\t\t\t\t\t\t\tnewX = cursorPos.x; newY = cursorPos.y;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tmoveRectangles (newX - oldX, newY - oldY);", "-\t\t\t\t\t\t\t\tinEvent = true;", "-\t\t\t\t\t\t\t\tsendEvent (SWT.Move, event);", "-\t\t\t\t\t\t\t\tinEvent = false;", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t* It is possible (but unlikely), that application", "-\t\t\t\t\t\t\t\t* code could have disposed the widget in the move", "-\t\t\t\t\t\t\t\t* event.  If this happens, return false to indicate", "-\t\t\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t\t\t * changed the rectangles in the move event.  If this", "-\t\t\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\t\t\tdrawRectangles (window, rectsToErase, true);", "-\t\t\t\t\t\t\t\t\tdrawRectangles (window, rectangles, false);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\toldX = newX;  oldY = newY;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\ttracking = eventKind != OS.kEventMouseUp;", "-\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OS.kEventMouseUp: kEventMouseUp (nextHandler, event, 0); break;", "+\t\t\t\t\tcase OS.kEventMouseMoved: kEventMouseMoved (nextHandler, event, 0); break;", "+\t\t\t\t\tcase OS.kEventMouseDragged: kEventMouseDragged (nextHandler, event, 0); break;", "-\t\t\t}", "-\t\t\tcase OS.kEventClassKeyboard: {", "+\t\t\tcase OS.kEventClassKeyboard:", "-\t\t\t\t\tcase OS.kEventRawKeyDown:", "-\t\t\t\t\tcase OS.kEventRawKeyModifiersChanged:", "-\t\t\t\t\tcase OS.kEventRawKeyRepeat: {", "-\t\t\t\t\t\tint [] keyCode = new int [1];", "-\t\t\t\t\t\tOS.GetEventParameter (outEvent [0], OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "-\t\t\t\t\t\tint [] modifiers = new int [1];", "-\t\t\t\t\t\tOS.GetEventParameter (outEvent [0], OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "-\t\t\t\t\t\tint stepSize = (modifiers [0] & OS.controlKey) != 0 ? STEPSIZE_SMALL : STEPSIZE_LARGE;", "-\t\t\t\t\t\tint xChange = 0, yChange = 0;", "-\t\t\t\t\t\tswitch (keyCode [0]) {", "-\t\t\t\t\t\t\tcase 53: /* Esc */", "-\t\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\t\ttracking = false;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase 36: /* Return */", "-\t\t\t\t\t\t\t\ttracking = false;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase 123: /* Left arrow */", "-\t\t\t\t\t\t\t\txChange = -stepSize;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase 124: /* Right arrow */", "-\t\t\t\t\t\t\t\txChange = stepSize;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase 126: /* Up arrow */", "-\t\t\t\t\t\t\t\tyChange = -stepSize;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase 125: /* Down arrow */", "-\t\t\t\t\t\t\t\tyChange = stepSize;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (xChange != 0 || yChange != 0) {", "-\t\t\t\t\t\t\tRectangle [] oldRectangles = rectangles;", "-\t\t\t\t\t\t\tRectangle [] rectsToErase = new Rectangle [rectangles.length];", "-\t\t\t\t\t\t\tfor (int i = 0; i < rectangles.length; i++) {", "-\t\t\t\t\t\t\t\tRectangle current = rectangles [i];", "-\t\t\t\t\t\t\t\trectsToErase [i] = new Rectangle (current.x, current.y, current.width, current.height);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tnewX = oldX + xChange;", "-\t\t\t\t\t\t\tnewY = oldY + yChange;", "-\t\t\t\t\t\t\tevent.x = newX;", "-\t\t\t\t\t\t\tevent.y = newY;", "-\t\t\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {", "-\t\t\t\t\t\t\t\tresizeRectangles (xChange, yChange);", "-\t\t\t\t\t\t\t\tinEvent = true;", "-\t\t\t\t\t\t\t\tsendEvent (SWT.Resize, event);", "-\t\t\t\t\t\t\t\tinEvent = false;", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t* It is possible (but unlikely) that application", "-\t\t\t\t\t\t\t\t* code could have disposed the widget in the move", "-\t\t\t\t\t\t\t\t* event.  If this happens return false to indicate", "-\t\t\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t\t\t * changed the rectangles in the resize event.  If this", "-\t\t\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\t\t\tdrawRectangles (window, rectsToErase, true);", "-\t\t\t\t\t\t\t\t\tdrawRectangles (window, rectangles, false);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcursorPos = adjustResizeCursor ();", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tmoveRectangles (xChange, yChange);", "-\t\t\t\t\t\t\t\tinEvent = true;", "-\t\t\t\t\t\t\t\tsendEvent (SWT.Move, event);", "-\t\t\t\t\t\t\t\tinEvent = false;", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t* It is possible (but unlikely) that application", "-\t\t\t\t\t\t\t\t* code could have disposed the widget in the move", "-\t\t\t\t\t\t\t\t* event.  If this happens return false to indicate", "-\t\t\t\t\t\t\t\t* that the tracking has failed.", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\tif (isDisposed ()) {", "-\t\t\t\t\t\t\t\t\tcancelled = true;", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t * It is possible that application code could have", "-\t\t\t\t\t\t\t\t * changed the rectangles in the move event.  If this", "-\t\t\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "-\t\t\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\t\tif (rectangles != oldRectangles) {", "-\t\t\t\t\t\t\t\t\tint length = rectangles.length;", "-\t\t\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "-\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "-\t\t\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (draw) {", "-\t\t\t\t\t\t\t\t\tdrawRectangles (window, rectsToErase, true);", "-\t\t\t\t\t\t\t\t\tdrawRectangles (window, rectangles, false);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcursorPos = adjustMoveCursor ();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\toldX = cursorPos.x;  oldY = cursorPos.y;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "+\t\t\t\t\tcase OS.kEventRawKeyDown: kEventRawKeyDown (nextHandler, event, 0); break;", "+\t\t\t\t\tcase OS.kEventRawKeyModifiersChanged: kEventRawKeyModifiersChanged (nextHandler, event, 0); break;", "+\t\t\t\t\tcase OS.kEventRawKeyRepeat: kEventRawKeyRepeat (nextHandler, event, 0); break;", "+\t\t\t\t\tcase OS.kEventRawKeyUp: kEventRawKeyUp (nextHandler, event, 0); break;", "-\t\t\t}", "+\t\t\t\tbreak;", "-\t\tif (dispatch) OS.SendEventToEventTarget (outEvent [0], OS.GetEventDispatcherTarget ());", "-\t\tOS.ReleaseEvent (outEvent [0]);", "+\t\tif (dispatch) OS.SendEventToEventTarget (event, OS.GetEventDispatcherTarget ());", "+\t\tOS.ReleaseEvent (event);", "+\twindow = 0;"]}], "num": 42625}
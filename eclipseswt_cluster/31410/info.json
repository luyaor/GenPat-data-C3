{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "768355625d3492dd56cf94a9958864cf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db687bf43dfd9adf69344a02a231c923", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "0f06225365bed5a5d852bb4c4fff922bf5df9afd", "commitAfterChange": "9d61c21cc042d47df7b8419c5fa425957e74e3b2", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " void onKeyDown (Event event)", "signatureAfterChange": " void onKeyDown (Event event)", "diff": ["-\t\t\tbreak;", "+\t\t\treturn;", "-\t\t\tbreak;", "+\t\t\treturn;", "-\t\t\tbreak;", "+\t\t\treturn;", "-\t\t\tbreak;\t\t\t", "+\t\t\treturn;", "-\t\t\tbreak;\t\t", "+\t\t\treturn;", "-\t\t\tbreak;", "+\t\t\treturn;", "-\t\t\tbreak;", "+\t\t\treturn;", "-\t\t\tbreak;", "+\t\t\treturn;", "-\tif (event.character == ' ') onSpace ();", "-\tif (event.character == SWT.CR) onCR ();", "+\tif (event.character == ' ') {", "+\t\tonSpace ();", "+\t\treturn;", "+\t}", "+\tif (event.character == SWT.CR) {", "+\t\tonCR ();", "+\t\treturn;", "+\t}", "+\tif ((event.stateMask & SWT.CTRL) != 0) return;", "+\t", "+\tint initialIndex = focusItem.availableIndex;", "+\tchar character = Character.toLowerCase (event.character);", "+\t/* check available items from current focus item to bottom */", "+\tfor (int i = initialIndex + 1; i < availableItems.length; i++) {", "+\t\tTreeItem item = availableItems [i];", "+\t\tString text = item.getText ();", "+\t\tif (text.length() > 0) {", "+\t\t\tif (Character.toLowerCase (text.charAt (0)) == character) {", "+\t\t\t\tselectItem (item, false);", "+\t\t\t\tsetFocusItem (item, true);", "+\t\t\t\tredrawItem (i, true);", "+\t\t\t\tshowItem (item);", "+\t\t\t\tEvent newEvent = new Event ();", "+\t\t\t\tnewEvent.item = this;", "+\t\t\t\tsendEvent (SWT.Selection, newEvent);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "+\t}", "+\t/* check available items from top to current focus item */", "+\tfor (int i = 0; i < initialIndex; i++) {", "+\t\tTreeItem item = availableItems [i];", "+\t\tString text = item.getText ();", "+\t\tif (text.length() > 0) {", "+\t\t\tif (Character.toLowerCase (text.charAt (0)) == character) {", "+\t\t\t\tselectItem (item, false);", "+\t\t\t\tsetFocusItem (item, true);", "+\t\t\t\tredrawItem (i, true);", "+\t\t\t\tshowItem (item);", "+\t\t\t\tEvent newEvent = new Event ();", "+\t\t\t\tnewEvent.item = this;", "+\t\t\t\tsendEvent (SWT.Selection, newEvent);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9af342460cea059ef3869addfd6be2a0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "0cb16698d77456121eddadf94aad89326dddfa90", "commitAfterChange": "400a41972553b6a4188a913a649f045d7101753f", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": " public boolean sleep ()", "signatureAfterChange": " public boolean sleep ()", "diff": ["-\t//TODO need to sleep waiting for the next event", "+\tif (getMessageCount () != 0) return true;", "+\tif (fds == 0) {", "+\t\tallocated_nfds = 2;", "+\t\tfds = OS.g_malloc (OS.GPollFD_sizeof () * allocated_nfds);", "+\t}", "+\tmax_priority [0] = timeout [0] = 0;", "+\tint /*long*/ context = OS.g_main_context_default ();", "+\tboolean result = false;", "-\t\tif (getMessageCount () != 0) break;", "-\t\tif (OS.gtk_events_pending () != 0) break;", "-\t\ttry {", "-\t\t\tsynchronized (OS_LOCK) {", "-\t\t\t\tOS_LOCK.wait (50);", "+\t\tif (OS.g_main_context_acquire (context)) {", "+\t\t\tresult = OS.g_main_context_prepare (context, max_priority);", "+\t\t\tint nfds;", "+\t\t\twhile ((nfds = OS.g_main_context_query (context, max_priority [0], timeout, fds, allocated_nfds)) > allocated_nfds) {", "+\t\t\t\tOS.g_free (fds);", "+\t\t\t\tallocated_nfds = nfds;", "+\t\t\t\tfds = OS.g_malloc (OS.GPollFD_sizeof() * allocated_nfds);", "-\t\t} catch (Exception e) {", "-\t\t\treturn false;", "+\t\t\tint /*long*/ poll = OS.g_main_context_get_poll_func (context);", "+\t\t\tif (poll != 0) {", "+\t\t\t\tif (nfds > 0 || timeout [0] != 0) {", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Bug in GTK. For some reason, g_main_context_wakeup() may ", "+\t\t\t\t\t* fail to wake up the UI thread from the polling function.", "+\t\t\t\t\t* The fix is to sleep for a maximum of 50 milliseconds.", "+\t\t\t\t\t*/", "+\t\t\t\t\tif (timeout [0] < 0) timeout [0] = 50;", "+\t\t\t\t\t", "+\t\t\t\t\t/* Exit the OS lock to allow other threads to enter GTK */", "+\t\t\t\t\tint count = Callback.getEntryCount ();", "+\t\t\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\t\t\tsynchronized (OS_LOCK) {", "+\t\t\t\t\t\t\tOS.MonitorExit (OS_LOCK);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\twake = false;", "+\t\t\t\t\t\tOS.Call (poll, fds, nfds, timeout [0]);", "+\t\t\t\t\t} finally {", "+\t\t\t\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\t\t\t\tsynchronized (OS_LOCK) {", "+\t\t\t\t\t\t\t\tOS.MonitorEnter (OS_LOCK);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.g_main_context_check (context, max_priority [0], fds, nfds);", "+\t\t\tOS.g_main_context_release (context);", "-\t} while (!wake);", "+\t} while (!result && getMessageCount () == 0 && !wake);"]}], "num": 31410}
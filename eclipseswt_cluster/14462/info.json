{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26a845fc29e0e65dc0cd91056c79a7a6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97dd2685c2454445d9746852ace7975d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "0ef9617c1012a47a6d1ff1554f6abcb04cfa36ad", "commitAfterChange": "26cde76ce3c88c1f3b47c43e3bb62261f679e704", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public DropTarget(Control control, int style)", "signatureAfterChange": " public DropTarget(Control control, int style)", "diff": ["-\tif (control.getData(DROPTARGETID) != null)", "+\tif (DragTrackingHandler == null || DragTrackingHandler == null) {", "+\t}", "+\tif (control.getData(DROPTARGETID) != null) {", "+\t\tDND.error(DND.ERROR_CANNOT_INIT_DROP);", "+\t}", "-\t\t\tif (time >= dragOverStart) {", "-\t\t\t\t", "+\t\t\tif (time < dragOverStart) {", "+\t\t\t\tdelay = (int)(dragOverStart - time);", "+\t\t\t} else {\t", "-\t\t\t\t", "+\t\t\t\t//pass a copy of data types in to listeners in case application modifies it", "+\t\t\t\tTransferData[] dataTypes = new TransferData[allowedTypes.length];", "+\t\t\t\tSystem.arraycopy(allowedTypes, 0, dataTypes, 0, dataTypes.length);", "+\t", "-\t\t\t\tevent.widget = DropTarget.this.control;", "-\t\t\t\tevent.time = (int)time;", "+\t\t\t\tevent.widget = dragOverEvent.widget;", "+\t\t\t\tevent.time = (int)time;", "-\t\t\t\tevent.dataTypes  = allowedTypes;", "-\t\t\t\tevent.dataType  = selectedDataType;", "-\t\t\t\tevent.operations = allowedOperations;", "+\t\t\t\tevent.dataTypes = dataTypes;", "+\t\t\t\tevent.dataType = selectedDataType;", "+\t\t\t\tevent.operations = dragOverEvent.operations;", "-\t\t\t\tnotifyListeners(DND.DragOver, event);", "+\t\t\t\t", "+\t\t\t\ttry {", "+\t\t\t\t\tnotifyListeners(DND.DragOver, event);", "+\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\tevent.dataType = null;", "+\t\t\t\t\tevent.detail  = DND.DROP_NONE;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t", "-\t\t\t", "+", "-\t\t\t} else {", "-\t\t\t\tdelay = (int)(dragOverStart - time);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a880a6de694b6e499eaeb0e79e8e4b7c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "4b10f2a3a24e7037b13a6b21d0386bf976be739d", "commitAfterChange": "616f5a4d963ffa9e332b664b81207bb1f17d8c21", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t public DropTarget(Control control, int style)", "signatureAfterChange": "\t public DropTarget(Control control, int style)", "diff": ["-\tbyte[] buffer = Converter.wcsToMbcs(null, \"drag_motion\", true);", "-\tOS.g_signal_connect(control.handle, buffer, DragMotion.getAddress(), 0);", "-\tbuffer = Converter.wcsToMbcs(null, \"drag_leave\", true);", "-\tOS.g_signal_connect(control.handle, buffer, DragLeave.getAddress(), 0);", "-\tbuffer = Converter.wcsToMbcs(null, \"drag_data_received\", true);", "-\tOS.g_signal_connect(control.handle, buffer, DragDataReceived.getAddress(), 0);", "-\tbuffer = Converter.wcsToMbcs(null, \"drag_drop\", true);", "-\tOS.g_signal_connect(control.handle, buffer, DragDrop.getAddress(), 0);", "+\tbyte[] buffer = Converter.wcsToMbcs(null, \"drag_motion\", true); //$NON-NLS-1$", "+\tOS.g_signal_connect(control.handle, buffer, Drag_Motion.getAddress(), 0);", "+\tbuffer = Converter.wcsToMbcs(null, \"drag_leave\", true); //$NON-NLS-1$", "+\tOS.g_signal_connect(control.handle, buffer, Drag_Leave.getAddress(), 0);", "+\tbuffer = Converter.wcsToMbcs(null, \"drag_data_received\", true); //$NON-NLS-1$", "+\tOS.g_signal_connect(control.handle, buffer, Drag_Data_Received.getAddress(), 0);", "+\tbuffer = Converter.wcsToMbcs(null, \"drag_drop\", true); //$NON-NLS-1$", "+\tOS.g_signal_connect(control.handle, buffer, Drag_Drop.getAddress(), 0);", "-\t\t\tif (time >= dragOverStart) {", "-\t\t\t\tif (selectedDataType == null) {", "-\t\t\t\t\tselectedDataType = dragOverEvent.dataTypes[0];", "-\t\t\t\t}", "+\t\t\tif (time < dragOverStart) {", "+\t\t\t\tdelay = (int)(dragOverStart - time);", "+\t\t\t} else {\t", "+\t\t\t\tint allowedOperations = dragOverEvent.operations;", "+\t\t\t\tTransferData[] allowedTypes = dragOverEvent.dataTypes;", "+\t\t\t\t//pass a copy of data types in to listeners in case application modifies it", "+\t\t\t\tTransferData[] dataTypes = new TransferData[allowedTypes.length];", "+\t\t\t\tSystem.arraycopy(allowedTypes, 0, dataTypes, 0, dataTypes.length);", "+\t", "-\t\t\t\tevent.widget = DropTarget.this.control;", "-\t\t\t\tevent.time = (int)time;", "+\t\t\t\tevent.widget = dragOverEvent.widget;", "-\t\t\t\tevent.dataTypes  = dragOverEvent.dataTypes;", "+\t\t\t\tevent.time = (int)time;", "-\t\t\t\tint allowedOperations = dragOverEvent.operations;", "-\t\t\t\tTransferData[] allowedTypes = event.dataTypes;", "-\t\t\t\tevent.operations = allowedOperations;", "-\t\t\t\tevent.dataType  = selectedDataType;", "+\t\t\t\tevent.dataTypes = dataTypes;", "+\t\t\t\tevent.dataType = selectedDataType;", "+\t\t\t\tevent.operations = dragOverEvent.operations;", "-\t\t\t\tnotifyListeners(DND.DragOver, event);", "+\t\t\t\t", "+\t\t\t\ttry {", "+\t\t\t\t\tnotifyListeners(DND.DragOver, event);", "+\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\tevent.dataType = null;", "+\t\t\t\t\tevent.detail  = DND.DROP_NONE;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t", "-\t\t\t", "+", "-\t\t\t} else {", "-\t\t\t\tdelay = (int)(dragOverStart - time);"]}], "num": 14462}
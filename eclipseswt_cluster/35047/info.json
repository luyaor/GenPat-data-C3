{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9acb7e49233536e3ceee643a678676d8", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28c4dd1cafe7f4cab5636050c9fe775b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "4aeb00556854120b6e09c8751fbd552909556203", "commitAfterChange": "f370a24625fbead82ce8442a00636cac44a2c36a", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public int getCharWidth(char ch)", "signatureAfterChange": " public int getCharWidth(char ch)", "diff": ["-\t\t\t\t\tOS.memmove(charStruct, fontStruct.per_char + ((val - fontStruct.min_char_or_byte2) * XCharStruct.sizeof), XCharStruct.sizeof);", "-\t\t\t\t\tif (charStruct.width != 0) {", "+\t\t\t\t\tint charWidth = 0;", "+\t\t\t\t\tint lBearing = 0;", "+\t\t\t\t\tint rBearing = 0;", "+\t\t\t\t\tint perCharPtr = fontStruct.per_char;\t", "+\t\t\t\t\tif (perCharPtr == 0) {", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t * If perCharPtr is 0 then all glyphs in the font have", "+\t\t\t\t\t\t * the same width and left/right bearings as the font.", "+\t\t\t\t\t\t */", "+\t\t\t\t\t\tcharWidth = fontStruct.max_bounds_width;", "+\t\t\t\t\t\tlBearing = fontStruct.min_bounds_lbearing;", "+\t\t\t\t\t\trBearing = fontStruct.max_bounds_rbearing;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tOS.memmove(charStruct, perCharPtr + ((val - fontStruct.min_char_or_byte2) * XCharStruct.sizeof), XCharStruct.sizeof);", "+\t\t\t\t\t\tcharWidth = charStruct.width;", "+\t\t\t\t\t\tlBearing = charStruct.lbearing;", "+\t\t\t\t\t\trBearing = charStruct.rbearing;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (charWidth != 0) {", "-\t\t\t\t\t\treturn charStruct.rbearing - charStruct.lbearing;", "+\t\t\t\t\t\treturn rBearing - lBearing;", "-\t\t\t\t\tint offset = row * charsPerRow + col;", "-\t\t\t\t\tOS.memmove(charStruct, fontStruct.per_char + offset * XCharStruct.sizeof, XCharStruct.sizeof);", "-\t\t\t\t\tif (charStruct.width != 0) {", "+\t\t\t\t\tint charWidth = 0;", "+\t\t\t\t\tint lBearing = 0;", "+\t\t\t\t\tint rBearing = 0;", "+\t\t\t\t\tint perCharPtr = fontStruct.per_char;\t", "+\t\t\t\t\tif (perCharPtr == 0) {", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t * If perCharPtr is 0 then all glyphs in the font have", "+\t\t\t\t\t\t * the same width and left/right bearings as the font.", "+\t\t\t\t\t\t */", "+\t\t\t\t\t\tcharWidth = fontStruct.max_bounds_width;", "+\t\t\t\t\t\tlBearing = fontStruct.min_bounds_lbearing;", "+\t\t\t\t\t\trBearing = fontStruct.max_bounds_rbearing;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint offset = row * charsPerRow + col;", "+\t\t\t\t\t\tOS.memmove(charStruct, perCharPtr + offset * XCharStruct.sizeof, XCharStruct.sizeof);", "+\t\t\t\t\t\tcharWidth = charStruct.width;", "+\t\t\t\t\t\tlBearing = charStruct.lbearing;", "+\t\t\t\t\t\trBearing = charStruct.rbearing;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (charWidth != 0) {", "-\t\t\t\t\t\treturn charStruct.rbearing - charStruct.lbearing;", "+\t\t\t\t\t\treturn rBearing - lBearing;", "-\t\t\t\t\t\tOS.memmove(charStruct, fontStruct.per_char + (val - fontStruct.min_char_or_byte2 * XCharStruct.sizeof), XCharStruct.sizeof);", "-\t\t\t\t\t\tif (charStruct.width != 0) {", "+\t\t\t\t\t\tint charWidth = 0;", "+\t\t\t\t\t\tint lBearing = 0;", "+\t\t\t\t\t\tint rBearing = 0;", "+\t\t\t\t\t\tint perCharPtr = fontStruct.per_char;\t", "+\t\t\t\t\t\tif (perCharPtr == 0) {", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t * If perCharPtr is 0 then all glyphs in the font have", "+\t\t\t\t\t\t\t * the same width and left/right bearings as the font.", "+\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\tcharWidth = fontStruct.max_bounds_width;", "+\t\t\t\t\t\t\tlBearing = fontStruct.min_bounds_lbearing;", "+\t\t\t\t\t\t\trBearing = fontStruct.max_bounds_rbearing;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tOS.memmove(charStruct, perCharPtr + (val - fontStruct.min_char_or_byte2 * XCharStruct.sizeof), XCharStruct.sizeof);", "+\t\t\t\t\t\t\tcharWidth = charStruct.width;", "+\t\t\t\t\t\t\tlBearing = charStruct.lbearing;", "+\t\t\t\t\t\t\trBearing = charStruct.rbearing;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (charWidth != 0) {", "-\t\t\t\t\t\t\treturn charStruct.rbearing - charStruct.lbearing;", "+\t\t\t\t\t\t\treturn rBearing - lBearing;", "-\t\t\t\t\t\tint offset = row * charsPerRow + col;", "-\t\t\t\t\t\tOS.memmove(charStruct, fontStruct.per_char + offset * XCharStruct.sizeof, XCharStruct.sizeof);", "-\t\t\t\t\t\tif (charStruct.width != 0) {", "+\t\t\t\t\t\tint charWidth = 0;", "+\t\t\t\t\t\tint lBearing = 0;", "+\t\t\t\t\t\tint rBearing = 0;", "+\t\t\t\t\t\tint perCharPtr = fontStruct.per_char;\t", "+\t\t\t\t\t\tif (perCharPtr == 0) {", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t * If perCharPtr is 0 then all glyphs in the font have", "+\t\t\t\t\t\t\t * the same width and left/right bearings as the font.", "+\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\tcharWidth = fontStruct.max_bounds_width;", "+\t\t\t\t\t\t\tlBearing = fontStruct.min_bounds_lbearing;", "+\t\t\t\t\t\t\trBearing = fontStruct.max_bounds_rbearing;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint offset = row * charsPerRow + col;", "+\t\t\t\t\t\t\tOS.memmove(charStruct, perCharPtr + offset * XCharStruct.sizeof, XCharStruct.sizeof);", "+\t\t\t\t\t\t\tcharWidth = charStruct.width;", "+\t\t\t\t\t\t\tlBearing = charStruct.lbearing;", "+\t\t\t\t\t\t\trBearing = charStruct.rbearing;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (charWidth != 0) {", "-\t\t\t\t\t\t\treturn charStruct.rbearing - charStruct.lbearing;", "+\t\t\t\t\t\t\treturn rBearing - lBearing;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b7a161a4fe7c695729071637ad9e34e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "4aeb00556854120b6e09c8751fbd552909556203", "commitAfterChange": "f370a24625fbead82ce8442a00636cac44a2c36a", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public int getAdvanceWidth(char ch)", "signatureAfterChange": " public int getAdvanceWidth(char ch)", "diff": ["-\t\t\t\t\tOS.memmove(charStruct, fontStruct.per_char + ((val - fontStruct.min_char_or_byte2) * XCharStruct.sizeof), XCharStruct.sizeof);", "-\t\t\t\t\tif (charStruct.width != 0) {", "+\t\t\t\t\tint charWidth = 0;", "+\t\t\t\t\tint perCharPtr = fontStruct.per_char;\t", "+\t\t\t\t\tif (perCharPtr == 0) {", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t * If perCharPtr is 0 then all glyphs in the font have", "+\t\t\t\t\t\t * the same width as the font's maximum width.", "+\t\t\t\t\t\t */", "+\t\t\t\t\t\t charWidth = fontStruct.max_bounds_width;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tOS.memmove(charStruct, perCharPtr + ((val - fontStruct.min_char_or_byte2) * XCharStruct.sizeof), XCharStruct.sizeof);", "+\t\t\t\t\t\tcharWidth = charStruct.width;", "+\t\t\t\t\t} ", "+\t\t\t\t\tif (charWidth != 0) {", "-\t\t\t\t\t\treturn charStruct.width;", "+\t\t\t\t\t\treturn charWidth;", "-\t\t\t\t\tint offset = row * charsPerRow + col;", "-\t\t\t\t\tOS.memmove(charStruct, fontStruct.per_char + offset * XCharStruct.sizeof, XCharStruct.sizeof);", "-\t\t\t\t\tif (charStruct.width != 0) {", "+\t\t\t\t\tint charWidth = 0;", "+\t\t\t\t\tint perCharPtr = fontStruct.per_char;\t", "+\t\t\t\t\tif (perCharPtr == 0) {", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t * If perCharPtr is 0 then all glyphs in the font have", "+\t\t\t\t\t\t * the same width as the font's maximum width.", "+\t\t\t\t\t\t */", "+\t\t\t\t\t\t charWidth = fontStruct.max_bounds_width;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint offset = row * charsPerRow + col;", "+\t\t\t\t\t\tOS.memmove(charStruct, perCharPtr + offset * XCharStruct.sizeof, XCharStruct.sizeof);", "+\t\t\t\t\t\tcharWidth = charStruct.width;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (charWidth != 0) {", "-\t\t\t\t\t\treturn charStruct.width;", "+\t\t\t\t\t\treturn charWidth;", "-\t\t\t\t\t\tOS.memmove(charStruct, fontStruct.per_char + (val - fontStruct.min_char_or_byte2 * XCharStruct.sizeof), XCharStruct.sizeof);", "-\t\t\t\t\t\tif (charStruct.width != 0) {", "+\t\t\t\t\t\tint charWidth = 0;", "+\t\t\t\t\t\tint perCharPtr = fontStruct.per_char;\t", "+\t\t\t\t\t\tif (perCharPtr == 0) {", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t * If perCharPtr is 0 then all glyphs in the font have", "+\t\t\t\t\t\t\t * the same width as the font's maximum width.", "+\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\t charWidth = fontStruct.max_bounds_width;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tOS.memmove(charStruct, perCharPtr + (val - fontStruct.min_char_or_byte2 * XCharStruct.sizeof), XCharStruct.sizeof);", "+\t\t\t\t\t\t\tcharWidth = charStruct.width;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (charWidth != 0) {", "-\t\t\t\t\t\t\treturn charStruct.width;", "+\t\t\t\t\t\t\treturn charWidth;", "-\t\t\t\t\t\tint offset = row * charsPerRow + col;", "-\t\t\t\t\t\tOS.memmove(charStruct, fontStruct.per_char + offset * XCharStruct.sizeof, XCharStruct.sizeof);", "-\t\t\t\t\t\tif (charStruct.width != 0) {", "+\t\t\t\t\t\tint charWidth = 0;", "+\t\t\t\t\t\tint perCharPtr = fontStruct.per_char;\t", "+\t\t\t\t\t\tif (perCharPtr == 0) {", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t * If perCharPtr is 0 then all glyphs in the font have", "+\t\t\t\t\t\t\t * the same width as the font's maximum width.", "+\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\t charWidth = fontStruct.max_bounds_width;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint offset = row * charsPerRow + col;", "+\t\t\t\t\t\t\tOS.memmove(charStruct, perCharPtr + offset * XCharStruct.sizeof, XCharStruct.sizeof);", "+\t\t\t\t\t\t\tcharWidth = charStruct.width;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (charWidth != 0) {", "-\t\t\t\t\t\t\treturn charStruct.width;", "+\t\t\t\t\t\t\treturn charWidth;"]}], "num": 35047}
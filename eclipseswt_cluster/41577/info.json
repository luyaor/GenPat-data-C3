{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "475340955e1cf0116f29035c0cd07887", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e1de99f8ac78fa8c9248683f9756da3f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "d8955edbe9f5c9464b222d0331748137a5a534b7", "commitAfterChange": "b533c1ac7667bcd66286ef15cde6bafc62a4cf97", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  @Override public void create (Composite parent, int style)", "signatureAfterChange": "  @Override public void create (Composite parent, int style)", "diff": ["-\trc = componentManager.CreateInstance (XPCOM.NS_IWEBBROWSER_CID, 0, nsIWebBrowser.NS_IWEBBROWSER_10_IID, result);", "+\trc = componentManager.CreateInstance (XPCOM.NS_IWEBBROWSER_CID, 0, IIDStore.GetIID (nsIWebBrowser.class), result);", "-\t\trc = componentManager.CreateInstance (XPCOM.NS_IWEBBROWSER_CID, 0, nsIWebBrowser.NS_IWEBBROWSER_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (rc);", "-\t\t}", "+\t\tbrowser.dispose ();", "+\t\terror (rc);", "-\t\t/* IsPre_4 and IsPre_24 are already determined in initXPCOM() */", "+\t\t/* The Mozilla version is currently either known to be 24.x or 10.x, or is assumed to be 1.9.2.x */", "-\t\trc = componentManager.QueryInterface (nsIComponentRegistrar.NS_ICOMPONENTREGISTRAR_IID, result);", "+\t\trc = componentManager.QueryInterface (IIDStore.GetIID (nsIComponentRegistrar.class), result);", "-\t\t* Check for the availability of the pre-1.8 implementation of nsIDocShell", "-\t\t* to determine if the GRE's version is < 1.8.", "+\t\t* If the version is earlier than 10.x then query for the IID of nsIDocShell from", "+\t\t* various mozilla releases to determine more precisely which version is being used.", "-\t\trc = webBrowser.QueryInterface (nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (XPCOM.NS_ERROR_FAILURE);", "-\t\t}", "-\t\tif (result[0] == 0) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\t}", "-\t\tnsIInterfaceRequestor interfaceRequestor = new nsIInterfaceRequestor (result[0]);", "-\t\tresult[0] = 0;", "+\t\tif (!MozillaVersion.CheckVersion (MozillaVersion.VERSION_XR10)) {", "+\t\t\trc = webBrowser.QueryInterface (IIDStore.GetIID (nsIInterfaceRequestor.class), result);", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (XPCOM.NS_ERROR_FAILURE);", "+\t\t\t}", "+\t\t\tif (result[0] == 0) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\t\t}", "+\t\t\tnsIInterfaceRequestor interfaceRequestor = new nsIInterfaceRequestor (result[0]);", "+\t\t\tresult[0] = 0;", "-\t\trc = interfaceRequestor.GetInterface (nsIDocShell.NS_IDOCSHELL_IID, result);", "-\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "-\t\t\tIsPre_1_8 = true;", "-\t\t\tnew nsISupports (result[0]).Release ();", "+\t\t\tfor (int i = MozillaVersion.VERSION_XR1_9_2; MozillaVersion.VERSION_BASE <= i; i--) {", "+\t\t\t\tnsID iid = IIDStore.GetIID (nsIDocShell.class, i, true);", "+\t\t\t\tif (iid != null) {", "+\t\t\t\t\tresult[0] = 0;", "+\t\t\t\t\trc = interfaceRequestor.GetInterface (iid, result);", "+\t\t\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t\t\t\t\tnew nsISupports (result[0]).Release ();", "+\t\t\t\t\t\tMozillaVersion.SetCurrentVersion (i);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tinterfaceRequestor.Release ();", "+\t\t\tresult[0] = 0;", "-\t\tIsPre_1_9 = true;", "-\t\tresult[0] = 0;", "-\t\tif (!IsPre_1_8) {", "-\t\t\trc = interfaceRequestor.GetInterface (nsIDocShell.NS_IDOCSHELL_1_8_IID, result);", "-\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) { /* 1.8.x */", "-\t\t\t\tnew nsISupports (result[0]).Release ();", "-\t\t\t\tresult[0] = 0;", "-", "-\t\t\t\tif (!factoriesRegistered) {", "-\t\t\t\t\tDownloadFactory_1_8 downloadFactory_1_8 = new DownloadFactory_1_8 ();", "-\t\t\t\t\tdownloadFactory_1_8.AddRef ();", "-\t\t\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_TRANSFER_CONTRACTID, true);", "-\t\t\t\t\tbyte[] aClassName = MozillaDelegate.wcsToMbcs (null, \"swtTransfer\", true); //$NON-NLS-1$", "-\t\t\t\t\trc = componentRegistrar.RegisterFactory (XPCOM.NS_DOWNLOAD_CID, aClassName, aContractID, downloadFactory_1_8.getAddress ());", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\t\t\tbrowser.dispose ();", "-\t\t\t\t\t\terror (rc);", "-\t\t\t\t\t}", "-\t\t\t\t\tdownloadFactory_1_8.Release ();", "+\t\tif (MozillaVersion.CheckVersion (MozillaVersion.VERSION_XR1_8, true)) {", "+\t\t\tif (!factoriesRegistered) {", "+\t\t\t\tDownloadFactory_1_8 downloadFactory_1_8 = new DownloadFactory_1_8 ();", "+\t\t\t\tdownloadFactory_1_8.AddRef ();", "+\t\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_TRANSFER_CONTRACTID, true);", "+\t\t\t\tbyte[] aClassName = MozillaDelegate.wcsToMbcs (null, \"swtTransfer\", true); //$NON-NLS-1$", "+\t\t\t\trc = componentRegistrar.RegisterFactory (XPCOM.NS_DOWNLOAD_CID, aClassName, aContractID, downloadFactory_1_8.getAddress ());", "+\t\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\t\tbrowser.dispose ();", "+\t\t\t\t\terror (rc);", "-\t\t\t} else { /* >= 1.9.x */", "-\t\t\t\tIsPre_1_9 = false;", "+\t\t\t\tdownloadFactory_1_8.Release ();", "-\t\tresult[0] = 0;", "-\t\tinterfaceRequestor.Release ();", "-", "+\t\t", "-\t\t", "+", "-\tif (!IsPre_1_9) {", "+\tif (MozillaVersion.CheckVersion (MozillaVersion.VERSION_XR1_9)) {", "-\trc = webBrowser.AddWebBrowserListener (weakReference.getAddress (), IsPre_24 ? nsIWebProgressListener.NS_IWEBPROGRESSLISTENER_IID : nsIWebProgressListener.NS_IWEBPROGRESSLISTENER_24_IID);", "+\trc = webBrowser.AddWebBrowserListener (weakReference.getAddress (), IIDStore.GetIID (nsIWebProgressListener.class));", "-\t\t\t\t\trc = serviceManager.GetServiceByContractID (aContractID, !IsPre_4 ? nsIFocusManager.NS_IFOCUSMANAGER_10_IID : nsIFocusManager.NS_IFOCUSMANAGER_IID, result);", "+\t\t\t\t\trc = serviceManager.GetServiceByContractID (aContractID, IIDStore.GetIID (nsIFocusManager.class), result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1fd8f81fba2552055d56aeb2036fdc5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "c246b71d349f886d26b7816d651043ac9ab7964b", "commitAfterChange": "5d2821d3e4ff1b1b65ade954e90990590a81dd5b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  int drawItemProc (int browser, int id, int property, int itemState, int theRect, int gdDepth, int colorDevice)", "signatureAfterChange": "  int drawItemProc (int browser, int id, int property, int itemState, int theRect, int gdDepth, int colorDevice)", "diff": ["+\trect.bottom++;", "-\tint [] position = new int [1];", "-\tOS.GetDataBrowserTableViewColumnPosition (handle, property, position);", "-\tif ((style & SWT.CHECK) != 0) --position [0];", "-\tif (columnCount != 0) {", "-\t\tif (selected && ((style & SWT.FULL_SELECTION) != 0 || position [0] == 0)) {", "-\t\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "-\t\t} else {", "-\t\t\tgc.setBackground (item.getBackground (columnIndex));\t\t\t", "-\t\t}", "-\t\tif (position [0] == 0) {", "-\t\t\tgc.fillRectangle (x - 1, y, itemRect.right - x + 2, itemRect.bottom - y);", "-\t\t} else {", "-\t\t\tgc.fillRectangle (itemRect.left, itemRect.top, itemRect.right - itemRect.left, itemRect.bottom - itemRect.top);", "+\tif (selected && (style & SWT.FULL_SELECTION) != 0) {", "+\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "+\t\tint gridWidth = getLinesVisible () ? GRID_WIDTH : 0;", "+\t\tgc.fillRectangle (itemRect.left + gridWidth, itemRect.top, itemRect.right - itemRect.left - gridWidth, itemRect.bottom - itemRect.top + 1);", "+\t} else {", "+\t\tif (background != null || item.background != null || (item.cellBackground != null && item.cellBackground [columnIndex] != null)) {", "+\t\t\tgc.setBackground (item.getBackground (columnIndex));", "+\t\t\tint gridWidth = getLinesVisible () ? GRID_WIDTH : 0;", "+\t\t\tgc.fillRectangle (itemRect.left + gridWidth, itemRect.top, itemRect.right - itemRect.left - gridWidth, itemRect.bottom - itemRect.top + 1);", "+\tint gap = getGap ();", "-\t\titemWidth += this.imageBounds.width + 2;", "+\t\titemWidth += this.imageBounds.width + gap;", "-\t\tx += this.imageBounds.width + 2;", "+\t\tx += this.imageBounds.width + gap;", "-\tif (selected && ((style & SWT.FULL_SELECTION) != 0 || position [0] == 0)) {", "+\tif (selected) {", "-\t\tif (columnCount == 0) {", "+\t\tif (columnIndex == 0 && (style & SWT.FULL_SELECTION) == 0) {", "-\t\t\tgc.fillRectangle (x - 1, y, extent.x + 2, height);", "+\t\t\tgc.fillRectangle (x - 1, y, extent.x + 2, itemRect.bottom - itemRect.top + 1);", "-\t\tif (columnCount == 0) {", "-\t\t\tgc.setBackground (item.getBackground ());", "-\t\t\tgc.fillRectangle (x - 1, y, extent.x + 2, height);", "-\t\t}", "+}"]}], "num": 41577}
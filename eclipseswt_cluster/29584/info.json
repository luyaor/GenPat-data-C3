{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "16d9a54b6067f6db8b20e1f66c9c8f47", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17ce83d9b79e340d958653c29bb022e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "9e1a986dcce75cb0645d030b34be2dfbc464396a", "commitAfterChange": "ebeb50d4f6fbae138a9dae3e5acce14cc17307ea", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 65, "signatureBeforeChange": " public Point textExtent(String string, int flags)", "signatureAfterChange": " public Point textExtent(String string, int flags)", "diff": ["-\t//FIXME - check flags", "+\tint mnemonic, length = string.length();", "+\tbyte[] buffer;", "-\tbyte[] buffer = Converter.wcsToMbcs(null, string, false);", "+\tchar[] text = new char[length];", "+\tstring.getChars(0, length, text, 0);", "+\tif ((flags & SWT.DRAW_MNEMONIC) != 0 && (mnemonic = fixMnemonic(text)) != -1) {", "+\t\tchar[] text1 = new char[mnemonic - 1];", "+\t\tSystem.arraycopy(text, 0, text1, 0, text1.length);", "+\t\tbyte[] buffer1 = Converter.wcsToMbcs(null, text1, false);", "+\t\tchar[] text2 = new char[text.length - mnemonic];", "+\t\tSystem.arraycopy(text, mnemonic - 1, text2, 0, text2.length);", "+\t\tbyte[] buffer2 = Converter.wcsToMbcs(null, text2, false);", "+\t\tbuffer = new byte[buffer1.length + buffer2.length];", "+\t\tSystem.arraycopy(buffer1, 0, buffer, 0, buffer1.length);", "+\t\tSystem.arraycopy(buffer2, 0, buffer, buffer1.length, buffer2.length);", "+\t\tint attr_list = OS.pango_attr_list_new();", "+\t\tint attr = OS.pango_attr_underline_new(OS.PANGO_UNDERLINE_LOW);", "+\t\tPangoAttribute attribute = new PangoAttribute();", "+\t\tOS.memmove(attribute, attr, PangoAttribute.sizeof);", "+\t\tattribute.start_index = buffer1.length;", "+\t\tattribute.end_index = buffer1.length + 1;", "+\t\tOS.memmove(attr, attribute, PangoAttribute.sizeof);", "+\t\tOS.pango_attr_list_insert(attr_list, attr);", "+\t\tOS.pango_layout_set_attributes(layout, attr_list);", "+\t\tOS.pango_attr_list_unref(attr_list);", "+\t} else {", "+\t\tbuffer = Converter.wcsToMbcs(null, text, false);", "+\t}", "+\tOS.pango_layout_set_single_paragraph_mode(layout, (flags & SWT.DRAW_DELIMITER) == 0);", "+\tOS.pango_layout_set_tabs(layout, (flags & SWT.DRAW_TAB) != 0 ? 0 : data.device.emptyTab);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "249d61aa2c8964474473fe8856f0fe9d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "9e1a986dcce75cb0645d030b34be2dfbc464396a", "commitAfterChange": "ebeb50d4f6fbae138a9dae3e5acce14cc17307ea", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void drawText (String string, int x, int y, int flags)", "signatureAfterChange": " public void drawText (String string, int x, int y, int flags)", "diff": ["-\t//FIXME - check flags, background color", "+\tint mnemonic, length = string.length();", "+\tif (length == 0) return;", "+\tbyte[] buffer;", "-\tbyte[] buffer = Converter.wcsToMbcs(null, string, false);", "+\tchar[] text = new char[length];", "+\tstring.getChars(0, length, text, 0);", "+\tif ((flags & SWT.DRAW_MNEMONIC) != 0 && (mnemonic = fixMnemonic(text)) != -1) {", "+\t\tchar[] text1 = new char[mnemonic - 1];", "+\t\tSystem.arraycopy(text, 0, text1, 0, text1.length);", "+\t\tbyte[] buffer1 = Converter.wcsToMbcs(null, text1, false);", "+\t\tchar[] text2 = new char[text.length - mnemonic];", "+\t\tSystem.arraycopy(text, mnemonic - 1, text2, 0, text2.length);", "+\t\tbyte[] buffer2 = Converter.wcsToMbcs(null, text2, false);", "+\t\tbuffer = new byte[buffer1.length + buffer2.length];", "+\t\tSystem.arraycopy(buffer1, 0, buffer, 0, buffer1.length);", "+\t\tSystem.arraycopy(buffer2, 0, buffer, buffer1.length, buffer2.length);", "+\t\tint attr_list = OS.pango_attr_list_new();", "+\t\tint attr = OS.pango_attr_underline_new(OS.PANGO_UNDERLINE_LOW);", "+\t\tPangoAttribute attribute = new PangoAttribute();", "+\t\tOS.memmove(attribute, attr, PangoAttribute.sizeof);", "+\t\tattribute.start_index = buffer1.length;", "+\t\tattribute.end_index = buffer1.length + 1;", "+\t\tOS.memmove(attr, attribute, PangoAttribute.sizeof);", "+\t\tOS.pango_attr_list_insert(attr_list, attr);", "+\t\tOS.pango_layout_set_attributes(layout, attr_list);", "+\t\tOS.pango_attr_list_unref(attr_list);", "+\t} else {", "+\t\tbuffer = Converter.wcsToMbcs(null, text, false);", "+\t\tOS.pango_layout_set_attributes(layout, 0);", "+\t}", "+\tOS.pango_layout_set_single_paragraph_mode(layout, (flags & SWT.DRAW_DELIMITER) == 0);", "+\tOS.pango_layout_set_tabs(layout, (flags & SWT.DRAW_TAB) != 0 ? 0 : data.device.emptyTab);", "+\tGdkColor background = null;", "+\tif ((flags & SWT.DRAW_TRANSPARENT) == 0) background = getBackground().handle;", "-\t\tOS.gdk_draw_layout(data.drawable, handle, x, y, layout);", "+\t\tOS.gdk_draw_layout_with_colors(data.drawable, handle, x, y, layout, null, background);", "-\t\tOS.gdk_draw_layout(pixmap, gdkGC, 0, 0, layout);", "+\t\tOS.gdk_draw_layout_with_colors(pixmap, gdkGC, 0, 0, layout, null, background);"]}], "num": 29584}
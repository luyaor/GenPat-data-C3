{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "303cea1798b51657c55361e4f37ba098", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51eb0670499920febfffafc37a9270c6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "020d96c1f91e06308676ff06f7a64df8439dd667", "commitAfterChange": "6dd861b0bd93e118bc782bb3040123a85bf89896", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\t\tString mozillaPath = null;", "-\t\tint /*long*/ ptr = OS.getenv(Converter.wcsToMbcs(null, XPCOM.MOZILLA_FIVE_HOME, true));", "-\t\tif (ptr != 0) {", "-\t\t\tint length = OS.strlen(ptr);", "-\t\t\tbyte[] buffer = new byte[length];", "-\t\t\tOS.memmove(buffer, ptr, length);", "-\t\t\tmozillaPath = new String (Converter.mbcsToWcs (null, buffer));", "-\t\t}", "-\t\tif (mozillaPath == null) {", "-\t\t\tdispose();", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [Unknown Mozilla path (MOZILLA_FIVE_HOME not set)]\"); //$NON-NLS-1$", "-\t\t}", "-\t\t/*", "-\t\t* Note.  Embedding a Mozilla GTK1.2 causes a crash.  The workaround", "-\t\t* is to check the version of GTK used by Mozilla by looking for", "-\t\t* the libwidget_gtk.so library used by Mozilla GTK1.2. Mozilla GTK2", "-\t\t* uses the libwidget_gtk2.so library.   ", "-\t\t*/", "-\t\tFile file = new File(mozillaPath, \"components/libwidget_gtk.so\"); //$NON-NLS-1$", "-\t\tif (file.exists()) {", "-\t\t\tdispose();", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [Mozilla GTK2 required (GTK1.2 detected)]\"); //$NON-NLS-1$\t\t\t\t\t\t\t", "-\t\t}", "-", "-\t\t\tLibrary.loadLibrary (\"swt-mozilla\"); //$NON-NLS-1$", "+\t\t} catch (UnsatisfiedLinkError e) {", "+\t\t\tSWT.error (SWT.ERROR_NO_HANDLES, e);", "+\t\t}", "+", "+\t\tString mozillaPath = null;", "+\t\tboolean initLoaded = false;", "+\t\ttry {", "+\t\t\tLibrary.loadLibrary (\"swt-xpcominit\"); //$NON-NLS-1$", "+\t\t\tinitLoaded = true;", "-\t\t\t\t * swt mozilla library that depends on libswtc++.so.5 instead.", "+\t\t\t\t * swt xpcominit library that depends on libswtc++.so.5 instead.", "-\t\t\t\tLibrary.loadLibrary (\"swt-mozilla-gcc3\"); //$NON-NLS-1$", "+\t\t\t\tLibrary.loadLibrary (\"swt-xpcominit-gcc3\"); //$NON-NLS-1$", "+\t\t\t\tinitLoaded = true;", "-\t\t\t\tdispose ();", "-\t\t\t\t * Print the error from the first failed attempt since at this point it's", "-\t\t\t\t * known that the failure was not due to the libstdc++.so.6 dependency.", "+\t\t\t\t * If this library still failed to load then do not attempt to detect a", "+\t\t\t\t * xulrunner to use.  The Browser may still be usable if MOZILLA_FIVE_HOME", "+\t\t\t\t * points at a GRE. ", "-\t\t\t\tSWT.error (SWT.ERROR_NO_HANDLES, e);", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tboolean isXULRunner = false;", "+\t\tif (initLoaded) {", "+\t\t\t/* attempt to discover a XULRunner to use as the GRE */", "+\t\t\tGREVersionRange range = new GREVersionRange();", "+\t\t\tbyte[] bytes = Converter.wcsToMbcs(null, GRERANGE_LOWER, true);", "+\t\t\tint /*long*/ lower = OS.XtMalloc (bytes.length);", "+\t\t\tOS.memmove (lower, bytes, bytes.length);", "+\t\t\trange.lower = lower;", "+\t\t\trange.lowerInclusive = LowerRangeInclusive;", "+", "+\t\t\tbytes = Converter.wcsToMbcs(null, GRERANGE_UPPER, true);", "+\t\t\tint /*long*/ upper = OS.XtMalloc (bytes.length);", "+\t\t\tOS.memmove (upper, bytes, bytes.length);", "+\t\t\trange.upper = upper;", "+\t\t\trange.upperInclusive = UpperRangeInclusive;", "+", "+\t\t\tint length = XPCOMInit.PATH_MAX;", "+\t\t\tint /*long*/ greBuffer = OS.XtMalloc(length);", "+\t\t\tint /*long*/ propertiesPtr = OS.XtMalloc(2 * OS.PTR_SIZEOF);", "+\t\t\tint rc = XPCOMInit.GRE_GetGREPathWithProperties(range, 1, propertiesPtr, 0, greBuffer, length);", "+\t\t\tOS.XtFree(lower);", "+\t\t\tOS.XtFree(upper);", "+\t\t\tOS.XtFree(propertiesPtr);", "+\t\t\tif (rc == XPCOM.NS_OK) {", "+\t\t\t\t/* indicates that a XULRunner was found */", "+\t\t\t\tlength = OS.strlen(greBuffer);", "+\t\t\t\tbytes = new byte[length];", "+\t\t\t\tOS.memmove(bytes, greBuffer, length);", "+\t\t\t\tmozillaPath = new String(Converter.mbcsToWcs(null, bytes));", "+\t\t\t\tisXULRunner = mozillaPath.length() > 0;", "+\t\t\t}", "+\t\t\tOS.XtFree(greBuffer);", "+\t\t}", "+", "+\t\tif (isXULRunner) {", "+\t\t\ttry {", "+\t\t\t\tLibrary.loadLibrary (\"swt-xulrunner\"); //$NON-NLS-1$", "+\t\t\t} catch (UnsatisfiedLinkError e) {", "+\t\t\t\ttry {", "+\t\t\t\t\t/* ", "+\t\t\t\t\t * The initial loadLibrary attempt may have failed as a result of the user's", "+\t\t\t\t\t * system not having libstdc++.so.6 installed, so try to load the alternate", "+\t\t\t\t\t * swt xulrunner library that depends on libswtc++.so.5 instead.", "+\t\t\t\t\t */", "+\t\t\t\t\tLibrary.loadLibrary (\"swt-xulrunner-gcc3\"); //$NON-NLS-1$", "+\t\t\t\t} catch (UnsatisfiedLinkError ex) {", "+\t\t\t\t\tdispose ();", "+\t\t\t\t\t/*", "+\t\t\t\t\t * Print the error from the first failed attempt since at this point it's", "+\t\t\t\t\t * known that the failure was not due to the libstdc++.so.6 dependency.", "+\t\t\t\t\t */", "+\t\t\t\t\tSWT.error (SWT.ERROR_NO_HANDLES, e);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbyte[] path = Converter.wcsToMbcs(null, mozillaPath, true);", "+\t\t\tint rc = XPCOMGlue.XPCOMGlueStartup(path);", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tdispose();", "+\t\t\t\terror(rc);", "+\t\t\t}", "+", "+\t\t\t/*", "+\t\t\t * remove the trailing \"libxpcom.so\" from mozillaPath because the NS_InitXPCOM2", "+\t\t\t * invocation requires a directory name only", "+\t\t\t */ ", "+\t\t\tmozillaPath = mozillaPath.substring(0, mozillaPath.lastIndexOf(SEPARATOR_OS));", "+\t\t} else {", "+\t\t\t/* attempt to use the GRE pointed at by MOZILLA_FIVE_HOME */", "+", "+\t\t\tint /*long*/ ptr = OS.getenv(Converter.wcsToMbcs(null, XPCOM.MOZILLA_FIVE_HOME, true));", "+\t\t\tif (ptr != 0) {", "+\t\t\t\tint length = OS.strlen(ptr);", "+\t\t\t\tbyte[] buffer = new byte[length];", "+\t\t\t\tOS.memmove(buffer, ptr, length);", "+\t\t\t\tmozillaPath = new String (Converter.mbcsToWcs (null, buffer));", "+\t\t\t}", "+\t\t\tif (mozillaPath == null) {", "+\t\t\t\tdispose();", "+\t\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [Unknown Mozilla path (MOZILLA_FIVE_HOME not set)]\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\t/*", "+\t\t\t* Note.  Embedding a Mozilla GTK1.2 causes a crash.  The workaround", "+\t\t\t* is to check the version of GTK used by Mozilla by looking for", "+\t\t\t* the libwidget_gtk.so library used by Mozilla GTK1.2. Mozilla GTK2", "+\t\t\t* uses the libwidget_gtk2.so library.   ", "+\t\t\t*/", "+\t\t\tFile file = new File(mozillaPath, \"components/libwidget_gtk.so\"); //$NON-NLS-1$", "+\t\t\tif (file.exists()) {", "+\t\t\t\tdispose();", "+\t\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [Mozilla GTK2 required (GTK1.2 detected)]\"); //$NON-NLS-1$\t\t\t\t\t\t\t", "+\t\t\t}", "+\t", "+\t\t\ttry {", "+\t\t\t\tLibrary.loadLibrary (\"swt-mozilla\"); //$NON-NLS-1$", "+\t\t\t} catch (UnsatisfiedLinkError e) {", "+\t\t\t\ttry {", "+\t\t\t\t\t/* ", "+\t\t\t\t\t * The initial loadLibrary attempt may have failed as a result of the user's", "+\t\t\t\t\t * system not having libstdc++.so.6 installed, so try to load the alternate", "+\t\t\t\t\t * swt mozilla library that depends on libswtc++.so.5 instead.", "+\t\t\t\t\t */", "+\t\t\t\t\tLibrary.loadLibrary (\"swt-mozilla-gcc3\"); //$NON-NLS-1$", "+\t\t\t\t} catch (UnsatisfiedLinkError ex) {", "+\t\t\t\t\tdispose ();", "+\t\t\t\t\t/*", "+\t\t\t\t\t * Print the error from the first failed attempt since at this point it's", "+\t\t\t\t\t * known that the failure was not due to the libstdc++.so.6 dependency.", "+\t\t\t\t\t */", "+\t\t\t\t\tSWT.error (SWT.ERROR_NO_HANDLES, e);", "+\t\t\t\t}", "-\t\tptr = XPCOM.nsEmbedCString_get(path);", "+\t\tint /*long*/ ptr = XPCOM.nsEmbedCString_get(path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e694ec30bab1083a0d1e40a6132a185", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/gtk/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "dc26babbb46bb9819f00f82e8ab8d249fae59c09", "commitAfterChange": "bf78cbe2de06a66efcc726d08a3a12007224e164", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\t\tint /*long*/ ptr = OS.getenv(Converter.wcsToMbcs(null, XPCOM.MOZILLA_FIVE_HOME, true));", "-\t\tif (ptr != 0) {", "-\t\t\tint length = OS.strlen(ptr);", "-\t\t\tbyte[] buffer = new byte[length];", "-\t\t\tOS.memmove(buffer, ptr, length);", "-\t\t\tmozillaPath = new String (Converter.mbcsToWcs (null, buffer));", "-\t\t}", "-\t\tif (mozillaPath == null) {", "-\t\t\tdispose();", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [Unknown Mozilla path (MOZILLA_FIVE_HOME not set)]\"); //$NON-NLS-1$", "-\t\t}", "-\t\t/*", "-\t\t* Note.  Embedding a Mozilla GTK1.2 causes a crash.  The workaround", "-\t\t* is to check the version of GTK used by Mozilla by looking for", "-\t\t* the libwidget_gtk.so library used by Mozilla GTK1.2. Mozilla GTK2", "-\t\t* uses the libwidget_gtk2.so library.   ", "-\t\t*/", "-\t\tFile file = new File(mozillaPath, \"components/libwidget_gtk.so\"); //$NON-NLS-1$", "-\t\tif (file.exists()) {", "-\t\t\tdispose();", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [Mozilla GTK2 required (GTK1.2 detected)]\"); //$NON-NLS-1$\t\t\t\t\t\t\t", "-\t\t}", "+\t\tboolean initLoaded = false;", "-\t\t\tLibrary.loadLibrary (\"swt-mozilla\"); //$NON-NLS-1$", "+\t\t\tLibrary.loadLibrary (\"swt-xpcominit\"); //$NON-NLS-1$", "+\t\t\tinitLoaded = true;", "-\t\t\t\t * swt mozilla library that depends on libswtc++.so.5 instead.", "+\t\t\t\t * swt xpcominit library that depends on libswtc++.so.5 instead.", "-\t\t\t\tLibrary.loadLibrary (\"swt-mozilla-gcc3\"); //$NON-NLS-1$", "+\t\t\t\tLibrary.loadLibrary (\"swt-xpcominit-gcc3\"); //$NON-NLS-1$", "+\t\t\t\tinitLoaded = true;", "-\t\t\t\tdispose ();", "-\t\t\t\t * Print the error from the first failed attempt since at this point it's", "-\t\t\t\t * known that the failure was not due to the libstdc++.so.6 dependency.", "+\t\t\t\t * If this library still failed to load then do not attempt to detect a", "+\t\t\t\t * xulrunner to use.  The Browser may still be usable if MOZILLA_FIVE_HOME", "+\t\t\t\t * points at a GRE. ", "-\t\t\t\tSWT.error (SWT.ERROR_NO_HANDLES, e);", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tboolean isXULRunner = false;", "+\t\tif (initLoaded) {", "+\t\t\t/* attempt to discover a XULRunner to use as the GRE */", "+\t\t\tGREVersionRange range = new GREVersionRange();", "+\t\t\tbyte[] bytes = Converter.wcsToMbcs(null, GRERANGE_LOWER, true);", "+\t\t\tint /*long*/ lower = OS.g_malloc (bytes.length);", "+\t\t\tOS.memmove (lower, bytes, bytes.length);", "+\t\t\trange.lower = lower;", "+\t\t\trange.lowerInclusive = LowerRangeInclusive;", "+", "+\t\t\tbytes = Converter.wcsToMbcs(null, GRERANGE_UPPER, true);", "+\t\t\tint /*long*/ upper = OS.g_malloc (bytes.length);", "+\t\t\tOS.memmove (upper, bytes, bytes.length);", "+\t\t\trange.upper = upper;", "+\t\t\trange.upperInclusive = UpperRangeInclusive;", "+", "+\t\t\tint length = XPCOMInit.PATH_MAX;", "+\t\t\tint /*long*/ greBuffer = OS.g_malloc(length);", "+\t\t\tint /*long*/ propertiesPtr = OS.g_malloc(2 * OS.PTR_SIZEOF);", "+\t\t\tint rc = XPCOMInit.GRE_GetGREPathWithProperties(range, 1, propertiesPtr, 0, greBuffer, length);", "+\t\t\tOS.g_free(lower);", "+\t\t\tOS.g_free(upper);", "+\t\t\tOS.g_free(propertiesPtr);", "+\t\t\tif (rc == XPCOM.NS_OK) {", "+\t\t\t\t/* indicates that a XULRunner was found */", "+\t\t\t\tlength = OS.strlen(greBuffer);", "+\t\t\t\tbytes = new byte[length];", "+\t\t\t\tOS.memmove(bytes, greBuffer, length);", "+\t\t\t\tmozillaPath = new String(Converter.mbcsToWcs(null, bytes));", "+\t\t\t\tisXULRunner = mozillaPath.length() > 0;", "+\t\t\t}", "+\t\t\tOS.g_free(greBuffer);", "+\t\t}", "+", "+\t\tif (isXULRunner) {", "+\t\t\ttry {", "+\t\t\t\tLibrary.loadLibrary (\"swt-xulrunner\"); //$NON-NLS-1$", "+\t\t\t} catch (UnsatisfiedLinkError e) {", "+\t\t\t\ttry {", "+\t\t\t\t\t/* ", "+\t\t\t\t\t * The initial loadLibrary attempt may have failed as a result of the user's", "+\t\t\t\t\t * system not having libstdc++.so.6 installed, so try to load the alternate", "+\t\t\t\t\t * swt xulrunner library that depends on libswtc++.so.5 instead.", "+\t\t\t\t\t */", "+\t\t\t\t\tLibrary.loadLibrary (\"swt-xulrunner-gcc3\"); //$NON-NLS-1$", "+\t\t\t\t} catch (UnsatisfiedLinkError ex) {", "+\t\t\t\t\tdispose ();", "+\t\t\t\t\t/*", "+\t\t\t\t\t * Print the error from the first failed attempt since at this point it's", "+\t\t\t\t\t * known that the failure was not due to the libstdc++.so.6 dependency.", "+\t\t\t\t\t */", "+\t\t\t\t\tSWT.error (SWT.ERROR_NO_HANDLES, e);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbyte[] path = Converter.wcsToMbcs(null, mozillaPath, true);", "+\t\t\tint rc = XPCOMGlue.XPCOMGlueStartup(path);", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tdispose();", "+\t\t\t\terror(rc);", "+\t\t\t}", "+", "+\t\t\t/*", "+\t\t\t * remove the trailing \"libxpcom.so\" from mozillaPath because the NS_InitXPCOM2", "+\t\t\t * invocation requires a directory name only", "+\t\t\t */ ", "+\t\t\tmozillaPath = mozillaPath.substring(0, mozillaPath.lastIndexOf(SEPARATOR_OS));", "+\t\t} else {", "+\t\t\t/* attempt to use the GRE pointed at by MOZILLA_FIVE_HOME */", "+\t\t\tint /*long*/ ptr = OS.getenv(Converter.wcsToMbcs(null, XPCOM.MOZILLA_FIVE_HOME, true));", "+\t\t\tif (ptr != 0) {", "+\t\t\t\tint length = OS.strlen(ptr);", "+\t\t\t\tbyte[] buffer = new byte[length];", "+\t\t\t\tOS.memmove(buffer, ptr, length);", "+\t\t\t\tmozillaPath = new String (Converter.mbcsToWcs (null, buffer));", "+\t\t\t}", "+\t\t\tif (mozillaPath == null) {", "+\t\t\t\tdispose();", "+\t\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [Unknown Mozilla path (MOZILLA_FIVE_HOME not set)]\"); //$NON-NLS-1$", "+\t\t\t}", "+\t\t\t/*", "+\t\t\t* Note.  Embedding a Mozilla GTK1.2 causes a crash.  The workaround", "+\t\t\t* is to check the version of GTK used by Mozilla by looking for", "+\t\t\t* the libwidget_gtk.so library used by Mozilla GTK1.2. Mozilla GTK2", "+\t\t\t* uses the libwidget_gtk2.so library.   ", "+\t\t\t*/", "+\t\t\tFile file = new File(mozillaPath, \"components/libwidget_gtk.so\"); //$NON-NLS-1$", "+\t\t\tif (file.exists()) {", "+\t\t\t\tdispose();", "+\t\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [Mozilla GTK2 required (GTK1.2 detected)]\"); //$NON-NLS-1$\t\t\t\t\t\t\t", "+\t\t\t}", "+\t", "+\t\t\ttry {", "+\t\t\t\tLibrary.loadLibrary (\"swt-mozilla\"); //$NON-NLS-1$", "+\t\t\t} catch (UnsatisfiedLinkError e) {", "+\t\t\t\ttry {", "+\t\t\t\t\t/* ", "+\t\t\t\t\t * The initial loadLibrary attempt may have failed as a result of the user's", "+\t\t\t\t\t * system not having libstdc++.so.6 installed, so try to load the alternate", "+\t\t\t\t\t * swt mozilla library that depends on libswtc++.so.5 instead.", "+\t\t\t\t\t */", "+\t\t\t\t\tLibrary.loadLibrary (\"swt-mozilla-gcc3\"); //$NON-NLS-1$", "+\t\t\t\t} catch (UnsatisfiedLinkError ex) {", "+\t\t\t\t\tdispose ();", "+\t\t\t\t\t/*", "+\t\t\t\t\t * Print the error from the first failed attempt since at this point it's", "+\t\t\t\t\t * known that the failure was not due to the libstdc++.so.6 dependency.", "+\t\t\t\t\t */", "+\t\t\t\t\tSWT.error (SWT.ERROR_NO_HANDLES, e);", "+\t\t\t\t}", "-\t\tptr = XPCOM.nsEmbedCString_get(path);", "+\t\tint /*long*/ ptr = XPCOM.nsEmbedCString_get(path);", "+"]}], "num": 34368}
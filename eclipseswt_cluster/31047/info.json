{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd722a31dc5d73400433e4bfa4318741", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fa6f3745cb269f266980cfa8e2b430d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 70, "signatureBeforeChange": "  \tstatic int atkText_get_text (int atkObject, int start_offset, int end_offset)", "signatureAfterChange": "  \tstatic int atkText_get_text (int atkObject, int start_offset, int end_offset)", "diff": ["-\t\tif (object == null) return 0;", "-\t\tString text = object.getText ();", "-\t\tif (text.length () > 0) {", "-\t\t\tif (end_offset == -1) {", "-\t\t\t\tend_offset = text.length ();", "-\t\t\t} else {", "-\t\t\t\tend_offset = Math.min (end_offset, text.length ());\t", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleTextExtendedListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleTextExtendedEvent event = new AccessibleTextExtendedEvent(accessible);", "+\t\t\t\tif (event.start != event.end) {", "+\t\t\t\t\tevent.start = (int)/*64*/start_offset;", "+\t\t\t\t\tevent.end = (int)/*64*/(end_offset - 1);", "+\t\t\t\t\tevent.type = ACC.TEXT_BOUNDARY_ALL;", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) listeners.elementAt(i);", "+\t\t\t\t\t\tlistener.getText(event);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn getStringPtr (event.result);", "-\t\t\tstart_offset = Math.min (start_offset, end_offset);", "-\t\t\ttext = text.substring ((int)/*64*/start_offset, (int)/*64*/end_offset);", "-\t\t\tbyte[] bytes = Converter.wcsToMbcs (null, text, true);", "-\t\t\tint /*long*/ result = OS.g_malloc (bytes.length);", "-\t\t\tOS.memmove (result, bytes, bytes.length);", "-\t\t\treturn result;", "+\t\t\tString text = object.getText ();", "+\t\t\tif (text != null && text.length () > 0) {", "+\t\t\t\tif (end_offset == -1) {", "+\t\t\t\t\tend_offset = text.length ();", "+\t\t\t\t} else {", "+\t\t\t\t\tend_offset = Math.min (end_offset, text.length ());\t", "+\t\t\t\t}", "+\t\t\t\tstart_offset = Math.min (start_offset, end_offset);", "+\t\t\t\ttext = text.substring ((int)/*64*/start_offset, (int)/*64*/end_offset);", "+\t\t\t\treturn getStringPtr (text);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73a2d2d3f3c754dca0bc8ec150ca15bd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 67, "signatureBeforeChange": "  \tstatic int atkText_get_character_count (int atkObject)", "signatureAfterChange": "  \tstatic int atkText_get_character_count (int atkObject)", "diff": ["-\t\tif (object == null) return 0;", "-\t\tString text = object.getText ();", "-\t\tif (text != null) return text.length ();", "-\t\tif (ATK.g_type_is_a (object.parentType, ATK_TEXT_TYPE)) {", "-\t\t\tint /*long*/ superType = ATK.g_type_class_peek (object.parentType);", "-\t\t\tAtkTextIface textIface = new AtkTextIface ();", "-\t\t\tATK.memmove (textIface, superType);", "-\t\t\tif (textIface.get_character_count != 0) {", "-\t\t\t\treturn ATK.call (textIface.get_character_count, object.handle);", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleTextExtendedListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleTextExtendedEvent event = new AccessibleTextExtendedEvent(accessible);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getCharacterCount(event);", "+\t\t\t\t}", "+\t\t\t\treturn event.count;", "+\t\t\tString text = object.getText ();", "+\t\t\tif (text != null) return text.length ();", "+\t\t}", "+\t\tAtkTextIface iface = getTextIface (atkObject);", "+\t\tif (iface != null && iface.get_character_count != 0) {", "+\t\t\treturn ATK.call (iface.get_character_count, atkObject);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5526ea39bf8826a71be4eb846513864", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 66, "signatureBeforeChange": " \t \tstatic int atkText_get_character_at_offset (int atkObject, int offset)", "signatureAfterChange": " \t \tstatic int atkText_get_character_at_offset (int atkObject, int offset)", "diff": ["-\t\tif (object == null) return 0;", "-\t\tString text = object.getText ();", "-\t\tif (text != null) return text.charAt ((int)/*64*/offset); // TODO", "-\t\tif (ATK.g_type_is_a (object.parentType, ATK_TEXT_TYPE)) {", "-\t\t\tint /*long*/ superType = ATK.g_type_class_peek (object.parentType);", "-\t\t\tAtkTextIface textIface = new AtkTextIface ();", "-\t\t\tATK.memmove (textIface, superType);", "-\t\t\tif (textIface.get_character_at_offset != 0) {", "-\t\t\t\treturn ATK.call (textIface.get_character_at_offset, object.handle, offset);", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleTextExtendedListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleTextExtendedEvent event = new AccessibleTextExtendedEvent(accessible);", "+\t\t\t\tevent.start = event.end = (int)/*64*/offset;", "+\t\t\t\tevent.type = ACC.TEXT_BOUNDARY_CHAR;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getText(event);", "+\t\t\t\t}", "+\t\t\t\tString text = event.result;", "+\t\t\t\tif (text != null && text.length() > 0) return text.charAt(0);", "+\t\t\tString text = object.getText ();", "+\t\t\tif (text != null) return text.charAt ((int)/*64*/offset);", "+\t\t}", "+\t\tAtkTextIface iface = getTextIface (atkObject);", "+\t\tif (iface != null && iface.get_character_at_offset != 0) {", "+\t\t\treturn ATK.call (iface.get_character_at_offset, atkObject, offset);"]}], "num": 31047}
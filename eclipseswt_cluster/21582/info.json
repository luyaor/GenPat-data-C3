{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75686e8476b30f3329f5cd394da18dd9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8368b07f3634dae5a5d146bc4e686fce", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "5544ce1d748561f71c4f1d1997c431f82e5c4c86", "commitAfterChange": "24e0049851c0d0a09cb9f25e5892d112e2936fed", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 120, "signatureBeforeChange": " void doVisualNext()", "signatureAfterChange": " void doVisualNext()", "diff": ["-\tint line = content.getLineAtOffset(caretOffset);", "-\tint lineOffset = content.getOffsetAtLine(line);\t", "-\tint offsetInLine = caretOffset - lineOffset;", "-\tString lineText = content.getLine(line);", "-\tint lineLength = lineText.length();", "-\t", "-\tif (isBidi()) {", "-\t\tGC gc = getGC();", "-\t\tStyledTextBidi bidi = getStyledTextBidi(lineText, lineOffset, gc);", "-\t\t// Fixes bug 39032", "-\t\tint lineEndPixel = Math.max(bidi.getTextWidth(), XINSET); ", "-", "-\t\t// check if caret location is at the visual end of the line (can't use ", "-\t\t// caret location here since it's location is dependent on current keyboard", "-\t\t// language direction)", "-\t\tif (bidi.getTextPosition(offsetInLine, lastCaretDirection) == lineEndPixel) {", "-\t\t\tgc.dispose(); ", "-\t\t\treturn;", "-\t\t}", "-\t\tint visualOffset = -1;", "-\t\tif (offsetInLine == lineLength) {", "-\t\t\t//logical end of line may not be visual end, setup visualOffset to process as usual", "-\t\t\tvisualOffset = bidi.getVisualOffset(offsetInLine - 1);", "-\t\t}", "-\t\telse", "-\t\tif (offsetInLine < lineLength) {", "-\t\t\tvisualOffset = bidi.getVisualOffset(offsetInLine);", "-\t\t}", "-\t\tif (visualOffset != -1) {", "-\t\t\tvisualOffset++;", "-\t\t\toffsetInLine = bidi.getLogicalOffset(visualOffset);", "-\t\t\tif (offsetInLine > 0 && offsetInLine < lineLength) {", "-\t\t\t\tboolean isRightOriented = isMirrored();", "-\t\t\t\tif (isRightOriented) {", "-\t\t\t\t\tboolean leftToRightStart = bidi.isRightToLeft(offsetInLine) == false && bidi.isRightToLeft(offsetInLine - 1);", "-\t\t\t\t\tif (leftToRightStart) {", "-\t\t\t\t\t\t//moving from RtoL segment to LtoR segment", "-\t\t\t\t\t\tlastCaretDirection = ST.COLUMN_PREVIOUS;", "-\t\t\t\t\t}\t\t\t\t\t\t", "-\t\t\t\t}", "-\t\t\t\telse {", "-\t\t\t\t\tboolean rightToLeftStart = bidi.isRightToLeft(offsetInLine) && bidi.isRightToLeft(offsetInLine - 1) == false;", "-\t\t\t\t\tif (bidi.isRightToLeftInput(offsetInLine) && bidi.isLatinNumber(offsetInLine - 1)) {", "-\t\t\t\t\t\t//moving from latin number to RtoL segment", "-\t\t\t\t\t\tlastCaretDirection = ST.COLUMN_NEXT;", "-\t\t\t\t\t}", "-\t\t\t\t\telse", "-\t\t\t\t\tif (rightToLeftStart) {", "-\t\t\t\t\t\t//moving from LtoR segment to RtoL segment", "-\t\t\t\t\t\tlastCaretDirection = ST.COLUMN_PREVIOUS;", "-\t\t\t\t\t}\t\t\t\t\t\t", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcaretOffset = lineOffset + offsetInLine;", "-\t\t\tshowCaret();", "-\t\t}", "-\t\tgc.dispose();", "-\t}", "-\telse", "-\tif (offsetInLine < lineLength) {", "-\t\tcaretOffset++;", "-\t\tshowCaret();", "-\t}", "+\tcaretOffset = getClusterNext(caretOffset, getCaretLine());", "+\tshowCaret();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "399e9407e7b72e641593903cf76d6f53", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "5544ce1d748561f71c4f1d1997c431f82e5c4c86", "commitAfterChange": "24e0049851c0d0a09cb9f25e5892d112e2936fed", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 119, "signatureBeforeChange": " void doVisualPrevious()", "signatureAfterChange": " void doVisualPrevious()", "diff": ["-\tint line = content.getLineAtOffset(caretOffset);", "-\tint lineOffset = content.getOffsetAtLine(line);\t", "-\tint offsetInLine = caretOffset - lineOffset;", "-\t", "-\tif (isBidi()) {", "-\t\t// check if caret location is at the visual beginning of the line", "-\t\tif (columnX <= XINSET && horizontalScrollOffset == 0) { ", "-\t\t\treturn;", "-\t\t}\t\t", "-\t\tString lineText = content.getLine(line);", "-\t\tint lineLength = lineText.length();", "-\t\tGC gc = getGC();", "-\t\tStyledTextBidi bidi = getStyledTextBidi(lineText, lineOffset, gc);", "-\t\tint visualOffset = -1;", "-\t\t", "-\t\tif (offsetInLine == lineLength) {", "-\t\t\t//logical end of line may not be visual end, setup visualOffset to process as usual", "-\t\t\tvisualOffset = bidi.getVisualOffset(offsetInLine - 1);", "-\t\t}", "-\t\telse", "-\t\tif (offsetInLine < lineLength) {", "-\t\t\tvisualOffset = bidi.getVisualOffset(offsetInLine);", "-\t\t}", "-\t\tif (visualOffset != -1) {", "-\t\t\tif (visualOffset > 0) {", "-\t\t\t\tvisualOffset--;", "-\t\t\t\toffsetInLine = bidi.getLogicalOffset(visualOffset);", "-\t\t\t}", "-\t\t\telse", "-\t\t\tif (visualOffset == 0) {", "-\t\t\t\tboolean isRightOriented = isMirrored();", "-", "-\t\t\t\t//move to visual line end (i.e., behind L2R character/in front of R2L character at visual 0)", "-\t\t\t\tif ((isRightOriented && bidi.isRightToLeft(offsetInLine) == false) ||", "-\t\t\t\t\t(isRightOriented == false && bidi.isRightToLeft(offsetInLine))) {", "-\t\t\t\t\toffsetInLine++;", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tif (offsetInLine > 0 && offsetInLine < lineLength) {", "-\t\t\t\t\tif (isRightOriented) {", "-\t\t\t\t\t\tboolean rightToLeftStart = bidi.isRightToLeft(offsetInLine) && bidi.isRightToLeft(offsetInLine - 1) == false;", "-\t\t\t\t\t\tif (rightToLeftStart) {", "-\t\t\t\t\t\t\t//moving from LtoR segment to RtoL segment", "-\t\t\t\t\t\t\tlastCaretDirection = ST.COLUMN_NEXT;", "-\t\t\t\t\t\t}\t\t\t\t\t\t", "-\t\t\t\t\t}", "-\t\t\t\t\telse {", "-\t\t\t\t\t\tboolean leftToRightStart = bidi.isRightToLeft(offsetInLine) == false && bidi.isRightToLeft(offsetInLine - 1);", "-\t\t\t\t\t\tif (bidi.isLatinNumber(offsetInLine) && bidi.isRightToLeftInput(offsetInLine - 1)) {", "-\t\t\t\t\t\t\t//moving from LtoR segment to latin number ", "-\t\t\t\t\t\t\tlastCaretDirection = ST.COLUMN_PREVIOUS;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\telse", "-\t\t\t\t\t\tif (leftToRightStart) {", "-\t\t\t\t\t\t\t//moving from RtoL segment to LtoR segment", "-\t\t\t\t\t\t\tlastCaretDirection = ST.COLUMN_NEXT;", "-\t\t\t\t\t\t}\t\t\t\t\t\t", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcaretOffset = lineOffset + offsetInLine;", "-\t\t\tshowCaret();", "-\t\t}", "-\t\tif (bidi.getTextPosition(offsetInLine, ST.COLUMN_NEXT) == XINSET) {", "-\t\t\t//scroll to origin if caret is at origin", "-\t\t\tscrollHorizontalBar(-horizontalScrollOffset);", "-\t\t}", "-\t\tgc.dispose();", "-\t}", "-\telse", "-\tif (offsetInLine > 0) {", "-\t\tcaretOffset--;", "-\t\tshowCaret();", "-\t}", "+\tcaretOffset = getClusterPrevious(caretOffset, getCaretLine());", "+\tshowCaret();"]}], "num": 21582}
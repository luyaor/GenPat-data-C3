{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "19292b8c6a8bea9c11cbc37e159b6b68", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c50a944728e2587f4f2e13f38aaeb24b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "50138c6f461daaa13b049e1e573beb470c823204", "commitAfterChange": "f3a50e0aa4bfa208db2c8abc633e1bcf6cfb9ae7", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": " public boolean post(Event event)", "signatureAfterChange": " public boolean post(Event event)", "diff": ["+\t\t// TODO: Not sure if these calls have any effect on event posting.", "-\t\t\t\t * Feature in Quartz. If the character doesn't map to any valid key, add the Unicode value to the", "-\t\t\t\t * event as a string and post it via key 0.  That will override the keyCode and arrive unmodified in the host app.", "+\t\t\t\t * Bug(?) in UCKeyTranslate:  If event.keyCode doesn't map to a valid SWT constant and event.characer is 0 we still need to post an event.", "+\t\t\t\t * In Carbon, KeyTranslate eventually found a key that generated 0 but UCKeyTranslate never generates 0.", "+\t\t\t\t * When that happens, post an event from key 127, which does nothing.", "-\t\t\t\tboolean postUnicode = false;", "-\t\t\t\t", "-\t\t\t\tif (vKey == -1 && event.character != 0) {", "-\t\t\t\t\tvKey = 0;", "-\t\t\t\t\tpostUnicode = true;", "+\t\t\t\tif (vKey == -1 && event.character == 0) {", "+\t\t\t\t\tvKey = 127;", "-\t\t\t\tint /*long*/ eventRef = OS.CGEventCreateKeyboardEvent(0, vKey, type == SWT.KeyDown);", "-\t\t\t\tif (eventRef != 0) {", "-\t\t\t\t\tif (postUnicode) {", "-\t\t\t\t\t\tchar eventString[] = new char[1];", "-\t\t\t\t\t\teventString[0] = event.character;", "-\t\t\t\t\t\tOS.CGEventKeyboardSetUnicodeString(eventRef, eventString.length, eventString);", "-\t\t\t\t\t}", "-\t\t\t\t\tOS.CGEventPost(OS.kCGSessionEventTap, eventRef);", "-\t\t\t\t\tOS.CFRelease(eventRef);", "-\t\t\t\t\treturn true;", "-\t\t\t\t} else {", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "+\t\t\t\tif (vKey == -1) return false;", "+\t\t\t\treturn OS.CGPostKeyboardEvent((short)0, vKey, type == SWT.KeyDown) == 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4a7f3f58a39559fb7893498f456b7e6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "8bccfcf010de68687a135a3d01ceb23d1d55e8a1", "commitAfterChange": "87a342cb87ef1107f9b1d879aca4bc8caff07353", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void setControl (Control control)", "signatureAfterChange": " public void setControl (Control control)", "diff": ["-\tControl newControl = control;", "-\tControl oldControl = this.control;", "-\tif (oldControl == newControl) return;", "-\tthis.control = newControl;", "-\tint /*long*/ parentHandle = parent.parentingHandle ();", "-\tif (oldControl != null) {", "-\t\tOS.gtk_widget_reparent (oldControl.topHandle(), parentHandle);", "-\t}", "-\tif (newControl != null) {", "-\t\tOS.gtk_widget_reparent (newControl.topHandle(), parentHandle);", "-\t\tnewControl.setBounds (getBounds ());", "-\t\tOS.gtk_widget_reparent (newControl.topHandle(), handle);", "-\t\tOS.gtk_widget_hide (separatorHandle);", "-\t} else {", "-\t\tOS.gtk_widget_show (separatorHandle);", "-\t}", "+\tif (this.control == control) return;", "+\tthis.control = control;", "+\tresizeControl ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41e84635086dab82820bc79b4c673ee3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ec7edbaede68f4fd7608786e759e23fd6dbe2200", "commitAfterChange": "b206c3d5f3a448a2b6dfbc2c13ed7e271cef1597", "methodNumberBeforeChange": 271, "methodNumberAfterChange": 193, "signatureBeforeChange": "\r StyleRange setSelectionStyleEnd(StyleRange selectionStyle, StyleRange style)", "signatureAfterChange": "\r Point internalGetSelection()", "diff": ["+}\r", "+Point internalGetSelection() {\r", "+\treturn selection;\r", "+}\r", "- */\r", "-StyleRange setSelectionStyleEnd(StyleRange selectionStyle, StyleRange style) {\r", "-\tint selectionEnd = selection.y;\r", "-\tStyleRange newStyle = null;\r", "-\t\r", "-\t// does style extend beyond selection?\t\t\t\t\r", "-\tif (selectionStyle.start + selectionStyle.length > selectionEnd) {\r", "-\t\tint styleEnd = style.start + style.length;\t\r", "-\t\tselectionStyle.length = selectionEnd - selectionStyle.start;\r", "-\t\t// preserve rest (unselected part) of old style\t\t\t\t\t\r", "-\t\tnewStyle = (StyleRange) style.clone();\r", "-\t\tnewStyle.start = selectionEnd;\r", "-\t\tnewStyle.length = styleEnd - selectionEnd;\r", "-\t}\r", "-\treturn newStyle;\t\t\t\t\r", "-}\r"]}], "num": 59766}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b1626cd6127e4a5b39a59b0006009181", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c3addf1bdd3ff1605a98e6e09c2a201", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Decorations.java", "commitBeforeChange": "e3b3895ab4dae7d82ff4ee1965153f9ffdacb4b6", "commitAfterChange": "01f2a277618f1956f9a104e730dbfc9ec2828935", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " private void loadImages()", "signatureAfterChange": " private void loadImages()", "diff": ["-\timages [0] = new Image (shell.getDisplay(), this.getClass().getResourceAsStream(\"folder.bmp\"));", "-\timages [1] = new Image (shell.getDisplay(), this.getClass().getResourceAsStream(\"folderOpen.bmp\"));", "-\timages [2] = new Image (shell.getDisplay(), this.getClass().getResourceAsStream(\"target.bmp\"));", "+\tint numFormats = SwtTestCase.imageFormats.length;", "+\tint numFiles = SwtTestCase.imageFilenames.length;", "+\tfor (int i=0; i<numFormats; i++) {", "+\t\tString format = SwtTestCase.imageFormats[i];", "+\t\tint index = i*numFiles;", "+\t\tfor (int j=0; j<numFiles; j++){", "+\t\t\tString fileName = SwtTestCase.imageFilenames[j];", "+\t\t\tInputStream  resource = this.getClass().getResourceAsStream(fileName + \".\" + format);", "+\t\t\timages [index+j] = new Image (shell.getDisplay(), resource);", "+\t\t\ttry {", "+\t\t\t\tresource.close();", "+\t\t\t} catch (IOException e) {", "+\t\t\t\t// continue;", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdead20759609688d1e248a3374650bc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Item.java", "commitBeforeChange": "e3b3895ab4dae7d82ff4ee1965153f9ffdacb4b6", "commitAfterChange": "01f2a277618f1956f9a104e730dbfc9ec2828935", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  private void loadImages()", "signatureAfterChange": "  private void loadImages()", "diff": ["-\tjava.io.InputStream in1 = this.getClass().getResourceAsStream(\"folder.bmp\");", "-\tjava.io.InputStream in2 = this.getClass().getResourceAsStream(\"folderOpen.bmp\");", "-\tjava.io.InputStream in3 = this.getClass().getResourceAsStream(\"target.bmp\");", "-\tDisplay display = shell.getDisplay();", "-\t\t", "-\timages [0] = new Image (display, in1);", "-\timages [1] = new Image (display, in2);", "-\timages [2] = new Image (display, in3);", "-\t", "-\ttry {", "-\t\tin1.close();", "-\t\tin2.close();", "-\t\tin3.close();", "-\t} catch (java.io.IOException e) {", "+\tint numFormats = SwtTestCase.imageFormats.length;", "+\tint numFiles = SwtTestCase.imageFilenames.length;", "+\tfor (int i=0; i<numFormats; i++) {", "+\t\tString format = SwtTestCase.imageFormats[i];", "+\t\tint index = i*numFiles;", "+\t\tfor (int j=0; j<numFiles; j++){", "+\t\t\tString fileName = SwtTestCase.imageFilenames[j];", "+\t\t\tInputStream  resource = this.getClass().getResourceAsStream(fileName + \".\" + format);", "+\t\t\timages [index+j] = new Image (shell.getDisplay(), resource);", "+\t\t\ttry {", "+\t\t\t\tresource.close();", "+\t\t\t} catch (IOException e) {", "+\t\t\t\t// continue;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff821a1b6e5653059d5f4436be1b7bf2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d88bc7bef37e428853c15bf36b0103c751679a13", "commitAfterChange": "b78246feba55dea5042f20ef13079a6a48d963c7", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public Point map (Control from, Control to, int x, int y)", "signatureAfterChange": " public Point map (Control from, Control to, int x, int y)", "diff": ["-\t\t\tShell shell = to.getShell ();", "-\t\t\tPoint shellLocation = shell.getLocation ();", "-\t\t\tint point = OS.gcnew_Point (x - shellLocation.x, y - shellLocation.y);", "-\t\t\tto.updateLayout (to.topHandle ());", "-\t\t\tint newPoint = OS.UIElement_TranslatePoint (shell.shellHandle, point, to.topHandle ());", "-\t\t\tnewX = (int) (OS.Point_X (newPoint) + 0.5);", "-\t\t\tnewY = (int) (OS.Point_Y (newPoint) + 0.5);", "-\t\t\tOS.GCHandle_Free (point);", "-\t\t\tOS.GCHandle_Free (newPoint);", "-\t\t} else {", "-\t\t\tShell shell = from.getShell ();", "-\t\t\tPoint shellLocation = shell.getLocation ();", "+\t\t\tint topHandle = to.topHandle ();", "+\t\t\tint window = OS.Window_GetWindow (topHandle);", "-\t\t\tfrom.updateLayout (from.topHandle ());", "-\t\t\tint newPoint = OS.UIElement_TranslatePoint (from.topHandle (), point, shell.shellHandle);", "-\t\t\tnewX = (int) (OS.Point_X (newPoint) + 0.5) + shellLocation.x;", "-\t\t\tnewY = (int) (OS.Point_Y (newPoint) + 0.5) + shellLocation.y;", "+\t\t\tint temp = OS.Visual_PointFromScreen (window, point);", "+\t\t\tto.updateLayout (topHandle);", "+\t\t\tint newPoint = OS.UIElement_TranslatePoint (window, temp, topHandle);", "+\t\t\tnewX = (int) OS.Point_X (newPoint);", "+\t\t\tnewY = (int) OS.Point_Y (newPoint);", "+\t\t\tOS.GCHandle_Free (temp);", "+\t\t\tOS.GCHandle_Free(window);", "+\t\t} else {", "+\t\t\tint topHandle = from.topHandle ();", "+\t\t\tint window = OS.Window_GetWindow (topHandle);", "+\t\t\tint point = OS.gcnew_Point(x, y);", "+\t\t\tfrom.updateLayout (topHandle);", "+\t\t\tint temp = OS.UIElement_TranslatePoint (topHandle, point, window);", "+\t\t\tint newPoint = OS.Visual_PointToScreen (window, temp);", "+\t\t\tnewX = (int) OS.Point_X (newPoint);", "+\t\t\tnewY = (int) OS.Point_Y (newPoint);", "+\t\t\tOS.GCHandle_Free (temp);", "+\t\t\tOS.GCHandle_Free (point);", "+\t\t\tOS.GCHandle_Free (newPoint);", "+\t\t\tOS.GCHandle_Free(window);"]}], "num": 15905}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27af6c81c7d02dbfaf030d09ff224294", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbebdd3fafdedcb79d84f4964c63d265", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/carbon/org/eclipse/swt/program/Program.java", "commitBeforeChange": "86d77d917541a2d2b84ec236cdf0cb38e78c0ddb", "commitAfterChange": "8c17c0dc0cfa02ca9270578b50ada2ac195f1744", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public static Program [] getPrograms ()", "signatureAfterChange": " public static Program [] getPrograms ()", "diff": ["-\tif (OS.VERSION < 0x1040) {", "-\t\tfor (int i = 0; i < extensions.length; i++) {", "-\t\t\tProgram program = findProgram(extensions[i]);", "-\t\t\tif (program != null && bundles.get(program.getName()) == null) {", "-\t\t\t\tbundles.put(program.getName(), program);", "+\tbyte[] fsRef = new byte[80];", "+\tfor (int i = 0; i < extensions.length; i++) {", "+\t\tString extension = extensions[i];", "+\t\tchar[] chars = new char[extension.length() - 1];", "+\t\textension.getChars(1, extension.length(), chars, 0);", "+\t\tint ext = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, chars.length);", "+\t\tif (ext != 0) {", "+\t\t\tif (OS.LSGetApplicationForInfo(OS.kLSUnknownType, OS.kLSUnknownCreator, ext, OS.kLSRolesAll, fsRef, null) == OS.noErr) {", "+\t\t\t\tProgram program = getProgram(fsRef);", "+\t\t\t\tif (program != null && bundles.get(program.getName()) == null) {", "+\t\t\t\t\tbundles.put(program.getName(), program);", "+\t\t\t\t\tfsRef = new byte[80];", "+\t\t\t\t}", "-\t\t}", "-\t} else {", "-\t\tfor (int i = 0; i < extensions.length; i++) {", "-\t\t\tString extension = extensions[i];", "-\t\t\tchar[] chars = new char[extension.length() - 1];", "-\t\t\textension.getChars(1, extension.length(), chars, 0);", "-\t\t\tint ext = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, chars.length);", "-\t\t\tif (ext != 0) {", "+\t\t\tif (OS.VERSION >= 0x1040) {", "-\t\t\t\t\t\t\t\t\tif (app != 0) {", "-\t\t\t\t\t\t\t\t\t\tint length = OS.CFStringGetLength(app);", "-\t\t\t\t\t\t\t\t\t\tif (length != 0) {", "-\t\t\t\t\t\t\t\t\t\t\tchar[] buffer= new char[length];", "-\t\t\t\t\t\t\t\t\t\t\tCFRange range = new CFRange();", "-\t\t\t\t\t\t\t\t\t\t\trange.length = length;", "-\t\t\t\t\t\t\t\t\t\t\tOS.CFStringGetCharacters(app, range, buffer);", "-\t\t\t\t\t\t\t\t\t\t\tString bundleID = new String(buffer);", "-\t\t\t\t\t\t\t\t\t\t\tif (bundles.get(bundleID) == null) {", "-\t\t\t\t\t\t\t\t\t\t\t\tbyte[] fsRef = new byte[80];", "-\t\t\t\t\t\t\t\t\t\t\t\tif (OS.LSFindApplicationForInfo(OS.kLSUnknownCreator, app,\t0, fsRef, null) == OS.noErr) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tProgram program = getProgram(fsRef);", "-\t\t\t\t\t\t\t\t\t\t\t\t\tbundles.put(bundleID, program);", "-\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (app != 0) {;", "+\t\t\t\t\t\t\t\t\t\tif (OS.LSFindApplicationForInfo(OS.kLSUnknownCreator, app, 0, fsRef, null) == OS.noErr) {", "+\t\t\t\t\t\t\t\t\t\t\tProgram program = getProgram(fsRef);", "+\t\t\t\t\t\t\t\t\t\t\tif (program != null && bundles.get(program.getName()) == null) {", "+\t\t\t\t\t\t\t\t\t\t\t\tbundles.put(program.getName(), program);", "+\t\t\t\t\t\t\t\t\t\t\t\tfsRef = new byte[80];", "-\t\t\t\tOS.CFRelease(ext);", "+\t\t\tOS.CFRelease(ext);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ede958b5d9a5d346b64e4d0236da7dd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "a95be7c50f695a73a58d9ded8bbfb5d9f9919f09", "commitAfterChange": "b1b0fd9b80ca15010164104d137cbaa93bd3ed64", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\tRectangle bounds = image.getBounds();", "+\t\tRectangle bounds = image.getBounds ();", "-\t\tOS.CopyControlTitleAsCFString(handle, ptr);", "+\t\tOS.CopyControlTitleAsCFString (handle, ptr);", "+\t\t\torg.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point ();", "-\t\t\t\torg.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point ();", "-\t\t\t\tshort [] baseLine = new short [1];", "-\t\t\t\tOS.GetThemeTextDimensions(ptr [0], (short)OS.kThemePushButtonFont, OS.kThemeStateActive, false, ioBounds, baseLine);", "-\t\t\t\twidth = ioBounds.h;", "-\t\t\t\theight = ioBounds.v;", "+\t\t\t\tOS.GetThemeTextDimensions (ptr [0], (short)OS.kThemePushButtonFont, OS.kThemeStateActive, false, ioBounds, null);", "-\t\t\t\t// NEEDS WORK - alternatively we could use GetThemeTextDimensions with OS.kThemeCurrentPortFont", "-\t\t\t\tint length = OS.CFStringGetLength (ptr [0]);", "-\t\t\t\tchar [] buffer = new char [length];", "-\t\t\t\tCFRange range = new CFRange ();", "-\t\t\t\trange.length = length;", "-\t\t\t\tOS.CFStringGetCharacters (ptr [0], range, buffer);", "-\t\t\t\tString string = new String (buffer);", "-\t\t\t\tGC gc = new GC (this);", "-\t\t\t\tPoint extent = gc.stringExtent (string);", "-\t\t\t\tgc.dispose ();", "-\t\t\t\twidth = extent.x;", "-\t\t\t\theight = extent.y;", "+\t\t\t\tint [] currentPort = new int [1];", "+\t\t\t\tOS.GetPort (currentPort);", "+\t\t\t\tOS.SetPortWindowPort (OS.GetControlOwner (handle));", "+\t\t\t\tOS.TextFont (font.id);", "+\t\t\t\tOS.TextFace (font.style);", "+\t\t\t\tOS.TextSize (font.size);", "+\t\t\t\tOS.GetThemeTextDimensions (ptr [0], (short) OS.kThemeCurrentPortFont, OS.kThemeStateActive, false, ioBounds, null);", "+\t\t\t\tOS.SetPort (currentPort [0]);", "+\t\t\twidth = ioBounds.h;", "+\t\t\theight = ioBounds.v;", "-\t\theight = Math.max(outMetric [0], height);", "+\t\theight = Math.max (outMetric [0], height);"]}], "num": 38338}
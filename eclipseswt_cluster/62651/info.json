{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e54e55ffe8f9fadaee765938adddbc77", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b214d94d4106d2affdf237fbbb341416", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "423a36e37688f41acabc783a91a84fabfbeab92d", "commitAfterChange": "643c8a72b95aea7aef5cc3f99f76de67e13053f2", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r public void setContents(Object[] data, Transfer[] dataTypes)", "signatureAfterChange": "  public void setContents(Object[] data, Transfer[] dataTypes)", "diff": ["-\r", "-public void setContents(Object[] data, Transfer[] dataTypes){\r", "-\tif (data == null || dataTypes == null || data.length != dataTypes.length) {\r", "-\t\tDND.error(SWT.ERROR_INVALID_ARGUMENT);\r", "-\t}\r", "-\tif (display.isDisposed() ) DND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);\r", "-\tif (dataTypes.length == 0) return;\t\r", "-\t\r", "-\tif (onClipboard) {\r", "-\t\tOS.gtk_clipboard_clear(pGtkClipboard);\r", "-\t}\r", "-\tif (onPrimary) {\r", "-\t\tOS.gtk_clipboard_clear(pGtkPrimary);\r", "-\t}\r", "-\t\t\r", "-\tGtkTargetEntry[] entries = new  GtkTargetEntry [0];\r", "-\tfor (int i = 0; i < dataTypes.length; i++) {\r", "-\t\tTransfer transfer = dataTypes[i];\r", "-\t\tint[] typeIds = transfer.getTypeIds();\r", "-\t\tString[] typeNames = transfer.getTypeNames();\r", "-\t\tfor (int j = 0; j < typeIds.length; j++) {\r", "-\t\t\tGtkTargetEntry\tentry = new GtkTargetEntry();\t\t\t\t\t\t\r", "-\t\t\tentry.info = typeIds[j];\r", "-\t\t\tbyte[] buffer = Converter.wcsToMbcs(null, typeNames[j], true);\r", "-\t\t\tint pName = OS.g_malloc(buffer.length);\r", "-\t\t\tOS.memmove(pName, buffer, buffer.length);\r", "-\t\t\tentry.target = pName;\r", "-\t\t\tGtkTargetEntry[] tmp = new GtkTargetEntry [entries.length + 1];\r", "-\t\t\tSystem.arraycopy(entries, 0, tmp, 0, entries.length);\r", "-\t\t\ttmp[entries.length] = entry;\r", "-\t\t\tentries = tmp;\t\t\t\t\r", "-\t\t}\t\r", "-\t}\r", "-\t\r", "-\tint pTargetsList = OS.g_malloc(GtkTargetEntry.sizeof * entries.length);\r", "-\tint offset = 0;\r", "-\tfor (int i = 0; i < entries.length; i++) {\r", "-\t\tOS.memmove(pTargetsList + offset, entries[i], GtkTargetEntry.sizeof);\r", "-\t\toffset += GtkTargetEntry.sizeof;\r", "-\t}\r", "-\r", "-\tthis.data = data;\r", "-\tthis.dataTypes = dataTypes;\r", "-\r", "-\tonPrimary = OS.gtk_clipboard_set_with_data(pGtkPrimary, pTargetsList, entries.length, getFunc.getAddress(), clearFunc.getAddress(), 0);\r", "-\tonClipboard = OS.gtk_clipboard_set_with_data(pGtkClipboard, pTargetsList, entries.length, getFunc.getAddress(), clearFunc.getAddress(), 0);\r", "-\t\r", "-\tfor (int i = 0; i < entries.length; i++) {\r", "-\t\tGtkTargetEntry entry = entries[i];\r", "-\t\tif( entry.target != 0) OS.g_free(entry.target);\r", "-\t}\r", "-\tif (pTargetsList != 0) OS.g_free(pTargetsList);\r", "-\t\r", "-\tif (!onClipboard && !onPrimary) DND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);\r", "-}\r", "+", "+public void setContents(Object[] data, Transfer[] dataTypes){", "+\tif (data == null || dataTypes == null || data.length != dataTypes.length) {", "+\t\tDND.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t}", "+\tif (display.isDisposed() ) DND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);", "+\tif (dataTypes.length == 0) return;", "+\tClipboardProxy proxy = ClipboardProxy._getInstance(display);", "+\tif (!proxy.setData(data, dataTypes)) {", "+\t\tDND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fffe6be593c39af821c5e8f98000f1ce", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/ClipboardProxy.java", "commitBeforeChange": "e8e496688365659f6f10cecb41db672d7b7c7717", "commitAfterChange": "c5a23ecaba2cdfd1fefa27b27aa4e1ff7bc8c317", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": " boolean setData(Object[] data, Transfer[] dataTypes)", "signatureAfterChange": "  boolean setData(Object[] data, Transfer[] dataTypes, int clipboards)", "diff": ["-\tif (onClipboard) {\t", "-\t\tOS.gtk_clipboard_clear(Clipboard.GTKCLIPBOARD);", "-\t}", "-\tif (onPrimary) {", "-\t\tOS.gtk_clipboard_clear(Clipboard.GTKPRIMARYCLIPBOARD);", "-\t}", "-\t\t", "+", "+boolean setData(Object[] data, Transfer[] dataTypes, int clipboards) {\t", "-\tfor (int i = 0; i < dataTypes.length; i++) {", "-\t\tTransfer transfer = dataTypes[i];", "-\t\tint[] typeIds = transfer.getTypeIds();", "-\t\tString[] typeNames = transfer.getTypeNames();", "-\t\tfor (int j = 0; j < typeIds.length; j++) {", "-\t\t\tGtkTargetEntry\tentry = new GtkTargetEntry();\t\t\t\t\t\t", "-\t\t\tentry.info = typeIds[j];", "-\t\t\tbyte[] buffer = Converter.wcsToMbcs(null, typeNames[j], true);", "-\t\t\tint /*long*/ pName = OS.g_malloc(buffer.length);", "-\t\t\tOS.memmove(pName, buffer, buffer.length);", "-\t\t\tentry.target = pName;", "-\t\t\tGtkTargetEntry[] tmp = new GtkTargetEntry [entries.length + 1];", "-\t\t\tSystem.arraycopy(entries, 0, tmp, 0, entries.length);", "-\t\t\ttmp[entries.length] = entry;", "-\t\t\tentries = tmp;\t\t\t\t", "-\t\t}\t", "+\tint /*long*/ pTargetsList = 0;", "+\tboolean result = false;", "+\ttry {", "+\t\tfor (int i = 0; i < dataTypes.length; i++) {", "+\t\t\tTransfer transfer = dataTypes[i];", "+\t\t\tint[] typeIds = transfer.getTypeIds();", "+\t\t\tString[] typeNames = transfer.getTypeNames();", "+\t\t\tfor (int j = 0; j < typeIds.length; j++) {", "+\t\t\t\tGtkTargetEntry\tentry = new GtkTargetEntry();\t\t\t\t\t\t", "+\t\t\t\tentry.info = typeIds[j];", "+\t\t\t\tbyte[] buffer = Converter.wcsToMbcs(null, typeNames[j], true);", "+\t\t\t\tint /*long*/ pName = OS.g_malloc(buffer.length);", "+\t\t\t\tOS.memmove(pName, buffer, buffer.length);", "+\t\t\t\tentry.target = pName;", "+\t\t\t\tGtkTargetEntry[] tmp = new GtkTargetEntry [entries.length + 1];", "+\t\t\t\tSystem.arraycopy(entries, 0, tmp, 0, entries.length);", "+\t\t\t\ttmp[entries.length] = entry;", "+\t\t\t\tentries = tmp;\t\t\t\t", "+\t\t\t}\t", "+\t\t}", "+\t\t", "+\t\tpTargetsList = OS.g_malloc(GtkTargetEntry.sizeof * entries.length);", "+\t\tint offset = 0;", "+\t\tfor (int i = 0; i < entries.length; i++) {", "+\t\t\tOS.memmove(pTargetsList + offset, entries[i], GtkTargetEntry.sizeof);", "+\t\t\toffset += GtkTargetEntry.sizeof;", "+\t\t}", "+\t\tif ((clipboards & DND.CLIPBOARD) != 0) {", "+\t\t\tif (onClipboard) OS.gtk_clipboard_clear(Clipboard.GTKCLIPBOARD);", "+\t\t\tclipboardData = data;", "+\t\t\tclipboardDataTypes = dataTypes;", "+\t\t\tresult = onClipboard = OS.gtk_clipboard_set_with_data(Clipboard.GTKCLIPBOARD, pTargetsList, entries.length, getFunc.getAddress(), clearFunc.getAddress(), 0);", "+\t\t}", "+\t\tif ((clipboards & DND.SELECTION_CLIPBOARD) != 0) {", "+\t\t\tif (onPrimary) OS.gtk_clipboard_clear(Clipboard.GTKPRIMARYCLIPBOARD);", "+\t\t\tprimaryClipboardData = data;", "+\t\t\tprimaryClipboardDataTypes = dataTypes;", "+\t\t\tresult = onPrimary = OS.gtk_clipboard_set_with_data(Clipboard.GTKPRIMARYCLIPBOARD, pTargetsList, entries.length, getFunc.getAddress(), clearFunc.getAddress(), 0);", "+\t\t}", "+\t\t", "+\t} finally {", "+\t\tfor (int i = 0; i < entries.length; i++) {", "+\t\t\tGtkTargetEntry entry = entries[i];", "+\t\t\tif( entry.target != 0) OS.g_free(entry.target);", "+\t\t}", "+\t\tif (pTargetsList != 0) OS.g_free(pTargetsList);", "-\t", "-\tint /*long*/ pTargetsList = OS.g_malloc(GtkTargetEntry.sizeof * entries.length);", "-\tint offset = 0;", "-\tfor (int i = 0; i < entries.length; i++) {", "-\t\tOS.memmove(pTargetsList + offset, entries[i], GtkTargetEntry.sizeof);", "-\t\toffset += GtkTargetEntry.sizeof;", "-\t}", "-", "-\tthis.data = data;", "-\tthis.dataTypes = dataTypes;", "-", "-\tonPrimary = OS.gtk_clipboard_set_with_data(Clipboard.GTKPRIMARYCLIPBOARD, pTargetsList, entries.length, getFunc.getAddress(), clearFunc.getAddress(), 0);", "-\tonClipboard = OS.gtk_clipboard_set_with_data(Clipboard.GTKCLIPBOARD, pTargetsList, entries.length, getFunc.getAddress(), clearFunc.getAddress(), 0);", "-\t", "-\tfor (int i = 0; i < entries.length; i++) {", "-\t\tGtkTargetEntry entry = entries[i];", "-\t\tif( entry.target != 0) OS.g_free(entry.target);", "-\t}", "-\tif (pTargetsList != 0) OS.g_free(pTargetsList);", "-\t", "-\treturn (onClipboard && onPrimary);", "+\treturn result;"]}], "num": 62651}
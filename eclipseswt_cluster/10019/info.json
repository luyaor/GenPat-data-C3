{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5308149a21701cf8963275e0d5ececcc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5ecddd08864fe22b07109d97e40eb0e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Group.java", "commitBeforeChange": "915780e93536b69764c4dbeedaf055ff446243b3", "commitAfterChange": "53a72a1e26ee8b5bafe3e8ea17f31ca574a7582b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+\tint textInset = 0;", "+\tif (length > 0) {", "+\t\t/* In the (rare) case where the text is wider than the client area,", "+\t\t * allow room for one average character to the right of the text.", "+\t\t */", "+\t\tTEXTMETRIC tm = OS.IsUnicode ? (TEXTMETRIC) new TEXTMETRICW () : new TEXTMETRICA ();", "+\t\tOS.GetTextMetrics (hDC, tm);", "+\t\ttextInset = tm.tmAveCharWidth;", "+\t}", "-\twidth = Math.max (trim.width, rect.right - rect.left + 6);", "+\twidth = Math.max (trim.width, rect.right - rect.left + INSET * 2 + textInset);", "+\tint border = getBorderWidth ();", "+\twidth += border * 2; height += border * 2;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6694094b8df544db2a03c910a381e498", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "0519b301515901148cc1199b76a3200406342671", "commitAfterChange": "dda200f74dfa766ae79378364929a02abde88b6b", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 82, "signatureBeforeChange": "  @Override boolean updateTextDirection(int textDirection)", "signatureAfterChange": "  boolean updateTextDirection(int textDirection)", "diff": ["-@Override", "-\tif (textDirection == AUTO_TEXT_DIRECTION) {", "-\t\tint length = OS.GetWindowTextLength (handle);", "-\t\tif (length > 0) {", "-\t\t\tTCHAR buffer = new TCHAR (getCodePage (), length + 1);", "-\t\t\tOS.GetWindowText (handle, buffer, length + 1);", "-\t\t\tif (segments != null) {", "-\t\t\t\tbuffer = deprocessText (buffer, 0, -1, false);", "-\t\t\t\ttextDirection = resolveTextDirection(buffer.toString ());", "-\t\t\t} else {", "-\t\t\t\ttextDirection = resolveTextDirection(buffer.toString (0, length));", "-\t\t\t}", "-\t\t\tif (textDirection == SWT.NONE) {", "-\t\t\t\t/*", "-\t\t\t\t * Force direction update also when no strong bidi chars are", "-\t\t\t\t * found.", "-\t\t\t\t */", "-\t\t\t\ttextDirection = (style & SWT.RIGHT_TO_LEFT) != 0 ? SWT.RIGHT_TO_LEFT : SWT.LEFT_TO_RIGHT;", "-\t\t\t}", "-\t\t}", "-\t\tstate |= HAS_AUTO_DIRECTION;", "-\t} else {", "-\t\tstate &= ~HAS_AUTO_DIRECTION;", "-\t}"]}], "num": 10019}
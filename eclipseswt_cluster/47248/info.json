{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ad0405a9a40a4412c971985e771ea32", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5253f7249d00aabf270cec8a7accd9f6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "98b86bf34bfb26fea9d906f83757cf0c8fc5f7bd", "commitAfterChange": "ce138c7e1fb0d889814afbd2a7603dfa7d22605f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void initNative(String filename)", "signatureAfterChange": "  void initNative(String filename)", "diff": ["+\t\tif (!nativeRep.isKindOfClass(OS.class_NSBitmapImageRep)) {", "+\t\t\treturn;", "+\t\t}", "+", "-", "-\t\tnativeImage.setSize(size);", "-\t\trep.setAlpha(false);", "-\t\tNSGraphicsContext context = NSGraphicsContext.graphicsContextWithBitmapImageRep(rep);", "-\t\tNSGraphicsContext.static_saveGraphicsState();", "-\t\tNSGraphicsContext.setCurrentContext(context);", "-\t\tnativeImage.drawInRect(rect, rect, OS.NSCompositeCopy, 1);", "- \t\tNSGraphicsContext.static_restoreGraphicsState();", "- \t\trep.setAlpha(hasAlpha);", "+", "+\t\t/* Compute the pixels */", "+\t\tint /*long*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "+\t\tint /*long*/ ctx = OS.CGBitmapContextCreate(rep.bitmapData(), width, height, 8, bpr, colorspace, OS.kCGImageAlphaNoneSkipFirst);", "+\t\tOS.CGColorSpaceRelease(colorspace);", "+\t\tNSGraphicsContext.static_saveGraphicsState();", "+\t\tNSGraphicsContext.setCurrentContext(NSGraphicsContext.graphicsContextWithGraphicsPort(ctx, false));", "+\t\tif (hasAlpha) OS.objc_msgSend(nativeRep.id, OS.sel_setAlpha_, 0);", "+\t\tnativeRep.drawInRect(rect);", "+\t\tif (hasAlpha) OS.objc_msgSend(nativeRep.id, OS.sel_setAlpha_, 1);", "+\t\tNSGraphicsContext.static_restoreGraphicsState();", "+\t\tOS.CGContextRelease(ctx);", "-\t\t\t// Compute any alpha by using CGImageBitmapContext.", "+\t\t\t/* Compute the alpha values */", "-\t\t\tnativeImage.drawInRect(rect, new NSRect(), OS.NSCompositeCopy, 1.0f);", "+\t\t\tnativeRep.drawInRect(rect);", "+\t\t\t/* Merge the alpha values with the pixels */", "+\t\t\tbyte[] srcData = new byte[height * bpr];", "+\t\t\tOS.memmove(srcData, rep.bitmapData(), srcData.length);", "+\t\t\tfor (int a = 0, p = 0; a < alphaData.length; a++, p += 4) {", "+\t\t\t\tsrcData[p] = alphaData[a];", "+\t\t\t}", "+\t\t\tOS.memmove(rep.bitmapData(), srcData, srcData.length);", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20359b6e11b0aeea63d395a324154a15", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "30da8be87bc22b7280e4efbcaf1c8144d67dba2a", "commitAfterChange": "527998c9e4be5c58a908b0f0d6081466df8efc7f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  LRESULT CDDS_ITEMPREPAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT CDDS_ITEMPREPAINT (int wParam, int lParam)", "diff": ["-\t\ttextColor = -1;", "-\t\tignoreDraw = ignoreDrawSelected = false;", "+\t\tselectionForeground = -1;", "+\t\tignoreDraw = ignoreDrawSelection = ignoreDrawBackground = false;", "-\t\t\tRECT cellRect = item.getBounds (index, true, true, true, true, true, hDC);", "+\t\t\tRECT cellRect = null;", "+\t\t\tif ((style & SWT.FULL_SELECTION) != 0 && count == 0) {", "+\t\t\t\tcellRect = item.getBounds (index, true, true, true, true, true, hDC);", "+\t\t\t} else {", "+\t\t\t\tcellRect = item.getBounds (index, true, true, false, false, true, hDC);", "+\t\t\t}", "-\t\t\tdata.foreground = clrText != -1 ? clrText : OS.GetTextColor (hDC);", "-\t\t\tdata.background = clrTextBk != -1 ? clrTextBk : OS.GetBkColor (hDC);", "+\t\t\tdata.foreground = OS.GetTextColor (hDC);", "+\t\t\tdata.background = OS.GetBkColor (hDC);", "+\t\t\tif (!selected) {", "+\t\t\t\tif (clrText != -1) data.foreground = clrText;", "+\t\t\t\tif (clrTextBk != -1) data.background = clrTextBk;", "+\t\t\t}", "+\t\t\tevent.detail |= SWT.FOREGROUND;", "+\t\t\tif (clrTextBk != -1) event.detail |= SWT.BACKGROUND;", "-\t\t\tif ((nmcd.uItemState & OS.CDIS_FOCUS) != 0) event.detail |= SWT.FOCUSED;", "+\t\t\tif ((nmcd.uItemState & OS.CDIS_FOCUS) != 0) {", "+\t\t\t\tif (/*nmcd.iSubItem == 0 ||*/ (style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\tif (handle == OS.GetFocus ()) {", "+\t\t\t\t\t\tint uiState = OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "+\t\t\t\t\t\tif ((uiState & OS.UISF_HIDEFOCUS) == 0) event.detail |= SWT.FOCUSED;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\tignoreDraw = !event.doit;", "-\t\t\tif ((event.detail & SWT.SELECTED) != 0) {", "+\t\t\tignoreDraw = (event.detail & SWT.FOREGROUND) == 0;", "+\t\t\tignoreDrawSelection = (event.detail & SWT.SELECTED) == 0;", "+\t\t\tignoreDrawBackground = (event.detail & SWT.BACKGROUND) == 0;", "+\t\t\tif (!selected && !ignoreDrawBackground && clrTextBk != -1) {", "+\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0 && count == 0) {", "+\t\t\t\t\tfillBackground (hDC, clrTextBk, rect);", "+\t\t\t\t} else {", "+\t\t\t\t\tRECT backgroundRect = item.getBounds (index, true, false, true, false, true, hDC);", "+\t\t\t\t\tfillBackground (hDC, clrTextBk, backgroundRect);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (!ignoreDrawSelection) {", "-\t\t\t\t\ttextColor = clrText = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "+\t\t\t\t\tselectionForeground = clrText = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "-\t\t\t\t\ttextColor = clrText = newTextClr;", "-\t\t\t\t\tignoreDrawSelected = true;", "+\t\t\t\t\tselectionForeground = clrText = newTextClr;", "+\t\t\t\t\tignoreDrawSelection = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a32285f6576798776a2b4389c35b90c0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r void init (Device device, FontData fd)", "signatureAfterChange": "\r void init (Device device, FontData fd)", "diff": ["-\tbyte[] buffer = Converter.wcsToMbcs(null, fd.getXlfd(), true);\r", "-\tboolean warnings = device.getWarnings();\r", "-\tdevice.setWarnings(false);\r", "-\tint fontListEntry = OS.XmFontListEntryLoad(device.xDisplay, buffer, 0, OS.XmFONTLIST_DEFAULT_TAG);\r", "-\tdevice.setWarnings(warnings);\r", "+\tint xDisplay = device.xDisplay;\r", "+\tint fontStruct = loadFont(xDisplay, fd);\r", "+\tif (fontStruct == 0) {\r", "+\t\t/*\r", "+\t\t* If the desired font can not be loaded, the XLFD fields are wildcard\r", "+\t\t* in order to preserve the font style and height. If there is no\r", "+\t\t* font with the desired style and height, the slant, weight and points\r", "+\t\t* are wildcard in that order, until a font can be loaded.\r", "+\t\t*/\r", "+\t\tFontData newFD = new FontData();\r", "+\t\tnewFD.slant = fd.slant;\r", "+\t\tnewFD.weight = fd.weight;\r", "+\t\tnewFD.points = fd.points;\r", "+\t\tnewFD.characterSetName = fd.characterSetName;\r", "+\t\tif (newFD.characterSetName == null) {\r", "+\t\t\tnewFD.characterSetName = device.characterSetName;\r", "+\t\t}\r", "+\t\tnewFD.characterSetRegistry = fd.characterSetRegistry;\r", "+\t\tif (newFD.characterSetRegistry == null) {\r", "+\t\t\tnewFD.characterSetRegistry = device.characterSetRegistry;\r", "+\t\t}\r", "+\t\tfontStruct = matchFont(xDisplay, newFD);\r", "+\r", "+\t\t/* Failed to load any font. Use the system font. */\r", "+\t\tif (fontStruct == 0) {\r", "+\t\t\thandle = device.systemFont;\r", "+\t\t\tif (handle != 0) return;\r", "+\t\t}\r", "+\t}\r", "+\tif (fontStruct == 0) SWT.error(SWT.ERROR_NO_HANDLES);\r", "+\tint fontListEntry = OS.XmFontListEntryCreate(OS.XmFONTLIST_DEFAULT_TAG, OS.XmFONT_IS_FONT, fontStruct);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "697af9fafdf7b0a3f2e3ad1089067cb1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "4dcd23c7083750557eb8f456083b724778c10df8", "commitAfterChange": "eed0ff404f9aa1a3c7d37ab235cbaa503bcde355", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public boolean dragDetect (int button, int stateMask, int x, int y)", "signatureAfterChange": "  boolean dragDetect (int button, int count, int stateMask, int x, int y)", "diff": ["- */", "-public boolean dragDetect (int button, int stateMask, int x, int y) {", "-\tcheckWidget ();", "-\treturn dragDetect (button, 1, stateMask, x, y);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1795f2272b2caf83fd60b33fc14dcdc0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "7a26d49f7fcf65bf8625393f1af4a67b482a7c35", "commitAfterChange": "c204154909a9d6903f66ea2c97f8cb0cb5eaa814", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["+\tint parentHandle = parent.parentingHandle ();", "+\t\tOS.gtk_container_add (parentHandle, handle);", "+\t\tOS.gtk_entry_set_editable (handle, (style & SWT.READ_ONLY) == 0);", "+\t\tfixedHandle = OS.gtk_fixed_new ();", "+\t\tif (fixedHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.gtk_fixed_set_has_window (fixedHandle, true);", "+\t\tOS.gtk_container_add (parentHandle, fixedHandle);", "+\t\tOS.gtk_container_add (fixedHandle, scrolledHandle);", "+\t\tOS.gtk_container_add (scrolledHandle, handle);", "+\t\tOS.gtk_widget_show (fixedHandle);", "+\t\tOS.gtk_widget_show (scrolledHandle);", "+\t\tOS.gtk_text_set_editable (handle, (style & SWT.READ_ONLY) == 0);", "+\t\tOS.gtk_text_set_word_wrap (handle, (style & SWT.WRAP) != 0 ? 1 : 0);", "+\t\tint hsp = (style & SWT.H_SCROLL) == 0 ? OS.GTK_POLICY_NEVER : OS.GTK_POLICY_AUTOMATIC;", "+\t\tint vsp = (style & SWT.V_SCROLL) == 0 ? OS.GTK_POLICY_NEVER : OS.GTK_POLICY_AUTOMATIC;", "+\t\tOS.gtk_scrolled_window_set_policy (scrolledHandle, hsp, vsp);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c98e48e028decd751005228c1be3e88", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "31688c68d3a4f46048f3504cdb5812f8b9066e99", "commitAfterChange": "bf8ec00c7e0997467c4d951702784d000849bf7f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\twidth += result.width;", "-\theight += result.height;", "-    */", "+\t*/", "+\tPoint result= MacUtil.computeSize(handle);", "+\tif ((style & SWT.PUSH) != 0) {", "+\t\tif (MacUtil.JAGUAR) {", "+\t\t\t", "+\t\t} else {", "+\t\t\tString s= getText();", "+\t\t\tif (s != null && s.length() > 0) {", "+\t\t\t\tGC gc= new GC(this);", "+\t\t\t\tresult= gc.textExtent(s);", "+\t\t\t\tgc.dispose();", "+\t\t\t} else if (image != null) {", "+\t\t\t\tRectangle bounds= image.getBounds();", "+\t\t\t\tresult.x= bounds.width;", "+\t\t\t\tresult.y= bounds.height;", "+\t\t\t}", "+\t\t\tresult.x= SHADOW_WIDTH + 16 + result.x + 16 + SHADOW_WIDTH;", "+\t\t\tresult.y= SHADOW_HEIGHT + 4 + result.y + 4 + SHADOW_HEIGHT;", "+\t\t}", "+\t}", "+\twidth += result.x;", "+\theight += result.y;", "+\t*/", "+\t\t/* AW", "+\t\t*/", "+\t\tint left= 0;", "+\t\tint right= 0;", "+\t\tint top= 0;", "+\t\tint bottom= 0;", "+\t\t", "+\t\tif (wHint != SWT.DEFAULT) width = wHint + left + right;", "+\t\tif (hHint != SWT.DEFAULT) height = hHint + top + bottom;", "-    */", "-\tPoint size= MacUtil.computeSize(handle);", "+\t/*", "-\t\t", "-\treturn size;", "+\t*/", "+\t", "+\treturn new Point(width, height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ddc08f468225109c7e38cc3286e1a13", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "14a489530a23f9a98c44510d056f7f726ca954fe", "commitAfterChange": "3518db6648d68a0e9ff0c939ecd457985c6ae47b", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 64, "signatureBeforeChange": " int XExposure (int w, int client_data, int call_data, int continue_to_dispatch)", "signatureAfterChange": " int XExposure (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-\tif ((style & SWT.NO_MERGE_PAINTS) != 0) {", "-\t\treturn super.XExposure (w, client_data, call_data, continue_to_dispatch);", "-\t}", "-\tXExposeEvent xEvent = new XExposeEvent ();", "-\tOS.memmove (xEvent, call_data, XExposeEvent.sizeof);", "-\tint exposeCount = xEvent.count;", "-\tif (exposeCount == 0) {", "-\t\tif (OS.XEventsQueued (xEvent.display, OS.QueuedAfterReading) != 0) {", "-\t\t\tint xEvent1 = OS.XtMalloc (XEvent.sizeof);", "-\t\t\tdisplay.exposeCount = display.lastExpose = 0;", "-\t\t\tint checkExposeProc = display.checkExposeProc;", "-\t\t\tOS.XCheckIfEvent (xEvent.display, xEvent1, checkExposeProc, xEvent.window);", "-\t\t\texposeCount = display.exposeCount;", "-\t\t\tint lastExpose = display.lastExpose;", "-\t\t\tif (exposeCount != 0 && lastExpose != 0) {", "-\t\t\t\tXExposeEvent xExposeEvent = display.xExposeEvent;", "-\t\t\t\tOS.memmove (xExposeEvent, lastExpose, XExposeEvent.sizeof);", "-\t\t\t\txExposeEvent.count = 0;", "-\t\t\t\tOS.memmove (lastExpose, xExposeEvent, XExposeEvent.sizeof);", "-\t\t\t}", "-\t\t\tOS.XtFree (xEvent1);", "-\t\t}", "-\t}", "-\tif (exposeCount == 0 && damagedRegion == 0) {", "-\t\treturn super.XExposure (w, client_data, call_data, continue_to_dispatch);", "-\t}", "-\tif (exposeCount != 0) return 0;", "+\tif ((style & SWT.NO_MERGE_PAINTS) == 0) {", "+\t\tXExposeEvent xEvent = new XExposeEvent ();", "+\t\tOS.memmove (xEvent, call_data, XExposeEvent.sizeof);", "+\t\tint exposeCount = xEvent.count;", "+\t\tif (exposeCount == 0) {", "+\t\t\tif (OS.XEventsQueued (xEvent.display, OS.QueuedAfterReading) != 0) {", "+\t\t\t\tint xEvent1 = OS.XtMalloc (XEvent.sizeof);", "+\t\t\t\tdisplay.exposeCount = display.lastExpose = 0;", "+\t\t\t\tint checkExposeProc = display.checkExposeProc;", "+\t\t\t\tOS.XCheckIfEvent (xEvent.display, xEvent1, checkExposeProc, xEvent.window);", "+\t\t\t\texposeCount = display.exposeCount;", "+\t\t\t\tint lastExpose = display.lastExpose;", "+\t\t\t\tif (exposeCount != 0 && lastExpose != 0) {", "+\t\t\t\t\tXExposeEvent xExposeEvent = display.xExposeEvent;", "+\t\t\t\t\tOS.memmove (xExposeEvent, lastExpose, XExposeEvent.sizeof);", "+\t\t\t\t\txExposeEvent.count = 0;", "+\t\t\t\t\tOS.memmove (lastExpose, xExposeEvent, XExposeEvent.sizeof);", "+\t\t\t\t}", "+\t\t\t\tOS.XtFree (xEvent1);", "+\t\t\t}", "+\t\t}", "+\t\tif (exposeCount != 0) return 0;", "+\t}", "-\tEvent event = new Event ();", "-\tGCData data = new GCData();", "-\tint rgn = damagedRegion;", "+\tint damageRgn = damagedRegion;", "-\tdata.damageRgn = rgn;", "-\tGC gc = event.gc = GC.motif_new(this, data);", "-\tOS.XSetRegion(xDisplay, gc.handle, rgn);", "+\tGCData data = new GCData ();", "+\tdata.damageRgn = damageRgn;", "+\tGC gc = GC.motif_new (this, data);", "+\tOS.XSetRegion (xDisplay, gc.handle, damageRgn);", "-\tOS.XClipBox (rgn, rect);", "+\tOS.XClipBox (damageRgn, rect);", "+\tGC paintGC = null;", "+\tImage image = null;", "+\tif ((style & SWT.DOUBLE_BUFFERED) != 0) {", "+\t\tRectangle client = getClientArea ();", "+\t\tint width = Math.min (client.width, rect.x + rect.width);", "+\t\tint height = Math.min (client.height, rect.y + rect.height);", "+\t\timage = new Image (display, width, height);", "+\t\tpaintGC = gc;", "+\t\tGCData imageGCData = new GCData ();", "+\t\timageGCData.damageRgn = damageRgn; ", "+\t\tgc = GC.motif_new (image, imageGCData);", "+\t\tgc.setForeground (getForeground ());", "+\t\tgc.setBackground (getBackground ());", "+\t\tgc.setFont (getFont ());", "+\t\tif ((style & SWT.NO_BACKGROUND) != 0) {", "+\t\t\tpaintGC.copyArea(image, 0, 0);", "+\t\t} else {", "+\t\t\tgc.fillRectangle(0, 0, width, height);", "+\t\t}", "+\t}", "+\tEvent event = new Event ();", "+\tevent.gc = gc;", "-\tgc.dispose ();", "-\tOS.XDestroyRegion (rgn);", "+\tif ((style & SWT.DOUBLE_BUFFERED) != 0) {", "+\t\tgc.dispose ();", "+\t\tif (!isDisposed ()) {", "+\t\t\tpaintGC.drawImage (image, 0, 0);", "+\t\t}", "+\t\timage.dispose ();", "+\t\tgc = paintGC;", "+\t}\t", "+\tgc.dispose ();", "+\tOS.XDestroyRegion (damageRgn);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4b3bd8afdc30e4c42e9c88cc1abccabe", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "c204154909a9d6903f66ea2c97f8cb0cb5eaa814", "commitAfterChange": "b4e13940b738ca380f99e9bdd9e55dadba13486b", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["- */", "-\t", "-\tscrolledHandle = OS.gtk_scrolled_window_new(0,0);", "-\tif (scrolledHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t", "-\tboxHandle = OS.gtk_event_box_new();", "-\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t", "-\tfixedHandle = OS.eclipse_fixed_new();", "-\tif (fixedHandle == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "-\t", "-\thandle = OS.gtk_drawing_area_new();", "+\tfixedHandle = OS.gtk_fixed_new ();", "+\tif (fixedHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\tOS.gtk_fixed_set_has_window (fixedHandle, true);", "+\tint vadj = OS.gtk_adjustment_new(0, 0, 100, 1, 10, 10);", "+\tif (vadj == 0) error (SWT.ERROR_NO_HANDLES);", "+\tint hadj = OS.gtk_adjustment_new(0, 0, 100, 1, 10, 10);", "+\tif (hadj == 0) error (SWT.ERROR_NO_HANDLES);", "+\tscrolledHandle = OS.gtk_scrolled_window_new (hadj, vadj);", "+\thandle = OS.gtk_fixed_new ();", "+\tOS.gtk_fixed_set_has_window (handle, true);", "+\t", "+\t//??", "-}", "+\tint parentHandle = parent.parentingHandle ();", "+\tOS.gtk_container_add (parentHandle, fixedHandle);", "+\tOS.gtk_container_add (fixedHandle, scrolledHandle);", "+\t", "+\t* Force the scrolledWindow to have a single child that is", "+\t* not scrolled automatically.  Calling gtk_container_add", "+\t* seems to add the child correctly but cause a warning.", "+\t*/", "+\t//NOT DONE -investigate turning warnings off", "+\tOS.GTK_BIN_SET_CHILD(scrolledHandle, handle);", "+\tOS.gtk_widget_set_parent(handle, scrolledHandle);", "+//\tOS.gtk_container_add (scrolledHandle, handle);", "+//\tOS.gtk_scrolled_window_add_with_viewport (scrolledHandle, handle);", "+", "+\tOS.gtk_widget_show (fixedHandle);", "+\tOS.gtk_widget_show (scrolledHandle);", "+\tOS.gtk_widget_show (handle);", "+\t", "+\t//CHECK WITH IS THERE ALREADY THEN DON'T SET", "+\tif ((style & SWT.BORDER) != 0) {", "+\t\tOS.gtk_scrolled_window_set_shadow_type(scrolledHandle, OS.GTK_SHADOW_ETCHED_IN);", "+\t}", "+\t", "+\t//DOESN'T WORK RIGHT NOW", "+\tif ((style & SWT.NO_REDRAW_RESIZE) != 0) {", "+\t\tOS.gtk_widget_set_redraw_on_allocate (handle, false);", "+\t}", "+\t", "+\tint hsp = (style & SWT.H_SCROLL) == 0 ? OS.GTK_POLICY_NEVER : OS.GTK_POLICY_ALWAYS;", "+\tint vsp = (style & SWT.V_SCROLL) == 0 ? OS.GTK_POLICY_NEVER : OS.GTK_POLICY_ALWAYS;", "+\tOS.gtk_scrolled_window_set_policy (scrolledHandle, hsp, vsp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6dc38faab763d0b879f302382d378af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "7dc0ed76c00a73244d89c00fb91aa296e1c8bb9a", "commitAfterChange": "283346df972bf05bab552efd3c4080f6b823b0e2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  void _setImage (Image image)", "signatureAfterChange": "  void _setImage (Image image)", "diff": ["-\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "-\t\tOS.SendMessage (handle, OS.BCM_SETIMAGELIST, 0, 0);", "+\tif (OS.COMCTL32_MAJOR >= 6) {", "-\t\t\timageList.add (image);", "+\t\t\timageList.add (image); //PBS_NORMAL", "+\t\t\t/*", "+\t\t\t* Bug in Windows.  When BCM_SETIMAGELIST is used to assign", "+\t\t\t* an image list with each of the button states, and the button", "+\t\t\t* has the style BS_CHECKBOX or BS_RADIOBUTTON, when the user", "+\t\t\t* drags the mouse in and out of the button when the state is", "+\t\t\t* set, the button draws using a blank image.  The fix is to", "+\t\t\t* set the complete image list only when the button is disabled.", "+\t\t\t*/", "+\t\t\tif (!OS.IsWindowEnabled (handle)) {", "+\t\t\t\timageList.add (image); //PBS_HOT", "+\t\t\t\timageList.add (image); //PBS_PRESSED", "+\t\t\t\tif (disabledImage != null) disabledImage.dispose ();", "+\t\t\t\tdisabledImage = new Image (display, image, SWT.IMAGE_DISABLE);", "+\t\t\t\timageList.add (disabledImage); //PBS_DISABLED", "+\t\t\t\timageList.add (image); //PBS_DEFAULTED", "+\t\t\t\timageList.add (image); //PBS_STYLUSHOT", "+\t\t\t}", "-\t\t\tif ((style & SWT.LEFT) != 0) buttonImageList.uAlign = OS.BUTTON_IMAGELIST_ALIGN_LEFT;", "-\t\t\tif ((style & SWT.CENTER) != 0) buttonImageList.uAlign = OS.BUTTON_IMAGELIST_ALIGN_CENTER;", "-\t\t\tif ((style & SWT.RIGHT) != 0) buttonImageList.uAlign = OS.BUTTON_IMAGELIST_ALIGN_RIGHT;", "-\t\t\tTCHAR buffer = new TCHAR (getCodePage (), \"\", true);", "-\t\t\tOS.SetWindowText (handle, buffer);", "+\t\t\tint oldBits = OS.GetWindowLong (handle, OS.GWL_STYLE), newBits = oldBits;", "+\t\t\tnewBits &= ~(OS.BS_LEFT | OS.BS_CENTER | OS.BS_RIGHT);", "+\t\t\tif ((style & SWT.LEFT) != 0) newBits |= OS.BS_LEFT;", "+\t\t\tif ((style & SWT.CENTER) != 0) newBits |= OS.BS_CENTER;", "+\t\t\tif ((style & SWT.RIGHT) != 0) newBits |= OS.BS_RIGHT;", "+\t\t\tif (text.length () == 0) {", "+\t\t\t\tif ((style & SWT.LEFT) != 0) buttonImageList.uAlign = OS.BUTTON_IMAGELIST_ALIGN_LEFT;", "+\t\t\t\tif ((style & SWT.CENTER) != 0) buttonImageList.uAlign = OS.BUTTON_IMAGELIST_ALIGN_CENTER;", "+\t\t\t\tif ((style & SWT.RIGHT) != 0) buttonImageList.uAlign = OS.BUTTON_IMAGELIST_ALIGN_RIGHT;", "+\t\t\t} else {", "+\t\t\t\tbuttonImageList.uAlign = OS.BUTTON_IMAGELIST_ALIGN_LEFT;", "+\t\t\t\tbuttonImageList.margin_left = computeLeftMargin ();", "+\t\t\t\tbuttonImageList.margin_right = MARGIN;", "+\t\t\t\tnewBits &= ~(OS.BS_CENTER | OS.BS_RIGHT);", "+\t\t\t\tnewBits |= OS.BS_LEFT;", "+\t\t\t}", "+\t\t\tif (newBits != oldBits) {", "+\t\t\t\tOS.SetWindowLong (handle, OS.GWL_STYLE, newBits);", "+\t\t\t\tOS.InvalidateRect (handle, null, true);", "+\t\t\t}", "-\t\t\tTCHAR buffer = new TCHAR (getCodePage (), text, true);", "-\t\t\tOS.SetWindowText (handle, buffer);", "-\t\t\t", "-\t\tint newBits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-\t\tint oldBits = newBits;", "+\t\tint newBits = OS.GetWindowLong (handle, OS.GWL_STYLE), oldBits = newBits;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1736a60638697ea13acb7bd17f225b1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "7a26d49f7fcf65bf8625393f1af4a67b482a7c35", "commitAfterChange": "c204154909a9d6903f66ea2c97f8cb0cb5eaa814", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["-", "-\tboxHandle = OS.gtk_event_box_new();", "-\tif (boxHandle == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "-", "-\tfixedHandle = OS.eclipse_fixed_new ();", "-\tif (fixedHandle == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "-\t\t", "-\tscrolledHandle = OS.gtk_scrolled_window_new(0,0);", "+\tfixedHandle = OS.gtk_fixed_new ();", "+\tif (fixedHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\tOS.gtk_fixed_set_has_window (fixedHandle, true);", "+\tscrolledHandle = OS.gtk_scrolled_window_new (0, 0);", "-\t", "-}", "+\tint parentHandle = parent.parentingHandle ();", "+\tOS.gtk_container_add (parentHandle, fixedHandle);", "+\tOS.gtk_widget_show (fixedHandle);", "+\tOS.gtk_widget_show (scrolledHandle);", "+\tOS.gtk_widget_show (handle);", "+\t", "+\tint mode = (style & SWT.MULTI) != 0 ? OS.GTK_SELECTION_EXTENDED : OS.GTK_SELECTION_BROWSE;", "+\tOS.gtk_clist_set_selection_mode (handle, mode);", "+\t", "+\t//BUG - need realize to get scrollbars ", "+\tOS.gtk_widget_realize (handle);", "+\tint hsp = (style & SWT.H_SCROLL) == 0 ? OS.GTK_POLICY_NEVER : OS.GTK_POLICY_ALWAYS;", "+\tint vsp = (style & SWT.V_SCROLL) == 0 ? OS.GTK_POLICY_NEVER : OS.GTK_POLICY_ALWAYS;", "+\tOS.gtk_scrolled_window_set_policy (scrolledHandle, hsp, vsp);", "+\t", "+\tif ((style & SWT.CHECK) != 0) {", "+\t\tOS.gtk_widget_realize (handle);", "+\t\tuncheck = createCheckPixmap (false);", "+\t\tcheck = createCheckPixmap (true);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a66f7343f1eea4ab04cf93a49f456104", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleClientSite.java", "commitBeforeChange": "647ee8ac0b4674688a64286f665d0bc51c0718e8", "commitAfterChange": "8c113a426e5f05549192616bd0df00498451eac3", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 90, "signatureBeforeChange": " private boolean saveToStorageFile(File file)", "signatureAfterChange": " private boolean saveToStorageFile(File file)", "diff": ["-\tint /*long*/[] address = new int /*long*/[1];", "-\tif (objIOleObject.QueryInterface(COM.IIDIPersistFile, address) == COM.S_OK) {", "-\t\tString fileName = null; ", "-\t\tIPersistFile persistFile = new IPersistFile(address[0]);", "-\t\tint /*long*/[] ppszFileName = new int /*long*/[1];", "-\t\tif (persistFile.GetCurFile(ppszFileName) == COM.S_OK) {", "-\t\t\tint /*long*/ pszFileName = ppszFileName [0];", "-\t\t    int length = OS.wcslen(pszFileName);", "-\t\t    char[] buffer = new char[length];", "-\t\t    OS.MoveMemory(buffer, pszFileName, length * 2);", "-\t\t    fileName = new String(buffer, 0, length);", "-\t\t    // Doc says to use IMalloc::Free, but CoTaskMemFree() does the same ", "-\t\t    COM.CoTaskMemFree(pszFileName);", "-\t\t}", "-\t\tint result;", "-\t\tString newFile = file.getAbsolutePath();", "-\t\tif (fileName != null && fileName.equalsIgnoreCase(newFile)) {", "-\t\t\tresult = persistFile.Save(0, false);", "-\t\t} else {", "-\t\t\tint length = newFile.length();", "-\t\t\tchar[] buffer = new char[length + 1];", "-\t\t\tnewFile.getChars(0, length, buffer, 0);", "-\t\t\tint /*long*/ lpszNewFile = COM.CoTaskMemAlloc(buffer.length * 2);", "-\t\t\tCOM.MoveMemory(lpszNewFile, buffer, buffer.length * 2);", "-\t\t\tresult = persistFile.Save(lpszNewFile, false);", "-\t\t\tCOM.CoTaskMemFree(lpszNewFile);", "-\t\t}", "-\t\tpersistFile.Release();", "-\t\tif (result == COM.S_OK) return true;", "-\t}", "-\t", "+\tint /*long*/[] address = new int /*long*/[1];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84ddf3d03a7dceda8cb8cd96795d831f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/gtk/org/eclipse/swt/printing/PrintDialog.java", "commitBeforeChange": "ca0a7dfbd72c3695b066c30bf3539bee466202cd", "commitAfterChange": "cb62adfcdcffb4abe98618644df77026ccb818e9", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public PrinterData open()", "signatureAfterChange": " public PrinterData open()", "diff": ["-\t\tif (printerData != null) {", "-\t\t\tif (printerData.otherData != null) {", "-\t\t\t\tPrinter.restore(printerData.otherData, settings, page_setup);", "-\t\t\t}", "-\t\t\t/* Set values of settings from PrinterData. */", "-\t\t\tPrinter.setScope(settings, printerData.scope, printerData.startPage, printerData.endPage);", "-\t\t\t//TODO: Should we look at printToFile, or driver/name for \"Print to File\", or both? (see gtk bug 345590)", "-\t\t\tif (printerData.printToFile) {", "-\t\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, printerData.fileName, true);", "-\t\t\t\tOS.gtk_print_settings_set(settings, OS.GTK_PRINT_SETTINGS_OUTPUT_URI, buffer);", "-\t\t\t}", "+\t\tif (printerData.otherData != null) {", "+\t\t\tPrinter.restore(printerData.otherData, settings, page_setup);", "+\t\t}", "+\t\t/* Set values of settings from PrinterData. */", "+\t\tPrinter.setScope(settings, printerData.scope, printerData.startPage, printerData.endPage);", "+\t\t//TODO: Should we look at printToFile, or driver/name for \"Print to File\", or both? (see gtk bug 345590)", "+\t\tif (printerData.printToFile && printerData.fileName != null) {", "+\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, printerData.fileName, true);", "+\t\t\tOS.gtk_print_settings_set(settings, OS.GTK_PRINT_SETTINGS_OUTPUT_URI, buffer);", "+\t\t}", "+\t\tif (printerData.driver != null && printerData.name != null && printerData.fileName != null) {", "-\t\t\tOS.gtk_print_settings_set_n_copies(settings, printerData.copyCount);", "-\t\t\tOS.gtk_print_settings_set_collate(settings, printerData.collate);\t", "+\t\tOS.gtk_print_settings_set_n_copies(settings, printerData.copyCount);", "+\t\tOS.gtk_print_settings_set_collate(settings, printerData.collate);", "+\t\tint orientation = printerData.orientation == PrinterData.LANDSCAPE ? OS.GTK_PAGE_ORIENTATION_LANDSCAPE : OS.GTK_PAGE_ORIENTATION_PORTRAIT;", "+\t\tOS.gtk_print_settings_set_orientation(settings, orientation);", "+\t\tOS.gtk_page_setup_set_orientation(page_setup, orientation);", "-\t\tPrinter.setScope(settings, scope, startPage, endPage);", "-\t\tif (printToFile) {", "+\t\tPrinter.setScope(settings, printerData.scope, printerData.startPage, printerData.endPage);", "+\t\tif (printerData.printToFile) {", "-\t\t\t\t\t\tscope = PrinterData.ALL_PAGES;", "+\t\t\t\t\t\tdata.scope = PrinterData.ALL_PAGES;", "-\t\t\t\t\t\tscope = PrinterData.PAGE_RANGE;", "+\t\t\t\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "-\t\t\t\t\t\tstartPage = min == Integer.MAX_VALUE ? 1 : min;", "-\t\t\t\t\t\tendPage = max == 0 ? 1 : max;", "+\t\t\t\t\t\tdata.startPage = min == Integer.MAX_VALUE ? 1 : min;", "+\t\t\t\t\t\tdata.endPage = max == 0 ? 1 : max;", "-\t\t\t\t\t\tscope = PrinterData.SELECTION;", "-\t\t\t\t\t\tstartPage = endPage = OS.gtk_print_unix_dialog_get_current_page(handle);", "+\t\t\t\t\t\tdata.scope = PrinterData.SELECTION;", "+\t\t\t\t\t\tdata.startPage = data.endPage = OS.gtk_print_unix_dialog_get_current_page(handle);", "-\t\t\t\tprintToFile = data.name.equals(\"Print to File\"); //$NON-NLS-1$", "-\t\t\t\tif (printToFile) {", "+\t\t\t\tdata.printToFile = data.name.equals(\"Print to File\"); //$NON-NLS-1$", "+\t\t\t\tif (data.printToFile) {", "-\t\t\t\tdata.scope = scope;", "-\t\t\t\tdata.startPage = startPage;", "-\t\t\t\tdata.endPage = endPage;", "-\t\t\t\tdata.printToFile = printToFile;", "+\t\t\t\tdata.orientation = OS.gtk_page_setup_get_orientation(page_setup) == OS.GTK_PAGE_ORIENTATION_LANDSCAPE ? PrinterData.LANDSCAPE : PrinterData.PORTRAIT;", "+\t\t\t\tprinterData = data;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "235dad6fab7ec31ea7799416df0252e7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "7a26d49f7fcf65bf8625393f1af4a67b482a7c35", "commitAfterChange": "c204154909a9d6903f66ea2c97f8cb0cb5eaa814", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["+\tfixedHandle = OS.gtk_fixed_new ();", "+\tif (fixedHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\tOS.gtk_fixed_set_has_window (fixedHandle, true);", "-}", "+\tint parentHandle = parent.parentingHandle ();", "+\tOS.gtk_container_add (parentHandle, fixedHandle);", "+\tOS.gtk_container_add (fixedHandle, scrolledHandle);", "+\tOS.gtk_widget_show (fixedHandle);", "+\tOS.gtk_widget_show (scrolledHandle);", "+\tOS.gtk_widget_show (handle);", "+\t", "+\tint mode = (style & SWT.MULTI) != 0 ? OS.GTK_SELECTION_EXTENDED :OS.GTK_SELECTION_BROWSE;", "+\tOS.gtk_clist_set_selection_mode (handle, mode);", "+\t", "+\t//CHECK POLICY", "+\tif ((style & SWT.BORDER) != 0) {", "+\t\tOS.gtk_clist_set_shadow_type(handle, OS.GTK_SHADOW_ETCHED_IN);", "+\t}", "+\tint hsp = (style & SWT.H_SCROLL) == 0 ? OS.GTK_POLICY_NEVER : OS.GTK_POLICY_AUTOMATIC;", "+\tint vsp = (style & SWT.V_SCROLL) == 0 ? OS.GTK_POLICY_NEVER : OS.GTK_POLICY_AUTOMATIC;", "+\tOS.gtk_scrolled_window_set_policy (scrolledHandle, hsp, vsp);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "009cd5a40a0f1ac03d9bcb7ddf3cfb78", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "9cc72cd00c181250b1f51b95a0528a6b993c1ed9", "commitAfterChange": "1c6100db3e7e2869dd9939a388c01ffe02266ae6", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 51, "signatureBeforeChange": " public void setText (String string)", "signatureAfterChange": " public void setText (String string)", "diff": ["-\tif ((style & SWT.SEPARATOR) != 0) return;", "+\tif (((style & SWT.SEPARATOR) != 0) || text.equals(string)) return;", "-\tif (labelHandle == 0) return;", "-\tOS.gtk_label_set_text_with_mnemonic (labelHandle, buffer);", "-\tif (string.length () != 0) {", "-\t\tOS.gtk_widget_show (labelHandle);", "+\tif ((style & SWT.DROP_DOWN) != 0 && OS.GTK_VERSION < OS.VERSION (2, 6, 0)) {", "+\t\tOS.gtk_label_set_text_with_mnemonic (labelHandle, buffer);", "+\t\tif (string.length () != 0) {", "+\t\t\tOS.gtk_widget_show (labelHandle);", "+\t\t} else {", "+\t\t\tOS.gtk_widget_hide (labelHandle);", "+\t\t}", "+\t}", "+\tOS.gtk_tool_button_set_label (handle, buffer);", "+\t/*", "+\t * Feature in GTK. Toolitems with only image appear larger", "+\t * than the preferred size. The fix is to set the style as", "+\t * TOOLBAR_BOTH_HORIZ. If any of the child toolItem is set", "+\t * text, then the style shall be set back to default.", "+\t */", "+\tif (string.length() != 0) {", "+\t\thasText = true;", "+\t\tif ((parent.style & SWT.RIGHT) == 0) OS.gtk_toolbar_set_style (parent.handle, OS.GTK_TOOLBAR_BOTH);", "-\t\tOS.gtk_widget_hide (labelHandle);", "+\t\t/*", "+\t\t * If the toolbar has any item containing text, then the style", "+\t\t * should be TOOLBAR_BOTH. Otherwise, it should be set back to", "+\t\t * BOTH_HORIZ in order to prevent the larger size consumed by item.", "+\t\t */", "+\t\thasText = false;", "+\t\tToolItem[] items = parent._getItems();", "+\t\tboolean hasTextItems = false;", "+\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\tToolItem item = items[i];", "+\t\t\tif (item != null) hasTextItems |= item.hasText;", "+\t\t}", "+\t\tif (!hasTextItems) OS.gtk_toolbar_set_style (parent.handle, OS.GTK_TOOLBAR_BOTH_HORIZ);", "+\t}", "+\tif ((style & SWT.DROP_DOWN) != 0) {", "+\t\tproxyMenuItem = 0;", "+\t\tproxyMenuItem = OS.gtk_tool_item_retrieve_proxy_menu_item (handle);", "+\t\tOS.g_signal_connect(proxyMenuItem, OS.activate, ToolBar.menuItemSelectedFunc.getAddress(), handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c01a973e0ea6e9d08589a5ca2b2b00c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "30da8be87bc22b7280e4efbcaf1c8144d67dba2a", "commitAfterChange": "527998c9e4be5c58a908b0f0d6081466df8efc7f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  LRESULT CDDS_ITEMPOSTPAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT CDDS_ITEMPOSTPAINT (int wParam, int lParam)", "diff": ["-\tif (findImageControl () != null || ignoreDrawSelected) {", "+\tif (findImageControl () != null || ignoreDrawSelection) {", "-\t\t\t\tif ((selected || findImageControl () == null) && !ignoreDraw && !ignoreDrawSelected) {", "+\t\t\t\tif ((selected || findImageControl () == null) && !ignoreDrawSelection && !ignoreDrawBackground) {", "-\t\t\tRECT rect = new RECT ();", "+\t\t\tRECT rect = new RECT (), backgroundRect = null;", "-\t\t\t\tif (selected && !ignoreDraw && !ignoreDrawSelected) {", "+\t\t\t\tif (selected && !ignoreDrawSelection && !ignoreDrawBackground) {", "+\t\t\t\tbackgroundRect = rect;", "+\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\tbackgroundRect = rect;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbackgroundRect = item.getBounds (index, true, false, false, false, true, hDC);", "+\t\t\t\t\t}", "-\t\t\t\ttextColor = -1;", "-\t\t\t\tignoreDraw = ignoreDrawSelected = false;", "+\t\t\t\tselectionForeground = -1;", "+\t\t\t\tignoreDraw = ignoreDrawSelection = ignoreDrawBackground = false;", "+\t\t\t\tbackgroundRect = rect;", "-\t\t\tif (textColor != -1) clrText = textColor;", "+\t\t\tif (selectionForeground != -1) clrText = selectionForeground;", "-\t\t\t\t\t\tdata.foreground = clrText != -1 ? clrText : OS.GetTextColor (hDC);", "-\t\t\t\t\t\tdata.background = clrTextBk != -1 ? clrTextBk : OS.GetBkColor (hDC);", "+\t\t\t\t\t\tdata.foreground = OS.GetTextColor (hDC);", "+\t\t\t\t\t\tdata.background = OS.GetBkColor (hDC);", "+\t\t\t\t\t\tif (!selected) {", "+\t\t\t\t\t\t\tif (clrText != -1) data.foreground = clrText;", "+\t\t\t\t\t\t\tif (clrTextBk != -1) data.background = clrTextBk;", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (selected) event.detail |= SWT.SELECTED;", "-\t\t\t\t\t\tif ((nmcd.uItemState & OS.CDIS_FOCUS) != 0) event.detail |= SWT.FOCUSED;", "+\t\t\t\t\t\tevent.detail |= SWT.FOREGROUND;", "+\t\t\t\t\t\tif (clrTextBk != -1) event.detail |= SWT.BACKGROUND;", "+\t\t\t\t\t\tif (selected && (style & SWT.FULL_SELECTION) != 0) event.detail |= SWT.SELECTED;", "+\t\t\t\t\t\tif ((nmcd.uItemState & OS.CDIS_FOCUS) != 0) {", "+\t\t\t\t\t\t\tif (/*nmcd.iSubItem == 0 ||*/ (style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\t\t\tif (handle == OS.GetFocus ()) {", "+\t\t\t\t\t\t\t\t\tint uiState = OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "+\t\t\t\t\t\t\t\t\tif ((uiState & OS.UISF_HIDEFOCUS) == 0) event.detail |= SWT.FOCUSED;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\tignoreDraw = !event.doit;", "-\t\t\t\t\t\tif ((event.detail & SWT.SELECTED) != 0) {", "+\t\t\t\t\t\tignoreDraw = (event.detail & SWT.FOREGROUND) == 0;", "+\t\t\t\t\t\tignoreDrawSelection = (event.detail & SWT.SELECTED) == 0;", "+\t\t\t\t\t\tignoreDrawBackground = (event.detail & SWT.BACKGROUND) == 0;", "+\t\t\t\t\t\tif (!ignoreDrawSelection) {", "-\t\t\t\t\t\t\t\ttextColor = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "+\t\t\t\t\t\t\t\tselectionForeground = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "-\t\t\t\t\t\t\tif (selected) textColor = newTextClr;", "-\t\t\t\t\t\t\tignoreDrawSelected = true;", "+\t\t\t\t\t\t\tif (selected) selectionForeground = newTextClr;", "-\t\t\t\t\tif (textColor != -1) clrText = textColor;", "+\t\t\t\t\tif (selectionForeground != -1) clrText = selectionForeground;", "-\t\t\t\tif (!ignoreDraw && !ignoreDrawSelected) {", "+\t\t\t\tif (!ignoreDrawBackground) {", "-\t\t\t\t\t\tif (drawBackground) fillBackground (hDC, clrTextBk, rect);", "+\t\t\t\t\t\tif (drawBackground) fillBackground (hDC, clrTextBk, backgroundRect);", "-\t\t\t\t\t\t\t\tif (handle == OS.GetFocus ()) {", "-\t\t\t\t\t\t\t\t\tint uiState = OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "-\t\t\t\t\t\t\t\t\tif ((uiState & OS.UISF_HIDEFOCUS) == 0) {", "-\t\t\t\t\t\t\t\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "-\t\t\t\t\t\t\t\t\t\tif (hItem == item.handle) {", "-\t\t\t\t\t\t\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "-\t\t\t\t\t\t\t\t\t\t\t\tfocusRect = new RECT ();", "-\t\t\t\t\t\t\t\t\t\t\t\tOS.SetRect (focusRect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "-\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\tfocusRect = item.getBounds (index, true, false, false, false, true, hDC);", "+\t\t\t\t\t\t\t\tif (!ignoreDrawSelection) {", "+\t\t\t\t\t\t\t\t\tif (handle == OS.GetFocus ()) {", "+\t\t\t\t\t\t\t\t\t\tint uiState = OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "+\t\t\t\t\t\t\t\t\t\tif ((uiState & OS.UISF_HIDEFOCUS) == 0) {", "+\t\t\t\t\t\t\t\t\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "+\t\t\t\t\t\t\t\t\t\t\tif (hItem == item.handle) {", "+\t\t\t\t\t\t\t\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tfocusRect = new RECT ();", "+\t\t\t\t\t\t\t\t\t\t\t\t\tOS.SetRect (focusRect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tfocusRect = item.getBounds (index, true, false, false, false, true, hDC);", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\tif (textColor != -1) clrText = textColor;", "+\t\t\tif (selectionForeground != -1) clrText = selectionForeground;", "-\t\t\t\tdata.foreground = clrText != -1 ? clrText : OS.GetTextColor (hDC);", "-\t\t\t\tdata.background = clrTextBk != -1 ? clrTextBk : OS.GetBkColor (hDC);", "+\t\t\t\tdata.foreground = OS.GetTextColor (hDC);", "+\t\t\t\tdata.background = OS.GetBkColor (hDC);", "+\t\t\t\tif (!selected) {", "+\t\t\t\t\tif (clrText != -1) data.foreground = clrText;", "+\t\t\t\t\tif (clrTextBk != -1) data.background = clrTextBk;", "+\t\t\t\t}", "-\t\t\t\tif (selected) event.detail |= SWT.SELECTED;", "-\t\t\t\tif ((nmcd.uItemState & OS.CDIS_FOCUS) != 0) event.detail |= SWT.FOCUSED;", "+\t\t\t\tevent.detail |= SWT.FOREGROUND;", "+\t\t\t\tif (selected && (i == 0 /*nmcd.iSubItem == 0*/ || (style & SWT.FULL_SELECTION) != 0)) {", "+\t\t\t\t\tevent.detail |= SWT.SELECTED;", "+\t\t\t\t}", "+\t\t\t\tif ((nmcd.uItemState & OS.CDIS_FOCUS) != 0) {", "+\t\t\t\t\tif (i == 0 /*nmcd.iSubItem == 0*/ || (style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\tif (handle == OS.GetFocus ()) {", "+\t\t\t\t\t\t\tint uiState = OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "+\t\t\t\t\t\t\tif ((uiState & OS.UISF_HIDEFOCUS) == 0) event.detail |= SWT.FOCUSED;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b0dc1be221581f2da0a60ed4385d2e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "7a26d49f7fcf65bf8625393f1af4a67b482a7c35", "commitAfterChange": "c204154909a9d6903f66ea2c97f8cb0cb5eaa814", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["-", "+\tfixedHandle = OS.gtk_fixed_new ();", "+\tif (fixedHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\tOS.gtk_fixed_set_has_window (fixedHandle, true);", "-\t", "-\thandle = ((style&SWT.SEPARATOR) != 0)? (((style&SWT.HORIZONTAL)!= 0)?", "-\t\tOS.gtk_hseparator_new() : OS.gtk_vseparator_new()):", "-\t\tOS.gtk_label_new (null);", "+\tif ((style & SWT.SEPARATOR) != 0) {", "+\t\tif ((style & SWT.HORIZONTAL)!= 0) {", "+\t\t\thandle = OS.gtk_hseparator_new();", "+\t\t} else {", "+\t\t\thandle = OS.gtk_vseparator_new();", "+\t\t}", "+\t} else {", "+\t\thandle = OS.gtk_label_new (null);", "+\t}", "-}", "+\t", "+\tint parentHandle = parent.parentingHandle ();", "+\tOS.gtk_container_add(parentHandle, fixedHandle);", "+\tOS.gtk_container_add(fixedHandle, frameHandle);", "+\tOS.gtk_container_add(frameHandle, handle);", "+\tOS.gtk_widget_show (fixedHandle);", "+\tOS.gtk_widget_show (frameHandle);", "+\tOS.gtk_widget_show (handle);", "+\t// CHECK THEME"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0c81d33df05bee86c00be2e9ca4e71d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "eb0dd46e7194a9f7d813095a5dca290fae54babc", "commitAfterChange": "8174cf2444655210718c9dde4ae430f251492a85", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "\r public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+\t\r", "+\tint [] args = new int [] {OS.Pt_ARG_WIDTH, 0, 0, OS.Pt_ARG_HEIGHT, 0, 0};\r", "+\tOS.PtGetResources (handle, args.length / 3, args);\r", "+\tboolean wrap = (style & SWT.WRAP) != 0;\r", "+\tif (wrap) {\r", "+\t\tif (wHint == SWT.DEFAULT) {\r", "+\t\t\tOS.PtSetResource (handle, OS.Pt_ARG_MULTITEXT_WRAP_FLAGS, OS.Pt_EMT_NEWLINE, ~0);\r", "+\t\t} else {\r", "+\t\t\tOS.PtSetResource (handle, OS.Pt_ARG_WIDTH, wHint, 0);\r", "+\t\t}\r", "+\t}\r", "+\tint resizeFlags = OS.Pt_RESIZE_X_ALWAYS | OS.Pt_RESIZE_Y_ALWAYS;\r", "+\tOS.PtSetResource (handle, OS.Pt_ARG_RESIZE_FLAGS, resizeFlags, OS.Pt_RESIZE_XY_BITS);\r", "+\tif ((style & SWT.MULTI) != 0 || !OS.PtWidgetIsRealized (handle)) OS.PtExtentWidgetFamily (handle);\r", "-\tif (!OS.PtWidgetIsRealized (handle)) OS.PtExtentWidgetFamily (handle);\r", "-\tif ((style & SWT.MULTI) != 0) {\r", "-\t\tint child = OS.PtWidgetChildBack (handle);\r", "-\t\tOS.PtWidgetPreferredSize (child, dim);\r", "-\t\twidth += dim.w - 1;\r", "-\t\theight += dim.h - 1;\r", "+\tOS.PtSetResource (handle, OS.Pt_ARG_RESIZE_FLAGS, 0, OS.Pt_RESIZE_XY_BITS);\r", "+\tif (wrap) {\r", "+\t\tif (wHint == SWT.DEFAULT) {\r", "+\t\t\tint wrapFlags = OS.Pt_EMT_WORD | OS.Pt_EMT_CHAR | OS.Pt_EMT_NEWLINE;\r", "+\t\t\tOS.PtSetResource (handle, OS.Pt_ARG_MULTITEXT_WRAP_FLAGS, wrapFlags, ~0);\r", "+\t\t}\r", "+\tOS.PtSetResources (handle, args.length / 3, args);\r", "+\r", "+\tScrollBar scroll;\r", "+\tint scrollWidth = (scroll = getVerticalBar ()) != null ? scroll.getSize ().x : 0;\r", "+\tint scrollHeight = (scroll = getHorizontalBar ()) != null ? scroll.getSize ().y : 0;\r", "+\twidth += scrollWidth;\r", "+\tif (!wrap) height += scrollHeight;\r", "+\r", "-\t\tScrollBar scroll;\r", "-\t\tif (wHint != SWT.DEFAULT) {\r", "-\t\t\twidth = area.size_w;\r", "-\t\t\tif ((scroll = getVerticalBar ()) != null) width += scroll.getSize().x;\r", "-\t\t}\r", "-\t\tif (hHint != SWT.DEFAULT) {\r", "-\t\t\theight = area.size_h;\r", "-\t\t\tif ((scroll = getHorizontalBar ()) != null) height += scroll.getSize().y;\r", "-\t\t}\r", "+\t\tif (wHint != SWT.DEFAULT) width = area.size_w + scrollWidth;\r", "+\t\tif (hHint != SWT.DEFAULT) height = area.size_h + scrollHeight;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b32dd9b229f263e4c60e45d6575d5009", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "14a489530a23f9a98c44510d056f7f726ca954fe", "commitAfterChange": "3518db6648d68a0e9ff0c939ecd457985c6ae47b", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 50, "signatureBeforeChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "diff": ["-\t\tif ((style & SWT.NO_MERGE_PAINTS) != 0) {", "-\t\t\tint rgn = OS.CreateRectRgn (0, 0, 0, 0);", "+", "+\t\tint rgn = 0;", "+\t\tif ((style & (SWT.NO_MERGE_PAINTS | SWT.DOUBLE_BUFFERED)) != 0) {", "+\t\t\trgn = OS.CreateRectRgn (0, 0, 0, 0);", "+\t\t}", "+", "+\t\tif ((style & SWT.NO_MERGE_PAINTS) != 0) {", "-\t\t\tOS.DeleteObject (rgn);", "+\t\t\tGC paintGC = null;", "+\t\t\tImage image = null;", "+\t\t\tif ((style & SWT.DOUBLE_BUFFERED) != 0) {", "+\t\t\t\timage = new Image (display, width, height);", "+\t\t\t\tpaintGC = gc;", "+\t\t\t\tgc = new GC (image);", "+\t\t\t\tgc.setForeground (getForeground ());", "+\t\t\t\tgc.setBackground (getBackground ());", "+\t\t\t\tgc.setFont (getFont ());", "+\t\t\t\tif ((style & SWT.NO_BACKGROUND) != 0) {", "+\t\t\t\t\tpaintGC.copyArea (image, ps.left, ps.top);", "+\t\t\t\t} else {", "+\t\t\t\t\tgc.fillRectangle (0, 0, width, height);", "+\t\t\t\t}", "+\t\t\t\tOS.OffsetRgn (rgn, -ps.left, -ps.top);", "+\t\t\t\tOS.SelectClipRgn (gc.handle, rgn);", "+\t\t\t\tOS.SetMetaRgn (gc.handle);", "+\t\t\t\tOS.SetWindowOrgEx (gc.handle, ps.left, ps.top, null);", "+\t\t\t}", "-\t\t\t\t\tif ((style & SWT.NO_BACKGROUND) == 0) {", "+\t\t\t\t\tif ((style & (SWT.DOUBLE_BUFFERED | SWT.NO_BACKGROUND)) == 0) {", "-\t\t\t\tif ((style & SWT.NO_BACKGROUND) == 0) {", "+\t\t\t\tif ((style & (SWT.DOUBLE_BUFFERED | SWT.NO_BACKGROUND)) == 0) {", "+\t\t\tif ((style & SWT.DOUBLE_BUFFERED) != 0) {", "+\t\t\t\tgc.dispose();", "+\t\t\t\tif (!isDisposed ()) {", "+\t\t\t\t\tpaintGC.drawImage(image, ps.left, ps.top);", "+\t\t\t\t}", "+\t\t\t\timage.dispose();", "+\t\t\t\tgc = paintGC;", "+\t\t\t}", "+\t\tif (rgn != 0) OS.DeleteObject (rgn);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb1952ddb77ea7183b8adb462ed1ee3d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "bd469e488bef6f88459d9c0535159f8167416d1f", "commitAfterChange": "0f22a30a5b82bfeb0c093bba732059285a8fbaba", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": " Event dragDetect (Event event)", "signatureAfterChange": " public boolean dragDetect (int button, int stateMask, int x, int y)", "diff": ["-//TODO - Javadoc", "-/*public*/ Event dragDetect (Event event) {", "+public boolean dragDetect (int button, int stateMask, int x, int y) {", "-\tif (event == null) error (SWT.ERROR_NULL_ARGUMENT);", "-\tif (!dragDetect (handle, event.x, event.y, false, null, null)) return null;", "-\tEvent dragEvent = new Event ();", "-\tdragEvent.button = event.button;", "-\tdragEvent.x = event.x;", "-\tdragEvent.y = event.y;", "-\tdragEvent.stateMask = event.stateMask;", "-\treturn dragEvent;", "+\tif (button != 1) return false;", "+\tif (!dragDetect (handle, x, y, false, null, null)) {", "+\t\t/*", "+\t\t* Feature in Windows.  DragDetect() captures the mouse", "+\t\t* and tracks its movement until the user releases the", "+\t\t* left mouse button, presses the ESC key, or moves the", "+\t\t* mouse outside the drag rectangle.  If the user moves", "+\t\t* the mouse outside of the drag rectangle, DragDetect()", "+\t\t* returns true and a drag and drop operation can be", "+\t\t* started.  When the left mouse button is released or", "+\t\t* the ESC key is pressed, these events are consumed by", "+\t\t* DragDetect() so that application code that matches", "+\t\t* mouse down/up pairs or looks for the ESC key will not", "+\t\t* function properly.  The fix is to send the missing", "+\t\t* events when the drag has not started.", "+\t\t* ", "+\t\t* NOTE: For now, don't send a fake WM_KEYDOWN/WM_KEYUP", "+\t\t* events for the ESC key.  This would require computing", "+\t\t* wParam (the key) and lParam (the repeat count, scan code,", "+\t\t* extended-key flag, context code, previous key-state flag,", "+\t\t* and transition-state flag) which is non-trivial.", "+\t\t*/", "+\t\tif (button == 1 && OS.GetKeyState (OS.VK_ESCAPE) >= 0) {", "+\t\t\tint wParam = 0;", "+\t\t\tif ((stateMask & SWT.CTRL) != 0) wParam |= OS.MK_CONTROL;", "+\t\t\tif ((stateMask & SWT.SHIFT) != 0) wParam |= OS.MK_SHIFT;", "+\t\t\tif ((stateMask & SWT.ALT) != 0) wParam |= OS.MK_ALT;", "+\t\t\tif ((stateMask & SWT.BUTTON1) != 0) wParam |= OS.MK_LBUTTON;", "+\t\t\tif ((stateMask & SWT.BUTTON2) != 0) wParam |= OS.MK_MBUTTON;", "+\t\t\tif ((stateMask & SWT.BUTTON3) != 0) wParam |= OS.MK_RBUTTON;", "+\t\t\tif ((stateMask & SWT.BUTTON4) != 0) wParam |= OS.MK_XBUTTON1;", "+\t\t\tif ((stateMask & SWT.BUTTON5) != 0) wParam |= OS.MK_XBUTTON2;", "+\t\t\tint lParam = (x & 0xFFFF) | ((y << 16) & 0xFFFF0000);", "+\t\t\tOS.SendMessage (handle, OS.WM_LBUTTONUP, wParam, lParam);", "+\t\t}", "+\t\treturn false;", "+\t}", "+\treturn sendDragEvent (button, stateMask, x, y);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be2faed9d6ca2bfe2939c140c92d9631", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "30da8be87bc22b7280e4efbcaf1c8144d67dba2a", "commitAfterChange": "527998c9e4be5c58a908b0f0d6081466df8efc7f", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "  void sendEraseItemEvent (TableItem item, NMLVCUSTOMDRAW nmcd, int lParam)", "signatureAfterChange": "  void sendEraseItemEvent (TableItem item, NMLVCUSTOMDRAW nmcd, int lParam)", "diff": ["+\tboolean drawSelected = false, drawBackground = false;", "+\t\t\t\tdrawSelected = true;", "+\t\t\t\tdrawSelected = (style & SWT.HIDE_SELECTION) == 0;", "+\t\t\tdrawBackground = clrTextBk != -1;", "-\t\tdata.foreground = OS.GetTextColor (hDC);", "+\t\tdata.foreground = OS.GetSysColor (OS.COLOR_GRAYTEXT);", "+\tevent.detail |= SWT.FOREGROUND;", "-\t\tevent.detail |= SWT.FOCUSED;", "+\t\tif (nmcd.iSubItem == 0 || (style & SWT.FULL_SELECTION) != 0) {", "+\t\t\tif (handle == OS.GetFocus ()) {", "+\t\t\t\tint uiState = OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "+\t\t\t\tif ((uiState & OS.UISF_HIDEFOCUS) == 0) event.detail |= SWT.FOCUSED;", "+\t\t\t}", "+\t\t}", "-\tif (selected) event.detail |= SWT.SELECTED;", "+\tif (drawSelected) event.detail |= SWT.SELECTED;", "+\tif (drawBackground) event.detail |= SWT.BACKGROUND;", "-\tif (selected) {", "-\t\tif ((event.detail & SWT.SELECTED) == 0) {", "-\t\t\tignoreDrawSelected = true;", "+\tignoreDraw = (event.detail & SWT.FOREGROUND) == 0;", "+\tignoreDrawSelection = (event.detail & SWT.SELECTED) == 0;", "+\tignoreDrawBackground = (event.detail & SWT.BACKGROUND) == 0;", "+\tif (drawSelected) {", "+\t\tif (ignoreDrawSelection) {", "-\t\t\t\ttextColor = clrSelectionText;", "+\t\t\t\tselectionForeground = clrSelectionText;", "-\t\t\tnmcd.uItemState &= ~OS.CDIS_SELECTED;", "+\t\t\tnmcd.uItemState &= ~(OS.CDIS_SELECTED | OS.CDIS_FOCUS);", "-\t\tif ((event.detail & SWT.SELECTED) != 0) {", "+\t\tif (ignoreDrawSelection) {", "-\tignoreDraw = !event.doit;", "-\t\tboolean fullText = (style & SWT.FULL_SELECTION) != 0;", "+\t\tint hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "+\t\tboolean firstColumn = nmcd.iSubItem == OS.SendMessage (hwndHeader, OS.HDM_ORDERTOINDEX, 0, 0);", "+\t\tboolean fullText = (style & SWT.FULL_SELECTION) != 0 || !firstColumn;", "-\t\tif (!ignoreDrawSelected && clrSelectionBk != -1) {", "+\t\tif (!ignoreDrawBackground && drawBackground) {", "+\t\t\tRECT backgroundRect = item.getBounds (nmcd.dwItemSpec, nmcd.iSubItem, true, false, true, false, hDC);", "+\t\t\tfillBackground (hDC, clrTextBk, backgroundRect);", "+\t\t}", "+\t\tif (!ignoreDrawSelection && clrSelectionBk != -1) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc9b34e14bd188b2ebc018f2f3858c44", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Group.java", "commitBeforeChange": "7a26d49f7fcf65bf8625393f1af4a67b482a7c35", "commitAfterChange": "c204154909a9d6903f66ea2c97f8cb0cb5eaa814", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void createHandle(int index)", "signatureAfterChange": "  void createHandle(int index)", "diff": ["-\t", "-\tframeHandle = OS.gtk_frame_new(null);", "-\tif (frameHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t", "-\tboxHandle = OS.gtk_event_box_new();", "-\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\thandle = OS.eclipse_fixed_new();", "+\tfixedHandle = OS.gtk_fixed_new ();", "+\tif (fixedHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\tOS.gtk_fixed_set_has_window (fixedHandle, true);", "+\thandle = OS.gtk_frame_new(null);", "-}", "+\tclientHandle = OS.gtk_fixed_new();", "+\tif (clientHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\tint parentHandle = parent.parentingHandle ();", "+\tOS.gtk_container_add (parentHandle, fixedHandle);", "+\tOS.gtk_container_add (fixedHandle, handle);", "+\tOS.gtk_container_add (handle, clientHandle);", "+\tOS.gtk_widget_show (clientHandle);", "+\tOS.gtk_widget_show (fixedHandle);", "+\t", "+\tif ((style & SWT.SHADOW_IN) != 0) {", "+\t\tOS.gtk_frame_set_shadow_type (handle, OS.GTK_SHADOW_IN);", "+\t}", "+\tif ((style & SWT.SHADOW_OUT) != 0) {", "+\t\tOS.gtk_frame_set_shadow_type (handle, OS.GTK_SHADOW_OUT);", "+\t}", "+\tif ((style & SWT.SHADOW_ETCHED_IN) != 0) {", "+\t\tOS.gtk_frame_set_shadow_type (handle, OS.GTK_SHADOW_ETCHED_IN);", "+\t}", "+\tif ((style & SWT.SHADOW_ETCHED_OUT) != 0) {", "+\t\tOS.gtk_frame_set_shadow_type (handle, OS.GTK_SHADOW_ETCHED_OUT);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d1104f562655700cccfb4b7e78aa3ec", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "271bf8e8631934dbdf092a7f5d74accd534157b3", "commitAfterChange": "267efeba946291455291f7e37b5a9adb5c1006b4", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tString roleText = OS.kAXGroupRole;", "-\t\tbuffer = new char [roleText.length ()];", "-\t\troleText.getChars (0, buffer.length, buffer, 0);", "-\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-\t\tif (attributeName.equals (OS.kAXRoleAttribute)) {", "-\t\t\tif (stringRef [0] != 0) {", "-\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "-\t\t\t\tOS.CFRelease(stringRef [0]);", "-\t\t\t\treturn OS.noErr;", "+\t\tString roleText = ((style & SWT.PUSH) != 0) ? OS.kAXButtonRole", "+\t\t\t\t: ((style & SWT.RADIO) != 0) ? OS.kAXRadioButtonRole", "+\t\t\t\t: ((style & SWT.CHECK) != 0) ? OS.kAXCheckBoxRole", "+\t\t\t\t: ((style & SWT.DROP_DOWN) != 0) ? OS.kAXMenuButtonRole", "+\t\t\t\t: null; // SEPARATOR", "+\t\tif (roleText != null) {", "+\t\t\tbuffer = new char [roleText.length ()];", "+\t\t\troleText.getChars (0, buffer.length, buffer, 0);", "+\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\tif (attributeName.equals (OS.kAXRoleAttribute)) {", "+\t\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "+\t\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (attributeName.equals (OS.kAXRoleDescriptionAttribute)) {", "+\t\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\t\tint stringRef2 = OS.HICopyAccessibilityRoleDescription (stringRef [0], 0);", "+\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef2});", "+\t\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\t\tOS.CFRelease(stringRef2);", "+\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t}", "-\t\tif (attributeName.equals (OS.kAXRoleDescriptionAttribute)) {", "-\t\t\tif (stringRef [0] != 0) {", "-\t\t\t\tint stringRef2 = OS.HICopyAccessibilityRoleDescription (stringRef [0], 0);", "-\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef2});", "-\t\t\t\tOS.CFRelease(stringRef [0]);", "-\t\t\t\tOS.CFRelease(stringRef2);", "-\t\t\t\treturn OS.noErr;", "-\t\t\t}", "+\t}", "+\tif (attributeName.equals (OS.kAXTitleAttribute) || attributeName.equals (OS.kAXDescriptionAttribute)) {", "+\t\tString tooltip = getToolTipText();", "+\t\tif (tooltip != null && getText().equals(\"\")) {", "+\t\t\t//TODO: TEMPORARY CODE: return the tooltip for an icon-only tool item (should send getName to the app)", "+\t\t\tbuffer = new char [tooltip.length ()];", "+\t\t\ttooltip.getChars (0, buffer.length, buffer, 0);", "+\t\t\tint ref = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {ref});", "+\t\t\tOS.CFRelease(ref);", "+\t\t\treturn OS.noErr;", "+\t\t\t// END TEMPORARY CODE"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4b46c7490d35dbadfb442b8177441a9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleClientSite.java", "commitBeforeChange": "306f95301b97e9d8ba82cad67812ad605a6ab86b", "commitAfterChange": "de5b9b1f68cbb466a86733b45d1a63f217e8c701", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " private boolean saveToStorageFile(File file)", "signatureAfterChange": " private boolean saveToStorageFile(File file)", "diff": ["-\t// get access to the persistent storage mechanism", "+\tif (objIOleObject.QueryInterface(COM.IIDIPersistFile, address) == COM.S_OK) {", "+\t\tString fileName = null; ", "+\t\tIPersistFile persistFile = new IPersistFile(address[0]);", "+\t\tint /*long*/[] ppszFileName = new int /*long*/[1];", "+\t\tif (persistFile.GetCurFile(ppszFileName) == COM.S_OK) {", "+\t\t\tint /*long*/ pszFileName = ppszFileName [0];", "+\t\t    int length = OS.wcslen(pszFileName);", "+\t\t    char[] buffer = new char[length];", "+\t\t    OS.MoveMemory(buffer, pszFileName, length * 2);", "+\t\t    fileName = new String(buffer, 0, length);", "+\t\t    // Doc says to use IMalloc::Free, but CoTaskMemFree() does the same ", "+\t\t    COM.CoTaskMemFree(pszFileName);", "+\t\t}", "+\t\tint result;", "+\t\tString newFile = file.getAbsolutePath();", "+\t\tif (fileName != null && fileName.equalsIgnoreCase(newFile)) {", "+\t\t\tresult = persistFile.Save(0, false);", "+\t\t} else {", "+\t\t\tint length = newFile.length();", "+\t\t\tchar[] buffer = new char[length + 1];", "+\t\t\tnewFile.getChars(0, length, buffer, 0);", "+\t\t\tint lpszNewFile = COM.CoTaskMemAlloc(buffer.length * 2);", "+\t\t\tCOM.MoveMemory(lpszNewFile, buffer, buffer.length * 2);", "+\t\t\tresult = persistFile.Save(lpszNewFile, false);", "+\t\t\tCOM.CoTaskMemFree(lpszNewFile);", "+\t\t}", "+\t\tpersistFile.Release();", "+\t\tif (result == COM.S_OK) return true;", "+\t}", "+\t", "+\t// get access to the persistent storage mechanism"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7593210019d6f773726420ca37a92603", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Spinner.java", "commitBeforeChange": "ca2cb9608e1b5eee3fb0b74d18b7bf7a8ebb9e2e", "commitAfterChange": "7cd374fc3f9828efeba3ff4d6e4ac7d324366311", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tcheckWidget ();", "-\tint width = 0, height = 0;", "+\tcheckWidget ();\t", "+\tint [] args = new int [] {", "+\t\tOS.Pt_ARG_TEXT_FONT, 0, 0,", "+\t\tOS.Pt_ARG_NUMERIC_MAX, 0, 0,", "+\t\tOS.Pt_ARG_NUMERIC_UPDOWN_WIDTH, 0, 0,", "+\t};", "+\tOS.PtGetResources (handle, args.length / 3, args);", "+\tint width = wHint;", "+\tint height = hHint;", "+\tif (wHint == SWT.DEFAULT || hHint == SWT.DEFAULT) {", "+\t\tint ptr = args [1];\t ", "+\t\tint length = OS.strlen (ptr);", "+\t\tbyte [] font = new byte [length + 1];", "+\t\tOS.memmove (font, ptr, length);\t", "+\t\tString string = String.valueOf (args [4]);\t", "+\t\tPhRect_t rect = new PhRect_t ();", "+\t\tint size = string.length ();", "+\t\tchar [] buffer = new char [size];", "+\t\tstring.getChars (0, size, buffer, 0);\t", "+\t\tOS.PfExtentWideText (rect, null, font, buffer, size * 2);", "+\t\tif (wHint == SWT.DEFAULT) width = rect.lr_x - rect.ul_x + 1;", "+\t\tif (hHint == SWT.DEFAULT) height = rect.lr_y - rect.ul_y + 1;", "+\t}", "-\treturn new Point (trim.width, trim.height);", "+\tif (hHint == SWT.DEFAULT) {", "+\t\ttrim.height = Math.max (trim.height, args [7] * 2);", "+\t}", "+\treturn new Point (trim.width, trim.height);\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f337a51cba1511b03ffd46b439f394a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "5a1722e7ed2ad9d5a4489af845cf0419502b0fda", "commitAfterChange": "13fdd1d635c82d6269b098a4008efefeaf88b0d2", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 68, "signatureBeforeChange": "  boolean shouldChangeTextInRange_replacementString(int id, int sel, int affectedCharRange, int replacementString)", "signatureAfterChange": "  boolean shouldChangeTextInRange_replacementString(int id, int sel, int affectedCharRange, int replacementString)", "diff": ["-\t\tString text = new NSString(replacementString).getString();", "+\t\tString string = new NSString(replacementString).getString();", "-\t\tString newText = verifyText(text, (int)/*64*/range.location, (int)/*64*/(range.location+range.length), currentEvent);", "+\t\tString newText = verifyText(string, (int)/*64*/range.location, (int)/*64*/(range.location+range.length), currentEvent);", "-\t\tif (text != newText) {", "-\t\t\tinsertEditText(newText);", "+\t\tif (!string.equals(newText)) {", "+\t\t\tint length = newText.length();", "+\t\t\tPoint selection = getSelection();", "+\t\t\tif (textLimit != LIMIT) {", "+\t\t\t\tint charCount = getCharCount();", "+\t\t\t\tif (charCount - (selection.y - selection.x) + length > textLimit) {", "+\t\t\t\t\tlength = textLimit - charCount + (selection.y - selection.x);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tchar [] buffer = new char [length];", "+\t\t\tnewText.getChars (0, buffer.length, buffer, 0);", "+\t\t\tNSString nsstring = NSString.stringWithCharacters (buffer, buffer.length);", "+\t\t\tNSText fieldEditor = ((NSTextField) view).currentEditor ();", "+\t\t\tfieldEditor.replaceCharactersInRange (fieldEditor.selectedRange (), nsstring);", "+\t\t\ttext = fieldEditor.string().getString();", "+\t\t\tsendEvent (SWT.Modify);", "-\t\t}", "-\t\tif (!result) sendEvent (SWT.Modify);", "+\t\t} ", "+\t}", "+\tif (result) {", "+\t\tchar[] chars = new char[text.length()];", "+\t\ttext.getChars(0, chars.length, chars, 0);", "+\t\tNSMutableString mutable = (NSMutableString) NSMutableString.stringWithCharacters(chars, chars.length);", "+\t\tmutable.replaceCharactersInRange(range, new NSString(replacementString));", "+\t\ttext = mutable.getString();", "+\t\tselectionRange = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7507cc9ee7ef2e86b5cefcecbb4ff05e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 46, "signatureBeforeChange": "\r \r int processMouseUp (int callData)", "signatureAfterChange": "\r int processMouseUp (int callData)", "diff": ["-int processMouseUp (int callData) {\r", "-\tgetDisplay ().hideToolTip();\t\r", "-\r", "-\t/**\r", "-\t* Bug in Motif. The activate callback is unreliable on \r", "-\t* drawn buttons. Rather than relying on it to generate\r", "-\t* selection events, use the mouseUp event.\r", "-\tint [] argList = {OS.XmNwidth, 0, OS.XmNheight, 0};\r", "-\tif (xEvent.x >= 0 && xEvent.y >= 0 && xEvent.x <= argList[1] && xEvent.y <= argList[3]) {\r", "-\t\tprocessSelection(0);\r", "-\t}\r", "-\tsetDrawPressed(set);\t\r", "+int processMouseUp (int callData) {\r", "+\tDisplay display = getDisplay ();\r", "+\tdisplay.hideToolTip(); \r", "+\tXButtonEvent xEvent = new XButtonEvent ();\r", "+\tOS.memmove (xEvent, callData, XButtonEvent.sizeof);\r", "+\tif (xEvent.button == 1) {\r", "+\t\tint [] argList = {OS.XmNwidth, 0, OS.XmNheight, 0};\r", "+\t\tOS.XtGetValues (handle, argList, argList.length / 2);\r", "+\t\tint width = argList [1], height = argList [3];\r", "+\t\tif (0 <= xEvent.x && xEvent.x < width && 0 <= xEvent.y && xEvent.y < height) {\r", "+\t\t\tif ((style & SWT.RADIO) != 0) {\r", "+\t\t\t\tselectRadio ();\r", "+\t\t\t} else {\r", "+\t\t\t\tif ((style & SWT.CHECK) != 0) setSelection(!set);\t\t\t\r", "+\t\t\t}\r", "+\t\t\tEvent event = new Event ();\r", "+\t\t\tif ((style & SWT.DROP_DOWN) != 0) {\r", "+\t\t\t\tif (xEvent.x > width - 12) event.detail = SWT.ARROW;\r", "+\t\t\t}\r", "+\t\t\tpostEvent (SWT.Selection, event);\r", "+\t\t}\r", "+\t\tsetDrawPressed(set);\r", "+\t}\r", "+\t/*\r", "+\t* Forward the mouse event to the parent.\r", "+\t* This is necessary so that mouse listeners\r", "+\t* in the parent will be called, despite the\r", "+\t* fact that the event did not really occur\r", "+\t* in X in the parent.  This is done to be\r", "+\t* compatible with Windows.\r", "+\t*/\r", "+\tint [] argList = {OS.XmNx, 0, OS.XmNy, 0};\r", "+\tOS.XtGetValues (handle, argList, argList.length / 2);\r", "+\txEvent.window = OS.XtWindow (parent.handle);\r", "+\txEvent.x += argList [1];  xEvent.y += argList [3];\r", "+\tOS.memmove (callData, xEvent, XButtonEvent.sizeof);\r", "+\tparent.processMouseUp (callData);\r", "+\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3062ef5c696c4c219664b295da9d36f7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "7a26d49f7fcf65bf8625393f1af4a67b482a7c35", "commitAfterChange": "c204154909a9d6903f66ea2c97f8cb0cb5eaa814", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["-", "-", "-\tboxHandle = OS.gtk_event_box_new();", "-\tif (boxHandle==0) error(SWT.ERROR_NO_HANDLES);", "-\t", "-\tfixedHandle = OS.eclipse_fixed_new();", "+\tfixedHandle = OS.gtk_fixed_new ();", "-", "-\thandle = OS.gtk_clist_new (MAX_COLUMNS);", "-\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "+\tOS.gtk_fixed_set_has_window (fixedHandle, true);", "-}", "+\thandle = OS.gtk_clist_new (MAX_COLUMNS);", "+\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+\tint parentHandle = parent.parentingHandle ();", "+\tOS.gtk_container_add (parentHandle, fixedHandle);", "+\tOS.gtk_widget_show (fixedHandle);", "+\tOS.gtk_widget_show (scrolledHandle);", "+\tOS.gtk_widget_show (handle);", "+\t", "+\tint mode = (style & SWT.MULTI) != 0 ? OS.GTK_SELECTION_EXTENDED : OS.GTK_SELECTION_BROWSE;", "+\tOS.gtk_clist_set_selection_mode (handle, mode);", "+\t\tOS.gtk_widget_realize (handle);"]}], "num": 47248}
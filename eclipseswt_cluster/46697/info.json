{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49500366d27e12de944e59b79f43647c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3b5a85af93781283891d2381feb5399", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "c8f03fe44f19567b38efadfccba773495882885b", "commitAfterChange": "460384db3fd88c27a6bcd31d10f9702c5446d162", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "  LRESULT WM_ACTIVATE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_ACTIVATE (int wParam, int lParam)", "diff": ["-//\tint threadId = OS.GetWindowThreadProcessId (lParam, null);", "-//\tif (threadId != OS.GetCurrentThreadId ()) {", "-//\t\tint [] processID = new int [1];", "-//\t\tOS.GetWindowThreadProcessId (lParam, processID);", "-//\t\tif (processID [0] == OS.GetCurrentProcessId ()) {", "-//\t\t\tTCHAR buffer = new TCHAR (0, 128);", "-//\t\t\tOS.GetClassName (lParam, buffer, buffer.length ());", "-//\t\t\tString className = buffer.toString (0, buffer.strlen ());", "-//\t\t\t/*", "-//\t\t\t* Feature in AWT.  ", "-//\t\t\t*/", "-//\t\t\tif (className.startsWith (Display.AWT_WINDOW_CLASS_PREFIX)) {", "-//\t\t\t\t//OS.ReplyMessage (0);", "-//\t\t\t}", "-//\t\t\t/*", "-//\t\t\t* Feature in AWT.  When an AWT Window is activated,", "-//\t\t\t* for some reason, it seems to forward the WM_ACTIVATE", "-//\t\t\t* message to the parent.  Normally, the parent is an", "-//\t\t\t* AWT Frame.  When AWT is embedded in SWT, the SWT", "-//\t\t\t* shell gets the WM_ACTIVATE and assumes that it came", "-//\t\t\t* from Windows.  When an SWT shell is activated it", "-//\t\t\t* restores focus to the last control that had focus.", "-//\t\t\t* If this control is an embedded composite, it takes", "-//\t\t\t* focus from the AWT Window.  The fix is to ignore", "-//\t\t\t* WM_ACTIVATE messages that come from AWT Windows.", "-//\t\t\t*/", "-//\t\t\tif (OS.GetParent (lParam) == handle) {", "-//\t\t\t\tif (className.equals (Display.AWT_WINDOW_CLASS)) {", "-//\t\t\t\t\treturn LRESULT.ZERO;", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t}", "-//\t}", "+\t/*", "+\t* Feature in AWT.  When an AWT Window is activated,", "+\t* for some reason, it seems to forward the WM_ACTIVATE", "+\t* message to the parent.  Normally, the parent is an", "+\t* AWT Frame.  When AWT is embedded in SWT, the SWT", "+\t* shell gets the WM_ACTIVATE and assumes that it came", "+\t* from Windows.  When an SWT shell is activated it", "+\t* restores focus to the last control that had focus.", "+\t* If this control is an embedded composite, it takes", "+\t* focus from the AWT Window.  The fix is to ignore", "+\t* WM_ACTIVATE messages that come from AWT Windows.", "+\t*/", "+\tif (OS.GetParent (lParam) == handle) {", "+\t\tTCHAR buffer = new TCHAR (0, 128);", "+\t\tOS.GetClassName (lParam, buffer, buffer.length ());", "+\t\tString className = buffer.toString (0, buffer.strlen ());", "+\t\tif (className.equals (Display.AWT_WINDOW_CLASS)) {", "+\t\t\treturn LRESULT.ZERO;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "614bd3fd278d12cc1c645044677e4664", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "941fe0db3dd763ccfa22752197e6c0aece974d95", "commitAfterChange": "d4d83e9bda0ef720f842c49259231cc258ca06e7", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "  LRESULT WM_ACTIVATE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_ACTIVATE (int wParam, int lParam)", "diff": ["-\t/*", "-\t* Feature in AWT.  When an AWT Window is activated,", "-\t* for some reason, it seems to forward the WM_ACTIVATE", "-\t* message to the parent.  Normally, the parent is an", "-\t* AWT Frame.  When AWT is embedded in SWT, the SWT", "-\t* shell gets the WM_ACTIVATE and assumes that it came", "-\t* from Windows.  When an SWT shell is activated it", "-\t* restores focus to the last control that had focus.", "-\t* If this control is an embedded composite, it takes", "-\t* focus from the AWT Window.  The fix is to ignore", "-\t* WM_ACTIVATE messages that come from AWT Windows.", "-\t*/", "-\tif (OS.GetParent (lParam) == handle) {", "-\t\tTCHAR buffer = new TCHAR (0, 128);", "-\t\tOS.GetClassName (lParam, buffer, buffer.length ());", "-\t\tString className = buffer.toString (0, buffer.strlen ());", "-\t\tif (className.equals (Display.AWT_WINDOW_CLASS)) {", "-\t\t\treturn LRESULT.ZERO;", "-\t\t}", "-\t}", "+//\tint threadId = OS.GetWindowThreadProcessId (lParam, null);", "+//\tif (threadId != OS.GetCurrentThreadId ()) {", "+//\t\tint [] processID = new int [1];", "+//\t\tOS.GetWindowThreadProcessId (lParam, processID);", "+//\t\tif (processID [0] == OS.GetCurrentProcessId ()) {", "+//\t\t\tTCHAR buffer = new TCHAR (0, 128);", "+//\t\t\tOS.GetClassName (lParam, buffer, buffer.length ());", "+//\t\t\tString className = buffer.toString (0, buffer.strlen ());", "+//\t\t\t/*", "+//\t\t\t* Feature in AWT.  ", "+//\t\t\t*/", "+//\t\t\tif (className.startsWith (Display.AWT_WINDOW_CLASS_PREFIX)) {", "+//\t\t\t\t//OS.ReplyMessage (0);", "+//\t\t\t}", "+//\t\t\t/*", "+//\t\t\t* Feature in AWT.  When an AWT Window is activated,", "+//\t\t\t* for some reason, it seems to forward the WM_ACTIVATE", "+//\t\t\t* message to the parent.  Normally, the parent is an", "+//\t\t\t* AWT Frame.  When AWT is embedded in SWT, the SWT", "+//\t\t\t* shell gets the WM_ACTIVATE and assumes that it came", "+//\t\t\t* from Windows.  When an SWT shell is activated it", "+//\t\t\t* restores focus to the last control that had focus.", "+//\t\t\t* If this control is an embedded composite, it takes", "+//\t\t\t* focus from the AWT Window.  The fix is to ignore", "+//\t\t\t* WM_ACTIVATE messages that come from AWT Windows.", "+//\t\t\t*/", "+//\t\t\tif (OS.GetParent (lParam) == handle) {", "+//\t\t\t\tif (className.equals (Display.AWT_WINDOW_CLASS)) {", "+//\t\t\t\t\treturn LRESULT.ZERO;", "+//\t\t\t\t}", "+//\t\t\t}", "+//\t\t}", "+//\t}"]}], "num": 46697}
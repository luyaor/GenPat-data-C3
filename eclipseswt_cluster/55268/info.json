{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70e683fa9de3690c9eef6de69952c100", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57c5263e898026122333b1d9d99cbe25", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "d636f4503e6c6894569c1f5530b46b3e87886345", "commitAfterChange": "d2bd83a1a061070b632f8cef24791707051becdb", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r void calculateContentWidth(int startLine, int lineCount)", "signatureAfterChange": "\r \tpublic void calculate(int startLine, int lineCount)", "diff": ["+\t */\r", "+\tpublic void calculate(int startLine, int lineCount) {\r", "+\t\tGC gc = null;\r", "+\t\tint caretWidth = 0;\r", "+\t\tint stopLine = startLine + lineCount;\r", "+\t\t\t\t\r", "+\t\tfor (int i = startLine; i < stopLine; i++) {\r", "+\t\t\tif (lineWidth[i] == -1) {\r", "+\t\t\t\tString line = content.getLine(i);\r", "+\t\t\t\tint lineOffset = content.getOffsetAtLine(i);\r", "+\t\t\r", "+\t\t\t\tif (gc == null) {\r", "+\t\t\t\t\tgc = new GC(parent);\r", "+\t\t\t\t\tcaretWidth = getCaretWidth();\r", "+\t\t\t\t}\t\t\r", "+\t\t\t\tlineWidth[i] = contentWidth(line, lineOffset, gc) + caretWidth;\r", "+\t\t\t}\r", "+\t\t\tif (lineWidth[i] > maxWidth) {\r", "+\t\t\t\tmaxWidth = lineWidth[i];\r", "+\t\t\t\tmaxWidthLineIndex = i;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (gc != null) {\r", "+\t\t\tgc.dispose();\t\r", "+\t\t}\r", "+\t}\r", "- */\r", "-void calculateContentWidth(int startLine, int lineCount) {\r", "-\tString line;\r", "-\tGC gc = new GC(this);\r", "-\tFontData fontData = gc.getFont().getFontData()[0];\r", "-\tint stopLine;\r", "-\tboolean isBidi = isBidi();\r", "-\t\r", "-\tif (lineCount < 0) {\r", "-\t\tstartLine += lineCount;\r", "-\t\tlineCount *= -1;\r", "-\t}\r", "-\tstopLine = startLine + lineCount;\r", "-\tsetLineFont(gc, fontData, SWT.BOLD);\t\r", "-\tfor (int i = startLine; i < stopLine; i++) {\r", "-\t\tline = content.getLine(i);\r", "-\t\tif (isBidi) {\r", "-            int lineOffset = content.getOffsetAtLine (i);\r", "-            StyledTextBidi bidi = new StyledTextBidi(gc, tabWidth, line, null, null, getBidiSegments(line, lineOffset));\r", "-\t\t\tcontentWidth = Math.max(bidi.getTextWidth() + getCaretWidth(), contentWidth);\r", "-\t\t}\r", "-\t\telse {\r", "-\t\t\tcontentWidth = Math.max(contentWidth(line, i, gc) + getCaretWidth(), contentWidth);\r", "-\t\t}\r", "-\t}\r", "-\tgc.dispose();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee7667fdf1dfb8dad41e73f78fa58743", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "bb1315523155126fc14ec720837cee10f98baa29", "commitAfterChange": "75613ad8acd6747941822f84720ce27c938bcb54", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  public Point getLineOffsets(int lineIndex)", "signatureAfterChange": "  public int[] getLineOffsets()", "diff": ["-public Point getLineOffsets(int lineIndex) {", "-\tcheckLayout ();", "+public int[] getLineOffsets() {", "+\tcheckLayout();", "-\tif (!(0 <= lineIndex && lineIndex < lineCount)) SWT.error(SWT.ERROR_INVALID_RANGE);", "-\tPangoLayoutLine line = new PangoLayoutLine();", "-\tOS.memmove(line, OS.pango_layout_get_line(layout, lineIndex), PangoLayoutLine.sizeof);", "+\tint[] offsets = new int [lineCount + 1];", "-\tint start = (int)/*64*/OS.g_utf8_pointer_to_offset(ptr, ptr + line.start_index), end;", "-\tif (lineIndex < lineCount - 1) {", "-\t\tOS.memmove(line, OS.pango_layout_get_line(layout, lineIndex + 1), PangoLayoutLine.sizeof);", "-\t\tend = (int)/*64*/OS.g_utf8_pointer_to_offset(ptr, ptr + line.start_index) - 1; ", "-\t} else {", "-\t\tend = text.length() - 1; ", "-\t}", "-\treturn new Point(start, Math.max(start, end));", "+\tint /*long*/ iter = OS.pango_layout_get_iter(layout);", "+\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint i = 0;", "+\tdo {", "+\t\tint bytePos = OS.pango_layout_iter_get_index(iter);", "+\t\tint pos = (int)/*64*/OS.g_utf8_pointer_to_offset(ptr, ptr + bytePos);", "+\t\toffsets[i++] = untranslateOffset(pos);", "+\t} while (OS.pango_layout_iter_next_line(iter));\t\t\t\t\t", "+\toffsets[lineCount] = text.length();\t\t\t\t\t\t ", "+\treturn offsets;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41d9a1cfe06ebae8ad94655c7a2770db", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/win32/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "956064920164af846897dbf9e7041081754b9dbf", "commitAfterChange": "0af6a7dcf02fe44885063157294405c3130cd181", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " protected void create(DeviceData deviceData)", "signatureAfterChange": " protected void create(DeviceData deviceData)", "diff": ["-\t\t/* Initialize DEVMODE for the default printer. */", "-\t\tPRINTDLG pd = new PRINTDLG();", "-\t\tpd.lStructSize = PRINTDLG.sizeof;", "-\t\tpd.Flags = OS.PD_RETURNDEFAULT;", "-\t\tif (!OS.PrintDlg(pd)) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tif (pd.hDevMode != 0) {", "-\t\t\tint /*long*/ hGlobal = pd.hDevMode;", "-\t\t\tint /*long*/ ptr = OS.GlobalLock(hGlobal);", "-\t\t\tint size = OS.GlobalSize(hGlobal);", "-\t\t\tlpInitData = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, size);", "-\t\t\tOS.MoveMemory(lpInitData, ptr, size);", "-\t\t\tOS.GlobalUnlock(hGlobal);", "-\t\t\tOS.GlobalFree(pd.hDevMode);", "+\t\tif (!OS.IsWinCE) {", "+\t\t\tint /*long*/ [] hPrinter = new int /*long*/ [1];", "+\t\t\tOS.OpenPrinter(device, hPrinter, 0);", "+\t\t\tif (hPrinter[0] != 0) {", "+\t\t\t\tint dwNeeded = OS.DocumentProperties(0, hPrinter[0], device, 0, 0, 0);", "+\t\t\t\tif (dwNeeded >= 0) {", "+\t\t\t\t\tlpInitData = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, dwNeeded);", "+\t\t\t\t\tint rc = OS.DocumentProperties(0, hPrinter[0], device, lpInitData, 0, OS.DM_OUT_BUFFER);", "+\t\t\t\t\tif (rc != OS.IDOK) {", "+\t\t\t\t\t\tOS.HeapFree(hHeap, 0, lpInitData);", "+\t\t\t\t\t\tlpInitData = 0;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tOS.ClosePrinter(hPrinter[0]);", "+\t\t\t}", "-\t\tif (pd.hDevNames != 0) OS.GlobalFree(pd.hDevNames);", "-\tDEVMODE devmode = OS.IsUnicode ? (DEVMODE)new DEVMODEW () : new DEVMODEA ();", "-\tOS.MoveMemory(devmode, lpInitData, DEVMODE.sizeof);", "-\tdevmode.dmFields |= OS.DM_ORIENTATION;", "-\tdevmode.dmOrientation = data.orientation == PrinterData.LANDSCAPE ? OS.DMORIENT_LANDSCAPE : OS.DMORIENT_PORTRAIT;", "-\tif (data.copyCount != 1) {", "-\t\tdevmode.dmFields |= OS.DM_COPIES;", "-\t\tdevmode.dmCopies = (short)data.copyCount;", "-\t}", "-\tif (data.collate != false) {", "-\t\tdevmode.dmFields |= OS.DM_COLLATE;", "-\t\tdevmode.dmCollate = OS.DMCOLLATE_TRUE;", "-\t}", "-\tif (data.duplex != SWT.DEFAULT) {", "-\t\tdevmode.dmFields |= OS.DM_DUPLEX;", "-\t\tswitch (data.duplex) {", "-\t\t\tcase PrinterData.DUPLEX_SHORT_EDGE: devmode.dmDuplex = OS.DMDUP_HORIZONTAL; break;", "-\t\t\tcase PrinterData.DUPLEX_LONG_EDGE: devmode.dmDuplex = OS.DMDUP_VERTICAL; break;", "-\t\t\tdefault: devmode.dmDuplex = OS.DMDUP_SIMPLEX;", "+\tif (lpInitData != 0) {", "+\t\tDEVMODE devmode = OS.IsUnicode ? (DEVMODE)new DEVMODEW () : new DEVMODEA ();", "+\t\tOS.MoveMemory(devmode, lpInitData, DEVMODE.sizeof);", "+\t\tdevmode.dmFields |= OS.DM_ORIENTATION;", "+\t\tdevmode.dmOrientation = data.orientation == PrinterData.LANDSCAPE ? OS.DMORIENT_LANDSCAPE : OS.DMORIENT_PORTRAIT;", "+\t\tif (data.copyCount != 1) {", "+\t\t\tdevmode.dmFields |= OS.DM_COPIES;", "+\t\t\tdevmode.dmCopies = (short)data.copyCount;", "+\t\tif (data.collate != false) {", "+\t\t\tdevmode.dmFields |= OS.DM_COLLATE;", "+\t\t\tdevmode.dmCollate = OS.DMCOLLATE_TRUE;", "+\t\t}", "+\t\tif (data.duplex != SWT.DEFAULT) {", "+\t\t\tdevmode.dmFields |= OS.DM_DUPLEX;", "+\t\t\tswitch (data.duplex) {", "+\t\t\t\tcase PrinterData.DUPLEX_SHORT_EDGE: devmode.dmDuplex = OS.DMDUP_HORIZONTAL; break;", "+\t\t\t\tcase PrinterData.DUPLEX_LONG_EDGE: devmode.dmDuplex = OS.DMDUP_VERTICAL; break;", "+\t\t\t\tdefault: devmode.dmDuplex = OS.DMDUP_SIMPLEX;", "+\t\t\t}", "+\t\t}", "+\t\tOS.MoveMemory(lpInitData, devmode, DEVMODE.sizeof);", "-\tOS.MoveMemory(lpInitData, devmode, DEVMODE.sizeof);", "-"]}], "num": 55268}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1845027f2f2503fd5c910e29c0eb23b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3b5a85af93781283891d2381feb5399", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "c8f03fe44f19567b38efadfccba773495882885b", "commitAfterChange": "460384db3fd88c27a6bcd31d10f9702c5446d162", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "  LRESULT WM_ACTIVATE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_ACTIVATE (int wParam, int lParam)", "diff": ["-//\tint threadId = OS.GetWindowThreadProcessId (lParam, null);", "-//\tif (threadId != OS.GetCurrentThreadId ()) {", "-//\t\tint [] processID = new int [1];", "-//\t\tOS.GetWindowThreadProcessId (lParam, processID);", "-//\t\tif (processID [0] == OS.GetCurrentProcessId ()) {", "-//\t\t\tTCHAR buffer = new TCHAR (0, 128);", "-//\t\t\tOS.GetClassName (lParam, buffer, buffer.length ());", "-//\t\t\tString className = buffer.toString (0, buffer.strlen ());", "-//\t\t\t/*", "-//\t\t\t* Feature in AWT.  ", "-//\t\t\t*/", "-//\t\t\tif (className.startsWith (Display.AWT_WINDOW_CLASS_PREFIX)) {", "-//\t\t\t\t//OS.ReplyMessage (0);", "-//\t\t\t}", "-//\t\t\t/*", "-//\t\t\t* Feature in AWT.  When an AWT Window is activated,", "-//\t\t\t* for some reason, it seems to forward the WM_ACTIVATE", "-//\t\t\t* message to the parent.  Normally, the parent is an", "-//\t\t\t* AWT Frame.  When AWT is embedded in SWT, the SWT", "-//\t\t\t* shell gets the WM_ACTIVATE and assumes that it came", "-//\t\t\t* from Windows.  When an SWT shell is activated it", "-//\t\t\t* restores focus to the last control that had focus.", "-//\t\t\t* If this control is an embedded composite, it takes", "-//\t\t\t* focus from the AWT Window.  The fix is to ignore", "-//\t\t\t* WM_ACTIVATE messages that come from AWT Windows.", "-//\t\t\t*/", "-//\t\t\tif (OS.GetParent (lParam) == handle) {", "-//\t\t\t\tif (className.equals (Display.AWT_WINDOW_CLASS)) {", "-//\t\t\t\t\treturn LRESULT.ZERO;", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t}", "-//\t}", "+\t/*", "+\t* Feature in AWT.  When an AWT Window is activated,", "+\t* for some reason, it seems to forward the WM_ACTIVATE", "+\t* message to the parent.  Normally, the parent is an", "+\t* AWT Frame.  When AWT is embedded in SWT, the SWT", "+\t* shell gets the WM_ACTIVATE and assumes that it came", "+\t* from Windows.  When an SWT shell is activated it", "+\t* restores focus to the last control that had focus.", "+\t* If this control is an embedded composite, it takes", "+\t* focus from the AWT Window.  The fix is to ignore", "+\t* WM_ACTIVATE messages that come from AWT Windows.", "+\t*/", "+\tif (OS.GetParent (lParam) == handle) {", "+\t\tTCHAR buffer = new TCHAR (0, 128);", "+\t\tOS.GetClassName (lParam, buffer, buffer.length ());", "+\t\tString className = buffer.toString (0, buffer.strlen ());", "+\t\tif (className.equals (Display.AWT_WINDOW_CLASS)) {", "+\t\t\treturn LRESULT.ZERO;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49d04cef22cf3f1bd29599dac69e3fe4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "3bc7acfa36ee31a19eff8e990b6fe8fea469bc66", "commitAfterChange": "5dd555b333bfe4be20987ae764a2256175dee6d5", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  int _getOffset(int offset, int movement, boolean forward)", "signatureAfterChange": "  int _getOffset(int offset, int movement, boolean forward)", "diff": ["+\t\t\t\t\tcase SWT.MOVEMENT_WORD_START:", "+\t\t\t\t\tcase SWT.MOVEMENT_WORD_END: {", "+\t\t\t\t\t\tif (offset > 0) {", "+\t\t\t\t\t\t\tboolean isLetterOrDigit = Compatibility.isLetterOrDigit(segmentsText.charAt(offset));", "+\t\t\t\t\t\t\tboolean previousLetterOrDigit = Compatibility.isLetterOrDigit(segmentsText.charAt(offset - 1));", "+\t\t\t\t\t\t\tif (!isLetterOrDigit && previousLetterOrDigit) {", "+\t\t\t\t\t\t\t\treturn untranslateOffset(offset);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d48675e21e111f92e7ee375376c8d778", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "9590c886e5aa5dfa6590d62b81b13c52ec4149a6", "commitAfterChange": "eff4a91fc5004d296b6e06870a24dbbbada441e2", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "  LRESULT WM_ACTIVATE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_ACTIVATE (int wParam, int lParam)", "diff": ["+\t/*", "+\t* Feature in AWT.  When an AWT Window is activated,", "+\t* for some reason, it seems to forward the WM_ACTIVATE", "+\t* message to the parent.  Normally, the parent is an", "+\t* AWT Frame.  When AWT is embedded in SWT, the SWT", "+\t* shell gets the WM_ACTIVATE and assumes that it came", "+\t* from Windows.  When an SWT shell is activated it", "+\t* restores focus to the last control that had focus.", "+\t* If this control is an embedded composite, it takes", "+\t* focus from the AWT Window.  The fix is to ignore", "+\t* WM_ACTIVATE messages that come from AWT Windows.", "+\t*/", "+\tif (OS.GetParent (lParam) == handle) {", "+\t\tTCHAR buffer = new TCHAR (0, 128);", "+\t\tOS.GetClassName (lParam, buffer, buffer.length ());", "+\t\tString className = buffer.toString (0, buffer.strlen ());", "+\t\tif (className.equals (Display.AWT_WINDOW_CLASS)) {", "+\t\t\treturn LRESULT.ONE;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ce6c80d705349afd633c79941a115c5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/win32/org/eclipse/swt/program/Program.java", "commitBeforeChange": "d4eb14ad4f7b1074d4935c2b9211f94b2750616d", "commitAfterChange": "7d562ae8941ad5655a314eac8dd19e3b2aaef50c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public static Program [] getPrograms ()", "signatureAfterChange": "\r public static Program [] getPrograms ()", "diff": ["-\tbyte [] key = new byte [1024];\r", "-\tint index = 0, count = 0;\r", "-\twhile (OS.RegEnumKey (OS.HKEY_CLASSES_ROOT, index, key, key.length) != OS.ERROR_NO_MORE_ITEMS) {\r", "-\t\tProgram program = getProgram (key);\r", "+\t/* Use the character encoding for the default locale */\r", "+\tTCHAR lpName = new TCHAR (0, 1024);\r", "+\tint [] lpcName = new int [] {lpName.length ()};\r", "+\tFILETIME ft = new FILETIME ();\r", "+\tint dwIndex = 0, count = 0;\r", "+\twhile (OS.RegEnumKeyEx (OS.HKEY_CLASSES_ROOT, dwIndex, lpName, lpcName, null, null, null, ft) != OS.ERROR_NO_MORE_ITEMS) {\t\r", "+\t\tString path = lpName.toString (0, lpcName [0]);\r", "+\t\tlpcName [0] = lpName.length ();\r", "+\t\tProgram program = getProgram (path);\r", "-\t\tindex++;\r", "+\t\tdwIndex++;\r"]}], "num": 19272}
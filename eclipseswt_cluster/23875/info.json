{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbfd44dae80a96a2f47545eea532433f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b74d81fd1c540f10ad5e4a6dda119e5e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 57, "signatureBeforeChange": " void insertColumnVisual(TableColumn column)", "signatureAfterChange": " void onArrowDown (int stateMask)", "diff": ["+}", "+void onArrowDown (int stateMask) {", "+\tif ((stateMask & (SWT.SHIFT | SWT.CTRL)) == 0) {", "+\t\t/* Down Arrow with no modifiers */", "+\t\tint newFocusIndex = focusItem.index + 1;", "+\t\tif (newFocusIndex == items.length) return; \t/* at bottom */", "+\t\tselectItem (items [newFocusIndex], false);", "+\t\tsetFocusItem (items [newFocusIndex], true);", "+\t\tredrawItem (newFocusIndex, true);", "+\t\tshowItem (items [newFocusIndex]);", "+\t\tEvent newEvent = new Event ();", "+\t\tnewEvent.item = items [newFocusIndex];", "+\t\tpostEvent (SWT.Selection, newEvent);", "+\t\treturn;", "+\t}", "+\tif ((style & SWT.SINGLE) != 0) {", "+\t\tif ((stateMask & SWT.CTRL) != 0) {", "+\t\t\t/* CTRL+Down Arrow, CTRL+Shift+Down Arrow */", "+\t\t\tint visibleItemCount = (getClientArea ().height - getHeaderHeight ()) / itemHeight;", "+\t\t\tif (items.length <= topIndex + visibleItemCount) return;\t/* at bottom */", "+\t\t\tupdate ();", "+\t\t\ttopIndex++;", "+\t\t\tgetVerticalBar ().setSelection (topIndex);", "+\t\t\tRectangle clientArea = getClientArea ();", "+\t\t\tGC gc = new GC (this);", "+\t\t\tgc.copyArea (", "+\t\t\t\t0, 0,", "+\t\t\t\tclientArea.width, clientArea.height,", "+\t\t\t\t0, -itemHeight);", "+\t\t\tgc.dispose ();", "+\t\t\treturn;", "+\t\t}", "+\t\t/* Shift+Down Arrow */", "+\t\tint newFocusIndex = focusItem.index + 1;", "+\t\tif (newFocusIndex == items.length) return; \t/* at bottom */", "+\t\tselectItem (items [newFocusIndex], false);", "+\t\tsetFocusItem (items [newFocusIndex], true);", "+\t\tredrawItem (newFocusIndex, true);", "+\t\tshowItem (items [newFocusIndex]);", "+\t\tEvent newEvent = new Event ();", "+\t\tnewEvent.item = items [newFocusIndex];", "+\t\tpostEvent (SWT.Selection, newEvent);", "+\t\treturn;", "+\t}", "+\t/* SWT.MULTI */", "+\tif ((stateMask & SWT.CTRL) != 0) {", "+\t\tif ((stateMask & SWT.SHIFT) != 0) {", "+\t\t\t/* CTRL+Shift+Down Arrow */", "+\t\t\tint visibleItemCount = (getClientArea ().height - getHeaderHeight ()) / itemHeight;", "+\t\t\tif (items.length <= topIndex + visibleItemCount) return;\t/* at bottom */", "+\t\t\tupdate ();", "+\t\t\ttopIndex++;", "+\t\t\tgetVerticalBar ().setSelection (topIndex);", "+\t\t\tRectangle clientArea = getClientArea ();", "+\t\t\tGC gc = new GC (this);", "+\t\t\tgc.copyArea (", "+\t\t\t\t0, 0,", "+\t\t\t\tclientArea.width, clientArea.height,", "+\t\t\t\t0, -itemHeight);", "+\t\t\tgc.dispose ();", "+\t\t\treturn;", "+\t\t}", "+\t\t/* CTRL+Down Arrow */", "+\t\tint focusIndex = focusItem.index; ", "+\t\tif (focusIndex == items.length - 1) return;\t/* at bottom */", "+\t\tTableItem newFocusItem = items [focusIndex + 1];", "+\t\tsetFocusItem (newFocusItem, true);", "+\t\tredrawItem (newFocusItem.index, true);", "+\t\tshowItem (newFocusItem);", "+\t\treturn;", "+\t}", "+\t/* Shift+Down Arrow */", "+\tint newFocusIndex = focusItem.index + 1;", "+\tif (newFocusIndex == items.length) return; \t/* at bottom */", "+\tif (anchorItem == null) anchorItem = focusItem;", "+\tselectItem (items [newFocusIndex], true);", "+\tsetFocusItem (items [newFocusIndex], true);", "+\tredrawItem (newFocusIndex, true);", "+\tshowItem (items [newFocusIndex]);", "+\tEvent newEvent = new Event ();", "+\tnewEvent.item = items [newFocusIndex];", "+\tpostEvent (SWT.Selection, newEvent);", "+}", "- */", "-void insertColumnVisual(TableColumn column) {", "-\tRectangle columnBounds = column.getBounds();", "-\tRectangle previousColumnBounds;", "-\tint index = column.getIndex();", "-\t\t", "-\tif (index > 0) {", "-\t\tpreviousColumnBounds = getColumn(index - 1).getBounds();", "-\t\tcolumnBounds.x = previousColumnBounds.x + previousColumnBounds.width;", "-\t}", "-\telse {", "-\t\tcolumnBounds.x = 0;", "-\t}", "-\tcolumn.setBounds(columnBounds);", "-\tsetColumnPosition(column);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "393092b564edb3c4408377e24b2bf488", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 9, "signatureBeforeChange": " void scrollForCollapse(TreeItem collapsedItem)", "signatureAfterChange": " void doArrowDown (int stateMask)", "diff": ["+}", "+void doArrowDown (int stateMask) {", "+\tif ((stateMask & SWT.SHIFT) == 0 && (stateMask & SWT.CTRL) == 0) {", "+\t\tint newFocusIndex = focusItem.availableIndex + 1;", "+\t\tif (newFocusIndex == availableItems.length) return; \t/* at bottom */", "+\t\tselectItem(availableItems[newFocusIndex], false);", "+\t\tsetFocusItem(availableItems[newFocusIndex], true);", "+\t\tredrawItem(newFocusIndex);", "+\t\tshowItem(availableItems[newFocusIndex]);", "+\t\tEvent newEvent = new Event();", "+\t\tnewEvent.item = this;", "+\t\tsendEvent(SWT.Selection, newEvent);", "+\tif ((style & SWT.SINGLE) != 0) {", "+\t\tif ((stateMask & SWT.CTRL) != 0) {", "+\t\t\tint visibleItemCount = (getClientArea().height - getHeaderHeight()) / itemHeight;", "+\t\t\tif (availableItems.length <= topIndex + visibleItemCount) return;\t/* at bottom */", "+\t\t\ttopIndex++;", "+\t\t\tgetVerticalBar().setSelection(topIndex);", "+\t\t\tRectangle clientArea = getClientArea();", "+\t\t\tGC gc = new GC(this);", "+\t\t\tgc.copyArea(", "+\t\t\t\t0, 0,", "+\t\t\t\tclientArea.width, clientArea.height,", "+\t\t\t\t0, -itemHeight);", "+\t\t\tgc.dispose();", "+\t\t\treturn;", "+\t\tint newFocusIndex = focusItem.availableIndex + 1;", "+\t\tif (newFocusIndex == availableItems.length) return; \t/* at bottom */", "+\t\tselectItem(availableItems[newFocusIndex], false);", "+\t\tsetFocusItem(availableItems[newFocusIndex], true);", "+\t\tredrawItem(newFocusIndex);", "+\t\tshowItem(availableItems[newFocusIndex]);", "+\t\tEvent newEvent = new Event();", "+\t\tnewEvent.item = this;", "+\t\tsendEvent(SWT.Selection, newEvent);", "+\t\treturn;", "+\t}", "+\t/* SWT.MULTI */", "+\tif ((stateMask & SWT.CTRL) != 0) {", "+\t\tif ((stateMask & SWT.SHIFT) != 0) {", "+\t\t\tint visibleItemCount = (getClientArea().height - getHeaderHeight()) / itemHeight;", "+\t\t\tif (availableItems.length <= topIndex + visibleItemCount) return;\t/* at bottom */", "+\t\t\ttopIndex++;", "+\t\t\tgetVerticalBar().setSelection(topIndex);", "+\t\t\tRectangle clientArea = getClientArea();", "+\t\t\tGC gc = new GC(this);", "+\t\t\tgc.copyArea(", "+\t\t\t\t0, 0,", "+\t\t\t\tclientArea.width, clientArea.height,", "+\t\t\t\t0, -itemHeight);", "+\t\t\tgc.dispose();", "+\t\t\treturn;", "+\t\t}", "+\t\tint focusIndex = focusItem.availableIndex; ", "+\t\tif (focusIndex == availableItems.length - 1) return;\t/* at bottom */", "+\t\tTreeItem newFocusItem = availableItems[focusIndex + 1];", "+\t\tsetFocusItem(newFocusItem, true);", "+\t\tshowItem(newFocusItem);", "+\t\tredrawItem(newFocusItem.availableIndex);", "+\t\treturn;", "+\t}", "+\tint newFocusIndex = focusItem.availableIndex + 1;", "+\tif (newFocusIndex == availableItems.length) return; \t/* at bottom */", "+\tif (anchorItem == null) anchorItem = focusItem;", "+\tselectItem(availableItems[newFocusIndex], true);", "+\tsetFocusItem(availableItems[newFocusIndex], true);", "+\tredrawItem(newFocusIndex);", "+\tshowItem(availableItems[newFocusIndex]);", "+\tEvent newEvent = new Event();", "+\tnewEvent.item = this;", "+\tsendEvent(SWT.Selection, newEvent);", "+}", "- */", "-void scrollForCollapse(TreeItem collapsedItem) {", "-\tRectangle clientArea = getClientArea();\t", "-\tint topIndex = getTopIndex();", "-\tint itemCount = collapsedItem.getVisibleItemCount();", "-\tint scrollYPositions[] = calculateChildrenYPos(collapsedItem);", "-", "-\tif (scrollYPositions[0] == -1 && scrollYPositions[1] == -1) {", "-\t\treturn;", "-\t}", "-\tif (topIndex + getItemCountWhole() == getVisibleItemCount() && itemCount < topIndex) {", "-\t\t// scroll from top if last item is at bottom and will stay at ", "-\t\t// bottom after collapse. Avoids flash caused by too much bit ", "-\t\t// blitting (which force update and thus premature redraw)", "-\t\tint height = scrollYPositions[1] - scrollYPositions[0];", "-\t\tscroll(", "-\t\t\t0, 0,\t\t\t\t\t// destination x, y", "-\t\t\t0, -height,\t\t\t\t// source x, y\t\t", "-\t\t\tclientArea.width, scrollYPositions[0]+height, true);", "-\t\tsetTopIndexNoScroll(topIndex - itemCount, true);", "-\t}\t", "-\telse {", "-\t\tscroll(", "-\t\t\t0, scrollYPositions[0],\t\t\t\t// destination x, y", "-\t\t\t0, scrollYPositions[1],\t\t\t\t// source x, y\t\t", "-\t\t\tclientArea.width, clientArea.height - scrollYPositions[0], true);", "-\t}", "-}"]}], "num": 23875}
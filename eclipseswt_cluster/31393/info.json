{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e03985e17482bcb9cfaded64eae90a24", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d54dd24d6ae7d0c6693ea24845785bf5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 12, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": "  void createHandle ()", "diff": ["-void createHandle (int index) {", "-\tstate |= HANDLE | CANVAS;", "-\t", "-\tint decorations = 0;", "-    /* AW", "+", "+void createHandle () {", "+\tstate |= CANVAS | GRAB | HIDDEN;", "+\tint attributes = OS.kWindowStandardHandlerAttribute; // | OS.kWindowCompositingAttribute;", "-\t\tif ((style & SWT.MIN) != 0) decorations |= NSWindow.MiniaturizableWindowMask;", "-\t\tif ((style & SWT.MAX) != 0) decorations |= OS.MWM_DECOR_MAXIMIZE;", "-\t\tif ((style & SWT.RESIZE) != 0) decorations |= NSWindow.ResizableWindowMask;", "-\t\tif ((style & SWT.BORDER) != 0) decorations |= NSWindow.BorderlessWindowMask;", "-\t\tif ((style & SWT.MENU) != 0) decorations |= OS.MWM_DECOR_MENU;", "-\t\tif ((style & SWT.TITLE) != 0) decorations |= NSWindow.TitledWindowMask;", "-\t}", "-    */", "-    ", "-\tif (MacUtil.HIVIEW)", "-    \tdecorations |= OS.kWindowCompositingAttribute;", "-\t", "-\tif (style == SWT.NONE) {", "-\t} else if ((style & SWT.NO_TRIM) == 0) {", "-\t\tif ((style & SWT.CLOSE) != 0) decorations |= OS.kWindowCloseBoxAttribute;", "-\t\tif ((style & SWT.MIN) != 0) decorations |= OS.kWindowCollapseBoxAttribute;", "-\t\tif ((style & SWT.MAX) != 0) decorations |= OS.kWindowFullZoomAttribute;", "-\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.kWindowResizableAttribute | OS.kWindowLiveResizeAttribute;", "-\t\t//if ((style & SWT.BORDER) == 0) decorations |= OS.kWindowNoShadowAttribute;", "-\t//} else {", "-\t//\tdecorations |= OS.kWindowNoShadowAttribute;", "-\t}", "-\t", "-    /* AW", "-\tint inputMode = OS.MWM_INPUT_MODELESS;", "-\tif ((style & SWT.PRIMARY_MODAL) != 0) inputMode = OS.MWM_INPUT_PRIMARY_APPLICATION_MODAL;", "-\tif ((style & SWT.APPLICATION_MODAL) != 0) inputMode = OS.MWM_INPUT_FULL_APPLICATION_MODAL;", "-\tif ((style & SWT.SYSTEM_MODAL) != 0) inputMode = OS.MWM_INPUT_SYSTEM_MODAL;", "-    */", "-\tint inputMode = OS.kWindowModalityNone;", "-\tif ((style & SWT.PRIMARY_MODAL) != 0) inputMode = OS.kWindowModalityWindowModal;", "-\tif ((style & SWT.APPLICATION_MODAL) != 0) inputMode = OS.kWindowModalityAppModal;", "-\tif ((style & SWT.SYSTEM_MODAL) != 0) inputMode = OS.kWindowModalitySystemModal;\t", "-", "-    /* AW", "-\tint [] argList1 = {", "-\t\tOS.XmNmwmInputMode, inputMode,", "-\t\tOS.XmNmwmDecorations, decorations,", "-\t\tOS.XmNoverrideRedirect, (style & SWT.ON_TOP) != 0 ? 1 : 0,", "-\t\tOS.XmNtitle, ptr,", "-\t};", "-\tbyte [] appClass = display.appClass;", "-    */", "-\t", "-\tMacRect bounds= new MacRect(100, 100, 100, 100);", "-\tint windowClass= 0;", "-\tshort themeBrush= OS.kThemeBrushDialogBackgroundActive;", "-\tif (parent == null && (style & SWT.ON_TOP) == 0) {", "-        /* AW", "-\t\tint xDisplay = display.xDisplay;", "-\t\tint widgetClass = OS.TopLevelShellWidgetClass ();", "-\t\tshellHandle = OS.XtAppCreateShell (display.appName, appClass, widgetClass, xDisplay, argList1, argList1.length / 2);", "-        */", "-\t\tif ((style & SWT.NO_TRIM) != 0)", "-\t\t\twindowClass= OS.kHelpWindowClass;", "-\t\telse {", "-\t\t\twindowClass= OS.kDocumentWindowClass;", "-\t\t\t//themeBrush= OS.kThemeBrushDocumentWindowBackground;", "+\t\tif ((style & SWT.CLOSE) != 0) attributes |= OS.kWindowCloseBoxAttribute;", "+\t\tif ((style & SWT.MIN) != 0) attributes |= OS.kWindowCollapseBoxAttribute;", "+\t\tif ((style & SWT.MAX) != 0) attributes |= OS.kWindowFullZoomAttribute;", "+\t\tif ((style & SWT.RESIZE) != 0) {", "+\t\t\tattributes |= OS.kWindowResizableAttribute | OS.kWindowLiveResizeAttribute;", "+\t}", "+\tint windowClass = OS.kDocumentWindowClass;", "+\tif ((style & (SWT.CLOSE | SWT.TITLE)) == 0) windowClass = OS.kSheetWindowClass;", "+//\tint windowClass = parent == null ? OS.kDocumentWindowClass : OS.kSheetWindowClass;", "+//\tif ((style & SWT.APPLICATION_MODAL) != 0) windowClass = OS.kMovableModalWindowClass;", "+//\tif ((style & SWT.SYSTEM_MODAL) != 0) windowClass = OS.kModalWindowClass;", "+\tRect rect = new Rect ();", "+\tOS.GetAvailableWindowPositioningBounds (OS.GetMainDevice (), rect);", "+\tint width = (rect.right - rect.left) * 5 / 8;", "+\tint height = (rect.bottom - rect.top) * 5 / 8;", "+\tOS.SetRect (rect, (short) 0, (short) 0, (short) width, (short) height);", "+\tint [] outWindow = new int [1];", "+\tattributes &= OS.GetAvailableWindowAttributes (windowClass);", "+\tOS.CreateNewWindow (windowClass, attributes, rect, outWindow);", "+\tif (outWindow [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\tshellHandle = outWindow [0];", "+\tif ((style & SWT.ON_TOP) != 0) {", "+\t\tOS.SetWindowActivationScope (shellHandle, OS.kWindowActivationScopeNone);", "+\t}", "+\tOS.RepositionWindow (shellHandle, 0, OS.kWindowCascadeOnMainScreen);", "+\tOS.SetThemeWindowBackground (shellHandle, (short) OS.kThemeBrushDialogBackgroundActive, false);", "+\tint [] theRoot = new int [1];", "+\tOS.CreateRootControl (shellHandle, theRoot);", "+\tOS.GetRootControl (shellHandle, theRoot);", "+\tif (theRoot [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) != 0) {", "+\t\tcreateScrolledHandle (theRoot [0]);", "-        /* AW", "-\t\tint widgetClass = OS.TransientShellWidgetClass ();", "-//\t\tif ((style & SWT.ON_TOP) != 0) {", "-//\t\t\twidgetClass = OS.OverrideShellWidgetClass ();", "-//\t\t}", "-        */", "-        /* AW", "-\t\tint parentHandle = display.shellHandle;", "-\t\tif (parent != null) parentHandle = parent.handle;", "-\t\tshellHandle = OS.XtCreatePopupShell (appClass, widgetClass, parentHandle, argList1, argList1.length / 2);", "-        */", "-\t\tif (style == SWT.NONE) {", "-\t\t\t//System.out.println(\"Shell.createHandle: SWT.NONE\");", "-\t\t\twindowClass= OS.kHelpWindowClass;", "-\t\t} else if ((style & SWT.NO_TRIM) != 0 && (style & SWT.ON_TOP) != 0) {", "-\t\t\t//System.out.println(\"Shell.createHandle: SWT.NO_TRIM | SWT.ON_TOP\");", "-\t\t\twindowClass= OS.kHelpWindowClass;", "-\t\t} else if ((style & SWT.NO_TRIM) != 0) {", "-\t\t\t//System.out.println(\"Shell.createHandle: SWT.NO_TRIM\");", "-\t\t\twindowClass= OS.kHelpWindowClass;", "-\t\t} else if (inputMode == OS.kWindowModalityAppModal) {", "-\t\t\t//System.out.println(\"Shell.createHandle: kMovableModalWindowClass\");", "-\t\t\twindowClass= OS.kMovableModalWindowClass;", "-\t\t} else if (inputMode == OS.kWindowModalitySystemModal) {", "-\t\t\t//System.out.println(\"Shell.createHandle: kModalWindowClass\");", "-\t\t\twindowClass= OS.kModalWindowClass;", "-\t\t} else if ((style & SWT.ON_TOP) != 0) {", "-\t\t\t//System.out.println(\"Shell.createHandle: SWT.ON_TOP\");", "-\t\t\t//windowClass= OS.kFloatingWindowClass;", "-\t\t\twindowClass= OS.kHelpWindowClass;", "-\t\t\tdecorations= 0;", "-\t\t} else {", "-\t\t\t//System.out.println(\"Shell.createHandle: kDocumentWindowClass\");", "-\t\t\twindowClass= OS.kDocumentWindowClass;", "-\t\t}", "+\t\tcreateHandle (theRoot [0]);", "-\t", "-\t// check whether window class supports a given decoration ", "-\tif ((decorations & OS.kWindowCloseBoxAttribute) != 0 &&", "-\t\t\twindowClass != OS.kDocumentWindowClass &&", "-\t\t\t\twindowClass != OS.kFloatingWindowClass &&", "-\t\t\t\t\twindowClass != OS.kUtilityWindowClass) {", "-\t\tdecorations&= ~OS.kWindowCloseBoxAttribute;", "+\tint [] outGroup = new int [1];", "+\tOS.CreateWindowGroup (OS.kWindowGroupAttrHideOnCollapse, outGroup);", "+\tif (outGroup [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\twindowGroup = outGroup [0];", "+\tif (parent != null) {", "+\t\tShell shell = parent.getShell ();", "+\t\tint parentGroup = shell.windowGroup;", "+\t\tOS.SetWindowGroup (shellHandle, parentGroup);", "+\t\tOS.SetWindowGroupParent (windowGroup, parentGroup);", "+\t} else {", "+\t\tint parentGroup = OS.GetWindowGroupOfClass (windowClass);", "+\t\tOS.SetWindowGroupParent (windowGroup, parentGroup);", "-\tif ((decorations & OS.kWindowFullZoomAttribute) != 0 &&", "-\t\t\twindowClass != OS.kDocumentWindowClass &&", "-\t\t\t\twindowClass != OS.kFloatingWindowClass &&", "-\t\t\t\t\twindowClass != OS.kUtilityWindowClass) {", "-\t\tdecorations&= ~OS.kWindowFullZoomAttribute;", "-\t}", "-\tif ((decorations & OS.kWindowCollapseBoxAttribute) != 0 &&", "-\t\t\twindowClass != OS.kDocumentWindowClass) {", "-\t\tdecorations&= ~OS.kWindowCollapseBoxAttribute;", "-\t}", "-\tif ((decorations & OS.kWindowCollapseBoxAttribute) != 0 &&", "-\t\t\twindowClass != OS.kDocumentWindowClass &&", "-\t\t\t\twindowClass != OS.kMovableModalWindowClass &&", "-\t\t\t\t\twindowClass != OS.kFloatingWindowClass &&", "-\t\t\t\t\t\twindowClass != OS.kUtilityWindowClass &&", "-\t\t\t\t\t\t\twindowClass != OS.kSheetWindowClass) {", "-\t\tdecorations&= ~OS.kWindowCollapseBoxAttribute;", "-\t}", "-", "-\tint[] wHandle= new int[1];", "-\tif (OS.CreateNewWindow(windowClass, decorations | OS.kWindowStandardHandlerAttribute, bounds.getData(), wHandle) == OS.kNoErr)", "-\t\tshellHandle= wHandle[0];", "-\telse {", "-\t\tSystem.out.println(\"Shell.createHandle: can't create window with these attributes; creating default window\");", "-\t\tif (OS.CreateNewWindow(OS.kDocumentWindowClass, OS.kWindowStandardHandlerAttribute, bounds.getData(), wHandle) == OS.kNoErr)", "-\t\t\tshellHandle= wHandle[0];", "-\t}", "-", "-\tif (shellHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t", "-\tif (themeBrush != 0)", "-\t\tOS.SetThemeWindowBackground(shellHandle, themeBrush, false);", "-\t", "-\t// set modality", "-\tif (inputMode != OS.kWindowModalityNone) {", "-\t\tint parentShellHandle= 0;", "-\t\tif (parent != null) parentShellHandle = parent.handle;", "-\t\t//System.out.println(\"Shell.createHandle: OS.SetWindowModality: \" + inputMode);", "-\t\tOS.SetWindowModality(shellHandle, inputMode, parentShellHandle);", "-\t}", "-", "-\t/* Create scrolled handle */", "-\tcreateScrolledHandle (shellHandle);", "-", "-\t/*", "-\t* Feature in Motif.  There is no way to get the single pixel", "-\t* border surrounding a TopLevelShell or a TransientShell.", "-\t* Also, attempts to set a border on either the shell handle", "-\t* or the main window handle fail.  The fix is to set the border", "-\t* on the client area.", "-\t*/", "-    /* AW", "-\tif ((style & (SWT.NO_TRIM | SWT.BORDER | SWT.RESIZE)) == 0) {", "-\t\tint [] argList2 = {OS.XmNborderWidth, 1};", "-\t\tOS.XtSetValues (handle, argList2, argList2.length / 2);", "-\t}", "-    */", "+\tOS.SetWindowGroupOwner (windowGroup, shellHandle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20274384a34edbe7354ffc3bc3c6703c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "commitAfterChange": "bbeab947327689cb203638e742e58f555e6c1b64", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 16, "signatureBeforeChange": " private void drawBorder(GC gc)", "signatureAfterChange": " void drawBody(Event event)", "diff": ["- */", "-private void drawBorder(GC gc) {", "-\t", "-\tRectangle d = super.getClientArea();", "-\t", "-\tif (showBorders) {", "-\t\tif ((getStyle() & SWT.FLAT) != 0) {", "-\t\t\tgc.setForeground(borderColor1);", "-\t\t\tgc.drawRectangle(d.x, d.y, d.x + d.width - 1, d.y + d.height - 1);", "-\t\t\tgc.setForeground(borderColor1);", "-\t\t\tgc.drawRectangle(d.x, d.y, d.x + d.width - 3, d.y + d.height - 3);", "-\t\t", "-\t\t\tgc.setForeground(borderColor2);", "-\t\t\tgc.drawLine(d.x + 1,           d.y + d.height - 2, d.x + d.width - 1, d.y + d.height - 2);", "-\t\t\tgc.drawLine(d.x + d.width - 2, d.y + 1,            d.x + d.width - 2, d.y + d.height - 1);", "-\t\t", "-\t\t\tgc.setForeground(borderColor3);", "-\t\t\tgc.drawLine(d.x + 2,           d.y + d.height - 1, d.x + d.width - 2, d.y + d.height - 1);", "-\t\t\tgc.drawLine(d.x + d.width - 1, d.y + 2,            d.x + d.width - 1, d.y + d.height - 2);", "-\t\t", "-\t\t\t// fill in corners with parent's background", "-\t\t\tgc.setForeground(getParent().getBackground());", "-\t\t\tgc.drawLine(d.x + d.width - 2, d.y,     d.x + d.width - 1, d.y);", "-\t\t\tgc.drawLine(d.x + d.width - 1, d.y + 1, d.x + d.width - 1, d.y + 1);", "-\t\t", "-\t\t\tgc.drawLine(d.x, d.y + d.height - 2, d.x,     d.y + d.height - 2);", "-\t\t\tgc.drawLine(d.x, d.y + d.height - 1, d.x + 1, d.y + d.height - 1);", "-\t\t", "-\t\t\tgc.drawLine(d.x + d.width - 1, d.y + d.height - 1, d.x + d.width - 1, d.y + d.height - 1);", "-\t\t", "-", "-\t// draw a separator line", "-\tif (items.length > 0) {\t", "-\t\tint lineY = d.y + borderTop + tabHeight;", "+}", "+void drawBody(Event event) {", "+\tGC gc = event.gc;", "+\tPoint size = getSize();", "+\t", "+\t//draw 1 pixel border around outside", "+\tif (borderLeft > 0) {", "+\t\tgc.setForeground(borderColor);", "+\t\tint x1 = borderLeft - 1;", "+\t\tint x2 = size.x - borderRight;", "+\t\tint y1 = onBottom ? borderTop - 1 : borderTop + tabHeight;", "+\t\tint y2 = onBottom ? size.y - tabHeight - borderBottom - 1 : size.y - borderBottom;", "+\t\tgc.drawLine(x1, y1, x1, y2); // left", "+\t\tgc.drawLine(x2, y1, x2, y2); // right", "-\t\t\tlineY = d.y + d.height - borderBottom - tabHeight - 1;", "+\t\t\tgc.drawLine(x1, y1, x2, y1); // top", "+\t\t} else {", "+\t\t\tgc.drawLine(x1, y2, x2, y2); // bottom", "-\t\tgc.setForeground(borderColor1);", "-\t\tgc.drawLine(d.x + borderLeft, lineY, d.x + d.width - borderRight, lineY);", "+\t", "+\t// fill in client area", "+\tif (!minimized){", "+\t\tint style = getStyle();", "+\t\tint width = size.x  - borderLeft - borderRight;", "+\t\tint height = size.y - borderTop - borderBottom - tabHeight - HIGHLIGHT_HEADER;", "+\t\tint x = xClient - marginWidth;", "+\t\tint y = yClient - marginHeight;", "+\t\tif (borderLeft > 0 && (style & SWT.FLAT) == 0) {", "+\t\t\twidth -= 2*HIGHLIGHT_MARGIN;", "+\t\t\theight -= HIGHLIGHT_MARGIN;", "+\t\t\tif (onBottom) {", "+\t\t\t\tint x1 = 1;", "+\t\t\t\tint x2 = size.x - 1;", "+\t\t\t\tint y1 = size.y - borderBottom - tabHeight - HIGHLIGHT_HEADER;", "+\t\t\t\tgc.setForeground(selectedIndex == -1 ? getBackground() : selectionBackground);", "+\t\t\t\tfor (int i = 0; i < HIGHLIGHT_MARGIN; i++) {", "+\t\t\t\t\tgc.drawPolyline(new int[] {x1+i, y1-1, x1+i, 1+i, x2-1-i, 1+i, x2-1-i, y1});", "+\t\t\t\t}", "+\t\t\t} else {\t", "+\t\t\t\tint x1 = 1;", "+\t\t\t\tint x2 = size.x - 1;", "+\t\t\t\tint y2 = borderTop + tabHeight + HIGHLIGHT_HEADER;", "+\t\t\t\tgc.setForeground(selectedIndex == -1 ? getBackground() : selectionBackground);", "+\t\t\t\tfor (int i = 0; i < HIGHLIGHT_MARGIN; i++) {", "+\t\t\t\t\tgc.drawPolyline(new int[] {x1+i, y2, x1+i, size.y-2-i, x2-1-i, size.y-2-i, x2-1-i, y2-1});", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tgc.setBackground(getBackground());", "+\t\tgc.fillRectangle(x, y, width, height);", "+\t}", "+}", "-\tgc.setForeground(getForeground());"]}], "num": 31393}
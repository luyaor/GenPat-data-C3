{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ff54dcebfecf15348b76f2fccf578063", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9eebc34906d26a4dacd435137464b326", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 245, "signatureBeforeChange": " \tvoid replaceStyleRanges(int start, int length, StyleRange[] ranges)", "signatureAfterChange": " public void replaceStyleRanges(int start, int length, StyleRange[] ranges)", "diff": ["-\t */", "-\tvoid replaceStyleRanges(int start, int length, StyleRange[] ranges) {", "-\t\tclearStyle(new StyleRange(start, length, null, null));", "-\t\t// find insert point", "-\t\tint high = styleCount;", "-\t\tint low = -1;", "-\t\tint index = high;", "-\t\twhile (high - low > 1) {", "-\t\t\tindex = (high + low) / 2;", "-\t\t\tStyleRange style = styles[index];", "-\t\t\tif (start <= style.start) {", "-\t\t\t\thigh = index;\t\t\t", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tlow = index;", "-\t\t\t}", "-\t\t}", "-\t\tinsertStyles(ranges, high);", "-\t}", "+\tif (isListening(LineGetStyle)) return;", "+ \tif (ranges == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+ \tsetStyleRanges(start, length, null, ranges, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab43d3b5c016e08aff1283a14e54516b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 426, "methodNumberAfterChange": 294, "signatureBeforeChange": " public void setStyleRange(StyleRange range)", "signatureAfterChange": " public void setStyleRange(StyleRange range)", "diff": ["-\t", "-\t// this API can not be used if the client is providing the line styles", "-\tif (userLineStyle) {", "-\t\treturn;", "-\t}", "- \t// check the range, make sure it falls within the range of the text ", "-\tif (range != null && range.start + range.length > content.getCharCount()) {", "-\t\tSWT.error(SWT.ERROR_INVALID_RANGE);", "-\t} \t", "-\tdefaultLineStyler.setStyleRange(range);", "+\tif (isListening(LineGetStyle)) return;", "-\t\tint firstLine = content.getLineAtOffset(range.start);", "-\t\tint lastLine = content.getLineAtOffset(range.start + range.length);", "-\t\tlineCache.reset(firstLine, lastLine - firstLine + 1, true);", "-", "-\t\t// if the style is not visible, there is no need to redraw", "-\t\tif (isAreaVisible(firstLine, lastLine)) {", "-\t\t\tint redrawY = firstLine * lineHeight - verticalScrollOffset;", "-\t\t\tint redrawStopY = (lastLine + 1) * lineHeight - verticalScrollOffset;\t\t", "-\t\t\tdraw(0, redrawY, getClientArea().width, redrawStopY - redrawY, true);", "-\t\t}", "+\t\tsetStyleRanges(range.start, 0, null, new StyleRange[]{range}, false);", "-\t\t// clearing all styles", "-\t\tlineCache.reset(0, content.getLineCount(), false);", "-\t\tredraw();", "+\t\tsetStyleRanges(0, 0, null, null, true);", "-\t", "-\t// make sure that the caret is positioned correctly.", "-\t// caret location may change if font style changes.", "-\t// fixes 1G8FODP", "+}"]}], "num": 16903}
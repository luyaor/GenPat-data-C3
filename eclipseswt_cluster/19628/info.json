{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c66ef10691a19149c2794495768c0e0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df7c6631460357f55f76b26f95b2af13", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "a7df3c99eed40e9713fdc9e934753b3768c04ec0", "commitAfterChange": "c4cb08f062df65ab811cc6b99f38217f78d0c94e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " void drawBorder(GC gc)", "signatureAfterChange": " void drawBorder(GC gc)", "diff": ["+\t", "+\t//draw heavy border around outside", "+\t}", "+\t", "+\t// Draw selection border across all tabs", "+\tif (selectedIndex == -1) { // no selected item", "+\t\tint x = border;", "+\t\tint y = onBottom ? size.y - border - tabHeight : border + tabHeight - SELECTION_BORDER + 1;", "+\t\tint width = size.x - 2*border;", "+\t\tint height = SELECTION_BORDER-1;", "+\t\tgc.setBackground(getBackground());", "+\t\tgc.fillRectangle(x, y, width, height);", "+\t\tif (border > 0) {", "+\t\t\tColor c = new Color(getDisplay(), borderRGB);", "+\t\t\tx = border - 1;", "+\t\t\ty = (onBottom) ? border - 1 : border + tabHeight - SELECTION_BORDER;", "+\t\t\twidth += 1;", "+\t\t\theight = size.y - border - tabHeight + 1;", "+\t\t\tgc.setForeground(c);", "+\t\t\tgc.drawRectangle(x, y, width, height);", "+\t\t\tc.dispose();", "+\t\t}", "+\t} else { //selected item", "+\t\tint x = border;", "+\t\tint y = onBottom ? size.y - border - tabHeight : border+tabHeight-SELECTION_BORDER+1;", "+\t\tint width = size.x - 2*border;", "+\t\tint height = SELECTION_BORDER-1;", "+\t\tint[] shape = new int[] {x,y, x+width,y, x+width,y+height, x,y+height};", "+\t\tdrawSelectionBackground(gc, y, shape);", "+\t\tif (border > 0) {", "+\t\t\tCTabItem2 item = items[selectedIndex];", "+\t\t\tint itemX = item.x;", "+\t\t\tint itemY = item.y;", "+\t\t\tint itemW = item.width;", "+\t\t\tint itemH = item.height;", "+\t\t\tint extra = CTabFolder2.CURVE_WIDTH/2;", "+\t\t\tif (onBottom) {", "+\t\t\t\tint[] left = bottomLeftCorner;", "+\t\t\t\tint[] right = curve;", "+\t\t\t\tshape = new int[left.length + right.length + 14];", "+\t\t\t\tint index = 0;", "+\t\t\t\tshape[index++] = border - 1;", "+\t\t\t\tshape[index++] = itemY + SELECTION_BORDER - 1;", "+\t\t\t\t", "+\t\t\t\tshape[index++] = itemX;", "+\t\t\t\tshape[index++] = itemY + SELECTION_BORDER - 1;", "+\t\t\t\t", "+\t\t\t\tfor (int i = 0; i < left.length/2; i++) {", "+\t\t\t\t\tshape[index++]=itemX + left[2*i];", "+\t\t\t\t\tshape[index++]=itemY + itemH + left[2*i+1]-1;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tshape[index++] = itemX + itemW-extra;", "+\t\t\t\tshape[index++] = itemY + itemH - 1;", "+\t\t\t\t", "+\t\t\t\tfor (int i = 0; i < right.length/2; i++) {", "+\t\t\t\t\tshape[index++]=itemX + itemW - extra + right[2*i];", "+\t\t\t\t\tshape[index++]=itemY + right[2*i+1] - 2;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tint temp = 0;", "+\t\t\t\tint rightTabEdge = size.x - border - chevronRect.width - closeRect.width - 1;", "+\t\t\t\tfor (int i = 0; i < shape.length/2; i++) {", "+\t\t\t\t\tif (shape[2*i] > rightTabEdge) {", "+\t\t\t\t\t\tif (temp == 0 && i > 0) {", "+\t\t\t\t\t\t\ttemp = shape[2*i-1];", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\ttemp = itemY + SELECTION_BORDER - 1;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tshape[2*i] = rightTabEdge;", "+\t\t\t\t\t\tshape[2*i+1] = temp;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tshape[index++] = size.x - border;", "+\t\t\t\tshape[index++] = itemY + SELECTION_BORDER - 1;", "+\t\t\t\t", "+\t\t\t\tshape[index++] = size.x - border;", "+\t\t\t\tshape[index++] = border - 1;", "+\t\t\t\t", "+\t\t\t\tshape[index++] = border - 1;", "+\t\t\t\tshape[index++] = border - 1;", "+\t\t\t\t", "+\t\t\t\tshape[index++] = border - 1;", "+\t\t\t\tshape[index++] = itemY + SELECTION_BORDER - 1;", "+\t\t\t\t", "+\t\t\t} else {", "+\t\t\t\tint[] left = topLeftCorner;", "+\t\t\t\tint[] right = curve;", "+\t\t\t\tshape = new int[left.length+right.length+12];", "+\t\t\t\tint index = 0;", "+\t\t\t\tshape[index++] = border - 1;", "+\t\t\t\tshape[index++] = itemY + itemH - SELECTION_BORDER;", "+\t\t\t\t", "+\t\t\t\tshape[index++] = itemX;", "+\t\t\t\tshape[index++] = itemY + itemH - SELECTION_BORDER;", "+\t\t\t\t", "+\t\t\t\tfor (int i = 0; i < left.length/2; i++) {", "+\t\t\t\t\tshape[index++]=itemX + left[2*i];", "+\t\t\t\t\tshape[index++]=itemY + left[2*i+1];", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < right.length/2; i++) {", "+\t\t\t\t\tshape[index++]=itemX + itemW - extra + right[2*i];", "+\t\t\t\t\tshape[index++]=itemY + right[2*i+1];", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tint temp = 0;", "+\t\t\t\tint rightTabEdge = size.x - border - chevronRect.width - closeRect.width - 1;", "+\t\t\t\tfor (int i = 0; i < shape.length/2; i++) {", "+\t\t\t\t\tif (shape[2*i] > rightTabEdge) {", "+\t\t\t\t\t\tif (temp == 0 && i > 0) {", "+\t\t\t\t\t\t\ttemp = shape[2*i-1];", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\ttemp = itemY + itemH - SELECTION_BORDER;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tshape[2*i] = rightTabEdge;", "+\t\t\t\t\t\tshape[2*i+1] = temp;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tshape[index++] = size.x - border;", "+\t\t\t\tshape[index++] = itemY + item.height - SELECTION_BORDER;", "+\t\t\t\t", "+\t\t\t\tshape[index++] = size.x - border;", "+\t\t\t\tshape[index++] = size.y - border;", "+\t\t\t\t", "+\t\t\t\tshape[index++] = border - 1;", "+\t\t\t\tshape[index++] = size.y - border;", "+\t\t\t\t", "+\t\t\t\tshape[index++] = border - 1;", "+\t\t\t\tshape[index++] = itemY + itemH - SELECTION_BORDER;", "+\t\t\t}", "+\t", "+\t\t\tColor c = new Color(getDisplay(), borderRGB);", "+\t\t\tgc.setForeground(c);", "+\t\t\tgc.drawPolyline(shape);", "+\t\t\tc.dispose();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a18887e09678e58014ee5213b964421", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "commitAfterChange": "bbeab947327689cb203638e742e58f555e6c1b64", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 20, "signatureBeforeChange": " private void redrawTabArea(int index)", "signatureAfterChange": " void drawTabArea(Event event)", "diff": ["+}", "+void drawTabArea(Event event) {", "+\tGC gc = event.gc;", "+\tPoint size = getSize();", "+\tint[] shape = null;", "+\tint x = Math.max(0, borderLeft - 1);", "+\tint y = onBottom ? size.y - borderBottom - tabHeight : borderTop;", "+\tint width = size.x - borderLeft - borderRight + 1;", "+\tint height = tabHeight - 1;", "+", "+\t// Fill in the empty spaces to the right and left of the tabs", "+\tif (single) {", "+\t\tint[] shapeLeft = null;", "+\t\tint[] shapeRight = null;", "+\t\tif (onBottom) { // single with tabs on bototm", "+\t\t\t//left side", "+\t\t\tshapeLeft = new int[BOTTOM_LEFT_CORNER.length+6];", "+\t\t\tint index = 0;", "+\t\t\tint width2 = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "+\t\t\tshapeLeft[index++] = x;", "+\t\t\tshapeLeft[index++] = y;", "+\t\t\tfor (int i = 0; i < BOTTOM_LEFT_CORNER.length/2; i++) {", "+\t\t\t\tshapeLeft[index++] = x+BOTTOM_LEFT_CORNER[2*i];", "+\t\t\t\tshapeLeft[index++] = y+height+1+BOTTOM_LEFT_CORNER[2*i+1];", "+\t\t\t}", "+\t\t\tshapeLeft[index++] = x+width2;", "+\t\t\tshapeLeft[index++] = y+height+1;", "+\t\t\tshapeLeft[index++] = x+width2;", "+\t\t\tshapeLeft[index++] = y;", "+\t\t\t//right side", "+\t\t\tint x2 = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "+\t\t\twidth2 = size.x - borderRight - x2;", "+\t\t\tif (borderLeft == 0) width2 += 1;", "+\t\t\tshapeRight = new int[BOTTOM_RIGHT_CORNER.length+6];", "+\t\t\tindex = 0;", "+\t\t\tshapeRight[index++] = x2;", "+\t\t\tshapeRight[index++] = y;", "+\t\t\tshapeRight[index++] = x2;", "+\t\t\tshapeRight[index++] = y+height+1;", "+\t\t\tfor (int i = 0; i < BOTTOM_RIGHT_CORNER.length/2; i++) {", "+\t\t\t\tshapeRight[index++] = x2+width2+BOTTOM_RIGHT_CORNER[2*i];", "+\t\t\t\tshapeRight[index++] = y+height+1+BOTTOM_RIGHT_CORNER[2*i+1];", "+\t\t\t}", "+\t\t\tshapeRight[index++] = x2+width2;", "+\t\t\tshapeRight[index++] = y;", "+\t\t} else { // single with tabs on top", "+\t\t\t//left side", "+\t\t\tshapeLeft = new int[TOP_LEFT_CORNER.length+6];", "+\t\t\tint index = 0;", "+\t\t\tint width2 = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "+\t\t\tshapeLeft[index++] = x;", "+\t\t\tshapeLeft[index++] = y+height+1;", "+\t\t\tfor (int i = 0; i < TOP_LEFT_CORNER.length/2; i++) {", "+\t\t\t\tshapeLeft[index++] = x+TOP_LEFT_CORNER[2*i];", "+\t\t\t\tshapeLeft[index++] = y+TOP_LEFT_CORNER[2*i+1];", "+\t\t\t}", "+\t\t\tshapeLeft[index++] = x+width2;", "+\t\t\tshapeLeft[index++] = y;", "+\t\t\tshapeLeft[index++] = x+width2;", "+\t\t\tshapeLeft[index++] = y+height+1;", "+\t\t\t//right side", "+\t\t\tint x2 = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "+\t\t\twidth2 = size.x - borderRight - x2;", "+\t\t\tif (borderLeft == 0) width2 += 1;", "+\t\t\tshapeRight = new int[TOP_RIGHT_CORNER.length+6];", "+\t\t\tindex = 0;", "+\t\t\tshapeRight[index++] = x2;", "+\t\t\tshapeRight[index++] = y+height+1;", "+\t\t\tshapeRight[index++] = x2;", "+\t\t\tshapeRight[index++] = y;", "+\t\t\tfor (int i = 0; i < TOP_RIGHT_CORNER.length/2; i++) {", "+\t\t\t\tshapeRight[index++] = x2+width2+TOP_RIGHT_CORNER[2*i];", "+\t\t\t\tshapeRight[index++] = y+TOP_RIGHT_CORNER[2*i+1];", "+\t\t\t}", "+\t\t\tshapeRight[index++] = x2+width2;", "+\t\t\tshapeRight[index++] = y+height+1;", "+\t\t}", "+\t\tdrawBackground(gc, shapeLeft, false);", "+\t\tdrawBackground(gc, shapeRight, false);", "+\t} else { // SWT.MULTI", "+\t\t// Fill in the empty space to the right of the last tab", "+\t\tCTabItem lastItem = items[items.length -1];", "+\t\tint edge = lastItem.x+lastItem.width;", "+\t\tif (edge < size.x) {", "+\t\t\tshape = null;", "+\t\t\tif (onBottom) {", "+\t\t\t\tshape = new int[BOTTOM_RIGHT_CORNER.length+6];", "+\t\t\t\tint index = 0;", "+\t\t\t\tshape[index++] = edge;", "+\t\t\t\tshape[index++] = size.y - borderBottom - tabHeight - 1;", "+\t\t\t\tshape[index++] = edge;", "+\t\t\t\tshape[index++] = size.y - borderBottom;", "+\t\t\t\tfor (int i = 0; i < BOTTOM_RIGHT_CORNER.length/2; i++) {", "+\t\t\t\t\tshape[index++] = size.x- borderRight + 1+BOTTOM_RIGHT_CORNER[2*i];", "+\t\t\t\t\tshape[index++] = size.y - borderBottom + BOTTOM_RIGHT_CORNER[2*i+1];", "+\t\t\t\t}", "+\t\t\t\tshape[index++] = size.x - borderRight + 1;", "+\t\t\t\tshape[index++] = size.y - borderBottom - tabHeight - 1;", "+\t\t\t} else {", "+\t\t\t\tshape = new int[TOP_RIGHT_CORNER.length+6];", "+\t\t\t\tint index = 0;", "+\t\t\t\tshape[index++] = edge;", "+\t\t\t\tshape[index++] = borderTop + tabHeight + 1;", "+\t\t\t\tshape[index++] = edge;", "+\t\t\t\tshape[index++] = borderTop;", "+\t\t\t\tfor (int i = 0; i < TOP_RIGHT_CORNER.length/2; i++) {", "+\t\t\t\t\tshape[index++] = size.x - borderRight + 1+TOP_RIGHT_CORNER[2*i];", "+\t\t\t\t\tshape[index++] = borderTop+TOP_RIGHT_CORNER[2*i+1];", "+\t\t\t\t}", "+\t\t\t\tshape[index++] = size.x - borderRight + 1;", "+\t\t\t\tshape[index++] = borderTop + tabHeight + 1;", "+\t\t\t}", "+\t\t\tdrawBackground(gc, shape, false);", "+\t\t}", "+\t}", "+\t", "+\t// Draw the unselected tabs.", "+\tif (!single) {", "+\t\tfor (int i=0; i < items.length; i++) {", "+\t\t\tif (i != selectedIndex && event.getBounds().intersects(items[i].getBounds())) {", "+\t\t\t\titems[i].onPaint(gc, false);", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+\t// Draw selected tab", "+\tif (selectedIndex != -1) {", "+\t\tCTabItem item = items[selectedIndex];", "+\t\titem.onPaint(gc, true);", "+\t} else {", "+\t\t// if no selected tab - draw line across bottom of all tabs", "+\t\tint x2 = borderLeft;", "+\t\tint y2 = onBottom ? size.y - borderBottom - tabHeight - HIGHLIGHT_HEADER : borderTop + tabHeight + 1;", "+\t\tint width2 = size.x - borderLeft - borderRight;", "+\t\tint height2 = HIGHLIGHT_HEADER - 1;", "+\t\tgc.setBackground(getBackground());", "+\t\tgc.fillRectangle(x2, y2, width2, height2);", "+\t\tx2 = borderLeft;", "+\t\ty2 = (onBottom) ? size.y - borderBottom - tabHeight - 1 : borderTop + tabHeight;", "+\t\tgc.setForeground(borderColor);", "+\t\tgc.drawLine(x2, y2, x2 + width2, y2);", "+\t}", "+\t", "+\tdrawChevron(gc);", "+\tdrawMinimize(gc);", "+\tdrawMaximize(gc);", "+\t", "+\t// draw insertion mark", "+//\tif (insertionIndex > -2) {", "+//\t\tgc.setForeground(getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));", "+//\t\tif (insertionIndex == -1) {", "+//\t\t\tRectangle bounds = items[0].getBounds();", "+//\t\t\tgc.drawLine(bounds.x, bounds.y, bounds.x, bounds.y + bounds.height - 1);", "+//\t\t\tgc.drawLine(bounds.x - 2, bounds.y, bounds.x + 2, bounds.y);", "+//\t\t\tgc.drawLine(bounds.x - 1, bounds.y + 1, bounds.x + 1, bounds.y + 1);", "+//\t\t\tgc.drawLine(bounds.x - 1, bounds.y + bounds.height - 2, bounds.x + 1, bounds.y + bounds.height - 2);", "+//\t\t\tgc.drawLine(bounds.x - 2, bounds.y + bounds.height - 1, bounds.x + 2, bounds.y + bounds.height - 1);", "+//", "+//\t\t} else {", "+//\t\t\tRectangle bounds = items[insertionIndex].getBounds();", "+//\t\t\tgc.drawLine(bounds.x + bounds.width, bounds.y, bounds.x + bounds.width, bounds.y + bounds.height - 1);", "+//\t\t\tgc.drawLine(bounds.x + bounds.width - 2, bounds.y, bounds.x + bounds.width + 2, bounds.y);", "+//\t\t\tgc.drawLine(bounds.x + bounds.width - 1, bounds.y + 1, bounds.x + bounds.width + 1, bounds.y + 1);", "+//\t\t\tgc.drawLine(bounds.x + bounds.width - 1, bounds.y + bounds.height - 2, bounds.x + bounds.width + 1, bounds.y + bounds.height - 2);", "+//\t\t\tgc.drawLine(bounds.x + bounds.width - 2, bounds.y + bounds.height - 1, bounds.x + bounds.width + 2, bounds.y + bounds.height - 1);", "+//\t\t}", "+//\t}", "+", "+\t\t", "+\t// draw outside border area", "+\tif (onBottom) {", "+\t\tshape = new int[BOTTOM_LEFT_CORNER.length + BOTTOM_RIGHT_CORNER.length + 4];", "+\t\tint index = 0;", "+\t\tshape[index++] = x;", "+\t\tshape[index++] = y;", "+\t\tfor (int i = 0; i < BOTTOM_LEFT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+BOTTOM_LEFT_CORNER[2*i];", "+\t\t\tshape[index++] = y+height+BOTTOM_LEFT_CORNER[2*i+1];", "+\t\t\tif (borderLeft == 0) shape[index-1] += 1;", "+\t\t}", "+\t\tfor (int i = 0; i < BOTTOM_RIGHT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+width+BOTTOM_RIGHT_CORNER[2*i];", "+\t\t\tshape[index++] = y+height+BOTTOM_RIGHT_CORNER[2*i+1];", "+\t\t\tif (borderLeft == 0) shape[index-1] += 1;", "+\t\t}", "+\t\tshape[index++] = x+width;", "+\t\tshape[index++] = y-1;", "+\t} else {", "+\t\tshape = new int[TOP_LEFT_CORNER.length + TOP_RIGHT_CORNER.length + 4];", "+\t\tint index = 0;", "+\t\tshape[index++] = x;", "+\t\tshape[index++] = y+height;", "+\t\tfor (int i = 0; i < TOP_LEFT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+TOP_LEFT_CORNER[2*i];", "+\t\t\tshape[index++] = y+TOP_LEFT_CORNER[2*i+1];", "+\t\t}", "+\t\tfor (int i = 0; i < TOP_RIGHT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+width+TOP_RIGHT_CORNER[2*i];", "+\t\t\tshape[index++] = y+TOP_RIGHT_CORNER[2*i+1];", "+\t\t}", "+\t\tshape[index++] = x+width;", "+\t\tshape[index++] = y+height+1;", "+\t}", "+\t// fill in space outside border line with parent background", "+\tRegion r = new Region();", "+\tr.add(new Rectangle(x, y, width + 1, height + 1));", "+\tr.subtract(shape);", "+\tgc.setBackground(getParent().getBackground());", "+\tfillRegion(gc, r);", "+\tr.dispose();", "+\t", "+\t// draw border line", "+\tif (borderLeft > 0) {", "+\t\tRGB inside = getBackground().getRGB();", "+\t\tif (bgImage != null || (gradientColors != null && gradientColors.length > 1 && !gradientVertical)) inside = null;", "+\t\tRGB outside = getParent().getBackground().getRGB();", "+\t\tantialias(shape, borderColor.getRGB(), inside, outside, gc);", "+\t\tgc.setForeground(borderColor);", "+\t\tgc.drawPolyline(shape);", "+\t}", "+}", "-private void redrawTabArea(int index) {", "-\tint x = 0, y = 0, width = 0, height = 0;", "-\tif (index == -1) {", "-\t\tRectangle area = super.getClientArea();", "-\t\tif (area.width == 0 || area.height == 0) return;", "-\t\twidth = area.x + area.width - borderLeft - borderRight;", "-\t\theight = tabHeight + 1; // +1 causes top line between content and tabs to be redrawn", "-\t\tx = area.x + borderLeft;", "-\t\ty = area.y + borderTop; ", "-\t\tif (onBottom) {", "-\t\t\ty = Math.max(0, area.y + area.height - borderBottom - height);", "-\t\t}", "-\t} else {", "-\t\tCTabItem item = items[index];", "-\t\tx = item.x;", "-\t\ty = item.y;", "-\t\tRectangle area = super.getClientArea();", "-\t\twidth = area.x + area.width - x;", "-\t\theight = item.height;", "-\t}", "-\tredraw(x, y, width, height, false);", "-}"]}], "num": 19628}
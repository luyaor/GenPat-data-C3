{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57049f3e43007a9ade6181f8185e3d3b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15e02b20d69df9a965cd043dcdda83f0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void fillGradientRectangle(int x, int y, int width, int height, boolean vertical)", "signatureAfterChange": " public void fillGradientRectangle(int x, int y, int width, int height, boolean vertical)", "diff": ["-\tcheckGC(CLIPPING | TRANSFORM);", "+\tNSAutoreleasePool pool = checkGC(CLIPPING | TRANSFORM);", "+\ttry {", "+\t\tRGB backgroundRGB, foregroundRGB;", "+\t\tbackgroundRGB = getBackground().getRGB();", "+\t\tforegroundRGB = getForeground().getRGB();", "-\tRGB backgroundRGB, foregroundRGB;", "-\tbackgroundRGB = getBackground().getRGB();", "-\tforegroundRGB = getForeground().getRGB();", "-", "-\tRGB fromRGB, toRGB;", "-\tfromRGB = foregroundRGB;", "-\ttoRGB   = backgroundRGB;", "-\tboolean swapColors = false;", "-\tif (width < 0) {", "-\t\tx += width; width = -width;", "-\t\tif (! vertical) swapColors = true;", "+\t\tRGB fromRGB, toRGB;", "+\t\tfromRGB = foregroundRGB;", "+\t\ttoRGB   = backgroundRGB;", "+\t\tboolean swapColors = false;", "+\t\tif (width < 0) {", "+\t\t\tx += width; width = -width;", "+\t\t\tif (! vertical) swapColors = true;", "+\t\t}", "+\t\tif (height < 0) {", "+\t\t\ty += height; height = -height;", "+\t\t\tif (vertical) swapColors = true;", "+\t\t}", "+\t\tif (swapColors) {", "+\t\t\tfromRGB = backgroundRGB;", "+\t\t\ttoRGB   = foregroundRGB;", "+\t\t}", "+\t\tif (fromRGB.equals(toRGB)) {", "+\t\t\tfillRectangle(x, y, width, height);", "+\t\t} else {", "+\t\t\tNSColor startingColor = NSColor.colorWithDeviceRed(fromRGB.red / 255f, fromRGB.green / 255f, fromRGB.blue / 255f, data.alpha / 255f);", "+\t\t\tNSColor endingColor = NSColor.colorWithDeviceRed(toRGB.red / 255f, toRGB.green / 255f, toRGB.blue / 255f, data.alpha / 255f);", "+\t\t\tNSGradient gradient = ((NSGradient)new NSGradient().alloc()).initWithStartingColor(startingColor, endingColor);", "+\t\t\tNSRect rect = new NSRect();", "+\t\t\trect.x = x;", "+\t\t\trect.y = y;", "+\t\t\trect.width = width;", "+\t\t\trect.height = height;", "+\t\t\tgradient.drawInRect(rect, vertical ? 90 : 0);", "+\t\t\tgradient.release();", "+\t\t}", "+\t} finally {", "+\t\tuncheckGC(pool);", "-\tif (height < 0) {", "-\t\ty += height; height = -height;", "-\t\tif (vertical) swapColors = true;", "-\t}", "-\tif (swapColors) {", "-\t\tfromRGB = backgroundRGB;", "-\t\ttoRGB   = foregroundRGB;", "-\t}", "-\tif (fromRGB.equals(toRGB)) {", "-\t\tfillRectangle(x, y, width, height);", "-\t} else {", "-\t\tNSColor startingColor = NSColor.colorWithDeviceRed(fromRGB.red / 255f, fromRGB.green / 255f, fromRGB.blue / 255f, data.alpha / 255f);", "-\t\tNSColor endingColor = NSColor.colorWithDeviceRed(toRGB.red / 255f, toRGB.green / 255f, toRGB.blue / 255f, data.alpha / 255f);", "-\t\tNSGradient gradient = ((NSGradient)new NSGradient().alloc()).initWithStartingColor(startingColor, endingColor);", "-\t\tNSRect rect = new NSRect();", "-\t\trect.x = x;", "-\t\trect.y = y;", "-\t\trect.width = width;", "-\t\trect.height = height;", "-\t\tgradient.drawInRect(rect, vertical ? 90 : 0);", "-\t\tgradient.release();", "-\t}", "-\tuncheckGC();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51f8033f26ff87a5567342a1f4962bbc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 40, "signatureBeforeChange": " public void fillRoundRectangle(int x, int y, int width, int height, int arcWidth, int arcHeight)", "signatureAfterChange": " public void fillRoundRectangle(int x, int y, int width, int height, int arcWidth, int arcHeight)", "diff": ["-\tcheckGC(FILL);", "-\tNSBezierPath path = data.path;", "-\tNSRect rect = new NSRect();", "-\trect.x = x;", "-\trect.y = y;", "-\trect.width = width;", "-\trect.height = height;", "-\tpath.appendBezierPathWithRoundedRect(rect, arcWidth, arcHeight);", "-\tPattern pattern = data.backgroundPattern;", "-\tif (pattern != null && pattern.gradient != null) {", "-\t\tfillPattern(path, pattern);", "-\t} else {", "-\t\tpath.fill();", "+\tNSAutoreleasePool pool = checkGC(FILL);", "+\ttry {", "+\t\tNSBezierPath path = data.path;", "+\t\tNSRect rect = new NSRect();", "+\t\trect.x = x;", "+\t\trect.y = y;", "+\t\trect.width = width;", "+\t\trect.height = height;", "+\t\tpath.appendBezierPathWithRoundedRect(rect, arcWidth, arcHeight);", "+\t\tPattern pattern = data.backgroundPattern;", "+\t\tif (pattern != null && pattern.gradient != null) {", "+\t\t\tfillPattern(path, pattern);", "+\t\t} else {", "+\t\t\tpath.fill();", "+\t\t}", "+\t\tpath.removeAllPoints();", "+\t} finally {", "+\t\tuncheckGC(pool);", "-\tpath.removeAllPoints();", "-\tuncheckGC();"]}], "num": 43977}
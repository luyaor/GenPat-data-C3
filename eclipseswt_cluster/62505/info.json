{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "991c40b9688231121aaed028326ae5d8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21a29d4174dc2ced695de930145ddd3b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/gtk/org/eclipse/swt/browser/WebKit.java", "commitBeforeChange": "647136ddf4768614d99658a624528bafb2469eb5", "commitAfterChange": "b42f3deae13793369b19cd7f6ae257616fcd4739", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "  int callJava (int ctx, int func, int thisObject, int argumentCount, int arguments, int exception)", "signatureAfterChange": "  int callJava (int ctx, int func, int thisObject, int argumentCount, int arguments, int exception)", "diff": ["-\tif (argumentCount == 2) {", "+\tif (argumentCount == 3) {", "-\t\t\tif (index > 0) {", "-\t\t\t\tObject key = new Integer (index);", "+\t\t\tObject key = new Integer (index);", "+\t\t\tC.memmove (result, arguments + C.PTR_SIZEOF, C.PTR_SIZEOF);", "+\t\t\ttype = WebKitGTK.JSValueGetType (ctx, result[0]);", "+\t\t\tif (type == WebKitGTK.kJSTypeNumber) {", "+\t\t\t\tint token = ((Double)convertToJava (ctx, result[0])).intValue ();", "-\t\t\t\tif (function != null) {", "+\t\t\t\tif (function != null && token == function.token) {", "-\t\t\t\t\t\tC.memmove (result, arguments + C.PTR_SIZEOF, C.PTR_SIZEOF);", "+\t\t\t\t\t\tC.memmove (result, arguments + 2 * C.PTR_SIZEOF, C.PTR_SIZEOF);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fe027936c477b43b7863795c6de5dad", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/win32/org/eclipse/swt/browser/WebKit.java", "commitBeforeChange": "647136ddf4768614d99658a624528bafb2469eb5", "commitAfterChange": "b42f3deae13793369b19cd7f6ae257616fcd4739", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  int callJava (int ctx, int func, int thisObject, int argumentCount, int arguments, int exception)", "signatureAfterChange": "  int callJava (int ctx, int func, int thisObject, int argumentCount, int arguments, int exception)", "diff": ["-\tif (argumentCount == 2) {", "+\tif (argumentCount == 3) {", "-\t\t\t\tBrowserFunction function = (BrowserFunction)functions.get (key);", "-\t\t\t\tif (function != null) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tC.memmove (result, arguments + C.PTR_SIZEOF, C.PTR_SIZEOF);", "-\t\t\t\t\t\tObject temp = convertToJava (ctx, result[0]);", "-\t\t\t\t\t\tif (temp instanceof Object[]) {", "-\t\t\t\t\t\t\tObject[] args = (Object[])temp;", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\treturnValue = function.function (args);", "-\t\t\t\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\t\t\t\t/* exception during function invocation */", "-\t\t\t\t\t\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());", "+\t\t\t\tC.memmove (result, arguments + C.PTR_SIZEOF, C.PTR_SIZEOF);", "+\t\t\t\ttype = WebKit_win32.JSValueGetType (ctx, result[0]);", "+\t\t\t\tif (type == WebKit_win32.kJSTypeNumber) {", "+\t\t\t\t\tlong token = ((Double)convertToJava (ctx, result[0])).longValue ();", "+\t\t\t\t\tBrowserFunction function = (BrowserFunction)functions.get (key);", "+\t\t\t\t\tif (function != null && token == function.token) {", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tC.memmove (result, arguments + 2 * C.PTR_SIZEOF, C.PTR_SIZEOF);", "+\t\t\t\t\t\t\tObject temp = convertToJava (ctx, result[0]);", "+\t\t\t\t\t\t\tif (temp instanceof Object[]) {", "+\t\t\t\t\t\t\t\tObject[] args = (Object[])temp;", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\treturnValue = function.function (args);", "+\t\t\t\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\t\t\t\t/* exception during function invocation */", "+\t\t\t\t\t\t\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} catch (IllegalArgumentException e) {", "+\t\t\t\t\t\t\t/* invalid argument value type */", "+\t\t\t\t\t\t\tif (function.isEvaluate) {", "+\t\t\t\t\t\t\t\t/* notify the function so that a java exception can be thrown */", "+\t\t\t\t\t\t\t\tfunction.function (new String[] {WebBrowser.CreateErrorString (new SWTException (SWT.ERROR_INVALID_RETURN_VALUE).getLocalizedMessage ())});", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());", "-\t\t\t\t\t} catch (IllegalArgumentException e) {", "-\t\t\t\t\t\t/* invalid argument value type */", "-\t\t\t\t\t\tif (function.isEvaluate) {", "-\t\t\t\t\t\t\t/* notify the function so that a java exception can be thrown */", "-\t\t\t\t\t\t\tfunction.function (new String[] {WebBrowser.CreateErrorString (new SWTException (SWT.ERROR_INVALID_RETURN_VALUE).getLocalizedMessage ())});", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());"]}], "num": 62505}
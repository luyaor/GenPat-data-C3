{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c152bd35a57d699de194096501f2c165", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4adade971f623668dbbb5f1b59d0ba30", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/win32/org/eclipse/swt/program/Program.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public boolean execute (String fileName)", "signatureAfterChange": "\r public boolean execute (String fileName)", "diff": ["+\tboolean quote = true;\r", "+\tString prefix = command, suffix = \"\";\r", "-\tif (index == -1) return false;\r", "-\tString prefix = command.substring (0, index);\r", "-\tString suffix = command.substring (index + 2, command.length ());\r", "+\tif (index != -1) {\r", "+\t\tint count=0;\r", "+\t\tint i=index + 2, length = command.length ();\r", "+\t\twhile (i < length) {\r", "+\t\t\tif (command.charAt (i) == '\"') count++;\r", "+\t\t\ti++;\r", "+\t\t}\r", "+\t\tquote = count % 2 == 0;\r", "+\t\tprefix = command.substring (0, index);\r", "+\t\tsuffix = command.substring (index + 2, length);\r", "+\t}\r", "+\tif (quote) fileName = \" \\\"\" + fileName + \"\\\"\";\r", "-\t\tRuntime.getRuntime ().exec (prefix + '\"' + fileName + '\"' + suffix);\r", "+\t\tRuntime.getRuntime ().exec (prefix + fileName + suffix);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fb65b1f5e4acb34c80e82cc8116aeb1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/photon/org/eclipse/swt/program/Program.java", "commitBeforeChange": "8d68e19f4bda6e001e1363ed67c9cd15d0532283", "commitAfterChange": "1a364da4bc56e39627bed4944a7f24a0f474b234", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public boolean execute (String fileName)", "signatureAfterChange": "\r public boolean execute (String fileName)", "diff": ["-\tint index = command.indexOf (\"%f\");\r", "-\tif (index == -1) return false;\r", "-\tString prefix = command.substring (0, index);\r", "-\tString suffix = command.substring (index + 2, command.length ());\r", "+\tint index = -1;\r", "+\tString prefix = command, suffix = \"\", location = \"\";\r", "+\tString[] locations = {\"file://$PWD/@\", \"$PWD/@\", \"@\"};\r", "+\tfor (int i = 0; i < locations.length; i++) {", "+\t\tlocation = locations[i];", "+\t\tindex = command.indexOf (location);\r", "+\t\tif (index != -1) break;", "+\t}\r", "+\tif (index != -1) {\r", "+\t\tint start = 0;\r", "+\t\tprefix = command.substring (start, index);\r", "+\t\tstart = index + location.length() + 1;\r", "+\t\tif (start < command.length ()) {\r", "+\t\t\tsuffix = command.substring (start, command.length ());\r", "+\t\t}\r", "+\t}\r", "-\t\tCompatibility.exec(prefix + '\"' + fileName + '\"' + suffix);\r", "+\t\tCompatibility.exec(prefix + \" \"  + fileName + \" \" +  suffix);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "078a28254b1ec40a91263fa36b3a494f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/wpf/org/eclipse/swt/program/Program.java", "commitBeforeChange": "25e0a88282a8f52572829023c99494b77782afb9", "commitAfterChange": "4492e7490e450a65a8ceed26e7c2cb00d8b99b49", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public boolean execute (String fileName)", "signatureAfterChange": " public boolean execute (String fileName)", "diff": ["-\tboolean quote = true;", "+\tint index = 0;", "+\tboolean append = true;", "-\tint index = command.indexOf (\"%1\"); //$NON-NLS-1$", "-\tif (index != -1) {", "-\t\tint count=0;", "-\t\tint i=index + 2, length = command.length ();", "-\t\twhile (i < length) {", "-\t\t\tif (command.charAt (i) == '\"') count++;", "-\t\t\ti++;", "+\twhile (index < ARGUMENTS.length) {", "+\t\tint i = command.indexOf (ARGUMENTS [index]);", "+\t\tif (i != -1) {", "+\t\t\tappend = false;", "+\t\t\tprefix = command.substring (0, i);", "+\t\t\tsuffix = command.substring (i + ARGUMENTS [index].length (), command.length ());", "+\t\t\tbreak;", "-\t\tquote = count % 2 == 0;", "-\t\tprefix = command.substring (0, index);", "-\t\tsuffix = command.substring (index + 2, length);", "+\t\tindex++;", "-\tif (quote) fileName = \" \\\"\" + fileName + \"\\\"\"; //$NON-NLS-1$ //$NON-NLS-2$", "+\tif (append) fileName = \" \\\"\" + fileName + \"\\\"\";", "-\t\tCompatibility.exec(prefix + fileName + suffix);", "+\t\tString commandLine = prefix + fileName + suffix;", "+\t\tCompatibility.exec (commandLine);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8babafe87a8356bcf3f72abfc862004", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/win32/org/eclipse/swt/program/Program.java", "commitBeforeChange": "99e437fa580702168e537f4a5d7239ece222d7cb", "commitAfterChange": "9a60b6b1565fd42d06cf1fac650c2f6dd44612e0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public boolean execute (String fileName)", "signatureAfterChange": " public boolean execute (String fileName)", "diff": ["-\tboolean quote = true;", "+\tint index = 0;", "-\tint index = command.indexOf (\"%1\"); //$NON-NLS-1$", "-\tif (index != -1) {", "-\t\tint count=0;", "-\t\tint i=index + 2, length = command.length ();", "-\t\twhile (i < length) {", "-\t\t\tif (command.charAt (i) == '\"') count++;", "-\t\t\ti++;", "+\twhile (index < ARGUMENTS.length) {", "+\t\tint i = command.indexOf (ARGUMENTS [index]);", "+\t\tif (i != -1) {", "+\t\t\tprefix = command.substring (0, i);", "+\t\t\tsuffix = command.substring (i + ARGUMENTS [index].length (), command.length ());", "+\t\t\tbreak;", "-\t\tquote = count % 2 == 0;", "-\t\tprefix = command.substring (0, index);", "-\t\tsuffix = command.substring (index + 2, length);", "+\t\tindex++;", "-\tif (quote) fileName = \" \\\"\" + fileName + \"\\\"\"; //$NON-NLS-1$ //$NON-NLS-2$", "-\ttry {", "-\t\tCompatibility.exec(prefix + fileName + suffix);", "-\t} catch (IOException e) {", "-\t\treturn false;", "-\t}", "-\treturn true;", "+\tString commandLine = prefix + fileName + suffix;", "+\tint hHeap = OS.GetProcessHeap ();", "+\t/* Use the character encoding for the default locale */", "+\tTCHAR buffer = new TCHAR (0, commandLine, true);", "+\tint byteCount = buffer.length () * TCHAR.sizeof;", "+\tint lpCommandLine = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, byteCount);", "+\tOS.MoveMemory (lpCommandLine, buffer, byteCount);", "+\tSTARTUPINFO lpStartupInfo = new STARTUPINFO ();", "+\tlpStartupInfo.cb = STARTUPINFO.sizeof;", "+\tPROCESS_INFORMATION lpProcessInformation = new PROCESS_INFORMATION ();", "+\tboolean success = OS.CreateProcess (0, lpCommandLine, 0, 0, false, 0, 0, 0, lpStartupInfo, lpProcessInformation);", "+\tif (lpCommandLine != 0) OS.HeapFree (hHeap, 0, lpCommandLine);", "+\tif (lpProcessInformation.hProcess != 0) OS.CloseHandle (lpProcessInformation.hProcess);", "+\tif (lpProcessInformation.hThread != 0) OS.CloseHandle (lpProcessInformation.hThread);", "+\treturn success;"]}], "num": 43696}
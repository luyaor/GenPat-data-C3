{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "44d22604453b20e69000a8bc0dccba29", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ade2b8d385acda47b65e75d1db4e034", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "9dc2e03e4ad911a1d4b1d42283d3ce88f72f45a2", "commitAfterChange": "c94ecb661d66004261ca56b181138d4a635ecf24", "methodNumberBeforeChange": 163, "methodNumberAfterChange": 163, "signatureBeforeChange": "  Control findControl (boolean checkTrim, NSView[] hitView)", "signatureAfterChange": "  Control findControl (boolean checkTrim, NSView[] hitView)", "diff": ["-\tNSArray windows = application.orderedWindows();", "-\tfor (int i = 0, count = (int)/*64*/windows.count(); i < count && view == null; i++) {", "-\t\tNSWindow window = new NSWindow(windows.objectAtIndex(i));", "-\t\tNSView contentView = window.contentView();", "-\t\tif (contentView != null && OS.NSPointInRect(screenLocation, window.frame())) {", "-\t\t\tNSPoint location = window.convertScreenToBase(screenLocation);", "-\t\t\tview = contentView.hitTest (location);", "-\t\t\tif (view == null && !checkTrim) {", "-\t\t\t\tview = contentView;", "+\t", "+\t// Use NSWindowList instead of [NSApplication orderedWindows] because orderedWindows", "+\t// skips NSPanels. See bug 321614.", "+\tint /*long*/ outCount[] = new int /*long*/ [1];", "+\tOS.NSCountWindows(outCount);", "+\tint /*long*/ windowIDs[] = new int /*long*/ [(int)outCount[0]];", "+\tOS.NSWindowList(outCount[0], windowIDs);", "+", "+\tfor (int i = 0, count = windowIDs.length; i < count && view == null; i++) {", "+\t\tNSWindow window = application.windowWithWindowNumber(windowIDs[i]);", "+\t\t// NSWindowList returns all window numbers for all processes. If the window ", "+\t\t// number passed to windowWithWindowNumber returns nil the window doesn't belong to", "+\t\t// this process.", "+\t\tif (window != null) {", "+\t\t\tNSView contentView = window.contentView();", "+\t\t\tif (contentView != null && OS.NSPointInRect(screenLocation, window.frame())) {", "+\t\t\t\tNSPoint location = window.convertScreenToBase(screenLocation);", "+\t\t\t\tview = contentView.hitTest (location);", "+\t\t\t\tif (view == null && !checkTrim) {", "+\t\t\t\t\tview = contentView;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "-\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "418e361171826882dfa191a9c49475a4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "747510f9a00f1437e5879de92c35f5d1da173a8a", "commitAfterChange": "27d6879775783848962b3d35adec4cb85bd44588", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  boolean dragDetect(int x, int y, boolean filter, boolean[] consume)", "signatureAfterChange": "  boolean dragDetect(int x, int y, boolean filter, boolean[] consume)", "diff": ["-\t\tNSText fieldEditor = view.window().fieldEditor(false, view);", "-\t\tNSRange selectedRange = fieldEditor.selectedRange();", "-\t\t", "-\t\tif (selectedRange.length > 0) {", "-\t\t\tNSPoint mouseLocation = NSEvent.mouseLocation();", "-\t\t\tNSTextView feAsTextView = new NSTextView(fieldEditor);", "-\t\t\tint /*long*/ charPosition = feAsTextView.characterIndexForInsertionAtPoint(mouseLocation);", "-", "-\t\t\tif (charPosition != OS.NSNotFound && charPosition >= selectedRange.location && charPosition < (selectedRange.location + selectedRange.length)) {", "-\t\t\t\tif (super.dragDetect(x, y, filter, consume)) {", "-\t\t\t\t\tif (consume != null) consume[0] = true;", "-\t\t\t\t\treturn true;", "-\t\t\t\t}", "-\t\t\t}\t", "+\t\tNSText fieldEditor = ((NSControl)view).currentEditor();", "+\t\tif (fieldEditor != null) {", "+\t\t\tNSRange selectedRange = fieldEditor.selectedRange();", "+\t\t\tif (selectedRange.length > 0) {", "+\t\t\t\tNSPoint mouseLocation = NSEvent.mouseLocation();", "+\t\t\t\tNSTextView feAsTextView = new NSTextView(fieldEditor);", "+\t\t\t\tint /*long*/ charPosition = feAsTextView.characterIndexForInsertionAtPoint(mouseLocation);", "+\t\t\t\tif (charPosition != OS.NSNotFound && charPosition >= selectedRange.location && charPosition < (selectedRange.location + selectedRange.length)) {", "+\t\t\t\t\tif (super.dragDetect(x, y, filter, consume)) {", "+\t\t\t\t\t\tif (consume != null) consume[0] = true;", "+\t\t\t\t\t\treturn true;", "+\t\t\t\t\t}", "+\t\t\t\t}\t", "+\t\t\t}", "-\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e48184dfc58d76c7c4cdea7ba7342524", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "b12a0685cf8f3a3f3655b377dae11b353df34bc5", "commitAfterChange": "f86cb451dd44bdb3dd3f72edaedea4c9f49ce379", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": "  Control findControl (NSEvent nsEvent, boolean checkGrab, boolean checkTrim, boolean checkWindows)", "signatureAfterChange": "  Control findControl (boolean checkTrim)", "diff": ["-Control findControl (NSEvent nsEvent, boolean checkGrab, boolean checkTrim, boolean checkWindows) {", "-\tif (checkGrab && grabControl != null && !grabControl.isDisposed()) return grabControl;", "-\tNSPoint point = NSEvent.mouseLocation();", "+Control findControl (boolean checkTrim) {", "-\tNSWindow window = nsEvent != null ? nsEvent.window() : null;", "- \tif (window != null) {", "+\tNSPoint screenLocation = NSEvent.mouseLocation();", "+\tNSArray windows = application.orderedWindows();", "+\tfor (int i = 0, count = (int)/*64*/windows.count(); i < count && view == null; i++) {", "+\t\tNSWindow window = new NSWindow(windows.objectAtIndex(i));", "-\t\tif (contentView != null) view = contentView.hitTest (window.convertScreenToBase(point));", "-\t}", "-\tif (view == null && checkWindows) {", "-\t\tNSArray windows = application.orderedWindows();", "-\t\tfor (int i = 0; i < windows.count() && view == null; i++) {", "-\t\t\twindow = new NSWindow(windows.objectAtIndex(i));", "-\t\t\tNSView contentView = window.contentView();", "-\t\t\tif (contentView != null) view = contentView.hitTest (window.convertScreenToBase(point));", "-\t\t}", "+\t\tif (contentView != null && OS.NSPointInRect(screenLocation, window.frame())) {", "+\t\t\tNSPoint location = window.convertScreenToBase(screenLocation);", "+\t\t\tview = contentView.hitTest (location);", "+\t\t\tif (view == null && !checkTrim) {", "+\t\t\t\tview = contentView;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}\t\t\t"]}], "num": 54754}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11fdfe34e7830f56764ef5d2851ccdaa", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "420da9362fbd6dd9e69f8caca6155a95", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "243ce18ee1cc9254b06f08b1daabab26f5482b73", "commitAfterChange": "458bcbee379dfb34f66950599f33a1b4c4859348", "methodNumberBeforeChange": 190, "methodNumberAfterChange": 190, "signatureBeforeChange": " void insertBlockSelectionText(String text, int action)", "signatureAfterChange": " void insertBlockSelectionText(String text, int action)", "diff": ["+\tif (text.length() == 1) {", "+\t\tchar key = text.charAt(0);", "+\t\tif (key == SWT.CR || key == SWT.LF) return;", "+\t}", "-\tint start = 0;", "-\tint end = 0;", "-\tStringBuffer buffer = new StringBuffer(); ", "+\tint[] trailing = new int[1];", "+\tint offset = 0, delta = 0;", "-\t\t//TODO BAD DOESN'T HANDLE BIDI", "-\t\tint lineStart = getOffsetAtPoint(left, 0, lineIndex);", "-\t\tint lineEnd = getOffsetAtPoint(right, 0, lineIndex);", "-\t\tswitch (action) {", "-\t\t\tcase ST.DELETE_PREVIOUS: {", "-\t\t\t\tif (lineStart == lineEnd && lineStart > lineOffset) {", "-\t\t\t\t\tif (getOffsetAtPoint(left, getLinePixel(lineIndex), null, true) != -1) {", "-\t\t\t\t\t\tlineStart = getClusterPrevious(lineStart, lineIndex);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase ST.DELETE_NEXT: {", "-\t\t\t\tif (lineStart == lineEnd && lineEnd < lineOffset + line.length()) {", "-\t\t\t\t\tlineEnd = getClusterNext(lineEnd, lineIndex);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\tint lineEndOffset = lineOffset + line.length();", "+\t\tint linePixel = getLinePixel(lineIndex);", "+\t\tint start = getOffsetAtPoint(left, linePixel, trailing, true);", "+\t\tboolean outOfLine = start == -1;", "+\t\tif (outOfLine) {", "+\t\t\tstart = left < leftMargin ? lineOffset : lineEndOffset;", "+\t\t} else {", "+\t\t\tstart += trailing[0];", "+\t\t}", "+\t\tint end = getOffsetAtPoint(right, linePixel, trailing, true);", "+\t\tif (end == -1) {", "+\t\t\tend = right < leftMargin ? lineOffset : lineEndOffset; ", "+\t\t} else {", "+\t\t\tend += trailing[0];", "+\t\t}", "+\t\tif (start == end && !outOfLine) {", "+\t\t\tswitch (action) {", "+\t\t\t\tcase ST.DELETE_PREVIOUS: ", "+\t\t\t\t\tif (start > lineOffset) start = getClusterPrevious(start, lineIndex);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase ST.DELETE_NEXT: ", "+\t\t\t\t\tif (end < lineEndOffset) end = getClusterNext(end, lineIndex);", "+\t\t\t\t\tbreak;", "-\t\tif (lineIndex == firstLine) start = lineStart;", "-\t\tif (lineIndex == lastLine) end = lineEnd;", "-\t\tif (lineIndex != firstLine) {", "-\t\t\tbuffer.append(line.substring(0, lineStart - lineOffset));", "+\t\tif (outOfLine) {", "+\t\t\tif (line.length() > delta) {", "+\t\t\t\tdelta = line.length();", "+\t\t\t\toffset = lineEndOffset + text.length();", "+\t\t\t}", "+\t\t} else {", "+\t\t\toffset = start + text.length();", "+\t\t\tdelta = content.getCharCount();", "-\t\tbuffer.append(text);", "-\t\tif (lineIndex != lastLine) {", "-\t\t\tbuffer.append(line.substring(lineEnd - lineOffset));", "-\t\t\tbuffer.append(content.getLineDelimiter());", "-\t\t}", "+\t\tEvent event = new Event();", "+\t\tevent.text = text;", "+\t\tevent.start = start;", "+\t\tevent.end = end;", "+\t\tsendKeyEvent(event);", "-\tEvent event = new Event();", "-\tevent.text = buffer.toString();", "-\tevent.start = start;", "-\tevent.end = end;", "-\tsendKeyEvent(event);", "-", "-\tint x = getPointAtOffset(caretOffset).x;", "+\tint x = getPointAtOffset(offset).x;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dea28d3317b09f71b0f7b8d122376f6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "3b81d72682a33b10172bb53703a33aa758018789", "commitAfterChange": "6649e3dc373e7f396e6d4c694b6592b898c56422", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 159, "signatureBeforeChange": " public int[] getBlockSelectionRanges()", "signatureAfterChange": " public int[] getSelectionRanges()", "diff": ["- */", "-public int[] getBlockSelectionRanges() {", "-\tcheckWidget();", "-\tif (blockSelection && blockXLocation != -1) {", "-\t\tint firstLine = getLineIndex(blockYAnchor - getVerticalScrollOffset());", "-\t\tint lastLine = getLineIndex(blockYLocation - getVerticalScrollOffset()); ", "-\t\tif (firstLine > lastLine) {", "-\t\t\tint temp = firstLine;", "-\t\t\tfirstLine = lastLine;", "-\t\t\tlastLine = temp;", "-\t\t}", "-\t\tint left = blockXAnchor;", "-\t\tint right = blockXLocation;", "-\t\tif (left > right) {", "-\t\t\tleft = blockXLocation;", "-\t\t\tright = blockXAnchor;", "-\t\t}", "-\t\tint[] ranges = new int[(lastLine - firstLine + 1) * 2];", "-\t\tint index = 0;", "-\t\tfor (int lineIndex = firstLine; lineIndex <= lastLine; lineIndex++) {", "-\t\t\tint start = getOffsetAtPoint(left, 0, lineIndex);", "-\t\t\tranges[index++] = start;", "-\t\t\tranges[index++] = getOffsetAtPoint(right, 0, lineIndex) - start;", "-\t\t}", "-\t\treturn ranges;", "-\t}", "-\treturn new int[] {selection.x, selection.y - selection.x};", "-}", "+ */", "+public int[] getSelectionRanges() {", "+\tcheckWidget();", "+\tif (blockSelection && blockXLocation != -1) {", "+\t\tint firstLine = getLineIndex(blockYAnchor - getVerticalScrollOffset());", "+\t\tint lastLine = getLineIndex(blockYLocation - getVerticalScrollOffset()); ", "+\t\tif (firstLine > lastLine) {", "+\t\t\tint temp = firstLine;", "+\t\t\tfirstLine = lastLine;", "+\t\t\tlastLine = temp;", "+\t\t}", "+\t\tint left = blockXAnchor;", "+\t\tint right = blockXLocation;", "+\t\tif (left > right) {", "+\t\t\tleft = blockXLocation;", "+\t\t\tright = blockXAnchor;", "+\t\t}", "+\t\tint[] ranges = new int[(lastLine - firstLine + 1) * 2];", "+\t\tint index = 0;", "+\t\tfor (int lineIndex = firstLine; lineIndex <= lastLine; lineIndex++) {", "+\t\t\tint start = getOffsetAtPoint(left, 0, lineIndex);", "+\t\t\tranges[index++] = start;", "+\t\t\tranges[index++] = getOffsetAtPoint(right, 0, lineIndex) - start;", "+\t\t}", "+\t\treturn ranges;", "+\t}", "+\treturn new int[] {selection.x, selection.y - selection.x};", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f40a221c8268bac4b792dbc633c33e7d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "e2c0bcd6c7ed2c77344cb18b9cc25575efb0575e", "commitAfterChange": "5754542874a79d5f7ae1849fd860183787c05369", "methodNumberBeforeChange": 191, "methodNumberAfterChange": 191, "signatureBeforeChange": " void insertBlockSelectionText(String text, int action)", "signatureAfterChange": " void insertBlockSelectionText(String text)", "diff": ["-}", "-void insertBlockSelectionText(String text, int action) {", "-\tif (text.length() == 1) {", "-\t\tchar key = text.charAt(0);", "-\t\tif (key == SWT.CR || key == SWT.LF) return;", "+}", "+void insertBlockSelectionText(String text) {", "+\tint lineCount = 1;", "+\tfor (int i = 0; i < text.length(); i++) {", "+\t\tchar ch = text.charAt(i);", "+\t\tif (ch == '\\n' || ch == '\\r') {", "+\t\t\tlineCount++;", "+\t\t\tif (ch == '\\r' && i + 1 < text.length() && text.charAt(i + 1) == '\\n') {", "+\t\t\t\ti++;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tString[] lines = new String[lineCount];", "+\tint start = 0;", "+\tlineCount = 0;", "+\tfor (int i = 0; i < text.length(); i++) {", "+\t\tchar ch = text.charAt(i);", "+\t\tif (ch == '\\n' || ch == '\\r') {", "+\t\t\tlines[lineCount++] = text.substring(start, i);", "+\t\t\tif (ch == '\\r' && i + 1 < text.length() && text.charAt(i + 1) == '\\n') {", "+\t\t\t\ti++;", "+\t\t\t}", "+\t\t\tstart = i + 1;", "+\t\t}", "+\t}", "+\tlines[lineCount++] = text.substring(start);", "+\tint firstLine, lastLine, left, right;", "+\tif (blockXLocation != -1) {", "+\t\tfirstLine = getLineIndex(blockYAnchor - getVerticalScrollOffset());", "+\t\tlastLine = getLineIndex(blockYLocation - getVerticalScrollOffset()); ", "+\t\tif (firstLine > lastLine) {", "+\t\t\tint temp = firstLine;", "+\t\t\tfirstLine = lastLine;", "+\t\t\tlastLine = temp;", "+\t\t}", "+\t\tleft = blockXAnchor;", "+\t\tright = blockXLocation;", "+\t\tif (left > right) {", "+\t\t\tleft = blockXLocation;", "+\t\t\tright = blockXAnchor;", "+\t\t}", "+\t} else {", "+\t\tfirstLine = lastLine = getCaretLine();", "+\t\tleft = right = getPointAtOffset(caretOffset).x;", "+\t}", "+\tint index = 0, end, lineIndex = firstLine;", "+\twhile (lineIndex <= lastLine) {", "+\t\tstart = getOffsetAtPoint(left, 0, lineIndex);", "+\t\tend = getOffsetAtPoint(right, 0, lineIndex);", "+\t\tEvent event = new Event();", "+\t\tevent.text = index < lineCount ? lines[index++] : \"\";", "+\t\tevent.start = start;", "+\t\tevent.end = end;", "+\t\tsendKeyEvent(event);", "+\t\tlineIndex++;", "+\t}", "+\twhile (index < lineCount) {", "+\t\tint maxLines = content.getLineCount();", "+\t\tString line;", "+\t\tif (lineIndex < maxLines) {", "+\t\t\tstart = end = getOffsetAtPoint(left, 0, lineIndex);", "+\t\t\tline = lines[index]; ", "+\t\t} else {", "+\t\t\tstart = end = content.getCharCount();", "+\t\t\tline = content.getLineDelimiter() + lines[index];", "+\t\t}", "+\t\tEvent event = new Event();", "+\t\tevent.text = line;", "+\t\tevent.start = start;", "+\t\tevent.end = end;", "+\t\tsendKeyEvent(event);", "+\t\tlineIndex++;", "+\t\tindex++;", "+\t}", "+}", "-\t\t\t\toffset = lineEndOffset + text.length();", "-\t\t\toffset = start + text.length();"]}], "num": 53625}
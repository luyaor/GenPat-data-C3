{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f9cb67f35802e6faaf04eac2a1a0678", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63c9b24c014befbb58c8cf7ccacbfcb1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 276, "signatureBeforeChange": " \t \tint get_accValue(int varChild, int pszValue)", "signatureAfterChange": " \tint get_accValue(int varChild, int pszValue)", "diff": ["+\t/* get_accValue([in] varChild, [out] pszValue) */", "-\t\tif (iaccessible == null) return COM.CO_E_OBJNOTCONNECTED;", "-\t\t", "-\t\t/* Get the default value string from the OS. */", "+\t\tint code = COM.DISP_E_MEMBERNOTFOUND;", "-\t\tint code = iaccessible.get_accValue(varChild, pszValue);", "-\t\tif (code == COM.E_INVALIDARG) code = COM.DISP_E_MEMBERNOTFOUND; // proxy doesn't know about app childID", "-\t\tif (accessibleControlListeners.size() == 0) return code;", "-\t\tif (code == COM.S_OK) {", "-\t\t\tint /*long*/[] pValue = new int /*long*/[1];", "-\t\t\tCOM.MoveMemory(pValue, pszValue, OS.PTR_SIZEOF);", "-\t\t\tint size = COM.SysStringByteLen(pValue[0]);", "-\t\t\tif (size > 0) {", "-\t\t\t\tchar[] buffer = new char[(size + 1) /2];", "-\t\t\t\tCOM.MoveMemory(buffer, pValue[0], size);", "-\t\t\t\tosValue = new String(buffer);", "+\t\tif (iaccessible != null) {", "+\t\t\t/* Get the default value string from the OS. */", "+\t\t\tcode = iaccessible.get_accValue(varChild, pszValue);", "+\t\t\tif (code == COM.E_INVALIDARG) code = COM.DISP_E_MEMBERNOTFOUND; // proxy doesn't know about app childID", "+\t\t\tif (accessibleControlListeners.size() == 0) return code;", "+\t\t\tif (code == COM.S_OK) {", "+\t\t\t\tint /*long*/[] pValue = new int /*long*/[1];", "+\t\t\t\tCOM.MoveMemory(pValue, pszValue, OS.PTR_SIZEOF);", "+\t\t\t\tint size = COM.SysStringByteLen(pValue[0]);", "+\t\t\t\tif (size > 0) {", "+\t\t\t\t\tchar[] buffer = new char[(size + 1) /2];", "+\t\t\t\t\tCOM.MoveMemory(buffer, pValue[0], size);", "+\t\t\t\t\tosValue = new String(buffer);", "+\t\t\t\t}", "-\t\tchar[] data = (event.result + \"\\0\").toCharArray();", "-\t\tint /*long*/ ptr = COM.SysAllocString(data);", "-\t\tCOM.MoveMemory(pszValue, new int /*long*/[] { ptr }, OS.PTR_SIZEOF);", "+\t\t// empty string is a valid value, so do not test for it", "+\t\tsetString(pszValue, event.result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d75c721ea5583d04cf7dece57657624e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 271, "signatureBeforeChange": " \t \tint get_accName(int varChild, int pszName)", "signatureAfterChange": " \tint get_accName(int varChild, int pszName)", "diff": ["+\t/* get_accName([in] varChild, [out] pszName) */", "-\t\tif (iaccessible == null) return COM.CO_E_OBJNOTCONNECTED;", "-", "-\t\t/* Get the default name from the OS. */", "+\t\tint code = COM.S_FALSE;", "-\t\tint code = iaccessible.get_accName(varChild, pszName);", "-\t\tif (code == COM.E_INVALIDARG) code = COM.S_FALSE; // proxy doesn't know about app childID", "-\t\tif (accessibleListeners.size() == 0) return code;", "-\t\tif (code == COM.S_OK) {", "-\t\t\tint /*long*/[] pName = new int /*long*/[1];", "-\t\t\tCOM.MoveMemory(pName, pszName, OS.PTR_SIZEOF);", "-\t\t\tint size = COM.SysStringByteLen(pName[0]);", "-\t\t\tif (size > 0) {", "-\t\t\t\tchar[] buffer = new char[(size + 1) /2];", "-\t\t\t\tCOM.MoveMemory(buffer, pName[0], size);", "-\t\t\t\tosName = new String(buffer);", "+\t\tif (iaccessible != null) {", "+\t\t\t/* Get the default name from the OS. */", "+\t\t\tcode = iaccessible.get_accName(varChild, pszName);", "+\t\t\tif (code == COM.E_INVALIDARG) code = COM.S_FALSE; // proxy doesn't know about app childID", "+\t\t\tif (accessibleListeners.size() == 0) return code;", "+\t\t\tif (code == COM.S_OK) {", "+\t\t\t\tint /*long*/[] pName = new int /*long*/[1];", "+\t\t\t\tCOM.MoveMemory(pName, pszName, OS.PTR_SIZEOF);", "+\t\t\t\tint size = COM.SysStringByteLen(pName[0]);", "+\t\t\t\tif (size > 0) {", "+\t\t\t\t\tchar[] buffer = new char[(size + 1) /2];", "+\t\t\t\t\tCOM.MoveMemory(buffer, pName[0], size);", "+\t\t\t\t\tosName = new String(buffer);", "+\t\t\t\t}", "-\t\tchar[] data = (event.result + \"\\0\").toCharArray();", "-\t\tint /*long*/ ptr = COM.SysAllocString(data);", "-\t\tCOM.MoveMemory(pszName, new int /*long*/[] { ptr }, OS.PTR_SIZEOF);", "+\t\tsetString(pszName, event.result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf37b5a30a3f3c45a63757568c072e6c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 268, "signatureBeforeChange": " \t \tint get_accHelp(int varChild, int pszHelp)", "signatureAfterChange": " \tint get_accHelp(int varChild, int pszHelp)", "diff": ["+\t/* get_accHelp([in] varChild, [out] pszHelp) */", "-\t\tif (iaccessible == null) return COM.CO_E_OBJNOTCONNECTED;", "-\t\t", "-\t\t/* Get the default help string from the OS. */", "+\t\tint code = COM.DISP_E_MEMBERNOTFOUND;", "-\t\tint code = iaccessible.get_accHelp(varChild, pszHelp);", "-\t\tif (code == COM.E_INVALIDARG) code = COM.S_FALSE; // proxy doesn't know about app childID", "-\t\tif (accessibleListeners.size() == 0) return code;", "-\t\tif (code == COM.S_OK) {", "-\t\t\tint /*long*/[] pHelp = new int /*long*/[1];", "-\t\t\tCOM.MoveMemory(pHelp, pszHelp, OS.PTR_SIZEOF);", "-\t\t\tint size = COM.SysStringByteLen(pHelp[0]);", "-\t\t\tif (size > 0) {", "-\t\t\t\tchar[] buffer = new char[(size + 1) /2];", "-\t\t\t\tCOM.MoveMemory(buffer, pHelp[0], size);", "-\t\t\t\tosHelp = new String(buffer);", "+\t\tif (iaccessible != null) {", "+\t\t\t/* Get the default help string from the OS. */", "+\t\t\tcode = iaccessible.get_accHelp(varChild, pszHelp);", "+\t\t\tif (code == COM.E_INVALIDARG) code = COM.S_FALSE; // proxy doesn't know about app childID", "+\t\t\tif (accessibleListeners.size() == 0) return code;", "+\t\t\tif (code == COM.S_OK) {", "+\t\t\t\tint /*long*/[] pHelp = new int /*long*/[1];", "+\t\t\t\tCOM.MoveMemory(pHelp, pszHelp, OS.PTR_SIZEOF);", "+\t\t\t\tint size = COM.SysStringByteLen(pHelp[0]);", "+\t\t\t\tif (size > 0) {", "+\t\t\t\t\tchar[] buffer = new char[(size + 1) /2];", "+\t\t\t\t\tCOM.MoveMemory(buffer, pHelp[0], size);", "+\t\t\t\t\tosHelp = new String(buffer);", "+\t\t\t\t}", "-\t\tchar[] data = (event.result + \"\\0\").toCharArray();", "-\t\tint /*long*/ ptr = COM.SysAllocString(data);", "-\t\tCOM.MoveMemory(pszHelp, new int /*long*/[] { ptr }, OS.PTR_SIZEOF);", "+\t\tsetString(pszHelp, event.result);"]}], "num": 51309}
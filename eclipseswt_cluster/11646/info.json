{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b277672d877bf6e691d8d32fc82bcbb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d83d6fe195eeb48fefadfa335305d3d9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 62, "signatureBeforeChange": " int processMouseExit (MacMouseEvent mme)", "signatureAfterChange": "  int kEventRawKeyDown (int nextHandler, int theEvent, int userData)", "diff": ["-}", "-int processMouseExit (MacMouseEvent mme) {", "-\tDisplay display = getDisplay ();", "-\tdisplay.removeMouseHoverTimeOut ();", "-\tdisplay.hideToolTip ();", "-    /* AW", "-\tXCrossingEvent xEvent = new XCrossingEvent ();", "-\tOS.memmove (xEvent, callData, XCrossingEvent.sizeof);", "-\tif (xEvent.mode != OS.NotifyNormal) return 0;", "-\tif (xEvent.subwindow != 0) return 0;", "-\t*/", "-\tEvent event = new Event ();", "-\tPoint p= MacUtil.toControl(handle, mme.getWhere());", "-\tevent.x = p.x;", "-\tevent.y = p.y;", "-\tpostEvent (SWT.MouseExit, event);", "-\treturn 0;", "-}", "+", "+int kEventRawKeyDown (int nextHandler, int theEvent, int userData) {", "+\tint [] keyCode = new int [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "+\t//NOT DONE", "+\tif (keyCode [0] == 114) {", "+\t\t//HELP KEY", "+\tif (!sendKeyEvent (SWT.KeyDown, theEvent)) return OS.noErr;", "+\treturn OS.eventNotHandledErr;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b35a54fecb48693cc01a143c42e8e19d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "a665198fe9e899923e0c20961d42655c29cefe1d", "commitAfterChange": "8af34ea3cbfe32d47b68491cbcbb84e2aff0dcc7", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": "  public boolean execute (String script)", "signatureAfterChange": "  public boolean execute (String script)", "diff": ["-\t\t\t\tnsID scriptGlobalObjectNSID_17 = new nsID (\"92569431-6e6e-408a-a88c-45285c1c8573\"); /* nsIScriptGlobalObject */ //$NON-NLS-1$", "-\t\t\t\trc = interfaceRequestor.GetInterface (scriptGlobalObjectNSID_17, result);", "+\t\t\t\trc = interfaceRequestor.GetInterface (XPCOM.NS_ISCRIPTGLOBALOBJECT_17_IID, result);", "-\t\t\t\t\tnsID scriptGlobalObjectNSID_10 = new nsID (\"08f73284-26e3-4fa6-bf89-8326f92a94b3\"); /* nsIScriptGlobalObject */ //$NON-NLS-1$", "-\t\t\t\t\trc = interfaceRequestor.GetInterface (scriptGlobalObjectNSID_10, result);", "+\t\t\t\t\trc = interfaceRequestor.GetInterface (XPCOM.NS_ISCRIPTGLOBALOBJECT_10_IID, result);", "-\t\t\t\t\t\tnsID scriptGlobalObjectNSID_1_9_2 = new nsID (\"e9f3f2c1-2d94-4722-bbd4-2bf6fdf42f48\"); /* nsIScriptGlobalObject */ //$NON-NLS-1$", "-\t\t\t\t\t\trc = interfaceRequestor.GetInterface (scriptGlobalObjectNSID_1_9_2, result);", "+\t\t\t\t\t\trc = interfaceRequestor.GetInterface (XPCOM.NS_ISCRIPTGLOBALOBJECT_1_9_2_IID, result);", "-\t\t\t\t\t\t\tnsID scriptGlobalObjectNSID_1_9 = new nsID (\"6afecd40-0b9a-4cfd-8c42-0f645cd91829\"); /* nsIScriptGlobalObject */ //$NON-NLS-1$", "-\t\t\t\t\t\t\trc = interfaceRequestor.GetInterface (scriptGlobalObjectNSID_1_9, result);", "+\t\t\t\t\t\t\trc = interfaceRequestor.GetInterface (XPCOM.NS_ISCRIPTGLOBALOBJECT_1_9_IID, result);", "-\t\t\t\t\t\t\tnsID scriptContextNSID_17 = new nsID (\"d012cdb3-8f1e-4440-8cbd-327f981d37b4\"); /* nsIScriptContext */ //$NON-NLS-1$\t", "-\t\t\t\t\t\t\trc = supports.QueryInterface (scriptContextNSID_17, result);", "+\t\t\t\t\t\t\trc = supports.QueryInterface (XPCOM.NS_ISCRIPTCONTEXT_17_IID, result);", "-\t\t\t\t\t\t\t\tnsID scriptContextNSID_10 = new nsID (\"2e583bf4-3c1f-432d-8283-8dee7eccc88b\"); /* nsIScriptContext */ //$NON-NLS-1$\t\t\t\t\t", "-\t\t\t\t\t\t\t\trc = supports.QueryInterface (scriptContextNSID_10, result);", "+\t\t\t\t\t\t\t\trc = supports.QueryInterface (XPCOM.NS_ISCRIPTCONTEXT_10_IID, result);", "-\t\t\t\t\t\t\t\t\tnsID scriptContextNSID_1_9_2 = new nsID (\"87482b5e-e019-4df5-9bc2-b2a51b1f2d28\"); /* nsIScriptContext */ //$NON-NLS-1$\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\trc = supports.QueryInterface (scriptContextNSID_1_9_2, result);", "+\t\t\t\t\t\t\t\t\trc = supports.QueryInterface (XPCOM.NS_ISCRIPTCONTEXT_1_9_2_IID, result);", "-\t\t\t\t\t\t\t\t\t\tnsID scriptContextNSID_1_9 = new nsID (\"e7b9871d-3adc-4bf7-850d-7fb9554886bf\"); /* nsIScriptContext */ //$NON-NLS-1$\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\trc = supports.QueryInterface (scriptContextNSID_1_9, result);", "+\t\t\t\t\t\t\t\t\t\trc = supports.QueryInterface (XPCOM.NS_ISCRIPTCONTEXT_1_9_IID, result);", "-\t\t\t\t\t\t\t\tlong /*int*/ nativeContext;", "+\t\t\t\t\t\t\t\tlong /*int*/ jsContext;", "-\t\t\t\t\t\t\t\t\tnativeContext = XPCOM.nsIScriptContext_GetNativeContext (scriptContext);", "+\t\t\t\t\t\t\t\t\tjsContext = XPCOM.nsIScriptContext_GetNativeContext (scriptContext);", "-\t\t\t\t\t\t\t\t\tnativeContext = XPCOM.nsIScriptContext17_GetNativeContext (scriptContext);", "+\t\t\t\t\t\t\t\t\tjsContext = XPCOM.nsIScriptContext17_GetNativeContext (scriptContext);", "-\t\t\t\t\t\t\t\tif (nativeContext != 0) {", "+\t\t\t\t\t\t\t\tif (jsContext != 0) {", "-\t\t\t\t\t\t\t\t\trc = principal.GetJSPrincipals (nativeContext, result);", "+\t\t\t\t\t\t\t\t\trc = principal.GetJSPrincipals (jsContext, result);", "-\t\t\t\t\t\t\t\t\tlong /*int*/ globalJSObject = XPCOM.JS_GetGlobalObject (jsLibPath, nativeContext);", "+\t\t\t\t\t\t\t\t\tlong /*int*/ globalJSObject = XPCOM.JS_GetGlobalObject (jsLibPath, jsContext);", "-\t\t\t\t\t\t\t\t\t\t\trc = stack.Push (nativeContext);", "+\t\t\t\t\t\t\t\t\t\t\trc = stack.Push (jsContext);", "-\t\t\t\t\t\t\t\t\t\t\t\tboolean success = XPCOM.JS_EvaluateUCScriptForPrincipals (jsLibPath, nativeContext, globalJSObject, principals, scriptChars, length, urlbytes, 0, isXULRunner190x ? result : null) != 0;", "+\t\t\t\t\t\t\t\t\t\t\t\tboolean success = XPCOM.JS_EvaluateUCScriptForPrincipals (jsLibPath, jsContext, globalJSObject, principals, scriptChars, length, urlbytes, 0, isXULRunner190x ? result : null) != 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56c969ef168af49b8f463c2e65e59828", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/internal/Converter.java", "commitBeforeChange": "5f80bb3b53d7e26adb3e7ce4f4f973204cc40174", "commitAfterChange": "5fbe5d6518706b4f002ddbbebf7e1f63d1877af8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r public static byte [] wcsToMbcs (String codePage, char [] buffer, boolean terminate)", "signatureAfterChange": "\r \r public static byte [] wcsToMbcs (String codePage, char [] buffer, boolean terminate)", "diff": ["-\t//SLOW AND BOGUS\r", "-\tString cp = codePage == null ? defaultCodePage () : codePage;\r", "-\ttry {\r", "-\t\tif (!terminate) return new String (buffer).getBytes (cp);\r", "-\t\tbyte [] buffer1 = new String (buffer).getBytes (cp);\r", "-\t\tbyte [] buffer2 = new byte [buffer1.length + 1];\r", "-\t\tSystem.arraycopy (buffer1, 0, buffer2, 0, buffer1.length);\r", "-\t\treturn buffer2;\r", "-\t} catch (Exception e) {\r", "-\t\treturn terminate ? NullByteArray : EmptyByteArray;\r", "-\t}\r", "+\tint [] items_read = new int [1], items_written = new int [1];\r", "+\tint ptr = OS.g_utf16_to_utf8 (buffer, buffer.length, items_read, items_written, null);\r", "+\tif (ptr == 0) return terminate ? NullByteArray : EmptyByteArray;\r", "+\tint written = items_written [0];\r", "+\t//TEMPORARY CODE - convertion stops at the first NULL\r", "+\tif (items_read [0] != buffer.length) written++;\r", "+\tbyte [] bytes = new byte [written + (terminate ? 1 : 0)];\r", "+\tOS.memmove (bytes, ptr, written);\r", "+\tOS.g_free (ptr);\r", "+\treturn bytes;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd6e67c639fa07be622171be54ba8a67", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 92, "signatureBeforeChange": " \t \tprivate int handleApplicationCallback(int nextHandler, int eRefHandle, int userData)", "signatureAfterChange": " \t \tprivate int handleApplicationCallback(int nextHandler, int eRefHandle, int userData)", "diff": ["-\t", "+\t\t", "-\t\t\tif (OS.GetEventParameter(eRefHandle, OS.kEventParamAEEventClass, OS.typeType, null, aeclass.length*4, null, aeclass) == OS.noErr) {", "+\t\t\tif (OS.GetEventParameter(eRefHandle, OS.kEventParamAEEventClass, OS.typeType, null, null, aeclass) == OS.kNoErr) {", "-\t\t\t\tif (OS.GetEventParameter(eRefHandle, OS.kEventParamAEEventID, OS.typeType, null, aetype.length*4, null, aetype) == OS.noErr) {", "+\t\t\t\tif (OS.GetEventParameter(eRefHandle, OS.kEventParamAEEventID, OS.typeType, null, null, aetype) == OS.kNoErr) {", "-\t\t\tEventRecord eventRecord= new EventRecord();", "-\t\t\tOS.ConvertEventRefToEventRecord(eRefHandle, eventRecord);", "-\t\t\tOS.AEProcessAppleEvent(eventRecord);", "+\t\t\tOS.AEProcessAppleEvent(new MacEvent(eRefHandle).toOldMacEvent());", "+\t\t", "-\t\t\t\tHICommand command= new HICommand();", "-\t\t\t\tOS.GetEventParameter(eRefHandle, OS.kEventParamDirectObject, OS.typeHICommand, null, HICommand.sizeof, null, command);", "-\t\t\t\tif (command.commandID == OS.kAEQuitApplication) {", "+\t\t\t\tint[] rc= new int[4];", "+\t\t\t\tOS.GetEventHICommand(eRefHandle, rc);", "+\t\t\t\t", "+\t\t\t\tif (rc[1] == OS.kAEQuitApplication) {", "-\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\treturn OS.kNoErr;", "+\t\t\t\t", "-\t\t\t\tWidget w= findWidget (command.menu_menuRef);", "+\t\t\t\tWidget w= findWidget (rc[2]);", "-\t\t\t\t\tmenu.handleMenu(command.menu_menuItemIndex);", "+\t\t\t\t\tmenu.handleMenu(rc[3]);", "-\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\treturn OS.kNoErr;", "+\t\t\t\t", "+\t\t\t\t", "-\t\t\t\t// we do not return noErr here so that the default handler", "+\t\t\t\t// we do not return kNoErr here so that the default handler", "-\t\t\tcase OS.kEventMouseDown:\t// clicks in menu bar", "+\t\t\tcase OS.kEventMouseDown:", "-\t\t\t\t", "+\t", "-\t\t\t\torg.eclipse.swt.internal.carbon.Point where= mEvent.getWhere();", "+\t\t\t\tMacPoint where= mEvent.getWhere();", "-\t\t\t\tshort part= OS.FindWindow(where, w);", "+\t\t\t\tshort part= OS.FindWindow(where.getData(), w);", "+\t\t\t\t\t\t\t\t", "+\t\t\t\tOS.QDGlobalToLocalPoint(OS.GetWindowPort(w[0]), where.getData());", "+\t\t\t\t", "-\t\t\t\t\torg.eclipse.swt.internal.carbon.Point loc= mEvent.getWhere();", "-\t\t\t\t\tOS.QDGlobalToLocalPoint(OS.GetWindowPort(w[0]), loc);", "-\t\t\t\t\tOS.MenuSelect(loc);", "-\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\tOS.MenuSelect(mEvent.getWhere().getData());", "+\t\t\t\t\t//doMenuCommand(OS.MenuSelect(mEvent.getWhere().getData()));", "+\t\t\t\t\treturn OS.kNoErr;", "-\t\t\t\treturn handleMouseCallback(nextHandler, eRefHandle, 0);", "+\t\t\t\treturn handleMouseEvent(nextHandler, eRefHandle, eventKind, 0);", "-\t\t\treturn OS.noErr;", "+\t\t\treturn OS.kNoErr;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e8cbd0013c8ca65efc910fb81cb953e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ProgressBar.java", "commitBeforeChange": "a76f98786ded6e163fcbf233d1c2e903353b3e97", "commitAfterChange": "65c1946d30d7cafb1a58cba97204d0262b20b59e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 19, "signatureBeforeChange": " void disableButtonPress ()", "signatureAfterChange": " int XButtonPress (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-void disableButtonPress () {", "-\tint xWindow = OS.XtWindow (handle);", "-\tif (xWindow == 0) return;", "-\tint xDisplay = OS.XtDisplay (handle);", "-\tif (xDisplay == 0) return;", "-\tint event_mask = OS.XtBuildEventMask (handle);", "-\tXSetWindowAttributes attributes = new XSetWindowAttributes ();", "-\tattributes.event_mask = event_mask & ~OS.ButtonPressMask;", "-\tOS.XChangeWindowAttributes (xDisplay, xWindow, OS.CWEventMask, attributes);", "-}", "+int XButtonPress (int w, int client_data, int call_data, int continue_to_dispatch) {", "+\tint result = super.XButtonPress (w, client_data, call_data, continue_to_dispatch);", "+\tint [] argList = {OS.XmNsensitive, 0};", "+\tOS.XtGetValues (handle, argList, argList.length / 2);", "+\tif (argList [1] != 0) {", "+\t\tOS.memmove (continue_to_dispatch, new int [1], 4);", "+\t\treturn 1;", "+\t}", "+\treturn result;", "+}"]}], "num": 11646}
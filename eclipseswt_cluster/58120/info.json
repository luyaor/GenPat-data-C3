{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d6b94293941f1abe04c07ef75f28d7b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d861ed1ff93489d3fd27b77a44df427c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "4837f43ad626833e44d944849690be12f17d2c70", "commitAfterChange": "d33484b9dbd12f2a7ff228ba91793eb6670c1b90", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 35, "signatureBeforeChange": "\r void destroyAccelerators ()", "signatureAfterChange": "\r boolean translateAccelerator (int key, int keysym, XKeyEvent xEvent)", "diff": ["-}\r", "-void destroyAccelerators () {\r", "-\tif (!accelerators) return;\r", "-\tif (menuBar == null) return;\r", "-\tmenuBar.removeAccelerators ();\r", "-\taccelerators = false;\r", "+boolean translateAccelerator (int key, int keysym, XKeyEvent xEvent) {\r", "+\t/*\r", "+\t* Bug in Solaris.  When accelerators are set more\r", "+\t* than once in the same menu bar, the time it takes\r", "+\t* to set the accelerator increases exponentially.\r", "+\t* The fix is to implement our own accelerator table\r", "+\t* on Solaris.\r", "+\t*/\r", "+\tif (OS.IsSunOS) {\r", "+\t\tif (menuBar != null && menuBar.getEnabled ()) {\r", "+\t\t\t/* Ignore modifiers. */\r", "+\t\t\tswitch (keysym) {\r", "+\t\t\t\tcase OS.XK_Control_L:\r", "+\t\t\t\tcase OS.XK_Control_R:\r", "+\t\t\t\tcase OS.XK_Alt_L:\r", "+\t\t\t\tcase OS.XK_Alt_R:\r", "+\t\t\t\tcase OS.XK_Shift_L:\r", "+\t\t\t\tcase OS.XK_Shift_R:\r", "+\t\t\t\t\treturn false;\t\t\t\t\t\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* Bug in MOTIF.  On Solaris only, XK_F11 and XK_F12 are not\r", "+\t\t\t* translated correctly by XLookupString().  They are mapped\r", "+\t\t\t* to 0x1005FF10 and 0x1005FF11 respectively.  The fix is to\r", "+\t\t\t* look for these values explicitly and correct them.\r", "+\t\t\t*/\r", "+\t\t\tif (keysym != 0) {\r", "+\t\t\t\tswitch (keysym) {\r", "+\t\t\t\t\tcase 0x1005FF10: \r", "+\t\t\t\t\t\tkeysym = OS.XK_F11;\r", "+\t\t\t\t\t\tkey = 0;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase 0x1005FF11:\r", "+\t\t\t\t\t\tkeysym = OS.XK_F12;\r", "+\t\t\t\t\t\tkey = 0;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\t\t\t/*\r", "+\t\t\t\t* Bug in MOTIF.  On Solaris only, there is garbage in the\r", "+\t\t\t\t* high 16-bits for Keysyms such as XK_Down.  Since Keysyms\r", "+\t\t\t\t* must be 16-bits to fit into a Character, mask away the\r", "+\t\t\t\t* high 16-bits on all platforms.\r", "+\t\t\t\t*/\r", "+\t\t\t\tkeysym &= 0xFFFF;\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* Bug in Motif.  There are some keycodes for which \r", "+\t\t\t* XLookupString() does not translate the character.\r", "+\t\t\t* Some of examples are Shift+Tab and Ctrl+Space.\r", "+\t\t\t*/\r", "+\t\t\tswitch (keysym) {\r", "+\t\t\t\tcase OS.XK_ISO_Left_Tab: key = '\\t'; break;\r", "+\t\t\t\tcase OS.XK_space: key = ' '; break;\r", "+\t\t\t}\r", "+\t\t\t\t\r", "+\t\t\tint accelerator = Display.translateKey (keysym);\r", "+\t\t\tif (accelerator == 0) accelerator = key;\r", "+\t\t\tif ((xEvent.state & OS.Mod1Mask) != 0) accelerator |= SWT.ALT;\r", "+\t\t\tif ((xEvent.state & OS.ShiftMask) != 0) accelerator |= SWT.SHIFT;\r", "+\t\t\tif ((xEvent.state & OS.ControlMask) != 0) accelerator |= SWT.CONTROL;\r", "+\t\t\treturn menuBar.translateAccelerator (accelerator);\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5697fae86ca0b56105429551ac8b4877", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "79227b5a49c00b963ad602edd42ff8b19e607168", "commitAfterChange": "2e59efd73e90759ed48636b0f81f17f1c8202cfa", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 98, "signatureBeforeChange": "\r byte [] sendKeyEvent (int type, XKeyEvent xEvent)", "signatureAfterChange": "\r void sendKeyEvent (int type, XKeyEvent xEvent)", "diff": ["-byte [] sendKeyEvent (int type, XKeyEvent xEvent) {\r", "-\t\r", "-\t/* Look up the keysym and character(s) */\r", "-\tbyte [] buffer;\r", "-\tboolean isVirtual = false;\r", "-\tint [] keysym = new int [1];\r", "-\tif (xEvent.keycode != 0) {\r", "-\t\tbuffer = new byte [1];\r", "-\t\tisVirtual = OS.XLookupString (xEvent, buffer, buffer.length, keysym, null) == 0;\r", "-\t} else {\r", "-\t\t/*\r", "-\t\t* Bug in Motif. On Linux only, XmImMbLookupString() does not return \r", "-\t\t* XBufferOverflow as the status if the buffer is too small. The fix is\r", "-\t\t* to pass a bigger buffer.\r", "-\t\t*/\r", "-\t\tbuffer = new byte [512];\r", "-\t\tint [] status = new int [1];\r", "-\t\tint size = OS.XmImMbLookupString (handle, xEvent, buffer, buffer.length, keysym, status);\r", "-\t\tif (status [0] == OS.XBufferOverflow) {\r", "-\t\t\tbuffer = new byte [size];\r", "-\t\t\tsize = OS.XmImMbLookupString (handle, xEvent, buffer, size, keysym, status);\r", "-\t\t}\r", "-\t\tif (size == 0) return null;\r", "-\t}\r", "-\r", "-\t* Bug in MOTIF.  On Solaris only, XK_F11 and XK_F12 are not\r", "-\t* translated correctly by XLookupString().  They are mapped\r", "-\t* to 0x1005FF10 and 0x1005FF11 respectively.  The fix is to\r", "-\t* look for these values explicitly and correct them.\r", "-\tif (OS.IsSunOS) {\r", "-\t\tif ((keysym [0] == 0x1005FF10) || (keysym [0] == 0x1005FF11)) {\r", "-\t\t\tif (keysym [0] == 0x1005FF10) keysym [0] = OS.XK_F11;\r", "-\t\t\tif (keysym [0] == 0x1005FF11) keysym [0] = OS.XK_F12;\r", "-\t\t}\r", "-\t/*\r", "-\t* Bug in MOTIF.  On Solaris only, their is garbage in the\r", "-\t* high 16-bits for Keysyms such as XK_Down.  Since Keysyms\r", "-\t* must be 16-bits to fit into a Character, mask away the\r", "-\t* high 16-bits on all platforms.\r", "-\t*/\r", "-\tkeysym [0] &= 0xFFFF;\r", "-\r", "-\t\tif (isVirtual) event.keyCode = Display.translateKey (keysym [0]);\r", "-\t\tif ((xEvent.state & OS.Mod1Mask) != 0) event.stateMask |= SWT.ALT;\r", "-\t\tif ((xEvent.state & OS.ShiftMask) != 0) event.stateMask |= SWT.SHIFT;\r", "-\t\tif ((xEvent.state & OS.ControlMask) != 0) event.stateMask |= SWT.CONTROL;\r", "-\t\tif ((xEvent.state & OS.Button1Mask) != 0) event.stateMask |= SWT.BUTTON1;\r", "-\t\tif ((xEvent.state & OS.Button2Mask) != 0) event.stateMask |= SWT.BUTTON2;\r", "-\t\tif ((xEvent.state & OS.Button3Mask) != 0) event.stateMask |= SWT.BUTTON3;\r", "-\t\r", "+void sendKeyEvent (int type, XKeyEvent xEvent) {\r", "+\tEvent event = new Event ();\r", "+\tevent.time = xEvent.time;\r", "+\tsetKeyState (event, xEvent);\r", "+\tpostEvent (type, event);\r", "+}\r"]}], "num": 58120}
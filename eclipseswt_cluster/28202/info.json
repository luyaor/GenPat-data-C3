{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e8f2993c74b38acf07387fdf1af82dd2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb0f3d8d59084037ec32a0362f2c0901", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "bacad3a175bb18224de7727549cb25e4799e3e8e", "commitAfterChange": "5d8a957e9aa0e637d531abd59800df08cb6a2cc3", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " public Point map (Control from, Control to, int x, int y)", "signatureAfterChange": " public Point map (Control from, Control to, int x, int y)", "diff": ["-\tif (from != null && from.isDisposed()) error (SWT.ERROR_INVALID_ARGUMENT);", "-\tif (to != null && to.isDisposed()) error (SWT.ERROR_INVALID_ARGUMENT);", "+\tif (from != null && from.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);", "+\tif (to != null && to.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);", "-\tint point = OS.gcnew_Point (x, y);", "-\tif (from != null && OS.FrameworkElement_IsLoaded(from.handle)) {", "-\t\tint result = OS.Visual_PointToScreen (from.handle, point);", "+\tif (from != null && to != null) {", "+\t\tint point = OS.gcnew_Point (x, y);", "+\t\tint newPoint = OS.UIElement_TranslatePoint(from.topHandle (), point, to.topHandle ());", "+\t\tPoint result = new Point ((int)OS.Point_X (newPoint), (int)OS.Point_Y (newPoint));", "-\t\tpoint = result;", "+\t\tOS.GCHandle_Free (newPoint);", "+\t\treturn result;", "+\t} else {", "+\t\tif (from == null) {", "+\t\t\tShell shell = to.getShell ();", "+\t\t\tPoint shellLocation = shell.getLocation ();", "+\t\t\tint point = OS.gcnew_Point (x - shellLocation.x, y - shellLocation.y);", "+\t\t\tOS.UIElement_UpdateLayout (to.topHandle ());", "+\t\t\tint newPoint = OS.UIElement_TranslatePoint (shell.shellHandle, point, to.topHandle ());", "+\t\t\tPoint result = new Point ((int)OS.Point_X (newPoint), (int)OS.Point_Y (newPoint));", "+\t\t\tOS.GCHandle_Free (point);", "+\t\t\tOS.GCHandle_Free (newPoint);", "+\t\t\treturn result;", "+\t\t} else {", "+\t\t\tShell shell = from.getShell ();", "+\t\t\tPoint shellLocation = shell.getLocation ();", "+\t\t\tint point = OS.gcnew_Point (x, y);", "+\t\t\tOS.UIElement_UpdateLayout (from.topHandle ());", "+\t\t\tint newPoint = OS.UIElement_TranslatePoint (from.topHandle (), point, shell.shellHandle);", "+\t\t\tPoint result = new Point ((int)OS.Point_X (newPoint) + shellLocation.x, (int)OS.Point_Y (newPoint) + shellLocation.y);", "+\t\t\tOS.GCHandle_Free (point);", "+\t\t\tOS.GCHandle_Free (newPoint);", "+\t\t\treturn result;", "+\t\t}", "-\tif (to != null && OS.FrameworkElement_IsLoaded(to.handle)) {", "-\t\tint result = OS.Visual_PointFromScreen (to.handle, point);", "-\t\tOS.GCHandle_Free (point);", "-\t\tpoint = result;", "-\t}", "-\tPoint result = new Point ((int)OS.Point_X (point), (int)OS.Point_Y (point));", "-\tOS.GCHandle_Free (point);", "-\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b13dc3d609ab9c92d9c00d905ee5f16e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "fb0ed33d9069b9fd0107f7de2f81037302ea46d7", "commitAfterChange": "84fc2c9805b2d2c52f9b3b56022cf3cd83acd074", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 38, "signatureBeforeChange": "\r \r boolean setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "signatureAfterChange": "\r \r boolean setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "diff": ["-\tint [] args = {OS.Pt_ARG_WINDOW_RENDER_FLAGS, 0, 0};\r", "-\tOS.PtGetResources (shellHandle, args.length / 3, args);\r", "-\tint flags = args [1];\r", "-\tint [] left = new int [1], top = new int [1];\r", "-\tint [] right = new int [1], bottom = new int [1];\r", "-\tOS.PtFrameSize (flags, 0, left, top, right, bottom);\r", "-\tPhArea_t area = new PhArea_t ();\r", "-\tOS.PtWidgetArea (shellHandle, area);\r", "-\tint frameWidth = area.size_w + left [0] + right [0];\r", "-\tint frameHeight = area.size_h + top [0] + bottom [0];\r", "-\tif (!move) {\r", "-\t\tx = area.pos_x;\r", "-\t\ty = area.pos_y;\r", "+\t\r", "+\tboolean caretVisible = caret != null && caret.isVisible ();\r", "+\tif (caretVisible) caret.hideCaret ();\r", "+\t\r", "+\tif (resize) {\r", "+\t\t/* Get the trimings */\r", "+\t\tint [] args = {OS.Pt_ARG_WINDOW_RENDER_FLAGS, 0, 0};\r", "+\t\tOS.PtGetResources (shellHandle, args.length / 3, args);\r", "+\t\tint flags = args [1];\r", "+\t\tint [] left = new int [1], top = new int [1];\r", "+\t\tint [] right = new int [1], bottom = new int [1];\r", "+\t\tOS.PtFrameSize (flags, 0, left, top, right, bottom);\r", "+\t\twidth = Math.max (width - left [0] - right [0], 0);\r", "+\t\theight = Math.max (height - top [0] - bottom [0], 0);\r", "-\tif (!resize) {\r", "-\t\twidth = frameWidth;\r", "-\t\theight = frameHeight;\r", "+\t\r", "+\tPhArea_t oldArea = new PhArea_t ();\r", "+\tOS.PtWidgetArea (shellHandle, oldArea);\r", "+\t\r", "+\tif (move && resize) {\r", "+\t\tPhArea_t area = new PhArea_t ();\r", "+\t\tarea.pos_x = (short) x;\r", "+\t\tarea.pos_y = (short) y;\r", "+\t\tarea.size_w = (short) width;\r", "+\t\tarea.size_h = (short) height;\r", "+\t\tint ptr = OS.malloc (PhArea_t.sizeof);\r", "+\t\tOS.memmove (ptr, area, PhArea_t.sizeof);\r", "+\t\tOS.PtSetResource (shellHandle, OS.Pt_ARG_AREA, ptr, 0);\r", "+\t\tOS.free (ptr);\r", "+\t} else {\r", "+\t\tif (move) {\r", "+\t\t\tPhPoint_t pt = new PhPoint_t ();\r", "+\t\t\tpt.x = (short) x;\r", "+\t\t\tpt.y = (short) y;\r", "+\t\t\tint ptr = OS.malloc (PhPoint_t.sizeof);\r", "+\t\t\tOS.memmove (ptr, pt, PhPoint_t.sizeof);\r", "+\t\t\tOS.PtSetResource (shellHandle, OS.Pt_ARG_POS, ptr, 0);\r", "+\t\t\tOS.free (ptr);\r", "+\t\t} else if (resize) {\r", "+\t\t\tint [] args = {\r", "+\t\t\t\tOS.Pt_ARG_WIDTH, width, 0,\r", "+\t\t\t\tOS.Pt_ARG_HEIGHT, height, 0,\r", "+\t\t\t};\r", "+\t\t\tOS.PtSetResources (shellHandle, args.length / 3, args);\r", "+\t\t}\r", "-\tboolean sameOrigin = x == area.pos_x && y == area.pos_y;\r", "-\tboolean sameExtent = width == frameWidth && height == frameHeight;\r", "-\tarea.pos_x = (short) x;\r", "-\tarea.pos_y = (short) y;\r", "-\tarea.size_w = (short) (Math.max (width - left [0] - right [0], 0));\r", "-\tarea.size_h = (short) (Math.max (height - top [0] - bottom [0], 0));\r", "-\tint ptr = OS.malloc (PhArea_t.sizeof);\r", "-\tOS.memmove (ptr, area, PhArea_t.sizeof);\r", "-\tOS.PtSetResource (shellHandle, OS.Pt_ARG_AREA, ptr, 0);\r", "-\tOS.free (ptr);\r", "+\r", "+\t\tPhArea_t newArea = new PhArea_t ();\r", "+\t\tOS.PtWidgetArea (shellHandle, newArea);\r", "+\t\tboolean sameOrigin = oldArea.pos_x == newArea.pos_x && oldArea.pos_y == newArea.pos_y;\r", "+\t\tboolean sameExtent = oldArea.size_w == newArea.size_w && oldArea.size_h == newArea.size_h;\r", "-\t\t\tresizeBounds (width, height);\r", "+\t\t\tresizeBounds (newArea.size_w, newArea.size_h);\r", "+\t\t\tif (layout != null) layout (false);\r", "-\treturn !sameOrigin || !sameExtent;\r", "-}\r", "+\t\r", "+\tif (caretVisible) caret.showCaret ();\r", "+\t\r", "+\treturn move || resize;\r"]}], "num": 28202}
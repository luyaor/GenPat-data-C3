{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ecec005bca82cf558c8037b70606c977", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09e85ae4aaa7e56f82eb66f0cff07366", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "7ee9370fb1f257b0959b64e9c229131ca3b8dbfc", "commitAfterChange": "0311d68036ad50521d345e1a90470acd1e4bf9b4", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " boolean canDragRowsWithIndexes_atPoint(int id, int sel, int arg0, int arg1)", "signatureAfterChange": "  boolean canDragRowsWithIndexes_atPoint(int id, int sel, int rowIndexes, NSPoint mouseDownPoint)", "diff": ["-boolean canDragRowsWithIndexes_atPoint(int /*long*/ id, int /*long*/ sel, int /*long*/ arg0, int /*long*/ arg1) {", "-\t// Trees/tables are not draggable unless explicitly told they are.", "-\treturn false;", "+", "+boolean canDragRowsWithIndexes_atPoint(int /*long*/ id, int /*long*/ sel, int /*long*/ rowIndexes, NSPoint mouseDownPoint) {", "+\tobjc_super super_struct = new objc_super();", "+\tsuper_struct.receiver = id;", "+\tsuper_struct.super_class = OS.objc_msgSend(id, OS.sel_superclass);", "+\treturn OS.objc_msgSendSuper_bool(super_struct, sel, rowIndexes, mouseDownPoint);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "451ecb9d4d6e6f847d8313ff32eb9321", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "4e541013d096af28302abcbca900276c0e545259", "commitAfterChange": "e126ad021104dbb3243e0172869102689e47d9ea", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  RECT getBounds (int row, int column, boolean getText, boolean getImage)", "signatureAfterChange": "  RECT getBounds (int row, int column, boolean getText, boolean getImage)", "diff": ["-\tint hwnd = parent.handle;", "-\trect.top = column;", "-\trect.left = getText ? OS.LVIR_LABEL : OS.LVIR_ICON;", "-\tif (OS.SendMessage (hwnd, OS. LVM_GETSUBITEMRECT, row, rect) != 0) {", "+\tint hwnd = parent.handle;", "+\tif (column == 0 && count == 1) {", "-\t\t\t/*", "-\t\t\t* Feature in Windows.  Calling LVM_GETSUBITEMRECT with LVIR_LABEL", "-\t\t\t* and zero for the column number gives the bounds of the first item", "-\t\t\t* without including the bounds of the icon.  This is undocumented.", "-\t\t\t* When called with values greater than zero, the icon bounds are", "-\t\t\t* included and this behavior is documented.", "-\t\t\t*/", "-\t\t\tif (column == 0) {", "-\t\t\t\tRECT iconRect = new RECT ();", "-\t\t\t\ticonRect.left = OS.LVIR_ICON;", "-\t\t\t\ticonRect.top = column;", "-\t\t\t\tif (OS.SendMessage (hwnd, OS. LVM_GETSUBITEMRECT, row, iconRect) != 0) {", "-\t\t\t\t\trect.left = iconRect.left;", "-\t\t\t\t\trect.right = Math.max (rect.right, iconRect.right);", "+\t\t\trect.left = OS.LVIR_SELECTBOUNDS;", "+\t\t} else {", "+\t\t\trect.left = getText ? OS.LVIR_LABEL : OS.LVIR_ICON;", "+\t\t}", "+\t\tif (OS.SendMessage (hwnd, OS. LVM_GETITEMRECT, row, rect) == 0) {", "+\t\t\trect.left = 0;", "+\t\t}", "+\t} else {", "+\t\t/*", "+\t\t* Feature in Windows.  Calling LVM_GETSUBITEMRECT with LVIR_LABEL", "+\t\t* and zero for the column number gives the bounds of the first item", "+\t\t* without including the bounds of the icon.  This is undocumented.", "+\t\t* When called with values greater than zero, the icon bounds are", "+\t\t* included and this behavior is documented.", "+\t\t*/", "+\t\trect.top = column;", "+\t\trect.left = getText ? OS.LVIR_LABEL : OS.LVIR_ICON;", "+\t\tif (OS.SendMessage (hwnd, OS. LVM_GETSUBITEMRECT, row, rect) != 0) {", "+\t\t\tif (getText && getImage) {", "+\t\t\t\tif (column == 0) {", "+\t\t\t\t\tRECT iconRect = new RECT ();", "+\t\t\t\t\ticonRect.left = OS.LVIR_ICON;", "+\t\t\t\t\ticonRect.top = column;", "+\t\t\t\t\tif (OS.SendMessage (hwnd, OS. LVM_GETSUBITEMRECT, row, iconRect) != 0) {", "+\t\t\t\t\t\trect.left = iconRect.left;", "+\t\t\t\t\t\trect.right = Math.max (rect.right, iconRect.right);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (column != 0) {", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Feature in Windows.  LVM_GETSUBITEMRECT returns an image width", "+\t\t\t\t\t* even when the subitem does not contain an image.  The fix is to", "+\t\t\t\t\t* adjust the rectangle to represent the area the table is drawing.", "+\t\t\t\t\t*/", "+\t\t\t\t\tif (images != null && images [column] != null) {", "+\t\t\t\t\t\tif (getText) {", "+\t\t\t\t\t\t\tRECT iconRect = new RECT ();", "+\t\t\t\t\t\t\ticonRect.left = OS.LVIR_ICON;", "+\t\t\t\t\t\t\ticonRect.top = column;\t\t", "+\t\t\t\t\t\t\tif (OS.SendMessage (hwnd, OS. LVM_GETSUBITEMRECT, row, iconRect) != 0) {", "+\t\t\t\t\t\t\t\trect.left = iconRect.right + Table.INSET / 2;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (getImage) rect.right = rect.left;", "+\t\t\t\t\t}", "-\t\t\tif (column != 0) {", "-\t\t\t\t/*", "-\t\t\t\t* Feature in Windows.  LVM_GETSUBITEMRECT returns an image width", "-\t\t\t\t* even when the subitem does not contain an image.  The fix is to", "-\t\t\t\t* adjust the rectangle to represent the area the table is drawing.", "-\t\t\t\t*/", "-\t\t\t\tif (images != null && images [column] != null) {", "-\t\t\t\t\tif (getText) {", "-\t\t\t\t\t\tRECT iconRect = new RECT ();", "-\t\t\t\t\t\ticonRect.left = OS.LVIR_ICON;", "-\t\t\t\t\t\ticonRect.top = column;\t\t", "-\t\t\t\t\t\tif (OS.SendMessage (hwnd, OS. LVM_GETSUBITEMRECT, row, iconRect) != 0) {", "-\t\t\t\t\t\t\trect.left = iconRect.right + Table.INSET / 2;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tif (getImage) rect.right = rect.left;", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\trect.left = rect.top = 0;"]}], "num": 54536}
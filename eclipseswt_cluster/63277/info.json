{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d01445867aa3212eb73902da517a6fc1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3e0a1ebbf4e7510ac2af6a5505148ee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/Cursor.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \r public Cursor(Device device, ImageData source, ImageData mask, int hotspotX, int hotspotY)", "signatureAfterChange": "\r \r public Cursor(Device device, ImageData source, ImageData mask, int hotspotX, int hotspotY)", "diff": ["+\tif (source == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);\r", "+\tif (mask == null) {\r", "+\t\tif (source.getTransparencyType() != SWT.TRANSPARENCY_MASK) {\r", "+\t\t\tSWT.error(SWT.ERROR_NULL_ARGUMENT);\r", "+\t\t}\r", "+\t\tmask = source.getTransparencyMask();\r", "+\t}\r", "+\t/* Check the bounds. Mask must be the same size as source */\r", "+\tif (mask.width != source.width || mask.height != source.height) {\r", "+\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);\r", "+\t}\r", "+\t/* Check color depths */\r", "+\tif (mask.depth != 1) SWT.error(SWT.ERROR_INVALID_ARGUMENT);\r", "+\tif (source.depth != 1) SWT.error(SWT.ERROR_INVALID_ARGUMENT);\r", "+\t/* Check the hotspots */\r", "+\tif (hotspotX >= source.width || hotspotX < 0 ||\r", "+\t\thotspotY >= source.height || hotspotY < 0) {\r", "+\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);\r", "+\t}\r", "-\tSWT.error(SWT.ERROR_NOT_IMPLEMENTED);\r", "-\tif (handle == 0) SWT.error(SWT.ERROR_NO_HANDLES);\r", "+\t\r", "+\tshort w = (short)source.width;\r", "+\tshort h = (short)source.height;\r", "+\tImageData mask1 = new ImageData(w, h, 1, source.palette);\r", "+\tImageData mask2 = new ImageData(w, h, 1, mask.palette);\r", "+\tfor (int y=0; y<h; y++) {\r", "+\t\tfor (int x=0; x<w; x++) {\r", "+\t\t\tint mask1_pixel, src_pixel = source.getPixel(x, y);\r", "+\t\t\tint mask2_pixel, mask_pixel = mask.getPixel(x, y);\r", "+\t\t\tif (src_pixel == 0 && mask_pixel == 0) {\r", "+\t\t\t\t// BLACK\r", "+\t\t\t\tmask1_pixel = 0;\r", "+\t\t\t\tmask2_pixel = 1;\r", "+\t\t\t} else if (src_pixel == 0 && mask_pixel == 1) {\r", "+\t\t\t\t// WHITE - cursor color\r", "+\t\t\t\tmask1_pixel = 1;\r", "+\t\t\t\tmask2_pixel = 0;\r", "+\t\t\t} else if (src_pixel == 1 && mask_pixel == 0) {\r", "+\t\t\t\t// SCREEN\r", "+\t\t\t\tmask1_pixel = 0;\r", "+\t\t\t\tmask2_pixel = 0;\r", "+\t\t\t} else {\r", "+\t\t\t\t/*\r", "+\t\t\t\t* Feature in Photon. It is not possible to have\r", "+\t\t\t\t* the reverse screen case using the Photon support.\r", "+\t\t\t\t* Reverse screen will be the same as screen.\r", "+\t\t\t\t*/\r", "+\t\t\t\t// REVERSE SCREEN -> SCREEN\r", "+\t\t\t\tmask1_pixel = 0;\r", "+\t\t\t\tmask2_pixel = 0;\r", "+\t\t\t}\r", "+\t\t\tmask1.setPixel(x, y, mask1_pixel);\r", "+\t\t\tmask2.setPixel(x, y, mask2_pixel);\r", "+\t\t}\r", "+\t}\r", "+\t\r", "+\tPhCursorDef_t cursor = new PhCursorDef_t();\r", "+\tcursor.size1_x = w;\r", "+\tcursor.size1_y = h;\r", "+\tcursor.offset1_x = (short)-hotspotX;\r", "+\tcursor.offset1_y = (short)-hotspotY;\r", "+\tcursor.bytesperline1 = (byte)mask1.bytesPerLine;\r", "+\tcursor.color1 = OS.Ph_CURSOR_DEFAULT_COLOR;\r", "+\tcursor.size2_x = w;\r", "+\tcursor.size2_y = h;\r", "+\tcursor.offset2_x = (short)-hotspotX;\r", "+\tcursor.offset2_y = (short)-hotspotY;\r", "+\tcursor.bytesperline2 = (byte)mask2.bytesPerLine;\r", "+\tcursor.color2 = 0x000000;\r", "+\tint mask1Size = cursor.bytesperline1 * cursor.size1_y;\r", "+\tint mask2Size = cursor.bytesperline2 * cursor.size2_y;\t\r", "+\tbitmap = OS.malloc(PhCursorDef_t.sizeof + mask1Size + mask2Size);\r", "+\tif (bitmap == 0) SWT.error(SWT.ERROR_NO_HANDLES);\r", "+\tOS.memmove(bitmap, cursor, PhCursorDef_t.sizeof);\r", "+\tOS.memmove(bitmap + PhCursorDef_t.sizeof, mask1.data, mask1Size);\r", "+\tOS.memmove(bitmap + PhCursorDef_t.sizeof + mask1Size, mask2.data, mask2Size);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6a605efaedaf1c7a046bbd812938317", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "be518991c12a9ca18071e368dfe879c94fa2722f", "commitAfterChange": "7fb06e9229d8e53de398a263a33af7e61a8f59eb", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void scroll (int destX, int destY, int x, int y, int width, int height, boolean all)", "signatureAfterChange": " public void scroll (int destX, int destY, int x, int y, int width, int height, boolean all)", "diff": ["-//\tif (!isDrawing (handle)) return;", "+\tif (!isDrawing (view)) return;", "-\tview.setNeedsDisplayInRect(damage);", "-\tdamage.x = destX;", "-\tdamage.y = destY;", "-\tview.setNeedsDisplayInRect(damage);", "-//\tControl control = findBackgroundControl ();", "-//\tif ((control != null && control.backgroundImage != null)) {", "-//\t\tredrawWidget (handle, x, y, width, height, false);", "-//\t\tredrawWidget (handle, destX, destY, width, height, false);", "-//\t} else {", "-//\t    GC gc = new GC (this);", "-//\t    gc.copyArea (x, y, width, height, destX, destY);", "-//\t    gc.dispose ();", "-//\t}", "+", "+\tNSPoint dest = new NSPoint();", "+\tdest.x = destX;", "+\tdest.y = destY;", "+\t\t", "+\tview.lockFocus();", "+\tOS.NSCopyBits(0, damage , dest);", "+\tview.unlockFocus();", "+", "+\tboolean disjoint = (destX + width < x) || (x + width < destX) || (destY + height < y) || (y + height < destY);", "+\tif (disjoint) {", "+\t\tview.setNeedsDisplayInRect(damage);", "+\t} else {", "+\t\tif (deltaX != 0) {", "+\t\t\tint newX = destX - deltaX;", "+\t\t\tif (deltaX < 0) newX = destX + width;", "+\t\t\tdamage.x = newX;", "+\t\t\tdamage.width = Math.abs(deltaX);", "+\t\t\tview.setNeedsDisplayInRect(damage);", "+\t\t}", "+\t\tif (deltaY != 0) {", "+\t\t\tint newY = destY - deltaY;", "+\t\t\tif (deltaY < 0) newY = destY + height;", "+\t\t\tdamage.x = x;", "+\t\t\tdamage.y = newY;", "+\t\t\tdamage.width = width;", "+\t\t\tdamage.height =  Math.abs (deltaY);", "+\t\t\tview.setNeedsDisplayInRect(damage);", "+\t\t}", "+\t}", "+\t", "+\tNSRect visibleRect = view.visibleRect();", "+\tNSRect srcRect = new NSRect();", "+\tsrcRect.x = sourceRect.x;", "+\tsrcRect.y = sourceRect.y;", "+\tsrcRect.width = sourceRect.width;", "+\tsrcRect.height = sourceRect.height;", "+\tOS.NSIntersectionRect(visibleRect, visibleRect, srcRect);", "+\t", "+\tif (!OS.NSEqualRects(visibleRect, srcRect)) {", "+\t\tif (srcRect.x != visibleRect.x) {", "+\t\t\tdamage.x = srcRect.x + deltaX;", "+\t\t\tdamage.y = srcRect.y + deltaY;", "+\t\t\tdamage.width = visibleRect.x - srcRect.x;", "+\t\t\tdamage.height = srcRect.height;", "+\t\t\tview.setNeedsDisplayInRect(damage);", "+\t\t} ", "+\t\tif (visibleRect.x + visibleRect.width != srcRect.x + srcRect.width) {", "+\t\t\tdamage.x = srcRect.x + visibleRect.width + deltaX;", "+\t\t\tdamage.y = srcRect.y + deltaY;", "+\t\t\tdamage.width = srcRect.width - visibleRect.width;", "+\t\t\tdamage.height = srcRect.height;", "+\t\t\tview.setNeedsDisplayInRect(damage);", "+\t\t}", "+\t\tif (visibleRect.y != srcRect.y) {", "+\t\t\tdamage.x = visibleRect.x + deltaX;", "+\t\t\tdamage.y = srcRect.y + deltaY;", "+\t\t\tdamage.width = visibleRect.width;", "+\t\t\tdamage.height = visibleRect.y - srcRect.y;", "+\t\t\tview.setNeedsDisplayInRect(damage);", "+\t\t}", "+\t\tif (visibleRect.y + visibleRect.height != srcRect.y + srcRect.height) {", "+\t\t\tdamage.x = visibleRect.x + deltaX;", "+\t\t\tdamage.y = visibleRect.y + visibleRect.height + deltaY;", "+\t\t\tdamage.width = visibleRect.width;", "+\t\t\tdamage.height = srcRect.y + srcRect.height - (visibleRect.y + visibleRect.height);", "+\t\t\tview.setNeedsDisplayInRect(damage);", "+\t\t}", "+\t}\t", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "454028595d6ee9e229d07e31b6e741e6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "13b50b5c7f6f242ffae4a8f19b06c259eda287b0", "commitAfterChange": "1a0e67c58b9b0ea0fda7bf2aef0fb3c058eeda82", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void copyArea(int srcX, int srcY, int width, int height, int destX, int destY, boolean paint)", "signatureAfterChange": " public void copyArea(int srcX, int srcY, int width, int height, int destX, int destY, boolean paint)", "diff": ["-\t\t\t//TODO implement copyArea(IIIIIIZ) for views", "+\t\t\tNSView view = data.view;", "+\t\t\tNSRect visibleRect = view.visibleRect();", "+\t\t\tif (visibleRect.width <= 0 || visibleRect.height <= 0) return;", "+\t\t\tNSRect damage = new NSRect();", "+\t\t\tdamage.x = srcX;", "+\t\t\tdamage.y = srcY;", "+\t\t\tdamage.width = width;", "+\t\t\tdamage.height = height;", "+\t\t\tNSPoint dest = new NSPoint();", "+\t\t\tdest.x = destX;", "+\t\t\tdest.y = destY;", "+", "+\t\t\tview.lockFocus();", "+\t\t\tOS.NSCopyBits(0, damage , dest);", "+\t\t\tview.unlockFocus();", "+", "+\t\t\tif (paint) {", "+\t\t\t\tboolean disjoint = (destX + width < srcX) || (srcX + width < destX) || (destY + height < srcY) || (srcY + height < destY);", "+\t\t\t\tif (disjoint) {", "+\t\t\t\t\tview.setNeedsDisplayInRect(damage);", "+\t\t\t\t} else {", "+\t\t\t\t\tif (deltaX != 0) {", "+\t\t\t\t\t\tint newX = destX - deltaX;", "+\t\t\t\t\t\tif (deltaX < 0) newX = destX + width;", "+\t\t\t\t\t\tdamage.x = newX;", "+\t\t\t\t\t\tdamage.width = Math.abs(deltaX);", "+\t\t\t\t\t\tview.setNeedsDisplayInRect(damage);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (deltaY != 0) {", "+\t\t\t\t\t\tint newY = destY - deltaY;", "+\t\t\t\t\t\tif (deltaY < 0) newY = destY + height;", "+\t\t\t\t\t\tdamage.x = srcX;", "+\t\t\t\t\t\tdamage.y = newY;", "+\t\t\t\t\t\tdamage.width = width;", "+\t\t\t\t\t\tdamage.height =  Math.abs (deltaY);", "+\t\t\t\t\t\tview.setNeedsDisplayInRect(damage);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t", "+\t\t\t\tNSRect srcRect = new NSRect();", "+\t\t\t\tsrcRect.x = srcX;", "+\t\t\t\tsrcRect.y = srcY;", "+\t\t\t\tsrcRect.width = width;", "+\t\t\t\tsrcRect.height = height;", "+\t\t\t\tOS.NSIntersectionRect(visibleRect, visibleRect, srcRect);", "+\t", "+\t\t\t\tif (!OS.NSEqualRects(visibleRect, srcRect)) {", "+\t\t\t\t\tif (srcRect.x != visibleRect.x) {", "+\t\t\t\t\t\tdamage.x = srcRect.x + deltaX;", "+\t\t\t\t\t\tdamage.y = srcRect.y + deltaY;", "+\t\t\t\t\t\tdamage.width = visibleRect.x - srcRect.x;", "+\t\t\t\t\t\tdamage.height = srcRect.height;", "+\t\t\t\t\t\tview.setNeedsDisplayInRect(damage);", "+\t\t\t\t\t} ", "+\t\t\t\t\tif (visibleRect.x + visibleRect.width != srcRect.x + srcRect.width) {", "+\t\t\t\t\t\tdamage.x = srcRect.x + visibleRect.width + deltaX;", "+\t\t\t\t\t\tdamage.y = srcRect.y + deltaY;", "+\t\t\t\t\t\tdamage.width = srcRect.width - visibleRect.width;", "+\t\t\t\t\t\tdamage.height = srcRect.height;", "+\t\t\t\t\t\tview.setNeedsDisplayInRect(damage);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (visibleRect.y != srcRect.y) {", "+\t\t\t\t\t\tdamage.x = visibleRect.x + deltaX;", "+\t\t\t\t\t\tdamage.y = srcRect.y + deltaY;", "+\t\t\t\t\t\tdamage.width = visibleRect.width;", "+\t\t\t\t\t\tdamage.height = visibleRect.y - srcRect.y;", "+\t\t\t\t\t\tview.setNeedsDisplayInRect(damage);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (visibleRect.y + visibleRect.height != srcRect.y + srcRect.height) {", "+\t\t\t\t\t\tdamage.x = visibleRect.x + deltaX;", "+\t\t\t\t\t\tdamage.y = visibleRect.y + visibleRect.height + deltaY;", "+\t\t\t\t\t\tdamage.width = visibleRect.width;", "+\t\t\t\t\t\tdamage.height = srcRect.y + srcRect.height - (visibleRect.y + visibleRect.height);", "+\t\t\t\t\t\tview.setNeedsDisplayInRect(damage);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 63277}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "117e1134d4c97c2ecf1a36019953a0a5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2674876b12902f03224896fc6be8d1db", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/photon/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "cec669ea3b0cf84e0380b5bd6c8017a8050ce7e0", "commitAfterChange": "75fc9e9240c137385aef55f04172aedfdf72ca1f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\t", "+ */", "+", "+\t/* use Photon's built-in anchoring for resizing */", "+\tint[] args = {", "+\t\t\tOS.Pt_ARG_ANCHOR_FLAGS,", "+\t\t\tOS.Pt_TOP_ANCHORED_TOP | OS.Pt_BOTTOM_ANCHORED_BOTTOM | OS.Pt_LEFT_ANCHORED_LEFT | OS.Pt_RIGHT_ANCHORED_RIGHT,", "+\t\t\tOS.Pt_TOP_ANCHORED_TOP | OS.Pt_BOTTOM_ANCHORED_BOTTOM | OS.Pt_LEFT_ANCHORED_LEFT | OS.Pt_RIGHT_ANCHORED_RIGHT,", "+\t\t\tOS.Pt_ARG_FILL_COLOR,", "+\t\t\t0xFFFFFF,", "+\t\t\t0 };", "+\twebHandle = OS.PtCreateWidget(OS.PtWebClient(), handle, args.length / 3, args);", "+", "+\t/* configure the widget with a specific server */", "+\tFile netfront = new File(\"/usr/photon/bin/netfront\");", "+\tString name, server;", "+\tif (netfront.exists() || (OS.QNX_MAJOR >= 6 && OS.QNX_MINOR >= 3 && OS.QNX_MICRO >= 0)) {", "+\t\tname = \"NetfrontServer\";", "+\t\tserver = \"netfront\";", "+\t} else {", "+\t\tname = \"VoyagerServer-2\";", "+\t\tserver = \"vserver\";", "+\t}", "+\t/* set client name */", "+\tbyte[] nameBuffer = Converter.wcsToMbcs(null, name, true);", "+\tint namePtr = OS.malloc(nameBuffer.length);", "+\tOS.memmove(namePtr, nameBuffer, nameBuffer.length);", "+\tOS.PtSetResource(webHandle, OS.Pt_ARG_CLIENT_NAME, namePtr, 0);", "+\tOS.free(namePtr);", "+\t", "+\t/* select server */", "+\tbyte[] serverBuffer = Converter.wcsToMbcs(null, server, true);", "+\tint serverPtr = OS.malloc(serverBuffer.length);", "+\tOS.memmove(serverPtr, serverBuffer, serverBuffer.length);", "+\tOS.PtSetResource(webHandle, OS.Pt_ARG_WEB_SERVER, serverPtr, 0);", "+\tOS.free(serverPtr);", "+\t", "+\tif (callback == null) callback = new Callback(this.getClass(), \"webProc\", 3, false);", "+\tint webProc = callback.getAddress();", "+\tOS.PtAddCallback(webHandle,OS.Pt_CB_WEB_COMPLETE, webProc, OS.Pt_CB_WEB_COMPLETE);", "+\tOS.PtAddCallback(webHandle,OS.Pt_CB_WEB_START, webProc, OS.Pt_CB_WEB_START);", "+\tOS.PtAddCallback(webHandle,OS.Pt_CB_WEB_STATUS, webProc, OS.Pt_CB_WEB_STATUS);", "+\tOS.PtAddCallback(webHandle,OS.Pt_CB_WEB_URL, webProc, OS.Pt_CB_WEB_URL);", "+\t", "+\tListener listener = new Listener() {", "+\t\tpublic void handleEvent(Event event) {", "+\t\t\tswitch (event.type) {", "+\t\t\t\tcase SWT.Dispose: onDispose(); break;", "+\t\t\t\tcase SWT.FocusIn: onFocusGained(event);\tbreak;", "+\t\t\t}", "+\t\t}", "+\t};\t", "+\tint[] folderEvents = new int[]{", "+\t\tSWT.Dispose,", "+\t\tSWT.FocusIn,  ", "+\t};", "+\tfor (int i = 0; i < folderEvents.length; i++) {", "+\t\taddListener(folderEvents[i], listener);", "+\t}", "+\tOS.PtRealizeWidget(webHandle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d05332c12e59bee2f043fd492832152d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tint border = getBorderWidth ();\r", "-\tint width = border * 2, height = border * 2;\r", "+\t\tint border = getBorderWidth ();\r", "+\t\tint width = border * 2, height = border * 2;\r", "+\r", "+\tif ((style & SWT.WRAP) != 0) {\r", "+\t\tint [] args = {\r", "+\t\t\tOS.Pt_ARG_LABEL_TYPE, 0, 0,\t\t// 1\r", "+\t\t\tOS.Pt_ARG_TEXT_FONT, 0, 0,\t\t// 4\r", "+\t\t\tOS.Pt_ARG_LINE_SPACING, 0, 0,\t// 7\r", "+\t\t\tOS.Pt_ARG_MARGIN_WIDTH, 0, 0,\t// 10\r", "+\t\t\tOS.Pt_ARG_MARGIN_HEIGHT, 0, 0,\t// 13\r", "+\t\t\tOS.Pt_ARG_MARGIN_LEFT, 0, 0,\t// 16\r", "+\t\t\tOS.Pt_ARG_MARGIN_RIGHT, 0, 0,\t// 19\r", "+\t\t\tOS.Pt_ARG_MARGIN_TOP, 0, 0,\t\t// 22\r", "+\t\t\tOS.Pt_ARG_MARGIN_BOTTOM, 0, 0,\t// 25\r", "+\t\t};\r", "+\t\tOS.PtGetResources (handle, args.length / 3, args);\r", "+\t\t/* If we are wrapping text, calculate the height based on wHint. */\r", "+\t\tif (args [1] == OS.Pt_Z_STRING) {\r", "+\t\t\tint length = OS.strlen (args [4]);\r", "+\t\t\tbyte [] font = new byte [length + 1];\r", "+\t\t\tOS.memmove (font, args [4], length);\r", "+\t\t\tDisplay display = getDisplay ();\r", "+\t\t\tPhRect_t rect = new PhRect_t ();\r", "+\t\t\tString string = text;\r", "+\t\t\tif (wHint != SWT.DEFAULT) {\r", "+\t\t\t\tstring = display.wrapText (text, font, wHint);\r", "+\t\t\t}\r", "+\t\t\tif (hHint != SWT.DEFAULT) {\r", "+\t\t\t\trect.ul_y = 0;\r", "+\t\t\t\trect.lr_y = (short)(hHint - 1);\r", "+\t\t\t} else {\r", "+\t\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, string, false);\r", "+\t\t\t\tOS.PgExtentMultiText (rect, null, font, buffer, buffer.length, args [7]);\r", "+\t\t\t}\r", "+\t\t\tPhArea_t area = new PhArea_t ();\r", "+\t\t\tOS.PtSetAreaFromWidgetCanvas (handle, rect, area);\r", "+\t\t\tint width = area.size_w;\r", "+\t\t\tint height = area.size_h;\r", "+\t\t\twidth += (args [10] * 2) + args [16] + args [19];\r", "+\t\t\theight += (args [13] * 2) + args [22] + args [25];\r", "+\t\t\treturn new Point (width, height);\r", "+\t\t}\r", "+\t}\r", "+\t\r", "-\twidth = dim.w; height = dim.h;\r", "+\tint width = dim.w, height = dim.h;\r", "+\t\tint [] args = {\r", "+\t\t\tOS.Pt_ARG_MARGIN_WIDTH, 0, 0,\t// 1\r", "+\t\t\tOS.Pt_ARG_MARGIN_HEIGHT, 0, 0,\t// 4\r", "+\t\t\tOS.Pt_ARG_MARGIN_LEFT, 0, 0,\t// 7\r", "+\t\t\tOS.Pt_ARG_MARGIN_RIGHT, 0, 0,\t// 10\r", "+\t\t\tOS.Pt_ARG_MARGIN_TOP, 0, 0,\t\t// 13\r", "+\t\t\tOS.Pt_ARG_MARGIN_BOTTOM, 0, 0,\t// 16\r", "+\t\t};\r", "+\t\tOS.PtGetResources (handle, args.length / 3, args);\r", "-\t\tif (wHint != SWT.DEFAULT) width = area.size_w;\r", "-\t\tif (hHint != SWT.DEFAULT) height = area.size_h;\r", "+\t\tif (wHint != SWT.DEFAULT) {\r", "+\t\t\twidth = area.size_w + (args [1] * 2) + args [7] + args [10];\r", "+\t\t}\r", "+\t\tif (hHint != SWT.DEFAULT) {\r", "+\t\t\theight = area.size_h + (args [4] * 2) + args [13] + args [16];\r", "+\t\t}\r"]}], "num": 22269}
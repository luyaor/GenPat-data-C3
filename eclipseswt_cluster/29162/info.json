{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be64aa7a5cc40fc5aaf94f78c4e23a33", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e1cdd255495958ddfcc0473e1cf1436", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Image.java", "commitBeforeChange": "ef9b2ace84f9bf3603ba33e4a4c8fc9ae7227032", "commitAfterChange": "72e691af6bca78442e18184dc1453e5eecb6f768", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_Device_ImageFileNameProvider()", "signatureAfterChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_Device_ImageFileNameProvider()", "diff": ["+\t// Corrupt Image provider", "+\tprovider = new ImageFileNameProvider() {", "+\t\tpublic String getImagePath(int zoom) {", "+\t\t\tString fileName;", "+\t\t\tswitch (zoom) {", "+\t\t\tcase 100: ", "+\t\t\t\tfileName = \"corrupt.png\"; break;", "+\t\t\tcase 150: ", "+\t\t\t\tfileName = \"corrupt.png\"; break;", "+\t\t\tcase 200: ", "+\t\t\t\tfileName = \"corrupt.png\"; break;", "+\t\t\tdefault:", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\treturn getPath(fileName);", "+\t\t}", "+\t};", "+\ttry {", "+\t\timage = new Image(display, provider);", "+\t\timage.dispose();", "+\t\tfail(\"No exception thrown for corrupt image file.\");", "+\t} catch (SWTException e) {", "+\t\tassertSWTProblem(\"Incorrect exception thrown for provider with corrupt images\", SWT.ERROR_INVALID_IMAGE, e);", "+\t}\t\t", "+\t// Valid provider only 100% zoom", "+\tprovider = new ImageFileNameProvider() {", "+\t\tpublic String getImagePath(int zoom) {", "+\t\t\tString fileName;", "+\t\t\tswitch (zoom) {", "+\t\t\tcase 100:", "+\t\t\t\tfileName = \"collapseall.png\";", "+\t\t\t\tbreak;", "+\t\t\tcase 150: ", "+\t\t\tcase 200: ", "+\t\t\tdefault:", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\treturn getPath(fileName);", "+\t\t}", "+\t};", "+\timage = new Image(display, provider);", "+\timage.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f04730536e41d3659516fde2ac32ae61", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Image.java", "commitBeforeChange": "ef9b2ace84f9bf3603ba33e4a4c8fc9ae7227032", "commitAfterChange": "72e691af6bca78442e18184dc1453e5eecb6f768", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_Device_ImageDataProvider()", "signatureAfterChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_Device_ImageDataProvider()", "diff": ["+\t// Corrupt Image provider", "+\tprovider = new ImageDataProvider() {", "+\t\tpublic ImageData getImageData(int zoom) {", "+\t\t\tString fileName;", "+\t\t\tswitch (zoom) {", "+\t\t\tcase 100: ", "+\t\t\t\tfileName = \"corrupt.png\"; break;", "+\t\t\tcase 150: ", "+\t\t\t\tfileName = \"corrupt.png\"; break;", "+\t\t\tcase 200: ", "+\t\t\t\tfileName = \"corrupt.png\"; break;", "+\t\t\tdefault:", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\treturn new ImageData(getPath(fileName));", "+\t\t}", "+\t};", "+\ttry {", "+\t\timage = new Image(display, provider);", "+\t\timage.dispose();", "+\t\tfail(\"No exception thrown for corrupt image file.\");", "+\t} catch (SWTException e) {", "+\t\tassertSWTProblem(\"Incorrect exception thrown for provider with corrupt images\", SWT.ERROR_INVALID_IMAGE, e);", "+\t}", "+\t// Valid provider only 100% zoom", "+\tprovider = new ImageDataProvider() {", "+\t\tpublic ImageData getImageData(int zoom) {", "+\t\t\tString fileName;", "+\t\t\tswitch (zoom) {", "+\t\t\tcase 100:", "+\t\t\t\tfileName = \"collapseall.png\";", "+\t\t\t\tbreak;", "+\t\t\tcase 150: ", "+\t\t\tcase 200: ", "+\t\t\tdefault:", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\treturn new ImageData(getPath(fileName));", "+\t\t}", "+\t};", "+\timage = new Image(display, provider);", "+\timage.dispose();"]}], "num": 29162}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b4237630b7da046a8896ecfb7fd90d23", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "145edef128a3b44c106fa1f3ab240a8b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "e38f7ba08e4cd9896dddbc5916c5187c2e1b63eb", "commitAfterChange": "7349d1b65ee9a9edeeac8e2e96a33b2c8d655b80", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tint getRoleDescriptionAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \t \tint getRoleDescriptionAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t", "-\tint getRoleDescriptionAttribute (int nextHandler, int theEvent, int userData) {", "-\t\tint code = OS.CallNextEventHandler (nextHandler, theEvent);", "-\t\tevent.detail = osToRole(osRoleAttribute);", "-\t\tint [] stringRef = new int [1];", "-\t\tstringRef [0] = stringToStringRef (roleToOs (event.detail));", "-\t\tif (stringRef [0] == 0) return code;", "-\t\tint [] stringRef2 = new int [1];", "-\t\tstringRef2 [0] = OS.HICopyAccessibilityRoleDescription (stringRef [0], 0);", "-\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef2);", "-\t\treturn OS.noErr;", "+\t", "+\tint getRoleDescriptionAttribute (int nextHandler, int theEvent, int userData) {", "+\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "+\t\tevent.childID = getChildIDFromEvent(theEvent);", "+\t\tevent.detail = -1;", "+\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\tlistener.getRole(event);", "+\t\t}", "+\t\tif (event.detail != -1) {", "+\t\t\tString appRole = roleToOs (event.detail);", "+\t\t\tString appSubrole = null;", "+\t\t\tint index = appRole.indexOf(':');", "+\t\t\tif (index != -1) {", "+\t\t\t\tappSubrole = appRole.substring(index + 1);", "+\t\t\t\tappRole = appRole.substring(0, index);", "+\t\t\t}", "+\t\t\tint stringRef1 = stringToStringRef (appRole);", "+\t\t\tif (stringRef1 != 0) {", "+\t\t\t\tint stringRef2 = 0;", "+\t\t\t\tif (appSubrole != null) stringRef2 = stringToStringRef (appSubrole);", "+\t\t\t\tint stringRef3 = OS.HICopyAccessibilityRoleDescription (stringRef1, stringRef2);", "+\t\t\t\tOS.CFRelease(stringRef1);", "+\t\t\t\tif (stringRef2 != 0) OS.CFRelease(stringRef2);", "+\t\t\t\tif (stringRef3 != 0) {", "+\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef3});", "+\t\t\t\t\tOS.CFRelease(stringRef3);", "+\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn OS.CallNextEventHandler (nextHandler, theEvent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a33871a41769992e09289b62c8a219d5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "046b2b1ccf3f21ac6303aceb562ded417737fefc", "commitAfterChange": "b00764edfb26d776b9fe9f82005b87f9053f74be", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t \tint getInsertionPointLineNumberAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \t \tint getStringForRangeAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\tint getInsertionPointLineNumberAttribute (int nextHandler, int theEvent, int userData) {", "-\t\tAccessibleTextEvent event = new AccessibleTextEvent(this);", "-\t\tevent.childID = getChildIDFromEvent(theEvent);", "-\t\tevent.offset = -1;", "-\t\tfor (int i = 0; i < accessibleTextListeners.size(); i++) {", "-\t\t\tAccessibleTextListener listener = (AccessibleTextListener) accessibleTextListeners.elementAt(i);", "-\t\t\tlistener.getCaretOffset(event);", "-\t\t}", "-\t\tif (event.offset != -1) {", "-\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeSInt32, 4, new int [] {event.offset});", "-\t\t\treturn OS.noErr;", "+\tint getStringForRangeAttribute (int nextHandler, int theEvent, int userData) {", "+\t\tint valueRef [] = new int [1];", "+\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeParameter, OS.typeCFTypeRef, null, 4, null, valueRef);", "+\t\tif (status == OS.noErr) {", "+\t\t\tCFRange range = new CFRange();", "+\t\t\tboolean ok = OS.AXValueGetValue(valueRef[0], OS.kAXValueCFRangeType, range);", "+\t\t\tif (ok) {", "+\t\t\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "+\t\t\t\tevent.childID = getChildIDFromEvent(theEvent);", "+\t\t\t\tevent.result = null;", "+\t\t\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\t\t\tlistener.getValue(event);", "+\t\t\t\t}", "+\t\t\t\tString appValue = event.result;", "+\t\t\t\tif (appValue != null) {", "+\t\t\t\t\tint stringRef = stringToStringRef (appValue.substring(range.location, range.location + range.length));", "+\t\t\t\t\tif (stringRef != 0) {", "+\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef});", "+\t\t\t\t\t\tOS.CFRelease(stringRef);", "+\t\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 33060}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a23413f8de5d8f288a3f2c5ff6bb98c1", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6423a767d7b10f0d54ac2624bbd53cd6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "d07e719160ad9b5428874b3929f88d189e7c89ac", "commitAfterChange": "c834e343fe7b1e9703499118bb4656485bc6fc8e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r int matchFont(int xDisplay, FontData fd)", "signatureAfterChange": "\r int matchFont(int xDisplay, FontData fd, boolean fontSet)", "diff": ["-int matchFont(int xDisplay, FontData fd) {\t\r", "-\tint fontStruct = loadFont(xDisplay, fd);\r", "-\tif (fontStruct != 0) return fontStruct;\r", "+}\r", "+int matchFont(int xDisplay, FontData fd, boolean fontSet) {\t\r", "+\tint font = fontSet ? loadFontSet(xDisplay, fd) : loadFont(xDisplay, fd);\r", "+\tif (font != 0) return font;\r", "-\t\tfontStruct = loadFont(xDisplay, fd);\r", "-\t\tif (fontStruct != 0) return fontStruct;\r", "+\t\tfont = fontSet ? loadFontSet(xDisplay, fd) : loadFont(xDisplay, fd);\r", "+\t\tif (font != 0) return font;\r", "-\t\tfontStruct = loadFont(xDisplay, fd);\r", "-\t\tif (fontStruct != 0) return fontStruct;\r", "+\t\tfont = fontSet ? loadFontSet(xDisplay, fd) : loadFont(xDisplay, fd);\r", "+\t\tif (font != 0) return font;\r", "-\t\tfontStruct = loadFont(xDisplay, fd);\r", "-\t\tif (fontStruct != 0) return fontStruct;\r", "+\t\tfont = fontSet ? loadFontSet(xDisplay, fd) : loadFont(xDisplay, fd);\r", "+\t\tif (font != 0) return font;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae7b591202d82daedbead6ba37efb695", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 61, "signatureBeforeChange": " public void setFont (Font font)", "signatureAfterChange": " public void setFont (Font value)", "diff": ["+}", "+public void setFont (Font value) {", "+\tcheckWidget ();", "+\tif (value != null && value.isDisposed ()) {", "+\t\tSWT.error (SWT.ERROR_INVALID_ARGUMENT);", "+\t}", "+\tif (font == value) return;", "+\tif (value != null && value.equals (font)) return;", "+\t", "+\tfont = value;", "+\t/* recompute cached values for string measurements */", "+\tGC gc = new GC (parent);", "+\tgc.setFont (getFont ());", "+\trecomputeTextWidths (gc);", "+\tfontHeight = gc.getFontMetrics ().getHeight ();", "+\tgc.dispose ();", "+\tredrawItem ();", "+}", "- */", "-public void setFont (Font font){", "-\tif (font != null && font.isDisposed ()) {", "-\tif (this.font == font) return;", "-\tif (this.font != null && this.font.equals (font)) return;", "-\tthis.font = font;", "-\tredraw ();", "-}"]}], "num": 19582}
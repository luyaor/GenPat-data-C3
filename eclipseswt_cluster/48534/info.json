{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e228e2b380bfdd4489daf4293121c925", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e00dee58acd695bc4dc852b2daef82bc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "0bcce8701fee7076e5f1dd2db6410f49b6638dae", "commitAfterChange": "bd48e2b84a6482ec594a06a3c3531b924107c392", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "\r void calculateTopIndex()", "signatureAfterChange": "\r void calculateTopIndex()", "diff": ["-\tif (topIndex > 0 && clientAreaHeight > 0) {\r", "-\t\tint bottomPixel = verticalScrollOffset + clientAreaHeight;\r", "-\t\tint fullLineTopPixel = topIndex * verticalIncrement;\r", "-\t\tint fullLineVisibleHeight = bottomPixel - fullLineTopPixel;\r", "-\t\tif (fullLineVisibleHeight < verticalIncrement) {\r", "-\t\t\ttopIndex--;\r", "+\tif (topIndex > 0) {\r", "+\t\tif (clientAreaHeight > 0) {\r", "+\t\t\tint bottomPixel = verticalScrollOffset + clientAreaHeight;\r", "+\t\t\tint fullLineTopPixel = topIndex * verticalIncrement;\r", "+\t\t\tint fullLineVisibleHeight = bottomPixel - fullLineTopPixel;\r", "+\t\t\t// set top index to partially visible line if no line fully fits in \r", "+\t\t\t// client area or if space is available but not used (the latter should\r", "+\t\t\t// never happen because we use claimBottomFreeSpace)\r", "+\t\t\tif (fullLineVisibleHeight < verticalIncrement) {\r", "+\t\t\t\ttopIndex--;\r", "+\t\t\t}\r", "-\t}\t\r", "+\t\telse \r", "+\t\tif (topIndex >= content.getLineCount()) {\r", "+\t\t\ttopIndex = content.getLineCount() - 1;\r", "+\t\t}\r", "+\t}\r", "+\t\ttopOffset = content.getOffsetAtLine(topIndex);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbb67d4caa04d52d5c6b1b12d74af33b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "a56525ddb41b82034aaca3e68e3094b41b1d92ee", "commitAfterChange": "7f080f182f6a92fcfdba594bc2e83c66e54d8c3d", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": "\r public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "\r public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\tif (wHint != SWT.DEFAULT) {\r", "-\t\t\twidth = wHint;\r", "-\t\t} \r", "-\t\telse {\r", "-\t\t\twidth = DEFAULT_WIDTH;\r", "+\t\tif (((WrappedContent) content).getVisualLineCount() != 0) {\r", "+\t\t\t// lines have already been wrapped to a specific width.\r", "+\t\t\t// use existing line count. fixes bug 9191\r", "+\t\t\twidth = lineCache.getWidth();\r", "+\t\t\tif (singleLine == false) {\r", "+\t\t\t\tcount = content.getLineCount();\r", "+\t\t\t}\r", "-\t\tif (singleLine == false) {\r", "-\t\t\t((WrappedContent) content).wrapLines(width);\r", "-\t\t\tcount = content.getLineCount();\r", "+\t\telse {\r", "+\t\t\t// lines have not been wrapped yet. wrap to width hint \r", "+\t\t\t// or to default width.\r", "+\t\t\tif (wHint != SWT.DEFAULT) {\r", "+\t\t\t\twidth = wHint;\r", "+\t\t\t} \r", "+\t\t\telse {\r", "+\t\t\t\twidth = DEFAULT_WIDTH;\r", "+\t\t\t}\r", "+\t\t\tif (singleLine == false) {\r", "+\t\t\t\t((WrappedContent) content).wrapLines(width);\r", "+\t\t\t\tcount = content.getLineCount();\r", "+\t\t\t}\r"]}], "num": 48534}
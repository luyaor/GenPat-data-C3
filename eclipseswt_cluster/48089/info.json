{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "81ba3f229a626470b3440e7c3991d2ee", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50ebcaae748b8871ce126382f26743e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "f99ef2fd3e299eaae5b095e6b27fba9b7bccb0bc", "commitAfterChange": "5f701df943c9d6be0ccfe4e4e53db25d9291eba8", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "  void generateSends()", "signatureAfterChange": "  void generateSends()", "diff": ["-\tTreeSet set = new TreeSet();", "+\tTreeMap set = new TreeMap();", "+\tTreeMap set64 = new TreeMap();", "-\t\t\tif (\"class\".equals(node.getNodeName())) {", "-\t\t\t\tif (getGen(node)) {", "-\t\t\t\t\tNodeList methods = node.getChildNodes();", "-\t\t\t\t\tfor (int j = 0; j < methods.getLength(); j++) {", "-\t\t\t\t\t\tNode method = methods.item(j);", "-\t\t\t\t\t\tif (\"method\".equals(method.getNodeName())) {", "-\t\t\t\t\t\t\tif (getGen(method)) {", "-\t\t\t\t\t\t\t\tString code = buildSend(method, false, false);", "-\t\t\t\t\t\t\t\tString code64 = buildSend(method, false, true);", "-\t\t\t\t\t\t\t\tset.add(code64);", "-\t\t\t\t\t\t\t\tset.add(code);", "-\t\t\t\t\t\t\t}", "+\t\t\tif (\"class\".equals(node.getNodeName()) && getGen(node)) {", "+\t\t\t\tNodeList methods = node.getChildNodes();", "+\t\t\t\tfor (int j = 0; j < methods.getLength(); j++) {", "+\t\t\t\t\tNode method = methods.item(j);", "+\t\t\t\t\tif (\"method\".equals(method.getNodeName()) && getGen(method)) {", "+\t\t\t\t\t\tString code = buildSend(method, false, false);", "+\t\t\t\t\t\tString code64 = buildSend(method, false, true);", "+\t\t\t\t\t\tif (set.get(code) == null) {", "+\t\t\t\t\t\t\tset.put(code, method);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (set64.get(code64) == null) {", "+\t\t\t\t\t\t\tset64.put(code64, method);", "-\tout(\"//TODO - trim unused 64 bit calls\");", "-\tfor (Iterator iterator = set.iterator(); iterator.hasNext();) {", "+\tTreeMap tagsSet = new TreeMap();", "+\tfor (Iterator iterator = set.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = (String)iterator.next();", "+\t\tNode method = (Node)set.get(key);", "+\t\tString tagCode = buildSend(method, false, true);", "+\t\tif (set64.get(tagCode) != null) {", "+\t\t\ttagsSet.put(key, method);", "+\t\t\titerator.remove();", "+\t\t\tset64.remove(tagCode);", "+\t\t}", "+\t}", "+\tTreeSet all = new TreeSet();", "+\tfor (Iterator iterator = tagsSet.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = (String) iterator.next();", "+\t\tNode method = (Node)tagsSet.get(key);", "+\t\tall.add(buildSend(method, true, false));", "+\t}", "+\tfor (Iterator iterator = set.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = (String) iterator.next();", "+\t\tall.add(key);", "+\t}", "+\tfor (Iterator iterator = set64.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = (String) iterator.next();", "+\t\tall.add(key);", "+\t}", "+\tfor (Iterator iterator = all.iterator(); iterator.hasNext();) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3f0b21e89ed8b7ea6e85ed0f7a23b88", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "d45fca5fe38816ea0e49d88992f8a36f2c79c3af", "commitAfterChange": "fc949910d259b2f09c2a6d209f57255840ca1162", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  void generateSends(boolean superCall)", "signatureAfterChange": "  void generateSends(boolean superCall)", "diff": ["-\tTreeMap set = new TreeMap();", "-\tTreeMap set64 = new TreeMap();", "+\tTreeMap<String, Node> set = new TreeMap<String, Node>();", "+\tTreeMap<String, Node> set64 = new TreeMap<String, Node>();", "-\tTreeMap tagsSet = new TreeMap();", "-\tfor (Iterator iterator = set.keySet().iterator(); iterator.hasNext();) {", "-\t\tString key = (String)iterator.next();", "-\t\tNode method = (Node)set.get(key);", "+\tTreeMap<String, Node> tagsSet = new TreeMap<String, Node>();", "+\tfor (Iterator<String> iterator = set.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = iterator.next();", "+\t\tNode method = set.get(key);", "-\tTreeMap all = new TreeMap();", "-\tfor (Iterator iterator = tagsSet.keySet().iterator(); iterator.hasNext();) {", "-\t\tString key = (String) iterator.next();", "-\t\tNode method = (Node)tagsSet.get(key);", "+\tTreeMap<String, Node> all = new TreeMap<String, Node>();", "+\tfor (Iterator<String> iterator = tagsSet.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = iterator.next();", "+\t\tNode method = tagsSet.get(key);", "-\tfor (Iterator iterator = set.keySet().iterator(); iterator.hasNext();) {", "-\t\tString key = (String) iterator.next();", "+\tfor (Iterator<String> iterator = set.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = iterator.next();", "-\tfor (Iterator iterator = set64.keySet().iterator(); iterator.hasNext();) {", "-\t\tString key = (String) iterator.next();", "+\tfor (Iterator<String> iterator = set64.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = iterator.next();", "-\tfor (Iterator iterator = all.keySet().iterator(); iterator.hasNext();) {", "-\t\tString key = (String)iterator.next();", "-\t\tNode method = (Node)all.get(key);", "+\tfor (Iterator<String> iterator = all.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = iterator.next();", "+\t\tNode method = all.get(key);", "-\t\tArrayList tags = new ArrayList();", "+\t\tArrayList<String> tags = new ArrayList<String>();", "-\t\tfor (Iterator iterator2 = tags.iterator(); iterator2.hasNext();) {", "-\t\t\tString tag = (String) iterator2.next();", "+\t\tfor (Iterator<String> iterator2 = tags.iterator(); iterator2.hasNext();) {", "+\t\t\tString tag = iterator2.next();"]}], "num": 48089}
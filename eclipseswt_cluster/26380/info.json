{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "223f25c6b45a10ace9eae507e8201820", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46dcf33f885d5424ac95c2b48784a53b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet212.java", "commitBeforeChange": "f14ef15d3f1d917d4a5d8ba8523de5d9f9ae0809", "commitAfterChange": "db3c279ff984d43542683f55cadcfbb74cb0fc56", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic static void main(String [] args)", "signatureAfterChange": " \t \tpublic static void main(String [] args)", "diff": ["-\t\timages = new Image[] {", "-\t\t\tdisplay.getSystemImage(SWT.ICON_QUESTION),", "-\t\t\tdisplay.getSystemImage(SWT.ICON_INFORMATION),", "-\t\t};", "-\t\toffsets = new int[images.length];", "-\t\tint lastOffset = 0;", "-\t\tfor (int i = 0; i < images.length; i++) {", "-\t\t\tint offset = text.indexOf(\"\\uFFFC\", lastOffset);", "-\t\t\toffsets[i] = offset;", "-\t\t\taddImage(images[i], offset);", "-\t\t\tlastOffset = offset + 1;", "-\t\t}", "-\t\t", "-\t\t// use a verify listener to keep the offsets up to date", "+\t\tint offset = text.indexOf(\"\\uFFFC\", 0);", "+\t\taddImage(display.getSystemImage(SWT.ICON_QUESTION), offset);", "+\t\toffset = text.indexOf(\"\\uFFFC\", offset + 1);", "+\t\taddImage(display.getSystemImage(SWT.ICON_INFORMATION), offset);", "+", "+\t\t// use a verify listener to dispose the images", "-\t\t\tpublic void verifyText(VerifyEvent e) {", "-\t\t\t\tint start = e.start;", "-\t\t\t\tint replaceCharCount = e.end - e.start;", "-\t\t\t\tint newCharCount = e.text.length();", "-\t\t\t\tfor (int i = 0; i < offsets.length; i++) {", "-\t\t\t\t\tint offset = offsets[i];", "-\t\t\t\t\tif (start <= offset && offset < start + replaceCharCount) {", "-\t\t\t\t\t\t// this image is being deleted from the text", "-\t\t\t\t\t\tif (images[i] != null && !images[i].isDisposed()) {", "-\t\t\t\t\t\t\timages[i].dispose();", "-\t\t\t\t\t\t\timages[i] = null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\toffset = -1;", "+\t\t\tpublic void verifyText(VerifyEvent event) {", "+\t\t\t\tif (event.start == event.end) return;", "+\t\t\t\tString text = styledText.getText(event.start, event.end - 1);", "+\t\t\t\tint index = text.indexOf('\\uFFFC');", "+\t\t\t\twhile (index != -1) {", "+\t\t\t\t\tStyleRange style = styledText.getStyleRangeAtOffset(event.start + index);", "+\t\t\t\t\tif (style != null) {", "+\t\t\t\t\t\tImage image = (Image)style.data;", "+\t\t\t\t\t\tif (image != null) image.dispose();", "-\t\t\t\t\tif (offset != -1 && offset >= start) offset += newCharCount - replaceCharCount;", "-\t\t\t\t\toffsets[i] = offset;", "+\t\t\t\t\tindex = text.indexOf('\\uFFFC', index + 1);", "+\t\t// draw images on paint event", "-\t\t\t\tGC gc = event.gc;", "-\t\t\t\tint start = style.start;", "-\t\t\t\tfor (int i = 0; i < offsets.length; i++) {", "-\t\t\t\t\tint offset = offsets[i];", "-\t\t\t\t\tif (start == offset) {", "-\t\t\t\t\t\tImage image = images[i];", "-\t\t\t\t\t\tint x = event.x;", "-\t\t\t\t\t\tint y = event.y + event.ascent - style.metrics.ascent;\t\t\t\t\t\t", "-\t\t\t\t\t\tgc.drawImage(image, x, y);", "+\t\t\t\tImage image = (Image)style.data;", "+\t\t\t\tif (!image.isDisposed()) {", "+\t\t\t\t\tint x = event.x;", "+\t\t\t\t\tint y = event.y + event.ascent - style.metrics.ascent;\t\t\t\t\t\t", "+\t\t\t\t\tevent.gc.drawImage(image, x, y);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t});", "+\t\tstyledText.addListener(SWT.Dispose, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\tStyleRange[] styles = styledText.getStyleRanges();", "+\t\t\t\tfor (int i = 0; i < styles.length; i++) {", "+\t\t\t\t\tStyleRange style = styles[i];", "+\t\t\t\t\tif (style.data != null) {", "+\t\t\t\t\t\tImage image = (Image)style.data;", "+\t\t\t\t\t\tif (image != null) image.dispose();", "-\t\t", "-\t\t\t\t\t\tint index = 0;", "-\t\t\t\t\t\twhile (index < offsets.length) {", "-\t\t\t\t\t\t\tif (offsets[index] == -1 && images[index] == null) break;", "-\t\t\t\t\t\t\tindex++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (index == offsets.length) {", "-\t\t\t\t\t\t\tint[] tmpOffsets = new int[index + 1];", "-\t\t\t\t\t\t\tSystem.arraycopy(offsets, 0, tmpOffsets, 0, offsets.length);", "-\t\t\t\t\t\t\toffsets = tmpOffsets;", "-\t\t\t\t\t\t\tImage[] tmpImages = new Image[index + 1];", "-\t\t\t\t\t\t\tSystem.arraycopy(images, 0, tmpImages, 0, images.length);", "-\t\t\t\t\t\t\timages = tmpImages;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\toffsets[index] = offset;", "-\t\t\t\t\t\timages[index] = image;", "-\t\t}", "-\t\tfor (int i = 0; i < images.length; i++) {", "-\t\t\tImage image = images[i];", "-\t\t\tif (image != null && !image.isDisposed()) {", "-\t\t\t\timage.dispose();", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdc25fe921917114967440e996283f96", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet217.java", "commitBeforeChange": "c3022d5e888294eefbcca8840ebf8589aa30895d", "commitAfterChange": "b98ea7a464087ec07a9ecaa5733dafe1daa04591", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \t \tpublic static void main(String [] args)", "signatureAfterChange": " \t \tpublic static void main(String [] args)", "diff": ["-\t\tcontrols = new Control[2];", "-\t\tcontrols[0] = button;", "+\t\tint offset = text.indexOf('\\uFFFC');", "+\t\taddControl(button, offset);", "-\t\tcontrols[1] = combo;", "-\t\toffsets = new int[controls.length];", "-\t\tint lastOffset = 0;", "-\t\tfor (int i = 0; i < controls.length; i++) {", "-\t\t\tint offset = text.indexOf(\"\\uFFFC\", lastOffset);", "-\t\t\toffsets[i] = offset;", "-\t\t\taddControl(controls[i], offsets[i]);", "-\t\t\tlastOffset = offset + 1;", "-\t\t}", "+\t\toffset = text.indexOf('\\uFFFC', offset + 1);", "+\t\taddControl(combo, offset);", "-\t\t// use a verify listener to keep the offsets up to date", "+\t\t// use a verify listener to dispose the controls", "-\t\t\tpublic void verifyText(VerifyEvent e) {", "-\t\t\t\tint start = e.start;", "-\t\t\t\tint replaceCharCount = e.end - e.start;", "-\t\t\t\tint newCharCount = e.text.length();", "-\t\t\t\tfor (int i = 0; i < offsets.length; i++) {", "-\t\t\t\t\tint offset = offsets[i];", "-\t\t\t\t\tif (start <= offset && offset < start + replaceCharCount) {", "-\t\t\t\t\t\t// this widget is being deleted from the text", "-\t\t\t\t\t\tif (controls[i] != null && !controls[i].isDisposed()) {", "-\t\t\t\t\t\t\tcontrols[i].dispose();", "-\t\t\t\t\t\t\tcontrols[i] = null;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\toffset = -1;", "+\t\t\tpublic void verifyText(VerifyEvent event) {", "+\t\t\t\tif (event.start == event.end) return;", "+\t\t\t\tString text = styledText.getText(event.start, event.end - 1);", "+\t\t\t\tint index = text.indexOf('\\uFFFC');", "+\t\t\t\tif (index != -1) {", "+\t\t\t\t\tStyleRange style = styledText.getStyleRangeAtOffset(event.start + index);", "+\t\t\t\t\tif (style != null) {", "+\t\t\t\t\t\tControl control = (Control)style.data;", "+\t\t\t\t\t\tif (control != null) control.dispose();", "-\t\t\t\t\tif (offset != -1 && offset >= start) offset += newCharCount - replaceCharCount;", "-\t\t\t\t\toffsets[i] = offset;", "-\t\t\t\tStyleRange style = event.style;", "-\t\t\t\tint start = style.start;", "-\t\t\t\tfor (int i = 0; i < offsets.length; i++) {", "-\t\t\t\t\tint offset = offsets[i];", "-\t\t\t\t\tif (start == offset) {", "-\t\t\t\t\t\tPoint pt = controls[i].getSize();", "-\t\t\t\t\t\tint x = event.x + MARGIN;", "-\t\t\t\t\t\tint y = event.y + event.ascent - 2*pt.y/3;", "-\t\t\t\t\t\tcontrols[i].setLocation(x, y);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\tControl control = (Control)event.style.data;", "+\t\t\t\tPoint pt = control.getSize();", "+\t\t\t\tint x = event.x + MARGIN;", "+\t\t\t\tint y = event.y + event.ascent - 2*pt.y/3;", "+\t\t\t\tcontrol.setLocation(x, y);"]}], "num": 26380}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5af5376d761d9e4b7422e6633d875043", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0322f26096ab0ae4410e3c99ca1bc0f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 258, "signatureBeforeChange": "  \tint accDoDefaultAction(int varChild)", "signatureAfterChange": " \tint accDoDefaultAction(int varChild)", "diff": ["+\t/* accDoDefaultAction([in] varChild) */", "-\t\tif (iaccessible == null) return COM.CO_E_OBJNOTCONNECTED;", "-\t\t// Currently, we don't let the application override this. Forward to the proxy.", "-\t\tint code = iaccessible.accDoDefaultAction(varChild);", "-\t\tif (code == COM.E_INVALIDARG) code = COM.DISP_E_MEMBERNOTFOUND; // proxy doesn't know about app childID", "+\t\tif (accessibleActionListeners.size() > 0) {", "+\t\t\tVARIANT v = getVARIANT(varChild);", "+\t\t\tif (v.vt != COM.VT_I4) return COM.E_INVALIDARG;", "+\t\t\tif (v.lVal == COM.CHILDID_SELF) return doAction(0);", "+\t\t}", "+\t\tint code = COM.DISP_E_MEMBERNOTFOUND;", "+\t\tif (iaccessible != null) {", "+\t\t\t/* If there were no action listeners, forward to the proxy. */", "+\t\t\tcode = iaccessible.accDoDefaultAction(varChild);", "+\t\t\tif (code == COM.E_INVALIDARG) code = COM.DISP_E_MEMBERNOTFOUND; // proxy doesn't know about app childID", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54fd39f3b471cd17271fcd43475f929f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 272, "signatureBeforeChange": " \tint get_accParent(int ppdispParent)", "signatureAfterChange": " \tint get_accParent(int ppdispParent)", "diff": ["-\t\tif (iaccessible == null) return COM.CO_E_OBJNOTCONNECTED;", "-\t\t// Currently, we don't let the application override this. Forward to the proxy.", "-\t\treturn iaccessible.get_accParent(ppdispParent);", "+\t\t// TODO: Do we need getParent API? Returning 'parent', or proxy's parent should be ok?", "+\t\tint code = COM.DISP_E_MEMBERNOTFOUND;", "+\t\tif (iaccessible != null) {", "+\t\t\t/* Currently, we don't expose this as API. Forward to the proxy. */", "+\t\t\tcode = iaccessible.get_accParent(ppdispParent);", "+\t\t} else if (parent != null) {", "+\t\t\t/* For lightweight accessibles, return the accessible's parent. */", "+\t\t\tparent.AddRef();", "+\t\t\tsetPtrVARIANT(ppdispParent, COM.VT_DISPATCH, parent.getAddress());", "+\t\t\tcode = COM.S_OK;", "+\t\t}", "+\t\treturn code;"]}], "num": 29654}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b04744aa0b1f1fb98c660f31c7eba11", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f86ceb2fccaf836fd45562900043ecd2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGeneratorUI.java", "commitBeforeChange": "c0eab291930878b5b0686e9f1e20996a4f2d6348", "commitAfterChange": "dc19d25aa6cd979d0249c3e9ed5cf50640a357ac", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t \tvoid updateNodes()", "signatureAfterChange": " \t \tvoid updateNodes()", "diff": ["-\t\ttry {", "-\t\t\tfor (int x = 0; x < xmls.length; x++) {", "-\t\t\t\tString xmlPath = xmls[x];", "-\t\t\t\tTreeItem xmlItem = new TreeItem(nodesTree, SWT.NONE);", "-\t\t\t\tString xmlText = xmlPath;", "-\t\t\t\tint index = xmlText.lastIndexOf(File.separatorChar);", "-\t\t\t\tif (index != -1) xmlText = xmlText.substring(index + 1);", "-\t\t\t\txmlItem.setText(xmlText);", "+\t\tfor (int x = 0; x < xmls.length; x++) {", "+\t\t\tString xmlPath = xmls[x];", "+\t\t\tString xmlSimplePath = xmlPath;", "+\t\t\tint index = xmlSimplePath.lastIndexOf(File.separatorChar);", "+\t\t\tif (index != -1) xmlSimplePath = xmlSimplePath.substring(index + 1);", "-\t\t\t\tHashtable extras = new Hashtable();", "-\t\t\t\tDocument extraDocument = getDocument(xmlText + \".extras\");", "-\t\t\t\tif (extraDocument != null) {", "-\t\t\t\t\tbuildLookup(extraDocument, extras);", "-\t\t\t\t}", "-", "-\t\t\t\tDocument document = getDocument(xmlPath);", "-\t\t\t\tNodeList list = document.getDocumentElement().getChildNodes();", "-\t\t\t\tfor (int i = 0; i < list.getLength(); i++) {", "-\t\t\t\t\taddChild(list.item(i), xmlItem, extras);", "-\t\t\t\t}", "+\t\t\tDocument document = getDocument(xmlPath);", "+\t\t\tif (document == null) {", "+\t\t\t\tSystem.out.println(\"Could not find: \" + xmlPath);", "+\t\t\t\tcontinue;", "-\t\t\tTreeColumn[] columns = nodesTree.getColumns();", "-\t\t\tfor (int i = 0; i < columns.length; i++) {", "-\t\t\t\tcolumns[i].pack();", "+\t\t\tHashtable extras = new Hashtable();", "+\t\t\tDocument extraDocument = getDocument(xmlSimplePath + \".extras\");", "+\t\t\tif (extraDocument != null) {", "+\t\t\t\tbuildLookup(extraDocument, extras);", "-\t\t} catch (Throwable e) {", "-\t\t\te.printStackTrace();", "+\t\t\t", "+\t\t\tTreeItem xmlItem = new TreeItem(nodesTree, SWT.NONE);", "+\t\t\txmlItem.setText(xmlSimplePath);", "+\t\t\tNodeList list = document.getDocumentElement().getChildNodes();", "+\t\t\tfor (int i = 0; i < list.getLength(); i++) {", "+\t\t\t\taddChild(list.item(i), xmlItem, extras);", "+\t\t\t}", "+\t\t}", "+\t\tTreeColumn[] columns = nodesTree.getColumns();", "+\t\tfor (int i = 0; i < columns.length; i++) {", "+\t\t\tcolumns[i].pack();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9b6063977e988d196e7ccf5f703f7bd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "53ee32abc6e0ceb944fd24146b98a2bb1061c238", "commitAfterChange": "378e7c04012a64eea22341dc9c6d795ff9bad710", "methodNumberBeforeChange": 254, "methodNumberAfterChange": 255, "signatureBeforeChange": " \tint get_accChild(int varChild, int ppdispChild)", "signatureAfterChange": " \tint get_accChild(int varChild, int ppdispChild)", "diff": ["+\t\tfinal int childID = osToChildID(v.lVal);", "+\t\tAccessible osAccessible = null;", "+\t\t\tif (code == COM.S_OK && control instanceof ToolBar) {", "+\t\t\t\tToolBar toolBar = (ToolBar) control;", "+\t\t\t\tfinal ToolItem item = toolBar.getItem(childID);", "+\t\t\t\tif (item != null && (item.getStyle() & SWT.DROP_DOWN) != 0) {", "+\t\t\t\t\tint /*long*/[] addr = new int /*long*/[1];", "+\t\t\t\t\tCOM.MoveMemory(addr, ppdispChild, OS.PTR_SIZEOF);", "+\t\t\t\t\tboolean found = false;", "+\t\t\t\t\tfor (int i = 0; i < children.size(); i++) {", "+\t\t\t\t\t\tAccessible accChild = (Accessible)children.elementAt(i);", "+\t\t\t\t\t\tif (accChild.item == item) {", "+\t\t\t\t\t\t\t/* ", "+\t\t\t\t\t\t\t * MSAA uses a new accessible for the child", "+\t\t\t\t\t\t\t * so we dispose the old and use the new.", "+\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\taccChild.dispose();", "+\t\t\t\t\t\t\taccChild.item = null;", "+\t\t\t\t\t\t\tfound = true;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tosAccessible = new Accessible(this, addr[0]);", "+\t\t\t\t\tosAccessible.item = item;", "+\t\t\t\t\tif (!found) {", "+\t\t\t\t\t\titem.addListener(SWT.Dispose, new Listener() {", "+\t\t\t\t\t\t\tpublic void handleEvent(Event e) {", "+\t\t\t\t\t\t\t\tfor (int i = 0; i < children.size(); i++) {", "+\t\t\t\t\t\t\t\t\tAccessible accChild = (Accessible)children.elementAt(i);", "+\t\t\t\t\t\t\t\t\tif (accChild.item == item) {", "+\t\t\t\t\t\t\t\t\t\taccChild.dispose();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t});", "+\t\t\t\t\t}", "+\t\t\t\t\tosAccessible.addAccessibleListener(new AccessibleAdapter() {", "+\t\t\t\t\t\tpublic void getName(AccessibleEvent e) {", "+\t\t\t\t\t\t\tif (e.childID == ACC.CHILDID_SELF) {", "+\t\t\t\t\t\t\t\tAccessibleEvent event = new AccessibleEvent(Accessible.this);", "+\t\t\t\t\t\t\t\tevent.childID = childID;", "+\t\t\t\t\t\t\t\tfor (int i = 0; i < accessibleListeners.size(); i++) {", "+\t\t\t\t\t\t\t\t\tAccessibleListener listener = (AccessibleListener) accessibleListeners.elementAt(i);", "+\t\t\t\t\t\t\t\t\tlistener.getName(event);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\te.result = event.result;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t});", "+\t\t\t\t}", "+\t\t\t}", "-\t\tevent.childID = osToChildID(v.lVal);", "+\t\tevent.childID = childID;", "+\t\tif (accessible == null) accessible = osAccessible;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b344689ed42434012b0b2db90c94894", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "c7a37ce473beb9045c99b97900ef561257b98af2", "commitAfterChange": "1a876750782f037ea9cd2cbd6b3dfc67d39d1b46", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "  \tstatic int atkTable_get_row_extent_at (int atkObject, int row, int column)", "signatureAfterChange": "  \tstatic int atkTable_get_row_extent_at (int atkObject, int row, int column)", "diff": ["-\t\tAccessible accessible = object.accessible;", "+\t\t\tAccessible accessible = object.accessible;", "-\t\t\tAccessibleTableEvent event = new AccessibleTableEvent(accessible);", "-\t\t\tevent.row = (int)/*64*/row;", "-\t\t\tevent.column = (int)/*64*/column;", "-\t\t\tfor (int i = 0, length = listeners.size(); i < length; i++) {", "-\t\t\t\tAccessibleTableListener listener = (AccessibleTableListener) listeners.elementAt(i);", "-\t\t\t\tlistener.getCell(event);", "-\t\t\t}", "-\t\t\tAccessible result = event.accessible;", "-\t\t\tif (result != null) {", "-\t\t\t\tlisteners = result.accessibleTableCellListeners;", "-\t\t\t\tAccessibleTableCellEvent cellEvent = new AccessibleTableCellEvent(result);", "-\t\t\t\tcellEvent.count = (int)/*64*/parentResult;", "-\t\t\t\tfor (int i = 0, length = listeners.size(); i < length; i++) {", "-\t\t\t\t\tAccessibleTableCellListener listener = (AccessibleTableCellListener) listeners.elementAt(i);", "-\t\t\t\t\tlistener.getRowSpan(cellEvent);", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleTableEvent event = new AccessibleTableEvent(accessible);", "+\t\t\t\tevent.row = (int)/*64*/row;", "+\t\t\t\tevent.column = (int)/*64*/column;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleTableListener listener = (AccessibleTableListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getCell(event);", "-\t\t\t\treturn cellEvent.count;", "+\t\t\t\tAccessible result = event.accessible;", "+\t\t\t\tif (result != null) {", "+\t\t\t\t\tlisteners = result.accessibleTableCellListeners;", "+\t\t\t\t\tlength = listeners.size();", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\tAccessibleTableCellEvent cellEvent = new AccessibleTableCellEvent(result);", "+\t\t\t\t\t\tcellEvent.count = (int)/*64*/parentResult;", "+\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\tAccessibleTableCellListener listener = (AccessibleTableCellListener) listeners.elementAt(i);", "+\t\t\t\t\t\t\tlistener.getRowSpan(cellEvent);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn cellEvent.count;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 61173}
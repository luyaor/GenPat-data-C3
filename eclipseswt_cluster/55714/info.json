{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d257b85b36941d37b7c8fc648e110f4e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7302170538e071e6d5c6fa7e6c8fe2a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "cbf30c52abe87cec4ed52641898abf66edc0ae82", "commitAfterChange": "73867f2cffacd6bfd26b673a67b443e1dc346e33", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  void handleDOMEvent (OleEvent e)", "signatureAfterChange": "  void handleDOMEvent (OleEvent e)", "diff": ["-\t\tboolean consume = false;", "-\t\tOleAutomation document = null;", "-\t\tOleAutomation htmlWindow2 = null;", "-\t\tOleAutomation htmlEvent = null;", "-\t\t/* get IHTMLDocument2 */", "-\t\trgdispid = auto.getIDsOfNames (new String[] {\"Document\"}); //$NON-NLS-1$", "-\t\tpVarResult = auto.getProperty (rgdispid[0]);", "-\t\tif (pVarResult == null || pVarResult.getType() == COM.VT_EMPTY) {", "-\t\t\tif (pVarResult != null) pVarResult.dispose ();", "-\t\t} else {", "-\t\t\tdocument = pVarResult.getAutomation ();", "-\t\t\tpVarResult.dispose ();", "-\t\t\t/* get IHTMLWindow2 */", "-\t\t\trgdispid = document.getIDsOfNames (new String[] {\"parentWindow\"}); //$NON-NLS-1$", "-\t\t\tpVarResult = document.getProperty (rgdispid[0]);", "-\t\t\tif (pVarResult == null || pVarResult.getType () == COM.VT_EMPTY) {", "-\t\t\t\tif (pVarResult != null) pVarResult.dispose ();", "-\t\t\t} else {", "-\t\t\t\thtmlWindow2 = pVarResult.getAutomation ();", "-\t\t\t\tpVarResult.dispose ();", "-\t\t\t\t/* get IHTMLEventObj */", "-\t\t\t\trgdispid = htmlWindow2.getIDsOfNames (new String[] {\"event\"}); //$NON-NLS-1$", "-\t\t\t\tpVarResult = htmlWindow2.getProperty (rgdispid[0]);", "-\t\t\t\tif (pVarResult == null || pVarResult.getType () == COM.VT_EMPTY) {", "-\t\t\t\t\tif (pVarResult != null) pVarResult.dispose ();", "-\t\t\t\t} else {", "-\t\t\t\t\thtmlEvent = pVarResult.getAutomation ();", "-\t\t\t\t\tpVarResult.dispose ();", "-\t\t\t\t\t/* check event's returnValue property */", "-\t\t\t\t\trgdispid = htmlEvent.getIDsOfNames (new String[] {\"returnValue\"}); //$NON-NLS-1$", "-\t\t\t\t\tpVarResult = htmlEvent.getProperty (rgdispid[0]);", "-\t\t\t\t\tconsume = pVarResult != null && pVarResult.getType () == OLE.VT_BOOL && !pVarResult.getBoolean ();", "-\t\t\t\t\tpVarResult.dispose ();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (htmlEvent != null) htmlEvent.dispose ();", "-\t\tif (htmlWindow2 != null) htmlWindow2.dispose ();", "-\t\tif (document != null) document.dispose ();", "+\t\trgdispid = event.getIDsOfNames (new String[] {PROPERTY_RETURNVALUE});", "+\t\tpVarResult = event.getProperty (rgdispid[0]);", "+\t\tboolean consume = pVarResult != null && pVarResult.getType () == OLE.VT_BOOL && !pVarResult.getBoolean ();", "+\t\tpVarResult.dispose ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "038a5460c604d0398233699fcb6f0606", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "3e7cd17b0f25301421344ef85e8eac75a5a11cf2", "commitAfterChange": "c3c7ae82584ac896878f0641f2f98ef29a465675", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  void handleDOMEvent (OleEvent e)", "signatureAfterChange": "  void handleDOMEvent (OleEvent e)", "diff": ["+\t\tboolean consume = false;", "+\t\tOleAutomation document = null;", "+\t\tOleAutomation htmlWindow2 = null;", "+\t\tOleAutomation htmlEvent = null;", "+\t\t/* get IHTMLDocument2 */", "+\t\trgdispid = auto.getIDsOfNames (new String[] {\"Document\"}); //$NON-NLS-1$", "+\t\tpVarResult = auto.getProperty (rgdispid[0]);", "+\t\tif (pVarResult == null || pVarResult.getType() == COM.VT_EMPTY) {", "+\t\t\tif (pVarResult != null) pVarResult.dispose ();", "+\t\t} else {", "+\t\t\tdocument = pVarResult.getAutomation ();", "+\t\t\tpVarResult.dispose ();", "+\t\t\t/* get IHTMLWindow2 */", "+\t\t\trgdispid = document.getIDsOfNames (new String[] {\"parentWindow\"}); //$NON-NLS-1$", "+\t\t\tpVarResult = document.getProperty (rgdispid[0]);", "+\t\t\tif (pVarResult == null || pVarResult.getType () == COM.VT_EMPTY) {", "+\t\t\t\tif (pVarResult != null) pVarResult.dispose ();", "+\t\t\t} else {", "+\t\t\t\thtmlWindow2 = pVarResult.getAutomation ();", "+\t\t\t\tpVarResult.dispose ();", "+\t\t\t\t/* get IHTMLEventObj */", "+\t\t\t\trgdispid = htmlWindow2.getIDsOfNames (new String[] {\"event\"}); //$NON-NLS-1$", "+\t\t\t\tpVarResult = htmlWindow2.getProperty (rgdispid[0]);", "+\t\t\t\tif (pVarResult == null || pVarResult.getType () == COM.VT_EMPTY) {", "+\t\t\t\t\tif (pVarResult != null) pVarResult.dispose ();", "+\t\t\t\t} else {", "+\t\t\t\t\thtmlEvent = pVarResult.getAutomation ();", "+\t\t\t\t\tpVarResult.dispose ();", "+\t\t\t\t\t/* check event's returnValue property */", "+\t\t\t\t\trgdispid = htmlEvent.getIDsOfNames (new String[] {\"returnValue\"}); //$NON-NLS-1$", "+\t\t\t\t\tpVarResult = htmlEvent.getProperty (rgdispid[0]);", "+\t\t\t\t\tconsume = pVarResult != null && pVarResult.getType () == OLE.VT_BOOL && !pVarResult.getBoolean ();", "+\t\t\t\t\tpVarResult.dispose ();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (htmlEvent != null) htmlEvent.dispose ();", "+\t\tif (htmlWindow2 != null) htmlWindow2.dispose ();", "+\t\tif (document != null) document.dispose ();", "+", "-\t\tint flags = OS.PM_NOREMOVE | OS.PM_NOYIELD;", "+\t\tint flags = OS.PM_NOYIELD | (consume ? OS.PM_REMOVE : OS.PM_NOREMOVE);", "+\t\t\tevent.dispose();", "+\t\t\treturn;", "+\t\t}", "+", "+\t\tif (consume) {", "+\t\t\t/* ", "+\t\t\t * an event should not be sent if another listener has vetoed the", "+\t\t\t * KeyDown (this is for non-character cases like arrow keys, etc.)", "+\t\t\t */", "-\t\t* keypress events are not received for Enter, Delete and Tab, so", "-\t\t* KeyDown events are sent for them here.  Set the KeyDown event's", "-\t\t* character field and IE's lastCharCode field for these keys so", "-\t\t* that the Browser's key events are consistent with other controls.", "+\t\t* keypress events are not received for Backspace, Enter, Delete and", "+\t\t* Tab, so KeyDown events are sent for them here.  Set the KeyDown", "+\t\t* event's character field and IE's lastCharCode field for these keys", "+\t\t* so that the Browser's key events are consistent with other controls.", "+\t\t\tcase SWT.BS: lastCharCode = keyEvent.character = SWT.BS; break;"]}], "num": 55714}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b41dc908ba60c2b01e2adc3c19447beb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8320ec6d1223c89073d8893a16e5d214", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "d2b2731da124108eb5bccfe6363ec342d70dfbc1", "commitAfterChange": "6fa64c0ca137224ae52d6423153f9854a4e2c074", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 54, "signatureBeforeChange": "  void releaseWidget ()", "signatureAfterChange": " \t void releaseWidget ()", "diff": ["-void releaseWidget () {", "-\tint hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "-\tint columnCount = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "-\tif (columnCount == 1 && columns [0] == null) columnCount = 0;", "-\tint itemCount = OS.SendMessage (handle, OS.LVM_GETITEMCOUNT, 0, 0);", "-\t/*", "-\t* Feature in Windows 98.  When there are a large number", "-\t* of columns and items in a table (>1000) where each", "-\t* of the subitems in the table has a string, it is much", "-\t* faster to delete each item with LVM_DELETEITEM rather", "-\t* than using LVM_DELETEALLITEMS.  The fix is to detect", "-\t* this case and delete the items, one by one.  The fact", "-\t* that the fix is only necessary on Windows 98 was", "-\t* confirmed using version 5.81 of COMCTL32.DLL on both", "-\t* Windows 98 and NT.", "-\t*", "-\t* NOTE: LVM_DELETEALLITEMS is also sent by the table", "-\t* when the table is destroyed.", "-\t*/\t", "-\tif (OS.IsWin95 && columnCount > 1) {", "-\t\t/* Turn off redraw and leave it off */", "-\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);", "-\t\tfor (int i=itemCount-1; i>=0; --i) {", "-\t\t\tTableItem item = items [i];", "-\t\t\tignoreSelect = ignoreShrink = true;", "-\t\t\tOS.SendMessage (handle, OS.LVM_DELETEITEM, i, 0);", "-\t\t\tignoreSelect = ignoreShrink = false;", "-\t\t\tif (item != null && !item.isDisposed ()) item.releaseResources ();", "-\t} else {\t", "-\t\tfor (int i=0; i<itemCount; i++) {", "-\t\t\tTableItem item = items [i];", "-\t\t\tif (item != null && !item.isDisposed ()) item.releaseResources ();", "-\t\t}", "+\t", "+void releaseWidget () {", "+\tsuper.releaseWidget ();", "-\titems = null;", "-\tfor (int i=0; i<columnCount; i++) {", "-\t\tTableColumn column = columns [i];", "-\t\tif (!column.isDisposed ()) column.releaseResources ();", "-\t}", "-\tcolumns = null;", "+\t\tint hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "-\tsuper.releaseWidget ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7d29dd3e37222b92f80db1e90f1f84d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "e4e3f5ea326d5f6ec575cb787dc8e069294c0d2e", "commitAfterChange": "9777615562750d7c9ab92d6f2c3575ace0e1c242", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  LRESULT WM_SIZE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_SIZE (int wParam, int lParam)", "diff": ["-", "-\t/*", "-\t* Feature in Windows.  When a tool bar that contains", "-\t* separators is wrapped, under certain circumstances,", "-\t* Windows redraws the entire tool bar unnecessarily", "-\t* when resized and no item moves.  Whether the entire", "-\t* toolbar is damaged or not seems to depend on the size", "-\t* of the tool bar and the position of the separators.", "-\t* The fix is to ensure that the newly exposed areas are", "-\t* always damaged, and avoid the redraw when no tool item", "-\t* moves.", "-\t*/", "-\tRECT [] rects = null;", "-\tint rgn = 0, oldCount = 0;", "-\tboolean fixRedraw = drawCount == 0 &&", "-\t\t(style & SWT.WRAP) != 0 &&", "-\t\tOS.IsWindowVisible (handle) &&", "-\t\tOS.SendMessage (handle, OS.TB_GETROWS, 0, 0) != 1;", "-\tif (fixRedraw) {", "-\t\trgn = OS.CreateRectRgn (0, 0, 0, 0);", "-\t\tOS.GetUpdateRgn (handle, rgn, false);", "-\t\toldCount = OS.SendMessage (handle, OS.TB_BUTTONCOUNT, 0, 0);", "-\t\trects = new RECT [oldCount];", "-\t\tfor (int i=0; i<oldCount; i++) {", "-\t\t\trects [i] = new RECT ();", "-\t\t\tOS.SendMessage (handle, OS.TB_GETITEMRECT, i, rects [i]);", "-\t\t}", "-\t}", "-", "-", "-\tif (fixRedraw) {", "-\t\tint newCount = OS.SendMessage (handle, OS.TB_BUTTONCOUNT, 0, 0);", "-\t\tif (newCount == oldCount) {", "-\t\t\tint index = 0;", "-\t\t\tRECT rect = new RECT ();", "-\t\t\twhile (index < newCount) {", "-\t\t\t\tOS.SendMessage (handle, OS.TB_GETITEMRECT, index, rect);", "-\t\t\t\tif (!OS.EqualRect (rects [index], rect)) break;", "-\t\t\t\tindex++;", "-\t\t\t}", "-\t\t\tif (index == newCount) {", "-\t\t\t\tOS.ValidateRect (handle, null);", "-\t\t\t\tOS.InvalidateRgn (handle, rgn, false);", "-\t\t\t}", "-\t\t}", "-\t\tOS.DeleteObject (rgn);", "-\t}", "-"]}], "num": 38322}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c69cd1d0a36c72299598424ac163f525", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c70c11f6d4484d13618fcf246855f9a4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "ced6309d83136191307f59b1d7ca67538883169e", "commitAfterChange": "ec4463e5809457fec0c4e8fa95d96c7900df01c5", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  void setBounds (int x, int y, int width, int height, int flags)", "signatureAfterChange": "  void setBounds (int x, int y, int width, int height, int flags, boolean defer)", "diff": ["-void setBounds (int x, int y, int width, int height, int flags) {", "+void setBounds (int x, int y, int width, int height, int flags, boolean defer) {", "-\t\tsuper.setBounds (x, y, width, height, flags);", "+\t\tswFlags = OS.SW_RESTORE;", "+\t} else {", "+\t\tif (OS.IsIconic (handle) || OS.IsZoomed (handle)) {", "+\t\t\tsetPlacement (x, y, width, height, flags);", "+\t\t\treturn;", "+\t\t}", "-\tif (OS.IsIconic (handle) || OS.IsZoomed (handle)) {", "-\t\tsetPlacement (x, y, width, height, flags);", "-\t\treturn;", "+\tforceResize ();", "+\tRECT rect = new RECT ();", "+\tOS.GetWindowRect (handle, rect);", "+\tif ((OS.SWP_NOMOVE & flags) == 0) {", "+\t\tmoved = rect.left != x || rect.top != y;", "-\tsuper.setBounds (x, y, width, height, flags);", "+\tif ((OS.SWP_NOSIZE & flags) == 0) {", "+\t\tresized = rect.right - rect.left != width || rect.bottom - rect.top != height;", "+\t}", "+\tsuper.setBounds (x, y, width, height, flags, defer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06f8572899df24cad8f87968c617c63a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "6215640175ccfe897f3840a8201a886b754fe47e", "commitAfterChange": "45ceafadc60325534082e286f4aafee627d1de0d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 10, "signatureBeforeChange": "  static String gnome_getMimeType(String name)", "signatureAfterChange": "  private static String gnome_getMimeTypeCommand(String mimeType, boolean gnomeExpectUri[])", "diff": ["+private static String gnome_getMimeTypeCommand(String mimeType, boolean gnomeExpectUri[]) {", "+\tString command = null;", "+\tGnomeVFSMimeApplication application = new GnomeVFSMimeApplication();", "+\tbyte[] mimeTypeBuffer = Converter.wcsToMbcs(null, mimeType+'\\0');", "+\tint ptr = GNOME.gnome_vfs_mime_get_default_application(mimeTypeBuffer);", "+\tif (ptr != 0) {", "+\t\tGNOME.memmove(application, ptr, GnomeVFSMimeApplication.sizeof);", "+\t\tint\tlength = OS.strlen(application.command);", "+\t\tbyte[] buffer = new byte[length];", "+\t\tOS.memmove(buffer, application.command, length);", "+\t\tcommand = new String(Converter.mbcsToWcs(null, buffer));", "+\t\tgnomeExpectUri[0] = application.expects_uris == GNOME.GNOME_VFS_MIME_APPLICATION_ARGUMENT_TYPE_URIS;", "+\t\tGNOME.gnome_vfs_mime_application_free(ptr);", "+\treturn command;", "-", "-static String gnome_getMimeType(String name) {", "-\t/* Use the character encoding for the default locale */", "-\tbyte [] nameBuffer = Converter.wcsToMbcs (null, name, true);", "-\tint ptr = GNOME.gnome_mime_type(nameBuffer);", "-\tif (ptr == 0) return null;", "-\tint length = OS.strlen(ptr);", "-\tbyte[] mimeBuffer = new byte[length];", "-\tOS.memmove(mimeBuffer, ptr, length);", "-\t/* Use the character encoding for the default locale */", "-\treturn new String(Converter.mbcsToWcs(null, mimeBuffer));", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1096983c3721ec63879d209480c9c30", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 26, "signatureBeforeChange": " void setImageHeight(int value)", "signatureAfterChange": " Rectangle getHierarchyIndicatorRect()", "diff": ["+ */", "+Rectangle getHierarchyIndicatorRect() {", "+\tint itemHeight = getItemHeight();", "+\tImage hierarchyImage;", "+\tRectangle imageBounds;", "+\tif (hierarchyIndicatorRect == null && itemHeight != -1) {", "+\t\thierarchyImage = getCollapsedImage();", "+\t\tif (hierarchyImage != null) {", "+\t\t \timageBounds = hierarchyImage.getBounds();", "+\t\t}", "+\t\telse {", "+\t\t\timageBounds = new Rectangle(0, 0, 0, 0);", "+\t\t}", "+\t\thierarchyIndicatorRect = new Rectangle(", "+\t\t\t0,", "+\t\t\t(itemHeight - imageBounds.height) / 2 + (itemHeight - imageBounds.height) % 2,", "+\t\t\timageBounds.width,", "+\t\t\timageBounds.height);", "+\treturn hierarchyIndicatorRect;", "+}", "-}", "-void setImageHeight(int value) {", "-\timageHeight = value;", "-\titemHeight = Math.max(fontHeight, imageHeight) + 2 * getCellPadding();", "-}"]}], "num": 56933}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e8d3896218267aa383a329293bee22c2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2875dbb5b9162610be47e72c2273724", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "4e692e594829c957204f8759719ba27bd5c7bed5", "commitAfterChange": "1bd4a6d238f246b1a33b1e165b82bcbcf963d2f9", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public MenuItem [] getItems ()", "signatureAfterChange": " public MenuItem [] getItems ()", "diff": ["-\tSystem.arraycopy (items, 0, result, 0, count);", "+\tint index = 0;", "+\tif (items != null) {", "+\t\tfor (int i = 0; i < count; i++) {", "+\t\t\tMenuItem item = items [i];", "+\t\t\tif (item != null && !item.isDisposed ()) {", "+\t\t\t\tresult [index++] = item;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (index != result.length) {", "+\t\tMenuItem [] newItems = new MenuItem[index];", "+\t\tSystem.arraycopy(result, 0, newItems, 0, index);", "+\t\tresult = newItems;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12ec758f0b2c6de2b07c118f3c84c3f1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/TableTab.java", "commitBeforeChange": "d9b9d0d2713c9aec7b44f9284b479d5ef42ff141", "commitAfterChange": "e590ab6390d08cdebdcebcbdc01b65b6662d80d9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " \tvoid createExampleWidgets ()", "signatureAfterChange": " \tvoid createExampleWidgets ()", "diff": ["-\t\tif (multipleColumns.getSelection()) {", "+\t\tboolean multi = multipleColumns.getSelection();", "+\t\tif (multi) {", "+\t\t\t\ttableColumn.setImage(instance.images [i % 3]);", "-\t\t\titem.setImage (instance.images [i % 3]);", "+\t\t\tif (multi) {", "+\t\t\t\tfor (int j = 0; j < columnTitles.length; j++) {", "+\t\t\t\t\titem.setImage(j, instance.images [i % 3]);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\titem.setImage(instance.images [i % 3]);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56f42d7b55fa277e6b455c2b641b72cd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "3539392530d589ce910e4278acc811f43b907fc4", "commitAfterChange": "b4b61aff0cb1c1ac045f8af3c9d9b60914e3dc14", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 42, "signatureBeforeChange": " public void setItems (String [] items)", "signatureAfterChange": " public void setItems (String [] items)", "diff": ["-\tfor (int i= 0; i < items.length; i++)", "-\t\tfData.add(items[i]);", "-\tint ensureSize= fData.size();", "-\tensureSize(ensureSize);", "-\tinvalidateRange(0, ensureSize);", "+\tint count= items.length;", "+\tint[] ids= new int[count];", "+\tfor (int i= 0; i < count; i++) {", "+\t\tPair p= new Pair(items[i]);", "+\t\tfData.add(p);", "+\t\tids[i]= p.fId;", "+\t}", "+\tOS.AddDataBrowserItems(handle, OS.kDataBrowserNoItem, ids.length, ids, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d032a99524182cc986d3028f5efd6ab9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/FormLayout.java", "commitBeforeChange": "7e2ba37a9ab709064fb7c30a21b2171523d931fb", "commitAfterChange": "44709f164493be891400040d2461b8e125354543", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  Point layout (Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)", "signatureAfterChange": "  Point layout (Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)", "diff": ["+\tRectangle [] bounds = null;", "-\t\t\tchild.setBounds (x + x1, y + y1, x2 - x1, y2 - y1);", "+\t\t\tif (bounds == null) bounds = new Rectangle [children.length];", "+\t\t\tbounds [i] = new Rectangle (x + x1, y + y1, x2 - x1, y2 - y1);", "+\tif (move) {", "+\t\tfor (int i=0; i<children.length; i++) {", "+\t\t\tchildren [i].setBounds (bounds [i]);\t\t", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57508c8014118d25b36448b778108f8d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/AddressBook.java", "commitBeforeChange": "a1b8e263bdc5de05e234702103468991c758144f", "commitAfterChange": "aedecefc76a9dffeb42563cbe0d758ba66e1f0ea", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " private void sort(int column)", "signatureAfterChange": " private void sort(int column)", "diff": ["-\tfor (int i = 0; i < data.length; i++) {", "-\t\titems[i].setText(data[i]);", "+\tif (lastSortColumn != column) {", "+\t\tfor (int i = 0; i < data.length; i++) {", "+\t\t\titems[i].setText(data[i]);", "+\t\t}", "+\t\tlastSortColumn = column;", "+\t} else {", "+\t\t// reverse order if the current column is selected again", "+\t\tint j = data.length -1;", "+\t\tfor (int i = 0; i < data.length; i++) {", "+\t\t\titems[i].setText(data[j--]);", "+\t\t}", "+\t\tlastSortColumn = -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ffb26f6dfa324005141ca24e3ef3775", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "7c921fde1a3e57d6090fd86368a01a1c5424c9a7", "commitAfterChange": "828d864b1718709d086376d079e5b86cae8605c6", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 57, "signatureBeforeChange": " public int [] getSelectionIndices ()", "signatureAfterChange": " public int [] getSelectionIndices ()", "diff": ["-\t\tfor (int start=0, end=count - 1; start<=end; start++, end--) {", "-\t\t\tint temp = result [start];", "-\t\t\tresult [start] = result [end] - 1;", "-\t\t\tresult [end] = temp - 1;", "+\t\tif (sortDirection == SWT.DOWN && sortColumn != null) {", "+\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\tresult [i] = getIndex (result [i]);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tfor (int start=0, end=count - 1; start<=end; start++, end--) {", "+\t\t\t\tint temp = result [start];", "+\t\t\t\tresult [start] = getIndex (result [end]);", "+\t\t\t\tresult [end] = getIndex (temp);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de65cbf02b7b4ce94cdfca8f5bbf20f1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "08ed4d34906d3cb004511badd9a3286f04d40b7a", "commitAfterChange": "3587c6fb9068182d41169c6c886f0d5faa0219e6", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 34, "signatureBeforeChange": " public void setSelection (TreeItem [] items)", "signatureAfterChange": " public void setSelection (TreeItem [] items)", "diff": ["-\tcheckWidget();", "-\tdeselectAll();", "-\tblockSignal (handle, SWT.Selection);", "-\tint index = 0, length = items.length;", "-\twhile (index < length) {", "-\t\tTreeItem item = items [index];", "-\t\tif (item != null) {", "-\t\t\tif (item.isDisposed ()) break;", "-\t\t\tOS.gtk_ctree_select (handle, item.handle);", "-\t\t}", "-\t\tindex++;", "+\tcheckWidget();", "+\tint selection = OS.gtk_tree_view_get_selection(handle);", "+\tblockSignal(handle, SWT.Selection);", "+\tOS.gtk_tree_selection_unselect_all(selection);", "+\tfor (int i = 0; i < items.length; i++) {", "+\t\tif (items[i].isDisposed ()) break;", "+\t\tOS.gtk_tree_selection_select_iter (selection, items[i].handle);", "-\tunblockSignal (handle, SWT.Selection);", "-\tindex = 0;", "-\twhile (index < length) {", "-\t\tTreeItem item = items [index];", "-\t\tif (item != null && !item.isDisposed ()) {", "-\t\t\tshowItem (item);", "-\t\t\treturn;", "-\t\t}", "-\t\tindex++;", "-\t}", "+\tunblockSignal(handle, SWT.Selection);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0af5f4a94737719baf79a7837137fe5d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_TextLayout.java", "commitBeforeChange": "57f622faa0149851e15aa3fb09d20bed6fe19df9", "commitAfterChange": "0d507e89e6704c59427d9b6b7f6119a9ac58cf88", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "   public void test_getLineOffsets()", "signatureAfterChange": "  public void test_getLineOffsets()", "diff": ["+\t", "+\t//Bug 241482 comment 64", "+\tlayout.setText(\"\\nAB\");", "+    layout.setSegments(new int[] {0, 1, 3});", "+    expected = new int[] {0, 1, 3};", "+    offsets = layout.getLineOffsets();", "+    for (int i = 0; i < offsets.length; i++) {", "+        assertEquals(\" i = \" + i, expected[i], offsets[i]);    ", "+    }", "+    ", "+    /* wrong: internal testing */", "+//    text = \"AB\";", "+//    int textLength = text.length();", "+//    layout.setText(text);", "+//    String[] messages = {\"no segments\", \"segments\", \"segments (duplicate at 0)\", \"segments (duplicate at 1)\", \"segments (duplicate at 2)\"};", "+//    int[][] segments = {null, {0, 1, 2}, {0, 0, 1, 2}, {0, 1, 1, 2}, {0, 1, 2, 2}};", "+//    int[][] translatedOffsets = {{0, 1, 2}, {1, 3, 5}, {2, 4, 6}, {1, 4, 6}, {1, 3, 6}};", "+//    int[][] untranslatedOffsets = {{0, 1, 2}, {0, 0, 1, 1, 2, 2}, {0, 0, 0, 1, 1, 2, 2}, {0, 0, 1, 1, 1, 2, 2}, {0, 0, 1, 1, 2, 2, 2}};", "+//    for (int i = 0; i < segments.length; i++) {", "+//        layout.setSegments(segments[i]);", "+//        layout.getBounds();", "+//        for (int j = 0; j <= textLength; j++) { ", "+//            assertEquals(messages[i] + \" j = \" + j, translatedOffsets[i][j], layout.translateOffset(j));", "+//        }", "+//        for (int j = 0, n = layout.getSegments() == null ? 0 : textLength + layout.getSegments().length; j < n; j++) { ", "+//            assertEquals(messages[i] + \" j = \" + j, untranslatedOffsets[i][j], layout.untranslateOffset(j));", "+//        }", "+//    }", "+    "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e727706ff98c111ff53a172affd8063c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Icon Exe/org/eclipse/swt/tools/internal/IconExe.java", "commitBeforeChange": "105560e878ccce9b41b522bd40df22e142961f14", "commitAfterChange": "b96b06c10d6754464e0cdd7982d566a638346dca", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static void main(String[] args)", "signatureAfterChange": " \tpublic static void main(String[] args)", "diff": ["-\t\tif (args.length != 2) {", "+\t\tif (args.length < 2) {", "-\t\t\tImageData[] data = loader.load(args[1]);", "+\t\t\tImageData[] data = null;", "+\t\t\t", "+\t\t\tif (args.length == 2) {", "+\t\t\t\t/* ICO case */", "+\t\t\t\tdata = loader.load(args[1]);", "+\t\t\t} else {", "+\t\t\t\t/* BMP case - each following argument is a single BMP file", "+\t\t\t\t * BMP is handled for testing purpose only. The ICO file is the", "+\t\t\t\t * official Microsoft format for image resources.", "+\t\t\t\t */", "+\t\t\t\tdata = new ImageData[args.length - 1];", "+\t\t\t\tfor (int i = 1; i < args.length; i++) {", "+\t\t\t\t\tImageData[] current = loader.load(args[i]);", "+\t\t\t\t\tdata[i - 1] = current[0];", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a83c004ca74f2dacd11677992c5f40fe", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Tree.java", "commitBeforeChange": "9a9dd8754f7df7c894a540a8f31a63af6610f554", "commitAfterChange": "4bf442d9fa0efe7ae5c683a478050fdd1352dbf0", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  public void test_getItems()", "signatureAfterChange": "  public void test_getItems()", "diff": ["+\tTreeItem [][] items = new TreeItem [cases.length][];", "+\tfor (int j = 0; j < cases.length; j++) {", "+\t\titems [j] = new TreeItem [cases [j]];", "+\t}", "+\t\t\titems [j][i] = ti;", "-\t\tassertEquals(cases[j], tree.getItems().length);", "+\t\tassertEquals(items[j], tree.getItems());", "-\t\tTreeItem[] items = tree.getItems();", "-\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\tassertEquals(String.valueOf(i), items[i].getText());", "+\t\tTreeItem[] items2 = tree.getItems();", "+\t\tfor (int i = 0; i < items2.length; i++) {", "+\t\t\tassertEquals(String.valueOf(i), items2[i].getText());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c4ceda4cd33c48cf41a7ed7d6bbf151", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "f2afadf3ecbde81e97161d4a80435b171827f960", "commitAfterChange": "cf34d636662ca6587452948946037bfb3d522d9c", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["-\t\tint offset = 0;", "-\t\tfor (int y = 0; y < height; y++) {", "+\t\tfor (int y = 0, offset = 0; y < height; y++) {", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t/*", "+\t\t* TODO is it impossible to retrieve the RGB values when alpha is zero? If this is true", "+\t\t* then this code is necessary because the transparent pixel needs the RGB values to work. ", "+\t\t*/", "+\t\tif (transparentPixel != -1) {", "+\t\t\tbyte[] alphaData = data.alphaData = new byte[width * height];", "+\t\t\tfor (int y = 0, offset = 3, alphaOffset = 0; y < height; y++) {", "+\t\t\t\tfor (int x = 0; x < width; x++, offset += 4) {", "+\t\t\t\t\talphaData[alphaOffset++] = srcData[offset];", "+\t\tdata.transparentPixel = transparentPixel;", "-\tdata.transparentPixel = transparentPixel;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec4dcb259b19502ff410a619d0968d4e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "7c921fde1a3e57d6090fd86368a01a1c5424c9a7", "commitAfterChange": "828d864b1718709d086376d079e5b86cae8605c6", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  void fixSelection (int index, boolean add)", "signatureAfterChange": "  void fixSelection (int index, boolean add)", "diff": ["-\tint newCount = 0;", "-\tboolean fix = false;", "+\tint newCount = 0, offset = add ? 1 : -1;", "+\tboolean fix = false, down = sortDirection == SWT.DOWN && sortColumn != null;", "-\t\t\tselection [newIndex] = selection [i] + 1;", "-\t\t\tif (selection [newIndex] - 1 >= index) {", "-\t\t\t\tselection [newIndex] += add ? 1 : -1;", "+\t\t\tint sel = selection [i];", "+\t\t\tselection [newIndex] = getId (sel);", "+\t\t\tif ((down && sel < index) || (!down && sel >= index)) {", "+\t\t\t\tselection [newIndex] += offset;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f395d5dab7202c1b277b876c7d6cd45", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/coolbar/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "33c33a3bdd089f30da56054b30ca1637d9ac777a", "commitAfterChange": "f1c4df27b1140c8819632e25c9c738e0a24ed741", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "\r public int[] getItemOrder ()", "signatureAfterChange": "\r public int[] getItemOrder ()", "diff": ["-\tcheckWidget();\r", "-\tint[] indices = new int[originalItems.length];\r", "-\tfor (int i = 0; i < originalItems.length; i++) {\r", "-\t\tint index = indexOf(originalItems[i]);\r", "-\t\tif (index < 0 || index >= indices.length) error(SWT.ERROR_CANNOT_GET_ITEM);\r", "-\t\tindices [index] = i;\r", "+\tcheckWidget ();\r", "+\tint count = getItemCount ();\r", "+\tint [] indices = new int [count];\r", "+\tcount = 0;\r", "+\tfor (int i = 0; i < items.length; i++) {\r", "+\t\tfor (int j = 0; j < items[i].length; j++) {\r", "+\t\t\tCoolItem item = items[i][j];\r", "+\t\t\tint index = 0;\r", "+\t\t\twhile (index<originalItems.length) {\r", "+\t\t\t\tif (originalItems [index] == item) break;\r", "+\t\t\t\tindex++;\t\r", "+\t\t\t}\r", "+\t\t\tif (index == originalItems.length) error (SWT.ERROR_CANNOT_GET_ITEM);\r", "+\t\t\tindices [count++] = index;\r", "+\t\t}\r", "-\treturn indices;\t\r", "+\treturn indices;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9ca2574219f4142f5d9428fe9fe5583", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "7c921fde1a3e57d6090fd86368a01a1c5424c9a7", "commitAfterChange": "828d864b1718709d086376d079e5b86cae8605c6", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 54, "signatureBeforeChange": " public TableItem [] getSelection ()", "signatureAfterChange": " public TableItem [] getSelection ()", "diff": ["-\t\tint offset = id [0] + (count - 1) * 4;", "-\t\tfor (int i=0; i<count; i++, offset -= 4) {", "-\t\t\tOS.memmove (id, offset, 4);", "-\t\t\tresult [i] = _getItem (id [0] - 1);", "+\t\tif (sortDirection == SWT.DOWN && sortColumn != null) {", "+\t\t\tint offset = id [0];", "+\t\t\tfor (int i=0; i<count; i++, offset += 4) {", "+\t\t\t\tOS.memmove (id, offset, 4);", "+\t\t\t\tresult [i] = _getItem (getIndex (id [0]));", "+\t\t\t}", "+\t\t} else {", "+\t\t\tint offset = id [0] + (count - 1) * 4;", "+\t\t\tfor (int i=0; i<count; i++, offset -= 4) {", "+\t\t\t\tOS.memmove (id, offset, 4);", "+\t\t\t\tresult [i] = _getItem (getIndex (id [0]));", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ca5389babab112ef475bc21f4521762", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "bbe34f2e9f30dc6618286a73fece569ceb79a3e8", "commitAfterChange": "e352283006dccad1eb5102d4387c1f8e07732a91", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 33, "signatureBeforeChange": " public int[] getColumnOrder ()", "signatureAfterChange": " public int[] getColumnOrder ()", "diff": ["-\t//TODO", "+\tfor (int i = 0; i < order.length; i++) {", "+\t\tTreeColumn column = columns [i];", "+\t\tint index = OS.IList_IndexOf (gvColumns, column.handle);", "+\t\torder [index] = i;\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af1099eee23eb63c5f114d70078f35ba", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "9d76923ef4c61a2ac65732c7dc4442df8d1594bc", "commitAfterChange": "34830c5ea1d64c3a02443211fb13e925cac126f1", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public MacGenerator(String[] xml)", "signatureAfterChange": " \t public MacGenerator(String[] xmls)", "diff": ["-public MacGenerator(String[] xml) {", "-\tthis.xmls = xml;\t", "-}", "+public MacGenerator(String[] xmls) {", "+\tthis.xmls = xmls;", "+\tdocuments = new Document[xmls.length];", "+\textraAttributes = new Hashtable[xmls.length];", "+\tfor (int i = 0; i < xmls.length; i++) {", "+\t\tdocuments[i] = getDocument(xmls[i]);", "+\t\textraAttributes[i] = loadExtraAttributes(xmls[i]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bee1c6474a80dadb76042f7a9646273b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/CTable.java", "commitBeforeChange": "47941f79678960d02999a65234287381246742c5", "commitAfterChange": "5f2f5aec5599c528d499f3ec4a01b04385f15e52", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 147, "signatureBeforeChange": " void selectItem (CTableItem item, boolean addToSelection)", "signatureAfterChange": " void selectItem (CTableItem item, boolean addToSelection)", "diff": ["+\t\tfor (int i = 0; i < oldSelectedItems.length; i++) {", "+\t\t\toldSelectedItems[i].getAccessible(getAccessible(), 0).selectionChanged();", "+\t\t}", "+", "+\titem.getAccessible(getAccessible(), 0).selectionChanged();", "+\tgetAccessible().selectionChanged();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40dc78599f9648d3311cf7dbaf1f95b6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "3f452be6b0a9de0c5ecf04a918f5aea5af283a03", "commitAfterChange": "83ce5345a288d964929f5ae612ff7f68685f8832", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  void clearAll (TreeItem parentItem, boolean all)", "signatureAfterChange": "  void clearAll (TreeItem parentItem, boolean all)", "diff": ["-//\tboolean update = !inClearAll;", "-//\tint count = getItemCount (parentItem);", "-//\tif (count == 0) return;", "-//\tinClearAll = true;", "-//\tint [] ids = parentItem == null ? childIds : parentItem.childIds;", "-//\tfor (int i=0; i<count; i++) {", "-//\t\tTreeItem item = _getItem (ids [i], false);", "-//\t\tif (item != null) {", "-//\t\t\titem.clear ();", "-//\t\t\tif (all) clearAll (item, true);", "-//\t\t}", "-//\t}", "-//\tif (update) {", "-//\t\tOS.UpdateDataBrowserItems (handle, 0, 0, null, OS.kDataBrowserItemNoProperty, OS.kDataBrowserNoItem);", "-//\t\tinClearAll = false;", "-//\t}", "+\tint count = getItemCount (parentItem);", "+\tif (count == 0) return;", "+\tTreeItem [] children = parentItem == null ? items : parentItem.items; ", "+\tfor (int i=0; i<count; i++) {", "+\t\tTreeItem item = children [i];", "+\t\tif (item != null) {", "+\t\t\titem.clear ();", "+\t\t\t((NSOutlineView) view).reloadItem_ (item.handle);", "+\t\t\tif (all) clearAll (item, true);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c278287d6aeaa541504bc25e3b91b064", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "cb8ec8bae2f2d095e913b8a04e9bd0e7a59636e3", "commitAfterChange": "648a901ebdb6d910c60f231042a5673c07edfc72", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["+\tif (msg == SWT_TASKBARCREATED) {", "+\t\tif (tray != null) {", "+\t\t\tTrayItem [] items = tray.items;", "+\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\tTrayItem item = items [i];", "+\t\t\t\tif (item != null) item.recreate ();", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0447548a065b5aabafe10a6808d6d987", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void pack()", "signatureAfterChange": " public void pack ()", "diff": ["- */", "-public void pack() {", "-\tcheckWidget();", "-\tTable parent = getParent();", "-\tint index = parent.indexOf(this);", "-\tif (getIndex() != TableColumn.FILL && index != -1) {", "-\t\tsetWidth(parent.getPreferredColumnWidth(index));", "+public void pack () {", "+\tcheckWidget ();", "+\tTableItem[] availableItems = parent.items;", "+\tif (availableItems.length == 0) return;", "+\tint index = getIndex ();", "+\tint width = getPreferredWidth ();", "+\tfor (int i = 0; i < availableItems.length; i++) {", "+\t\twidth = Math.max (width, availableItems [i].getPreferredWidth (index));", "+\t}", "+\tparent.updateColumnWidth (this, width);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "219d14466a0e7886ed638c4ee3d4d8d3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "8517e98a5f4738957e454f4c7d2582fd81266a49", "commitAfterChange": "41113cf6ffda09748ef83fd740de6407f8846304", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  public void setText (String string)", "signatureAfterChange": "  public void setText (String string)", "diff": ["-\t", "-\t/*", "-\t* Feature in GTK.  It is not possible to set a shell", "-\t* title to an empty string.  The fix is to set the title", "-\t* to be a single space.", "-\t*/", "-\tif (string.length () == 0) string = \" \";", "-\tbyte [] buffer1 = Converter.wcsToMbcs (null, string, true);", "-\tint length = buffer1.length - 1;", "-\t", "+", "-\t* length is not a multiple of 4, some window managers", "-\t* occasionally draw garbage after the last character in", "-\t* the title.  The fix is to pad the title.", "+\t* is less that 7 bytes long and is not terminated by", "+\t* a space, some window managers occasionally draw", "+\t* garbage after the last character in  the title.", "+\t* The fix is to pad the title.", "-\tbyte [] buffer2 = buffer1;", "-\tif ((length % 4) != 0) {", "-\t\tbuffer2 = new byte [(length + 3) / 4 * 4];", "-\t\tSystem.arraycopy (buffer1, 0, buffer2, 0, length);", "-\t}", "-", "-\tOS.gtk_window_set_title (shellHandle, buffer2);", "+\tint length = string.length ();", "+\tchar [] chars = new char [Math.max (6, length) + 1];", "+\tstring.getChars (0, length , chars, 0);", "+\tfor (int i=length; i<chars.length; i++)  chars [i] = ' ';", "+\tbyte [] buffer = Converter.wcsToMbcs (null, chars, true);", "+\tOS.gtk_window_set_title (shellHandle, buffer);", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25815e03ede7482bafab0495395076d6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "a1373f3d12b57912d35b6b97026600a51003812f", "commitAfterChange": "967bcf4a7f613d1ce485b558c9d51b7b360125d9", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void createItem (TableColumn column, int index)", "signatureAfterChange": "  void createItem (TableColumn column, int index)", "diff": ["+\t}", "+\tint [] lastPosition = new int [1];", "+\tfor (int i=0; i<columnCount; i++) {", "+\t\tTableColumn c = columns [i];", "+\t\tOS.GetDataBrowserTableViewColumnPosition (handle, c.id, lastPosition);", "+\t\tc.lastPosition = lastPosition [0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "194f9ae1900718f2a51e3ef5921968d8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "14d81801502bf7c77f35d713f6e4edf1efb896e6", "commitAfterChange": "1797728da552f148f404c4ca1b4919e69fef580c", "methodNumberBeforeChange": 159, "methodNumberAfterChange": 159, "signatureBeforeChange": "  int windowProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int windowProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["+\tif ((int)/*64*/msg == TASKBARBUTTONCREATED) {", "+\t\tif (taskBar != null) {", "+\t\t\tTaskItem [] items = taskBar.items;", "+\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\tTaskItem item = items [i];", "+\t\t\t\tif (item != null && item.shell != null && item.shell.handle == hwnd) {", "+\t\t\t\t\titem.recreate ();", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a088e2fee2ab966cc7fd639e46d13897", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/wpf/org/eclipse/swt/dnd/Transfer.java", "commitBeforeChange": "8e746dffcecf23a840e3dfc0bae71b16f86cd38f", "commitAfterChange": "76097374ea0b9824b33cdc5c544b526a4229ae52", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": " public static int registerType(String formatName)", "signatureAfterChange": " public static int registerType(String formatName)", "diff": ["-\treturn 0;", "+\tint length = registeredTypes.length;", "+\tfor (int i = 0; i < length; i++) {", "+\t\tif (registeredTypes[i].equals(formatName))", "+\t\t\treturn i + 1;", "+\t}", "+\tString[] newTypes = new String[length + 1];", "+\tSystem.arraycopy(registeredTypes, 0, newTypes, 0, length);", "+\tnewTypes[length] = formatName;", "+\tregisteredTypes = newTypes;", "+\treturn length + 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "805b1f7db76d672dc081f004b9f13e08", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/graphics/ImageData.java", "commitBeforeChange": "4b05a6b5c8e464f92c6a2b8e61d075e3c7a84736", "commitAfterChange": "ae8b554eec17eb75bd6084a04c4176f4948c58d7", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "\r static final void blit(int op,\r \tbyte[] srcData, int srcDepth, int srcStride, int srcOrder,\r \tint srcX, int srcY, int srcWidth, int srcHeight,\r \tbyte[] srcReds, byte[] srcGreens, byte[] srcBlues,\r \tint alphaMode, byte[] alphaData, int alphaStride,\r \tbyte[] destData, int destDepth, int destStride, int destOrder,\r \tint destX, int destY, int destWidth, int destHeight,\r \tbyte[] destReds, byte[] destGreens, byte[] destBlues,\r \tboolean flipX, boolean flipY)", "signatureAfterChange": "\r static final void blit(int op,\r \tbyte[] srcData, int srcDepth, int srcStride, int srcOrder,\r \tint srcX, int srcY, int srcWidth, int srcHeight,\r \tbyte[] srcReds, byte[] srcGreens, byte[] srcBlues,\r \tint alphaMode, byte[] alphaData, int alphaStride,\r \tbyte[] destData, int destDepth, int destStride, int destOrder,\r \tint destX, int destY, int destWidth, int destHeight,\r \tbyte[] destReds, byte[] destGreens, byte[] destBlues,\r \tboolean flipX, boolean flipY)", "diff": ["+\t\t\t/*** If palettes have not been supplied, supply a suitable mapping ***/\r", "+\t\t\t} else if ((srcReds == null) || (destReds == null)) {\r", "+\t\t\t\tif (srcDepth <= destDepth) {\r", "+\t\t\t\t\tpaletteMapping = oneToOneMapping;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tpaletteMapping = new byte[1 << srcDepth];\r", "+\t\t\t\t\tint mask = (0xff << destDepth) >>> 8;\r", "+\t\t\t\t\tfor (int i = 0; i < paletteMapping.length; ++i) paletteMapping[i] = (byte)(i & mask);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ebb12914ec8b07a2baccad6ddf89c76", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "fdca6e4cea1346d013474d48c9583d543a8f6597", "commitAfterChange": "3b8e41e9339b316563bcdd1eca095f039a198c15", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["-\t\t\tTrayIcon trayIcon = getTrayIcon (wParam);", "-\t\t\treturn trayIcon != null ? trayIcon.messageProc (hwnd, msg, wParam, lParam) : 0;", "+\t\t\tif (tray != null) {", "+\t\t\t\tTrayItem [] items = tray.items;", "+\t\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\t\tTrayItem item = items [i];", "+\t\t\t\t\tif (item != null && item.id == wParam) {", "+\t\t\t\t\t\treturn item.messageProc (hwnd, msg, wParam, lParam);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38ab3d0684c026ddac6ebb2c172d1374", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "15cd4b3b02a9366a3c91dffa7606a25c162b7d95", "commitAfterChange": "b6dab3dc248d9135e08e65943e15a6ae36c16846", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " public int[] getColumnOrder ()", "signatureAfterChange": " public int[] getColumnOrder ()", "diff": ["+\tint gvColumns = OS.GridView_Columns (gridViewHandle);", "+\tfor (int i = 0; i < order.length; i++) {", "+\t\tTableColumn column = columns [i];", "+\t\tint index = OS.IList_IndexOf (gvColumns, column.handle);", "+\t\torder [index] = i;\t", "+\t}", "+\tOS.GCHandle_Free (gvColumns);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e463b6eb820c190eb4da7d88ae53bc82", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "7f98faddc61f48e7c3c67e3cc4c766f7d207f260", "commitAfterChange": "6a70c67479eb26b2d748955d53c11f666234ce97", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": " protected void release ()", "signatureAfterChange": " protected void release ()", "diff": ["+\tif (scriptCache != null) {", "+\t\tint hHeap = OS.GetProcessHeap();", "+\t\tfor (int i = 0; i < scriptCache.length; i++) {", "+\t\t\tint cache = scriptCache[i];", "+\t\t\tif (cache != 0) {", "+\t\t\t\tOS.ScriptFreeCache (cache);", "+\t\t\t\tOS.HeapFree(hHeap, 0, cache);", "+\t\t\t}", "+\t\t}", "+\t}", "+\tscriptCache = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed8aaca8cc2f37eba7b27c570020cb37", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "4402982067705616c1b209c79f66cb168269dd6f", "commitAfterChange": "b24a28ed7fb80af7b6e396a2e34774c395797532", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void setImages (Image [] images)", "signatureAfterChange": " public void setImages (Image [] images)", "diff": ["-\tif (images.length > 0) {", "-\t\tImage image = images [0];", "-\t\tif (image != null) {", "-\t\t\tOS.SetApplicationDockTileImage (image.handle);", "-\t\t} else {", "-\t\t\tOS.RestoreApplicationDockTileImage ();", "+\tif (images != null) {", "+\t\tint index = -1, width = 0, height = 0;", "+\t\tfor (int i = 0; i < images.length; i++) {", "+\t\t\tImage image = images[i];", "+\t\t\tRectangle bounds = image.getBounds();", "+\t\t\tif (bounds.width > width || bounds.height > height) {", "+\t\t\t\twidth = bounds.width;", "+\t\t\t\theight = bounds.height;", "+\t\t\t\tindex = i;", "+\t\t\t}", "+\t\tOS.SetApplicationDockTileImage (images [index].handle);", "+\t} else {", "+\t\tOS.RestoreApplicationDockTileImage ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "453f691e276753a91e62bd25790a81a2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextRenderer.java", "commitBeforeChange": "2957b637f2f9d3bf81ed31fe6c15d970da203319", "commitAfterChange": "b5d3c82373a130ee58125864784553ac1c1a11da", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " TextLayout getTextLayout(int lineIndex, int orientation, int width, int lineSpacing)", "signatureAfterChange": " TextLayout getTextLayout(int lineIndex, int orientation, int width, int lineSpacing)", "diff": ["-\t\tint height = layout.getBounds().height;", "-\t\tif (height > getLineHeight()) {", "-\t\t\tFontMetrics metrics = layout.getLineMetrics(0);", "+\t\tint index = -1;", "+\t\tint lineCount = layout.getLineCount();", "+\t\tint height = getLineHeight();", "+\t\tfor (int i = 0; i < lineCount; i++) {", "+\t\t\tint lineHeight = layout.getLineBounds(i).height;", "+\t\t\tif (lineHeight > height) {", "+\t\t\t\theight = lineHeight;", "+\t\t\t\tindex = i;", "+\t\t\t}", "+\t\t}", "+\t\tif (index != -1) {", "+\t\t\tFontMetrics metrics = layout.getLineMetrics(index);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b00c88a76a23eae5ec894660fa9c76ed", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "commitAfterChange": "bbeab947327689cb203638e742e58f555e6c1b64", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 11, "signatureBeforeChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-", "+\tint selectedMax = 0;", "+\tint selectedMaxIndex = -1;", "-\t\tminWidth += items[i].preferredWidth(gc);", "+\t\tint width = items[i].preferredWidth(gc, true);", "+\t\tif ( width > selectedMax) {", "+\t\t\tselectedMax = width;", "+\t\t\tselectedMaxIndex = i;", "+\t\t}", "+\t}", "+\tfor (int i = 0; i < items.length; i++) {", "+\t\tminWidth += items[i].preferredWidth(gc, i == selectedMaxIndex);", "+", "+\tif (minimized) minHeight = 0;", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22b3beed9912d492407d9c35b56201fe", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "780deeed6b8d04c7f8256f57ee4b8ba670998a62", "commitAfterChange": "f6545bdd05853b79e0ef79ea07a3cd61ab49eba2", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r public void setSelection (TreeItem2 [] items)", "signatureAfterChange": "\r public void setSelection (TreeItem2 [] items)", "diff": ["-\t\t\r", "-\t/* Select/deselect the first item */\r", "-\t/* AW\r", "-\tint hOldItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);\r", "-\tif (items.length == 0) {\r", "-\t\tif (hOldItem != 0) {\r", "-\t\t\tTVITEM tvItem = new TVITEM ();\r", "-\t\t\ttvItem.mask = OS.TVIF_STATE;\r", "-\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;\r", "-\t\t\ttvItem.hItem = hOldItem;\r", "-\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "-\t\t}\r", "-\t} else {\r", "-\t\tint hNewItem = 0;\r", "-\t\tTreeItem2 item = items [0];\r", "-\t\tif (item != null) {\r", "-\t\t\tif (item.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);\r", "-\t\t\thAnchor = hNewItem = item.handle;\r", "-\t\t}\r", "-\t\tignoreSelect = true;\r", "-\t\tOS.SendMessage (handle, OS.TVM_SELECTITEM, OS.TVGN_CARET, hNewItem);\r", "-\t\tignoreSelect = false;\r", "-\t\t*/\r", "-\t\t/*\r", "-\t\t* Feature in Windows.  When the old and new focused item\r", "-\t\t* are the same, Windows does not check to make sure that\r", "-\t\t* the item is actually selected, not just focused.  The\r", "-\t\t* fix is to force the item to draw selected by setting\r", "-\t\t* the state mask.\r", "-\t\t*/\r", "-\t\t/* AW\r", "-\t\tif (hOldItem == hNewItem) {\r", "-\t\t\tTVITEM tvItem = new TVITEM ();\r", "-\t\t\ttvItem.mask = OS.TVIF_STATE;\r", "-\t\t\ttvItem.state = OS.TVIS_SELECTED;\r", "-\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;\r", "-\t\t\ttvItem.hItem = hNewItem;\r", "-\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "-\t\t}\r", "-\t}\r", "-\tif ((style & SWT.SINGLE) != 0) return;\r", "-\t*/\r", "-\t\r", "-\t/* Select/deselect the rest of the items */\r", "-\t/* AW\r", "-\tTVITEM tvItem = new TVITEM ();\r", "-\ttvItem.mask = OS.TVIF_STATE;\r", "-\ttvItem.stateMask = OS.TVIS_SELECTED;\r", "-\tint oldProc = OS.GetWindowLong (handle, OS.GWL_WNDPROC);\r", "-\tOS.SetWindowLong (handle, OS.GWL_WNDPROC, TreeProc);\r", "-\tfor (int i=0; i<this.items.length; i++) {\r", "-\t\tTreeItem2 item = this.items [i];\r", "-\t\tif (item != null) {\r", "-\t\t\tint index = 0;\r", "-\t\t\twhile (index < items.length) {\r", "-\t\t\t\tif (items [index] == item) break;\r", "-\t\t\t\tindex++;\r", "-\t\t\t}\r", "-\t\t\ttvItem.hItem = item.handle;\r", "-\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);\r", "-\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) != 0) {\r", "-\t\t\t\tif (index == items.length) {\r", "-\t\t\t\t\ttvItem.state = 0;\r", "-\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "-\t\t\t\t}\r", "-\t\t\t} else {\r", "-\t\t\t\tif (index != items.length) {\r", "-\t\t\t\t\ttvItem.state = OS.TVIS_SELECTED;\r", "-\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\tOS.SetWindowLong (handle, OS.GWL_WNDPROC, oldProc);\r", "-\t*/\r", "+\tint[] ids= new int[items.length];\r", "+\tfor (int i= 0; i < items.length; i++)\r", "+\t\tids[i]= items[i].handle;\r", "+\tOS.SetDataBrowserSelectedItems(handle, ids.length, ids, OS.kDataBrowserItemsAssign);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93d628b7855def6beacd917586545473", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeColumn.java", "commitBeforeChange": "22bf858acf3b0c5dae2bcf5b62d2abebb52a5a3f", "commitAfterChange": "5a857fe694139af30432c0d2f47581ce9f52d623", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void pack ()", "signatureAfterChange": " public void pack ()", "diff": ["-\t", "+\tTreeItem[] availableItems = parent.availableItems;", "+\tif (availableItems.length == 0) return;", "+\tint index = getIndex ();", "+\tint width = -1;", "+\tfor (int i = 0; i < availableItems.length; i++) {", "+\t\twidth = Math.max (width, availableItems [i].getPreferredWidth (index));", "+\t}", "+\tsetWidth (width);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5adb21436fcf4aadc7738b837f8fb84", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "7af48bb9f090f0eca9c603b9f05937ffc4d0e7d9", "commitAfterChange": "097229ba307de6272bc7440fa4dfe6e71695d47e", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void deselectAll ()", "signatureAfterChange": " public void deselectAll ()", "diff": ["-\t//TODO multiselection...", "-\tint item = OS.TreeView_SelectedItem (handle);", "-\tif (item != 0) {", "+\tint itemRef = OS.TreeView_SelectedItem (handle);", "+\tif (itemRef != 0) {", "-\t\tOS.TreeViewItem_IsSelected (item, false);", "+\t\tOS.TreeViewItem_IsSelected (itemRef, false);", "-\t\tOS.GCHandle_Free (item);", "+\t\tOS.GCHandle_Free (itemRef);", "+\t}", "+\tif ((style & SWT.MULTI) != 0) {", "+\t\tfor (int i = 0; i < selectedItemCount; i++) {", "+\t    \tTreeItem item = selectedItems [i];", "+\t    \tOS.TreeViewItem_IsSelected (item.handle, false);", "+\t    }", "+\t    selectedItems = new TreeItem [4];", "+\t    selectedItemCount = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b6c4d4f9b99cb47b02a5370a8e76fb1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "0fa861dfc810fa95fef91d1138bd1d6fa87ebd2c", "commitAfterChange": "0600cb7b16b085c0042ea9cb2d61d7f2d118abff", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 141, "signatureBeforeChange": " int getLinePixel(int lineIndex)", "signatureAfterChange": " int getLinePixel(int lineIndex)", "diff": ["+\tif (lineIndex < 0) {", "+\t\tlineIndex = 0;", "+\t}", "-\tint height = 0;", "-\tfor (int i = 0; i < lineIndex; i++) {", "-\t\theight += lineCache.getLineHeight(i);", "+//\tif (true) {", "+//\tint height = 0;", "+//\tfor (int i = 0; i < lineIndex; i++) {", "+//\t\theight += lineCache.getLineHeight(i);", "+//\t}", "+//\treturn height - verticalScrollOffset;", "+//\t}", "+\t", "+\tif (lineIndex == topIndex) return partialHeight;", "+\tint height = partialHeight;", "+\tif (lineIndex > topIndex) {", "+\t\tfor (int i = topIndex; i < lineIndex; i++) {", "+\t\t\theight += lineCache.getLineHeight(i);", "+\t\t}", "+\t} else {", "+\t\tfor (int i = topIndex - 1; i >= lineIndex; i--) {", "+\t\t\theight -= lineCache.getLineHeight(i);", "+\t\t}", "-\treturn height - verticalScrollOffset;", "+\treturn height;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9b5361103230b74e248449108e53acf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "16f7714e341fe5d5bf0773c0a0980725cc289841", "commitAfterChange": "949a243710db76895ae62e7e3836ee5ccd5921de", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 62, "signatureBeforeChange": " protected void init ()", "signatureAfterChange": " protected void init ()", "diff": ["+\t", "+\t/* Initialize the Widget Table */", "+\tindexTable = new int [GROW_SIZE];", "+\tcontrolTable = new Control [GROW_SIZE];", "+\tfor (int i=0; i<GROW_SIZE-1; i++) indexTable [i] = i + 1;", "+\tindexTable [GROW_SIZE - 1] = -1;"]}], "num": 54166}
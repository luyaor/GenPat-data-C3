{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea904d7eea1fb3374df7e071222da4fd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da4db138483442100edad0dc928f83ae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Image.java", "commitBeforeChange": "6b81e1c49097cdea0982396c52d11c5e17632f77", "commitAfterChange": "5f7f702707f302b75507f5daec7d9dd49e3a4042", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLjava_io_InputStream()", "signatureAfterChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLjava_io_InputStream()", "diff": ["+\t\t\tassertEquals(\"Incorrect exception thrown for InputStream == null\", SWT.ERROR_NULL_ARGUMENT, e);", "+// TODO: test if correct exception is thrown. See bug 70160\t\t\t", "+//\t\t\tassertEquals(\"Incorrect exception thrown for invalid InputStream\", SWT.ERROR_INVALID_IMAGE, e);", "-\t", "-\t\t// create valid images", "+", "-\t\tString fileName = SwtTestCase.imageFilenames[0];", "+\t\tString fileName = SwtTestCase.invalidImageFilenames[0];", "+", "+\t\t\t\ttry {", "+\t\t\t\t\timage = new Image(display, stream);", "+\t\t\t\t\timage.dispose();", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tstream.close();", "+\t\t\t\t\t} catch (IOException e) {}", "+\t\t\t\t\tfail(\"No exception thrown for invalid InputStream\");", "+\t\t\t\t} catch (SWTException e) {", "+\t\t\t\t\tassertEquals(\"Incorrect exception thrown for invalid image InputStream\", SWT.ERROR_INVALID_IMAGE, e);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+", "+\t\tstream = SwtTestCase.class.getResourceAsStream(SwtTestCase.invalidImageFilenames[1]);", "+\t\ttry {", "+\t\t\timage = new Image(display, stream);", "+\t\t\timage.dispose();", "+\t\t\ttry {", "+\t\t\t\tstream.close();", "+\t\t\t} catch (IOException e) {}", "+\t\t\tfail(\"No exception thrown for invalid InputStream\");", "+\t\t} catch (SWTException e) {", "+\t\t\tassertEquals(\"Incorrect exception thrown for invalid image InputStream\", SWT.ERROR_INVALID_IMAGE, e);", "+\t\t}\t\t", "+", "+\t\t// create valid images", "+\t\tfileName = SwtTestCase.imageFilenames[0];", "+\t\tfor (int j = 0; j < displays.length; j++) {", "+\t\t\tDisplay tempDisplay = displays[j];", "+\t\t\tfor (int i=0; i<numFormats; i++) {", "+\t\t\t\tString format = SwtTestCase.imageFormats[i];", "+\t\t\t\tstream = SwtTestCase.class.getResourceAsStream(fileName + \".\" + format);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5bca68b71ec6f5a9aff96551968ca86", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Image.java", "commitBeforeChange": "5f7f702707f302b75507f5daec7d9dd49e3a4042", "commitAfterChange": "cb24623ebaa03ea200027efdd5c87647a2d2d515", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLjava_lang_String()", "signatureAfterChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLjava_lang_String()", "diff": ["-\tString filename = null;", "+\tString fileName = null;", "-\t\tImage image = new Image(display, filename);", "+\t\tImage image = new Image(display, fileName);", "-\t\tfail(\"No exception thrown for filename == null\");", "+\t\tfail(\"No exception thrown for file name == null\");", "+\t\tassertEquals(\"Incorrect exception thrown for file name == null\", SWT.ERROR_NULL_ARGUMENT, e);", "-\t// j2se and j2me(cdc) can load from a filename but, j2me(cldc) throws an exception", "+\t// j2se and j2me(cdc) can load from a file name but, j2me(cldc) throws an exception", "+\tif (!isJ2ME()) {", "+\t\ttry {", "+\t\t\tString pathName = getPath(\"empty.txt\");", "+\t\t\tImage image = new Image(display, pathName);", "+\t\t\timage.dispose();", "+\t\t\tfail(\"No exception thrown for invalid file name\");", "+\t\t} catch (SWTException e) {", "+\t//TODO: test if correct exception is thrown. See bug 70160\t\t\t", "+\t//\t\tassertEquals(\"Incorrect exception thrown for invalid file name\", SWT.ERROR_INVALID_IMAGE, e);", "+\t\t}", "+\t", "+\t\tint numFormats = SwtTestCase.imageFormats.length;", "+\t\tfileName = SwtTestCase.invalidImageFilenames[0];", "+\t\tDisplay[] displays = {display, null};", "+\t\tfor (int j = 0; j < displays.length; j++) {", "+\t\t\tDisplay tempDisplay = displays[j];", "+\t\t\tfor (int i=0; i<numFormats; i++) {", "+\t\t\t\tString format = SwtTestCase.imageFormats[i];", "+\t", "+\t\t\t\ttry {", "+\t\t\t\t\tString pathName = getPath(fileName + \".\" + format);", "+\t\t\t\t\tImage image = new Image(display, pathName);", "+\t\t\t\t\timage.dispose();", "+\t\t\t\t\tfail(\"No exception thrown for invalid file name\");", "+\t\t\t\t} catch (SWTException e) {", "+\t//\t\t\t\tTODO: test if correct exception is thrown. See bug 70167\t\t\t\t\t", "+\t//\t\t\t\tassertEquals(\"Incorrect exception thrown for invalid image file name\", SWT.ERROR_INVALID_IMAGE, e);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t", "+\t\ttry {", "+\t\t\tString pathName = getPath(SwtTestCase.invalidImageFilenames[1]);", "+\t\t\tImage image = new Image(display, pathName);", "+\t\t\timage.dispose();", "+\t\t\tfail(\"No exception thrown for invalid file name\");", "+\t\t} catch (SWTException e) {", "+\t\t\tassertEquals(\"Incorrect exception thrown for invalid image file name\", SWT.ERROR_INVALID_IMAGE, e);", "+\t\t}\t\t", "+\t", "+\t\t// create valid images", "+\t\tfor (int j = 0; j < displays.length; j++) {", "+\t\t\tDisplay tempDisplay = displays[j];", "+\t\t\tint numFileNames = SwtTestCase.imageFilenames.length;", "+\t\t\tfor (int k=0; k<numFileNames; k++) {", "+\t\t\t\tfileName = SwtTestCase.imageFilenames[k];", "+\t\t\t\tfor (int i=0; i<numFormats; i++) {", "+\t\t\t\t\tString format = SwtTestCase.imageFormats[i];", "+\t\t\t\t\tString pathName = getPath(fileName + \".\" + format);", "+\t\t\t\t\tImage image = new Image(display, pathName);", "+\t\t\t\t\timage.dispose();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 9808}
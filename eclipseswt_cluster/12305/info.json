{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34c36096d45344ae7547bfc8229a155d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b957b7a1a79e6cab66fef8d94eb582e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "88c047313fa46a6e2e802fff957d26b20c9272d0", "commitAfterChange": "39a13a5bcf66635b26443c5818e7489c0a629bc2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public String open ()", "signatureAfterChange": " public String open ()", "diff": ["+\t\tint identifiers = 0, kUTTypeData = 0;", "+\t\tif (filterExtensions == null) filterExtensions = new String [0];\t\t", "+\t\tif (filterExtensions.length != 0 && OS.VERSION >= 0x1040) {", "+\t\t\tint count = 0;", "+\t\t\tString[] extensions = new String [filterExtensions.length];", "+\t\t\tfor (int i = 0; i < filterExtensions.length; i++) {", "+\t\t\t\tif (filterExtensions [i] != null) {", "+\t\t\t\t\tint start = 0, length = filterExtensions [i].length ();", "+\t\t\t\t\twhile (start < length) {", "+\t\t\t\t\t\tint index = filterExtensions [i].indexOf (EXTENSION_SEPARATOR, start);", "+\t\t\t\t\t\tif (index == -1) index = length;", "+\t\t\t\t\t\tString extension = filterExtensions [i].substring (start, index);", "+\t\t\t\t\t\tboolean found = false;", "+\t\t\t\t\t\tfor (int j = 0; j < count; j++) {", "+\t\t\t\t\t\t\tif (extensions [j].equals (extension)) {", "+\t\t\t\t\t\t\t\tfound = true;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!found) {", "+\t\t\t\t\t\t\tif (count == extensions.length) {", "+\t\t\t\t\t\t\t\tString[] newExtensions = new String [count + 4];", "+\t\t\t\t\t\t\t\tSystem.arraycopy (extensions, 0, newExtensions, 0, count);", "+\t\t\t\t\t\t\t\textensions = newExtensions;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\textensions[count++] = extension;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tstart = index + 1;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tString publicData = \"public.data\";", "+\t\t\tchar [] buffer = new char [publicData.length ()];", "+\t\t\tpublicData.getChars (0, buffer.length, buffer, 0);", "+\t\t\tkUTTypeData = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\tidentifiers = OS.CFArrayCreateMutable (OS.kCFAllocatorDefault, 1, 0);", "+\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\tint uti;", "+\t\t\t\tString extension = extensions [i];", "+\t\t\t\tif (extension.equals (\"*.*\")) {", "+\t\t\t\t\tString publicItem = \"public.item\";", "+\t\t\t\t\tbuffer = new char [publicItem.length ()];", "+\t\t\t\t\tpublicItem.getChars (0, buffer.length, buffer, 0);", "+\t\t\t\t\tuti = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\t} else {", "+\t\t\t\t\tboolean star = extension.startsWith (\"*.\");", "+\t\t\t\t\tbuffer = new char [extension.length () - (star ? 2 : 0)];", "+\t\t\t\t\textension.getChars (star ? 2 : 0, extension.length (), buffer, 0);", "+\t\t\t\t\tint ext = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\t\tuti = OS.UTTypeCreatePreferredIdentifierForTag (OS.kUTTagClassFilenameExtension (), ext, kUTTypeData);", "+\t\t\t\t\tOS.CFRelease (ext);", "+\t\t\t\t}", "+\t\t\t\tOS.CFArrayAppendValue (identifiers, uti);", "+\t\t\t}\t\t\t", "+\t\t\tOS.NavDialogSetFilterTypeIdentifiers (outDialog [0], identifiers);", "+\t\t}", "+\t\tif (identifiers != 0) {", "+\t\t\tint count = OS.CFArrayGetCount (identifiers);", "+\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\tOS.CFRelease (OS.CFArrayGetValueAtIndex (identifiers, i));", "+\t\t\t}\t\t\t", "+\t\t\tOS.CFRelease (identifiers);", "+\t\t}", "+\t\tif (kUTTypeData != 0) OS.CFRelease(kUTTypeData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0142504ced315ad8e70ffb09d747af7a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "0bb9090ed350aac0d8a754847adb7e3c3a3eff9c", "commitAfterChange": "92bb7dc99b71d980cbdb1bb76035daf453cf7277", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": " public String open ()", "signatureAfterChange": " public String open ()", "diff": ["+\toptions.modality = OS.kWindowModalityAppModal;", "-\tint identifiers = 0, kUTTypeData = 0;", "+\tint extensions = 0;", "+\tCallback filterCallback = null, eventCallback = null;", "-\t\t// NEEDS WORK - filter extensions, start in filter path, allow user", "-\t\t// to select existing files.", "-\t\t// NEEDS WORK - filter extensions, start in filter path, select file name if it exists", "-\t\tOS.NavCreateGetFileDialog(options, 0, 0, 0, 0, 0, outDialog);", "+\t\tint filterProc = 0, eventProc = 0;", "+\t\tif (filterExtensions != null && filterExtensions.length != 0) {", "+\t\t\textensions = options.popupExtension = OS.CFArrayCreateMutable (OS.kCFAllocatorDefault, filterExtensions.length, 0);", "+\t\t\tfor (int i = 0; i < filterExtensions.length; i++) {", "+\t\t\t\tString str = filterExtensions [i];", "+\t\t\t\tif (filterNames != null && filterNames.length > i) {", "+\t\t\t\t\tstr = filterNames [i];", "+\t\t\t\t}", "+\t\t\t\tchar [] chars = new char [str.length ()];", "+\t\t\t\tstr.getChars (0, chars.length, chars, 0);", "+\t\t\t\tint ptr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, chars, chars.length);", "+\t\t\t\tif (ptr != 0) OS.CFArrayAppendValue (extensions, ptr);", "+\t\t\t}\t\t\t", "+\t\t\tfilterCallback = new Callback (this, \"filterProc\", 4);", "+\t\t\tfilterProc = filterCallback.getAddress();", "+\t\t\tif (filterProc == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\teventCallback = new Callback (this, \"eventProc\", 3);", "+\t\t\teventProc = eventCallback.getAddress();", "+\t\t\tif (eventProc == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t}", "+\t\tOS.NavCreateGetFileDialog(options, 0, eventProc, 0, filterProc, 0, outDialog);", "-\t\tif (filterExtensions == null) filterExtensions = new String [0];", "-\t\t//TEMPORARY CODE", "-\t\tif (false && filterExtensions.length != 0 && OS.VERSION >= 0x1040) {", "-\t\t\tint count = 0;", "-\t\t\tString[] extensions = new String [filterExtensions.length];", "-\t\t\tfor (int i = 0; i < filterExtensions.length; i++) {", "-\t\t\t\tif (filterExtensions [i] != null) {", "-\t\t\t\t\tint start = 0, length = filterExtensions [i].length ();", "-\t\t\t\t\twhile (start < length) {", "-\t\t\t\t\t\tint index = filterExtensions [i].indexOf (EXTENSION_SEPARATOR, start);", "-\t\t\t\t\t\tif (index == -1) index = length;", "-\t\t\t\t\t\tString extension = filterExtensions [i].substring (start, index);", "-\t\t\t\t\t\tboolean found = false;", "-\t\t\t\t\t\tfor (int j = 0; j < count; j++) {", "-\t\t\t\t\t\t\tif (extensions [j].equals (extension)) {", "-\t\t\t\t\t\t\t\tfound = true;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!found) {", "-\t\t\t\t\t\t\tif (count == extensions.length) {", "-\t\t\t\t\t\t\t\tString[] newExtensions = new String [count + 4];", "-\t\t\t\t\t\t\t\tSystem.arraycopy (extensions, 0, newExtensions, 0, count);", "-\t\t\t\t\t\t\t\textensions = newExtensions;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\textensions[count++] = extension;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tstart = index + 1;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tString publicData = \"public.data\";", "-\t\t\tchar [] buffer = new char [publicData.length ()];", "-\t\t\tpublicData.getChars (0, buffer.length, buffer, 0);", "-\t\t\tkUTTypeData = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-\t\t\tidentifiers = OS.CFArrayCreateMutable (OS.kCFAllocatorDefault, 0, 0);", "-\t\t\tfor (int i = 0; i < count; i++) {", "-\t\t\t\tint uti;", "-\t\t\t\tString extension = extensions [i];", "-\t\t\t\tif (extension.equals (\"*.*\")) {", "-\t\t\t\t\tString publicItem = \"public.item\";", "-\t\t\t\t\tbuffer = new char [publicItem.length ()];", "-\t\t\t\t\tpublicItem.getChars (0, buffer.length, buffer, 0);", "-\t\t\t\t\tuti = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-\t\t\t\t} else {", "-\t\t\t\t\tboolean star = extension.startsWith (\"*.\");", "-\t\t\t\t\tbuffer = new char [extension.length () - (star ? 2 : 0)];", "-\t\t\t\t\textension.getChars (star ? 2 : 0, extension.length (), buffer, 0);", "-\t\t\t\t\tint ext = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-\t\t\t\t\tuti = OS.UTTypeCreatePreferredIdentifierForTag (OS.kUTTagClassFilenameExtension (), ext, kUTTypeData);", "-\t\t\t\t\tOS.CFRelease (ext);", "-\t\t\t\t}", "-\t\t\t\tif (uti != 0) OS.CFArrayAppendValue (identifiers, uti);", "-\t\t\t}\t\t\t", "-\t\t\tOS.NavDialogSetFilterTypeIdentifiers (outDialog [0], identifiers);", "+\t\tif (filterExtensions != null && 0 <= filterIndex && filterIndex < filterExtensions.length) {", "+\t\t\tNavMenuItemSpec spec = new NavMenuItemSpec ();", "+\t\t\tspec.menuType = filterIndex;", "+\t\t\tOS.NavCustomControl (outDialog [0], OS.kNavCtlSelectCustomType, spec);", "-\t\t\t\t\tfilterIndex = -1;", "-\tif (identifiers != 0) {", "-\t\tint count = OS.CFArrayGetCount (identifiers);", "+\tif (extensions != 0) {", "+\t\tint count = OS.CFArrayGetCount (extensions);", "-\t\t\tOS.CFRelease (OS.CFArrayGetValueAtIndex (identifiers, i));", "+\t\t\tOS.CFRelease (OS.CFArrayGetValueAtIndex (extensions, i));", "-\t\tOS.CFRelease (identifiers);", "+\t\tOS.CFRelease (extensions);", "-\tif (kUTTypeData != 0) OS.CFRelease(kUTTypeData);", "-", "+\tif (filterCallback != null) filterCallback.dispose();", "+\tif (eventCallback != null) eventCallback.dispose();"]}], "num": 12305}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f0c450dce8039d7702de144cbcbaba4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbf063afc5c91f3878daaf759c9986db", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 53, "signatureBeforeChange": "  \tint handleCompareCallback(int item1ID, int item2ID, int item)", "signatureAfterChange": "  void showIndex (int index)", "diff": ["+", "+void showIndex (int index) {", "+\tif (0 <= index && index < itemCount) {", "+\t\tshort [] width = new short [1];", "+\t\tOS.GetDataBrowserTableViewNamedColumnWidth (handle, COLUMN_ID, width);", "+\t\tRect rect = new Rect (), inset = new Rect ();", "+\t\tOS.GetControlBounds (handle, rect);", "+\t\tOS.GetDataBrowserScrollBarInset (handle, inset);", "+\t\tOS.SetDataBrowserTableViewNamedColumnWidth (handle, COLUMN_ID, (short)(rect.right - rect.left - inset.left - inset.right));", "+\t\tOS.RevealDataBrowserItem (handle, index + 1, COLUMN_ID, (byte) OS.kDataBrowserRevealWithoutSelecting);", "+\t\tOS.SetDataBrowserTableViewNamedColumnWidth (handle, COLUMN_ID, (short)width [0]);", "+\t}", "+}", "-", "-\tint handleCompareCallback(int item1ID, int item2ID, int item) {", "-\t\tif (getIndex(item1ID) < getIndex(item2ID))", "-\t\t\treturn 1;", "-\t\treturn 0;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4e76c2886e42e7c1d2c35ac3ca72d44", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "aa08691f44f22c6dea2bd85fbb46dbadce200746", "commitAfterChange": "ff9f806f42a55a052cb1c034387c017803f7b17a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r void extractValues()", "signatureAfterChange": "\r \r int okPressed (int widget, int client, int call)", "diff": ["-}\r", "-void extractValues() {\r", "-\tfilterPath = fullPath = \"\";\r", "-\tint [] argList = {OS.XmNdirectory, 0, OS.XmNdirSpec, 0};\r", "-\tOS.XtGetValues (dialog, argList, argList.length / 2);\r", "-\t\r", "-\tint xmString1 = argList [1];\r", "-\tint ptr = OS.XmStringUnparse (\r", "-\t\txmString1,\r", "-\t\tnull,\r", "-\t\tOS.XmCHARSET_TEXT,\r", "-\t\tOS.XmCHARSET_TEXT,\r", "-\t\tnull,\r", "-\t\t0,\r", "-\t\tOS.XmOUTPUT_ALL);\r", "-\tif (ptr != 0) {\r", "-\t\tint length = OS.strlen (ptr);\r", "-\t\tbyte [] buffer = new byte [length];\r", "-\t\tOS.memmove (buffer, ptr, length);\r", "-\t\tOS.XtFree (ptr);\r", "-\t\t/* Use the character encoding for the default locale */\r", "-\t\tfilterPath = new String (Converter.mbcsToWcs (null, buffer));\r", "-\t}\r", "-\tOS.XmStringFree (xmString1);\r", "-\tif (filterPath.endsWith(\"/\")) {\r", "-\t\tfilterPath = filterPath.substring (0, filterPath.length() - 1);\r", "-\t}\r", "-\t\r", "-\tint xmString2 = argList [3];\r", "-\tptr = OS.XmStringUnparse (\r", "-\t\txmString2,\r", "-\t\tnull,\r", "-\t\tOS.XmCHARSET_TEXT,\r", "-\t\tOS.XmCHARSET_TEXT,\r", "-\t\tnull,\r", "-\t\t0,\r", "-\t\tOS.XmOUTPUT_ALL);\r", "-\tif (ptr != 0) {\r", "-\t\tint length = OS.strlen (ptr);\r", "-\t\tbyte [] buffer = new byte [length];\r", "-\t\tOS.memmove (buffer, ptr, length);\r", "-\t\tOS.XtFree (ptr);\r", "-\t\t/* Use the character encoding for the default locale */\r", "-\t\tfullPath = new String (Converter.mbcsToWcs (null, buffer)).trim();\r", "-\t}\r", "-\tOS.XmStringFree (xmString2);\r", "-\t\r", "-\tif ((style & SWT.MULTI) != 0) {\r", "-\t\tint fileList = OS.XmFileSelectionBoxGetChild (dialog, OS.XmDIALOG_LIST);\r", "-\t\tif (fileList == 0) return;\r", "-\t\tint [] argList2 = {OS.XmNselectedItems, 0, OS.XmNselectedItemCount, 0};\r", "-\t\tOS.XtGetValues (fileList, argList2, argList2.length / 2);\r", "-\t\tint items = argList2 [1], itemCount = argList2 [3];\r", "-\t\tint [] buffer1 = new int [1];\r", "-\t\tfileNames = new String [itemCount];\r", "-\t\tboolean match = false;\r", "-\t\tfor (int i = 0; i < itemCount; i++) {\r", "-\t\t\tOS.memmove (buffer1, items, 4);\r", "-\t\t\tptr = buffer1 [0];\r", "-\t\t\tint address = OS.XmStringUnparse (\r", "-\t\t\t\tptr,\r", "-\t\t\t\tnull,\r", "-\t\t\t\tOS.XmCHARSET_TEXT,\r", "-\t\t\t\tOS.XmCHARSET_TEXT,\r", "-\t\t\t\tnull,\r", "-\t\t\t\t0,\r", "-\t\t\t\tOS.XmOUTPUT_ALL);\r", "-\t\t\tif (address != 0) {\r", "-\t\t\t\tint length = OS.strlen (address);\r", "-\t\t\t\tbyte [] buffer = new byte [length];\r", "-\t\t\t\tOS.memmove (buffer, address, length);\r", "-\t\t\t\tOS.XtFree (address);\r", "-\t\t\t\t/* Use the character encoding for the default locale */\r", "-\t\t\t\tString fullFilename = new String (Converter.mbcsToWcs (null, buffer));\r", "-\t\t\t\tint index = fullFilename.lastIndexOf ('/');\r", "-\t\t\t\tfileNames [i] = fullFilename.substring (index + 1, fullFilename.length ());\r", "-\t\t\t\tif (fullFilename.equals (fullPath)) match = true;\r", "-\t\t\t}\r", "-\t\t\titems += 4;\r", "-\t\t}\r", "-\t\tif (match) {\r", "-\t\t\tfileName = fileNames [0];\r", "-\t\t} else {\r", "-\t\t\t/* The user has modified the text field such that it doesn't match any\r", "-\t\t\t * of the selected files, so use this value instead\r", "-\t\t\t */\r", "-\t\t\tint index = fullPath.lastIndexOf ('/');\r", "-\t\t\tfileName = fullPath.substring (index + 1, fullPath.length ());\r", "-\t\t\tfileNames = new String [] {fileName};\r", "-\t\t}\r", "-\t} else {\r", "-\t\tint index = fullPath.lastIndexOf ('/');\r", "-\t\tfileName = fullPath.substring (index + 1, fullPath.length ());\r", "-\t\tfileNames = new String [] {fileName};\r", "-\t}\r", "+\tString fullPath = null, fileName = null;\r", "+\tString [] fileNames = null;\r", "+\r", "+\tint [] argList = {OS.XmNdirSpec, 0, OS.XmNdirectory, 0};\r", "+\tOS.XtGetValues (dialog, argList, argList.length / 2);\r", "+\tint xmString1 = argList [1];\r", "+\tint ptr = OS.XmStringUnparse (\r", "+\t\txmString1,\r", "+\t\tnull,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tnull,\r", "+\t\t0,\r", "+\t\tOS.XmOUTPUT_ALL);\r", "+\tif (ptr != 0) {\r", "+\t\tint length = OS.strlen (ptr);\r", "+\t\tbyte [] buffer = new byte [length];\r", "+\t\tOS.memmove (buffer, ptr, length);\r", "+\t\tOS.XtFree (ptr);\r", "+\t\t/* Use the character encoding for the default locale */\r", "+\t\tfullPath = new String (Converter.mbcsToWcs (null, buffer)).trim();\r", "+\tOS.XmStringFree (xmString1);\r", "+\tif ((style & SWT.MULTI) != 0) {\r", "+\t\tint fileList = OS.XmFileSelectionBoxGetChild (dialog, OS.XmDIALOG_LIST);\r", "+\t\tif (fileList == 0) return 0;\r", "+\t\tint [] argList2 = {OS.XmNselectedItems, 0, OS.XmNselectedItemCount, 0};\r", "+\t\tOS.XtGetValues (fileList, argList2, argList2.length / 2);\r", "+\t\tint items = argList2 [1], itemCount = argList2 [3];\r", "+\t\tint [] buffer1 = new int [1];\r", "+\t\tfileNames = new String [itemCount];\r", "+\t\tboolean match = false;\r", "+\t\tfor (int i = 0; i < itemCount; i++) {\r", "+\t\t\tOS.memmove (buffer1, items, 4);\r", "+\t\t\tptr = buffer1 [0];\r", "+\t\t\tint address = OS.XmStringUnparse (\r", "+\t\t\t\tptr,\r", "+\t\t\t\tnull,\r", "+\t\t\t\tOS.XmCHARSET_TEXT,\r", "+\t\t\t\tOS.XmCHARSET_TEXT,\r", "+\t\t\t\tnull,\r", "+\t\t\t\t0,\r", "+\t\t\t\tOS.XmOUTPUT_ALL);\r", "+\t\t\tif (address != 0) {\r", "+\t\t\t\tint length = OS.strlen (address);\r", "+\t\t\t\tbyte [] buffer = new byte [length];\r", "+\t\t\t\tOS.memmove (buffer, address, length);\r", "+\t\t\t\tOS.XtFree (address);\r", "+\t\t\t\t/* Use the character encoding for the default locale */\r", "+\t\t\t\tString fullFilename = new String (Converter.mbcsToWcs (null, buffer));\r", "+\t\t\t\tint index = fullFilename.lastIndexOf ('/');\r", "+\t\t\t\tfileNames [i] = fullFilename.substring (index + 1, fullFilename.length ());\r", "+\t\t\t\tif (fullFilename.equals (fullPath)) match = true;\r", "+\t\t\t}\r", "+\t\t\titems += 4;\r", "+\t\t}\r", "+\t\tif (match) {\r", "+\t\t\tfileName = fileNames [0];\r", "+\t\t} else {\r", "+\t\t\t/* The user has modified the text field such that it doesn't match any\r", "+\t\t\t * of the selected files, so use this value instead\r", "+\t\t\t */\r", "+\t\t\tint index = fullPath.lastIndexOf ('/');\r", "+\t\t\tfileName = fullPath.substring (index + 1, fullPath.length ());\r", "+\t\t\tfileNames = new String [] {fileName};\r", "+\t\t}\r", "+\t} else {\r", "+\t\tint index = fullPath.lastIndexOf ('/');\r", "+\t\tfileName = fullPath.substring (index + 1, fullPath.length ());\r", "+\t\tfileNames = new String [] {fileName};\r", "+\t}\r", "+\r", "+\t// if no file selected then go into the current directory\r", "+\tif (fileName.equals(\"\")) {\r", "+\t\tint [] argList1 = {OS.XmNdirMask, 0};\r", "+\t\tOS.XtGetValues (dialog, argList1, argList1.length / 2);\r", "+\t\tint directoryHandle = argList1[1];\r", "+\t\tint [] argList2 = {OS.XmNpattern,directoryHandle};\r", "+\t\tOS.XtSetValues (dialog, argList2, argList2.length / 2);\r", "+\t\tOS.XmStringFree (directoryHandle);\r", "+\t\treturn 0;\r", "+\t}\t\t\r", "+\tint xmString2 = argList [3];\r", "+\tptr = OS.XmStringUnparse (\r", "+\t\txmString2,\r", "+\t\tnull,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tnull,\r", "+\t\t0,\r", "+\t\tOS.XmOUTPUT_ALL);\r", "+\tif (ptr != 0) {\r", "+\t\tint length = OS.strlen (ptr);\r", "+\t\tbyte [] buffer = new byte [length];\r", "+\t\tOS.memmove (buffer, ptr, length);\r", "+\t\tOS.XtFree (ptr);\r", "+\t\t/* Use the character encoding for the default locale */\r", "+\t\tfilterPath = new String (Converter.mbcsToWcs (null, buffer));\r", "+\t}\r", "+\tOS.XmStringFree (xmString2);\r", "+\tif (filterPath.endsWith(\"/\")) {\r", "+\t\tfilterPath = filterPath.substring (0, filterPath.length() - 1);\r", "+\t}\r", "+\r", "+\tthis.fullPath = fullPath;\r", "+\tthis.fileName = fileName;\r", "+\tthis.fileNames = fileNames;\r", "+\tOS.XtUnmanageChild (widget);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2ab86415fdbcf4dd84c6cd0159edc5a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 88, "signatureBeforeChange": " final void sendMouseEvent (int type, int button, MacMouseEvent mme)", "signatureAfterChange": "  boolean sendMouseEvent (int type, short button, int theEvent)", "diff": ["-final void sendMouseEvent (int type, int button, MacMouseEvent mme) {", "+", "+boolean sendMouseEvent (int type, short button, int theEvent) {", "-    event.time = mme.getWhen();", "-\tevent.button = button;", "-\tPoint ml= MacUtil.toControl(handle, mme.getWhere());", "-\tevent.x = ml.x;  event.y = ml.y;", "-\t// AW setInputState (event, mEvent);", "-\tevent.stateMask= mme.getState();", "+\tevent.type = type;", "+\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "+\tOS.GetEventParameter (theEvent, OS.kEventParamMouseLocation, OS.typeQDPoint, null, pt.sizeof, null, pt);", "+\tRect rect = new Rect ();", "+\tint window = OS.GetControlOwner (handle);", "+\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\tevent.x = pt.h - rect.left;", "+\tevent.y = pt.v - rect.top;", "+\tOS.GetControlBounds (handle, rect);", "+\tevent.x -= rect.left;", "+\tevent.y -= rect.top;", "+\tsetInputState (event, theEvent);", "+\treturn true;"]}], "num": 11628}
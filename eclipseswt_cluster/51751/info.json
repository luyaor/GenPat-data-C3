{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3084e1867ce40706d79292f6b7583f88", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0dff2a7ac79e0570db00a18ff8a437c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "3f452be6b0a9de0c5ecf04a918f5aea5af283a03", "commitAfterChange": "83ce5345a288d964929f5ae612ff7f68685f8832", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 71, "signatureBeforeChange": "  void setItemCount (TreeItem parentItem, int count)", "signatureAfterChange": "  void setItemCount (TreeItem parentItem, int count)", "diff": ["-//\tint itemCount = getItemCount (parentItem);", "-//\tif (count == itemCount) return;", "-//\tsetRedraw (false);", "-//\tint [] top = new int [1], left = new int [1];", "-//    OS.GetDataBrowserScrollPosition (handle, top, left);", "-//    DataBrowserCallbacks callbacks = new DataBrowserCallbacks ();", "-//\tOS.GetDataBrowserCallbacks (handle, callbacks);", "-//\tcallbacks.v1_itemNotificationCallback = 0;", "-//\tcallbacks.v1_itemCompareCallback = 0;", "-//\tOS.SetDataBrowserCallbacks (handle, callbacks);", "-//\tint[] ids = parentItem == null ? childIds : parentItem.childIds;", "-//\tif (count < itemCount) {", "-//\t\tfor (int index = ids.length - 1; index >= count; index--) {", "-//\t\t\tint id = ids [index];", "-//\t\t\tif (id != 0) {", "-//\t\t\t\tTreeItem item = _getItem (id, false);", "-//\t\t\t\tif (item != null && !item.isDisposed ()) {", "-//\t\t\t\t\titem.dispose ();", "-//\t\t\t\t} else {", "-//\t\t\t\t\tif (parentItem == null || parentItem.getExpanded ()) {", "-//\t\t\t\t\t\tif (OS.RemoveDataBrowserItems (handle, OS.kDataBrowserNoItem, 1, new int [] {id}, 0) != OS.noErr) {", "-//\t\t\t\t\t\t\terror (SWT.ERROR_ITEM_NOT_REMOVED);", "-//\t\t\t\t\t\t\tbreak;", "-//\t\t\t\t\t\t}", "-//\t\t\t\t\t\tvisibleCount--;", "-//\t\t\t\t\t}", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t}", "-//\t\t//TODO - move shrink to paint event", "-//\t\t// shrink items array", "-//\t\tint lastIndex = items.length;", "-//\t\tfor (int i=items.length; i>0; i--) {", "-//\t\t\tif (items [i-1] != null) {", "-//\t\t\t\tlastIndex = i;", "-//\t\t\t\tbreak;", "-//\t\t\t}", "-//\t\t}", "-//\t\tif (lastIndex < items.length - 4) {", "-//\t\t\tint length = Math.max (4, (lastIndex + 3) / 4 * 4);", "-//\t\t\tTreeItem [] newItems = new TreeItem [length];", "-//\t\t\tSystem.arraycopy(items, 0, newItems, 0, Math.min(items.length, lastIndex));", "-//\t\t}", "-//\t}", "-//\t", "-//\tif (parentItem != null) parentItem.itemCount = count;", "-//\tint length = Math.max (4, (count + 3) / 4 * 4);", "-//\tint [] newIds = new int [length];", "-//\tif (ids != null) {", "-//\t\tSystem.arraycopy (ids, 0, newIds, 0, Math.min (count, itemCount));", "-//\t}", "-//\tids = newIds;", "-//\tif (parentItem == null) {", "-//\t\tchildIds = newIds;", "-//\t} else {", "-//\t\tparentItem.childIds = newIds;", "-//\t}", "-//\t", "-//\tif (count > itemCount) {", "-//\t\tif ((getStyle() & SWT.VIRTUAL) == 0) {", "-//\t\t\tint delta = Math.max (4, (count - itemCount + 3) / 4 * 4);", "-//\t\t\tTreeItem [] newItems = new TreeItem [items.length + delta];", "-//\t\t\tSystem.arraycopy (items, 0, newItems, 0, items.length);", "-//\t\t\titems = newItems;", "-//\t\t\tfor (int i=itemCount; i<count; i++) {", "-//\t\t\t\titems [i] = new TreeItem (this, parentItem, SWT.NONE, i, true);", "-//\t\t\t}", "-//\t\t} else {", "-//\t\t\tif (parentItem == null || parentItem.getExpanded ()) {", "-//\t\t\t\tint parentID = parentItem == null ? OS.kDataBrowserNoItem : parentItem.id;", "-//\t\t\t\tint [] addIds = _getIds (count - itemCount);", "-//\t\t\t\tif (OS.AddDataBrowserItems (handle, parentID, addIds.length, addIds, OS.kDataBrowserItemNoProperty) != OS.noErr) {", "-//\t\t\t\t\terror (SWT.ERROR_ITEM_NOT_ADDED);", "-//\t\t\t\t}", "-//\t\t\t\tvisibleCount += (count - itemCount);", "-//\t\t\t\tSystem.arraycopy (addIds, 0, ids, itemCount, addIds.length);", "-//\t\t\t}", "-//\t\t}", "-//\t}", "-//\t", "-//\tcallbacks.v1_itemNotificationCallback = display.itemNotificationProc;", "-//\tcallbacks.v1_itemCompareCallback = display.itemCompareProc;", "-//\tOS.SetDataBrowserCallbacks (handle, callbacks);", "-//\tsetRedraw (true);", "-//\tif (itemCount == 0 && parentItem != null) parentItem.redraw (OS.kDataBrowserNoItem);", "+\tint itemCount = getItemCount (parentItem);", "+\tif (count == itemCount) return;", "+\tTreeItem [] children = parentItem == null ? items : parentItem.items;", "+\tif (count < itemCount) {", "+\t\tfor (int index = count; index < itemCount; index ++) {", "+\t\t\tTreeItem item = children [index];", "+\t\t\tif (item != null && !item.isDisposed()) item.release (false);", "+\t\t}", "+\t}", "+\tif (count > itemCount) {", "+\t\tif ((getStyle() & SWT.VIRTUAL) == 0) {", "+\t\t\tfor (int i=itemCount; i<count; i++) {", "+\t\t\t\tnew TreeItem (this, parentItem, SWT.NONE, i, true);", "+\t\t\t}", "+\t\t\treturn;", "+\t\t} ", "+\t}", "+\tint length = Math.max (4, (count + 3) / 4 * 4);", "+\tTreeItem [] newItems = new TreeItem [length];", "+\tif (children != null) {", "+\t\tSystem.arraycopy (items, 0, children, 0, Math.min (count, itemCount));", "+\t}", "+\tchildren = newItems;", "+\tif (parentItem == null) {", "+\t\tthis.items = newItems;", "+\t\tthis.itemCount = count;", "+\t} else {", "+\t\tparentItem.items = newItems;", "+\t\tparentItem.itemCount = count;", "+\t}", "+\t((NSOutlineView) view).reloadItem_ (parentItem != null ? parentItem.handle : null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d91b833dd046e426e480b73c0323ea8a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "83ce5345a288d964929f5ae612ff7f68685f8832", "commitAfterChange": "c4150c30625b5a628533d4a28ccc1dcf04694c7a", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " public void setItemCount (int count)", "signatureAfterChange": " public void setItemCount (int count)", "diff": ["-//\tcheckItems (true);", "-//\tcount = Math.max (0, count);", "-//\tif (count == itemCount) return;", "-//\tsetRedraw (false);", "-//    int[] top = new int [1], left = new int [1];", "-//    OS.GetDataBrowserScrollPosition (handle, top, left);", "-//    DataBrowserCallbacks callbacks = new DataBrowserCallbacks ();", "-//\tOS.GetDataBrowserCallbacks (handle, callbacks);", "-//\tcallbacks.v1_itemNotificationCallback = 0;", "-//\tcallbacks.v1_itemCompareCallback = 0;", "-//\tOS.SetDataBrowserCallbacks (handle, callbacks);", "-//\tif (count < itemCount) {", "-//\t\tint index = count;", "-//\t\tint[] id = new int [itemCount - count];", "-//\t\twhile (index < itemCount) {", "-//\t\t\tTableItem item = items [index];", "-//\t\t\tif (item != null) item.release (false);", "-//\t\t\tid [index-count] = index + 1;", "-//\t\t\tindex++;", "-//\t\t}", "-//\t\tOS.RemoveDataBrowserItems (handle, OS.kDataBrowserNoItem, id.length, id, 0);", "-//\t\tint [] newItemCount = new int [1];", "-//\t\tif (OS.GetDataBrowserItemCount (handle, OS.kDataBrowserNoItem, true, OS.kDataBrowserItemAnyState, newItemCount) != OS.noErr) {", "-//\t\t\terror (SWT.ERROR_CANNOT_GET_COUNT);", "-//\t\t}", "-//\t\tif (count != newItemCount[0]) error (SWT.ERROR_ITEM_NOT_REMOVED);", "-//\t}", "-//\tint length = Math.max (4, (count + 3) / 4 * 4);", "-//\tTableItem [] newItems = new TableItem [length];", "-//\tSystem.arraycopy (items, 0, newItems, 0, Math.min (count, itemCount));", "-//\titems = newItems;", "-//\tif ((style & SWT.VIRTUAL) == 0) {", "-//\t\tfor (int i=itemCount; i<count; i++) {", "-//\t\t\titems [i] = new TableItem (this, SWT.NONE, i, false);", "-//\t\t}", "-//\t}", "-//\titemCount = count;", "-//\tOS.AddDataBrowserItems (handle, 0, itemCount, null, OS.kDataBrowserItemNoProperty);", "-//\tcallbacks.v1_itemNotificationCallback = display.itemNotificationProc;", "-//\tcallbacks.v1_itemCompareCallback = itemCompareProc ();", "-//\tOS.SetDataBrowserCallbacks (handle, callbacks);", "-//\tfixScrollBar ();", "-//\tsetRedraw (true);", "+\tcount = Math.max (0, count);", "+\tif (count == itemCount) return;", "+\tif (count == itemCount) return;", "+\tTableItem [] children = items;", "+\tif (count < itemCount) {", "+\t\tfor (int index = count; index < itemCount; index ++) {", "+\t\t\tTableItem item = children [index];", "+\t\t\tif (item != null && !item.isDisposed()) item.release (false);", "+\t\t}", "+\t}", "+\tif (count > itemCount) {", "+\t\tif ((getStyle() & SWT.VIRTUAL) == 0) {", "+\t\t\tfor (int i=itemCount; i<count; i++) {", "+\t\t\t\tnew TableItem (this, SWT.NONE, i, true);", "+\t\t\t}", "+\t\t\treturn;", "+\t\t} ", "+\t}", "+\tint length = Math.max (4, (count + 3) / 4 * 4);", "+\tTableItem [] newItems = new TableItem [length];", "+\tif (children != null) {", "+\t\tSystem.arraycopy (items, 0, children, 0, Math.min (count, itemCount));", "+\t}", "+\tchildren = newItems;", "+\tthis.items = newItems;", "+\tthis.itemCount = count;", "+\t((NSTableView) view).noteNumberOfRowsChanged ();"]}], "num": 51751}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04bc03a2d039b2b331b90f0f212f1a1d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6ba9c499a6185e02908c24dd484b9d7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "7c255c33f088ef04ac6271863f814fd0cde593d4", "commitAfterChange": "31b7e14bceda4eac6e74ea4bd2865b1d0782034c", "methodNumberBeforeChange": 225, "methodNumberAfterChange": 225, "signatureBeforeChange": "  LRESULT WM_GESTURE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_GESTURE (int wParam, int lParam)", "diff": ["-\tboolean handled = false;", "-\t", "-\tif (hooks (SWT.Gesture)) {", "+\tif (hooks (SWT.Gesture) || filters (SWT.Gesture)) {", "-\t\t\thandled = sendGestureEvent (gi);", "+\t\t\tboolean result = sendGestureEvent (gi);", "+\t\t\tOS.CloseGestureInfoHandle (lParam);", "+\t\t\tif (result) return LRESULT.ZERO; ", "-\t\tOS.CloseGestureInfoHandle (lParam);", "-\t", "-\treturn (handled ? LRESULT.ZERO : null);", "+\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01e61f7a86ce02f8b7918bfc9e237c20", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "fec0d691465789ed5f8cc6a20256c17056f52d4b", "commitAfterChange": "9d697938dc497ce745bc08c56805f2f48704f2bf", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 121, "signatureBeforeChange": "  int widgetStyle ()", "signatureAfterChange": "  int widgetStyle ()", "diff": ["-\tif ((style & SWT.FULL_SELECTION) != 0) {", "-\t\tbits |= OS.TVS_FULLROWSELECT;", "+\tif (EXPLORER_THEME && !OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\tbits |= OS.TVS_TRACKSELECT;", "+\t\tif ((style & SWT.FULL_SELECTION) != 0) bits |= OS.TVS_FULLROWSELECT;", "-\t\tif (EXPLORER_THEME && !OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "-\t\t\tbits |= OS.TVS_TRACKSELECT;", "+\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\tbits |= OS.TVS_FULLROWSELECT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba5cf485c6af69c2a2f5b3fc82459a41", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "709d79b1c227c28be9dc6c171d8dc7d5392e9d65", "commitAfterChange": "3ee42b83b117fbf54f6cbc023f994d89eebceeff", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  int widgetExtStyle ()", "signatureAfterChange": "  int widgetExtStyle ()", "diff": ["-", "+\tif ((style & SWT.TOOL) != 0) bits |= OS.WS_EX_TOOLWINDOW;", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31346ddc93e26ed09023dd4432e15aa7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "ba15a17bffa6c8eb89d53206146f9b8b25aa2bfb", "commitAfterChange": "530f47b45d39211d2a7b021bd35992a052f00cb4", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["-\tint type;", "-\tif ((style&SWT.NO_TRIM) == 0) type = OS.GTK_WINDOW_TOPLEVEL;", "-\t\telse type = OS.GTK_WINDOW_POPUP;", "+\tint type = (style & SWT.NO_TRIM) == 0 ? OS.GTK_WINDOW_TOPLEVEL : OS.GTK_WINDOW_POPUP;", "+\tOS.gtk_window_set_title (shellHandle, new byte [1]);", "-\tboolean modal = (style & (SWT.PRIMARY_MODAL | SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0;", "-\tOS.gtk_window_set_modal (shellHandle, modal);\t", "+\t/*", "+\t* High level GTK helpers, like gtk_window_set_decorated, simply", "+\t* use gdk_window_set_decorations() with specific values.", "+\t* Therefore we use that function manually.", "+\t*/", "-\tint decorations = 0;", "-\t/*", "-\t * High level GTK helpers, like gtk_window_set_decorated, simply", "-\t * use gdk_window_set_decorations() with specific values.", "-\t * Therefore we use that function manually.", "-\t */", "-\tif ((style & SWT.NO_TRIM) == 0) {", "-\t\tOS.gtk_window_set_title (shellHandle, new byte [1]);", "-\t\tif ((style & SWT.MIN) != 0) decorations |= OS.GDK_DECOR_MINIMIZE;", "-\t\tif ((style & SWT.MAX) != 0) decorations |= OS.GDK_DECOR_MAXIMIZE;", "-\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.GDK_DECOR_RESIZEH;", "-\t\tif ((style & SWT.BORDER) != 0) decorations |= OS.GDK_DECOR_BORDER;", "-\t\tif ((style & SWT.MENU) != 0) decorations |= OS.GDK_DECOR_MENU;", "-\t\tif ((style & SWT.TITLE) != 0) decorations |= OS.GDK_DECOR_TITLE;", "-\t\t/*", "-\t\t * Under some Window Managers (Sawmill), in order", "-\t\t * to get any border at all from the window manager it is necessary", "-\t\t * to set GDK_DECOR_BORDER.  The fix is to force these bits when any", "-\t\t * kind of border is requested.", "-\t\t */", "-\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.GDK_DECOR_BORDER;", "+\tif ((style & SWT.ON_TOP) != 0) {", "+\t\tOS.gdk_window_set_override_redirect (window, true);", "+\t} else {", "+\t\tint decorations = 0;", "+\t\tif ((style & SWT.NO_TRIM) == 0) {", "+\t\t\tif ((style & SWT.MIN) != 0) decorations |= OS.GDK_DECOR_MINIMIZE;", "+\t\t\tif ((style & SWT.MAX) != 0) decorations |= OS.GDK_DECOR_MAXIMIZE;", "+\t\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.GDK_DECOR_RESIZEH;", "+\t\t\tif ((style & SWT.BORDER) != 0) decorations |= OS.GDK_DECOR_BORDER;", "+\t\t\tif ((style & SWT.MENU) != 0) decorations |= OS.GDK_DECOR_MENU;", "+\t\t\tif ((style & SWT.TITLE) != 0) decorations |= OS.GDK_DECOR_TITLE;", "+\t\t\t/*", "+\t\t\t* Feature in GTK.  Under some Window Managers (Sawmill), in order", "+\t\t\t* to get any border at all from the window manager it is necessary", "+\t\t\t* to set GDK_DECOR_BORDER.  The fix is to force these bits when any", "+\t\t\t* kind of border is requested.", "+\t\t\t*/", "+\t\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.GDK_DECOR_BORDER;", "+\t\t}", "-\telse OS.gdk_window_set_override_redirect(window, true);", "-\t", "+\tboolean modal = (style & (SWT.PRIMARY_MODAL | SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0;", "+\tOS.gtk_window_set_modal (shellHandle, modal);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c4a1d0597ebe25ed432d0c57f7b567c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "a80a9c18b87fdc30dc5882e6c7a896dbdfc71a23", "commitAfterChange": "0297bd78813bf087018cdeba8530ed46648ce842", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\t\t\tattributes |= OS.kWindowResizableAttribute; // | OS.kWindowLiveResizeAttribute;", "+\t\t\tattributes |= OS.kWindowResizableAttribute;", "+\t\t\t/*", "+\t\t\t* Bug in the Macintosh.  For some reason, when SetWindowActivationScope()", "+\t\t\t* is used to set the scope to kWindowActivationScopeNone, no feedback is", "+\t\t\t* given while the shell is resizing.  The fix is to create the window with", "+\t\t\t* kWindowLiveResizeAttribute in this case.  It's inconsistent with other", "+\t\t\t* windows, but at least the user will get feedback when resizing.", "+\t\t\t*/", "+\t\t\tif ((style & SWT.ON_TOP) != 0) attributes |= OS.kWindowLiveResizeAttribute;"]}], "num": 16520}
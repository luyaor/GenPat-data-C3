{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df373ecd9a342b94228d5117257fb700", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08d9b5998d2faa3434826779e87d37a2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet162.java", "commitBeforeChange": "97fd0ac369cf01c79a83269dd215bc66fb80f094", "commitAfterChange": "8093e4de11a4b3e09a48b5b00387350ee1d8feab", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static void main (String [] args)", "signatureAfterChange": "  public static void main (String [] args)", "diff": ["-\tfinal Table table = new Table (shell, SWT.BORDER);", "+\tfinal Table table = new Table (shell, SWT.FULL_SELECTION | SWT.BORDER);", "-\t\t\tsuper.getName (e);", "+\t\t\t/* The first column of a table item is returned in the \"name\" property. */", "-\t\t\t\tPoint pt = display.getCursorLocation ();", "-\t\t\t\tpt = display.map (null, table, pt);", "-\t\t\t\tfor (int i = 0; i < table.getColumnCount (); i++) {", "-\t\t\t\t\tif (item.getBounds (i).contains (pt)) {", "-\t\t\t\t\t\tint [] data = (int []) item.getData (STATE);", "-\t\t\t\t\t\tboolean checked = false;", "-\t\t\t\t\t\tif (data != null) {", "-\t\t\t\t\t\t\tfor (int j = 0; j < data.length; j++) {", "-\t\t\t\t\t\t\t\tif (data [j] == i) {", "-\t\t\t\t\t\t\t\t\tchecked = true;", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\te.result = item.getText (i) + \" \" + (checked ? \"checked\" : \"unchecked\");", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "+\t\t\t\te.result = item.getText (0);", "+\t\t\t}", "+\t\t}", "+\t\tpublic void getDescription (AccessibleEvent e) {", "+\t\t\t/* The names of all columns of a table item except the first are returned in the \"description\" property. */", "+\t\t\tif (e.childID >= 0 && e.childID < table.getItemCount ()) {", "+\t\t\t\tTableItem item = table.getItem (e.childID);", "+\t\t\t\te.result = \"\";", "+\t\t\t\tfor (int i = 1; i < table.getColumnCount (); i++) {", "+\t\t\t\t\te.result += item.getText (i) + \" \" + (isChecked(item, i) ? \"checked\" : \"unchecked\");", "+\t\t\t\t\tif (i + 1 < table.getColumnCount()) e.result += \", \";", "-\t\t\tsuper.getState (e);", "-\t\t\t\tint [] data = (int []) item.getData (STATE);", "-\t\t\t\tif (data != null) {", "-\t\t\t\t\tPoint pt = display.getCursorLocation ();", "-\t\t\t\t\tpt = display.map (null, table, pt);", "-\t\t\t\t\tfor (int i = 0; i < data.length; i++) {", "-\t\t\t\t\t\tif (item.getBounds (data [i]).contains (pt)) {", "-\t\t\t\t\t\t\te.detail |= ACC.STATE_CHECKED;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "+\t\t\t\tfor (int i = 1; i < table.getColumnCount (); i++) {", "+\t\t\t\t\tif (isChecked(item, i)) {", "+\t\t\t\t\t\te.detail |= ACC.STATE_CHECKED;", "+\tshell.pack();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0de69c42812d2eb5a52376de4b4b8c6d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet231.java", "commitBeforeChange": "3cce67e8530c055470017a7865433fd1018df6a7", "commitAfterChange": "e65ed25668cb10eb16fda0f9d78af20d466d897c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public static void main(String [] args)", "signatureAfterChange": " \t public static void main(String [] args)", "diff": ["+\tfinal int COLUMN_COUNT = 4;", "+\tfinal int ITEM_COUNT = 8;", "+\tfinal int TEXT_MARGIN = 3;", "-\tShell shell = new Shell (display);", "-\tshell.setText(\"Multiple lines in a TableItem\");", "-\tshell.setLayout (new FillLayout());", "-\tfinal Table table = new Table(shell, SWT.MULTI | SWT.FULL_SELECTION);", "+\tShell shell = new Shell(display);", "+\tfinal Table table = new Table(shell, SWT.FULL_SELECTION);", "-\tint columnCount = 4;", "-\tfor (int i=0; i<columnCount; i++) {", "-\t\tTableColumn column = new TableColumn(table, SWT.NONE);", "-\t\tcolumn.setText(\"Column \" + i);\t", "+\tfor (int i = 0; i < COLUMN_COUNT; i++) {", "+\t\tnew TableColumn(table, SWT.NONE);", "-\tint itemCount = 8;", "-\tfor(int i = 0; i < itemCount; i++) {", "+\tfor (int i = 0; i < ITEM_COUNT; i++) {", "-\t\titem.setText(new String[] {\"item \"+i+\" a\", \"item \"+i+\" b\", \"item \"+i+\" c\", \"item \"+i+\" d\"});", "-\t}\t", "+\t\tfor (int j = 0; j < COLUMN_COUNT; j++) {", "+\t\t\tString string = \"item \" + i + \" col \" + j;", "+\t\t\tif ((i + j) % 3 == 1) {", "+\t\t\t\tstring +=\"\\nnew line1\";", "+\t\t\t}", "+\t\t\tif ((i + j) % 3 == 2) {", "+\t\t\t\tstring +=\"\\nnew line1\\nnew line2\";", "+\t\t\t}", "+\t\t\titem.setText(j, string);", "+\t\t}", "+\t}", "+", "-\tListener paintListener = new Listener() {", "+\ttable.addListener(SWT.MeasureItem, new Listener() {", "-\t\t\tswitch(event.type) {\t\t", "-\t\t\t\tcase SWT.MeasureItem: {", "-\t\t\t\t\tTableItem item = (TableItem)event.item;", "-\t\t\t\t\tString text = getText(item, event.index);", "-\t\t\t\t\tPoint size = event.gc.textExtent(text);", "-\t\t\t\t\tevent.width = size.x;", "-\t\t\t\t\tevent.height = Math.max(event.height, size.y);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase SWT.PaintItem: {", "-\t\t\t\t\tTableItem item = (TableItem)event.item;", "-\t\t\t\t\tString text = getText(item, event.index);", "-\t\t\t\t\tPoint size = event.gc.textExtent(text);\t\t\t\t\t", "-\t\t\t\t\tint offset2 = event.index == 0 ? Math.max(0, (event.height - size.y) / 2) : 0;", "-\t\t\t\t\tevent.gc.drawText(text, event.x, event.y + offset2, true);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase SWT.EraseItem: {\t", "-\t\t\t\t\tevent.detail &= ~SWT.FOREGROUND;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tTableItem item = (TableItem)event.item;", "+\t\t\tString text = item.getText(event.index);", "+\t\t\tPoint size = event.gc.textExtent(text);", "+\t\t\tevent.width = size.x + 2 * TEXT_MARGIN;", "+\t\t\tevent.height = Math.max(event.height, size.y + TEXT_MARGIN);", "-\t\tString getText(TableItem item, int column) {", "-\t\t\tString text = item.getText(column);", "-\t\t\tif (column != 0) {", "-\t\t\t\tint index = table.indexOf(item);", "-\t\t\t\tif ((index+column) % 3 == 1){", "-\t\t\t\t\ttext +=\"\\nnew line\";", "-\t\t\t\t}", "-\t\t\t\tif ((index+column) % 3 == 2) {", "-\t\t\t\t\ttext +=\"\\nnew line\\nnew line\";", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn text;", "+\t});", "+\ttable.addListener(SWT.EraseItem, new Listener() {", "+\t\tpublic void handleEvent(Event event) {", "+\t\t\tevent.detail &= ~SWT.FOREGROUND;", "-\t};", "-\ttable.addListener(SWT.MeasureItem, paintListener);", "-\ttable.addListener(SWT.PaintItem, paintListener);", "-\ttable.addListener(SWT.EraseItem, paintListener);", "-\tfor (int i = 0; i < columnCount; i++) {", "+\t});", "+\ttable.addListener(SWT.PaintItem, new Listener() {", "+\t\tpublic void handleEvent(Event event) {", "+\t\t\tTableItem item = (TableItem)event.item;", "+\t\t\tString text = item.getText(event.index);", "+\t\t\t/* center column 1 vertically */", "+\t\t\tint yOffset = 0;", "+\t\t\tif (event.index == 1) {", "+\t\t\t\tPoint size = event.gc.textExtent(text);", "+\t\t\t\tyOffset = Math.max(0, (event.height - size.y) / 2);", "+\t\t\t}", "+\t\t\tevent.gc.drawText(text, event.x + TEXT_MARGIN, event.y + yOffset, true);", "+\t\t}", "+\t});", "+", "+\tfor (int i = 0; i < COLUMN_COUNT; i++) {", "+\ttable.pack();", "-\twhile(!shell.isDisposed()) {", "-\t\tif(!display.readAndDispatch()) display.sleep();", "+\twhile (!shell.isDisposed()) {", "+\t\tif (!display.readAndDispatch()) display.sleep();"]}], "num": 15376}
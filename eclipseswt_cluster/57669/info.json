{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e4286652e19c32604140261be357afe7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "894c017e862417389cb3ef938bb8ddc7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "810eb254cbe71a3e1637e56f044fa70b981eb39d", "commitAfterChange": "803bd538f4c4c40e1d60df10cb6937bfea9dab26", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 97, "signatureBeforeChange": "  void setSelectionHighlightGradientColor(Color start)", "signatureAfterChange": " void setSelectionHighlightGradientColor(Color start)", "diff": ["-", "-\t//Set to null to match all the early return cases.", "-\t//For early returns, don't realloc the cache, we may get a cache hit next time we're given the highlight", "-\tselectionHighlightGradientBegin = null;", "-", "-\tif(start == null)", "-\t\treturn;", "-", "-\t//don't bother on low colour", "-\tif (getDisplay().getDepth() < 15)", "-\t\treturn;", "-\t", "-\t//don't bother if we don't have a background gradient", "-\tif(selectionGradientColors.length < 2) ", "-\t\treturn;", "-", "-\t//OK we know its a valid gradient now", "-\tselectionHighlightGradientBegin = start;", "-", "-\tif(! isSelectionHighlightColorsCacheHit(start))", "-\t\tcreateSelectionHighlightGradientColors(start);  //if no cache hit then compute new ones", "-}", "+\trenderer.setSelectionHighlightGradientColor(start);  //TODO: need better caching strategy"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d0bd4be9a398b841a3fa79b12a8cabf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "ca611642fc41807588637202b032414f273f2b1e", "commitAfterChange": "7f6898e7f25aa3abfc9d050db6890b8da8096e1f", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 101, "signatureBeforeChange": " private RGB blend(RGB from, RGB to)", "signatureAfterChange": "  void setSelectionHighlightGradientColor(Color start)", "diff": ["+", "+void setSelectionHighlightGradientColor(Color start) {", "+\t//Set to null to match all the early return cases.", "+\t//For early returns, don't realloc the cache, we may get a cache hit next time we're given the highlight", "+\tselectionHighlightGradientBegin = null;", "+", "+\tif(start == null)", "+\t\treturn;", "+", "+\t//don't bother on low colour", "+\tif (getDisplay().getDepth() < 15)", "+\t\treturn;", "+\t", "+\t//don't bother if we don't have a background gradient", "+\tif(selectionGradientColors.length < 2) ", "+\t\treturn;", "+", "+\t//OK we know its a valid gradient now", "+\tselectionHighlightGradientBegin = start;", "+", "+\tif(! isSelectionHighlightColorsCacheHit(start))", "+\t\tcreateSelectionHighlightGradientColors(start);  //if no cache hit then compute new ones", "+}", "- */", "-private RGB blend(RGB from, RGB to){", "-\tint red = (from.red + to.red) / 2;", "-\tint green = (from.green + to.green) / 2;", "-\tint blue = (from.blue + to.blue) / 2;", "-\treturn new RGB(red, green, blue);", "-}"]}], "num": 57669}
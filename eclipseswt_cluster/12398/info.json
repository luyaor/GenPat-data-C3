{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc179e7af24af5207451f8b9a2c2f8b4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb77762478af2f7872716ed7ecd0a1e9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java", "commitBeforeChange": "e26934ac680ad70439130b120695448c0a630d25", "commitAfterChange": "95842c4b8acd967ae07a3fa166a616e528ae2f66", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 3, "signatureBeforeChange": " void setStyle(Widget widget)", "signatureAfterChange": "  \tpublic StyleRange[] getStyles(InputStream stream)", "diff": ["- */", "-void setStyle(Widget widget) {", "-\tPoint sel = text.getSelectionRange();", "-\tif ((sel == null) || (sel.y == 0)) return;", "-\tStyleRange style;", "-\tfor (int i = sel.x; i<sel.x+sel.y; i++) {", "-\t\tStyleRange range = text.getStyleRangeAtOffset(i);", "-\t\tif (range != null) {", "-\t\t\tstyle = (StyleRange)range.clone();", "-\t\t\tstyle.start = i;", "-\t\t\tstyle.length = 1;", "-\t\t} else {", "-\t\t\tstyle = new StyleRange(i, 1, null, null, SWT.NORMAL);", "-\t\t}", "-\t\tif (widget == boldButton) {", "-\t\t\tstyle.fontStyle ^= SWT.BOLD;", "-\t\t} else if (widget == italicButton) {", "-\t\t\tstyle.fontStyle ^= SWT.ITALIC;\t\t\t\t\t\t", "-\t\t} else if (widget == underlineButton) {", "-\t\t\tstyle.underline = !style.underline;", "-\t\t} else if (widget == strikeoutButton) {", "-\t\t\tstyle.strikeout = !style.strikeout;", "-\t\t}", "-\t\ttext.setStyleRange(style);", "-\t}", "-\ttext.setSelectionRange(sel.x + sel.y, 0);\t\t\t", "-}", "+", "+\tpublic StyleRange[] getStyles(InputStream stream) {", "+\t\tStyleRange[] styles = new StyleRange[256];", "+\t\tint count = 0;", "+\t\ttry {", "+\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(stream));", "+\t\t\tString line;", "+\t\t\twhile ((line = reader.readLine()) != null) {", "+\t\t\t\tStringTokenizer tokenizer = new StringTokenizer(line, \";\", false);  //$NON-NLS-1$", "+\t\t\t\tStyleRange range = new StyleRange();", "+\t\t\t\trange.start = Integer.parseInt(tokenizer.nextToken());", "+\t\t\t\trange.length = Integer.parseInt(tokenizer.nextToken());", "+\t\t\t\trange.fontStyle = Integer.parseInt(tokenizer.nextToken());", "+\t\t\t\trange.strikeout = tokenizer.nextToken().equals(\"true\");  //$NON-NLS-1$", "+\t\t\t\trange.underline = tokenizer.nextToken().equals(\"true\");  //$NON-NLS-1$", "+\t\t\t\tif (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\tint red = Integer.parseInt(tokenizer.nextToken());", "+\t\t\t\t\tint green = Integer.parseInt(tokenizer.nextToken());", "+\t\t\t\t\tint blue = Integer.parseInt(tokenizer.nextToken());", "+\t\t\t\t\trange.foreground = new Color(display, red, green, blue);", "+\t\t\t\t}", "+\t\t\t\tif (tokenizer.hasMoreTokens()) {", "+\t\t\t\t\tint red = Integer.parseInt(tokenizer.nextToken());", "+\t\t\t\t\tint green = Integer.parseInt(tokenizer.nextToken());", "+\t\t\t\t\tint blue = Integer.parseInt(tokenizer.nextToken());", "+\t\t\t\t\trange.background = new Color(display, red, green, blue);", "+\t\t\t\t}", "+\t\t\t\tif (count >= styles.length) {", "+\t\t\t\t\tStyleRange[] newStyles =  new StyleRange[styles.length + 256];", "+\t\t\t\t\tSystem.arraycopy(styles, 0, newStyles, 0, styles.length);", "+\t\t\t\t\tstyles = newStyles;", "+\t\t\t\t}", "+\t\t\t\tstyles[count++] = range;", "+\t\t\t}", "+\t\t} catch (IOException e) {", "+\t\t\te.printStackTrace();", "+\t\t}", "+\t\tif (count < styles.length) {", "+\t\t\tStyleRange[] newStyles = new StyleRange[count];", "+\t\t\tSystem.arraycopy(styles, 0, newStyles, 0, count);", "+\t\t\tstyles = newStyles;", "+\t\t}", "+\t\treturn styles;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b060c5f4ccc648451db32cf0e903b10", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "b4e6b3e5c97b6f5f03205e2f5e49caf3a26bbe1b", "commitAfterChange": "75f4adb1c9f2247ebc44ffbe474a83633ab81338", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\t\t\t\t\tVariant varResult = event.arguments[1];", "-\t\t\t\t\tif (varResult != null) {", "+\t\t\t\t\tVariant varResult = event.arguments[0];", "+\t\t\t\t\tIDispatch dispatch = varResult.getDispatch();", "+\t\t\t\t\tVariant variant = new Variant(auto);", "+\t\t\t\t\tIDispatch top = variant.getDispatch();", "+\t\t\t\t\tif (top.getAddress() == dispatch.getAddress()) {", "+\t\t\t\t\t\tvarResult = event.arguments[1];", "-\t\t\t\t\t\tif (locationListeners != null) {", "-\t\t\t\t\t\t\tfor (int i = 0; i < locationListeners.length; i++)", "-\t\t\t\t\t\t\t\tlocationListeners[i].changing(newEvent);", "-\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\tfor (int i = 0; i < locationListeners.length; i++)", "+\t\t\t\t\t\t\tlocationListeners[i].changing(newEvent);", "-\t\t\t\t\t\tif (cancel != null){", "+\t\t\t\t\t\tif (cancel != null) {", "-\t\t\t\t\treturn;", "+\t\t\t\t\t", "+\t\t\t\t\t/*", "+\t\t\t\t\t* This code is intentionally commented.  This IDispatch was received", "+\t\t\t\t\t* as an argument from the OleEvent and it will be disposed along with", "+\t\t\t\t\t* the other arguments.  ", "+\t\t\t\t\t*/", "+\t\t\t\t\t//dispatch.Release();", "+", "+\t\t\t\t\t/*", "+\t\t\t\t\t* This code is intentionally commented.  A Variant constructed from an", "+\t\t\t\t\t* OleAutomation object does not increase its reference count.  The IDispatch", "+\t\t\t\t\t* obtained from this Variant did not increase the reference count for the", "+\t\t\t\t\t* OleAutomation instance either. ", "+\t\t\t\t\t*/", "+\t\t\t\t\t//top.Release();", "+\t\t\t\t\t//variant.dispose();", "+\t\t\t\t\tbreak;", "-\t\t\t\t\tint command = 0;", "-\t\t\t\t\tif (varResult != null) {", "-\t\t\t\t\t\tcommand = varResult.getInt();", "-\t\t\t\t\t}", "+\t\t\t\t\tint command = varResult.getInt();", "-\t\t\t\t\tif (varResult != null) {", "-\t\t\t\t\t\tenabled = varResult.getBoolean();", "-\t\t\t\t\t}", "+\t\t\t\t\tenabled = varResult.getBoolean();", "-\t\t\t\t\treturn;", "+\t\t\t\t\tbreak;", "-\t\t\t\tcase NavigateComplete2: {", "-\t\t\t\t\tVariant varResult = event.arguments[1];", "-\t\t\t\t\tif (varResult != null) {", "-\t\t\t\t\t\tString url = varResult.getString();", "-\t\t\t\t\t\tLocationEvent newEvent = new LocationEvent(Browser.this);", "-\t\t\t\t\t\tnewEvent.location = url;", "-\t\t\t\t\t\tif (locationListeners != null) {", "+\t\t\t\tcase DocumentComplete: {", "+\t\t\t\t\tVariant varResult = event.arguments[0];", "+\t\t\t\t\tIDispatch dispatch = varResult.getDispatch();", "+\t\t\t\t\tVariant variant = new Variant(auto);", "+\t\t\t\t\tIDispatch top = variant.getDispatch();", "+\t\t\t\t\tif (top.getAddress() == dispatch.getAddress()) {", "+\t\t\t\t\t\tif (html != null) {", "+\t\t\t\t\t\t\tTCHAR buffer = new TCHAR(0, html, true);", "+\t\t\t\t\t\t\thtml = null;", "+\t\t\t\t\t\t\tint byteCount = buffer.length() * TCHAR.sizeof;", "+\t\t\t\t\t\t\tint hGlobal = OS.GlobalAlloc(OS.GMEM_FIXED, byteCount);", "+\t\t\t\t\t\t\tif (hGlobal != 0) {", "+\t\t\t\t\t\t\t\tOS.MoveMemory(hGlobal, buffer, byteCount);", "+\t\t\t\t\t\t\t\tint[] ppstm = new int[1];", "+\t\t\t\t\t\t\t\t/* ", "+\t\t\t\t\t\t\t\t* Note.  CreateStreamOnHGlobal is called with the flag fDeleteOnRelease.", "+\t\t\t\t\t\t\t\t* If the call succeeds the buffer hGlobal is freed automatically", "+\t\t\t\t\t\t\t\t* when the IStream object is released. If the call fails, free the buffer", "+\t\t\t\t\t\t\t\t* hGlobal.", "+\t\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\t\tif (OS.CreateStreamOnHGlobal(hGlobal, true, ppstm) == OS.S_OK) {", "+\t\t\t\t\t\t\t\t\tint[] rgdispid = auto.getIDsOfNames(new String[] {\"Document\"}); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\tVariant pVarResult = auto.getProperty(rgdispid[0]);", "+\t\t\t\t\t\t\t\t\tpVarResult = auto.getProperty(rgdispid[0]);", "+\t\t\t\t\t\t\t\t\tIDispatch dispatchDocument = pVarResult.getDispatch();", "+\t\t\t\t\t\t\t\t\tpVarResult.dispose();", "+\t\t\t\t\t\t\t\t\tint[] ppvObject = new int[1];", "+\t\t\t\t\t\t\t\t\tint result = dispatchDocument.QueryInterface(COM.IIDIPersistStreamInit, ppvObject);", "+\t\t\t\t\t\t\t\t\tif (result == OS.S_OK) {", "+\t\t\t\t\t\t\t\t\t\tIPersistStreamInit persistStreamInit = new IPersistStreamInit(ppvObject[0]);", "+\t\t\t\t\t\t\t\t\t\tif (persistStreamInit.InitNew() == OS.S_OK) {", "+\t\t\t\t\t\t\t\t\t\t\tpersistStreamInit.Load(ppstm[0]);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tpersistStreamInit.Release();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tdispatchDocument.Release();", "+\t\t\t\t\t\t\t\t\tIUnknown stream = new IUnknown(ppstm[0]);", "+\t\t\t\t\t\t\t\t\tstream.Release();", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tOS.GlobalFree(hGlobal);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tvarResult = event.arguments[1];", "+\t\t\t\t\t\t\tString url = varResult.getString();", "+\t\t\t\t\t\t\tLocationEvent locationEvent = new LocationEvent(Browser.this);", "+\t\t\t\t\t\t\tlocationEvent.location = url;", "-\t\t\t\t\t\t\t\tlocationListeners[i].changed(newEvent);", "-\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tlocationListeners[i].changed(locationEvent);", "+\t\t\t\t\t\t\tProgressEvent progressEvent = new ProgressEvent(Browser.this);", "+\t\t\t\t\t\t\tfor (int i = 0; i < progressListeners.length; i++)", "+\t\t\t\t\t\t\t\tprogressListeners[i].completed(progressEvent);", "+\t\t\t\t\t\t}", "-\t\t\t\t\treturn;", "+\t\t\t\t\t", "+\t\t\t\t\t/*", "+\t\t\t\t\t* This code is intentionally commented.  A Variant constructed from an", "+\t\t\t\t\t* OleAutomation object does not increase its reference count.  The IDispatch", "+\t\t\t\t\t* obtained from this Variant did not increase the reference count for the", "+\t\t\t\t\t* OleAutomation instance either. ", "+\t\t\t\t\t*/", "+\t\t\t\t\t//top.Release();", "+\t\t\t\t\t//variant.dispose();", "+\t\t\t\t\t\t", "+\t\t\t\t\t/*", "+\t\t\t\t\t* This code is intentionally commented.  This IDispatch was received", "+\t\t\t\t\t* as an argument from the OleEvent and it will be disposed along with", "+\t\t\t\t\t* the other arguments.  ", "+\t\t\t\t\t*/", "+\t\t\t\t\t//dispatch.Release();", "+\t\t\t\t\tbreak;", "-\t\t\t\t\tint nProgress = (arg1 == null || arg1.getType() != OLE.VT_I4) ? 0 : arg1.getInt(); // may be -1", "+\t\t\t\t\tint nProgress = arg1.getType() != OLE.VT_I4 ? 0 : arg1.getInt(); // may be -1", "-\t\t\t\t\tint nProgressMax = (arg2 == null || arg2.getType() != OLE.VT_I4) ? 0 : arg2.getInt();", "+\t\t\t\t\tint nProgressMax = arg2.getType() != OLE.VT_I4 ? 0 : arg2.getInt();", "-\t\t\t\t\tif (progressListeners != null) {", "-\t\t\t\t\t\tif (nProgress != -1) {", "-\t\t\t\t\t\t\tfor (int i = 0; i < progressListeners.length; i++)", "-\t\t\t\t\t\t\t\tprogressListeners[i].changed(newEvent);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tfor (int i = 0; i < progressListeners.length; i++)", "-\t\t\t\t\t\t\t\tprogressListeners[i].completed(newEvent);", "-\t\t\t\t\t\t}", "+\t\t\t\t\tif (nProgress != -1) {", "+\t\t\t\t\t\tfor (int i = 0; i < progressListeners.length; i++)", "+\t\t\t\t\t\t\tprogressListeners[i].changed(newEvent);", "-\t\t\t\t\treturn;", "+\t\t\t\t\tbreak;", "-\t\t\t\t\tif (arg1 == null || arg1.getType() != OLE.VT_BSTR)\treturn;", "-\t\t\t\t\tString text = arg1.getString();", "-\t\t\t\t\tStatusTextEvent newEvent = new StatusTextEvent(Browser.this);", "-\t\t\t\t\tnewEvent.text = text;", "-\t\t\t\t\tif (statusTextListeners != null) {", "+\t\t\t\t\tif (arg1.getType() == OLE.VT_BSTR) {", "+\t\t\t\t\t\tString text = arg1.getString();", "+\t\t\t\t\t\tStatusTextEvent newEvent = new StatusTextEvent(Browser.this);", "+\t\t\t\t\t\tnewEvent.text = text;", "-\t\t\t\t\treturn;", "+\t\t\t\t\tbreak;", "+\t\t\t", "+\t\t\t/*", "+\t\t\t* Dispose all arguments passed in the OleEvent.  This must be", "+\t\t\t* done to properly release any IDispatch reference that was", "+\t\t\t* automatically addRef'ed when constructing the OleEvent.  ", "+\t\t\t*/", "+\t\t\tVariant[] arguments = event.arguments;", "+\t\t\tfor (int i = 0; i < arguments.length; i++) arguments[i].dispose();", "-\tsite.addEventListener(NavigateComplete2, listener);", "+\tsite.addEventListener(DocumentComplete, listener);"]}], "num": 12398}
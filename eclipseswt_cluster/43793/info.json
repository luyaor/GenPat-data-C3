{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0240aa68b289be713f0f60b5d82cbdff", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba9c4a3d3a97eaafd1beee1697beb408", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Cursor.java", "commitBeforeChange": "8e8948c2d9f563b5d8efb9026007786b0ad7da0e", "commitAfterChange": "aa900beeb02e75776dbdc9bb334fed8230dde2aa", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Cursor(Device device, ImageData source, ImageData mask, int hotspotX, int hotspotY)", "signatureAfterChange": " public Cursor(Device device, ImageData source, ImageData mask, int hotspotX, int hotspotY)", "diff": ["-\t\tfor (int x= 0; x < width; x++) {", "-\t\t\tint bit= 1 >> x;", "-\t\t\tif (source.getPixel(x, y) != 0) d |= bit;", "-\t\t\tif (mask.getPixel(x, y) != 0) m |= bit;", "+\t\tfor (int x = 0; x < width; x++) {", "+\t\t\tint bit = 1 << (width - 1 - x);", "+\t\t\tif (source.getPixel(x, y) == 0) {", "+\t\t\t\tm |= bit;", "+\t\t\t\tif (mask.getPixel(x, y) == 0) d |= bit;", "+\t\t\t} else if (mask.getPixel(x, y) != 0) {", "+\t\t\t\td |= bit;", "+\t\t\t}", "+\t\t}", "+\t\tsrcData[y] = d;", "+\t\tmaskData[y] = m;", "+\t}", "+\tcursor.hotSpot_h = (short)Math.min(16, hotspotX);", "+\tcursor.hotSpot_v = (short)Math.min(16, hotspotY);", "+\thandle = OS.NewPtr(org.eclipse.swt.internal.carbon.Cursor.sizeof);", "+\tif (handle == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tOS.memcpy(handle, cursor, org.eclipse.swt.internal.carbon.Cursor.sizeof);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91a1d0af3f641101852cf49c5b65c270", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/TreeColumn.java", "commitBeforeChange": "14c9d3ab49d172b476463a3ef9aaefb8f6d0aa7f", "commitAfterChange": "24db6e2924fd8cba4c2fea4a2b9adc8dfc258694", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "  int HandleConvert (int value, int targetType, int parameter, int culture)", "signatureAfterChange": "  void hookEvents()", "diff": ["-int HandleConvert (int value, int targetType, int parameter, int culture) {", "-\tint imageSourceType = OS.ImageSource_typeid (); ", "-\tint result = 0;", "-\tif (OS.Object_Equals (imageSourceType, targetType)) {", "-\t\tif (image != null) result = image.handle;", "-\t} else {", "-\t\tif (text != null) {", "-\t\t\tresult = stringPtr;", "-\t\t\tif (result == 0) {", "-\t\t\t\tresult = stringPtr = createDotNetString (text, false);", "-\t\t\t}", "-\t\t}", "-\t}", "-\tOS.GCHandle_Free (imageSourceType);", "-\treturn result;", "-}", "+void hookEvents() {", "+\tsuper.hookEvents ();", "+\tint handler = OS.gcnew_RoutedEventHandler (jniRef, \"HandleLoaded\");", "+\tif (handler == 0) error (SWT.ERROR_NO_HANDLES);", "+\tOS.FrameworkElement_Loaded (headerHandle, handler);", "+\tOS.GCHandle_Free (handler);", "+}"]}], "num": 43793}
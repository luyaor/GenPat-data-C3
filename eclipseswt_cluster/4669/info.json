{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67f2e783a325f4dd0a912f4f1e1e217e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ec2e797761b6f044b0b1c4d07e39272", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "7b1329ce4559c314d7caaf6d49255a2e36ae8db9", "commitAfterChange": "24fd6f27ac88e7d1cba0fa9d22650617bd958c27", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "  static Object convertToJava(int jsVal)", "signatureAfterChange": "  static int invokeFunction (int functionId, int tokenVariant, int args)", "diff": ["-static Object convertToJava(int /*long*/ jsVal) {", "-\t/*", "-typedef uint8 JSValueType;", "-#define JSVAL_TYPE_DOUBLE            ((uint8)0x00)", "-#define JSVAL_TYPE_INT32             ((uint8)0x01)", "-#define JSVAL_TYPE_UNDEFINED         ((uint8)0x02)", "-#define JSVAL_TYPE_BOOLEAN           ((uint8)0x03)", "-#define JSVAL_TYPE_MAGIC             ((uint8)0x04)", "-#define JSVAL_TYPE_STRING            ((uint8)0x05)", "-#define JSVAL_TYPE_NULL              ((uint8)0x06)", "-#define JSVAL_TYPE_OBJECT            ((uint8)0x07)", "-#define JSVAL_TYPE_UNKNOWN           ((uint8)0x20)", "-#define JSVAL_TYPE_NONFUNOBJ         ((uint8)0x57)", "-#define JSVAL_TYPE_FUNOBJ            ((uint8)0x67)", "-#define JSVAL_TYPE_STRORNULL         ((uint8)0x77)", "-#define JSVAL_TYPE_OBJORNULL         ((uint8)0x78)", "-#define JSVAL_TYPE_BOXED             ((uint8)0x79)", "-#define JSVAL_TYPE_UNINITIALIZED     ((uint8)0x7d)", "-jsval_layout PRIVATE_PTR_TO_JSVAL_IMPL(void *ptr)", "-\t*/", "-\t", "+", "+static int /*long*/ invokeFunction (int functionId, int /*long*/ tokenVariant, int /*long*/ args) {", "+\tObject key = new Integer (functionId);", "+\tBrowserFunction function = (BrowserFunction)Mozilla.AllFunctions.get (key);", "+\tObject returnValue = null;", "+", "+\tif (function != null) {", "+\t\ttry {", "+\t\t\tshort[] type = new short[1]; /* PRUint16 */", "+\t\t\tnsIVariant variant = new nsIVariant (tokenVariant);", "+\t\t\tint rc = variant.GetDataType (type);", "+\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\tObject temp = convertToJava (variant, type[0]);", "+\t\t\ttype[0] = 0;", "+\t\t\tif (temp instanceof String) {", "+\t\t\t\tString token = (String)temp;", "+\t\t\t\tif (token.equals (function.token)) {", "+\t\t\t\t\tvariant = new nsIVariant (args);", "+\t\t\t\t\trc = variant.GetDataType (type);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\t\t\ttemp = convertToJava (variant, type[0]);", "+\t\t\t\t\tif (temp instanceof Object[]) {", "+\t\t\t\t\t\tObject[] arguments = (Object[])temp;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\treturnValue = function.function (arguments);", "+\t\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\t\t/* exception during function invocation */", "+\t\t\t\t\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t\t/* invalid argument value type */", "+\t\t\tif (function.isEvaluate) {", "+\t\t\t\t/* notify the evaluate function so that a java exception can be thrown */", "+\t\t\t\tfunction.function (new String[] {WebBrowser.CreateErrorString (new SWTException (SWT.ERROR_INVALID_RETURN_VALUE).getLocalizedMessage ())});", "+\t\t\t}", "+\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());", "+\t\t}", "+\t}", "+", "+\tint /*long*/[] result = new int /*long*/[1];", "+\tint rc = XPCOM.NS_GetComponentManager (result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+\tnsIComponentManager componentManager = new nsIComponentManager (result[0]);", "+\tresult[0] = 0;", "+\tnsIVariant variant;", "+\ttry {", "+\t\tvariant = convertToJS (returnValue, componentManager);", "+\t} catch (SWTException e) {", "+\t\t/* invalid return value type */", "+\t\tvariant = convertToJS (WebBrowser.CreateErrorString (e.getLocalizedMessage ()), componentManager);", "+\t}", "+\tcomponentManager.Release ();", "+", "+\treturn variant.getAddress ();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9424456b1e6f9ba9d794f47e1467535d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/PromptService2.java", "commitBeforeChange": "8093e4de11a4b3e09a48b5b00387350ee1d8feab", "commitAfterChange": "13c317ac82402adf05ac5fa6773736f7f5a76841", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  int PromptAuth(int aParent, int aChannel, int level, int authInfo, int checkboxLabel, int checkboxValue, int _retval)", "signatureAfterChange": "  int PromptAuth(int aParent, int aChannel, int level, int authInfo, int checkboxLabel, int checkboxValue, int _retval)", "diff": ["+\tnsIAuthInformation auth = new nsIAuthInformation (authInfo);", "+", "+\tnsIChannel channel = new nsIChannel (aChannel);", "+\tint /*long*/[] uri = new int /*long*/[1];", "+\tint rc = channel.GetURI (uri);", "+\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\tif (uri[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIURI nsURI = new nsIURI (uri[0]);", "+\tint /*long*/ host = XPCOM.nsEmbedCString_new ();", "+\trc = nsURI.GetHost (host);", "+\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\tint length = XPCOM.nsEmbedCString_Length (host);", "+\tint /*long*/ buffer = XPCOM.nsEmbedCString_get (host);", "+\tbyte[] bytes = new byte[length];", "+\tXPCOM.memmove (bytes, buffer, length);", "+\tString hostString = new String (bytes);", "+\tXPCOM.nsEmbedCString_delete (host);", "+", "+\tint /*long*/ spec = XPCOM.nsEmbedCString_new ();", "+\trc = nsURI.GetSpec (spec);", "+\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\tlength = XPCOM.nsEmbedCString_Length (spec);", "+\tbuffer = XPCOM.nsEmbedCString_get (spec);", "+\tbytes = new byte[length];", "+\tXPCOM.memmove (bytes, buffer, length);", "+\tString urlString = new String (bytes);", "+\tXPCOM.nsEmbedCString_delete (spec);", "+\tnsURI.Release ();", "+", "+\tif (browser != null) {", "+\t\tMozilla mozilla = (Mozilla)browser.webBrowser;", "+\t\t/*", "+\t\t * Do not invoke the listeners if this challenge has been failed too many", "+\t\t * times because a listener is likely giving incorrect credentials repeatedly", "+\t\t * and will do so indefinitely.", "+\t\t */", "+\t\tif (mozilla.authCount++ < 3) {", "+\t\t\tfor (int i = 0; i < mozilla.authenticationListeners.length; i++) {", "+\t\t\t\tAuthenticationEvent event = new AuthenticationEvent (browser);", "+\t\t\t\tevent.location = urlString;", "+\t\t\t\tmozilla.authenticationListeners[i].authenticate (event);", "+\t\t\t\tif (!event.doit) {", "+\t\t\t\t\tXPCOM.memmove (_retval, new int[] {0}, 4);\t/* PRBool */", "+\t\t\t\t\treturn XPCOM.NS_OK;", "+\t\t\t\t}", "+\t\t\t\tif (event.user != null && event.password != null) {", "+\t\t\t\t\tnsEmbedString string = new nsEmbedString (event.user);", "+\t\t\t\t\trc = auth.SetUsername (string.getAddress ());", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\t\t\t\t\tstring.dispose ();", "+\t\t\t\t\tstring = new nsEmbedString (event.password);", "+\t\t\t\t\trc = auth.SetPassword (string.getAddress ());", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\t\t\t\t\tstring.dispose ();", "+\t\t\t\t\tXPCOM.memmove (_retval, new int[] {1}, 4);\t/* PRBool */", "+\t\t\t\t\treturn XPCOM.NS_OK;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+", "+\t/* no listener handled the challenge, so show an authentication dialog */", "+", "-\t\tint length = XPCOM.strlen_PRUnichar (checkboxLabel);", "+\t\tlength = XPCOM.strlen_PRUnichar (checkboxLabel);", "-\tnsIAuthInformation auth = new nsIAuthInformation (authInfo);", "-", "-\tint rc = auth.GetUsername (ptr);", "+\trc = auth.GetUsername (ptr);", "-\tint length = XPCOM.nsEmbedString_Length (ptr);", "-\tint /*long*/ buffer = XPCOM.nsEmbedString_get (ptr);", "+\tlength = XPCOM.nsEmbedString_Length (ptr);", "+\tbuffer = XPCOM.nsEmbedString_get (ptr);", "-\tnsIChannel channel = new nsIChannel (aChannel);", "-\tint /*long*/[] uri = new int /*long*/[1];", "-\trc = channel.GetURI (uri);", "-\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "-\tif (uri[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "-", "-\tnsIURI nsURI = new nsIURI (uri[0]);", "-\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new ();", "-\trc = nsURI.GetHost (aSpec);", "-\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "-\tlength = XPCOM.nsEmbedCString_Length (aSpec);", "-\tbuffer = XPCOM.nsEmbedCString_get (aSpec);", "-\tbyte[] bytes = new byte[length];", "-\tXPCOM.memmove (bytes, buffer, length);", "-\tXPCOM.nsEmbedCString_delete (aSpec);", "-\tString host = new String (bytes);", "-\tnsURI.Release ();", "-", "-\tif (realm.length () > 0 && host.length () > 0) {", "-\t\tmessage = Compatibility.getMessage (\"SWT_Enter_Username_and_Password\", new String[] {realm, host}); //$NON-NLS-1$", "+\tif (realm.length () > 0 && hostString.length () > 0) {", "+\t\tmessage = Compatibility.getMessage (\"SWT_Enter_Username_and_Password\", new String[] {realm, hostString}); //$NON-NLS-1$"]}], "num": 4669}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72c061aac71da76a6b6709a9946359a1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b472f9eacc647989e11e906d72c5d33", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ec7edbaede68f4fd7608786e759e23fd6dbe2200", "commitAfterChange": "b206c3d5f3a448a2b6dfbc2c13ed7e271cef1597", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 139, "signatureBeforeChange": "\r StyledTextEvent getLineStyleData(int lineOffset, String line)", "signatureAfterChange": "\r StyledTextEvent getLineStyleData(int lineOffset, String line)", "diff": ["- */\r", "-StyledTextEvent getLineStyleData(int lineOffset, String line) {\r", "-\tif (isListening(LineGetStyle)) {\r", "-\t\tStyledTextEvent event = getLineEvent(lineOffset, line);\r", "-\r", "-\t\tnotifyListeners(LineGetStyle, event);\r", "-\t\tif (event.styles != null && wordWrap) {\r", "-\t\t\tevent.styles = getVisualLineStyleData(event.styles, lineOffset, line.length());\r", "-\t\t}\r", "-\t\tif (event.styles == null) {\r", "-\t\t\tevent.styles = new StyleRange[0];\r", "-\t\t}\r", "-\t\telse\r", "-\t\tif (isBidi()) {\r", "-\t\t\tGC gc = new GC(this);\r", "-\t\t\tif (StyledTextBidi.isLigated(gc)) {\r", "-\t\t\t\t// Check for ligatures that are partially styled, if one is found\r", "-\t\t\t\t// automatically apply the style to the entire ligature.\r", "-\t\t\t\t// Since ligatures can't extend over multiple lines (they aren't \r", "-\t\t\t\t// ligatures if they are separated by a line delimiter) we can ignore\r", "-\t\t\t\t// style starts or ends that are not on the current line.\r", "-\t\t\t\t// Note that there is no need to deal with segments when checking for\r", "-\t\t\t\t// the ligatures.\r", "-\t\t\t\tint lineLength = line.length();\r", "-\t\t\t\tStyledTextBidi bidi = new StyledTextBidi(gc, line, new int[] {0, lineLength});\r", "-\t\t\t\tfor (int i=0; i<event.styles.length; i++) {\r", "-\t\t\t\t\tStyleRange range = event.styles[i];\r", "-\t\t\t\t\tStyleRange newRange = null;\r", "-\t\t\t\t\tint relativeStart = range.start - lineOffset;\r", "-\t\t\t\t\tif (relativeStart >= 0) {\r", "-\t\t\t\t\t\tint startLigature = bidi.getLigatureStartOffset(relativeStart);\r", "-\t\t\t\t\t\tif (startLigature != relativeStart) {\r", "-\t\t\t\t\t\t\tnewRange = (StyleRange) range.clone();\r", "-\t\t\t\t\t\t\trange = event.styles[i] = newRange;\r", "-\t\t\t\t\t\t\trange.start = range.start - (relativeStart - startLigature);\r", "-\t\t\t\t\t\t\trange.length = range.length + (relativeStart - startLigature);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tint rangeEnd = range.start + range.length;\r", "-\t\t\t\t\tint relativeEnd = rangeEnd - lineOffset - 1;\r", "-\t\t\t\t\tif (relativeEnd < lineLength) {\r", "-\t\t\t\t\t\tint endLigature = bidi.getLigatureEndOffset(relativeEnd);\r", "-\t\t\t\t\t\tif (endLigature != relativeEnd) {\r", "-\t\t\t\t\t\t\tif (newRange == null) {\r", "-\t\t\t\t\t\t\t\tnewRange = (StyleRange) range.clone();\r", "-\t\t\t\t\t\t\t\trange = event.styles[i] = newRange;\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\trange.length = range.length + (endLigature - relativeEnd);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t        }\r", "-\t\t    }\r", "-\t\t    gc.dispose();\r", "-\t\t}\r", "-\t\treturn event;\r", "-\t}\r", "-\treturn null;\r", "-}\r", "+ */\r", "+StyledTextEvent getLineStyleData(int lineOffset, String line) {\r", "+\treturn sendLineEvent(LineGetStyle, lineOffset, line);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "922687f35523cd17a9ff2698f7820cbf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextRenderer.java", "commitBeforeChange": "5544ce1d748561f71c4f1d1997c431f82e5c4c86", "commitAfterChange": "24e0049851c0d0a09cb9f25e5892d112e2936fed", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 16, "signatureBeforeChange": " StyledTextEvent getLineStyleData(StyledTextEvent event, int lineOffset, String line)", "signatureAfterChange": " StyledTextEvent getLineStyleData(StyledTextEvent event, int lineOffset, String line)", "diff": ["-\telse", "-\tif (isBidi()) {", "-\t\tGC gc = getGC();", "-\t\tif (StyledTextBidi.isLigated(gc)) {", "-\t\t\t// Check for ligatures that are partially styled, if one is found", "-\t\t\t// automatically apply the style to the entire ligature.", "-\t\t\t// Since ligatures can't extend over multiple lines (they aren't ", "-\t\t\t// ligatures if they are separated by a line delimiter) we can ignore", "-\t\t\t// style starts or ends that are not on the current line.", "-\t\t\t// Note that there is no need to deal with segments when checking for", "-\t\t\t// the ligatures.", "-\t\t\tStyledTextBidi bidi = new StyledTextBidi(gc, line, new int[] {0, lineLength});", "-\t\t\tfor (int i=0; i<event.styles.length; i++) {", "-\t\t\t\tStyleRange range = event.styles[i];", "-\t\t\t\tStyleRange newRange = null;", "-\t\t\t\tint relativeStart = range.start - lineOffset;", "-\t\t\t\tif (relativeStart >= 0) {", "-\t\t\t\t\tint startLigature = bidi.getLigatureStartOffset(relativeStart);", "-\t\t\t\t\tif (startLigature != relativeStart) {", "-\t\t\t\t\t\tnewRange = (StyleRange) range.clone();", "-\t\t\t\t\t\trange = event.styles[i] = newRange;", "-\t\t\t\t\t\trange.start = range.start - (relativeStart - startLigature);", "-\t\t\t\t\t\trange.length = range.length + (relativeStart - startLigature);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tint rangeEnd = range.start + range.length;", "-\t\t\t\tint relativeEnd = rangeEnd - lineOffset - 1;", "-\t\t\t\tif (relativeEnd < lineLength) {", "-\t\t\t\t\tint endLigature = bidi.getLigatureEndOffset(relativeEnd);", "-\t\t\t\t\tif (endLigature != relativeEnd) {", "-\t\t\t\t\t\tif (newRange == null) {", "-\t\t\t\t\t\t\tnewRange = (StyleRange) range.clone();", "-\t\t\t\t\t\t\trange = event.styles[i] = newRange;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\trange.length = range.length + (endLigature - relativeEnd);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t        }", "-\t    }", "-\t    disposeGC(gc);", "-\t}"]}], "num": 50742}
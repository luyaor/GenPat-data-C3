{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8a5814fe1891fce0ff3d9d6ec5ae9618", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d7cbb802232e6ff2f020845fc4d4ed3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "094d741e56b6f436da51b017270886d4b72c6a8d", "commitAfterChange": "bd6625b33ee8355959ac2791f092e41f5e4be559", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void removeRelation(int type, Accessible target)", "signatureAfterChange": " \tpublic void removeRelation(int type, Accessible target)", "diff": ["-\t\tfor (int i = relations.size() - 1; i >= 0; i--) {", "-\t\t\tRelation relation = (Relation)relations.elementAt(i);", "-\t\t\tif (relation.type == type && relation.target == target) {", "-\t\t\t\trelations.remove(i);", "-\t\t\t\tif (accessibleObject != null) {", "-\t\t\t\t\taccessibleObject.removeRelation(relation.type, relation.target);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "+\t\tRelation relation = new Relation(type, target);", "+\t\tint index = relations.indexOf(relation);", "+\t\tif (index == -1) return;", "+\t\trelations.remove(index);", "+\t\tif (accessibleObject != null) accessibleObject.removeRelation(type, target);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da07739bed1a8fac700e069e74e18155", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 35, "signatureBeforeChange": "  \tAccessibleTextListener[] getTextListeners ()", "signatureAfterChange": " \tpublic void removeRelation(int type, Accessible target)", "diff": ["-", "-\tAccessibleTextListener[] getTextListeners () {", "-\t\tif (textListeners == null) return null;", "-\t\tAccessibleTextListener[] result = new AccessibleTextListener [textListeners.size ()];", "-\t\ttextListeners.copyInto (result);", "-\t\treturn result;", "+\t */", "+\tpublic void removeRelation(int type, Accessible target) {", "+\t\tcheckWidget();", "+\t\tif (relations == null) return;", "+\t\tfor (int i = relations.size() - 1; i >= 0; i--) {", "+\t\t\tRelation relation = (Relation)relations.elementAt(i);", "+\t\t\tif (relation.type == type && relation.target == target) {", "+\t\t\t\trelations.remove(i);", "+\t\t\t\tif (accessibleObject != null) {", "+\t\t\t\t\taccessibleObject.removeRelation(relation.type, relation.target);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 10314}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f36d500d50d251d38f9c3426939f64a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03bf9796adef292dea6320dd0cebfa89", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " public Point getLocation(int offset, boolean trailing)", "signatureAfterChange": " public Point getLocation(int offset, boolean trailing)", "diff": ["-\tcomputeRuns();", "-\tint length = text.length();", "-\tif (!(0 <= offset && offset <= length)) SWT.error(SWT.ERROR_INVALID_RANGE);", "-\tif (length == 0) return new Point(0, 0);", "-\toffset = translateOffset(offset);", "-\tint /*long*/ glyphIndex = layoutManager.glyphIndexForCharacterAtIndex(offset);", "-\tNSRect rect = layoutManager.lineFragmentUsedRectForGlyphAtIndex(glyphIndex, 0);", "-\tNSPoint point = layoutManager.locationForGlyphAtIndex(glyphIndex);", "-\tif (trailing) {", "-\t\tNSRange range = new NSRange();", "-\t\trange.location = glyphIndex;", "-\t\trange.length = 1;", "-\t\tNSRect bounds = layoutManager.boundingRectForGlyphRange(range, textContainer);", "-\t\tpoint.x += bounds.width;", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tcomputeRuns();", "+\t\tint length = text.length();", "+\t\tif (!(0 <= offset && offset <= length)) SWT.error(SWT.ERROR_INVALID_RANGE);", "+\t\tif (length == 0) return new Point(0, 0);", "+\t\toffset = translateOffset(offset);", "+\t\tint /*long*/ glyphIndex = layoutManager.glyphIndexForCharacterAtIndex(offset);", "+\t\tNSRect rect = layoutManager.lineFragmentUsedRectForGlyphAtIndex(glyphIndex, 0);", "+\t\tNSPoint point = layoutManager.locationForGlyphAtIndex(glyphIndex);", "+\t\tif (trailing) {", "+\t\t\tNSRange range = new NSRange();", "+\t\t\trange.location = glyphIndex;", "+\t\t\trange.length = 1;", "+\t\t\tNSRect bounds = layoutManager.boundingRectForGlyphRange(range, textContainer);", "+\t\t\tpoint.x += bounds.width;", "+\t\t}", "+\t\treturn new Point((int)point.x, (int)rect.y);", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "-\treturn new Point((int)point.x, (int)rect.y);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5da5bb8f9fda1e46c8d5af964d14e8a9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public int getOffset(int x, int y, int[] trailing)", "signatureAfterChange": " public int getOffset(int x, int y, int[] trailing)", "diff": ["-\tcomputeRuns();", "-\tif (trailing != null && trailing.length < 1) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "-\tint length = text.length();", "-\tif (length == 0) return 0;", "-\tNSPoint pt = new NSPoint();", "-\tpt.x = x;", "-\tpt.y = y;", "-\tfloat /*double*/[] partialFration = new float /*double*/[1];", "-\tint /*long*/ glyphIndex = layoutManager.glyphIndexForPoint(pt, textContainer, partialFration);", "-\tint /*long*/ offset = layoutManager.characterIndexForGlyphAtIndex(glyphIndex);", "-\tif (trailing != null) trailing[0] = Math.round((float)/*64*/partialFration[0]);", "-\treturn Math.min(untranslateOffset((int)/*64*/offset), length - 1);", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tcomputeRuns();", "+\t\tif (trailing != null && trailing.length < 1) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\tint length = text.length();", "+\t\tif (length == 0) return 0;", "+\t\tNSPoint pt = new NSPoint();", "+\t\tpt.x = x;", "+\t\tpt.y = y;", "+\t\tfloat /*double*/[] partialFration = new float /*double*/[1];", "+\t\tint /*long*/ glyphIndex = layoutManager.glyphIndexForPoint(pt, textContainer, partialFration);", "+\t\tint /*long*/ offset = layoutManager.characterIndexForGlyphAtIndex(glyphIndex);", "+\t\tif (trailing != null) trailing[0] = Math.round((float)/*64*/partialFration[0]);", "+\t\treturn Math.min(untranslateOffset((int)/*64*/offset), length - 1);", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09ce92c876948e2aa353c5cfe3f0cc47", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Transform.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void translate(float offsetX, float offsetY)", "signatureAfterChange": " public void translate(float offsetX, float offsetY)", "diff": ["-\thandle.translateXBy(offsetX, offsetY);", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\thandle.translateXBy(offsetX, offsetY);", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7f4f3b970eea90e93dfbd59c4ed375b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public Rectangle getBounds()", "signatureAfterChange": " public Rectangle getBounds()", "diff": ["-\tcomputeRuns();", "-\tNSRect rect = layoutManager.usedRectForTextContainer(textContainer);", "-\tif (wrapWidth != -1) rect.width = wrapWidth;", "-\tif (text.length() == 0) {", "-\t\tFont font = this.font != null ? this.font : device.systemFont;", "-\t\tNSFont nsFont = font.handle;", "-\t\trect.height = Math.max(rect.height, layoutManager.defaultLineHeightForFont(nsFont));", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tcomputeRuns();", "+\t\tNSRect rect = layoutManager.usedRectForTextContainer(textContainer);", "+\t\tif (wrapWidth != -1) rect.width = wrapWidth;", "+\t\tif (text.length() == 0) {", "+\t\t\tFont font = this.font != null ? this.font : device.systemFont;", "+\t\t\tNSFont nsFont = font.handle;", "+\t\t\trect.height = Math.max(rect.height, layoutManager.defaultLineHeightForFont(nsFont));", "+\t\t}", "+\t\trect.height = Math.max(rect.height, ascent + descent);", "+\t\treturn new Rectangle(0, 0, (int)rect.width, (int)rect.height);", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "-\trect.height = Math.max(rect.height, ascent + descent);", "-\treturn new Rectangle(0, 0, (int)rect.width, (int)rect.height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4aff9b4c887348bfb37ccd49f190847d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public FontMetrics getLineMetrics (int lineIndex)", "signatureAfterChange": " public FontMetrics getLineMetrics (int lineIndex)", "diff": ["-\tcomputeRuns();", "-\tint lineCount = getLineCount();", "-\tif (!(0 <= lineIndex && lineIndex < lineCount)) SWT.error(SWT.ERROR_INVALID_RANGE);", "-\tint length = text.length();", "-\tif (length == 0) {", "-\t\tFont font = this.font != null ? this.font : device.systemFont;", "-\t\tNSFont nsFont = font.handle;", "-\t\tint ascent = (int)(0.5f + nsFont.ascender());", "-\t\tint descent = (int)(0.5f + (-nsFont.descender() + nsFont.leading()));\t", "-\t\tascent = Math.max(ascent, this.ascent);", "-\t\tdescent = Math.max(descent, this.descent);", "-\t\treturn FontMetrics.cocoa_new(ascent, descent, 0, 0, ascent + descent);", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tcomputeRuns();", "+\t\tint lineCount = getLineCount();", "+\t\tif (!(0 <= lineIndex && lineIndex < lineCount)) SWT.error(SWT.ERROR_INVALID_RANGE);", "+\t\tint length = text.length();", "+\t\tif (length == 0) {", "+\t\t\tFont font = this.font != null ? this.font : device.systemFont;", "+\t\t\tNSFont nsFont = font.handle;", "+\t\t\tint ascent = (int)(0.5f + nsFont.ascender());", "+\t\t\tint descent = (int)(0.5f + (-nsFont.descender() + nsFont.leading()));\t", "+\t\t\tascent = Math.max(ascent, this.ascent);", "+\t\t\tdescent = Math.max(descent, this.descent);", "+\t\t\treturn FontMetrics.cocoa_new(ascent, descent, 0, 0, ascent + descent);", "+\t\t}", "+\t\tRectangle rect = getLineBounds(lineIndex);", "+\t\tint baseline = (int)layoutManager.typesetter().baselineOffsetInLayoutManager(layoutManager, getLineOffsets()[lineIndex]);", "+\t\treturn FontMetrics.cocoa_new(rect.height - baseline, baseline, 0, 0, rect.height);", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "-\tRectangle rect = getLineBounds(lineIndex);", "-\tint baseline = (int)layoutManager.typesetter().baselineOffsetInLayoutManager(layoutManager, getLineOffsets()[lineIndex]);", "-\treturn FontMetrics.cocoa_new(rect.height - baseline, baseline, 0, 0, rect.height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a69ce233424d9542e64251b2a9a1e16", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public Rectangle getBounds(int start, int end)", "signatureAfterChange": " public Rectangle getBounds(int start, int end)", "diff": ["-\tcomputeRuns();", "-\tint length = text.length();", "-\tif (length == 0) return new Rectangle(0, 0, 0, 0);", "-\tif (start > end) return new Rectangle(0, 0, 0, 0);", "-\tstart = Math.min(Math.max(0, start), length - 1);", "-\tend = Math.min(Math.max(0, end), length - 1);", "-\tstart = translateOffset(start);", "-\tend = translateOffset(end);", "-\tNSRange range = new NSRange();", "-\trange.location = layoutManager.glyphIndexForCharacterAtIndex(start);", "-\trange.length = layoutManager.glyphIndexForCharacterAtIndex(end + 1) - range.location;", "-\tNSRect rect = layoutManager.boundingRectForGlyphRange(range, textContainer);", "-\treturn new Rectangle((int)rect.x, (int)rect.y, (int)Math.ceil(rect.width), (int)Math.ceil(rect.height));", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tcomputeRuns();", "+\t\tint length = text.length();", "+\t\tif (length == 0) return new Rectangle(0, 0, 0, 0);", "+\t\tif (start > end) return new Rectangle(0, 0, 0, 0);", "+\t\tstart = Math.min(Math.max(0, start), length - 1);", "+\t\tend = Math.min(Math.max(0, end), length - 1);", "+\t\tstart = translateOffset(start);", "+\t\tend = translateOffset(end);", "+\t\tNSRange range = new NSRange();", "+\t\trange.location = layoutManager.glyphIndexForCharacterAtIndex(start);", "+\t\trange.length = layoutManager.glyphIndexForCharacterAtIndex(end + 1) - range.location;", "+\t\tNSRect rect = layoutManager.boundingRectForGlyphRange(range, textContainer);", "+\t\treturn new Rectangle((int)rect.x, (int)rect.y, (int)Math.ceil(rect.width), (int)Math.ceil(rect.height));", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cc39aae5065cef59f503f3a3c8dca82", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Transform.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public boolean isIdentity()", "signatureAfterChange": " public boolean isIdentity()", "diff": ["-\tNSAffineTransformStruct struct = handle.transformStruct();", "-\treturn struct.m11 == 1 && struct.m12 == 0 && struct.m21 == 0 && struct.m22 == 1 && struct.tX == 0 && struct.tY == 0;", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tNSAffineTransformStruct struct = handle.transformStruct();", "+\t\treturn struct.m11 == 1 && struct.m12 == 0 && struct.m21 == 0 && struct.m22 == 1 && struct.tX == 0 && struct.tY == 0;", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "+\t}"]}], "num": 38734}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea62d528e309d9579548e6206e4ca167", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a2dcda710f6ea809c27c7c0957fb637", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "4938351c97ddf2abc688b6566164ff2ff50f9686", "commitAfterChange": "f607e498eedc9325f9915916043a8d3ad8099e2a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void destroyItem (TreeItem item)", "signatureAfterChange": "  void destroyItem (TreeItem item)", "diff": ["+\t/*", "+\t* Bug in GTK. GTK causes a segment fault when a root tree item", "+\t* is destroyed while a leaf tree item is selected.  This only", "+\t* happens on versions earlier than 2.0.6.  The fix is to collapse", "+\t* the tree item being destroyed if it is a root tree item.", "+\t*/", "+\tif (OS.gtk_major_version () == 2 && OS.gtk_minor_version () == 0 && OS.gtk_micro_version () < 6) {", "+\t\tTreeItem[] roots = getItems (0);", "+\t\tfor (int i = 0; i < roots.length; i++) {", "+\t\t\tif (item == roots[i]) {", "+\t\t\t\titem.setExpanded (false);", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c537c498cdcc6a528b4a3ee917a6ef25", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/coolbar/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "45839029e973e1dc7c831a4e35152029794de180", "commitAfterChange": "fd9b5f1696d9dafd72c139451ffea61381d4ef51", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r void onDispose()", "signatureAfterChange": "\r void onDispose()", "diff": ["+\t/*\r", "+\t * Usually when an item is disposed, destroyItem will change the size of the items array\r", "+\t * and reset the bounds of all the remaining cool items.\r", "+\t * Since the whole cool bar is being disposed, this is not necessary.  For speed\r", "+\t * the inDispose flag is used to skip over this part of the item dispose.\r", "+\t */\r", "+\tinDispose = true;\r", "+\tfor (int i = 0; i < items.length; i++) {\r", "+\t\tfor (int j = 0; j < items[i].length; j++) {\r", "+\t\t\titems[i][j].dispose();\r", "+\t\t}\r", "+\t}\r"]}], "num": 39039}
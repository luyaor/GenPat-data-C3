{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e83e53aa2f47437ef87c0b7803f122af", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89c402265f5c19fa089c01d033580686", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_TableColumn.java", "commitBeforeChange": "5a8cb08e8087589e7d19940d8bf3f1aaafd57c94", "commitAfterChange": "bccc589a105ee7f59092bce7c6038d31ce23d574", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public void test_getWidth()", "signatureAfterChange": "  public void test_getWidth()", "diff": ["-\tfinal int DEFAULT_WIDTH = 10;", "-\tassertTrue(\":a: width=\" + tableColumn.getWidth() + \" should be=\" + DEFAULT_WIDTH, tableColumn.getWidth() == DEFAULT_WIDTH);", "-", "-\tassertTrue(\":c: width=\" + tableColumn.getWidth() + \" should be=\" + 0, tableColumn.getWidth() == 0);", "+\tassertTrue(\":a: width=\" + tableColumn.getWidth() + \" should be=\" + 0, tableColumn.getWidth() == 0);", "-\tassertTrue(\":d: width=\" + tableColumn.getWidth() + \" should be=\" + testWidth, tableColumn.getWidth() == testWidth);", "+\tassertTrue(\":b: width=\" + tableColumn.getWidth() + \" should be=\" + testWidth, tableColumn.getWidth() == testWidth);", "-\tassertTrue(\":e: width=\" + tableColumn.getWidth() + \" should be=\" + testWidth, tableColumn.getWidth() == testWidth);", "+\tassertTrue(\":c: width=\" + tableColumn.getWidth() + \" should be=\" + testWidth, tableColumn.getWidth() == testWidth);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1709885bb9dbd644782c8fe9e63c02a9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/InputStream.java", "commitBeforeChange": "3ef094ddb76ed774d414ef60455bfb48d085f224", "commitAfterChange": "dbb652fe193019d96be9d6af80af3f6e1918e181", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \r int ReadSegments(int aWriter, int aClosure, int aCount, int _retval)", "signatureAfterChange": "\r \r int ReadSegments(int aWriter, int aClosure, int aCount, int _retval)", "diff": ["-\tint available = buffer == null ? 0 : buffer.length - index;\r", "-\tint cnt = Math.min(aCount, available);\r", "-\tif (cnt == 0) {\r", "-\t\t/* end of stream */\r", "-\t\tXPCOM.memmove(_retval, new int[] {0}, 4);\r", "-\t\treturn XPCOM.NS_OK;\r", "-\t}\r", "-\tint[] aWriteCount = new int[1];\r", "-\tint rc = XPCOM.nsWriteSegmentFun(aWriter, getAddress(), aClosure, buffer, index, cnt, aWriteCount);\r", "-\tif (rc == XPCOM.NS_OK) {\r", "+\tint max = Math.min(aCount, buffer == null ? 0 : buffer.length - index);\r", "+\tint cnt = max;\r", "+\twhile (cnt > 0) {\r", "+\t\tint[] aWriteCount = new int[1];\r", "+\t\tint rc = XPCOM.Call(aWriter, getAddress(), aClosure, buffer, index, cnt, aWriteCount);\r", "+\t\tif (rc != XPCOM.NS_OK) break;\r", "-\t\tavailable = buffer.length - index;\r", "-\t\tif (available == 0) {\r", "-\t\t\t/* end of stream */\r", "-\t\t\tXPCOM.memmove(_retval, new int[] {0}, 4);\r", "-\t\t}\r", "+\t\tcnt -= aWriteCount[0];\r", "+\tXPCOM.memmove(_retval, new int[] {max - cnt}, 4);\r"]}], "num": 32688}
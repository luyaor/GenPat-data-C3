{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec7c071bbe2603837216aa843b6840f6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "764b76a31020a6785d3476b6889dc4b1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/Check64CompilationParticipant.java", "commitBeforeChange": "707201eb4b42e8801cd1f93d4602857a1e480742", "commitAfterChange": "910ea35086f5d124dc6ca7d63b61fb183d8e3374", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t void build(IJavaProject project, String root) throws CoreException", "signatureAfterChange": " \t void build(IJavaProject project, String root) throws CoreException", "diff": ["-\tOutputStream out = null;", "+\tPrintWriter writer = null;", "-\t\tout = new BufferedOutputStream(new FileOutputStream(root + \"/out.txt\"));", "-\t\tPrintWriter writer = new PrintWriter(out);", "+\t\twriter = new PrintWriter(new BufferedOutputStream(new FileOutputStream(root + \"/out.txt\")));", "-\t\tout.close();", "-\t\tout = null;", "+\t\twriter.close();", "+\t\twriter = null;", "-\t\tif (out != null) {", "-\t\t\ttry {", "-\t\t\t\tout.close();", "-\t\t\t} catch (IOException e) {}", "-\t\t}", "+\t\tif (writer != null) writer.close();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cf169a17e4345dd8b0a02803521aee9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "dbb652fe193019d96be9d6af80af3f6e1918e181", "commitAfterChange": "a9865ce41544b9634fe7b5cf08a114ae91a2faeb", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": "  static Program gnome_getProgram(Display display, String mimeType)", "signatureAfterChange": "  static Program gnome_getProgram(Display display, String mimeType)", "diff": ["+", "+static Program gnome_getProgram(Display display, String mimeType) {", "+\tProgram program = null;", "+\tbyte[] mimeTypeBuffer = Converter.wcsToMbcs(null, mimeType, true);", "+\tint /*long*/ ptr = GNOME.gnome_vfs_mime_get_default_application(mimeTypeBuffer);", "+\tif (ptr != 0) {", "+\t\tprogram = new Program();", "+\t\tprogram.display = display;", "+\t\tprogram.name = mimeType;", "+\t\tGnomeVFSMimeApplication application = new GnomeVFSMimeApplication();", "+\t\tGNOME.memmove(application, ptr, GnomeVFSMimeApplication.sizeof);", "+\t\tint length = OS.strlen(application.command);", "+\t\tbyte[] buffer = new byte[length];", "+\t\tOS.memmove(buffer, application.command, length);\t\t", "+\t\tprogram.command = new String(Converter.mbcsToWcs(null, buffer));", "+\t\tprogram.gnomeExpectUri = application.expects_uris == GNOME.GNOME_VFS_MIME_APPLICATION_ARGUMENT_TYPE_URIS;", "+\t\t", "+\t\tlength = OS.strlen(application.id);", "+\t\tbuffer = new byte[length + 1];", "+\t\tOS.memmove(buffer, application.id, length);", "+\t\t/* ", "+\t\t* Note.  gnome_icon_theme_new uses g_object_new to allocate the data it returns.", "+\t\t* Use g_object_unref to free the pointer it returns.", "+\t\t*/", "+\t\tint /*long*/ icon_theme = GNOME.gnome_icon_theme_new();", "+\t\tint /*long*/ icon_name = GNOME.gnome_icon_lookup(icon_theme, 0, null, buffer, 0, mimeTypeBuffer, ", "+\t\t\t\tGNOME.GNOME_ICON_LOOKUP_FLAGS_NONE, null);", "+\t\tint /*long*/ path = 0;", "+\t\tif (icon_name != 0) path = GNOME.gnome_icon_theme_lookup_icon(icon_theme, icon_name, PREFERRED_ICON_SIZE, null, null);", "+\t\tGNOME.g_object_unref(icon_theme);", "+\t\tif (path != 0) {", "+\t\t\tlength = OS.strlen(path);", "+\t\t\tif (length > 0) {", "+\t\t\t\tbuffer = new byte[length];", "+\t\t\t\tOS.memmove(buffer, path, length);", "+\t\t\t\tprogram.iconPath = new String(Converter.mbcsToWcs(null, buffer));", "+\t\t\t}", "+\t\t\tGNOME.g_free(path);", "+\t\t}", "+\t\tif (icon_name != 0) GNOME.g_free(icon_name);", "+\t\tGNOME.gnome_vfs_mime_application_free(ptr);", "+\t}", "+\treturn program;", "+}", "-", "-static Program gnome_getProgram(Display display, String mimeType) {", "-\tProgram program = null;", "-\tGnomeVFSMimeApplication application = new GnomeVFSMimeApplication();", "-\tbyte[] mimeTypeBuffer = Converter.wcsToMbcs(null, mimeType, true);", "-\tint ptr = GNOME.gnome_vfs_mime_get_default_application(mimeTypeBuffer);", "-\tif (ptr != 0) {", "-\t\tprogram = new Program();", "-\t\tprogram.display = display;", "-\t\tprogram.name = mimeType;", "-\t\tGNOME.memmove(application, ptr, GnomeVFSMimeApplication.sizeof);", "-\t\tint length = OS.strlen(application.command);", "-\t\tbyte[] buffer = new byte[length];", "-\t\tOS.memmove(buffer, application.command, length);\t\t", "-\t\tprogram.command = new String(Converter.mbcsToWcs(null, buffer));", "-\t\tprogram.gnomeExpectUri = application.expects_uris == GNOME.GNOME_VFS_MIME_APPLICATION_ARGUMENT_TYPE_URIS;", "-\t\t", "-\t\tlength = OS.strlen(application.id);", "-\t\tbuffer = new byte[length + 1];", "-\t\tOS.memmove(buffer, application.id, length);", "-\t\t/* ", "-\t\t* Note.  gnome_icon_theme_new uses g_object_new to allocate the data it returns.", "-\t\t* Use g_object_unref to free the pointer it returns.", "-\t\t*/", "-\t\tint icon_theme = GNOME.gnome_icon_theme_new();", "-\t\tint icon_name = GNOME.gnome_icon_lookup(icon_theme, 0, null, buffer, 0, mimeTypeBuffer, ", "-\t\t\t\tGNOME.GNOME_ICON_LOOKUP_FLAGS_NONE, null);", "-\t\tint path = 0;", "-\t\tif (icon_name != 0) path = GNOME.gnome_icon_theme_lookup_icon(icon_theme, icon_name, PREFERRED_ICON_SIZE, null, null);", "-\t\tGNOME.g_object_unref(icon_theme);", "-\t\tif (path != 0) {", "-\t\t\tlength = OS.strlen(path);", "-\t\t\tif (length > 0) {", "-\t\t\t\tbuffer = new byte[length];", "-\t\t\t\tOS.memmove(buffer, path, length);", "-\t\t\t\tString result = new String(Converter.mbcsToWcs(null, buffer));", "-\t\t\t\ttry {", "-\t\t\t\t\tprogram.imageData = new ImageData(result);", "-\t\t\t\t} catch (Exception e) {", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tGNOME.g_free(icon_name);", "-\t\t\tGNOME.g_free(path);", "-\t\t}", "-\t\tGNOME.gnome_vfs_mime_application_free(ptr);", "-\t}", "-\treturn program;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9598ef86b3b56b3508c5adf03028115c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "dbb652fe193019d96be9d6af80af3f6e1918e181", "commitAfterChange": "a9865ce41544b9634fe7b5cf08a114ae91a2faeb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 6, "signatureBeforeChange": "  static Program gnome_getProgram(Display display, String mimeType)", "signatureAfterChange": "  static Program gnome_getProgram(Display display, String mimeType)", "diff": ["+", "+static Program gnome_getProgram(Display display, String mimeType) {", "+\tProgram program = null;", "+\tbyte[] mimeTypeBuffer = Converter.wcsToMbcs(null, mimeType, true);", "+\tint /*long*/ ptr = GNOME.gnome_vfs_mime_get_default_application(mimeTypeBuffer);", "+\tif (ptr != 0) {", "+\t\tprogram = new Program();", "+\t\tprogram.display = display;", "+\t\tprogram.name = mimeType;", "+\t\tGnomeVFSMimeApplication application = new GnomeVFSMimeApplication();", "+\t\tGNOME.memmove(application, ptr, GnomeVFSMimeApplication.sizeof);", "+\t\tint length = OS.strlen(application.command);", "+\t\tbyte[] buffer = new byte[length];", "+\t\tOS.memmove(buffer, application.command, length);\t\t", "+\t\tprogram.command = new String(Converter.mbcsToWcs(null, buffer));", "+\t\tprogram.gnomeExpectUri = application.expects_uris == GNOME.GNOME_VFS_MIME_APPLICATION_ARGUMENT_TYPE_URIS;", "+\t\t", "+\t\tlength = OS.strlen(application.id);", "+\t\tbuffer = new byte[length + 1];", "+\t\tOS.memmove(buffer, application.id, length);", "+\t\t/* ", "+\t\t* Note.  gnome_icon_theme_new uses g_object_new to allocate the data it returns.", "+\t\t* Use g_object_unref to free the pointer it returns.", "+\t\t*/", "+\t\tint /*long*/ icon_theme = GNOME.gnome_icon_theme_new();", "+\t\tint /*long*/ icon_name = GNOME.gnome_icon_lookup(icon_theme, 0, null, buffer, 0, mimeTypeBuffer, ", "+\t\t\t\tGNOME.GNOME_ICON_LOOKUP_FLAGS_NONE, null);", "+\t\tint /*long*/ path = 0;", "+\t\tif (icon_name != 0) path = GNOME.gnome_icon_theme_lookup_icon(icon_theme, icon_name, PREFERRED_ICON_SIZE, null, null);", "+\t\tGNOME.g_object_unref(icon_theme);", "+\t\tif (path != 0) {", "+\t\t\tlength = OS.strlen(path);", "+\t\t\tif (length > 0) {", "+\t\t\t\tbuffer = new byte[length];", "+\t\t\t\tOS.memmove(buffer, path, length);", "+\t\t\t\tprogram.iconPath = new String(Converter.mbcsToWcs(null, buffer));", "+\t\t\t}", "+\t\t\tGNOME.g_free(path);", "+\t\t}", "+\t\tif (icon_name != 0) GNOME.g_free(icon_name);", "+\t\tGNOME.gnome_vfs_mime_application_free(ptr);", "+\t}", "+\treturn program;", "+}", "-", "-static Program gnome_getProgram(Display display, String mimeType) {", "-\tProgram program = null;", "-\tGnomeVFSMimeApplication application = new GnomeVFSMimeApplication();", "-\tbyte[] mimeTypeBuffer = Converter.wcsToMbcs(null, mimeType, true);", "-\tint /*long*/ ptr = GNOME.gnome_vfs_mime_get_default_application(mimeTypeBuffer);", "-\tif (ptr != 0) {", "-\t\tprogram = new Program();", "-\t\tprogram.display = display;", "-\t\tprogram.name = mimeType;", "-\t\tGNOME.memmove(application, ptr, GnomeVFSMimeApplication.sizeof);", "-\t\tint length = OS.strlen(application.command);", "-\t\tbyte[] buffer = new byte[length];", "-\t\tOS.memmove(buffer, application.command, length);\t\t", "-\t\tprogram.command = new String(Converter.mbcsToWcs(null, buffer));", "-\t\tprogram.gnomeExpectUri = application.expects_uris == GNOME.GNOME_VFS_MIME_APPLICATION_ARGUMENT_TYPE_URIS;", "-\t\t", "-\t\tlength = OS.strlen(application.id);", "-\t\tbuffer = new byte[length + 1];", "-\t\tOS.memmove(buffer, application.id, length);", "-\t\t/* ", "-\t\t* Note.  gnome_icon_theme_new uses g_object_new to allocate the data it returns.", "-\t\t* Use g_object_unref to free the pointer it returns.", "-\t\t*/", "-\t\tint /*long*/ icon_theme = GNOME.gnome_icon_theme_new();", "-\t\tint /*long*/ icon_name = GNOME.gnome_icon_lookup(icon_theme, 0, null, buffer, 0, mimeTypeBuffer, ", "-\t\t\t\tGNOME.GNOME_ICON_LOOKUP_FLAGS_NONE, null);", "-\t\tint /*long*/ path = 0;", "-\t\tif (icon_name != 0) path = GNOME.gnome_icon_theme_lookup_icon(icon_theme, icon_name, PREFERRED_ICON_SIZE, null, null);", "-\t\tGNOME.g_object_unref(icon_theme);", "-\t\tif (path != 0) {", "-\t\t\tlength = OS.strlen(path);", "-\t\t\tif (length > 0) {", "-\t\t\t\tbuffer = new byte[length];", "-\t\t\t\tOS.memmove(buffer, path, length);", "-\t\t\t\tString result = new String(Converter.mbcsToWcs(null, buffer));", "-\t\t\t\ttry {", "-\t\t\t\t\tprogram.imageData = new ImageData(result);", "-\t\t\t\t} catch (Exception e) {", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tGNOME.g_free(icon_name);", "-\t\t\tGNOME.g_free(path);", "-\t\t}", "-\t\tGNOME.gnome_vfs_mime_application_free(ptr);", "-\t}", "-\treturn program;", "-}"]}], "num": 15076}
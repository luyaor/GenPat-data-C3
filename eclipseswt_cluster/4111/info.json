{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "faaa20f00155508976ef1978bd214199", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74861feaacd01467919449e0e0b21b16", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "5ea894241bdcc58c29197c49437e9f90e533b426", "commitAfterChange": "4f5c07d6b4213f3b31b43ecb01a5561168782d78", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": " public StyledText(Composite parent, int style)", "signatureAfterChange": " public StyledText(Composite parent, int style)", "diff": ["-\tif (isBidi) createCaretBitmaps();", "-\tnew Caret(this, SWT.NULL);", "+\tdefaultCaret = new Caret(this, SWT.NULL);", "+\t\tcreateCaretBitmaps();", "-\t\t\t\tint newCaretX = direction == SWT.LEFT ? columnX + getCaretWidth() - 1 : columnX;", "+\t\t\t\tif (getCaret() != defaultCaret) return;", "+\t\t\t\tint lineIndex = getCaretLine();", "+\t\t\t\tString line = content.getLine(lineIndex);", "+\t\t\t\tint lineOffset = content.getOffsetAtLine(lineIndex);", "+\t\t\t\tint offsetInLine = caretOffset - lineOffset;", "+\t\t\t\tint newCaretX = getXAtOffset(line, lineIndex, offsetInLine);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b6fe96f0d9c2d2b7d148431baffbaad", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "0eca40a26667c3712617b5dd23e67af76bcbab4d", "commitAfterChange": "c345d69dc06c2a69d5f698a12d1c7890b32841ad", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 146, "signatureBeforeChange": " int getOffsetAtX(String line, int lineOffset, int lineXOffset)", "signatureAfterChange": " int getOffsetAtPoint(int x, int y)", "diff": ["- */", "-int getOffsetAtX(String line, int lineOffset, int lineXOffset) {", "-\tint x = lineXOffset - leftMargin + horizontalScrollOffset;", "-\tTextLayout layout = renderer.getTextLayout(line, lineOffset);", "-\tint[] trailing = new int[1];", "-\tint offsetInLine = layout.getOffset(x, 0, trailing);", "-\tadvancing = false;", "-\tif (trailing[0] != 0) {", "-\t\tint lineLength = line.length();", "-\t\tif (offsetInLine + trailing[0] >= lineLength) {", "-\t\t\toffsetInLine = lineLength;", "-\t\t\tadvancing = true;", "-\t\t} else {", "-\t\t\tint level;", "-\t\t\tint offset = offsetInLine;", "-\t\t\twhile (offset > 0 && Character.isDigit(line.charAt(offset))) offset--;", "-\t\t\tif (offset == 0 && Character.isDigit(line.charAt(offset))) {", "-\t\t\t\tlevel = isMirrored() ? 1 : 0;", "-\t\t\t} else {", "-\t\t\t\tlevel = layout.getLevel(offset) & 0x1;", "-\t\t\t}", "-\t\t\toffsetInLine += trailing[0];", "-\t\t\tint trailingLevel = layout.getLevel(offsetInLine) & 0x1;", "-\t\t\tadvancing  = (level ^ trailingLevel) != 0;", "-\t\t}", "-\t}", "-\trenderer.disposeTextLayout(layout);", "-\treturn offsetInLine;", "+int getOffsetAtPoint(int x, int y) {", "+\tint lineIndex = getLineIndex(y);", "+\tString line = content.getLine(lineIndex);", "+\tint lineOffset = content.getOffsetAtLine(lineIndex);", "+\tTextLayout layout = renderer.getTextLayout(line, lineOffset);", "+\tx = x - leftMargin + horizontalScrollOffset;", "+\ty = y - topMargin - getLinePixel(lineIndex);", "+\tint[] trailing = new int[1];", "+\tint offsetInLine = layout.getOffset(x, y, trailing);", "+\tadvancing = false;", "+\tif (trailing[0] != 0) {", "+\t\tint lineLength = line.length();", "+\t\tif (offsetInLine + trailing[0] >= lineLength) {", "+\t\t\toffsetInLine = lineLength;", "+\t\t\tadvancing = true;", "+\t\t} else {", "+\t\t\tint level;", "+\t\t\tint offset = offsetInLine;", "+\t\t\twhile (offset > 0 && Character.isDigit(line.charAt(offset))) offset--;", "+\t\t\tif (offset == 0 && Character.isDigit(line.charAt(offset))) {", "+\t\t\t\tlevel = isMirrored() ? 1 : 0;", "+\t\t\t} else {", "+\t\t\t\tlevel = layout.getLevel(offset) & 0x1;", "+\t\t\t}", "+\t\t\toffsetInLine += trailing[0];", "+\t\t\tint trailingLevel = layout.getLevel(offsetInLine) & 0x1;", "+\t\t\tadvancing  = (level ^ trailingLevel) != 0;", "+\t\t}", "+\t}", "+\trenderer.disposeTextLayout(layout);", "+\treturn offsetInLine + lineOffset;"]}], "num": 4111}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d6f8ac2347a12f05ef2bb2f79f9d49f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "752435702035131e1776294c8506d247", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "657c2bf6b61467747ad1fb36bf670ce770cbdc87", "commitAfterChange": "4969d1adad01d61d7e4d924f66bbdcbf37351dd4", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " \t \tint getDescriptionAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \t \tint getDescriptionAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t\treturn getAttribute (nextHandler, theEvent, userData);", "+\t\tint code = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\tString osDescriptionAttribute = null;", "+\t\tint [] stringRef = new int [1];", "+\t\tif (code == OS.noErr) {", "+\t\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, null, 4, null, stringRef);", "+\t\t\tif (status == OS.noErr) {", "+\t\t\t\tosDescriptionAttribute = stringRefToString (stringRef [0]);", "+\t\t\t}", "+\t\t}", "+\t\tAccessibleEvent event = new AccessibleEvent(this);", "+\t\tevent.childID = getChildIDFromEvent(theEvent);", "+\t\tevent.result = osDescriptionAttribute;", "+\t\tfor (int i = 0; i < accessibleListeners.size(); i++) {", "+\t\t\tAccessibleListener listener = (AccessibleListener) accessibleListeners.elementAt(i);", "+\t\t\tlistener.getName(event);", "+\t\t}", "+\t\tif (event.result != null) {", "+\t\t\tstringRef [0] = stringToStringRef (event.result);", "+\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "+\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\treturn OS.noErr;", "+\t\t\t}", "+\t\t}", "+\t\treturn code;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f990168fe0001c9786e481fdf7fafa73", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "6930fdd35d9cdffd6d05c778fb4b82a2018d7fcb", "commitAfterChange": "4b4619a6b5b2cd61a37c980601ead9593d587b9d", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "  Event getSegments (String string)", "signatureAfterChange": "  Event getSegments (String string)", "diff": ["-\tif (!hooks (SWT.Segments) && !filters (SWT.Segments)) return null;", "-\tEvent event = new Event ();", "-\tevent.text = string;", "-\tsendEvent (SWT.Segments, event);", "-\tif (event.segments != null) {", "-\t\tfor (int i = 1, segmentCount = event.segments.length, lineLength = string == null ? 0 : string.length(); i < segmentCount; i++) {", "-\t\t\tif (event.segments[i] < event.segments[i - 1] || event.segments[i] > lineLength) {", "-\t\t\t\tSWT.error (SWT.ERROR_INVALID_ARGUMENT);", "+\tEvent event = null;", "+\tif (hooks (SWT.Segments) || filters (SWT.Segments)) {", "+\t\tevent = new Event ();", "+\t\tevent.text = string;", "+\t\tsendEvent (SWT.Segments, event);", "+\t\tif (event != null && event.segments != null) {", "+\t\t\tfor (int i = 1, segmentCount = event.segments.length, lineLength = string == null ? 0 : string.length(); i < segmentCount; i++) {", "+\t\t\t\tif (event.segments[i] < event.segments[i - 1] || event.segments[i] > lineLength) {", "+\t\t\t\t\tSWT.error (SWT.ERROR_INVALID_ARGUMENT);", "+\t\t\t\t}", "+\t}", "+\tif ((state & HAS_AUTO_DIRECTION) != 0) {", "+\t\tint direction = resolveTextDirection(string);", "+\t\tif (direction == SWT.NONE) {", "+\t\t\t/*", "+\t\t\t * Force adding a UCC even when no strong characters are found.", "+\t\t\t * Otherwise, the widget would keep the old direction, which might be", "+\t\t\t * inappropriate for the new text.", "+\t\t\t */", "+\t\t\tdirection = (style & SWT.RIGHT_TO_LEFT) != 0 ? SWT.RIGHT_TO_LEFT : SWT.LEFT_TO_RIGHT;", "+\t\t}", "+\t\tint [] oldSegments = null;", "+\t\tchar [] oldSegmentsChars = null;", "+\t\tif (event == null) {", "+\t\t\tevent = new Event ();", "+\t\t} else {", "+\t\t\toldSegments = event.segments;", "+\t\t\toldSegmentsChars = event.segmentsChars;", "+\t\t}", "+\t\tint nSegments = oldSegments == null ? 0 : oldSegments.length;", "+\t\tevent.segments = new int [nSegments + 1];", "+\t\tevent.segmentsChars = new char [nSegments + 1];", "+\t\tif (oldSegments != null) {", "+\t\t\tSystem.arraycopy(oldSegments, 0, event.segments, 1, nSegments);", "+\t\t}", "+\t\tif (oldSegmentsChars != null) {", "+\t\t\tSystem.arraycopy(oldSegmentsChars, 0, event.segmentsChars, 1, nSegments);", "+\t\t}", "+\t\tevent.segments [0] = 0;", "+\t\tevent.segmentsChars [0] = direction == SWT.RIGHT_TO_LEFT ? RLE : LRE;"]}], "num": 7462}
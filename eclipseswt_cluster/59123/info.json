{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a79d568967211be2890a2c1d38da2bdf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "669046271522ba3fdc7895a1463e78e6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolItem.java", "commitBeforeChange": "af35bb868ce7a4db640d728af68bfb767fa4e09f", "commitAfterChange": "a1b6110a7c4d57ed7e255ff1bd265349917f369d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \r public void setSize (int width, int height)", "signatureAfterChange": "\r \r public void setSize (int width, int height)", "diff": ["+\trbBand.fMask = OS.RBBIM_HEADERSIZE;\r", "+\tOS.SendMessage (hwnd, OS.RB_GETBANDINFO, index, rbBand);\r", "-\trbBand.cx = width;\r", "-\trbBand.cyChild = height;\r", "-\tPoint preferred = getPreferredSize();\r", "-\tif (preferred != null) {\r", "-\t\trbBand.cyMinChild = rbBand.cyMaxChild = preferred.y;\r", "-\t} else {\r", "-\t\trbBand.cyMinChild = rbBand.cyMaxChild = height;\r", "-\t}\r", "-\tOS.SendMessage (hwnd, OS.RB_SETBANDINFO, index, rbBand);\t\r", "+\trbBand.cx = Math.max (width, rbBand.cxHeader);\r", "+\trbBand.cyChild = Math.max (MINIMUM_CHILD_HEIGHT, height);\r", "+\trbBand.cyMinChild = rbBand.cyMaxChild = rbBand.cyChild;\r", "+\tOS.SendMessage (hwnd, OS.RB_SETBANDINFO, index, rbBand);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ebf5f5ffe32510f6182c8709bf5cef7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "9e0ab3fc82f1e213430da5e447aa46210f561ba0", "commitAfterChange": "90711383384705dfabec4c2b0f9d83af7b9b405f", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "\r public void showItem (TableItem item)", "signatureAfterChange": "\r \r void showItem (int index)", "diff": ["+void showItem (int index) {\r", "+\t/*\r", "+\t* Bug in Windows.  For some reason, when there is insufficient space\r", "+\t* to show an item, LVM_ENSUREVISIBLE causes blank lines to be\r", "+\t* inserted at the top of the widget.  A call to LVM_GETTOPINDEX will\r", "+\t* return a negative number (this is an impossible result).  The fix \r", "+\t* is to use LVM_GETCOUNTPERPAGE to detect the case when the number \r", "+\t* of visible items is zero and use LVM_ENSUREVISIBLE with the fPartialOK\r", "+\t* flag to scroll the table.\r", "+\t*/\r", "+\tif (OS.SendMessage (handle, OS.LVM_GETCOUNTPERPAGE, 0, 0) <= 0) {\r", "+\t\t/*\r", "+\t\t* Bug in Windows.  For some reason, LVM_ENSUREVISIBLE can\r", "+\t\t* scroll one item more or one item less when there is not\r", "+\t\t* enough space to show a single table item.  The fix is\r", "+\t\t* to detect the case and call LVM_ENSUREVISIBLE again with\r", "+\t\t* the same arguments.  It seems that once LVM_ENSUREVISIBLE\r", "+\t\t* has scrolled into the general area, it is able to scroll\r", "+\t\t* to the exact item.\r", "+\t\t*/\r", "+\t\tOS.SendMessage (handle, OS.LVM_ENSUREVISIBLE, index, 1);\r", "+\t\tif (index != OS.SendMessage (handle, OS.LVM_GETTOPINDEX, 0, 0)) {\r", "+\t\t\tOS.SendMessage (handle, OS.LVM_ENSUREVISIBLE, index, 1);\r", "+\t\t}\t\t\r", "+\t} else {\r", "+\t\tOS.SendMessage (handle, OS.LVM_ENSUREVISIBLE, index, 0);\r", "+\t}\r", "+}\r", "-\t/*\r", "-\t* Bug in Windows.  For some reason, when there is insufficient space\r", "-\t* to show an item, LVM_ENSUREVISIBLE causes blank lines to be\r", "-\t* inserted at the top of the widget.  A call to LVM_GETTOPINDEX will\r", "-\t* return a negative number (this is an impossible result).  The fix is to\r", "-\t* detect this case and fail to show the selection.\r", "-\t*/\r", "-\tif (OS.SendMessage (handle, OS.LVM_GETCOUNTPERPAGE, 0, 0) <= 0)  return;\r", "-\tif (index != -1) {\r", "-\t\tOS.SendMessage (handle, OS.LVM_ENSUREVISIBLE, index, 0);\r", "-\t}\r"]}], "num": 59123}
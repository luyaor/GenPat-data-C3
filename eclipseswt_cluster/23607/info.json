{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c35d996e54109e96064a953c446351d2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee01e3bda5767fb49eb6b26690a459ea", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "61ac0970c1c501525ee9c1ee8c104c394020c61a", "commitAfterChange": "5b40b97f8495883f290419ddc3e69d47e697fa6c", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  @Override void setBackgroundColor (long context, long handle, GdkRGBA rgba)", "signatureAfterChange": "  @Override void setBackgroundColor (long context, long handle, GdkRGBA rgba)", "diff": ["-void setBackgroundColor (long /*int*/ context, long /*int*/ handle, GdkRGBA rgba) { //Gtk3.", "-\tsetBackgroundColorGradient (OS.gtk_widget_get_style_context (handle), handle, rgba);", "+void setBackgroundColor (long /*int*/ context, long /*int*/ handle, GdkRGBA rgba) {", "+\t/* Note: this function is called on Gtk3 only */", "+", "+\t//Pre Gtk 3.10 doesn't handle CSS background color very well for Gtk Check/Radio button.", "+\t// 3.10.3 as it was the latest to affect themeing in button.", "+\tif (OS.GTK_VERSION < OS.VERSION(3, 10, 3) && (style & (SWT.CHECK | SWT.RADIO)) != 0) {", "+\t\tsuper.setBackgroundColor (context, handle, rgba);", "+\t\treturn;", "+\t}", "+", "+\tString css =\"* {\\n\";", "+\tif (rgba != null) {", "+\t\tString color = gtk_rgba_to_css_string (rgba);", "+\t\tcss += \"background: \" + color + \";\\n\";", "+\t}", "+\tcss += \"}\\n\";", "+\tgtk_css_provider_load_from_css (context, css);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a86b7e6da49f86a0d601d77756cfed0d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT PI/common_j2se/org/eclipse/swt/internal/Library.java", "commitBeforeChange": "ae0169d9f40be4353e4998ab730fe823da3229c8", "commitAfterChange": "0b2bc498e19b2d02f5cbe818335597e8c7628a23", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public static void loadLibrary (String name)", "signatureAfterChange": "\r public static void loadLibrary (String name)", "diff": ["-     * Include OS name to support same window system\r", "-     * on different operating systems.\r", "+     * Include platform name to support different windowing systems\r", "+     * on same operating system.\r", "-\tString newName = name + \"-\" + getOS () + \"-\" + MAJOR_VERSION;\r", "-\r", "-\t/* Force 3 digits in minor version number */\r", "-\tif (MINOR_VERSION < 10) {\r", "-\t\tnewName += \"00\";\r", "-\t} else {\r", "-\t\tif (MINOR_VERSION < 100) newName += \"0\";\r", "-\t}\r", "-\tnewName += MINOR_VERSION;\r", "+\tString platform = getPlatform ();\r", "-\t/* No \"r\" until first revision */\r", "-\tif (REVISION > 0) newName += \"r\" + REVISION;\r", "+\t/*\r", "+\t * Get version qualifier.\r", "+\t */\r", "+\tString version = System.getProperty (\"swt.version\");\r", "+\tif (version == null) {\r", "+\t\tversion = \"\" + MAJOR_VERSION;\r", "+\t\t/* Force 3 digits in minor version number */\r", "+\t\tif (MINOR_VERSION < 10) {\r", "+\t\t\tversion += \"00\";\r", "+\t\t} else {\r", "+\t\t\tif (MINOR_VERSION < 100) version += \"0\";\r", "+\t\t}\r", "+\t\tversion += MINOR_VERSION;\t\t\r", "+\t\t/* No \"r\" until first revision */\r", "+\t\tif (REVISION > 0) version += \"r\" + REVISION;\r", "+\t}\r", "+\r", "+\t\tString newName = name + \"-\" + platform + \"-\" + version;\t\t\r", "-\t} catch (UnsatisfiedLinkError e) {\r", "+\t\treturn;\r", "+\t} catch (UnsatisfiedLinkError e1) {\t\t\r", "-\t\t\tSystem.loadLibrary (name);\r", "+\t\t\tString newName = name + \"-\" + platform;\r", "+\t\t\tSystem.loadLibrary (newName);\r", "+\t\t\treturn;\r", "-\t\t\tthrow e;\r", "+\t\t\tthrow e1;\r"]}], "num": 23607}
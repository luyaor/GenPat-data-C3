{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbdaabec5fea015d9daf182d314d041d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf898f157c3748553bfa7a6150aa2c9b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "1c37647de5534f8029867b682ff6e27fa9349dcf", "commitAfterChange": "96591e42a75d692597f71a4a0cadb654241fef4e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r private int dragProcCallback(int widget, int client_data, int call_data)", "signatureAfterChange": "\r private int dragProcCallback(int widget, int client_data, int call_data)", "diff": ["+}\r", "+\t\t\t\tdragOverHeartbeat = new Runnable() {\r", "+\t\t\t\t\tpublic void run() {\r", "+\t\t\t\t\t\tif (control.isDisposed() || dragOverStart == 0) return;\r", "+\t\t\t\t\t\tlong time = System.currentTimeMillis();\r", "+\t\t\t\t\t\tint delay = DRAGOVER_HYSTERESIS;\r", "+\t\t\t\t\t\tif (time >= dragOverStart) {\r", "+\t\t\t\t\t\t\tDNDEvent event = new DNDEvent();\r", "+\t\t\t\t\t\t\tevent.widget = control;\r", "+\t\t\t\t\t\t\tevent.time = (int)time;\r", "+\t\t\t\t\t\t\tevent.x = dragOverEvent.x;\r", "+\t\t\t\t\t\t\tevent.y = dragOverEvent.y;\r", "+\t\t\t\t\t\t\tevent.dataTypes  = dragOverEvent.dataTypes;\r", "+\t\t\t\t\t\t\tevent.feedback = DND.FEEDBACK_SELECT;\r", "+\t\t\t\t\t\t\tevent.operations = dragOverEvent.operations;\r", "+\t\t\t\t\t\t\tevent.dataType  = dragOverEvent.dataType;\r", "+\t\t\t\t\t\t\tevent.detail  = dragOverEvent.detail;\r", "+\t\t\t\t\t\t\tnotifyListeners(DND.DragOver, event);\r", "+\t\t\t\t\t\t\teffect.show(event.feedback, event.x, event.y);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tdelay = (int)(dragOverStart - time);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tcontrol.getDisplay().timerExec(delay, dragOverHeartbeat);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t};\r", "+\t\t\t\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);\r", "+\t\t\t\t\r", "+\t\t\t\tdragOverHeartbeat.run();\r", "+\t\t\t\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);\r", "+\t\t\t\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);\r", "+\t\t\t\tupdateDragOverHover(0, null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fb950c043339caf75652fb469051468", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "4b10f2a3a24e7037b13a6b21d0386bf976be739d", "commitAfterChange": "616f5a4d963ffa9e332b664b81207bb1f17d8c21", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  int dragMotion ( int widget, int context, int x, int y, int time)", "signatureAfterChange": "  private int drag_motion ( int widget, int context, int x, int y, int time)", "diff": ["-int dragMotion ( int widget, int context, int x, int y, int time){", "+private int drag_motion ( int widget, int context, int x, int y, int time){", "+\tint oldKeyOperation = keyOperation;", "+\t", "+\t\tkeyOperation = -1;", "+\t", "-\tTransferData[] allowedTypes = event.dataTypes;", "-\t\t", "-\tif (event.detail == DND.DROP_DEFAULT && (getStyle() & DND.DROP_DEFAULT) == 0) {", "-\t\tif ((allowedOperations & DND.DROP_MOVE) != 0) {", "-\t\t\tevent.detail = DND.DROP_MOVE;", "+\tTransferData[] allowedDataTypes = new TransferData[event.dataTypes.length];", "+\tSystem.arraycopy(event.dataTypes, 0, allowedDataTypes, 0, allowedDataTypes.length);", "+", "+\tif (oldKeyOperation == -1) {", "+\t\tselectedDataType = null;", "+\t\tselectedOperation = DND.DROP_NONE;", "+\t\tevent.type = DND.DragEnter;", "+\t} else {", "+\t\tevent.dataType = selectedDataType;", "+\t\tif (keyOperation == oldKeyOperation) {", "+\t\t\tevent.type = DND.DragOver;", "+\t\t\tevent.detail = selectedOperation;", "-\t\t\tevent.detail = DND.DROP_NONE;", "+\t\t\tevent.type = DND.DragOperationChanged;", "-", "-\tif (lastOperation == -1) {", "-\t\t\tevent.type = DND.DragEnter;", "-\t\t\tint atom = OS.gtk_drag_dest_find_target(control.handle, context, 0);", "-\t\t\tif (atom == 0) {", "-\t\t\t\tOS.gdk_drag_status(context, 0, time);", "-\t\t\t\treturn 0;", "-\t\t\t}", "-\t\t\tevent.dataType = new TransferData();", "-\t\t\tevent.dataType.type = atom;", "-\t\t\tlastOperation = event.detail;", "-\t} else {", "-\t\t\tif (lastOperation != event.detail) {", "-\t\t\t\tevent.type = DND.DragOperationChanged;", "-\t\t\t\tlastOperation = event.detail;", "-\t\t\t} else {", "-\t\t\t\tevent.type = DND.DragOver;", "-\t\t\t\tevent.detail = selectedOperation;", "-\t\t\t}", "-\t\t\tevent.dataType = selectedDataType;", "-\t}", "-\tevent.feedback = DND.FEEDBACK_SELECT;", "-\t\tevent.detail = DND.DROP_NONE;", "-\t\tevent.dataType = null;", "+\t\tOS.gdk_drag_status(context, 0, time);", "+\t\treturn 0;", "-\t\tevent.detail = DND.DROP_MOVE;", "+\t\tevent.detail = (allowedOperations & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;", "-\t\tfor (int i = 0; i < allowedTypes.length; i++) {", "-\t\t\tif (allowedTypes[i].type == event.dataType.type) {", "+\t\tfor (int i = 0; i < allowedDataTypes.length; i++) {", "+\t\t\tif (allowedDataTypes[i].type == event.dataType.type) {", "-\tif (selectedDataType != null && (event.detail & allowedOperations) != 0) {", "+\tif (selectedDataType != null && (allowedOperations & event.detail) != 0) {", "+\t"]}], "num": 2282}
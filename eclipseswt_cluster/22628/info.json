{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c070ab53e8fa5d2d699c7b331518423b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3e8356e6d48d2cb5562dc8435d4c189", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "c0843635ede1cb5067c2ade8a84467464c37d860", "commitAfterChange": "ea2d29ea4c024a608cde22f9f485e4382812e9cf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create(Composite parent, int style)", "signatureAfterChange": "  public void create(Composite parent, int style)", "diff": ["-\t\t\t\tversion = IEVersion * 1000;", "+\t\t\t\t/*", "+\t\t\t\t * By default in Embedded IE the docuemntMode is Quirks(5)", "+\t\t\t\t * mode unless !DOCTYPE directives is defined in the HTML.", "+\t\t\t\t * As per MSDN IE8 and onwards, there is a way we could hint", "+\t\t\t\t * embedded IE to use current documentMode via appropriate", "+\t\t\t\t * version value in the registry. Refer bug 342145.", "+\t\t\t\t * ", "+\t\t\t\t * Complete list of IE emulation modes is listed on MSDN:", "+\t\t\t\t * http://msdn.microsoft", "+\t\t\t\t * .com/en-us/library/ie/ee330730%28v=vs", "+\t\t\t\t * .85%29.aspx#browser_emulation", "+\t\t\t\t */", "+\t\t\t\tif (IEVersion >= 10) {", "+\t\t\t\t\tversion = IEVersion * 1000 + 1;", "+\t\t\t\t}", "+\t\t\t\telse if (IEVersion >= 8) {", "+\t\t\t\t\tversion = IEVersion * 1111;", "+\t\t\t\t}", "+\t\t\t\telse {", "+\t\t\t\t\tversion = IEVersion * 1000;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b684c35e9804a8abb316d515864e0df", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "b9002aa9a9dbc05b10ffa6d8c8f26124c9100a3b", "commitAfterChange": "dab04b59098116bd0aa6cb8ca76ce653fc22e7c8", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " public FontMetrics getFontMetrics()", "signatureAfterChange": " public FontMetrics getFontMetrics()", "diff": ["-\t\t\t\t\t\t */", "-\t\t\t\t\t\tint sum = 0, count = 0;", "-\t\t\t\t\t\tint cols = fontStruct.max_char_or_byte2 - fontStruct.min_char_or_byte2 + 1;", "-\t\t\t\t\t\tint perCharPtr = fontStruct.per_char;", "-\t\t\t\t\t\tXCharStruct struct = new XCharStruct();", "-\t\t\t\t\t\tfor (int index = 0; index < cols; index++) {", "-\t\t\t\t\t\t\tOS.memmove(struct, perCharPtr + (index * XCharStruct.sizeof), XCharStruct.sizeof);", "-\t\t\t\t\t\t\tint w = struct.width;", "-\t\t\t\t\t\t\tif (w != 0) {", "-\t\t\t\t\t\t\t\tsum += w;", "-\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t */\t\t\t\t\t\t", "+\t\t\t\t\t\tint perCharPtr = fontStruct.per_char;\t", "+\t\t\t\t\t\tif (perCharPtr == 0) {", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t * If perCharPtr is 0 then all glyphs in the font have", "+\t\t\t\t\t\t\t * the same width as the font's maximum width.  So no", "+\t\t\t\t\t\t\t * averaging is required.", "+\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\t averageCharWidth = fontStruct.max_bounds_width;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint sum = 0, count = 0;", "+\t\t\t\t\t\t\tint cols = fontStruct.max_char_or_byte2 - fontStruct.min_char_or_byte2 + 1;", "+\t\t\t\t\t\t\tXCharStruct struct = new XCharStruct();", "+\t\t\t\t\t\t\tfor (int index = 0; index < cols; index++) {", "+\t\t\t\t\t\t\t\tOS.memmove(struct, perCharPtr + (index * XCharStruct.sizeof), XCharStruct.sizeof);", "+\t\t\t\t\t\t\t\tint w = struct.width;", "+\t\t\t\t\t\t\t\tif (w != 0) {", "+\t\t\t\t\t\t\t\t\tsum += w;", "+\t\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\taverageCharWidth += sum / count;", "-\t\t\t\t\t\taverageCharWidth += sum / count;", "-\t\t\t\t\t\t\tint sum = 0, count = 0;", "-\t\t\t\t\t\t\tint cols = fontStruct.max_char_or_byte2 - fontStruct.min_char_or_byte2 + 1;", "-\t\t\t\t\t\t\tXCharStruct struct = new XCharStruct();", "-\t\t\t\t\t\t\tfor (int index = 0; index < cols; index++) {", "-\t\t\t\t\t\t\t\tOS.memmove(struct, perCharPtr + (index * XCharStruct.sizeof), XCharStruct.sizeof);", "-\t\t\t\t\t\t\t\tint w = struct.width;", "-\t\t\t\t\t\t\t\tif (w != 0) {", "-\t\t\t\t\t\t\t\t\tsum += w;", "-\t\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\tif (perCharPtr == 0) {", "+\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t * If perCharPtr is 0 then all glyphs in the font have", "+\t\t\t\t\t\t\t\t * the same width as the font's maximum width.  So no", "+\t\t\t\t\t\t\t\t * averaging is required.", "+\t\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\t\t averageCharWidth = fontStruct.max_bounds_width;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tint sum = 0, count = 0;", "+\t\t\t\t\t\t\t\tint cols = fontStruct.max_char_or_byte2 - fontStruct.min_char_or_byte2 + 1;", "+\t\t\t\t\t\t\t\tXCharStruct struct = new XCharStruct();", "+\t\t\t\t\t\t\t\tfor (int index = 0; index < cols; index++) {", "+\t\t\t\t\t\t\t\t\tOS.memmove(struct, perCharPtr + (index * XCharStruct.sizeof), XCharStruct.sizeof);", "+\t\t\t\t\t\t\t\t\tint w = struct.width;", "+\t\t\t\t\t\t\t\t\tif (w != 0) {", "+\t\t\t\t\t\t\t\t\t\tsum += w;", "+\t\t\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\taverageCharWidth += sum / count;", "-\t\t\t\t\t\t\taverageCharWidth += sum / count;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd5121bd2483775b7f5a67c278bef76b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "8e9705d93325d1390b1c14aa0ba55b9649457ef3", "commitAfterChange": "6bc2e4ca5332d0ed9c2e86c21bb2d52348bc9673", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r int clearFunc(int clipboard,int user_data_or_owner)", "signatureAfterChange": "\r \r int clearFunc(int clipboard,int user_data_or_owner)", "diff": ["-\tdata = null;\r", "-\tdataTypes = null;\r", "+\tif (clipboard == pGtkClipboard) {\r", "+\t\tonClipboard = false;\r", "+\t}\r", "+\tif (clipboard == pGtkPrimary) {\r", "+\t\tonPrimary = false;\r", "+\t}\r", "+\tif (!onClipboard && !onPrimary) {\t\r", "+\t\tdata = null;\r", "+\t\tdataTypes = null;\r", "+\t}\r"]}], "num": 22628}
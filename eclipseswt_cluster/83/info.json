{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad7ea4587592613f91c5541676db7d5c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb0f3d8d59084037ec32a0362f2c0901", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "bacad3a175bb18224de7727549cb25e4799e3e8e", "commitAfterChange": "5d8a957e9aa0e637d531abd59800df08cb6a2cc3", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " public Point map (Control from, Control to, int x, int y)", "signatureAfterChange": " public Point map (Control from, Control to, int x, int y)", "diff": ["-\tif (from != null && from.isDisposed()) error (SWT.ERROR_INVALID_ARGUMENT);", "-\tif (to != null && to.isDisposed()) error (SWT.ERROR_INVALID_ARGUMENT);", "+\tif (from != null && from.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);", "+\tif (to != null && to.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);", "-\tint point = OS.gcnew_Point (x, y);", "-\tif (from != null && OS.FrameworkElement_IsLoaded(from.handle)) {", "-\t\tint result = OS.Visual_PointToScreen (from.handle, point);", "+\tif (from != null && to != null) {", "+\t\tint point = OS.gcnew_Point (x, y);", "+\t\tint newPoint = OS.UIElement_TranslatePoint(from.topHandle (), point, to.topHandle ());", "+\t\tPoint result = new Point ((int)OS.Point_X (newPoint), (int)OS.Point_Y (newPoint));", "-\t\tpoint = result;", "+\t\tOS.GCHandle_Free (newPoint);", "+\t\treturn result;", "+\t} else {", "+\t\tif (from == null) {", "+\t\t\tShell shell = to.getShell ();", "+\t\t\tPoint shellLocation = shell.getLocation ();", "+\t\t\tint point = OS.gcnew_Point (x - shellLocation.x, y - shellLocation.y);", "+\t\t\tOS.UIElement_UpdateLayout (to.topHandle ());", "+\t\t\tint newPoint = OS.UIElement_TranslatePoint (shell.shellHandle, point, to.topHandle ());", "+\t\t\tPoint result = new Point ((int)OS.Point_X (newPoint), (int)OS.Point_Y (newPoint));", "+\t\t\tOS.GCHandle_Free (point);", "+\t\t\tOS.GCHandle_Free (newPoint);", "+\t\t\treturn result;", "+\t\t} else {", "+\t\t\tShell shell = from.getShell ();", "+\t\t\tPoint shellLocation = shell.getLocation ();", "+\t\t\tint point = OS.gcnew_Point (x, y);", "+\t\t\tOS.UIElement_UpdateLayout (from.topHandle ());", "+\t\t\tint newPoint = OS.UIElement_TranslatePoint (from.topHandle (), point, shell.shellHandle);", "+\t\t\tPoint result = new Point ((int)OS.Point_X (newPoint) + shellLocation.x, (int)OS.Point_Y (newPoint) + shellLocation.y);", "+\t\t\tOS.GCHandle_Free (point);", "+\t\t\tOS.GCHandle_Free (newPoint);", "+\t\t\treturn result;", "+\t\t}", "-\tif (to != null && OS.FrameworkElement_IsLoaded(to.handle)) {", "-\t\tint result = OS.Visual_PointFromScreen (to.handle, point);", "-\t\tOS.GCHandle_Free (point);", "-\t\tpoint = result;", "-\t}", "-\tPoint result = new Point ((int)OS.Point_X (point), (int)OS.Point_Y (point));", "-\tOS.GCHandle_Free (point);", "-\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff821a1b6e5653059d5f4436be1b7bf2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d88bc7bef37e428853c15bf36b0103c751679a13", "commitAfterChange": "b78246feba55dea5042f20ef13079a6a48d963c7", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public Point map (Control from, Control to, int x, int y)", "signatureAfterChange": " public Point map (Control from, Control to, int x, int y)", "diff": ["-\t\t\tShell shell = to.getShell ();", "-\t\t\tPoint shellLocation = shell.getLocation ();", "-\t\t\tint point = OS.gcnew_Point (x - shellLocation.x, y - shellLocation.y);", "-\t\t\tto.updateLayout (to.topHandle ());", "-\t\t\tint newPoint = OS.UIElement_TranslatePoint (shell.shellHandle, point, to.topHandle ());", "-\t\t\tnewX = (int) (OS.Point_X (newPoint) + 0.5);", "-\t\t\tnewY = (int) (OS.Point_Y (newPoint) + 0.5);", "-\t\t\tOS.GCHandle_Free (point);", "-\t\t\tOS.GCHandle_Free (newPoint);", "-\t\t} else {", "-\t\t\tShell shell = from.getShell ();", "-\t\t\tPoint shellLocation = shell.getLocation ();", "+\t\t\tint topHandle = to.topHandle ();", "+\t\t\tint window = OS.Window_GetWindow (topHandle);", "-\t\t\tfrom.updateLayout (from.topHandle ());", "-\t\t\tint newPoint = OS.UIElement_TranslatePoint (from.topHandle (), point, shell.shellHandle);", "-\t\t\tnewX = (int) (OS.Point_X (newPoint) + 0.5) + shellLocation.x;", "-\t\t\tnewY = (int) (OS.Point_Y (newPoint) + 0.5) + shellLocation.y;", "+\t\t\tint temp = OS.Visual_PointFromScreen (window, point);", "+\t\t\tto.updateLayout (topHandle);", "+\t\t\tint newPoint = OS.UIElement_TranslatePoint (window, temp, topHandle);", "+\t\t\tnewX = (int) OS.Point_X (newPoint);", "+\t\t\tnewY = (int) OS.Point_Y (newPoint);", "+\t\t\tOS.GCHandle_Free (temp);", "+\t\t\tOS.GCHandle_Free(window);", "+\t\t} else {", "+\t\t\tint topHandle = from.topHandle ();", "+\t\t\tint window = OS.Window_GetWindow (topHandle);", "+\t\t\tint point = OS.gcnew_Point(x, y);", "+\t\t\tfrom.updateLayout (topHandle);", "+\t\t\tint temp = OS.UIElement_TranslatePoint (topHandle, point, window);", "+\t\t\tint newPoint = OS.Visual_PointToScreen (window, temp);", "+\t\t\tnewX = (int) OS.Point_X (newPoint);", "+\t\t\tnewY = (int) OS.Point_Y (newPoint);", "+\t\t\tOS.GCHandle_Free (temp);", "+\t\t\tOS.GCHandle_Free (point);", "+\t\t\tOS.GCHandle_Free (newPoint);", "+\t\t\tOS.GCHandle_Free(window);"]}], "num": 83}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56821f3eb06203056e44266119505ce7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff72b876e5c9acf2316b18ac5402f6b5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "a11744334121c31b812d90d1d6c723eac3d03dc2", "commitAfterChange": "4fa4bc4e404ed5145f5af4675fb9f63f4317eaa5", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " protected void init ()", "signatureAfterChange": " protected void init ()", "diff": ["-\tfApplicationProc= OS.NewApplicationCallbackUPP(this, \"handleApplicationCallback\");", "-\tif (fApplicationProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t//fApplicationProc= OS.NewApplicationCallbackUPP(this, \"handleApplicationCallback\");", "+\t//if (fApplicationProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\tCallback cb= new Callback(this, \"handleApplicationCallback\", 3);", "+\tfApplicationProc= cb.getAddress();", "-\tfWindowProc= OS.NewWindowCallbackUPP(this, \"handleWindowCallback\");", "-\tif (fWindowProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t//fWindowProc= OS.NewWindowCallbackUPP(this, \"handleWindowCallback\");", "+\t//if (fWindowProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\tcb= new Callback(this, \"handleWindowCallback\", 3);", "+\tfWindowProc= cb.getAddress();", "-\ttimerProc = OS.NewEventLoopTimerUPP(this, \"timerProc\");", "-\tif (timerProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t//timerProc = OS.NewEventLoopTimerUPP(this, \"timerProc\");", "+\t//if (timerProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\tcb= new Callback(this, \"timerProc\", 2);", "+\ttimerProc= cb.getAddress();", "-\tcaretProc = OS.NewEventLoopTimerUPP2(this, \"caretProc\");", "-\tif (caretProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t//caretProc = OS.NewEventLoopTimerUPP2(this, \"caretProc\");", "+\t//if (caretProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\tcb= new Callback(this, \"caretProc\", 2);", "+\tcaretProc= cb.getAddress();", "-\tfControlActionProc= OS.NewControlActionUPP(this, \"handleControlAction\");", "-\tif (fControlActionProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t//fControlActionProc= OS.NewControlActionUPP(this, \"handleControlAction\");", "+\t//if (fControlActionProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\tcb= new Callback(this, \"handleControlAction\", 2);", "+\tfControlActionProc= cb.getAddress();", "-\tfUserPaneDrawProc= OS.NewControlUserPaneDrawUPP(this, \"handleUserPaneDraw\");", "-\tif (fUserPaneDrawProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t//fUserPaneDrawProc= OS.NewControlUserPaneDrawUPP(this, \"handleUserPaneDraw\");", "+\t//if (fUserPaneDrawProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\tcb= new Callback(this, \"handleUserPaneDraw\", 2);", "+\tfUserPaneDrawProc= cb.getAddress();", "-\tfUserPaneHitTestProc= OS.NewUserPaneHitTestUPP(this, \"handleUserPaneHitTest\");", "-\tif (fUserPaneHitTestProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t//fUserPaneHitTestProc= OS.NewUserPaneHitTestUPP(this, \"handleUserPaneHitTest\");", "+\t//if (fUserPaneHitTestProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\tcb= new Callback(this, \"handleUserPaneHitTest\", 3);", "+\tfUserPaneHitTestProc= cb.getAddress();", "-\tfDataBrowserDataProc= OS.NewDataBrowserDataCallbackUPP(this, \"handleDataBrowserDataCallback\");", "-\tif (fDataBrowserDataProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\tfDataBrowserCompareProc= OS.NewDataBrowserCompareCallbackUPP(this, \"handleDataBrowserCompareCallback\");", "-\tif (fDataBrowserCompareProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\tfDataBrowserItemNotificationProc= OS.NewDataBrowserItemNotificationCallbackUPP(this, \"handleDataBrowserItemNotificationCallback\");", "-\tif (fDataBrowserItemNotificationProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t//fDataBrowserDataProc= OS.NewDataBrowserDataCallbackUPP(this, \"handleDataBrowserDataCallback\");", "+\t//if (fDataBrowserDataProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\tcb= new Callback(this, \"handleDataBrowserDataCallback\", 5);", "+\tfDataBrowserDataProc= cb.getAddress();", "+\t//fDataBrowserCompareProc= OS.NewDataBrowserCompareCallbackUPP(this, \"handleDataBrowserCompareCallback\");", "+\t//if (fDataBrowserCompareProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\tcb= new Callback(this, \"handleDataBrowserCompareCallback\", 4);", "+\tfDataBrowserCompareProc= cb.getAddress();", "+\t//fDataBrowserItemNotificationProc= OS.NewDataBrowserItemNotificationCallbackUPP(this, \"handleDataBrowserItemNotificationCallback\");", "+\t//if (fDataBrowserItemNotificationProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\tcb= new Callback(this, \"handleDataBrowserItemNotificationCallback\", 3);", "+\tfDataBrowserItemNotificationProc= cb.getAddress();", "-\tfMenuProc= OS.NewMenuCallbackUPP(this, \"handleMenuCallback\");", "-\tif (fMenuProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t//fMenuProc= OS.NewMenuCallbackUPP(this, \"handleMenuCallback\");", "+\t//if (fMenuProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\tcb= new Callback(this, \"handleMenuCallback\", 3);", "+\tfMenuProc= cb.getAddress();", "-\t/*", "-\tfControlProc= OS.NewControlCallbackUPP(this, \"handleControlCallback\");", "-\tif (fControlProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t*/", "+\t//int textInputProc= OS.NewTextCallbackUPP(this, \"handleTextCallback\");", "+\t//if (textInputProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\tcb= new Callback(this, \"handleTextCallback\", 3);", "+\tint textInputProc= cb.getAddress();", "-\tint textInputProc= OS.NewTextCallbackUPP(this, \"handleTextCallback\");", "-\tif (textInputProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\tmouseHoverProc = OS.NewEventLoopTimerUPP3(this, \"mouseHoverProc\");", "-\tif (mouseHoverProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t//mouseHoverProc = OS.NewEventLoopTimerUPP3(this, \"mouseHoverProc\");", "+\t//if (mouseHoverProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\tcb= new Callback(this, \"mouseHoverProc\", 2);", "+\tmouseHoverProc= cb.getAddress();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8f4b057742d7a2b1887cacf8409c7b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  protected void init ()", "signatureAfterChange": "  protected void init ()", "diff": ["-", "-\tfScreenDepth= getDeviceDepth(fGDeviceHandle);", "-", "-\t/*", "-\t* The following colors are listed in the Windows", "-\t* Programmer's Reference as the colors in the default", "-\t* palette.", "-\t*/", "-\tCOLOR_BLACK = \t\tColor.carbon_new(this, 0x000000, true);", "-\tCOLOR_DARK_RED = \tColor.carbon_new(this, 0x800000, true);", "-\tCOLOR_DARK_GREEN = \tColor.carbon_new(this, 0x008000, true);", "-\tCOLOR_DARK_YELLOW = Color.carbon_new(this, 0x808000, true);", "-\tCOLOR_DARK_BLUE = \tColor.carbon_new(this, 0x000080, true);", "-\tCOLOR_DARK_MAGENTA =Color.carbon_new(this, 0x800080, true);", "-\tCOLOR_DARK_CYAN = \tColor.carbon_new(this, 0x008080, true);", "-\tCOLOR_GRAY = \t\tColor.carbon_new(this, 0xC0C0C0, true);", "-\tCOLOR_DARK_GRAY = \tColor.carbon_new(this, 0x808080, true);", "-\tCOLOR_RED = \t\tColor.carbon_new(this, 0xFF0000, true);", "-\tCOLOR_GREEN = \t\tColor.carbon_new(this, 0x00FF00, true);", "-\tCOLOR_YELLOW = \t\tColor.carbon_new(this, 0xFFFF00, true);", "-\tCOLOR_BLUE = \t\tColor.carbon_new(this, 0x0000FF, true);", "-\tCOLOR_MAGENTA = \tColor.carbon_new(this, 0xFF00FF, true);", "-\tCOLOR_CYAN = \t\tColor.carbon_new(this, 0x00FFFF, true);", "-\tCOLOR_WHITE = \t\tColor.carbon_new(this, 0xFFFFFF, true);", "+\tcolorspace = OS.CGColorSpaceCreateDeviceRGB();", "+\tif (colorspace == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t", "+\t/* Create the standard colors */", "+\tCOLOR_BLACK = new Color (this, 0,0,0);", "+\tCOLOR_DARK_RED = new Color (this, 0x80,0,0);", "+\tCOLOR_DARK_GREEN = new Color (this, 0,0x80,0);", "+\tCOLOR_DARK_YELLOW = new Color (this, 0x80,0x80,0);", "+\tCOLOR_DARK_BLUE = new Color (this, 0,0,0x80);", "+\tCOLOR_DARK_MAGENTA = new Color (this, 0x80,0,0x80);", "+\tCOLOR_DARK_CYAN = new Color (this, 0,0x80,0x80);", "+\tCOLOR_GRAY = new Color (this, 0xC0,0xC0,0xC0);", "+\tCOLOR_DARK_GRAY = new Color (this, 0x80,0x80,0x80);", "+\tCOLOR_RED = new Color (this, 0xFF,0,0);", "+\tCOLOR_GREEN = new Color (this, 0,0xFF,0);", "+\tCOLOR_YELLOW = new Color (this, 0xFF,0xFF,0);", "+\tCOLOR_BLUE = new Color (this, 0,0,0xFF);", "+\tCOLOR_MAGENTA = new Color (this, 0xFF,0,0xFF);", "+\tCOLOR_CYAN = new Color (this, 0,0xFF,0xFF);", "+\tCOLOR_WHITE = new Color (this, 0xFF,0xFF,0xFF);", "+\t", "+\t/* Initialize the system font slot */", "+\tshort id = OS.GetAppFont();", "+\tshort style = (short)0; ", "+\tshort size = OS.GetDefFontSize();", "+\tint[] font = new int[1];", "+\tif (OS.FMGetFontFromFontFamilyInstance(id, style, font, null) != 0) {", "+\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "+\t}", "+\tsystemFont = Font.carbon_new (this, font[0], id, style, size);"]}], "num": 28153}
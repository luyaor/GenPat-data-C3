{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd35aafb889ef0d664e3ba21f1dcd74b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a73e2e8caaded9f03346284bd4ff2fe6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Caret.java", "commitBeforeChange": "81769f86af686a9108c70f5eccca90f204a41cef", "commitAfterChange": "2409e4895346facaeea6eeef6414188a3d1e2f65", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  boolean drawCaret ()", "signatureAfterChange": "  boolean drawCaret ()", "diff": ["-\t} else {", "-\t\tint /*long*/ gc = OS.gdk_gc_new (window);", "-\t\tGdkColor color = new GdkColor ();", "-\t\tcolor.red = (short) 0xffff;", "-\t\tcolor.green = (short) 0xffff;", "-\t\tcolor.blue = (short) 0xffff;", "-\t\tint /*long*/ colormap = OS.gdk_colormap_get_system ();", "-\t\tOS.gdk_colormap_alloc_color (colormap, color, true, true);", "-\t\tOS.gdk_gc_set_foreground (gc, color);", "-\t\tOS.gdk_gc_set_function (gc, OS.GDK_XOR);", "-\t\tif (image != null && !image.isDisposed() && image.mask == 0) {", "-\t\t\tint[] width = new int[1]; int[] height = new int[1];", "-\t\t\tOS.gdk_drawable_get_size(image.pixmap, width, height);", "-\t\t\tint nX = x;", "-\t\t\tif ((parent.style & SWT.MIRRORED) != 0) nX = parent.getClientWidth () - width[0] - nX;", "-\t\t\tOS.gdk_draw_drawable(window, gc, image.pixmap, 0, 0, nX, y, width[0], height[0]);", "-\t\t} else {", "-\t\t\tint nWidth = width, nHeight = height;", "-\t\t\tif (nWidth <= 0) nWidth = DEFAULT_WIDTH;", "-\t\t\tint nX = x;", "-\t\t\tif ((parent.style & SWT.MIRRORED) != 0) nX = parent.getClientWidth () - nWidth - nX;", "-\t\t\tOS.gdk_draw_rectangle (window, gc, 1, nX, y, nWidth, nHeight);", "-\t\t}", "-\t\tOS.g_object_unref (gc);", "-\t\tOS.gdk_colormap_free_colors (colormap, color, 1);", "+\t\treturn true;", "+\tint /*long*/ gc = OS.gdk_gc_new (window);", "+\tGdkColor color = new GdkColor ();", "+\tcolor.red = (short) 0xffff;", "+\tcolor.green = (short) 0xffff;", "+\tcolor.blue = (short) 0xffff;", "+\tint /*long*/ colormap = OS.gdk_colormap_get_system ();", "+\tOS.gdk_colormap_alloc_color (colormap, color, true, true);", "+\tOS.gdk_gc_set_foreground (gc, color);", "+\tOS.gdk_gc_set_function (gc, OS.GDK_XOR);", "+\tif (image != null && !image.isDisposed() && image.mask == 0) {", "+\t\tint[] width = new int[1]; int[] height = new int[1];", "+\t \tOS.gdk_drawable_get_size(image.pixmap, width, height);", "+\t \tint nX = x;", "+\t\tif ((parent.style & SWT.MIRRORED) != 0) nX = parent.getClientWidth () - width[0] - nX;", "+\t \tOS.gdk_draw_drawable(window, gc, image.pixmap, 0, 0, nX, y, width[0], height[0]);", "+\t} else {", "+\t\tint nWidth = width, nHeight = height;", "+\t\tif (nWidth <= 0) nWidth = DEFAULT_WIDTH;", "+\t\tint nX = x;", "+\t\tif ((parent.style & SWT.MIRRORED) != 0) nX = parent.getClientWidth () - nWidth - nX;", "+\t\tOS.gdk_draw_rectangle (window, gc, 1, nX, y, nWidth, nHeight);", "+\t}", "+\tOS.g_object_unref (gc);", "+\tOS.gdk_colormap_free_colors (colormap, color, 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "409671df088d3d03bc4381e171f793fe", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Scrollable.java", "commitBeforeChange": "b7a00bf87c6bba490035767725a315da54b8693f", "commitAfterChange": "27a42a02f1d3398db6d0fbf73906bf95e2b7693c", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  void layoutControl ()", "signatureAfterChange": "  void layoutControl ()", "diff": ["-\tif (scrolledHandle != 0) {", "-\t\tint vWidth = 0, hHeight = 0;", "-\t\tint [] outMetric = new int [1];", "-\t\tOS.GetThemeMetric (OS.kThemeMetricScrollBarWidth, outMetric);", "-\t\tboolean isVisibleHBar = horizontalBar != null && horizontalBar.getVisible ();", "-\t\tboolean isVisibleVBar = verticalBar != null && verticalBar.getVisible ();", "-\t\tif (isVisibleHBar) hHeight = outMetric [0];", "-\t\tif (isVisibleVBar) vWidth = outMetric [0];", "-\t\tRect rect = new Rect ();", "-\t\tOS.GetControlBounds (scrolledHandle, rect);", "-\t\tRect inset = inset ();", "-\t\tint width = Math.max (0, rect.right - rect.left - vWidth - inset.left - inset.right);", "-\t\tint height = Math.max (0, rect.bottom - rect.top - hHeight - inset.top - inset.bottom);", "-\t\tif (isVisibleHBar) {", "-\t\t\tsetBounds (horizontalBar.handle, inset.left, inset.top + height, width, hHeight, true, true, false);", "-\t\t}", "-\t\tif (isVisibleVBar) {", "-\t\t\tsetBounds (verticalBar.handle, inset.left + width, inset.top, vWidth, height, true, true, false);", "-\t\t}", "-\t\tsetBounds (handle, inset.left, inset.top, width, height, true, true, false);", "-\t}\t", "+\tif (scrolledHandle == 0) return;", "+\tint vWidth = 0, hHeight = 0;", "+\tint [] outMetric = new int [1];", "+\tOS.GetThemeMetric (OS.kThemeMetricScrollBarWidth, outMetric);", "+\tboolean isVisibleHBar = horizontalBar != null && horizontalBar.getVisible ();", "+\tboolean isVisibleVBar = verticalBar != null && verticalBar.getVisible ();", "+\tif (isVisibleHBar) hHeight = outMetric [0];", "+\tif (isVisibleVBar) vWidth = outMetric [0];", "+\tRect rect = new Rect ();", "+\tOS.GetControlBounds (scrolledHandle, rect);", "+\tRect inset = inset ();", "+\tint width = Math.max (0, rect.right - rect.left - vWidth - inset.left - inset.right);", "+\tint height = Math.max (0, rect.bottom - rect.top - hHeight - inset.top - inset.bottom);", "+\tsetBounds (handle, inset.left, inset.top, width, height, true, true, false);", "+\tif (isVisibleHBar) {", "+\t\tsetBounds (horizontalBar.handle, inset.left, inset.top + height, width, hHeight, true, true, false);", "+\t}", "+\tif (isVisibleVBar) {", "+\t\tsetBounds (verticalBar.handle, inset.left + width, inset.top, vWidth, height, true, true, false);", "+\t}"]}], "num": 8277}
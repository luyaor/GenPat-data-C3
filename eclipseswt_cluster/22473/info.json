{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d029b6feb791561be8b3edadca1aadef", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4c237030dd23787f2a62a57c8246fb0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "4faa8b62274061a69c9fde705f4554b9372ba089", "commitAfterChange": "e62bb85e87e45d91d237499269e5e0197f2153bf", "methodNumberBeforeChange": 123, "methodNumberAfterChange": 123, "signatureBeforeChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["+\t/*", "+\t* Feature of Mozilla.  When a redirect occurs to a site with an invalid", "+\t* certificate, no STATE_IS_DOCUMENT state transitions are received for the", "+\t* new location, and an immediate attempt is made to show the invalid", "+\t* certificate error.  However our invalid certificate handler must know", "+\t* the site with the invalid certificate, not the site that redirected to", "+\t* it.  The only opportunity to get this site before our invalid certificate", "+\t* handler is invoked is in the subsequent STATE_START | STATE_IS_REQUEST", "+\t* transition.  When this comes, if the request's name appears to be a", "+\t* url then take this to be the new site, in case our invalid certificate", "+\t* handler is about to be invoked.", "+\t* ", "+\t* Note that updateLastNavigateUrl is not reset to false here so that in", "+\t* typical contexts where a redirect occurs without an accompanying invalid", "+\t* certificate, the updated site will be retrieved from the channel (this", "+\t* is more proper) on the next STATE_TRANSFERRING | STATE_IS_DOCUMENT transition.", "+\t*/", "+\tif (updateLastNavigateUrl && aStateFlags == (nsIWebProgressListener.STATE_IS_REQUEST | nsIWebProgressListener.STATE_START)) {", "+\t\tnsIRequest request = new nsIRequest (aRequest);", "+\t\tint /*long*/ name = XPCOM.nsEmbedCString_new ();", "+\t\tint rc = request.GetName (name);", "+\t\tif (rc == XPCOM.NS_OK) {", "+\t\t\tint length = XPCOM.nsEmbedCString_Length (name);", "+\t\t\tint /*long*/ buffer = XPCOM.nsEmbedCString_get (name);", "+\t\t\tbyte[] bytes = new byte[length];", "+\t\t\tXPCOM.memmove (bytes, buffer, length);", "+\t\t\tString value = new String (bytes);", "+\t\t\tif (value.indexOf (\":/\") != -1) lastNavigateURL = value;\t//$NON-NLS-1$", "+\t\t}", "+\t\tXPCOM.nsEmbedCString_delete (name);", "+\t}", "+", "+\t\tupdateLastNavigateUrl = true;", "+\t\tif (updateLastNavigateUrl) {", "+\t\t\tupdateLastNavigateUrl = false;", "+\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\tnsIRequest request = new nsIRequest (aRequest);", "+", "+\t\t\tint rc = request.QueryInterface (nsIChannel.NS_ICHANNEL_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\t\tnsIChannel channel = new nsIChannel (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\trc = channel.GetURI (result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NULL_POINTER);", "+\t\t\tchannel.Release ();", "+", "+\t\t\tnsIURI uri = new nsIURI (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new ();", "+\t\t\trc = uri.GetSpec (aSpec);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tint length = XPCOM.nsEmbedCString_Length (aSpec);", "+\t\t\tint /*long*/ buffer = XPCOM.nsEmbedCString_get (aSpec);", "+\t\t\tbyte[] bytes = new byte[length];", "+\t\t\tXPCOM.memmove (bytes, buffer, length);", "+\t\t\tlastNavigateURL = new String (bytes);", "+\t\t\tXPCOM.nsEmbedCString_delete (aSpec);", "+\t\t\turi.Release ();", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "090616b4b666f77710b505a8aa02c7b2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/PromptService2.java", "commitBeforeChange": "0fc40a1b42db186715b9e463f0d06c86543ea114", "commitAfterChange": "96316cf49d0e892bc89eb57b2ec8956e4f218465", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  int PromptAuth(int aParent, int aChannel, int level, int authInfo, int checkboxLabel, int checkboxValue, int _retval)", "signatureAfterChange": "  int PromptAuth(int aParent, int aChannel, int level, int authInfo, int checkboxLabel, int checkboxValue, int _retval)", "diff": ["-\tnsIChannel channel = new nsIChannel (aChannel);", "-\tint /*long*/[] uri = new int /*long*/[1];", "-\tint rc = channel.GetURI (uri);", "-\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "-\tif (uri[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "-", "-\tnsIURI nsURI = new nsIURI (uri[0]);", "-\tint /*long*/ host = XPCOM.nsEmbedCString_new ();", "-\trc = nsURI.GetHost (host);", "-\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "-\tint length = XPCOM.nsEmbedCString_Length (host);", "-\tint /*long*/ buffer = XPCOM.nsEmbedCString_get (host);", "-\tbyte[] bytes = new byte[length];", "-\tXPCOM.memmove (bytes, buffer, length);", "-\tString hostString = new String (bytes);", "-\tXPCOM.nsEmbedCString_delete (host);", "-", "-\tint /*long*/ spec = XPCOM.nsEmbedCString_new ();", "-\trc = nsURI.GetSpec (spec);", "-\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "-\tlength = XPCOM.nsEmbedCString_Length (spec);", "-\tbuffer = XPCOM.nsEmbedCString_get (spec);", "-\tbytes = new byte[length];", "-\tXPCOM.memmove (bytes, buffer, length);", "-\tString urlString = new String (bytes);", "-\tXPCOM.nsEmbedCString_delete (spec);", "-\tnsURI.Release ();", "-", "-\t\t\t\tevent.location = urlString;", "+\t\t\t\tevent.location = mozilla.lastNavigateURL;", "-\t\t\t\t\trc = auth.SetUsername (string.getAddress ());", "+\t\t\t\t\tint rc = auth.SetUsername (string.getAddress ());", "-\t\tlength = XPCOM.strlen_PRUnichar (checkboxLabel);", "+\t\tint length = XPCOM.strlen_PRUnichar (checkboxLabel);", "-\trc = auth.GetUsername (ptr);", "+\tint rc = auth.GetUsername (ptr);", "-\tlength = XPCOM.nsEmbedString_Length (ptr);", "-\tbuffer = XPCOM.nsEmbedString_get (ptr);", "+\tint length = XPCOM.nsEmbedString_Length (ptr);", "+\tint /*long*/ buffer = XPCOM.nsEmbedString_get (ptr);", "+\tnsIChannel channel = new nsIChannel (aChannel);", "+\tint /*long*/[] uri = new int /*long*/[1];", "+\trc = channel.GetURI (uri);", "+\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\tif (uri[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIURI nsURI = new nsIURI (uri[0]);", "+\tint /*long*/ host = XPCOM.nsEmbedCString_new ();", "+\trc = nsURI.GetHost (host);", "+\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\tlength = XPCOM.nsEmbedCString_Length (host);", "+\tbuffer = XPCOM.nsEmbedCString_get (host);", "+\tbyte[] bytes = new byte[length];", "+\tXPCOM.memmove (bytes, buffer, length);", "+\tString hostString = new String (bytes);", "+\tXPCOM.nsEmbedCString_delete (host);", "+\tnsURI.Release ();", "+"]}], "num": 22473}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "43f902c763994babff0ebd0b129aee72", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e47aac44695cce90400134a3e7cb4885", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "12de0f7ac678212aa29b6056881b6834dba6f8ac", "commitAfterChange": "dcf63b805bd9f73d657e22a2eb20df591ffc4ab1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["+", "+\t\tString greInitialized = System.getProperty (GRE_INITIALIZED); ", "+\t\tif (\"true\".equals (greInitialized)) { //$NON-NLS-1$", "+\t\t\t/* ", "+\t\t\t * Another browser has already initialized xulrunner in this process,", "+\t\t\t * so just bind to it instead of trying to initialize a new one.", "+\t\t\t */", "+\t\t\tInitialized = true;", "+\t\t}", "-\t\t\tString xulrunnerInitialized = System.getProperty (XULRUNNER_INITIALIZED); ", "-\t\t\tif (\"true\".equals (xulrunnerInitialized)) {", "-\t\t\t\t/* ", "-\t\t\t\t * Another browser has already initialized xulrunner in this process,", "-\t\t\t\t * so just bind to it instead of trying to initialize a new one.", "-\t\t\t\t */", "-\t\t\t\tInitialized = true;", "-\t\t\t}", "-\t\t\t\t\t\tXPCOMInit.XPCOMGlueShutdown ();", "+\t\t\t\t\t\tGlueStartupCount++;", "+\t\t\tGlueStartupCount++;", "-\t\t\tSystem.setProperty (XULRUNNER_PATH, mozillaPath);", "-\t\t\tSystem.setProperty (XULRUNNER_INITIALIZED, \"true\"); //$NON-NLS-1$", "+\t\t\tSystem.setProperty (GRE_INITIALIZED, \"true\"); //$NON-NLS-1$", "+\t\t\tif (IsXULRunner) {", "+\t\t\t\tSystem.setProperty (XULRUNNER_PATH, mozillaPath);", "+\t\t\t}", "-", "-\t\t\tdisplay.addListener (SWT.Dispose, new Listener () {", "-\t\t\t\tpublic void handleEvent (Event event) {", "-\t\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-", "-\t\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\t\t\t\t\tresult[0] = 0;\t\t", "-\t\t\t\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "-\t\t\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\t\tserviceManager.Release ();", "-", "-\t\t\t\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_BEFORE_CHANGE, true);", "-\t\t\t\t\tint length = SHUTDOWN_PERSIST.length ();", "-\t\t\t\t\tchar[] chars = new char [length + 1];", "-\t\t\t\t\tSHUTDOWN_PERSIST.getChars (0, length, chars, 0);", "-\t\t\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tobserverService.Release ();", "-\t\t\t\t}", "-\t\t\t});", "+\tif (display.getData (DISPOSE_LISTENER_HOOKED) == null) {", "+\t\tdisplay.setData (DISPOSE_LISTENER_HOOKED, DISPOSE_LISTENER_HOOKED);", "+\t\tdisplay.addListener (SWT.Dispose, new Listener () {", "+\t\t\tpublic void handleEvent (Event event) {", "+\t\t\t\tif (BrowserCount > 0) return; /* another display is still active */", "+", "+\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\t\t\t\tresult[0] = 0;\t\t", "+\t\t\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "+\t\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\t\t\tserviceManager.Release ();", "+", "+\t\t\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_BEFORE_CHANGE, true);", "+\t\t\t\tint length = SHUTDOWN_PERSIST.length ();", "+\t\t\t\tchar[] chars = new char [length + 1];", "+\t\t\t\tSHUTDOWN_PERSIST.getChars (0, length, chars, 0);", "+\t\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tobserverService.Release ();", "+", "+\t\t\t\tif (GlueStartupCount > 0) {", "+\t\t\t\t\tXPCOM.XPCOMGlueShutdown ();", "+\t\t\t\t\tif (GlueStartupCount > 1) {", "+\t\t\t\t\t\tXPCOMInit.XPCOMGlueShutdown ();", "+\t\t\t\t\t}", "+\t\t\t\t\tGlueStartupCount = 0;", "+\t\t\t\t}", "+\t\t\t\tInitialized = false;", "+\t\t\t}", "+\t\t});", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d69e2cb51b7ae223ce122b6cba717372", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "07959d909e8636c9d0fc8d0533ebc814870527be", "commitAfterChange": "2e018166adf3de407abb1d59b1d6d286fc16acc0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["+\t\t\tLocationProvider = new AppFileLocProvider (mozillaPath);", "+\t\t\tLocationProvider.AddRef ();", "+", "-\t\t\trc = XPCOM.NS_InitXPCOM2 (0, localFile.getAddress(), 0);", "+\t\t\trc = XPCOM.NS_InitXPCOM2 (0, localFile.getAddress(), LocationProvider.getAddress ());", "-\t\t\t", "+", "-\t\t/* compute the root profile directory */", "+\t\t/* compute the profile directory and set it on the AppFileLocProvider */", "-\t\tprofileRootDirectory = new String (MozillaDelegate.mbcsToWcs (null, buffer)) + PROFILE_DIR;", "+\t\tString profilePath = new String (MozillaDelegate.mbcsToWcs (null, buffer)) + PROFILE_DIR;", "+\t\tLocationProvider.setProfilePath (profilePath);", "+", "+\t\t/* notify observers of a new profile directory being used */", "+\t\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "+\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (rc);", "+\t\t}", "+\t\tif (result[0] == 0) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (XPCOM.NS_NOINTERFACE);", "+\t\t}", "+", "+\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "+\t\tresult[0] = 0;", "+\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_DO_CHANGE, true);", "+\t\tlength = STARTUP.length ();", "+\t\tchar[] chars = new char [length + 1];", "+\t\tSTARTUP.getChars (0, length, chars, 0);", "+\t\trc = observerService.NotifyObservers (0, buffer, chars);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (rc);", "+\t\t}", "+\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_AFTER_CHANGE, true);", "+\t\trc = observerService.NotifyObservers (0, buffer, chars);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (rc);", "+\t\t}", "+\t\tobserverService.Release ();", "-\trc = XPCOM.NS_GetServiceManager (result);", "-\tif (rc != XPCOM.NS_OK) {", "-\t\tbrowser.dispose ();", "-\t\terror (rc);", "-\t}", "-\tif (result[0] == 0) {", "-\t\tbrowser.dispose ();", "-\t\terror (XPCOM.NS_NOINTERFACE);", "-\t}", "-", "-\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\tresult[0] = 0;\t\t", "-\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true);", "-\trc = serviceManager.GetServiceByContractID (buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result);", "-\tif (rc != XPCOM.NS_OK) {", "-\t\tbrowser.dispose ();", "-\t\terror (rc);", "-\t}", "-\tif (result[0] == 0) {", "-\t\tbrowser.dispose ();", "-\t\terror (XPCOM.NS_NOINTERFACE);", "-\t}", "-", "-\tnsIDirectoryService directoryService = new nsIDirectoryService (result[0]);", "-\tresult[0] = 0;", "-\trc = directoryService.RegisterProvider(directoryServiceProviderListener.getAddress ());", "-\tif (rc != XPCOM.NS_OK) {", "-\t\tbrowser.dispose ();", "-\t\terror (rc);", "-\t}", "-\tdirectoryService.Release ();", "-", "-\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "-\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "-\tif (rc != XPCOM.NS_OK) {", "-\t\tbrowser.dispose ();", "-\t\terror (rc);", "-\t}", "-\tif (result[0] == 0) {", "-\t\tbrowser.dispose ();", "-\t\terror (XPCOM.NS_NOINTERFACE);", "-\t}", "-\tserviceManager.Release ();", "-", "-\tnsIObserverService observerService = new nsIObserverService (result[0]);", "-\tresult[0] = 0;", "-\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_DO_CHANGE, true);", "-\tint length = STARTUP.length ();", "-\tchar[] chars = new char [length + 1];", "-\tSTARTUP.getChars (0, length, chars, 0);", "-\trc = observerService.NotifyObservers (0, buffer, chars);", "-\tif (rc != XPCOM.NS_OK) {", "-\t\tbrowser.dispose ();", "-\t\terror (rc);", "-\t}", "-\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_AFTER_CHANGE, true);", "-\trc = observerService.NotifyObservers (0, buffer, chars);", "-\tif (rc != XPCOM.NS_OK) {", "-\t\tbrowser.dispose ();", "-\t\terror (rc);", "-\t}", "-\tobserverService.Release ();", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "083786e7f34d42533f5bfcef3b3d169a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "83784a0bd43bf551a0a4fb21e5409eeadecd384d", "commitAfterChange": "9a54c1aa04b815cd59a20141bb2dcedb14acb097", "methodNumberBeforeChange": 179, "methodNumberAfterChange": 185, "signatureBeforeChange": "  int NotifyCertProblem (int socketInfo, int status, int targetSite, int _suppressError)", "signatureAfterChange": "  int NotifyCertProblem (int socketInfo, int status, int targetSite, int _suppressError)", "diff": ["-\t\t\tif (!url.equals (lastNavigateURL)) return;\t/* user has navigated elsewhere */", "-", "-\t\t\tString message = Compatibility.getMessage (\"SWT_InvalidCert_Message\", new String[] {urlPort}); //$NON-NLS-1$", "-\t\t\tif (new PromptDialog (browser.getShell ()).invalidCert (browser, message, finalProblems, cert)) {", "-\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\t", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_CERTOVERRIDE_CONTRACTID, true);", "-\t\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsICertOverrideService.NS_ICERTOVERRIDESERVICE_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\tserviceManager.Release ();", "-\t\t", "-\t\t\t\tnsICertOverrideService overrideService = new nsICertOverrideService (result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tbyte[] hostBytes = MozillaDelegate.wcsToMbcs (null, host, false);", "-\t\t\t\tint /*long*/ hostString = XPCOM.nsEmbedCString_new (hostBytes, hostBytes.length);", "-\t\t\t\trc = overrideService.RememberValidityOverride (hostString, port, cert.getAddress (), finalFlags, 1);", "-\t\t\t\tbrowser.setUrl (url);", "-\t\t\t\tXPCOM.nsEmbedCString_delete (hostString);", "-\t\t\t\toverrideService.Release ();", "+\t\t\tif (url.equals (lastNavigateURL)) {", "+\t\t\t\tString message = Compatibility.getMessage (\"SWT_InvalidCert_Message\", new String[] {urlPort}); //$NON-NLS-1$", "+\t\t\t\tif (new PromptDialog (browser.getShell ()).invalidCert (browser, message, finalProblems, cert)) {", "+\t\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\t\t", "+\t\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\t\t\t\t\tresult[0] = 0;", "+\t\t\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_CERTOVERRIDE_CONTRACTID, true);", "+\t\t\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsICertOverrideService.NS_ICERTOVERRIDESERVICE_IID, result);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\t\t\t\tserviceManager.Release ();", "+\t\t\t", "+\t\t\t\t\tnsICertOverrideService overrideService = new nsICertOverrideService (result[0]);", "+\t\t\t\t\tresult[0] = 0;", "+\t\t\t\t\tbyte[] hostBytes = MozillaDelegate.wcsToMbcs (null, host, false);", "+\t\t\t\t\tint /*long*/ hostString = XPCOM.nsEmbedCString_new (hostBytes, hostBytes.length);", "+\t\t\t\t\trc = overrideService.RememberValidityOverride (hostString, port, cert.getAddress (), finalFlags, 1);", "+\t\t\t\t\tnavigate (badCertRequest);", "+\t\t\t\t\tXPCOM.nsEmbedCString_delete (hostString);", "+\t\t\t\t\toverrideService.Release ();", "+\t\t\t\t}", "+\t\t\tnew nsISupports (badCertRequest).Release ();", "+\t\t\tbadCertRequest = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb836485201ce973e9045b30a4e16980", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "3c5d7aef7c79c1b0138c18130d736f9efe7a17ae", "commitAfterChange": "a7e4b977352d0752b12866130d41a63e4e06d3c2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\tdisplay.addListener (SWT.Dispose, new Listener () {", "-\t\t\tpublic void handleEvent (Event event) {", "-\t\t\t\tif (BrowserCount > 0) return; /* another display is still active */", "-", "-\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\t\t\t\tresult[0] = 0;\t\t", "-\t\t\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "-\t\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-", "-\t\t\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_BEFORE_CHANGE, true);", "-\t\t\t\tint length = SHUTDOWN_PERSIST.length ();", "-\t\t\t\tchar[] chars = new char [length + 1];", "-\t\t\t\tSHUTDOWN_PERSIST.getChars (0, length, chars, 0);", "-\t\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tobserverService.Release ();", "-", "-\t\t\t\tif (LocationProvider != null) {", "-\t\t\t\t\tString prefsLocation = LocationProvider.profilePath + AppFileLocProvider.PREFERENCES_FILE;", "-\t\t\t\t\tnsEmbedString pathString = new nsEmbedString (prefsLocation);", "-\t\t\t\t\trc = XPCOM.NS_NewLocalFile (pathString.getAddress (), 1, result);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NULL_POINTER);", "-\t\t\t\t\tpathString.dispose ();", "-", "-\t\t\t\t\tnsILocalFile localFile = new nsILocalFile (result [0]);", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t    rc = localFile.QueryInterface (nsIFile.NS_IFILE_IID, result); ", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\t\t\t\tlocalFile.Release ();", "-", "-\t\t\t\t\tnsIFile prefFile = new nsIFile (result[0]);", "-\t\t\t\t\tresult[0] = 0;", "-", "-\t\t\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_PREFSERVICE_CONTRACTID, true);", "-\t\t\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIPrefService.NS_IPREFSERVICE_IID, result);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-", "-\t\t\t\t\tnsIPrefService prefService = new nsIPrefService (result[0]);", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\trc = prefService.SavePrefFile (prefFile.getAddress ());", "-\t\t\t\t\tprefService.Release ();", "-\t\t\t\t\tprefFile.Release ();", "-\t\t\t\t}", "-\t\t\t\tserviceManager.Release ();", "-", "-\t\t\t\tif (XPCOMWasGlued) {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* The following is intentionally commented because it causes subsequent", "-\t\t\t\t\t* browser instantiations within the process to fail.  Mozilla does not", "-\t\t\t\t\t* support being unloaded and then re-initialized in a process, see", "-\t\t\t\t\t* http://www.mail-archive.com/dev-embedding@lists.mozilla.org/msg01732.html . ", "-\t\t\t\t\t*/", "-", "-//\t\t\t\t\tint size = XPCOM.nsDynamicFunctionLoad_sizeof ();", "-//\t\t\t\t\t/* alloc memory for two structs, the second is empty to signify the end of the list */", "-//\t\t\t\t\tint /*long*/ ptr = C.malloc (size * 2);", "-//\t\t\t\t\tC.memset (ptr, 0, size * 2);", "-//\t\t\t\t\tnsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();", "-//\t\t\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_TermEmbedding\", true); //$NON-NLS-1$", "-//\t\t\t\t\tfunctionLoad.functionName = C.malloc (bytes.length);", "-//\t\t\t\t\tC.memmove (functionLoad.functionName, bytes, bytes.length);", "-//\t\t\t\t\tfunctionLoad.function = C.malloc (C.PTR_SIZEOF);", "-//\t\t\t\t\tC.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);", "-//\t\t\t\t\tXPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());", "-//\t\t\t\t\tXPCOM.XPCOMGlueLoadXULFunctions (ptr);", "-//\t\t\t\t\tC.memmove (result, functionLoad.function, C.PTR_SIZEOF);", "-//\t\t\t\t\tint /*long*/ functionPtr = result[0];", "-//\t\t\t\t\tresult[0] = 0;", "-//\t\t\t\t\tC.free (functionLoad.function);", "-//\t\t\t\t\tC.free (functionLoad.functionName);", "-//\t\t\t\t\tC.free (ptr);", "-//\t\t\t\t\tXPCOM.Call (functionPtr);", "-", "-//\t\t\t\t\tXPCOM.XPCOMGlueShutdown ();", "-\t\t\t\t\tXPCOMWasGlued = false;", "-\t\t\t\t}", "-\t\t\t\tif (XPCOMInitWasGlued) {", "-\t\t\t\t\tXPCOMInit.XPCOMGlueShutdown ();", "-\t\t\t\t\tXPCOMInitWasGlued = false;", "-\t\t\t\t}", "-\t\t\t\tInitialized = false;", "-\t\t\t}", "-\t\t});", "-", "+\t\tdisplay.addListener (SWT.Dispose, DisplayListener);"]}], "num": 9840}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e749ff0f59bf2928e5a6f02184b5fa99", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "508e1585d1eb85081b8bee69c90a2200", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Region.java", "commitBeforeChange": "e9d1e006c7c09a24d0a19c508e6d3eeb9e0e2945", "commitAfterChange": "638c82a3eaa6b5eaaec9e7bf374f16b2cfb4ff44", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void test_equalsLjava_lang_Object()", "signatureAfterChange": "  public void test_equalsLjava_lang_Object()", "diff": ["-\tif (!reg1.equals(reg2)) {", "-\t\treg1.dispose();", "-\t\treg2.dispose();", "-\t\tfail(\"two instances of Region representing the same area should be considered equal\");", "-\t}\t\t", "+// Currently, Regions are only \"equal\" if they have the same handle.", "+// This is so that identical objects are properly hashed.", "+// We are considering adding a new method that will compare Regions for the same area.", "+//\tif (!reg1.equals(reg2)) {", "+//\t\treg1.dispose();", "+//\t\treg2.dispose();", "+//\t\tfail(\"two instances of Region representing the same area should be considered equal\");", "+//\t}\t\t", "-\t\tfail(\"Non empy region considered equal to empty one\");", "+\t\tfail(\"Non empty region considered equal to empty one\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a3f22bb35f21e45e3983d04d43208f6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/NativesGenerator.java", "commitBeforeChange": "f914a159e91278570aabf29bce48ac3c9780f95a", "commitAfterChange": "862cb4ad13ca33597c2ef8c756bbe81fa582e81f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  void generateFunctionCall(Method method, MethodData methodData, Class[] paramTypes, Class returnType, boolean needsReturn)", "signatureAfterChange": "  void generateFunctionCall(Method method, MethodData methodData, Class[] paramTypes, Class returnType, boolean needsReturn)", "diff": ["-\t\t\tif (methodData.getFlag(FLAG_STRUCT)) {", "-\t\t\t\toutput(\"TO_HANDLE_STRUCT(\");", "-\t\t\t} else {", "-\t\t\t\toutput(\"TO_HANDLE(\");", "-\t\t\t}", "+\t\t\toutput(\"TO_HANDLE(\");", "-\t\t\tif (methodData.getFlag(FLAG_STRUCT)) {", "-\t\t\t\toutput(\"TO_HANDLE_STRUCT(\");", "-\t\t\t} else {", "-\t\t\t\toutput(\"TO_HANDLE(\");\t\t\t\t", "-\t\t\t}", "+\t\t\toutput(\"TO_HANDLE(\");\t\t\t\t"]}], "num": 61411}
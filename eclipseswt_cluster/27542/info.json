{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "770023fad9047783597b0cd7d216f89a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "954d282d88f220ee6f280660c574ea9a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Pattern.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Pattern(Device device, float x1, float y1, float x2, float y2, Color color1, int alpha1, Color color2, int alpha2)", "signatureAfterChange": " public Pattern(Device device, float x1, float y1, float x2, float y2, Color color1, int alpha1, Color color2, int alpha2)", "diff": ["-\tpt1 = new NSPoint();", "-\tpt2 = new NSPoint();", "-\tpt1.x = x1;", "-\tpt1.y = y1;", "-\tpt2.x = x2;", "-\tpt2.y = y2;", "-\tthis.color1 = color1.handle;", "-\tthis.color2 = color2.handle;", "-\tthis.alpha1 = alpha1;", "-\tthis.alpha2 = alpha2;", "-\tNSColor start = NSColor.colorWithDeviceRed(color1.handle[0], color1.handle[1], color1.handle[2], alpha1 / 255f);", "-\tNSColor end = NSColor.colorWithDeviceRed(color2.handle[0], color2.handle[1], color2.handle[2], alpha2 / 255f);", "-\tgradient = ((NSGradient)new NSGradient().alloc()).initWithStartingColor(start, end);", "-\tinit();", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tpt1 = new NSPoint();", "+\t\tpt2 = new NSPoint();", "+\t\tpt1.x = x1;", "+\t\tpt1.y = y1;", "+\t\tpt2.x = x2;", "+\t\tpt2.y = y2;", "+\t\tthis.color1 = color1.handle;", "+\t\tthis.color2 = color2.handle;", "+\t\tthis.alpha1 = alpha1;", "+\t\tthis.alpha2 = alpha2;", "+\t\tNSColor start = NSColor.colorWithDeviceRed(color1.handle[0], color1.handle[1], color1.handle[2], alpha1 / 255f);", "+\t\tNSColor end = NSColor.colorWithDeviceRed(color2.handle[0], color2.handle[1], color2.handle[2], alpha2 / 255f);", "+\t\tgradient = ((NSGradient)new NSGradient().alloc()).initWithStartingColor(start, end);", "+\t\tinit();", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3308813e61be4ef1df63bf0f09822a10", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "1e86d180ad8e86da26dd9b591f9c39ecc198b3fe", "commitAfterChange": "6a60fc0317f7258e120abee63248bb550abb5ce1", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void setBackground(Color color)", "signatureAfterChange": " public void setBackground(Color color)", "diff": ["-\tbyte red = (byte)((transparentPixel >> 16) & 0xFF);", "-\tbyte green = (byte)((transparentPixel >> 8) & 0xFF);", "-\tbyte blue = (byte)((transparentPixel >> 0) & 0xFF);", "-\tbyte newRed = (byte)((int)(color.handle[0] * 255) & 0xFF);", "-\tbyte newGreen = (byte)((int)(color.handle[1] * 255) & 0xFF);", "-\tbyte newBlue = (byte)((int)(color.handle[2] * 255) & 0xFF);", "-\tint /*long*/ bpr = imageRep.bytesPerRow();", "-\tint /*long*/ data = imageRep.bitmapData();", "-\tbyte[] line = new byte[(int)bpr];", "-\tfor (int i = 0, offset = 0; i < height; i++, offset += bpr) {", "-\t\tOS.memmove(line, data + offset, bpr);", "-\t\tfor (int j = 0; j  < line.length; j += 4) {", "-\t\t\tif (line[j+ 1] == red && line[j + 2] == green && line[j + 3] == blue) {", "-\t\t\t\tline[j + 1] = newRed;", "-\t\t\t\tline[j + 2] = newGreen;", "-\t\t\t\tline[j + 3] = newBlue;", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tbyte red = (byte)((transparentPixel >> 16) & 0xFF);", "+\t\tbyte green = (byte)((transparentPixel >> 8) & 0xFF);", "+\t\tbyte blue = (byte)((transparentPixel >> 0) & 0xFF);", "+\t\tbyte newRed = (byte)((int)(color.handle[0] * 255) & 0xFF);", "+\t\tbyte newGreen = (byte)((int)(color.handle[1] * 255) & 0xFF);", "+\t\tbyte newBlue = (byte)((int)(color.handle[2] * 255) & 0xFF);", "+\t\tint /*long*/ bpr = imageRep.bytesPerRow();", "+\t\tint /*long*/ data = imageRep.bitmapData();", "+\t\tbyte[] line = new byte[(int)bpr];", "+\t\tfor (int i = 0, offset = 0; i < height; i++, offset += bpr) {", "+\t\t\tOS.memmove(line, data + offset, bpr);", "+\t\t\tfor (int j = 0; j  < line.length; j += 4) {", "+\t\t\t\tif (line[j+ 1] == red && line[j + 2] == green && line[j + 3] == blue) {", "+\t\t\t\t\tline[j + 1] = newRed;", "+\t\t\t\t\tline[j + 2] = newGreen;", "+\t\t\t\t\tline[j + 3] = newBlue;", "+\t\t\t\t}", "+\t\t\tOS.memmove(data + offset, line, bpr);", "-\t\tOS.memmove(data + offset, line, bpr);", "+\t\ttransparentPixel = (newRed & 0xFF) << 16 | (newGreen & 0xFF) << 8 | (newBlue & 0xFF);", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "-\ttransparentPixel = (newRed & 0xFF) << 16 | (newGreen & 0xFF) << 8 | (newBlue & 0xFF);"]}], "num": 27542}
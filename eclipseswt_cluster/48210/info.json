{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd9ec7f0884e7d2c9b62a6a681b53f6a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "795aeb5a52f73a0a2dad597b81f12c6c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "4a41229267d8ec39ffddb937135f7f228c3d90ec", "commitAfterChange": "a3f5ef23bb9a2d806a5c1b1bcf9eba42e3d5e4ca", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public CTabFolder(Composite parent, int style)", "signatureAfterChange": "\r public CTabFolder(Composite parent, int style)", "diff": ["-\t\r", "-\t// create scrolling arrow buttons\r", "-\tscrollBar = new ToolBar(this, SWT.FLAT);\r", "-\tscrollBar.setVisible(false);\r", "-\tscrollBar.setBackground(background);\r", "-\tscrollLeft = new ToolItem(scrollBar, SWT.PUSH);\r", "-\tscrollLeft.setEnabled(false);\r", "-\tscrollRight = new ToolItem(scrollBar, SWT.PUSH);\r", "-\tscrollRight.setEnabled(false);\r", "-\t\r", "-\t// create close buttons\r", "-\tcloseBar = new ToolBar(this, SWT.FLAT);\r", "-\tcloseBar.setVisible(false);\r", "-\tcloseBar.setBackground(background);\r", "-\tcloseItem = new ToolItem(closeBar, SWT.PUSH);\r", "-\t\r", "-\tinactiveCloseBar = new ToolBar(this, SWT.FLAT);\r", "-\tinactiveCloseBar.setVisible(false);\r", "-\tinactiveCloseBar.setBackground(background);\r", "-\tinactiveCloseItem = new ToolItem(inactiveCloseBar, SWT.PUSH);\r", "-\t\r", "-\t\t\t\tcase SWT.Dispose:\t\t\tonDispose(); break;\r", "-\t\t\t\tcase SWT.Paint:\t\t\tonPaint(event);\tbreak;\r", "-\t\t\t\tcase SWT.Resize:\t\t\tonResize();\tbreak;\r", "-\t\t\t\tcase SWT.MouseDoubleClick:\tonMouseDoubleClick(event);\tbreak;\r", "-\t\t\t\tcase SWT.MouseDown:\t\tonMouseDown(event);\tbreak;\r", "-\t\t\t\tcase SWT.MouseExit:\t\tonMouseExit(event);\tbreak;\r", "+\t\t\t\tcase SWT.Dispose:           onDispose(); break;\r", "+\t\t\t\tcase SWT.Paint:             onPaint(event);\tbreak;\r", "+\t\t\t\tcase SWT.Resize:            onResize();\tbreak;\r", "+\t\t\t\tcase SWT.MouseDoubleClick:  onMouseDoubleClick(event);\tbreak;\r", "+\t\t\t\tcase SWT.MouseDown:         onMouseDown(event);\tbreak;\r", "+\t\t\t\tcase SWT.MouseExit:         onMouseExit(event);\tbreak;\r", "-\t\t\t\tcase SWT.MouseMove:\t\tonMouseMove(event);\tbreak;\r", "-\t\t\t\tcase SWT.Selection:\t\tonSelection(event);\tbreak;\r", "-\t\t\t\tcase SWT.FocusIn:\t\t\tonFocus(event);\tbreak;\r", "-\t\t\t\tcase SWT.FocusOut:\t\t\tonFocus(event);\tbreak;\r", "-\t\t\t\tcase SWT.KeyDown:\t\t\tonKeyDown(event); break;\r", "-\t\t\t\tcase SWT.Traverse:\t\t\tonTraverse(event); break;\r", "+\t\t\t\tcase SWT.MouseMove:         onMouseMove(event);\tbreak;\r", "+\t\t\t\tcase SWT.FocusIn:           onFocus(event);\tbreak;\r", "+\t\t\t\tcase SWT.FocusOut:          onFocus(event);\tbreak;\r", "+\t\t\t\tcase SWT.KeyDown:           onKeyDown(event); break;\r", "+\t\t\t\tcase SWT.Traverse:          onTraverse(event); break;\r", "-\tscrollLeft.addListener(SWT.Selection, listener);\r", "-\tscrollRight.addListener(SWT.Selection, listener);\r", "-\tcloseItem.addListener(SWT.Selection, listener);\r", "-\tinactiveCloseItem.addListener(SWT.Selection, listener);\r", "-\tinactiveCloseBar.addListener (SWT.MouseExit, listener);\r", "+\t\r", "+\tcreateArrowBar();\r", "+\tcreateCloseBar();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "080a6c288a1db0e1abb0fa51275d8aa0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "35be8ad5696880189b8973d12da83e42dd6fc194", "commitAfterChange": "3d12b10107474c7c107aa5097ed6447519f113dc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\t\t\t\t\tshell.removeListener(SWT.Show, this);", "-\t\t\t\t\tshell.removeListener(SWT.Hide, this);", "-\t\t\t\t\tControl c = Browser.this;", "-\t\t\t\t\tdo {", "-\t\t\t\t\t\tc.removeListener(SWT.Show, this);", "-\t\t\t\t\t\tc.removeListener(SWT.Hide, this);", "-\t\t\t\t\t\tc = c.getParent();", "-\t\t\t\t\t} while (c != shell);", "-\t\t\t\tcase SWT.Hide: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug on Safari. The web view cannot be obscured by other views above it.", "-\t\t\t\t\t* This problem is specified in the apple documentation for HiWebViewCreate.", "-\t\t\t\t\t* The workaround is to hook Hide and Show events on the browser's parents", "-\t\t\t\t\t* and set its size to 0 in Hide and to restore its size in Show.", "-\t\t\t\t\t*/", "-\t\t\t\t\tCGRect bounds = new CGRect();", "-\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase SWT.Show: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug on Safari. The web view cannot be obscured by other views above it.", "-\t\t\t\t\t* This problem is specified in the apple documentation for HiWebViewCreate.", "-\t\t\t\t\t* The workaround is to hook Hide and Show events on the browser's parents", "-\t\t\t\t\t* and set its size to 0 in Hide and to restore its size in Show.", "-\t\t\t\t\t*/", "-\t\t\t\t\tCGRect bounds = new CGRect();", "-\t\t\t\t\tOS.HIViewGetFrame(handle, bounds);", "-\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\t\t* ", "-\t\t\t\t\t* Feature on Safari. The HIView ignores the call to update its position", "-\t\t\t\t\t* because it believes it has not changed. The workaround is to force", "-\t\t\t\t\t* it to reposition by changing its size and setting it back to the", "-\t\t\t\t\t* original value.", "-\t\t\t\t\t* ", "-\t\t\t\t\t/* If the widget is hidden, leave its size to 0,0 as set in the SWT.Hide callback */", "-\t\t\t\t\tif (!isVisible()) break;", "-\t\t\t\t\t* Note.  Setting negative width or height causes Safari to always", "-\t\t\t\t\t* display incorrectly even if further resize events are correct.", "+\t\t\t\t\t* Bug in Safari.  For some reason, the web view will display incorrectly or", "+\t\t\t\t\t* blank depending on its contents, if its size is set to a value smaller than", "+\t\t\t\t\t* MIN_SIZE. It will not display properly even after the size is made larger.", "+\t\t\t\t\t* The fix is to avoid setting sizes smaller than MIN_SIZE. ", "-\t\t\t\t\tif (bounds.width < 0) bounds.width = 0;", "-\t\t\t\t\tif (bounds.height < 0) bounds.height = 0;", "+\t\t\t\t\tif (bounds.width <= MIN_SIZE) bounds.width = MIN_SIZE;", "+\t\t\t\t\tif (bounds.height <= MIN_SIZE) bounds.height = MIN_SIZE;", "-\tshell.addListener(SWT.Show, listener);", "-\tshell.addListener(SWT.Hide, listener);", "-\tControl c = this;", "-\tdo {", "-\t\tc.addListener(SWT.Show, listener);", "-\t\tc.addListener(SWT.Hide, listener);", "-\t\tc = c.getParent();", "-\t} while (c != shell);", "-\tint[] keyboardMask = new int[] {OS.kEventClassKeyboard, OS.kEventRawKeyDown};", "+\tint[] mask = new int[] {", "+\t\tOS.kEventClassKeyboard, OS.kEventRawKeyDown,", "+\t\tOS.kEventClassControl, OS.kEventControlDraw,", "+\t\tOS.kEventClassTextInput, OS.kEventTextInputUnicodeForKeyEvent,", "+\t};", "-\tOS.InstallEventHandler(controlTarget, callback3Address, keyboardMask.length / 2, keyboardMask, webViewHandle, null);", "-\t\t", "-\tint[] textInputMask = new int[] { OS.kEventClassTextInput, OS.kEventTextInputUnicodeForKeyEvent };", "-\tint windowTarget = OS.GetWindowEventTarget(OS.GetControlOwner(handle));", "-\tOS.InstallEventHandler (windowTarget, callback3Address, textInputMask.length / 2, textInputMask, webViewHandle, null);", "+\tOS.InstallEventHandler(controlTarget, callback3Address, mask.length / 2, mask, webViewHandle, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9c5a682a5120b23cc2c79726bfb6666", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OpenGL/carbon/org/eclipse/swt/opengl/GLCanvas.java", "commitBeforeChange": "c22459984b634ac2fa9062cf3800f00b6f368d23", "commitAfterChange": "2f936f69312a9448a129e0fd5972442e772bfaf7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public GLCanvas (Composite parent, int style, GLData data)", "signatureAfterChange": " public GLCanvas (Composite parent, int style, GLData data)", "diff": ["-\t\t\t\t// Remove listeners", "-\t\t\t\tShell shell = getShell();", "-\t\t\t\tshell.removeListener(SWT.Resize, this);", "-\t\t\t\tshell.removeListener(SWT.Show, this);", "-\t\t\t\tshell.removeListener(SWT.Hide, this);", "-\t\t\t\tControl c = GLCanvas.this;", "-\t\t\t\tdo {", "-\t\t\t\t\tc.removeListener(SWT.Show, this);", "-\t\t\t\t\tc.removeListener(SWT.Hide, this);", "-\t\t\t\t\tc = c.getParent();", "-\t\t\t\t} while (c != shell);", "-\t\t\t\tbreak;", "-\t\t\tcase SWT.Resize:", "-\t\t\tcase SWT.Hide:", "-\t\t\tcase SWT.Show:", "-\t\t\t\tgetDisplay().asyncExec(new Runnable() {", "-\t\t\t\t\tpublic void run() {", "-\t\t\t\t\t\tif (isDisposed()) return;", "-\t\t\t\t\t\tfixBounds();", "-\t\t\t\t\t}", "-\t\t\t\t});", "-\taddListener (SWT.Resize, listener);", "-\tShell shell = getShell();", "-\tshell.addListener(SWT.Resize, listener);", "-\tshell.addListener(SWT.Show, listener);", "-\tshell.addListener(SWT.Hide, listener);", "-\tControl c = this;", "-\tdo {", "-\t\tc.addListener(SWT.Show, listener);", "-\t\tc.addListener(SWT.Hide, listener);", "-\t\tc = c.getParent();", "-\t} while (c != shell);", "+\tsetData (RESET_VISIBLE_REGION, new Runnable() {", "+\t\tpublic void run() {", "+\t\t\tif (isDisposed ()) return;", "+\t\t\tfixBounds ();", "+\t\t}", "+\t});"]}], "num": 48210}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d028685a3cea7dee6d1cc060564cf31", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "273f99e9f3ea47037d6527f5ac29e39d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 50, "signatureBeforeChange": " void doPaint (Event event)", "signatureAfterChange": " void paint(Event event)", "diff": ["-}", "-void doPaint (Event event) {", "-\tGC gc = event.gc;", "-\tRectangle clipping = gc.getClipping ();", "-\tint numColumns = getColumnCount();", "-\tint startColumn = -1, endColumn = -1;", "-\tif (numColumns > 0) {", "-\t\tstartColumn = computeColumnIntersect(clipping.x, 0);", "-\t\tif (startColumn != -1) {\t/* the click fell within a column's bounds */", "-\t\t\tendColumn = computeColumnIntersect(clipping.x + clipping.width, startColumn);", "-\t\t\tif (endColumn == -1) endColumn = numColumns - 1;", "-\t\t}", "-\t} else {", "-\t\tstartColumn = endColumn = 0;", "-\t}", "-", "-\t/* repaint grid lines if necessary */", "-\tif (linesVisible) {", "-\t\tColor oldForeground = gc.getForeground();", "-\t\tif (numColumns > 0 && startColumn != -1) {", "-\t\t\tgc.setForeground(LineColor);", "-\t\t\t/* vertical column lines */", "-\t\t\tfor (int i = startColumn; i <= endColumn; i++) {", "-\t\t\t\tint x = columns[i].getX() + columns[i].width - 1;", "-\t\t\t\tgc.drawLine(x, clipping.y, x, clipping.y + clipping.height);", "-\t\t\t}", "-\t\t}", "-\t\t/* horizontal item lines */", "-\t\tint bottomY = clipping.y + clipping.height;", "-\t\tint rightX = clipping.x + clipping.width;", "-\t\tint headerHeight = getHeaderHeight();", "-\t\tint y = (clipping.y - headerHeight) / itemHeight * itemHeight + headerHeight;", "-\t\twhile (y <= bottomY) {", "-\t\t\tgc.drawLine(clipping.x, y, rightX, y);", "-\t\t\ty += itemHeight;", "-\t\t}", "-\t\tgc.setForeground(oldForeground);", "-\t}", "-\t", "-\t/* Determine the TreeItems to be painted */", "-\tint startIndex = (clipping.y - getHeaderHeight()) / itemHeight + topIndex;", "-\tif (!(0 <= startIndex && startIndex < availableItems.length)) return;\t/* no items to paint */", "-\tint endIndex = startIndex + Compatibility.ceil (clipping.height, itemHeight);", "-\tendIndex = Math.min (endIndex, availableItems.length - 1);", "-\tint current = 0;", "-\tfor (int i = startIndex; i <= endIndex; i++) {", "-\t\tTreeItem2 item = availableItems[i];", "-\t\tif (startColumn == -1) {", "-\t\t\t/* indicates that region to paint is to the right of the last column */", "-\t\t\titem.paint(gc, null, false);", "-\t\t} else {", "-\t\t\tif (numColumns == 0) {", "-\t\t\t\titem.paint(gc, null, true);", "-\t\t\t} else {", "-\t\t\t\tfor (int j = startColumn; j <= endColumn; j++) {", "-\t\t\t\t\titem.paint(gc, columns[j], true);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (isFocusControl()) {", "-\t\t\tif (focusItem == item) {", "-\t\t\t\tRectangle focusBounds = item.getFocusBounds();", "-\t\t\t\tgc.setClipping (focusBounds);", "-\t\t\t\tint oldStyle = gc.getLineStyle();", "-\t\t\t\tgc.setLineStyle(SWT.LINE_DOT);", "-\t\t\t\tgc.drawFocus(focusBounds.x, focusBounds.y, focusBounds.width, focusBounds.height);", "-\t\t\t\tgc.setLineStyle(oldStyle);", "-\t\t\t}", "-\t\t\tif (insertMarkItem == item) {", "-\t\t\t\tRectangle focusBounds = item.getFocusBounds();", "-\t\t\t\tgc.setClipping (focusBounds);", "-\t\t\t\tif (insertMarkPrecedes) {", "-\t\t\t\t\tgc.drawLine(focusBounds.x, focusBounds.y, focusBounds.x + focusBounds.width, focusBounds.y);", "-\t\t\t\t} else {", "-\t\t\t\t\tint y = focusBounds.y + focusBounds.height - 1;", "-\t\t\t\t\tgc.drawLine(focusBounds.x, y, focusBounds.x + focusBounds.width, y);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "-}", "+ */", "+void paint(Event event) {", "+\tint visibleRange[] = getIndexRange(event.getBounds());", "+\t", "+\tpaintItems(event.gc, visibleRange[0], visibleRange[1] + 1); // + 1 to paint the vertical line ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// connection the last item we really ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// want to paint with the item after that.", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf2a60d15713199708f5562cfedf9f7f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 25, "signatureBeforeChange": " void paint(Event event)", "signatureAfterChange": " void doPaint (Event event)", "diff": ["+}", "+void doPaint (Event event) {", "+\tGC gc = event.gc;", "+\tRectangle clipping = gc.getClipping ();", "+\tint numColumns = getColumnCount();", "+\tint startColumn = -1, endColumn = -1;", "+\tif (numColumns > 0) {", "+\t\tstartColumn = computeColumnIntersect(clipping.x, 0);", "+\t\tif (startColumn != -1) {\t/* the click fell within a column's bounds */", "+\t\t\tendColumn = computeColumnIntersect(clipping.x + clipping.width, startColumn);", "+\t\t\tif (endColumn == -1) endColumn = numColumns - 1;", "+\t\t}", "+\t} else {", "+\t\tstartColumn = endColumn = 0;", "+\t}", "+", "+\t/* repaint grid lines if necessary */", "+\tif (linesVisible) {", "+\t\tColor oldForeground = gc.getForeground();", "+\t\tif (numColumns > 0 && startColumn != -1) {", "+\t\t\tgc.setForeground(LineColor);", "+\t\t\t/* vertical column lines */", "+\t\t\tfor (int i = startColumn; i <= endColumn; i++) {", "+\t\t\t\tint x = columns[i].getX() + columns[i].width - 1;", "+\t\t\t\tgc.drawLine(x, clipping.y, x, clipping.y + clipping.height);", "+\t\t\t}", "+\t\t}", "+\t\t/* horizontal item lines */", "+\t\tint bottomY = clipping.y + clipping.height;", "+\t\tint rightX = clipping.x + clipping.width;", "+\t\tint headerHeight = getHeaderHeight();", "+\t\tint y = (clipping.y - headerHeight) / itemHeight * itemHeight + headerHeight;", "+\t\twhile (y <= bottomY) {", "+\t\t\tgc.drawLine(clipping.x, y, rightX, y);", "+\t\t\ty += itemHeight;", "+\t\t}", "+\t\tgc.setForeground(oldForeground);", "+\t}", "+\t", "+\t/* Determine the TreeItems to be painted */", "+\tint startIndex = (clipping.y - getHeaderHeight()) / itemHeight + topIndex;", "+\tif (!(0 <= startIndex && startIndex < availableItems.length)) return;\t/* no items to paint */", "+\tint endIndex = startIndex + Compatibility.ceil (clipping.height, itemHeight);", "+\tendIndex = Math.min (endIndex, availableItems.length - 1);", "+\tint current = 0;", "+\tfor (int i = startIndex; i <= endIndex; i++) {", "+\t\tTreeItem item = availableItems[i];", "+\t\tif (startColumn == -1) {", "+\t\t\t/* indicates that region to paint is to the right of the last column */", "+\t\t\titem.paint(gc, null, false);", "+\t\t} else {", "+\t\t\tif (numColumns == 0) {", "+\t\t\t\titem.paint(gc, null, true);", "+\t\t\t} else {", "+\t\t\t\tfor (int j = startColumn; j <= endColumn; j++) {", "+\t\t\t\t\titem.paint(gc, columns[j], true);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (isFocusControl()) {", "+\t\t\tif (focusItem == item) {", "+\t\t\t\tRectangle focusBounds = item.getFocusBounds();", "+\t\t\t\tgc.setClipping (focusBounds);", "+\t\t\t\tint oldStyle = gc.getLineStyle();", "+\t\t\t\tgc.setLineStyle(SWT.LINE_DOT);", "+\t\t\t\tgc.drawFocus(focusBounds.x, focusBounds.y, focusBounds.width, focusBounds.height);", "+\t\t\t\tgc.setLineStyle(oldStyle);", "+\t\t\t}", "+\t\t\tif (insertMarkItem == item) {", "+\t\t\t\tRectangle focusBounds = item.getFocusBounds();", "+\t\t\t\tgc.setClipping (focusBounds);", "+\t\t\t\tif (insertMarkPrecedes) {", "+\t\t\t\t\tgc.drawLine(focusBounds.x, focusBounds.y, focusBounds.x + focusBounds.width, focusBounds.y);", "+\t\t\t\t} else {", "+\t\t\t\t\tint y = focusBounds.y + focusBounds.height - 1;", "+\t\t\t\t\tgc.drawLine(focusBounds.x, y, focusBounds.x + focusBounds.width, y);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+}", "- */", "-void paint(Event event) {", "-\tint visibleRange[] = getIndexRange(event.getBounds());", "-\t", "-\tpaintItems(event.gc, visibleRange[0], visibleRange[1] + 1); // + 1 to paint the vertical line ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// connection the last item we really ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// want to paint with the item after that.", "-}"]}], "num": 10575}
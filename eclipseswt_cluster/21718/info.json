{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "106935739c59cc36a80e4b72e351a653", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffca3f26d5f44d87ef26350bb91ff286", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "0ec16a191637037ae868aa23c8c55cf2d8a64f40", "commitAfterChange": "d78a1f304fc5886faf978adcf843b66da4334afd", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "  void destroyItem (TableColumn column)", "signatureAfterChange": "  void destroyItem (TableColumn column)", "diff": ["-/*\tint index = 0;", "+\tint index = 0;", "-\tWidgetTable.remove(column.handle);", "+\tint columnHandle = column.handle;", "-\tif (columnCount==0) {", "-\t\tfakeColumn = column.handle;", "-\t} else {", "-\t\tfor (int j=index+1; j<=columnCount; j++) {", "-\t\t\t", "+\tOS.gtk_tree_view_remove_column (handle, columnHandle);", "+\tif (columnCount == 0) {", "+\t\tint oldModel = modelHandle;", "+\t\tint[] types = getColumnTypes (1);", "+\t\tint newModel = OS.gtk_list_store_newv (types.length, types);", "+\t\tif (newModel == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tint [] ptr = new int [1];", "+\t\tfor (int i=0; i<itemCount; i++) {", "+\t\t\tTableItem item = items [i];", "+\t\t\tint oldItem = item.handle;", "+\t\t\tint newItem = OS.g_malloc (OS.GtkTreeIter_sizeof ());", "+\t\t\tif (newItem == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\tOS.gtk_list_store_insert (newModel, newItem, i);", "+\t\t\tfor (int j=0; j<3; j++) {", "+\t\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, j, ptr, -1);", "+\t\t\t\tOS.gtk_list_store_set (newModel, newItem, j, ptr [0], -1);", "+\t\t\t}", "+\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex, ptr, -1);", "+\t\t\tOS.gtk_list_store_set (newModel, newItem, 3, ptr [0], -1);", "+\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex + 1, ptr, -1);", "+\t\t\tOS.gtk_list_store_set (newModel, newItem, 3 + 1, ptr [0], -1);", "+\t\t\tOS.g_free ( (ptr [0]));", "+\t\t\tOS.gtk_list_store_remove (oldModel, oldItem);", "+\t\t\tOS.g_free (oldItem);", "+\t\t\titem.handle = newItem;", "-\t\tOS.gtk_tree_view_remove_column(handle, column.handle);", "-\t\tOS.g_object_unref(column.handle);", "-\t}*/", "+\t\tOS.gtk_tree_view_set_model (handle, newModel);", "+\t\tOS.g_object_unref (oldModel);", "+\t\tmodelHandle = newModel;", "+\t\tcreateColumn (null, 0);", "+\t} else {", "+\t\tfor (int i=0; i<itemCount; i++) {", "+\t\t\tint item = items [i].handle;", "+\t\t\tint modelIndex = column.modelIndex;", "+\t\t\tOS.gtk_list_store_set (modelHandle, item, modelIndex, 0, -1);", "+\t\t\tOS.gtk_list_store_set (modelHandle, item, modelIndex + 1, (byte [])null, -1);", "+\t\t}", "+\t\tif (index == 0) {", "+\t\t\tTableColumn checkColumn = columns [0];", "+\t\t\tcreateRenderers (checkColumn.handle, checkColumn.modelIndex, true);", "+\t\t}", "+\t}", "+\tcolumn.handle = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc7cdbd5a27ce4f65469664647916123", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/photon/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "da5b2096f70170c1ee5967072f15746afe644075", "commitAfterChange": "e1a1a9a2764b9fd42d3fd4db27d8d960a32582f7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public void setContents(Object[] data, Transfer[] transferAgents)", "signatureAfterChange": "\r public void setContents(Object[] data, Transfer[] transferAgents)", "diff": ["+\tif (display.isDisposed() ) return;\r", "+\t\r", "+\tif (data == null) {\r", "+\t\tint ig = OS.PhInputGroup(0);\r", "+\t\tif (OS.PhClipboardCopy((short)ig, 0, null) != 0) {\r", "+\t\t\tDND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);\r", "+\t\t}\r", "+\t\treturn;\r", "+\t}\r", "+\tif (transferAgents == null || data.length != transferAgents.length) {\r", "+\t\tDND.error(SWT.ERROR_INVALID_ARGUMENT);\r", "+\t}\r", "+\t\r", "+\tbyte[] clips = new byte[0];\r", "+\tint count = 0;\r", "+\tfor (int i = 0; i < transferAgents.length; i++) {\r", "+\t\tString[] names = transferAgents[i].getTypeNames();\r", "+\t\tint[] ids = transferAgents[i].getTypeIds();\r", "+\t\tfor (int j = 0; j < names.length; j++) {\r", "+\t\t\tTransferData transferData = new TransferData();\r", "+\t\t\ttransferData.type = ids[j];\r", "+\t\t\ttransferAgents[i].javaToNative(data[i], transferData);\r", "+\t\t\tPhClipHeader clip = new PhClipHeader();\r", "+\t\t\tclip.data = transferData.pData;\r", "+\t\t\tclip.length = (short)transferData.length;\r", "+\t\t\tbyte[] temp = Converter.wcsToMbcs(null, names[j], true);\r", "+\t\t\tbyte[] type = new byte[8];\r", "+\t\t\tSystem.arraycopy(temp, 0, type, 0, Math.min(type.length, temp.length));\r", "+\t\t\tclip.type_0 = type[0];\r", "+\t\t\tclip.type_1 = type[1];\r", "+\t\t\tclip.type_2 = type[2];\r", "+\t\t\tclip.type_3 = type[3];\r", "+\t\t\tclip.type_4 = type[4];\r", "+\t\t\tclip.type_5 = type[5];\r", "+\t\t\tclip.type_6 = type[6];\r", "+\t\t\tclip.type_7 = type[7];\r", "+\t\t\tbyte[] buffer = new byte[PhClipHeader.sizeof];\r", "+\t\t\tOS.memmove(buffer, clip, PhClipHeader.sizeof);\r", "+\t\t\tbyte[] newClips = new byte[clips.length + buffer.length];\r", "+\t\t\tSystem.arraycopy(clips, 0, newClips, 0, clips.length);\r", "+\t\t\tSystem.arraycopy(buffer, 0, newClips, clips.length, buffer.length);\r", "+\t\t\tclips = newClips;\r", "+\t\t\tcount++;\r", "+\t\t}\r", "+\t}\r", "+\t\r", "+\tif (count > 0){\r", "+\t\tint ig = OS.PhInputGroup(0);\r", "+\t\tif (OS.PhClipboardCopy((short)ig, count, clips) != 0) {\r", "+\t\t\tDND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);\r", "+\t\t}\r", "+\t}\r"]}], "num": 21718}
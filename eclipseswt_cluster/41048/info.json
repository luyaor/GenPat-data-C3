{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5881d019bb8d1a7ed6e773fc80d4f095", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9697d9c92940544b05a8ed04f871d587", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/motif/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "e98339cc7fb1c72d59ae0703dfdb477f6c4de9c5", "commitAfterChange": "697358ce3235fa7c9f7df6b81c2eaac5ddca47d9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \r protected void init()", "signatureAfterChange": "  protected void init()", "diff": ["-\r", "-protected void init() {\r", "-\tsuper.init();\r", "-\t\r", "-\t/* Create the printContext for the printer */\r", "-\t/* Use the character encoding for the default locale */\r", "-\tbyte[] name = Converter.wcsToMbcs(null, data.name, true);\r", "-\tprintContext = OS.XpCreateContext(xDisplay, name);\r", "-\tif (printContext == OS.None) {\r", "-\t\t/* can't create print context */\r", "-\t\t//OS.XCloseDisplay(xDisplay);\r", "-\t\tSWT.error(SWT.ERROR_NO_HANDLES);\r", "-\t}\r", "-\r", "-\t/* Set the printContext into the display */\r", "-\tOS.XpSetContext(xDisplay, printContext); \r", "-\r", "-\t/* Get the printer's screen */\r", "-\txScreen = OS.XpGetScreenOfContext(xDisplay, printContext);\r", "-\t\r", "-\t/* Initialize Motif */\r", "-\tint widgetClass = OS.TopLevelShellWidgetClass();\r", "-\tint shellHandle = OS.XtAppCreateShell(null, null, widgetClass, xDisplay, null, 0);\r", "-\tOS.XtDestroyWidget(shellHandle);\r", "-\t\r", "-\t/* Initialize the default font */\r", "-\t/* Use the character encoding for the default locale */\r", "-\tbyte [] buffer = Converter.wcsToMbcs(null, \"-*-courier-medium-r-*-*-*-120-*-*-*-*-*-*\", true);\r", "-\tint fontListEntry = OS.XmFontListEntryLoad(xDisplay, buffer, OS.XmFONT_IS_FONTSET, OS.XmFONTLIST_DEFAULT_TAG);\r", "-\tif (fontListEntry == 0) SWT.error(SWT.ERROR_NO_HANDLES);\r", "-\tint defaultFontList = OS.XmFontListAppendEntry(0, fontListEntry);\r", "-\tOS.XmFontListEntryFree(new int[]{fontListEntry});\r", "-\tdefaultFont = Font.motif_new(this, defaultFontList);\r", "-}\r", "+", "+protected void init() {", "+\tsuper.init();", "+\t", "+\t/* Use the character encoding for the default locale */", "+\tbyte[] buffer = Converter.wcsToMbcs(null, data.name, true);", "+", "+\t/*", "+\t * Bug in Xp. If the printer name is not valid, Xp will", "+\t * cause a segmentation fault. The fix is to check if the", "+\t * printer name is valid before calling XpCreateContext().\r\t */", "+\tint[] count = new int[1];", "+\tint plist = OS.XpGetPrinterList(xDisplay, buffer, count);", "+\tif (plist != 0) OS.XpFreePrinterList(plist);", "+\tif (count[0] == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+", "+\t/* Create the printContext for the printer */", "+\tprintContext = OS.XpCreateContext(xDisplay, buffer);", "+", "+\t/* Set the printContext into the display */", "+\tOS.XpSetContext(xDisplay, printContext);", "+", "+\t/* Get the printer's screen */", "+\txScreen = OS.XpGetScreenOfContext(xDisplay, printContext);", "+\tif (xScreen == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+", "+\t/* Initialize the xDrawable */", "+\tXRectangle rect = new XRectangle();", "+\tshort[] width = new short[1];", "+\tshort[] height = new short[1];", "+\tOS.XpGetPageDimensions(xDisplay, printContext, width, height, rect);", "+\txDrawable = OS.XCreateWindow(xDisplay, OS.XRootWindowOfScreen(xScreen), ", "+\t\t0, 0, rect.width, rect.height, 0,", "+\t\tOS.CopyFromParent, OS.CopyFromParent, OS.CopyFromParent, 0, 0);", "+\tif (xDrawable == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+", "+\t/* Initialize the default font */", "+\t/* Use the character encoding for the default locale */", "+\tPoint dpi = getDPI();", "+\tbuffer = Converter.wcsToMbcs(null, \"-*-courier-medium-r-*-*-*-120-\"+dpi.x+\"-\"+dpi.y+\"-*-*-iso8859-1\", true);", "+\tint fontListEntry = OS.XmFontListEntryLoad(xDisplay, buffer, OS.XmFONT_IS_FONTSET, OS.XmFONTLIST_DEFAULT_TAG);", "+\tif (fontListEntry == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint defaultFontList = OS.XmFontListAppendEntry(0, fontListEntry);", "+\tOS.XmFontListEntryFree(new int[]{fontListEntry});", "+\tdefaultFont = Font.motif_new(this, defaultFontList);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c7a33ec009bf43e9430631878a6f52b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "14fbe017d1e3dc78020213280156fbd51d492d0a", "commitAfterChange": "e204c746a54241ff7faf790f527aebbdadf8a989", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r int loadFontSet(int xDisplay, FontData fd)", "signatureAfterChange": "\r \r String getXlfds(int fontSet)", "diff": ["-}\r", "-int loadFontSet(int xDisplay, FontData fd) {\r", "-\t/* Use the character encoding for the default locale */\r", "-\tbyte[] buffer = Converter.wcsToMbcs(null, fd.getXlfd(), true);\r", "-\tint[] missing_charset = new int[1];\r", "-\tint[] missing_charset_count = new int[1];\r", "-\tint[] def_string = new int[1];\r", "-\treturn OS.XCreateFontSet(xDisplay, buffer, missing_charset, missing_charset_count, def_string);\r", "-}\r", "+\r", "+String getXlfds(int fontSet) {\r", "+\tif (fontSet == 0) return \"\";\r", "+\tint[] fontStructPtr = new int[1];\r", "+\tint[] fontNamePtr = new int[1];\r", "+\tXFontStruct fontStruct = new XFontStruct();  \r", "+\tint nFonts = OS.XFontsOfFontSet(fontSet, fontStructPtr, fontNamePtr);\r", "+\tint [] fontStructs = new int[nFonts];\r", "+\tOS.memmove(fontStructs,fontStructPtr[0], nFonts * 4);\r", "+\tStringBuffer stringBuffer = new StringBuffer();\r", "+\tfor (int i = 0; i < nFonts; i++) { // Go through each fontStruct in the font set.\r", "+\t\tOS.memmove(fontStruct,fontStructs[i],20 * 4);\r", "+\t\tint propPtr = fontStruct.properties;\r", "+\t\tfor (int j = 0; j < fontStruct.n_properties; j++) {\r", "+\t\t\t// Reef through properties looking for XAFONT\r", "+\t\t\tint[] prop = new int[2];\r", "+\t\t\tOS.memmove(prop, propPtr, 8);\r", "+\t\t\tif (prop[0] == OS.XA_FONT) {\r", "+\t\t\t\t/* Found it, prop[1] points to the string */\r", "+\t\t\t\tint ptr = OS.XmGetAtomName(device.xDisplay, prop[1]);\r", "+\t\t\t\tint length = OS.strlen(ptr);\r", "+\t\t\t\tbyte[] nameBuf = new byte[length];\r", "+\t\t\t\tOS.memmove(nameBuf, ptr, length);\r", "+\t\t\t\tif (stringBuffer.length() != 0) stringBuffer.append(','); \r", "+\t\t\t\tstringBuffer.append(new String(Converter.mbcsToWcs(null, nameBuf)).toLowerCase());\r", "+\t\t\t\tOS.XFree(ptr);\r", "+\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t\tpropPtr += 8;\r", "+\t\t}\r", "+\treturn stringBuffer.toString();\r"]}], "num": 41048}
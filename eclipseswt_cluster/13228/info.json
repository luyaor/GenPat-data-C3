{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30c6f1fd4ecab6b63394f1967219286e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ff6e8f751cbb4ad155c094a0522a3fb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CCombo.java", "commitBeforeChange": "c8cd76bf69b37764761763f0da8d767bfba5394b", "commitAfterChange": "f234a135829d52ec2f9610fac66b6f2480cb8cd9", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "\r void listEvent (Event event)", "signatureAfterChange": "\r void listEvent (Event event)", "diff": ["+\t\tcase SWT.FocusIn: {\r", "+\t\t\tif (hasFocus) return;\r", "+\t\t\thasFocus = true;\r", "+\t\t\tif (getEditable ()) text.selectAll ();\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\tnotifyListeners(SWT.FocusIn, e);\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\tcase SWT.FocusOut: {\r", "+\t\t\tControl focusControl = getDisplay ().getFocusControl();\r", "+\t\t\tif (focusControl == text || focusControl == arrow) return;\r", "+\t\t\thasFocus = false;\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\tnotifyListeners(SWT.FocusOut, e);\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\tnotifyListeners(SWT.DefaultSelection, e);\r", "-\t\t\te.x = event.x;\r", "-\t\t\te.y = event.y;\r", "-\t\t\te.width = event.width;\r", "-\t\t\te.height = event.height;\r", "-\t\t\te.detail = event.detail;\r", "+\t\t\te.stateMask = event.stateMask;\r", "+\t\t}\r", "+\t\tcase SWT.Traverse: {\r", "+\t\t\tswitch (event.detail) {\r", "+\t\t\t\tcase SWT.TRAVERSE_TAB_NEXT:\r", "+\t\t\t\tcase SWT.TRAVERSE_RETURN:\r", "+\t\t\t\tcase SWT.TRAVERSE_ESCAPE:\r", "+\t\t\t\tcase SWT.TRAVERSE_ARROW_PREVIOUS:\r", "+\t\t\t\tcase SWT.TRAVERSE_ARROW_NEXT:\r", "+\t\t\t\t\tevent.doit = false;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\te.detail = event.detail;\r", "+\t\t\te.doit = event.doit;\r", "+\t\t\te.keyCode = event.keyCode;\r", "+\t\t\tnotifyListeners(SWT.Traverse, e);\r", "+\t\t\tevent.doit = e.doit;\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\tcase SWT.KeyUp: {\t\t\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\te.character = event.character;\r", "+\t\t\te.keyCode = event.keyCode;\r", "+\t\t\te.stateMask = event.stateMask;\r", "+\t\t\tnotifyListeners(SWT.KeyUp, e);\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\tcase SWT.KeyDown: {\r", "+\t\t\tif (event.character == SWT.ESC) { \r", "+\t\t\t\t// escape key cancels popup list\r", "+\t\t\t\tdropDown (false);\r", "+\t\t\t}\r", "+\t\t\tif (event.character == SWT.CR || event.character == '\\t') {\r", "+\t\t\t\t// Enter and Tab cause default selection\r", "+\t\t\t\tdropDown (false);\r", "+\t\t\t\tEvent e = new Event();\r", "+\t\t\t\te.time = event.time;\r", "+\t\t\t\te.stateMask = event.stateMask;\r", "+\t\t\t\tnotifyListeners(SWT.DefaultSelection, e);\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\te.character = event.character;\r", "+\t\t\te.keyCode = event.keyCode;\r", "+\t\t\te.stateMask = event.stateMask;\r", "+\t\t\tnotifyListeners(SWT.KeyDown, e);\r", "+\t\t\tbreak;\r", "+\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "150dd3637d47496e6eeb999325599b9a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "b6d63697d93cb9f75fd821f66bd8fc084e724f13", "commitAfterChange": "15ec5c8e79c9345376b7505c278118c20f985176", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 57, "signatureBeforeChange": "  void handleEvent(int evt)", "signatureAfterChange": "  void handleEvent(int evt)", "diff": ["+\tboolean ctrl = Cocoa.objc_msgSend(evt, Cocoa.S_ctrlKey) != 0;", "+\tboolean shift = Cocoa.objc_msgSend(evt, Cocoa.S_shiftKey) != 0;", "+\tboolean alt = Cocoa.objc_msgSend(evt, Cocoa.S_altKey) != 0;", "+\tboolean meta = Cocoa.objc_msgSend(evt, Cocoa.S_metaKey) != 0;", "+", "-\t\tboolean ctrl = Cocoa.objc_msgSend(evt, Cocoa.S_ctrlKey) != 0;", "-\t\tboolean shift = Cocoa.objc_msgSend(evt, Cocoa.S_shiftKey) != 0;", "-\t\tboolean alt = Cocoa.objc_msgSend(evt, Cocoa.S_altKey) != 0;", "-\t\tboolean meta = Cocoa.objc_msgSend(evt, Cocoa.S_metaKey) != 0;", "+\t\tif (!keyEvent.doit) {", "+\t\t\tCocoa.objc_msgSend(evt, Cocoa.S_preventDefault);", "+\t\t}", "+", "+\t/* mouse event */", "+", "+\tint clientX = Cocoa.objc_msgSend(evt, Cocoa.S_clientX);", "+\tint clientY = Cocoa.objc_msgSend(evt, Cocoa.S_clientY);", "+\tint detail = Cocoa.objc_msgSend(evt, Cocoa.S_detail);", "+\tint button = Cocoa.objc_msgSend(evt, Cocoa.S_button);", "+", "+\tEvent mouseEvent = new Event ();", "+\tmouseEvent.widget = browser;", "+\tmouseEvent.x = clientX; mouseEvent.y = clientY;", "+\tmouseEvent.stateMask = (alt ? SWT.ALT : 0) | (ctrl ? SWT.CTRL : 0) | (shift ? SWT.SHIFT : 0) | (meta ? SWT.COMMAND : 0);", "+", "+\tif (DOMEVENT_MOUSEDOWN.equals (typeString)) {", "+\t\tmouseEvent.type = SWT.MouseDown;", "+\t\tmouseEvent.button = button + 1;", "+\t\tmouseEvent.count = detail;", "+\t} else if (DOMEVENT_MOUSEUP.equals (typeString)) {", "+\t\tmouseEvent.type = SWT.MouseUp;", "+\t\tmouseEvent.button = button + 1;", "+\t\tmouseEvent.count = detail;", "+\t\tswitch (mouseEvent.button) {", "+\t\t\tcase 1: mouseEvent.stateMask |= SWT.BUTTON1; break;", "+\t\t\tcase 2: mouseEvent.stateMask |= SWT.BUTTON2; break;", "+\t\t\tcase 3: mouseEvent.stateMask |= SWT.BUTTON3; break;", "+\t\t\tcase 4: mouseEvent.stateMask |= SWT.BUTTON4; break;", "+\t\t\tcase 5: mouseEvent.stateMask |= SWT.BUTTON5; break;", "+\t\t}", "+\t} else if (DOMEVENT_MOUSEMOVE.equals (typeString)) {", "+\t\t/*", "+\t\t* Bug in Safari.  Spurious and redundant mousemove events are received in", "+\t\t* various contexts, including following every MouseUp.  The workaround is", "+\t\t* to not fire MouseMove events whose x and y values match the last MouseMove  ", "+\t\t*/", "+\t\tif (mouseEvent.x == lastMouseMoveX && mouseEvent.y == lastMouseMoveY) return;", "+\t\tmouseEvent.type = SWT.MouseMove;", "+\t\tlastMouseMoveX = mouseEvent.x; lastMouseMoveY = mouseEvent.y;", "+\t}", "+", "+\tbrowser.notifyListeners (mouseEvent.type, mouseEvent);", "+\tif (detail == 2 && DOMEVENT_MOUSEDOWN.equals (typeString)) {", "+\t\tmouseEvent = new Event ();", "+\t\tmouseEvent.widget = browser;", "+\t\tmouseEvent.x = clientX; mouseEvent.y = clientY;", "+\t\tmouseEvent.stateMask = (alt ? SWT.ALT : 0) | (ctrl ? SWT.CTRL : 0) | (shift ? SWT.SHIFT : 0) | (meta ? SWT.COMMAND : 0);", "+\t\tmouseEvent.type = SWT.MouseDoubleClick;", "+\t\tmouseEvent.button = button + 1;", "+\t\tmouseEvent.count = detail;", "+\t\tbrowser.notifyListeners (mouseEvent.type, mouseEvent);", "+\t}"]}], "num": 13228}
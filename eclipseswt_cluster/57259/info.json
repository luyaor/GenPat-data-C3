{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a31c8b6505daad012b3459f01e4d7c37", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2674876b12902f03224896fc6be8d1db", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/photon/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "cec669ea3b0cf84e0380b5bd6c8017a8050ce7e0", "commitAfterChange": "75fc9e9240c137385aef55f04172aedfdf72ca1f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\t", "+ */", "+", "+\t/* use Photon's built-in anchoring for resizing */", "+\tint[] args = {", "+\t\t\tOS.Pt_ARG_ANCHOR_FLAGS,", "+\t\t\tOS.Pt_TOP_ANCHORED_TOP | OS.Pt_BOTTOM_ANCHORED_BOTTOM | OS.Pt_LEFT_ANCHORED_LEFT | OS.Pt_RIGHT_ANCHORED_RIGHT,", "+\t\t\tOS.Pt_TOP_ANCHORED_TOP | OS.Pt_BOTTOM_ANCHORED_BOTTOM | OS.Pt_LEFT_ANCHORED_LEFT | OS.Pt_RIGHT_ANCHORED_RIGHT,", "+\t\t\tOS.Pt_ARG_FILL_COLOR,", "+\t\t\t0xFFFFFF,", "+\t\t\t0 };", "+\twebHandle = OS.PtCreateWidget(OS.PtWebClient(), handle, args.length / 3, args);", "+", "+\t/* configure the widget with a specific server */", "+\tFile netfront = new File(\"/usr/photon/bin/netfront\");", "+\tString name, server;", "+\tif (netfront.exists() || (OS.QNX_MAJOR >= 6 && OS.QNX_MINOR >= 3 && OS.QNX_MICRO >= 0)) {", "+\t\tname = \"NetfrontServer\";", "+\t\tserver = \"netfront\";", "+\t} else {", "+\t\tname = \"VoyagerServer-2\";", "+\t\tserver = \"vserver\";", "+\t}", "+\t/* set client name */", "+\tbyte[] nameBuffer = Converter.wcsToMbcs(null, name, true);", "+\tint namePtr = OS.malloc(nameBuffer.length);", "+\tOS.memmove(namePtr, nameBuffer, nameBuffer.length);", "+\tOS.PtSetResource(webHandle, OS.Pt_ARG_CLIENT_NAME, namePtr, 0);", "+\tOS.free(namePtr);", "+\t", "+\t/* select server */", "+\tbyte[] serverBuffer = Converter.wcsToMbcs(null, server, true);", "+\tint serverPtr = OS.malloc(serverBuffer.length);", "+\tOS.memmove(serverPtr, serverBuffer, serverBuffer.length);", "+\tOS.PtSetResource(webHandle, OS.Pt_ARG_WEB_SERVER, serverPtr, 0);", "+\tOS.free(serverPtr);", "+\t", "+\tif (callback == null) callback = new Callback(this.getClass(), \"webProc\", 3, false);", "+\tint webProc = callback.getAddress();", "+\tOS.PtAddCallback(webHandle,OS.Pt_CB_WEB_COMPLETE, webProc, OS.Pt_CB_WEB_COMPLETE);", "+\tOS.PtAddCallback(webHandle,OS.Pt_CB_WEB_START, webProc, OS.Pt_CB_WEB_START);", "+\tOS.PtAddCallback(webHandle,OS.Pt_CB_WEB_STATUS, webProc, OS.Pt_CB_WEB_STATUS);", "+\tOS.PtAddCallback(webHandle,OS.Pt_CB_WEB_URL, webProc, OS.Pt_CB_WEB_URL);", "+\t", "+\tListener listener = new Listener() {", "+\t\tpublic void handleEvent(Event event) {", "+\t\t\tswitch (event.type) {", "+\t\t\t\tcase SWT.Dispose: onDispose(); break;", "+\t\t\t\tcase SWT.FocusIn: onFocusGained(event);\tbreak;", "+\t\t\t}", "+\t\t}", "+\t};\t", "+\tint[] folderEvents = new int[]{", "+\t\tSWT.Dispose,", "+\t\tSWT.FocusIn,  ", "+\t};", "+\tfor (int i = 0; i < folderEvents.length; i++) {", "+\t\taddListener(folderEvents[i], listener);", "+\t}", "+\tOS.PtRealizeWidget(webHandle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ff6e8f751cbb4ad155c094a0522a3fb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CCombo.java", "commitBeforeChange": "c8cd76bf69b37764761763f0da8d767bfba5394b", "commitAfterChange": "f234a135829d52ec2f9610fac66b6f2480cb8cd9", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "\r void listEvent (Event event)", "signatureAfterChange": "\r void listEvent (Event event)", "diff": ["+\t\tcase SWT.FocusIn: {\r", "+\t\t\tif (hasFocus) return;\r", "+\t\t\thasFocus = true;\r", "+\t\t\tif (getEditable ()) text.selectAll ();\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\tnotifyListeners(SWT.FocusIn, e);\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\tcase SWT.FocusOut: {\r", "+\t\t\tControl focusControl = getDisplay ().getFocusControl();\r", "+\t\t\tif (focusControl == text || focusControl == arrow) return;\r", "+\t\t\thasFocus = false;\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\tnotifyListeners(SWT.FocusOut, e);\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\tnotifyListeners(SWT.DefaultSelection, e);\r", "-\t\t\te.x = event.x;\r", "-\t\t\te.y = event.y;\r", "-\t\t\te.width = event.width;\r", "-\t\t\te.height = event.height;\r", "-\t\t\te.detail = event.detail;\r", "+\t\t\te.stateMask = event.stateMask;\r", "+\t\t}\r", "+\t\tcase SWT.Traverse: {\r", "+\t\t\tswitch (event.detail) {\r", "+\t\t\t\tcase SWT.TRAVERSE_TAB_NEXT:\r", "+\t\t\t\tcase SWT.TRAVERSE_RETURN:\r", "+\t\t\t\tcase SWT.TRAVERSE_ESCAPE:\r", "+\t\t\t\tcase SWT.TRAVERSE_ARROW_PREVIOUS:\r", "+\t\t\t\tcase SWT.TRAVERSE_ARROW_NEXT:\r", "+\t\t\t\t\tevent.doit = false;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\te.detail = event.detail;\r", "+\t\t\te.doit = event.doit;\r", "+\t\t\te.keyCode = event.keyCode;\r", "+\t\t\tnotifyListeners(SWT.Traverse, e);\r", "+\t\t\tevent.doit = e.doit;\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\tcase SWT.KeyUp: {\t\t\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\te.character = event.character;\r", "+\t\t\te.keyCode = event.keyCode;\r", "+\t\t\te.stateMask = event.stateMask;\r", "+\t\t\tnotifyListeners(SWT.KeyUp, e);\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\tcase SWT.KeyDown: {\r", "+\t\t\tif (event.character == SWT.ESC) { \r", "+\t\t\t\t// escape key cancels popup list\r", "+\t\t\t\tdropDown (false);\r", "+\t\t\t}\r", "+\t\t\tif (event.character == SWT.CR || event.character == '\\t') {\r", "+\t\t\t\t// Enter and Tab cause default selection\r", "+\t\t\t\tdropDown (false);\r", "+\t\t\t\tEvent e = new Event();\r", "+\t\t\t\te.time = event.time;\r", "+\t\t\t\te.stateMask = event.stateMask;\r", "+\t\t\t\tnotifyListeners(SWT.DefaultSelection, e);\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\te.character = event.character;\r", "+\t\t\te.keyCode = event.keyCode;\r", "+\t\t\te.stateMask = event.stateMask;\r", "+\t\t\tnotifyListeners(SWT.KeyDown, e);\r", "+\t\t\tbreak;\r", "+\t\t\t\r"]}], "num": 57259}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "12fd001bdf47c45c9966bf6430139023", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b934a6e97854d41bd82f5757a323e86", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "d8955edbe9f5c9464b222d0331748137a5a534b7", "commitAfterChange": "b533c1ac7667bcd66286ef15cde6bafc62a4cf97", "methodNumberBeforeChange": 209, "methodNumberAfterChange": 209, "signatureBeforeChange": "  int HandleEvent (long event)", "signatureAfterChange": "  int HandleEvent (long event)", "diff": ["-\t\trc = domEvent.QueryInterface (IsPre_24 ? (IsPre_4 ? nsIDOMKeyEvent.NS_IDOMKEYEVENT_IID : nsIDOMKeyEvent.NS_IDOMKEYEVENT_10_IID) : nsIDOMKeyEvent.NS_IDOMKEYEVENT_24_IID, result);", "+\t\trc = domEvent.QueryInterface (IIDStore.GetIID (nsIDOMKeyEvent.class), result);", "-\t\trc = domEvent.QueryInterface (IsPre_24 ? (IsPre_4 ? nsIDOMKeyEvent.NS_IDOMKEYEVENT_IID : nsIDOMKeyEvent.NS_IDOMKEYEVENT_10_IID) : nsIDOMKeyEvent.NS_IDOMKEYEVENT_24_IID, result);", "+\t\trc = domEvent.QueryInterface (IIDStore.GetIID (nsIDOMKeyEvent.class), result);", "-\t\trc = domEvent.QueryInterface (IsPre_24 ? (IsPre_4 ? nsIDOMKeyEvent.NS_IDOMKEYEVENT_IID : nsIDOMKeyEvent.NS_IDOMKEYEVENT_10_IID) : nsIDOMKeyEvent.NS_IDOMKEYEVENT_24_IID, result);", "+\t\trc = domEvent.QueryInterface (IIDStore.GetIID (nsIDOMKeyEvent.class), result);", "-\trc = domEvent.QueryInterface (IsPre_24 ? (IsPre_4 ? nsIDOMMouseEvent.NS_IDOMMOUSEEVENT_IID : nsIDOMMouseEvent.NS_IDOMMOUSEEVENT_10_IID) : nsIDOMMouseEvent.NS_IDOMMOUSEEVENT_24_IID, result);", "+\trc = domEvent.QueryInterface (IIDStore.GetIID (nsIDOMMouseEvent.class), result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3bcee27ee85881a653cfacf069fbe89", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "852f17f3e885ddde267886a8be3483ac6f27465d", "commitAfterChange": "3cdae47da159662ce7eb57e9a6b0f13f94eaec5c", "methodNumberBeforeChange": 186, "methodNumberAfterChange": 184, "signatureBeforeChange": "  int HandleEvent_1_9 (int event)", "signatureAfterChange": "  int HandleEvent (int event)", "diff": ["+int HandleEvent (int /*long*/ event) {", "+\t\trc = domEvent.QueryInterface (!IsPre_4 ? nsIDOMKeyEvent.NS_IDOMKEYEVENT_8_IID : nsIDOMKeyEvent.NS_IDOMKEYEVENT_IID, result);", "+\t\trc = domEvent.QueryInterface (!IsPre_4 ? nsIDOMKeyEvent.NS_IDOMKEYEVENT_8_IID : nsIDOMKeyEvent.NS_IDOMKEYEVENT_IID, result);", "+\t\trc = domEvent.QueryInterface (!IsPre_4 ? nsIDOMKeyEvent.NS_IDOMKEYEVENT_8_IID : nsIDOMKeyEvent.NS_IDOMKEYEVENT_IID, result);", "+\trc = domEvent.QueryInterface (!IsPre_4 ? nsIDOMMouseEvent.NS_IDOMMOUSEEVENT_8_IID : nsIDOMMouseEvent.NS_IDOMMOUSEEVENT_IID, result);", "-", "-int HandleEvent_1_9 (int /*long*/ event) {", "-\tnsIDOMEvent_1_9 domEvent = new nsIDOMEvent_1_9 (event);", "-\tint /*long*/ type = XPCOM.nsEmbedString_new ();", "-\tint rc = domEvent.GetType (type);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tint length = XPCOM.nsEmbedString_Length (type);", "-\tint /*long*/ buffer = XPCOM.nsEmbedString_get (type);", "-\tchar[] chars = new char[length];", "-\tXPCOM.memmove (chars, buffer, length * 2);", "-\tString typeString = new String (chars);", "-\tXPCOM.nsEmbedString_delete (type);", "-", "-\tif (XPCOM.DOMEVENT_UNLOAD.equals (typeString)) {", "-\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\trc = domEvent.GetCurrentTarget (result);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-", "-\t\tnsIDOMEventTarget target = new nsIDOMEventTarget (result[0]);", "-\t\tunhookDOMListeners (target);", "-\t\ttarget.Release ();", "-\t\treturn XPCOM.NS_OK;", "-\t}", "-", "-\tif (XPCOM.DOMEVENT_FOCUS.equals (typeString)) {", "-\t\tdelegate.handleFocus ();", "-\t\treturn XPCOM.NS_OK;", "-\t}", "-", "-\tif (XPCOM.DOMEVENT_KEYDOWN.equals (typeString)) {", "-\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\trc = domEvent.QueryInterface (nsIDOMKeyEvent_1_9.NS_IDOMKEYEVENT_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\tnsIDOMKeyEvent_1_9 domKeyEvent = new nsIDOMKeyEvent_1_9 (result[0]);", "-\t\tresult[0] = 0;", "-", "-\t\tint[] aKeyCode = new int[1]; /* PRUint32 */", "-\t\trc = domKeyEvent.GetKeyCode (aKeyCode);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tint keyCode = translateKey (aKeyCode[0]);", "-", "-\t\t/*", "-\t\t* if keyCode == lastKeyCode then either a repeating key like Shift", "-\t\t* is being held or a key for which key events are not sent has been", "-\t\t* pressed.  In both of these cases a KeyDown should not be sent.", "-\t\t*/", "-\t\tif (keyCode != lastKeyCode) {", "-\t\t\tlastKeyCode = keyCode;", "-\t\t\tswitch (keyCode) {", "-\t\t\t\tcase SWT.SHIFT:", "-\t\t\t\tcase SWT.CONTROL:", "-\t\t\t\tcase SWT.ALT:", "-\t\t\t\tcase SWT.CAPS_LOCK:", "-\t\t\t\tcase SWT.NUM_LOCK:", "-\t\t\t\tcase SWT.SCROLL_LOCK:", "-\t\t\t\tcase SWT.COMMAND: {", "-\t\t\t\t\t/* keypress events will not be received for these keys, so send KeyDowns for them now */", "-\t\t\t\t\tint[] aAltKey = new int[1], aCtrlKey = new int[1], aShiftKey = new int[1], aMetaKey = new int[1]; /* PRBool */", "-\t\t\t\t\trc = domKeyEvent.GetAltKey (aAltKey);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\trc = domKeyEvent.GetCtrlKey (aCtrlKey);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\trc = domKeyEvent.GetShiftKey (aShiftKey);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\trc = domKeyEvent.GetMetaKey (aMetaKey);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-", "-\t\t\t\t\tEvent keyEvent = new Event ();", "-\t\t\t\t\tkeyEvent.widget = browser;", "-\t\t\t\t\tkeyEvent.type = SWT.KeyDown;", "-\t\t\t\t\tkeyEvent.keyCode = keyCode;", "-\t\t\t\t\tkeyEvent.stateMask = (aAltKey[0] != 0 ? SWT.ALT : 0) | (aCtrlKey[0] != 0 ? SWT.CTRL : 0) | (aShiftKey[0] != 0 ? SWT.SHIFT : 0) | (aMetaKey[0] != 0 ? SWT.COMMAND : 0);", "-\t\t\t\t\tkeyEvent.stateMask &= ~keyCode;\t\t/* remove current keydown if it's a state key */", "-\t\t\t\t\tbrowser.notifyListeners (keyEvent.type, keyEvent);", "-\t\t\t\t\tif (!keyEvent.doit || browser.isDisposed ()) {", "-\t\t\t\t\t\tdomEvent.PreventDefault ();", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tdefault: {", "-\t\t\t\t\t/* ", "-\t\t\t\t\t* If the keydown has Meta (but not Meta+Ctrl) as a modifier then send a KeyDown event for it here", "-\t\t\t\t\t* because a corresponding keypress event will not be received for it from the DOM.  If the keydown", "-\t\t\t\t\t* does not have Meta as a modifier, or has Meta+Ctrl as a modifier, then then do nothing here", "-\t\t\t\t\t* because its KeyDown event will be sent from the keypress listener.", "-\t\t\t\t\t*/", "-\t\t\t\t\tint[] aMetaKey = new int[1]; /* PRBool */", "-\t\t\t\t\trc = domKeyEvent.GetMetaKey (aMetaKey);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tif (aMetaKey[0] != 0) {", "-\t\t\t\t\t\tint[] aCtrlKey = new int[1]; /* PRBool */", "-\t\t\t\t\t\trc = domKeyEvent.GetCtrlKey (aCtrlKey);", "-\t\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\t\tif (aCtrlKey[0] == 0) {", "-\t\t\t\t\t\t\tint[] aAltKey = new int[1], aShiftKey = new int[1]; /* PRBool */", "-\t\t\t\t\t\t\trc = domKeyEvent.GetAltKey (aAltKey);", "-\t\t\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\t\t\trc = domKeyEvent.GetShiftKey (aShiftKey);", "-\t\t\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-", "-\t\t\t\t\t\t\tEvent keyEvent = new Event ();", "-\t\t\t\t\t\t\tkeyEvent.widget = browser;", "-\t\t\t\t\t\t\tkeyEvent.type = SWT.KeyDown;", "-\t\t\t\t\t\t\tkeyEvent.keyCode = lastKeyCode;", "-\t\t\t\t\t\t\tkeyEvent.stateMask = (aAltKey[0] != 0 ? SWT.ALT : 0) | (aCtrlKey[0] != 0? SWT.CTRL : 0) | (aShiftKey[0] != 0? SWT.SHIFT : 0) | (aMetaKey[0] != 0? SWT.COMMAND : 0);", "-\t\t\t\t\t\t\tbrowser.notifyListeners (keyEvent.type, keyEvent);", "-\t\t\t\t\t\t\tif (!keyEvent.doit || browser.isDisposed ()) {", "-\t\t\t\t\t\t\t\tdomEvent.PreventDefault ();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-", "-\t\tdomKeyEvent.Release ();", "-\t\treturn XPCOM.NS_OK;", "-\t}", "-", "-\tif (XPCOM.DOMEVENT_KEYPRESS.equals (typeString)) {", "-\t\t/*", "-\t\t* if keydown could not determine a keycode for this key then it's a", "-\t\t* key for which key events are not sent (eg.- the Windows key)", "-\t\t*/", "-\t\tif (lastKeyCode == 0) return XPCOM.NS_OK;", "-", "-\t\t/*", "-\t\t* On linux only, unexpected keypress events are received for some", "-\t\t* modifier keys.  The workaround is to ignore these events since", "-\t\t* KeyDown events are sent for these keys in the keydown listener.  ", "-\t\t*/", "-\t\tswitch (lastKeyCode) {", "-\t\t\tcase SWT.CAPS_LOCK:", "-\t\t\tcase SWT.NUM_LOCK:", "-\t\t\tcase SWT.SCROLL_LOCK: return XPCOM.NS_OK;", "-\t\t}", "-", "-\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\trc = domEvent.QueryInterface (nsIDOMKeyEvent_1_9.NS_IDOMKEYEVENT_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\tnsIDOMKeyEvent_1_9 domKeyEvent = new nsIDOMKeyEvent_1_9 (result[0]);", "-\t\tresult[0] = 0;", "-", "-\t\tint[] aAltKey = new int[1], aCtrlKey = new int[1], aShiftKey = new int[1], aMetaKey = new int[1]; /* PRBool */", "-\t\trc = domKeyEvent.GetAltKey (aAltKey);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\trc = domKeyEvent.GetCtrlKey (aCtrlKey);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\trc = domKeyEvent.GetShiftKey (aShiftKey);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\trc = domKeyEvent.GetMetaKey (aMetaKey);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tdomKeyEvent.Release ();", "-", "-\t\tint[] aCharCode = new int[1]; /* PRUint32 */", "-\t\trc = domKeyEvent.GetCharCode (aCharCode);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tlastCharCode = aCharCode[0];", "-\t\tif (lastCharCode == 0) {", "-\t\t\tswitch (lastKeyCode) {", "-\t\t\t\tcase SWT.TAB: lastCharCode = SWT.TAB; break;", "-\t\t\t\tcase SWT.CR: lastCharCode = SWT.CR; break;", "-\t\t\t\tcase SWT.BS: lastCharCode = SWT.BS; break;", "-\t\t\t\tcase SWT.ESC: lastCharCode = SWT.ESC; break;", "-\t\t\t\tcase SWT.DEL: lastCharCode = SWT.DEL; break;", "-\t\t\t}", "-\t\t}", "-\t\tif (aCtrlKey[0] != 0 && (0 <= lastCharCode && lastCharCode <= 0x7F)) {", "-\t\t\tif ('a'  <= lastCharCode && lastCharCode <= 'z') lastCharCode -= 'a' - 'A';", "-\t\t\tif (64 <= lastCharCode && lastCharCode <= 95) lastCharCode -= 64;", "-\t\t}", "-", "-\t\tEvent keyEvent = new Event ();", "-\t\tkeyEvent.widget = browser;", "-\t\tkeyEvent.type = SWT.KeyDown;", "-\t\tkeyEvent.keyCode = lastKeyCode;", "-\t\tkeyEvent.character = (char)lastCharCode;", "-\t\tkeyEvent.stateMask = (aAltKey[0] != 0 ? SWT.ALT : 0) | (aCtrlKey[0] != 0 ? SWT.CTRL : 0) | (aShiftKey[0] != 0 ? SWT.SHIFT : 0) | (aMetaKey[0] != 0 ? SWT.COMMAND : 0);", "-\t\tboolean doit = true;", "-\t\tif (delegate.sendTraverse ()) {", "-\t\t\tdoit = sendKeyEvent (keyEvent);", "-\t\t} else {", "-\t\t\tbrowser.notifyListeners (keyEvent.type, keyEvent);", "-\t\t\tdoit = keyEvent.doit; ", "-\t\t}", "-\t\tif (!doit || browser.isDisposed ()) {", "-\t\t\tdomEvent.PreventDefault ();", "-\t\t}", "-\t\treturn XPCOM.NS_OK;", "-\t}", "-", "-\tif (XPCOM.DOMEVENT_KEYUP.equals (typeString)) {", "-\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\trc = domEvent.QueryInterface (nsIDOMKeyEvent_1_9.NS_IDOMKEYEVENT_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\tnsIDOMKeyEvent_1_9 domKeyEvent = new nsIDOMKeyEvent_1_9 (result[0]);", "-\t\tresult[0] = 0;", "-", "-\t\tint[] aKeyCode = new int[1]; /* PRUint32 */", "-\t\trc = domKeyEvent.GetKeyCode (aKeyCode);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tint keyCode = translateKey (aKeyCode[0]);", "-\t\tif (keyCode == 0) {", "-\t\t\t/* indicates a key for which key events are not sent */", "-\t\t\tdomKeyEvent.Release ();", "-\t\t\treturn XPCOM.NS_OK;", "-\t\t}", "-\t\tif (keyCode != lastKeyCode) {", "-\t\t\t/* keyup does not correspond to the last keydown */", "-\t\t\tlastKeyCode = keyCode;", "-\t\t\tlastCharCode = 0;", "-\t\t}", "-", "-\t\tint[] aAltKey = new int[1], aCtrlKey = new int[1], aShiftKey = new int[1], aMetaKey = new int[1]; /* PRBool */", "-\t\trc = domKeyEvent.GetAltKey (aAltKey);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\trc = domKeyEvent.GetCtrlKey (aCtrlKey);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\trc = domKeyEvent.GetShiftKey (aShiftKey);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\trc = domKeyEvent.GetMetaKey (aMetaKey);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tdomKeyEvent.Release ();", "-", "-\t\tEvent keyEvent = new Event ();", "-\t\tkeyEvent.widget = browser;", "-\t\tkeyEvent.type = SWT.KeyUp;", "-\t\tkeyEvent.keyCode = lastKeyCode;", "-\t\tkeyEvent.character = (char)lastCharCode;", "-\t\tkeyEvent.stateMask = (aAltKey[0] != 0 ? SWT.ALT : 0) | (aCtrlKey[0] != 0 ? SWT.CTRL : 0) | (aShiftKey[0] != 0 ? SWT.SHIFT : 0) | (aMetaKey[0] != 0 ? SWT.COMMAND : 0);", "-\t\tswitch (lastKeyCode) {", "-\t\t\tcase SWT.SHIFT:", "-\t\t\tcase SWT.CONTROL:", "-\t\t\tcase SWT.ALT:", "-\t\t\tcase SWT.COMMAND: {", "-\t\t\t\tkeyEvent.stateMask |= lastKeyCode;", "-\t\t\t}", "-\t\t}", "-\t\tbrowser.notifyListeners (keyEvent.type, keyEvent);", "-\t\tif (!keyEvent.doit || browser.isDisposed ()) {", "-\t\t\tdomEvent.PreventDefault ();", "-\t\t}", "-\t\tlastKeyCode = lastCharCode = 0;", "-\t\treturn XPCOM.NS_OK;", "-\t}", "-", "-\t/* mouse event */", "-", "-\tint /*long*/[] result = new int /*long*/[1];", "-\trc = domEvent.QueryInterface (nsIDOMMouseEvent_1_9.NS_IDOMMOUSEEVENT_IID, result);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\tnsIDOMMouseEvent_1_9 domMouseEvent = new nsIDOMMouseEvent_1_9 (result[0]);", "-\tresult[0] = 0;", "-", "-\t/*", "-\t * MouseOver and MouseOut events are fired any time the mouse enters or exits", "-\t * any element within the Browser.  To ensure that SWT events are only", "-\t * fired for mouse movements into or out of the Browser, do not fire an", "-\t * event if the element being exited (on MouseOver) or entered (on MouseExit)", "-\t * is within the Browser.", "-\t */", "-\tif (XPCOM.DOMEVENT_MOUSEOVER.equals (typeString) || XPCOM.DOMEVENT_MOUSEOUT.equals (typeString)) {", "-\t\trc = domMouseEvent.GetRelatedTarget (result);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tif (result[0] != 0) {", "-\t\t\tnew nsISupports (result[0]).Release ();", "-\t\t\tdomMouseEvent.Release ();", "-\t\t\treturn XPCOM.NS_OK;", "-\t\t}", "-\t}", "-", "-\tint[] aScreenX = new int[1], aScreenY = new int[1]; /* PRInt32 */", "-", "-\t/*", "-\t * The position of mouse events is received in screen-relative coordinates", "-\t * in order to handle pages with frames, since frames express their event", "-\t * coordinates relative to themselves rather than relative to their top-", "-\t * level page.  Convert screen-relative coordinates to be browser-relative.", "-\t */", "-\trc = domMouseEvent.GetScreenX (aScreenX);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\trc = domMouseEvent.GetScreenY (aScreenY);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tPoint position = new Point (aScreenX[0], aScreenY[0]);", "-\tposition = browser.getDisplay ().map (null, browser, position);", "-", "-\tint[] aDetail = new int[1]; /* PRInt32 */", "-\trc = domMouseEvent.GetDetail (aDetail);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tshort[] aButton = new short[1]; /* PRUint16 */", "-\trc = domMouseEvent.GetButton (aButton);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tint[] aAltKey = new int[1], aCtrlKey = new int[1], aShiftKey = new int[1], aMetaKey = new int[1]; /* PRBool */", "-\trc = domMouseEvent.GetAltKey (aAltKey);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\trc = domMouseEvent.GetCtrlKey (aCtrlKey);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\trc = domMouseEvent.GetShiftKey (aShiftKey);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\trc = domMouseEvent.GetMetaKey (aMetaKey);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tdomMouseEvent.Release ();", "-", "-\tEvent mouseEvent = new Event ();", "-\tmouseEvent.widget = browser;", "-\tmouseEvent.x = position.x; mouseEvent.y = position.y;", "-\tmouseEvent.stateMask = (aAltKey[0] != 0 ? SWT.ALT : 0) | (aCtrlKey[0] != 0 ? SWT.CTRL : 0) | (aShiftKey[0] != 0 ? SWT.SHIFT : 0) | (aMetaKey[0] != 0 ? SWT.COMMAND : 0);", "-", "-\tif (XPCOM.DOMEVENT_MOUSEDOWN.equals (typeString)) {", "-\t\tdelegate.handleMouseDown ();", "-\t\tmouseEvent.type = SWT.MouseDown;", "-\t\tmouseEvent.button = aButton[0] + 1;", "-\t\tmouseEvent.count = aDetail[0];", "-\t} else if (XPCOM.DOMEVENT_MOUSEUP.equals (typeString)) {", "-\t\t/*", "-\t\t * Bug on OSX.  For some reason multiple mouseup events come from the DOM", "-\t\t * when button 3 is released on OSX.  The first of these events has a count", "-\t\t * detail and the others do not.  The workaround is to not fire received", "-\t\t * button 3 mouseup events that do not have a count since mouse events", "-\t\t * without a click count are not valid.", "-\t\t */", "-\t\tint button = aButton[0] + 1;", "-\t\tint count = aDetail[0];", "-\t\tif (count == 0 && button == 3) return XPCOM.NS_OK;", "-\t\tmouseEvent.type = SWT.MouseUp;", "-\t\tmouseEvent.button = button;", "-\t\tmouseEvent.count = count;", "-\t} else if (XPCOM.DOMEVENT_MOUSEMOVE.equals (typeString)) {", "-\t\tmouseEvent.type = SWT.MouseMove;", "-\t} else if (XPCOM.DOMEVENT_MOUSEWHEEL.equals (typeString)) {", "-\t\tmouseEvent.type = SWT.MouseWheel;", "-\t\tmouseEvent.count = -aDetail[0];", "-\t} else if (XPCOM.DOMEVENT_MOUSEOVER.equals (typeString)) {", "-\t\tmouseEvent.type = SWT.MouseEnter;", "-\t} else if (XPCOM.DOMEVENT_MOUSEOUT.equals (typeString)) {", "-\t\tmouseEvent.type = SWT.MouseExit;", "-\t} else if (XPCOM.DOMEVENT_MOUSEDRAG.equals (typeString)) {", "-\t\tmouseEvent.type = SWT.DragDetect;", "-\t\tmouseEvent.button = aButton[0] + 1;", "-\t\tswitch (mouseEvent.button) {", "-\t\t\tcase 1: mouseEvent.stateMask |= SWT.BUTTON1; break;", "-\t\t\tcase 2: mouseEvent.stateMask |= SWT.BUTTON2; break;", "-\t\t\tcase 3: mouseEvent.stateMask |= SWT.BUTTON3; break;", "-\t\t\tcase 4: mouseEvent.stateMask |= SWT.BUTTON4; break;", "-\t\t\tcase 5: mouseEvent.stateMask |= SWT.BUTTON5; break;", "-\t\t}", "-\t}", "-", "-\tbrowser.notifyListeners (mouseEvent.type, mouseEvent);", "-\tif (browser.isDisposed ()) return XPCOM.NS_OK;", "-\tif (aDetail[0] == 2 && XPCOM.DOMEVENT_MOUSEDOWN.equals (typeString)) {", "-\t\tmouseEvent = new Event ();", "-\t\tmouseEvent.widget = browser;", "-\t\tmouseEvent.x = position.x; mouseEvent.y = position.y;", "-\t\tmouseEvent.stateMask = (aAltKey[0] != 0 ? SWT.ALT : 0) | (aCtrlKey[0] != 0 ? SWT.CTRL : 0) | (aShiftKey[0] != 0 ? SWT.SHIFT : 0) | (aMetaKey[0] != 0 ? SWT.COMMAND : 0);", "-\t\tmouseEvent.type = SWT.MouseDoubleClick;", "-\t\tmouseEvent.button = aButton[0] + 1;", "-\t\tmouseEvent.count = aDetail[0];", "-\t\tbrowser.notifyListeners (mouseEvent.type, mouseEvent);\t", "-\t}", "-\treturn XPCOM.NS_OK;", "-}"]}], "num": 31172}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "61328420558dd26f61f57696853fb245", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e61b905b513e26a0f91155f7d539bb47", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Link.java", "commitBeforeChange": "c4ba93113a54b909b837f2ee93eac0b9faa2deef", "commitAfterChange": "1aabdfcf321362ce14a79dda1cbf06d908949843", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  void drawBackground (int control)", "signatureAfterChange": "  void drawBackground (int control)", "diff": ["+\tif (!hasFocus () || !drawFocusRing () || focusIndex == -1) return;", "+\tint [] outMetric = new int [1];", "+\tOS.GetThemeMetric (OS.kThemeMetricFocusRectOutset, outMetric);", "+\toutMetric[0]--;", "+\tRect r = new Rect (), bounds = new Rect();", "+\tOS.GetControlBounds (control, bounds);", "+\tRectangle [] rects = getRectangles (focusIndex);", "+\tfor (int i = 0; i < rects.length; i++) {", "+\t\tRectangle rect = rects [i];", "+\t\tr.left = (short) (bounds.left + rect.x + outMetric[0]);", "+\t\tr.top = (short) (bounds.top + rect.y + outMetric[0]);", "+\t\tr.right = (short) (r.left + rect.width - (outMetric[0] * 2));", "+\t\tr.bottom = (short) (r.top + rect.height - (outMetric[0] * 2));", "+\t\tOS.DrawThemeFocusRect (r, true);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6243587cf9cef90a62d1090a1eb6256d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Link.java", "commitBeforeChange": "fff12e83491b7bf578f33b1d66f3d786107fbf54", "commitAfterChange": "63e6a9034a307eba9a992e157a5a508d5e41c943", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void drawBackground (int id, NSGraphicsContext context, NSRect rect)", "signatureAfterChange": "  void drawBackground (int id, NSGraphicsContext context, NSRect rectangle)", "diff": ["-void drawBackground (int /*long*/ id, NSGraphicsContext context, NSRect rect) {", "-\tfillBackground (view, context, rect, -1);", "+void drawBackground (int /*long*/ id, NSGraphicsContext context, NSRect rectangle) {", "+\tfillBackground (view, context, rectangle, -1);", "+\tif (!hasFocus() || focusIndex == -1) return;", "+\tint [] outMetric = new int [1];", "+\tOS.GetThemeMetric (OS.kThemeMetricFocusRectOutset, outMetric);", "+\toutMetric[0]--;", "+\tCGRect r = new CGRect();", "+\tNSRect[] rect = getRectangles(focusIndex);", "+\tif (rect == null) return;", "+\tfor (int i = 0; i < rect.length && rect[i] != null; i++) {", "+\t\tr.origin.x = rect[i].x + outMetric[0];", "+\t\tr.origin.y = rect[i].y + outMetric[0];", "+\t\t/*", "+\t\t * sometimes the rect[i].width is smaller than 2 * outMetric and subtracting", "+\t\t * it makes r.size.width < 0", "+\t\t */", "+\t\tr.size.width = rect[i].width - outMetric[0];", "+\t\tr.size.height = rect[i].height - (2 * outMetric[0]);", "+\t\tOS.HIThemeDrawFocusRect(r, true, context.graphicsPort(), OS.kHIThemeOrientationNormal);", "+\t}"]}], "num": 19110}
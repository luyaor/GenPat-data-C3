{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dcd99c847d1c390071b40bbe1b9e4904", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b96987bca6b68b55a9a35e99c2088696", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples.paint/src/org/eclipse/swt/examples/paint/PaintView.java", "commitBeforeChange": "115de19ec544ed7d4732495ff9d3d3e3a00ddb0f", "commitAfterChange": "5db2047dab39b15ff2936cf51daab170f9747a2e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tpublic void createPartControl(Composite parent)", "signatureAfterChange": " \tpublic void createPartControl(Composite parent)", "diff": ["+\tpublic void createPartControl(Composite parent) {", "+\t\tinstance = new PaintExample(parent);", "+\t\tinstance.createGUI(parent);", "+", "+\t\t/*** Add toolbar contributions ***/", "+\t\tfinal IActionBars actionBars = getViewSite().getActionBars();", "+\t\tIToolBarManager toolbarManager = actionBars.getToolBarManager();", "+\t\tTool tools[] = PaintExample.tools;", "+\t\tString group = tools[0].group;", "+\t\ttoolbarManager.add(new GroupMarker(group));", "+\t\tfor (int i = 0; i < tools.length; i++) {", "+\t\t\tTool tool = tools[i];", "+\t\t\tif (!tool.group.equals(group)) {", "+\t\t\t\ttoolbarManager.add(new Separator());", "+\t\t\t\ttoolbarManager.add(new GroupMarker(tool.group));", "+\t\t\t}", "+\t\t\tgroup = tool.group;", "+\t\t\tPaintAction action = new PaintAction(tool);", "+\t\t\ttoolbarManager.appendToGroup(group, action);", "+\t\t\tif (i == PaintExample.Default_tool || i == PaintExample.Default_fill || i == PaintExample.Default_linestyle) {", "+\t\t\t\taction.setChecked(true);", "+\t\tactionBars.updateActionBars();", "+", "+\t\tinstance.setDefaults();", "+\t}", "-\t */", "-\tpublic void createPartControl(Composite parent) {", "-\t\t/*** Initialize shared data ***/", "-\t\tworkbenchDisplay = parent.getDisplay();", "-\t\t", "-\t\tpaintColorWhite = new Color(workbenchDisplay, 255, 255, 255);", "-\t\tpaintColorBlack = new Color(workbenchDisplay, 0, 0, 0);", "-\t\t", "-\t\tpaintDefaultFont = workbenchDisplay.getSystemFont();", "-", "-\t\tpaintColors = new Color[numPaletteCols * numPaletteRows];", "-\t\tpaintColors[0] = paintColorBlack;", "-\t\tpaintColors[1] = paintColorWhite;", "-\t\tfor (int i = 2; i < paintColors.length; i++) {", "-\t\t\tpaintColors[i] = new Color(workbenchDisplay,", "-\t\t\t\t((i*7)%255),((i*23)%255), ((i*51)%255));", "-\t\t}", "-", "-\t\ttoolSettings = new ToolSettings();", "-\t\ttoolSettings.commonForegroundColor = paintColorBlack;", "-\t\ttoolSettings.commonBackgroundColor = paintColorWhite;", "-\t\ttoolSettings.commonFont = paintDefaultFont;", "-", "-\t\t/*** Add toolbar contributions ***/", "-\t\tfinal IActionBars actionBars = getViewSite().getActionBars();", "-\t\tIToolBarManager toolbarManager = actionBars.getToolBarManager();", "-", "-\t\ttoolbarManager.add(new GroupMarker(\"group.tools\"));", "-\t\ttoolbarManager.appendToGroup(\"group.tools\", new SelectPaintToolAction(\"tool.Pencil\"));", "-\t\ttoolbarManager.appendToGroup(\"group.tools\", new SelectPaintToolAction(\"tool.Airbrush\"));", "-\t\ttoolbarManager.appendToGroup(\"group.tools\", new SelectPaintToolAction(\"tool.Line\"));", "-\t\ttoolbarManager.appendToGroup(\"group.tools\", new SelectPaintToolAction(\"tool.PolyLine\"));", "-\t\ttoolbarManager.appendToGroup(\"group.tools\", new SelectPaintToolAction(\"tool.Rectangle\"));", "-\t\ttoolbarManager.appendToGroup(\"group.tools\", new SelectPaintToolAction(\"tool.RoundedRectangle\"));", "-\t\ttoolbarManager.appendToGroup(\"group.tools\", new SelectPaintToolAction(\"tool.Ellipse\"));", "-\t\ttoolbarManager.appendToGroup(\"group.tools\", new SelectPaintToolAction(\"tool.Text\"));", "-\t\ttoolbarManager.add(new Separator());", "-\t\ttoolbarManager.add(new GroupMarker(\"group.options.fill\"));", "-\t\ttoolbarManager.appendToGroup(\"group.options.fill\", new SelectFillTypeAction(\"fill.None\"));", "-\t\ttoolbarManager.appendToGroup(\"group.options.fill\", new SelectFillTypeAction(\"fill.Outline\"));", "-\t\ttoolbarManager.appendToGroup(\"group.options.fill\", new SelectFillTypeAction(\"fill.Solid\"));", "-\t\ttoolbarManager.add(new Separator());", "-\t\ttoolbarManager.add(new GroupMarker(\"group.options.linestyle\"));", "-\t\ttoolbarManager.appendToGroup(\"group.options.linestyle\", new SelectLineStyleAction(\"linestyle.Solid\"));", "-\t\ttoolbarManager.appendToGroup(\"group.options.linestyle\", new SelectLineStyleAction(\"linestyle.Dash\"));", "-\t\ttoolbarManager.appendToGroup(\"group.options.linestyle\", new SelectLineStyleAction(\"linestyle.Dot\"));", "-\t\ttoolbarManager.appendToGroup(\"group.options.linestyle\", new SelectLineStyleAction(\"linestyle.DashDot\"));", "-\t\ttoolbarManager.add(new Separator());", "-\t\ttoolbarManager.add(new GroupMarker(\"group.options\"));", "-\t\ttoolbarManager.appendToGroup(\"group.options\", new SelectFontAction(\"options.Font\"));", "-\t\tactionBars.updateActionBars();", "-", "-\t\t/*** Build GUI ***/", "-\t\tcreateGUI(parent);", "-", "-\t\t/*** Set defaults ***/", "-\t\tsetPaintToolByID(\"tool.Pencil\");", "-\t\tsetFillTypeByID(\"fill.None\");", "-\t\tsetLineStyleByID(\"linestyle.Solid\");", "-\t\tsetForegroundColor(paintColorBlack);", "-\t\tsetBackgroundColor(paintColorWhite);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a79dde0f59608bf8800749123b0e6320", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java", "commitBeforeChange": "8e24d4946b6db91c657141a5b9e295b56bef9d38", "commitAfterChange": "07b74545a7ea5ab851260f23deffd823331ef824", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tvoid createColorGroup ()", "signatureAfterChange": " \tvoid createColorGroup ()", "diff": ["-\t\t", "+\t\tfontButton.setLayoutData(new GridData (GridData.HORIZONTAL_ALIGN_FILL));", "+\t\tButton defaultsButton = new Button (colorGroup, SWT.PUSH);", "+\t\tdefaultsButton.setText(ControlExample.getResourceString(\"Defaults\"));", "+", "-\t\tfinal Image backgroundImage = new Image (display, imageSize, imageSize);\t", "-\t\tfinal Image foregroundImage = new Image (display, imageSize, imageSize);", "+\t\tforegroundImage = new Image (display, imageSize, imageSize);", "+\t\tbackgroundImage = new Image (display, imageSize, imageSize);\t", "-\t\tbackgroundButton.setImage(backgroundImage);", "-\t\tbackgroundButton.addSelectionListener(new SelectionAdapter() {", "-\t\t\tpublic void widgetSelected(SelectionEvent event) {", "-\t\t\t\tRGB rgb = backgroundDialog.open();", "-\t\t\t\tif (rgb == null) return;", "-\t\t\t\tColor oldColor = backgroundColor;", "-\t\t\t\tbackgroundColor = new Color (backgroundButton.getDisplay(), rgb);", "-\t\t\t\tsetExampleWidgetBackground ();", "-\t\t\t\tif (oldColor != null) oldColor.dispose ();", "-\t\t\t}", "-\t\t});", "-\t\tforegroundButton.setImage(foregroundImage);", "+\t\tforegroundButton.setImage(foregroundImage); // sets the size of the button", "+\t\t\t\tColor oldColor = foregroundColor;", "+\t\t\t\tif (oldColor == null) {", "+\t\t\t\t\tControl [] controls = getExampleWidgets ();", "+\t\t\t\t\tif (controls.length > 0) oldColor = controls [0].getForeground ();", "+\t\t\t\t}", "+\t\t\t\tif (oldColor != null) foregroundDialog.setRGB(oldColor.getRGB());", "-\t\t\t\tColor oldColor = foregroundColor;", "-\t\t\t\tforegroundColor = new Color (foregroundButton.getDisplay(), rgb);", "+\t\t\t\toldColor = foregroundColor; // dispose old foreground color when done", "+\t\t\t\tforegroundColor = new Color (event.display, rgb);", "+\t\tbackgroundButton.setImage(backgroundImage); // sets the size of the button", "+\t\tbackgroundButton.addSelectionListener(new SelectionAdapter() {", "+\t\t\tpublic void widgetSelected(SelectionEvent event) {", "+\t\t\t\tColor oldColor = backgroundColor;", "+\t\t\t\tif (oldColor == null) {", "+\t\t\t\t\tControl [] controls = getExampleWidgets ();", "+\t\t\t\t\tif (controls.length > 0) oldColor = controls [0].getBackground ();", "+\t\t\t\t}", "+\t\t\t\tif (oldColor != null) backgroundDialog.setRGB(oldColor.getRGB());", "+\t\t\t\tRGB rgb = backgroundDialog.open();", "+\t\t\t\tif (rgb == null) return;", "+\t\t\t\toldColor = backgroundColor; // dispose old background color when done", "+\t\t\t\tbackgroundColor = new Color (event.display, rgb);", "+\t\t\t\tsetExampleWidgetBackground ();", "+\t\t\t\tif (oldColor != null) oldColor.dispose ();", "+\t\t\t}", "+\t\t});", "-\t\t\tpublic void widgetSelected (SelectionEvent e) {", "+\t\t\tpublic void widgetSelected (SelectionEvent event) {", "+\t\t\t\tFont oldFont = font;", "+\t\t\t\tif (oldFont == null) {", "+\t\t\t\t\tControl [] controls = getExampleWidgets ();", "+\t\t\t\t\tif (controls.length > 0) oldFont = controls [0].getFont ();", "+\t\t\t\t}", "+\t\t\t\tif (oldFont != null) fontDialog.setFontList(oldFont.getFontData());", "-\t\t\t\tFont oldFont = font;", "-\t\t\t\tfont = new Font (fontButton.getDisplay(), fontData);", "+\t\t\t\toldFont = font; // dispose old font when done", "+\t\t\t\tfont = new Font (event.display, fontData);", "-\t\tbackgroundButton.addDisposeListener(new DisposeListener() {", "-\t\t\tpublic void widgetDisposed(DisposeEvent event) {", "-\t\t\t\tif (backgroundImage != null) backgroundImage.dispose();", "-\t\t\t\tif (foregroundImage != null) foregroundImage.dispose();", "-\t\t\t\tif (backgroundColor != null) backgroundColor.dispose();", "-\t\t\t\tif (foregroundColor != null) foregroundColor.dispose();", "-\t\t\t\tif (font != null) font.dispose();", "-\t\t\t\tbackgroundColor = null;", "+\t\tdefaultsButton.addSelectionListener(new SelectionAdapter () {", "+\t\t\tpublic void widgetSelected (SelectionEvent e) {", "+\t\t\t\tsetExampleWidgetForeground ();", "+\t\t\t\tbackgroundColor = null;", "+\t\t\t\tsetExampleWidgetBackground ();", "+\t\t\t\tfont = null;", "+\t\t\t\tsetExampleWidgetFont ();", "+\t\t\t\tsetExampleWidgetSize ();", "+\t\t\t}", "+\t\t});", "+\t\tshell.addDisposeListener(new DisposeListener() {", "+\t\t\tpublic void widgetDisposed(DisposeEvent event) {", "+\t\t\t\tif (foregroundImage != null) foregroundImage.dispose();", "+\t\t\t\tif (backgroundImage != null) backgroundImage.dispose();", "+\t\t\t\tif (foregroundColor != null) foregroundColor.dispose();", "+\t\t\t\tif (backgroundColor != null) backgroundColor.dispose();", "+\t\t\t\tif (font != null) font.dispose();", "+\t\t\t\tforegroundColor = null;", "+\t\t\t\tbackgroundColor = null;"]}], "num": 41942}
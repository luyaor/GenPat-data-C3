{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "288f375bb8df830ed11810acbabda434", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d77636cd503e30f188b76c6c76d1cc72", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " static int createGdipFont(int hDC, int hFont, int graphics, int fontCollection, int [] outFamily, int[] outFont)", "signatureAfterChange": " static long createGdipFont(long hDC, long hFont, long graphics, long fontCollection, long [] outFamily, long[] outFont)", "diff": ["-static int /*long*/ createGdipFont(int /*long*/ hDC, int /*long*/ hFont, int /*long*/ graphics, int /*long*/ fontCollection, int /*long*/ [] outFamily, int /*long*/[] outFont) {", "-\tint /*long*/ font = Gdip.Font_new(hDC, hFont);", "+static long /*int*/ createGdipFont(long /*int*/ hDC, long /*int*/ hFont, long /*int*/ graphics, long /*int*/ fontCollection, long /*int*/ [] outFamily, long /*int*/[] outFont) {", "+\tlong /*int*/ font = Gdip.Font_new(hDC, hFont);", "-\tint /*long*/ family = 0;", "+\tlong /*int*/ family = 0;", "-\t\t\tint /*long*/ hHeap = OS.GetProcessHeap();", "-\t\t\tint /*long*/ pLogFont = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, LOGFONTW.sizeof);", "+\t\t\tlong /*int*/ hHeap = OS.GetProcessHeap();", "+\t\t\tlong /*int*/ pLogFont = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, LOGFONTW.sizeof);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67bac62a65728c7b4c6e327d02c2e9eb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/WebSite.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": "  int Invoke (int dispIdMember, int riid, int lcid, int dwFlags, int pDispParams, int pVarResult, int pExcepInfo, int pArgErr)", "signatureAfterChange": "  int Invoke (int dispIdMember, long riid, int lcid, int dwFlags, long pDispParams, long pVarResult, long pExcepInfo, long pArgErr)", "diff": ["-int Invoke (int dispIdMember, int /*long*/ riid, int lcid, int dwFlags, int /*long*/ pDispParams, int /*long*/ pVarResult, int /*long*/ pExcepInfo, int /*long*/ pArgErr) {", "+int Invoke (int dispIdMember, long /*int*/ riid, int lcid, int dwFlags, long /*int*/ pDispParams, long /*int*/ pVarResult, long /*int*/ pExcepInfo, long /*int*/ pArgErr) {", "-\t\t\tCOM.MoveMemory (pVarResult, new int /*long*/[] {0}, C.PTR_SIZEOF);", "+\t\t\tCOM.MoveMemory (pVarResult, new long /*int*/[] {0}, C.PTR_SIZEOF);", "-\t\t\tCOM.MoveMemory (pVarResult, new int /*long*/[] {0}, C.PTR_SIZEOF);", "+\t\t\tCOM.MoveMemory (pVarResult, new long /*int*/[] {0}, C.PTR_SIZEOF);", "-\tint /*long*/ ptr = dispParams.rgvarg + 2 * Variant.sizeof;", "+\tlong /*int*/ ptr = dispParams.rgvarg + 2 * Variant.sizeof;", "-\t\t\tCOM.MoveMemory (pVarResult, new int /*long*/[] {0}, C.PTR_SIZEOF);", "+\t\t\tCOM.MoveMemory (pVarResult, new long /*int*/[] {0}, C.PTR_SIZEOF);", "-\t\t\tCOM.MoveMemory (pVarResult, new int /*long*/[] {0}, C.PTR_SIZEOF);", "+\t\t\tCOM.MoveMemory (pVarResult, new long /*int*/[] {0}, C.PTR_SIZEOF);", "-\t\t\tCOM.MoveMemory (pVarResult, new int /*long*/[] {0}, C.PTR_SIZEOF);", "+\t\t\tCOM.MoveMemory (pVarResult, new long /*int*/[] {0}, C.PTR_SIZEOF);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6e8db41cbab51b2f449249e6549a3b0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/win32/org/eclipse/swt/browser/WebResourceLoadDelegate.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  int willSendRequest (int webView, int identifier, int request, int redirectResponse, int dataSource, int newRequest)", "signatureAfterChange": "  int willSendRequest (long webView, long identifier, long request, long redirectResponse, long dataSource, long newRequest)", "diff": ["-int willSendRequest (int /*long*/ webView, int /*long*/ identifier, int /*long*/ request, int /*long*/ redirectResponse, int /*long*/ dataSource, int /*long*/ newRequest) {", "+int willSendRequest (long /*int*/ webView, long /*int*/ identifier, long /*int*/ request, long /*int*/ redirectResponse, long /*int*/ dataSource, long /*int*/ newRequest) {", "-\tint /*long*/[] result = new int /*long*/ [1];", "+\tlong /*int*/[] result = new long /*int*/ [1];", "-\t\t\t\tint /*long*/ urlString = WebKit.createBSTR (url);", "+\t\t\t\tlong /*int*/ urlString = WebKit.createBSTR (url);", "-\t\t\t\tOS.MoveMemory (newRequest, new int /*long*/[] {mReq.getAddress ()}, C.PTR_SIZEOF);", "+\t\t\t\tOS.MoveMemory (newRequest, new long /*int*/[] {mReq.getAddress ()}, C.PTR_SIZEOF);", "-\tOS.MoveMemory (newRequest, new int /*long*/[] {request}, C.PTR_SIZEOF);", "+\tOS.MoveMemory (newRequest, new long /*int*/[] {request}, C.PTR_SIZEOF);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "105eaae91fa6efc4e01c0c7793996472", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 263, "methodNumberAfterChange": 263, "signatureBeforeChange": "  \tint queryAccessible2Interfaces(GUID guid, int ppvObject)", "signatureAfterChange": "  \tint queryAccessible2Interfaces(GUID guid, long ppvObject)", "diff": ["-\tint queryAccessible2Interfaces(GUID guid, int /*long*/ ppvObject) {", "+\tint queryAccessible2Interfaces(GUID guid, long /*int*/ ppvObject) {", "-\t\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessible2.getAddress() }, OS.PTR_SIZEOF);", "+\t\t\t\tCOM.MoveMemory(ppvObject, new long /*int*/[] { objIAccessible2.getAddress() }, OS.PTR_SIZEOF);", "-\t\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessibleAction.getAddress() }, OS.PTR_SIZEOF);", "+\t\t\t\tCOM.MoveMemory(ppvObject, new long /*int*/[] { objIAccessibleAction.getAddress() }, OS.PTR_SIZEOF);", "-\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessibleApplication.getAddress() }, OS.PTR_SIZEOF);", "+\t\t\tCOM.MoveMemory(ppvObject, new long /*int*/[] { objIAccessibleApplication.getAddress() }, OS.PTR_SIZEOF);", "-//\t\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessibleComponent.getAddress() }, OS.PTR_SIZEOF);", "+//\t\t\t\tCOM.MoveMemory(ppvObject, new long /*int*/[] { objIAccessibleComponent.getAddress() }, OS.PTR_SIZEOF);", "-\t\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessibleEditableText.getAddress() }, OS.PTR_SIZEOF);", "+\t\t\t\tCOM.MoveMemory(ppvObject, new long /*int*/[] { objIAccessibleEditableText.getAddress() }, OS.PTR_SIZEOF);", "-\t\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessibleHyperlink.getAddress() }, OS.PTR_SIZEOF);", "+\t\t\t\tCOM.MoveMemory(ppvObject, new long /*int*/[] { objIAccessibleHyperlink.getAddress() }, OS.PTR_SIZEOF);", "-\t\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessibleHypertext.getAddress() }, OS.PTR_SIZEOF);", "+\t\t\t\tCOM.MoveMemory(ppvObject, new long /*int*/[] { objIAccessibleHypertext.getAddress() }, OS.PTR_SIZEOF);", "-//\t\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessibleImage.getAddress() }, OS.PTR_SIZEOF);", "+//\t\t\t\tCOM.MoveMemory(ppvObject, new long /*int*/[] { objIAccessibleImage.getAddress() }, OS.PTR_SIZEOF);", "-\t\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessibleTable2.getAddress() }, OS.PTR_SIZEOF);", "+\t\t\t\tCOM.MoveMemory(ppvObject, new long /*int*/[] { objIAccessibleTable2.getAddress() }, OS.PTR_SIZEOF);", "-\t\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessibleTableCell.getAddress() }, OS.PTR_SIZEOF);", "+\t\t\t\tCOM.MoveMemory(ppvObject, new long /*int*/[] { objIAccessibleTableCell.getAddress() }, OS.PTR_SIZEOF);", "-\t\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessibleText.getAddress() }, OS.PTR_SIZEOF);", "+\t\t\t\tCOM.MoveMemory(ppvObject, new long /*int*/[] { objIAccessibleText.getAddress() }, OS.PTR_SIZEOF);", "-\t\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessibleValue.getAddress() }, OS.PTR_SIZEOF);", "+\t\t\t\tCOM.MoveMemory(ppvObject, new long /*int*/[] { objIAccessibleValue.getAddress() }, OS.PTR_SIZEOF);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51d6b6c819a805de1dfddb2e3fdc5768", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleClientSite.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  void OleCreate(GUID appClsid, GUID fileClsid, char[] fileName, File file)", "signatureAfterChange": "  void OleCreate(GUID appClsid, GUID fileClsid, char[] fileName, File file)", "diff": ["-\t\tint /*long*/[] address = new int /*long*/[1];", "+\t\tlong /*int*/[] address = new long /*int*/[1];", "-\t\t\tint /*long*/[] address = new int /*long*/[1];", "+\t\t\tlong /*int*/[] address = new long /*int*/[1];", "-\t\t\tint /*long*/[] address = new int /*long*/[1];", "+\t\t\tlong /*int*/[] address = new long /*int*/[1];", "-\t\t\taddress = new int /*long*/[1];", "+\t\t\taddress = new long /*int*/[1];", "-\t\t\t\t\tint /*long*/ pv = COM.CoTaskMemAlloc(count);", "+\t\t\t\t\tlong /*int*/ pv = COM.CoTaskMemAlloc(count);", "-\t\tint /*long*/[] ppv = new int /*long*/[1];", "+\t\tlong /*int*/[] ppv = new long /*int*/[1];", "-\t\tppv = new int /*long*/[1];", "+\t\tppv = new long /*int*/[1];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a23a5f305f0f6b6c4c68d8e2f9c159d3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/win32/org/eclipse/swt/browser/WebFrameLoadDelegate.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  int didFailProvisionalLoadWithError (int webView, int error, int frame)", "signatureAfterChange": "  int didFailProvisionalLoadWithError (long webView, long error, long frame)", "diff": ["-int didFailProvisionalLoadWithError (int /*long*/ webView, int /*long*/ error, int /*long*/ frame) {", "+int didFailProvisionalLoadWithError (long /*int*/ webView, long /*int*/ error, long /*int*/ frame) {", "-\tint /*long*/[] failingURL = new int /*long*/[1];", "+\tlong /*int*/[] failingURL = new long /*int*/[1];", "-\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\tlong /*int*/[] result = new long /*int*/[1];", "-\t\tint /*long*/[] certificate = new int /*long*/[1];", "+\t\tlong /*int*/[] certificate = new long /*int*/[1];", "-\tint /*long*/[] result = new int /*long*/[1];", "+\tlong /*int*/[] result = new long /*int*/[1];"]}], "num": 56124}
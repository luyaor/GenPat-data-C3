{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9aa8ff5e43ac82c0b65a086486d41800", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f056b5692ca4cbcbf1ae03fb8a9d6c24", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "69fe4fd6617a9947c43adf6f205c96ed59131a3e", "commitAfterChange": "b09a2ad2e37ced7c04edaa5039619cbb8b88f150", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r \r void interpretOsAnswer(String osAnswer)", "signatureAfterChange": "\r \r void interpretOsAnswer(String osAnswer)", "diff": ["+\tif ((style&SWT.MULTI) == 0) {\r", "+\t\tfileNames = new String[] {fileName};\r", "+\t} else {\r", "+\t\tint namesPtr = OS.gtk_file_selection_get_selections(handle);\r", "+\t\tint namesPtr1 = namesPtr;\r", "+\t\tint[] namePtr = new int[1];\r", "+\t\tOS.memmove(namePtr, namesPtr1, 1);\r", "+\t\tint length=0;\r", "+\t\twhile (namePtr[0] != 0) {\r", "+\t\t\tlength++;\r", "+\t\t\tnamesPtr1+=4;  // PROBLEM CODE: depend on address size\r", "+\t\t\tOS.memmove(namePtr, namesPtr1, 1);\r", "+\t\t}\r", "+\t\tfileNames = new String[length];\r", "+\t\tnamePtr = new int[length];\r", "+\t\tOS.memmove(namePtr, namesPtr, length*4);\r", "+\t\tfor (int i=0; i<length; i++) {\r", "+\t\t\t/*\r", "+\t\t\t * NB:  We can not use the Converter here, because\r", "+\t\t\t * the mount charset/iocharset is different than the locale!\r", "+\t\t\t */\r", "+\t\t\tint bytesPtr = OS.g_filename_to_utf8(namePtr[i], -1, 0, 0, 0);\r", "+\t\t\tif (bytesPtr==0) continue;\r", "+\t\t\t// Careful! The size, not the length of the string\r", "+\t\t\tbyte[] bytes = new byte[OS.strlen(bytesPtr)];\r", "+\t\t\tOS.memmove(bytes, bytesPtr, bytes.length);\r", "+\t\t\tfileNames[i] = new String(bytes);\r", "+\t\t\t/*\r", "+\t\t\t * NB:  Unlike other similar functions (e.g., g_convert), the glib\r", "+\t\t\t * documentation does not say the resulting UTF8 string should be\r", "+\t\t\t * freed.  However, the strdup makes me believe the free is necessary.\r", "+\t\t\t */\r", "+\t\t\tOS.g_free(bytesPtr);\r", "+\t\t}\r", "+\t\tOS.g_strfreev(namesPtr);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39b7f9e5031fd19f20777a05ec37d563", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/photon/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "da5b2096f70170c1ee5967072f15746afe644075", "commitAfterChange": "e1a1a9a2764b9fd42d3fd4db27d8d960a32582f7", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r public String[] getAvailableTypeNames()", "signatureAfterChange": "\r public String[] getAvailableTypeNames()", "diff": ["-\tint[] count = new int[1];\r", "-\tint[] max_length = new int[1];\r", "-//\tint xDisplay = OS.XtDisplay (shellHandle);\r", "-//\tif (xDisplay == 0)\r", "-//\t\tDND.error(SWT.ERROR_UNSPECIFIED);\r", "-//\tint xWindow = OS.XtWindow (shellHandle);\r", "-//\tif (xWindow == 0)\r", "-//\t\tDND.error(SWT.ERROR_UNSPECIFIED);\r", "-//\tif (OS.XmClipboardInquireCount(xDisplay, xWindow, count, max_length) != OS.XmClipboardSuccess)\r", "-//\t\tDND.error(SWT.ERROR_UNSPECIFIED);\r", "-\tString[] types = new String[count[0]];\r", "-//\tfor (int i = 0; i < count[0]; i++) {\r", "-//\t\tbyte[] buffer = new byte[max_length[0]];\r", "-//\t\tint[] copied_length = new int[1];\r", "-//\t\tint rc = OS.XmClipboardInquireFormat(xDisplay, xWindow, i + 1, buffer, buffer.length, copied_length);\r", "-//\t\tif (rc == OS.XmClipboardNoData){\r", "-//\t\t\ttypes[i] = \"\";\r", "-//\t\t\tcontinue;\r", "-//\t\t}\r", "-//\t\tif (rc != OS.XmClipboardSuccess)\r", "-//\t\t\tDND.error(SWT.ERROR_UNSPECIFIED);\r", "-//\t\tbyte[] buffer2 = new byte[copied_length[0]];\r", "-//\t\tSystem.arraycopy(buffer, 0, buffer2, 0, copied_length[0]);\r", "-//\t\ttypes[i] = new String(buffer2);\r", "-//\t}\r", "+\tString[] types = new String[0];\r", "+\tint ig = OS.PhInputGroup(0);\r", "+\tint cbdata = OS.PhClipboardPasteStart((short)ig);\r", "+\tif (cbdata == 0) return types;\r", "+\ttry {\r", "+\t\tint pClipHeader = 0;\r", "+\t\tint n = 0;\r", "+\t\twhile ((pClipHeader = OS.PhClipboardPasteTypeN(cbdata, n++)) != 0) {\r", "+\t\t\tPhClipHeader clipHeader = new PhClipHeader();\r", "+\t\t\tOS.memmove(clipHeader, pClipHeader, PhClipHeader.sizeof);\r", "+\t\t\tbyte[] buffer = new byte[8];\r", "+\t\t\tbuffer[0] = clipHeader.type_0;\r", "+\t\t\tbuffer[1] = clipHeader.type_1;\r", "+\t\t\tbuffer[2] = clipHeader.type_2;\r", "+\t\t\tbuffer[3] = clipHeader.type_3;\r", "+\t\t\tbuffer[4] = clipHeader.type_4;\r", "+\t\t\tbuffer[5] = clipHeader.type_5;\r", "+\t\t\tbuffer[6] = clipHeader.type_6;\r", "+\t\t\tbuffer[7] = clipHeader.type_7;\r", "+\t\t\tchar [] unicode = Converter.mbcsToWcs (null, buffer);\r", "+\t\t\t\r", "+\t\t\tString[] newTypes = new String[types.length + 1];\r", "+\t\t\tSystem.arraycopy(types, 0, newTypes, 0, types.length);\r", "+\t\t\tnewTypes[types.length] = new String (unicode);\r", "+\t\t\ttypes = newTypes;\r", "+\t\t}\r", "+\t} finally {\r", "+\t\tOS.PhClipboardPasteFinish(cbdata);\r", "+\t}\r"]}], "num": 24298}
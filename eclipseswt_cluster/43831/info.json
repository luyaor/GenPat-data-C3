{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e6aad148dce89b604e8007bc06f6a66", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fea540492febc398135975ff1e7f261", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "b787d7e445aeaf49b4df48026678b967b8427b13", "commitAfterChange": "db3d81f202062db2f281c5f20f8cbd71fe995d01", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  int calculateWidth (int index, GC gc, boolean recurse)", "signatureAfterChange": "  int calculateWidth (int columnIndex, GC gc, boolean recurse, boolean callMeasureItem)", "diff": ["-int calculateWidth (int index, GC gc, boolean recurse) {", "+int calculateWidth (int columnIndex, GC gc, boolean recurse, boolean callMeasureItem) {", "-\tif (index == 0 && this.width != -1) {", "-\t\twidth = this.width;", "+\tif (!callMeasureItem && customWidth != -1) {", "+\t\twidth = customWidth;", "-//\t\tImage image = getImage (index);", "-\t\tString text = getText (index);", "-\t\tgc.setFont (getFont (index));", "-\t//\tif (image != null) width += image.getBounds ().width + parent.getGap ();", "-\t\tif (text != null && text.length () > 0) width += gc.stringExtent (text).x;", "-\t//\tif (parent.hooks (SWT.MeasureItem)) {", "-\t//\t\tEvent event = new Event ();", "-\t//\t\tevent.item = this;", "-\t//\t\tevent.index = index;", "-\t//\t\tevent.gc = gc;", "-\t//\t\tshort [] height = new short [1];", "-\t//\t\tOS.GetDataBrowserTableViewRowHeight (parent.handle, height);", "-\t//\t\tevent.width = width;", "-\t//\t\tevent.height = height [0];", "-\t//\t\tparent.sendEvent (SWT.MeasureItem, event);", "-\t//\t\tif (parent.itemHeight < event.height) {", "-\t//\t\t\tparent.itemHeight = event.height;", "-\t//\t\t\tOS.SetDataBrowserTableViewRowHeight (parent.handle, (short) event.height);", "-\t//\t\t}", "-\t//\t\twidth = event.width;", "-\t//\t}", "-\t\tif (index == 0) {", "-\t\t\twidth += parent.levelIndent * ((NSOutlineView) parent.view).levelForItem (handle);", "-\t\t\tthis.width = width;", "+\t\tNSBrowserCell cell = parent.dataCell;", "+\t\tcell.setFont (getFont (columnIndex).handle);", "+\t\tcell.setTitle (NSString.stringWith (getText (columnIndex)));", "+\t\tImage image = getImage (columnIndex);", "+\t\tcell.setImage (image != null ? image.handle : null);", "+\t\tNSRect rect = new NSRect ();", "+\t\trect.width = rect.height = Float.MAX_VALUE;", "+\t\tNSSize size = cell.cellSizeForBounds (rect);", "+\t\twidth = (int)size.width;", "+", "+\t\tif (callMeasureItem && parent.hooks (SWT.MeasureItem)) {", "+\t\t\tNSOutlineView outlineView = (NSOutlineView)parent.view;", "+\t\t\tint nsColumnIndex = 0;", "+\t\t\tif (parent.columnCount > 0) {", "+\t\t\t\tnsColumnIndex = outlineView.columnWithIdentifier (parent.columns[columnIndex].nsColumn);", "+\t\t\t}", "+\t\t\tint rowIndex = (int)/*64*/outlineView.rowForItem (handle);", "+\t\t\trect = outlineView.frameOfCellAtColumn (nsColumnIndex, rowIndex);", "+\t\t\tNSRect contentRect = cell.titleRectForBounds (rect);", "+\t\t\tint rowHeight = (int)outlineView.rowHeight ();", "+\t\t\tEvent event = new Event ();", "+\t\t\tevent.item = this;", "+\t\t\tevent.index = columnIndex;", "+\t\t\tevent.gc = gc;", "+\t\t\tevent.x = (int)contentRect.x;", "+\t\t\tevent.y = (int)contentRect.y;", "+\t\t\tevent.width = width;", "+\t\t\tevent.height = rowHeight;", "+\t\t\tparent.sendEvent (SWT.MeasureItem, event);", "+\t\t\tif (rowHeight < event.height) {", "+\t\t\t\toutlineView.setRowHeight (event.height);", "+\t\t\t}", "+\t\t\tif (parent.columnCount == 0) {", "+\t\t\t\tint change = event.width - (customWidth != -1 ? customWidth : width);", "+\t\t\t\tif (customWidth != -1 || event.width != width) {", "+\t\t\t\t\tcustomWidth = event.width;\t", "+\t\t\t\t}", "+\t\t\t\tif (change != 0) parent.setScrollWidth (this);", "+\t\t\t}", "+\t\t\twidth = event.width;", "-\t\t\tif (item != null && item.cached) {", "-\t\t\t\twidth = Math.max (width, item.calculateWidth (index, gc, recurse));", "+\t\t\tif (item != null && !item.isDisposed () && item.cached) {", "+\t\t\t\twidth = Math.max (width, item.calculateWidth (columnIndex, gc, recurse, callMeasureItem));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d560b476c1879f19df7708f543a26c25", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "ff62aa5e7c7f3d11ec529d730cde567330dcd9e8", "commitAfterChange": "ac42e8fd2deef73d52a56aa5bceb9a5ad7ecc239", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  int calculateWidth (int index, GC gc)", "signatureAfterChange": "  int calculateWidth (int columnIndex, GC gc, boolean callMeasureItem)", "diff": ["-int calculateWidth (int index, GC gc) {", "-\tif (index == 0 && width != -1) return width;", "-\tint width = 0;", "-//\tImage image = getImage (index);", "-\tString text = getText (index);", "-\tgc.setFont (getFont (index));", "-//\tif (image != null) width += image.getBounds ().width + parent.getGap ();", "-\tif (text != null && text.length () > 0) width += gc.stringExtent (text).x;", "-//\tif (parent.hooks (SWT.MeasureItem)) {", "-//\t\tEvent event = new Event ();", "-//\t\tevent.item = this;", "-//\t\tevent.index = index;", "-//\t\tevent.gc = gc;", "-//\t\tshort [] height = new short [1];", "-//\t\tOS.GetDataBrowserTableViewRowHeight (parent.handle, height);", "-//\t\tevent.width = width;", "-//\t\tevent.height = height[0];", "-//\t\tparent.sendEvent (SWT.MeasureItem, event);", "-//\t\tif (parent.itemHeight < event.height) {", "-//\t\t\tparent.itemHeight = event.height;", "-//\t\t\tOS.SetDataBrowserTableViewRowHeight (parent.handle, (short) event.height);", "-//\t\t}", "-//\t\twidth = event.width;", "-//\t}", "-\tif (index == 0) this.width = width;", "+int calculateWidth (int columnIndex, GC gc, boolean callMeasureItem) {", "+\tif (!callMeasureItem && customWidth != -1) return customWidth;", "+", "+\tNSBrowserCell cell = parent.dataCell;", "+\tcell.setFont (getFont (columnIndex).handle);", "+\tcell.setTitle (NSString.stringWith (getText (columnIndex)));", "+\tImage image = getImage (columnIndex);", "+\tcell.setImage (image != null ? image.handle : null);", "+\tNSRect rect = new NSRect ();", "+\trect.width = rect.height = Float.MAX_VALUE;", "+\tNSSize size = cell.cellSizeForBounds (rect);", "+\tint width = (int)size.width;", "+", "+\tif (callMeasureItem && parent.hooks (SWT.MeasureItem)) {", "+\t\tNSTableView tableView = (NSTableView)parent.view;", "+\t\tint nsColumnIndex = 0;", "+\t\tif (parent.columnCount > 0) {", "+\t\t\ttableView.columnWithIdentifier (parent.columns[columnIndex].nsColumn);", "+\t\t}", "+\t\tint rowIndex = parent.indexOf (this);", "+\t\trect = tableView.frameOfCellAtColumn (nsColumnIndex, rowIndex);", "+\t\tNSRect contentRect = cell.titleRectForBounds (rect);", "+\t\tint rowHeight = (int)tableView.rowHeight ();", "+\t\tEvent event = new Event ();", "+\t\tevent.item = this;", "+\t\tevent.index = columnIndex;", "+\t\tevent.gc = gc;", "+\t\tevent.x = (int)contentRect.x;", "+\t\tevent.y = (int)contentRect.y;", "+\t\tevent.width = width;", "+\t\tevent.height = rowHeight;", "+\t\tparent.sendEvent (SWT.MeasureItem, event);", "+\t\tif (rowHeight < event.height) {", "+\t\t\ttableView.setRowHeight (event.height);", "+\t\t}", "+\t\tif (parent.columnCount == 0) {", "+\t\t\tint change = event.width - (customWidth != -1 ? customWidth : width);", "+\t\t\tif (customWidth != -1 || event.width != width) {", "+\t\t\t\tcustomWidth = event.width;\t", "+\t\t\t}", "+\t\t\tif (change != 0) parent.setScrollWidth (this, false);", "+\t\t}", "+\t\twidth = event.width;", "+\t}"]}], "num": 43831}
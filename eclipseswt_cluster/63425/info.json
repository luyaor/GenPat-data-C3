{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "414a7f418cc1246f238213d10b7ec442", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5141a5518e86a650600cf5a54598d7ce", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "80da648e54c5996231a82e37f7ddac42a9763361", "commitAfterChange": "123ea21435945c9585ede55bef80d1e5c5621abd", "methodNumberBeforeChange": 216, "methodNumberAfterChange": 216, "signatureBeforeChange": "  LRESULT WM_SYSCOMMAND (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_SYSCOMMAND (int wParam, int lParam)", "diff": ["-\t\t\tif (hooks (SWT.KeyDown) || hooks (SWT.KeyUp)) {", "+\t\t\t/*", "+\t\t\t* When lParam is zero, one of F10, Shift+F10, Ctrl+F10 or", "+\t\t\t* Ctrl+Shift+F10 was pressed.  If there is no menu bar and", "+\t\t\t* the focus control is interested in keystrokes, give the", "+\t\t\t* key to the focus control.  Normally, F10 with no menu bar", "+\t\t\t* moves focus to the System menu but this can be achieved", "+\t\t\t* using Alt+Space.  To allow the application to see F10,", "+\t\t\t* avoid running the default window proc.", "+\t\t\t* ", "+\t\t\t* NOTE:  When F10 is pressed, WM_SYSCOMMAND is sent to the", "+\t\t\t* shell, not the focus control.  This is undocumented Windows", "+\t\t\t* behavior.", "+\t\t\t*/", "+\t\t\tif (lParam == 0) {", "-\t\t\t\tif (menu != null) {", "-\t\t\t\t\tchar key = mbcsToWcs (lParam);", "-\t\t\t\t\tif (key != 0) {", "-\t\t\t\t\t\tkey = Character.toUpperCase (key);", "-\t\t\t\t\t\tMenuItem [] items = menu.getItems ();", "-\t\t\t\t\t\tfor (int i=0; i<items.length; i++) {", "-\t\t\t\t\t\t\tMenuItem item = items [i];", "-\t\t\t\t\t\t\tString text = item.getText ();", "-\t\t\t\t\t\t\tchar mnemonic = findMnemonic (text);", "-\t\t\t\t\t\t\tif (text.length () > 0 && mnemonic == 0) {", "-\t\t\t\t\t\t\t\tchar ch = text.charAt (0);", "-\t\t\t\t\t\t\t\tif (Character.toUpperCase (ch) == key) {", "-\t\t\t\t\t\t\t\t\tdisplay.mnemonicKeyHit = false;", "-\t\t\t\t\t\t\t\t\treturn LRESULT.ZERO;", "+\t\t\t\tif (menu == null) {", "+\t\t\t\t\tControl control = display.getFocusControl ();", "+\t\t\t\t\tif (control != null) {", "+\t\t\t\t\t\tif (control.hooks (SWT.KeyDown) || control.hooks (SWT.KeyUp)) {", "+\t\t\t\t\t\t\tdisplay.mnemonicKeyHit = false;", "+\t\t\t\t\t\t\treturn LRESULT.ZERO;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t/*", "+\t\t\t\t* When lParam is not zero, Alt+<key> was pressed.  If the", "+\t\t\t\t* application is interested in keystrokes and there is a", "+\t\t\t\t* menu bar, check to see whether the key that was pressed", "+\t\t\t\t* matches a mnemonic on the menu bar.  Normally, Windows", "+\t\t\t\t* matches the first character of a menu item as well as", "+\t\t\t\t* matching the mnemonic character.  To allow the application", "+\t\t\t\t* to see the keystrokes in this case, avoid running the default", "+\t\t\t\t* window proc.", "+\t\t\t\t*/", "+\t\t\t\tif (hooks (SWT.KeyDown) || hooks (SWT.KeyUp)) {", "+\t\t\t\t\tDecorations shell = menuShell ();", "+\t\t\t\t\tMenu menu = shell.getMenuBar ();", "+\t\t\t\t\tif (menu != null) {", "+\t\t\t\t\t\tchar key = mbcsToWcs (lParam);", "+\t\t\t\t\t\tif (key != 0) {", "+\t\t\t\t\t\t\tkey = Character.toUpperCase (key);", "+\t\t\t\t\t\t\tMenuItem [] items = menu.getItems ();", "+\t\t\t\t\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\t\t\t\t\tMenuItem item = items [i];", "+\t\t\t\t\t\t\t\tString text = item.getText ();", "+\t\t\t\t\t\t\t\tchar mnemonic = findMnemonic (text);", "+\t\t\t\t\t\t\t\tif (text.length () > 0 && mnemonic == 0) {", "+\t\t\t\t\t\t\t\t\tchar ch = text.charAt (0);", "+\t\t\t\t\t\t\t\t\tif (Character.toUpperCase (ch) == key) {", "+\t\t\t\t\t\t\t\t\t\tdisplay.mnemonicKeyHit = false;", "+\t\t\t\t\t\t\t\t\t\treturn LRESULT.ZERO;", "+\t\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "355c19f1b95888e40d56be944f306c4e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/TableTreeEditor.java", "commitBeforeChange": "225492273129ab393f5d04af4b1516eb8093e8a2", "commitAfterChange": "14b05cc752ecfa6b4d76eaa5bd6a7189c2e56c0f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public void dispose ()", "signatureAfterChange": "\r public void dispose ()", "diff": ["+\t\r", "+\tTable table = tableTree.getTable();\r", "+\tif (this.column > -1 && this.column < table.getColumnCount()){\r", "+\t\tTableColumn tableColumn = table.getColumn(this.column);\r", "+\t\ttableColumn.removeListener(SWT.Resize, columnListener);\r", "+\t\ttableColumn.removeListener(SWT.Move, columnListener);\r", "+\t}\r", "-\teditor.dispose();\r", "+\ttableTree = null;\r", "+\titem = null;\r", "+\tcolumn = -1;\r", "+\t\r", "+\tsuper.dispose();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "697271741ed8f1139eea875053713582", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "d40de95713aa2ea21126d6e88c192e810affe18d", "commitAfterChange": "cbb07118466c8bacecf58f0853494868bce04573", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": "  void sendDoubleSelection()", "signatureAfterChange": "  void sendDoubleSelection()", "diff": ["-\tint index = (int)/*64*/((NSTableView)view).clickedRow (); ", "-\tif (index != -1) {", "+\tNSTableView tableView = (NSTableView)view;", "+\tint rowIndex = (int)/*64*/tableView.clickedRow (); ", "+\tif (rowIndex != -1) {", "+\t\tif ((style & SWT.CHECK) != 0) {", "+\t\t\tNSArray columns = tableView.tableColumns ();", "+\t\t\tint columnIndex = (int)/*64*/tableView.clickedColumn ();", "+\t\t\tid column = columns.objectAtIndex (columnIndex);", "+\t\t\tif (column.id == checkColumn.id) return;", "+\t\t}", "-\t\tevent.item = _getItem (index);", "+\t\tevent.item = _getItem (rowIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b3398648370dcf338245c7a5ea8baca", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "2dbd0ccfe08d6a6997a0e9308c031e61261124ee", "commitAfterChange": "293acdaaff55ea509849ff9da47dacd21701a74a", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["+\t\t\t\t\tif (filename.startsWith (TASKBAR_EVENT)) {", "+\t\t\t\t\t\tString text = filename.substring (TASKBAR_EVENT.length ());", "+\t\t\t\t\t\tint id = Integer.parseInt (text);", "+\t\t\t\t\t\tMenuItem item = getMenuItem (id);", "+\t\t\t\t\t\tif (item != null) {", "+\t\t\t\t\t\t\titem.sendSelectionEvent (SWT.Selection);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b210a1a0a91093a7221a935ea1649242", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "d40de95713aa2ea21126d6e88c192e810affe18d", "commitAfterChange": "cbb07118466c8bacecf58f0853494868bce04573", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "  void sendDoubleSelection()", "signatureAfterChange": "  void sendDoubleSelection()", "diff": ["-\tint index = (int)/*64*/outlineView.clickedRow (); ", "-\tif (index != -1) {", "-\t\tTreeItem item = (TreeItem) display.getWidget (outlineView.itemAtRow (index).id);", "+\tint rowIndex = (int)/*64*/outlineView.clickedRow (); ", "+\tif (rowIndex != -1) {", "+\t\tif ((style & SWT.CHECK) != 0) {", "+\t\t\tNSArray columns = outlineView.tableColumns ();", "+\t\t\tint columnIndex = (int)/*64*/outlineView.clickedColumn ();", "+\t\t\tid column = columns.objectAtIndex (columnIndex);", "+\t\t\tif (column.id == checkColumn.id) return;", "+\t\t}", "+\t\tTreeItem item = (TreeItem) display.getWidget (outlineView.itemAtRow (rowIndex).id);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bcbb6c1326bd067fba851b4e50b2d1e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "92e83b54977a11052b46f2a93227c10bd401de89", "commitAfterChange": "91ca9b8718f2b061952edf08ad752d3a1aa6ef26", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "diff": ["+\t\t\tcase OS.HDN_ITEMDBLCLICKW:      ", "+\t\t\tcase OS.HDN_ITEMDBLCLICKA: {", "+\t\t\t\tNMHEADER phdn = new NMHEADER ();", "+\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "+\t\t\t\tTableColumn column = columns [phdn.iItem];", "+\t\t\t\tif (column != null) {", "+\t\t\t\t\tcolumn.postEvent (SWT.DefaultSelection);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bec1aa60a250e81486171bae3b5e5b0e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "ca93adc00de1b6ad1c0f65ddc2308c7dea4041b4", "commitAfterChange": "59f23b88f8785de2a8f89eb05dea610bd0de6972", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": " void onMouse(Event event)", "signatureAfterChange": " void onMouse(Event event)", "diff": ["-\t\t\tif (ignoreUp) ignoreUp = false;", "-\t\t\t\t\tignoreUp = true;", "-\t\t\tif (ignoreUp) {", "-\t\t\t\tignoreUp = false;", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tDisplay display = getDisplay();", "+\t\t\t\tboolean selected = chevronImageState == SELECTED;", "+\t\t\t\tif (!selected) return;", "+\t\t\t\tboolean selected = minImageState == SELECTED;", "+\t\t\t\tif (!selected) return;", "-\t\t\t\tif (e.doit) setMinimized(!restore);", "+\t\t\t\tif (e.doit && !isDisposed()) setMinimized(!restore);", "+\t\t\t\tboolean selected = maxImageState == SELECTED;", "+\t\t\t\tif (!selected) return;", "-\t\t\t\tif (e.doit) setMaximized(!restore);", "+\t\t\t\tif (e.doit && !isDisposed()) setMaximized(!restore);", "+\t\t\t\t\tboolean selected = item.closeImageState == SELECTED;", "+\t\t\t\t\tif (!selected) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e95a104313f5fa96763db601ec6213c4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "f58793f683068b94e35443290158542850eb2c3b", "commitAfterChange": "0eda67c783918bbf2ce66da0ea5b0c0d81bf13de", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "diff": ["-\t\t\t\t\tstring.getChars (0, length, chars, 0);\t", "+\t\t\t\t\tstring.getChars (0, length, chars, 0);", "+\t\t\t\t\t", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Ensure that the orientation of the tool tip matches", "+\t\t\t\t\t* the orientation of the control.", "+\t\t\t\t\t*/", "+\t\t\t\t\tint hwnd = hdr.idFrom;", "+\t\t\t\t\tif (hwnd != 0 && ((lpnmtdi.uFlags & OS.TTF_IDISHWND) != 0)) {", "+\t\t\t\t\t\tControl control = WidgetTable.get (hwnd);", "+\t\t\t\t\t\tif (control != null) {", "+\t\t\t\t\t\t\tif ((control.getStyle () & SWT.RIGHT_TO_LEFT) != 0) {", "+\t\t\t\t\t\t\t\tlpnmtdi.uFlags |= OS.TTF_RTLREADING;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tlpnmtdi.uFlags &= ~OS.TTF_RTLREADING;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89dce2e642556ba4367585631c0078da", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/cocoa/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "a3eda06a7a4c290420b73156206fa1800c9178ee", "commitAfterChange": "9837bb695405327b535c2924659cef1a3a71f994", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  public boolean setText(String html, boolean trusted)", "signatureAfterChange": "  public boolean setText(String html, boolean trusted)", "diff": ["-\tuntrustedText = !trusted;", "-\t* Bug in Safari.  The web view segment faults in some circumstances", "-\t* when the text changes during the location changing callback.  The", "-\t* fix is to defer the work until the callback is done. ", "+\t* If this.html is not null then the about:blank page is already being loaded,", "+\t* so no navigate is required.  Just set the html that is to be shown.", "-\tif (changingLocation) {", "-\t\tthis.html = html;", "-\t} else {", "-\t\t_setText(html, trusted);", "-\t}", "-\treturn true;", "-}", "+\tboolean blankLoading = this.html != null;", "+\tthis.html = html;", "+\tuntrustedText = !trusted;", "+\tif (blankLoading) return true;", "+", "+\tNSURL inURL = NSURL.URLWithString(NSString.stringWith (ABOUT_BLANK));", "+\tNSURLRequest request = NSURLRequest.requestWithURL(inURL);", "+\tmainFrame.loadRequest(request);", "+\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55b9de4fd6b5a42fa121d6d93d3ba73b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "3267320d7c5bbaa6743022a44ad2fb9c8bf04682", "commitAfterChange": "3d69dc45257158dbb91cb9d9dffc563be912ce34", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "diff": ["-\t\t\t\t\t\tint inset = 2;", "-\t\t\t\t\t\trect.left = itemRect.right - inset + 1;", "+\t\t\t\t\t\tint gridWidth = getLinesVisible () ? GRID_WIDTH : 0;", "+\t\t\t\t\t\trect.left = itemRect.right - gridWidth;", "+\t\t\tcase OS.HDN_ITEMCLICKW:", "+\t\t\tcase OS.HDN_ITEMCLICKA: {", "+\t\t\t\tNMHEADER phdn = new NMHEADER ();", "+\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "+\t\t\t\tTreeColumn column = columns [phdn.iItem];", "+\t\t\t\tif (column != null) {", "+\t\t\t\t\tcolumn.postEvent (SWT.Selection);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}"]}], "num": 63425}
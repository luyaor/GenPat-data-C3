{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbdbbaf2bfda25add275fbf54ae4f78c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10cd1cd25f6165a34a4ac382c8c53c98", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "4b21419a582289fce72ef15bfe70049085b3c772", "commitAfterChange": "b2343fc03843d983cdbcf528d75f7e9524819b07", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  void createSurface()", "signatureAfterChange": "  void createSurface()", "diff": ["+\tif (mask != 0) {", "+\t\tint[] w = new int[1], h = new int[1];", "+\t \tOS.gdk_drawable_get_size(pixmap, w, h);", "+\t \tint width = w[0], height = h[0]; \t", "+\t \tint /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, width, height);", "+\t\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tint /*long*/ colormap = OS.gdk_colormap_get_system();", "+\t\tOS.gdk_pixbuf_get_from_drawable(pixbuf, pixmap, colormap, 0, 0, 0, 0, width, height);", "+\t\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "+\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "+\t\tint /*long*/ gdkImagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);", "+\t\tbyte[] line = new byte[stride];", "+\t\tfor (int y=0; y<height; y++) {", "+\t\t\tint /*long*/ offset = pixels + (y * stride);", "+\t\t\tOS.memmove(line, offset, stride);", "+\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\tint offset1 = x * 4;", "+\t\t\t\tif (gdkImagePtr != 0) {", "+\t\t\t\t\tif (OS.gdk_image_get_pixel(gdkImagePtr, x, y) == 0) {", "+\t\t\t\t\t\tline[offset1+3] = 0;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbyte temp = line[offset1];", "+\t\t\t\tline[offset1] = line[offset1 + 2];", "+\t\t\t\tline[offset1 + 2] = temp;", "+\t\t\t}", "+\t\t\tOS.memmove(offset, line, stride);", "+\t\t}", "+\t\tif (gdkImagePtr != 0) OS.g_object_unref(gdkImagePtr);", "+\t\tsurfaceData = OS.g_malloc(stride * height);", "+\t\tOS.memmove(surfaceData, pixels, stride * height);", "+\t\tsurface = Cairo.cairo_surface_create_for_image(surfaceData, Cairo.CAIRO_FORMAT_ARGB32, width, height, stride);", "+\t\tOS.g_object_unref(pixbuf);", "+\t\treturn;", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "107a9b64214ff6cdea93df0c4fd1ce89", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "8549b1db39ac8fd4bb7564c61e5b9a04b5efde6f", "commitAfterChange": "2b3120470b46968368044df3f94129d586bc41d5", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 64, "signatureBeforeChange": "  void setScrollWidth (boolean force)", "signatureAfterChange": "  boolean setScrollWidth (TableItem item, boolean force)", "diff": ["-void setScrollWidth (boolean force) {", "+boolean setScrollWidth (TableItem item, boolean force) {", "+\tif (ignoreRedraw) return false;", "-\t\treturn;", "+\t\treturn false;", "-\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, OS.LVSCW_AUTOSIZE);", "-\t\t//NOT DONE", "-//\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-//\t\tif ((bits & OS.LVS_OWNERDATA) != 0) {", "-//\t\t\tint width = OS.SendMessage (handle, OS.LVM_GETCOLUMNWIDTH, 0, 0);", "-//\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, width + 2);", "-//\t\t}", "+\t\tif ((style & SWT.VIRTUAL) != 0) {", "+\t\t\tint newWidth = 0;", "+\t\t\tcount = OS.SendMessage (handle, OS.LVM_GETITEMCOUNT, 0, 0);", "+\t\t\tint index = 0;", "+\t\t\twhile (index < count) {", "+\t\t\t\tString string = item != null ? item.text : items [index].text;", "+\t\t\t\tif (string.length () != 0) {", "+\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, true);", "+\t\t\t\t\tnewWidth = Math.max (newWidth, OS.SendMessage (handle, OS.LVM_GETSTRINGWIDTH, 0, buffer));", "+\t\t\t\t}", "+\t\t\t\tif (item != null) break;", "+\t\t\t\tindex++;", "+\t\t\t}", "+\t\t\tint hStateList = OS.SendMessage (handle, OS.LVM_GETIMAGELIST, OS.LVSIL_STATE, 0);", "+\t\t\tif (hStateList != 0) {", "+\t\t\t\tint [] cx = new int [1], cy = new int [1];", "+\t\t\t\tOS.ImageList_GetIconSize (hStateList, cx, cy);", "+\t\t\t\tnewWidth += cx [0] + 4;", "+\t\t\t}", "+\t\t\tint hImageList = OS.SendMessage (handle, OS.LVM_GETIMAGELIST, OS.LVSIL_SMALL, 0);", "+\t\t\tif (hImageList != 0) {", "+\t\t\t\tint [] cx = new int [1], cy = new int [1];", "+\t\t\t\tOS.ImageList_GetIconSize (hImageList, cx, cy);", "+\t\t\t\tnewWidth += cx [0];", "+\t\t\t}", "+\t\t\tnewWidth += 8;", "+\t\t\tint oldWidth = OS.SendMessage (handle, OS.LVM_GETCOLUMNWIDTH, 0, 0);", "+\t\t\tif (newWidth > oldWidth) {", "+\t\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, newWidth);", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t} else {", "+\t\t\t/*", "+\t\t\t* Bug in Windows.  When the table is dislaying check boxes without", "+\t\t\t* icons the width computed by LVM_SETCOLUMNWIDTH with LVSCW_AUTOSIZE", "+\t\t\t* is too small causing the longest item to be truncated with '...'.", "+\t\t\t* The fix is to increase the size by a small amount.", "+\t\t\t*/", "+\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, OS.LVSCW_AUTOSIZE);", "+\t\t\tif ((style & SWT.CHECK) != 0 && imageList != null) {", "+\t\t\t\tint width = OS.SendMessage (handle, OS.LVM_GETCOLUMNWIDTH, 0, 0);", "+\t\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, width + 2);", "+\t\t\t}", "+\t\t\treturn true;", "+\t\t}", "+\treturn false;"]}], "num": 22657}
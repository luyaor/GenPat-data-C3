{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e24faefc73b0d3b157abd15f8b6b96e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f65d4314e05676af2b46740ac4b24620", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "0ec16a191637037ae868aa23c8c55cf2d8a64f40", "commitAfterChange": "d78a1f304fc5886faf978adcf843b66da4334afd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Rectangle getBounds (int index)", "signatureAfterChange": " public Rectangle getBounds (int index)", "diff": ["-\tGdkRectangle rect = new GdkRectangle();", "-\tString pathString = Integer.toString(parent.indexOf(this));", "-\tint path = OS.gtk_tree_path_new_from_string(Converter.wcsToMbcs(null, pathString, true));", "-\tint columnPtr = parent.columns[index].handle;", "-\tOS.gtk_tree_view_get_cell_area(parent.handle, path, columnPtr, rect);", "-\tint headerHeight = parent.getHeaderHeight();", "-\treturn new Rectangle (rect.x, rect.y+headerHeight, rect.width, rect.height);", "+\tint parentHandle = parent.handle;", "+\tint column = OS.gtk_tree_view_get_column (parentHandle, index);", "+\tif (column == 0) return new Rectangle (0, 0, 0, 0);", "+\tint path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);", "+\tGdkRectangle rect = new GdkRectangle ();", "+\tOS.gtk_tree_view_get_cell_area (parentHandle, path, column, rect);", "+\tOS.gtk_tree_path_free (path);", "+\tint headerHeight = parent.getHeaderHeight ();", "+\treturn new Rectangle (rect.x, rect.y + headerHeight, rect.width, rect.height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02488c7be02b22242066e74b80204c43", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "bf221f66369037ceea33728d5ed71d69549dd596", "commitAfterChange": "73be0ec89889e2c1322c1bfa09d83f81f689ab7f", "methodNumberBeforeChange": 302, "methodNumberAfterChange": 304, "signatureBeforeChange": " public void setTopPixel(int pixel)", "signatureAfterChange": " public void setTopPixel(int pixel)", "diff": ["-\tint height = clientAreaHeight;", "+\tint height = clientAreaHeight - topMargin - bottomMargin;", "-\t\tif (pixel > getVerticalScrollOffset()) {", "-\t\t\tint bottomIndex = getLineIndex(height) + 1;", "-\t\t\tint bottomPixel = getLinePixel(bottomIndex);", "-\t\t\twhile (pixel + height > bottomPixel && lineCount > bottomIndex) {", "-\t\t\t\tbottomPixel += renderer.getLineHeight(bottomIndex++);", "+\t\tint verticalOffset = getVerticalScrollOffset();", "+\t\tif (pixel > verticalOffset) {", "+\t\t\tint lineIndex = topIndex;", "+\t\t\tint maxTopPixel = verticalOffset + getLinePixel(lineIndex) - height;", "+\t\t\twhile (maxTopPixel < pixel && lineIndex < lineCount) {", "+\t\t\t\tmaxTopPixel += renderer.getLineHeight(lineIndex++);", "-\t\t\tif (pixel + height > bottomPixel) pixel = bottomPixel - height; ", "+\t\t\tif (pixel > maxTopPixel) pixel = maxTopPixel;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "791a11574623ae2594b041d4168e62eb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/DragSource.java", "commitBeforeChange": "cd2b53b4a9279ed54f58046e25d52b26e8ff215a", "commitAfterChange": "a249bc7fdbc7fae25945bbe8a9ec4c661502f54f", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  private int QueryContinueDrag(int fEscapePressed, int grfKeyState)", "signatureAfterChange": "  private int QueryContinueDrag(int fEscapePressed, int grfKeyState)", "diff": ["+\tif (topControl != null && topControl.isDisposed()) return COM.DRAGDROP_S_CANCEL;", "-\t\tif (topControl != null) OS.ImageList_DragLeave(topControl.handle);", "+\t\tif (hwndDrag != 0) OS.ImageList_DragLeave(hwndDrag);", "-\t\tif (topControl != null) OS.ImageList_DragLeave(topControl.handle);", "+\t\tif (hwndDrag != 0) OS.ImageList_DragLeave(hwndDrag);", "-\tif (topControl != null) {", "-\t\tDisplay display = getDisplay();", "-\t\tPoint pt = display.getCursorLocation();", "-\t\tPoint location = topControl.getLocation();", "-\t\tOS.ImageList_DragMove(pt.x - location.x, pt.y - location.y);", "+\tif (hwndDrag != 0) {", "+\t\tPOINT pt = new POINT ();", "+\t\tOS.GetCursorPos (pt);", "+\t\tOS.MapWindowPoints (0, hwndDrag, pt, 1);", "+\t\tOS.ImageList_DragMove(pt.x, pt.y);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "470070704411a4d734cd0235aef0eaec", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "73b51de8c84174e0e99b4c04bc9fd87166a96cec", "commitAfterChange": "7df940ae424cbd3c79310d7b9bc5d657b5781f6f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Image(Device device, Image srcImage, int flag)", "signatureAfterChange": " public Image(Device device, Image srcImage, int flag)", "diff": ["-\t\tint srcRowBytes= rowBytes(width, srcDepth);", "+\t\tif (srcBitsPerPixel == 1) {", "+\t\t\t/*", "+\t\t\t * Nothing we can reasonably do here except copy", "+\t\t\t * the bitmap; we can't make it a higher color depth.", "+\t\t\t * Short-circuit the rest of the code and return.", "+\t\t\t */", "+\t\t\tpixmap = duplicate(srcImage.pixmap);", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\tint srcRowBytes= rowBytes(width, srcDepth);", "-\t\t\t/*", "-\t\t\t * Nothing we can reasonably do here except copy", "-\t\t\t * the bitmap; we can't make it a higher color depth.", "-\t\t\t * Short-circuit the rest of the code and return.", "-\t\t\t */", "-\t\t\tpixmap = duplicate(srcImage.pixmap);", "+\t\t\t// should not happen; see above", "-\t\t\tSWT.error(SWT.ERROR_NOT_IMPLEMENTED);", "+\t\t\t//SWT.error(SWT.ERROR_NOT_IMPLEMENTED);", "+\t\t\tpixmap = duplicate(srcImage.pixmap);", "-\t\t\t\t\tsrcPixel = ((srcData[index + xIndex + 1] & 0xFF) << 8) | (srcData[index + xIndex] & 0xFF);", "+\t\t\t\t\tint ix= index + xIndex;", "+\t\t\t\t\tsrcPixel = ((srcData[ix + 1] & 0xFF) << 8) | (srcData[ix] & 0xFF);", "-\t\t\t\t\t\tdestData[index + xIndex] = zeroLow;", "-\t\t\t\t\t\tdestData[index + xIndex + 1] = zeroHigh;", "+\t\t\t\t\t\tdestData[ix] = zeroLow;", "+\t\t\t\t\t\tdestData[ix + 1] = zeroHigh;", "-\t\t\t\t\t\tdestData[index + xIndex] = oneLow;", "-\t\t\t\t\t\tdestData[index + xIndex + 1] = oneHigh;", "+\t\t\t\t\t\tdestData[ix] = oneLow;", "+\t\t\t\t\t\tdestData[ix + 1] = oneHigh;", "-\t\tif (!palette.isDirect) {", "-\t\t\t/* Convert the palette entries to gray. */", "-\t\t\tRGB [] rgbs = palette.getRGBs();", "-\t\t\tfor (int i=0; i<rgbs.length; i++) {", "-\t\t\t\tif (data.transparentPixel != i) {", "-\t\t\t\t\tRGB color = rgbs [i];", "-\t\t\t\t\tint red = color.red;", "-\t\t\t\t\tint green = color.green;", "-\t\t\t\t\tint blue = color.blue;", "-\t\t\t\t\tint intensity = (red+red+green+green+green+green+green+blue) >> 3;", "-\t\t\t\t\tcolor.red = color.green = color.blue = intensity;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tnewData.palette = new PaletteData(rgbs);", "-\t\t} else {", "+\t\tif (palette.isDirect) {", "-\t\t\tfor (int i=0; i<rgbs.length; i++) {", "-\t\t\t\trgbs[i] = new RGB(i, i, i);", "-\t\t\t}", "+\t\t\tfor (int i= 0; i < rgbs.length; i++)", "+\t\t\t\trgbs[i]= new RGB(i, i, i);", "+\t\t\t", "-\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\tfor (int y= 0; y < height; y++) {", "-\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\tfor (int x= 0; x < width; x++) {", "+\t\t} else {", "+\t\t\t/* Convert the palette entries to gray. */", "+\t\t\tRGB [] rgbs = palette.getRGBs();", "+\t\t\tfor (int i= 0; i < rgbs.length; i++) {", "+\t\t\t\tif (data.transparentPixel != i) {", "+\t\t\t\t\tRGB color = rgbs [i];", "+\t\t\t\t\tint red = color.red;", "+\t\t\t\t\tint green = color.green;", "+\t\t\t\t\tint blue = color.blue;", "+\t\t\t\t\tint intensity = (red+red+green+green+green+green+green+blue) >> 3;", "+\t\t\t\t\tcolor.red = color.green = color.blue = intensity;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tnewData.palette = new PaletteData(rgbs);", "+\t\t"]}], "num": 54765}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f1b8f2eb2d9980030866f9eac48eb675", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a430ae6bb2d4ae55dfb57e0a76d5c1f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "9c01a3f45d573f08d8b7a2e1b0b9b9e7b1cebb0a", "commitAfterChange": "b55930c1b042058439d042ea5c49694a2329e40e", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " public void setSelection (TreeItem [] items)", "signatureAfterChange": " public void setSelection (TreeItem item)", "diff": ["+ */", "+public void setSelection (TreeItem item) {", "+\tcheckWidget ();", "+\tif (item == null) error (SWT.ERROR_NULL_ARGUMENT);", "+\tsetSelection (new TreeItem [] {item});", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2064d2bd2cbfb0f60db0841d71dcb71", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Scrollable.java", "commitBeforeChange": "f54e3a41eec8575656b869bd6f4046284f618477", "commitAfterChange": "78de6a75dd3879930bae14ab714715cacc8bd007", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  LRESULT WM_MOUSEWHEEL (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_MOUSEWHEEL (int wParam, int lParam)", "diff": ["-\tint scrollRemainder = display.scrollRemainder;", "-\tLRESULT result = super.WM_MOUSEWHEEL (wParam, lParam);", "-\tif (result != null) return result;", "-\t/*", "-\t* Translate WM_MOUSEWHEEL to WM_VSCROLL or WM_HSCROLL.", "-\t*/", "-\tif ((state & CANVAS) != 0) {", "-\t\tif ((wParam & (OS.MK_SHIFT | OS.MK_CONTROL)) != 0) return result;", "-\t\tboolean vertical = verticalBar != null && verticalBar.getEnabled ();", "-\t\tboolean horizontal = horizontalBar != null && horizontalBar.getEnabled ();", "-\t\tint msg = vertical ? OS.WM_VSCROLL : horizontal ? OS.WM_HSCROLL : 0;", "-\t\tif (msg == 0) return result;", "-\t\tint [] linesToScroll = new int [1];", "-\t\tOS.SystemParametersInfo (OS.SPI_GETWHEELSCROLLLINES, 0, linesToScroll, 0);", "-\t\tint delta = OS.GET_WHEEL_DELTA_WPARAM (wParam);", "-\t\tboolean pageScroll = linesToScroll [0] == OS.WHEEL_PAGESCROLL;", "-\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (5, 1)) {", "-\t\t\tScrollBar bar = vertical ? verticalBar : horizontalBar;", "-\t\t\tSCROLLINFO info = new SCROLLINFO ();", "-\t\t\tinfo.cbSize = SCROLLINFO.sizeof;", "-\t\t\tinfo.fMask = OS.SIF_POS;", "-\t\t\tOS.GetScrollInfo (handle, bar.scrollBarType (), info);", "-\t\t\tif (vertical && !pageScroll) delta *= linesToScroll [0];", "-\t\t\tint increment = pageScroll ? bar.getPageIncrement () : bar.getIncrement ();", "-\t\t\tinfo.nPos -=  increment * delta / OS.WHEEL_DELTA;", "-\t\t\tOS.SetScrollInfo (handle, bar.scrollBarType (), info, true);", "-\t\t\tOS.SendMessage (handle, msg, OS.SB_THUMBPOSITION, 0);", "-\t\t} else {", "-\t\t\tint code = 0;", "-\t  \t\tif (pageScroll) {", "-\t   \t\t\tcode = delta < 0 ? OS.SB_PAGEDOWN : OS.SB_PAGEUP;", "-\t  \t\t} else {", "-\t  \t\t\tcode = delta < 0 ? OS.SB_LINEDOWN : OS.SB_LINEUP;", "-\t  \t\t\tif (msg == OS.WM_VSCROLL) delta *= linesToScroll [0];", "-\t  \t\t}", "-\t  \t\t/* Check if the delta and the remainder have the same direction (sign) */", "-\t  \t\tif ((delta ^ scrollRemainder) >= 0) delta += scrollRemainder;", "-\t\t\tint count = Math.abs (delta) / OS.WHEEL_DELTA;", "-\t\t\tfor (int i=0; i<count; i++) {", "-\t\t\t\tOS.SendMessage (handle, msg, code, 0);", "-\t\t\t}", "-\t\t}", "-\t\treturn LRESULT.ZERO;", "-\t}", "-\t\t", "-\t/*", "-\t* When the native widget scrolls inside WM_MOUSEWHEEL, it", "-\t* may or may not send a WM_VSCROLL or WM_HSCROLL to do the", "-\t* actual scrolling.  This depends on the implementation of", "-\t* each native widget.  In order to ensure that application", "-\t* code is notified when the scroll bar moves, compare the", "-\t* scroll bar position before and after the WM_MOUSEWHEEL.", "-\t* If the native control sends a WM_VSCROLL or WM_HSCROLL,", "-\t* then the application has already been notified.  If not", "-\t* explicitly send the event.", "-\t*/", "-\tint vPosition = verticalBar == null ? 0 : verticalBar.getSelection ();", "-\tint hPosition = horizontalBar == null ? 0 : horizontalBar.getSelection ();", "-\tint /*long*/ code = callWindowProc (handle, OS.WM_MOUSEWHEEL, wParam, lParam);", "-\tif (verticalBar != null) {", "-\t\tint position = verticalBar.getSelection ();", "-\t\tif (position != vPosition) {", "-\t\t\tEvent event = new Event ();", "-\t\t\tevent.detail = position < vPosition ? SWT.PAGE_UP : SWT.PAGE_DOWN; ", "-\t\t\tverticalBar.sendEvent (SWT.Selection, event);", "-\t\t}", "-\t}", "-\tif (horizontalBar != null) {", "-\t\tint position = horizontalBar.getSelection ();", "-\t\tif (position != hPosition) {", "-\t\t\tEvent event = new Event ();", "-\t\t\tevent.detail = position < hPosition ? SWT.PAGE_UP : SWT.PAGE_DOWN; ", "-\t\t\thorizontalBar.sendEvent (SWT.Selection, event);", "-\t\t}", "-\t}", "-\treturn new LRESULT (code);", "+\treturn wmScrollWheel ((state & CANVAS) != 0, wParam, lParam);"]}], "num": 54435}
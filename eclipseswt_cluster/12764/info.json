{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46b1ece421e999164b72e1823661503c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "035f918b5b04d7c3ee73ea6ead10ba1a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "commitAfterChange": "5c7937250fcb4b2e69099c4b441e5a51b45e4add", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  int accessibilityAttributeNames(int id, int sel)", "signatureAfterChange": "  int accessibleHandle()", "diff": ["-int /*long*/ accessibilityAttributeNames(int /*long*/ id, int /*long*/ sel) {", "-\tif (accessible != null) {\t\t", "-\t\tif ((textView != null && (id == textView.id || id == textView.cell().id)) || (imageView != null && (id == imageView.id || id == imageView.cell().id))) {", "-\t\t\t// See if the accessible will override or augment the standard list.", "-\t\t\t// Help, title, and description can be overridden.", "-\t\t\tNSMutableArray extraAttributes = NSMutableArray.arrayWithCapacity(3);", "-\t\t\textraAttributes.addObject(OS.NSAccessibilityHelpAttribute);", "-\t\t\textraAttributes.addObject(OS.NSAccessibilityDescriptionAttribute);", "-\t\t\textraAttributes.addObject(OS.NSAccessibilityTitleAttribute);", "-", "-\t\t\tfor (int i = (int)/*64*/extraAttributes.count() - 1; i >= 0; i--) {", "-\t\t\t\tNSString attribute = new NSString(extraAttributes.objectAtIndex(i).id);", "-\t\t\t\tif (accessible.internal_accessibilityAttributeValue(attribute, ACC.CHILDID_SELF) == null) {", "-\t\t\t\t\textraAttributes.removeObjectAtIndex(i);", "-\t\t\t\t}", "-\t\t\t}", "-", "-\t\t\tif (extraAttributes.count() > 0) {", "-\t\t\t\tint /*long*/ superResult = super.accessibilityAttributeNames(id, sel);", "-\t\t\t\tNSArray baseAttributes = new NSArray(superResult);", "-\t\t\t\tNSMutableArray mutableAttributes = NSMutableArray.arrayWithCapacity(baseAttributes.count() + 1);", "-\t\t\t\tmutableAttributes.addObjectsFromArray(baseAttributes);", "-\t\t\t\t", "-\t\t\t\tfor (int i = 0; i < extraAttributes.count(); i++) {", "-\t\t\t\t\tid currAttribute = extraAttributes.objectAtIndex(i);", "-\t\t\t\t\tif (!mutableAttributes.containsObject(currAttribute)) {", "-\t\t\t\t\t\tmutableAttributes.addObject(currAttribute);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\treturn mutableAttributes.id;", "-\t\t\t}", "-\t\t}", "-\t}", "-", "-\treturn super.accessibilityAttributeNames(id, sel);", "+int /*long*/ accessibleHandle() {", "+\treturn eventView().id;\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35f142ba1b0285fef05f617e7e138ae4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "commitAfterChange": "5c7937250fcb4b2e69099c4b441e5a51b45e4add", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  int accessibilityAttributeNames(int id, int sel)", "signatureAfterChange": "  int accessibilityAttributeValue (int id, int sel, int arg0)", "diff": ["-int /*long*/ accessibilityAttributeNames(int /*long*/ id, int /*long*/ sel) {", "-\t", "-\tif (id == view.id) {", "-\t\tif (accessible != null) {", "-\t\t\t// If there is an accessible, it may provide its own list of attributes if it's a lightweight control.", "-\t\t\t// If not, let Cocoa handle it for this view.", "-\t\t\tid returnObject = accessible.internal_accessibilityAttributeNames(ACC.CHILDID_SELF);", "-\t\t\tif (returnObject != null) return returnObject.id;", "+int /*long*/ accessibilityAttributeValue (int /*long*/ id, int /*long*/ sel, int /*long*/ arg0) {", "+\tNSString nsAttributeName = new NSString(arg0);", "+\tint /*long*/ superValue = super.accessibilityAttributeValue(id, sel, arg0);", "+", "+\tif ((state & CANVAS) != 0) {", "+\t\t// If this Composite has an Accessible that defined a role, return that, unless the", "+\t\t// supplied role was NSAccessibilityUnknownRole.  In that case, return an SWT-specific constant.", "+\t\t// This lets the accessibility hierarchy know there's a container here.", "+\t\tif (id == accessibleHandle()) {", "+\t\t\tif (nsAttributeName.isEqualToString (OS.NSAccessibilityRoleAttribute)) {", "+\t\t\t\tif (superValue != 0) {", "+\t\t\t\t\tNSString role = new NSString(superValue);", "+\t\t\t\t\tif (!role.isEqualToString(OS.NSAccessibilityUnknownRole)) return superValue;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tNSString role = NSString.stringWith(\"SWTComposite\");", "+\t\t\t\treturn role.id;", "+\t\t\t} else if (nsAttributeName.isEqualToString (OS.NSAccessibilityRoleDescriptionAttribute)) {", "+\t\t\t\tif (superValue != 0) {", "+\t\t\t\t\tNSString role = new NSString(superValue);", "+\t\t\t\t\tif (!role.isEqualToString(OS.NSAccessibilityUnknownSubrole)) return superValue;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tNSString roleDescription = NSString.stringWith(\"generic container view\");", "+\t\t\t\treturn roleDescription.id;", "+\t\t\t}", "-\treturn super.accessibilityAttributeNames(id, sel);", "+\treturn superValue;"]}], "num": 12764}
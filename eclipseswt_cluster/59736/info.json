{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "004d5236dad9d1233940c5c66efb5adf", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec6bdad16a978ca3ef7e80ddde895208", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "78b56da73aaece31c0684550745b7a7104823835", "commitAfterChange": "cf742db20509b38d927ca9256380eb34e3e40548", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  void update ()", "signatureAfterChange": "  void update ()", "diff": ["-\t* Bug in Windows.  When a menu item has a check and a string", "-\t* that includes a label and accelerator text but does not have", "-\t* a bitmap, when the string is the longest string in the menu,", "-\t* the label and accelerator text overlap.  The fix is to use", "-\t* SetMenuItemInfo() to indicate that the item has a bitmap", "-\t* and then answer the width of the widest bitmap in the menu", "-\t* from WM_MEASURECHILD.", "+\t* Bug in Windows.  If a menu contains items that have", "+\t* images and can be checked, Windows does not include", "+\t* the width of the image and the width of the check when", "+\t* computing the width of the menu.  When the longest item", "+\t* does not have an image, the label and the accelerator", "+\t* text can overlap.  The fix is to use SetMenuItemInfo()", "+\t* to indicate that all items have a bitmap and then include", "+\t* the width of the widest bitmap in WM_MEASURECHILD.", "-\tif (hasCheck) {", "-\t\tMENUITEMINFO info = new MENUITEMINFO ();", "-\t\tinfo.cbSize = MENUITEMINFO.sizeof;", "-\t\tinfo.fMask = OS.MIIM_BITMAP;", "-\t\tfor (int i=0; i<items.length; i++) {", "-\t\t\tMenuItem item = items [i];", "-\t\t\tif ((item.getStyle () & (SWT.CHECK | SWT.RADIO)) != 0) {", "-\t\t\t\tinfo.hbmpItem = hasImage ? OS.HBMMENU_CALLBACK : 0;", "-\t\t\t\tOS.SetMenuItemInfo (handle, item.id, false, info);", "-\t\t\t}", "+\tMENUITEMINFO info = new MENUITEMINFO ();", "+\tinfo.cbSize = MENUITEMINFO.sizeof;", "+\tinfo.fMask = OS.MIIM_BITMAP;", "+\tfor (int i=0; i<items.length; i++) {", "+\t\tMenuItem item = items [i];", "+\t\tif (item.getImage () == null) {", "+\t\t\tinfo.hbmpItem = hasImage ? OS.HBMMENU_CALLBACK : 0;", "+\t\t\tOS.SetMenuItemInfo (handle, item.id, false, info);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32abc2aeb6147147bc728c691283be2e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "78b56da73aaece31c0684550745b7a7104823835", "commitAfterChange": "cf742db20509b38d927ca9256380eb34e3e40548", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  LRESULT wmMeasureChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmMeasureChild (int wParam, int lParam)", "diff": ["-\t\t* Bug in Windows.  When a menu item has a check and a string", "-\t\t* that includes a label and accelerator text but does not have", "-\t\t* a bitmap, when the string is the longest string in the menu,", "-\t\t* the label and accelerator text overlap.  The fix is to use", "-\t\t* SetMenuItemInfo() to indicate that the item has a bitmap", "-\t\t* and then answer the width of the widest bitmap in the menu", "-\t\t* from WM_MEASURECHILD.", "+\t\t* Bug in Windows.  If a menu contains items that have", "+\t\t* images and can be checked, Windows does not include", "+\t\t* the width of the image and the width of the check when", "+\t\t* computing the width of the menu.  When the longest item", "+\t\t* does not have an image, the label and the accelerator", "+\t\t* text can overlap.  The fix is to use SetMenuItemInfo()", "+\t\t* to indicate that all items have a bitmap and then include", "+\t\t* the width of the widest bitmap in WM_MEASURECHILD.", "-\t\tif ((style & (SWT.CHECK | SWT.RADIO)) != 0) {", "+\t\tMENUINFO lpcmi = new MENUINFO ();", "+\t\tlpcmi.cbSize = MENUINFO.sizeof;", "+\t\tlpcmi.fMask = OS.MIM_STYLE;", "+\t\tint hMenu = parent.handle;", "+\t\tOS.GetMenuInfo (hMenu, lpcmi);", "+\t\tif ((lpcmi.dwStyle & OS.MNS_CHECKORBMP) == 0) {"]}], "num": 59736}
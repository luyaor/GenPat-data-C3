{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "57b150de3ba76ee6140be6a732b61914", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff7253a322a1b7c11923bfbabcf467d2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "d8159d338aaf86023cec2249c45177bc8271c37f", "commitAfterChange": "4104ceda9f66b065a92cb3685b6d06bfffbccc42", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \tvoid write(String string, int start, int end)", "signatureAfterChange": "\r \tvoid write(String string, int start, int end)", "diff": ["+\t */\r", "+\tvoid write(String string, int start, int end) {\r", "+\t\tfor (int index = start; index < end; index++) {\r", "+\t\t\tchar ch = string.charAt(index);\r", "+\t\t\tif (ch > 0xFF && WriteUnicode) {\r", "+\t\t\t\t// write the sub string from the last escaped character \r", "+\t\t\t\t// to the current one. Fixes bug 21698.\r", "+\t\t\t\tif (index > start) {\r", "+\t\t\t\t\twrite(string.substring(start, index));\r", "+\t\t\t\t}\r", "+\t\t\t\twrite(\"\\\\u\");\r", "+\t\t\t\twrite(Integer.toString((short) ch));\r", "+\t\t\t\twrite(' ');\t\t\t\t\t\t// control word delimiter\r", "+\t\t\t\tstart = index + 1;\r", "+\t\t\t}\r", "+\t\t\telse\r", "+\t\t\tif (ch == '}' || ch == '{' || ch == '\\\\') {\r", "+\t\t\t\t// write the sub string from the last escaped character \r", "+\t\t\t\t// to the current one. Fixes bug 21698.\r", "+\t\t\t\tif (index > start) {\r", "+\t\t\t\t\twrite(string.substring(start, index));\r", "+\t\t\t\t}\r", "+\t\t\t\twrite('\\\\');\r", "+\t\t\t\twrite(ch);\r", "+\t\t\t\tstart = index + 1;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t// write from the last escaped character to the end.\r", "+\t\t// Fixes bug 21698.\r", "+\t\tif (start < end) {\r", "+\t\t\twrite(string.substring(start, end));\r", "+\t\t}\r", "+\t}\t\r", "-\t */\r", "-\tvoid write(String string, int start, int end) {\r", "-\t\tint index;\r", "-\t\t\r", "-\t\tfor (index = start; index < end; index++) {\r", "-\t\t\tchar c = string.charAt(index);\r", "-\t\t\tif (c == '}' || c == '{' || c == '\\\\') {\r", "-\t\t\t\tbreak;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif (index == end) {\r", "-\t\t\twrite(string.substring(start, end));\t// string doesn't contain RTF formatting characters, write as is\r", "-\t\t}\r", "-\t\telse {\t\t\t\t\t\t\t\t\t\t// string needs to be transformed\r", "-\t\t\tchar[] text = new char[end - start];\r", "-\t\t\t\r", "-\t\t\tstring.getChars(start, end, text, 0);\r", "-\t\t\tfor (index = 0; index < text.length; index++) {\r", "-\t\t\t\tswitch (text[index]) {\r", "-\t\t\t\t\tcase '}':\r", "-\t\t\t\t\tcase '{':\r", "-\t\t\t\t\tcase '\\\\':\r", "-\t\t\t\t\t\twrite(\"\\\\\");\r", "-\t\t\t\t\tdefault:\r", "-\t\t\t\t\t\twrite(text[index]);\r", "-\t\t\t\t}\t\t\t\r", "-\t\t\t}\t\t\t\r", "-\t\t}\r", "-\t}\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90918b304fcf1be494efb2952df02b94", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "b8f9d45a80c733a8f5884af87c95e68f3463aaa7", "commitAfterChange": "e2ae18014fd9c71ab4dc0b52900b77c1d3a0f5b7", "methodNumberBeforeChange": 256, "methodNumberAfterChange": 257, "signatureBeforeChange": "\r int textWidth(String text, int lineOffset, int startOffset, int length, StyleRange[] lineStyles, int startXOffset, GC gc, StyledTextBidi bidi)", "signatureAfterChange": "\r int textWidth(String text, int lineOffset, int startOffset, int length, StyleRange[] lineStyles, int startXOffset, GC gc)", "diff": ["-int textWidth(String text, int lineOffset, int startOffset, int length, StyleRange[] lineStyles, int startXOffset, GC gc, StyledTextBidi bidi) {\r", "+int textWidth(String text, int lineOffset, int startOffset, int length, StyleRange[] lineStyles, int startXOffset, GC gc) {\r", "+\tFontData fontData;\r", "-\tif (startOffset < 0 || startOffset >= textLength || startOffset + length > textLength) {\r", "+\tif (startOffset < 0 || startOffset >= textLength || endOffset > textLength) {\r", "-\tif (bidi != null) {\r", "-\t\t// Use lastCaretDirection in order to get same results as during\r", "-\t\t// caret positioning (setBidiCaretLocation). Fixes 1GKU4C5.\r", "-\t\tpaintX = bidi.getCaretPosition(endOffset, lastCaretDirection) - startXOffset;\r", "-\t}\r", "-\telse {\r", "-\t\tFontData fontData = gc.getFont().getFontData()[0];\r", "-\r", "-\t\tfor (int i = startOffset; i < endOffset; i++) {\r", "-\t\t\tint tabIndex = text.indexOf(TAB, i);\r", "-\t\t\t// is tab not present or past the rendering range?\r", "-\t\t\tif (tabIndex == -1 || tabIndex > endOffset) {\r", "-\t\t\t\ttabIndex = endOffset;\r", "+\tfontData = gc.getFont().getFontData()[0];\r", "+\tfor (int i = startOffset; i < endOffset; i++) {\r", "+\t\tint tabIndex = text.indexOf(TAB, i);\r", "+\t\t// is tab not present or past the rendering range?\r", "+\t\tif (tabIndex == -1 || tabIndex > endOffset) {\r", "+\t\t\ttabIndex = endOffset;\r", "+\t\t}\r", "+\t\tif (tabIndex != i) {\r", "+\t\t\tString tabSegment = text.substring(i, tabIndex);\r", "+\t\t\tif (lineStyles != null) {\r", "+\t\t\t\tpaintX = styledTextWidth(tabSegment, lineOffset + i, lineStyles, paintX, gc, fontData);\r", "-\t\t\tif (tabIndex != i) {\r", "-\t\t\t\tString tabSegment = text.substring(i, tabIndex);\r", "-\t\t\t\tif (lineStyles != null) {\r", "-\t\t\t\t\tpaintX = styledTextWidth(tabSegment, lineOffset + i, lineStyles, paintX, gc, fontData);\r", "-\t\t\t\t}\r", "-\t\t\t\telse {\r", "-\t\t\t\t\tsetLineFont(gc, fontData, SWT.NORMAL);\r", "-\t\t\t\t\tpaintX += gc.stringExtent(tabSegment).x;\r", "-\t\t\t\t}\r", "-\t\t\t\tif (tabIndex != endOffset && tabWidth > 0) {\r", "-\t\t\t\t\tpaintX = getTabStop(startXOffset + paintX) - startXOffset;\r", "-\t\t\t\t}\r", "-\t\t\t\ti = tabIndex;\r", "+\t\t\telse {\r", "+\t\t\t\tsetLineFont(gc, fontData, SWT.NORMAL);\r", "+\t\t\t\tpaintX += gc.stringExtent(tabSegment).x;\r", "-\t\t\telse \t\t\r", "-\t\t\tif (tabWidth > 0) {\r", "+\t\t\tif (tabIndex != endOffset && tabWidth > 0) {\r", "+\t\t\ti = tabIndex;\r", "+\t\t}\r", "+\t\telse \t\t\r", "+\t\tif (tabWidth > 0) {\r", "+\t\t\tpaintX = getTabStop(startXOffset + paintX) - startXOffset;\r"]}], "num": 45397}
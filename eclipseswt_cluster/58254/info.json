{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "99681dcf1e1736e89bf03c628a535ebe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4329ad50dd106b3079fa1d3bd3935e49", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "e9ae07fd367d911ee6d4e07d42035b0e3fd629db", "commitAfterChange": "87a273517d8662be0d55be7871a1f3a52f123a80", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+\tif (hHint == SWT.DEFAULT && labelHandle != 0) {", "+\t\tint /*long*/ layout = OS.gtk_label_get_layout (labelHandle);", "+\t\tint /*long*/ context = OS.pango_layout_get_context (layout);", "+\t\tint /*long*/ lang = OS.pango_context_get_language (context);", "+\t\tint /*long*/ font = getFontDescription ();", "+\t\tint /*long*/ metrics = OS.pango_context_get_metrics (context, font, lang);", "+\t\tint ascent = OS.PANGO_PIXELS (OS.pango_font_metrics_get_ascent (metrics));", "+\t\tint descent = OS.PANGO_PIXELS (OS.pango_font_metrics_get_descent (metrics));", "+\t\tOS.pango_font_metrics_unref (metrics);", "+\t\tint fontHeight = ascent + descent;", "+\t\tint [] buffer = new int [1];", "+\t\tOS.g_object_get (labelHandle, OS.ypad, buffer, 0);", "+\t\tfontHeight += 2 * buffer [0];", "+\t\tif (frameHandle != 0) {", "+\t\t\tint /*long*/ style = OS.gtk_widget_get_style (frameHandle);", "+\t\t\tfontHeight += 2 * OS.gtk_style_get_ythickness (style);", "+\t\t\tfontHeight += 2 * OS.gtk_container_get_border_width (frameHandle);", "+\t\t}", "+\t\tsize.y = Math.max (size.y, fontHeight);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "199c77a314764bb62833b85f6abf5072", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "3e1b012af2b4ba818ce575f06ca138619a0a2859", "commitAfterChange": "4b27ffdfff25d04c66f5ca08e11b1e086b9d1dcd", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 134, "signatureBeforeChange": "  int tableView_selectionIndexesForProposedSelection (int id, int sel, int aTableView, int indexSet)", "signatureAfterChange": "  int tableView_selectionIndexesForProposedSelection (int id, int sel, int aTableView, int indexSet)", "diff": ["+\tNSTableView tableView = new NSTableView(aTableView);", "+", "+\t// If a checkbox is being tracked don't select the row.", "+\tif (display.trackedButtonRow != -1) return tableView.selectedRowIndexes().id;", "+\t", "+\t// If the click was in a checkbox, remove that row from the proposed selection.", "+\tNSMutableIndexSet mutableSelection = (NSMutableIndexSet) new NSMutableIndexSet().alloc();", "+\tmutableSelection = new NSMutableIndexSet(mutableSelection.initWithIndexSet(new NSIndexSet(indexSet)));", "+    int /*long*/ clickedCol = tableView.clickedColumn();", "+    int /*long*/ clickedRow = tableView.clickedRow();", "+    if (clickedRow >= 0 && clickedCol >= 0) {", "+        NSCell cell = tableView.preparedCellAtColumn(clickedCol, clickedRow);", "+        if (cell.isKindOfClass(OS.class_NSButtonCell) && cell.isEnabled()) {", "+            NSRect cellFrame = tableView.frameOfCellAtColumn(clickedCol, clickedRow);", "+            NSRect imageFrame = cell.imageRectForBounds(cellFrame);", "+            NSPoint hitPoint = tableView.convertPoint_fromView_(NSApplication.sharedApplication().currentEvent().locationInWindow(), null);", "+            if (OS.NSPointInRect(hitPoint, imageFrame)) {", "+    \t\t\tmutableSelection.removeIndex(clickedRow);", "+            }", "+        }            ", "+    }", "-\t\tNSIndexSet indexes = new NSIndexSet(indexSet);", "-\t\tNSTableView table = new NSTableView(aTableView);\t\t\t", "-\t\tif (indexes.count() != 1 && table.selectedRow() != -1) {", "-\t\t\tNSIndexSet newSelection = (NSIndexSet)new NSIndexSet().alloc();", "-\t\t\tnewSelection = newSelection.initWithIndex(table.selectedRow());", "-\t\t\tnewSelection.autorelease();", "-\t\t\treturn newSelection.id;", "+\t\tif (mutableSelection.count() != 1 && tableView.selectedRow() != -1) {", "+\t\t\treturn tableView.selectedRowIndexes().id;", "-\treturn indexSet;", "+\treturn mutableSelection.id;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6da64a124084a1b98efdbf57aa71b2b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "deae4ffede0b128d12edaa3fadba406eb7ad3185", "commitAfterChange": "b6d9911240fd498e3f172d356c74aa9dea6cee07", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 85, "signatureBeforeChange": "  int outlineView_selectionIndexesForProposedSelection (int id, int sel, int aTableView, int indexSet)", "signatureAfterChange": "  boolean outlineView_shouldTrackCell_forTableColumn_item(int id, int sel, \t\tint table, int cell, int tableColumn, int item)", "diff": ["-int /*long*/ outlineView_selectionIndexesForProposedSelection (int /*long*/ id, int /*long*/ sel, int /*long*/ aTableView, int /*long*/ indexSet) {", "-\t\tNSIndexSet indexes = new NSIndexSet(indexSet);", "-\t\tNSOutlineView table = new NSOutlineView(aTableView);\t\t\t", "-\t\tif (indexes.count() != 1 && table.selectedRow() != -1) {", "-\t\t\tNSIndexSet newSelection = (NSIndexSet)new NSIndexSet().alloc();", "-\t\t\tnewSelection = newSelection.initWithIndex(table.selectedRow());", "-\t\t\tnewSelection.autorelease();", "-\t\t\treturn newSelection.id;", "-\t", "-\treturn indexSet;", "+boolean outlineView_shouldTrackCell_forTableColumn_item(int /*long*/ id, int /*long*/ sel,", "+\t\tint /*long*/ table, int /*long*/ cell, /*long*/ int /*long*/ tableColumn, int /*long*/ item) {", "+\tNSCell theCell = new NSCell(cell);", "+\tNSOutlineView tableView = (NSOutlineView)view;", "+\tint /*long*/ rowIndex = tableView.rowForItem(new id(item));", "+\tif (theCell.isKindOfClass(OS.class_NSButtonCell)) {", "+\t\t// Allow tracking of the checkbox area of the button, not the text itself.", "+\t\tint columnIndex = 0;", "+\t\tfor (int i=0; i<columnCount; i++) {", "+\t\t\tif (columns [i].nsColumn.id == tableColumn) {", "+\t\t\t\tcolumnIndex = i;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\tNSRect cellFrame = tableView.frameOfCellAtColumn(columnIndex, rowIndex);", "+\t\tNSRect imageFrame = theCell.imageRectForBounds(cellFrame);", "+\t\tNSPoint hitPoint = tableView.convertPoint_fromView_(NSApplication.sharedApplication().currentEvent().locationInWindow(), null);", "+\t\tboolean shouldTrack = OS.NSPointInRect(hitPoint, imageFrame) && (display.trackedButtonRow == -1 || display.trackedButtonRow == rowIndex) && !didSelect;", "+\t\tif (OS.NSPointInRect(hitPoint, imageFrame) && display.trackedButtonRow == -1 && !didSelect) display.trackedButtonRow = rowIndex;", "+\t\treturn shouldTrack;", "+\t} else {", "+\t\treturn tableView.isRowSelected(rowIndex);", "+\t}", "+}"]}], "num": 58254}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7495ff92de9a29d523d6292f5ba8ada8", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0ec01fccfc22b3816910634cc199263", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java", "commitBeforeChange": "3662db272ba3f22c265ccb33ec1d70dc00da152e", "commitAfterChange": "122ce28aad692005501429b7470da4d056e90df6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  @Test public void test_ConstructorIIILorg_eclipse_swt_graphics_PaletteDataI$B()", "signatureAfterChange": "  @Test public void test_ConstructorIIILorg_eclipse_swt_graphics_PaletteDataI$B()", "diff": ["-\t\tnew ImageData(-1, 1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, validData);", "+\t\tnew ImageData(-1, 1, 1, new PaletteData(new RGB(0, 0, 0)), 1, validData);", "-\t\tnew ImageData(1, -1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, validData);", "+\t\tnew ImageData(1, -1, 1, new PaletteData(new RGB(0, 0, 0)), 1, validData);", "-\t\tnew ImageData(1, 1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, null);", "+\t\tnew ImageData(1, 1, 1, new PaletteData(new RGB(0, 0, 0)), 1, null);", "-\t\tnew ImageData(1, 1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {});", "+\t\tnew ImageData(1, 1, 1, new PaletteData(new RGB(0, 0, 0)), 1, new byte[] {});", "-\t\tnew ImageData(1, 1, 16, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {0x4f});", "+\t\tnew ImageData(1, 1, 16, new PaletteData(new RGB(0, 0, 0)), 1, new byte[] {0x4f});", "-\t\tnew ImageData(1, 1, 32, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {0x4f, 0x4f});", "+\t\tnew ImageData(1, 1, 32, new PaletteData(new RGB(0, 0, 0)), 1, new byte[] {0x4f, 0x4f});", "-\t\tnew ImageData(2, 2, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {0x4f, 0x4f, 0x4f});", "+\t\tnew ImageData(2, 2, 8, new PaletteData(new RGB(0, 0, 0)), 1, new byte[] {0x4f, 0x4f, 0x4f});", "-\t\tnew ImageData(1, 1, 3, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, validData);", "+\t\tnew ImageData(1, 1, 3, new PaletteData(new RGB(0, 0, 0)), 1, validData);", "-\t\tnew ImageData(1, 1, validDepths[i], new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, validData);", "+\t\tnew ImageData(1, 1, validDepths[i], new PaletteData(new RGB(0, 0, 0)), 1, validData);", "-\t\tnew ImageData(1, 1, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 0, validData);", "+\t\tnew ImageData(1, 1, 8, new PaletteData(new RGB(0, 0, 0)), 0, validData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0ca2dc90753c34676cdb25044712999", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Image.java", "commitBeforeChange": "c8c3b0d56ac96eed1deeae3cbebb069fecdd4ef9", "commitAfterChange": "db54bb9c515ce97cb7d05101b9fa91b631d7bee5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLorg_eclipse_swt_graphics_ImageDataLorg_eclipse_swt_graphics_ImageData()", "signatureAfterChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLorg_eclipse_swt_graphics_ImageDataLorg_eclipse_swt_graphics_ImageData()", "diff": ["+\tImageData data = null;", "+\tImageData data1 = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\tImage image = null;", "+\t", "+\ttry {", "+\t\timage = new Image(display, data, data1);", "+\t\timage.dispose();", "+\t\tfail(\"No exception thrown for ImageData source == null\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\tdata = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\tdata1 = null;", "+\ttry {", "+\t\timage = new Image(display, data, data1);", "+\t\timage.dispose();", "+\t\tfail(\"No exception thrown for ImageData mask == null\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\tdata = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\tdata1 = new ImageData(1, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\ttry {", "+\t\timage = new Image(display, data, data1);", "+\t\timage.dispose();", "+\t\tfail(\"No exception thrown for ImageData source width != ImageData mask width\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\tdata = new ImageData(10, 1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\tdata1 = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\ttry {", "+\t\timage = new Image(display, data, data1);", "+\t\timage.dispose();", "+\t\tfail(\"No exception thrown for ImageData source height != ImageData mask height\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\tdata = new ImageData(10, 10, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\tdata1 = new ImageData(10, 10, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\ttry {", "+\t\timage = new Image(display, data, data1);", "+\t\timage.dispose();", "+\t\tfail(\"No exception thrown for ImageData mask color depth != 1\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\t// This test isn't finished yet, don't remove until it is!  Should test mask support."]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6cba748d53850bb0367b73318e1e4301", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java", "commitBeforeChange": "c8c3b0d56ac96eed1deeae3cbebb069fecdd4ef9", "commitAfterChange": "db54bb9c515ce97cb7d05101b9fa91b631d7bee5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void test_ConstructorIIILorg_eclipse_swt_graphics_PaletteDataI$B()", "signatureAfterChange": "  public void test_ConstructorIIILorg_eclipse_swt_graphics_PaletteDataI$B()", "diff": ["-", "-public void test_ConstructorIIILorg_eclipse_swt_graphics_PaletteDataI$B() {", "-\t// illegal argument, width < 0", "-\t\tnew ImageData(-1, 1, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 4, new byte[] {});", "-\t// illegal argument, height < 0", "-\t\tnew ImageData(1, -1, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 4, new byte[] {});", "-\t// illegal argument, depth != 1, 2, 4, 8, 16, 24 or 32", "-\t\tnew ImageData(1, 1, 7, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 4, new byte[] {});", "-\t\tfail(\"No exception thrown for depth != 1, 2, 4, 8, 16, 24 or 32\");", "-\t// illegal argument, palette is null", "-\t\tnew ImageData(1, 1, 8, null, 4, new byte[] {});", "-\t\tfail(\"No exception thrown for null palette\");", "+", "+public void test_ConstructorIIILorg_eclipse_swt_graphics_PaletteDataI$B() {", "+\ttry {", "+\t\tnew ImageData(-1, 1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {});", "+\t\tfail(\"No exception thrown for width < 0\");", "+\ttry {", "+\t\tnew ImageData(1, -1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {});", "+\t\tfail(\"No exception thrown for height < 0\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\ttry {", "+\t\tnew ImageData(1, 1, 1, null, 0, new byte[] {});", "+\t\tfail(\"No exception thrown for paletteData == null\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\ttry {", "+\t\tnew ImageData(1, 1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, null);", "+\t\tfail(\"No exception thrown for data == null\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\ttry {", "+\t\tnew ImageData(1, 1, 3, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {});", "+\t\tfail(\"No exception thrown for unsupported depth\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+\t", "+\tint[] validDepths = {1, 2, 4, 8, 16, 24, 32};", "+\tfor (int i = 0; i < validDepths.length; i++) {", "+\t\tnew ImageData(1, 1, validDepths[i], new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {});", "+\t};", "+\t", "-", "-\t// illegal argument, scanlinePad == 0", "+\t", "+\t// divide by zero exception if scanlinePad == 0"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89b293a814d05564fd2643f2d1aebd04", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java", "commitBeforeChange": "afba14f47eff5cdb3ffc5e31f34548950bea4512", "commitAfterChange": "53807038c50282048aeefad597ad634fe317aa27", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void test_ConstructorIIILorg_eclipse_swt_graphics_PaletteDataI$B()", "signatureAfterChange": "  public void test_ConstructorIIILorg_eclipse_swt_graphics_PaletteDataI$B()", "diff": ["-\twarnUnimpl(\"Test test_ConstructorIIILorg_eclipse_swt_graphics_PaletteDataI$B not written\");", "+\t// illegal argument, width < 0", "+\ttry {", "+\t\tnew ImageData(-1, 1, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 4, new byte[] {});", "+\t\tfail(\"No exception thrown for width < 0\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\t// illegal argument, height < 0", "+\ttry {", "+\t\tnew ImageData(1, -1, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 4, new byte[] {});", "+\t\tfail(\"No exception thrown for height < 0\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\t// illegal argument, depth != 1, 2, 4, 8, 16, 24 or 32", "+\ttry {", "+\t\tnew ImageData(1, 1, 7, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 4, new byte[] {});", "+\t\tfail(\"No exception thrown for depth != 1, 2, 4, 8, 16, 24 or 32\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\t// illegal argument, palette is null", "+\ttry {", "+\t\tnew ImageData(1, 1, 8, null, 4, new byte[] {});", "+\t\tfail(\"No exception thrown for null palette\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\t// illegal argument, data is null", "+\ttry {", "+\t\tnew ImageData(1, 1, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 4, null);", "+\t\tfail(\"No exception thrown for null data\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\t// illegal argument, scanlinePad == 0", "+\ttry {", "+\t\tnew ImageData(1, 1, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 0, new byte[] {});", "+\t\tfail(\"No exception thrown for scanlinePad == 0\");", "+\t} catch (IllegalArgumentException e) {", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14b39124c6bae97214df5259ca0c873e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Image.java", "commitBeforeChange": "3662db272ba3f22c265ccb33ec1d70dc00da152e", "commitAfterChange": "122ce28aad692005501429b7470da4d056e90df6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  @Test public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLorg_eclipse_swt_graphics_ImageDataLorg_eclipse_swt_graphics_ImageData()", "signatureAfterChange": "  @Test public void test_ConstructorLorg_eclipse_swt_graphics_DeviceLorg_eclipse_swt_graphics_ImageDataLorg_eclipse_swt_graphics_ImageData()", "diff": ["-\tImageData data1 = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\tImageData data1 = new ImageData(10, 10, 1, new PaletteData(new RGB(0, 0, 0)));", "-\tdata = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\tdata = new ImageData(10, 10, 1, new PaletteData(new RGB(0, 0, 0)));", "-\tdata = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "-\tdata1 = new ImageData(1, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\tdata = new ImageData(10, 10, 1, new PaletteData(new RGB(0, 0, 0)));", "+\tdata1 = new ImageData(1, 10, 1, new PaletteData(new RGB(0, 0, 0)));", "-\tdata = new ImageData(10, 1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "-\tdata1 = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\tdata = new ImageData(10, 1, 1, new PaletteData(new RGB(0, 0, 0)));", "+\tdata1 = new ImageData(10, 10, 1, new PaletteData(new RGB(0, 0, 0)));", "-\tdata = new ImageData(10, 10, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "-\tdata1 = new ImageData(10, 10, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}));", "+\tdata = new ImageData(10, 10, 8, new PaletteData(new RGB(0, 0, 0)));", "+\tdata1 = new ImageData(10, 10, 8, new PaletteData(new RGB(0, 0, 0)));", "-\tdata1 = new ImageData(10, 10, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0), new RGB(255, 255, 255)}));", "+\tdata1 = new ImageData(10, 10, 1, new PaletteData(new RGB(0, 0, 0), new RGB(255, 255, 255)));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdd8a4e1b5f374a872bf46f270e4a072", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java", "commitBeforeChange": "fe260d54c4731861d4b67096b0a0278dfb8bbb94", "commitAfterChange": "4102fdcf3ccacda6c1d64a2cea030a4503d7a339", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void test_ConstructorIIILorg_eclipse_swt_graphics_PaletteDataI$B()", "signatureAfterChange": "  public void test_ConstructorIIILorg_eclipse_swt_graphics_PaletteDataI$B()", "diff": ["+\tbyte[] validData = new byte[] {0, 0x4f, 0x4f, 0};", "+\t", "-\t\tnew ImageData(-1, 1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {});", "+\t\tnew ImageData(-1, 1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, validData);", "-\t\tnew ImageData(1, -1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {});", "+\t\tnew ImageData(1, -1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, validData);", "-\t\tnew ImageData(1, 1, 1, null, 0, new byte[] {});", "+\t\tnew ImageData(1, 1, 1, null, 0, validData);", "-\t\tnew ImageData(1, 1, 3, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {});", "+\t\tnew ImageData(1, 1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {});", "+\t\tfail(\"No exception thrown for data array too small\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\ttry {", "+\t\tnew ImageData(1, 1, 16, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {0x4f});", "+\t\tfail(\"No exception thrown for data array too small\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\ttry {", "+\t\tnew ImageData(1, 1, 32, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {0x4f, 0x4f});", "+\t\tfail(\"No exception thrown for data array too small\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\ttry {", "+\t\tnew ImageData(2, 2, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {0x4f, 0x4f, 0x4f});", "+\t\tfail(\"No exception thrown for data array too small\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\ttry {", "+\t\tnew ImageData(1, 1, 3, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, validData);", "+\t// verify all valid depths", "-\t\tnew ImageData(1, 1, validDepths[i], new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {});", "+\t\tnew ImageData(1, 1, validDepths[i], new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, validData);", "-\t// illegal argument, data is null", "+\t// verify no divide by zero exception if scanlinePad == 0", "-\t\tnew ImageData(1, 1, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 4, null);", "-\t\tfail(\"No exception thrown for null data\");", "-\t} catch (IllegalArgumentException e) {", "-\t}", "-\t", "-\t// divide by zero exception if scanlinePad == 0", "-\ttry {", "-\t\tnew ImageData(1, 1, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 0, new byte[] {});", "+\t\tnew ImageData(1, 1, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 0, validData);"]}], "num": 43576}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32c297f5bea35b344fe088c913487c57", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b54c16944e238d0e3fdce870e87c387d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "e7fb43dbb2484659429530f9cab714cb6e3de9f3", "commitAfterChange": "d69b8bce251422ebdcfdac8edd7d2bcf938dfebd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r public static Program [] getPrograms ()", "signatureAfterChange": " private static Program[] getPrograms( Display display )", "diff": ["- */\r", "-public static Program [] getPrograms () {\r", "-\tswitch (Desktop) {\r", "-\t\tcase DESKTOP_KDE:\r", "-\t\t\treturn new Program[0]; // TBD\r", "-\r", "-\t\tcase DESKTOP_GNOME:\r", "-\t\t\t// Obtain the mime type/extension information.\r", "-\t\t\tHashtable mimeInfo = gnome_getMimeInfo();\r", "-\t\t\tVector programs = new Vector();\r", "-\t\t\t\r", "-\t\t\t// Create a list of programs with commands.\r", "-\t\t\tIterator keys = mimeInfo.keySet().iterator();\r", "-\t\t\twhile (keys.hasNext()) {\r", "-\t\t\t\tString mimeType  = (String) keys.next();\r", "-\t\t\t\tString extension = \"\";\r", "-\t\t\t\tVector mimeExts  = (Vector) mimeInfo.get( mimeType );\r", "-\t\t\t\tif (mimeExts.size() > 0){\r", "-\t\t\t\t\textension = (String) mimeExts.elementAt( 0 );\r", "-\t\t\t\t}\r", "-\t\t\t\tString command  = gnome_getMimeValue( mimeType, \"open\" );\r", "-\t\t\t\tif (command != null) {\r", "-\t\t\t\t\tProgram program   = new Program ();\r", "-\t\t\t\t\tprogram.name      = mimeType;\r", "-\t\t\t\t\tprogram.command   = command;\r", "-\t\t\t\t\tprogram.extension = extension;\r", "-\t\t\t\t\tprograms.add( program );\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\t// Return the list of programs to the user.\r", "-\t\t\tProgram[] programList = new Program[ programs.size() ];\r", "-\t\t\tfor (int index = 0; index < programList.length; index++) {\r", "-\t\t\t\tprogramList[ index ] = (Program) programs.elementAt( index );\r", "-\t\t\t}\r", "-\t\t\treturn programList;\r", "-\t}\r", "-\treturn new Program[0];\r", "-}\r", "+ */", "+private static Program[] getPrograms( Display display ) {", "+\tint desktop = getDesktop( display );", "+\tHashtable mimeInfo = null;", "+\tif (desktop == DESKTOP_KDE)   mimeInfo = kde_getMimeInfo();", "+\tif (desktop == DESKTOP_GNOME) mimeInfo = gnome_getMimeInfo();", "+\tif (desktop == DESKTOP_CDE)   mimeInfo = cde_getDataTypeInfo();", "+\tif (mimeInfo == null) return new Program[0];", "+\t\t\t", "+\t// Create a list of programs with commands.", "+\tVector programs = new Vector();", "+\tIterator keys = mimeInfo.keySet().iterator();", "+\twhile (keys.hasNext()) {", "+\t\tString mimeType  = (String) keys.next();", "+\t\tVector mimeExts  = (Vector) mimeInfo.get( mimeType );", "+\t\tString extension = \"\";", "+\t\tif (mimeExts.size() > 0){", "+\t\t\textension = (String) mimeExts.elementAt( 0 );", "+\t\t}", "+\t\tString command = null;", "+\t\tif (desktop == DESKTOP_KDE)   command = kde_getMimeTypeCommand( mimeType );", "+\t\tif (desktop == DESKTOP_GNOME) command = gnome_getMimeValue( mimeType, \"open\" );", "+\t\tif (desktop == DESKTOP_CDE)   command = cde_getAction( mimeType );", "+\t\tif (command != null) {", "+\t\t\tProgram program   = new Program ();", "+\t\t\tprogram.name      = mimeType;", "+\t\t\tprogram.command   = command;", "+\t\t\tprogram.extension = extension;", "+\t\t\tprogram.display   = display;", "+\t\t\tprograms.add( program );", "+\t\t}", "+\t}", "+\t\t\t", "+\t// Return the list of programs to the user.", "+\tProgram[] programList = new Program[ programs.size() ];", "+\tfor (int index = 0; index < programList.length; index++) {", "+\t\tprogramList[ index ] = (Program) programs.elementAt( index );", "+\t}", "+\treturn programList;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "407f200399779fed38b775778abbf1b1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "e7fb43dbb2484659429530f9cab714cb6e3de9f3", "commitAfterChange": "d69b8bce251422ebdcfdac8edd7d2bcf938dfebd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public static Program findProgram (String extension)", "signatureAfterChange": " private static Program findProgram( Display display, String extension )", "diff": ["- */\r", "-public static Program findProgram (String extension) {\r", "-\tif (extension == null) SWT.error (SWT.ERROR_NULL_ARGUMENT);\r", "-\tif (extension.length () == 0) return null;\r", "-\tif (extension.charAt (0) != '.') extension = \".\" + extension;\r", "-\tString command = null;\r", "-\tString name = \"\";\r", "-\tswitch (Desktop) {\r", "-\t\tcase DESKTOP_KDE: {\r", "-\t\t\tString urlString = \"file://any.\" + extension;\r", "-\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, urlString, true);\r", "-\t\t\tint qString = KDE.QString_new (buffer);\r", "-\t\t\tint url = KDE.KURL_new (qString);\r", "-\t\t\tKDE.QString_delete (qString);\r", "-\t\t\tint mimeType = KDE.KMimeType_findByURL (url);\r", "-\t\t\tint mimeName = KDE.KMimeType_name (mimeType);\r", "-\t\t\tint service = KDE.KServiceTypeProfile_preferredService (mimeName, 1);\r", "-\t\t\tif (service == 0) return null;\r", "-\t\t\tint execQString = KDE.KService_exec (service);\r", "-\t\t\tcommand = kde_convertQStringAndFree (execQString);\r", "-\t\t\tbreak;\t\r", "-\t\t}\r", "-\t\t\r", "-\t\tcase DESKTOP_GNOME: {\r", "-\t\t\tString fileName = \"file\" + extension;\r", "-\t\t\tString mimeType = gnome_getMimeType (fileName);\r", "-\t\t\tif (mimeType == null) return null;\r", "-\t\t\tcommand = gnome_getMimeValue (mimeType, \"open\");\r", "-\t\t\tif (command == null) return null;\r", "-\t\t\tname = mimeType;\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t\t\r", "-\t\tcase DESKTOP_UNKNOWN:\r", "-\t\t\treturn null;\r", "-\t}\r", "-\tProgram program   = new Program ();\r", "-\tprogram.name      = name;\r", "-\tprogram.command   = command;\r", "-\tprogram.extension = extension;\r", "-\treturn program;\r", "-}\r", "+ */", "+private static Program findProgram( Display display, String extension ) {", "+\tif (extension == null) SWT.error (SWT.ERROR_NULL_ARGUMENT);", "+\tif (extension.length () == 0) return null;", "+\tif (extension.charAt (0) != '.') extension = \".\" + extension;", "+\tString command = null;", "+\tString name = null;", "+\tint desktop = getDesktop( display );", "+\tHashtable mimeInfo = null;", "+\tif (desktop == DESKTOP_KDE)   mimeInfo = kde_getMimeInfo();", "+\tif (desktop == DESKTOP_GNOME) mimeInfo = gnome_getMimeInfo();", "+\tif (desktop == DESKTOP_CDE)   mimeInfo = cde_getDataTypeInfo();", "+\tif (mimeInfo == null) return null;", "+", "+\t// Find the data type matching the extension.", "+\tIterator keys = mimeInfo.keySet().iterator();", "+\twhile (name == null && keys.hasNext()) {", "+\t\tString mimeType = (String) keys.next();", "+\t\tVector mimeExts = (Vector) mimeInfo.get( mimeType );", "+\t\tfor (int index = 0; index < mimeExts.size(); index++){", "+\t\t\tif (extension.equals( mimeExts.elementAt( index ) )) {", "+\t\t\t\tname = mimeType;", "+\t\t\t}", "+\t\t}", "+\t}\t\t\t", "+\tif (name == null) return null;", "+", "+\t// Get the corresponding command for the mime type.", "+\tif (desktop == DESKTOP_KDE)   command = kde_getMimeTypeCommand( name );", "+\tif (desktop == DESKTOP_GNOME) command = gnome_getMimeValue( name, \"open\" );", "+\tif (desktop == DESKTOP_CDE)   command = cde_getAction( name );", "+\tif (command == null) return null;", "+\t", "+\t// Return the corresponding program.", "+\tProgram program   = new Program ();", "+\tprogram.name      = name;", "+\tprogram.command   = command;", "+\tprogram.extension = extension;", "+\tprogram.display   = display;", "+\treturn program;", "+}"]}], "num": 18818}
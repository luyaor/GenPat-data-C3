{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ff062c95f8303c003486778ee50cf7c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf235eb348e23bf9798a4b6c18c86311", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "5828e618d89f52d302bbc1b001ae51d18c45a2b5", "commitAfterChange": "43c4ce59c798a81fc47668e77a2fe8939fcf3cc8", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 113, "signatureBeforeChange": "  String toolTipText (NMTTDISPINFO hdr)", "signatureAfterChange": "  String toolTipText (NMTTDISPINFO hdr)", "diff": ["-\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\tint count = OS.SendMessage(hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t}", "+\t\treturn super.toolTipText (hdr);", "+\t}", "+\tif (itemToolTipHandle == hdr.hwndFrom && hwndHeader != 0) {", "+\t\tint pos = OS.GetMessagePos ();", "+\t\tPOINT pt = new POINT();", "+\t\tpt.x = (short) (pos & 0xFFFF);", "+\t\tpt.y = (short) (pos >> 16);", "+\t\tOS.ScreenToClient (handle, pt);", "+\t\tTVHITTESTINFO lpht = new TVHITTESTINFO ();", "+\t\tlpht.x = pt.x;", "+\t\tlpht.y = pt.y;", "+\t\tOS.SendMessage (handle, OS.TVM_HITTEST, 0, lpht);", "+\t\tif (lpht.hItem != 0) {", "+\t\t\tint hDC = OS.GetDC (handle);", "+\t\t\tint oldFont = 0, newFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "+\t\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.GetClientRect (hwndParent, rect);", "+\t\t\tOS.MapWindowPoints (hwndParent, handle, rect, 2);", "+\t\t\tTreeItem item = _getItem (lpht.hItem);", "+\t\t\tString text = null;", "+\t\t\tint index = 0, count = Math.max (1, OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0));", "+\t\t\tint [] order = new int [count];", "+\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETORDERARRAY, count, order);", "+\t\t\twhile (index < count) {", "+\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [order [index]] : -1;", "+\t\t\t\tif (hFont == -1) hFont = item.font;", "+\t\t\t\tif (hFont != -1) hFont = OS.SelectObject (hDC, hFont);", "+\t\t\t\tRECT cellRect = item.getBounds (order [index], true, false, true, false, true, hDC);", "+\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "+\t\t\t\tif (cellRect.left > rect.right) break;", "+\t\t\t\tcellRect.right = Math.min (cellRect.right, rect.right);", "+\t\t\t\tif (OS.PtInRect (cellRect, pt)) {", "+\t\t\t\t\tRECT textRect = item.getBounds (order [index], true, false, false, false, false, hDC);", "+\t\t\t\t\tif (textRect.right > cellRect.right) {", "+\t\t\t\t\t\tif (order [index] == 0) {", "+\t\t\t\t\t\t\ttext = item.text;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tString[] strings = item.strings;", "+\t\t\t\t\t\t\tif (strings != null) text = strings [order [index]];", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tindex++;", "+\t\t\t}", "+\t\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "+\t\t\tOS.ReleaseDC (handle, hDC);", "+\t\t\tif (text != null) return text;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0d03bb47d1b05e7c542fdabeb907253", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "5828e618d89f52d302bbc1b001ae51d18c45a2b5", "commitAfterChange": "43c4ce59c798a81fc47668e77a2fe8939fcf3cc8", "methodNumberBeforeChange": 132, "methodNumberAfterChange": 134, "signatureBeforeChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "diff": ["-\tif (hwndHeader != 0 && hdr.hwndFrom == hwndHeader) {", "+\tif (hdr.hwndFrom == itemToolTipHandle && hwndHeader != 0) {", "+\t\tif (!OS.IsWinCE) {", "+\t\t\tswitch (hdr.code) {", "+\t\t\t\tcase OS.TTN_SHOW: {", "+\t\t\t\t\tint pos = OS.GetMessagePos ();", "+\t\t\t\t\tPOINT pt = new POINT();", "+\t\t\t\t\tpt.x = (short) (pos & 0xFFFF);", "+\t\t\t\t\tpt.y = (short) (pos >> 16);", "+\t\t\t\t\tOS.ScreenToClient (handle, pt);", "+\t\t\t\t\tTVHITTESTINFO lpht = new TVHITTESTINFO ();", "+\t\t\t\t\tlpht.x = pt.x;", "+\t\t\t\t\tlpht.y = pt.y;", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_HITTEST, 0, lpht);", "+\t\t\t\t\tif (lpht.hItem != 0) {", "+\t\t\t\t\t\tint hDC = OS.GetDC (handle);", "+\t\t\t\t\t\tint oldFont = 0, newFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "+\t\t\t\t\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "+\t\t\t\t\t\tLRESULT result = null;", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tOS.GetClientRect (hwndParent, rect);", "+\t\t\t\t\t\tOS.MapWindowPoints (hwndParent, handle, rect, 2);", "+\t\t\t\t\t\tTreeItem item = _getItem (lpht.hItem);", "+\t\t\t\t\t\tint index = 0, count = Math.max (1, OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0));", "+\t\t\t\t\t\tint [] order = new int [count];", "+\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETORDERARRAY, count, order);", "+\t\t\t\t\t\twhile (index < count) {", "+\t\t\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [order [index]] : -1;", "+\t\t\t\t\t\t\tif (hFont == -1) hFont = item.font;", "+\t\t\t\t\t\t\tif (hFont != -1) hFont = OS.SelectObject (hDC, hFont);", "+\t\t\t\t\t\t\tRECT cellRect = item.getBounds (order [index], true, false, true, false, true, hDC);", "+\t\t\t\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "+\t\t\t\t\t\t\tif (cellRect.left > rect.right) break;", "+\t\t\t\t\t\t\tcellRect.right = Math.min (cellRect.right, rect.right);", "+\t\t\t\t\t\t\tif (OS.PtInRect (cellRect, pt)) {", "+\t\t\t\t\t\t\t\tRECT textRect = item.getBounds (order [index], true, false, false, false, false, hDC);", "+\t\t\t\t\t\t\t\tif (textRect.right > cellRect.right) {", "+\t\t\t\t\t\t\t\t\tOS.MapWindowPoints (handle, 0, textRect, 2);", "+\t\t\t\t\t\t\t\t\tint flags = OS.SWP_NOACTIVATE | OS.SWP_NOSIZE | OS.SWP_NOZORDER;", "+\t\t\t\t\t\t\t\t\tSetWindowPos (itemToolTipHandle, 0, textRect.left, textRect.top, 0, 0, flags);", "+\t\t\t\t\t\t\t\t\tresult = LRESULT.ONE;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tindex++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "+\t\t\t\t\t\tOS.ReleaseDC (handle, hDC);", "+\t\t\t\t\t\tif (result != null) return result;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (hdr.hwndFrom == hwndHeader) {"]}], "num": 6081}
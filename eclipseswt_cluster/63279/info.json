{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "091de76a885e5ff3de74e906650adf40", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4abd90d35d3c5184a2bdaa8bfb36f383", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_program_Program.java", "commitBeforeChange": "2272262fa1ad2a17677f9473dd0c94e9b168217c", "commitAfterChange": "66413abed4d13d9d98291abd8415d641f3043b15", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void test_getPrograms()", "signatureAfterChange": "  public void test_getPrograms()", "diff": ["-\twarnUnimpl(\"Test test_getPrograms not written\");", "+\tProgram[] programs = Program.getPrograms();", "+\t", "+\t// The result is not well-documented, but it should ", "+\t// be non-null and contain no null entries.", "+\t", "+\tassertNotNull(programs);", "+\t", "+\tHashtable lookup = new Hashtable();", "+\tfor (int i=0; i<programs.length; i++) {", "+\t\t", "+\t\t// test non-null entry", "+\t\tassertNotNull(programs[i]);", "+\t\t", "+\t\t// test unique hash code", "+\t\tint hashCode = programs[i].hashCode();", "+\t\tInteger key = new Integer(hashCode);", "+\t\tif (lookup.contains(key)) {", "+\t\t\tfail(\"Duplicate hash code for \"+programs[i]+\" (same as \"+(Program)lookup.get(key)+\")\");", "+\t\t}", "+\t\telse {", "+\t\t\tlookup.put(key,programs[i]);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96c22e683eb367c9636b96bf1e582a61", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_program_Program.java", "commitBeforeChange": "2272262fa1ad2a17677f9473dd0c94e9b168217c", "commitAfterChange": "66413abed4d13d9d98291abd8415d641f3043b15", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public void test_launchLjava_lang_String()", "signatureAfterChange": "  public void test_launchLjava_lang_String()", "diff": ["-\twarnUnimpl(\"Test test_launchLjava_lang_String not written\");", "+", "+\t// This test is incomplete because a true test of launch would open", "+\t// an application that cannot be programmatically closed.", "+\t", "+\t// Cannot test empty string argument because it may launch something.", "+\t", "+\t// test null argument", "+\t", "+\ttry {", "+\t\tProgram.launch(null);", "+\t\tfail(\"Failed to throw ERROR_NULL_ARGUMENT\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Failed to throw ERROR_NULL_ARGUMENT\", SWT.ERROR_NULL_ARGUMENT, e);", "+\t} catch (Exception e) {", "+\t\tfail(\"Invalid Exception thrown of type \"+e.getClass());", "+\t} catch (Error e) {", "+\t\tfail(\"Invalid Error thrown of type \"+e.getClass());", "+\t}"]}], "num": 63279}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "386b0bb69840683ac4debef84490e4d3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c98cd3c2c79e2e1575958fe4466db7d7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "d0c3def3c272326b223c16d9ee781437fa47dfea", "commitAfterChange": "44f4d2e58cfc39923e1bdf065af332dedb6d340a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\t\tshell.setData(BROWSER_COCOA_BUTTON, \"true\");", "+\t\t\tshell.setData(BROWSER_COCOA_BUTTON, \"true\"); //$NON-NLS-1$", "-\t* Note that when reparent the browser is reparented, the web view has to", "-\t* be reparent by hand by hooking kEventControlOwningWindowChanged.", "+\t* Note that when the browser is reparented, the web view has to", "+\t* be reparented by hand by hooking kEventControlOwningWindowChanged.", "+\t\t\t\tcase SWT.Activate: {", "+\t\t\t\t\tCocoa.objc_msgSend(Cocoa.objc_msgSend(Cocoa.HIWebViewGetWebView(webViewHandle), Cocoa.S_window), Cocoa.S_makeKeyWindow);", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tcase SWT.FocusIn: {", "+\t\t\t\t\tOS.SetKeyboardFocus(OS.GetControlOwner(browser.handle), webViewHandle, (short)-1);", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\tbrowser.addListener(SWT.FocusIn, listener);", "+\tbrowser.addListener(SWT.KeyDown, listener); /* needed to make browser traversable */", "+\tbrowser.getShell().addListener(SWT.Activate, listener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f76d1af82f8e9f7686bddbbd9b1b2f4a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "fb9d25eca2faaefc0b679b2b873bc3c293a708b5", "commitAfterChange": "239af00ad19b62a2febeb66befdd335386d538ac", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create(Composite parent, int style)", "signatureAfterChange": "  public void create(Composite parent, int style)", "diff": ["+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\t/* ", "+\t\t\t\t * FocusIn and Traverse are hooked to handle traversal into", "+\t\t\t\t * and out of the Browser when it has key listeners.", "+\t\t\t\t */", "+\t\t\t\tcase SWT.FocusIn: {", "+\t\t\t\t\tsite.setFocus();", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tcase SWT.Traverse: {", "+\t\t\t\t\tif (browser.isListening(SWT.KeyDown) || browser.isListening(SWT.KeyUp)) {", "+\t\t\t\t\t\tif (e.detail == SWT.TRAVERSE_TAB_PREVIOUS) {", "+\t\t\t\t\t\t\tbrowser.traverse(SWT.TRAVERSE_TAB_PREVIOUS);", "+\t\t\t\t\t\t\te.doit = false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\tbrowser.addListener(SWT.FocusIn, listener);", "-\t", "+\tsite.addListener(SWT.Traverse, listener);", "+"]}], "num": 52704}
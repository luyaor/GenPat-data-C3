{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bede3089e8393ea8fc6a4c11ac1cac54", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01d19c2131204524069872385684c154", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/mozilla/org/eclipse/swt/internal/mozilla/XPCOMObject.java", "commitBeforeChange": "4cc5ca7de1624c8b539a57f5d1339651e93d2a21", "commitAfterChange": "6c47784c5a7b45e769c078aad8b37a11143d5176", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public XPCOMObject(int[] argCounts)", "signatureAfterChange": " \t public XPCOMObject(int[] argCounts)", "diff": ["-\tint[] callbackAddresses = new int[argCounts.length];", "+\tint /*long*/[] callbackAddresses = new int /*long*/[argCounts.length];", "-\t\t/*", "-\t\t* Note. The following code compiles without warning on a ", "-\t\t* 64 bit platform but won't run. ", "-\t\t*/", "-\t\tcallbackAddresses[i] = (int)/*64*/Callbacks[i][argCounts[i]].getAddress();", "+\t\tcallbackAddresses[i] = Callbacks[i][argCounts[i]].getAddress();", "-\tint pVtable = XPCOM.PR_Malloc(4 * argCounts.length);", "-\tXPCOM.memmove(pVtable, callbackAddresses, 4 * argCounts.length);", "-\tppVtable = XPCOM.PR_Malloc(4);", "-\tXPCOM.memmove(ppVtable, new int[] {pVtable}, 4);", "-\tObjectMap.put(new Integer(ppVtable), this);", "+\tint /*long*/ pVtable = XPCOM.PR_Malloc(OS.PTR_SIZEOF * argCounts.length);", "+\tXPCOM.memmove(pVtable, callbackAddresses, OS.PTR_SIZEOF * argCounts.length);", "+\tppVtable = XPCOM.PR_Malloc(OS.PTR_SIZEOF);", "+\tXPCOM.memmove(ppVtable, new int /*long*/[] {pVtable}, OS.PTR_SIZEOF);", "+\tObjectMap.put(new LONG(ppVtable), this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "798edf621089d113e0d990e7f03e1cb3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/mozilla/org/eclipse/swt/internal/mozilla/XPCOMObject.java", "commitBeforeChange": "a6131ac9e2d912fd79a498410994704f80907b17", "commitAfterChange": "e758c60c4fb72428ae282ccc25e3e75b0adf65c4", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public XPCOMObject(int[] argCounts)", "signatureAfterChange": " \t public XPCOMObject (int[] argCounts)", "diff": ["-public XPCOMObject(int[] argCounts) {", "+public XPCOMObject (int[] argCounts) {", "-\t\t\tCallbacks[i][argCounts[i]] = new Callback(this.getClass(), \"callback\"+i, argCounts[i] + 1, true); //$NON-NLS-1$", "+\t\t\tCallbacks[i][argCounts[i]] = new Callback (getClass (), \"callback\"+i, argCounts[i] + 1, true); //$NON-NLS-1$", "-\t\tcallbackAddresses[i] = Callbacks[i][argCounts[i]].getAddress();", "+\t\tcallbackAddresses[i] = Callbacks[i][argCounts[i]].getAddress ();", "-\tint /*long*/ pVtable = OS.g_malloc(OS.PTR_SIZEOF * argCounts.length);", "-\tXPCOM.memmove(pVtable, callbackAddresses, OS.PTR_SIZEOF * argCounts.length);", "-\tppVtable = OS.g_malloc(OS.PTR_SIZEOF);", "-\tXPCOM.memmove(ppVtable, new int /*long*/[] {pVtable}, OS.PTR_SIZEOF);", "-\tObjectMap.put(new LONG(ppVtable), this);", "+\tint /*long*/ pVtable = C.malloc (C.PTR_SIZEOF * argCounts.length);", "+\tXPCOM.memmove (pVtable, callbackAddresses, C.PTR_SIZEOF * argCounts.length);", "+\tppVtable = C.malloc (C.PTR_SIZEOF);", "+\tXPCOM.memmove (ppVtable, new int /*long*/[] {pVtable}, C.PTR_SIZEOF);", "+\tObjectMap.put (new LONG (ppVtable), this);"]}], "num": 56119}
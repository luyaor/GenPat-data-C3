{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a77a4536500d8804e66728247fbdbd4a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "198d5c8bb5113d73b00e4d4ba0464c08", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "8fcb69bd9ef5f3703415156d7ea495d1528c0bed", "commitAfterChange": "830f06eadee48db7328f257efefef81e6ded0f5e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 13, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": " void createHandle (int index)", "diff": ["-\tint decorations = OS.kWindowCompositingAttribute;", "-    /* AW", "+\tint windowActivationScope= -1;", "+", "+\tint decorations = OS.kWindowCompositingAttribute | OS.kWindowStandardHandlerAttribute;", "+", "+\t/* AW", "-\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.kWindowResizableAttribute | OS.kWindowLiveResizeAttribute;", "-\t\t//if ((style & SWT.BORDER) == 0) decorations |= OS.kWindowNoShadowAttribute;", "-\t//} else {", "-\t//\tdecorations |= OS.kWindowNoShadowAttribute;", "+\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.kWindowResizableAttribute;", "-    /* AW", "-\tint inputMode = OS.MWM_INPUT_MODELESS;", "-\tif ((style & SWT.PRIMARY_MODAL) != 0) inputMode = OS.MWM_INPUT_PRIMARY_APPLICATION_MODAL;", "-\tif ((style & SWT.APPLICATION_MODAL) != 0) inputMode = OS.MWM_INPUT_FULL_APPLICATION_MODAL;", "-\tif ((style & SWT.SYSTEM_MODAL) != 0) inputMode = OS.MWM_INPUT_SYSTEM_MODAL;", "-    */", "+\t// if resizable enable 'live resize'", "+\tif ((decorations & OS.kWindowResizableAttribute) != 0)", "+\t\tdecorations |= OS.kWindowLiveResizeAttribute;", "+\t", "+\t// determine modality", "-\tbyte [] appClass = display.appClass;", "-        /* AW", "-\t\tint xDisplay = display.xDisplay;", "-\t\tint widgetClass = OS.TopLevelShellWidgetClass ();", "-\t\tshellHandle = OS.XtAppCreateShell (display.appName, appClass, widgetClass, xDisplay, argList1, argList1.length / 2);", "-        */", "-\t\tif ((style & SWT.NO_TRIM) != 0)", "-\t\t\twindowClass= OS.kHelpWindowClass;", "-\t\telse {", "+\t\tif ((style & SWT.NO_TRIM) != 0) {", "+\t\t\twindowClass= OS.kSheetWindowClass;", "+\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "+\t\t} else {", "-        /* AW", "-\t\tint widgetClass = OS.TransientShellWidgetClass ();", "-//\t\tif ((style & SWT.ON_TOP) != 0) {", "-//\t\t\twidgetClass = OS.OverrideShellWidgetClass ();", "-//\t\t}", "-        */", "-\t\t\t//System.out.println(\"Shell.createHandle: SWT.NONE\");", "-\t\t\twindowClass= OS.kHelpWindowClass;", "+\t\t\twindowClass= OS.kSheetWindowClass;", "+\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "-\t\t\t//System.out.println(\"Shell.createHandle: SWT.NO_TRIM | SWT.ON_TOP\");", "-\t\t\twindowClass= OS.kHelpWindowClass;", "+\t\t\twindowClass= OS.kSheetWindowClass;", "+\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "-\t\t\t//System.out.println(\"Shell.createHandle: SWT.NO_TRIM\");", "-\t\t\twindowClass= OS.kHelpWindowClass;", "+\t\t\twindowClass= OS.kSheetWindowClass;", "+\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "-\t\t\t//System.out.println(\"Shell.createHandle: kMovableModalWindowClass\");", "-\t\t\t//System.out.println(\"Shell.createHandle: kModalWindowClass\");", "-\t\t\t//System.out.println(\"Shell.createHandle: SWT.ON_TOP\");", "-\t\t\t//windowClass= OS.kFloatingWindowClass;", "-\t\t\twindowClass= OS.kHelpWindowClass;", "+\t\t\twindowClass= OS.kSheetWindowClass;", "+\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "-\t\t\t//System.out.println(\"Shell.createHandle: kDocumentWindowClass\");", "-\t// check whether window class supports a given decoration ", "-\tif ((decorations & OS.kWindowCloseBoxAttribute) != 0 &&", "-\t\t\twindowClass != OS.kDocumentWindowClass &&", "-\t\t\t\twindowClass != OS.kFloatingWindowClass &&", "-\t\t\t\t\twindowClass != OS.kUtilityWindowClass) {", "-\t\tdecorations&= ~OS.kWindowCloseBoxAttribute;", "-\t}", "-\tif ((decorations & OS.kWindowFullZoomAttribute) != 0 &&", "-\t\t\twindowClass != OS.kDocumentWindowClass &&", "-\t\t\t\twindowClass != OS.kFloatingWindowClass &&", "-\t\t\t\t\twindowClass != OS.kUtilityWindowClass) {", "-\t\tdecorations&= ~OS.kWindowFullZoomAttribute;", "-\t}", "-\tif ((decorations & OS.kWindowCollapseBoxAttribute) != 0 &&", "-\t\t\twindowClass != OS.kDocumentWindowClass) {", "-\t\tdecorations&= ~OS.kWindowCollapseBoxAttribute;", "-\t}", "-\tif ((decorations & OS.kWindowCollapseBoxAttribute) != 0 &&", "-\t\t\twindowClass != OS.kDocumentWindowClass &&", "-\t\t\t\twindowClass != OS.kMovableModalWindowClass &&", "-\t\t\t\t\twindowClass != OS.kFloatingWindowClass &&", "-\t\t\t\t\t\twindowClass != OS.kUtilityWindowClass &&", "-\t\t\t\t\t\t\twindowClass != OS.kSheetWindowClass) {", "-\t\tdecorations&= ~OS.kWindowCollapseBoxAttribute;", "+\t// check whether window class supports a given decoration", "+\tint allowedAttr= OS.GetAvailableWindowAttributes(windowClass);", "+\tif (decorations != (decorations & allowedAttr)) {", "+\t\tSystem.out.println(\"Shell.createHandle: some attributes are not supported\");", "+\t\tdecorations&= allowedAttr;\t", "-\tif (OS.CreateNewWindow(windowClass, decorations | OS.kWindowStandardHandlerAttribute, bounds, wHandle) == OS.noErr)", "-\t\tshellHandle= wHandle[0];", "-\telse {", "-\t\tSystem.out.println(\"Shell.createHandle: can't create window with these attributes; creating default window\");", "-\t\tif (OS.CreateNewWindow(OS.kDocumentWindowClass, OS.kWindowStandardHandlerAttribute, bounds, wHandle) == OS.noErr)", "-\t\t\tshellHandle= wHandle[0];", "-\t}", "-", "+\tint rc= OS.CreateNewWindow(windowClass, decorations, bounds, wHandle);", "+\tif (rc != OS.noErr)", "+\t\tSystem.out.println(\"Shell.createHandle: can't create window: \" + rc);", "+\tshellHandle= wHandle[0];", "+\t", "+\tif (windowActivationScope != -1)\t", "+\t\tif (OS.SetWindowActivationScope(shellHandle, windowActivationScope) != OS.noErr)", "+\t\t\tSystem.out.println(\"Shell.createHandle: can't set activation scope\");", "-", "-\t/*", "-\t* Feature in Motif.  There is no way to get the single pixel", "-\t* border surrounding a TopLevelShell or a TransientShell.", "-\t* Also, attempts to set a border on either the shell handle", "-\t* or the main window handle fail.  The fix is to set the border", "-\t* on the client area.", "-\t*/", "-    /* AW", "-\tif ((style & (SWT.NO_TRIM | SWT.BORDER | SWT.RESIZE)) == 0) {", "-\t\tint [] argList2 = {OS.XmNborderWidth, 1};", "-\t\tOS.XtSetValues (handle, argList2, argList2.length / 2);", "-\t}", "-    */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a18e2d37e9165fa25c4783bb6f3e20c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": " void createHandle (int index)", "diff": ["-\tint windowActivationScope= -1;", "-", "-\tint decorations = OS.kWindowCompositingAttribute | OS.kWindowStandardHandlerAttribute;", "-", "-\t/* AW", "+\tint decorations = 0;", "+    /* AW", "+\tif (MacUtil.HIVIEW)", "+    \tdecorations |= OS.kWindowCompositingAttribute;", "+\t", "-\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.kWindowResizableAttribute;", "+\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.kWindowResizableAttribute | OS.kWindowLiveResizeAttribute;", "+\t\t//if ((style & SWT.BORDER) == 0) decorations |= OS.kWindowNoShadowAttribute;", "+\t//} else {", "+\t//\tdecorations |= OS.kWindowNoShadowAttribute;", "-\t// if resizable enable 'live resize'", "-\tif ((decorations & OS.kWindowResizableAttribute) != 0)", "-\t\tdecorations |= OS.kWindowLiveResizeAttribute;", "-\t", "-\t// determine modality", "+    /* AW", "+\tint inputMode = OS.MWM_INPUT_MODELESS;", "+\tif ((style & SWT.PRIMARY_MODAL) != 0) inputMode = OS.MWM_INPUT_PRIMARY_APPLICATION_MODAL;", "+\tif ((style & SWT.APPLICATION_MODAL) != 0) inputMode = OS.MWM_INPUT_FULL_APPLICATION_MODAL;", "+\tif ((style & SWT.SYSTEM_MODAL) != 0) inputMode = OS.MWM_INPUT_SYSTEM_MODAL;", "+    */", "+\tbyte [] appClass = display.appClass;", "+\tMacRect bounds= new MacRect(100, 100, 100, 100);", "-\tint themeBrush= OS.kThemeBrushDialogBackgroundActive;", "+\tshort themeBrush= OS.kThemeBrushDialogBackgroundActive;", "-\t\tif ((style & SWT.NO_TRIM) != 0) {", "-\t\t\twindowClass= OS.kSheetWindowClass;", "-\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "-\t\t} else {", "+        /* AW", "+\t\tint xDisplay = display.xDisplay;", "+\t\tint widgetClass = OS.TopLevelShellWidgetClass ();", "+\t\tshellHandle = OS.XtAppCreateShell (display.appName, appClass, widgetClass, xDisplay, argList1, argList1.length / 2);", "+        */", "+\t\tif ((style & SWT.NO_TRIM) != 0)", "+\t\t\twindowClass= OS.kHelpWindowClass;", "+\t\telse {", "+        /* AW", "+\t\tint widgetClass = OS.TransientShellWidgetClass ();", "+//\t\tif ((style & SWT.ON_TOP) != 0) {", "+//\t\t\twidgetClass = OS.OverrideShellWidgetClass ();", "+//\t\t}", "+        */", "-\t\t\twindowClass= OS.kSheetWindowClass;", "-\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "+\t\t\t//System.out.println(\"Shell.createHandle: SWT.NONE\");", "+\t\t\twindowClass= OS.kHelpWindowClass;", "-\t\t\twindowClass= OS.kSheetWindowClass;", "-\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "+\t\t\t//System.out.println(\"Shell.createHandle: SWT.NO_TRIM | SWT.ON_TOP\");", "+\t\t\twindowClass= OS.kHelpWindowClass;", "-\t\t\twindowClass= OS.kSheetWindowClass;", "-\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "+\t\t\t//System.out.println(\"Shell.createHandle: SWT.NO_TRIM\");", "+\t\t\twindowClass= OS.kHelpWindowClass;", "+\t\t\t//System.out.println(\"Shell.createHandle: kMovableModalWindowClass\");", "+\t\t\t//System.out.println(\"Shell.createHandle: kModalWindowClass\");", "-\t\t\twindowClass= OS.kSheetWindowClass;", "-\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "+\t\t\t//System.out.println(\"Shell.createHandle: SWT.ON_TOP\");", "+\t\t\t//windowClass= OS.kFloatingWindowClass;", "+\t\t\twindowClass= OS.kHelpWindowClass;", "+\t\t\t//System.out.println(\"Shell.createHandle: kDocumentWindowClass\");", "-\t// check whether window class supports a given decoration", "-\tint allowedAttr= OS.GetAvailableWindowAttributes(windowClass);", "-\tif (decorations != (decorations & allowedAttr)) {", "-\t\tSystem.out.println(\"Shell.createHandle: some attributes are not supported\");", "-\t\tdecorations&= allowedAttr;\t", "+\t// check whether window class supports a given decoration ", "+\tif ((decorations & OS.kWindowCloseBoxAttribute) != 0 &&", "+\t\t\twindowClass != OS.kDocumentWindowClass &&", "+\t\t\t\twindowClass != OS.kFloatingWindowClass &&", "+\t\t\t\t\twindowClass != OS.kUtilityWindowClass) {", "+\t\tdecorations&= ~OS.kWindowCloseBoxAttribute;", "+\t}", "+\tif ((decorations & OS.kWindowFullZoomAttribute) != 0 &&", "+\t\t\twindowClass != OS.kDocumentWindowClass &&", "+\t\t\t\twindowClass != OS.kFloatingWindowClass &&", "+\t\t\t\t\twindowClass != OS.kUtilityWindowClass) {", "+\t\tdecorations&= ~OS.kWindowFullZoomAttribute;", "+\t}", "+\tif ((decorations & OS.kWindowCollapseBoxAttribute) != 0 &&", "+\t\t\twindowClass != OS.kDocumentWindowClass) {", "+\t\tdecorations&= ~OS.kWindowCollapseBoxAttribute;", "+\t}", "+\tif ((decorations & OS.kWindowCollapseBoxAttribute) != 0 &&", "+\t\t\twindowClass != OS.kDocumentWindowClass &&", "+\t\t\t\twindowClass != OS.kMovableModalWindowClass &&", "+\t\t\t\t\twindowClass != OS.kFloatingWindowClass &&", "+\t\t\t\t\t\twindowClass != OS.kUtilityWindowClass &&", "+\t\t\t\t\t\t\twindowClass != OS.kSheetWindowClass) {", "+\t\tdecorations&= ~OS.kWindowCollapseBoxAttribute;", "-\tRect bounds= new Rect();", "-\tOS.SetRect(bounds, (short)100, (short)100, (short)200, (short)200);", "-\tint rc= OS.CreateNewWindow(windowClass, decorations, bounds, wHandle);", "-\tif (rc != OS.noErr)", "-\t\tSystem.out.println(\"Shell.createHandle: can't create window: \" + rc);", "-\tshellHandle= wHandle[0];", "+\tif (OS.CreateNewWindow(windowClass, decorations | OS.kWindowStandardHandlerAttribute, bounds.getData(), wHandle) == OS.kNoErr)", "+\t\tshellHandle= wHandle[0];", "+\telse {", "+\t\tSystem.out.println(\"Shell.createHandle: can't create window with these attributes; creating default window\");", "+\t\tif (OS.CreateNewWindow(OS.kDocumentWindowClass, OS.kWindowStandardHandlerAttribute, bounds.getData(), wHandle) == OS.kNoErr)", "+\t\t\tshellHandle= wHandle[0];", "+\t}", "+", "-\tif (windowActivationScope != -1)\t", "-\t\tif (OS.SetWindowActivationScope(shellHandle, windowActivationScope) != OS.noErr)", "-\t\t\tSystem.out.println(\"Shell.createHandle: can't set activation scope\");", "-\t", "-\t\tOS.SetThemeWindowBackground(shellHandle, (short)themeBrush, false);", "+\t\tOS.SetThemeWindowBackground(shellHandle, themeBrush, false);", "+", "+\t/*", "+\t* Feature in Motif.  There is no way to get the single pixel", "+\t* border surrounding a TopLevelShell or a TransientShell.", "+\t* Also, attempts to set a border on either the shell handle", "+\t* or the main window handle fail.  The fix is to set the border", "+\t* on the client area.", "+\t*/", "+    /* AW", "+\tif ((style & (SWT.NO_TRIM | SWT.BORDER | SWT.RESIZE)) == 0) {", "+\t\tint [] argList2 = {OS.XmNborderWidth, 1};", "+\t\tOS.XtSetValues (handle, argList2, argList2.length / 2);", "+\t}", "+    */"]}], "num": 10398}
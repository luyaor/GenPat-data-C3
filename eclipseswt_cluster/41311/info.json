{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "406c80ca99337dea8c25ed1b78d517d1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6e68faf350ce447ecac295168c32168", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "dfd4650fd75100a5a002cab81ff3277b16862845", "commitAfterChange": "d01fac9d213e0fa304edfed85d0f0844e9d59792", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 4, "signatureBeforeChange": "  int createGdipBrush()", "signatureAfterChange": "  void checkGC(int mask)", "diff": ["+", "+void checkGC(int mask) {", "+\tint state = data.state;", "+\tif ((state & mask) == mask) return;", "+\tstate = (state ^ mask) & mask;", "+\tdata.state |= mask;", "+\tint gdipGraphics = data.gdipGraphics;", "+\tif (gdipGraphics != 0) {", "+\t\tint pen = data.gdipPen;", "+\t\tint width = data.lineWidth;", "+\t\tif ((state & FOREGROUND) != 0) {", "+\t\t\tif (data.gdipFgBrush != 0) Gdip.SolidBrush_delete(data.gdipFgBrush);", "+\t\t\tdata.gdipFgBrush = 0;", "+\t\t\tint brush;", "+\t\t\tPattern pattern = data.foregroundPattern;", "+\t\t\tif (pattern != null) {", "+\t\t\t\tbrush = pattern.handle;", "+\t\t\t} else {", "+\t\t\t\tint foreground = data.foreground;", "+\t\t\t\tint rgb = ((foreground >> 16) & 0xFF) | (foreground & 0xFF00) | ((foreground & 0xFF) << 16);", "+\t\t\t\tint color = Gdip.Color_new(data.alpha << 24 | rgb);", "+\t\t\t\tif (color == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tbrush = Gdip.SolidBrush_new(color);", "+\t\t\t\tif (brush == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tGdip.Color_delete(color);", "+\t\t\t\tdata.gdipFgBrush = brush;", "+\t\t\t\tbrush = data.gdipFgBrush;", "+\t\t\t}", "+\t\t\tif (pen != 0) {", "+\t\t\t\tGdip.Pen_SetBrush(pen, brush);", "+\t\t\t} else {", "+\t\t\t\tpen = data.gdipPen = Gdip.Pen_new(brush, Math.max (1, width));", "+\t\t\t}", "+\t\t}", "+\t\tif ((state & LINE_WIDTH) != 0) {", "+\t\t\tGdip.Pen_SetWidth(pen, Math.max (1, width));\t\t\t", "+\t\t}", "+\t\tif ((state & LINE_STYLE) != 0) {", "+\t\t\tfloat[] dashes = null;", "+\t\t\tint dashStyle = Gdip.DashStyleSolid; ", "+\t\t\tswitch (data.lineStyle) {", "+\t\t\t\tcase SWT.LINE_SOLID: break;", "+\t\t\t\tcase SWT.LINE_DOT: dashStyle = Gdip.DashStyleDot; if (width == 0) dashes = LINE_DOT_ZERO; break;", "+\t\t\t\tcase SWT.LINE_DASH: dashStyle = Gdip.DashStyleDash; if (width == 0) dashes = LINE_DASH_ZERO; break;", "+\t\t\t\tcase SWT.LINE_DASHDOT: dashStyle = Gdip.DashStyleDashDot; if (width == 0) dashes = LINE_DASHDOT_ZERO; break;", "+\t\t\t\tcase SWT.LINE_DASHDOTDOT: dashStyle = Gdip.DashStyleDashDotDot; if (width == 0) dashes = LINE_DASHDOTDOT_ZERO; break;", "+\t\t\t\tcase SWT.LINE_CUSTOM: {", "+\t\t\t\t\tif (data.lineDashes != null) {", "+\t\t\t\t\t\tdashes = new float[data.lineDashes.length * 2];", "+\t\t\t\t\t\tfor (int i = 0; i < data.lineDashes.length; i++) {", "+\t\t\t\t\t\t\tfloat dash = (float)data.lineDashes[i] / Math.max (1, width);", "+\t\t\t\t\t\t\tdashes[i] = dash;", "+\t\t\t\t\t\t\tdashes[i + data.lineDashes.length] = dash;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (dashes != null) {", "+\t\t\t\tGdip.Pen_SetDashPattern(pen, dashes, dashes.length);", "+\t\t\t\tGdip.Pen_SetDashStyle(pen, Gdip.DashStyleCustom);", "+\t\t\t} else {", "+\t\t\t\tGdip.Pen_SetDashStyle(pen, dashStyle);", "+\t\t\t}", "+\t\t}", "+\t\tif ((state & LINE_JOIN) != 0) {", "+\t\t\tint joinStyle = 0;", "+\t\t\tswitch (data.lineJoin) {", "+\t\t\t\tcase SWT.JOIN_MITER: joinStyle = Gdip.LineJoinMiter; break;", "+\t\t\t\tcase SWT.JOIN_BEVEL: joinStyle = Gdip.LineJoinBevel; break;", "+\t\t\t\tcase SWT.JOIN_ROUND: joinStyle = Gdip.LineJoinRound; break;", "+\t\t\t}", "+\t\t\tGdip.Pen_SetLineJoin(pen, joinStyle);", "+\t\t}", "+\t\tif ((state & LINE_CAP) != 0) {", "+\t\t\tint dashCap = Gdip.DashCapFlat, capStyle = 0;", "+\t\t\tswitch (data.lineCap) {", "+\t\t\t\tcase SWT.CAP_FLAT: capStyle = Gdip.LineCapFlat; break;", "+\t\t\t\tcase SWT.CAP_ROUND: capStyle = Gdip.LineCapRound; dashCap = Gdip.DashCapRound; break;", "+\t\t\t\tcase SWT.CAP_SQUARE: capStyle = Gdip.LineCapSquare; break;", "+\t\t\t}", "+\t\t\tGdip.Pen_SetLineCap(pen, capStyle, capStyle, dashCap);", "+\t\t}", "+\t\tif ((state & BACKGROUND) != 0) {", "+\t\t\tif (data.gdipBgBrush != 0) Gdip.SolidBrush_delete(data.gdipBgBrush);", "+\t\t\tdata.gdipBgBrush = 0;", "+\t\t\tPattern pattern = data.backgroundPattern;", "+\t\t\tif (pattern != null) {", "+\t\t\t\tdata.gdipBrush = pattern.handle;", "+\t\t\t} else {", "+\t\t\t\tint background = data.background;", "+\t\t\t\tint rgb = ((background >> 16) & 0xFF) | (background & 0xFF00) | ((background & 0xFF) << 16);", "+\t\t\t\tint color = Gdip.Color_new(data.alpha << 24 | rgb);", "+\t\t\t\tif (color == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tint brush = Gdip.SolidBrush_new(color);", "+\t\t\t\tif (brush == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tGdip.Color_delete(color);", "+\t\t\t\tdata.gdipBrush = data.gdipBgBrush = brush;", "+\t\t\t}", "+\t\t}", "+\t\tif ((state & FONT) != 0) {", "+\t\t\tOS.SelectObject(handle, data.hFont);", "+\t\t\tint font = createGdipFont(handle, data.hFont);", "+\t\t\tif (data.gdipFont != 0) Gdip.Font_delete(data.gdipFont);", "+\t\t\tdata.gdipFont = font;", "+\t\t}", "+\t\treturn;", "+\t}", "+\tif ((state & (FOREGROUND | LINE_CAP | LINE_JOIN | LINE_STYLE | LINE_WIDTH)) != 0) {", "+\t\tint color = data.foreground;", "+\t\tint width = data.lineWidth;", "+\t\tint[] dashes = null;", "+\t\tint lineStyle = OS.PS_SOLID;", "+\t\tswitch (data.lineStyle) {", "+\t\t\tcase SWT.LINE_SOLID: break;", "+\t\t\tcase SWT.LINE_DASH: lineStyle = OS.PS_DASH; break;", "+\t\t\tcase SWT.LINE_DOT: lineStyle = OS.PS_DOT; break;", "+\t\t\tcase SWT.LINE_DASHDOT: lineStyle = OS.PS_DASHDOT; break;", "+\t\t\tcase SWT.LINE_DASHDOTDOT: lineStyle = OS.PS_DASHDOTDOT; break;", "+\t\t\tcase SWT.LINE_CUSTOM: {", "+\t\t\t\tif (data.lineDashes == null) {", "+\t\t\t\t\tlineStyle = OS.PS_USERSTYLE;", "+\t\t\t\t\tdashes = data.lineDashes;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\tif ((state & LINE_STYLE) != 0) {", "+\t\t\tOS.SetBkMode(handle, data.lineStyle == SWT.LINE_SOLID ? OS.OPAQUE : OS.TRANSPARENT); ", "+\t\t}", "+\t\tint joinStyle = 0;", "+\t\tswitch (data.lineJoin) {", "+\t\t\tcase SWT.JOIN_MITER: joinStyle = OS.PS_JOIN_MITER; break;", "+\t\t\tcase SWT.JOIN_ROUND: joinStyle = OS.PS_JOIN_ROUND; break;", "+\t\t\tcase SWT.JOIN_BEVEL: joinStyle = OS.PS_JOIN_BEVEL; break;", "+\t\t}", "+\t\tint capStyle = 0;", "+\t\tswitch (data.lineCap) {", "+\t\t\tcase SWT.CAP_ROUND: capStyle = OS.PS_ENDCAP_ROUND; break;", "+\t\t\tcase SWT.CAP_FLAT: capStyle = OS.PS_ENDCAP_FLAT; break;", "+\t\t\tcase SWT.CAP_SQUARE: capStyle = OS.PS_ENDCAP_SQUARE;break;", "+\t\t}", "+\t\tint style = lineStyle | joinStyle | capStyle;", "+\t\t/*", "+\t\t* Feature in Windows.  Windows does not honour line styles other then", "+\t\t* PS_SOLID for pens wider than 1 pixel created with CreatePen().  The fix", "+\t\t* is to use ExtCreatePen() instead.", "+\t\t*/", "+\t\tint newPen;", "+\t\tif (OS.IsWinCE || (width == 0 && lineStyle != OS.PS_USERSTYLE) || style == 0) {", "+\t\t\tnewPen = OS.CreatePen(style & OS.PS_STYLE_MASK, width, color);", "+\t\t} else {", "+\t\t\tLOGBRUSH logBrush = new LOGBRUSH();", "+\t\t\tlogBrush.lbStyle = OS.BS_SOLID;", "+\t\t\tlogBrush.lbColor = color;", "+\t\t\t/* Feature in Windows. PS_GEOMETRIC pens cannot have zero width. */", "+\t\t\tnewPen = OS.ExtCreatePen (style | OS.PS_GEOMETRIC, Math.max(1, width), logBrush, dashes != null ? dashes.length : 0, dashes);", "+\t\t}", "+\t\tOS.SelectObject(handle, newPen);", "+\t\tdata.state |= PEN;", "+\t\tif (data.hPen != 0) OS.DeleteObject(data.hPen);", "+\t\tdata.hPen = data.hOldPen = newPen;", "+\t} else if ((state & PEN) != 0) {", "+\t\tOS.SelectObject(handle, data.hOldPen);", "+\t}", "+\tif ((state & BACKGROUND) != 0) {", "+\t\tint newBrush = OS.CreateSolidBrush(data.background);", "+\t\tOS.SelectObject(handle, newBrush);", "+\t\tdata.state |= BRUSH;", "+\t\tif (data.hBrush != 0) OS.DeleteObject(data.hBrush);", "+\t\tdata.hOldBrush = data.hBrush = newBrush;", "+\t} else if ((state & BRUSH) != 0) {", "+\t\tOS.SelectObject(handle, data.hOldBrush);", "+\t}", "+\tif ((state & NULL_BRUSH) != 0) {", "+\t\tdata.hOldBrush = OS.SelectObject(handle, OS.GetStockObject(OS.NULL_BRUSH));", "+\t\tdata.state &= ~BRUSH;", "+\t}", "+\tif ((state & NULL_PEN) != 0) {", "+\t\tdata.hOldPen = OS.SelectObject(handle, OS.GetStockObject(OS.NULL_PEN));", "+\t\tdata.state &= ~PEN;", "+\t}", "+\tif ((state & BACKGROUND_TEXT) != 0) {", "+\t\tOS.SetBkColor(handle, data.background);", "+\t}", "+\tif ((state & FOREGROUND_TEXT) != 0) {", "+\t\tOS.SetTextColor(handle, data.foreground);", "+\t}", "+\tif ((state & FONT) != 0) {", "+\t\tOS.SelectObject(handle, data.hFont);", "+\t}", "-int createGdipBrush() {", "-\tint colorRef = OS.GetBkColor (handle);", "-\tint rgb = ((colorRef >> 16) & 0xFF) | (colorRef & 0xFF00) | ((colorRef & 0xFF) << 16);", "-\tint color = Gdip.Color_new(data.alpha << 24 | rgb);", "-\tif (color == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tint brush = Gdip.SolidBrush_new(color);", "-\tif (brush == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tGdip.Color_delete(color);", "-\treturn brush;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee84e59cdef16f5effdec637a6274888", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": "  void createHandle ()", "diff": ["-}", "-void createHandle (int index) {", "-\tstate |= HANDLE;", "-\t/* AW", "-\tint borderWidth = (style & SWT.BORDER) != 0 ? 1 : 0;", "-\t*/", "-\tint parentHandle = parent.handle;", "-\t/* ARROW button */", "+", "+void createHandle () {", "+\tint [] outControl = new int [1];", "+\tint window = OS.GetControlOwner (parent.handle);", "+\t\t\t\t", "-        /*", "-\t\tint alignment = OS.XmARROW_UP;", "-\t\tif ((style & SWT.UP) != 0) alignment = OS.XmARROW_UP;", "-\t\tif ((style & SWT.DOWN) != 0) alignment = OS.XmARROW_DOWN;", "-\t\tif ((style & SWT.LEFT) != 0) alignment = OS.XmARROW_LEFT;", "-\t\tif ((style & SWT.RIGHT) != 0) alignment = OS.XmARROW_RIGHT;", "-\t\tint [] argList = {", "-\t\t\tOS.XmNtraversalOn, 0,", "-\t\t\tOS.XmNarrowDirection, alignment,", "-\t\t\tOS.XmNborderWidth, borderWidth,", "-\t\t\tOS.XmNancestorSensitive, 1,", "-\t\t};", "-\t\thandle = OS.XmCreateArrowButton (parentHandle, null, argList, argList.length / 2);", "-        */", "-        handle= MacUtil.newControl(parentHandle, (short)OS.kControlBevelButtonNormalBevelProc);", "-\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tint kThemeDisclosureRight = 0;", "-  \t\tint kThemeDisclosureDown = 1;", "-  \t\tint kThemeDisclosureLeft = 2;", "-  \t\tint kThemeDisclosureButton = 6;", "-  \t\tint kControlBevelButtonKindTag = ('b'<<24) + ('e'<<16) + ('b'<<8) + 'k';", "-\t\tint orientation = kThemeDisclosureRight;", "-\t\tif ((style & SWT.UP) != 0) orientation = kThemeDisclosureRight; // NEEDS WORK", "-\t\tif ((style & SWT.DOWN) != 0) orientation = kThemeDisclosureDown;", "-\t\tif ((style & SWT.LEFT) != 0) orientation = kThemeDisclosureLeft;", "-\t\tOS.SetControlData (handle, OS.kControlEntireControl, kControlBevelButtonKindTag, new short [] {(short)(kThemeDisclosureButton)});", "+\t\tint orientation = OS.kThemeDisclosureRight;", "+\t\tif ((style & SWT.UP) != 0) orientation = OS.kThemeDisclosureRight; // NEEDS WORK", "+\t\tif ((style & SWT.DOWN) != 0) orientation = OS.kThemeDisclosureDown;", "+\t\tif ((style & SWT.LEFT) != 0) orientation = OS.kThemeDisclosureLeft;", "+\t\tOS.CreateBevelButtonControl(window, null, 0, (short)0, (short)OS.kControlBehaviorPushbutton, 0, (short)0, (short)0, (short)0, outControl);", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlBevelButtonKindTag, 2, new short [] {(short)(OS.kThemeDisclosureButton)});", "-        /* AW", "-\t\tif ((style & SWT.FLAT) != 0) {", "-\t\t\tint [] argList1 = {OS.XmNshadowThickness, 1};", "-\t\t\tOS.XtSetValues (handle, argList1, argList1.length / 2);", "-\t\t}", "-        */", "-\t\treturn;", "-", "-\t/* Compute alignment */", "-    /* AW", "-\tint alignment = OS.XmALIGNMENT_BEGINNING;", "-\tif ((style & SWT.CENTER) != 0) alignment = OS.XmALIGNMENT_CENTER;", "-\tif ((style & SWT.RIGHT) != 0) alignment = OS.XmALIGNMENT_END;", "-    */", "-", "-\t/* TOGGLE button */", "+\t", "+\tif ((style & SWT.CHECK) != 0) {", "+\t\t//OS.CreateCheckBoxControl (window, null, 0, 0 /*initially off*/, true, outControl);", "+\t\tOS.CreateBevelButtonControl(window, null, 0, (short)0, (short)OS.kControlBehaviorToggles, 0, (short)0, (short)0, (short)0, outControl);", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlBevelButtonKindTag, 2, new short [] {(short)OS.kThemeCheckBox});", "+\t}", "+\t", "+\tif ((style & SWT.RADIO) != 0) {", "+\t\t//OS.CreateRadioButtonControl(window, null, 0, 0 /*initially off*/, true, outControl);", "+\t\tOS.CreateBevelButtonControl(window, null, 0, (short)0, (short)OS.kControlBehaviorToggles, 0, (short)0, (short)0, (short)0, outControl);", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlBevelButtonKindTag, 2, new short [] {(short)OS.kThemeRadioButton});", "+\t}", "+\t", "-\t\t/*", "-\t\t* Bug in Motif.  When XmNindicatorOn is set to false,", "-\t\t* Motif doesn't reset the shadow thickness to give a", "-\t\t* push button look.  The fix is to set the shadow", "-\t\t* thickness when ever this resource is changed.", "-\t\t*/", "-        /* AW", "-\t\tDisplay display = getDisplay ();", "-\t\tint thickness = display.buttonShadowThickness;", "-\t\tint [] argList = {", "-\t\t\tOS.XmNancestorSensitive, 1,", "-\t\t\tOS.XmNrecomputeSize, 0,", "-\t\t\tOS.XmNindicatorOn, 0,", "-\t\t\tOS.XmNshadowThickness, (style & SWT.FLAT) != 0 ? 1 : thickness,", "-\t\t\tOS.XmNalignment, alignment,", "-\t\t\tOS.XmNborderWidth, borderWidth,", "-\t\t};", "-\t\thandle = OS.XmCreateToggleButton (parentHandle, null, argList, argList.length / 2);", "-        */", "-\t\thandle= MacUtil.newControl(parentHandle, (short)0, OS.kControlBehaviorToggles, (short)0, OS.kControlBevelButtonNormalBevelProc);", "-\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tsetFont(defaultFont());", "-\t\treturn;", "+\t\tOS.CreateBevelButtonControl(window, null, 0, (short)OS.kControlBevelButtonNormalBevel, (short)OS.kControlBehaviorToggles, 0, (short)0, (short)0, (short)0, outControl);", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\tif ((style & SWT.FLAT) == 0 ) {", "+\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlBevelButtonKindTag, 2, new short [] {(short)OS.kThemeRoundedBevelButton});", "+\t\t}", "+\t}", "+\t", "+\tif ((style & SWT.PUSH) != 0) {", "+\t\tif ((style & SWT.FLAT) != 0) {", "+\t\t\tOS.CreateBevelButtonControl(window, null, 0, (short)2, (short)OS.kControlBehaviorPushbutton, 0, (short)0, (short)0, (short)0, outControl);", "+\t\t} else {", "+\t\t\tOS.CreatePushButtonControl (window, null, 0, outControl);", "+\t\t\t//OS.CreateBevelButtonControl(window, null, 0, (short)2, (short)OS.kControlBehaviorPushbutton, 0, (short)0, (short)0, (short)0, outControl);", "+\t\t}", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\tif ((style & SWT.FLAT) == 0 ) {", "+\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlBevelButtonKindTag, 2, new short [] {(short)OS.kThemePushButton});", "+\t\t}", "-\t/* CHECK or RADIO button */", "-\tif ((style & (SWT.CHECK | SWT.RADIO)) != 0) {", "-\t\t/*", "-\t\t* Bug in Motif.  For some reason, a toggle button", "-\t\t* with XmNindicatorType XmONE_OF_MANY must have this", "-\t\t* value set at creation or the highlight color will", "-\t\t* not be correct.  The fix is to set these values", "-\t\t* on create.", "-\t\t*/", "-        /* AW", "-\t\tint indicatorType = OS.XmONE_OF_MANY;", "-\t\tif ((style & SWT.CHECK) != 0) indicatorType = OS.XmN_OF_MANY;", "-\t\tint [] argList = {", "-\t\t\tOS.XmNancestorSensitive, 1,", "-\t\t\tOS.XmNrecomputeSize, 0,", "-\t\t\tOS.XmNindicatorType, indicatorType,", "-\t\t\tOS.XmNalignment, alignment,", "-\t\t\tOS.XmNborderWidth, borderWidth,", "-\t\t};", "-\t\thandle = OS.XmCreateToggleButton (parentHandle, null, argList, argList.length / 2);", "-        */", "-\t\tshort type= (style & SWT.CHECK) != 0", "-\t\t\t\t\t? OS.kControlCheckBoxAutoToggleProc", "-\t\t\t\t\t: OS.kControlRadioButtonAutoToggleProc;", "-\t\thandle= MacUtil.newControl(parentHandle, (short)0, (short)0, (short)100, type);", "-\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tsetFont(defaultFont());", "-\t\treturn;", "+\tControlFontStyleRec fontRec = new ControlFontStyleRec();", "+\tfontRec.flags = (short) OS.kControlUseThemeFontIDMask;", "+\tfontRec.font = (short) defaultThemeFont ();", "+\tOS.SetControlFontStyle (handle, fontRec);", "+\t", "+\tif ((style & (SWT.LEFT | SWT.RIGHT | SWT.CENTER)) != 0) {", "+\t\tint textAlignment = 0;", "+\t\tint graphicAlignment = 0;", "+\t\tif ((style & SWT.LEFT) != 0) {", "+\t\t\ttextAlignment = OS.kControlBevelButtonAlignTextFlushLeft;", "+\t\t\tgraphicAlignment = OS.kControlBevelButtonAlignLeft;", "+\t\t}", "+\t\tif ((style & SWT.CENTER) != 0) {", "+\t\t\ttextAlignment = OS.kControlBevelButtonAlignTextCenter;", "+\t\t\tgraphicAlignment = OS.kControlBevelButtonAlignCenter;", "+\t\t}", "+\t\tif ((style & SWT.RIGHT) != 0) {", "+\t\t\ttextAlignment = OS.kControlBevelButtonAlignTextFlushRight;", "+\t\t\tgraphicAlignment = OS.kControlBevelButtonAlignRight;", "+\t\t}", "+\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlBevelButtonTextAlignTag, 2, new short [] {(short)textAlignment});", "+\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlBevelButtonGraphicAlignTag, 2, new short [] {(short)graphicAlignment});", "+}", "-\t/* PUSH button */", "-    /* AW", "-\tint [] argList = {", "-\t\tOS.XmNancestorSensitive, 1,", "-\t\tOS.XmNrecomputeSize, 0,", "-\t\tOS.XmNalignment, alignment,", "-\t\tOS.XmNborderWidth, borderWidth,", "-    */", "-\tshort type= (style & SWT.FLAT) != 0", "-\t\t\t\t\t? OS.kControlBevelButtonNormalBevelProc", "-\t\t\t\t\t: OS.kControlPushButtonProc;", "-    handle= MacUtil.newControl(parentHandle, type);", "-\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\tsetFont(defaultFont());", "-\t/* AW", "-\tif ((style & SWT.FLAT) != 0) {", "-\t\tint [] argList1 = {OS.XmNshadowThickness, 1};", "-\t\tOS.XtSetValues (handle, argList1, argList1.length / 2);", "-\t}", "-\t*/"]}], "num": 41311}
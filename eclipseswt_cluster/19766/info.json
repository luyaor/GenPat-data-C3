{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "919693204f8c6332d977e51bf19b2873", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "190d7d3f7a613ac8af0f8a45dc3ee45f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 49, "signatureBeforeChange": "\r \r int processKey (int info)", "signatureAfterChange": "\r \r int processKey (int info)", "diff": ["-\tif (info == 0) return OS.Pt_END;\r", "+\tif (!hasFocus ()) return OS.Pt_PROCESS;\r", "+\tif (info == 0) return OS.Pt_PROCESS;\r", "-\tif (cbinfo.event == 0) return OS.Pt_END;\r", "+\tif (cbinfo.event == 0) return OS.Pt_PROCESS;\r", "+\tif ((ev.processing_flags & OS.Ph_FAKE_EVENT) != 0) {\r", "+\t\treturn OS.Pt_PROCESS;\r", "+\t}\r", "-\tif (data == 0) return OS.Pt_END;\r", "+\tif (data == 0) return OS.Pt_PROCESS;\r", "-\t/*\r", "-\t* Feature in Photon.  The multi-line text widget consumes\r", "-\t* key down events.  The fix is to use a filter callback\r", "-\t* for the text widget to see the key down.  The following\r", "-\t* code ignores key up when called from a filter callback.\r", "-\t*/\r", "-\tif (cbinfo.reason == OS.Pt_CB_FILTER) {\r", "-\t\tif ((ke.key_flags & (OS.Pk_KF_Key_Down | OS.Pk_KF_Key_Repeat)) == 0) {\r", "-\t\t\treturn OS.Pt_PROCESS;\r", "-\t\t}\r", "-\t}\r", "+\r", "-\t\treturn (cbinfo.reason == OS.Pt_CB_FILTER) ? OS.Pt_PROCESS : OS.Pt_END;\r", "+\t\treturn OS.Pt_PROCESS;\r", "-\t\t\t\t\t/*\r", "-\t\t\t\t\t* Bug in Photon.  Despite the fact that we return Pt_END,\r", "-\t\t\t\t\t* for some reason, Photon continues to forward the event\r", "-\t\t\t\t\t* to the parent.  The fix is to change the event type to\r", "-\t\t\t\t\t* zero.  This doesn't stop the forwarding but makes the\r", "-\t\t\t\t\t* event unknown.\r", "-\t\t\t\t\t*/\r", "-\t\t\t\t\tif (cbinfo.reason == OS.Pt_CB_FILTER) return OS.Pt_PROCESS;\r", "-\t\t\t\t\tOS.memmove (cbinfo.event, new int [1], 4);\r", "-\t\t\t\t\treturn OS.Pt_END;\r", "+\t\t\t\t\treturn OS.Pt_PROCESS;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\t\t\t\t\t\t\r", "+\tif ((ke.key_flags & (OS.Pk_KF_Key_Down | OS.Pk_KF_Key_Repeat)) != 0) {\r", "+\t\t\r", "+\t\t/*\r", "+\t\t* Fetuare in Photon.  The key_sym value is not valid when Ctrl\r", "+\t\t* or Alt is pressed. The fix is to detect this case and try to\r", "+\t\t* use the key_cap value.\r", "+\t\t*/\r", "+\t\tint key = ke.key_sym;\r", "+\t\tif ((ke.key_flags & OS.Pk_KF_Sym_Valid) == 0) {\r", "+\t\t\tkey = 0;\r", "+\t\t\tif ((ke.key_flags & OS.Pk_KF_Cap_Valid) != 0) {\r", "+\t\t\t\tif (ke.key_cap == OS.Pk_Tab && (ke.key_mods & OS.Pk_KM_Ctrl) != 0) {\r", "+\t\t\t\t\tkey = OS.Pk_Tab;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tswitch (key) {\r", "+\t\t\tcase OS.Pk_Escape:\r", "+\t\t\tcase OS.Pk_Return:\r", "+\t\t\tcase OS.Pk_KP_Tab:\r", "+\t\t\tcase OS.Pk_Tab:\r", "+\t\t\tcase OS.Pk_Up:\r", "+\t\t\tcase OS.Pk_Down:\r", "+\t\t\tcase OS.Pk_Left:\r", "+\t\t\tcase OS.Pk_Right: {\r", "+\t\t\t\tif (key != OS.Pk_Return) {\r", "+\t\t\t\t\tev.processing_flags |= OS.Ph_NOT_CUAKEY;\r", "+\t\t\t\t\tOS.memmove (cbinfo.event, ev, PhEvent_t.sizeof);\r", "+\t\t\t\t}\r", "+\t\t\t\tif (translateTraversal (key, ke)) {\r", "+\t\t\t\t\tev.processing_flags |= OS.Ph_CONSUMED;\r", "+\t\t\t\t\tOS.memmove (cbinfo.event, ev, PhEvent_t.sizeof);\r", "+\t\t\t\t\treturn OS.Pt_PROCESS;\r", "+\t\t\t\t}\r", "-\t\t\t\tcase OS.Pk_Clear: \tevent.character = 0xB; break;\r", "-\t\t\t\tcase OS.Pk_Return: \tevent.character = '\\r'; break;\r", "+\t\t\t\tcase OS.Pk_Clear: \t\tevent.character = 0xB; break;\r", "+\t\t\t\tcase OS.Pk_Return: \t\tevent.character = '\\r'; break;\r", "-\t\t\t\tcase OS.Pk_Escape:\tevent.character = 0x1B; break;\r", "-\t\t\t\tcase OS.Pk_Delete:\tevent.character = 0x7F; break;\r", "+\t\t\t\tcase OS.Pk_Escape:\t\tevent.character = 0x1B; break;\r", "+\t\t\t\tcase OS.Pk_Delete:\t\tevent.character = 0x7F; break;\r", "-\tif ((ke.key_mods & OS.Pk_KM_Alt) != 0) {\r", "-\t\tif (type != SWT.KeyDown || event.keyCode != SWT.ALT) {\r", "-\t\t\tevent.stateMask |= SWT.ALT;\r", "-\t\t}\r", "-\t}\r", "-\tif ((ke.key_mods & OS.Pk_KM_Shift) != 0) {\r", "-\t\tif (type != SWT.KeyDown || event.keyCode != SWT.SHIFT) {\r", "-\t\t\tevent.stateMask |= SWT.SHIFT;\r", "-\t\t}\r", "-\t}\r", "-\tif ((ke.key_mods & OS.Pk_KM_Ctrl) != 0) {\r", "-\t\tif (type != SWT.KeyDown || event.keyCode != SWT.CONTROL) {\r", "-\t\t\tevent.stateMask |= SWT.CONTROL;\r", "-\t\t}\r", "-\t}\r", "-\tif ((ke.button_state & OS.Ph_BUTTON_SELECT) != 0) event.stateMask |= SWT.BUTTON1;\r", "-\tif ((ke.button_state & OS.Ph_BUTTON_ADJUST) != 0) event.stateMask |= SWT.BUTTON2;\r", "-\tif ((ke.button_state & OS.Ph_BUTTON_MENU) != 0) event.stateMask |= SWT.BUTTON3;\r", "+\tsetKeyState(event, ke);\r", "-\t\tif (event.keyCode == SWT.ALT) event.stateMask |= SWT.ALT;\r", "-\t\tif (event.keyCode == SWT.SHIFT) event.stateMask |= SWT.SHIFT;\r", "-\t\tif (event.keyCode == SWT.CONTROL) event.stateMask |= SWT.CONTROL;\r", "-\t/*\r", "-\t* Bug in Photon.  Despite the fact that we return Pt_END,\r", "-\t* for some reason, Photon continues to forward the event\r", "-\t* to the parent.  The fix is to change the event type to\r", "-\t* zero.  This doesn't stop the forwarding but makes the\r", "-\t* event unknown.\r", "-\t*/\r", "-\tif (cbinfo.reason == OS.Pt_CB_FILTER) return OS.Pt_PROCESS;\r", "-\tOS.memmove (cbinfo.event, new int [1], 4);\r", "-\treturn OS.Pt_END;\r", "+\r", "+\treturn OS.Pt_PROCESS;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faf28c080a7a8fd5a2d92527ee37a0a3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "ebafd3a38c46dd46b5dcf6dfd34949295c064eb5", "commitAfterChange": "c830ba87659f66da0a8654b6fd6e8eaf78f224a3", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "  boolean setKeyState (Event event, int type, PhKeyEvent_t ke)", "signatureAfterChange": "  boolean setKeyState (Event event, int type, PhKeyEvent_t ke)", "diff": ["-\tboolean isNull = false;", "-\t/*", "-\t* Fetuare in Photon.  The key_sym value is not valid when Ctrl", "-\t* or Alt is pressed. The fix is to detect this case and try to", "-\t* use the key_cap value.", "-\t*/", "-\tif ((ke.key_flags & OS.Pk_KF_Sym_Valid) != 0) {", "-\t\tevent.keyCode = Display.translateKey (key = ke.key_sym);", "-\t} else if ((ke.key_flags & OS.Pk_KF_Cap_Valid) != 0) {", "-\t\tevent.keyCode = Display.translateKey (key = ke.key_cap);", "+\tboolean isNull = false;", "+\tif ((ke.key_flags & OS.Pk_KF_Cap_Valid) != 0) {", "+\t\tkey = ke.key_cap;", "+\t\tif ((ke.key_mods & OS.Pk_KM_Num_Lock) == 0) {", "+\t\t\tswitch (key) {", "+\t\t\t\tcase OS.Pk_KP_0: key = OS.Pk_Insert; break;", "+\t\t\t\tcase OS.Pk_KP_1: key = OS.Pk_End; break;", "+\t\t\t\tcase OS.Pk_KP_2: key = OS.Pk_Down; break;", "+\t\t\t\tcase OS.Pk_KP_3: key = OS.Pk_Pg_Down; break;", "+\t\t\t\tcase OS.Pk_KP_4: key = OS.Pk_Left; break;", "+\t\t\t\tcase OS.Pk_KP_5: break;", "+\t\t\t\tcase OS.Pk_KP_6: key = OS.Pk_Right; break;", "+\t\t\t\tcase OS.Pk_KP_7: key = OS.Pk_Home; break;", "+\t\t\t\tcase OS.Pk_KP_8: key = OS.Pk_Up; break;", "+\t\t\t\tcase OS.Pk_KP_9: key = OS.Pk_Pg_Up; break;", "+\t\t\t\tcase OS.Pk_KP_Decimal: key = OS.Pk_Delete; break;", "+\t\t\t}", "+\t\t\t", "+\t\t}", "+\t\tevent.keyCode = Display.translateKey (key);", "-\t\tcase OS.Pk_Break:", "-\t\tcase OS.Pk_Pause:", "-\t\tcase OS.Pk_Print:", "-\t\tcase OS.Pk_Help:", "-\t\tcase OS.Pk_Caps_Lock:", "-\t\tcase OS.Pk_Num_Lock:", "-\t\tcase OS.Pk_Scroll_Lock:\tbreak;", "+\t\t\tbreak;", "-\t\t\t\tif ((ke.key_mods & (OS.Pk_KM_Alt | OS.Pk_KM_Ctrl)) != 0) {", "+\t\t\t}", "+\t\t\t/*", "+\t\t\t* Fetuare in Photon.  The key_sym value is not valid when Ctrl", "+\t\t\t* or Alt is pressed. The fix is to detect this case and try to", "+\t\t\t* use the key_cap value.", "+\t\t\t*/", "+\t\t\tif ((ke.key_mods & (OS.Pk_KM_Alt | OS.Pk_KM_Ctrl)) != 0) {", "+\t\t\t\tif (0 <= key && key <= 0x7F) {", "-\t\t\t\t\t\tevent.character = (char) key;\t\t\t", "+\t\t\t\t\t\tif ((ke.key_flags & OS.Pk_KF_Sym_Valid) != 0) {", "+\t\t\t\t\t\t\tevent.character = (char) ke.key_sym;", "+\t\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tbyte [] buffer = new byte [6];", "-\t\t\t\t\tint length = OS.PhKeyToMb (buffer, ke);", "-\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\tchar [] unicode = Converter.mbcsToWcs (null, buffer);", "-\t\t\t\t\t\tif (unicode.length > 0) event.character = unicode [0];", "-\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tbyte [] buffer = new byte [6];", "+\t\t\t\tint length = OS.PhKeyToMb (buffer, ke);", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tchar [] unicode = Converter.mbcsToWcs (null, buffer);", "+\t\t\t\t\tif (unicode.length > 0) event.character = unicode [0];"]}], "num": 19766}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4295ac3ddb69cedb31be0d7938b9f9cd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "266a52037c8cbfa9c82adb367034df32", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Shell.java", "commitBeforeChange": "a81a2af33f76afc777dc2a821ad7e85370bea06d", "commitAfterChange": "61a23c6bad00d757114d1634ae3a1348f07fbfd3", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  public void test_setActive()", "signatureAfterChange": "  public void test_setActive()", "diff": ["+\t/* Create shell2 and make it active. */", "+\tShell shell2 = new Shell();", "+\tshell2.open();", "+\t", "+\t/* Test setActive for visible shell. */", "-\tassertTrue(\":a:\", shell.getDisplay().getActiveShell() == shell);", "+\tassertTrue(\"visible shell was not made active\", shell.getDisplay().getActiveShell() == shell);", "+\t", "+\t/* Test setActive for visible dialog shell. */", "+\tshell2.setActive();", "+\ttestShell.setVisible(true);", "+\ttestShell.setActive();", "+\tassertTrue(\"visible dialog shell was not made active\", testShell.getDisplay().getActiveShell() == testShell);", "+\t", "+\t/* Test setActive for non-visible shell. */", "+\tshell2.setActive();", "+\tshell.setVisible(false);", "+\tshell.setActive();", "+\tassertTrue(\"non-visible shell was made active\", shell.getDisplay().getActiveShell() != shell);", "+", "+\t/* Test setActive for non-visible dialog shell. */", "+\tshell2.setActive();", "+\ttestShell.setVisible(false);", "+\ttestShell.setActive();", "+\tassertTrue(\"non-visible dialog shell was made active\", testShell.getDisplay().getActiveShell() != testShell);", "+\t", "+\tshell2.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ccf85334189e0af82002028946a49b0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/gtk/org/eclipse/swt/browser/WebKit.java", "commitBeforeChange": "8614680ae78fee56d42eb3d94f28a75f18d340b5", "commitAfterChange": "9f7ccea14bb1fb11d1071f5e85bfb64c67f560bd", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-    scrolledWindow = OS.gtk_scrolled_window_new (0, 0);", "-    OS.gtk_scrolled_window_set_policy (scrolledWindow, OS.GTK_POLICY_AUTOMATIC, OS.GTK_POLICY_AUTOMATIC);", "-    webView = WebKitGTK.webkit_web_view_new ();", "-    webViewData = C.malloc (C.PTR_SIZEOF);", "-    C.memmove (webViewData, new int /*long*/[] {webView}, C.PTR_SIZEOF);", "-    OS.gtk_container_add (scrolledWindow, webView);", "-    OS.gtk_container_add (browser.handle, scrolledWindow);", "-    OS.gtk_widget_show (scrolledWindow);", "+\tscrolledWindow = OS.gtk_scrolled_window_new (0, 0);", "+\tOS.gtk_scrolled_window_set_policy (scrolledWindow, OS.GTK_POLICY_AUTOMATIC, OS.GTK_POLICY_AUTOMATIC);", "+\twebView = WebKitGTK.webkit_web_view_new ();", "+\twebViewData = C.malloc (C.PTR_SIZEOF);", "+\tC.memmove (webViewData, new int /*long*/[] {webView}, C.PTR_SIZEOF);", "+\tOS.gtk_container_add (scrolledWindow, webView);", "+\tOS.gtk_container_add (browser.handle, scrolledWindow);", "+\tOS.gtk_widget_show (scrolledWindow);", "-    OS.g_signal_connect (webView, WebKitGTK.notify_load_status, Proc3.getAddress (), NOTIFY_LOAD_STATUS);", "-    OS.g_signal_connect (webView, WebKitGTK.notify_progress, Proc3.getAddress (), NOTIFY_PROGRESS);", "-    OS.g_signal_connect (webView, WebKitGTK.notify_title, Proc3.getAddress (), NOTIFY_TITLE);", "-    OS.g_signal_connect (webView, WebKitGTK.populate_popup, Proc3.getAddress (), POPULATE_POPUP);", "-    OS.g_signal_connect (webView, WebKitGTK.resource_request_starting, Proc6.getAddress (), RESOURCE_REQUEST_STARTING);", "-    OS.g_signal_connect (webView, WebKitGTK.status_bar_text_changed, Proc3.getAddress (), STATUS_BAR_TEXT_CHANGED);", "-    OS.g_signal_connect (webView, WebKitGTK.web_view_ready, Proc2.getAddress (), WEB_VIEW_READY);", "-    OS.g_signal_connect (webView, WebKitGTK.window_object_cleared, Proc5.getAddress (), WINDOW_OBJECT_CLEARED);", "+\tOS.g_signal_connect (webView, WebKitGTK.notify_load_status, Proc3.getAddress (), NOTIFY_LOAD_STATUS);", "+\tOS.g_signal_connect (webView, WebKitGTK.notify_progress, Proc3.getAddress (), NOTIFY_PROGRESS);", "+\tOS.g_signal_connect (webView, WebKitGTK.notify_title, Proc3.getAddress (), NOTIFY_TITLE);", "+\tOS.g_signal_connect (webView, WebKitGTK.populate_popup, Proc3.getAddress (), POPULATE_POPUP);", "+\tOS.g_signal_connect (webView, WebKitGTK.resource_request_starting, Proc6.getAddress (), RESOURCE_REQUEST_STARTING);", "+\tOS.g_signal_connect (webView, WebKitGTK.status_bar_text_changed, Proc3.getAddress (), STATUS_BAR_TEXT_CHANGED);", "+\tOS.g_signal_connect (webView, WebKitGTK.web_view_ready, Proc2.getAddress (), WEB_VIEW_READY);", "+\tOS.g_signal_connect (webView, WebKitGTK.window_object_cleared, Proc5.getAddress (), WINDOW_OBJECT_CLEARED);", "-\tOS.g_signal_connect (scrolledWindow, OS.event, Proc3.getAddress (), 0);", "+\tOS.g_signal_connect (webView, OS.button_press_event, JSDOMEventProc.getAddress (), 0);", "+\tOS.g_signal_connect (webView, OS.button_release_event, JSDOMEventProc.getAddress (), 0);", "+\tOS.g_signal_connect (webView, OS.key_press_event, JSDOMEventProc.getAddress (), 0);", "+\tOS.g_signal_connect (webView, OS.key_release_event, JSDOMEventProc.getAddress (), 0);", "+\tOS.g_signal_connect (webView, OS.scroll_event, JSDOMEventProc.getAddress (), 0);", "+\tOS.g_signal_connect (webView, OS.motion_notify_event, JSDOMEventProc.getAddress (), 0);", "+", "-\tOS.g_signal_connect (scrolledWindow, OS.button_press_event, Proc3.getAddress (), STOP_PROPOGATE);", "-\tOS.g_signal_connect (scrolledWindow, OS.button_release_event, Proc3.getAddress (), STOP_PROPOGATE);", "-\tOS.g_signal_connect (scrolledWindow, OS.key_press_event, Proc3.getAddress (), STOP_PROPOGATE);", "-\tOS.g_signal_connect (scrolledWindow, OS.key_release_event, Proc3.getAddress (), STOP_PROPOGATE);", "-\tOS.g_signal_connect (scrolledWindow, OS.scroll_event, Proc3.getAddress (), STOP_PROPOGATE);", "-\tOS.g_signal_connect (scrolledWindow, OS.motion_notify_event, Proc3.getAddress (), STOP_PROPOGATE);", "+\tOS.g_signal_connect (scrolledWindow, OS.button_press_event, JSDOMEventProc.getAddress (), STOP_PROPOGATE);", "+\tOS.g_signal_connect (scrolledWindow, OS.button_release_event, JSDOMEventProc.getAddress (), STOP_PROPOGATE);", "+\tOS.g_signal_connect (scrolledWindow, OS.key_press_event, JSDOMEventProc.getAddress (), STOP_PROPOGATE);", "+\tOS.g_signal_connect (scrolledWindow, OS.key_release_event, JSDOMEventProc.getAddress (), STOP_PROPOGATE);", "+\tOS.g_signal_connect (scrolledWindow, OS.scroll_event, JSDOMEventProc.getAddress (), STOP_PROPOGATE);", "+\tOS.g_signal_connect (scrolledWindow, OS.motion_notify_event, JSDOMEventProc.getAddress (), STOP_PROPOGATE);", "-    int /*long*/ settings = WebKitGTK.webkit_web_view_get_settings (webView);", "-    OS.g_object_set (settings, WebKitGTK.javascript_can_open_windows_automatically, 1, 0);", "-    OS.g_object_set (settings, WebKitGTK.enable_universal_access_from_file_uris, 1, 0);", "-    byte[] bytes = Converter.wcsToMbcs (null, \"UTF-8\", true); // $NON-NLS-1$", "-    OS.g_object_set (settings, WebKitGTK.default_encoding, bytes, 0);", "+\tint /*long*/ settings = WebKitGTK.webkit_web_view_get_settings (webView);", "+\tOS.g_object_set (settings, WebKitGTK.javascript_can_open_windows_automatically, 1, 0);", "+\tOS.g_object_set (settings, WebKitGTK.enable_universal_access_from_file_uris, 1, 0);", "+\tbyte[] bytes = Converter.wcsToMbcs (null, \"UTF-8\", true); // $NON-NLS-1$", "+\tOS.g_object_set (settings, WebKitGTK.default_encoding, bytes, 0);", "-    Listener listener = new Listener () {", "+\tListener listener = new Listener () {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeb76a4eaa59a28effcbb88899252bcc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "83bc342b5fc11dbb9c15fc9887a8665981477197", "commitAfterChange": "e44d652075f7ac732c62cc5aa3d24c42dc8233dd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\torg.eclipse.swt.internal.carbon.Point bounds = new org.eclipse.swt.internal.carbon.Point ();", "-\t\t// NEEDS work - only works for default font", "-\t\tshort [] baseLine = new short [1];", "-\t\tif (OS.GetThemeTextDimensions (ptr [0], (short)OS.kThemeSystemFont, OS.kThemeStateActive, false, bounds, baseLine) == OS.noErr) {", "-\t\t\twidth = Math.max (width, bounds.h);", "-\t\t\theight = Math.max (height, bounds.v);", "+\t\torg.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point ();", "+\t\tif (font == null) {", "+\t\t\tOS.GetThemeTextDimensions (ptr [0], (short)OS.kThemeSystemFont, OS.kThemeStateActive, false, ioBounds, null);", "+\t\t} else {", "+\t\t\tint [] currentPort = new int [1];", "+\t\t\tOS.GetPort (currentPort);", "+\t\t\tOS.SetPortWindowPort (OS.GetControlOwner (handle));", "+\t\t\tOS.TextFont (font.id);", "+\t\t\tOS.TextFace (font.style);", "+\t\t\tOS.TextSize (font.size);", "+\t\t\tOS.GetThemeTextDimensions (ptr [0], (short) OS.kThemeCurrentPortFont, OS.kThemeStateActive, false, ioBounds, null);", "+\t\t\tOS.SetPort (currentPort [0]);", "+\t\twidth = Math.max (width, ioBounds.h);", "+\t\theight = Math.max (height, ioBounds.v);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5840a5b1b6d3ff99ef77e854f8e00ad9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "3a4151df7f890efbc61e9a01d33c3ead4c2645d9", "commitAfterChange": "c762252cf769015e8f116caa1f2d177bbf731286", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "\r \r LRESULT WM_WINDOWPOSCHANGING (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_WINDOWPOSCHANGING (int wParam, int lParam)", "diff": ["-\t* Bug in Windows.  When a flat tool bar is wrapped,\r", "-\t* Windows draws a horizontal separator between the\r", "-\t* rows.  The tool bar does not draw the first or\r", "-\t* the last two pixels of this separator.  When the\r", "-\t* toolbar is resized to be bigger, only the new\r", "-\t* area is drawn and the last two pixels, which are\r", "-\t* blank are drawn over by separator.  This leaves\r", "-\t* garbage on the screen.  The fix is to damage the\r", "-\t* pixels.\r", "+\t* Feature in Windows.  When a tool bar that contains\r", "+\t* separators is wrapped, under certain circumstances,\r", "+\t* Windows redraws the entire tool bar unnecessarily\r", "+\t* when resized no item is moves.  Whether the entire\r", "+\t* toolbar is damaged or not seems to depend on the\r", "+\t* size of the tool bar and the position of the separators.\r", "+\t* The fix is to ensure that the newly exposed areas are\r", "+\t* always damaged, and avoid the redraw when no tool item\r", "+\t* moves.\r", "+\tint oldHeight = oldRect.bottom - oldRect.top;\r", "+\tint newHeight = newRect.bottom - newRect.top;\r", "+\t\t/*\r", "+\t\t* Bug in Windows.  When a flat tool bar is wrapped,\r", "+\t\t* Windows draws a horizontal separator between the\r", "+\t\t* rows.  The tool bar does not draw the first or\r", "+\t\t* the last two pixels of this separator.  When the\r", "+\t\t* toolbar is resized to be bigger, only the new\r", "+\t\t* area is drawn and the last two pixels, which are\r", "+\t\t* blank are drawn over by separator.  This leaves\r", "+\t\t* garbage on the screen.  The fix is to damage the\r", "+\t\t* pixels.\r", "+\t\t*/\r", "-\t\trect.left = oldWidth - 2;\r", "-\t\trect.right = oldWidth;\r", "-\t\trect.bottom = newRect.bottom - newRect.top;\r", "+\t\tOS.SetRect (rect, oldWidth - 2, 0, oldWidth, newHeight);\r", "+\t\tOS.SetRect (rect, oldRect.right, newRect.top, newRect.right, newRect.bottom);\r", "+\t\tOS.InvalidateRect (handle, rect, true);\r", "+\t}\r", "+\tif (newHeight > oldHeight) {\r", "+\t\tRECT rect = new RECT ();\r", "+\t\tOS.SetRect (rect, newRect.left, oldRect.bottom, newRect.right, newRect.bottom);\r", "+\t\tOS.InvalidateRect (handle, rect, true);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b5b1ff02e4217a4f5d84e94a672c5c9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/win32/org/eclipse/swt/program/Program.java", "commitBeforeChange": "8b72b564b9ff2fcb6bceccc2bf17e820d59ce6f9", "commitAfterChange": "4c435280edb60cfbc77445e11e94b7b62760dd4a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static Program findProgram (String extension)", "signatureAfterChange": " public static Program findProgram (String extension)", "diff": ["-\tint [] phkResult = new int [1];", "-\tif (OS.RegOpenKeyEx (OS.HKEY_CLASSES_ROOT, key, 0, OS.KEY_READ, phkResult) != 0) {", "-\t\treturn null;", "-\t}", "-\tint [] lpcbData = new int [1];", "-\tint result = OS.RegQueryValueEx (phkResult [0], null, 0, null, (TCHAR) null, lpcbData);", "-\tif (result == 0) {", "-\t\tTCHAR lpData = new TCHAR (0, lpcbData [0] / TCHAR.sizeof);", "-\t\tresult = OS.RegQueryValueEx (phkResult [0], null, 0, null, lpData, lpcbData);", "-\t\tif (result == 0) program = getProgram (lpData.toString (0, lpData.strlen ()));", "+\tif (OS.IsWinCE) {", "+\t\tint [] phkResult = new int [1];", "+\t\tif (OS.RegOpenKeyEx (OS.HKEY_CLASSES_ROOT, key, 0, OS.KEY_READ, phkResult) != 0) {", "+\t\t\treturn null;", "+\t\t}", "+\t\tint [] lpcbData = new int [1];", "+\t\tint result = OS.RegQueryValueEx (phkResult [0], null, 0, null, (TCHAR) null, lpcbData);", "+\t\tif (result == 0) {", "+\t\t\tTCHAR lpData = new TCHAR (0, lpcbData [0] / TCHAR.sizeof);", "+\t\t\tresult = OS.RegQueryValueEx (phkResult [0], null, 0, null, lpData, lpcbData);", "+\t\t\tif (result == 0) program = getProgram (lpData.toString (0, lpData.strlen ()));", "+\t\t}", "+\t\tOS.RegCloseKey (phkResult [0]);", "+\t} else {", "+\t\tString command = assocQueryString (OS.ASSOCSTR_COMMAND, key, true);", "+\t\tif (command != null) {", "+\t\t\tString name = null;", "+\t\t\tif (name == null) name = assocQueryString (OS.ASSOCSTR_FRIENDLYDOCNAME, key, false);", "+\t\t\tif (name == null) name = assocQueryString (OS.ASSOCSTR_FRIENDLYAPPNAME, key, false);", "+\t\t\tif (name == null) name = \"\";", "+\t\t\tString iconName = assocQueryString (OS.ASSOCSTR_DEFAULTICON, key, true);", "+\t\t\tif (iconName == null) iconName = \"\";", "+\t\t\tprogram = new Program ();", "+\t\t\tprogram.name = name;", "+\t\t\tprogram.command = command;", "+\t\t\tprogram.iconName = iconName;", "+\t\t}", "-\tOS.RegCloseKey (phkResult [0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57892bf19e24a268ef694b0b94b35382", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleFactory.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tstatic int initTextIfaceCB (int iface)", "signatureAfterChange": "  \tstatic int initTextIfaceCB (int iface)", "diff": ["-\t\tAtkTextIface textInterface = new AtkTextIface ();", "-\t\tATK.memmove (textInterface, iface);", "-\t\ttextInterface.get_caret_offset = AtkTextCB_get_caret_offset.getAddress ();", "-\t\ttextInterface.get_character_at_offset = AtkTextCB_get_character_at_offset.getAddress ();", "-\t\ttextInterface.get_character_count = AtkTextCB_get_character_count.getAddress ();", "-\t\ttextInterface.get_n_selections = AtkTextCB_get_n_selections.getAddress ();", "-\t\ttextInterface.get_selection = AtkTextCB_get_selection.getAddress ();", "-\t\ttextInterface.get_text = AtkTextCB_get_text.getAddress ();", "-\t\ttextInterface.get_text_after_offset = AtkTextCB_get_text_after_offset.getAddress ();", "-\t\ttextInterface.get_text_at_offset = AtkTextCB_get_text_at_offset.getAddress ();", "-\t\ttextInterface.get_text_before_offset = AtkTextCB_get_text_before_offset.getAddress ();", "-\t\tATK.memmove (iface, textInterface);", "+\t\tAtkTextIface inter = new AtkTextIface ();", "+\t\tATK.memmove (inter, iface);", "+\t\tinter.get_range_extents = AtkTextCB_get_range_extents.getAddress ();", "+\t\tinter.get_character_extents = AtkTextCB_get_character_extents.getAddress ();", "+\t\tinter.get_run_attributes= AtkTextCB_get_run_attributes.getAddress ();", "+\t\tinter.get_offset_at_point = AtkTextCB_get_offset_at_point.getAddress ();", "+\t\tinter.add_selection = AtkTextCB_add_selection.getAddress ();", "+\t\tinter.remove_selection = AtkTextCB_remove_selection.getAddress ();", "+\t\tinter.set_selection = AtkTextCB_set_selection.getAddress ();", "+\t\tinter.get_caret_offset = AtkTextCB_get_caret_offset.getAddress ();", "+\t\tinter.set_caret_offset = AtkTextCB_set_caret_offset.getAddress ();", "+\t\tinter.get_character_at_offset = AtkTextCB_get_character_at_offset.getAddress ();", "+\t\tinter.get_character_count = AtkTextCB_get_character_count.getAddress ();", "+\t\tinter.get_n_selections = AtkTextCB_get_n_selections.getAddress ();", "+\t\tinter.get_selection = AtkTextCB_get_selection.getAddress ();", "+\t\tinter.get_text = AtkTextCB_get_text.getAddress ();", "+\t\tinter.get_text_after_offset = AtkTextCB_get_text_after_offset.getAddress ();", "+\t\tinter.get_text_at_offset = AtkTextCB_get_text_at_offset.getAddress ();", "+\t\tinter.get_text_before_offset = AtkTextCB_get_text_before_offset.getAddress ();", "+\t\tinter.get_bounded_ranges = AtkTextCB_get_bounded_ranges.getAddress ();", "+\t\tATK.memmove (iface, inter);", "+\t\treturn 0;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2461d1db408ea953a0444a5af3565bcb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "5b4363330acbbd4eecdd36d4c211071a9e9ed361", "commitAfterChange": "7b1329ce4559c314d7caaf6d49255a2e36ae8db9", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 62, "signatureBeforeChange": "  int QueryInterface (int riid, int ppvObject)", "signatureAfterChange": "  int QueryInterface (int riid, int ppvObject)", "diff": ["+\t\tSystem.out.println(\"QI'd for nsISupports\");", "+\t\tSystem.out.println(\"QI'd for nsIClassInfo\");", "+\t\tSystem.out.println(\"QI'd for nsISecurityCheckedComponent\");", "+\t\tSystem.out.println(\"QI'd for EXTERNAL_IID\");", "+\tif (!Mozilla.IsPre_4) {", "+\t\tnsID NS_ISCRIPT_OBJECT_OWNER_IID = new nsID(\"8f6bca7e-ce42-11d1-b724-00600891d8c9\");", "+\t\tif (guid.Equals(NS_ISCRIPT_OBJECT_OWNER_IID)) {", "+\t\t\tSystem.out.println(\"QI'd for NS_ISCRIPT_OBJECT_OWNER\");", "+\t\t\tXPCOM.memmove (ppvObject, new int /*long*/[] {scriptObjectOwner.getAddress ()}, C.PTR_SIZEOF);", "+\t\t\tAddRef();", "+\t\t\treturn XPCOM.NS_OK;", "+\t\t}", "+\t}", "+\t", "+//\tnsID NS_ASDF_IID = new nsID(\"3eedba38-8d22-41e1-817a-0e43e165b664\");", "+//\tif (guid.Equals (NS_ASDF_IID)) {", "+//\t\tSystem.out.println(\"QI'd for nsIScriptObjectPrincipal\");", "+//\t\tXPCOM.memmove (ppvObject, new int /*long*/[] {external.getAddress ()}, C.PTR_SIZEOF);", "+//\t\tAddRef();", "+//\t\treturn XPCOM.NS_OK;", "+//\t}", "+", "+//\tif (!Mozilla.IsPre_4) {", "+//\t\tnsID nsIXPCScriptable_IID = new nsID(\"a40ce52e-2d8c-400f-9af2-f8784a656070\");", "+//\t\tif (guid.Equals (nsIXPCScriptable_IID)) {", "+//\t\t\tSystem.out.println(\"QI'd for nsIXPCScriptable_IID\");", "+//\t\t\tXPCOM.memmove (ppvObject, new int /*long*/[] {xpcScriptable.getAddress ()}, C.PTR_SIZEOF);", "+//\t\t\tAddRef();", "+//\t\t\treturn XPCOM.NS_OK;", "+//\t\t}", "+//\t}", "+\t", "+\tSystem.out.println(\"no answer for: \" + guid.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0f926c41519350d4da9191b35da224e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "bcae53a26772055b8869d30c866622a9534b0589", "commitAfterChange": "11d31cfcd46f7ddba8b45a9587232d34b5772fed", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 50, "signatureBeforeChange": "  \tprivate void drawFrame(Object callData)", "signatureAfterChange": " \t \tprivate void drawFrame(Object callData)", "diff": ["+\t", "+\tprivate void drawFrame(Object callData) {", "+\t\tif (fFrameRect != null) {", "+\t\t\tGC gc= new GC(this);", "+\t\t\t", "+\t\t\tint damageRegion= 0;", "+\t\t\tif (callData instanceof MacControlEvent)", "+\t\t\t\tdamageRegion= ((MacControlEvent)callData).getDamageRegionHandle();", "+\t\t\t\t", "+\t\t\ttry {", "+\t\t\t\tRectangle r= gc.carbon_focus(damageRegion);", "+\t\t\t\tif (!r.isEmpty()) {", "+\t\t\t\t\tMacRect br= new MacRect();", "+\t\t\t\t\tOS.GetControlBounds(handle, br.getData());", "+\t\t\t\t\t", "+\t\t\t\t\tMacRect bounds= new MacRect(fFrameRect.x-br.getX(), fFrameRect.y-br.getY(),", "+\t\t\t\t\t\t\t\t\t\t\t\tfFrameRect.width, fFrameRect.height);", "+\t\t\t\t\tbounds.inset(-1, -1, -1, -1);", "+\t\t\t\t\tOS.DrawThemeEditTextFrame(bounds.getData(), OS.kThemeStateActive);", "+\t\t\t\t\t", "+\t\t\t\t\tOS.DrawThemeFocusRect(bounds.getData(), false);\t// clear the background first", "+\t\t\t\t\tif (getDisplay().getFocusControl() == this)", "+\t\t\t\t\t\tOS.DrawThemeFocusRect(bounds.getData(), true);", "+\t\t\t\t}", "+\t\t\t} finally {", "+\t\t\t\tgc.carbon_unfocus();", "+\t\t\t}", "+\t\t}", "-", "-\tprivate void drawFrame(Object callData) {", "-\t\tif (fFrameRect != null) {", "-\t\t\tGC gc= new GC(this);", "-\t\t\tint damageRegion= 0;", "-\t\t\tif (callData instanceof MacControlEvent)", "-\t\t\t\tdamageRegion= ((MacControlEvent)callData).getDamageRegionHandle();", "-\t\t\ttry {", "-\t\t\t\tRectangle r= gc.carbon_focus(damageRegion);", "-\t\t\t\tif (!r.isEmpty()) {", "-\t\t\t\t\tMacRect bounds= new MacRect(fFrameRect);", "-\t\t\t\t\tshort[] b= bounds.getData();", "-\t\t\t\t\tb[0]--;", "-\t\t\t\t\tb[1]--;", "-\t\t\t\t\tb[2]++;", "-\t\t\t\t\tb[3]++;", "-\t\t\t\t\tOS.DrawThemeEditTextFrame(b, OS.kThemeStateActive);", "-\t\t\t\t\tControl focus= getDisplay().getFocusControl();", "-\t\t\t\t\tOS.DrawThemeFocusRect(b, focus == this);", "-\t\t\t\t}", "-\t\t\t} finally {", "-\t\t\t\tgc.carbon_unfocus();", "-\t\t\t}", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6710cd8e5dd16d2b6c8a4a42cc7c1111", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TreeDragAndDropEffect.java", "commitBeforeChange": "05d38a410364e498a6aee8f9d16f948f2485a728", "commitAfterChange": "9b3777ac363c793d1cb46f33f1fe142affed7cf5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void showDropTargetEffect(int effect, int x, int y)", "signatureAfterChange": "  void showDropTargetEffect(int effect, int x, int y)", "diff": ["+", "+\t\t\t\tOS.ImageList_DragShowNolock(false);", "+\t\t\t\ttree.update();", "+\t\t\t\tOS.ImageList_DragShowNolock(true);", "+\t\t\t\tOS.ImageList_DragShowNolock(false);", "+\t\t\t\ttree.update();", "+\t\t\t\tOS.ImageList_DragShowNolock(true);", "+\t\tOS.ImageList_DragShowNolock(false);", "+\t\ttree.update();", "+\t\tOS.ImageList_DragShowNolock(true);", "+\t\tOS.ImageList_DragShowNolock(false);", "+\t\ttree.update();", "+\t\tOS.ImageList_DragShowNolock(true);", "+\t\t\tOS.ImageList_DragShowNolock(false);", "+\t\t\ttree.update();", "+\t\t\tOS.ImageList_DragShowNolock(true);", "-\t\tif (clearInsert) tree.setInsertMark(null, false);", "+\t\tif (clearInsert) {", "+\t\t\tOS.ImageList_DragShowNolock(false);", "+\t\t\ttree.setInsertMark(null, false);", "+\t\t\ttree.update();", "+\t\t\tOS.ImageList_DragShowNolock(true);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d13d1261599353440b1cf984c7834d87", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TableDragAndDropEffect.java", "commitBeforeChange": "05d38a410364e498a6aee8f9d16f948f2485a728", "commitAfterChange": "9b3777ac363c793d1cb46f33f1fe142affed7cf5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void showDropTargetEffect(int effect, int x, int y)", "signatureAfterChange": "  void showDropTargetEffect(int effect, int x, int y)", "diff": ["+", "+\t\t\t\tOS.ImageList_DragShowNolock(false);", "+\t\t\t\ttable.update();", "+\t\t\t\tOS.ImageList_DragShowNolock(true);", "-\tLVITEM lvItem = new LVITEM ();", "-\tlvItem.stateMask = OS.LVIS_DROPHILITED;", "-\tOS.SendMessage (handle, OS.LVM_SETITEMSTATE, -1, lvItem);", "+\t", "-\t\tlvItem.state = OS.LVIS_DROPHILITED;", "-\t\tOS.SendMessage (handle, OS.LVM_SETITEMSTATE, pinfo.iItem, lvItem);", "+\t\tTableItem item = table.getItem(pinfo.iItem);", "+\t\tif (dropHighlight != item) {", "+\t\t\tLVITEM lvItem = new LVITEM();", "+\t\t\tlvItem.stateMask = OS.LVIS_DROPHILITED;", "+\t\t\tOS.ImageList_DragShowNolock(false);", "+\t\t\tOS.SendMessage(handle, OS.LVM_SETITEMSTATE, -1, lvItem);\t\t", "+\t\t\tlvItem.state = OS.LVIS_DROPHILITED;", "+\t\t\tOS.SendMessage(handle, OS.LVM_SETITEMSTATE, pinfo.iItem, lvItem);", "+\t\t\ttable.update();", "+\t\t\tOS.ImageList_DragShowNolock(true);", "+\t\t\tdropHighlight = item;", "+\t\t}", "+\t} else {", "+\t\tif (dropHighlight != null) {", "+\t\t\tLVITEM lvItem = new LVITEM ();", "+\t\t\tlvItem.stateMask = OS.LVIS_DROPHILITED;", "+\t\t\tOS.ImageList_DragShowNolock(false);", "+\t\t\tOS.SendMessage(handle, OS.LVM_SETITEMSTATE, -1, lvItem);\t\t", "+\t\t\ttable.update();", "+\t\t\tOS.ImageList_DragShowNolock(true);", "+\t\t\tdropHighlight = null;", "+\t\t}", "+"]}], "num": 745}
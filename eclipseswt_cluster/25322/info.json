{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6107d7b3c64560adf10b469cdd6e79e", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6276d134d51d65a34c6abfdb8d2d63d1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "413c8a539b0cc8dc9533184e03603ed58f62f9a9", "commitAfterChange": "1946f53da43fe63bcaa044f1e6b67fe7f1fdae23", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r static int scalePixmap(int display, int pixmap, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean flipX, boolean flipY)", "signatureAfterChange": "\r static int scalePixmap(int display, int pixmap, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean flipX, boolean flipY)", "diff": ["-\t\tcase 1: {\r", "-\t\t\tint bitOrder = xSrcImage.bitmap_bit_order == OS.MSBFirst ? ImageData.MSB_FIRST : ImageData.LSB_FIRST;\r", "-\t\t\tint bplX = ((destWidth + 7) / 8 + 3) & 0xFFFC;\r", "-\t\t\tint bufSize = bplX * destHeight;\r", "-\t\t\tbyte[] buf = new byte[bufSize];\r", "-\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "-\t\t\t\tsrcData, 1, xSrcImage.bytes_per_line, bitOrder, 0, 0, srcWidth, srcHeight, null, null, null,\r", "-\t\t\t\tImageData.ALPHA_OPAQUE, null, 0, 0, 0,\r", "-\t\t\t\tbuf, 1, bplX, bitOrder, 0, 0, destWidth, destHeight, null, null, null,\r", "-\t\t\t\tflipX, flipY);\r", "-\t\t\tint bufPtr = OS.XtMalloc(bufSize);\r", "-\t\t\tOS.memmove(bufPtr, buf, bufSize);\r", "-\t\t\txImagePtr = OS.XCreateImage(display, visual, 1, OS.XYBitmap, 0, bufPtr, destWidth, destHeight, 32, bplX);\r", "+\t\tcase 1:\r", "+\t\tcase 4:\r", "+\t\tcase 8: {\r", "+\t\t\tint format = xSrcImage.bits_per_pixel == 1 ? OS.XYBitmap : OS.ZPixmap;\r", "+\t\t\txImagePtr = OS.XCreateImage(display, visual, xSrcImage.depth, format, 0, 0, destWidth, destHeight, xSrcImage.bitmap_pad, 0);\r", "-\t\t\txImage.byte_order = OS.MSBFirst;\r", "-\t\t\txImage.bitmap_unit = 8;\r", "-\t\t\txImage.bitmap_bit_order = xSrcImage.bitmap_bit_order;\r", "+\t\t\tint bufSize = xImage.bytes_per_line * xImage.height;\r", "+\t\t\tint bufPtr = OS.XtMalloc(bufSize);\r", "+\t\t\txImage.data = bufPtr;\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t\tcase 4: {\r", "-\t\t\t/* Untested */\r", "-\t\t\tint bplX = (destWidth + 3) & 0xFFFC;\r", "-\t\t\tint bufSize = bplX * destHeight;\r", "+\t\t\tint order = xSrcImage.bits_per_pixel == 1 ? xSrcImage.bitmap_bit_order : xSrcImage.byte_order;\r", "+\t\t\tint srcOrder = order == OS.MSBFirst ? ImageData.MSB_FIRST : ImageData.LSB_FIRST;\r", "+\t\t\torder = xImage.bits_per_pixel == 1 ? xImage.bitmap_bit_order : xImage.byte_order;\r", "+\t\t\tint destOrder = order == OS.MSBFirst ? ImageData.MSB_FIRST : ImageData.LSB_FIRST;\r", "-\t\t\t\tsrcData, 4, xSrcImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, srcWidth, srcHeight, null, null, null,\r", "+\t\t\t\tsrcData, xSrcImage.bits_per_pixel, xSrcImage.bytes_per_line, srcOrder, 0, 0, srcWidth, srcHeight, null, null, null,\r", "-\t\t\t\tbuf, 4, bplX, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, null, null, null,\r", "+\t\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, null, null, null,\r", "-\t\t\tint bufPtr = OS.XtMalloc(bufSize);\r", "-\t\t\txImagePtr = OS.XCreateImage(display, visual, 4, OS.ZPixmap, 0, bufPtr, destWidth, destHeight, 32, bplX);\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t\tcase 8: {\r", "-\t\t\tint bplX = (destWidth + 3) & 0xFFFC;\r", "-\t\t\tint bufSize = bplX * destHeight;\r", "-\t\t\tbyte[] buf = new byte[bufSize];\r", "-\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "-\t\t\t\tsrcData, 8, xSrcImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, srcWidth, srcHeight, null, null, null,\r", "-\t\t\t\tImageData.ALPHA_OPAQUE, null, 0, 0, 0,\r", "-\t\t\t\tbuf, 8, bplX, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, null, null, null,\r", "-\t\t\t\tflipX, flipY);\r", "-\t\t\tint bufPtr = OS.XtMalloc(bufSize);\r", "-\t\t\tOS.memmove(bufPtr, buf, bufSize);\r", "-\t\t\txImagePtr = OS.XCreateImage(display, visual, 8, OS.ZPixmap, 0, bufPtr, destWidth, destHeight, 32, bplX);\r", "-\t\t\txImagePtr = OS.XCreateImage(display, visual, xSrcImage.depth, OS.ZPixmap, 0, 0, destWidth, destHeight, 32, 0);\r", "+\t\t\txImagePtr = OS.XCreateImage(display, visual, xSrcImage.depth, OS.ZPixmap, 0, 0, destWidth, destHeight, xSrcImage.bitmap_pad, 0);\r", "-\t\t\tint bufSize = xImage.bytes_per_line * destHeight;\r", "+\t\t\tint bufSize = xImage.bytes_per_line * xImage.height;\r", "+\t\t\tint bufPtr = OS.XtMalloc(bufSize);\r", "+\t\t\txImage.data = bufPtr;\r", "+\t\t\tOS.memmove(xImagePtr, xImage, XImage.sizeof);\r", "-\t\t\tint bufPtr = OS.XtMalloc(bufSize);\r", "-\t\t\txImage.data = bufPtr;\r", "-\t\t\tOS.memmove(xImagePtr, xImage, XImage.sizeof);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5455b299ed2a1c030c5b5134d44920b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "d9dfd82bfea57be5eb6a15f8c2e440de6084ec40", "commitAfterChange": "c5cbd8c4eebd8dd52ab69ee5068130875a54578b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r static int putImage(ImageData image, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, int display, int visual, int screenDepth, XColor[] xcolors, int[] transparentPixel, int drawable, int gc)", "signatureAfterChange": "\r static int putImage(ImageData image, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, int display, int visual, int screenDepth, XColor[] xcolors, int[] transparentPixel, int drawable, int gc)", "diff": ["-\t\t((image.depth == 16 || image.depth == 24 || image.depth == 32) && palette.isDirect)))\r", "+\t\t((image.depth == 8) || (image.depth == 16 || image.depth == 24 || image.depth == 32) && palette.isDirect)))\r", "-\tif (image.depth <= 8) {\r", "+\tif (! palette.isDirect) {\r", "+\tfinal boolean screenDirect;\r", "+\t\tscreenDirect = false;\r", "+\t\tscreenDirect = true;\r", "-\t\tImageData.stretch1(image.data, image.bytesPerLine, ImageData.MSB_FIRST, srcX, srcY, srcWidth, srcHeight,\r", "-\t\t\tbuf, bplX, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, flipX, flipY);\r", "+\t\tImageData.blit(ImageData.BLIT_SRC,\r", "+\t\t\timage.data, 1, image.bytesPerLine, ImageData.MSB_FIRST, srcX, srcY, srcWidth, srcHeight, null, null, null,\r", "+\t\t\tImageData.ALPHA_OPAQUE, null, 0,\r", "+\t\t\tbuf, 1, bplX, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, null, null, null,\r", "+\t\t\tflipX, flipY);\r", "-\tif (image.depth > 8 && screenDepth > 8) {\r", "-\t\tImageData.blit(ImageData.BLIT_SRC,\r", "-\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, palette.redMask, palette.greenMask, palette.blueMask, -1, null, 0,\r", "-\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, xImage.red_mask, xImage.green_mask, xImage.blue_mask,\r", "-\t\t\tflipX, flipY);\r", "-\t} else if (image.depth <= 8 && screenDepth > 8) {\r", "-\t\tImageData.blit(ImageData.BLIT_SRC,\r", "-\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, srcReds, srcGreens, srcBlues, -1, null, 0,\r", "-\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, xImage.red_mask, xImage.green_mask, xImage.blue_mask,\r", "-\t\t\tflipX, flipY);\r", "-\t} else if (image.depth > 8 && screenDepth <= 8) {\r", "-\t\tImageData.blit(ImageData.BLIT_SRC,\r", "-\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, palette.redMask, palette.greenMask, palette.blueMask, -1, null, 0,\r", "-\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, destReds, destGreens, destBlues,\r", "-\t\t\tflipX, flipY);\r", "-\t} else if (image.depth <= 8 && screenDepth <= 8) {\r", "-\t\tImageData.blit(ImageData.BLIT_SRC,\r", "-\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, srcReds, srcGreens, srcBlues, -1, null, 0,\r", "-\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, destReds, destGreens, destBlues,\r", "-\t\t\tflipX, flipY);\r", "+\tif (palette.isDirect) {\r", "+\t\tif (screenDirect) {\r", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "+\t\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, palette.redMask, palette.greenMask, palette.blueMask,\r", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0,\r", "+\t\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, xImage.red_mask, xImage.green_mask, xImage.blue_mask,\r", "+\t\t\t\tflipX, flipY);\r", "+\t\t} else {\r", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "+\t\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, palette.redMask, palette.greenMask, palette.blueMask,\r", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0,\r", "+\t\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, destReds, destGreens, destBlues,\r", "+\t\t\t\tflipX, flipY);\r", "+\t\t}\r", "+\t} else {\r", "+\t\tif (screenDirect) {\r", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "+\t\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, srcReds, srcGreens, srcBlues,\r", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0,\r", "+\t\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, xImage.red_mask, xImage.green_mask, xImage.blue_mask,\r", "+\t\t\t\tflipX, flipY);\r", "+\t\t} else {\r", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "+\t\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, srcReds, srcGreens, srcBlues,\r", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0,\r", "+\t\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, destReds, destGreens, destBlues,\r", "+\t\t\t\tflipX, flipY);\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49eb0be4a203daaad8acd1ddafb947c3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "413c8a539b0cc8dc9533184e03603ed58f62f9a9", "commitAfterChange": "1946f53da43fe63bcaa044f1e6b67fe7f1fdae23", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " static int putImage(ImageData image, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, int display, int visual, int screenDepth, XColor[] xcolors, int[] transparentPixel, boolean isMask, int drawable, int gc)", "signatureAfterChange": " static int putImage(ImageData image, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, int display, int visual, int screenDepth, XColor[] xcolors, int[] transparentPixel, boolean isMask, int drawable, int gc)", "diff": ["-\r", "-\t\tint bplX = ((destWidth + 7) / 8 + 3) & 0xFFFC;\r", "-\t\tint bufSize = bplX * destHeight;\r", "-\t\tbyte[] buf = new byte[bufSize];\r", "+\t\tint xImagePtr = OS.XCreateImage(display, visual, 1, OS.XYBitmap, 0, 0, destWidth, destHeight, image.scanlinePad * 8, 0);\r", "+\t\tif (xImagePtr == 0) return SWT.ERROR_NO_HANDLES;\r", "+\t\tXImage xImage = new XImage();\r", "+\t\tOS.memmove(xImage, xImagePtr, XImage.sizeof);\r", "+\t\tint bufSize = xImage.bytes_per_line * xImage.height;\r", "-\t\tint xImagePtr = OS.XCreateImage(display, visual, 1, OS.XYBitmap, 0, bufPtr, destWidth, destHeight, 32, bplX);\r", "-\t\tif (xImagePtr == 0) {\r", "-\t\t\tOS.XtFree(bufPtr);\r", "-\t\t\treturn SWT.ERROR_NO_HANDLES;\r", "-\t\t}\r", "+\t\txImage.data = bufPtr;\r", "+\t\tOS.memmove(xImagePtr, xImage, XImage.sizeof);\r", "+\t\tbyte[] buf = new byte[bufSize];\r", "+\t\tint destOrder = xImage.byte_order == OS.MSBFirst ? ImageData.MSB_FIRST : ImageData.LSB_FIRST;\r", "+\t\tImageData.blit(ImageData.BLIT_SRC,\r", "+\t\t\timage.data, image.depth, image.bytesPerLine, image.getByteOrder(), srcX, srcY, srcWidth, srcHeight, null, null, null,\r", "+\t\t\tImageData.ALPHA_OPAQUE, null, 0, srcX, srcY,\r", "+\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, null, null, null,\r", "+\t\t\tflipX, flipY);\r", "+\t\tOS.memmove(xImage.data, buf, bufSize);\r", "+\r", "-\t\tXImage xImage = new XImage();\r", "-\t\tOS.memmove(xImage, xImagePtr, XImage.sizeof);\r", "-\t\txImage.byte_order = OS.MSBFirst;\r", "-\t\txImage.bitmap_unit = 8;\r", "-\t\txImage.bitmap_bit_order = OS.MSBFirst;\r", "-\t\tOS.memmove(xImagePtr, xImage, XImage.sizeof);\r", "-\t\tint destOrder = ImageData.MSB_FIRST;\r", "-\t\tImageData.blit(ImageData.BLIT_SRC,\r", "-\t\t\timage.data, 1, image.bytesPerLine, image.getByteOrder(), srcX, srcY, srcWidth, srcHeight, null, null, null,\r", "-\t\t\tImageData.ALPHA_OPAQUE, null, 0, srcX, srcY,\r", "-\t\t\tbuf, 1, bplX, destOrder, 0, 0, destWidth, destHeight, null, null, null,\r", "-\t\t\tflipX, flipY);\r", "-\t\t\r", "-\t\tOS.memmove(xImage.data, buf, bufSize);\r", "-\tint xImagePtr = OS.XCreateImage(display, visual, screenDepth, OS.ZPixmap, 0, 0, destWidth, destHeight, 32, 0);\r", "+\tint xImagePtr = OS.XCreateImage(display, visual, screenDepth, OS.ZPixmap, 0, 0, destWidth, destHeight, image.scanlinePad * 8, 0);\r", "-\tint bufSize = xImage.bytes_per_line * destHeight;\r", "-\tbyte[] buf = new byte[bufSize];\r", "+\tint bufSize = xImage.bytes_per_line * xImage.height;\r", "-\tint srcOrder = image.getByteOrder();\r", "+\tbyte[] buf = new byte[bufSize];\r", "-\t\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, palette.redMask, palette.greenMask, palette.blueMask,\r", "+\t\t\t\timage.data, image.depth, image.bytesPerLine, image.getByteOrder(), srcX, srcY, srcWidth, srcHeight, palette.redMask, palette.greenMask, palette.blueMask,\r", "-\t\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, palette.redMask, palette.greenMask, palette.blueMask,\r", "+\t\t\t\timage.data, image.depth, image.bytesPerLine, image.getByteOrder(), srcX, srcY, srcWidth, srcHeight, palette.redMask, palette.greenMask, palette.blueMask,\r", "-\t\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, srcReds, srcGreens, srcBlues,\r", "+\t\t\t\timage.data, image.depth, image.bytesPerLine, image.getByteOrder(), srcX, srcY, srcWidth, srcHeight, srcReds, srcGreens, srcBlues,\r", "-\t\t\t\timage.data, image.depth, image.bytesPerLine, srcOrder, srcX, srcY, srcWidth, srcHeight, srcReds, srcGreens, srcBlues,\r", "+\t\t\t\timage.data, image.depth, image.bytesPerLine, image.getByteOrder(), srcX, srcY, srcWidth, srcHeight, srcReds, srcGreens, srcBlues,\r"]}], "num": 25322}
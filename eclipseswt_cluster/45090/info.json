{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1da868fb055aeb055f910f8eebf3f918", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ec7e75f091d565d914bbed9b9fd6093", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "5de602b34dc7f20c9d0c9a61397e10d1c3da1885", "commitAfterChange": "8d0b48a25603cd51a4f40a03ee4a20a03407b958", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  void fillPattern(NSBezierPath path, Pattern pattern)", "signatureAfterChange": "  void fillPattern(NSBezierPath path, Pattern pattern)", "diff": ["-\tpattern.gradient.drawFromPoint(pattern.pt1, pattern.pt2, OS.NSGradientDrawsAfterEndingLocation | OS.NSGradientDrawsBeforeStartingLocation);", "+\tNSRect bounds = path.bounds();", "+\tNSPoint start = new NSPoint();", "+\tstart.x = pattern.pt1.x;", "+\tstart.y = pattern.pt1.y;", "+\tNSPoint end = new NSPoint();", "+\tend.x = pattern.pt2.x;", "+\tend.y = pattern.pt2.y;", "+\tfloat difx = end.x - start.x;", "+\tfloat dify = end.y - start.y;", "+\tif (difx == 0 && dify == 0) {", "+\t\tfloat[] color = pattern.color1;", "+\t\tNSColor.colorWithDeviceRed(color[0], color[1], color[2], data.alpha / 255f).setFill();", "+\t\tpath.fill();", "+\t\thandle.restoreGraphicsState();", "+\t\treturn;", "+\t}", "+\tfloat startx, starty, endx, endy;", "+\tif (difx == 0 || dify == 0) {", "+\t\tstartx = bounds.x;", "+\t\tstarty = bounds.y;", "+\t\tendx = bounds.x + bounds.width;", "+\t\tendy = bounds.y + bounds.height;", "+\t\tif (difx < 0 || dify < 0) {", "+\t\t\tstartx = endx;", "+\t\t\tstarty = endy;", "+\t\t\tendx = bounds.x;", "+\t\t\tendy = bounds.y;", "+\t\t}", "+\t} else {", "+\t\tfloat m = (end.y-start.y)/(end.x - start.x);", "+\t\tfloat b = end.y - (m * end.x);", "+\t\tfloat m2 = -1/m; //perpendicular slope", "+\t\tfloat b2 = bounds.y - (m2 * bounds.x);", "+\t\tstartx = endx = (b - b2) / (m2 - m);", "+\t\tb2 = (bounds.y + bounds.height) - (m2 * bounds.x);", "+\t\tfloat x2 = (b - b2) / (m2 - m);", "+\t\tstartx = difx > 0 ? Math.min(startx, x2) : Math.max(startx, x2);", "+\t\tendx = difx < 0 ? Math.min(endx, x2) : Math.max(endx, x2);", "+\t\tb2 = bounds.y - (m2 * (bounds.x + bounds.width));", "+\t\tx2 = (b - b2) / (m2 - m);", "+\t\tstartx = difx > 0 ? Math.min(startx, x2) : Math.max(startx, x2);", "+\t\tendx = difx < 0 ? Math.min(endx, x2) : Math.max(endx, x2);", "+\t\tb2 = (bounds.y + bounds.height) - (m2 * (bounds.x + bounds.width));", "+\t\tx2 = (b - b2) / (m2 - m);", "+\t\tstartx = difx > 0 ? Math.min(startx, x2) : Math.max(startx, x2);", "+\t\tendx = difx < 0 ? Math.min(endx, x2) : Math.max(endx, x2);", "+\t\tstarty = (m * startx) + b;", "+\t\tendy = (m * endx) + b;", "+\t}", "+\tif (difx != 0) {", "+\t\twhile ((difx > 0 && start.x >= startx) || (difx < 0 && start.x <= startx)) {", "+\t\t\tstart.x -= difx;", "+\t\t\tstart.y -= dify;", "+\t\t}", "+\t} else {", "+\t\twhile ((dify > 0 && start.y >= starty) || (dify < 0 && start.y <= starty)) {", "+\t\t\tstart.x -= difx;", "+\t\t\tstart.y -= dify;", "+\t\t}", "+\t}", "+\tend.x = start.x;", "+\tend.y = start.y;", "+\tdo {", "+\t\tend.x += difx;", "+\t\tend.y += dify;", "+\t\tpattern.gradient.drawFromPoint(start, end, 0);", "+\t\tstart.x = end.x;", "+\t\tstart.y = end.y;", "+\t} while (", "+\t\t\t\t(difx > 0  && end.x <= endx) ||", "+\t\t\t\t(difx < 0  && end.x >= endx) ||", "+\t\t\t\t(difx == 0 && ((dify > 0  && end.y <= endy) || (dify < 0  && end.y >= endy)))", "+\t\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f40a221c8268bac4b792dbc633c33e7d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "e2c0bcd6c7ed2c77344cb18b9cc25575efb0575e", "commitAfterChange": "5754542874a79d5f7ae1849fd860183787c05369", "methodNumberBeforeChange": 191, "methodNumberAfterChange": 191, "signatureBeforeChange": " void insertBlockSelectionText(String text, int action)", "signatureAfterChange": " void insertBlockSelectionText(String text)", "diff": ["-}", "-void insertBlockSelectionText(String text, int action) {", "-\tif (text.length() == 1) {", "-\t\tchar key = text.charAt(0);", "-\t\tif (key == SWT.CR || key == SWT.LF) return;", "+}", "+void insertBlockSelectionText(String text) {", "+\tint lineCount = 1;", "+\tfor (int i = 0; i < text.length(); i++) {", "+\t\tchar ch = text.charAt(i);", "+\t\tif (ch == '\\n' || ch == '\\r') {", "+\t\t\tlineCount++;", "+\t\t\tif (ch == '\\r' && i + 1 < text.length() && text.charAt(i + 1) == '\\n') {", "+\t\t\t\ti++;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tString[] lines = new String[lineCount];", "+\tint start = 0;", "+\tlineCount = 0;", "+\tfor (int i = 0; i < text.length(); i++) {", "+\t\tchar ch = text.charAt(i);", "+\t\tif (ch == '\\n' || ch == '\\r') {", "+\t\t\tlines[lineCount++] = text.substring(start, i);", "+\t\t\tif (ch == '\\r' && i + 1 < text.length() && text.charAt(i + 1) == '\\n') {", "+\t\t\t\ti++;", "+\t\t\t}", "+\t\t\tstart = i + 1;", "+\t\t}", "+\t}", "+\tlines[lineCount++] = text.substring(start);", "+\tint firstLine, lastLine, left, right;", "+\tif (blockXLocation != -1) {", "+\t\tfirstLine = getLineIndex(blockYAnchor - getVerticalScrollOffset());", "+\t\tlastLine = getLineIndex(blockYLocation - getVerticalScrollOffset()); ", "+\t\tif (firstLine > lastLine) {", "+\t\t\tint temp = firstLine;", "+\t\t\tfirstLine = lastLine;", "+\t\t\tlastLine = temp;", "+\t\t}", "+\t\tleft = blockXAnchor;", "+\t\tright = blockXLocation;", "+\t\tif (left > right) {", "+\t\t\tleft = blockXLocation;", "+\t\t\tright = blockXAnchor;", "+\t\t}", "+\t} else {", "+\t\tfirstLine = lastLine = getCaretLine();", "+\t\tleft = right = getPointAtOffset(caretOffset).x;", "+\t}", "+\tint index = 0, end, lineIndex = firstLine;", "+\twhile (lineIndex <= lastLine) {", "+\t\tstart = getOffsetAtPoint(left, 0, lineIndex);", "+\t\tend = getOffsetAtPoint(right, 0, lineIndex);", "+\t\tEvent event = new Event();", "+\t\tevent.text = index < lineCount ? lines[index++] : \"\";", "+\t\tevent.start = start;", "+\t\tevent.end = end;", "+\t\tsendKeyEvent(event);", "+\t\tlineIndex++;", "+\t}", "+\twhile (index < lineCount) {", "+\t\tint maxLines = content.getLineCount();", "+\t\tString line;", "+\t\tif (lineIndex < maxLines) {", "+\t\t\tstart = end = getOffsetAtPoint(left, 0, lineIndex);", "+\t\t\tline = lines[index]; ", "+\t\t} else {", "+\t\t\tstart = end = content.getCharCount();", "+\t\t\tline = content.getLineDelimiter() + lines[index];", "+\t\t}", "+\t\tEvent event = new Event();", "+\t\tevent.text = line;", "+\t\tevent.start = start;", "+\t\tevent.end = end;", "+\t\tsendKeyEvent(event);", "+\t\tlineIndex++;", "+\t\tindex++;", "+\t}", "+}", "-\t\t\t\toffset = lineEndOffset + text.length();", "-\t\t\toffset = start + text.length();"]}], "num": 45090}
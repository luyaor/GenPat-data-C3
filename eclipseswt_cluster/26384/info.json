{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "756112572ccb4a1dc8c53fcc6d5ecdfe", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed08a2ff9b60ebe21e53540d92aa3d63", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Table.java", "commitBeforeChange": "69ca4def95e26b4f7985d8aa70882f0b37698d59", "commitAfterChange": "c7ffe68125d78bc1bb1c15b6e270edf7c3020f35", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "  public void test_selectII()", "signatureAfterChange": "  public void test_selectII()", "diff": ["-", "-\ttable.setSelection(0);", "-\t\t", "-\tif (fCheckSWTPolicy) {", "-\t\ttable.select(4, 10);", "-\t\tassertEquals(new int[] {4}, table.getSelectionIndices());", "-\t\ttable.setSelection(4, 10);", "-\t\tassertEquals(new int[] {4}, table.getSelectionIndices()); //for SINGLE setSelection and select are the same", "-", "-\t\ttable.select(5, number - 1);", "-\t\tassertEquals(new int[] {5}, table.getSelectionIndices());", "-\t\ttable.setSelection(5, number - 1);", "-\t\tassertEquals(new int[] {5}, table.getSelectionIndices()); //for SINGLE setSelection and select are the same", "-", "-\t\ttable.select(0, 7);", "-\t\tassertEquals(new int[] {0}, table.getSelectionIndices());", "-\t\ttable.setSelection(0, 7);", "-\t\tassertEquals(new int[] {0}, table.getSelectionIndices()); //for SINGLE setSelection and select are the same", "-", "-\t\ttable.select(9, 5);", "-\t\tassertEquals(new int[] {7}, table.getSelectionIndices());", "-\t\ttable.setSelection(9, 5);", "-\t\tassertEquals(new int[] {}, table.getSelectionIndices()); //for SINGLE setSelection and select are the same", "-\t} // ?? in this case maybe the sel. should be cleared", "-\t", "-\tmakeCleanEnvironment(true);", "-\t", "-\tif (fCheckSWTPolicy) {", "-\t\ttable.select(-100, 1000);", "-\t\tassertEquals(1, table.getSelectionCount());", "-\t\tassertEquals(new int[] {number - 1}, table.getSelectionIndices());", "-\t}", "-\ttable.deselectAll();", "-\tassertEquals(0, table.getSelectionCount());", "-\ttable.select(0, 1000);", "-\tassertEquals(1, table.getSelectionCount());", "-\tif (fCheckSWTPolicy)", "-\t\tassertEquals(new int[] {number - 1}, table.getSelectionIndices());", "-\ttable.deselectAll();", "-\ttable.select(0, number - 1);", "-\tassertEquals(1, table.getSelectionCount());", "-\tif (fCheckSWTPolicy)", "-\t\tassertEquals(new int[] {number - 1}, table.getSelectionIndices());", "-\ttable.deselectAll();", "+", "+\tassertEquals(0, table.getSelectionIndex());", "-\ttable.deselectAll();", "-\ttable.select(number - 1, number);", "-\tassertEquals(1, table.getSelectionCount());", "-\tassertEquals(new int[] {number - 1}, table.getSelectionIndices());", "+", "+\ttable.select(4, 4);", "+\tassertEquals(new int[] {4}, table.getSelectionIndices());", "+", "+\ttable.select(10, 10);", "+\tassertEquals(new int[] {10}, table.getSelectionIndices());", "+", "+\ttable.select(number-1, number-1);", "+\tassertEquals(new int[] {number-1}, table.getSelectionIndices());", "+", "-\tassertEquals(0, table.getSelectionCount());", "-\ttable.deselectAll();", "-\t", "-\tmakeCleanEnvironment(true);", "-\tfor (int i = 0; i < number; i++)", "-\t\titems[i] = new TableItem(table, 0);", "-\ttable.select(-100, 1000);", "-\tif (fCheckSWTPolicy) {", "-\t\tassertEquals(1, table.getSelectionCount());", "-\t\tassertEquals(new int[] {number - 1}, table.getSelectionIndices());", "-\t}", "-\ttable.deselectAll();", "-\tassertEquals(0, table.getSelectionCount());", "-\ttable.select(1000, 0);", "-\tassertEquals(0, table.getSelectionCount());", "+\ttable.select(0, number-1);", "-\ttable.deselectAll();", "-\ttable.select(number - 1, 0);", "-\tif (fCheckSWTPolicy)", "-\t\tassertEquals(0, table.getSelectionCount());", "-\ttable.deselectAll();", "-\ttable.select(0, 0);", "-\tassertEquals(1, table.getSelectionCount());", "-\tassertEquals(new int[] {0}, table.getSelectionIndices());", "-\ttable.deselectAll();", "+", "+\ttable.select(-1, number);", "+\tassertEquals(new int[] {}, table.getSelectionIndices());", "+", "+\ttable.select(4, 5);", "+\tassertEquals(new int[] {}, table.getSelectionIndices());", "+", "+\ttable.select(5, 4);", "+\tassertEquals(new int[] {}, table.getSelectionIndices());", "+", "-\tif (fCheckSWTPolicy) {", "-\t\tassertEquals(0, table.getSelectionCount());", "-\t\tassertEquals(new int[] {}, table.getSelectionIndices());", "-\t}", "-\ttable.deselectAll();", "-\ttable.select(number, number);", "-\tif (fCheckSWTPolicy) {", "-\t\tassertEquals(0, table.getSelectionCount());", "-\t\tassertEquals(new int[] {}, table.getSelectionIndices());", "-\t}", "-\ttable.deselectAll();", "+\tassertEquals(new int[] {}, table.getSelectionIndices());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ca8fe4511e36d35100229f22b1c3e34", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/NativesGenerator.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "  void generateDynamicFunctionCall(Method method, MethodData methodData, Class[] paramTypes, Class returnType, boolean needsReturn)", "signatureAfterChange": "  void generateDynamicFunctionCall(JNIMethod method, JNIParameter[] params, JNIType returnType, JNIType returnType64, boolean needsReturn)", "diff": ["-void generateDynamicFunctionCall(Method method, MethodData methodData, Class[] paramTypes, Class returnType, boolean needsReturn) {", "+void generateDynamicFunctionCall(JNIMethod method, JNIParameter[] params, JNIType returnType, JNIType returnType64, boolean needsReturn) {", "-\tgenerateFunctionCall(method, methodData, paramTypes, returnType, needsReturn);", "+\tgenerateFunctionCall(method, params, returnType, returnType64, needsReturn);", "-\tif (getPlatform().equals(\"win32\")) {", "-\t\toutputln(\"\\t\\tstatic int initialized = 0;\");", "-\t\toutputln(\"\\t\\tstatic HMODULE hm = NULL;\");", "-\t\toutputln(\"\\t\\tstatic FARPROC fp = NULL;\");", "-\t\tif (returnType != Void.TYPE) {", "-\t\t\tif (needsReturn) {", "-\t\t\t\toutputln(\"\\t\\trc = 0;\");", "-\t\t\t}", "+\toutput(\"\\t\\tLOAD_FUNCTION(fp, \");", "+\toutput(name);", "+\toutputln(\")\");", "+\toutputln(\"\\t\\tif (fp) {\");", "+\toutput(\"\\t\\t\");", "+\tgenerateFunctionCallLeftSide(method, returnType, returnType64, needsReturn);", "+\toutput(\"((\");", "+\toutput(returnType.getTypeSignature2(!returnType.equals(returnType64)));", "+\toutput(\" (CALLING_CONVENTION*)(\");", "+\tfor (int i = 0; i < params.length; i++) {", "+\t\tif (i != 0) output(\", \");", "+\t\tJNIParameter param = params[i];", "+\t\tString cast = param.getCast();", "+\t\tif (cast.length() > 2) {", "+\t\t\toutput(cast.substring(1, cast.length() - 1));", "+\t\t} else {", "+\t\t\tJNIType paramType = param.getType(), paramType64 = param.getType64();", "+\t\t\toutput(paramType.getTypeSignature4(!paramType.equals(paramType64), param.getFlag(FLAG_STRUCT)));", "-\t\toutputln(\"\\t\\tif (!initialized) {\");", "-\t\toutput(\"\\t\\t\\tif (!hm) hm = LoadLibrary(\");", "-\t\toutput(name);", "-\t\toutputln(\"_LIB);\");", "-\t\toutput(\"\\t\\t\\tif (hm) fp = GetProcAddress(hm, \\\"\");", "-\t\toutput(name);", "-\t\toutputln(\"\\\");\");", "-\t\toutputln(\"\\t\\t\\tinitialized = 1;\");", "-\t\toutputln(\"\\t\\t}\");", "-\t\toutputln(\"\\t\\tif (fp) {\");", "-\t\toutput(\"\\t\\t\");", "-\t\tgenerateFunctionCallLeftSide(method, methodData, returnType, needsReturn);", "-\t\toutput(\"fp\");", "-\t\tgenerateFunctionCallRightSide(method, methodData, paramTypes, 0);", "-\t\toutput(\";\");", "-\t\toutputln();", "-\t\toutputln(\"\\t\\t}\");", "-\t} else if (getPlatform().equals(\"carbon\") || getPlatform().equals(\"cocoa\")) {", "-\t\toutputln(\"\\t\\tstatic int initialized = 0;\");", "-\t\toutputln(\"\\t\\tstatic CFBundleRef bundle = NULL;\");", "-\t\toutput(\"\\t\\ttypedef \");", "-\t\toutput(getTypeSignature2(returnType));", "-\t\toutput(\" (*FPTR)(\");", "-\t\tfor (int i = 0; i < paramTypes.length; i++) {", "-\t\t\tif (i != 0) output(\", \");", "-\t\t\tClass paramType = paramTypes[i];", "-\t\t\tParameterData paramData = getMetaData().getMetaData(method, i);", "-\t\t\tString cast = paramData.getCast();", "-\t\t\tif (cast.length() > 2) {", "-\t\t\t\toutput(cast.substring(1, cast.length() - 1));", "-\t\t\t} else {", "-\t\t\t\toutput(getTypeSignature4(paramType, paramData.getFlag(FLAG_STRUCT)));", "-\t\t\t}", "-\t\t}", "-\t\toutputln(\");\");", "-\t\toutputln(\"\\t\\tstatic FPTR fptr;\");", "-\t\tif (returnType != Void.TYPE) {", "-\t\t\tif (needsReturn) {", "-\t\t\t\toutputln(\"\\t\\trc = 0;\");", "-\t\t\t}", "-\t\t}", "-\t\toutputln(\"\\t\\tif (!initialized) {\");", "-\t\toutput(\"\\t\\t\\tif (!bundle) bundle = CFBundleGetBundleWithIdentifier(CFSTR(\");", "-\t\toutput(name);", "-\t\toutputln(\"_LIB));\");", "-\t\toutput(\"\\t\\t\\tif (bundle) fptr = (FPTR)CFBundleGetFunctionPointerForName(bundle, CFSTR(\\\"\");", "-\t\toutput(name);", "-\t\toutputln(\"\\\"));\");", "-\t\toutputln(\"\\t\\t\\tinitialized = 1;\");", "-\t\toutputln(\"\\t\\t}\");", "-\t\toutputln(\"\\t\\tif (fptr) {\");", "-\t\toutput(\"\\t\\t\");", "-\t\tgenerateFunctionCallLeftSide(method, methodData, returnType, needsReturn);", "-\t\toutput(\"(*fptr)\");", "-\t\tgenerateFunctionCallRightSide(method, methodData, paramTypes, 0);", "-\t\toutput(\";\");", "-\t\toutputln();", "-\t\toutputln(\"\\t\\t}\");", "-\t} else {", "-\t\toutputln(\"\\t\\tstatic int initialized = 0;\");", "-\t\toutputln(\"\\t\\tstatic void *handle = NULL;\");", "-\t\toutput(\"\\t\\ttypedef \");", "-\t\toutput(getTypeSignature2(returnType));", "-\t\toutput(\" (*FPTR)(\");", "-\t\tfor (int i = 0; i < paramTypes.length; i++) {", "-\t\t\tif (i != 0) output(\", \");", "-\t\t\tClass paramType = paramTypes[i];", "-\t\t\tParameterData paramData = getMetaData().getMetaData(method, i);", "-\t\t\tString cast = paramData.getCast();", "-\t\t\tif (cast.length() > 2) {", "-\t\t\t\toutput(cast.substring(1, cast.length() - 1));", "-\t\t\t} else {", "-\t\t\t\toutput(getTypeSignature4(paramType, paramData.getFlag(FLAG_STRUCT)));", "-\t\t\t}", "-\t\t}", "-\t\toutputln(\");\");", "-\t\toutputln(\"\\t\\tstatic FPTR fptr;\");", "-\t\tif (returnType != Void.TYPE) {", "-\t\t\tif (needsReturn) {", "-\t\t\t\toutputln(\"\\t\\trc = 0;\");", "-\t\t\t}", "-\t\t}", "-\t\toutputln(\"\\t\\tif (!initialized) {\");", "-\t\toutput(\"\\t\\t\\tif (!handle) handle = dlopen(\");", "-\t\toutput(name);", "-\t\toutputln(\"_LIB, RTLD_LAZY);\");", "-\t\toutput(\"\\t\\t\\tif (handle) fptr = (FPTR)dlsym(handle, \\\"\");", "-\t\toutput(name);", "-\t\toutputln(\"\\\");\");", "-\t\toutputln(\"\\t\\t\\tinitialized = 1;\");", "-\t\toutputln(\"\\t\\t}\");", "-\t\toutputln(\"\\t\\tif (fptr) {\");", "-\t\toutput(\"\\t\\t\");", "-\t\tgenerateFunctionCallLeftSide(method, methodData, returnType, needsReturn);", "-\t\toutput(\"(*fptr)\");", "-\t\tgenerateFunctionCallRightSide(method, methodData, paramTypes, 0);", "-\t\toutput(\";\");", "-\t\toutputln();", "-\t\toutputln(\"\\t\\t}\");", "-", "+\toutput(\"))\");", "+\toutput(\"fp\");", "+\toutput(\")\");", "+\tgenerateFunctionCallRightSide(method, params, 0);", "+\toutput(\";\");", "+\toutputln();", "+\toutputln(\"\\t\\t}\");"]}], "num": 26384}
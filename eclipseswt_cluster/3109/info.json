{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b69339062b86b2e72abd4768bf96caa8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a955363bbce8a271668d0a328a4313a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "f69d75cc3fb0aa90baf729e9d5be0fedd8d56818", "commitAfterChange": "650c120d4688204e1daa0edb48db7b8106fc015a", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\tint [] ref = new int [1];", "-\tOS.GetEventParameter (theEvent, OS.kEventParamAccessibleObject, OS.typeCFTypeRef, null, 4, null, ref);", "-\tint axuielementref = ref [0];", "-\tDataBrowserAccessibilityItemInfo itemInfo = new DataBrowserAccessibilityItemInfo ();", "-\tint err = OS.AXUIElementGetDataBrowserItemInfo (axuielementref, handle, 0, itemInfo);", "-\tif (err == OS.noErr && itemInfo.v0_columnProperty != OS.kDataBrowserItemNoProperty && itemInfo.v0_item != OS.kDataBrowserNoItem && itemInfo.v0_propertyPart == OS.kDataBrowserPropertyEnclosingPart) {", "-\t\tint columnIndex = 0;", "-\t\tfor (columnIndex = 0; columnIndex < columnCount; columnIndex++) {", "-\t\t\tif (columns [columnIndex].id == itemInfo.v0_columnProperty) break;", "+\tint [] stringRef = new int [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeName, OS.typeCFStringRef, null, 4, null, stringRef);", "+\tint length = 0;", "+\tif (stringRef [0] != 0) length = OS.CFStringGetLength (stringRef [0]);", "+\tchar [] buffer = new char [length];", "+\tCFRange range = new CFRange ();", "+\trange.length = length;", "+\tOS.CFStringGetCharacters (stringRef [0], range, buffer);", "+\tString attributeName = new String(buffer);", "+\tif (attributeName.equals(OS.kAXHeaderAttribute)) {", "+\t\tshort [] height = new short [1];", "+\t\tOS.GetDataBrowserListViewHeaderBtnHeight (handle, height);", "+\t\tif (height [0] == 0) {", "+\t\t\t/*", "+\t\t\t* Bug in the Macintosh.  Even when the header is not visible,", "+\t\t\t* VoiceOver still reports each column header's role for every row.", "+\t\t\t* This is confusing and overly verbose.  The fix is to return", "+\t\t\t* \"no header\" when the screen reader asks for the header, by", "+\t\t\t* returning noErr without setting the event parameter.", "+\t\t\t*/", "+\t\t\tcode = OS.noErr;", "-\t\tif (columnIndex != columnCount || columnCount == 0) {", "-\t\t\tint index = getIndex (itemInfo.v0_item);", "-\t\t\tif (0 <= index && index < itemCount) {", "-\t\t\t\tTableItem tableItem = _getItem (index);", "-\t\t\t\tint [] stringRef = new int [1];", "-\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeName, OS.typeCFStringRef, null, 4, null, stringRef);", "-\t\t\t\tint length = 0;", "-\t\t\t\tif (stringRef [0] != 0) length = OS.CFStringGetLength (stringRef [0]);", "-\t\t\t\tchar [] buffer = new char [length];", "-\t\t\t\tCFRange range = new CFRange ();", "-\t\t\t\trange.length = length;", "-\t\t\t\tOS.CFStringGetCharacters (stringRef [0], range, buffer);", "-\t\t\t\tString attributeName = new String(buffer);", "-\t\t\t\tif (attributeName.equals (OS.kAXRoleAttribute) || attributeName.equals (OS.kAXRoleDescriptionAttribute)) {", "-\t\t\t\t\tString roleText = OS.kAXStaticTextRole;", "-\t\t\t\t\tbuffer = new char [roleText.length ()];", "-\t\t\t\t\troleText.getChars (0, buffer.length, buffer, 0);", "-\t\t\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-\t\t\t\t\tif (stringRef [0] != 0) {", "-\t\t\t\t\t\tif (attributeName.equals (OS.kAXRoleAttribute)) {", "-\t\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "-\t\t\t\t\t\t} else { // kAXRoleDescriptionAttribute", "-\t\t\t\t\t\t\tint stringRef2 = OS.HICopyAccessibilityRoleDescription (stringRef [0], 0);", "-\t\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef2});", "-\t\t\t\t\t\t\tOS.CFRelease(stringRef2);", "+\t} else {", "+\t\tint [] ref = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamAccessibleObject, OS.typeCFTypeRef, null, 4, null, ref);", "+\t\tint axuielementref = ref [0];", "+\t\tDataBrowserAccessibilityItemInfo itemInfo = new DataBrowserAccessibilityItemInfo ();", "+\t\tint err = OS.AXUIElementGetDataBrowserItemInfo (axuielementref, handle, 0, itemInfo);", "+\t\tif (err == OS.noErr && itemInfo.v0_columnProperty != OS.kDataBrowserItemNoProperty && itemInfo.v0_item != OS.kDataBrowserNoItem && itemInfo.v0_propertyPart == OS.kDataBrowserPropertyEnclosingPart) {", "+\t\t\tint columnIndex = 0;", "+\t\t\tfor (columnIndex = 0; columnIndex < columnCount; columnIndex++) {", "+\t\t\t\tif (columns [columnIndex].id == itemInfo.v0_columnProperty) break;", "+\t\t\t}", "+\t\t\tif (columnIndex != columnCount || columnCount == 0) {", "+\t\t\t\tint index = getIndex (itemInfo.v0_item);", "+\t\t\t\tif (0 <= index && index < itemCount) {", "+\t\t\t\t\tTableItem tableItem = _getItem (index);", "+\t\t\t\t\tif (attributeName.equals (OS.kAXRoleAttribute) || attributeName.equals (OS.kAXRoleDescriptionAttribute)) {", "+\t\t\t\t\t\tString roleText = OS.kAXStaticTextRole;", "+\t\t\t\t\t\tbuffer = new char [roleText.length ()];", "+\t\t\t\t\t\troleText.getChars (0, buffer.length, buffer, 0);", "+\t\t\t\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\t\t\t\tif (attributeName.equals (OS.kAXRoleAttribute)) {", "+\t\t\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "+\t\t\t\t\t\t\t} else { // kAXRoleDescriptionAttribute", "+\t\t\t\t\t\t\t\tint stringRef2 = OS.HICopyAccessibilityRoleDescription (stringRef [0], 0);", "+\t\t\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef2});", "+\t\t\t\t\t\t\t\tOS.CFRelease(stringRef2);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\t\t\t\tcode = OS.noErr;", "-\t\t\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\t\t} else if (attributeName.equals(OS.kAXChildrenAttribute)) {", "+\t\t\t\t\t\tint children = OS.CFArrayCreateMutable (OS.kCFAllocatorDefault, 0, 0);", "+\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFMutableArrayRef, 4, new int [] {children});", "+\t\t\t\t\t\tOS.CFRelease(children);", "-\t\t\t\t\t}", "-\t\t\t\t} else if (attributeName.equals(OS.kAXChildrenAttribute)) {", "-\t\t\t\t\tint children = OS.CFArrayCreateMutable (OS.kCFAllocatorDefault, 0, 0);", "-\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFMutableArrayRef, 4, new int [] {children});", "-\t\t\t\t\tOS.CFRelease(children);", "-\t\t\t\t\tcode = OS.noErr;", "-\t\t\t\t} else if (attributeName.equals (OS.kAXTitleAttribute) || attributeName.equals (OS.kAXDescriptionAttribute)) {", "-\t\t\t\t\tString text = tableItem.getText (columnIndex);", "-\t\t\t\t\tbuffer = new char [text.length ()];", "-\t\t\t\t\ttext.getChars (0, buffer.length, buffer, 0);", "-\t\t\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-\t\t\t\t\tif (stringRef [0] != 0) {", "-\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "-\t\t\t\t\t\tOS.CFRelease(stringRef [0]);", "-\t\t\t\t\t\tcode = OS.noErr;", "+\t\t\t\t\t} else if (attributeName.equals (OS.kAXTitleAttribute) || attributeName.equals (OS.kAXDescriptionAttribute)) {", "+\t\t\t\t\t\tString text = tableItem.getText (columnIndex);", "+\t\t\t\t\t\tbuffer = new char [text.length ()];", "+\t\t\t\t\t\ttext.getChars (0, buffer.length, buffer, 0);", "+\t\t\t\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "+\t\t\t\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\t\t\t\tcode = OS.noErr;", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32e98cedbbde287df7b5291800ecd531", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "f69d75cc3fb0aa90baf729e9d5be0fedd8d56818", "commitAfterChange": "650c120d4688204e1daa0edb48db7b8106fc015a", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\tint [] ref = new int [1];", "-\tOS.GetEventParameter (theEvent, OS.kEventParamAccessibleObject, OS.typeCFTypeRef, null, 4, null, ref);", "-\tint axuielementref = ref [0];", "-\tDataBrowserAccessibilityItemInfo itemInfo = new DataBrowserAccessibilityItemInfo ();", "-\tint err = OS.AXUIElementGetDataBrowserItemInfo (axuielementref, handle, 0, itemInfo);", "-\tif (err == OS.noErr && itemInfo.v0_columnProperty != OS.kDataBrowserItemNoProperty && itemInfo.v0_item != OS.kDataBrowserNoItem && itemInfo.v0_propertyPart == OS.kDataBrowserPropertyEnclosingPart) {", "-\t\tint columnIndex = 0;", "-\t\tfor (columnIndex = 0; columnIndex < columnCount; columnIndex++) {", "-\t\t\tif (columns [columnIndex].id == itemInfo.v0_columnProperty) break;", "+\tint [] stringRef = new int [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeName, OS.typeCFStringRef, null, 4, null, stringRef);", "+\tint length = 0;", "+\tif (stringRef [0] != 0) length = OS.CFStringGetLength (stringRef [0]);", "+\tchar [] buffer = new char [length];", "+\tCFRange range = new CFRange ();", "+\trange.length = length;", "+\tOS.CFStringGetCharacters (stringRef [0], range, buffer);", "+\tString attributeName = new String(buffer);", "+\tif (attributeName.equals(OS.kAXHeaderAttribute)) {", "+\t\tshort [] height = new short [1];", "+\t\tOS.GetDataBrowserListViewHeaderBtnHeight (handle, height);", "+\t\tif (height [0] == 0) {", "+\t\t\t/*", "+\t\t\t* Bug in the Macintosh.  Even when the header is not visible,", "+\t\t\t* VoiceOver still reports each column header's role for every row.", "+\t\t\t* This is confusing and overly verbose.  The fix is to return", "+\t\t\t* \"no header\" when the screen reader asks for the header, by", "+\t\t\t* returning noErr without setting the event parameter.", "+\t\t\t*/", "+\t\t\tcode = OS.noErr;", "-\t\tif (columnIndex != columnCount || columnCount == 0) {", "-\t\t\tint id = itemInfo.v0_item;", "-\t\t\tTreeItem treeItem = _getItem (id, false);", "-\t\t\tint [] stringRef = new int [1];", "-\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeName, OS.typeCFStringRef, null, 4, null, stringRef);", "-\t\t\tint length = 0;", "-\t\t\tif (stringRef [0] != 0) length = OS.CFStringGetLength (stringRef [0]);", "-\t\t\tchar [] buffer = new char [length];", "-\t\t\tCFRange range = new CFRange ();", "-\t\t\trange.length = length;", "-\t\t\tOS.CFStringGetCharacters (stringRef [0], range, buffer);", "-\t\t\tString attributeName = new String(buffer);", "-\t\t\tif (attributeName.equals (OS.kAXRoleAttribute) || attributeName.equals (OS.kAXRoleDescriptionAttribute)) {", "-\t\t\t\tString roleText = OS.kAXStaticTextRole;", "-\t\t\t\tbuffer = new char [roleText.length ()];", "-\t\t\t\troleText.getChars (0, buffer.length, buffer, 0);", "-\t\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-\t\t\t\tif (stringRef [0] != 0) {", "-\t\t\t\t\tif (attributeName.equals (OS.kAXRoleAttribute)) {", "-\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "-\t\t\t\t\t} else { // kAXRoleDescriptionAttribute", "-\t\t\t\t\t\tint stringRef2 = OS.HICopyAccessibilityRoleDescription (stringRef [0], 0);", "-\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef2});", "-\t\t\t\t\t\tOS.CFRelease(stringRef2);", "+\t} else {", "+\t\tint [] ref = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamAccessibleObject, OS.typeCFTypeRef, null, 4, null, ref);", "+\t\tint axuielementref = ref [0];", "+\t\tDataBrowserAccessibilityItemInfo itemInfo = new DataBrowserAccessibilityItemInfo ();", "+\t\tint err = OS.AXUIElementGetDataBrowserItemInfo (axuielementref, handle, 0, itemInfo);", "+\t\tif (err == OS.noErr && itemInfo.v0_columnProperty != OS.kDataBrowserItemNoProperty && itemInfo.v0_item != OS.kDataBrowserNoItem && itemInfo.v0_propertyPart == OS.kDataBrowserPropertyEnclosingPart) {", "+\t\t\tint columnIndex = 0;", "+\t\t\tfor (columnIndex = 0; columnIndex < columnCount; columnIndex++) {", "+\t\t\t\tif (columns [columnIndex].id == itemInfo.v0_columnProperty) break;", "+\t\t\t}", "+\t\t\tif (columnIndex != columnCount || columnCount == 0) {", "+\t\t\t\tint id = itemInfo.v0_item;", "+\t\t\t\tTreeItem treeItem = _getItem (id, false);", "+\t\t\t\tif (attributeName.equals (OS.kAXRoleAttribute) || attributeName.equals (OS.kAXRoleDescriptionAttribute)) {", "+\t\t\t\t\tString roleText = OS.kAXStaticTextRole;", "+\t\t\t\t\tbuffer = new char [roleText.length ()];", "+\t\t\t\t\troleText.getChars (0, buffer.length, buffer, 0);", "+\t\t\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\t\t\tif (attributeName.equals (OS.kAXRoleAttribute)) {", "+\t\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "+\t\t\t\t\t\t} else { // kAXRoleDescriptionAttribute", "+\t\t\t\t\t\t\tint stringRef2 = OS.HICopyAccessibilityRoleDescription (stringRef [0], 0);", "+\t\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef2});", "+\t\t\t\t\t\t\tOS.CFRelease(stringRef2);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\t\t\tcode = OS.noErr;", "-\t\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\t} else if (attributeName.equals(OS.kAXChildrenAttribute)) {", "+\t\t\t\t\tint children = OS.CFArrayCreateMutable (OS.kCFAllocatorDefault, 0, 0);", "+\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFMutableArrayRef, 4, new int [] {children});", "+\t\t\t\t\tOS.CFRelease(children);", "-\t\t\t\t}", "-\t\t\t} else if (attributeName.equals(OS.kAXChildrenAttribute)) {", "-\t\t\t\tint children = OS.CFArrayCreateMutable (OS.kCFAllocatorDefault, 0, 0);", "-\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFMutableArrayRef, 4, new int [] {children});", "-\t\t\t\tOS.CFRelease(children);", "-\t\t\t\tcode = OS.noErr;", "-\t\t\t} else if (attributeName.equals (OS.kAXTitleAttribute) || attributeName.equals (OS.kAXDescriptionAttribute)) {", "-\t\t\t\tString text = treeItem.getText (columnIndex);", "-\t\t\t\tbuffer = new char [text.length ()];", "-\t\t\t\ttext.getChars (0, buffer.length, buffer, 0);", "-\t\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-\t\t\t\tif (stringRef [0] != 0) {", "-\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "-\t\t\t\t\tOS.CFRelease(stringRef [0]);", "-\t\t\t\t\tcode = OS.noErr;", "+\t\t\t\t} else if (attributeName.equals (OS.kAXTitleAttribute) || attributeName.equals (OS.kAXDescriptionAttribute)) {", "+\t\t\t\t\tString text = treeItem.getText (columnIndex);", "+\t\t\t\t\tbuffer = new char [text.length ()];", "+\t\t\t\t\ttext.getChars (0, buffer.length, buffer, 0);", "+\t\t\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "+\t\t\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\t\t\tcode = OS.noErr;", "+\t\t\t\t\t}"]}], "num": 3109}
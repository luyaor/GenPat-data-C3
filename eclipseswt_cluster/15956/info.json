{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f1f687c36f696910a512397626d6b57", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc0ebda60e34de245a829f6d7a563d18", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "fc59b19065f60bbcb485c797c7ff1561e9bb73f6", "commitAfterChange": "6079b58ee7045c020f911594524a48a4bc5cb888", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  void createSurface()", "signatureAfterChange": "  void createSurface()", "diff": ["-\tif (mask != 0) {", "+\t/* Generate the mask if necessary. */", "+\tif (transparentPixel != -1) createMask();", "+\tif (mask != 0 || alpha != -1 || alphaData != null) {", "-\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "-\t\tint /*long*/ gdkImagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);", "+\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);\t\t", "-\t\tfor (int y=0; y<height; y++) {", "-\t\t\tint /*long*/ offset = pixels + (y * stride);", "-\t\t\tOS.memmove(line, offset, stride);", "-\t\t\tfor (int x=0; x<width; x++) {", "-\t\t\t\tint offset1 = x * 4;", "-\t\t\t\tif (gdkImagePtr != 0) {", "-\t\t\t\t\tif (OS.gdk_image_get_pixel(gdkImagePtr, x, y) == 0) {", "-\t\t\t\t\t\tline[offset1+3] = 0;", "+\t\tif (mask != 0) {", "+\t\t\tint /*long*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, w[0], h[0]);", "+\t\t\tif (maskPixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\tOS.gdk_pixbuf_get_from_drawable(maskPixbuf, mask, 0, 0, 0, 0, 0, w[0], h[0]);", "+\t\t\tint maskStride = OS.gdk_pixbuf_get_rowstride(maskPixbuf);", "+\t\t\tint /*long*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);", "+\t\t\tbyte[] maskLine = new byte[maskStride];", "+\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\tint /*long*/ offset = pixels + (y * stride);", "+\t\t\t\tOS.memmove(line, offset, stride);", "+\t\t\t\tint /*long*/ maskOffset = maskPixels + (y * maskStride);", "+\t\t\t\tOS.memmove(maskLine, maskOffset, maskStride);", "+\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\t\tint offset1 = x * 4;", "+\t\t\t\t\tif (maskLine[x * 3] == 0) {", "+\t\t\t\t\t\tline[offset1 + 3] = 0;", "+\t\t\t\t\tbyte temp = line[offset1];", "+\t\t\t\t\tline[offset1] = line[offset1 + 2];", "+\t\t\t\t\tline[offset1 + 2] = temp;", "-\t\t\t\tbyte temp = line[offset1];", "-\t\t\t\tline[offset1] = line[offset1 + 2];", "-\t\t\t\tline[offset1 + 2] = temp;", "+\t\t\t\tOS.memmove(offset, line, stride);", "-\t\t\tOS.memmove(offset, line, stride);", "+\t\t\tOS.g_object_unref(maskPixbuf);", "+\t\t} else if (alpha != -1) {", "+\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\tint /*long*/ offset = pixels + (y * stride);", "+\t\t\t\tOS.memmove(line, offset, stride);", "+\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\t\tint offset1 = x * 4;", "+\t\t\t\t\tline[offset1+3] = (byte)alpha;", "+\t\t\t\t\tbyte temp = line[offset1];", "+\t\t\t\t\tline[offset1] = line[offset1 + 2];", "+\t\t\t\t\tline[offset1 + 2] = temp;", "+\t\t\t\t}", "+\t\t\t\tOS.memmove(offset, line, stride);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tfor (int y = 0; y < h [0]; y++) {", "+\t\t\t\tint /*long*/ offset = pixels + (y * stride);", "+\t\t\t\tOS.memmove (line, offset, stride);", "+\t\t\t\tfor (int x = 0; x < w [0]; x++) {", "+\t\t\t\t\tint offset1 = x * 4;", "+\t\t\t\t\tline[offset1+3] = alphaData [y*w [0]+x];", "+\t\t\t\t\tbyte temp = line[offset1];", "+\t\t\t\t\tline[offset1] = line[offset1 + 2];", "+\t\t\t\t\tline[offset1 + 2] = temp;", "+\t\t\t\t}", "+\t\t\t\tOS.memmove (offset, line, stride);", "+\t\t\t}", "-\t\tif (gdkImagePtr != 0) OS.g_object_unref(gdkImagePtr);", "-\t\treturn;", "-\t}\t", "-\tint /*long*/ xDisplay = OS.GDK_DISPLAY();", "-\tint /*long*/ xDrawable = OS.GDK_PIXMAP_XID(pixmap);", "-\tint /*long*/ xVisual = OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system());", "-\tint /*long*/ xColormap = OS.gdk_x11_colormap_get_xcolormap(OS.gdk_colormap_get_system());", "-\tsurface = Cairo.cairo_xlib_surface_create(xDisplay, xDrawable, xVisual, 0, xColormap);", "+\t} else {", "+\t\tint /*long*/ xDisplay = OS.GDK_DISPLAY();", "+\t\tint /*long*/ xDrawable = OS.GDK_PIXMAP_XID(pixmap);", "+\t\tint /*long*/ xVisual = OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system());", "+\t\tint /*long*/ xColormap = OS.gdk_x11_colormap_get_xcolormap(OS.gdk_colormap_get_system());", "+\t\tsurface = Cairo.cairo_xlib_surface_create(xDisplay, xDrawable, xVisual, 0, xColormap);", "+\t}", "+\t/* Destroy the image mask if the there is a GC created on the image */", "+\tif (transparentPixel != -1 && memGC != null) destroyMask();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cc8bc2ee7c419d0b1f9318ce7dfb2e9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "7f4f0cf91f73e42703b3ba2d8e34ae06717a0b6c", "commitAfterChange": "646f3be9e023652896aa5b793e22f943c24ca91a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  void createSurface()", "signatureAfterChange": "  void createSurface()", "diff": ["-\t\t\tint /*long*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, w[0], h[0]);", "+\t\t\tint /*long*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);", "-\t\t\tOS.gdk_pixbuf_get_from_drawable(maskPixbuf, mask, 0, 0, 0, 0, 0, w[0], h[0]);", "+\t\t\tOS.gdk_pixbuf_get_from_drawable(maskPixbuf, mask, 0, 0, 0, 0, 0, width, height);", "+\t\t\tint /*long*/ offset = pixels, maskOffset = maskPixels;", "-\t\t\t\tint /*long*/ offset = pixels + (y * stride);", "-\t\t\t\tint /*long*/ maskOffset = maskPixels + (y * maskStride);", "-\t\t\t\tfor (int x=0; x<width; x++) {", "-\t\t\t\t\tint offset1 = x * 4;", "+\t\t\t\tfor (int x=0, offset1=0; x<width; x++, offset1 += 4) {", "+\t\t\t\toffset += stride;", "+\t\t\t\tmaskOffset += maskStride;", "+\t\t\tint /*long*/ offset = pixels;", "-\t\t\t\tint /*long*/ offset = pixels + (y * stride);", "-\t\t\t\tfor (int x=0; x<width; x++) {", "-\t\t\t\t\tint offset1 = x * 4;", "+\t\t\t\tfor (int x=0, offset1=0; x<width; x++, offset1 += 4) {", "-\t\t\t\t\tbyte temp = line[offset1];", "-\t\t\t\t\tline[offset1] = line[offset1 + 2];", "-\t\t\t\t\tline[offset1 + 2] = temp;", "+\t\t\t\t\t/* pre-multiplied alpha */", "+\t\t\t\t\tint r = ((line[offset1 + 0] & 0xFF) * alpha) + 128;", "+\t\t\t\t\tr = (r + (r >> 8)) >> 8;", "+\t\t\t\t\tint g = ((line[offset1 + 1] & 0xFF) * alpha) + 128;", "+\t\t\t\t\tg = (g + (g >> 8)) >> 8;", "+\t\t\t\t\tint b = ((line[offset1 + 2] & 0xFF) * alpha) + 128;", "+\t\t\t\t\tb = (b + (b >> 8)) >> 8;", "+\t\t\t\t\tline[offset1 + 0] = (byte)b;", "+\t\t\t\t\tline[offset1 + 1] = (byte)g;", "+\t\t\t\t\tline[offset1 + 2] = (byte)r;", "+\t\t\t\toffset += stride;", "+\t\t\t}", "+\t\t} else if (alphaData != null) {", "+\t\t\tint /*long*/ offset = pixels;", "+\t\t\tfor (int y = 0; y < h [0]; y++) {", "+\t\t\t\tOS.memmove (line, offset, stride);", "+\t\t\t\tfor (int x=0, offset1=0; x<width; x++, offset1 += 4) {", "+\t\t\t\t\tint alpha = alphaData [y*w [0]+x] & 0xFF;", "+\t\t\t\t\tline[offset1+3] = (byte)alpha;", "+\t\t\t\t\t/* pre-multiplied alpha */", "+\t\t\t\t\tint r = ((line[offset1 + 0] & 0xFF) * alpha) + 128;", "+\t\t\t\t\tr = (r + (r >> 8)) >> 8;", "+\t\t\t\t\tint g = ((line[offset1 + 1] & 0xFF) * alpha) + 128;", "+\t\t\t\t\tg = (g + (g >> 8)) >> 8;", "+\t\t\t\t\tint b = ((line[offset1 + 2] & 0xFF) * alpha) + 128;", "+\t\t\t\t\tb = (b + (b >> 8)) >> 8;", "+\t\t\t\t\tline[offset1 + 0] = (byte)b;", "+\t\t\t\t\tline[offset1 + 1] = (byte)g;", "+\t\t\t\t\tline[offset1 + 2] = (byte)r;", "+\t\t\t\t}", "+\t\t\t\tOS.memmove (offset, line, stride);", "+\t\t\t\toffset += stride;", "+\t\t\tint /*long*/ offset = pixels;", "-\t\t\t\tint /*long*/ offset = pixels + (y * stride);", "-\t\t\t\tfor (int x = 0; x < w [0]; x++) {", "-\t\t\t\t\tint offset1 = x * 4;", "-\t\t\t\t\tline[offset1+3] = alphaData [y*w [0]+x];", "+\t\t\t\tfor (int x=0, offset1=0; x<width; x++, offset1 += 4) {", "+\t\t\t\t\tline[offset1+3] = (byte)0xFF;", "+\t\t\t\toffset += stride;", "+//\t\tsurface = Cairo.cairo_image_surface_create(Cairo.CAIRO_FORMAT_ARGB32, width, height);", "+//\t\tint cr = Cairo.cairo_create(surface);", "+//\t\tCairo.cairo_set_source_rgba(cr, 1, 0, 0, 0.5);", "+////\t\tCairo.cairo_rectangle(cr, 0, 0, width, height);", "+////\t\tCairo.cairo_fill(cr);", "+//\t\tCairo.cairo_set_source_rgba(cr, 1, 0, 0, 0.5);", "+//\t\tCairo.cairo_rectangle(cr, 0, 0, width - 0, height - 0);", "+//\t\tCairo.cairo_fill(cr);", "+//\t\tCairo.cairo_destroy(cr);"]}], "num": 15956}
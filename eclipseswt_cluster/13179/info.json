{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b737b4aaf56aa7ab55acf3e6e1ab4db", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e66f7e90a179f3563dd81831a1d27171", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ColorDialog.java", "commitBeforeChange": "d81992ac3e894363b9e0990d7b4e1bfc6b231914", "commitAfterChange": "0edff76e3e3201d3f5843887fe8abb802322fd4f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public RGB open ()", "signatureAfterChange": " public RGB open ()", "diff": ["+\t\t\trgba.alpha = 1;", "-\t\tOS.gtk_color_chooser_set_use_alpha (handle, false);", "-", "-\t\tlong /*int*/ colors = OS.g_malloc(GdkColor.sizeof * rgbs.length);", "-\t\tfor (int i=0; i<rgbs.length; i++) {", "-\t\t\tRGB rgb = rgbs[i];", "-\t\t\tif (rgb != null) {", "-\t\t\t\tcolor.red = (short)((rgb.red & 0xFF) | ((rgb.red & 0xFF) << 8));", "-\t\t\t\tcolor.green = (short)((rgb.green & 0xFF) | ((rgb.green & 0xFF) << 8));", "-\t\t\t\tcolor.blue = (short)((rgb.blue & 0xFF) | ((rgb.blue & 0xFF) << 8));", "-\t\t\t\tOS.memmove (colors + i * GdkColor.sizeof, color, GdkColor.sizeof);", "+\t\tif (OS.GTK_VERSION >= OS.VERSION (3, 4, 0)) {", "+\t\t\tint colorsPerRow = 9;", "+\t\t\tlong /*int*/ gdkRGBAS = OS.g_malloc(GdkRGBA.sizeof * rgbs.length);", "+\t\t\tfor (int i=0; i<rgbs.length; i++) {", "+\t\t\t\tRGB rgbS = rgbs[i];", "+\t\t\t\tif (rgbS != null) {", "+\t\t\t\t\trgba.red = (double) rgbS.red / 255;", "+\t\t\t\t\trgba.green = (double) rgbS.green / 255;", "+\t\t\t\t\trgba.blue = (double) rgbS.blue / 255;", "+\t\t\t\t\tOS.memmove (gdkRGBAS + i * GdkRGBA.sizeof, rgba, GdkRGBA.sizeof);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.gtk_color_chooser_add_palette(handle, OS.GTK_ORIENTATION_HORIZONTAL, colorsPerRow,", "+\t\t\t\t\trgbs.length, gdkRGBAS);", "+\t\t\tOS.gtk_color_chooser_set_rgba (handle, rgba);", "+", "+", "+\t\t\tif (OS.gtk_color_chooser_get_use_alpha(handle)) {", "+\t\t\t\tOS.gtk_color_chooser_set_use_alpha (handle, false);", "+\t\t\t}", "+\t\t\tOS.g_free (gdkRGBAS);", "+\t\t} else {", "+\t\t\tlong /*int*/ gdkColors = OS.g_malloc(GdkColor.sizeof * rgbs.length);", "+\t\t\tfor (int i=0; i<rgbs.length; i++) {", "+\t\t\t\tRGB rgb = rgbs[i];", "+\t\t\t\tif (rgb != null) {", "+\t\t\t\t\tcolor.red = (short)((rgb.red & 0xFF) | ((rgb.red & 0xFF) << 8));", "+\t\t\t\t\tcolor.green = (short)((rgb.green & 0xFF) | ((rgb.green & 0xFF) << 8));", "+\t\t\t\t\tcolor.blue = (short)((rgb.blue & 0xFF) | ((rgb.blue & 0xFF) << 8));", "+\t\t\t\t\tOS.memmove (gdkColors + i * GdkColor.sizeof, color, GdkColor.sizeof);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tlong /*int*/ strPtr = OS.gtk_color_selection_palette_to_string(gdkColors, rgbs.length);", "+\t\t\tint length = OS.strlen (strPtr);", "+", "+\t\t\tbuffer = new byte [length];", "+\t\t\tOS.memmove (buffer, strPtr, length);", "+\t\t\tString paletteString = new String (Converter.mbcsToWcs (null, buffer));", "+\t\t\tbuffer = Converter.wcsToMbcs (null, paletteString, true);", "+\t\t\tOS.g_free (gdkColors);", "+\t\t\tlong /*int*/ settings = OS.gtk_settings_get_default ();", "+\t\t\tif (settings != 0) {", "+\t\t\t\tOS.gtk_settings_set_string_property(settings, OS.gtk_color_palette, buffer, Converter.wcsToMbcs (null, \"gtk_color_selection_palette_to_string\", true));", "+", "-\t\tlong /*int*/ strPtr = OS.gtk_color_selection_palette_to_string(colors, rgbs.length);", "-\t\tint length = OS.strlen (strPtr);", "-\t\tbuffer = new byte [length];", "-\t\tOS.memmove (buffer, strPtr, length);", "-\t\tString paletteString = new String (Converter.mbcsToWcs (null, buffer));", "-\t\tbuffer = Converter.wcsToMbcs (null, paletteString, true);", "-\t\tOS.g_free (colors);", "-\t\tlong /*int*/ settings = OS.gtk_settings_get_default ();", "-\t\tif (settings != 0) {", "-\t\t\tOS.gtk_settings_set_string_property(settings, OS.gtk_color_palette, buffer, Converter.wcsToMbcs (null, \"gtk_color_selection_palette_to_string\", true));", "-\t\t}", "+", "-", "+", "+\t\t\tlong /*int*/ settings = OS.gtk_settings_get_default ();", "+\t\t\tif (settings != 0) {", "+", "+\t\t\t\tlong /*int*/ [] ptr = new long /*int*/ [1];", "+\t\t\t\tOS.g_object_get (settings, OS.gtk_color_palette, ptr, 0);", "+\t\t\t\tif (ptr [0] != 0) {", "+\t\t\t\t\tint length = OS.strlen (ptr [0]);", "+\t\t\t\t\tbuffer = new byte [length];", "+\t\t\t\t\tOS.memmove (buffer, ptr [0], length);", "+\t\t\t\t\tOS.g_free (ptr [0]);", "+\t\t\t\t\tString [] gdkColorStrings = null;", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\tString gtk_color_palette = new String(Converter.mbcsToWcs (null, buffer));", "+\t\t\t\t\t\tgdkColorStrings = splitString(gtk_color_palette, ':');", "+\t\t\t\t\t\tlength = gdkColorStrings.length;", "+\t\t\t\t\t}", "+\t\t\t\t\trgbs = new RGB [length];", "+\t\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\t\tString colorString = gdkColorStrings[i];", "+\t\t\t\t\t\tbuffer = Converter.wcsToMbcs (null, colorString, true);", "+\t\t\t\t\t\tOS.gdk_color_parse(buffer, color);", "+\t\t\t\t\t\tint redI = (color.red >> 8) & 0xFF;", "+\t\t\t\t\t\tint greenI = (color.green >> 8) & 0xFF;", "+\t\t\t\t\t\tint blueI = (color.blue >> 8) & 0xFF;", "+\t\t\t\t\t\trgbs [i] = new RGB (redI, greenI, blueI);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\tlong /*int*/ settings = OS.gtk_settings_get_default ();", "-\tif (settings != 0) {", "-\t\tlong /*int*/ [] ptr = new long /*int*/ [1];", "-\t\tOS.g_object_get (settings, OS.gtk_color_palette, ptr, 0);", "-\t\tif (ptr [0] != 0) {", "-\t\t\tint length = OS.strlen (ptr [0]);", "-\t\t\tbuffer = new byte [length];", "-\t\t\tOS.memmove (buffer, ptr [0], length);", "-\t\t\tOS.g_free (ptr [0]);", "-\t\t\tString [] gdkColorStrings = null;", "-\t\t\tif (length > 0) {", "-\t\t\t\tString gtk_color_palette = new String(Converter.mbcsToWcs (null, buffer));", "-\t\t\t\tgdkColorStrings = splitString(gtk_color_palette, ':');", "-\t\t\t\tlength = gdkColorStrings.length;", "-\t\t\t}", "-\t\t\trgbs = new RGB [length];", "-\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\tString colorString = gdkColorStrings[i];", "-\t\t\t\tbuffer = Converter.wcsToMbcs (null, colorString, true);", "-\t\t\t\tOS.gdk_color_parse(buffer, color);", "-\t\t\t\tint red = (color.red >> 8) & 0xFF;", "-\t\t\t\tint green = (color.green >> 8) & 0xFF;", "-\t\t\t\tint blue = (color.blue >> 8) & 0xFF;", "-\t\t\t\trgbs [i] = new RGB (red, green, blue);", "-\t\t\t}", "-\t\t}", "-\t}", "+", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ce4c6fae0ff201bc211d609203a2529", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "9e3f807fbbd6bd940cb111f4c11c72e3b56a7027", "commitAfterChange": "eea9e8bab69f49c92599549df81708cadf055d28", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t// NEEDS WORK", "-\tint width = 100, height = 21;", "+\tint width = 0, height = 0;", "+\tint [] currentPort = new int [1];", "+\tshort themeFont = (short) OS.kThemeSystemFont;", "+\tif (font != null) {", "+\t\tthemeFont = OS.kThemeCurrentPortFont;", "+\t\tOS.GetPort (currentPort);", "+\t\tOS.SetPortWindowPort (OS.GetControlOwner (handle));", "+\t\tOS.TextFont (font.id);", "+\t\tOS.TextFace (font.style);", "+\t\tOS.TextSize (font.size);", "+\t}", "+\torg.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point ();", "-\t\torg.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point ();", "-\t\tif (font == null) {", "-\t\t\tOS.GetThemeTextDimensions (ptr [0], (short)OS.kThemeSystemFont, OS.kThemeStateActive, false, ioBounds, null);", "-\t\t} else {", "-\t\t\tint [] currentPort = new int [1];", "-\t\t\tOS.GetPort (currentPort);", "-\t\t\tOS.SetPortWindowPort (OS.GetControlOwner (handle));", "-\t\t\tOS.TextFont (font.id);", "-\t\t\tOS.TextFace (font.style);", "-\t\t\tOS.TextSize (font.size);", "-\t\t\tOS.GetThemeTextDimensions (ptr [0], (short) OS.kThemeCurrentPortFont, OS.kThemeStateActive, false, ioBounds, null);", "-\t\t\tOS.SetPort (currentPort [0]);", "-\t\t}", "+\t\tOS.GetThemeTextDimensions (ptr [0], themeFont, OS.kThemeStateActive, false, ioBounds, null);", "+\tint count;", "+\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\tcount = OS.CountMenuItems (menuHandle);", "+\t} else {", "+\t\tcount = OS.HIComboBoxGetItemCount (handle);", "+\t}", "+\tfor (int i=0; i<count; i++) {", "+\t\tint result;", "+\t\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\t\tresult = OS.CopyMenuItemTextAsCFString(menuHandle, (short)(i+1), ptr);", "+\t\t} else {", "+\t\t\tresult = OS.HIComboBoxCopyTextItemAtIndex (handle, i, ptr);", "+\t\t}", "+\t\tif (result == OS.noErr) {", "+\t\t\tOS.GetThemeTextDimensions (ptr [0], themeFont, OS.kThemeStateActive, false, ioBounds, null);", "+\t\t\twidth = Math.max (width, ioBounds.h);", "+\t\t\tOS.CFRelease (ptr [0]);", "+\t\t}", "+\t}", "+\tif (font != null) {", "+\t\tOS.SetPort (currentPort [0]);", "+\t}", "+\tint [] metric = new int [1];", "+\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\tOS.GetThemeMetric (OS.kThemeMetricDisclosureButtonWidth, metric);", "+\t\twidth += metric [0];", "+\t\t//NOT DONE", "+\t\twidth += 13;", "+\t} else {", "+\t\tOS.GetThemeMetric (OS.kThemeMetricComboBoxLargeDisclosureWidth, metric);", "+\t\twidth += metric [0];", "+\t}", "+\tOS.GetThemeMetric (OS.kThemeMetricEditTextWhitespace, metric);", "+\twidth += metric [0] * 2;", "+\theight += metric [0] * 2;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24b5a6151749794888696a4b8bc7bc67", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleFactory.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tstatic void registerAccessible (Accessible accessible)", "signatureAfterChange": "  \tstatic void registerAccessible (Accessible accessible)", "diff": ["-\t\t/* If DefaultParentType is 0 then OS accessibility is not active */", "-\t\tif (DefaultParentType == 0) return;", "-\t\tint /*long*/ controlHandle = accessible.getControlHandle ();", "-\t\tint /*long*/ widgetType = OS.G_OBJECT_TYPE (controlHandle);", "-\t\tAccessibleFactory factory = (AccessibleFactory) Factories.get (new LONG (widgetType));", "-\t\tif (factory == null) {", "-\t\t\tfactory = new AccessibleFactory (widgetType);", "-\t\t\tFactories.put (new LONG (widgetType), factory);", "+\t\tint /*long*/ widget = accessible.getControlHandle ();", "+\t\tint /*long*/ widgetType = OS.G_OBJECT_TYPE (widget);", "+\t\tint /*long*/ registry = ATK.atk_get_default_registry ();", "+\t\tint /*long*/ factory = ATK.atk_registry_get_factory (registry, widgetType);", "+\t\t/* If NO_OP factory is registered then OS accessibility is not active */", "+\t\tif (ATK.ATK_IS_NO_OP_OBJECT_FACTORY(factory)) return;", "+\t\tString name = FACTORY_TYPENAME + getTypeName(widgetType);", "+\t\tbyte[] factoryName = Converter.wcsToMbcs(null, name, true);", "+\t\tif (OS.g_type_from_name (factoryName) == 0) {", "+\t\t\tif (AccessibleObject.DEBUG) System.out.println(\"-->New Factory=\" + name); //$NON-NLS-1$", "+\t\t\t/* register the factory */", "+\t\t\tGTypeInfo typeInfo = new GTypeInfo ();", "+\t\t\ttypeInfo.base_init = GTypeInfo_base_init_factory.getAddress ();", "+\t\t\ttypeInfo.class_size = (short)ATK.AtkObjectFactoryClass_sizeof ();", "+\t\t\ttypeInfo.instance_size = (short)ATK.AtkObjectFactory_sizeof ();", "+\t\t\tint /*long*/ info = OS.g_malloc (GTypeInfo.sizeof); ", "+\t\t\tOS.memmove (info, typeInfo, GTypeInfo.sizeof); ", "+\t\t\tint /*long*/ swtFactoryType = OS.g_type_register_static (ATK.ATK_TYPE_OBJECT_FACTORY(), factoryName, info, 0);", "+\t\t\tint /*long*/ parentType = ATK.atk_object_factory_get_accessible_type(factory);", "+\t\t\tATK.atk_registry_set_factory_type (registry, widgetType, swtFactoryType);", "+\t\t\tFactories.put (new LONG (widgetType), new LONG (parentType));", "-\t\tfactory.addAccessible (accessible);", "-\t}", "+\t\tAccessibles.put (new LONG (widget), accessible);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "257203ab11a4e6ea28daf60696adee66", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "6d4caa70d2f46772fe741df0f485437fa25a57be", "commitAfterChange": "a362034cf3e3a53d0fa3fd9e885adfdd71b79feb", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \r int itemSelected (int widget, int client, int call)", "signatureAfterChange": "\r \r int itemSelected (int widget, int client, int call)", "diff": ["-\tXmListCallbackStruct callback = new XmListCallbackStruct ();\r", "-\tOS.memmove (callback, call, XmListCallbackStruct.sizeof);\r", "-\tcallback.reason = OS.XmCR_BROWSE_SELECT;\r", "-\tOS.memmove (call, callback, XmListCallbackStruct.sizeof);\r", "-\t/* Use the character encoding for the default locale */\r", "-\tbyte [] buffer = Converter.wcsToMbcs (null, \"singleSelectionCallback\", true);\r", "-\tOS.XtCallCallbacks(fileList, buffer, call);\r", "+\tint selectionText = OS.XmFileSelectionBoxGetChild (dialog, OS.XmDIALOG_TEXT);\r", "+\tif (selectionText == 0) return 0;\r", "+\t\r", "+\tint [] argList = {OS.XmNselectedItems, 0, OS.XmNselectedItemCount, 0};\r", "+\tOS.XtGetValues (fileList, argList, argList.length / 2);\r", "+\tint items = argList [1], itemCount = argList [3];\r", "+\tint ptr = 0;\r", "+\tif (itemCount == 0) {\r", "+\t\tint [] argList2 = {OS.XmNdirectory, 0};\r", "+\t\tOS.XtGetValues (dialog, argList2, argList2.length / 2);\r", "+\t\tptr = argList2 [1];\r", "+\t} else {\r", "+\t\tint [] buffer = new int [1];\r", "+\t\tOS.memmove (buffer, items, 4);\r", "+\t\tptr = buffer [0];\r", "+\t}\r", "+\t\r", "+\tint address = OS.XmStringUnparse (\r", "+\t\tptr,\r", "+\t\tnull,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tnull,\r", "+\t\t0,\r", "+\t\tOS.XmOUTPUT_ALL);\r", "+\t\r", "+\tif (address == 0) error (SWT.ERROR_CANNOT_GET_ITEM);\r", "+\tint length = OS.strlen (address);\r", "+\tbyte [] buffer = new byte [length + 1];\r", "+\tOS.memmove (buffer, address, length);\r", "+\tOS.XtFree (address);\r", "+\t\r", "+\tOS.XmTextSetString (selectionText, buffer);\r", "+\tOS.XmTextSetInsertionPosition (selectionText, OS.XmTextGetLastPosition (selectionText));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "935753bd704af4477ac9b737c901db5e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "dbf56d36cdf507645ea89bcdaab54b5bf0bd26ff", "commitAfterChange": "b09edce9791823c67c1356847c83053f4c27bd85", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  void drawRectangles (Rectangle [] rects)", "signatureAfterChange": "  void drawRectangles (Rectangle [] rects)", "diff": ["-\t//TODO: Use Cairo", "+\tif (OS.GTK3) {", "+\t\tif (overlay == 0) return;", "+\t\tOS.gtk_widget_shape_combine_region (overlay, 0);", "+\t\tlong /*int*/ region = OS.gdk_region_new ();", "+\t\tGdkRectangle rect = new GdkRectangle();", "+\t\tfor (int i = 0; i < rects.length; i++) {", "+\t\t\tRectangle r = parent != null ? display.map(parent, null, rects[i]) : rects[i];", "+\t\t\trect.x = r.x;", "+\t\t\trect.y = r.y;", "+\t\t\trect.width = r.width;", "+\t\t\trect.height = r.height;", "+\t\t\tOS.gdk_region_union_with_rect(region, rect);", "+\t\t\trect.x++;", "+\t\t\trect.y++;", "+\t\t\trect.width -= 2;", "+\t\t\trect.height -= 2;", "+\t\t\tlong /*int*/ rgn = OS.gdk_region_rectangle(rect);", "+\t\t\tOS.gdk_region_subtract(region, rgn);", "+\t\t\tOS.gdk_region_destroy(rgn);", "+\t\t}", "+\t\tOS.gtk_widget_shape_combine_region (overlay, region);", "+\t\tOS.gdk_region_destroy (region);", "+\t\tlong /*int*/ overlayWindow = OS.gtk_widget_get_window (overlay);", "+\t\tOS.gdk_window_hide (overlayWindow);", "+\t\tOS.gdk_window_show (overlayWindow);", "+\t\treturn;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdfbec40e36c2b79705ab47e38fb0f48", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "318109a09b77020cb8d7f8d97b41b87933157e53", "commitAfterChange": "0a91b1bc8ed129ef04fc4f0a9cb0ec8e8a9db239", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " public Monitor [] getMonitors ()", "signatureAfterChange": " public Monitor [] getMonitors ()", "diff": ["-\t//TODO", "-\treturn new Monitor [] { getPrimaryMonitor() };", "+\tint screens = OS.Screen_AllScreens ();", "+\tif (screens == 0) error (SWT.ERROR_NO_HANDLES);", "+\tint screenCount = OS.ICollection_Count (screens);", "+\tMonitor [] monitors = new Monitor [screenCount];", "+\tfor (int i=0; i<screenCount; i++) {", "+\t\tint screen = OS.IList_default (screens, i);", "+\t\tint bounds = OS.Screen_Bounds (screen);", "+\t\tint workingArea = OS.Screen_WorkingArea (screen);", "+\t\tMonitor monitor = new Monitor ();", "+\t\tmonitor.x = OS.Rectangle_X (bounds); ", "+\t\tmonitor.y = OS.Rectangle_Y (bounds);", "+\t\tmonitor.width = OS.Rectangle_Width (bounds);", "+\t\tmonitor.height = OS.Rectangle_Height (bounds); ", "+\t\tmonitor.clientX = OS.Rectangle_X (workingArea);", "+\t\tmonitor.clientY = OS.Rectangle_Y (workingArea);", "+\t\tmonitor.clientWidth = OS.Rectangle_Width (workingArea);", "+\t\tmonitor.clientHeight = OS.Rectangle_Height (workingArea);", "+\t\tmonitors [i] = monitor;", "+\t\tOS.GCHandle_Free (workingArea);", "+\t\tOS.GCHandle_Free (bounds);", "+\t\tOS.GCHandle_Free (screen);", "+\t}", "+\tOS.GCHandle_Free (screens);", "+\treturn monitors;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9b562ccb5e35adc45c47fa555daa55d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/FontData.java", "commitBeforeChange": "daa2e3b2a72646e1ec016748054dc47ef1a447f2", "commitAfterChange": "bf08d579419148691d68ff3d58785f1979e00e55", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \t\r FontData(byte[] stem)", "signatureAfterChange": "\r \t\r FontData(byte[] stem)", "diff": ["+\tthis.stem = stem;\r", "+\tint fontID = OS.PfDecomposeStemToID(stem);\r", "+\tif (fontID != 0) {\r", "+\t\tint desc = OS.PfFontDescription(fontID);\r", "+\t\tint size = OS.PfFontSize(fontID);\r", "+\t\tint flags = OS.PfFontFlags(fontID);\r", "+\t\tint length = OS.strlen(desc);\r", "+\t\tbyte[] buffer = new byte[length];\r", "+\t\tOS.memmove(buffer, desc, length);\r", "+\t\tname = new String(Converter.mbcsToWcs(null, buffer));\r", "+\t\theight = size;\r", "+\t\tstyle = SWT.NORMAL;\r", "+\t\tif ((flags & OS.PF_STYLE_BOLD) != 0) style |= SWT.BOLD;\r", "+\t\tif ((flags & OS.PF_STYLE_ITALIC) != 0) style |= SWT.ITALIC;\r", "+\t\tOS.PfFreeFont(fontID);\r", "+\t\treturn;\r", "+\t}\r", "+\t/*\r", "+\t* For some reason, PfDecomposeStemToID sometimes fails to decompose\r", "+\t* a valid stem (e.g. TextFont09bi).\r", "+\t*/\r", "-\t\tname = new String(Converter.mbcsToWcs(null, info.desc)).trim();\r", "+\t\tchar[] chars = Converter.mbcsToWcs(null, info.desc);\r", "+\t\tint index = 0;\r", "+\t\twhile (index < chars.length) {\r", "+\t\t\tif (chars[index] == 0) break;\r", "+\t\t\tindex++;\r", "+\t\t}\r", "+\t\tname = new String(chars, 0, index);\r", "-\t\t* For some reason, sometimes PfQueryFontInfo does not\r", "+\t\t* For some reason, PfQueryFontInfo sometimes does not\r", "-\t\t\tString fontName = new String(Converter.mbcsToWcs(null, this.stem)).trim();\r", "+\t\t\tchars = Converter.mbcsToWcs(null, this.stem);\r", "+\t\t\tindex = 0;\r", "+\t\t\twhile (index < chars.length) {\r", "+\t\t\t\tif (chars[index] == 0) break;\r", "+\t\t\t\tindex++;\r", "+\t\t\t}\r", "+\t\t\tString fontName = new String(chars, 0, index);\r", "-\t} else {\r", "-\t\tthis.stem = stem;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65f6da0a216a9ce914e4b629ae1baff0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT PI/carbon/org/eclipse/swt/internal/carbon/MacUtil.java", "commitBeforeChange": "613f3b062dee50803159db7da63b3b9bae0d658b", "commitAfterChange": "0fc698334e61438df4603fa22222287c7edecfb2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic static void embedControl(int controlHandle, int parentControlHandle)", "signatureAfterChange": " \tpublic static void embedControl(int controlHandle, int parentControlHandle, int pos)", "diff": ["+\t */", "+\tpublic static void embedControl(int controlHandle, int parentControlHandle, int pos) {", "+\t\t", "+\t\t// add at end", "+\t\tif (OS.EmbedControl(controlHandle, parentControlHandle) != OS.kNoErr)", "+\t\t\tSystem.out.println(\"MacUtil.embedControl: could not embed control in parent\");", "+\t\t\t", "+\t\tint n= countSubControls(parentControlHandle)-1;", "+\t\t", "+\t\tif (pos < 0 || pos > n)", "+\t\t\tpos= n;", "+\t\t", "+\t\tint[] outControl= new int[1];", "+\t\tif (REVERSE) {", "+\t\t\tfor (int i= 0; i < pos; i++) {", "+\t\t\t\tif (OS.GetIndexedSubControl(parentControlHandle, (short)(n-pos+1), outControl) == 0)", "+\t\t\t\t\tif (OS.EmbedControl(outControl[0], parentControlHandle) != OS.kNoErr)", "+\t\t\t\t\t\tSystem.out.println(\"MacUtil.embedControl: couldn't move control to end\");", "+\t\t\t}", "+\t\t\t", "+\t\t} else {", "+\t\t\tint count= n-pos;", "+\t\t\tfor (int i= 0; i < count; i++) {", "+\t\t\t\tif (OS.GetIndexedSubControl(parentControlHandle, (short)(pos+1), outControl) == 0)", "+\t\t\t\t\tif (OS.EmbedControl(outControl[0], parentControlHandle) != OS.kNoErr)", "+\t\t\t\t\t\tSystem.out.println(\"MacUtil.embedControl: couldn't move control to end\");", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\t// verify correct position", "+\t\tn++;", "+\t\tfor (int i= 0; i < n; i++) {", "+\t\t\tint index= REVERSE ? (n-i) : (i+1);", "+\t\t\tint[] outHandle= new int[1];", "+\t\t\tif (OS.GetIndexedSubControl(parentControlHandle, (short)index, outHandle) == 0) {\t// indices are 1 based", "+\t\t\t\tif (outHandle[0] == controlHandle) {", "+\t\t\t\t\tif (i != pos)", "+\t\t\t\t\t\tSystem.out.println(\"MacUtil.embedControl: creation at position nyi (is: \"+i+\" should: \"+ pos+\")\");", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tSystem.out.println(\"MacUtil.embedControl: new child not found\");", "-\t\tif (REVERSE) {", "-\t\t\tint count= countSubControls(parentControlHandle);", "-\t\t\tOS.EmbedControl(controlHandle, parentControlHandle);", "-\t\t\tint[] outControl= new int[1];", "-\t\t\tfor (int i= 0; i < count; i++) {", "-\t\t\t\tif (OS.GetIndexedSubControl(parentControlHandle, (short)(1), outControl) == 0)", "-\t\t\t\t\tOS.EmbedControl(outControl[0], parentControlHandle);", "-\t\t\t\telse", "-\t\t\t\t\tthrow new SWTError();", "-\t\t\t}", "-\t\t} else {", "-\t\t\tOS.EmbedControl(controlHandle, parentControlHandle);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf898f157c3748553bfa7a6150aa2c9b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "1c37647de5534f8029867b682ff6e27fa9349dcf", "commitAfterChange": "96591e42a75d692597f71a4a0cadb654241fef4e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r private int dragProcCallback(int widget, int client_data, int call_data)", "signatureAfterChange": "\r private int dragProcCallback(int widget, int client_data, int call_data)", "diff": ["+}\r", "+\t\t\t\tdragOverHeartbeat = new Runnable() {\r", "+\t\t\t\t\tpublic void run() {\r", "+\t\t\t\t\t\tif (control.isDisposed() || dragOverStart == 0) return;\r", "+\t\t\t\t\t\tlong time = System.currentTimeMillis();\r", "+\t\t\t\t\t\tint delay = DRAGOVER_HYSTERESIS;\r", "+\t\t\t\t\t\tif (time >= dragOverStart) {\r", "+\t\t\t\t\t\t\tDNDEvent event = new DNDEvent();\r", "+\t\t\t\t\t\t\tevent.widget = control;\r", "+\t\t\t\t\t\t\tevent.time = (int)time;\r", "+\t\t\t\t\t\t\tevent.x = dragOverEvent.x;\r", "+\t\t\t\t\t\t\tevent.y = dragOverEvent.y;\r", "+\t\t\t\t\t\t\tevent.dataTypes  = dragOverEvent.dataTypes;\r", "+\t\t\t\t\t\t\tevent.feedback = DND.FEEDBACK_SELECT;\r", "+\t\t\t\t\t\t\tevent.operations = dragOverEvent.operations;\r", "+\t\t\t\t\t\t\tevent.dataType  = dragOverEvent.dataType;\r", "+\t\t\t\t\t\t\tevent.detail  = dragOverEvent.detail;\r", "+\t\t\t\t\t\t\tnotifyListeners(DND.DragOver, event);\r", "+\t\t\t\t\t\t\teffect.show(event.feedback, event.x, event.y);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tdelay = (int)(dragOverStart - time);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tcontrol.getDisplay().timerExec(delay, dragOverHeartbeat);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t};\r", "+\t\t\t\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);\r", "+\t\t\t\t\r", "+\t\t\t\tdragOverHeartbeat.run();\r", "+\t\t\t\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);\r", "+\t\t\t\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);\r", "+\t\t\t\tupdateDragOverHover(0, null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d9e40d0a9446264ab6be1106f75d3c3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "f664172a0e735d142051b2da26600fbd256e07a6", "commitAfterChange": "894e6297387f95786ffea31acd399cd5951b0afc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  void drawRectangles ()", "signatureAfterChange": "   void drawRectangles (int window, boolean erase)", "diff": ["-void drawRectangles () {", "+", "+void drawRectangles (int window, boolean erase) {", "+\tint[] context = new int [1];", "+\tint port = OS.GetWindowPort (window);", "+\tRect portRect = new Rect ();", "+\tOS.GetPortBounds (port, portRect);", "+\tOS.QDBeginCGContext (port, context);", "+\tOS.CGContextScaleCTM (context [0], 1, -1);", "+\tOS.CGContextTranslateCTM (context [0], 0, portRect.top - portRect.bottom);", "+\tCGRect cgRect = new CGRect ();", "+\tfor (int i=0; i<rectangles.length; i++) {", "+\t\tRectangle rect = rectangles [i];", "+\t\tcgRect.x = rect.x;", "+\t\tcgRect.y = rect.y;", "+\t\tcgRect.width = rect.width;", "+\t\tcgRect.height = rect.height;", "+\t\tif (erase) {", "+\t\t\tcgRect.width++;", "+\t\t\tcgRect.height++;", "+\t\t\tOS.CGContextClearRect (context [0], cgRect);", "+\t\t} else {", "+\t\t\tcgRect.x += 0.5f;", "+\t\t\tcgRect.y += 0.5f;", "+\t\t\tOS.CGContextStrokeRect (context [0], cgRect);", "+\t\t}", "+\t}", "+\tOS.CGContextSynchronize (context [0]);", "+\tOS.QDEndCGContext (port, context);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b71c5843e7092273a02d509113a4e789", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "00ed21c8f8c77f61853a45cda676574d76d69e41", "commitAfterChange": "8e00f3751d53017bb47fe8df7b2fb0596267f9cb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 12, "signatureBeforeChange": " public String[] getAvailableTypeNames()", "signatureAfterChange": " public String[] getAvailableTypeNames()", "diff": ["+ */", "+public String[] getAvailableTypeNames() {", "+\tcheckWidget();", "+\tint xDisplay = OS.XtDisplay (shellHandle);", "+\tif (xDisplay == 0) return new String[0];", "+\tint[] types = getAvailableTypes(xDisplay, clipboardAtom);", "+\tint[] primaryTypes = getAvailableTypes(xDisplay, primaryAtom);", "+\tString[] names = new String[types.length + primaryTypes.length];", "+\tint index = 0;", "+\tfor (int i = 0; i < types.length; i++) {", "+\t\tint ptr = OS.XmGetAtomName(xDisplay, types[i]);", "+\t\tint length = OS.strlen(ptr);", "+\t\tbyte[] nameBuf = new byte[length];", "+\t\tOS.memmove(nameBuf, ptr, length);", "+\t\tOS.XtFree(ptr);", "+\t\t/* Use the character encoding for the default locale */", "+\t\tString name = new String(Converter.mbcsToWcs(null, nameBuf));", "+\t\tnames[index++] = \"CLIPBOARD \"+name;", "+\t}", "+\tfor (int i = 0; i < primaryTypes.length; i++) {", "+\t\tint ptr = OS.XmGetAtomName(xDisplay, primaryTypes[i]);", "+\t\tint length = OS.strlen(ptr);", "+\t\tbyte[] nameBuf = new byte[length];", "+\t\tOS.memmove(nameBuf, ptr, length);", "+\t\tOS.XtFree(ptr);", "+\t\t/* Use the character encoding for the default locale */", "+\t\tString name = new String(Converter.mbcsToWcs(null, nameBuf));", "+\t\tnames[index++] = \"PRIMARY \"+name;", "+\t}", "+\treturn names;", "+}", "- */", "-public String[] getAvailableTypeNames() {", "-\tcheckWidget();", "-\tbyte[][] types = _getAvailableTypes();", "-\tString[] names = new String[types.length];", "-\tfor (int i = 0; i < names.length; i++) {", "-\t\t/* Use the character encoding for the default locale */", "-\t\tnames[i] = new String(Converter.mbcsToWcs(null, types[i]));", "-\t}", "-\treturn names;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5119087065061152c74c2d042e7eba32", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "cc0fad88555aedea732afabf4f640a307f9e13a1", "commitAfterChange": "6cafe1a53c0f4db15b7c20ac96efa6457f877696", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void drawBackground (int id, NSGraphicsContext context, NSRect rect)", "signatureAfterChange": "  public void drawBackground(GC gc, int x, int y, int width, int height, int offsetX, int offsetY)", "diff": ["+public void drawBackground(GC gc, int x, int y, int width, int height, int offsetX, int offsetY) {", "+\tcheckWidget ();", "+\tif (gc == null) error (SWT.ERROR_NULL_ARGUMENT);", "+\tif (gc.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);", "+\tControl control = findBackgroundControl ();", "+\tif (control != null) {", "+\t\tNSRect rect = new NSRect();", "+\t\trect.x = x;", "+\t\trect.y = y;", "+\t\trect.width = width;", "+\t\trect.height = height;", "+\t\tint imgHeight = -1;", "+\t\tGCData data = gc.getGCData();", "+\t\tif (data.image != null) imgHeight =  data.image.getBounds().height;", "+\t\tNSGraphicsContext context = gc.handle;", "+\t\tif (data.flippedContext != null) {", "+\t\t\tNSGraphicsContext.static_saveGraphicsState();", "+\t\t\tNSGraphicsContext.setCurrentContext(context);", "+\t\t}", "+\t\tcontrol.fillBackground (view, context, rect, imgHeight, offsetX, offsetY);", "+\t\tif (data.flippedContext != null) {", "+\t\t\tNSGraphicsContext.static_restoreGraphicsState();", "+\t\t}", "+\t} else {", "+\t\tgc.fillRectangle (x, y, width, height);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24368bdfcda133793a138fcc8fb34d03", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "2703b6b4917ee70e34e69f6beabdf6e17c0e648e", "commitAfterChange": "0e0eae7504b067875076ee5d9af4693ac4a9b250", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  NSBitmapImageRep getRepresentation ()", "signatureAfterChange": "  NSBitmapImageRep getRepresentation ()", "diff": ["-\tNSImageRep rep = handle.bestRepresentationForDevice(null);", "-\tif (!rep.isKindOfClass(OS.class_NSBitmapImageRep)) {", "-\t\tSWT.error(SWT.ERROR_UNSPECIFIED);", "+\tNSBitmapImageRep rep = new NSBitmapImageRep(handle.bestRepresentationForDevice(null));", "+\tif (rep.isKindOfClass(OS.class_NSBitmapImageRep)) {", "+\t\treturn rep;", "-\treturn new NSBitmapImageRep(rep);", "+\tNSArray reps = handle.representations();", "+\tNSSize size = handle.size();", "+\tint /*long*/ count = reps.count();", "+\tNSBitmapImageRep bestRep = null;", "+\tfor (int i = 0; i < count; i++) {", "+\t\trep = new NSBitmapImageRep(reps.objectAtIndex(i));", "+\t\tif (rep.isKindOfClass(OS.class_NSBitmapImageRep)) return rep;", "+\t\tif (bestRep == null || ((int)size.width == rep.pixelsWide() && (int)size.height == rep.pixelsHigh())) {", "+\t\t\tbestRep = rep;", "+\t\t}", "+\t}", "+\tbestRep.retain();", "+\tfor (int i = 0; i < count; i++) {", "+\t\thandle.removeRepresentation(new NSImageRep(handle.representations().objectAtIndex(0)));", "+\t}", "+\thandle.addRepresentation(bestRep);", "+\tNSBitmapImageRep newRep = (NSBitmapImageRep)new NSBitmapImageRep().alloc();", "+\tnewRep = newRep.initWithData(handle.TIFFRepresentation());", "+\thandle.addRepresentation(newRep);", "+\thandle.removeRepresentation(bestRep);", "+\tbestRep.release();", "+\tnewRep.release();", "+\treturn newRep;"]}], "num": 13179}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a45950574425042f67b4ead6f57dbbe", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa2a44f78548f103c5b6bcab382485b1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "f72bfdff3bc176627d604e0a70e04d5844399d73", "commitAfterChange": "06f7df35a761c3b3ac5b1850e81b81415f7cfef4", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["-\tif (!OS.IsPPC) return super.WM_LBUTTONDOWN (wParam, lParam);", "-\tLRESULT result = null;", "-\tif (!sendMouseEvent (SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam)) {", "-\t\tresult = LRESULT.ZERO;", "-\t}", "-\t/*", "-\t* Note: On WinCE PPC, only attempt to recognize the gesture for", "-\t* a context menu when the control contains a valid menu or there", "-\t* are listeners for the MenuDetect event.", "-\t* ", "-\t* Note: On WinCE PPC, the gesture that brings up a popup menu", "-\t* on the text widget must keep the current text selection.  As a", "-\t* result, the window proc is only called if the menu is not shown.", "-\t*/", "-\tboolean hasMenu = menu != null && !menu.isDisposed ();", "-\tif (hasMenu || hooks (SWT.MenuDetect)) {", "-\t\tint x = (short) (lParam & 0xFFFF);", "-\t\tint y = (short) (lParam >> 16);", "-\t\tSHRGINFO shrg = new SHRGINFO ();", "-\t\tshrg.cbSize = SHRGINFO.sizeof;", "-\t\tshrg.hwndClient = handle;", "-\t\tshrg.ptDown_x = x;", "-\t\tshrg.ptDown_y = y; ", "-\t\tshrg.dwFlags = OS.SHRG_RETURNCMD;", "-\t\tint type = OS.SHRecognizeGesture (shrg);", "-\t\tif (type == OS.GN_CONTEXTMENU) {", "-\t\t\tshowMenu (x, y);", "-\t\t\treturn LRESULT.ONE;", "+\tif (OS.IsPPC) {", "+\t\tLRESULT result = null;", "+\t\tboolean dispatch = sendMouseEvent (SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam);", "+\t\t/*", "+\t\t* Note: On WinCE PPC, only attempt to recognize the gesture for", "+\t\t* a context menu when the control contains a valid menu or there", "+\t\t* are listeners for the MenuDetect event.", "+\t\t* ", "+\t\t* Note: On WinCE PPC, the gesture that brings up a popup menu", "+\t\t* on the text widget must keep the current text selection.  As a", "+\t\t* result, the window proc is only called if the menu is not shown.", "+\t\t*/", "+\t\tboolean hasMenu = menu != null && !menu.isDisposed ();", "+\t\tif (hasMenu || hooks (SWT.MenuDetect)) {", "+\t\t\tint x = (short) (lParam & 0xFFFF);", "+\t\t\tint y = (short) (lParam >> 16);", "+\t\t\tSHRGINFO shrg = new SHRGINFO ();", "+\t\t\tshrg.cbSize = SHRGINFO.sizeof;", "+\t\t\tshrg.hwndClient = handle;", "+\t\t\tshrg.ptDown_x = x;", "+\t\t\tshrg.ptDown_y = y; ", "+\t\t\tshrg.dwFlags = OS.SHRG_RETURNCMD;", "+\t\t\tint type = OS.SHRecognizeGesture (shrg);", "+\t\t\tif (type == OS.GN_CONTEXTMENU) {", "+\t\t\t\tshowMenu (x, y);", "+\t\t\t\treturn LRESULT.ONE;", "+\t\t\t}", "+\t\tif (dispatch) {", "+\t\t\tresult = new LRESULT (callWindowProc (handle, OS.WM_LBUTTONDOWN, wParam, lParam));", "+\t\t} else {", "+\t\t\tresult = LRESULT.ZERO;", "+\t\t}", "+\t\tif (OS.GetCapture () != handle) OS.SetCapture (handle);", "+\t\treturn result;", "-\tif (OS.GetCapture () != handle) OS.SetCapture (handle);", "-\treturn result;", "+\t return super.WM_LBUTTONDOWN (wParam, lParam);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbc40908fb769c695ec784456b4a5b35", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "272967205f3824ec29456112026262c64ae69dfa", "commitAfterChange": "fc62fa389f9358a82d98c59fbeba910f7ca8c593", "methodNumberBeforeChange": 187, "methodNumberAfterChange": 185, "signatureBeforeChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["-\tboolean dragging = false, mouseDown = true;", "-\tboolean dragDetect = hooks (SWT.DragDetect);", "-\tif (dragDetect) {", "-\t\tif (!OS.IsWinCE) {", "-\t\t\t/*", "-\t\t\t* Feature in Windows.  It's possible that the drag", "-\t\t\t* operation will not be started while the mouse is", "-\t\t\t* down, meaning that the mouse should be captured.", "-\t\t\t* This can happen when the user types the ESC key", "-\t\t\t* to cancel the drag.  The fix is to query the state", "-\t\t\t* of the mouse and capture the mouse accordingly.", "-\t\t\t*/", "-\t\t\tPOINT pt = new POINT ();", "-\t\t\tpt.x = (short) (lParam & 0xFFFF);", "-\t\t\tpt.y = (short) (lParam >> 16);", "-\t\t\tOS.ClientToScreen(handle, pt);", "-\t\t\tdragging = OS.DragDetect (handle, pt);", "-\t\t\tmouseDown = OS.GetKeyState (OS.VK_LBUTTON) < 0;", "-\t\t}", "-\t}", "-\tsendMouseEvent (SWT.MouseDown, 1, OS.WM_LBUTTONDOWN, wParam, lParam);", "-\tint result = callWindowProc (OS.WM_LBUTTONDOWN, wParam, lParam);\t", "-\tif (OS.IsPPC) {", "-\t\t/*", "-\t\t* Note: On WinCE PPC, only attempt to recognize the gesture for", "-\t\t* a context menu when the control contains a valid menu or there", "-\t\t* are listeners for the MenuDetect event.", "-\t\t*/", "-\t\tboolean hasMenu = menu != null && !menu.isDisposed ();", "-\t\tif (hasMenu || hooks (SWT.MenuDetect)) {", "-\t\t\tint x = (short) (lParam & 0xFFFF);", "-\t\t\tint y = (short) (lParam >> 16);", "-\t\t\tSHRGINFO shrg = new SHRGINFO ();", "-\t\t\tshrg.cbSize = SHRGINFO.sizeof;", "-\t\t\tshrg.hwndClient = handle;", "-\t\t\tshrg.ptDown_x = x;", "-\t\t\tshrg.ptDown_y = y; ", "-\t\t\tshrg.dwFlags = OS.SHRG_RETURNCMD;", "-\t\t\tint type = OS.SHRecognizeGesture (shrg);", "-\t\t\tif (type == OS.GN_CONTEXTMENU) showMenu (x, y);", "-\t\t}", "-\t}", "-\tif (mouseDown) {", "-\t\tif (OS.GetCapture () != handle) OS.SetCapture (handle);", "-\t}", "-\tif (dragging) {", "-\t\tEvent event = new Event ();", "-\t\tevent.x = (short) (lParam & 0xFFFF);", "-\t\tevent.y = (short) (lParam >> 16);", "-\t\tpostEvent (SWT.DragDetect, event);", "-\t} else {", "-\t\tif (dragDetect) {", "-\t\t\t/*", "-\t\t\t* Feature in Windows.  DragDetect() captures the mouse", "-\t\t\t* and tracks its movement until the user releases the", "-\t\t\t* left mouse button, presses the ESC key, or moves the", "-\t\t\t* mouse outside the drag rectangle.  If the user moves", "-\t\t\t* the mouse outside of the drag rectangle, DragDetect()", "-\t\t\t* returns true and a drag and drop operation can be", "-\t\t\t* started.  When the left mouse button is released or", "-\t\t\t* the ESC key is pressed, these events are consumed by", "-\t\t\t* DragDetect() so that application code that matches", "-\t\t\t* mouse down/up pairs or looks for the ESC key will not", "-\t\t\t* function properly.  The fix is to send these events", "-\t\t\t* when the drag has not started.", "-\t\t\t* ", "-\t\t\t* NOTE: For now, don't send a fake WM_KEYDOWN/WM_KEYUP", "-\t\t\t* events for the ESC key.  This would require computing", "-\t\t\t* wParam (the key) and lParam (the repeat count, scan code,", "-\t\t\t* extended-key flag, context code, previous key-state flag,", "-\t\t\t* and transition-state flag) which is non-trivial.", "-\t\t\t*/", "-\t\t\tif (OS.GetKeyState (OS.VK_ESCAPE) >= 0) {", "-\t\t\t\tOS.SendMessage (handle, OS.WM_LBUTTONUP, wParam, lParam);", "-\t\t\t}", "-\t\t}", "-\t}", "-\treturn new LRESULT (result);", "+\treturn wmLButtonDown (handle, wParam, lParam);"]}], "num": 58636}
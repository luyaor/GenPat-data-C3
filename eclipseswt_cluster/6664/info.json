{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09dc2bb28d10eb7a96704b6ddd048bec", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71820e5d7328b316fab27d6dd12e790a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "48e187525dbdddb19c5ae73327fdafa3851247d0", "commitAfterChange": "4810e30ca3e1729018edf0620ce78065e4c1622b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["-\treturn OS.CallWindowProc (EditProc, hwnd, msg, wParam, lParam);", "+\tboolean redraw = false;", "+\tswitch (msg) {", "+\t\tcase OS.WM_ERASEBKGND: {", "+\t\t\tif (findImageControl () != null) return 0;", "+\t\t\tbreak;", "+\t\t}", "+\t\tcase OS.WM_HSCROLL:", "+\t\tcase OS.WM_VSCROLL: {", "+\t\t\tredraw = findImageControl () != null && drawCount == 0 && OS.IsWindowVisible (handle);", "+\t\t\tif (redraw) OS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);", "+\t\t\tbreak;", "+\t\t}", "+\t\tcase OS.WM_PAINT: {", "+\t\t\tif (findImageControl () != null) {", "+\t\t\t\tint /*long*/ paintDC = 0;", "+\t\t\t\tPAINTSTRUCT ps = new PAINTSTRUCT ();", "+\t\t\t\tpaintDC = OS.BeginPaint (handle, ps);", "+\t\t\t\tint width = ps.right - ps.left;", "+\t\t\t\tint height = ps.bottom - ps.top;", "+\t\t\t\tif (width != 0 && height != 0) {", "+\t\t\t\t\tint /*long*/ hDC = OS.CreateCompatibleDC (paintDC);", "+\t\t\t\t\tPOINT lpPoint1 = new POINT (), lpPoint2 = new POINT ();", "+\t\t\t\t\tOS.SetWindowOrgEx (hDC, ps.left, ps.top, lpPoint1);", "+\t\t\t\t\tOS.SetBrushOrgEx (hDC, ps.left, ps.top, lpPoint2);", "+\t\t\t\t\tint /*long*/ hBitmap = OS.CreateCompatibleBitmap (paintDC, width, height);", "+\t\t\t\t\tint /*long*/ hOldBitmap = OS.SelectObject (hDC, hBitmap);", "+\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\tOS.SetRect (rect, ps.left, ps.top, ps.right, ps.bottom);", "+\t\t\t\t\tdrawBackground (hDC, rect);", "+\t\t\t\t\tOS.CallWindowProc (EditProc, hwnd, OS.WM_PAINT, hDC, lParam);", "+\t\t\t\t\tOS.SetWindowOrgEx (hDC, lpPoint1.x, lpPoint1.y, null);", "+\t\t\t\t\tOS.SetBrushOrgEx (hDC, lpPoint2.x, lpPoint2.y, null);", "+\t\t\t\t\tOS.BitBlt (paintDC, ps.left, ps.top, width, height, hDC, 0, 0, OS.SRCCOPY);", "+\t\t\t\t\tOS.SelectObject (hDC, hOldBitmap);", "+\t\t\t\t\tOS.DeleteObject (hBitmap);", "+\t\t\t\t\tOS.DeleteObject (hDC);", "+\t\t\t\t}", "+\t\t\t\tOS.EndPaint (handle, ps);", "+\t\t\t\treturn 0;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}", "+\t}", "+\tint code = OS.CallWindowProc (EditProc, hwnd, msg, wParam, lParam);", "+\tswitch (msg) {", "+\t\tcase OS.WM_HSCROLL:", "+\t\tcase OS.WM_VSCROLL: {", "+\t\t\tif (redraw) {", "+\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);", "+\t\t\t\tOS.InvalidateRect (handle, null, true);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}", "+\t}", "+\treturn code;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd5473f6add8bd9289d7444e3300d7db", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "19d40d336daa4e3db6b54275b7dc9fbe609c5b93", "commitAfterChange": "7c624d9e35088a7e3b485b89c8f8d5e4cdc57534", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "diff": ["-\t\t/* Create the paint GC */", "-\t\tGCData data = new GCData ();", "-\t\tdata.ps = ps;", "-\t\tdata.hwnd = handle;", "-\t\tGC gc = GC.win32_new (this, data);", "-", "-\t\t/* Get the system region for the paint HDC */", "-\t\tint sysRgn = 0;", "-\t\tif ((style & (SWT.NO_MERGE_PAINTS | SWT.DOUBLE_BUFFERED)) != 0) {", "-\t\t\tsysRgn = OS.CreateRectRgn (0, 0, 0, 0);", "-\t\t\tif (OS.GetRandomRgn (gc.handle, sysRgn, OS.SYSRGN) == 1) {", "-\t\t\t\tif (OS.WIN32_VERSION >= OS.VERSION (4, 10)) {", "-\t\t\t\t\tif ((OS.GetLayout (gc.handle) & OS.LAYOUT_RTL) != 0) {", "-\t\t\t\t\t\tint nBytes = OS.GetRegionData (sysRgn, 0, null);", "-\t\t\t\t\t\tint [] lpRgnData = new int [nBytes / 4];", "-\t\t\t\t\t\tOS.GetRegionData (sysRgn, nBytes, lpRgnData);", "-\t\t\t\t\t\tint newSysRgn = OS.ExtCreateRegion (new float [] {-1, 0, 0, 1, 0, 0}, nBytes, lpRgnData);", "-\t\t\t\t\t\tOS.DeleteObject (sysRgn);", "-\t\t\t\t\t\tsysRgn = newSysRgn;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (OS.IsWinNT) {", "-\t\t\t\t\tPOINT pt = new POINT();", "-\t\t\t\t\tOS.MapWindowPoints (0, handle, pt, 1);", "-\t\t\t\t\tOS.OffsetRgn (sysRgn, pt.x, pt.y);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\t/* Send the paint event */", "-\t\tint width = ps.right - ps.left;", "-\t\tint height = ps.bottom - ps.top;", "-\t\tif (width != 0 && height != 0) {", "-\t\t\tGC paintGC = null;", "-\t\t\tImage image = null;", "-\t\t\tif ((style & SWT.DOUBLE_BUFFERED) != 0) {", "-\t\t\t\timage = new Image (display, width, height);", "-\t\t\t\tpaintGC = gc;", "-\t\t\t\tgc = new GC (image, paintGC.getStyle() & SWT.RIGHT_TO_LEFT);", "-\t\t\t\tGCData gcData = gc.getGCData ();", "-\t\t\t\tgcData.uiState = data.uiState;", "-\t\t\t\tgc.setForeground (getForeground ());", "-\t\t\t\tgc.setBackground (getBackground ());", "-\t\t\t\tgc.setFont (getFont ());", "-\t\t\t\tOS.OffsetRgn (sysRgn, -ps.left, -ps.top);", "-\t\t\t\tOS.SelectClipRgn (gc.handle, sysRgn);", "-\t\t\t\tOS.OffsetRgn (sysRgn, ps.left, ps.top);", "-\t\t\t\tOS.SetMetaRgn (gc.handle);\t", "-\t\t\t\tOS.SetWindowOrgEx (gc.handle, ps.left, ps.top, null);", "-\t\t\t\tOS.SetBrushOrgEx (gc.handle, ps.left, ps.top, null);", "+\t\t/* Use the buffered paint when available */", "+\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0) && (style & SWT.DOUBLE_BUFFERED) != 0 && (style & SWT.NO_MERGE_PAINTS) == 0) {", "+\t\t\tint hDC = OS.BeginPaint (handle, ps);", "+\t\t\tint width = ps.right - ps.left;", "+\t\t\tint height = ps.bottom - ps.top;", "+\t\t\tif (width != 0 && height != 0) {", "+\t\t\t\tint [] phdc = new int [1];", "+\t\t\t\tint flags = OS.BPBF_COMPATIBLEBITMAP;", "+\t\t\t\tRECT prcTarget = new RECT ();", "+\t\t\t\tOS.SetRect (prcTarget, ps.left, ps.top, ps.right, ps.bottom);", "+\t\t\t\tint hBufferedPaint = OS.BeginBufferedPaint (hDC, prcTarget, flags, null, phdc);", "+\t\t\t\tGCData data = new GCData ();", "+\t\t\t\tdata.device = display;", "+\t\t\t\tdata.foreground = getForegroundPixel ();", "+\t\t\t\tControl control = findBackgroundControl ();", "+\t\t\t\tif (control == null) control = this;", "+\t\t\t\tdata.background = control.getBackgroundPixel ();", "+\t\t\t\tdata.hPen = OS.CreatePen (OS.PS_SOLID, 0, data.foreground);", "+\t\t\t\tdata.hBrush = OS.CreateSolidBrush (data.background);", "+\t\t\t\tdata.hFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "+\t\t\t\tdata.uiState = OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "-\t\t\t\t\tdrawBackground (gc.handle, rect);", "+\t\t\t\t\tdrawBackground (phdc [0], rect);", "-\t\t\t}", "-\t\t\tEvent event = new Event ();", "-\t\t\tevent.gc = gc;\t\t\t", "-\t\t\tRECT rect = null;", "-\t\t\tif ((style & SWT.NO_MERGE_PAINTS) != 0 && OS.GetRgnBox (sysRgn, rect = new RECT ()) == OS.COMPLEXREGION) {", "-\t\t\t\tint nBytes = OS.GetRegionData (sysRgn, 0, null);", "-\t\t\t\tint [] lpRgnData = new int [nBytes / 4];", "-\t\t\t\tOS.GetRegionData (sysRgn, nBytes, lpRgnData);", "-\t\t\t\tint count = lpRgnData [2];", "-\t\t\t\tfor (int i=0; i<count; i++) {", "-\t\t\t\t\tint offset = 8 + (i << 2);", "-\t\t\t\t\tOS.SetRect (rect, lpRgnData [offset], lpRgnData [offset + 1], lpRgnData [offset + 2], lpRgnData [offset + 3]);", "-\t\t\t\t\tif ((style & (SWT.DOUBLE_BUFFERED | SWT.NO_BACKGROUND)) == 0) {", "-\t\t\t\t\t\tdrawBackground (gc.handle, rect);", "-\t\t\t\t\t}", "-\t\t\t\t\tevent.x = rect.left;", "-\t\t\t\t\tevent.y = rect.top;", "-\t\t\t\t\tevent.width = rect.right - rect.left;", "-\t\t\t\t\tevent.height = rect.bottom - rect.top;", "-\t\t\t\t\tevent.count = count - 1 - i;", "-\t\t\t\t\tsendEvent (SWT.Paint, event);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif ((style & (SWT.DOUBLE_BUFFERED | SWT.NO_BACKGROUND)) == 0) {", "-\t\t\t\t\tif (rect == null) rect = new RECT ();", "-\t\t\t\t\tOS.SetRect (rect, ps.left, ps.top, ps.right, ps.bottom);", "-\t\t\t\t\tdrawBackground (gc.handle, rect);", "-\t\t\t\t}", "+\t\t\t\tGC gc = GC.win32_new (phdc [0], data);", "+\t\t\t\tEvent event = new Event ();", "+\t\t\t\tevent.gc = gc;\t\t\t", "+\t\t\t\tOS.EndBufferedPaint (hBufferedPaint, true);", "+\t\t\t\tgc.dispose ();", "-\t\t\t// widget could be disposed at this point", "-\t\t\tevent.gc = null;", "-\t\t\tif ((style & SWT.DOUBLE_BUFFERED) != 0) {", "-\t\t\t\tgc.dispose();", "-\t\t\t\tif (!isDisposed ()) {", "-\t\t\t\t\tpaintGC.drawImage (image, ps.left, ps.top);", "+\t\t\tOS.EndPaint (handle, ps);", "+\t\t} else {", "+\t\t\t", "+\t\t\t/* Create the paint GC */", "+\t\t\tGCData data = new GCData ();", "+\t\t\tdata.ps = ps;", "+\t\t\tdata.hwnd = handle;", "+\t\t\tGC gc = GC.win32_new (this, data);", "+", "+\t\t\t/* Get the system region for the paint HDC */", "+\t\t\tint sysRgn = 0;", "+\t\t\tif ((style & (SWT.NO_MERGE_PAINTS | SWT.DOUBLE_BUFFERED)) != 0) {", "+\t\t\t\tsysRgn = OS.CreateRectRgn (0, 0, 0, 0);", "+\t\t\t\tif (OS.GetRandomRgn (gc.handle, sysRgn, OS.SYSRGN) == 1) {", "+\t\t\t\t\tif (OS.WIN32_VERSION >= OS.VERSION (4, 10)) {", "+\t\t\t\t\t\tif ((OS.GetLayout (gc.handle) & OS.LAYOUT_RTL) != 0) {", "+\t\t\t\t\t\t\tint nBytes = OS.GetRegionData (sysRgn, 0, null);", "+\t\t\t\t\t\t\tint [] lpRgnData = new int [nBytes / 4];", "+\t\t\t\t\t\t\tOS.GetRegionData (sysRgn, nBytes, lpRgnData);", "+\t\t\t\t\t\t\tint newSysRgn = OS.ExtCreateRegion (new float [] {-1, 0, 0, 1, 0, 0}, nBytes, lpRgnData);", "+\t\t\t\t\t\t\tOS.DeleteObject (sysRgn);", "+\t\t\t\t\t\t\tsysRgn = newSysRgn;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (OS.IsWinNT) {", "+\t\t\t\t\t\tPOINT pt = new POINT();", "+\t\t\t\t\t\tOS.MapWindowPoints (0, handle, pt, 1);", "+\t\t\t\t\t\tOS.OffsetRgn (sysRgn, pt.x, pt.y);", "+\t\t\t\t\t}", "-\t\t\t\timage.dispose ();", "-\t\t\t\tgc = paintGC;", "+\t\t\t", "+\t\t\t/* Send the paint event */", "+\t\t\tint width = ps.right - ps.left;", "+\t\t\tint height = ps.bottom - ps.top;", "+\t\t\tif (width != 0 && height != 0) {", "+\t\t\t\tGC paintGC = null;", "+\t\t\t\tImage image = null;", "+\t\t\t\tif ((style & SWT.DOUBLE_BUFFERED) != 0) {", "+\t\t\t\t\timage = new Image (display, width, height);", "+\t\t\t\t\tpaintGC = gc;", "+\t\t\t\t\tgc = new GC (image, paintGC.getStyle() & SWT.RIGHT_TO_LEFT);", "+\t\t\t\t\tGCData gcData = gc.getGCData ();", "+\t\t\t\t\tgcData.uiState = data.uiState;", "+\t\t\t\t\tgc.setForeground (getForeground ());", "+\t\t\t\t\tgc.setBackground (getBackground ());", "+\t\t\t\t\tgc.setFont (getFont ());", "+\t\t\t\t\tOS.OffsetRgn (sysRgn, -ps.left, -ps.top);", "+\t\t\t\t\tOS.SelectClipRgn (gc.handle, sysRgn);", "+\t\t\t\t\tOS.OffsetRgn (sysRgn, ps.left, ps.top);", "+\t\t\t\t\tOS.SetMetaRgn (gc.handle);\t", "+\t\t\t\t\tOS.SetWindowOrgEx (gc.handle, ps.left, ps.top, null);", "+\t\t\t\t\tOS.SetBrushOrgEx (gc.handle, ps.left, ps.top, null);", "+\t\t\t\t\tif ((style & SWT.NO_BACKGROUND) != 0) {", "+\t\t\t\t\t\t/* This code is intentionally commented because it may be slow to copy bits from the screen */", "+\t\t\t\t\t\t//paintGC.copyArea (image, ps.left, ps.top);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tOS.SetRect (rect, ps.left, ps.top, ps.right, ps.bottom);", "+\t\t\t\t\t\tdrawBackground (gc.handle, rect);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tEvent event = new Event ();", "+\t\t\t\tevent.gc = gc;\t\t\t", "+\t\t\t\tRECT rect = null;", "+\t\t\t\tif ((style & SWT.NO_MERGE_PAINTS) != 0 && OS.GetRgnBox (sysRgn, rect = new RECT ()) == OS.COMPLEXREGION) {", "+\t\t\t\t\tint nBytes = OS.GetRegionData (sysRgn, 0, null);", "+\t\t\t\t\tint [] lpRgnData = new int [nBytes / 4];", "+\t\t\t\t\tOS.GetRegionData (sysRgn, nBytes, lpRgnData);", "+\t\t\t\t\tint count = lpRgnData [2];", "+\t\t\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\t\t\tint offset = 8 + (i << 2);", "+\t\t\t\t\t\tOS.SetRect (rect, lpRgnData [offset], lpRgnData [offset + 1], lpRgnData [offset + 2], lpRgnData [offset + 3]);", "+\t\t\t\t\t\tif ((style & (SWT.DOUBLE_BUFFERED | SWT.NO_BACKGROUND)) == 0) {", "+\t\t\t\t\t\t\tdrawBackground (gc.handle, rect);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tevent.x = rect.left;", "+\t\t\t\t\t\tevent.y = rect.top;", "+\t\t\t\t\t\tevent.width = rect.right - rect.left;", "+\t\t\t\t\t\tevent.height = rect.bottom - rect.top;", "+\t\t\t\t\t\tevent.count = count - 1 - i;", "+\t\t\t\t\t\tsendEvent (SWT.Paint, event);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif ((style & (SWT.DOUBLE_BUFFERED | SWT.NO_BACKGROUND)) == 0) {", "+\t\t\t\t\t\tif (rect == null) rect = new RECT ();", "+\t\t\t\t\t\tOS.SetRect (rect, ps.left, ps.top, ps.right, ps.bottom);", "+\t\t\t\t\t\tdrawBackground (gc.handle, rect);", "+\t\t\t\t\t}", "+\t\t\t\t\tevent.x = ps.left;", "+\t\t\t\t\tevent.y = ps.top;", "+\t\t\t\t\tevent.width = width;", "+\t\t\t\t\tevent.height = height;", "+\t\t\t\t\tsendEvent (SWT.Paint, event);", "+\t\t\t\t}", "+\t\t\t\t// widget could be disposed at this point", "+\t\t\t\tevent.gc = null;", "+\t\t\t\tif ((style & SWT.DOUBLE_BUFFERED) != 0) {", "+\t\t\t\t\tgc.dispose();", "+\t\t\t\t\tif (!isDisposed ()) paintGC.drawImage (image, ps.left, ps.top);", "+\t\t\t\t\timage.dispose ();", "+\t\t\t\t\tgc = paintGC;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (sysRgn != 0) OS.DeleteObject (sysRgn);", "+\t\t\t", "+\t\t\t/* Dispose the paint GC */", "+\t\t\tgc.dispose ();", "-\t\t", "-\t\t/* Dispose the paint GC */", "-\t\tgc.dispose ();", "-\t\tif (sysRgn != 0) OS.DeleteObject (sysRgn);"]}], "num": 6664}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c24f6c88c8ad4087af5dfaf68f59e4cf", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20b4974e241cc703988dcc5cce367ae5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "3549d4960b78a23e56b4090ec47809f2171fdc05", "commitAfterChange": "e9a1477165ad64d557ee73753a6f703c8ce2dfc8", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  int EnumFontFamProc (int lpelfe, int lpntme, int FontType, int lParam)", "signatureAfterChange": "  int EnumFontFamProc (int lpelfe, int lpntme, int FontType, int lParam)", "diff": ["-\tif ((lParam == 1) != isScalable) return 1;", "-\t", "-\t/* Add the log font to the list of log fonts */", "-\tif (nFonts == logFonts.length) {", "-\t\tLOGFONT [] newLogFonts = new LOGFONT [logFonts.length + 128];", "-\t\tSystem.arraycopy (logFonts, 0, newLogFonts, 0, nFonts);", "-\t\tlogFonts = newLogFonts;", "+\tboolean scalable = lParam == 1;", "+\tif (isScalable == scalable) {", "+\t\t/* Add the log font to the list of log fonts */", "+\t\tif (nFonts == logFonts.length) {", "+\t\t\tLOGFONT [] newLogFonts = new LOGFONT [logFonts.length + 128];", "+\t\t\tSystem.arraycopy (logFonts, 0, newLogFonts, 0, nFonts);", "+\t\t\tlogFonts = newLogFonts;", "+\t\t}", "+\t\tLOGFONT logFont = logFonts [nFonts];", "+\t\tif (logFont == null) logFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW () : new LOGFONTA ();", "+\t\tOS.MoveMemory (logFont, lpelfe, LOGFONT.sizeof);", "+\t\tlogFonts [nFonts++] = logFont;", "-\tLOGFONT logFont = logFonts [nFonts];", "-\tif (logFont == null) logFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW () : new LOGFONTA ();", "-\tOS.MoveMemory (logFont, lpelfe, LOGFONT.sizeof);", "-\tlogFonts [nFonts++] = logFont;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47d6e293f5e3704512c3b019818cb8a0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "7c8383f51b93f7d1d47653a4cf70e9ab97bfb48a", "commitAfterChange": "1a14ea69ecd8828d401196778d87114e683d18b8", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " public TreeItem [] getSelection ()", "signatureAfterChange": " public TreeItem [] getSelection ()", "diff": ["-\t\treturn new TreeItem [] {_getItem (tvItem.hItem, (int)/*64*/tvItem.lParam)};", "+\t\tTreeItem item = _getItem (tvItem.hItem, (int)/*64*/tvItem.lParam);", "+\t\tif (item == null) return new TreeItem [0];", "+\t\treturn new TreeItem [] {item};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2441c46f5305af2692e4ed98445aa380", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "f9a08dbd6beda8d1b619e1c7b08fd9da6fe993bb", "commitAfterChange": "477aa9eda338f67199b48e89b29378f8afcddb73", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  static Program cde_getProgram(Display display, String mimeType)", "signatureAfterChange": "  static Program cde_getProgram(Display display, String mimeType)", "diff": ["+\tString command = cde_getAction(mimeType);", "+\tif (command == null) return null;", "+", "-\tprogram.command = cde_getAction(mimeType);", "+\tprogram.command = command;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afb1823550243d2fb76af186005cda95", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabItem.java", "commitBeforeChange": "99c03e02c43aabd5c608e127e0b1dfd314743d48", "commitAfterChange": "2e7ab97abcf2a9656d106122578009f940fa056a", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void drawSelected(GC gc )", "signatureAfterChange": " void drawSelected(GC gc )", "diff": ["-\tRectangle clipping = gc.getClipping();", "-\tRectangle bounds = getBounds();", "-\tbounds.height += 1;", "-\tif (parent.onBottom) bounds.y -= 1;", "-\tif (!clipping.intersects(bounds)) return;", "-\t", "-\t\tif (parent.selectionGradientColors != null && !parent.selectionGradientVertical) {", "-\t\t\tparent.drawBackground(gc, shape, true);", "-\t\t} else {", "-\t\t\tColor defaultBackground = parent.selectionBackground;", "-\t\t\tImage image = parent.selectionBgImage;", "-\t\t\tColor[] colors = parent.selectionGradientColors;", "-\t\t\tint[] percents = parent.selectionGradientPercents;", "-\t\t\tboolean vertical = parent.selectionGradientVertical;", "-\t\t\txx = x;", "-\t\t\tyy = parent.onBottom ? y -1 : y + 1;", "-\t\t\tww = width;", "-\t\t\thh = height;", "-\t\t\tif (!parent.single && !parent.simple) ww += parent.curveWidth - parent.curveIndent;", "-\t\t\tparent.drawBackground(gc, shape, xx, yy, ww, hh, defaultBackground, image, colors, percents, vertical);", "+\t\t", "+\t\tRectangle clipping = gc.getClipping();", "+\t\tRectangle bounds = getBounds();", "+\t\tbounds.height += 1;", "+\t\tif (parent.onBottom) bounds.y -= 1;", "+\t\tboolean tabInPaint = clipping.intersects(bounds);", "+\t\t", "+\t\tif (tabInPaint) {", "+\t\t\t// fill in tab background", "+\t\t\tif (parent.selectionGradientColors != null && !parent.selectionGradientVertical) {", "+\t\t\t\tparent.drawBackground(gc, shape, true);", "+\t\t\t} else {", "+\t\t\t\tColor defaultBackground = parent.selectionBackground;", "+\t\t\t\tImage image = parent.selectionBgImage;", "+\t\t\t\tColor[] colors = parent.selectionGradientColors;", "+\t\t\t\tint[] percents = parent.selectionGradientPercents;", "+\t\t\t\tboolean vertical = parent.selectionGradientVertical;", "+\t\t\t\txx = x;", "+\t\t\t\tyy = parent.onBottom ? y -1 : y + 1;", "+\t\t\t\tww = width;", "+\t\t\t\thh = height;", "+\t\t\t\tif (!parent.single && !parent.simple) ww += parent.curveWidth - parent.curveIndent;", "+\t\t\t\tparent.drawBackground(gc, shape, xx, yy, ww, hh, defaultBackground, image, colors, percents, vertical);", "+\t\t\t}", "+\t\t", "+\t\tif (!tabInPaint) return;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02b7240fc812a46da58e426ded473489", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "48c64df3f180f0ae5e1e28fe60ec5fd9e05240ca", "commitAfterChange": "10b028625fa825361cb8f01f066ee13281a822e9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public Object getContents(Transfer transfer, int clipboards)", "signatureAfterChange": " public Object getContents(Transfer transfer, int clipboards)", "diff": ["-\t\t\ttdata.data = new NSArray(pasteboard.propertyListForType(OS.NSFilenamesPboardType).id);", "+\t\t\tid propertyList = pasteboard.propertyListForType(OS.NSFilenamesPboardType);", "+\t\t\tif (propertyList == null) return null;", "+\t\t\ttdata.data = new NSArray(propertyList.id);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0ba50d24f6b13c56e717a6dc530c627", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/gtk/org/eclipse/swt/browser/BrowserFactory.java", "commitBeforeChange": "e35d6aee41c222c15df583c9ed33006b5e2bb456", "commitAfterChange": "2d20e469d41f4ad41ce63ee64f3dfda6dcc59b37", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  WebBrowser createWebBrowser (int style)", "signatureAfterChange": "  WebBrowser createWebBrowser (int style)", "diff": ["-\tif ((style & SWT.MOZILLA) != 0 || (!WebKit.isInstalled () && (style & SWT.WEBKIT) == 0)) {", "+\tboolean webkitInstalled = WebKit.isInstalled ();", "+\tif ((style & SWT.MOZILLA) != 0 || (!webkitInstalled && (style & SWT.WEBKIT) == 0)) {", "+\tif (!webkitInstalled) return null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf242e0377af97714dd1a5527235e7bd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "a87898727b3c7532ca97709bca44b72c5f8e3e09", "commitAfterChange": "7148a2bbea55843996ca7a45c940cb41cc4ced9e", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\t\tevent.item = items [tvItem.lParam];", "+\t\t\t\tTreeItem item = items [tvItem.lParam];", "+\t\t\t\t/*", "+\t\t\t\t* Feature on Windows.  For some reason, Windows", "+\t\t\t\t* sometimes sends a TVM_ITEMEXPANDING message from", "+\t\t\t\t* within a TVM_DELETEITEM message, for the node", "+\t\t\t\t* being destroyed.  The TreeItem has already been", "+\t\t\t\t* removed from the tree table and cannot be used", "+\t\t\t\t* anymore.  The workaround is to detect this case", "+\t\t\t\t* and return without sending any event. ", "+\t\t\t\t*/", "+\t\t\t\tif (item == null) break;", "+\t\t\t\tevent.item = item;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "198aaee8a62355d6ce2340280f9370f7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "267c533e816cb2810b67cfcbeb132088034f52fd", "commitAfterChange": "0b01cef709770cee06399410b45cb5a2079c746f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r void createItem (CoolItem item, int index)", "signatureAfterChange": "\r \r void createItem (CoolItem item, int index)", "diff": ["-\t* eventually, Windows will begin to place the item on the right\r", "-\t* side of the cool bar.  The fix is to resize the next to last\r", "-\t* item to the ideal size and resize the new items to the maximum\r", "-\t* size.\r", "+\t* sometimes, Windows will begin to place the item on the right\r", "+\t* side of the cool bar.  The fix is to resize the new items to\r", "+\t* the maximum size and then resize the next to last item to the\r", "+\t* ideal size.\r", "-\tif (index == lastIndex + 1) {  \t\r", "-\t\tresizeToPreferredWidth (lastIndex);\r", "+\tboolean fixLast = index == lastIndex + 1;\r", "+\tif (fixLast) {  \t\r", "+\t\r", "+\t/* Resize the next to last item to the ideal size */\r", "+\tif (fixLast) {  \t\r", "+\t\tresizeToPreferredWidth (lastIndex);\r", "+\t}\r", "+\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55b58ce834b09e094981553c63aebe82", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "d2b2731da124108eb5bccfe6363ec342d70dfbc1", "commitAfterChange": "6fa64c0ca137224ae52d6423153f9854a4e2c074", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public MenuItem [] getItems ()", "signatureAfterChange": " public MenuItem [] getItems ()", "diff": ["-\tint count = 0;", "+\tint index = 0, count = 0;", "-\twhile (OS.GetMenuItemInfo (handle, count, true, info)) {", "+\twhile (OS.GetMenuItemInfo (handle, index, true, info)) {", "-\t\titems [count++] = display.getMenuItem (info.dwItemData);", "+\t\tMenuItem item = display.getMenuItem (info.dwItemData);", "+\t\tif (item != null) items [count++] = item;", "+\t\tindex++;"]}], "num": 7404}
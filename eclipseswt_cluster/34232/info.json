{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "40e041f6fbc8970d326dd945f8c6f3bc", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f098d3d3a65c01f1a13886bc86204350", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "638c82a3eaa6b5eaaec9e7bf374f16b2cfb4ff44", "commitAfterChange": "771f4313cbb9bc8cd4bf8ca94a1af1469216a097", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \r LRESULT WM_KEYDOWN (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_KEYDOWN (int wParam, int lParam)", "diff": ["-\tif (OS.GetKeyState (OS.VK_LBUTTON) < 0) return result;\r", "-\tint stepSize = OS.GetKeyState (OS.VK_CONTROL) < 0 ? STEPSIZE_SMALL : STEPSIZE_LARGE;\r", "-\tint xChange = 0, yChange = 0;\r", "-\tif ((style & SWT.VERTICAL) != 0) {\r", "-\t\tswitch (wParam) {\r", "-\t\t\tcase OS.VK_LEFT:\r", "-\t\t\t\txChange = -stepSize;\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase OS.VK_RIGHT:\r", "-\t\t\t\txChange = stepSize;\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t} else {\r", "-\t\tswitch (wParam) {\r", "-\t\t\tcase OS.VK_UP:\r", "-\t\t\t\tyChange = -stepSize;\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase OS.VK_DOWN:\r", "-\t\t\t\tyChange = stepSize;\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "+\tswitch (wParam) {\r", "+\t\tcase OS.VK_LEFT:\r", "+\t\tcase OS.VK_RIGHT:\r", "+\t\tcase OS.VK_UP:\r", "+\t\tcase OS.VK_DOWN:\r", "+\t\t\t\r", "+\t\t\t/* Calculate the new x or y position */\r", "+\t\t\tif (OS.GetKeyState (OS.VK_LBUTTON) < 0) return result;\r", "+\t\t\tint step = OS.GetKeyState (OS.VK_CONTROL) < 0 ? INCREMENT : PAGE_INCREMENT;\r", "+\t\t\tPOINT pt = new POINT ();\r", "+\t\t\tif ((style & SWT.VERTICAL) != 0) {\r", "+\t\t\t\tif (wParam == OS.VK_UP || wParam == OS.VK_DOWN) break;\r", "+\t\t\t\tpt.x = wParam == OS.VK_LEFT ? -step : step;\r", "+\t\t\t} else {\r", "+\t\t\t\tif (wParam == OS.VK_LEFT || wParam == OS.VK_RIGHT) break;\r", "+\t\t\t\tpt.y = wParam == OS.VK_UP ? -step : step;\r", "+\t\t\t}\r", "+\t\t\tint hwndTrack = parent.handle;\r", "+\t\t\tOS.MapWindowPoints (handle, hwndTrack, pt, 1);\r", "+\t\t\tRECT rect = new RECT (), clientRect = new RECT ();\r", "+\t\t\tOS.GetWindowRect (handle, rect);\r", "+\t\t\tint width = rect.right - rect.left;\r", "+\t\t\tint height = rect.bottom - rect.top;\r", "+\t\t\tOS.GetClientRect (hwndTrack, clientRect);\r", "+\t\t\tint clientWidth = clientRect.right - clientRect.left;\r", "+\t\t\tint clientHeight = clientRect.bottom - clientRect.top;\r", "+\t\t\tint newX = lastX, newY = lastY;\r", "+\t\t\tif ((style & SWT.VERTICAL) != 0) {\r", "+\t\t\t\tnewX = Math.min (Math.max (0, pt.x - startX), clientWidth - width);\r", "+\t\t\t} else {\r", "+\t\t\t\tnewY = Math.min (Math.max (0, pt.y - startY), clientHeight - height);\r", "+\t\t\t}\r", "+\t\t\tif (newX == lastX && newY == lastY) return result;\r", "+\t\t\r", "+\t\t\t/* The event must be sent because doit flag is used */\r", "+\t\t\tEvent event = new Event ();\r", "+\t\t\tevent.x = newX;  event.y = newY;\r", "+\t\t\tevent.width = width;  event.height = height;\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* It is possible (but unlikely), that application\r", "+\t\t\t* code could have disposed the widget in the selection\r", "+\t\t\t* event.  If this happens, end the processing of the\r", "+\t\t\t* Windows message by returning zero as the result of\r", "+\t\t\t* the window proc.\r", "+\t\t\t*/\r", "+\t\t\tsendEvent (SWT.Selection, event);\r", "+\t\t\tif (isDisposed ()) return LRESULT.ZERO;\r", "+\t\t\treturn result;\r", "-\tif (xChange == 0 && yChange == 0) return result;\r", "-\t\r", "-\tPOINT pt = new POINT ();\r", "-\tpt.x = xChange;\r", "-\tpt.y = yChange;\r", "-\tint hwndTrack = parent.handle;\r", "-\tOS.MapWindowPoints (handle, hwndTrack, pt, 1);\r", "-\tRECT rect = new RECT (), clientRect = new RECT ();\r", "-\tOS.GetWindowRect (handle, rect);\r", "-\tint width = rect.right - rect.left;\r", "-\tint height = rect.bottom - rect.top;\r", "-\tOS.GetClientRect (hwndTrack, clientRect);\r", "-\tint clientWidth = clientRect.right - clientRect.left;\r", "-\tint clientHeight = clientRect.bottom - clientRect.top;\r", "-\tint newX = lastX, newY = lastY;\r", "-\tif ((style & SWT.VERTICAL) != 0) {\r", "-\t\tnewX = Math.min (Math.max (0, pt.x - startX), clientWidth - width);\r", "-\t} else {\r", "-\t\tnewY = Math.min (Math.max (0, pt.y - startY), clientHeight - height);\r", "-\t}\r", "-\tif (newX == lastX && newY == lastY) return result;\r", "-\r", "-\t/* The event must be sent because doit flag is used */\r", "-\tEvent event = new Event ();\r", "-\tevent.x = newX;  event.y = newY;\r", "-\tevent.width = width;  event.height = height;\r", "-\t\r", "-\t/*\r", "-\t* It is possible (but unlikely), that application\r", "-\t* code could have disposed the widget in the selection\r", "-\t* event.  If this happens, end the processing of the\r", "-\t* Windows message by returning zero as the result of\r", "-\t* the window proc.\r", "-\t*/\r", "-\tsendEvent (SWT.Selection, event);\r", "-\tif (isDisposed ()) return LRESULT.ZERO;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30ff39f7e49236c764ff79dcf474c25b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "d583df28ef4521b9f2420fbe05835676e837d84f", "commitAfterChange": "94e68629e2b5131cc8ba557c59631c2dea710775", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 136, "signatureBeforeChange": "\r boolean translateTraversal (int key, XKeyEvent xEvent)", "signatureAfterChange": "\r boolean translateTraversal (int key, XKeyEvent xEvent)", "diff": ["+\tint code = traversalCode (key, xEvent);\r", "-\t\tcase OS.XK_Cancel:\r", "+\t\tcase OS.XK_Cancel: {\r", "-\t\tcase OS.XK_Return:\r", "+\t\t}\r", "+\t\tcase OS.XK_Return: {\r", "-\t\tcase OS.XK_Tab:\r", "-\t\t\tdetail = SWT.TRAVERSE_TAB_PREVIOUS;\r", "+\t\t}\r", "+\t\tcase OS.XK_Tab: {\r", "-\t\t\tif (next && ((xEvent.state & OS.ControlMask) != 0)) return false;\r", "-\t\t\tif (next) detail = SWT.TRAVERSE_TAB_NEXT;\r", "+\t\t\t/*\r", "+\t\t\t* NOTE: This code emulates a bug/feature on Windows where\r", "+\t\t\t* the default is that that Shift+Tab and Ctrl+Tab traverses\r", "+\t\t\t* instead of going to the widget.  StyledText currently\r", "+\t\t\t* relies on this behavior.\r", "+\t\t\t*/\r", "+\t\t\tswitch (xEvent.state) {\r", "+\t\t\t\tcase OS.ControlMask:\r", "+\t\t\t\tcase OS.ShiftMask:\r", "+\t\t\t\t\tcode |= SWT.TRAVERSE_TAB_PREVIOUS | SWT.TRAVERSE_TAB_NEXT;\r", "+\t\t\t}\r", "+\t\t\tdetail = next ? SWT.TRAVERSE_TAB_NEXT : SWT.TRAVERSE_TAB_PREVIOUS;\r", "+\t\t}\r", "-\t\t\tdetail = SWT.TRAVERSE_ARROW_PREVIOUS;\r", "-\t\t\tbreak;\r", "-\t\tcase OS.XK_Right:\r", "-\t\t\tdetail = SWT.TRAVERSE_ARROW_NEXT;\r", "+\t\tcase OS.XK_Right: {\r", "+\t\t\tboolean next = key == OS.XK_Down || key == OS.XK_Right;\r", "+\t\t\tdetail = next ? SWT.TRAVERSE_ARROW_NEXT : SWT.TRAVERSE_ARROW_PREVIOUS;\r", "+\t\t}\r", "-\t\tcase OS.XK_Page_Down:\r", "+\t\tcase OS.XK_Page_Down: {\r", "+\t\t}\r", "-\tboolean doit = (detail & traversalCode ()) != 0;\r", "-\t/*\r", "-\t* NOTE:  The native widgets handle tab and arrow key traversal\r", "-\t* so it is not necessary to traverse these keys.  A canvas widget\r", "-\t* has no native traversal by definition so it is necessary to\r", "-\t* traverse all keys.\r", "-\t*/\r", "-\tint flags = SWT.TRAVERSE_RETURN | SWT.TRAVERSE_ESCAPE | SWT.TRAVERSE_PAGE_NEXT | SWT.TRAVERSE_PAGE_PREVIOUS;\r", "-\tif ((detail & flags) == 0 && (state & CANVAS) == 0) return false;\r", "-\tevent.doit = doit;\r", "+\tevent.doit = (code & detail) != 0;\r"]}], "num": 34232}
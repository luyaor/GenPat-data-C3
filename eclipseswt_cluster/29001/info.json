{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "209785133320632e12ce59a0c0ac0d62", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7623808c1eaf26403432248872c0536", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "f0e659ec45bbe8a76afe4acc9e00abfecfe3153d", "commitAfterChange": "f817d34150035d0860329767e1206c1ab75fd9fe", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r public void setTabList (Control [] tabList)", "signatureAfterChange": "\r public void setTabList (Control [] tabList)", "diff": ["-\tif (tabList == null) error (SWT.ERROR_NULL_ARGUMENT);\r", "-\tfor (int i=0; i<tabList.length; i++) {\r", "-\t\tControl control = tabList [i];\r", "-\t\tif (control == null) error (SWT.ERROR_INVALID_ARGUMENT);\r", "-\t\tif (control.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);\r", "-//\t\tShell shell = control.getShell ();\r", "-//\t\twhile (control != shell && control != this) {\r", "-//\t\t\tcontrol = control.parent;\r", "-//\t\t}\r", "-//\t\tif (control != this) error (SWT.ERROR_INVALID_PARENT);\r", "-\t\tif (control.parent != this) error (SWT.ERROR_INVALID_PARENT);\r", "-\t}\r", "-\t/*\r", "-\t* This code is intentionally commented.  It is\r", "-\t* not yet clear whether setting the tab list \r", "-\t* should force the widget to be a tab group\r", "-\t* instead of a tab item or non-traversable.\r", "-\t*/\r", "-//\tControl [] children = _getChildren ();\r", "-//\tfor (int i=0; i<children.length; i++) {\r", "-//\t\tControl control = children [i];\r", "-//\t\tif (control != null) {\r", "-//\t\t\tif (control.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);\r", "-//\t\t\tint index = 0;\r", "-//\t\t\twhile (index < tabList.length) {\r", "-//\t\t\t\tif (tabList [index] == control) break;\r", "-//\t\t\t\tindex++;\r", "+\tif (tabList != null) {\r", "+\t\tfor (int i=0; i<tabList.length; i++) {\r", "+\t\t\tControl control = tabList [i];\r", "+\t\t\tif (control == null) error (SWT.ERROR_INVALID_ARGUMENT);\r", "+\t\t\tif (control.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);\r", "+\t\t\t/*\r", "+\t\t\t* This code is intentionally commented.\r", "+\t\t\t* Tab lists are currently only supported\r", "+\t\t\t* for the direct children of a composite.\r", "+\t\t\t*/\r", "+//\t\t\tShell shell = control.getShell ();\r", "+//\t\t\twhile (control != shell && control != this) {\r", "+//\t\t\t\tcontrol = control.parent;\r", "-//\t\t\tint hwnd = control.handle;\r", "-//\t\t\tint bits = OS.GetWindowLong (hwnd, OS.GWL_STYLE);\r", "-//\t\t\tif (index == tabList.length) {\r", "-//\t\t\t\tbits &= ~OS.WS_TABSTOP;\r", "-//\t\t\t} else {\r", "-//\t\t\t\tbits |= OS.WS_TABSTOP;\r", "-//\t\t\t}\r", "-//\t\t\tOS.SetWindowLong (hwnd, OS.GWL_STYLE, bits);\r", "-//\t\t}\r", "-//\t}\r", "+//\t\t\tif (control != this) error (SWT.ERROR_INVALID_PARENT);\r", "+\t\t\tif (control.parent != this) error (SWT.ERROR_INVALID_PARENT);\r", "+\t\t}\r", "+\t\tControl [] newList = new Control [tabList.length];\r", "+\t\tSystem.arraycopy (tabList, 0, newList, 0, tabList.length);\r", "+\t\ttabList = newList;\r", "+\t} \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db15fb85410bcaa63fbbab4bed8bc449", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "6c3291ae7c76b6eb69c49388ee900ee87d268a46", "commitAfterChange": "4b91593725fcb0e5f9f6c26fc3e08bfb0e901e01", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void setTabList (Control [] tabList)", "signatureAfterChange": "\r public void setTabList (Control [] tabList)", "diff": ["- */", "+ */\r", "-\tif (tabList == null) error (SWT.ERROR_NULL_ARGUMENT);\r", "-\tfor (int i=0; i<tabList.length; i++) {\r", "-\t\tControl control = tabList [i];\r", "-\t\tif (control == null) error (SWT.ERROR_INVALID_ARGUMENT);\r", "-\t\tif (control.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);\r", "-\t\tif (control.parent != this) error (SWT.ERROR_INVALID_PARENT);\r", "-\t}\r", "+\tif (tabList != null) {\r", "+\t\tfor (int i=0; i<tabList.length; i++) {\r", "+\t\t\tControl control = tabList [i];\r", "+\t\t\tif (control == null) error (SWT.ERROR_INVALID_ARGUMENT);\r", "+\t\t\tif (control.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);\r", "+\t\t\t/*\r", "+\t\t\t* This code is intentionally commented.\r", "+\t\t\t* Tab lists are currently only supported\r", "+\t\t\t* for the direct children of a composite.\r", "+\t\t\t*/\r", "+//\t\t\tShell shell = control.getShell ();\r", "+//\t\t\twhile (control != shell && control != this) {\r", "+//\t\t\t\tcontrol = control.parent;\r", "+//\t\t\t}\r", "+//\t\t\tif (control != this) error (SWT.ERROR_INVALID_PARENT);\r", "+\t\t\tif (control.parent != this) error (SWT.ERROR_INVALID_PARENT);\r", "+\t\t}\r", "+\t\tControl [] newList = new Control [tabList.length];\r", "+\t\tSystem.arraycopy (tabList, 0, newList, 0, tabList.length);\r", "+\t\ttabList = newList;\r", "+\t} \r"]}], "num": 29001}
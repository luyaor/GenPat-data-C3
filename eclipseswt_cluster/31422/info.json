{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af64ebbcf2527b2365af7f4d4f72ecac", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3370f4bb7068f5c6213f94fad542593b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "b72bc1d2aeff462f0ad0e8ecfa6bc39ebd385109", "commitAfterChange": "976e43084e6451bfa01e2552d9934253d1c13468", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void drawText (String string, int x, int y, int flags)", "signatureAfterChange": " public void drawText (String string, int x, int y, int flags)", "diff": ["-\t\thandle.saveGraphicsState();", "+\t\tint length = string.length();", "+\t\tif (length == 0) return;", "-\t\thandle.setShouldAntialias(mode);", "-\t\tNSAttributedString str = createString(string, flags, true);", "-\t\tif ((flags & SWT.DRAW_TRANSPARENT) == 0) {", "-\t\t\tNSSize size = str.size();", "-\t\t\tNSRect rect = new NSRect();", "-\t\t\trect.x = x;", "-\t\t\trect.y = y;", "-\t\t\trect.width = size.width;", "-\t\t\trect.height = size.height;", "-\t\t\tNSColor bg = data.bg;", "-\t\t\tif (bg == null) {", "-\t\t\t\tfloat /*double*/ [] color = data.background;", "-\t\t\t\tbg = data.bg = NSColor.colorWithDeviceRed(color[0], color[1], color[2], data.alpha / 255f);", "-\t\t\t\tbg.retain();", "-\t\t\t}", "-\t\t\tbg.setFill();", "-\t\t\tNSBezierPath.fillRect(rect);", "-\t\t\tstr.drawInRect(rect);", "-\t\t} else {", "-\t\t\tNSPoint pt = new NSPoint();", "-\t\t\tpt.x = x;", "-\t\t\tpt.y = y;", "-\t\t\tstr.drawAtPoint(pt);", "+\t\tint /*long*/ context = handle.graphicsPort();", "+\t\tOS.CGContextSaveGState(context);", "+\t\tOS.CGContextSetShouldAntialias(context, mode);", "+\t\tCGAffineTransform transform = new CGAffineTransform();", "+\t\ttransform.a = 1;", "+\t\ttransform.d = -1;", "+\t\tFont font = data.font;", "+\t\tint /*long*/ fontID = font.handle.id;", "+\t\tif ((font.extraTraits & OS.NSItalicFontMask) != 0) {", "+\t\t\ttransform.c = (float)Font.SYNTHETIC_ITALIC;", "-\t\tstr.release();", "-\t\thandle.restoreGraphicsState();", "+\t\tif ((font.extraTraits & OS.NSBoldFontMask) != 0) {", "+\t\t\tOS.CGContextSetTextDrawingMode(context, OS.kCGTextFillStroke);", "+\t\t\tOS.CGContextSetLineWidth(context, (float)(font.handle.pointSize() * -Font.SYNTHETIC_BOLD / 100f));", "+\t\t}", "+\t\tOS.CGContextSetTextMatrix(context, transform);", "+\t\tchar[] chars = new char[length];", "+\t\tstring.getChars(0, length, chars, 0);", "+\t\tif ((flags & SWT.DRAW_MNEMONIC) != 0 || (flags & SWT.DRAW_TAB) == 0) {", "+\t\t\tint i=0, j=0;", "+\t\t\twhile (i < chars.length) {", "+\t\t\t\tchar c = chars [j++] = chars [i++];", "+\t\t\t\tswitch (c) {", "+\t\t\t\t\tcase '\\t': {", "+\t\t\t\t\t\tif ((flags & SWT.DRAW_TAB) == 0) j--;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase '&': {", "+\t\t\t\t\t\tif ((flags & SWT.DRAW_MNEMONIC) != 0) {", "+\t\t\t\t\t\t\tif (i == chars.length) {continue;}", "+\t\t\t\t\t\t\tif (chars [i] == '&') {i++; continue;}", "+\t\t\t\t\t\t\tj--;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tlength = j;", "+\t\t}", "+\t\tint /*long*/ dict = OS.CFDictionaryCreateMutable(0, 2, OS.kCFTypeDictionaryKeyCallBacks(), OS.kCFTypeDictionaryValueCallBacks());", "+\t\tOS.CFDictionaryAddValue(dict, OS.kCTFontAttributeName(), fontID);", "+\t\tint /*long*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "+\t\tfloat /*double*/ oldAlpha = data.foreground[3];", "+\t\tdata.foreground[3] = data.alpha / 255f;", "+\t\tint /*long*/ color = OS.CGColorCreate(colorspace, data.foreground);", "+\t\tdata.foreground[3] = oldAlpha;", "+\t\tOS.CFDictionaryAddValue(dict, OS.kCTForegroundColorAttributeName(), color);", "+\t\tOS.CFRelease(color);", "+\t\tOS.CFRelease(colorspace);", "+\t\tint /*long*/ str = OS.CFStringCreateWithCharacters(0, chars, length);", "+\t\tint /*long*/ attrStr = OS.CFAttributedStringCreate(0, str, dict);", "+\t\tOS.CFRelease(dict);", "+\t\tOS.CFRelease(str);", "+\t\tfloat /*double*/ drawX = x, drawY = y;", "+\t\tfloat /*double*/ [] ascent = new float /*double*/ [1];", "+\t\tfloat /*double*/ [] descent = new float /*double*/ [1];", "+\t\tfloat /*double*/ [] leading = new float /*double*/ [1];", "+\t\tfloat /*double*/ fontAscent = OS.CTFontGetAscent(fontID);", "+\t\tif ((flags & SWT.DRAW_DELIMITER) != 0) {", "+\t\t\tfloat /*double*/ fontDescent = OS.CTFontGetDescent(fontID);", "+\t\t\tfloat /*double*/ fontLeading = OS.CTFontGetLeading(fontID);", "+\t\t\tint /*long*/ typesetter = OS.CTTypesetterCreateWithAttributedString(attrStr);", "+\t\t\tint end = 0;", "+\t\t\tCFRange range = new CFRange();", "+\t\t\twhile (end < length) {", "+\t\t\t\tchar c = chars[end++];", "+\t\t\t\tswitch (c) {", "+\t\t\t\t\tcase '\\r':", "+\t\t\t\t\tcase '\\n': {", "+\t\t\t\t\t\trange.length = end - range.location - 1;", "+\t\t\t\t\t\tif (c == '\\r' && end != chars.length && chars[end] == '\\n') end++;", "+\t\t\t\t\t\tif (range.length > 0) { ", "+\t\t\t\t\t\t\tint /*long*/ line = OS.CTTypesetterCreateLine(typesetter, range);", "+\t\t\t\t\t\t\tdrawText(context, flags, drawX, drawY, line, ascent, descent, leading, fontAscent);", "+\t\t\t\t\t\t\tOS.CFRelease(line);", "+\t\t\t\t\t\t\tdrawY += ascent[0] + descent[0] + leading[0];", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tdrawY += fontAscent + fontDescent + fontLeading;\t", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\trange.location = end;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (range.location != end) {", "+\t\t\t\trange.length = end - range.location;", "+\t\t\t\tint /*long*/ line = OS.CTTypesetterCreateLine(typesetter, range);", "+\t\t\t\tdrawText(context, flags, drawX, drawY, line, ascent, descent, leading, fontAscent);", "+\t\t\t\tOS.CFRelease(line);", "+\t\t\t}", "+\t\t\tOS.CFRelease(typesetter);", "+\t\t} else {", "+\t\t\tint /*long*/ line = OS.CTLineCreateWithAttributedString(attrStr);", "+\t\t\tdrawText(context, flags, drawX, drawY, line, ascent, descent, leading, fontAscent);", "+\t\t\tOS.CFRelease(line);", "+\t\t}", "+\t\tOS.CFRelease(attrStr);", "+\t\tOS.CGContextRestoreGState(context);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c884f87e6540491fb8dbc41f37ddf4e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "b72bc1d2aeff462f0ad0e8ecfa6bc39ebd385109", "commitAfterChange": "976e43084e6451bfa01e2552d9934253d1c13468", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": " public Point textExtent(String string, int flags)", "signatureAfterChange": " public Point textExtent(String string, int flags)", "diff": ["-\t\tNSAttributedString str = createString(string, flags, false);", "-\t\tNSSize size = str.size();", "-\t\tstr.release();", "-\t\treturn new Point((int)size.width, (int)size.height);", "+\t\tint length = string.length();", "+\t\tFont font = data.font;", "+\t\tint /*long*/ fontID = font.handle.id;", "+\t\tif (length == 0) {", "+\t\t\treturn new Point(0, (int)(0.5f + OS.CTFontGetAscent(fontID)) + (int)(0.5f + OS.CTFontGetDescent(fontID) + OS.CTFontGetLeading(fontID)));", "+\t\t}", "+\t\tchar[] chars = new char[length];", "+\t\tstring.getChars(0, length, chars, 0);", "+\t\tif ((flags & SWT.DRAW_MNEMONIC) != 0 || (flags & SWT.DRAW_TAB) == 0) {", "+\t\t\tint i=0, j=0;", "+\t\t\twhile (i < chars.length) {", "+\t\t\t\tchar c = chars [j++] = chars [i++];", "+\t\t\t\tswitch (c) {", "+\t\t\t\t\tcase '\\t': {", "+\t\t\t\t\t\tif ((flags & SWT.DRAW_TAB) == 0) j--;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase '&': {", "+\t\t\t\t\t\tif ((flags & SWT.DRAW_MNEMONIC) != 0) {", "+\t\t\t\t\t\t\tif (i == chars.length) {continue;}", "+\t\t\t\t\t\t\tif (chars [i] == '&') {i++; continue;}", "+\t\t\t\t\t\t\tj--;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tlength = j;", "+\t\t}", "+\t\tint /*long*/ dict = OS.CFDictionaryCreateMutable(0, 1, OS.kCFTypeDictionaryKeyCallBacks(), OS.kCFTypeDictionaryValueCallBacks());", "+\t\tOS.CFDictionaryAddValue(dict, OS.kCTFontAttributeName(), font.handle.id);", "+\t\tint /*long*/ str = OS.CFStringCreateWithCharacters(0, chars, length);", "+\t\tint /*long*/ attrStr = OS.CFAttributedStringCreate(0, str, dict);", "+\t\tOS.CFRelease(dict);", "+\t\tOS.CFRelease(str);", "+\t\tfloat /*double*/ [] ascent = new float /*double*/ [1];", "+\t\tfloat /*double*/ [] descent = new float /*double*/ [1];", "+\t\tfloat /*double*/ [] leading = new float /*double*/ [1];", "+\t\tdouble width = 0, height = 0;", "+\t\tif ((flags & SWT.DRAW_DELIMITER) != 0) {", "+\t\t\tfloat /*double*/ fontAscent = OS.CTFontGetAscent(fontID);", "+\t\t\tfloat /*double*/ fontDescent = OS.CTFontGetDescent(fontID);", "+\t\t\tfloat /*double*/ fontLeading = OS.CTFontGetLeading(fontID);", "+\t\t\tint /*long*/ typesetter = OS.CTTypesetterCreateWithAttributedString(attrStr);", "+\t\t\tint end = 0;", "+\t\t\tCFRange range = new CFRange();", "+\t\t\twhile (end < length) {", "+\t\t\t\tchar c = chars[end++];", "+\t\t\t\tswitch (c) {", "+\t\t\t\t\tcase '\\r':", "+\t\t\t\t\tcase '\\n': {", "+\t\t\t\t\t\trange.length = end - range.location - 1;", "+\t\t\t\t\t\tif (c == '\\r' && end != chars.length && chars[end] == '\\n') end++;", "+\t\t\t\t\t\tif (range.length > 0) {", "+\t\t\t\t\t\t\tint /*long*/ line = OS.CTTypesetterCreateLine(typesetter, range);", "+\t\t\t\t\t\t\twidth = Math.max(width, OS.CTLineGetTypographicBounds(line, ascent, descent, leading));", "+\t\t\t\t\t\t\theight += ascent[0] + descent[0] + leading[0];", "+\t\t\t\t\t\t\tOS.CFRelease(line);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\theight += fontAscent + fontDescent + fontLeading;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\trange.location = end;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (range.location != end) {", "+\t\t\t\trange.length = end - range.location;", "+\t\t\t\tint /*long*/ line = OS.CTTypesetterCreateLine(typesetter, range);", "+\t\t\t\twidth = Math.max(width, OS.CTLineGetTypographicBounds(line, ascent, descent, leading));", "+\t\t\t\theight += ascent[0] + descent[0] + leading[0];", "+\t\t\t\tOS.CFRelease(line);", "+\t\t\t} else {", "+\t\t\t\theight += fontAscent + fontDescent + fontLeading;", "+\t\t\t}", "+\t\t\tOS.CFRelease(typesetter);", "+\t\t} else {", "+\t\t\tint /*long*/ line = OS.CTLineCreateWithAttributedString(attrStr);", "+\t\t\twidth = OS.CTLineGetTypographicBounds(line, ascent, descent, leading);", "+\t\t\theight = ascent[0] + descent[0] + leading[0];", "+\t\t\tOS.CFRelease(line);", "+\t\t}", "+\t\tOS.CFRelease(attrStr);", "+\t\treturn new Point((int)Math.ceil(width), (int)Math.ceil(height));"]}], "num": 31422}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ded024fb4a43fe4509d9c204a9bd77aa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "781a61746bc24ba66ac942b6a2e9310b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_GC.java", "commitBeforeChange": "e67323167dd4bef69f12ff436c7d66f54661a351", "commitAfterChange": "22c591326ef2c5b6802db3ec561324050f4725bb", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public void test_drawImageLorg_eclipse_swt_graphics_ImageIIIIIIII()", "signatureAfterChange": "  public void test_drawImageLorg_eclipse_swt_graphics_ImageIIIIIIII()", "diff": ["-public void test_drawImageLorg_eclipse_swt_graphics_ImageIIIIIIII() {", "-\twarnUnimpl(\"Test test_drawImageLorg_eclipse_swt_graphics_ImageIIIIIIII not written\");", "+public void test_drawImageLorg_eclipse_swt_graphics_ImageIIIIIIII() {\t\t", "+\t\tColor c1 = new Color(display, 255, 0, 0);", "+\t\tColor c2 = new Color(display, 0, 0, 0);", "+\t\tColor c3 = new Color(display, 255, 255, 0);", "+\t\t", "+\t\tPaletteData paletteData = new PaletteData(new RGB[] {c1.getRGB(), c2.getRGB(), c3.getRGB()});", "+\t\tImageData data = new ImageData(30,30, 8, paletteData);", "+\t\tfor (int y = 0; y < data.height; y++) {", "+\t\t\tfor (int x = 0; x < data.width; x++) {", "+\t\t\t\tif (x > y) data.setPixel(x, y, paletteData.getPixel(c1.getRGB()));", "+\t\t\t\telse if (x < y) data.setPixel(x, y, paletteData.getPixel(c2.getRGB()));", "+\t\t\t\telse data.setPixel(x, y, paletteData.getPixel(c3.getRGB()));", "+\t\t\t}", "+\t\t}", "+\t\tImage image = new Image(display, data);", "+\t\tdata = image.getImageData();", "+\t\tdata.transparentPixel = paletteData.getPixel(c1.getRGB());", "+\t\tImage imageTransparent = new Image(display, data);", "+\t\tdata.transparentPixel = -1;", "+\t\tfor (int y = 0; y < data.height; y++) {", "+\t\t\tfor (int x = 0; x < data.width; x++) {", "+\t\t\t\tdata.setAlpha(x, y, 127);", "+\t\t\t}", "+\t\t}\t\t", "+\t\tImage imageAlpha = new Image(display, data);", "+\t\t\t\t\t\t\t\t", "+\t\tgc.drawImage(image, 10, 5, 20, 15, 100, 120, 50, 60);", "+\t\tgc.drawImage(imageTransparent, 10, 5, 20, 15, 100, 120, 10, 10);", "+\t\tgc.drawImage(imageAlpha, 10, 5, 20, 15, 100, 120, 20, 15);", "+\t\ttry {", "+\t\t\tgc.drawImage(null, 10, 5, 20, 15, 100, 120, 50, 60);", "+\t\t\tfail(\"No exception thrown\"); //should never get here", "+\t\t}", "+\t\tcatch (IllegalArgumentException e) {", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a18e58ffa6352195bc67d497a381534", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_GC.java", "commitBeforeChange": "e67323167dd4bef69f12ff436c7d66f54661a351", "commitAfterChange": "22c591326ef2c5b6802db3ec561324050f4725bb", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void test_drawImageLorg_eclipse_swt_graphics_ImageII()", "signatureAfterChange": "  public void test_drawImageLorg_eclipse_swt_graphics_ImageII()", "diff": ["-public void test_drawImageLorg_eclipse_swt_graphics_ImageII() {", "-\twarnUnimpl(\"Test test_drawImageLorg_eclipse_swt_graphics_ImageII not written\");", "+public void test_drawImageLorg_eclipse_swt_graphics_ImageII() {\t\t", "+\t\tColor c1 = new Color(display, 255, 0, 0);", "+\t\tColor c2 = new Color(display, 0, 0, 0);", "+\t\tColor c3 = new Color(display, 255, 255, 0);", "+\t\t", "+\t\tPaletteData paletteData = new PaletteData(new RGB[] {c1.getRGB(), c2.getRGB(), c3.getRGB()});", "+\t\tImageData data = new ImageData(30,30, 8, paletteData);", "+\t\tfor (int y = 0; y < data.height; y++) {", "+\t\t\tfor (int x = 0; x < data.width; x++) {", "+\t\t\t\tif (x > y) data.setPixel(x, y, paletteData.getPixel(c1.getRGB()));", "+\t\t\t\telse if (x < y) data.setPixel(x, y, paletteData.getPixel(c2.getRGB()));", "+\t\t\t\telse data.setPixel(x, y, paletteData.getPixel(c3.getRGB()));", "+\t\t\t}", "+\t\t}", "+\t\tImage image = new Image(display, data);", "+\t\tdata = image.getImageData();", "+\t\tdata.transparentPixel = paletteData.getPixel(c1.getRGB());", "+\t\tImage imageTransparent = new Image(display, data);", "+\t\tdata.transparentPixel = -1;", "+\t\tfor (int y = 0; y < data.height; y++) {", "+\t\t\tfor (int x = 0; x < data.width; x++) {", "+\t\t\t\tdata.setAlpha(x, y, 127);", "+\t\t\t}", "+\t\t}\t\t", "+\t\tImage imageAlpha = new Image(display, data);", "+\t\t\t\t\t\t\t\t", "+\t\tgc.drawImage(image, 100, 100);", "+\t\tgc.drawImage(imageTransparent, 130, 100);", "+\t\tgc.drawImage(imageAlpha, 160, 100);", "+\t\ttry {", "+\t\t\tgc.drawImage(null, 100, 100);", "+\t\t\tfail(\"No exception thrown\"); //should never get here", "+\t\t}", "+\t\tcatch (IllegalArgumentException e) {", "+\t\t}\t"]}], "num": 13259}
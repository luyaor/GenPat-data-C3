{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3647181d7d0f32190952ffe5b8648107", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8426ae52528feaf58f4d0f4e3b05ea5b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "845a28c229cc34b2e7400df12cf071dc7a41d0f2", "commitAfterChange": "5a902dea6af2bf530917df6db13cb86bc207413e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \r void drawBitmapTransparent(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "signatureAfterChange": "\r \r void drawBitmapTransparent(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "diff": ["-\t\t\tbyte[] bmi = new byte[40 + numColors * 4];\r", "-\t\t\tbmi[0] = 40;\r", "-\t\t\tbmi[12] = (byte)(bm.bmPlanes & 0xFF);\r", "-\t\t\tbmi[13] = (byte)((bm.bmPlanes >> 8) & 0xFF);\r", "-\t\t\tbmi[14] = (byte)(bm.bmBitsPixel & 0xFF);\r", "-\t\t\tbmi[15] = (byte)((bm.bmBitsPixel >> 8) & 0xFF);\r", "+\t\t\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER();\r", "+\t\t\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;\r", "+\t\t\tbmiHeader.biPlanes = bm.bmPlanes;\r", "+\t\t\tbmiHeader.biBitCount = bm.bmBitsPixel;\r", "+\t\t\tbyte[] bmi = new byte[BITMAPINFOHEADER.sizeof + numColors * 4];\r", "+\t\t\tOS.MoveMemory(bmi, bmiHeader, BITMAPINFOHEADER.sizeof);\r", "-\t\t\tint offset = 40 + 4 * srcImage.transparentPixel;\r", "+\t\t\tint offset = BITMAPINFOHEADER.sizeof + 4 * srcImage.transparentPixel;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c0bb979caaccefa24ef36d94bbed216", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet186.java", "commitBeforeChange": "99aa8aa5b88fb4867827824844707e74aecc24e1", "commitAfterChange": "a01ce1fdb6ad3a12ed23e5bb7226b96dbb6c86c5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  static String readSafeArray(Variant variantByRef)", "signatureAfterChange": "  static String readSafeArray(Variant variantByRef)", "diff": ["-    int pPostData = variantByRef.getByRef();", "+    long /*int*/ pPostData = variantByRef.getByRef();", "-            int[] pSafearray = new int[1];", "-            OS.MoveMemory(pSafearray, pVariant[0] + 8, 4);", "-            short[] cDims = new short[1];", "-            OS.MoveMemory(cDims, pSafearray[0], 2);", "-            int[] pvData = new int[1];", "-            OS.MoveMemory(pvData, pSafearray[0] + 12, 4);", "-            int safearrayboundOffset = 0;", "-            for (int i = 0; i < cDims[0]; i++) {", "-                int[] cElements = new int[1];", "-                OS.MoveMemory(cElements, pSafearray[0] + 16 + safearrayboundOffset, 4);", "-                safearrayboundOffset += 8;", "-                int cchWideChar = OS.MultiByteToWideChar (CodePage, OS.MB_PRECOMPOSED,  pvData[0], -1, null, 0);", "+            long /*int*/ [] pSafearray = new long /*int*/[1];", "+            OS.MoveMemory(pSafearray, pVariant[0] + 8, OS.PTR_SIZEOF);", "+            SAFEARRAY safeArray = new SAFEARRAY();", "+            OS.MoveMemory(safeArray, pSafearray[0], SAFEARRAY.sizeof);", "+            for (int i = 0; i < safeArray.cDims; i++) {", "+                int cchWideChar = OS.MultiByteToWideChar (CodePage, OS.MB_PRECOMPOSED,  safeArray.pvData, -1, null, 0);", "-\t\t\t\tOS.MultiByteToWideChar (CodePage, OS.MB_PRECOMPOSED,  pvData[0], -1, lpWideCharStr, lpWideCharStr.length);", "+\t\t\t\tOS.MultiByteToWideChar (CodePage, OS.MB_PRECOMPOSED,  safeArray.pvData, -1, lpWideCharStr, lpWideCharStr.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc7cc28e24331841a2af56f7609ac7ba", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "a7462f6b30f403b541de53811b1a2d45dd86b987", "commitAfterChange": "37c3fc5edd360862e04e4236fb6d1206ffdadd53", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": " public void setBounds (int x, int y, int width, int height)", "signatureAfterChange": " public void setBounds (int x, int y, int width, int height)", "diff": ["-\tMacRect br= new MacRect();", "-\tshort[] bounds= br.getData();", "-\tshort[] pbounds= new short[4];", "-\tinternalGetControlBounds(topHandle, br);", "+\tRect bounds= new Rect();", "+\tRect pbounds= new Rect();", "+\tinternalGetControlBounds(topHandle, bounds);", "-\t\tsameOrigin = bounds[1] == x && bounds[0] == y;", "+\t\tsameOrigin = bounds.left == x && bounds.top == y;", "-\t\tsameOrigin = (bounds[1]-pbounds[1]) == x && (bounds[0]-pbounds[0]) == y;", "+\t\tsameOrigin = (bounds.left-pbounds.left) == x && (bounds.top-pbounds.top) == y;", "-\tboolean sameExtent = (bounds[3]-bounds[1]) == width && (bounds[2]-bounds[0]) == height;", "+\tboolean sameExtent = (bounds.right-bounds.left) == width && (bounds.bottom-bounds.top) == height;", "-\tinternalSetBounds(topHandle, br, pbounds[1]+x, pbounds[0]+y, width, height);", "+\tinternalSetBounds(topHandle, bounds, pbounds.left+x, pbounds.top+y, width, height);"]}], "num": 11623}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a28da64a92d0fc51bfe70762740d1e59", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f056b5692ca4cbcbf1ae03fb8a9d6c24", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "69fe4fd6617a9947c43adf6f205c96ed59131a3e", "commitAfterChange": "b09a2ad2e37ced7c04edaa5039619cbb8b88f150", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r \r void interpretOsAnswer(String osAnswer)", "signatureAfterChange": "\r \r void interpretOsAnswer(String osAnswer)", "diff": ["+\tif ((style&SWT.MULTI) == 0) {\r", "+\t\tfileNames = new String[] {fileName};\r", "+\t} else {\r", "+\t\tint namesPtr = OS.gtk_file_selection_get_selections(handle);\r", "+\t\tint namesPtr1 = namesPtr;\r", "+\t\tint[] namePtr = new int[1];\r", "+\t\tOS.memmove(namePtr, namesPtr1, 1);\r", "+\t\tint length=0;\r", "+\t\twhile (namePtr[0] != 0) {\r", "+\t\t\tlength++;\r", "+\t\t\tnamesPtr1+=4;  // PROBLEM CODE: depend on address size\r", "+\t\t\tOS.memmove(namePtr, namesPtr1, 1);\r", "+\t\t}\r", "+\t\tfileNames = new String[length];\r", "+\t\tnamePtr = new int[length];\r", "+\t\tOS.memmove(namePtr, namesPtr, length*4);\r", "+\t\tfor (int i=0; i<length; i++) {\r", "+\t\t\t/*\r", "+\t\t\t * NB:  We can not use the Converter here, because\r", "+\t\t\t * the mount charset/iocharset is different than the locale!\r", "+\t\t\t */\r", "+\t\t\tint bytesPtr = OS.g_filename_to_utf8(namePtr[i], -1, 0, 0, 0);\r", "+\t\t\tif (bytesPtr==0) continue;\r", "+\t\t\t// Careful! The size, not the length of the string\r", "+\t\t\tbyte[] bytes = new byte[OS.strlen(bytesPtr)];\r", "+\t\t\tOS.memmove(bytes, bytesPtr, bytes.length);\r", "+\t\t\tfileNames[i] = new String(bytes);\r", "+\t\t\t/*\r", "+\t\t\t * NB:  Unlike other similar functions (e.g., g_convert), the glib\r", "+\t\t\t * documentation does not say the resulting UTF8 string should be\r", "+\t\t\t * freed.  However, the strdup makes me believe the free is necessary.\r", "+\t\t\t */\r", "+\t\t\tOS.g_free(bytesPtr);\r", "+\t\t}\r", "+\t\tOS.g_strfreev(namesPtr);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "284d918e2beb7a640d1bac323f7feaa5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "a8570f4449089f9a9c3b96924a6752d262fb5602", "commitAfterChange": "fc89446b1dc59fa44e0693c0ba93ac47914129f7", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r String interpretOsAnswer(String osAnswer)", "signatureAfterChange": "\r String interpretOsAnswer(String osAnswer)", "diff": ["-\tint separatorIndex = osAnswer.lastIndexOf(SEPARATOR);\r", "-\tif (separatorIndex+1 == osAnswer.length()) {\r", "-\t\t/*\r", "-\t\t * the selected thing is a directory\r", "-\t\t */\r", "-\t\treturn null;\r", "-\t}\r", "+\tint separatorIndex = osAnswer.lastIndexOf (SEPARATOR);\r", "+\tif (separatorIndex+1 == osAnswer.length ()) return null;\r", "+\t\r", "-\tfileName = fullPath.substring(separatorIndex+1);\r", "-\tfilterPath = fullPath.substring(0, separatorIndex);\r", "-\tif ((style&SWT.MULTI) == 0) {\r", "+\tfileName = fullPath.substring (separatorIndex+1);\r", "+\tfilterPath = fullPath.substring (0, separatorIndex);\r", "+\tif ((style & SWT.MULTI) == 0) {\r", "-\t\tint namesPtr = OS.gtk_file_selection_get_selections(handle);\r", "+\t\tint namesPtr = OS.gtk_file_selection_get_selections (handle);\r", "-\t\tint[] namePtr = new int[1];\r", "-\t\tOS.memmove(namePtr, namesPtr1, 1);\r", "-\t\tint length=0;\r", "+\t\tint [] namePtr = new int [1];\r", "+\t\tOS.memmove (namePtr, namesPtr1, 4);\r", "+\t\tint length = 0;\r", "-\t\t\tnamesPtr1+=4;  // PROBLEM CODE: depend on address size\r", "-\t\t\tOS.memmove(namePtr, namesPtr1, 1);\r", "+\t\t\tnamesPtr1+=4;\r", "+\t\t\tOS.memmove(namePtr, namesPtr1, 4);\r", "-\t\tfileNames = new String[length];\r", "-\t\tnamePtr = new int[length];\r", "-\t\tOS.memmove(namePtr, namesPtr, length*4);\r", "-\t\tfor (int i=0; i<length; i++) {\r", "-\t\t\t/*\r", "-\t\t\t * NB:  We can not use the Converter here, because\r", "-\t\t\t * the mount charset/iocharset is different than the locale!\r", "-\t\t\t */\r", "-\t\t\tint bytesPtr = OS.g_filename_to_utf8(namePtr[i], -1, 0, 0, 0);\r", "-\t\t\tif (bytesPtr==0) continue;\r", "-\t\t\t// Careful! The size, not the length of the string\r", "-\t\t\tbyte[] bytes = new byte[OS.strlen(bytesPtr)];\r", "-\t\t\tOS.memmove(bytes, bytesPtr, bytes.length);\r", "-\t\t\t// The better way to do it would be:\r", "-\t\t\t// fileNames[i] = new String(bytes);\r", "-\t\t\tString name = new String(Converter.mbcsToWcs(null, bytes));\r", "-\t\t\tfileNames[i] = name.substring(name.lastIndexOf(SEPARATOR)+1);\r", "-\t\t\t/*\r", "-\t\t\t * NB:  Unlike other similar functions (e.g., g_convert), the glib\r", "-\t\t\t * documentation does not say the resulting UTF8 string should be\r", "-\t\t\t * freed.  However, the strdup makes me believe the free is necessary.\r", "-\t\t\t */\r", "-\t\t\tOS.g_free(bytesPtr);\r", "+\t\tfileNames = new String [length];\r", "+\t\tnamePtr = new int [length];\r", "+\t\tOS.memmove (namePtr, namesPtr, length * 4);\r", "+\t\tfor (int i = 0; i < length; i++) {\t\t\t\r", "+\t\t\tint utf8Ptr = OS.g_filename_to_utf8 (namePtr [i], -1, null, null, null);\r", "+\t\t\tint [] items_written = new int [1];\r", "+\t\t\tint utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);\r", "+\t\t\tchar[] buffer = new char [items_written [0]];\r", "+\t\t\tOS.memmove (buffer, utf16Ptr, items_written [0] * 2);\r", "+\t\t\tString name = new String (buffer);\r", "+\t\t\tfileNames [i] = name.substring (name.lastIndexOf (SEPARATOR) + 1);\r", "+\t\t\tOS.g_free (utf16Ptr);\r", "+\t\t\tOS.g_free (utf8Ptr);\r", "-\t\tOS.g_strfreev(namesPtr);\r", "+\t\tOS.g_strfreev (namesPtr);\r"]}], "num": 19547}
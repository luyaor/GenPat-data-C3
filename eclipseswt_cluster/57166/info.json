{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d84d4f44fc7f3b2593068ae8f48d3916", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "862d84889b6fbf47b59a3d6724005cad", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/DragSource.java", "commitBeforeChange": "6b0a245288556e7224d3c56682401ca81ba95245", "commitAfterChange": "4dbd09dcd54c5e8b8416ccbe2fdfacc6901be61f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": "  void drag(Event dragEvent)", "signatureAfterChange": "  void drag(Event dragEvent)", "diff": ["-\tDNDEvent event = new DNDEvent();", "-\tevent.widget = this;", "-\tevent.x = dragEvent.x;", "-\tevent.y = dragEvent.y;", "-\tevent.time = dragEvent.time;", "-\tevent.doit = true;", "-\tnotifyListeners(DND.DragStart, event);", "-\tif (!event.doit || transferAgents == null || transferAgents.length == 0) return;", "-\t", "-\tint[] theDrag = new int[1];", "-\tif (OS.NewDrag(theDrag) != OS.noErr) {", "-\t\tevent = new DNDEvent();", "-\t\tevent.widget = this;", "-\t\tevent.time = (int)System.currentTimeMillis();", "-\t\tevent.doit = false;", "-\t\tevent.detail = DND.DROP_NONE; ", "-\t\tnotifyListeners(DND.DragEnd, event);", "-\t\treturn;", "-\t}", "-\t", "-\tPoint pt = new Point();", "-\tOS.GetGlobalMouse (pt);", "-", "-\tfor (int i = 0; i < transferAgents.length; i++) {", "-\t\tTransfer transfer = transferAgents[i];", "-\t\tif (transfer != null) {", "-\t\t\tint[] types = transfer.getTypeIds();", "-\t\t\tif (transfer instanceof FileTransfer) {", "-\t\t\t\tTransferData transferData = new TransferData();", "-\t\t\t\ttransferData.type = types[0];", "-\t\t\t\tDNDEvent event2 = new DNDEvent();", "-\t\t\t\tevent2.widget = this;", "-\t\t\t\tevent2.time = (int)System.currentTimeMillis(); ", "-\t\t\t\tevent2.dataType = transferData; ", "-\t\t\t\tnotifyListeners(DND.DragSetData, event2);", "-\t\t\t\tif (event2.data != null) {", "-\t\t\t\t\tfor (int j = 0; j < types.length; j++) {", "-\t\t\t\t\t\ttransferData.type = types[j];", "-\t\t\t\t\t\ttransfer.javaToNative(event2.data, transferData);", "-\t\t\t\t\t\tif (transferData.result == OS.noErr) {", "-\t\t\t\t\t\t\tfor (int k = 0; k < transferData.data.length; k++) {", "-\t\t\t\t\t\t\t\tbyte[] datum = transferData.data[k];", "-\t\t\t\t\t\t\t\tOS.AddDragItemFlavor(theDrag[0], 1 + k, types[j], datum, datum.length, 0);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tfor (int j = 0; j < types.length; j++) {", "-\t\t\t\t\tOS.AddDragItemFlavor(theDrag[0], 1, types[j], null, 0, 0);\t", "-\t\t\t\t}\t", "-\t\t\t}", "-\t\t}", "-\t}", "-\t", "-\tOS.SetDragSendProc(theDrag[0], DragSendDataProc.getAddress(), control.handle);", "-\t", "-\tint theRegion = 0;", "-\tImage newImage = null;", "-\ttry {\t", "-\t\ttheRegion = OS.NewRgn();", "-\t\tOS.SetRectRgn(theRegion, (short)(pt.h), (short)(pt.v), (short)(pt.h+20), (short)(pt.v+20));", "-\t\t", "-\t\tint operations = opToOsOp(getStyle());", "-\t\t//set operations twice - local and not local", "-\t\tOS.SetDragAllowableActions(theDrag[0], operations, true);", "-\t\tOS.SetDragAllowableActions(theDrag[0], operations, false);", "-\t\t", "-\t\tImage image = event.image;", "-\t\tif (image != null) {", "-\t\t\tCGPoint imageOffsetPt = new CGPoint();", "-\t\t\timageOffsetPt.x = 0;", "-\t\t\timageOffsetPt.y = 0;", "-\t\t\t/*", "-\t\t\t* Bug in the Macintosh.  For  some reason, it seems that SetDragImageWithCGImage() ", "-\t\t\t* expects an image with the alpha, otherwise the image does not draw.  The fix is", "-\t\t\t* to make sure that the image has an alpha by creating a new image with alpha", "-\t\t\t* when necessary.", "-\t\t\t*/", "-\t\t\tif (OS.CGImageGetAlphaInfo(image.handle) == OS.kCGImageAlphaNoneSkipFirst) {", "-\t\t\t\tImageData data = image.getImageData();", "-\t\t\t\tdata.alpha = 0xFF;", "-\t\t\t\tnewImage = new Image(image.getDevice(), data);", "-\t\t\t\timage = newImage;", "-\t\t\t}", "-\t\t\tOS.SetDragImageWithCGImage(theDrag[0], image.handle, imageOffsetPt, 0);", "-\t\t}", "-\t\tEventRecord theEvent = new EventRecord();", "-\t\ttheEvent.message = OS.kEventMouseMoved;", "-\t\ttheEvent.modifiers = (short)OS.GetCurrentEventKeyModifiers();", "-\t\ttheEvent.what = (short)OS.osEvt;", "-\t\ttheEvent.where_h = pt.h;", "-\t\ttheEvent.where_v = pt.v;\t", "-\t\tint result = OS.TrackDrag(theDrag[0], theEvent, theRegion);", "-\t\tint operation = DND.DROP_NONE;", "-\t\tif (result == OS.noErr) { ", "-\t\t\tint[] outAction = new int[1];", "-\t\t\tOS.GetDragDropAction(theDrag[0], outAction);", "-\t\t\toperation = osOpToOp(outAction[0]);", "-\t\t}\t", "-\t\tevent = new DNDEvent();", "-\t\tevent.widget = this;", "-\t\tevent.time = (int)System.currentTimeMillis();", "-\t\tevent.doit = result == OS.noErr;", "-\t\tevent.detail = operation; ", "-\t\tnotifyListeners(DND.DragEnd, event);", "-\t} finally {\t", "-\t\tif (theRegion != 0) OS.DisposeRgn(theRegion);", "-\t\tif (newImage != null) newImage.dispose();", "-\t}", "-\tOS.DisposeDrag(theDrag[0]);", "+//\tDNDEvent event = new DNDEvent();", "+//\tevent.widget = this;", "+//\tevent.x = dragEvent.x;", "+//\tevent.y = dragEvent.y;", "+//\tevent.time = dragEvent.time;", "+//\tevent.doit = true;", "+//\tnotifyListeners(DND.DragStart, event);", "+//\tif (!event.doit || transferAgents == null || transferAgents.length == 0) return;", "+//\t", "+//\tint[] theDrag = new int[1];", "+//\tif (OS.NewDrag(theDrag) != OS.noErr) {", "+//\t\tevent = new DNDEvent();", "+//\t\tevent.widget = this;", "+//\t\tevent.time = (int)System.currentTimeMillis();", "+//\t\tevent.doit = false;", "+//\t\tevent.detail = DND.DROP_NONE; ", "+//\t\tnotifyListeners(DND.DragEnd, event);", "+//\t\treturn;", "+//\t}", "+//\t", "+//\tPoint pt = new Point();", "+//\tOS.GetGlobalMouse (pt);", "+//", "+//\tfor (int i = 0; i < transferAgents.length; i++) {", "+//\t\tTransfer transfer = transferAgents[i];", "+//\t\tif (transfer != null) {", "+//\t\t\tint[] types = transfer.getTypeIds();", "+//\t\t\tif (transfer instanceof FileTransfer) {", "+//\t\t\t\tTransferData transferData = new TransferData();", "+//\t\t\t\ttransferData.type = types[0];", "+//\t\t\t\tDNDEvent event2 = new DNDEvent();", "+//\t\t\t\tevent2.widget = this;", "+//\t\t\t\tevent2.time = (int)System.currentTimeMillis(); ", "+//\t\t\t\tevent2.dataType = transferData; ", "+//\t\t\t\tnotifyListeners(DND.DragSetData, event2);", "+//\t\t\t\tif (event2.data != null) {", "+//\t\t\t\t\tfor (int j = 0; j < types.length; j++) {", "+//\t\t\t\t\t\ttransferData.type = types[j];", "+//\t\t\t\t\t\ttransfer.javaToNative(event2.data, transferData);", "+//\t\t\t\t\t\tif (transferData.result == OS.noErr) {", "+//\t\t\t\t\t\t\tfor (int k = 0; k < transferData.data.length; k++) {", "+//\t\t\t\t\t\t\t\tbyte[] datum = transferData.data[k];", "+//\t\t\t\t\t\t\t\tOS.AddDragItemFlavor(theDrag[0], 1 + k, types[j], datum, datum.length, 0);", "+//\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t}", "+//\t\t\t\t}", "+//\t\t\t} else {", "+//\t\t\t\tfor (int j = 0; j < types.length; j++) {", "+//\t\t\t\t\tOS.AddDragItemFlavor(theDrag[0], 1, types[j], null, 0, 0);\t", "+//\t\t\t\t}\t", "+//\t\t\t}", "+//\t\t}", "+//\t}", "+//\t", "+//\tOS.SetDragSendProc(theDrag[0], DragSendDataProc.getAddress(), control.handle);", "+//\t", "+//\tint theRegion = 0;", "+//\tImage newImage = null;", "+//\ttry {\t", "+//\t\ttheRegion = OS.NewRgn();", "+//\t\tOS.SetRectRgn(theRegion, (short)(pt.h), (short)(pt.v), (short)(pt.h+20), (short)(pt.v+20));", "+//\t\t", "+//\t\tint operations = opToOsOp(getStyle());", "+//\t\t//set operations twice - local and not local", "+//\t\tOS.SetDragAllowableActions(theDrag[0], operations, true);", "+//\t\tOS.SetDragAllowableActions(theDrag[0], operations, false);", "+//\t\t", "+//\t\tImage image = event.image;", "+//\t\tif (image != null) {", "+//\t\t\tCGPoint imageOffsetPt = new CGPoint();", "+//\t\t\timageOffsetPt.x = 0;", "+//\t\t\timageOffsetPt.y = 0;", "+//\t\t\t/*", "+//\t\t\t* Bug in the Macintosh.  For  some reason, it seems that SetDragImageWithCGImage() ", "+//\t\t\t* expects an image with the alpha, otherwise the image does not draw.  The fix is", "+//\t\t\t* to make sure that the image has an alpha by creating a new image with alpha", "+//\t\t\t* when necessary.", "+//\t\t\t*/", "+//\t\t\tif (OS.CGImageGetAlphaInfo(image.handle) == OS.kCGImageAlphaNoneSkipFirst) {", "+//\t\t\t\tImageData data = image.getImageData();", "+//\t\t\t\tdata.alpha = 0xFF;", "+//\t\t\t\tnewImage = new Image(image.getDevice(), data);", "+//\t\t\t\timage = newImage;", "+//\t\t\t}", "+//\t\t\tOS.SetDragImageWithCGImage(theDrag[0], image.handle, imageOffsetPt, 0);", "+//\t\t}", "+//\t\tEventRecord theEvent = new EventRecord();", "+//\t\ttheEvent.message = OS.kEventMouseMoved;", "+//\t\ttheEvent.modifiers = (short)OS.GetCurrentEventKeyModifiers();", "+//\t\ttheEvent.what = (short)OS.osEvt;", "+//\t\ttheEvent.where_h = pt.h;", "+//\t\ttheEvent.where_v = pt.v;\t", "+//\t\tint result = OS.TrackDrag(theDrag[0], theEvent, theRegion);", "+//\t\tint operation = DND.DROP_NONE;", "+//\t\tif (result == OS.noErr) { ", "+//\t\t\tint[] outAction = new int[1];", "+//\t\t\tOS.GetDragDropAction(theDrag[0], outAction);", "+//\t\t\toperation = osOpToOp(outAction[0]);", "+//\t\t}\t", "+//\t\tevent = new DNDEvent();", "+//\t\tevent.widget = this;", "+//\t\tevent.time = (int)System.currentTimeMillis();", "+//\t\tevent.doit = result == OS.noErr;", "+//\t\tevent.detail = operation; ", "+//\t\tnotifyListeners(DND.DragEnd, event);", "+//\t} finally {\t", "+//\t\tif (theRegion != 0) OS.DisposeRgn(theRegion);", "+//\t\tif (newImage != null) newImage.dispose();", "+//\t}", "+//\tOS.DisposeDrag(theDrag[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0567ef83e4ba1edf755ad60e74cdd81e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "a75e3baab3d6f43f9a08d94ed1a53989ef19370e", "commitAfterChange": "4dcd23c7083750557eb8f456083b724778c10df8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "diff": ["+\tdraw(gc, x, y, selectionStart, selectionEnd, selectionForeground, selectionBackground, 0);", "+}", "-\tif (length == 0) return;", "-\tif (hasSelection && selectionBackground != null) {", "-\t\trestoreColor = true;", "-\t\tint color = OS.CGColorCreate(device.colorspace, selectionBackground.handle);", "-\t\tsetLayoutControl(OS.kATSULineHighlightCGColorTag, color, 4);", "-\t\tOS.CGColorRelease(color);"]}], "num": 57166}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7928fc827f79bf395f6cd330bca7b5b0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30f1e51c9a686c78fb423ebd0dd94ccd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/AppFileLocProvider.java", "commitBeforeChange": "c863f15e676811980655a1f7fc25695605c2609c", "commitAfterChange": "309b926e42fb999778d38b7626a0e6c34a82050c", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  int getFiles (int prop, int _retval)", "signatureAfterChange": "  int getFiles (int prop, int _retval)", "diff": ["-\tString propertyValue = null;", "+\tString[] propertyValues = null;", "-\t\tpropertyValue = mozillaPath + PLUGINS_DIR;", "+\t\tif (pluginDirs == null) {", "+\t\t\tint index = 0;", "+\t\t\t/* set the first value to the MOZ_PLUGIN_PATH environment variable value if it's defined */", "+\t\t\tint /*long*/ ptr = C.getenv (MozillaDelegate.wcsToMbcs (null, XPCOM.MOZILLA_PLUGIN_PATH, true));", "+\t\t\tif (ptr != 0) {", "+\t\t\t\tint length = C.strlen (ptr);", "+\t\t\t\tbyte[] buffer = new byte[length];", "+\t\t\t\tC.memmove (buffer, ptr, length);", "+\t\t\t\tString value = new String (MozillaDelegate.mbcsToWcs (null, buffer));", "+\t\t\t\tif (value.length () > 0) {", "+\t\t\t\t\tpluginDirs = new String[3];", "+\t\t\t\t\tpluginDirs[index++] = value;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (pluginDirs == null) {", "+\t\t\t\tpluginDirs = new String[2];", "+\t\t\t}", "+", "+\t\t\t/* set the next value to the GRE path + \"plugins\" */", "+\t\t\tpluginDirs[index++] = mozillaPath + PLUGINS_DIR;", "+", "+\t\t\t/* set the next value to the home directory + \"/.mozilla/plugins\" */", "+\t\t\tpluginDirs[index++] = System.getProperty(\"user.home\") + SEPARATOR_OS + USER_PLUGINS_DIR;", "+\t\t}", "+\t\tpropertyValues = pluginDirs;", "-\tif (propertyValue != null && propertyValue.length () > 0) {", "+\tif (propertyValues != null) {", "-\t\tnsEmbedString pathString = new nsEmbedString (propertyValue);", "-\t\tint rc = XPCOM.NS_NewLocalFile (pathString.getAddress (), true, result);", "-\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NULL_POINTER);", "-\t\tpathString.dispose ();", "+\t\tnsISupports[] files = new nsISupports [propertyValues.length];", "+\t\tfor (int i = 0; i < propertyValues.length; i++) {", "+\t\t\tnsEmbedString pathString = new nsEmbedString (propertyValues[i]);", "+\t\t\tint rc = XPCOM.NS_NewLocalFile (pathString.getAddress (), true, result);", "+\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NULL_POINTER);", "+\t\t\tpathString.dispose ();", "-\t\tnsILocalFile localFile = new nsILocalFile (result[0]);", "-\t\tresult[0] = 0;", "-\t    rc = localFile.QueryInterface (nsIFile.NS_IFILE_IID, result); ", "-\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NULL_POINTER);", "-\t\tlocalFile.Release ();", "+\t\t\tnsILocalFile localFile = new nsILocalFile (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t    rc = localFile.QueryInterface (nsIFile.NS_IFILE_IID, result); ", "+\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NULL_POINTER);", "+\t\t\tlocalFile.Release ();", "-\t\tnsIFile file = new nsIFile (result [0]);", "-\t\tresult[0] = 0;", "-\t\tSingletonEnumerator enumerator = new SingletonEnumerator (file);", "-\t\tenumerator.AddRef (); ", "+\t\t\tnsIFile file = new nsIFile (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tfiles[i] = file;", "+\t\t}", "+", "+\t\tSimpleEnumerator enumerator = new SimpleEnumerator (files);", "+\t\tenumerator.AddRef ();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ff65ea3ce5e939864859b3b03b0984a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Cursor.java", "commitBeforeChange": "5257fe3e5c2382bbc3b51c5d746acb8fd1eb464e", "commitAfterChange": "be37fa819811929900e5dcf4ba355cc550991316", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Cursor(Device device, ImageData source, ImageData mask, int hotspotX, int hotspotY)", "signatureAfterChange": " public Cursor(Device device, ImageData source, ImageData mask, int hotspotX, int hotspotY)", "diff": ["+\tif (OS.VERSION >= 0x1040) {", "+\t\tbyte[] data = new byte[source.width * source.height * 4];", "+\t\tfor (int y = 0; y < source.height; y++) {", "+\t\t\tint offset = y * source.width * 4;", "+\t\t\tfor (int x = 0; x < source.width; x++) {", "+\t\t\t\tint pixel = source.getPixel(x, y);", "+\t\t\t\tint maskPixel = mask.getPixel(x, y);", "+\t\t\t\tif (pixel == 0 && maskPixel == 0) {", "+\t\t\t\t\t// BLACK", "+\t\t\t\t\tdata[offset] = (byte)0xFF;", "+\t\t\t\t} else if (pixel == 0 && maskPixel == 1) {", "+\t\t\t\t\t// WHITE - cursor color", "+\t\t\t\t\tdata[offset] = data[offset + 1] = data[offset + 2] = data[offset + 3] = (byte)0xFF;", "+\t\t\t\t} else if (pixel == 1 && maskPixel == 0) {", "+\t\t\t\t\t// SCREEN", "+\t\t\t\t} else {", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Feature in the Macintosh. It is not possible to have", "+\t\t\t\t\t* the reverse screen case using NSCursor.", "+\t\t\t\t\t* Reverse screen will be the same as screen.", "+\t\t\t\t\t*/", "+\t\t\t\t\t// REVERSE SCREEN -> SCREEN", "+\t\t\t\t}", "+\t\t\t\toffset += 4;", "+\t\t\t}", "+\t\t}", "+\t\tcreateNSCursor(device, hotspotX, hotspotY, data, source.width, source.height);", "+\t\treturn;", "+\t}"]}], "num": 7837}
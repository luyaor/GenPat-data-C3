{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a788ff2b4774ba4675cbb9c0e76d89eb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe03a6984eb8b3fed1bcf7ec94d52471", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "f9b2da66a3aa86a16bf7c87de7bf57c3a591dc41", "commitAfterChange": "ab3a0e2212badb4230b4950583046c2765ca9b1b", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 45, "signatureBeforeChange": "\r  void layoutItems()", "signatureAfterChange": "\r boolean layoutItems()", "diff": ["- void layoutItems() {\r", "-\tif (isDisposed()) return;\r", "-\r", "+boolean layoutItems() {\r", "+\tif (isDisposed()) return false;\r", "-\tint tabHeight = getTabHeight();\r", "-\r", "-\tshortenedTabs = false;\r", "-\tif (items.length > 0) {\r", "-\t\tint[] widths = new int[items.length];\r", "-\t\tint totalWidth = 0;\r", "-\t\tGC gc = new GC(this);\r", "-\t\tfor (int i = 0; i < items.length; i++) {\r", "-\t\t\twidths[i] = items[i].preferredWidth(gc);\r", "-\t\t\ttotalWidth += widths[i];\r", "-\t\t}\r", "-\t\tgc.dispose();\r", "-\t\tif (totalWidth < (area.width - borderLeft - borderRight) ) {\r", "-\t\t\ttopTabIndex = 0;\r", "-\t\t} else {\r", "-\t\t\t\r", "-\t\t\tint oldAverageWidth = 0;\r", "-\t\t\tint averageWidth = (area.width - borderLeft - borderRight) / items.length;\r", "-\t\t\twhile (averageWidth > oldAverageWidth) {\r", "-\t\t\t\tint width = area.width - borderLeft - borderRight;\r", "-\t\t\t\tint count = items.length;\r", "-\t\t\t\tfor (int i = 0; i < items.length; i++) {\r", "-\t\t\t\t\tif (widths[i] < averageWidth) {\r", "-\t\t\t\t\t\twidth -= widths[i];\r", "-\t\t\t\t\t\tcount--;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\toldAverageWidth = averageWidth;\r", "-\t\t\t\tif (count > 0) {\r", "-\t\t\t\t\taverageWidth = width / count;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tif (averageWidth > MIN_TAB_WIDTH * tabHeight) {\r", "-\t\t\t\tfor (int i = 0; i < items.length; i++) {\r", "-\t\t\t\t\tif (widths[i] > averageWidth) {\r", "-\t\t\t\t\t\twidths[i] = averageWidth;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\ttopTabIndex = 0;\r", "-\t\t\t\tshortenedTabs = true;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tint x = area.x;\r", "-\t\tint y = area.y + borderTop;\r", "-\t\tif (onBottom) {\r", "-\t\t\ty = Math.max(0, area.y + area.height - borderBottom - tabHeight);\r", "-\t\t}\r", "-\t\tfor (int i = topTabIndex - 1; i>=0; i--) { \r", "-\t\t\t// if the first visible tab is not the first tab\r", "-\t\t\tCTabItem tab = items[i];\r", "-\t\t\ttab.width = widths[i];\r", "-\t\t\ttab.height = getTabHeight();\r", "-\t\t\tx -= tab.width; \r", "-\t\t\t// layout tab items from right to left thus making them invisible\r", "-\t\t\ttab.x = x;\r", "-\t\t\ttab.y = y;\r", "-\t\t}\r", "-\t\t\r", "-\t\tx = area.x + borderLeft;\r", "-\t\tfor (int i=topTabIndex; i<items.length; i++) {\r", "-\t\t\t// continue laying out remaining, visible items left to right \r", "-\t\t\tCTabItem tab = items[i];\r", "-\t\t\ttab.x = x;\r", "-\t\t\ttab.y = y;\r", "-\t\t\ttab.height = tabHeight;\r", "-\t\t\ttab.width = widths[i];\r", "-\t\t\tx = x + tab.width;\r", "-\t\t}\r", "-\t}\r", "+\tint tabHeight = getTabHeight();\r", "-\t// resize the scrollbar and close butotns\r", "-\tlayoutButtons();\r", "+\tif (area.width == 0 || area.height == 0 || items.length == 0) return false;\r", "+\t\r", "+\tshortenedTabs = false;\r", "+\tint[] widths = new int[items.length];\r", "+\tGC gc = new GC(this);\r", "+\tfor (int i = 0; i < items.length; i++) {\r", "+\t\twidths[i] = items[i].preferredWidth(gc);\r", "+\t}\r", "+\tgc.dispose();\r", "+\r", "+\tint oldAverageWidth = 0;\r", "+\tint averageWidth = (area.width - borderLeft - borderRight) / items.length;\r", "+\twhile (averageWidth > oldAverageWidth) {\r", "+\t\tint width = area.width - borderLeft - borderRight;\r", "+\t\tint count = items.length;\r", "+\t\tfor (int i = 0; i < items.length; i++) {\r", "+\t\t\tif (widths[i] < averageWidth) {\r", "+\t\t\t\twidth -= widths[i];\r", "+\t\t\t\tcount--;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\toldAverageWidth = averageWidth;\r", "+\t\tif (count > 0) {\r", "+\t\t\taverageWidth = width / count;\r", "+\t\t}\r", "+\t}\r", "+\tif (averageWidth > MIN_TAB_WIDTH * tabHeight) {\r", "+\t\tfor (int i = 0; i < items.length; i++) {\r", "+\t\t\tif (widths[i] > averageWidth) {\r", "+\t\t\t\twidths[i] = averageWidth;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\ttopTabIndex = 0;\r", "+\t\tshortenedTabs = true;\r", "+\t}\r", "+\r", "+\tboolean changed = false;\r", "+\tint totalWidth = 0;\r", "+\tfor (int i = 0; i < items.length; i++) { \r", "+\t\tCTabItem tab = items[i];\r", "+\t\tif (tab.height != tabHeight || tab.width != widths[i]) changed = true;\r", "+\t\ttab.height = tabHeight;\r", "+\t\ttab.width = widths[i];\r", "+\t\ttotalWidth += widths[i];\r", "+\t}\r", "+\t\r", "+\tif (setItemsLocation()) changed = true;\r", "+\t\r", "+\tint areaWidth = area.x + area.width - borderRight;\r", "+\tif (totalWidth <= areaWidth) {\r", "+\t\t// if all items can be displayed, show all items\r", "+\t\tif (topTabIndex != 0) {\r", "+\t\t\ttopTabIndex = 0;\r", "+\t\t\tsetItemsLocation();\r", "+\t\t\tchanged = true;\r", "+\t\t}\r", "+\t} else {\r", "+\t\t// Is there a gap after last item showing\r", "+\t\tCTabItem lastItem = items[items.length -1];\r", "+\t\tif (lastItem.x + lastItem.width < areaWidth) {\r", "+\t\t\tint scrollWidth = arrowBar.getSize().x;\r", "+\t\t\tint maxWidth = areaWidth;\r", "+\t\t\tif (scroll_leftVisible() || scroll_rightVisible()) {\r", "+\t\t\t\tmaxWidth -=  scrollWidth;\r", "+\t\t\t}\r", "+\t\t\twhile (topTabIndex > 0 && maxWidth - lastItem.x - lastItem.width > items[topTabIndex - 1].width) {\r", "+\t\t\t\ttopTabIndex--;\r", "+\t\t\t\tsetItemsLocation();\r", "+\t\t\t\tchanged = true;\r", "+\t\t\t\tmaxWidth = areaWidth;\r", "+\t\t\t\tif (scroll_leftVisible() || scroll_rightVisible()) {\r", "+\t\t\t\t\tmaxWidth -=  scrollWidth;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\treturn changed;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77944a79fa618725822dd1236cb6b1be", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "b16a097ce1f227d4fd237cb6f8c0ba950eb50b9e", "commitAfterChange": "ad9e4c7cb4e85f9de20630936ecc2b154a562c71", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 21, "signatureBeforeChange": "  void createItem (TreeItem item, TreeItem parentItem, int index)", "signatureAfterChange": "  void createItem (TreeItem item, TreeItem parentItem, int index)", "diff": ["-\tint count = 0;", "-\tint id = items.length;", "-\tfor (int i=0; i<items.length; i++) {", "-\t\tif (items [i] == null) {", "-\t\t\tif (id == items.length) id = i;", "-\t\t} else {", "-\t\t\tif (items [i].parentItem == parentItem) count++;", "-\t\t}", "-\t}", "+\tint count = getItemCount (parentItem);", "-\titem.index = index;", "-\tif (index != count) {", "-\t\tfor (int i=0; i<items.length; i++) {", "-\t\t\tif (items [i] != null && items [i].parentItem == parentItem) {", "-\t\t\t\tif (items [i].index >= item.index) items [i].index++;", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (id == items.length) {", "-\t\tTreeItem [] newItems = new TreeItem [items.length + 4];", "+\tint id = _getId ();", "+\tif (id > items.length) {", "+\t\tTreeItem [] newItems = new TreeItem [id + 4];", "-\titems [id] = item;", "-\titem.id = id + 1;", "-\tint parentID = OS.kDataBrowserNoItem;", "-\tboolean expanded = true;", "-\tif (parentItem != null) {", "-\t\tparentID = parentItem.id;", "-\t\texpanded = parentItem.getExpanded ();", "+\titem.id = id;", "+\titems [id - 1] = item;", "+\tint [] ids = parentItem == null ? childIds : parentItem.childIds;", "+\tif (ids == null || index >= ids.length) {", "+\t\tint [] newIds = new int [index + 4];", "+\t\tif (ids != null) System.arraycopy (ids, 0, newIds, 0, ids.length);", "+\t\tids = newIds;", "+\t\tif (parentItem == null) {", "+\t\t\tchildIds = ids;", "+\t\t} else {", "+\t\t\tparentItem.childIds = ids;", "+\t\t}", "-\tif (expanded) {", "-\t\tif (OS.AddDataBrowserItems (handle, parentID, 1, new int[] {item.id}, OS.kDataBrowserItemNoProperty) != OS.noErr) {", "-\t\t\titems [id] = null;", "+\tSystem.arraycopy (ids, index, ids, index + 1, ids.length - index - 1);", "+\tids [index] = id;", "+\tif (parentItem == null || parentItem.getExpanded ()) {", "+\t\tint parentID = parentItem == null ? OS.kDataBrowserNoItem : parentItem.id;", "+\t\tif (OS.AddDataBrowserItems (handle, parentID, 1, new int [] {item.id}, OS.kDataBrowserItemNoProperty) != OS.noErr) {", "+\t\t\titems [id - 1] = null;", "+\t\t\tSystem.arraycopy (ids, index+1, ids, index, ids.length - index);"]}], "num": 48035}
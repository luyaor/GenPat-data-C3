{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a4e30b723d352500d549af822a733225", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "286bd3d1962d90e7450b1368131c6206", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/gtk/org/eclipse/swt/printing/PrintDialog.java", "commitBeforeChange": "d2e5c07029c231cf71046f566a084417747c40b0", "commitAfterChange": "7d865938b30c1ae03ba599023ba96f0087c84faf", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public PrinterData open()", "signatureAfterChange": " public PrinterData open()", "diff": ["-\tif (OS.GTK_VERSION < OS.VERSION (2, 10, 0)) {", "-\t\treturn Printer.getDefaultPrinterData();", "-\t} else {", "-\t\tbyte [] titleBytes = Converter.wcsToMbcs (null, getText(), true);", "-\t\tlong /*int*/ topHandle = getParent().handle;", "-\t\twhile (topHandle != 0 && !OS.GTK_IS_WINDOW(topHandle)) {", "-\t\t\ttopHandle = OS.gtk_widget_get_parent(topHandle);", "-\t\t}", "-\t\thandle = OS.gtk_print_unix_dialog_new(titleBytes, topHandle);", "-\t\t\t\t", "-\t\t//TODO: Not currently implemented. May need new API. For now, disable 'Current' in the dialog. (see gtk bug 344519)", "-\t\tOS.gtk_print_unix_dialog_set_current_page(handle, -1);", "-\t\t", "-\t\tOS.gtk_print_unix_dialog_set_manual_capabilities(handle,", "-\t\t\tOS.GTK_PRINT_CAPABILITY_COLLATE | OS.GTK_PRINT_CAPABILITY_COPIES | OS.GTK_PRINT_CAPABILITY_PAGE_SET);", "-\t\t", "-\t\t/* Set state into print dialog settings. */", "-\t\tlong /*int*/ settings = OS.gtk_print_settings_new();", "-\t\tlong /*int*/ page_setup = OS.gtk_page_setup_new();", "-\t\t", "-\t\tif (printerData.otherData != null) {", "-\t\t\tPrinter.restore(printerData.otherData, settings, page_setup);", "-\t\t}", "-\t\t", "-\t\t/* Set values of print_settings and page_setup from PrinterData. */", "-\t\tString printerName = printerData.name;", "-\t\tif (printerName == null && printerData.printToFile) {", "-\t\t\t/* Find the printer name corresponding to the file backend. */", "-\t\t\tlong /*int*/ printer = Printer.gtkPrinterFromPrinterData(printerData);", "-\t\t\tif (printer != 0) {", "-\t\t\t\tPrinterData data = Printer.printerDataFromGtkPrinter(printer);", "-\t\t\t\tprinterName = data.name;", "-\t\t\t\tOS.g_object_unref(printer);", "-\t\t\t}", "-\t\t}", "-\t\tif (printerName != null) {", "-\t\t\tbyte [] nameBytes = Converter.wcsToMbcs (null, printerName, true);", "-\t\t\tOS.gtk_print_settings_set_printer(settings, nameBytes);", "-\t\t}", "-\t\t", "-\t\tswitch (printerData.scope) {", "-\t\t\tcase PrinterData.ALL_PAGES:", "-\t\t\t\tOS.gtk_print_settings_set_print_pages(settings, OS.GTK_PRINT_PAGES_ALL);", "-\t\t\t\tbreak;", "-\t\t\tcase PrinterData.PAGE_RANGE:", "-\t\t\t\tOS.gtk_print_settings_set_print_pages(settings, OS.GTK_PRINT_PAGES_RANGES);", "-\t\t\t\tint [] pageRange = new int[2];", "-\t\t\t\tpageRange[0] = printerData.startPage - 1;", "-\t\t\t\tpageRange[1] = printerData.endPage - 1;", "-\t\t\t\tOS.gtk_print_settings_set_page_ranges(settings, pageRange, 1);", "-\t\t\t\tbreak;", "-\t\t\tcase PrinterData.SELECTION:", "-\t\t\t\t//TODO: Not correctly implemented. May need new API. For now, set to ALL. (see gtk bug 344519)", "-\t\t\t\tOS.gtk_print_settings_set_print_pages(settings, OS.GTK_PRINT_PAGES_ALL);", "-\t\t\t\tbreak;", "-\t\t}", "-\t\tif ((printerData.printToFile || Printer.GTK_FILE_BACKEND.equals(printerData.driver)) && printerData.fileName != null) {", "-\t\t\t// TODO: GTK_FILE_BACKEND is not GTK API (see gtk bug 345590)", "-\t\t\tbyte [] uri = Printer.uriFromFilename(printerData.fileName);", "-\t\t\tif (uri != null) {", "-\t\t\t\tOS.gtk_print_settings_set(settings, OS.GTK_PRINT_SETTINGS_OUTPUT_URI, uri);", "-\t\t\t}", "-\t\t}", "-\t\tOS.gtk_print_settings_set_n_copies(settings, printerData.copyCount);", "-\t\tOS.gtk_print_settings_set_collate(settings, printerData.collate);", "-\t\t/* ", "-\t\t * Bug in GTK.  The unix dialog gives priority to the value of the non-API", "-\t\t * field cups-Duplex in the print_settings (which we preserve in otherData).", "-\t\t * The fix is to manually clear cups-Duplex before setting the duplex field.", "-\t\t */", "-\t\tbyte [] keyBuffer = Converter.wcsToMbcs (null, \"cups-Duplex\", true);", "-\t\tOS.gtk_print_settings_set(settings, keyBuffer, (byte[]) null);", "-\t\tif (printerData.duplex != SWT.DEFAULT) {", "-\t\t\tint duplex = printerData.duplex == PrinterData.DUPLEX_LONG_EDGE ? OS.GTK_PRINT_DUPLEX_HORIZONTAL", "-\t\t\t\t: printerData.duplex == PrinterData.DUPLEX_SHORT_EDGE ? OS.GTK_PRINT_DUPLEX_VERTICAL", "-\t\t\t\t: OS.GTK_PRINT_DUPLEX_SIMPLEX;", "-\t\t\tOS.gtk_print_settings_set_duplex (settings, duplex);", "-\t\t}", "-\t\tint orientation = printerData.orientation == PrinterData.LANDSCAPE ? OS.GTK_PAGE_ORIENTATION_LANDSCAPE : OS.GTK_PAGE_ORIENTATION_PORTRAIT;", "-\t\tOS.gtk_print_settings_set_orientation(settings, orientation);", "-\t\tOS.gtk_page_setup_set_orientation(page_setup, orientation);", "-\t\t", "-\t\tOS.gtk_print_unix_dialog_set_settings(handle, settings);", "-\t\tOS.gtk_print_unix_dialog_set_page_setup(handle, page_setup);", "-\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "-\t\t\tOS.gtk_print_unix_dialog_set_embed_page_setup(handle, true);", "-\t\t}", "-\t\tOS.g_object_unref(settings);", "-\t\tOS.g_object_unref(page_setup);", "-\t\tlong /*int*/ group = OS.gtk_window_get_group(0);", "-\t\tOS.gtk_window_group_add_window (group, handle);", "-\t\tOS.gtk_window_set_modal(handle, true);", "-\t\tPrinterData data = null;", "-\t\t//TODO: Handle 'Print Preview' (GTK_RESPONSE_APPLY).", "-\t\tDisplay display = getParent() != null ? getParent().getDisplay (): Display.getCurrent ();", "-\t\t", "-\t\tint signalId = 0;", "-\t\tlong /*int*/ hookId = 0;", "-\t\tif ((getStyle () & SWT.RIGHT_TO_LEFT) != 0) {", "-\t\t\tsignalId = OS.g_signal_lookup (OS.map, OS.GTK_TYPE_WIDGET());", "-\t\t\thookId = OS.g_signal_add_emission_hook (signalId, 0, ((LONG) display.getData (GET_EMISSION_PROC_KEY)).value, handle, 0);", "-\t\t}\t", "-\t\tdisplay.setData (ADD_IDLE_PROC_KEY, null);", "-\t\tObject oldModal = null;", "-\t\tif (OS.gtk_window_get_modal (handle)) {", "-\t\t\toldModal = display.getData (GET_MODAL_DIALOG);", "-\t\t\tdisplay.setData (SET_MODAL_DIALOG, this);", "-\t\t}", "-\t\tint response = OS.gtk_dialog_run (handle);", "-\t\t/*", "-\t\t* This call to gdk_threads_leave() is a temporary work around", "-\t\t* to avoid deadlocks when gdk_threads_init() is called by native", "-\t\t* code outside of SWT (i.e AWT, etc). It ensures that the current", "-\t\t* thread leaves the GTK lock acquired by the function above. ", "-\t\t*/", "-\t\tOS.gdk_threads_leave();", "-\t\tif (OS.gtk_window_get_modal (handle)) {", "-\t\t\tdisplay.setData (SET_MODAL_DIALOG, oldModal);", "-\t\t}", "-\t\tif ((getStyle () & SWT.RIGHT_TO_LEFT) != 0) {", "-\t\t\tOS.g_signal_remove_emission_hook (signalId, hookId);", "-\t\t}", "-\t\tif (response == OS.GTK_RESPONSE_OK) {", "-\t\t\tlong /*int*/ printer = OS.gtk_print_unix_dialog_get_selected_printer(handle);", "-\t\t\tif (printer != 0) {", "-\t\t\t\t/* Get state from print dialog. */", "-\t\t\t\tsettings = OS.gtk_print_unix_dialog_get_settings(handle); // must unref", "-\t\t\t\tpage_setup = OS.gtk_print_unix_dialog_get_page_setup(handle); // do not unref", "-\t\t\t\tdata = Printer.printerDataFromGtkPrinter(printer);", "-\t\t\t\tint print_pages = OS.gtk_print_settings_get_print_pages(settings);", "-\t\t\t\tswitch (print_pages) {", "-\t\t\t\t\tcase OS.GTK_PRINT_PAGES_ALL:", "-\t\t\t\t\t\tdata.scope = PrinterData.ALL_PAGES;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.GTK_PRINT_PAGES_RANGES:", "-\t\t\t\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "-\t\t\t\t\t\tint[] num_ranges = new int[1];", "-\t\t\t\t\t\tlong /*int*/ page_ranges = OS.gtk_print_settings_get_page_ranges(settings, num_ranges);", "-\t\t\t\t\t\tint [] pageRange = new int[2];", "-\t\t\t\t\t\tint length = num_ranges[0];", "-\t\t\t\t\t\tint min = Integer.MAX_VALUE, max = 0;", "-\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\tOS.memmove(pageRange, page_ranges + i * pageRange.length * 4, pageRange.length * 4);", "-\t\t\t\t\t\t\tmin = Math.min(min, pageRange[0] + 1);", "-\t\t\t\t\t\t\tmax = Math.max(max, pageRange[1] + 1);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tOS.g_free(page_ranges);", "-\t\t\t\t\t\tdata.startPage = min == Integer.MAX_VALUE ? 1 : min;", "-\t\t\t\t\t\tdata.endPage = max == 0 ? 1 : max;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.GTK_PRINT_PAGES_CURRENT:", "-\t\t\t\t\t\t//TODO: Disabled in dialog (see above). This code will not run. (see gtk bug 344519)", "-\t\t\t\t\t\tdata.scope = PrinterData.SELECTION;", "-\t\t\t\t\t\tdata.startPage = data.endPage = OS.gtk_print_unix_dialog_get_current_page(handle);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tdata.printToFile = Printer.GTK_FILE_BACKEND.equals(data.driver); // TODO: GTK_FILE_BACKEND is not GTK API (see gtk bug 345590)", "-\t\t\t\tif (data.printToFile) {", "-\t\t\t\t\tlong /*int*/ address = OS.gtk_print_settings_get(settings, OS.GTK_PRINT_SETTINGS_OUTPUT_URI);", "-\t\t\t\t\tint length = OS.strlen (address);", "-\t\t\t\t\tbyte [] buffer = new byte [length];", "-\t\t\t\t\tOS.memmove (buffer, address, length);", "-\t\t\t\t\tdata.fileName = new String (Converter.mbcsToWcs (null, buffer));", "-\t\t\t\t}", "-", "-\t\t\t\tdata.copyCount = OS.gtk_print_settings_get_n_copies(settings);", "-\t\t\t\tdata.collate = OS.gtk_print_settings_get_collate(settings);", "-\t\t\t\tint duplex = OS.gtk_print_settings_get_duplex(settings);", "-\t\t\t\tdata.duplex = duplex == OS.GTK_PRINT_DUPLEX_HORIZONTAL ? PrinterData.DUPLEX_LONG_EDGE", "-\t\t\t\t\t\t: duplex == OS.GTK_PRINT_DUPLEX_VERTICAL ? PrinterData.DUPLEX_SHORT_EDGE", "-\t\t\t\t\t\t: PrinterData.DUPLEX_NONE;", "-\t\t\t\tdata.orientation = OS.gtk_page_setup_get_orientation(page_setup) == OS.GTK_PAGE_ORIENTATION_LANDSCAPE ? PrinterData.LANDSCAPE : PrinterData.PORTRAIT;", "-", "-\t\t\t\t/* Save other print_settings data as key/value pairs in otherData. */", "-\t\t\t\tCallback printSettingsCallback = new Callback(this, \"GtkPrintSettingsFunc\", 3); //$NON-NLS-1$", "-\t\t\t\tlong /*int*/ GtkPrintSettingsFunc = printSettingsCallback.getAddress();", "-\t\t\t\tif (GtkPrintSettingsFunc == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\t\t\tindex = 0;", "-\t\t\t\tsettingsData = new byte[1024];", "-\t\t\t\tOS.gtk_print_settings_foreach (settings, GtkPrintSettingsFunc, 0);", "-\t\t\t\tprintSettingsCallback.dispose ();", "-\t\t\t\tindex++; // extra null terminator after print_settings and before page_setup", "-", "-\t\t\t\t/* Save page_setup data as key/value pairs in otherData.", "-\t\t\t\t * Note that page_setup properties must be stored and restored in the same order.", "-\t\t\t\t */", "-\t\t\t\tstore(\"orientation\", OS.gtk_page_setup_get_orientation(page_setup)); //$NON-NLS-1$", "-\t\t\t\tstore(\"top_margin\", OS.gtk_page_setup_get_top_margin(page_setup, OS.GTK_UNIT_MM)); //$NON-NLS-1$", "-\t\t\t\tstore(\"bottom_margin\", OS.gtk_page_setup_get_bottom_margin(page_setup, OS.GTK_UNIT_MM)); //$NON-NLS-1$", "-\t\t\t\tstore(\"left_margin\", OS.gtk_page_setup_get_left_margin(page_setup, OS.GTK_UNIT_MM)); //$NON-NLS-1$", "-\t\t\t\tstore(\"right_margin\", OS.gtk_page_setup_get_right_margin(page_setup, OS.GTK_UNIT_MM)); //$NON-NLS-1$", "-\t\t\t\tlong /*int*/ paper_size = OS.gtk_page_setup_get_paper_size(page_setup); //$NON-NLS-1$", "-\t\t\t\tstoreBytes(\"paper_size_name\", OS.gtk_paper_size_get_name(paper_size)); //$NON-NLS-1$", "-\t\t\t\tstoreBytes(\"paper_size_display_name\", OS.gtk_paper_size_get_display_name(paper_size)); //$NON-NLS-1$", "-\t\t\t\tstoreBytes(\"paper_size_ppd_name\", OS.gtk_paper_size_get_ppd_name(paper_size)); //$NON-NLS-1$", "-\t\t\t\tstore(\"paper_size_width\", OS.gtk_paper_size_get_width(paper_size, OS.GTK_UNIT_MM)); //$NON-NLS-1$", "-\t\t\t\tstore(\"paper_size_height\", OS.gtk_paper_size_get_height(paper_size, OS.GTK_UNIT_MM)); //$NON-NLS-1$", "-\t\t\t\tstore(\"paper_size_is_custom\", OS.gtk_paper_size_is_custom(paper_size)); //$NON-NLS-1$", "-\t\t\t\tdata.otherData = settingsData;", "-\t\t\t\tOS.g_object_unref(settings);", "-\t\t\t\tprinterData = data;", "-\t\t\t}", "-\t\t}", "-\t\tdisplay.setData (REMOVE_IDLE_PROC_KEY, null);", "-\t\tOS.gtk_widget_destroy (handle);", "-\t\treturn data;", "+\tbyte [] titleBytes = Converter.wcsToMbcs (null, getText(), true);", "+\tlong /*int*/ topHandle = getParent().handle;", "+\twhile (topHandle != 0 && !OS.GTK_IS_WINDOW(topHandle)) {", "+\t\ttopHandle = OS.gtk_widget_get_parent(topHandle);", "+\thandle = OS.gtk_print_unix_dialog_new(titleBytes, topHandle);", "+\t\t\t", "+\t//TODO: Not currently implemented. May need new API. For now, disable 'Current' in the dialog. (see gtk bug 344519)", "+\tOS.gtk_print_unix_dialog_set_current_page(handle, -1);", "+\t", "+\tOS.gtk_print_unix_dialog_set_manual_capabilities(handle,", "+\t\tOS.GTK_PRINT_CAPABILITY_COLLATE | OS.GTK_PRINT_CAPABILITY_COPIES | OS.GTK_PRINT_CAPABILITY_PAGE_SET);", "+\t", "+\t/* Set state into print dialog settings. */", "+\tlong /*int*/ settings = OS.gtk_print_settings_new();", "+\tlong /*int*/ page_setup = OS.gtk_page_setup_new();", "+\t", "+\tif (printerData.otherData != null) {", "+\t\tPrinter.restore(printerData.otherData, settings, page_setup);", "+\t}", "+\t", "+\t/* Set values of print_settings and page_setup from PrinterData. */", "+\tString printerName = printerData.name;", "+\tif (printerName == null && printerData.printToFile) {", "+\t\t/* Find the printer name corresponding to the file backend. */", "+\t\tlong /*int*/ printer = Printer.gtkPrinterFromPrinterData(printerData);", "+\t\tif (printer != 0) {", "+\t\t\tPrinterData data = Printer.printerDataFromGtkPrinter(printer);", "+\t\t\tprinterName = data.name;", "+\t\t\tOS.g_object_unref(printer);", "+\t\t}", "+\t}", "+\tif (printerName != null) {", "+\t\tbyte [] nameBytes = Converter.wcsToMbcs (null, printerName, true);", "+\t\tOS.gtk_print_settings_set_printer(settings, nameBytes);", "+\t}", "+\t", "+\tswitch (printerData.scope) {", "+\t\tcase PrinterData.ALL_PAGES:", "+\t\t\tOS.gtk_print_settings_set_print_pages(settings, OS.GTK_PRINT_PAGES_ALL);", "+\t\t\tbreak;", "+\t\tcase PrinterData.PAGE_RANGE:", "+\t\t\tOS.gtk_print_settings_set_print_pages(settings, OS.GTK_PRINT_PAGES_RANGES);", "+\t\t\tint [] pageRange = new int[2];", "+\t\t\tpageRange[0] = printerData.startPage - 1;", "+\t\t\tpageRange[1] = printerData.endPage - 1;", "+\t\t\tOS.gtk_print_settings_set_page_ranges(settings, pageRange, 1);", "+\t\t\tbreak;", "+\t\tcase PrinterData.SELECTION:", "+\t\t\t//TODO: Not correctly implemented. May need new API. For now, set to ALL. (see gtk bug 344519)", "+\t\t\tOS.gtk_print_settings_set_print_pages(settings, OS.GTK_PRINT_PAGES_ALL);", "+\t\t\tbreak;", "+\t}", "+\tif ((printerData.printToFile || Printer.GTK_FILE_BACKEND.equals(printerData.driver)) && printerData.fileName != null) {", "+\t\t// TODO: GTK_FILE_BACKEND is not GTK API (see gtk bug 345590)", "+\t\tbyte [] uri = Printer.uriFromFilename(printerData.fileName);", "+\t\tif (uri != null) {", "+\t\t\tOS.gtk_print_settings_set(settings, OS.GTK_PRINT_SETTINGS_OUTPUT_URI, uri);", "+\t\t}", "+\t}", "+\tOS.gtk_print_settings_set_n_copies(settings, printerData.copyCount);", "+\tOS.gtk_print_settings_set_collate(settings, printerData.collate);", "+\t/* ", "+\t * Bug in GTK.  The unix dialog gives priority to the value of the non-API", "+\t * field cups-Duplex in the print_settings (which we preserve in otherData).", "+\t * The fix is to manually clear cups-Duplex before setting the duplex field.", "+\t */", "+\tbyte [] keyBuffer = Converter.wcsToMbcs (null, \"cups-Duplex\", true);", "+\tOS.gtk_print_settings_set(settings, keyBuffer, (byte[]) null);", "+\tif (printerData.duplex != SWT.DEFAULT) {", "+\t\tint duplex = printerData.duplex == PrinterData.DUPLEX_LONG_EDGE ? OS.GTK_PRINT_DUPLEX_HORIZONTAL", "+\t\t\t: printerData.duplex == PrinterData.DUPLEX_SHORT_EDGE ? OS.GTK_PRINT_DUPLEX_VERTICAL", "+\t\t\t: OS.GTK_PRINT_DUPLEX_SIMPLEX;", "+\t\tOS.gtk_print_settings_set_duplex (settings, duplex);", "+\t}", "+\tint orientation = printerData.orientation == PrinterData.LANDSCAPE ? OS.GTK_PAGE_ORIENTATION_LANDSCAPE : OS.GTK_PAGE_ORIENTATION_PORTRAIT;", "+\tOS.gtk_print_settings_set_orientation(settings, orientation);", "+\tOS.gtk_page_setup_set_orientation(page_setup, orientation);", "+\t", "+\tOS.gtk_print_unix_dialog_set_settings(handle, settings);", "+\tOS.gtk_print_unix_dialog_set_page_setup(handle, page_setup);", "+\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "+\t\tOS.gtk_print_unix_dialog_set_embed_page_setup(handle, true);", "+\t}", "+\tOS.g_object_unref(settings);", "+\tOS.g_object_unref(page_setup);", "+\tlong /*int*/ group = OS.gtk_window_get_group(0);", "+\tOS.gtk_window_group_add_window (group, handle);", "+\tOS.gtk_window_set_modal(handle, true);", "+\tPrinterData data = null;", "+\t//TODO: Handle 'Print Preview' (GTK_RESPONSE_APPLY).", "+\tDisplay display = getParent() != null ? getParent().getDisplay (): Display.getCurrent ();", "+\t", "+\tint signalId = 0;", "+\tlong /*int*/ hookId = 0;", "+\tif ((getStyle () & SWT.RIGHT_TO_LEFT) != 0) {", "+\t\tsignalId = OS.g_signal_lookup (OS.map, OS.GTK_TYPE_WIDGET());", "+\t\thookId = OS.g_signal_add_emission_hook (signalId, 0, ((LONG) display.getData (GET_EMISSION_PROC_KEY)).value, handle, 0);", "+\t}\t", "+\tdisplay.setData (ADD_IDLE_PROC_KEY, null);", "+\tObject oldModal = null;", "+\tif (OS.gtk_window_get_modal (handle)) {", "+\t\toldModal = display.getData (GET_MODAL_DIALOG);", "+\t\tdisplay.setData (SET_MODAL_DIALOG, this);", "+\t}", "+\tint response = OS.gtk_dialog_run (handle);", "+\t/*", "+\t* This call to gdk_threads_leave() is a temporary work around", "+\t* to avoid deadlocks when gdk_threads_init() is called by native", "+\t* code outside of SWT (i.e AWT, etc). It ensures that the current", "+\t* thread leaves the GTK lock acquired by the function above. ", "+\t*/", "+\tOS.gdk_threads_leave();", "+\tif (OS.gtk_window_get_modal (handle)) {", "+\t\tdisplay.setData (SET_MODAL_DIALOG, oldModal);", "+\t}", "+\tif ((getStyle () & SWT.RIGHT_TO_LEFT) != 0) {", "+\t\tOS.g_signal_remove_emission_hook (signalId, hookId);", "+\t}", "+\tif (response == OS.GTK_RESPONSE_OK) {", "+\t\tlong /*int*/ printer = OS.gtk_print_unix_dialog_get_selected_printer(handle);", "+\t\tif (printer != 0) {", "+\t\t\t/* Get state from print dialog. */", "+\t\t\tsettings = OS.gtk_print_unix_dialog_get_settings(handle); // must unref", "+\t\t\tpage_setup = OS.gtk_print_unix_dialog_get_page_setup(handle); // do not unref", "+\t\t\tdata = Printer.printerDataFromGtkPrinter(printer);", "+\t\t\tint print_pages = OS.gtk_print_settings_get_print_pages(settings);", "+\t\t\tswitch (print_pages) {", "+\t\t\t\tcase OS.GTK_PRINT_PAGES_ALL:", "+\t\t\t\t\tdata.scope = PrinterData.ALL_PAGES;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase OS.GTK_PRINT_PAGES_RANGES:", "+\t\t\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "+\t\t\t\t\tint[] num_ranges = new int[1];", "+\t\t\t\t\tlong /*int*/ page_ranges = OS.gtk_print_settings_get_page_ranges(settings, num_ranges);", "+\t\t\t\t\tint [] pageRange = new int[2];", "+\t\t\t\t\tint length = num_ranges[0];", "+\t\t\t\t\tint min = Integer.MAX_VALUE, max = 0;", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tOS.memmove(pageRange, page_ranges + i * pageRange.length * 4, pageRange.length * 4);", "+\t\t\t\t\t\tmin = Math.min(min, pageRange[0] + 1);", "+\t\t\t\t\t\tmax = Math.max(max, pageRange[1] + 1);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.g_free(page_ranges);", "+\t\t\t\t\tdata.startPage = min == Integer.MAX_VALUE ? 1 : min;", "+\t\t\t\t\tdata.endPage = max == 0 ? 1 : max;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase OS.GTK_PRINT_PAGES_CURRENT:", "+\t\t\t\t\t//TODO: Disabled in dialog (see above). This code will not run. (see gtk bug 344519)", "+\t\t\t\t\tdata.scope = PrinterData.SELECTION;", "+\t\t\t\t\tdata.startPage = data.endPage = OS.gtk_print_unix_dialog_get_current_page(handle);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\t", "+\t\t\tdata.printToFile = Printer.GTK_FILE_BACKEND.equals(data.driver); // TODO: GTK_FILE_BACKEND is not GTK API (see gtk bug 345590)", "+\t\t\tif (data.printToFile) {", "+\t\t\t\tlong /*int*/ address = OS.gtk_print_settings_get(settings, OS.GTK_PRINT_SETTINGS_OUTPUT_URI);", "+\t\t\t\tint length = OS.strlen (address);", "+\t\t\t\tbyte [] buffer = new byte [length];", "+\t\t\t\tOS.memmove (buffer, address, length);", "+\t\t\t\tdata.fileName = new String (Converter.mbcsToWcs (null, buffer));", "+\t\t\t}", "+", "+\t\t\tdata.copyCount = OS.gtk_print_settings_get_n_copies(settings);", "+\t\t\tdata.collate = OS.gtk_print_settings_get_collate(settings);", "+\t\t\tint duplex = OS.gtk_print_settings_get_duplex(settings);", "+\t\t\tdata.duplex = duplex == OS.GTK_PRINT_DUPLEX_HORIZONTAL ? PrinterData.DUPLEX_LONG_EDGE", "+\t\t\t\t\t: duplex == OS.GTK_PRINT_DUPLEX_VERTICAL ? PrinterData.DUPLEX_SHORT_EDGE", "+\t\t\t\t\t: PrinterData.DUPLEX_NONE;", "+\t\t\tdata.orientation = OS.gtk_page_setup_get_orientation(page_setup) == OS.GTK_PAGE_ORIENTATION_LANDSCAPE ? PrinterData.LANDSCAPE : PrinterData.PORTRAIT;", "+", "+\t\t\t/* Save other print_settings data as key/value pairs in otherData. */", "+\t\t\tCallback printSettingsCallback = new Callback(this, \"GtkPrintSettingsFunc\", 3); //$NON-NLS-1$", "+\t\t\tlong /*int*/ GtkPrintSettingsFunc = printSettingsCallback.getAddress();", "+\t\t\tif (GtkPrintSettingsFunc == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\tindex = 0;", "+\t\t\tsettingsData = new byte[1024];", "+\t\t\tOS.gtk_print_settings_foreach (settings, GtkPrintSettingsFunc, 0);", "+\t\t\tprintSettingsCallback.dispose ();", "+\t\t\tindex++; // extra null terminator after print_settings and before page_setup", "+", "+\t\t\t/* Save page_setup data as key/value pairs in otherData.", "+\t\t\t * Note that page_setup properties must be stored and restored in the same order.", "+\t\t\t */", "+\t\t\tstore(\"orientation\", OS.gtk_page_setup_get_orientation(page_setup)); //$NON-NLS-1$", "+\t\t\tstore(\"top_margin\", OS.gtk_page_setup_get_top_margin(page_setup, OS.GTK_UNIT_MM)); //$NON-NLS-1$", "+\t\t\tstore(\"bottom_margin\", OS.gtk_page_setup_get_bottom_margin(page_setup, OS.GTK_UNIT_MM)); //$NON-NLS-1$", "+\t\t\tstore(\"left_margin\", OS.gtk_page_setup_get_left_margin(page_setup, OS.GTK_UNIT_MM)); //$NON-NLS-1$", "+\t\t\tstore(\"right_margin\", OS.gtk_page_setup_get_right_margin(page_setup, OS.GTK_UNIT_MM)); //$NON-NLS-1$", "+\t\t\tlong /*int*/ paper_size = OS.gtk_page_setup_get_paper_size(page_setup); //$NON-NLS-1$", "+\t\t\tstoreBytes(\"paper_size_name\", OS.gtk_paper_size_get_name(paper_size)); //$NON-NLS-1$", "+\t\t\tstoreBytes(\"paper_size_display_name\", OS.gtk_paper_size_get_display_name(paper_size)); //$NON-NLS-1$", "+\t\t\tstoreBytes(\"paper_size_ppd_name\", OS.gtk_paper_size_get_ppd_name(paper_size)); //$NON-NLS-1$", "+\t\t\tstore(\"paper_size_width\", OS.gtk_paper_size_get_width(paper_size, OS.GTK_UNIT_MM)); //$NON-NLS-1$", "+\t\t\tstore(\"paper_size_height\", OS.gtk_paper_size_get_height(paper_size, OS.GTK_UNIT_MM)); //$NON-NLS-1$", "+\t\t\tstore(\"paper_size_is_custom\", OS.gtk_paper_size_is_custom(paper_size)); //$NON-NLS-1$", "+\t\t\tdata.otherData = settingsData;", "+\t\t\tOS.g_object_unref(settings);", "+\t\t\tprinterData = data;", "+\t\t}", "+\t}", "+\tdisplay.setData (REMOVE_IDLE_PROC_KEY, null);", "+\tOS.gtk_widget_destroy (handle);", "+\treturn data;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "849e93b008a6ab0aedd903a41b55a729", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "b9f7831e7bdf04474ffdab87efb437511a67f97b", "commitAfterChange": "8de1ac9db91bb43b6bd0099ed55c1ebbf15558ad", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  \tlong getControlHandle ()", "signatureAfterChange": "  \tlong getControlHandle ()", "diff": ["-\t\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0) ? OS.gtk_widget_get_visible (widget) : OS.GTK_WIDGET_VISIBLE (widget)) {", "+\t\t\t\t\tif (OS.gtk_widget_get_visible (widget)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd1e48ea3d3d2579304004113718f1fc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "b9f7831e7bdf04474ffdab87efb437511a67f97b", "commitAfterChange": "8de1ac9db91bb43b6bd0099ed55c1ebbf15558ad", "methodNumberBeforeChange": 164, "methodNumberAfterChange": 162, "signatureBeforeChange": "  long gtk_widget_get_window (long widget)", "signatureAfterChange": "  long gtk_widget_get_window (long widget)", "diff": ["-\tif (OS.GTK_VERSION >= OS.VERSION(2, 14, 0)){", "-\t\tif (OS.GTK3) {", "-\t\t\tOS.gtk_widget_realize(widget);", "-\t\t}", "-\t\treturn OS.gtk_widget_get_window (widget);", "-\t} else {", "-\t\treturn OS.GTK_WIDGET_WINDOW (widget);", "+\tif (OS.GTK3) {", "+\t\tOS.gtk_widget_realize(widget);", "+\treturn OS.gtk_widget_get_window (widget);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffb44c07fbe0cb6d0dad0e7821c32aef", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TrayItem.java", "commitBeforeChange": "6d2109680e67f01ec005aa6e7ba9c30428f9e77a", "commitAfterChange": "dd2aca966bc039ce9a2eb77aaa5738d3e28bb872", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public boolean getVisible ()", "signatureAfterChange": " public boolean getVisible ()", "diff": ["-\tif (OS.GTK_VERSION >= OS.VERSION (2, 10, 0)) {", "-\t\treturn OS.gtk_status_icon_get_visible (handle);", "-\t}", "-\treturn gtk_widget_get_visible (handle);", "+\treturn OS.gtk_status_icon_get_visible (handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a4eb83720bf18e11395e010021a323c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "a3e032800e98721779dad6898ea6e135501045b9", "commitAfterChange": "801ec1483559446c0d86f80fed29f2453a706def", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["-\t\tif ((style & SWT.WRAP) != 0) OS.gtk_text_view_set_wrap_mode (handle, OS.GTK_VERSION < OS.VERSION (2, 4, 0) ? OS.GTK_WRAP_WORD : OS.GTK_WRAP_WORD_CHAR);", "+\t\tif ((style & SWT.WRAP) != 0) OS.gtk_text_view_set_wrap_mode (handle, OS.GTK_WRAP_WORD_CHAR);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3a475e2a73574a021248276d73e4afe", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "ce15da912006c0de09dc46b1a9f9459d29684102", "commitAfterChange": "4d4bc2b759bd20e7d2c309aae1e713865c975c25", "methodNumberBeforeChange": 238, "methodNumberAfterChange": 238, "signatureBeforeChange": "  void setToolTipText (Shell shell, String newString)", "signatureAfterChange": "  void setToolTipText (Shell shell, String newString)", "diff": ["-\tif (OS.GTK_VERSION >= OS.VERSION (2, 12, 0)) {", "-\t\t/*", "-\t\t* Feature in GTK.  In order to prevent children widgets", "-\t\t* from inheriting their parent's tooltip, the tooltip is", "-\t\t* a set on a shell only. In order to force the shell tooltip", "-\t\t* to update when a new tip string is set, the existing string", "-\t\t* in the tooltip is set to null, followed by running a query.", "-\t\t* The real tip text can then be set.", "-\t\t*", "-\t\t* Note that this will only run if the control for which the", "-\t\t* tooltip is being set is the current control (i.e. the control", "-\t\t* under the pointer).", "-\t\t*/", "-\t\tif (display.currentControl == this) {", "-\t\t\tshell.setToolTipText (shell.handle, eventHandle (), newString);", "-\t\t}", "-\t} else {", "-\t\tshell.setToolTipText (eventHandle (), newString);", "+\t/*", "+\t* Feature in GTK.  In order to prevent children widgets", "+\t* from inheriting their parent's tooltip, the tooltip is", "+\t* a set on a shell only. In order to force the shell tooltip", "+\t* to update when a new tip string is set, the existing string", "+\t* in the tooltip is set to null, followed by running a query.", "+\t* The real tip text can then be set.", "+\t*", "+\t* Note that this will only run if the control for which the", "+\t* tooltip is being set is the current control (i.e. the control", "+\t* under the pointer).", "+\t*/", "+\tif (display.currentControl == this) {", "+\t\tshell.setToolTipText (shell.handle, eventHandle (), newString);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c08257716d0674b45e5f11aeb9b6144a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "8330b5b17673c5c3687cc521003ddb4a144d254b", "commitAfterChange": "f40750233066b44e4aac87c783ff20cbb9938761", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  void gtk_adjustment_get (long hAdjustment, GtkAdjustment adjustment)", "signatureAfterChange": "  void gtk_adjustment_get (long hAdjustment, GtkAdjustment adjustment)", "diff": ["-\tif (OS.GTK_VERSION >= OS.VERSION (2, 14, 0)) {", "-\t\tadjustment.lower = OS.gtk_adjustment_get_lower (hAdjustment);", "-\t\tadjustment.upper = OS.gtk_adjustment_get_upper (hAdjustment);", "-\t\tadjustment.page_increment = OS.gtk_adjustment_get_page_increment (hAdjustment);", "-\t\tadjustment.step_increment = OS.gtk_adjustment_get_step_increment (hAdjustment);", "-\t\tadjustment.page_size = OS.gtk_adjustment_get_page_size (hAdjustment);", "-\t\tadjustment.value = OS.gtk_adjustment_get_value (hAdjustment);", "-\t} else {", "-\t\tOS.memmove(adjustment, hAdjustment);", "-\t}", "-}", "+\tadjustment.lower = OS.gtk_adjustment_get_lower (hAdjustment);", "+\tadjustment.upper = OS.gtk_adjustment_get_upper (hAdjustment);", "+\tadjustment.page_increment = OS.gtk_adjustment_get_page_increment (hAdjustment);", "+\tadjustment.step_increment = OS.gtk_adjustment_get_step_increment (hAdjustment);", "+\tadjustment.page_size = OS.gtk_adjustment_get_page_size (hAdjustment);", "+\tadjustment.value = OS.gtk_adjustment_get_value (hAdjustment);"]}], "num": 47382}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6fb7bf522f17a389067a43ace0c60a3c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ca77ef2976be5b6f1192f14f8b5fa1d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "953e10e0355d3dc7d5822c7f864020f36774c727", "commitAfterChange": "c3476e9f1d3f3564f30bf12aa100bab984f287da", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public FontData open ()", "signatureAfterChange": " public FontData open ()", "diff": ["-\tOS.FPShowHideFontPanel ();\t", "+\t/*", "+\t* Feature in the Macintosh.  The Fonts window is not modal and it cannot", "+\t* be accessed through direct API.  The fix is to figure out the Fonts", "+\t* window by checking all available windows and set its modality", "+\t* explicitily.", "+\t*/", "+\tint count = 0;", "+\tint window = OS.GetPreviousWindow (0);", "+\twhile (window != 0) {", "+\t\tcount++;", "+\t\twindow = OS.GetPreviousWindow (window);", "+\t}", "+\tint [] windows = new int [count];", "+\tboolean[] visible = new boolean [count];", "+\tcount = 0;", "+\twindow = OS.GetPreviousWindow (0);", "+\twhile (window != 0) {", "+\t\twindows [count] = window;", "+\t\tvisible [count] = OS.IsWindowVisible (window);", "+\t\tcount++;", "+\t\twindow = OS.GetPreviousWindow (window);", "+\t}", "+\tOS.FPShowHideFontPanel ();", "+\tint fontsWindow = 0;", "+\twindow = OS.GetPreviousWindow (0);", "+\twhile (window != 0 && fontsWindow == 0) {", "+\t\tif (OS.IsWindowVisible (window)) {", "+\t\t\tboolean found = false;", "+\t\t\tfor (int i = 0; i < windows.length; i++) {", "+\t\t\t\tif (windows [i] == window) {", "+\t\t\t\t\tfound = true;", "+\t\t\t\t\tif (!visible [i]) {", "+\t\t\t\t\t\tfontsWindow = window;", "+\t\t\t\t\t\tbreak;\t\t\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (!found) {", "+\t\t\t\tfontsWindow = window;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\twindow = OS.GetPreviousWindow (window);", "+\t}", "+\tif (fontsWindow != 0) {", "+\t\tint inModalKind = OS.kWindowModalityNone;", "+\t\tif ((style & SWT.PRIMARY_MODAL) != 0) inModalKind = OS.kWindowModalityWindowModal;", "+\t\tif ((style & SWT.APPLICATION_MODAL) != 0) inModalKind = OS.kWindowModalityAppModal;", "+\t\tif ((style & SWT.SYSTEM_MODAL) != 0) inModalKind = OS.kWindowModalitySystemModal;", "+\t\tif (inModalKind != OS.kWindowModalityNone) {", "+\t\t\tint inUnavailableWindow = 0;", "+\t\t\tif (parent != null) inUnavailableWindow = OS.GetControlOwner (parent.handle);", "+\t\t\tOS.SetWindowModality (fontsWindow, inModalKind, inUnavailableWindow);", "+\t\t\tOS.SelectWindow (fontsWindow);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e5b204aa61826a88974e7c52add1fab", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGeneratorUI.java", "commitBeforeChange": "ebac5ac4f54306fed9009986f7bcaeafd42136d7", "commitAfterChange": "394b59ba7f80a17d87cb429672cd3e14536c086a", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t \tvoid searchFor(String name)", "signatureAfterChange": " \tvoid searchFor(String name)", "diff": ["+\tArrayList flatNodes;", "-", "+\t\tTreeItem[] selection = nodesTree.getSelection();", "+\t\tNode node = null;", "+\t\tif (selection.length != 0) {", "+\t\t\tif (selection[0].getData() instanceof Node) {", "+\t\t\t\tnode = (Node)selection[0].getData();", "+\t\t\t} else {", "+\t\t\t\tif (selection[0].getItemCount() > 0 && selection[0].getItem(0).getData() instanceof Node) {", "+\t\t\t\t\tnode = (Node)selection[0].getItem(0).getData();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tDocument[] documents = gen.getDocuments();", "+\t\tif (node == null && documents.length > 0) node = gen.getDocuments()[0];", "+\t\tif (flatNodes == null) {", "+\t\t\tflatNodes = new ArrayList();", "+\t\t\tfor (int i = 0; i < documents.length; i++) {", "+\t\t\t\taddNodes(documents[i], flatNodes);", "+\t\t\t}", "+\t\t}", "+\t\tint index = 0;", "+\t\twhile (flatNodes.get(index++) != node);\t\t", "+\t\tint start = index;", "+\t\twhile (index < flatNodes.size()) {", "+\t\t\tNode child = (Node)flatNodes.get(index);", "+\t\t\tNode attribName = gen.getIDAttribute(child);", "+\t\t\tif (attribName != null && attribName.getNodeValue().matches(name)) {", "+\t\t\t\tselectNode(child);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tindex++;", "+\t\t}", "+\t\tindex = 0;", "+\t\twhile (index < start) {", "+\t\t\tNode child = (Node)flatNodes.get(index);", "+\t\t\tNode attribName = gen.getIDAttribute(child);", "+\t\t\tif (attribName != null && attribName.getNodeValue().matches(name)) {", "+\t\t\t\tselectNode(child);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tindex++;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d025daa53da2ab93380d8b02970fde8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "6de31d3123a8a42cd97dc6a937874bae99bc6464", "commitAfterChange": "171babc134a24ff1a3b09c194ff4f1b494378665", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \r int activate (int widget, int client, int call)", "signatureAfterChange": "\r void extractValues()", "diff": ["-int activate (int widget, int client, int call) {\r", "-\tcancel = client == OS.XmDIALOG_CANCEL_BUTTON;\r", "+void extractValues() {\r", "+\tfilterPath = fullPath = \"\";\r", "+\tint [] argList2 = {OS.XmNdirectory, 0, OS.XmNdirSpec, 0};\r", "+\tOS.XtGetValues (dialog, argList2, argList2.length / 2);\r", "+\t\r", "+\tint xmString3 = argList2 [1];\r", "+\tint ptr = OS.XmStringUnparse (\r", "+\t\txmString3,\r", "+\t\tnull,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tnull,\r", "+\t\t0,\r", "+\t\tOS.XmOUTPUT_ALL);\r", "+\tif (ptr != 0) {\r", "+\t\tint length = OS.strlen (ptr);\r", "+\t\tbyte [] buffer = new byte [length];\r", "+\t\tOS.memmove (buffer, ptr, length);\r", "+\t\tOS.XtFree (ptr);\r", "+\t\t/* Use the character encoding for the default locale */\r", "+\t\tfilterPath = new String (Converter.mbcsToWcs (null, buffer));\r", "+\t}\r", "+\tOS.XmStringFree (xmString3);\r", "+\t\r", "+\tint xmString4 = argList2 [3];\r", "+\tptr = OS.XmStringUnparse (\r", "+\t\txmString4,\r", "+\t\tnull,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tnull,\r", "+\t\t0,\r", "+\t\tOS.XmOUTPUT_ALL);\r", "+\tif (ptr != 0) {\r", "+\t\tint length = OS.strlen (ptr);\r", "+\t\tbyte [] buffer = new byte [length];\r", "+\t\tOS.memmove (buffer, ptr, length);\r", "+\t\tOS.XtFree (ptr);\r", "+\t\t/* Use the character encoding for the default locale */\r", "+\t\tfullPath = new String (Converter.mbcsToWcs (null, buffer));\r", "+\t}\r", "+\tOS.XmStringFree (xmString4);\r", "+\t\r", "+\tint length = filterPath.length ();\r", "+\tif (length != 0 && filterPath.charAt (length - 1) == '/') {\r", "+\t\tfilterPath = filterPath.substring (0, length - 1);\r", "+\t\tint index = fullPath.lastIndexOf ('/');\r", "+\t\tfileName = fullPath.substring (index + 1, fullPath.length ());\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c787fd9b364ff2e40c15c6e106685ac3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/GridLayout.java", "commitBeforeChange": "d68f2e34d91d2ae1a99b0c89e4caa148a068c2e9", "commitAfterChange": "ef6bac7bddd91ebd2f8fa756a2aae2c03abe06a0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  Point layout (Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)", "signatureAfterChange": "  Point layout (Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)", "diff": ["+\t/* Wrapping */", "+\tif (move) {", "+\t\tfor (int j=0; j<columnCount; j++) {", "+\t\t\tfor (int i=0; i<rowCount; i++) {", "+\t\t\t\tGridData data = getData (grid, i, j, rowCount, columnCount, false);", "+\t\t\t\tif (data != null) {", "+\t\t\t\t\tif (data.heightHint == SWT.DEFAULT) {", "+\t\t\t\t\t\tControl child = grid [i][j];", "+\t\t\t\t\t\t//TEMPORARY CODE", "+\t\t\t\t\t\tif ((child.getStyle () & SWT.WRAP) != 0) {", "+\t\t\t\t\t\t\tint hSpan = Math.max (1, Math.min (data.horizontalSpan, columnCount));", "+\t\t\t\t\t\t\tint currentWidth = 0;", "+\t\t\t\t\t\t\tfor (int k=0; k<hSpan; k++) {", "+\t\t\t\t\t\t\t\tcurrentWidth += widths [j-k];", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tcurrentWidth += (hSpan - 1) * horizontalSpacing - data.horizontalIndent;", "+\t\t\t\t\t\t\tif ((currentWidth != data.cacheWidth && data.horizontalAlignment == SWT.FILL) ||", "+\t\t\t\t\t\t\t\t(data.cacheWidth > currentWidth)) { ", "+\t\t\t\t\t\t\t\tint trim = 0;", "+\t\t\t\t\t\t\t\tif (child instanceof Scrollable) {", "+\t\t\t\t\t\t\t\t\tRectangle rect = ((Scrollable) child).computeTrim (0, 0, 0, 0);", "+\t\t\t\t\t\t\t\t\ttrim = rect.width;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\ttrim = child.getBorderWidth () * 2;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcurrentWidth = Math.max (0, currentWidth - trim);", "+\t\t\t\t\t\t\t\tPoint size = child.computeSize (currentWidth, data.heightHint, true);", "+\t\t\t\t\t\t\t\tdata.cacheWidth = size.x;", "+\t\t\t\t\t\t\t\tdata.cacheHeight = size.y;", "+\t\t\t\t\t\t\t\tdata.flushCache = true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5b2f4994868fb2f0a6f040276747c41", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGeneratorUI.java", "commitBeforeChange": "8ed739aeb6bdf363f7b0e5c8d1e2c8f2b47241eb", "commitAfterChange": "37dd049635a9e27d1a8ac8a9fdb6deee1a837896", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tString getKey (Node node)", "signatureAfterChange": " \t \tvoid buildExtrasNode(Document document, Node parent, TreeItem item, int level)", "diff": ["+\t", "+\tvoid buildExtrasNode(Document document, Node parent, TreeItem item, int level) {", "+\t\tTreeItem[] items = item.getItems();", "+\t\tif (item.getData() instanceof Node) {", "+\t\t\tTreeColumn[] columns = item.getParent().getColumns();", "+\t\t\tNode node = (Node)item.getData();", "+\t\t\tString nodeName = node.getNodeName();", "+\t\t\tNode nameAttrib = gen.getNameAttribute(node);", "+\t\t\tElement newNode = document.createElement(nodeName);", "+\t\t\tif (nameAttrib != null) {", "+\t\t\t\tAttr attr = document.createAttribute(nameAttrib.getNodeName());", "+\t\t\t\tattr.setNodeValue(nameAttrib.getNodeValue());", "+\t\t\t\tnewNode.setAttributeNode(attr);", "+\t\t\t}", "+\t\t\tif (item.getChecked()) {", "+\t\t\t\tAttr attr = document.createAttribute(\"swt_gen\");", "+\t\t\t\tattr.setNodeValue(\"true\");", "+\t\t\t\tnewNode.setAttributeNode(attr);", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < columns.length; i++) {", "+\t\t\t\tString attrName = columns[i].getText();", "+\t\t\t\tif (attrName.startsWith(\"swt_\")) {", "+\t\t\t\t\tString value = item.getText(i);", "+\t\t\t\t\tif (value.length() != 0) {", "+\t\t\t\t\t\tAttr attr = document.createAttribute(attrName);", "+\t\t\t\t\t\tattr.setNodeValue(value);", "+\t\t\t\t\t\tnewNode.setAttributeNode(attr);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tparent.appendChild(newNode);", "+\t\t\tparent = newNode;", "+\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\tbuildExtrasNode(document, parent, items[i], level + 1);", "+\t\t}", "+\t}", "-\tString getKey (Node node) {", "-\t\tStringBuffer buffer = new StringBuffer();", "-\t\twhile (node != null) {", "-\t\t\tif (buffer.length() > 0) buffer.append(\"_\");", "-\t\t\tString name = node.getNodeName();", "-\t\t\tStringBuffer key = new StringBuffer(name);", "-\t\t\tNamedNodeMap attributes = node.getAttributes();", "-\t\t\tNode nameAttrib = getNameAttribute(attributes);", "-\t\t\tif (nameAttrib != null) {", "-\t\t\t\tkey.append(\"-\");", "-\t\t\t\tkey.append(nameAttrib.getNodeValue());", "-\t\t\t}", "-\t\t\tbuffer.append(key.reverse());", "-\t\t\tnode = node.getParentNode();", "-\t\t}", "-\t\tbuffer.reverse();", "-\t\treturn buffer.toString();", "-\t}"]}], "num": 22954}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0c497b2d6a191ae8474bdb56cf15eec", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09287cb065089a0968f5f670d52d3c9f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/NativesGenerator.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 22, "signatureBeforeChange": "  void generateFunctionBody(Method method, MethodData methodData, String function, Class[] paramTypes, Class returnType)", "signatureAfterChange": "  void generateFunctionBody(JNIMethod method, String function, String function64, JNIParameter[] params, JNIType returnType, JNIType returnType64)", "diff": ["-void generateFunctionBody(Method method, MethodData methodData, String function, Class[] paramTypes, Class returnType) {", "+void generateFunctionBody(JNIMethod method, String function, String function64, JNIParameter[] params, JNIType returnType, JNIType returnType64) {", "-\tboolean isMemove = (name.equals(\"memmove\") || name.equals(\"MoveMemory\")) && paramTypes.length == 2 && returnType == Void.TYPE;", "+\tboolean isMemove = (name.equals(\"memmove\") || name.equals(\"MoveMemory\")) && params.length == 2 && returnType.isType(\"void\");", "-\t\tgenerateMemmove(method, function, paramTypes);", "+\t\tgenerateMemmove(method, function, function64, params);", "-\t\tboolean needsReturn = generateLocalVars(method, paramTypes, returnType);", "-\t\tgenerateEnterMacro(method, function);", "-\t\tboolean genFailTag = generateGetters(method, paramTypes);", "-\t\tif (methodData.getFlag(FLAG_DYNAMIC)) {", "-\t\t\tgenerateDynamicFunctionCall(method, methodData, paramTypes, returnType, needsReturn);", "+\t\tboolean needsReturn = generateLocalVars(method, params, returnType, returnType64);", "+\t\tgenerateEnterExitMacro(method, function, function64, true);", "+\t\tboolean genFailTag = generateGetters(method, params);", "+\t\tif (method.getFlag(FLAG_DYNAMIC)) {", "+\t\t\tgenerateDynamicFunctionCall(method, params, returnType, returnType64, needsReturn);", "-\t\t\tgenerateFunctionCall(method, methodData, paramTypes, returnType, needsReturn);", "+\t\t\tgenerateFunctionCall(method, params, returnType, returnType64, needsReturn);", "-\t\tgenerateSetters(method, paramTypes);", "-\t\tgenerateExitMacro(method, function);", "+\t\tgenerateSetters(method, params);", "+\t\tgenerateEnterExitMacro(method, function, function64, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e092dbebef21e1b38e89c223dd5aed0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/NativesGenerator.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": "  void generateFunctionPrototype(Method method, String function, Class[] paramTypes, Class returnType, boolean singleLine)", "signatureAfterChange": "  void generateFunctionPrototype(JNIMethod method, String function, JNIParameter[] params, JNIType returnType, JNIType returnType64, boolean singleLine)", "diff": ["-void generateFunctionPrototype(Method method, String function, Class[] paramTypes, Class returnType, boolean singleLine) {", "+void generateFunctionPrototype(JNIMethod method, String function, JNIParameter[] params, JNIType returnType, JNIType returnType64, boolean singleLine) {", "-\toutput(getTypeSignature2(returnType));", "+\toutput(returnType.getTypeSignature2(!returnType.equals(returnType64)));", "-\toutput(getClassName(method.getDeclaringClass()));", "+\toutput(method.getDeclaringClass().getSimpleName());", "-\tfor (int i = 0; i < paramTypes.length; i++) {", "-\t\tClass paramType = paramTypes[i];", "+\tfor (int i = 0; i < params.length; i++) {", "-\t\toutput(getTypeSignature2(paramType));", "+\t\tJNIType paramType = params[i].getType(), paramType64 = params[i].getType64();", "+\t\toutput(paramType.getTypeSignature2(!paramType.equals(paramType64)));"]}], "num": 45204}
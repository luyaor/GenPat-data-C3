{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0dc94ac60e5f501434177d644247bf5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a127637346e49dbda6dd9f3f8a340f7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "60a9b0215b046632b51b65b9dcf0569516e0686e", "commitAfterChange": "610b674161bbe6c03029856ff3ee4570430b9973", "methodNumberBeforeChange": 188, "methodNumberAfterChange": 191, "signatureBeforeChange": " void internalRedrawRange(int start, int length, boolean clearBackground)", "signatureAfterChange": " void internalRedrawRange(int start, int length, boolean clearBackground)", "diff": ["-\tint offsetInFirstLine;", "-\tint partialTopIndex = getLineIndex(0);", "+\tint partialTopIndex = getPartialTopIndex();", "+\tint offsetInFirstLine;", "-\tredrawLines(firstLine, offsetInFirstLine, lastLine, end, clearBackground);", "+\t\t", "+\t// redraw the first line", "+\tString line = content.getLine(firstLine);", "+\tint lineOffset = content.getOffsetAtLine(firstLine);", "+\tboolean fullLineRedraw = (getStyle() & SWT.FULL_SELECTION) != 0 && lastLine > firstLine;", "+\tRectangle clientArea = getClientArea();", "+\tRectangle rect;", "+\tint lineLength = line.length(); ", "+\tif (lineLength > 0) {", "+\t\tTextLayout layout = renderer.getTextLayout(line, lineOffset);\t\t", "+\t\trect = layout.getBounds(offsetInFirstLine, end - lineOffset - 1);", "+\t\tlineLength = Math.max(0, layout.getLineOffsets()[layout.getLineIndex(offsetInFirstLine) + 1] - 1);", "+\t\trenderer.disposeTextLayout(layout);", "+\t} else {", "+\t\trect = new Rectangle(0, 0, renderer.getLineEndSpace(), lineHeight);", "+\t}", "+\t// if redraw range includes last character on the first line, ", "+\t// clear background to right widget border. fixes bug 19595.", "+\tif (clearBackground && end - lineOffset >= lineLength) {", "+\t\tfullLineRedraw = true;", "+\t}", "+\trect.x += leftMargin - horizontalScrollOffset;", "+\trect.y += getLinePixel(firstLine);", "+\tif (fullLineRedraw) rect.width = clientArea.width - leftMargin - rightMargin;\t", "+\tif (clearBackground) {", "+\t\tsuper.redraw(rect.x, rect.y, rect.width, rect.height, false);", "+\t} else {", "+\t\tdraw(rect.x, rect.y, rect.width, rect.height);", "+\t}", "-\t// redraw entire center lines if redraw range includes more than two lines", "-\tif (lastLine - firstLine > 1) {", "-\t\tRectangle clientArea = getClientArea();", "-\t\tint redrawY = getLinePixel(firstLine);", "-\t\tredrawY += lineCache.getLineHeight(firstLine);", "-\t\tint redrawStopY = getLinePixel(lastLine);\t", "-\t\tdraw(0, redrawY, clientArea.width, redrawStopY - redrawY, clearBackground);", "+\tint lineCount = lastLine - firstLine + 1;", "+\tif (lineCount > 1) {", "+\t\tint lastLineTop = getLinePixel(lastLine);", "+\t\t", "+\t\t// redraw center lines", "+\t\tif (lineCount > 2) {", "+\t\t\trect.y += rect.height;", "+\t\t\tif (clearBackground) {", "+\t\t\t\tsuper.redraw(0, rect.y, clientArea.width, lastLineTop - rect.y, false);", "+\t\t\t} else {", "+\t\t\t\tdraw(0, rect.y, clientArea.width, lastLineTop - rect.y);", "+\t\t\t}", "+\t\t}", "+", "+\t\t// redraw last line ", "+\t\tlineOffset = content.getOffsetAtLine(lastLine);", "+\t\tint offsetInLastLine = end - lineOffset;\t", "+\t\t// no redraw necessary if redraw offset is 0", "+\t\tif (offsetInLastLine > 0) {", "+\t\t\tline = content.getLine(lastLine);", "+\t\t\tlineLength = line.length();", "+\t\t\tif (lineLength > 0) {", "+\t\t\t\tTextLayout layout = renderer.getTextLayout(line, lineOffset);\t\t", "+\t\t\t\trect = layout.getBounds(0, offsetInLastLine - 1);", "+\t\t\t\trenderer.disposeTextLayout(layout);", "+\t\t\t} else {", "+\t\t\t\trect = new Rectangle(0, 0, renderer.getLineEndSpace(), lineHeight);", "+\t\t\t}", "+\t\t\t// if redraw range includes last character on the last line, ", "+\t\t\t// clear background to right widget border. fixes bug 19595.", "+\t\t\tif (clearBackground && offsetInLastLine >= lineLength) {", "+\t\t\t\tfullLineRedraw = true;", "+\t\t\t}", "+\t\t\trect.x += leftMargin - horizontalScrollOffset;", "+\t\t\trect.y += lastLineTop;", "+\t\t\tif (fullLineRedraw) rect.width = clientArea.width - leftMargin - rightMargin;", "+\t\t\tif (clearBackground) {", "+\t\t\t\tsuper.redraw(rect.x, rect.y, rect.width, rect.height, false);", "+\t\t\t} else {", "+\t\t\t\tdraw(rect.x, rect.y, rect.width, rect.height);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "731f37819bd36566c54116864c4f249c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 297, "signatureBeforeChange": "  \tStyleRange getStyleRangeAtOffset(int offset)", "signatureAfterChange": " void setStyleRanges(int start, int length, int[] ranges, StyleRange[] styles, boolean reset)", "diff": ["-\t */ ", "-\tStyleRange getStyleRangeAtOffset(int offset) {", "-\t\tif (styleCount == 0) return null;", "-\t\tPoint pt = getOverlappingStyles(offset, 1);", "-\t\tif (pt == null || pt.y == 0) return null;", "-\t\tStyleRange newStyle = (StyleRange)styles[pt.x].clone();", "-\t\tnewStyle.start = offset;", "-\t\tnewStyle.length = 1;", "-\t\treturn newStyle;", "-\t}", "+}", "+void setStyleRanges(int start, int length, int[] ranges, StyleRange[] styles, boolean reset) {", "+\tint charCount = content.getCharCount();", "+\tint end = start + length; // -1 TODO ?", "+\tif (start > end || start < 0) {", "+\t\tSWT.error(SWT.ERROR_INVALID_RANGE);", "+\t}", "+\tif (styles != null) {", "+\t\tif (end > charCount) {", "+\t\t\tSWT.error(SWT.ERROR_INVALID_RANGE);", "+\t\t}", "+\t\tif (ranges != null) {", "+\t\t\tif (ranges.length != styles.length << 1) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\t}", "+\t\tint lastOffset = 0;", "+\t\tboolean variableHeight = false; ", "+\t\tfor (int i = 0; i < styles.length; i ++) {", "+\t\t\tif (styles[i] == null) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\t\tint rangeStart, rangeLength;", "+\t\t\tif (ranges != null) {", "+\t\t\t\trangeStart = ranges[i << 1];", "+\t\t\t\trangeLength = ranges[(i << 1) + 1];", "+\t\t\t} else {", "+\t\t\t\trangeStart = styles[i].start;", "+\t\t\t\trangeLength = styles[i].length;", "+\t\t\t}", "+\t\t\tif (rangeLength <= 0) SWT.error(SWT.ERROR_INVALID_ARGUMENT); ", "+\t\t\tif (!(0 <= rangeStart && rangeStart + rangeLength <= charCount)) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\t\tif (lastOffset > rangeStart) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\t\tvariableHeight |= styles[i].isVariableHeight();", "+\t\t\tlastOffset = rangeStart + rangeLength;", "+\t\t}", "+\t\tif (variableHeight) {", "+\t\t\tsetVariableLineHeight();", "+\t\t\t//TODO Init idle ?", "+\t\t}", "+\t}", "+\tint rangeStart = start, rangeEnd = end;", "+\tif (styles != null && styles.length > 0) {", "+\t\tif (ranges != null) {", "+\t\t\trangeStart = ranges[0];", "+\t\t\trangeEnd = ranges[ranges.length - 2] + ranges[ranges.length - 1];", "+\t\t} else {", "+\t\t\trangeStart = styles[0].start;", "+\t\t\trangeEnd = styles[styles.length - 1].start + styles[styles.length - 1].length;", "+\t\t}", "+\t}", "+\tint lastLineBottom = 0;", "+\tif (!isFixedLineHeight()) {", "+\t\tint lineEnd = content.getLineAtOffset(Math.max(end, rangeEnd));", "+\t\tlastLineBottom = getLinePixel(lineEnd + 1);", "+\t}", "+\tif (reset) {", "+\t\trenderer.setStyleRanges(null, null);", "+\t} else {", "+\t\trenderer.updateRanges(start, length, length);", "+\t}", "+\tif (styles != null && styles.length > 0) {", "+\t\trenderer.setStyleRanges(ranges, styles);", "+\t}", "+\tif (reset) {", "+\t\tresetCache(0, content.getLineCount());", "+\t\tsuper.redraw();", "+\t} else {", "+\t\tint lineStart = content.getLineAtOffset(Math.min(start, rangeStart));", "+\t\tint lineEnd = content.getLineAtOffset(Math.max(end, rangeEnd));", "+\t\tresetCache(lineStart, lineEnd - lineStart + 1);", "+\t\tint partialTopIndex = getPartialTopIndex();", "+\t\tint partialBottomIndex = getPartialBottomIndex();", "+\t\tif (!(lineStart > partialBottomIndex || lineEnd < partialTopIndex)) {", "+\t\t\tRectangle rect = getClientArea();", "+\t\t\tif (partialTopIndex <= lineStart && lineStart <= partialBottomIndex) {", "+\t\t\t\tint lineTop = Math.max(rect.y, getLinePixel(lineStart));", "+\t\t\t\trect.y = lineTop;", "+\t\t\t\trect.height -= lineTop;", "+\t\t\t} ", "+\t\t\tif (partialTopIndex <= lineEnd && lineEnd <= partialBottomIndex) {", "+\t\t\t\tint newLastLineBottom = getLinePixel(lineEnd + 1);", "+\t\t\t\tif (!isFixedLineHeight() && lastLineBottom != newLastLineBottom) {", "+\t\t\t\t\t//TODO fails if margin != 0", "+\t\t\t\t\tscroll(0, newLastLineBottom, 0, lastLineBottom, rect.width, rect.height - newLastLineBottom, true);", "+\t\t\t\t}", "+\t\t\t\trect.height = newLastLineBottom - rect.y;", "+\t\t\t}", "+\t\t\tsuper.redraw(rect.x, rect.y, rect.width, rect.height, false);\t\t", "+\t\t}", "+\t}"]}], "num": 1839}
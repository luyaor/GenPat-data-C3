{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "24faf99a7640995c97f298d39b74505d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8e3380ef79fbf08ffc7ff1e7e4b915b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "commitAfterChange": "bbeab947327689cb203638e742e58f555e6c1b64", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 60, "signatureBeforeChange": " private void onMouseMove(Event event)", "signatureAfterChange": " void onMouse(Event event)", "diff": ["+}", "+void onMouse(Event event) {", "+\tint x = event.x, y = event.y;", "+\tswitch (event.type) {", "+\t\tcase SWT.MouseExit: {", "+\t\t\tif (minImageState != NORMAL) {", "+\t\t\t\tminImageState = NORMAL;", "+\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "+\t\t\t\tupdate();", "+\t\t\t}", "+\t\t\tif (maxImageState != NORMAL) {", "+\t\t\t\tmaxImageState = NORMAL;", "+\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "+\t\t\t\tupdate();", "+\t\t\t}", "+\t\t\tif (chevronImageState != NORMAL) {", "+\t\t\t\tchevronImageState = NORMAL;", "+\t\t\t\tredraw(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height, false);", "+\t\t\t\tupdate();", "+\t\t\t}", "+\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\tCTabItem item = items[i];", "+\t\t\t\tif (i != selectedIndex && item.closeImageState != NONE) {", "+\t\t\t\t\titem.closeImageState = NONE;", "+\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "+\t\t\t\t\tupdate();", "+\t\t\t\t}", "+\t\t\t\tif (i == selectedIndex && item.closeImageState != NORMAL) {", "+\t\t\t\t\titem.closeImageState = NORMAL;", "+\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "+\t\t\t\t\tupdate();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}", "+\t\tcase SWT.MouseDown: {", "+\t\t\tif (minRect.contains(x, y)) {", "+\t\t\t\tif (event.button != 1) return;", "+\t\t\t\tminImageState = SELECTED;", "+\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "+\t\t\t\tupdate();", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tif (maxRect.contains(x, y)) {", "+\t\t\t\tif (event.button != 1) return;", "+\t\t\t\tmaxImageState = SELECTED;", "+\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "+\t\t\t\tupdate();", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tif (chevronRect.contains(x, y)) {", "+\t\t\t\tif (event.button != 1) return;", "+\t\t\t\tchevronImageState = SELECTED;", "+\t\t\t\tredraw(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height, false);", "+\t\t\t\tupdate();", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\tCTabItem item = items[i];", "+\t\t\t\tRectangle bounds = item.getBounds();", "+\t\t\t\tif (item.closeRect.contains(x,y)){", "+\t\t\t\t\tif (event.button != 1) return;", "+\t\t\t\t\titem.closeImageState = SELECTED;", "+\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "+\t\t\t\t\tupdate();", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\tif (bounds.contains(x, y)) {", "+\t\t\t\t\tif (!single && i != topTabIndex && bounds.x + bounds.width >= getRightItemEdge())return;", "+\t\t\t\t\tsetSelection(i, true);", "+\t\t\t\t\tsetFocus();", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}", "+\t\tcase SWT.MouseMove: {", "+\t\t\tboolean close = false, minimize = false, maximize = false, chevron = false;", "+\t\t\tif (minRect.contains(x, y)) {", "+\t\t\t\tminimize = true;", "+\t\t\t\tif (minImageState != HOT) {", "+\t\t\t\t\tminImageState = HOT;", "+\t\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "+\t\t\t\t\tupdate();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (maxRect.contains(x, y)) {", "+\t\t\t\tmaximize = true;", "+\t\t\t\tif (maxImageState != HOT) {", "+\t\t\t\t\tmaxImageState = HOT;", "+\t\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "+\t\t\t\t\tupdate();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (chevronRect.contains(x, y)) {", "+\t\t\t\tchevron = true;", "+\t\t\t\tif (chevronImageState != HOT) {", "+\t\t\t\t\tchevronImageState = HOT;", "+\t\t\t\t\tredraw(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height, false);", "+\t\t\t\t\tupdate();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (minImageState == HOT && !minimize) {", "+\t\t\t\tminImageState = NORMAL;", "+\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "+\t\t\t\tupdate();", "+\t\t\t}", "+\t\t\tif (maxImageState == HOT && !maximize) {", "+\t\t\t\tmaxImageState = NORMAL;", "+\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "+\t\t\t\tupdate();", "+\t\t\t}", "+\t\t\tif (chevronImageState == HOT && !chevron) {", "+\t\t\t\tchevronImageState = NORMAL;", "+\t\t\t\tredraw(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height, false);", "+\t\t\t\tupdate();", "+\t\t\t}", "+\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\tCTabItem item = items[i];", "+\t\t\t\tclose = false;", "+\t\t\t\tif (item.getBounds().contains(x, y)) {", "+\t\t\t\t\tclose = true;", "+\t\t\t\t\tif (item.closeRect.contains(x, y)) {", "+\t\t\t\t\t\tif (item.closeImageState != HOT) {", "+\t\t\t\t\t\t\titem.closeImageState = HOT;", "+\t\t\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "+\t\t\t\t\t\t\tupdate();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (item.closeImageState != NORMAL) {", "+\t\t\t\t\t\t\titem.closeImageState = NORMAL;", "+\t\t\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "+\t\t\t\t\t\t\tupdate();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} ", "+\t\t\t\tif (i != selectedIndex && item.closeImageState != NONE && !close) {", "+\t\t\t\t\titem.closeImageState = NONE;", "+\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "+\t\t\t\t\tupdate();", "+\t\t\t\t}", "+\t\t\t\tif (i == selectedIndex && item.closeImageState != NORMAL && !close) {", "+\t\t\t\t\titem.closeImageState = NORMAL;", "+\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "+\t\t\t\t\tupdate();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}", "+\t\tcase SWT.MouseUp: {", "+\t\t\tif (event.button != 1) return;", "+\t\t\tif (chevronRect.contains(x, y)) {", "+\t\t\t\tboolean selected = chevronImageState == SELECTED;", "+\t\t\t\tchevronImageState = HOT;", "+\t\t\t\tredraw(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height, false);", "+\t\t\t\tupdate();", "+\t\t\t\tif (!selected) return;", "+\t\t\t\tRectangle rect = new Rectangle(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height);", "+\t\t\t\tif (single && selectedIndex != -1){", "+\t\t\t\t\trect = items[selectedIndex].getBounds();\t", "+\t\t\t\t}", "+\t\t\t\trect.y += onBottom ? -HIGHLIGHT_HEADER :HIGHLIGHT_HEADER;", "+\t\t\t\tif (listListeners.length == 0) {", "+\t\t\t\t\tshowList(rect, single ? SWT.LEFT : SWT.RIGHT);", "+\t\t\t\t} else {", "+\t\t\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "+\t\t\t\t\te.widget = this;", "+\t\t\t\t\te.time = event.time;", "+\t\t\t\t\te.rect = rect;", "+\t\t\t\t\t", "+\t\t\t\t\tfor (int i = 0; i < listListeners.length; i++) {", "+\t\t\t\t\t\tlistListeners[i].showList(e);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tif (minRect.contains(x, y)) {", "+\t\t\t\tboolean selected = minImageState == SELECTED;", "+\t\t\t\tminImageState = HOT;", "+\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "+\t\t\t\tupdate();", "+\t\t\t\tif (!selected) return;", "+\t\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "+\t\t\t\te.widget = this;", "+\t\t\t\te.time = event.time;", "+\t\t\t\te.doit = true;", "+\t\t\t\tboolean restore = minimized;", "+\t\t\t\tfor (int i = 0; i < minmaxListeners.length; i++) {", "+\t\t\t\t\tif (restore) {", "+\t\t\t\t\t\tminmaxListeners[i].restore(e);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tminmaxListeners[i].minimize(e);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (e.doit && !isDisposed()) setMinimized(!restore);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tif (maxRect.contains(x, y)) {", "+\t\t\t\tboolean selected = maxImageState == SELECTED;", "+\t\t\t\tmaxImageState = HOT;", "+\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "+\t\t\t\tupdate();", "+\t\t\t\tif (!selected) return;", "+\t\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "+\t\t\t\te.widget = this;", "+\t\t\t\te.time = event.time;", "+\t\t\t\te.doit = true;", "+\t\t\t\tboolean restore = maximized;", "+\t\t\t\tfor (int i = 0; i < minmaxListeners.length; i++) {", "+\t\t\t\t\tif (restore) {", "+\t\t\t\t\t\tminmaxListeners[i].restore(e);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tminmaxListeners[i].maximize(e);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (e.doit && !isDisposed()) setMaximized(!restore);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\tCTabItem item = items[i];", "+\t\t\t\tif (item.closeRect.contains(x,y)){", "+\t\t\t\t\tboolean selected = item.closeImageState == SELECTED;", "+\t\t\t\t\titem.closeImageState = HOT;", "+\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "+\t\t\t\t\tupdate();", "+\t\t\t\t\tif (!selected) return;", "+\t\t\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "+\t\t\t\t\te.widget = this;", "+\t\t\t\t\te.time = event.time;", "+\t\t\t\t\te.item = item;", "+\t\t\t\t\te.doit = true;", "+\t\t\t\t\tfor (int j = 0; j < closeListeners.length; j++) {", "+\t\t\t\t\t\tcloseListeners[j].itemClosed(e);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (e.doit) item.dispose();", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}", "+\t}", "+}", "-private void onMouseMove(Event event) {", "-\tif (showToolTip) {", "-\t\tshowToolTip(event.x, event.y);", "-\t}", "-\t", "-\tif (!showClose) return;", "-\t", "-\tCTabItem item = null;", "-\tfor (int i=0; i<items.length; i++) {", "-\t\tRectangle rect = items[i].getBounds();", "-\t\tif (rect.contains(new Point(event.x, event.y))) {", "-\t\t\titem = items[i];", "-\t\t\tbreak;", "-\t\t}", "-\t}", "-\tif (item == inactiveItem) return;", "-\t", "-\tinactiveCloseBar.setVisible(false);", "-\tinactiveItem = null;", "-\t\t", "-\tif (item == null || item == getSelection()) return;", "-", "-\tint toolbarHeight = tabHeight - CTabItem.TOP_MARGIN - CTabItem.BOTTOM_MARGIN + 2; // +2 to ignore gap between focus rectangle", "-\tPoint size = inactiveCloseBar.computeSize(SWT.DEFAULT, toolbarHeight);", "-\tint x = item.x + item.width - size.x - 2; // -2 to not overlap focus rectangle and trim", "-\tint y = item.y + Math.max(0, (item.height - toolbarHeight)/2);", "-\tRectangle toolspace = getToolSpace();", "-\tPoint folderSize = getSize();", "-\tif ((toolspace.width == 0 || x < toolspace.x) && x + size.x < folderSize.x - borderRight) {", "-\t\tinactiveCloseBar.setBounds(x, y, size.x, toolbarHeight);", "-\t\tinactiveCloseBar.setVisible(true);", "-\t\tinactiveItem = item;", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "002c0a085a9fe1df68dadaa14493844c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "3b350dd4c4b9460951698e03648662ba16994245", "commitAfterChange": "21e23b791a319e5180c60f1da8d0340d3dcffe74", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 61, "signatureBeforeChange": " void onMouse(Event event)", "signatureAfterChange": " void onMouse(Event event)", "diff": ["-\t\t\tif (closeImageState != NORMAL) {", "-\t\t\t\tcloseImageState = NORMAL;", "-\t\t\t\tredraw(closeRect.x, closeRect.y, closeRect.width, closeRect.height, false);", "+\t\t\tif (minImageState != NORMAL) {", "+\t\t\t\tminImageState = NORMAL;", "+\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "+\t\t\t\tupdate();", "-\t\t\tif (expandImageState != NORMAL) {", "-\t\t\t\texpandImageState = NORMAL;", "-\t\t\t\tredraw(expandRect.x, expandRect.y, expandRect.width, expandRect.height, false);", "+\t\t\tif (maxImageState != NORMAL) {", "+\t\t\t\tmaxImageState = NORMAL;", "+\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "+\t\t\t\tupdate();", "+\t\t\t\tupdate();", "-\t\t\tif (showClose && !single) {", "-\t\t\t\tfor (int i=0; i<items.length; i++) {", "-\t\t\t\t\tCTabItem2 item = items[i];", "-\t\t\t\t\tif (i != selectedIndex && item.closeImageState != NONE) {", "-\t\t\t\t\t\titem.closeImageState = NONE;", "-\t\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (i == selectedIndex && item.closeImageState != NORMAL) {", "-\t\t\t\t\t\titem.closeImageState = NORMAL;", "-\t\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "-\t\t\t\t\t}", "+\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\tCTabItem2 item = items[i];", "+\t\t\t\tif (i != selectedIndex && item.closeImageState != NONE) {", "+\t\t\t\t\titem.closeImageState = NONE;", "+\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "+\t\t\t\t\tupdate();", "+\t\t\t\t}", "+\t\t\t\tif (i == selectedIndex && item.closeImageState != NORMAL) {", "+\t\t\t\t\titem.closeImageState = NORMAL;", "+\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "+\t\t\t\t\tupdate();", "-\t\t\tif (closeRect.contains(x, y)) {", "+\t\t\tif (minRect.contains(x, y)) {", "-\t\t\t\tcloseImageState = SELECTED;", "-\t\t\t\tredraw(closeRect.x, closeRect.y, closeRect.width, closeRect.height, false);", "+\t\t\t\tminImageState = SELECTED;", "+\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "-\t\t\t} ", "-\t\t\tif (expandRect.contains(x, y)) {", "+\t\t\t}", "+\t\t\tif (maxRect.contains(x, y)) {", "-\t\t\t\texpandImageState = SELECTED;", "-\t\t\t\tredraw(expandRect.x, expandRect.y, expandRect.width, expandRect.height, false);", "+\t\t\t\tmaxImageState = SELECTED;", "+\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "-\t\t\tboolean close = false, expand = false, chevron = false;", "-\t\t\tif (closeRect.contains(x, y)) {", "-\t\t\t\tclose = true;", "-\t\t\t\tif (closeImageState != HOT) {", "-\t\t\t\t\tcloseImageState = HOT;", "-\t\t\t\t\tredraw(closeRect.x, closeRect.y, closeRect.width, closeRect.height, false);", "+\t\t\tboolean close = false, minimize = false, maximize = false, chevron = false;", "+\t\t\tif (minRect.contains(x, y)) {", "+\t\t\t\tminimize = true;", "+\t\t\t\tif (minImageState != HOT) {", "+\t\t\t\t\tminImageState = HOT;", "+\t\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "+\t\t\t\t\tupdate();", "-\t\t\t} ", "-\t\t\tif (expandRect.contains(x, y)) {", "-\t\t\t\texpand = true;", "-\t\t\t\tif (expandImageState != HOT) {", "-\t\t\t\t\texpandImageState = HOT;", "-\t\t\t\t\tredraw(expandRect.x, expandRect.y, expandRect.width, expandRect.height, false);", "+\t\t\t}", "+\t\t\tif (maxRect.contains(x, y)) {", "+\t\t\t\tmaximize = true;", "+\t\t\t\tif (maxImageState != HOT) {", "+\t\t\t\t\tmaxImageState = HOT;", "+\t\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "+\t\t\t\t\tupdate();", "+\t\t\t\t\tupdate();", "-\t\t\tif (closeImageState == HOT && !close) {", "-\t\t\t\tcloseImageState = NORMAL;", "-\t\t\t\tredraw(closeRect.x, closeRect.y, closeRect.width, closeRect.height, false);", "+\t\t\tif (minImageState == HOT && !minimize) {", "+\t\t\t\tminImageState = NORMAL;", "+\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "+\t\t\t\tupdate();", "-\t\t\tif (expandImageState == HOT && !expand) {", "-\t\t\t\texpandImageState = NORMAL;", "-\t\t\t\tredraw(expandRect.x, expandRect.y, expandRect.width, expandRect.height, false);", "+\t\t\tif (maxImageState == HOT && !maximize) {", "+\t\t\t\tmaxImageState = NORMAL;", "+\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "+\t\t\t\tupdate();", "+\t\t\t\tupdate();", "-\t\t\tif (showClose && !single) {", "-\t\t\t\tfor (int i=0; i<items.length; i++) {", "-\t\t\t\t\tCTabItem2 item = items[i];", "-\t\t\t\t\tclose = false;", "-\t\t\t\t\tif (item.getBounds().contains(x, y)) {", "-\t\t\t\t\t\tclose = true;", "-\t\t\t\t\t\tif (item.closeRect.contains(x, y)) {", "-\t\t\t\t\t\t\tif (item.closeImageState != HOT) {", "-\t\t\t\t\t\t\t\titem.closeImageState = HOT;", "-\t\t\t\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif (item.closeImageState != NORMAL) {", "-\t\t\t\t\t\t\t\titem.closeImageState = NORMAL;", "-\t\t\t\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "-\t\t\t\t\t\t\t}", "+\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\tCTabItem2 item = items[i];", "+\t\t\t\tclose = false;", "+\t\t\t\tif (item.getBounds().contains(x, y)) {", "+\t\t\t\t\tclose = true;", "+\t\t\t\t\tif (item.closeRect.contains(x, y)) {", "+\t\t\t\t\t\tif (item.closeImageState != HOT) {", "+\t\t\t\t\t\t\titem.closeImageState = HOT;", "+\t\t\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "+\t\t\t\t\t\t\tupdate();", "-\t\t\t\t\t} ", "-\t\t\t\t\tif (i != selectedIndex && item.closeImageState != NONE && !close) {", "-\t\t\t\t\t\titem.closeImageState = NONE;", "-\t\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (item.closeImageState != NORMAL) {", "+\t\t\t\t\t\t\titem.closeImageState = NORMAL;", "+\t\t\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "+\t\t\t\t\t\t\tupdate();", "+\t\t\t\t\t\t}", "-\t\t\t\t\tif (i == selectedIndex && item.closeImageState != NORMAL && !close) {", "-\t\t\t\t\t\titem.closeImageState = NORMAL;", "-\t\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "-\t\t\t\t\t}", "+\t\t\t\t} ", "+\t\t\t\tif (i != selectedIndex && item.closeImageState != NONE && !close) {", "+\t\t\t\t\titem.closeImageState = NONE;", "+\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "+\t\t\t\t\tupdate();", "+\t\t\t\t}", "+\t\t\t\tif (i == selectedIndex && item.closeImageState != NORMAL && !close) {", "+\t\t\t\t\titem.closeImageState = NORMAL;", "+\t\t\t\t\tredraw(item.closeRect.x, item.closeRect.y, item.closeRect.width, item.closeRect.height, false);", "+\t\t\t\t\tupdate();", "-\t\t\tif (closeRect.contains(x, y)) {", "-\t\t\t\tcloseImageState = HOT;", "-\t\t\t\tredraw(closeRect.x, closeRect.y, closeRect.width, closeRect.height, false);", "-\t\t\t\tif (selectedIndex == -1) return;", "-\t\t\t\tCTabItem2 item = items[selectedIndex];", "-\t\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "-\t\t\t\te.widget = this;", "-\t\t\t\te.time = event.time;", "-\t\t\t\te.item = item;", "-\t\t\t\te.doit = true;", "-\t\t\t\tfor (int i = 0; i < closeListeners.length; i++) {", "-\t\t\t\t\tcloseListeners[i].itemClosed(e);", "-\t\t\t\t}", "-\t\t\t\tif (e.doit) item.dispose();", "-\t\t\t\treturn;", "-\t\t\t}", "+\t\t\t\tupdate();", "-\t\t\tif (expandRect.contains(x, y)) {", "-\t\t\t\texpandImageState = HOT;", "+\t\t\tif (minRect.contains(x, y)) {", "+\t\t\t\tminImageState = HOT;", "+\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "+\t\t\t\tupdate();", "-\t\t\t\tfor (int i = 0; i < expandListeners.length; i++) {", "-\t\t\t\t\tif (expanded) {", "-\t\t\t\t\t\texpandListeners[i].collapse(e);", "+\t\t\t\tboolean restore = minimized;", "+\t\t\t\tfor (int i = 0; i < minmaxListeners.length; i++) {", "+\t\t\t\t\tif (restore) {", "+\t\t\t\t\t\tminmaxListeners[i].restore(e);", "-\t\t\t\t\t\texpandListeners[i].expand(e);", "+\t\t\t\t\t\tminmaxListeners[i].minimize(e);", "-\t\t\t\t\texpanded = !expanded;", "+\t\t\t\t\tminimized = !restore;", "+\t\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "+\t\t\t\t\tupdate();", "-\t\t\t\tredraw(expandRect.x, expandRect.y, expandRect.width, expandRect.height, false);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tif (maxRect.contains(x, y)) {", "+\t\t\t\tmaxImageState = HOT;", "+\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "+\t\t\t\tupdate();", "+\t\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "+\t\t\t\te.widget = this;", "+\t\t\t\te.time = event.time;", "+\t\t\t\te.doit = true;", "+\t\t\t\tboolean restore = maximized;", "+\t\t\t\tfor (int i = 0; i < minmaxListeners.length; i++) {", "+\t\t\t\t\tif (restore) {", "+\t\t\t\t\t\tminmaxListeners[i].restore(e);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tminmaxListeners[i].maximize(e);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (e.doit) {", "+\t\t\t\t\tmaximized = !restore;", "+\t\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "+\t\t\t\t\tupdate();", "+\t\t\t\t}", "+\t\t\t\t\tupdate();"]}], "num": 22146}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "02515b782301f50efef79cb148244206", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d29247e4f4543253988a0da1564527eb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "81769f86af686a9108c70f5eccca90f204a41cef", "commitAfterChange": "2409e4895346facaeea6eeef6414188a3d1e2f65", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["-\tImageData data;", "+", "-\t\tdata = new ImageData(width, height, 32, palette, 4, srcData);", "+\t\tImageData data = new ImageData(width, height, 32, palette, 4, srcData);", "-\t} else {", "-\t\tint[] w = new int[1], h = new int[1];", "-\t \tOS.gdk_drawable_get_size(pixmap, w, h);", "-\t \tint width = w[0], height = h[0]; \t", "-\t \tint /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);", "-\t\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tint /*long*/ colormap = OS.gdk_colormap_get_system();", "-\t\tOS.gdk_pixbuf_get_from_drawable(pixbuf, pixmap, colormap, 0, 0, 0, 0, width, height);", "-\t\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "-\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "-\t\tbyte[] srcData = new byte[stride * height];", "-\t\tOS.memmove(srcData, pixels, srcData.length);", "-\t\tOS.g_object_unref(pixbuf);", "-\t", "-\t\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "-\t\tdata = new ImageData(width, height, 24, palette, 4, srcData);", "-\t\tdata.bytesPerLine = stride;", "-\t", "-\t\tif (transparentPixel == -1 && type == SWT.ICON && mask != 0) {", "-\t\t\t/* Get the icon mask data */", "-\t\t\tint /*long*/ gdkImagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);", "-\t\t\tif (gdkImagePtr == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\tGdkImage gdkImage = new GdkImage();", "-\t\t\tOS.memmove(gdkImage, gdkImagePtr);", "-\t\t\tbyte[] maskData = new byte[gdkImage.bpl * gdkImage.height];", "-\t\t\tOS.memmove(maskData, gdkImage.mem, maskData.length);", "-\t\t\tOS.g_object_unref(gdkImagePtr);", "-\t\t\tint maskPad;", "-\t\t\tfor (maskPad = 1; maskPad < 128; maskPad++) {", "-\t\t\t\tint bpl = (((width + 7) / 8) + (maskPad - 1)) / maskPad * maskPad;", "-\t\t\t\tif (gdkImage.bpl == bpl) break;", "-\t\t\t}", "-\t\t\t/* Make mask scanline pad equals to 2 */", "-\t\t\tdata.maskPad = 2;", "-\t\t\tmaskData = ImageData.convertPad(maskData, width, height, 1, maskPad, data.maskPad);", "-\t\t\t/* Bit swap the mask data if necessary */", "-\t\t\tif (gdkImage.byte_order == OS.GDK_LSB_FIRST) {", "-\t\t\t\tfor (int i = 0; i < maskData.length; i++) {", "-\t\t\t\t\tbyte b = maskData[i];", "-\t\t\t\t\tmaskData[i] = (byte)(((b & 0x01) << 7) | ((b & 0x02) << 5) | ", "-\t\t\t\t\t\t((b & 0x04) << 3) |\t((b & 0x08) << 1) | ((b & 0x10) >> 1) | ", "-\t\t\t\t\t\t((b & 0x20) >> 3) |\t((b & 0x40) >> 5) | ((b & 0x80) >> 7));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tdata.maskData = maskData;", "+\t\treturn data;", "+\t}", "+\tint[] w = new int[1], h = new int[1];", "+ \tOS.gdk_drawable_get_size(pixmap, w, h);", "+ \tint width = w[0], height = h[0]; \t", "+ \tint /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);", "+\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint /*long*/ colormap = OS.gdk_colormap_get_system();", "+\tOS.gdk_pixbuf_get_from_drawable(pixbuf, pixmap, colormap, 0, 0, 0, 0, width, height);", "+\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "+\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "+\tbyte[] srcData = new byte[stride * height];", "+\tOS.memmove(srcData, pixels, srcData.length);", "+\tOS.g_object_unref(pixbuf);", "+", "+\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "+\tImageData data = new ImageData(width, height, 24, palette, 4, srcData);", "+\tdata.bytesPerLine = stride;", "+", "+\tif (transparentPixel == -1 && type == SWT.ICON && mask != 0) {", "+\t\t/* Get the icon mask data */", "+\t\tint /*long*/ gdkImagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);", "+\t\tif (gdkImagePtr == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tGdkImage gdkImage = new GdkImage();", "+\t\tOS.memmove(gdkImage, gdkImagePtr);", "+\t\tbyte[] maskData = new byte[gdkImage.bpl * gdkImage.height];", "+\t\tOS.memmove(maskData, gdkImage.mem, maskData.length);", "+\t\tOS.g_object_unref(gdkImagePtr);", "+\t\tint maskPad;", "+\t\tfor (maskPad = 1; maskPad < 128; maskPad++) {", "+\t\t\tint bpl = (((width + 7) / 8) + (maskPad - 1)) / maskPad * maskPad;", "+\t\t\tif (gdkImage.bpl == bpl) break;", "-\t\tdata.transparentPixel = transparentPixel;", "-\t\tdata.alpha = alpha;", "-\t\tif (alpha == -1 && alphaData != null) {", "-\t\t\tdata.alphaData = new byte[alphaData.length];", "-\t\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);", "+\t\t/* Make mask scanline pad equals to 2 */", "+\t\tdata.maskPad = 2;", "+\t\tmaskData = ImageData.convertPad(maskData, width, height, 1, maskPad, data.maskPad);", "+\t\t/* Bit swap the mask data if necessary */", "+\t\tif (gdkImage.byte_order == OS.GDK_LSB_FIRST) {", "+\t\t\tfor (int i = 0; i < maskData.length; i++) {", "+\t\t\t\tbyte b = maskData[i];", "+\t\t\t\tmaskData[i] = (byte)(((b & 0x01) << 7) | ((b & 0x02) << 5) | ", "+\t\t\t\t\t((b & 0x04) << 3) |\t((b & 0x08) << 1) | ((b & 0x10) >> 1) | ", "+\t\t\t\t\t((b & 0x20) >> 3) |\t((b & 0x40) >> 5) | ((b & 0x80) >> 7));", "+\t\t\t}", "+\t\tdata.maskData = maskData;", "+\t}", "+\tdata.transparentPixel = transparentPixel;", "+\tdata.alpha = alpha;", "+\tif (alpha == -1 && alphaData != null) {", "+\t\tdata.alphaData = new byte[alphaData.length];", "+\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "872f9abe6ce9782d41c3548364343ba5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/PromptService2.java", "commitBeforeChange": "bca4f4e5b14d2f7f838d8ebce6fe0befab8bb099", "commitAfterChange": "775da6817f1330155074a54fdd00170b592382a6", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "  int Prompt (int aParent, int aDialogTitle, int aText, int aValue, int aCheckMsg, int aCheckState, int _retval)", "signatureAfterChange": "  int Prompt (int aParent, int aDialogTitle, int aText, int aValue, int aCheckMsg, int aCheckState, int _retval)", "diff": ["-\t\tint cnt, size;", "-\t\tint /*long*/ ptr;", "-\t\tchar[] buffer;", "-\t\tint /*long*/[] result2 = new int /*long*/[1];", "-\t\t\tcnt = valueLabel[0].length ();", "-\t\t\tbuffer = new char[cnt + 1];", "+\t\t\tint /*long*/[] result2 = new int /*long*/[1];", "+\t\t\tint rc = XPCOM.NS_GetServiceManager (result2);", "+\t\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\t\t\tif (result2[0] == 0) SWT.error (XPCOM.NS_NOINTERFACE);", "+", "+\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result2[0]);", "+\t\t\tresult2[0] = 0;", "+\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result2);", "+\t\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\t\t\tif (result2[0] == 0) SWT.error (XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\tserviceManager.Release ();", "+", "+\t\t\tnsIMemory memory = new nsIMemory (result2[0]);", "+\t\t\tresult2[0] = 0;", "+", "+\t\t\tint cnt = valueLabel[0].length ();", "+\t\t\tchar[] buffer = new char[cnt + 1];", "-\t\t\tsize = buffer.length * 2;", "-\t\t\tptr = C.malloc (size);", "+\t\t\tint size = buffer.length * 2;", "+\t\t\tint /*long*/ ptr = memory.Alloc (size);", "-\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result2);", "-\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "-\t\t\t\tif (result2[0] == 0) SWT.error (XPCOM.NS_NOINTERFACE);", "-\t\t\t", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result2[0]);", "-\t\t\t\tresult2[0] = 0;", "-\t\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "-\t\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result2);", "-\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "-\t\t\t\tif (result2[0] == 0) SWT.error (XPCOM.NS_NOINTERFACE);\t\t", "-\t\t\t\tserviceManager.Release ();", "-\t\t\t\t", "-\t\t\t\tnsIMemory memory = new nsIMemory (result2[0]);", "-\t\t\t\tresult2[0] = 0;", "-\t\t\t\tmemory.Release ();", "+\t\t\tmemory.Release ();"]}], "num": 25631}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3951b6199ebab9dd17bec69787d20d6f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0f59c853e23724b64dc71cc0ce6eacf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "467aee22b418ac24133c18dbea6a1b1798272234", "commitAfterChange": "59323150eb2e2d08c31aaf8e994356f4b08298fe", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  void redraw (int column, boolean drawText, boolean drawImage)", "signatureAfterChange": "  void redraw (int column, boolean drawText, boolean drawImage)", "diff": ["-\t\t\tif (drawText) rect.left |= OS.LVIR_LABEL;", "-\t\t\tif (drawImage) rect.left |= OS.LVIR_ICON;", "+\t\t\t\tif (drawText) rect.left |= OS.LVIR_LABEL;", "+\t\t\t\tif (drawImage) rect.left |= OS.LVIR_ICON;", "+\t\t\t\t/*", "+\t\t\t\t* Feature in Windows.  When LVM_GETSUBITEMRECT is called with", "+\t\t\t\t* LVIR_ICON and LVIR_LABEL instead of LIVR_BOUNDS and the item", "+\t\t\t\t* does not contain an image, LVM_GETSUBITEMRECT fails and returns", "+\t\t\t\t* an error code.  The fix is to use LVIR_BOUNDS instead.  Note", "+\t\t\t\t* that the MSDN says that LVIR_BOUNDS and LIVR_LABEL both return", "+\t\t\t\t* the bounds of the entire item, not just the label when used", "+\t\t\t\t* with LVM_GETSUBITEMRECT.  There is no API to get just the bounds", "+\t\t\t\t* of the label.", "+\t\t\t\t*/", "+\t\t\t\tif (drawText) {", "+\t\t\t\t\trect.left = OS.LVIR_BOUNDS;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (drawImage) rect.left = OS.LVIR_ICON;", "+\t\t\t\t}", "-\t\t\t\t\t\t\t* fix is to detect this case and avoid subtracting the image", "-\t\t\t\t\t\t\t* from the damage rectangle. ", "+\t\t\t\t\t\t\t* fix is to detect this case and avoid adjusting the rectangle. "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71891c0eeea7eb216a53ad4ad091a340", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "e494cafa53664960bae3771ecc9cc57f20b46dc2", "commitAfterChange": "f8aa4c0a9c753e8c5b40f8b00f8bb6d53f87813c", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " RECT getBounds (int index, boolean getText, boolean getImage, boolean fullText, boolean fullImage, boolean clip, int hDC)", "signatureAfterChange": " RECT getBounds (int index, boolean getText, boolean getImage, boolean fullText, boolean fullImage, boolean clip, int hDC)", "diff": ["-\t\t\t\tString string = index == 0 ? text : strings != null ? strings [index] : null;", "-\t\t\t\tif (string != null) {", "-\t\t\t\t\tRECT textRect = new RECT ();", "-\t\t\t\t\tTCHAR buffer = new TCHAR (parent.getCodePage (), string, false);", "-\t\t\t\t\tint flags = OS.DT_NOPREFIX | OS.DT_SINGLELINE | OS.DT_CALCRECT;", "-\t\t\t\t\tint hNewDC = hDC, hFont = 0;", "-\t\t\t\t\tif (hDC == 0) {", "-\t\t\t\t\t\thNewDC = OS.GetDC (hwnd);", "-\t\t\t\t\t\thFont = cellFont != null ? cellFont [index] : -1;", "-\t\t\t\t\t\tif (hFont == -1) hFont = font;", "-\t\t\t\t\t\tif (hFont == -1) hFont = OS.SendMessage (hwnd, OS.WM_GETFONT, 0, 0);", "-\t\t\t\t\t\thFont = OS.SelectObject (hNewDC, hFont);", "-\t\t\t\t\t}", "-\t\t\t\t\tOS.DrawText (hNewDC, buffer, buffer.length (), textRect, flags);", "-\t\t\t\t\tif (hDC == 0) {", "-\t\t\t\t\t\tOS.SelectObject (hNewDC, hFont);", "-\t\t\t\t\t\tOS.ReleaseDC (hwnd, hNewDC);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (getImage) {", "-\t\t\t\t\t\trect.right += textRect.right - textRect.left + Tree.INSET * 3;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\trect.left = rect.right + Tree.INSET;", "-\t\t\t\t\t\trect.right = rect.left + (textRect.right - textRect.left) + Tree.INSET;", "+\t\t\t\tif (fullText) {", "+\t\t\t\t\trect.left = rect.right + Tree.INSET;", "+\t\t\t\t\trect.right = headerRect.right;", "+\t\t\t\t} else {", "+\t\t\t\t\tString string = index == 0 ? text : strings != null ? strings [index] : null;", "+\t\t\t\t\tif (string != null) {", "+\t\t\t\t\t\tRECT textRect = new RECT ();", "+\t\t\t\t\t\tTCHAR buffer = new TCHAR (parent.getCodePage (), string, false);", "+\t\t\t\t\t\tint flags = OS.DT_NOPREFIX | OS.DT_SINGLELINE | OS.DT_CALCRECT;", "+\t\t\t\t\t\tint hNewDC = hDC, hFont = 0;", "+\t\t\t\t\t\tif (hDC == 0) {", "+\t\t\t\t\t\t\thNewDC = OS.GetDC (hwnd);", "+\t\t\t\t\t\t\thFont = cellFont != null ? cellFont [index] : -1;", "+\t\t\t\t\t\t\tif (hFont == -1) hFont = font;", "+\t\t\t\t\t\t\tif (hFont == -1) hFont = OS.SendMessage (hwnd, OS.WM_GETFONT, 0, 0);", "+\t\t\t\t\t\t\thFont = OS.SelectObject (hNewDC, hFont);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.DrawText (hNewDC, buffer, buffer.length (), textRect, flags);", "+\t\t\t\t\t\tif (hDC == 0) {", "+\t\t\t\t\t\t\tOS.SelectObject (hNewDC, hFont);", "+\t\t\t\t\t\t\tOS.ReleaseDC (hwnd, hNewDC);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (getImage) {", "+\t\t\t\t\t\t\trect.right += textRect.right - textRect.left + Tree.INSET * 3;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\trect.left = rect.right + Tree.INSET;", "+\t\t\t\t\t\t\trect.right = rect.left + (textRect.right - textRect.left) + Tree.INSET;", "+\t\t\t\t\t\t}"]}], "num": 59349}
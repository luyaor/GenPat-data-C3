{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5fc4142504630bd63bf4758b36c386fb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cd09783ed5e9f79f523ce093668a144", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/wpf/org/eclipse/swt/program/Program.java", "commitBeforeChange": "25e0a88282a8f52572829023c99494b77782afb9", "commitAfterChange": "4492e7490e450a65a8ceed26e7c2cb00d8b99b49", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  static Program getProgram (String key)", "signatureAfterChange": "  static Program getProgram (int key)", "diff": ["-static Program getProgram (String key) {", "+static Program getProgram (int key) {", "+\tint classesRoot = OS.Registry_ClassesRoot ();", "+\tint registryKey = OS.RegistryKey_OpenSubKey (classesRoot, key);", "+\tOS.GCHandle_Free (classesRoot);", "-\tString name = getKeyValue (key, false);", "-\tif (name == null || name.length () == 0) {", "-\t\tname = key;", "-\t}", "-", "+\tint name = getKeyValue (registryKey, false);", "+\tString programName = createJavaString (name == 0 ? key : name);", "+\tOS.GCHandle_Free (name);", "-\tString DEFAULT_COMMAND = \"\\\\shell\"; //$NON-NLS-1$", "-\tString defaultCommand = getKeyValue (key + DEFAULT_COMMAND, true);", "-\tif (defaultCommand == null || defaultCommand.length() == 0) defaultCommand = \"open\"; //$NON-NLS-1$", "-\tString COMMAND = \"\\\\shell\\\\\" + defaultCommand + \"\\\\command\"; //$NON-NLS-1$", "-\tString command = getKeyValue (key + COMMAND, true);", "-\tif (command == null || command.length () == 0) return null;", "-", "-\t/* Icon */", "-\tString DEFAULT_ICON = \"\\\\DefaultIcon\"; //$NON-NLS-1$", "-\tString iconName = getKeyValue (key + DEFAULT_ICON, true);", "-\tif (iconName == null) iconName = \"\"; //$NON-NLS-1$", "-", "+\tint shellCommand = createDotNetString (\"shell\");", "+\tint shellKey = OS.RegistryKey_OpenSubKey (registryKey, shellCommand);", "+\tOS.GCHandle_Free (shellCommand);", "+\tint command = 0;", "+\tif (shellKey != 0) {", "+\t\tcommand = getKeyValue (shellKey, true);", "+\t\tif (command == 0) {", "+\t\t\tint openCommand = createDotNetString (\"open\");", "+\t\t\tint openKey = OS.RegistryKey_OpenSubKey (shellKey, openCommand);", "+\t\t\tif (openKey != 0) {", "+\t\t\t\tint commandCommand = createDotNetString (\"command\");", "+\t\t\t\tint commandKey = OS.RegistryKey_OpenSubKey (openKey, commandCommand);", "+\t\t\t\tif (commandKey != 0) {", "+\t\t\t\t\tcommand = getKeyValue (commandKey, true);", "+\t\t\t\t\tOS.GCHandle_Free (commandKey);\t\t\t", "+\t\t\t\t}", "+\t\t\t\tOS.GCHandle_Free (commandCommand);", "+\t\t\t\tOS.GCHandle_Free (openKey);", "+\t\t\t}", "+\t\t\tOS.GCHandle_Free (openCommand);", "+\t\t}", "+\t}", "+\tOS.GCHandle_Free (shellKey);", "+\tint iconName = 0;", "+\tif (command != 0) {", "+\t\tint defaultIconCommand = createDotNetString (\"DefaultIcon\");", "+\t\tint defaultIconKey = OS.RegistryKey_OpenSubKey (registryKey, defaultIconCommand);", "+\t\tif (defaultIconKey != 0) {", "+\t\t\ticonName = getKeyValue (defaultIconKey, true);", "+\t\t\tOS.GCHandle_Free (defaultIconKey);", "+\t\t}", "+\t\tOS.GCHandle_Free (defaultIconCommand);", "+\t}", "+\tOS.GCHandle_Free (registryKey);", "+\tif (command == 0) return null;", "-\tprogram.name = name;", "-\tprogram.command = command;", "-\tprogram.iconName = iconName;", "+\tprogram.name = programName;", "+\tprogram.command = createJavaString (command);", "+\tOS.GCHandle_Free (command);", "+\tprogram.iconName = iconName != 0 ? createJavaString (iconName) : \"\";", "+\tOS.GCHandle_Free (iconName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ee3298bf6b895dbc74968214b97c31f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "0b40dc8adaa1fa3feafc9b7a1c5e53734db7ca70", "commitAfterChange": "090e8dfef891d537ee91a695bdd9547272135b17", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": "  void rendererRender (long cell, long cr, long window, long widget, long background_area, long cell_area, long expose_area, long flags)", "signatureAfterChange": "  void rendererRender (long cell, long cr, long window, long widget, long background_area, long cell_area, long expose_area, long flags)", "diff": ["-\t\t\t\t\tif (cr != 0) {", "-\t\t\t\t\t\tCairo.cairo_save (cr);", "-\t\t\t\t\t\tCairo.cairo_reset_clip (cr);", "-\t\t\t\t\t}", "-\t\t\t\t\tdrawBackground (control, window, cr, 0, rect.x, rect.y, rect.width, rect.height);", "-\t\t\t\t\tif (cr != 0) {", "-\t\t\t\t\t\tCairo.cairo_restore (cr);", "+\t\t\t\t\t// GTK >= 3.10 sends a cairo for the window of the tree widget, but not for for the bin window.", "+\t\t\t\t\t// Besides, GTK 3.10 >= uses the same cairo for all the tree's children. SWT invalidates the cairo.", "+\t\t\t\t\t// The fix is to create a new cairo.", "+\t\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION(3, 9, 0)) {", "+\t\t\t\t\t\tif (window == 0) {", "+\t\t\t\t\t\t\twindow = OS.gtk_widget_get_window(handle);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (window != 0) {", "+\t\t\t\t\t\t\tGdkRectangle r = new GdkRectangle();", "+\t\t\t\t\t\t\tOS.gdk_cairo_get_clip_rectangle(cr, r);", "+\t\t\t\t\t\t\tdrawBackground (control, window, 0, 0, rect.x, r.y, r.width, r.height);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (cr != 0) {", "+\t\t\t\t\t\t\tCairo.cairo_save (cr);", "+\t\t\t\t\t\t\tCairo.cairo_reset_clip (cr);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tdrawBackground (control, window, cr, 0, rect.x, rect.y, rect.width, rect.height);", "+\t\t\t\t\t\tif (cr != 0) {", "+\t\t\t\t\t\t\tCairo.cairo_restore (cr);", "+\t\t\t\t\t\t}", "-\t\t\t\tGC gc = new GC (this);", "+\t\t\t\tGC gc;", "+\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION(3, 9, 0)) {", "+\t\t\t\t\tGCData gcData = new GCData();", "+\t\t\t\t\tgcData.cairo = OS.gdk_cairo_create(OS.gtk_widget_get_window(handle));", "+\t\t\t\t\tgc = GC.gtk_new(this, gcData );", "+\t\t\t\t} else {", "+\t\t\t\t\tgc = new GC (this);", "+\t\t\t\t}", "-\t\t\t\tgc.setClipping (rect.x, rect.y, rect.width, rect.height);", "+\t\t\t\t// Since we create a new cairo, we have to clip it", "+\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION(3, 9, 0) && cr != 0) {", "+\t\t\t\t\tGdkRectangle r = new GdkRectangle();", "+\t\t\t\t\tOS.gdk_cairo_get_clip_rectangle(cr, r);", "+\t\t\t\t\tgc.setClipping(rect.x, r.y, r.width, r.height);", "+\t\t\t\t} else {", "+\t\t\t\t\tgc.setClipping (rect.x, rect.y, rect.width, rect.height);", "+\t\t\t\t}", "+\t\t\t\t\t if (OS.GTK_VERSION < OS.VERSION(3, 9, 0)) {", "+\t\t\t\t\t\t// GTK >= 3.10 creates a different background if we use this code", "+\t\t\t\t\t }", "-\t\t\t\tGC gc = new GC (this);", "+\t\t\t\tGC gc;", "+\t\t\t\t// GTK >= 3.10 sends a cairo for the window of the tree widget, but not for for the bin window.", "+\t\t\t\t// Besides, GTK >= 3.10 uses the same cairo for all the tree's children. SWT invalidates the cairo.", "+\t\t\t\t// The fix is to create a new cairo.", "+\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION(3, 9, 0)) {", "+\t\t\t\t\tGCData gcData = new GCData();", "+\t\t\t\t\tgcData.cairo = OS.gdk_cairo_create(OS.gtk_widget_get_window(handle));", "+\t\t\t\t\tgc = GC.gtk_new(this, gcData );", "+\t\t\t\t} else {", "+\t\t\t\t\tgc = new GC(this);", "+\t\t\t\t}", "-\t\t\t\tgc.setClipping (clipRect.x, clipRect.y, clipRect.width, clipRect.height);", "+\t\t\t\t// Since we create a new cairo, we have to clip it", "+\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION(3, 9, 0) && (cr != 0)) {", "+\t\t\t\t\tGdkRectangle r = new GdkRectangle();", "+\t\t\t\t\tOS.gdk_cairo_get_clip_rectangle(cr, r);", "+\t\t\t\t\tgc.setClipping(clipRect.x, r.y, r.width, r.height);", "+\t\t\t\t} else {", "+\t\t\t\t\tgc.setClipping (clipRect.x, clipRect.y, clipRect.width, clipRect.height);", "+\t\t\t\t}", "-\t\t\t\tsendEvent (SWT.PaintItem, event);\t", "+\t\t\t\tsendEvent (SWT.PaintItem, event);"]}], "num": 42483}
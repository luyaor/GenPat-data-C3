{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0dc1d1edf5981145b6852c42366b0343", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26946127293dc0275acc4cc23a156d97", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "e2ec65253a8e34657e931525b15536b9cdc64d53", "commitAfterChange": "cf338074634c02b2b71ed97fe4d0947e77d380e9", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 85, "signatureBeforeChange": "  void setToolTipText (int widget, String string)", "signatureAfterChange": "  void setToolTipText (int widget, String newString, String oldString)", "diff": ["-void setToolTipText (int /*long*/ widget, String string) {", "+void setToolTipText (int /*long*/ widget, String newString, String oldString) {", "-\tif (string != null && string.length () > 0) {", "-\t\tbuffer = Converter.wcsToMbcs (null, string, true);", "+\tif (newString != null && newString.length () > 0) {", "+\t\tbuffer = Converter.wcsToMbcs (null, newString, true);", "+", "+\t/*", "+\t* Feature in GTK.  There is no API to position a tooltip.", "+\t* The fix is to connect to the size_allocate signal for", "+\t* the tooltip window and position it before it is mapped.", "+\t*/", "+\tOS.gtk_tooltips_force_window (tooltipsHandle);", "+\tint /*long*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (tooltipsHandle);", "+\tif (tipWindow != tooltipWindow) {", "+\t\tOS.g_signal_connect (tipWindow, OS.size_allocate, display.sizeAllocateProc, shellHandle);", "+\t\ttooltipWindow = tipWindow;", "+\t}", "+\t", "+\t/*", "+\t* Bug in GTK.  If the cursor is inside the window when a new", "+\t* tooltip is set and the old tooltip is null, the new tooltip", "+\t* is not displayed until the mouse enters the window.  The", "+\t* fix is to cause and enter/leave event to happen by creating", "+\t* a temporary INPUT_ONLY GDK window.", "+\t*/", "+\tif ((OS.GTK_WIDGET_FLAGS (widget) & OS.GTK_REALIZED) == 0) return;", "+\tif ((OS.GTK_WIDGET_FLAGS (widget) & OS.GTK_VISIBLE) == 0) return;", "+\tif (oldString == null || oldString.length () == 0) {", "+\t\tif (newString != null && newString.length () != 0) {", "+\t\t\tint[] x = new int [1], y = new int [1];", "+\t\t\tint /*long*/ window = OS.gdk_window_at_pointer (x, y);", "+\t\t\tif (window != 0) {", "+\t\t\t\tint /*long*/ [] user_data = new int /*long*/ [1];", "+\t\t\t\tOS.gdk_window_get_user_data (window, user_data);", "+\t\t\t\tif (widget == user_data [0]) {", "+\t\t\t\t\tint /*long*/ parentHandle = OS.gtk_widget_get_parent (widget);", "+\t\t\t\t\tint /*long*/ parentWindow = OS.GTK_WIDGET_WINDOW (parentHandle);", "+\t\t\t\t\tGdkWindowAttr attributes = new GdkWindowAttr ();", "+\t\t\t\t\tattributes.width = OS.GTK_WIDGET_WIDTH (parentHandle);", "+\t\t\t\t\tattributes.height = OS.GTK_WIDGET_HEIGHT (parentHandle);", "+\t\t\t\t\tattributes.event_mask = (0xFFFFFFFF & ~OS.ExposureMask);", "+\t\t\t\t\tattributes.wclass = OS.GDK_INPUT_ONLY;", "+\t\t\t\t\tattributes.window_type = OS.GDK_WINDOW_CHILD;", "+\t\t\t\t\tint enterWindow = OS.gdk_window_new (parentWindow, attributes, OS.GDK_WA_X | OS.GDK_WA_Y);", "+\t\t\t\t\tif (enterWindow != 0) {", "+\t\t\t\t\t\tOS.gdk_window_raise (enterWindow);", "+\t\t\t\t\t\tOS.gdk_window_show (enterWindow);", "+\t\t\t\t\t\tOS.gdk_window_destroy (enterWindow);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c95aa8745ff79e8c7297c775c716bbf5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 57, "signatureBeforeChange": " int getTextIndent(int columnIndex)", "signatureAfterChange": " public void setText (int columnIndex, String value)", "diff": ["- */", "-int getTextIndent(int columnIndex) {", "-\tint textIndent;", "-", "-\tif (columnIndex == TableColumn.FIRST) {", "-\t\tif (getParent().hasFirstColumnImage() == false) {", "-\t\t\ttextIndent = TEXT_INDENT_NO_IMAGE;", "-\t\t}", "-\t\telse {", "-\t\t\ttextIndent = FIRST_COLUMN_TEXT_INDENT;", "-\t\t}", "-\t}", "-\telse {", "-\t\ttextIndent = TEXT_INDENT;", "-\t}", "-\treturn textIndent;", "-}", "+}", "+public void setText (int columnIndex, String value) {", "+\tcheckWidget ();", "+\tif (value == null) error (SWT.ERROR_NULL_ARGUMENT);", "+\tint validColumnCount = Math.max (1, parent.columns.length);", "+\tif (!(0 <= columnIndex && columnIndex < validColumnCount)) return;", "+\tif (value.equals (getText (columnIndex))) return;", "+\tif (columnIndex == 0) {", "+\t\tsuper.setText (value);", "+\t} else {", "+\t\ttexts [columnIndex] = value;\t\t", "+\t}", "+\t", "+\tint oldWidth = textWidths [columnIndex];", "+\tGC gc = new GC (parent);", "+\tgc.setFont (getFont (columnIndex));", "+\tcomputeDisplayText (columnIndex, gc);", "+\ttextWidths [columnIndex] = gc.textExtent (getDisplayText (columnIndex)).x;", "+\tgc.dispose ();", "+", "+\tif (parent.columns.length == 0) {", "+\t\tRectangle bounds = getBounds ();", "+\t\tint rightX = bounds.x + bounds.width;", "+\t\tparent.updateHorizontalBar (rightX, textWidths [columnIndex] - oldWidth);", "+\t}", "+\tparent.redraw (", "+\t\tgetTextX (columnIndex),", "+\t\tparent.getItemY (this),", "+\t\tMath.max (oldWidth, textWidths [columnIndex]) + 2 * MARGIN_TEXT,", "+\t\tparent.itemHeight,", "+\t\tfalse);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e836f207bb51d068fbea7ff301fed27f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 68, "signatureBeforeChange": " void setImageExtent(Point imageExtent)", "signatureAfterChange": " public void setImage (int columnIndex, Image value)", "diff": ["- */", "-void setImageExtent(Point imageExtent) {", "-\tthis.imageExtent = imageExtent;", "-}", "+}", "+public void setImage (int columnIndex, Image value) {", "+\tcheckWidget ();", "+\tif (value != null && value.isDisposed ()) {", "+\t\terror(SWT.ERROR_INVALID_ARGUMENT);", "+\t}", "+\tint validColumnCount = Math.max (1, parent.getColumnCount());", "+\tif (!(0 <= columnIndex && columnIndex < validColumnCount)) return;", "+\tif (images.length < columnIndex + 1) {", "+\t\tImage[] newImages = new Image[columnIndex + 1];", "+\t\tSystem.arraycopy (images, 0, newImages, 0, images.length);", "+\t\timages = newImages;", "+\t} else {", "+\t\tImage current = internalGetImage (columnIndex);", "+\t\tif (current == value) return;\t\t\t\t/* same value */", "+\t\tif (current != null && current.equals (value)) return;", "+\t}", "+\timages[columnIndex] = value;", "+\t/*", "+\t * If this is the first image being put into the table then its item height", "+\t * may be adjusted, in which case a full redraw is needed.", "+\t */", "+\tif (parent.imageHeight == 0) {", "+\t\tint oldItemHeight = parent.getItemHeight ();", "+\t\tparent.setImageHeight (value.getBounds().height);", "+\t\tif (oldItemHeight != parent.getItemHeight ()) {", "+\t\t\tif (columnIndex == 0) {", "+\t\t\t\tparent.col0ImageWidth = value.getBounds ().width;", "+\t\t\t}", "+\t\t\tparent.redraw ();", "+\t\t\treturn;", "+\t\t}", "+\t}", "+", "+\t/* ", "+\t * If this is the first image being put into column 0 then all cells", "+\t * in the column should also indent accordingly. ", "+\t */", "+\tif (columnIndex == 0 && parent.col0ImageWidth == 0) {", "+\t\tparent.col0ImageWidth = value.getBounds ().width;", "+\t\t/* redraw the column */", "+\t\tif (parent.getColumnCount () == 0) {", "+\t\t\tparent.redraw ();", "+\t\t} else {", "+\t\t\tparent.redraw (", "+\t\t\t\t0, 0,", "+\t\t\t\tparent.getColumn (0).getWidth (),", "+\t\t\t\tparent.getClientArea ().height,", "+\t\t\t\ttrue);", "+\t\t}", "+\t}", "+\tredrawItem ();", "+}"]}], "num": 24784}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d798d0a276d84997e7a58ab1af3e9c7a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97bd40abf8f169799b97e68e4e2c6268", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "ea7476519b9e21c42e4d4550669901e532bedcab", "commitAfterChange": "76b33e0e494479a9009365afe16385a154f070b7", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": " void doPageUp(boolean select, int lines)", "signatureAfterChange": " void doPageUp(boolean select, int height)", "diff": ["-void doPageUp(boolean select, int lines) {", "-\tint oldColumnX = columnX;", "+void doPageUp(boolean select, int height) {", "+\tif (isSingleLine()) {", "+\t\treturn;", "+\t}", "-\tint caretLine = getCaretLine();", "-\tif (caretLine > 0) {\t", "-\t\tint scrollLines = Math.max(1, Math.min(caretLine, lines));", "-\t\tcaretLine -= scrollLines;", "-\t\tcaretOffset = getOffsetAtPoint(columnX, caretLine);", "+\tint oldColumnX = columnX;\t", "+\tif (isFixedLineHeight()) {", "+\t\tint caretLine = getCaretLine();\t", "+\t\tif (caretLine > 0) {", "+\t\t\tint lines = height / lineHeight;", "+\t\t\tint scrollLines = Math.max(1, Math.min(caretLine, lines));", "+\t\t\tcaretLine -= scrollLines;", "+\t\t\tcaretOffset = getOffsetAtPoint(columnX, getLinePixel(caretLine));", "+\t\t\tif (select) {", "+\t\t\t\tdoSelection(ST.COLUMN_PREVIOUS);", "+\t\t\t}", "+\t\t\t// scroll one page up or to the top", "+\t\t\tint scrollOffset = Math.max(0, verticalScrollOffset - scrollLines * getVerticalIncrement());", "+\t\t\tif (scrollOffset < verticalScrollOffset) {", "+\t\t\t\tsetVerticalScrollOffset(scrollOffset, true);", "+\t\t\t}", "+\t\t}", "+\t} else {", "+\t\tint oldVScrollOffset = verticalScrollOffset;", "+\t\tint caretY = getCaret().getLocation().y;\t", "+\t\tint vscroll = Math.min(verticalScrollOffset, height);", "+\t\tsetVerticalScrollOffset(verticalScrollOffset - vscroll, true);", "+\t\tcaretY -= height - (oldVScrollOffset - verticalScrollOffset);", "+\t\tcaretOffset = getOffsetAtPoint(columnX, caretY);", "+\t\tsetCaretLocation();", "-\t\t// scroll one page up or to the top", "-\t\tint scrollOffset = Math.max(0, verticalScrollOffset - scrollLines * getVerticalIncrement());", "-\t\tif (scrollOffset < verticalScrollOffset) {", "-\t\t\tsetVerticalScrollOffset(scrollOffset, true);", "-\t\t}", "-\t// explicitly go to the calculated caret line. may be different ", "-\t// from content.getLineAtOffset(caretOffset) when in word wrap mode", "-\tshowCaret(caretLine);", "-\t// restore the original horizontal caret position", "+\tshowCaret();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae3472f4ec8438ffb6957dff2cdca4f7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 235, "methodNumberAfterChange": 86, "signatureBeforeChange": " void doPageUp(boolean select, int lines)", "signatureAfterChange": " void doPageUp(boolean select, int height)", "diff": ["-void doPageUp(boolean select, int lines) {", "-\tint oldColumnX = columnX;", "+void doPageUp(boolean select, int height) {", "+\tif (isSingleLine()) {", "+\t\treturn;", "+\t}", "-\tint caretLine = getCaretLine();", "-\t", "-\tif (caretLine > 0) {\t", "-\t\tint scrollLines = Math.max(1, Math.min(caretLine, lines));", "-\t\tint scrollOffset;", "-\t\t", "-\t\tcaretLine -= scrollLines;", "-\t\tcaretOffset = getOffsetAtMouseLocation(columnX, caretLine);", "+\tint oldColumnX = columnX;\t", "+\tif (isFixedLineHeight()) {", "+\t\tint caretLine = getCaretLine();\t", "+\t\tif (caretLine > 0) {", "+\t\t\tint lineHeight = renderer.getLineHeight();", "+\t\t\tint lines = height / lineHeight;", "+\t\t\tint scrollLines = Math.max(1, Math.min(caretLine, lines));", "+\t\t\tcaretLine -= scrollLines;", "+\t\t\tcaretOffset = getOffsetAtPoint(columnX, getLinePixel(caretLine));", "+\t\t\tif (select) {", "+\t\t\t\tdoSelection(ST.COLUMN_PREVIOUS);", "+\t\t\t}", "+\t\t\t// scroll one page up or to the top", "+\t\t\tint scrollOffset = Math.max(0, getVerticalScrollOffset() - scrollLines * getVerticalIncrement());", "+\t\t\tif (scrollOffset < getVerticalScrollOffset()) {", "+\t\t\t\tscrollVertical(scrollOffset - getVerticalScrollOffset(), true);", "+\t\t\t}", "+\t\t}", "+\t} else {", "+\t\tint oldVScrollOffset = getVerticalScrollOffset();", "+\t\tint caretY = getCaret().getLocation().y;\t", "+\t\tint vscroll = Math.min(getVerticalScrollOffset(), height);", "+\t\tscrollVertical(-vscroll, true);", "+\t\tcaretY -= height - (oldVScrollOffset - getVerticalScrollOffset());", "+\t\tcaretOffset = getOffsetAtPoint(columnX, caretY);", "+\t\tsetCaretLocation();", "-\t\t// scroll one page up or to the top", "-\t\tscrollOffset = Math.max(0, verticalScrollOffset - scrollLines * getVerticalIncrement());", "-\t\tif (scrollOffset < verticalScrollOffset) {", "-\t\t\tsetVerticalScrollOffset(scrollOffset, true);", "-\t\t}", "-\t// explicitly go to the calculated caret line. may be different ", "-\t// from content.getLineAtOffset(caretOffset) when in word wrap mode", "-\tshowCaret(caretLine);", "-\t// restore the original horizontal caret position", "+\tshowCaret();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "17a0c56e19c606c0e407761c7eddae3a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 232, "methodNumberAfterChange": 83, "signatureBeforeChange": " void doPageDown(boolean select, int lines)", "signatureAfterChange": " void doPageDown(boolean select, int height)", "diff": ["-void doPageDown(boolean select, int lines) {", "-\tint lineCount = content.getLineCount();", "-\tint oldColumnX = columnX;", "-\tint oldHScrollOffset = horizontalScrollOffset;", "-\tint caretLine;", "-\t", "+void doPageDown(boolean select, int height) {", "-\t}", "-\tcaretLine = getCaretLine();", "-\tif (caretLine < lineCount - 1) {", "-\t\tint verticalMaximum = lineCount * getVerticalIncrement();", "-\t\tint pageSize = getClientArea().height;", "-\t\tint scrollLines = Math.min(lineCount - caretLine - 1, lines);", "-\t\tint scrollOffset;", "-\t\t", "-\t\t// ensure that scrollLines never gets negative and at leat one ", "-\t\t// line is scrolled. fixes bug 5602.", "-\t\tscrollLines = Math.max(1, scrollLines);", "-\t\tcaretLine += scrollLines;", "-\t\tcaretOffset = getOffsetAtMouseLocation(columnX, caretLine); ", "+\t}\t", "+\tint oldColumnX = columnX;", "+\tint oldHScrollOffset = horizontalScrollOffset;", "+\tif (isFixedLineHeight()) {", "+\t\tint lineCount = content.getLineCount();", "+\t\tint caretLine = getCaretLine();", "+\t\tif (caretLine < lineCount - 1) {", "+\t\t\tint lineHeight = renderer.getLineHeight();", "+\t\t\tint lines = height / lineHeight;", "+\t\t\tint scrollLines = Math.min(lineCount - caretLine - 1, lines);", "+\t\t\t// ensure that scrollLines never gets negative and at leat one ", "+\t\t\t// line is scrolled. fixes bug 5602.", "+\t\t\tscrollLines = Math.max(1, scrollLines);", "+\t\t\tcaretOffset = getOffsetAtPoint(columnX, getLinePixel(caretLine + scrollLines));", "+\t\t\tif (select) {", "+\t\t\t\tdoSelection(ST.COLUMN_NEXT);", "+\t\t\t}", "+\t\t\t// scroll one page down or to the bottom", "+\t\t\tint verticalMaximum = lineCount * getVerticalIncrement();", "+\t\t\tint pageSize = getClientArea().height;", "+\t\t\tint scrollOffset = getVerticalScrollOffset() + scrollLines * getVerticalIncrement();", "+\t\t\tif (scrollOffset + pageSize > verticalMaximum) {", "+\t\t\t\tscrollOffset = verticalMaximum - pageSize;", "+\t\t\t}", "+\t\t\tif (scrollOffset > getVerticalScrollOffset()) {", "+\t\t\t\tscrollVertical(scrollOffset - getVerticalScrollOffset(), true);", "+\t\t\t}", "+\t\t}", "+\t} else {", "+\t\tint oldVScrollOffset = getVerticalScrollOffset();", "+\t\tint caretY = getCaret().getLocation().y;", "+\t\tboolean scroll = getLineIndex(getClientArea().height) != content.getLineCount() - 1;", "+\t\tif (scroll) {", "+\t\t\tscrollVertical(height, true);", "+\t\t\tclaimBottomFreeSpace();", "+\t\t}", "+\t\tcaretY += height - (getVerticalScrollOffset() - oldVScrollOffset);", "+\t\tcaretOffset = getOffsetAtPoint(columnX, caretY);", "+\t\tsetCaretLocation();", "-\t\t// scroll one page down or to the bottom", "-\t\tscrollOffset = verticalScrollOffset + scrollLines * getVerticalIncrement();", "-\t\tif (scrollOffset + pageSize > verticalMaximum) {", "-\t\t\tscrollOffset = verticalMaximum - pageSize;", "-\t\t}", "-\t\tif (scrollOffset > verticalScrollOffset) {\t\t", "-\t\t\tsetVerticalScrollOffset(scrollOffset, true);", "-\t\t}", "-\t}", "-\t// explicitly go to the calculated caret line. may be different ", "-\t// from content.getLineAtOffset(caretOffset) when in word wrap mode", "-\tshowCaret(caretLine);", "-\t// restore the original horizontal caret position", "+\t}\t", "+\tshowCaret();"]}], "num": 38328}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c8c218248c120b08448e76bc5c331e9b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4a0e18a0f5289737ff16dcfe079bf47", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ce2f35c3f6b1d0b5778f68f011b1d8668d3c5c72", "commitAfterChange": "00bee382096a1807d86474fed7c933116a37eeb8", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 35, "signatureBeforeChange": "\r void calculateContentWidth(int startLine, int lineCount)", "signatureAfterChange": "\r void calculateContentWidth(int startLine, int lineCount)", "diff": ["+\tboolean isBidi = isBidi();\r", "-\t\tcontentWidth = Math.max(contentWidth(line, i, gc) + CARET_WIDTH, contentWidth);\r", "+\t\tif (isBidi) {\r", "+            int lineOffset = content.getOffsetAtLine (i);\r", "+            StyledTextBidi bidi = new StyledTextBidi(gc, tabWidth, line, null, null, getStyleOffsets (line, lineOffset));\r", "+\t\t\tcontentWidth = Math.max(bidi.getTextWidth() + getCaretWidth(), contentWidth);\r", "+\t\t}\r", "+\t\telse {\r", "+\t\t\tcontentWidth = Math.max(contentWidth(line, i, gc) + getCaretWidth(), contentWidth);\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16771f2033d5935dcf7bef81ef59ee77", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ce2f35c3f6b1d0b5778f68f011b1d8668d3c5c72", "commitAfterChange": "00bee382096a1807d86474fed7c933116a37eeb8", "methodNumberBeforeChange": 216, "methodNumberAfterChange": 241, "signatureBeforeChange": "\r int textWidth(String line, int lineIndex, int length, GC gc)", "signatureAfterChange": "\r int textWidth(String line, int lineIndex, int length, GC gc)", "diff": ["+\tStyledTextBidi bidi = null;\r", "-\treturn textWidth(line, lineOffset, 0, length, styles, 0, gc);\r", "+\tif (isBidi()) {\r", "+\t\tint[] boldStyles = getBoldRanges(styles, lineOffset, line.length());\r", "+\t\tbidi = new StyledTextBidi(gc, tabWidth, line, boldStyles, boldFont, getStyleOffsets (line, lineOffset));\r", "+\t}\t\r", "+\treturn textWidth(line, lineOffset, 0, length, styles, 0, gc, bidi);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61880e1068ff2f1529e69828cc722bfb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ce2f35c3f6b1d0b5778f68f011b1d8668d3c5c72", "commitAfterChange": "00bee382096a1807d86474fed7c933116a37eeb8", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 120, "signatureBeforeChange": "\r int getOffsetAtX(String line, int lineOffset, int lineXOffset)", "signatureAfterChange": "\r int getOffsetAtX(String line, int lineOffset, int lineXOffset)", "diff": ["-\tint x = 0;\r", "-\tGC gc = new GC(this);\t\r", "-\tint low = -1;\r", "-\tint high = line.length();\r", "+\tGC gc = new GC(this);\t\r", "-\t\r", "+\t\t\r", "-\twhile (high - low > 1) {\r", "-\t\toffset = (high + low) / 2;\r", "-\t\tx = textWidth(line, lineOffset, 0, offset, styles, 0, gc);\r", "-\t\tint charWidth = textWidth(line, lineOffset, 0, offset + 1, styles, 0, gc) - x;\r", "-\t\tif (lineXOffset <= x + charWidth / 2) {\r", "-\t\t\thigh = offset;\t\t\t\r", "+\tif (isBidi()) {\r", "+\t\tint[] boldStyles = getBoldRanges(styles, lineOffset, line.length());\r", "+\t\tStyledTextBidi bidi = new StyledTextBidi(gc, tabWidth, line, boldStyles, boldFont, getStyleOffsets (line, lineOffset));\r", "+\t\toffset = bidi.getOffsetAtX(lineXOffset);\r", "+\t}\t\t\r", "+\telse {\r", "+\t\tint low = -1;\r", "+\t\tint high = line.length();\r", "+\t\twhile (high - low > 1) {\r", "+\t\t\toffset = (high + low) / 2;\r", "+\t\t\tif (lineXOffset <= textWidth(line, lineOffset, 0, offset + 1, styles, 0, gc, null)) {\r", "+\t\t\t\thigh = offset;\t\t\t\r", "+\t\t\t}\r", "+\t\t\telse \r", "+\t\t\tif (high == line.length() && high - offset == 1) {\r", "+\t\t\t\t// requested x location is past end of line\r", "+\t\t\t\thigh = -1;\r", "+\t\t\t}\r", "+\t\t\telse {\r", "+\t\t\t\tlow = offset;\r", "+\t\t\t}\r", "-\t\telse {\r", "-\t\t\tlow = offset;\r", "-\t\t}\r", "+\t\toffset = high;\r", "-\toffset = high;\r"]}], "num": 34569}
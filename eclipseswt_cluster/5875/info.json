{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b623189ff6565f17cab82684832c86e1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7a2b7d8ffd4bf463766c3b054e74941", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-}", "+", "-\tint border = getBorderWidth ();", "-\tint width = border * 2, height = border * 2;", "+\t// NEEDS WORK - empty string", "-\t\tDisplay display = getDisplay ();", "-\t\twidth += display.scrolledMarginX;", "-\t\theight += display.scrolledMarginY;", "-\t\tif (wHint != SWT.DEFAULT) width = wHint + (border * 2);", "-\t\tif (hHint != SWT.DEFAULT) height = hHint + (border * 2);", "+\t\tint [] outMetric = new int [1];", "+\t\tOS.GetThemeMetric (OS.kThemeMetricDisclosureTriangleHeight, outMetric);", "+\t\tint width = outMetric [0], height = outMetric [0];", "+\t\tif (wHint != SWT.DEFAULT) width = wHint;", "+\t\tif (hHint != SWT.DEFAULT) height = hHint;", "-    /* AW", "-\tXtWidgetGeometry result = new XtWidgetGeometry ();", "-\tresult.request_mode = OS.CWWidth | OS.CWHeight;", "-\tint [] argList2 = {OS.XmNrecomputeSize, 1};", "-\tOS.XtSetValues(handle, argList2, argList2.length / 2);", "-\tOS.XtQueryGeometry (handle, null, result);", "-\tint [] argList3 = {OS.XmNrecomputeSize, 0};", "-\tOS.XtSetValues(handle, argList3, argList3.length / 2);", "-\t*/", "-\tPoint result= MacUtil.computeSize(handle);", "-\tif ((style & SWT.PUSH) != 0) {", "-\t\tif (image != null) {\t// is a Bevel button!", "-\t\t\tRectangle bounds= image.getBounds();", "-\t\t\tresult.x= 4 + bounds.width + 4;", "-\t\t\tresult.y= 4 + bounds.height + 4;", "-\t\t} else {", "-\t\t\tString s= getText();", "-\t\t\tif (s != null && s.length() > 0) {", "-\t\t\t\tresult.x= result.x - 2*SPACE + 2*MARGIN;", "-\t\t\t\tresult.y= result.y + TOP_MARGIN + BOTTOM_MARGIN;", "+", "+\tint width = 0, height = 0;", "+", "+\tif (isImage && image != null) {", "+\t\tRectangle bounds = image.getBounds();", "+\t\twidth = bounds.width;", "+\t\theight = bounds.height;", "+\t} else {", "+\t\tint [] ptr = new int [1];", "+\t\tOS.CopyControlTitleAsCFString(handle, ptr);", "+\t\tif (ptr [0] != 0) {", "+\t\t\tif (font == null) {", "+\t\t\t\torg.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\t\tshort [] baseLine = new short [1];", "+\t\t\t\tOS.GetThemeTextDimensions(ptr [0], (short)OS.kThemePushButtonFont, OS.kThemeStateActive, false, ioBounds, baseLine);", "+\t\t\t\twidth = ioBounds.h;", "+\t\t\t\theight = ioBounds.v;", "+\t\t\t} else {", "+\t\t\t\t// NEEDS WORK - alternatively we could use GetThemeTextDimensions with OS.kThemeCurrentPortFont", "+\t\t\t\tint length = OS.CFStringGetLength (ptr [0]);", "+\t\t\t\tchar [] buffer = new char [length];", "+\t\t\t\tCFRange range = new CFRange ();", "+\t\t\t\trange.length = length;", "+\t\t\t\tOS.CFStringGetCharacters (ptr [0], range, buffer);", "+\t\t\t\tString string = new String (buffer);", "+\t\t\t\tGC gc = new GC (this);", "+\t\t\t\tPoint extent = gc.stringExtent (string);", "+\t\t\t\tgc.dispose ();", "+\t\t\t\twidth = extent.x;", "+\t\t\t\theight = extent.y;", "+\t\t\tOS.CFRelease (ptr [0]);", "+\t\t} else {", "+\t\t\twidth = DEFAULT_WIDTH;", "+\t\t\theight = DEFAULT_HEIGHT;", "-\twidth += result.x;", "-\theight += result.y;", "-\t/*", "-\t * Feature in Motif. If a button's labelType is XmSTRING but it", "-\t * has no label set into it yet, recomputing the size will", "-\t * not take into account the height of the font, as we would", "-\t * like it to. Take care of this case.", "-\t */", "-    /* AW", "-\tint [] argList = {OS.XmNlabelType, 0};", "-\tOS.XtGetValues (handle, argList, argList.length / 2);", "-\tif (argList [1] == OS.XmSTRING) {", "-\t\tint [] argList1 = {OS.XmNlabelString, 0};", "-\t\tOS.XtGetValues (handle, argList1, argList1.length / 2);", "-\t\tint xmString = argList1 [1];", "-\t\tif (OS.XmStringEmpty (xmString)) height += getFontHeight ();", "-\t}", "-\t*/", "-\tif (wHint != SWT.DEFAULT || hHint != SWT.DEFAULT) {", "-\t\t/* AW", "-\t\tint [] argList4 = new int [] {OS.XmNmarginLeft, 0, OS.XmNmarginRight, 0, OS.XmNmarginTop, 0, OS.XmNmarginBottom, 0};", "-\t\tOS.XtGetValues (handle, argList4, argList4.length / 2);", "-\t\tif (wHint != SWT.DEFAULT) width = wHint + argList4 [1] + argList4 [3] + (border * 2);", "-\t\tif (hHint != SWT.DEFAULT) height = hHint + argList4 [5] + argList4 [7] + (border * 2);", "-\t\t*/", "-\t\tint left= 0;", "-\t\tint right= 0;", "-\t\tint top= 0;", "-\t\tint bottom= 0;", "-\t\t", "-\t\tif (wHint != SWT.DEFAULT) width = wHint + left + right;", "-\t\tif (hHint != SWT.DEFAULT) height = hHint + top + bottom;", "-\t}", "-\t\t", "-\treturn new Point(width, height);", "-}", "+\tif ((style & (SWT.CHECK | SWT.RADIO)) != 0) {", "+\t\tint [] outMetric = new int [1];", "+\t\tint metric = ((style & SWT.CHECK) != 0) ? OS.kThemeMetricCheckBoxWidth : OS.kThemeMetricRadioButtonWidth;", "+\t\tOS.GetThemeMetric (metric, outMetric);\t", "+ \t\twidth += outMetric [0] + 3; // +3 for gap between button and text/image", "+\t\theight = Math.max(outMetric [0], height);", "+\t} else {", "+\t\tif ((style & SWT.FLAT) != 0 || (style & SWT.TOGGLE) != 0) {", "+\t\t\twidth += 10;", "+\t\t\theight += 10;", "+\t\t} else {", "+\t\t\twidth += 28;", "+\t\t\theight += 8;", "+\t\t}", "+\t}", "+\t", "+\tRect inset = getInset ();", "+\twidth += inset.left + inset.right;", "+\theight += inset.top + inset.bottom;", "+\t", "+\t/*", "+\t * Feature in Mac OS X. Setting the width of a bevel button", "+\t * widget to less than 20 will fail.  This means you can not ", "+\t * make a button very small.  By forcing the width to be greater", "+\t * than or equal to 20, the height of the button can be made", "+\t * very small, even 0.", "+\t */", "+\twidth = Math.max(20, width);", "+\tint border = (style & SWT.PUSH) != 0 ? 2 : 0;", "+\tif (wHint != SWT.DEFAULT) width = wHint + (border * 2);", "+\tif (hHint != SWT.DEFAULT) height = hHint + (border * 2);", "+\treturn new Point (width, height);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62c3f61abf028445ca5fb26e69d67e1b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "f92aec5deb4a565ea89e04280ed631a305c98831", "commitAfterChange": "4b430f4288445278b605b873a915f11105ca8844", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\t\theight = DEFAULT_HEIGHT;", "-\t\t\tif (text.length () != 0) {", "-\t\t\t\tint [] ptr = new int [1];", "-\t\t\t\tint [] actualSize = new int [1];", "-\t\t\t\tOS.GetControlData (handle, (short)0 , OS.kControlStaticTextCFStringTag, 4, ptr, actualSize);", "-\t\t\t\tif (ptr [0] != 0) {", "-\t\t\t\t\torg.eclipse.swt.internal.carbon.Point bounds = new org.eclipse.swt.internal.carbon.Point ();", "-\t\t\t\t\tshort [] baseLine = new short [1];", "-\t\t\t\t\tboolean wrap = false;", "+\t\t\tFont font = getFont ();", "+\t\t\tFontInfo info = new FontInfo ();", "+\t\t\tOS.FetchFontInfo(font.id, font.size, font.style, info);", "+\t\t\tint fontHeight = info.ascent + info.descent;", "+\t\t\theight = fontHeight;", "+\t\t\tint length = text.length (); ", "+\t\t\tif (length != 0) {", "+\t\t\t\tString string = Display.convertToLf (text);", "+\t\t\t\tint [] layout = new int [1];", "+\t\t\t\tOS.ATSUCreateTextLayout (layout);", "+\t\t\t\tif (layout [0] == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tint [] atsuiStyle = new int [1];", "+\t\t\t\tOS.ATSUCreateStyle (atsuiStyle);", "+\t\t\t\tif (atsuiStyle [0] == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tint ptr1 = OS.NewPtr (16);", "+\t\t\t\tOS.memcpy (ptr1, new int [] {font.handle}, 4); ", "+\t\t\t\tOS.memcpy (ptr1 + 4, new int [] {OS.X2Fix (font.size)}, 4);", "+\t\t\t\tint [] tags = new int [] {OS.kATSUFontTag, OS.kATSUSizeTag};", "+\t\t\t\tint [] sizes = new int [] {4, 4};", "+\t\t\t\tint [] values = new int [] {ptr1, ptr1 + 4};", "+\t\t\t\tOS.ATSUSetAttributes (atsuiStyle [0], tags.length, tags, sizes, values);", "+\t\t\t\tOS.DisposePtr (ptr1);", "+\t\t\t\tint ptr2 = OS.NewPtr (length * 2);", "+\t\t\t\tOS.memcpy (ptr2, string, length * 2);", "+\t\t\t\tOS.ATSUSetTextPointerLocation (layout [0], ptr2, 0, length, length);", "+\t\t\t\tOS.ATSUSetRunStyle (layout [0], atsuiStyle [0], 0, length);", "+\t\t\t\theight = 0;", "+\t\t\t\twidth = wHint != SWT.DEFAULT ? wHint : 0;", "+\t\t\t\tint [] breakCount = new int [1];", "+\t\t\t\tATSTrapezoid trapezoid = new ATSTrapezoid();", "+\t\t\t\tint start = 0, index = 0;", "+\t\t\t\tdo {", "+\t\t\t\t\tindex = string.indexOf ('\\n', start);", "+\t\t\t\t\tint end = index == -1 ? length : index;", "-\t\t\t\t\t\twrap = true;", "-\t\t\t\t\t\tbounds.h = (short) wHint;", "+\t\t\t\t\t\tOS.ATSUBatchBreakLines (layout [0], start, end - start, OS.X2Fix (wHint), breakCount);", "+\t\t\t\t\t\theight += (breakCount [0] + (index == -1 ? 1 : 0)) * fontHeight;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tOS.ATSUGetGlyphBounds (layout [0], 0, 0, start, end - start, (short) OS.kATSUseDeviceOrigins, 1, trapezoid, null);", "+\t\t\t\t\t\twidth = Math.max (width, OS.Fix2Long (trapezoid.upperRight_x) - OS.Fix2Long (trapezoid.upperLeft_x));", "+\t\t\t\t\t\theight += OS.Fix2Long (trapezoid.lowerRight_y) - OS.Fix2Long (trapezoid.upperRight_y);", "-\t\t\t\t\t// NEEDS work - only works for default font", "-\t\t\t\t\tOS.GetThemeTextDimensions (ptr [0], (short)OS.kThemeSystemFont, OS.kThemeStateActive, wrap, bounds, baseLine);", "-\t\t\t\t\twidth = bounds.h;", "-\t\t\t\t\theight = bounds.v;", "-\t\t\t\t\tOS.CFRelease (ptr [0]);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tFont font = getFont ();", "-\t\t\t\tFontInfo info = new FontInfo ();", "-\t\t\t\tOS.FetchFontInfo(font.id, font.size, font.style, info);", "-\t\t\t\theight = info.ascent + info.descent;", "+\t\t\t\t\tstart = index + 1;", "+\t\t\t\t} while (index != -1);", "+\t\t\t\tOS.ATSUDisposeStyle (atsuiStyle [0]);", "+\t\t\t\tOS.ATSUDisposeTextLayout (layout [0]);", "+\t\t\t\tOS.DisposePtr (ptr2);"]}], "num": 5875}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31bd5cb98dd0352c03294ec495f96a54", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa194b136a13a3bb265fa888b208df99", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "8fcbb05498301fbd6dd27c17e27773807b9551b3", "commitAfterChange": "03c08e49f2afd5795ae869615ef97dc825684ff2", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \t \tint get_accRole(int varChild, int pvarRole)", "signatureAfterChange": " \t \tint get_accRole(int varChild, int pvarRole)", "diff": ["-\t\tif (code == COM.E_INVALIDARG) code = COM.S_FALSE; // proxy doesn't know about app childID", "-\t\t// TEMPORARY CODE - process tree and table even if there are no apps listening", "-\t\tif (accessibleControlListeners.size() == 0 && !(control instanceof Tree || control instanceof Table)) return code;", "-\t\t/* Currently our checkbox table and tree are emulated using state mask", "-\t\t * images, so we need to specify 'checkbox' role for the items. */", "-\t\tif (v.lVal != COM.CHILDID_SELF) {", "-\t\t\tif (control instanceof Tree || control instanceof Table) {", "-\t\t\t\tif ((control.getStyle() & SWT.CHECK) != 0) event.detail = ACC.ROLE_CHECKBUTTON;", "-\t\t\t}", "+\t\t/* Currently our checkbox table and tree are emulated using state mask images,", "+\t\t * so we need to specify 'checkbox' role for the items. */", "+\t\tif (control instanceof Tree || control instanceof Table) {", "+\t\t\tif (v.lVal != COM.CHILDID_SELF && (control.getStyle() & SWT.CHECK) != 0) event.detail = ACC.ROLE_CHECKBUTTON;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90ee590bf7aef46df2326120d6521a65", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "bd4d1f77f4b1ff6b81882d3d6af94d27dd6eef79", "commitAfterChange": "a29ead267e20209d48db539a375ce453914d2d9b", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": " \t \tint get_accState(int varChild_vt, int varChild_reserved1, int varChild_lVal, int varChild_reserved2, int pvarState)", "signatureAfterChange": " \t \tint get_accState(int varChild_vt, int varChild_reserved1, int varChild_lVal, int varChild_reserved2, int pvarState)", "diff": ["+\t\tevent.childID = osToChildID(varChild_lVal);", "-\t\tif (varChild_lVal == COM.CHILDID_SELF) {", "-\t\t\tevent.childID = ACC.CHILDID_SELF;", "-\t\t} else {", "+\t\t// TEMPORARY CODE", "+\t\t/* Currently our checkbox table and tree are emulated using state mask", "+\t\t * images, so we need to determine if the item state is 'checked'. */", "+\t\tif (varChild_lVal != COM.CHILDID_SELF) {", "-\t\t\t\t/* Tree item childIDs are pointers (not 1-based indices). */", "-\t\t\t\tevent.childID = varChild_lVal;", "-", "-\t\t\t\t// TEMPORARY CODE", "-\t\t\t\t/* Currently our checkbox tree is emulated using state mask images,", "-\t\t\t\t * so we need to determine if the item is 'checked' here. */", "-\t\t\t\tevent.childID = varChild_lVal - 1;", "-\t\t\t\t", "-\t\t\t\t// TEMPORARY CODE", "-\t\t\t\t/* Currently our checkbox table is emulated using state mask images,", "-\t\t\t\t * so we need to determine if the item is 'checked' here. */", "-\t\t\t} else {", "-\t\t\t\tevent.childID = varChild_lVal - 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a5b7ea43f5733bb675d19bfd2410180", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "f342bba67a6003213057bf5e4e8cc2cd93ed792f", "commitAfterChange": "ab7cae1f91bef22765dbad081d2b690620123495", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "\r \t\r \tint get_accRole(int varChild_vt, int varChild_reserved1, int varChild_lVal, int varChild_reserved2, int pvarRole)", "signatureAfterChange": "\r \t\r \tint get_accRole(int varChild_vt, int varChild_reserved1, int varChild_lVal, int varChild_reserved2, int pvarRole)", "diff": ["-\t\t\t\t/* Currently our checkbox tree is emulated using state mask images,\r", "-\t\t\t\t * so we need to specify 'checkbox' role for the items here. */\r", "-\r", "-\t\t\t\tTree tree = (Tree) control;\r", "-\t\t\t\tif ((tree.getStyle() & SWT.CHECK) != 0) event.detail = ACC.ROLE_CHECKBUTTON;\r", "+\t\t\t\t// TEMPORARY CODE\r", "+\t\t\t\t/* Currently our checkbox tree is emulated using state mask images,\r", "+\t\t\t\t * so we need to specify 'checkbox' role for the items here. */\r", "+\t\t\t\tif ((control.getStyle() & SWT.CHECK) != 0) event.detail = ACC.ROLE_CHECKBUTTON;\r", "+\t\t\t\tevent.childID = varChild_lVal - 1;\r", "+\t\t\t\t\r", "+\t\t\t\t// TEMPORARY CODE\r", "-\t\t\t\tevent.childID = varChild_lVal - 1;\r", "-\t\t\t\tTable table = (Table) control;\r", "-\t\t\t\tif ((table.getStyle() & SWT.CHECK) != 0) event.detail = ACC.ROLE_CHECKBUTTON;\r", "+\t\t\t\tif ((control.getStyle() & SWT.CHECK) != 0) event.detail = ACC.ROLE_CHECKBUTTON;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cd4a07fa334a01f80d54fa8db8d53eb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "bd4d1f77f4b1ff6b81882d3d6af94d27dd6eef79", "commitAfterChange": "a29ead267e20209d48db539a375ce453914d2d9b", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": " \t \tint get_accRole(int varChild_vt, int varChild_reserved1, int varChild_lVal, int varChild_reserved2, int pvarRole)", "signatureAfterChange": " \t \tint get_accRole(int varChild_vt, int varChild_reserved1, int varChild_lVal, int varChild_reserved2, int pvarRole)", "diff": ["+\t\tevent.childID = osToChildID(varChild_lVal);", "-\t\tif (varChild_lVal == COM.CHILDID_SELF) {", "-\t\t\tevent.childID = ACC.CHILDID_SELF;", "-\t\t} else {", "-\t\t\tif (control instanceof Tree) {", "-\t\t\t\t/* Tree item childIDs are pointers (not 1-based indices). */", "-\t\t\t\tevent.childID = varChild_lVal;", "-\t\t\t\t", "-\t\t\t\t// TEMPORARY CODE", "-\t\t\t\t/* Currently our checkbox tree is emulated using state mask images,", "-\t\t\t\t * so we need to specify 'checkbox' role for the items here. */", "+\t\t// TEMPORARY CODE", "+\t\t/* Currently our checkbox table and tree are emulated using state mask", "+\t\t * images, so we need to specify 'checkbox' role for the items. */", "+\t\tif (varChild_lVal != COM.CHILDID_SELF) {", "+\t\t\tif (control instanceof Tree || control instanceof Table) {", "-\t\t\t} else if (control instanceof Table) {", "-\t\t\t\tevent.childID = varChild_lVal - 1;", "-\t\t\t\t", "-\t\t\t\t// TEMPORARY CODE", "-\t\t\t\t/* Currently our checkbox table is emulated using state mask images,", "-\t\t\t\t * so we need to specify 'checkbox' role for the items here. */", "-\t\t\t\tif ((control.getStyle() & SWT.CHECK) != 0) event.detail = ACC.ROLE_CHECKBUTTON;", "-\t\t\t} else {", "-\t\t\t\tevent.childID = varChild_lVal - 1;"]}], "num": 15318}
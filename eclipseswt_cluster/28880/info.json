{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e04d6244c418c292153ab16f23de952f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7a24fa5ebb5425a404824047ff1e989", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "340ab48f905291cccac5d0162de766f6d2d07f84", "commitAfterChange": "9a981dbda655c135d9b3213371edc45c1fd05824", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "  void sendEraseItemEvent (TableItem item, NMLVCUSTOMDRAW nmcd, int lParam)", "signatureAfterChange": "  void sendEraseItemEvent (TableItem item, NMLVCUSTOMDRAW nmcd, int lParam, Event measureEvent)", "diff": ["-void sendEraseItemEvent (TableItem item, NMLVCUSTOMDRAW nmcd, int /*long*/ lParam) {", "+void sendEraseItemEvent (TableItem item, NMLVCUSTOMDRAW nmcd, int /*long*/ lParam, Event measureEvent) {", "-\tif (ignoreDrawFocus) {", "-\t\tnmcd.uItemState &= ~OS.CDIS_FOCUS;", "-\t\tOS.MoveMemory (lParam, nmcd, NMLVCUSTOMDRAW.sizeof);", "-\t}", "-\tif (!ignoreDrawHot || (!ignoreDrawSelection && clrSelectionBk != -1)) {", "-\t\tif (explorerTheme) {", "-\t\t\tboolean hot = drawHot;", "-\t\t\tRECT pClipRect = new RECT ();", "-\t\t\tOS.SetRect (pClipRect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "-\t\t\tRECT rect = new RECT ();", "-\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "-\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "-\t\t\t\tint count = (int)/*64*/OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "-\t\t\t\tint index = (int)/*64*/OS.SendMessage (hwndHeader, OS.HDM_ORDERTOINDEX, count - 1, 0);", "-\t\t\t\tRECT headerRect = new RECT ();", "-\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, index, headerRect);", "-\t\t\t\tOS.MapWindowPoints (hwndHeader, handle, headerRect, 2);", "-\t\t\t\trect.left = 0;", "-\t\t\t\trect.right = headerRect.right;", "-\t\t\t\tpClipRect.left = cellRect.left;", "-\t\t\t\tpClipRect.right += EXPLORER_EXTRA;", "-\t\t\t} else {", "-\t\t\t\trect.right += EXPLORER_EXTRA;", "-\t\t\t\tpClipRect.right += EXPLORER_EXTRA;", "-\t\t\t}", "-\t\t\tint /*long*/ hTheme = OS.OpenThemeData (handle, Display.LISTVIEW);", "-\t\t\tint iStateId = selected ? OS.LISS_SELECTED : OS.LISS_HOT;", "-\t\t\tif (OS.GetFocus () != handle && selected && !hot) iStateId = OS.LISS_SELECTEDNOTFOCUS;", "-\t\t\tOS.DrawThemeBackground (hTheme, hDC, OS.LVP_LISTITEM, iStateId, rect, pClipRect);", "-\t\t\tOS.CloseThemeData (hTheme);", "-\t\t} else {", "-\t\t\tboolean fullText = ((style & SWT.FULL_SELECTION) != 0 || !firstColumn);", "-\t\t\tRECT textRect = item.getBounds ((int)/*64*/nmcd.dwItemSpec, nmcd.iSubItem, true, false, fullText, false, hDC);", "-\t\t\tfillBackground (hDC, clrSelectionBk, textRect);", "+\tfocusRect = null;", "+\tif (!ignoreDrawHot || !ignoreDrawSelection || !ignoreDrawFocus) {", "+\t\tboolean fullText = (style & SWT.FULL_SELECTION) != 0 || !firstColumn;", "+\t\tRECT textRect = item.getBounds ((int)/*64*/nmcd.dwItemSpec, nmcd.iSubItem, true, false, fullText, false, hDC);", "+\t\tif (measureEvent != null && (style & SWT.FULL_SELECTION) == 0) {", "+\t\t\ttextRect.right = Math.min (cellRect.right, measureEvent.x + measureEvent.width);", "+\t\t\tif (!ignoreDrawFocus) focusRect = textRect;", "+\t\tif (explorerTheme) {", "+\t\t\tif (!ignoreDrawHot || (!ignoreDrawSelection && clrSelectionBk != -1)) {", "+\t\t\t\tboolean hot = drawHot;", "+\t\t\t\tRECT pClipRect = new RECT ();", "+\t\t\t\tOS.SetRect (pClipRect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\tint count = (int)/*64*/OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\tint index = (int)/*64*/OS.SendMessage (hwndHeader, OS.HDM_ORDERTOINDEX, count - 1, 0);", "+\t\t\t\t\tRECT headerRect = new RECT ();", "+\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, index, headerRect);", "+\t\t\t\t\tOS.MapWindowPoints (hwndHeader, handle, headerRect, 2);", "+\t\t\t\t\trect.left = 0;", "+\t\t\t\t\trect.right = headerRect.right;", "+\t\t\t\t\tpClipRect.left = cellRect.left;", "+\t\t\t\t\tpClipRect.right += EXPLORER_EXTRA;", "+\t\t\t\t} else {", "+\t\t\t\t\trect.right += EXPLORER_EXTRA;", "+\t\t\t\t\tpClipRect.right += EXPLORER_EXTRA;", "+\t\t\t\t}", "+\t\t\t\tint /*long*/ hTheme = OS.OpenThemeData (handle, Display.LISTVIEW);", "+\t\t\t\tint iStateId = selected ? OS.LISS_SELECTED : OS.LISS_HOT;", "+\t\t\t\tif (OS.GetFocus () != handle && selected && !hot) iStateId = OS.LISS_SELECTEDNOTFOCUS;", "+\t\t\t\tOS.DrawThemeBackground (hTheme, hDC, OS.LVP_LISTITEM, iStateId, rect, pClipRect);", "+\t\t\t\tOS.CloseThemeData (hTheme);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (!ignoreDrawSelection && clrSelectionBk != -1) fillBackground (hDC, clrSelectionBk, textRect);", "+\t\t}", "+\t}", "+\tif (ignoreDrawFocus || focusRect != null) {", "+\t\tnmcd.uItemState &= ~OS.CDIS_FOCUS;", "+\t\tOS.MoveMemory (lParam, nmcd, NMLVCUSTOMDRAW.sizeof);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10a3fd3affcc1f809697d7bfbd17c81b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextBidi.java", "commitBeforeChange": "5ba9287f6caa82e9989a01a562fc97d015948ef7", "commitAfterChange": "8c259c2fdd0bffd2ea76820f5d04cd4a52c2e4a7", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": " int getTextPosition(int logicalOffset, int direction)", "signatureAfterChange": " int getTextPosition(int logicalOffset, int direction)", "diff": ["+", "+\tboolean isRightToLeft = isRightToLeft(logicalOffset);", "+\t\tisRightToLeft = isRightToLeft(logicalOffset);", "-\t\tif (isRightToLeft(logicalOffset)) {", "-\t\t\tcaretX = renderPositions[visualOffset];", "+\t\tif ((!isRightOriented && !isRightToLeft) || (isRightOriented && isRightToLeft)) {", "+\t\t\tcaretX = renderPositions[visualOffset] + dx[visualOffset];", "-\t\t\tcaretX = renderPositions[visualOffset] + dx[visualOffset];", "+\t\t\tcaretX = renderPositions[visualOffset];", "-\t\tif (isRightToLeft(logicalOffset)) {", "-\t\t\tcaretX = renderPositions[visualOffset] + dx[visualOffset];", "+\t\tif ((!isRightOriented && !isRightToLeft) || (isRightOriented && isRightToLeft)) {", "+\t\t\tcaretX = renderPositions[visualOffset];", "-\t\t\tcaretX = renderPositions[visualOffset];", "+\t\t\tcaretX = renderPositions[visualOffset] + dx[visualOffset];", "-\t\tif (isRightToLeft(logicalOffset - 1)) {", "-\t\t\t// moving from RtoL to LtoR", "-\t\t\tcaretX = renderPositions[visualOffset];", "-\t\t}", "-\t\telse {", "-\t\t\t// moving from LtoR to RtoL", "+\t\tisRightToLeft = isRightToLeft(logicalOffset - 1);", "+\t\tif ((!isRightOriented && !isRightToLeft) || (isRightOriented && isRightToLeft)) {", "-\t\t}", "+\t\t} else {", "+\t\t\tcaretX = renderPositions[visualOffset];", "+\t\t}\t\t\t\t", "-\t\tif (isRightToLeftInput(logicalOffset - 1)) {", "-\t\t\t// moving from LtoR to RtoL", "+\t\tisRightToLeft = isRightToLeft(logicalOffset - 1);", "+\t\tif ((!isRightOriented && !isRightToLeft) || (isRightOriented && isRightToLeft)) {", "+\t\t\tcaretX = renderPositions[visualOffset] + dx[visualOffset];", "+\t\t} else {", "+\t\t\tcaretX = renderPositions[visualOffset];", "+\t\t}\t\t\t\t", "+\t}", "+\telse {", "+\t\tint visualOffset = order[logicalOffset];", "+\t\tif ((!isRightOriented && !isRightToLeft) || (isRightOriented && isRightToLeft)) {", "-\t\t\t// moving from RtoL to LtoR", "-\t}", "-\telse", "-\tif (isRightToLeft(logicalOffset)) {", "-\t\tint visualOffset = order[logicalOffset];", "-\t\tcaretX = renderPositions[visualOffset] + dx[visualOffset];", "-\t}", "-\telse {", "-\t\tcaretX = renderPositions[order[logicalOffset]];"]}], "num": 28880}
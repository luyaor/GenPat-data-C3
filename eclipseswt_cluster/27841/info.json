{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "329e59cdef9f0d5720882c642c5c81a6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c71ed4d98fd00c8cdaa3cff4ff775094", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "345e8fd707790ae4ed8802abc9f867aec8778dc0", "commitAfterChange": "6bcdd59bde0c05e0237aca7d3eedb971d755541b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple)", "signatureAfterChange": " void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple)", "diff": ["- \t\tsimple = srcX == 0 && srcY == 0 &&", "- \t\t\tsrcWidth == destWidth && destWidth == imgWidth &&", "- \t\t\tsrcHeight == destHeight && destHeight == imgHeight;", "- \t}\t", "-\tif (srcImage.alpha != -1 || srcImage.alphaData != null) {", "-\t\tdrawImageAlpha(srcImage, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, simple, imgWidth, imgHeight);", "-\t} else if (srcImage.transparentPixel != -1 || srcImage.mask != 0) {", "-\t\tdrawImageMask(srcImage, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, simple, imgWidth, imgHeight);", "-\t} else {", "-\t\tdrawImage(srcImage, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, simple, imgWidth, imgHeight);", "-\t}", "-}", "+ \t}", "+\tif (srcImage.alpha == 0)\t// fully transparent", "+\t\treturn;", "+", "+\tif (srcImage.pixmap == 0)", "+\t\treturn;", "+\tint srcBits= OS.DerefHandle(srcImage.pixmap);", "+\tif (srcBits == 0)", "+\t\treturn;", "+\tint destBits= OS.GetPortBitMapForCopyBits(handle);", "+\tif (destBits == 0)", "+\t\treturn;", "+", "+\tMacRect ib= new MacRect(srcX, srcY, srcWidth, srcHeight);", "+\tfRect.set(destX, destY, destWidth, destHeight);", "+", "+ \ttry {", "+\t\t\t", "+\t\t\tOS.RGBBackColor(0x00FFFFFF);", "+\t\t\tOS.RGBForeColor(0x00000000);", "+", "+\t\t\tif (srcImage.alpha != -1 || srcImage.alphaData != null) {", "+\t\t\t\t", "+\t\t\t\tif (srcImage.alpha == 255) {\t// fully opaque", "+\t\t\t\t\tOS.CopyBits(srcBits, destBits, ib.getData(), fRect.getData(), (short)0, 0);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t//OS.CopyDeepMask(srcBits, maskBits, destBits, ib.getData(), ib.getData(), fRect.getData(), (short)0, 0);", "+\t\t\t\tSystem.out.println(\"GC.drawImage: alpha drawing not nyi\");", "+", "+\t\t\t} else if (srcImage.transparentPixel != -1 || srcImage.mask != 0) {", "+\t\t\t\t/* Generate the mask if necessary. */", "+\t\t\t\tif (srcImage.transparentPixel != -1) srcImage.createMask();", "+\t\t\t\tint maskBits= srcImage.mask != 0 ? OS.DerefHandle(srcImage.mask) : 0;", "+\t\t\t\tif (maskBits != 0)", "+\t\t\t\t\tOS.CopyMask(srcBits, maskBits, destBits, ib.getData(), ib.getData(), fRect.getData());", "+", "+\t\t\t\t/* Destroy the image mask if there is a GC created on the image */", "+\t\t\t\tif (srcImage.transparentPixel != -1 && srcImage.memGC != null) srcImage.destroyMask();", "+", "+\t\t\t} else {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84d93ca6b54c79687d2f1e69cc83718a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "5c289e99567660a271d673d3f8a969595f0eacd6", "commitAfterChange": "744101254cdbd3dcb566c9055e53893bc3bfba42", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " boolean paint (GC gc, TreeColumn column, boolean backgroundOnly)", "signatureAfterChange": " boolean paint (GC gc, TreeColumn column, boolean backgroundOnly)", "diff": ["+\t/* ", "+\t * Capture GC attributes that will need to be restored later in the paint", "+\t * process to ensure that the item paints as intended without being affected", "+\t * by GC changes made in MeasureItem/EraseItem/PaintItem callbacks.", "+\t */", "+\tint oldAlpha = gc.getAlpha ();", "+\tboolean oldAdvanced = gc.getAdvanced ();", "+\tint oldAntialias = gc.getAntialias ();", "+\tPattern oldBackgroundPattern = gc.getBackgroundPattern ();", "+\tPattern oldForegroundPattern = gc.getForegroundPattern ();", "+\tint oldInterpolation = gc.getInterpolation ();", "+\tint[] oldLineDash = gc.getLineDash ();", "+\tint oldLineWidth = gc.getLineWidth ();", "+\tint oldTextAntialias = gc.getTextAntialias ();", "+", "+\t\tgc.setAdvanced (oldAdvanced);", "+\t\tgc.setAlpha (oldAlpha);", "+\t\tgc.setAntialias (oldAntialias);", "+\t\tgc.setBackgroundPattern (oldBackgroundPattern);", "+\t\tgc.setForegroundPattern (oldForegroundPattern);", "+\t\tgc.setInterpolation (oldInterpolation);", "+\t\tgc.setLineDash (oldLineDash);", "+\t\tgc.setLineWidth (oldLineWidth);", "+\t\tgc.setTextAntialias (oldTextAntialias);", "-\t\tgc.setClipping (event.x, event.y, event.width, event.height);", "+\t\tgc.setClipping (cellBounds);", "+\t\tgc.setAdvanced (oldAdvanced);", "+\t\tgc.setAlpha (oldAlpha);", "+\t\tgc.setAntialias (oldAntialias);", "+\t\tgc.setBackgroundPattern (oldBackgroundPattern);", "+\t\tgc.setClipping (cellBounds);", "+\t\tgc.setForegroundPattern (oldForegroundPattern);", "+\t\tgc.setInterpolation (oldInterpolation);", "+\t\tgc.setLineDash (oldLineDash);", "+\t\tgc.setLineWidth (oldLineWidth);", "+\t\tgc.setTextAntialias (oldTextAntialias);", "-\t\tgc.setClipping (cellBounds.x, cellBounds.y, cellBounds.width, cellBounds.height);", "+\t\tgc.setClipping (cellBounds);", "-\t\tdrawFocus = isFocusItem && (event.detail & SWT.FOCUSED) != 0;", "+\t\tgc.setAdvanced (oldAdvanced);", "+\t\tgc.setAlpha (oldAlpha);", "+\t\tgc.setAntialias (oldAntialias);", "+\t\tgc.setBackgroundPattern (oldBackgroundPattern);", "+\t\tgc.setClipping (cellBounds);", "+\t\tgc.setForegroundPattern (oldForegroundPattern);", "+\t\tgc.setInterpolation (oldInterpolation);", "+\t\tgc.setLineDash (oldLineDash);", "+\t\tgc.setLineWidth (oldLineWidth);", "+\t\tgc.setTextAntialias (oldTextAntialias);", "+\t\tdrawFocus = isFocusItem && (event.detail & SWT.FOCUSED) != 0;"]}], "num": 27841}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc148e0cd0136c2731988fd76aeeb369", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19b481da4c7b888c36a2ce306f0b2b95", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/coolbar/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "df0f80ff8a78c112a82532d9d0b7052a1a5c953a", "commitAfterChange": "23e8e8964dd4f5d4f3dad5c0108120b1e7e71698", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 27, "signatureBeforeChange": " void onMouseDoubleClick(Event event)", "signatureAfterChange": " void onMouseDoubleClick(Event event)", "diff": ["+\tfixEvent(event);", "-\t\treturn;\t", "-\t}", "-", "-\tPoint location = findItem(target);", "-\tint row = location.y;", "-\tint index = location.x;", "-\tif (items[row].length > 1) {", "-\t\tPoint size = target.getSize();", "-\t\tint maxSize = getSize().x;", "-\t\tfor (int i = 0; i < items[row].length; i++) {", "-\t\t\tif (i != index) {", "-\t\t\t\tmaxSize -= items[row][i].internalGetMinimumWidth();\t", "-\t\t\t}", "-\t\t}", "-\t\tif (size.x == maxSize) {", "-\t\t\t/* The item is at its maximum width. It should be resized to its minimum width. */", "-\t\t\tint distance = size.x - target.internalGetMinimumWidth();", "-\t\t\tif (index + 1 < items[row].length) {", "-\t\t\t\t/* There is an item to the right. Maximize it. */", "-\t\t\t\tCoolItem right = items[row][index + 1];", "-\t\t\t\tmoveLeft(right, distance);", "-\t\t\t} else {", "-\t\t\t\t/* There is no item to the right. Move the item all the way right. */", "-\t\t\t\tmoveRight(target, distance);", "-\t\t\t}", "-\t\t} else if (size.x < target.preferredWidth) {", "-\t\t\t/* The item is less than its preferredWidth. Resize to preferredWidth. */", "-\t\t\tint distance = target.preferredWidth - size.x;", "-\t\t\tif (index + 1 < items[row].length) {", "-\t\t\t\tCoolItem right = items[row][index + 1];", "-\t\t\t\tmoveRight(right, distance);\t", "-\t\t\t\tdistance = target.preferredWidth - target.getSize().x;", "-\t\t\t}", "-\t\t\tif (distance > 0) {", "-\t\t\t\tmoveLeft(target, distance);", "-\t\t\t}", "-\t\t} else {", "-\t\t\t/* The item is at its minimum width. Maximize it. */", "+\t} else {", "+\t\tPoint location = findItem(target);", "+\t\tint row = location.y;", "+\t\tint index = location.x;", "+\t\tif (items[row].length > 1) {", "+\t\t\tRectangle  bounds = target.internalGetBounds();", "+\t\t\tint maxSize = getWidth ();", "-\t\t\t\t\tCoolItem item = items[row][i];", "-\t\t\t\t\titem.requestedWidth = Math.max(item.internalGetMinimumWidth(), CoolItem.MINIMUM_WIDTH); ", "+\t\t\t\t\tmaxSize -= items[row][i].internalGetMinimumWidth();\t", "-\t\t\ttarget.requestedWidth = maxSize;", "-\t\t\tlayoutItems();", "+\t\t\tif (bounds.width == maxSize) {", "+\t\t\t\t/* The item is at its maximum width. It should be resized to its minimum width. */", "+\t\t\t\tint distance = bounds.width - target.internalGetMinimumWidth();", "+\t\t\t\tif (index + 1 < items[row].length) {", "+\t\t\t\t\t/* There is an item to the right. Maximize it. */", "+\t\t\t\t\tCoolItem right = items[row][index + 1];", "+\t\t\t\t\tmoveLeft(right, distance);", "+\t\t\t\t} else {", "+\t\t\t\t\t/* There is no item to the right. Move the item all the way right. */", "+\t\t\t\t\tmoveRight(target, distance);", "+\t\t\t\t}", "+\t\t\t} else if (bounds.width < target.preferredWidth) {", "+\t\t\t\t/* The item is less than its preferredWidth. Resize to preferredWidth. */", "+\t\t\t\tint distance = target.preferredWidth - bounds.width;", "+\t\t\t\tif (index + 1 < items[row].length) {", "+\t\t\t\t\tCoolItem right = items[row][index + 1];", "+\t\t\t\t\tmoveRight(right, distance);\t", "+\t\t\t\t\tdistance = target.preferredWidth - target.internalGetBounds().width;", "+\t\t\t\t}", "+\t\t\t\tif (distance > 0) {", "+\t\t\t\t\tmoveLeft(target, distance);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t/* The item is at its minimum width. Maximize it. */", "+\t\t\t\tfor (int i = 0; i < items[row].length; i++) {", "+\t\t\t\t\tif (i != index) {", "+\t\t\t\t\t\tCoolItem item = items[row][i];", "+\t\t\t\t\t\titem.requestedWidth = Math.max(item.internalGetMinimumWidth(), CoolItem.MINIMUM_WIDTH); ", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\ttarget.requestedWidth = maxSize;", "+\t\t\t\tlayoutItems();", "+\t\t\t}", "+\t\t\tsetCursor(hoverCursor);", "-\t\tsetCursor(hoverCursor);", "+\tfixEvent(event);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bfca9a43534163c7e7887974fd89bfc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "4c2dc8a723f4f736c5adcbde3a3dc5fc74c47e04", "commitAfterChange": "e86585eda6a796524150feb3c9e6eddac488abbb", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "  LRESULT WM_MOVE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_MOVE (int wParam, int lParam)", "diff": ["-\tRECT rect = new RECT ();", "-\tOS.GetWindowRect (handle, rect);", "-\tif (moved && rect.left == oldX && rect.top == oldY) {", "-\t\treturn null;", "+\tif (moved) {", "+\t\tPoint location = getLocation ();", "+\t\tif (location.x == oldX && location.y == oldY) {", "+\t\t\treturn null;", "+\t\t}", "+\t\toldX = location.x;", "+\t\toldY = location.y;", "-\toldX = rect.left;", "-\toldY = rect.top;"]}], "num": 8846}
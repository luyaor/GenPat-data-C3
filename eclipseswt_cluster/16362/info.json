{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f7f56b3214395185a52e72f46bf80f3e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cd243cc962b54f61444684f4aaee18b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "eb0dd46e7194a9f7d813095a5dca290fae54babc", "commitAfterChange": "8174cf2444655210718c9dde4ae430f251492a85", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 66, "signatureBeforeChange": "\r \r void setKeyState(Event event, PhKeyEvent_t ke)", "signatureAfterChange": "\r \r void setKeyState(Event event, PhKeyEvent_t ke)", "diff": ["-void setKeyState(Event event, PhKeyEvent_t ke) {\r", "-\tint key_mods = ke.key_mods;\r", "-\tint button_state = ke.button_state;\r", "+\r", "+void setKeyState(Event event, PhKeyEvent_t ke) {\r", "+\t/*\r", "+\t* Fetuare in Photon.  The key_sym value is not valid when Ctrl\r", "+\t* or Alt is pressed. The fix is to detect this case and try to\r", "+\t* use the key_cap value.\r", "+\t*/\r", "+\tint key = 0;\r", "+\tif ((ke.key_flags & OS.Pk_KF_Sym_Valid) != 0) {\r", "+\t\t key = ke.key_sym;\r", "+\t} else if ((ke.key_flags & OS.Pk_KF_Cap_Valid) != 0) {\r", "+\t\tif ((ke.key_flags & (OS.Pk_KF_Key_Down | OS.Pk_KF_Key_Repeat)) != 0) {\r", "+\t\t\tkey = ke.key_cap;\r", "+\t\t\tif ((ke.key_mods & OS.Pk_KM_Ctrl) != 0) {\r", "+\t\t\t\tif ('a'  <= key && key <= 'z') key -= 'a' - 'A';\r", "+\t\t\t\tif (64 <= key && key <= 95) key -= 64;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\tevent.keyCode = Display.translateKey (key);\r", "+\tif (event.keyCode == 0) {\r", "+\t\tswitch (key) {\r", "+\t\t\tcase OS.Pk_BackSpace:\tevent.character = '\\b'; break;\r", "+\t\t\tcase OS.Pk_KP_Tab:\r", "+\t\t\tcase OS.Pk_Tab: \t\t\t\tevent.character = '\\t'; break;\r", "+\t\t\tcase OS.Pk_Linefeed:\t\tevent.character = '\\n'; break;\r", "+\t\t\tcase OS.Pk_Clear: \t\t\tevent.character = 0xB; break;\r", "+\t\t\tcase OS.Pk_Return: \t\t\tevent.character = '\\r'; break;\r", "+\t\t\tcase OS.Pk_Pause:\t\t\tevent.character = 0x13; break;\r", "+\t\t\tcase OS.Pk_Scroll_Lock:\tevent.character = 0x14; break;\r", "+\t\t\tcase OS.Pk_Escape:\t\tevent.character = 0x1B; break;\r", "+\t\t\tcase OS.Pk_Delete:\t\t\tevent.character = 0x7F; break;\r", "+\t\t\tdefault:\r", "+\t\t\t\tevent.character = (char) key;\r", "+\t\t}\r", "+\t}\r", "+\tsetInputState(event, ke.key_mods, ke.button_state);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36ac055abab72317e18a5f7ee2eb76e5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 69, "signatureBeforeChange": "  \tstatic int atkText_get_selection (int atkObject, int selection_num, int start_offset, int end_offset)", "signatureAfterChange": "  \tstatic int atkText_get_selection (int atkObject, int selection_num, int start_offset, int end_offset)", "diff": ["-\t\tif (object == null) return 0;", "+\t\tint /*long*/ parentResult = 0;", "-\t\tif (ATK.g_type_is_a (object.parentType, ATK_TEXT_TYPE)) {", "-\t\t\tint /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (object.handle));", "-\t\t\tAtkTextIface textIface = new AtkTextIface ();", "-\t\t\tATK.memmove (textIface, superType);", "-\t\t\tif (textIface.get_selection != 0) {", "-\t\t\t\tATK.call (textIface.get_selection, object.handle, selection_num, start_offset, end_offset);", "+\t\tAtkTextIface iface = getTextIface (atkObject);", "+\t\tif (iface != null && iface.get_selection != 0) {", "+\t\t\tparentResult = ATK.call (iface.get_selection, atkObject, selection_num, start_offset, end_offset);", "+\t\t}", "+\t\tif (object != null) {", "+\t\t\tint[] parentStart = new int [1];", "+\t\t\tint[] parentEnd = new int [1];", "+\t\t\tOS.memmove (parentStart, start_offset, 4);", "+\t\t\tOS.memmove (parentEnd, end_offset, 4);", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleTextExtendedListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleTextExtendedEvent event = new AccessibleTextExtendedEvent(accessible);", "+\t\t\t\tevent.index = (int)/*64*/selection_num;", "+\t\t\t\tevent.start = parentStart[0];", "+\t\t\t\tevent.end = parentEnd[0] - 1;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getSelection (event);", "+\t\t\t\t}", "+\t\t\t\tparentStart [0] = event.start;", "+\t\t\t\tparentEnd [0] = event.end + 1;", "+\t\t\t\tOS.memmove (start_offset, parentStart, 4);", "+\t\t\t\tOS.memmove (end_offset, parentEnd, 4);", "+\t\t\t\tevent.count = event.index = 0;", "+\t\t\t\tevent.type = ACC.TEXT_BOUNDARY_ALL;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getText(event);", "+\t\t\t\t}", "+\t\t\t\treturn getStringPtr (event.result);", "+\t\t\t}", "+\t\t\tif (selection_num == 0) {", "+\t\t\t\tlisteners = accessible.accessibleTextListeners;", "+\t\t\t\tlength = listeners.size();", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tAccessibleTextEvent event = new AccessibleTextEvent (accessible);", "+\t\t\t\t\tevent.childID = object.id;", "+\t\t\t\t\tevent.offset = parentStart [0];", "+\t\t\t\t\tevent.length = parentEnd [0] - parentStart [0];", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tAccessibleTextListener listener = (AccessibleTextListener) listeners.elementAt(i);", "+\t\t\t\t\t\tlistener.getSelectionRange (event);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.memmove (start_offset, new int[] {event.offset}, 4);", "+\t\t\t\t\tOS.memmove (end_offset, new int[] {event.offset + event.length}, 4);", "+\t\t\t\t\t//TODO return the selected text, should we free parent result", "+\t\t\t\t\treturn 0;", "+\t\t\t\t}", "-\t\tAccessibleTextListener[] listeners = object.getTextListeners ();", "-\t\tif (listeners.length == 0) return 0;", "-", "-\t\tAccessibleTextEvent event = new AccessibleTextEvent (object.accessible);", "-\t\tevent.childID = object.id;", "-\t\tint[] parentStart = new int [1];", "-\t\tint[] parentEnd = new int [1];", "-\t\tOS.memmove (parentStart, start_offset, 4);", "-\t\tOS.memmove (parentEnd, end_offset, 4);", "-\t\tevent.offset = parentStart [0];", "-\t\tevent.length = parentEnd [0] - parentStart [0];", "-\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\tlisteners [i].getSelectionRange (event);", "-\t\t}", "-\t\tOS.memmove (start_offset, new int[] {event.offset}, 4);", "-\t\tOS.memmove (end_offset, new int[] {event.offset + event.length}, 4);", "-\t\treturn 0;", "+\t\treturn parentResult;"]}], "num": 16362}
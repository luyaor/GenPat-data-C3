{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0c3ad2b153ea162ba9e7418855cbbab", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "928b31973bfcdd741400ad034c7ae1bf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "a397adb9835229656215e95243704829dfcbbeb5", "commitAfterChange": "def775014633899bdd73c908cbbdd1bf2fa7d5be", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tint atkAction_get_name (int index)", "signatureAfterChange": "  \tint atkAction_get_name (int index)", "diff": ["-\t\tif (accessible.getAccessibleListeners ().length != 0) {", "-\t\t\tAccessibleControlListener[] listeners = accessible.getControlListeners ();", "-\t\t\tAccessibleControlEvent event = new AccessibleControlEvent (this);", "-\t\t\tevent.childID = id;", "-\t\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\t\tlisteners [i].getDefaultAction (event);\t\t\t\t", "-\t\t\t} ", "-\t\t\tif (event.result != null) {", "-\t\t\t\tif (actionNamePtr != -1) OS.g_free (actionNamePtr);", "-\t\t\t\tbyte[] name = Converter.wcsToMbcs (null, event.result, true);", "-\t\t\t\tactionNamePtr = OS.g_malloc (name.length);", "-\t\t\t\tOS.memmove (actionNamePtr, name, name.length);", "-\t\t\t\treturn actionNamePtr;", "-\t\t\t}", "-\t\t}\t", "+\t\tint parentResult = 0;", "-\t\t\tint superType = OS.g_type_class_peek (parentType);", "+\t\t\tint superType = OS.g_type_interface_peek_parent (ATK.ATK_ACTION_GET_IFACE (handle));", "-\t\t\t\treturn OS.call (actionIface.get_name, handle, index);", "+\t\t\t\tparentResult = OS.call (actionIface.get_name, handle, index);", "-\t\treturn 0;", "+\t\tAccessibleControlListener[] listeners = accessible.getControlListeners ();", "+\t\tif (listeners.length == 0) return parentResult;", "+", "+\t\tAccessibleControlEvent event = new AccessibleControlEvent (this);", "+\t\tevent.childID = id;", "+\t\tif (parentResult != 0) {", "+\t\t\tint length = OS.strlen (parentResult);", "+\t\t\tbyte [] buffer = new byte [length];", "+\t\t\tOS.memmove (buffer, parentResult, length);", "+\t\t\tevent.result = new String (Converter.mbcsToWcs (null, buffer));", "+\t\t}", "+\t\tfor (int i = 0; i < listeners.length; i++) {", "+\t\t\tlisteners [i].getDefaultAction (event);\t\t\t\t", "+\t\t} ", "+\t\tif (event.result == null) return parentResult;", "+\t\tif (actionNamePtr != -1) OS.g_free (actionNamePtr);", "+\t\tbyte[] name = Converter.wcsToMbcs (null, event.result, true);", "+\t\tactionNamePtr = OS.g_malloc (name.length);", "+\t\tOS.memmove (actionNamePtr, name, name.length);", "+\t\treturn actionNamePtr;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bcd291f57da9140ed226589fbadb671", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "a397adb9835229656215e95243704829dfcbbeb5", "commitAfterChange": "def775014633899bdd73c908cbbdd1bf2fa7d5be", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tint atkAction_get_keybinding (int index)", "signatureAfterChange": " \t \tint atkAction_get_keybinding (int index)", "diff": ["-\t\tif (accessible.getAccessibleListeners ().length != 0) {", "-\t\t\tAccessibleListener[] listeners = accessible.getAccessibleListeners ();", "-\t\t\tAccessibleEvent event = new AccessibleEvent (this);", "-\t\t\tevent.childID = id;", "-\t\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\t\tlisteners [i].getKeyboardShortcut (event);\t", "-\t\t\t} ", "-\t\t\tif (event.result != null) {", "-\t\t\t\tif (keybindingPtr != -1) OS.g_free (keybindingPtr);", "-\t\t\t\tbyte[] name = Converter.wcsToMbcs (null, event.result, true);", "-\t\t\t\tkeybindingPtr = OS.g_malloc (name.length);", "-\t\t\t\tOS.memmove (keybindingPtr, name, name.length);", "-\t\t\t\treturn keybindingPtr; \t", "-\t\t\t}", "-\t\t}", "+\t\tint parentResult = 0;", "-\t\t\tint superType = OS.g_type_class_peek (parentType);", "+\t\t\tint superType = OS.g_type_interface_peek_parent (ATK.ATK_ACTION_GET_IFACE (handle));", "-\t\t\t\treturn OS.call (actionIface.get_keybinding, handle, index);", "+\t\t\t\tparentResult = OS.call (actionIface.get_keybinding, handle, index);", "-\t\treturn 0;", "+\t\tAccessibleListener[] listeners = accessible.getAccessibleListeners ();", "+\t\tif (listeners.length == 0) return parentResult;", "+", "+\t\tAccessibleEvent event = new AccessibleEvent (this);", "+\t\tevent.childID = id;", "+\t\tif (parentResult != 0) {", "+\t\t\tint length = OS.strlen (parentResult);", "+\t\t\tbyte [] buffer = new byte [length];", "+\t\t\tOS.memmove (buffer, parentResult, length);", "+\t\t\tevent.result = new String (Converter.mbcsToWcs (null, buffer));", "+\t\t}", "+\t\tfor (int i = 0; i < listeners.length; i++) {", "+\t\t\tlisteners [i].getKeyboardShortcut (event);\t", "+\t\t} ", "+\t\tif (event.result == null) return parentResult;", "+\t\tif (keybindingPtr != -1) OS.g_free (keybindingPtr);", "+\t\tbyte[] name = Converter.wcsToMbcs (null, event.result, true);", "+\t\tkeybindingPtr = OS.g_malloc (name.length);", "+\t\tOS.memmove (keybindingPtr, name, name.length);", "+\t\treturn keybindingPtr; \t"]}], "num": 34305}
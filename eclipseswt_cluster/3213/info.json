{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "20e4d81a1fc33843c023cec9362bd64c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95ae860512e2dd41ad16a860867a5579", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "6180557aa3fada2bc7d0c8c5852d95f2f944e839", "commitAfterChange": "3cc117a084f09d9b31be6895a4f37988f03ca116", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "  public boolean post (Event event)", "signatureAfterChange": "  public boolean post(Event event)", "diff": ["-public boolean post (Event event) {", "+public boolean post(Event event) {", "+\tint type = event.type;", "+\tswitch (type) {", "+\t\tcase SWT.KeyDown :", "+\t\tcase SWT.KeyUp : {", "+\t\t\tint vKey = Display.untranslateKey (event.keyCode);", "+\t\t\tif (vKey != 0) {", "+\t\t\t\treturn OS.CGPostKeyboardEvent (0, vKey, type == SWT.KeyDown) == 0;", "+\t\t\t} else {", "+\t\t\t\tvKey = -1;", "+\t\t\t\tint code = -1, kchrPtr = OS.GetScriptManagerVariable ((short) OS.smKCHRCache);", "+\t\t\t\tchar key = event.character;", "+\t\t\t\tint [] state = new int [1];", "+\t\t\t\tfor (int i = 0 ; i <= 0x7F ; i++) {", "+\t\t\t\t\tint result = OS.KeyTranslate (kchrPtr, (short) i, state);", "+\t\t\t\t\tif (result <= 0x7f) {", "+\t\t\t\t\t\tcode = result & 0x7f;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint [] encoding = new int [1];", "+\t\t\t\t\t\tshort keyScript = (short) OS.GetScriptManagerVariable ((short) OS.smKeyScript);", "+\t\t\t\t\t\tshort regionCode = (short) OS.GetScriptManagerVariable ((short) OS.smRegionCode);", "+\t\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, regionCode, null, encoding) == OS.paramErr) {", "+\t\t\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, (short) OS.kTextRegionDontCare, null, encoding) == OS.paramErr) {", "+\t\t\t\t\t\t\t\tencoding [0] = OS.kTextEncodingMacRoman;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint [] encodingInfo = new int [1];", "+\t\t\t\t\t\tOS.CreateTextToUnicodeInfoByEncoding (encoding [0], encodingInfo);", "+\t\t\t\t\t\tif (encodingInfo [0] != 0) {", "+\t\t\t\t\t\t\tchar [] chars = new char [1];", "+\t\t\t\t\t\t\tint [] nchars = new int [1];", "+\t\t\t\t\t\t\tbyte [] buffer = new byte [2];", "+\t\t\t\t\t\t\tbuffer [0] = 1;", "+\t\t\t\t\t\t\tbuffer [1] = (byte) (result & 0xFF);", "+\t\t\t\t\t\t\tOS.ConvertFromPStringToUnicode (encodingInfo [0], buffer, chars.length * 2, nchars, chars);", "+\t\t\t\t\t\t\tOS.DisposeTextToUnicodeInfo (encodingInfo);", "+\t\t\t\t\t\t\tcode = chars [0];", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (code == key) {", "+\t\t\t\t\t\tvKey = i;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (vKey == -1) return false;", "+\t\t\t\treturn OS.CGPostKeyboardEvent (key, vKey, type == SWT.KeyDown) == 0;", "+\t\t\t}", "+\t\t}", "+\t\tcase SWT.MouseDown :", "+\t\tcase SWT.MouseMove : ", "+\t\tcase SWT.MouseUp : {", "+\t\t\tCGPoint mouseCursorPosition = new CGPoint ();", "+\t\t\tif (type == SWT.MouseMove) {", "+\t\t\t\tmouseCursorPosition.x = event.x;", "+\t\t\t\tmouseCursorPosition.y = event.y;", "+\t\t\t\tint chord = OS.GetCurrentEventButtonState ();", "+\t\t\t\treturn OS.CGPostMouseEvent (mouseCursorPosition, true, 1, ((chord & 0x1) != 0)) == 0;", "+\t\t\t} else {", "+\t\t\t\tif (event.button != 1) return false;", "+\t\t\t\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\t\tOS.GetGlobalMouse (pt);", "+\t\t\t\tmouseCursorPosition.x = pt.h;", "+\t\t\t\tmouseCursorPosition.y = pt.v;", "+\t\t\t\treturn OS.CGPostMouseEvent (mouseCursorPosition, true, 1, type == SWT.MouseDown) == 0;", "+\t\t\t}", "+\t\t}", "+\t} "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e2c497c4f68c0acc71800c8ef30160b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "c6e5d71f5dee25c0fb8140fb735ceef0c2a1b122", "commitAfterChange": "e3c616f9231b29034092c983276e8473a94f5d9d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void computeRuns()", "signatureAfterChange": "  void computeRuns()", "diff": ["-\tint length = text.length();", "-\tif (length != 0) {", "+\tint textLength = text.length();", "+\tif (textLength != 0) {", "+\t\tchar[] chars = new char[textLength + 1];", "+\t\ttext.getChars(0, textLength, chars, 1);", "+\t\tchars[0] = ZWS;", "+\t\tint breakCount = 0;", "+\t\tfor (int i = 0; i < chars.length; i++) {", "+\t\t\tchar c = chars[i];", "+\t\t\tif (c == '\\n' || c == '\\r') {", "+\t\t\t\tbreakCount++;", "+\t\t\t}", "+\t\t}", "+\t\thardBreaks = new int [breakCount];", "+\t\tbreakCount = 0;", "+\t\tfor (int i = 0; i < chars.length; i++) {", "+\t\t\tchar c = chars[i];", "+\t\t\tif (c == '\\n' || c == '\\r') {", "+\t\t\t\tchars[i] = ZWS;", "+\t\t\t\thardBreaks[breakCount++] = i;", "+\t\t\t}", "+\t\t}", "+\t\tint newTextPtr = OS.NewPtr(chars.length * 2);", "+\t\tOS.memcpy(newTextPtr, chars, chars.length * 2);", "+\t\tOS.ATSUSetTextPointerLocation(layout, newTextPtr, 0, chars.length, chars.length);", "+\t\tOS.ATSUSetTransientFontMatching(layout, true);", "+\t\tif (textPtr != 0) OS.DisposePtr(textPtr);", "+\t\ttextPtr = newTextPtr;", "+\t}\t", "+\tint[] buffer = new int[1];", "+\tint length = translateOffset(text.length());", "+\tif (textLength != 0) {", "-\t\t\tint runLength = styles[i + 1].start - run.start;", "-\t\t\tOS.ATSUSetRunStyle(layout, run.atsuStyle, run.start, runLength);", "+\t\t\tint start = translateOffset(run.start);", "+\t\t\tint runLength = translateOffset(styles[i + 1].start) - start;", "+\t\t\tOS.ATSUSetRunStyle(layout, run.atsuStyle, start, runLength);", "-\t\tint[] buffer = new int[1];", "-\t\tif (ascent != -1) {", "-\t\t\tOS.ATSUGetLayoutControl(layout, OS.kATSULineAscentTag, 4, buffer, null);", "+\t\tif (indent >= 0) {", "-\t\t\tbuffer[0] = OS.Long2Fix(Math.max(ascent, OS.Fix2Long(buffer[0])));", "+\t\t\tbuffer[0] = OS.Long2Fix(indent);", "-\t\t\tint[] tags = new int[]{OS.kATSULineAscentTag};", "+\t\t\tint[] tags = new int[]{OS.kATSUImposeWidthTag};", "-\t\t\tOS.ATSUSetLineControls(layout, 0, tags.length, tags, sizes, values);", "+\t\t\tOS.ATSUCreateStyle(buffer);", "+\t\t\tindentStyle = buffer[0];", "+\t\t\tOS.ATSUSetAttributes(indentStyle, tags.length, tags, sizes, values);", "-\t\t}", "-\t\tif (descent != -1) {", "-\t\t\tOS.ATSUGetLayoutControl(layout, OS.kATSULineDescentTag, 4, buffer, null);", "-\t\t\tint ptr = OS.NewPtr(4);", "-\t\t\tbuffer[0] = OS.Long2Fix(Math.max(descent, OS.Fix2Long(buffer[0])));", "-\t\t\tOS.memcpy(ptr, buffer, 4);", "-\t\t\tint[] tags = new int[]{OS.kATSULineDescentTag};", "-\t\t\tint[] sizes = new int[]{4};", "-\t\t\tint[] values = new int[]{ptr};", "-\t\t\tOS.ATSUSetLineControls(layout, 0, tags.length, tags, sizes, values);", "-\t\t\tOS.DisposePtr(ptr);", "+\t\t\tOS.ATSUSetRunStyle(layout, indentStyle, 0, 1);", "+\t\t\tfor (int i = 0; i < hardBreaks.length; i++) {", "+\t\t\t\tint offset = hardBreaks[i];", "+\t\t\t\tOS.ATSUSetRunStyle(layout, indentStyle, offset, 1);", "+\t\t\t}", "-\t\tint wrapWidth = OS.Fix2Long(buffer[0]);", "-\t\tint width = wrapWidth == 0 ? 0x7fff : wrapWidth;", "-\t\tOS.ATSUBatchBreakLines(layout, 0, OS.kATSUToTextEnd, OS.Long2Fix(width), buffer);", "-\t\tint count = Math.max(0, buffer[0]);", "-\t\tbreaks = new int[count + 1];", "-\t\tOS.ATSUGetSoftLineBreaks(layout, 0, OS.kATSUToTextEnd, count, breaks, buffer);", "-\t\tbreaks[count] = length;", "+\t\tint wrapWidth = buffer[0];", "+\t\tfor (int i=0, start=0; i<hardBreaks.length+1; i++) {", "+\t\t\tint hardBreak = i == hardBreaks.length ? length : hardBreaks[i];", "+\t\t\tbuffer[0] = 0;", "+\t\t\tif (wrapWidth != 0) OS.ATSUBatchBreakLines(layout, start, hardBreak - start, wrapWidth, buffer);", "+\t\t\tOS.ATSUSetSoftLineBreak(layout, hardBreak);", "+\t\t\tstart = hardBreak;", "+\t\t}", "+\t\tOS.ATSUGetSoftLineBreaks(layout, 0, OS.kATSUToTextEnd, 0, null, buffer);", "+\t\tint count = buffer[0];", "+\t\tbreaks = new int[count];", "+\t\tOS.ATSUGetSoftLineBreaks(layout, 0, OS.kATSUToTextEnd, count, breaks, null);", "+\t\t\tif (ascent != -1) {", "+\t\t\t\tint ptr = OS.NewPtr(4);", "+\t\t\t\tbuffer[0] = OS.kATSUseLineHeight;", "+\t\t\t\tOS.memcpy(ptr, buffer, 4);", "+\t\t\t\tint[] tags = new int[]{OS.kATSULineAscentTag};", "+\t\t\t\tint[] sizes = new int[]{4};", "+\t\t\t\tint[] values = new int[]{ptr};", "+\t\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "+\t\t\t\tOS.ATSUGetLineControl(layout, start, OS.kATSULineAscentTag, 4, buffer, null);", "+\t\t\t\tbuffer[0] = OS.Long2Fix(Math.max(ascent, OS.Fix2Long(buffer[0])));", "+\t\t\t\tOS.memcpy(ptr, buffer, 4);", "+\t\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "+\t\t\t\tOS.DisposePtr(ptr);", "+\t\t\t}", "+\t\t\tif (descent != -1) {", "+\t\t\t\tint ptr = OS.NewPtr(4);", "+\t\t\t\tbuffer[0] = OS.kATSUseLineHeight;", "+\t\t\t\tOS.memcpy(ptr, buffer, 4);", "+\t\t\t\tint[] tags = new int[]{OS.kATSULineDescentTag};", "+\t\t\t\tint[] sizes = new int[]{4};", "+\t\t\t\tint[] values = new int[]{ptr};", "+\t\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "+\t\t\t\tOS.ATSUGetLineControl(layout, start, OS.kATSULineDescentTag, 4, buffer, null);", "+\t\t\t\tbuffer[0] = OS.Long2Fix(Math.max(descent, OS.Fix2Long(buffer[0])));", "+\t\t\t\tOS.memcpy(ptr, buffer, 4);", "+\t\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "+\t\t\t\tOS.DisposePtr(ptr);", "+\t\t\t}", "-\t\t\tint lineLength = skipHardBreak(lineBreak) - start;", "-\t\t\tOS.ATSUGetGlyphBounds(layout, 0, 0, start, lineLength == 0 ? 1 : lineLength, (short)OS.kATSUseDeviceOrigins, 1, trapezoid, null);", "+\t\t\tint lineLength = lineBreak - start;", "+\t\t\tOS.ATSUGetGlyphBounds(layout, 0, 0, start, lineLength, (short)OS.kATSUseDeviceOrigins, 1, trapezoid, null);", "-\t\t\tlineHeight[i] = OS.Fix2Long(trapezoid.lowerRight_y) + lineAscent[i];", "+\t\t\tlineHeight[i] = OS.Fix2Long(trapezoid.lowerRight_y) + lineAscent[i] + spacing;"]}], "num": 3213}
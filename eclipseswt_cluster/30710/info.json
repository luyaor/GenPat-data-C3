{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c89a570c84fed609543005d1c46631b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "addcb0010cb9d4643381a9425d4ebe16", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 56, "signatureBeforeChange": "\r int processMouseMove (int callData)", "signatureAfterChange": "\r int XPointerMotion (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processMouseMove (int callData) {\r", "-\tDisplay display = getDisplay ();\r", "-\tdisplay.addMouseHoverTimeOut (handle);\r", "-\r", "-\t/*\r", "-\t* Forward the mouse event to the parent.\r", "-\t* This is necessary so that mouse listeners\r", "-\t* in the parent will be called, despite the\r", "-\t* fact that the event did not really occur\r", "-\t* in X in the parent.  This is done to be\r", "-\t* compatible with Windows.\r", "-\t*/\r", "-\tXButtonEvent xEvent = new XButtonEvent ();\r", "-\tOS.memmove (xEvent, callData, XButtonEvent.sizeof);\r", "-\tint [] argList = {OS.XmNx, 0, OS.XmNy, 0};\r", "-\tOS.XtGetValues (handle, argList, argList.length / 2);\r", "-\txEvent.window = OS.XtWindow (parent.handle);\r", "-\txEvent.x += argList [1];  xEvent.y += argList [3];\r", "-\t/*\r", "-\t* This code is intentionally commented.\r", "-\t* Currently, the implementation of the\r", "-\t* mouse move code in the parent interferes\r", "-\t* with tool tips for tool items.\r", "-\t*/\r", "-//\tOS.memmove (callData, xEvent, XButtonEvent.sizeof);\r", "-//\tparent.processMouseMove (callData);\r", "-\tparent.sendMouseEvent (SWT.MouseMove, 0, xEvent);\r", "-\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XPointerMotion (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tDisplay display = getDisplay ();\r", "+\tdisplay.addMouseHoverTimeOut (handle);\r", "+\r", "+\t/*\r", "+\t* Forward the mouse event to the parent.\r", "+\t* This is necessary so that mouse listeners\r", "+\t* in the parent will be called, despite the\r", "+\t* fact that the event did not really occur\r", "+\t* in X in the parent.  This is done to be\r", "+\t* compatible with Windows.\r", "+\t*/\r", "+\tXButtonEvent xEvent = new XButtonEvent ();\r", "+\tOS.memmove (xEvent, call_data, XButtonEvent.sizeof);\r", "+\tint [] argList = {OS.XmNx, 0, OS.XmNy, 0};\r", "+\tOS.XtGetValues (handle, argList, argList.length / 2);\r", "+\txEvent.window = OS.XtWindow (parent.handle);\r", "+\txEvent.x += argList [1];  xEvent.y += argList [3];\r", "+\t/*\r", "+\t* This code is intentionally commented.\r", "+\t* Currently, the implementation of the\r", "+\t* mouse move code in the parent interferes\r", "+\t* with tool tips for tool items.\r", "+\t*/\r", "+//\tOS.memmove (callData, xEvent, XButtonEvent.sizeof);\r", "+//\tparent.XPointerMotion (w, client_data, call_data, continue_to_dispatch);\r", "+\tparent.sendMouseEvent (SWT.MouseMove, 0, xEvent);\r", "+\r", "+\treturn 0;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7507cc9ee7ef2e86b5cefcecbb4ff05e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 46, "signatureBeforeChange": "\r \r int processMouseUp (int callData)", "signatureAfterChange": "\r int processMouseUp (int callData)", "diff": ["-int processMouseUp (int callData) {\r", "-\tgetDisplay ().hideToolTip();\t\r", "-\r", "-\t/**\r", "-\t* Bug in Motif. The activate callback is unreliable on \r", "-\t* drawn buttons. Rather than relying on it to generate\r", "-\t* selection events, use the mouseUp event.\r", "-\tint [] argList = {OS.XmNwidth, 0, OS.XmNheight, 0};\r", "-\tif (xEvent.x >= 0 && xEvent.y >= 0 && xEvent.x <= argList[1] && xEvent.y <= argList[3]) {\r", "-\t\tprocessSelection(0);\r", "-\t}\r", "-\tsetDrawPressed(set);\t\r", "+int processMouseUp (int callData) {\r", "+\tDisplay display = getDisplay ();\r", "+\tdisplay.hideToolTip(); \r", "+\tXButtonEvent xEvent = new XButtonEvent ();\r", "+\tOS.memmove (xEvent, callData, XButtonEvent.sizeof);\r", "+\tif (xEvent.button == 1) {\r", "+\t\tint [] argList = {OS.XmNwidth, 0, OS.XmNheight, 0};\r", "+\t\tOS.XtGetValues (handle, argList, argList.length / 2);\r", "+\t\tint width = argList [1], height = argList [3];\r", "+\t\tif (0 <= xEvent.x && xEvent.x < width && 0 <= xEvent.y && xEvent.y < height) {\r", "+\t\t\tif ((style & SWT.RADIO) != 0) {\r", "+\t\t\t\tselectRadio ();\r", "+\t\t\t} else {\r", "+\t\t\t\tif ((style & SWT.CHECK) != 0) setSelection(!set);\t\t\t\r", "+\t\t\t}\r", "+\t\t\tEvent event = new Event ();\r", "+\t\t\tif ((style & SWT.DROP_DOWN) != 0) {\r", "+\t\t\t\tif (xEvent.x > width - 12) event.detail = SWT.ARROW;\r", "+\t\t\t}\r", "+\t\t\tpostEvent (SWT.Selection, event);\r", "+\t\t}\r", "+\t\tsetDrawPressed(set);\r", "+\t}\r", "+\t/*\r", "+\t* Forward the mouse event to the parent.\r", "+\t* This is necessary so that mouse listeners\r", "+\t* in the parent will be called, despite the\r", "+\t* fact that the event did not really occur\r", "+\t* in X in the parent.  This is done to be\r", "+\t* compatible with Windows.\r", "+\t*/\r", "+\tint [] argList = {OS.XmNx, 0, OS.XmNy, 0};\r", "+\tOS.XtGetValues (handle, argList, argList.length / 2);\r", "+\txEvent.window = OS.XtWindow (parent.handle);\r", "+\txEvent.x += argList [1];  xEvent.y += argList [3];\r", "+\tOS.memmove (callData, xEvent, XButtonEvent.sizeof);\r", "+\tparent.processMouseUp (callData);\r", "+\r", "+\treturn 0;\r", "+}\r"]}], "num": 30710}
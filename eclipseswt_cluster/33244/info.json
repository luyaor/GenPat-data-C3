{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0d061519633f62b15ef3d7e6520584a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "140f73288be96256ab27aa188947cce1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolderLayout.java", "commitBeforeChange": "021c9ffb1f03bab865a8755698d6a0a3d739b6cc", "commitAfterChange": "a22dc50286ff5b97c74cd0b12653f08fe95a1ee7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " protected Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)", "signatureAfterChange": " protected Point computeSize(Composite composite, int wHint, int hHint, boolean flushCache)", "diff": ["-\ttabW += 3;", "-\tif (folder.showMax) tabW += renderer.computeSize(CTabFolderRenderer.PART_MAX_BUTTON, SWT.NONE, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "-\tif (folder.showMin) tabW += renderer.computeSize(CTabFolderRenderer.PART_MIN_BUTTON, SWT.NONE, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "-\tif (folder.single) tabW += renderer.computeSize(CTabFolderRenderer.PART_CHEVRON_BUTTON, SWT.NONE, gc, SWT.DEFAULT, SWT.DEFAULT).x;", "-\tif (folder.topRight != null) {", "-\t\tPoint pt = folder.topRight.computeSize(SWT.DEFAULT, folder.tabHeight, flushCache);", "-\t\ttabW += 3 + pt.x;", "+\tint width = 0, wrapHeight = 0;", "+\tboolean leftControl = false, rightControl = false;", "+\tif (wHint == SWT.DEFAULT) {", "+\t\tfor (int i = 0; i < folder.controls.length; i++) {", "+\t\t\tControl control = folder.controls[i];", "+\t\t\tif (control.getVisible()) {", "+\t\t\t\tif ((folder.controlAlignments[i] & SWT.LEAD) != 0) {", "+\t\t\t\t\tleftControl = true;", "+\t\t\t\t} else {", "+\t\t\t\t\trightControl = true;", "+\t\t\t\t}", "+\t\t\t\twidth += control.computeSize(SWT.DEFAULT, SWT.DEFAULT).x;", "+\t\t\t}", "+\t\t}", "+\t} else {", "+\t\tPoint size = new Point (wHint, hHint);", "+\t\tboolean[][] positions = new boolean[1][];", "+\t\tRectangle[] rects = folder.computeControlBounds(size, positions);", "+\t\tint minY = Integer.MAX_VALUE, maxY = 0;", "+\t\tfor (int i = 0; i < rects.length; i++) {", "+\t\t\tif (positions[0][i]) {", "+\t\t\t\tminY = Math.min(minY, rects[i].y);", "+\t\t\t\tmaxY = Math.max(maxY, rects[i].y + rects[i].height);", "+\t\t\t\twrapHeight = maxY - minY;", "+\t\t\t} else {", "+\t\t\t\tif ((folder.controlAlignments[i] & SWT.LEAD) != 0) {", "+\t\t\t\t\tleftControl = true;", "+\t\t\t\t} else {", "+\t\t\t\t\trightControl = true;", "+\t\t\t\t}", "+\t\t\t\twidth += rects[i].width;", "+\t\t\t}", "+\t\t}", "+\tif (leftControl) width += CTabFolder.SPACING * 2;", "+\tif (rightControl) width += CTabFolder.SPACING * 2;", "+\ttabW += width;", "-\tint minWidth = Math.max(tabW, controlW);", "-\tint minHeight = (folder.minimized) ? 0 : controlH;", "+\tint minWidth = Math.max(tabW, controlW + folder.marginWidth);", "+\tint minHeight = (folder.minimized) ? 0 : controlH + wrapHeight;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "426489a0d5bc91373cad666b07560571", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "f4bb8ef7d86d4b06d34d232ac624ae216be4183a", "commitAfterChange": "358e077459326bfde3a675b949aa20349d21bc3d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 6, "signatureBeforeChange": "  @Override public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  @Override public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+", "+\t//For Date and Time, we cache the preffered size as there is no need to recompute it.", "+\tif (!changed && (isDate () || isTime ()) && OS.GTK3 && prefferedSize != null) {", "+\t\twidth = (wHint != SWT.DEFAULT) ? wHint : prefferedSize.x;", "+\t\theight= (hHint != SWT.DEFAULT) ? hHint : prefferedSize.y;", "+\t\treturn new Point (width,height);", "+\t}", "+", "-\t\tif ((style & SWT.CALENDAR) != 0) {", "-\t\t\tPoint size = computeNativeSize(handle, wHint, hHint, changed);", "+\t\tif (isCalendar ()) {", "+\t\t\tPoint size = computeNativeSize (containerHandle, wHint, hHint, changed);", "-\t\t} else { /* SWT.DATE and SWT.TIME */", "-\t\t\tGC gc = new GC(text);", "-\t\t\tPoint textSize = gc.stringExtent(getComputeSizeString(style));", "-\t\t\tgc.dispose();", "-\t\t\tRectangle trim = text.computeTrim(0, 0, textSize.x, textSize.y);", "-\t\t\tPoint buttonSize = down.computeSize(SWT.DEFAULT, SWT.DEFAULT, changed);", "-\t\t\twidth = trim.width + buttonSize.x;", "-\t\t\theight = Math.max(trim.height, buttonSize.y);", "+\t\t} else {", "+\t\t\tPoint textSize = computeNativeSize (textEntryHandle, wHint, hHint, changed);", "+\t\t\tRectangle trim = computeTrim (0,0, textSize.x,textSize.y);", "+\t\t\tif (isDateWithDropDownButton ()){", "+\t\t\t\tPoint buttonSize = down.computeSize (SWT.DEFAULT, SWT.DEFAULT, changed);", "+\t\t\t\twidth = trim.width + buttonSize.x;", "+\t\t\t\theight = Math.max (trim.height, buttonSize.y);", "+\t\t\t} else if (isDate () || isTime ()) {", "+\t\t\t\tif (OS.GTK3) {", "+\t\t\t\t\twidth = trim.width;", "+\t\t\t\t\theight = trim.height;", "+\t\t\t\t} else", "+\t\t\t\t{ //in GTK2, spin button looks broken if you incorperate the trim. Thus do not compute trim.", "+\t\t\t\t\twidth = textSize.x;", "+\t\t\t\t\theight = textSize.y;", "+\t\t\t\t}", "+\t\t\t}", "-\treturn new Point (width + 2*borderWidth, height+ 2*borderWidth);", "+", "+\tif (prefferedSize == null && (isDateWithDropDownButton () && OS.GTK3)) {", "+\t\tprefferedSize = new Point (width + 2*borderWidth, height+ 2*borderWidth);", "+\t\treturn prefferedSize;", "+\t} else {", "+\t\treturn new Point (width + 2*borderWidth, height+ 2*borderWidth);", "+\t}"]}], "num": 33244}
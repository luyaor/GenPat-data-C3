{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "886b6f02abb7badd26329a143050ef05", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75758658c06f627af99e3abd6aa9be15", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "0a67064f2ba7661bc8ac060cad6b32fe1e6f5936", "commitAfterChange": "e204f9acdfc99e6e29d970c4d42f50fb2ccf4ebb", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 43, "signatureBeforeChange": "  void showItem (int hItem)", "signatureAfterChange": "  void showItem (int hItem)", "diff": ["-\t/*", "-\t* Bug in Windows.  When TVM_ENSUREVISIBLE is used to ensure", "-\t* that an item is visible and the client area of the tree is", "-\t* smaller that the size of one item, TVM_ENSUREVISIBLE makes", "-\t* the next item in the tree visible by making it the top item", "-\t* instead of making the desired item visible.  The fix is to", "-\t* detect the case when the client area is too small and make", "-\t* the desired visible item be the top item in the tree.", "-\t*/", "-\tif (OS.SendMessage (handle, OS.TVM_GETVISIBLECOUNT, 0, 0) == 0) {", "+\tif (fixPinheadScroll (hItem)) return;", "+\tboolean scroll = true;", "+\tRECT itemRect = new RECT ();", "+\titemRect.left = hItem;", "+\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, itemRect) != 0) {", "+\t\tforceResize ();", "+\t\tRECT rect = new RECT ();", "+\t\tOS.GetClientRect (handle, rect);", "+\t\tPOINT pt = new POINT ();", "+\t\tpt.x = itemRect.left;", "+\t\tpt.y = itemRect.top;", "+\t\tif (OS.PtInRect (rect, pt)) {", "+\t\t\tpt.y = itemRect.bottom;", "+\t\t\tif (OS.PtInRect (rect, pt)) scroll = false;", "+\t\t}", "+\t}", "+\tif (scroll) {", "-\t\tOS.SendMessage (handle, OS.TVM_SELECTITEM, OS.TVGN_FIRSTVISIBLE, hItem);", "-\t\tOS.SendMessage (handle, OS.WM_HSCROLL, OS.SB_TOP, 0);", "+\t\tOS.SendMessage (handle, OS.TVM_ENSUREVISIBLE, 0, hItem);", "-\t} else {", "-\t\tboolean scroll = true;", "-\t\tRECT itemRect = new RECT ();", "-\t\titemRect.left = hItem;", "-\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, itemRect) != 0) {", "-\t\t\tforceResize ();", "-\t\t\tRECT rect = new RECT ();", "-\t\t\tOS.GetClientRect (handle, rect);", "-\t\t\tPOINT pt = new POINT ();", "-\t\t\tpt.x = itemRect.left;", "-\t\t\tpt.y = itemRect.top;", "-\t\t\tif (OS.PtInRect (rect, pt)) {", "-\t\t\t\tpt.y = itemRect.bottom;", "-\t\t\t\tif (OS.PtInRect (rect, pt)) scroll = false;", "-\t\t\t}", "-\t\t}", "-\t\tif (scroll) {", "-\t\t\tboolean fixScroll = checkScroll (hItem);", "-\t\t\tif (fixScroll) OS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);", "-\t\t\tOS.SendMessage (handle, OS.TVM_ENSUREVISIBLE, 0, hItem);", "-\t\t\tif (fixScroll) OS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ebfe4d0b4a0dc7b86ca955f693f236f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "83e1dac1af837594e187e72e8d4c2cd60386743f", "commitAfterChange": "aba5823d7335842a1956cc66c799c92c1aafef99", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 42, "signatureBeforeChange": "  boolean fixPinheadScroll (int hItem)", "signatureAfterChange": "  void showItem (int hItem)", "diff": ["-boolean fixPinheadScroll (int hItem) {", "-\t/*", "-\t* Bug in Windows.  When TVM_ENSUREVISIBLE is used to ensure", "-\t* that an item is visible and the client area of the tree is", "-\t* smaller that the size of one item, TVM_ENSUREVISIBLE makes", "-\t* the next item in the tree visible by making it the top item", "-\t* instead of making the desired item visible.  The fix is to", "-\t* detect the case when the client area is too small and make", "-\t* the desired visible item be the top item in the tree.", "-\t*/", "-\tif (OS.SendMessage (handle, OS.TVM_GETVISIBLECOUNT, 0, 0) == 0) {", "-\t\tboolean fixScroll = checkScroll (hItem);", "-\t\tif (fixScroll) OS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);", "-\t\tOS.SendMessage (handle, OS.TVM_SELECTITEM, OS.TVGN_FIRSTVISIBLE, hItem);", "-\t\tOS.SendMessage (handle, OS.WM_HSCROLL, OS.SB_TOP, 0);", "-\t\tif (fixScroll) OS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);", "-\t\treturn true;", "-\t}", "-\treturn false;", "-}", "+\t/*", "+\t* Bug in Windows.  When TVM_ENSUREVISIBLE is used to ensure", "+\t* that an item is visible and the client area of the tree is", "+\t* smaller that the size of one item, TVM_ENSUREVISIBLE makes", "+\t* the next item in the tree visible by making it the top item", "+\t* instead of making the desired item visible.  The fix is to", "+\t* detect the case when the client area is too small and make", "+\t* the desired visible item be the top item in the tree.", "+\t*/", "+\tif (OS.SendMessage (handle, OS.TVM_GETVISIBLECOUNT, 0, 0) == 0) {", "+\t\tOS.SendMessage (handle, OS.TVM_SELECTITEM, OS.TVGN_FIRSTVISIBLE, hItem);", "+\t\tOS.SendMessage (handle, OS.WM_HSCROLL, OS.SB_TOP, 0);", "+\t} else {", "+\t\tboolean scroll = true;", "+\t\tRECT itemRect = new RECT ();", "+\t\titemRect.left = hItem;", "+\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, itemRect) != 0) {", "+\t\t\tforceResize ();", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\tPOINT pt = new POINT ();", "+\t\t\tpt.x = itemRect.left;", "+\t\t\tpt.y = itemRect.top;", "+\t\t\tif (OS.PtInRect (rect, pt)) {", "+\t\t\t\tpt.y = itemRect.bottom;", "+\t\t\t\tif (OS.PtInRect (rect, pt)) scroll = false;", "+\t\t\t}", "+\t\t}", "+\t\tif (scroll) {", "+\t\t\tboolean fixScroll = checkScroll (hItem);", "+\t\t\tif (fixScroll) OS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);", "+\t\t\tOS.SendMessage (handle, OS.TVM_ENSUREVISIBLE, 0, hItem);", "+\t\t\tif (fixScroll) OS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);", "+\t\t}"]}], "num": 37067}
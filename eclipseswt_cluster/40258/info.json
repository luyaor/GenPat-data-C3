{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49756c75255a3dfcc459fcd67046ec68", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45493a3f4134af2b89d1bfe5390cf7b5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/ImageTransfer.java", "commitBeforeChange": "a3b02a04a381231f9082de077a6f17f8af5d2dad", "commitAfterChange": "bd7861d3f10ae5263261fadc72efba55b44f5f8c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void javaToNative(Object object, TransferData transferData)", "signatureAfterChange": " public void javaToNative(Object object, TransferData transferData)", "diff": ["-\tint /*long*/ pixmap = image.pixmap; ", "- \tint width = imgData.width;", "- \tint height = imgData.height;  \t", "- \tint /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, width, height);", "-\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tint /*long*/ colormap = OS.gdk_colormap_get_system();", "-\tOS.gdk_pixbuf_get_from_drawable(pixbuf, pixmap, colormap, 0, 0, 0, 0, width, height);\t", "-\t", "-\tString typeStr = \"\";", "-\tif (transferData.type ==  JPEG_ID) typeStr = \"jpeg\";", "-\tif (transferData.type ==  PNG_ID) typeStr = \"png\";", "-\tif (transferData.type ==  BMP_ID) typeStr = \"bmp\";", "-\tif (transferData.type ==  EPS_ID) typeStr = \"eps\";", "-\tif (transferData.type ==  PCX_ID) typeStr = \"pcx\";", "-\tif (transferData.type ==  PPM_ID) typeStr = \"ppm\";", "-\tif (transferData.type ==  RGB_ID) typeStr = \"rgb\";", "-\tif (transferData.type ==  TGA_ID) typeStr = \"tga\";", "-\tif (transferData.type ==  XBM_ID) typeStr = \"xbm\";", "-\tif (transferData.type ==  XPM_ID) typeStr = \"xpm\";", "-\tif (transferData.type ==  XV_ID) typeStr = \"xv\";", "-\tbyte[] type = Converter.wcsToMbcs(null, typeStr , true);", "-\tint /*long*/ [] buffer = new int /*long*/ [1];", "-\tint /*long*/ [] len = new int /*long*/ [1];", "-\tif (type == null) return;", "-\tOS.gdk_pixbuf_save_to_bufferv(pixbuf, buffer, len, type, null, null, null);", "-\tOS.g_object_unref(pixbuf);", "+ \tint /*long*/ pixbuf = ImageList.createPixbuf(image);", "+\tif (pixbuf != 0) {", "+\t\tString typeStr = \"\";", "+\t\tif (transferData.type ==  JPEG_ID) typeStr = \"jpeg\";", "+\t\telse if (transferData.type ==  PNG_ID) typeStr = \"png\";", "+\t\telse if (transferData.type ==  BMP_ID) typeStr = \"bmp\";", "+\t\telse if (transferData.type ==  EPS_ID) typeStr = \"eps\";", "+\t\telse if (transferData.type ==  PCX_ID) typeStr = \"pcx\";", "+\t\telse if (transferData.type ==  PPM_ID) typeStr = \"ppm\";", "+\t\telse if (transferData.type ==  RGB_ID) typeStr = \"rgb\";", "+\t\telse if (transferData.type ==  TGA_ID) typeStr = \"tga\";", "+\t\telse if (transferData.type ==  XBM_ID) typeStr = \"xbm\";", "+\t\telse if (transferData.type ==  XPM_ID) typeStr = \"xpm\";", "+\t\telse if (transferData.type ==  XV_ID) typeStr = \"xv\";", "+\t\tbyte[] type = Converter.wcsToMbcs(null, typeStr , true);", "+\t\tint /*long*/ [] buffer = new int /*long*/ [1];", "+\t\tint /*long*/ [] len = new int /*long*/ [1];", "+\t\tif (type == null) return;", "+\t\tOS.gdk_pixbuf_save_to_bufferv(pixbuf, buffer, len, type, null, null, null);", "+\t\tOS.g_object_unref(pixbuf);", "+\t\ttransferData.pValue = buffer[0];", "+\t\ttransferData.length = (int)(len[0] + 3) / 4 * 4;", "+\t\ttransferData.result = 1;", "+\t\ttransferData.format = 32;", "+\t}", "-\ttransferData.pValue = buffer[0];", "-\ttransferData.length = (int)(len[0] + 3) / 4 * 4;", "-\ttransferData.result = 1;", "-\ttransferData.format = 32;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4732eb8b9b159f1584e6a07ac6284b53", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "6b0a245288556e7224d3c56682401ca81ba95245", "commitAfterChange": "4dbd09dcd54c5e8b8416ccbe2fdfacc6901be61f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void javaToNative(Object object, TransferData transferData)", "signatureAfterChange": " public void javaToNative(Object object, TransferData transferData)", "diff": ["-\ttransferData.result = -1;", "-\tbyte[][] data = new byte[files.length][];", "-\tfor (int i = 0; i < data.length; i++) {", "-\t\tFile file = new File(files[i]);", "-\t\tboolean isDirectory = file.isDirectory();", "+\tint length = files.length;", "+\tNSMutableArray array = NSMutableArray.arrayWithCapacity(length);", "+\tfor (int i = 0; i < length; i++) {", "-\t\tchar [] chars = new char [fileName.length ()];", "-\t\tfileName.getChars (0, chars.length, chars, 0);", "-\t\tint cfstring = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, chars, chars.length);", "-\t\tif (cfstring == 0) return;", "-\t\ttry {", "-\t\t\tint url = OS.CFURLCreateWithFileSystemPath(OS.kCFAllocatorDefault, cfstring, OS.kCFURLPOSIXPathStyle, isDirectory);", "-\t\t\tif (url == 0) return;", "-\t\t\ttry {", "-\t\t\t\tif (transferData.type == HFSID) {", "-\t\t\t\t\tbyte[] fsRef = new byte[80];", "-\t\t\t\t\tif (!OS.CFURLGetFSRef(url, fsRef)) return;", "-\t\t\t\t\tbyte[] fsSpec = new byte[70];", "-\t\t\t\t\tif (OS.FSGetCatalogInfo(fsRef, 0, null, null, fsSpec, null) != OS.noErr) return;", "-\t\t\t\t\tbyte[] hfsflavor = new byte[10 + fsSpec.length];", "-\t\t\t\t\tbyte[] finfo = new byte[16];", "-\t\t\t\t\tOS.FSpGetFInfo(fsSpec, finfo);", "-\t\t\t\t\tSystem.arraycopy(finfo, 0, hfsflavor, 0, 10);", "-\t\t\t\t\tSystem.arraycopy(fsSpec, 0, hfsflavor, 10, fsSpec.length);", "-\t\t\t\t\tdata[i] = hfsflavor;", "-\t\t\t\t}", "-\t\t\t\tif (transferData.type == FURLID) {", "-\t\t\t\t\tint encoding = OS.CFStringGetSystemEncoding();", "-\t\t\t\t\tint theData = OS.CFURLCreateData(OS.kCFAllocatorDefault, url, encoding, true);", "-\t\t\t\t\tif (theData == 0) return;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tint length = OS.CFDataGetLength(theData);", "-\t\t\t\t\t\tbyte[] buffer = new byte[length];", "-\t\t\t\t\t\tCFRange range = new CFRange();", "-\t\t\t\t\t\trange.length = length;", "-\t\t\t\t\t\tOS.CFDataGetBytes(theData, range, buffer);", "-\t\t\t\t\t\tdata[i] = buffer;", "-\t\t\t\t\t} finally {", "-\t\t\t\t\t\tOS.CFRelease(theData);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} finally {", "-\t\t\t\tOS.CFRelease(url);", "-\t\t\t}", "-\t\t} finally {", "-\t\t\tOS.CFRelease(cfstring);", "-\t\t}", "+\t\tNSString string = NSString.stringWith(fileName);", "+\t\tarray.addObject(string);", "-\ttransferData.data = data;", "-\ttransferData.result = 0;", "+\ttransferData.data = array;"]}], "num": 40258}
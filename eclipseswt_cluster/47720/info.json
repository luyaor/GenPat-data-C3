{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "08cc16dea8d60c3be51411737995aade", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3870d7990f9b2b6f08ef5bf74c486fe7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Caret.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " boolean drawCaret ()", "signatureAfterChange": " boolean drawCaret ()", "diff": ["-\tGC gc= new GC(parent);", "-\tgc.setXORMode(true);", "-\tgc.fillRectangle(x, y, nWidth, nHeight);", "-\tgc.dispose();", "+\t", "+\tint clipRgn= OS.NewRgn();", "+\tMacUtil.getVisibleRegion(parent.handle, clipRgn, true);", "+", "+\tMacRect bounds= new MacRect();", "+\tOS.GetControlBounds(parent.handle, bounds.getData());", "+\tbounds= new MacRect(x+bounds.getX(), y+bounds.getY(), nWidth, nHeight);", "+\t", "+\tint caretRgn= OS.NewRgn();", "+\tOS.RectRgn(caretRgn, bounds.getData());", "+\tOS.SectRgn(caretRgn, clipRgn, caretRgn);", "+\t", "+\tif (!OS.EmptyRgn(caretRgn)) {", "+\t\tint port= OS.GetPort();", "+\t\tOS.SetPortWindowPort(OS.GetControlOwner(handle));\t", "+\t\tOS.InvertRgn(caretRgn);", "+\t\tOS.SetPort(port);", "+\t}", "+\t", "+\tOS.DisposeRgn(clipRgn);", "+\tOS.DisposeRgn(caretRgn);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f909851b5f2d62880219bae96279f768", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 98, "signatureBeforeChange": " public void addFilter (int eventType, Listener listener)", "signatureAfterChange": " \t \tprivate void processPaintToolTip(int wHandle)", "diff": ["- */", "-public void addFilter (int eventType, Listener listener) {", "-\tcheckDevice ();", "-\tif (listener == null) error (SWT.ERROR_NULL_ARGUMENT);", "-\tif (filterTable == null) filterTable = new EventTable ();", "-\tfilterTable.hook (eventType, listener);", "+\t", "+\tprivate void processPaintToolTip(int wHandle) {", "+\t\t\t", "+\t\tColor infoForeground = getSystemColor (SWT.COLOR_INFO_FOREGROUND);", "+\t\tColor infoBackground = getSystemColor (SWT.COLOR_INFO_BACKGROUND);", "+\t\tMacUtil.RGBBackColor(infoBackground.handle);", "+\t\tMacUtil.RGBForeColor(infoForeground.handle);", "+\t\t", "+\t\tMacRect bounds= new MacRect();", "+\t\tOS.GetWindowBounds(wHandle, OS.kWindowContentRgn, bounds.getData());", "+\t\t", "+\t\tbounds= new MacRect(0, 0, bounds.getWidth(), bounds.getHeight());", "+\t\t", "+\t\tOS.EraseRect(bounds.getData());", "+\t\t", "+\t\tif (fToolTipText != null) {", "+\t\t\tint sHandle= OS.CFStringCreateWithCharacters(fToolTipText);", "+\t\t\tbounds= new MacRect(TOOLTIP_MARGIN, TOOLTIP_MARGIN,", "+\t\t\t\t\t\t\tbounds.getWidth()-2*TOOLTIP_MARGIN, bounds.getHeight()-2*TOOLTIP_MARGIN);", "+\t\t\tOS.DrawThemeTextBox(sHandle, fHoverThemeFont, OS.kThemeStateActive, true, bounds.getData(), (short)0, 0);", "+\t\t\tOS.CFRelease(sHandle);", "+\t\t}", "+\t}"]}], "num": 47720}
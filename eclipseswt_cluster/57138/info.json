{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e1e8588cd09f18ec0257496365bf3cb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d75fd50c4b19b10329dba83a3c7de94", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 152, "signatureBeforeChange": "\r int processMouseMove (int callData)", "signatureAfterChange": "\r int XPointerMotion (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-int processMouseMove (int callData) {\r", "-\tDisplay display = getDisplay ();\r", "-\tdisplay.addMouseHoverTimeOut (handle);\r", "-\tXMotionEvent xEvent = new XMotionEvent ();\r", "-\tOS.memmove (xEvent, callData, XMotionEvent.sizeof);\r", "-\tsendMouseEvent (SWT.MouseMove, 0, xEvent);\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XPointerMotion (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tDisplay display = getDisplay ();\r", "+\tdisplay.addMouseHoverTimeOut (handle);\r", "+\tXMotionEvent xEvent = new XMotionEvent ();\r", "+\tOS.memmove (xEvent, call_data, XMotionEvent.sizeof);\r", "+\tsendMouseEvent (SWT.MouseMove, 0, xEvent);\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d57707ba11f18f561fb0174c19f98466", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 51, "signatureBeforeChange": "\r int processPaint (int callData)", "signatureAfterChange": "\r int XExposure (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-int processPaint (int callData) {\r", "+}\r", "+int XExposure (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "-\tOS.memmove (cb, callData, XmAnyCallbackStruct.sizeof);\r", "+\tOS.memmove (cb, call_data, XmAnyCallbackStruct.sizeof);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "769c4dcf639fdc3465c69465bc3bf3d1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 93, "signatureBeforeChange": "\r int processNonMaskable (int callData)", "signatureAfterChange": "\r int XNonMaskable (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processNonMaskable (int callData) {\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XNonMaskable (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9459b71eb880590de283b7f5caedbdde", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 61, "signatureBeforeChange": "\r \r int processResize (int callData)", "signatureAfterChange": "\r int XStructureNotify (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-\r", "-int processResize (int callData) {\r", "-\tXConfigureEvent xEvent = new XConfigureEvent ();\r", "-\tOS.memmove (xEvent, callData, XConfigureEvent.sizeof);\r", "-\tswitch (xEvent.type) {\r", "-\t\tcase OS.ReparentNotify: {\r", "-\t\t\tif (reparented) return 0;\r", "-\t\t\treparented = true;\r", "-\t\t\tshort [] root_x = new short [1], root_y = new short [1];\r", "-\t\t\tOS.XtTranslateCoords (shellHandle, (short) 0, (short) 0, root_x, root_y);\r", "-\t\t\tint [] argList = {OS.XmNwidth, 0, OS.XmNheight, 0};\r", "-\t\t\tOS.XtGetValues (shellHandle, argList, argList.length / 2);\t\r", "-\t\t\txEvent.x = root_x [0];  xEvent.y = root_y [0];\r", "-\t\t\txEvent.width = argList [1];  xEvent.height = argList [3];\r", "-\t\t\t// FALL THROUGH\r", "-\t\t}\r", "-\t\tcase OS.ConfigureNotify:\r", "-\t\t\tif (!reparented) return 0;\r", "-\t\t\tconfigured = false;\r", "-\t\t\tif (oldX != xEvent.x || oldY != xEvent.y) sendEvent (SWT.Move);\r", "-\t\t\tif (oldWidth != xEvent.width || oldHeight != xEvent.height) {\r", "-\t\t\t\tXAnyEvent event = new XAnyEvent ();\r", "-\t\t\t\tdisplay.resizeWindow = xEvent.window;\r", "-\t\t\t\tdisplay.resizeWidth = xEvent.width;\r", "-\t\t\t\tdisplay.resizeHeight = xEvent.height;\r", "-\t\t\t\tdisplay.resizeCount = 0;\r", "-\t\t\t\tint checkResizeProc = display.checkResizeProc;\r", "-\t\t\t\tOS.XCheckIfEvent (xEvent.display, event, checkResizeProc, 0);\r", "-\t\t\t\tif (display.resizeCount == 0) {\r", "-\t\t\t\t\tsendEvent (SWT.Resize);\r", "-\t\t\t\t\tif (layout != null) layout (false);\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tif (xEvent.x != 0) oldX = xEvent.x;\r", "-\t\t\tif (xEvent.y != 0) oldY = xEvent.y;\r", "-\t\t\toldWidth = xEvent.width;\r", "-\t\t\toldHeight = xEvent.height;\r", "-\t\t\treturn 0;\r", "-\t\tcase OS.UnmapNotify:\r", "-\t\t\tint [] argList = {OS.XmNmappedWhenManaged, 0};\r", "-\t\t\tOS.XtGetValues (shellHandle, argList, argList.length / 2);\r", "-\t\t\tif (argList [1] != 0) {\r", "-\t\t\t\tminimized = true;\r", "-\t\t\t\tsendEvent (SWT.Iconify);\r", "-\t\t\t}\r", "-\t\t\treturn 0;\r", "-\t\tcase OS.MapNotify:\r", "-\t\t\tif (minimized) {\r", "-\t\t\t\tminimized = false;\r", "-\t\t\t\tsendEvent (SWT.Deiconify);\r", "-\t\t\t}\r", "-\t\t\treturn 0;\r", "-\t}\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XStructureNotify (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tXConfigureEvent xEvent = new XConfigureEvent ();\r", "+\tOS.memmove (xEvent, call_data, XConfigureEvent.sizeof);\r", "+\tswitch (xEvent.type) {\r", "+\t\tcase OS.ReparentNotify: {\r", "+\t\t\tif (reparented) return 0;\r", "+\t\t\treparented = true;\r", "+\t\t\tshort [] root_x = new short [1], root_y = new short [1];\r", "+\t\t\tOS.XtTranslateCoords (shellHandle, (short) 0, (short) 0, root_x, root_y);\r", "+\t\t\tint [] argList = {OS.XmNwidth, 0, OS.XmNheight, 0};\r", "+\t\t\tOS.XtGetValues (shellHandle, argList, argList.length / 2);\t\r", "+\t\t\txEvent.x = root_x [0];  xEvent.y = root_y [0];\r", "+\t\t\txEvent.width = argList [1];  xEvent.height = argList [3];\r", "+\t\t\t// FALL THROUGH\r", "+\t\t}\r", "+\t\tcase OS.ConfigureNotify:\r", "+\t\t\tif (!reparented) return 0;\r", "+\t\t\tconfigured = false;\r", "+\t\t\tif (oldX != xEvent.x || oldY != xEvent.y) sendEvent (SWT.Move);\r", "+\t\t\tif (oldWidth != xEvent.width || oldHeight != xEvent.height) {\r", "+\t\t\t\tXAnyEvent event = new XAnyEvent ();\r", "+\t\t\t\tdisplay.resizeWindow = xEvent.window;\r", "+\t\t\t\tdisplay.resizeWidth = xEvent.width;\r", "+\t\t\t\tdisplay.resizeHeight = xEvent.height;\r", "+\t\t\t\tdisplay.resizeCount = 0;\r", "+\t\t\t\tint checkResizeProc = display.checkResizeProc;\r", "+\t\t\t\tOS.XCheckIfEvent (xEvent.display, event, checkResizeProc, 0);\r", "+\t\t\t\tif (display.resizeCount == 0) {\r", "+\t\t\t\t\tsendEvent (SWT.Resize);\r", "+\t\t\t\t\tif (layout != null) layout (false);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tif (xEvent.x != 0) oldX = xEvent.x;\r", "+\t\t\tif (xEvent.y != 0) oldY = xEvent.y;\r", "+\t\t\toldWidth = xEvent.width;\r", "+\t\t\toldHeight = xEvent.height;\r", "+\t\t\treturn 0;\r", "+\t\tcase OS.UnmapNotify:\r", "+\t\t\tint [] argList = {OS.XmNmappedWhenManaged, 0};\r", "+\t\t\tOS.XtGetValues (shellHandle, argList, argList.length / 2);\r", "+\t\t\tif (argList [1] != 0) {\r", "+\t\t\t\tminimized = true;\r", "+\t\t\t\tsendEvent (SWT.Iconify);\r", "+\t\t\t}\r", "+\t\t\treturn 0;\r", "+\t\tcase OS.MapNotify:\r", "+\t\t\tif (minimized) {\r", "+\t\t\t\tminimized = false;\r", "+\t\t\t\tsendEvent (SWT.Deiconify);\r", "+\t\t\t}\r", "+\t\t\treturn 0;\r", "+\t}\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ab9aae0013c1a2cba45cc917a00f283", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 52, "signatureBeforeChange": "\r int processSetFocus (int callData)", "signatureAfterChange": "\r int XFocusChange (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-int processSetFocus (int callData) {\r", "+int XFocusChange (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "-\tOS.memmove (xEvent, callData, XFocusChangeEvent.sizeof);\r", "+\tOS.memmove (xEvent, call_data, XFocusChangeEvent.sizeof);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eab624e13d2bcbf175f9ccd0b62264e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 146, "signatureBeforeChange": "\r int processPaint (int callData)", "signatureAfterChange": "\r int XExposure (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processPaint (int callData) {\r", "-\tif (!hooks (SWT.Paint) && !filters (SWT.Paint)) return 0;\r", "-\tXExposeEvent xEvent = new XExposeEvent ();\r", "-\tOS.memmove (xEvent, callData, XExposeEvent.sizeof);\r", "-\tint xDisplay = OS.XtDisplay (handle);\r", "-\tif (xDisplay == 0) return 0;\r", "-\tEvent event = new Event ();\r", "-\tevent.count = xEvent.count;\r", "-\tevent.x = xEvent.x;  event.y = xEvent.y;\r", "-\tevent.width = xEvent.width;  event.height = xEvent.height;\r", "-\tGC gc = event.gc = new GC (this);\r", "-\tgc.setClipping (event.x, event.y, event.width, event.height);\r", "-\tsendEvent (SWT.Paint, event);\r", "-\tif (!gc.isDisposed ()) gc.dispose ();\r", "-\tevent.gc = null;\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XExposure (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tif (!hooks (SWT.Paint) && !filters (SWT.Paint)) return 0;\r", "+\tXExposeEvent xEvent = new XExposeEvent ();\r", "+\tOS.memmove (xEvent, call_data, XExposeEvent.sizeof);\r", "+\tint xDisplay = OS.XtDisplay (handle);\r", "+\tif (xDisplay == 0) return 0;\r", "+\tEvent event = new Event ();\r", "+\tevent.count = xEvent.count;\r", "+\tevent.x = xEvent.x;  event.y = xEvent.y;\r", "+\tevent.width = xEvent.width;  event.height = xEvent.height;\r", "+\tGC gc = event.gc = new GC (this);\r", "+\tgc.setClipping (event.x, event.y, event.width, event.height);\r", "+\tsendEvent (SWT.Paint, event);\r", "+\tif (!gc.isDisposed ()) gc.dispose ();\r", "+\tevent.gc = null;\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9468d45e3f2899b15914cb311f603f47", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 149, "signatureBeforeChange": "\r int processKeyUp (int callData)", "signatureAfterChange": "\r int XKeyRelease (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processKeyUp (int callData) {\r", "-\tXKeyEvent xEvent = new XKeyEvent ();\r", "-\tOS.memmove (xEvent, callData, XKeyEvent.sizeof);\r", "-\tif (menu != null && xEvent.state == OS.ShiftMask) {\r", "-\t\tbyte [] buffer = new byte [1];\r", "-\t\tint [] keysym = new int [1];\t\r", "-\t\tOS.XLookupString (xEvent, buffer, buffer.length, keysym, null);\r", "-\t\tif (keysym [0] == OS.XK_F10) {\r", "-\t\t\tmenu.setVisible (true);\r", "-\t\t\treturn 0;\r", "-\t\t}\r", "-\t}\r", "-\tsendKeyEvent (SWT.KeyUp, xEvent);\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XKeyRelease (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tXKeyEvent xEvent = new XKeyEvent ();\r", "+\tOS.memmove (xEvent, call_data, XKeyEvent.sizeof);\r", "+\tif (menu != null && xEvent.state == OS.ShiftMask) {\r", "+\t\tbyte [] buffer = new byte [1];\r", "+\t\tint [] keysym = new int [1];\t\r", "+\t\tOS.XLookupString (xEvent, buffer, buffer.length, keysym, null);\r", "+\t\tif (keysym [0] == OS.XK_F10) {\r", "+\t\t\tmenu.setVisible (true);\r", "+\t\t\treturn 0;\r", "+\t\t}\r", "+\t}\r", "+\tsendKeyEvent (SWT.KeyUp, xEvent);\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8dc2d8427a83e2ae3a937c559abb720", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 144, "signatureBeforeChange": "\r int processMouseUp (int callData)", "signatureAfterChange": "\r int XButtonRelease (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processMouseUp (int callData) {\r", "-\tDisplay display = getDisplay ();\r", "-\tdisplay.hideToolTip ();\r", "-\tXButtonEvent xEvent = new XButtonEvent ();\r", "-\tOS.memmove (xEvent, callData, XButtonEvent.sizeof);\r", "-\tsendMouseEvent (SWT.MouseUp, xEvent.button, xEvent);\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XButtonRelease (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tDisplay display = getDisplay ();\r", "+\tdisplay.hideToolTip ();\r", "+\tXButtonEvent xEvent = new XButtonEvent ();\r", "+\tOS.memmove (xEvent, call_data, XButtonEvent.sizeof);\r", "+\tsendMouseEvent (SWT.MouseUp, xEvent.button, xEvent);\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aaca96d589b0ee01c9c78b7ceea96d55", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 55, "signatureBeforeChange": "\r int processMouseExit (int callData)", "signatureAfterChange": "\r int XLeaveWindow (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processMouseExit (int callData) {\r", "-\tDisplay display = getDisplay ();\r", "-\tdisplay.removeMouseHoverTimeOut ();\r", "-\tdisplay.hideToolTip ();\r", "-\tXCrossingEvent xEvent = new XCrossingEvent ();\r", "-\tOS.memmove (xEvent, callData, XCrossingEvent.sizeof);\r", "-\tif ((xEvent.state & OS.Button1Mask) != 0) {\r", "-\t\tsetDrawPressed (set);\r", "-\t} else {\r", "-\t\tif ((parent.style & SWT.FLAT) != 0) redraw ();\r", "-\t}\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XLeaveWindow (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tDisplay display = getDisplay ();\r", "+\tdisplay.removeMouseHoverTimeOut ();\r", "+\tdisplay.hideToolTip ();\r", "+\tXCrossingEvent xEvent = new XCrossingEvent ();\r", "+\tOS.memmove (xEvent, call_data, XCrossingEvent.sizeof);\r", "+\tif ((xEvent.state & OS.Button1Mask) != 0) {\r", "+\t\tsetDrawPressed (set);\r", "+\t} else {\r", "+\t\tif ((parent.style & SWT.FLAT) != 0) redraw ();\r", "+\t}\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "157938a98964d2ee7092735cdaaac382", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 147, "signatureBeforeChange": "\r int processSetFocus (int callData)", "signatureAfterChange": "\r int XFocusChange (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processSetFocus (int callData) {\r", "-\r", "-\t/* Get the focus change event */\r", "-\tXFocusChangeEvent xEvent = new XFocusChangeEvent ();\r", "-\tOS.memmove (xEvent, callData, XFocusChangeEvent.sizeof);\r", "-\r", "-\t/* Ignore focus changes caused by grabbing and ungrabing */\r", "-\tif (xEvent.mode != OS.NotifyNormal) return 0;\r", "-\r", "-\t/* Only process focus callbacks between windows */\r", "-\tif (xEvent.detail != OS.NotifyAncestor &&\r", "-\t\txEvent.detail != OS.NotifyInferior &&\r", "-\t\txEvent.detail != OS.NotifyNonlinear) return 0;\r", "-\r", "-\t/*\r", "-\t* Ignore focus change events when the window getting or losing\r", "-\t* focus is a menu.  Because XmGetFocusWidget() does not answer\r", "-\t* the menu shell (it answers the menu parent), it is necessary\r", "-\t* to use XGetInputFocus() to get the real X focus window.\r", "-\t*/\r", "-\tint xDisplay = xEvent.display;\r", "-\tif (xDisplay == 0) return 0;\r", "-\tint [] unused = new int [1], xWindow = new int [1];\r", "-\tOS.XGetInputFocus (xDisplay, xWindow, unused);\r", "-\tif (xWindow [0] != 0) {\r", "-\t\tint widget = OS.XtWindowToWidget (xDisplay, xWindow [0]);\r", "-\t\tif (widget != 0 && OS.XtClass (widget) == OS.XmMenuShellWidgetClass ()) return 0;\r", "-\t}\r", "-\t\r", "-\t/* Process the focus change for the widget */\r", "-\tswitch (xEvent.type) {\r", "-\t\tcase OS.FocusIn: {\r", "-\t\t\tShell shell = getShell ();\r", "-\t\t\tprocessFocusIn ();\r", "-\t\t\t// widget could be disposed at this point\r", "-\t\t\t\r", "-\t\t\t/*\r", "-\t\t\t* It is possible that the shell may be\r", "-\t\t\t* disposed at this point.  If this happens\r", "-\t\t\t* don't send the activate and deactivate\r", "-\t\t\t* events.\r", "-\t\t\t*/\t\r", "-\t\t\tif (!shell.isDisposed ()) {\r", "-\t\t\t\tshell.setActiveControl (this);\r", "-\t\t\t}\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t\tcase OS.FocusOut: {\r", "-\t\t\tShell shell = getShell ();\r", "-\t\t\tDisplay display = getDisplay ();\r", "-\t\t\t\r", "-\t\t\tprocessFocusOut ();\r", "-\t\t\t// widget could be disposed at this point\r", "-\t\t\t\r", "-\t\t\t/*\r", "-\t\t\t* It is possible that the shell may be\r", "-\t\t\t* disposed at this point.  If this happens\r", "-\t\t\t* don't send the activate and deactivate\r", "-\t\t\t* events.\r", "-\t\t\t*/\r", "-\t\t\tif (!shell.isDisposed ()) {\r", "-\t\t\t\tControl control = display.getFocusControl ();\r", "-\t\t\t\tif (control == null || shell != control.getShell () ) {\r", "-\t\t\t\t\tshell.setActiveControl (null);\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t}\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XFocusChange (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\r", "+\t/* Get the focus change event */\r", "+\tXFocusChangeEvent xEvent = new XFocusChangeEvent ();\r", "+\tOS.memmove (xEvent, call_data, XFocusChangeEvent.sizeof);\r", "+\r", "+\t/* Ignore focus changes caused by grabbing and ungrabing */\r", "+\tif (xEvent.mode != OS.NotifyNormal) return 0;\r", "+\r", "+\t/* Only process focus callbacks between windows */\r", "+\tif (xEvent.detail != OS.NotifyAncestor &&\r", "+\t\txEvent.detail != OS.NotifyInferior &&\r", "+\t\txEvent.detail != OS.NotifyNonlinear) return 0;\r", "+\r", "+\t/*\r", "+\t* Ignore focus change events when the window getting or losing\r", "+\t* focus is a menu.  Because XmGetFocusWidget() does not answer\r", "+\t* the menu shell (it answers the menu parent), it is necessary\r", "+\t* to use XGetInputFocus() to get the real X focus window.\r", "+\t*/\r", "+\tint xDisplay = xEvent.display;\r", "+\tif (xDisplay == 0) return 0;\r", "+\tint [] unused = new int [1], xWindow = new int [1];\r", "+\tOS.XGetInputFocus (xDisplay, xWindow, unused);\r", "+\tif (xWindow [0] != 0) {\r", "+\t\tint widget = OS.XtWindowToWidget (xDisplay, xWindow [0]);\r", "+\t\tif (widget != 0 && OS.XtClass (widget) == OS.XmMenuShellWidgetClass ()) return 0;\r", "+\t}\r", "+\t\r", "+\t/* Process the focus change for the widget */\r", "+\tswitch (xEvent.type) {\r", "+\t\tcase OS.FocusIn: {\r", "+\t\t\tShell shell = getShell ();\r", "+\t\t\tprocessFocusIn ();\r", "+\t\t\t// widget could be disposed at this point\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* It is possible that the shell may be\r", "+\t\t\t* disposed at this point.  If this happens\r", "+\t\t\t* don't send the activate and deactivate\r", "+\t\t\t* events.\r", "+\t\t\t*/\t\r", "+\t\t\tif (!shell.isDisposed ()) {\r", "+\t\t\t\tshell.setActiveControl (this);\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\tcase OS.FocusOut: {\r", "+\t\t\tShell shell = getShell ();\r", "+\t\t\tDisplay display = getDisplay ();\r", "+\t\t\t\r", "+\t\t\tprocessFocusOut ();\r", "+\t\t\t// widget could be disposed at this point\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* It is possible that the shell may be\r", "+\t\t\t* disposed at this point.  If this happens\r", "+\t\t\t* don't send the activate and deactivate\r", "+\t\t\t* events.\r", "+\t\t\t*/\r", "+\t\t\tif (!shell.isDisposed ()) {\r", "+\t\t\t\tControl control = display.getFocusControl ();\r", "+\t\t\t\tif (control == null || shell != control.getShell () ) {\r", "+\t\t\t\t\tshell.setActiveControl (null);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t}\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e86e133be00ece119a8c7373e7892280", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 150, "signatureBeforeChange": "\r int processMouseExit (int callData)", "signatureAfterChange": "\r int XLeaveWindow (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processMouseExit (int callData) {\r", "-\tDisplay display = getDisplay ();\r", "-\tdisplay.removeMouseHoverTimeOut ();\r", "-\tdisplay.hideToolTip ();\r", "-\tXCrossingEvent xEvent = new XCrossingEvent ();\r", "-\tOS.memmove (xEvent, callData, XCrossingEvent.sizeof);\r", "-\tif (xEvent.mode != OS.NotifyNormal) return 0;\r", "-\tif (xEvent.subwindow != 0) return 0;\r", "-\tsendMouseEvent (SWT.MouseExit, 0, xEvent);\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XLeaveWindow (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tDisplay display = getDisplay ();\r", "+\tdisplay.removeMouseHoverTimeOut ();\r", "+\tdisplay.hideToolTip ();\r", "+\tXCrossingEvent xEvent = new XCrossingEvent ();\r", "+\tOS.memmove (xEvent, call_data, XCrossingEvent.sizeof);\r", "+\tif (xEvent.mode != OS.NotifyNormal) return 0;\r", "+\tif (xEvent.subwindow != 0) return 0;\r", "+\tsendMouseEvent (SWT.MouseExit, 0, xEvent);\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2906e2c0bbc48e35889f4a4683378197", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 50, "signatureBeforeChange": "\r int processMouseEnter (int callData)", "signatureAfterChange": "\r int XEnterWindow (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-int processMouseEnter (int callData) {\r", "-\tXCrossingEvent xEvent = new XCrossingEvent ();\r", "-\tOS.memmove (xEvent, callData, XCrossingEvent.sizeof);\r", "-\tif ((xEvent.state & OS.Button1Mask) != 0) {\r", "-\t\tsetDrawPressed (!set);\r", "-\t} else {\r", "-\t\tif ((parent.style & SWT.FLAT) != 0) redraw ();\r", "-\t}\r", "-\treturn 0;\r", "-}\r", "+int XEnterWindow (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tXCrossingEvent xEvent = new XCrossingEvent ();\r", "+\tOS.memmove (xEvent, call_data, XCrossingEvent.sizeof);\r", "+\tif ((xEvent.state & OS.Button1Mask) != 0) {\r", "+\t\tsetDrawPressed (!set);\r", "+\t} else {\r", "+\t\tif ((parent.style & SWT.FLAT) != 0) redraw ();\r", "+\t}\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af89860596aa9f89ed6d6bc80e5eb07b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 143, "signatureBeforeChange": "\r int processMouseDown (int callData)", "signatureAfterChange": "\r int XButtonPress (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processMouseDown (int callData) {\r", "-\tDisplay display = getDisplay ();\r", "-\tShell shell = getShell ();\r", "-\tdisplay.hideToolTip ();\r", "-\tXButtonEvent xEvent = new XButtonEvent ();\r", "-\tOS.memmove (xEvent, callData, XButtonEvent.sizeof);\r", "-\tsendMouseEvent (SWT.MouseDown, xEvent.button, xEvent);\r", "-\tif (xEvent.button == 2 && hooks (SWT.DragDetect)) {\r", "-\t\tpostEvent (SWT.DragDetect);\r", "-\t}\r", "-\tif (xEvent.button == 3 && menu != null) {\r", "-\t\tsetFocus ();\r", "-//\t\tmenu.setLocation (xEvent.x_root, xEvent.y_root);\r", "-\t\tmenu.setVisible (true);\r", "-\t}\r", "-\tint clickTime = display.getDoubleClickTime ();\r", "-\tint lastTime = display.lastTime, eventTime = xEvent.time;\r", "-\tint lastButton = display.lastButton, eventButton = xEvent.button;\r", "-\tif (lastButton == eventButton && lastTime != 0 && Math.abs (lastTime - eventTime) <= clickTime) {\r", "-\t\tsendMouseEvent (SWT.MouseDoubleClick, eventButton, xEvent);\r", "-\t}\r", "-\tdisplay.lastTime = eventTime == 0 ? 1 : eventTime;\r", "-\tdisplay.lastButton = eventButton;\r", "-\t\r", "-\t/*\r", "-\t* It is possible that the shell may be\r", "-\t* disposed at this point.  If this happens\r", "-\t* don't send the activate and deactivate\r", "-\t* events.\r", "-\t*/\t\r", "-\tif (!shell.isDisposed ()) {\r", "-\t\tshell.setActiveControl (this);\r", "-\t}\r", "-\treturn 0;\r", "-}\r", "+int XButtonPress (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tDisplay display = getDisplay ();\r", "+\tShell shell = getShell ();\r", "+\tdisplay.hideToolTip ();\r", "+\tXButtonEvent xEvent = new XButtonEvent ();\r", "+\tOS.memmove (xEvent, call_data, XButtonEvent.sizeof);\r", "+\tsendMouseEvent (SWT.MouseDown, xEvent.button, xEvent);\r", "+\tif (xEvent.button == 2 && hooks (SWT.DragDetect)) {\r", "+\t\tpostEvent (SWT.DragDetect);\r", "+\t}\r", "+\tif (xEvent.button == 3 && menu != null) {\r", "+\t\tsetFocus ();\r", "+//\t\tmenu.setLocation (xEvent.x_root, xEvent.y_root);\r", "+\t\tmenu.setVisible (true);\r", "+\t}\r", "+\tint clickTime = display.getDoubleClickTime ();\r", "+\tint lastTime = display.lastTime, eventTime = xEvent.time;\r", "+\tint lastButton = display.lastButton, eventButton = xEvent.button;\r", "+\tif (lastButton == eventButton && lastTime != 0 && Math.abs (lastTime - eventTime) <= clickTime) {\r", "+\t\tsendMouseEvent (SWT.MouseDoubleClick, eventButton, xEvent);\r", "+\t}\r", "+\tdisplay.lastTime = eventTime == 0 ? 1 : eventTime;\r", "+\tdisplay.lastButton = eventButton;\r", "+\t\r", "+\t/*\r", "+\t* It is possible that the shell may be\r", "+\t* disposed at this point.  If this happens\r", "+\t* don't send the activate and deactivate\r", "+\t* events.\r", "+\t*/\t\r", "+\tif (!shell.isDisposed ()) {\r", "+\t\tshell.setActiveControl (this);\r", "+\t}\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "addcb0010cb9d4643381a9425d4ebe16", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 56, "signatureBeforeChange": "\r int processMouseMove (int callData)", "signatureAfterChange": "\r int XPointerMotion (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processMouseMove (int callData) {\r", "-\tDisplay display = getDisplay ();\r", "-\tdisplay.addMouseHoverTimeOut (handle);\r", "-\r", "-\t/*\r", "-\t* Forward the mouse event to the parent.\r", "-\t* This is necessary so that mouse listeners\r", "-\t* in the parent will be called, despite the\r", "-\t* fact that the event did not really occur\r", "-\t* in X in the parent.  This is done to be\r", "-\t* compatible with Windows.\r", "-\t*/\r", "-\tXButtonEvent xEvent = new XButtonEvent ();\r", "-\tOS.memmove (xEvent, callData, XButtonEvent.sizeof);\r", "-\tint [] argList = {OS.XmNx, 0, OS.XmNy, 0};\r", "-\tOS.XtGetValues (handle, argList, argList.length / 2);\r", "-\txEvent.window = OS.XtWindow (parent.handle);\r", "-\txEvent.x += argList [1];  xEvent.y += argList [3];\r", "-\t/*\r", "-\t* This code is intentionally commented.\r", "-\t* Currently, the implementation of the\r", "-\t* mouse move code in the parent interferes\r", "-\t* with tool tips for tool items.\r", "-\t*/\r", "-//\tOS.memmove (callData, xEvent, XButtonEvent.sizeof);\r", "-//\tparent.processMouseMove (callData);\r", "-\tparent.sendMouseEvent (SWT.MouseMove, 0, xEvent);\r", "-\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XPointerMotion (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tDisplay display = getDisplay ();\r", "+\tdisplay.addMouseHoverTimeOut (handle);\r", "+\r", "+\t/*\r", "+\t* Forward the mouse event to the parent.\r", "+\t* This is necessary so that mouse listeners\r", "+\t* in the parent will be called, despite the\r", "+\t* fact that the event did not really occur\r", "+\t* in X in the parent.  This is done to be\r", "+\t* compatible with Windows.\r", "+\t*/\r", "+\tXButtonEvent xEvent = new XButtonEvent ();\r", "+\tOS.memmove (xEvent, call_data, XButtonEvent.sizeof);\r", "+\tint [] argList = {OS.XmNx, 0, OS.XmNy, 0};\r", "+\tOS.XtGetValues (handle, argList, argList.length / 2);\r", "+\txEvent.window = OS.XtWindow (parent.handle);\r", "+\txEvent.x += argList [1];  xEvent.y += argList [3];\r", "+\t/*\r", "+\t* This code is intentionally commented.\r", "+\t* Currently, the implementation of the\r", "+\t* mouse move code in the parent interferes\r", "+\t* with tool tips for tool items.\r", "+\t*/\r", "+//\tOS.memmove (callData, xEvent, XButtonEvent.sizeof);\r", "+//\tparent.XPointerMotion (w, client_data, call_data, continue_to_dispatch);\r", "+\tparent.sendMouseEvent (SWT.MouseMove, 0, xEvent);\r", "+\r", "+\treturn 0;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2c40750066ac85b717ad4ea8dcd8b57", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 145, "signatureBeforeChange": "\r int processMouseEnter (int callData)", "signatureAfterChange": "\r int XEnterWindow (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processMouseEnter (int callData) {\r", "-\tXCrossingEvent xEvent = new XCrossingEvent ();\r", "-\tOS.memmove (xEvent, callData, XCrossingEvent.sizeof);\r", "-\tif (xEvent.mode != OS.NotifyNormal) return 0;\r", "-\tif (xEvent.subwindow != 0) return 0;\r", "-\tsendMouseEvent (SWT.MouseEnter, 0, xEvent);\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XEnterWindow (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tXCrossingEvent xEvent = new XCrossingEvent ();\r", "+\tOS.memmove (xEvent, call_data, XCrossingEvent.sizeof);\r", "+\tif (xEvent.mode != OS.NotifyNormal) return 0;\r", "+\tif (xEvent.subwindow != 0) return 0;\r", "+\tsendMouseEvent (SWT.MouseEnter, 0, xEvent);\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1af985e96b83f1e31fa44b6a827ac9af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 148, "signatureBeforeChange": "\r int processKeyDown (int callData)", "signatureAfterChange": "\r int XKeyPress (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-int processKeyDown (int callData) {\r", "-\tXKeyEvent xEvent = new XKeyEvent ();\r", "-\tOS.memmove (xEvent, callData, XKeyEvent.sizeof);\r", "-\tif (xEvent.keycode != 0) {\r", "-\t\tsendKeyEvent (SWT.KeyDown, xEvent);\r", "-\t} else {\r", "-\t\tsendIMEKeyEvent (SWT.KeyDown, xEvent);\r", "-\t}\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XKeyPress (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tXKeyEvent xEvent = new XKeyEvent ();\r", "+\tOS.memmove (xEvent, call_data, XKeyEvent.sizeof);\r", "+\tif (xEvent.keycode != 0) {\r", "+\t\tsendKeyEvent (SWT.KeyDown, xEvent);\r", "+\t} else {\r", "+\t\tsendIMEKeyEvent (SWT.KeyDown, xEvent);\r", "+\t}\r", "+\treturn 0;\r", "+}\r"]}], "num": 57138}
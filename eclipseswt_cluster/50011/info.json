{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0505b7770a3f23ea9bf4fe87213c0d11", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e0f840cc75aba526d838d7835c953b4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "ab64db857c3e019ef0ba09e496def137cd358a1e", "commitAfterChange": "949f5828837bef6a22bb8f970c8fe18a0efa5848", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": "  boolean insertText (int id, int sel, int string)", "signatureAfterChange": "  boolean insertText (int id, int sel, int string)", "diff": ["-\t\tif (!s.keyInputHappened && nsEvent != null && nsEvent.type () == OS.NSKeyDown) {", "-\t\t\tNSString str = new NSString (string);", "-\t\t\tif (str.isKindOfClass (OS.objc_getClass (\"NSAttributedString\"))) {", "-\t\t\t\tstr = new NSAttributedString (string).string ();", "-\t\t\t}", "-\t\t\tint length = (int)/*64*/str.length ();", "-\t\t\tchar[] buffer = new char [length];", "-\t\t\tstr.getCharacters(buffer);", "-\t\t\tfor (int i = 0; i < buffer.length; i++) {", "-\t\t\t\ts.keyInputHappened = true;", "-\t\t\t\tEvent event = new Event ();", "-\t\t\t\tif (i == 0) setKeyState (event, SWT.KeyDown, nsEvent);", "-\t\t\t\tevent.character = buffer [i];", "-\t\t\t\tif (!sendKeyEvent (SWT.KeyDown, event)) return false;", "+\t\tif (nsEvent != null) {", "+\t\t\tint type = nsEvent.type ();", "+\t\t\tif ((!s.keyInputHappened && type == OS.NSKeyDown) || type == OS.NSSystemDefined) {", "+\t\t\t\tNSString str = new NSString (string);", "+\t\t\t\tif (str.isKindOfClass (OS.objc_getClass (\"NSAttributedString\"))) {", "+\t\t\t\t\tstr = new NSAttributedString (string).string ();", "+\t\t\t\t}", "+\t\t\t\tint length = (int)/*64*/str.length ();", "+\t\t\t\tchar[] buffer = new char [length];", "+\t\t\t\tstr.getCharacters(buffer);", "+\t\t\t\tfor (int i = 0; i < buffer.length; i++) {", "+\t\t\t\t\ts.keyInputHappened = true;", "+\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\tif (i == 0 && type == OS.NSKeyDown) setKeyState (event, SWT.KeyDown, nsEvent);", "+\t\t\t\t\tevent.character = buffer [i];", "+\t\t\t\t\tif (!sendKeyEvent (SWT.KeyDown, event)) return false;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fa613f4edec5fd5d3fbc4cdfb8feb93", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "9e87357e3c94783652be51d409f43ba70fb540e9", "commitAfterChange": "32d27dbc1f6d0abd33e03d84b88255aab976544d", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": "  boolean insertText (int id, int sel, int string)", "signatureAfterChange": "  boolean insertText (int id, int sel, int string)", "diff": ["-\tif (hasKeyboardFocus(id)) {", "-\t\tShell s = this.getShell();", "-\t\tNSEvent nsEvent = NSApplication.sharedApplication ().currentEvent ();", "-\t\tif (nsEvent != null) {", "-\t\t\tint /*long*/ type = nsEvent.type ();", "-\t\t\tif (type == OS.NSKeyDown || type == OS.NSSystemDefined) {", "-\t\t\t\tNSString str = new NSString (string);", "-\t\t\t\tif (str.isKindOfClass (OS.class_NSAttributedString)) {", "-\t\t\t\t\tstr = new NSAttributedString (string).string ();", "-\t\t\t\t}", "-\t\t\t\tint length = (int)/*64*/str.length ();", "-\t\t\t\tchar[] buffer = new char [length];", "-\t\t\t\tstr.getCharacters(buffer);", "-\t\t\t\tfor (int i = 0; i < buffer.length; i++) {", "-\t\t\t\t\ts.keyInputHappened = true;", "-\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\tif (i == 0 && type == OS.NSKeyDown) setKeyState (event, SWT.KeyDown, nsEvent);", "-\t\t\t\t\tevent.character = buffer [i];", "-\t\t\t\t\tif (!sendKeyEvent (SWT.KeyDown, event)) return false;", "+\t// sendKeyEvent may do something to run the event loop.  That would cause", "+\t// 'string' to be released before any superclass could use it, so save it", "+\t// until this method finishes.", "+\tNSObject saver = new NSObject(string);", "+\tsaver.retain();", "+\ttry {", "+\t\tif (hasKeyboardFocus(id)) {", "+\t\t\tShell s = this.getShell();", "+\t\t\tNSEvent nsEvent = NSApplication.sharedApplication ().currentEvent ();", "+\t\t\tif (nsEvent != null) {", "+\t\t\t\tint /*long*/ type = nsEvent.type ();", "+\t\t\t\tif (type == OS.NSKeyDown || type == OS.NSSystemDefined) {", "+\t\t\t\t\tNSString str = new NSString (string);", "+\t\t\t\t\tif (str.isKindOfClass (OS.class_NSAttributedString)) {", "+\t\t\t\t\t\tstr = new NSAttributedString (string).string ();", "+\t\t\t\t\t}", "+\t\t\t\t\tint length = (int)/*64*/str.length ();", "+\t\t\t\t\tchar[] buffer = new char [length];", "+\t\t\t\t\tstr.getCharacters(buffer);", "+\t\t\t\t\tfor (int i = 0; i < buffer.length; i++) {", "+\t\t\t\t\t\ts.keyInputHappened = true;", "+\t\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\t\tif (i == 0 && type == OS.NSKeyDown) setKeyState (event, SWT.KeyDown, nsEvent);", "+\t\t\t\t\t\tevent.character = buffer [i];", "+\t\t\t\t\t\tif (!sendKeyEvent (SWT.KeyDown, event)) return false;", "+\t\t\t\t\t}", "+\t\t\tif ((state & CANVAS) != 0) return true;", "-\t\tif ((state & CANVAS) != 0) return true;", "+", "+\t\treturn super.insertText (id, sel, string);", "+\t} finally {", "+\t\tsaver.release();", "-\treturn super.insertText (id, sel, string);"]}], "num": 50011}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7477d5f9637a31c33440a38e345e57c9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b9c41bfc53d592ebc524e7bc7a1a203", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 137, "signatureBeforeChange": "   \tpublic void textChanged(int startOffset, int newLineCount, int replaceLineCount, int newCharCount, int replaceCharCount)", "signatureAfterChange": " int getLineIndex(int y)", "diff": ["-\t */  ", "-\tpublic void textChanged(int startOffset, int newLineCount, int replaceLineCount, int newCharCount, int replaceCharCount) {", "-\t\tint startLine = visualContent.getLineAtOffset(startOffset);", "-\t\tvisualContent.textChanged(startOffset, newLineCount, replaceLineCount, newCharCount, replaceCharCount);", "-", "-\t\t// if we are wrapping then it is possible for a deletion on the last", "-\t\t// line of text to shorten the total text length by a line.  If this", "-\t\t// occurs then the startIndex must be adjusted such that a redraw will", "-\t\t// be performed if a visible region is affected.  fixes bug 42947.", "-\t\tif (wordWrap) {", "-\t\t\tint lineCount = content.getLineCount();", "-\t\t\tif (startLine >= lineCount) startLine = lineCount - 1;  ", "-\t\t}", "-\t\tif (startLine <= getPartialBottomIndex()) {", "-\t\t\t// only redraw if the text change affects text inside or above ", "-\t\t\t// the visible lines. if it is below the visible lines it will", "-\t\t\t// not affect the word wrapping. fixes bug 14047.", "-\t\t\tparent.internalRedraw();", "-\t\t}", "-\t}", "+ */", "+int getLineIndex(int y) {", "+\ty -= topMargin;", "+\tif (isFixedLineHeight()) {", "+\t\tint lineHeight = renderer.getLineHeight();", "+\t\tint lineIndex = (y + getVerticalScrollOffset()) / lineHeight;", "+\t\tint lineCount = content.getLineCount();", "+\t\tif (lineIndex >= lineCount) {", "+\t\t\tlineIndex = lineCount - 1;", "+\t\t}", "+\t\treturn lineIndex;", "+\t}", "+\t", "+\tint line = topIndex;", "+\tif (y < 0) {", "+\t\tif (line == 0) return 0;", "+\t\tline--;", "+\t\ty += renderer.getLineHeight(line) - partialHeight;", "+\t\twhile (y < 0 && line > 0) {", "+\t\t\tline--;", "+\t\t\ty += renderer.getLineHeight(line);", "+\t\t}", "+\t} else {", "+\t\tif (partialHeight > y) return line - 1;", "+\t\ty -= partialHeight;", "+\t\tint lineCount = content.getLineCount();", "+\t\twhile (line < lineCount - 1) {", "+\t\t\tint lineHeight = renderer.getLineHeight(line);", "+\t\t\tif (lineHeight > y) break;", "+\t\t\ty -= lineHeight;", "+\t\t\tline++;", "+\t\t}", "+\t}", "+\treturn line;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2df2795014a02510c143c8e3ab716c2f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 276, "signatureBeforeChange": "   \tpublic void textChanged(int startOffset, int newLineCount, int replaceLineCount, int newCharCount, int replaceCharCount)", "signatureAfterChange": " public void setLineAlignment(int startLine, int lineCount, int alignment)", "diff": ["-\t */  ", "-\tpublic void textChanged(int startOffset, int newLineCount, int replaceLineCount, int newCharCount, int replaceCharCount) {", "-\t\tint startLine = parent.getLineAtOffset(startOffset);", "-\t\tboolean removedMaxLine = (maxWidthLineIndex > startLine && maxWidthLineIndex <= startLine + replaceLineCount);", "-\t\t// entire text deleted?", "-\t\tif (startLine == 0 && replaceLineCount == lineCount) {", "-\t\t\tlineCount = newLineCount;", "-\t\t\tlineWidth = new int[lineCount];", "-\t\t\treset(0, lineCount, false);", "-\t\t\tmaxWidth = 0;", "-\t\t}", "-\t\telse {", "-\t\t\tlinesChanged(startLine, -replaceLineCount);", "-\t\t\tlinesChanged(startLine, newLineCount);", "-\t\t\tlineWidth[startLine] = -1;", "-\t\t}", "-\t\t// only calculate the visible lines. otherwise measurements of changed lines ", "-\t\t// outside the visible area may subsequently change again without the ", "-\t\t// lines ever being visible.", "-\t\tcalculateVisible(startLine, newLineCount);", "-\t\t// maxWidthLineIndex will be -1 (i.e., unknown line width) if the widget has ", "-\t\t// not been visible yet and the changed lines have therefore not been", "-\t\t// calculated above.", "-\t\tif (removedMaxLine || ", "-\t\t\t(maxWidthLineIndex != -1 && lineWidth[maxWidthLineIndex] < maxWidth)) {", "-\t\t\t// longest line has been removed or changed and is now shorter.", "-\t\t\t// need to recalculate maximum content width for all lines", "-\t\t\tmaxWidth = 0;", "-\t\t\tfor (int i = 0; i < lineCount; i++) {", "-\t\t\t\tif (lineWidth[i] > maxWidth) {", "-\t\t\t\t\tmaxWidth = lineWidth[i];", "-\t\t\t\t\tmaxWidthLineIndex = i;", "-\t\t\t\t}", "-\t\t\t}\t\t\t", "-\t\t}", "-\t}", "+ */", "+public void setLineAlignment(int startLine, int lineCount, int alignment) {", "+\tcheckWidget();", "+\tif (isListening(LineGetStyle)) return;", "+\tif (startLine < 0 || startLine + lineCount > content.getLineCount()) {", "+\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t}", "+", "+\trenderer.setLineAlignment(startLine, lineCount, alignment);", "+\tresetCache(startLine, lineCount);", "+\tredrawLines(startLine, lineCount);", "+\tint caretLine = getCaretLine();", "+\tif (startLine <= caretLine && caretLine < startLine + lineCount) {", "+\t\tsetCaretLocation();"]}], "num": 34524}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e5f16b2a835dacd5958eb2b7901d4808", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5416e642df8fe2ff10e876c1608041b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 49, "signatureBeforeChange": " static String convertToLf(String text)", "signatureAfterChange": "  Menu [] getMenus (Decorations shell)", "diff": ["+", "+Menu [] getMenus (Decorations shell) {", "+\tif (menus == null) return new Menu [0];", "+\tint count = 0;", "+\tfor (int i = 0; i < menus.length; i++) {", "+\t\tMenu menu = menus[i];", "+\t\tif (menu != null && menu.parent == shell) count++;", "+\t}", "+\tint index = 0;", "+\tMenu[] result = new Menu[count];", "+\tfor (int i = 0; i < menus.length; i++) {", "+\t\tMenu menu = menus[i];", "+\t\tif (menu != null && menu.parent == shell) {", "+\t\t\tresult[index++] = menu;", "+\t\t}", "+\t}", "+\treturn result;", "+}", "-}", "-static String convertToLf(String text) {", "-\tchar Cr = '\\r';", "-\tchar Lf = '\\n';", "-\tint length = text.length ();", "-\tif (length == 0) return text;", "-\t", "-\t/* Check for an LF or CR/LF.  Assume the rest of the string ", "-\t * is formatted that way.  This will not work if the string ", "-\t * contains mixed delimiters. */", "-\tint i = text.indexOf (Lf, 0);", "-\tif (i == -1 || i == 0) return text;", "-\tif (text.charAt (i - 1) != Cr) return text;", "-", "-\t/* The string is formatted with CR/LF.", "-\t * Create a new string with the LF line delimiter. */", "-\ti = 0;", "-\tStringBuffer result = new StringBuffer ();", "-\twhile (i < length) {", "-\t\tint j = text.indexOf (Cr, i);", "-\t\tif (j == -1) j = length;", "-\t\tString s = text.substring (i, j);", "-\t\tresult.append (s);", "-\t\ti = j + 2;", "-\t\tresult.append (Lf);", "-\t}", "-\treturn result.toString ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f2ef9d26cd1b09bbd917461ec90f94a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/SwtTestCase.java", "commitBeforeChange": "34b48a1450d691429218250a2c0b9f1d585dff6c", "commitAfterChange": "6c48129efab113803ef6d6a35457b5eb7eea82a5", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " static public void assertEquals(String message, Object expected[], Object actual[])", "signatureAfterChange": " static public void assertEquals(String message, int expectedCode, Throwable actualThrowable)", "diff": ["-static public void assertEquals(String message, Object expected[], Object actual[]) {", "-\tif (expected == null && actual == null)", "-\t\treturn;", "-\tboolean equal = false;", "-\tif (expected != null && actual != null && expected.length == actual.length) {", "-\t\tif (expected.length == 0)", "-\t\t\treturn;", "-\t\tequal = true;", "-\t\tfor (int i = 0; i < expected.length; i++) {", "-\t\t\tif (!expected[i].equals(actual[i])) {", "-\t\t\t\tequal = false;", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (!equal) {", "-\t\tfailNotEquals(message, expected, actual);", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "896e8dd61e757c26c946bd107d289a83", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGenerator.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "  static int getByteCount(Class clazz)", "signatureAfterChange": "  static String loadFile (String file)", "diff": ["-static int getByteCount(Class clazz) {", "-\tif (clazz == Integer.TYPE) return 4;", "-\tif (clazz == Boolean.TYPE) return 4;", "-\tif (clazz == Long.TYPE) return 8;", "-\tif (clazz == Short.TYPE) return 2;", "-\tif (clazz == Character.TYPE) return 2;", "-\tif (clazz == Byte.TYPE) return 1;", "-\tif (clazz == Float.TYPE) return 4;", "-\tif (clazz == Double.TYPE) return 8;", "-\treturn 4;", "-}", "+static String loadFile (String file) {", "+\ttry {", "+\t\tFileReader fr = new FileReader(file);", "+\t\tBufferedReader br = new BufferedReader(fr);", "+\t\tStringBuffer str = new StringBuffer();", "+\t\tchar[] buffer = new char[1024];", "+\t\tint read;", "+\t\twhile ((read = br.read(buffer)) != -1) {", "+\t\t\tstr.append(buffer, 0, read);", "+\t\t}", "+\t\tfr.close();", "+\t\treturn str.toString();", "+\t} catch (IOException e) {", "+\t\tthrow new RuntimeException(\"File not found:\" + file, e);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa70eeebc0d912165d01c8716d363d6d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/ViewForm.java", "commitBeforeChange": "6a78943f0a75fa84ac0d133e6065f28d14a1f04e", "commitAfterChange": "beaf114c0adb88afbc3e4c5421a2b081829bd459", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " void onPaint(GC gc)", "signatureAfterChange": " void onPaint(GC gc)", "diff": ["+\tColor border = getDisplay().getSystemColor(BORDER1_COLOR);", "-\t\tif ((getStyle() & SWT.FLAT) !=0) {", "-\t\t\tgc.setForeground(borderColor1);", "-\t\t\tgc.drawRectangle(0, 0, size.x - 1, size.y - 1);", "-\t\t} else {", "-\t\t\tgc.setForeground(borderColor1);", "-\t\t\tgc.drawRectangle(0, 0, size.x - 3, size.y - 3);", "-\t\t", "-\t\t\tgc.setForeground(borderColor2);", "-\t\t\tgc.drawLine(1, size.y - 2, size.x - 1, size.y - 2);", "-\t\t\tgc.drawLine(size.x - 2, 1, size.x - 2, size.y - 1);", "-\t\t", "-\t\t\tgc.setForeground(borderColor3);", "-\t\t\tgc.drawLine(2, size.y - 1, size.x - 2, size.y - 1);", "-\t\t\tgc.drawLine(size.x - 1, 2, size.x - 1, size.y - 2);", "+\t\tgc.setForeground(border);", "+\t\tgc.drawRectangle(0, 0, size.x - 1, size.y - 1);", "+\t\tif (highlight > 0) {", "+\t\t\tint x1 = 1;", "+\t\t\tint y1 = 1;", "+\t\t\tint x2 = size.x - 1;", "+\t\t\tint y2 = size.y - 1;", "+\t\t\tint[] shape = new int[] {x1,y1, x2,y1, x2,y2, x1,y2, x1,y1+highlight,", "+\t\t\t\t\t           x1+highlight,y1+highlight, x1+highlight,y2-highlight, ", "+\t\t\t\t\t\t\t   x2-highlight,y2-highlight, x2-highlight,y1+highlight, x1,y1+highlight};", "+\t\t\tColor highlightColor = getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION);", "+\t\t\tgc.setBackground(highlightColor);", "+\t\t\tgc.fillPolygon(shape);", "-\t\tgc.setForeground(borderColor1);", "-\t\tgc.drawLine(borderLeft, separator, size.x - borderLeft - borderRight, separator);", "+\t\tgc.setForeground(border);", "+\t\tgc.drawLine(borderLeft + highlight, separator, size.x - borderLeft - borderRight - highlight, separator);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ced94a1aae8b3629b8455ee9e75ece4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "53eaef42c85a19c6c024eb953b35f15c33827e05", "commitAfterChange": "e8c16f7f9f6a3f2c095dfd48e874b4e7a9e7e851", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 134, "signatureBeforeChange": "\r int contentWidth(String text, int lineIndex, GC gc)", "signatureAfterChange": "\r StyleRange[] getVisualLineStyleData(StyleRange[] logicalStyles, int lineOffset, int lineLength)", "diff": ["- */\r", "-int contentWidth(String text, int lineIndex, GC gc) {\r", "-\tint paintX = 0;\r", "-\tint textLength = text.length();\r", "-\r", "-\tfor (int i = 0; i < textLength; i++) {\r", "-\t\tint tabIndex = text.indexOf(TAB, i);\r", "-\t\t// is tab not present or past the rendering range?\r", "-\t\tif (tabIndex == -1 || tabIndex > textLength) {\r", "-\t\t\ttabIndex = textLength;\r", "-\t\t}\r", "-\t\tif (tabIndex != i) {\r", "-\t\t\tString tabSegment = text.substring(i, tabIndex);\r", "-\t\t\tpaintX += gc.stringExtent(tabSegment).x;\r", "-\t\t\tif (tabIndex != textLength && tabWidth > 0) {\r", "-\t\t\t\tpaintX = getTabStop(paintX);\r", "-\t\t\t}\r", "-\t\t\ti = tabIndex;\r", "-\t\t}\r", "-\t\telse \t\t\r", "-\t\tif (tabWidth > 0) {\r", "-\t\t\tpaintX = getTabStop(paintX);\r", "-\t\t}\r", "-\t}\r", "-\treturn paintX;\r", "+ */\r", "+StyleRange[] getVisualLineStyleData(StyleRange[] logicalStyles, int lineOffset, int lineLength) {\r", "+\tint lineEnd = lineOffset + lineLength;\r", "+\tint oldStyleCount = logicalStyles.length;\r", "+\tint newStyleCount = 0;\r", "+\t\r", "+\tfor (int i = 0; i < oldStyleCount; i++) {\r", "+\t\tStyleRange style = logicalStyles[i];\r", "+\t\tif (style.start < lineEnd && style.start + style.length > lineOffset) {\r", "+\t\t\tnewStyleCount++;\r", "+\t\t}\r", "+\t}\r", "+\tif (newStyleCount != oldStyleCount) {\r", "+\t\tStyleRange[] newStyles = new StyleRange[newStyleCount];\r", "+\t\tfor (int i = 0, j = 0; i < oldStyleCount; i++) {\r", "+\t\t\tStyleRange style = logicalStyles[i];\r", "+\t\t\tif (style.start < lineEnd && style.start + style.length > lineOffset) {\r", "+\t\t\t\tnewStyles[j++] = logicalStyles[i];\t\t\t\t\t\t\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tlogicalStyles = newStyles;\r", "+\t}\r", "+\treturn logicalStyles;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f147252061bb1c4381b6d21cafca18e5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "f9b2da66a3aa86a16bf7c87de7bf57c3a591dc41", "commitAfterChange": "ab3a0e2212badb4230b4950583046c2765ca9b1b", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 51, "signatureBeforeChange": " \r private void onResize()", "signatureAfterChange": " \r private void onResize()", "diff": ["-\r", "+\t\r", "+\tif (layoutItems()) {\r", "+\t\tredrawTabArea(-1);\r", "+\t}\r", "+\t\r", "-\tif (oldArea == null || oldArea.width == 0 || oldArea.height == 0) {\r", "-\t\tlayoutItems();\r", "+\tif (oldArea == null) {\r", "-\t\tif (onBottom && oldArea.height != area.height){\r", "-\t\t\t// move tabs up or down if tabs on bottom\r", "-\t\t\tlayoutItems();\r", "+\t\tif (onBottom && area.height != oldArea.height) {\r", "-\t\t\tint width = 0;\r", "-\t\t\tif (oldArea.width < area.width) {\r", "-\t\t\t\twidth = area.width - oldArea.width + borderRight;\r", "-\t\t\t} else if (oldArea.width > area.width) {\r", "-\t\t\t\twidth = borderRight;\t\t\t\r", "-\t\t\t}\r", "-\t\t\tredraw(area.x + area.width - width, area.y, width, area.height, false);\r", "-\t\t\t\r", "-\t\t\tint height = 0;\r", "-\t\t\tif (oldArea.height < area.height) {\r", "-\t\t\t\theight = area.height - oldArea.height + borderBottom;\t\t\r", "-\t\t\t}\r", "-\t\t\tif (oldArea.height > area.height) {\r", "-\t\t\t\theight = borderBottom;\t\t\r", "-\t\t\t}\r", "-\t\t\tredraw(area.x, area.y + area.height - height, area.width, height, false);\t\r", "-\t\t\r", "-\t\t\tif (oldArea.width != area.width) {\r", "-\t\t\t\t// resize the widths so that all tabs are visible\r", "-\t\t\t\tlayoutItems();\r", "-\t\t\t\tredrawTabArea(-1);\r", "-\t\t\t}\r", "+\t\t\tint x1 = Math.min(area.width, oldArea.width);\r", "+\t\t\tif (area.width != oldArea.width) x1 -= 10;\r", "+\t\t\tint y1 = Math.min(area.height, oldArea.height);\r", "+\t\t\tif (area.height != oldArea.height) y1 -= 10;\r", "+\t\t\tint x2 = Math.max(area.width, oldArea.width);\r", "+\t\t\tint y2 = Math.max(area.height, oldArea.height);\t\t\r", "+\t\t\tredraw(0, y1, x2 + 10, y2 - y1, false);\r", "+\t\t\tredraw(x1, 0, x2 - x1, y2, false);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ccb17d5fdd625cf58558f3cc513a1f3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CCombo.java", "commitBeforeChange": "df63744a83b6c4ccafd10c57535b24dd9458ba96", "commitAfterChange": "49d8ee915a6006746596a7d40978b42b50fa61b3", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " void textEvent (Event event)", "signatureAfterChange": " void textEvent (Event event)", "diff": ["+\t\tcase SWT.DragDetect:", "+\t\tcase SWT.MouseDoubleClick:", "+\t\tcase SWT.MouseMove:", "+\t\tcase SWT.MouseEnter:", "+\t\tcase SWT.MouseExit:", "+\t\tcase SWT.MouseHover: {", "+\t\t\tPoint pt = getDisplay ().map (text, this, event.x, event.y);", "+\t\t\tevent.x = pt.x; event.y = pt.y;", "+\t\t\tnotifyListeners (event.type, event);", "+\t\t\tevent.type = SWT.None;", "+\t\t\tbreak;", "+\t\t}", "+\t\t\tPoint pt = getDisplay ().map (text, this, event.x, event.y);", "-\t\t\tmouseEvent.x = event.x; mouseEvent.y = event.y;", "+\t\t\tmouseEvent.x = pt.x; mouseEvent.y = pt.y;", "+\t\t\tPoint pt = getDisplay ().map (text, this, event.x, event.y);", "-\t\t\tmouseEvent.x = event.x; mouseEvent.y = event.y;", "+\t\t\tmouseEvent.x = pt.x; mouseEvent.y = pt.y;", "-\t\tcase SWT.MouseDoubleClick: {", "-\t\t\tEvent mouseEvent = new Event ();", "-\t\t\tmouseEvent.button = event.button;", "-\t\t\tmouseEvent.count = event.count;", "-\t\t\tmouseEvent.stateMask = event.stateMask;", "-\t\t\tmouseEvent.time = event.time;", "-\t\t\tmouseEvent.x = event.x; mouseEvent.y = event.y;", "-\t\t\tnotifyListeners (SWT.MouseDoubleClick, mouseEvent);", "-\t\t\tbreak;", "-\t\t}", "-\t\t\tEvent keyEvent = new Event ();", "-\t\t\tkeyEvent.time = event.time;", "-\t\t\tkeyEvent.keyCode = event.count > 0 ? SWT.ARROW_UP : SWT.ARROW_DOWN;", "-\t\t\tkeyEvent.stateMask = event.stateMask;", "-\t\t\tnotifyListeners (SWT.KeyDown, keyEvent);", "+\t\t\tnotifyListeners (SWT.MouseWheel, event);", "+\t\t\tevent.type = SWT.None;", "-\t\t\tevent.doit = keyEvent.doit;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9f335dd0e0d00e8f0bdc00ad0579acb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CBanner.java", "commitBeforeChange": "b1ca6f5c5fbbf4a2ce7198f263200d3c7f131a0a", "commitAfterChange": "1a5dd702f68c819daf5232e868f1328010e5ad8d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Point computeSize(int wHint, int hHint, boolean changed)", "signatureAfterChange": " public Point computeSize(int wHint, int hHint, boolean changed)", "diff": ["+\tboolean showCurve = left != null && right != null;", "+\t", "-\t\tPoint trim = bottom.computeSize(width, hHint);", "+\t\tPoint trim = bottom.computeSize(width, SWT.DEFAULT);", "-\tif (curve == null) {", "-\t\tif (height == SWT.DEFAULT) {", "-\t\t\tif (left != null) {", "-\t\t\t\tPoint s = left.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\t\t\tupdateCurve(s.y + BORDER_TOP + BORDER_BOTTOM + 2*BORDER_STRIPE);", "-\t\t\t}", "+\tif (showCurve) {", "+\t\tif (height != SWT.DEFAULT ) height -= BORDER_TOP + BORDER_BOTTOM + 2*BORDER_STRIPE;", "+\t\tif (width == SWT.DEFAULT) {", "+\t\t\tPoint s = left.computeSize(SWT.DEFAULT, height);", "+\t\t\tupdateCurve(s.y + BORDER_TOP + BORDER_BOTTOM + 2*BORDER_STRIPE);", "-\t\t\tupdateCurve(height);", "+\t\t\tPoint s1 = right.computeSize(rightWidth, height);", "+\t\t\tPoint s2 = left.computeSize(width - s1.x - 44, height); //44 - best guess at width of curve", "+\t\t\tupdateCurve(s2.y + BORDER_TOP + BORDER_BOTTOM + 2*BORDER_STRIPE);", "-\t} else {", "-\t\tupdateCurve(getSize().y);", "-\t}", "-\tif (height != SWT.DEFAULT && left != null && right != null) {", "-\t\theight -= BORDER_TOP + BORDER_BOTTOM + 2*BORDER_STRIPE;", "-\t\t\twidth = Math.max(MIN_LEFT, width - rightSize.x - curveWidth + 2* curveIndent);", "+\t\t\twidth -= rightSize.x + curveWidth - 2* curveIndent;", "+\t\t\twidth = Math.max(width, MIN_LEFT);", "-\tif (left != null && (width == SWT.DEFAULT || width > 0)) {", "+\tif (left != null) {", "+\t\tif (height != SWT.DEFAULT) {", "+\t\t\tleftSize.y = Math.min(leftSize.y, height);", "+\t\t}", "-\tPoint size = new Point(0, 0);", "-\tsize.x = leftSize.x;", "-\tif (left != null && right!= null) size.x += curveWidth - 2*curveIndent;", "-\tsize.x += rightSize.x;", "-\tsize.y = leftSize.y > 0 ? leftSize.y : rightSize.y;", "-\tif (left != null && right!= null) size.y +=  BORDER_TOP + BORDER_BOTTOM + 2*BORDER_STRIPE;", "-\tsize.y += bottomSize.y;", "-\tif (bottom != null && (left != null || right != null)) size.y += BORDER_TOP + BORDER_BOTTOM + BORDER_STRIPE;", "+\tint w = 0, h = 0;", "+\th += bottomSize.y;", "+\tif (bottom != null && (left != null || right != null)) h += BORDER_TOP + BORDER_BOTTOM + BORDER_STRIPE;", "+\tw += leftSize.x + rightSize.x;", "+\tif (showCurve) {", "+\t\tw += curveWidth - 2*curveIndent;", "+\t\th +=  BORDER_TOP + BORDER_BOTTOM + 2*BORDER_STRIPE;", "+\t}", "+\th += left != null ? leftSize.y : rightSize.y; ", "-\tif (wHint != SWT.DEFAULT) size.x = wHint;", "-\tif (hHint != SWT.DEFAULT) size.y = hHint;", "+\tif (wHint != SWT.DEFAULT) w = wHint;", "+\tif (hHint != SWT.DEFAULT) h = hHint;", "-\treturn new Point(size.x, size.y);", "+\tif (showCurve) updateCurve(getSize().y);", "+\treturn new Point(w, h);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "496bbb20c2b4aae36becf1f1a703b2ea", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "bf221f66369037ceea33728d5ed71d69549dd596", "commitAfterChange": "73be0ec89889e2c1322c1bfa09d83f81f689ab7f", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " void calculateTopIndex(int delta)", "signatureAfterChange": " void calculateTopIndex(int delta)", "diff": ["-\tint oldTopIndex = topIndex;\t", "+\tint oldTopIndex = topIndex;", "+\tint oldTopIndexY = topIndexY;", "-\t\tif (delta > 0) {", "-\t\t\tif (partialHeight > delta) {", "-\t\t\t\tpartialHeight -= delta;", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tdelta -= partialHeight;", "-\t\t\tpartialHeight = 0;", "-\t\t\t", "+\t\tif (delta >= 0) {", "+\t\t\tdelta -= topIndexY;", "+\t\t\tint lineIndex = topIndex;", "-\t\t\twhile (delta > 0 && topIndex < lineCount -1) {", "-\t\t\t\tint lineHeight = renderer.getLineHeight(topIndex);", "-\t\t\t\ttopIndex++;", "-\t\t\t\tif (lineHeight > delta) {", "-\t\t\t\t\tpartialHeight = lineHeight - delta;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tdelta -= lineHeight;", "+\t\t\twhile (lineIndex < lineCount) {", "+\t\t\t\tif (delta <= 0) break;", "+\t\t\t\tdelta -= renderer.getLineHeight(lineIndex++);", "+\t\t\t}", "+\t\t\tif (lineIndex < lineCount && -delta + renderer.getLineHeight(lineIndex) <= clientAreaHeight - topMargin - bottomMargin) {", "+\t\t\t\ttopIndex = lineIndex;", "+\t\t\t\ttopIndexY = -delta;", "+\t\t\t} else {", "+\t\t\t\ttopIndex = lineIndex - 1;", "+\t\t\t\ttopIndexY = -renderer.getLineHeight(topIndex) - delta;", "-\t\t\tif (topIndex > 0) {", "-\t\t\t\tint height = renderer.getLineHeight(topIndex - 1) - partialHeight;", "-\t\t\t\tif (height > -delta) {", "-\t\t\t\t\tpartialHeight -= delta;", "-\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t\tdelta += height;", "-\t\t\t\tpartialHeight = 0;", "-\t\t\t\ttopIndex--;", "-\t\t\t}", "-\t\t\twhile (-delta > 0 && topIndex > 0) {", "-\t\t\t\tint lineHeight = renderer.getLineHeight(topIndex - 1);", "-\t\t\t\tif (lineHeight > -delta) {", "-\t\t\t\t\tpartialHeight = -delta;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\ttopIndex--;", "+\t\t\tdelta -= topIndexY;", "+\t\t\tint lineIndex = topIndex;", "+\t\t\twhile (lineIndex > 0) {", "+\t\t\t\tint lineHeight = renderer.getLineHeight(lineIndex - 1);", "+\t\t\t\tif (delta + lineHeight > 0) break;", "+\t\t\t\tlineIndex--;", "+\t\t\t}", "+\t\t\tif (lineIndex == 0 || -delta + renderer.getLineHeight(lineIndex) <= clientAreaHeight - topMargin - bottomMargin) {", "+\t\t\t\ttopIndex = lineIndex;", "+\t\t\t\ttopIndexY = - delta;", "+\t\t\t} else {", "+\t\t\t\ttopIndex = lineIndex - 1;", "+\t\t\t\ttopIndexY = - renderer.getLineHeight(topIndex) - delta;", "-\tif (topIndex != oldTopIndex) {", "-\t\ttopOffset = content.getOffsetAtLine(topIndex);", "+\tif (topIndex != oldTopIndex || oldTopIndexY != topIndexY) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6dc6a3dcf751064f1e3c0b312af0b93", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "e3ffa03ceaf7703e7ab3292990f53dd9ebc09848", "commitAfterChange": "bad1afba2bae87fcb485bb971088066d4ff1a6e9", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 103, "signatureBeforeChange": "\r \r boolean translateTraversal (int key_sym, PhKeyEvent_t phEvent)", "signatureAfterChange": "\r \r boolean translateTraversal (int key_sym, PhKeyEvent_t phEvent)", "diff": ["-\tint detail = 0;\r", "-\tboolean shift = (phEvent.key_mods & OS.Pk_KM_Shift) != 0;\r", "-\tboolean control = (phEvent.key_mods & OS.Pk_KM_Ctrl) != 0;\r", "+\tint detail = SWT.TRAVERSE_NONE;\r", "+\tint code = traversalCode (key_sym, phEvent);\r", "+\tboolean all = false;\r", "-\t\tcase OS.Pk_Escape:\r", "+\t\tcase OS.Pk_Escape: {\r", "-\t\t\tif (shell.parent == null) return false;\r", "-\t\tcase OS.Pk_Return:\r", "+\t\t}\r", "+\t\tcase OS.Pk_Return: {\r", "+\t\t}\r", "-\t\tcase OS.Pk_KP_Tab:\r", "-\t\t\tdetail = SWT.TRAVERSE_TAB_NEXT;\r", "-\t\t\tif (shift) detail = SWT.TRAVERSE_TAB_PREVIOUS;\r", "+\t\tcase OS.Pk_KP_Tab: {\r", "+\t\t\tboolean next = (phEvent.key_mods & OS.Pk_KM_Shift) == 0;\r", "+\t\t\tdetail = next ? SWT.TRAVERSE_TAB_NEXT : SWT.TRAVERSE_TAB_PREVIOUS;\r", "+\t\t}\r", "-\t\tcase OS.Pk_Left: \r", "+\t\tcase OS.Pk_Left: {\r", "+\t\t}\r", "-\t\tcase OS.Pk_Right:\r", "+\t\tcase OS.Pk_Right: {\r", "+\t\t}\r", "+\t\tcase OS.Pk_Pg_Down:\r", "+\t\tcase OS.Pk_Pg_Up: {\r", "+\t\t\tall = true;\r", "+\t\t\tif ((phEvent.key_mods & OS.Pk_KM_Ctrl) == 0) return false;\r", "+\t\t\tdetail = key_sym == OS.Pk_Pg_Down ? SWT.TRAVERSE_PAGE_NEXT : SWT.TRAVERSE_PAGE_PREVIOUS;\r", "+\t\t\tbreak;\r", "+\t\t}\r", "-\tboolean doit = (detail & traversalCode (key_sym, phEvent)) != 0;\r", "-\tif (!doit && control && (key_sym == OS.Pk_Tab || key_sym == OS.Pk_Tab)) {\r", "-\t\tdoit = true;\r", "-\t\tcontrol = false;\r", "-\t}\r", "-\tif (hooks (SWT.Traverse)) {\r", "-\t\tEvent event = new Event();\r", "-\t\tevent.doit = doit;\r", "-\t\tevent.detail = detail;\r", "-\t\tsetKeyState (event, phEvent);\r", "-\t\tsendEvent (SWT.Traverse, event);\r", "-\t\tif (isDisposed ()) return true;\r", "-\t\tdoit = event.doit;\r", "-\t\tdetail = event.detail;\r", "-\t}\r", "-\tif (doit) {\r", "-\t\tswitch (detail) {\r", "-\t\t\tcase SWT.TRAVERSE_ESCAPE:\t\treturn traverseEscape ();\r", "-\t\t\tcase SWT.TRAVERSE_RETURN:\t\treturn traverseReturn ();\r", "-\t\t\tcase SWT.TRAVERSE_TAB_NEXT:\t\treturn traverseGroup (true, control);\r", "-\t\t\tcase SWT.TRAVERSE_TAB_PREVIOUS:\t\treturn traverseGroup (false, control);\r", "-\t\t\tcase SWT.TRAVERSE_ARROW_NEXT:\t\treturn traverseItem (true);\r", "-\t\t\tcase SWT.TRAVERSE_ARROW_PREVIOUS:\treturn traverseItem (false);\t\r", "-\t\t}\r", "-\t}\r", "+\tEvent event = new Event ();\r", "+\tevent.doit = (code & detail) != 0 || (phEvent.key_mods & OS.Pk_KM_Ctrl) != 0;\r", "+\tevent.detail = detail;\r", "+\tsetKeyState (event, phEvent);\r", "+\tShell shell = getShell ();\r", "+\tControl control = this;\r", "+\tdo {\r", "+\t\tif (control.traverse (event)) return true;\r", "+\t\tif (control == shell) return false;\r", "+\t\tcontrol = control.parent;\r", "+\t} while (all && control != null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cc136213b4f26d937daf1e704178694", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CCombo.java", "commitBeforeChange": "df63744a83b6c4ccafd10c57535b24dd9458ba96", "commitAfterChange": "49d8ee915a6006746596a7d40978b42b50fa61b3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void arrowEvent (Event event)", "signatureAfterChange": " void arrowEvent (Event event)", "diff": ["-\t\tcase SWT.MouseDown: {", "-\t\t\tEvent mouseEvent = new Event ();", "-\t\t\tmouseEvent.button = event.button;", "-\t\t\tmouseEvent.count = event.count;", "-\t\t\tmouseEvent.stateMask = event.stateMask;", "-\t\t\tmouseEvent.time = event.time;", "-\t\t\tmouseEvent.x = event.x; mouseEvent.y = event.y;", "-\t\t\tnotifyListeners (SWT.MouseDown, mouseEvent);", "-\t\t\tevent.doit = mouseEvent.doit;", "+\t\tcase SWT.DragDetect:", "+\t\tcase SWT.MouseDown:", "+\t\tcase SWT.MouseUp:", "+\t\tcase SWT.MouseMove:", "+\t\tcase SWT.MouseEnter:", "+\t\tcase SWT.MouseExit:", "+\t\tcase SWT.MouseHover: {", "+\t\t\tPoint pt = getDisplay ().map (arrow, this, event.x, event.y);", "+\t\t\tevent.x = pt.x; event.y = pt.y;", "+\t\t\tnotifyListeners (event.type, event);", "+\t\t\tevent.type = SWT.None;", "-\t\tcase SWT.MouseUp: {", "-\t\t\tEvent mouseEvent = new Event ();", "-\t\t\tmouseEvent.button = event.button;", "-\t\t\tmouseEvent.count = event.count;", "-\t\t\tmouseEvent.stateMask = event.stateMask;", "-\t\t\tmouseEvent.time = event.time;", "-\t\t\tmouseEvent.x = event.x; mouseEvent.y = event.y;", "-\t\t\tnotifyListeners (SWT.MouseUp, mouseEvent);", "-\t\t\tevent.doit = mouseEvent.doit;", "+\t\tcase SWT.MouseWheel: {", "+\t\t\tPoint pt = getDisplay ().map (arrow, this, event.x, event.y);", "+\t\t\tevent.x = pt.x; event.y = pt.y;", "+\t\t\tnotifyListeners (SWT.MouseWheel, event);", "+\t\t\tevent.type = SWT.None;", "+\t\t\tif (isDisposed ()) break;", "+\t\t\tif (!event.doit) break;", "+\t\t\tif (event.count != 0) {", "+\t\t\t\tevent.doit = false;", "+\t\t\t\tint oldIndex = getSelectionIndex ();", "+\t\t\t\tif (event.count > 0) {", "+\t\t\t\t\tselect (Math.max (oldIndex - 1, 0));", "+\t\t\t\t} else {", "+\t\t\t\t\tselect (Math.min (oldIndex + 1, getItemCount () - 1));", "+\t\t\t\t}", "+\t\t\t\tif (oldIndex != getSelectionIndex ()) {", "+\t\t\t\t\tEvent e = new Event();", "+\t\t\t\t\te.time = event.time;", "+\t\t\t\t\te.stateMask = event.stateMask;", "+\t\t\t\t\tnotifyListeners (SWT.Selection, e);", "+\t\t\t\t}", "+\t\t\t\tif (isDisposed ()) break;", "+\t\t\t}"]}], "num": 1038}
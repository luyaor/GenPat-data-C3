{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9adbde7fa68ab3aae6511fbf5d83cae1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1cbefb34e0a7527fbcd34cea80d5ddb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "db31883b9f41fd00bb5b0a446bfa1b3f53fba5d7", "commitAfterChange": "95bcccfd921c2b52375a1f493e992d80dc6832b5", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t \tint getSizeAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \t \tint getSizeAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tint code = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\tint code = userData != OS.eventNotHandledErr ? userData : OS.CallNextEventHandler (nextHandler, theEvent);", "-\t\tevent.width = (int) osSizeAttribute.x;", "+\t\tevent.width = (code != OS.noErr) ? -1 : (int) osSizeAttribute.x;", "-\t\tosSizeAttribute.x = event.width;", "-\t\tosSizeAttribute.y = event.height;", "-\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeHISize, CGPoint.sizeof, osSizeAttribute);", "-\t\treturn OS.noErr;", "+\t\tif (event.width != -1) {", "+\t\t\tosSizeAttribute.x = event.width;", "+\t\t\tosSizeAttribute.y = event.height;", "+\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeHISize, CGPoint.sizeof, osSizeAttribute);", "+\t\t\tcode = OS.noErr;", "+\t\treturn code;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d138e49e476cac3a3f35235c58d19ca2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "db31883b9f41fd00bb5b0a446bfa1b3f53fba5d7", "commitAfterChange": "95bcccfd921c2b52375a1f493e992d80dc6832b5", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " \t \tint getPositionAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \t \tint getPositionAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tint code = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\tint code = userData != OS.eventNotHandledErr ? userData : OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\tif (code != OS.noErr) event.width = -1;", "-\t\tosPositionAttribute.x = event.x;", "-\t\tosPositionAttribute.y = event.y;", "-\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeHIPoint, CGPoint.sizeof, osPositionAttribute);", "-\t\treturn OS.noErr;", "+\t\tif (event.width != -1) {", "+\t\t\tosPositionAttribute.x = event.x;", "+\t\t\tosPositionAttribute.y = event.y;", "+\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeHIPoint, CGPoint.sizeof, osPositionAttribute);", "+\t\t\tcode = OS.noErr;", "+\t\t}", "+\t\treturn code;"]}], "num": 1607}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c496d9a6d97824d91791864fbaa53ea", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e66f7e90a179f3563dd81831a1d27171", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ColorDialog.java", "commitBeforeChange": "d81992ac3e894363b9e0990d7b4e1bfc6b231914", "commitAfterChange": "0edff76e3e3201d3f5843887fe8abb802322fd4f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public RGB open ()", "signatureAfterChange": " public RGB open ()", "diff": ["+\t\t\trgba.alpha = 1;", "-\t\tOS.gtk_color_chooser_set_use_alpha (handle, false);", "-", "-\t\tlong /*int*/ colors = OS.g_malloc(GdkColor.sizeof * rgbs.length);", "-\t\tfor (int i=0; i<rgbs.length; i++) {", "-\t\t\tRGB rgb = rgbs[i];", "-\t\t\tif (rgb != null) {", "-\t\t\t\tcolor.red = (short)((rgb.red & 0xFF) | ((rgb.red & 0xFF) << 8));", "-\t\t\t\tcolor.green = (short)((rgb.green & 0xFF) | ((rgb.green & 0xFF) << 8));", "-\t\t\t\tcolor.blue = (short)((rgb.blue & 0xFF) | ((rgb.blue & 0xFF) << 8));", "-\t\t\t\tOS.memmove (colors + i * GdkColor.sizeof, color, GdkColor.sizeof);", "+\t\tif (OS.GTK_VERSION >= OS.VERSION (3, 4, 0)) {", "+\t\t\tint colorsPerRow = 9;", "+\t\t\tlong /*int*/ gdkRGBAS = OS.g_malloc(GdkRGBA.sizeof * rgbs.length);", "+\t\t\tfor (int i=0; i<rgbs.length; i++) {", "+\t\t\t\tRGB rgbS = rgbs[i];", "+\t\t\t\tif (rgbS != null) {", "+\t\t\t\t\trgba.red = (double) rgbS.red / 255;", "+\t\t\t\t\trgba.green = (double) rgbS.green / 255;", "+\t\t\t\t\trgba.blue = (double) rgbS.blue / 255;", "+\t\t\t\t\tOS.memmove (gdkRGBAS + i * GdkRGBA.sizeof, rgba, GdkRGBA.sizeof);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.gtk_color_chooser_add_palette(handle, OS.GTK_ORIENTATION_HORIZONTAL, colorsPerRow,", "+\t\t\t\t\trgbs.length, gdkRGBAS);", "+\t\t\tOS.gtk_color_chooser_set_rgba (handle, rgba);", "+", "+", "+\t\t\tif (OS.gtk_color_chooser_get_use_alpha(handle)) {", "+\t\t\t\tOS.gtk_color_chooser_set_use_alpha (handle, false);", "+\t\t\t}", "+\t\t\tOS.g_free (gdkRGBAS);", "+\t\t} else {", "+\t\t\tlong /*int*/ gdkColors = OS.g_malloc(GdkColor.sizeof * rgbs.length);", "+\t\t\tfor (int i=0; i<rgbs.length; i++) {", "+\t\t\t\tRGB rgb = rgbs[i];", "+\t\t\t\tif (rgb != null) {", "+\t\t\t\t\tcolor.red = (short)((rgb.red & 0xFF) | ((rgb.red & 0xFF) << 8));", "+\t\t\t\t\tcolor.green = (short)((rgb.green & 0xFF) | ((rgb.green & 0xFF) << 8));", "+\t\t\t\t\tcolor.blue = (short)((rgb.blue & 0xFF) | ((rgb.blue & 0xFF) << 8));", "+\t\t\t\t\tOS.memmove (gdkColors + i * GdkColor.sizeof, color, GdkColor.sizeof);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tlong /*int*/ strPtr = OS.gtk_color_selection_palette_to_string(gdkColors, rgbs.length);", "+\t\t\tint length = OS.strlen (strPtr);", "+", "+\t\t\tbuffer = new byte [length];", "+\t\t\tOS.memmove (buffer, strPtr, length);", "+\t\t\tString paletteString = new String (Converter.mbcsToWcs (null, buffer));", "+\t\t\tbuffer = Converter.wcsToMbcs (null, paletteString, true);", "+\t\t\tOS.g_free (gdkColors);", "+\t\t\tlong /*int*/ settings = OS.gtk_settings_get_default ();", "+\t\t\tif (settings != 0) {", "+\t\t\t\tOS.gtk_settings_set_string_property(settings, OS.gtk_color_palette, buffer, Converter.wcsToMbcs (null, \"gtk_color_selection_palette_to_string\", true));", "+", "-\t\tlong /*int*/ strPtr = OS.gtk_color_selection_palette_to_string(colors, rgbs.length);", "-\t\tint length = OS.strlen (strPtr);", "-\t\tbuffer = new byte [length];", "-\t\tOS.memmove (buffer, strPtr, length);", "-\t\tString paletteString = new String (Converter.mbcsToWcs (null, buffer));", "-\t\tbuffer = Converter.wcsToMbcs (null, paletteString, true);", "-\t\tOS.g_free (colors);", "-\t\tlong /*int*/ settings = OS.gtk_settings_get_default ();", "-\t\tif (settings != 0) {", "-\t\t\tOS.gtk_settings_set_string_property(settings, OS.gtk_color_palette, buffer, Converter.wcsToMbcs (null, \"gtk_color_selection_palette_to_string\", true));", "-\t\t}", "+", "-", "+", "+\t\t\tlong /*int*/ settings = OS.gtk_settings_get_default ();", "+\t\t\tif (settings != 0) {", "+", "+\t\t\t\tlong /*int*/ [] ptr = new long /*int*/ [1];", "+\t\t\t\tOS.g_object_get (settings, OS.gtk_color_palette, ptr, 0);", "+\t\t\t\tif (ptr [0] != 0) {", "+\t\t\t\t\tint length = OS.strlen (ptr [0]);", "+\t\t\t\t\tbuffer = new byte [length];", "+\t\t\t\t\tOS.memmove (buffer, ptr [0], length);", "+\t\t\t\t\tOS.g_free (ptr [0]);", "+\t\t\t\t\tString [] gdkColorStrings = null;", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\tString gtk_color_palette = new String(Converter.mbcsToWcs (null, buffer));", "+\t\t\t\t\t\tgdkColorStrings = splitString(gtk_color_palette, ':');", "+\t\t\t\t\t\tlength = gdkColorStrings.length;", "+\t\t\t\t\t}", "+\t\t\t\t\trgbs = new RGB [length];", "+\t\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\t\tString colorString = gdkColorStrings[i];", "+\t\t\t\t\t\tbuffer = Converter.wcsToMbcs (null, colorString, true);", "+\t\t\t\t\t\tOS.gdk_color_parse(buffer, color);", "+\t\t\t\t\t\tint redI = (color.red >> 8) & 0xFF;", "+\t\t\t\t\t\tint greenI = (color.green >> 8) & 0xFF;", "+\t\t\t\t\t\tint blueI = (color.blue >> 8) & 0xFF;", "+\t\t\t\t\t\trgbs [i] = new RGB (redI, greenI, blueI);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\tlong /*int*/ settings = OS.gtk_settings_get_default ();", "-\tif (settings != 0) {", "-\t\tlong /*int*/ [] ptr = new long /*int*/ [1];", "-\t\tOS.g_object_get (settings, OS.gtk_color_palette, ptr, 0);", "-\t\tif (ptr [0] != 0) {", "-\t\t\tint length = OS.strlen (ptr [0]);", "-\t\t\tbuffer = new byte [length];", "-\t\t\tOS.memmove (buffer, ptr [0], length);", "-\t\t\tOS.g_free (ptr [0]);", "-\t\t\tString [] gdkColorStrings = null;", "-\t\t\tif (length > 0) {", "-\t\t\t\tString gtk_color_palette = new String(Converter.mbcsToWcs (null, buffer));", "-\t\t\t\tgdkColorStrings = splitString(gtk_color_palette, ':');", "-\t\t\t\tlength = gdkColorStrings.length;", "-\t\t\t}", "-\t\t\trgbs = new RGB [length];", "-\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\tString colorString = gdkColorStrings[i];", "-\t\t\t\tbuffer = Converter.wcsToMbcs (null, colorString, true);", "-\t\t\t\tOS.gdk_color_parse(buffer, color);", "-\t\t\t\tint red = (color.red >> 8) & 0xFF;", "-\t\t\t\tint green = (color.green >> 8) & 0xFF;", "-\t\t\t\tint blue = (color.blue >> 8) & 0xFF;", "-\t\t\t\trgbs [i] = new RGB (red, green, blue);", "-\t\t\t}", "-\t\t}", "-\t}", "+", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "935753bd704af4477ac9b737c901db5e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "dbf56d36cdf507645ea89bcdaab54b5bf0bd26ff", "commitAfterChange": "b09edce9791823c67c1356847c83053f4c27bd85", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  void drawRectangles (Rectangle [] rects)", "signatureAfterChange": "  void drawRectangles (Rectangle [] rects)", "diff": ["-\t//TODO: Use Cairo", "+\tif (OS.GTK3) {", "+\t\tif (overlay == 0) return;", "+\t\tOS.gtk_widget_shape_combine_region (overlay, 0);", "+\t\tlong /*int*/ region = OS.gdk_region_new ();", "+\t\tGdkRectangle rect = new GdkRectangle();", "+\t\tfor (int i = 0; i < rects.length; i++) {", "+\t\t\tRectangle r = parent != null ? display.map(parent, null, rects[i]) : rects[i];", "+\t\t\trect.x = r.x;", "+\t\t\trect.y = r.y;", "+\t\t\trect.width = r.width;", "+\t\t\trect.height = r.height;", "+\t\t\tOS.gdk_region_union_with_rect(region, rect);", "+\t\t\trect.x++;", "+\t\t\trect.y++;", "+\t\t\trect.width -= 2;", "+\t\t\trect.height -= 2;", "+\t\t\tlong /*int*/ rgn = OS.gdk_region_rectangle(rect);", "+\t\t\tOS.gdk_region_subtract(region, rgn);", "+\t\t\tOS.gdk_region_destroy(rgn);", "+\t\t}", "+\t\tOS.gtk_widget_shape_combine_region (overlay, region);", "+\t\tOS.gdk_region_destroy (region);", "+\t\tlong /*int*/ overlayWindow = OS.gtk_widget_get_window (overlay);", "+\t\tOS.gdk_window_hide (overlayWindow);", "+\t\tOS.gdk_window_show (overlayWindow);", "+\t\treturn;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf898f157c3748553bfa7a6150aa2c9b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "1c37647de5534f8029867b682ff6e27fa9349dcf", "commitAfterChange": "96591e42a75d692597f71a4a0cadb654241fef4e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r private int dragProcCallback(int widget, int client_data, int call_data)", "signatureAfterChange": "\r private int dragProcCallback(int widget, int client_data, int call_data)", "diff": ["+}\r", "+\t\t\t\tdragOverHeartbeat = new Runnable() {\r", "+\t\t\t\t\tpublic void run() {\r", "+\t\t\t\t\t\tif (control.isDisposed() || dragOverStart == 0) return;\r", "+\t\t\t\t\t\tlong time = System.currentTimeMillis();\r", "+\t\t\t\t\t\tint delay = DRAGOVER_HYSTERESIS;\r", "+\t\t\t\t\t\tif (time >= dragOverStart) {\r", "+\t\t\t\t\t\t\tDNDEvent event = new DNDEvent();\r", "+\t\t\t\t\t\t\tevent.widget = control;\r", "+\t\t\t\t\t\t\tevent.time = (int)time;\r", "+\t\t\t\t\t\t\tevent.x = dragOverEvent.x;\r", "+\t\t\t\t\t\t\tevent.y = dragOverEvent.y;\r", "+\t\t\t\t\t\t\tevent.dataTypes  = dragOverEvent.dataTypes;\r", "+\t\t\t\t\t\t\tevent.feedback = DND.FEEDBACK_SELECT;\r", "+\t\t\t\t\t\t\tevent.operations = dragOverEvent.operations;\r", "+\t\t\t\t\t\t\tevent.dataType  = dragOverEvent.dataType;\r", "+\t\t\t\t\t\t\tevent.detail  = dragOverEvent.detail;\r", "+\t\t\t\t\t\t\tnotifyListeners(DND.DragOver, event);\r", "+\t\t\t\t\t\t\teffect.show(event.feedback, event.x, event.y);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tdelay = (int)(dragOverStart - time);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tcontrol.getDisplay().timerExec(delay, dragOverHeartbeat);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t};\r", "+\t\t\t\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);\r", "+\t\t\t\t\r", "+\t\t\t\tdragOverHeartbeat.run();\r", "+\t\t\t\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);\r", "+\t\t\t\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);\r", "+\t\t\t\tupdateDragOverHover(0, null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d9e40d0a9446264ab6be1106f75d3c3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "f664172a0e735d142051b2da26600fbd256e07a6", "commitAfterChange": "894e6297387f95786ffea31acd399cd5951b0afc", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  void drawRectangles ()", "signatureAfterChange": "   void drawRectangles (int window, boolean erase)", "diff": ["-void drawRectangles () {", "+", "+void drawRectangles (int window, boolean erase) {", "+\tint[] context = new int [1];", "+\tint port = OS.GetWindowPort (window);", "+\tRect portRect = new Rect ();", "+\tOS.GetPortBounds (port, portRect);", "+\tOS.QDBeginCGContext (port, context);", "+\tOS.CGContextScaleCTM (context [0], 1, -1);", "+\tOS.CGContextTranslateCTM (context [0], 0, portRect.top - portRect.bottom);", "+\tCGRect cgRect = new CGRect ();", "+\tfor (int i=0; i<rectangles.length; i++) {", "+\t\tRectangle rect = rectangles [i];", "+\t\tcgRect.x = rect.x;", "+\t\tcgRect.y = rect.y;", "+\t\tcgRect.width = rect.width;", "+\t\tcgRect.height = rect.height;", "+\t\tif (erase) {", "+\t\t\tcgRect.width++;", "+\t\t\tcgRect.height++;", "+\t\t\tOS.CGContextClearRect (context [0], cgRect);", "+\t\t} else {", "+\t\t\tcgRect.x += 0.5f;", "+\t\t\tcgRect.y += 0.5f;", "+\t\t\tOS.CGContextStrokeRect (context [0], cgRect);", "+\t\t}", "+\t}", "+\tOS.CGContextSynchronize (context [0]);", "+\tOS.QDEndCGContext (port, context);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5119087065061152c74c2d042e7eba32", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "cc0fad88555aedea732afabf4f640a307f9e13a1", "commitAfterChange": "6cafe1a53c0f4db15b7c20ac96efa6457f877696", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void drawBackground (int id, NSGraphicsContext context, NSRect rect)", "signatureAfterChange": "  public void drawBackground(GC gc, int x, int y, int width, int height, int offsetX, int offsetY)", "diff": ["+public void drawBackground(GC gc, int x, int y, int width, int height, int offsetX, int offsetY) {", "+\tcheckWidget ();", "+\tif (gc == null) error (SWT.ERROR_NULL_ARGUMENT);", "+\tif (gc.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);", "+\tControl control = findBackgroundControl ();", "+\tif (control != null) {", "+\t\tNSRect rect = new NSRect();", "+\t\trect.x = x;", "+\t\trect.y = y;", "+\t\trect.width = width;", "+\t\trect.height = height;", "+\t\tint imgHeight = -1;", "+\t\tGCData data = gc.getGCData();", "+\t\tif (data.image != null) imgHeight =  data.image.getBounds().height;", "+\t\tNSGraphicsContext context = gc.handle;", "+\t\tif (data.flippedContext != null) {", "+\t\t\tNSGraphicsContext.static_saveGraphicsState();", "+\t\t\tNSGraphicsContext.setCurrentContext(context);", "+\t\t}", "+\t\tcontrol.fillBackground (view, context, rect, imgHeight, offsetX, offsetY);", "+\t\tif (data.flippedContext != null) {", "+\t\t\tNSGraphicsContext.static_restoreGraphicsState();", "+\t\t}", "+\t} else {", "+\t\tgc.fillRectangle (x, y, width, height);", "+\t}", "+}"]}], "num": 63383}
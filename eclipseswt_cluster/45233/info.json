{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09641d32af3f68570c7f38ed603edc31", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "242d2e06c8e22cfbadc5d310fb302748", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "6938a0dacfb030f7e7b03dc092215adacd9a08a9", "commitAfterChange": "2f091781ca405b743f12ec57a146bdda9d7d30d0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void copyArea(Image image, int x, int y)", "signatureAfterChange": " public void copyArea(Image image, int x, int y)", "diff": ["-\tImage srcImage = data.image;", "-\tif (srcImage != null) {", "-\t\tint srcX = x, srcY = y, destX = 0, destY = 0;", "-\t\tNSSize srcSize = srcImage.handle.size();", "-\t\tint imgHeight = (int)srcSize.height;", "-\t\tint destWidth = (int)srcSize.width - x, destHeight = (int)srcSize.height - y;", "-\t\tint srcWidth = destWidth, srcHeight = destHeight;\t\t", "-\t\tNSGraphicsContext context = NSGraphicsContext.graphicsContextWithBitmapImageRep(image.imageRep);", "-\t\tNSGraphicsContext.static_saveGraphicsState();", "-\t\tNSGraphicsContext.setCurrentContext(context);", "-\t\tNSAffineTransform transform = NSAffineTransform.transform();", "-\t\tNSSize size = image.handle.size();", "-\t\ttransform.translateXBy(0, size.height-(destHeight + 2 * destY));", "-\t\ttransform.concat();", "-\t\tNSRect srcRect = new NSRect();", "-\t\tsrcRect.x = srcX;", "-\t\tsrcRect.y = imgHeight - (srcY + srcHeight);", "-\t\tsrcRect.width = srcWidth;", "-\t\tsrcRect.height = srcHeight;", "-\t\tNSRect destRect = new NSRect();", "-\t\tdestRect.x = destX;", "-\t\tdestRect.y = destY;", "-\t\tdestRect.width = destWidth;", "-\t\tdestRect.height = destHeight;", "-\t\tsrcImage.handle.drawInRect(destRect, srcRect, OS.NSCompositeCopy, 1);", "- \t\tNSGraphicsContext.static_restoreGraphicsState();", "-\t\treturn;", "+\tNSAutoreleasePool pool = checkGC(TRANSFORM | CLIPPING);", "+\ttry {", "+\t\tif (data.image != null) {", "+\t\t\tint srcX = x, srcY = y, destX = 0, destY = 0;", "+\t\t\tNSSize srcSize = data.image.handle.size();", "+\t\t\tint imgHeight = (int)srcSize.height;", "+\t\t\tint destWidth = (int)srcSize.width - x, destHeight = (int)srcSize.height - y;", "+\t\t\tint srcWidth = destWidth, srcHeight = destHeight;\t\t", "+\t\t\tNSGraphicsContext context = NSGraphicsContext.graphicsContextWithBitmapImageRep(image.imageRep);", "+\t\t\tNSGraphicsContext.static_saveGraphicsState();", "+\t\t\tNSGraphicsContext.setCurrentContext(context);", "+\t\t\tNSAffineTransform transform = NSAffineTransform.transform();", "+\t\t\tNSSize size = image.handle.size();", "+\t\t\ttransform.translateXBy(0, size.height-(destHeight + 2 * destY));", "+\t\t\ttransform.concat();", "+\t\t\tNSRect srcRect = new NSRect();", "+\t\t\tsrcRect.x = srcX;", "+\t\t\tsrcRect.y = imgHeight - (srcY + srcHeight);", "+\t\t\tsrcRect.width = srcWidth;", "+\t\t\tsrcRect.height = srcHeight;", "+\t\t\tNSRect destRect = new NSRect();", "+\t\t\tdestRect.x = destX;", "+\t\t\tdestRect.y = destY;", "+\t\t\tdestRect.width = destWidth;", "+\t\t\tdestRect.height = destHeight;", "+\t\t\tdata.image.handle.drawInRect(destRect, srcRect, OS.NSCompositeCopy, 1);", "+\t \t\tNSGraphicsContext.static_restoreGraphicsState();", "+\t\t\treturn;", "+\t\t}", "+\t\tif (data.view != null) {", "+\t\t\t//TODO implement copyArea(Image, int int) for views", "+\t\t\treturn;", "+\t\t}", "+\t\tif (handle.isDrawingToScreen()) {", "+\t\t\tNSImage imageHandle = image.handle;", "+\t\t\tNSSize size = imageHandle.size();", "+\t\t\tCGRect rect = new CGRect();", "+\t\t\trect.origin.x = x;", "+\t\t\trect.origin.y = y;", "+\t\t\trect.size.width = size.width;", "+\t\t\trect.size.height = size.height;", "+\t\t\tint displayCount = 16;", "+\t\t\tint /*long*/ displays = OS.malloc(4 * displayCount), countPtr = OS.malloc(4);", "+\t\t\tif (OS.CGGetDisplaysWithRect(rect, displayCount, displays, countPtr) != 0) return;", "+\t\t\tint[] count = new int[1], display = new int[1];", "+\t\t\tOS.memmove(count, countPtr, OS.PTR_SIZEOF);", "+\t\t\tfor (int i = 0; i < count[0]; i++) {", "+\t\t\t\tOS.memmove(display, displays + (i * 4), 4);", "+\t\t\t\tOS.CGDisplayBounds(display[0], rect);", "+\t\t\t\tint /*long*/ address = OS.CGDisplayBaseAddress(display[0]);", "+\t\t\t\tif (address != 0) {", "+\t\t\t\t\tint /*long*/ width = OS.CGDisplayPixelsWide(display[0]);", "+\t\t\t\t\tint /*long*/ height = OS.CGDisplayPixelsHigh(display[0]);", "+\t\t\t\t\tint /*long*/ bpr = OS.CGDisplayBytesPerRow(display[0]);", "+\t\t\t\t\tint /*long*/ bpp = OS.CGDisplayBitsPerPixel(display[0]);", "+\t\t\t\t\tint /*long*/ bps = OS.CGDisplayBitsPerSample(display[0]);", "+\t\t\t\t\tint bitmapInfo = OS.kCGImageAlphaNoneSkipFirst;", "+\t\t\t\t\tswitch ((int)/*63*/bpp) {", "+\t\t\t\t\t\tcase 16: bitmapInfo |= OS.kCGBitmapByteOrder16Host; break;", "+\t\t\t\t\t\tcase 32: bitmapInfo |= OS.kCGBitmapByteOrder32Host; break;", "+\t\t\t\t\t}", "+\t\t\t\t\tint /*long*/ srcImage = 0;", "+\t\t\t\t\tif (OS.__BIG_ENDIAN__() && OS.VERSION >= 0x1040) {", "+\t\t\t\t\t\tint /*long*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "+\t\t\t\t\t\tint /*long*/ context = OS.CGBitmapContextCreate(address, width, height, bps, bpr, colorspace, bitmapInfo);", "+\t\t\t\t\t\tOS.CGColorSpaceRelease(colorspace);", "+\t\t\t\t\t\tsrcImage = OS.CGBitmapContextCreateImage(context);", "+\t\t\t\t\t\tOS.CGContextRelease(context);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint /*long*/ provider = OS.CGDataProviderCreateWithData(0, address, bpr * height, 0);", "+\t\t\t\t\t\tint /*long*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "+\t\t\t\t\t\tsrcImage = OS.CGImageCreate(width, height, bps, bpp, bpr, colorspace, bitmapInfo, provider, 0, true, 0);", "+\t\t\t\t\t\tOS.CGColorSpaceRelease(colorspace);", "+\t\t\t\t\t\tOS.CGDataProviderRelease(provider);", "+\t\t\t\t\t}", "+\t\t\t\t\tcopyArea(image, x - (int)rect.origin.x, y - (int)rect.origin.y, srcImage);", "+\t\t\t\t\tif (srcImage != 0) OS.CGImageRelease(srcImage);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.free(displays);", "+\t\t\tOS.free(countPtr);", "+\t\t}\t", "+\t} finally {", "+\t\tuncheckGC(pool);", "-\tif (data.view != null) {", "-\t\t//TODO implement copyArea(Image, int int) for views", "-\t\treturn;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b545c260fbde65822be457666b0b5502", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "26615d151623308bd52afc83b930f16926d42d34", "commitAfterChange": "81c0d6a9ea3d94ab81d4b84017e9c471a6ec66f8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public FontData open ()", "signatureAfterChange": " public FontData open ()", "diff": ["-//\tif (OS.IsWinCE) SWT.error (SWT.ERROR_NOT_IMPLEMENTED);", "-//\t", "-//\t/* Get the owner HWND for the dialog */", "-//\tint hwndOwner = 0;", "-//\tif (parent != null) hwndOwner = parent.handle;", "-//", "-//\t/* Open the dialog */", "-//\tint hHeap = OS.GetProcessHeap ();", "-//\tCHOOSEFONT lpcf = new CHOOSEFONT ();", "-//\tlpcf.lStructSize = CHOOSEFONT.sizeof;", "-//\tlpcf.hwndOwner = hwndOwner;", "-//\tlpcf.Flags = OS.CF_SCREENFONTS | OS.CF_EFFECTS;", "-//\tint lpLogFont = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, LOGFONT.sizeof);", "-//\tif (fontData != null && fontData.data != null) {", "-//\t\tLOGFONT logFont = fontData.data;", "-//\t\tint lfHeight = logFont.lfHeight;", "-//\t\tint hDC = OS.GetDC (0);", "-//\t\tint pixels = -Compatibility.round (fontData.height * OS.GetDeviceCaps(hDC, OS.LOGPIXELSY), 72);", "-//\t\tOS.ReleaseDC (0, hDC);", "-//\t\tlogFont.lfHeight = pixels;", "-//\t\tlpcf.Flags |= OS.CF_INITTOLOGFONTSTRUCT;", "-//\t\tOS.MoveMemory (lpLogFont, logFont, LOGFONT.sizeof);", "-//\t\tlogFont.lfHeight = lfHeight;", "-//\t}", "-//\tlpcf.lpLogFont = lpLogFont;", "-//\tif (rgb != null) {", "-//\t\tint red = rgb.red & 0xFF;", "-//\t\tint green = (rgb.green << 8) & 0xFF00;", "-//\t\tint blue = (rgb.blue << 16) & 0xFF0000;", "-//\t\tlpcf.rgbColors = red | green | blue;", "-//\t}", "-//\t", "-//\t/* Make the parent shell be temporary modal */", "-//\tShell oldModal = null;", "-//\tDisplay display = null;", "-//\tif ((style & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "-//\t\tdisplay = parent.getDisplay ();", "-//\t\toldModal = display.getModalDialogShell ();", "-//\t\tdisplay.setModalDialogShell (parent);", "-//\t}", "-//", "-//\t/* Open the dialog */", "-//\tboolean success = OS.ChooseFont (lpcf);", "-//\t", "-//\t/* Clear the temporary dialog modal parent */", "-//\tif ((style & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "-//\t\tdisplay.setModalDialogShell (oldModal);", "-//\t}", "-//\t", "-//\t/* Compute the result */", "-//\tif (success) {", "-//\t\tLOGFONT logFont = OS.IsUnicode ? (LOGFONT) new LOGFONTW () : new LOGFONTA ();", "-//\t\tOS.MoveMemory (logFont, lpLogFont, LOGFONT.sizeof);", "-//", "-//\t\t/*", "-//\t\t * This will not work on multiple screens or", "-//\t\t * for printing. Should use DC for the proper device.", "-//\t\t */", "-//\t\tint hDC = OS.GetDC(0);", "-//\t\tint logPixelsY = OS.GetDeviceCaps(hDC, OS.LOGPIXELSY);", "-//\t\tint pixels = 0; ", "-//\t\tif (logFont.lfHeight > 0) {", "-//\t\t\t/*", "-//\t\t\t * Feature in Windows. If the lfHeight of the LOGFONT structure", "-//\t\t\t * is positive, the lfHeight measures the height of the entire", "-//\t\t\t * cell, including internal leading, in logical units. Since the", "-//\t\t\t * height of a font in points does not include the internal leading,", "-//\t\t\t * we must subtract the internal leading, which requires a TEXTMETRIC,", "-//\t\t\t * which in turn requires font creation.", "-//\t\t\t */", "-//\t\t\tint hFont = OS.CreateFontIndirect(logFont);", "-//\t\t\tint oldFont = OS.SelectObject(hDC, hFont);", "-//\t\t\tTEXTMETRIC lptm = OS.IsUnicode ? (TEXTMETRIC) new TEXTMETRICW () : new TEXTMETRICA ();", "-//\t\t\tOS.GetTextMetrics(hDC, lptm);", "-//\t\t\tOS.SelectObject(hDC, oldFont);", "-//\t\t\tOS.DeleteObject(hFont);", "-//\t\t\tpixels = logFont.lfHeight - lptm.tmInternalLeading;", "-//\t\t} else {", "-//\t\t\tpixels = -logFont.lfHeight;", "-//\t\t}", "-//\t\tOS.ReleaseDC(0, hDC);", "-//", "-//\t\tint points = Compatibility.round(pixels * 72, logPixelsY);", "-//\t\tfontData = FontData.win32_new (logFont, points);", "-//\t\tint red = lpcf.rgbColors & 0xFF;", "-//\t\tint green = (lpcf.rgbColors >> 8) & 0xFF;", "-//\t\tint blue = (lpcf.rgbColors >> 16) & 0xFF;", "-//\t\trgb = new RGB (red, green, blue);", "-//\t}", "-//\t\t", "-//\t/* Free the OS memory */", "-//\tif (lpLogFont != 0) OS.HeapFree (hHeap, 0, lpLogFont);", "-//", "-//\t/*", "-//\t* This code is intentionally commented.  On some", "-//\t* platforms, the owner window is repainted right", "-//\t* away when a dialog window exits.  This behavior", "-//\t* is currently unspecified.", "-//\t*/", "-////\tif (hwndOwner != 0) OS.UpdateWindow (hwndOwner);", "-//\t", "-//\tif (!success) return null;", "-//\treturn fontData;", "-\treturn null;", "+\tint dialog = OS.gcnew_FontDialog ();", "+\tOS.FontDialog_ShowColor  (dialog, true);", "+\tif (fontData != null) {", "+\t\tint fontFamily = parent.createDotNetString (fontData.fontFamily, false);", "+\t\tint fontStyle = 0;", "+\t\tint fontWeight = OS.FontWeight_ToOpenTypeWeight (OS.FontWeights_Bold);", "+\t\tif (fontWeight == fontData.weight) fontStyle |= OS.FontStyle_Bold;", "+\t\tif (fontData.style == OS.FontStyles_Italic) fontStyle |= OS.FontStyle_Italic;", "+\t\tif (fontData.style == OS.FontStyles_Normal) fontStyle |= OS.FontStyle_Regular;", "+\t\t//TODO strikethrough/underline", "+\t\tint font = OS.gcnew_Font (fontFamily, fontData.height, fontStyle);", "+\t\tOS.FontDialog_Font (dialog, font);", "+\t\tOS.GCHandle_Free (font);", "+\t\tOS.GCHandle_Free (fontFamily);", "+\t}", "+\tif (rgb != null) {", "+\t\tint color = OS.DrawingColor_FromArgb (174, rgb.red, rgb.blue, rgb.green);", "+\t\tOS.FontDialog_Color (dialog, color);", "+\t\tOS.GCHandle_Free (color);", "+\t}", "+\tint result = OS.FormsCommonDialog_ShowDialog (dialog);", "+\tboolean success = result == OS.DialogResult_OK; ", "+\tif (success) {", "+\t\tint font = OS.FontDialog_Font (dialog);", "+\t\tint fontFamilyPtr = OS.Font_FontFamily (font);", "+\t\tint fontFamilyName = OS.DrawingFontFamily_Name (fontFamilyPtr);", "+\t\tString fontFamily = Widget.createJavaString (fontFamilyName);", "+\t\tint fontStyle = OS.Font_Style (font);", "+\t\tint fontDataStyle;", "+\t\tif ((fontStyle & OS.FontStyle_Italic) != 0) {", "+\t\t\tfontDataStyle = OS.FontStyles_Italic;", "+\t\t} else {", "+\t\t\tfontDataStyle = OS.FontStyles_Normal;", "+\t\t}", "+\t\tint weight; ", "+\t\tif ((fontStyle & OS.FontStyle_Bold) != 0) {", "+\t\t\tweight = OS.FontWeight_ToOpenTypeWeight (OS.FontWeights_Bold);", "+\t\t} else {", "+\t\t\tweight = OS.FontWeight_ToOpenTypeWeight (OS.FontWeights_Normal);", "+\t\t}", "+\t\tint height = OS.Font_Size (font);", "+\t\tOS.GCHandle_Free(fontFamilyName);", "+\t\tOS.GCHandle_Free(fontFamilyPtr);", "+\t\tOS.GCHandle_Free(font);", "+\t\tfontData = FontData.wpf_new (fontFamily, fontDataStyle, weight, 1, height);", "+\t\t\t\t", "+\t\tint color = OS.FontDialog_Color (dialog);", "+\t\tint argb = OS.DrawingColor_ToArgb (color);\t", "+\t\tint red = (argb & 0xFF0000) >> 16;", "+\t\tint green = (argb & 0xFF00) >> 8;", "+\t\tint blue = argb & 0xFF;", "+\t\tOS.GCHandle_Free (color);", "+\t\trgb = new RGB (red, green, blue);", "+\t}", "+\tOS.GCHandle_Free (dialog);", "+\treturn success ? fontData : null;"]}], "num": 45233}
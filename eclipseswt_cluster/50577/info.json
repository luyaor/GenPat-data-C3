{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6a51f5ec5021ed91a8aea3e43b11458", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb46467bf574eb52a3cfa75b400f6b12", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/internal/image/GIFFileFormat.java", "commitBeforeChange": "44c31398c5f7d5a95cc03a487182c9e0b2abe8be", "commitAfterChange": "ff9c15961deba7f09d9b58b96d5ee00c19a9ff6f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tImageData[] loadFromByteStream()", "signatureAfterChange": " \tImageData[] loadFromByteStream()", "diff": ["-\t\tgetExtensions();", "-\t\tint id = readID();", "-\t\twhile (id == GIF_IMAGE_BLOCK_ID) {", "-\t\t\tImageData image = readImageBlock(palette);", "-\t\t\tif (loader.hasListeners()) {", "-\t\t\t\tloader.notifyListeners(new ImageLoaderEvent(loader, image, 3, true));", "-\t\t\t}", "-\t\t\tImageData[] oldImages = images;", "-\t\t\timages = new ImageData[oldImages.length + 1];", "-\t\t\tSystem.arraycopy(oldImages, 0, images, 0, oldImages.length);", "-\t\t\timages[images.length - 1] = image;", "-\t\t\ttry {", "-\t\t\t\t/* Read the 0-byte terminator at the end of the image. */", "-\t\t\t\tid = inputStream.read();", "-\t\t\t\tif (id > 0) {", "-\t\t\t\t\t/* We read the terminator earlier. */", "-\t\t\t\t\tinputStream.unread(new byte[] {(byte)id});", "+\t\tint id = readID();", "+\t\twhile (id != GIF_TRAILER_ID && id != -1) {", "+\t\t\tif (id == GIF_IMAGE_BLOCK_ID) {", "+\t\t\t\tImageData image = readImageBlock(palette);", "+\t\t\t\tif (loader.hasListeners()) {", "+\t\t\t\t\tloader.notifyListeners(new ImageLoaderEvent(loader, image, 3, true));", "-\t\t\t} catch (IOException e) {", "-\t\t\t\tSWT.error(SWT.ERROR_IO, e);", "+\t\t\t\tImageData[] oldImages = images;", "+\t\t\t\timages = new ImageData[oldImages.length + 1];", "+\t\t\t\tSystem.arraycopy(oldImages, 0, images, 0, oldImages.length);", "+\t\t\t\timages[images.length - 1] = image;", "+\t\t\t} else if (id == GIF_EXTENSION_BLOCK_ID) {", "+\t\t\t\t/* Read the extension block. Currently, only the", "+\t\t\t\t * interesting parts of certain extensions are kept,", "+\t\t\t\t * and the rest is discarded. In future, if we want", "+\t\t\t\t * to keep extensions, they should be grouped with", "+\t\t\t\t * the image data before which they appear.", "+\t\t\t\t */", "+\t\t\t\treadExtension();", "+\t\t\t} else {", "+\t\t\t\t/* The GIF is not to spec, but try to salvage it", "+\t\t\t\t * if we read at least one image. */", "+\t\t\t\tif (images.length > 0) break;", "+\t\t\t\tSWT.error(SWT.ERROR_INVALID_IMAGE);", "-\t\t\tgetExtensions();", "-\t\t\tid = readID();", "+\t\t\tid = readID(); // block terminator (0)", "+\t\t\tif (id == 0) id = readID(); // next block ID (unless we just read it)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9343544872db57413b820cba2795461", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "9d8d281eb4a9ea642c46220cee0461b3556ee22a", "commitAfterChange": "8038ca7b432f0c35c2ee4f8c3164760226ff5589", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  void updateImages ()", "signatureAfterChange": "  void updateImages ()", "diff": ["-\t\tinfo.iImage = imageList.add (image);", "-\t\tparent.setImageList (imageList);", "-\t\tif (disabledImageList == null) disabledImageList = display.getToolDisabledImageList (size);", "+\t\tif (disabledImageList == null) {", "+\t\t\tdisabledImageList = display.getToolDisabledImageList (size);", "+\t\t}", "+\t\tif (hotImageList == null) {", "+\t\t\thotImageList = display.getToolHotImageList (size);", "+\t\t}", "+\t\t/*", "+\t\t* Bug in Windows.  When a tool item with the style", "+\t\t* BTNS_CHECK or BTNS_CHECKGROUP is selected and then", "+\t\t* disabled, the item does not draw using the disabled", "+\t\t* image.  The fix is to assign the disabled image in", "+\t\t* all image lists.", "+\t\t*/", "+\t\tImage image2 = image, hot = hotImage;", "+\t\tif ((style & (SWT.CHECK | SWT.RADIO)) != 0) {", "+\t\t\tif (!getEnabled ()) image2 = hot = disabled;", "+\t\t}", "+\t\tinfo.iImage = imageList.add (image2);", "+\t\thotImageList.add (hot != null ? hot : image2);", "+\t\tparent.setImageList (imageList);", "-//\t\tif ((parent.style & SWT.FLAT) != 0) {", "-\t\t\tif (hotImageList == null) hotImageList = display.getToolHotImageList (size);", "-\t\t\thotImageList.add (hotImage != null ? hotImage : image);", "-\t\t\tparent.setHotImageList (hotImageList);", "-//\t\t}", "+\t\tparent.setHotImageList (hotImageList);", "-\t\tif (imageList != null) imageList.put (info.iImage, image);", "+\t\tImage disabled = null;", "-\t\t\tImage disabled = null;", "+\t\t/*", "+\t\t* Bug in Windows.  When a tool item with the style", "+\t\t* BTNS_CHECK or BTNS_CHECKGROUP is selected and then", "+\t\t* disabled, the item does not draw using the disabled", "+\t\t* image.  The fix is to use the disabled image in all", "+\t\t* image lists.", "+\t\t*/", "+\t\tImage image2 = image;", "+\t\tif ((style & (SWT.CHECK | SWT.RADIO)) != 0) {", "+\t\t\tif (!getEnabled ()) image2 = disabled;", "+\t\t}", "+\t\tif (imageList != null) imageList.put (info.iImage, image2);", "-\t\t\tif (image != null) hot = hotImage != null ? hotImage : image;", "+\t\t\tif (image2 != null) hot = hotImage != null ? hotImage : image2;"]}], "num": 50577}
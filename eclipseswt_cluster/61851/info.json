{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c70482dde282fe92a0b6ade5d39d3998", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0756450e1388e9dd21fc30629ce78706", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "74553fa6850361f786837718de64643b391519f8", "commitAfterChange": "bf33a068cd8d34feb66b3cb1cbaacdbe09b72620", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void javaToNative(Object object, TransferData transferData)", "signatureAfterChange": " public void javaToNative(Object object, TransferData transferData)", "diff": ["-", "-\tif (object == null || !(object instanceof String[])) {", "-\t\ttransferData.result = COM.E_FAIL;", "-\t\treturn;", "-\t}", "-\t", "-\tif (isSupportedType(transferData)) {", "-", "-\t\tString[] fileNames = (String[]) object;", "-\t\tStringBuffer allFiles = new StringBuffer();", "-\t\tfor (int i = 0; i < fileNames.length; i++) {", "-\t\t\tallFiles.append(fileNames[i]); ", "-\t\t\tallFiles.append('\\0'); // each name is null terminated", "-\t\t}", "-\t\tTCHAR buffer = new TCHAR(0, allFiles.toString(), true); // there is an extra null terminator at the very end", "-\t\t", "-\t\tDROPFILES dropfiles = new DROPFILES();", "-\t\tdropfiles.pFiles = DROPFILES.sizeof;", "-\t\tdropfiles.pt_x = dropfiles.pt_y = 0;", "-\t\tdropfiles.fNC = 0;", "-\t\tdropfiles.fWide = COM.IsUnicode ? 1 : 0;", "-\t\t", "-\t\t// Allocate the memory because the caller (DropTarget) has not handed it in", "-\t\t// The caller of this method must release the data when it is done with it.", "-\t\tint byteCount = buffer.length() * TCHAR.sizeof;", "-\t\tint newPtr = COM.GlobalAlloc(COM.GMEM_FIXED | COM.GMEM_ZEROINIT, DROPFILES.sizeof + byteCount);", "-\t\tCOM.MoveMemory(newPtr, dropfiles, DROPFILES.sizeof);", "-\t\tCOM.MoveMemory(newPtr + DROPFILES.sizeof, buffer, byteCount);", "-\t\t", "+\ttransferData.result = COM.E_FAIL;", "+\tif (object == null || !(object instanceof String[])) return;", "+\tif (!isSupportedType(transferData)) {", "+\t\t// did not match the TYMED", "-\t\ttransferData.stgmedium.tymed = COM.TYMED_HGLOBAL;", "-\t\ttransferData.stgmedium.unionField = newPtr;", "-\t\ttransferData.stgmedium.pUnkForRelease = 0;", "-\t\ttransferData.result = COM.S_OK;", "+\t\ttransferData.result = COM.DV_E_TYMED;", "-\t", "-\t// did not match the TYMED", "+", "+\tString[] fileNames = (String[]) object;", "+\tStringBuffer allFiles = new StringBuffer();", "+\tfor (int i = 0; i < fileNames.length; i++) {", "+\t\tallFiles.append(fileNames[i]); ", "+\t\tallFiles.append(CF_HDROP_SEPARATOR); // each name is null terminated", "+\t}", "+\tTCHAR buffer = new TCHAR(0, allFiles.toString(), true); // there is an extra null terminator at the very end", "+\tDROPFILES dropfiles = new DROPFILES();", "+\tdropfiles.pFiles = DROPFILES.sizeof;", "+\tdropfiles.pt_x = dropfiles.pt_y = 0;", "+\tdropfiles.fNC = 0;", "+\tdropfiles.fWide = COM.IsUnicode ? 1 : 0;", "+\t// Allocate the memory because the caller (DropTarget) has not handed it in", "+\t// The caller of this method must release the data when it is done with it.", "+\tint byteCount = buffer.length() * TCHAR.sizeof;", "+\tint newPtr = COM.GlobalAlloc(COM.GMEM_FIXED | COM.GMEM_ZEROINIT, DROPFILES.sizeof + byteCount);", "+\tCOM.MoveMemory(newPtr, dropfiles, DROPFILES.sizeof);", "+\tCOM.MoveMemory(newPtr + DROPFILES.sizeof, buffer, byteCount);", "-\ttransferData.result = COM.DV_E_TYMED;", "+\ttransferData.stgmedium.tymed = COM.TYMED_HGLOBAL;", "+\ttransferData.stgmedium.unionField = newPtr;", "+\ttransferData.stgmedium.pUnkForRelease = 0;", "+\ttransferData.result = COM.S_OK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e89de1536a462ef20369146004fffc1b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "0965c047c4647355d2d59defeda7977f1c34f584", "commitAfterChange": "cc500238418d38b85dc837cf8469541ca5f69f28", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public void javaToNative(Object object, TransferData transferData)", "signatureAfterChange": "\r public void javaToNative(Object object, TransferData transferData)", "diff": ["-\t\t\r", "-\t// build a byte array from data\r", "-\tString[] fileNames = (String[]) object;\r", "-\tint fileNameSize = 0;\r", "-\tbyte[][] files = new byte[fileNames.length][];\r", "-\tfor (int i = 0; i < fileNames.length; i++) {\r", "-\t\tfiles[i] = (fileNames[i]+'\\0').getBytes(); // each name is null terminated\r", "-\t\tfileNameSize += files[i].length;\r", "-\t}\r", "-\tbyte[] buffer = new byte[DROPFILES.sizeof + fileNameSize + 1]; // there is an extra null terminator at the very end\r", "-\tDROPFILES dropfiles = new DROPFILES();\r", "-\tdropfiles.pFiles = DROPFILES.sizeof;\r", "-\tdropfiles.pt_x = dropfiles.pt_y = 0;\r", "-\tdropfiles.fNC = 0;\r", "-\tdropfiles.fWide = 0;\t\r", "-\tCOM.MoveMemory(buffer, dropfiles, DROPFILES.sizeof);\r", "-\tint offset = DROPFILES.sizeof;\r", "-\tfor (int i = 0; i < fileNames.length; i++) {\r", "-\t\tSystem.arraycopy(files[i], 0, buffer, offset, files[i].length);\r", "-\t\toffset += files[i].length;\r", "-\t}\r", "+\tif (isSupportedType(transferData)) {\r", "-\t// pass byte array on to super to convert to native\r", "-\tsuper.javaToNative(buffer, transferData);\r", "+\t\tString[] fileNames = (String[]) object;\r", "+\t\tStringBuffer allFiles = new StringBuffer();\r", "+\t\tfor (int i = 0; i < fileNames.length; i++) {\r", "+\t\t\tallFiles.append(fileNames[i]); \r", "+\t\t\tallFiles.append('\\0'); // each name is null terminated\r", "+\t\t}\r", "+\t\tTCHAR buffer = new TCHAR(0, allFiles.toString(), true); // there is an extra null terminator at the very end\r", "+\t\t\r", "+\t\tDROPFILES dropfiles = new DROPFILES();\r", "+\t\tdropfiles.pFiles = DROPFILES.sizeof;\r", "+\t\tdropfiles.pt_x = dropfiles.pt_y = 0;\r", "+\t\tdropfiles.fNC = 0;\r", "+\t\tdropfiles.fWide = COM.IsUnicode ? 1 : 0;\r", "+\t\t\r", "+\t\t// Allocate the memory because the caller (DropTarget) has not handed it in\r", "+\t\t// The caller of this method must release the data when it is done with it.\r", "+\t\tint byteCount = buffer.length() * TCHAR.sizeof;\r", "+\t\tint newPtr = COM.GlobalAlloc(COM.GMEM_FIXED | COM.GMEM_ZEROINIT, DROPFILES.sizeof + byteCount);\r", "+\t\tCOM.MoveMemory(newPtr, dropfiles, DROPFILES.sizeof);\r", "+\t\tCOM.MoveMemory(newPtr + DROPFILES.sizeof, buffer, byteCount);\r", "+\t\t\r", "+\t\ttransferData.stgmedium = new STGMEDIUM();\r", "+\t\ttransferData.stgmedium.tymed = COM.TYMED_HGLOBAL;\r", "+\t\ttransferData.stgmedium.unionField = newPtr;\r", "+\t\ttransferData.stgmedium.pUnkForRelease = 0;\r", "+\t\ttransferData.result = COM.S_OK;\r", "+\t\treturn;\r", "+\t}\r", "+\t\r", "+\t// did not match the TYMED\r", "+\ttransferData.stgmedium = new STGMEDIUM();\r", "+\ttransferData.result = COM.DV_E_TYMED;\r"]}], "num": 61851}
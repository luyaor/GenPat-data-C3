{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f2b7ff3b4593274928cc502bdfed8fed", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da43c044d717fa84f45a4f448c61da1f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/performance/Test_org_eclipse_swt_graphics_GC.java", "commitBeforeChange": "0d6738f372469d9527fdb6984c0f956cbb0c021a", "commitAfterChange": "69155e7bef60580890dcbd61eeae4b1c572aec32", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "  public void test_setXORModeZ()", "signatureAfterChange": "  public void test_setXORModeZ()", "diff": ["-\tgc.setXORMode(true);", "-\tassertTrue(gc.getXORMode());", "-\tgc.setXORMode(false);", "-\tassertFalse(gc.getXORMode());", "+\t// precompute the values", "+\tfinal boolean[] values = new boolean[COUNT];", "+\tfor (int i = 0; i < COUNT; i++) {", "+\t\tvalues[i] = (i % 2 == 0);", "+\t}", "+\t", "+\tPerformanceMeter meter = createMeter();", "+\tmeter.start();", "+\tfor (int i = 0; i < COUNT; i++) {", "+\t\tgc.setXORMode(values[i]);", "+\t}", "+\tmeter.stop();", "+\t", "+\tdisposeMeter(meter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a2019c5f27fc6ecebd57847b2400261", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/performance/Test_org_eclipse_swt_graphics_GC.java", "commitBeforeChange": "0d6738f372469d9527fdb6984c0f956cbb0c021a", "commitAfterChange": "69155e7bef60580890dcbd61eeae4b1c572aec32", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "  public void test_setLineWidthI()", "signatureAfterChange": "  public void test_setLineWidthI()", "diff": ["-\tgc.setLineWidth(10);", "-\tassertTrue(gc.getLineWidth() == 10);", "-\tgc.setLineWidth(0);", "-\tassertTrue(gc.getLineWidth() == 0);", "+\t// precompute the widths", "+\tfinal int[] widths = new int[COUNT];", "+\tfor (int i = 0; i < COUNT; i++) {", "+\t\twidths[i] = i % 10 + 1;", "+\t}", "+\t", "+\tPerformanceMeter meter = createMeter();", "+\tmeter.start();", "+\tfor (int i = 0; i < COUNT; i++) {", "+\t\tgc.setLineWidth(widths[i]);", "+\t}", "+\tmeter.stop();", "+\t", "+\tdisposeMeter(meter);"]}], "num": 8044}
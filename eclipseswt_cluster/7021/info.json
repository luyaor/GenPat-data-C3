{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad1e3d3c3cb118712736fe4143ddd731", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a625686441e2fac5b96b184dbc996704", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 289, "methodNumberAfterChange": 290, "signatureBeforeChange": " \tint get_states(int pStates)", "signatureAfterChange": " \tint get_states(int pStates)", "diff": ["-\t\tCOM.MoveMemory(pStates, new int [] { event.detail }, 4);", "+\t\tint states = event.detail;", "+\t\tint ia2States = 0;", "+\t\tif ((states & ACC.STATE_ACTIVE) != 0) ia2States |= COM.IA2_STATE_ACTIVE;", "+\t\tif ((states & ACC.STATE_SINGLELINE) != 0) ia2States |= COM.IA2_STATE_SINGLE_LINE;", "+\t\tif ((states & ACC.STATE_MULTILINE) != 0) ia2States |= COM.IA2_STATE_MULTI_LINE;", "+\t\tif ((states & ACC.STATE_REQUIRED) != 0) ia2States |= COM.IA2_STATE_REQUIRED;", "+\t\tif ((states & ACC.STATE_INVALID_ENTRY) != 0) ia2States |= COM.IA2_STATE_INVALID_ENTRY;", "+\t\tif ((states & ACC.STATE_SUPPORTS_AUTOCOMPLETION) != 0) ia2States |= COM.IA2_STATE_SUPPORTS_AUTOCOMPLETION;", "+\t\t", "+\t\t/* If the role is text, then set IA2_STATE_EDITABLE.", "+\t\t * Note that IA2_STATE_EDITABLE is not the opposite of STATE_READONLY.", "+\t\t * Instead, it means: \"has a caret, supports IAccessibleText, and is a text editing environment\".", "+\t\t */", "+\t\tAccessibleControlEvent event2 = new AccessibleControlEvent(this);", "+\t\tevent2.childID = ACC.CHILDID_SELF;", "+\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\tlistener.getRole(event2);", "+\t\t}", "+\t\tif (event2.detail == ACC.ROLE_TEXT) {", "+\t\t\tia2States |= COM.IA2_STATE_EDITABLE;", "+\t\t}", "+\t\tif (DEBUG) printIA2States(\"IAccessible2::get_states returning \", ia2States);", "+\t\tCOM.MoveMemory(pStates, new int [] { ia2States }, 4);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f27122602db2b0921f6521e8a42fd253", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 299, "methodNumberAfterChange": 300, "signatureBeforeChange": " \tint get_attributes(int pbstrAttributes)", "signatureAfterChange": " \tint get_attributes(int pbstrAttributes)", "diff": ["-\t\t// TODO: Create an attributes string from the event data", "-\t\tif (attributes.length() == 0) return COM.S_FALSE; // TODO: is S_FALSE ok here?", "+\t\tattributes += \"margin-left:\" + event.leftMargin + \";\";", "+\t\tattributes += \"margin-top:\" + event.topMargin + \";\";", "+\t\tattributes += \"margin-right:\" + event.rightMargin + \";\";", "+\t\tattributes += \"margin-bottom:\" + event.bottomMargin + \";\";", "+\t\tif (event.tabStops != null) {", "+\t\t\tfor (int i = 0; i < event.tabStops.length; i++) {", "+\t\t\t\tattributes += \"tab-stop:position=\" + event.tabStops[i] + \";\";", "+\t\t\t}", "+\t\t}", "+\t\tif (event.justify) attributes += \"text-align:justify;\";", "+\t\tattributes += \"text-align:\" + (event.alignment == SWT.LEFT ? \"left\" : event.alignment == SWT.RIGHT ? \"right\" : \"center\") + \";\";", "+\t\tattributes += \"text-indent:\" + event.indent + \";\";", "+\t\tif (event.attributes != null) attributes += event.attributes;", "+", "+\t\t/* If the role is text, then specify the text model for JAWS. */", "+\t\t// TODO: Should StyledText set event.attributes = \"text-model:a1;\"; ?", "+\t\tAccessibleControlEvent event2 = new AccessibleControlEvent(this);", "+\t\tevent2.childID = ACC.CHILDID_SELF;", "+\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\tlistener.getRole(event2);", "+\t\t}", "+\t\tif (event2.detail == ACC.ROLE_TEXT) {", "+\t\t\tattributes += \"text-model:a1;\";", "+\t\t}", "+\t\tif (attributes.length() == 0) return COM.S_FALSE;", "-\t\t// TODO: @retval S_FALSE returned if there is nothing to return, [out] value is NULL"]}], "num": 7021}
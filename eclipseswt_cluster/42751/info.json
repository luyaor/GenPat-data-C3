{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f851bf37be9a7d051bd6b083ed141a5b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94134bc106b5772438e9adf2e04dd4be", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "6fe853b29d6dcedf69f8209e4b19fa3cf0a85a8b", "commitAfterChange": "cc7a79cec8920b1b6175a6c2124e7f63a3823262", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 90, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\tint code = hdr.code;", "-\tswitch (code) {", "+\tswitch (hdr.code) {", "+\t\tcase OS.TVN_GETDISPINFOA:", "+\t\tcase OS.TVN_GETDISPINFOW: {", "+\t\t\tNMTVDISPINFO lptvdi = new NMTVDISPINFO ();", "+\t\t\tOS.MoveMemory (lptvdi, lParam, NMTVDISPINFO.sizeof);", "+\t\t\t/*", "+\t\t\t* Feature in Windows.  When a new tree item is inserted", "+\t\t\t* using TVM_INSERTITEM, a TVN_GETDISPINFO is sent before", "+\t\t\t* TVM_INSERTITEM returns and before the item is added to", "+\t\t\t* the items array.  The fix is to check for null.", "+\t\t\t* ", "+\t\t\t* NOTE: This only happens on XP with the version 6.00 of", "+\t\t\t* COMCTL32.DLL,", "+\t\t\t*/", "+\t\t\tif (items == null) break;", "+\t\t\tTreeItem item = items [lptvdi.lParam];", "+\t\t\tif (item == null) break;", "+\t\t\tif ((lptvdi.mask & OS.TVIF_TEXT) != 0) {", "+\t\t\t\tString string = item.text;", "+\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "+\t\t\t\tint byteCount = Math.min (buffer.length (), lptvdi.cchTextMax - 1) * TCHAR.sizeof;", "+\t\t\t\tOS.MoveMemory (lptvdi.pszText, buffer, byteCount);", "+\t\t\t\tOS.MoveMemory (lptvdi.pszText + byteCount, new byte [TCHAR.sizeof], TCHAR.sizeof);", "+\t\t\t\tlptvdi.cchTextMax = Math.min (lptvdi.cchTextMax, string.length () + 1);", "+\t\t\t}", "+\t\t\tif ((lptvdi.mask & (OS.TVIF_IMAGE | OS.TVIF_SELECTEDIMAGE)) != 0) {", "+\t\t\t\tImage image = item.image;", "+\t\t\t\tlptvdi.iImage = OS.I_IMAGENONE;", "+\t\t\t\tif (image != null) {", "+\t\t\t\t\tlptvdi.iImage = lptvdi.iSelectedImage = imageIndex (image);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.MoveMemory (lParam, lptvdi, NMTVDISPINFO.sizeof);", "+\t\t\tbreak;", "+\t\t}", "-\t\t\t\tcase OS.CDDS_PREPAINT: return new LRESULT (OS.CDRF_NOTIFYITEMDRAW);", "-\t\t\t\tcase OS.CDDS_ITEMPREPAINT:", "+\t\t\t\tcase OS.CDDS_PREPAINT: {", "+\t\t\t\t\treturn new LRESULT (OS.CDRF_NOTIFYITEMDRAW | OS.CDRF_NOTIFYPOSTPAINT);", "+\t\t\t\t}", "+\t\t\t\tcase OS.CDDS_POSTPAINT: {", "+\t\t\t\t\tif (linesVisible) {", "+\t\t\t\t\t\tint hDC = nmcd.hdc;", "+\t\t\t\t\t\tif (hwndHeader != 0) {", "+\t\t\t\t\t\t\tint x = 0;", "+\t\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "+\t\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "+\t\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, i, hdItem);", "+\t\t\t\t\t\t\t\tOS.SetRect (rect, x, nmcd.top, x + hdItem.cxy, nmcd.bottom);", "+\t\t\t\t\t\t\t\tOS.DrawEdge (hDC, rect, OS.BDR_SUNKENINNER, OS.BF_RIGHT);", "+\t\t\t\t\t\t\t\tx += hdItem.cxy;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, 0);", "+\t\t\t\t\t\trect.left = hItem;", "+\t\t\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 0, rect) != 0) {", "+\t\t\t\t\t\t\tint height = rect.bottom - rect.top;", "+\t\t\t\t\t\t\twhile (rect.bottom < nmcd.bottom) {", "+\t\t\t\t\t\t\t\tint top = rect.top + height;", "+\t\t\t\t\t\t\t\tOS.SetRect (rect, rect.left, top, rect.right, top + height);", "+\t\t\t\t\t\t\t\tOS.DrawEdge (hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\treturn new LRESULT (OS.CDRF_DODEFAULT);", "+\t\t\t\t}", "+\t\t\t\tcase OS.CDDS_ITEMPREPAINT: {", "+\t\t\t\t\tif (nmcd.left >= nmcd.right || nmcd.top >= nmcd.bottom) {", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tint hDC = nmcd.hdc;", "+\t\t\t\t\tOS.SaveDC (hDC);", "+\t\t\t\t\tif (linesVisible) {", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\tOS.DrawEdge (hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (hwndHeader != 0) {", "+\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\tif (count != 0) {", "+\t\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "+\t\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "+\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, 0, hdItem);", "+\t\t\t\t\t\t\tint hRgn = OS.CreateRectRgn (nmcd.left, nmcd.top, nmcd.left + hdItem.cxy, nmcd.bottom);", "+\t\t\t\t\t\t\tOS.SelectClipRgn (hDC, hRgn);", "+\t\t\t\t\t\t\tOS.DeleteObject (hRgn);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (item.font == -1 && item.foreground == -1 && item.background == -1) {", "+\t\t\t\t\t\tif (item.cellForeground == null && item.cellBackground == null && item.cellFont == null) {", "+\t\t\t\t\t\t\treturn new LRESULT (OS.CDRF_DODEFAULT | OS.CDRF_NOTIFYPOSTPAINT);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\tint hFont = item.font, clrText = item.foreground, clrTextBk = item.background;", "-\t\t\t\t\tif (hFont == -1 && clrText == -1 && clrTextBk == -1) break;", "-\t\t\t\t\tif (hFont != -1) OS.SelectObject (nmcd.hdc, hFont);", "+\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [0] : item.font;", "+\t\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "-\t\t\t\t\t\tnmcd.clrText = clrText == -1 ? getForegroundPixel () : clrText;", "-\t\t\t\t\t\tnmcd.clrTextBk = clrTextBk == -1 ? getBackgroundPixel () : clrTextBk;", "+\t\t\t\t\t\t\tint clrText = item.cellForeground != null ? item.cellForeground [0] : item.foreground;", "+\t\t\t\t\t\t\tnmcd.clrText = clrText == -1 ? getForegroundPixel () : clrText;", "+\t\t\t\t\t\t\tint clrTextBk = item.cellBackground != null ? item.cellBackground [0] : item.background;", "+\t\t\t\t\t\t\tnmcd.clrTextBk = clrTextBk == -1 ? getBackgroundPixel () : clrTextBk;", "-\t\t\t\t\treturn new LRESULT (OS.CDRF_NEWFONT);", "+\t\t\t\t\treturn new LRESULT (OS.CDRF_NEWFONT | OS.CDRF_NOTIFYPOSTPAINT);", "+\t\t\t\t}", "+\t\t\t\tcase OS.CDDS_ITEMPOSTPAINT: {", "+\t\t\t\t\tTreeItem item = items [nmcd.lItemlParam];", "+\t\t\t\t\tif (item == null) break;", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Feature in Windows.  Under certain circumstances, Windows", "+\t\t\t\t\t* sends CDDS_ITEMPOSTPAINT for an empty rectangle.  This is", "+\t\t\t\t\t* not a problem providing that graphics do not occur outside", "+\t\t\t\t\t* the rectangle.  The fix is to test for the rectangle and", "+\t\t\t\t\t* draw nothing.", "+\t\t\t\t\t* ", "+\t\t\t\t\t* NOTE:  This seems to happen when both I_IMAGECALLBACK", "+\t\t\t\t\t* and LPSTR_TEXTCALLBACK are used at the same time with", "+\t\t\t\t\t* TVM_SETITEM.", "+\t\t\t\t\t*/", "+\t\t\t\t\tif (nmcd.left >= nmcd.right || nmcd.top >= nmcd.bottom) {", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tint hDC = nmcd.hdc;", "+\t\t\t\t\tOS.RestoreDC (hDC, -1);", "+\t\t\t\t\tOS.SetBkMode (hDC, OS.TRANSPARENT);", "+\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "+\t\t\t\t\t\tOS.SetTextColor (hDC, getForegroundPixel ());", "+\t\t\t\t\t}", "+\t\t\t\t\tif (hwndHeader != 0) {", "+\t\t\t\t\t\tGCData data = new GCData();", "+\t\t\t\t\t\tdata.device = display;", "+\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "+\t\t\t\t\t\tint x = 0;", "+\t\t\t\t\t\tPoint size = null;", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "+\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "+\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, i, hdItem);", "+\t\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\t\tOS.SetRect (rect, x, nmcd.top, x + hdItem.cxy, nmcd.bottom - GRID_WIDTH);", "+\t\t\t\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "+\t\t\t\t\t\t\t\t\tint clrTextBk = item.cellBackground != null ? item.cellBackground [i] : item.background;", "+\t\t\t\t\t\t\t\t\tif (clrTextBk != -1) drawBackground (hDC, clrTextBk, rect);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tImage image = item.images != null ? item.images [i] : null;", "+\t\t\t\t\t\t\t\tif (image != null) {", "+\t\t\t\t\t\t\t\t\tRectangle bounds = image.getBounds ();", "+\t\t\t\t\t\t\t\t\tif (size == null) size = getImageSize ();", "+\t\t\t\t\t\t\t\t\tgc.drawImage (image, 0, 0, bounds.width, bounds.height, rect.left, rect.top, size.x, size.y);", "+\t\t\t\t\t\t\t\t\tOS.SetRect (rect, rect.left + size.x + INSET, rect.top, rect.right - INSET, rect.bottom);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tOS.SetRect (rect, rect.left + INSET, rect.top, rect.right - INSET, rect.bottom);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t* Bug in Windows.  When DrawText() is used with DT_VCENTER", "+\t\t\t\t\t\t\t\t* and DT_ENDELLIPSIS, the ellipsis can draw outside of the", "+\t\t\t\t\t\t\t\t* rectangle when the rectangle is empty.  The fix is avoid", "+\t\t\t\t\t\t\t\t* all text drawing for empty rectangles.", "+\t\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\t\tif (rect.left < rect.right) {", "+\t\t\t\t\t\t\t\t\tString string = item.strings != null ? item.strings [i] : \"\";\t\t", "+\t\t\t\t\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [i] : item.font;", "+\t\t\t\t\t\t\t\t\thFont = hFont != -1 ? OS.SelectObject (hDC, hFont) : -1;", "+\t\t\t\t\t\t\t\t\tint clrText = -1;", "+\t\t\t\t\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "+\t\t\t\t\t\t\t\t\t\tclrText = item.cellForeground != null ? item.cellForeground [i] : item.foreground;", "+\t\t\t\t\t\t\t\t\t\tclrText = clrText != -1? OS.SetTextColor (hDC, clrText) : -1;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tint flags = OS.DT_NOPREFIX | OS.DT_SINGLELINE | OS.DT_VCENTER | OS.DT_ENDELLIPSIS;", "+\t\t\t\t\t\t\t\t\tTreeColumn column = columns [i];", "+\t\t\t\t\t\t\t\t\tif ((column.style & SWT.LEFT) != 0) flags |= OS.DT_LEFT;", "+\t\t\t\t\t\t\t\t\tif ((column.style & SWT.CENTER) != 0) flags |= OS.DT_CENTER;", "+\t\t\t\t\t\t\t\t\tif ((column.style & SWT.RIGHT) != 0) flags |= OS.DT_RIGHT;", "+\t\t\t\t\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "+\t\t\t\t\t\t\t\t\tOS.DrawText (hDC, buffer, buffer.length (), rect, flags);", "+\t\t\t\t\t\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "+\t\t\t\t\t\t\t\t\tif (clrText != -1) OS.SetTextColor (hDC, clrText);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tx += hdItem.cxy;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tgc.dispose ();", "+\t\t\t\t\t}", "+\t\t\t\t\tif (linesVisible) {", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\trect.left = item.handle;", "+\t\t\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect) != 0) {", "+\t\t\t\t\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "+\t\t\t\t\t\t\tif (hItem == item.handle) {", "+\t\t\t\t\t\t\t\tOS.SetRect (rect, rect.right, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\t\t\t\t\t\ttvItem.mask = OS.TVIF_STATE;", "+\t\t\t\t\t\t\t\ttvItem.hItem = item.handle;", "+\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "+\t\t\t\t\t\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) != 0) {", "+\t\t\t\t\t\t\t\t\tOS.SetRect (rect, rect.right, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tOS.SetRect (rect, rect.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tOS.DrawEdge (hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM);", "+\t\t\t\t\t\t} ", "+\t\t\t\t\t}", "+\t\t\t\t\treturn new LRESULT (OS.CDRF_DODEFAULT);", "+\t\t\t\t}", "+\t\t\tupdateScrollBar ();", "+\t\tcase OS.TVN_ITEMEXPANDEDA:", "+\t\tcase OS.TVN_ITEMEXPANDEDW: {", "+\t\t\tupdateScrollBar ();", "+\t\t\tbreak;", "+\t\t}", "+\t\t\t\tif (items == null) break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f15d660f7e4d6b2e2c998f81b3795c05", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "8386c3c902c23747f1b08cd80a8da053d565b75b", "commitAfterChange": "9883c2890fbff9756b4f164322e89e3f367f01c6", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r \r LRESULT WM_KEYDOWN (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_KEYDOWN (int wParam, int lParam)", "diff": ["-\tif ((style & SWT.CHECK) != 0 && wParam == OS.VK_SPACE) {\r", "-\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);\r", "-\t\tif (hItem != 0) {\r", "-\t\t\tTVITEM tvItem = new TVITEM ();\r", "-\t\t\ttvItem.mask = OS.TVIF_HANDLE | OS.TVIF_STATE | OS.TVIF_PARAM;\r", "-\t\t\ttvItem.stateMask = OS.TVIS_STATEIMAGEMASK;\r", "-\t\t\ttvItem.hItem = hItem;\r", "-\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);\r", "-\t\t\tint state = tvItem.state >> 12;\r", "-\t\t\tif ((state & 0x1) != 0) {\r", "-\t\t\t\tstate++;\r", "-\t\t\t} else  {\r", "-\t\t\t\t--state;\r", "-\t\t\t}\t\t\r", "-\t\t\ttvItem.state = state << 12;\r", "-\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "-\t\t\tEvent event = new Event ();\r", "-\t\t\tevent.item = items [tvItem.lParam];\r", "-\t\t\tevent.detail = SWT.CHECK;\r", "-\t\t\tpostEvent (SWT.Selection, event);\r", "+\tswitch (wParam) {\r", "+\t\tcase OS.VK_SPACE: {\r", "+\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);\r", "+\t\t\tif (hItem != 0) {\r", "+\t\t\t\thAnchor = hItem;\r", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_ENSUREVISIBLE, 0, hItem);\r", "+\t\t\t\tTVITEM tvItem = new TVITEM ();\r", "+\t\t\t\ttvItem.mask = OS.TVIF_STATE | OS.TVIF_PARAM;\r", "+\t\t\t\ttvItem.hItem = hItem;\r", "+\t\t\t\tif ((style & SWT.CHECK) != 0) {\r", "+\t\t\t\t\ttvItem.stateMask = OS.TVIS_STATEIMAGEMASK;\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);\r", "+\t\t\t\t\tint state = tvItem.state >> 12;\r", "+\t\t\t\t\tif ((state & 0x1) != 0) {\r", "+\t\t\t\t\t\tstate++;\r", "+\t\t\t\t\t} else  {\r", "+\t\t\t\t\t\t--state;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\ttvItem.state = state << 12;\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "+\t\t\t\t}\r", "+\t\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;\r", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);\r", "+\t\t\t\tif ((style & SWT.MULTI) != 0 && OS.GetKeyState (OS.VK_CONTROL) < 0) {\r", "+\t\t\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) != 0) {\r", "+\t\t\t\t\t\ttvItem.state &= ~OS.TVIS_SELECTED;\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\ttvItem.state |= OS.TVIS_SELECTED;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\ttvItem.state |= OS.TVIS_SELECTED;\r", "+\t\t\t\t}\r", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "+\t\t\t\tTreeItem item = items [tvItem.lParam];\r", "+\t\t\t\tEvent event = new Event ();\r", "+\t\t\t\tevent.item = item;\r", "+\t\t\t\tpostEvent (SWT.Selection, event);\r", "+\t\t\t\tif ((style & SWT.CHECK) != 0) {\r", "+\t\t\t\t\tevent = new Event ();\r", "+\t\t\t\t\tevent.item = item;\r", "+\t\t\t\t\tevent.detail = SWT.CHECK;\r", "+\t\t\t\t\tpostEvent (SWT.Selection, event);\r", "+\t\t\t\t}\r", "+\t\t\t\treturn LRESULT.ZERO;\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\tcase OS.VK_UP:\r", "+\t\tcase OS.VK_DOWN:\r", "+\t\tcase OS.VK_PRIOR:\r", "+\t\tcase OS.VK_NEXT:\r", "+\t\tcase OS.VK_HOME:\r", "+\t\tcase OS.VK_END: {\r", "+\t\t\tif ((style & SWT.SINGLE) != 0) break;\r", "+\t\t\tif (OS.GetKeyState (OS.VK_SHIFT) < 0) {\r", "+\t\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);\r", "+\t\t\t\tif (hItem != 0) {\r", "+\t\t\t\t\tif (hAnchor == 0) hAnchor = hItem;\r", "+\t\t\t\t\tboolean selected = false;\r", "+\t\t\t\t\tignoreSelect = ignoreDeselect = true;\r", "+\t\t\t\t\tint code = callWindowProc (OS.WM_KEYDOWN, wParam, lParam);\r", "+\t\t\t\t\tignoreSelect = ignoreDeselect = false;\r", "+\t\t\t\t\tint hNewItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);\r", "+\t\t\t\t\tTVITEM tvItem = new TVITEM ();\r", "+\t\t\t\t\ttvItem.mask = OS.TVIF_STATE;\r", "+\t\t\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;\r", "+\t\t\t\t\tint hDeselectItem = hItem;\t\t\t\t\t\r", "+\t\t\t\t\tRECT rect1 = new RECT ();\r", "+\t\t\t\t\trect1.left = hAnchor;\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect1);\r", "+\t\t\t\t\tRECT rect2 = rect2 = new RECT ();\r", "+\t\t\t\t\trect2.left = hDeselectItem;\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect2);\r", "+\t\t\t\t\tint flags = rect1.top < rect2.top ? OS.TVGN_PREVIOUSVISIBLE : OS.TVGN_NEXTVISIBLE;\r", "+\t\t\t\t\twhile (hDeselectItem != hAnchor) {\r", "+\t\t\t\t\t\ttvItem.hItem = hDeselectItem;\r", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "+\t\t\t\t\t\thDeselectItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, flags, hDeselectItem);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tint hSelectItem = hAnchor;\r", "+\t\t\t\t\trect1.left = hNewItem;\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect1);\r", "+\t\t\t\t\trect2.left = hSelectItem;\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect2);\r", "+\t\t\t\t\ttvItem.state = OS.TVIS_SELECTED;\r", "+\t\t\t\t\tflags = rect1.top < rect2.top ? OS.TVGN_PREVIOUSVISIBLE : OS.TVGN_NEXTVISIBLE;\r", "+\t\t\t\t\twhile (hSelectItem != hNewItem) {\r", "+\t\t\t\t\t\ttvItem.hItem = hSelectItem;\r", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "+\t\t\t\t\t\thSelectItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, flags, hSelectItem);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\ttvItem.hItem = hNewItem;\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "+\t\t\t\t\ttvItem.mask = OS.TVIF_STATE | OS.TVIF_PARAM;\r", "+\t\t\t\t\ttvItem.hItem = hNewItem;\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);\r", "+\t\t\t\t\tEvent event = new Event ();\r", "+\t\t\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) != 0) {\r", "+\t\t\t\t\t\tevent.item = items [tvItem.lParam];\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tpostEvent (SWT.Selection, event);\r", "+\t\t\t\t\treturn new LRESULT (code);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tif (OS.GetKeyState (OS.VK_CONTROL) < 0) {\r", "+\t\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);\r", "+\t\t\t\tif (hItem != 0) {\r", "+\t\t\t\t\tTVITEM tvItem = new TVITEM ();\r", "+\t\t\t\t\ttvItem.mask = OS.TVIF_STATE;\r", "+\t\t\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;\r", "+\t\t\t\t\ttvItem.hItem = hItem;\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);\r", "+\t\t\t\t\tboolean oldSelected = (tvItem.state & OS.TVIS_SELECTED) != 0;\r", "+\t\t\t\t\tint hNewItem = 0;\r", "+\t\t\t\t\tswitch (wParam) {\r", "+\t\t\t\t\t\tcase OS.VK_UP:\r", "+\t\t\t\t\t\t\thNewItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_PREVIOUSVISIBLE, hItem);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase OS.VK_DOWN:\r", "+\t\t\t\t\t\t\thNewItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, hItem);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase OS.VK_HOME:\r", "+\t\t\t\t\t\t\thNewItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_ROOT, 0);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase OS.VK_PRIOR:\r", "+\t\t\t\t\t\t\thNewItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_FIRSTVISIBLE, 0);\r", "+\t\t\t\t\t\t\tif (hNewItem == hItem) {\r", "+\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.WM_VSCROLL, OS.SB_PAGEUP, 0);\r", "+\t\t\t\t\t\t\t\thNewItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_FIRSTVISIBLE, 0);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase OS.VK_NEXT:\t\t\t\r", "+\t\t\t\t\t\t\tRECT rect = new RECT (), clientRect = new RECT ();\r", "+\t\t\t\t\t\t\tOS.GetClientRect (handle, clientRect);\r", "+\t\t\t\t\t\t\thNewItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_FIRSTVISIBLE, 0);\r", "+\t\t\t\t\t\t\tdo {\r", "+\t\t\t\t\t\t\t\tint hVisible = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, hNewItem);\r", "+\t\t\t\t\t\t\t\tif (hVisible == 0) break;\r", "+\t\t\t\t\t\t\t\trect.left = hVisible;\r", "+\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect);\r", "+\t\t\t\t\t\t\t\tif (rect.bottom > clientRect.bottom) break;\r", "+\t\t\t\t\t\t\t\tif ((hNewItem = hVisible) == hItem) {\r", "+\t\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.WM_VSCROLL, OS.SB_PAGEDOWN, 0);\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t} while (hNewItem != 0);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase OS.VK_END:\r", "+\t\t\t\t\t\t\thNewItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, 0);\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif (hNewItem != 0) {\r", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_ENSUREVISIBLE, 0, hNewItem);\r", "+\t\t\t\t\t\ttvItem.hItem = hNewItem;\r", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);\r", "+\t\t\t\t\t\tboolean newSelected = (tvItem.state & OS.TVIS_SELECTED) != 0;\r", "+\t\t\t\t\t\tif (!newSelected && drawCount == 0) {\r", "+\t\t\t\t\t\t\tOS.UpdateWindow (handle);\r", "+\t\t\t\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\t\t\t\t\t/*\r", "+\t\t\t\t\t\t\t* This code is intentionally commented.\r", "+\t\t\t\t\t\t\t*/\r", "+//\t\t\t\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tignoreSelect = true;\r", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SELECTITEM, OS.TVGN_CARET, hNewItem);\r", "+\t\t\t\t\t\tignoreSelect = false;\r", "+\t\t\t\t\t\tif (oldSelected) {\r", "+\t\t\t\t\t\t\ttvItem.state = OS.TVIS_SELECTED;\r", "+\t\t\t\t\t\t\ttvItem.hItem = hItem;\r", "+\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tif (!newSelected) {\r", "+\t\t\t\t\t\t\ttvItem.state = 0;\r", "+\t\t\t\t\t\t\ttvItem.hItem = hNewItem;\r", "+\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tif (!newSelected && drawCount == 0) {\r", "+\t\t\t\t\t\t\tRECT rect1 = new RECT (), rect2 = new RECT ();\r", "+\t\t\t\t\t\t\trect1.left = hItem;  rect2.left = hNewItem;\r", "+\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect1);\r", "+\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect2);\r", "+\t\t\t\t\t\t\t/*\r", "+\t\t\t\t\t\t\t* This code is intentionally commented.\r", "+\t\t\t\t\t\t\t*/\r", "+//\t\t\t\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);\r", "+\t\t\t\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);\r", "+\t\t\t\t\t\t\tif (OS.IsWinCE) {\r", "+\t\t\t\t\t\t\t\tOS.InvalidateRect (handle, rect1, false);\r", "+\t\t\t\t\t\t\t\tOS.InvalidateRect (handle, rect2, false);\r", "+\t\t\t\t\t\t\t\tOS.UpdateWindow (handle);\r", "+\t\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\t\tint flags = OS.RDW_UPDATENOW | OS.RDW_INVALIDATE;\r", "+\t\t\t\t\t\t\t\tOS.RedrawWindow (handle, rect1, 0, flags);\r", "+\t\t\t\t\t\t\t\tOS.RedrawWindow (handle, rect2, 0, flags);\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\treturn LRESULT.ZERO;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tbreak;\r"]}], "num": 42751}
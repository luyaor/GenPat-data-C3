{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "674784c6d2f6cc8e73a8b08cd3e8e38b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffbd447e898920788b92bc469556fe02", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "cf445d392f7ccdee7756ab6bc52ea05295594c7b", "commitAfterChange": "d40de95713aa2ea21126d6e88c192e810affe18d", "methodNumberBeforeChange": 144, "methodNumberAfterChange": 144, "signatureBeforeChange": "  int OnStartURIOpen (int aURI, int retval)", "signatureAfterChange": "  int OnStartURIOpen (int aURI, int retval)", "diff": ["-\tif (locationListeners.length == 0) {", "-\t\tXPCOM.memmove (retval, new int[] {0}, 4); /* PRBool */", "-\t\treturn XPCOM.NS_OK;", "-\t}", "-\t\t * listeners should not be notified of internal transitions like \"javascipt:...\"", "+\t\t * listeners should not be notified of internal transitions like \"javascript:...\"", "-\t\t\tLocationEvent event = new LocationEvent (browser);", "-\t\t\tevent.display = browser.getDisplay();", "-\t\t\tevent.widget = browser;", "-\t\t\tevent.location = value;", "-\t\t\t/*", "-\t\t\t * If the URI indicates that the page is being rendered from memory", "-\t\t\t * (via setText()) then set it to about:blank to be consistent with IE.", "-\t\t\t */", "-\t\t\tif (event.location.equals (URI_FROMMEMORY)) event.location = ABOUT_BLANK;", "-\t\t\tevent.doit = doit;", "-\t\t\tfor (int i = 0; i < locationListeners.length; i++) {", "-\t\t\t\tlocationListeners[i].changing (event);", "+\t\t\tif (locationListeners.length > 0) {", "+\t\t\t\tLocationEvent event = new LocationEvent (browser);", "+\t\t\t\tevent.display = browser.getDisplay();", "+\t\t\t\tevent.widget = browser;", "+\t\t\t\tevent.location = value;", "+\t\t\t\t/*", "+\t\t\t\t * If the URI indicates that the page is being rendered from memory", "+\t\t\t\t * (via setText()) then set it to about:blank to be consistent with IE.", "+\t\t\t\t */", "+\t\t\t\tif (event.location.equals (URI_FROMMEMORY)) event.location = ABOUT_BLANK;", "+\t\t\t\tevent.doit = doit;", "+\t\t\t\tfor (int i = 0; i < locationListeners.length; i++) {", "+\t\t\t\t\tlocationListeners[i].changing (event);", "+\t\t\t\t}", "+\t\t\t\tdoit = event.doit && !browser.isDisposed();", "-\t\t\tdoit = event.doit && !browser.isDisposed();", "+", "+\t\t\tif (doit && jsEnabledChanged) {", "+\t\t\t\tjsEnabledChanged = false;", "+", "+\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\t\tint rc = webBrowser.QueryInterface (nsIWebBrowserSetup.NS_IWEBBROWSERSETUP_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\t\t\t\tnsIWebBrowserSetup setup = new nsIWebBrowserSetup (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\trc = setup.SetProperty (nsIWebBrowserSetup.SETUP_ALLOW_JAVASCRIPT, jsEnabled ? 1 : 0);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tsetup.Release ();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c67aa62bef0e52abe3563baf079f8a24", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "082681b66332177ea03672e4a3002a6e9aca5dfb", "commitAfterChange": "d29e369d5010d75bbca2f5d0e5a06752fb22a13d", "methodNumberBeforeChange": 198, "methodNumberAfterChange": 199, "signatureBeforeChange": "  int OnStartURIOpen (long aURI, long retval)", "signatureAfterChange": "  int OnStartURIOpen (long aURI, long retval)", "diff": ["-\tisViewingErrorPage = value.indexOf (\"netError.xhtml\") != -1; //$NON-NLS-1$", "-", "-\tboolean doit = true;", "-\tif (request == 0) {", "-\t\t/* ", "-\t\t * listeners should not be notified of internal transitions like \"javascript:...\"", "-\t\t * because this is an implementation side-effect, not a true navigate", "-\t\t */", "-\t\tif (!value.startsWith (PREFIX_JAVASCRIPT)) {", "-\t\t\tif (locationListeners.length > 0) {", "-\t\t\t\tLocationEvent event = new LocationEvent (browser);", "-\t\t\t\tevent.display = browser.getDisplay();", "-\t\t\t\tevent.widget = browser;", "-\t\t\t\tevent.location = value;", "-\t\t\t\t/*", "-\t\t\t\t * If the URI indicates that the page is being rendered from memory", "-\t\t\t\t * (via setText()) then set it to about:blank to be consistent with IE.", "-\t\t\t\t */", "-\t\t\t\tif (event.location.equals (URI_FILEROOT)) {", "-\t\t\t\t\tevent.location = ABOUT_BLANK;", "-\t\t\t\t} else {", "-\t\t\t\t\tlength = URI_FILEROOT.length ();", "-\t\t\t\t\tif (event.location.startsWith (URI_FILEROOT) && event.location.charAt (length) == '#') {", "-\t\t\t\t\t\tevent.location = ABOUT_BLANK + event.location.substring (length);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tevent.doit = doit;", "-\t\t\t\tfor (int i = 0; i < locationListeners.length; i++) {", "-\t\t\t\t\tlocationListeners[i].changing (event);", "-\t\t\t\t}", "-\t\t\t\tdoit = event.doit && !browser.isDisposed();", "-\t\t\t}", "-", "-\t\t\tif (doit) {", "-\t\t\t\tif (jsEnabled != jsEnabledOnNextPage) {", "-\t\t\t\t\tjsEnabled = jsEnabledOnNextPage;", "-\t\t\t\t\tlong /*int*/[] result = new long /*int*/[1];", "-\t\t\t\t\tint rc = webBrowser.QueryInterface (nsIWebBrowserSetup.NS_IWEBBROWSERSETUP_IID, result);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t", "-\t\t\t\t\tnsIWebBrowserSetup setup = new nsIWebBrowserSetup (result[0]);", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\trc = setup.SetProperty (nsIWebBrowserSetup.SETUP_ALLOW_JAVASCRIPT, jsEnabled ? 1 : 0);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tsetup.Release ();", "-\t\t\t\t}", "-\t\t\t\tif (!isViewingErrorPage) lastNavigateURL = value;", "-\t\t\t}", "-\t\t}", "-\t}", "+\tboolean doit = sendChangingEvent (value);"]}], "num": 42229}
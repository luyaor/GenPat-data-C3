{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1c4ab66175ae404993921fc8182adfa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f28867be0cbff2995f80c5720055c91e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 197, "methodNumberAfterChange": 47, "signatureBeforeChange": " void calculateTopIndex()", "signatureAfterChange": " void calculateTopIndex(int delta)", "diff": ["-void calculateTopIndex() {", "-\tint oldTopIndex = topIndex;", "-\tint verticalIncrement = getVerticalIncrement();", "-\tint clientAreaHeight = getClientArea().height;", "-\t", "-\tif (verticalIncrement == 0) {", "-\t\treturn;", "-\t}", "-\ttopIndex = Compatibility.ceil(verticalScrollOffset, verticalIncrement);", "-\t// Set top index to partially visible top line if no line is fully ", "-\t// visible but at least some of the widget client area is visible.", "-\t// Fixes bug 15088.", "-\tif (topIndex > 0) {", "-\t\tif (clientAreaHeight > 0) {", "-\t\t\tint bottomPixel = verticalScrollOffset + clientAreaHeight;", "-\t\t\tint fullLineTopPixel = topIndex * verticalIncrement;", "-\t\t\tint fullLineVisibleHeight = bottomPixel - fullLineTopPixel;", "-\t\t\t// set top index to partially visible line if no line fully fits in ", "-\t\t\t// client area or if space is available but not used (the latter should", "-\t\t\t// never happen because we use claimBottomFreeSpace)", "-\t\t\tif (fullLineVisibleHeight < verticalIncrement) {", "-\t\t\t\ttopIndex--;", "+void calculateTopIndex(int delta) {", "+\tint oldTopIndex = topIndex;\t", "+\tif (isFixedLineHeight()) {", "+\t\tint verticalIncrement = getVerticalIncrement();", "+\t\tif (verticalIncrement == 0) {", "+\t\t\treturn;", "+\t\t}", "+\t\ttopIndex = Compatibility.ceil(getVerticalScrollOffset(), verticalIncrement);", "+\t\t// Set top index to partially visible top line if no line is fully ", "+\t\t// visible but at least some of the widget client area is visible.", "+\t\t// Fixes bug 15088.", "+\t\tif (topIndex > 0) {", "+\t\t\tint clientAreaHeight = getClientArea().height;", "+\t\t\tif (clientAreaHeight > 0) {", "+\t\t\t\tint bottomPixel = getVerticalScrollOffset() + clientAreaHeight;", "+\t\t\t\tint fullLineTopPixel = topIndex * verticalIncrement;", "+\t\t\t\tint fullLineVisibleHeight = bottomPixel - fullLineTopPixel;", "+\t\t\t\t// set top index to partially visible line if no line fully fits in ", "+\t\t\t\t// client area or if space is available but not used (the latter should", "+\t\t\t\t// never happen because we use claimBottomFreeSpace)", "+\t\t\t\tif (fullLineVisibleHeight < verticalIncrement) {", "+\t\t\t\t\ttopIndex--;", "+\t\t\t\t}", "+\t\t\t} else if (topIndex >= content.getLineCount()) {", "+\t\t\t\ttopIndex = content.getLineCount() - 1;", "-\t\telse ", "-\t\tif (topIndex >= content.getLineCount()) {", "-\t\t\ttopIndex = content.getLineCount() - 1;", "+\t} else {", "+\t\tif (delta > 0) {", "+\t\t\tif (partialHeight > delta) {", "+\t\t\t\tpartialHeight -= delta;", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tdelta -= partialHeight;", "+\t\t\tpartialHeight = 0;", "+\t\t\t", "+\t\t\tint lineCount = content.getLineCount();", "+\t\t\twhile (delta > 0 && topIndex < lineCount -1) {", "+\t\t\t\tint lineHeight = renderer.getLineHeight(topIndex);", "+\t\t\t\ttopIndex++;", "+\t\t\t\tif (lineHeight > delta) {", "+\t\t\t\t\tpartialHeight = lineHeight - delta;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tdelta -= lineHeight;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (topIndex > 0) {", "+\t\t\t\tint height = renderer.getLineHeight(topIndex - 1) - partialHeight;", "+\t\t\t\tif (height > -delta) {", "+\t\t\t\t\tpartialHeight -= delta;", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t\tdelta += height;", "+\t\t\t\tpartialHeight = 0;", "+\t\t\t\ttopIndex--;", "+\t\t\t}", "+\t\t\twhile (-delta > 0 && topIndex > 0) {", "+\t\t\t\tint lineHeight = renderer.getLineHeight(topIndex - 1);", "+\t\t\t\tif (lineHeight > -delta) {", "+\t\t\t\t\tpartialHeight = -delta;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\ttopIndex--;", "+\t\t\t\tdelta += lineHeight;", "+\t\t\t}", "-\t\tlineCache.calculate(topIndex, getPartialBottomIndex() - topIndex + 1);", "-\t\tsetHorizontalScrollBar();", "+\t\trenderer.calculateClientArea();", "+\t\tsetScrollBars(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc15c8c843966ed2f102a6b164cd950e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "a45e2f0f4688ba8750d124e41802861dc3176c91", "commitAfterChange": "26e521309364bb658cf1c93d5815f7e3f172acfd", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " void calculateTopIndex()", "signatureAfterChange": " void calculateTopIndex()", "diff": ["-\tint oldTopIndex = topIndex;", "-\t", "-\tRectangle clientArea = getClientArea();", "-\ttopIndex = getLineIndex(clientArea.y);", "-\tint linePixel = getLinePixel(topIndex);", "-\tif (linePixel < 0) {", "-\t\tint lineCount = content.getLineCount();", "-\t\tif (topIndex < lineCount - 1) {", "-\t\t\tint bottom = getLinePixel(topIndex + 1);", "-\t\t\tbottom = lineCache.getLineHeight(topIndex + 1);", "-\t\t\tif (clientArea.height >= bottom) {", "-\t\t\t\ttopIndex++;", "+\tint oldTopIndex = topIndex;\t", "+\tif (isFixedLineHeight()) {", "+\t\tint verticalIncrement = getVerticalIncrement();", "+\t\tif (verticalIncrement == 0) {", "+\t\t\treturn;", "+\t\t}", "+\t\ttopIndex = Compatibility.ceil(verticalScrollOffset, verticalIncrement);", "+\t\t// Set top index to partially visible top line if no line is fully ", "+\t\t// visible but at least some of the widget client area is visible.", "+\t\t// Fixes bug 15088.", "+\t\tif (topIndex > 0) {", "+\t\t\tint clientAreaHeight = getClientArea().height;", "+\t\t\tif (clientAreaHeight > 0) {", "+\t\t\t\tint bottomPixel = verticalScrollOffset + clientAreaHeight;", "+\t\t\t\tint fullLineTopPixel = topIndex * verticalIncrement;", "+\t\t\t\tint fullLineVisibleHeight = bottomPixel - fullLineTopPixel;", "+\t\t\t\t// set top index to partially visible line if no line fully fits in ", "+\t\t\t\t// client area or if space is available but not used (the latter should", "+\t\t\t\t// never happen because we use claimBottomFreeSpace)", "+\t\t\t\tif (fullLineVisibleHeight < verticalIncrement) {", "+\t\t\t\t\ttopIndex--;", "+\t\t\t\t}", "+\t\t\t} else if (topIndex >= content.getLineCount()) {", "+\t\t\t\ttopIndex = content.getLineCount() - 1;", "-\t} ", "-", "-//\tint verticalIncrement = getVerticalIncrement();", "-//\tif (verticalIncrement == 0) {", "-//\t\treturn;", "-//\t}", "-//\ttopIndex = Compatibility.ceil(verticalScrollOffset, verticalIncrement);", "-//\t// Set top index to partially visible top line if no line is fully ", "-//\t// visible but at least some of the widget client area is visible.", "-//\t// Fixes bug 15088.", "-//\tif (topIndex > 0) {", "-//\t\tint clientAreaHeight = getClientArea().height;", "-//\t\tif (clientAreaHeight > 0) {", "-//\t\t\tint bottomPixel = verticalScrollOffset + clientAreaHeight;", "-//\t\t\tint fullLineTopPixel = topIndex * verticalIncrement;", "-//\t\t\tint fullLineVisibleHeight = bottomPixel - fullLineTopPixel;", "-//\t\t\t// set top index to partially visible line if no line fully fits in ", "-//\t\t\t// client area or if space is available but not used (the latter should", "-//\t\t\t// never happen because we use claimBottomFreeSpace)", "-//\t\t\tif (fullLineVisibleHeight < verticalIncrement) {", "-//\t\t\t\ttopIndex--;", "-//\t\t\t}", "-//\t\t} else if (topIndex >= content.getLineCount()) {", "-//\t\t\ttopIndex = content.getLineCount() - 1;", "-//\t\t}", "-//\t}", "-\t", "+\t} else {", "+\t\tRectangle clientArea = getClientArea();", "+\t\ttopIndex = getLineIndex(clientArea.y);", "+\t\tint linePixel = getLinePixel(topIndex);", "+\t\tif (linePixel < 0) {", "+\t\t\tint lineCount = content.getLineCount();", "+\t\t\tif (topIndex < lineCount - 1) {", "+\t\t\t\tint bottom = getLinePixel(topIndex + 1);", "+\t\t\t\tbottom = lineCache.getLineHeight(topIndex + 1);", "+\t\t\t\tif (clientArea.height >= bottom) {", "+\t\t\t\t\ttopIndex++;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} ", "+\t}\t", "-\t\tif (isFixedLineHeight()) {", "-\t\t\tsetHorizontalScrollBar();", "-\t\t} else {", "-\t\t\tsetScrollBars();", "-\t\t}", "+\t\tsetScrollBars(false);"]}], "num": 36586}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "56802b24d31398177d1ad9cd17e30505", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3625de9eccaa0fe47ae1ff6dc7a6ab8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "4a5479b6edb8a4ade9bed381a71082ad4e65f8a7", "commitAfterChange": "498b1e35a8c935d42934ff8e43e776e87271b91d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  void destroyWidget ()", "signatureAfterChange": "  void destroyWidget ()", "diff": ["+\t* ", "+\t* Bug in the Macintosh.  Disposing a window from kEventWindowDeactivated", "+\t* causes a segment fault. The fix is to defer disposing the window until", "+\t* the event loop becomes idle.", "-//\tOS.HideWindow (shellHandle);", "+\tDisplay display = this.display;", "+\tif (deactivate) OS.HideWindow (shellHandle);", "-\t\tOS.DisposeWindow (theWindow);", "+\t\tif (deactivate) {", "+\t\t\tdisplay.addDisposeWindow (theWindow);", "+\t\t} else {", "+\t\t\tOS.DisposeWindow (theWindow);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7bc7533d5f749f2edc17f876b885fd2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "289cc146de43e0798be6d40aecc0f2ff0ace4840", "commitAfterChange": "d32cdc97539fa1be94823928c736d47b4c9d4696", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void click ()", "signatureAfterChange": "  void click ()", "diff": ["-\t* Note: BM_CLICK sends WM_LBUTTONDOWN and WM_LBUTTONUP.", "+\t* Feature in Windows.  BM_CLICK sends a fake WM_LBUTTONDOWN and", "+\t* WM_LBUTTONUP in order to click the button.  This causes the", "+\t* application to get unexpected mouse events.  The fix is to", "+\t* ignore mouse events when they are caused by BM_CLICK.", "+\tignoreMouse = true;", "+\tignoreMouse = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16b89851a916751375604c1932ea5cdf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TrayItem.java", "commitBeforeChange": "b277fc0b49f5434d41c503973e95ada357ced688", "commitAfterChange": "d8b3dd12bf7902e6642950fa1f0432a205fe2ad4", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["-\t\tcase OS.WM_RBUTTONDOWN: {", "+\t\tcase OS.WM_RBUTTONUP: {", "+\t\t\t/*", "+\t\t\t* Feature in Windows.  When the user clicks outside of the", "+\t\t\t* menu to cancel it, the menu is not hidden until an event", "+\t\t\t* is processed.  If another application is the foreground", "+\t\t\t* window, then the menu is not hidden.  The fix is to force", "+\t\t\t* the tray icon message window to the foreground.", "+\t\t\t*/", "+\t\t\tOS.SetForegroundWindow (hwnd);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9451be460dbdeab945a396c3db27cf6e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "20d86f3052762681e3e703133fd7d2c24da0c599", "commitAfterChange": "1397638244b760d9232c5162f13498bc6dfd6ac4", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 65, "signatureBeforeChange": " public void setRegion (Region region)", "signatureAfterChange": " public void setRegion (Region region)", "diff": ["-\tOS.ReshapeCustomWindow (shellHandle);", "+\t/*", "+\t* Bug in the Macintosh.  Calling ReshapeCustomWindow() from a", "+\t* kEventWindowDrawContent handler originating from ShowWindow()", "+\t* will deadlock.  The fix is to detected this case and only call", "+\t* ReshapeCustomWindow() after the default handler is done.", "+\t*/", "+\tif (drawing) {", "+\t\treshape = true;", "+\t} else {", "+\t\tOS.ReshapeCustomWindow (shellHandle);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "959a0da3558721c27437dece60ba372a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "e454a2c21c9ed733c89f3fa0e67403c0c5f9a0a4", "commitAfterChange": "49869f2610478aa88f0345ffa91c833e4950a16c", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "  void setZOrder (Control sibling, boolean above)", "signatureAfterChange": "  void setZOrder (Control sibling, boolean above)", "diff": ["-\t setZOrder (sibling, above, false, false);", "+\t/*", "+\t* Bug in GTK+.  Changing the toplevel window Z-order causes", "+\t* X to send a resize event.  Before the shell is mapped, these", "+\t* resize events always have a size of 200x200, causing extra", "+\t* layout work to occur.  The fix is to modify the Z-order only", "+\t* if the shell has already been mapped at least once.", "+\t*/", "+\tif (mapped) setZOrder (sibling, above, false, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "548a4119f875c410efaa1413da2440ad", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "29dc9217728c0e94326a81442db0117e0e0dc515", "commitAfterChange": "55792ee4835329a21ef651075bccfa0554646fb4", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "  void setWindowVisible (boolean visible)", "signatureAfterChange": "  void setWindowVisible (boolean visible)", "diff": ["-\t\tOS.HideWindow (shellHandle);", "+\t\t/*", "+\t\t* Bug in the Macintosh.  Under certain circumstances, yet to", "+\t\t* be determined, calling HideWindow() and then DisposeWindow()", "+\t\t* causes a segment fault when an application is exiting.  This", "+\t\t* seems to happen to large applications.  The fix is to avoid", "+\t\t* calling HideWindow() when a shell is about to be disposed.", "+\t\t*/", "+\t\tif (!disposed) OS.HideWindow (shellHandle);"]}], "num": 27912}
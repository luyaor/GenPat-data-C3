{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1ba467ba1804c337a214d2c09780237", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d724209a60e59212b1a089559100ce9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 375, "methodNumberAfterChange": 376, "signatureBeforeChange": " \tint scrollSubstringTo(int startIndex, int endIndex, int scrollType)", "signatureAfterChange": " \tint scrollSubstringTo(int startIndex, int endIndex, int scrollType)", "diff": ["-\t\tevent.type = scrollType;", "+\t\tswitch (scrollType) {", "+\t\t\tcase COM.IA2_SCROLL_TYPE_TOP_LEFT: event.type = ACC.SCROLL_TYPE_TOP_LEFT; break;", "+\t\t\tcase COM.IA2_SCROLL_TYPE_BOTTOM_RIGHT: event.type = ACC.SCROLL_TYPE_BOTTOM_RIGHT; break;", "+\t\t\tcase COM.IA2_SCROLL_TYPE_TOP_EDGE: event.type = ACC.SCROLL_TYPE_TOP_EDGE; break;", "+\t\t\tcase COM.IA2_SCROLL_TYPE_BOTTOM_EDGE: event.type = ACC.SCROLL_TYPE_BOTTOM_EDGE; break;", "+\t\t\tcase COM.IA2_SCROLL_TYPE_LEFT_EDGE: event.type = ACC.SCROLL_TYPE_LEFT_EDGE; break;", "+\t\t\tcase COM.IA2_SCROLL_TYPE_RIGHT_EDGE: event.type = ACC.SCROLL_TYPE_RIGHT_EDGE; break;", "+\t\t\tcase COM.IA2_SCROLL_TYPE_ANYWHERE: event.type = ACC.SCROLL_TYPE_ANYWHERE; break;", "+\t\t}", "+\t\tif (event.result != ACC.OK) return COM.E_INVALIDARG;", "-\t\t// TODO: @retval E_INVALIDARG if bad [in] passed"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5589a248cf7899ca6d2bf9f300b262ee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "22de0ea22c2d2d4f45ea2d42713f45532f3dae10", "commitAfterChange": "c2238720db4daf5a12590fa4578a04a7b36dabc4", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "  boolean setKeyState (Event event, int type)", "signatureAfterChange": "  boolean setKeyState (Event event, int type, int wParam, int lParam)", "diff": ["-boolean setKeyState (Event event, int type) {", "-\tif (display.lastAscii != 0 || display.lastNull) {", "-\t\tevent.character = mbcsToWcs ((char) display.lastAscii);", "+boolean setKeyState (Event event, int type, int wParam, int lParam) {", "+\t", "+\t/*", "+\t* Feature in Windows.  When the user presses Ctrl+Backspace", "+\t* or Ctrl+Enter, Windows sends a WM_CHAR with Delete (0x7F)", "+\t* and '\\n' instead of '\\b' and '\\r'.  This is the correct", "+\t* platform behavior but is not portable.  The fix is detect", "+\t* these cases and convert the character.", "+\t*/", "+\tswitch (display.lastAscii) {", "+\t\tcase SWT.DEL:", "+\t\t\tif (display.lastKey == SWT.BS) display.lastAscii = SWT.BS;", "+\t\t\tbreak;", "+\t\tcase SWT.LF:", "+\t\t\tif (display.lastKey == SWT.CR) display.lastAscii = SWT.CR;", "+\t\t\tbreak;", "+\t}", "+\t", "+\t/*", "+\t* Feature in Windows.  When the user presses either the Enter", "+\t* key or the numeric keypad Enter key, Windows sends a WM_KEYDOWN", "+\t* with wParam=VK_RETURN in both cases.  In order to distinguish", "+\t* between the keys, the extended key bit is tested. If the bit", "+\t* is set, assume that the numeric keypad Enter was pressed. ", "+\t*/", "+\tif (display.lastKey == SWT.CR && display.lastAscii == SWT.CR) {", "+\t\tif ((lParam & 0x1000000) != 0) display.lastKey = SWT.KEYPAD_CR;", "+\t}", "+\t", "+\tif (display.lastVirtual) {", "+\t\t/*", "+\t\t* Feature in Windows.  The virtual key VK_DELETE is not", "+\t\t* treated as both a virtual key and an ASCII key by Windows.", "+\t\t* Therefore, we will not receive a WM_CHAR for this key.", "+\t\t* The fix is to treat VK_DELETE as a special case and map", "+\t\t* the ASCII value explictly (Delete is 0x7F).", "+\t\t*/", "+\t\tif (display.lastKey == OS.VK_DELETE) display.lastAscii = 0x7F;", "+\t\t", "+\t\tevent.keyCode = Display.translateKey (display.lastKey);", "+\t} else {", "-\tif (display.lastVirtual) {", "-\t\tevent.keyCode = Display.translateKey (display.lastKey);", "+\tif (display.lastAscii != 0 || display.lastNull) {", "+\t\tevent.character = mbcsToWcs ((char) display.lastAscii);"]}], "num": 18283}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "631af2155f04bb72a54cd7d23025d7d8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeee5678071b8c0cb108134e6b957b0c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "14bb166a3d9b9c0f4b3cc0f7c70730e09595d89a", "commitAfterChange": "65934e9078512ef399dc1e432592b04f62521287", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void _addListener (int eventType, Listener listener)", "signatureAfterChange": "  void _addListener (int eventType, Listener listener)", "diff": ["+\t\t\tnewBits |= OS.TVS_NOHSCROLL;", "-\t\t\tif ((style & SWT.FULL_SELECTION) != 0) newBits &= ~OS.TVS_FULLROWSELECT;", "-\t\t\tnewBits |= OS.TVS_NOHSCROLL;", "+\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\tif (eventType != SWT.MeasureItem) newBits &= ~OS.TVS_FULLROWSELECT;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dc61724e1f48a8667e26ccf768312e7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "d6e5fd9d51a6abff495205e8658edefbd10eb13a", "commitAfterChange": "1111cdd83e7bad408fb48dbd0ac59f9b419ee213", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": "  int processMouseMove (int callData, int arg1, int int2)", "signatureAfterChange": "  int processMouseMove (int callData, int arg1, int int2)", "diff": ["-\tDisplay display = getDisplay ();", "-\tdisplay.addMouseHoverTimeout (handle);", "+\tif (hooks (SWT.MouseHover)) {", "+\t\tDisplay display = getDisplay ();", "+\t\tdisplay.addMouseHoverTimeout (handle);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8ac218e27b73034e97ebc7e36e421ef", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "eccf3f9dfad619459ad0b8e1ee4716ddc8dc2aae", "commitAfterChange": "46f2ec1e17ee0fd83ca086dc9c5ef074b69e3813", "methodNumberBeforeChange": 165, "methodNumberAfterChange": 165, "signatureBeforeChange": "\r \r LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["-\t\t/*\r", "-\t\t* Feature in Windows.  DragDetect() captures the mouse\r", "-\t\t* and tracks its movement until the user releases the\r", "-\t\t* left mouse button, presses the ESC key, or moves the\r", "-\t\t* mouse outside the drag rectangle.  If the user moves\r", "-\t\t* the mouse outside of the drag rectangle, DragDetect\r", "-\t\t* returns true and a drag and drop operation can be\r", "-\t\t* started.  When the left mouse button is released or\r", "-\t\t* the ESC key is pressed, these events are consumed by\r", "-\t\t* DragDetect() so that application code that matches\r", "-\t\t* mouse down/up pairs or looks for the ESC key will not\r", "-\t\t* function properly.  The fix is to send these events\r", "-\t\t* when the drag has not started.\r", "-\t\t* \r", "-\t\t* NOTE: For now, don't send a fake WM_KEYDOWN/WM_KEYUP\r", "-\t\t* events for the ESC key.  This would require computing\r", "-\t\t* wParam (the key) and lParam (the repeat count, scan code,\r", "-\t\t* extended-key flag, context code, previous key-state flag,\r", "-\t\t* and transition-state flag) which is non-trivial.\r", "-\t\t*/\r", "-\t\tif (OS.GetKeyState (OS.VK_ESCAPE) >= 0) {\r", "-\t\t\tOS.SendMessage (handle, OS.WM_LBUTTONUP, wParam, lParam);\r", "+\t\tif (hooks (SWT.DragDetect)) {\r", "+\t\t\t/*\r", "+\t\t\t* Feature in Windows.  DragDetect() captures the mouse\r", "+\t\t\t* and tracks its movement until the user releases the\r", "+\t\t\t* left mouse button, presses the ESC key, or moves the\r", "+\t\t\t* mouse outside the drag rectangle.  If the user moves\r", "+\t\t\t* the mouse outside of the drag rectangle, DragDetect\r", "+\t\t\t* returns true and a drag and drop operation can be\r", "+\t\t\t* started.  When the left mouse button is released or\r", "+\t\t\t* the ESC key is pressed, these events are consumed by\r", "+\t\t\t* DragDetect() so that application code that matches\r", "+\t\t\t* mouse down/up pairs or looks for the ESC key will not\r", "+\t\t\t* function properly.  The fix is to send these events\r", "+\t\t\t* when the drag has not started.\r", "+\t\t\t* \r", "+\t\t\t* NOTE: For now, don't send a fake WM_KEYDOWN/WM_KEYUP\r", "+\t\t\t* events for the ESC key.  This would require computing\r", "+\t\t\t* wParam (the key) and lParam (the repeat count, scan code,\r", "+\t\t\t* extended-key flag, context code, previous key-state flag,\r", "+\t\t\t* and transition-state flag) which is non-trivial.\r", "+\t\t\t*/\r", "+\t\t\tif (OS.GetKeyState (OS.VK_ESCAPE) >= 0) {\r", "+\t\t\t\tOS.SendMessage (handle, OS.WM_LBUTTONUP, wParam, lParam);\r", "+\t\t\t}\r"]}], "num": 38577}
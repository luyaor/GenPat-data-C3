{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cd716bad1c232c2b626ae5a5c4d5f778", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d87f53f860964ad395b4e30545959c3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "461bbe3bacbad35dca1e9b918ce2ba5104de6626", "commitAfterChange": "bce4377f4f8501c77d053e6fbb8d3f50682ec39c", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 63, "signatureBeforeChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\tLineCache computeLineCache = lineCache;", "-\t\tif (wordWrap) {", "-\t\t\t// set non-wrapping content width calculator. Ensures ideal line width ", "-\t\t\t// that does not required wrapping. Fixes bug 31195.", "-\t\t\tcomputeLineCache = new ContentWidthCache(this, logicalContent);", "-\t\t\tif (!singleLine) {", "-\t\t\t\tcount = logicalContent.getLineCount();", "-\t\t\t}", "-\t\t}", "-\t\t// Only calculate what can actually be displayed.", "-\t\t// Do this because measuring each text line is a ", "-\t\t// time-consuming process.", "-\t\tint visibleCount = Math.min (count, getDisplay().getBounds().height / lineHeight);", "-\t\tcomputeLineCache.calculate(0, visibleCount);", "-\t\twidth = computeLineCache.getWidth() + leftMargin + rightMargin;", "-\t} else if (wordWrap && !singleLine) {", "-\t\t// calculate to wrap to width hint. Fixes bug 20377. ", "-\t\t// don't wrap live content. Fixes bug 38344.", "-\t\tWrappedContent2 wrappedContent = new WrappedContent2(renderer, logicalContent);", "-\t\twrappedContent.wrapLines(width);", "-\t\tcount = wrappedContent.getLineCount();", "+//\t\tLineCache computeLineCache = lineCache;", "+//\t\tif (wordWrap) {", "+//\t\t\t// set non-wrapping content width calculator. Ensures ideal line width ", "+//\t\t\t// that does not required wrapping. Fixes bug 31195.", "+//\t\t\tcomputeLineCache = new ContentWidthCache(this, logicalContent);", "+//\t\t\tif (!singleLine) {", "+//\t\t\t\tcount = logicalContent.getLineCount();", "+//\t\t\t}", "+//\t\t}", "+//\t\t// Only calculate what can actually be displayed.", "+//\t\t// Do this because measuring each text line is a ", "+//\t\t// time-consuming process.", "+//\t\tint visibleCount = Math.min (count, getDisplay().getBounds().height / lineHeight);", "+//\t\tcomputeLineCache.calculate(0, visibleCount);", "+//\t\twidth = computeLineCache.getWidth() + leftMargin + rightMargin;", "+//\t} else if (wordWrap && !singleLine) {", "+//\t\t// calculate to wrap to width hint. Fixes bug 20377. ", "+//\t\t// don't wrap live content. Fixes bug 38344.", "+//\t\tWrappedContent2 wrappedContent = new WrappedContent2(renderer, logicalContent);", "+//\t\twrappedContent.wrapLines(width);", "+//\t\tcount = wrappedContent.getLineCount();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6674dd110a3bbba71a51e7d29f872e81", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "53eaef42c85a19c6c024eb953b35f15c33827e05", "commitAfterChange": "e8c16f7f9f6a3f2c095dfd48e874b4e7a9e7e851", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 62, "signatureBeforeChange": "\r public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "\r public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tcount = content.getLineCount();\r", "+\tif (singleLine) {\r", "+\t\tcount = 1;\r", "+\t}\r", "+\telse {\r", "+\t\tcount = content.getLineCount();\r", "+\t}\r", "+\tif (wordWrap) {\r", "+\t\tif (wHint != SWT.DEFAULT) {\r", "+\t\t\twidth = wHint;\r", "+\t\t} \r", "+\t\telse {\r", "+\t\t\twidth = DEFAULT_WIDTH;\r", "+\t\t}\r", "+\t\tif (singleLine == false) {\r", "+\t\t\t((WrappedContent) content).wrapLines(width);\r", "+\t\t\tcount = content.getLineCount();\r", "+\t\t}\r", "+\t}\r", "+\telse\r", "+\tif (wHint != SWT.DEFAULT) {\r", "+\t\twidth = wHint;\r", "+\t} \r", "+\telse {\r", "+\t\t// Only calculate what can actually be displayed.\r", "+\t\t// Do this because measuring each text line is a \r", "+\t\t// time-consuming process.\r", "+\t\tint visibleCount = Math.min (count, getDisplay().getBounds().height / lineHeight);\r", "+\t\tlineCache.calculate(0, visibleCount);\r", "+\t\twidth = lineCache.getWidth();\r", "+\t}\r", "-\t} else {\r", "-\t\tif (singleLine) count = 1;\r", "+\t} \r", "+\telse {\r", "-\tif (wHint != SWT.DEFAULT) {\r", "-\t\twidth = wHint;\r", "-\t} else {\r", "-\t\t// Only calculate what can actually be displayed.\r", "-\t\t// Do this because measuring each text line is a \r", "-\t\t// time-consuming process.\r", "-\t\tint visibleCount = Math.min (count, getDisplay().getBounds().height / lineHeight);\r", "-\t\tcontentWidth.calculate(0, visibleCount);\r", "-\t\twidth = contentWidth.getWidth();\r", "-\t}\r", "-\r", "-\tif (width == 0) width = DEFAULT_WIDTH;\r", "-\tif (height == 0) {\r", "-\t\tif (singleLine) height = lineHeight;\r", "-\t\telse height = DEFAULT_HEIGHT;\r", "+\tif (width == 0) {\r", "+\t\twidth = DEFAULT_WIDTH;\r", "-\r", "+\tif (height == 0) {\r", "+\t\tif (singleLine) {\r", "+\t\t\theight = lineHeight;\r", "+\t\t}\r", "+\t\telse {\r", "+\t\t\theight = DEFAULT_HEIGHT;\r", "+\t\t}\r", "+\t}\r", "-}\r"]}], "num": 8306}
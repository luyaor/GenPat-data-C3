{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ae843e404155f1f2f6d94d750e32c32", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba7b7eba42aed4c21ea72c1ffbff9065", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleType.java", "commitBeforeChange": "a73836b62f7b4598932e8c5312c4b064291c921f", "commitAfterChange": "9e104f73db7a2c845f9e17635faa75853418512a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tint defineType (int parentType, byte[] name)", "signatureAfterChange": " \t \tint createObject (Accessible accessible, int widget, int parentType)", "diff": ["-", "-\tint defineType (int parentType, byte[] name) {", "-\t\tOS.memmove (objectDefinition, typeInfo, GTypeInfo.sizeof); ", "-\t\tint typeHandle = OS.g_type_register_static (parentType, name, objectDefinition, 0);", "-\t\tOS.g_type_add_interface_static (typeHandle, ATK_COMPONENT_TYPE, componentIfaceDefinition);", "-\t\tOS.g_type_add_interface_static (typeHandle, ATK_ACTION_TYPE, actionIfaceDefinition);", "-\t\tOS.g_type_add_interface_static (typeHandle, ATK_SELECTION_TYPE, selectionIfaceDefinition);", "-\t\tOS.g_type_add_interface_static (typeHandle, ATK_TEXT_TYPE, textIfaceDefinition);", "-\t\treturn typeHandle;", "+\t", "+\tint createObject (Accessible accessible, int widget, int parentType) {", "+\t\tint type = handle;", "+\t\tAccessible acc = accessible;", "+\t\tif (acc == null) {", "+\t\t\t// we don't care about this control, so create it with the parent's ", "+\t\t\t// type so that its accessibility callbacks will not pass though here", "+\t\t\ttype = OS.g_type_parent (type);", "+\t\t\tint result = OS.g_object_new (type, 0);", "+\t\t\tOS.atk_object_initialize (result, widget);", "+\t\t\treturn result;", "+\t\t}", "+\t\tAccessibleObject object = new AccessibleObject (type, widget, acc, parentType);", "+\t\taccessibleObjects.put (new Integer (object.handle), object);", "+\t\tacc.accessibleObject = object;", "+\t\treturn object.handle;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5906f71a3c08106846cf0da56d3a906", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleType.java", "commitBeforeChange": "a397adb9835229656215e95243704829dfcbbeb5", "commitAfterChange": "def775014633899bdd73c908cbbdd1bf2fa7d5be", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tprivate AccessibleType ()", "signatureAfterChange": " \t \tAccessibleType (byte[] typeName, int parentType)", "diff": ["-\tprivate AccessibleType () {", "+\tAccessibleType (byte[] typeName, int parentType) {", "-\t\tint parentType = OS.g_type_from_name (Converter.wcsToMbcs (null, PARENT_TYPE_NAME, true));", "+\t\tthis.parentType = parentType;", "-\t\tgTypeInfo_base_init = new Callback (this, \"gTypeInfo_base_init\", 1);", "-\t\tOS.memmove (objectDefinition, typeInfo, GTypeInfo.sizeof);", "-\t\tbyte[] name = Converter.wcsToMbcs (null, ACCESSIBLE_TYPE_NAME, true);", "-\t\thandle = OS.g_type_register_static (parentType, name, objectDefinition, 0);", "-\t\t// add Action interface", "-\t\tGInterfaceInfo interfaceInfo = new GInterfaceInfo ();", "-\t\tinitActionIfaceCB = new Callback (this, \"initActionIfaceCB\", 1);", "-\t\tinterfaceInfo.interface_init = initActionIfaceCB.getAddress ();", "-\t\tactionIfaceDefinition = OS.g_malloc (GInterfaceInfo.sizeof);  ", "-\t\tOS.memmove (actionIfaceDefinition, interfaceInfo, GInterfaceInfo.sizeof);", "-\t\tOS.g_type_add_interface_static (handle, ATK_ACTION_TYPE, actionIfaceDefinition);", "-\t\t// add Component interface", "-\t\tinterfaceInfo = new GInterfaceInfo ();", "-\t\tinitComponentIfaceCB = new Callback (this, \"initComponentIfaceCB\", 1);", "-\t\tinterfaceInfo.interface_init = initComponentIfaceCB.getAddress ();", "-\t\tcomponentIfaceDefinition = OS.g_malloc (GInterfaceInfo.sizeof);", "-\t\tOS.memmove (componentIfaceDefinition, interfaceInfo, GInterfaceInfo.sizeof);", "+\t\tOS.memmove (objectDefinition, typeInfo, GTypeInfo.sizeof); ", "+\t\thandle = OS.g_type_register_static (parentType, typeName, objectDefinition, 0);", "-\t\t// add Selection interface", "-\t\tinterfaceInfo = new GInterfaceInfo ();", "-\t\tinitSelectionIfaceCB = new Callback (this, \"initSelectionIfaceCB\", 1);", "-\t\tinterfaceInfo.interface_init = initSelectionIfaceCB.getAddress ();", "-\t\tselectionIfaceDefinition = OS.g_malloc (GInterfaceInfo.sizeof);  ", "-\t\tOS.memmove (selectionIfaceDefinition, interfaceInfo, GInterfaceInfo.sizeof);", "+\t\tOS.g_type_add_interface_static (handle, ATK_ACTION_TYPE, actionIfaceDefinition);", "-\t\t// add Text interface", "-\t\tinterfaceInfo = new GInterfaceInfo ();", "-\t\tinitTextIfaceCB = new Callback (this, \"initTextIfaceCB\", 1);", "-\t\tinterfaceInfo.interface_init = initTextIfaceCB.getAddress ();", "-\t\ttextIfaceDefinition = OS.g_malloc (GInterfaceInfo.sizeof);  ", "-\t\tOS.memmove (textIfaceDefinition, interfaceInfo, GInterfaceInfo.sizeof);"]}], "num": 43944}
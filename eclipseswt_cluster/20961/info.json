{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6cc1b982d2ee9afc055668581431a600", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f51fff37c71f896d0723dfe95f026516", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "ca611642fc41807588637202b032414f273f2b1e", "commitAfterChange": "7f6898e7f25aa3abfc9d050db6890b8da8096e1f", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 105, "signatureBeforeChange": " private void allocSelectionHighlightGradientColors()", "signatureAfterChange": " void createSelectionHighlightGradientColors(Color start)", "diff": ["-private void allocSelectionHighlightGradientColors() {", "-\tdeallocSelectionHighlightGradientColors(); //dealloc if existing", "+void createSelectionHighlightGradientColors(Color start) {", "+\tdisposeSelectionHighlightGradientColors(); //dispose if existing", "-\t//don't bother on low colour", "-\tif (getDisplay().getDepth() < 15)", "+\tif(start == null)  //shouldn't happen but just to be safe", "-\tColor white = getDisplay().getSystemColor(SWT.COLOR_WHITE);", "-\tRGB backgroundBegin = getSelectionBackgroundGradientBegin().getRGB();", "+\tRGB from = start.getRGB();", "-\t//if start = end then don't bother", "-\tif(backgroundBegin.equals(to))", "-\t\treturn;", "-\t", "-\t//from is 50/50 white/backgroundBegin so doesn't stand out too much", "-\tRGB from = blend(white.getRGB(), backgroundBegin);", "-", "-\tselectionHighlightGradientColors = new Color[fadeGradientSize];", "+\tselectionHighlightGradientColorsCache = new Color[fadeGradientSize];", "+\tint denom = fadeGradientSize - 1;", "-\t\tint denom = fadeGradientSize;", "-\t\tint propFrom = fadeGradientSize - i;", "+\t\tint propFrom = denom - i;", "-\t\tselectionHighlightGradientColors[i] = new Color(getDisplay(), red, green, blue);", "+\t\tselectionHighlightGradientColorsCache[i] = new Color(getDisplay(), red, green, blue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ca0e2875075e8bf7b1964f060b5da2e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "6d671179e56122bf4c75081a96a44e45b06a5b27", "commitAfterChange": "33615efba6b3b14d1b8ee0928c8a1f12f629315a", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 98, "signatureBeforeChange": "  Control [] _getChildren ()", "signatureAfterChange": "  void updateCursorRects(boolean enabled)", "diff": ["-Control [] _getChildren () {", "-\tControl [] children = super._getChildren();", "-\tif (toolBar != null) {", "-\t\tControl [] newChildren = new Control [children.length + 1];", "-\t\tSystem.arraycopy (children, 0, newChildren, 1, children.length);", "-\t\tnewChildren[0] = toolBar;", "-\t\tchildren = newChildren;", "-\t}", "-\treturn children;", "-}", "+void updateCursorRects(boolean enabled) {", "+\tsuper.updateCursorRects(enabled);", "+\tif (toolBar != null) toolBar.updateCursorRects(enabled);", "+};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "effce134b6de75106fa282a1197b53f5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "5689d8e849bba9fa425a7586a442195ae623d46c", "commitAfterChange": "47f1fc633e8f61df985d0a9b94a145703550a39b", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 69, "signatureBeforeChange": " public void setImage (int columnIndex, Image value)", "signatureAfterChange": " public void setImage (int columnIndex, Image value)", "diff": ["-\t\terror(SWT.ERROR_INVALID_ARGUMENT);", "+\t\terror (SWT.ERROR_INVALID_ARGUMENT);", "-\tif (images.length < columnIndex + 1) {", "-\t\tif (value == null) return;\t/* replacing a null with a null */", "-\t\tImage[] newImages = new Image[columnIndex + 1];", "-\t\tSystem.arraycopy (images, 0, newImages, 0, images.length);", "-\t\timages = newImages;", "-\t} else {", "-\t\tImage current = internalGetImage (columnIndex);", "-\t\tif (current == value) return;\t\t\t\t/* same value */", "-\t\tif (current != null && current.equals (value)) return;", "+\tif (value == images [columnIndex]) return;", "+\tif (value != null && value.equals (images [columnIndex])) return;", "+\timages [columnIndex] = value;", "+\tif (value == null) {", "+\t\tredrawItem ();", "+\t\treturn;", "-\timages[columnIndex] = value;", "-\t\tparent.setImageHeight (value.getBounds().height);", "+\t\tparent.setImageHeight (value.getBounds ().height);"]}], "num": 20961}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9a4f666eac62ebb36473cf0c915e5eb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6df9c57e8c1c47e384a4238ce975851", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "78a7701e433e7c5cea23c3173026c3d4b63cf804", "commitAfterChange": "d4b754da5aea8c1e64c19dd09ce99db7cc592d85", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 18, "signatureBeforeChange": " protected void init ()", "signatureAfterChange": " protected void init ()", "diff": ["+\tif (OS.GDK_WINDOWING_X11()) {", "+\t\txDisplay = OS.GDK_DISPLAY ();", "+\t}", "+", "-\t\t\tint /*long*/ xDisplay = OS.GDK_DISPLAY ();", "+\t\t\t/* Create the warning and error callbacks */", "+\t\t\tClass clazz = getClass ();", "+\t\t\tsynchronized (clazz) {", "+\t\t\t\tint index = 0;", "+\t\t\t\twhile (index < Devices.length) {", "+\t\t\t\t\tif (Devices [index] != null) break;", "+\t\t\t\t\tindex++;", "+\t\t\t\t}", "+\t\t\t\tif (index == Devices.length) {", "+\t\t\t\t\tXErrorCallback = new Callback (clazz, \"XErrorProc\", 2);", "+\t\t\t\t\tXNullErrorProc = XErrorCallback.getAddress ();", "+\t\t\t\t\tif (XNullErrorProc == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\t\t\tXIOErrorCallback = new Callback (clazz, \"XIOErrorProc\", 1);", "+\t\t\t\t\tXNullIOErrorProc = XIOErrorCallback.getAddress ();", "+\t\t\t\t\tif (XNullIOErrorProc == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\t\t\tXErrorProc = OS.XSetErrorHandler (XNullErrorProc);", "+\t\t\t\t\tXIOErrorProc = OS.XSetIOErrorHandler (XNullIOErrorProc);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae08e9228445197d97607bc35bb082b2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT AWT/win32/org/eclipse/swt/internal/awt/win32/SWT_AWT.java", "commitBeforeChange": "30eda25ac0337a8ab8311a2b5be9576bc013d021", "commitAfterChange": "107a45b0e289ce478833e374d92c0dd1634690d1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \r public static Shell new_Shell (Display display, final Canvas parent)", "signatureAfterChange": "\r \r public static Shell new_Shell (Display display, final Canvas parent)", "diff": ["-\tDrawingSurface ds = (DrawingSurface)parent.getPeer();\r", "-\tWDrawingSurfaceInfo wds = (WDrawingSurfaceInfo)ds.getDrawingSurfaceInfo();\r", "-\twds.lock ();\r", "-\tint handle = (int) wds.getHWnd ();\r", "-\twds.unlock ();\r", "-\t\r", "-// TEMPORARY CODE\r", "-//\tInteger hwnd = null;\r", "-//\ttry {\r", "-//\t\tObject ds = parent.getPeer();\r", "-//\t\tMethod method = ds.getClass().getDeclaredMethod(\"getDrawingSurfaceInfo\", null);\r", "-//\t\tObject wds = method.invoke(ds, null);\r", "-//\t\tClass wdsClass = wds.getClass();\r", "-//\t\tmethod = wdsClass.getMethod(\"lock\", null);\r", "-//\t\tmethod.invoke(wds, null);\r", "-//\t\tmethod = wdsClass.getMethod(\"wds.getHWnd\", null);\r", "-//\t\thwnd = (Integer)method.invoke(wds, null);\r", "-//\t\tmethod = wdsClass.getMethod(\"unlock\", null);\r", "-//\t\tmethod.invoke(wds, null);\r", "-//\t} catch (Exception e) {\r", "-//\t\tSWT.error (SWT.ERROR_NOT_IMPLEMENTED, e);\r", "-//\t}\r", "-//\tint handle = hwnd.intValue();\r", "+\t/*\r", "+\t* As of JDK 1.4, the DrawingSurface and WDrawingSurfaceInfo no longer exist\r", "+\t* so that code that references these classes no longer compiles.  The fix is\r", "+\t* to use refection to invoke equivalent code that is commented below.  There\r", "+\t* is no fix at this time for the missing WDrawingSurfaceInfo functionality.\r", "+\t*/\r", "+//\tDrawingSurface ds = (DrawingSurface)parent.getPeer();\r", "+//\tWDrawingSurfaceInfo wds = (WDrawingSurfaceInfo)ds.getDrawingSurfaceInfo();\r", "+//\twds.lock ();\r", "+//\tint handle = (int) wds.getHWnd ();\r", "+//\twds.unlock ();\r", "+\tInteger hwnd = null;\r", "+\ttry {\r", "+\t\tObject ds = parent.getPeer ();\r", "+\t\tClass drawingSurfaceClass = Class.forName (\"sun.awt.DrawingSurface\");\r", "+\t\tMethod method = drawingSurfaceClass.getDeclaredMethod (\"getDrawingSurfaceInfo\", null);\r", "+\t\tObject wds = method.invoke (ds, null);\r", "+\t\tClass wDrawingSurfaceClass = Class.forName (\"sun.awt.windows.WDrawingSurfaceInfo\");\r", "+\t\tmethod = wDrawingSurfaceClass.getMethod (\"lock\", null);\r", "+\t\tmethod.invoke (wds, null);\r", "+\t\tmethod = wDrawingSurfaceClass.getMethod (\"getHWnd\", null);\r", "+\t\thwnd = (Integer) method.invoke (wds, null);\r", "+\t\tmethod = wDrawingSurfaceClass.getMethod (\"unlock\", null);\r", "+\t\tmethod.invoke (wds, null);\r", "+\t} catch (Exception e) {\r", "+\t\tSWT.error (SWT.ERROR_NOT_IMPLEMENTED, e);\r", "+\t}\r", "+\tint handle = hwnd.intValue();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fcebfbe2730640414d25ea8dd59846f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "c75fa2aaa81cd96400f0b4207d26c662b67c5bce", "commitAfterChange": "68dd096752e238c658788f5395a8c9f209d457e7", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["+", "+\tif (OS.GDK_WINDOWING_X11 ()) {", "+\t\tint /*long*/ xWindow = OS.gdk_x11_drawable_get_xid (OS.GTK_WIDGET_WINDOW (shellHandle));", "+\t\tbyte[] atomName = Converter.wcsToMbcs (null, \"SWT_Window_\" + APP_NAME, true); //$NON-NLS-1$", "+\t\tint /*long*/ atom = OS.XInternAtom (OS.GDK_DISPLAY (), atomName, false);", "+\t\tOS.XSetSelectionOwner (OS.GDK_DISPLAY (), atom, xWindow, OS.CurrentTime);", "+\t\tOS.XGetSelectionOwner (OS.GDK_DISPLAY (), atom);", "+\t}", "+", "+\tsignalCallback = new Callback (this, \"signalProc\", 3); //$NON-NLS-1$", "+\tsignalProc = signalCallback.getAddress ();", "+\tif (signalProc == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\tOS.gtk_widget_add_events (shellHandle, OS.GDK_PROPERTY_CHANGE_MASK);", "+\tOS.g_signal_connect (shellHandle, OS.property_notify_event, signalProc, PROPERTY_NOTIFY);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2d17e010da1c0e3d1c0fc8a430fdfe8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "a59d4f0fcd6ac77e4b0b411a02002b0581984050", "commitAfterChange": "e2b4ac8fc06ef616c8ab44b7a5fded395b0c30d0", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  LRESULT WM_SIZE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_SIZE (int wParam, int lParam)", "diff": ["+", "+\t/* Resize the embedded window */", "+\tif ((state & CANVAS) != 0 && (style & SWT.EMBEDDED) != 0) {", "+\t\tint hwndChild = OS.GetWindow (handle, OS.GW_CHILD);", "+\t\tint threadId = OS.GetWindowThreadProcessId (hwndChild, null);", "+\t\tif (threadId != OS.GetCurrentThreadId ()) {", "+\t\t\tif (display.msgHook == 0) {", "+\t\t\t\tif (!OS.IsWinCE) {", "+\t\t\t\t\tdisplay.getMsgCallback = new Callback (display, \"getMsgProc\", 3);", "+\t\t\t\t\tdisplay.getMsgProc = display.getMsgCallback.getAddress ();", "+\t\t\t\t\tif (display.getMsgProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\t\t\tdisplay.msgHook = OS.SetWindowsHookEx (OS.WH_GETMESSAGE, display.getMsgProc, OS.GetLibraryHandle(), threadId);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t//OS.PostThreadMessage (threadId, OS.WM_APP + 4, hwndChild, lParam);", "+\t\t}", "+\t}"]}], "num": 14148}
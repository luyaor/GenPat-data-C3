{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8bed297f53be9360689c9eb5790c109a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04164e5d9a5ecba2ec647d0769f59aa3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Scale.java", "commitBeforeChange": "8e456474322527ff8a1dfc293ab7526bc8016a61", "commitAfterChange": "fb5162d9cf395e7300fb32c509fcfaa11beb065c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  int callPaintEventHandler (int control, int damageRgn, int visibleRgn, int theEvent, int nextHandler)", "signatureAfterChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "diff": ["-int callPaintEventHandler (int control, int damageRgn, int visibleRgn, int theEvent, int nextHandler) {", "-\tint result = super.callPaintEventHandler (control, damageRgn, visibleRgn, theEvent, nextHandler);", "+int kEventMouseDown (int nextHandler, int theEvent, int userData) {", "+\tint result = super.kEventMouseDown (nextHandler, theEvent, userData);", "+\tif (result == OS.noErr) return result;", "+\tif (!hasFocus ()) return result;", "-\t* is not ghosted, if the control is added to the window", "-\t* before the window is made visible, the user will not be", "-\t* able to drag the thumb to the end of the slider.  The", "-\t* fix to force the slider to be added after the window", "-\t* is visible by removing it and then adding it back.", "-\t* This is necessary every time the slider draws.", "+\t* is not ghosted, if the slider has keyboard focus, the", "+\t* user will not be able to drag the thumb to the maximum value", "+\t* of the slider.  The fix is to clear the focus temporarily", "+\t* and restore it after the thumb tracking is complety.", "-\tint topHandle = topHandle ();", "-\tint parentHandle = parent.handle;", "-\tOS.HIViewRemoveFromSuperview (topHandle);", "-\tOS.HIViewAddSubview (parentHandle, topHandle);", "+\tdisplay.ignoreFocus = true;", "+\tint window = OS.GetControlOwner (handle);", "+\tOS.ClearKeyboardFocus (window);", "+\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "+\tif (!isDisposed ()) {", "+\t\tOS.SetKeyboardFocus (window, handle, (short) OS.kControlFocusNextPart);", "+\t}", "+\tdisplay.ignoreFocus = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac5075a94982aeecd6a48562779551fa", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/ScrollBar.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r void createHandle (int index)", "signatureAfterChange": "\r \r void createHandle (int index)", "diff": ["+\tstate |= HANDLE;\r", "+\tDisplay display = getDisplay ();\r", "+\tint orientation, sizeArg, size, basicFlags;\r", "+\tif ((style & SWT.HORIZONTAL) != 0) {\r", "+\t\torientation = OS.Pt_HORIZONTAL;\r", "+\t\tsizeArg = OS.Pt_ARG_HEIGHT;\r", "+\t\tsize = display.SCROLLBAR_HEIGHT;\r", "+\t\tbasicFlags = display.SCROLLBAR_HORIZONTAL_BASIC_FLAGS;\r", "+\t} else {\r", "+\t\torientation = OS.Pt_VERTICAL;\r", "+\t\tsizeArg = OS.Pt_ARG_WIDTH;\r", "+\t\tsize = display.SCROLLBAR_WIDTH;\r", "+\t\tbasicFlags = display.SCROLLBAR_VERTICAL_BASIC_FLAGS;\r", "+\t}\r", "+\t\tsizeArg, size, 0,\r", "-\t\tOS.Pt_ARG_ORIENTATION, (style & SWT.HORIZONTAL) != 0 ? OS.Pt_HORIZONTAL : OS.Pt_VERTICAL, 0,\r", "+\t\tOS.Pt_ARG_BASIC_FLAGS, basicFlags, ~0,\r", "+\t\tOS.Pt_ARG_ORIENTATION, orientation, 0,\r", "+\t\tOS.Pt_ARG_FLAGS, 0, OS.Pt_GETS_FOCUS,\r", "-\tOS.PtExtentWidget (handle);\r"]}], "num": 46310}
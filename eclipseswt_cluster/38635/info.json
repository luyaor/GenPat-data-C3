{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93081757ccf73f4c36801c4d6ad9656a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fab13b04144e5c9f2fc425b08a81065e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "ab0b2d3bbe9918e6c436a9c99106bcc28d4fcea4", "commitAfterChange": "1aa76e023bb4927eb3b7cf526018017f11838086", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  void drawBorder(GC gc, int x, int y, GdkColor selectionColor)", "signatureAfterChange": "  void drawBorder(GC gc, int x, int y, GdkColor selectionColor)", "diff": ["-\t\tboolean drawUnderline = false;", "-\t\tif (style.underline && style.underlineColor != null) drawUnderline = true;", "-\t\tif (style.underline && style.underlineStyle == SWT.UNDERLINE_ERROR && OS.GTK_VERSION < OS.VERSION(2, 4, 0)) drawUnderline = true;", "-\t\tboolean drawStrikeout = false;", "-\t\tif (style.strikeout && style.strikeoutColor != null) drawStrikeout = true;", "+\t\t", "-\t\tif (!drawUnderline && !drawBorder && !drawStrikeout) continue;", "-", "-\t\tint start = translateOffset(styles[i].start);", "-\t\tint end = translateOffset(styles[i+1].start - 1);", "-\t\tint byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, start) - ptr);", "-\t\tint byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, end + 1) - ptr);", "-\t\tint[] ranges = new int[]{byteStart, byteEnd};", "-\t\tint /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);", "-\t\tif (rgn != 0) {", "-\t\t\tint[] nRects = new int[1];", "-\t\t\tint /*long*/[] rects = new int /*long*/[1];", "-\t\t\tOS.gdk_region_get_rectangles(rgn, rects, nRects);", "-\t\t\tGdkRectangle rect = new GdkRectangle();", "-\t\t\tif (drawBorder) {", "+\t\tif (drawBorder && !style.isAdherentBorder(styles[i+1].style)) {", "+\t\t\tint start = styles[i].start;", "+\t\t\tfor (int j = i; j > 0 && style.isAdherentBorder(styles[j-1].style); j--) {", "+\t\t\t\tstart = styles[j - 1].start;", "+\t\t\t}", "+\t\t\tstart = translateOffset(start);", "+\t\t\tint end = translateOffset(styles[i+1].start - 1);", "+\t\t\tint byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, start) - ptr);", "+\t\t\tint byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, end + 1) - ptr);", "+\t\t\tint[] ranges = new int[]{byteStart, byteEnd};", "+\t\t\tint /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);", "+\t\t\tif (rgn != 0) {", "+\t\t\t\tint[] nRects = new int[1];", "+\t\t\t\tint /*long*/[] rects = new int /*long*/[1];", "+\t\t\t\tOS.gdk_region_get_rectangles(rgn, rects, nRects);", "+\t\t\t\tGdkRectangle rect = new GdkRectangle();", "+\t\t\t\tint width = 1;", "+\t\t\t\tfloat[] dashes = null;", "+\t\t\t\tswitch (style.borderStyle) {", "+\t\t\t\t\tcase SWT.BORDER_SOLID: break;", "+\t\t\t\t\tcase SWT.BORDER_DASH: dashes = width != 0 ? GC.LINE_DASH : GC.LINE_DASH_ZERO; break;", "+\t\t\t\t\tcase SWT.BORDER_DOT: dashes = width != 0 ? GC.LINE_DOT : GC.LINE_DOT_ZERO; break;", "+\t\t\t\t}", "-\t\t\t\t\tint width = 1;", "-\t\t\t\t\tfloat[] dashes = null;", "-\t\t\t\t\tswitch (style.borderStyle) {", "-\t\t\t\t\t\tcase SWT.BORDER_SOLID: break;", "-\t\t\t\t\t\tcase SWT.BORDER_DASH: dashes = width != 0 ? GC.LINE_DASH : GC.LINE_DASH_ZERO; break;", "-\t\t\t\t\t\tcase SWT.BORDER_DOT: dashes = width != 0 ? GC.LINE_DOT : GC.LINE_DOT_ZERO; break;", "-\t\t\t\t\t}", "-\t\t\t\t\tint width = 1;", "-\t\t\t\t\tfloat[] dashes = null;", "-\t\t\t\t\tswitch (style.borderStyle) {", "-\t\t\t\t\t\tcase SWT.BORDER_SOLID: break;", "-\t\t\t\t\t\tcase SWT.BORDER_DASH: dashes = width != 0 ? GC.LINE_DASH : GC.LINE_DASH_ZERO; break;", "-\t\t\t\t\t\tcase SWT.BORDER_DOT: dashes = width != 0 ? GC.LINE_DOT : GC.LINE_DOT_ZERO; break;", "-\t\t\t\t\t}", "+\t\t\t\tif (rects[0] != 0) OS.g_free(rects[0]);", "+\t\t\t\tOS.gdk_region_destroy(rgn);", "-\t\t\tif (drawUnderline) {", "+\t\t}", "+\t\t", "+\t\tboolean drawUnderline = false;", "+\t\tif (style.underline && style.underlineColor != null) drawUnderline = true;", "+\t\tif (style.underline && style.underlineStyle == SWT.UNDERLINE_ERROR && OS.GTK_VERSION < OS.VERSION(2, 4, 0)) drawUnderline = true;", "+\t\tif (drawUnderline && !style.isAdherentUnderline(styles[i+1].style)) {", "+\t\t\tint start = styles[i].start;", "+\t\t\tfor (int j = i; j > 0 && style.isAdherentUnderline(styles[j-1].style); j--) {", "+\t\t\t\tstart = styles[j - 1].start;", "+\t\t\t}", "+\t\t\tstart = translateOffset(start);", "+\t\t\tint end = translateOffset(styles[i+1].start - 1);", "+\t\t\tint byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, start) - ptr);", "+\t\t\tint byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, end + 1) - ptr);", "+\t\t\tint[] ranges = new int[]{byteStart, byteEnd};", "+\t\t\tint /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);", "+\t\t\tif (rgn != 0) {", "+\t\t\t\tint[] nRects = new int[1];", "+\t\t\t\tint /*long*/[] rects = new int /*long*/[1];", "+\t\t\t\tOS.gdk_region_get_rectangles(rgn, rects, nRects);", "+\t\t\t\tGdkRectangle rect = new GdkRectangle();", "+\t\t\t\t\tif (gcValues == null) {", "+\t\t\t\t\t\tgcValues = new GdkGCValues();", "+\t\t\t\t\t\tOS.gdk_gc_get_values(gdkGC, gcValues);", "+\t\t\t\t\t}", "+\t\t\t\tif (rects[0] != 0) OS.g_free(rects[0]);", "+\t\t\t\tOS.gdk_region_destroy(rgn);", "-\t\t\tif (drawStrikeout) {", "+\t\t}", "+\t\t", "+\t\tboolean drawStrikeout = false;", "+\t\tif (style.strikeout && style.strikeoutColor != null) drawStrikeout = true;", "+\t\tif (drawStrikeout && !style.isAdherentStrikeout(styles[i+1].style)) {", "+\t\t\tint start = styles[i].start;", "+\t\t\tfor (int j = i; j > 0 && style.isAdherentStrikeout(styles[j-1].style); j--) {", "+\t\t\t\tstart = styles[j - 1].start;", "+\t\t\t}", "+\t\t\tstart = translateOffset(start);", "+\t\t\tint end = translateOffset(styles[i+1].start - 1);", "+\t\t\tint byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, start) - ptr);", "+\t\t\tint byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, end + 1) - ptr);", "+\t\t\tint[] ranges = new int[]{byteStart, byteEnd};", "+\t\t\tint /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);", "+\t\t\tif (rgn != 0) {", "+\t\t\t\tint[] nRects = new int[1];", "+\t\t\t\tint /*long*/[] rects = new int /*long*/[1];", "+\t\t\t\tOS.gdk_region_get_rectangles(rgn, rects, nRects);", "+\t\t\t\tGdkRectangle rect = new GdkRectangle();", "+\t\t\t\t\tif (gcValues == null) {", "+\t\t\t\t\t\tgcValues = new GdkGCValues();", "+\t\t\t\t\t\tOS.gdk_gc_get_values(gdkGC, gcValues);", "+\t\t\t\t\t}", "+\t\t\t\tif (rects[0] != 0) OS.g_free(rects[0]);", "+\t\t\t\tOS.gdk_region_destroy(rgn);", "-\t\t\tif (rects[0] != 0) OS.g_free(rects[0]);", "-\t\t\tOS.gdk_region_destroy(rgn);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f20336d3832bf51c2ccc725c40794c4f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "3528d69528935ee011372f88f680cf1c0de0fa7c", "commitAfterChange": "41106e1ba0e2dbb7b2de869492aef659f8aab194", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["+\tfor (int i = 0; i < styles.length - 1; i++) {", "+\t\tStyleItem run = styles[i];", "+\t\tTextStyle style = run.style;", "+\t\tif (style == null) continue;", "+\t\tif (style.borderStyle != SWT.NONE && (i + 1 >= styles.length || !style.isAdherentBorder(styles[i + 1].style))) {", "+\t\t\tint start = run.start;", "+\t\t\tint end = styles[i + 1].start - 1;", "+\t\t\tfor (int j = i; j > 0 && style.isAdherentBorder(styles[j - 1].style); j--) {", "+\t\t\t\tstart = styles[j - 1].start;", "+\t\t\t}", "+\t\t\tColor color = style.borderColor;", "+\t\t\tif (color == null) color = style.foreground;", "+\t\t\tif (color == null) color = gc.getForeground();", "+\t\t\tint brush = OS.gcnew_SolidColorBrush(color.handle);", "+\t\t\tint pen = OS.gcnew_Pen(brush, 1);", "+\t\t\tOS.GCHandle_Free(brush);", "+\t\t\tint dashStyle = 0;", "+\t\t\tswitch (style.borderStyle) {", "+\t\t\t\tcase SWT.BORDER_SOLID:", "+\t\t\t\t\tdashStyle = OS.DashStyles_Solid(); break;", "+\t\t\t\tcase SWT.BORDER_DOT:", "+\t\t\t\t\tdashStyle = OS.DashStyles_Dot(); break;", "+\t\t\t\tcase SWT.BORDER_DASH:", "+\t\t\t\t\tdashStyle = OS.DashStyles_Dash(); break;", "+\t\t\t}", "+\t\t\tOS.Pen_DashStyle(pen, dashStyle);", "+\t\t\tif (dashStyle != 0) OS.GCHandle_Free(dashStyle);", "+\t\t\tint lineY = y;", "+\t\t\tlineStart = lineEnd = 0;", "+\t\t\tfor (int j = 0; j < lines.length; j++) {", "+\t\t\t\tint lineLength = OS.TextLine_Length(lines[j]);", "+\t\t\t\tlineStart = lineEnd;", "+\t\t\t\tlineEnd = lineStart + lineLength;", "+\t\t\t\tif (start < lineEnd) {", "+\t\t\t\t\tif (end < lineStart) break;", "+\t\t\t\t\tint rangeStart = Math.max(start, lineStart);", "+\t\t\t\t\tint rangLength = Math.min(end, lineEnd) - rangeStart + 1;", "+\t\t\t\t\tint rects = OS.TextLine_GetTextBounds(lines[j], rangeStart, rangLength);\t", "+\t\t\t\t\tif (rects != 0) {", "+\t\t\t\t\t\tint enumerator = OS.TextBoundsCollection_GetEnumerator(rects);", "+\t\t\t\t\t\twhile (OS.IEnumerator_MoveNext(enumerator)) {", "+\t\t\t\t\t\t\tint bounds = OS.TextBoundsCollection_Current(enumerator);", "+\t\t\t\t\t\t\tint textRect = OS.TextBounds_Rectangle(bounds);", "+\t\t\t\t\t\t\tOS.Rect_Y(textRect, OS.Rect_Y(textRect) + lineY);", "+\t\t\t\t\t\t\tOS.Rect_X(textRect, OS.Rect_X(textRect) + x);", "+\t\t\t\t\t\t\tOS.Rect_Width(textRect, OS.Rect_Width(textRect) - 1);", "+\t\t\t\t\t\t\tOS.Rect_Height(textRect, OS.Rect_Height(textRect) - 1);", "+\t\t\t\t\t\t\tOS.DrawingContext_DrawRectangle(drawingContext, 0, pen, textRect);", "+\t\t\t\t\t\t\tOS.GCHandle_Free(textRect);", "+\t\t\t\t\t\t\tOS.GCHandle_Free(bounds);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.GCHandle_Free(enumerator);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.GCHandle_Free(rects);", "+\t\t\t\t}", "+\t\t\t\tint lineHeight = (int)OS.TextLine_Height(lines[j]);", "+\t\t\t\tif (ascent != -1 && descent != -1) lineHeight = Math.max(lineHeight, ascent + descent);", "+\t\t\t\tlineY += lineHeight + lineSpacing;", "+\t\t\t}", "+\t\t\tOS.GCHandle_Free(pen);", "+\t\t} ", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd83261dce93c77622d05bf20b8f57cf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "b99e0e369a51571b12234356a1c0332a2bed35be", "commitAfterChange": "c4ff87b5b532e9f98adbfa0d94c5d8508add0dd4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["-\tif (rgn != 0) OS.DisposeRgn(rgn);", "+\tcallback = null;", "+", "+\tfor (int j = 0; j < styles.length; j++) {", "+\t\tStyleItem run = styles[j];", "+\t\tTextStyle style = run.style;", "+\t\tif (style == null || !style.underline) continue;", "+\t\tif (style.underlineStyle == SWT.UNDERLINE_SINGLE || style.underlineStyle == SWT.UNDERLINE_DOUBLE) continue;", "+\t\tint start = translateOffset(run.start);", "+\t\tint end = j + 1 < styles.length ? translateOffset(styles[j + 1].start - 1) : length;", "+\t\tfor (int i=0, lineStart=0, lineY = 0; i<breaks.length; i++) {", "+\t\t\tint lineBreak = breaks[i];", "+\t\t\tint lineEnd = lineBreak - 1;", "+\t\t\tif (!(start > lineEnd || end < lineStart)) {", "+\t\t\t\tint highStart = Math.max(lineStart, start);", "+\t\t\t\tint highEnd = Math.min(lineEnd, end);", "+\t\t\t\tint highLen = highEnd - highStart + 1;", "+\t\t\t\tif (highLen > 0) {", "+\t\t\t\t\tif (rgn == 0) rgn = OS.NewRgn();", "+\t\t\t\t\tfloat underlineY = y + lineY;", "+\t\t\t\t\tfloat[] foreground = gc.data.foreground;", "+\t\t\t\t\tfloat lineWidth = 0;", "+\t\t\t\t\tOS.CGContextSaveGState(gc.handle);", "+\t\t\t\t\tswitch (style.underlineStyle) {", "+\t\t\t\t\t\tcase SWT.UNDERLINE_ERROR: {", "+\t\t\t\t\t\t\tlineWidth = 2;", "+\t\t\t\t\t\t\tunderlineY += 2 * lineAscent [i] + lineWidth;", "+\t\t\t\t\t\t\tif (style.underlineColor != null) {", "+\t\t\t\t\t\t\t\tforeground = style.underlineColor.handle;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (style.foreground != null) {", "+\t\t\t\t\t\t\t\t\tforeground = style.foreground.handle;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tOS.CGContextSetLineDash(gc.handle, 0, new float[]{1f,3}, 2);", "+\t\t\t\t\t\t\tOS.CGContextSetLineCap(gc.handle, OS.kCGLineCapRound);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcase SWT.UNDERLINE_IME_INPUT:", "+\t\t\t\t\t\tcase SWT.UNDERLINE_IME_TARGET_CONVERTED:", "+\t\t\t\t\t\tcase SWT.UNDERLINE_IME_CONVERTED:", "+\t\t\t\t\t\t\tlineWidth = 1.5f;", "+\t\t\t\t\t\t\tforeground = style.underlineStyle == SWT.UNDERLINE_IME_CONVERTED ? new float[]{0.5f, 0.5f, 0.5f, 1} : new float[]{0, 0, 0, 1};", "+\t\t\t\t\t\t\tFont font = style.font;", "+\t\t\t\t\t\t\tif (font == null) font = this.font != null ? this.font : device.systemFont;", "+\t\t\t\t\t\t\tATSFontMetrics metrics = new ATSFontMetrics();", "+\t\t\t\t\t\t\tOS.ATSFontGetHorizontalMetrics(font.handle, OS.kATSOptionFlagsDefault, metrics);", "+\t\t\t\t\t\t\tunderlineY += lineAscent [i] + lineHeight [i] + (metrics.descent * font.size);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.CGContextSetStrokeColorSpace(gc.handle, device.colorspace);", "+\t\t\t\t\tOS.CGContextSetStrokeColor(gc.handle, foreground);", "+\t\t\t\t\tOS.CGContextSetLineWidth(gc.handle, lineWidth);", "+\t\t\t\t\tOS.ATSUGetTextHighlight(layout, OS.Long2Fix(x), OS.X2Fix(underlineY), highStart, highLen, rgn);", "+\t\t\t\t\tif (callback == null) {", "+\t\t\t\t\t\tcallback = new Callback(this, \"drawUnderline\", 4);", "+\t\t\t\t\t\tif (callback.getAddress() == 0) SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\t\t\t}", "+\t\t\t\t\tdrawStyle = run;", "+\t\t\t\t\tOS.CGContextTranslateCTM (gc.handle, 0.5f, 0.5f);", "+\t\t\t\t\tOS.QDRegionToRects(rgn, OS.kQDParseRegionFromTopLeft, callback.getAddress(), gc.handle);", "+\t\t\t\t\tOS.CGContextStrokePath(gc.handle);", "+\t\t\t\t\tOS.CGContextRestoreGState(gc.handle);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (lineEnd > end) break;", "+\t\t\tlineY += lineHeight[i];", "+\t\t\tlineStart = lineBreak;", "+\t\t}", "+\t}", "+\tif (callback != null) callback.dispose();", "+\tif (rgn != 0) OS.DisposeRgn(rgn);", "+}"]}], "num": 38635}
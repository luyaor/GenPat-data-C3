{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "25d014103571f797c2f1472ee76c91a9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10579a5d53b309973f0754e42eeef3f8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Table.java", "commitBeforeChange": "4ccefad4300da9c7b5500d34a5d690df7d8b9711", "commitAfterChange": "cdd8fbf38e0494ba7aef09b60ed9d852030c52e9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public void test_getColumnI()", "signatureAfterChange": "  public void test_getColumnI()", "diff": ["-\twarnUnimpl(\"Test test_getColumnI not written\");", "+\ttry {", "+\t\ttable.getColumn(0);", "+\t\tfail(\"No exception thrown for index out of range\");", "+\t}", "+\tcatch (IllegalArgumentException e) {", "+\t}", "+\tTableColumn column0 = new TableColumn(table, SWT.LEFT);", "+\ttry {", "+\t\ttable.getColumn(1);", "+\t\tfail(\"No exception thrown for index out of range\");", "+\t}", "+\tcatch (IllegalArgumentException e) {", "+\t}", "+\tassertEquals(column0, table.getColumn(0));", "+\tTableColumn column1 = new TableColumn(table, SWT.LEFT);", "+\tassertEquals(column1, table.getColumn(1));", "+\tcolumn1.dispose();", "+\ttry {", "+\t\ttable.getColumn(1);", "+\t\tfail(\"No exception thrown for index out of range\");", "+\t}", "+\tcatch (IllegalArgumentException e) {", "+\t}", "+\tcolumn0.dispose();", "+\ttry {", "+\t\ttable.getColumn(0);", "+\t\tfail(\"No exception thrown for index out of range\");", "+\t}", "+\tcatch (IllegalArgumentException e) {", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c06bdeb9d82e8fb1d5a45cdfa36650ca", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 45, "signatureBeforeChange": "\r \r private void initCloseButton(Color foreground, Color background)", "signatureAfterChange": "\r \r private void initCloseButtonImages()", "diff": ["-private void initCloseButton(Color foreground, Color background) {\r", "-\tif (closeImage != null) {\r", "-\t\tcloseImage.dispose();\r", "+private void initCloseButtonImages() {\r", "+\tif (closeImage != null) return;\r", "+\r", "+\ttry {\r", "+\t\tDisplay display = getDisplay();\r", "+\t\tImage image = new Image(display, CTabFolder.class.getResourceAsStream(\"close.gif\"));\r", "+\t\tImageData source = image.getImageData();\r", "+\t\tImageData mask = source.getTransparencyMask();\r", "+\t\timage.dispose();\r", "+\t\tcloseImage = new Image(display, source, mask);\r", "+\t} catch (Error e) {\r", "+\t\treturn;\r", "-\tcloseImage = drawCloseImage(foreground, background);\r", "-\tcloseBar.setBackground(background);\r", "-\tcloseBar.setForeground(foreground);\r", "+\t\r", "+\tcloseItem.setDisabledImage(closeImage);\r", "-}\r", "+\tinactiveCloseItem.setDisabledImage(closeImage);\r", "+\tinactiveCloseItem.setImage(closeImage);\r", "+\tint height = getTabHeight();\r", "+\tPoint size = closeBar.computeSize(SWT.DEFAULT, height);\r", "+\tcloseBar.setSize(size);\r", "+\tinactiveCloseBar.setSize(size);\r", "+}\r"]}], "num": 3268}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eaa04e882afc61dba67ece9825f865f7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ab9aae0013c1a2cba45cc917a00f283", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 52, "signatureBeforeChange": "\r int processSetFocus (int callData)", "signatureAfterChange": "\r int XFocusChange (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-int processSetFocus (int callData) {\r", "+int XFocusChange (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "-\tOS.memmove (xEvent, callData, XFocusChangeEvent.sizeof);\r", "+\tOS.memmove (xEvent, call_data, XFocusChangeEvent.sizeof);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "157938a98964d2ee7092735cdaaac382", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 147, "signatureBeforeChange": "\r int processSetFocus (int callData)", "signatureAfterChange": "\r int XFocusChange (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processSetFocus (int callData) {\r", "-\r", "-\t/* Get the focus change event */\r", "-\tXFocusChangeEvent xEvent = new XFocusChangeEvent ();\r", "-\tOS.memmove (xEvent, callData, XFocusChangeEvent.sizeof);\r", "-\r", "-\t/* Ignore focus changes caused by grabbing and ungrabing */\r", "-\tif (xEvent.mode != OS.NotifyNormal) return 0;\r", "-\r", "-\t/* Only process focus callbacks between windows */\r", "-\tif (xEvent.detail != OS.NotifyAncestor &&\r", "-\t\txEvent.detail != OS.NotifyInferior &&\r", "-\t\txEvent.detail != OS.NotifyNonlinear) return 0;\r", "-\r", "-\t/*\r", "-\t* Ignore focus change events when the window getting or losing\r", "-\t* focus is a menu.  Because XmGetFocusWidget() does not answer\r", "-\t* the menu shell (it answers the menu parent), it is necessary\r", "-\t* to use XGetInputFocus() to get the real X focus window.\r", "-\t*/\r", "-\tint xDisplay = xEvent.display;\r", "-\tif (xDisplay == 0) return 0;\r", "-\tint [] unused = new int [1], xWindow = new int [1];\r", "-\tOS.XGetInputFocus (xDisplay, xWindow, unused);\r", "-\tif (xWindow [0] != 0) {\r", "-\t\tint widget = OS.XtWindowToWidget (xDisplay, xWindow [0]);\r", "-\t\tif (widget != 0 && OS.XtClass (widget) == OS.XmMenuShellWidgetClass ()) return 0;\r", "-\t}\r", "-\t\r", "-\t/* Process the focus change for the widget */\r", "-\tswitch (xEvent.type) {\r", "-\t\tcase OS.FocusIn: {\r", "-\t\t\tShell shell = getShell ();\r", "-\t\t\tprocessFocusIn ();\r", "-\t\t\t// widget could be disposed at this point\r", "-\t\t\t\r", "-\t\t\t/*\r", "-\t\t\t* It is possible that the shell may be\r", "-\t\t\t* disposed at this point.  If this happens\r", "-\t\t\t* don't send the activate and deactivate\r", "-\t\t\t* events.\r", "-\t\t\t*/\t\r", "-\t\t\tif (!shell.isDisposed ()) {\r", "-\t\t\t\tshell.setActiveControl (this);\r", "-\t\t\t}\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t\tcase OS.FocusOut: {\r", "-\t\t\tShell shell = getShell ();\r", "-\t\t\tDisplay display = getDisplay ();\r", "-\t\t\t\r", "-\t\t\tprocessFocusOut ();\r", "-\t\t\t// widget could be disposed at this point\r", "-\t\t\t\r", "-\t\t\t/*\r", "-\t\t\t* It is possible that the shell may be\r", "-\t\t\t* disposed at this point.  If this happens\r", "-\t\t\t* don't send the activate and deactivate\r", "-\t\t\t* events.\r", "-\t\t\t*/\r", "-\t\t\tif (!shell.isDisposed ()) {\r", "-\t\t\t\tControl control = display.getFocusControl ();\r", "-\t\t\t\tif (control == null || shell != control.getShell () ) {\r", "-\t\t\t\t\tshell.setActiveControl (null);\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t}\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XFocusChange (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\r", "+\t/* Get the focus change event */\r", "+\tXFocusChangeEvent xEvent = new XFocusChangeEvent ();\r", "+\tOS.memmove (xEvent, call_data, XFocusChangeEvent.sizeof);\r", "+\r", "+\t/* Ignore focus changes caused by grabbing and ungrabing */\r", "+\tif (xEvent.mode != OS.NotifyNormal) return 0;\r", "+\r", "+\t/* Only process focus callbacks between windows */\r", "+\tif (xEvent.detail != OS.NotifyAncestor &&\r", "+\t\txEvent.detail != OS.NotifyInferior &&\r", "+\t\txEvent.detail != OS.NotifyNonlinear) return 0;\r", "+\r", "+\t/*\r", "+\t* Ignore focus change events when the window getting or losing\r", "+\t* focus is a menu.  Because XmGetFocusWidget() does not answer\r", "+\t* the menu shell (it answers the menu parent), it is necessary\r", "+\t* to use XGetInputFocus() to get the real X focus window.\r", "+\t*/\r", "+\tint xDisplay = xEvent.display;\r", "+\tif (xDisplay == 0) return 0;\r", "+\tint [] unused = new int [1], xWindow = new int [1];\r", "+\tOS.XGetInputFocus (xDisplay, xWindow, unused);\r", "+\tif (xWindow [0] != 0) {\r", "+\t\tint widget = OS.XtWindowToWidget (xDisplay, xWindow [0]);\r", "+\t\tif (widget != 0 && OS.XtClass (widget) == OS.XmMenuShellWidgetClass ()) return 0;\r", "+\t}\r", "+\t\r", "+\t/* Process the focus change for the widget */\r", "+\tswitch (xEvent.type) {\r", "+\t\tcase OS.FocusIn: {\r", "+\t\t\tShell shell = getShell ();\r", "+\t\t\tprocessFocusIn ();\r", "+\t\t\t// widget could be disposed at this point\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* It is possible that the shell may be\r", "+\t\t\t* disposed at this point.  If this happens\r", "+\t\t\t* don't send the activate and deactivate\r", "+\t\t\t* events.\r", "+\t\t\t*/\t\r", "+\t\t\tif (!shell.isDisposed ()) {\r", "+\t\t\t\tshell.setActiveControl (this);\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\tcase OS.FocusOut: {\r", "+\t\t\tShell shell = getShell ();\r", "+\t\t\tDisplay display = getDisplay ();\r", "+\t\t\t\r", "+\t\t\tprocessFocusOut ();\r", "+\t\t\t// widget could be disposed at this point\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* It is possible that the shell may be\r", "+\t\t\t* disposed at this point.  If this happens\r", "+\t\t\t* don't send the activate and deactivate\r", "+\t\t\t* events.\r", "+\t\t\t*/\r", "+\t\t\tif (!shell.isDisposed ()) {\r", "+\t\t\t\tControl control = display.getFocusControl ();\r", "+\t\t\t\tif (control == null || shell != control.getShell () ) {\r", "+\t\t\t\t\tshell.setActiveControl (null);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t}\r", "+\treturn 0;\r", "+}\r"]}], "num": 16386}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "92b832f7a5db2036384de5d945b4ea7c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de9e54f5617ea9929c238234d6af5b6e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "e7fb43dbb2484659429530f9cab714cb6e3de9f3", "commitAfterChange": "d69b8bce251422ebdcfdac8edd7d2bcf938dfebd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \r private static void gnome_parseMimeFile( Hashtable info, BufferedReader reader )", "signatureAfterChange": "  private static void gnome_parseMimeFile( Hashtable info, BufferedReader reader )", "diff": ["-\r", "-private static void gnome_parseMimeFile( Hashtable info, BufferedReader reader ) {\r", "-\tVector  mimeExts = null;\r", "-\tString  mimeType = null;\r", "-\tboolean saveType = false;\r", "-\tString  line     = \"#\";\r", "-\twhile (line != null) {\r", "-\t\t\r", "-\t\t// Determine if the line contains a mime type name.\r", "-\t\tboolean newType = (line.length() > 0 && Character.isLetter( line.charAt(0) ));\r", "-\t\t\t\t  \r", "-\t\t// If there is valid data on this line to be processed\r", "-\t\tString data = line.trim();\r", "-\t\tif (data.length() > 0 && data.charAt(0) != '#') {\r", "-\t\t\t\r", "-\t\t\t// If this line defines a new mime type\r", "-\t\t\tif (newType) {\r", "-\t\t\t\t\r", "-\t\t\t\t// If a previous mime type has not be saved yet\r", "-\t\t\t\tif (mimeType != null) {\r", "-\t\t\t\t\t// Save the type and process this line again.\r", "-\t\t\t\t\tsaveType = true;\r", "-\t\t\t\t}\r", "-\t\t\t\t// else initialize the mime type info\r", "-\t\t\t\telse {\r", "-\t\t\t\t\tint colon = data.indexOf( ':' );\r", "-\t\t\t\t\tif (colon != -1) {\r", "-\t\t\t\t\t\tmimeType = data.substring( 0, colon );\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\telse {\r", "-\t\t\t\t\t\tmimeType = data;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tmimeExts = new Vector();\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\t// else if the line defines a list of extensions\r", "-\t\t\telse if (data.indexOf( \"ext\" ) == 0 && mimeType != null) {\r", "-\t\t\t\t\r", "-\t\t\t\t// Get the extensions defined on the line\r", "-\t\t\t\tString exts = \"\";\r", "-\t\t\t\tint colon = data.indexOf( ':' );\r", "-\t\t\t\tif ((colon != -1) && ((colon+1) < data.length())) {\r", "-\t\t\t\t\texts = data.substring( (colon+1) ).trim();\r", "-\t\t\t\t}\r", "-\t\t\t\t\r", "-\t\t\t\t// While there are extensions to be processed\r", "-\t\t\t\texts = exts.replace( '\\t', ' ' );\r", "-\t\t\t\twhile (exts.length() != 0) {\r", "-\t\t\t\t\t// Extract the next entension from the list\r", "-\t\t\t\t\tString newExt;\r", "-\t\t\t\t\tint  space = exts.indexOf( ' ' );\r", "-\t\t\t\t\tif (space != -1) {\r", "-\t\t\t\t\t\tnewExt = exts.substring( 0, space );\r", "-\t\t\t\t\t\texts = exts.substring( space ).trim();\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\telse {\r", "-\t\t\t\t\t\tnewExt = exts;\r", "-\t\t\t\t\t\texts = \"\";\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\t\r", "-\t\t\t\t\t// Prefix an extension with a period.\r", "-\t\t\t\t\tif (newExt.charAt(0) != '.') {\r", "-\t\t\t\t\t\tnewExt = \".\" + newExt;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tmimeExts.add( newExt );\r", "-\t\t\t\t} \r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\t// else if the line defines a list of regular expressions\r", "-\t\t\telse if (data.indexOf( \"regex\" ) == 0 && mimeType != null) {\r", "-\t\t\t\t// Do nothing with these right now.\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t\r", "-\t\t\r", "-\t\t// If the current mime type is still being processed\r", "-\t\tif (!saveType) {\r", "-\t\t\t// Get the next line\t\t\t\r", "-\t\t\ttry {\r", "-\t\t\t\tline = reader.readLine();\r", "-\t\t\t}\r", "-\t\t\tcatch (IOException e) {\r", "-\t\t\t\tline = null;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t\r", "-\t\t// If the current type should be saved or if the end\r", "-\t\t// of the file was reached\r", "-\t\tif (saveType || (line == null)) {\r", "-\r", "-\t\t\t// If there is a mime type to be saved\r", "-\t\t\tif (mimeType != null) {\r", "-\t\t\t\r", "-\t\t\t\t// If the mime type does not exist in the map, add it.\r", "-\t\t\t\tVector prevExts = (Vector) info.get( mimeType );\r", "-\t\t\t\tif (prevExts == null) {\r", "-\t\t\t\t\tinfo.put( mimeType, mimeExts );\r", "-\t\t\t\t}\r", "-\t\t\r", "-\t\t\t\t// else append the new list of extensions.\r", "-\t\t\t\telse {\r", "-\t\t\t\t\tfor (int i = 0; i < mimeExts.size(); i++) {\r", "-\t\t\t\t\t\tprevExts.add( mimeExts.elementAt( i ) );\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\tmimeType = null;\r", "-\t\t\t\tmimeExts = null;\r", "-\t\t\t\tsaveType = false;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-}\r", "+", "+private static void gnome_parseMimeFile( Hashtable info, BufferedReader reader ) {", "+\tVector  mimeExts = null;", "+\tString  mimeType = null;", "+\tboolean saveType = false;", "+\tString  line     = \"#\";", "+\twhile (line != null) {", "+\t\t", "+\t\t// Determine if the line contains a mime type name.", "+\t\tboolean newType = (line.length() > 0 && Character.isLetter( line.charAt(0) ));", "+\t\t\t\t  ", "+\t\t// If there is valid data on this line to be processed", "+\t\tString data = line.trim();", "+\t\tif (data.length() > 0 && data.charAt(0) != '#') {", "+\t\t\t", "+\t\t\t// If this line defines a new mime type", "+\t\t\tif (newType) {", "+\t\t\t\t", "+\t\t\t\t// If a previous mime type has not be saved yet", "+\t\t\t\tif (mimeType != null) {", "+\t\t\t\t\t// Save the type and process this line again.", "+\t\t\t\t\tsaveType = true;", "+\t\t\t\t}", "+\t\t\t\t// else initialize the mime type info", "+\t\t\t\telse {", "+\t\t\t\t\tint colon = data.indexOf( ':' );", "+\t\t\t\t\tif (colon != -1) {", "+\t\t\t\t\t\tmimeType = data.substring( 0, colon );", "+\t\t\t\t\t}", "+\t\t\t\t\telse {", "+\t\t\t\t\t\tmimeType = data;", "+\t\t\t\t\t}", "+\t\t\t\t\tmimeExts = new Vector();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\t// else if the line defines a list of extensions", "+\t\t\telse if (data.indexOf( \"ext\" ) == 0 && mimeType != null) {", "+\t\t\t\t", "+\t\t\t\t// Get the extensions defined on the line", "+\t\t\t\tString exts = \"\";", "+\t\t\t\tint colon = data.indexOf( ':' );", "+\t\t\t\tif ((colon != -1) && ((colon+1) < data.length())) {", "+\t\t\t\t\texts = data.substring( (colon+1) ).trim();", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t// While there are extensions to be processed (use space as separator)", "+\t\t\t\texts = exts.replace( '\\t', ' ' );", "+\t\t\t\texts = exts.replace( ',', ' ' );", "+\t\t\t\twhile (exts.length() != 0) {", "+\t\t\t\t\t// Extract the next entension from the list", "+\t\t\t\t\tString newExt;", "+\t\t\t\t\tint  space = exts.indexOf( ' ' );", "+\t\t\t\t\tif (space != -1) {", "+\t\t\t\t\t\tnewExt = exts.substring( 0, space );", "+\t\t\t\t\t\texts = exts.substring( space ).trim();", "+\t\t\t\t\t}", "+\t\t\t\t\telse {", "+\t\t\t\t\t\tnewExt = exts;", "+\t\t\t\t\t\texts = \"\";", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t\t// Prefix an extension with a period.", "+\t\t\t\t\tif (newExt.charAt(0) != '.') {", "+\t\t\t\t\t\tnewExt = \".\" + newExt;", "+\t\t\t\t\t}", "+\t\t\t\t\tmimeExts.add( newExt );", "+\t\t\t\t} ", "+\t\t\t}", "+\t\t\t", "+\t\t\t// else if the line defines a list of regular expressions", "+\t\t\telse if (data.indexOf( \"regex\" ) == 0 && mimeType != null) {", "+\t\t\t\t// Do nothing with these right now.", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\t", "+\t\t// If the current mime type is still being processed", "+\t\tif (!saveType) {", "+\t\t\t// Get the next line\t\t\t", "+\t\t\ttry {", "+\t\t\t\tline = reader.readLine();", "+\t\t\t}", "+\t\t\tcatch (IOException e) {", "+\t\t\t\tline = null;", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\t// If the current type should be saved or if the end", "+\t\t// of the file was reached", "+\t\tif (saveType || (line == null)) {", "+\t\t\t// If there is a mime type to be saved", "+\t\t\tif (mimeType != null) {", "+\t\t\t", "+\t\t\t\t// If the mime type does not exist in the map, add it.", "+\t\t\t\tVector prevExts = (Vector) info.get( mimeType );", "+\t\t\t\tif (prevExts == null) {", "+\t\t\t\t\tinfo.put( mimeType, mimeExts );", "+\t\t\t\t}", "+\t\t", "+\t\t\t\t// else append the new list of extensions.", "+\t\t\t\telse {", "+\t\t\t\t\tfor (int i = 0; i < mimeExts.size(); i++) {", "+\t\t\t\t\t\tprevExts.add( mimeExts.elementAt( i ) );", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tmimeType = null;", "+\t\t\tmimeExts = null;", "+\t\t\tsaveType = false;", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d77c51b64f7828e8db31e2f2669e429", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "ea64a3586726e69b3a6487ec2ec021a68fc2a5a5", "commitAfterChange": "7b86bb84dfcfe4aea3b7f4a6b9bef988b3d5bbf6", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  public void stop()", "signatureAfterChange": "  public void stop()", "diff": ["+\t/*", "+\t* Ensure that isAboutBlank is set accurately since Stop can be issued at", "+\t* any stage in the page load cycle.", "+\t*/", "+\tisAboutBlank = getUrl().startsWith(ABOUT_BLANK);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9706b22fb9c66007adf7804b355f3e3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/StatsGenerator.java", "commitBeforeChange": "7203f644cd57836096a98ff5d2035a1b7d2e4966", "commitAfterChange": "4d990ae57b57aa2cbad38a7f666725e64a223a1b", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void generateSourceFile(Class[] classes)", "signatureAfterChange": "  public void generateSourceFile(Class[] classes)", "diff": ["+\t\tisCPP |= classData.getFlag(\"cpp\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d0d76df900e474d9809593ea82172599", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Image.java", "commitBeforeChange": "f4b3eed207e8392acb004bd104993d972fc13ba3", "commitAfterChange": "7c8ea008df163fadfac69ebb2c5343e230ee8244", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " String getPath(String fileName)", "signatureAfterChange": " String getPath(String fileName)", "diff": ["-\tif (urlPath.indexOf(File.separatorChar) == 0) urlPath = urlPath.substring(1);\t\t\t", "+\tif (urlPath.indexOf(File.separatorChar) == 0) urlPath = urlPath.substring(1);", "+\turlPath = urlPath.replaceAll(\"%20\", \" \");\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3deb36d3606ee295b1655f420a0ef60e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "a74f63ac835ea361688e2afeacd56ec17b2e3e64", "commitAfterChange": "bba1c08ab23ad4b8fbfe85635db041a3505b8374", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create(Composite parent, int style)", "signatureAfterChange": "  public void create(Composite parent, int style)", "diff": ["+\t\t\t\t\t\tisAboutBlank = url.startsWith(ABOUT_BLANK);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f99a25f3facafd3b8da4a4edd7aa1488", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeColumn.java", "commitBeforeChange": "9efbf26f3714ed864b416d36c7eda088c1f58caa", "commitAfterChange": "ee9091b9f7355cf177525099521094d257122a3e", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void setWidth (int value)", "signatureAfterChange": " public void setWidth (int value)", "diff": ["+\tvalue = Math.max (value, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e6d5e3e731b91b35cbd9470fdbe5ca3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "dd11d932221c358c44e83cdb9ee36bc7594323b4", "commitAfterChange": "8b896c8f1d8f2340e6910ed5d99ab3f39a66e8c2", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " protected void init ()", "signatureAfterChange": " protected void init ()", "diff": ["+\tCOLOR_INFO_FOREGROUND = \t\tColor.carbon_new(this, 0x000000, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc8f5a0044c2f39e547342deabfd15e7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "e4496f774aefe96ea3b0a264fd8b918ee1e8cd04", "commitAfterChange": "eaedcdb93667a66f95a717a3ccd65c2ce03024c9", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "  void insertEditText (String string)", "signatureAfterChange": "  void insertEditText (String string)", "diff": ["+\t\t\t\tlength = Math.max(0, length);"]}], "num": 10397}
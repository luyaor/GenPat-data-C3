{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c5453370ffef9cf1cadb47167e171c2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd663ba158ece3b7e2f4445ade71b971", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "e90ab2125687aa309a4ccb3b915236a2c38bbe42", "commitAfterChange": "4cdc1e7237ed4ed5f9297953113ca3141adaaffe", "methodNumberBeforeChange": 184, "methodNumberAfterChange": 184, "signatureBeforeChange": "  long applicationNextEventMatchingMask (long id, long sel, long mask, long expiration, long mode, long dequeue)", "signatureAfterChange": "  long applicationNextEventMatchingMask (long id, long sel, long mask, long expiration, long mode, long dequeue)", "diff": ["-\tobjc_super super_struct = new objc_super();", "-\tsuper_struct.receiver = id;", "-\tsuper_struct.super_class = OS.objc_msgSend(id, OS.sel_superclass);", "-\tlong /*int*/ result = OS.objc_msgSendSuper(super_struct, sel, mask, expiration, mode, dequeue != 0);", "-\tif (result != 0) {", "-\t\t/*", "-\t\t * Feature of Cocoa.  When an NSComboBox's items list is visible it runs an event", "-\t\t * loop that will close the list in response to a processed NSApplicationDefined", "-\t\t * event.", "-\t\t *", "-\t\t * Mozilla-style Browsers are a common source of NSApplicationDefined events that", "-\t\t * will cause this to happen, which is not desirable in the context of SWT.  The", "-\t\t * workaround is to detect this case and to not return the event that would trigger", "-\t\t * this to happen.", "-\t\t */", "-\t\tif (dequeue != 0 && currentCombo != null && !currentCombo.isDisposed()) {", "-\t\t\tNSEvent nsEvent = new NSEvent(result);", "-\t\t\tif (mozillaRunning) {", "-\t\t\t\tif (nsEvent.type() == OS.NSApplicationDefined) {", "-\t\t\t\t\treturn 0;", "+\tsendPreExternalEventDispatchEvent();", "+\ttry {", "+\t\tobjc_super super_struct = new objc_super();", "+\t\tsuper_struct.receiver = id;", "+\t\tsuper_struct.super_class = OS.objc_msgSend(id, OS.sel_superclass);", "+\t\tlong /*int*/ result = OS.objc_msgSendSuper(super_struct, sel, mask, expiration, mode, dequeue != 0);", "+\t\tif (result != 0) {", "+\t\t\t/*", "+\t\t\t * Feature of Cocoa.  When an NSComboBox's items list is visible it runs an event", "+\t\t\t * loop that will close the list in response to a processed NSApplicationDefined", "+\t\t\t * event.", "+\t\t\t *", "+\t\t\t * Mozilla-style Browsers are a common source of NSApplicationDefined events that", "+\t\t\t * will cause this to happen, which is not desirable in the context of SWT.  The", "+\t\t\t * workaround is to detect this case and to not return the event that would trigger", "+\t\t\t * this to happen.", "+\t\t\t */", "+\t\t\tif (dequeue != 0 && currentCombo != null && !currentCombo.isDisposed()) {", "+\t\t\t\tNSEvent nsEvent = new NSEvent(result);", "+\t\t\t\tif (mozillaRunning) {", "+\t\t\t\t\tif (nsEvent.type() == OS.NSApplicationDefined) {", "+\t\t\t\t\t\treturn 0;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (nsEvent.type() == OS.NSKeyDown) {", "+\t\t\t\t\tcurrentCombo.sendTrackingKeyEvent(nsEvent, SWT.KeyDown);", "-\t\t\tif (nsEvent.type() == OS.NSKeyDown) {", "-\t\t\t\tcurrentCombo.sendTrackingKeyEvent(nsEvent, SWT.KeyDown);", "+\t\t\tif (dequeue != 0 && trackingControl != null && !trackingControl.isDisposed()) {", "+\t\t\t\tapplicationSendTrackingEvent(new NSEvent(result), trackingControl);", "-\t\tif (dequeue != 0 && trackingControl != null && !trackingControl.isDisposed()) {", "-\t\t\tapplicationSendTrackingEvent(new NSEvent(result), trackingControl);", "-\t\t}", "+\t\treturn result;", "+\t} finally {", "+\t\tsendPostExternalEventDispatchEvent();", "-\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f36b31a768f40587bbbbadbd65eaa1d2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/SelectableItemWidget.java", "commitBeforeChange": "4d5ab17cd6749c2abe0c70173101cdb64d124f6e", "commitAfterChange": "8637012b8eba77256b5c3b8bbc9aa610574c0c50", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 107, "signatureBeforeChange": " public void setRedraw (boolean redraw)", "signatureAfterChange": " public void setRedraw (boolean redraw)", "diff": ["-\t\tif (--drawCount == 0) redraw();", "+\t\tif (--drawCount == 0) {", "+\t\t\tcalculateVerticalScrollbar();", "+\t\t\tcalculateHorizontalScrollbar();", "+\t\t\tresize();", "+\t\t\tredraw();", "+\t\t}"]}], "num": 51712}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dbab0a0c46bafbdc82653edfaec14bf5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7afbb92b1104ab85261a036552c9aae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "d496d5a9c7cd5750cf246e3865372a158ce7a36b", "commitAfterChange": "4f652c652f932a4ca466d546ef49a18a356a7ae5", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["-\tboolean gdip = gdipGraphics != 0 && (alpha != 0xFF || data.foregroundPattern != null);", "-\tint /*long*/ clipRgn = 0;", "-\tfloat[] lpXform = null;", "+\tboolean gdip = gdipGraphics != 0;", "-\tif (gdipGraphics != 0 && !gdip) {", "-\t\tint /*long*/ matrix = Gdip.Matrix_new(1, 0, 0, 1, 0, 0);", "-\t\tif (matrix == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tGdip.Graphics_GetTransform(gdipGraphics, matrix);", "-\t\tint /*long*/ identity = gc.identity();", "-\t\tGdip.Matrix_Invert(identity);", "-\t\tGdip.Matrix_Multiply(matrix, identity, Gdip.MatrixOrderAppend);", "-\t\tGdip.Matrix_delete(identity);", "-\t\tif (!Gdip.Matrix_IsIdentity(matrix)) {", "-\t\t\tlpXform = new float[6];", "-\t\t\tGdip.Matrix_GetElements(matrix, lpXform);", "-\t\t}", "-\t\tGdip.Matrix_delete(matrix);", "-\t\tif ((data.style & SWT.MIRRORED) != 0 && lpXform != null) {", "-\t\t\tgdip = true;", "-\t\t\tlpXform = null;", "-\t\t} else {", "-\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeNone);", "-\t\t\tint /*long*/ rgn = Gdip.Region_new();", "-\t\t\tGdip.Graphics_GetClip(gdipGraphics, rgn);", "-\t\t\tif (!Gdip.Region_IsInfinite(rgn, gdipGraphics)) {", "-\t\t\t\tclipRgn = Gdip.Region_GetHRGN(rgn, gdipGraphics);", "-\t\t\t}", "-\t\t\tGdip.Region_delete(rgn);", "-\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf);", "-\t\t\thdc = Gdip.Graphics_GetHDC(gdipGraphics);", "-\t\t}", "-\t}", "-\t\t}", "-\t\tif (lpXform != null) {", "-\t\t\tOS.SetGraphicsMode(hdc, OS.GM_ADVANCED);", "-\t\t\tOS.SetWorldTransform(hdc, lpXform);", "-\t\t}", "-\t\tif (clipRgn != 0) {", "-\t\t\tOS.SelectClipRgn(hdc, clipRgn);", "-\t\t\tOS.DeleteObject(clipRgn);", "-\tint /*long*/ selBrush = 0, selPen = 0, selBrushFg = 0;", "+\tint /*long*/ selBrush = 0, selPen = 0, selBrushFg = 0, gdipFont = 0, lastHFont = 0;", "-\t\t\t\t\tOS.SelectObject(hdc, getItemFont(run));", "-\t\t\t\t\tint drawRunY = drawY + (baseline - run.ascent);", "+\t\t\t\t\tint /*long*/ hFont = getItemFont(run);", "+\t\t\t\t\tOS.SelectObject(hdc, hFont);", "-\t\t\t\t\t\tOS.BeginPath(hdc);", "-\t\t\t\t\t\tOS.ScriptTextOut(hdc, run.psc, drawX, drawRunY, 0, null, run.analysis , 0, 0, run.glyphs, run.glyphCount, run.advances, run.justify, run.goffsets);", "-\t\t\t\t\t\tOS.EndPath(hdc);", "-\t\t\t\t\t\tint count = OS.GetPath(hdc, null, null, 0);", "-\t\t\t\t\t\tint[] points = new int[count*2];", "-\t\t\t\t\t\tbyte[] types = new byte[count];", "-\t\t\t\t\t\tOS.GetPath(hdc, points, types, count);", "-\t\t\t\t\t\tfor (int typeIndex = 0; typeIndex < types.length; typeIndex++) {", "-\t\t\t\t\t\t\tint newType = 0;", "-\t\t\t\t\t\t\tint type = types[typeIndex] & 0xFF;", "-\t\t\t\t\t\t\tswitch (type & ~OS.PT_CLOSEFIGURE) {", "-\t\t\t\t\t\t\t\tcase OS.PT_MOVETO: newType = Gdip.PathPointTypeStart; break;", "-\t\t\t\t\t\t\t\tcase OS.PT_LINETO: newType = Gdip.PathPointTypeLine; break;", "-\t\t\t\t\t\t\t\tcase OS.PT_BEZIERTO: newType = Gdip.PathPointTypeBezier; break;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif ((type & OS.PT_CLOSEFIGURE) != 0) newType |= Gdip.PathPointTypeCloseSubpath;", "-\t\t\t\t\t\t\ttypes[typeIndex] = (byte)newType;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tint /*long*/ path = Gdip.GraphicsPath_new(points, types, count, Gdip.FillModeAlternate);", "-\t\t\t\t\t\tif (path == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\t\t\tint drawRunY = drawY + baseline;", "-\t\t\t\t\t\tint antialias = Gdip.Graphics_GetSmoothingMode(gdipGraphics), textAntialias = 0;", "-\t\t\t\t\t\tint mode = Gdip.Graphics_GetTextRenderingHint(data.gdipGraphics);", "-\t\t\t\t\t\tswitch (mode) {", "-\t\t\t\t\t\t\tcase Gdip.TextRenderingHintSystemDefault: textAntialias = Gdip.SmoothingModeAntiAlias; break;", "-\t\t\t\t\t\t\tcase Gdip.TextRenderingHintSingleBitPerPixel:", "-\t\t\t\t\t\t\tcase Gdip.TextRenderingHintSingleBitPerPixelGridFit: textAntialias = Gdip.SmoothingModeNone; break;", "-\t\t\t\t\t\t\tcase Gdip.TextRenderingHintAntiAlias:", "-\t\t\t\t\t\t\tcase Gdip.TextRenderingHintAntiAliasGridFit:", "-\t\t\t\t\t\t\tcase Gdip.TextRenderingHintClearTypeGridFit: textAntialias = Gdip.SmoothingModeAntiAlias; break;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, textAntialias);", "+\t\t\t\t\t\tPointF pt = new PointF();", "+\t\t\t\t\t\tpt.X = drawX;", "+\t\t\t\t\t\tpt.Y = drawRunY;", "-\t\t\t\t\t\tGdip.Graphics_FillPath(gdipGraphics, brush, path);", "+\t\t\t\t\t\tif (hFont != lastHFont) {", "+\t\t\t\t\t\t\tlastHFont = hFont;", "+\t\t\t\t\t\t\tif (gdipFont != 0) Gdip.Font_delete(gdipFont);", "+\t\t\t\t\t\t\tgdipFont = GC.createGdipFont(hdc, hFont);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tGdip.Graphics_DrawDriverString(gdipGraphics, run.glyphs, run.glyphCount, gdipFont, brush, pt, Gdip.DriverStringOptionsRealizedAdvance, 0);", "-\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, antialias);", "-\t\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, textAntialias);", "-\t\t\t\t\t\t\tGdip.Graphics_FillPath(gdipGraphics, selBrushFg, path);", "+\t\t\t\t\t\t\tGdip.Graphics_DrawDriverString(gdipGraphics, run.glyphs, run.glyphCount, gdipFont, selBrushFg, pt, Gdip.DriverStringOptionsRealizedAdvance, 0);", "-\t\t\t\t\t\t\tGdip.Graphics_SetSmoothingMode(gdipGraphics, antialias);", "-\t\t\t\t\t\tGdip.GraphicsPath_delete(path);", "+\t\t\t\t\t\tint drawRunY = drawY + (baseline - run.ascent);", "+\t\tif (gdipFont != 0) Gdip.Font_delete(gdipFont);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e476a0c1da8caff5fb2759ca11fd2deb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "81a33fbed3eb272c93a82c3f5eae3c1f2166f25e", "commitAfterChange": "1bffcc668dddef37395056cc439e6737b02c5e67", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public Image (Device device, String filename)", "signatureAfterChange": " public Image (Device device, String filename)", "diff": ["+\t\t\tint transparentColor = -1;", "+\t\t\tint width = Gdip.Image_GetWidth(bitmap);", "+\t\t\tint height = Gdip.Image_GetHeight(bitmap);", "+\t\t\t\tthis.type = SWT.ICON;", "-\t\t\t\tthis.type = SWT.ICON;", "-\t\t\t\tif (this.handle == 0) {", "-\t\t\t\t\tGdip.Bitmap_delete(bitmap);", "-\t\t\t\t\tSWT.error(SWT.ERROR_INVALID_IMAGE);", "-\t\t\t\t}", "-\t\t\t\tint color = Gdip.Color_new(0);", "-\t\t\t\tif (color == 0) {", "-\t\t\t\t\tGdip.Bitmap_delete(bitmap);", "-\t\t\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\t\t}", "-\t\t\t\tint[] hBitmap = new int[1];", "-\t\t\t\tGdip.Bitmap_GetHBITMAP(bitmap, color, hBitmap);", "-\t\t\t\tthis.handle = hBitmap[0];", "-\t\t\t\tif (this.handle == 0) {", "-\t\t\t\t\tGdip.Bitmap_delete(bitmap);", "-\t\t\t\t\tGdip.Color_delete(color);", "-\t\t\t\t\tSWT.error(SWT.ERROR_INVALID_IMAGE);", "-\t\t\t\t}", "-\t\t\t\t\t\tif (lockedBitmapData == 0) {", "-\t\t\t\t\t\t\tGdip.Bitmap_delete(bitmap);", "-\t\t\t\t\t\t\tGdip.Color_delete(color);", "-\t\t\t\t\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (lockedBitmapData == 0) break;", "-\t\t\t\t\t\tint width = bitmapData.Width;", "-\t\t\t\t\t\tint height = bitmapData.Height;", "+\t\t\t\t\t\tthis.handle = createDIB(width, height, 32);", "-\t\t\t\t\t\tif (palette == 0) {", "-\t\t\t\t\t\t\tGdip.Bitmap_delete(bitmap);", "-\t\t\t\t\t\t\tGdip.Color_delete(color);", "-\t\t\t\t\t\t\tSWT.error(SWT.ERROR_NO_HANDLES); ", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (palette == 0) break;", "-\t\t\t\t\t\tif ((colorPalette.Flags & Gdip.PaletteFlagsHasAlpha) != 0) { ", "-\t\t\t\t\t\t\tint[] entries = new int[colorPalette.Count];", "-\t\t\t\t\t\t\tOS.MoveMemory(entries, palette + 8, entries.length * 4);", "-\t\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++) {", "-\t\t\t\t\t\t\t\tif (((entries[i] >> 24) & 0xFF) == 0) {", "-\t\t\t\t\t\t\t\t\ttransparentPixel = i;", "+\t\t\t\t\t\tint[] entries = new int[colorPalette.Count];", "+\t\t\t\t\t\tOS.MoveMemory(entries, palette + 8, entries.length * 4);", "+\t\t\t\t\t\tOS.HeapFree(hHeap, 0, palette);", "+\t\t\t\t\t\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER();", "+\t\t\t\t\t\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;", "+\t\t\t\t\t\tbmiHeader.biWidth = width;", "+\t\t\t\t\t\tbmiHeader.biHeight = -height;", "+\t\t\t\t\t\tbmiHeader.biPlanes = 1;", "+\t\t\t\t\t\tbmiHeader.biBitCount = (short)8;", "+\t\t\t\t\t\tbmiHeader.biCompression = OS.BI_RGB;", "+\t\t\t\t\t\tbyte[] bmi = new byte[BITMAPINFOHEADER.sizeof + colorPalette.Count * 4];", "+\t\t\t\t\t\tOS.MoveMemory(bmi, bmiHeader, BITMAPINFOHEADER.sizeof);\t\t\t\t\t", "+\t\t\t\t\t\tint offset = BITMAPINFOHEADER.sizeof;", "+\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++) {", "+\t\t\t\t\t\t\tif (((entries[i] >> 24) & 0xFF) == 0 && (colorPalette.Flags & Gdip.PaletteFlagsHasAlpha) != 0) {", "+\t\t\t\t\t\t\t\ttransparentPixel = i;", "+\t\t\t\t\t\t\t\ttransparentColor = entries[i] & 0xFFFFFF;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbmi[offset] = (byte)((entries[i] & 0xFF) >> 0);", "+\t\t\t\t\t\t\tbmi[offset + 1] = (byte)((entries[i] & 0xFF00) >> 8);", "+\t\t\t\t\t\t\tbmi[offset + 2] = (byte)((entries[i] & 0xFF0000) >> 16);", "+\t\t\t\t\t\t\tbmi[offset + 3] = 0;", "+\t\t\t\t\t\t\toffset += 4;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint[] pBits = new int[1];", "+\t\t\t\t\t\tthis.handle = OS.CreateDIBSection(0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);\t\t\t\t\t\t", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Gdip.PixelFormat16bppGrayScale:", "+\t\t\t\t\tcase Gdip.PixelFormat16bppRGB555:", "+\t\t\t\t\tcase Gdip.PixelFormat16bppRGB565:", "+\t\t\t\t\t\tthis.handle = createDIB(width, height, 16);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Gdip.PixelFormat24bppRGB:", "+\t\t\t\t\t\tthis.handle = createDIB(width, height, 24);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tthis.handle = createDIB(width, height, 32);", "+\t\t\t\t}", "+\t\t\t\tif (handle != 0) {", "+\t\t\t\t\tint hDC = device.internal_new_GC(null);", "+\t\t\t\t\tint srcHDC = OS.CreateCompatibleDC(hDC);", "+\t\t\t\t\tint oldSrcBitmap = OS.SelectObject(srcHDC, handle);", "+\t\t\t\t\tint graphics = Gdip.Graphics_new(srcHDC);", "+\t\t\t\t\tif (graphics != 0) {\t\t\t\t\t\t", "+\t\t\t\t\t\tif (transparentColor != -1) {", "+\t\t\t\t\t\t\tint color = Gdip.Color_new(transparentColor | 0xFF000000);", "+\t\t\t\t\t\t\tif (color != 0) {", "+\t\t\t\t\t\t\t\tint brush = Gdip.SolidBrush_new(color);", "+\t\t\t\t\t\t\t\tif (brush != 0) {", "+\t\t\t\t\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, 0, 0, width, height);", "+\t\t\t\t\t\t\t\t\tGdip.SolidBrush_delete(brush);", "+\t\t\t\t\t\t\t\tGdip.Color_delete(color);", "-\t\t\t\t\t\tOS.HeapFree(hHeap, 0, palette);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}\t\t\t", "-\t\t\t\tGdip.Color_delete(color);", "+\t\t\t\t\t\tRect rect = new Rect();", "+\t\t\t\t\t\trect.Width = width;", "+\t\t\t\t\t\trect.Height = height;", "+\t\t\t\t\t\tGdip.Graphics_DrawImage(graphics, bitmap, rect, 0, 0, width, height, Gdip.UnitPixel, 0, 0, 0);", "+\t\t\t\t\t\tGdip.Graphics_delete(graphics);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.SelectObject(srcHDC, oldSrcBitmap);", "+\t\t\t\t\tOS.DeleteDC(srcHDC);", "+\t\t\t\t\tdevice.internal_dispose_GC(hDC, null);", "+\t\t\t\t}", "-\t\t\tgdiPlus = true;", "+\t\t\tif (handle == 0) SWT.error(SWT.ERROR_NO_HANDLES);"]}], "num": 25080}
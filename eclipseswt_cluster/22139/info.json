{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e0f32cdb7837065a55b553d4fc6395e1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec32c65017b19cc9a88183f74782fd44", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "4e26a427ac42e69f96956a4289fb585a800b6717", "commitAfterChange": "c2b86fdf9049f110bf26f3d531b6cb6b5755b030", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 96, "signatureBeforeChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "diff": ["-\t\t\t\tif (column != null && !column.getResizable ()) {", "+\t\t\t\tif (column == null || !column.getResizable ()) {", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.HDN_BEGINDRAG: {", "+\t\t\t\tNMHEADER phdn = new NMHEADER ();", "+\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "+\t\t\t\tif (phdn.iItem != -1) {", "+\t\t\t\t\tTableColumn column = columns [phdn.iItem];", "+\t\t\t\t\tif (column == null || !column.getMoveable ()) {", "+\t\t\t\t\t\tOS.ReleaseCapture ();", "+\t\t\t\t\t\treturn LRESULT.ONE;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.HDN_ENDDRAG: {", "+\t\t\t\tNMHEADER phdn = new NMHEADER ();", "+\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "+\t\t\t\tif (phdn.iItem != -1 && phdn.pitem != 0) {", "+\t\t\t\t\tHDITEM pitem = new HDITEM ();", "+\t\t\t\t\tOS.MoveMemory (pitem, phdn.pitem, HDITEM.sizeof);", "+\t\t\t\t\tif ((pitem.mask & OS.HDI_ORDER) != 0 && pitem.iOrder != -1) {", "+\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\tif (count == 1 && columns [0] == null) break;", "+\t\t\t\t\t\tint [] order = new int [count];", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_GETCOLUMNORDERARRAY, count, order);", "+\t\t\t\t\t\tint index = 0;", "+\t\t\t\t\t\twhile (index < order.length) {", "+\t\t\t\t\t\t \tif (order [index] == phdn.iItem) break;", "+\t\t\t\t\t\t\tindex++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (index == order.length) index = 0;", "+\t\t\t\t\t\tif (index == pitem.iOrder) break;", "+\t\t\t\t\t\tint start = Math.min (index, pitem.iOrder);", "+\t\t\t\t\t\tint end = Math.max (index, pitem.iOrder);", "+\t\t\t\t\t\tfor (int i=start; i<=end; i++) {", "+\t\t\t\t\t\t\tTableColumn column = columns [order [i]];", "+\t\t\t\t\t\t\tif (!column.isDisposed ()) {", "+\t\t\t\t\t\t\t\tcolumn.postEvent (SWT.Move);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tfor (int i=phdn.iItem+1; i<count; i++) {", "-\t\t\t\t\t\t\t\t\tif (!newColumns [i].isDisposed ()) {", "-\t\t\t\t\t\t\t\t\t\tnewColumns [i].sendEvent (SWT.Move);", "+\t\t\t\t\t\t\t\tint [] order = new int [count];", "+\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_GETCOLUMNORDERARRAY, count, order);", "+\t\t\t\t\t\t\t\tboolean moved = false;", "+\t\t\t\t\t\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\t\t\t\t\t\tTableColumn nextColumn = newColumns [order [i]];", "+\t\t\t\t\t\t\t\t\tif (moved && !nextColumn.isDisposed ()) {", "+\t\t\t\t\t\t\t\t\t\tnextColumn.sendEvent (SWT.Move);", "+\t\t\t\t\t\t\t\t\tif (nextColumn == column) moved = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcf221b0f5701488f41597f90de1fcd1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "e139d0ab76ea26e5296ceee7a81cdb4cd23f3694", "commitAfterChange": "bbce5172d2d0d10dab8588aa51fcb94c0df57391", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 92, "signatureBeforeChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "diff": ["+\t\t\tcase OS.NM_RELEASEDCAPTURE:", "+\t\t\t\tcancelMove = false;", "+\t\t\t\tbreak;", "+\t\t\tcase OS.HDN_BEGINDRAG: {", "+\t\t\t\tif (cancelMove) return LRESULT.ONE;", "+\t\t\t\tNMHEADER phdn = new NMHEADER ();", "+\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "+\t\t\t\tif (phdn.iItem == 0) {", "+\t\t\t\t\tcancelMove = true;", "+\t\t\t\t\treturn LRESULT.ONE;", "+\t\t\t\t}", "+\t\t\t\tif (phdn.iItem != -1) {", "+\t\t\t\t\tTreeColumn column = columns [phdn.iItem];", "+\t\t\t\t\tif (column != null && !column.getMoveable ()) {", "+\t\t\t\t\t\tcancelMove = true;", "+\t\t\t\t\t\treturn LRESULT.ONE;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.HDN_ENDDRAG: {", "+\t\t\t\tcancelMove = false;", "+\t\t\t\tNMHEADER phdn = new NMHEADER ();", "+\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "+\t\t\t\tif (phdn.iItem != -1 && phdn.pitem != 0) {", "+\t\t\t\t\tHDITEM pitem = new HDITEM ();", "+\t\t\t\t\tOS.MoveMemory (pitem, phdn.pitem, HDITEM.sizeof);", "+\t\t\t\t\tif ((pitem.mask & OS.HDI_ORDER) != 0 && pitem.iOrder != -1) {", "+\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\tint [] order = new int [count];", "+\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETORDERARRAY, count, order);", "+\t\t\t\t\t\tint index = 0;", "+\t\t\t\t\t\twhile (index < order.length) {", "+\t\t\t\t\t\t \tif (order [index] == phdn.iItem) break;", "+\t\t\t\t\t\t\tindex++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (index == order.length) index = 0;", "+\t\t\t\t\t\tif (index == pitem.iOrder) break;", "+\t\t\t\t\t\tint start = Math.min (index, pitem.iOrder);", "+\t\t\t\t\t\tif (start == 0) return LRESULT.ONE;", "+\t\t\t\t\t\tint end = Math.max (index, pitem.iOrder);", "+\t\t\t\t\t\tRECT rect = new RECT (), itemRect = new RECT ();", "+\t\t\t\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, order [start], itemRect);", "+\t\t\t\t\t\trect.left = Math.max (rect.left, itemRect.left);", "+\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, order [end], itemRect);", "+\t\t\t\t\t\trect.right = Math.min (rect.right, itemRect.right);", "+\t\t\t\t\t\tOS.InvalidateRect (handle, rect, true);", "+\t\t\t\t\t\tfor (int i=start; i<=end; i++) {", "+\t\t\t\t\t\t\tTreeColumn column = columns [order [i]];", "+\t\t\t\t\t\t\tif (!column.isDisposed ()) {", "+\t\t\t\t\t\t\t\tcolumn.postEvent (SWT.Move);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "-\t\t\t\t\t\tif (phdn.iItem < count - 1) {", "-\t\t\t\t\t\t\tfor (int i=phdn.iItem; i<count; i++) {", "-\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, i, itemRect);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\trect.right = itemRect.right;", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tint index = OS.SendMessage (hwndHeader, OS.HDM_ORDERTOINDEX, count - 1, 0);", "+\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, index, itemRect);", "+\t\t\t\t\t\trect.right = itemRect.right;", "-\t\t\t\t\t\t\tfor (int i=phdn.iItem+1; i<count; i++) {", "-\t\t\t\t\t\t\t\tif (!newColumns [i].isDisposed ()) {", "-\t\t\t\t\t\t\t\t\tnewColumns [i].sendEvent (SWT.Move);", "+\t\t\t\t\t\t\tint [] order = new int [count];", "+\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETORDERARRAY, count, order);", "+\t\t\t\t\t\t\tboolean moved = false;", "+\t\t\t\t\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\t\t\t\t\tTreeColumn nextColumn = newColumns [order [i]];", "+\t\t\t\t\t\t\t\tif (moved && !nextColumn.isDisposed ()) {", "+\t\t\t\t\t\t\t\t\tnextColumn.sendEvent (SWT.Move);", "+\t\t\t\t\t\t\t\tif (nextColumn == column) moved = true;"]}], "num": 22139}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d7be18cbd9e11abc06f40ccd59927592", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4158ae876c0844626bc322a2cf781bff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 68, "signatureBeforeChange": "  \tstatic int atkText_get_n_selections (int atkObject)", "signatureAfterChange": "  \tstatic int atkText_get_n_selections (int atkObject)", "diff": ["-\t\tif (object == null) return 0;", "-\t\tint /*long*/ parentResult = 0;", "-\t\tif (ATK.g_type_is_a (object.parentType, ATK_TEXT_TYPE)) {", "-\t\t\tint /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (object.handle));", "-\t\t\tAtkTextIface textIface = new AtkTextIface ();", "-\t\t\tATK.memmove (textIface, superType);", "-\t\t\tif (textIface.get_n_selections != 0) {", "-\t\t\t\tparentResult = ATK.call (textIface.get_n_selections, object.handle);", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleTextExtendedListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleTextExtendedEvent event = new AccessibleTextExtendedEvent(accessible);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getSelectionCount (event);", "+\t\t\t\t}", "+\t\t\t\treturn event.count;", "+\t\t\t}", "+\t\t\tlisteners = accessible.accessibleTextListeners;", "+\t\t\tlength = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleTextEvent event = new AccessibleTextEvent (object.accessible);", "+\t\t\t\tevent.childID = object.id;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleTextListener listener = (AccessibleTextListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getSelectionRange (event);", "+\t\t\t\t}", "+\t\t\t\tif (event.length > 0) return 1;", "-\t\tAccessibleTextListener[] listeners = object.getTextListeners ();", "-\t\tif (listeners.length == 0) return parentResult;", "-", "-\t\tAccessibleTextEvent event = new AccessibleTextEvent (object.accessible);", "-\t\tevent.childID = object.id;", "-\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\tlisteners [i].getSelectionRange (event);", "+\t\tint /*long*/ parentResult = 0;", "+\t\tAtkTextIface iface = getTextIface (atkObject);", "+\t\tif (iface != null && iface.get_n_selections != 0) {", "+\t\t\tparentResult = ATK.call (iface.get_n_selections, atkObject);", "-\t\treturn event.length == 0 ? parentResult : 1;", "+\t\treturn parentResult;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a789b04f73430db66dd610adaae38591", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 64, "signatureBeforeChange": "  \tstatic int atkText_get_caret_offset (int atkObject)", "signatureAfterChange": "  \tstatic int atkText_get_caret_offset (int atkObject)", "diff": ["-\t\tif (object == null) return 0;", "-\t\tif (ATK.g_type_is_a (object.parentType, ATK_TEXT_TYPE)) {", "-\t\t\tint /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (object.handle));", "-\t\t\tAtkTextIface textIface = new AtkTextIface ();", "-\t\t\tATK.memmove (textIface, superType);", "-\t\t\tif (textIface.get_caret_offset != 0) {", "-\t\t\t\tparentResult = ATK.call (textIface.get_caret_offset, object.handle);", "+\t\tAtkTextIface iface = getTextIface (atkObject);", "+\t\tif (iface != null && iface.get_caret_offset != 0) {", "+\t\t\tparentResult = ATK.call (iface.get_caret_offset, atkObject);", "+\t\t}", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleTextExtendedListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleTextExtendedEvent event = new AccessibleTextExtendedEvent(accessible);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getCaretOffset (event);", "+\t\t\t\t}", "+\t\t\t\treturn event.offset;", "+\t\t\t}", "+\t\t\tlisteners = accessible.accessibleTextListeners;", "+\t\t\tlength = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleTextEvent event = new AccessibleTextEvent (object.accessible);", "+\t\t\t\tevent.childID = object.id;", "+\t\t\t\tevent.offset = (int)/*64*/parentResult;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleTextListener listener = (AccessibleTextListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getCaretOffset (event);\t", "+\t\t\t\t}", "+\t\t\t\treturn event.offset;", "-\t\tAccessibleTextListener[] listeners = object.getTextListeners ();", "-\t\tif (listeners.length == 0) return parentResult;", "-\t\t", "-\t\tAccessibleTextEvent event = new AccessibleTextEvent (object.accessible);", "-\t\tevent.childID = object.id;", "-\t\tevent.offset = (int)/*64*/parentResult;", "-\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\tlisteners [i].getCaretOffset (event);\t", "-\t\t} ", "-\t\treturn event.offset; \t", "+\t\treturn parentResult; \t", "+\t}"]}], "num": 5057}
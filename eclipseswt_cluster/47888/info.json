{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69145cc5ee7d8afd5a1005a90f3ac933", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14733053c8fabecce8e35f5cf98f3a87", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/datetime/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "3ad00be6ef9afe7e6df47f83d131078944dc4ce5", "commitAfterChange": "12e57250d90eb2f3108d26c9c27544dd5c3b66df", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  void handleVerify(Event event)", "signatureAfterChange": "  void handleVerify(Event event)", "diff": ["+\tboolean notify = false;", "+\tint back = 0;", "-\t\tif (event.character == '\\b') {", "-\t\t\tfor (int i = start; i < event.end; i++) {", "-\t\t\t\tswitch (i) {", "-\t\t\t\t\tcase MONTH:", "-\t\t\t\t\tcase MONTH+1:", "-\t\t\t\t\tcase DAY:", "-\t\t\t\t\tcase DAY+1:", "-\t\t\t\t\tcase YEAR:", "-\t\t\t\t\tcase YEAR+1:", "-\t\t\t\t\tcase YEAR+2:", "-\t\t\t\t\tcase YEAR+3: {", "-\t\t\t\t\t\tbuffer.append(' '); break;", "-\t\t\t\t\t}", "-\t\t\t\t\tcase SL1:", "-\t\t\t\t\tcase SL2: {", "-\t\t\t\t\t\tbuffer.append('/'); break;", "-\t\t\t\t\t}", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\ttext.setSelection(start, start + buffer.length());", "-\t\t\tignore = true;", "-\t\t\ttext.insert(buffer.toString());", "-\t\t\tignore = false;", "-\t\t\ttext.setSelection(start, start);", "-\t\t\treturn;", "-\t\t}", "-\t", "-\t\t\t\tif (chars[i] == '/') {", "-\t\t\t\t\tindex++;", "-\t\t\t\t\tcontinue;", "+\t\t\t\tif (chars[i] != '/') {", "+\t\t\t\t\tbuffer.insert(index, '/');", "-\t\t\t\tbuffer.insert(index++, '/');", "+\t\t\t\tindex++;", "+\t\t\t\tcontinue;", "-\t\t\tif (chars[i] < '0' || '9' < chars[i]) return;", "-\t\t\tif (start + index == MONTH &&  '1' < chars[i]) return;", "-\t\t\tif (start + index == DAY &&  '3' < chars[i]) return;", "+\t\t\tif (chars[i] < '0' || chars[i] > '9') return;", "+\t\t\tif (start + index == MONTH && chars[i] > '1') return;", "+\t\t\tif (start + index == DAY && chars[i] > '3') return;", "+", "-\t\tif (yyyy.indexOf(' ') == -1) {", "-\t\t\tint year = Integer.parseInt(yyyy);", "+\t\tint year = Integer.parseInt(yyyy);", "+\t\tif (calendar.get(Calendar.YEAR) != year) {", "+\t\t\tnotify = true;", "-\t\tif (mm.indexOf(' ') == -1) {", "-\t\t\tint month = Integer.parseInt(mm) - 1;", "-\t\t\tint maxMonth = calendar.getActualMaximum(Calendar.MONTH);", "-\t\t\tif (0 > month || month > maxMonth) return;", "+\t\tint month = Integer.parseInt(mm) - 1;", "+\t\tint maxMonth = calendar.getActualMaximum(Calendar.MONTH);", "+\t\tif (month < 0) return;", "+\t\tif (month > maxMonth) {", "+\t\t\tif (start + length - 1 == MONTH) {", "+\t\t\t\tnewText += \"0\";", "+\t\t\t\tlength = newText.length();", "+\t\t\t\tback = 1;", "+\t\t\t} else return;", "+\t\t}", "+\t\tif (calendar.get(Calendar.MONTH) != month) {", "+\t\t\tnotify = true;", "-\t\tif (dd.indexOf(' ') == -1) {", "-\t\t\tint day = Integer.parseInt(dd);", "-\t\t\tint maxDay = calendar.getActualMaximum(Calendar.DATE);", "-\t\t\tif (1 > day || day > maxDay) return;", "+\t\tint day = Integer.parseInt(dd);", "+\t\tint maxDay = calendar.getActualMaximum(Calendar.DATE);", "+\t\tif (day < 1) return;", "+\t\tif (day > maxDay)  {", "+\t\t\tif (start + length - 1 == DAY) {", "+\t\t\t\tnewText += \"0\";", "+\t\t\t\tlength = newText.length();", "+\t\t\t\tback = 1;", "+\t\t\t} else return;", "+\t\t}", "+\t\tif (calendar.get(Calendar.DATE) != day) {", "-\t\t} else {", "-\t\t\tif (calendar.get(Calendar.MONTH) == Calendar.FEBRUARY) {", "-\t\t\t\tchar firstChar = date.charAt(DAY);", "-\t\t\t\tif (firstChar != ' ' && '2' < firstChar) return;", "-\t\t\t}", "+\t\t\tnotify = true;", "-\t\tif (event.character == '\\b') {", "-\t\t\tfor (int i = start; i < event.end; i++) {", "-\t\t\t\tswitch (i) {", "-\t\t\t\t\tcase HOURS:", "-\t\t\t\t\tcase HOURS+1:", "-\t\t\t\t\tcase MINUTES:", "-\t\t\t\t\tcase MINUTES+1:", "-\t\t\t\t\tcase SECONDS:", "-\t\t\t\t\tcase SECONDS+1: {", "-\t\t\t\t\t\tbuffer.append(' '); break;", "-\t\t\t\t\t}", "-\t\t\t\t\tcase COLON1:", "-\t\t\t\t\tcase COLON2: {", "-\t\t\t\t\t\tbuffer.append(':'); break;", "-\t\t\t\t\t}", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\treturn;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\ttext.setSelection(start, start + buffer.length());", "-\t\t\tignore = true;", "-\t\t\ttext.insert(buffer.toString());", "-\t\t\tignore = false;", "-\t\t\ttext.setSelection(start, start);", "-\t\t\treturn;", "-\t\t}", "-\t", "-\t\t\tif (chars[i] < '0' || '9' < chars[i]) return;", "-\t\t\tif (start + index == HOURS &&  '1' < chars[i]) return;", "-\t\t\tif (start + index == MINUTES &&  '5' < chars[i]) return;", "-\t\t\tif (start + index == SECONDS &&  '5' < chars[i]) return;", "+\t\t\tif (chars[i] < '0' || chars[i] > '9') return;", "+\t\t\tif (start + index == HOURS && chars[i] > '1') return;", "+\t\t\tif (start + index == MINUTES && chars[i] > '5') return;", "+\t\t\tif (start + index == SECONDS && chars[i] > '5') return;", "+", "-\t\tif (hh.indexOf(' ') == -1) {", "-\t\t\tint hour = Integer.parseInt(hh);", "-\t\t\tint maxHour = calendar.getActualMaximum(Calendar.HOUR);", "-\t\t\tif (0 > hour || hour > maxHour) return;", "+\t\tint hour = Integer.parseInt(hh);", "+\t\tint maxHour = calendar.getActualMaximum(Calendar.HOUR);", "+\t\tif (0 > hour || hour > maxHour) return;", "+\t\tif (calendar.get(Calendar.HOUR) != hour) {", "+\t\t\tnotify = true;", "-\t\tif (mm.indexOf(' ') == -1) {", "-\t\t\tint minute = Integer.parseInt(mm);", "-\t\t\tint maxMinute = calendar.getActualMaximum(Calendar.MINUTE);", "-\t\t\tif (0 > minute || minute > maxMinute) return;", "+\t\tint minute = Integer.parseInt(mm);", "+\t\tint maxMinute = calendar.getActualMaximum(Calendar.MINUTE);", "+\t\tif (0 > minute || minute > maxMinute) return;", "+\t\tif (calendar.get(Calendar.MINUTE) != minute) {", "+\t\t\tnotify = true;", "-\t\tif (ss.indexOf(' ') == -1) {", "-\t\t\tint second = Integer.parseInt(ss);", "-\t\t\tint maxSec = calendar.getActualMaximum(Calendar.SECOND);", "-\t\t\tif (0 > second || second > maxSec) return;", "+\t\tint second = Integer.parseInt(ss);", "+\t\tint maxSec = calendar.getActualMaximum(Calendar.SECOND);", "+\t\tif (0 > second || second > maxSec) return;", "+\t\tif (calendar.get(Calendar.SECOND) != second) {", "+\t\t\tnotify = true;", "-\t\tif (ap.equalsIgnoreCase(\"AM\")) {", "-\t\t\tcalendar.set(Calendar.AM_PM, Calendar.AM);", "-\t\t} else if (ap.equalsIgnoreCase(\"PM\")) {", "-\t\t\tcalendar.set(Calendar.AM_PM, Calendar.PM);", "+\t\tif (ap.equals(\"AM\")) {", "+\t\t\tif (calendar.get(Calendar.AM_PM) != Calendar.AM) {", "+\t\t\t\tcalendar.set(Calendar.AM_PM, Calendar.AM);", "+\t\t\t\tnotify = true;", "+\t\t\t}", "+\t\t} else if (ap.equals(\"PM\")) {", "+\t\t\tif (calendar.get(Calendar.AM_PM) != Calendar.PM) {", "+\t\t\t\tcalendar.set(Calendar.AM_PM, Calendar.PM);", "+\t\t\t\tnotify = true;", "+\t\t\t}", "+\tif (back > 0) text.setSelection(start + length - back);", "+\tif (notify) notifyListeners(SWT.Selection, new Event());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a845ddf4606f1e73b9cbab6570001236", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "bc758c225d19e22ecd3b5ea6361b2b81fe9d63e4", "commitAfterChange": "876ed09a49de9fd074ee75d74aaa5be9ca7961f3", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void init(Device device, ImageData image)", "signatureAfterChange": "  void init(Device device, ImageData image)", "diff": ["-\tif (palette.isDirect) {", "-\t\tint redMask = palette.redMask;", "-\t\tint greenMask = palette.greenMask;", "-\t\tint blueMask = palette.blueMask;", "-\t\tint redShift = palette.redShift;", "-\t\tint greenShift = palette.greenShift;", "-\t\tint blueShift = palette.blueShift;", "-\t\tint[] pixels = new int[width];", "-\t\tbyte[] rgbPixels = new byte[stride];", "-\t\tfor (int y=0; y<height; y++) {", "-\t\t\timage.getPixels(0, y, width, pixels, 0);", "-\t\t\tfor (int x=0; x<width; x++) {", "-\t\t\t\tint pixel = pixels[x];", "-\t\t\t\tint offset = x*3;", "-\t\t\t\tint r = pixel & redMask;", "-\t\t\t\tr = (redShift < 0) ? r >>> -redShift : r << redShift;", "-\t\t\t\tint g = pixel & greenMask;", "-\t\t\t\tg = (greenShift < 0) ? g >>> -greenShift : g << greenShift;", "-\t\t\t\tint b = pixel & blueMask;", "-\t\t\t\tb = (blueShift < 0) ? b >>> -blueShift : b << blueShift;", "-\t\t\t\trgbPixels[offset] = (byte)r;", "-\t\t\t\trgbPixels[offset + 1] = (byte)g;", "-\t\t\t\trgbPixels[offset + 2] = (byte)b;", "+\tbyte[] buffer = image.data;", "+\tif (!palette.isDirect || image.depth != 24 || stride != image.bytesPerLine || palette.redMask != 0xFF0000 || palette.greenMask != 0xFF00 || palette.blueMask != 0xFF) {", "+\t\tbuffer = new byte[stride * height];", "+\t\tif (palette.isDirect) {", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,", "+\t\t\t\timage.data, image.depth, image.bytesPerLine, image.getByteOrder(), 0, 0, width, height, palette.redMask, palette.greenMask, palette.blueMask,", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0, 0, 0, ", "+\t\t\t\tbuffer, 24, stride, ImageData.MSB_FIRST, 0, 0, width, height, 0xFF0000, 0xFF00, 0xFF,", "+\t\t\t\tfalse, false);", "+\t\t} else {", "+\t\t\tRGB[] rgbs = palette.getRGBs();", "+\t\t\tint length = rgbs.length;", "+\t\t\tbyte[] srcReds = new byte[length];", "+\t\t\tbyte[] srcGreens = new byte[length];", "+\t\t\tbyte[] srcBlues = new byte[length];", "+\t\t\tfor (int i = 0; i < rgbs.length; i++) {", "+\t\t\t\tRGB rgb = rgbs[i];", "+\t\t\t\tif (rgb == null) continue;", "+\t\t\t\tsrcReds[i] = (byte)rgb.red;", "+\t\t\t\tsrcGreens[i] = (byte)rgb.green;", "+\t\t\t\tsrcBlues[i] = (byte)rgb.blue;", "-\t\t\tOS.memmove(data + (stride * y), rgbPixels, rgbPixels.length);", "-\t\t}", "-\t} else {", "-\t\tRGB[] rgbs = palette.colors;", "-\t\tbyte[] pixels = new byte[width];", "-\t\tbyte[] rgbPixels = new byte[stride];", "-\t\tfor (int y=0; y<height; y++) {", "-\t\t\timage.getPixels(0, y, width, pixels, 0);", "-\t\t\tfor (int x=0; x<width; x++) {", "-\t\t\t\tint pixel = pixels[x] & 0xFF;", "-\t\t\t\tint r = 0, g = 0, b = 0;", "-\t\t\t\tif (pixel < rgbs.length) {", "-\t\t\t\t\tRGB rgb = rgbs[pixel];", "-\t\t\t\t\tr = rgb.red; g = rgb.green; b = rgb.blue;", "-\t\t\t\t}", "-\t\t\t\tint offset = x*3;", "-\t\t\t\trgbPixels[offset] = (byte)r;", "-\t\t\t\trgbPixels[offset + 1] = (byte)g;", "-\t\t\t\trgbPixels[offset + 2] = (byte)b;", "-\t\t\t}", "-\t\t\tOS.memmove(data + (stride * y), rgbPixels, rgbPixels.length);", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,", "+\t\t\t\timage.data, image.depth, image.bytesPerLine, image.getByteOrder(), 0, 0, width, height, srcReds, srcGreens, srcBlues,", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0, 0, 0,", "+\t\t\t\tbuffer, 24, stride, ImageData.MSB_FIRST, 0, 0, width, height, 0xFF0000, 0xFF00, 0xFF,", "+\t\t\t\tfalse, false);", "+\tOS.memmove(data, buffer, buffer.length);"]}], "num": 47888}
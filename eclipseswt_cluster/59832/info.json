{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4fad0a35b10ea18048e6aaa519502eb3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1abe72ea553008b2f9600053a7d575cb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "43ee3cd65e777c40c761a2f3a1a5415a5f8a9395", "commitAfterChange": "b7f7c448259cadc9bad115ecfa71bc0192a2b79d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public boolean open ()", "signatureAfterChange": " public boolean open ()", "diff": ["+\t\t\t\t\tRectangle [] rectsToErase = new Rectangle [rectangles.length];", "+\t\t\t\t\tfor (int i = 0; i < rectangles.length; i++) {", "+\t\t\t\t\t\tRectangle current = rectangles [i];", "+\t\t\t\t\t\trectsToErase [i] = new Rectangle (current.x, current.y, current.width, current.height);", "+\t\t\t\t\t}", "+\t\t\t\t\t\tresizeRectangles (newX [0] - oldX [0], newY [0] - oldY [0]);", "+\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t * happens then use these new rectangles instead of", "-\t\t\t\t\t\t * recomputing them based on the last mouse move, and", "-\t\t\t\t\t\t * only erase the tracker if the rectangles have changed.", "+\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "+\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t\tboolean changed = false;", "-\t\t\t\t\t\t\tif (length != oldRectangles.length) {", "-\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "+\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (oldRectangles [i])) {", "-\t\t\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "+\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\tif (changed) {", "-\t\t\t\t\t\t\t\tdrawRectangles (oldRectangles);", "-\t\t\t\t\t\t\t\tdrawRectangles (rectangles);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tdrawRectangles (oldRectangles);", "-\t\t\t\t\t\t\tresizeRectangles (newX [0] - oldX [0], newY [0] - oldY [0]);", "+\t\t\t\t\t\t\tdraw = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (draw) {", "+\t\t\t\t\t\t\tdrawRectangles (rectsToErase);", "+\t\t\t\t\t\tmoveRectangles (newX [0] - oldX [0], newY [0] - oldY [0]);", "+\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t * happens then use these new rectangles instead of", "-\t\t\t\t\t\t * recomputing them based on the last mouse move, and", "-\t\t\t\t\t\t * only erase the tracker if the rectangles have changed.", "+\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "+\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t\tboolean changed = false;", "-\t\t\t\t\t\t\tif (length != oldRectangles.length) {", "-\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "+\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (oldRectangles [i])) {", "-\t\t\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "+\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\tif (changed) {", "-\t\t\t\t\t\t\t\tdrawRectangles (oldRectangles);", "-\t\t\t\t\t\t\t\tdrawRectangles (rectangles);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tdrawRectangles (oldRectangles);", "-\t\t\t\t\t\t\tmoveRectangles (newX [0] - oldX [0], newY [0] - oldY [0]);", "+\t\t\t\t\t\t\tdraw = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (draw) {", "+\t\t\t\t\t\t\tdrawRectangles (rectsToErase);", "+\t\t\t\t\t\tRectangle [] rectsToErase = new Rectangle [rectangles.length];", "+\t\t\t\t\t\tfor (int i = 0; i < rectangles.length; i++) {", "+\t\t\t\t\t\t\tRectangle current = rectangles [i];", "+\t\t\t\t\t\t\trectsToErase [i] = new Rectangle (current.x, current.y, current.width, current.height);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tresizeRectangles (xChange, yChange);", "+\t\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t\t * happens then use these new rectangles instead of", "-\t\t\t\t\t\t\t * recomputing them based on the last mouse move, and", "-\t\t\t\t\t\t\t * only erase the tracker if the rectangles have changed.", "+\t\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "+\t\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t\t\tboolean changed = false;", "-\t\t\t\t\t\t\t\tif (length != oldRectangles.length) {", "-\t\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "+\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (oldRectangles [i])) {", "-\t\t\t\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "+\t\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\tif (changed) {", "-\t\t\t\t\t\t\t\t\tdrawRectangles (oldRectangles);", "-\t\t\t\t\t\t\t\t\tdrawRectangles (rectangles);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tdrawRectangles (oldRectangles);", "-\t\t\t\t\t\t\t\tresizeRectangles (xChange, yChange);", "+\t\t\t\t\t\t\t\tdraw = true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (draw) {", "+\t\t\t\t\t\t\t\tdrawRectangles (rectsToErase);", "+\t\t\t\t\t\t\tmoveRectangles (xChange, yChange);", "+\t\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t\t * happens then use these new rectangles instead of", "-\t\t\t\t\t\t\t * recomputing them based on the last mouse move, and", "-\t\t\t\t\t\t\t * only erase the tracker if the rectangles have changed.", "+\t\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "+\t\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t\t\tboolean changed = false;", "-\t\t\t\t\t\t\t\tif (length != oldRectangles.length) {", "-\t\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "+\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (oldRectangles [i])) {", "-\t\t\t\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "+\t\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\tif (changed) {", "-\t\t\t\t\t\t\t\t\tdrawRectangles (oldRectangles);", "-\t\t\t\t\t\t\t\t\tdrawRectangles (rectangles);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tdrawRectangles (oldRectangles);", "-\t\t\t\t\t\t\t\tmoveRectangles (xChange, yChange);", "+\t\t\t\t\t\t\t\tdraw = true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (draw) {", "+\t\t\t\t\t\t\t\tdrawRectangles (rectsToErase);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a0a01f64bf63eea09901b77fe467bd3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "a266116c437b42b07d995b8796efa9fee5663c92", "commitAfterChange": "43ee3cd65e777c40c761a2f3a1a5415a5f8a9395", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public boolean open ()", "signatureAfterChange": " public boolean open ()", "diff": ["+\t\t\t\t\tRectangle [] rectsToErase = new Rectangle [rectangles.length];", "+\t\t\t\t\tfor (int i = 0; i < rectangles.length; i++) {", "+\t\t\t\t\t\tRectangle current = rectangles [i];", "+\t\t\t\t\t\trectsToErase [i] = new Rectangle (current.x, current.y, current.width, current.height);", "+\t\t\t\t\t}", "+\t\t\t\t\t\tif (isMirrored) {", "+\t\t\t\t\t\t   resizeRectangles (oldX - newX, newY - oldY);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t   resizeRectangles (newX - oldX, newY - oldY);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t * happens then use these new rectangles instead of", "-\t\t\t\t\t\t * recomputing them based on the last mouse move, and", "-\t\t\t\t\t\t * only erase the tracker if the rectangles have changed.", "+\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "+\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t\tboolean changed = false;", "-\t\t\t\t\t\t\tif (length != oldRectangles.length) {", "-\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "+\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (oldRectangles [i])) {", "-\t\t\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "+\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (changed) {", "-\t\t\t\t\t\t\t\tdrawRectangles (oldRectangles);", "-\t\t\t\t\t\t\t\tdrawRectangles (rectangles);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tdrawRectangles (oldRectangles);", "-\t\t\t\t\t\t\tif (isMirrored) {", "-\t\t\t\t\t\t\t   resizeRectangles (oldX - newX, newY - oldY);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t   resizeRectangles (newX - oldX, newY - oldY);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\telse {", "+\t\t\t\t\t\t\tdraw = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (draw) {", "+\t\t\t\t\t\t\tdrawRectangles (rectsToErase);", "+\t\t\t\t\t\tif (isMirrored) {", "+\t\t\t\t\t\t\tmoveRectangles (oldX - newX, newY - oldY); ", "+\t\t\t\t\t\t} else { ", "+\t\t\t\t\t\t\tmoveRectangles (newX - oldX, newY - oldY);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t * happens then use these new rectangles instead of", "-\t\t\t\t\t\t * recomputing them based on the last mouse move, and", "-\t\t\t\t\t\t * only erase the tracker if the rectangles have changed.", "+\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "+\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t\tboolean changed = false;", "-\t\t\t\t\t\t\tif (length != oldRectangles.length) {", "-\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "+\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (oldRectangles [i])) {", "-\t\t\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "+\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\tif (changed) {", "-\t\t\t\t\t\t\t\tdrawRectangles (oldRectangles);", "-\t\t\t\t\t\t\t\tdrawRectangles (rectangles);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tdrawRectangles (oldRectangles);", "-\t\t\t\t\t\t\tif (isMirrored) {", "-\t\t\t\t\t\t\t\tmoveRectangles (oldX - newX, newY - oldY); ", "-\t\t\t\t\t\t\t} else { ", "-\t\t\t\t\t\t\t\tmoveRectangles (newX - oldX, newY - oldY);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tdraw = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (draw) {", "+\t\t\t\t\t\t\tdrawRectangles (rectsToErase);", "+\t\t\t\t\tRectangle [] rectsToErase = new Rectangle [rectangles.length];", "+\t\t\t\t\tfor (int i = 0; i < rectangles.length; i++) {", "+\t\t\t\t\t\tRectangle current = rectangles [i];", "+\t\t\t\t\t\trectsToErase [i] = new Rectangle (current.x, current.y, current.width, current.height);", "+\t\t\t\t\t}", "+\t\t\t\t\t\tresizeRectangles (xChange, yChange);", "+\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t * happens then use these new rectangles instead of", "-\t\t\t\t\t\t * recomputing them based on the last mouse move, and", "-\t\t\t\t\t\t * only erase the tracker if the rectangles have changed.", "+\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "+\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t\tboolean changed = false;", "-\t\t\t\t\t\t\tif (length != oldRectangles.length) {", "-\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "+\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (oldRectangles [i])) {", "-\t\t\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "+\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\tif (changed) {", "-\t\t\t\t\t\t\t\tdrawRectangles (oldRectangles);", "-\t\t\t\t\t\t\t\tdrawRectangles (rectangles);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tdrawRectangles (oldRectangles);", "-\t\t\t\t\t\t\tresizeRectangles (xChange, yChange);", "+\t\t\t\t\t\t\tdraw = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (draw) {", "+\t\t\t\t\t\t\tdrawRectangles (rectsToErase);", "+\t\t\t\t\t\tmoveRectangles (xChange, yChange);", "+\t\t\t\t\t\tboolean draw = false;", "-\t\t\t\t\t\t * happens then use these new rectangles instead of", "-\t\t\t\t\t\t * recomputing them based on the last mouse move, and", "-\t\t\t\t\t\t * only erase the tracker if the rectangles have changed.", "+\t\t\t\t\t\t * happens then only redraw the tracker if the rectangle", "+\t\t\t\t\t\t * values have changed.", "-\t\t\t\t\t\t\tboolean changed = false;", "-\t\t\t\t\t\t\tif (length != oldRectangles.length) {", "-\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\tif (length != rectsToErase.length) {", "+\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (oldRectangles [i])) {", "-\t\t\t\t\t\t\t\t\t\tchanged = true;", "+\t\t\t\t\t\t\t\t\tif (!rectangles [i].equals (rectsToErase [i])) {", "+\t\t\t\t\t\t\t\t\t\tdraw = true;", "-\t\t\t\t\t\t\tif (changed) {", "-\t\t\t\t\t\t\t\tdrawRectangles (oldRectangles);", "-\t\t\t\t\t\t\t\tdrawRectangles (rectangles);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tdrawRectangles (oldRectangles);", "-\t\t\t\t\t\t\tmoveRectangles (xChange, yChange);", "+\t\t\t\t\t\t\tdraw = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (draw) {", "+\t\t\t\t\t\t\tdrawRectangles (rectsToErase);", "-\t\tnewProc.dispose();", "+\t\tnewProc.dispose ();"]}], "num": 59832}
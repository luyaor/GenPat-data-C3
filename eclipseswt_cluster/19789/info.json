{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f01181f58e547e4fdacaa6ebf29f3b15", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "122dfa910720b8b794516dfce58cce00", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "2c8a13d0df1694740c0af6220e23682b3ddd10de", "commitAfterChange": "056762a1d7c74e75bfac132d1e756819b6f3b39e", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "  public boolean setUrl(String url)", "signatureAfterChange": "  public boolean setUrl(String url, String postData, String[] headers)", "diff": ["-public boolean setUrl(String url) {", "+public boolean setUrl(String url, String postData, String[] headers) {", "-\tchar[] chars = new char[url.length()];", "-\turl.getChars(0, chars.length, chars, 0);", "-\tint str = OS.CFStringCreateWithCharacters(0, chars, chars.length);", "+\tint str = createNSString(url);", "-\t//request = [NSURLRequest requestWithURL:(NSURL*)inURL];", "-\tint request = Cocoa.objc_msgSend(Cocoa.C_NSURLRequest, Cocoa.S_requestWithURL, inURL);", "+\tint request = Cocoa.objc_msgSend(Cocoa.C_NSMutableURLRequest, Cocoa.S_requestWithURL, inURL);", "-\t//mainFrame = [webView mainFrame];", "+\tif (postData != null) {", "+\t\tint post = createNSString(POST);", "+\t\tCocoa.objc_msgSend(request, Cocoa.S_setHTTPMethod, post);", "+\t\tOS.CFRelease (post);", "+\t\tbyte[] bytes = postData.getBytes();", "+\t\tint data = Cocoa.objc_msgSend(Cocoa.C_NSData, Cocoa.S_dataWithBytes, bytes, bytes.length);", "+\t\tCocoa.objc_msgSend(request, Cocoa.S_setHTTPBody, data);", "+\t}", "+\tif (headers != null) {", "+\t\tfor (int i = 0; i < headers.length; i++) {", "+\t\t\tString current = headers[i];", "+\t\t\tint index = current.indexOf(':');", "+\t\t\tif (index != -1) {", "+\t\t\t\tString key = current.substring(0, index).trim();", "+\t\t\t\tString value = current.substring(index + 1).trim();", "+\t\t\t\tif (key.length() > 0 && value.length() > 0) {", "+\t\t\t\t\tif (key.equals(USER_AGENT)) {", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t* Feature of Safari.  The user-agent header value cannot be overridden", "+\t\t\t\t\t\t* here.  The workaround is to temporarily set the value on the WebView", "+\t\t\t\t\t\t* and then remove it after the loading of the request has begun.", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tint string = createNSString(value);", "+\t\t\t\t\t\tCocoa.objc_msgSend(webView, Cocoa.S_setCustomUserAgent, string);", "+\t\t\t\t\t\tOS.CFRelease (string);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint keyString = createNSString(key);", "+\t\t\t\t\t\tint valueString = createNSString(value);", "+\t\t\t\t\t\tCocoa.objc_msgSend(request, Cocoa.S_setValueForHTTPHeaderField, keyString, valueString);", "+\t\t\t\t\t\tOS.CFRelease (valueString);", "+\t\t\t\t\t\tOS.CFRelease (keyString);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+", "-", "-\t//[mainFrame loadRequest:request];", "-", "+\tCocoa.objc_msgSend(webView, Cocoa.S_setCustomUserAgent, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "230ce838538edb55b42c43c4cd054241", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextRenderer.java", "commitBeforeChange": "b59b2c9c83dff7d247f5293493520244610ab7b3", "commitAfterChange": "caefa6ee44d118fcdfc9a890470791a160f9ad68", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": " int drawLine(int lineIndex, int paintX, int paintY, GC gc, Color widgetBackground, Color widgetForeground)", "signatureAfterChange": " int drawLine(int lineIndex, int paintX, int paintY, GC gc, Color widgetBackground, Color widgetForeground)", "diff": ["-//\tBullet bullet = null;", "-//\tif (lines != null) {", "-//\t\tLineInfo info = lines[lineIndex];", "-//\t\tif (info != null) {", "-//\t\t\tif ((info.flags & BULLET) != 0) bullet = info.bullet;", "-//\t\t}", "-//\t}", "+\tBullet bullet = null;", "+\tint bulletIndex = -1;", "+\tif (bullets != null) {", "+\t\tif (bulletsIndices != null) {", "+\t\t\tint index = lineIndex - topIndex;", "+\t\t\tif (0 <= index && index < CACHE_SIZE) {", "+\t\t\t\tbullet = bullets[index];", "+\t\t\t\tbulletIndex = bulletsIndices[index];", "+\t\t\t}", "+\t\t} else {", "+\t\t\tfor (int i = 0; i < bullets.length; i++) {", "+\t\t\t\tbullet = bullets[i];", "+\t\t\t\tbulletIndex = bullet.indexOf(lineIndex);", "+\t\t\t\tif (bulletIndex != -1) break;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (bulletIndex != -1 && bullet != null) {", "+\t\tFontMetrics metrics = layout.getLineMetrics(0);", "+\t\tint lineAscent = metrics.getAscent() + metrics.getLeading();", "+\t\tif (bullet.type == ST.BULLET_CUSTOM) {", "+\t\t\tbullet.style.start = lineOffset;", "+\t\t\tstyledText.paintObject(gc, paintX, paintY, lineAscent, metrics.getDescent(), bullet.style, bullet, bulletIndex);", "+\t\t} else {", "+\t\t\tdrawBullet(bullet, gc, paintX, paintY, bulletIndex, lineAscent, metrics.getDescent());", "+\t\t}", "+\t}", "+\t", "-\t\t\tstyledText.paintObject(gc, point.x + paintX, point.y + paintY, lineAscent, metrics.getDescent(), style);", "+\t\t\tstyledText.paintObject(gc, point.x + paintX, point.y + paintY, lineAscent, metrics.getDescent(), style, null, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "99dd42d21aa0781461920ae75e009a11", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "  void init (Device device, FontData fd)", "signatureAfterChange": "  void init(Device device, String name, int height, int style)", "diff": ["-", "-void init (Device device, FontData fd) {", "-\tif (fd == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "-\tthis.device = device;", "-\thandle= new MacFont(fd.fontFamily, fd.height, fd.style);", "-}", "+", "+void init(Device device, String name, int height, int style) {", "+\tif (name == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+\tif (height < 0) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\tbyte[] buffer = new byte[256];", "+\tint length = name.length();", "+\tif (length > 255) length = 255;", "+\tbuffer[0] = (byte)length;", "+\tfor (int i=0; i<length; i++) {", "+\t\tbuffer[i+1]= (byte)name.charAt(i);", "+\t}", "+\tthis.id = OS.FMGetFontFamilyFromName(buffer);", "+\tif (this.id == OS.kInvalidFontFamily) this.id = OS.GetAppFont();", "+\tif ((style & SWT.ITALIC) != 0) this.style |= OS.italic;", "+\tif ((style & SWT.BOLD) != 0) this.style |= OS.bold;", "+\tthis.size = (short)height;", "+\tint[] font = new int[1];", "+\tif (OS.FMGetFontFromFontFamilyInstance(id, this.style, font, null) != 0) {", "+\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "+\t}", "+\tthis.handle = font[0];", "+}"]}], "num": 19789}
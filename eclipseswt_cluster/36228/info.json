{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69cb92cfb394fc2701b14f7a4193060e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac0a3664cd70f6e187197121acb6deab", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "23a4ae5a01c03d1e89c88b45ce6a00f7b7cfc803", "commitAfterChange": "0fc715ad3225dc7b91ceef95969ce79b13bc7afe", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  void _checkShrink ()", "signatureAfterChange": "  void _checkShrink ()", "diff": ["+", "+\t\t\t/*", "+\t\t\t* Bug in Windows. Call to OS.LVM_GETITEMCOUNT unexpectedly returns zero,", "+\t\t\t* leading to a possible \"ArrayIndexOutOfBoundsException: 4\" in SWT table.", "+\t\t\t* So, double check for any existing living items in the table and fixing", "+\t\t\t* the count value. Refer bug 292199.", "+\t\t\t*/", "+\t\t\tif (count == 0 && items.length > 4) {", "+\t\t\t\twhile (count<items.length && items[count] != null && !items[count].isDisposed()) {", "+\t\t\t\t\tcount++;", "+\t\t\t\t}", "+\t\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c537c498cdcc6a528b4a3ee917a6ef25", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/coolbar/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "45839029e973e1dc7c831a4e35152029794de180", "commitAfterChange": "fd9b5f1696d9dafd72c139451ffea61381d4ef51", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r void onDispose()", "signatureAfterChange": "\r void onDispose()", "diff": ["+\t/*\r", "+\t * Usually when an item is disposed, destroyItem will change the size of the items array\r", "+\t * and reset the bounds of all the remaining cool items.\r", "+\t * Since the whole cool bar is being disposed, this is not necessary.  For speed\r", "+\t * the inDispose flag is used to skip over this part of the item dispose.\r", "+\t */\r", "+\tinDispose = true;\r", "+\tfor (int i = 0; i < items.length; i++) {\r", "+\t\tfor (int j = 0; j < items[i].length; j++) {\r", "+\t\t\titems[i][j].dispose();\r", "+\t\t}\r", "+\t}\r"]}], "num": 36228}
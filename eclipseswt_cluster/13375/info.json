{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eedaf260ae8c34d15225f9bab514e7b9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e7d0cd831e9727d36e897598399d4c4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "bd64112265c2a125577ef5db8ecfbdb762c0aeab", "commitAfterChange": "9b08189f8ee7e189cc76f5fea12f3ad05eb7e51b", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " public void setLineAttributes(LineAttributes attributes)", "signatureAfterChange": " public void setLineAttributes(LineAttributes attributes)", "diff": ["-\t//TODO", "+\tif (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);", "+\tif (attributes == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+\tint mask = 0;", "+\tfloat lineWidth = attributes.width;", "+\tif (lineWidth != data.lineWidth) {", "+\t\tmask |= LINE_WIDTH;", "+\t}", "+\tint lineStyle = attributes.style;", "+\tif (lineStyle != data.lineStyle) {", "+\t\tmask |= LINE_STYLE;", "+\t\tswitch (lineStyle) {", "+\t\t\tcase SWT.LINE_SOLID:", "+\t\t\tcase SWT.LINE_DASH:", "+\t\t\tcase SWT.LINE_DOT:", "+\t\t\tcase SWT.LINE_DASHDOT:", "+\t\t\tcase SWT.LINE_DASHDOTDOT:", "+\t\t\t\tbreak;", "+\t\t\tcase SWT.LINE_CUSTOM:", "+\t\t\t\tif (attributes.dash == null) lineStyle = SWT.LINE_SOLID;", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\t}", "+\t}", "+\tint join = attributes.join;", "+\tif (join != data.lineJoin) {", "+\t\tmask |= LINE_JOIN;", "+\t\tswitch (join) {", "+\t\t\tcase SWT.CAP_ROUND:", "+\t\t\tcase SWT.CAP_FLAT:", "+\t\t\tcase SWT.CAP_SQUARE:", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\t}", "+\t}", "+\tint cap = attributes.join;", "+\tif (cap != data.lineCap) {", "+\t\tmask |= LINE_CAP;", "+\t\tswitch (cap) {", "+\t\t\tcase SWT.JOIN_MITER:", "+\t\t\tcase SWT.JOIN_ROUND:", "+\t\t\tcase SWT.JOIN_BEVEL:", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\t}", "+\t}", "+\tfloat[] dashes = attributes.dash;", "+\tfloat[] lineDashes = data.lineDashes;", "+\tif (dashes != null && dashes.length > 0) {", "+\t\tboolean changed = lineDashes == null || lineDashes.length != dashes.length;", "+\t\tfor (int i = 0; i < dashes.length; i++) {", "+\t\t\tfloat dash = dashes[i];", "+\t\t\tif (dash <= 0) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\t\tif (!changed && lineDashes[i] != dash) changed = true;", "+\t\t}", "+\t\tif (changed) {", "+\t\t\tfloat[] newDashes = new float[dashes.length];", "+\t\t\tSystem.arraycopy(dashes, 0, newDashes, 0, dashes.length);", "+\t\t\tdashes = newDashes;", "+\t\t\tmask |= LINE_STYLE;", "+\t\t} else {", "+\t\t\tdashes = lineDashes;", "+\t\t}", "+\t} else {", "+\t\tif (lineDashes != null && lineDashes.length > 0) {", "+\t\t\tmask |= LINE_STYLE;", "+\t\t} else {", "+\t\t\tdashes = lineDashes;", "+\t\t}", "+\t}", "+\tfloat dashOffset = attributes.dashOffset;", "+\tif (dashOffset != data.lineDashesOffset) {", "+\t\tmask |= LINE_STYLE;", "+\t}", "+\tfloat miterLimit = attributes.miterLimit;", "+\tif (miterLimit != data.lineMiterLimit) {", "+\t\tmask |= LINE_MITERLIMIT;", "+\t}", "+\tif (mask == 0) return;", "+\tdata.lineWidth = lineWidth;", "+\tdata.lineStyle = lineStyle;", "+\tdata.lineCap = cap;", "+\tdata.lineJoin = join;", "+\tdata.lineDashes = dashes;", "+\tdata.lineDashesOffset = dashOffset;", "+\tdata.lineMiterLimit = miterLimit;", "+\tdata.state &= ~mask;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d861ed1ff93489d3fd27b77a44df427c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "4837f43ad626833e44d944849690be12f17d2c70", "commitAfterChange": "d33484b9dbd12f2a7ff228ba91793eb6670c1b90", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 35, "signatureBeforeChange": "\r void destroyAccelerators ()", "signatureAfterChange": "\r boolean translateAccelerator (int key, int keysym, XKeyEvent xEvent)", "diff": ["-}\r", "-void destroyAccelerators () {\r", "-\tif (!accelerators) return;\r", "-\tif (menuBar == null) return;\r", "-\tmenuBar.removeAccelerators ();\r", "-\taccelerators = false;\r", "+boolean translateAccelerator (int key, int keysym, XKeyEvent xEvent) {\r", "+\t/*\r", "+\t* Bug in Solaris.  When accelerators are set more\r", "+\t* than once in the same menu bar, the time it takes\r", "+\t* to set the accelerator increases exponentially.\r", "+\t* The fix is to implement our own accelerator table\r", "+\t* on Solaris.\r", "+\t*/\r", "+\tif (OS.IsSunOS) {\r", "+\t\tif (menuBar != null && menuBar.getEnabled ()) {\r", "+\t\t\t/* Ignore modifiers. */\r", "+\t\t\tswitch (keysym) {\r", "+\t\t\t\tcase OS.XK_Control_L:\r", "+\t\t\t\tcase OS.XK_Control_R:\r", "+\t\t\t\tcase OS.XK_Alt_L:\r", "+\t\t\t\tcase OS.XK_Alt_R:\r", "+\t\t\t\tcase OS.XK_Shift_L:\r", "+\t\t\t\tcase OS.XK_Shift_R:\r", "+\t\t\t\t\treturn false;\t\t\t\t\t\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* Bug in MOTIF.  On Solaris only, XK_F11 and XK_F12 are not\r", "+\t\t\t* translated correctly by XLookupString().  They are mapped\r", "+\t\t\t* to 0x1005FF10 and 0x1005FF11 respectively.  The fix is to\r", "+\t\t\t* look for these values explicitly and correct them.\r", "+\t\t\t*/\r", "+\t\t\tif (keysym != 0) {\r", "+\t\t\t\tswitch (keysym) {\r", "+\t\t\t\t\tcase 0x1005FF10: \r", "+\t\t\t\t\t\tkeysym = OS.XK_F11;\r", "+\t\t\t\t\t\tkey = 0;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase 0x1005FF11:\r", "+\t\t\t\t\t\tkeysym = OS.XK_F12;\r", "+\t\t\t\t\t\tkey = 0;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\t\t\t/*\r", "+\t\t\t\t* Bug in MOTIF.  On Solaris only, there is garbage in the\r", "+\t\t\t\t* high 16-bits for Keysyms such as XK_Down.  Since Keysyms\r", "+\t\t\t\t* must be 16-bits to fit into a Character, mask away the\r", "+\t\t\t\t* high 16-bits on all platforms.\r", "+\t\t\t\t*/\r", "+\t\t\t\tkeysym &= 0xFFFF;\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* Bug in Motif.  There are some keycodes for which \r", "+\t\t\t* XLookupString() does not translate the character.\r", "+\t\t\t* Some of examples are Shift+Tab and Ctrl+Space.\r", "+\t\t\t*/\r", "+\t\t\tswitch (keysym) {\r", "+\t\t\t\tcase OS.XK_ISO_Left_Tab: key = '\\t'; break;\r", "+\t\t\t\tcase OS.XK_space: key = ' '; break;\r", "+\t\t\t}\r", "+\t\t\t\t\r", "+\t\t\tint accelerator = Display.translateKey (keysym);\r", "+\t\t\tif (accelerator == 0) accelerator = key;\r", "+\t\t\tif ((xEvent.state & OS.Mod1Mask) != 0) accelerator |= SWT.ALT;\r", "+\t\t\tif ((xEvent.state & OS.ShiftMask) != 0) accelerator |= SWT.SHIFT;\r", "+\t\t\tif ((xEvent.state & OS.ControlMask) != 0) accelerator |= SWT.CONTROL;\r", "+\t\t\treturn menuBar.translateAccelerator (accelerator);\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c376bcbfab74250cbdfba788f0110a9e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/gtk/org/eclipse/swt/browser/WebKit.java", "commitBeforeChange": "8614680ae78fee56d42eb3d94f28a75f18d340b5", "commitAfterChange": "9f7ccea14bb1fb11d1071f5e85bfb64c67f560bd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  static int JSDOMEventProc (int window, int event, int user_data)", "signatureAfterChange": "  static int JSDOMEventProc (int arg0, int event, int user_data)", "diff": ["-static int /*long*/ JSDOMEventProc (int /*long*/ window, int /*long*/ event, int /*long*/ user_data) {", "-\tLONG webViewHandle = (LONG)WindowMappings.get (new LONG (window));", "+static int /*long*/ JSDOMEventProc (int /*long*/ arg0, int /*long*/ event, int /*long*/ user_data) {", "+\tif (OS.GTK_IS_SCROLLED_WINDOW (arg0)) {", "+\t\t/*", "+\t\t * Stop the propagation of events that are not consumed by WebKit, before", "+\t\t * they reach the parent embedder.  These events have already been received.", "+\t\t */", "+\t\treturn user_data;", "+\t}", "+", "+\tif (OS.G_TYPE_CHECK_INSTANCE_TYPE (arg0, WebViewType)) {", "+\t\t/*", "+\t\t* Only consider using GDK events to create SWT events to send if JS is disabled", "+\t\t* in one or more WebKit instances (indicates that this instance may not be", "+\t\t* receiving events from the DOM).  This check is done up-front for performance.", "+\t\t*/", "+\t\tif (DisabledJSCount > 0) {", "+\t\t\tfinal Browser browser = FindBrowser (arg0);", "+\t\t\tif (browser != null && !((WebKit)browser.webBrowser).jsEnabled) {", "+\t\t\t\t/* this instance does need to use the GDK event to create an SWT event to send */", "+\t\t\t\tOS.gtk_widget_event (browser.handle, event);", "+\t\t\t\tswitch (OS.GDK_EVENT_TYPE (event)) {", "+\t\t\t\t\tcase OS.GDK_KEY_PRESS: ", "+\t\t\t\t\t\tif (browser.isFocusControl ()) {", "+\t\t\t\t\t\t\tfinal GdkEventKey gdkEvent = new GdkEventKey ();", "+\t\t\t\t\t\t\tOS.memmove (gdkEvent, event, GdkEventKey.sizeof);", "+\t\t\t\t\t\t\tif ((gdkEvent.keyval == OS.GDK_ISO_Left_Tab || gdkEvent.keyval == OS.GDK_Tab) && (gdkEvent.state & (OS.GDK_CONTROL_MASK | OS.GDK_MOD1_MASK)) == 0) {", "+\t\t\t\t\t\t\t\tbrowser.getDisplay ().asyncExec (new Runnable () {", "+\t\t\t\t\t\t\t\t\tpublic void run () {", "+\t\t\t\t\t\t\t\t\t\tif (browser.isDisposed ()) return;", "+\t\t\t\t\t\t\t\t\t\tif (browser.getDisplay ().getFocusControl () == null) {", "+\t\t\t\t\t\t\t\t\t\t\tint traversal = (gdkEvent.state & OS.GDK_SHIFT_MASK) != 0 ? SWT.TRAVERSE_TAB_PREVIOUS : SWT.TRAVERSE_TAB_NEXT;", "+\t\t\t\t\t\t\t\t\t\t\tbrowser.traverse (traversal);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t});", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn 0;", "+\t}", "+", "+\tLONG webViewHandle = (LONG)WindowMappings.get (new LONG (arg0));", "-\treturn webkit.handleEvent (event, (int)user_data) ? 0 : 1;", "+\treturn webkit.handleDOMEvent (event, (int)user_data) ? 0 : STOP_PROPOGATE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1110c5521e171e882a2630c28bbea2e2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java", "commitBeforeChange": "399156490d22f3d1f71663eed297e579ef25b0fc", "commitAfterChange": "a1f55a007486ea929f61bc360225ffb5df8913db", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tvoid log(Event event)", "signatureAfterChange": " \tvoid log(Event event)", "diff": ["-\t\twhile (i < EVENT_NAMES.length) {", "-\t\t\tif (((Integer)EVENT_NAMES[i][1]).intValue() == event.type) break;", "+\t\twhile (i < EVENT_INFO.length) {", "+\t\t\tif (EVENT_INFO[i].type == event.type) break;", "-\t\tString toString = (String)EVENT_NAMES[i][0] + \" [\"+event.type+\"]: \";", "+\t\tString toString = EVENT_INFO[i].name + \" [\" + event.type + \"]: \";", "-\t\teventConsole.append (toString);", "-\t\teventConsole.append (\"\\n\");", "+\t\tlog (toString);", "+\t\t", "+\t\t/* Return values for event fields. */", "+\t\tint mask = EVENT_INFO[i].setFields;", "+\t\tif (!ignore && mask != 0) {", "+\t\t\tEvent setFieldsEvent = EVENT_INFO[i].event;", "+\t\t\tif ((mask & DOIT) != 0) event.doit = setFieldsEvent.doit;", "+\t\t\tif ((mask & DETAIL) != 0) event.detail = setFieldsEvent.detail;", "+\t\t\tif ((mask & TEXT) != 0) event.text = setFieldsEvent.text;", "+\t\t\tif ((mask & X) != 0) event.x = setFieldsEvent.x;", "+\t\t\tif ((mask & Y) != 0) event.y = setFieldsEvent.y;", "+\t\t\tif ((mask & WIDTH) != 0) event.width = setFieldsEvent.width;", "+\t\t\tif ((mask & HEIGHT) != 0) event.height = setFieldsEvent.height;", "+\t\t\teventConsole.append (ControlExample.getResourceString(\"Returning\"));", "+\t\t\tignore = true;", "+\t\t\tlog (event);", "+\t\t\tignore = false;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08ce1942d931c1aa455743334127e063", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "c830ba87659f66da0a8654b6fd6e8eaf78f224a3", "commitAfterChange": "4482f07e9114cadcaa151462c4425652dbe37722", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": "  boolean setInputState (Event event, int theEvent)", "signatureAfterChange": "  boolean setInputState (Event event, int type, int chord, int modifiers)", "diff": ["-boolean setInputState (Event event, int theEvent) {", "-\tshort [] button = new short [1];", "-\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button);", "-\tint [] chord = new int [1];", "-\tOS.GetEventParameter (theEvent, OS.kEventParamMouseChord, OS.typeUInt32, null, 4, null, chord);", "-\tint [] modifiers = new int [1];", "-\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "-\treturn setInputState (event, button [0], chord [0], modifiers [0]);", "-}", "+boolean setInputState (Event event, int type, int chord, int modifiers) {", "+\tswitch (type) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2986542451476d3f540d222e12db354", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "1802dd1c5c905d6eb8a9a43eba713fd29752bad3", "commitAfterChange": "d62d95171d1b9884e29ffebb40505397ee01c22b", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": "  boolean setInputState (Event event, int type, int chord, int modifiers)", "signatureAfterChange": "  boolean setInputState (Event event, NSEvent nsEvent, int type)", "diff": ["-boolean setInputState (Event event, int type, int chord, int modifiers) {", "-//\tif ((chord & 0x01) != 0) event.stateMask |= SWT.BUTTON1;", "-//\tif ((chord & 0x02) != 0) event.stateMask |= SWT.BUTTON3;", "-//\tif ((chord & 0x04) != 0) event.stateMask |= SWT.BUTTON2;", "-//\tif ((chord & 0x08) != 0) event.stateMask |= SWT.BUTTON4;", "-//\tif ((chord & 0x10) != 0) event.stateMask |= SWT.BUTTON5;", "-//\t", "-//\tif ((modifiers & OS.optionKey) != 0) event.stateMask |= SWT.ALT;", "-//\tif ((modifiers & OS.shiftKey) != 0) event.stateMask |= SWT.SHIFT;", "-//\tif ((modifiers & OS.controlKey) != 0) event.stateMask |= SWT.CONTROL;", "-//\tif ((modifiers & OS.cmdKey) != 0) event.stateMask |= SWT.COMMAND;", "-//\tswitch (type) {", "-//\t\tcase SWT.MouseDown:", "-//\t\tcase SWT.MouseDoubleClick:", "-//\t\t\tif (event.button == 1) event.stateMask &= ~SWT.BUTTON1;", "-//\t\t\tif (event.button == 2) event.stateMask &= ~SWT.BUTTON2;", "-//\t\t\tif (event.button == 3)  event.stateMask &= ~SWT.BUTTON3;", "-//\t\t\tif (event.button == 4)  event.stateMask &= ~SWT.BUTTON4;", "-//\t\t\tif (event.button == 5)  event.stateMask &= ~SWT.BUTTON5;", "-//\t\t\tbreak;", "-//\t\tcase SWT.MouseUp:", "-//\t\t\tif (event.button == 1) event.stateMask |= SWT.BUTTON1;", "-//\t\t\tif (event.button == 2) event.stateMask |= SWT.BUTTON2;", "-//\t\t\tif (event.button == 3) event.stateMask |= SWT.BUTTON3;", "-//\t\t\tif (event.button == 4) event.stateMask |= SWT.BUTTON4;", "-//\t\t\tif (event.button == 5) event.stateMask |= SWT.BUTTON5;", "-//\t\t\tbreak;", "-//\t\tcase SWT.KeyDown:", "-//\t\tcase SWT.Traverse: {", "-//\t\t\tif (event.keyCode != 0 || event.character != 0) return true;", "-//\t\t\tint lastModifiers = display.lastModifiers;", "-//\t\t\tif ((modifiers & OS.alphaLock) != 0 && (lastModifiers & OS.alphaLock) == 0) {", "-//\t\t\t\tevent.keyCode = SWT.CAPS_LOCK;", "-//\t\t\t\treturn true;", "-//\t\t\t}", "-//\t\t\tif ((modifiers & OS.shiftKey) != 0 && (lastModifiers & OS.shiftKey) == 0) {", "-//\t\t\t\tevent.stateMask &= ~SWT.SHIFT;", "-//\t\t\t\tevent.keyCode = SWT.SHIFT;", "-//\t\t\t\treturn true;", "-//\t\t\t}", "-//\t\t\tif ((modifiers & OS.controlKey) != 0 && (lastModifiers & OS.controlKey) == 0) {", "-//\t\t\t\tevent.stateMask &= ~SWT.CONTROL;", "-//\t\t\t\tevent.keyCode = SWT.CONTROL;", "-//\t\t\t\treturn true;", "-//\t\t\t}", "-//\t\t\tif ((modifiers & OS.cmdKey) != 0 && (lastModifiers & OS.cmdKey) == 0) {", "-//\t\t\t\tevent.stateMask &= ~SWT.COMMAND;", "-//\t\t\t\tevent.keyCode = SWT.COMMAND;", "-//\t\t\t\treturn true;", "-//\t\t\t}\t", "-//\t\t\tif ((modifiers & OS.optionKey) != 0 && (lastModifiers & OS.optionKey) == 0) {", "-//\t\t\t\tevent.stateMask &= ~SWT.ALT;", "-//\t\t\t\tevent.keyCode = SWT.ALT;", "-//\t\t\t\treturn true;", "-//\t\t\t}", "-//\t\t\tbreak;", "-//\t\t}", "-//\t\tcase SWT.KeyUp: {", "-//\t\t\tif (event.keyCode != 0 || event.character != 0) return true;", "-//\t\t\tint lastModifiers = display.lastModifiers;", "-//\t\t\tif ((modifiers & OS.alphaLock) == 0 && (lastModifiers & OS.alphaLock) != 0) {", "-//\t\t\t\tevent.keyCode = SWT.CAPS_LOCK;", "-//\t\t\t\treturn true;", "-//\t\t\t}", "-//\t\t\tif ((modifiers & OS.shiftKey) == 0 && (lastModifiers & OS.shiftKey) != 0) {", "-//\t\t\t\tevent.stateMask |= SWT.SHIFT;", "-//\t\t\t\tevent.keyCode = SWT.SHIFT;", "-//\t\t\t\treturn true;", "-//\t\t\t}", "-//\t\t\tif ((modifiers & OS.controlKey) == 0 && (lastModifiers & OS.controlKey) != 0) {", "-//\t\t\t\tevent.stateMask |= SWT.CONTROL;", "-//\t\t\t\tevent.keyCode = SWT.CONTROL;", "-//\t\t\t\treturn true;", "-//\t\t\t}", "-//\t\t\tif ((modifiers & OS.cmdKey) == 0 && (lastModifiers & OS.cmdKey) != 0) {", "-//\t\t\t\tevent.stateMask |= SWT.COMMAND;", "-//\t\t\t\tevent.keyCode = SWT.COMMAND;", "-//\t\t\t\treturn true;", "-//\t\t\t}", "-//\t\t\tif ((modifiers & OS.optionKey) == 0 && (lastModifiers & OS.optionKey) != 0) {", "-//\t\t\t\tevent.stateMask |= SWT.ALT;", "-//\t\t\t\tevent.keyCode = SWT.ALT;", "-//\t\t\t\treturn true;", "-//\t\t\t}", "-//\t\t\tbreak;", "-//\t\t}", "-//\t}", "-\treturn true; ", "+boolean setInputState (Event event, NSEvent nsEvent, int type) {", "+\tif (nsEvent == null) return true;", "+\tint modifierFlags = nsEvent.modifierFlags();", "+\tif ((modifierFlags & OS.NSAlternateKeyMask) != 0) event.stateMask |= SWT.ALT;", "+\tif ((modifierFlags & OS.NSShiftKeyMask) != 0) event.stateMask |= SWT.SHIFT;", "+\tif ((modifierFlags & OS.NSControlKeyMask) != 0) event.stateMask |= SWT.CONTROL;", "+\tif ((modifierFlags & OS.NSCommandKeyMask) != 0) event.stateMask |= SWT.COMMAND;", "+\t//TODO multiple mouse buttons pressed", "+\tswitch (nsEvent.type()) {", "+\t\tcase OS.NSLeftMouseDragged:", "+\t\tcase OS.NSRightMouseDragged:", "+\t\tcase OS.NSOtherMouseDragged:", "+\t\t\tswitch (nsEvent.buttonNumber()) {", "+\t\t\t\tcase 0: event.stateMask |= SWT.BUTTON1; break;", "+\t\t\t\tcase 1: event.stateMask |= SWT.BUTTON3; break;", "+\t\t\t\tcase 2: event.stateMask |= SWT.BUTTON2; break;", "+\t\t\t\tcase 3: event.stateMask |= SWT.BUTTON4; break;", "+\t\t\t\tcase 4: event.stateMask |= SWT.BUTTON5; break;", "+\t\t\t}", "+\t\t\tbreak;", "+\t}", "+\tswitch (type) {", "+\t\tcase SWT.MouseDown:", "+\t\tcase SWT.MouseDoubleClick:", "+\t\t\tif (event.button == 1) event.stateMask &= ~SWT.BUTTON1;", "+\t\t\tif (event.button == 2) event.stateMask &= ~SWT.BUTTON2;", "+\t\t\tif (event.button == 3) event.stateMask &= ~SWT.BUTTON3;", "+\t\t\tif (event.button == 4) event.stateMask &= ~SWT.BUTTON4;", "+\t\t\tif (event.button == 5) event.stateMask &= ~SWT.BUTTON5;", "+\t\t\tbreak;", "+\t\tcase SWT.MouseUp:", "+\t\t\tif (event.button == 1) event.stateMask |= SWT.BUTTON1;", "+\t\t\tif (event.button == 2) event.stateMask |= SWT.BUTTON2;", "+\t\t\tif (event.button == 3) event.stateMask |= SWT.BUTTON3;", "+\t\t\tif (event.button == 4) event.stateMask |= SWT.BUTTON4;", "+\t\t\tif (event.button == 5) event.stateMask |= SWT.BUTTON5;", "+\t\t\tbreak;", "+\t\tcase SWT.KeyDown:", "+\t\tcase SWT.Traverse:", "+\t\t\tif (event.keyCode == SWT.ALT) event.stateMask &= ~SWT.ALT;", "+\t\t\tif (event.keyCode == SWT.SHIFT) event.stateMask &= ~SWT.SHIFT;", "+\t\t\tif (event.keyCode == SWT.CONTROL) event.stateMask &= ~SWT.CONTROL;", "+\t\t\tbreak;", "+\t\tcase SWT.KeyUp:", "+\t\t\tif (event.keyCode == SWT.ALT) event.stateMask |= SWT.ALT;", "+\t\t\tif (event.keyCode == SWT.SHIFT) event.stateMask |= SWT.SHIFT;", "+\t\t\tif (event.keyCode == SWT.CONTROL) event.stateMask |= SWT.CONTROL;", "+\t\t\tbreak;", "+\t}\t\t", "+\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5339dae3a0d63a30e0105c74fb282fd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r int processSelection (int callData)", "signatureAfterChange": "\r int processSelection (int callData)", "diff": ["-int processSelection (int callData) {\r", "-\tpostEvent (SWT.Selection);\r", "+int processSelection (int callData) {", "+\tXmAnyCallbackStruct struct = new XmAnyCallbackStruct ();", "+\tOS.memmove (struct, callData, XmAnyCallbackStruct.sizeof);", "+\tEvent event = new Event ();", "+\tif (struct.event != 0) {", "+\t\tXButtonEvent xEvent = new XButtonEvent ();", "+\t\tOS.memmove (xEvent, struct.event, XAnyEvent.sizeof);", "+\t\tevent.time = xEvent.time;", "+\t\tswitch (xEvent.type) {", "+\t\t\tcase OS.ButtonPress:", "+\t\t\tcase OS.ButtonRelease:", "+\t\t\tcase OS.KeyPress:", "+\t\t\tcase OS.KeyRelease:", "+\t\t\t\tif ((xEvent.state & OS.Mod1Mask) != 0) event.stateMask |= SWT.ALT;", "+\t\t\t\tif ((xEvent.state & OS.ShiftMask) != 0) event.stateMask |= SWT.SHIFT;", "+\t\t\t\tif ((xEvent.state & OS.ControlMask) != 0) event.stateMask |= SWT.CONTROL;", "+\t\t\t\tif ((xEvent.state & OS.Button1Mask) != 0) event.stateMask |= SWT.BUTTON1;", "+\t\t\t\tif ((xEvent.state & OS.Button2Mask) != 0) event.stateMask |= SWT.BUTTON2;", "+\t\t\t\tif ((xEvent.state & OS.Button3Mask) != 0) event.stateMask |= SWT.BUTTON3;", "+\t\t}", "+\t}", "+\tpostEvent (SWT.Selection, event);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0485f72ea974b60478c305b01753a122", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "07cfbabfd10d437ea59b43cf5207c9aec243ed8d", "commitAfterChange": "6147d730779cb8ab37297fa17eb56d48841c159e", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  int filterProc (int xEvent, int gdkEvent, int data2)", "signatureAfterChange": "  int filterProc (int xEvent, int gdkEvent, int data2)", "diff": ["-\tif (eventType == OS.FocusOut || eventType == OS.FocusIn) {", "-\t\tOS.memmove (display.lastFocusChangeEvent, xEvent, XFocusChangeEvent.sizeof);", "+\tif (eventType != OS.FocusOut && eventType != OS.FocusIn) return 0;", "+\tXFocusChangeEvent xFocusEvent = new XFocusChangeEvent();", "+\tOS.memmove (xFocusEvent, xEvent, XFocusChangeEvent.sizeof);", "+\tswitch (eventType) {", "+\t\tcase OS.FocusIn: ", "+\t\t\tif (xFocusEvent.mode == OS.NotifyNormal || xFocusEvent.mode == OS.NotifyWhileGrabbed) {", "+\t\t\t\tif (xFocusEvent.detail == OS.NotifyNonlinear) {", "+\t\t\t\t\tif (tooltipsHandle != 0) OS.gtk_tooltips_enable (tooltipsHandle);", "+\t\t\t\t\tdisplay.activeShell = this;", "+\t\t\t\t\tdisplay.activePending = false;", "+\t\t\t\t\tsendEvent (SWT.Activate);", "+\t\t\t\t}", "+\t\t\t} ", "+\t\t\tbreak;", "+\t\tcase 10:", "+\t\t\tif (xFocusEvent.mode == OS.NotifyNormal || xFocusEvent.mode == OS.NotifyWhileGrabbed) {", "+\t\t\t\tif (xFocusEvent.detail == OS.NotifyNonlinearVirtual || xFocusEvent.detail == OS.NotifyVirtual) {", "+\t\t\t\t\tif (tooltipsHandle != 0) OS.gtk_tooltips_disable (tooltipsHandle);", "+\t\t\t\t\tsendEvent (SWT.Deactivate);", "+\t\t\t\t\tsetActiveControl (null);", "+\t\t\t\t\tif (display.activeShell == this) {", "+\t\t\t\t\t\tdisplay.activeShell = null;", "+\t\t\t\t\t\tdisplay.activePending = false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be173a7708d65fdbfd000dfb816e05bd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "2c188166c8edeeffa96cf155df849af797217517", "commitAfterChange": "1600566572476d9a59d55b12b53edda457f44a52", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "  void setInputState(Event event, int key_mods, int button_state)", "signatureAfterChange": "  boolean setInputState (Event event, int type, int key_mods, int button_state)", "diff": ["-void setInputState(Event event, int key_mods, int button_state) {", "+boolean setInputState (Event event, int type, int key_mods, int button_state) {", "-}", "+\tswitch (type) {", "+\t\tcase SWT.MouseDown:", "+\t\tcase SWT.MouseDoubleClick:", "+\t\t\tif (event.button == 1) event.stateMask &= ~SWT.BUTTON1;", "+\t\t\tif (event.button == 2) event.stateMask &= ~SWT.BUTTON2;", "+\t\t\tif (event.button == 3) event.stateMask &= ~SWT.BUTTON3;", "+\t\t\tbreak;", "+\t\tcase SWT.MouseUp:", "+\t\t\tif (event.button == 1) event.stateMask |= SWT.BUTTON1;", "+\t\t\tif (event.button == 2) event.stateMask |= SWT.BUTTON2;", "+\t\t\tif (event.button == 3) event.stateMask |= SWT.BUTTON3;", "+\t\t\tbreak;", "+\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fd7bce8d06468b004aac91c31d55604", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "332536a6db872df6c8a55983e5b9507181322bee", "commitAfterChange": "c54491881240cacf62bc496023e05818dd936c3f", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": "  boolean setKeyState (Event event, int type, NSEvent nsEvent)", "signatureAfterChange": "  boolean setKeyState (Event event, int type, NSEvent nsEvent)", "diff": ["-//\tboolean isNull = false;", "-//\tint [] keyCode = new int [1];", "-//\tOS.GetEventParameter (theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "-//\tevent.keyCode = Display.translateKey (keyCode [0]);", "+\tboolean isNull = false;", "+\tint keyCode = nsEvent.keyCode ();", "+\tevent.keyCode = Display.translateKey (keyCode);", "-//\t\tcase SWT.LF: {", "-//\t\t\t/*", "-//\t\t\t* Feature in the Macintosh.  When the numeric key pad", "-//\t\t\t* Enter key is pressed, it generates '\\n'.  This is the", "-//\t\t\t* correct platform behavior but is not portable.  The", "-//\t\t\t* fix is to convert the '\\n' into '\\r'.", "-//\t\t\t*/", "-//\t\t\tevent.keyCode = SWT.KEYPAD_CR;", "-//\t\t\tevent.character = '\\r';", "-//\t\t\tbreak;", "-//\t\t}", "+\t\tcase SWT.LF: {", "+\t\t\t/*", "+\t\t\t* Feature in the Macintosh.  When the numeric key pad", "+\t\t\t* Enter key is pressed, it generates '\\n'.  This is the", "+\t\t\t* correct platform behavior but is not portable.  The", "+\t\t\t* fix is to convert the '\\n' into '\\r'.", "+\t\t\t*/", "+\t\t\tevent.keyCode = SWT.KEYPAD_CR;", "+\t\t\tevent.character = '\\r';", "+\t\t\tbreak;", "+\t\t}", "-//\t\tcase SWT.CR: event.character = '\\r'; break;", "+\t\tcase SWT.CR: event.character = '\\r'; break;", "-//\t\tcase SWT.ESC: event.character = 0x1B; break;", "-//\t\tcase SWT.TAB: event.character = '\\t'; break;", "-//\t\tdefault: {", "-//\t\t\tif (event.keyCode == 0 || (SWT.KEYPAD_MULTIPLY <= event.keyCode && event.keyCode <= SWT.KEYPAD_CR)) {", "-//\t\t\t\tint [] length = new int [1];", "-//\t\t\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 4, length, (char[])null);", "-//\t\t\t\tif (status == OS.noErr && length [0] != 0) {", "-//\t\t\t\t\tchar [] chars = new char [1];", "-//\t\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 2, null, chars);", "-//\t\t\t\t\tevent.character = chars [0];", "-//\t\t\t\t}", "-//\t\t\t\t/*", "-//\t\t\t\t* Bug in the Mactonish.  For some reason, Ctrl+Shift+'2' and Ctrl+Shift+'6'", "-//\t\t\t\t* fail to give 0x0 (^@ or ASCII NUL) and 0x1e (^^).  Other control character", "-//\t\t\t\t* key sequences such as ^A or even Ctrl+Shift+'-' (^_ or 0x1f) are correctly", "-//\t\t\t\t* translated to control characters.  Since it is not possible to know which", "-//\t\t\t\t* key combination gives '@' on an international keyboard, there is no way to", "-//\t\t\t\t* test for either character and convert it to a control character (Shift+'2'", "-//\t\t\t\t* gives '@' only on an English keyboard) to work around the problem.", "-//\t\t\t\t*", "-//\t\t\t\t* There is no fix at this time.", "-//\t\t\t\t*/", "-//\t\t\t}", "-//\t\t\tif (event.keyCode == 0) {", "-//\t\t\t\tint kchrPtr = OS.GetScriptManagerVariable ((short) OS.smKCHRCache);", "-//\t\t\t\tif (display.kchrPtr != kchrPtr) {", "-//\t\t\t\t\tdisplay.kchrPtr = kchrPtr;", "-//\t\t\t\t\tdisplay.kchrState [0] = 0;", "-//\t\t\t\t}", "-//\t\t\t\tint result = OS.KeyTranslate (display.kchrPtr, (short)keyCode [0], display.kchrState);", "-//\t\t\t\tif (result <= 0x7f) {", "-//\t\t\t\t\tevent.keyCode = result & 0x7f;", "-//\t\t\t\t} else {", "-//\t\t\t\t\tint [] encoding = new int [1];", "-//\t\t\t\t\tshort keyScript = (short) OS.GetScriptManagerVariable ((short) OS.smKeyScript);", "-//\t\t\t\t\tshort regionCode = (short) OS.GetScriptManagerVariable ((short) OS.smRegionCode);", "-//\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, regionCode, null, encoding) == OS.paramErr) {", "-//\t\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, (short) OS.kTextRegionDontCare, null, encoding) == OS.paramErr) {", "-//\t\t\t\t\t\t\tencoding [0] = OS.kTextEncodingMacRoman;", "-//\t\t\t\t\t\t}", "-//\t\t\t\t\t}", "-//\t\t\t\t\tint [] encodingInfo = new int [1];", "-//\t\t\t\t\tOS.CreateTextToUnicodeInfoByEncoding (encoding [0], encodingInfo);", "-//\t\t\t\t\tif (encodingInfo [0] != 0) {", "-//\t\t\t\t\t\tchar [] chars = new char [1];", "-//\t\t\t\t\t\tint [] nchars = new int [1];", "-//\t\t\t\t\t\tbyte [] buffer = new byte [2];", "-//\t\t\t\t\t\tbuffer [0] = 1;", "-//\t\t\t\t\t\tbuffer [1] = (byte) (result & 0xFF);", "-//\t\t\t\t\t\tOS.ConvertFromPStringToUnicode (encodingInfo [0], buffer, chars.length * 2, nchars, chars);", "-//\t\t\t\t\t\tOS.DisposeTextToUnicodeInfo (encodingInfo);", "-//\t\t\t\t\t\tevent.keyCode = chars [0];", "-//\t\t\t\t\t}", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t\tbreak;", "-//\t\t}", "+\t\tcase SWT.ESC: event.character = 0x1B; break;", "+\t\tcase SWT.TAB: event.character = '\\t'; break;", "+\t\tdefault:", "+\t\t\tif (event.keyCode == 0 || (SWT.KEYPAD_MULTIPLY <= event.keyCode && event.keyCode <= SWT.KEYPAD_CR)) {", "+\t\t\t\tNSString chars = nsEvent.characters ();", "+\t\t\t\tevent.character = (char)chars.characterAtIndex (0);", "+\t\t\t}", "+\t\t\tif (event.keyCode == 0) {", "+\t\t\t\t//TODO this is wrong for shifted keys like ';', '1' and non-english keyboards", "+\t\t\t\tNSString chars = nsEvent.charactersIgnoringModifiers ().lowercaseString();", "+\t\t\t\tevent.keyCode = (char)chars.characterAtIndex(0);", "+\t\t\t}", "-//\tif (event.keyCode == 0 && event.character == 0) {", "-//\t\tif (!isNull) return false;", "-//\t}", "-//\tint [] chord = new int [1];", "-//\tOS.GetEventParameter (theEvent, OS.kEventParamMouseChord, OS.typeUInt32, null, 4, null, chord);", "-//\tint [] modifiers = new int [1];", "-//\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "-//\treturn setInputState (event, type, chord [0], modifiers [0]);", "+\tif (event.keyCode == 0 && event.character == 0) {", "+\t\tif (!isNull) return false;", "+\t}", "+\tsetInputState (event, nsEvent, type);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3efc16a01ce7b84f5177915c55a5c00b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "f494db0cd00af3ff914ef248b88f22bf802016a2", "commitAfterChange": "1e881e47cd16069712691a18980bde9f8d946eec", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "\r \r boolean setInputState (Event event, int type)", "signatureAfterChange": "\r \r boolean setInputState (Event event, int type)", "diff": ["+\tif (OS.GetKeyState (OS.VK_CONTROL) < 0) event.stateMask |= SWT.COMMAND;\r", "+\t\tcase SWT.MouseDown:\r", "+\t\tcase SWT.MouseDoubleClick:\r", "+\t\t\tif (event.button == 1) event.stateMask &= ~SWT.BUTTON1;\r", "+\t\t\tif (event.button == 2) event.stateMask &= ~SWT.BUTTON2;\r", "+\t\t\tif (event.button == 3) event.stateMask &= ~SWT.BUTTON3;\r", "+\t\t\tbreak;\r", "+\t\tcase SWT.MouseUp:\r", "+\t\t\tif (event.button == 1) event.stateMask |= SWT.BUTTON1;\r", "+\t\t\tif (event.button == 2) event.stateMask |= SWT.BUTTON2;\r", "+\t\t\tif (event.button == 3) event.stateMask |= SWT.BUTTON3;\r", "+\t\t\tbreak;\r", "+\t\t\tif (event.keyCode == SWT.COMMAND) event.stateMask &= ~SWT.COMMAND;\r", "+\t\t\tif (event.keyCode == SWT.COMMAND) event.stateMask |= SWT.COMMAND;\r"]}], "num": 13375}
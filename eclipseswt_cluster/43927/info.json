{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "99d2f078d89e4034dbfc53cb0a222e5c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0b8cf8c3a16724e47c4121a7052691c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "e7d3f96d2d9183741a56ad3af6b85eca3c65142d", "commitAfterChange": "b99e0e369a51571b12234356a1c0332a2bed35be", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": "  LRESULT WM_KEYDOWN (int wParam, int lParam)", "signatureAfterChange": " \t LRESULT WM_KEYDOWN (int wParam, int lParam)", "diff": ["-LRESULT WM_KEYDOWN (int /*long*/ wParam, int /*long*/ lParam) {", "-\tLRESULT result = super.WM_KEYDOWN (wParam, lParam);", "-\t* this key processing.", "-\t\t\tint location = -1;", "+\t", "+LRESULT WM_KEYDOWN (int /*long*/ wParam, int /*long*/ lParam) {", "+\tLRESULT result = super.WM_KEYDOWN (wParam, lParam);", "+\tif (result != null) return result;", "+\t/*", "+\t* Feature in Windows.  The Windows list box does not implement", "+\t* the control key interface for multi-select list boxes, making", "+\t* it inaccessible from the keyboard.  The fix is to implement", "+\t* the key processing.", "+\t*/", "+\tif (OS.GetKeyState (OS.VK_CONTROL) < 0 && OS.GetKeyState (OS.VK_SHIFT) >= 0) {", "+\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\tif ((bits & OS.LBS_EXTENDEDSEL) != 0) {", "+\t\t\tint location = -1;", "+\t\t\tswitch ((int)/*64*/wParam) {", "+\t\t\t\tcase OS.VK_SPACE: {", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Ensure that the window proc does not process VK_SPACE", "+\t\t\t\t\t* so that it can be handled in WM_CHAR.  This allows the", "+\t\t\t\t\t* application to cancel an operation that is normally", "+\t\t\t\t\t* performed in WM_KEYDOWN from WM_CHAR.", "+\t\t\t\t\t*/", "+\t", "+\t/*", "+\t* Feature in Windows.  When the user changes focus using", "+\t* the keyboard, the focus indicator does not draw.  The", "+\t* fix is to update the UI state for the control whenever", "+\t* the focus indicator changes as a result of something", "+\t* the user types.", "+\t*/", "+\tint uiState = (int)/*64*/OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "+\tif ((uiState & OS.UISF_HIDEFOCUS) != 0) {", "+\t\tint oldIndex = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "+\t\tint /*long*/ code = callWindowProc (handle, OS.WM_KEYDOWN, wParam, lParam);", "+\t\tint newIndex = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "+\t\tif (oldIndex != newIndex) {", "+\t\t\tOS.SendMessage (handle, OS.WM_CHANGEUISTATE, OS.UIS_INITIALIZE, 0);", "+\t\t\t/*", "+\t\t\t* Bug in Windows.  When the WM_CHANGEUISTATE is used", "+\t\t\t* to update the UI state for a list that has been", "+\t\t\t* selected using Shift+Arrow, the focus indicator", "+\t\t\t* has pixel corruption.  The fix is to redraw the", "+\t\t\t* focus item.", "+\t\t\t*/", "+\t\t\tRECT itemRect = new RECT ();", "+\t\t\tOS.SendMessage (handle, OS.LB_GETITEMRECT, newIndex, itemRect);", "+\t\t\tOS.InvalidateRect (handle, itemRect, true);", "+\t\t}", "+\t\treturn new LRESULT (code);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0714715481f9e21fd47ab9ed1d438722", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "c51fb393ab99325d9af1d3ac8aee99c3635a0d78", "commitAfterChange": "5bb98690a54122d614fad2d467c682c2744e7690", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 149, "signatureBeforeChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["+\t\t/*", "+\t\t* Bug in Windows.  When a tree has no images and an item is", "+\t\t* expanded or collapsed, for some reason, Windows changes", "+\t\t* the size of the selection.  When the user expands a tree", "+\t\t* item, the selection rectangle is made a few pixels larger.", "+\t\t* When the user collapses an item, the selection rectangle", "+\t\t* is restored to the original size but the selection is not", "+\t\t* redrawn, causing pixel corruption.  The fix is to detect", "+\t\t* this case and redraw the item.", "+\t\t*/", "+\t\tif ((lpht.flags & OS.TVHT_ONITEMBUTTON) != 0) {", "+\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "+\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETIMAGELIST, OS.TVSIL_NORMAL, 0) == 0) {", "+\t\t\t\t\tint /*long*/ hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "+\t\t\t\t\tif (hItem != 0) {", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tif (OS.TreeView_GetItemRect (handle, hItem, rect, false)) {", "+\t\t\t\t\t\t\tOS.InvalidateRect (handle, rect, true);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 43927}
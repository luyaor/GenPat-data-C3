{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4160cccf8bb0e9c46cb1c73783bc422f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aeea2f5db88babebc63f779258012753", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "854a2a098a55489c657a959680338fed7fbc719e", "commitAfterChange": "7c5c83504abbc5b6a131ee8a78859957718a6b38", "methodNumberBeforeChange": 188, "methodNumberAfterChange": 193, "signatureBeforeChange": "  void setZOrder (Control control, boolean above)", "signatureAfterChange": "  void setZOrder (Control sibling, boolean above)", "diff": ["-void setZOrder (Control control, boolean above) {", "-\tint otherControl = control == null ? 0 : control.topHandle ();", "-\tsetZOrder (topHandle (), otherControl, above);", "+void setZOrder (Control sibling, boolean above) {", "+\tint siblingHandle = sibling == null ? 0 : sibling.topHandle ();", "+\tint index = 0, siblingIndex = 0, oldNextIndex = -1;", "+\tControl[] children = null;", "+\t/* determine the receiver's and sibling's indexes in the parent */", "+\tchildren = parent._getChildren ();", "+\twhile (index < children.length) {", "+\t\tif (children [index] == this) break;", "+\t\tindex++;", "+\t}", "+\tif (sibling != null) {", "+\t\twhile (siblingIndex < children.length) {", "+\t\t\tif (children [siblingIndex] == sibling) break;", "+\t\t\tsiblingIndex++;", "+\t\t}", "+\t}", "+\t/* remove \"Labeled by\" relationships that will no longer be valid */", "+\tremoveRelation ();", "+\tif (index + 1 < children.length) {", "+\t\toldNextIndex = index + 1;", "+\t\tchildren [oldNextIndex].removeRelation ();", "+\t}", "+\tif (sibling != null) {", "+\t\tif (above) {", "+\t\t\tsibling.removeRelation ();", "+\t\t} else {", "+\t\t\tif (siblingIndex + 1 < children.length) {", "+\t\t\t\tchildren [siblingIndex + 1].removeRelation ();", "+\t\t\t}", "+\t\t}", "+\t}", "+\tsetZOrder (topHandle (), siblingHandle, above);", "+\t/* determine the receiver's new index in the parent */", "+\tif (sibling != null) {", "+\t\tif (above) {", "+\t\t\tindex = siblingIndex - (index < siblingIndex ? 1 : 0);", "+\t\t} else {", "+\t\t\tindex = siblingIndex + (siblingIndex < index ? 1 : 0);", "+\t\t}", "+\t} else {", "+\t\tif (above) {", "+\t\t\tindex = 0;", "+\t\t} else {", "+\t\t\tindex = children.length - 1;", "+\t\t}", "+\t}", "+", "+\t/* add new \"Labeled by\" relations as needed */", "+\tchildren = parent._getChildren ();", "+\tif (0 < index) {", "+\t\tchildren [index - 1].addRelation (this);", "+\t}", "+\tif (index + 1 < children.length) {", "+\t\taddRelation (children [index + 1]);", "+\t}", "+\tif (oldNextIndex != -1) {", "+\t\tif (oldNextIndex <= index) oldNextIndex--;", "+\t\t/* the last two conditions below ensure that duplicate relations are not hooked */", "+\t\tif (0 < oldNextIndex && oldNextIndex != index && oldNextIndex != index + 1) {", "+\t\t\tchildren [oldNextIndex - 1].addRelation (children [oldNextIndex]);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0dd7b89bf3d53f1623b795e573d2699", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "25aa012e5674a6ce6fa0827a09432e17d307ea2a", "commitAfterChange": "7bbd12b694b23a061644ffd6e7c93f550e7d67e9", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 174, "signatureBeforeChange": "  void setZOrder (Control control, boolean above)", "signatureAfterChange": "  void setZOrder (Control sibling, boolean above)", "diff": ["-void setZOrder (Control control, boolean above) {", "-\tNSView otherView = control == null ? null : control.topView ();", "+void setZOrder (Control sibling, boolean above) {", "+\tint index = 0, siblingIndex = 0, oldNextIndex = -1;", "+\tControl[] children = null;", "+\t/* determine the receiver's and sibling's indexes in the parent */", "+\tchildren = parent._getChildren ();", "+\twhile (index < children.length) {", "+\t\tif (children [index] == this) break;", "+\t\tindex++;", "+\t}", "+\tif (sibling != null) {", "+\t\twhile (siblingIndex < children.length) {", "+\t\t\tif (children [siblingIndex] == sibling) break;", "+\t\t\tsiblingIndex++;", "+\t\t}", "+\t}", "+\t/* remove \"Labeled by\" relationships that will no longer be valid */", "+\tremoveRelation ();", "+\tif (index + 1 < children.length) {", "+\t\toldNextIndex = index + 1;", "+\t\tchildren [oldNextIndex].removeRelation ();", "+\t}", "+\tif (sibling != null) {", "+\t\tif (above) {", "+\t\t\tsibling.removeRelation ();", "+\t\t} else {", "+\t\t\tif (siblingIndex + 1 < children.length) {", "+\t\t\t\tchildren [siblingIndex + 1].removeRelation ();", "+\t\t\t}", "+\t\t}", "+\t}", "+", "+\tNSView otherView = sibling == null ? null : sibling.topView ();", "+\t", "+\t/* determine the receiver's new index in the parent */", "+\tif (sibling != null) {", "+\t\tif (above) {", "+\t\t\tindex = siblingIndex - (index < siblingIndex ? 1 : 0);", "+\t\t} else {", "+\t\t\tindex = siblingIndex + (siblingIndex < index ? 1 : 0);", "+\t\t}", "+\t} else {", "+\t\tif (above) {", "+\t\t\tindex = 0;", "+\t\t} else {", "+\t\t\tindex = children.length - 1;", "+\t\t}", "+\t}", "+", "+\t/* add new \"Labeled by\" relations as needed */", "+\tchildren = parent._getChildren ();", "+\tif (0 < index) {", "+\t\tchildren [index - 1].addRelation (this);", "+\t}", "+\tif (index + 1 < children.length) {", "+\t\taddRelation (children [index + 1]);", "+\t}", "+\tif (oldNextIndex != -1) {", "+\t\tif (oldNextIndex <= index) oldNextIndex--;", "+\t\t/* the last two conditions below ensure that duplicate relations are not hooked */", "+\t\tif (0 < oldNextIndex && oldNextIndex != index && oldNextIndex != index + 1) {", "+\t\t\tchildren [oldNextIndex - 1].addRelation (children [oldNextIndex]);", "+\t\t}", "+\t}"]}], "num": 9025}
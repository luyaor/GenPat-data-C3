{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e4b87f173e0e2515957418681155823", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc0ebda60e34de245a829f6d7a563d18", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "fc59b19065f60bbcb485c797c7ff1561e9bb73f6", "commitAfterChange": "6079b58ee7045c020f911594524a48a4bc5cb888", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  void createSurface()", "signatureAfterChange": "  void createSurface()", "diff": ["-\tif (mask != 0) {", "+\t/* Generate the mask if necessary. */", "+\tif (transparentPixel != -1) createMask();", "+\tif (mask != 0 || alpha != -1 || alphaData != null) {", "-\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "-\t\tint /*long*/ gdkImagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);", "+\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);\t\t", "-\t\tfor (int y=0; y<height; y++) {", "-\t\t\tint /*long*/ offset = pixels + (y * stride);", "-\t\t\tOS.memmove(line, offset, stride);", "-\t\t\tfor (int x=0; x<width; x++) {", "-\t\t\t\tint offset1 = x * 4;", "-\t\t\t\tif (gdkImagePtr != 0) {", "-\t\t\t\t\tif (OS.gdk_image_get_pixel(gdkImagePtr, x, y) == 0) {", "-\t\t\t\t\t\tline[offset1+3] = 0;", "+\t\tif (mask != 0) {", "+\t\t\tint /*long*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, w[0], h[0]);", "+\t\t\tif (maskPixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\tOS.gdk_pixbuf_get_from_drawable(maskPixbuf, mask, 0, 0, 0, 0, 0, w[0], h[0]);", "+\t\t\tint maskStride = OS.gdk_pixbuf_get_rowstride(maskPixbuf);", "+\t\t\tint /*long*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);", "+\t\t\tbyte[] maskLine = new byte[maskStride];", "+\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\tint /*long*/ offset = pixels + (y * stride);", "+\t\t\t\tOS.memmove(line, offset, stride);", "+\t\t\t\tint /*long*/ maskOffset = maskPixels + (y * maskStride);", "+\t\t\t\tOS.memmove(maskLine, maskOffset, maskStride);", "+\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\t\tint offset1 = x * 4;", "+\t\t\t\t\tif (maskLine[x * 3] == 0) {", "+\t\t\t\t\t\tline[offset1 + 3] = 0;", "+\t\t\t\t\tbyte temp = line[offset1];", "+\t\t\t\t\tline[offset1] = line[offset1 + 2];", "+\t\t\t\t\tline[offset1 + 2] = temp;", "-\t\t\t\tbyte temp = line[offset1];", "-\t\t\t\tline[offset1] = line[offset1 + 2];", "-\t\t\t\tline[offset1 + 2] = temp;", "+\t\t\t\tOS.memmove(offset, line, stride);", "-\t\t\tOS.memmove(offset, line, stride);", "+\t\t\tOS.g_object_unref(maskPixbuf);", "+\t\t} else if (alpha != -1) {", "+\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\tint /*long*/ offset = pixels + (y * stride);", "+\t\t\t\tOS.memmove(line, offset, stride);", "+\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\t\tint offset1 = x * 4;", "+\t\t\t\t\tline[offset1+3] = (byte)alpha;", "+\t\t\t\t\tbyte temp = line[offset1];", "+\t\t\t\t\tline[offset1] = line[offset1 + 2];", "+\t\t\t\t\tline[offset1 + 2] = temp;", "+\t\t\t\t}", "+\t\t\t\tOS.memmove(offset, line, stride);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tfor (int y = 0; y < h [0]; y++) {", "+\t\t\t\tint /*long*/ offset = pixels + (y * stride);", "+\t\t\t\tOS.memmove (line, offset, stride);", "+\t\t\t\tfor (int x = 0; x < w [0]; x++) {", "+\t\t\t\t\tint offset1 = x * 4;", "+\t\t\t\t\tline[offset1+3] = alphaData [y*w [0]+x];", "+\t\t\t\t\tbyte temp = line[offset1];", "+\t\t\t\t\tline[offset1] = line[offset1 + 2];", "+\t\t\t\t\tline[offset1 + 2] = temp;", "+\t\t\t\t}", "+\t\t\t\tOS.memmove (offset, line, stride);", "+\t\t\t}", "-\t\tif (gdkImagePtr != 0) OS.g_object_unref(gdkImagePtr);", "-\t\treturn;", "-\t}\t", "-\tint /*long*/ xDisplay = OS.GDK_DISPLAY();", "-\tint /*long*/ xDrawable = OS.GDK_PIXMAP_XID(pixmap);", "-\tint /*long*/ xVisual = OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system());", "-\tint /*long*/ xColormap = OS.gdk_x11_colormap_get_xcolormap(OS.gdk_colormap_get_system());", "-\tsurface = Cairo.cairo_xlib_surface_create(xDisplay, xDrawable, xVisual, 0, xColormap);", "+\t} else {", "+\t\tint /*long*/ xDisplay = OS.GDK_DISPLAY();", "+\t\tint /*long*/ xDrawable = OS.GDK_PIXMAP_XID(pixmap);", "+\t\tint /*long*/ xVisual = OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system());", "+\t\tint /*long*/ xColormap = OS.gdk_x11_colormap_get_xcolormap(OS.gdk_colormap_get_system());", "+\t\tsurface = Cairo.cairo_xlib_surface_create(xDisplay, xDrawable, xVisual, 0, xColormap);", "+\t}", "+\t/* Destroy the image mask if the there is a GC created on the image */", "+\tif (transparentPixel != -1 && memGC != null) destroyMask();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82dfefa2fa9d861ead988f8e2004492a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "f13bd9400fedc174bad61b02e297f54dcefc8695", "commitAfterChange": "dc7272eeeee95074eb6b23ed3ac3ab956c23492c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r void extractValues()", "signatureAfterChange": "\r void extractValues()", "diff": ["-\tint [] argList2 = {OS.XmNdirectory, 0, OS.XmNdirSpec, 0};\r", "-\tOS.XtGetValues (dialog, argList2, argList2.length / 2);\r", "+\tint [] argList = {OS.XmNdirectory, 0, OS.XmNdirSpec, 0};\r", "+\tOS.XtGetValues (dialog, argList, argList.length / 2);\r", "-\tint xmString3 = argList2 [1];\r", "+\tint xmString1 = argList [1];\r", "-\t\txmString3,\r", "+\t\txmString1,\r", "-\tOS.XmStringFree (xmString3);\r", "+\tOS.XmStringFree (xmString1);\r", "+\tif (filterPath.endsWith(\"/\")) {\r", "+\t\tfilterPath = filterPath.substring (0, filterPath.length() - 1);\r", "+\t}\r", "-\tint xmString4 = argList2 [3];\r", "+\tint xmString2 = argList [3];\r", "-\t\txmString4,\r", "+\t\txmString2,\r", "-\t\tfullPath = new String (Converter.mbcsToWcs (null, buffer));\r", "+\t\tfullPath = new String (Converter.mbcsToWcs (null, buffer)).trim();\r", "-\tOS.XmStringFree (xmString4);\r", "+\tOS.XmStringFree (xmString2);\r", "-\tint length = filterPath.length ();\r", "-\tif (length != 0 && filterPath.charAt (length - 1) == '/') {\r", "-\t\tfilterPath = filterPath.substring (0, length - 1);\r", "+\tif ((style & SWT.MULTI) != 0) {\r", "+\t\tint fileList = OS.XmFileSelectionBoxGetChild (dialog, OS.XmDIALOG_LIST);\r", "+\t\tif (fileList == 0) return;\r", "+\t\tint [] argList2 = {OS.XmNselectedItems, 0, OS.XmNselectedItemCount, 0};\r", "+\t\tOS.XtGetValues (fileList, argList2, argList2.length / 2);\r", "+\t\tint items = argList2 [1], itemCount = argList2 [3];\r", "+\t\tint [] buffer1 = new int [1];\r", "+\t\tfileNames = new String [itemCount];\r", "+\t\tboolean match = false;\r", "+\t\tfor (int i = 0; i < itemCount; i++) {\r", "+\t\t\tOS.memmove (buffer1, items, 4);\r", "+\t\t\tptr = buffer1 [0];\r", "+\t\t\tint address = OS.XmStringUnparse (\r", "+\t\t\t\tptr,\r", "+\t\t\t\tnull,\r", "+\t\t\t\tOS.XmCHARSET_TEXT,\r", "+\t\t\t\tOS.XmCHARSET_TEXT,\r", "+\t\t\t\tnull,\r", "+\t\t\t\t0,\r", "+\t\t\t\tOS.XmOUTPUT_ALL);\r", "+\t\t\tif (address == 0) error (SWT.ERROR_CANNOT_GET_ITEM);\r", "+\t\t\tint length = OS.strlen (address);\r", "+\t\t\tbyte [] buffer = new byte [length];\r", "+\t\t\tOS.memmove (buffer, address, length);\r", "+\t\t\tOS.XtFree (address);\r", "+\t\t\t/* Use the character encoding for the default locale */\r", "+\t\t\tString fullFilename = new String (Converter.mbcsToWcs (null, buffer));\r", "+\t\t\tint index = fullFilename.lastIndexOf ('/');\r", "+\t\t\tfileNames [i] = fullFilename.substring (index + 1, fullFilename.length ());\r", "+\t\t\titems += 4;\r", "+\t\t\tif (fullFilename.equals(fullPath)) match = true;\r", "+\t\t}\r", "+\t\tif (!match) {\r", "+\t\t\t/* The user has modified the text field such that it doesn't match any\r", "+\t\t\t * of the selected files, so use this value instead\r", "+\t\t\t */\r", "+\t\t\tfileNames = new String [1];\r", "+\t\t\tint index = fullPath.lastIndexOf ('/');\r", "+\t\t\tfileNames [0] = fullPath.substring (index + 1, fullPath.length ());\r", "+\t\t}\r", "+\t} else {\r", "-\t\tfileName = fullPath.substring (index + 1, fullPath.length ());\r", "+\t\tfileNames [0] = fullPath.substring (index + 1, fullPath.length ());\r"]}], "num": 61409}
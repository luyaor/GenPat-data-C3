{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f3a74e140e3a626b75841d08dee8f15", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71e816d8ca76cedbb145cf797d741e6e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "commitAfterChange": "bbeab947327689cb203638e742e58f555e6c1b64", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 62, "signatureBeforeChange": " private void onPaint(Event event)", "signatureAfterChange": " void onPaint(Event event)", "diff": ["- */", "-private void onPaint(Event event) {", "+}", "+void onPaint(Event event) {", "+\t\t// handle case where  default font changes", "-\t\tresetTabSize(true);", "-\t}", "-\tGC gc = event.gc;", "-\tRectangle rect = super.getClientArea();", "-\tif (items.length == 0) {", "-\t\tif (showBorders) {\t\t", "-\t\t\tif ((getStyle() & SWT.FLAT) != 0) {", "-\t\t\t\tgc.setForeground(borderColor1);", "-\t\t\t\tgc.drawRectangle(rect.x, rect.y, rect.x + rect.width - 1, rect.y + rect.height - 1);", "-\t\t\t} else {", "-\t\t\t\tgc.setForeground(borderColor1);", "-\t\t\t\tgc.drawRectangle(rect.x, rect.y, rect.x + rect.width - 3, rect.y + rect.height - 3);", "-\t\t\t\t\t\t", "-\t\t\t\t// fill in right and bottom edges with parent's background", "-\t\t\t\tgc.setBackground(getParent().getBackground());", "-\t\t\t\tgc.fillRectangle(rect.x + rect.width - 2, rect.y, 2, rect.height);", "-\t\t\t\tgc.fillRectangle(rect.x, rect.y + rect.height - 2, rect.width, 2);", "-\t\t\t}", "-\t\t\tgc.setForeground(getForeground());", "+\t\tif (!updateTabHeight(tabHeight, false)) {", "+\t\t\tupdateItems();", "+\t\t\tredraw();", "+\t\t\treturn;", "+\t}", "+", "+// Useful for debugging paint problems", "+//{", "+//GC gc = event.gc;", "+//Point size = getSize();\t", "+//gc.setBackground(getDisplay().getSystemColor(SWT.COLOR_GREEN));", "+//gc.fillRectangle(-10, -10, size.x + 20, size.y+20);", "+//}", "+\t", "+\tGC gc = event.gc;", "+\tif (items.length == 0) {", "+\t\tPoint size = getSize();\t", "+\t\tgc.setBackground(getParent().getBackground());", "+\t\tgc.fillRectangle(0, 0, size.x, size.y);", "-\t// redraw the Border", "-\tdrawBorder(gc);", "-\t", "-\trect.x += borderLeft;", "-\trect.y += borderTop;", "-\trect.width -= borderLeft + borderRight;", "-\trect.height -= borderTop + borderBottom;", "-\tRectangle clip = gc.getClipping ();", "-\tgc.setClipping(clip.intersection(rect));", "-\t", "-\t// Draw the unselected tabs first.", "-\tfor (int i=0; i < items.length; i++) {", "-\t\tif (i != selectedIndex && event.getBounds().intersects(items[i].getBounds())) {", "-\t\t\titems[i].onPaint(gc, false);", "-\t\t}", "-\t}", "-\t// Selected tab comes last", "-\tif (selectedIndex != -1) {", "-\t\titems[selectedIndex].onPaint(gc, true);", "-\t}", "-\t", "-\t// draw insertion mark", "-\tif (insertionIndex > -2) {", "-\t\tgc.setForeground(getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));", "-\t\tif (insertionIndex == -1) {", "-\t\t\tRectangle bounds = items[0].getBounds();", "-\t\t\tgc.drawLine(bounds.x, bounds.y, bounds.x, bounds.y + bounds.height - 1);", "-\t\t\tgc.drawLine(bounds.x - 2, bounds.y, bounds.x + 2, bounds.y);", "-\t\t\tgc.drawLine(bounds.x - 1, bounds.y + 1, bounds.x + 1, bounds.y + 1);", "-\t\t\tgc.drawLine(bounds.x - 1, bounds.y + bounds.height - 2, bounds.x + 1, bounds.y + bounds.height - 2);", "-\t\t\tgc.drawLine(bounds.x - 2, bounds.y + bounds.height - 1, bounds.x + 2, bounds.y + bounds.height - 1);", "-", "-\t\t} else {", "-\t\t\tRectangle bounds = items[insertionIndex].getBounds();", "-\t\t\tgc.drawLine(bounds.x + bounds.width, bounds.y, bounds.x + bounds.width, bounds.y + bounds.height - 1);", "-\t\t\tgc.drawLine(bounds.x + bounds.width - 2, bounds.y, bounds.x + bounds.width + 2, bounds.y);", "-\t\t\tgc.drawLine(bounds.x + bounds.width - 1, bounds.y + 1, bounds.x + bounds.width + 1, bounds.y + 1);", "-\t\t\tgc.drawLine(bounds.x + bounds.width - 1, bounds.y + bounds.height - 2, bounds.x + bounds.width + 1, bounds.y + bounds.height - 2);", "-\t\t\tgc.drawLine(bounds.x + bounds.width - 2, bounds.y + bounds.height - 1, bounds.x + bounds.width + 2, bounds.y + bounds.height - 1);", "-\t\t}", "-\t}", "+\tdrawBody(event);", "+\tdrawTabArea(event);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebb2e2569032cfc459ec20a68d22df40", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/gtk/org/eclipse/swt/browser/WebKit.java", "commitBeforeChange": "b1df683a63ba731de0add93dda58ad190689d7cb", "commitAfterChange": "01b9002aa980befd0c51529f45e05b950166ae2b", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 35, "signatureBeforeChange": "  boolean handleEvent (Object[] arguments)", "signatureAfterChange": "  boolean handleKeyEvent (String type, int keyCode, int charCode, boolean altKey, boolean ctrlKey, boolean shiftKey, boolean metaKey)", "diff": ["-boolean handleEvent (Object[] arguments) {", "-", "-\t* DOM events are currently received by hooking DOM listeners", "-\t* in javascript that invoke this method via a BrowserFunction.", "-\t* It should be possible to replace this mechanism with more", "-\t* typical callbacks from C once WebKitGTK enhancement request", "-\t* https://bugs.webkit.org/show_bug.cgi?id=33590 is completed.", "-\t* In the meantime, the argument lists received here are:", "-\t* ", "-\t* For key events:", "-\t* For mouse events", "+", "+boolean handleKeyEvent (String type, int keyCode, int charCode, boolean altKey, boolean ctrlKey, boolean shiftKey, boolean metaKey) {", "-\t\tint keyCode = translateKey (((Double)arguments[1]).intValue ());", "+\t\tkeyCode = translateKey (keyCode);", "-\t\t\t\tkeyEvent.stateMask =", "-\t\t\t\t\t(((Boolean)arguments[3]).booleanValue () ? SWT.ALT : 0) |", "-\t\t\t\t\t(((Boolean)arguments[4]).booleanValue () ? SWT.CTRL : 0) |", "-\t\t\t\t\t(((Boolean)arguments[5]).booleanValue () ? SWT.SHIFT : 0) |", "-\t\t\t\t\t(((Boolean)arguments[6]).booleanValue () ? SWT.COMMAND : 0);", "+\t\t\t\tkeyEvent.stateMask = (altKey ? SWT.ALT : 0) | (ctrlKey ? SWT.CTRL : 0) | (shiftKey ? SWT.SHIFT : 0) | (metaKey ? SWT.COMMAND : 0);", "-\t\tlastCharCode = ((Double)arguments[2]).intValue ();", "-\t\tif (((Boolean)arguments[4]).booleanValue () && (0 <= lastCharCode && lastCharCode <= 0x7F)) {", "+\t\tlastCharCode = charCode;", "+\t\tif (ctrlKey && (0 <= lastCharCode && lastCharCode <= 0x7F)) {", "-\t\tkeyEvent.stateMask =", "-\t\t\t(((Boolean)arguments[3]).booleanValue () ? SWT.ALT : 0) |", "-\t\t\t(((Boolean)arguments[4]).booleanValue () ? SWT.CTRL : 0) |", "-\t\t\t(((Boolean)arguments[5]).booleanValue () ? SWT.SHIFT : 0) |", "-\t\t\t(((Boolean)arguments[6]).booleanValue () ? SWT.COMMAND : 0);", "+\t\tkeyEvent.stateMask = (altKey ? SWT.ALT : 0) | (ctrlKey ? SWT.CTRL : 0) | (shiftKey ? SWT.SHIFT : 0) | (metaKey ? SWT.COMMAND : 0);", "-\tif (type.equals(DOMEVENT_KEYUP)) {", "-\t\tint keyCode = translateKey (((Double)arguments[1]).intValue ());", "-\t\tif (keyCode == 0) {", "-\t\t\t/* indicates a key for which key events are not sent */", "-\t\t\treturn true;", "-\t\t}", "-\t\tif (keyCode != lastKeyCode) {", "-\t\t\t/* keyup does not correspond to the last keydown */", "-\t\t\tlastKeyCode = keyCode;", "-\t\t\tlastCharCode = 0;", "-\t\t}", "+\t/* keyup */", "-\t\tEvent keyEvent = new Event ();", "-\t\tkeyEvent.widget = browser;", "-\t\tkeyEvent.type = SWT.KeyUp;", "-\t\tkeyEvent.keyCode = lastKeyCode;", "-\t\tkeyEvent.character = (char)lastCharCode;", "-\t\tkeyEvent.stateMask =", "-\t\t\t(((Boolean)arguments[3]).booleanValue () ? SWT.ALT : 0) |", "-\t\t\t(((Boolean)arguments[4]).booleanValue () ? SWT.CTRL : 0) |", "-\t\t\t(((Boolean)arguments[5]).booleanValue () ? SWT.SHIFT : 0) |", "-\t\t\t(((Boolean)arguments[6]).booleanValue () ? SWT.COMMAND : 0);", "-\t\tswitch (lastKeyCode) {", "-\t\t\tcase SWT.SHIFT:", "-\t\t\tcase SWT.CONTROL:", "-\t\t\tcase SWT.ALT:", "-\t\t\tcase SWT.COMMAND: {", "-\t\t\t\tkeyEvent.stateMask |= lastKeyCode;", "-\t\t\t}", "-\t\t}", "-\t\tbrowser.notifyListeners (keyEvent.type, keyEvent);", "-\t\tlastKeyCode = lastCharCode = 0;", "-\t\treturn keyEvent.doit && !browser.isDisposed ();", "+\tkeyCode = translateKey (keyCode);", "+\tif (keyCode == 0) {", "+\t\t/* indicates a key for which key events are not sent */", "+\t\treturn true;", "+\t}", "+\tif (keyCode != lastKeyCode) {", "+\t\t/* keyup does not correspond to the last keydown */", "+\t\tlastKeyCode = keyCode;", "+\t\tlastCharCode = 0;", "-\t/* mouse events */", "+\tEvent keyEvent = new Event ();", "+\tkeyEvent.widget = browser;", "+\tkeyEvent.type = SWT.KeyUp;", "+\tkeyEvent.keyCode = lastKeyCode;", "+\tkeyEvent.character = (char)lastCharCode;", "+\tkeyEvent.stateMask = (altKey ? SWT.ALT : 0) | (ctrlKey ? SWT.CTRL : 0) | (shiftKey ? SWT.SHIFT : 0) | (metaKey ? SWT.COMMAND : 0);", "+\tswitch (lastKeyCode) {", "+\t\tcase SWT.SHIFT:", "+\t\tcase SWT.CONTROL:", "+\t\tcase SWT.ALT:", "+\t\tcase SWT.COMMAND: {", "+\t\t\tkeyEvent.stateMask |= lastKeyCode;", "+\t\t}", "+\t}", "+\tbrowser.notifyListeners (keyEvent.type, keyEvent);", "+\tlastKeyCode = lastCharCode = 0;", "+\treturn keyEvent.doit && !browser.isDisposed ();", "+}", "-\tPoint position = new Point (((Double)arguments[1]).intValue (), ((Double)arguments[2]).intValue ());", "-\tint mask =", "-\t\t(((Boolean)arguments[5]).booleanValue () ? SWT.ALT : 0) |", "-\t\t(((Boolean)arguments[6]).booleanValue () ? SWT.CTRL : 0) |", "-\t\t(((Boolean)arguments[7]).booleanValue () ? SWT.SHIFT : 0) |", "-\t\t(((Boolean)arguments[8]).booleanValue () ? SWT.COMMAND : 0);", "-\t\tmouseEvent.count = ((Double)arguments[3]).intValue ();", "-\t\tmouseEvent.button = ((Double)arguments[4]).intValue ();", "-\t\tif (((Double)arguments[3]).intValue () == 2) {", "-\t\t\tmouseEvent.count = ((Double)arguments[3]).intValue ();", "-\t\t\tmouseEvent.button = ((Double)arguments[4]).intValue ();", "-\t\tmouseEvent.count = ((Double)arguments[3]).intValue ();", "-\t\tmouseEvent.button = ((Double)arguments[4]).intValue ();", "-\t\tmouseEvent.count = ((Double)arguments[3]).intValue ();", "-\t\tmouseEvent.button = ((Double)arguments[4]).intValue () + 1;"]}], "num": 43421}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "499e018fd64bd0414bb73071c31804cc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a7f980ccd96e37a0f66ab02f8c98090", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 99, "signatureBeforeChange": " public void setItemCount (int count)", "signatureAfterChange": " public void setItemCount (int count)", "diff": ["- */", "+}", "-\tint itemCount = getItemCount ();", "+\tint itemCount = items.length;", "-\tsetRedraw (false);", "-\tremove (count, itemCount - 1);", "-\tfor (int i = itemCount; i<count; i++) {", "-\t\tnew TableItem (this, SWT.NONE);", "-\t}", "-\tsetRedraw (true);", "-}", "+\t", "+\t/* if the new item count is less than the current count then remove all excess items from the end */", "+\tif (count < itemCount) {", "+\t\tfor (int i = count; i < itemCount; i++) {", "+\t\t\titems [i].dispose (false);", "+\t\t}", "+", "+\t\tint newSelectedCount = 0;", "+\t\tfor (int i = 0; i < selectedItems.length; i++) {", "+\t\t\tif (!selectedItems [i].isDisposed ()) newSelectedCount++;", "+\t\t}", "+\t\tTableItem[] newSelectedItems = new TableItem [newSelectedCount];", "+\t\tint pos = 0;", "+\t\tfor (int i = 0; i < selectedItems.length; i++) {", "+\t\t\tTableItem item = selectedItems [i];", "+\t\t\tif (!item.isDisposed ()) {", "+\t\t\t\tnewSelectedItems [pos++] = item;", "+\t\tselectedItems = newSelectedItems;", "+", "+\t\tint visibleItemCount = (getClientArea ().height - getHeaderHeight ()) / itemHeight;", "+\t\ttopIndex = Math.min (topIndex, Math.max (0, count - visibleItemCount));", "+\t\tif (anchorItem != null && anchorItem.isDisposed ()) anchorItem = null;", "+\t\tif (focusItem != null && focusItem.isDisposed ()) {", "+\t\t\tTableItem newFocusItem = count > 0 ? items [count - 1] : null; ", "+\t\t\tsetFocusItem (newFocusItem, false);", "+\t\t}", "+\t", "+\tTableItem[] newItems = new TableItem [count];", "+\tSystem.arraycopy (items, 0, newItems, 0, Math.min (count, itemCount));", "+\titems = newItems;", "+\tfor (int i = itemCount; i < count; i++) {", "+\t\titems [i] = new TableItem (this, SWT.NONE, i, false);", "+\t}", "+", "+\tupdateVerticalBar ();", "+\tupdateHorizontalBar ();", "+\tredraw ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "818091e53a6e1a8131ae9ebb4a4405cb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "07a46e8f1baf40ffa37f64002699ab20e003e2f6", "commitAfterChange": "2d43eab414d246f6d1d46d3c78a4ed9ad1289c94", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": "  public void setItemCount (int count)", "signatureAfterChange": "  public void setItemCount (int count)", "diff": ["+\tcheckItems (true);", "+\tcount = Math.max (0, count);", "+\tif (count == itemCount) return;", "-\tremoveAll ();", "-\titemCount = Math.max (0, count);", "-\titems = new TableItem [(itemCount + 3) / 4 * 4];", "-\tif ((style & SWT.VIRTUAL) == 0) {", "-\t\tfor (int i=0; i<itemCount; i++) {", "-\t\t\titems [i] = new TableItem (this, SWT.NONE, i, true);", "-\t\t}", "-\t}", "-", "-\t/*", "-\t* Feature in the Mac. When AddDataBrowserItems() is used", "-\t* to add items, item notification callbacks are issued with", "-\t* the message kDataBrowserItemAdded.  When many items are", "-\t* added, this is slow.  The fix is to temporarily remove", "-\t* the item notification callback.", "-\t*/", "-\tDataBrowserCallbacks callbacks = new DataBrowserCallbacks ();", "+    int[] top = new int [1], left = new int [1];", "+    OS.GetDataBrowserScrollPosition (handle, top, left);", "+    DataBrowserCallbacks callbacks = new DataBrowserCallbacks ();", "+\tif (count < itemCount) {", "+\t\tint index = count;", "+\t\twhile (index < itemCount) {", "+\t\t\tint [] id = new int [] {index + 1};", "+\t\t\tif (OS.RemoveDataBrowserItems (handle, OS.kDataBrowserNoItem, id.length, id, 0) != OS.noErr) {", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tTableItem item = items [index];", "+\t\t\tif (item != null) item.releaseResources ();", "+\t\t\tindex++;", "+\t\t}", "+\t\tif (index < itemCount) error (SWT.ERROR_ITEM_NOT_REMOVED);", "+\t}", "+\tTableItem [] newItems = new TableItem [(count + 3) / 4 * 4];", "+\tSystem.arraycopy (items, 0, newItems, 0, Math.min (count, itemCount));", "+\titems = newItems;", "+\tif ((style & SWT.VIRTUAL) == 0) {", "+\t\tfor (int i=count; i<itemCount; i++) {", "+\t\t\titems [i] = new TableItem (this, SWT.NONE, i, false);", "+\t\t}", "+\t}", "+\titemCount = count;"]}], "num": 34412}
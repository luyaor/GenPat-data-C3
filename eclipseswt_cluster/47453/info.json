{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "80b01c74f4f067bf2d1174f9ecb421ba", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2461b7acfea5d8f0776837ab56fa583", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "89dd18f56416766e9f25e99fa93a3cfdf736ff7e", "commitAfterChange": "0333c3cd6e1227d0185cdb60c13b053083d72b21", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-", "-\tbyte[] data = (byte[])super.nativeToJava(transferData);", "-\tif (data == null) return null;", "-\tchar[] unicode = Converter.mbcsToWcs(null, data);", "-\tString string  = new String(unicode);", "-\t// parse data and convert string to array of files", "-\tint start = string.indexOf(\"file:\");", "-\tif (start == -1) return null;", "-\tstart += 5;", "-\tString[] fileNames = new String[0];", "-\twhile (start < string.length()) { ", "-\t\tint end = string.indexOf(\"\\r\", start);", "-\t\tif (end == -1) end = string.length() - 1;", "-\t\tString fileName = string.substring(start, end);", "-\t\t", "-\t\tString[] newFileNames = new String[fileNames.length + 1];", "-\t\tSystem.arraycopy(fileNames, 0, newFileNames, 0, fileNames.length);", "-\t\tnewFileNames[fileNames.length] = fileName;", "-\t\tfileNames = newFileNames;", "-", "-\t\tstart = string.indexOf(\"file:\", end);", "-\t\tif (start == -1) break;", "-\t\tstart += 5;", "+\tif (!isSupportedType(transferData) || transferData.data == null) return null;", "+\tif (transferData.data.length == 0) return null;", "+\t", "+\tif (transferData.type == URILISTID) {", "+\t\tbyte[] data = transferData.data[0];", "+\t\tif (data.length == 0) return null;", "+\t\tchar[] chars = new char[(data.length + 1) / 2];", "+\t\tOS.memcpy(chars, data, data.length);", "+\t\tString str = new String(chars);", "+\t\tint start = str.indexOf(URILIST_PREFIX);", "+\t\tif (start == -1) return null;", "+\t\tstart += URILIST_PREFIX.length();", "+\t\tString[] fileNames = new String[0];", "+\t\twhile (start < str.length()) { ", "+\t\t\tint end = str.indexOf(URILIST_SEPARATOR, start);", "+\t\t\tif (end == -1) end = str.length() - 1;", "+\t\t\tString fileName = str.substring(start, end);", "+\t\t\tString[] newFileNames = new String[fileNames.length + 1];", "+\t\t\tSystem.arraycopy(fileNames, 0, newFileNames, 0, fileNames.length);", "+\t\t\tnewFileNames[fileNames.length] = fileName;", "+\t\t\tfileNames = newFileNames;", "+\t\t\tstart = str.indexOf(URILIST_PREFIX, end);", "+\t\t\tif (start == -1) break;", "+\t\t\tstart += URILIST_PREFIX.length();", "+\t\t}", "+\t\treturn fileNames;", "-\treturn fileNames;", "+\tif (transferData.type == HFSID) {", "+\t\tint count = transferData.data.length;", "+\t\tString[] fileNames = new String[count];", "+\t\tfor (int i=0; i<count; i++) {", "+\t\t\tbyte[] data = transferData.data[i];", "+\t\t\tbyte[] fsspec = new byte[data.length - 10];", "+\t\t\tSystem.arraycopy(data, 10, fsspec, 0, fsspec.length);", "+\t\t\tbyte[] fsRef = new byte[80];", "+\t\t\tif (OS.FSpMakeFSRef(fsspec, fsRef) != OS.noErr) return null;", "+\t\t\tint url = OS.CFURLCreateFromFSRef(OS.kCFAllocatorDefault, fsRef);", "+\t\t\tif (url == 0) return null;", "+\t\t\ttry {", "+\t\t\t\tint path = OS.CFURLCopyFileSystemPath(url, OS.kCFURLPOSIXPathStyle);", "+\t\t\t\tif (path == 0) return null;", "+\t\t\t\ttry {", "+\t\t\t\t\tint length = OS.CFStringGetLength(path);", "+\t\t\t\t\tif (length == 0) return null;", "+\t\t\t\t\tchar[] buffer= new char[length];", "+\t\t\t\t\tCFRange range = new CFRange();", "+\t\t\t\t\trange.length = length;", "+\t\t\t\t\tOS.CFStringGetCharacters(path, range, buffer);", "+\t\t\t\t\tfileNames[i] = new String(buffer);", "+\t\t\t\t} finally {", "+\t\t\t\t\tOS.CFRelease(path);", "+\t\t\t\t}", "+\t\t\t} finally {", "+\t\t\t\tOS.CFRelease(url);", "+\t\t\t}", "+\t\t}", "+\t\treturn fileNames;", "+\t}", "+\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b7b2dd75fea529988d99a1b984b4c0e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "89dd18f56416766e9f25e99fa93a3cfdf736ff7e", "commitAfterChange": "0333c3cd6e1227d0185cdb60c13b053083d72b21", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void javaToNative(Object object, TransferData transferData)", "signatureAfterChange": " public void javaToNative(Object object, TransferData transferData)", "diff": ["-\tif (object == null || !(object instanceof String[])) return;", "-\t// build a byte array from data", "+\ttransferData.result = -1;", "+\tif (object == null || !(object instanceof String[]) || !isSupportedType(transferData)) return;", "-\t", "-\t// create a string separated by \"new lines\" to represent list of files", "-\tString nativeFormat = \"\";", "-\tfor (int i = 0, length = files.length; i < length; i++){", "-\t\tnativeFormat += \"file:\"+files[i]+\"\\r\";", "+\tif (files.length == 0) return;\t\t", "+", "+\tif (transferData.type == URILISTID) {", "+\t\t// create a string separated by \"new lines\" to represent list of files", "+\t\tStringBuffer sb = new StringBuffer();", "+\t\tfor (int i = 0, length = files.length; i < length; i++){", "+\t\t\tsb.append(URILIST_PREFIX);", "+\t\t\tsb.append(files[i]);", "+\t\t\tsb.append(URILIST_SEPARATOR);", "+\t\t}", "+\t\tString str = sb.toString();", "+\t\tchar[] chars = new char[str.length()];", "+\t\tstr.getChars (0, chars.length, chars, 0);", "+\t\tbyte[] buffer = new byte[chars.length * 2];", "+\t\tOS.memcpy(buffer, chars, buffer.length);", "+\t\ttransferData.data = new byte[1][];", "+\t\ttransferData.data[0] = buffer;", "+\t\ttransferData.result = 0;", "-\tbyte[] buffer = Converter.wcsToMbcs(null, nativeFormat, true);", "-\t// pass byte array on to super to convert to native", "-\tsuper.javaToNative(buffer, transferData);", "+\tif (transferData.type == HFSID) {", "+\t\tbyte[][] data = new byte[files.length][];", "+\t\tfor (int i = 0; i < data.length; i++) {", "+\t\t\tFile file = new File(files[i]);", "+\t\t\tboolean isDirectory = file.isDirectory();", "+\t\t\tString fileName = files[i];", "+\t\t\tchar [] chars = new char [fileName.length ()];", "+\t\t\tfileName.getChars (0, chars.length, chars, 0);", "+\t\t\tint cfstring = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, chars, chars.length);", "+\t\t\tif (cfstring == 0) return;", "+\t\t\ttry {", "+\t\t\t\tint url = OS.CFURLCreateWithFileSystemPath(OS.kCFAllocatorDefault, cfstring, OS.kCFURLPOSIXPathStyle, isDirectory);", "+\t\t\t\tif (url == 0) return;", "+\t\t\t\ttry {", "+\t\t\t\t\tbyte[] fsRef = new byte[80];", "+\t\t\t\t\tif (!OS.CFURLGetFSRef(url, fsRef)) return;", "+\t\t\t\t\tbyte[] fsSpec = new byte[70];", "+\t\t\t\t\tif (OS.FSGetCatalogInfo(fsRef, 0, null, null, fsSpec, null) != OS.noErr) return;", "+\t\t\t\t\tbyte[] hfsflavor = new byte[10 + fsSpec.length];", "+\t\t\t\t\t//OS.FpGetFInfo();", "+\t\t\t\t\tSystem.arraycopy(fsSpec, 0, hfsflavor, 10, fsSpec.length);", "+\t\t\t\t\tdata[i] = hfsflavor;", "+\t\t\t\t} finally {", "+\t\t\t\t\tOS.CFRelease(url);", "+\t\t\t\t}", "+\t\t\t} finally {", "+\t\t\t\tOS.CFRelease(cfstring);", "+\t\t\t}", "+\t\t}", "+\t\ttransferData.data = data;", "+\t\ttransferData.result = 0;", "+\t}"]}], "num": 47453}
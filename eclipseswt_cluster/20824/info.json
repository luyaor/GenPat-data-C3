{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b2657663d17a2b62e08008b4787813d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d23e145e682b9f401fe7b2b4fd4728a9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "e47df76d163af4f58b4ff75ede51b2d44b867113", "commitAfterChange": "3f7ecfe6e315a0b4f295c795b6e7685b24b44f23", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\t * Bug in Safari. The WebView must be added after the top window is visible", "-\t * or it eats mouse events from the top window. A second issue is that the WebView ", "-\t * does not receive mouse and key events when it is added to a visible top window. ", "-\t * It is assumed that Safari hooks its own event listener when the top window ", "-\t * emits the kEventWindowShown event. The workaround to the first problem is to add", "-\t * the WebView to the HIView after the top window is visible. The workaround to the second", "-\t * problem is to send a fake kEventWindowShown event to the top window after the WebView", "-\t * has been added to the HIView (after the top window is visible) to give Safari a chance", "-\t * to hook events.", "+\t * Bug in Safari. The WebView does not receive mouse and key events when it is added", "+\t * to a visible top window.  It is assumed that Safari hooks its own event listener", "+\t * when the top window emits the kEventWindowShown event. The workaround is to send a", "+\t * fake kEventWindowShown event to the top window after the WebView has been added", "+\t * to the HIView (after the top window is visible) to give Safari a chance to hook", "+\t * events.", "+\tOS.HIViewAddSubview(handle, webViewHandle);", "+\tOS.HIViewSetVisible(webViewHandle, true);\t", "-\t\tadded = true;", "-\t\tOS.HIViewAddSubview(handle, webViewHandle);", "-\t\tOS.HIViewSetVisible(webViewHandle, true);", "-\t\t", "-\t\t\t\t\tif (!added && e.widget == getShell()) {", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* Bug in Safari. The WebView must be added after the top window is visible", "-\t\t\t\t\t\t* or it eats mouse events from the top window. A second issue is that the WebView ", "-\t\t\t\t\t\t* does not receive mouse and key events when it is added to a visible top window. ", "-\t\t\t\t\t\t* It is assumed that Safari hooks its own event listener when the top window ", "-\t\t\t\t\t\t* emits the kEventWindowShown event. The workaround to the first problem is to add", "-\t\t\t\t\t\t* the WebView to the HIView after the top window is visible. The workaround to the second", "-\t\t\t\t\t\t* problem is to send a fake kEventWindowShown event to the top window after the WebView", "-\t\t\t\t\t\t* has been added to the HIView (after the top window is visible) to give Safari a chance", "-\t\t\t\t\t\t* to hook events.", "-\t\t\t\t\t\t* ", "-\t\t\t\t\t\t* Note. SWT.Show is sent before the Shell is actually visible. The workaround is to", "-\t\t\t\t\t\t* add the WebView to the HiView from an asyncExec, after this notification has returned and", "-\t\t\t\t\t\t* made the Shell visible.", "-\t\t\t\t\t\t* Note. Because the Shell is already visible when WebView is added to the HiView and the real", "-\t\t\t\t\t\t* kEventWindowShow event has therefore been sent already, we need to send a fake kEventWindowShown", "-\t\t\t\t\t\t* event so that Safari can hook its events.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tfinal Shell shell = getShell();", "-\t\t\t\t\t\tgetDisplay().asyncExec(new Runnable() { ", "-\t\t\t\t\t\t\tpublic void run() {", "-\t\t\t\t\t\t\t\tif (isDisposed() || shell.isDisposed()) return;", "-\t\t\t\t\t\t\t\tif (added || !shell.isVisible()) return;", "-\t\t\t\t\t\t\t\tadded = true;", "-\t\t\t\t\t\t\t\tOS.HIViewAddSubview(handle, webViewHandle);", "-\t\t\t\t\t\t\t\tOS.HIViewSetVisible(webViewHandle, true);", "-", "-\t\t\t\t\t\t\t\tint[] showEvent = new int[1];", "-\t\t\t\t\t\t\t\tOS.CreateEvent(0, OS.kEventClassWindow, OS.kEventWindowShown, 0.0, OS.kEventAttributeUserEvent, showEvent);", "-\t\t\t\t\t\t\t\tOS.SetEventParameter(showEvent[0], OS.kEventParamDirectObject, OS.typeWindowRef, 4, new int[] {OS.GetControlOwner(handle)});", "-\t\t\t\t\t\t\t\tOS.SendEventToEventTarget(showEvent[0], OS.GetWindowEventTarget(OS.GetControlOwner(handle)));", "-\t\t\t\t\t\t\t\tif (showEvent[0] != 0) OS.ReleaseEvent(showEvent[0]);", "-", "-\t\t\t\t\t\t\t\tCGRect bounds = new CGRect();", "-\t\t\t\t\t\t\t\tOS.HIViewGetFrame(handle, bounds);", "-\t\t\t\t\t\t\t\t/* ", "-\t\t\t\t\t\t\t\t* Note.  Setting negative width or height causes Safari to always", "-\t\t\t\t\t\t\t\t* display incorrectly even if further resize events are correct.", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\tif (bounds.width < 0) bounds.width = 0;", "-\t\t\t\t\t\t\t\tif (bounds.height < 0) bounds.height = 0;", "-\t\t\t\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t});", "-\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7fb7e246e6af5fd0e72315569e16b53", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "2a9bec4cc92d05b864a6b5dea199e38d5dda5649", "commitAfterChange": "e466860c6da17975be249d6dc77b6da1b30692ab", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t* Bug in Safari.  For some reason, when a window contains a", "-\t* WebView, VoiceOver no longer follows focus.  The VoiceOver", "-\t* cursor (activated by Control+Alt+arrows) continues to work,", "-\t* but keyboard focus is not tracked.  The fix is to create", "-\t* and dispose a cocoa button once per window.  This must be", "-\t* done before the WebView is created or the problem persists.", "-\t* ", "-\t* NOTE:  This only happens on OSX 10.5 (Leopard).", "+\t* Bug in Safari on OSX 10.5 (Leopard) only.  VoiceOver no longer follows focus when", "+\t* HIWebViewCreate is used to create a WebView.  The VoiceOver cursor (activated by", "+\t* Control+Alt+arrows) continues to work, but keyboard focus is not tracked.  The fix", "+\t* is to create the WebView with HICocoaViewCreate (api introduced in OSX 10.5) when", "+\t* running on OSX 10.5.", "+\tint outControl[] = new int[1];", "-\t\tShell shell = parent.getShell();", "-\t\tif (shell.getData(BROWSER_COCOA_BUTTON) == null) {", "-\t\t\tint[] root = new int[1];", "-\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(parent.handle)), OS.kHIViewWindowContentID(), root);", "-\t\t\tint rootHandle = root[0];", "-\t\t\tint buttonHandle = Cocoa.objc_msgSend(Cocoa.objc_msgSend(Cocoa.C_NSButton, Cocoa.S_alloc), Cocoa.S_initWithFrame, new NSRect());", "-\t\t\tint outControl[] = new int[1];", "-\t\t\tCocoa.HICocoaViewCreate(buttonHandle, 0, outControl);", "-\t\t\tOS.HIViewSetFrame(outControl[0], new CGRect());", "-\t\t\tOS.HIViewSetVisible(outControl[0], false);", "-\t\t\tOS.HIViewAddSubview(rootHandle, outControl[0]);", "-\t\t\tOS.DisposeControl(outControl[0]);", "-\t\t\tshell.setData(BROWSER_COCOA_BUTTON, \"true\"); //$NON-NLS-1$", "+\t\twebView = Cocoa.objc_msgSend(Cocoa.objc_msgSend(Cocoa.C_WebView, Cocoa.S_alloc), Cocoa.S_initWithFrame_frameName_groupName, new NSRect(), 0, 0);", "+\t\tif (webView != 0) {", "+\t\t\tCocoa.HICocoaViewCreate(webView, 0, outControl);", "+\t\t\twebViewHandle = outControl[0];\t\t", "+\t\t}", "+\t} else {", "+\t\tCocoa.HIWebViewCreate(outControl);", "+\t\twebViewHandle = outControl[0];", "+\t\tif (webViewHandle != 0) {", "+\t\t\twebView = Cocoa.HIWebViewGetWebView(webViewHandle);", "-", "-\tint outControl[] = new int[1];", "-\ttry {", "-\t\tCocoa.HIWebViewCreate(outControl);", "-\t} catch (UnsatisfiedLinkError e) {", "+\tif (webViewHandle == 0) {", "-\twebViewHandle = outControl[0];", "-\tif (webViewHandle == 0) {", "-\t\tbrowser.dispose();", "-\t\tSWT.error(SWT.ERROR_NO_HANDLES);\t\t", "-\t}", "+", "-\tfinal int webView = Cocoa.HIWebViewGetWebView(webViewHandle);", "-\t\t\t\tcase SWT.Activate: {", "-\t\t\t\t\tCocoa.objc_msgSend(Cocoa.objc_msgSend(Cocoa.HIWebViewGetWebView(webViewHandle), Cocoa.S_window), Cocoa.S_makeKeyWindow);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\tbrowser.getShell().addListener(SWT.Activate, listener);", "-\t\tCocoa.objc_msgSend(Cocoa.objc_msgSend(Cocoa.HIWebViewGetWebView(webViewHandle), Cocoa.S_window), Cocoa.S_makeKeyWindow);", "+\t\tCocoa.objc_msgSend(Cocoa.objc_msgSend(webView, Cocoa.S_window), Cocoa.S_makeKeyWindow);"]}], "num": 20824}
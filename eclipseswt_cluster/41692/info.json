{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62288d26fe2d2d2d6cc9392e829767b0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8cc9d78d42c6ea90178a31ddd15f3ae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "d92832f7f35479b68af178a8f84b854951fa1498", "commitAfterChange": "99fcc5706076e4a6fca5bfd237bf24c8fa098873", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r void bringToTop (boolean force)", "signatureAfterChange": "\r void bringToTop (boolean force)", "diff": ["-\t/*\r", "-\t* Feature in X.  Calling XSetInputFocus() when the\r", "-\t* widget is not viewable causes an X bad match error.\r", "-\t* The fix is to call XSetInputFocus() when the widget\r", "-\t* is viewable.\r", "-\t*/\r", "-\tif (minimized) return;\r", "-\tif (!isVisible ()) return;\r", "-\tint xDisplay = OS.XtDisplay (handle);\r", "-\tif (xDisplay == 0) return;\r", "-\tint xWindow = OS.XtWindow (handle);\r", "-\tif (xWindow == 0) return;\r", "-\tif (!force) {\r", "-\t\tint [] buffer1 = new int [1], buffer2 = new int [1];\r", "-\t\tOS.XGetInputFocus (xDisplay, buffer1, buffer2);\r", "-\t\tif (buffer1 [0] == 0) return;\r", "-\t\tint handle = OS.XtWindowToWidget (xDisplay, buffer1 [0]);\r", "-\t\tif (handle == 0) return;\r", "-\t}\r", "-\tOS.XSetInputFocus (xDisplay, xWindow, OS.RevertToParent, OS.CurrentTime);\r", "+\tmoveAbove (null);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "571f5c7aa120da0703bb96d683f6b808", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "ed8f32b56b812cdf00115072db13b1229571e186", "commitAfterChange": "ab9053c170cd5f8a90daf93de82e0a79f1e92b73", "methodNumberBeforeChange": 157, "methodNumberAfterChange": 157, "signatureBeforeChange": " int XFocusChange (int w, int client_data, int call_data, int continue_to_dispatch)", "signatureAfterChange": " int XFocusChange (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-\t/*", "-\t* Ignore focus change events when the window getting or losing", "-\t* focus is a menu.  Because XmGetFocusWidget() does not answer", "-\t* the menu shell (it answers the menu parent), it is necessary", "-\t* to use XGetInputFocus() to get the real X focus window.", "-\t*/", "-\tint xDisplay = xEvent.display;", "-\tif (xDisplay == 0) return 0;", "-\tint [] unused = new int [1], xWindow = new int [1];", "-\tOS.XGetInputFocus (xDisplay, xWindow, unused);", "-\tif (xWindow [0] != 0) {", "-\t\tint widget = OS.XtWindowToWidget (xDisplay, xWindow [0]);", "-\t\tif (widget != 0 && OS.XtClass (widget) == OS.xmMenuShellWidgetClass ()) return 0;", "-\t}", "-\t"]}], "num": 41692}
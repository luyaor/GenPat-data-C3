{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72ea1a4a37aaef2cda26a6f9019782b9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad545f68f7673485266877fff39a7498", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/ByteArrayTransfer.java", "commitBeforeChange": "74553fa6850361f786837718de64643b391519f8", "commitAfterChange": "bf33a068cd8d34feb66b3cb1cbaacdbe09b72620", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void javaToNative (Object object, TransferData transferData)", "signatureAfterChange": " protected void javaToNative (Object object, TransferData transferData)", "diff": ["-protected void javaToNative (Object object, TransferData transferData){", "-\tif (object == null || !(object instanceof byte[])) {", "-\t\ttransferData.result = COM.E_FAIL;", "-\t\treturn;", "-\t}", "-", "-\tbyte[] data = (byte[])object;", "-\t", "-\tif (isSupportedType(transferData)) {", "-\t\t// Allocate the memory because the caller (DropTarget) has not handed it in", "-\t\t// The caller of this method must release the data when it is done with it.", "-\t\tint size = data.length;", "-\t\tint newPtr = OS.GlobalAlloc(OS.GMEM_FIXED | OS.GMEM_ZEROINIT, size);", "-\t\tOS.MoveMemory(newPtr, data, size);", "-\t\t", "+protected void javaToNative (Object object, TransferData transferData) {", "+\ttransferData.result = COM.E_FAIL;", "+\tif (object == null || !(object instanceof byte[])) return;", "+\tif (!isSupportedType(transferData)) {", "+\t\t// did not match the TYMED", "-\t\ttransferData.stgmedium.tymed = COM.TYMED_HGLOBAL;", "-\t\ttransferData.stgmedium.unionField = newPtr;", "-\t\ttransferData.stgmedium.pUnkForRelease = 0;", "-\t\ttransferData.result = COM.S_OK;", "+\t\ttransferData.result = COM.DV_E_TYMED;", "-\t", "-\t// did not match the TYMED", "+\t// Allocate the memory because the caller (DropTarget) has not handed it in", "+\t// The caller of this method must release the data when it is done with it.", "+\tbyte[] data = (byte[])object;", "+\tint size = data.length;", "+\tint newPtr = OS.GlobalAlloc(OS.GMEM_FIXED | OS.GMEM_ZEROINIT, size);", "+\tOS.MoveMemory(newPtr, data, size);\t", "-\ttransferData.result = COM.DV_E_TYMED;", "+\ttransferData.stgmedium.tymed = COM.TYMED_HGLOBAL;", "+\ttransferData.stgmedium.unionField = newPtr;", "+\ttransferData.stgmedium.pUnkForRelease = 0;", "+\ttransferData.result = COM.S_OK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0756450e1388e9dd21fc30629ce78706", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "74553fa6850361f786837718de64643b391519f8", "commitAfterChange": "bf33a068cd8d34feb66b3cb1cbaacdbe09b72620", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void javaToNative(Object object, TransferData transferData)", "signatureAfterChange": " public void javaToNative(Object object, TransferData transferData)", "diff": ["-", "-\tif (object == null || !(object instanceof String[])) {", "-\t\ttransferData.result = COM.E_FAIL;", "-\t\treturn;", "-\t}", "-\t", "-\tif (isSupportedType(transferData)) {", "-", "-\t\tString[] fileNames = (String[]) object;", "-\t\tStringBuffer allFiles = new StringBuffer();", "-\t\tfor (int i = 0; i < fileNames.length; i++) {", "-\t\t\tallFiles.append(fileNames[i]); ", "-\t\t\tallFiles.append('\\0'); // each name is null terminated", "-\t\t}", "-\t\tTCHAR buffer = new TCHAR(0, allFiles.toString(), true); // there is an extra null terminator at the very end", "-\t\t", "-\t\tDROPFILES dropfiles = new DROPFILES();", "-\t\tdropfiles.pFiles = DROPFILES.sizeof;", "-\t\tdropfiles.pt_x = dropfiles.pt_y = 0;", "-\t\tdropfiles.fNC = 0;", "-\t\tdropfiles.fWide = COM.IsUnicode ? 1 : 0;", "-\t\t", "-\t\t// Allocate the memory because the caller (DropTarget) has not handed it in", "-\t\t// The caller of this method must release the data when it is done with it.", "-\t\tint byteCount = buffer.length() * TCHAR.sizeof;", "-\t\tint newPtr = COM.GlobalAlloc(COM.GMEM_FIXED | COM.GMEM_ZEROINIT, DROPFILES.sizeof + byteCount);", "-\t\tCOM.MoveMemory(newPtr, dropfiles, DROPFILES.sizeof);", "-\t\tCOM.MoveMemory(newPtr + DROPFILES.sizeof, buffer, byteCount);", "-\t\t", "+\ttransferData.result = COM.E_FAIL;", "+\tif (object == null || !(object instanceof String[])) return;", "+\tif (!isSupportedType(transferData)) {", "+\t\t// did not match the TYMED", "-\t\ttransferData.stgmedium.tymed = COM.TYMED_HGLOBAL;", "-\t\ttransferData.stgmedium.unionField = newPtr;", "-\t\ttransferData.stgmedium.pUnkForRelease = 0;", "-\t\ttransferData.result = COM.S_OK;", "+\t\ttransferData.result = COM.DV_E_TYMED;", "-\t", "-\t// did not match the TYMED", "+", "+\tString[] fileNames = (String[]) object;", "+\tStringBuffer allFiles = new StringBuffer();", "+\tfor (int i = 0; i < fileNames.length; i++) {", "+\t\tallFiles.append(fileNames[i]); ", "+\t\tallFiles.append(CF_HDROP_SEPARATOR); // each name is null terminated", "+\t}", "+\tTCHAR buffer = new TCHAR(0, allFiles.toString(), true); // there is an extra null terminator at the very end", "+\tDROPFILES dropfiles = new DROPFILES();", "+\tdropfiles.pFiles = DROPFILES.sizeof;", "+\tdropfiles.pt_x = dropfiles.pt_y = 0;", "+\tdropfiles.fNC = 0;", "+\tdropfiles.fWide = COM.IsUnicode ? 1 : 0;", "+\t// Allocate the memory because the caller (DropTarget) has not handed it in", "+\t// The caller of this method must release the data when it is done with it.", "+\tint byteCount = buffer.length() * TCHAR.sizeof;", "+\tint newPtr = COM.GlobalAlloc(COM.GMEM_FIXED | COM.GMEM_ZEROINIT, DROPFILES.sizeof + byteCount);", "+\tCOM.MoveMemory(newPtr, dropfiles, DROPFILES.sizeof);", "+\tCOM.MoveMemory(newPtr + DROPFILES.sizeof, buffer, byteCount);", "-\ttransferData.result = COM.DV_E_TYMED;", "+\ttransferData.stgmedium.tymed = COM.TYMED_HGLOBAL;", "+\ttransferData.stgmedium.unionField = newPtr;", "+\ttransferData.stgmedium.pUnkForRelease = 0;", "+\ttransferData.result = COM.S_OK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8416805657acac9fbd082c373beac602", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/IME.java", "commitBeforeChange": "a8146be362e6520d2729e8bd8bff1b3aff69e786", "commitAfterChange": "634c4cd939fa6c419dfaf87ead839906e781d79f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  int gtk_preedit_changed (int imcontext)", "signatureAfterChange": "  int gtk_preedit_changed (int imcontext)", "diff": ["-\tif (isInlineIMEEnabled ()) {", "-\t\tranges = null;", "-\t\tstyles = null;", "-\t\tcommitCount = 0;", "-\t\tint /*long*/ imHandle = imHandle ();", "-\t\tint /*long*/ [] preeditString = new int /*long*/ [1];", "-\t\tint /*long*/ [] pangoAttrs = new int /*long*/ [1];", "-\t\tint [] cursorPos = new int [1];", "-\t\tOS.gtk_im_context_get_preedit_string (imHandle, preeditString, pangoAttrs, cursorPos);", "-\t\tcaretOffset = cursorPos [0];", "-\t\tchar [] chars = null;", "-\t\tif (preeditString [0] != 0) {", "-\t\t\tint length = OS.strlen (preeditString [0]);", "-\t\t\tbyte [] buffer = new byte [length];", "-\t\t\tOS.memmove (buffer, preeditString [0], length);", "-\t\t\tchars = Converter.mbcsToWcs (null, buffer);", "-\t\t\tif (pangoAttrs [0] != 0) {", "-\t\t\t\tint count = 0;", "-\t\t\t\tint /*long*/ iterator = OS.pango_attr_list_get_iterator (pangoAttrs [0]);", "-\t\t\t\twhile (OS.pango_attr_iterator_next (iterator)) count++;", "-\t\t\t\tOS.pango_attr_iterator_destroy (iterator);", "-\t\t\t\tranges = new int [count * 2];", "-\t\t\t\tstyles = new TextStyle [count];", "-\t\t\t\titerator = OS.pango_attr_list_get_iterator (pangoAttrs [0]);", "-\t\t\t\tPangoAttrColor attrColor = new PangoAttrColor ();", "-\t\t\t\tPangoAttrInt attrInt = new PangoAttrInt ();", "-\t\t\t\tint [] start = new int [1];", "-\t\t\t\tint [] end = new int [1];", "-\t\t\t\tfor (int i = 0; i < count; i++) {", "-\t\t\t\t\tOS.pango_attr_iterator_range (iterator, start, end);", "-\t\t\t\t\tranges [i * 2] = (int)/*64*/OS.g_utf8_pointer_to_offset (preeditString [0], preeditString [0] + start [0]);", "-\t\t\t\t\tranges [i * 2 + 1] = (int)/*64*/OS.g_utf8_pointer_to_offset (preeditString [0], preeditString [0] + end [0]) - ranges [i * 2];", "-\t\t\t\t\tstyles [i] = new TextStyle (null, null, null);", "-\t\t\t\t\tint /*long*/ attr = OS.pango_attr_iterator_get (iterator, OS.PANGO_ATTR_FOREGROUND);", "-\t\t\t\t\tif (attr != 0) {", "-\t\t\t\t\t\tOS.memmove (attrColor, attr, PangoAttrColor.sizeof);", "-\t\t\t\t\t\tGdkColor color = new GdkColor ();", "-\t\t\t\t\t\tcolor.red = attrColor.color_red;", "-\t\t\t\t\t\tcolor.green = attrColor.color_green;", "-\t\t\t\t\t\tcolor.blue = attrColor.color_blue;", "-\t\t\t\t\t\tstyles [i].foreground = Color.gtk_new (display, color);", "-\t\t\t\t\t}", "-\t\t\t\t\tattr = OS.pango_attr_iterator_get (iterator, OS.PANGO_ATTR_BACKGROUND);", "-\t\t\t\t\tif (attr != 0) {", "-\t\t\t\t\t\tOS.memmove (attrColor, attr, PangoAttrColor.sizeof);", "-\t\t\t\t\t\tGdkColor color = new GdkColor ();", "-\t\t\t\t\t\tcolor.red = attrColor.color_red;", "-\t\t\t\t\t\tcolor.green = attrColor.color_green;", "-\t\t\t\t\t\tcolor.blue = attrColor.color_blue;", "-\t\t\t\t\t\tstyles [i].background = Color.gtk_new (display, color);", "-\t\t\t\t\t}", "-\t\t\t\t\tattr = OS.pango_attr_iterator_get (iterator, OS.PANGO_ATTR_UNDERLINE);", "-\t\t\t\t\tif (attr != 0) {", "-\t\t\t\t\t\tOS.memmove (attrInt, attr, PangoAttrInt.sizeof);", "-\t\t\t\t\t\tstyles [i].underline = attrInt.value != OS.PANGO_UNDERLINE_NONE;;", "-\t\t\t\t\t\tstyles [i].underlineStyle = SWT.UNDERLINE_SINGLE;", "-\t\t\t\t\t\tswitch (attrInt.value) {", "-\t\t\t\t\t\t\tcase OS.PANGO_UNDERLINE_DOUBLE:", "-\t\t\t\t\t\t\t\tstyles [i].underlineStyle = SWT.UNDERLINE_DOUBLE;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\tcase OS.PANGO_UNDERLINE_ERROR:", "-\t\t\t\t\t\t\t\tstyles [i].underlineStyle = SWT.UNDERLINE_ERROR;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (styles [i].underline) {", "-\t\t\t\t\t\t\tattr = OS.pango_attr_iterator_get(iterator, OS.PANGO_ATTR_UNDERLINE_COLOR);", "-\t\t\t\t\t\t\tif (attr != 0) {", "-\t\t\t\t\t\t\t\tOS.memmove (attrColor, attr, PangoAttrColor.sizeof);", "-\t\t\t\t\t\t\t\tGdkColor color = new GdkColor ();", "-\t\t\t\t\t\t\t\tcolor.red = attrColor.color_red;", "-\t\t\t\t\t\t\t\tcolor.green = attrColor.color_green;", "-\t\t\t\t\t\t\t\tcolor.blue = attrColor.color_blue;", "-\t\t\t\t\t\t\t\tstyles [i].underlineColor = Color.gtk_new (display, color);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tOS.pango_attr_iterator_next (iterator);", "+\tif (!isInlineEnabled ()) return 0;", "+\tranges = null;", "+\tstyles = null;", "+\tcommitCount = 0;", "+\tint /*long*/ imHandle = imHandle ();", "+\tint /*long*/ [] preeditString = new int /*long*/ [1];", "+\tint /*long*/ [] pangoAttrs = new int /*long*/ [1];", "+\tint [] cursorPos = new int [1];", "+\tOS.gtk_im_context_get_preedit_string (imHandle, preeditString, pangoAttrs, cursorPos);", "+\tcaretOffset = cursorPos [0];", "+\tchar [] chars = null;", "+\tif (preeditString [0] != 0) {", "+\t\tint length = OS.strlen (preeditString [0]);", "+\t\tbyte [] buffer = new byte [length];", "+\t\tOS.memmove (buffer, preeditString [0], length);", "+\t\tchars = Converter.mbcsToWcs (null, buffer);", "+\t\tif (pangoAttrs [0] != 0) {", "+\t\t\tint count = 0;", "+\t\t\tint /*long*/ iterator = OS.pango_attr_list_get_iterator (pangoAttrs [0]);", "+\t\t\twhile (OS.pango_attr_iterator_next (iterator)) count++;", "+\t\t\tOS.pango_attr_iterator_destroy (iterator);", "+\t\t\tranges = new int [count * 2];", "+\t\t\tstyles = new TextStyle [count];", "+\t\t\titerator = OS.pango_attr_list_get_iterator (pangoAttrs [0]);", "+\t\t\tPangoAttrColor attrColor = new PangoAttrColor ();", "+\t\t\tPangoAttrInt attrInt = new PangoAttrInt ();", "+\t\t\tint [] start = new int [1];", "+\t\t\tint [] end = new int [1];", "+\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\tOS.pango_attr_iterator_range (iterator, start, end);", "+\t\t\t\tranges [i * 2] = (int)/*64*/OS.g_utf8_pointer_to_offset (preeditString [0], preeditString [0] + start [0]);", "+\t\t\t\tranges [i * 2 + 1] = (int)/*64*/OS.g_utf8_pointer_to_offset (preeditString [0], preeditString [0] + end [0]) - ranges [i * 2];", "+\t\t\t\tstyles [i] = new TextStyle (null, null, null);", "+\t\t\t\tint /*long*/ attr = OS.pango_attr_iterator_get (iterator, OS.PANGO_ATTR_FOREGROUND);", "+\t\t\t\tif (attr != 0) {", "+\t\t\t\t\tOS.memmove (attrColor, attr, PangoAttrColor.sizeof);", "+\t\t\t\t\tGdkColor color = new GdkColor ();", "+\t\t\t\t\tcolor.red = attrColor.color_red;", "+\t\t\t\t\tcolor.green = attrColor.color_green;", "+\t\t\t\t\tcolor.blue = attrColor.color_blue;", "+\t\t\t\t\tstyles [i].foreground = Color.gtk_new (display, color);", "-\t\t\t\tOS.pango_attr_iterator_destroy (iterator);", "-\t\t\t\tOS.pango_attr_list_unref (pangoAttrs [0]);\t", "+\t\t\t\tattr = OS.pango_attr_iterator_get (iterator, OS.PANGO_ATTR_BACKGROUND);", "+\t\t\t\tif (attr != 0) {", "+\t\t\t\t\tOS.memmove (attrColor, attr, PangoAttrColor.sizeof);", "+\t\t\t\t\tGdkColor color = new GdkColor ();", "+\t\t\t\t\tcolor.red = attrColor.color_red;", "+\t\t\t\t\tcolor.green = attrColor.color_green;", "+\t\t\t\t\tcolor.blue = attrColor.color_blue;", "+\t\t\t\t\tstyles [i].background = Color.gtk_new (display, color);", "+\t\t\t\t}", "+\t\t\t\tattr = OS.pango_attr_iterator_get (iterator, OS.PANGO_ATTR_UNDERLINE);", "+\t\t\t\tif (attr != 0) {", "+\t\t\t\t\tOS.memmove (attrInt, attr, PangoAttrInt.sizeof);", "+\t\t\t\t\tstyles [i].underline = attrInt.value != OS.PANGO_UNDERLINE_NONE;;", "+\t\t\t\t\tstyles [i].underlineStyle = SWT.UNDERLINE_SINGLE;", "+\t\t\t\t\tswitch (attrInt.value) {", "+\t\t\t\t\t\tcase OS.PANGO_UNDERLINE_DOUBLE:", "+\t\t\t\t\t\t\tstyles [i].underlineStyle = SWT.UNDERLINE_DOUBLE;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase OS.PANGO_UNDERLINE_ERROR:", "+\t\t\t\t\t\t\tstyles [i].underlineStyle = SWT.UNDERLINE_ERROR;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (styles [i].underline) {", "+\t\t\t\t\t\tattr = OS.pango_attr_iterator_get(iterator, OS.PANGO_ATTR_UNDERLINE_COLOR);", "+\t\t\t\t\t\tif (attr != 0) {", "+\t\t\t\t\t\t\tOS.memmove (attrColor, attr, PangoAttrColor.sizeof);", "+\t\t\t\t\t\t\tGdkColor color = new GdkColor ();", "+\t\t\t\t\t\t\tcolor.red = attrColor.color_red;", "+\t\t\t\t\t\t\tcolor.green = attrColor.color_green;", "+\t\t\t\t\t\t\tcolor.blue = attrColor.color_blue;", "+\t\t\t\t\t\t\tstyles [i].underlineColor = Color.gtk_new (display, color);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tOS.pango_attr_iterator_next (iterator);", "-\t\t\tOS.g_free (preeditString [0]);", "+\t\t\tOS.pango_attr_iterator_destroy (iterator);", "+\t\t\tOS.pango_attr_list_unref (pangoAttrs [0]);\t", "-\t\tif (chars != null) {", "-\t\t\tif (text.length() == 0) startOffset = -1;", "-\t\t\tif (startOffset == -1) {", "-\t\t\t\tCaret caret = parent.getCaret ();", "-\t\t\t\tstartOffset = caret != null ? caret.getOffset () : 0;", "-\t\t\t}", "-\t\t\tinComposition = true;", "-\t\t\tEvent event = new Event ();", "-\t\t\tevent.detail = SWT.COMPOSITION_CHANGED;", "-\t\t\tevent.start = startOffset;", "-\t\t\tevent.end = startOffset + text.length ();", "-\t\t\tevent.text = text = chars != null ? new String (chars) : \"\";", "-\t\t\tsendEvent (SWT.ImeComposition, event);", "-\t\t}", "-\t\treturn 1;", "+\t\tOS.g_free (preeditString [0]);", "-\treturn 0;", "+\tif (chars != null) {", "+\t\tif (text.length() == 0) startOffset = -1;", "+\t\tif (startOffset == -1) {", "+\t\t\tCaret caret = parent.getCaret ();", "+\t\t\tstartOffset = caret != null ? caret.getOffset () : 0;", "+\t\t}", "+\t\tinComposition = true;", "+\t\tEvent event = new Event ();", "+\t\tevent.detail = SWT.COMPOSITION_CHANGED;", "+\t\tevent.start = startOffset;", "+\t\tevent.end = startOffset + text.length ();", "+\t\tevent.text = text = chars != null ? new String (chars) : \"\";", "+\t\tsendEvent (SWT.ImeComposition, event);", "+\t}", "+\treturn 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fb07299f0812623464444f7e244419b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/IME.java", "commitBeforeChange": "87409dd82190b37fa754f5e929cac3f245e2f344", "commitAfterChange": "94be4e401a3fb2f42f015e966ff3c20eef54b12e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  LRESULT WM_IME_COMPOSITION (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_IME_COMPOSITION (int wParam, int lParam)", "diff": ["-\tif (isInlineIMEEnabled ()) {", "-\t\tranges = null;", "-\t\tstyles = null;", "-\t\tcaretOffset = commitCount = 0;", "-\t\tint /*long*/ hwnd = parent.handle;", "-\t\tint /*long*/ hIMC = OS.ImmGetContext (hwnd);", "-\t\tint codePage = parent.getCodePage ();", "-\t\tif (hIMC != 0) {", "-\t\t\tTCHAR buffer = null;", "-\t\t\tif ((lParam & OS.GCS_RESULTSTR) != 0) {", "-\t\t\t\tint length = OS.ImmGetCompositionString (hIMC, OS.GCS_RESULTSTR, null, 0);", "-\t\t\t\tif (length > 0) {", "-\t\t\t\t\tbuffer = new TCHAR (codePage, length / TCHAR.sizeof);", "-\t\t\t\t\tOS.ImmGetCompositionString (hIMC, OS.GCS_RESULTSTR, buffer, length);", "-\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\tevent.detail = SWT.COMPOSITION_CHANGED;", "-\t\t\t\t\tevent.start = startOffset;", "-\t\t\t\t\tevent.end = startOffset + text.length();", "-\t\t\t\t\tevent.text = text = buffer != null ? buffer.toString () : \"\";", "-\t\t\t\t\tcommitCount = text.length ();", "-\t\t\t\t\tsendEvent (SWT.ImeComposition, event);", "-\t\t\t\t\tString chars = text;", "-\t\t\t\t\ttext = \"\";", "-\t\t\t\t\tstartOffset = -1;", "-\t\t\t\t\tcommitCount = 0;", "-\t\t\t\t\tif (event.doit) {", "-\t\t\t\t\t\tDisplay display = this.display;", "-\t\t\t\t\t\tdisplay.lastKey = 0;", "-\t\t\t\t\t\tdisplay.lastVirtual = display.lastNull = display.lastDead = false;", "-\t\t\t\t\t\tlength = chars.length ();", "-\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\tchar c = chars.charAt (i);", "-\t\t\t\t\t\t\tdisplay.lastAscii = c;", "-\t\t\t\t\t\t\tevent = new Event ();", "-\t\t\t\t\t\t\tevent.character = c;", "-\t\t\t\t\t\t\tparent.sendEvent (SWT.KeyDown, event);", "-\t\t\t\t\t\t}", "+\tif (!isInlineEnabled ()) return null;", "+\tranges = null;", "+\tstyles = null;", "+\tcaretOffset = commitCount = 0;", "+\tint /*long*/ hwnd = parent.handle;", "+\tint /*long*/ hIMC = OS.ImmGetContext (hwnd);", "+\tint codePage = parent.getCodePage ();", "+\tif (hIMC != 0) {", "+\t\tTCHAR buffer = null;", "+\t\tif ((lParam & OS.GCS_RESULTSTR) != 0) {", "+\t\t\tint length = OS.ImmGetCompositionString (hIMC, OS.GCS_RESULTSTR, null, 0);", "+\t\t\tif (length > 0) {", "+\t\t\t\tbuffer = new TCHAR (codePage, length / TCHAR.sizeof);", "+\t\t\t\tOS.ImmGetCompositionString (hIMC, OS.GCS_RESULTSTR, buffer, length);", "+\t\t\t\tEvent event = new Event ();", "+\t\t\t\tevent.detail = SWT.COMPOSITION_CHANGED;", "+\t\t\t\tevent.start = startOffset;", "+\t\t\t\tevent.end = startOffset + text.length();", "+\t\t\t\tevent.text = text = buffer != null ? buffer.toString () : \"\";", "+\t\t\t\tcommitCount = text.length ();", "+\t\t\t\tsendEvent (SWT.ImeComposition, event);", "+\t\t\t\tString chars = text;", "+\t\t\t\ttext = \"\";", "+\t\t\t\tstartOffset = -1;", "+\t\t\t\tcommitCount = 0;", "+\t\t\t\tif (event.doit) {", "+\t\t\t\t\tDisplay display = this.display;", "+\t\t\t\t\tdisplay.lastKey = 0;", "+\t\t\t\t\tdisplay.lastVirtual = display.lastNull = display.lastDead = false;", "+\t\t\t\t\tlength = chars.length ();", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tchar c = chars.charAt (i);", "+\t\t\t\t\t\tdisplay.lastAscii = c;", "+\t\t\t\t\t\tevent = new Event ();", "+\t\t\t\t\t\tevent.character = c;", "+\t\t\t\t\t\tparent.sendEvent (SWT.KeyDown, event);", "-\t\t\t\tif ((lParam & OS.GCS_COMPSTR) == 0) return LRESULT.ONE;", "-\t\t\tbuffer = null;", "-\t\t\tif ((lParam & OS.GCS_COMPSTR) != 0) {", "-\t\t\t\tint length = OS.ImmGetCompositionString (hIMC, OS.GCS_COMPSTR, null, 0);", "-\t\t\t\tif (length > 0) {", "-\t\t\t\t\tbuffer = new TCHAR (codePage, length / TCHAR.sizeof);", "-\t\t\t\t\tOS.ImmGetCompositionString (hIMC, OS.GCS_COMPSTR, buffer, length);", "-\t\t\t\t\tif ((lParam & OS.GCS_CURSORPOS) != 0) {", "-\t\t\t\t\t\tcaretOffset = OS.ImmGetCompositionString (hIMC, OS.GCS_CURSORPOS, null, 0);", "+\t\t\tif ((lParam & OS.GCS_COMPSTR) == 0) return LRESULT.ONE;", "+\t\t}", "+\t\tbuffer = null;", "+\t\tif ((lParam & OS.GCS_COMPSTR) != 0) {", "+\t\t\tint length = OS.ImmGetCompositionString (hIMC, OS.GCS_COMPSTR, null, 0);", "+\t\t\tif (length > 0) {", "+\t\t\t\tbuffer = new TCHAR (codePage, length / TCHAR.sizeof);", "+\t\t\t\tOS.ImmGetCompositionString (hIMC, OS.GCS_COMPSTR, buffer, length);", "+\t\t\t\tif ((lParam & OS.GCS_CURSORPOS) != 0) {", "+\t\t\t\t\tcaretOffset = OS.ImmGetCompositionString (hIMC, OS.GCS_CURSORPOS, null, 0);", "+\t\t\t\t}", "+\t\t\t\tint [] clauses = null;", "+\t\t\t\tif ((lParam & OS.GCS_COMPCLAUSE) != 0) {", "+\t\t\t\t\tlength = OS.ImmGetCompositionStringW (hIMC, OS.GCS_COMPCLAUSE, (int [])null, 0);", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\tclauses = new int [length / 4];", "+\t\t\t\t\t\tOS.ImmGetCompositionStringW (hIMC, OS.GCS_COMPCLAUSE, clauses, length);", "-\t\t\t\t\tint [] clauses = null;", "-\t\t\t\t\tif ((lParam & OS.GCS_COMPCLAUSE) != 0) {", "-\t\t\t\t\t\tlength = OS.ImmGetCompositionStringW (hIMC, OS.GCS_COMPCLAUSE, (int [])null, 0);", "-\t\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\t\tclauses = new int [length / 4];", "-\t\t\t\t\t\t\tOS.ImmGetCompositionStringW (hIMC, OS.GCS_COMPCLAUSE, clauses, length);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif ((lParam & OS.GCS_COMPATTR) != 0 && clauses != null) {", "-\t\t\t\t\t\tlength = OS.ImmGetCompositionStringA (hIMC, OS.GCS_COMPATTR, (byte [])null, 0);", "-\t\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\t\tbyte [] attrs = new byte [length];", "-\t\t\t\t\t\t\tOS.ImmGetCompositionStringA (hIMC, OS.GCS_COMPATTR, attrs, length);", "-\t\t\t\t\t\t\tlength = clauses.length - 1;", "-\t\t\t\t\t\t\tranges = new int [length * 2];", "-\t\t\t\t\t\t\tstyles = new TextStyle [length];", "-\t\t\t\t\t\t\tint /*long*/ layout = OS.GetKeyboardLayout (0);", "-\t\t\t\t\t\t\tshort langID = (short)OS.LOWORD (layout);", "-\t\t\t\t\t\t\tTF_DISPLAYATTRIBUTE attr = null; ", "-\t\t\t\t\t\t\tTextStyle style = null;", "-\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\tranges [i * 2] = clauses [i];", "-\t\t\t\t\t\t\t\tranges [i * 2 + 1] = clauses [i + 1] - clauses [i];", "-\t\t\t\t\t\t\t\tstyles [i] = style = new TextStyle ();", "-\t\t\t\t\t\t\t\tattr = getDisplayAttribute (langID, attrs [clauses [i]]);", "-\t\t\t\t\t\t\t\tif (attr != null) {", "-\t\t\t\t\t\t\t\t\tswitch (attr.crText.type) {", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.foreground = Color.win32_new (display, attr.crText.cr);", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "-\t\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crText.cr);", "-\t\t\t\t\t\t\t\t\t\t\tstyle.foreground = Color.win32_new (display, colorRef);", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tswitch (attr.crBk.type) {", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.background = Color.win32_new (display, attr.crBk.cr);", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "-\t\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crBk.cr);", "-\t\t\t\t\t\t\t\t\t\t\tstyle.background = Color.win32_new (display, colorRef);", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tswitch (attr.crLine.type) {", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.underlineColor = Color.win32_new (display, attr.crLine.cr);", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "-\t\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crLine.cr);", "-\t\t\t\t\t\t\t\t\t\t\tstyle.underlineColor = Color.win32_new (display, colorRef);", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tstyle.underline = attr.lsStyle != OS.TF_LS_NONE;", "-\t\t\t\t\t\t\t\t\tswitch (attr.lsStyle) {", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_SQUIGGLE:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = SWT.UNDERLINE_ERROR;", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_DASH:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = UNDERLINE_IME_DASH; ", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_DOT:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = UNDERLINE_IME_DOT;", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_SOLID:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = attr.fBoldLine ? UNDERLINE_IME_THICK : SWT.UNDERLINE_SINGLE;", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif ((lParam & OS.GCS_COMPATTR) != 0 && clauses != null) {", "+\t\t\t\t\tlength = OS.ImmGetCompositionStringA (hIMC, OS.GCS_COMPATTR, (byte [])null, 0);", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\tbyte [] attrs = new byte [length];", "+\t\t\t\t\t\tOS.ImmGetCompositionStringA (hIMC, OS.GCS_COMPATTR, attrs, length);", "+\t\t\t\t\t\tlength = clauses.length - 1;", "+\t\t\t\t\t\tranges = new int [length * 2];", "+\t\t\t\t\t\tstyles = new TextStyle [length];", "+\t\t\t\t\t\tint /*long*/ layout = OS.GetKeyboardLayout (0);", "+\t\t\t\t\t\tshort langID = (short)OS.LOWORD (layout);", "+\t\t\t\t\t\tTF_DISPLAYATTRIBUTE attr = null; ", "+\t\t\t\t\t\tTextStyle style = null;", "+\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\tranges [i * 2] = clauses [i];", "+\t\t\t\t\t\t\tranges [i * 2 + 1] = clauses [i + 1] - clauses [i];", "+\t\t\t\t\t\t\tstyles [i] = style = new TextStyle ();", "+\t\t\t\t\t\t\tattr = getDisplayAttribute (langID, attrs [clauses [i]]);", "+\t\t\t\t\t\t\tif (attr != null) {", "+\t\t\t\t\t\t\t\tswitch (attr.crText.type) {", "+\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "+\t\t\t\t\t\t\t\t\t\tstyle.foreground = Color.win32_new (display, attr.crText.cr);", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "+\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crText.cr);", "+\t\t\t\t\t\t\t\t\t\tstyle.foreground = Color.win32_new (display, colorRef);", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tswitch (attr.crBk.type) {", "+\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "+\t\t\t\t\t\t\t\t\t\tstyle.background = Color.win32_new (display, attr.crBk.cr);", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "+\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crBk.cr);", "+\t\t\t\t\t\t\t\t\t\tstyle.background = Color.win32_new (display, colorRef);", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tswitch (attr.crLine.type) {", "+\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "+\t\t\t\t\t\t\t\t\t\tstyle.underlineColor = Color.win32_new (display, attr.crLine.cr);", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "+\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crLine.cr);", "+\t\t\t\t\t\t\t\t\t\tstyle.underlineColor = Color.win32_new (display, colorRef);", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tstyle.underline = attr.lsStyle != OS.TF_LS_NONE;", "+\t\t\t\t\t\t\t\tswitch (attr.lsStyle) {", "+\t\t\t\t\t\t\t\t\tcase OS.TF_LS_SQUIGGLE:", "+\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = SWT.UNDERLINE_ERROR;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase OS.TF_LS_DASH:", "+\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = UNDERLINE_IME_DASH; ", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase OS.TF_LS_DOT:", "+\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = UNDERLINE_IME_DOT;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase OS.TF_LS_SOLID:", "+\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = attr.fBoldLine ? UNDERLINE_IME_THICK : SWT.UNDERLINE_SINGLE;", "+\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\tOS.ImmReleaseContext (hwnd, hIMC);", "-\t\t\t}", "-\t\t\tif (startOffset == -1) {", "-\t\t\t\tCaret caret = parent.getCaret();", "-\t\t\t\tstartOffset = caret != null ? caret.getOffset() : 0;", "-\t\t\t}", "-\t\t\tEvent event = new Event ();", "-\t\t\tevent.detail = SWT.COMPOSITION_CHANGED;", "-\t\t\tevent.start = startOffset;", "-\t\t\tevent.end = startOffset + text.length();", "-\t\t\tevent.text = text = buffer != null ? buffer.toString () : \"\";", "-\t\t\tsendEvent (SWT.ImeComposition, event);", "-\t\t}", "-\t\treturn LRESULT.ONE;", "-\t}", "-\treturn null;", "-}", "+\t\tif (startOffset == -1) {", "+\t\t\tCaret caret = parent.getCaret();", "+\t\t\tstartOffset = caret != null ? caret.getOffset() : 0;", "+\t\t}", "+\t\tEvent event = new Event ();", "+\t\tevent.detail = SWT.COMPOSITION_CHANGED;", "+\t\tevent.start = startOffset;", "+\t\tevent.end = startOffset + text.length();", "+\t\tevent.text = text = buffer != null ? buffer.toString () : \"\";", "+\t\tsendEvent (SWT.ImeComposition, event);", "+\t}", "+\treturn LRESULT.ONE;", "+}"]}], "num": 55027}
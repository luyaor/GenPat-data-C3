{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7deb0263e67358422f0a4ce72fe77bd6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e07ac7349a52549bfb9a5c933af18d5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "e181b6e9188cddf2a587544c0109556e814864e2", "commitAfterChange": "e2af8b2dd329c0bf3e09f561a937b75563fced9d", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  int gtk_toggled (int renderer, int pathStr)", "signatureAfterChange": "  int gtk_toggled (int renderer, int pathStr)", "diff": ["-\tif (item != null) item.setChecked (!item.getChecked ());", "-\tEvent event = new Event ();", "-\tevent.detail = SWT.CHECK;", "-\tevent.item = item;", "-\tpostEvent (SWT.Selection, event);", "+\tif (item != null) {", "+\t\titem.setChecked (!item.getChecked ());", "+\t\tEvent event = new Event ();", "+\t\tevent.detail = SWT.CHECK;", "+\t\tevent.item = item;", "+\t\tpostEvent (SWT.Selection, event);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d8bf9a67763821bebd4afadc1d3404f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "480c0901faf29546ea8df19d2ac78fa4624fc38a", "commitAfterChange": "16783300301f2fdc3ddf4b30c55e2c7e64a03227", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  void _setVisible (boolean visible)", "signatureAfterChange": "  void _setVisible (boolean visible)", "diff": ["-\tif (!visible) {", "+\tif (visible) {", "+\t\tint flags = OS.TPM_LEFTBUTTON;", "+\t\tif (OS.GetKeyState (OS.VK_LBUTTON) >= 0) flags |= OS.TPM_RIGHTBUTTON;", "+\t\tif ((style & SWT.RIGHT_TO_LEFT) != 0) flags |= OS.TPM_RIGHTALIGN;", "+\t\tif ((parent.style & SWT.MIRRORED) != 0) {", "+\t\t\tflags &= ~OS.TPM_RIGHTALIGN;", "+\t\t\tif ((style & SWT.LEFT_TO_RIGHT) != 0) flags |= OS.TPM_RIGHTALIGN;", "+\t\t}", "+\t\tint nX = x, nY = y;", "+\t\tif (!hasLocation) {", "+\t\t\tint pos = OS.GetMessagePos ();", "+\t\t\tnX = (short) (pos & 0xFFFF);", "+\t\t\tnY = (short) (pos >> 16);", "+\t\t}", "+\t\t/*", "+\t\t* Feature in Windows.  It is legal use TrackPopupMenu()", "+\t\t* to display an empty menu as long as menu items are added", "+\t\t* inside of WM_INITPOPUPMENU.  If no items are added, then", "+\t\t* TrackPopupMenu() fails and does not send an indication", "+\t\t* that the menu has been closed.  This is not strictly a", "+\t\t* bug but leads to unwanted behavior when application code", "+\t\t* assumes that every WM_INITPOPUPMENU will eventually result", "+\t\t* in a WM_MENUSELECT, wParam=0xFFFF0000, lParam=0 to indicate", "+\t\t* that the menu has been closed.  The fix is to detect the", "+\t\t* case when TrackPopupMenu() fails and the number of items in", "+\t\t* the menu is zero and issue a fake WM_MENUSELECT.", "+\t\t*/", "+\t\tboolean success = OS.TrackPopupMenu (handle, flags, nX, nY, 0, hwndParent, null);", "+\t\tif (!success && GetMenuItemCount (handle) == 0) {", "+\t\t\tOS.SendMessage (hwndParent, OS.WM_MENUSELECT, 0xFFFF0000, 0);", "+\t\t}", "+\t} else {", "-\t\treturn;", "-\t}", "-\tint flags = OS.TPM_LEFTBUTTON;", "-\tif (OS.GetKeyState (OS.VK_LBUTTON) >= 0) flags |= OS.TPM_RIGHTBUTTON;", "-\tif ((style & SWT.RIGHT_TO_LEFT) != 0) flags |= OS.TPM_RIGHTALIGN;", "-\tif ((parent.style & SWT.MIRRORED) != 0) {", "-\t\tflags &= ~OS.TPM_RIGHTALIGN;", "-\t\tif ((style & SWT.LEFT_TO_RIGHT) != 0) flags |= OS.TPM_RIGHTALIGN;", "-\t}", "-\tint nX = x, nY = y;", "-\tif (!hasLocation) {", "-\t\tint pos = OS.GetMessagePos ();", "-\t\tnX = (short) (pos & 0xFFFF);", "-\t\tnY = (short) (pos >> 16);", "-\t}", "-\t/*", "-\t* Feature in Windows.  It is legal use TrackPopupMenu ()", "-\t* to display an empty menu as long as menu items are added", "-\t* inside of WM_INITPOPUPMENU.  If no items are added, then", "-\t* TrackPopupMenu () fails and does not send an indication", "-\t* that the menu has been closed.  This is not strictly a", "-\t* bug but leads to unwanted behavior when application code", "-\t* assumes that every WM_INITPOPUPMENU will eventually result", "-\t* in a WM_MENUSELECT, wParam=0xFFFF0000, lParam=0 to indicate", "-\t* that the menu has been closed.  The fix is to detect the", "-\t* case when TrackPopupMenu fails and the number of items in", "-\t* the menu is zero and issue a fake WM_MENUSELECT.", "-\t*/", "-\tboolean success = OS.TrackPopupMenu (handle, flags, nX, nY, 0, hwndParent, null);", "-\tif (!success && GetMenuItemCount (handle) == 0) {", "-\t\tOS.SendMessage (hwndParent, OS.WM_MENUSELECT, 0xFFFF0000, 0);"]}], "num": 53603}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "074b95d1395cfbf8fb3ae961be1c3010", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "439900e8aaba7b2cf5364836089a655c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "39a25d96bd81af197eb7211a0c7b6334a65446ba", "commitAfterChange": "2731f230865b6d6b62f1b96246bd4b543b330fbf", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public FontData[] getFontList (String faceName, boolean scalable)", "signatureAfterChange": " public FontData[] getFontList (String faceName, boolean scalable)", "diff": ["-public FontData[] getFontList (String faceName, boolean scalable) {\t", "+public FontData[] getFontList (String faceName, boolean scalable) {", "-\t\tOS.pango_font_family_list_faces(family[0], faces, n_faces);", "-\t\tfor (int j=0; j<n_faces[0]; j++) {", "-\t\t\tOS.memmove(face, faces[0] + j * OS.PTR_SIZEOF, OS.PTR_SIZEOF);", "-\t\t\tint /*long*/ fontDesc = OS.pango_font_face_describe(face[0]);", "-\t\t\tFont font = Font.gtk_new(this, fontDesc);", "-\t\t\tFontData data = font.getFontData()[0];", "-\t\t\tif (faceName == null || Compatibility.equalsIgnoreCase(faceName, data.name)) {", "+\t\tboolean match = true;", "+\t\tif (faceName != null) {", "+\t\t\tint /*long*/ familyName = OS.pango_font_family_get_name (family[0]);", "+\t\t\tint length = OS.strlen(familyName);", "+\t\t\tbyte[] buffer = new byte[length];", "+\t\t\tOS.memmove(buffer, familyName, length);", "+\t\t\tString name = new String(Converter.mbcsToWcs(null, buffer));", "+\t\t\tmatch = Compatibility.equalsIgnoreCase(faceName, name);", "+\t\t}", "+\t\tif (match) {", "+\t\t    OS.pango_font_family_list_faces(family[0], faces, n_faces);", "+\t\t    for (int j=0; j<n_faces[0]; j++) {", "+\t\t        OS.memmove(face, faces[0] + j * OS.PTR_SIZEOF, OS.PTR_SIZEOF);", "+\t\t        int /*long*/ fontDesc = OS.pango_font_face_describe(face[0]);", "+\t\t        Font font = Font.gtk_new(this, fontDesc);", "+\t\t        FontData data = font.getFontData()[0];", "-\t\t\t}", "-\t\t\tOS.pango_font_description_free(fontDesc);", "+\t\t\t\tOS.pango_font_description_free(fontDesc);", "+\t\t    }", "+\t\t    OS.g_free(faces[0]);", "-\t\tOS.g_free(faces[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e1378c510cfb6fe7d59ac21b5927be2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "c738133a2fdbe3d60fd9dfabbfd9e737153e1aa5", "commitAfterChange": "c9992cb98fd2a837c866ff6f32642b9e42588c7e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public FontData[] getFontList (String faceName, boolean scalable)", "signatureAfterChange": " public FontData[] getFontList (String faceName, boolean scalable)", "diff": ["-\t", "-\t/* Temporary code.", "-\t * For now, we know that on Pango at least three font families are guaranteed", "-\t * to be present: Sans, Serif, and Monspace.", "-\t */", "-\tif (scalable) return getScalableFontList(faceName);", "-\treturn getNonScalableFontList(faceName);", "-}", "+", "+\t//FIXME - check scalable flag", "+\tint[] family = new int[1];", "+\tint[] face = new int[1];", "+\tint[] families = new int[1];", "+\tint[] n_families = new int[1];", "+\tint[] faces = new int[1];", "+\tint[] n_faces = new int[1];", "+\tint context = OS.gdk_pango_context_get();", "+\tOS.pango_context_list_families(context, families, n_families);", "+\tint nFds = 0;", "+\tFontData[] fds = new FontData[faceName != null ? 4 : n_families[0]];", "+\tfor (int i=0; i<n_families[0]; i++) {", "+\t\tOS.memmove(family, families[0] + i * 4, 4);", "+\t\tOS.pango_font_family_list_faces(family[0], faces, n_faces);", "+\t\tfor (int j=0; j<n_faces[0]; j++) {", "+\t\t\tOS.memmove(face, faces[0] + j * 4, 4);", "+\t\t\tint fontDesc = OS.pango_font_face_describe(face[0]);", "+\t\t\tFont font = Font.gtk_new(this, fontDesc);", "+\t\t\tFontData data = font.getFontData()[0];", "+\t\t\tif (faceName == null || Compatibility.equalsIgnoreCase(faceName, data.name)) {", "+\t\t\t\tif (nFds == fds.length) {", "+\t\t\t\t\tFontData[] newFds = new FontData[fds.length + n_families[0]];", "+\t\t\t\t\tSystem.arraycopy(fds, 0, newFds, 0, nFds);", "+\t\t\t\t\tfds = newFds;", "+\t\t\t\t}", "+\t\t\t\tfds[nFds++] = data;", "+\t\t\t}", "+\t\t\tOS.pango_font_description_free(fontDesc);", "+\t\t}", "+\t\tOS.g_free(faces[0]);", "+\t}", "+\tOS.g_free(families[0]);", "+\tOS.g_object_unref(context);", "+", "+\tif (nFds == fds.length) return fds;", "+\tFontData[] result = new FontData[nFds];", "+\tSystem.arraycopy(fds, 0, result, 0, nFds);", "+\treturn result;"]}], "num": 5337}
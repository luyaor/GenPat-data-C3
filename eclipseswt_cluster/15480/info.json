{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b8eab69a47c710e18aaca73480ec1c53", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42928f025e95c971c7cbfa259204ec85", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "3257d9ff2b142c9ea4e1a59fc26a68628301b2a1", "commitAfterChange": "2279139f9e7a437d50dda4d245cb4c8658b2c2b9", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  int gtk_changed (int widget)", "signatureAfterChange": "  int gtk_changed (int widget)", "diff": ["+\tint ptr = OS.gtk_entry_get_text (entryHandle);", "+\tint length = OS.strlen (ptr);", "+\tbyte [] buffer = new byte [length];", "+\tOS.memmove (buffer, ptr, length);", "+\tString text = new String (Converter.mbcsToWcs (null, buffer));", "+\tfor (int i = 0; i < items.length; i++) {", "+\t\tif (items [i].equals (text)) {", "+\t\t\tsendEvent (SWT.Selection);", "+\t\t\tbreak;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7960ec3df3e7e48dec19a368e1a36a63", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "700158fe8e0350083c086442d3424d75c20d24f8", "commitAfterChange": "4e0cd356e137aaad275040edad6525ab3a882b3d", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void drawText (String string, int x, int y, int flags)", "signatureAfterChange": " public void drawText (String string, int x, int y, int flags)", "diff": ["-\tstring.getChars (0, length, buffer, 0);", "-\tif ((flags & (SWT.DRAW_DELIMITER | SWT.DRAW_TAB)) != (SWT.DRAW_DELIMITER | SWT.DRAW_TAB)) {", "+\tstring.getChars(0, length, buffer, 0);", "+\tint mask = SWT.DRAW_DELIMITER | SWT.DRAW_TAB | SWT.DRAW_MNEMONIC;", "+\tint mnemonic = -1;", "+\tif ((flags & mask) != mask) {", "+\t\t\t\tcase '&': {", "+\t\t\t\t\tif ((flags & SWT.DRAW_MNEMONIC) != 0) {", "+\t\t\t\t\t\tif (i + 1 < length) {", "+\t\t\t\t\t\t\tif (buffer[i + 1] == '&') {", "+\t\t\t\t\t\t\t\ti++;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (mnemonic == -1) mnemonic = j;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\tif (mnemonic != -1) {", "+\t\tint underline = OS.TextDecorations_Underline();", "+\t\tint decorations = OS.gcnew_TextDecorationCollection(1);", "+\t\tOS.TextDecorationCollection_Add(decorations, underline);", "+\t\tOS.FormattedText_SetTextDecorations(text, decorations, mnemonic, 1);", "+\t\tOS.GCHandle_Free(decorations);", "+\t\tOS.GCHandle_Free(underline);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6bf96f955e4cab0b6d0cb6b633508cb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "4def951fc85e643080de398e85c25cb30ec79f91", "commitAfterChange": "ea10febb5ae3b0d1b19a13c89b6c7b27ab367f3a", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 39, "signatureBeforeChange": "  int processIMEFocusIn ()", "signatureAfterChange": "  int gtk_delete_text (int widget, int start_pos, int end_pos)", "diff": ["+", "+int gtk_delete_text (int widget, int start_pos, int end_pos) {", "+\tif (!hooks (SWT.Verify) && !filters (SWT.Verify)) return 0;", "+\tint address = OS.gtk_editable_get_chars (handle, start_pos, end_pos);", "+\tint length = OS.strlen (address);", "+\tbyte [] buffer = new byte [length];", "+\tOS.memmove (buffer, address, length);", "+\tOS.g_free (address);", "+\tString oldText = new String (Converter.mbcsToWcs (null, buffer));", "+\tString newText = verifyText (oldText, start_pos, end_pos);", "+\tif (newText == null) {", "+\t\tOS.g_signal_stop_emission_by_name (handle, OS.delete_text);", "+\t}", "+\treturn 0;", "+}", "-", "-int processIMEFocusIn () {", "-\treturn 0;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81511e4359bbc61d72a71c9d0940fb56", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "5f7fc100f82598ce1ed575675abf56bc3c557d75", "commitAfterChange": "1c367491fe3c07b43ec99c54628c7b133b5c058f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " String computeResultChooserDialog ()", "signatureAfterChange": " String computeResultChooserDialog ()", "diff": ["+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tint /*long*/ filter = OS.gtk_file_chooser_get_filter (handle);", "+\tif (filter != 0) {", "+\t\tint /*long*/ filterNamePtr = OS.gtk_file_filter_get_name (filter);", "+\t\tif (filterNamePtr != 0) {", "+\t\t\tint length = OS.strlen (filterNamePtr);", "+\t\t\tbyte[] buffer = new byte [length];", "+\t\t\tOS.memmove (buffer, filterNamePtr, length);", "+\t\t\t//OS.g_free (filterNamePtr); //GTK owns this pointer - do not free", "+\t\t\tString filterName = new String (Converter.mbcsToWcs (null, buffer));", "+\t\t\tfor (int i = 0; i < filterExtensions.length; i++) {", "+\t\t\t\tif (filterNames.length > 0) {", "+\t\t\t\t\tif (filterNames[i].equals(filterName)) {", "+\t\t\t\t\t\tfilterIndex = i;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (filterExtensions[i].equals(filterName)) {", "+\t\t\t\t\t\tfilterIndex = i;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "565de108b06af2c64794fc05e4c71166", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/photon/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "467319881c21a608a89b36f420121b1ced80df68", "commitAfterChange": "2c7d380be2e321a7928b1ce1264ec8b852b6e69d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-\tDND.error(org.eclipse.swt.SWT.ERROR_NOT_IMPLEMENTED);\r", "-\treturn null;\r", "+\tif (transferData.pData == 0 || !(isSupportedType(transferData))) return null;\r", "+\tint size = transferData.length;\r", "+\tif (size == 0) return null;\r", "+\tbyte[] buffer = new byte[size];\r", "+\tOS.memmove(buffer, transferData.pData, size);\r", "+\tString[] filenames = new String[0];\r", "+\tint lastMark = 0;\r", "+\tfor (int i = 0; i < buffer.length; i++) {\r", "+\t\tif ( buffer[i] == 0 ) {\r", "+\t\t\tString s = new String(buffer, lastMark, i - lastMark );\r", "+\t\t\tString[] temp = filenames;\r", "+\t\t\tfilenames = new String[ filenames.length + 1];\r", "+\t\t\tSystem.arraycopy(temp, 0, filenames, 0 , temp.length);\t\t\r", "+\t\t\tfilenames[ filenames.length - 1] = s;\r", "+\t\t\tlastMark = i + 1;\r", "+\t\t}\r", "+\t}\r", "+\treturn filenames;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa9471582762d6aa0f00a6d1df893a74", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "f6694a5b53e9911af4412c46c62de19b738b4421", "commitAfterChange": "b8bdd3c746edcdacbffc948b609b980fb3c045f7", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 100, "signatureBeforeChange": "  void releaseDisplay ()", "signatureAfterChange": "  void releaseDisplay ()", "diff": ["+", "+\t/* Release the System Images */", "+\tif (errorImage != 0) OS.CGImageRelease (errorImage);", "+\tif (infoImage != 0) OS.CGImageRelease (infoImage);", "+\tif (warningImage != 0) OS.CGImageRelease (warningImage);", "+\tif (errorImageData != 0) OS.DisposePtr (errorImageData);", "+\tif (infoImageData != 0) OS.DisposePtr (infoImageData);", "+\tif (warningImageData != 0) OS.DisposePtr (warningImageData);", "+\terrorImage = infoImage = warningImage = 0;", "+\terrorImageData = infoImageData = warningImageData = 0;", "+", "+\t/* Release the System Cursors */", "+\tfor (int i = 0; i < cursors.length; i++) {", "+\t\tif (cursors [i] != null) cursors [i].dispose ();", "+\t}", "+\tcursors = null;", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4addb2475b97665dd32856278d07a1aa", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "0262f2043050ffa95129a1b98153a0304c364772", "commitAfterChange": "bb7d6277c4df65eeb3d89017add0f14480095c41", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": "  void setMenuBar (Menu menu)", "signatureAfterChange": "  void setMenuBar (Menu menu)", "diff": ["-//\tNSMenu.setMenuBarVisible(true);", "-//\tapplication.setMenu(menu.nsMenu);", "-//\tapplication.setWindowsMenu(menu.nsMenu);", "-//\tapplication.setServicesMenu(menu.nsMenu);", "+\t//remove all existing menu items except the application menu", "+\tNSMenu menubar = application.mainMenu();", "+\tint count = menubar.numberOfItems();", "+\twhile (count > 1) {", "+\t\tmenubar.removeItemAtIndex(count - 1);", "+\t\tcount--;", "+\t}", "+\t//set parent of each item to NULL and add them to menubar", "+\tif (menu != null) {", "+\t\tMenuItem[] items = menu.getItems();", "+\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\titems[i].nsItem.setMenu(null);", "+\t\t\tmenubar.addItem(items[i].nsItem);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5383fa1960b72f0a7825d47ea16986fa", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/GtkFileDialog.java", "commitBeforeChange": "7996d8405892a4a58e0083da5d5bc47199c1a1a1", "commitAfterChange": "a70d2e9009f5c248af33f97a37a3226fb19f6ab1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " void createGtkDialog()", "signatureAfterChange": "  public String open ()", "diff": ["- */", "-void createGtkDialog() {", "-\t/* create */", "-\tbyte [] buffer = Converter.wcsToMbcs (null, title, true);", "-\thandle = OS.gtk_file_selection_new (buffer);", "+public String open () {", "+\tbyte [] titleBytes = Converter.wcsToMbcs (null, title, true);", "+\thandle = OS.gtk_file_selection_new (titleBytes);", "-\t\tOS.gtk_window_set_modal(handle, true);", "-\tokButtonHandle = OS.GTK_FILE_SELECTION_OK_BUTTON(handle);", "-\tcancelButtonHandle = OS.GTK_FILE_SELECTION_OK_BUTTON(handle);", "-}", "+\tpreset();", "+\tint response = OS.gtk_dialog_run(handle);", "+\tif (response == OS.GTK_RESPONSE_OK) {", "+\t\tint lpFilename = OS.gtk_file_selection_get_filename (handle);", "+\t\tint filenameLength = OS.strlen (lpFilename);", "+\t\tbyte [] filenameBytes = new byte [filenameLength];", "+\t\tOS.memmove (filenameBytes, lpFilename, filenameLength);", "+\t\tString osAnswer = new String( Converter.mbcsToWcs (null, filenameBytes) );", "+\t\tinterpretOsAnswer(osAnswer);", "+\t}", "+\tOS.gtk_widget_destroy(handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "724075d9958b5a21c6c44e1daf53516a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "a17ee824b5b90d864e188dcf140b483bedba7409", "commitAfterChange": "a8b78a26a43b687bd67c16335956093c71af26a6", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  public String[] getXmls()", "signatureAfterChange": "  public String[] getXmls()", "diff": ["-\t\tlist(new File(\"/System/Library/Frameworks\"), array);", "-\t\tlist(new File(\"/System/Library/Frameworks/CoreServices.framework/Frameworks\"), array);", "-\t\tlist(new File(\"/System/Library/Frameworks/ApplicationServices.framework/Frameworks\"), array);", "+\t\tif (USE_SYSTEM_BRIDGE_FILES) {", "+\t\t\tlist(new File(\"/System/Library/Frameworks\"), array);", "+\t\t\tlist(new File(\"/System/Library/Frameworks/CoreServices.framework/Frameworks\"), array);", "+\t\t\tlist(new File(\"/System/Library/Frameworks/ApplicationServices.framework/Frameworks\"), array);", "+\t\t} else {", "+\t\t\tString packageName = getPackageName(mainClassName);", "+\t\t\tFile folder = new File(extrasDir != null ? extrasDir : outputDir + packageName.replace('.', '/'));", "+\t\t\tFile[] files = folder.listFiles(new FilenameFilter() {", "+\t\t\t\tpublic boolean accept(File dir, String name) {", "+\t\t\t\t\treturn name.endsWith(\"Full.bridgesupport\");", "+\t\t\t\t}", "+\t\t\t});", "+\t\t\tfor (int i = 0; i < files.length; i++) {", "+\t\t\t\tarray.add(files[i].getAbsolutePath());", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c7ca9f3992343663a953b8ca258e3b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/URLTransfer.java", "commitBeforeChange": "10cff956b5a7baa336ed7e4f79deb8729cdad298", "commitAfterChange": "4a54739762437bd8066c9b7d36c4c3d14493b18a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-\t\tint /*long*/ lpMultiByteStr = OS.GlobalLock(hMem);", "-\t\tif (lpMultiByteStr == 0) return null;", "-\t\ttry {", "-\t\t\tint codePage = OS.GetACP();", "-\t\t\tint cchWideChar  = OS.MultiByteToWideChar (codePage, OS.MB_PRECOMPOSED, lpMultiByteStr, -1, null, 0);", "-\t\t\tif (cchWideChar == 0) return null;", "-\t\t\tchar[] lpWideCharStr = new char [cchWideChar - 1];", "-\t\t\tOS.MultiByteToWideChar (codePage, OS.MB_PRECOMPOSED, lpMultiByteStr, -1, lpWideCharStr, lpWideCharStr.length);", "-\t\t\treturn new String(lpWideCharStr);", "-\t\t} finally {", "-\t\t\tOS.GlobalUnlock(hMem);", "+\t\tif (transferData.type == CFSTR_INETURLIDW) {", "+\t\t\t/* Ensure byteCount is a multiple of 2 bytes */", "+\t\t\tint size = OS.GlobalSize(hMem) / 2 * 2;", "+\t\t\tif (size == 0) return null;", "+\t\t\tchar[] chars = new char[size/2];", "+\t\t\tint /*long*/ ptr = OS.GlobalLock(hMem);", "+\t\t\tif (ptr == 0) return null;", "+\t\t\ttry {", "+\t\t\t\tOS.MoveMemory(chars, ptr, size);", "+\t\t\t\tint length = chars.length;", "+\t\t\t\tfor (int i=0; i<chars.length; i++) {", "+\t\t\t\t\tif (chars [i] == '\\0') {", "+\t\t\t\t\t\tlength = i;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn new String (chars, 0, length);", "+\t\t\t} finally {", "+\t\t\t\tOS.GlobalUnlock(hMem);\t", "+\t\t\t}", "+\t\t} else if (transferData.type == CFSTR_INETURLID) {", "+\t\t\tint /*long*/ lpMultiByteStr = OS.GlobalLock(hMem);", "+\t\t\tif (lpMultiByteStr == 0) return null;", "+\t\t\ttry {", "+\t\t\t\tint codePage = OS.GetACP();", "+\t\t\t\tint cchWideChar  = OS.MultiByteToWideChar (codePage, OS.MB_PRECOMPOSED, lpMultiByteStr, -1, null, 0);", "+\t\t\t\tif (cchWideChar == 0) return null;", "+\t\t\t\tchar[] lpWideCharStr = new char [cchWideChar - 1];", "+\t\t\t\tOS.MultiByteToWideChar (codePage, OS.MB_PRECOMPOSED, lpMultiByteStr, -1, lpWideCharStr, lpWideCharStr.length);", "+\t\t\t\treturn new String(lpWideCharStr);", "+\t\t\t} finally {", "+\t\t\t\tOS.GlobalUnlock(hMem);", "+\t\t\t}", "+\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54250f86251c8b785940f60945c8dd6a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "9cdeeef16ecd0dd86b274a41cdcf8af6db40077a", "commitAfterChange": "62d90062dd8cb11eec7528efece057a0af693514", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " void computeRuns (GC gc)", "signatureAfterChange": " void computeRuns (GC gc)", "diff": ["+\t\t\tlineWidth = 0;", "+\t\t\tif (wrapWidth != -1) {", "+\t\t\t\tswitch (alignment) {", "+\t\t\t\t\tcase SWT.CENTER: lineWidth = (wrapWidth - this.lineWidth[line]) / 2; break;", "+\t\t\t\t\tcase SWT.RIGHT: lineWidth = wrapWidth - this.lineWidth[line]; break;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tfor (int j = 0; j < runs[line].length; j++) {", "+\t\t\t\truns[line][j].x = lineWidth;", "+\t\t\t\tlineWidth += runs[line][j].width;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae32127860c574a4721129e15db63051", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ControlExample.java", "commitBeforeChange": "6b08ed4263d5386787856c76751025127569e2c9", "commitAfterChange": "c7068fee3524e7717631f52b0aec47a9d7a85e42", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic ControlExample(Composite parent)", "signatureAfterChange": " \tpublic ControlExample(Composite parent)", "diff": ["+\t\t", "+\t\t/* Workaround: if the tab folder is wider than the screen,", "+\t\t * Mac platforms clip instead of somehow scrolling the tab items.", "+\t\t * We try to recover some width by using shorter tab names. */", "+\t\tPoint size = parent.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\t\tRectangle monitorArea = parent.getMonitor().getClientArea();", "+\t\tboolean isMac = SWT.getPlatform().equals(\"carbon\") || SWT.getPlatform().equals(\"cocoa\");", "+\t\tif (size.x > monitorArea.width && isMac) {", "+\t\t\tTabItem [] tabItems = tabFolder.getItems();", "+\t\t\tfor (int i=0; i<tabItems.length; i++) {", "+\t\t\t\ttabItems[i].setText (tabs [i].getShortTabText ());", "+\t\t\t}", "+\t\t}"]}], "num": 15480}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1867f8a7e818ee3b641bba6f71ed2df", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "815de01f60480d85e5229f423926ea5f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/MessageBox.java", "commitBeforeChange": "3ffd5b1260c5eff1c39525f685edb67ac6d0bbf3", "commitAfterChange": "f67c2c6b802c1178c4c8c0013c55243cd718257e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  private void createButtons()", "signatureAfterChange": "  private void createButtons()", "diff": ["-private void createButtons() {\t", "-\tif ((style & SWT.OK) != 0) OS.gtk_dialog_add_button(handle, \"gtk-ok\", SWT.OK);", "-\tif ((style & SWT.CANCEL) != 0) OS.gtk_dialog_add_button(handle, \"gtk-cancel\", SWT.CANCEL);", "-", "-\tif ((style & SWT.YES) != 0) OS.gtk_dialog_add_button(handle, \"gtk-yes\", SWT.YES);", "-\tif ((style & SWT.NO) != 0) OS.gtk_dialog_add_button(handle, \"gtk-no\", SWT.NO);", "-", "-\tif ((style & SWT.ABORT) != 0) OS.gtk_dialog_add_button(handle, SWT.getMessage(\"SWT_Abort\"), SWT.ABORT);", "-\tif ((style & SWT.RETRY) != 0) OS.gtk_dialog_add_button(handle, SWT.getMessage(\"SWT_Retry\"), SWT.RETRY);", "-\tif ((style & SWT.IGNORE) != 0) OS.gtk_dialog_add_button(handle, SWT.getMessage(\"SWT_Ignore\"), SWT.IGNORE);", "+private void createButtons() {", "+\tif ((style & SWT.OK) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, \"gtk-ok\", true), SWT.OK);", "+\tif ((style & SWT.CANCEL) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, \"gtk-cancel\", true), SWT.CANCEL);", "+\tif ((style & SWT.YES) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, \"gtk-yes\", true), SWT.YES);", "+\tif ((style & SWT.NO) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, \"gtk-no\", true), SWT.NO);", "+\tif ((style & SWT.ABORT) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, SWT.getMessage(\"SWT_Abort\"), true), SWT.ABORT);", "+\tif ((style & SWT.RETRY) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, SWT.getMessage(\"SWT_Retry\"), true), SWT.RETRY);", "+\tif ((style & SWT.IGNORE) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, SWT.getMessage(\"SWT_Ignore\"), true), SWT.IGNORE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c6ca285d54c4a45524486e44b73fd86", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "309644bf324d87b6316efb407a46b35c706d2891", "commitAfterChange": "25e0a88282a8f52572829023c99494b77782afb9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  void addInvalidate (Control control)", "signatureAfterChange": "  void addInvalidate (Control control)", "diff": ["+\tif (invalidateHandler == 0) {", "+\t\tint handler = invalidateHandler = OS.gcnew_NoArgsDelegate (jniRef, \"invalidateHandler\");", "+\t\tint operation = OS.Dispatcher_BeginInvoke (dispatcher, OS.DispatcherPriority_Send, handler);", "+\t\tOS.GCHandle_Free (operation);", "+\t\tOS.GCHandle_Free (handler);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60c2da6b0bd52fd5c5310995ff3e191a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java", "commitBeforeChange": "7645049a6f63e6364564343b621190b9665a1ee8", "commitAfterChange": "ad47e36ec1d4f57c5d7a697271afb1a631a442ea", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \r Menu createEditMenu()", "signatureAfterChange": "\r \r Menu createEditMenu()", "diff": ["+\titem.setAccelerator(SWT.MOD1 + 'X');\r", "+\t\t\thandleCutCopy();\r", "+\titem.setAccelerator(SWT.MOD1 + 'C');\r", "+\t\t\thandleCutCopy();\r", "+\titem.setAccelerator(SWT.MOD1 + 'V');\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dba6bc956c1b3a21d10e25df95ab35d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "bd03150150212e50e6fa2274c59ffe38b92a7f17", "commitAfterChange": "4696ed3242b05bb22c4416f9db8b2c5c29434a83", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "  void windowSendEvent (int id, int sel, int event)", "signatureAfterChange": "  void windowSendEvent (int id, int sel, int event)", "diff": ["-\tswitch ((int)/*64*/nsEvent.type ()) {", "-\t\tcase OS.NSLeftMouseUp:\t", "-\t\tcase OS.NSRightMouseUp:\t", "-\t\tcase OS.NSOtherMouseUp:\t", "+\tint type = (int)/*64*/nsEvent.type ();", "+\tswitch (type) {", "+\t\tcase OS.NSLeftMouseUp:", "+\t\tcase OS.NSRightMouseUp:", "+\t\tcase OS.NSOtherMouseUp:", "-\t\t\tWidget target = null;", "+\t\t\tif (type == OS.NSMouseMoved) {", "+\t\t\t\tControl trimControl = control;", "+\t\t\t\tif (control != null && control.isTrim (view)) trimControl = null;", "+\t\t\t\tdisplay.checkEnterExit (trimControl, nsEvent, false);", "+\t\t\t\tif (trimControl != null) trimControl.sendMouseEvent (nsEvent, type, false);", "+\t\t\t}", "+\t\t\tWidget target = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f33535bf7e2de06f891dca35110b9b79", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/AllTests.java", "commitBeforeChange": "6a4b4d184893d93ba51435edb126aa14e72da424", "commitAfterChange": "2c35de82ae65c7619247302d81332aa442fdb466", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public AllTests()", "signatureAfterChange": "  public AllTests()", "diff": ["+\taddTest(Test_org_eclipse_swt_browser_LocationAdapter.suite());", "+\taddTest(Test_org_eclipse_swt_browser_NewWindowListener.suite());", "+\taddTest(Test_org_eclipse_swt_browser_VisibilityAdapter.suite());", "+\taddTest(Test_org_eclipse_swt_browser_VisibilityListener.suite());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2ac86198972596f6f69ad187d48b94e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/TableCursor.java", "commitBeforeChange": "23a612fbbfb7f73f6d3140e05bfb655fcefc2862", "commitAfterChange": "1858f5fc3e7b84156bcd8bb517bf8b12f702a323", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 11, "signatureBeforeChange": "  void keyDown(Event event)", "signatureAfterChange": "  void keyDown(Event event)", "diff": ["+\tif (table.getItemCount() == 0) return;", "-\t\t\tsetRowColumn(row - 1, column, true);", "+\t\t\tsetRowColumn(Math.max(0, row - 1), column, true);", "-\t\t\tsetRowColumn(row + 1, column, true);", "+\t\t\tsetRowColumn(Math.min(row + 1,table.getItemCount() - 1), column, true);", "-\t\t           setRowColumn(row, column - 1, true);", "+\t\t           setRowColumn(row, Math.max(0, column - 1), true);", "-\t\t           setRowColumn(row, column + 1, true);", "+\t\t           setRowColumn(row, Math.min(table.getColumnCount() - 1, column + 1), true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8d83443080925cd34931766537d4ee6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DirectoryDialog.java", "commitBeforeChange": "5521915c038c66a4f6b703fcb7b7f09653e7810f", "commitAfterChange": "21fbdc810fbcc4ce7f8ba60ea2b31e56591d3b33", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public String open ()", "signatureAfterChange": " public String open ()", "diff": ["+\tif (message != null && message.length () > 0) {", "+\t\tbyte [] buffer = Converter.wcsToMbcs (null, message, true);", "+\t\tint labelHandle = OS.gtk_label_new (buffer);", "+\t\tOS.gtk_container_add (selection.main_vbox, labelHandle);", "+\t\tOS.gtk_widget_show (labelHandle);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2eea52ff0d4b4de168e9bf1eae76f13b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "3dbca50e1d527f9d970adadbc94c490ef4ed4b08", "commitAfterChange": "0cd359d11446bc867f3bfb2e634ebedd55e739f0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  static boolean isExecutable (String fileName)", "signatureAfterChange": "  static boolean isExecutable (String fileName)", "diff": ["-\t\t\tresult = true;", "+\t\t\tNSWorkspace ws = NSWorkspace.sharedWorkspace();", "+\t\t\tNSString type = ws.typeOfFile(path, 0);", "+\t\t\tresult = type != null && (ws.type(type, NSString.stringWith(\"public.unix-executable\")) || //$NON-NLS-1$", "+\t\t\t\t\tOS.UTTypeEqual(type.id, NSString.stringWith(\"public.shell-script\").id)); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "844189f0d48cbf819842774fa37440a4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/cocoa/org/eclipse/swt/printing/PrintDialog.java", "commitBeforeChange": "523b380e84b3fbcb077b6c3167201bad505ea60f", "commitAfterChange": "418f8414b42761e68fafc14f5b560d137139645c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public PrinterData open()", "signatureAfterChange": " public PrinterData open()", "diff": ["-\tpanel.setOptions(OS.NSPrintPanelShowsPageSetupAccessory | panel.options());", "+\tdict.setValue(NSNumber.numberWithBool(printerData.scope == PrinterData.SELECTION), OS.NSPrintSelectionOnly);", "+\tpanel.setOptions(OS.NSPrintPanelShowsPageSetupAccessory | OS.NSPrintPanelShowsPrintSelection | panel.options());", "+\t", "-\t\tdata.scope = new NSNumber(dict.objectForKey(OS.NSPrintAllPages)).intValue() != 0 ? PrinterData.ALL_PAGES : PrinterData.PAGE_RANGE;", "+\t\tdata.scope = new NSNumber(dict.objectForKey(OS.NSPrintSelectionOnly)).intValue() != 0 ? PrinterData.SELECTION : ", "+\t\t\tnew NSNumber(dict.objectForKey(OS.NSPrintAllPages)).intValue() != 0 ? PrinterData.ALL_PAGES : PrinterData.PAGE_RANGE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59897f39260ed7b58bf1e75f0e6f26b1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabItem.java", "commitBeforeChange": "95b44910c41419a67983dc1eea3a0808025bab35", "commitAfterChange": "54d755b623752abf5b0a413c44b0e06ada69a9ed", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void drawSelected(GC gc )", "signatureAfterChange": " void drawSelected(GC gc )", "diff": ["-\t\t//int[] left = CTabFolder.BOTTOM_LEFT_CORNER;", "-\t\t//int[] right = parent.simple ? CTabFolder.BOTTOM_RIGHT_CORNER : parent.curve;", "-\t\tshape[index++] = x + width + extra;", "+\t\tshape[index++] = Math.min(x + width + extra, rightTabEdge);", "-\t\tshape[index++] = rightTabEdge;", "+\t\tshape[index++] = Math.max(x + width + extra, rightTabEdge);", "-\t\t//int[] left = CTabFolder.TOP_LEFT_CORNER;", "-\t\t//int[] right = parent.simple ? CTabFolder.TOP_RIGHT_CORNER : parent.curve;", "-\t\tshape[index++] = x + width + extra;", "+\t\tshape[index++] = Math.min (x + width + extra, rightTabEdge);", "-\t\tshape[index++] = rightTabEdge;", "+\t\tshape[index++] = Math.max (x + width + extra, rightTabEdge);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af8a7cb7e79077dbbf9856bd1cca5f10", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "5bffa8f6bb253a044dd801151ec4b992e082a6aa", "commitAfterChange": "c2deeb4450cf9e760ad5d114d9513f6491d23aa4", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "  LRESULT WM_SYSCOMMAND (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_SYSCOMMAND (int wParam, int lParam)", "diff": ["-\t//This code is intentionally commented", "-//\tif (result != null) return result;", "-//\t/*", "-//\t* Feature in Windows.  When a window is minimized, the memory", "-//\t* for the working set of the process.  For applications that", "-//\t* use a lot of memory, when the window is restored, it can take", "-//\t* a long time (sometimes minutes) before the application becomes", "-//\t* responsive.   The fix is to intercept WM_SYSCOMMAND looking", "-//\t* for SC_MINIMIZE and use ShowWindow() with SW_SHOWMINIMIZED to", "-//\t* minimize the window rather than allowing the default window", "-//\t* proc to do it when more that 64Meg of memory is being used.", "-//\t* ", "-//\t* NOTE:  The default window proc activates the next top-level", "-//\t* window in the Z order while ShowWindow () with SW_SHOWMINIMIZED", "-//\t* does not.  There is no fix for this at this time.", "-//\t*/", "-//\tint cmd = wParam & 0xFFF0;", "-//\tswitch (cmd) {", "-//\t\tcase OS.SC_MINIMIZE:", "-//\t\t\tlong memory = Runtime.getRuntime ().totalMemory ();", "-//\t\t\tif (memory > 64000000) {", "-//\t\t\t\tOS.ShowWindow (handle, OS.SW_SHOWMINIMIZED);", "-//\t\t\t\treturn LRESULT.ZERO;", "-//\t\t\t}", "-//\t}", "+\tif (result != null) return result;", "+\t/*", "+\t* Feature in Windows.  When the last visible window in", "+\t* a process minimized, Windows swaps out the memory for", "+\t* the process.  The assumption is that the user can no", "+\t* longer interact with the window, so the memory can be", "+\t* released to other applications.  However, for programs", "+\t* that use a lot of memory, swapping the memory back in", "+\t* can take a long time, sometimes minutes.  The fix is", "+\t* to intercept WM_SYSCOMMAND looking for SC_MINIMIZE", "+\t* and use ShowWindow() with SW_SHOWMINIMIZED to minimize", "+\t* the window, rather than running the default window proc.", "+\t* ", "+\t* NOTE:  The default window proc activates the next top-level", "+\t* window in the Z order while ShowWindow () with SW_SHOWMINIMIZED", "+\t* does not.  There is no fix for this at this time.", "+\t*/", "+\tint cmd = wParam & 0xFFF0;", "+\tswitch (cmd) {", "+\t\tcase OS.SC_MINIMIZE:", "+\t\t\tlong memory = Runtime.getRuntime ().totalMemory ();", "+\t\t\tif (memory >= 64 * 10024 * 1024) {", "+\t\t\t\tOS.ShowWindow (handle, OS.SW_SHOWMINIMIZED);", "+\t\t\t\treturn LRESULT.ZERO;", "+\t\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa18c45a79164486dee8c8d246fa8d28", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ce2f35c3f6b1d0b5778f68f011b1d8668d3c5c72", "commitAfterChange": "00bee382096a1807d86474fed7c933116a37eeb8", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \tvoid writeHeader()", "signatureAfterChange": "\r \tvoid writeHeader()", "diff": ["-\t\t\r", "-\t\theader.append(\"{\\\\rtf1\\\\ansi\\\\deff0{\\\\fonttbl{\\\\f0\\\\fnil \");\r", "+\t\theader.append(\"{\\\\rtf1\\\\ansi\\\\deff0{\\\\fonttbl{\\\\f0\\\\fnil\");\r", "+\t\t// specify code page, necessary for copy to work in bidi \r", "+\t\t// systems\r", "+\t\tString cpg = System.getProperty(\"file.encoding\");\r", "+\t\tif (cpg.startsWith(\"Cp\") || cpg.startsWith(\"MS\")) {\r", "+\t\t\tcpg = cpg.substring(2, cpg.length());\r", "+\t\t\theader.append(\"\\\\cpg\");\r", "+\t\t\theader.append(cpg);\r", "+\t\t}\r", "+\t\theader.append(\" \");\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54afa21338550d068f982fc8d045a502", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/SashForm.java", "commitBeforeChange": "dc4960bcdc88296c074d75699a1a272be7552355", "commitAfterChange": "8d34b24a859e73fc7699835d556615be5c07fde1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void onDragSash(Event event)", "signatureAfterChange": " void onDragSash(Event event)", "diff": ["-\t\t\tevent.doit = false;", "+\t\t\tif (\"carbon\".equals(SWT.getPlatform())) event.doit = false;", "-\t\t\tevent.doit = false;", "+\t\t\tif (\"carbon\".equals(SWT.getPlatform())) event.doit = false;", "-\t\t\tevent.doit = false;", "+\t\t\tif (\"carbon\".equals(SWT.getPlatform())) event.doit = false;", "-\t\t\tevent.doit = false;", "+\t\t\tif (\"carbon\".equals(SWT.getPlatform())) event.doit = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c22c60b8b7a2cfd46e75ef23f3932b2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/DialogTab.java", "commitBeforeChange": "aedecefc76a9dffeb42563cbe0d758ba66e1f0ea", "commitAfterChange": "1c03c03ef17c9839ee47bb3606b72331555684a1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tvoid buttonStyleSelected(SelectionEvent event)", "signatureAfterChange": " \tvoid buttonStyleSelected(SelectionEvent event)", "diff": ["-\t\t\t!(abortButton.getSelection () || ignoreButton.getSelection ()));", "+\t\t\t!(abortButton.getSelection () || ignoreButton.getSelection () ||", "+\t\t\t\t(yesButton.getSelection () != noButton.getSelection ())));", "-\t\t\t\tabortButton.getSelection () || ignoreButton.getSelection ()));", "+\t\t\t\tabortButton.getSelection () || ignoreButton.getSelection () ||", "+\t\t\t\t\t(cancelButton.getSelection () && !yesButton.getSelection () && !noButton.getSelection ())));", "-\t\t\t\tabortButton.getSelection () || ignoreButton.getSelection ()));", "+\t\t\t\tabortButton.getSelection () || ignoreButton.getSelection () ||", "+\t\t\t\t\t(cancelButton.getSelection () && !yesButton.getSelection () && !noButton.getSelection ())));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b5df425e2d50eaf407a94397e3f415c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "d820b37300fd1d750a00c8339cc179561d90308c", "commitAfterChange": "421dd20c72ea4483b5a69aeba70ea8a605a9a6d3", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 66, "signatureBeforeChange": " public void remove (int [] indices)", "signatureAfterChange": " public void remove (int [] indices)", "diff": ["+\tint iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());", "-\t\t\tOS.gtk_list_store_remove (modelHandle, item.handle);", "-\t\t\titem.releaseResources ();", "+\t\t\tif (item != null && !item.isDisposed ()) {", "+\t\t\t\tOS.gtk_list_store_remove (modelHandle, item.handle);", "+\t\t\t\titem.releaseResources ();", "+\t\t\t} else {", "+\t\t\t\tOS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);", "+\t\t\t\tOS.gtk_list_store_remove (modelHandle, iter);", "+\t\t\t} ", "+\tOS.g_free (iter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb1cd294a6adfa376f185c1ac5153a1b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "550e8a8e9bc83f6157c95ef4f9d89d7b16a7ca9e", "commitAfterChange": "8ee67e6f8cf3388d2b8a853341c6cdcc23726672", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 92, "signatureBeforeChange": "  int rendererGetSizeProc (int cell, int widget, int cell_area, int x_offset, int y_offset, int width, int height)", "signatureAfterChange": "  int rendererGetSizeProc (int cell, int widget, int cell_area, int x_offset, int y_offset, int width, int height)", "diff": ["+\t\tboolean isSelected = false;", "+\t\t\tint /*long*/ selection = OS.gtk_tree_view_get_selection (handle);", "+\t\t\tisSelected = OS.gtk_tree_selection_path_is_selected (selection, path);", "+\t\t\t\tif (isSelected) event.detail = SWT.SELECTED;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9251b1c18874264734f4b9fd33b19b04", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "5f22a66058a84ab159d8a8325759d6a2c9f85e5f", "commitAfterChange": "a4015ef8fc3aea85815435e071ccb0c010e785aa", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " void handleEvent (Event event)", "signatureAfterChange": " void handleEvent (Event event)", "diff": ["+\t}\r", "+\telse\r", "+\tif (event.widget == colorButton) {\r", "+\t\tColorDialog colorDialog = new ColorDialog (shell, SWT.NONE);\r", "+\t\tcolorDialog.setRGB (rgb);\r", "+\t\tRGB newRgb = colorDialog.open ();\r", "+\t\tif (newRgb != null) {\r", "+\t\t\trgb = newRgb;\r", "+\t\t\tupdateSampleColor ();\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f1163dc8b09e92c16c989bca142b355", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "e87c984b75c4897139f3db73d707bcbc49b0c3ce", "commitAfterChange": "e4feb6ecfa8a7c1734706e67f08b96b0a522620c", "methodNumberBeforeChange": 372, "methodNumberAfterChange": 373, "signatureBeforeChange": " void setScrollBars(boolean vertical)", "signatureAfterChange": " void setScrollBars(boolean vertical)", "diff": ["+\tint oldHeight = clientAreaHeight;", "+\tint oldWidth = clientAreaWidth;", "+\t\t\tif (verticalBar.getVisible()) {", "+\t\t\t\tsetScrollBar(horizontalBar, clientAreaWidth, renderer.getWidth(), leftMargin + rightMargin);", "+\t\t\t}", "+\tif (!alwaysShowScroll) {", "+\t\tredrawMargins(oldHeight, oldWidth);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9db79df11cf9e802485d63659e1011d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/browserexample/BrowserExample.java", "commitBeforeChange": "97013ef1b335c90e5ca4c814db6f1829b18532fb", "commitAfterChange": "180566b98ca53bf6542970194eaded0ccc2fd355", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public BrowserExample(Composite parent)", "signatureAfterChange": " public BrowserExample(Composite parent)", "diff": ["+\t\titemBack.setEnabled(browser.isBackEnabled());", "+\t\titemForward.setEnabled(browser.isForwardEnabled());", "+\t\t", "+\t\t\t\titemBack.setEnabled(browser.isBackEnabled());", "+\t\t\t\titemForward.setEnabled(browser.isForwardEnabled());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61faac8b1ee4c41d613a43f22d4c458f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "fa63240efdeedc784957e35c0bbc9be236fdf23a", "commitAfterChange": "b6d63697d93cb9f75fd821f66bd8fc084e724f13", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 99, "signatureBeforeChange": " public boolean sleep ()", "signatureAfterChange": " public boolean sleep ()", "diff": ["-//System.out.print(\"<\");", "-//try {", "-//\tif (getMessageCount () != 0) return true;", "-//\tsleep = 0;", "-//\tOS.DispatcherFrame_Continue(frame, true);", "-//\tOS.Dispatcher_PushFrame(frame);", "-//\tsleep = -1;", "+\tint handler = OS.gcnew_NoArgsDelegate (jniRef, \"sleep_noop\");", "+\tsleep = OS.Dispatcher_BeginInvoke(dispatcher, 0, handler);", "+\tOS.DispatcherOperation_Wait(sleep);", "+\tOS.GCHandle_Free(handler);", "+\tOS.GCHandle_Free(sleep);", "+\tsleep = 0;", "-//} finally {", "-//\tSystem.out.println(\">\");", "-//}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ce05fcf7f03d2ded8504b0680994d8d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "05fe7587ce9a1ea0c00969251eeaadbf4e7f7753", "commitAfterChange": "6c621148e4f8d62b288aaf2751c64105309afd20", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "  void sendSelectionEvent ()", "signatureAfterChange": "  void sendSelectionEvent ()", "diff": ["+\t\t/* Highlight the current(today) date */", "+\t\tif (year == Calendar.getInstance().get(Calendar.YEAR) && month == Calendar.getInstance().get(Calendar.MONTH)) {", "+\t\t\tOS.gtk_calendar_mark_day(handle, Calendar.getInstance().get(Calendar.DAY_OF_MONTH));", "+\t\t} else {", "+\t\t\tOS.gtk_calendar_clear_marks(handle);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f04f194fb05efd06cba8e7bafca40c85", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "41e8931d8059d992463eeb155adabeac9625431b", "commitAfterChange": "60ff4c61f9b274f470c47d2955baafd01620b5ee", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  long gtk_clipboard_wait_for_contents(long clipboard, long target)", "signatureAfterChange": "  long gtk_clipboard_wait_for_contents(long clipboard, long target)", "diff": ["+\tlong startTime = System.currentTimeMillis();", "+\tlong duration = System.currentTimeMillis() - startTime;", "+\tif (selection_data == 0 && duration > 5000) {", "+\t\t// Bug 241957: In case of timeout take clipboard ownership to unblock future calls", "+\t\tClipboardProxy._getInstance(display).setData(this, new String[] {\" \"},", "+\t\t\t\tnew Transfer[] { TextTransfer.getInstance() },", "+\t\t\t\tclipboard == GTKCLIPBOARD ? DND.CLIPBOARD : DND.SELECTION_CLIPBOARD);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3aa77f2fed50d9bfaaff558d345416f1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT PI/common_j2se/org/eclipse/swt/internal/Library.java", "commitBeforeChange": "eea486f7e7a4b58e0d8f2fcc88c33453815cd56d", "commitAfterChange": "b27e5f119d3546b2b71297f15cb01a2117465151", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public static void loadLibrary (String name, boolean mapName)", "signatureAfterChange": " public static void loadLibrary (String name, boolean mapName)", "diff": ["+\tString prop = System.getProperty(\"sun.arch.data.model\");", "+\tif (prop != null) {", "+\t\tif (\"32\".equals(prop)) {", "+\t\t\t if (0x1FFFFFFFFL == (int /*long*/)0x1FFFFFFFFL) {", "+\t\t\t\tthrow new UnsatisfiedLinkError(\"Cannot load 32-bit SWT libraries on 64-bit JVM\"); //$NON-NLS-1$", "+\t\t\t }", "+\t\t}", "+\t\tif (\"64\".equals(prop)) {", "+\t\t\tif (0x1FFFFFFFFL != (int /*long*/)0x1FFFFFFFFL) {", "+\t\t\t\tthrow new UnsatisfiedLinkError(\"Cannot load 64-bit SWT libraries on 32-bit JVM\"); //$NON-NLS-1$", "+\t\t\t}\t\t", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca833cde82a35998f6dc14ba2c329183", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "6cb5941df497f336dbd1a94de00d16dc57f30482", "commitAfterChange": "e8c3e1422089afbe49846d56b98c869406e435cc", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  public boolean setParent (Composite parent)", "signatureAfterChange": "  public boolean setParent (Composite parent)", "diff": ["-\tOS.SendMessage (handle, OS.TB_SETPARENT, parent.handle, 0);", "+\tint /*long*/ hwndParent = parent.handle;", "+\tOS.SendMessage (handle, OS.TB_SETPARENT, hwndParent, 0);", "+\t/*", "+\t* Bug in Windows.  When a tool bar is reparented, the tooltip", "+\t* control that is automatically created for the item is not", "+\t* reparented to the new shell.  The fix is to move the tooltip", "+\t* over using SetWindowLongPtr().  Note that for some reason,", "+\t* SetParent() does not work.", "+\t*/", "+\tint /*long*/ hwndShell = parent.getShell ().handle;", "+\tint /*long*/ hwndToolTip = OS.SendMessage (handle, OS.TB_GETTOOLTIPS, 0, 0);", "+\tOS.SetWindowLongPtr (hwndToolTip, OS.GWLP_HWNDPARENT, hwndShell);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a2b03d09844330997377248f002ad41", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "5e467403f09c889574f829fcf948e58433761966", "commitAfterChange": "c3ff7e3b62c1b9cd2ab3fd04a5e51f98173c513b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  void createLayout ()", "signatureAfterChange": "  void createLayout ()", "diff": ["-\tint ptr = OS.NewPtr(4);", "+\tint ptr1 = OS.NewPtr(4);", "-\tOS.memcpy(ptr, buffer, 4);", "-\tint[] tags = new int[]{OS.kATSUCGContextTag};", "-\tint[] sizes = new int[]{4};", "-\tint[] values = new int[]{ptr};", "+\tOS.memcpy(ptr1, buffer, 4);\t", "+\tint ptr2 = OS.NewPtr(4);", "+\tbuffer[0] = OS.kATSLineUseDeviceMetrics;", "+\tOS.memcpy(ptr2, buffer, 4);\t", "+\tint[] tags = new int[]{OS.kATSUCGContextTag, OS.kATSULineLayoutOptionsTag};", "+\tint[] sizes = new int[]{4, 4};", "+\tint[] values = new int[]{ptr1, ptr2};", "-\tOS.DisposePtr(ptr);", "+\tOS.DisposePtr(ptr1);", "+\tOS.DisposePtr(ptr2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "362dac01a4d6ed23e89a8e75b0f36120", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "d820b37300fd1d750a00c8339cc179561d90308c", "commitAfterChange": "421dd20c72ea4483b5a69aeba70ea8a605a9a6d3", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 65, "signatureBeforeChange": " public void remove (int start, int end)", "signatureAfterChange": " public void remove (int start, int end)", "diff": ["+\tint iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());", "+\tOS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, start);", "-\t\tOS.gtk_list_store_remove (modelHandle, item.handle);", "-\t\titem.releaseResources ();", "+\t\tOS.gtk_list_store_remove (modelHandle, iter);", "+\t\tif (item != null && !item.isDisposed ()) item.releaseResources ();", "+\tOS.g_free (iter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0676cb9be6865b5f4aed1bf92465ad61", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextRenderer2.java", "commitBeforeChange": "0eca40a26667c3712617b5dd23e67af76bcbab4d", "commitAfterChange": "c345d69dc06c2a69d5f698a12d1c7890b32841ad", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " private void calculateLineHeight()", "signatureAfterChange": " private void calculateLineHeight()", "diff": ["+\taverageCharWidth = Math.max(averageCharWidth, metrics.getAverageCharWidth());", "+\taverageCharWidth = Math.max(averageCharWidth, metrics.getAverageCharWidth());", "+\taverageCharWidth = Math.max(averageCharWidth, metrics.getAverageCharWidth());", "+\taverageCharWidth = Math.max(averageCharWidth, metrics.getAverageCharWidth());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3af48eb707cdb277d47ca423c22012d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "0aefae2205ecbebdf2518c8c6d05ab0032e5adad", "commitAfterChange": "43f69591d2861e44e31ebc47702400b2a09fcdc6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void _setVisible (boolean visible)", "signatureAfterChange": "  void _setVisible (boolean visible)", "diff": ["+\t\t\tint /*long*/ data = 0;", "+\t\t\tif ((OS.GTK_VERSION >=  OS.VERSION (2, 10, 0))) {", "+\t\t\t\t/*", "+\t\t\t\t* Popup-menu to the status icon should be aligned to  ", "+\t\t\t\t* Tray rather than to cursor position. There is a ", "+\t\t\t\t* possibility (unlikely) that TrayItem might have  ", "+\t\t\t\t* been disposed in the listener, for which case  ", "+\t\t\t\t* the menu should be shown in the cursor position. ", "+\t\t\t\t*/", "+\t\t\t\tTrayItem item = display.currentTrayItem;", "+\t\t\t\tif (item != null && !item.isDisposed()) {", "+\t\t\t\t\t data = item.handle;", "+\t\t\t\t\t address = OS.gtk_status_icon_position_menu_func ();", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\tOS.gtk_menu_popup (handle, 0, 0, address, 0, 0, display.getLastEventTime ());", "+\t\t\tOS.gtk_menu_popup (handle, 0, 0, address, data, 0, display.getLastEventTime ());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "384cd150a9beeabbcc64e07f3cc15165", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DirectoryDialog.java", "commitBeforeChange": "da070c767dca330968a0bc3730f4f7fa6e63ddea", "commitAfterChange": "e68f6dd7961c12937e9660a6a57b980c17ed895a", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " String openChooserDialog ()", "signatureAfterChange": " String openChooserDialog ()", "diff": ["-\t\tOS.gtk_file_chooser_set_current_folder (handle, buffer);", "+\t\t/*", "+\t\t * in GTK version 2.10, gtk_file_chooser_set_current_folder requires path", "+\t\t * to be true canonical path. So using realpath to convert the path to ", "+\t\t * true canonical path.", "+\t\t */", "+\t\tif (OS.IsAIX) {", "+\t\t\tbyte [] outputBuffer = new byte [PATH_MAX];", "+\t\t\tlong /*int*/ ptr = OS.realpath (buffer, outputBuffer);", "+\t\t\tif (ptr != 0) {", "+\t\t\t\tOS.gtk_file_chooser_set_current_folder (handle, ptr);", "+\t\t\t}", "+\t\t\t/* We are not doing free here because realpath returns the address of outputBuffer", "+\t\t\t * which is created in this code and we let the garbage collector to take care of this", "+\t\t\t */", "+\t\t} else {", "+\t\t\tlong /*int*/ ptr = OS.realpath (buffer, null);", "+\t\t\tif (ptr != 0) {", "+\t\t\t\tOS.gtk_file_chooser_set_current_folder (handle, ptr);", "+\t\t\t\tOS.g_free (ptr);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19ed2171d7b287644b7fa7f71f43c631", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/ControlEditor.java", "commitBeforeChange": "7aa7304ab21ab67ec1f79876fdde9ac78ea3c81b", "commitAfterChange": "8eb1bb4566b0e80a953227304514305df3c44dae", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void layout ()", "signatureAfterChange": " public void layout ()", "diff": ["-\t_resize();", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72f0e8c25fe7e9a0b076da5fcb513bb0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "668a2b8126376b8d6ce6a3f5a182df73aadbec08", "commitAfterChange": "3094c5a5a5c7f95d6d4fee9404267aec5c7e601b", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " StyleItem[] merge (int items, int itemCount)", "signatureAfterChange": " StyleItem[] merge (int items, int itemCount)", "diff": ["-\t\t\tif (start < itemLimit) {", "-\t\t\t\titem.analysis.fLinkAfter = true;", "-\t\t\t\tlinkBefore = true;", "+\t\t\tif (start < itemLimit && 0 < start && start < end) {", "+\t\t\t\tchar pChar = segmentsText.charAt(start - 1);", "+\t\t\t\tchar tChar = segmentsText.charAt(start);", "+\t\t\t\tif (!Compatibility.isWhitespace(pChar) && !Compatibility.isWhitespace(tChar)) {", "+\t\t\t\t\titem.analysis.fLinkAfter = true;", "+\t\t\t\t\tlinkBefore = true;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2423dccd8ee0e3d61095829ae3b9c873", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/AllBrowserTests.java", "commitBeforeChange": "6a4b4d184893d93ba51435edb126aa14e72da424", "commitAfterChange": "2c35de82ae65c7619247302d81332aa442fdb466", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Test suite()", "signatureAfterChange": " public static Test suite()", "diff": ["+\tsuite.addTest(Test_org_eclipse_swt_browser_LocationAdapter.suite());", "+\tsuite.addTest(Test_org_eclipse_swt_browser_NewWindowListener.suite());", "+\tsuite.addTest(Test_org_eclipse_swt_browser_VisibilityAdapter.suite());", "+\tsuite.addTest(Test_org_eclipse_swt_browser_VisibilityListener.suite());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "954edbce436ef53da332e43ad05c5c02", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "62659c60fb93ccf03bfeed39034d353a999980ed", "commitAfterChange": "7497dae9217a5bda7e3e9b61fd201ba1d71a3a3c", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "  boolean setScrollWidth (TableItem item, boolean force)", "signatureAfterChange": "  boolean setScrollWidth (TableItem item, boolean force)", "diff": ["+\t\tint imageIndent = 0;", "+\t\t\t\timageIndent = Math.max (imageIndent, item.imageIndent);", "-\t\t\t\tif (items [index] != null) string = items [index].text;", "+\t\t\t\tif (items [index] != null) {", "+\t\t\t\t\tstring = items [index].text;", "+\t\t\t\t\timageIndent = Math.max (imageIndent, items [index].imageIndent);", "+\t\t\t\t}", "-\t\t\tnewWidth += cx [0];", "+\t\t\tnewWidth += (imageIndent + 1) * cx [0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f61795092f4b664811c274e81e30de8f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "d81e473e483ae4fce965f43d47dd34220fc3e0cd", "commitAfterChange": "a38b0e1c16db17f32238a4af0323e106634ade69", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "  void destroyItem (TableColumn column)", "signatureAfterChange": "  void destroyItem (TableColumn column)", "diff": ["+\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex + 4, ptr, -1); //font", "+\t\t\tOS.gtk_list_store_set (newModel, newItem, FIRST_COLUMN + 4, ptr [0], -1);", "+\t\t\tOS.gtk_list_store_set (modelHandle, item, modelIndex + 4, 0, -1); //font"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2230524ce66a161bc435d4be98483542", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "278b7496d5f05ddcb0b50291ded2c2b2aaf7b537", "commitAfterChange": "a78d8d223f599f8237fd60b93b4b545f93de71b7", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 36, "signatureBeforeChange": " public void setWidth (int width)", "signatureAfterChange": " public void setWidth (int width)", "diff": ["-\tresizeControl ();", "+\tif (control != null && !control.isDisposed ()) {", "+\t\tOS.gtk_widget_reparent (control.topHandle(), parentHandle);", "+\t\tcontrol.setBounds (getBounds ());", "+\t\tOS.gtk_widget_reparent (control.topHandle(), handle);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1cac8c9a9787c8d486b29530490fd41", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "593a20e14cabc307ffcbb96ca3baba1cabda4153", "commitAfterChange": "b4b4915a8b6d503d1a91832f2e2cbbca416027d4", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["-//\t\tint pid = OS.getpid ();", "-//\t\tbyte [] buffer = null;", "-//\t\tint ptr = OS.getenv (ascii (\"APP_NAME_\" + pid));", "-//\t\tif (ptr != 0) {", "-//\t\t\tbuffer = new byte [OS.strlen (ptr) + 1];", "-//\t\t\tOS.memmove (buffer, ptr, buffer.length);", "-//\t\t} else {", "-//\t\t\tif (APP_NAME != null) {", "-//\t\t\t\tchar [] chars = new char [APP_NAME.length ()];", "-//\t\t\t\tAPP_NAME.getChars (0, chars.length, chars, 0);", "-//\t\t\t\tint cfstring = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, chars, chars.length);", "-//\t\t\t\tif (cfstring != 0) {", "-//\t\t\t\t\tCFRange range = new CFRange ();", "-//\t\t\t\t\trange.length = chars.length;", "-//\t\t\t\t\tint encoding = OS.CFStringGetSystemEncoding ();", "-//\t\t\t\t\tint [] size = new int [1];", "-//\t\t\t\t\tint numChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, null, 0, size);", "-//\t\t\t\t\tif (numChars != 0) {", "-//\t\t\t\t\t\tbuffer = new byte [size [0] + 1];", "-//\t\t\t\t\t\tnumChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, buffer, size [0], size);", "-//\t\t\t\t\t}", "-//\t\t\t\t\tOS.CFRelease (cfstring);", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t}", "-//\t\tif (buffer != null) OS.CPSSetProcessName (psn, buffer);\t", "+\t\tint ptr = OS.getenv (ascii (\"APP_NAME_\" + OS.getpid ()));", "+\t\tif (ptr  == 0 && APP_NAME != null) {", "+\t\t\tptr = NSString.stringWith(APP_NAME).UTF8String();\t", "+\t\t}", "+\t\tif (ptr != 0) OS.CPSSetProcessName (psn, ptr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae112b24a6463ea36d8b74dc6246ebda", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/ScrollBar.java", "commitBeforeChange": "73e7ebb78e8b14959b40e5cd6db2f06802b80702", "commitAfterChange": "beb3230a14d718993438b762d3e460dbe17629f9", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "  void updateBar (int selection, int minimum, int maximum, int thumb)", "signatureAfterChange": "  void updateBar (int selection, int minimum, int maximum, int thumb)", "diff": ["-\twidget.setFloatValue (fraction, knob);", "-\twidget.setEnabled (range > 0); ", "+\tdouble oldFraction = widget.doubleValue();", "+\tfloat /*double*/ oldKnob = widget.knobProportion();", "+\twidget.setDoubleValue(fraction);", "+\twidget.setKnobProportion(knob);", "+\twidget.setEnabled (range > 0);", "+\tif (target == null && (knob != oldKnob || fraction != oldFraction)) {", "+\t\tOS.objc_msgSend(parent.scrollView.id, OS.sel_flashScrollers);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "904b68cae6e0be1ccc99637bc7c4bfe9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TabItem.java", "commitBeforeChange": "349524ec94804fee322070dd0953e602ebf55c4c", "commitAfterChange": "c7ea8399de9227e341c31c8d8f5abfa842fea9cc", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void setControl (Control control)", "signatureAfterChange": " public void setControl (Control control)", "diff": ["+", "+\tif (OS.GTK3) {", "+\t\t/*", "+\t\t* Bug 454936 (see also other 454936 references in TabFolder)", "+\t\t* Architecture Fix:", "+\t\t*  We reparent the child to be a child of the 'tab' rather than tabfolder's parent swtFixed container.", "+\t\t*  Note, this reparenting is only on the GTK side, not on the SWT side.", "+\t\t*", "+\t\t*  Note, GTK2 and GTK3 child nesting behaviour is different now.", "+\t\t*  GTK2:", "+\t\t*    swtFixed", "+\t\t*    |-- GtkNoteBook", "+\t\t*    |   |-- tabLabel1", "+\t\t*    |   |-- tabLabel2", "+\t\t*    |-- swtFixed (child1)  //child is sibling of Notebook", "+\t\t*    |-- swtFixed (child2)", "+\t\t*", "+\t\t*  GTK3+:", "+\t\t*  \tswtFixed", "+\t\t*  \t|--\tGtkNoteBook", "+\t\t*  \t\t|-- tabLabel1", "+\t\t*  \t\t|-- tabLabel2", "+\t\t*  \t\t|-- swtFixed (child1) //child now child of Notebook.", "+\t\t*  \t\t|-- swtFixed (child2)", "+\t\t*", "+\t\t*  This corrects the hierarchy so that children are beneath gtkNotebook (as oppose to", "+\t\t*  being siblings) and thus fixes DND and background color issues.", "+\t\t*  In gtk2, reparenting doesn't function properly (tab content appear blank),", "+\t\t*  so this is a gtk3-specific behavior.", "+\t\t*", "+\t\t*  Note about the reason for reparenting:", "+\t\t*   Reparenting (as oppose to adding widget to a tab in the first place) is neccessary", "+\t\t*   because you can have a situation where you create a widget before you create a tab. e.g", "+\t\t*     TabFolder tabFolder = new TabFolder(shell, 0);", "+\t\t*     Composite composite = new Composite(tabFolder, 0);", "+\t\t*     TabItem tabItem = new TabItem(tabFolder, 0);", "+\t\t*     tabitem.setControl(composite);", "+\t\t*/", "+\t\tOS.g_object_ref (control.topHandle ()); //so that it won't get destroyed due to lack of references.", "+\t\tOS.gtk_container_remove (control.parent.topHandle (), control.topHandle ());", "+\t\tOS.gtk_container_add (pageHandle, control.topHandle ());", "+\t\tOS.g_object_unref (control.topHandle ());", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd09c45735af9d75512cbc36710d7374", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "c40d6e57e5f65e27118dad94b329e7ca503c0c5b", "commitAfterChange": "dbf1727339f44fded31470b3ddd87c7e31ef64c0", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " void doMouseLocationChange(int x, int y, boolean select)", "signatureAfterChange": " void doMouseLocationChange(int x, int y, boolean select)", "diff": ["+\t\tx = Math.max(leftMargin, Math.min(x, clientAreaWidth - leftMargin - rightMargin));", "+\t\ty = Math.max(topMargin, Math.min(y, clientAreaHeight - topMargin - bottomMargin));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1e48af12be4f2af781c70b6e9852b37", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextRenderer.java", "commitBeforeChange": "86857ed6acdf97fa33137b9a82dae79eb6e75680", "commitAfterChange": "90b27c1a88c459a52169c43a26b20e3fb1c3db94", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " void calculateLineHeight()", "signatureAfterChange": " void calculateLineHeight()", "diff": ["+\tgc.setFont(italicFont);", "+\tlineHeight = Math.max(lineHeight, gc.getFontMetrics().getHeight());", "+\tgc.setFont(boldItalicFont);", "+\tlineHeight = Math.max(lineHeight, gc.getFontMetrics().getHeight());\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d138ccd3a7184e794a9acda800847ad6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "34830c5ea1d64c3a02443211fb13e925cac126f1", "commitAfterChange": "4e64580ba3040d30ac205fe496a0b9154e6fedb9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public MacGenerator(String[] xmls)", "signatureAfterChange": " \t public MacGenerator(String[] xmls)", "diff": ["+\tlong start = System.currentTimeMillis();", "-\textraAttributes = new Hashtable[xmls.length];", "-\t\tdocuments[i] = getDocument(xmls[i]);", "-\t\textraAttributes[i] = loadExtraAttributes(xmls[i]);", "+\t\tDocument document = documents[i] = getDocument(xmls[i]);", "+\t\tif (document == null) continue;", "+\t\tmerge(document, document, loadExtraAttributes(xmls[i]));", "+\tlong end = System.currentTimeMillis();", "+\tSystem.out.println(\"load=\" + (end - start));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe1207a1fc7e359f1414d01093c20185", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "d820b37300fd1d750a00c8339cc179561d90308c", "commitAfterChange": "421dd20c72ea4483b5a69aeba70ea8a605a9a6d3", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 64, "signatureBeforeChange": " public void remove (int index)", "signatureAfterChange": " public void remove (int index)", "diff": ["-\tOS.gtk_list_store_remove (modelHandle, item.handle);", "+\tif (item != null && !item.isDisposed ()) {", "+\t\tOS.gtk_list_store_remove (modelHandle, item.handle);", "+\t\titem.releaseResources ();", "+\t} else {", "+\t\tint iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());", "+\t\tOS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);", "+\t\tOS.gtk_list_store_remove (modelHandle, iter);", "+\t\tOS.g_free (iter);", "+\t}", "-\titem.releaseResources ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83d095dd6b6e360c8a4c5d5572359b62", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "7a71196ad19bd7035c4a8e74f35e0ba1c93f4860", "commitAfterChange": "4aae2bc3d6f1251c534935e8e7c9ca094ae51ac6", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "  void hookEvents ()", "signatureAfterChange": "  void hookEvents ()", "diff": ["+\tint /*long*/ windowProc4 = display.windowProc4;", "+\tint /*long*/ windowProc5 = display.windowProc5;", "+\tOS.g_signal_connect (entryHandle, OS.insert_text, windowProc5, INSERT_TEXT);", "+\tOS.g_signal_connect (entryHandle, OS.delete_text, windowProc4, DELETE_TEXT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b85b25f6207a274fc77dcdb1cb1d8783", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/dnd/DNDExample.java", "commitBeforeChange": "79b97f5c889d673c9fd544b35cc24e5be1fe7378", "commitAfterChange": "5bc481d5fd138a6176abde7af81335d4eecb79ee", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 52, "signatureBeforeChange": "  private Control createWidget(int type, Composite parent, String prefix)", "signatureAfterChange": "  private Control createWidget(int type, Composite parent, String prefix)", "diff": ["+\t\t\tImage image = Display.getDefault().getSystemImage(SWT.ICON_INFORMATION);", "+\t\t\t\titem.setImage(image);", "+\t\t\tImage image = Display.getDefault().getSystemImage(SWT.ICON_INFORMATION);", "+\t\t\t\titem.setImage(image);", "+\t\t\t\t\tsubItem.setImage(image);", "+\t\t\t\t\t\tsubsubItem.setImage(image);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ab5a1b5385006ae868a7c957ee4803f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/graphics/Path.java", "commitBeforeChange": "42591a26814da7769c013c027cfabe03bf47da99", "commitAfterChange": "d478776510b5335e5221f6aa6a24f5149208c458", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public void addArc(float x, float y, float width, float height, float startAngle, float arcAngle)", "signatureAfterChange": " public void addArc(float x, float y, float width, float height, float startAngle, float arcAngle)", "diff": ["-\tint size = OS.gcnew_Size(width / 2.0, height / 2.0);", "-\tint arc = OS.gcnew_ArcSegment(endPoint, size, 0, isLargeAngle, OS.SweepDirection_Clockwise, true);", "-\tOS.PathSegmentCollection_Add(segments, arc);", "-\tOS.GCHandle_Free(segments);", "-\tOS.GCHandle_Free(arc);", "-\tOS.GCHandle_Free(size);", "-\tOS.GCHandle_Free(startPoint);", "-\tif (currentPoint != 0) OS.GCHandle_Free(currentPoint);", "-\tcurrentPoint = endPoint;", "-\tif (arcAngle > 360 || arcAngle < -360) {", "+\tif (arcAngle >= 360 || arcAngle <= -360) {", "+\t\tint rect = OS.gcnew_Rect(x, y, width, height);", "+\t\tint geometry = OS.gcnew_EllipseGeometry(rect);", "+\t\tOS.PathGeometry_AddGeometry(handle, geometry);", "+\t\tOS.GCHandle_Free(geometry);", "+\t\tOS.GCHandle_Free(rect);", "+\t} else {", "+\t\tint size = OS.gcnew_Size(width / 2.0, height / 2.0);", "+\t\tint arc = OS.gcnew_ArcSegment(endPoint, size, 0, isLargeAngle, OS.SweepDirection_Clockwise, true);", "+\t\tOS.PathSegmentCollection_Add(segments, arc);", "+\t\tOS.GCHandle_Free(size);", "+\t\tOS.GCHandle_Free(arc);", "-\t", "+\tOS.GCHandle_Free(segments);", "+\tOS.GCHandle_Free(startPoint);", "+\tif (currentPoint != 0) OS.GCHandle_Free(currentPoint);", "+\tcurrentPoint = endPoint;\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "875045a950c82982f31b727ff0a545cc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "fa63240efdeedc784957e35c0bbc9be236fdf23a", "commitAfterChange": "b6d63697d93cb9f75fd821f66bd8fc084e724f13", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 78, "signatureBeforeChange": " public boolean readAndDispatch ()", "signatureAfterChange": " public boolean readAndDispatch ()", "diff": ["-//\tSystem.out.print(\"[\");", "-\ttry {", "-\t\tOS.DispatcherFrame_Continue (frame, true);", "-\t\tOS.Dispatcher_PushFrame (frame);", "-\t\tif (!idle) {", "-\t\t\trunDeferredEvents();", "-\t\t\treturn true;", "-\t\t}", "-//\t\treturn runAsyncMessages (false);", "-\t\treturn !idle;", "-\t} finally {", "-//\t\tSystem.out.print(\"]\");", "+\tidle = false;", "+\tint handler = OS.gcnew_NoArgsDelegate(jniRef, \"setIdleHandler\");", "+\toperation = OS.Dispatcher_BeginInvoke(dispatcher, 2, handler);", "+\tOS.DispatcherOperation_Wait(operation);", "+\tOS.GCHandle_Free(handler);", "+\tOS.GCHandle_Free(operation);", "+\toperation = 0;", "+\tif (!idle) {", "+\t\trunDeferredEvents();", "+\t\treturn true;", "+\treturn runAsyncMessages(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77198463d2abe5546ee6d96f3df90e23", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Scrollable.java", "commitBeforeChange": "b51df8c5d2a1f1ef29aaa06e71ea019f83afe7b0", "commitAfterChange": "ca9274a88ad2bbd34f29d272a5b3805367bb073d", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r \r LRESULT WM_MOUSEWHEEL (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_MOUSEWHEEL (int wParam, int lParam)", "diff": ["-\t\tif (verticalBar.getSelection () != vPosition) {\r", "+\t\tint position = verticalBar.getSelection ();\r", "+\t\tif (position != vPosition) {\r", "-\t\t\tevent.detail = SWT.DRAG; \r", "+\t\t\tevent.detail = position < vPosition ? SWT.PAGE_UP : SWT.PAGE_DOWN; \r", "-\t\tif (horizontalBar.getSelection () != hPosition) {\r", "+\t\tint position = horizontalBar.getSelection ();\r", "+\t\tif (position != hPosition) {\r", "-\t\t\tevent.detail = SWT.DRAG; \r", "+\t\t\tevent.detail = position < vPosition ? SWT.PAGE_UP : SWT.PAGE_DOWN; \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42ce9d9a2dae51e212c69ba39f76971d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "dbfdea5a6ace7254c9bcb69a7489276f3b9d3e35", "commitAfterChange": "f1fbb8716f7eb6144440edb1c7a2f83e3f63fe10", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\tNSMenu widget = (NSMenu)new SWTMenu().alloc();", "-\twidget = widget.initWithTitle(NSString.string());", "-\twidget.setAutoenablesItems(false);", "-\twidget.setDelegate(widget);\t", "-\tnsMenu = widget;\t", "+\tif (nsMenu == null) {", "+\t\tNSMenu widget = (NSMenu)new SWTMenu().alloc();", "+\t\twidget = widget.initWithTitle(NSString.string());", "+\t\twidget.setAutoenablesItems(false);", "+\t\twidget.setDelegate(widget);\t", "+\t\tnsMenu = widget;\t", "+\t} else {", "+\t\tnsMenu.retain();", "+\t\tint /*long*/ cls = OS.object_getClass(nsMenu.id);", "+\t\tint /*long*/ dynNSMenu_class = display.createMenuSubclass(cls, \"SWTSystemMenu\", true);", "+\t\tif (cls != dynNSMenu_class) {", "+\t\t\tOS.object_setClass(nsMenu.id, dynNSMenu_class);", "+\t\t}", "+\t\tnsMenu.setDelegate(nsMenu);\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de6f7275d7c7e0abdd3e5453ae50b812", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/cocoa/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "f4abd83d57d77245094f225bf96065fc437b4479", "commitAfterChange": "8ab0cb1a59e576205e88d233b12556089108ede1", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public boolean startJob(String jobName)", "signatureAfterChange": " public boolean startJob(String jobName)", "diff": ["-//\tif (jobName != null && jobName.length() != 0) {", "-//\t\tchar[] buffer = new char[jobName.length ()];", "-//\t\tjobName.getChars(0, buffer.length, buffer, 0);", "-//\t\tint ptr = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, buffer, buffer.length);", "-//\t\tif (ptr != 0) {", "-//\t\t\tOS.PMSetJobNameCFString(printSettings, ptr); ", "-//\t\t\tOS.CFRelease (ptr);", "-//\t\t}", "-//\t}", "-//\treturn OS.PMSessionBeginDocumentNoDialog(printSession, printSettings, pageFormat) == OS.noErr;", "+\tif (jobName != null && jobName.length() != 0) {", "+\t\toperation.setJobTitle(NSString.stringWith(jobName));", "+\t}", "+\tNSPrintOperation.setCurrentOperation(operation);", "+\tNSGraphicsContext context = operation.createContext();", "+\tif (context != null) {", "+\t\tview.beginDocument();", "+\t\treturn true;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "848a95223c06eae7249b0717f38b93eb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "a45ca6cefd504fad188b4251087219d3424ec6ad", "commitAfterChange": "b718306803d22d54ab6af10f8ad6048ad7f4a0ea", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  void hookEvents ()", "signatureAfterChange": "  void hookEvents ()", "diff": ["+\t\thandler = OS.gcnew_KeyboardFocusChangedEventHandler (jniRef, \"HandlePreviewGotKeyboardFocusActivate\");", "+\t\tOS.UIElement_PreviewGotKeyboardFocus (shellHandle, handler);", "+\t\tOS.GCHandle_Free (handler);", "+\t\thandler = OS.gcnew_KeyboardFocusChangedEventHandler (jniRef, \"HandleLostKeyboardFocusDeactivate\");", "+\t\tOS.UIElement_LostKeyboardFocus (shellHandle, handler);", "+\t\tOS.GCHandle_Free (handler);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f300f368f7837e88683834684cc078f4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "1054da589c4ce7da01e9eb9d8e4e75bf9b62a2db", "commitAfterChange": "6b71999963d0165be5a5c1e361d6a8dce42a829d", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "  void initGdip(boolean draw, boolean fill)", "signatureAfterChange": "  void initGdip(boolean draw, boolean fill)", "diff": ["-\tif (gdipGraphics == 0) gdipGraphics = data.gdipGraphics = Gdip.Graphics_new(handle);", "+\tif (gdipGraphics == 0) {", "+\t\t/*", "+\t\t* Feature in GDI+. The GDI+ clipping set with Graphics->SetClip()", "+\t\t* is always intersected with the GDI clipping at the time the", "+\t\t* GDI+ graphics is created.  This means that the clipping ", "+\t\t* cannot be reset.  The fix is to clear the clipping before", "+\t\t* the GDI+ graphics is created and reset it afterwards.", "+\t\t*/", "+\t\tint hRgn = OS.CreateRectRgn(0, 0, 0, 0);", "+\t\tint result = OS.GetClipRgn(handle, hRgn);", "+\t\tOS.SelectClipRgn(handle, 0);", "+\t\tgdipGraphics = data.gdipGraphics = Gdip.Graphics_new(handle);", "+\t\tif (result == 1) setClipping(hRgn);", "+\t\tOS.DeleteObject(hRgn);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15a2931c89fa036228ee4b8d2ad8eb19", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "5a7c149aeb8d18a02cc47db0e52d6bca3505a8b8", "commitAfterChange": "285048d733ba2ac7ac939aae339235bf286f43d0", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["+\t\tint ptr = OS.getenv ((\"APP_ICON_\" + OS.getpid() + \"\\0\").getBytes ());", "+\t\tif (ptr != 0) {", "+\t\t\tint [] image = readImageRef (ptr);", "+\t\t\tif (image != null) {", "+\t\t\t\tdockImage = image [0];", "+\t\t\t\tdockImageData = image [1];", "+\t\t\t\tOS.SetApplicationDockTileImage (dockImage);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bc12eb937b96ab0f642fe6b1fa9a968", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "9eaa8379e5f9408b913b00e55afb221c67deb4d4", "commitAfterChange": "05b2d9ad3f7ab1029650d42dfd6eb2a19c5eae66", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \r int itemSelected (int widget, int client, int call)", "signatureAfterChange": "\r \r int itemSelected (int widget, int client, int call)", "diff": ["-\tint ptr = 0;\r", "+\tint address = 0;\r", "-\t\tptr = argList2 [1];\r", "+\t\tint ptr = argList2 [1];\r", "+\t\taddress = OS.XmStringUnparse (\r", "+\t\t\tptr,\r", "+\t\t\tnull,\r", "+\t\t\tOS.XmCHARSET_TEXT,\r", "+\t\t\tOS.XmCHARSET_TEXT,\r", "+\t\t\tnull,\r", "+\t\t\t0,\r", "+\t\t\tOS.XmOUTPUT_ALL);\r", "+\t\tOS.XmStringFree (ptr);\r", "-\t\tptr = buffer [0];\r", "+\t\tint ptr = buffer [0];\r", "+\t\taddress = OS.XmStringUnparse (\r", "+\t\t\tptr,\r", "+\t\t\tnull,\r", "+\t\t\tOS.XmCHARSET_TEXT,\r", "+\t\t\tOS.XmCHARSET_TEXT,\r", "+\t\t\tnull,\r", "+\t\t\t0,\r", "+\t\t\tOS.XmOUTPUT_ALL);\r", "-\t\r", "-\tint address = OS.XmStringUnparse (\r", "-\t\tptr,\r", "-\t\tnull,\r", "-\t\tOS.XmCHARSET_TEXT,\r", "-\t\tOS.XmCHARSET_TEXT,\r", "-\t\tnull,\r", "-\t\t0,\r", "-\t\tOS.XmOUTPUT_ALL);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e33f51b2e4396274d9c1108aa08420ef", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/URLTransfer.java", "commitBeforeChange": "71b2aa620cf3f84c5bb16b09884caf7b1dd69cc7", "commitAfterChange": "f60812afa59a57f249f49f9d7dfd3c8681fd0b21", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\rpublic Object nativeToJava(TransferData transferData)", "signatureAfterChange": "\rpublic Object nativeToJava(TransferData transferData)", "diff": ["-/*******************************************************************************\r * Copyright (c) 20007 IBM Corporation and others.\r * All rights reserved. This program and the accompanying materials\r * are made available under the terms of the Eclipse Public License v1.0\r * which accompanies this distribution, and is available at\r * http://www.eclipse.org/legal/epl-v10.html\r *\r * Contributors:\r *     IBM Corporation - initial API and implementation\r *******************************************************************************/\rpackage org.eclipse.swt.dnd;\r\rimport org.eclipse.swt.internal.carbon.*;\r\r/**\r * The class <code>URLTransfer</code> provides a platform specific mechanism \r * for converting text in URL format represented as a java <code>String</code> \r * to a platform specific representation of the data and vice versa.  See \r * <code>Transfer</code> for additional information. The string  \r * must contain the fully specified url.\r * \r * <p>An example of a java <code>String[]</code> containing a URL is shown \r * below:</p>\r * \r * <code><pre>\r *     String url = \"http://www.eclipse.org\";\r * </code></pre>\r */\rpublic class URLTransfer extends ByteArrayTransfer {\r\r\tstatic URLTransfer _instance = new URLTransfer();\r\tstatic final String URL = \"url \"; //$NON-NLS-1$\r\tstatic final int URL_ID = registerType(URL);\r\tstatic final String URLN = \"urln\"; //$NON-NLS-1$\r\tstatic final int URLN_ID = registerType(URLN);\r\rprivate URLTransfer() {}\r\r/**\r * Returns the singleton instance of the URLTransfer class.\r *\r * @return the singleton instance of the URLTransfer class\r */\rpublic static URLTransfer getInstance () {\r\treturn _instance;\r}\r\r/**\r * This implementation of <code>javaToNative</code> converts a URL\r * represented by a java <code>String</code> to a platform specific representation.\r * For additional information see <code>Transfer#javaToNative</code>.\r * \r * @param object a java <code>String[]</code> containing a URL\r * @param transferData an empty <code>TransferData</code> object; this\r *  object will be filled in on return with the platform specific format of the data\r */\rpublic void javaToNative (Object object, TransferData transferData){\r\tif (!checkURL(object) || !isSupportedType(transferData)) {\r\t\tDND.error(DND.ERROR_INVALID_DATA);\r\t}\r\ttransferData.result = -1;\r\tString url = (String)object;\r\tint count = url.length();\r\tchar[] chars = new char[count];\r\turl.getChars(0, count, chars, 0);\r\tint cfstring = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, count);\r\tif (cfstring == 0) return;\r\ttry {\r\t\tCFRange range = new CFRange();\r\t\trange.length = chars.length;\r\t\tint encoding = OS.CFStringGetSystemEncoding();\r\t\tint[] size = new int[1];\r\t\tint numChars = OS.CFStringGetBytes(cfstring, range, encoding, (byte)'?', true, null, 0, size);\r\t\tif (numChars == 0 || size[0] == 0) return;\r\t\tbyte[] buffer = new byte[size[0]];\r\t\tnumChars = OS.CFStringGetBytes(cfstring, range, encoding, (byte)'?', true, buffer, size [0], size);\r\t\tif (numChars == 0) return;\r\t\ttransferData.data = new byte[][] {buffer};\r\t\ttransferData.result = 0;\r\t} finally {\r\t\tOS.CFRelease(cfstring);\r\t}\r}\r\r/**\r * This implementation of <code>nativeToJava</code> converts a platform specific \r * representation of a URL to a java <code>String</code>.\r * For additional information see <code>Transfer#nativeToJava</code>.\r * \r * @param transferData the platform specific representation of the data to be \r * converted\r * @return a java <code>String[]</code> containing a URL if the \r * conversion was successful; otherwise null\r */\rpublic Object nativeToJava(TransferData transferData){\r\tif (!isSupportedType(transferData) || transferData.data == null) return null;\r\tif (transferData.data.length == 0) return null;\r\tbyte[] buffer = transferData.data[0];\r\tint encoding = OS.CFStringGetSystemEncoding();\r\tint cfstring = OS.CFStringCreateWithBytes(OS.kCFAllocatorDefault, buffer, buffer.length, encoding, true);\r\tif (cfstring == 0) return null;\r\ttry {\r\t\tint length = OS.CFStringGetLength(cfstring);\r\t\tif (length == 0) return null;\r\t\tchar[] chars = new char[length];\r\t\tCFRange range = new CFRange();\r\t\trange.length = length;\r\t\tOS.CFStringGetCharacters(cfstring, range, chars);\r\t\treturn new String(chars);\r\t} finally {\r\t\tOS.CFRelease(cfstring);\r\t}\r}\r\rprotected int[] getTypeIds(){\r\treturn new int[] {URL_ID, URLN_ID};\r}\r\rprotected String[] getTypeNames(){\r\treturn new String[] {URL, URLN}; \r}\r\rboolean checkURL(Object object) {\r\treturn object != null && (object instanceof String) && ((String)object).length() > 0;\r}\r\rprotected boolean validate(Object object) {\r\treturn checkURL(object);\r}\r}\r", "\\ No newline at end of file", "+/*******************************************************************************\r * Copyright (c) 20007 IBM Corporation and others.\r * All rights reserved. This program and the accompanying materials\r * are made available under the terms of the Eclipse Public License v1.0\r * which accompanies this distribution, and is available at\r * http://www.eclipse.org/legal/epl-v10.html\r *\r * Contributors:\r *     IBM Corporation - initial API and implementation\r *******************************************************************************/\rpackage org.eclipse.swt.dnd;\r\rimport org.eclipse.swt.internal.carbon.*;\r\r/**\r * The class <code>URLTransfer</code> provides a platform specific mechanism \r * for converting text in URL format represented as a java <code>String</code> \r * to a platform specific representation of the data and vice versa.  See \r * <code>Transfer</code> for additional information. The string  \r * must contain the fully specified url.\r * \r * <p>An example of a java <code>String[]</code> containing a URL is shown \r * below:</p>\r * \r * <code><pre>\r *     String url = \"http://www.eclipse.org\";\r * </code></pre>\r */\rpublic class URLTransfer extends ByteArrayTransfer {\r\r\tstatic URLTransfer _instance = new URLTransfer();\r\tstatic final String URL = \"url \"; //$NON-NLS-1$\r\tstatic final int URL_ID = registerType(URL);\r\tstatic final String URLN = \"urln\"; //$NON-NLS-1$\r\tstatic final int URLN_ID = registerType(URLN);\r\rprivate URLTransfer() {}\r\r/**\r * Returns the singleton instance of the URLTransfer class.\r *\r * @return the singleton instance of the URLTransfer class\r */\rpublic static URLTransfer getInstance () {\r\treturn _instance;\r}\r\r/**\r * This implementation of <code>javaToNative</code> converts a URL\r * represented by a java <code>String</code> to a platform specific representation.\r * For additional information see <code>Transfer#javaToNative</code>.\r * \r * @param object a java <code>String[]</code> containing a URL\r * @param transferData an empty <code>TransferData</code> object; this\r *  object will be filled in on return with the platform specific format of the data\r */\rpublic void javaToNative (Object object, TransferData transferData){\r\tif (!checkURL(object) || !isSupportedType(transferData)) {\r\t\tDND.error(DND.ERROR_INVALID_DATA);\r\t}\r\ttransferData.result = -1;\r\tString url = (String)object;\r\tint count = url.length();\r\tchar[] chars = new char[count];\r\turl.getChars(0, count, chars, 0);\r\tint cfstring = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, count);\r\tif (cfstring == 0) return;\r\ttry {\r\t\tCFRange range = new CFRange();\r\t\trange.length = chars.length;\r\t\tint encoding = OS.kCFStringEncodingUTF8;\r\t\tint[] size = new int[1];\r\t\tint numChars = OS.CFStringGetBytes(cfstring, range, encoding, (byte)'?', true, null, 0, size);\r\t\tif (numChars == 0 || size[0] == 0) return;\r\t\tbyte[] buffer = new byte[size[0]];\r\t\tnumChars = OS.CFStringGetBytes(cfstring, range, encoding, (byte)'?', true, buffer, size [0], size);\r\t\tif (numChars == 0) return;\r\t\ttransferData.data = new byte[][] {buffer};\r\t\ttransferData.result = 0;\r\t} finally {\r\t\tOS.CFRelease(cfstring);\r\t}\r}\r\r/**\r * This implementation of <code>nativeToJava</code> converts a platform specific \r * representation of a URL to a java <code>String</code>.\r * For additional information see <code>Transfer#nativeToJava</code>.\r * \r * @param transferData the platform specific representation of the data to be \r * converted\r * @return a java <code>String[]</code> containing a URL if the \r * conversion was successful; otherwise null\r */\rpublic Object nativeToJava(TransferData transferData){\r\tif (!isSupportedType(transferData) || transferData.data == null) return null;\r\tif (transferData.data.length == 0) return null;\r\tbyte[] buffer = transferData.data[0];\r\tint encoding = OS.kCFStringEncodingUTF8;\r\tint cfstring = OS.CFStringCreateWithBytes(OS.kCFAllocatorDefault, buffer, buffer.length, encoding, true);\r\tif (cfstring == 0) return null;\r\tchar[] unescapedChars = new char[] {'%'};\r\tint unescapedStr = OS.CFStringCreateWithCharacters(0, unescapedChars, unescapedChars.length);\r\tint str = OS.CFURLCreateStringByReplacingPercentEscapes(OS.kCFAllocatorDefault, cfstring, unescapedStr);\r\tOS.CFRelease(unescapedStr);\r\tOS.CFRelease(cfstring);\r\tif (str == 0) return null;\r\ttry {\r\t\tint length = OS.CFStringGetLength(str);\r\t\tif (length == 0) return null;\r\t\tchar[] chars = new char[length];\r\t\tCFRange range = new CFRange();\r\t\trange.length = length;\r\t\tOS.CFStringGetCharacters(str, range, chars);\r\t\treturn new String(chars);\r\t} finally {\r\t\tOS.CFRelease(str);\r\t}\r}\r\rprotected int[] getTypeIds(){\r\treturn new int[] {URL_ID, URLN_ID};\r}\r\rprotected String[] getTypeNames(){\r\treturn new String[] {URL, URLN}; \r}\r\rboolean checkURL(Object object) {\r\treturn object != null && (object instanceof String) && ((String)object).length() > 0;\r}\r\rprotected boolean validate(Object object) {\r\treturn checkURL(object);\r}\r}\r", "\\ No newline at end of file"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57ecbf6f0c6ace47ec0bf49ad65ac31a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "68e82eff6910deb2bf408cc4927ac6e52e367ee1", "commitAfterChange": "70a2f2c1c94e25b115c37690e0081e2501c12d38", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": "  boolean sendMouseEvent(NSEvent nsEvent, int type, boolean send)", "signatureAfterChange": "  boolean sendMouseEvent(NSEvent nsEvent, int type, boolean send)", "diff": ["-\t\t\tNSTableView widget = (NSTableView)view;", "+\t\t\tNSOutlineView widget = (NSOutlineView)view;", "-\t\t\tevent.item = _getItem (null, selectedRowIndex, true);", "+\t\t\tid itemID = widget.itemAtRow (selectedRowIndex);", "+\t\t\tif (itemID != null) {", "+\t\t\t\tWidget item = display.getWidget (itemID.id);", "+\t\t\t\tif (item != null && item instanceof TreeItem) {", "+\t\t\t\t\tevent.item = display.getWidget (itemID.id);", "+\t\t\t\t\tsendSelectionEvent (SWT.Selection, event, false);", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\tsendSelectionEvent (SWT.Selection, event, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "319bb97e1eccdeefcabad6f592e82368", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/performance/PerformanceTests.java", "commitBeforeChange": "0461f74b67375ddab2ba44f6763a1f498daff215", "commitAfterChange": "97e38307cc492c75c11b3f0b863d803dfbe32dac", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public PerformanceTests()", "signatureAfterChange": "  public PerformanceTests()", "diff": ["-//\taddTest(Test_org_eclipse_swt_graphics_DeviceData.suite());", "+\taddTest(Test_org_eclipse_swt_graphics_DeviceData.suite());", "-//\taddTest(Test_org_eclipse_swt_graphics_Font.suite());", "+\taddTest(Test_org_eclipse_swt_graphics_Font.suite());", "-//\taddTest(Test_org_eclipse_swt_graphics_GC.suite());", "+\taddTest(Test_org_eclipse_swt_graphics_GC.suite());", "-//\taddTest(Test_org_eclipse_swt_graphics_FontMetrics.suite());", "-//\taddTest(Test_org_eclipse_swt_graphics_Color.suite());", "+\taddTest(Test_org_eclipse_swt_graphics_FontMetrics.suite());", "+\taddTest(Test_org_eclipse_swt_graphics_Color.suite());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55c9bc159bbe43b2bdeb8ef66ac1d355", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "5f2f9722fb558345b2e1962ac41660a1bc2aed06", "commitAfterChange": "6d9ffc9776ed53230601b1f118f94e4523e13f00", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "\r \r boolean translateTraversal (MSG msg)", "signatureAfterChange": "\r \r boolean translateTraversal (MSG msg)", "diff": ["-\tswitch (msg.wParam) {\r", "-\t\tcase OS.VK_ESCAPE:\r", "-\t\t\t/* Allow the escape key to close the combo box */\r", "-\t\t\tif (OS.SendMessage (handle, OS.CB_GETDROPPEDSTATE, 0, 0) != 0) {\r", "-\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t\t// FALL THROUGH\r", "-\t\tcase OS.VK_TAB:\r", "-\t\tcase OS.VK_RETURN:\r", "-\t\t\tboolean translated = super.translateTraversal (msg);\r", "-\t\t\tif (!translated && msg.wParam == OS.VK_RETURN) {\r", "-\t\t\t\tsendEvent (SWT.DefaultSelection);\r", "-\t\t\t\t// widget could be disposed at this point\r", "-\t\t\t}\r", "-\t\t\treturn true;\r", "+\tint hwndText = OS.GetDlgItem (handle, CBID_EDIT);\r", "+\tif (hwndText != 0 && msg.hwnd == hwndText) {\r", "+\t\tswitch (msg.wParam) {\r", "+\t\t\tcase OS.VK_ESCAPE:\r", "+\t\t\t\t/* Allow the escape key to close the combo box */\r", "+\t\t\t\tif (OS.SendMessage (handle, OS.CB_GETDROPPEDSTATE, 0, 0) != 0) {\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t\t}\r", "+\t\t\t\t// FALL THROUGH\r", "+\t\t\tcase OS.VK_TAB:\r", "+\t\t\tcase OS.VK_RETURN:\r", "+\t\t\t\tboolean translated = super.translateTraversal (msg);\r", "+\t\t\t\tif (!translated) {\r", "+\t\t\t\t\tsendKeyEvent (SWT.KeyDown, msg.message, msg.wParam, msg.lParam);\r", "+\t\t\t\t\tif (msg.wParam == OS.VK_RETURN) {\r", "+\t\t\t\t\t\tsendEvent (SWT.DefaultSelection);\r", "+\t\t\t\t\t\t// widget could be disposed at this point\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\treturn true;\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e91d5429494d0ad5e60d47f892dfd6c4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "550e8a8e9bc83f6157c95ef4f9d89d7b16a7ca9e", "commitAfterChange": "8ee67e6f8cf3388d2b8a853341c6cdcc23726672", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "  int rendererGetSizeProc (int cell, int widget, int cell_area, int x_offset, int y_offset, int width, int height)", "signatureAfterChange": "  int rendererGetSizeProc (int cell, int widget, int cell_area, int x_offset, int y_offset, int width, int height)", "diff": ["+\t\t\t\tint /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);", "+\t\t\t\tint /*long*/ selection = OS.gtk_tree_view_get_selection (handle);", "+\t\t\t\tif (OS.gtk_tree_selection_path_is_selected (selection, path)) {", "+\t\t\t\t\tevent.detail = SWT.SELECTED;", "+\t\t\t\t}", "+\t\t\t\tOS.gtk_tree_path_free (path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7929d34640f8ef9648bf4aee3a9ac8b2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "fa63240efdeedc784957e35c0bbc9be236fdf23a", "commitAfterChange": "b6d63697d93cb9f75fd821f66bd8fc084e724f13", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 66, "signatureBeforeChange": "  void HandleOperationCompleted (int sender, int e)", "signatureAfterChange": "  void HandleOperationCompleted (int sender, int e)", "diff": ["-//\toperationCount--;", "-\tcheckExitFrame (e);", "-\tidle = false;", "+\tif (operation != 0) {", "+\t\tint current = OS.DispatcherHookEventArgs_Operation(e);", "+\t\tint priority = OS.DispatcherOperation_Priority(current);", "+\t\tif (priority == 5) OS.DispatcherOperation_Abort(operation);", "+\t\tOS.GCHandle_Free(current);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4db62938d160dc918988aa853e219d81", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "e44aa31d6d4d8839f08cb523fdcb3ead3ed216fd", "commitAfterChange": "eb8e8e74c5daad22517cbbcc4a53bd8a8af6fafe", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " void presetChooserDialog ()", "signatureAfterChange": " void presetChooserDialog ()", "diff": ["-\t\tif (filterPath.charAt (filterPath.length () - 1) != SEPARATOR) {", "-\t\t\tstringBuffer.append (SEPARATOR);", "-\t\t}", "-\t\tif (fileName.length () > 0) {", "+", "+\t\tif (fileName.length () > 0 && (style & SWT.SAVE) == 0) {", "+\t\t\tif (filterPath.charAt (filterPath.length () - 1) != SEPARATOR) {", "+\t\t\t\tstringBuffer.append (SEPARATOR);", "+\t\t\t}", "+\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, stringBuffer.toString (), true);", "+\t\t\t/*", "+\t\t\t* Bug in GTK. GtkFileChooser may crash on GTK versions 2.4.10 to 2.6", "+\t\t\t* when setting a file name that is not a true canonical path. ", "+\t\t\t* The fix is to use the canonical path.", "+\t\t\t*/", "+\t\t\tint /*long*/ ptr = OS.realpath (buffer, null);", "+\t\t\tif (ptr != 0) {", "+\t\t\t\tOS.gtk_file_chooser_set_filename (handle, ptr);", "+\t\t\t\tOS.g_free (ptr);", "+\t\t\t}", "-\t\t\t/* go into the specified directory */", "-\t\t\tstringBuffer.append ('.');", "-\t\t}", "-\t\tbyte [] buffer = Converter.wcsToMbcs (null, stringBuffer.toString (), true);", "-\t\t/*", "-\t\t* Bug in GTK. GtkFileChooser may crash on GTK versions 2.4.10 to 2.6", "-\t\t* when setting a file name that is not a true canonical path. ", "-\t\t* The fix is to use the canonical path.", "-\t\t*/", "-\t\tint /*long*/ ptr = OS.realpath (buffer, null);", "-\t\tif (ptr != 0) {", "-\t\t\tOS.gtk_file_chooser_set_filename (handle, ptr);", "-\t\t\tOS.g_free (ptr);", "+\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, stringBuffer.toString (), true);", "+\t\t\t/*", "+\t\t\t* Bug in GTK. GtkFileChooser may crash on GTK versions 2.4.10 to 2.6", "+\t\t\t* when setting a file name that is not a true canonical path. ", "+\t\t\t* The fix is to use the canonical path.", "+\t\t\t*/", "+\t\t\tint /*long*/ ptr = OS.realpath (buffer, null);", "+\t\t\tif (ptr != 0) {", "+\t\t\t\tOS.gtk_file_chooser_set_current_folder (handle, ptr);", "+\t\t\t\tOS.g_free (ptr);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "363caccd2e8502c0ddfda96eda3e7562", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/MenuTab.java", "commitBeforeChange": "7cd6ebbfec39ef79a6ea56d75a12f0d619234dd5", "commitAfterChange": "eccb5765e67884d3747be267d9dd56e9daf3eca6", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " \tvoid createMenuItems(Menu menu, boolean createSubMenu, boolean createSubSubMenu)", "signatureAfterChange": " \tvoid createMenuItems(Menu menu, boolean createSubMenu, boolean createSubSubMenu)", "diff": ["+\t\t\titem.setEnabled(enabledButton.getSelection());", "+\t\t\titem.setEnabled(enabledButton.getSelection());", "+\t\t\titem.setEnabled(enabledButton.getSelection());", "+\t\t\titem.setEnabled(enabledButton.getSelection());", "+\t\t\titem.setEnabled(enabledButton.getSelection());"]}], "num": 50766}
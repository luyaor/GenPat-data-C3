{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c192526ddc05ec1445994878f519074c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8f6159828617ebd366c4473096b0701", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 47, "signatureBeforeChange": "\r \r int processFocusIn (int info)", "signatureAfterChange": "\r \r int processFocusIn (int info)", "diff": ["+\tif (isDisposed ()) return OS.Pt_CONTINUE;\r", "+\r", "+\tint index = 0;\r", "+\tShell shell = getShell ();\r", "+\tControl [] focusIn = getPath ();\r", "+\tControl lastFocus = shell.lastFocus;\r", "+\tif (lastFocus != null) {\r", "+\t\tif (!lastFocus.isDisposed ()) {\r", "+\t\t\tControl [] focusOut = lastFocus.getPath ();\r", "+\t\t\tint length = Math.min (focusIn.length, focusOut.length);\r", "+\t\t\twhile (index < length) {\r", "+\t\t\t\tif (focusIn [index] != focusOut [index]) break;\r", "+\t\t\t\tindex++;\r", "+\t\t\t}\r", "+\t\t\tfor (int i=focusOut.length-1; i>=index; --i) {\r", "+\t\t\t\tfocusOut [i].sendEvent (SWT.Deactivate);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tshell.lastFocus = null;\r", "+\t}\r", "+\tfor (int i=focusIn.length-1; i>=index; --i) {\r", "+\t\tfocusIn [i].sendEvent (SWT.Activate);\r", "+\t}\r", "+\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32a48e9741a54cba0dfe275d9614c81f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "3bd65957ee2ca3077252abd31a712605a9ceffff", "commitAfterChange": "47224f4d58abdcb5d118c50e883eef33dd00cd5e", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "\r \r int processFocusIn (int info)", "signatureAfterChange": "\r \r int processFocusIn (int info)", "diff": ["+\tShell shell = getShell ();\r", "-\tint index = 0;\r", "-\tShell shell = getShell ();\r", "-\tControl [] focusIn = getPath ();\r", "-\tControl lastFocus = shell.lastFocus;\r", "-\tif (lastFocus != null) {\r", "-\t\tif (!lastFocus.isDisposed ()) {\r", "-\t\t\tControl [] focusOut = lastFocus.getPath ();\r", "-\t\t\tint length = Math.min (focusIn.length, focusOut.length);\r", "-\t\t\twhile (index < length) {\r", "-\t\t\t\tif (focusIn [index] != focusOut [index]) break;\r", "-\t\t\t\tindex++;\r", "-\t\t\t}\r", "-\t\t\tfor (int i=focusOut.length-1; i>=index; --i) {\r", "-\t\t\t\tfocusOut [i].sendEvent (SWT.Deactivate);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tshell.lastFocus = null;\r", "-\t}\r", "-\tfor (int i=focusIn.length-1; i>=index; --i) {\r", "-\t\tfocusIn [i].sendEvent (SWT.Activate);\r", "+\t/*\r", "+\t* It is possible that the shell may be\r", "+\t* disposed at this point.  If this happens\r", "+\t* don't send the activate and deactivate\r", "+\t* events.\r", "+\t*/\t\r", "+\tif (!shell.isDisposed ()) {\r", "+\t\tshell.setActiveControl (this);\r"]}], "num": 37907}
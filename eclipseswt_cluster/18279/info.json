{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3da81105de459532b2dc5a8a3f52aac7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12a71d46e1c3f846e5fbe0c83af5e8d7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "08ed4d34906d3cb004511badd9a3286f04d40b7a", "commitAfterChange": "3587c6fb9068182d41169c6c886f0d5faa0219e6", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r \r public void setImage (Image image)", "signatureAfterChange": "\r \r public void setImage (Image image)", "diff": ["-\tif ((parent.style & SWT.CHECK) != 0) return;\r", "-\tint pixmap = 0, mask = 0;\r", "+\tint pixbuf = 0;\r", "-\t\tpixmap = image.pixmap;\r", "-\t\tmask = image.mask;\r", "-\t}\r", "-\tint ctree = parent.handle;\r", "-\tbyte [] spacing = new byte [1];\r", "-\tboolean [] is_leaf = new boolean [1], expanded = new boolean [1];\r", "-\tbyte [] buffer = Converter.wcsToMbcs (null, text, true);\r", "-\tOS.gtk_ctree_get_node_info (ctree, handle, null, spacing, null, null, null, null, is_leaf, expanded);\r", "-\tOS.gtk_ctree_set_node_info (ctree, handle, buffer, spacing [0], pixmap, mask, pixmap, mask, is_leaf [0], expanded [0]);\r", "-\tif (image != null) {\r", "-\t\tif (parent.imageHeight == 0) {\t\t\r", "-\t\t\tint [] width = new int [1], height = new int [1];\r", "-\t\t\tOS.gdk_drawable_get_size (pixmap, width, height);\r", "-\t\t\tif (height [0] > OS.GTK_CLIST_ROW_HEIGHT (parent.handle)) {\r", "-\t\t\t\tparent.imageHeight = height [0];\r", "-\t\t\t\tOS.gtk_clist_set_row_height (ctree, height [0]);\r", "+\t\tint[] w = new int[1], h = new int[1];\r", "+\t\tboolean hasMask = (image.mask != 0);\r", "+\t \tOS.gdk_drawable_get_size(image.pixmap, w, h);\r", "+ \t\tint width = w[0], height = h[0]; \t\r", "+\t\tpixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, hasMask, 8, width, height);\r", "+\t\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);\r", "+\t\tint colormap = OS.gdk_colormap_get_system();\r", "+\t\tOS.gdk_pixbuf_get_from_drawable(pixbuf, image.pixmap, colormap, 0, 0, 0, 0, width, height);\r", "+\t\tif (hasMask) {\r", "+\t\t\tint gdkMaskImagePtr = OS.gdk_drawable_get_image(image.mask, 0, 0, width, height);\r", "+\t\t\tif (gdkMaskImagePtr == 0) SWT.error(SWT.ERROR_NO_HANDLES);\r", "+\t\t\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);\r", "+\t\t\tint pixels = OS.gdk_pixbuf_get_pixels(pixbuf);\r", "+\t\t\tbyte[] line = new byte[stride];\r", "+\t\t\tfor (int y=0; y<height; y++) {\r", "+\t\t\t\tOS.memmove(line, pixels + (y * stride), stride);\r", "+\t\t\t\tfor (int x=0; x<width; x++) {\r", "+\t\t\t\t\tif (OS.gdk_image_get_pixel(gdkMaskImagePtr, x, y) != 0) {\r", "+\t\t\t\t\t\tline[x*4+3] = (byte)0xFF;\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tline[x*4+3] = 0;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\tOS.memmove(pixels + (y * stride), line, stride);\r", "+\t\t\tOS.g_object_unref(gdkMaskImagePtr);\r", "-\t}\r", "+\t}\t\r", "+\tOS.gtk_tree_store_set(parent.modelHandle, handle, 1, pixbuf, -1);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b79fbd40309e234d6513f0555d45ff18", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "6c4a2c166738e67832efca98869d4a51c06db92b", "commitAfterChange": "84d56fe220646f29848300da6bc168504ddc3a77", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void setImage (int index, Image image)", "signatureAfterChange": " public void setImage (int index, Image image)", "diff": ["-public void setImage (int index, Image image) {\r", "-\tcheckWidget ();\r", "-\tif (image != null && image.isDisposed()) {\r", "-\t\terror(SWT.ERROR_INVALID_ARGUMENT);\r", "-\t}\r", "-\tif (index == 0) {\r", "-\t\tif ((parent.style & SWT.CHECK) != 0) return;\r", "-\t\tsuper.setImage (image);\r", "-\t}\r", "-\tint row = parent.indexOf (this);\r", "-\tif (row == -1) return;\r", "-\tint clist = parent.handle;\r", "-\tString string = getText (index);\r", "-\tbyte [] buffer = Converter.wcsToMbcs (null, string, true);\r", "-\tif (image == null) {\r", "-\t\tOS.gtk_clist_set_text (clist, row, index, buffer);\r", "-\t} else {\r", "-\t\tint pixmap = image.pixmap, mask = image.mask;\r", "-\t\tbyte [] spacing = new byte [] {2};\r", "-//\t\tOS.gtk_clist_get_pixtext (clist, row, index, null, spacing, null, null);\r", "-\t\tOS.gtk_clist_set_pixtext (clist, row, index, buffer, spacing [0], pixmap, mask);\r", "-\t\tif (parent.imageHeight == 0) {\t\r", "-\t\t\tint [] width = new int [1], height = new int [1];\r", "-\t\t\tOS.gdk_drawable_get_size (pixmap, width, height);\r", "-\t\t\tif (height [0] > OS.GTK_CLIST_ROW_HEIGHT (parent.handle)) {\r", "-\t\t\t\tparent.imageHeight = height [0];\r", "-\t\t\t\tOS.gtk_widget_realize (clist);\r", "-\t\t\t\tOS.gtk_clist_set_row_height (clist, height [0]);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-}\r", "+public void setImage (int index, Image image) {", "+\tcheckWidget ();", "+\tif (image != null && image.isDisposed()) {", "+\t\terror(SWT.ERROR_INVALID_ARGUMENT);", "+\t}", "+\tif (index<0) return;", "+\tif ((index>0)&&(index>=parent.columnCount)) return;", "+\tint pixbuf = 0;", "+\tif (image != null) {", "+\t\tint[] w = new int[1], h = new int[1];", "+\t\tboolean hasMask = (image.mask != 0);", "+\t \tOS.gdk_drawable_get_size(image.pixmap, w, h);", "+ \t\tint width = w[0], height = h[0]; \t", "+\t\tpixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, hasMask, 8, width, height);", "+\t\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tint colormap = OS.gdk_colormap_get_system();", "+\t\tOS.gdk_pixbuf_get_from_drawable(pixbuf, image.pixmap, colormap, 0, 0, 0, 0, width, height);", "+\t\tif (hasMask) {", "+\t\t\tint gdkMaskImagePtr = OS.gdk_drawable_get_image(image.mask, 0, 0, width, height);", "+\t\t\tif (gdkMaskImagePtr == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "+\t\t\tint pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "+\t\t\tbyte[] line = new byte[stride];", "+\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\tOS.memmove(line, pixels + (y * stride), stride);", "+\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\t\tif (OS.gdk_image_get_pixel(gdkMaskImagePtr, x, y) != 0) {", "+\t\t\t\t\t\tline[x*4+3] = (byte)0xFF;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tline[x*4+3] = 0;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tOS.memmove(pixels + (y * stride), line, stride);", "+\t\t\t}", "+\t\t\tOS.g_object_unref(gdkMaskImagePtr);", "+\t\t}", "+\t}\t", "+\tOS.gtk_list_store_set(parent.modelHandle, handle, index+parent.MAX_COLUMNS, pixbuf, -1);", "+}"]}], "num": 18279}
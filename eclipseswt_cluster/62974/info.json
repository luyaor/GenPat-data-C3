{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e900e068e29e55f2eaf8cb393e6ebddf", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9ddabd3d1a57a29638293c16b2faae5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "9e4aa4f79d8d08d57d797296be9d3269723e755b", "commitAfterChange": "c7a37ce473beb9045c99b97900ef561257b98af2", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 32, "signatureBeforeChange": "  \tpublic id internal_accessibilityAttributeValue(NSString attribute, int childID)", "signatureAfterChange": "  \tpublic id internal_accessibilityAttributeValue(NSString attribute, int childID)", "diff": ["+\t\tif (attribute.isEqualToString(OS.NSAccessibilityMaxValueAttribute)) return getMaxValueAttribute(childID);", "+\t\tif (attribute.isEqualToString(OS.NSAccessibilityMinValueAttribute)) return getMinValueAttribute(childID);", "+\t\t/* SWT has no visible children API*/", "+\t\tif (attribute.isEqualToString(OS.NSAccessibilityVisibleChildrenAttribute)) return getChildrenAttribute(childID);", "+\t\tif (attribute.isEqualToString(OS.NSAccessibilityServesAsTitleForUIElementsAttribute)) return getServesAsTitleForUIElementsAttribute(childID);", "+\t\tif (attribute.isEqualToString(OS.NSAccessibilityTitleUIElementAttribute)) return getTitleUIElementAttribute(childID);", "+\t\tif (attribute.isEqualToString(OS.NSAccessibilityColumnsAttribute)) return getColumnsAttribute(childID);", "+\t\tif (attribute.isEqualToString(OS.NSAccessibilitySelectedColumnsAttribute)) return getSelectedColumnsAttribute(childID);", "+\t\tif (attribute.isEqualToString(OS.NSAccessibilityRowsAttribute)) return getRowsAttribute(childID);", "+\t\tif (attribute.isEqualToString(OS.NSAccessibilitySelectedRowsAttribute)) return getSelectedRowsAttribute(childID);", "+\t\tif (attribute.isEqualToString(OS.NSAccessibilityVisibleRowsAttribute)) return getVisibleRowsAttribute(childID);", "+\t\tif (attribute.isEqualToString(OS.NSAccessibilityVisibleColumnsAttribute)) return getVisibleColumnsAttribute(childID);", "+\t\tif (attribute.isEqualToString(OS.NSAccessibilityHeaderAttribute)) return getHeaderAttribute(childID);", "+\t\tif (attribute.isEqualToString(OS.NSAccessibilityIndexAttribute)) return getIndexAttribute(childID);", "+\t\tif (attribute.isEqualToString(OS.NSAccessibilitySelectedAttribute)) return getSelectedAttribute(childID);", "+\t\tif (OS.VERSION >= 0x1060 && attribute.isEqualToString(OS.NSAccessibilityRowIndexRangeAttribute)) return getRowIndexRangeAttribute(childID);", "+\t\tif (OS.VERSION >= 0x1060 && attribute.isEqualToString(OS.NSAccessibilityColumnIndexRangeAttribute)) return getColumnIndexRangeAttribute(childID);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ec53047c5a239d4a7d29e0ca56f839d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/NativesGenerator.java", "commitBeforeChange": "579505f5c399bb89f97d98e9912b18625d2312e2", "commitAfterChange": "6f962e3a053bd8c18a3e154a7ac0ad1ba2aeb3fe", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  void generateFunctionCall(Method method, MethodData methodData, Class[] paramTypes, Class returnType, boolean needsReturn)", "signatureAfterChange": "  void generateFunctionCall(Method method, MethodData methodData, Class[] paramTypes, Class returnType, boolean needsReturn)", "diff": ["-\t} else if (methodData.getFlag(FLAG_CPP)) {", "+\t} else if (methodData.getFlag(FLAG_CPP) || methodData.getFlag(FLAG_SETTER) || methodData.getFlag(FLAG_GETTER) || methodData.getFlag(FLAG_ADDER)) {", "+\t\tif (methodData.getFlag(FLAG_GCOBJECT)) {", "+\t\t\tif (methodData.getFlag(FLAG_STRUCT)) {", "+\t\t\t\toutput(\"TO_HANDLE_STRUCT(\");", "+\t\t\t} else {", "+\t\t\t\toutput(\"TO_HANDLE(\");", "+\t\t\t}", "+\t\t}", "-\t\toutput(\"arg0)->\");", "+\t\tif (paramData.getFlag(FLAG_GCOBJECT)) {", "+\t\t\toutput(\"TO_OBJECT(\");", "+\t\t}", "+\t\toutput(\"arg0\");", "+\t\tif (paramData.getFlag(FLAG_GCOBJECT)) {", "+\t\t\toutput(\")\");", "+\t\t}", "+\t\toutput(\")->\");", "+\t} else if (methodData.getFlag(FLAG_GCNEW)) {", "+\t\toutput(\"TO_HANDLE(gcnew \");", "+\t\tString accessor = methodData.getAccessor();", "+\t\tif (accessor.length() != 0) {", "+\t\t\toutput(accessor);", "+\t\t} else {", "+\t\t\tint index = -1;", "+\t\t\tif ((index = name.indexOf('_')) != -1) {", "+\t\t\t\toutput(name.substring(index + 1));", "+\t\t\t} else {", "+\t\t\t\toutput(name);", "+\t\t\t}", "+\t\t}", "+\t\tif (methodData.getFlag(FLAG_GCOBJECT)) {", "+\t\t\tif (methodData.getFlag(FLAG_STRUCT)) {", "+\t\t\t\toutput(\"TO_HANDLE_STRUCT(\");", "+\t\t\t} else {", "+\t\t\t\toutput(\"TO_HANDLE(\");\t\t\t\t", "+\t\t\t}", "+\t\t}", "-\tgenerateFunctionCallRightSide(method, methodData, paramTypes, paramStart);", "+\tif ((methodData.getFlag(FLAG_SETTER) && paramTypes.length == 3) || (methodData.getFlag(FLAG_GETTER) && paramTypes.length == 2)) {", "+\t\toutput(\"[arg1]\");", "+\t\tparamStart++;", "+\t}", "+\tif (methodData.getFlag(FLAG_SETTER)) output(\" = \");", "+\tif (methodData.getFlag(FLAG_ADDER)) output(\" += \");", "+\tif (!methodData.getFlag(FLAG_GETTER)) {", "+\t\tgenerateFunctionCallRightSide(method, methodData, paramTypes, paramStart);", "+\t}", "+\tif (methodData.getFlag(FLAG_GCNEW) || methodData.getFlag(FLAG_GCOBJECT)) {", "+\t\toutput(\")\");", "+\t}", "+\toutput(\";\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86be8f24bb5de5918f18f0e0b90105b0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common_j2me/org/eclipse/swt/internal/Compatibility.java", "commitBeforeChange": "098af5ec2b198821057039766d74d38644e2ef1e", "commitAfterChange": "9e77789a2687a7be424ce0cfa722d981f9130674", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r public static String getMessage(String key)", "signatureAfterChange": "\r public static String getMessage(String key)", "diff": ["-\tString answer = key;\r", "-\t\r", "-\tif (key == null)\r", "-\t\tSWT.error (SWT.ERROR_NULL_ARGUMENT);\t\r", "-\tif (key.equals( \"SWT_Yes\"))\r", "-\t\treturn \"Yes\";\r", "-\tif (key.equals(\"SWT_No\"))\r", "-\t\treturn \"No\";\r", "-\tif (key.equals(\"SWT_OK\")) \r", "-\t\treturn \"OK\";\r", "-\tif (key.equals(\"SWT_Cancel\"))\r", "-\t \treturn \"Cancel\";\r", "-\tif (key.equals(\"SWT_Abort\"))\r", "-\t \treturn \"Abort\";\r", "-\tif (key.equals(\"SWT_Retry\"))\r", "-\t \treturn \"Retry\";\r", "-\tif (key.equals(\"SWT_Ignore\"))\r", "-\t \treturn \"Ignore\";\r", "-\tif (key.equals(\"SWT_Sample\"))\r", "-\t \treturn \"Sample\";\r", "-\tif (key.equals(\"SWT_A_Sample_Text\"))\r", "-\t \treturn \"A Sample Text\";\r", "-\tif (key.equals(\"SWT_Selection\"))\r", "-\t \treturn \"Selection\";\r", "-\tif (key.equals(\"SWT_Current_Selection\"))\r", "-\t \treturn \"Current Selection\";\r", "-\tif (key.equals(\"SWT_Character_set\"))\r", "-\t \treturn \"Character set\";\r", "-\tif (key.equals(\"SWT_Font\"))\r", "-\t \treturn \"Font\";\r", "-\tif (key.equals(\"SWT_Extended_style\"))\r", "-\t \treturn \"Extended style\";\r", "-\tif (key.equals(\"SWT_Size\"))\r", "-\t \treturn \"Size\";\r", "-\tif (key.equals(\"SWT_Style\"))\r", "-\t \treturn \"Style\";\r", "-\t \t\r", "+\tif (key == null) SWT.error (SWT.ERROR_NULL_ARGUMENT);\t\r", "+\tif (key.equals(\"SWT_Yes\")) return \"Yes\";\r", "+\tif (key.equals(\"SWT_No\")) return \"No\";\r", "+\tif (key.equals(\"SWT_OK\")) return \"OK\";\r", "+\tif (key.equals(\"SWT_Cancel\")) return \"Cancel\";\r", "+\tif (key.equals(\"SWT_Abort\")) return \"Abort\";\r", "+\tif (key.equals(\"SWT_Retry\")) return \"Retry\";\r", "+\tif (key.equals(\"SWT_Ignore\")) return \"Ignore\";\r", "+\tif (key.equals(\"SWT_Sample\")) return \"Sample\";\r", "+\tif (key.equals(\"SWT_A_Sample_Text\")) return \"A Sample Text\";\r", "+\tif (key.equals(\"SWT_Selection\")) return \"Selection\";\r", "+\tif (key.equals(\"SWT_Current_Selection\")) return \"Current Selection\";\r", "+\tif (key.equals(\"SWT_Character_set\")) return \"Character set\";\r", "+\tif (key.equals(\"SWT_Font\")) return \"Font\";\r", "+\tif (key.equals(\"SWT_Extended_style\")) return \"Extended style\";\r", "+\tif (key.equals(\"SWT_Size\")) return \"Size\";\r", "+\tif (key.equals(\"SWT_Style\")) return \"Style\";\r", "+\tif (key.equals(\"SWT_Save\")) return \"Save\";\r", "+\tif (key.equals(\"SWT_Character_set\")) return \"Character set\";\r", "+\tif (key.equals(\"SWT_ColorDialog_Title\")) return \"Colors\";\r", "+\tif (key.equals(\"SWT_FontDialog_Title\")) return \"Fonts\";\r", "+\tif (key.equals(\"SWT_Charset_Western\")) return \"western\";\r", "+\tif (key.equals(\"SWT_Charset_EastEuropean\")) return \"east european\";\r", "+\tif (key.equals(\"SWT_Charset_SouthEuropean\")) return \"south european\";\r", "+\tif (key.equals(\"SWT_Charset_NorthEuropean\")) return \"north european\";\r", "+\tif (key.equals(\"SWT_Charset_Cyrillic\")) return \"cyrillic\";\r", "+\tif (key.equals(\"SWT_Charset_Arabic\")) return \"arabic\";\r", "+\tif (key.equals(\"SWT_Charset_Greek\")) return \"greek\";\r", "+\tif (key.equals(\"SWT_Charset_Hebrew\")) return \"hebrew\";\r", "+\tif (key.equals(\"SWT_Charset_Turkish\")) return \"turkish\";\r", "+\tif (key.equals(\"SWT_Charset_Nordic\")) return \"nordic\";\t\t \t\r", "+\tif (key.equals(\"SWT_Charset_Thai\")) return \"thai\";\r", "+\tif (key.equals(\"SWT_Charset_BalticRim\")) return \"baltic rim\";\r", "+\tif (key.equals(\"SWT_Charset_Celtic\")) return \"celtic\";\r", "+\tif (key.equals(\"SWT_Charset_Euro\")) return \"euro\";\r", "+\tif (key.equals(\"SWT_Charset_Romanian\")) return \"romanian\";\r", "+\tif (key.equals(\"SWT_Charset_SimplifiedChinese\")) return \"simplified chinese\";\r", "+\tif (key.equals(\"SWT_Charset_TraditionalChinese\")) return \"traditional chinese\";\r", "+\tif (key.equals(\"SWT_Charset_Japanese\")) return \"japanese\";\r", "+\tif (key.equals(\"SWT_Charset_Korean\")) return \"korean\";\r", "+\tif (key.equals(\"SWT_Charset_Unicode\")) return \"unicode\";\r", "+\tif (key.equals(\"SWT_Charset_ASCII\")) return \"ASCII\";\r", "+\tif (key.equals(\"SWT_InputMethods\")) return \"Input Methods\";\r"]}], "num": 62974}
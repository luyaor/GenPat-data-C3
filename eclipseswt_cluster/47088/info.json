{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f94b7c7395306c8e4cc80394dbbd6157", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "067e6802bbce035a9a1138eb43112210", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "373af45ceb281cd9c5838c4ce0b61d0772782df4", "commitAfterChange": "07cc1063f6c80a670cfb56ca7bcb0643538cf94f", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public Point getLocation (int offset, boolean trailing)", "signatureAfterChange": " public Point getLocation (int offset, boolean trailing)", "diff": ["-\tStyleItem[] lineRuns = runs[line];", "-\tPoint result = null;", "-\t\tresult = new Point(lineWidth[line], lineY[line]);", "-\t} else {", "-\t\tint width = 0;", "-\t\tfor (int i=0; i<lineRuns.length; i++) {", "-\t\t\tStyleItem run = lineRuns[i];", "-\t\t\tint end = run.start + run.length;", "-\t\t\tif (run.start <= offset && offset < end) {", "-\t\t\t\tif (run.style != null && run.style.metrics != null) {", "-\t\t\t\t\tGlyphMetrics metrics = run.style.metrics;", "-\t\t\t\t\twidth += metrics.width * (offset - run.start + (trailing ? 1 : 0));", "-\t\t\t\t\tresult = new Point(width, lineY[line]);", "-\t\t\t\t} else if (run.tab) {", "-\t\t\t\t\tif (trailing || (offset == length)) width += run.width;", "-\t\t\t\t\tresult = new Point(width, lineY[line]);", "-\t\t\t\t} else {", "-\t\t\t\t\tint runOffset = offset - run.start;", "-\t\t\t\t\tint cChars = run.length;", "-\t\t\t\t\tint gGlyphs = run.glyphCount;", "-\t\t\t\t\tint[] piX = new int[1];", "-\t\t\t\t\tint /*long*/ advances = run.justify != 0 ? run.justify : run.advances;", "-\t\t\t\t\tOS.ScriptCPtoX(runOffset, trailing, cChars, gGlyphs, run.clusters, run.visAttrs, advances, run.analysis, piX);", "-\t\t\t\t\tif ((orientation & SWT.RIGHT_TO_LEFT) != 0) {", "-\t\t\t\t\t\tresult = new Point(width + (run.width - piX[0]), lineY[line]);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tresult = new Point(width + piX[0], lineY[line]);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "+\t\treturn new Point(getLineIndent(line) + lineWidth[line], lineY[line]);", "+\t}", "+\tint low = -1;", "+\tint high = allRuns.length;", "+\twhile (high - low > 1) {", "+\t\tint index = ((high + low) / 2);", "+\t\tStyleItem run = allRuns[index];", "+\t\tif (run.start > offset) {", "+\t\t\thigh = index;", "+\t\t} else if (run.start + run.length <= offset) {", "+\t\t\tlow = index;", "+\t\t} else {", "+\t\t\tint width;", "+\t\t\tif (run.style != null && run.style.metrics != null) {", "+\t\t\t\tGlyphMetrics metrics = run.style.metrics;", "+\t\t\t\twidth = metrics.width * (offset - run.start + (trailing ? 1 : 0));", "+\t\t\t} else if (run.tab) {", "+\t\t\t\twidth = (trailing || (offset == length)) ? run.width : 0;", "+\t\t\t} else {", "+\t\t\t\tint runOffset = offset - run.start;", "+\t\t\t\tint cChars = run.length;", "+\t\t\t\tint gGlyphs = run.glyphCount;", "+\t\t\t\tint[] piX = new int[1];", "+\t\t\t\tint /*long*/ advances = run.justify != 0 ? run.justify : run.advances;", "+\t\t\t\tOS.ScriptCPtoX(runOffset, trailing, cChars, gGlyphs, run.clusters, run.visAttrs, advances, run.analysis, piX);", "+\t\t\t\twidth = (orientation & SWT.RIGHT_TO_LEFT) != 0 ? run.width - piX[0] : piX[0];   ", "-\t\t\twidth += run.width;", "+\t\t\treturn new Point(run.x + width, lineY[line]);", "-\tif (result == null) result = new Point(0, 0);", "-\tresult.x += getLineIndent(line);", "-\treturn result;", "+\treturn new Point(0, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a998c7d674e9bc21138f97b05a61301c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "eb0dd46e7194a9f7d813095a5dca290fae54babc", "commitAfterChange": "8174cf2444655210718c9dde4ae430f251492a85", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 67, "signatureBeforeChange": "\r \r void setMouseState(int type, Event event, PhPointerEvent_t pe)", "signatureAfterChange": "\r \r void setMouseState(Event event, PhPointerEvent_t pe, PhEvent_t ev)", "diff": ["-void setMouseState(int type, Event event, PhPointerEvent_t pe) {\r", "-\tint key_mods = pe.key_mods;\r", "+void setMouseState(Event event, PhPointerEvent_t pe, PhEvent_t ev) {\r", "-\tint button_state = pe.button_state;\r", "-\tif ((key_mods & OS.Pk_KM_Alt) != 0) event.stateMask |= SWT.ALT;\r", "-\tif ((key_mods & OS.Pk_KM_Shift) != 0) event.stateMask |= SWT.SHIFT;\r", "-\tif ((key_mods & OS.Pk_KM_Ctrl) != 0) event.stateMask |= SWT.CONTROL;\r", "-\tif ((button_state & OS.Ph_BUTTON_SELECT) != 0) event.stateMask |= SWT.BUTTON1;\r", "-\tif ((button_state & OS.Ph_BUTTON_ADJUST) != 0) event.stateMask |= SWT.BUTTON2;\r", "-\tif ((button_state & OS.Ph_BUTTON_MENU) != 0) event.stateMask |= SWT.BUTTON3;\r", "-\tswitch (type) {\r", "+\tevent.x = pe.pos_x + ev.translation_x;\r", "+\tevent.y = pe.pos_y + ev.translation_y;\r", "+\tif (ev.type == OS.Ph_EV_BUT_PRESS || ev.type == OS.Ph_EV_BUT_RELEASE) {\r", "+\t\tswitch (buttons) {\r", "+\t\t\tcase OS.Ph_BUTTON_SELECT:\tevent.button = 1; break;\r", "+\t\t\tcase OS.Ph_BUTTON_ADJUST:\tevent.button = 2; break;\r", "+\t\t\tcase OS.Ph_BUTTON_MENU:\t\tevent.button = 3; break;\r", "+\t\t}\r", "+\t}\r", "+\tsetInputState(event, pe.key_mods, pe.button_state);\r", "+\tswitch (ev.type) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1c3773b2d78911d6f0419f382260fb74", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CBanner.java", "commitBeforeChange": "80c0b376051cf17ce28a48921a1580c7fb245ed9", "commitAfterChange": "611477fb90856fa0f849831f9c214c54a9660397", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public Point computeSize(int wHint, int hHint, boolean changed)", "signatureAfterChange": " public Point computeSize(int wHint, int hHint, boolean changed)", "diff": ["-\tPoint rightSize = new Point(0, 0);", "-\tif (right != null) {", "-\t\t rightSize = right.computeSize(SWT.DEFAULT, hHint);", "-\t}", "-\tPoint middleSize = new Point(0, 0);", "-\tif (middle != null) {", "-\t\t middleSize = middle.computeSize(SWT.DEFAULT, hHint);", "-\t}", "-\tPoint leftSize = new Point(0, 0);", "-\tif (left != null) {", "-\t\tint width = wHint - rightSize.x - middleSize.x - CURVE_WIDTH - 2*INDENT - BORDER_LEFT - BORDER_RIGHT;", "-\t\tif (middle != null) width -= LEFT_MIDDLE_GAP;", "-\t\tleftSize = left.computeSize((wHint != SWT.DEFAULT) ? width : SWT.DEFAULT, SWT.DEFAULT);", "+\tPoint rightSize = (right == null) ? new Point(0, 0) : right.computeSize(rightWidth, hHint);", "+\tint width = (wHint == SWT.DEFAULT) ? SWT.DEFAULT : wHint - rightSize.x - CURVE_WIDTH + INDENT_LEFT + INDENT_RIGHT;", "+\tPoint leftSize = (left == null) ? new Point(0, 0) : left.computeSize(width, hHint);", "+\tif (leftSize.y > rightSize.y && (hHint == SWT.DEFAULT || hHint > rightSize.y)) {", "+\t\t", "-\tsize.x = leftSize.x + middleSize.x + CURVE_WIDTH -2*INDENT + rightSize.x;", "-\tif (left != null && middle != null) size.x += + LEFT_MIDDLE_GAP;", "-\tsize.y = Math.max(Math.max(leftSize.y, middleSize.y), rightSize.y);", "+\tsize.x = leftSize.x + CURVE_WIDTH - INDENT_LEFT - INDENT_RIGHT + rightSize.x;", "+\tsize.y = (left != null) ? leftSize.y : rightSize.y;"]}], "num": 47088}
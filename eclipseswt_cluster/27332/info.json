{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e364e17e35b9c83e04ff4c3249ae0159", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ae7f285fb8aad6bf60ffaedfa8447d0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "dbb652fe193019d96be9d6af80af3f6e1918e181", "commitAfterChange": "a9865ce41544b9634fe7b5cf08a114ae91a2faeb", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static int getDesktop(Display display)", "signatureAfterChange": " static int getDesktop(Display display)", "diff": ["+", "+\t/* Get the list of properties on the root window. */", "+\tint xDisplay = display.xDisplay;", "+\tint rootWindow = OS.XDefaultRootWindow(xDisplay);", "+\tint[] numProp = new int[1];", "+\tint propList = OS.XListProperties(xDisplay, rootWindow, numProp);", "+\tint[] property = new int[numProp[0]];", "+\tif (propList != 0) {", "+\t\tOS.memmove(property, propList, (property.length * 4));", "+\t\tOS.XFree(propList);", "+\t}", "+\t", "+\t/* KDE is detected by checking if the the KWIN_RUNNING exists */", "+\tif (desktop == DESKTOP_UNKNOWN) {", "+\t\tbyte[] kdeName = Converter.wcsToMbcs(null, \"KWIN_RUNNING\", true);", "+\t\tint kde = OS.XInternAtom(xDisplay, kdeName, true);", "+\t\tfor (int index = 0; desktop == DESKTOP_UNKNOWN && index < property.length; index++) {", "+\t\t\tif (property[index] == OS.None) continue;", "+\t\t\tif (property[index] == kde && kde_init()) desktop = DESKTOP_KDE;", "+\t\t}", "+\t}", "+\t", "+\tif (desktop == DESKTOP_UNKNOWN) {", "+\t\tbyte[] gnomeName = Converter.wcsToMbcs(null, \"_NET_SUPPORTING_WM_CHECK\", true);", "+\t\tint gnome = OS.XInternAtom(xDisplay, gnomeName, true);", "+\t\tif (gnome != OS.None && gnome_init()) {", "+\t\t\tdesktop = DESKTOP_GNOME;", "+\t\t}", "+\t}", "-\tif (isWindowManagerCompliant() && gnome_init()) desktop = DESKTOP_GNOME;", "+\tSystem.out.println(\"desktop=\" + desktop);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dac48ecd856610daddc8c9e4fe9fb208", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "6215640175ccfe897f3840a8201a886b754fe47e", "commitAfterChange": "45ceafadc60325534082e286f4aafee627d1de0d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static int getDesktop( Display display )", "signatureAfterChange": " static int getDesktop(Display display)", "diff": ["-static int getDesktop( Display display ) {", "+static int getDesktop(Display display) {", "-\t", "+\tint desktop = DESKTOP_UNKNOWN;", "+", "+\tif (isGnomeDesktop(display)) {", "+\t\tif (gnome_init()) desktop = DESKTOP_GNOME;", "+\t\t// Save the desktop type on the display itself.", "+\t\tdisplay.setData( desktopData, new Integer(desktop) );", "+\t\treturn desktop;", "+\t}", "+", "+\tint xDisplay = display.xDisplay;", "+\t/* Use the character encoding for the default locale */", "+\tbyte[] cdeName   = Converter.wcsToMbcs (null, \"_DT_SM_PREFERENCES\", true);", "+\tbyte[] kdeName   = Converter.wcsToMbcs (null, \"KWIN_RUNNING\", true);", "-\tint desktop = DESKTOP_UNKNOWN;", "-\tint xDisplay = display.xDisplay;", "-\t/* Use the character encoding for the default locale */", "-\tbyte[] gnomeName = Converter.wcsToMbcs (null, \"GNOME_NAME_SERVER\", true);", "-\tbyte[] cdeName   = Converter.wcsToMbcs (null, \"_DT_SM_PREFERENCES\", true);", "-\tbyte[] kdeName   = Converter.wcsToMbcs (null, \"KWIN_RUNNING\", true);", "-\tint gnome = OS.XInternAtom( xDisplay, gnomeName, true );", "-\t\tif (property[ index ] == gnome) {", "-\t\t\tif (gnome_init()) desktop = DESKTOP_GNOME;\t\t", "-\t\t}"]}], "num": 27332}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1b000ae14cfd942d73f998e32623cba", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8092dbaee1c0afa5a1a46654dffcb53f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/ImageTransfer.java", "commitBeforeChange": "6b0a245288556e7224d3c56682401ca81ba95245", "commitAfterChange": "4dbd09dcd54c5e8b8416ccbe2fdfacc6901be61f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-\tif (!isSupportedType(transferData) || transferData.data == null)", "-\t\treturn null;", "-\tif (transferData.data.length == 0)", "-\t\treturn null;", "-\tbyte[] dataArr = transferData.data[0];", "-\tint size = dataArr.length;", "-\tint pictPtr = OS.NewPtr(size);", "-\tOS.memmove(pictPtr, dataArr, size);", "-\tint dataProvider = OS.CGDataProviderCreateWithData(0, pictPtr, size, 0);", "-\tif (dataProvider != 0) {", "-\t\tint pictDataRef = OS.QDPictCreateWithProvider(dataProvider);", "-\t\t// get bounds for the image", "-\t\tCGRect rect = new CGRect();", "-\t\tOS.QDPictGetBounds(pictDataRef, rect);", "-\t\tint width = (int) rect.width;", "-\t\tint height = (int) rect.height;", "-", "-\t\t/* Create the image */", "-\t\tint bpr = width * 4;", "-\t\tint dataSize = height * bpr;", "-\t\tint data = OS.NewPtr(dataSize);", "-\t\tif (data == 0)", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tint provider = OS", "-\t\t\t\t.CGDataProviderCreateWithData(0, data, dataSize, 0);", "-\t\tif (provider == 0) {", "-\t\t\tOS.DisposePtr(data);", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t}", "-\t\tint colorspace = OS.CGColorSpaceCreateDeviceRGB();", "-\t\tif (colorspace == 0)", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tint handle = OS.CGImageCreate(width, height, 8, 32, bpr,", "-\t\t\t\tcolorspace, OS.kCGImageAlphaNoneSkipFirst, provider, null,", "-\t\t\t\ttrue, 0);", "-\t\tOS.CGDataProviderRelease(provider);", "-\t\tif (handle == 0) {", "-\t\t\tOS.DisposePtr(data);", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t}", "-\t\tint bpc = OS.CGImageGetBitsPerComponent(handle);", "-\t\tint context = OS.CGBitmapContextCreate(data, width, height, bpc,", "-\t\t\t\tbpr, colorspace, OS.kCGImageAlphaNoneSkipFirst);", "-\t\tif (context == 0) {", "-\t\t\tOS.CGImageRelease(handle);", "-\t\t\tOS.DisposePtr(data);", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t}", "-\t\tint status = OS.QDPictDrawToCGContext(context, rect, pictDataRef);", "-\t\tImageData imgData = null;", "-\t\tif (status == 0) {", "-\t\t\tImage image = Image.carbon_new(Display.getCurrent(),", "-\t\t\t\t\tSWT.BITMAP, handle, data);", "-\t\t\timgData = image.getImageData();", "-\t\t\timage.dispose();", "-\t\t}", "-\t\tOS.CGContextRelease(context);", "-\t\tOS.QDPictRelease(pictDataRef);", "-\t\treturn imgData;", "-\t}", "-\treturn null;", "+\tif (!isSupportedType(transferData) || transferData.data == null) return null;", "+\tNSData data = (NSData) transferData.data;", "+\tif (data.length() == 0) return null;", "+\tNSImage nsImage = (NSImage) new NSImage().alloc();", "+\tnsImage.initWithData(data);", "+\t//TODO: Image representation wrong???", "+\tImage image = Image.cocoa_new(Display.getCurrent(), SWT.BITMAP, nsImage);", "+\tImageData imageData = image.getImageData();", "+\timage.dispose();", "+\treturn imageData;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f197f2a1934cd6503ca664bd5d27429", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "e19b8929298db4194771a475b4b9ef56a8238374", "commitAfterChange": "ca0c5209be7fe694c5578ad160491b05c77a1894", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public boolean open ()", "signatureAfterChange": " public boolean open ()", "diff": ["-\ttracking = true;", "-\thandle = OS.gcnew_Window ();", "+\tjniRef = OS.NewGlobalRef (this);", "+\tif (jniRef == 0) error (SWT.ERROR_NO_HANDLES);", "+\thandle = OS.gcnew_Popup ();", "+\tOS.Popup_AllowsTransparency (handle, true);", "+\t", "-\tOS.ContentControl_Content (handle, canvasHandle);", "-\tif (parent != null) {", "-\t\tRectangle bounds = parent.getBounds ();//\twrong", "-\t\tOS.Window_Left (handle, bounds.x);", "-\t\tOS.Window_Top (handle, bounds.y);", "-\t\tOS.FrameworkElement_Width (handle, bounds.width);", "-\t\tOS.FrameworkElement_Height (handle, bounds.height);", "-\t} else {", "-\t\tOS.Window_Left (handle, 0);", "-\t\tOS.Window_Top (handle, 0);", "-\t\tOS.FrameworkElement_Width (handle, OS.SystemParameters_PrimaryScreenWidth ());", "-\t\tOS.FrameworkElement_Height (handle, OS.SystemParameters_PrimaryScreenHeight ());", "+\tOS.Popup_Child (handle, canvasHandle);", "+\tOS.UIElement_IsHitTestVisible (canvasHandle, false);", "+\tOS.FrameworkElement_FocusVisualStyle (canvasHandle, 0);", "+\tif (clientCursor != 0) {", "+\t\tOS.FrameworkElement_Cursor (canvasHandle, clientCursor);", "-\tOS.Window_ShowInTaskbar (handle, false);", "-\tOS.Window_AllowsTransparency (handle, true);", "-\tOS.Window_ResizeMode (handle, OS.ResizeMode_NoResize);", "-\tOS.Window_WindowStyle (handle, OS.WindowStyle_None);", "-\tif (clientCursor != 0) OS.FrameworkElement_Cursor (handle, clientCursor);", "-\tint color = OS.Colors_Black;", "-\tint brush = OS.gcnew_SolidColorBrush (color);", "-\tOS.Brush_Opacity (brush, 0.01);", "-\tOS.Control_Background (handle, brush);", "-\tOS.GCHandle_Free (brush);", "-\t", "-\tint children = OS.Panel_Children (canvasHandle);", "-\tint stroke = stippled ? 3 : 1;", "-\tbrush = stippled ? OS.Brushes_Navy() : OS.Brushes_Black();", "-\trectShapes = new int[rectangles.length];", "-\tfor (int i = 0; i < rectShapes.length; i++) {", "-\t\tint child = rectShapes [i] = OS.gcnew_Rectangle ();", "-\t\tOS.UIElementCollection_Add (children, child);", "-\t\tOS.Shape_StrokeThickness(child, stroke);", "-\t\tOS.Shape_Stroke(child, brush);", "-\t}", "-\tOS.GCHandle_Free(brush);", "+", "-\tjniRef = OS.NewGlobalRef (this);", "-\tif (jniRef == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "-\tint handler = OS.gcnew_KeyEventHandler (jniRef, \"HandleKeyDown\");", "-\tOS.UIElement_KeyDown (handle, handler);\t", "-\tOS.GCHandle_Free (handler);", "-\thandler = OS.gcnew_KeyEventHandler (jniRef, \"HandleKeyUp\");", "-\tOS.UIElement_KeyUp (handle, handler);", "-\tOS.GCHandle_Free (handler);", "-\thandler = OS.gcnew_MouseEventHandler (jniRef, \"HandleMouseMove\");", "-\tOS.UIElement_MouseMove (handle, handler);", "-\tOS.GCHandle_Free (handler);", "-\thandler = OS.gcnew_MouseButtonEventHandler (jniRef, \"HandleMouseUp\");", "-\tOS.UIElement_MouseUp (handle, handler);", "-\tOS.GCHandle_Free (handler);", "-\thandler = OS.gcnew_MouseButtonEventHandler (jniRef, \"HandleMouseDown\");", "-\tOS.UIElement_MouseDown (handle, handler);", "-\tOS.GCHandle_Free (handler);", "-\t", "-\tOS.UIElement_Focus (handle);", "-\tOS.Window_Show (handle);", "+\tOS.Popup_IsOpen (handle, true);", "+\tOS.UIElement_Focusable (canvasHandle, true);", "+\tOS.UIElement_Focus (canvasHandle);//TODO DOTED LINE", "+\tOS.UIElement_CaptureMouse (canvasHandle);", "-\t\tint point = OS.Mouse_GetPosition (handle);", "+\t\tint pointCanvas = OS.Mouse_GetPosition (canvasHandle);", "+\t\tint point = OS.Visual_PointToScreen (canvasHandle, pointCanvas);", "+\t\tOS.GCHandle_Free (pointCanvas);", "+\tint handler = OS.gcnew_KeyEventHandler (jniRef, \"HandleKeyDown\");", "+\tOS.UIElement_KeyDown (canvasHandle, handler);\t", "+\tOS.GCHandle_Free (handler);", "+\thandler = OS.gcnew_KeyEventHandler (jniRef, \"HandleKeyUp\");", "+\tOS.UIElement_KeyUp (canvasHandle, handler);", "+\tOS.GCHandle_Free (handler);", "+\thandler = OS.gcnew_MouseEventHandler (jniRef, \"HandleMouseMove\");", "+\tOS.UIElement_MouseMove (canvasHandle, handler);", "+\tOS.GCHandle_Free (handler);", "+\thandler = OS.gcnew_MouseButtonEventHandler (jniRef, \"HandleMouseUp\");", "+\tOS.UIElement_MouseUp (canvasHandle, handler);", "+\tOS.GCHandle_Free (handler);", "+\thandler = OS.gcnew_MouseButtonEventHandler (jniRef, \"HandleMouseDown\");", "+\tOS.UIElement_MouseDown (canvasHandle, handler);", "+\tOS.GCHandle_Free (handler);", "+\t", "-\tDisplay display = Display.getCurrent();", "-\twhile (tracking && !cancelled) {", "-\t\tif (!display.readAndDispatch()) {", "-\t\t\tdisplay.sleep();", "-\t\t}", "-\t}", "+\tframe = OS.gcnew_DispatcherFrame ();", "+\tOS.Dispatcher_PushFrame (frame);", "-\tfor (int i = 0; i < rectShapes.length; i++) {", "-\t\tint child = rectShapes [i];", "-\t\tOS.UIElementCollection_Remove (children, child);", "-\t\tOS.GCHandle_Free (child);", "-\t}", "-\tOS.GCHandle_Free (children);", "-\tOS.Window_Close (handle);", "+\tOS.UIElement_ReleaseMouseCapture (canvasHandle);", "+\tOS.Popup_IsOpen (handle, false);", "-\tjniRef = 0;", "+\tif (frame != 0) OS.GCHandle_Free (frame);", "-\thandle = 0; ", "-\trectShapes = null;", "-\ttracking = false;", "+\tjniRef = handle = canvasHandle = frame = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd2ff2c2980952a6c1334cffd2a59c39", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "5bcc927d92fd92a4706eebf73a5e873324a4a777", "commitAfterChange": "78fbb6844fc73f459133f9bf8c4ddac92e6ea668", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void drawBackground (Control control, long window, long region, int x, int y, int width, int height)", "signatureAfterChange": "  void drawBackground (Control control, long window, long region, int x, int y, int width, int height)", "diff": ["+\tdrawBackground(control, window, 0, region, x, y, width, height);", "+}", "-\t\tlong /*int*/ cairo = OS.gdk_cairo_create(window);", "-\t\tCairo.cairo_destroy(cairo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "749a045cbe0acf59a42f4a625a7ebc39", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "48512dc20e32e369917d3e1ccfb92109c9724e7e", "commitAfterChange": "1942f64e0b774317e0a8e6ec44902bb736bb7790", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": " public Rectangle getBounds ()", "signatureAfterChange": " public Rectangle getBounds ()", "diff": ["-\tGtkCTree tree = new GtkCTree();\r", "-\tOS.memmove(tree, ctree, GtkCTree.sizeof);\r", "-\r", "-\tGtkAdjustment adjustment = new GtkAdjustment ();\r", "-\tOS.memmove (adjustment, tree.vadjustment, GtkAdjustment.sizeof);\r", "-\tfloat vaj = adjustment.value;\r", "-\tOS.memmove (adjustment, tree.hadjustment, GtkAdjustment.sizeof);\r", "-\tfloat haj = adjustment.value;\r", "+\tGtkCTree tree = new GtkCTree(ctree);\r", "+/*\r", "+\tdouble haj = OS.gtk_adjustment_get_value(tree.hadjustment);\r", "+\tdouble vaj = OS.gtk_adjustment_get_value(tree.vadjustment);\r", "+\t\r", "-\r", "-\tGtkStyle style = new GtkStyle();\r", "-\tOS.memmove(style, styleHandle, GtkStyle.sizeof);\t\r", "-\tint width = OS.gdk_string_width(style.font, buffer1);\r", "+\tGtkStyle style = new GtkStyle(styleHandle);*/\r", "+\t/* FIXME */\t\r", "+\tint width = 50; /*OS.gdk_string_width(style.font, buffer1);*/\r", "-\tint x = 33+tree.tree_indent*(level-1)+spacing[0]+tree.hoffset;\r", "+/*\tint x = 33+tree.tree_indent*(level-1)+spacing[0]+tree.hoffset;*/\r", "-\treturn new Rectangle (x, y, width, height);\r", "+\treturn new Rectangle (0, 0, 40, 10);\r"]}], "num": 4475}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3fecc929792e02dc54f13f6c7c6f879", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65df22a9c0f2d11c7b903a67fb9890b9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "1879f0110762a14d14725c1ff98b0c876188176a", "commitAfterChange": "ec0b807b1bde11bc567a2a3419e26587b448a196", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 50, "signatureBeforeChange": "  boolean sendKeyEvent (int type, Event event)", "signatureAfterChange": "  boolean sendKeyEvent (int type, Event event)", "diff": ["-\tif (event.character == 0) return true;", "+\tif (event.character == 0) return true;", "+\tString oldText = \"\", newText = \"\";", "+\tif (hooks (SWT.Verify) || filters (SWT.Verify)) {", "+\t\tint charCount = getCharCount ();", "+\t\tPoint selection = getSelection ();", "+\t\tint start = selection.x, end = selection.y;", "+\t\tswitch (event.character) {", "+\t\t\tcase SWT.BS:", "+\t\t\t\tif (start == end) {", "+\t\t\t\t\tif (start == 0) return true;", "+\t\t\t\t\tstart = Math.max (0, start - 1);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase SWT.DEL:", "+\t\t\t\tif (start == end) {", "+\t\t\t\t\tif (start == charCount) return true;", "+\t\t\t\t\tend = Math.min (end + 1, charCount);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase SWT.CR:", "+\t\t\t\treturn true;", "+\t\t\tdefault:", "+\t\t\t\tif (event.character != '\\t' && event.character < 0x20) return true;", "+\t\t\t\toldText = new String (new char [] {event.character});", "+\t\t}", "+\t\tnewText = verifyText (oldText, start, end, event);", "+\t\tif (newText == null) return false;", "+\t\tif (charCount - (end - start) + newText.length () > textLimit) {", "+\t\t\treturn false;", "+\t\t}", "+\t\tif (newText != oldText) {", "+\t\t\tString text = getText ();", "+\t\t\tString leftText = text.substring (0, start);", "+\t\t\tString rightText = text.substring (end, text.length ());", "+\t\t\tsetText (leftText + newText + rightText, false);", "+\t\t\tstart += newText.length ();", "+\t\t\tsetSelection (new Point (start, start));", "+\t\t}", "+\t}", "-\treturn true;", "+\treturn newText == oldText;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "778abfa461368088436f0f794613a367", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "96ce10f2647f63ec45fa772ec7064c3f640fbe12", "commitAfterChange": "6ddaa74de6e57e5c04fbb1b324138cbb7188f1c0", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  boolean sendKeyEvent (NSEvent nsEvent, int type)", "signatureAfterChange": "  boolean sendKeyEvent (NSEvent nsEvent, int type)", "diff": ["-\t\t\tcase 36: { /* Return */", "+\t\t\tcase 36: /* Return */", "-\t\t\t}", "+\t}", "+\tif ((stateMask & SWT.COMMAND) != 0) return result;", "+\tString oldText = \"\";", "+\tint charCount = getCharCount ();", "+\tPoint selection = getSelection ();", "+\tint start = selection.x, end = selection.y;", "+\tshort keyCode = nsEvent.keyCode ();", "+\tNSString characters = nsEvent.charactersIgnoringModifiers();", "+\tchar character = (char) characters.characterAtIndex(0);", "+\tswitch (keyCode) {", "+\t\tcase 51: /* Backspace */", "+\t\t\tif (start == end) {", "+\t\t\t\tif (start == 0) return true;", "+\t\t\t\tstart = Math.max (0, start - 1);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 117: /* Delete */", "+\t\t\tif (start == end) {", "+\t\t\t\tif (start == charCount) return true;", "+\t\t\t\tend = Math.min (end + 1, charCount);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase 36: /* Return */", "+\t\t\tif ((style & SWT.SINGLE) != 0) return true;", "+\t\t\toldText = DELIMITER;", "+\t\t\tbreak;", "+\t\tdefault:", "+\t\t\tif (character != '\\t' && character < 0x20) return true;", "+\t\t\toldText = new String (new char [] {character});", "+\t}", "+\tString newText = verifyText (oldText, start, end, nsEvent);", "+\tif (newText == null) return false;", "+\tif (charCount - (end - start) + newText.length () > textLimit) {", "+\t\treturn false;", "+\t}", "+\tresult = newText == oldText;", "+\tif (newText != oldText || hiddenText != null) {", "+\t\tif ((style & SWT.SINGLE) != 0) {", "+\t\t\tinsertEditText (newText);", "+\t\t} else {", "+\t\t\tNSString str = NSString.stringWith (newText);", "+\t\t\tNSTextView widget = (NSTextView) view;", "+\t\t\tNSRange range = widget.selectedRange ();", "+\t\t\twidget.textStorage ().replaceCharactersInRange (range, str);", "+\t\t}", "+\t\tif (newText.length () != 0) sendEvent (SWT.Modify);"]}], "num": 2572}
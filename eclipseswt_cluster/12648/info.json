{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "222aa0c96fa741424b14c8a25511edcf", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "868bc2ad9669722a9a6d5b8d675e43e5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "f4bb8ef7d86d4b06d34d232ac624ae216be4183a", "commitAfterChange": "358e077459326bfde3a675b949aa20349d21bc3d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 14, "signatureBeforeChange": "  void createDropDownButton()", "signatureAfterChange": "  void createDropDownButton ()", "diff": ["-void createDropDownButton() {", "-\tdown = new Button(this, SWT.ARROW  | SWT.DOWN);", "-\tgtk_widget_set_can_focus (down.handle, false);", "-\tdown.addListener(SWT.Selection, new Listener() {", "-\t\tpublic void handleEvent(Event event) {", "-\t\t\tboolean dropped = isDropped();", "-\t\t\tpopupCalendar.calendarDisplayed = !dropped;", "-\t\t\tsetFocus();", "-\t\t\tdropDownCalendar (!dropped);", "-\t\t}", "-\t});", "-", "-\tpopupListener = new Listener () {", "-\t\tpublic void handleEvent (Event event) {", "-\t\t\tif (event.widget == popupShell) {", "-\t\t\t\tpopupShellEvent (event);", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tif (event.widget == popupCalendar) {", "-\t\t\t\tpopupCalendarEvent (event);", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tif (event.widget == DateTime.this) {", "-\t\t\t\tonDispose (event);", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tif (event.widget == getShell ()) {", "-\t\t\t\tgetDisplay().asyncExec(new Runnable() {", "-\t\t\t\t\tpublic void run() {", "-\t\t\t\t\t\tif (isDisposed()) return;", "-\t\t\t\t\t\thandleFocus (SWT.FocusOut);", "-\t\t\t\t\t}", "-\t\t\t\t});", "-\t\t\t}", "-\t\t}", "-\t};", "-\tpopupFilter = new Listener() {", "-\t\tpublic void handleEvent(Event event) {", "-\t\t\tShell shell = ((Control)event.widget).getShell ();", "-\t\t\tif (shell == DateTime.this.getShell ()) {", "-\t\t\t\thandleFocus (SWT.FocusOut);", "-\t\t\t}", "-\t\t}", "-\t};", "-}", "+", "+void createDropDownButton () {", "+\tdown = new Button (this, SWT.ARROW  | SWT.DOWN);", "+\tgtk_widget_set_can_focus (down.handle, false);", "+\tdown.addListener (SWT.Selection, new Listener () {", "+\t\tpublic void handleEvent (Event event) {", "+\t\t\tpopupCalendar.calendarDisplayed = !isDropped ();", "+\t\t\tsetFocus ();", "+\t\t\tdropDownCalendar (!isDropped ());", "+\t\t}", "+\t});", "+", "+\tpopupListener = new Listener () {", "+\t\tpublic void handleEvent (Event event) {", "+\t\t\tif (event.widget == popupShell) {", "+\t\t\t\tpopupShellEvent (event);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tif (event.widget == popupCalendar) {", "+\t\t\t\tpopupCalendarEvent (event);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tif (event.widget == DateTime.this) {", "+\t\t\t\tonDispose (event);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tif (event.widget == getShell ()) {", "+\t\t\t\tgetDisplay ().asyncExec (new Runnable () {", "+\t\t\t\t\tpublic void run () {", "+\t\t\t\t\t\tif (isDisposed ()) return;", "+\t\t\t\t\t\thandleFocus (SWT.FocusOut);", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t}", "+\t\t}", "+\t};", "+\tpopupFilter = new Listener () {", "+\t\tpublic void handleEvent (Event event) {", "+\t\t\tShell shell = ((Control)event.widget).getShell ();", "+\t\t\tif (shell == DateTime.this.getShell ()) {", "+\t\t\t\thandleFocus (SWT.FocusOut);", "+\t\t\t}", "+\t\t}", "+\t};", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81a594bfa4ce3e33afed60dc81634731", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "9ebcc6cb229b27b23ee4132e58f7c62d0ce9e4ef", "commitAfterChange": "0bd465c9d8419a0822e59c3729ee20667d990cce", "methodNumberBeforeChange": 196, "methodNumberAfterChange": 196, "signatureBeforeChange": " void installListeners()", "signatureAfterChange": " void installListeners()", "diff": ["-\taddListener(SWT.Dispose, new Listener() {", "+\tlistener = new Listener() {", "-\t\t\thandleDispose();", "-\t\t}", "-\t});", "-\taddListener(SWT.KeyDown, new Listener() {", "-\t\tpublic void handleEvent(Event event) {", "-\t\t\thandleKeyDown(event);", "-\t\t}", "-\t});", "-\taddListener(SWT.MouseDown, new Listener() {", "-\t\tpublic void handleEvent(Event event) {", "-\t\t\thandleMouseDown(event);", "-\t\t}", "-\t});", "-\taddListener(SWT.MouseUp, new Listener() {", "-\t\tpublic void handleEvent(Event event) {", "-\t\t\thandleMouseUp(event);", "-\t\t}", "-\t});", "-\taddListener(SWT.MouseDoubleClick, new Listener() {", "-\t\tpublic void handleEvent(Event event) {", "-\t\t\thandleMouseDoubleClick(event);", "-\t\t}", "-\t});", "-\taddListener(SWT.MouseMove, new Listener() {", "-\t\tpublic void handleEvent(Event event) {", "-\t\t\thandleMouseMove(event);", "-\t\t}", "-\t});", "-\taddListener(SWT.Paint, new Listener() {", "-\t\tpublic void handleEvent(Event event) {", "-\t\t\thandlePaint(event);", "-\t\t}", "-\t});", "-\taddListener(SWT.Resize, new Listener() {", "-\t\tpublic void handleEvent(Event event) {", "-\t\t\thandleResize(event);", "-\t\t}", "-\t});", "-\taddListener(SWT.Traverse, new Listener() {", "-\t\tpublic void handleEvent(Event event) {", "-\t\t\thandleTraverse(event);", "-\t\t}", "-\t});", "+\t\t\tswitch (event.type) {", "+\t\t\t\tcase SWT.Dispose: handleDispose(event); break;", "+\t\t\t\tcase SWT.KeyDown: handleKeyDown(event); break;", "+\t\t\t\tcase SWT.MouseDown: handleMouseDown(event); break;", "+\t\t\t\tcase SWT.MouseUp: handleMouseUp(event); break;", "+\t\t\t\tcase SWT.MouseDoubleClick: handleMouseDoubleClick(event); break;", "+\t\t\t\tcase SWT.MouseMove: handleMouseMove(event); break;", "+\t\t\t\tcase SWT.Paint: handlePaint(event); break;", "+\t\t\t\tcase SWT.Resize: handleResize(event); break;", "+\t\t\t\tcase SWT.Traverse: handleTraverse(event); break;", "+\t\t\t}", "+\t\t}\t\t", "+\t};", "+\taddListener(SWT.Dispose, listener);", "+\taddListener(SWT.KeyDown, listener);", "+\taddListener(SWT.MouseDown, listener);", "+\taddListener(SWT.MouseUp, listener);", "+\taddListener(SWT.MouseDoubleClick, listener);", "+\taddListener(SWT.MouseMove, listener);", "+\taddListener(SWT.Paint, listener);", "+\taddListener(SWT.Resize, listener);", "+\taddListener(SWT.Traverse, listener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16f8e92f34d46e169c8e0662bddf100c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet143.java", "commitBeforeChange": "77dcbf3eae5be1d01153ce8b8157154d00cb14b3", "commitAfterChange": "9590c886e5aa5dfa6590d62b81b13c52ec4149a6", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static void main(String[] args)", "signatureAfterChange": "  public static void main(String[] args)", "diff": ["-\tfinal TrayItem item = new TrayItem (tray, SWT.NONE);", "-\titem.setToolTipText(\"SWT TrayItem\");", "-\titem.addListener (SWT.Show, new Listener () {", "-\t\tpublic void handleEvent (Event event) {", "-\t\t\tSystem.out.println(\"show\");", "+\tif (tray == null) {", "+\t\tSystem.out.println (\"The system tray is not available\");", "+\t} else {", "+\t\tfinal TrayItem item = new TrayItem (tray, SWT.NONE);", "+\t\titem.setToolTipText(\"SWT TrayItem\");", "+\t\titem.addListener (SWT.Show, new Listener () {", "+\t\t\tpublic void handleEvent (Event event) {", "+\t\t\t\tSystem.out.println(\"show\");", "+\t\t\t}", "+\t\t});", "+\t\titem.addListener (SWT.Hide, new Listener () {", "+\t\t\tpublic void handleEvent (Event event) {", "+\t\t\t\tSystem.out.println(\"hide\");", "+\t\t\t}", "+\t\t});", "+\t\titem.addListener (SWT.Selection, new Listener () {", "+\t\t\tpublic void handleEvent (Event event) {", "+\t\t\t\tSystem.out.println(\"selection\");", "+\t\t\t}", "+\t\t});", "+\t\titem.addListener (SWT.DefaultSelection, new Listener () {", "+\t\t\tpublic void handleEvent (Event event) {", "+\t\t\t\tSystem.out.println(\"default selection\");", "+\t\t\t}", "+\t\t});", "+\t\tfinal Menu menu = new Menu (shell, SWT.POP_UP);", "+\t\tfor (int i = 0; i < 8; i++) {", "+\t\t\tMenuItem mi = new MenuItem (menu, SWT.PUSH);", "+\t\t\tmi.setText (\"Item\" + i);", "-\t});", "-\titem.addListener (SWT.Hide, new Listener () {", "-\t\tpublic void handleEvent (Event event) {", "-\t\t\tSystem.out.println(\"hide\");", "-\t\t}", "-\t});", "-\titem.addListener (SWT.Selection, new Listener () {", "-\t\tpublic void handleEvent (Event event) {", "-\t\t\tSystem.out.println(\"selection\");", "-\t\t}", "-\t});", "-\titem.addListener (SWT.DefaultSelection, new Listener () {", "-\t\tpublic void handleEvent (Event event) {", "-\t\t\tSystem.out.println(\"default selection\");", "-\t\t}", "-\t});", "-\tfinal Menu menu = new Menu (shell, SWT.POP_UP);", "-\tfor (int i = 0; i < 8; i++) {", "-\t\tMenuItem mi = new MenuItem (menu, SWT.PUSH);", "-\t\tmi.setText (\"Item\" + i);", "+\t\titem.addListener (SWT.MenuDetect, new Listener () {", "+\t\t\tpublic void handleEvent (Event event) {", "+\t\t\t\tmenu.setVisible (true);", "+\t\t\t}", "+\t\t});", "+\t\titem.setImage (image);", "-\titem.addListener (SWT.MenuDetect, new Listener () {", "-\t\tpublic void handleEvent (Event event) {", "-\t\t\tmenu.setVisible (true);", "-\t\t}", "-\t});", "-\titem.setImage (image);"]}], "num": 12648}
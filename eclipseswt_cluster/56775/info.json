{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a0f8af35dbc4bf7c21c7045d0c6da52", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "774c579c97944ccf8de1e9c4a109a3f6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  int [] createGdipImage()", "signatureAfterChange": "  long [] createGdipImage()", "diff": ["-int /*long*/ [] createGdipImage() {", "+long /*int*/ [] createGdipImage() {", "-\t\t\t\tint /*long*/ hDC = device.internal_new_GC(null);", "-\t\t\t\tint /*long*/ srcHdc = OS.CreateCompatibleDC(hDC);", "-\t\t\t\tint /*long*/ oldSrcBitmap = OS.SelectObject(srcHdc, handle);", "-\t\t\t\tint /*long*/ memHdc = OS.CreateCompatibleDC(hDC);", "-\t\t\t\tint /*long*/ memDib = createDIB(imgWidth, imgHeight, 32);", "+\t\t\t\tlong /*int*/ hDC = device.internal_new_GC(null);", "+\t\t\t\tlong /*int*/ srcHdc = OS.CreateCompatibleDC(hDC);", "+\t\t\t\tlong /*int*/ oldSrcBitmap = OS.SelectObject(srcHdc, handle);", "+\t\t\t\tlong /*int*/ memHdc = OS.CreateCompatibleDC(hDC);", "+\t\t\t\tlong /*int*/ memDib = createDIB(imgWidth, imgHeight, 32);", "-\t\t\t\tint /*long*/ oldMemBitmap = OS.SelectObject(memHdc, memDib);\t", "+\t\t\t\tlong /*int*/ oldMemBitmap = OS.SelectObject(memHdc, memDib);\t", "-\t\t\t\tint /*long*/ hHeap = OS.GetProcessHeap();", "-\t\t\t\tint /*long*/ pixels = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, srcData.length);", "+\t\t\t\tlong /*int*/ hHeap = OS.GetProcessHeap();", "+\t\t\t\tlong /*int*/ pixels = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, srcData.length);", "-\t\t\t\treturn new int /*long*/ []{Gdip.Bitmap_new(imgWidth, imgHeight, dibBM.bmWidthBytes, Gdip.PixelFormat32bppARGB, pixels), pixels};", "+\t\t\t\treturn new long /*int*/ []{Gdip.Bitmap_new(imgWidth, imgHeight, dibBM.bmWidthBytes, Gdip.PixelFormat32bppARGB, pixels), pixels};", "-\t\t\treturn new int /*long*/ []{Gdip.Bitmap_new(handle, 0), 0};", "+\t\t\treturn new long /*int*/ []{Gdip.Bitmap_new(handle, 0), 0};", "-\t\t\tint /*long*/ hBitmap = iconInfo.hbmColor;", "+\t\t\tlong /*int*/ hBitmap = iconInfo.hbmColor;", "-\t\t\tint /*long*/ img = 0, pixels = 0;", "+\t\t\tlong /*int*/ img = 0, pixels = 0;", "-\t\t\t\tint /*long*/ hDC = device.internal_new_GC(null);", "-\t\t\t\tint /*long*/ srcHdc = OS.CreateCompatibleDC(hDC);", "-\t\t\t\tint /*long*/ oldSrcBitmap = OS.SelectObject(srcHdc, hBitmap);", "-\t\t\t\tint /*long*/ memHdc = OS.CreateCompatibleDC(hDC);", "-\t\t\t\tint /*long*/ memDib = createDIB(imgWidth, imgHeight, 32);", "+\t\t\t\tlong /*int*/ hDC = device.internal_new_GC(null);", "+\t\t\t\tlong /*int*/ srcHdc = OS.CreateCompatibleDC(hDC);", "+\t\t\t\tlong /*int*/ oldSrcBitmap = OS.SelectObject(srcHdc, hBitmap);", "+\t\t\t\tlong /*int*/ memHdc = OS.CreateCompatibleDC(hDC);", "+\t\t\t\tlong /*int*/ memDib = createDIB(imgWidth, imgHeight, 32);", "-\t\t\t\tint /*long*/ oldMemBitmap = OS.SelectObject(memHdc, memDib);\t", "+\t\t\t\tlong /*int*/ oldMemBitmap = OS.SelectObject(memHdc, memDib);\t", "-\t\t\t\tint /*long*/ hHeap = OS.GetProcessHeap();", "+\t\t\t\tlong /*int*/ hHeap = OS.GetProcessHeap();", "-\t\t\treturn new int /*long*/ []{img, pixels};", "+\t\t\treturn new long /*int*/ []{img, pixels};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9022ec13f53fa5e4dffbead6d3207fa4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "dbb867f00ae35fdce66baf48ea942146496b4f1b", "commitAfterChange": "a79b48a96506f5d7be70bc5cf8ee067cbbd5d771", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  void drawLines(boolean advance, int graphics, int x, int y, StyleItem run, int color)", "signatureAfterChange": "  void drawLines(boolean advance, int graphics, int x, int y, StyleItem run, int color, boolean selection)", "diff": ["-void drawLines(boolean advance, int /*long*/ graphics, int x, int y, StyleItem run, int /*long*/ color) {", "+void drawLines(boolean advance, int /*long*/ graphics, int x, int y, StyleItem run, int /*long*/ color, boolean selection) {", "+\t\tint /*long*/ brush = color;", "-\t\t\tGdip.Graphics_FillRectangle(graphics, color, x, underlineY, run.width, run.underlineThickness);", "+\t\t\tif (!selection && run.style.underlineColor != null) {", "+\t\t\t\tint c = run.style.underlineColor.handle;", "+\t\t\t\tint argb = (0xFF << 24) | ((c >> 16) & 0xFF) | (c & 0xFF00) | ((c & 0xFF) << 16);", "+\t\t\t\tint /*long*/ gdiColor = Gdip.Color_new(argb); ", "+\t\t\t\tbrush = Gdip.SolidBrush_new(gdiColor);", "+\t\t\t\tGdip.Color_delete(gdiColor);", "+\t\t\t}", "+\t\t\tGdip.Graphics_FillRectangle(graphics, brush, x, underlineY, run.width, run.underlineThickness);", "+\t\t\tif (brush != color) Gdip.SolidBrush_delete(brush);", "-\t\t\tGdip.Graphics_FillRectangle(graphics, color, x, strikeoutY, run.width, run.strikeoutThickness);", "+\t\t\tif (!selection && run.style.strikeoutColor != null) {", "+\t\t\t\tint c = run.style.strikeoutColor.handle;", "+\t\t\t\tint argb = (0xFF << 24) | ((c >> 16) & 0xFF) | (c & 0xFF00) | ((c & 0xFF) << 16);", "+\t\t\t\tint /*long*/ gdiColor = Gdip.Color_new(argb); ", "+\t\t\t\tbrush = Gdip.SolidBrush_new(gdiColor);", "+\t\t\t\tGdip.Color_delete(gdiColor);", "+\t\t\t}", "+\t\t\tGdip.Graphics_FillRectangle(graphics, brush, x, strikeoutY, run.width, run.strikeoutThickness);", "+\t\t\tif (brush != color) Gdip.SolidBrush_delete(brush);", "-\t\tint /*long*/ brush = OS.CreateSolidBrush((int)/*64*/color);", "+\t\tint colorRefUnderline = (int)/*64*/color;", "+\t\tint colorRefStrikeout = (int)/*64*/color;", "+\t\tint /*long*/ brushUnderline = 0;", "+\t\tint /*long*/ brushStrikeout = 0;", "+\t\t\tif (!selection && run.style.underlineColor != null) {", "+\t\t\t\tcolorRefUnderline = run.style.underlineColor.handle;", "+\t\t\t}", "+\t\t\tbrushUnderline = OS.CreateSolidBrush(colorRefUnderline);", "-\t\t\tOS.FillRect(graphics, rect, brush);", "+\t\t\tOS.FillRect(graphics, rect, brushUnderline);", "+\t\t\tif (!selection && run.style.strikeoutColor != null) {", "+\t\t\t\tcolorRefStrikeout = run.style.strikeoutColor.handle;", "+\t\t\t}", "+\t\t\tif (brushUnderline != 0 && colorRefStrikeout == colorRefUnderline) {", "+\t\t\t\tbrushStrikeout = brushUnderline;", "+\t\t\t} else {", "+\t\t\t\tbrushStrikeout = OS.CreateSolidBrush(colorRefStrikeout);", "+\t\t\t}", "-\t\t\tOS.FillRect(graphics, rect, brush);", "+\t\t\tOS.FillRect(graphics, rect, brushStrikeout);", "-\t\tOS.DeleteObject(brush);", "+\t\tif (brushUnderline != 0) OS.DeleteObject(brushUnderline);", "+\t\tif (brushStrikeout != 0 && brushStrikeout != brushUnderline) OS.DeleteObject(brushStrikeout);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "161e0ab6f5ef5b227230cd4090ff43cd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "ef390566d4164ae7a1f970e53f45de12a5265cf6", "commitAfterChange": "ee543bcb83fee603dbf808a397bfdb1dd9d1075a", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["-\tint hdc = gc.handle;", "+\tint /*long*/ hdc = gc.handle;", "-\tint gdipGraphics = data.gdipGraphics;", "+\tint /*long*/ gdipGraphics = data.gdipGraphics;", "-\tint clipRgn = 0;", "+\tint /*long*/ clipRgn = 0;", "-\t\tint matrix = Gdip.Matrix_new(1, 0, 0, 1, 0, 0);", "+\t\tint /*long*/ matrix = Gdip.Matrix_new(1, 0, 0, 1, 0, 0);", "-\t\tint identity = gc.identity();", "+\t\tint /*long*/ identity = gc.identity();", "-\t\t\tint rgn = Gdip.Region_new();", "+\t\t\tint /*long*/ rgn = Gdip.Region_new();", "-\tint foregroundBrush = 0, state = 0;", "+\tint /*long*/ foregroundBrush = 0;", "+\tint state = 0;", "-\tint selBrush = 0, selPen = 0, selBrushFg = 0;", "+\tint /*long*/ selBrush = 0, selPen = 0, selBrushFg = 0;", "-\t\t\tint color = Gdip.Color_new(argb); ", "+\t\t\tint /*long*/ color = Gdip.Color_new(argb); ", "-\t\t\t\t\t\t\t\tint color = Gdip.Color_new(argb); ", "-\t\t\t\t\t\t\t\tint brush = Gdip.SolidBrush_new(color);", "+\t\t\t\t\t\t\t\tint /*long*/ color = Gdip.Color_new(argb); ", "+\t\t\t\t\t\t\t\tint /*long*/ brush = Gdip.SolidBrush_new(color);", "-\t\t\t\t\t\t\t\tint hBrush = OS.CreateSolidBrush (bg);", "-\t\t\t\t\t\t\t\tint oldBrush = OS.SelectObject(hdc, hBrush);", "+\t\t\t\t\t\t\t\tint /*long*/ hBrush = OS.CreateSolidBrush (bg);", "+\t\t\t\t\t\t\t\tint /*long*/ oldBrush = OS.SelectObject(hdc, hBrush);", "-\t\t\t\t\t\t\tint advances = run.justify != 0 ? run.justify : run.advances;", "+\t\t\t\t\t\t\tint /*long*/ advances = run.justify != 0 ? run.justify : run.advances;", "-\t\t\t\t\t\tint advances = run.justify != 0 ? run.justify : run.advances;", "+\t\t\t\t\t\tint /*long*/ advances = run.justify != 0 ? run.justify : run.advances;", "-\t\t\t\t\t\tint path = Gdip.GraphicsPath_new(points, types, count, Gdip.FillModeAlternate);", "+\t\t\t\t\t\tint /*long*/ path = Gdip.GraphicsPath_new(points, types, count, Gdip.FillModeAlternate);", "-\t\t\t\t\t\tint brush = foregroundBrush;", "+\t\t\t\t\t\tint /*long*/ brush = foregroundBrush;", "-\t\t\t\t\t\t\t\tint color = Gdip.Color_new(argb); ", "+\t\t\t\t\t\t\t\tint /*long*/ color = Gdip.Color_new(argb); ", "-\t\t\t\t\t\t\tint newPen = hasSelection ? selPen : Gdip.Pen_new(brush, 1);", "+\t\t\t\t\t\t\tint /*long*/ newPen = hasSelection ? selPen : Gdip.Pen_new(brush, 1);", "-\t\t\t\t\t\t\tint newPen = hasSelection && fg == selectionForeground.handle ? selPen : OS.CreatePen(OS.PS_SOLID, 1, fg);", "-\t\t\t\t\t\t\tint oldPen = OS.SelectObject(hdc, newPen);", "+\t\t\t\t\t\t\tint /*long*/ newPen = hasSelection && fg == selectionForeground.handle ? selPen : OS.CreatePen(OS.PS_SOLID, 1, fg);", "+\t\t\t\t\t\t\tint /*long*/ oldPen = OS.SelectObject(hdc, newPen);", "-\t\t\t\t\t\t\t\tint oldPen = OS.SelectObject(hdc, selPen);", "+\t\t\t\t\t\t\t\tint /*long*/ oldPen = OS.SelectObject(hdc, selPen);"]}], "num": 56775}
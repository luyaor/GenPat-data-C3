{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5cb274a5ce6c3653981ceffa3b2029f7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cddef379e4a79f64c61611dd541778cc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/graphics/ImageData.java", "commitBeforeChange": "c6b419091fbce98db829f94e0af757941ff81fa1", "commitAfterChange": "6e47399d655ea727123e0231062164f992ca780c", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void setPixels(int x, int y, int putWidth, int[] pixels, int startIndex)", "signatureAfterChange": " public void setPixels(int x, int y, int putWidth, int[] pixels, int startIndex)", "diff": ["-\tif (depth == 1) {", "-\t\tindex = (y * bytesPerLine) + (x >> 3);", "-\t\twhile (n > 0) {", "-\t\t\tmask = 1 << (7 - (srcX & 0x7));", "-\t\t\tif ((pixels[i] & 0x1) == 1) {", "-\t\t\t\tdata[index] = (byte)((data[index] & 0xFF) | mask);", "-\t\t\t} else {", "-\t\t\t\tdata[index] = (byte)((data[index] & 0xFF) & (mask ^ -1));", "-\t\t\t}", "-\t\t\ti++;", "-\t\t\tn--;", "-\t\t\tsrcX++;", "-\t\t\tif (srcX >= width) {", "-\t\t\t\tsrcY++;", "-\t\t\t\tindex = srcY * bytesPerLine;", "-\t\t\t\tsrcX = 0;", "-\t\t\t} else {", "-\t\t\t\tif (mask == 1) {", "-\t\t\t\t\tindex++;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\treturn;", "-\t}", "-\tif (depth == 2) {", "-\t\tbyte [] masks = { (byte)0xFC, (byte)0xF3, (byte)0xCF, (byte)0x3F };", "-\t\tindex = (y * bytesPerLine) + (x >> 2);", "-\t\tint offset = 3 - (x % 4);", "-\t\twhile (n > 0) {", "-\t\t\ttheByte = pixels[i] & 0x3;", "-\t\t\tdata[index] = (byte)((data[index] & masks[offset]) | (theByte << (offset * 2)));", "-\t\t\ti++;", "-\t\t\tn--;", "-\t\t\tsrcX++;", "-\t\t\tif (srcX >= width) {", "-\t\t\t\tsrcY++;", "-\t\t\t\tindex = srcY * bytesPerLine;", "-\t\t\t\toffset = 3;", "-\t\t\t\tsrcX = 0;", "-\t\t\t} else {", "-\t\t\t\tif (offset == 0) {", "-\t\t\t\t\tindex++;", "-\t\t\t\t\toffset = 3;", "+\tswitch (depth) {", "+\t\tcase 32:", "+\t\t\tindex = (y * bytesPerLine) + (x * 4);", "+\t\t\tfor (int j = 0; j < putWidth; j++) {", "+\t\t\t\tpixel = pixels[i];", "+\t\t\t\tdata[index] = (byte)((pixel >> 24) & 0xFF);", "+\t\t\t\tdata[index + 1] = (byte)((pixel >> 16) & 0xFF);", "+\t\t\t\tdata[index + 2] = (byte)((pixel >> 8) & 0xFF);", "+\t\t\t\tdata[index + 3] = (byte)(pixel & 0xFF);", "+\t\t\t\ti++;", "+\t\t\t\tsrcX++;", "+\t\t\t\tif (srcX >= width) {", "+\t\t\t\t\tsrcY++;", "+\t\t\t\t\tindex = srcY * bytesPerLine;", "+\t\t\t\t\tsrcX = 0;", "-\t\t\t\t\toffset--;", "+\t\t\t\t\tindex += 4;", "-\t\t}", "-\t\treturn;", "-\t}", "-\tif (depth == 4) {", "-\t\tindex = (y * bytesPerLine) + (x >> 1);", "-\t\tboolean high = (x & 0x1) == 0;", "-\t\twhile (n > 0) {", "-\t\t\ttheByte = pixels[i] & 0x0F;", "-\t\t\tif (high) {", "-\t\t\t\tdata[index] = (byte)((data[index] & 0x0F) | (theByte << 4));", "-\t\t\t} else {", "-\t\t\t\tdata[index] = (byte)((data[index] & 0xF0) | theByte);", "+\t\t\treturn;", "+\t\tcase 24:", "+\t\t\tindex = (y * bytesPerLine) + (x * 3);", "+\t\t\tfor (int j = 0; j < putWidth; j++) {", "+\t\t\t\tpixel = pixels[i];", "+\t\t\t\tdata[index] = (byte)((pixel >> 16) & 0xFF);", "+\t\t\t\tdata[index + 1] = (byte)((pixel >> 8) & 0xFF);", "+\t\t\t\tdata[index + 2] = (byte)(pixel & 0xFF);", "+\t\t\t\ti++;", "+\t\t\t\tsrcX++;", "+\t\t\t\tif (srcX >= width) {", "+\t\t\t\t\tsrcY++;", "+\t\t\t\t\tindex = srcY * bytesPerLine;", "+\t\t\t\t\tsrcX = 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tindex += 3;", "+\t\t\t\t}", "-\t\t\ti++;", "-\t\t\tn--;", "-\t\t\tsrcX++;", "-\t\t\tif (srcX >= width) {", "-\t\t\t\tsrcY++;", "-\t\t\t\tindex = srcY * bytesPerLine;", "-\t\t\t\thigh = true;", "-\t\t\t\tsrcX = 0;", "-\t\t\t} else {", "-\t\t\t\tif (!high) index++;", "-\t\t\t\thigh = !high;", "+\t\t\treturn;", "+\t\tcase 16:", "+\t\t\tindex = (y * bytesPerLine) + (x * 2);", "+\t\t\tfor (int j = 0; j < putWidth; j++) {", "+\t\t\t\tpixel = pixels[i];", "+\t\t\t\tdata[index] = (byte)(pixel & 0xFF);", "+\t\t\t\tdata[index + 1] = (byte)((pixel >> 8) & 0xFF);", "+\t\t\t\ti++;", "+\t\t\t\tsrcX++;", "+\t\t\t\tif (srcX >= width) {", "+\t\t\t\t\tsrcY++;", "+\t\t\t\t\tindex = srcY * bytesPerLine;", "+\t\t\t\t\tsrcX = 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tindex += 2;", "+\t\t\t\t}", "-\t\t}", "-\t\treturn;", "-\t}", "-\tif (depth == 8) {", "-\t\tindex = (y * bytesPerLine) + x;", "-\t\tfor (int j = 0; j < putWidth; j++) {", "-\t\t\tdata[index] = (byte)(pixels[i] & 0xFF);", "-\t\t\ti++;", "-\t\t\tsrcX++;", "-\t\t\tif (srcX >= width) {", "-\t\t\t\tsrcY++;", "-\t\t\t\tindex = srcY * bytesPerLine;", "-\t\t\t\tsrcX = 0;", "-\t\t\t} else {", "-\t\t\t\tindex++;", "+\t\t\treturn;", "+\t\tcase 8:", "+\t\t\tindex = (y * bytesPerLine) + x;", "+\t\t\tfor (int j = 0; j < putWidth; j++) {", "+\t\t\t\tdata[index] = (byte)(pixels[i] & 0xFF);", "+\t\t\t\ti++;", "+\t\t\t\tsrcX++;", "+\t\t\t\tif (srcX >= width) {", "+\t\t\t\t\tsrcY++;", "+\t\t\t\t\tindex = srcY * bytesPerLine;", "+\t\t\t\t\tsrcX = 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tindex++;", "+\t\t\t\t}", "-\t\t}", "-\t\treturn;", "-", "-\t}", "-\tif (depth == 16) {", "-\t\tindex = (y * bytesPerLine) + (x * 2);", "-\t\tfor (int j = 0; j < putWidth; j++) {", "-\t\t\tpixel = pixels[i];", "-\t\t\tdata[index] = (byte)(pixel & 0xFF);", "-\t\t\tdata[index + 1] = (byte)((pixel >> 8) & 0xFF);", "-\t\t\ti++;", "-\t\t\tsrcX++;", "-\t\t\tif (srcX >= width) {", "-\t\t\t\tsrcY++;", "-\t\t\t\tindex = srcY * bytesPerLine;", "-\t\t\t\tsrcX = 0;", "-\t\t\t} else {", "-\t\t\t\tindex += 2;", "+\t\t\treturn;", "+\t\tcase 4:", "+\t\t\tindex = (y * bytesPerLine) + (x >> 1);", "+\t\t\tboolean high = (x & 0x1) == 0;", "+\t\t\twhile (n > 0) {", "+\t\t\t\ttheByte = pixels[i] & 0x0F;", "+\t\t\t\tif (high) {", "+\t\t\t\t\tdata[index] = (byte)((data[index] & 0x0F) | (theByte << 4));", "+\t\t\t\t} else {", "+\t\t\t\t\tdata[index] = (byte)((data[index] & 0xF0) | theByte);", "+\t\t\t\t}", "+\t\t\t\ti++;", "+\t\t\t\tn--;", "+\t\t\t\tsrcX++;", "+\t\t\t\tif (srcX >= width) {", "+\t\t\t\t\tsrcY++;", "+\t\t\t\t\tindex = srcY * bytesPerLine;", "+\t\t\t\t\thigh = true;", "+\t\t\t\t\tsrcX = 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (!high) index++;", "+\t\t\t\t\thigh = !high;", "+\t\t\t\t}", "-\t\t}", "-\t\treturn;", "-\t}", "-\tif (depth == 24) {", "-\t\tindex = (y * bytesPerLine) + (x * 3);", "-\t\tfor (int j = 0; j < putWidth; j++) {", "-\t\t\tpixel = pixels[i];", "-\t\t\tdata[index] = (byte)((pixel >> 16) & 0xFF);", "-\t\t\tdata[index + 1] = (byte)((pixel >> 8) & 0xFF);", "-\t\t\tdata[index + 2] = (byte)(pixel & 0xFF);", "-\t\t\ti++;", "-\t\t\tsrcX++;", "-\t\t\tif (srcX >= width) {", "-\t\t\t\tsrcY++;", "-\t\t\t\tindex = srcY * bytesPerLine;", "-\t\t\t\tsrcX = 0;", "-\t\t\t} else {", "-\t\t\t\tindex += 3;", "+\t\t\treturn;", "+\t\tcase 2:", "+\t\t\tbyte [] masks = { (byte)0xFC, (byte)0xF3, (byte)0xCF, (byte)0x3F };", "+\t\t\tindex = (y * bytesPerLine) + (x >> 2);", "+\t\t\tint offset = 3 - (x % 4);", "+\t\t\twhile (n > 0) {", "+\t\t\t\ttheByte = pixels[i] & 0x3;", "+\t\t\t\tdata[index] = (byte)((data[index] & masks[offset]) | (theByte << (offset * 2)));", "+\t\t\t\ti++;", "+\t\t\t\tn--;", "+\t\t\t\tsrcX++;", "+\t\t\t\tif (srcX >= width) {", "+\t\t\t\t\tsrcY++;", "+\t\t\t\t\tindex = srcY * bytesPerLine;", "+\t\t\t\t\toffset = 3;", "+\t\t\t\t\tsrcX = 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (offset == 0) {", "+\t\t\t\t\t\tindex++;", "+\t\t\t\t\t\toffset = 3;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\toffset--;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t}", "-\t\treturn;", "-\t}", "-\tif (depth == 32) {", "-\t\tindex = (y * bytesPerLine) + (x * 4);", "-\t\tfor (int j = 0; j < putWidth; j++) {", "-\t\t\tpixel = pixels[i];", "-\t\t\tdata[index] = (byte)((pixel >> 24) & 0xFF);", "-\t\t\tdata[index + 1] = (byte)((pixel >> 16) & 0xFF);", "-\t\t\tdata[index + 2] = (byte)((pixel >> 8) & 0xFF);", "-\t\t\tdata[index + 3] = (byte)(pixel & 0xFF);", "-\t\t\ti++;", "-\t\t\tsrcX++;", "-\t\t\tif (srcX >= width) {", "-\t\t\t\tsrcY++;", "-\t\t\t\tindex = srcY * bytesPerLine;", "-\t\t\t\tsrcX = 0;", "-\t\t\t} else {", "-\t\t\t\tindex += 4;", "+\t\t\treturn;", "+\t\tcase 1:", "+\t\t\tindex = (y * bytesPerLine) + (x >> 3);", "+\t\t\twhile (n > 0) {", "+\t\t\t\tmask = 1 << (7 - (srcX & 0x7));", "+\t\t\t\tif ((pixels[i] & 0x1) == 1) {", "+\t\t\t\t\tdata[index] = (byte)((data[index] & 0xFF) | mask);", "+\t\t\t\t} else {", "+\t\t\t\t\tdata[index] = (byte)((data[index] & 0xFF) & (mask ^ -1));", "+\t\t\t\t}", "+\t\t\t\ti++;", "+\t\t\t\tn--;", "+\t\t\t\tsrcX++;", "+\t\t\t\tif (srcX >= width) {", "+\t\t\t\t\tsrcY++;", "+\t\t\t\t\tindex = srcY * bytesPerLine;", "+\t\t\t\t\tsrcX = 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (mask == 1) {", "+\t\t\t\t\t\tindex++;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t}", "-\t\treturn;", "+\t\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a41e1ad060bb9d1fbf44f382cbd8db19", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/graphics/ImageData.java", "commitBeforeChange": "c6b419091fbce98db829f94e0af757941ff81fa1", "commitAfterChange": "6e47399d655ea727123e0231062164f992ca780c", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void getPixels(int x, int y, int getWidth, int[] pixels, int startIndex)", "signatureAfterChange": " public void getPixels(int x, int y, int getWidth, int[] pixels, int startIndex)", "diff": ["-\tif (depth == 1) {", "-\t\tindex = (y * bytesPerLine) + (x >> 3);", "-\t\ttheByte = data[index] & 0xFF;", "-\t\twhile (n > 0) {", "-\t\t\tmask = 1 << (7 - (srcX & 0x7));", "-\t\t\tif ((theByte & mask) == 0) {", "-\t\t\t\tpixels[i] = 0;", "-\t\t\t} else {", "-\t\t\t\tpixels[i] = 1;", "-\t\t\t}", "-\t\t\ti++;", "-\t\t\tn--;", "-\t\t\tsrcX++;", "-\t\t\tif (srcX >= width) {", "-\t\t\t\tsrcY++;", "-\t\t\t\tindex = srcY * bytesPerLine;", "-\t\t\t\tif (n > 0) theByte = data[index] & 0xFF;", "-\t\t\t\tsrcX = 0;", "-\t\t\t} else {", "-\t\t\t\tif (mask == 1) {", "-\t\t\t\t\tindex++;", "-\t\t\t\t\tif (n > 0) theByte = data[index] & 0xFF;", "+\tswitch (depth) {", "+\t\tcase 32:", "+\t\t\tindex = (y * bytesPerLine) + (x * 4);", "+\t\t\ti = startIndex;", "+\t\t\tfor (int j = 0; j < getWidth; j++) {", "+\t\t\t\tpixels[i] = ((data[index] & 0xFF) << 24) | ((data[index+1] & 0xFF) << 16)", "+\t\t\t\t\t| ((data[index+2] & 0xFF) << 8) | (data[index+3] & 0xFF);", "+\t\t\t\ti++;", "+\t\t\t\tsrcX++;", "+\t\t\t\tif (srcX >= width) {", "+\t\t\t\t\tsrcY++;", "+\t\t\t\t\tindex = srcY * bytesPerLine;", "+\t\t\t\t\tsrcX = 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tindex += 4;", "-\t\t}", "-\t\treturn;", "-\t}\t\t", "-\tif (depth == 2) {", "-\t\tindex = (y * bytesPerLine) + (x >> 2);", "-\t\ttheByte = data[index] & 0xFF;", "-\t\tint offset;", "-\t\twhile (n > 0) {", "-\t\t\toffset = 3 - (srcX % 4);", "-\t\t\tmask = 3 << (offset * 2);", "-\t\t\tpixels[i] = (byte)((theByte & mask) >> (offset * 2));", "-\t\t\ti++;", "-\t\t\tn--;", "-\t\t\tsrcX++;", "-\t\t\tif (srcX >= width) {", "-\t\t\t\tsrcY++;", "-\t\t\t\tindex = srcY * bytesPerLine;", "-\t\t\t\tif (n > 0) theByte = data[index] & 0xFF;", "-\t\t\t\tsrcX = 0;", "-\t\t\t} else {", "-\t\t\t\tif (offset == 0) {", "-\t\t\t\t\tindex++;", "-\t\t\t\t\ttheByte = data[index] & 0xFF;", "+\t\t\treturn;", "+\t\tcase 24:", "+\t\t\tindex = (y * bytesPerLine) + (x * 3);", "+\t\t\tfor (int j = 0; j < getWidth; j++) {", "+\t\t\t\tpixels[i] = ((data[index] & 0xFF) << 16) | ((data[index+1] & 0xFF) << 8)", "+\t\t\t\t\t| (data[index+2] & 0xFF);", "+\t\t\t\ti++;", "+\t\t\t\tsrcX++;", "+\t\t\t\tif (srcX >= width) {", "+\t\t\t\t\tsrcY++;", "+\t\t\t\t\tindex = srcY * bytesPerLine;", "+\t\t\t\t\tsrcX = 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tindex += 3;", "-\t\t}", "-\t\treturn;", "-\t}", "-\tif (depth == 4) {", "-\t\tindex = (y * bytesPerLine) + (x >> 1);", "-\t\tif ((x & 0x1) == 1) {", "-\t\t\ttheByte = data[index] & 0xFF;", "-\t\t\tpixels[i] = theByte & 0x0F;", "-\t\t\ti++;", "-\t\t\tn--;", "-\t\t\tsrcX++;", "-\t\t\tif (srcX >= width) {", "-\t\t\t\tsrcY++;", "-\t\t\t\tindex = srcY * bytesPerLine;", "-\t\t\t\tsrcX = 0;", "-\t\t\t} else {", "-\t\t\t\tindex++;", "+\t\t\treturn;", "+\t\tcase 16:", "+\t\t\tindex = (y * bytesPerLine) + (x * 2);", "+\t\t\tfor (int j = 0; j < getWidth; j++) {", "+\t\t\t\tpixels[i] = ((data[index+1] & 0xFF) << 8) + (data[index] & 0xFF);", "+\t\t\t\ti++;", "+\t\t\t\tsrcX++;", "+\t\t\t\tif (srcX >= width) {", "+\t\t\t\t\tsrcY++;", "+\t\t\t\t\tindex = srcY * bytesPerLine;", "+\t\t\t\t\tsrcX = 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tindex += 2;", "+\t\t\t\t}", "-\t\t}", "-\t\twhile (n > 1) {", "-\t\t\ttheByte = data[index] & 0xFF;", "-\t\t\tpixels[i] = theByte >> 4;", "-\t\t\ti++;", "-\t\t\tn--;", "-\t\t\tsrcX++;", "-\t\t\tif (srcX >= width) {", "-\t\t\t\tsrcY++;", "-\t\t\t\tindex = srcY * bytesPerLine;", "-\t\t\t\tsrcX = 0;", "-\t\t\t} else {", "+\t\t\treturn;", "+\t\tcase 8:", "+\t\t\tindex = (y * bytesPerLine) + x;", "+\t\t\tfor (int j = 0; j < getWidth; j++) {", "+\t\t\t\tpixels[i] = data[index] & 0xFF;", "+\t\t\t\ti++;", "+\t\t\t\tsrcX++;", "+\t\t\t\tif (srcX >= width) {", "+\t\t\t\t\tsrcY++;", "+\t\t\t\t\tindex = srcY * bytesPerLine;", "+\t\t\t\t\tsrcX = 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tindex++;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn;", "+\t\tcase 4:", "+\t\t\tindex = (y * bytesPerLine) + (x >> 1);", "+\t\t\tif ((x & 0x1) == 1) {", "+\t\t\t\ttheByte = data[index] & 0xFF;", "-\t\t}", "-\t\tif (n > 0) {", "+\t\t\twhile (n > 1) {", "+\t\t\t\ttheByte = data[index] & 0xFF;", "+\t\t\t\tpixels[i] = theByte >> 4;", "+\t\t\t\ti++;", "+\t\t\t\tn--;", "+\t\t\t\tsrcX++;", "+\t\t\t\tif (srcX >= width) {", "+\t\t\t\t\tsrcY++;", "+\t\t\t\t\tindex = srcY * bytesPerLine;", "+\t\t\t\t\tsrcX = 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tpixels[i] = theByte & 0x0F;", "+\t\t\t\t\ti++;", "+\t\t\t\t\tn--;", "+\t\t\t\t\tsrcX++;", "+\t\t\t\t\tif (srcX >= width) {", "+\t\t\t\t\t\tsrcY++;", "+\t\t\t\t\t\tindex = srcY * bytesPerLine;", "+\t\t\t\t\t\tsrcX = 0;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tindex++;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (n > 0) {", "+\t\t\t\ttheByte = data[index] & 0xFF;", "+\t\t\t\tpixels[i] = theByte >> 4;", "+\t\t\t}", "+\t\t\treturn;", "+\t\tcase 2:", "+\t\t\tindex = (y * bytesPerLine) + (x >> 2);", "-\t\t\tpixels[i] = theByte >> 4;", "-\t\t}", "-\t\treturn;", "-\t}", "-\tif (depth == 8) {", "-\t\tindex = (y * bytesPerLine) + x;", "-\t\tfor (int j = 0; j < getWidth; j++) {", "-\t\t\tpixels[i] = data[index] & 0xFF;", "-\t\t\ti++;", "-\t\t\tsrcX++;", "-\t\t\tif (srcX >= width) {", "-\t\t\t\tsrcY++;", "-\t\t\t\tindex = srcY * bytesPerLine;", "-\t\t\t\tsrcX = 0;", "-\t\t\t} else {", "-\t\t\t\tindex++;", "+\t\t\tint offset;", "+\t\t\twhile (n > 0) {", "+\t\t\t\toffset = 3 - (srcX % 4);", "+\t\t\t\tmask = 3 << (offset * 2);", "+\t\t\t\tpixels[i] = (byte)((theByte & mask) >> (offset * 2));", "+\t\t\t\ti++;", "+\t\t\t\tn--;", "+\t\t\t\tsrcX++;", "+\t\t\t\tif (srcX >= width) {", "+\t\t\t\t\tsrcY++;", "+\t\t\t\t\tindex = srcY * bytesPerLine;", "+\t\t\t\t\tif (n > 0) theByte = data[index] & 0xFF;", "+\t\t\t\t\tsrcX = 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (offset == 0) {", "+\t\t\t\t\t\tindex++;", "+\t\t\t\t\t\ttheByte = data[index] & 0xFF;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t}", "-\t\treturn;", "-\t}", "-\tif (depth == 16) {", "-\t\tindex = (y * bytesPerLine) + (x * 2);", "-\t\tfor (int j = 0; j < getWidth; j++) {", "-\t\t\tpixels[i] = ((data[index+1] & 0xFF) << 8) + (data[index] & 0xFF);", "-\t\t\ti++;", "-\t\t\tsrcX++;", "-\t\t\tif (srcX >= width) {", "-\t\t\t\tsrcY++;", "-\t\t\t\tindex = srcY * bytesPerLine;", "-\t\t\t\tsrcX = 0;", "-\t\t\t} else {", "-\t\t\t\tindex += 2;", "+\t\t\treturn;", "+\t\tcase 1:", "+\t\t\tindex = (y * bytesPerLine) + (x >> 3);", "+\t\t\ttheByte = data[index] & 0xFF;", "+\t\t\twhile (n > 0) {", "+\t\t\t\tmask = 1 << (7 - (srcX & 0x7));", "+\t\t\t\tif ((theByte & mask) == 0) {", "+\t\t\t\t\tpixels[i] = 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tpixels[i] = 1;", "+\t\t\t\t}", "+\t\t\t\ti++;", "+\t\t\t\tn--;", "+\t\t\t\tsrcX++;", "+\t\t\t\tif (srcX >= width) {", "+\t\t\t\t\tsrcY++;", "+\t\t\t\t\tindex = srcY * bytesPerLine;", "+\t\t\t\t\tif (n > 0) theByte = data[index] & 0xFF;", "+\t\t\t\t\tsrcX = 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (mask == 1) {", "+\t\t\t\t\t\tindex++;", "+\t\t\t\t\t\tif (n > 0) theByte = data[index] & 0xFF;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t}", "-\t\treturn;", "-\t}", "-\tif (depth == 24) {", "-\t\tindex = (y * bytesPerLine) + (x * 3);", "-\t\tfor (int j = 0; j < getWidth; j++) {", "-\t\t\tpixels[i] = ((data[index] & 0xFF) << 16) | ((data[index+1] & 0xFF) << 8)", "-\t\t\t\t| (data[index+2] & 0xFF);", "-\t\t\ti++;", "-\t\t\tsrcX++;", "-\t\t\tif (srcX >= width) {", "-\t\t\t\tsrcY++;", "-\t\t\t\tindex = srcY * bytesPerLine;", "-\t\t\t\tsrcX = 0;", "-\t\t\t} else {", "-\t\t\t\tindex += 3;", "-\t\t\t}", "-\t\t}", "-\t\treturn;", "-\t}", "-\tif (depth == 32) {", "-\t\tindex = (y * bytesPerLine) + (x * 4);", "-\t\ti = startIndex;", "-\t\tfor (int j = 0; j < getWidth; j++) {", "-\t\t\tpixels[i] = ((data[index] & 0xFF) << 24) | ((data[index+1] & 0xFF) << 16)", "-\t\t\t\t| ((data[index+2] & 0xFF) << 8) | (data[index+3] & 0xFF);", "-\t\t\ti++;", "-\t\t\tsrcX++;", "-\t\t\tif (srcX >= width) {", "-\t\t\t\tsrcY++;", "-\t\t\t\tindex = srcY * bytesPerLine;", "-\t\t\t\tsrcX = 0;", "-\t\t\t} else {", "-\t\t\t\tindex += 4;", "-\t\t\t}", "-\t\t}", "-\t\treturn;", "+\t\t\treturn;"]}], "num": 45190}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55e0cb0d8ea9d9e5123c0d084b05827b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "066e406b0223fff09b38765ee2cef0bf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "4987194d8bce616de61408593d5536fbd929aa51", "commitAfterChange": "9e31c4848da674b924950acb4bf386a247c0b202", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  public void setRedraw (boolean redraw)", "signatureAfterChange": "  public void setRedraw (boolean redraw)", "diff": ["+\t/*", "+\t * Feature in Windows.  When WM_SETREDRAW is used to turn", "+\t * off drawing in a widget, it clears the WS_VISIBLE bits", "+\t * and then sets them when redraw is turned back on.  This", "+\t * means that WM_SETREDRAW will make a widget unexpectedly", "+\t * visible.  The fix is to track the visibility state while", "+\t * drawing is turned off and restore it when drawing is turned", "+\t * back on.", "+\t */", "+\tif (drawCount == 0) {", "+\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\tif ((bits & OS.WS_VISIBLE) == 0) state |= HIDDEN;", "+\t}", "+\t\t\tif ((state & HIDDEN) != 0) {", "+\t\t\t\tstate &= ~HIDDEN;", "+\t\t\t\tOS.ShowWindow (handle, OS.SW_HIDE);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31f005963b411c2f13ff20f34490a579", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "4987194d8bce616de61408593d5536fbd929aa51", "commitAfterChange": "9e31c4848da674b924950acb4bf386a247c0b202", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": " public void setRedraw (boolean redraw)", "signatureAfterChange": " public void setRedraw (boolean redraw)", "diff": ["-\t * This code is intentionally commented.", "-\t *", "-\t * visible.", "-\t *", "-\t * There is no fix at this time.", "+\t * visible.  The fix is to track the visibility state while", "+\t * drawing is turned off and restore it when drawing is", "+\t * turned back on.", "-//\tif (drawCount == 0) {", "-//\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-//\t\tif ((bits & OS.WS_VISIBLE) == 0) return;", "-//\t}", "-\t", "+\tif (drawCount == 0) {", "+\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\tif ((bits & OS.WS_VISIBLE) == 0) state |= HIDDEN;", "+\t}", "-\t\t\tif (OS.IsWinCE) {", "-\t\t\t\tOS.InvalidateRect (handle, null, true);", "+\t\t\tif ((state & HIDDEN) != 0) {", "+\t\t\t\tstate &= ~HIDDEN;", "+\t\t\t\tOS.ShowWindow (handle, OS.SW_HIDE);", "-\t\t\t\tint flags = OS.RDW_ERASE | OS.RDW_FRAME | OS.RDW_INVALIDATE | OS.RDW_ALLCHILDREN;", "-\t\t\t\tOS.RedrawWindow (handle, null, 0, flags);", "+\t\t\t\tif (OS.IsWinCE) {", "+\t\t\t\t\tOS.InvalidateRect (handle, null, true);", "+\t\t\t\t} else {", "+\t\t\t\t\tint flags = OS.RDW_ERASE | OS.RDW_FRAME | OS.RDW_INVALIDATE | OS.RDW_ALLCHILDREN;", "+\t\t\t\t\tOS.RedrawWindow (handle, null, 0, flags);", "+\t\t\t\t}"]}], "num": 14901}
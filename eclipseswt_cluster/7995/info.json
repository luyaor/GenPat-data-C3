{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7bdba15bc90112d44870020f9853fa37", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "508e1585d1eb85081b8bee69c90a2200", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Region.java", "commitBeforeChange": "e9d1e006c7c09a24d0a19c508e6d3eeb9e0e2945", "commitAfterChange": "638c82a3eaa6b5eaaec9e7bf374f16b2cfb4ff44", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  public void test_equalsLjava_lang_Object()", "signatureAfterChange": "  public void test_equalsLjava_lang_Object()", "diff": ["-\tif (!reg1.equals(reg2)) {", "-\t\treg1.dispose();", "-\t\treg2.dispose();", "-\t\tfail(\"two instances of Region representing the same area should be considered equal\");", "-\t}\t\t", "+// Currently, Regions are only \"equal\" if they have the same handle.", "+// This is so that identical objects are properly hashed.", "+// We are considering adding a new method that will compare Regions for the same area.", "+//\tif (!reg1.equals(reg2)) {", "+//\t\treg1.dispose();", "+//\t\treg2.dispose();", "+//\t\tfail(\"two instances of Region representing the same area should be considered equal\");", "+//\t}\t\t", "-\t\tfail(\"Non empy region considered equal to empty one\");", "+\t\tfail(\"Non empty region considered equal to empty one\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eea7c232804a5dc1cd6f01bacecb30f8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_RGB.java", "commitBeforeChange": "2503053f30d7051ae67b1f8960c73f8d3decfc0a", "commitAfterChange": "375593ba6653fa81268e5bfbc6bd7fb0a56adba8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public void test_equalsLjava_lang_Object()", "signatureAfterChange": "  public void test_equalsLjava_lang_Object()", "diff": ["+", "-}", "+\tfloat hue = 220f, sat = 0.6f, bright = 0.7f;", "+\trgb1 = new RGB(hue, sat, bright);", "+\trgb2 = rgb1;", "+\tif (!rgb1.equals(rgb2)) {", "+\t\tfail(\"Two references to the same RGB instance not found equal\");", "+\t}", "+\t", "+\trgb2 = new RGB(hue, sat, bright);", "+\tif (!rgb1.equals(rgb2)) {", "+\t\tfail(\"References to two different RGB instances with same H S B parameters not found equal\");", "+\t}", "+\t", "+\tif (rgb1.equals(new RGB(hue+1, sat, bright)) ||", "+\t    rgb1.equals(new RGB(hue, sat+0.1f, bright)) ||", "+\t    rgb1.equals(new RGB(hue, sat, bright+0.1f)) ||", "+\t    rgb1.equals(new RGB(hue+1, sat+0.1f, bright+0.1f))) {", "+\t\tfail(\"Comparing two RGB instances with different combination of H S B parameters found equal\");    \t", "+\t}", "+}"]}], "num": 7995}
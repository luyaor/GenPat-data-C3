{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b82e9154f601354067e97c2f07f1209", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "45ede81fdfc98e9461b273658699cd74", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "3f40366a943605922c1277c5d17602a9e3318911", "commitAfterChange": "c8d5e49d5a2c0817d6316dd3dfcd4087e493d9a8", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  void destroyItem (TreeItem item)", "signatureAfterChange": "  void destroyItem (TreeItem item)", "diff": ["+\t\tint oldAnchor = savedAnchor;", "+\t\tint [] index = new int [1];", "+\t\tif (OS.GetDataBrowserTableViewItemRow (handle, item.id, index) != OS.noErr) {", "+\t\t\tindex = null;", "+\t\t}", "+\t\tif (savedAnchor != 0 && savedAnchor != oldAnchor) {", "+\t\t\tif (index != null) {", "+\t\t    \tint [] itemId = new int [1];", "+\t\t    \tif (OS.GetDataBrowserTableViewItemID (handle, index [0], itemId) == OS.noErr) {", "+\t\t    \t\tsavedAnchor = itemId [0];", "+\t\t    \t}", "+\t    \t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1a35848c0cb3a97b8b0bc1a0d39d38d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "51fb733e40525a6aad962d1c6ada5dc8b68dbc9a", "commitAfterChange": "e8f096301ee362f879132712d15318bcd81b37a4", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": " public Shell getActiveShell ()", "signatureAfterChange": " public Shell getActiveShell ()", "diff": ["+\t/*", "+\t* Feature in the Macintosh.  When SetWindowActivationScope()", "+\t* is used with kWindowActivationScopeNone to stop a window from", "+\t* becoming active and taking focus when shown, for some reason,", "+\t* when focus is lost to the desktop or another application,", "+\t* the window becomes active.  Specifically, IsWindowActive()", "+\t* starts to return true for the window, even though is has", "+\t* never been made active.  The fix is to check that the current", "+\t* and front process are the same before calling IsWindowActive().", "+\t*/", "+\tint [] psn1 = new int [2];", "+\tif (OS.GetCurrentProcess (psn1) == OS.noErr) {", "+\t\tint [] psn2 = new int [2];", "+\t\tif (OS.GetFrontProcess (psn2) == OS.noErr) {", "+\t\t\tboolean [] result = new boolean [1];", "+\t\t\tif (OS.SameProcess (psn1, psn2, result) == OS.noErr) {", "+\t\t\t\tif (!result [0]) return null;", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 54181}
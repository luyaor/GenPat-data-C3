{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "637eb05cee1bd06434a50f22a736553b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4ae20230e6d9236db536b137895f893", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ScrollBar.java", "commitBeforeChange": "57510f15223fec89c63c0655bfa8278340f2e37f", "commitAfterChange": "da621b6ccbf00df6f9156e1b2648ff5ff6c3f1b7", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "\r public void setVisible (boolean visible)", "signatureAfterChange": "\r public void setVisible (boolean visible)", "diff": ["-\t/*\r", "-\t* This line is intentionally commented.  Currently\r", "-\t* always show scrollbar as being enabled and visible.\r", "-\t*/\r", "-//\tif (OS.IsWinCE) error (SWT.ERROR_NOT_IMPLEMENTED);\r", "-\tif (!OS.IsWinCE) {\r", "-\t\t/*\r", "-\t\t* Set the state bits before calling ShowScrollBar ()\r", "-\t\t* because hiding and showing the scroll bar can cause\r", "-\t\t* WM_SIZE messages when the client area is resized.\r", "-\t\t* Setting the state before the call means that code\r", "-\t\t* that runs during WM_SIZE that queries the visibility\r", "-\t\t* of the scroll bar will get the correct value.\r", "-\t\t*/\r", "-\t\tstate &= ~HIDDEN;\r", "-\t\tif (!visible) state |= HIDDEN;\r", "+\tif (OS.IsWinCE) {\r", "+\t\tSCROLLINFO info = new SCROLLINFO ();\r", "+\t\tinfo.cbSize = SCROLLINFO.sizeof;\r", "-\t\tif (OS.ShowScrollBar (hwnd, type, visible)) {\r", "+\t\tinfo.fMask = OS.SIF_RANGE | OS.SIF_PAGE;\r", "+\t\tif (visible) info.fMask |= OS.SIF_DISABLENOSCROLL;\r", "+\t\tOS.GetScrollInfo (hwnd, type, info);\r", "+\t\tif (info.nPage == info.nMax - info.nMin + 1) {\r", "-\t\t\t* Bug in Windows.  For some reason, when the widget\r", "-\t\t\t* is a standard scroll bar, and SetScrollInfo () is\r", "-\t\t\t* called with SIF_RANGE or SIF_PAGE while the widget\r", "-\t\t\t* is not visible, the widget is incorrectly disabled\r", "-\t\t\t* even though the values for SIF_RANGE and SIF_PAGE,\r", "-\t\t\t* when set for a visible scroll bar would not disable\r", "-\t\t\t* the scroll bar.  The fix is to enable the scroll bar\r", "-\t\t\t* when not disabled by the application and the current\r", "-\t\t\t* scroll bar ranges would cause the scroll bar to be\r", "-\t\t\t* enabled had they been set when the scroll bar was\r", "-\t\t\t* visible.\r", "-\t\t\t*/\r", "-\t\t\tif ((state & DISABLED) == 0) {\r", "-\t\t\t\tSCROLLINFO info = new SCROLLINFO ();\r", "-\t\t\t\tinfo.cbSize = SCROLLINFO.sizeof;\r", "-\t\t\t\tinfo.fMask = OS.SIF_RANGE | OS.SIF_PAGE;\r", "-\t\t\t\tOS.GetScrollInfo (hwnd, type, info);\r", "-\t\t\t\tif (info.nMax - info.nMin - info.nPage >= 0) {\r", "-\t\t\t\t\tOS.EnableScrollBar (hwnd, type, OS.ESB_ENABLE_BOTH);\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tsendEvent (visible ? SWT.Show : SWT.Hide);\r", "-\t\t\t// widget could be disposed at this point\r", "+\t\t\t* Bug in Windows.  When the only changed flag to\r", "+\t\t\t* SetScrollInfo () is OS.SIF_DISABLENOSCROLL, \r", "+\t\t\t* Windows does not update the scroll bar state.\r", "+\t\t\t* The fix is to increase and then decrease the\r", "+\t\t\t* maximum, causing Windows to honour the flag.\r", "+\t\t\t*/  \r", "+\t\t\tint max = info.nMax;\r", "+\t\t\tinfo.nMax++;\r", "+\t\t\tOS.SetScrollInfo (hwnd, type, info, false);\r", "+\t\t\tinfo.nMax = max;\r", "+\t\t\tOS.SetScrollInfo (hwnd, type, info, true);\r", "+\t\t} else {\r", "+        \t/*\r", "+        \t* This line is intentionally commented.  Currently\r", "+        \t* always show scrollbar as being enabled and visible.\r", "+        \t*/\r", "+//\t\t\tif (OS.IsWinCE) error (SWT.ERROR_NOT_IMPLEMENTED);\r", "+\t\treturn;\r", "+\t}\r", "+\t\r", "+\t/*\r", "+\t* Set the state bits before calling ShowScrollBar ()\r", "+\t* because hiding and showing the scroll bar can cause\r", "+\t* WM_SIZE messages when the client area is resized.\r", "+\t* Setting the state before the call means that code\r", "+\t* that runs during WM_SIZE that queries the visibility\r", "+\t* of the scroll bar will get the correct value.\r", "+\t*/\r", "+\tstate &= ~HIDDEN;\r", "+\tif (!visible) state |= HIDDEN;\r", "+\tint hwnd = hwndScrollBar (), type = scrollBarType ();\r", "+\tif (OS.ShowScrollBar (hwnd, type, visible)) {\r", "+\t\t/*\r", "+\t\t* Bug in Windows.  For some reason, when the widget\r", "+\t\t* is a standard scroll bar, and SetScrollInfo () is\r", "+\t\t* called with SIF_RANGE or SIF_PAGE while the widget\r", "+\t\t* is not visible, the widget is incorrectly disabled\r", "+\t\t* even though the values for SIF_RANGE and SIF_PAGE,\r", "+\t\t* when set for a visible scroll bar would not disable\r", "+\t\t* the scroll bar.  The fix is to enable the scroll bar\r", "+\t\t* when not disabled by the application and the current\r", "+\t\t* scroll bar ranges would cause the scroll bar to be\r", "+\t\t* enabled had they been set when the scroll bar was\r", "+\t\t* visible.\r", "+\t\t*/\r", "+\t\tif ((state & DISABLED) == 0) {\r", "+\t\t\tSCROLLINFO info = new SCROLLINFO ();\r", "+\t\t\tinfo.cbSize = SCROLLINFO.sizeof;\r", "+\t\t\tinfo.fMask = OS.SIF_RANGE | OS.SIF_PAGE;\r", "+\t\t\tOS.GetScrollInfo (hwnd, type, info);\r", "+\t\t\tif (info.nMax - info.nMin - info.nPage >= 0) {\r", "+\t\t\t\tOS.EnableScrollBar (hwnd, type, OS.ESB_ENABLE_BOTH);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tsendEvent (visible ? SWT.Show : SWT.Hide);\r", "+\t\t// widget could be disposed at this point\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b26da13c84d0b472a302306b5414fe8f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "c63ca636edfbea4cd55ccc07da414186be375ce0", "commitAfterChange": "e38d4aec3f79c42ea6666a7a37c026187a8aa6ea", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void scroll (int destX, int destY, int x, int y, int width, int height, boolean all)", "signatureAfterChange": " public void scroll (int destX, int destY, int x, int y, int width, int height, boolean all)", "diff": ["-\tint flags = OS.SW_INVALIDATE | OS.SW_ERASE;", "-\t/*", "-\t* Feature in Windows.  If any child in the widget tree partially", "-\t* intersects the scrolling rectangle, Windows moves the child", "-\t* and copies the bits that intersect the scrolling rectangle but", "-\t* does not redraw the child.", "-\t* ", "-\t* Feature in Windows.  When any child in the widget tree does not", "-\t* intersect the scrolling rectangle but the parent does intersect,", "-\t* Windows does not move the child.  This is the documented (but", "-\t* strange) Windows behavior.", "-\t* ", "-\t* The fix is to not use SW_SCROLLCHILDREN and move the children", "-\t* explicitly after scrolling.  ", "-\t*/", "-//\tif (all) flags |= OS.SW_SCROLLCHILDREN;", "-\tOS.ScrollWindowEx (handle, deltaX, deltaY, sourceRect, null, 0, null, flags);", "+\tif (backgroundImage != null) {", "+\t\tif (OS.IsWinCE) {", "+\t\t\tOS.InvalidateRect (handle, sourceRect, true);", "+\t\t} else {", "+\t\t\tint flags = OS.RDW_ERASE | OS.RDW_FRAME | OS.RDW_INVALIDATE;", "+\t\t\tif (all) flags |= OS.RDW_ALLCHILDREN;", "+\t\t\tOS.RedrawWindow (handle, sourceRect, 0, flags);", "+\t\t}", "+\t\tOS.OffsetRect (sourceRect, deltaX, deltaY);", "+\t\tif (OS.IsWinCE) {", "+\t\t\tOS.InvalidateRect (handle, sourceRect, true);", "+\t\t} else {", "+\t\t\tint flags = OS.RDW_ERASE | OS.RDW_FRAME | OS.RDW_INVALIDATE;", "+\t\t\tif (all) flags |= OS.RDW_ALLCHILDREN;", "+\t\t\tOS.RedrawWindow (handle, sourceRect, 0, flags);", "+\t\t}", "+\t} else {", "+\t\tint flags = OS.SW_INVALIDATE | OS.SW_ERASE;", "+\t\t/*", "+\t\t* Feature in Windows.  If any child in the widget tree partially", "+\t\t* intersects the scrolling rectangle, Windows moves the child", "+\t\t* and copies the bits that intersect the scrolling rectangle but", "+\t\t* does not redraw the child.", "+\t\t* ", "+\t\t* Feature in Windows.  When any child in the widget tree does not", "+\t\t* intersect the scrolling rectangle but the parent does intersect,", "+\t\t* Windows does not move the child.  This is the documented (but", "+\t\t* strange) Windows behavior.", "+\t\t* ", "+\t\t* The fix is to not use SW_SCROLLCHILDREN and move the children", "+\t\t* explicitly after scrolling.  ", "+\t\t*/", "+//\t\tif (all) flags |= OS.SW_SCROLLCHILDREN;", "+\t\tOS.ScrollWindowEx (handle, deltaX, deltaY, sourceRect, null, 0, null, flags);", "+\t}"]}], "num": 128}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "38b41e6e762b2d65945edcadfaee052b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d2ef68349a0696ff61762b95c519990", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageLoader.java", "commitBeforeChange": "bbed1319bb8191b4c35b8c705558acbe1ddd6f79", "commitAfterChange": "67330b1b3f04f897b1514cbb46f9f8381e63a8a5", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public void test_saveLjava_io_OutputStreamI()", "signatureAfterChange": "  public void test_saveLjava_io_OutputStreamI()", "diff": ["-\t\t", "-\t\tString filename = SwtTestCase.imageFilenames[0];", "-\t\t// must use jpg since save is not implemented yet in png format\t\t", "-\t\tString filetype = \"jpg\";", "-\t\tinStream = SwtTestCase.class.getResourceAsStream(filename + \".\" + filetype);\t", "-\t\tloader.load(inStream);", "-\t\ttry {", "-\t\t\tinStream.close();", "-\t\t} catch (IOException e) {}", "-\t", "-\t\tString[] formats = {\"bmp\", \"bmp_rle\", \"gif\", \"ico\", \"jpg\", \"png\", \"tif\"};", "-\t\tfor (int i = 0; i < formats.length; i++) {", "-\t\t\tif (formats[i].equals(filetype)) {", "-\t\t\t\t// save using the appropriate format", "-\t\t\t\tloader.save(outStream, i);", "+\t\tboolean jpgSupported = false;", "+\t\tfor (int i=0; i<imageFormats.length; i++) {", "+\t\t\tif (imageFormats[i].equals(\"jpg\")) {", "+\t\t\t\tjpgSupported = true;", "+\t\t\t}", "+\t\t}", "+\t\tif (jpgSupported) {", "+\t\t\tString filename = SwtTestCase.imageFilenames[0];", "+\t\t\t// must use jpg since save is not implemented yet in png format\t\t", "+\t\t\tString filetype = \"jpg\";", "+\t\t\tinStream = SwtTestCase.class.getResourceAsStream(filename + \".\" + filetype);\t", "+\t\t\tloader.load(inStream);", "+\t\t\ttry {", "+\t\t\t\tinStream.close();", "+\t\t\t} catch (IOException e) {}", "+\t\t\tfor (int i = 0; i < imageFormats.length; i++) {", "+\t\t\t\tif (imageFormats[i].equals(filetype)) {", "+\t\t\t\t\t// save using the appropriate format", "+\t\t\t\t\tloader.save(outStream, i);", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a645e302afd5e6d972d8d56fadc32fc3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageLoader.java", "commitBeforeChange": "c8c3b0d56ac96eed1deeae3cbebb069fecdd4ef9", "commitAfterChange": "db54bb9c515ce97cb7d05101b9fa91b631d7bee5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public void test_saveLjava_io_OutputStreamI()", "signatureAfterChange": "  public void test_saveLjava_io_OutputStreamI()", "diff": ["-\twarnUnimpl(\"Test test_saveLjava_io_OutputStreamI not written\");", "+\tImageLoader loader = new ImageLoader();", "+\tByteArrayOutputStream outStream = null;", "+\tInputStream inStream = null;", "+\ttry {", "+\t\ttry {", "+\t\t\tloader.save(outStream, 0);", "+\t\t\tfail(\"No exception thrown for save outputStream == null\");", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t}", "+\t", "+\t\toutStream = new ByteArrayOutputStream();", "+\t\ttry {", "+\t\t\tloader.save(outStream, -1);", "+\t\t\tfail(\"No exception thrown for save to invalid outputStream format\");", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t}", "+\t\t", "+\t\tString filename = SwtTestCase.imageFilenames[0];", "+\t\t// must use jpg since save is not implemented yet in png format\t\t", "+\t\tString filetype = \"jpg\";", "+\t\tinStream = SwtTestCase.class.getResourceAsStream(filename + \".\" + filetype);\t", "+\t\tloader.load(inStream);", "+\t\ttry {", "+\t\t\tinStream.close();", "+\t\t} catch (IOException e) {}", "+\t", "+\t\tString[] formats = {\"bmp\", \"bmp_rle\", \"gif\", \"ico\", \"jpg\", \"png\", \"tif\"};", "+\t\tfor (int i = 0; i < formats.length; i++) {", "+\t\t\tif (formats[i].equals(filetype)) {", "+\t\t\t\t// save using the appropriate format", "+\t\t\t\tloader.save(outStream, i);", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t} finally {", "+\t\ttry {", "+\t\t\toutStream.close();", "+\t\t} catch (Exception e) {", "+\t\t}", "+\t}", "+\t"]}], "num": 57101}
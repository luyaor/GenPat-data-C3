{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "05367752d59f048e7e2345f6eae5c75c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd5473f6add8bd9289d7444e3300d7db", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "19d40d336daa4e3db6b54275b7dc9fbe609c5b93", "commitAfterChange": "7c624d9e35088a7e3b485b89c8f8d5e4cdc57534", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "diff": ["-\t\t/* Create the paint GC */", "-\t\tGCData data = new GCData ();", "-\t\tdata.ps = ps;", "-\t\tdata.hwnd = handle;", "-\t\tGC gc = GC.win32_new (this, data);", "-", "-\t\t/* Get the system region for the paint HDC */", "-\t\tint sysRgn = 0;", "-\t\tif ((style & (SWT.NO_MERGE_PAINTS | SWT.DOUBLE_BUFFERED)) != 0) {", "-\t\t\tsysRgn = OS.CreateRectRgn (0, 0, 0, 0);", "-\t\t\tif (OS.GetRandomRgn (gc.handle, sysRgn, OS.SYSRGN) == 1) {", "-\t\t\t\tif (OS.WIN32_VERSION >= OS.VERSION (4, 10)) {", "-\t\t\t\t\tif ((OS.GetLayout (gc.handle) & OS.LAYOUT_RTL) != 0) {", "-\t\t\t\t\t\tint nBytes = OS.GetRegionData (sysRgn, 0, null);", "-\t\t\t\t\t\tint [] lpRgnData = new int [nBytes / 4];", "-\t\t\t\t\t\tOS.GetRegionData (sysRgn, nBytes, lpRgnData);", "-\t\t\t\t\t\tint newSysRgn = OS.ExtCreateRegion (new float [] {-1, 0, 0, 1, 0, 0}, nBytes, lpRgnData);", "-\t\t\t\t\t\tOS.DeleteObject (sysRgn);", "-\t\t\t\t\t\tsysRgn = newSysRgn;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (OS.IsWinNT) {", "-\t\t\t\t\tPOINT pt = new POINT();", "-\t\t\t\t\tOS.MapWindowPoints (0, handle, pt, 1);", "-\t\t\t\t\tOS.OffsetRgn (sysRgn, pt.x, pt.y);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\t/* Send the paint event */", "-\t\tint width = ps.right - ps.left;", "-\t\tint height = ps.bottom - ps.top;", "-\t\tif (width != 0 && height != 0) {", "-\t\t\tGC paintGC = null;", "-\t\t\tImage image = null;", "-\t\t\tif ((style & SWT.DOUBLE_BUFFERED) != 0) {", "-\t\t\t\timage = new Image (display, width, height);", "-\t\t\t\tpaintGC = gc;", "-\t\t\t\tgc = new GC (image, paintGC.getStyle() & SWT.RIGHT_TO_LEFT);", "-\t\t\t\tGCData gcData = gc.getGCData ();", "-\t\t\t\tgcData.uiState = data.uiState;", "-\t\t\t\tgc.setForeground (getForeground ());", "-\t\t\t\tgc.setBackground (getBackground ());", "-\t\t\t\tgc.setFont (getFont ());", "-\t\t\t\tOS.OffsetRgn (sysRgn, -ps.left, -ps.top);", "-\t\t\t\tOS.SelectClipRgn (gc.handle, sysRgn);", "-\t\t\t\tOS.OffsetRgn (sysRgn, ps.left, ps.top);", "-\t\t\t\tOS.SetMetaRgn (gc.handle);\t", "-\t\t\t\tOS.SetWindowOrgEx (gc.handle, ps.left, ps.top, null);", "-\t\t\t\tOS.SetBrushOrgEx (gc.handle, ps.left, ps.top, null);", "+\t\t/* Use the buffered paint when available */", "+\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0) && (style & SWT.DOUBLE_BUFFERED) != 0 && (style & SWT.NO_MERGE_PAINTS) == 0) {", "+\t\t\tint hDC = OS.BeginPaint (handle, ps);", "+\t\t\tint width = ps.right - ps.left;", "+\t\t\tint height = ps.bottom - ps.top;", "+\t\t\tif (width != 0 && height != 0) {", "+\t\t\t\tint [] phdc = new int [1];", "+\t\t\t\tint flags = OS.BPBF_COMPATIBLEBITMAP;", "+\t\t\t\tRECT prcTarget = new RECT ();", "+\t\t\t\tOS.SetRect (prcTarget, ps.left, ps.top, ps.right, ps.bottom);", "+\t\t\t\tint hBufferedPaint = OS.BeginBufferedPaint (hDC, prcTarget, flags, null, phdc);", "+\t\t\t\tGCData data = new GCData ();", "+\t\t\t\tdata.device = display;", "+\t\t\t\tdata.foreground = getForegroundPixel ();", "+\t\t\t\tControl control = findBackgroundControl ();", "+\t\t\t\tif (control == null) control = this;", "+\t\t\t\tdata.background = control.getBackgroundPixel ();", "+\t\t\t\tdata.hPen = OS.CreatePen (OS.PS_SOLID, 0, data.foreground);", "+\t\t\t\tdata.hBrush = OS.CreateSolidBrush (data.background);", "+\t\t\t\tdata.hFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "+\t\t\t\tdata.uiState = OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "-\t\t\t\t\tdrawBackground (gc.handle, rect);", "+\t\t\t\t\tdrawBackground (phdc [0], rect);", "-\t\t\t}", "-\t\t\tEvent event = new Event ();", "-\t\t\tevent.gc = gc;\t\t\t", "-\t\t\tRECT rect = null;", "-\t\t\tif ((style & SWT.NO_MERGE_PAINTS) != 0 && OS.GetRgnBox (sysRgn, rect = new RECT ()) == OS.COMPLEXREGION) {", "-\t\t\t\tint nBytes = OS.GetRegionData (sysRgn, 0, null);", "-\t\t\t\tint [] lpRgnData = new int [nBytes / 4];", "-\t\t\t\tOS.GetRegionData (sysRgn, nBytes, lpRgnData);", "-\t\t\t\tint count = lpRgnData [2];", "-\t\t\t\tfor (int i=0; i<count; i++) {", "-\t\t\t\t\tint offset = 8 + (i << 2);", "-\t\t\t\t\tOS.SetRect (rect, lpRgnData [offset], lpRgnData [offset + 1], lpRgnData [offset + 2], lpRgnData [offset + 3]);", "-\t\t\t\t\tif ((style & (SWT.DOUBLE_BUFFERED | SWT.NO_BACKGROUND)) == 0) {", "-\t\t\t\t\t\tdrawBackground (gc.handle, rect);", "-\t\t\t\t\t}", "-\t\t\t\t\tevent.x = rect.left;", "-\t\t\t\t\tevent.y = rect.top;", "-\t\t\t\t\tevent.width = rect.right - rect.left;", "-\t\t\t\t\tevent.height = rect.bottom - rect.top;", "-\t\t\t\t\tevent.count = count - 1 - i;", "-\t\t\t\t\tsendEvent (SWT.Paint, event);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif ((style & (SWT.DOUBLE_BUFFERED | SWT.NO_BACKGROUND)) == 0) {", "-\t\t\t\t\tif (rect == null) rect = new RECT ();", "-\t\t\t\t\tOS.SetRect (rect, ps.left, ps.top, ps.right, ps.bottom);", "-\t\t\t\t\tdrawBackground (gc.handle, rect);", "-\t\t\t\t}", "+\t\t\t\tGC gc = GC.win32_new (phdc [0], data);", "+\t\t\t\tEvent event = new Event ();", "+\t\t\t\tevent.gc = gc;\t\t\t", "+\t\t\t\tOS.EndBufferedPaint (hBufferedPaint, true);", "+\t\t\t\tgc.dispose ();", "-\t\t\t// widget could be disposed at this point", "-\t\t\tevent.gc = null;", "-\t\t\tif ((style & SWT.DOUBLE_BUFFERED) != 0) {", "-\t\t\t\tgc.dispose();", "-\t\t\t\tif (!isDisposed ()) {", "-\t\t\t\t\tpaintGC.drawImage (image, ps.left, ps.top);", "+\t\t\tOS.EndPaint (handle, ps);", "+\t\t} else {", "+\t\t\t", "+\t\t\t/* Create the paint GC */", "+\t\t\tGCData data = new GCData ();", "+\t\t\tdata.ps = ps;", "+\t\t\tdata.hwnd = handle;", "+\t\t\tGC gc = GC.win32_new (this, data);", "+", "+\t\t\t/* Get the system region for the paint HDC */", "+\t\t\tint sysRgn = 0;", "+\t\t\tif ((style & (SWT.NO_MERGE_PAINTS | SWT.DOUBLE_BUFFERED)) != 0) {", "+\t\t\t\tsysRgn = OS.CreateRectRgn (0, 0, 0, 0);", "+\t\t\t\tif (OS.GetRandomRgn (gc.handle, sysRgn, OS.SYSRGN) == 1) {", "+\t\t\t\t\tif (OS.WIN32_VERSION >= OS.VERSION (4, 10)) {", "+\t\t\t\t\t\tif ((OS.GetLayout (gc.handle) & OS.LAYOUT_RTL) != 0) {", "+\t\t\t\t\t\t\tint nBytes = OS.GetRegionData (sysRgn, 0, null);", "+\t\t\t\t\t\t\tint [] lpRgnData = new int [nBytes / 4];", "+\t\t\t\t\t\t\tOS.GetRegionData (sysRgn, nBytes, lpRgnData);", "+\t\t\t\t\t\t\tint newSysRgn = OS.ExtCreateRegion (new float [] {-1, 0, 0, 1, 0, 0}, nBytes, lpRgnData);", "+\t\t\t\t\t\t\tOS.DeleteObject (sysRgn);", "+\t\t\t\t\t\t\tsysRgn = newSysRgn;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (OS.IsWinNT) {", "+\t\t\t\t\t\tPOINT pt = new POINT();", "+\t\t\t\t\t\tOS.MapWindowPoints (0, handle, pt, 1);", "+\t\t\t\t\t\tOS.OffsetRgn (sysRgn, pt.x, pt.y);", "+\t\t\t\t\t}", "-\t\t\t\timage.dispose ();", "-\t\t\t\tgc = paintGC;", "+\t\t\t", "+\t\t\t/* Send the paint event */", "+\t\t\tint width = ps.right - ps.left;", "+\t\t\tint height = ps.bottom - ps.top;", "+\t\t\tif (width != 0 && height != 0) {", "+\t\t\t\tGC paintGC = null;", "+\t\t\t\tImage image = null;", "+\t\t\t\tif ((style & SWT.DOUBLE_BUFFERED) != 0) {", "+\t\t\t\t\timage = new Image (display, width, height);", "+\t\t\t\t\tpaintGC = gc;", "+\t\t\t\t\tgc = new GC (image, paintGC.getStyle() & SWT.RIGHT_TO_LEFT);", "+\t\t\t\t\tGCData gcData = gc.getGCData ();", "+\t\t\t\t\tgcData.uiState = data.uiState;", "+\t\t\t\t\tgc.setForeground (getForeground ());", "+\t\t\t\t\tgc.setBackground (getBackground ());", "+\t\t\t\t\tgc.setFont (getFont ());", "+\t\t\t\t\tOS.OffsetRgn (sysRgn, -ps.left, -ps.top);", "+\t\t\t\t\tOS.SelectClipRgn (gc.handle, sysRgn);", "+\t\t\t\t\tOS.OffsetRgn (sysRgn, ps.left, ps.top);", "+\t\t\t\t\tOS.SetMetaRgn (gc.handle);\t", "+\t\t\t\t\tOS.SetWindowOrgEx (gc.handle, ps.left, ps.top, null);", "+\t\t\t\t\tOS.SetBrushOrgEx (gc.handle, ps.left, ps.top, null);", "+\t\t\t\t\tif ((style & SWT.NO_BACKGROUND) != 0) {", "+\t\t\t\t\t\t/* This code is intentionally commented because it may be slow to copy bits from the screen */", "+\t\t\t\t\t\t//paintGC.copyArea (image, ps.left, ps.top);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tOS.SetRect (rect, ps.left, ps.top, ps.right, ps.bottom);", "+\t\t\t\t\t\tdrawBackground (gc.handle, rect);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tEvent event = new Event ();", "+\t\t\t\tevent.gc = gc;\t\t\t", "+\t\t\t\tRECT rect = null;", "+\t\t\t\tif ((style & SWT.NO_MERGE_PAINTS) != 0 && OS.GetRgnBox (sysRgn, rect = new RECT ()) == OS.COMPLEXREGION) {", "+\t\t\t\t\tint nBytes = OS.GetRegionData (sysRgn, 0, null);", "+\t\t\t\t\tint [] lpRgnData = new int [nBytes / 4];", "+\t\t\t\t\tOS.GetRegionData (sysRgn, nBytes, lpRgnData);", "+\t\t\t\t\tint count = lpRgnData [2];", "+\t\t\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\t\t\tint offset = 8 + (i << 2);", "+\t\t\t\t\t\tOS.SetRect (rect, lpRgnData [offset], lpRgnData [offset + 1], lpRgnData [offset + 2], lpRgnData [offset + 3]);", "+\t\t\t\t\t\tif ((style & (SWT.DOUBLE_BUFFERED | SWT.NO_BACKGROUND)) == 0) {", "+\t\t\t\t\t\t\tdrawBackground (gc.handle, rect);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tevent.x = rect.left;", "+\t\t\t\t\t\tevent.y = rect.top;", "+\t\t\t\t\t\tevent.width = rect.right - rect.left;", "+\t\t\t\t\t\tevent.height = rect.bottom - rect.top;", "+\t\t\t\t\t\tevent.count = count - 1 - i;", "+\t\t\t\t\t\tsendEvent (SWT.Paint, event);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif ((style & (SWT.DOUBLE_BUFFERED | SWT.NO_BACKGROUND)) == 0) {", "+\t\t\t\t\t\tif (rect == null) rect = new RECT ();", "+\t\t\t\t\t\tOS.SetRect (rect, ps.left, ps.top, ps.right, ps.bottom);", "+\t\t\t\t\t\tdrawBackground (gc.handle, rect);", "+\t\t\t\t\t}", "+\t\t\t\t\tevent.x = ps.left;", "+\t\t\t\t\tevent.y = ps.top;", "+\t\t\t\t\tevent.width = width;", "+\t\t\t\t\tevent.height = height;", "+\t\t\t\t\tsendEvent (SWT.Paint, event);", "+\t\t\t\t}", "+\t\t\t\t// widget could be disposed at this point", "+\t\t\t\tevent.gc = null;", "+\t\t\t\tif ((style & SWT.DOUBLE_BUFFERED) != 0) {", "+\t\t\t\t\tgc.dispose();", "+\t\t\t\t\tif (!isDisposed ()) paintGC.drawImage (image, ps.left, ps.top);", "+\t\t\t\t\timage.dispose ();", "+\t\t\t\t\tgc = paintGC;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (sysRgn != 0) OS.DeleteObject (sysRgn);", "+\t\t\t", "+\t\t\t/* Dispose the paint GC */", "+\t\t\tgc.dispose ();", "-\t\t", "-\t\t/* Dispose the paint GC */", "-\t\tgc.dispose ();", "-\t\tif (sysRgn != 0) OS.DeleteObject (sysRgn);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3efbd2cd3ca49346ce2df853dd2f4844", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "0354f2fcd681774fe492f4e3d5f23f1a78e0b89a", "commitAfterChange": "1f0268d817d4d6da6a35f97f46ada77b8aa2e671", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t void printWindow (Control control, int  gc, int drawable, int depth, int window, int x, int y)", "signatureAfterChange": " \t void printWindow (boolean first, Control control, int gc, int drawable, int depth, int window, int x, int y)", "diff": ["-void printWindow (Control control, int /*long*/  gc, int /*long*/ drawable, int depth, int /*long*/ window, int x, int y) {", "+void printWindow (boolean first, Control control, int /*long*/ gc, int /*long*/ drawable, int depth, int /*long*/ window, int x, int y) {", "-\tOS.gdk_draw_drawable (drawable, gc, real_drawable [0], x_offset [0], y_offset [0], x, y, width [0], height [0]);", "+\tif (window == paintWindow ()) {", "+\t\tif (hooks (SWT.Paint) || filters (SWT.Paint)) {", "+\t\t\tGCData data = new GCData ();", "+\t\t\tint /*long*/ gdkGC = OS.gdk_gc_new (real_drawable [0]);", "+\t\t\tif (gdkGC == 0) error (SWT.ERROR_NO_HANDLES);\t", "+\t\t\tif (data != null) {", "+\t\t\t\tint mask = SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT;", "+\t\t\t\tif ((data.style & mask) == 0) {", "+\t\t\t\t\tdata.style |= style & (mask | SWT.MIRRORED);", "+\t\t\t\t} else {", "+\t\t\t\t\tif ((data.style & SWT.RIGHT_TO_LEFT) != 0) {", "+\t\t\t\t\t\tdata.style |= SWT.MIRRORED;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tdata.realDrawable = true;", "+\t\t\t\tdata.drawable = real_drawable [0];", "+\t\t\t\tdata.device = display;", "+\t\t\t\tdata.foreground = getForegroundColor ();", "+\t\t\t\tControl backgroundControl = findBackgroundControl ();", "+\t\t\t\tif (backgroundControl == null) backgroundControl = this;", "+\t\t\t\tdata.background = backgroundControl.getBackgroundColor ();", "+\t\t\t\tdata.font = font != null ? font.handle : defaultFont (); ", "+\t\t\t}", "+\t\t\tEvent event = new Event ();", "+\t\t\tevent.width = width [0];", "+\t\t\tevent.height = height [0];", "+\t\t\tif ((style & SWT.MIRRORED) != 0) event.x = getClientWidth () - event.width - event.x;", "+\t\t\tGC paintGC = event.gc = GC.gtk_new (gdkGC, data);", "+\t\t\tsendEvent (SWT.Paint, event);", "+\t\t\tpaintGC.dispose ();", "+\t\t\tOS.g_object_unref (gdkGC);", "+\t\t}", "+\t}", "+\tint srcX = x_offset [0], srcY = y_offset [0];", "+\tint destX = x, destY = y, destWidth = width [0], destHeight = height [0];", "+\tif (!first) {", "+\t\tint [] cX = new int [1], cY = new int [1];", "+\t\tOS.gdk_window_get_position (window, cX, cY);", "+\t\tint /*long*/ parentWindow = OS.gdk_window_get_parent (window);", "+\t\tint [] pW = new int [1], pH = new int [1];", "+\t\tOS.gdk_drawable_get_size (parentWindow, pW, pH);", "+\t\tsrcX = x_offset [0] - cX [0];", "+\t\tsrcY = y_offset [0] - cY [0];", "+\t\tdestX = x - cX [0];", "+\t\tdestY = y - cY [0];", "+\t\tdestWidth = Math.min (cX [0] + width [0], pW [0]);", "+\t\tdestHeight = Math.min (cY [0] + height [0], pH [0]);", "+\t}", "+\tOS.gdk_draw_drawable (drawable, gc, real_drawable [0], srcX, srcY, destX, destY, destWidth, destHeight);", "-\t\t\t\t\t\tprintWindow (control, gc, drawable, depth, child, x + x_pos [0], y + y_pos [0]);", "+\t\t\t\t\t\tprintWindow (false, control, gc, drawable, depth, child, x + x_pos [0], y + y_pos [0]);"]}], "num": 7301}
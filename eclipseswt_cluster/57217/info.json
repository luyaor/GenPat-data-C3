{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cadb438ec3e8baff4ce9fcd07995c344", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41b43be5af5a9f7a5eafcc1eadfc09d4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "667671ba86e941a67f9a32fff49b72cd98dd7b45", "commitAfterChange": "adba51fd7df111f97fa2ca10d76f397d176f08d1", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": " boolean setItemSize()", "signatureAfterChange": " boolean setItemSize()", "diff": ["-\tint tabAreaWidth = size.x - borderLeft - borderRight - minRect.width - maxRect.width - chevronRect.width;", "+\t\t", "+\t\t\tint totalWidth = 0;", "+\t\t\tint tabAreaWidth = size.x - borderLeft - borderRight - minRect.width - maxRect.width;", "-\t\t\tint averageWidth = tabAreaWidth / count;", "-\t\t\tint oldAverageWidth = 0;", "-\t\t\twhile (averageWidth > oldAverageWidth) {", "-\t\t\t\tint width = tabAreaWidth;", "-\t\t\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\t\t\tif (widths[i] < averageWidth) {", "-\t\t\t\t\t\twidth -= widths[i];", "-\t\t\t\t\t\tcount--;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\toldAverageWidth = averageWidth;", "-\t\t\t\tif (count > 0) {", "-\t\t\t\t\taverageWidth = width / count;", "-\t\t\t\t}", "+\t\t\tfor (int i = 0 ; i < count; i++) {", "+\t\t\t\ttotalWidth += widths[i];", "-\t\t\taverageWidth = Math.max(averageWidth, MIN_TAB_WIDTH * tabHeight);", "-\t\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\t\tif (widths[i] > averageWidth) {", "-\t\t\t\t\twidths[i] = averageWidth;", "+\t\t\tif (totalWidth > tabAreaWidth) {", "+\t\t\t\t// try to compress items", "+\t\t\t\tint minWidth = MIN_TAB_WIDTH * tabHeight;", "+\t\t\t\ttotalWidth = 0;", "+\t\t\t\tint large = 0;", "+\t\t\t\tfor (int i = 0 ; i < count; i++) {", "+\t\t\t\t\ttotalWidth += Math.min(widths[i], minWidth);", "+\t\t\t\t\tif (widths[i] > minWidth) large++;", "+\t\t\t\t}", "+\t\t\t\tif (totalWidth >= tabAreaWidth) {", "+\t\t\t\t\t// maximum compression required", "+\t\t\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\t\t\twidths[i] = Math.min(widths[i], minWidth);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// determine compression for each item", "+\t\t\t\t\tint extra = (tabAreaWidth - totalWidth)/large;", "+\t\t\t\t\twhile (true) {", "+\t\t\t\t\t\ttotalWidth = 0;", "+\t\t\t\t\t\tlarge = 0;", "+\t\t\t\t\t\tfor (int i = 0 ; i < count; i++) {", "+\t\t\t\t\t\t\ttotalWidth += Math.min(widths[i], minWidth + extra);", "+\t\t\t\t\t\t\tif (widths[i] > minWidth + extra) large++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (totalWidth >= tabAreaWidth) {", "+\t\t\t\t\t\t\textra--;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (large == 0 ||tabAreaWidth - totalWidth < large) break;", "+\t\t\t\t\t\textra++;", "+\t\t\t\t\t}", "+\t\t\t\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\t\t\t\twidths[i] = Math.min(widths[i], minWidth + extra);", "+\t\t\t\t\t}\t", "+\tint tabAreaWidth = size.x - borderLeft - borderRight - minRect.width - maxRect.width - chevronRect.width;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30775ee8a2be331887ebe6652459ff6e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "17c25770000eeabd3d2a853aa952a9512ccf690d", "commitAfterChange": "ae3524b4e7213bdc988c847b48af55b6ec06a750", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 119, "signatureBeforeChange": " boolean updateItems(int showIndex)", "signatureAfterChange": " boolean updateItems(int showIndex)", "diff": ["-\t\tint idx = -1;", "-\t\tfor (int i = 0; i < priority.length; i++) {", "-\t\t\tif (priority[i] == showIndex) {", "-\t\t\t\tidx = i;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\tif (priority[idx] > priority[0]) {", "+\t\tint firstIndex = showIndex;", "+\t\tif (priority[0] < showIndex) {", "+\t\t\tint width = 0;", "+\t\t\tint[] widths = new int[items.length];", "-\t\t\tint nextIndex = priority[idx];", "-\t\t\tCTabItem next = items[nextIndex];", "-\t\t\tint width = next.preferredWidth(gc, nextIndex == selectedIndex, true);", "-\t\t\twhile (idx > 1) {", "-\t\t\t\tnextIndex = priority[idx-1];", "-\t\t\t\tnext = items[nextIndex];", "-\t\t\t\twidth += next.preferredWidth(gc, nextIndex == selectedIndex, true);", "+\t\t\tfor (int i = priority[0]; i <= showIndex; i++) {", "+\t\t\t\twidths[i] = items[i].preferredWidth(gc, i == selectedIndex, true);", "+\t\t\t\twidth += widths[i];", "-\t\t\t\tidx--;", "+\t\t\t}", "+\t\t\tif (width > maxWidth) {", "+\t\t\t\twidth = 0;", "+\t\t\t\tfor (int i = showIndex; i >= 0; i--) {", "+\t\t\t\t\tif (widths[i] == 0) widths[i] = items[i].preferredWidth(gc, i == selectedIndex, true);", "+\t\t\t\t\twidth += widths[i];", "+\t\t\t\t\tif (width > maxWidth) break;", "+\t\t\t\t\tfirstIndex = i;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tfirstIndex = priority[0];", "+\t\t\t\tfor (int i = showIndex + 1; i < items.length; i++) {", "+\t\t\t\t\twidths[i] = items[i].preferredWidth(gc, i == selectedIndex, true);", "+\t\t\t\t\twidth += widths[i];", "+\t\t\t\t\tif (width >= maxWidth) break;", "+\t\t\t\t}", "+\t\t\t\tif (width < maxWidth) {", "+\t\t\t\t\tfor (int i = priority[0] - 1; i >= 0; i--) {", "+\t\t\t\t\t\tif (widths[i] == 0) widths[i] = items[i].preferredWidth(gc, i == selectedIndex, true);", "+\t\t\t\t\t\twidth += widths[i];", "+\t\t\t\t\t\tif (width > maxWidth) break;", "+\t\t\t\t\t\tfirstIndex = i;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\tint[] newPriority = new int[priority.length];", "-\t\tSystem.arraycopy(priority, idx, newPriority, 0, priority.length - idx);", "-\t\tSystem.arraycopy(priority, 0, newPriority, priority.length - idx, idx);", "-\t\tpriority = newPriority;", "-}", "+\t\tif (firstIndex != priority[0]) {", "+\t\t\tint index = 0;", "+\t\t\tfor (int i = firstIndex; i < items.length; i++) {", "+\t\t\t\tpriority[index++] = i;", "+\t\t\t}", "+\t\t\tfor (int i = 0; i < firstIndex; i++) {", "+\t\t\t\tpriority[index++] = i;", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 57217}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f3328712db7658433748892679026ec2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e836f207bb51d068fbea7ff301fed27f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 68, "signatureBeforeChange": " void setImageExtent(Point imageExtent)", "signatureAfterChange": " public void setImage (int columnIndex, Image value)", "diff": ["- */", "-void setImageExtent(Point imageExtent) {", "-\tthis.imageExtent = imageExtent;", "-}", "+}", "+public void setImage (int columnIndex, Image value) {", "+\tcheckWidget ();", "+\tif (value != null && value.isDisposed ()) {", "+\t\terror(SWT.ERROR_INVALID_ARGUMENT);", "+\t}", "+\tint validColumnCount = Math.max (1, parent.getColumnCount());", "+\tif (!(0 <= columnIndex && columnIndex < validColumnCount)) return;", "+\tif (images.length < columnIndex + 1) {", "+\t\tImage[] newImages = new Image[columnIndex + 1];", "+\t\tSystem.arraycopy (images, 0, newImages, 0, images.length);", "+\t\timages = newImages;", "+\t} else {", "+\t\tImage current = internalGetImage (columnIndex);", "+\t\tif (current == value) return;\t\t\t\t/* same value */", "+\t\tif (current != null && current.equals (value)) return;", "+\t}", "+\timages[columnIndex] = value;", "+\t/*", "+\t * If this is the first image being put into the table then its item height", "+\t * may be adjusted, in which case a full redraw is needed.", "+\t */", "+\tif (parent.imageHeight == 0) {", "+\t\tint oldItemHeight = parent.getItemHeight ();", "+\t\tparent.setImageHeight (value.getBounds().height);", "+\t\tif (oldItemHeight != parent.getItemHeight ()) {", "+\t\t\tif (columnIndex == 0) {", "+\t\t\t\tparent.col0ImageWidth = value.getBounds ().width;", "+\t\t\t}", "+\t\t\tparent.redraw ();", "+\t\t\treturn;", "+\t\t}", "+\t}", "+", "+\t/* ", "+\t * If this is the first image being put into column 0 then all cells", "+\t * in the column should also indent accordingly. ", "+\t */", "+\tif (columnIndex == 0 && parent.col0ImageWidth == 0) {", "+\t\tparent.col0ImageWidth = value.getBounds ().width;", "+\t\t/* redraw the column */", "+\t\tif (parent.getColumnCount () == 0) {", "+\t\t\tparent.redraw ();", "+\t\t} else {", "+\t\t\tparent.redraw (", "+\t\t\t\t0, 0,", "+\t\t\t\tparent.getColumn (0).getWidth (),", "+\t\t\t\tparent.getClientArea ().height,", "+\t\t\t\ttrue);", "+\t\t}", "+\t}", "+\tredrawItem ();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eff9e2c0e8bb26101a90c815f0398efe", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 53, "signatureBeforeChange": " public void setImage (int columnIndex, Image value)", "signatureAfterChange": " void setImageExtent(Point imageExtent)", "diff": ["+ */", "+void setImageExtent(Point imageExtent) {", "+\tthis.imageExtent = imageExtent;", "+}", "-}", "-public void setImage (int columnIndex, Image value) {", "-\tcheckWidget ();", "-\tif (value != null && value.isDisposed ()) {", "-\t\terror(SWT.ERROR_INVALID_ARGUMENT);", "-\t}", "-\tint validColumnCount = Math.max (1, parent.getColumnCount());", "-\tif (!(0 <= columnIndex && columnIndex < validColumnCount)) return;", "-\tif (images.length < columnIndex + 1) {", "-\t\tImage[] newImages = new Image[columnIndex + 1];", "-\t\tSystem.arraycopy (images, 0, newImages, 0, images.length);", "-\t\timages = newImages;", "-\t} else {", "-\t\tImage current = internalGetImage (columnIndex);", "-\t\tif (current == value) return;\t\t\t\t/* same value */", "-\t\tif (current != null && current.equals (value)) return;", "-\t}", "-\timages[columnIndex] = value;", "-", "-\t/*", "-\t * If this is the first image being put into the table then its item height", "-\t * may be adjusted, in which case a full redraw is needed.", "-\t */", "-\tif (parent.imageHeight == 0) {", "-\t\tint oldItemHeight = parent.getItemHeight ();", "-\t\tparent.setImageHeight (value.getBounds().height);", "-\t\tif (oldItemHeight != parent.getItemHeight ()) {", "-\t\t\tif (columnIndex == 0) {", "-\t\t\t\tparent.col0ImageWidth = value.getBounds ().width;", "-\t\t\t}", "-\t\t\tparent.redraw ();", "-\t\t\treturn;", "-\t\t}", "-\t}", "-", "-\t/* ", "-\t * If this is the first image being put into column 0 then all cells", "-\t * in the column should also indent accordingly. ", "-\t */", "-\tif (columnIndex == 0 && parent.col0ImageWidth == 0) {", "-\t\tparent.col0ImageWidth = value.getBounds ().width;", "-\t\t/* redraw the column */", "-\t\tif (parent.getColumnCount () == 0) {", "-\t\t\tparent.redraw ();", "-\t\t} else {", "-\t\t\tparent.redraw (", "-\t\t\t\t0, 0,", "-\t\t\t\tparent.getColumn (0).getWidth (),", "-\t\t\t\tparent.getClientArea ().height,", "-\t\t\t\ttrue);", "-\t\t}", "-\t}", "-\tredrawItem ();", "-}"]}], "num": 59794}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a2ce3de0d1a04d6b96df66e1d66cfd6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "131f3d35433f114f6759edaf8daf2e97", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ea4fef6aff230feee5651ff5fc76a624289386f8", "commitAfterChange": "37b39338852bbb3626c259b29c92ff26274598d8", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 141, "signatureBeforeChange": "  int windowProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int windowProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["-\t\t//TEMPORARY CODE", "-\t\tif (hooks (SWT.EraseItem) || hooks (SWT.PaintItem)) return 0;", "-\t\tif ((style & SWT.MULTI) != 0) {", "-\t\t\tif (getSelectionCount () != 1) return 0;", "+\t\tif (getSelectionCount () != 1 || hooks (SWT.EraseItem) || hooks (SWT.PaintItem)) {", "+\t\t\tPOINT mousePos = new POINT ();", "+\t\t\tOS.POINTSTOPOINT (mousePos, OS.GetMessagePos ());", "+\t\t\tOS.MapWindowPoints (0, handle, mousePos, 1);", "+\t\t\tRECT clientRect = new RECT ();", "+\t\t\tOS.GetClientRect(handle, clientRect);", "+\t\t\tint /*long*/ hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_FIRSTVISIBLE, 0);", "+\t\t\tTreeItem [] items = new TreeItem [10];", "+\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\ttvItem.mask = OS.TVIF_HANDLE | OS.TVIF_PARAM | OS.TVIF_STATE;", "+\t\t\tint count = getSelection (hItem, tvItem, items, 0, 10, false, true);", "+\t\t\tRECT rect = items [0].getBounds (0, true, false, false);", "+\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\tint width = DRAG_IMAGE_SIZE;", "+\t\t\t\trect.left = Math.max (clientRect.left, mousePos.x - width / 2);", "+\t\t\t\tif (clientRect.right > rect.left + width) {", "+\t\t\t\t\trect.right = rect.left + width;", "+\t\t\t\t} else {", "+\t\t\t\t\trect.right = clientRect.right;", "+\t\t\t\t\trect.left = Math.max (clientRect.left, rect.right - width);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tint /*long*/ hRgn = OS.CreateRectRgn (rect.left, rect.top, rect.right, rect.bottom);", "+\t\t\tfor (int i = 1; i < count; i++) {", "+\t\t\t\tif (rect.bottom - rect.top > DRAG_IMAGE_SIZE) break;", "+\t\t\t\tif (rect.bottom > clientRect.bottom) break;", "+\t\t\t\tRECT itemRect = items[i].getBounds (0, true, false, false);", "+\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\titemRect.left = rect.left;", "+\t\t\t\t\titemRect.right = rect.right;", "+\t\t\t\t}", "+\t\t\t\tint /*long*/ rectRgn = OS.CreateRectRgn (itemRect.left, itemRect.top, itemRect.right, itemRect.bottom);", "+\t\t\t\tOS.CombineRgn (hRgn, hRgn, rectRgn, OS.RGN_OR);", "+\t\t\t\tOS.DeleteObject (rectRgn);", "+\t\t\t\trect.bottom = itemRect.bottom;", "+\t\t\t\t", "+\t\t\t}", "+\t\t\tOS.GetRgnBox (hRgn, rect);", "+\t\t\t", "+\t\t\t/* Create resources */", "+\t\t\tint /*long*/ hdc = OS.GetDC (handle);", "+\t\t\tint /*long*/ memHdc = OS.CreateCompatibleDC (hdc);", "+\t\t\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER ();", "+\t\t\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;", "+\t\t\tbmiHeader.biWidth = rect.right - rect.left;", "+\t\t\tbmiHeader.biHeight = -(rect.bottom - rect.top);", "+\t\t\tbmiHeader.biPlanes = 1;", "+\t\t\tbmiHeader.biBitCount = 32;", "+\t\t\tbmiHeader.biCompression = OS.BI_RGB;", "+\t\t\tbyte []\tbmi = new byte [BITMAPINFOHEADER.sizeof];", "+\t\t\tOS.MoveMemory (bmi, bmiHeader, BITMAPINFOHEADER.sizeof);", "+\t\t\tint /*long*/ [] pBits = new int /*long*/ [1];", "+\t\t\tint /*long*/ memDib = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "+\t\t\tif (memDib == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\t\t\tint /*long*/ oldMemBitmap = OS.SelectObject (memHdc, memDib);", "+\t\t\tPOINT pt = new POINT ();", "+\t\t\tOS.OffsetRgn (hRgn, -rect.left, -rect.top);", "+\t\t\tOS.SelectClipRgn (memHdc, hRgn);", "+\t\t\tOS.SetWindowOrgEx (memHdc, rect.left, rect.top, pt);", "+\t\t\tOS.PrintWindow (handle, memHdc, 0);", "+\t\t\tOS.SetWindowOrgEx (memHdc, pt.x, pt.y, null);", "+\t\t\tOS.SelectObject (memHdc, oldMemBitmap);", "+\t\t\tOS.DeleteDC (memHdc);", "+\t\t\tOS.ReleaseDC (0, hdc);", "+\t\t\tOS.DeleteObject (hRgn);", "+", "+\t\t\tSHDRAGIMAGE shdi = new SHDRAGIMAGE ();", "+\t\t\tshdi.hbmpDragImage = memDib;", "+\t\t\tshdi.sizeDragImage.cx = bmiHeader.biWidth;", "+\t\t\tshdi.sizeDragImage.cy = -bmiHeader.biHeight;", "+\t\t\tshdi.ptOffset.x = mousePos.x - rect.left;", "+\t\t\tshdi.ptOffset.y = mousePos.y - rect.top;", "+\t\t\tif ((style & SWT.MIRRORED) != 0) {", "+\t\t\t\tshdi.ptOffset.x = shdi.sizeDragImage.cx - shdi.ptOffset.x; ", "+\t\t\t}", "+\t\t\tOS.MoveMemory (lParam, shdi, SHDRAGIMAGE.sizeof);", "+\t\t\treturn 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "578a000493082eb96b759ee00bd38fa5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ea4fef6aff230feee5651ff5fc76a624289386f8", "commitAfterChange": "37b39338852bbb3626c259b29c92ff26274598d8", "methodNumberBeforeChange": 133, "methodNumberAfterChange": 133, "signatureBeforeChange": "  int windowProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int windowProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["-\t\t* Bug in Windows.  For some reason, DI_GETDRAGIMAGE", "+\t\t* Bug in Windows.  On Vista, for some reason, DI_GETDRAGIMAGE", "-\t\t* The fix is to disable the table window proc.", "-\t\t* NOTE: This only happens on Vista.", "+\t\t* Bug in Windows. For custom draw control the window origin the ", "+\t\t* in HDC is wrong.", "+\t\t* ", "+\t\t* The fix for both cases is to create the image using PrintWindow(). ", "-\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) return 0;", "-\t\t//TEMPORARY CODE", "-\t\tif (hooks (SWT.EraseItem) || hooks (SWT.PaintItem)) return 0;", "-//\t\tif (getSelectionCount () != 1) return 0;", "+\t\tif ((!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) || hooks (SWT.EraseItem) || hooks (SWT.PaintItem)) {", "+\t\t\tPOINT mousePos = new POINT ();", "+\t\t\tOS.POINTSTOPOINT (mousePos, OS.GetMessagePos ());", "+\t\t\tOS.MapWindowPoints(0, handle, mousePos, 1);", "+\t\t\tRECT clientRect = new RECT ();", "+\t\t\tOS.GetClientRect (handle, clientRect);", "+\t\t\tint topIndex = (int)/*64*/OS.SendMessage (handle, OS.LVM_GETTOPINDEX, 0, 0);", "+\t\t\tint selection = (int)/*64*/OS.SendMessage (handle, OS.LVM_GETNEXTITEM, topIndex - 1, OS.LVNI_SELECTED);", "+\t\t\tTableItem item = _getItem (selection);", "+\t\t\tRECT rect = item.getBounds (selection, 0, true, true, true);", "+\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\tint width = DRAG_IMAGE_SIZE;", "+\t\t\t\trect.left = Math.max (clientRect.left, mousePos.x - width / 2);", "+\t\t\t\tif (clientRect.right > rect.left + width) {", "+\t\t\t\t\trect.right = rect.left + width;", "+\t\t\t\t} else {", "+\t\t\t\t\trect.right = clientRect.right;", "+\t\t\t\t\trect.left = Math.max (clientRect.left, rect.right - width);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tint /*long*/ hRgn = OS.CreateRectRgn (rect.left, rect.top, rect.right, rect.bottom);", "+\t\t\twhile ((selection = (int)/*64*/OS.SendMessage (handle, OS.LVM_GETNEXTITEM, selection, OS.LVNI_SELECTED)) != -1) {", "+\t\t\t\tif (rect.bottom - rect.top > DRAG_IMAGE_SIZE) break;", "+\t\t\t\tif (rect.bottom > clientRect.bottom) break;", "+\t\t\t\tRECT itemRect = item.getBounds (selection, 0, true, true, true);", "+\t\t\t\tint /*long*/ rectRgn = OS.CreateRectRgn (rect.left, itemRect.top, rect.right, itemRect.bottom);", "+\t\t\t\tOS.CombineRgn (hRgn, hRgn, rectRgn, OS.RGN_OR);", "+\t\t\t\tOS.DeleteObject (rectRgn);", "+\t\t\t\trect.bottom = itemRect.bottom;", "+\t\t\t}", "+\t\t\tOS.GetRgnBox (hRgn, rect);", "+\t\t\t", "+\t\t\t/* Create resources */", "+\t\t\tint /*long*/ hdc = OS.GetDC (handle);", "+\t\t\tint /*long*/ memHdc = OS.CreateCompatibleDC (hdc);", "+\t\t\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER ();", "+\t\t\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;", "+\t\t\tbmiHeader.biWidth = rect.right - rect.left;", "+\t\t\tbmiHeader.biHeight = -(rect.bottom - rect.top);", "+\t\t\tbmiHeader.biPlanes = 1;", "+\t\t\tbmiHeader.biBitCount = 32;", "+\t\t\tbmiHeader.biCompression = OS.BI_RGB;", "+\t\t\tbyte []\tbmi = new byte [BITMAPINFOHEADER.sizeof];", "+\t\t\tOS.MoveMemory (bmi, bmiHeader, BITMAPINFOHEADER.sizeof);", "+\t\t\tint /*long*/ [] pBits = new int /*long*/ [1];", "+\t\t\tint /*long*/ memDib = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "+\t\t\tif (memDib == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\t\t\tint /*long*/ oldMemBitmap = OS.SelectObject (memHdc, memDib);", "+\t\t\tPOINT pt = new POINT();", "+\t\t\tOS.OffsetRgn (hRgn, -rect.left, -rect.top);", "+\t\t\tOS.SelectClipRgn (memHdc, hRgn);", "+\t\t\tOS.SetWindowOrgEx (memHdc, rect.left, rect.top, pt);", "+\t\t\tOS.PrintWindow (handle, memHdc, 0);", "+\t\t\tOS.SetWindowOrgEx (memHdc, pt.x, pt.y, null);", "+\t\t\tOS.SelectObject (memHdc, oldMemBitmap);", "+\t\t\tOS.DeleteDC (memHdc);", "+\t\t\tOS.ReleaseDC (0, hdc);", "+\t\t\tOS.DeleteObject (hRgn);", "+\t\t\t", "+\t\t\tSHDRAGIMAGE shdi = new SHDRAGIMAGE ();", "+\t\t\tshdi.hbmpDragImage = memDib;", "+\t\t\tshdi.sizeDragImage.cx = bmiHeader.biWidth;", "+\t\t\tshdi.sizeDragImage.cy = -bmiHeader.biHeight;", "+\t\t\tshdi.ptOffset.x = mousePos.x - rect.left;", "+\t\t\tshdi.ptOffset.y = mousePos.y - rect.top;", "+\t\t\tif ((style & SWT.MIRRORED) != 0) {", "+\t\t\t\tshdi.ptOffset.x = shdi.sizeDragImage.cx - shdi.ptOffset.x; ", "+\t\t\t}", "+\t\t\tOS.MoveMemory (lParam, shdi, SHDRAGIMAGE.sizeof);", "+\t\t\treturn 1;", "+\t\t}"]}], "num": 56976}
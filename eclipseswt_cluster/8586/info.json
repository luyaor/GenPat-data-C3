{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d64a284735a3af569232186780bff2d2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41d1c6381eb2227040651ed4f8686d83", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_List.java", "commitBeforeChange": "34b48a1450d691429218250a2c0b9f1d585dff6c", "commitAfterChange": "6c48129efab113803ef6d6a35457b5eb7eea82a5", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "  public void test_setSelection$I()", "signatureAfterChange": "  public void test_setSelection$I()", "diff": ["-\tassertEquals(\"MULTI: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"MULTI: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"MULTI: setSelection(new int [] {2})\", list.getSelectionIndices(), new int[] {2});", "+\tassertArrayEquals(\"MULTI: setSelection(new int [] {2})\", list.getSelectionIndices(), new int[] {2});", "-\tassertEquals(\"MULTI: setSelection(new int [] {number})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"MULTI: setSelection(new int [] {number})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"MULTI: setSelection(new int [] {-1, number})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"MULTI: setSelection(new int [] {-1, number})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"MULTI: setSelection(new int [] {number - 1, number})\", list.getSelectionIndices(), new int[] {number - 1});", "+\tassertArrayEquals(\"MULTI: setSelection(new int [] {number - 1, number})\", list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(\"MULTI: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[] {0});", "+\tassertArrayEquals(\"MULTI: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[] {0});", "-\tassertEquals(\"MULTI: setSelection(new int [] {number, number})\", new int[0], list.getSelectionIndices());", "+\tassertArrayEquals(\"MULTI: setSelection(new int [] {number, number})\", new int[0], list.getSelectionIndices());", "-\tassertEquals(\"MULTI: setSelection(new int [] {number - 1, number - 1})\", list.getSelectionIndices(), new int[] {number - 1});", "+\tassertArrayEquals(\"MULTI: setSelection(new int [] {number - 1, number - 1})\", list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(\"EMPTY MULTI: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY MULTI: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {0})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY MULTI: setSelection(new int [] {0})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {-1})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY MULTI: setSelection(new int [] {-1})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {0, 0})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY MULTI: setSelection(new int [] {0, 0})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY MULTI: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY MULTI: setSelection(new int [] {0, -1})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY MULTI: setSelection(new int [] {0, -1})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"SINGLE: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"SINGLE: setSelection(new int [] {2})\", list.getSelectionIndices(), new int[] {2});", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {2})\", list.getSelectionIndices(), new int[] {2});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {number})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"SINGLE: setSelection(new int [] {1, 0})\", list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {1, 0})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {0, 1, 2, 3, 5})\", list.getSelectionIndices(), new int [] {});", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {0, 1, 2, 3, 5})\", list.getSelectionIndices(), new int [] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {-1, number})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {-1, number})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number})\", list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {number - 1, number})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(indices)\", list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(\"SINGLE: setSelection(indices)\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number, number})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {number, number})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number - 1})\", list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {number - 1, number - 1})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {0, number, 1})\", list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {0, number, 1})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, 0, number - 2})\", list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(\"SINGLE: setSelection(new int [] {number - 1, 0, number - 2})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"EMPTY SINGLE: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY SINGLE: setSelection(new int [0])\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {0})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY SINGLE: setSelection(new int [] {0})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {-1})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY SINGLE: setSelection(new int [] {-1})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {0, 0})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY SINGLE: setSelection(new int [] {0, 0})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY SINGLE: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[0]);", "-\tassertEquals(\"EMPTY SINGLE: setSelection(new int [] {0, -1})\", list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(\"EMPTY SINGLE: setSelection(new int [] {0, -1})\", list.getSelectionIndices(), new int[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b21b58726f341352b6b67e410ccae4b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_List.java", "commitBeforeChange": "34b48a1450d691429218250a2c0b9f1d585dff6c", "commitAfterChange": "6c48129efab113803ef6d6a35457b5eb7eea82a5", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "  public void test_setSelectionII()", "signatureAfterChange": "  public void test_setSelectionII()", "diff": ["-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(list.getSelectionIndices(), new int[] {0});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {0});", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[] {0});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {0});", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[] {0});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {0});", "-\tassertEquals(list.getSelectionIndices(), new int[] {1});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {1});", "-\tassertEquals(list.getSelectionIndices(), new int[] {4});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {4});", "-\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});"]}], "num": 8586}
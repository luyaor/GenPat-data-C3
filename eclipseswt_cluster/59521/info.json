{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c5ce04a7dcd04f86a19abae0e9c27a8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "737791a4ff723e5490f6ea4222965a34", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "7626dd6837c79b3d44c889ada194bd6cf6fefbaf", "commitAfterChange": "f490c340b8fb06c8878d22853dfd8ecb77079ee9", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "  boolean setScrollWidth (TreeItem[] items, boolean recurse, boolean callMeasureItem, boolean isAllItems)", "signatureAfterChange": "  boolean setScrollWidth (TreeItem item)", "diff": ["-", "-boolean setScrollWidth (TreeItem[] items, boolean recurse, boolean callMeasureItem, boolean isAllItems) {", "-\tif (columnCount != 0) return false;", "-//\tif (currentItem != null) {", "-//\t\tif (currentItem != item) fixScrollWidth = true;", "-//\t\treturn false;", "-//\t}", "-\tif (/*ignoreRedraw ||*/ drawCount != 0) return false;", "-\tint newWidth = 0;", "-\tfor (int i = 0; i < items.length; i++) {", "-\t\tTreeItem item = items[i];", "-\t\tif (item != null && !item.isDisposed ()) {", "-\t\t\tnewWidth = Math.max (newWidth, item.calculateWidth (0, gc, recurse, callMeasureItem));", "-\t\t\tif (isDisposed ()) {", "-\t\t\t\tgc.dispose ();", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t}", "-\t}", "-\t/*", "-\t * update the column width either if it needs to grow, or if all items in the Tree", "-\t * were measured (in which case it is safe to shrink the column if appropriate)", "-\t */", "-\tif ((firstColumn.width () < newWidth) || (isAllItems && recurse)) {", "-\t\tfirstColumn.setWidth (newWidth);", "+boolean setScrollWidth (TreeItem item) {", "+\tif (ignoreRedraw || drawCount != 0) return false;", "+\tif (columnCount != 0) return false;", "+\tTreeItem parentItem = item.parentItem;", "+\tif (parentItem != null && !parentItem.getExpanded ()) return false;", "+\tGC gc = new GC (this);", "+\tint newWidth = item.calculateWidth (0, gc);", "+\tgc.dispose ();", "+\tint oldWidth = (int)firstColumn.width ();", "+\tif (oldWidth < newWidth) {", "+\t\tfirstColumn.setWidth (newWidth);", "+\t\treturn true;", "+\t}", "+\treturn false;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e48184dfc58d76c7c4cdea7ba7342524", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "b12a0685cf8f3a3f3655b377dae11b353df34bc5", "commitAfterChange": "f86cb451dd44bdb3dd3f72edaedea4c9f49ce379", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": "  Control findControl (NSEvent nsEvent, boolean checkGrab, boolean checkTrim, boolean checkWindows)", "signatureAfterChange": "  Control findControl (boolean checkTrim)", "diff": ["-Control findControl (NSEvent nsEvent, boolean checkGrab, boolean checkTrim, boolean checkWindows) {", "-\tif (checkGrab && grabControl != null && !grabControl.isDisposed()) return grabControl;", "-\tNSPoint point = NSEvent.mouseLocation();", "+Control findControl (boolean checkTrim) {", "-\tNSWindow window = nsEvent != null ? nsEvent.window() : null;", "- \tif (window != null) {", "+\tNSPoint screenLocation = NSEvent.mouseLocation();", "+\tNSArray windows = application.orderedWindows();", "+\tfor (int i = 0, count = (int)/*64*/windows.count(); i < count && view == null; i++) {", "+\t\tNSWindow window = new NSWindow(windows.objectAtIndex(i));", "-\t\tif (contentView != null) view = contentView.hitTest (window.convertScreenToBase(point));", "-\t}", "-\tif (view == null && checkWindows) {", "-\t\tNSArray windows = application.orderedWindows();", "-\t\tfor (int i = 0; i < windows.count() && view == null; i++) {", "-\t\t\twindow = new NSWindow(windows.objectAtIndex(i));", "-\t\t\tNSView contentView = window.contentView();", "-\t\t\tif (contentView != null) view = contentView.hitTest (window.convertScreenToBase(point));", "-\t\t}", "+\t\tif (contentView != null && OS.NSPointInRect(screenLocation, window.frame())) {", "+\t\t\tNSPoint location = window.convertScreenToBase(screenLocation);", "+\t\t\tview = contentView.hitTest (location);", "+\t\t\tif (view == null && !checkTrim) {", "+\t\t\t\tview = contentView;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}\t\t\t"]}], "num": 59521}
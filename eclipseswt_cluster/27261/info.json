{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b13f53e90d7b385b1b5a864babd441bf", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d466a64b9edaaef2713bb212d372fd66", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "6122989045357f961a964dee75c97dc5a0234ee7", "commitAfterChange": "7622ffa887cfbcd10aa3d1084d2e29b8a1464cdd", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " \t \tint get_accDescription(int varChild_vt, int varChild_reserved1, int varChild_lVal, int varChild_reserved2, int pszDescription)", "signatureAfterChange": " \t \tint get_accDescription(int varChild_vt, int varChild_reserved1, int varChild_lVal, int varChild_reserved2, int pszDescription)", "diff": ["-\t\tif (accessibleListeners.size() == 0) return code;", "+\t\t// TEMPORARY CODE - process tree even if there are no apps listening", "+\t\tif (accessibleListeners.size() == 0 && !(control instanceof Tree)) return code;", "+\t\t", "+\t\t// TEMPORARY CODE", "+\t\t/* Currently our tree columns are emulated using custom draw,", "+\t\t * so we need to create the description using the tree column", "+\t\t * header text and tree item text. */", "+\t\tif (varChild_lVal != COM.CHILDID_SELF) {", "+\t\t\tif (control instanceof Tree) {", "+\t\t\t\tTree tree = (Tree) control;", "+\t\t\t\tint columnCount = tree.getColumnCount ();", "+\t\t\t\tif (columnCount > 1) {", "+\t\t\t\t\tint hwnd = control.handle, hItem = 0;", "+\t\t\t\t\tif (OS.COMCTL32_MAJOR >= 6) {", "+\t\t\t\t\t\thItem = OS.SendMessage (hwnd, OS.TVM_MAPACCIDTOHTREEITEM, varChild_lVal, 0);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\thItem = varChild_lVal;", "+\t\t\t\t\t}", "+\t\t\t\t\tWidget widget = tree.getDisplay ().findWidget (hwnd, hItem);", "+\t\t\t\t\tevent.result = \"\";", "+\t\t\t\t\tif (widget != null && widget instanceof TreeItem) {", "+\t\t\t\t\t\tTreeItem item = (TreeItem) widget;", "+\t\t\t\t\t\tfor (int i = 1; i < columnCount; i++) {", "+\t\t\t\t\t\t\tevent.result += tree.getColumn(i).getText() + \": \" + item.getText(i);", "+\t\t\t\t\t\t\tif (i + 1 < columnCount) event.result += \", \";", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "414bf8cec7faa28114c2a25d79226e4b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "400a41972553b6a4188a913a649f045d7101753f", "commitAfterChange": "c4d7ef9fa9d180a8b347ee889da144e25eaab670", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": " public boolean sleep ()", "signatureAfterChange": " public boolean sleep ()", "diff": ["-//\tint display_fd = OS.ConnectionNumber (xDisplay);", "-//\tint max_fd = display_fd > read_fd ? display_fd : read_fd;", "-//\tdo {", "-//\t\tOS.FD_ZERO (fd_set);", "-//\t\tOS.FD_SET (display_fd, fd_set);", "-//\t\tOS.FD_SET (read_fd, fd_set);", "-//\t\ttimeout [0] = 0;", "-//\t\ttimeout [1] = 100000;", "-//\t\tif (OS.select (max_fd + 1, fd_set, null, null, timeout) != 0) break;", "-//\t\tif (getMessageCount () != 0) return true;", "-//\t\tint xtContext = OS.XtDisplayToApplicationContext (xDisplay);", "-//\t\tif (OS.XtAppPending (xtContext) != 0) return true;", "-//\t} while (true);", "-//\treturn OS.FD_ISSET (display_fd, fd_set);", "-", "-\t//TODO need to sleep waiting for the next event", "+\tint result;", "+\tint display_fd = OS.ConnectionNumber (xDisplay);", "+\tint max_fd = display_fd > read_fd ? display_fd : read_fd;", "-\t\tif (getMessageCount () != 0) break;", "-\t\tif (OS.XtAppPending (xtContext) != 0) return true;", "-\t\ttry {", "+\t\tOS.FD_ZERO (fd_set);", "+\t\tOS.FD_SET (display_fd, fd_set);", "+\t\tOS.FD_SET (read_fd, fd_set);", "+\t\ttimeout [0] = 0;", "+\t\ttimeout [1] = 100000;", "+\t\t/* Exit the OS lock to allow other threads to enter GTK */", "+\t\tint count = Callback.getEntryCount ();", "+\t\tfor (int i = 0; i < count; i++) {", "-\t\t\t\tOS_LOCK.wait (50);", "+\t\t\t\tOS.MonitorExit (OS_LOCK);", "-\t\t} catch (Exception e) {", "-\t\t\treturn false;", "-\t} while (true);", "-\treturn true;", "+\t\ttry {", "+\t\t\tresult = OS.select (max_fd + 1, fd_set, null, null, timeout);", "+\t\t} finally {", "+\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\tsynchronized (OS_LOCK) {", "+\t\t\t\t\tOS.MonitorEnter (OS_LOCK);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t} while (result == 0 && OS.XtAppPending (xtContext) == 0 && getMessageCount () == 0);", "+\treturn OS.FD_ISSET (display_fd, fd_set);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d74ab3985fa2a98b586e280fc5fd5178", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "409208d6d4b1a68eff6380851a4426d1f663d5c1", "commitAfterChange": "c407d3ccf9bd8bcf88b474a11dfc54ec1f4f35c9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+\tupdateLayout (parent.handle);", "+\tif (columnCount == 0) { // pack the default column", "+\t\tdouble width = 0;", "+\t\tint columns = OS.GridView_Columns (gridViewHandle);", "+\t\tint column = OS.GridViewColumnCollection_default (columns, 0);", "+\t\tOS.GCHandle_Free (columns);", "+\t\tint columnHeader = OS.GridViewColumn_Header (column);", "+\t\tif (columnHeader != 0) {", "+\t\t\tint size = OS.UIElement_DesiredSize (columnHeader);", "+\t\t\twidth = OS.Size_Width (size);", "+\t\t\tOS.GCHandle_Free (size);", "+\t\t\tOS.GCHandle_Free (columnHeader);", "+\t\t}", "+\t\tint items = OS.ItemsControl_Items (handle);", "+\t\tfor (int i=0; i<itemCount; i++) {", "+\t\t\tTableItem item = getItem (items, i, false);", "+\t\t\tif (item != null) width = Math.max (width, item.computeWidth (0));", "+\t\t}", "+\t\tOS.GCHandle_Free (items);", "+\t\tOS.GridViewColumn_Width (column, width);", "+\t\tOS.GCHandle_Free (column);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5367bd97e3260a6f7c432ff99c606902", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/DirectoryDialog.java", "commitBeforeChange": "00d380d8afe6cdf3418db077938169eb2149ff89", "commitAfterChange": "81b0820b14e5ac2abe1fc2bae3347a5c29ba0b51", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public String open ()", "signatureAfterChange": " public String open ()", "diff": ["-//\tif (OS.IsWinCE) SWT.error (SWT.ERROR_NOT_IMPLEMENTED);", "-//\t", "-//\tint hHeap = OS.GetProcessHeap ();", "-//\t", "-//\t/* Get the owner HWND for the dialog */", "-//\tint hwndOwner = 0;", "-//\tif (parent != null) hwndOwner = parent.handle;", "-//", "-//\t/* Copy the message to OS memory */", "-//\tint lpszTitle = 0;", "-//\tif (message.length () != 0) {", "-//\t\tString string = message;", "-//\t\tif (string.indexOf ('&') != -1) {", "-//\t\t\tint length = string.length ();", "-//\t\t\tchar [] buffer = new char [length * 2];", "-//\t\t\tint index = 0;", "-//\t\t\tfor (int i=0; i<length; i++) {", "-//\t\t\t\tchar ch = string.charAt (i);", "-//\t\t\t\tif (ch == '&') buffer [index++] = '&';", "-//\t\t\t\tbuffer [index++] = ch;", "-//\t\t\t}", "-//\t\t\tstring = new String (buffer, 0, index);", "-//\t\t}", "-//\t\t/* Use the character encoding for the default locale */", "-//\t\tTCHAR buffer = new TCHAR (0, string, true);", "-//\t\tint byteCount = buffer.length () * TCHAR.sizeof;", "-//\t\tlpszTitle = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, byteCount);", "-//\t\tOS.MoveMemory (lpszTitle, buffer, byteCount);", "-//\t}", "-//", "-//\t/* Create the BrowseCallbackProc */", "-//\tCallback callback = new Callback (this, \"BrowseCallbackProc\", 4); //$NON-NLS-1$", "-//\tint address = callback.getAddress ();", "-//\tif (address == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "-//\t", "-//\t/* Make the parent shell be temporary modal */", "-//\tShell oldModal = null;", "-//\tDisplay display = parent.getDisplay ();", "-//\tif ((style & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "-//\t\toldModal = display.getModalDialogShell ();", "-//\t\tdisplay.setModalDialogShell (parent);", "-//\t}", "-//\t", "-//\tdirectoryPath = null;", "-//\tBROWSEINFO lpbi = new BROWSEINFO ();", "-//\tlpbi.hwndOwner = hwndOwner;", "-//\tlpbi.lpszTitle = lpszTitle;", "-//\tlpbi.ulFlags = OS.BIF_NEWDIALOGSTYLE | OS.BIF_RETURNONLYFSDIRS | OS.BIF_EDITBOX | OS.BIF_VALIDATE;", "-//\tlpbi.lpfn = address;", "-//\t/*", "-//\t* Bug in Windows.  On some hardware configurations, SHBrowseForFolder()", "-//\t* causes warning dialogs with the message \"There is no disk in the drive", "-//\t* Please insert a disk into \\Device\\Harddisk0\\DR0\".  This is possibly", "-//\t* caused by SHBrowseForFolder() calling internally GetVolumeInformation().", "-//\t* MSDN for GetVolumeInformation() says:", "-//\t* ", "-//\t* \"If you are attempting to obtain information about a floppy drive", "-//\t* that does not have a floppy disk or a CD-ROM drive that does not ", "-//\t* have a compact disc, the system displays a message box asking the ", "-//\t* user to insert a floppy disk or a compact disc, respectively. ", "-//\t* To prevent the system from displaying this message box, call the ", "-//\t* SetErrorMode function with SEM_FAILCRITICALERRORS.\"", "-//\t* ", "-//\t* The fix is to save and restore the error mode using SetErrorMode()", "-//\t* with the SEM_FAILCRITICALERRORS flag around SHBrowseForFolder().", "-//\t*/", "-//\tint oldErrorMode = OS.SetErrorMode (OS.SEM_FAILCRITICALERRORS);", "-//\t", "-//\t/*", "-//\t* Bug in Windows.  When a WH_MSGFILTER hook is used to run code", "-//\t* during the message loop for SHBrowseForFolder(), running code", "-//\t* in the hook can cause a GP.  Specifically, SetWindowText()", "-//\t* for static controls seemed to make the problem happen.", "-//\t* The fix is to disable async messages while the directory", "-//\t* dialog is open.", "-//\t* ", "-//\t* NOTE:  This only happens in versions of the comctl32.dll", "-//\t* earlier than 6.0.", "-//\t*/", "-//\tboolean oldRunMessages = display.runMessages;", "-//\tif (OS.COMCTL32_MAJOR < 6) display.runMessages = false;", "-//\tint lpItemIdList = OS.SHBrowseForFolder (lpbi);", "-//\tif (OS.COMCTL32_MAJOR < 6) display.runMessages = oldRunMessages;", "-//\tOS.SetErrorMode (oldErrorMode);", "-//\t", "-//\t/* Clear the temporary dialog modal parent */", "-//\tif ((style & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "-//\t\tdisplay.setModalDialogShell (oldModal);", "-//\t}", "-//\t", "-//\tboolean success = lpItemIdList != 0;", "-//\tif (success) {", "-//\t\t/* Use the character encoding for the default locale */", "-//\t\tTCHAR buffer = new TCHAR (0, OS.MAX_PATH);", "-//\t\tif (OS.SHGetPathFromIDList (lpItemIdList, buffer)) {", "-//\t\t\tdirectoryPath = buffer.toString (0, buffer.strlen ());", "-//\t\t\tfilterPath = directoryPath;", "-//\t\t}", "-//\t}", "-//", "-//\t/* Free the BrowseCallbackProc */", "-//\tcallback.dispose ();", "-//\t", "-//\t/* Free the OS memory */", "-//\tif (lpszTitle != 0) OS.HeapFree (hHeap, 0, lpszTitle);", "-//", "-//\t/* Free the pointer to the ITEMIDLIST */", "-//\tint [] ppMalloc = new int [1];", "-//\tif (OS.SHGetMalloc (ppMalloc) == OS.S_OK) {", "-//\t\t/* void Free (struct IMalloc *this, void *pv); */", "-//\t\tOS.VtblCall (5, ppMalloc [0], lpItemIdList);", "-//\t}", "-//\t", "-//\t/*", "-//\t* This code is intentionally commented.  On some", "-//\t* platforms, the owner window is repainted right", "-//\t* away when a dialog window exits.  This behavior", "-//\t* is currently unspecified.", "-//\t*/", "-////\tif (hwndOwner != 0) OS.UpdateWindow (hwndOwner);", "-//\t", "-//\t/* Return the directory path */", "-//\tif (!success) return null;", "-//\treturn directoryPath;", "-\treturn null;", "+\tint dialog = OS.gcnew_FolderBrowserDialog ();", "+\tif (dialog == 0) error (SWT.ERROR_NO_HANDLES);", "+\tint length = message.length ();", "+\tchar [] buffer = new char [length + 1];", "+\tmessage.getChars (0, length, buffer, 0);", "+\tint messagePtr = OS.gcnew_String (buffer);", "+\tif (messagePtr == 0) error (SWT.ERROR_NO_HANDLES);", "+\tOS.FolderBrowserDialog_Description (dialog, messagePtr);", "+\tOS.GCHandle_Free (messagePtr);", "+\t//TODO: filter path...", "+\tint result = OS.FormsCommonDialog_ShowDialog (dialog);", "+\tString directoryPath = null;", "+\tif (result == OS.DialogResult_OK) {", "+\t\tint ptr = OS.FolderBrowserDialog_SelectedPath (dialog);", "+\t\tint charArray = OS.String_ToCharArray (ptr);", "+\t\tchar[] chars = new char[OS.String_Length (ptr)];", "+\t\tOS.memcpy (chars, charArray, chars.length * 2);", "+\t\tOS.GCHandle_Free (charArray);", "+\t\tOS.GCHandle_Free (ptr);", "+\t\tdirectoryPath = new String (chars);", "+\t}", "+\tOS.GCHandle_Free (dialog);", "+\treturn directoryPath;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "006e02b7a0d2a9717940f9c011650b14", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "0dcefc726a59adc3ce7b6dc24a58e5d592ba7749", "commitAfterChange": "88ffa6b3ea08098641f0307e99d3b91e831f45af", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 133, "signatureBeforeChange": "  GdkColor defaultBackground ()", "signatureAfterChange": "  void setBackgroundColor (int handle, GdkColor color)", "diff": ["-GdkColor defaultBackground () {", "-\treturn display.COLOR_WIDGET_BACKGROUND;", "-}", "+void setBackgroundColor (int handle, GdkColor color) {", "+\tint index = OS.GTK_STATE_NORMAL;", "+\tint style = OS.gtk_widget_get_modifier_style (handle);", "+\tint ptr = OS.gtk_rc_style_get_bg_pixmap_name (style, index);", "+\tif (ptr != 0) OS.g_free (ptr);", "+\tString name = color == null ? \"<parent>\" : \"<none>\";", "+\tbyte[] buffer = Converter.wcsToMbcs (null, name, true);", "+\tptr = OS.g_malloc (buffer.length);", "+\tOS.memmove (ptr, buffer, buffer.length);", "+\tOS.gtk_rc_style_set_bg_pixmap_name (style, index, ptr);", "+\tOS.gtk_rc_style_set_bg (style, index, color);", "+\tint flag = OS.gtk_rc_style_get_color_flags(style, index);", "+\tflag = (color == null) ? flag & ~OS.GTK_RC_BG : flag | OS.GTK_RC_BG;", "+\tOS.gtk_rc_style_set_color_flags(style, index, flag);", "+\tOS.gtk_widget_modify_style (handle, style);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daf991d37c040c93edc325e3fdad51aa", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "334dd3b1940a2d75dbdd2f6bffa755e1429f66d2", "commitAfterChange": "fa7eee3a1d10b376837126ea0a7c765da37c3240", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": "  int tableView_objectValueForTableColumn_row(int aTableView, int aTableColumn, int rowIndex)", "signatureAfterChange": "  int tableView_objectValueForTableColumn_row(int aTableView, int aTableColumn, int rowIndex)", "diff": ["-\treturn NSString.stringWith(items[rowIndex]).id;", "+\tNSMutableDictionary dict = NSMutableDictionary.dictionaryWithCapacity(4);", "+\tif (foreground != null) {", "+\t\tNSColor color = NSColor.colorWithDeviceRed(foreground.handle[0], foreground.handle[1], foreground.handle[2], 1);", "+\t\tdict.setObject(color, OS.NSForegroundColorAttributeName());", "+\t}", "+\tif (font != null) {", "+\t\tdict.setObject(font.handle, OS.NSFontAttributeName());", "+\t}", "+\tif (background != null) {", "+\t\tNSColor color = NSColor.colorWithDeviceRed(background.handle[0], background.handle[1], background.handle[2], 1);", "+\t\tdict.setObject(color, OS.NSBackgroundColorAttributeName());", "+\t}", "+\tString text = items[rowIndex];", "+\tint length = text.length();", "+\tchar[] chars = new char[length];", "+\ttext.getChars(0, length, chars, 0);", "+\tNSString str = NSString.stringWithCharacters(chars, length);", "+\tNSAttributedString attribStr = ((NSAttributedString)new NSAttributedString().alloc()).initWithString_attributes_(str, dict);", "+\tattribStr.autorelease();", "+\treturn attribStr.id;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1d484bc2d93bfba1eb0d9c44c77d588", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "87d79b28b78da8b56644c5ffdf26400d97e4e059", "commitAfterChange": "ec7edbaede68f4fd7608786e759e23fd6dbe2200", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 19, "signatureBeforeChange": "  int processMouseMove (int callData, int arg1, int int2)", "signatureAfterChange": "  boolean setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "diff": ["+", "+boolean setBounds (int x, int y, int width, int height, boolean move, boolean resize) {", "+\tint topHandle = topHandle ();", "+\tboolean sameOrigin = true, sameExtent = true;", "+\tif (move) {", "+\t\tint oldX = OS.GTK_WIDGET_X (topHandle);", "+\t\tint oldY = OS.GTK_WIDGET_Y (topHandle);", "+\t\tsameOrigin = x == oldX && y == oldY;", "+\t\tif (!sameOrigin) {", "+\t\t\tmoveHandle (x, y);", "+\t\t\tsendEvent(SWT.Move);", "+\t\t}", "+\t}", "+\tif (resize) {", "+\t\twidth = Math.max (1, width);", "+\t\theight = Math.max (1, height);", "+\t\tint oldWidth = OS.GTK_WIDGET_WIDTH (topHandle);", "+\t\tint oldHeight = OS.GTK_WIDGET_HEIGHT (topHandle);", "+\t\tsameExtent = width == oldWidth && height == oldHeight;", "+\t\tif (!sameExtent) {", "+\t\t\tresizeHandle (width, height);", "+\t\t\tsendEvent(SWT.Resize);", "+\t\t}", "+\t}", "+\treturn !sameOrigin || !sameExtent;", "-\t/*", "-\tGdkEvent gdkEvent = new GdkEvent (callData);", "-\tint[] px = new int[1], py = new int[1];", "-\tOS.gdk_window_get_pointer(_gdkWindow(), px, py, 0);\t", "-\tint time = OS.gdk_event_get_time(callData);", "-\tint[] pMods = new int[1];", "-\tOS.gdk_event_get_state(callData, pMods);", "-\tsendMouseEvent (SWT.MouseMove, 0, pMods[0], time, px[0], py[0]);*/", "-\treturn 1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b602518782c521d760e71de958b91dc4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "4edc576de20a88abac088ae701d29ce3e54ede4f", "commitAfterChange": "c2ec875b36ecf39df432358c14d183b7d7f45fe0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  void computeRuns()", "signatureAfterChange": "  void computeRuns()", "diff": ["-\ttextContainer.setLineFragmentPadding(0);", "-\t", "+\ttextContainer.setLineFragmentPadding(0);\t", "+\t", "+\tint numberOfLines, index, numberOfGlyphs = layoutManager.numberOfGlyphs();", "+\tint rangePtr = OS.malloc(NSRange.sizeof);", "+\tNSRange lineRange = new NSRange();", "+\tfor (numberOfLines = 0, index = 0; index < numberOfGlyphs; numberOfLines++){", "+\t    layoutManager.lineFragmentUsedRectForGlyphAtIndex_effectiveRange_withoutAdditionalLayout_(index, rangePtr, true);", "+\t    OS.memmove(lineRange, rangePtr, NSRange.sizeof);", "+\t    index = lineRange.location + lineRange.length;", "+\t}", "+\tint[] offsets = new int[numberOfLines + 1];", "+\tNSRect[] bounds = new NSRect[numberOfLines];", "+\tfor (numberOfLines = 0, index = 0; index < numberOfGlyphs; numberOfLines++){", "+\t\tbounds[numberOfLines] = layoutManager.lineFragmentUsedRectForGlyphAtIndex_effectiveRange_withoutAdditionalLayout_(index, rangePtr, true);", "+\t    OS.memmove(lineRange, rangePtr, NSRange.sizeof);", "+\t    offsets[numberOfLines] = lineRange.location;", "+\t    index = lineRange.location + lineRange.length;", "+\t}\t", "+\tOS.free(rangePtr);", "+\toffsets[numberOfLines] = textStorage.length();", "+\tthis.lineOffsets = offsets;", "+\tthis.lineBounds = bounds;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41b7a28c0db0e7677968b7c8b1c1f7cb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "bcbab027b782a219051696a27ecb1edbc29136c2", "commitAfterChange": "e7b19311f8b1c1c9ab3f1840b1542b88b76728a7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tboolean fixWrap = labelHandle != 0 && (style & SWT.WRAP) != 0;", "-\tif (fixWrap || frameHandle != 0) forceResize ();", "-\tint [] labelWidth = new int [1], labelHeight = new int [1];", "-\tif (fixWrap) {", "-\t\tOS.gtk_widget_get_size_request (labelHandle, labelWidth, labelHeight);", "-\t\tOS.gtk_widget_set_size_request (labelHandle, wHint, hHint);", "-\t}\t", "-\tif (frameHandle != 0) {", "-\t\tint [] reqWidth = new int [1], reqHeight = new int [1];", "-\t\tOS.gtk_widget_get_size_request (handle, reqWidth, reqHeight);", "-\t\tOS.gtk_widget_set_size_request (handle, wHint, hHint);", "-\t\tsize = computeNativeSize (frameHandle, -1, -1, changed);", "-\t\tOS.gtk_widget_set_size_request (handle, reqWidth [0], reqHeight [0]);", "-\t} else {", "-\t\tsize = computeNativeSize (handle, wHint, hHint, changed);", "-\t}", "+\t/* ", "+\t* Feature in GTK. GTK has a predetermined maximum width for wrapping text. ", "+\t* The fix is to use pango layout directly instead of the label size request ", "+\t* to calculate its preferred size.", "+\t*/", "+\tboolean fixWrap = labelHandle != 0 && (style & SWT.WRAP) != 0 && (OS.GTK_WIDGET_FLAGS (labelHandle) & OS.GTK_VISIBLE) != 0;", "-\t\tOS.gtk_widget_set_size_request (labelHandle, labelWidth [0], labelHeight [0]);", "+\t\tint /*long*/ labelLayout = OS.gtk_label_get_layout (labelHandle);", "+\t\tint pangoWidth = OS.pango_layout_get_width (labelLayout);", "+\t\tif (wHint != SWT.DEFAULT) {", "+\t\t\tOS.pango_layout_set_width (labelLayout, wHint * OS.PANGO_SCALE);", "+\t\t} else {", "+\t\t\tOS.pango_layout_set_width (labelLayout, -1);", "+\t\t}", "+\t\tint [] w = new int [1], h = new int [1];", "+\t\tOS.pango_layout_get_size (labelLayout, w, h);", "+\t\tOS.pango_layout_set_width (labelLayout, pangoWidth);", "+\t\tif (frameHandle != 0) {", "+\t\t\tint [] labelWidth = new int [1], labelHeight = new int [1];", "+\t\t\tOS.gtk_widget_get_size_request (labelHandle, labelWidth, labelHeight);", "+\t\t\tOS.gtk_widget_set_size_request (labelHandle, 1, 1);", "+\t\t\tsize = computeNativeSize (frameHandle, -1, -1, changed);", "+\t\t\tOS.gtk_widget_set_size_request (labelHandle, labelWidth [0], labelHeight [0]);", "+\t\t\tsize.x = size.x - 1;", "+\t\t\tsize.y = size.y - 1;", "+\t\t} else { ", "+\t\t\tsize = new Point (0,0);", "+\t\t}", "+\t\tsize.x += wHint == SWT.DEFAULT ? OS.PANGO_PIXELS(w [0]) : wHint;", "+\t\tsize.y += hHint == SWT.DEFAULT ? OS.PANGO_PIXELS(h [0]) : hHint;", "+\t} else {", "+\t\tif (frameHandle != 0) {", "+\t\t\tint [] reqWidth = new int [1], reqHeight = new int [1];", "+\t\t\tOS.gtk_widget_get_size_request (handle, reqWidth, reqHeight);", "+\t\t\tOS.gtk_widget_set_size_request (handle, wHint, hHint);", "+\t\t\tsize = computeNativeSize (frameHandle, -1, -1, changed);", "+\t\t\tOS.gtk_widget_set_size_request (handle, reqWidth [0], reqHeight [0]);", "+\t\t} else {", "+\t\t\tsize = computeNativeSize (handle, wHint, hHint, changed);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64c2b25dae344cfc551d0c68cd1f733d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "659d841b033b864efe4f5fce4abb5b8822188e47", "commitAfterChange": "2d4f1f3476edb1aaeb36c2a73bcbbcf7e14cdea6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public Rectangle getBounds ()", "signatureAfterChange": " public Rectangle getBounds ()", "diff": ["-/*\r", "-\tdouble haj = OS.gtk_adjustment_get_value(tree.hadjustment);\r", "-\tdouble vaj = OS.gtk_adjustment_get_value(tree.vadjustment);\r", "-\t\r", "-\tint columnHandle = tree.column;\r", "-\tint height=parent.getItemHeight();\r", "+\t/* NB: Different from gtk_ctree_is_visible() */\r", "+\tif (!OS.gtk_ctree_is_viewable(ctree, handle)) return new Rectangle(0,0,0,0);\r", "-\tint row_list = tree.row_list; int level=0;\r", "-\tint count = OS.g_list_length (row_list);\r", "-\tint index=0;\r", "-\twhile (index<count) {\r", "-\t\tint data = OS.g_list_nth (row_list, index);\r", "-\t\tif (handle == data){\r", "-\t\t\tint rowHandle = OS.g_list_nth_data (row_list, index);\r", "-\t\t\tGtkCTreeRow row = new GtkCTreeRow();\r", "-\t\t\tOS.memmove(row, rowHandle, GtkCTreeRow.sizeof);\r", "-\t\t\tlevel = row.level;\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t\tindex++;\r", "+\t/* Vertical */\r", "+\tint row_index = 0;\r", "+\tint work = OS.GTK_CLIST_ROW_LIST(ctree);\r", "+\twhile ((work!=0) && (work!=handle)) {\r", "+\t\twork = OS.GTK_CTREE_NODE_NEXT(work);\r", "+\t\trow_index++;\r", "-\tint y = height*index + Tree.CELL_SPACING + tree.voffset + 2;\r", "+\t\r", "+\tint border = OS.gtk_container_get_border_width(ctree);\r", "+\t// observe the weird row spacing rule\r", "+\tint y = OS.ROW_TOP_YPIXEL(ctree, row_index) + Tree.CELL_SPACING;\r", "+\tint height = parent.getItemHeight();\r", "-\tint [] buffer = new int [1]; byte [] spacing = new byte [1];\r", "-\tboolean [] is_leaf = new boolean [1], expanded = new boolean [1];\r", "-\tint [] pixmap_closed = new int [1], mask_closed= new int [1], pixmap_opened= new int [1], mask_opened= new int [1];\r", "-\tOS.gtk_ctree_get_node_info (ctree, handle, buffer, spacing, pixmap_closed, mask_closed, pixmap_opened, mask_opened, is_leaf, expanded);\r", "-\tint length = OS.strlen (buffer[0]);\r", "-\tbyte [] buffer1 = new byte [length];\r", "-\tOS.memmove (buffer1, buffer[0], length);\r", "-\tint styleHandle = OS.gtk_ctree_node_get_row_style(ctree, handle);\r", "-\tif (styleHandle == 0)\r", "-\t\tstyleHandle = OS.gtk_widget_get_style(ctree);\r", "-\tGtkStyle style = new GtkStyle(styleHandle);*/\r", "-\t/* FIXME */\t\r", "-\tint width = 50; /*OS.gdk_string_width(style.font, buffer1);*/\r", "-\r", "-//\tx = (short)column.area_x+tree.tree_indent*(level-1)+spacing[0]+tree.hoffset;\r", "-/*\tint x = 33+tree.tree_indent*(level-1)+spacing[0]+tree.hoffset;*/\r", "-\r", "-\treturn new Rectangle (0, 0, 40, 10);\r", "+\t/* Horizontal */\t\r", "+\tint row_ptr = OS.GTK_CTREE_ROW(ctree, handle);\r", "+\tGtkCTreeRow row = new GtkCTreeRow();\r", "+\tOS.memmove(row, OS.g_list_nth_data (handle, 0), GtkCTreeRow.sizeof);\r", "+\tint x = OS.GTK_CLIST_HOFFSET(ctree) + OS.GTK_CTREE_TREE_INDENT (ctree) * row.level;\r", "+\tif (image != null) {\r", "+\t\tint[] w = new int[1], h = new int[1];\r", "+ \t\tOS.gdk_drawable_get_size(image.pixmap, w, h);\r", "+ \t\tx += w[0]; \r", "+\t}\t\r", "+\tint width = OS.GTK_CLIST_WINDOW_WIDTH(ctree) - x; // No hoffset!\r", "+\t\r", "+\treturn new Rectangle (x, y, width, parent.getItemHeight());\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4329ad50dd106b3079fa1d3bd3935e49", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "e9ae07fd367d911ee6d4e07d42035b0e3fd629db", "commitAfterChange": "87a273517d8662be0d55be7871a1f3a52f123a80", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+\tif (hHint == SWT.DEFAULT && labelHandle != 0) {", "+\t\tint /*long*/ layout = OS.gtk_label_get_layout (labelHandle);", "+\t\tint /*long*/ context = OS.pango_layout_get_context (layout);", "+\t\tint /*long*/ lang = OS.pango_context_get_language (context);", "+\t\tint /*long*/ font = getFontDescription ();", "+\t\tint /*long*/ metrics = OS.pango_context_get_metrics (context, font, lang);", "+\t\tint ascent = OS.PANGO_PIXELS (OS.pango_font_metrics_get_ascent (metrics));", "+\t\tint descent = OS.PANGO_PIXELS (OS.pango_font_metrics_get_descent (metrics));", "+\t\tOS.pango_font_metrics_unref (metrics);", "+\t\tint fontHeight = ascent + descent;", "+\t\tint [] buffer = new int [1];", "+\t\tOS.g_object_get (labelHandle, OS.ypad, buffer, 0);", "+\t\tfontHeight += 2 * buffer [0];", "+\t\tif (frameHandle != 0) {", "+\t\t\tint /*long*/ style = OS.gtk_widget_get_style (frameHandle);", "+\t\t\tfontHeight += 2 * OS.gtk_style_get_ythickness (style);", "+\t\t\tfontHeight += 2 * OS.gtk_container_get_border_width (frameHandle);", "+\t\t}", "+\t\tsize.y = Math.max (size.y, fontHeight);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbc295a6b319b1c237c8439eb8feea4b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 56, "signatureBeforeChange": " public Point stringExtent(String string)", "signatureAfterChange": " public Point stringExtent(String string)", "diff": ["-public Point stringExtent(String string) {", "+public Point stringExtent(String string) {\t", "-\tif (string.length () == 0) return new Point(0, getFontHeight());", "-\t/* AW", "-\tbyte[] buffer = Converter.wcsToMbcs(getCodePage (), string, true);", "-\tint xmString = OS.XmStringCreate(buffer, OS.XmFONTLIST_DEFAULT_TAG);", "-\tint fontList = data.fontList;", "-\tint width = OS.XmStringWidth(fontList, xmString);", "-\tint height = OS.XmStringHeight(fontList, xmString);", "-\tOS.XmStringFree(xmString);", "-\t*/", "-\ttry {", "-\t\tfocus(false, null);", "-\t\tinstallFont();", "-\t\tint width= OS.TextWidth(string, data.font.fID, data.font.fSize, data.font.fFace);", "-\t\tshort[] fontInfo= new short[4];", "-\t\tOS.GetFontInfo(fontInfo);\t// FontInfo", "-\t\treturn new Point(width, fontInfo[0] + fontInfo[1]);", "-\t} finally {", "-\t\tunfocus(false);", "-\t}", "+\tint length = string.length();", "+\tif (length == 0) return new Point(0, data.fontAscent + data.fontDescent);", "+\tchar[] buffer = new char[length];", "+\tstring.getChars(0, length, buffer, 0);", "+\tint ptr1 = OS.NewPtr(length * 2);", "+\tOS.memcpy(ptr1, buffer, length * 2);", "+\tOS.ATSUSetTextPointerLocation(data.layout, ptr1, 0, length, length);", "+\tOS.ATSUSetRunStyle(data.layout, data.style, 0, length);", "+\tint ptr2 = OS.NewPtr(ATSTrapezoid.sizeof);", "+\tOS.ATSUGetGlyphBounds(data.layout, 0, 0, 0, length, (short)OS.kATSUseDeviceOrigins, 1, ptr2, null);", "+\tOS.DisposePtr(ptr1);", "+\tATSTrapezoid trapezoid = new ATSTrapezoid();", "+\tOS.memcpy(trapezoid, ptr2, ATSTrapezoid.sizeof);", "+\tOS.DisposePtr(ptr2);", "+\tint width = (trapezoid.upperRight_x >> 16) - (trapezoid.upperLeft_x >> 16);", "+\tint height = (trapezoid.lowerRight_y >> 16) - (trapezoid.upperRight_y >> 16);", "+\treturn new Point(width, height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "199c77a314764bb62833b85f6abf5072", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "3e1b012af2b4ba818ce575f06ca138619a0a2859", "commitAfterChange": "4b27ffdfff25d04c66f5ca08e11b1e086b9d1dcd", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 134, "signatureBeforeChange": "  int tableView_selectionIndexesForProposedSelection (int id, int sel, int aTableView, int indexSet)", "signatureAfterChange": "  int tableView_selectionIndexesForProposedSelection (int id, int sel, int aTableView, int indexSet)", "diff": ["+\tNSTableView tableView = new NSTableView(aTableView);", "+", "+\t// If a checkbox is being tracked don't select the row.", "+\tif (display.trackedButtonRow != -1) return tableView.selectedRowIndexes().id;", "+\t", "+\t// If the click was in a checkbox, remove that row from the proposed selection.", "+\tNSMutableIndexSet mutableSelection = (NSMutableIndexSet) new NSMutableIndexSet().alloc();", "+\tmutableSelection = new NSMutableIndexSet(mutableSelection.initWithIndexSet(new NSIndexSet(indexSet)));", "+    int /*long*/ clickedCol = tableView.clickedColumn();", "+    int /*long*/ clickedRow = tableView.clickedRow();", "+    if (clickedRow >= 0 && clickedCol >= 0) {", "+        NSCell cell = tableView.preparedCellAtColumn(clickedCol, clickedRow);", "+        if (cell.isKindOfClass(OS.class_NSButtonCell) && cell.isEnabled()) {", "+            NSRect cellFrame = tableView.frameOfCellAtColumn(clickedCol, clickedRow);", "+            NSRect imageFrame = cell.imageRectForBounds(cellFrame);", "+            NSPoint hitPoint = tableView.convertPoint_fromView_(NSApplication.sharedApplication().currentEvent().locationInWindow(), null);", "+            if (OS.NSPointInRect(hitPoint, imageFrame)) {", "+    \t\t\tmutableSelection.removeIndex(clickedRow);", "+            }", "+        }            ", "+    }", "-\t\tNSIndexSet indexes = new NSIndexSet(indexSet);", "-\t\tNSTableView table = new NSTableView(aTableView);\t\t\t", "-\t\tif (indexes.count() != 1 && table.selectedRow() != -1) {", "-\t\t\tNSIndexSet newSelection = (NSIndexSet)new NSIndexSet().alloc();", "-\t\t\tnewSelection = newSelection.initWithIndex(table.selectedRow());", "-\t\t\tnewSelection.autorelease();", "-\t\t\treturn newSelection.id;", "+\t\tif (mutableSelection.count() != 1 && tableView.selectedRow() != -1) {", "+\t\t\treturn tableView.selectedRowIndexes().id;", "-\treturn indexSet;", "+\treturn mutableSelection.id;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce82c3f440fb967d78ca2459f3fd7775", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Spinner.java", "commitBeforeChange": "c17b6bfe3dc2f2dab791d9333ee2f08e9678e069", "commitAfterChange": "edcb9a708b2db146feb80ecb85928d59ad2a09b4", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public void setIncrement (int value)", "signatureAfterChange": " public void setIncrement (int value)", "diff": ["-\tincrement = value;", "+\tint hHeap = OS.GetProcessHeap ();", "+\tint count = OS.SendMessage (hwndUpDown, OS.UDM_GETACCEL, 0, (UDACCEL)null);", "+\tint udaccels = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, UDACCEL.sizeof * count);", "+\tOS.SendMessage (hwndUpDown, OS.UDM_GETACCEL, count, udaccels);", "+\tint first = -1;", "+\tUDACCEL udaccel = new UDACCEL ();", "+\tfor (int i = 0; i < count; i++) {", "+\t\tint offset = udaccels + (i * UDACCEL.sizeof);", "+\t\tOS.MoveMemory (udaccel, offset, UDACCEL.sizeof);", "+\t\tif (first == -1) first = udaccel.nInc;", "+\t\tudaccel.nInc  =  udaccel.nInc * value / first;", "+\t\tOS.MoveMemory (offset, udaccel, UDACCEL.sizeof);", "+\t}", "+\tOS.SendMessage (hwndUpDown, OS.UDM_SETACCEL, count, udaccels);", "+\tOS.HeapFree (hHeap, 0, udaccels);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6cac86e17ba19a46f52e2f817c18565", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "81787cd27e32af892df033b20e65ebc1ed6c38e6", "commitAfterChange": "dd108aa467b1abd9492c670feed714315578df63", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public Rectangle getImageBounds (int index)", "signatureAfterChange": " public Rectangle getImageBounds (int index)", "diff": ["-\t//NOT IMPLEMENTED\r", "-\treturn new Rectangle (0, 0, 0, 0);\r", "+\tint CELL_SPACING = 1;\r", "+\tint clist = parent.handle;\r", "+\tint columnHandle = OS.GTK_CLIST_COLUMN (clist);\r", "+\tcolumnHandle= columnHandle + index * GtkCListColumn.sizeof;\r", "+\tGtkCListColumn column = new GtkCListColumn ();\r", "+\tOS.memmove (column, columnHandle, GtkCListColumn.sizeof);\r", "+\tint x = column.area_x + OS.GTK_CLIST_HOFFSET (clist) + 1;\r", "+\tint height = OS.GTK_CLIST_ROW_HEIGHT (clist);\r", "+\tint row = parent.indexOf (this);\r", "+\tint headerHeight = OS.GTK_CLIST_COLUMN_TITLE_AREA_HEIGHT (clist);\r", "+\tint y = headerHeight + OS.GTK_CLIST_VOFFSET (clist) + (height + CELL_SPACING) * row + 3;\r", "+\tint width = 0;\r", "+\tif (!(index == 0 && (parent.style & SWT.CHECK) != 0)) {\r", "+\t\tint [] pixmap = new int [1];\r", "+\t\tOS.gtk_clist_get_pixtext (clist, row, index, null, null, pixmap, null);\r", "+\t\tif (pixmap [0] != 0) {\r", "+\t\t\tint [] w = new int [1], h = new int [1];\r", "+\t\t\tOS.gdk_drawable_get_size (pixmap [0], w, h);\r", "+\t\t\twidth = w [0];\r", "+\t\t}\r", "+\t}\r", "+\treturn new Rectangle (x, y, width, height);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddf094d0ccfbf5fae9e048fb9156a34a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "e7fb43dbb2484659429530f9cab714cb6e3de9f3", "commitAfterChange": "d69b8bce251422ebdcfdac8edd7d2bcf938dfebd", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r public boolean execute (String fileName)", "signatureAfterChange": " public boolean execute (String fileName)", "diff": ["- */\r", "-public boolean execute (String fileName) {\r", "-\tif (fileName == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);\r", "-\t\r", "-\t// Parse the command into its individual arguments.\r", "-\tString[]  args = parseCommand( command );\r", "-\tint       fileArg = -1;\r", "-\tint       index;\r", "-\tfor (index=0; index < args.length; index++) {\r", "-\t\tint j = args[ index ].indexOf( \"%f\" );\r", "-\t\tif (j != -1) {\r", "-\t\t\tString value = args[ index ];\r", "-\t\t\tfileArg = index;\r", "-\t\t\targs[ index ] = value.substring(0,j) + fileName + value.substring(j+2);\r", "-\t\t}\r", "-\t}\r", "-\t\r", "-\t// If a file name was given but the command did not have \"%f\"\r", "-\tif ((fileName.length() > 0) && (fileArg < 0)) {\r", "-\t\tString[] newArgs = new String[ args.length + 1 ];\r", "-\t\tfor (index=0; index < args.length; index++)\r", "-\t\t\tnewArgs[ index ] = args[ index ];\r", "-\t\tnewArgs[ args.length ] = fileName;\r", "-\t\targs = newArgs;\r", "-\t}\r", "-\t\r", "-\t// Execute the command.\r", "-\ttry {\r", "-\t\tRuntime.getRuntime().exec( args );\r", "-\t} catch (IOException e) {\r", "-\t\treturn false;\r", "-\t}\r", "-\r", "-\treturn true;\r", "-}\r", "+ */", "+public boolean execute (String fileName) {", "+\tif (fileName == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+\t", "+\tswitch (getDesktop( display )) {", "+\t\tcase DESKTOP_KDE: {", "+\t\t\tString urlString = \"file://\" + fileName;", "+\t\t\tbyte[] buffer = Converter.wcsToMbcs( null, urlString, true );", "+\t\t\tint qString = KDE.QString_new( buffer );", "+\t\t\tint url = KDE.KURL_new( qString );", "+\t\t\tKDE.QString_delete( qString );", "+\t\t\tbuffer = Converter.wcsToMbcs (null, name, true);", "+\t\t\tint mimeTypeName = KDE.QString_new( buffer );", "+\t\t\tint pid = KDE.KRun_runURL( url, mimeTypeName );", "+\t\t\tKDE.KURL_delete( url );", "+\t\t\tKDE.QString_delete( mimeTypeName );", "+\t\t\treturn (pid != 0);", "+\t\t}", "+\t\t", "+\t\tcase DESKTOP_GNOME: {", "+\t\t\t// Parse the command into its individual arguments.", "+\t\t\tString[]  args = parseCommand( command );", "+\t\t\tint       fileArg = -1;", "+\t\t\tint       index;", "+\t\t\tfor (index=0; index < args.length; index++) {", "+\t\t\t\tint j = args[ index ].indexOf( \"%f\" );", "+\t\t\t\tif (j != -1) {", "+\t\t\t\t\tString value = args[ index ];", "+\t\t\t\t\tfileArg = index;", "+\t\t\t\t\targs[ index ] = value.substring(0,j) + fileName + value.substring(j+2);", "+\t\t\t\t}", "+\t\t\t}", "+\t", "+\t\t\t// If a file name was given but the command did not have \"%f\"", "+\t\t\tif ((fileName.length() > 0) && (fileArg < 0)) {", "+\t\t\t\tString[] newArgs = new String[ args.length + 1 ];", "+\t\t\t\tfor (index=0; index < args.length; index++)", "+\t\t\t\t\tnewArgs[ index ] = args[ index ];", "+\t\t\t\tnewArgs[ args.length ] = fileName;", "+\t\t\t\targs = newArgs;", "+\t\t\t}", "+\t", "+\t\t\t// Execute the command.", "+\t\t\ttry {", "+\t\t\t\tRuntime.getRuntime().exec( args );", "+\t\t\t} catch (IOException e) {", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t\treturn true;", "+\t\t}", "+\t\t", "+\t\tcase DESKTOP_CDE: {", "+\t\t\tbyte[] action = Converter.wcsToMbcs( null, command, true );", "+\t\t\tbyte[] fileArg = Converter.wcsToMbcs( null, fileName, true );", "+\t\t\tInteger shell = (Integer) display.getData( cdeShell );", "+\t\t\tint actionID = 0;", "+\t\t\tif (shell != null) {", "+\t\t\t\tactionID = CDE.DtActionInvoke( shell.intValue(), action, fileArg, 1, null, null, null, 1, 0, 0 );", "+\t\t\t}", "+\t\t\treturn (actionID != 0);", "+\t\t}", "+\t}", "+", "+\treturn false;", "+}"]}], "num": 27261}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "777f42fb6acc156f7acde356e0feb9f8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6acf32d945cde4da27b7a99729adabd9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "f664172a0e735d142051b2da26600fbd256e07a6", "commitAfterChange": "894e6297387f95786ffea31acd399cd5951b0afc", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  Point adjustResizeCursor (int xDisplay, int xWindow)", "signatureAfterChange": "  Point adjustResizeCursor ()", "diff": ["-Point adjustResizeCursor (int xDisplay, int xWindow) {", "-\treturn new Point (0, 0);", "+Point adjustResizeCursor () {", "+\tint newX, newY;", "+\tRectangle bounds = computeBounds ();", "+", "+\tif ((cursorOrientation & SWT.LEFT) != 0) {", "+\t\tnewX = bounds.x;", "+\t} else if ((cursorOrientation & SWT.RIGHT) != 0) {", "+\t\tnewX = bounds.x + bounds.width;", "+\t} else {", "+\t\tnewX = bounds.x + bounds.width / 2;", "+\t}", "+", "+\tif ((cursorOrientation & SWT.UP) != 0) {", "+\t\tnewY = bounds.y;", "+\t} else if ((cursorOrientation & SWT.DOWN) != 0) {", "+\t\tnewY = bounds.y + bounds.height;", "+\t} else {", "+\t\tnewY = bounds.y + bounds.height / 2;", "+\t}", "+", "+\t/*", "+\t * Convert to screen coordinates iff needed", "+ \t */", "+\tif (parent != null) {", "+\t\tRect rect = new Rect ();", "+\t\tOS.GetControlBounds (parent.handle, rect);", "+\t\tnewX += rect.left; ", "+\t\tnewY += rect.top; ", "+\t\tint window = OS.GetControlOwner (parent.handle);", "+\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\t\tnewX += rect.left; ", "+\t\tnewY += rect.top; ", "+\t}", "+\tCGPoint pt = new CGPoint ();", "+\tpt.x = newX;  pt.y = newY;", "+\tOS.CGWarpMouseCursorPosition (pt);", "+", "+\t/*", "+\t* If the client has not provided a custom cursor then determine", "+\t* the appropriate resize cursor.", "+\t*/", "+\tif (clientCursor == null) {", "+\t\tCursor newCursor = null;", "+\t\tswitch (cursorOrientation) {", "+\t\t\tcase SWT.UP:", "+\t\t\t\tnewCursor = new Cursor(display, SWT.CURSOR_SIZENS);", "+\t\t\t\tbreak;", "+\t\t\tcase SWT.DOWN:", "+\t\t\t\tnewCursor = new Cursor(display, SWT.CURSOR_SIZENS);", "+\t\t\t\tbreak;", "+\t\t\tcase SWT.LEFT:", "+\t\t\t\tnewCursor = new Cursor(display, SWT.CURSOR_SIZEWE);", "+\t\t\t\tbreak;", "+\t\t\tcase SWT.RIGHT:", "+\t\t\t\tnewCursor = new Cursor(display, SWT.CURSOR_SIZEWE);", "+\t\t\t\tbreak;", "+\t\t\tcase SWT.LEFT | SWT.UP:", "+\t\t\t\tnewCursor = new Cursor(display, SWT.CURSOR_SIZENWSE);", "+\t\t\t\tbreak;", "+\t\t\tcase SWT.RIGHT | SWT.DOWN:", "+\t\t\t\tnewCursor = new Cursor(display, SWT.CURSOR_SIZENWSE);", "+\t\t\t\tbreak;", "+\t\t\tcase SWT.LEFT | SWT.DOWN:", "+\t\t\t\tnewCursor = new Cursor(display, SWT.CURSOR_SIZENESW);", "+\t\t\t\tbreak;", "+\t\t\tcase SWT.RIGHT | SWT.UP:", "+\t\t\t\tnewCursor = new Cursor(display, SWT.CURSOR_SIZENESW);", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tnewCursor = new Cursor(display, SWT.CURSOR_SIZEALL);", "+\t\t\t\tbreak;", "+\t\t}", "+\t\tdisplay.setCursor (newCursor.handle);", "+\t\tif (resizeCursor != null) {", "+\t\t\tresizeCursor.dispose ();", "+\t\t}", "+\t\tresizeCursor = newCursor;", "+\t}", "+\t\t", "+\treturn new Point ((int) pt.x, (int) pt.y);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3c576331e117b2cc4ddd6e10fd6c94d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "a6baca0c93ee7535e1500c50336143cc4b7239f0", "commitAfterChange": "f6535bc12b49fe9668ca117e83c21855375d017e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r Point adjustResizeCursor ()", "signatureAfterChange": "\r \r Point adjustResizeCursor ()", "diff": ["-\tint newCursor = 0;\r", "-\tswitch (cursorOrientation) {\r", "-\t\tcase SWT.UP:\r", "-\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZENS);\r", "-\t\t\tbreak;\r", "-\t\tcase SWT.DOWN:\r", "-\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZENS);\r", "-\t\t\tbreak;\r", "-\t\tcase SWT.LEFT:\r", "-\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZEWE);\r", "-\t\t\tbreak;\r", "-\t\tcase SWT.RIGHT:\r", "-\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZEWE);\r", "-\t\t\tbreak;\r", "-\t\tcase SWT.LEFT | SWT.UP:\r", "-\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZENWSE);\r", "-\t\t\tbreak;\r", "-\t\tcase SWT.RIGHT | SWT.DOWN:\r", "-\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZENWSE);\r", "-\t\t\tbreak;\r", "-\t\tcase SWT.LEFT | SWT.DOWN:\r", "-\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZENESW);\r", "-\t\t\tbreak;\r", "-\t\tcase SWT.RIGHT | SWT.UP:\r", "-\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZENESW);\r", "-\t\t\tbreak;\r", "-\t\tdefault:\r", "-\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZEALL);\r", "-\t\t\tbreak;\r", "+\t/*\r", "+\t* If the client has not provided a custom cursor then determine\r", "+\t* the appropriate resize cursor.\r", "+\t*/\r", "+\tif (clientCursor == 0) {\r", "+\t\tint newCursor = 0;\r", "+\t\tswitch (cursorOrientation) {\r", "+\t\t\tcase SWT.UP:\r", "+\t\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZENS);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase SWT.DOWN:\r", "+\t\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZENS);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase SWT.LEFT:\r", "+\t\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZEWE);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase SWT.RIGHT:\r", "+\t\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZEWE);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase SWT.LEFT | SWT.UP:\r", "+\t\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZENWSE);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase SWT.RIGHT | SWT.DOWN:\r", "+\t\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZENWSE);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase SWT.LEFT | SWT.DOWN:\r", "+\t\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZENESW);\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase SWT.RIGHT | SWT.UP:\r", "+\t\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZENESW);\r", "+\t\t\t\tbreak;\r", "+\t\t\tdefault:\r", "+\t\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZEALL);\r", "+\t\t\t\tbreak;\r", "+\t\t}\r", "+\t\tOS.SetCursor (newCursor);\r", "+\t\tif (resizeCursor != 0) {\r", "+\t\t\tOS.DestroyCursor (resizeCursor);\r", "+\t\t}\r", "+\t\tresizeCursor = newCursor;\r", "-\tOS.SetCursor (newCursor);\r", "-\tif (cursor != 0) {\r", "-\t\tOS.DestroyCursor (cursor);\r", "-\t}\r", "-\tcursor = newCursor;\r"]}], "num": 52391}
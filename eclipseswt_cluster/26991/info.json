{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "defd4602701dc466752cf6e023f1c83c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c7b371b06ce6e6e54c20d5860232bc8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicsExample.java", "commitBeforeChange": "6dce95c7bac82718c59672a2a21a82d9007c1492", "commitAfterChange": "17a2abe4bc42062a492b649309d8eb9791b8cc17", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void createToolBar(final Composite parent)", "signatureAfterChange": "  void createToolBar(final Composite parent)", "diff": ["-\tListener toolBarListener = new Listener() {", "-\t\tpublic void handleEvent(Event event) {", "-\t\t\tswitch (event.type) {", "-\t\t\t\tcase SWT.Selection: {", "-\t\t\t\t\tif (event.widget == playItem) {", "-\t\t\t\t\t\tanimate = true;", "-\t\t\t\t\t\tplayItem.setEnabled(!animate);", "-\t\t\t\t\t\tpauseItem.setEnabled(animate);", "-\t\t\t\t\t} else if (event.widget == pauseItem) {", "-\t\t\t\t\t\tanimate = false;", "-\t\t\t\t\t\tplayItem.setEnabled(!animate);", "-\t\t\t\t\t\tpauseItem.setEnabled(animate);", "-\t\t\t\t\t} else if (event.widget == backItem) {", "-\t\t\t\t\t\tfinal ToolItem toolItem = (ToolItem) event.widget;", "-\t\t\t\t\t\tfinal ToolBar  toolBar = toolItem.getParent();\t\t\t", "-\t\t\t\t\t\tRectangle toolItemBounds = toolItem.getBounds();", "-\t\t\t\t\t\tPoint point = toolBar.toDisplay(new Point(toolItemBounds.x, toolItemBounds.y));", "-\t\t\t\t\t\tbackMenu.setLocation(point.x, point.y + toolItemBounds.height);", "-\t\t\t\t\t\tbackMenu.setVisible(true);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "+\t", "+\tColorMenu colorMenu = new ColorMenu();", "+\t", "+\t// setup items to be contained in the background menu", "+\tcolorMenu.setColorItems(true);", "+\tcolorMenu.setPatternItems(true);", "+\tcolorMenu.setGradientItems(true);", "+\t", "+\t// create the background menu", "+\tbackMenu = colorMenu.createMenu(parent, new ColorListener() {", "+\t\tpublic void setColor(GraphicsBackground gb) {", "+\t\t\tbackground = gb;", "+\t\t\tbackItem.setImage(gb.getBgImage());", "+\t\t\tif (canvas != null) canvas.redraw();", "-\t};", "+\t});", "-\tplayItem = new ToolItem(toolBar, SWT.PUSH);", "-\tplayItem.setText(getResourceString(\"Play\")); //$NON-NLS-1$", "-\tplayItem.setImage(loadImage(display, \"play.gif\")); //$NON-NLS-1$", "-\tplayItem.addListener(SWT.Selection, toolBarListener);", "+\t// initialize the background to the first item in the menu", "+\tbackground =(GraphicsBackground)backMenu.getItem(0).getData();", "-\tpauseItem = new ToolItem(toolBar, SWT.PUSH);", "-\tpauseItem.setText(getResourceString(\"Pause\")); //$NON-NLS-1$", "-\tpauseItem.setImage(loadImage(display, \"pause.gif\")); //$NON-NLS-1$", "-\tpauseItem.addListener(SWT.Selection, toolBarListener);", "-\t", "+\t// background tool item", "-\tbackItem.addListener(SWT.Selection, toolBarListener);", "-\tString[] names = new String[]{", "-\t\tgetResourceString(\"White\"), //$NON-NLS-1$", "-\t\tgetResourceString(\"Black\"), //$NON-NLS-1$", "-\t\tgetResourceString(\"Red\"), //$NON-NLS-1$", "-\t\tgetResourceString(\"Green\"), //$NON-NLS-1$", "-\t\tgetResourceString(\"Blue\"), //$NON-NLS-1$", "-\t\tgetResourceString(\"CustomColor\"), //$NON-NLS-1$", "-\t};", "-\tColor[] colors = new Color[]{", "-\t\tdisplay.getSystemColor(SWT.COLOR_WHITE),\t", "-\t\tdisplay.getSystemColor(SWT.COLOR_BLACK),\t", "-\t\tdisplay.getSystemColor(SWT.COLOR_RED),\t", "-\t\tdisplay.getSystemColor(SWT.COLOR_GREEN),\t", "-\t\tdisplay.getSystemColor(SWT.COLOR_BLUE),", "-\t\tnull,", "-\t};\t", "-\tbackMenu = new Menu(parent);", "-\tListener listener = new Listener() {", "+\tbackItem.setImage(background.getBgImage());", "+\tbackItem.addListener(SWT.Selection, new Listener() {", "-\t\t\tMenuItem item = (MenuItem)event.widget;", "-\t\t\tif (customMI == item) {", "-\t\t\t\tColorDialog dialog = new ColorDialog(parent.getShell());", "-\t\t\t\tRGB rgb = dialog.open();", "-\t\t\t\tif (rgb == null) return;", "-\t\t\t\tif (customColor != null) customColor.dispose();", "-\t\t\t\tcustomColor = new Color(display, rgb);", "-\t\t\t\tif (customImage != null) customImage.dispose();", "-\t\t\t\tcustomImage = createImage(display, customColor);", "-\t\t\t\titem.setData(new Object[]{customColor, customImage});", "-\t\t\t\titem.setImage(customImage);", "+\t\t\tif (event.widget == backItem) {", "+\t\t\t\tfinal ToolItem toolItem = (ToolItem) event.widget;", "+\t\t\t\tfinal ToolBar  toolBar = toolItem.getParent();", "+\t\t\t\tRectangle toolItemBounds = toolItem.getBounds();", "+\t\t\t\tPoint point = toolBar.toDisplay(new Point(toolItemBounds.x, toolItemBounds.y));", "+\t\t\t\tbackMenu.setLocation(point.x, point.y + toolItemBounds.height);", "+\t\t\t\tbackMenu.setVisible(true);", "-\t\t\ttabBackground = (Object[])item.getData();", "-\t\t\tbackItem.setImage((Image)tabBackground[1]);", "-\t\t\tcanvas.redraw();", "-\t};", "-\tfor (int i = 0; i < names.length; i++) {", "-\t\tMenuItem item = new MenuItem(backMenu, SWT.NONE);", "-\t\titem.setText(names[i]);", "-\t\titem.addListener(SWT.Selection, listener);", "-\t\tImage image = null;", "-\t\tif (colors[i] != null) {", "-\t\t\timage = createImage(display, colors[i]);", "-\t\t\timages.addElement(image);", "-\t\t\titem.setImage(image);", "-\t\t} else {", "-\t\t\t// custom menu item", "-\t\t\tcustomMI = item;", "-\t\t}", "-\t\titem.setData(new Object[]{colors[i], image});", "-\t\tif (tabBackground == null) {", "-\t\t\ttabBackground = (Object[])item.getData();", "-\t\t\tbackItem.setImage((Image)tabBackground[1]);", "-\t\t}", "-\t}", "+\t});", "+\t// double buffer tool item", "-", "-\tToolItem separator = new ToolItem(toolBar, SWT.SEPARATOR);", "-\tComposite comp = new Composite(toolBar, SWT.NONE);", "-\tGridData data;", "-\tGridLayout layout = new GridLayout(1, false);", "-\tlayout.verticalSpacing = 0;", "-\tlayout.marginWidth = layout.marginHeight = 3;", "-\tcomp.setLayout(layout);", "-\ttimerSpinner = new Spinner(comp, SWT.BORDER | SWT.WRAP);", "-\tdata = new GridData(SWT.CENTER, SWT.CENTER, false, false);", "-\ttimerSpinner.setLayoutData(data);", "-\tLabel label = new Label(comp, SWT.NONE);", "-\tlabel.setText(getResourceString(\"Animation\")); //$NON-NLS-1$", "-\tdata = new GridData(SWT.CENTER, SWT.CENTER, false, false);", "-\tlabel.setLayoutData(data);", "-\ttimerSpinner.setMaximum(1000);", "-\ttimerSpinner.setSelection(TIMER);", "-\ttimerSpinner.setSelection(TIMER);", "-\tseparator.setControl(comp);", "-\tseparator.setWidth(comp.computeSize(SWT.DEFAULT, SWT.DEFAULT).x);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "075d08fce869e5b6da3611529150e704", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/CTabFolderTab.java", "commitBeforeChange": "53c5711ae65b9356d75391082eda16d3c64e59aa", "commitAfterChange": "3ff82aa6e5a456ba775425383db15856918cb260", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tvoid createColorGroup ()", "signatureAfterChange": " \tvoid createColorAndFontGroup ()", "diff": ["-\tvoid createColorGroup () {", "+\tvoid createColorAndFontGroup () {", "-\t\t", "-\t\t", "-\t\t", "-\t\t", "-\t\t", "-\t", "-\t\t", "-\t\tforegroundSelectionImage = new Image (display, imageSize, imageSize);", "-\t\tbackgroundSelectionImage = new Image (display, imageSize, imageSize);", "+\t\t\t\tsetForeground = true;", "-\t\t\t\tsetExampleWidgetBackground ();", "-\t\t\t\tif (oldColor != null) oldColor.dispose ();", "-\t\t\t}", "-\t\t});", "-\t\tforegroundSelectionButton.setImage(foregroundSelectionImage); // sets the size of the button", "-\t\tforegroundSelectionButton.addSelectionListener(new SelectionAdapter() {", "-\t\t\tpublic void widgetSelected(SelectionEvent event) {", "-\t\t\t\tColor oldColor = foregroundSelectionColor;", "-\t\t\t\tif (oldColor == null) {", "-\t\t\t\t\tControl [] controls = getExampleWidgets ();", "-\t\t\t\t\tif (controls.length > 0) oldColor = controls [0].getForeground ();", "-\t\t\t\t}", "-\t\t\t\tif (oldColor != null) colorDialog.setRGB(oldColor.getRGB()); // seed dialog with current color", "-\t\t\t\tRGB rgb = colorDialog.open();", "-\t\t\t\tif (rgb == null) return;", "-\t\t\t\toldColor = foregroundSelectionColor; // save old foreground color to dispose when done", "-\t\t\t\tforegroundSelectionColor = new Color (event.display, rgb);", "-\t\t\t\tsetExampleWidgetForeground ();", "-\t\t\t\tif (oldColor != null) oldColor.dispose ();", "-\t\t\t}", "-\t\t});", "-\t\tbackgroundSelectionButton.setImage(backgroundSelectionImage); // sets the size of the button", "-\t\tbackgroundSelectionButton.addSelectionListener(new SelectionAdapter() {", "-\t\t\tpublic void widgetSelected(SelectionEvent event) {", "-\t\t\t\tColor oldColor = backgroundSelectionColor;", "-\t\t\t\tif (oldColor == null) {", "-\t\t\t\t\tControl [] controls = getExampleWidgets ();", "-\t\t\t\t\tif (controls.length > 0) oldColor = controls [0].getBackground (); // seed dialog with current color", "-\t\t\t\t}", "-\t\t\t\tif (oldColor != null) colorDialog.setRGB(oldColor.getRGB());", "-\t\t\t\tRGB rgb = colorDialog.open();", "-\t\t\t\tif (rgb == null) return;", "-\t\t\t\toldColor = backgroundSelectionColor; // save old background color to dispose when done", "-\t\t\t\tbackgroundSelectionColor = new Color (event.display, rgb);", "+\t\t\t\tsetBackground = true;", "+\t\t\t\tsetFont = true;", "-\t", "-", "-\t\t/* Add listeners to set the colors and font */", "-\t\titemFontButton.addSelectionListener(new SelectionAdapter () {", "-\t\t\tpublic void widgetSelected (SelectionEvent event) {", "-\t\t\t\tFont oldFont = itemFont;", "-\t\t\t\tif (oldFont == null) oldFont = tabFolder1.getItem (0).getFont ();", "-\t\t\t\tfontDialog.setFontList(oldFont.getFontData());", "-\t\t\t\tFontData fontData = fontDialog.open ();", "-\t\t\t\tif (fontData == null) return;", "-\t\t\t\toldFont = itemFont;", "-\t\t\t\titemFont = new Font (event.display, fontData);", "-\t\t\t\tsetItemFont ();", "-\t\t\t\tsetExampleWidgetSize ();", "-\t\t\t\tif (oldFont != null) oldFont.dispose ();", "-\t\t\t}", "-\t\t});", "-\t\t", "-\t\t", "+\t\t\t}", "+\t\t});", "+\t\tforegroundSelectionImage = new Image (display, imageSize, imageSize);", "+\t\tbackgroundSelectionImage = new Image (display, imageSize, imageSize);", "+\t\tforegroundSelectionButton.setImage(foregroundSelectionImage); // sets the size of the button", "+\t\tforegroundSelectionButton.addSelectionListener(new SelectionAdapter() {", "+\t\t\tpublic void widgetSelected(SelectionEvent event) {", "+\t\t\t\tColor oldColor = foregroundSelectionColor;", "+\t\t\t\tif (oldColor == null) {", "+\t\t\t\t\tControl [] controls = getExampleWidgets ();", "+\t\t\t\t\tif (controls.length > 0) oldColor = controls [0].getForeground ();", "+\t\t\t\t}", "+\t\t\t\tif (oldColor != null) colorDialog.setRGB(oldColor.getRGB()); // seed dialog with current color", "+\t\t\t\tRGB rgb = colorDialog.open();", "+\t\t\t\tif (rgb == null) return;", "+\t\t\t\toldColor = foregroundSelectionColor; // save old foreground color to dispose when done", "+\t\t\t\tforegroundSelectionColor = new Color (event.display, rgb);", "+\t\t\t\tsetSelectionForeground = true;", "+\t\t\t\tsetSelectionForeground ();", "+\t\t\t\tif (oldColor != null) oldColor.dispose ();", "+\t\t\t}", "+\t\t});", "+\t\tbackgroundSelectionButton.setImage(backgroundSelectionImage); // sets the size of the button", "+\t\tbackgroundSelectionButton.addSelectionListener(new SelectionAdapter() {", "+\t\t\tpublic void widgetSelected(SelectionEvent event) {", "+\t\t\t\tColor oldColor = backgroundSelectionColor;", "+\t\t\t\tif (oldColor == null) {", "+\t\t\t\t\tControl [] controls = getExampleWidgets ();", "+\t\t\t\t\tif (controls.length > 0) oldColor = controls [0].getBackground (); // seed dialog with current color", "+\t\t\t\t}", "+\t\t\t\tif (oldColor != null) colorDialog.setRGB(oldColor.getRGB());", "+\t\t\t\tRGB rgb = colorDialog.open();", "+\t\t\t\tif (rgb == null) return;", "+\t\t\t\toldColor = backgroundSelectionColor; // save old background color to dispose when done", "+\t\t\t\tbackgroundSelectionColor = new Color (event.display, rgb);", "+\t\t\t\tsetSelectionBackground = true;", "+\t\t\t\tsetSelectionBackground ();", "+\t\t\t\tif (oldColor != null) oldColor.dispose ();", "+\t\t\t}", "+\t\t});", "+\t\titemFontButton.addSelectionListener(new SelectionAdapter () {", "+\t\t\tpublic void widgetSelected (SelectionEvent event) {", "+\t\t\t\tFont oldFont = itemFont;", "+\t\t\t\tif (oldFont == null) oldFont = tabFolder1.getItem (0).getFont ();", "+\t\t\t\tfontDialog.setFontList(oldFont.getFontData());", "+\t\t\t\tFontData fontData = fontDialog.open ();", "+\t\t\t\tif (fontData == null) return;", "+\t\t\t\toldFont = itemFont;", "+\t\t\t\titemFont = new Font (event.display, fontData);", "+\t\t\t\tsetItemFont = true;", "+\t\t\t\tsetItemFont ();", "+\t\t\t\tsetExampleWidgetSize ();", "+\t\t\t\tif (oldFont != null) oldFont.dispose ();", "+\t\t\t}", "+\t\t});", "+\t\tshell.addDisposeListener(new DisposeListener() {", "+\t\t\tpublic void widgetDisposed(DisposeEvent event) {"]}], "num": 26991}
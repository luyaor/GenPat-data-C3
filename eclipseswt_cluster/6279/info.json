{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d27d3d8fc72e268801eda6f65e290439", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3e8356e6d48d2cb5562dc8435d4c189", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "c0843635ede1cb5067c2ade8a84467464c37d860", "commitAfterChange": "ea2d29ea4c024a608cde22f9f485e4382812e9cf", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create(Composite parent, int style)", "signatureAfterChange": "  public void create(Composite parent, int style)", "diff": ["-\t\t\t\tversion = IEVersion * 1000;", "+\t\t\t\t/*", "+\t\t\t\t * By default in Embedded IE the docuemntMode is Quirks(5)", "+\t\t\t\t * mode unless !DOCTYPE directives is defined in the HTML.", "+\t\t\t\t * As per MSDN IE8 and onwards, there is a way we could hint", "+\t\t\t\t * embedded IE to use current documentMode via appropriate", "+\t\t\t\t * version value in the registry. Refer bug 342145.", "+\t\t\t\t * ", "+\t\t\t\t * Complete list of IE emulation modes is listed on MSDN:", "+\t\t\t\t * http://msdn.microsoft", "+\t\t\t\t * .com/en-us/library/ie/ee330730%28v=vs", "+\t\t\t\t * .85%29.aspx#browser_emulation", "+\t\t\t\t */", "+\t\t\t\tif (IEVersion >= 10) {", "+\t\t\t\t\tversion = IEVersion * 1000 + 1;", "+\t\t\t\t}", "+\t\t\t\telse if (IEVersion >= 8) {", "+\t\t\t\t\tversion = IEVersion * 1111;", "+\t\t\t\t}", "+\t\t\t\telse {", "+\t\t\t\t\tversion = IEVersion * 1000;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c13d8bfa4de32e11e4dd760a75f855ff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "1c5467f79f5b1c73782459594b2f72f13320a777", "commitAfterChange": "177f753d5ec596f70989cac04629c9317b4bac19", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public Image (Device device, String filename)", "signatureAfterChange": " public Image (Device device, String filename)", "diff": ["-\t\t\t\t\tGdip.Bitmap_GetHICON(bitmap, hicon);", "+\t\t\t\t\tstatus = Gdip.Bitmap_GetHICON(bitmap, hicon);", "-\t\t\t\t\t\t\tGdip.Bitmap_LockBits(bitmap, 0, 0, pixelFormat, lockedBitmapData);", "-\t\t\t\t\t\t\tBitmapData bitmapData = new BitmapData();", "-\t\t\t\t\t\t\tGdip.MoveMemory(bitmapData, lockedBitmapData);", "-\t\t\t\t\t\t\tint stride = bitmapData.Stride;", "-\t\t\t\t\t\t\tint /*long*/ pixels = bitmapData.Scan0;", "-\t\t\t\t\t\t\tint depth = 0, scanlinePad = 4, transparentPixel = -1;", "-\t\t\t\t\t\t\tswitch (bitmapData.PixelFormat) {", "-\t\t\t\t\t\t\t\tcase Gdip.PixelFormat1bppIndexed: depth = 1; break;", "-\t\t\t\t\t\t\t\tcase Gdip.PixelFormat4bppIndexed: depth = 4; break;", "-\t\t\t\t\t\t\t\tcase Gdip.PixelFormat8bppIndexed: depth = 8; break;", "-\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppARGB1555:", "-\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB555:", "-\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB565: depth = 16; break;", "-\t\t\t\t\t\t\t\tcase Gdip.PixelFormat24bppRGB: depth = 24; break;", "-\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppRGB:", "-\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppARGB: depth = 32; break;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (depth != 0) {", "-\t\t\t\t\t\t\t\tPaletteData paletteData = null;", "+\t\t\t\t\t\t\tstatus = Gdip.Bitmap_LockBits(bitmap, 0, 0, pixelFormat, lockedBitmapData);", "+\t\t\t\t\t\t\tif (status == 0) {", "+\t\t\t\t\t\t\t\tBitmapData bitmapData = new BitmapData();", "+\t\t\t\t\t\t\t\tGdip.MoveMemory(bitmapData, lockedBitmapData);", "+\t\t\t\t\t\t\t\tint stride = bitmapData.Stride;", "+\t\t\t\t\t\t\t\tint /*long*/ pixels = bitmapData.Scan0;", "+\t\t\t\t\t\t\t\tint depth = 0, scanlinePad = 4, transparentPixel = -1;", "-\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat1bppIndexed:", "-\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat4bppIndexed:", "-\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat8bppIndexed:", "-\t\t\t\t\t\t\t\t\t\tint paletteSize = Gdip.Image_GetPaletteSize(bitmap);", "-\t\t\t\t\t\t\t\t\t\tint /*long*/ hHeap = OS.GetProcessHeap();", "-\t\t\t\t\t\t\t\t\t\tint /*long*/ palette = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, paletteSize);", "-\t\t\t\t\t\t\t\t\t\tif (palette == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\t\t\t\t\t\t\t\tGdip.Image_GetPalette(bitmap, palette, paletteSize);", "-\t\t\t\t\t\t\t\t\t\tColorPalette colorPalette = new ColorPalette();", "-\t\t\t\t\t\t\t\t\t\tGdip.MoveMemory(colorPalette, palette, ColorPalette.sizeof);", "-\t\t\t\t\t\t\t\t\t\tint[] entries = new int[colorPalette.Count];", "-\t\t\t\t\t\t\t\t\t\tOS.MoveMemory(entries, palette + 8, entries.length * 4);", "-\t\t\t\t\t\t\t\t\t\tOS.HeapFree(hHeap, 0, palette);", "-\t\t\t\t\t\t\t\t\t\tRGB[] rgbs = new RGB[colorPalette.Count];", "-\t\t\t\t\t\t\t\t\t\tpaletteData = new PaletteData(rgbs);", "-\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++) {", "-\t\t\t\t\t\t\t\t\t\t\tif (((entries[i] >> 24) & 0xFF) == 0 && (colorPalette.Flags & Gdip.PaletteFlagsHasAlpha) != 0) {", "-\t\t\t\t\t\t\t\t\t\t\t\ttransparentPixel = i;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\trgbs[i] = new RGB(((entries[i] & 0xFF0000) >> 16), ((entries[i] & 0xFF00) >> 8), ((entries[i] & 0xFF) >> 0));", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat1bppIndexed: depth = 1; break;", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat4bppIndexed: depth = 4; break;", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat8bppIndexed: depth = 8; break;", "-\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB555: paletteData = new PaletteData(0x7C00, 0x3E0, 0x1F); break;", "-\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB565: paletteData = new PaletteData(0xF800, 0x7E0, 0x1F); break;", "-\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat24bppRGB: paletteData = new PaletteData(0xFF, 0xFF00, 0xFF0000); break;", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB555:", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB565: depth = 16; break;", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat24bppRGB: depth = 24; break;", "-\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppARGB: paletteData = new PaletteData(0xFF00, 0xFF0000, 0xFF000000); break;", "+\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppARGB: depth = 32; break;", "-\t\t\t\t\t\t\t\tbyte[] data = new byte[stride * height], alphaData = null;", "-\t\t\t\t\t\t\t\tOS.MoveMemory(data, pixels, data.length);", "-\t\t\t\t\t\t\t\tswitch (bitmapData.PixelFormat) {", "-\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppARGB1555:", "-\t\t\t\t\t\t \t\t \t\talphaData = new byte[width * height];", "-\t\t\t\t\t\t \t\t \t\tfor (int i = 1, j = 0; i < data.length; i += 2, j++) {", "-\t\t\t\t\t\t \t\t \t\t\talphaData[j] = (byte)((data[i] & 0x80) != 0 ? 255 : 0);", "-\t\t\t\t\t\t \t\t \t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppARGB:", "-\t\t\t\t\t\t \t\t \t\talphaData = new byte[width * height];", "-\t\t\t\t\t\t \t\t \t\tfor (int i = 3, j = 0; i < data.length; i += 4, j++) {", "-\t\t\t\t\t\t \t\t \t\t\talphaData[j] = data[i];", "-\t\t\t\t\t\t \t\t \t\t}", "-\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\tif (depth != 0) {", "+\t\t\t\t\t\t\t\t\tPaletteData paletteData = null;", "+\t\t\t\t\t\t\t\t\tswitch (bitmapData.PixelFormat) {", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat1bppIndexed:", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat4bppIndexed:", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat8bppIndexed:", "+\t\t\t\t\t\t\t\t\t\t\tint paletteSize = Gdip.Image_GetPaletteSize(bitmap);", "+\t\t\t\t\t\t\t\t\t\t\tint /*long*/ hHeap = OS.GetProcessHeap();", "+\t\t\t\t\t\t\t\t\t\t\tint /*long*/ palette = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, paletteSize);", "+\t\t\t\t\t\t\t\t\t\t\tif (palette == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\t\t\t\t\t\t\t\tGdip.Image_GetPalette(bitmap, palette, paletteSize);", "+\t\t\t\t\t\t\t\t\t\t\tColorPalette colorPalette = new ColorPalette();", "+\t\t\t\t\t\t\t\t\t\t\tGdip.MoveMemory(colorPalette, palette, ColorPalette.sizeof);", "+\t\t\t\t\t\t\t\t\t\t\tint[] entries = new int[colorPalette.Count];", "+\t\t\t\t\t\t\t\t\t\t\tOS.MoveMemory(entries, palette + 8, entries.length * 4);", "+\t\t\t\t\t\t\t\t\t\t\tOS.HeapFree(hHeap, 0, palette);", "+\t\t\t\t\t\t\t\t\t\t\tRGB[] rgbs = new RGB[colorPalette.Count];", "+\t\t\t\t\t\t\t\t\t\t\tpaletteData = new PaletteData(rgbs);", "+\t\t\t\t\t\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++) {", "+\t\t\t\t\t\t\t\t\t\t\t\tif (((entries[i] >> 24) & 0xFF) == 0 && (colorPalette.Flags & Gdip.PaletteFlagsHasAlpha) != 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\ttransparentPixel = i;", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\trgbs[i] = new RGB(((entries[i] & 0xFF0000) >> 16), ((entries[i] & 0xFF00) >> 8), ((entries[i] & 0xFF) >> 0));", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppARGB1555:", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB555: paletteData = new PaletteData(0x7C00, 0x3E0, 0x1F); break;", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppRGB565: paletteData = new PaletteData(0xF800, 0x7E0, 0x1F); break;", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat24bppRGB: paletteData = new PaletteData(0xFF, 0xFF00, 0xFF0000); break;", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppRGB:", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppARGB: paletteData = new PaletteData(0xFF00, 0xFF0000, 0xFF000000); break;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbyte[] data = new byte[stride * height], alphaData = null;", "+\t\t\t\t\t\t\t\t\tOS.MoveMemory(data, pixels, data.length);", "+\t\t\t\t\t\t\t\t\tswitch (bitmapData.PixelFormat) {", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat16bppARGB1555:", "+\t\t\t\t\t\t\t \t\t \t\talphaData = new byte[width * height];", "+\t\t\t\t\t\t\t \t\t \t\tfor (int i = 1, j = 0; i < data.length; i += 2, j++) {", "+\t\t\t\t\t\t\t \t\t \t\t\talphaData[j] = (byte)((data[i] & 0x80) != 0 ? 255 : 0);", "+\t\t\t\t\t\t\t \t\t \t\t}", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase Gdip.PixelFormat32bppARGB:", "+\t\t\t\t\t\t\t \t\t \t\talphaData = new byte[width * height];", "+\t\t\t\t\t\t\t \t\t \t\tfor (int i = 3, j = 0; i < data.length; i += 4, j++) {", "+\t\t\t\t\t\t\t \t\t \t\t\talphaData[j] = data[i];", "+\t\t\t\t\t\t\t \t\t \t\t}", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tImageData img = new ImageData(width, height, depth, paletteData, scanlinePad, data);", "+\t\t\t\t\t\t\t\t\timg.transparentPixel = transparentPixel;", "+\t\t\t\t\t\t\t\t\timg.alphaData = alphaData;", "+\t\t\t\t\t\t\t\t\tinit(img);", "-\t\t\t\t\t\t\t\tGdip.BitmapData_delete(lockedBitmapData);", "-\t\t\t\t\t\t\t\tImageData img = new ImageData(width, height, depth, paletteData, scanlinePad, data);", "-\t\t\t\t\t\t\t\timg.transparentPixel = transparentPixel;", "-\t\t\t\t\t\t\t\timg.alphaData = alphaData;", "-\t\t\t\t\t\t\t\tinit(img);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\terror = SWT.ERROR_INVALID_IMAGE;\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tGdip.BitmapData_delete(lockedBitmapData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b684c35e9804a8abb316d515864e0df", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "b9002aa9a9dbc05b10ffa6d8c8f26124c9100a3b", "commitAfterChange": "dab04b59098116bd0aa6cb8ca76ce653fc22e7c8", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " public FontMetrics getFontMetrics()", "signatureAfterChange": " public FontMetrics getFontMetrics()", "diff": ["-\t\t\t\t\t\t */", "-\t\t\t\t\t\tint sum = 0, count = 0;", "-\t\t\t\t\t\tint cols = fontStruct.max_char_or_byte2 - fontStruct.min_char_or_byte2 + 1;", "-\t\t\t\t\t\tint perCharPtr = fontStruct.per_char;", "-\t\t\t\t\t\tXCharStruct struct = new XCharStruct();", "-\t\t\t\t\t\tfor (int index = 0; index < cols; index++) {", "-\t\t\t\t\t\t\tOS.memmove(struct, perCharPtr + (index * XCharStruct.sizeof), XCharStruct.sizeof);", "-\t\t\t\t\t\t\tint w = struct.width;", "-\t\t\t\t\t\t\tif (w != 0) {", "-\t\t\t\t\t\t\t\tsum += w;", "-\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t */\t\t\t\t\t\t", "+\t\t\t\t\t\tint perCharPtr = fontStruct.per_char;\t", "+\t\t\t\t\t\tif (perCharPtr == 0) {", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t * If perCharPtr is 0 then all glyphs in the font have", "+\t\t\t\t\t\t\t * the same width as the font's maximum width.  So no", "+\t\t\t\t\t\t\t * averaging is required.", "+\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\t averageCharWidth = fontStruct.max_bounds_width;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint sum = 0, count = 0;", "+\t\t\t\t\t\t\tint cols = fontStruct.max_char_or_byte2 - fontStruct.min_char_or_byte2 + 1;", "+\t\t\t\t\t\t\tXCharStruct struct = new XCharStruct();", "+\t\t\t\t\t\t\tfor (int index = 0; index < cols; index++) {", "+\t\t\t\t\t\t\t\tOS.memmove(struct, perCharPtr + (index * XCharStruct.sizeof), XCharStruct.sizeof);", "+\t\t\t\t\t\t\t\tint w = struct.width;", "+\t\t\t\t\t\t\t\tif (w != 0) {", "+\t\t\t\t\t\t\t\t\tsum += w;", "+\t\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\taverageCharWidth += sum / count;", "-\t\t\t\t\t\taverageCharWidth += sum / count;", "-\t\t\t\t\t\t\tint sum = 0, count = 0;", "-\t\t\t\t\t\t\tint cols = fontStruct.max_char_or_byte2 - fontStruct.min_char_or_byte2 + 1;", "-\t\t\t\t\t\t\tXCharStruct struct = new XCharStruct();", "-\t\t\t\t\t\t\tfor (int index = 0; index < cols; index++) {", "-\t\t\t\t\t\t\t\tOS.memmove(struct, perCharPtr + (index * XCharStruct.sizeof), XCharStruct.sizeof);", "-\t\t\t\t\t\t\t\tint w = struct.width;", "-\t\t\t\t\t\t\t\tif (w != 0) {", "-\t\t\t\t\t\t\t\t\tsum += w;", "-\t\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\tif (perCharPtr == 0) {", "+\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t * If perCharPtr is 0 then all glyphs in the font have", "+\t\t\t\t\t\t\t\t * the same width as the font's maximum width.  So no", "+\t\t\t\t\t\t\t\t * averaging is required.", "+\t\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\t\t averageCharWidth = fontStruct.max_bounds_width;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tint sum = 0, count = 0;", "+\t\t\t\t\t\t\t\tint cols = fontStruct.max_char_or_byte2 - fontStruct.min_char_or_byte2 + 1;", "+\t\t\t\t\t\t\t\tXCharStruct struct = new XCharStruct();", "+\t\t\t\t\t\t\t\tfor (int index = 0; index < cols; index++) {", "+\t\t\t\t\t\t\t\t\tOS.memmove(struct, perCharPtr + (index * XCharStruct.sizeof), XCharStruct.sizeof);", "+\t\t\t\t\t\t\t\t\tint w = struct.width;", "+\t\t\t\t\t\t\t\t\tif (w != 0) {", "+\t\t\t\t\t\t\t\t\t\tsum += w;", "+\t\t\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\taverageCharWidth += sum / count;", "-\t\t\t\t\t\t\taverageCharWidth += sum / count;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd5121bd2483775b7f5a67c278bef76b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "8e9705d93325d1390b1c14aa0ba55b9649457ef3", "commitAfterChange": "6bc2e4ca5332d0ed9c2e86c21bb2d52348bc9673", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r int clearFunc(int clipboard,int user_data_or_owner)", "signatureAfterChange": "\r \r int clearFunc(int clipboard,int user_data_or_owner)", "diff": ["-\tdata = null;\r", "-\tdataTypes = null;\r", "+\tif (clipboard == pGtkClipboard) {\r", "+\t\tonClipboard = false;\r", "+\t}\r", "+\tif (clipboard == pGtkPrimary) {\r", "+\t\tonPrimary = false;\r", "+\t}\r", "+\tif (!onClipboard && !onPrimary) {\t\r", "+\t\tdata = null;\r", "+\t\tdataTypes = null;\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48a832a2931d17aa25c96f62aa096442", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "f842226b7503c6c3a5f7116f813ed0cd9148a642", "commitAfterChange": "e0003d9c811c68fc81bd8899d927f37545882b5d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  void destroyItem (TableColumn column)", "signatureAfterChange": "  void destroyItem (TableColumn column)", "diff": ["-\t\t\tString [] strings = item.strings;", "-\t\t\tif (strings != null) {", "-\t\t\t\tif (columnCount == 0) {", "-\t\t\t\t\titem.strings = null;", "-\t\t\t\t} else {", "+\t\t\tif (columnCount == 0) {", "+\t\t\t\titem.strings = null;", "+\t\t\t} else {", "+\t\t\t\tString [] strings = item.strings;", "+\t\t\t\tif (strings != null) {", "+\t\t\t\t} else {", "+\t\t\t\t\tif (index == 0) item.text = \"\";", "-\t\t\tImage [] images = item.images;", "-\t\t\tif (images != null) {", "-\t\t\t\tif (columnCount == 0) {", "-\t\t\t\t\titem.images = null;", "-\t\t\t\t} else {", "+\t\t\tif (columnCount == 0) {", "+\t\t\t\titem.images = null;", "+\t\t\t} else {", "+\t\t\t\tImage [] images = item.images;", "+\t\t\t\tif (images != null) {", "+\t\t\t\t} else {", "+\t\t\t\t\tif (index == 0) item.image = null;"]}], "num": 6279}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5830ce8222459b643ce7edd006658d37", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ddc08f468225109c7e38cc3286e1a13", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "14a489530a23f9a98c44510d056f7f726ca954fe", "commitAfterChange": "3518db6648d68a0e9ff0c939ecd457985c6ae47b", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 64, "signatureBeforeChange": " int XExposure (int w, int client_data, int call_data, int continue_to_dispatch)", "signatureAfterChange": " int XExposure (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-\tif ((style & SWT.NO_MERGE_PAINTS) != 0) {", "-\t\treturn super.XExposure (w, client_data, call_data, continue_to_dispatch);", "-\t}", "-\tXExposeEvent xEvent = new XExposeEvent ();", "-\tOS.memmove (xEvent, call_data, XExposeEvent.sizeof);", "-\tint exposeCount = xEvent.count;", "-\tif (exposeCount == 0) {", "-\t\tif (OS.XEventsQueued (xEvent.display, OS.QueuedAfterReading) != 0) {", "-\t\t\tint xEvent1 = OS.XtMalloc (XEvent.sizeof);", "-\t\t\tdisplay.exposeCount = display.lastExpose = 0;", "-\t\t\tint checkExposeProc = display.checkExposeProc;", "-\t\t\tOS.XCheckIfEvent (xEvent.display, xEvent1, checkExposeProc, xEvent.window);", "-\t\t\texposeCount = display.exposeCount;", "-\t\t\tint lastExpose = display.lastExpose;", "-\t\t\tif (exposeCount != 0 && lastExpose != 0) {", "-\t\t\t\tXExposeEvent xExposeEvent = display.xExposeEvent;", "-\t\t\t\tOS.memmove (xExposeEvent, lastExpose, XExposeEvent.sizeof);", "-\t\t\t\txExposeEvent.count = 0;", "-\t\t\t\tOS.memmove (lastExpose, xExposeEvent, XExposeEvent.sizeof);", "-\t\t\t}", "-\t\t\tOS.XtFree (xEvent1);", "-\t\t}", "-\t}", "-\tif (exposeCount == 0 && damagedRegion == 0) {", "-\t\treturn super.XExposure (w, client_data, call_data, continue_to_dispatch);", "-\t}", "-\tif (exposeCount != 0) return 0;", "+\tif ((style & SWT.NO_MERGE_PAINTS) == 0) {", "+\t\tXExposeEvent xEvent = new XExposeEvent ();", "+\t\tOS.memmove (xEvent, call_data, XExposeEvent.sizeof);", "+\t\tint exposeCount = xEvent.count;", "+\t\tif (exposeCount == 0) {", "+\t\t\tif (OS.XEventsQueued (xEvent.display, OS.QueuedAfterReading) != 0) {", "+\t\t\t\tint xEvent1 = OS.XtMalloc (XEvent.sizeof);", "+\t\t\t\tdisplay.exposeCount = display.lastExpose = 0;", "+\t\t\t\tint checkExposeProc = display.checkExposeProc;", "+\t\t\t\tOS.XCheckIfEvent (xEvent.display, xEvent1, checkExposeProc, xEvent.window);", "+\t\t\t\texposeCount = display.exposeCount;", "+\t\t\t\tint lastExpose = display.lastExpose;", "+\t\t\t\tif (exposeCount != 0 && lastExpose != 0) {", "+\t\t\t\t\tXExposeEvent xExposeEvent = display.xExposeEvent;", "+\t\t\t\t\tOS.memmove (xExposeEvent, lastExpose, XExposeEvent.sizeof);", "+\t\t\t\t\txExposeEvent.count = 0;", "+\t\t\t\t\tOS.memmove (lastExpose, xExposeEvent, XExposeEvent.sizeof);", "+\t\t\t\t}", "+\t\t\t\tOS.XtFree (xEvent1);", "+\t\t\t}", "+\t\t}", "+\t\tif (exposeCount != 0) return 0;", "+\t}", "-\tEvent event = new Event ();", "-\tGCData data = new GCData();", "-\tint rgn = damagedRegion;", "+\tint damageRgn = damagedRegion;", "-\tdata.damageRgn = rgn;", "-\tGC gc = event.gc = GC.motif_new(this, data);", "-\tOS.XSetRegion(xDisplay, gc.handle, rgn);", "+\tGCData data = new GCData ();", "+\tdata.damageRgn = damageRgn;", "+\tGC gc = GC.motif_new (this, data);", "+\tOS.XSetRegion (xDisplay, gc.handle, damageRgn);", "-\tOS.XClipBox (rgn, rect);", "+\tOS.XClipBox (damageRgn, rect);", "+\tGC paintGC = null;", "+\tImage image = null;", "+\tif ((style & SWT.DOUBLE_BUFFERED) != 0) {", "+\t\tRectangle client = getClientArea ();", "+\t\tint width = Math.min (client.width, rect.x + rect.width);", "+\t\tint height = Math.min (client.height, rect.y + rect.height);", "+\t\timage = new Image (display, width, height);", "+\t\tpaintGC = gc;", "+\t\tGCData imageGCData = new GCData ();", "+\t\timageGCData.damageRgn = damageRgn; ", "+\t\tgc = GC.motif_new (image, imageGCData);", "+\t\tgc.setForeground (getForeground ());", "+\t\tgc.setBackground (getBackground ());", "+\t\tgc.setFont (getFont ());", "+\t\tif ((style & SWT.NO_BACKGROUND) != 0) {", "+\t\t\tpaintGC.copyArea(image, 0, 0);", "+\t\t} else {", "+\t\t\tgc.fillRectangle(0, 0, width, height);", "+\t\t}", "+\t}", "+\tEvent event = new Event ();", "+\tevent.gc = gc;", "-\tgc.dispose ();", "-\tOS.XDestroyRegion (rgn);", "+\tif ((style & SWT.DOUBLE_BUFFERED) != 0) {", "+\t\tgc.dispose ();", "+\t\tif (!isDisposed ()) {", "+\t\t\tpaintGC.drawImage (image, 0, 0);", "+\t\t}", "+\t\timage.dispose ();", "+\t\tgc = paintGC;", "+\t}\t", "+\tgc.dispose ();", "+\tOS.XDestroyRegion (damageRgn);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f87ca72afb76b31535db40b63b1b40e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 38, "signatureBeforeChange": "\r int processPaint (int callData)", "signatureAfterChange": "\r int XExposure (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processPaint (int callData) {\r", "-\tif ((state & CANVAS) == 0) {\r", "-\t\treturn super.processPaint (callData);\r", "-\t}\r", "-\tif (!hooks (SWT.Paint) && !filters (SWT.Paint)) return 0;\r", "-\tif ((style & SWT.NO_MERGE_PAINTS) != 0) {\r", "-\t\treturn super.processPaint (callData);\r", "-\t}\r", "-\tXExposeEvent xEvent = new XExposeEvent ();\r", "-\tOS.memmove (xEvent, callData, XExposeEvent.sizeof);\r", "-\tint exposeCount = xEvent.count;\r", "-\tif (exposeCount == 0) {\r", "-\t\tif (OS.XEventsQueued (xEvent.display, OS.QueuedAfterReading) != 0) {\r", "-\t\t\tXAnyEvent xAnyEvent = new XAnyEvent ();\r", "-\t\t\tDisplay display = getDisplay ();\r", "-\t\t\tdisplay.exposeCount = display.lastExpose = 0;\r", "-\t\t\tint checkExposeProc = display.checkExposeProc;\r", "-\t\t\tOS.XCheckIfEvent (xEvent.display, xAnyEvent, checkExposeProc, xEvent.window);\r", "-\t\t\texposeCount = display.exposeCount;\r", "-\t\t\tint lastExpose = display.lastExpose;\r", "-\t\t\tif (exposeCount != 0 && lastExpose != 0) {\r", "-\t\t\t\tXExposeEvent xExposeEvent = display.xExposeEvent;\r", "-\t\t\t\tOS.memmove (xExposeEvent, lastExpose, XExposeEvent.sizeof);\r", "-\t\t\t\txExposeEvent.count = 0;\r", "-\t\t\t\tOS.memmove (lastExpose, xExposeEvent, XExposeEvent.sizeof);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\tif (exposeCount == 0 && damagedRegion == 0) {\r", "-\t\treturn super.processPaint (callData);\r", "-\t}\r", "-\tif (damagedRegion == 0) damagedRegion = OS.XCreateRegion ();\r", "-\tOS.XtAddExposureToRegion (callData, damagedRegion);\r", "-\tif (exposeCount != 0) return 0;\r", "-\tint xDisplay = OS.XtDisplay (handle);\r", "-\tif (xDisplay == 0) return 0;\r", "-\tEvent event = new Event ();\r", "-\tGC gc = event.gc = new GC (this);\r", "-\tRegion region = Region.motif_new (damagedRegion);\r", "-\tgc.setClipping (region);\r", "-\tXRectangle rect = new XRectangle ();\r", "-\tOS.XClipBox (damagedRegion, rect);\r", "-\tevent.x = rect.x;  event.y = rect.y;\r", "-\tevent.width = rect.width;  event.height = rect.height;\r", "-\tsendEvent (SWT.Paint, event);\r", "-\tgc.dispose ();\r", "-\tevent.gc = null;\r", "-\tOS.XDestroyRegion (damagedRegion);\r", "-\tdamagedRegion = 0;\r", "-\treturn 0;\r", "+int XExposure (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tif ((state & CANVAS) == 0) {\r", "+\t\treturn super.XExposure (w, client_data, call_data, continue_to_dispatch);\r", "+\t}\r", "+\tif (!hooks (SWT.Paint) && !filters (SWT.Paint)) return 0;\r", "+\tif ((style & SWT.NO_MERGE_PAINTS) != 0) {\r", "+\t\treturn super.XExposure (w, client_data, call_data, continue_to_dispatch);\r", "+\t}\r", "+\tXExposeEvent xEvent = new XExposeEvent ();\r", "+\tOS.memmove (xEvent, call_data, XExposeEvent.sizeof);\r", "+\tint exposeCount = xEvent.count;\r", "+\tif (exposeCount == 0) {\r", "+\t\tif (OS.XEventsQueued (xEvent.display, OS.QueuedAfterReading) != 0) {\r", "+\t\t\tXAnyEvent xAnyEvent = new XAnyEvent ();\r", "+\t\t\tDisplay display = getDisplay ();\r", "+\t\t\tdisplay.exposeCount = display.lastExpose = 0;\r", "+\t\t\tint checkExposeProc = display.checkExposeProc;\r", "+\t\t\tOS.XCheckIfEvent (xEvent.display, xAnyEvent, checkExposeProc, xEvent.window);\r", "+\t\t\texposeCount = display.exposeCount;\r", "+\t\t\tint lastExpose = display.lastExpose;\r", "+\t\t\tif (exposeCount != 0 && lastExpose != 0) {\r", "+\t\t\t\tXExposeEvent xExposeEvent = display.xExposeEvent;\r", "+\t\t\t\tOS.memmove (xExposeEvent, lastExpose, XExposeEvent.sizeof);\r", "+\t\t\t\txExposeEvent.count = 0;\r", "+\t\t\t\tOS.memmove (lastExpose, xExposeEvent, XExposeEvent.sizeof);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\tif (exposeCount == 0 && damagedRegion == 0) {\r", "+\t\treturn super.XExposure (w, client_data, call_data, continue_to_dispatch);\r", "+\t}\r", "+\tif (damagedRegion == 0) damagedRegion = OS.XCreateRegion ();\r", "+\tOS.XtAddExposureToRegion (call_data, damagedRegion);\r", "+\tif (exposeCount != 0) return 0;\r", "+\tint xDisplay = OS.XtDisplay (handle);\r", "+\tif (xDisplay == 0) return 0;\r", "+\tEvent event = new Event ();\r", "+\tGC gc = event.gc = new GC (this);\r", "+\tRegion region = Region.motif_new (damagedRegion);\r", "+\tgc.setClipping (region);\r", "+\tXRectangle rect = new XRectangle ();\r", "+\tOS.XClipBox (damagedRegion, rect);\r", "+\tevent.x = rect.x;  event.y = rect.y;\r", "+\tevent.width = rect.width;  event.height = rect.height;\r", "+\tsendEvent (SWT.Paint, event);\r", "+\tgc.dispose ();\r", "+\tevent.gc = null;\r", "+\tOS.XDestroyRegion (damagedRegion);\r", "+\tdamagedRegion = 0;\r", "+\treturn 0;\r", "+}\r"]}], "num": 36850}
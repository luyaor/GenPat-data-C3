{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf3996e39c2de7b825dbf6f0b9326484", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9c427ba623480c7b81a6ef8cd466002", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/graphics/ImageData.java", "commitBeforeChange": "881f889067c32dc9cc929042fa81de775a852ed3", "commitAfterChange": "3157b86f8a6b5c49725c9486eede898beaf8ba2d", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "\r static void blit(int op, byte[] srcData, int srcDepth, int srcStride, int srcOrder, int srcX, int srcY, int srcWidth, int srcHeight, byte[] srcReds, byte[] srcGreens, byte[] srcBlues, int srcGlobalAlpha, byte[] srcAlphaData, int srcAlphaStride, byte[] destData, int destDepth, int destStride, int destOrder, int destX, int destY, int destWidth, int destHeight, int destRedMask, int destGreenMask, int destBlueMask, boolean flipX, boolean flipY)", "signatureAfterChange": "\r static final void blit(int op,\r \tbyte[] srcData, int srcDepth, int srcStride, int srcOrder,\r \tint srcX, int srcY, int srcWidth, int srcHeight,\r \tbyte[] srcReds, byte[] srcGreens, byte[] srcBlues,\r \tint alphaMode, byte[] alphaData, int alphaStride,\r \tbyte[] destData, int destDepth, int destStride, int destOrder,\r \tint destX, int destY, int destWidth, int destHeight,\r \tint destRedMask, int destGreenMask, int destBlueMask,\r \tboolean flipX, boolean flipY)", "diff": ["-static void blit(int op, byte[] srcData, int srcDepth, int srcStride, int srcOrder, int srcX, int srcY, int srcWidth, int srcHeight, byte[] srcReds, byte[] srcGreens, byte[] srcBlues, int srcGlobalAlpha, byte[] srcAlphaData, int srcAlphaStride, byte[] destData, int destDepth, int destStride, int destOrder, int destX, int destY, int destWidth, int destHeight, int destRedMask, int destGreenMask, int destBlueMask, boolean flipX, boolean flipY) {\r", "-\tint xs1, ys1, xs2, ys2, xd1, yd1, xd2, yd2;\r", "-\tint dyd, dys, ey, dy, dyd2, dys2, ys, yd;\r", "-\tshort syd, sys;\r", "-\tint dxd, dxs, ex, dx, dxd2, dxs2, xs;\r", "-\tshort sxd, sxs, sas;\r", "-\tint sp, dp, sap = 0;\r", "-\tint sr = 0, sg = 0, sb = 0, sa = 0, dr = 0, dg = 0, db = 0, da = 0;\r", "-\tint srcPixel = 0, destPixel = 0;\r", "-\tshort do0 = 0, do1 = 1, do2 = 2, do3 = 3;\r", "-\tint destRedShift, destGreenShift, destBlueShift;\r", "-\tint i, offset = 0;\r", "-\tbyte[] srcMasks = null;\r", "-\tint srcN = 1 << srcDepth;\r", "-\tint[] mapping = null;\r", "-\t\r", "-\tdestRedShift = 32 - getMSBOffset(destRedMask);\r", "-\tdestGreenShift = 32 - getMSBOffset(destGreenMask);\r", "-\tdestBlueShift = 32 - getMSBOffset(destBlueMask);\r", "-\tif (srcReds != null && srcN > srcReds.length) srcN = srcReds.length;\r", "-\tif (op == BLIT_SRC) {\r", "-\t\tmapping = new int[srcN];\t\t\r", "-\t\tfor (i = 0; i < srcN; i++) {\r", "-\t\t\tdr = srcReds[i] & 0xFF;\r", "-\t\t\tdg = srcGreens[i] & 0xFF;\r", "-\t\t\tdb = srcBlues[i] & 0xFF;\r", "-\t\t\tmapping[i] = \r", "-\t\t\t\t(((dr << 24) >>> destRedShift) & destRedMask) | \r", "-\t\t\t\t(((dg << 24) >>> destGreenShift) & destGreenMask) |\r", "-\t\t\t\t(((db << 24) >>> destBlueShift) & destBlueMask);\r", "-\t\t}\r", "-\t}\r", "+static final void blit(int op,\r", "+\tbyte[] srcData, int srcDepth, int srcStride, int srcOrder,\r", "+\tint srcX, int srcY, int srcWidth, int srcHeight,\r", "+\tbyte[] srcReds, byte[] srcGreens, byte[] srcBlues,\r", "+\tint alphaMode, byte[] alphaData, int alphaStride,\r", "+\tbyte[] destData, int destDepth, int destStride, int destOrder,\r", "+\tint destX, int destY, int destWidth, int destHeight,\r", "+\tint destRedMask, int destGreenMask, int destBlueMask,\r", "+\tboolean flipX, boolean flipY) {\r", "+\tif ((destWidth <= 0) || (destHeight <= 0) || (alphaMode == ALPHA_TRANSPARENT)) return;\r", "+\r", "+\t// these should be supplied as params later\r", "+\tfinal int destAlphaMask = 0;\r", "+\r", "+\t/*** Prepare scaling data ***/\r", "+\tfinal int dwm1 = destWidth - 1;\r", "+\tfinal int sfxi = (dwm1 != 0) ? ((srcWidth << 16) - 1) / dwm1 : 0;\r", "+\tfinal int dhm1 = destHeight - 1;\r", "+\tfinal int sfyi = (dhm1 != 0) ? ((srcHeight << 16) - 1) / dhm1 : 0;\r", "+\r", "+\t/*** Prepare source-related data ***/\r", "+\tfinal int stype;\r", "-\t\tcase 1: srcMasks = msbMasks1; break;\r", "-\t\tcase 2: srcMasks = masks2; break;\r", "-\t}\r", "-\tif (srcOrder == LSB_FIRST) {\r", "-\t\tswitch (srcDepth) {\r", "-\t\t\tcase 1: srcMasks = lsbMasks1; break;\r", "-\t\t}\r", "-\t}\r", "-\tif (destOrder == LSB_FIRST) {\r", "-\t\tswitch (destDepth) {\r", "-\t\t\tcase 16: do0 = 1; do1 = 0; break;\r", "-\t\t\tcase 24: do0 = 2; do1 = 1; do2 = 0; break;\r", "-\t\t\tcase 32: do0 = 3; do1 = 2; do2 = 1; do3 = 0; break;\r", "-\t\t}\r", "-\t}\r", "-\r", "-\txs1 = srcX; xs2 = srcX + srcWidth - 1;\r", "-\tys1 = srcY; ys2 = srcY + srcHeight - 1;\r", "-\tif (flipX) {\r", "-\t\txd1 = destX + destWidth - 1;\r", "-\t\txd2 = destX;\r", "-\t} else {\r", "-\t\txd1 = destX;\r", "-\t\txd2 = destX + destWidth - 1;\r", "-\t}\r", "-\tif (flipY) {\r", "-\t\tyd1 = destY + destHeight - 1;\r", "-\t\tyd2 = destY;\r", "-\t} else {\r", "-\t\tyd1 = destY;\r", "-\t\tyd2 = destY + destHeight - 1;\r", "-\t}\r", "-\r", "-\t/* Y preliminary calculations */\r", "-\tdyd = yd2 - yd1;\r", "-\tif (dyd < 0) dyd = -dyd;\r", "-\tdys = ys2 - ys1;\r", "-\tif (dys < 0) dys = -dys;\r", "-\tdyd2 = dyd << 1;\r", "-\tdys2 = dys << 1;\r", "-\tsyd = (short)((yd2 - yd1) > 0 ? 1 : -1);\r", "-\tsys = (short)((ys2 - ys1) > 0 ? 1 : -1);\r", "-\tey = dys2 - dyd;\r", "-\tys = ys1;\r", "-\tyd = yd1;\r", "-\t/* X preliminary calculations */\r", "-\tdxd = xd2 - xd1;\r", "-\tif (dxd < 0) dxd = -dxd;\r", "-\tdxs = xs2 - xs1;\r", "-\tif (dxs < 0) dxs = -dxs;\r", "-\tdxs2 = dxs << 1;\r", "-\tdxd2 = dxd << 1;\r", "-\tsxs = sas = (short)((xs2 - xs1) > 0 ? 1 : -1);\r", "-\tsxd = (short)((xd2 - xd1) > 0 ? 1 : -1);\r", "-\r", "-\tsxd *= destDepth / 8;\r", "-\txd1 *= destDepth / 8;\r", "-\t\r", "-\tif (srcGlobalAlpha != -1) srcAlphaData = null;\r", "-\tsa = srcGlobalAlpha;\r", "-\tfor (dy = 0; dy <= dyd; dy++) {\r", "-\t\t/* X stretch starts here */\r", "-\t\toffset = 3 - (srcX % 4);\r", "-\t\tex = dxs2 - dxd;\r", "-\t\txs = xs1;\r", "-\t\tsp = ys * srcStride;\r", "-\t\tdp = yd * destStride + xd1;\r", "-\t\tif (srcAlphaData != null) sap = ys * srcAlphaStride + xs1;\r", "-\t\tfor (dx = 0; dx < dxd; dx++) {\r", "-\t\t\tif (srcAlphaData != null) sa = srcAlphaData[sap] & 0xFF;\r", "-\t\t\tswitch (srcDepth) {\r", "-\t\t\t\tcase  1:\r", "-\t\t\t\t\tsrcPixel = (srcData[sp + (xs >> 3)] & srcMasks[xs & 7]) == 0 ? 0 : 1;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase  2:\r", "-\t\t\t\t\tsrcPixel = ((srcData[sp + (xs >> 2)] & srcMasks[offset]) & 0xFF) >> (offset * 2);\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase  4:\r", "-\t\t\t\t\tsrcPixel = srcData[sp + (xs >> 1)] & 0xFF;\r", "-\t\t\t\t\tif ((xs & 0x1) == 0) {\r", "-\t\t\t\t\t\tsrcPixel = srcPixel >> 4;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tsrcPixel = srcPixel & 0x0F;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase  8:\r", "-\t\t\t\t\tsrcPixel = srcData[sp + xs] & 0xFF;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t}\r", "-\t\t\tif (mapping != null) {\r", "-\t\t\t\tdestPixel = mapping[srcPixel];\r", "-\t\t\t} else {\r", "-\t\t\t\tdr = sr = srcReds[srcPixel] & 0xFF;\r", "-\t\t\t\tdg = sg = srcGreens[srcPixel] & 0xFF;\r", "-\t\t\t\tdb = sb = srcBlues[srcPixel] & 0xFF;\r", "-\t\t\t\tif (op != BLIT_SRC) {\r", "-\t\t\t\t\tswitch (destDepth) {\r", "-\t\t\t\t\t\tcase 16:\r", "-\t\t\t\t\t\t\tdestPixel = ((destData[dp+do0] & 0xFF) << 8) | (destData[dp+do1] & 0xFF);\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\tcase 24:\r", "-\t\t\t\t\t\t\tdestPixel = ((destData[dp+do0] & 0xFF) << 16) | ((destData[dp+do1] & 0xFF) << 8) | \r", "-\t\t\t\t\t\t\t\t(destData[dp+do2] & 0xFF);\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\tcase 32:\r", "-\t\t\t\t\t\t\tdestPixel = ((destData[dp+do0] & 0xFF) << 24) | ((destData[dp+do1] & 0xFF) << 16) |\r", "-\t\t\t\t\t\t\t\t((destData[dp+do2] & 0xFF) << 8) | (destData[dp+do3] & 0xFF);\r", "-\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tdr = ((destPixel & destRedMask) << destRedShift) >>> 24;\r", "-\t\t\t\t\tdg = ((destPixel & destGreenMask) << destGreenShift) >>> 24;\r", "-\t\t\t\t\tdb = ((destPixel & destBlueMask) << destBlueShift) >>> 24;\r", "-\t\t\t\t\tswitch (op) {\r", "-\t\t\t\t\t\tcase BLIT_ALPHA:\r", "-\t\t\t\t\t\t\tdr += (sr - dr) * sa / 255;\r", "-\t\t\t\t\t\t\tdg += (sg - dg) * sa / 255;\r", "-\t\t\t\t\t\t\tdb += (sb - db) * sa / 255;\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\tdestPixel =\r", "-\t\t\t\t\t(((dr << 24) >>> destRedShift) & destRedMask) |\r", "-\t\t\t\t\t(((dg << 24) >>> destGreenShift) & destGreenMask) |\r", "-\t\t\t\t\t(((db << 24) >>> destBlueShift) & destBlueMask);\r", "-\t\t\t}\r", "-\t\t\tswitch (destDepth) {\r", "-\t\t\t\tcase 16:\r", "-\t\t\t\t\tdestData[dp + do0] = (byte)((destPixel >> 8) & 0xFF);\r", "-\t\t\t\t\tdestData[dp + do1] = (byte)(destPixel & 0xFF);\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase 24:\r", "-\t\t\t\t\tdestData[dp + do0] = (byte)((destPixel >> 16) & 0xFF);\r", "-\t\t\t\t\tdestData[dp + do1] = (byte)((destPixel >> 8) & 0xFF);\r", "-\t\t\t\t\tdestData[dp + do2] = (byte)(destPixel & 0xFF);\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase 32:\r", "-\t\t\t\t\tdestData[dp + do0]  = (byte)((destPixel >> 24) & 0xFF);\r", "-\t\t\t\t\tdestData[dp + do1] = (byte)((destPixel >> 16) & 0xFF);\r", "-\t\t\t\t\tdestData[dp + do2] = (byte)((destPixel >> 8) & 0xFF);\r", "-\t\t\t\t\tdestData[dp + do3] = (byte)(destPixel & 0xFF);\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t}\r", "-\t\t\twhile (ex >= 0) {\r", "-\t\t\t\txs += sxs;\r", "-\t\t\t\tex -= dxd2;\r", "-\t\t\t\tif (srcAlphaData != null) sap += sas;\r", "-\t\t\t}\r", "-\t\t\tdp += sxd;\r", "-\t\t\tex += dxs2;\r", "-\t\t\tif (offset == 0) {\r", "-\t\t\t\toffset = 3;\r", "-\t\t\t} else {\r", "-\t\t\t\toffset--;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\t\r", "-\t\tif (srcAlphaData != null) sa = srcAlphaData[sap] & 0xFF;\r", "-\t\tswitch (srcDepth) {\r", "-\t\t\tcase  1:\r", "-\t\t\t\tsrcPixel = (srcData[sp + (xs >> 3)] & srcMasks[xs & 7]) == 0 ? 0 : 1;\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase  2:\r", "-\t\t\t\tsrcPixel = ((srcData[sp + (xs >> 2)] & srcMasks[offset]) & 0xFF) >> (offset * 2);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase  4:\r", "-\t\t\t\tsrcPixel = srcData[sp + (xs >> 1)] & 0xFF;\r", "-\t\t\t\tif ((xs & 0x1) == 0) {\r", "-\t\t\t\t\tsrcPixel = srcPixel >> 4;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tsrcPixel = srcPixel & 0x0F;\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase  8:\r", "-\t\t\t\tsrcPixel = srcData[sp + xs] & 0xFF;\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t\tif (mapping != null) {\r", "-\t\t\tdestPixel = mapping[srcPixel];\r", "-\t\t} else {\r", "-\t\t\tdr = sr = srcReds[srcPixel] & 0xFF;\r", "-\t\t\tdg = sg = srcGreens[srcPixel] & 0xFF;\r", "-\t\t\tdb = sb = srcBlues[srcPixel] & 0xFF;\r", "-\t\t\tif (op != BLIT_SRC) {\r", "-\t\t\t\tswitch (destDepth) {\r", "-\t\t\t\t\tcase 16:\r", "-\t\t\t\t\t\tdestPixel = ((destData[dp+do0] & 0xFF) << 8) | (destData[dp+do1] & 0xFF);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase 24:\r", "-\t\t\t\t\t\tdestPixel = ((destData[dp+do0] & 0xFF) << 16) | ((destData[dp+do1] & 0xFF) << 8) | \r", "-\t\t\t\t\t\t\t(destData[dp+do2] & 0xFF);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase 32:\r", "-\t\t\t\t\t\tdestPixel = ((destData[dp+do0] & 0xFF) << 24) | ((destData[dp+do1] & 0xFF) << 16) |\r", "-\t\t\t\t\t\t\t((destData[dp+do2] & 0xFF) << 8) | (destData[dp+do3] & 0xFF);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t\t\tdr = ((destPixel & destRedMask) << destRedShift) >>> 24;\r", "-\t\t\t\tdg = ((destPixel & destGreenMask) << destGreenShift) >>> 24;\r", "-\t\t\t\tdb = ((destPixel & destBlueMask) << destBlueShift) >>> 24;\r", "-\t\t\t\tswitch (op) {\r", "-\t\t\t\t\tcase BLIT_ALPHA:\r", "-\t\t\t\t\t\tdr += (sr - dr) * sa / 255;\r", "-\t\t\t\t\t\tdg += (sg - dg) * sa / 255;\r", "-\t\t\t\t\t\tdb += (sb - db) * sa / 255;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tdestPixel =\r", "-\t\t\t\t(((dr << 24) >>> destRedShift) & destRedMask) |\r", "-\t\t\t\t(((dg << 24) >>> destGreenShift) & destGreenMask) |\r", "-\t\t\t\t(((db << 24) >>> destBlueShift) & destBlueMask);\r", "-\t\t}\r", "-\t\tswitch (destDepth) {\r", "-\t\t\tcase 16:\r", "-\t\t\t\tdestData[dp + do0] = (byte)((destPixel >> 8) & 0xFF);\r", "-\t\t\t\tdestData[dp + do1] = (byte)(destPixel & 0xFF);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 24:\r", "-\t\t\t\tdestData[dp + do0] = (byte)((destPixel >> 16) & 0xFF);\r", "-\t\t\t\tdestData[dp + do1] = (byte)((destPixel >> 8) & 0xFF);\r", "-\t\t\t\tdestData[dp + do2] = (byte)(destPixel & 0xFF);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 32:\r", "-\t\t\t\tdestData[dp + do0]  = (byte)((destPixel >> 24) & 0xFF);\r", "-\t\t\t\tdestData[dp + do1] = (byte)((destPixel >> 16) & 0xFF);\r", "-\t\t\t\tdestData[dp + do2] = (byte)((destPixel >> 8) & 0xFF);\r", "-\t\t\t\tdestData[dp + do3] = (byte)(destPixel & 0xFF);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t\t/* X stretch ends here */\r", "-\t\tif (dy == dyd)\r", "+\t\tcase 8:\r", "+\t\t\tstype = TYPE_INDEX_8;\r", "-\t\twhile (ey >= 0) {\r", "-\t\t\tys += sys;\r", "-\t\t\tey -= dyd2;\r", "-\t\t}\r", "-\t\tyd += syd;\r", "-\t\tey += dys2;\r", "-\t}\r", "-}\r", "+\t\tcase 4:\r", "+\t\t\tsrcStride <<= 1;\r", "+\t\t\tstype = TYPE_INDEX_4;\r", "+\t\t\tbreak;\r", "+\t\tcase 2:\r", "+\t\t\tsrcStride <<= 2;\r", "+\t\t\tstype = TYPE_INDEX_2;\r", "+\t\t\tbreak;\r", "+\t\tcase 1:\r", "+\t\t\tsrcStride <<= 3;\r", "+\t\t\tstype = (srcOrder == MSB_FIRST) ? TYPE_INDEX_1_MSB : TYPE_INDEX_1_LSB;\r", "+\t\t\tbreak;\r", "+\t\tdefault:\r", "+\t\t\t//throw new IllegalArgumentException(\"Invalid source type\");\r", "+\t\t\treturn;\r", "+\t}\t\t\t\r", "+\tint spr = srcY * srcStride + srcX;\r", "+\t/*** Prepare destination-related data ***/\r", "+\tfinal int dbpp, dtype;\r", "+\t\tcase 8:\r", "+\t\t\tdbpp = 1;\r", "+\t\t\tdtype = TYPE_GENERIC_8;\r", "+\t\tcase 16:\r", "+\t\t\tdbpp = 2;\r", "+\t\t\tdtype = (destOrder == MSB_FIRST) ? TYPE_GENERIC_16_MSB : TYPE_GENERIC_16_LSB;\r", "+\t\t\tbreak;\r", "+\t\tcase 24:\r", "+\t\t\tdbpp = 3;\r", "+\t\t\tdtype = TYPE_GENERIC_24;\r", "+\t\t\tbreak;\r", "+\t\tcase 32:\r", "+\t\t\tdbpp = 4;\r", "+\t\t\tdtype = (destOrder == MSB_FIRST) ? TYPE_GENERIC_32_MSB : TYPE_GENERIC_32_LSB;\r", "+\t\t\tbreak;\r", "+\t\tdefault:\r", "+\t\t\t//throw new IllegalArgumentException(\"Invalid destination type\");\r", "+\t\t\treturn;\r", "+\t}\t\t\t\r", "+\tint dpr = ((flipY) ? destY + dhm1 : destY) * destStride + ((flipX) ? destX + dwm1 : destX) * dbpp;\r", "+\tfinal int dprxi = (flipX) ? -dbpp : dbpp;\r", "+\tfinal int dpryi = (flipY) ? -destStride : destStride;\r", "+\r", "+\t/*** Prepare special processing data ***/\r", "+\tint apr;\r", "+\tif ((op & BLIT_ALPHA) != 0) {\r", "+\t\tswitch (alphaMode) {\r", "+\t\t\tcase ALPHA_MASK_UNPACKED:\r", "+\t\t\tcase ALPHA_CHANNEL_SEPARATE:\r", "+\t\t\t\tapr = srcY * alphaStride + srcX;\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase ALPHA_MASK_PACKED:\r", "+\t\t\t\talphaStride <<= 3;\r", "+\t\t\t\tapr = srcY * alphaStride + srcX;\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase ALPHA_CHANNEL_SOURCE:\r", "+\t\t\t\talphaMode = 0x10000;\r", "+\t\t\t\tapr = 0;\r", "+\t\t\t\tbreak;\r", "+\t\t\tdefault:\r", "+\t\t\t\talphaMode = (alphaMode << 16) / 255; // prescale\r", "+\t\t\tcase ALPHA_MASK_RGB:\r", "+\t\t\tcase ALPHA_MASK_INDEX:\r", "+\t\t\t\tapr = 0;\r", "+\t\t\t\tbreak;\r", "+\t} else {\r", "+\t\talphaMode = 0x10000;\r", "+\t\tapr = 0;\r", "+\r", "+\t/*** Comprehensive blit (apply transformations) ***/\r", "+\tfinal int destRedShift = getChannelShift(destRedMask);\r", "+\tfinal int destRedWidth = getChannelWidth(destRedMask, destRedShift);\r", "+\tfinal byte[] destReds = anyToEight[destRedWidth];\r", "+\tfinal int destRedPreShift = 8 - destRedWidth;\r", "+\tfinal int destGreenShift = getChannelShift(destGreenMask);\r", "+\tfinal int destGreenWidth = getChannelWidth(destGreenMask, destGreenShift);\r", "+\tfinal byte[] destGreens = anyToEight[destGreenWidth];\r", "+\tfinal int destGreenPreShift = 8 - destGreenWidth;\r", "+\tfinal int destBlueShift = getChannelShift(destBlueMask);\r", "+\tfinal int destBlueWidth = getChannelWidth(destBlueMask, destBlueShift);\r", "+\tfinal byte[] destBlues = anyToEight[destBlueWidth];\r", "+\tfinal int destBluePreShift = 8 - destBlueWidth;\r", "+\tfinal int destAlphaShift = getChannelShift(destAlphaMask);\r", "+\tfinal int destAlphaWidth = getChannelWidth(destAlphaMask, destAlphaShift);\r", "+\tfinal byte[] destAlphas = anyToEight[destAlphaWidth];\r", "+\tfinal int destAlphaPreShift = 8 - destAlphaWidth;\r", "+\r", "+\tint dp = dpr;\r", "+\tint sp = spr;\r", "+\tint ap = apr, alpha = alphaMode;\r", "+\tint r = 0, g = 0, b = 0, a = 0, index = 0;\r", "+\tint rq = 0, gq = 0, bq = 0, aq = 0;\r", "+\tfor (int dy = destHeight, sfy = sfyi; dy > 0; --dy,\r", "+\t\t\tsp = spr += (sfy >>> 16) * srcStride,\r", "+\t\t\tap = apr += (sfy >>> 16) * alphaStride,\r", "+\t\t\tsfy = (sfy & 0xffff) + sfyi,\r", "+\t\t\tdp = dpr += dpryi) {\r", "+\t\tint lrerr = 0, lgerr = 0, lberr = 0;\r", "+\t\tfor (int dx = destWidth, sfx = sfxi; dx > 0; --dx,\r", "+\t\t\t\tdp += dprxi,\r", "+\t\t\t\tsfx = (sfx & 0xffff) + sfxi) {\r", "+\t\t\t/*** READ NEXT PIXEL ***/\r", "+\t\t\tswitch (stype) {\r", "+\t\t\t\tcase TYPE_INDEX_8:\r", "+\t\t\t\t\tindex = srcData[sp] & 0xff;\r", "+\t\t\t\t\tsp += (sfx >>> 16);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase TYPE_INDEX_4:\r", "+\t\t\t\t\tif ((sp & 1) != 0) index = srcData[sp >> 1] & 0x0f;\r", "+\t\t\t\t\telse index = (srcData[sp >> 1] >>> 4) & 0x0f;\r", "+\t\t\t\t\tsp += (sfx >>> 16);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase TYPE_INDEX_2:\r", "+\t\t\t\t\tindex = (srcData[sp >> 2] >>> (6 - (sp & 3) * 2)) & 0x03;\r", "+\t\t\t\t\tsp += (sfx >>> 16);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase TYPE_INDEX_1_MSB:\r", "+\t\t\t\t\tindex = (srcData[sp >> 3] >>> (7 - (sp & 7))) & 0x01;\r", "+\t\t\t\t\tsp += (sfx >>> 16);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase TYPE_INDEX_1_LSB:\r", "+\t\t\t\t\tindex = (srcData[sp >> 3] >>> (sp & 7)) & 0x01;\r", "+\t\t\t\t\tsp += (sfx >>> 16);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\r", "+\t\t\t/*** DO SPECIAL PROCESSING IF REQUIRED ***/\r", "+\t\t\tr = srcReds[index] & 0xff;\r", "+\t\t\tg = srcGreens[index] & 0xff;\r", "+\t\t\tb = srcBlues[index] & 0xff;\r", "+\t\t\tswitch (alphaMode) {\r", "+\t\t\t\tcase ALPHA_CHANNEL_SEPARATE:\r", "+\t\t\t\t\talpha = ((alphaData[ap] & 0xff) << 16) / 255;\r", "+\t\t\t\t\tap += (sfx >> 16);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase ALPHA_MASK_UNPACKED:\r", "+\t\t\t\t\talpha = (alphaData[ap] != 0) ? 0x10000 : 0;\r", "+\t\t\t\t\tap += (sfx >> 16);\r", "+\t\t\t\t\tbreak;\t\t\t\t\t\t\r", "+\t\t\t\tcase ALPHA_MASK_PACKED:\r", "+\t\t\t\t\talpha = (alphaData[ap >> 3] << ((ap & 7) + 9)) & 0x10000;\r", "+\t\t\t\t\tap += (sfx >> 16);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase ALPHA_MASK_INDEX: { // could speed up using binary search if we sorted the indices\r", "+\t\t\t\t\tint i = 0;\r", "+\t\t\t\t\twhile (i < alphaData.length) {\r", "+\t\t\t\t\t\tif (index == (alphaData[i] & 0xff)) break;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif (i < alphaData.length) continue;\r", "+\t\t\t\t} break;\r", "+\t\t\t\tcase ALPHA_MASK_RGB: {\r", "+\t\t\t\t\tint i = 0;\r", "+\t\t\t\t\twhile (i < alphaData.length) {\r", "+\t\t\t\t\t\tif ((r == (alphaData[i] & 0xff)) &&\r", "+\t\t\t\t\t\t\t(g == (alphaData[i + 1] & 0xff)) &&\r", "+\t\t\t\t\t\t\t(b == (alphaData[i + 2] & 0xff))) break;\r", "+\t\t\t\t\t\ti += 3;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif (i < alphaData.length) continue;\r", "+\t\t\t\t} break;\r", "+\t\t\t}\r", "+\t\t\tif (alpha != 0x10000) {\r", "+\t\t\t\tif (alpha == 0x0000) continue;\r", "+\t\t\t\tswitch (dtype) {\r", "+\t\t\t\t\tcase TYPE_GENERIC_8: {\r", "+\t\t\t\t\t\tfinal int data = destData[dp] & 0xff;\r", "+\t\t\t\t\t\trq = destReds[(data & destRedMask) >>> destRedShift] & 0xff;\r", "+\t\t\t\t\t\tgq = destGreens[(data & destGreenMask) >>> destGreenShift] & 0xff;\r", "+\t\t\t\t\t\tbq = destBlues[(data & destBlueMask) >>> destBlueShift] & 0xff;\r", "+\t\t\t\t\t\taq = destAlphas[(data & destAlphaMask) >>> destAlphaShift] & 0xff;\r", "+\t\t\t\t\t} break;\r", "+\t\t\t\t\tcase TYPE_GENERIC_16_MSB: {\r", "+\t\t\t\t\t\tfinal int data = ((destData[dp] & 0xff) << 8) | (destData[dp + 1] & 0xff);\r", "+\t\t\t\t\t\trq = destReds[(data & destRedMask) >>> destRedShift] & 0xff;\r", "+\t\t\t\t\t\tgq = destGreens[(data & destGreenMask) >>> destGreenShift] & 0xff;\r", "+\t\t\t\t\t\tbq = destBlues[(data & destBlueMask) >>> destBlueShift] & 0xff;\r", "+\t\t\t\t\t\taq = destAlphas[(data & destAlphaMask) >>> destAlphaShift] & 0xff;\r", "+\t\t\t\t\t} break;\r", "+\t\t\t\t\tcase TYPE_GENERIC_16_LSB: {\r", "+\t\t\t\t\t\tfinal int data = ((destData[dp + 1] & 0xff) << 8) | (destData[dp] & 0xff);\r", "+\t\t\t\t\t\trq = destReds[(data & destRedMask) >>> destRedShift] & 0xff;\r", "+\t\t\t\t\t\tgq = destGreens[(data & destGreenMask) >>> destGreenShift] & 0xff;\r", "+\t\t\t\t\t\tbq = destBlues[(data & destBlueMask) >>> destBlueShift] & 0xff;\r", "+\t\t\t\t\t\taq = destAlphas[(data & destAlphaMask) >>> destAlphaShift] & 0xff;\r", "+\t\t\t\t\t} break;\r", "+\t\t\t\t\tcase TYPE_GENERIC_24: {\r", "+\t\t\t\t\t\tfinal int data = (( ((destData[dp] & 0xff) << 8) |\r", "+\t\t\t\t\t\t\t(destData[dp + 1] & 0xff)) << 8) |\r", "+\t\t\t\t\t\t\t(destData[dp + 2] & 0xff);\r", "+\t\t\t\t\t\trq = destReds[(data & destRedMask) >>> destRedShift] & 0xff;\r", "+\t\t\t\t\t\tgq = destGreens[(data & destGreenMask) >>> destGreenShift] & 0xff;\r", "+\t\t\t\t\t\tbq = destBlues[(data & destBlueMask) >>> destBlueShift] & 0xff;\r", "+\t\t\t\t\t\taq = destAlphas[(data & destAlphaMask) >>> destAlphaShift] & 0xff;\r", "+\t\t\t\t\t} break;\r", "+\t\t\t\t\tcase TYPE_GENERIC_32_MSB: {\r", "+\t\t\t\t\t\tfinal int data = (( (( ((destData[dp] & 0xff) << 8) |\r", "+\t\t\t\t\t\t\t(destData[dp + 1] & 0xff)) << 8) |\r", "+\t\t\t\t\t\t\t(destData[dp + 2] & 0xff)) << 8) |\r", "+\t\t\t\t\t\t\t(destData[dp + 3] & 0xff);\r", "+\t\t\t\t\t\trq = destReds[(data & destRedMask) >>> destRedShift] & 0xff;\r", "+\t\t\t\t\t\tgq = destGreens[(data & destGreenMask) >>> destGreenShift] & 0xff;\r", "+\t\t\t\t\t\tbq = destBlues[(data & destBlueMask) >>> destBlueShift] & 0xff;\r", "+\t\t\t\t\t\taq = destAlphas[(data & destAlphaMask) >>> destAlphaShift] & 0xff;\r", "+\t\t\t\t\t} break;\r", "+\t\t\t\t\tcase TYPE_GENERIC_32_LSB: {\r", "+\t\t\t\t\t\tfinal int data = (( (( ((destData[dp + 3] & 0xff) << 8) |\r", "+\t\t\t\t\t\t\t(destData[dp + 2] & 0xff)) << 8) |\r", "+\t\t\t\t\t\t\t(destData[dp + 1] & 0xff)) << 8) |\r", "+\t\t\t\t\t\t\t(destData[dp] & 0xff);\r", "+\t\t\t\t\t\trq = destReds[(data & destRedMask) >>> destRedShift] & 0xff;\r", "+\t\t\t\t\t\tgq = destGreens[(data & destGreenMask) >>> destGreenShift] & 0xff;\r", "+\t\t\t\t\t\tbq = destBlues[(data & destBlueMask) >>> destBlueShift] & 0xff;\r", "+\t\t\t\t\t\taq = destAlphas[(data & destAlphaMask) >>> destAlphaShift] & 0xff;\r", "+\t\t\t\t\t} break;\r", "+\t\t\t\t}\r", "+\t\t\t\t// Perform alpha blending\r", "+\t\t\t\ta = aq + ((a - aq) * alpha >> 16);\r", "+\t\t\t\tr = rq + ((r - rq) * alpha >> 16);\r", "+\t\t\t\tg = gq + ((g - gq) * alpha >> 16);\r", "+\t\t\t\tb = bq + ((b - bq) * alpha >> 16);\r", "+\t\t\t}\r", "+\r", "+\t\t\t/*** WRITE NEXT PIXEL ***/\r", "+\t\t\tfinal int data = \r", "+\t\t\t\t(r >>> destRedPreShift << destRedShift) |\r", "+\t\t\t\t(g >>> destGreenPreShift << destGreenShift) |\r", "+\t\t\t\t(b >>> destBluePreShift << destBlueShift) |\r", "+\t\t\t\t(a >>> destAlphaPreShift << destAlphaShift);\r", "+\t\t\tswitch (dtype) {\r", "+\t\t\t\tcase TYPE_GENERIC_8: {\r", "+\t\t\t\t\tdestData[dp] = (byte) data;\r", "+\t\t\t\t} break;\r", "+\t\t\t\tcase TYPE_GENERIC_16_MSB: {\r", "+\t\t\t\t\tdestData[dp] = (byte) (data >>> 8);\r", "+\t\t\t\t\tdestData[dp + 1] = (byte) (data & 0xff);\r", "+\t\t\t\t} break;\r", "+\t\t\t\tcase TYPE_GENERIC_16_LSB: {\r", "+\t\t\t\t\tdestData[dp] = (byte) (data & 0xff);\r", "+\t\t\t\t\tdestData[dp + 1] = (byte) (data >>> 8);\r", "+\t\t\t\t} break;\r", "+\t\t\t\tcase TYPE_GENERIC_24: {\r", "+\t\t\t\t\tdestData[dp] = (byte) (data >>> 16);\r", "+\t\t\t\t\tdestData[dp + 1] = (byte) (data >>> 8);\r", "+\t\t\t\t\tdestData[dp + 2] = (byte) (data & 0xff);\r", "+\t\t\t\t} break;\r", "+\t\t\t\tcase TYPE_GENERIC_32_MSB: {\r", "+\t\t\t\t\tdestData[dp] = (byte) (data >>> 24);\r", "+\t\t\t\t\tdestData[dp + 1] = (byte) (data >>> 16);\r", "+\t\t\t\t\tdestData[dp + 2] = (byte) (data >>> 8);\r", "+\t\t\t\t\tdestData[dp + 3] = (byte) (data & 0xff);\r", "+\t\t\t\t} break;\r", "+\t\t\t\tcase TYPE_GENERIC_32_LSB: {\r", "+\t\t\t\t\tdestData[dp] = (byte) (data & 0xff);\r", "+\t\t\t\t\tdestData[dp + 1] = (byte) (data >>> 8);\r", "+\t\t\t\t\tdestData[dp + 2] = (byte) (data >>> 16);\r", "+\t\t\t\t\tdestData[dp + 3] = (byte) (data >>> 24);\r", "+\t\t\t\t} break;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56886453a71d777f7ef1fb3cda2d7966", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/graphics/ImageData.java", "commitBeforeChange": "881f889067c32dc9cc929042fa81de775a852ed3", "commitAfterChange": "3157b86f8a6b5c49725c9486eede898beaf8ba2d", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 31, "signatureBeforeChange": "\r static void blit(int op, byte[] srcData, int srcDepth, int srcStride, int srcOrder, int srcX, int srcY, int srcWidth, int srcHeight, int srcRedMask, int srcGreenMask, int srcBlueMask, int srcGlobalAlpha, byte[] srcAlphaData, int srcAlphaStride, byte[] destData, int destDepth, int destStride, int destOrder, int destX, int destY, int destWidth, int destHeight, byte[] destReds, byte[] destGreens, byte[] destBlues, boolean flipX, boolean flipY)", "signatureAfterChange": "\r static final void blit(int op,\r \tbyte[] srcData, int srcDepth, int srcStride, int srcOrder,\r \tint srcX, int srcY, int srcWidth, int srcHeight,\r \tint srcRedMask, int srcGreenMask, int srcBlueMask,\r \tint alphaMode, byte[] alphaData, int alphaStride,\r \tbyte[] destData, int destDepth, int destStride, int destOrder,\r \tint destX, int destY, int destWidth, int destHeight,\r \tbyte[] destReds, byte[] destGreens, byte[] destBlues,\r \tboolean flipX, boolean flipY)", "diff": ["-static void blit(int op, byte[] srcData, int srcDepth, int srcStride, int srcOrder, int srcX, int srcY, int srcWidth, int srcHeight, int srcRedMask, int srcGreenMask, int srcBlueMask, int srcGlobalAlpha, byte[] srcAlphaData, int srcAlphaStride, byte[] destData, int destDepth, int destStride, int destOrder, int destX, int destY, int destWidth, int destHeight, byte[] destReds, byte[] destGreens, byte[] destBlues, boolean flipX, boolean flipY) {\r", "-\tint xs1, ys1, xs2, ys2, xd1, yd1, xd2, yd2;\r", "-\tint dyd, dys, ey, dy, dyd2, dys2, ys, yd;\r", "-\tshort syd, sys;\r", "-\tint dxd, dxs, ex, dx, dxd2, dxs2, xd;\r", "-\tshort sxd, sxs, sas;\r", "-\tint sp, dp, sap = 0;\r", "-\tint sr = 0, sg = 0, sb = 0, sa = 0, dr = 0, dg = 0, db = 0, da = 0;\r", "-\tint srcPixel = 0, destPixel = 0;\r", "-\tshort so0 = 0, so1 = 1, so2 = 2, so3 = 3;\r", "-\tint srcRedShift, srcGreenShift, srcBlueShift;\r", "-\tint j, offset = 0;\r", "-\tbyte[] destMasks = null, destInverseMasks = null;\r", "-\tint destN = 1 << destDepth;\r", "-\tint r, g, b, nearestPixel = 0, lastPixel = -1;\r", "-\tint distance, minDistance;\r", "-\t\r", "-\tsrcRedShift = 32 - getMSBOffset(srcRedMask);\r", "-\tsrcGreenShift = 32 - getMSBOffset(srcGreenMask);\r", "-\tsrcBlueShift = 32 - getMSBOffset(srcBlueMask);\r", "-\tif (destReds != null && destN > destReds.length) destN = destReds.length;\r", "+static final void blit(int op,\r", "+\tbyte[] srcData, int srcDepth, int srcStride, int srcOrder,\r", "+\tint srcX, int srcY, int srcWidth, int srcHeight,\r", "+\tint srcRedMask, int srcGreenMask, int srcBlueMask,\r", "+\tint alphaMode, byte[] alphaData, int alphaStride,\r", "+\tbyte[] destData, int destDepth, int destStride, int destOrder,\r", "+\tint destX, int destY, int destWidth, int destHeight,\r", "+\tbyte[] destReds, byte[] destGreens, byte[] destBlues,\r", "+\tboolean flipX, boolean flipY) {\r", "+\tif ((destWidth <= 0) || (destHeight <= 0) || (alphaMode == ALPHA_TRANSPARENT)) return;\r", "+\r", "+\t// these should be supplied as params later\r", "+\tfinal int srcAlphaMask = 0;\r", "+\r", "+\t/*** Prepare scaling data ***/\r", "+\tfinal int dwm1 = destWidth - 1;\r", "+\tfinal int sfxi = (dwm1 != 0) ? ((srcWidth << 16) - 1) / dwm1 : 0;\r", "+\tfinal int dhm1 = destHeight - 1;\r", "+\tfinal int sfyi = (dhm1 != 0) ? ((srcHeight << 16) - 1) / dhm1 : 0;\r", "+\r", "+\t/*** Prepare source-related data ***/\r", "+\tfinal int sbpp, stype;\r", "+\tswitch (srcDepth) {\r", "+\t\tcase 8:\r", "+\t\t\tsbpp = 1;\r", "+\t\t\tstype = TYPE_GENERIC_8;\r", "+\t\t\tbreak;\r", "+\t\tcase 16:\r", "+\t\t\tsbpp = 2;\r", "+\t\t\tstype = (srcOrder == MSB_FIRST) ? TYPE_GENERIC_16_MSB : TYPE_GENERIC_16_LSB;\r", "+\t\t\tbreak;\r", "+\t\tcase 24:\r", "+\t\t\tsbpp = 3;\r", "+\t\t\tstype = TYPE_GENERIC_24;\r", "+\t\t\tbreak;\r", "+\t\tcase 32:\r", "+\t\t\tsbpp = 4;\r", "+\t\t\tstype = (srcOrder == MSB_FIRST) ? TYPE_GENERIC_32_MSB : TYPE_GENERIC_32_LSB;\r", "+\t\t\tbreak;\r", "+\t\tdefault:\r", "+\t\t\t//throw new IllegalArgumentException(\"Invalid source type\");\r", "+\t\t\treturn;\r", "+\t}\t\t\t\r", "+\tint spr = srcY * srcStride + srcX * sbpp;\r", "+\r", "+\t/*** Prepare destination-related data ***/\r", "+\tfinal int dtype;\r", "-\t\tcase 1: destMasks = msbMasks1; destInverseMasks = msbInverseMasks1; break;\r", "-\t\tcase 2: destMasks = masks2; destInverseMasks = inverseMasks2; break;\r", "-\t}\r", "-\tif (srcOrder == LSB_FIRST) {\r", "-\t\tswitch (srcDepth) {\r", "-\t\t\tcase 16: so0 = 1; so1 = 0; break;\r", "-\t\t\tcase 24: so0 = 2; so1 = 1; so2 = 0; break;\r", "-\t\t\tcase 32: so0 = 3; so1 = 2; so2 = 1; so3 = 0; break;\r", "+\t\tcase 8:\r", "+\t\t\tdtype = TYPE_INDEX_8;\r", "+\t\t\tbreak;\r", "+\t\tcase 4:\r", "+\t\t\tdestStride <<= 1;\r", "+\t\t\tdtype = TYPE_INDEX_4;\r", "+\t\t\tbreak;\r", "+\t\tcase 2:\r", "+\t\t\tdestStride <<= 2;\r", "+\t\t\tdtype = TYPE_INDEX_2;\r", "+\t\t\tbreak;\r", "+\t\tcase 1:\r", "+\t\t\tdestStride <<= 3;\r", "+\t\t\tdtype = (destOrder == MSB_FIRST) ? TYPE_INDEX_1_MSB : TYPE_INDEX_1_LSB;\r", "+\t\t\tbreak;\r", "+\t\tdefault:\r", "+\t\t\t//throw new IllegalArgumentException(\"Invalid source type\");\r", "+\t\t\treturn;\r", "+\t}\t\t\t\r", "+\tint dpr = ((flipY) ? destY + dhm1 : destY) * destStride + ((flipX) ? destX + dwm1 : destX);\r", "+\tfinal int dprxi = (flipX) ? -1 : 1;\r", "+\tfinal int dpryi = (flipY) ? -destStride : destStride;\r", "+\r", "+\t/*** Prepare special processing data ***/\r", "+\tint apr;\r", "+\tif ((op & BLIT_ALPHA) != 0) {\r", "+\t\tswitch (alphaMode) {\r", "+\t\t\tcase ALPHA_MASK_UNPACKED:\r", "+\t\t\tcase ALPHA_CHANNEL_SEPARATE:\r", "+\t\t\t\tapr = srcY * alphaStride + srcX;\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase ALPHA_MASK_PACKED:\r", "+\t\t\t\talphaStride <<= 3;\r", "+\t\t\t\tapr = srcY * alphaStride + srcX;\r", "+\t\t\t\tbreak;\r", "+\t\t\tcase ALPHA_CHANNEL_SOURCE:\r", "+\t\t\t\talphaMode = 0x10000;\r", "+\t\t\t\tapr = 0;\r", "+\t\t\t\tbreak;\r", "+\t\t\tdefault:\r", "+\t\t\t\talphaMode = (alphaMode << 16) / 255; // prescale\r", "+\t\t\tcase ALPHA_MASK_RGB:\r", "+\t\t\tcase ALPHA_MASK_INDEX:\r", "+\t\t\t\tapr = 0;\r", "+\t\t\t\tbreak;\r", "-\t}\r", "-\tif (destOrder == LSB_FIRST) {\r", "-\t\tswitch (destDepth) {\r", "-\t\t\tcase 1: destMasks = lsbMasks1; destInverseMasks = lsbInverseMasks1; break;\r", "-\t\t}\r", "-\t}\r", "-\r", "-\txs1 = srcX; xs2 = srcX + srcWidth - 1;\r", "-\tys1 = srcY; ys2 = srcY + srcHeight - 1;\r", "-\tif (flipX) {\r", "-\t\txd1 = destX + destWidth - 1;\r", "-\t\txd2 = destX;\r", "-\t\txd1 = destX;\r", "-\t\txd2 = destX + destWidth - 1;\r", "+\t\talphaMode = 0x10000;\r", "+\t\tapr = 0;\r", "-\tif (flipY) {\r", "-\t\tyd1 = destY + destHeight - 1;\r", "-\t\tyd2 = destY;\r", "+\tfinal boolean ditherEnabled = (op & BLIT_DITHER) != 0;\r", "+\r", "+\t/*** Comprehensive blit (apply transformations) ***/\r", "+\tfinal int srcRedShift = getChannelShift(srcRedMask);\r", "+\tfinal byte[] srcReds = anyToEight[getChannelWidth(srcRedMask, srcRedShift)];\r", "+\tfinal int srcGreenShift = getChannelShift(srcGreenMask);\r", "+\tfinal byte[] srcGreens = anyToEight[getChannelWidth(srcGreenMask, srcGreenShift)];\r", "+\tfinal int srcBlueShift = getChannelShift(srcBlueMask);\r", "+\tfinal byte[] srcBlues = anyToEight[getChannelWidth(srcBlueMask, srcBlueShift)];\r", "+\tfinal int srcAlphaShift = getChannelShift(srcAlphaMask);\r", "+\tfinal byte[] srcAlphas = anyToEight[getChannelWidth(srcAlphaMask, srcAlphaShift)];\r", "+\r", "+\tint dp = dpr;\r", "+\tint sp = spr;\r", "+\tint ap = apr, alpha = alphaMode;\r", "+\tint r = 0, g = 0, b = 0, a = 0;\r", "+\tint indexq = 0;\r", "+\tint lastindex = 0, lastr = -1, lastg = -1, lastb = -1;\r", "+\tfinal int[] rerr, gerr, berr;\r", "+\tint destPaletteSize = 1 << destDepth;\r", "+\tif ((destReds != null) && (destReds.length < destPaletteSize)) destPaletteSize = destReds.length;\r", "+\tif (ditherEnabled) {\r", "+\t\trerr = new int[destWidth + 2];\r", "+\t\tgerr = new int[destWidth + 2];\r", "+\t\tberr = new int[destWidth + 2];\r", "-\t\tyd1 = destY;\r", "-\t\tyd2 = destY + destHeight - 1;\r", "+\t\trerr = null; gerr = null; berr = null;\r", "-\r", "-\t/* Y preliminary calculations */\r", "-\tdyd = yd2 - yd1;\r", "-\tif (dyd < 0) dyd = -dyd;\r", "-\tdys = ys2 - ys1;\r", "-\tif (dys < 0) dys = -dys;\r", "-\tdyd2 = dyd << 1;\r", "-\tdys2 = dys << 1;\r", "-\tsyd = (short)((yd2 - yd1) > 0 ? 1 : -1);\r", "-\tsys = (short)((ys2 - ys1) > 0 ? 1 : -1);\r", "-\tey = dys2 - dyd;\r", "-\tys = ys1;\r", "-\tyd = yd1;\r", "-\t/* X preliminary calculations */\r", "-\tdxd = xd2 - xd1;\r", "-\tif (dxd < 0) dxd = -dxd;\r", "-\tdxs = xs2 - xs1;\r", "-\tif (dxs < 0) dxs = -dxs;\r", "-\tdxs2 = dxs << 1;\r", "-\tdxd2 = dxd << 1;\r", "-\tsxs = sas = (short)((xs2 - xs1) > 0 ? 1 : -1);\r", "-\tsxd = (short)((xd2 - xd1) > 0 ? 1 : -1);\r", "-\r", "-\tsxs *= srcDepth / 8;\r", "-\txs1 *= srcDepth / 8;\r", "-\t\r", "-\tif (srcGlobalAlpha != -1) srcAlphaData = null;\r", "-\tsa = srcGlobalAlpha;\r", "-\tfor (dy = 0; dy <= dyd; dy++) {\r", "-\t\t/* X stretch starts here */\r", "-\t\toffset = 3 - (srcX % 4);\r", "-\t\tex = dxs2 - dxd;\r", "-\t\txd = xd1;\r", "-\t\tsp = ys * srcStride + xs1;\r", "-\t\tdp = yd * destStride;\r", "-\t\tif (srcAlphaData != null) sap = ys * srcAlphaStride + xs1;\r", "-\t\tfor (dx = 0; dx < dxd; dx++) {\r", "-\t\t\tif (srcAlphaData != null) sa = srcAlphaData[sap] & 0xFF;\r", "-\t\t\tswitch (srcDepth) {\r", "-\t\t\t\tcase 16:\r", "-\t\t\t\t\tsrcPixel = ((srcData[sp+so0] & 0xFF) << 8) | (srcData[sp+so1] & 0xFF);\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase 24:\r", "-\t\t\t\t\tsrcPixel = ((srcData[sp+so0] & 0xFF) << 16) | ((srcData[sp+so1] & 0xFF) << 8) | \r", "-\t\t\t\t\t\t(srcData[sp+so2] & 0xFF);\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase 32:\r", "-\t\t\t\t\tsrcPixel = ((srcData[sp+so0] & 0xFF) << 24) | ((srcData[sp+so1] & 0xFF) << 16) |\r", "-\t\t\t\t\t\t((srcData[sp+so2] & 0xFF) << 8) | (srcData[sp+so3] & 0xFF);\r", "-\t\t\t\t\tbreak;\r", "+\tfor (int dy = destHeight, sfy = sfyi; dy > 0; --dy,\r", "+\t\t\tsp = spr += (sfy >>> 16) * srcStride,\r", "+\t\t\tap = apr += (sfy >>> 16) * alphaStride,\r", "+\t\t\tsfy = (sfy & 0xffff) + sfyi,\r", "+\t\t\tdp = dpr += dpryi) {\r", "+\t\tint lrerr = 0, lgerr = 0, lberr = 0;\r", "+\t\tfor (int dx = destWidth, sfx = sfxi; dx > 0; --dx,\r", "+\t\t\t\tdp += dprxi,\r", "+\t\t\t\tsfx = (sfx & 0xffff) + sfxi) {\r", "+\t\t\t/*** READ NEXT PIXEL ***/\r", "+\t\t\tswitch (stype) {\r", "+\t\t\t\tcase TYPE_GENERIC_8: {\r", "+\t\t\t\t\tfinal int data = srcData[sp] & 0xff;\r", "+\t\t\t\t\tsp += (sfx >>> 16);\r", "+\t\t\t\t\tr = srcReds[(data & srcRedMask) >>> srcRedShift] & 0xff;\r", "+\t\t\t\t\tg = srcGreens[(data & srcGreenMask) >>> srcGreenShift] & 0xff;\r", "+\t\t\t\t\tb = srcBlues[(data & srcBlueMask) >>> srcBlueShift] & 0xff;\r", "+\t\t\t\t\ta = srcAlphas[(data & srcAlphaMask) >>> srcAlphaShift] & 0xff;\r", "+\t\t\t\t} break;\r", "+\t\t\t\tcase TYPE_GENERIC_16_MSB: {\r", "+\t\t\t\t\tfinal int data = ((srcData[sp] & 0xff) << 8) | (srcData[sp + 1] & 0xff);\r", "+\t\t\t\t\tsp += (sfx >>> 16) * 2;\r", "+\t\t\t\t\tr = srcReds[(data & srcRedMask) >>> srcRedShift] & 0xff;\r", "+\t\t\t\t\tg = srcGreens[(data & srcGreenMask) >>> srcGreenShift] & 0xff;\r", "+\t\t\t\t\tb = srcBlues[(data & srcBlueMask) >>> srcBlueShift] & 0xff;\r", "+\t\t\t\t\ta = srcAlphas[(data & srcAlphaMask) >>> srcAlphaShift] & 0xff;\r", "+\t\t\t\t} break;\r", "+\t\t\t\tcase TYPE_GENERIC_16_LSB: {\r", "+\t\t\t\t\tfinal int data = ((srcData[sp + 1] & 0xff) << 8) | (srcData[sp] & 0xff);\r", "+\t\t\t\t\tsp += (sfx >>> 16) * 2;\r", "+\t\t\t\t\tr = srcReds[(data & srcRedMask) >>> srcRedShift] & 0xff;\r", "+\t\t\t\t\tg = srcGreens[(data & srcGreenMask) >>> srcGreenShift] & 0xff;\r", "+\t\t\t\t\tb = srcBlues[(data & srcBlueMask) >>> srcBlueShift] & 0xff;\r", "+\t\t\t\t\ta = srcAlphas[(data & srcAlphaMask) >>> srcAlphaShift] & 0xff;\r", "+\t\t\t\t} break;\r", "+\t\t\t\tcase TYPE_GENERIC_24: {\r", "+\t\t\t\t\tfinal int data = (( ((srcData[sp] & 0xff) << 8) |\r", "+\t\t\t\t\t\t(srcData[sp + 1] & 0xff)) << 8) |\r", "+\t\t\t\t\t\t(srcData[sp + 2] & 0xff);\r", "+\t\t\t\t\tsp += (sfx >>> 16) * 3;\r", "+\t\t\t\t\tr = srcReds[(data & srcRedMask) >>> srcRedShift] & 0xff;\r", "+\t\t\t\t\tg = srcGreens[(data & srcGreenMask) >>> srcGreenShift] & 0xff;\r", "+\t\t\t\t\tb = srcBlues[(data & srcBlueMask) >>> srcBlueShift] & 0xff;\r", "+\t\t\t\t\ta = srcAlphas[(data & srcAlphaMask) >>> srcAlphaShift] & 0xff;\r", "+\t\t\t\t} break;\r", "+\t\t\t\tcase TYPE_GENERIC_32_MSB: {\r", "+\t\t\t\t\tfinal int data = (( (( ((srcData[sp] & 0xff) << 8) |\r", "+\t\t\t\t\t\t(srcData[sp + 1] & 0xff)) << 8) |\r", "+\t\t\t\t\t\t(srcData[sp + 2] & 0xff)) << 8) |\r", "+\t\t\t\t\t\t(srcData[sp + 3] & 0xff);\r", "+\t\t\t\t\tsp += (sfx >>> 16) * 4;\r", "+\t\t\t\t\tr = srcReds[(data & srcRedMask) >>> srcRedShift] & 0xff;\r", "+\t\t\t\t\tg = srcGreens[(data & srcGreenMask) >>> srcGreenShift] & 0xff;\r", "+\t\t\t\t\tb = srcBlues[(data & srcBlueMask) >>> srcBlueShift] & 0xff;\r", "+\t\t\t\t\ta = srcAlphas[(data & srcAlphaMask) >>> srcAlphaShift] & 0xff;\r", "+\t\t\t\t} break;\r", "+\t\t\t\tcase TYPE_GENERIC_32_LSB: {\r", "+\t\t\t\t\tfinal int data = (( (( ((srcData[sp + 3] & 0xff) << 8) |\r", "+\t\t\t\t\t\t(srcData[sp + 2] & 0xff)) << 8) |\r", "+\t\t\t\t\t\t(srcData[sp + 1] & 0xff)) << 8) |\r", "+\t\t\t\t\t\t(srcData[sp] & 0xff);\r", "+\t\t\t\t\tsp += (sfx >>> 16) * 4;\r", "+\t\t\t\t\tr = srcReds[(data & srcRedMask) >>> srcRedShift] & 0xff;\r", "+\t\t\t\t\tg = srcGreens[(data & srcGreenMask) >>> srcGreenShift] & 0xff;\r", "+\t\t\t\t\tb = srcBlues[(data & srcBlueMask) >>> srcBlueShift] & 0xff;\r", "+\t\t\t\t\ta = srcAlphas[(data & srcAlphaMask) >>> srcAlphaShift] & 0xff;\r", "+\t\t\t\t} break;\r", "-\t\t\tdr = sr = ((srcPixel & srcRedMask) << srcRedShift) >>> 24;\r", "-\t\t\tdg = sg = ((srcPixel & srcGreenMask) << srcGreenShift) >>> 24;\r", "-\t\t\tdb = sb = ((srcPixel & srcBlueMask) << srcBlueShift) >>> 24;\r", "-\t\t\tif (op != BLIT_SRC) {\r", "-\t\t\t\tswitch (destDepth) {\r", "-\t\t\t\t\tcase  1:\r", "-\t\t\t\t\t\tdestPixel = (destData[dp + (xd >> 3)] & destMasks[xd & 7]) == 0 ? 0 : 1;\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase  2:\r", "-\t\t\t\t\t\tdestPixel = ((destData[dp + (xd >> 2)] & destMasks[offset]) & 0xFF) >> (offset * 2);\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase  4:\r", "-\t\t\t\t\t\tdestPixel = destData[dp + (xd >> 1)] & 0xFF;\r", "-\t\t\t\t\t\tif ((xd & 0x1) == 0) {\r", "-\t\t\t\t\t\t\tdestPixel = destPixel >> 4;\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tdestPixel = destPixel & 0x0F;\r", "+\r", "+\t\t\t/*** DO SPECIAL PROCESSING IF REQUIRED ***/\r", "+\t\t\tswitch (alphaMode) {\r", "+\t\t\t\tcase ALPHA_CHANNEL_SEPARATE:\r", "+\t\t\t\t\talpha = ((alphaData[ap] & 0xff) << 16) / 255;\r", "+\t\t\t\t\tap += (sfx >> 16);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase ALPHA_CHANNEL_SOURCE:\r", "+\t\t\t\t\talpha = (a << 16) / 255;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase ALPHA_MASK_UNPACKED:\r", "+\t\t\t\t\talpha = (alphaData[ap] != 0) ? 0x10000 : 0;\r", "+\t\t\t\t\tap += (sfx >> 16);\r", "+\t\t\t\t\tbreak;\t\t\t\t\t\t\r", "+\t\t\t\tcase ALPHA_MASK_PACKED:\r", "+\t\t\t\t\talpha = (alphaData[ap >> 3] << ((ap & 7) + 9)) & 0x10000;\r", "+\t\t\t\t\tap += (sfx >> 16);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase ALPHA_MASK_RGB:\r", "+\t\t\t\t\talpha = 0x10000;\r", "+\t\t\t\t\tfor (int i = 0; i < alphaData.length; i += 3) {\r", "+\t\t\t\t\t\tif ((r == alphaData[i]) && (g == alphaData[i + 1]) && (b == alphaData[i + 2])) {\r", "+\t\t\t\t\t\t\talpha = 0x0000;\r", "+\t\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t\tcase  8:\r", "-\t\t\t\t\t\tdestPixel = destData[dp + xd] & 0xFF;\r", "-\t\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "-\t\t\t\tdr = destReds[destPixel] & 0xFF;\r", "-\t\t\t\tdg = destGreens[destPixel] & 0xFF;\r", "-\t\t\t\tdb = destBlues[destPixel] & 0xFF;\r", "-\t\t\t\tswitch (op) {\r", "-\t\t\t\t\tcase BLIT_ALPHA:\r", "-\t\t\t\t\t\tdr += (sr - dr) * sa / 255;\r", "-\t\t\t\t\t\tdg += (sg - dg) * sa / 255;\r", "-\t\t\t\t\t\tdb += (sb - db) * sa / 255;\r", "+\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\tif (lastPixel == -1 || lastPixel != srcPixel) {\r", "-\t\t\t\tminDistance = 0x7FFFFFFF;\r", "-\t\t\t\tnearestPixel = 0;\r", "-\t\t\t\tfor (j = 0; j < destN; j++) {\r", "-\t\t\t\t\tr = (destReds[j] & 0xFF) - dr;\r", "-\t\t\t\t\tg = (destGreens[j] & 0xFF) - dg;\r", "-\t\t\t\t\tb = (destBlues[j] & 0xFF) - db;\r", "-\t\t\t\t\tdistance = r*r + g*g + b*b;\r", "+\t\t\tif (alpha != 0x10000) {\r", "+\t\t\t\tif (alpha == 0x0000) continue;\r", "+\t\t\t\tswitch (dtype) {\r", "+\t\t\t\t\tcase TYPE_INDEX_8:\r", "+\t\t\t\t\t\tindexq = destData[dp] & 0xff;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TYPE_INDEX_4:\r", "+\t\t\t\t\t\tif ((dp & 1) != 0) indexq = destData[dp >> 1] & 0x0f;\r", "+\t\t\t\t\t\telse indexq = (destData[dp >> 1] >>> 4) & 0x0f;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TYPE_INDEX_2:\r", "+\t\t\t\t\t\tindexq = (destData[dp >> 2] >>> (6 - (dp & 3) * 2)) & 0x03;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TYPE_INDEX_1_MSB:\r", "+\t\t\t\t\t\tindexq = (destData[dp >> 3] >>> (7 - (dp & 7))) & 0x01;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase TYPE_INDEX_1_LSB:\r", "+\t\t\t\t\t\tindexq = (destData[dp >> 3] >>> (dp & 7)) & 0x01;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\t\t\t// Perform alpha blending\r", "+\t\t\t\tfinal int rq = destReds[indexq] & 0xff;\r", "+\t\t\t\tfinal int gq = destGreens[indexq] & 0xff;\r", "+\t\t\t\tfinal int bq = destBlues[indexq] & 0xff;\r", "+\t\t\t\tr = rq + ((r - rq) * alpha >> 16);\r", "+\t\t\t\tg = gq + ((g - gq) * alpha >> 16);\r", "+\t\t\t\tb = bq + ((b - bq) * alpha >> 16);\r", "+\t\t\t}\r", "+\r", "+\t\t\t/*** MAP COLOR TO THE PALETTE ***/\r", "+\t\t\tif (ditherEnabled) {\r", "+\t\t\t\t// Floyd-Steinberg error diffusion\r", "+\t\t\t\tr += rerr[dx] >> 4;\r", "+\t\t\t\tif (r < 0) r = 0; else if (r > 255) r = 255;\r", "+\t\t\t\tg += gerr[dx] >> 4;\r", "+\t\t\t\tif (g < 0) g = 0; else if (g > 255) g = 255;\r", "+\t\t\t\tb += berr[dx] >> 4;\r", "+\t\t\t\tif (b < 0) b = 0; else if (b > 255) b = 255;\r", "+\t\t\t\trerr[dx] = lrerr;\r", "+\t\t\t\tgerr[dx] = lgerr;\r", "+\t\t\t\tberr[dx] = lberr;\r", "+\t\t\t}\r", "+\t\t\tif (r != lastr || g != lastg || b != lastb) {\r", "+\t\t\t\t// moving the variable declarations out seems to make the JDK JIT happier...\r", "+\t\t\t\tfor (int j = 0, dr, dg, db, distance, minDistance = 0x7fffffff; j < destPaletteSize; ++j) {\r", "+\t\t\t\t\tdr = (destReds[j] & 0xff) - r;\r", "+\t\t\t\t\tdg = (destGreens[j] & 0xff) - g;\r", "+\t\t\t\t\tdb = (destBlues[j] & 0xff) - b;\r", "+\t\t\t\t\tdistance = dr * dr + dg * dg + db * db;\r", "-\t\t\t\t\t\tnearestPixel = j;\r", "+\t\t\t\t\t\tlastindex = j;\r", "-\t\t\t\tlastPixel = srcPixel;\r", "+\t\t\t\tlastr = r; lastg = g; lastb = b;\r", "-\t\t\tdestPixel = nearestPixel;\r", "-\t\t\tswitch (destDepth) {\r", "-\t\t\t\tcase  1:\r", "-\t\t\t\t\tif ((destPixel & 0x1) == 1) {\r", "-\t\t\t\t\t\tdestData[dp + (xd >> 3)] |= destInverseMasks[xd & 7];\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tdestData[dp + (xd >> 3)] &= destInverseMasks[xd & 7] ^ -1;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase  2:\r", "-\t\t\t\t\tdestData[dp + (xd >> 2)] = (byte)((destData[dp + (xd >> 2)] & destInverseMasks[offset]) | (destPixel << (offset * 2)));\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase  4:\r", "-\t\t\t\t\tif ((xd & 0x1) == 0) {\r", "-\t\t\t\t\t\tdestData[dp + (xd >> 1)] = (byte)((destData[dp + (xd >> 1)] & 0x0F) | ((destPixel & 0x0F) << 4));\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tdestData[dp + (xd >> 1)] = (byte)((destData[dp + (xd >> 1)] & 0xF0) | (destPixel & 0x0F));\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase  8:\r", "-\t\t\t\t\tdestData[dp + xd] = (byte)(destPixel & 0xFF);\r", "-\t\t\t\t\tbreak;\r", "+\t\t\tif (ditherEnabled) {\r", "+\t\t\t\t// Floyd-Steinberg error diffusion, cont'd...\r", "+\t\t\t\tfinal int dxm1 = dx - 1, dxp1 = dx + 1;\r", "+\t\t\t\tint acc;\r", "+\t\t\t\trerr[dxp1] += acc = (lrerr = r - (destReds[lastindex] & 0xff)) + lrerr + lrerr;\r", "+\t\t\t\trerr[dx] += acc += lrerr + lrerr;\r", "+\t\t\t\trerr[dxm1] += acc + lrerr + lrerr;\r", "+\t\t\t\tgerr[dxp1] += acc = (lgerr = g - (destGreens[lastindex] & 0xff)) + lgerr + lgerr;\r", "+\t\t\t\tgerr[dx] += acc += lgerr + lgerr;\r", "+\t\t\t\tgerr[dxm1] += acc + lgerr + lgerr;\r", "+\t\t\t\tberr[dxp1] += acc = (lberr = b - (destBlues[lastindex] & 0xff)) + lberr + lberr;\r", "+\t\t\t\tberr[dx] += acc += lberr + lberr;\r", "+\t\t\t\tberr[dxm1] += acc + lberr + lberr;\r", "-\t\t\twhile (ex >= 0) {\r", "-\t\t\t\tsp += sxs;\r", "-\t\t\t\tex -= dxd2;\r", "-\t\t\t\tif (srcAlphaData != null) sap += sas;\r", "-\t\t\t}\r", "-\t\t\txd += sxd;\r", "-\t\t\tex += dxs2;\r", "-\t\t\tif (offset == 0) {\r", "-\t\t\t\toffset = 3;\r", "-\t\t\t} else {\r", "-\t\t\t\toffset--;\r", "+\r", "+\t\t\t/*** WRITE NEXT PIXEL ***/\r", "+\t\t\tswitch (dtype) {\r", "+\t\t\t\tcase TYPE_INDEX_8:\r", "+\t\t\t\t\tdestData[dp] = (byte) lastindex;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase TYPE_INDEX_4:\r", "+\t\t\t\t\tif ((dp & 1) != 0) destData[dp >> 1] = (byte)((destData[dp >> 1] & 0xf0) | lastindex);\r", "+\t\t\t\t\telse destData[dp >> 1] = (byte)((destData[dp >> 1] & 0x0f) | (lastindex << 4));\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase TYPE_INDEX_2: {\r", "+\t\t\t\t\tfinal int shift = 6 - (dp & 3) * 2;\r", "+\t\t\t\t\tdestData[dp >> 2] = (byte)(destData[dp >> 2] & ~(0x03 << shift) | (lastindex << shift));\r", "+\t\t\t\t} break;\t\t\t\t\t\r", "+\t\t\t\tcase TYPE_INDEX_1_MSB: {\r", "+\t\t\t\t\tfinal int shift = 7 - (dp & 7);\r", "+\t\t\t\t\tdestData[dp >> 3] = (byte)(destData[dp >> 3] & ~(0x01 << shift) | (lastindex << shift));\r", "+\t\t\t\t} break;\r", "+\t\t\t\tcase TYPE_INDEX_1_LSB: {\r", "+\t\t\t\t\tfinal int shift = dp & 7;\r", "+\t\t\t\t\tdestData[dp >> 3] = (byte)(destData[dp >> 3] & ~(0x01 << shift) | (lastindex << shift));\r", "+\t\t\t\t} break;\t\t\t\t\t\r", "-\t\t\r", "-\t\tif (srcAlphaData != null) sa = srcAlphaData[sap] & 0xFF;\r", "-\t\tswitch (srcDepth) {\r", "-\t\t\tcase 16:\r", "-\t\t\t\tsrcPixel = ((srcData[sp+so0] & 0xFF) << 8) | (srcData[sp+so1] & 0xFF);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 24:\r", "-\t\t\t\tsrcPixel = ((srcData[sp+so0] & 0xFF) << 16) | ((srcData[sp+so1] & 0xFF) << 8) | \r", "-\t\t\t\t\t(srcData[sp+so2] & 0xFF);\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase 32:\r", "-\t\t\t\tsrcPixel = ((srcData[sp+so0] & 0xFF) << 24) | ((srcData[sp+so1] & 0xFF) << 16) |\r", "-\t\t\t\t\t((srcData[sp+so2] & 0xFF) << 8) | (srcData[sp+so3] & 0xFF);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t\tdr = sr = ((srcPixel & srcRedMask) << srcRedShift) >>> 24;\r", "-\t\tdg = sg = ((srcPixel & srcGreenMask) << srcGreenShift) >>> 24;\r", "-\t\tdb = sb = ((srcPixel & srcBlueMask) << srcBlueShift) >>> 24;\r", "-\t\tif (op != BLIT_SRC) {\r", "-\t\t\tswitch (destDepth) {\r", "-\t\t\t\tcase  1:\r", "-\t\t\t\t\tdestPixel = (destData[dp + (xd >> 3)] & destMasks[xd & 7]) == 0 ? 0 : 1;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase  2:\r", "-\t\t\t\t\tdestPixel = ((destData[dp + (xd >> 2)] & destMasks[offset]) & 0xFF) >> (offset * 2);\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase  4:\r", "-\t\t\t\t\tdestPixel = destData[dp + (xd >> 1)] & 0xFF;\r", "-\t\t\t\t\tif ((xd & 0x1) == 0) {\r", "-\t\t\t\t\t\tdestPixel = destPixel >> 4;\r", "-\t\t\t\t\t} else {\r", "-\t\t\t\t\t\tdestPixel = destPixel & 0x0F;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase  8:\r", "-\t\t\t\t\tdestPixel = destData[dp + xd] & 0xFF;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t}\r", "-\t\t\tdr = destReds[destPixel] & 0xFF;\r", "-\t\t\tdg = destGreens[destPixel] & 0xFF;\r", "-\t\t\tdb = destBlues[destPixel] & 0xFF;\r", "-\t\t\tswitch (op) {\r", "-\t\t\t\tcase BLIT_ALPHA:\r", "-\t\t\t\t\tdr += (sr - dr) * sa / 255;\r", "-\t\t\t\t\tdg += (sg - dg) * sa / 255;\r", "-\t\t\t\t\tdb += (sb - db) * sa / 255;\r", "-\t\t\t\tbreak;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif (lastPixel == -1 || lastPixel != srcPixel) {\r", "-\t\t\tminDistance = 0x7FFFFFFF;\r", "-\t\t\tnearestPixel = 0;\r", "-\t\t\tfor (j = 0; j < destN; j++) {\r", "-\t\t\t\tr = (destReds[j] & 0xFF) - dr;\r", "-\t\t\t\tg = (destGreens[j] & 0xFF) - dg;\r", "-\t\t\t\tb = (destBlues[j] & 0xFF) - db;\r", "-\t\t\t\tdistance = r*r + g*g + b*b;\r", "-\t\t\t\tif (distance < minDistance) {\r", "-\t\t\t\t\tnearestPixel = j;\r", "-\t\t\t\t\tif (distance == 0) break;\r", "-\t\t\t\t\tminDistance = distance;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tlastPixel = srcPixel;\r", "-\t\t}\r", "-\t\tdestPixel = nearestPixel;\r", "-\t\tswitch (destDepth) {\r", "-\t\t\tcase  1:\r", "-\t\t\t\tif ((destPixel & 0x1) == 1) {\r", "-\t\t\t\t\tdestData[dp + (xd >> 3)] |= destInverseMasks[xd & 7];\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tdestData[dp + (xd >> 3)] &= destInverseMasks[xd & 7] ^ -1;\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase  2:\r", "-\t\t\t\tdestData[dp + (xd >> 2)] = (byte)((destData[dp + (xd >> 2)] & destInverseMasks[offset]) | (destPixel << (offset * 2)));\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase  4:\r", "-\t\t\t\tif ((xd & 0x1) == 0) {\r", "-\t\t\t\t\tdestData[dp + (xd >> 1)] = (byte)((destData[dp + (xd >> 1)] & 0x0F) | ((destPixel & 0x0F) << 4));\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tdestData[dp + (xd >> 1)] = (byte)((destData[dp + (xd >> 1)] & 0xF0) | (destPixel & 0x0F));\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase  8:\r", "-\t\t\t\tdestData[dp + xd] = (byte)(destPixel & 0xFF);\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t\t/* X stretch ends here */\r", "-\t\tif (dy == dyd)\r", "-\t\t\tbreak;\r", "-\t\twhile (ey >= 0) {\r", "-\t\t\tys += sys;\r", "-\t\t\tey -= dyd2;\r", "-\t\t}\r", "-\t\tyd += syd;\r", "-\t\tey += dys2;\r"]}], "num": 18549}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "616ece6b787251667f5715919b7e77e3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d80420991c2a230b605a99f1377a95fe", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "7c0db4cce542218140ce6c30379439b537db632b", "commitAfterChange": "9e9764b5a832a13a26dd86c5d1540dde145507bb", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public boolean getExpanded ()", "signatureAfterChange": " public boolean getExpanded ()", "diff": ["-\t/*", "-\t* Bug in Windows.  Despite the fact that TVM_GETITEMSTATE claims", "-\t* to return only the bits specified by the stateMask, when called", "-\t* with TVIS_EXPANDED, the entire state is returned.  The fix is", "-\t* to explicitly check for the TVIS_EXPANDED bit.", "-\t*/", "-\tint hwnd = parent.handle;", "-\tint state = OS.SendMessage (hwnd, OS.TVM_GETITEMSTATE, handle, OS.TVIS_EXPANDED);", "+\tint hwnd = parent.handle, state = 0;", "+\tif (OS.IsWinCE) {", "+\t\tTVITEM tvItem = new TVITEM ();", "+\t\ttvItem.hItem = handle;", "+\t\ttvItem.mask = OS.TVIF_STATE;", "+\t\tOS.SendMessage (hwnd, OS.TVM_GETITEM, 0, tvItem);", "+\t\tstate = tvItem.state;", "+\t} else {", "+\t\t/*", "+\t\t* Bug in Windows.  Despite the fact that TVM_GETITEMSTATE claims", "+\t\t* to return only the bits specified by the stateMask, when called", "+\t\t* with TVIS_EXPANDED, the entire state is returned.  The fix is", "+\t\t* to explicitly check for the TVIS_EXPANDED bit.", "+\t\t*/", "+\t\tstate = OS.SendMessage (hwnd, OS.TVM_GETITEMSTATE, handle, OS.TVIS_EXPANDED);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b80878da8189608f2b5450d3a0e3bae6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "0fe3af1f959418fcfb85ca60636d9118d5535d5d", "commitAfterChange": "7d1fcf9e7c505a81fbab0214ce79366a47c54723", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\tif ((style & SWT.RIGHT) != 0) {", "-\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextSingleLineTag, 1, new byte [] {1});", "-\t\t}", "-\t\tRect rect = new Rect ();", "-\t\tOS.GetBestControlRect (handle, rect, null);", "-\t\tif ((style & SWT.RIGHT) != 0) {", "-\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextSingleLineTag, 1, new byte [] {0});", "-\t\t}", "-\t\twidth = rect.right - rect.left;", "-\t\theight = rect.bottom - rect.top;", "+\t\t\theight = size1.y;", "+\t\t\tint [] metric = new int [1];", "+\t\t\tOS.GetThemeMetric (OS.kThemeMetricEditTextWhitespace, metric);", "+\t\t\theight += metric [0] * 2;", "+\t\t\tOS.GetThemeMetric (OS.kThemeMetricEditTextFrameOutset, metric);", "+\t\t\theight += metric [0] * 2;", "+\t\t} else {", "+\t\t\tif ((style & SWT.RIGHT) != 0) {", "+\t\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextSingleLineTag, 1, new byte [] {1});", "+\t\t\t}", "+\t\t\tRect rect = new Rect ();", "+\t\t\tOS.GetBestControlRect (handle, rect, null);", "+\t\t\tif ((style & SWT.RIGHT) != 0) {", "+\t\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextSingleLineTag, 1, new byte [] {0});", "+\t\t\t}", "+\t\t\twidth = rect.right - rect.left;", "+\t\t\theight = rect.bottom - rect.top;"]}], "num": 51143}
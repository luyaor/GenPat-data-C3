{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ad80a613d2e3a7068eb204743c630813", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b67dab7127e7d202baac6a27635275b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 362, "methodNumberAfterChange": 363, "signatureBeforeChange": " \tint get_caretOffset(int pOffset)", "signatureAfterChange": " \tint get_caretOffset(int pOffset)", "diff": ["-\t\t// TODO: already in old API (in super interface)", "-\t\tfor (int i = 0; i < accessibleTextListeners.size(); i++) {", "-\t\t\tAccessibleTextListener listener = (AccessibleTextListener) accessibleTextListeners.elementAt(i);", "+\t\tevent.offset = -1;", "+\t\tfor (int i = 0; i < accessibleTextExtendedListeners.size(); i++) {", "+\t\t\tAccessibleTextListener listener = (AccessibleTextListener) accessibleTextExtendedListeners.elementAt(i);", "+\t\tif (event.offset == -1) {", "+\t\t\tfor (int i = 0; i < accessibleTextListeners.size(); i++) {", "+\t\t\t\tevent.childID = ACC.CHILDID_SELF;", "+\t\t\t\tAccessibleTextListener listener = (AccessibleTextListener) accessibleTextListeners.elementAt(i);", "+\t\t\t\tlistener.getCaretOffset (event);", "+\t\t\t}", "+\t\t}", "+\t\tif (DEBUG) print(\"IAccessibleText::get_caretOffset returning \" + event.offset);", "+\t\tif (event.offset == -1) return COM.S_FALSE;", "-\t\t// TODO: @retval S_FALSE if the caret is not currently active on this object, i.e. the"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "050e586d4f1276f9115ba6711a5003cd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 363, "methodNumberAfterChange": 364, "signatureBeforeChange": " \tint get_characterExtents(int offset, int coordType, int pX, int pY, int pWidth, int pHeight)", "signatureAfterChange": " \tint get_characterExtents(int offset, int coordType, int pX, int pY, int pWidth, int pHeight)", "diff": ["-\t\tevent.start = offset;", "-\t\tevent.end = offset;", "+\t\tfor (int i = 0; i < accessibleTextExtendedListeners.size(); i++) {", "+\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) accessibleTextExtendedListeners.elementAt(i);", "+\t\t\tlistener.getCharacterCount(event);", "+\t\t}", "+\t\tint length = event.count;", "+\t\tevent.count = 0;", "+\t\tevent.start = offset < 0 ? 0 : offset;", "+\t\tevent.end = offset >= length ? length : offset + 1;", "+\t\t/* Note: event.rectangles is not used here, because IAccessibleText::get_characterExtents is just for one character. */", "+\t\tif (event.width == 0 && event.height == 0) return COM.E_INVALIDARG;", "-\t\t// TODO: @retval E_INVALIDARG if bad [in] passed, [out] values are 0s"]}], "num": 15677}
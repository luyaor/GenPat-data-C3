{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1cf977d314c2974fe88ada48a384ad87", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71820e5d7328b316fab27d6dd12e790a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "48e187525dbdddb19c5ae73327fdafa3851247d0", "commitAfterChange": "4810e30ca3e1729018edf0620ce78065e4c1622b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["-\treturn OS.CallWindowProc (EditProc, hwnd, msg, wParam, lParam);", "+\tboolean redraw = false;", "+\tswitch (msg) {", "+\t\tcase OS.WM_ERASEBKGND: {", "+\t\t\tif (findImageControl () != null) return 0;", "+\t\t\tbreak;", "+\t\t}", "+\t\tcase OS.WM_HSCROLL:", "+\t\tcase OS.WM_VSCROLL: {", "+\t\t\tredraw = findImageControl () != null && drawCount == 0 && OS.IsWindowVisible (handle);", "+\t\t\tif (redraw) OS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);", "+\t\t\tbreak;", "+\t\t}", "+\t\tcase OS.WM_PAINT: {", "+\t\t\tif (findImageControl () != null) {", "+\t\t\t\tint /*long*/ paintDC = 0;", "+\t\t\t\tPAINTSTRUCT ps = new PAINTSTRUCT ();", "+\t\t\t\tpaintDC = OS.BeginPaint (handle, ps);", "+\t\t\t\tint width = ps.right - ps.left;", "+\t\t\t\tint height = ps.bottom - ps.top;", "+\t\t\t\tif (width != 0 && height != 0) {", "+\t\t\t\t\tint /*long*/ hDC = OS.CreateCompatibleDC (paintDC);", "+\t\t\t\t\tPOINT lpPoint1 = new POINT (), lpPoint2 = new POINT ();", "+\t\t\t\t\tOS.SetWindowOrgEx (hDC, ps.left, ps.top, lpPoint1);", "+\t\t\t\t\tOS.SetBrushOrgEx (hDC, ps.left, ps.top, lpPoint2);", "+\t\t\t\t\tint /*long*/ hBitmap = OS.CreateCompatibleBitmap (paintDC, width, height);", "+\t\t\t\t\tint /*long*/ hOldBitmap = OS.SelectObject (hDC, hBitmap);", "+\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\tOS.SetRect (rect, ps.left, ps.top, ps.right, ps.bottom);", "+\t\t\t\t\tdrawBackground (hDC, rect);", "+\t\t\t\t\tOS.CallWindowProc (EditProc, hwnd, OS.WM_PAINT, hDC, lParam);", "+\t\t\t\t\tOS.SetWindowOrgEx (hDC, lpPoint1.x, lpPoint1.y, null);", "+\t\t\t\t\tOS.SetBrushOrgEx (hDC, lpPoint2.x, lpPoint2.y, null);", "+\t\t\t\t\tOS.BitBlt (paintDC, ps.left, ps.top, width, height, hDC, 0, 0, OS.SRCCOPY);", "+\t\t\t\t\tOS.SelectObject (hDC, hOldBitmap);", "+\t\t\t\t\tOS.DeleteObject (hBitmap);", "+\t\t\t\t\tOS.DeleteObject (hDC);", "+\t\t\t\t}", "+\t\t\t\tOS.EndPaint (handle, ps);", "+\t\t\t\treturn 0;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}", "+\t}", "+\tint code = OS.CallWindowProc (EditProc, hwnd, msg, wParam, lParam);", "+\tswitch (msg) {", "+\t\tcase OS.WM_HSCROLL:", "+\t\tcase OS.WM_VSCROLL: {", "+\t\t\tif (redraw) {", "+\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);", "+\t\t\t\tOS.InvalidateRect (handle, null, true);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}", "+\t}", "+\treturn code;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a81bba94202748752306f4abbf745f19", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet353.java", "commitBeforeChange": "3bbaf9a8dc2ba8cdccf18eb8d70da4b923ade329", "commitAfterChange": "c59b97dacab2962be63d87127b336c1a2c6077f0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic static void main(String [] args)", "signatureAfterChange": "  \tpublic static void main(String [] args)", "diff": ["+", "-\t\tShell shell = new Shell(display);", "+\t\tfinal Shell shell = new Shell(display);", "+", "+\t\tGestureListener gl = new GestureListener() {", "+\t\t\tpublic void gesture(GestureEvent ge) {", "+\t\t\t\tif (ge.detail == SWT.GESTURE_BEGIN) {", "+\t\t\t\t\tcurrentRotation = rotation;", "+\t\t\t\t\tcurrentMagnification = magnification;", "+\t\t\t\t}", "+", "+\t\t\t\tif (ge.detail == SWT.GESTURE_ROTATE) {", "+\t\t\t\t\trotation = currentRotation - ge.rotation;", "+\t\t\t\t\tshell.redraw();", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif (ge.detail == SWT.GESTURE_MAGNIFY) {", "+\t\t\t\t\tmagnification = (float) (currentMagnification * ge.magnification);", "+\t\t\t\t\tshell.redraw();", "+\t\t\t\t}", "+", "+\t\t\t\tif (ge.detail == SWT.GESTURE_SWIPE) {", "+\t\t\t\t\t// xDirection and yDirection indicate direction for GESTURE_SWIPE.", "+\t\t\t\t\t// For this example, just move in that direction to demonstrate it's working.", "+\t\t\t\t\torigin.x += ge.xDirection * 50;", "+\t\t\t\t\torigin.y += ge.yDirection * 50;", "+\t\t\t\t\tshell.redraw();", "+\t\t\t\t}", "+", "+\t\t\t\tif (ge.detail == SWT.GESTURE_PAN) {", "+\t\t\t\t\torigin.x += ge.xDirection;", "+\t\t\t\t\torigin.y += ge.yDirection;", "+\t\t\t\t\tshell.redraw();", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif (ge.detail == SWT.GESTURE_END) {", "+\t\t\t\t\t", "+\t\t\t\t}\t\t", "+\t\t\t}", "+\t\t};", "+", "+\t\tPaintListener pl = new PaintListener() {", "+\t\t\tpublic void paintControl(PaintEvent e) {", "+\t\t\t\tTransform t = new Transform(Display.getCurrent());", "+\t\t\t\tt.translate(origin.x, origin.y);", "+\t\t\t\tt.translate(size.x / 2, size.y / 2);", "+\t\t\t\tt.rotate((float) rotation);", "+\t\t\t\tt.translate(-size.x / 2, -size.y / 2);", "+\t\t\t\tt.translate(-origin.x, -origin.y);", "+\t\t\t\te.gc.setAntialias(SWT.ON);", "+\t\t\t\te.gc.setTransform(t);", "+\t\t\t\t", "+\t\t\t\t// Because of bug 253670, drawRectangle is incorrect when the rotation is near 45, 135, 225 or 315 degrees.", "+\t\t\t\t// Uncomment this next line and adjust the bitfield for your platform. See GC#DRAW_OFFSET.", "+\t\t\t\t//e.gc.getGCData().state |= 1 << 9;", "+\t\t\t\t", "+\t\t\t\te.gc.drawRectangle(origin.x, origin.y, (int)(size.x * magnification), (int)(size.y * magnification));", "+\t\t\t\tt.dispose();", "+\t\t\t}", "+\t\t};", "+\t\t", "+\t\tshell.addPaintListener(pl);", "+\t\tshell.addGestureListener(gl);", "+\t\tshell.setSize(400, 400);", "+\t\tsize = new Point(50, 50);", "+\t\torigin = new Point((shell.getSize().x - size.x) / 2, (shell.getSize().y - size.y) / 2);", "+\t\tshell.open();", "+"]}], "num": 47944}
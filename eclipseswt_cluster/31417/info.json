{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c1db9e2290bdeea02bb23d06b9d39e5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ac0988add2b1768502846ce5d89cf51", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "fa5f2489bdf14a8636f01b8292ce465b8e1cfb0a", "commitAfterChange": "a5730346b2941e8fcd1f3e126cea623d204e89ab", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  int gtk_key_press_event (int widget, int event)", "signatureAfterChange": "  int gtk_key_press_event (int widget, int event)", "diff": ["-\tif (OS.GTK_VERSION < OS.VERSION (2, 2 ,0)) {", "-\t\t/*", "-\t\t* Feature in GTK 2.0.x.  When an item is default selected using", "-\t\t* the return key, GTK does not issue notification. The fix is", "-\t\t* to issue this notification when the return key is pressed.", "-\t\t*/", "-\t\tGdkEventKey keyEvent = new GdkEventKey ();", "-\t\tOS.memmove (keyEvent, event, GdkEventKey.sizeof);", "-\t\tint key = keyEvent.keyval;", "-\t\tswitch (key) {", "-\t\t\tcase OS.GDK_Return:", "-\t\t\tcase OS.GDK_KP_Enter: {", "-\t\t\t\tsendSelectionEvent (SWT.DefaultSelection);", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "614bd3fd278d12cc1c645044677e4664", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "941fe0db3dd763ccfa22752197e6c0aece974d95", "commitAfterChange": "d4d83e9bda0ef720f842c49259231cc258ca06e7", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "  LRESULT WM_ACTIVATE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_ACTIVATE (int wParam, int lParam)", "diff": ["-\t/*", "-\t* Feature in AWT.  When an AWT Window is activated,", "-\t* for some reason, it seems to forward the WM_ACTIVATE", "-\t* message to the parent.  Normally, the parent is an", "-\t* AWT Frame.  When AWT is embedded in SWT, the SWT", "-\t* shell gets the WM_ACTIVATE and assumes that it came", "-\t* from Windows.  When an SWT shell is activated it", "-\t* restores focus to the last control that had focus.", "-\t* If this control is an embedded composite, it takes", "-\t* focus from the AWT Window.  The fix is to ignore", "-\t* WM_ACTIVATE messages that come from AWT Windows.", "-\t*/", "-\tif (OS.GetParent (lParam) == handle) {", "-\t\tTCHAR buffer = new TCHAR (0, 128);", "-\t\tOS.GetClassName (lParam, buffer, buffer.length ());", "-\t\tString className = buffer.toString (0, buffer.strlen ());", "-\t\tif (className.equals (Display.AWT_WINDOW_CLASS)) {", "-\t\t\treturn LRESULT.ZERO;", "-\t\t}", "-\t}", "+//\tint threadId = OS.GetWindowThreadProcessId (lParam, null);", "+//\tif (threadId != OS.GetCurrentThreadId ()) {", "+//\t\tint [] processID = new int [1];", "+//\t\tOS.GetWindowThreadProcessId (lParam, processID);", "+//\t\tif (processID [0] == OS.GetCurrentProcessId ()) {", "+//\t\t\tTCHAR buffer = new TCHAR (0, 128);", "+//\t\t\tOS.GetClassName (lParam, buffer, buffer.length ());", "+//\t\t\tString className = buffer.toString (0, buffer.strlen ());", "+//\t\t\t/*", "+//\t\t\t* Feature in AWT.  ", "+//\t\t\t*/", "+//\t\t\tif (className.startsWith (Display.AWT_WINDOW_CLASS_PREFIX)) {", "+//\t\t\t\t//OS.ReplyMessage (0);", "+//\t\t\t}", "+//\t\t\t/*", "+//\t\t\t* Feature in AWT.  When an AWT Window is activated,", "+//\t\t\t* for some reason, it seems to forward the WM_ACTIVATE", "+//\t\t\t* message to the parent.  Normally, the parent is an", "+//\t\t\t* AWT Frame.  When AWT is embedded in SWT, the SWT", "+//\t\t\t* shell gets the WM_ACTIVATE and assumes that it came", "+//\t\t\t* from Windows.  When an SWT shell is activated it", "+//\t\t\t* restores focus to the last control that had focus.", "+//\t\t\t* If this control is an embedded composite, it takes", "+//\t\t\t* focus from the AWT Window.  The fix is to ignore", "+//\t\t\t* WM_ACTIVATE messages that come from AWT Windows.", "+//\t\t\t*/", "+//\t\t\tif (OS.GetParent (lParam) == handle) {", "+//\t\t\t\tif (className.equals (Display.AWT_WINDOW_CLASS)) {", "+//\t\t\t\t\treturn LRESULT.ZERO;", "+//\t\t\t\t}", "+//\t\t\t}", "+//\t\t}", "+//\t}"]}], "num": 31417}
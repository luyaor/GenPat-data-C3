{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1dc82ac82b88e84d9c84fdd792bb027b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58ac39a460bd2e981c785b7de9dd75e8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "beda5b839167b1b13e3a65b090e298b270572014", "commitAfterChange": "e83e2a14510bd4b2fede7ad0592f39a83b67fb7d", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["+\t\t\t\t\t/*", "+\t\t\t\t\t* Bug in Windows.  When the table has the extended style", "+\t\t\t\t\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "+\t\t\t\t\t* CLR_NONE to make the table transparent, Windows fills", "+\t\t\t\t\t* a black rectangle around any column that contains an", "+\t\t\t\t\t* image.  The fix is clear LVS_EX_FULLROWSELECT during", "+\t\t\t\t\t* custom draw.", "+\t\t\t\t\t*/", "+\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) == OS.CLR_NONE) {", "+\t\t\t\t\t\t\tOS.UpdateWindow (handle);", "+\t\t\t\t\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "+\t\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "+\t\t\t\t\t\t\tOS.ValidateRect (handle, null);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\treturn new LRESULT (OS.CDRF_NOTIFYITEMDRAW);", "+\t\t\t\t\treturn new LRESULT (OS.CDRF_NOTIFYITEMDRAW | OS.CDRF_NOTIFYPOSTPAINT);", "+\t\t\t\t}", "+\t\t\t\tcase OS.CDDS_POSTPAINT: {", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Bug in Windows.  When the table has the extended style", "+\t\t\t\t\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "+\t\t\t\t\t* CLR_NONE to make the table transparent, Windows fills", "+\t\t\t\t\t* a black rectangle around any column that contains an", "+\t\t\t\t\t* image.  The fix is clear LVS_EX_FULLROWSELECT during", "+\t\t\t\t\t* custom draw.", "+\t\t\t\t\t*/", "+\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) == OS.CLR_NONE) {", "+\t\t\t\t\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "+\t\t\t\t\t\t\tif (OS.IsWinCE) {", "+\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\t\t\tboolean damaged = OS.GetUpdateRect (handle, rect, true);", "+\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, bits);", "+\t\t\t\t\t\t\t\tOS.ValidateRect (handle, null);", "+\t\t\t\t\t\t\t\tif (damaged) OS.InvalidateRect (handle, rect, true);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tint rgn = OS.CreateRectRgn (0, 0, 0, 0);", "+\t\t\t\t\t\t\t\tint result = OS.GetUpdateRgn (handle, rgn, true);", "+\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, bits);", "+\t\t\t\t\t\t\t\tOS.ValidateRect (handle, null);", "+\t\t\t\t\t\t\t\tif (result != OS.NULLREGION) OS.InvalidateRgn (handle, rgn, true);", "+\t\t\t\t\t\t\t\tOS.DeleteObject (rgn);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t\tboolean ignoreDrawSelected = false;", "+\t\t\t\t\t\t\t\tignoreDrawSelected = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Bug in Windows.  When the table has the extended style", "+\t\t\t\t\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "+\t\t\t\t\t* CLR_NONE to make the table transparent, Windows draws", "+\t\t\t\t\t* a black rectangle around any column that contains an", "+\t\t\t\t\t* image.  The fix is emulate LVS_EX_FULLROWSELECT by", "+\t\t\t\t\t* drawing the selection.", "+\t\t\t\t\t*/", "+\t\t\t\t\tif (!ignoreDrawSelected && (style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\tint bits = OS.SendMessage (handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0);", "+\t\t\t\t\t\tif ((bits & OS.LVS_EX_FULLROWSELECT) == 0) {", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t* Bug in Windows.  For some reason, CDIS_SELECTED always set,", "+\t\t\t\t\t\t\t* even for items that are not selected.  The fix is to get", "+\t\t\t\t\t\t\t* the selection state from the item.", "+\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\tLVITEM lvItem = new LVITEM ();", "+\t\t\t\t\t\t\tlvItem.mask = OS.LVIF_STATE;", "+\t\t\t\t\t\t\tlvItem.stateMask = OS.LVIS_SELECTED;", "+\t\t\t\t\t\t\tlvItem.iItem = nmcd.dwItemSpec;", "+\t\t\t\t\t\t\tint result = OS.SendMessage (handle, OS.LVM_GETITEM, 0, lvItem);", "+\t\t\t\t\t\t\tif ((result != 0 && (lvItem.state & OS.LVIS_SELECTED) != 0)) {", "+\t\t\t\t\t\t\t\tif (OS.GetFocus () == handle) {", "+\t\t\t\t\t\t\t\t\tclrText = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "+\t\t\t\t\t\t\t\t\tclrTextBk = OS.GetSysColor (OS.COLOR_HIGHLIGHT);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tif ((style & SWT.HIDE_SELECTION) == 0) {", "+\t\t\t\t\t\t\t\t\t\tclrTextBk = OS.GetSysColor (OS.COLOR_3DFACE);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (clrTextBk != -1 && nmcd.iSubItem == 0) {", "+\t\t\t\t\t\t\t\t\tRECT itemRect = new RECT ();", "+\t\t\t\t\t\t\t\t\titemRect.left = OS.LVIR_SELECTBOUNDS;", "+\t\t\t\t\t\t\t\t\tif (OS.SendMessage (handle, OS. LVM_GETITEMRECT, nmcd.dwItemSpec, itemRect) != 0) {", "+\t\t\t\t\t\t\t\t\t\tRECT headerRect = new RECT ();", "+\t\t\t\t\t\t\t\t\t\tif (OS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, 0, headerRect) != 0) {", "+\t\t\t\t\t\t\t\t\t\t\titemRect.left = itemRect.right;", "+\t\t\t\t\t\t\t\t\t\t\titemRect.right = headerRect.right;", "+\t\t\t\t\t\t\t\t\t\t\tfillBackground (hDC, clrTextBk, itemRect);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\trect.left = OS.LVIR_BOUNDS;", "+\t\t\t\t\t\titemRect.left = OS.LVIR_BOUNDS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b91871cb200c4c25dd3670a5d7673bcf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\tint features = OS.kControlSupportsEmbedding | OS.kControlSupportsFocus | OS.kControlGetsFocusOnClick;", "-\tint [] outControl = new int [1];", "-\tint window = OS.GetControlOwner (parent.handle);", "-\tOS.CreateUserPaneControl (window, null, features, outControl);", "-\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\thandle = outControl [0];", "+\tif (OS.HIVIEW) {", "+\t\tint [] outControl = new int [1];", "+\t\tif ((style & SWT.MULTI) != 0 || ((style & SWT.BORDER) == 0)) {", "+\t\t\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) != 0) {", "+\t\t\t\tint options = 0;", "+\t\t\t\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) == (SWT.H_SCROLL | SWT.V_SCROLL)) options |= OS.kHIScrollViewOptionsAllowGrow;", "+\t\t\t\tif ((style & SWT.H_SCROLL) != 0) options |= OS.kHIScrollViewOptionsHorizScroll;", "+\t\t\t\tif ((style & SWT.V_SCROLL) != 0) options |= OS.kHIScrollViewOptionsVertScroll;", "+\t\t\t\tOS.HIScrollViewCreate (options, outControl);", "+\t\t\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tscrolledHandle = outControl [0];", "+\t\t\t\tOS.HIViewSetVisible (scrolledHandle, true);", "+\t\t\t}", "+\t\t\tint iFrameOptions = OS.kTXNDontDrawCaretWhenInactiveMask | OS.kTXNMonostyledTextMask;", "+\t\t\tif ((style & SWT.SINGLE) != 0) iFrameOptions |= OS.kTXNSingleLineOnlyMask;", "+\t\t\tif ((style & SWT.WRAP) != 0) iFrameOptions |= OS.kTXNAlwaysWrapAtViewEdgeMask;", "+\t\t\tOS.HITextViewCreate (null, 0, iFrameOptions, outControl);", "+\t\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\thandle = outControl [0];", "+\t\t\tOS.HIViewSetVisible (handle, true);", "+\t\t\ttxnObject = OS.HITextViewGetTXNObject (handle);\t\t\t", "+\t\t\tint ptr = OS.NewPtr (Rect.sizeof);", "+\t\t\tRect rect = inset ();", "+\t\t\tOS.memcpy (ptr, rect, Rect.sizeof);", "+\t\t\tint [] tags = new int [] {", "+\t\t\t\tOS.kTXNDisableDragAndDropTag,", "+\t\t\t\tOS.kTXNIOPrivilegesTag,", "+\t\t\t\tOS.kTXNMarginsTag,", "+\t\t\t\tOS.kTXNJustificationTag,", "+\t\t\t\tOS.kTXNDoFontSubstitution,", "+\t\t\t\tOS.kTXNWordWrapStateTag,", "+\t\t\t\tOS.kTXNAutoScrollBehaviorTag,", "+\t\t\t};", "+\t\t\tint just = OS.kTXNFlushLeft;", "+\t\t\tif ((style & SWT.CENTER) != 0) just = OS.kTXNCenter;", "+\t\t\tif ((style & SWT.RIGHT) != 0) just = OS.kTXNFlushRight;", "+\t\t\tint [] datas = new int [] {", "+\t\t\t\t1,", "+\t\t\t\t(style & SWT.READ_ONLY) != 0 ? 1 : 0,", "+\t\t\t\tptr,", "+\t\t\t\tjust,", "+\t\t\t\t1,", "+\t\t\t\t(style & SWT.WRAP) != 0 ? 0 : 1,", "+\t\t\t\t0,", "+\t\t\t};", "+\t\t\tOS.TXNSetTXNObjectControls (txnObject, false, tags.length, tags, datas);", "+\t\t\tOS.DisposePtr (ptr);", "+\t\t} else {", "+\t\t\tint window = OS.GetControlOwner (parent.handle);", "+\t\t\tOS.CreateEditUnicodeTextControl (window, null, 0, (style & SWT.PASSWORD) != 0, null, outControl);", "+\t\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\thandle = outControl [0];", "+\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextSingleLineTag, 1, new byte [] {1});", "+\t\t\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextLockedTag, 1, new byte [] {1});", "+\t\t\t}", "+\t\t\tif ((style & (SWT.RIGHT | SWT.CENTER)) != 0) {", "+\t\t\t\tControlFontStyleRec fontStyle = new ControlFontStyleRec ();", "+\t\t\t\tfontStyle.flags |= OS.kControlUseJustMask;", "+\t\t\t\tif ((style & SWT.CENTER) != 0) fontStyle.just = OS.teJustCenter;", "+\t\t\t\tif ((style & SWT.RIGHT) != 0) fontStyle.just = OS.teJustRight;", "+\t\t\t\tOS.SetControlFontStyle (handle, fontStyle);", "+\t\t\t}", "+\t\t}\t\t", "+\t} else {", "+\t\tint features = OS.kControlSupportsEmbedding | OS.kControlSupportsFocus | OS.kControlGetsFocusOnClick;", "+\t\tint [] outControl = new int [1];", "+\t\tint window = OS.GetControlOwner (parent.handle);", "+\t\tOS.CreateUserPaneControl (window, null, features, outControl);", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\t", "+\t\t/*", "+\t\t* Feature in the Macintosh.  The TXNObject is not a control but creates scroll", "+\t\t* bar controls to scroll the text.  These are created in the root and are not", "+\t\t* children of the user pane that is used to represent the TNXObject.  The fix", "+\t\t* is to embed the scroll bars in the user pane.", "+\t\t*/", "+\t\tint [] theRoot = new int [1];", "+\t\tOS.GetRootControl (window, theRoot);", "+\t\tshort [] oldCount = new short [1];", "+\t\tOS.CountSubControls (theRoot [0], oldCount);\t", "+\t\t", "+\t\t/* Create the TXNObject */", "+\t\tint iFrameOptions = OS.kTXNDontDrawCaretWhenInactiveMask | OS.kTXNMonostyledTextMask;", "+\t\tif ((style & SWT.H_SCROLL) != 0) iFrameOptions |= OS.kTXNWantHScrollBarMask;", "+\t\tif ((style & SWT.V_SCROLL) != 0) iFrameOptions |= OS.kTXNWantVScrollBarMask;", "+\t\tif ((style & SWT.SINGLE) != 0) iFrameOptions |= OS.kTXNSingleLineOnlyMask;", "+\t\tif ((style & SWT.WRAP) != 0) iFrameOptions |= OS.kTXNAlwaysWrapAtViewEdgeMask;", "+\t\tint [] oTXNObject = new int [1], oTXNFrameID = new int[1];", "+\t\tOS.TXNNewObject (0, window, null, iFrameOptions, OS.kTXNTextEditStyleFrameType, OS.kTXNUnicodeTextFile, OS.kTXNSystemDefaultEncoding, oTXNObject, oTXNFrameID, 0);", "+\t\tif (oTXNObject [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\ttxnObject = oTXNObject [0];", "+\t\ttxnFrameID = oTXNFrameID [0];", "+\t\t", "+\t\t/* Embed the scroll bars in the user pane */", "+\t\tshort [] newCount = new short [1];", "+\t\tOS.CountSubControls (theRoot [0], newCount);", "+\t\tint [] scrollBar = new int [1];", "+\t\tfor (int i=newCount [0]; i>oldCount [0]; --i) {", "+\t\t\tOS.GetIndexedSubControl (theRoot [0], (short) i, scrollBar);", "+\t\t\tOS.HIViewRemoveFromSuperview (scrollBar [0]);", "+\t\t\tOS.HIViewAddSubview (handle, scrollBar [0]);", "+\t\t}", "+\t\t", "+\t\t/* Configure the TXNObject */", "+\t\tint ptr = OS.NewPtr (Rect.sizeof);", "+\t\tRect rect = new Rect ();", "+\t\tif (hasBorder ()) {", "+\t\t\tOS.SetRect (rect, (short) 1, (short) 1, (short) 1, (short) 1);", "+\t\t}", "+\t\tOS.memcpy (ptr, rect, Rect.sizeof);", "+\t\tint [] tags = new int [] {", "+\t\t\tOS.kTXNDisableDragAndDropTag,", "+\t\t\tOS.kTXNIOPrivilegesTag,", "+\t\t\tOS.kTXNMarginsTag,", "+\t\t\tOS.kTXNJustificationTag,", "+\t\t\tOS.kTXNDoFontSubstitution,", "+\t\t};", "+\t\tint just = OS.kTXNFlushLeft;", "+\t\tif ((style & SWT.CENTER) != 0) just = OS.kTXNCenter;", "+\t\tif ((style & SWT.RIGHT) != 0) just = OS.kTXNFlushRight;", "+\t\tint [] datas = new int [] {", "+\t\t\t1,", "+\t\t\t(style & SWT.READ_ONLY) != 0 ? 1 : 0,", "+\t\t\tptr,", "+\t\t\tjust,", "+\t\t\t1,", "+\t\t};", "+\t\tOS.TXNSetTXNObjectControls (txnObject, false, tags.length, tags, datas);", "+\t\tOS.TXNSetFrameBounds (txnObject, 0, 0, 0, 0, txnFrameID);", "+\t\tOS.DisposePtr (ptr);", "-\t/*", "-\t* Feature in the Macintosh.  The TXNObject is not a control but creates scroll", "-\t* bar controls to scroll the text.  These are created in the root and are not", "-\t* children of the user pane that is used to represent the TNXObject.  The fix", "-\t* is to embed the scroll bars in the user pane.", "-\t*/", "-\tint [] theRoot = new int [1];", "-\tOS.GetRootControl (window, theRoot);", "-\tshort [] oldCount = new short [1];", "-\tOS.CountSubControls (theRoot [0], oldCount);\t", "-\t", "-\t/* Create the TXNObject */", "-\tint iFrameOptions = OS.kTXNDontDrawCaretWhenInactiveMask | OS.kTXNMonostyledTextMask;", "-\tif ((style & SWT.H_SCROLL) != 0) iFrameOptions |= OS.kTXNWantHScrollBarMask;", "-\tif ((style & SWT.V_SCROLL) != 0) iFrameOptions |= OS.kTXNWantVScrollBarMask;", "-\tif ((style & SWT.SINGLE) != 0) iFrameOptions |= OS.kTXNSingleLineOnlyMask;", "-\tif ((style & SWT.WRAP) != 0) iFrameOptions |= OS.kTXNAlwaysWrapAtViewEdgeMask;", "-\tint [] oTXNObject = new int [1], oTXNFrameID = new int[1];", "-\tOS.TXNNewObject (0, window, null, iFrameOptions, OS.kTXNTextEditStyleFrameType, OS.kTXNUnicodeTextFile, OS.kTXNSystemDefaultEncoding, oTXNObject, oTXNFrameID, 0);", "-\tif (oTXNObject [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\ttxnObject = oTXNObject [0];", "-\ttxnFrameID = oTXNFrameID [0];", "-\t", "-\t/* Embed the scroll bars in the user pane */", "-\tshort [] newCount = new short [1];", "-\tOS.CountSubControls (theRoot [0], newCount);", "-\tint [] scrollBar = new int [1];", "-\tfor (int i=newCount [0]; i>oldCount [0]; --i) {", "-\t\tOS.GetIndexedSubControl (theRoot [0], (short) i, scrollBar);", "-\t\tOS.HIViewRemoveFromSuperview (scrollBar [0]);", "-\t\tOS.HIViewAddSubview (handle, scrollBar [0]);", "-\t}", "-\t", "-\t/* Configure the TXNObject */", "-\tint ptr = OS.NewPtr (Rect.sizeof);", "-\tRect rect = new Rect ();", "-\tif (hasBorder ()) {", "-\t\tOS.SetRect (rect, (short) 1, (short) 1, (short) 1, (short) 1);", "-\t}", "-\tOS.memcpy (ptr, rect, Rect.sizeof);", "-\tint [] tags = new int [] {", "-\t\tOS.kTXNDisableDragAndDropTag,", "-\t\tOS.kTXNIOPrivilegesTag,", "-\t\tOS.kTXNMarginsTag,", "-\t\tOS.kTXNJustificationTag,", "-\t\tOS.kTXNDoFontSubstitution,", "-\t};", "-\tint just = OS.kTXNFlushLeft;", "-\tif ((style & SWT.CENTER) != 0) just = OS.kTXNCenter;", "-\tif ((style & SWT.RIGHT) != 0) just = OS.kTXNFlushRight;", "-\tint [] datas = new int [] {", "-\t\t1,", "-\t\t(style & SWT.READ_ONLY) != 0 ? 1 : 0,", "-\t\tptr,", "-\t\tjust,", "-\t\t1,", "-\t};", "-\tOS.TXNSetTXNObjectControls (txnObject, false, tags.length, tags, datas);", "-\tOS.TXNSetFrameBounds (txnObject, 0, 0, 0, 0, txnFrameID);", "-\tOS.DisposePtr (ptr);", "+\t\t/*", "+\t\t* Bug in the Macintosh.  The caret height is too small until some text is set in the", "+\t\t* TXNObject.  The fix is to temporary change the text.", "+\t\t*/", "+\t\tchar [] buffer = new char [] {' '};", "+\t\tOS.TXNSetData (txnObject, OS.kTXNUnicodeTextData, buffer, 2, OS.kTXNStartOffset, OS.kTXNEndOffset);", "+\t\tOS.TXNSetData (txnObject, OS.kTXNUnicodeTextData, buffer, 0, OS.kTXNStartOffset, OS.kTXNEndOffset);", "-\t/*", "-\t* Bug in the Macintosh.  The caret height is too small until some text is set in the", "-\t* TXNObject.  The fix is to temporary change the text.", "-\t*/", "-\tchar [] buffer = new char [] {' '};", "-\tOS.TXNSetData (txnObject, OS.kTXNUnicodeTextData, buffer, 2, OS.kTXNStartOffset, OS.kTXNEndOffset);", "-\tOS.TXNSetData (txnObject, OS.kTXNUnicodeTextData, buffer, 0, OS.kTXNStartOffset, OS.kTXNEndOffset);", "+\t}"]}], "num": 12603}
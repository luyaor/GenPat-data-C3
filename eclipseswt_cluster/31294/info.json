{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ceead7e362e255d33ca60aeb8a00a210", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1bdf01b88e8db16d01f9fab093836cd2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/internal/ImageList.java", "commitBeforeChange": "97620fe3667502da9f174b22a0db4534a8d8f70b", "commitAfterChange": "a3c8e8904451b6db108629003e63438cb42170e1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public static int createPixbuf(Image image)", "signatureAfterChange": "  public static int createPixbuf(Image image)", "diff": ["-\t\tRectangle bounds = image.getBounds();", "-\t\tint w = bounds.width, h = bounds.height;", "-\t\tpixbuf = OS.gdk_pixbuf_new (OS.GDK_COLORSPACE_RGB, true, 8, w, h);", "+\t\tint /*long*/ surface = image.surface;", "+\t\tint format = Cairo.cairo_image_surface_get_format(surface);", "+\t\tint width = Cairo.cairo_image_surface_get_width(surface);", "+\t\tint height = Cairo.cairo_image_surface_get_height(surface);", "+\t\tboolean hasAlpha = format == Cairo.CAIRO_FORMAT_ARGB32;", "+\t\tpixbuf = OS.gdk_pixbuf_new (OS.GDK_COLORSPACE_RGB, hasAlpha, 8, width, height);", "-\t\tbyte[] line = new byte[stride];", "-\t\tint /*long*/ surfaceData = image.surfaceData;", "-\t\tfor (int y = 0; y < h; y++) {", "-\t\t\tOS.memmove (line, surfaceData + (y * stride), stride);", "-\t\t\tfor (int x = 0, offset = 0; x < w; x++, offset += 4) {", "-\t\t\t\tint a = line[offset + oa] & 0xFF;", "-\t\t\t\tint r = line[offset + or] & 0xFF;", "-\t\t\t\tint g = line[offset + og] & 0xFF;", "-\t\t\t\tint b = line[offset + ob] & 0xFF;", "-\t\t\t\tline[offset + 3] = (byte)a;", "-\t\t\t\tif (a != 0) {", "-\t\t\t\t\tline[offset + 0] = (byte)(((r) / (float)a) * 0xFF);", "-\t\t\t\t\tline[offset + 1] = (byte)(((g) / (float)a) * 0xFF);", "-\t\t\t\t\tline[offset + 2] = (byte)(((b) / (float)a) * 0xFF);", "+\t\tbyte[] line = new byte[stride];", "+\t\tint /*long*/ surfaceData = Cairo.cairo_image_surface_get_data(surface);", "+\t\tif (hasAlpha) {", "+\t\t\tfor (int y = 0; y < height; y++) {", "+\t\t\t\tOS.memmove (line, surfaceData + (y * stride), stride);", "+\t\t\t\tfor (int x = 0, offset = 0; x < width; x++, offset += 4) {", "+\t\t\t\t\tint a = line[offset + oa] & 0xFF;", "+\t\t\t\t\tint r = line[offset + or] & 0xFF;", "+\t\t\t\t\tint g = line[offset + og] & 0xFF;", "+\t\t\t\t\tint b = line[offset + ob] & 0xFF;", "+\t\t\t\t\tline[offset + 3] = (byte)a;", "+\t\t\t\t\tif (a != 0) {", "+\t\t\t\t\t\t//TODO write this without floating point math", "+\t\t\t\t\t\tline[offset + 0] = (byte)(((r) / (float)a) * 0xFF);", "+\t\t\t\t\t\tline[offset + 1] = (byte)(((g) / (float)a) * 0xFF);", "+\t\t\t\t\t\tline[offset + 2] = (byte)(((b) / (float)a) * 0xFF);", "+\t\t\t\t\t}", "+\t\t\t\tOS.memmove (pixels + (y * stride), line, stride);", "-\t\t\tOS.memmove (pixels + (y * stride), line, stride);", "+\t\t} else {", "+\t\t\tint cairoStride = Cairo.cairo_image_surface_get_stride(surface);", "+\t\t\tbyte[] cairoLine = new byte[cairoStride];", "+\t\t\tfor (int y = 0; y < height; y++) {", "+\t\t\t\tOS.memmove (cairoLine, surfaceData + (y * cairoStride), cairoStride);", "+\t\t\t\tfor (int x = 0, offset = 0, cairoOffset = 0; x < width; x++, offset += 3, cairoOffset += 4) {", "+\t\t\t\t\tbyte r = cairoLine[cairoOffset + or];", "+\t\t\t\t\tbyte g = cairoLine[cairoOffset + og];", "+\t\t\t\t\tbyte b = cairoLine[cairoOffset + ob];", "+\t\t\t\t\tline[offset + 0] = r;", "+\t\t\t\t\tline[offset + 1] = g;", "+\t\t\t\t\tline[offset + 2] = b;", "+\t\t\t\t}", "+\t\t\t\tOS.memmove (pixels + (y * stride), line, stride);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d78bef0e39824e0395f8d5b92a9d1d4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "ef11844874311ee4ecc49a149832fc6341fb9f05", "commitAfterChange": "075e8297089b20919b74fd7779c5cc8a288671fa", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void createSurface()", "signatureAfterChange": "  void createSurface()", "diff": ["+\t\tint /*long*/ ptr = OS.malloc(4);", "+\t\tOS.memmove(ptr, new int[]{1}, 4);", "+\t\tOS.memmove(line, ptr, 1);", "+\t\tOS.free(ptr);", "+\t\tint oa, or, og, ob;", "+\t\tboolean bigendian = line[0] == 0;", "+\t\tif (bigendian) {", "+\t\t\toa = 0; or = 1; og = 2; ob = 3;", "+\t\t} else {", "+\t\t\toa = 3; or = 2; og = 1; ob = 0;", "+\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tbyte r = line[offset1 + 0];", "+\t\t\t\t\t\tbyte g = line[offset1 + 1];", "+\t\t\t\t\t\tbyte b = line[offset1 + 2];", "+\t\t\t\t\t\tline[offset1 + oa] = (byte)0xFF;", "+\t\t\t\t\t\tline[offset1 + or] = r;", "+\t\t\t\t\t\tline[offset1 + og] = g;", "+\t\t\t\t\t\tline[offset1 + ob] = b;", "-\t\t\t\t\tbyte temp = line[offset1];", "-\t\t\t\t\tline[offset1] = line[offset1 + 2];", "-\t\t\t\t\tline[offset1 + 2] = temp;", "-\t\t\t\t\tline[offset1+3] = (byte)alpha;", "-\t\t\t\t\tline[offset1 + 0] = (byte)b;", "-\t\t\t\t\tline[offset1 + 1] = (byte)g;", "-\t\t\t\t\tline[offset1 + 2] = (byte)r;", "+\t\t\t\t\tline[offset1 + oa] = (byte)alpha;", "+\t\t\t\t\tline[offset1 + or] = (byte)r;", "+\t\t\t\t\tline[offset1 + og] = (byte)g;", "+\t\t\t\t\tline[offset1 + ob] = (byte)b;", "-\t\t\t\t\tline[offset1+3] = (byte)alpha;", "-\t\t\t\t\tline[offset1 + 0] = (byte)b;", "-\t\t\t\t\tline[offset1 + 1] = (byte)g;", "-\t\t\t\t\tline[offset1 + 2] = (byte)r;", "+\t\t\t\t\tline[offset1 + oa] = (byte)alpha;", "+\t\t\t\t\tline[offset1 + or] = (byte)r;", "+\t\t\t\t\tline[offset1 + og] = (byte)g;", "+\t\t\t\t\tline[offset1 + ob] = (byte)b;", "-\t\t\t\t\tline[offset1+3] = (byte)0xFF;", "-\t\t\t\t\tbyte temp = line[offset1];", "-\t\t\t\t\tline[offset1] = line[offset1 + 2];", "-\t\t\t\t\tline[offset1 + 2] = temp;", "+\t\t\t\t\tbyte r = line[offset1 + 0];", "+\t\t\t\t\tbyte g = line[offset1 + 1];", "+\t\t\t\t\tbyte b = line[offset1 + 2];", "+\t\t\t\t\tline[offset1 + oa] = (byte)0xFF;", "+\t\t\t\t\tline[offset1 + or] = r;", "+\t\t\t\t\tline[offset1 + og] = g;", "+\t\t\t\t\tline[offset1 + ob] = b;"]}], "num": 31294}
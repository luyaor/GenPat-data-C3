{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c959c38406bfbc8bf5af052145f3e9b7", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e379dc61112979d872cd6d3ef999ddf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "e0b7cd93e54471ca04ad72c9d78b6b054ad5f27b", "commitAfterChange": "365d9e3002ce9e8ba155a42ea16cecffc7fe94e0", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "  void initializeCallbacks ()", "signatureAfterChange": "  void initializeCallbacks ()", "diff": ["+\tclosures = new int /*long*/ [Widget.LAST_SIGNAL];", "+\tsignalIds = new int [Widget.LAST_SIGNAL];", "+", "+\t/* Cache signals for GtkWidget */", "+\tsignalIds [Widget.BUTTON_PRESS_EVENT] = OS.g_signal_lookup (OS.button_press_event, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.BUTTON_RELEASE_EVENT] = OS.g_signal_lookup (OS.button_release_event, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.CONFIGURE_EVENT] = OS.g_signal_lookup (OS.configure_event, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.DELETE_EVENT] = OS.g_signal_lookup (OS.delete_event, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.ENTER_NOTIFY_EVENT] = OS.g_signal_lookup (OS.enter_notify_event, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.EVENT] = OS.g_signal_lookup (OS.event, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.EVENT_AFTER] = OS.g_signal_lookup (OS.event_after, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.EXPOSE_EVENT] = OS.g_signal_lookup (OS.expose_event, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.FOCUS] = OS.g_signal_lookup (OS.focus, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.FOCUS_IN_EVENT] = OS.g_signal_lookup (OS.focus_in_event, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.FOCUS_OUT_EVENT] = OS.g_signal_lookup (OS.focus_out_event, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.GRAB_FOCUS] = OS.g_signal_lookup (OS.grab_focus, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.HIDE] = OS.g_signal_lookup (OS.hide, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.KEY_PRESS_EVENT] = OS.g_signal_lookup (OS.key_press_event, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.KEY_RELEASE_EVENT] = OS.g_signal_lookup (OS.key_release_event, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.LEAVE_NOTIFY_EVENT] = OS.g_signal_lookup (OS.leave_notify_event, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.MAP] = OS.g_signal_lookup (OS.map, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.MAP_EVENT] = OS.g_signal_lookup (OS.map_event, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.MNEMONIC_ACTIVATE] = OS.g_signal_lookup (OS.mnemonic_activate, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.MOTION_NOTIFY_EVENT] = OS.g_signal_lookup (OS.motion_notify_event, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.POPUP_MENU] = OS.g_signal_lookup (OS.popup_menu, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.REALIZE] = OS.g_signal_lookup (OS.realize, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.SCROLL_EVENT] = OS.g_signal_lookup (OS.scroll_event, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.SHOW] = OS.g_signal_lookup (OS.show, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.SHOW_HELP] = OS.g_signal_lookup (OS.show_help, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.SIZE_ALLOCATE] = OS.g_signal_lookup (OS.size_allocate, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.STYLE_SET] = OS.g_signal_lookup (OS.style_set, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.UNMAP] = OS.g_signal_lookup (OS.unmap, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.UNMAP_EVENT] = OS.g_signal_lookup (OS.unmap_event, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.UNREALIZE] = OS.g_signal_lookup (OS.realize, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.VISIBILITY_NOTIFY_EVENT] = OS.g_signal_lookup (OS.visibility_notify_event, OS.GTK_TYPE_WIDGET ());", "+\tsignalIds [Widget.WINDOW_STATE_EVENT] = OS.g_signal_lookup (OS.window_state_event, OS.GTK_TYPE_WIDGET ());", "+", "-\t\t", "+", "+\tclosures [Widget.ACTIVATE] = OS.g_cclosure_new (windowProc2, Widget.ACTIVATE, 0);", "+\tclosures [Widget.CHANGED] = OS.g_cclosure_new (windowProc2, Widget.CHANGED, 0);", "+\tclosures [Widget.CLICKED] = OS.g_cclosure_new (windowProc2, Widget.CLICKED, 0);", "+\tclosures [Widget.HIDE] = OS.g_cclosure_new (windowProc2, Widget.HIDE, 0);", "+\tclosures [Widget.GRAB_FOCUS] = OS.g_cclosure_new (windowProc2, Widget.GRAB_FOCUS, 0);", "+\tclosures [Widget.MAP] = OS.g_cclosure_new (windowProc2, Widget.MAP, 0);", "+\tclosures [Widget.OUTPUT] = OS.g_cclosure_new (windowProc2, Widget.OUTPUT, 0);", "+\tclosures [Widget.POPUP_MENU] = OS.g_cclosure_new (windowProc2, Widget.POPUP_MENU, 0);", "+\tclosures [Widget.PREEDIT_CHANGED] = OS.g_cclosure_new (windowProc2, Widget.PREEDIT_CHANGED, 0);", "+\tclosures [Widget.REALIZE] = OS.g_cclosure_new (windowProc2, Widget.REALIZE, 0);", "+\tclosures [Widget.SELECT] = OS.g_cclosure_new (windowProc2, Widget.SELECT, 0);", "+\tclosures [Widget.SHOW] = OS.g_cclosure_new (windowProc2, Widget.SHOW, 0);", "+\tclosures [Widget.VALUE_CHANGED] = OS.g_cclosure_new (windowProc2, Widget.VALUE_CHANGED, 0);", "+\tclosures [Widget.UNMAP] = OS.g_cclosure_new (windowProc2, Widget.UNMAP, 0);", "+\tclosures [Widget.UNREALIZE] = OS.g_cclosure_new (windowProc2, Widget.UNREALIZE, 0);", "+", "-\t", "+", "+\tclosures [Widget.BUTTON_PRESS_EVENT] = OS.g_cclosure_new (windowProc3, Widget.BUTTON_PRESS_EVENT, 0);", "+\tclosures [Widget.BUTTON_PRESS_EVENT_INVERSE] = OS.g_cclosure_new (windowProc3, Widget.BUTTON_PRESS_EVENT_INVERSE, 0);", "+\tclosures [Widget.BUTTON_RELEASE_EVENT] = OS.g_cclosure_new (windowProc3, Widget.BUTTON_RELEASE_EVENT, 0);", "+\tclosures [Widget.BUTTON_RELEASE_EVENT_INVERSE] = OS.g_cclosure_new (windowProc3, Widget.BUTTON_RELEASE_EVENT_INVERSE, 0);", "+\tclosures [Widget.COMMIT] = OS.g_cclosure_new (windowProc3, Widget.COMMIT, 0);", "+\tclosures [Widget.CONFIGURE_EVENT] = OS.g_cclosure_new (windowProc3, Widget.CONFIGURE_EVENT, 0);", "+\tclosures [Widget.DELETE_EVENT] = OS.g_cclosure_new (windowProc3, Widget.DELETE_EVENT, 0);", "+\tclosures [Widget.ENTER_NOTIFY_EVENT] = OS.g_cclosure_new (windowProc3, Widget.ENTER_NOTIFY_EVENT, 0);", "+\tclosures [Widget.EVENT] = OS.g_cclosure_new (windowProc3, Widget.EVENT, 0);", "+\tclosures [Widget.EVENT_AFTER] = OS.g_cclosure_new (windowProc3, Widget.EVENT_AFTER, 0);", "+\tclosures [Widget.EXPOSE_EVENT] = OS.g_cclosure_new (windowProc3, Widget.EXPOSE_EVENT, 0);", "+\tclosures [Widget.EXPOSE_EVENT_INVERSE] = OS.g_cclosure_new (windowProc3, Widget.EXPOSE_EVENT_INVERSE, 0);", "+\tclosures [Widget.FOCUS] = OS.g_cclosure_new (windowProc3, Widget.FOCUS, 0);", "+\tclosures [Widget.FOCUS_IN_EVENT] = OS.g_cclosure_new (windowProc3, Widget.FOCUS_IN_EVENT, 0);", "+\tclosures [Widget.FOCUS_OUT_EVENT] = OS.g_cclosure_new (windowProc3, Widget.FOCUS_OUT_EVENT, 0);", "+\tclosures [Widget.KEY_PRESS_EVENT] = OS.g_cclosure_new (windowProc3, Widget.KEY_PRESS_EVENT, 0);", "+\tclosures [Widget.KEY_RELEASE_EVENT] = OS.g_cclosure_new (windowProc3, Widget.KEY_RELEASE_EVENT, 0);", "+\tclosures [Widget.INPUT] = OS.g_cclosure_new (windowProc3, Widget.INPUT, 0);", "+\tclosures [Widget.LEAVE_NOTIFY_EVENT] = OS.g_cclosure_new (windowProc3, Widget.LEAVE_NOTIFY_EVENT, 0);", "+\tclosures [Widget.MAP_EVENT] = OS.g_cclosure_new (windowProc3, Widget.MAP_EVENT, 0);", "+\tclosures [Widget.MNEMONIC_ACTIVATE] = OS.g_cclosure_new (windowProc3, Widget.MNEMONIC_ACTIVATE, 0);", "+\tclosures [Widget.MOTION_NOTIFY_EVENT] = OS.g_cclosure_new (windowProc3, Widget.MOTION_NOTIFY_EVENT, 0);", "+\tclosures [Widget.MOTION_NOTIFY_EVENT_INVERSE] = OS.g_cclosure_new (windowProc3, Widget.MOTION_NOTIFY_EVENT_INVERSE, 0);", "+\tclosures [Widget.MOVE_FOCUS] = OS.g_cclosure_new (windowProc3, Widget.MOVE_FOCUS, 0);", "+\tclosures [Widget.SCROLL_EVENT] = OS.g_cclosure_new (windowProc3, Widget.SCROLL_EVENT, 0);", "+\tclosures [Widget.SHOW_HELP] = OS.g_cclosure_new (windowProc3, Widget.SHOW_HELP, 0);", "+\tclosures [Widget.SIZE_ALLOCATE] = OS.g_cclosure_new (windowProc3, Widget.SIZE_ALLOCATE, 0);", "+\tclosures [Widget.STYLE_SET] = OS.g_cclosure_new (windowProc3, Widget.STYLE_SET, 0);", "+\tclosures [Widget.TOGGLED] = OS.g_cclosure_new (windowProc3, Widget.TOGGLED, 0);\t", "+\tclosures [Widget.UNMAP_EVENT] = OS.g_cclosure_new (windowProc3, Widget.UNMAP_EVENT, 0);", "+\tclosures [Widget.VISIBILITY_NOTIFY_EVENT] = OS.g_cclosure_new (windowProc3, Widget.VISIBILITY_NOTIFY_EVENT, 0);", "+\tclosures [Widget.WINDOW_STATE_EVENT] = OS.g_cclosure_new (windowProc3, Widget.WINDOW_STATE_EVENT, 0);", "+", "-\t", "+", "+\tclosures [Widget.DELETE_RANGE] = OS.g_cclosure_new (windowProc4, Widget.DELETE_RANGE, 0);", "+\tclosures [Widget.DELETE_TEXT] = OS.g_cclosure_new (windowProc4, Widget.DELETE_TEXT, 0);", "+\tclosures [Widget.ROW_ACTIVATED] = OS.g_cclosure_new (windowProc4, Widget.ROW_ACTIVATED, 0);", "+\tclosures [Widget.SCROLL_CHILD] = OS.g_cclosure_new (windowProc4, Widget.SCROLL_CHILD, 0);", "+\tclosures [Widget.SWITCH_PAGE] = OS.g_cclosure_new (windowProc4, Widget.SWITCH_PAGE, 0);", "+\tclosures [Widget.TEST_COLLAPSE_ROW] = OS.g_cclosure_new (windowProc4, Widget.TEST_COLLAPSE_ROW, 0);", "+\tclosures [Widget.TEST_EXPAND_ROW] = OS.g_cclosure_new (windowProc4, Widget.TEST_EXPAND_ROW, 0);", "+", "-\t", "+", "+\tclosures [Widget.CHANGE_VALUE] = OS.g_cclosure_new (windowProc5, Widget.CHANGE_VALUE, 0);", "+\tclosures [Widget.EXPAND_COLLAPSE_CURSOR_ROW] = OS.g_cclosure_new (windowProc5, Widget.EXPAND_COLLAPSE_CURSOR_ROW, 0);", "+\tclosures [Widget.INSERT_TEXT] = OS.g_cclosure_new (windowProc5, Widget.INSERT_TEXT, 0);", "+", "+\tfor (int i = 0; i < Widget.LAST_SIGNAL; i++) {", "+\t\tif (closures [i] != 0) OS.g_closure_ref (closures [i]);", "+\t}", "+", "-\t", "+", "+\tshellMapProcClosure = OS.g_cclosure_new (shellMapProc, 0, 0);", "+\tOS.g_closure_ref (shellMapProcClosure);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94134bc106b5772438e9adf2e04dd4be", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "6fe853b29d6dcedf69f8209e4b19fa3cf0a85a8b", "commitAfterChange": "cc7a79cec8920b1b6175a6c2124e7f63a3823262", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 90, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\tint code = hdr.code;", "-\tswitch (code) {", "+\tswitch (hdr.code) {", "+\t\tcase OS.TVN_GETDISPINFOA:", "+\t\tcase OS.TVN_GETDISPINFOW: {", "+\t\t\tNMTVDISPINFO lptvdi = new NMTVDISPINFO ();", "+\t\t\tOS.MoveMemory (lptvdi, lParam, NMTVDISPINFO.sizeof);", "+\t\t\t/*", "+\t\t\t* Feature in Windows.  When a new tree item is inserted", "+\t\t\t* using TVM_INSERTITEM, a TVN_GETDISPINFO is sent before", "+\t\t\t* TVM_INSERTITEM returns and before the item is added to", "+\t\t\t* the items array.  The fix is to check for null.", "+\t\t\t* ", "+\t\t\t* NOTE: This only happens on XP with the version 6.00 of", "+\t\t\t* COMCTL32.DLL,", "+\t\t\t*/", "+\t\t\tif (items == null) break;", "+\t\t\tTreeItem item = items [lptvdi.lParam];", "+\t\t\tif (item == null) break;", "+\t\t\tif ((lptvdi.mask & OS.TVIF_TEXT) != 0) {", "+\t\t\t\tString string = item.text;", "+\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "+\t\t\t\tint byteCount = Math.min (buffer.length (), lptvdi.cchTextMax - 1) * TCHAR.sizeof;", "+\t\t\t\tOS.MoveMemory (lptvdi.pszText, buffer, byteCount);", "+\t\t\t\tOS.MoveMemory (lptvdi.pszText + byteCount, new byte [TCHAR.sizeof], TCHAR.sizeof);", "+\t\t\t\tlptvdi.cchTextMax = Math.min (lptvdi.cchTextMax, string.length () + 1);", "+\t\t\t}", "+\t\t\tif ((lptvdi.mask & (OS.TVIF_IMAGE | OS.TVIF_SELECTEDIMAGE)) != 0) {", "+\t\t\t\tImage image = item.image;", "+\t\t\t\tlptvdi.iImage = OS.I_IMAGENONE;", "+\t\t\t\tif (image != null) {", "+\t\t\t\t\tlptvdi.iImage = lptvdi.iSelectedImage = imageIndex (image);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.MoveMemory (lParam, lptvdi, NMTVDISPINFO.sizeof);", "+\t\t\tbreak;", "+\t\t}", "-\t\t\t\tcase OS.CDDS_PREPAINT: return new LRESULT (OS.CDRF_NOTIFYITEMDRAW);", "-\t\t\t\tcase OS.CDDS_ITEMPREPAINT:", "+\t\t\t\tcase OS.CDDS_PREPAINT: {", "+\t\t\t\t\treturn new LRESULT (OS.CDRF_NOTIFYITEMDRAW | OS.CDRF_NOTIFYPOSTPAINT);", "+\t\t\t\t}", "+\t\t\t\tcase OS.CDDS_POSTPAINT: {", "+\t\t\t\t\tif (linesVisible) {", "+\t\t\t\t\t\tint hDC = nmcd.hdc;", "+\t\t\t\t\t\tif (hwndHeader != 0) {", "+\t\t\t\t\t\t\tint x = 0;", "+\t\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "+\t\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "+\t\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, i, hdItem);", "+\t\t\t\t\t\t\t\tOS.SetRect (rect, x, nmcd.top, x + hdItem.cxy, nmcd.bottom);", "+\t\t\t\t\t\t\t\tOS.DrawEdge (hDC, rect, OS.BDR_SUNKENINNER, OS.BF_RIGHT);", "+\t\t\t\t\t\t\t\tx += hdItem.cxy;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, 0);", "+\t\t\t\t\t\trect.left = hItem;", "+\t\t\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 0, rect) != 0) {", "+\t\t\t\t\t\t\tint height = rect.bottom - rect.top;", "+\t\t\t\t\t\t\twhile (rect.bottom < nmcd.bottom) {", "+\t\t\t\t\t\t\t\tint top = rect.top + height;", "+\t\t\t\t\t\t\t\tOS.SetRect (rect, rect.left, top, rect.right, top + height);", "+\t\t\t\t\t\t\t\tOS.DrawEdge (hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\treturn new LRESULT (OS.CDRF_DODEFAULT);", "+\t\t\t\t}", "+\t\t\t\tcase OS.CDDS_ITEMPREPAINT: {", "+\t\t\t\t\tif (nmcd.left >= nmcd.right || nmcd.top >= nmcd.bottom) {", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tint hDC = nmcd.hdc;", "+\t\t\t\t\tOS.SaveDC (hDC);", "+\t\t\t\t\tif (linesVisible) {", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\tOS.DrawEdge (hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (hwndHeader != 0) {", "+\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\tif (count != 0) {", "+\t\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "+\t\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "+\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, 0, hdItem);", "+\t\t\t\t\t\t\tint hRgn = OS.CreateRectRgn (nmcd.left, nmcd.top, nmcd.left + hdItem.cxy, nmcd.bottom);", "+\t\t\t\t\t\t\tOS.SelectClipRgn (hDC, hRgn);", "+\t\t\t\t\t\t\tOS.DeleteObject (hRgn);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (item.font == -1 && item.foreground == -1 && item.background == -1) {", "+\t\t\t\t\t\tif (item.cellForeground == null && item.cellBackground == null && item.cellFont == null) {", "+\t\t\t\t\t\t\treturn new LRESULT (OS.CDRF_DODEFAULT | OS.CDRF_NOTIFYPOSTPAINT);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\tint hFont = item.font, clrText = item.foreground, clrTextBk = item.background;", "-\t\t\t\t\tif (hFont == -1 && clrText == -1 && clrTextBk == -1) break;", "-\t\t\t\t\tif (hFont != -1) OS.SelectObject (nmcd.hdc, hFont);", "+\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [0] : item.font;", "+\t\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "-\t\t\t\t\t\tnmcd.clrText = clrText == -1 ? getForegroundPixel () : clrText;", "-\t\t\t\t\t\tnmcd.clrTextBk = clrTextBk == -1 ? getBackgroundPixel () : clrTextBk;", "+\t\t\t\t\t\t\tint clrText = item.cellForeground != null ? item.cellForeground [0] : item.foreground;", "+\t\t\t\t\t\t\tnmcd.clrText = clrText == -1 ? getForegroundPixel () : clrText;", "+\t\t\t\t\t\t\tint clrTextBk = item.cellBackground != null ? item.cellBackground [0] : item.background;", "+\t\t\t\t\t\t\tnmcd.clrTextBk = clrTextBk == -1 ? getBackgroundPixel () : clrTextBk;", "-\t\t\t\t\treturn new LRESULT (OS.CDRF_NEWFONT);", "+\t\t\t\t\treturn new LRESULT (OS.CDRF_NEWFONT | OS.CDRF_NOTIFYPOSTPAINT);", "+\t\t\t\t}", "+\t\t\t\tcase OS.CDDS_ITEMPOSTPAINT: {", "+\t\t\t\t\tTreeItem item = items [nmcd.lItemlParam];", "+\t\t\t\t\tif (item == null) break;", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Feature in Windows.  Under certain circumstances, Windows", "+\t\t\t\t\t* sends CDDS_ITEMPOSTPAINT for an empty rectangle.  This is", "+\t\t\t\t\t* not a problem providing that graphics do not occur outside", "+\t\t\t\t\t* the rectangle.  The fix is to test for the rectangle and", "+\t\t\t\t\t* draw nothing.", "+\t\t\t\t\t* ", "+\t\t\t\t\t* NOTE:  This seems to happen when both I_IMAGECALLBACK", "+\t\t\t\t\t* and LPSTR_TEXTCALLBACK are used at the same time with", "+\t\t\t\t\t* TVM_SETITEM.", "+\t\t\t\t\t*/", "+\t\t\t\t\tif (nmcd.left >= nmcd.right || nmcd.top >= nmcd.bottom) {", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tint hDC = nmcd.hdc;", "+\t\t\t\t\tOS.RestoreDC (hDC, -1);", "+\t\t\t\t\tOS.SetBkMode (hDC, OS.TRANSPARENT);", "+\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "+\t\t\t\t\t\tOS.SetTextColor (hDC, getForegroundPixel ());", "+\t\t\t\t\t}", "+\t\t\t\t\tif (hwndHeader != 0) {", "+\t\t\t\t\t\tGCData data = new GCData();", "+\t\t\t\t\t\tdata.device = display;", "+\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "+\t\t\t\t\t\tint x = 0;", "+\t\t\t\t\t\tPoint size = null;", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "+\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "+\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, i, hdItem);", "+\t\t\t\t\t\t\tif (i > 0) {", "+\t\t\t\t\t\t\t\tOS.SetRect (rect, x, nmcd.top, x + hdItem.cxy, nmcd.bottom - GRID_WIDTH);", "+\t\t\t\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "+\t\t\t\t\t\t\t\t\tint clrTextBk = item.cellBackground != null ? item.cellBackground [i] : item.background;", "+\t\t\t\t\t\t\t\t\tif (clrTextBk != -1) drawBackground (hDC, clrTextBk, rect);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tImage image = item.images != null ? item.images [i] : null;", "+\t\t\t\t\t\t\t\tif (image != null) {", "+\t\t\t\t\t\t\t\t\tRectangle bounds = image.getBounds ();", "+\t\t\t\t\t\t\t\t\tif (size == null) size = getImageSize ();", "+\t\t\t\t\t\t\t\t\tgc.drawImage (image, 0, 0, bounds.width, bounds.height, rect.left, rect.top, size.x, size.y);", "+\t\t\t\t\t\t\t\t\tOS.SetRect (rect, rect.left + size.x + INSET, rect.top, rect.right - INSET, rect.bottom);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tOS.SetRect (rect, rect.left + INSET, rect.top, rect.right - INSET, rect.bottom);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t* Bug in Windows.  When DrawText() is used with DT_VCENTER", "+\t\t\t\t\t\t\t\t* and DT_ENDELLIPSIS, the ellipsis can draw outside of the", "+\t\t\t\t\t\t\t\t* rectangle when the rectangle is empty.  The fix is avoid", "+\t\t\t\t\t\t\t\t* all text drawing for empty rectangles.", "+\t\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\t\tif (rect.left < rect.right) {", "+\t\t\t\t\t\t\t\t\tString string = item.strings != null ? item.strings [i] : \"\";\t\t", "+\t\t\t\t\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [i] : item.font;", "+\t\t\t\t\t\t\t\t\thFont = hFont != -1 ? OS.SelectObject (hDC, hFont) : -1;", "+\t\t\t\t\t\t\t\t\tint clrText = -1;", "+\t\t\t\t\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "+\t\t\t\t\t\t\t\t\t\tclrText = item.cellForeground != null ? item.cellForeground [i] : item.foreground;", "+\t\t\t\t\t\t\t\t\t\tclrText = clrText != -1? OS.SetTextColor (hDC, clrText) : -1;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tint flags = OS.DT_NOPREFIX | OS.DT_SINGLELINE | OS.DT_VCENTER | OS.DT_ENDELLIPSIS;", "+\t\t\t\t\t\t\t\t\tTreeColumn column = columns [i];", "+\t\t\t\t\t\t\t\t\tif ((column.style & SWT.LEFT) != 0) flags |= OS.DT_LEFT;", "+\t\t\t\t\t\t\t\t\tif ((column.style & SWT.CENTER) != 0) flags |= OS.DT_CENTER;", "+\t\t\t\t\t\t\t\t\tif ((column.style & SWT.RIGHT) != 0) flags |= OS.DT_RIGHT;", "+\t\t\t\t\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "+\t\t\t\t\t\t\t\t\tOS.DrawText (hDC, buffer, buffer.length (), rect, flags);", "+\t\t\t\t\t\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "+\t\t\t\t\t\t\t\t\tif (clrText != -1) OS.SetTextColor (hDC, clrText);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tx += hdItem.cxy;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tgc.dispose ();", "+\t\t\t\t\t}", "+\t\t\t\t\tif (linesVisible) {", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\trect.left = item.handle;", "+\t\t\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect) != 0) {", "+\t\t\t\t\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "+\t\t\t\t\t\t\tif (hItem == item.handle) {", "+\t\t\t\t\t\t\t\tOS.SetRect (rect, rect.right, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\t\t\t\t\t\ttvItem.mask = OS.TVIF_STATE;", "+\t\t\t\t\t\t\t\ttvItem.hItem = item.handle;", "+\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "+\t\t\t\t\t\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) != 0) {", "+\t\t\t\t\t\t\t\t\tOS.SetRect (rect, rect.right, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tOS.SetRect (rect, rect.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tOS.DrawEdge (hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM);", "+\t\t\t\t\t\t} ", "+\t\t\t\t\t}", "+\t\t\t\t\treturn new LRESULT (OS.CDRF_DODEFAULT);", "+\t\t\t\t}", "+\t\t\tupdateScrollBar ();", "+\t\tcase OS.TVN_ITEMEXPANDEDA:", "+\t\tcase OS.TVN_ITEMEXPANDEDW: {", "+\t\t\tupdateScrollBar ();", "+\t\t\tbreak;", "+\t\t}", "+\t\t\t\tif (items == null) break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ae76c07e2d8763be53c8255984b3d90", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "5712f0ff091861c715a3f41d4afa78f50d98e31c", "commitAfterChange": "db5070f4a4104c5e47a8cd2bdd5b5f06b11fcd6f", "methodNumberBeforeChange": 125, "methodNumberAfterChange": 128, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\tif (!customDraw) {", "-\t\t\t\tif (findImageControl () == null) break;", "-\t\t\t}", "+\t\t\tif (!customDraw && findImageControl () == null) break;", "-\t\t\t\t\tControl control = findImageControl ();", "-\t\t\t\t\tif (control != null) {", "-\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "-\t\t\t\t\t\tfillImageBackground (nmcd.hdc, control, rect);", "+\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "+\t\t\t\t\t\tControl control = findBackgroundControl ();", "+\t\t\t\t\t\tif (control != null && control.backgroundImage != null) {", "+\t\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\t\tfillImageBackground (nmcd.hdc, control, rect);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) == OS.CLR_NONE) {", "+\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\t\t\tif (control == null) control = this;", "+\t\t\t\t\t\t\t\tfillBackground (nmcd.hdc, control.getBackgroundPixel (), rect);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "-\t\t\t\t\treturn new LRESULT (OS.CDRF_NOTIFYSUBITEMDRAW);", "+\t\t\t\t\treturn new LRESULT (OS.CDRF_NOTIFYSUBITEMDRAW | OS.CDRF_NOTIFYPOSTPAINT);", "+\t\t\t\t\tint hDC = nmcd.hdc;", "+\t\t\t\t\tif (hooks (SWT.MeasureItem)) {", "+\t\t\t\t\t\tRECT itemRect = item.getBounds (nmcd.dwItemSpec, nmcd.iSubItem, true, true, false, false, hDC);", "+\t\t\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "+\t\t\t\t\t\tGCData data = new GCData ();", "+\t\t\t\t\t\tdata.device = display;", "+\t\t\t\t\t\tdata.hFont = hFont;", "+\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "+\t\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\t\tevent.item = item;", "+\t\t\t\t\t\tevent.gc = gc;", "+\t\t\t\t\t\tevent.index = nmcd.iSubItem;", "+\t\t\t\t\t\tevent.x = itemRect.left;", "+\t\t\t\t\t\tevent.y = itemRect.top;", "+\t\t\t\t\t\tevent.width = itemRect.right - itemRect.left;", "+\t\t\t\t\t\tevent.height = itemRect.bottom - itemRect.top;", "+\t\t\t\t\t\tsendEvent (SWT.MeasureItem, event);", "+\t\t\t\t\t\tevent.gc = null;", "+\t\t\t\t\t\tgc.dispose ();", "+\t\t\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "+\t\t\t\t\t\tif (isDisposed () || item.isDisposed ()) break;", "+\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\tif (count == 1 && columns [0] == null) {", "+\t\t\t\t\t\t\tint width = OS.SendMessage (handle, OS.LVM_GETCOLUMNWIDTH, 0, 0);", "+\t\t\t\t\t\t\tif (event.x + event.width > width) {", "+\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, event.x + event.width);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!ignoreItemHeight) {", "+\t\t\t\t\t\t\tif (event.height > getItemHeight ()) {", "+\t\t\t\t\t\t\t\tsetItemHeight (event.height);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tignoreItemHeight = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tignoreDraw = false;", "+\t\t\t\t\tif (hooks (SWT.EraseItem)) {", "+\t\t\t\t\t\tRECT cellRect = item.getBounds (nmcd.dwItemSpec, nmcd.iSubItem, true, true, true, true, hDC);", "+\t\t\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t* Bug in Windows.  For some reason, CDIS_SELECTED always set,", "+\t\t\t\t\t\t* even for items that are not selected.  The fix is to get", "+\t\t\t\t\t\t* the selection state from the item.", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tLVITEM lvItem = new LVITEM ();", "+\t\t\t\t\t\tlvItem.mask = OS.LVIF_STATE;", "+\t\t\t\t\t\tlvItem.stateMask = OS.LVIS_SELECTED;", "+\t\t\t\t\t\tlvItem.iItem = nmcd.dwItemSpec;", "+\t\t\t\t\t\tint result = OS.SendMessage (handle, OS.LVM_GETITEM, 0, lvItem);", "+\t\t\t\t\t\tboolean selected = (result != 0 && (lvItem.state & OS.LVIS_SELECTED) != 0);", "+\t\t\t\t\t\tGCData data = new GCData ();", "+\t\t\t\t\t\tdata.device = display;", "+\t\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "+\t\t\t\t\t\t\tif (selected && (nmcd.iSubItem == 0 || (style & SWT.FULL_SELECTION) != 0)) {", "+\t\t\t\t\t\t\t\tdata.foreground = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "+\t\t\t\t\t\t\t\tdata.background = OS.GetSysColor (OS.COLOR_HIGHLIGHT);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tdata.foreground = clrText != -1 ? clrText : OS.GetTextColor (hDC);", "+\t\t\t\t\t\t\t\tdata.background = clrTextBk != -1 ? clrTextBk : OS.GetBkColor (hDC);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tdata.hPen = OS.CreatePen (OS.PS_SOLID, 0, data.foreground);", "+\t\t\t\t\t\t\tdata.hBrush = OS.CreateSolidBrush (data.background);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tdata.hFont = hFont;", "+\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "+\t\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\t\tevent.item = item;", "+\t\t\t\t\t\tevent.gc = gc;", "+\t\t\t\t\t\tevent.index = nmcd.iSubItem;", "+\t\t\t\t\t\tif (selected) event.detail |= SWT.SELECTED;", "+\t\t\t\t\t\tif ((nmcd.uItemState & OS.CDIS_FOCUS) != 0) event.detail |= SWT.FOCUSED;", "+\t\t\t\t\t\tevent.x = cellRect.left;", "+\t\t\t\t\t\tevent.y = cellRect.top;", "+\t\t\t\t\t\tevent.width = cellRect.right - cellRect.left;", "+\t\t\t\t\t\tevent.height = cellRect.bottom - cellRect.top;", "+\t\t\t\t\t\tdrawBackground (hDC, cellRect);", "+\t\t\t\t\t\tgc.setClipping (event.x, event.y, event.width, event.height);", "+\t\t\t\t\t\tsendEvent (SWT.EraseItem, event);", "+\t\t\t\t\t\tevent.gc = null;", "+\t\t\t\t\t\t//int newClrText = OS.GetTextColor (hDC);", "+\t\t\t\t\t\t//int newClrTextBk = OS.GetBkColor (hDC);", "+\t\t\t\t\t\tgc.dispose ();", "+\t\t\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "+\t\t\t\t\t\tif (isDisposed () || item.isDisposed ()) break;", "+\t\t\t\t\t\tif (selected) {", "+\t\t\t\t\t\t\tif ((event.detail & SWT.SELECTED) == 0) {", "+\t\t\t\t\t\t\t\tif (nmcd.iSubItem == 0 || (style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\t\t\t\tclrText = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "+\t\t\t\t\t\t\t\t\t//clrText = newClrText;", "+\t\t\t\t\t\t\t\t\t//clrTextBk = newClrTextBk;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tnmcd.uItemState &= ~OS.CDIS_SELECTED;", "+\t\t\t\t\t\t\t\tOS.MoveMemory (lParam, nmcd, NMLVCUSTOMDRAW.sizeof);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif ((event.detail & SWT.SELECTED) != 0) {", "+\t\t\t\t\t\t\t\tif (nmcd.iSubItem == 0 || (style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\t\t\t\tclrText = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "+\t\t\t\t\t\t\t\t\tclrTextBk = OS.GetSysColor (OS.COLOR_HIGHLIGHT);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tnmcd.uItemState |= OS.CDIS_SELECTED;", "+\t\t\t\t\t\t\t\tOS.MoveMemory (lParam, nmcd, NMLVCUSTOMDRAW.sizeof);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tignoreDraw = !event.doit;", "+\t\t\t\t\t\tif (ignoreDraw) {", "+\t\t\t\t\t\t\tRECT itemRect = item.getBounds (nmcd.dwItemSpec, nmcd.iSubItem, true, true, false);", "+\t\t\t\t\t\t\tOS.SelectClipRgn (hDC, 0);", "+\t\t\t\t\t\t\tOS.ExcludeClipRect (hDC, itemRect.left, itemRect.top, itemRect.right, itemRect.bottom);", "+\t\t\t\t\t\t\tOS.SaveDC (hDC);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "-\t\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "-\t\t\t\t\t\t\tif (count == 1) break;", "+\t\t\t\t\t\t\tif (OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0) == 1) {", "+\t\t\t\t\t\t\t\tif (ignoreDraw || hooks (SWT.EraseItem) || hooks (SWT.PaintItem)) {", "+\t\t\t\t\t\t\t\t\treturn new LRESULT (OS.CDRF_NOTIFYPOSTPAINT);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\tOS.SelectObject (nmcd.hdc, hFont);", "+\t\t\t\t\tOS.SelectObject (hDC, hFont);", "-\t\t\t\t\t\t\tif (control.backgroundImage == null) {", "+\t\t\t\t\t\t\tif (control.backgroundImage == null && !hooks (SWT.EraseItem)) {", "+\t\t\t\t\tif (ignoreDraw || hooks (SWT.EraseItem) || hooks (SWT.PaintItem)) {", "+\t\t\t\t\t\treturn new LRESULT (OS.CDRF_NEWFONT | OS.CDRF_NOTIFYPOSTPAINT);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tcase OS.CDDS_ITEMPOSTPAINT | OS.CDDS_SUBITEM: {", "+\t\t\t\t\tint hDC = nmcd.hdc;", "+\t\t\t\t\tif (ignoreDraw) OS.RestoreDC (hDC, -1);", "+\t\t\t\t\tif (hooks (SWT.PaintItem)) {", "+\t\t\t\t\t\tTableItem item = _getItem (nmcd.dwItemSpec);", "+\t\t\t\t\t\tRECT itemRect = item.getBounds (nmcd.dwItemSpec, nmcd.iSubItem, true, true, false, false, hDC);", "+\t\t\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "+\t\t\t\t\t\tGCData data = new GCData ();", "+\t\t\t\t\t\tdata.device = display;", "+\t\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [nmcd.iSubItem] : -1;", "+\t\t\t\t\t\tif (hFont == -1) hFont = item.font;", "+\t\t\t\t\t\tdata.hFont = hFont;", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t* Bug in Windows.  For some reason, CDIS_SELECTED always set,", "+\t\t\t\t\t\t* even for items that are not selected.  The fix is to get", "+\t\t\t\t\t\t* the selection state from the item.", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tLVITEM lvItem = new LVITEM ();", "+\t\t\t\t\t\tlvItem.mask = OS.LVIF_STATE;", "+\t\t\t\t\t\tlvItem.stateMask = OS.LVIS_SELECTED;", "+\t\t\t\t\t\tlvItem.iItem = nmcd.dwItemSpec;", "+\t\t\t\t\t\tint result = OS.SendMessage (handle, OS.LVM_GETITEM, 0, lvItem);", "+\t\t\t\t\t\tboolean selected = result != 0 && (lvItem.state & OS.LVIS_SELECTED) != 0;", "+\t\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "+\t\t\t\t\t\t\tif (selected && (nmcd.iSubItem == 0 || (style & SWT.FULL_SELECTION) != 0)) {", "+\t\t\t\t\t\t\t\tdata.foreground = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "+\t\t\t\t\t\t\t\tdata.background = OS.GetSysColor (OS.COLOR_HIGHLIGHT);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tint clrText = item.cellForeground != null ? item.cellForeground [nmcd.iSubItem] : -1;", "+\t\t\t\t\t\t\t\tif (clrText == -1) clrText = item.foreground;", "+\t\t\t\t\t\t\t\tint clrTextBk = item.cellBackground != null ? item.cellBackground [nmcd.iSubItem] : -1;", "+\t\t\t\t\t\t\t\tif (clrTextBk == -1) clrTextBk = item.background;", "+\t\t\t\t\t\t\t\tdata.foreground = clrText != -1 ? clrText : OS.GetTextColor (hDC);", "+\t\t\t\t\t\t\t\tdata.background = clrTextBk != -1 ? clrTextBk : OS.GetBkColor (hDC);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tdata.hPen = OS.CreatePen (OS.PS_SOLID, 0, data.foreground);", "+\t\t\t\t\t\t\tdata.hBrush = OS.CreateSolidBrush (data.background);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "+\t\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\t\tevent.item = item;", "+\t\t\t\t\t\tevent.gc = gc;", "+\t\t\t\t\t\tevent.index = nmcd.iSubItem;", "+\t\t\t\t\t\tif (selected) event.detail |= SWT.SELECTED;", "+\t\t\t\t\t\tif ((nmcd.uItemState & OS.CDIS_FOCUS) != 0) event.detail |= SWT.FOCUSED;", "+\t\t\t\t\t\tevent.x = itemRect.left;", "+\t\t\t\t\t\tevent.y = itemRect.top;", "+\t\t\t\t\t\tevent.width = itemRect.right - itemRect.left;", "+\t\t\t\t\t\tevent.height = itemRect.bottom - itemRect.top;", "+\t\t\t\t\t\tRECT cellRect = item.getBounds (nmcd.dwItemSpec, nmcd.iSubItem, true, true, true, true, hDC);", "+\t\t\t\t\t\tint cellWidth = cellRect.right - cellRect.left;", "+\t\t\t\t\t\tint cellHeight = cellRect.bottom - cellRect.top;", "+\t\t\t\t\t\tgc.setClipping (cellRect.left, cellRect.top, cellWidth, cellHeight);", "+\t\t\t\t\t\tsendEvent (SWT.PaintItem, event);", "+\t\t\t\t\t\tevent.gc = null;", "+\t\t\t\t\t\tgc.dispose ();", "+\t\t\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "+\t\t\t\t\t\tif (isDisposed () || item.isDisposed ()) break;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\tif (hooks (SWT.EraseItem) || hooks (SWT.PaintItem)) {", "+\t\t\t\tint hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "+\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\tif (count != 0) {", "+\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\t\t\tNMLISTVIEW pnmlv = new NMLISTVIEW ();", "+\t\t\t\t\tOS.MoveMemory (pnmlv, lParam, NMLISTVIEW.sizeof);", "+\t\t\t\t\tif (pnmlv.iItem != -1) {", "+\t\t\t\t\t\tRECT itemRect = new RECT ();", "+\t\t\t\t\t\trect.left = OS.LVIR_BOUNDS;", "+\t\t\t\t\t\tOS.SendMessage (handle, OS. LVM_GETITEMRECT, pnmlv.iItem, itemRect);", "+\t\t\t\t\t\tRECT headerRect = new RECT ();", "+\t\t\t\t\t\tint index = OS.SendMessage (hwndHeader, OS.HDM_ORDERTOINDEX, count - 1, 0);", "+\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, index, headerRect);", "+\t\t\t\t\t\trect.left = headerRect.right;", "+\t\t\t\t\t\trect.top = itemRect.top;", "+\t\t\t\t\t\trect.bottom = itemRect.bottom;", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.InvalidateRect (handle, rect, true);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b188f2256adb137c957709f4c7fe9b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "d60307042554a2ad80509163fd1d15e5566b488d", "commitAfterChange": "501cddef55d98c472a410dbb933c0adba1cf9644", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 131, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\tif (!customDraw) {", "-\t\t\t\tif (findImageControl () == null) break;", "-\t\t\t}", "+\t\t\tif (!customDraw && findImageControl () == null) break;", "-\t\t\t\t\tif (nmcd.left >= nmcd.right || nmcd.top >= nmcd.bottom) {", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "+\t\t\t\t\tif (nmcd.left >= nmcd.right || nmcd.top >= nmcd.bottom) break;", "-\t\t\t\t\tOS.SaveDC (hDC);", "-\t\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-\t\t\t\t\tif (!printClient && (bits & OS.TVS_FULLROWSELECT) == 0) {", "-\t\t\t\t\t\tif (hwndHeader != 0) {", "-\t\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "-\t\t\t\t\t\t\tif (count != 0) {", "-\t\t\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "-\t\t\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "-\t\t\t\t\t\t\t\tint index = OS.SendMessage (hwndHeader, OS.HDM_ORDERTOINDEX, 0, 0);", "-\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, index, hdItem);", "-\t\t\t\t\t\t\t\tint hRgn = OS.CreateRectRgn (nmcd.left, nmcd.top, nmcd.left + hdItem.cxy, nmcd.bottom);", "-\t\t\t\t\t\t\t\tOS.SelectClipRgn (hDC, hRgn);", "-\t\t\t\t\t\t\t\tOS.DeleteObject (hRgn);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\tint index = 0;", "+\t\t\t\t\tRECT clipRect = null;", "+\t\t\t\t\tif (hwndHeader != 0) {", "+\t\t\t\t\t\tindex = OS.SendMessage (hwndHeader, OS.HDM_ORDERTOINDEX, 0, 0);", "+\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\tif (count != 0) {", "+\t\t\t\t\t\t\tclipRect = new RECT ();", "+\t\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "+\t\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "+\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, index, hdItem);", "+\t\t\t\t\t\t\tOS.SetRect (clipRect, nmcd.left, nmcd.top, nmcd.left + hdItem.cxy, nmcd.bottom);", "-\t\t\t\t\tif (item.font == -1 && item.foreground == -1 && item.background == -1) {", "-\t\t\t\t\t\tif (item.cellForeground == null && item.cellBackground == null && item.cellFont == null) {", "-\t\t\t\t\t\t\treturn new LRESULT (OS.CDRF_DODEFAULT | OS.CDRF_NOTIFYPOSTPAINT);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [0] : -1;", "+\t\t\t\t\tint clrText = -1, clrTextBk = -1;", "+\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [index] : -1;", "-\t\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "-\t\t\t\t\t\tboolean useColor = true;", "+\t\t\t\t\t\tclrText = item.cellForeground != null ? item.cellForeground [index] : -1;", "+\t\t\t\t\t\tif (clrText == -1) clrText = item.foreground;", "+\t\t\t\t\t\tclrTextBk = item.cellBackground != null ? item.cellBackground [index] : -1;", "+\t\t\t\t\t\tif (clrTextBk == -1) clrTextBk = item.background;", "+\t\t\t\t\t}", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Feature in Windows.  When the mouse is pressed and the", "+\t\t\t\t\t* selection is first drawn for a tree, the previously", "+\t\t\t\t\t* selected item is redrawn but the the TVIS_SELECTED bits", "+\t\t\t\t\t* are not cleared.  When the user moves the mouse slightly", "+\t\t\t\t\t* and a drag and drop operation is not started, the item is", "+\t\t\t\t\t* drawn again and this time with TVIS_SELECTED is cleared.", "+\t\t\t\t\t* This means that an item that contains colored cells will", "+\t\t\t\t\t* not draw with the correct background until the mouse is", "+\t\t\t\t\t* moved.  The fix is to test for the selection colors and", "+\t\t\t\t\t* guess that the item is not selected.", "+\t\t\t\t\t* ", "+\t\t\t\t\t* NOTE: This code does not work when the foreground and", "+\t\t\t\t\t* background of the tree are set to the selection colors", "+\t\t\t\t\t* but this does not happen in a regular application.", "+\t\t\t\t\t*/", "+\t\t\t\t\tboolean selected = false;", "+\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "-\t\t\t\t\t\t\tuseColor = false;", "+\t\t\t\t\t\t\tselected = true;", "+\t\t\t\t\t\t\tif (handle == OS.GetFocus ()) {", "+\t\t\t\t\t\t\t\tif (OS.GetTextColor (hDC) != OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT)) {", "+\t\t\t\t\t\t\t\t\tselected = false;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tif (OS.GetBkColor (hDC) != OS.GetSysColor (OS.COLOR_HIGHLIGHT)) {", "+\t\t\t\t\t\t\t\t\t\tselected = false;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\t//TODO - BUG - measure and erase sent when first column is clipped", "+\t\t\t\t\tif (hooks (SWT.MeasureItem)) {", "+\t\t\t\t\t\tRECT itemRect = item.getBounds (index, true, true, false, false, false, hDC);", "+\t\t\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "+\t\t\t\t\t\tGCData data = new GCData ();", "+\t\t\t\t\t\tdata.device = display;", "+\t\t\t\t\t\tdata.hFont = hFont;", "+\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "+\t\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\t\tevent.item = item;", "+\t\t\t\t\t\tevent.gc = gc;", "+\t\t\t\t\t\tevent.index = index;", "+\t\t\t\t\t\tevent.x = itemRect.left;", "+\t\t\t\t\t\tevent.y = itemRect.top;", "+\t\t\t\t\t\tevent.width = itemRect.right - itemRect.left;", "+\t\t\t\t\t\tevent.height = itemRect.bottom - itemRect.top;", "+\t\t\t\t\t\tsendEvent (SWT.MeasureItem, event);", "+\t\t\t\t\t\tevent.gc = null;", "+\t\t\t\t\t\tgc.dispose ();", "+\t\t\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "+\t\t\t\t\t\tif (isDisposed () || item.isDisposed ()) break;", "+\t\t\t\t\t\tif (hwndHeader != 0) {", "+\t\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\t\tif (count == 0) {", "+\t\t\t\t\t\t\t\tif (event.x + event.width > scrollWidth) {", "+\t\t\t\t\t\t\t\t\tsetScrollWidth (event.x + event.width);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!ignoreItemHeight) {", "+\t\t\t\t\t\t\tint itemHeight = OS.SendMessage (handle, OS.TVM_GETITEMHEIGHT, 0, 0);", "+\t\t\t\t\t\t\tif (event.height > itemHeight) {", "+\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEMHEIGHT, event.height, 0);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tignoreItemHeight = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tignoreDraw = ignoreDrawSelected = false;", "+\t\t\t\t\tif (hooks (SWT.EraseItem)) {", "+\t\t\t\t\t\tRECT cellRect = item.getBounds (index, true, true, true, true, true, hDC);", "+\t\t\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "+\t\t\t\t\t\tGCData data = new GCData ();", "+\t\t\t\t\t\tdata.device = display;", "+\t\t\t\t\t\tdata.foreground = clrText != -1 ? clrText : OS.GetTextColor (hDC);", "+\t\t\t\t\t\tdata.background = clrTextBk != -1 ? clrTextBk : OS.GetBkColor (hDC);", "+\t\t\t\t\t\tdata.hPen = OS.CreatePen (OS.PS_SOLID, 0, data.foreground);", "+\t\t\t\t\t\tdata.hBrush = OS.CreateSolidBrush (data.background);", "+\t\t\t\t\t\tif (hFont != -1) data.hFont = hFont;", "+\t\t\t\t\t\tOS.SelectObject (hDC, data.hPen);", "+\t\t\t\t\t\tOS.SelectObject (hDC, data.hBrush);", "+\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "+\t\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\t\tevent.index = index;", "+\t\t\t\t\t\tevent.item = item;", "+\t\t\t\t\t\tevent.gc = gc;", "+\t\t\t\t\t\tif (selected) event.detail |= SWT.SELECTED;", "+\t\t\t\t\t\tif ((nmcd.uItemState & OS.CDIS_FOCUS) != 0) event.detail |= SWT.FOCUSED;", "+\t\t\t\t\t\tevent.x = cellRect.left;", "+\t\t\t\t\t\tevent.y = cellRect.top;", "+\t\t\t\t\t\tevent.width = cellRect.right - cellRect.left;", "+\t\t\t\t\t\tevent.height = cellRect.bottom - cellRect.top;", "+\t\t\t\t\t\tif (hwndHeader != 0) {", "+\t\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\t\tif (count == 0) event.width = Math.max (event.width, scrollWidth);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tevent.height = cellRect.bottom - cellRect.top;", "+\t\t\t\t\t\tgc.setClipping (event.x, event.y, event.width, event.height);", "+\t\t\t\t\t\tsendEvent (SWT.EraseItem, event);", "+\t\t\t\t\t\tevent.gc = null;", "+\t\t\t\t\t\tgc.dispose ();", "+\t\t\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "+\t\t\t\t\t\tif (isDisposed () || item.isDisposed ()) break;", "+\t\t\t\t\t\tignoreDraw = !event.doit;", "+\t\t\t\t\t\tRECT textRect = item.getBounds (index, true, false, false, false, true, hDC);", "+\t\t\t\t\t\tif (event.doit) {", "+\t\t\t\t\t\t\tif ((event.detail & SWT.SELECTED) != 0) {", "+\t\t\t\t\t\t\t\tdrawBackground (hDC, textRect, OS.GetBkColor (hDC));", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tignoreDrawSelected = true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tRECT itemRect = item.getBounds (index, true, true, false, false, false, hDC);", "+\t\t\t\t\t\tOS.SaveDC (hDC);", "+\t\t\t\t\t\tOS.SelectClipRgn (hDC, 0);", "+\t\t\t\t\t\t//TODO - bug in Windows selection or SWT itemRect", "+\t\t\t\t\t\t/*if (selected)*/ itemRect.right++;", "+\t\t\t\t\t\tif (linesVisible) itemRect.bottom++;", "+\t\t\t\t\t\tif (clipRect != null) {", "+\t\t\t\t\t\t\tOS.IntersectClipRect (hDC, clipRect.left, clipRect.top, clipRect.right, clipRect.bottom);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.ExcludeClipRect (hDC, itemRect.left, itemRect.top, itemRect.right, itemRect.bottom);", "+\t\t\t\t\t\treturn new LRESULT (OS.CDRF_DODEFAULT | OS.CDRF_NOTIFYPOSTPAINT);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.SaveDC (hDC);", "+\t\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\t\t\t\tif (clipRect != null) {", "+\t\t\t\t\t\tif (!printClient && (bits & OS.TVS_FULLROWSELECT) == 0) {", "+\t\t\t\t\t\t\tint hRgn = OS.CreateRectRgn (clipRect.left, clipRect.top, clipRect.right, clipRect.bottom);", "+\t\t\t\t\t\t\tOS.SelectClipRgn (hDC, hRgn);", "+\t\t\t\t\t\t\tOS.DeleteObject (hRgn);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (clrText == -1 && clrTextBk == -1 && hFont == -1) {", "+\t\t\t\t\t\treturn new LRESULT (OS.CDRF_DODEFAULT | OS.CDRF_NOTIFYPOSTPAINT);\t", "+\t\t\t\t\t}", "+\t\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "+\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t* Feature in Windows.  Windows does not fill the entire cell", "+\t\t\t\t\t\t* with the background color when TVS_FULLROWSELECT is not set.", "+\t\t\t\t\t\t* The fix is to fill it, event when the item is selected.", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "+\t\t\t\t\t\t\tif (hwndHeader != 0) {", "+\t\t\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\t\t\tif (count != 0) {", "+\t\t\t\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "+\t\t\t\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "+\t\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, index, hdItem);", "+\t\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.left + hdItem.cxy, nmcd.bottom);", "+\t\t\t\t\t\t\t\t\tif (OS.COMCTL32_MAJOR < 6 || !OS.IsAppThemed ()) {", "+\t\t\t\t\t\t\t\t\t\tRECT itemRect = new RECT ();", "+\t\t\t\t\t\t\t\t\t\titemRect.left = item.handle;", "+\t\t\t\t\t\t\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, itemRect) != 0) {", "+\t\t\t\t\t\t\t\t\t\t\trect.left = Math.min (itemRect.left, rect.right);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (clrTextBk != -1) fillBackground (hDC, clrTextBk, rect);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!selected) {", "+\t\t\t\t\t\t\tnmcd.clrText = clrText == -1 ? getForegroundPixel () : clrText;", "+\t\t\t\t\t\t\tnmcd.clrTextBk = clrTextBk == -1 ? getBackgroundPixel () : clrTextBk;", "+\t\t\t\t\t\t\tOS.MoveMemory (lParam, nmcd, NMTVCUSTOMDRAW.sizeof);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\treturn new LRESULT (OS.CDRF_NEWFONT | OS.CDRF_NOTIFYPOSTPAINT);", "+\t\t\t\t}", "+\t\t\t\tcase OS.CDDS_ITEMPOSTPAINT: {", "+\t\t\t\t\tTreeItem item = _getItem (nmcd.dwItemSpec, nmcd.lItemlParam);", "+\t\t\t\t\tif (item == null) break;", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Feature in Windows.  Under certain circumstances, Windows", "+\t\t\t\t\t* sends CDDS_ITEMPOSTPAINT for an empty rectangle.  This is", "+\t\t\t\t\t* not a problem providing that graphics do not occur outside", "+\t\t\t\t\t* the rectangle.  The fix is to test for the rectangle and", "+\t\t\t\t\t* draw nothing.", "+\t\t\t\t\t* ", "+\t\t\t\t\t* NOTE:  This seems to happen when both I_IMAGECALLBACK", "+\t\t\t\t\t* and LPSTR_TEXTCALLBACK are used at the same time with", "+\t\t\t\t\t* TVM_SETITEM.", "+\t\t\t\t\t*/", "+\t\t\t\t\tif (nmcd.left >= nmcd.right || nmcd.top >= nmcd.bottom) break;", "+\t\t\t\t\tint hDC = nmcd.hdc;", "+\t\t\t\t\tOS.RestoreDC (hDC, -1);", "+\t\t\t\t\tOS.SetBkMode (hDC, OS.TRANSPARENT);", "+\t\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\t\t\t\tboolean selected = false;", "+\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "+\t\t\t\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\t\t\t\ttvItem.mask = OS.TVIF_STATE;", "+\t\t\t\t\t\ttvItem.hItem = item.handle;", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "+\t\t\t\t\t\tif ((tvItem.state & (OS.TVIS_SELECTED | OS.TVIS_DROPHILITED)) != 0) {", "+\t\t\t\t\t\t\tselected = true;", "-\t\t\t\t\t\t\t\t\tuseColor = true;", "+\t\t\t\t\t\t\t\t\tselected = false;", "-\t\t\t\t\t\t\t\t\t\tuseColor = true;", "+\t\t\t\t\t\t\t\t\t\tselected = false;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tint clrText = item.cellForeground != null ? item.cellForeground [0] : -1;", "-\t\t\t\t\t\tif (clrText == -1) clrText = item.foreground;", "-\t\t\t\t\t\tnmcd.clrText = clrText == -1 ? getForegroundPixel () : clrText;", "-\t\t\t\t\t\tint clrTextBk = item.cellBackground != null ? item.cellBackground [0] : -1;", "-\t\t\t\t\t\tif (clrTextBk == -1) clrTextBk = item.background;", "-\t\t\t\t\t\tif (clrTextBk == -1) {", "-\t\t\t\t\t\t\tControl control = findBackgroundControl ();", "-\t\t\t\t\t\t\tif (control == null) control = this;", "-\t\t\t\t\t\t\tif (control.backgroundImage == null) {", "-\t\t\t\t\t\t\t\tnmcd.clrTextBk = control.getBackgroundPixel ();", "-\t\t\t\t\t\t\tnmcd.clrTextBk = clrTextBk;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "-\t\t\t\t\t\t\tif (hwndHeader != 0) {", "-\t\t\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "-\t\t\t\t\t\t\t\tif (count != 0) {", "-\t\t\t\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "-\t\t\t\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "-\t\t\t\t\t\t\t\t\tint index = OS.SendMessage (hwndHeader, OS.HDM_ORDERTOINDEX, 0, 0);", "-\t\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, index, hdItem);", "-\t\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.left + hdItem.cxy, nmcd.bottom);", "-\t\t\t\t\t\t\t\t\tif (OS.COMCTL32_MAJOR < 6 || !OS.IsAppThemed ()) {", "-\t\t\t\t\t\t\t\t\t\tRECT itemRect = new RECT ();", "-\t\t\t\t\t\t\t\t\t\titemRect.left = item.handle;", "-\t\t\t\t\t\t\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, itemRect) != 0) {", "-\t\t\t\t\t\t\t\t\t\t\trect.left = Math.min (itemRect.left, rect.right);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (clrTextBk == -1) {", "-\t\t\t\t\t\t\t\t\t\tControl control = findImageControl ();", "-\t\t\t\t\t\t\t\t\t\tif (control != null) {", "-\t\t\t\t\t\t\t\t\t\t\tfillImageBackground (hDC, control, rect);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tfillBackground (hDC, nmcd.clrTextBk, rect);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (useColor) OS.MoveMemory (lParam, nmcd, NMTVCUSTOMDRAW.sizeof);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn new LRESULT (OS.CDRF_NEWFONT | OS.CDRF_NOTIFYPOSTPAINT);", "-\t\t\t\t}", "-\t\t\t\tcase OS.CDDS_ITEMPOSTPAINT: {", "-\t\t\t\t\tTreeItem item = _getItem (nmcd.dwItemSpec, nmcd.lItemlParam);", "-\t\t\t\t\tif (item == null) break;", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Feature in Windows.  Under certain circumstances, Windows", "-\t\t\t\t\t* sends CDDS_ITEMPOSTPAINT for an empty rectangle.  This is", "-\t\t\t\t\t* not a problem providing that graphics do not occur outside", "-\t\t\t\t\t* the rectangle.  The fix is to test for the rectangle and", "-\t\t\t\t\t* draw nothing.", "-\t\t\t\t\t* ", "-\t\t\t\t\t* NOTE:  This seems to happen when both I_IMAGECALLBACK", "-\t\t\t\t\t* and LPSTR_TEXTCALLBACK are used at the same time with", "-\t\t\t\t\t* TVM_SETITEM.", "-\t\t\t\t\t*/", "-\t\t\t\t\tif (nmcd.left >= nmcd.right || nmcd.top >= nmcd.bottom) {", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tint hDC = nmcd.hdc;", "-\t\t\t\t\tOS.RestoreDC (hDC, -1);", "-\t\t\t\t\tOS.SetBkMode (hDC, OS.TRANSPARENT);", "-\t\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-\t\t\t\t\tboolean useColor = OS.IsWindowEnabled (handle);", "-\t\t\t\t\tif (useColor) {", "-\t\t\t\t\t\tif ((bits & OS.TVS_FULLROWSELECT) != 0) {", "-\t\t\t\t\t\t\tTVITEM tvItem = new TVITEM ();", "-\t\t\t\t\t\t\ttvItem.mask = OS.TVIF_STATE;", "-\t\t\t\t\t\t\ttvItem.hItem = item.handle;", "-\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "-\t\t\t\t\t\t\tif ((tvItem.state & (OS.TVIS_SELECTED | OS.TVIS_DROPHILITED)) != 0) {", "-\t\t\t\t\t\t\t\tuseColor = false;", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t* Feature in Windows.  When the mouse is pressed and the", "-\t\t\t\t\t\t\t\t* selection is first drawn for a tree, the previously", "-\t\t\t\t\t\t\t\t* selected item is redrawn but the the TVIS_SELECTED bits", "-\t\t\t\t\t\t\t\t* are not cleared.  When the user moves the mouse slightly", "-\t\t\t\t\t\t\t\t* and a drag and drop operation is not started, the item is", "-\t\t\t\t\t\t\t\t* drawn again and this time with TVIS_SELECTED is cleared.", "-\t\t\t\t\t\t\t\t* This means that an item that contains colored cells will", "-\t\t\t\t\t\t\t\t* not draw with the correct background until the mouse is", "-\t\t\t\t\t\t\t\t* moved.  The fix is to test for the selection colors and", "-\t\t\t\t\t\t\t\t* guess that the item is not selected.", "-\t\t\t\t\t\t\t\t* ", "-\t\t\t\t\t\t\t\t* NOTE: This code does not work when the foreground and", "-\t\t\t\t\t\t\t\t* background of the tree are set to the selection colors", "-\t\t\t\t\t\t\t\t* but this does not happen in a regular application.", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\tif (handle == OS.GetFocus ()) {", "-\t\t\t\t\t\t\t\t\tif (OS.GetTextColor (hDC) != OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT)) {", "-\t\t\t\t\t\t\t\t\t\tuseColor = true;", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tif (OS.GetBkColor (hDC) != OS.GetSysColor (OS.COLOR_HIGHLIGHT)) {", "-\t\t\t\t\t\t\t\t\t\t\tuseColor = true;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t* Feature in Windows.  When the mouse is pressed and the", "-\t\t\t\t\t\t\t\t* selection is first drawn for a tree, the item is drawn", "-\t\t\t\t\t\t\t\t* selected, but the TVIS_SELECTED bits for the item are", "-\t\t\t\t\t\t\t\t* not set.  When the user moves the mouse slightly and", "-\t\t\t\t\t\t\t\t* a drag and drop operation is not started, the item is", "-\t\t\t\t\t\t\t\t* drawn again and this time TVIS_SELECTED is set.  This", "-\t\t\t\t\t\t\t\t* means that an item that is in a tree that has the style", "-\t\t\t\t\t\t\t\t* TVS_FULLROWSELECT and that also contains colored cells", "-\t\t\t\t\t\t\t\t* will not draw the entire row selected until the user", "-\t\t\t\t\t\t\t\t* moves the mouse.  The fix is to test for the selection", "-\t\t\t\t\t\t\t\t* colors and guess that the item is selected.", "-\t\t\t\t\t\t\t\t* ", "-\t\t\t\t\t\t\t\t* NOTE: This code does not work when the foreground and", "-\t\t\t\t\t\t\t\t* background of the tree are set to the selection colors", "-\t\t\t\t\t\t\t\t* but this does not happen in a regular application.", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\tif (OS.GetTextColor (hDC) == OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT)) {", "-\t\t\t\t\t\t\t\t\tif (OS.GetBkColor (hDC) == OS.GetSysColor (OS.COLOR_HIGHLIGHT)) {", "-\t\t\t\t\t\t\t\t\t\tuseColor = false;", "-\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t* Feature in Windows.  When the mouse is pressed and the", "+\t\t\t\t\t\t\t* selection is first drawn for a tree, the item is drawn", "+\t\t\t\t\t\t\t* selected, but the TVIS_SELECTED bits for the item are", "+\t\t\t\t\t\t\t* not set.  When the user moves the mouse slightly and", "+\t\t\t\t\t\t\t* a drag and drop operation is not started, the item is", "+\t\t\t\t\t\t\t* drawn again and this time TVIS_SELECTED is set.  This", "+\t\t\t\t\t\t\t* means that an item that is in a tree that has the style", "+\t\t\t\t\t\t\t* TVS_FULLROWSELECT and that also contains colored cells", "+\t\t\t\t\t\t\t* will not draw the entire row selected until the user", "+\t\t\t\t\t\t\t* moves the mouse.  The fix is to test for the selection", "+\t\t\t\t\t\t\t* colors and guess that the item is selected.", "+\t\t\t\t\t\t\t* ", "+\t\t\t\t\t\t\t* NOTE: This code does not work when the foreground and", "+\t\t\t\t\t\t\t* background of the tree are set to the selection colors", "+\t\t\t\t\t\t\t* but this does not happen in a regular application.", "+\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\tif (OS.GetTextColor (hDC) == OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT)) {", "+\t\t\t\t\t\t\t\tif (OS.GetBkColor (hDC) == OS.GetSysColor (OS.COLOR_HIGHLIGHT)) {", "+\t\t\t\t\t\t\t\t\tselected = true;", "-\t\t\t\t\tGCData data = new GCData();", "-\t\t\t\t\tdata.device = display;", "-\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "+\t\t\t\t\tint count = 0;", "+\t\t\t\t\tint [] order = null;", "+\t\t\t\t\tRECT clientRect = new RECT ();", "+\t\t\t\t\tOS.GetClientRect (scrolledHandle (), clientRect);", "+\t\t\t\t\tif (hwndHeader != 0) {", "+\t\t\t\t\t\tOS.MapWindowPoints (hwndParent, handle, clientRect, 2);", "+\t\t\t\t\t\tcount = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\tif (count != 0) {", "+\t\t\t\t\t\t\torder = new int [count];", "+\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETORDERARRAY, count, order);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tPoint size = null;", "-\t\t\t\t\tPoint size = null;\t", "-\t\t\t\t\tint count = hwndHeader != 0 ? OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0) : 0;", "-\t\t\t\t\t\tboolean drawItem = true;", "-\t\t\t\t\t\tint index = i, width = nmcd.right - nmcd.left;", "+\t\t\t\t\t\tint index = order == null ? i : order [i], width = nmcd.right - nmcd.left;", "-\t\t\t\t\t\t\tindex = OS.SendMessage (hwndHeader, OS.HDM_ORDERTOINDEX, i, 0);", "-\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\tif (i == 0) {", "-\t\t\t\t\t\t\tdrawItem = false;", "-\t\t\t\t\t\t\tif (useColor) {", "-\t\t\t\t\t\t\t\tControl control = findBackgroundControl ();", "-\t\t\t\t\t\t\t\tif (control != null && control.backgroundImage != null) {", "-\t\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t\t* Feature in Windows.  When the mouse is pressed in a", "-\t\t\t\t\t\t\t\t\t* single select tree, the previous item is no longer", "-\t\t\t\t\t\t\t\t\t* selected, but the TVIS_SELECTED bits for that item", "-\t\t\t\t\t\t\t\t\t* are not set.  The fix is to test for the selection", "-\t\t\t\t\t\t\t\t\t* colors and guess that the item is selected.", "-\t\t\t\t\t\t\t\t\t* ", "-\t\t\t\t\t\t\t\t\t* NOTE: This code does not work when the foreground and", "-\t\t\t\t\t\t\t\t\t* background of the tree are set to the selection colors", "-\t\t\t\t\t\t\t\t\t* but this does not happen in a regular application.", "-\t\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\t\tboolean selected = false;", "-\t\t\t\t\t\t\t\t\tif ((style & SWT.SINGLE) != 0) {\t", "-\t\t\t\t\t\t\t\t\t\tif (OS.GetTextColor (hDC) == OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT)) {", "-\t\t\t\t\t\t\t\t\t\t\tif (OS.GetBkColor (hDC) == OS.GetSysColor (OS.COLOR_HIGHLIGHT)) {", "-\t\t\t\t\t\t\t\t\t\t\t\tselected = true;", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tTVITEM tvItem = new TVITEM ();", "-\t\t\t\t\t\t\t\t\t\ttvItem.mask = OS.TVIF_STATE;", "-\t\t\t\t\t\t\t\t\t\ttvItem.hItem = item.handle;", "-\t\t\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "-\t\t\t\t\t\t\t\t\t\tselected = (tvItem.state & (OS.TVIS_SELECTED | OS.TVIS_DROPHILITED)) != 0;", "+\t\t\t\t\t\tif (x + width > clientRect.left) {", "+\t\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\t\tboolean drawItem = true, drawText = true, drawImage = true, drawBackground = true;", "+\t\t\t\t\t\t\tif (i == 0) {", "+\t\t\t\t\t\t\t\tdrawItem = drawImage = drawText = drawBackground = false;", "+\t\t\t\t\t\t\t\tControl control = findImageControl ();", "+\t\t\t\t\t\t\t\tif (control != null) {", "+\t\t\t\t\t\t\t\t\trect.left = item.handle;", "+\t\t\t\t\t\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect) != 0) {", "+\t\t\t\t\t\t\t\t\t\tdrawItem = drawText = drawBackground = true;", "-\t\t\t\t\t\t\t\t\tif (!selected) {", "-\t\t\t\t\t\t\t\t\t\trect.left = item.handle;", "-\t\t\t\t\t\t\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect) != 0) {", "-\t\t\t\t\t\t\t\t\t\t\tdrawItem = true;", "-\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\trect.bottom -= gridWidth;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (selected && !ignoreDraw && !ignoreDrawSelected) {", "+\t\t\t\t\t\t\t\t\tfillBackground (hDC, OS.GetBkColor (hDC), rect);", "+\t\t\t\t\t\t\t\t\tdrawBackground = false;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (hooks (SWT.EraseItem)) {", "+\t\t\t\t\t\t\t\t\tdrawItem = drawText = drawImage = true;", "+\t\t\t\t\t\t\t\t\trect = item.getBounds (index, true, true, false, false, true, hDC);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tignoreDraw = ignoreDrawSelected = false;", "+\t\t\t\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "+\t\t\t\t\t\t\t\t\t/* set the default colors for the row */", "+\t\t\t\t\t\t\t\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "+\t\t\t\t\t\t\t\t\t\tOS.SetTextColor (hDC, getForegroundPixel ());", "+\t\t\t\t\t\t\t\t\t\tOS.SetBkColor (hDC, getBackgroundPixel ());", "-\t\t\t\t\t\t\t\tif (control == null) control = this;", "-\t\t\t\t\t\t\t\tOS.SetTextColor (hDC, getForegroundPixel ());", "-\t\t\t\t\t\t\t\tOS.SetBkColor (hDC, control.getBackgroundPixel ());", "+\t\t\t\t\t\t\t\tOS.SetRect (rect, x, nmcd.top, x + width, nmcd.bottom - gridWidth);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tOS.SetRect (rect, x, nmcd.top, x + width, nmcd.bottom - gridWidth);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (drawItem) {", "-\t\t\t\t\t\t\tint clrTextBk = -1;", "-\t\t\t\t\t\t\tif (useColor) {", "-\t\t\t\t\t\t\t\tclrTextBk = item.cellBackground != null ? item.cellBackground [index] : -1;", "-\t\t\t\t\t\t\t\tif (clrTextBk == -1) clrTextBk = item.background;", "+\t\t\t\t\t\t\tint clrText = -1, clrTextBk = -1;", "+\t\t\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [index] : -1;", "+\t\t\t\t\t\t\tif (hFont == -1) hFont = item.font;", "+\t\t\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "+\t\t\t\t\t\t\t\tif (!selected || (index != 0 && (bits & OS.TVS_FULLROWSELECT) == 0)) {", "+\t\t\t\t\t\t\t\t\tclrText = item.cellForeground != null ? item.cellForeground [index] : -1;", "+\t\t\t\t\t\t\t\t\tif (clrText == -1) clrText = item.foreground;", "+\t\t\t\t\t\t\t\t\tclrTextBk = item.cellBackground != null ? item.cellBackground [index] : -1;", "+\t\t\t\t\t\t\t\t\tif (clrTextBk == -1) clrTextBk = item.background;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t/* needed or tree expand draws in the next column */", "-\t\t\t\t\t\t\tif (clrTextBk != -1) {", "-\t\t\t\t\t\t\t\tfillBackground (hDC, clrTextBk, rect);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tControl control = findImageControl ();", "-\t\t\t\t\t\t\t\tif (control != null) {", "-\t\t\t\t\t\t\t\t\tif (i == 0 && (bits & OS.TVS_FULLROWSELECT) == 0) {", "-\t\t\t\t\t\t\t\t\t\tint right = Math.min (rect.right, width);", "-\t\t\t\t\t\t\t\t\t\tOS.SetRect (rect, rect.left, rect.top, right, rect.bottom);", "-\t\t\t\t\t\t\t\t\t\tfillImageBackground (hDC, control, rect);", "-\t\t\t\t\t\t\t\t\t\tif (handle == OS.GetFocus ()) {", "-\t\t\t\t\t\t\t\t\t\t\tint uiState = OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "-\t\t\t\t\t\t\t\t\t\t\tif ((uiState & OS.UISF_HIDEFOCUS) == 0) {", "-\t\t\t\t\t\t\t\t\t\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "-\t\t\t\t\t\t\t\t\t\t\t\tif (hItem == item.handle) OS.DrawFocusRect (hDC, rect);", "+\t\t\t\t\t\t\tif (drawItem) {", "+\t\t\t\t\t\t\t\tif (drawBackground && !ignoreDraw && !ignoreDrawSelected) {", "+\t\t\t\t\t\t\t\t\tif (clrTextBk != -1) {", "+\t\t\t\t\t\t\t\t\t\tfillBackground (hDC, clrTextBk, rect);", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tControl control = findImageControl ();", "+\t\t\t\t\t\t\t\t\t\tif (control != null) {", "+\t\t\t\t\t\t\t\t\t\t\tif (i == 0 && (bits & OS.TVS_FULLROWSELECT) == 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\tint right = Math.min (rect.right, width);", "+\t\t\t\t\t\t\t\t\t\t\t\tOS.SetRect (rect, rect.left, rect.top, right, rect.bottom);", "+\t\t\t\t\t\t\t\t\t\t\t\tfillImageBackground (hDC, control, rect);", "+\t\t\t\t\t\t\t\t\t\t\t\tif (handle == OS.GetFocus ()) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tint uiState = OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "+\t\t\t\t\t\t\t\t\t\t\t\t\tif ((uiState & OS.UISF_HIDEFOCUS) == 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (hItem == item.handle) OS.DrawFocusRect (hDC, rect);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\trect.left = Math.min (rect.right, rect.left + 2);", "+\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\tfillImageBackground (hDC, control, rect);", "-\t\t\t\t\t\t\t\t\t\trect.left = Math.min (rect.right, rect.left + 2);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (i != 0) {", "+\t\t\t\t\t\t\t\t\tif (hooks (SWT.MeasureItem)) {", "+\t\t\t\t\t\t\t\t\t\tRECT itemRect = item.getBounds (index, true, true, false, false, false, hDC);", "+\t\t\t\t\t\t\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "+\t\t\t\t\t\t\t\t\t\tGCData data = new GCData ();", "+\t\t\t\t\t\t\t\t\t\tdata.device = display;", "+\t\t\t\t\t\t\t\t\t\tdata.hFont = hFont;", "+\t\t\t\t\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "+\t\t\t\t\t\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\t\t\t\t\t\tevent.item = item;", "+\t\t\t\t\t\t\t\t\t\tevent.index = index;", "+\t\t\t\t\t\t\t\t\t\tevent.gc = gc;", "+\t\t\t\t\t\t\t\t\t\tevent.x = itemRect.left;", "+\t\t\t\t\t\t\t\t\t\tevent.y = itemRect.top;", "+\t\t\t\t\t\t\t\t\t\tevent.width = itemRect.right - itemRect.left;", "+\t\t\t\t\t\t\t\t\t\tevent.height = itemRect.bottom - itemRect.top;", "+\t\t\t\t\t\t\t\t\t\tsendEvent (SWT.MeasureItem, event);", "+\t\t\t\t\t\t\t\t\t\tevent.gc = null;", "+\t\t\t\t\t\t\t\t\t\tgc.dispose ();", "+\t\t\t\t\t\t\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "+\t\t\t\t\t\t\t\t\t\tif (isDisposed () || item.isDisposed ()) break;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (hooks (SWT.EraseItem)) {", "+\t\t\t\t\t\t\t\t\t\tRECT cellRect = item.getBounds (index, true, true, true, true, true, hDC);", "+\t\t\t\t\t\t\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "+\t\t\t\t\t\t\t\t\t\tGCData data = new GCData ();", "+\t\t\t\t\t\t\t\t\t\tdata.device = display;", "+\t\t\t\t\t\t\t\t\t\tdata.foreground = clrText != -1 ? clrText : OS.GetTextColor (hDC);", "+\t\t\t\t\t\t\t\t\t\tdata.background = clrTextBk != -1 ? clrTextBk : OS.GetBkColor (hDC);", "+\t\t\t\t\t\t\t\t\t\tdata.hPen = OS.CreatePen (OS.PS_SOLID, 0, data.foreground);", "+\t\t\t\t\t\t\t\t\t\tdata.hBrush = OS.CreateSolidBrush (data.background);", "+\t\t\t\t\t\t\t\t\t\tdata.hFont = hFont;", "+\t\t\t\t\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "+\t\t\t\t\t\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\t\t\t\t\t\tevent.item = item;", "+\t\t\t\t\t\t\t\t\t\tevent.index = index;", "+\t\t\t\t\t\t\t\t\t\tevent.gc = gc;", "+\t\t\t\t\t\t\t\t\t\tif (selected) event.detail |= SWT.SELECTED;", "+\t\t\t\t\t\t\t\t\t\tif ((nmcd.uItemState & OS.CDIS_FOCUS) != 0) event.detail |= SWT.FOCUSED;", "+\t\t\t\t\t\t\t\t\t\tevent.x = cellRect.left;", "+\t\t\t\t\t\t\t\t\t\tevent.y = cellRect.top;", "+\t\t\t\t\t\t\t\t\t\tevent.width = cellRect.right - cellRect.left;", "+\t\t\t\t\t\t\t\t\t\tevent.height = cellRect.bottom - cellRect.top;", "+\t\t\t\t\t\t\t\t\t\tgc.setClipping (event.x, event.y, event.width, event.height);", "+\t\t\t\t\t\t\t\t\t\tsendEvent (SWT.EraseItem, event);", "+\t\t\t\t\t\t\t\t\t\tevent.gc = null;", "+\t\t\t\t\t\t\t\t\t\tgc.dispose ();", "+\t\t\t\t\t\t\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "+\t\t\t\t\t\t\t\t\t\tif (isDisposed () || item.isDisposed ()) break;", "+\t\t\t\t\t\t\t\t\t\tignoreDraw = !event.doit;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (drawImage) {", "+\t\t\t\t\t\t\t\t\tImage image = null;", "+\t\t\t\t\t\t\t\t\tif (index == 0) {", "+\t\t\t\t\t\t\t\t\t\timage = item.image;", "-\t\t\t\t\t\t\t\t\t\tfillImageBackground (hDC, control, rect);", "+\t\t\t\t\t\t\t\t\t\tImage [] images  = item.images;", "+\t\t\t\t\t\t\t\t\t\tif (images != null) image = images [index];", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tint inset = i != 0 ? INSET : 0;", "+\t\t\t\t\t\t\t\t\tif (image != null) {", "+\t\t\t\t\t\t\t\t\t\tRectangle bounds = image.getBounds ();", "+\t\t\t\t\t\t\t\t\t\tif (size == null) size = getImageSize ();", "+\t\t\t\t\t\t\t\t\t\t//int y = rect.top + (index == 0 ? (getItemHeight () - size.y) / 2 : 0);", "+\t\t\t\t\t\t\t\t\t\tint y = rect.top;", "+\t\t\t\t\t\t\t\t\t\tif (!ignoreDraw) {", "+\t\t\t\t\t\t\t\t\t\t\t//TODO - share GC, clip the drawing for index == 0", "+\t\t\t\t\t\t\t\t\t\t\tGCData data = new GCData();", "+\t\t\t\t\t\t\t\t\t\t\tdata.device = display;", "+\t\t\t\t\t\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "+\t\t\t\t\t\t\t\t\t\t\t//if (index == 0) { //must clear", "+\t\t\t\t\t\t\t\t\t\t\t\t//gc.setClipping (rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);", "+\t\t\t\t\t\t\t\t\t\t\t//}", "+\t\t\t\t\t\t\t\t\t\t\tgc.drawImage (image, 0, 0, bounds.width, bounds.height, rect.left, y, size.x, size.y);", "+\t\t\t\t\t\t\t\t\t\t\tgc.dispose ();", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tOS.SetRect (rect, rect.left + size.x + INSET, rect.top, rect.right - inset, rect.bottom);", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tOS.SetRect (rect, rect.left + INSET, rect.top, rect.right - inset, rect.bottom);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (drawText) {", "+\t\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t\t* Bug in Windows.  When DrawText() is used with DT_VCENTER", "+\t\t\t\t\t\t\t\t\t* and DT_ENDELLIPSIS, the ellipsis can draw outside of the", "+\t\t\t\t\t\t\t\t\t* rectangle when the rectangle is empty.  The fix is avoid", "+\t\t\t\t\t\t\t\t\t* all text drawing for empty rectangles.", "+\t\t\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\t\t\tif (rect.left < rect.right) {", "+\t\t\t\t\t\t\t\t\t\tString string = null;", "+\t\t\t\t\t\t\t\t\t\tif (index == 0) {", "+\t\t\t\t\t\t\t\t\t\t\tstring = item.text;", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tString [] strings  = item.strings;", "+\t\t\t\t\t\t\t\t\t\t\tif (strings != null) string = strings [index];", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tif (string != null) {", "+\t\t\t\t\t\t\t\t\t\t\thFont = hFont != -1 ? OS.SelectObject (hDC, hFont) : -1;", "+\t\t\t\t\t\t\t\t\t\t\tclrText = clrText != -1 ? OS.SetTextColor (hDC, clrText) : -1;", "+\t\t\t\t\t\t\t\t\t\t\tint flags = OS.DT_NOPREFIX | OS.DT_SINGLELINE | OS.DT_VCENTER;", "+\t\t\t\t\t\t\t\t\t\t\tif (index != 0) flags |= OS.DT_ENDELLIPSIS;", "+\t\t\t\t\t\t\t\t\t\t\tTreeColumn column = columns != null ? columns [index] : null;", "+\t\t\t\t\t\t\t\t\t\t\tif (column != null) {", "+\t\t\t\t\t\t\t\t\t\t\t\tif ((column.style & SWT.CENTER) != 0) flags |= OS.DT_CENTER;", "+\t\t\t\t\t\t\t\t\t\t\t\tif ((column.style & SWT.RIGHT) != 0) flags |= OS.DT_RIGHT;", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "+\t\t\t\t\t\t\t\t\t\t\tif (!ignoreDraw) OS.DrawText (hDC, buffer, buffer.length (), rect, flags);", "+\t\t\t\t\t\t\t\t\t\t\tOS.DrawText (hDC, buffer, buffer.length (), rect, flags | OS.DT_CALCRECT);", "+\t\t\t\t\t\t\t\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "+\t\t\t\t\t\t\t\t\t\t\tif (clrText != -1) OS.SetTextColor (hDC, clrText);", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (i > 0) {", "-\t\t\t\t\t\t\t\tImage image = null;", "-\t\t\t\t\t\t\t\tif (index == 0) {", "-\t\t\t\t\t\t\t\t\timage = item.image;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tImage [] images  = item.images;", "-\t\t\t\t\t\t\t\t\tif (images != null) image = images [index];", "-\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\tif (image != null) {", "-\t\t\t\t\t\t\t\t\tRectangle bounds = image.getBounds ();", "-\t\t\t\t\t\t\t\t\tif (size == null) size = getImageSize ();", "-\t\t\t\t\t\t\t\t\tgc.drawImage (image, 0, 0, bounds.width, bounds.height, rect.left, rect.top, size.x, size.y);", "-\t\t\t\t\t\t\t\t\tOS.SetRect (rect, rect.left + size.x + INSET, rect.top, rect.right - INSET, rect.bottom);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tOS.SetRect (rect, rect.left + INSET, rect.top, rect.right - INSET, rect.bottom);", "+\t\t\t\t\t\t\tif (hooks (SWT.PaintItem)) {", "+\t\t\t\t\t\t\t\tRECT itemRect = item.getBounds (index, true, true, false, false, false, hDC);", "+\t\t\t\t\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "+\t\t\t\t\t\t\t\tGCData data = new GCData ();", "+\t\t\t\t\t\t\t\tdata.device = display;", "+\t\t\t\t\t\t\t\tdata.hFont = hFont;", "+\t\t\t\t\t\t\t\tdata.foreground = clrText != -1 ? clrText : OS.GetTextColor (hDC);", "+\t\t\t\t\t\t\t\tdata.background = clrTextBk != -1 ? clrTextBk : OS.GetBkColor (hDC);", "+\t\t\t\t\t\t\t\tdata.hPen = OS.CreatePen (OS.PS_SOLID, 0, data.foreground);", "+\t\t\t\t\t\t\t\tdata.hBrush = OS.CreateSolidBrush (data.background);", "+\t\t\t\t\t\t\t\tOS.SelectObject (hDC, data.hPen);", "+\t\t\t\t\t\t\t\tOS.SelectObject (hDC, data.hBrush);", "+\t\t\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "+\t\t\t\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\t\t\t\tevent.item = item;", "+\t\t\t\t\t\t\t\tevent.index = index;", "+\t\t\t\t\t\t\t\tevent.gc = gc;", "+\t\t\t\t\t\t\t\tif (selected) event.detail |= SWT.SELECTED;", "+\t\t\t\t\t\t\t\tif ((nmcd.uItemState & OS.CDIS_FOCUS) != 0) event.detail |= SWT.FOCUSED;", "+\t\t\t\t\t\t\t\tevent.x = itemRect.left;", "+\t\t\t\t\t\t\t\tevent.y = itemRect.top;", "+\t\t\t\t\t\t\t\tevent.width = itemRect.right - itemRect.left;", "+\t\t\t\t\t\t\t\tevent.height = itemRect.bottom - itemRect.top;", "+\t\t\t\t\t\t\t\tRECT cellRect = item.getBounds (index, true, true, true, true, true, hDC);", "+\t\t\t\t\t\t\t\tint cellWidth = cellRect.right - cellRect.left;", "+\t\t\t\t\t\t\t\tif (hwndHeader != 0) {", "+\t\t\t\t\t\t\t\t\tint columnCount = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\t\t\t\tif (columnCount == 0) cellWidth = Math.max (cellWidth, scrollWidth);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t* Bug in Windows.  When DrawText() is used with DT_VCENTER", "-\t\t\t\t\t\t\t* and DT_ENDELLIPSIS, the ellipsis can draw outside of the", "-\t\t\t\t\t\t\t* rectangle when the rectangle is empty.  The fix is avoid", "-\t\t\t\t\t\t\t* all text drawing for empty rectangles.", "-\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\tif (rect.left < rect.right) {", "-\t\t\t\t\t\t\t\tString string = null;", "-\t\t\t\t\t\t\t\tif (index == 0) {", "-\t\t\t\t\t\t\t\t\tstring = item.text;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tString [] strings  = item.strings;", "-\t\t\t\t\t\t\t\t\tif (strings != null) string = strings [index];", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (string != null) {", "-\t\t\t\t\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [index] : -1;", "-\t\t\t\t\t\t\t\t\tif (hFont == -1) hFont = item.font;", "-\t\t\t\t\t\t\t\t\thFont = hFont != -1 ? OS.SelectObject (hDC, hFont) : -1;", "-\t\t\t\t\t\t\t\t\tint clrText = -1;", "-\t\t\t\t\t\t\t\t\tif (useColor) {", "-\t\t\t\t\t\t\t\t\t\tclrText = item.cellForeground != null ? item.cellForeground [index] : -1;", "-\t\t\t\t\t\t\t\t\t\tif (clrText == -1) clrText = item.foreground;", "-\t\t\t\t\t\t\t\t\t\tclrText = clrText != -1 ? OS.SetTextColor (hDC, clrText) : -1;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tint oldMode = clrTextBk != -1 ? OS.SetBkMode (hDC, OS.TRANSPARENT) : -1;", "-\t\t\t\t\t\t\t\t\tint flags = OS.DT_NOPREFIX | OS.DT_SINGLELINE | OS.DT_VCENTER;", "-\t\t\t\t\t\t\t\t\tif (i != 0) flags |= OS.DT_ENDELLIPSIS;", "-\t\t\t\t\t\t\t\t\tflags |= OS.DT_LEFT;", "-\t\t\t\t\t\t\t\t\tTreeColumn column = columns != null ? columns [index] : null;", "-\t\t\t\t\t\t\t\t\tif (column != null) {", "-\t\t\t\t\t\t\t\t\t\tif ((column.style & SWT.LEFT) != 0) flags |= OS.DT_LEFT;", "-\t\t\t\t\t\t\t\t\t\tif ((column.style & SWT.CENTER) != 0) flags |= OS.DT_CENTER;", "-\t\t\t\t\t\t\t\t\t\tif ((column.style & SWT.RIGHT) != 0) flags |= OS.DT_RIGHT;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "-\t\t\t\t\t\t\t\t\tOS.DrawText (hDC, buffer, buffer.length (), rect, flags);", "-\t\t\t\t\t\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "-\t\t\t\t\t\t\t\t\tif (clrText != -1) OS.SetTextColor (hDC, clrText);", "-\t\t\t\t\t\t\t\t\tif (oldMode != -1) OS.SetBkMode (hDC, oldMode);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tgc.setClipping (cellRect.left, cellRect.top, cellWidth, cellRect.bottom - cellRect.top);", "+\t\t\t\t\t\t\t\tsendEvent (SWT.PaintItem, event);", "+\t\t\t\t\t\t\t\tevent.gc = null;", "+\t\t\t\t\t\t\t\tgc.dispose ();", "+\t\t\t\t\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "+\t\t\t\t\t\t\t\tif (isDisposed () || item.isDisposed ()) break;", "+\t\t\t\t\t\tif (x > clientRect.right) break;", "-\t\t\t\t\tgc.dispose ();", "-\t\t\t\t\treturn new LRESULT (OS.CDRF_DODEFAULT);", "+\t\t\t\treturn new LRESULT (OS.CDRF_DODEFAULT);"]}], "num": 20082}
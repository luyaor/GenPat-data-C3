{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46886c9dfee94bea6479d6cd96ac201e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05d3919826957dde6374e544f7c64f70", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/Check64CompilationParticipant.java", "commitBeforeChange": "eec00175c85fc62816701fee36d553b89dc3e28d", "commitAfterChange": "707201eb4b42e8801cd1f93d4602857a1e480742", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void createProblems(IJavaProject project, String root) throws CoreException", "signatureAfterChange": "  void createProblems(IJavaProject project, String root) throws CoreException", "diff": ["-\t\tNodeList stats = doc.getDocumentElement().getElementsByTagName(\"stats\");", "-\t\tif (stats.getLength() > 0) {", "-\t\t\tNodeList summary = ((Element)stats.item(0)).getElementsByTagName(\"problem_summary\");", "-\t\t\tif (summary.getLength() > 0) {", "-\t\t\t\tString errors = ((Element)summary.item(0)).getAttribute(\"errors\");", "-\t\t\t\tif (Integer.parseInt(errors) > 0) {", "-\t\t\t\t\tNodeList sources = doc.getDocumentElement().getElementsByTagName(\"sources\");", "-\t\t\t\t\tfor (int i = 0; i < sources.getLength(); i++) {", "-\t\t\t\t\t\tNodeList src = ((Element)sources.item(i)).getElementsByTagName(\"source\");", "-\t\t\t\t\t\tfor (int j = 0; j < src.getLength(); j++) {", "-\t\t\t\t\t\t\tElement source = (Element)src.item(j);", "-\t\t\t\t\t\t\tString path = source.getAttribute(\"path\").replace('\\\\', '/');", "-\t\t\t\t\t\t\tpath = path.replaceAll(buildDir, \"/\");", "-\t\t\t\t\t\t\tif (path.startsWith(projPath)) {", "-\t\t\t\t\t\t\t\tpath = path.substring(projPath.length());", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tIResource resource = proj.findMember(new Path(path));", "-\t\t\t\t\t\t\tboolean hasProblems = false;", "-\t\t\t\t\t\t\tIMarker[] markers = resource.findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, true, IResource.DEPTH_INFINITE);", "-\t\t\t\t\t\t\tfor (int m = 0; m < markers.length; m++) {", "-\t\t\t\t\t\t\t\tIMarker marker = markers[m];", "-\t\t\t\t\t\t\t\tif (SOURCE_ID.equals(marker.getAttribute(IMarker.SOURCE_ID))) {", "-\t\t\t\t\t\t\t\t\tmarker.delete();", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tObject severity = marker.getAttribute(IMarker.SEVERITY);", "-\t\t\t\t\t\t\t\t\thasProblems |= severity != null && ((Integer)severity).intValue() == IMarker.SEVERITY_ERROR;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (!hasProblems) {", "-\t\t\t\t\t\t\t\tNodeList problems = source.getElementsByTagName(\"problems\");", "-\t\t\t\t\t\t\t\tfor (int k = 0; k < problems.getLength(); k++) {", "-\t\t\t\t\t\t\t\t\tNodeList problem = ((Element)problems.item(k)).getElementsByTagName(\"problem\");", "-\t\t\t\t\t\t\t\t\tfor (int l = 0; l < problem.getLength(); l++) {", "-\t\t\t\t\t\t\t\t\t\tElement node = (Element)problem.item(l);", "-\t\t\t\t\t\t\t\t\t\tif (resource != null) {", "-\t\t\t\t\t\t\t\t\t\t\tint start = Integer.parseInt(node.getAttribute(\"charStart\"));", "-\t\t\t\t\t\t\t\t\t\t\tint end = Integer.parseInt(node.getAttribute(\"charEnd\"));", "-\t\t\t\t\t\t\t\t\t\t\tString message = \"[64] \" + ((Element)node.getElementsByTagName(\"message\").item(0)).getAttribute(\"value\");", "-\t\t\t\t\t\t\t\t\t\t\tIMarker marker = resource.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);", "-\t\t\t\t\t\t\t\t\t\t\tint severity = IMarker.SEVERITY_ERROR;", "-\t\t\t\t\t\t\t\t\t\t\tmarker.setAttributes(", "-\t\t\t\t\t\t\t\t\t\t\t\tnew String[] {IMarker.MESSAGE, IMarker.SEVERITY, IMarker.CHAR_START, IMarker.CHAR_END, IMarker.SOURCE_ID},", "-\t\t\t\t\t\t\t\t\t\t\t\tnew Object[] {message, new Integer(severity), new Integer(start), new Integer(end), SOURCE_ID});", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "+\t\tNodeList sources = doc.getDocumentElement().getElementsByTagName(\"sources\");", "+\t\tfor (int i = 0; i < sources.getLength(); i++) {", "+\t\t\tNodeList src = ((Element)sources.item(i)).getElementsByTagName(\"source\");", "+\t\t\tfor (int j = 0; j < src.getLength(); j++) {", "+\t\t\t\tElement source = (Element)src.item(j);", "+\t\t\t\tString path = source.getAttribute(\"path\").replace('\\\\', '/');", "+\t\t\t\tpath = path.replaceAll(buildDir, \"/\");", "+\t\t\t\tif (path.startsWith(projPath)) {", "+\t\t\t\t\tpath = path.substring(projPath.length());", "+\t\t\t\t}", "+\t\t\t\tIResource resource = proj.findMember(new Path(path));", "+\t\t\t\tboolean hasProblems = false;", "+\t\t\t\tIMarker[] markers = resource.findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, true, IResource.DEPTH_INFINITE);", "+\t\t\t\tfor (int m = 0; m < markers.length; m++) {", "+\t\t\t\t\tIMarker marker = markers[m];", "+\t\t\t\t\tif (SOURCE_ID.equals(marker.getAttribute(IMarker.SOURCE_ID))) {", "+\t\t\t\t\t\tmarker.delete();", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tObject severity = marker.getAttribute(IMarker.SEVERITY);", "+\t\t\t\t\t\thasProblems |= severity != null && ((Integer)severity).intValue() == IMarker.SEVERITY_ERROR;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (!hasProblems) {", "+\t\t\t\t\tNodeList problems = source.getElementsByTagName(\"problems\");", "+\t\t\t\t\tfor (int k = 0; k < problems.getLength(); k++) {", "+\t\t\t\t\t\tNodeList problem = ((Element)problems.item(k)).getElementsByTagName(\"problem\");", "+\t\t\t\t\t\tfor (int l = 0; l < problem.getLength(); l++) {", "+\t\t\t\t\t\t\tElement node = (Element)problem.item(l);", "+\t\t\t\t\t\t\tif (resource != null) {", "+\t\t\t\t\t\t\t\tint start = Integer.parseInt(node.getAttribute(\"charStart\"));", "+\t\t\t\t\t\t\t\tint end = Integer.parseInt(node.getAttribute(\"charEnd\"));", "+\t\t\t\t\t\t\t\tString message = \"[64] \" + ((Element)node.getElementsByTagName(\"message\").item(0)).getAttribute(\"value\");", "+\t\t\t\t\t\t\t\tIMarker marker = resource.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);", "+\t\t\t\t\t\t\t\tint severity = IMarker.SEVERITY_ERROR;", "+\t\t\t\t\t\t\t\tmarker.setAttributes(", "+\t\t\t\t\t\t\t\t\tnew String[] {IMarker.MESSAGE, IMarker.SEVERITY, IMarker.CHAR_START, IMarker.CHAR_END, IMarker.SOURCE_ID},", "+\t\t\t\t\t\t\t\t\tnew Object[] {message, new Integer(severity), new Integer(start), new Integer(end), SOURCE_ID});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "861ad7f9baee7c352f2af6a797550474", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/Check64CompilationParticipant.java", "commitBeforeChange": "4d8daf0e3e81d301cc7e2c778b9beea2a5b1e9e7", "commitAfterChange": "eec00175c85fc62816701fee36d553b89dc3e28d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void createProblems(IJavaProject project, String root) throws CoreException", "signatureAfterChange": "  void createProblems(IJavaProject project, String root) throws CoreException", "diff": ["-\t\t\t\t\t\t\tNodeList problems = source.getElementsByTagName(\"problems\");", "-\t\t\t\t\t\t\tfor (int k = 0; k < problems.getLength(); k++) {", "-\t\t\t\t\t\t\t\tNodeList problem = ((Element)problems.item(k)).getElementsByTagName(\"problem\");", "-\t\t\t\t\t\t\t\tfor (int l = 0; l < problem.getLength(); l++) {", "-\t\t\t\t\t\t\t\t\tElement node = (Element)problem.item(l);", "-\t\t\t\t\t\t\t\t\tString path = source.getAttribute(\"path\").replace('\\\\', '/');", "-\t\t\t\t\t\t\t\t\tpath = path.replaceAll(buildDir, \"/\");", "-\t\t\t\t\t\t\t\t\tif (path.startsWith(projPath)) {", "-\t\t\t\t\t\t\t\t\t\tpath = path.substring(projPath.length());", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tIResource resource = proj.findMember(new Path(path));", "-\t\t\t\t\t\t\t\t\tif (resource != null) {", "-\t\t\t\t\t\t\t\t\t\tint start = Integer.parseInt(node.getAttribute(\"charStart\"));", "-\t\t\t\t\t\t\t\t\t\tint end = Integer.parseInt(node.getAttribute(\"charEnd\"));", "-\t\t\t\t\t\t\t\t\t\tString message = \"[64] \" + ((Element)node.getElementsByTagName(\"message\").item(0)).getAttribute(\"value\");", "-\t\t\t\t\t\t\t\t\t\tIMarker marker = resource.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);", "-\t\t\t\t\t\t\t\t\t\tint severity = IMarker.SEVERITY_ERROR;", "-\t\t\t\t\t\t\t\t\t\tmarker.setAttributes(", "-\t\t\t\t\t\t\t\t\t\t\tnew String[] {IMarker.MESSAGE, IMarker.SEVERITY, IMarker.CHAR_START, IMarker.CHAR_END, IMarker.SOURCE_ID},", "-\t\t\t\t\t\t\t\t\t\t\tnew Object[] {message, new Integer(severity), new Integer(start), new Integer(end), SOURCE_ID});", "+\t\t\t\t\t\t\tString path = source.getAttribute(\"path\").replace('\\\\', '/');", "+\t\t\t\t\t\t\tpath = path.replaceAll(buildDir, \"/\");", "+\t\t\t\t\t\t\tif (path.startsWith(projPath)) {", "+\t\t\t\t\t\t\t\tpath = path.substring(projPath.length());", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tIResource resource = proj.findMember(new Path(path));", "+\t\t\t\t\t\t\tboolean hasProblems = false;", "+\t\t\t\t\t\t\tIMarker[] markers = resource.findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, true, IResource.DEPTH_INFINITE);", "+\t\t\t\t\t\t\tfor (int m = 0; m < markers.length; m++) {", "+\t\t\t\t\t\t\t\tIMarker marker = markers[m];", "+\t\t\t\t\t\t\t\tif (SOURCE_ID.equals(marker.getAttribute(IMarker.SOURCE_ID))) {", "+\t\t\t\t\t\t\t\t\tmarker.delete();", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tObject severity = marker.getAttribute(IMarker.SEVERITY);", "+\t\t\t\t\t\t\t\t\thasProblems |= severity != null && ((Integer)severity).intValue() == IMarker.SEVERITY_ERROR;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (!hasProblems) {", "+\t\t\t\t\t\t\t\tNodeList problems = source.getElementsByTagName(\"problems\");", "+\t\t\t\t\t\t\t\tfor (int k = 0; k < problems.getLength(); k++) {", "+\t\t\t\t\t\t\t\t\tNodeList problem = ((Element)problems.item(k)).getElementsByTagName(\"problem\");", "+\t\t\t\t\t\t\t\t\tfor (int l = 0; l < problem.getLength(); l++) {", "+\t\t\t\t\t\t\t\t\t\tElement node = (Element)problem.item(l);", "+\t\t\t\t\t\t\t\t\t\tif (resource != null) {", "+\t\t\t\t\t\t\t\t\t\t\tint start = Integer.parseInt(node.getAttribute(\"charStart\"));", "+\t\t\t\t\t\t\t\t\t\t\tint end = Integer.parseInt(node.getAttribute(\"charEnd\"));", "+\t\t\t\t\t\t\t\t\t\t\tString message = \"[64] \" + ((Element)node.getElementsByTagName(\"message\").item(0)).getAttribute(\"value\");", "+\t\t\t\t\t\t\t\t\t\t\tIMarker marker = resource.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);", "+\t\t\t\t\t\t\t\t\t\t\tint severity = IMarker.SEVERITY_ERROR;", "+\t\t\t\t\t\t\t\t\t\t\tmarker.setAttributes(", "+\t\t\t\t\t\t\t\t\t\t\t\tnew String[] {IMarker.MESSAGE, IMarker.SEVERITY, IMarker.CHAR_START, IMarker.CHAR_END, IMarker.SOURCE_ID},", "+\t\t\t\t\t\t\t\t\t\t\t\tnew Object[] {message, new Integer(severity), new Integer(start), new Integer(end), SOURCE_ID});", "+\t\t\t\t\t\t\t\t\t\t}"]}], "num": 23314}
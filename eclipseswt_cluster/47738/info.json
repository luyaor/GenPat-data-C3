{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f01c7afe39cacd8f2b46913d87fcac1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cd344f23a50e3acaf3e6d0061a440fd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "16f7714e341fe5d5bf0773c0a0980725cc289841", "commitAfterChange": "949a243710db76895ae62e7e3836ee5ccd5921de", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": "  Control findControl(int handle)", "signatureAfterChange": "  Control findControl (int handle)", "diff": ["-Control findControl(int handle) {", "+Control findControl (int handle) {", "-\t/*", "-\t* This code is intentionally commented.  It is possible", "-\t* find the SWT control that is associated with a handle", "-\t* that belongs to another process when the handle was", "-\t* created by an in-proc OLE client.  In this case, the", "-\t* handle comes from another process, but it is a child", "-\t* of an SWT control.  For now, it is necessary to look", "-\t* at handles that do not belong to the SWT process.", "-\t*/", "-//\tint [] hwndProcessId = new int [1];", "-//\tOS.GetWindowThreadProcessId (handle, hwndProcessId);", "-//\tif (hwndProcessId [0] != processId) return null;", "-\t\tControl control = WidgetTable.get (handle);", "-\t\tif (control != null && control.handle == handle) {", "-\t\t\treturn control;", "-\t\t}", "+\t\tControl control = getControl (handle);", "+\t\tif (control != null) return control;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff046b934bbce1c71470a834e83127c8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "119cce23f4fb44ae76326935818a1edeb3fae4b2", "commitAfterChange": "74b793b002166dda9f23fc0b04891e4e6fe4e14b", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "diff": ["-\t\t\t\t* has a sibling that is currently on top.  The fix is to lock", "-\t\t\t\t* the z-order of the active window.", "+\t\t\t\t* has a sibling that is currently on top.  The fix is to", "+\t\t\t\t* lock the z-order of the active window.", "+\t\t\t\t* ", "+\t\t\t\t* Feature in Windows.  Using SetWindowPos() to with HWND_NOTOPMOST", "+\t\t\t\t* to clear the top most state of a window whose parent is already", "+\t\t\t\t* a top most clears the top most state of the parent.  The fix is", "+\t\t\t\t* to check if the parent is already on top and neither set or clear", "+\t\t\t\t* the top most status of the tool tip.", "+\t\t\t\tint hwndParent = 0;", "+\t\t\t\tdo {", "+\t\t\t\t\thwndParent = OS.GetParent (hdr.hwndFrom);", "+\t\t\t\t\tif (hwndParent == 0) break;", "+\t\t\t\t\tint style = OS.GetWindowLong (hwndParent, OS.GWL_EXSTYLE);", "+\t\t\t\t\tif ((style & OS.WS_EX_TOPMOST) != 0) break;", "+\t\t\t\t} while (true);", "+\t\t\t\tif (hwndParent != 0) break;"]}], "num": 47738}
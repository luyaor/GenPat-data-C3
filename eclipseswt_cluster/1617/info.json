{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b33660e4bde240b55e892e08832e727d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf9349b9b437e16a78f156d7fb160dd0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "bf5c8b81d42eec4571c559ba1d3088600b46768f", "commitAfterChange": "44efb8e7eb796293a09dff33329e54074288f821", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": " protected void init ()", "signatureAfterChange": " protected void init ()", "diff": ["+\twindowOwnDCClass = new TCHAR (0, WindowOwnDCName + WindowClassCount, true);", "+\tOS.RegisterClass (lpWndClass);", "+\tOS.HeapFree (hHeap, 0, lpWndClass.lpszClassName);", "+\t", "+\t/* Register the CS_OWNDC window class */", "+\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (5, 1)) {", "+\t\tlpWndClass.style |= OS.CS_OWNDC;", "+\t}", "+\tbyteCount = windowOwnDCClass.length () * TCHAR.sizeof;", "+\tlpWndClass.lpszClassName = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, byteCount);", "+\tOS.MoveMemory (lpWndClass.lpszClassName, windowOwnDCClass, byteCount);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34ffef5b15d4cd8da3299bf19ba94889", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/IME.java", "commitBeforeChange": "21ec52698e595c1519fe8cf59e52e9511e00131c", "commitAfterChange": "d1cfc073966d2df4835f012cb9c5cb74fbf2bbe2", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  LRESULT WM_KEYDOWN (long wParam, long lParam)", "signatureAfterChange": "  LRESULT WM_KEYDOWN (long wParam, long lParam)", "diff": ["-\t\t\t\tlong /*int*/ hHeap = OS.GetProcessHeap ();", "-\t\t\t\tint byteCount = buffer.length () * TCHAR.sizeof;", "-\t\t\t\tlong /*int*/ pszText = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, byteCount);", "-\t\t\t\tOS.MoveMemory (pszText, buffer, byteCount);", "-\t\t\t\tlong /*int*/ [] lpData = new long /*int*/ []{pszText};", "-\t\t\t\tlong /*int*/ rc = OS.ImmEscape(hKL, hIMC, OS.IME_ESC_HANJA_MODE, lpData); ", "-\t\t\t\tif (pszText != 0) OS.HeapFree (hHeap, 0, pszText);", "+\t\t\t\tlong /*int*/ rc = OS.ImmEscape(hKL, hIMC, OS.IME_ESC_HANJA_MODE, buffer); "]}], "num": 1617}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "74fc292af2cc221ffaf336e365602903", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f03c625fbf9f26311090042771b1708", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 344, "methodNumberAfterChange": 345, "signatureBeforeChange": " \tint get_isColumnSelected(int column, int pIsSelected)", "signatureAfterChange": " \tint get_isColumnSelected(int column, int pIsSelected)", "diff": ["+\t\tCOM.MoveMemory(pIsSelected, new int [] {event.isSelected ? 1 : 0}, 4);", "-\t\t// TODO: @retval E_INVALIDARG if bad [in] passed, [out] value is FALSE"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "726c11096d9d27f0c947b2b75a866c75", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 345, "methodNumberAfterChange": 346, "signatureBeforeChange": " \tint get_isRowSelected(int row, int pIsSelected)", "signatureAfterChange": " \tint get_isRowSelected(int row, int pIsSelected)", "diff": ["+\t\tCOM.MoveMemory(pIsSelected, new int [] {event.isSelected ? 1 : 0}, 4);", "-\t\t// TODO: @retval E_INVALIDARG if bad [in] passed, [out] value is FALSE"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4031c2df46727e081370f580fe28ea69", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "617caa16607996fc0c177bb61875b51fc5b46c90", "commitAfterChange": "730383938344c8db63a066870828ce1e9edbaeff", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["+\t\t\t\t\t/*", "+\t\t\t\t\t* Feature in Internet Explorer.  If the NewWindow2 event", "+\t\t\t\t\t* is not handled, Internet Explorer opens a new standalone", "+\t\t\t\t\t* instance, as documented in MSDN.  The workaround is to", "+\t\t\t\t\t* default to Cancel true before dispatching the WindowEvent ", "+\t\t\t\t\t* to the application since the application handler could", "+\t\t\t\t\t* throw an exception.", "+\t\t\t\t\t*/", "+\t\t\t\t\tVariant cancel = event.arguments[1];", "+\t\t\t\t\tint pCancel = cancel.getByRef();", "+\t\t\t\t\tCOM.MoveMemory(pCancel, new short[]{COM.VARIANT_TRUE}, 2);", "-\t\t\t\t\tVariant cancel = event.arguments[1];", "-\t\t\t\t\tint pCancel = cancel.getByRef();", "-\t\t\t}", "-\t\t\t", "+\t\t\t}\t\t\t"]}], "num": 36215}
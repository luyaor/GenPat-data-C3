{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d92c537bf87d37c596d26aab4bec24fb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4125eed05699795722987fb260ec3e5a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "5544ce1d748561f71c4f1d1997c431f82e5c4c86", "commitAfterChange": "24e0049851c0d0a09cb9f25e5892d112e2936fed", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 244, "signatureBeforeChange": " void redrawLines(int firstLine, int offsetInFirstLine, int lastLine, int endOffset, boolean clearBackground)", "signatureAfterChange": " void redrawLines(int firstLine, int offsetInFirstLine, int lastLine, int endOffset, boolean clearBackground)", "diff": ["-\tint redrawX = getXAtOffset(line, firstLine, offsetInFirstLine) - leftMargin;", "-\tint redrawStopX;", "-\tint redrawY = firstLine * lineHeight - verticalScrollOffset;", "+\tint redrawY, redrawWidth;", "-\tboolean fullLineRedraw = ((getStyle() & SWT.FULL_SELECTION) != 0 && lastLine > firstLine);", "-", "+\tboolean fullLineRedraw;", "+\tStyledTextEvent event;", "+\tRectangle clientArea = getClientArea();", "+\t", "+\tfullLineRedraw = ((getStyle() & SWT.FULL_SELECTION) != 0 && lastLine > firstLine);", "-\t}", "-\t// calculate redraw stop location", "-\tif (fullLineRedraw) {", "-\t\tredrawStopX = getClientArea().width - leftMargin;", "-\t}", "-\telse {", "-\t\tredrawStopX = getXAtOffset(line, firstLine, endOffset - firstLineOffset) - leftMargin;", "-\t}", "-\tdraw(redrawX, redrawY, redrawStopX - redrawX, lineHeight, clearBackground);", "+\t}\t", "+\tevent = renderer.getLineStyleData(firstLineOffset, line);", "+\tTextLayout layout = renderer.getTextLayout(line, firstLineOffset, event);", "+\tRectangle rect = layout.getBounds(offsetInFirstLine, Math.min(endOffset, line.length()) - 1);", "+\trenderer.disposeTextLayout(layout, event);", "+\trect.x -= horizontalScrollOffset;", "+\trect.intersect(clientArea);", "+\tredrawY = firstLine * lineHeight - verticalScrollOffset;", "+\tredrawWidth = fullLineRedraw ? clientArea.width - leftMargin - rightMargin : rect.width;", "+\tdraw(rect.x, redrawY, redrawWidth, lineHeight, clearBackground);", "+\t", "-\t\t\tif (fullLineRedraw) {", "-\t\t\t\tredrawStopX = getClientArea().width - leftMargin;", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tredrawStopX = getXAtOffset(line, lastLine, offsetInLastLine) - leftMargin;", "-\t\t\t}", "+\t\t\tline = content.getLine(lastLine);", "+\t\t\tevent = renderer.getLineStyleData(offsetInLastLine, line);", "+\t\t\tlayout = renderer.getTextLayout(line, endOffset, event);", "+\t\t\trect = layout.getBounds(0, offsetInLastLine - 1);", "+\t\t\trenderer.disposeTextLayout(layout, event);", "+\t\t\trect.x -= horizontalScrollOffset;", "+\t\t\trect.intersect(clientArea);", "-\t\t\tdraw(0, redrawY, redrawStopX, lineHeight, clearBackground);", "+\t\t\tredrawWidth = fullLineRedraw ? clientArea.width - leftMargin - rightMargin : rect.width;", "+\t\t\tdraw(rect.x, redrawY, redrawWidth, lineHeight, clearBackground);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "67e70e675c8d85ec2198db5239ac2c38", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 377, "methodNumberAfterChange": 234, "signatureBeforeChange": " void redrawLines(int firstLine, int offsetInFirstLine, int lastLine, int endOffset, boolean clearBackground)", "signatureAfterChange": " void redrawLines(int startLine, int lineCount)", "diff": ["- */", "-void redrawLines(int firstLine, int offsetInFirstLine, int lastLine, int endOffset, boolean clearBackground) {", "-\tString line = content.getLine(firstLine);", "-\tint lineCount = lastLine - firstLine + 1;", "-\tint redrawY, redrawWidth;", "-\tint lineOffset = content.getOffsetAtLine(firstLine);", "-\tboolean fullLineRedraw;", "-\tRectangle clientArea = getClientArea();", "-\t", "-\tfullLineRedraw = ((getStyle() & SWT.FULL_SELECTION) != 0 && lastLine > firstLine);", "-\t// if redraw range includes last character on the first line, ", "-\t// clear background to right widget border. fixes bug 19595.", "-\tif (clearBackground && endOffset - lineOffset >= line.length()) {", "-\t\tfullLineRedraw = true;", "-\t}\t", "-\tTextLayout layout = renderer.getTextLayout(line, lineOffset);", "-\tRectangle rect = layout.getBounds(offsetInFirstLine, Math.min(endOffset, line.length()) - 1);", "-\trenderer.disposeTextLayout(layout);", "-\trect.x -= horizontalScrollOffset;", "-\trect.intersect(clientArea);", "-\tredrawY = firstLine * lineHeight - verticalScrollOffset;", "-\tredrawWidth = fullLineRedraw ? clientArea.width - leftMargin - rightMargin : rect.width;", "-\tdraw(rect.x, redrawY, redrawWidth, lineHeight, clearBackground);", "-\t", "-\t// redraw last line if more than one line needs redrawing ", "-\tif (lineCount > 1) {", "-\t\tlineOffset = content.getOffsetAtLine(lastLine);", "-\t\tint offsetInLastLine = endOffset - lineOffset;\t", "-\t\t// no redraw necessary if redraw offset is 0", "-\t\tif (offsetInLastLine > 0) {", "-\t\t\tline = content.getLine(lastLine);", "-\t\t\t// if redraw range includes last character on the last line, ", "-\t\t\t// clear background to right widget border. fixes bug 19595.", "-\t\t\tif (clearBackground && offsetInLastLine >= line.length()) {", "-\t\t\t\tfullLineRedraw = true;", "-\t\t\t}", "-\t\t\tline = content.getLine(lastLine);", "-\t\t\tlayout = renderer.getTextLayout(line, lineOffset);", "-\t\t\trect = layout.getBounds(0, offsetInLastLine - 1);", "-\t\t\trenderer.disposeTextLayout(layout);", "-\t\t\trect.x -= horizontalScrollOffset;", "-\t\t\trect.intersect(clientArea);", "-\t\t\tredrawY = lastLine * lineHeight - verticalScrollOffset;", "-\t\t\tredrawWidth = fullLineRedraw ? clientArea.width - leftMargin - rightMargin : rect.width;", "-\t\t\tdraw(rect.x, redrawY, redrawWidth, lineHeight, clearBackground);", "-\t\t}", "+void redrawLines(int startLine, int lineCount) {", "+\t// do nothing if redraw range is completely invisible\t", "+\tint partialBottomIndex = getPartialBottomIndex();", "+\tif (startLine > partialBottomIndex || startLine + lineCount - 1 < topIndex) {", "+\t\treturn;", "-}", "+\t// only redraw visible lines", "+\tif (startLine < topIndex) {", "+\t\tlineCount -= topIndex - startLine;", "+\t\tstartLine = topIndex;", "+\tif (startLine + lineCount - 1 > partialBottomIndex) {", "+\t\tlineCount = partialBottomIndex - startLine + 1;", "+\tstartLine -= topIndex;", "+\tint redrawTop = getLinePixel(startLine);", "+\tint redrawBottom = getLinePixel(startLine + lineCount);", "+\tint redrawWidth = getClientArea().width - leftMargin - rightMargin; ", "+\tsuper.redraw(leftMargin, redrawTop, redrawWidth, redrawBottom - redrawTop, true);"]}], "num": 53169}
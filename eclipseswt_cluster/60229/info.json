{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "60b1835b229eef1e8c1834473dacd27e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca3e00812c8391549bef7c426d514bcc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "40cc64959d5119bf3b04b67587b8994ada23e8e0", "commitAfterChange": "02b99d3aa6b86917194c42b95e6fbca04ab77b6a", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": "  LRESULT wmCommandChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmCommandChild (int wParam, int lParam)", "diff": ["-\t\t\tstyle &= ~SWT.RIGHT_TO_LEFT;", "-\t\t\tstyle |= SWT.LEFT_TO_RIGHT;", "-\t\t\tfixAlignment ();", "-\t\t\tbreak;", "-\t\t\tstyle &= ~SWT.LEFT_TO_RIGHT;", "-\t\t\tstyle |= SWT.RIGHT_TO_LEFT;", "-\t\t\tfixAlignment ();", "+\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_EXSTYLE);", "+\t\t\tif ((bits & OS.WS_EX_RTLREADING) != 0) {", "+\t\t\t\tstyle &= ~SWT.LEFT_TO_RIGHT;", "+\t\t\t\tstyle |= SWT.RIGHT_TO_LEFT;", "+\t\t\t} else {", "+\t\t\t\tstyle &= ~SWT.RIGHT_TO_LEFT;", "+\t\t\t\tstyle |= SWT.LEFT_TO_RIGHT;", "+\t\t\t}", "+\t\t\tEvent event = new Event();", "+\t\t\tevent.doit = true;", "+\t\t\tsendEvent(SWT.OrientationChange, event);", "+\t\t\tif (!event.doit) {", "+\t\t\t\tif (code == OS.EN_ALIGN_LTR_EC) {", "+\t\t\t\t\tbits |= (OS.WS_EX_RTLREADING | OS.WS_EX_LEFTSCROLLBAR);", "+\t\t\t\t\tstyle &= ~SWT.LEFT_TO_RIGHT;", "+\t\t\t\t\tstyle |= SWT.RIGHT_TO_LEFT;", "+\t\t\t\t} else {", "+\t\t\t\t\tbits &= ~(OS.WS_EX_RTLREADING | OS.WS_EX_LEFTSCROLLBAR);", "+\t\t\t\t\tstyle &= ~SWT.RIGHT_TO_LEFT;", "+\t\t\t\t\tstyle |= SWT.LEFT_TO_RIGHT;", "+\t\t\t\t}\t", "+\t\t\t\tOS.SetWindowLong (handle, OS.GWL_EXSTYLE, bits);", "+\t\t\t}", "+\t\t\tfixAlignment();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cb00b6e262201590a4f81199394bbf8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d6a36d8b7f3dd367aff8479d4445ce8e13db19a6", "commitAfterChange": "156b3671e8f8498d491d682297aab9ef33479ff6", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 71, "signatureBeforeChange": "  void setPen(int newColor, int newWidth, int lineStyle, int capStyle, int joinStyle)", "signatureAfterChange": "  void setPen(int newColor, int newWidth, int lineStyle, int capStyle, int joinStyle, int[] dashes)", "diff": ["-void setPen(int newColor, int newWidth, int lineStyle, int capStyle, int joinStyle) {", "+void setPen(int newColor, int newWidth, int lineStyle, int capStyle, int joinStyle, int[] dashes) {", "-\t\tif (width <= 1 && newWidth > 1) {", "+\t\tif (width <= 1 && (newWidth > 1 || lineStyle == OS.PS_USERSTYLE)) {", "-\t\tOS.GetObject(hPen, size, logPen);", "+\t\tif (size <= EXTLOGPEN.sizeof) {", "+\t\t\tOS.GetObject(hPen, size, logPen);", "+\t\t} else {", "+\t\t\tint hHeap = OS.GetProcessHeap();", "+\t\t\tint ptr = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, size);", "+\t\t\tOS.GetObject(hPen, size, ptr);", "+\t\t\tOS.MoveMemory(logPen, ptr, EXTLOGPEN.sizeof);", "+\t\t\tOS.HeapFree(hHeap, 0, ptr);", "+\t\t}", "-\t\tif ((style & OS.PS_STYLE_MASK) != lineStyle) {", "+\t\tif ((style & OS.PS_STYLE_MASK) != lineStyle || (style & OS.PS_STYLE_MASK) == OS.PS_USERSTYLE) {", "+\tif ((style & OS.PS_STYLE_MASK) != OS.PS_USERSTYLE) dashes = null;", "-\t* Feature in Windows.  Windows XP does not honour the line style", "-\t* for pens wider than 1 pixel created with CreatePen().  The fix", "+\t* Feature in Windows.  Windows does not honour line styles other then", "+\t* PS_SOLID for pens wider than 1 pixel created with CreatePen().  The fix", "-\tif (!OS.IsWinCE && (extPen || width > 1)) {", "+\tif (!OS.IsWinCE && (extPen || width > 1 || (style & OS.PS_STYLE_MASK) == OS.PS_USERSTYLE)) {", "-\t\tnewPen = OS.ExtCreatePen (style | OS.PS_GEOMETRIC, width, logBrush, 0, null);", "+\t\tnewPen = OS.ExtCreatePen (style | OS.PS_GEOMETRIC, width, logBrush, dashes != null ? dashes.length : 0, dashes);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "222c9eea6acd2e92b89d87ffaf8a3036", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "9ff9d9222d7fdb61c93507f2b2ab53ff9e4332fb", "commitAfterChange": "f72c857e9c5ef7f08cd69b3c2eb92b3aafb02d91", "methodNumberBeforeChange": 298, "methodNumberAfterChange": 298, "signatureBeforeChange": " \tint get_locale(int pLocale)", "signatureAfterChange": " \tint get_locale(int pLocale)", "diff": ["-\t\t// TODO: just return current locale - maybe add AccessibleLocale later", "-\t\t// Note: need to return an IA2Locale struct: String language, String country, String variant", "-\t\t//COM.MoveMemory(pLocale, new int [] { locale }, 4);", "+\t\t/* Return the default locale for the JVM. */", "+\t\tLocale locale = Locale.getDefault();", "+\t\t", "+\t\tchar[] data = (locale.getLanguage()+\"\\0\").toCharArray();", "+\t\tint /*long*/ ptr = COM.SysAllocString(data);", "+\t\tCOM.MoveMemory(pLocale, new int /*long*/[] {ptr}, OS.PTR_SIZEOF);", "+", "+\t\tdata = (locale.getCountry()+\"\\0\").toCharArray();", "+\t\tptr = COM.SysAllocString(data);", "+\t\tCOM.MoveMemory(pLocale + OS.PTR_SIZEOF, new int /*long*/[] {ptr}, OS.PTR_SIZEOF);", "+", "+\t\tdata = (locale.getVariant()+\"\\0\").toCharArray();", "+\t\tptr = COM.SysAllocString(data);", "+\t\tCOM.MoveMemory(pLocale + 2 * OS.PTR_SIZEOF, new int /*long*/[] {ptr}, OS.PTR_SIZEOF);", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "016eca1d459cabeac138eecdcd34eaee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "b77986de05bab33a2fe06d4668b09aa4be644a68", "commitAfterChange": "f109ee6a8829d09be16619e7bb1f4c3554d04344", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": "  void printWidget (int hwnd, int hdc, GC gc)", "signatureAfterChange": "  void printWidget (int hwnd, int hdc, GC gc)", "diff": ["-\t\tint bits = OS.GetWindowLong (hwnd, OS.GWL_STYLE);", "+\t\tint bits1 = OS.GetWindowLong (hwnd, OS.GWL_STYLE);", "+\t\tint bits2 = OS.GetWindowLong (hwnd, OS.GWL_EXSTYLE);", "-\t\t\tif ((bits & OS.WS_VISIBLE) != 0) {", "+\t\t\tint flags = OS.SWP_NOSIZE | OS.SWP_NOZORDER | OS.SWP_NOACTIVATE | OS.SWP_DRAWFRAME;", "+\t\t\tif ((bits1 & OS.WS_VISIBLE) != 0) {", "-\t\t\tOS.SetWindowLong (hwnd, OS.GWL_STYLE, (bits & ~OS.WS_CHILD) | OS.WS_POPUP);", "-\t\t\tOS.SetParent (hwnd, 0);", "-\t\t\tint flags = OS.SWP_NOSIZE | OS.SWP_NOZORDER | OS.SWP_NOACTIVATE;", "-\t\t\tif ((bits & OS.WS_VISIBLE) != 0) {", "+\t\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\t\tOS.SetWindowLong (hwnd, OS.GWL_STYLE, (bits1 & ~OS.WS_CHILD) | OS.WS_POPUP);", "+\t\t\t\tOS.SetWindowLong (hwnd, OS.GWL_EXSTYLE, bits2 | OS.WS_EX_TOOLWINDOW);", "+\t\t\t}", "+\t\t\tOS.SetParent (hwnd, 0);", "+\t\t\tif ((bits1 & OS.WS_VISIBLE) != 0) {", "-\t\tif ((bits & OS.WS_VISIBLE) == 0) {", "+\t\tif ((bits1 & OS.WS_VISIBLE) == 0) {", "-\t\tif ((bits & OS.WS_VISIBLE) == 0) {", "+\t\tif ((bits1 & OS.WS_VISIBLE) == 0) {", "-\t\t\tif ((bits & OS.WS_VISIBLE) != 0) {", "+\t\t\tif ((bits1 & OS.WS_VISIBLE) != 0) {", "-\t\t\tOS.SetWindowLong (hwnd, OS.GWL_STYLE, bits);", "+\t\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\t\tOS.SetWindowLong (hwnd, OS.GWL_STYLE, bits1);", "+\t\t\t\tOS.SetWindowLong (hwnd, OS.GWL_EXSTYLE, bits2);", "+\t\t\t}", "-\t\t\tint flags = OS.SWP_NOSIZE | OS.SWP_NOACTIVATE;", "-\t\t\tSetWindowPos (hwnd, hwndInsertAfter, rect1.left, rect1.top, 0, 0, flags);", "-\t\t\tif ((bits & OS.WS_VISIBLE) != 0) {", "+\t\t\tint flags = OS.SWP_NOSIZE | OS.SWP_NOACTIVATE | OS.SWP_DRAWFRAME;", "+\t\t\tSetWindowPos (hwnd, hwndInsertAfter, rect1.left, rect1.top, rect1.right - rect1.left, rect1.bottom - rect1.top, flags);", "+\t\t\tif ((bits1 & OS.WS_VISIBLE) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b737277f0ae1a97ef759bba35cbe56f5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "a5f3d896a0552e8d2027982eeac1d90aabbd97bd", "commitAfterChange": "5f219674e4013ab0586c58bc3022c5cddb01115b", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  int eventProc (int event, int data)", "signatureAfterChange": "  int eventProc (int event, int data)", "diff": ["+\tboolean forward = false;", "+\tControl control = null;", "+\tint /*long*/ window = 0;", "+\t\tcase OS.GDK_ENTER_NOTIFY:", "+\t\tcase OS.GDK_LEAVE_NOTIFY:", "-\t\t\tControl control = null;", "-\t\t\tboolean forward = false;", "+\t\t\twindow = gdkEvent.window;", "-\t\t\tint /*long*/ window = gdkEvent.window;", "-\t\t\tif (control != null) {", "-\t\t\t\tif (window == 0) return 0;", "-\t\t\t\tif (forward) {", "-\t\t\t\t\tGdkEventButton gdkEventButton = new GdkEventButton ();", "-\t\t\t\t\tOS.memmove (gdkEventButton, event, GdkEventButton.sizeof);", "-\t\t\t\t\tint /*long*/ oldWindow = gdkEventButton.window;", "-\t\t\t\t\tdouble oldX = gdkEventButton.x, oldY = gdkEventButton.y;", "-\t\t\t\t\tint /*long*/ eventHandle = control.eventHandle ();", "-\t\t\t\t\tgdkEventButton.window = OS.GTK_WIDGET_WINDOW (eventHandle);", "-\t\t\t\t\tint [] origin_x = new int [1], origin_y = new int [1];", "-\t\t\t\t\tOS.gdk_window_get_origin (gdkEventButton.window, origin_x, origin_y);", "-\t\t\t\t\tgdkEventButton.x = gdkEventButton.x_root - origin_x [0];", "-\t\t\t\t\tgdkEventButton.y = gdkEventButton.y_root - origin_y [0];", "-\t\t\t\t\tOS.memmove (event, gdkEventButton, GdkEventButton.sizeof);", "-\t\t\t\t\tOS.gtk_main_do_event (event);", "-\t\t\t\t\tgdkEventButton.window = oldWindow;", "-\t\t\t\t\tgdkEventButton.x = oldX;", "-\t\t\t\t\tgdkEventButton.y = oldY;", "-\t\t\t\t\tOS.memmove (event, gdkEventButton, GdkEventButton.sizeof);", "+\t\t}", "+\t}", "+\tShell shell = null;", "+\tGdkEventButton gdkEventButton = null;", "+\tint /*long*/ oldWindow = 0;", "+\tdouble oldX = 0, oldY = 0;", "+\tif (control != null ) {", "+\t\tif (window == 0) return 0;", "+\t\tif (forward) {", "+\t\t\tswitch (gdkEvent.type) {", "+\t\t\t\tcase OS.GDK_ENTER_NOTIFY:", "+\t\t\t\tcase OS.GDK_LEAVE_NOTIFY:", "-\t\t\t\t}", "+\t\t\tgdkEventButton = new GdkEventButton ();", "+\t\t\tOS.memmove (gdkEventButton, event, GdkEventButton.sizeof);", "+\t\t\toldWindow = gdkEventButton.window;", "+\t\t\toldX = gdkEventButton.x;", "+\t\t\toldY = gdkEventButton.y;", "+\t\t\tint /*long*/ eventHandle = control.eventHandle ();", "+\t\t\tgdkEventButton.window = OS.GTK_WIDGET_WINDOW (eventHandle);", "+\t\t\tint [] origin_x = new int [1], origin_y = new int [1];", "+\t\t\tOS.gdk_window_get_origin (gdkEventButton.window, origin_x, origin_y);", "+\t\t\tgdkEventButton.x = gdkEventButton.x_root - origin_x [0];", "+\t\t\tgdkEventButton.y = gdkEventButton.y_root - origin_y [0];", "+\t\t\tOS.memmove (event, gdkEventButton, GdkEventButton.sizeof);", "+\t\t}", "+\t\tshell = control.getShell ();", "+\t\tif ((shell.style & SWT.ON_TOP) != 0) {", "+\t\t\tOS.gtk_grab_add (shell.shellHandle);", "+\tif (control != null ) {", "+\t\tif (shell != null && !shell.isDisposed () && (shell.style & SWT.ON_TOP) != 0) {", "+\t\t\tOS.gtk_grab_remove (shell.shellHandle);", "+\t\t}", "+\t\tif (forward) {", "+\t\t\tgdkEventButton.window = oldWindow;", "+\t\t\tgdkEventButton.x = oldX;", "+\t\t\tgdkEventButton.y = oldY;", "+\t\t\tOS.memmove (event, gdkEventButton, GdkEventButton.sizeof);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5dba114fe6820752a3205d62935f804", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "b0693a12063ab35c44f34d89fd60d2e89368a94f", "commitAfterChange": "e9fff9da841962ff350a910fb52f584e5996a4f4", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r public void setMenu (Menu menu)", "signatureAfterChange": "\r public void setMenu (Menu menu)", "diff": ["-\tinfo.fMask = OS.MIIM_ID;\r", "+\tinfo.fMask = OS.MIIM_DATA;\r", "-\t\tif (info.wID == id) break;\r", "+\t\tif (info.dwItemData == id) break;\r", "-\tif (info.wID != id) return;\r", "+\tif (info.dwItemData != id) return;\r", "-\tinfo.fMask = OS.MIIM_STATE | OS.MIIM_ID | OS.MIIM_TYPE;\r", "+\tinfo.fMask = OS.MIIM_STATE | OS.MIIM_ID | OS.MIIM_TYPE | OS.MIIM_DATA;\r", "-\t\tsuccess = OS.InsertMenu (hMenu, index, OS.MF_BYPOSITION, id, null); \r", "-\t\tif (success) success = OS.SetMenuItemInfo (hMenu, index, true, info);\r", "+\t\t/*\r", "+\t\t* Feature in WinCE.  InsertMenuItem is not available. SetMenuItemInfo\r", "+\t\t* cannot set the menu item state and submenu. The fix is to use InsertMenu\r", "+\t\t* to set those, and SetMenuItemInfo to set the application data field.\r", "+\t\t*/\r", "+\t\tint uIDNewItem = id;\r", "+\t\tint uFlags = OS.MF_BYPOSITION;\r", "+\t\tif (menu != null) {\r", "+\t\t\tuFlags |= OS.MF_POPUP;\r", "+\t\t\tuIDNewItem = menu.handle;\r", "+\t\t}\r", "+\t\tTCHAR lpNewItem = new TCHAR (0, \"\", true);\r", "+\t\tsuccess = OS.InsertMenu (hMenu, index, uFlags, uIDNewItem, lpNewItem);\r", "+\t\tif (success) {\r", "+\t\t\tinfo.fMask = OS.MIIM_DATA | OS.MIIM_TYPE;\r", "+\t\t\tsuccess = OS.SetMenuItemInfo (hMenu, index, true, info);\r", "+\t\t\tif ((info.fState & (OS.MFS_DISABLED | OS.MFS_GRAYED)) != 0) {\r", "+\t\t\t\tOS.EnableMenuItem (hMenu, index, OS.MF_BYPOSITION | OS.MF_GRAYED);\r", "+\t\t\t}\r", "+\t\t\tif ((info.fState & OS.MFS_CHECKED) != 0) {\r", "+\t\t\t\tOS.CheckMenuItem (hMenu, index, OS.MF_BYPOSITION | OS.MF_CHECKED);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t\r"]}], "num": 60229}
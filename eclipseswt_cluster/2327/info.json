{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a8a327938f1f40500eac910a4f26044b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "113ec2cbd56f9b29ec35c126feee6455", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "272967205f3824ec29456112026262c64ae69dfa", "commitAfterChange": "fc62fa389f9358a82d98c59fbeba910f7ca8c593", "methodNumberBeforeChange": 198, "methodNumberAfterChange": 196, "signatureBeforeChange": "  LRESULT WM_MOUSEMOVE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_MOUSEMOVE (int wParam, int lParam)", "diff": ["-\tint pos = OS.GetMessagePos ();", "-\tif (pos != display.lastMouse) {", "-\t\tif (!OS.IsWinCE) {", "-\t\t\tboolean mouseEnter = hooks (SWT.MouseEnter) || display.filters (SWT.MouseEnter);", "-\t\t\tboolean mouseExit = hooks (SWT.MouseExit) || display.filters (SWT.MouseExit);", "-\t\t\tboolean mouseHover = hooks (SWT.MouseHover) || display.filters (SWT.MouseHover);", "-\t\t\tif (mouseEnter || mouseExit || mouseHover) {", "-\t\t\t\tTRACKMOUSEEVENT lpEventTrack = new TRACKMOUSEEVENT ();", "-\t\t\t\tlpEventTrack.cbSize = TRACKMOUSEEVENT.sizeof;", "-\t\t\t\tlpEventTrack.dwFlags = OS.TME_QUERY;", "-\t\t\t\tlpEventTrack.hwndTrack = handle;", "-\t\t\t\tOS.TrackMouseEvent (lpEventTrack);", "-\t\t\t\tif (lpEventTrack.dwFlags == 0) {", "-\t\t\t\t\tlpEventTrack.dwFlags = OS.TME_LEAVE | OS.TME_HOVER;", "-\t\t\t\t\tlpEventTrack.hwndTrack = handle;", "-\t\t\t\t\tOS.TrackMouseEvent (lpEventTrack);", "-\t\t\t\t\tif (mouseEnter) {", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* Force all outstanding WM_MOUSELEAVE messages to be dispatched before", "-\t\t\t\t\t\t* issuing a mouse enter.  This causes mouse exit events to be processed", "-\t\t\t\t\t\t* before mouse enter events.  Note that WM_MOUSELEAVE is posted to the", "-\t\t\t\t\t\t* event queue by TrackMouseEvent().", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tMSG msg = new MSG ();", "-\t\t\t\t\t\tint flags = OS.PM_REMOVE | OS.PM_NOYIELD | OS.PM_QS_INPUT | OS.PM_QS_POSTMESSAGE;", "-\t\t\t\t\t\twhile (OS.PeekMessage (msg, 0, OS.WM_MOUSELEAVE, OS.WM_MOUSELEAVE, flags)) {", "-\t\t\t\t\t\t\tOS.TranslateMessage (msg);", "-\t\t\t\t\t\t\tOS.DispatchMessage (msg);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tsendMouseEvent (SWT.MouseEnter, 0, OS.WM_MOUSEMOVE, wParam, lParam);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tlpEventTrack.dwFlags = OS.TME_HOVER;", "-\t\t\t\t\tOS.TrackMouseEvent (lpEventTrack);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tdisplay.lastMouse = pos;", "-\t\tsendMouseEvent (SWT.MouseMove, 0, OS.WM_MOUSEMOVE, wParam, lParam);", "-\t}", "-\treturn null;", "+\treturn wmMouseMove (handle, wParam, lParam);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7c58864d5a9c98aeb834db02aad2fba", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "92de623497255f31dfd065b167609a2f1b4433a3", "commitAfterChange": "ee17ecd760368d125d237a5ec62ef10269720437", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["-\tfixedHandle = OS.gtk_fixed_new ();", "-\tif (fixedHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\tOS.gtk_fixed_set_has_window (fixedHandle, true);", "-\tint vadj = OS.gtk_adjustment_new(0, 0, 100, 1, 10, 10);", "-\tif (vadj == 0) error (SWT.ERROR_NO_HANDLES);", "-\tint hadj = OS.gtk_adjustment_new(0, 0, 100, 1, 10, 10);", "-\tif (hadj == 0) error (SWT.ERROR_NO_HANDLES);", "-\tscrolledHandle = OS.gtk_scrolled_window_new (hadj, vadj);", "+\tcreateScrolledHandle (parent.parentingHandle ());", "+}", "-\t", "-\t//??", "-\tint parentHandle = parent.parentingHandle ();", "-\tOS.gtk_container_add (parentHandle, fixedHandle);", "-\tOS.gtk_container_add (fixedHandle, scrolledHandle);", "-\t", "-\t/*", "-\t* Force the scrolledWindow to have a single child that is", "-\t* not scrolled automatically.  Calling gtk_container_add", "-\t* seems to add the child correctly but cause a warning.", "-\t*/", "-\t//NOT DONE -investigate turning warnings off", "-\tOS.GTK_BIN_SET_CHILD(scrolledHandle, handle);", "-\tOS.gtk_widget_set_parent(handle, scrolledHandle);", "-//\tOS.gtk_container_add (scrolledHandle, handle);", "-//\tOS.gtk_scrolled_window_add_with_viewport (scrolledHandle, handle);", "-\tOS.gtk_widget_show (fixedHandle);", "-\tOS.gtk_widget_show (scrolledHandle);", "-\tOS.gtk_widget_show (handle);", "-\t", "-\t//CHECK WITH IS THERE ALREADY THEN DON'T SET", "-\tif ((style & SWT.BORDER) != 0) {", "-\t\tOS.gtk_scrolled_window_set_shadow_type(scrolledHandle, OS.GTK_SHADOW_ETCHED_IN);", "-\t", "-\tint hsp = (style & SWT.H_SCROLL) == 0 ? OS.GTK_POLICY_NEVER : OS.GTK_POLICY_ALWAYS;", "-\tint vsp = (style & SWT.V_SCROLL) == 0 ? OS.GTK_POLICY_NEVER : OS.GTK_POLICY_ALWAYS;", "-\tOS.gtk_scrolled_window_set_policy (scrolledHandle, hsp, vsp);"]}], "num": 2327}
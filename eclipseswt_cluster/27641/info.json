{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb078e352914d9c133c7de53070223fe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2af4afbade0cf128fbc42610a5e53143", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 27, "signatureBeforeChange": " \t\t\t \tint handleItemCallback(int rowID, int colID, int item)", "signatureAfterChange": "  int itemDataProc (int browser, int id, int property, int itemData, int setValue)", "diff": ["+", "+int itemDataProc (int browser, int id, int property, int itemData, int setValue) {", "+\tint index = id - 1;", "+\tswitch (property) {", "+\t\tcase COLUMN_ID: {", "+\t\t\tString text = items [index];", "+\t\t\tchar [] buffer = new char [text.length ()];", "+\t\t\ttext.getChars (0, buffer.length, buffer, 0);", "+\t\t\tint ptr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\tif (ptr == 0) error (SWT.ERROR_CANNOT_SET_TEXT);", "+\t\t\tOS.SetDataBrowserItemDataText (itemData, ptr);", "+\t\t\tOS.CFRelease (ptr);", "+\t\t\tbreak;", "+\t\t}", "+\t}", "+\treturn OS.noErr;", "+}", "-\t\t\t", "-\tint handleItemCallback(int rowID, int colID, int item) {", "-\t\t", "-\t\tif (colID != COL_ID) {", "-\t\t\t//System.out.println(\"List.handleItemCallback: wrong column id: \" + colID);", "-\t\t\treturn OS.kNoErr;", "-\t\t}", "-\t\t\t", "-\t\tString s= get(rowID);", "-\t\tif (s == null) {", "-\t\t\tSystem.out.println(\"List.handleItemCallback: can't find row with id: \" + rowID);", "-\t\t\treturn -1;", "-\t\t}", "-\t\t\t", "-\t\tint sHandle= 0;", "-\t\ttry {", "-\t\t\tsHandle= OS.CFStringCreateWithCharacters(s);", "-\t\t\tOS.SetDataBrowserItemDataText(item, sHandle);", "-\t\t} finally {", "-\t\t\tif (sHandle != 0)", "-\t\t\t\tOS.CFRelease(sHandle);", "-\t\t}", "-\t\treturn OS.kNoErr;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78e279be61c4f5736d240d313ded1b2b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "26aa979781f0037710304353201abd8b6f8f299c", "commitAfterChange": "f19b0105ae672d2b363d1f662e3dcd851e30b426", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Image(Device device, Image srcImage, int flag)", "signatureAfterChange": " public Image(Device device, Image srcImage, int flag)", "diff": ["-\t\t\tint imageHandle = srcImage.handle;\r", "-\t\t\tif (imageHandle != 0) {\r", "-\t\t\t\timageHandle = OS.PiDuplicateImage (imageHandle, 0);\r", "-\t\t\t\tif (imageHandle == 0) SWT.error(SWT.ERROR_NO_HANDLES);\r", "+\t\t\tint srcHandle = srcImage.handle;\r", "+\t\t\tint newHandle = OS.PiDuplicateImage (srcHandle, 0);\r", "+\t\t\tif (newHandle == 0) SWT.error(SWT.ERROR_NO_HANDLES);\r", "+\t\t\tif (flag == SWT.IMAGE_COPY) {\r", "+\t\t\t\t/*\r", "+\t\t\t\t* Bug in Photon.  The image returned by PiDuplicateImage might\r", "+\t\t\t\t* have the same mask_bm/alpha as the original image.  The fix\r", "+\t\t\t\t* is to detect this case and copy mask_bm/alpha if necessary.\r", "+\t\t\t\t*/\r", "-\t\t\t\tif (flag == SWT.IMAGE_COPY) {\r", "-\t\t\t\t\t/*\r", "-\t\t\t\t\t * Bug in Photon - The image returned by PiDuplicateImage\r", "-\t\t\t\t\t * has the same mask_bm as the original image.\r", "-\t\t\t\t\t */\r", "-\t\t\t\t\tOS.memmove (phImage, imageHandle, PhImage_t.sizeof);\r", "-\t\t\t\t\tif (phImage.mask_bm != 0) {\r", "-\t\t\t\t\t\tint length = phImage.mask_bpl * phImage.size_h;\r", "-\t\t\t\t\t\tint ptr = OS.malloc (length);\r", "-\t\t\t\t\t\tOS.memmove(ptr, phImage.mask_bm, length);\r", "-\t\t\t\t\t\tphImage.mask_bm = ptr;\r", "-\t\t\t\t\t\tOS.memmove (imageHandle, phImage, PhImage_t.sizeof);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\t/*\r", "-\t\t\t\t\t * Bug in Photon - The image returned by PiDuplicateImage\r", "-\t\t\t\t\t * has the same alpha as the original image.\r", "-\t\t\t\t\t */\r", "-\t\t\t\t\tif (phImage.alpha != 0) {\r", "-\t\t\t\t\t\tPgAlpha_t alpha = new PgAlpha_t();\r", "-\t\t\t\t\t\tOS.memmove(alpha, phImage.alpha, PgAlpha_t.sizeof);\r", "-\t\t\t\t\t\tif (alpha.src_alpha_map_map != 0) {\r", "-\t\t\t\t\t\t\tint length = alpha.src_alpha_map_dim_w * alpha.src_alpha_map_dim_h;\r", "-\t\t\t\t\t\t\tint ptr = OS.malloc(length);\r", "-\t\t\t\t\t\t\tOS.memmove(ptr, alpha.src_alpha_map_map, length);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tint ptr = OS.malloc(PgAlpha_t.sizeof);\r", "-\t\t\t\t\t\tOS.memmove(ptr, alpha, PgAlpha_t.sizeof);\r", "-\t\t\t\t\t\tphImage.alpha = ptr;\r", "-\t\t\t\t\t\tOS.memmove (imageHandle, phImage, PhImage_t.sizeof);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\ttransparentPixel = srcImage.transparentPixel;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tOS.PhMakeGhostBitmap(imageHandle);\r", "-\t\t\t\t\tOS.memmove (phImage, imageHandle, PhImage_t.sizeof);\r", "-\t\t\t\t\tphImage.mask_bm = phImage.ghost_bitmap;\r", "-\t\t\t\t\tphImage.mask_bpl = phImage.ghost_bpl;\r", "-\t\t\t\t\tphImage.ghost_bitmap = 0;\r", "-\t\t\t\t\tphImage.ghost_bpl = 0;\r", "-\t\t\t\t\tphImage.alpha = 0;\r", "-\t\t\t\t\tOS.memmove (imageHandle, phImage, PhImage_t.sizeof);\r", "+\t\t\t\tOS.memmove (phImage, srcHandle, PhImage_t.sizeof);\r", "+\t\t\t\tPhImage_t newPhImage = new PhImage_t();\r", "+\t\t\t\tOS.memmove(newPhImage, newHandle, PhImage_t.sizeof);\r", "+\t\t\t\tif (newPhImage.mask_bm != 0 && phImage.mask_bm == newPhImage.mask_bm) {\r", "+\t\t\t\t\tint length = newPhImage.mask_bpl * newPhImage.size_h;\r", "+\t\t\t\t\tint ptr = OS.malloc(length);\r", "+\t\t\t\t\tOS.memmove(ptr, newPhImage.mask_bm, length);\r", "+\t\t\t\t\tnewPhImage.mask_bm = ptr;\r", "+\t\t\t\tif (newPhImage.alpha != 0 && phImage.alpha == newPhImage.alpha) {\r", "+\t\t\t\t\tPgAlpha_t alpha = new PgAlpha_t();\r", "+\t\t\t\t\tOS.memmove(alpha, phImage.alpha, PgAlpha_t.sizeof);\r", "+\t\t\t\t\tif (alpha.src_alpha_map_map != 0) {\r", "+\t\t\t\t\t\tint length = alpha.src_alpha_map_bpl * alpha.src_alpha_map_dim_h;\r", "+\t\t\t\t\t\tint ptr = OS.malloc(length);\r", "+\t\t\t\t\t\tOS.memmove(ptr, alpha.src_alpha_map_map, length);\r", "+\t\t\t\t\t\talpha.src_alpha_map_map = ptr;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tint ptr = OS.malloc(PgAlpha_t.sizeof);\r", "+\t\t\t\t\tOS.memmove(ptr, alpha, PgAlpha_t.sizeof);\r", "+\t\t\t\t\tnewPhImage.alpha = ptr;\r", "+\t\t\t\t}\r", "+\t\t\t\tOS.memmove(newHandle, newPhImage, PhImage_t.sizeof);\r", "+\t\t\t\ttransparentPixel = srcImage.transparentPixel;\r", "+\t\t\t} else {\r", "+\t\t\t\tPhImage_t phImage = new PhImage_t();\r", "+\t\t\t\tOS.PhMakeGhostBitmap(newHandle);\r", "+\t\t\t\tOS.memmove (phImage, newHandle, PhImage_t.sizeof);\r", "+\t\t\t\tphImage.mask_bm = phImage.ghost_bitmap;\r", "+\t\t\t\tphImage.mask_bpl = phImage.ghost_bpl;\r", "+\t\t\t\tphImage.ghost_bitmap = 0;\r", "+\t\t\t\tphImage.ghost_bpl = 0;\r", "+\t\t\t\tphImage.alpha = 0;\r", "+\t\t\t\tOS.memmove (newHandle, phImage, PhImage_t.sizeof);\r", "-\t\t\thandle = imageHandle;\r", "+\t\t\thandle = newHandle;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f8f8f25b5eb16f42a677e7971168784", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void add (String string, int index)", "signatureAfterChange": "  public void add (String string, int index)", "diff": ["- */", "-public void add (String string, int index) {", "-\tcheckWidget();", "-\tif (string == null) error (SWT.ERROR_NULL_ARGUMENT);", "-\tif (index == -1) error (SWT.ERROR_INVALID_RANGE);", "-\tint sHandle= 0;", "-\ttry {", "-\t\tsHandle= OS.CFStringCreateWithCharacters(string);", "-\t\tif (menuHandle != 0) {", "-\t\t\tif (OS.InsertMenuItemTextWithCFString(menuHandle, sHandle, (short)index, 0, fgCommandID++) != OS.kNoErr)", "-\t\t\t\terror (SWT.ERROR_ITEM_NOT_ADDED);", "-\t\t\tOS.SetControl32BitMaximum(handle, OS.CountMenuItems(menuHandle));\t", "-\t\t} else {", "-\t\t\tOS.HIComboBoxInsertTextItemAtIndex(handle, index, sHandle);", "-\t\t}", "-\t} finally {", "-\t\tif (sHandle != 0)", "-\t\t\tOS.CFRelease(sHandle);", "+", "+public void add (String string, int index) {", "+\tcheckWidget ();", "+\tif (string == null) error (SWT.ERROR_NULL_ARGUMENT);", "+\tint count = getItemCount ();", "+\tif (0 > index || index > count) error (SWT.ERROR_INVALID_RANGE);", "+\t", "+\tchar [] buffer = new char [string.length ()];", "+\tstring.getChars (0, buffer.length, buffer, 0);", "+\tint ptr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\tif (ptr == 0) error (SWT.ERROR_ITEM_NOT_ADDED);", "+\tint result;", "+\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\tresult = OS.InsertMenuItemTextWithCFString (menuHandle, ptr, (short)index, 0, 0);", "+\t} else {", "+\t\tresult = OS.HIComboBoxInsertTextItemAtIndex (handle, index, ptr);", "+\t}", "+\tOS.CFRelease (ptr);", "+\tif (result != OS.noErr) error (SWT.ERROR_ITEM_NOT_ADDED);", "+}"]}], "num": 27641}
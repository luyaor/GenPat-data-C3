{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b297d0978d33a01f4aa7b840108e6b9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7fd8e620c9b5c8271e4d2cac1fe95e2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "6b31c0eed18de0d04a1940c687302d2c80ed3928", "commitAfterChange": "35d4101635c3eba5225d3cfcce67f526f793f806", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  void initNative(String filename)", "signatureAfterChange": "  void initNative(String filename)", "diff": ["+\t\t\t", "+\t\t\tImageData data = getImageData();", "+\t\t\tint /*long*/ bitmapFormat = imageRep.bitmapFormat();", "+\t\t\tboolean alphaFirst = (bitmapFormat & OS.NSAlphaFirstBitmapFormat) != 0;", "+\t\t\t// If the alpha has only 0 or 255 (-1) for alpha values, compute the transparent pixel color instead", "+\t\t\t// of a continuous alpha range.", "+\t\t\tboolean hasTransparentPixel = true;", "+\t\t\tint transparentColor = -1;", "+\t\t\tint/*64*/ alphaOffset = 0;", "+\t\t\ttransparentScan: {", "+\t\t\t\tfor (int y = 0; y < height; y++) {", "+\t\t\t\t\tfor (int x = 0; x < width; x++) {", "+\t\t\t\t\t\tif (alphaData[alphaOffset] != 0 && alphaData[alphaOffset] != -1) {", "+\t\t\t\t\t\t\thasTransparentPixel = false;", "+\t\t\t\t\t\t\tbreak transparentScan;", "+\t\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tif (alphaData[alphaOffset] == 0) {", "+\t\t\t\t\t\t\ttransparentColor = data.getPixel(x, y);", "+\t\t\t\t\t\t\tif (alphaFirst) transparentColor >>= 8;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t", "+\t\t\t\t\t\talphaOffset += 1;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (hasTransparentPixel) this.transparentPixel = transparentColor;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03f3103beef3554e1c6905922b18e9e0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "a5d8bf4a11b89f56aac32b46dedff4139fb6f012", "commitAfterChange": "e5c0f149512ead935dccc62f02bd92225ca98187", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void createAlpha ()", "signatureAfterChange": "  void createAlpha ()", "diff": ["+\t\tint dataFormat = imageRep.bitmapFormat();", "+\t\tboolean alphaFirst = (dataFormat & OS.NSAlphaFirstBitmapFormat) != 0;", "+", "-\t\t\tfor (int i=0; i<dataSize; i+=4) {", "-\t\t\t\tint pixel = ((srcData[i+1] & 0xFF) << 16) | ((srcData[i+2] & 0xFF) << 8) | (srcData[i+3] & 0xFF);", "-\t\t\t\tsrcData[i] = (byte)(pixel == transparentPixel ? 0 : 0xFF); ", "+\t\t\tif (alphaFirst) {", "+\t\t\t\tfor (int i=0; i<dataSize; i+=4) {", "+\t\t\t\t\tint pixel = ((srcData[i+1] & 0xFF) << 16) | ((srcData[i+2] & 0xFF) << 8) | (srcData[i+3] & 0xFF);", "+\t\t\t\t\tsrcData[i] = (byte)(pixel == transparentPixel ? 0 : 0xFF); ", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tfor (int i=0; i<dataSize; i+=4) {", "+\t\t\t\t\tint pixel = ((srcData[i] & 0xFF) << 16) | ((srcData[i+1] & 0xFF) << 8) | (srcData[i+2] & 0xFF);", "+\t\t\t\t\tsrcData[i + 3] = (byte)(pixel == transparentPixel ? 0 : 0xFF); ", "+\t\t\t\t}\t\t\t\t", "+\t\t\tint startByte = alphaFirst ? 0 : 3;", "-\t\t\tfor (int i=0; i<dataSize; i+=4) {", "+\t\t\tfor (int i = startByte; i<dataSize; i+=4) {", "-\t\t\tint offset = 0, alphaOffset = 0;", "+\t\t\tint startByte = alphaFirst ? 0 : 3;", "+\t\t\tint offset = startByte, alphaOffset = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c425fee8becb08d3fb0c457db4e55707", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "756a00a38650dc664abac86d0eaf738e79c5bf67", "commitAfterChange": "419fbd51f297423e3c35f3288d228d758c69641e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void createMask ()", "signatureAfterChange": "  void createAlpha ()", "diff": ["-void createMask () {", "-\tif (transparentPixel == -1) return;", "+void createAlpha () {", "+\tif (transparentPixel == -1 && alpha == -1 && alphaData == null) return;", "-\tfor (int i=0; i<dataSize; i+=4) {", "-\t\tint pixel = ((srcData[i+1] & 0xFF) << 16) | ((srcData[i+2] & 0xFF) << 8) | (srcData[i+3] & 0xFF);", "-\t\tsrcData[i] = (byte)(pixel == transparentPixel ? 0 : 0xFF); ", "+\tif (transparentPixel != -1) {", "+\t\tfor (int i=0; i<dataSize; i+=4) {", "+\t\t\tint pixel = ((srcData[i+1] & 0xFF) << 16) | ((srcData[i+2] & 0xFF) << 8) | (srcData[i+3] & 0xFF);", "+\t\t\tsrcData[i] = (byte)(pixel == transparentPixel ? 0 : 0xFF); ", "+\t\t}", "+\t} else if (alpha != -1) {", "+\t\tbyte a = (byte)this.alpha;", "+\t\tfor (int i=0; i<dataSize; i+=4) {", "+\t\t\tsrcData[i] = a;\t\t\t\t", "+\t\t}", "+\t} else {", "+\t\tint width = OS.CGImageGetWidth(handle);", "+\t\tint offset = 0, alphaOffset = 0;", "+\t\tfor (int y = 0; y<height; y++) {", "+\t\t\tfor (int x = 0; x<width; x++) {", "+\t\t\t\tsrcData[offset] = alphaData[alphaOffset];", "+\t\t\t\toffset += 4;", "+\t\t\t\talphaOffset += 1;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1aaa78fb2f9eeec5174ad4047f9d0ae5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "5f543edb783691ac010cc1801defbf6238ace7aa", "commitAfterChange": "ffcd121fb7431ca67e0c96c3686d0eb26efd2568", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void createAlpha ()", "signatureAfterChange": "  void createAlpha ()", "diff": ["-\t\tint /*long*/ dataFormat = imageRep.bitmapFormat();", "-\t\tboolean alphaFirst = (dataFormat & OS.NSAlphaFirstBitmapFormat) != 0;", "-", "-\t\t\tif (alphaFirst) {", "-\t\t\t\tfor (int i=0; i<dataSize; i+=4) {", "-\t\t\t\t\tint pixel = ((srcData[i+1] & 0xFF) << 16) | ((srcData[i+2] & 0xFF) << 8) | (srcData[i+3] & 0xFF);", "-\t\t\t\t\tsrcData[i] = (byte)(pixel == transparentPixel ? 0 : 0xFF); ", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tfor (int i=0; i<dataSize; i+=4) {", "-\t\t\t\t\tint pixel = ((srcData[i] & 0xFF) << 16) | ((srcData[i+1] & 0xFF) << 8) | (srcData[i+2] & 0xFF);", "-\t\t\t\t\tsrcData[i + 3] = (byte)(pixel == transparentPixel ? 0 : 0xFF); ", "-\t\t\t\t}\t\t\t\t", "+\t\t\tfor (int i=0; i<dataSize; i+=4) {", "+\t\t\t\tint pixel = ((srcData[i+1] & 0xFF) << 16) | ((srcData[i+2] & 0xFF) << 8) | (srcData[i+3] & 0xFF);", "+\t\t\t\tsrcData[i] = (byte)(pixel == transparentPixel ? 0 : 0xFF); ", "-\t\t\tint startByte = alphaFirst ? 0 : 3;", "-\t\t\tfor (int i = startByte; i<dataSize; i+=4) {", "+\t\t\tfor (int i=0; i<dataSize; i+=4) {", "-\t\t\tint startByte = alphaFirst ? 0 : 3;", "-\t\t\tint offset = startByte, alphaOffset = 0;", "+\t\t\tint offset = 0, alphaOffset = 0;"]}], "num": 59628}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "62d82ebb4a4373c95fdf001d1b100b93", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5afe16963aa7ab96550196cd05c76dd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "2a875789af435de5c9c9375b1f8108fb292a5c76", "commitAfterChange": "70e9cf3abf86a3105f4bc5e21a46516d0ffc1539", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " int XExposure (int w, int client_data, int call_data, int continue_to_dispatch)", "signatureAfterChange": " int XExposure (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-\tif ((style & SWT.SEARCH) != 0 && !hasFocus () && OS.XmTextGetLastPosition (handle) == 0) {", "-\t\t/* ", "-\t\t* Feature in Motif. XmText fills its background during exposure ", "-\t\t* without respecting the damage clipping. This erases all previous", "-\t\t* paints. The fix is always to draw the entire content ignoring", "-\t\t* the damage.", "-\t\t*/", "-\t\tint [] argList = new int [] {", "-\t\t\tOS.XmNmarginWidth, 0,", "-\t\t\tOS.XmNmarginHeight, 0,", "-\t\t\tOS.XmNshadowThickness, 0,", "-\t\t\tOS.XmNhighlightThickness, 0,", "-\t\t\tOS.XmNwidth, 0,", "-\t\t\tOS.XmNheight, 0,", "-\t\t};", "-\t\tOS.XtGetValues (handle, argList, argList.length / 2);", "-\t\tint marginWidth = argList [1] + argList[5] + argList[7];", "-\t\tint marginHeight = argList [3] + argList[5] + argList[7];", "-\t\tRectangle rect = new Rectangle (marginWidth, marginHeight, argList [9] - 2 * marginWidth, argList [11] - 2 * marginHeight);", "-\t\tGCData data = new GCData ();", "-\t\tGC gc = GC.motif_new (this, data);", "-\t\tgc.setForeground (disabledColor);", "-\t\tgc.setClipping (rect);", "-\t\tgc.drawString (message, rect.x, rect.y, true);", "-\t\tgc.dispose ();", "+\tif ((style & SWT.SINGLE) != 0 && message.length () > 0) { ", "+\t\tif (!hasFocus () && OS.XmTextGetLastPosition (handle) == 0) {", "+\t\t\t/* ", "+\t\t\t* Feature in Motif. XmText fills its background during exposure ", "+\t\t\t* without respecting the damage clipping. This erases all previous", "+\t\t\t* paints. The fix is always to draw the entire content ignoring", "+\t\t\t* the damage.", "+\t\t\t*/", "+\t\t\tint [] argList = new int [] {", "+\t\t\t\tOS.XmNmarginWidth, 0,", "+\t\t\t\tOS.XmNmarginHeight, 0,", "+\t\t\t\tOS.XmNshadowThickness, 0,", "+\t\t\t\tOS.XmNhighlightThickness, 0,", "+\t\t\t\tOS.XmNwidth, 0,", "+\t\t\t\tOS.XmNheight, 0,", "+\t\t\t};", "+\t\t\tOS.XtGetValues (handle, argList, argList.length / 2);", "+\t\t\tint marginWidth = argList [1] + argList[5] + argList[7];", "+\t\t\tint marginHeight = argList [3] + argList[5] + argList[7];", "+\t\t\tRectangle rect = new Rectangle (marginWidth, marginHeight, argList [9] - 2 * marginWidth, argList [11] - 2 * marginHeight);", "+\t\t\tGCData data = new GCData ();", "+\t\t\tGC gc = GC.motif_new (this, data);", "+\t\t\tgc.setForeground (disabledColor);", "+\t\t\tgc.setClipping (rect);", "+\t\t\tgc.drawString (message, rect.x, rect.y, true);", "+\t\t\tgc.dispose ();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba1b159f0f10852d39b3523f4f53ca5b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "c38115ed045eb9104cfb6a81d8565801a23bc197", "commitAfterChange": "231c9b1c4c78553f2ee472392a330f6eccf9065c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\tif (wHint != SWT.DEFAULT) width = wHint + (border * 2);", "-\t\tif (hHint != SWT.DEFAULT) height = hHint + (border * 2);", "+\t\tif (wHint != SWT.DEFAULT) width = wHint + border * 2;", "+\t\tif (hHint != SWT.DEFAULT) height = hHint + border * 2;", "-\tint [] argList = {OS.XmNlabelType, 0};", "-\tOS.XtGetValues (handle, argList, argList.length / 2);", "-\tint labelType = argList [1];", "+\tint [] argList1 = {OS.XmNlabelType, 0};", "+\tOS.XtGetValues (handle, argList1, argList1.length / 2);", "+\tint labelType = argList1 [1];", "-\t\tint [] argList4 = {", "+\t\tint [] argList2 = {", "+\t\t\tOS.XmNmarginLeft, 0,    /* 9 */", "+\t\t\tOS.XmNmarginRight, 0,   /* 11 */", "-\t\tOS.XtGetValues (handle, argList4, argList4.length / 2);", "+\t\tOS.XtGetValues (handle, argList2, argList2.length / 2);", "-\t\t\tstring = display.wrapText (string, font, wHint - argList4 [7] * 2);", "+\t\t\tstring = display.wrapText (string, font, wHint - (argList2 [7] * 2) - argList2 [9] - argList2 [11]);", "-\t\tGC gc = new GC(this);", "-\t\tPoint extent = gc.textExtent(string);", "-\t\tgc.dispose();", "-\t\theight = extent.y + argList4 [1] + argList4 [3] + argList4 [5] * 2 + border * 2;", "+\t\tGC gc = new GC (this);", "+\t\tPoint extent = gc.textExtent (string);", "+\t\tgc.dispose ();", "+\t\theight = extent.y + argList2 [1] + argList2 [3] + (argList2 [5] * 2) + (border * 2);", "-\t\t\twidth += extent.x + 2 * argList4 [7];", "+\t\t\twidth += extent.x + (argList2 [7] * 2) + argList2 [9] + argList2 [11];", "-\tif (wHint != SWT.DEFAULT) width = wHint + (border * 2);", "-\tif (hHint != SWT.DEFAULT) height = hHint + (border * 2);", "+\tif (wHint != SWT.DEFAULT) {", "+\t\tint [] argList3 = {", "+\t\t\tOS.XmNmarginWidth, 0,  /* 1 */", "+\t\t\tOS.XmNmarginLeft, 0,   /* 3 */", "+\t\t\tOS.XmNmarginRight, 0,  /* 5 */", "+\t\t};", "+\t\tOS.XtGetValues (handle, argList3, argList3.length / 2);", "+\t\twidth = wHint + (border * 2) + (argList3 [1] * 2) + argList3 [3] + argList3 [5];", "+\t}", "+\tif (hHint != SWT.DEFAULT) {", "+\t\tint [] argList4 = {", "+\t\t\tOS.XmNmarginHeight, 0,  /* 1 */", "+\t\t\tOS.XmNmarginTop, 0,     /* 3 */", "+\t\t\tOS.XmNmarginBottom, 0,  /* 5 */", "+\t\t};", "+\t\tOS.XtGetValues (handle, argList4, argList4.length / 2);", "+\t\theight = hHint + (border * 2) + (argList4 [1] * 2) + argList4 [3] + argList4 [5];", "+\t}"]}], "num": 14284}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7baacc6f30b8f97a901b67e718e1eb1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e71d5e81939d348517979aec9b12edb6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "267efeba946291455291f7e37b5a9adb5c1006b4", "commitAfterChange": "20492b8023f4da8a65e4db2fb7cb69e8486d81b2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": " \t \tpublic int internal_kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \tpublic int internal_kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData)", "diff": ["+\t */", "+\tpublic int internal_kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData) {", "+\t\tif (axuielementref != 0) {", "+\t\t\tint code = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\t// TODO: error handling? May need to create the array?", "+\t\t\tint [] arrayRef = new int[1];", "+\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeNames, OS.typeCFMutableArrayRef, null, 4, null, arrayRef);", "+\t\t\tint stringArrayRef = arrayRef[0];", "+\t\t\tint length = OS.CFArrayGetCount(stringArrayRef);", "+\t\t\tString [] osAllAttributes = new String [length];", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tint stringRef = OS.CFArrayGetValueAtIndex(stringArrayRef, i);", "+\t\t\t\tosAllAttributes[i] = stringRefToString (stringRef);", "+\t\t\t}", "+\t\t\t/* Add our list of supported attributes to the array.", "+\t\t\t * Make sure each attribute name is not already in the array before appending.", "+\t\t\t */", "+\t\t\tfor (int i = 0; i < requiredAttributes.length; i++) {", "+\t\t\t\tif (!contains(osAllAttributes, requiredAttributes[i])) {", "+\t\t\t\t\tint stringRef = stringToStringRef(requiredAttributes[i]);", "+\t\t\t\t\tOS.CFArrayAppendValue(stringArrayRef, stringRef);", "+\t\t\t\t\tOS.CFRelease(stringRef);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (accessibleTextListeners.size() > 0) {", "+\t\t\t\tfor (int i = 0; i < textAttributes.length; i++) {", "+\t\t\t\t\tif (!contains(osAllAttributes, textAttributes[i])) {", "+\t\t\t\t\t\tint stringRef = stringToStringRef(textAttributes[i]);", "+\t\t\t\t\t\tOS.CFArrayAppendValue(stringArrayRef, stringRef);", "+\t\t\t\t\t\tOS.CFRelease(stringRef);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t\treturn OS.eventNotHandledErr;", "+\t}", "-\tpublic int internal_kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData) {", "-\t\tif (axuielementref != 0) {", "-\t\t\tint [] arrayRef = new int[1];", "-\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeNames, OS.typeCFMutableArrayRef, null, 4, null, arrayRef);", "-\t\t\tint stringArrayRef = arrayRef[0];", "-\t\t\t// TODO make sure each attribute name is not a dup before appending?", "-//\t\t\tint length = OS.CFArrayGetCount(stringArrayRef);", "-//\t\t\tString [] osAllAttributes = new String [length];", "-//\t\t\tfor (int i = 0; i < length; i++) {", "-//\t\t\t\tint stringRef = OS.CFArrayGetValueAtIndex(stringArrayRef, i);", "-//\t\t\t\tosAllAttributes[i] = stringRefToString (stringRef);", "-//\t\t\t}", "-\t\t\t/* Add our list of supported attributes to the array. */", "-\t\t\tfor (int i = 0; i < requiredAttributes.length; i++) {", "-\t\t\t\tint stringRef = stringToStringRef(requiredAttributes[i]);", "-\t\t\t\tOS.CFArrayAppendValue(stringArrayRef, stringRef);", "-\t\t\t\tOS.CFRelease(stringRef);", "-\t\t\t}", "-\t\t\tif (accessibleTextListeners.size() > 0) {", "-\t\t\t\tfor (int i = 0; i < textAttributes.length; i++) {", "-\t\t\t\t\tint stringRef = stringToStringRef(textAttributes[i]);", "-\t\t\t\t\tOS.CFArrayAppendValue(stringArrayRef, stringRef);", "-\t\t\t\t\tOS.CFRelease(stringRef);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn OS.noErr;", "-\t\t}", "-\t\treturn OS.eventNotHandledErr;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bc0203f4c420899100fd9bed5a9d486", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon2/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "636645cd71825a27e2f84e61e7bf769366dad642", "commitAfterChange": "1ddb2e7c3fc0d32ea2fcd254616fd28253c4cd77", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public void pack ()", "signatureAfterChange": "  public void pack ()", "diff": ["-\t//NOT DONE", "-\tOS.SetDataBrowserTableViewNamedColumnWidth (parent.handle, id, (short)60);", "+\tGC gc = new GC (parent);", "+\tint width = 0;", "+\tint index = parent.indexOf (this);", "+\tfor (int i=0; i<parent.itemCount; i++) {", "+\t\tTableItem item = parent.items [i];", "+\t\tImage image = item.getImage (index);", "+\t\tString text = item.getText (index);", "+\t\tint itemWidth = 0;", "+\t\tif (image != null) itemWidth = image.getBounds ().width + 2;", "+\t\tif (text != null && text.length () > 0) itemWidth += gc.stringExtent (text).x;", "+\t\twidth = Math.max (width, itemWidth);", "+\t}", "+\tgc.dispose ();", "+\twidth += EXTRA_WIDTH;", "+\tOS.SetDataBrowserTableViewNamedColumnWidth (parent.handle, id, (short) width);"]}], "num": 16675}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3c48bf1c6841fb8b0b4244fffc1b9833", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46d8a66946eb42ab0b7e70fc9f888225", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "efe87bcee29339df205151a2a1bc120bf82170e7", "commitAfterChange": "95c5bd5be9e5e4341c644ca11834dbb39f3c43f7", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "signatureAfterChange": "  void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "diff": ["+\t\t/*", "+\t\t* Feature in Windows.  AlphaBlend() alters the alpha", "+\t\t* channel if the destination is a 32 bit depth bitmap.", "+\t\t* The fix is to draw to a temporary 24 bit depth bitmap", "+\t\t* first and then draw the temporary bitmap.", "+\t\t*/", "+\t\tboolean fixAlpha = false;", "+\t\tint dstBitmap = OS.GetCurrentObject(handle, OS.OBJ_BITMAP);", "+\t\tif (dstBitmap != 0) {", "+\t\t\tBITMAP dstBM = new BITMAP();", "+\t\t\tOS.GetObject(dstBitmap, BITMAP.sizeof, dstBM);", "+\t\t\tfixAlpha = dstBM.bmPlanes * dstBM.bmBitsPixel == 32;", "+\t\t}", "+\t\tint dstDib = 0, oldDstBitmap = 0, dstHdc = handle, dstX = destX, dstY = destY;", "+\t\tif (fixAlpha) {", "+\t\t\tdstDib = Image.createDIB(destWidth, destHeight, 24);", "+\t\t\tif (dstDib == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\tdstHdc = OS.CreateCompatibleDC(handle);", "+\t\t\toldDstBitmap = OS.SelectObject(dstHdc, dstDib);", "+\t\t\tOS.BitBlt(dstHdc, 0, 0, destWidth, destHeight, handle, destX, destY, OS.SRCCOPY);", "+\t\t\tdstX = dstY = 0;", "+\t\t}", "-\t\t\tOS.AlphaBlend(handle, destX, destY, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, blend);", "+\t\t\tOS.AlphaBlend(dstHdc, dstX, dstY, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, blend);", "-\t\t\tOS.AlphaBlend(handle, destX, destY, destWidth, destHeight, memHdc, 0, 0, srcWidth, srcHeight, blend);", "+\t\t\tOS.AlphaBlend(dstHdc, dstX, dstY, destWidth, destHeight, memHdc, 0, 0, srcWidth, srcHeight, blend);", "+\t\tif (fixAlpha) {", "+\t\t\tOS.BitBlt(handle, destX, destY, destWidth, destHeight, dstHdc, 0, 0, OS.SRCCOPY);", "+\t\t\tOS.SelectObject(dstHdc, oldDstBitmap);", "+\t\t\tOS.DeleteDC(dstHdc);", "+\t\t\tOS.DeleteObject(dstDib);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "230a3f0a71559d8774a3715623d54165", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "1acd89a2d1e085725362a748b0102b8318356ef1", "commitAfterChange": "600117323003db9ea522ed0baf12ee909172c3dc", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "signatureAfterChange": "  void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "diff": ["-\t\t/*", "-\t\t* Feature in Windows.  AlphaBlend() alters the alpha", "-\t\t* channel if the destination is a 32 bit depth bitmap.", "-\t\t* The fix is to draw to a temporary 24 bit depth bitmap", "-\t\t* first and then draw the temporary bitmap.", "-\t\t*/", "-\t\tboolean fixAlpha = false;", "-\t\tint dstBitmap = OS.GetCurrentObject(handle, OS.OBJ_BITMAP);", "-\t\tif (dstBitmap != 0) {", "-\t\t\tBITMAP dstBM = new BITMAP();", "-\t\t\tOS.GetObject(dstBitmap, BITMAP.sizeof, dstBM);", "-\t\t\tfixAlpha = dstBM.bmPlanes * dstBM.bmBitsPixel == 32;", "-\t\t}", "-\t\tint dstDib = 0, oldDstBitmap = 0, dstHdc = handle, dstX = destX, dstY = destY;", "-\t\tif (fixAlpha) {", "-\t\t\tdstDib = Image.createDIB(destWidth, destHeight, 24);", "-\t\t\tif (dstDib == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\tdstHdc = OS.CreateCompatibleDC(handle);", "-\t\t\toldDstBitmap = OS.SelectObject(dstHdc, dstDib);", "-\t\t\tOS.BitBlt(dstHdc, 0, 0, destWidth, destHeight, handle, destX, destY, OS.SRCCOPY);", "-\t\t\tdstX = dstY = 0;", "-\t\t}", "-\t\t\tOS.AlphaBlend(dstHdc, dstX, dstY, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, blend);", "+\t\t\tOS.AlphaBlend(handle, destX, destY, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, blend);", "-\t\t\t\t\tsrcData[sp+0] = (byte)((srcData[sp+0] & 0xff) * alpha / 255);", "-\t\t\t\t\tsrcData[sp+1] = (byte)((srcData[sp+1] & 0xff) * alpha / 255);", "-\t\t\t\t\tsrcData[sp+2] = (byte)((srcData[sp+2] & 0xff) * alpha / 255);", "+\t\t\t\t\tint r = ((srcData[sp + 0] & 0xFF) * alpha) + 128;", "+\t\t\t\t\tr = (r + (r >> 8)) >> 8;", "+\t\t\t\t\tint g = ((srcData[sp + 1] & 0xFF) * alpha) + 128;", "+\t\t\t\t\tg = (g + (g >> 8)) >> 8;", "+\t\t\t\t\tint b = ((srcData[sp + 2] & 0xFF) * alpha) + 128;", "+\t\t\t\t\tb = (b + (b >> 8)) >> 8;\t\t\t\t\t\t\t\t", "+\t\t\t\t\tsrcData[sp+0] = (byte)r;", "+\t\t\t\t\tsrcData[sp+1] = (byte)g;", "+\t\t\t\t\tsrcData[sp+2] = (byte)b;", "-\t\t\tOS.AlphaBlend(dstHdc, dstX, dstY, destWidth, destHeight, memHdc, 0, 0, srcWidth, srcHeight, blend);", "+\t\t\tOS.AlphaBlend(handle, destX, destY, destWidth, destHeight, memHdc, 0, 0, srcWidth, srcHeight, blend);", "-\t\t}", "-\t\tif (fixAlpha) {", "-\t\t\tOS.BitBlt(handle, destX, destY, destWidth, destHeight, dstHdc, 0, 0, OS.SRCCOPY);", "-\t\t\tOS.SelectObject(dstHdc, oldDstBitmap);", "-\t\t\tOS.DeleteDC(dstHdc);", "-\t\t\tOS.DeleteObject(dstDib);"]}], "num": 35808}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "942127e3affc3cd67891e1f68dca6ee0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffd1b18a9ed6fcacbb8361c687992b4a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_List.java", "commitBeforeChange": "4bc5ce29e889582ae71a6cab9895f599711bc0a9", "commitAfterChange": "cb86533065e155575ec075cb5ddb6e1134454a7c", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  public void test_getSelection()", "signatureAfterChange": "  public void test_getSelection()", "diff": ["-\t\tassertEquals(\"case: \" + i, cases[i], list.getSelection());", "+\t\tassertSame(\"case: \" + i, cases[i], list.getSelection());", "-\tassertEquals(list.getSelection()[0], items[0]);", "-\tassertEquals(list.getSelection()[1], items[2]);", "+\tString[] selItems = new String[] {items[0], items[2]};", "+\tassertSame(list.getSelection(), selItems);", "-\tassertEquals(list.getSelection()[0], items[0]);", "-\tassertEquals(list.getSelection()[1], items[1]);", "-", "+\tselItems = new String[] {items[0], items[1]};", "+\tassertSame(list.getSelection(), selItems);", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a7179c77fe0e6148c9582a5594c47d6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolTip.java", "commitBeforeChange": "fcbb66f04dd875edcadf848a96398bb4540a2aba", "commitAfterChange": "a31d40d82e26eae8601bccbde843aa227b60f723", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 19, "signatureBeforeChange": "  public void setVisible (boolean visible)", "signatureAfterChange": " public void setVisible (boolean visible)", "diff": ["+ */", "-\t\tint hwndToolTip = (style & SWT.BALLOON) != 0 ? parent.balloonTipHandle () : parent.toolTipHandle ();", "+\t\tint hwndToolTip = hwndToolTip ();", "-\t\t\t//TODO - must be the current tool", "-\t\t\tif (OS.SendMessage (hwndToolTip, OS.TTM_GETCURRENTTOOL, 0, 0) == 0) {", "-\t\t\t\tOS.SendMessage (hwndToolTip, OS.TTM_TRACKACTIVATE, 0, lpti);", "-\t\t\t\tOS.SendMessage (hwndToolTip, OS.TTM_SETTITLE, 0, 0);", "-\t\t\t}", "+\t\t\t", "+\t\t\tint time = OS.SendMessage (hwndToolTip, OS.TTM_GETDELAYTIME, OS.TTDT_AUTOPOP, 0);", "+\t\t\tOS.SetTimer (hwndToolTip, TIMER_ID, time, 0);", "+\t\t\tOS.SendMessage (hwndToolTip, OS.TTM_POP, 0, 0);", "+\t\t\tOS.KillTimer (hwndToolTip, TIMER_ID);", "-\t\t\tif (OS.Shell_NotifyIcon (OS.NIM_MODIFY, iconData)) {", "-\t\t\t\tthis.visible = true;", "-\t\t\t}", "+\t\t\tthis.visible = OS.Shell_NotifyIcon (OS.NIM_MODIFY, iconData);", "-\t\t\tsendEvent (SWT.Hide);", "-\t\t\t//TODO - not done, hide the tray item", "+\t\t\t//TODO - hide the tray item"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95b32a45507fefb2fbb8f661a39f2cf0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "d60307042554a2ad80509163fd1d15e5566b488d", "commitAfterChange": "501cddef55d98c472a410dbb933c0adba1cf9644", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 117, "signatureBeforeChange": "  LRESULT WM_KEYDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_KEYDOWN (int wParam, int lParam)", "diff": ["-\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect1);", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 0, rect1);", "-\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect2);", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 0, rect2);", "-\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect1);", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 0, rect1);", "-\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect2);", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 0, rect2);", "-\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect);", "+\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 0, rect);", "+\t\t\t\t\t\t\tif (hooks (SWT.EraseItem) || hooks (SWT.PaintItem)) fItemRect = 0;", "-\t\t\t\t\t\t\tif (OS.IsWinCE) {", "-\t\t\t\t\t\t\t\tOS.InvalidateRect (handle, rect1, false);", "-\t\t\t\t\t\t\t\tOS.InvalidateRect (handle, rect2, false);", "-\t\t\t\t\t\t\t\tOS.UpdateWindow (handle);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tint flags = OS.RDW_UPDATENOW | OS.RDW_INVALIDATE;", "-\t\t\t\t\t\t\t\tOS.RedrawWindow (handle, rect1, 0, flags);", "-\t\t\t\t\t\t\t\tOS.RedrawWindow (handle, rect2, 0, flags);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tOS.InvalidateRect (handle, rect1, true);", "+\t\t\t\t\t\t\tOS.InvalidateRect (handle, rect2, true);", "+\t\t\t\t\t\t\tOS.UpdateWindow (handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac25602a2f0310f7de407dfc122e2cbd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "536a3067a0d520c981d7210614769b62674b0849", "commitAfterChange": "1839e6271defc2990d8b1fe9c3cca72d2e7f3199", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public void setContents(Object[] data, Transfer[] transferAgents)", "signatureAfterChange": "\r public void setContents(Object[] data, Transfer[] dataTypes)", "diff": ["-public void setContents(Object[] data, Transfer[] transferAgents){\r", "+public void setContents(Object[] data, Transfer[] dataTypes){\r", "-\tif (data == null) {\r", "-\t\tDND.error(SWT.ERROR_NOT_IMPLEMENTED);\r", "-\t}\r", "-\tif (transferAgents == null || data.length != transferAgents.length) {\r", "+\tif (data == null || dataTypes == null || data.length != dataTypes.length) {\r", "-\tfor (int i = 0; i < transferAgents.length; i++) {\r", "-\t\tString[] names = transferAgents[i].getTypeNames();\r", "+\tfor (int i = 0; i < dataTypes.length; i++) {\r", "+\t\tint[] ids = dataTypes[i].getTypeIds();\r", "+\t\tString[] names = dataTypes[i].getTypeNames();\r", "-\t\t\r", "-\t\t\tbyte[] bName = Converter.wcsToMbcs (null, names[j], false);\r", "-\t\t\ttransferData.type    = OS.XmInternAtom (xDisplay, bName, false);\r", "-\t\t\ttransferAgents[i].javaToNative(data[i], transferData);\r", "+\t\t\ttransferData.type = ids[j];\r", "+\t\t\tdataTypes[i].javaToNative(data[i], transferData);\r", "-\t\t\tif (transferData.result == 1 && transferData.format == 8){\r", "-\t\t\t\tbyte[] buffer = new byte[transferData.length];\r", "-\t\t\t\tOS.memmove(buffer, transferData.pValue, transferData.length);\r", "-\t\t\t\tstatus = OS.XmClipboardCopy(xDisplay, xWindow, item_id[0], bName, buffer, transferData.length, 0, null);\r", "+\t\t\tif (transferData.result == 1) {\r", "+\t\t\t\tif (transferData.format == 8){\r", "+\t\t\t\t\tbyte[] buffer = new byte[transferData.length];\r", "+\t\t\t\t\tOS.memmove(buffer, transferData.pValue, transferData.length);\r", "+\t\t\t\t\tbyte[] bName = Converter.wcsToMbcs(null, names[j], true);\r", "+\t\t\t\t\tstatus = OS.XmClipboardCopy(xDisplay, xWindow, item_id[0], bName, buffer, transferData.length, 0, null);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7848a185036cafd5dc4ad852d65b5445", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "13c9e3869b0e39928c07f59c6669533020de611a", "commitAfterChange": "5a18b227e248dbcd7e352f9c9d08f49d1696ab1c", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " boolean setItemSize()", "signatureAfterChange": " boolean setItemSize()", "diff": ["-\tint[] widths = new int[items.length];", "-\twidths = new int[items.length];", "+\tif (items.length == 0) return changed;", "+", "+\tint[] widths;", "-\tfor (int i = 0; i < items.length; i++) {", "-\t\twidths[i] = items[i].preferredWidth(gc, i == selectedIndex, false);", "-\t}\t", "-\tif (items.length > 0) {", "-\t\tint totalWidth = 0;", "-\t\tint tabAreaWidth = size.x - borderLeft - borderRight - 3;", "-\t\tif (showMin) tabAreaWidth -= BUTTON_SIZE;", "-\t\tif (showMax) tabAreaWidth -= BUTTON_SIZE;", "-\t\tif (topRightAlignment == SWT.RIGHT && topRight != null) {", "-\t\t\tPoint rightSize = topRight.computeSize(SWT.DEFAULT, SWT.DEFAULT, false);", "-\t\t\ttabAreaWidth -= rightSize.x + 3;", "+\tint tabAreaWidth = size.x - borderLeft - borderRight - 3;", "+\tif (showMin) tabAreaWidth -= BUTTON_SIZE;", "+\tif (showMax) tabAreaWidth -= BUTTON_SIZE;", "+\tif (topRightAlignment == SWT.RIGHT && topRight != null) {", "+\t\tPoint rightSize = topRight.computeSize(SWT.DEFAULT, SWT.DEFAULT, false);", "+\t\ttabAreaWidth -= rightSize.x + 3;", "+\t}", "+\tif (!simple) tabAreaWidth -= curveWidth - 2*curveIndent;", "+\ttabAreaWidth = Math.max(0, tabAreaWidth);", "+\t", "+\t// First, try the minimum tab size at full compression.", "+\tint minWidth = 0;", "+\tint[] minWidths = new int[items.length];\t", "+\tfor (int i = 0; i < minWidths.length; i++) {", "+\t\tminWidths[i] = items[i].preferredWidth(gc, i == selectedIndex, true);", "+\t\tminWidth += minWidths[i];", "+\t}", "+\tif (minWidth > tabAreaWidth) {", "+\t\t// full compression required and a chevron", "+\t\tshowChevron = items.length > 1;", "+\t\tif (showChevron) tabAreaWidth -= 3*BUTTON_SIZE/2;", "+\t\twidths = minWidths;", "+\t\tint index = selectedIndex != -1 ? selectedIndex : 0;", "+\t\tif (tabAreaWidth < widths[index]) {", "+\t\t\twidths[index] = Math.max(0, tabAreaWidth);", "-\t\tif (!simple) tabAreaWidth -= curveWidth - 2*curveIndent;", "-\t\ttabAreaWidth = Math.max(0, tabAreaWidth);", "-\t\tint count = items.length;", "-\t\tfor (int i = 0 ; i < count; i++) {", "-\t\t\ttotalWidth += widths[i];", "+\t} else {", "+\t\tint maxWidth = 0;", "+\t\tint[] maxWidths = new int[items.length];", "+\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\tmaxWidths[i] = items[i].preferredWidth(gc, i == selectedIndex, false);", "+\t\t\tmaxWidth += maxWidths[i];", "-\t\tif (totalWidth > tabAreaWidth) {", "-\t\t\t// try maximum compression size", "-\t\t\ttotalWidth = 0;", "-\t\t\tint[] minWidths = new int[items.length];", "-\t\t\tfor (int i = 0 ; i < count; i++) {", "-\t\t\t\tminWidths[i] = items[i].preferredWidth(gc, i == selectedIndex, true);", "-\t\t\t\ttotalWidth += minWidths[i];", "+\t\tif (maxWidth <= tabAreaWidth) {", "+\t\t\t// no compression required", "+\t\t\twidths = maxWidths;", "+\t\t} else {", "+\t\t\t// determine compression for each item", "+\t\t\tint extra = (tabAreaWidth - minWidth) / items.length;", "+\t\t\twhile (true) {", "+\t\t\t\tint large = 0, totalWidth = 0;", "+\t\t\t\tfor (int i = 0 ; i < items.length; i++) {", "+\t\t\t\t\tif (maxWidths[i] > minWidths[i] + extra) {", "+\t\t\t\t\t\ttotalWidth += minWidths[i] + extra;", "+\t\t\t\t\t\tlarge++;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\ttotalWidth += maxWidths[i];", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (totalWidth >= tabAreaWidth) {", "+\t\t\t\t\textra--;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tif (large == 0 || tabAreaWidth - totalWidth < large) break;", "+\t\t\t\textra++;", "-\t\t\tif (totalWidth > tabAreaWidth) {", "-\t\t\t\t//  maximum compression required and a chevron", "-\t\t\t\tshowChevron = items.length > 1;", "-\t\t\t\tif (showChevron) tabAreaWidth -= 3*BUTTON_SIZE/2;", "-\t\t\t\twidths = minWidths;", "-\t\t\t\tint index = selectedIndex != -1 ? selectedIndex : 0;", "-\t\t\t\tif (tabAreaWidth < widths[index]) {", "-\t\t\t\t\twidths[index] = Math.max(0, tabAreaWidth);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\t// determine compression for each item", "-\t\t\t\tint extra = (tabAreaWidth - totalWidth) / items.length;", "-\t\t\t\tint large = 0;", "-\t\t\t\twhile (true) {", "-\t\t\t\t\ttotalWidth = 0;", "-\t\t\t\t\tlarge = 0;", "-\t\t\t\t\tfor (int i = 0 ; i < count; i++) {", "-\t\t\t\t\t\tif (widths[i] > minWidths[i] + extra) {", "- \t\t\t\t\t\t\ttotalWidth += minWidths[i] + extra;", "-\t\t\t\t\t\t\tlarge++;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\ttotalWidth += widths[i];", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (totalWidth >= tabAreaWidth) {", "-\t\t\t\t\t\textra--;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (large == 0 ||tabAreaWidth - totalWidth < large) break;", "-\t\t\t\t\textra++;", "-\t\t\t\t}", "-\t\t\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\t\t\twidths[i] = Math.min(widths[i], minWidths[i] + extra);", "-\t\t\t\t}\t", "+\t\t\twidths = new int[items.length];", "+\t\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\t\twidths[i] = Math.min(maxWidths[i], minWidths[i] + extra);", "-\t", "+\tgc.dispose();", "+", "-\tgc.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fc3a41210c91f4af91d7a083ffa5679", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "0743a5dea24f50b9afa2e77a52dfe29c7b7243bd", "commitAfterChange": "cd78cc4a8b2e806160de2908244830099a48d3b9", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "  void initializeSystemColors ()", "signatureAfterChange": "  void initializeSystemColors ()", "diff": ["-\t\tOS.gtk_style_context_get_border_color (context, OS.GTK_STATE_FLAG_INSENSITIVE, rgba);", "-\t\tCOLOR_WIDGET_NORMAL_SHADOW = toGdkColor (rgba);", "-\t\tOS.gtk_style_context_get_background_color (context, OS.GTK_STATE_FLAG_INSENSITIVE, rgba);", "+\t\tOS.gtk_style_context_get_background_color (context, OS.GTK_STATE_FLAG_NORMAL, rgba);", "-\t\trgba.red = rgba.green = rgba.blue = 1;", "-\t\tCOLOR_WIDGET_HIGHLIGHT_SHADOW = toGdkColor (rgba);", "+\t\tCOLOR_WIDGET_NORMAL_SHADOW = toGdkColor (rgba, 0.7);", "+\t\tCOLOR_WIDGET_HIGHLIGHT_SHADOW = toGdkColor (rgba, 1.3);", "-\t\tCOLOR_TITLE_BACKGROUND_GRADIENT = toGdkColor (rgba, 0.66f, 1);", "+\t\tCOLOR_TITLE_BACKGROUND_GRADIENT = toGdkColor (rgba, 1.3);", "-\t\tCOLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT = toGdkColor (rgba, 1, 2f);", "+\t\tCOLOR_TITLE_INACTIVE_BACKGROUND_GRADIENT = toGdkColor (rgba, 1.3);"]}], "num": 1755}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "650142b4d7b58935aa60e4369950fa99", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db5392a018c59f993d3b9616148ae27d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextRenderer.java", "commitBeforeChange": "2a453289bd44f7a775eb792bac5c0306a39048d4", "commitAfterChange": "00044d960d22ae0ff107fa60b140159a76aa4f68", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " TextLayout getTextLayout(String line, int lineOffset, StyledTextEvent event)", "signatureAfterChange": " TextLayout getTextLayout(String line, int lineOffset)", "diff": ["-TextLayout getTextLayout(String line, int lineOffset, StyledTextEvent event) {", "-\tTextLayout layout = new TextLayout(device);", "+TextLayout getTextLayout(String line, int lineOffset) {", "+\tint lineIndex = getContent().getLineAtOffset(lineOffset);", "+\tTextLayout layout = createTextLayout(lineIndex);", "+\tStyledTextEvent event = getLineStyleData(lineOffset, line);", "+\tint lastOffset = 0;", "-\t\tint lastOffset = 0;", "-\t\t\t// do not create unnecessary style in the text layout (optimization only)", "-\t\t\t", "-\t\t\tif (lineOffset > style.start) {//style starts in a previous line", "+\t\t\tif (lineOffset > style.start) {", "-\t\t\t\tend = Math.min (length, style.length - lineOffset + style.start);//consider only length in the current line", "+\t\t\t\tend = Math.min (length, style.length - lineOffset + style.start);", "-\t\t\tif (lastOffset >= end) continue;//do not overlap style", "-\t\t\tTextStyle textStyle = null;", "-\t\t\tfor (int i = 0; i < styleIndex; i++) {", "-\t\t\t\tif (style.similarTo(styles[i])) {", "-\t\t\t\t\tif (styles[i].textStyle != null) {", "-\t\t\t\t\t\ttextStyle = styles[i].textStyle;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (textStyle == null) {", "-\t\t\t\tFont font = style.fontStyle == SWT.NORMAL ? regularFont : boldFont;", "-\t\t\t\ttextStyle = new TextStyle(device, font, style.foreground, style.background);", "-\t\t\t\tstyle.textStyle = textStyle;", "-\t\t\t}", "+\t\t\tif (lastOffset != start) {", "+\t\t\t\tlayout.setStyle(null, lastOffset, start - 1);\t\t\t\t", "+\t\t\t}\t", "+\t\t\tFont font = style.fontStyle == SWT.NORMAL ? regularFont : boldFont;", "+\t\t\tTextStyle textStyle = new TextStyle(font, style.foreground, style.background);", "+\tif (lastOffset != length) layout.setStyle(null, lastOffset, length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8caae7f52f319882fa16bd85b2aa16f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextRenderer.java", "commitBeforeChange": "5544ce1d748561f71c4f1d1997c431f82e5c4c86", "commitAfterChange": "24e0049851c0d0a09cb9f25e5892d112e2936fed", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 26, "signatureBeforeChange": " private StyleRange[] getFontStyleRanges(StyleRange[] styles, int lineOffset, int lineLength)", "signatureAfterChange": " TextLayout getTextLayout(String line, int lineOffset, StyledTextEvent event)", "diff": ["- */", "-private StyleRange[] getFontStyleRanges(StyleRange[] styles, int lineOffset, int lineLength) {", "-\tint count = 0;", "-\tStyleRange[] ranges = null;", "-\t", "-\tif (styles == null) {", "-\t\treturn null;", "-\t}", "-\t// figure out the number of ranges with font styles", "-\tfor (int i = 0; i < styles.length; i++) {", "-\t\tStyleRange style = styles[i];", "-\t\tif (style.start - lineOffset < lineLength) {", "-\t\t\tif (style.fontStyle == SWT.BOLD) {", "-\t\t\t\tcount++;", "-\t\t\t}", "-\t\t}", "-\t}", "-\t// get the style information", "-\tif (count > 0) {", "-\t\tranges = new StyleRange[count];", "-\t\tcount = 0;", "-\t\tfor (int i = 0; i < styles.length; i++) {", "-\t\t\tStyleRange style = styles[i];", "-\t\t\tint styleLineStart = style.start - lineOffset;", "-\t\t\tif (styleLineStart < lineLength) {\t\t\t", "-\t\t\t\tif (style.fontStyle == SWT.BOLD) {", "-\t\t\t\t\tStyleRange newStyle = new StyleRange();", "-\t\t\t\t\tnewStyle.start = Math.max(0, styleLineStart);", "-\t\t\t\t\tnewStyle.length = (Math.min(styleLineStart + style.length, lineLength)) - newStyle.start;", "-\t\t\t\t\tranges[count] = newStyle;", "-\t\t\t\t\tcount++;", "-\t\t\t\t}", "-\t\t\t}\t\t", "-\t\t}", "-\t}", "-\treturn ranges;", "+ */", "+TextLayout getTextLayout(String line, int lineOffset, StyledTextEvent event) {", "+\tTextLayout layout = new TextLayout(device);", "+\tlayout.setFont(regularFont);", "+\tlayout.setText(line);", "+\tlayout.setOrientation(getOrientation());", "+\tlayout.setTabs(new int[]{tabWidth});", "+\tint length = line.length();", "+\tStyleRange[] styles = event != null ? event.styles : null;", "+\tif (styles != null) {", "+\t\tint lastOffset = 0;", "+\t\tfor (int styleIndex = 0; styleIndex < styles.length; styleIndex++) {", "+\t\t\tStyleRange style = styles[styleIndex];", "+\t\t\t// do not create unnecessary style in the text layout (optimization only)", "+\t\t\tif (style.isUnstyled()) continue;", "+\t\t\t", "+\t\t\tint start, end; ", "+\t\t\tif (lineOffset > style.start) {//style starts in a previous line", "+\t\t\t\tstart = 0;", "+\t\t\t\tend = Math.min (length, style.length - lineOffset + style.start);//consider only length in the current line", "+\t\t\t} else {", "+\t\t\t\tstart = style.start - lineOffset;", "+\t\t\t\tend = Math.min(length, start + style.length);", "+\t\t\t}", "+\t\t\tif (start >= length) break;", "+\t\t\tif (lastOffset >= end) continue;//do not overlap style", "+\t\t\tTextStyle textStyle = null;", "+\t\t\tfor (int i = 0; i < styleIndex; i++) {", "+\t\t\t\tif (style.similarTo(styles[i])) {", "+\t\t\t\t\tif (styles[i].textStyle != null) {", "+\t\t\t\t\t\ttextStyle = styles[i].textStyle;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (textStyle == null) {", "+\t\t\t\tFont font = style.fontStyle == SWT.NORMAL ? regularFont : boldFont;", "+\t\t\t\ttextStyle = new TextStyle(device, font, style.foreground, style.background);", "+\t\t\t\tstyle.textStyle = textStyle;", "+\t\t\t}", "+\t\t\tlayout.setStyle(textStyle, start, end - 1);", "+\t\t\tlastOffset = end;", "+\t\t}", "+\t}", "+\treturn layout;", "+}"]}], "num": 44559}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e2c1693db3568f2451cd433cd446511f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "978aae69c6341d76492cc812cb1498bd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "b2a57ac5aeda1a37b1c7d7c906ff837c3c7313d8", "commitAfterChange": "f3828846066629968a44d377ba246bddf80a917b", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 57, "signatureBeforeChange": "\r \t\r \tint get_accRole(int varChild_vt, int varChild_reserved1, int varChild_lVal, int varChild_reserved2, int pvarRole)", "signatureAfterChange": "\r \t\r \tint get_accRole(int varChild_vt, int varChild_reserved1, int varChild_lVal, int varChild_reserved2, int pvarRole)", "diff": ["+\t\tif (iaccessible == null) return COM.CO_E_OBJNOTCONNECTED;\r", "+\t\tif (code == COM.E_INVALIDARG) code = COM.S_FALSE; // proxy doesn't know about app childID\r", "+\t\tif (accessibleControlListeners.size() == 0) return code;\r", "+\t\t\t\t/* Currently our checkbox tree is emulated using state mask images,\r", "+\t\t\t\t * so we need to specify 'checkbox' role for the items here. */\r", "+\r", "-\t\t\t\t/* Currently our checkbox tree is emulated using state mask images,\r", "-\t\t\t\t * so we need to specify 'checkbox' role for the items here. */\r", "-\t\t\t\tevent.childID = varChild_lVal - 1;\r", "-\t\t\t\t\r", "+\t\t\t\tevent.childID = varChild_lVal - 1;\r", "-\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f16e420acbdf1e9db17ffa362ed6e084", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "b2a57ac5aeda1a37b1c7d7c906ff837c3c7313d8", "commitAfterChange": "f3828846066629968a44d377ba246bddf80a917b", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 59, "signatureBeforeChange": "\r \t\r \tint get_accState(int varChild_vt, int varChild_reserved1, int varChild_lVal, int varChild_reserved2, int pvarState)", "signatureAfterChange": "\r \t\r \tint get_accState(int varChild_vt, int varChild_reserved1, int varChild_lVal, int varChild_reserved2, int pvarState)", "diff": ["+\t\tif (iaccessible == null) return COM.CO_E_OBJNOTCONNECTED;\r", "+\t\tif (code == COM.E_INVALIDARG) code = COM.S_FALSE; // proxy doesn't know about app childID\r", "+\t\tif (accessibleControlListeners.size() == 0) return code;\r", "-\t\t\t\t/* Tree item childIDs are pointers (not 1-based indices). */\r", "-\t\t\t\tevent.childID = varChild_lVal;\r", "-\t\t\t\t\r", "+\r", "+\t\t\t\t/* Tree item childIDs are pointers (not 1-based indices). */\r", "+\t\t\t\tevent.childID = varChild_lVal;\r", "+\r", "-\t\t\t\tevent.childID = varChild_lVal - 1;\r", "-\r", "+\t\t\t\tevent.childID = varChild_lVal - 1;\r", "-\r"]}], "num": 2049}
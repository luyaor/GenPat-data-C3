{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "051479b06c1afc8ab76eacb9ca50d6bb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db5c90d4eb27120b6409c13dcfb630c7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Scrollable.java", "commitBeforeChange": "975199eb17e2305f5a5a50372359ef7b029c885d", "commitAfterChange": "98511ddfa0741aecb7c1436efce4e1c12d427239", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  LRESULT wmNCPaint (int hwnd, int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNCPaint (int hwnd, int wParam, int lParam)", "diff": ["-\t\t\t\tRECT clientRect = new RECT ();", "-\t\t\t\tOS.GetClientRect (hwnd, clientRect);", "-\t\t\t\tOS.MapWindowPoints (hwnd, 0, clientRect, 2);", "+\t\t\t\tboolean hVisible = false, vVisible = false;", "+\t\t\t\tSCROLLBARINFO psbi = new SCROLLBARINFO ();", "+\t\t\t\tpsbi.cbSize = SCROLLBARINFO.sizeof;", "+\t\t\t\tif (OS.GetScrollBarInfo (hwnd, OS.OBJID_HSCROLL, psbi)) {", "+\t\t\t\t\thVisible = (psbi.rgstate [0] & OS.STATE_SYSTEM_INVISIBLE) == 0;", "+\t\t\t\t}", "+\t\t\t\tif (OS.GetScrollBarInfo (hwnd, OS.OBJID_VSCROLL, psbi)) {", "+\t\t\t\t\tvVisible = (psbi.rgstate [0] & OS.STATE_SYSTEM_INVISIBLE) == 0;", "+\t\t\t\t}", "-\t\t\t\tcornerRect.left = Math.max (0, clientRect.right - windowRect.left);", "-\t\t\t\tcornerRect.top = Math.max (0, clientRect.bottom - windowRect.top);", "-\t\t\t\tcornerRect.right = Math.max (cornerRect.left, windowRect.right - windowRect.left - trimRect.right);", "-\t\t\t\tcornerRect.bottom = Math.max (cornerRect.top, windowRect.bottom - windowRect.top - trimRect.bottom);", "+\t\t\t\tcornerRect.right = windowRect.right - windowRect.left - trimRect.right;", "+\t\t\t\tcornerRect.bottom = windowRect.bottom - windowRect.top - trimRect.bottom;", "+\t\t\t\tcornerRect.left = cornerRect.right - (hVisible ? OS.GetSystemMetrics (OS.SM_CXVSCROLL) : 0);", "+\t\t\t\tcornerRect.top = cornerRect.bottom - (vVisible ? OS.GetSystemMetrics (OS.SM_CYHSCROLL) : 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4eb568347b8ee6edd66c499ac6e6e402", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "b1cf5c7b98958d9bc4a0f5cb5e7060b6e5bd12f6", "commitAfterChange": "1072e463912879946238a4c960d6fefca78cac15", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t\t public Browser(Composite parent, int style)", "signatureAfterChange": " \t\t public Browser(Composite parent, int style)", "diff": ["-\tif (!isLinux) return;", "-\tbrowserCount++;", "-\tGTK.gtk_init_check(new int[1], null);", "-\tif (browserCount == 1) {", "-\t\tfinal Display display = getDisplay();", "-\t\tdisplay.asyncExec(new Runnable() {", "-\t\t\tpublic void run() {", "-\t\t\t\twhile (GTK.gtk_events_pending() != 0) {", "-\t\t\t\t\tGTK.gtk_main_iteration();", "-\t\t\t\t}", "-\t\t\t\tif (browserCount == 0) return;", "-\t\t\t\tdisplay.timerExec(25, this);\t\t", "-\t\t\t}", "-\t\t});", "-\t}", "-\tparent.getShell().setFocus();", "-\tgtkHandle = GTK.gtk_plug_new(embeddedHandle);", "-\tint[] result = new int[1];", "-\tif (browserCount == 1) {", "-\t\tString mozillaPath = GRE.mozillaPath;", "-\t\tif (mozillaPath == null) throw new SWTError(XPCOM.errorMsg(XPCOM.NS_ERROR_FAILURE));", "+\tif (!isLinux) {", "+\t\tdispose();", "+\t\tSWT.error(SWT.ERROR_NO_HANDLES);\t\t", "+\t}", "+\tint[] result = new int[1];", "+\tif (browserCount == 0) {", "+\t\ttry {", "+\t\t\tLibrary.loadLibrary(\"swt-gtk\"); //$NON-NLS-1$", "+\t\t\tLibrary.loadLibrary (\"swt-mozilla\"); //$NON-NLS-1$", "+\t\t} catch (UnsatisfiedLinkError e) {", "+\t\t\tdispose();", "+\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t}", "+\t\t", "+\t\tString mozillaPath = GRE.mozillaPath;", "+\t\tif (mozillaPath == null) {", "+\t\t\tdispose();", "+\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t}", "+\t\t", "-\t\tif (rc != XPCOM.NS_OK) throw new SWTError(XPCOM.errorMsg(rc));", "-\t\tlocalFile.Release(); ", "+\t\tlocalFile.Release();", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tlocProvider.Release();", "+\t\t\tlocProvider = null;", "+\t\t\tdispose();", "+\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t}", "+\tbrowserCount++;", "+\tif (browserCount == 1) {", "+\t\tGTK.gtk_init_check(new int[1], null);", "+\t\tfinal Display display = getDisplay();", "+\t\tdisplay.asyncExec(new Runnable() {", "+\t\t\tpublic void run() {", "+\t\t\t\twhile (GTK.gtk_events_pending() != 0) {", "+\t\t\t\t\tGTK.gtk_main_iteration();", "+\t\t\t\t}", "+\t\t\t\tif (browserCount == 0) return;", "+\t\t\t\tdisplay.timerExec(25, this);\t\t", "+\t\t\t}", "+\t\t});", "+\t}", "+\tparent.getShell().setFocus();", "+\tgtkHandle = GTK.gtk_plug_new(embeddedHandle);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55ae5760b1df0968b78e20a1dd08364b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/win32/org/eclipse/swt/browser/WebKit.java", "commitBeforeChange": "a8fb3e0fe0b510084044ae4796423e013afbba38", "commitAfterChange": "6fd13c51831eb0e5334b878140281ccff0223a1a", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\tif (!webkitRegistered) {", "+\tif (!LibraryLoaded) {", "-\t\tString errorString = \" [WebKit.dll could not be found/registered]\"; //$NON-NLS-1$\t\t\t\t", "-\t\tSWT.error (SWT.ERROR_NO_HANDLES, null, errorString);", "-\t\treturn;", "+\t\tSWT.error (SWT.ERROR_NO_HANDLES, null, LibraryLoadError == null ? null : \" [\" + LibraryLoadError + ']'); //$NON-NLS-1$", "-\tif (Device.DEBUG) {", "-\t\tSystem.out.println (\"WebKit...\");", "-\t}", "-\t", "+", "-\t\t", "-\t\t//custom callbacks for hasProperty, getProperty and callAsFunction", "+", "+\t\t/* custom callbacks for hasProperty, getProperty and callAsFunction */", "-\t\t", "+", "-\t\treturn;", "+\t\tbrowser.dispose ();", "+\t\terror (hr);", "-\tC.memmove (webViewData, new int /*long*/[] {webView.getAddress()}, C.PTR_SIZEOF);", "+\tC.memmove (webViewData, new int /*long*/[] {webView.getAddress ()}, C.PTR_SIZEOF);", "-\t\treturn;", "+\t\tbrowser.dispose ();", "+\t\terror (hr);", "-\thr = webView.initWithFrame (new RECT (), 100, 100);", "+\thr = webView.initWithFrame (new RECT (), 0, 0);", "-\t\treturn;", "+\t\tbrowser.dispose ();", "+\t\terror (hr);", "-\t\treturn;", "+\t\tbrowser.dispose ();", "+\t\terror (hr);", "-\t\treturn;", "+\t\tbrowser.dispose ();", "+\t\terror (hr);", "-\t", "-\tresult[0] = 0;", "-\twebFrameLoadDelegate = new WebFrameLoadDelegate ();", "+", "+\twebFrameLoadDelegate = new WebFrameLoadDelegate (browser);", "-\t\treturn;", "+\t\tbrowser.dispose ();", "+\t\terror (hr);", "-\twebFrameLoadDelegate.setBrowser (browser);", "-\t", "-\twebUIDelegate = new WebUIDelegate ();", "+\twebUIDelegate = new WebUIDelegate (browser);", "-\t\treturn;", "+\t\tbrowser.dispose ();", "+\t\terror (hr);", "-\twebUIDelegate.setBrowser (browser);", "-\twebResourceLoadDelegate = new WebResourceLoadDelegate ();", "+\twebResourceLoadDelegate = new WebResourceLoadDelegate (browser);", "-\t\treturn;", "+\t\tbrowser.dispose ();", "+\t\terror (hr);", "-\twebResourceLoadDelegate.setBrowser (browser);", "-\t", "-\twebDownloadDelegate = new WebDownloadDelegate ();", "+", "+\twebDownloadDelegate = new WebDownloadDelegate (browser);", "-\t\treturn;", "+\t\tbrowser.dispose ();", "+\t\terror (hr);", "-\twebDownloadDelegate.setBrowser (browser);", "-\t", "-\twebPolicyDelegate = new WebPolicyDelegate ();", "+", "+\twebPolicyDelegate = new WebPolicyDelegate (browser);", "-\t\treturn;", "+\t\tbrowser.dispose ();", "+\t\terror (hr);", "-\twebPolicyDelegate.setBrowser (browser);", "-\t", "+", "-\twebView.preferences (result);", "+\thr = webView.preferences (result);", "-\t\tpreferences.setJavaEnabled (0);\t//disable applets", "+\t\tpreferences.setJavaEnabled (0);\t/* disable applets */", "-\t", "+", "-\t\t\t\t\t//not required, browser.setVisible() takes care of this", "-\t\t\t\t\t//OS.ShowWindow (webViewWindowHandle, browser.getVisible () ? OS.SW_SHOW : OS.SW_HIDE); ", "-\t", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bd4908215aa85ff16bdf55742f1a1a2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/ControlExample.java", "commitBeforeChange": "c9b810c1536ad8f7aba1954c07c88beda01f74dc", "commitAfterChange": "6280582456173ac3d0cc9390487719209aaed8a2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \tvoid createMenus(final Shell shell)", "signatureAfterChange": "\r \tvoid createEventConsolePopup (final Text console)", "diff": ["-\tvoid createMenus(final Shell shell) {\r", "-\t\tshowEvents.setAccelerator(SWT.MOD1 + 'C');\r", "-\t\tshowEvents.setText (\"&Show Events\");\r", "+\t */\r", "+\tvoid createEventConsolePopup (final Text console) {\r", "+\t\tMenu popup = new Menu (console.getShell (), SWT.POP_UP);\r", "+\t\tconsole.setMenu (popup);\r", "+\r", "+\t\tMenuItem copy = new MenuItem (popup, SWT.PUSH);\r", "+\t\tcopy.setAccelerator(SWT.MOD1 + 'C');\r", "+\t\tcopy.setText (\"&Copy\\tCtrl+C\");\r", "+\t\tcopy.addListener (SWT.Selection, new Listener () {\r", "+\t\t\tpublic void handleEvent (Event event) {\r", "+\t\t\t\tconsole.copy ();\r", "+\t\t\t}\r", "+\t\t});\r", "+\t\tMenuItem selectAll = new MenuItem (popup, SWT.PUSH);\r", "+\t\tselectAll.setAccelerator(SWT.MOD1 + 'A');\r", "+\t\tselectAll.setText(\"Select &All\");\r", "+\t\tselectAll.addListener (SWT.Selection, new Listener () {\r", "+\t\t\tpublic void handleEvent (Event event) {\r", "+\t\t\t\tconsole.selectAll ();\r", "+\t\t\t}\r", "+\t\t});\r", "+\t\tMenuItem clear = new MenuItem (popup, SWT.PUSH);\r", "+\t\tclear.setText (\"C&lear\");\r", "+\t\tclear.addListener (SWT.Selection, new Listener () {\r", "+\t\t\tpublic void handleEvent (Event event) {\r", "+\t\t\t\tconsole.setText (\"\");\r"]}], "num": 42182}
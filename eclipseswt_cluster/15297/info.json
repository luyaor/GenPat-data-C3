{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2649a8ea5f58d2abd283e97b5df7cde5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f098d3d3a65c01f1a13886bc86204350", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "638c82a3eaa6b5eaaec9e7bf374f16b2cfb4ff44", "commitAfterChange": "771f4313cbb9bc8cd4bf8ca94a1af1469216a097", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \r LRESULT WM_KEYDOWN (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_KEYDOWN (int wParam, int lParam)", "diff": ["-\tif (OS.GetKeyState (OS.VK_LBUTTON) < 0) return result;\r", "-\tint stepSize = OS.GetKeyState (OS.VK_CONTROL) < 0 ? STEPSIZE_SMALL : STEPSIZE_LARGE;\r", "-\tint xChange = 0, yChange = 0;\r", "-\tif ((style & SWT.VERTICAL) != 0) {\r", "-\t\tswitch (wParam) {\r", "-\t\t\tcase OS.VK_LEFT:\r", "-\t\t\t\txChange = -stepSize;\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase OS.VK_RIGHT:\r", "-\t\t\t\txChange = stepSize;\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "-\t} else {\r", "-\t\tswitch (wParam) {\r", "-\t\t\tcase OS.VK_UP:\r", "-\t\t\t\tyChange = -stepSize;\r", "-\t\t\t\tbreak;\r", "-\t\t\tcase OS.VK_DOWN:\r", "-\t\t\t\tyChange = stepSize;\r", "-\t\t\t\tbreak;\r", "-\t\t}\r", "+\tswitch (wParam) {\r", "+\t\tcase OS.VK_LEFT:\r", "+\t\tcase OS.VK_RIGHT:\r", "+\t\tcase OS.VK_UP:\r", "+\t\tcase OS.VK_DOWN:\r", "+\t\t\t\r", "+\t\t\t/* Calculate the new x or y position */\r", "+\t\t\tif (OS.GetKeyState (OS.VK_LBUTTON) < 0) return result;\r", "+\t\t\tint step = OS.GetKeyState (OS.VK_CONTROL) < 0 ? INCREMENT : PAGE_INCREMENT;\r", "+\t\t\tPOINT pt = new POINT ();\r", "+\t\t\tif ((style & SWT.VERTICAL) != 0) {\r", "+\t\t\t\tif (wParam == OS.VK_UP || wParam == OS.VK_DOWN) break;\r", "+\t\t\t\tpt.x = wParam == OS.VK_LEFT ? -step : step;\r", "+\t\t\t} else {\r", "+\t\t\t\tif (wParam == OS.VK_LEFT || wParam == OS.VK_RIGHT) break;\r", "+\t\t\t\tpt.y = wParam == OS.VK_UP ? -step : step;\r", "+\t\t\t}\r", "+\t\t\tint hwndTrack = parent.handle;\r", "+\t\t\tOS.MapWindowPoints (handle, hwndTrack, pt, 1);\r", "+\t\t\tRECT rect = new RECT (), clientRect = new RECT ();\r", "+\t\t\tOS.GetWindowRect (handle, rect);\r", "+\t\t\tint width = rect.right - rect.left;\r", "+\t\t\tint height = rect.bottom - rect.top;\r", "+\t\t\tOS.GetClientRect (hwndTrack, clientRect);\r", "+\t\t\tint clientWidth = clientRect.right - clientRect.left;\r", "+\t\t\tint clientHeight = clientRect.bottom - clientRect.top;\r", "+\t\t\tint newX = lastX, newY = lastY;\r", "+\t\t\tif ((style & SWT.VERTICAL) != 0) {\r", "+\t\t\t\tnewX = Math.min (Math.max (0, pt.x - startX), clientWidth - width);\r", "+\t\t\t} else {\r", "+\t\t\t\tnewY = Math.min (Math.max (0, pt.y - startY), clientHeight - height);\r", "+\t\t\t}\r", "+\t\t\tif (newX == lastX && newY == lastY) return result;\r", "+\t\t\r", "+\t\t\t/* The event must be sent because doit flag is used */\r", "+\t\t\tEvent event = new Event ();\r", "+\t\t\tevent.x = newX;  event.y = newY;\r", "+\t\t\tevent.width = width;  event.height = height;\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* It is possible (but unlikely), that application\r", "+\t\t\t* code could have disposed the widget in the selection\r", "+\t\t\t* event.  If this happens, end the processing of the\r", "+\t\t\t* Windows message by returning zero as the result of\r", "+\t\t\t* the window proc.\r", "+\t\t\t*/\r", "+\t\t\tsendEvent (SWT.Selection, event);\r", "+\t\t\tif (isDisposed ()) return LRESULT.ZERO;\r", "+\t\t\treturn result;\r", "-\tif (xChange == 0 && yChange == 0) return result;\r", "-\t\r", "-\tPOINT pt = new POINT ();\r", "-\tpt.x = xChange;\r", "-\tpt.y = yChange;\r", "-\tint hwndTrack = parent.handle;\r", "-\tOS.MapWindowPoints (handle, hwndTrack, pt, 1);\r", "-\tRECT rect = new RECT (), clientRect = new RECT ();\r", "-\tOS.GetWindowRect (handle, rect);\r", "-\tint width = rect.right - rect.left;\r", "-\tint height = rect.bottom - rect.top;\r", "-\tOS.GetClientRect (hwndTrack, clientRect);\r", "-\tint clientWidth = clientRect.right - clientRect.left;\r", "-\tint clientHeight = clientRect.bottom - clientRect.top;\r", "-\tint newX = lastX, newY = lastY;\r", "-\tif ((style & SWT.VERTICAL) != 0) {\r", "-\t\tnewX = Math.min (Math.max (0, pt.x - startX), clientWidth - width);\r", "-\t} else {\r", "-\t\tnewY = Math.min (Math.max (0, pt.y - startY), clientHeight - height);\r", "-\t}\r", "-\tif (newX == lastX && newY == lastY) return result;\r", "-\r", "-\t/* The event must be sent because doit flag is used */\r", "-\tEvent event = new Event ();\r", "-\tevent.x = newX;  event.y = newY;\r", "-\tevent.width = width;  event.height = height;\r", "-\t\r", "-\t/*\r", "-\t* It is possible (but unlikely), that application\r", "-\t* code could have disposed the widget in the selection\r", "-\t* event.  If this happens, end the processing of the\r", "-\t* Windows message by returning zero as the result of\r", "-\t* the window proc.\r", "-\t*/\r", "-\tsendEvent (SWT.Selection, event);\r", "-\tif (isDisposed ()) return LRESULT.ZERO;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5da847d26d391eab7618bcac1d6695b8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 7, "signatureBeforeChange": " int processMouseMove (MacMouseEvent mmEvent)", "signatureAfterChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "diff": ["+int kEventMouseDown (int nextHandler, int theEvent, int userData) {", "+\tint result = super.kEventMouseDown (nextHandler, theEvent, userData);", "+\tif (result == OS.noErr) return result;", "+\tRect rect = new Rect ();", "+\tOS.GetControlBounds (handle, rect);", "+\tint startX = rect.left;", "+\tint startY = rect.top;\t\t\t", "+\tint width = rect.right - rect.left;", "+\tint height = rect.bottom - rect.top;", "+\tOS.GetControlBounds (parent.handle, rect);", "+\tevent.x = startX -= rect.left;", "+\tevent.y = startY -= rect.top;", "+\tevent.width = width;", "+\tevent.height = height;", "-}", "-int processMouseMove (MacMouseEvent mmEvent) {", "-\tsuper.processMouseMove (mmEvent);", "+\tupdate ();", "+\tif (!event.doit) return result;", "-\tgetDisplay().setCursor((style & SWT.VERTICAL) != 0 ? H_ARROW : V_ARROW);", "-", "-\tif (!dragging || (mmEvent.getButton() != 1)) return 0;", "-\tPoint mp= MacUtil.toControl(parent.handle, mmEvent.getWhere());", "-", "-\tMacRect bounds= new MacRect();", "-\tOS.GetControlBounds(handle, bounds.getData());", "-\tint width = bounds.getWidth(), height = bounds.getHeight();", "+\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "+\tOS.GetEventParameter (theEvent, OS.kEventParamMouseLocation, OS.typeQDPoint, null, pt.sizeof, null, pt);", "+\tint window = OS.GetControlOwner (handle);", "+\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\tint offsetX = pt.h - rect.left;", "+\tint offsetY = pt.v - rect.top;", "+\tOS.GetControlBounds (handle, rect);", "+\toffsetX -= rect.left;", "+\toffsetY -= rect.top;", "-\tMacRect parentBounds= new MacRect();", "-\tOS.GetControlBounds(parent.handle, parentBounds.getData());", "-", "-\tint x = bounds.getX()-parentBounds.getX(), y = bounds.getY()-parentBounds.getY();", "-", "-\tint newX = lastX, newY = lastY;", "-\tif ((style & SWT.VERTICAL) != 0) {", "-\t\tnewX = Math.min (Math.max (0, x + (mp.x - startX)), parentBounds.getWidth() - width);", "-\t} else {", "-\t\tnewY = Math.min (Math.max (0, y + (mp.y - startY)), parentBounds.getHeight() - height);", "-\t}", "-\tif (newX == lastX && newY == lastY) return 0;", "-\tdrawBand (lastX, lastY, width, height);", "-\tEvent event = new Event ();", "-\tevent.detail = SWT.DRAG;", "-\t//event.time = xEvent.time;", "-\tevent.x = newX;  event.y = newY;", "-\tevent.width = width;  event.height = height;", "-\tsendEvent (SWT.Selection, event);", "-\tif (event.doit) {", "-\t\tlastX = event.x;  lastY = event.y;", "-\t\tdrawBand (lastX, lastY, width, height);", "-\t}", "-\treturn 0;", "-}", "+\tint port = OS.GetWindowPort (window);", "+\tint [] outModifiers = new int [1];", "+\tshort [] outResult = new short [1];", "+\torg.eclipse.swt.internal.carbon.Point outPt = new org.eclipse.swt.internal.carbon.Point ();", "+\twhile (outResult [0] != OS.kMouseTrackingMouseUp) {", "+\t\tOS.TrackMouseLocationWithOptions (port, 0, OS.kEventDurationForever, outPt, outModifiers, outResult);", "+\t\tswitch (outResult [0]) {", "+\t\t\tcase OS.kMouseTrackingMouseDown:", "+\t\t\tcase OS.kMouseTrackingMouseUp:", "+\t\t\tcase OS.kMouseTrackingMouseDragged: {", "+\t\t\t\tOS.GetControlBounds (parent.handle, rect);", "+\t\t\t\tint x = outPt.h - rect.left;", "+\t\t\t\tint y = outPt.v - rect.top;\t\t\t\t", "+\t\t\t\tint newX = startX, newY = startY;", "+\t\t\t\tif ((style & SWT.VERTICAL) != 0) {", "+\t\t\t\t\tint clientWidth = rect.right - rect.left;", "+\t\t\t\t\tnewX = Math.min (Math.max (0, x - offsetX), clientWidth - width);", "+\t\t\t\t} else {", "+\t\t\t\t\tint clientHeight = rect.bottom - rect.top;", "+\t\t\t\t\tnewY = Math.min (Math.max (0, y - offsetY), clientHeight - height);", "+\t\t\t\t}", "+\t\t\t\tevent = new Event ();", "+\t\t\t\tevent.x = newX;", "+\t\t\t\tevent.y = newY;", "+\t\t\t\tevent.width = width;", "+\t\t\t\tevent.height = height;", "+\t\t\t\tevent.detail = 0; //outResult [0] == OS.kMouseTrackingMouseDragged ? SWT.DRAG : 0;", "+\t\t\t\tsendEvent (SWT.Selection, event);", "+\t\t\t\tif (event.doit) setBounds (newX, newY, width, height);", "+\t\t\t\tupdate ();", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tdefault:", "+\t\t\t\toutResult [0] = OS.kMouseTrackingMouseUp;", "+\t\t\t\tbreak;", "+\treturn result;"]}], "num": 15297}
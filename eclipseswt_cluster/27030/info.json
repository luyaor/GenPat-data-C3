{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "50f7906c1a22833e64cb456356fb5d71", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c027e8c76da044975ea81b1d54f5c52f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "f5295cccf26a3685d6db6f2b44784fab032f5cc8", "commitAfterChange": "0340debbaaefb8e5e03fed96b035767987fa3336", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 64, "signatureBeforeChange": " public Shell [] getShells ()", "signatureAfterChange": " public Shell [] getShells ()", "diff": ["-\t/*", "-\t* NOTE:  Need to check that the shells that belong", "-\t* to another display have not been disposed by the", "-\t* other display's thread as the shells list is being", "-\t* processed.", "-\t*/", "-\tint count = 0;", "-\tShell [] shells = WidgetTable.shells ();", "-\tfor (int i=0; i<shells.length; i++) {", "-\t\tShell shell = shells [i];", "-\t\tif (!shell.isDisposed () && this == shell.display) {", "-\t\t\tcount++;", "-\t\t}", "+\tint length = 0;", "+\tfor (int i=0; i<widgetTable.length; i++) {", "+\t\tWidget widget = widgetTable [i];", "+\t\tif (widget != null && widget instanceof Shell) length++;", "-\tif (count == shells.length) return shells;", "-\tShell [] result = new Shell [count];", "-\tfor (int i=0; i<shells.length; i++) {", "-\t\tShell shell = shells [i];", "-\t\tif (!shell.isDisposed () && this == shell.display) {", "-\t\t\tresult [index++] = shell;", "+\tShell [] result = new Shell [length];", "+\tfor (int i=0; i<widgetTable.length; i++) {", "+\t\tWidget widget = widgetTable [i];", "+\t\tif (widget != null && widget instanceof Shell) {", "+\t\t\tint j = 0;", "+\t\t\twhile (j < index) {", "+\t\t\t\tif (result [j] == widget) break;", "+\t\t\t\tj++;", "+\t\t\t}", "+\t\t\tif (j == index) result [index++] = (Shell) widget;", "-\treturn result;", "+\tif (index == length) return result;", "+\tShell [] newResult = new Shell [index];", "+\tSystem.arraycopy (result, 0, newResult, 0, index);", "+\treturn newResult;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9af172529f60aa3d6392de6ca4848fcb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "4edc576de20a88abac088ae701d29ce3e54ede4f", "commitAfterChange": "c2ec875b36ecf39df432358c14d183b7d7f45fe0", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " public Shell [] getShells ()", "signatureAfterChange": " public Shell [] getShells ()", "diff": ["-//\tint index = 0;", "-//\tShell [] result = new Shell [16];", "-//\tfor (int i = 0; i < widgetTable.length; i++) {", "-//\t\tWidget widget = widgetTable [i];", "-//\t\tif (widget != null && widget instanceof Shell) {", "-//\t\t\tint j = 0;", "-//\t\t\twhile (j < index) {", "-//\t\t\t\tif (result [j] == widget) break;", "-//\t\t\t\tj++;", "-//\t\t\t}", "-//\t\t\tif (j == index) {", "-//\t\t\t\tif (index == result.length) {", "-//\t\t\t\t\tShell [] newResult = new Shell [index + 16];", "-//\t\t\t\t\tSystem.arraycopy (result, 0, newResult, 0, index);", "-//\t\t\t\t\tresult = newResult;", "-//\t\t\t\t}", "-//\t\t\t\tresult [index++] = (Shell) widget;\t", "-//\t\t\t}", "-//\t\t}", "-//\t}", "-//\tif (index == result.length) return result;", "-//\tShell [] newResult = new Shell [index];", "-//\tSystem.arraycopy (result, 0, newResult, 0, index);", "-//\treturn newResult;", "-\treturn new Shell[0];", "+\tNSArray windows = application.windows();", "+\tint index = 0;", "+\tShell [] result = new Shell [windows.count()];", "+\tfor (int i = 0; i < result.length; i++) {", "+\t\tNSWindow window = new NSWindow(windows.objectAtIndex(i));", "+\t\tNSView view = window.contentView();", "+\t\tif (view != null) {", "+\t\t\tint jniRef = OS.objc_msgSend(view.id, OS.sel_tag);", "+\t\t\tif (jniRef != 0 && jniRef != -1) {", "+\t\t\t\tObject object = OS.JNIGetObject(jniRef);", "+\t\t\t\tif (object instanceof Shell) {", "+\t\t\t\t\tresult[index++] = (Shell)object;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (index == result.length) return result;", "+\tShell [] newResult = new Shell [index];", "+\tSystem.arraycopy (result, 0, newResult, 0, index);", "+\treturn newResult;"]}], "num": 27030}
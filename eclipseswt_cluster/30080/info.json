{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d0bea49015d5176fa0960ec8b00967ec", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "825754506209e4e82168faea4f7e3581", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "c23a8fe25782a54dc6944d627b11766379822cbd", "commitAfterChange": "0e1964e25bc1f5aeb873221ed7066a5aa3913616", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["-\t\t\t//\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid));", "-\t\t\t//\t\tif (ptr != 0) {", "-\t\t\t//\t\t\tint image = readImageRef (ptr);", "-\t\t\t//\t\t\tif (image != 0) {", "-\t\t\t//\t\t\t\tdockImage = image;", "-\t\t\t//\t\t\t\tOS.SetApplicationDockTileImage (dockImage);", "-\t\t\t//\t\t\t}", "-\t\t\t//\t\t}", "+//\t\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid));", "+//\t\t\tif (ptr != 0) {", "+//\t\t\t\tint image = readImageRef (ptr);", "+//\t\t\t\tif (image != 0) {", "+//\t\t\t\t\tdockImage = image;", "+//\t\t\t\t\tOS.SetApplicationDockTileImage (dockImage);", "+//\t\t\t\t}", "+//\t\t\t}", "-\t\tapplicationCallback2 = new Callback(this, \"applicationProc\", 2);", "-\t\tint /*long*/ proc2 = applicationCallback2.getAddress();", "-\t\tif (proc2 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\tapplicationCallback3 = new Callback(this, \"applicationProc\", 3);", "-\t\tint /*long*/ proc3 = applicationCallback3.getAddress();", "-\t\tif (proc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\tapplicationCallback6 = new Callback(this, \"applicationProc\", 6);", "-\t\tint /*long*/ proc6 = applicationCallback6.getAddress();", "-\t\tif (proc6 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\tint /*long*/ cls = OS.objc_allocateClassPair(OS.class_NSApplication, className, 0);", "-\t\tOS.class_addMethod(cls, OS.sel_sendEvent_, proc3, \"@:@\");", "-\t\tOS.class_addMethod(cls, OS.sel_nextEventMatchingMask_untilDate_inMode_dequeue_, proc6, \"@:i@@B\");", "-\t\tOS.class_addMethod(cls, OS.sel_isRunning, proc2, \"@:\");", "-\t\tOS.objc_registerClassPair(cls);", "+\t\tint /*long*/ cls;", "+\t\tif ((cls = OS.objc_lookUpClass (className)) == 0) {", "+\t\t\tClass clazz = getClass();", "+\t\t\tapplicationCallback2 = new Callback(clazz, \"applicationProc\", 2);", "+\t\t\tint /*long*/ proc2 = applicationCallback2.getAddress();", "+\t\t\tif (proc2 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\tapplicationCallback3 = new Callback(clazz, \"applicationProc\", 3);", "+\t\t\tint /*long*/ proc3 = applicationCallback3.getAddress();", "+\t\t\tif (proc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\tapplicationCallback6 = new Callback(clazz, \"applicationProc\", 6);", "+\t\t\tint /*long*/ proc6 = applicationCallback6.getAddress();", "+\t\t\tif (proc6 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\tcls = OS.objc_allocateClassPair(OS.class_NSApplication, className, 0);", "+\t\t\tOS.class_addMethod(cls, OS.sel_sendEvent_, proc3, \"@:@\");", "+\t\t\tOS.class_addMethod(cls, OS.sel_nextEventMatchingMask_untilDate_inMode_dequeue_, proc6, \"@:i@@B\");", "+\t\t\tOS.class_addMethod(cls, OS.sel_isRunning, proc2, \"@:\");", "+\t\t\tOS.objc_registerClassPair(cls);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4a54363be6c189782e2d651ba22cff9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "c23a8fe25782a54dc6944d627b11766379822cbd", "commitAfterChange": "0e1964e25bc1f5aeb873221ed7066a5aa3913616", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 72, "signatureBeforeChange": "  void initApplicationDelegate()", "signatureAfterChange": "  void initApplicationDelegate()", "diff": ["-\tapplicationDelegateCallback3 = new Callback(this, \"applicationDelegateProc\", 3);", "-\tint /*long*/ appProc3 = applicationDelegateCallback3.getAddress();", "-\tif (appProc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-", "-\tint /*long*/ cls = OS.objc_allocateClassPair(OS.class_NSObject, className, 0);", "-\tOS.class_addMethod(cls, OS.sel_applicationWillFinishLaunching_, appProc3, \"@:@\");", "-\tOS.class_addMethod(cls, OS.sel_terminate_, appProc3, \"@:@\");", "-\tOS.class_addMethod(cls, OS.sel_orderFrontStandardAboutPanel_, appProc3, \"@:@\");", "-\tOS.class_addMethod(cls, OS.sel_hideOtherApplications_, appProc3, \"@:@\");", "-\tOS.class_addMethod(cls, OS.sel_hide_, appProc3, \"@:@\");", "-\tOS.class_addMethod(cls, OS.sel_unhideAllApplications_, appProc3, \"@:@\");", "-\tOS.class_addMethod(cls, OS.sel_applicationShouldTerminate_, appProc3, \"@:@\");", "-\tOS.class_addMethod(cls, OS.sel_applicationWillTerminate_, appProc3, \"@:@\");", "-\tOS.objc_registerClassPair(cls);", "-\t", "+\tif (OS.objc_lookUpClass (className) == 0) {", "+\t\tClass clazz = getClass ();", "+\t\tapplicationDelegateCallback3 = new Callback(clazz, \"applicationDelegateProc\", 3);", "+\t\tint /*long*/ appProc3 = applicationDelegateCallback3.getAddress();", "+\t\tif (appProc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tint /*long*/ cls = OS.objc_allocateClassPair(OS.class_NSObject, className, 0);", "+\t\tOS.class_addMethod(cls, OS.sel_applicationWillFinishLaunching_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_terminate_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_orderFrontStandardAboutPanel_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_hideOtherApplications_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_hide_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_unhideAllApplications_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_applicationShouldTerminate_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_applicationWillTerminate_, appProc3, \"@:@\");", "+\t\tOS.objc_registerClassPair(cls);", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "182d6bb15842004cac1333152a63d99c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/DragSource.java", "commitBeforeChange": "df12063c60592b4f4da5ddbab8d1379ea9ab591b", "commitAfterChange": "2c1c08eda487ee5680bf810a1f25bde3ad041839", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public DragSource(Control control, int style)", "signatureAfterChange": " public DragSource(Control control, int style)", "diff": ["-\t\t\t\t\tDragSource.this.drag(event);", "+\t\t\t\t\tif (event.widget instanceof Table || event.widget instanceof Tree) {", "+\t\t\t\t\t\tDragSource.this.dragOutlineViewStart(event);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tDragSource.this.drag(event);", "+\t\t\t\t\t}", "-\t", "-\t// Create a delegate, but then stuff a pointer back to this object so callbacks will have", "-\t// access to this object's data.", "-\tdragSourceDelegate = (SWTDragSourceDelegate)new SWTDragSourceDelegate().alloc().init();", "+", "+", "+\t// The dragSourceDelegate implements the pasteboard callback to provide the dragged data, so we always need", "+\t// to create it. NSDraggingSource methods are ignored in the table and tree case. ", "+\tdragSourceDelegate = (SWTDragSourceDelegate)new SWTDragSourceDelegate().alloc().init();", "+", "+\t// Tables and trees already implement dragging, so we need to override their drag methods instead of creating a dragging source.", "+\tif (control instanceof Tree || control instanceof Table) {", "+\t\tint /*long*/ cls = OS.object_getClass(control.view.id);", "+", "+\t\tif (cls == 0) {", "+\t\t\tDND.error(DND.ERROR_CANNOT_INIT_DRAG);", "+\t\t}", "+", "+\t\t// If we already added it, no need to do it again.", "+\t\tint /*long*/ procPtr = OS.class_getMethodImplementation(cls, OS.sel_draggingSourceOperationMaskForLocal_);", "+\t\tif (procPtr == proc3) return;", "+", "+\t\tint /*long*/ draggedImage_endedAt_operationProc = OS.draggedImage_endedAt_operation_CALLBACK(proc5);", "+", "+\t\t// Add the NSDraggingSource overrides.", "+\t\tOS.class_addMethod(cls, OS.sel_draggingSourceOperationMaskForLocal_, proc3, \"@:I\");", "+\t\tOS.class_addMethod(cls, OS.sel_draggedImage_beganAt_, proc4, \"@:@{NSPoint=ff}\");", "+\t\tOS.class_addMethod(cls, OS.sel_draggedImage_endedAt_operation_, draggedImage_endedAt_operationProc, \"@:@{NSPoint=ff}I\");", "+\t\tOS.class_addMethod(cls, OS.sel_ignoreModifierKeysWhileDragging, proc3, \"@:\");", "+\t\t", "+\t\t// Override to return the drag effect's image.", "+\t\tOS.class_addMethod(cls, OS.sel_dragImageForRowsWithIndexes_tableColumns_event_offset_, proc6, \"@:@@@^NSPoint\");", "+\t} ", "+"]}], "num": 30080}
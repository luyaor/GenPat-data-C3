{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "99226aabe83d881b23b5969332074cdb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80a5d9e0bb770e8079d8f63bc5922a99", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/gtk/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "ac473adfcb9983f414d3da15b8b15f56fca50498", "commitAfterChange": "7171ce75440e1c2f381de2d9486e536f525ae21d", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 28, "signatureBeforeChange": " public Rectangle computeTrim(int x, int y, int width, int height)", "signatureAfterChange": " public Rectangle computeTrim(int x, int y, int width, int height)", "diff": ["-\treturn new Rectangle(0,0,0,0);", "+\tcheckDevice();", "+\t//TODO: We are supposed to return this in pixels, but GTK_UNIT_PIXELS is currently not implemented (gtk bug 346245)", "+\tdouble printWidth = OS.gtk_page_setup_get_page_width(pageSetup, OS.GTK_UNIT_POINTS);", "+\tdouble printHeight = OS.gtk_page_setup_get_page_height(pageSetup, OS.GTK_UNIT_POINTS);", "+\tdouble paperWidth = OS.gtk_page_setup_get_paper_width (pageSetup, OS.GTK_UNIT_POINTS);", "+\tdouble paperHeight = OS.gtk_page_setup_get_paper_height (pageSetup, OS.GTK_UNIT_POINTS);", "+\tdouble printX = -OS.gtk_page_setup_get_left_margin(pageSetup, OS.GTK_UNIT_POINTS);", "+\tdouble printY = -OS.gtk_page_setup_get_top_margin(pageSetup, OS.GTK_UNIT_POINTS);", "+\tdouble hTrim = paperWidth - printWidth;", "+\tdouble vTrim = paperHeight - printHeight;", "+\treturn new Rectangle(x + (int)printX, y + (int)printY, width + (int)hTrim, height + (int)vTrim);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7877ed146d0bef7e8dde69fbde0a9d0a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java", "commitBeforeChange": "796c03966b90a1b4124fbb0de18e2b350a1297b3", "commitAfterChange": "798354856755c1c1542d3925e8afb0a68d8a824f", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " \tvoid showColorForPixel(int x, int y)", "signatureAfterChange": " \tvoid showColorForPixel(int x, int y)", "diff": ["-", "-", "-\t\t\tObject[] args = {new Integer(x),", "-\t\t\t\t\t     new Integer(y),", "-\t\t\t\t\t     new Integer(pixel),", "-\t\t\t\t\t     Integer.toHexString(pixel),", "-\t\t\t\t\t     rgb};", "-\t\t\tif (pixel == imageData.transparentPixel) {", "-\t\t\t\tstatusLabel.setText(createMsg(bundle.getString(\"Color_at_trans\"), args));", "-\t\t\t} else {", "-\t\t\t\tstatusLabel.setText(createMsg(bundle.getString(\"Color_at\"), args));", "+\t\t\tboolean hasAlpha = false;", "+\t\t\tint alphaValue = 0;", "+\t\t\tif (imageData.alphaData != null && imageData.alphaData.length > 0) {", "+\t\t\t\thasAlpha = true;", "+\t\t\t\talphaValue = imageData.getAlpha(x, y);", "+\t\t\tString rgbMessageFormat = bundle.getString(hasAlpha ? \"RGBA\" : \"RGB\");", "+\t\t\tObject[] rgbArgs = {", "+\t\t\t\t\tInteger.toString(rgb.red),", "+\t\t\t\t\tInteger.toString(rgb.green),", "+\t\t\t\t\tInteger.toString(rgb.blue),", "+\t\t\t\t\tInteger.toString(alphaValue)", "+\t\t\t};", "+\t\t\tObject[] rgbHexArgs = {", "+\t\t\t\t\tInteger.toHexString(rgb.red),", "+\t\t\t\t\tInteger.toHexString(rgb.green),", "+\t\t\t\t\tInteger.toHexString(rgb.blue),", "+\t\t\t\t\tInteger.toHexString(alphaValue)", "+\t\t\t};", "+\t\t\tObject[] args = {", "+\t\t\t\t\tnew Integer(x),", "+\t\t\t\t\tnew Integer(y),", "+\t\t\t\t\tnew Integer(pixel),", "+\t\t\t\t\tInteger.toHexString(pixel),", "+\t\t\t\t\tcreateMsg(rgbMessageFormat, rgbArgs),", "+\t\t\t\t\tcreateMsg(rgbMessageFormat, rgbHexArgs),", "+\t\t\t\t\t(pixel == imageData.transparentPixel) ? bundle.getString(\"Color_at_transparent\") : \"\"};", "+\t\t\tstatusLabel.setText(createMsg(bundle.getString(\"Color_at\"), args));"]}], "num": 12308}
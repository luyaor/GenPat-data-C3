{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1a0c94176b910d90f31e440a845e5f0", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7324ec59ce1f13827404da4209dfe78", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "0eca40a26667c3712617b5dd23e67af76bcbab4d", "commitAfterChange": "c345d69dc06c2a69d5f698a12d1c7890b32841ad", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 116, "signatureBeforeChange": " int getBottomIndex()", "signatureAfterChange": " int getBottomIndex()", "diff": ["-\tint lineCount = 1;", "-\tif (lineHeight != 0) {", "-\t\t// calculate the number of lines that are fully visible", "-\t\tint partialTopLineHeight = topIndex * lineHeight - verticalScrollOffset;", "-\t\tlineCount = (getClientArea().height - partialTopLineHeight) / lineHeight;", "+//\tint lineCount = 1;", "+//\tif (lineHeight != 0) {", "+//\t\t// calculate the number of lines that are fully visible", "+//\t\tint partialTopLineHeight = topIndex * lineHeight - verticalScrollOffset;", "+//\t\tlineCount = (getClientArea().height - partialTopLineHeight) / lineHeight;", "+//\t}", "+//\treturn Math.min(content.getLineCount() - 1, topIndex + Math.max(0, lineCount - 1));", "+\tint clientAreaHeight = getClientArea().height;", "+\tint bottomIndex = getLineIndex(clientAreaHeight);", "+\tif (bottomIndex > 0) {", "+\t\tint linePixel = getLinePixel(bottomIndex);", "+\t\tint lineHeight = lineCache.getLineHeight(bottomIndex);", "+\t\tif (linePixel + lineHeight > clientAreaHeight) {", "+\t\t\tbottomIndex--;", "+\t\t}", "-\treturn Math.min(content.getLineCount() - 1, topIndex + Math.max(0, lineCount - 1));", "+\treturn bottomIndex;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "389ff78e2f899be96064c5110fa00a20", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 254, "methodNumberAfterChange": 105, "signatureBeforeChange": " int getBottomIndex()", "signatureAfterChange": " int getBottomIndex()", "diff": ["-\tint lineCount = 1;", "-\t", "-\tif (lineHeight != 0) {", "-\t\t// calculate the number of lines that are fully visible", "-\t\tint partialTopLineHeight = topIndex * lineHeight - verticalScrollOffset;", "-\t\tlineCount = (getClientArea().height - partialTopLineHeight) / lineHeight;", "+\tint bottomIndex;", "+\tif (isFixedLineHeight()) {", "+\t\tint lineCount = 1;", "+\t\tint lineHeight = renderer.getLineHeight();", "+\t\tif (lineHeight != 0) {", "+\t\t\t// calculate the number of lines that are fully visible", "+\t\t\tint partialTopLineHeight = topIndex * lineHeight - getVerticalScrollOffset();", "+\t\t\tlineCount = (getClientArea().height - partialTopLineHeight) / lineHeight;", "+\t\t}", "+\t\tbottomIndex = Math.min(content.getLineCount() - 1, topIndex + Math.max(0, lineCount - 1));", "+\t} else {", "+\t\tint clientAreaHeight = getClientArea().height - bottomMargin;", "+\t\tbottomIndex = getLineIndex(clientAreaHeight);", "+\t\tif (bottomIndex > 0) {", "+\t\t\tint linePixel = getLinePixel(bottomIndex);", "+\t\t\tint lineHeight = renderer.getLineHeight(bottomIndex);", "+\t\t\tif (linePixel + lineHeight > clientAreaHeight) {", "+\t\t\t\tbottomIndex--;", "+\t\t\t}", "+\t\t}", "-\treturn Math.min(content.getLineCount() - 1, topIndex + Math.max(0, lineCount - 1));", "+\treturn bottomIndex;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b7f854da9ae94a9027937512d50f22a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "ea7476519b9e21c42e4d4550669901e532bedcab", "commitAfterChange": "76b33e0e494479a9009365afe16385a154f070b7", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": " int getBottomIndex()", "signatureAfterChange": " int getBottomIndex()", "diff": ["-//\tint lineCount = 1;", "-//\tif (lineHeight != 0) {", "-//\t\t// calculate the number of lines that are fully visible", "-//\t\tint partialTopLineHeight = topIndex * lineHeight - verticalScrollOffset;", "-//\t\tlineCount = (getClientArea().height - partialTopLineHeight) / lineHeight;", "-//\t}", "-//\treturn Math.min(content.getLineCount() - 1, topIndex + Math.max(0, lineCount - 1));", "-\tint clientAreaHeight = getClientArea().height;", "-\tint bottomIndex = getLineIndex(clientAreaHeight);", "-\tif (bottomIndex > 0) {", "-\t\tint linePixel = getLinePixel(bottomIndex);", "-\t\tint lineHeight = lineCache.getLineHeight(bottomIndex);", "-\t\tif (linePixel + lineHeight > clientAreaHeight) {", "-\t\t\tbottomIndex--;", "+\tint bottomIndex;", "+\tif (isFixedLineHeight()) {", "+\t\tint lineCount = 1;", "+\t\tif (lineHeight != 0) {", "+\t\t\t// calculate the number of lines that are fully visible", "+\t\t\tint partialTopLineHeight = topIndex * lineHeight - verticalScrollOffset;", "+\t\t\tlineCount = (getClientArea().height - partialTopLineHeight) / lineHeight;", "+\t\t}", "+\t\tbottomIndex = Math.min(content.getLineCount() - 1, topIndex + Math.max(0, lineCount - 1));", "+\t} else {", "+\t\tint clientAreaHeight = getClientArea().height;", "+\t\tbottomIndex = getLineIndex(clientAreaHeight);", "+\t\tif (bottomIndex > 0) {", "+\t\t\tint linePixel = getLinePixel(bottomIndex);", "+\t\t\tint lineHeight = lineCache.getLineHeight(bottomIndex);", "+\t\t\tif (linePixel + lineHeight > clientAreaHeight) {", "+\t\t\t\tbottomIndex--;", "+\t\t\t}"]}], "num": 667}
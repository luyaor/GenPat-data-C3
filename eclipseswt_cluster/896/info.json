{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8bf149e772151a093633ac58c05842ad", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3fc6685d6fa5181576e216300101ec7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "aa5a69fe81e993c5bb9fcff4c9a425715ad470cd", "commitAfterChange": "bf9b442200602eaa6f44a276dfab033f09afe62d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public Rectangle getImageBounds (int index)", "signatureAfterChange": " public Rectangle getImageBounds (int index)", "diff": ["-\tint /*long*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);", "-\tif (list == 0) return new Rectangle (0, 0, 0, 0);", "-\tint count = OS.g_list_length (list);", "-\tint /*long*/ pixbufRenderer = 0;", "-\tint i = 0;", "-\twhile (i < count) {", "-\t\tint /*long*/ renderer = OS.g_list_nth_data (list, i);", "-\t\tif (OS.GTK_IS_CELL_RENDERER_PIXBUF (renderer)) {", "-\t\t\tpixbufRenderer = renderer;", "-\t\t\tbreak;", "-\t\t}", "-\t\ti++;", "-\t}", "-\tOS.g_list_free (list);\t", "+\tint /*long*/ pixbufRenderer = parent.getPixbufRenderer (column);", "+", "+\t/*", "+\t* The OS call gtk_cell_renderer_get_size() provides the width of image to be drawn", "+\t* by the cell renderer.  If there is no image in the cell, the width is zero.  If the table contains", "+\t* images of varying widths, gtk_cell_renderer_get_size() will return the width of the image, ", "+\t* not the width of the area in which the image is drawn.", "+\t* New API was added in GTK 2.1.3 for determining the full width of the renderer area.", "+\t* For earlier versions of GTK, the result is only correct if all rows have images of the same", "+\t* width.", "+\t*/", "+\tif (OS.GTK_VERSION >= OS.VERSION (2, 1, 3)) {", "+\t\tint [] x = new int [1], w = new int[1];", "+\t\tOS.gtk_tree_view_column_cell_get_position (column, pixbufRenderer, x, w);", "+\t\trect.x += x [0];", "+\t\trect.width = w [0];", "+\t} else {", "+\t\tint [] w = new int [1];", "+\t\tOS.gtk_tree_view_column_cell_set_cell_data (column, parent.modelHandle, handle, false, false);", "+\t\tOS.gtk_cell_renderer_get_size (pixbufRenderer, parentHandle, null, null, null, w, null);", "+\t\trect.width = w [0];", "+\t}", "+\t", "-\t/*", "-\t* The OS call gtk_cell_renderer_get_size() provides the width of image to be drawn", "-\t* by the cell renderer.  If there is no image in the cell, the width is zero.  If the table contains", "-\t* images of varying widths, gtk_cell_renderer_get_size() will return the width of the image, ", "-\t* not the width of the area in which the image is drawn.", "-\t* New API was added in GTK 2.1.3 for determining the full width of the renderer area.", "-\t* For earlier versions of GTK, the result is only correct if all rows have images of the same", "-\t* width.", "-\t*/", "-\tint [] w = new int[1];", "-\tif (OS.GTK_VERSION >= OS.VERSION (2, 1, 3)) {", "-\t\tint [] x = new int [1];", "-\t\tOS.gtk_tree_view_column_cell_get_position (column, pixbufRenderer, x, w);", "-\t\trect.x += x [0];", "-\t} else {", "-\t\tOS.gtk_tree_view_column_cell_set_cell_data (column, parent.modelHandle, handle, false, false);", "-\t\tOS.gtk_cell_renderer_get_size (pixbufRenderer, parentHandle, null, null, null, w, null);", "-\t}", "+\t", "-\treturn new Rectangle (rect.x + border, rect.y + headerHeight, w [0], rect.height + 1);", "+\treturn new Rectangle (rect.x + border, rect.y + (headerHeight == 0 ?  border : headerHeight), rect.width, rect.height + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1a9bb2ef1c8562e09f870a8d4a114af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "ef785e65c5666e705660b195ef7d2da7b6c1f35c", "commitAfterChange": "1571b21a3b1e60f5ff0c7a9bc19396983f515d5e", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  static int[] init(Device device, Image image, ImageData i)", "signatureAfterChange": "  static int[] init(Device device, Image image, ImageData i)", "diff": ["-\t\tint newBpl = i.bytesPerLine + (4 - (i.bytesPerLine % 4));", "-\t\tbyte[] newData = new byte[i.height * newBpl];", "-\t\tint srcPtr = 0;", "-\t\tint destPtr = 0;", "-\t\tfor (int y = 0; y < i.height; y++) {", "-\t\t\tSystem.arraycopy(data, srcPtr, newData, destPtr, i.bytesPerLine);", "-\t\t\tsrcPtr += i.bytesPerLine;", "-\t\t\tdestPtr += newBpl;", "-\t\t}", "-\t\tdata = newData;", "+\t\tdata = ImageData.convertPad(data, i.width, i.height, i.depth, i.scanlinePad, 4);", "-//\t\tint hHeap = OS.GetProcessHeap();", "-//\t\tint bmBits = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, i.maskData.length);", "-//\t\tOS.MoveMemory(bmBits, i.maskData, i.maskData.length);", "-//\t\tBITMAP bm = new BITMAP();", "-//\t\tbm.bmWidth = i.width;", "-//\t\tbm.bmHeight = i.height;", "-//\t\tbm.bmWidthBytes = (((i.width + 7) / 8) + 3) / 4 * 4;", "-//\t\tbm.bmPlanes = 1;", "-//\t\tbm.bmBitsPixel = 1;", "-//\t\tbm.bmBits = bmBits;", "-//\t\tint hMask = OS.CreateBitmapIndirect(bm);", "-//\t\tOS.HeapFree(hHeap, 0, bmBits);", "+\t\tbyte[] maskData = ImageData.convertPad(i.maskData, i.width, i.height, 1, i.maskPad, 2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34eb257f7c0eb9d1eda280fb7bea3b37", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "715380dedab8017fdd9718f0add11d6826de95d3", "commitAfterChange": "a302881ef15c2c00793701c543ae06d06feb8b0c", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": "\r int doSelectionLineDown()", "signatureAfterChange": "\r void doSelectionLineDown()", "diff": ["-int doSelectionLineDown() {\r", "-\tint line = content.getLineAtOffset(caretOffset);\r", "-\t\r", "-\tif (line != caretLine) {\r", "-\t\t// caret is at end of visual line/start of next visual line in \r", "-\t\t// word wrap mode\r", "-\t\tline = caretLine;\r", "+void doSelectionLineDown() {\r", "+\tif (isSingleLine()) {\r", "+\t\treturn;\r", "-\t// allow line down action only if receiver is not in single line mode.\r", "-\t// fixes 4820.\r", "-\tif (isSingleLine() == false && line < content.getLineCount() - 1) {\r", "-\t\tString lineText = content.getLine(line);\r", "-\t\tint offsetInLine = caretOffset - content.getOffsetAtLine(line);\r", "-\t\tint caretX = getXAtOffset(lineText, line, offsetInLine);\r", "-\t\t\r", "-\t\tcaretLine = ++line;\r", "-\t\tif (isBidi()) {\r", "-\t\t\tcaretOffset = getBidiOffsetAtMouseLocation(caretX, line);\r", "-\t\t}\r", "-\t\telse {\r", "-\t\t\tcaretOffset = getOffsetAtMouseLocation(caretX, line);\r", "-\t\t}\t\t\r", "+\tif (caretLine == content.getLineCount() - 1) {\r", "+\t\tcaretOffset = content.getCharCount();\r", "-\treturn line;\r", "+\telse {\r", "+\t\tdoLineDown();\r", "+\t}\r", "+\t// select first and then scroll to reduce flash when key \r", "+\t// repeat scrolls lots of lines\r", "+\tdoSelection(SWT.RIGHT);\r", "+\tshowCaret();\t\r", "+}\r"]}], "num": 896}
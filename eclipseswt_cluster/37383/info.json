{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "58ed2d1a32080529d0a642f466f4de50", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6cfe30c9c5d9d2451bbaf27803385e7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ScrollBar.java", "commitBeforeChange": "babb3355b2fc359bb510974128be9cf62b0893b2", "commitAfterChange": "171c9294b9c67722190bcd1c1da73095280a1581", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  boolean SetScrollInfo (int hwnd, int flags, SCROLLINFO info, boolean fRedraw)", "signatureAfterChange": "  boolean SetScrollInfo (int hwnd, int flags, SCROLLINFO info, boolean fRedraw)", "diff": ["-\tboolean both = false;", "-\tboolean isVisible = (state & HIDDEN) == 0;", "-\tboolean isEnabled = (state & DISABLED) == 0;", "-\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION(4, 10)) {", "-\t\tSCROLLBARINFO psbi = new SCROLLBARINFO ();", "-\t\tpsbi.cbSize = SCROLLBARINFO.sizeof;", "-\t\tint idObject = (style & SWT.VERTICAL) != 0 ? OS.OBJID_VSCROLL : OS.OBJID_HSCROLL;", "-\t\tOS.GetScrollBarInfo (hwndScrollBar (), idObject, psbi);", "-\t\tisVisible = (psbi.rgstate [0] & OS.STATE_SYSTEM_INVISIBLE) == 0;", "-\t\tisEnabled = (psbi.rgstate [0] & OS.STATE_SYSTEM_UNAVAILABLE) == 0;", "-\t}", "-\tif (!isVisible) {", "+\tif ((state & (DISABLED | HIDDEN)) != 0) fRedraw = false;", "+\tboolean result = OS.SetScrollInfo (hwnd, flags, info, fRedraw);", "+\t", "+\t/*", "+\t* Bug in Windows.  For some reason, when the widget", "+\t* is a standard scroll bar, and SetScrollInfo() is", "+\t* called with SIF_RANGE or SIF_PAGE, the widget is", "+\t* incorrectly made visible so that the next time the", "+\t* parent is resized (or another scroll bar operation", "+\t* is performed), the scroll bar draws.  The fix is", "+\t* to hide the scroll bar (again) when already hidden.", "+\t*/", "+\tif ((state & HIDDEN) != 0) {", "-\t\t\tboth = bar != null && !bar.getVisible ();", "-\t\t}", "-\t}", "-\tif (!isVisible || !isEnabled) fRedraw = false;", "-\tboolean result = OS.SetScrollInfo (hwnd, flags, info, fRedraw);", "-\t/*", "-\t* Bug in Windows.  For some reason, when the widget", "-\t* is a standard scroll bar, and SetScrollInfo() is", "-\t* called with SIF_RANGE or SIF_PAGE, the widget is", "-\t* incorrectly made visible so that the next time the", "-\t* parent is resized (or another scroll bar operation", "-\t* is performed), the scroll bar draws.  The fix is", "-\t* to hide the scroll bar (again) when already hidden.", "-\t*/", "-\tif (!isVisible) {", "-\t\t/*", "-\t\t* This line is intentionally commented.  Currently", "-\t\t* always show scrollbar as being enabled and visible.", "-\t\t*/", "-//\t\tif (OS.IsWinCE) error (SWT.ERROR_NOT_IMPLEMENTED);", "-\t\tif (!OS.IsWinCE) {", "+\t\t\tboolean both = bar != null && !bar.getVisible ();", "-\tif (!isEnabled) {", "+\tif ((state & DISABLED) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f4e599e93ee3444e86866a608226c63", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "be7a6b56ec36f2937282f99ce8f6d3a09d752bb5", "commitAfterChange": "388089e4bec9dc7b9e91ccd2ec44faabbba9290c", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  void drawFocus (int control, int context, boolean hasFocus, boolean hasBorder, Rect inset)", "signatureAfterChange": "  void drawFocus (int control, int context, boolean hasFocus, boolean hasBorder, Rect inset)", "diff": ["-\tif (OS.HIVIEW) {", "-\t\tCGRect rect = new CGRect ();", "-\t\tOS.HIViewGetBounds (control, rect);", "-\t\trect.x += inset.left;", "-\t\trect.y += inset.top;", "-\t\trect.width -= inset.right + inset.left;", "-\t\trect.height -= inset.bottom + inset.top;", "-\t\tint state;", "-\t\tif (OS.IsControlEnabled (control)) {", "-\t\t\tstate = OS.IsControlActive (control) ? OS.kThemeStateActive : OS.kThemeStateInactive;", "-\t\t} else {", "-\t\t\tstate = OS.IsControlActive (control) ? OS.kThemeStateUnavailable : OS.kThemeStateUnavailableInactive;", "-\t\t}", "-\t\tif (hasBorder) {", "-\t\t\tHIThemeFrameDrawInfo info = new HIThemeFrameDrawInfo ();", "-\t\t\tinfo.state = state;", "-\t\t\tinfo.kind = OS.kHIThemeFrameTextFieldSquare;", "-\t\t\tinfo.isFocused = hasFocus;", "-\t\t\tOS.HIThemeDrawFrame (rect, info, context, OS.kHIThemeOrientationNormal);", "-\t\t} else {", "-\t\t\tOS.HIThemeDrawFocusRect (rect, hasFocus, context, OS.kHIThemeOrientationNormal);", "-\t\t}", "+\tCGRect rect = new CGRect ();", "+\tOS.HIViewGetBounds (control, rect);", "+\trect.x += inset.left;", "+\trect.y += inset.top;", "+\trect.width -= inset.right + inset.left;", "+\trect.height -= inset.bottom + inset.top;", "+\tint state;", "+\tif (OS.IsControlEnabled (control)) {", "+\t\tstate = OS.IsControlActive (control) ? OS.kThemeStateActive : OS.kThemeStateInactive;", "-\t\tRect rect = new Rect ();", "-\t\tOS.GetControlBounds (control, rect);", "-\t\trect.left += inset.left;", "-\t\trect.top += inset.top;", "-\t\trect.right -= inset.right;", "-\t\trect.bottom -= inset.bottom;", "-\t\tint state;", "-\t\tif (OS.IsControlEnabled (control)) {", "-\t\t\tstate = OS.IsControlActive (control) ? OS.kThemeStateActive : OS.kThemeStateInactive;", "-\t\t} else {", "-\t\t\tstate = OS.IsControlActive (control) ? OS.kThemeStateUnavailable : OS.kThemeStateUnavailableInactive;", "-\t\t}", "-\t\tif (hasFocus) {", "-\t\t\tif (hasBorder) OS.DrawThemeEditTextFrame (rect, state);", "-\t\t\tOS.DrawThemeFocusRect (rect, true);", "-\t\t} else {", "-\t\t\t/*", "-\t\t\t* This code is intentionaly commented.", "-\t\t\t*  ", "-\t\t\t* NOTE: the focus ring is erased by drawBackground() above. ", "-\t\t\t*/", "-\t//\t\tOS.DrawThemeFocusRect (rect, false);", "-\t\t\tif (hasBorder) OS.DrawThemeEditTextFrame (rect, state);", "-\t\t}", "+\t\tstate = OS.IsControlActive (control) ? OS.kThemeStateUnavailable : OS.kThemeStateUnavailableInactive;", "+\t}", "+\tif (hasBorder) {", "+\t\tHIThemeFrameDrawInfo info = new HIThemeFrameDrawInfo ();", "+\t\tinfo.state = state;", "+\t\tinfo.kind = OS.kHIThemeFrameTextFieldSquare;", "+\t\tinfo.isFocused = hasFocus;", "+\t\tOS.HIThemeDrawFrame (rect, info, context, OS.kHIThemeOrientationNormal);", "+\t} else {", "+\t\tOS.HIThemeDrawFocusRect (rect, hasFocus, context, OS.kHIThemeOrientationNormal);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c89e63ca5c7e93a5997c49da64c6b59", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "a14670bf758124feb956fd4600610fdc3a737950", "commitAfterChange": "817c77191e3ecb8a08e23c84fc0d7fd81b7c5667", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  void drawWidget (int control)", "signatureAfterChange": "  void drawWidget (int control)", "diff": ["-\tdrawBackground (handle, background);", "+\tdrawFocus (control, hasFocus (), hasBorder (), inset ());", "-\tRect rect = new Rect ();", "-\tOS.GetControlBounds (handle, rect);", "-\tRect inset = inset ();", "-\trect.left += inset.left;", "-\trect.top += inset.top;", "-\trect.right -= inset.right;", "-\trect.bottom -= inset.bottom;", "-\tif (hasBorder ()) {", "-\t\tint state = OS.IsControlActive (handle) ? OS.kThemeStateActive : OS.kThemeStateInactive;", "-\t\tif (hasFocus ()) {", "-\t\t\tOS.DrawThemeEditTextFrame (rect, state);", "-\t\t\tOS.DrawThemeFocusRect (rect, true);", "-\t\t} else {", "-\t\t\tOS.DrawThemeFocusRect (rect, false);", "-\t\t\tOS.DrawThemeEditTextFrame (rect, state);", "-\t\t}", "-\t} else {", "-\t\tOS.DrawThemeFocusRect (rect, hasFocus ());", "-\t}"]}], "num": 37383}
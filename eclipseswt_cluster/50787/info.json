{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c93f6bad91d2cea875e70d20c0b5f954", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e5a9dd93290d9d58878d57f2419df82", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "commitAfterChange": "bbeab947327689cb203638e742e58f555e6c1b64", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 15, "signatureBeforeChange": " private void updateArrowBar()", "signatureAfterChange": " void drawBackground(GC gc, int[] shape, boolean selected)", "diff": ["+void drawBackground(GC gc, int[] shape, boolean selected) {", "+\tPoint size = getSize();", "+\tint height = tabHeight + HIGHLIGHT_HEADER; ", "+\tint y = onBottom ? size.y - borderBottom - height : borderTop;", "+\tint x = 0;", "+\tint width = size.x;", "+\tif (borderLeft > 0) {", "+\t\tx += 1; width -= 2;", "+\tRegion clipping = new Region();", "+\tgc.getClipping(clipping);", "+\tRegion region = new Region();", "+\tregion.add(shape);", "+\tgc.setClipping(region);", "+\tColor defaultBackground = selected ? selectionBackground : getBackground();", "+\tImage image = selected ? selectionBgImage : bgImage;", "+\tColor[] colors = selected ? selectionGradientColors : gradientColors;", "+\tboolean vertical = selected ? selectionGradientVertical : gradientVertical;", "+\tint[] percents = selected ? selectionGradientPercents : gradientPercents;", "+\tif (image != null) {", "+\t\t// draw the background image in shape", "+\t\tgc.setBackground(defaultBackground);", "+\t\tgc.fillRectangle(x, y, width, height);", "+\t\tRectangle imageRect = image.getBounds();", "+\t\tgc.drawImage(image, imageRect.x, imageRect.y, imageRect.width, imageRect.height, x, y, width, height);", "+\t} else if (colors != null) {", "+\t\t// draw gradient", "+\t\tif (colors.length == 1) {", "+\t\t\tColor background = colors[0] != null ? colors[0] : defaultBackground;", "+\t\t\tgc.setBackground(background);", "+\t\t\tgc.fillRectangle(x, y, width, height);", "+\t\t\tif (vertical) {", "+\t\t\t\tif (onBottom) {", "+\t\t\t\t\tint pos = 0;", "+\t\t\t\t\tif (percents[percents.length - 1] < 100) {", "+\t\t\t\t\t\tpos = percents[percents.length - 1] * height / 100;", "+\t\t\t\t\t\tgc.setBackground(defaultBackground);", "+\t\t\t\t\t\tgc.fillRectangle(x, y, width, pos);", "+\t\t\t\t\t}", "+\t\t\t\t\tColor lastColor = colors[colors.length-1];", "+\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\tfor (int i = percents.length-1; i >= 0; i--) {", "+\t\t\t\t\t\tgc.setForeground(lastColor);", "+\t\t\t\t\t\tlastColor = colors[i];", "+\t\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\t\tgc.setBackground(lastColor);", "+\t\t\t\t\t\tint gradientHeight = percents[i] * height / 100;", "+\t\t\t\t\t\tgc.fillGradientRectangle(x, y+pos, width, gradientHeight, true);", "+\t\t\t\t\t\tpos += gradientHeight;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tColor lastColor = colors[0];", "+\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\tint pos = 0;", "+\t\t\t\t\tfor (int i = 0; i < percents.length; i++) {", "+\t\t\t\t\t\tgc.setForeground(lastColor);", "+\t\t\t\t\t\tlastColor = colors[i + 1];", "+\t\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\t\tgc.setBackground(lastColor);", "+\t\t\t\t\t\tint gradientHeight = percents[i] * height / 100;", "+\t\t\t\t\t\tgc.fillGradientRectangle(x, y+pos, width, gradientHeight, true);", "+\t\t\t\t\t\tpos += gradientHeight;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (pos < height) {", "+\t\t\t\t\t\tgc.setBackground(defaultBackground);", "+\t\t\t\t\t\tgc.fillRectangle(x, pos, width, height-pos);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else { //horizontal gradient", "+\t\t\t\tColor lastColor = colors[0];", "+\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\tint pos = 0;", "+\t\t\t\tfor (int i = 0; i < percents.length; ++i) {", "+\t\t\t\t\tgc.setForeground(lastColor);", "+\t\t\t\t\tlastColor = colors[i + 1];", "+\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\tgc.setBackground(lastColor);", "+\t\t\t\t\tint gradientWidth = (percents[i] * width / 100) - pos;", "+\t\t\t\t\tgc.fillGradientRectangle(x+pos, y, gradientWidth, height, false);", "+\t\t\t\t\tpos += gradientWidth;", "+\t\t\t\t}", "+\t\t\t\tif (pos < width) {", "+\t\t\t\t\tgc.setBackground(defaultBackground);", "+\t\t\t\t\tgc.fillRectangle(x+pos, y, width-pos, height);", "+\t\t\t\t}", "+\t\t\t}", "+\t} else {", "+\t\t// draw a solid background using default background in shape", "+\t\tgc.setBackground(defaultBackground);", "+\t\tgc.fillRectangle(x, y, width, height);", "+\tgc.setClipping(clipping);", "+\tclipping.dispose();", "+\tregion.dispose();", "+}", "-}", "-private void updateArrowBar() {", "-\t//Temporary code - need a better way to determine toolBar trim", "-\tint toolbarTrim = 4;", "-\tString platform = SWT.getPlatform();", "-\tif (\"photon\".equals(platform)) toolbarTrim = 6; //$NON-NLS-1$", "-\tif (\"gtk\".equals(platform)) toolbarTrim = 8; //$NON-NLS-1$", "-", "-\tint maxHeight = tabHeight - toolbarTrim;", "-\tif (maxHeight < 3) return;", "-\tint imageHeight = Math.max(9, maxHeight);\t", "-\t", "-\tif (arrowLeftImage != null) {", "-\t\tint height = arrowLeftImage.getBounds().height;", "-\t\tif (height == imageHeight) return;", "-\t\tif (imageHeight > maxHeight && height == maxHeight) return;", "-\t}", "-", "-\tif (arrowBar != null) arrowBar.dispose();", "-\tarrowBar = null;", "-\tif (arrowLeftImage != null) arrowLeftImage.dispose();", "-\tif (arrowRightImage != null) arrowRightImage.dispose();", "-\t", "-\tcreateArrowBar();", "-\tToolItem[] items = arrowBar.getItems();", "-\tToolItem left  = items[0];", "-\tToolItem right = items[1];", "-\t", "-\tDisplay display = getDisplay();", "-\tColor foreground = getForeground();", "-\tColor black = display.getSystemColor(SWT.COLOR_BLACK);", "-\tColor background = getBackground();", "-\t", "-\tPaletteData palette = new PaletteData(new RGB[]{foreground.getRGB(), background.getRGB(), black.getRGB()});", "-\tImageData imageData = new ImageData(7, imageHeight, 4, palette);", "-\timageData.transparentPixel = 1;", "-\tarrowLeftImage = new Image(display, imageData);", "-\tGC gc = new GC(arrowLeftImage);", "-\tgc.setBackground(background);", "-\tgc.fillRectangle(0, 0, 7, imageHeight);", "-\tgc.setBackground(black);", "-\t//draw a 9x5 '<' centered vertically in image", "-\tint h = (imageHeight / 2 )* 2;", "-\tint midpoint = h / 2 - 1;", "-\tint[] pointArr = new int[] {6, midpoint - 5,", "-                                         1, midpoint, ", "-\t\t                                 6,  midpoint + 5,};", "-\tgc.fillPolygon(pointArr);", "-\tgc.dispose();", "-\t", "-\tpalette = new PaletteData(new RGB[]{foreground.getRGB(), background.getRGB(), black.getRGB()});", "-\timageData = new ImageData(7, imageHeight, 4, palette);", "-\timageData.transparentPixel = 1;", "-\tarrowRightImage = new Image(display, imageData);", "-\tgc = new GC(arrowRightImage);", "-\tgc.setBackground(background);", "-\tgc.fillRectangle(0, 0, 7, imageHeight);", "-\tgc.setBackground(black);", "-\t//draw a 9x5 '>' centered vertically in image", "-\tpointArr = new int[] {1, midpoint - 5, ", "-                                  6, midpoint,", "-\t\t                          1, midpoint + 5,};", "-\tgc.fillPolygon(pointArr);", "-\tgc.dispose();", "-\t", "-\tif (maxHeight < imageHeight) {", "-\t\ttry {", "-\t\t\t//rescale image", "-\t\t\tImage leftTemp = scaleImage(arrowLeftImage, imageHeight, maxHeight);", "-\t\t\tarrowLeftImage.dispose();", "-\t\t\tarrowLeftImage = leftTemp;", "-\t\t} catch (IllegalArgumentException e) {", "-\t\t} catch (SWTException e) {", "-\t\t}", "-\t\t", "-\t\ttry {", "-\t\t\tImage rightTemp = scaleImage(arrowRightImage, imageHeight, maxHeight);", "-\t\t\tarrowRightImage.dispose();", "-\t\t\tarrowRightImage = rightTemp;", "-\t\t} catch (IllegalArgumentException e) {", "-\t\t} catch (SWTException e) {", "-\t\t}\t", "-\t}", "-\tleft.setImage(arrowLeftImage);", "-\tright.setImage(arrowRightImage);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4de152181c9a577e048bb0b04679c5a2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "5d484c6476bc4892c9825b0c805179fe47e751d4", "commitAfterChange": "2efd019c0428e46dfacf8317bc1b4ae9f271e166", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 20, "signatureBeforeChange": " void drawSelectionBackground(GC gc, int[] shape)", "signatureAfterChange": " void drawSelectionBackground(GC gc, int[] shape)", "diff": ["-\tif (backgroundImage != null) {", "-\t\tPoint size = getSize();", "-\t\t// draw the background image in shape", "-\t\tRegion clipping = new Region();", "-\t\tgc.getClipping(clipping);", "-\t\tRegion region = new Region();", "-\t\tregion.add(shape);", "-\t\tgc.setClipping(region);", "-\t\tgc.setBackground(selectionBackground);", "-\t\tgc.fillRectangle(0, 0, size.x, size.y);", "-\t\t// tile image to fill space", "-\t\tRectangle imageRect = backgroundImage.getBounds();", "-\t\tint xPos = 0;", "-\t\twhile (xPos < size.x) {", "-\t\t\tint yPos = 0;", "-\t\t\twhile (yPos < size.y) {", "-\t\t\t\tgc.drawImage(backgroundImage, xPos, yPos);", "-\t\t\t\tyPos += imageRect.height;", "-\t\t\t}", "-\t\t\txPos += imageRect.width;", "-\t\t}", "-\t\tgc.setClipping(clipping);", "-\t\tclipping.dispose();", "-\t\tregion.dispose();", "-\t} else if (gradientColors != null) {", "-\t\tPoint size = getSize();", "-\t\t// draw a gradient in shape", "-\t\tRegion clipping = new Region();", "-\t\tgc.getClipping(clipping);", "-\t\tRegion region = new Region();", "-\t\tregion.add(shape);", "-\t\tgc.setClipping(region);", "+\tPoint size = getSize();", "+\tint height = tabHeight + HIGHLIGHT_HEADER; ", "+\tint y = onBottom ? size.y - borderBottom - height : borderTop;", "+\tint x = 0;", "+\tint width = size.x;", "+\tif (borderLeft > 0) {", "+\t\tx += 1; width -= 2;", "+\t}", "+\t", "+\tRegion clipping = new Region();", "+\tgc.getClipping(clipping);", "+\tRegion region = new Region();", "+\tregion.add(shape);", "+\tgc.setClipping(region);", "+\tif (backgroundImage != null) {", "+\t\t// draw the background image in shape", "+\t\tgc.setBackground(selectionBackground);", "+\t\tgc.fillRectangle(x, y, width, height);", "+\t\tRectangle imageRect = backgroundImage.getBounds();", "+\t\tif (tiled) {", "+\t\t\t// tile image to fill space", "+\t\t\tint xPos = x;", "+\t\t\twhile (xPos < x+width) {", "+\t\t\t\tint yPos = y;", "+\t\t\t\twhile (yPos < y+height) {", "+\t\t\t\t\tgc.drawImage(backgroundImage, xPos, yPos);", "+\t\t\t\t\tyPos += imageRect.height;", "+\t\t\t\t}", "+\t\t\t\txPos += imageRect.width;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tgc.drawImage(backgroundImage, imageRect.x, imageRect.y, imageRect.width, imageRect.height, x, y, width, height);", "+\t\t", "+\t\t}", "+\t} else if (gradientColors != null) {", "+\t\t// draw gradient", "-\t\t\tgc.fillRectangle(0, 0, size.x, size.y);", "+\t\t\tgc.fillRectangle(x, y, width, height);", "-\t\t\tColor background = selectionBackground;", "-\t\t\tColor lastColor = gradientColors[0];", "-\t\t\tif (lastColor == null) lastColor = background;", "-\t\t\tint pos = 0;", "-\t\t\tfor (int i = 0; i < gradientPercents.length; ++i) {", "-\t\t\t\tgc.setForeground(lastColor);", "-\t\t\t\tlastColor = gradientColors[i + 1];", "-\t\t\t\tif (lastColor == null) lastColor = background;", "-\t\t\t\tgc.setBackground(lastColor);", "-\t\t\t\tif (gradientVertical) {", "-\t\t\t\t\tint gradientHeight = (gradientPercents[i] * size.y / 100) - pos;", "-\t\t\t\t\tgc.fillGradientRectangle(0, pos, size.x, gradientHeight, true);", "-\t\t\t\t\tpos += gradientHeight;", "+\t\t\tif (gradientVertical) {", "+\t\t\t\tif (onBottom) {", "+\t\t\t\t\tint pos = 0;", "+\t\t\t\t\tif (gradientPercents[gradientPercents.length - 1] < 100) {", "+\t\t\t\t\t\tpos = gradientPercents[gradientPercents.length - 1] * height / 100;", "+\t\t\t\t\t\tgc.setBackground(selectionBackground);", "+\t\t\t\t\t\tgc.fillRectangle(x, y, width, pos);", "+\t\t\t\t\t}", "+\t\t\t\t\tColor lastColor = gradientColors[gradientColors.length-1];", "+\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "+\t\t\t\t\tfor (int i = gradientPercents.length-1; i >= 0; i--) {", "+\t\t\t\t\t\tgc.setForeground(lastColor);", "+\t\t\t\t\t\tlastColor = gradientColors[i];", "+\t\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "+\t\t\t\t\t\tgc.setBackground(lastColor);", "+\t\t\t\t\t\tint gradientHeight = gradientPercents[i] * height / 100;", "+\t\t\t\t\t\tgc.fillGradientRectangle(x, y+pos, width, gradientHeight, true);", "+\t\t\t\t\t\tpos += gradientHeight;", "+\t\t\t\t\t}", "-\t\t\t\t\tint gradientWidth = (gradientPercents[i] * size.x / 100) - pos;", "-\t\t\t\t\tgc.fillGradientRectangle(pos, 0, gradientWidth, size.y, false);", "+\t\t\t\t\tColor lastColor = gradientColors[0];", "+\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "+\t\t\t\t\tint pos = 0;", "+\t\t\t\t\tfor (int i = 0; i < gradientPercents.length; i++) {", "+\t\t\t\t\t\tgc.setForeground(lastColor);", "+\t\t\t\t\t\tlastColor = gradientColors[i + 1];", "+\t\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "+\t\t\t\t\t\tgc.setBackground(lastColor);", "+\t\t\t\t\t\tint gradientHeight = gradientPercents[i] * height / 100;", "+\t\t\t\t\t\tgc.fillGradientRectangle(x, y+pos, width, gradientHeight, true);", "+\t\t\t\t\t\tpos += gradientHeight;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (pos < height) {", "+\t\t\t\t\t\tgc.setBackground(selectionBackground);", "+\t\t\t\t\t\tgc.fillRectangle(x, pos, width, height-pos);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else { //horizontal gradient", "+\t\t\t\tColor lastColor = gradientColors[0];", "+\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "+\t\t\t\tint pos = 0;", "+\t\t\t\tfor (int i = 0; i < gradientPercents.length; ++i) {", "+\t\t\t\t\tgc.setForeground(lastColor);", "+\t\t\t\t\tlastColor = gradientColors[i + 1];", "+\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "+\t\t\t\t\tgc.setBackground(lastColor);", "+\t\t\t\t\tint gradientWidth = (gradientPercents[i] * width / 100) - pos;", "+\t\t\t\t\tgc.fillGradientRectangle(x+pos, y, gradientWidth, height, false);", "-\t\t\t}", "-\t\t\tif (gradientVertical && pos < size.y) {", "-\t\t\t\tgc.setBackground(getBackground());", "-\t\t\t\tgc.fillRectangle(0, pos, size.x, size.y - pos);", "-\t\t\t}", "-\t\t\tif (!gradientVertical && pos < size.x) {", "-\t\t\t\tgc.setBackground(getBackground());", "-\t\t\t\tgc.fillRectangle(pos, 0, size.x - pos, size.y);", "+\t\t\t\tif (pos < width) {", "+\t\t\t\t\tgc.setBackground(selectionBackground);", "+\t\t\t\t\tgc.fillRectangle(x+pos, y, width-pos, height);", "+\t\t\t\t}", "-\t\tgc.setClipping(clipping);", "-\t\tclipping.dispose();", "-\t\tregion.dispose();", "-\t\tgc.fillPolygon(shape);", "+\t\tgc.fillRectangle(x, y, width, height);", "+\tgc.setClipping(clipping);", "+\tclipping.dispose();", "+\tregion.dispose();", "+}"]}], "num": 50787}
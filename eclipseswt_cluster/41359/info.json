{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc3a2548153c71297aa33f60b9cab0a8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf9bb71df5f5a8a322f558fd4413b090", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "b1a31ab4f172a1a2e228d0d4b5317b0bc24de7aa", "commitAfterChange": "b72bc1d2aeff462f0ad0e8ecfa6bc39ebd385109", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 122, "signatureBeforeChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["+\t\tint /*long*/[] result = new int /*long*/[1];", "+", "+\t\t/*", "+\t\t* When navigating to a site that is known to have a bad certificate, request notification", "+\t\t* callbacks on the channel so that our nsIBadCertListener2 will be invoked.", "+\t\t*/", "+\t\tif (isRetrievingBadCert) {", "+\t\t\tisRetrievingBadCert = false;", "+\t\t\tnsIRequest request = new nsIRequest (aRequest);", "+\t\t\tint rc = request.QueryInterface (nsIChannel.NS_ICHANNEL_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\t\t\tnsIChannel channel = new nsIChannel (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\trc = channel.SetNotificationCallbacks (interfaceRequestor.getAddress ());", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tchannel.Release ();", "+\t\t\treturn XPCOM.NS_OK;", "+\t\t}", "+", "-\t\tint /*long*/[] result = new int /*long*/[1];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffbd447e898920788b92bc469556fe02", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "cf445d392f7ccdee7756ab6bc52ea05295594c7b", "commitAfterChange": "d40de95713aa2ea21126d6e88c192e810affe18d", "methodNumberBeforeChange": 144, "methodNumberAfterChange": 144, "signatureBeforeChange": "  int OnStartURIOpen (int aURI, int retval)", "signatureAfterChange": "  int OnStartURIOpen (int aURI, int retval)", "diff": ["-\tif (locationListeners.length == 0) {", "-\t\tXPCOM.memmove (retval, new int[] {0}, 4); /* PRBool */", "-\t\treturn XPCOM.NS_OK;", "-\t}", "-\t\t * listeners should not be notified of internal transitions like \"javascipt:...\"", "+\t\t * listeners should not be notified of internal transitions like \"javascript:...\"", "-\t\t\tLocationEvent event = new LocationEvent (browser);", "-\t\t\tevent.display = browser.getDisplay();", "-\t\t\tevent.widget = browser;", "-\t\t\tevent.location = value;", "-\t\t\t/*", "-\t\t\t * If the URI indicates that the page is being rendered from memory", "-\t\t\t * (via setText()) then set it to about:blank to be consistent with IE.", "-\t\t\t */", "-\t\t\tif (event.location.equals (URI_FROMMEMORY)) event.location = ABOUT_BLANK;", "-\t\t\tevent.doit = doit;", "-\t\t\tfor (int i = 0; i < locationListeners.length; i++) {", "-\t\t\t\tlocationListeners[i].changing (event);", "+\t\t\tif (locationListeners.length > 0) {", "+\t\t\t\tLocationEvent event = new LocationEvent (browser);", "+\t\t\t\tevent.display = browser.getDisplay();", "+\t\t\t\tevent.widget = browser;", "+\t\t\t\tevent.location = value;", "+\t\t\t\t/*", "+\t\t\t\t * If the URI indicates that the page is being rendered from memory", "+\t\t\t\t * (via setText()) then set it to about:blank to be consistent with IE.", "+\t\t\t\t */", "+\t\t\t\tif (event.location.equals (URI_FROMMEMORY)) event.location = ABOUT_BLANK;", "+\t\t\t\tevent.doit = doit;", "+\t\t\t\tfor (int i = 0; i < locationListeners.length; i++) {", "+\t\t\t\t\tlocationListeners[i].changing (event);", "+\t\t\t\t}", "+\t\t\t\tdoit = event.doit && !browser.isDisposed();", "-\t\t\tdoit = event.doit && !browser.isDisposed();", "+", "+\t\t\tif (doit && jsEnabledChanged) {", "+\t\t\t\tjsEnabledChanged = false;", "+", "+\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\t\tint rc = webBrowser.QueryInterface (nsIWebBrowserSetup.NS_IWEBBROWSERSETUP_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\t\t\t\tnsIWebBrowserSetup setup = new nsIWebBrowserSetup (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\trc = setup.SetProperty (nsIWebBrowserSetup.SETUP_ALLOW_JAVASCRIPT, jsEnabled ? 1 : 0);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tsetup.Release ();", "+\t\t\t}"]}], "num": 41359}
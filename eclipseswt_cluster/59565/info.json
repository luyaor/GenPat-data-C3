{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bfebd9c95b7e72c57ba3bb12062ee934", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fcdbd175f62c817ffa3dd9d4b44d320", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "8727d22e38059537dcc917ca55f0d6ddcedac706", "commitAfterChange": "0e7716ec8b85ed8b2a10afa69a4dfa63fe12298f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void setContents(Object[] data, Transfer[] transferAgents)", "signatureAfterChange": " public void setContents(Object[] data, Transfer[] dataTypes)", "diff": ["-public void setContents(Object[] data, Transfer[] transferAgents){", "+public void setContents(Object[] data, Transfer[] dataTypes) {", "-\tif (transferAgents == null || data.length != transferAgents.length) {", "+\tif (dataTypes == null || data.length != dataTypes.length) {", "-\tif (display.isDisposed() )", "+\tif (display.isDisposed())", "-\t/*", "-\tfor (int i = 0; i < transferAgents.length; i++) {", "-\t\tSystem.out.println(\"Clipboard.setContents: \" + transferAgents[i]);", "+\tSystem.out.println(\"Clipboard.setContents:\");", "+\tfor (int i = 0; i < dataTypes.length; i++) {", "+\t\tSystem.out.println(\"  \" + i + \": \" + dataTypes[i]);", "-\t*/", "+\t/*", "+\t\tif (transferAgents[i] instanceof RTFTransfer && data[i] instanceof String) {", "+\t\t\tString s= (String) data[i];", "+\t\t\tint flavorType= ('R'<<24) + ('T'<<16) + ('F'<<8) + ' ';", "+\t\t\tif (OS.PutScrapFlavor(scrap, flavorType, 0, s.getBytes()) == OS.kNoErr)", "+\t\t\t\treturn;", "+\t\t}", "+\t*/", "+\t", "+\tint status= 1;", "+\t", "+\t// copy data directly over to System clipboard (not deferred)", "+\tfor (int i= 0; i < dataTypes.length; i++) {", "+\t\tint[] ids= dataTypes[i].getTypeIds();", "+\t\tfor (int j= 0; j < ids.length; j++) {", "+\t\t\tTransferData transferData= new TransferData();", "+\t\t\t/* Use the character encoding for the default locale */", "+\t\t\ttransferData.type= ids[j];", "+\t\t\tdataTypes[i].javaToNative(data[i], transferData);", "+\t\t\tif (transferData.result == 1) {", "+\t\t\t\t/*", "+\t\t\t\tif (transferData.format == 8) {", "+\t\t\t\t\tbyte[] buffer = new byte[transferData.length];", "+\t\t\t\t\tOS.memmove(buffer, transferData.pValue, transferData.length);", "+\t\t\t\t\tbyte[] bName = Converter.wcsToMbcs(null, names[j], true);", "+\t\t\t\t\tstatus = OS.XmClipboardCopy(xDisplay, xWindow, item_id[0], bName, buffer, transferData.length, 0, null);", "+\t\t\t\t}", "+\t\t\t\t*/", "+\t\t\t\tstatus= OS.PutScrapFlavor(scrap, transferData.type, 0, transferData.data);", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+\tif (status != OS.kNoErr)", "+\t\tDND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46c993b37ad6bdc3df4466e73a80a551", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java", "commitBeforeChange": "0a84e48780b862c804e190ba06d17878143631e6", "commitAfterChange": "209551697995b7dd42bc12ac2427dd0390f53c5f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tvoid createListenerSelectionDialog ()", "signatureAfterChange": " \tvoid createListenerSelectionDialog ()", "diff": ["-\t\tfor (int i = 1; i < EVENT_NAMES.length; i++) {", "+\t\tfor (int i = 0; i < EVENT_NAMES.length; i++) {", "+\t\t}", "+\t\tfinal String [] customNames = getCustomEventNames ();", "+\t\tfor (int i = 0; i < customNames.length; i++) {", "+\t\t\tTableItem item = new TableItem (table, SWT.NONE);", "+\t\t\titem.setText (customNames[i]);", "+\t\t\titem.setChecked (eventsFilter[EVENT_NAMES.length + i]);", "-\t\t\t\tfor (int i = 1; i < EVENT_NAMES.length; i++) {", "-\t\t\t\t\titems[i - 1].setChecked(true);", "+\t\t\t\tfor (int i = 0; i < EVENT_NAMES.length; i++) {", "+\t\t\t\t\titems[i].setChecked(true);", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < customNames.length; i++) {", "+\t\t\t\t\titems[EVENT_NAMES.length + i].setChecked(true);", "-\t\t\t\tfor (int i = 1; i < EVENT_NAMES.length; i++) {", "-\t\t\t\t\titems[i - 1].setChecked(false);", "+\t\t\t\tfor (int i = 0; i < EVENT_NAMES.length; i++) {", "+\t\t\t\t\titems[i].setChecked(false);", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < customNames.length; i++) {", "+\t\t\t\t\titems[EVENT_NAMES.length + i].setChecked(false);", "-\t\t\t\tfor (int i = 1; i < EVENT_NAMES.length; i++) {", "-\t\t\t\t\teventsFilter[i] = items[i - 1].getChecked();", "+\t\t\t\tfor (int i = 0; i < EVENT_NAMES.length; i++) {", "+\t\t\t\t\teventsFilter[i] = items[i].getChecked();", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < customNames.length; i++) {", "+\t\t\t\t\teventsFilter[EVENT_NAMES.length + i] = items[EVENT_NAMES.length + i].getChecked();"]}], "num": 59565}
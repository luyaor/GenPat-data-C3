{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75a3893639290ccb6b7f4ba76f806936", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89217583929eaaed14e6ccf89c8b22ba", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "a32fc984c81b11a72a38e2cc99f6583aa55cdbed", "commitAfterChange": "700ce01c41ba7df0747885e4f453df4156f4e515", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " void shape (final int hdc, final StyleItem run)", "signatureAfterChange": " void shape (final int hdc, final StyleItem run)", "diff": ["+\tif (run.glyphs != 0) return;", "-\t\tint /*long*/ ssa = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, OS.SCRIPT_STRING_ANALYSIS_sizeof());", "-\t\tint /*long*/ metaFileDc = OS.CreateEnhMetaFile(hdc, null, null, null);", "-\t\tint /*long*/ oldMetaFont = OS.SelectObject(metaFileDc, hFont);", "-\t\tint flags = OS.SSA_METAFILE | OS.SSA_FALLBACK | OS.SSA_GLYPHS | OS.SSA_LINK;", "+\t\tint /*long*/ newFont = 0;", "-\t\tif (OS.ScriptStringAnalyse(metaFileDc, sampleChars, count, 0, -1, flags, 0, null, null, 0, 0, 0, ssa) == OS.S_OK) {", "-\t\t\tOS.ScriptStringOut(ssa, 0, 0, 0, null, 0, 0, false);", "-\t\t\tOS.ScriptStringFree(ssa);", "-\t\t}", "-\t\tOS.HeapFree(hHeap, 0, ssa);", "-\t\tOS.SelectObject(metaFileDc, oldMetaFont);", "-\t\tint /*long*/ metaFile = OS.CloseEnhMetaFile(metaFileDc);", "-\t\tfinal EMREXTCREATEFONTINDIRECTW emr = new EMREXTCREATEFONTINDIRECTW();", "-\t\tclass MetaFileEnumProc {", "-\t\t\tint /*long*/ metaFileEnumProc (int /*long*/ hDC, int /*long*/ table, int /*long*/ record, int /*long*/ nObj, int /*long*/ lpData) {", "-\t\t\t\tOS.MoveMemory(emr.emr, record, EMR.sizeof);", "-\t\t\t\tswitch (emr.emr.iType) {", "-\t\t\t\t\tcase OS.EMR_EXTCREATEFONTINDIRECTW:", "-\t\t\t\t\t\tOS.MoveMemory(emr, record, EMREXTCREATEFONTINDIRECTW.sizeof);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.EMR_EXTTEXTOUTW:", "-\t\t\t\t\t\treturn 0;", "-\t\t\t\t}", "-\t\t\t\treturn 1;", "+\t\tif (count > 0) {", "+\t\t\tint /*long*/ ssa = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, OS.SCRIPT_STRING_ANALYSIS_sizeof());", "+\t\t\tint /*long*/ metaFileDc = OS.CreateEnhMetaFile(hdc, null, null, null);", "+\t\t\tint /*long*/ oldMetaFont = OS.SelectObject(metaFileDc, hFont);", "+\t\t\tint flags = OS.SSA_METAFILE | OS.SSA_FALLBACK | OS.SSA_GLYPHS | OS.SSA_LINK;", "+\t\t\tif (OS.ScriptStringAnalyse(metaFileDc, sampleChars, count, 0, -1, flags, 0, null, null, 0, 0, 0, ssa) == OS.S_OK) {", "+\t\t\t\tOS.ScriptStringOut(ssa, 0, 0, 0, null, 0, 0, false);", "+\t\t\t\tOS.ScriptStringFree(ssa);", "-\t\t};", "-\t\tMetaFileEnumProc object = new MetaFileEnumProc();", "-\t\t/* Avoid compiler warnings */", "-\t\tboolean compilerWarningWorkaround = false;", "-\t\tif (compilerWarningWorkaround) object.metaFileEnumProc(0, 0, 0, 0, 0);", "-\t\tCallback callback = new Callback(object, \"metaFileEnumProc\", 5);", "-\t\tint /*long*/ address = callback.getAddress();", "-\t\tif (address == 0) SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\tOS.EnumEnhMetaFile(0, metaFile, address, 0, null);", "-\t\tOS.DeleteEnhMetaFile(metaFile);", "-\t\tcallback.dispose();", "-", "-\t\tint /*long*/ newFont = OS.CreateFontIndirectW(emr.elfw.elfLogFont);", "-\t\tOS.SelectObject(hdc, newFont);", "-\t\tif (shapeSucceed = shape(hdc, run, chars, buffer,  maxGlyphs, sp)) {", "-\t\t\trun.fallbackFont = newFont;", "+\t\t\tOS.HeapFree(hHeap, 0, ssa);", "+\t\t\tOS.SelectObject(metaFileDc, oldMetaFont);", "+\t\t\tint /*long*/ metaFile = OS.CloseEnhMetaFile(metaFileDc);", "+\t\t\tfinal EMREXTCREATEFONTINDIRECTW emr = new EMREXTCREATEFONTINDIRECTW();", "+\t\t\tclass MetaFileEnumProc {", "+\t\t\t\tint /*long*/ metaFileEnumProc (int /*long*/ hDC, int /*long*/ table, int /*long*/ record, int /*long*/ nObj, int /*long*/ lpData) {", "+\t\t\t\t\tOS.MoveMemory(emr.emr, record, EMR.sizeof);", "+\t\t\t\t\tswitch (emr.emr.iType) {", "+\t\t\t\t\t\tcase OS.EMR_EXTCREATEFONTINDIRECTW:", "+\t\t\t\t\t\t\tOS.MoveMemory(emr, record, EMREXTCREATEFONTINDIRECTW.sizeof);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tcase OS.EMR_EXTTEXTOUTW:", "+\t\t\t\t\t\t\treturn 0;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn 1;", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\tMetaFileEnumProc object = new MetaFileEnumProc();", "+\t\t\t/* Avoid compiler warnings */", "+\t\t\tboolean compilerWarningWorkaround = false;", "+\t\t\tif (compilerWarningWorkaround) object.metaFileEnumProc(0, 0, 0, 0, 0);", "+\t\t\tCallback callback = new Callback(object, \"metaFileEnumProc\", 5);", "+\t\t\tint /*long*/ address = callback.getAddress();", "+\t\t\tif (address == 0) SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\tOS.EnumEnhMetaFile(0, metaFile, address, 0, null);", "+\t\t\tOS.DeleteEnhMetaFile(metaFile);", "+\t\t\tcallback.dispose();", "+\t\t\tnewFont = OS.CreateFontIndirectW(emr.elfw.elfLogFont);", "+\t\t} else {", "+\t\t\t/*", "+\t\t\t* The run is composed only by white spaces, this happens when a run is split", "+\t\t\t* by a visual style. The font fallback for the script can not be determined", "+\t\t\t* using only white spaces. The solution is to use the font fallback of the ", "+\t\t\t* previous or next run of the same script.    ", "+\t\t\t*/", "+\t\t\tint index = 0;", "+\t\t\twhile (index < allRuns.length - 1) {", "+\t\t\t\tif (allRuns[index] == run) {", "+\t\t\t\t\tif (index > 0) {", "+\t\t\t\t\t\tStyleItem pRun = allRuns[index - 1];", "+\t\t\t\t\t\tif (pRun.fallbackFont != 0 && pRun.analysis.eScript == run.analysis.eScript) {", "+\t\t\t\t\t\t\tLOGFONT logFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW() : new LOGFONTA();", "+\t\t\t\t\t\t\tOS.GetObject(pRun.fallbackFont, LOGFONT.sizeof, logFont);", "+\t\t\t\t\t\t\tnewFont = OS.CreateFontIndirect(logFont);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (newFont == 0) {", "+\t\t\t\t\t\tif (index + 1 < allRuns.length - 1) {", "+\t\t\t\t\t\t\tStyleItem nRun = allRuns[index + 1];", "+\t\t\t\t\t\t\tif (nRun.analysis.eScript == run.analysis.eScript) {", "+\t\t\t\t\t\t\t\tshape(hdc, nRun);", "+\t\t\t\t\t\t\t\tif (nRun.fallbackFont != 0) {", "+\t\t\t\t\t\t\t\t\tLOGFONT logFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW() : new LOGFONTA();", "+\t\t\t\t\t\t\t\t\tOS.GetObject(nRun.fallbackFont, LOGFONT.sizeof, logFont);", "+\t\t\t\t\t\t\t\t\tnewFont = OS.CreateFontIndirect(logFont);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tindex++;", "+\t\t\t}", "+\t\t}", "+\t\tif (newFont != 0) {", "+\t\t\tOS.SelectObject(hdc, newFont);", "+\t\t\tif (shapeSucceed = shape(hdc, run, chars, buffer,  maxGlyphs, sp)) {", "+\t\t\t\trun.fallbackFont = newFont;", "+\t\t\t}", "-\t\tif (newFont != run.fallbackFont) OS.DeleteObject(newFont);", "+\t\tif (newFont != 0 && newFont != run.fallbackFont) OS.DeleteObject(newFont);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b8def17ab1020f0e6fc71b96dc7bc40", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "c434902e868dc31f4d87acdb50f51cbdb8752d24", "commitAfterChange": "046e0d0bfd6bae07f076caade40f57f2f865587f", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 65, "signatureBeforeChange": " void shape (final int hdc, final StyleItem run)", "signatureAfterChange": " void shape (final int hdc, final StyleItem run)", "diff": ["-\t", "-\t\tboolean useGDI = !sp.fComplex;", "-\t\t/*", "-\t\t* Bug in Windows.  There are non-complex scripts that are", "-\t\t* not supported by GDI. The fix is to detect these scripts", "-\t\t* by checking the Unicode ranges and use Uniscribe instead.", "-\t\t*   ", "-\t\t* These are the scripts: ", "-\t\t* \t0x0530..0x058F is Armenian", "-\t\t*   0x10A0..0x10FF is Georgian", "-\t\t*   0xA000..0xA4CF is Yi", "-\t\t*/", "-\t\tchar c = chars[0];", "-\t\tif (0x0530 <= c && c <= 0x058F || 0x10A0 <= c && c <= 0x10FF || 0xA000 <= c && c <= 0xA4CF) {", "-\t\t\tuseGDI = false;", "+\t\tint /*long*/ hFont = OS.GetCurrentObject(hdc, OS.OBJ_FONT);", "+\t\tint /*long*/ ssa = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, OS.SCRIPT_STRING_ANALYSIS_sizeof());", "+\t\tint /*long*/ metaFileDc = OS.CreateEnhMetaFile(hdc, null, null, null);", "+\t\tint /*long*/ oldMetaFont = OS.SelectObject(metaFileDc, hFont);", "+\t\tint flags = OS.SSA_METAFILE | OS.SSA_FALLBACK | OS.SSA_GLYPHS | OS.SSA_LINK;", "+\t\tif (OS.ScriptStringAnalyse(metaFileDc, chars, chars.length, 0, -1, flags, 0, null, null, 0, 0, 0, ssa) == OS.S_OK) {", "+\t\t\tOS.ScriptStringOut(ssa, 0, 0, 0, null, 0, 0, false);", "+\t\t\tOS.ScriptStringFree(ssa);", "-\t\tif (useGDI) {", "-\t\t\tint /*long*/ hFont = OS.GetCurrentObject(hdc, OS.OBJ_FONT);", "-\t\t\tLOGFONT logFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW () : new LOGFONTA ();", "-\t\t\tOS.GetObject(hFont, LOGFONT.sizeof, logFont);", "-\t\t\tLOGFONT systemLogFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW () : new LOGFONTA ();", "-\t\t\tOS.GetObject(device.systemFont.handle, LOGFONT.sizeof, systemLogFont);", "-\t\t\tsystemLogFont.lfHeight = logFont.lfHeight;", "-\t\t\tsystemLogFont.lfWeight = logFont.lfWeight;", "-\t\t\tsystemLogFont.lfItalic = logFont.lfItalic;", "-\t\t\tsystemLogFont.lfWidth = logFont.lfWidth;", "-\t\t\tint /*long*/ newFont = OS.CreateFontIndirect (systemLogFont);", "-\t\t\tOS.SelectObject(hdc, newFont);", "-\t\t\trun.analysis.fNoGlyphIndex = true;", "-\t\t\tshapeSucceed = shape(hdc, run, chars, buffer,  maxGlyphs, sp);", "-\t\t\tif (shapeSucceed) {", "-\t\t\t\trun.fallbackFont = newFont;", "-\t\t\t} else {", "-\t\t\t\tOS.SelectObject(hdc, hFont);", "-\t\t\t\tOS.DeleteObject(newFont);", "-\t\t\t\trun.analysis.fNoGlyphIndex = false;", "-\t\t\t}", "-\t\t}", "-\t}", "-\t", "-\tif (!shapeSucceed) {", "-\t\t/*", "-\t\t* Shape Failed.", "-\t\t* Try to use MLANG to find a suitable font to shape the run.  ", "-\t\t*/", "-\t\tif (mLangFontLink2 != 0) {", "-\t\t\tint[] dwCodePages = new int[1];", "-\t\t\tint[] cchCodePages = new int[1];", "-\t\t\t/* GetStrCodePages() */", "-\t\t\tOS.VtblCall(4, mLangFontLink2, chars, chars.length, 0, dwCodePages, cchCodePages);", "-\t\t\tint /*long*/[] hNewFont = new int /*long*/[1];", "-\t\t\t/* MapFont() */", "-\t\t\tif (OS.VtblCall(10, mLangFontLink2, hdc, dwCodePages[0], chars[0], hNewFont) == OS.S_OK) {", "-\t\t\t\tint /*long*/ hFont = OS.SelectObject(hdc, hNewFont[0]);", "-\t\t\t\tshapeSucceed = shape(hdc, run, chars, buffer,  maxGlyphs, sp);", "-\t\t\t\tif (shapeSucceed) {", "-\t\t\t\t\trun.fallbackFont = hNewFont[0];", "-\t\t\t\t\trun.mlang = true;", "-\t\t\t\t} else {", "-\t\t\t\t\t/* ReleaseFont() */", "-\t\t\t\t\tOS.VtblCall(8, mLangFontLink2, hNewFont[0]);", "-\t\t\t\t\tOS.SelectObject(hdc, hFont);", "+\t\tOS.HeapFree(hHeap, 0, ssa);", "+\t\tOS.SelectObject(metaFileDc, oldMetaFont);", "+\t\tint /*long*/ metaFile = OS.CloseEnhMetaFile(metaFileDc);", "+\t\tfinal EMREXTCREATEFONTINDIRECTW emr = new EMREXTCREATEFONTINDIRECTW();", "+\t\tclass MetaFileEnumProc {", "+\t\t\tint /*long*/ metaFileEnumProc (int /*long*/ hDC, int /*long*/ table, int /*long*/ record, int /*long*/ nObj, int /*long*/ lpData) {", "+\t\t\t\tOS.MoveMemory(emr.emr, record, EMR.sizeof);", "+\t\t\t\tswitch (emr.emr.iType) {", "+\t\t\t\t\tcase OS.EMR_EXTCREATEFONTINDIRECTW:", "+\t\t\t\t\t\tOS.MoveMemory(emr, record, EMREXTCREATEFONTINDIRECTW.sizeof);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OS.EMR_EXTTEXTOUTW:", "+\t\t\t\t\t\treturn 0;", "+\t\t\t\treturn 1;", "+\t\t};", "+\t\tMetaFileEnumProc object = new MetaFileEnumProc();", "+\t\t/* Avoid compiler warnings */", "+\t\tif (false) object.metaFileEnumProc(0, 0, 0, 0, 0);", "+\t\tCallback callback = new Callback(object, \"metaFileEnumProc\", 5);", "+\t\tint /*long*/ address = callback.getAddress();", "+\t\tif (address == 0) SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tOS.EnumEnhMetaFile(0, metaFile, address, 0, null);", "+\t\tOS.DeleteEnhMetaFile(metaFile);", "+\t\tcallback.dispose();", "+", "+\t\tint /*long*/ newFont = OS.CreateFontIndirectW(emr.elfw.elfLogFont);", "+\t\tOS.SelectObject(hdc, newFont);", "+\t\tif (shapeSucceed = shape(hdc, run, chars, buffer,  maxGlyphs, sp)) {", "+\t\t\trun.fallbackFont = newFont;", "-\t}", "-\t", "-\tif (!shapeSucceed) {", "-\t\t/*", "-\t\t* Shape Failed.", "-\t\t* Try to shape the run using the LOGFONT in the cache.", "-\t\t*/", "-\t\tfinal int /*long*/ hFont = OS.GetCurrentObject(hdc, OS.OBJ_FONT);", "-\t\tfinal LOGFONT logFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW () : new LOGFONTA ();", "-\t\tOS.GetObject(hFont, LOGFONT.sizeof, logFont);", "-\t\t", "-\t\tLOGFONT cachedLogFont = device.logFontsCache != null ? device.logFontsCache[script] : null;", "-\t\tif (cachedLogFont != null) {", "-\t\t\tcachedLogFont.lfHeight = logFont.lfHeight;", "-\t\t\tcachedLogFont.lfWeight = logFont.lfWeight;", "-\t\t\tcachedLogFont.lfItalic = logFont.lfItalic;", "-\t\t\tcachedLogFont.lfWidth = logFont.lfWidth;", "-\t\t\tint /*long*/ newFont = OS.CreateFontIndirect(cachedLogFont);", "-\t\t\tOS.SelectObject(hdc, newFont);", "-\t\t\tshapeSucceed = shape(hdc, run, chars, buffer,  maxGlyphs, sp);", "-\t\t\tif (shapeSucceed) {", "-\t\t\t\trun.fallbackFont = newFont;", "-\t\t\t} else {", "-\t\t\t\tOS.SelectObject(hdc, hFont);", "-\t\t\t\tOS.DeleteObject(newFont);", "+\t\tif (!shapeSucceed) {", "+\t\t\tif (!sp.fComplex) {", "+\t\t\t\trun.analysis.fNoGlyphIndex = true;", "+\t\t\t\tif (shapeSucceed = shape(hdc, run, chars, buffer,  maxGlyphs, sp)) {", "+\t\t\t\t\trun.fallbackFont = newFont;", "+\t\t\t\t} else {", "+\t\t\t\t\trun.analysis.fNoGlyphIndex = false;", "+\t\t\t\t}", "-\t\t\t/*", "-\t\t\t* Shape Failed.", "-\t\t\t* Use EnumFontFamExProc to iterate over every font in the system that supports ", "-\t\t\t* the charset of the run and try to shape it.  ", "-\t\t\t*/", "-\t\t\tif (device.logFontsCache == null) device.logFontsCache = new LOGFONT[device.scripts.length];", "-\t\t\tfinal LOGFONT newLogFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW () : new LOGFONTA ();", "-\t\t\tclass EnumFontFamEx {", "-\t\t\t\tint /*long*/ EnumFontFamExProc (int /*long*/ lpelfe, int /*long*/ lpntme, int /*long*/ FontType, int /*long*/ lParam) {", "-\t\t\t\t\tif (FontType == OS.RASTER_FONTTYPE) return 1;", "-\t\t\t\t\tOS.MoveMemory(newLogFont, lpelfe, LOGFONT.sizeof);", "-\t\t\t\t\tnewLogFont.lfHeight = logFont.lfHeight;", "-\t\t\t\t\tnewLogFont.lfWeight = logFont.lfWeight;", "-\t\t\t\t\tnewLogFont.lfItalic = logFont.lfItalic;", "-\t\t\t\t\tnewLogFont.lfWidth = logFont.lfWidth;", "-\t\t\t\t\tint /*long*/ newFont = OS.CreateFontIndirect(newLogFont);", "-\t\t\t\t\tOS.SelectObject(hdc, newFont);", "-\t\t\t\t\tif (shape(hdc, run, chars, buffer, maxGlyphs, sp)) {", "-\t\t\t\t\t\trun.fallbackFont = newFont;", "-\t\t\t\t\t\tLOGFONT cacheLogFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW () : new LOGFONTA ();", "-\t\t\t\t\t\tOS.MoveMemory(cacheLogFont, lpelfe, LOGFONT.sizeof);", "-\t\t\t\t\t\tdevice.logFontsCache[script] = cacheLogFont;", "-\t\t\t\t\t\treturn 0;", "+\t\t\tif (mLangFontLink2 != 0) {", "+\t\t\t\tint /*long*/[] hNewFont = new int /*long*/[1];", "+\t\t\t\tint[] dwCodePages = new int[1], cchCodePages = new int[1];", "+\t\t\t\t/* GetStrCodePages() */", "+\t\t\t\tOS.VtblCall(4, mLangFontLink2, chars, chars.length, 0, dwCodePages, cchCodePages);", "+\t\t\t\t/* MapFont() */", "+\t\t\t\tif (OS.VtblCall(10, mLangFontLink2, hdc, dwCodePages[0], chars[0], hNewFont) == OS.S_OK) {", "+\t\t\t\t\tLOGFONT logFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW () : new LOGFONTA ();", "+\t\t\t\t\tOS.GetObject(hNewFont[0], LOGFONT.sizeof, logFont);", "+\t\t\t\t\t/* ReleaseFont() */", "+\t\t\t\t\tOS.VtblCall(8, mLangFontLink2, hNewFont[0]);", "+\t\t\t\t\tint /*long*/ mLangFont = OS.CreateFontIndirect(logFont);", "+\t\t\t\t\tint /*long*/ oldFont = OS.SelectObject(hdc, mLangFont);", "+\t\t\t\t\tif (shapeSucceed = shape(hdc, run, chars, buffer,  maxGlyphs, sp)) {", "+\t\t\t\t\t\trun.fallbackFont = mLangFont;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tOS.SelectObject(hdc, oldFont);", "+\t\t\t\t\t\tOS.DeleteObject(mLangFont);", "-\t\t\t\t\tOS.SelectObject(hdc, hFont);", "-\t\t\t\t\tOS.DeleteObject(newFont);", "-\t\t\t\t\treturn 1;", "-\t\t\t};", "-\t\t\tEnumFontFamEx object = new EnumFontFamEx();", "-\t\t\t/* Avoid compiler warnings */", "-\t\t\tif (false) object.EnumFontFamExProc(0, 0, 0, 0);", "-\t\t\tCallback callback = new Callback(object, \"EnumFontFamExProc\", 4);", "-\t\t\tint /*long*/ address = callback.getAddress();", "-\t\t\tif (address == 0) SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\t\tint charSet = sp.fAmbiguousCharSet ? OS.DEFAULT_CHARSET : sp.bCharSet;", "-\t\t\tnewLogFont.lfCharSet = (byte)charSet;", "-\t\t\tOS.EnumFontFamiliesEx(hdc, newLogFont, address, 0, 0);", "-\t\t\tcallback.dispose();", "-\t\t\tshapeSucceed = run.fallbackFont != 0;", "+\t\t\t}", "+\t\tif (!shapeSucceed) OS.SelectObject(hdc, hFont);", "+\t\tif (newFont != run.fallbackFont) OS.DeleteObject(newFont);"]}], "num": 60018}
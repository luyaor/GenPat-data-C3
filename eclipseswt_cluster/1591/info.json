{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df38aca978313a66498a46d8bc8c45c7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10fe282fa25e1925343823aafc44b12e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "f38df13bd7af7959ae0ca2346c7ead3cd479229c", "commitAfterChange": "8b84632c2f3dc5a814ce4ed07bfdc5adf0c52ec6", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r public void setDefaultButton (Button button)", "signatureAfterChange": "\r public void setDefaultButton (Button button)", "diff": ["+\tint buttonHandle= 0;\r", "-\t\tif (button.isDisposed()) return;\r", "-\t\tOS.gtk_window_set_default(topHandle(), button.handle);\r", "-\t\treturn;\r", "+\t\tif (button.isDisposed()) error(SWT.ERROR_INVALID_ARGUMENT);\r", "+\t\tbuttonHandle = button.handle;\r", "-\telse OS.gtk_window_set_default(topHandle(), 0);\r", "+\tOS.gtk_window_set_default(topHandle(), buttonHandle);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4652cef87bc134411b42cc1da5d8090", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "a397adb9835229656215e95243704829dfcbbeb5", "commitAfterChange": "def775014633899bdd73c908cbbdd1bf2fa7d5be", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tint atkSelection_is_child_selected (int index)", "signatureAfterChange": "  \tint atkSelection_is_child_selected (int index)", "diff": ["-\t\tif (accessible.getControlListeners ().length != 0) {", "-\t\t\tAccessibleControlListener[] listeners = accessible.getControlListeners ();", "-\t\t\tAccessibleControlEvent event = new AccessibleControlEvent (this);", "-\t\t\tevent.childID = id;", "-\t\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\t\tlisteners [i].getSelection (event);", "-\t\t\t}", "-\t\t\tAccessibleObject accessibleObject = getChildByID (event.childID);", "-\t\t\tif (accessibleObject != null) { ", "-\t\t\t\treturn accessibleObject.index == index ? 1 : 0;", "-\t\t\t}", "-\t\t}", "+\t\tint parentResult = 0;", "-\t\t\tint superType = OS.g_type_class_peek (parentType);", "+\t\t\tint superType = OS.g_type_interface_peek_parent (ATK.ATK_SELECTION_GET_IFACE (handle));", "-\t\t\t\treturn OS.call (selectionIface.is_child_selected, handle, index);", "+\t\t\t\tparentResult = OS.call (selectionIface.is_child_selected, handle, index);", "-\t\treturn 0;", "+\t\tAccessibleControlListener[] listeners = accessible.getControlListeners ();", "+\t\tif (listeners.length == 0) return parentResult;", "+\t\t\t", "+\t\tAccessibleControlEvent event = new AccessibleControlEvent (this);", "+\t\tevent.childID = id;", "+\t\tfor (int i = 0; i < listeners.length; i++) {", "+\t\t\tlisteners [i].getSelection (event);", "+\t\t}", "+\t\tAccessibleObject accessibleObject = getChildByID (event.childID);", "+\t\tif (accessibleObject != null) { ", "+\t\t\treturn accessibleObject.index == index ? 1 : 0;", "+\t\t}", "+\t\treturn parentResult;"]}], "num": 1591}
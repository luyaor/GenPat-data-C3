{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "249140bc30ca4eb48a128e4fe88b7f5c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ba9c6e535059058e3546a3ede4e8008", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "c7b8a47b4f881fe023685c003812d64dd2d51c15", "commitAfterChange": "1b9976550b7657aeb02ff183aeee4687e9c1685e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tint count = OS.SendMessage (handle, OS.CB_GETCOUNT, 0, 0);", "-\tint itemHeight = OS.SendMessage (handle, OS.CB_GETITEMHEIGHT, 0, 0);", "-\tint width = 0, height = 0;", "-\tif ((style & SWT.SIMPLE) != 0) height = count * itemHeight;", "-\tint newFont, oldFont = 0;", "-\tint hDC = OS.GetDC (handle);", "-\tnewFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "-\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "-\tRECT rect = new RECT ();", "-\tint flags = OS.DT_CALCRECT | OS.DT_NOPREFIX;", "-\tif ((style & SWT.READ_ONLY) == 0) flags |= OS.DT_EDITCONTROL;", "-\tint length = OS.GetWindowTextLength (handle);", "-\tint cp = getCodePage ();", "-\tTCHAR buffer = new TCHAR (cp, length + 1);", "-\tOS.GetWindowText (handle, buffer, length + 1);", "-\tOS.DrawText (hDC, buffer, length, rect, flags);", "-\twidth = Math.max (width, rect.right - rect.left);", "-\tfor (int i=0; i<count; i++) {", "-\t\tlength = OS.SendMessage (handle, OS.CB_GETLBTEXTLEN, i, 0);", "-\t\tif (length != OS.CB_ERR) {", "-\t\t\tif (length + 1 > buffer.length ()) buffer = new TCHAR (cp, length + 1);", "-\t\t\tint result = OS.SendMessage (handle, OS.CB_GETLBTEXT, i, buffer);", "-\t\t\tif (result != OS.CB_ERR) {", "-\t\t\t\tOS.DrawText (hDC, buffer, length, rect, flags);", "-\t\t\t\twidth = Math.max (width, rect.right - rect.left);", "+\tint width = 0, height = 0, tmInternalLeading = 0;", "+\tif (wHint == SWT.DEFAULT) {", "+\t\tint newFont, oldFont = 0;", "+\t\tint hDC = OS.GetDC (handle);", "+\t\tnewFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "+\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "+\t\tint count = OS.SendMessage (handle, OS.CB_GETCOUNT, 0, 0);", "+\t\tRECT rect = new RECT ();", "+\t\tint flags = OS.DT_CALCRECT | OS.DT_NOPREFIX;", "+\t\tif ((style & SWT.READ_ONLY) == 0) flags |= OS.DT_EDITCONTROL;", "+\t\tint length = OS.GetWindowTextLength (handle);", "+\t\tint cp = getCodePage ();", "+\t\tTCHAR buffer = new TCHAR (cp, length + 1);", "+\t\tOS.GetWindowText (handle, buffer, length + 1);", "+\t\tOS.DrawText (hDC, buffer, length, rect, flags);", "+\t\twidth = Math.max (width, rect.right - rect.left);", "+\t\tfor (int i=0; i<count; i++) {", "+\t\t\tlength = OS.SendMessage (handle, OS.CB_GETLBTEXTLEN, i, 0);", "+\t\t\tif (length != OS.CB_ERR) {", "+\t\t\t\tif (length + 1 > buffer.length ()) buffer = new TCHAR (cp, length + 1);", "+\t\t\t\tint result = OS.SendMessage (handle, OS.CB_GETLBTEXT, i, buffer);", "+\t\t\t\tif (result != OS.CB_ERR) {", "+\t\t\t\t\tOS.DrawText (hDC, buffer, length, rect, flags);", "+\t\t\t\t\twidth = Math.max (width, rect.right - rect.left);", "+\t\t\t\t}", "+\t\t}", "+\t\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\t\tTEXTMETRIC tm = OS.IsUnicode ? (TEXTMETRIC) new TEXTMETRICW () : new TEXTMETRICA ();", "+\t\t\tOS.GetTextMetrics (hDC, tm);", "+\t\t\ttmInternalLeading = tm.tmInternalLeading;", "+\t\t}", "+\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "+\t\tOS.ReleaseDC (handle, hDC);", "+\t}", "+\tif (hHint == SWT.DEFAULT) {", "+\t\tif ((style & SWT.SIMPLE) != 0) {", "+\t\t\tint count = OS.SendMessage (handle, OS.CB_GETCOUNT, 0, 0);", "+\t\t\tint itemHeight = OS.SendMessage (handle, OS.CB_GETITEMHEIGHT, 0, 0);", "+\t\t\theight = count * itemHeight;", "-\tint border = OS.GetSystemMetrics (OS.SM_CXEDGE);", "-\t\tTEXTMETRIC tm = OS.IsUnicode ? (TEXTMETRIC) new TEXTMETRICW () : new TEXTMETRICA ();", "-\t\tOS.GetTextMetrics (hDC, tm);", "-\t\twidth += tm.tmInternalLeading * 2;", "+\t\twidth += tmInternalLeading * 2;", "+\tint border = OS.GetSystemMetrics (OS.SM_CXEDGE);", "-\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "-\tOS.ReleaseDC (handle, hDC);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1500c77bb9d5760f88ba6b6cc9c261d3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "e2c2a7a74542ff409e980bc4b2fbaa161b141be9", "commitAfterChange": "06b0b6bb52d1fd2fb63bfd651ac4ecf3e0f11d0d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\tint newFont, oldFont = 0;", "-\t\tint hDC = OS.GetDC (handle);", "-\t\tnewFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "-\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "-\t\tint count = OS.SendMessage (handle, OS.CB_GETCOUNT, 0, 0);", "-\t\tRECT rect = new RECT ();", "-\t\tint flags = OS.DT_CALCRECT | OS.DT_NOPREFIX;", "-\t\tif ((style & SWT.READ_ONLY) == 0) flags |= OS.DT_EDITCONTROL;", "-\t\tint length = OS.GetWindowTextLength (handle);", "-\t\tint cp = getCodePage ();", "-\t\tTCHAR buffer = new TCHAR (cp, length + 1);", "-\t\tOS.GetWindowText (handle, buffer, length + 1);", "-\t\tOS.DrawText (hDC, buffer, length, rect, flags);", "-\t\twidth = Math.max (width, rect.right - rect.left);", "-\t\tfor (int i=0; i<count; i++) {", "-\t\t\tlength = OS.SendMessage (handle, OS.CB_GETLBTEXTLEN, i, 0);", "-\t\t\tif (length != OS.CB_ERR) {", "-\t\t\t\tif (length + 1 > buffer.length ()) buffer = new TCHAR (cp, length + 1);", "-\t\t\t\tint result = OS.SendMessage (handle, OS.CB_GETLBTEXT, i, buffer);", "-\t\t\t\tif (result != OS.CB_ERR) {", "-\t\t\t\t\tOS.DrawText (hDC, buffer, length, rect, flags);", "-\t\t\t\t\twidth = Math.max (width, rect.right - rect.left);", "+\t\tif ((style & SWT.H_SCROLL) != 0) {", "+\t\t\twidth = OS.SendMessage (handle, OS.CB_GETHORIZONTALEXTENT, 0, 0);", "+\t\t} else {", "+\t\t\tint newFont, oldFont = 0;", "+\t\t\tint hDC = OS.GetDC (handle);", "+\t\t\tnewFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "+\t\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "+\t\t\tint count = OS.SendMessage (handle, OS.CB_GETCOUNT, 0, 0);", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tint flags = OS.DT_CALCRECT | OS.DT_NOPREFIX;", "+\t\t\tif ((style & SWT.READ_ONLY) == 0) flags |= OS.DT_EDITCONTROL;", "+\t\t\tint length = OS.GetWindowTextLength (handle);", "+\t\t\tint cp = getCodePage ();", "+\t\t\tTCHAR buffer = new TCHAR (cp, length + 1);", "+\t\t\tOS.GetWindowText (handle, buffer, length + 1);", "+\t\t\tOS.DrawText (hDC, buffer, length, rect, flags);", "+\t\t\twidth = Math.max (width, rect.right - rect.left);", "+\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\tlength = OS.SendMessage (handle, OS.CB_GETLBTEXTLEN, i, 0);", "+\t\t\t\tif (length != OS.CB_ERR) {", "+\t\t\t\t\tif (length + 1 > buffer.length ()) buffer = new TCHAR (cp, length + 1);", "+\t\t\t\t\tint result = OS.SendMessage (handle, OS.CB_GETLBTEXT, i, buffer);", "+\t\t\t\t\tif (result != OS.CB_ERR) {", "+\t\t\t\t\t\tOS.DrawText (hDC, buffer, length, rect, flags);", "+\t\t\t\t\t\twidth = Math.max (width, rect.right - rect.left);", "+\t\t\t\t\t}", "+\t\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "+\t\t\tOS.ReleaseDC (handle, hDC);", "-\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "-\t\tOS.ReleaseDC (handle, hDC);", "+\tif ((style & SWT.H_SCROLL) != 0) height += OS.GetSystemMetrics (OS.SM_CYHSCROLL);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "457cc64ef371966047420636344abcfd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "4b56816ed07a329f964409d0e4a8083328f0170e", "commitAfterChange": "aa954a829806c60747c6d3d072adbc875dc61bcd", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 56, "signatureBeforeChange": "  long windowProc (long hwnd, int msg, long wParam, long lParam)", "signatureAfterChange": "  long windowProc (long hwnd, int msg, long wParam, long lParam)", "diff": ["-\tif (!OS.IsUnicode || handle == 0 || lParam == 0 || (state & HAS_AUTO_DIRECTION) == 0) {", "-\t\treturn callWindowProc (hwnd, msg, wParam, lParam);", "+\t/* Below code is to support auto text direction. */", "+\tif (OS.IsUnicode && handle != 0 && lParam != 0 && (state & HAS_AUTO_DIRECTION) != 0) {", "+\t\tswitch (msg) {", "+\t\t\tcase OS.LB_ADDSTRING:", "+\t\t\tcase OS.LB_INSERTSTRING:", "+\t\t\tcase OS.LB_FINDSTRINGEXACT:", "+\t\t\t\tint length = OS.wcslen (lParam); // we are always Unicode here", "+\t\t\t\tint cp = getCodePage ();", "+\t\t\t\tTCHAR buffer = new TCHAR (cp, length);", "+\t\t\t\tOS.MoveMemory (buffer, lParam, buffer.length () * TCHAR.sizeof);", "+\t\t\t\tString string = buffer.toString (0, length);", "+\t\t\t\tint direction = resolveTextDirection (string);", "+\t\t\t\tif (direction == SWT.NONE) {", "+\t\t\t\t\t/*", "+\t\t\t\t\t * Force adding a UCC even when no strong characters are found.", "+\t\t\t\t\t * Otherwise, the List items would retain the old direction,", "+\t\t\t\t\t * which might be inappropriate for the new text.", "+\t\t\t\t\t */", "+\t\t\t\t\tdirection = (style & SWT.RIGHT_TO_LEFT) != 0 ? SWT.RIGHT_TO_LEFT : SWT.LEFT_TO_RIGHT;", "+\t\t\t\t}", "+\t\t\t\tstring = (direction == SWT.RIGHT_TO_LEFT ? RLE : LRE) + string;", "+\t\t\t\tbuffer = new TCHAR (cp, string, true);", "+\t\t\t\tlong /*int*/ hHeap = OS.GetProcessHeap ();", "+\t\t\t\tlength = buffer.length() * TCHAR.sizeof;", "+\t\t\t\tlong /*int*/ pszText = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, length);", "+\t\t\t\tOS.MoveMemory (pszText, buffer, length); ", "+\t\t\t\tlong /*int*/ code = super.windowProc (hwnd, msg, wParam, pszText);", "+\t\t\t\tOS.HeapFree (hHeap, 0, pszText);", "+\t\t\t\taddedUCC = true;", "+\t\t\t\treturn code;", "+\t\t}", "-\tswitch (msg) {", "-\t\tcase OS.LB_ADDSTRING:", "-\t\tcase OS.LB_INSERTSTRING:", "-\t\tcase OS.LB_FINDSTRINGEXACT:", "-\t\t\tint length = OS.wcslen (lParam); // we are always Unicode here", "-\t\t\tint cp = getCodePage ();", "-\t\t\tTCHAR buffer = new TCHAR (cp, length);", "-\t\t\tOS.MoveMemory (buffer, lParam, buffer.length () * TCHAR.sizeof);", "-\t\t\tString string = buffer.toString (0, length);", "-\t\t\tint direction = resolveTextDirection (string);", "-\t\t\tif (direction == SWT.NONE) {", "-\t\t\t\t/*", "-\t\t\t\t * Force adding a UCC even when no strong characters are found.", "-\t\t\t\t * Otherwise, the List items would retain the old direction,", "-\t\t\t\t * which might be inappropriate for the new text.", "-\t\t\t\t */", "-\t\t\t\tdirection = (style & SWT.RIGHT_TO_LEFT) != 0 ? SWT.RIGHT_TO_LEFT : SWT.LEFT_TO_RIGHT;", "-\t\t\t}", "-\t\t\tstring = (direction == SWT.RIGHT_TO_LEFT ? RLE : LRE) + string;", "-\t\t\tbuffer = new TCHAR (cp, string, true);", "-\t\t\tlong /*int*/ hHeap = OS.GetProcessHeap ();", "-\t\t\tlength = buffer.length() * TCHAR.sizeof;", "-\t\t\tlong /*int*/ pszText = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, length);", "-\t\t\tOS.MoveMemory (pszText, buffer, length); ", "-\t\t\tlong /*int*/ code = super.windowProc (hwnd, msg, wParam, pszText);", "-\t\t\tOS.HeapFree (hHeap, 0, pszText);", "-\t\t\taddedUCC = true;", "-\t\t\treturn code;", "-\t}", "-\treturn callWindowProc (hwnd, msg, wParam, lParam);", "+\treturn super.windowProc (hwnd, msg, wParam, lParam);"]}], "num": 24414}
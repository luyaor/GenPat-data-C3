{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31759625a0f69584a71328191762acda", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b27df6afb5c738a4211d4c4036b76484", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "caa512aad37dedd16ed84b5d8b521cfb5fd78adc", "commitAfterChange": "30a9563f38681ae614bc8194165e01d676d62b8c", "methodNumberBeforeChange": 144, "methodNumberAfterChange": 148, "signatureBeforeChange": "  int HandleEvent (int event)", "signatureAfterChange": "  int HandleEvent (int event)", "diff": ["-\tif (XPCOM.DOMEVENT_FOCUS.equals (typeString)) {", "-\t\tdelegate.handleFocus ();", "-\t} else if (XPCOM.DOMEVENT_UNLOAD.equals (typeString)) {", "+\tif (XPCOM.DOMEVENT_UNLOAD.equals (typeString)) {", "-\t\tresult[0] = 0;", "-\t\tnsEmbedString string = new nsEmbedString (XPCOM.DOMEVENT_FOCUS);", "-\t\trc = target.RemoveEventListener (string.getAddress (), domEventListener.getAddress (), false);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tstring.dispose ();", "-\t\tstring = new nsEmbedString (XPCOM.DOMEVENT_UNLOAD);", "-\t\trc = target.RemoveEventListener (string.getAddress (), domEventListener.getAddress (), false);", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tstring.dispose ();", "+\t\tunhookDOMListeners (target);", "+\t\treturn XPCOM.NS_OK;", "+\t}", "+", "+\tif (XPCOM.DOMEVENT_FOCUS.equals (typeString)) {", "+\t\tdelegate.handleFocus ();", "+\t\treturn XPCOM.NS_OK;", "+\t}", "+", "+\t/* mouse event */", "+", "+\tint /*long*/[] result = new int /*long*/[1];", "+\trc = domEvent.QueryInterface (nsIDOMMouseEvent.NS_IDOMMOUSEEVENT_IID, result);", "+\tif (rc != XPCOM.NS_OK) error (rc);", "+\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\tnsIDOMMouseEvent domMouseEvent = new nsIDOMMouseEvent (result[0]);", "+\tresult[0] = 0;", "+", "+\t/*", "+\t * MouseOver and MouseOut events are fired any time the mouse enters or exits", "+\t * any element within the Browser.  To ensure that SWT events are only", "+\t * fired for mouse movements into or out of the Browser, do not fire an", "+\t * event if the element being exited (on MouseOver) or entered (on MouseExit)", "+\t * is within the Browser.", "+\t */", "+\tif (XPCOM.DOMEVENT_MOUSEOVER.equals (typeString) || XPCOM.DOMEVENT_MOUSEOUT.equals (typeString)) {", "+\t\trc = domMouseEvent.GetRelatedTarget (result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] != 0) {", "+\t\t\tdomMouseEvent.Release ();", "+\t\t\treturn XPCOM.NS_OK;", "+\t\t}", "+\t}", "+", "+\tint[] aClientX = new int[1], aClientY = new int[1], aDetail = new int[1]; /* PRInt32 */", "+\trc = domMouseEvent.GetClientX (aClientX);", "+\tif (rc != XPCOM.NS_OK) error (rc);", "+\trc = domMouseEvent.GetClientY (aClientY);", "+\tif (rc != XPCOM.NS_OK) error (rc);", "+\trc = domMouseEvent.GetDetail (aDetail);", "+\tif (rc != XPCOM.NS_OK) error (rc);", "+\tshort[] aButton = new short[1]; /* PRUint16 */", "+\trc = domMouseEvent.GetButton (aButton);", "+\tif (rc != XPCOM.NS_OK) error (rc);", "+\tboolean[] aAltKey = new boolean[1], aCtrlKey = new boolean[1], aShiftKey = new boolean[1]; ", "+\trc = domMouseEvent.GetAltKey (aAltKey);", "+\tif (rc != XPCOM.NS_OK) error (rc);", "+\trc = domMouseEvent.GetCtrlKey (aCtrlKey);", "+\tif (rc != XPCOM.NS_OK) error (rc);", "+\trc = domMouseEvent.GetShiftKey (aShiftKey);", "+\tif (rc != XPCOM.NS_OK) error (rc);", "+\tdomMouseEvent.Release ();", "+", "+\tEvent mouseEvent = new Event ();", "+\tmouseEvent.widget = browser;", "+\tmouseEvent.x = aClientX[0]; mouseEvent.y = aClientY[0];", "+\tmouseEvent.stateMask = (aAltKey[0] ? SWT.ALT : 0) | (aCtrlKey[0] ? SWT.CTRL : 0) | (aShiftKey[0] ? SWT.SHIFT : 0);", "+", "+\tif (XPCOM.DOMEVENT_MOUSEDOWN.equals (typeString)) {", "+\t\tmouseEvent.type = SWT.MouseDown;", "+\t\tmouseEvent.button = aButton[0] + 1;", "+\t\tmouseEvent.count = aDetail[0];", "+\t} else if (XPCOM.DOMEVENT_MOUSEUP.equals (typeString)) {", "+\t\tmouseEvent.type = SWT.MouseUp;", "+\t\tmouseEvent.button = aButton[0] + 1;", "+\t\tmouseEvent.count = aDetail[0];", "+\t} else if (XPCOM.DOMEVENT_MOUSEMOVE.equals (typeString)) {", "+\t\tmouseEvent.type = SWT.MouseMove;", "+\t} else if (XPCOM.DOMEVENT_MOUSEOVER.equals (typeString)) {", "+\t\tmouseEvent.type = SWT.MouseEnter;", "+\t} else if (XPCOM.DOMEVENT_MOUSEOUT.equals (typeString)) {", "+\t\tmouseEvent.type = SWT.MouseExit;", "+\t}", "+", "+\tbrowser.notifyListeners (mouseEvent.type, mouseEvent);", "+\tif (aDetail[0] == 2 && XPCOM.DOMEVENT_MOUSEDOWN.equals (typeString)) {", "+\t\tmouseEvent = new Event ();", "+\t\tmouseEvent.widget = browser;", "+\t\tmouseEvent.x = aClientX[0]; mouseEvent.y = aClientY[0];", "+\t\tmouseEvent.stateMask = (aAltKey[0] ? SWT.ALT : 0) | (aCtrlKey[0] ? SWT.CTRL : 0) | (aShiftKey[0] ? SWT.SHIFT : 0);", "+\t\tmouseEvent.type = SWT.MouseDoubleClick;", "+\t\tmouseEvent.button = aButton[0] + 1;", "+\t\tmouseEvent.count = aDetail[0];", "+\t\tbrowser.notifyListeners (mouseEvent.type, mouseEvent);\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "150dd3637d47496e6eeb999325599b9a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "b6d63697d93cb9f75fd821f66bd8fc084e724f13", "commitAfterChange": "15ec5c8e79c9345376b7505c278118c20f985176", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 57, "signatureBeforeChange": "  void handleEvent(int evt)", "signatureAfterChange": "  void handleEvent(int evt)", "diff": ["+\tboolean ctrl = Cocoa.objc_msgSend(evt, Cocoa.S_ctrlKey) != 0;", "+\tboolean shift = Cocoa.objc_msgSend(evt, Cocoa.S_shiftKey) != 0;", "+\tboolean alt = Cocoa.objc_msgSend(evt, Cocoa.S_altKey) != 0;", "+\tboolean meta = Cocoa.objc_msgSend(evt, Cocoa.S_metaKey) != 0;", "+", "-\t\tboolean ctrl = Cocoa.objc_msgSend(evt, Cocoa.S_ctrlKey) != 0;", "-\t\tboolean shift = Cocoa.objc_msgSend(evt, Cocoa.S_shiftKey) != 0;", "-\t\tboolean alt = Cocoa.objc_msgSend(evt, Cocoa.S_altKey) != 0;", "-\t\tboolean meta = Cocoa.objc_msgSend(evt, Cocoa.S_metaKey) != 0;", "+\t\tif (!keyEvent.doit) {", "+\t\t\tCocoa.objc_msgSend(evt, Cocoa.S_preventDefault);", "+\t\t}", "+", "+\t/* mouse event */", "+", "+\tint clientX = Cocoa.objc_msgSend(evt, Cocoa.S_clientX);", "+\tint clientY = Cocoa.objc_msgSend(evt, Cocoa.S_clientY);", "+\tint detail = Cocoa.objc_msgSend(evt, Cocoa.S_detail);", "+\tint button = Cocoa.objc_msgSend(evt, Cocoa.S_button);", "+", "+\tEvent mouseEvent = new Event ();", "+\tmouseEvent.widget = browser;", "+\tmouseEvent.x = clientX; mouseEvent.y = clientY;", "+\tmouseEvent.stateMask = (alt ? SWT.ALT : 0) | (ctrl ? SWT.CTRL : 0) | (shift ? SWT.SHIFT : 0) | (meta ? SWT.COMMAND : 0);", "+", "+\tif (DOMEVENT_MOUSEDOWN.equals (typeString)) {", "+\t\tmouseEvent.type = SWT.MouseDown;", "+\t\tmouseEvent.button = button + 1;", "+\t\tmouseEvent.count = detail;", "+\t} else if (DOMEVENT_MOUSEUP.equals (typeString)) {", "+\t\tmouseEvent.type = SWT.MouseUp;", "+\t\tmouseEvent.button = button + 1;", "+\t\tmouseEvent.count = detail;", "+\t\tswitch (mouseEvent.button) {", "+\t\t\tcase 1: mouseEvent.stateMask |= SWT.BUTTON1; break;", "+\t\t\tcase 2: mouseEvent.stateMask |= SWT.BUTTON2; break;", "+\t\t\tcase 3: mouseEvent.stateMask |= SWT.BUTTON3; break;", "+\t\t\tcase 4: mouseEvent.stateMask |= SWT.BUTTON4; break;", "+\t\t\tcase 5: mouseEvent.stateMask |= SWT.BUTTON5; break;", "+\t\t}", "+\t} else if (DOMEVENT_MOUSEMOVE.equals (typeString)) {", "+\t\t/*", "+\t\t* Bug in Safari.  Spurious and redundant mousemove events are received in", "+\t\t* various contexts, including following every MouseUp.  The workaround is", "+\t\t* to not fire MouseMove events whose x and y values match the last MouseMove  ", "+\t\t*/", "+\t\tif (mouseEvent.x == lastMouseMoveX && mouseEvent.y == lastMouseMoveY) return;", "+\t\tmouseEvent.type = SWT.MouseMove;", "+\t\tlastMouseMoveX = mouseEvent.x; lastMouseMoveY = mouseEvent.y;", "+\t}", "+", "+\tbrowser.notifyListeners (mouseEvent.type, mouseEvent);", "+\tif (detail == 2 && DOMEVENT_MOUSEDOWN.equals (typeString)) {", "+\t\tmouseEvent = new Event ();", "+\t\tmouseEvent.widget = browser;", "+\t\tmouseEvent.x = clientX; mouseEvent.y = clientY;", "+\t\tmouseEvent.stateMask = (alt ? SWT.ALT : 0) | (ctrl ? SWT.CTRL : 0) | (shift ? SWT.SHIFT : 0) | (meta ? SWT.COMMAND : 0);", "+\t\tmouseEvent.type = SWT.MouseDoubleClick;", "+\t\tmouseEvent.button = button + 1;", "+\t\tmouseEvent.count = detail;", "+\t\tbrowser.notifyListeners (mouseEvent.type, mouseEvent);", "+\t}"]}], "num": 39758}
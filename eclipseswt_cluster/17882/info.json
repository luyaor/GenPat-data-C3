{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eebb04aa762539d223bc3fe7de0f822e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7d6fe0e2c82d59975e95394fe31e995", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/gtk/org/eclipse/swt/printing/PrintDialog.java", "commitBeforeChange": "ac473adfcb9983f414d3da15b8b15f56fca50498", "commitAfterChange": "7171ce75440e1c2f381de2d9486e536f525ae21d", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 11, "signatureBeforeChange": " public PrinterData open()", "signatureAfterChange": " public PrinterData open()", "diff": ["- */", "-public PrinterData open() {", "-\t/* Return the first printer in the list */", "-\tPrinterData[] printers = Printer.getPrinterList();", "-\tif (printers.length > 0) return printers[0];", "-\treturn null;", "+ */", "+public PrinterData open() {", "+\tif (OS.GTK_VERSION < OS.VERSION (2, 9, 0)) {", "+\t\treturn Printer.getDefaultPrinterData();", "+\t} else {", "+\t\tbyte [] titleBytes = Converter.wcsToMbcs (null, getText(), true);", "+\t\tint /*long*/ topHandle = getParent().handle;", "+\t\twhile (topHandle != 0 && !OS.GTK_IS_WINDOW(topHandle)) {", "+\t\t\ttopHandle = OS.gtk_widget_get_parent(topHandle);", "+\t\t}", "+\t\thandle = OS.gtk_print_unix_dialog_new(titleBytes, topHandle);", "+\t\t\t\t", "+\t\t//TODO: Not currently implemented. May need new API. For now, disable 'Current' in the dialog. (see gtk bug 344519)", "+\t\tOS.gtk_print_unix_dialog_set_current_page(handle, -1);", "+\t\t", "+\t\tOS.gtk_print_unix_dialog_set_manual_capabilities(handle,", "+\t\t\tOS.GTK_PRINT_CAPABILITY_COLLATE | OS.GTK_PRINT_CAPABILITY_COPIES | OS.GTK_PRINT_CAPABILITY_PAGE_SET);", "+\t\t", "+\t\t/* Set state into print dialog settings. */", "+\t\tint /*long*/ settings = OS.gtk_print_settings_new();", "+\t\tint /*long*/ page_setup = OS.gtk_page_setup_new();", "+\t\tPrinter.setScope(settings, scope, startPage, endPage);", "+\t\tif (printToFile) {", "+\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, \"Print to File\", true); //$NON-NLS-1$", "+\t\t\tOS.gtk_print_settings_set_printer(settings, buffer);", "+\t\t}", "+\t\tOS.gtk_print_unix_dialog_set_settings(handle, settings);", "+\t\tOS.gtk_print_unix_dialog_set_page_setup(handle, page_setup);", "+\t\tOS.g_object_unref(settings);", "+\t\tOS.g_object_unref(page_setup);", "+", "+\t\tPrinterData data = null;", "+\t\t//TODO: Handle 'Print Preview' (GTK_RESPONSE_APPLY).", "+\t\tif (OS.gtk_dialog_run (handle) == OS.GTK_RESPONSE_OK) {", "+\t\t\tint /*long*/ printer = OS.gtk_print_unix_dialog_get_selected_printer(handle);", "+\t\t\tif (printer != 0) {", "+\t\t\t\t/* Get state from print dialog. */", "+\t\t\t\tsettings = OS.gtk_print_unix_dialog_get_settings(handle); // must unref", "+\t\t\t\tpage_setup = OS.gtk_print_unix_dialog_get_page_setup(handle); // do not unref", "+\t\t\t\tdata = Printer.printerDataFromGtkPrinter(printer);", "+\t\t\t\tint print_pages = OS.gtk_print_settings_get_print_pages(settings);", "+\t\t\t\tswitch (print_pages) {", "+\t\t\t\t\tcase OS.GTK_PRINT_PAGES_ALL:", "+\t\t\t\t\t\tscope = PrinterData.ALL_PAGES;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OS.GTK_PRINT_PAGES_RANGES:", "+\t\t\t\t\t\tscope = PrinterData.PAGE_RANGE;", "+\t\t\t\t\t\tint[] num_ranges = new int[1];", "+\t\t\t\t\t\tint /*long*/ page_ranges = OS.gtk_print_settings_get_page_ranges(settings, num_ranges);", "+\t\t\t\t\t\tint [] pageRange = new int[2];", "+\t\t\t\t\t\tint length = num_ranges[0];", "+\t\t\t\t\t\tint min = Integer.MAX_VALUE, max = 0;", "+\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\tOS.memmove(pageRange, page_ranges + i * pageRange.length * 4, pageRange.length * 4);", "+\t\t\t\t\t\t\tmin = Math.min(min, pageRange[0] + 1);", "+\t\t\t\t\t\t\tmax = Math.max(max, pageRange[1] + 1);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.g_free(page_ranges);", "+\t\t\t\t\t\tstartPage = min == Integer.MAX_VALUE ? 1 : min;", "+\t\t\t\t\t\tendPage = max == 0 ? 1 : max;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OS.GTK_PRINT_PAGES_CURRENT:", "+\t\t\t\t\t\t//TODO: Disabled in dialog (see above). This code will not run. (see gtk bug 344519)", "+\t\t\t\t\t\tscope = PrinterData.SELECTION;", "+\t\t\t\t\t\tstartPage = endPage = OS.gtk_print_unix_dialog_get_current_page(handle);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tprintToFile = data.name.equals(\"Print to File\"); //$NON-NLS-1$", "+\t\t\t\tif (printToFile) {", "+\t\t\t\t\tint /*long*/ address = OS.gtk_print_settings_get(settings, OS.GTK_PRINT_SETTINGS_OUTPUT_URI);", "+\t\t\t\t\tint length = OS.strlen (address);", "+\t\t\t\t\tbyte [] buffer = new byte [length];", "+\t\t\t\t\tOS.memmove (buffer, address, length);", "+\t\t\t\t\tdata.fileName = new String (Converter.mbcsToWcs (null, buffer));", "+\t\t\t\t}", "+", "+\t\t\t\tdata.scope = scope;", "+\t\t\t\tdata.startPage = startPage;", "+\t\t\t\tdata.endPage = endPage;", "+\t\t\t\tdata.printToFile = printToFile;", "+\t\t\t\tdata.copyCount = OS.gtk_print_settings_get_n_copies(settings);", "+\t\t\t\tdata.collate = OS.gtk_print_settings_get_collate(settings);", "+", "+\t\t\t\t/* Save other print_settings data as key/value pairs in otherData. */", "+\t\t\t\tCallback printSettingsCallback = new Callback(this, \"GtkPrintSettingsFunc\", 3); //$NON-NLS-1$", "+\t\t\t\tint /*long*/ GtkPrintSettingsFunc = printSettingsCallback.getAddress();", "+\t\t\t\tif (GtkPrintSettingsFunc == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\t\tindex = 0;", "+\t\t\t\tsettingsData = new byte[1024];", "+\t\t\t\tOS.gtk_print_settings_foreach (settings, GtkPrintSettingsFunc, 0);", "+\t\t\t\tprintSettingsCallback.dispose ();", "+\t\t\t\tindex++; // extra null terminator after print_settings and before page_setup", "+", "+\t\t\t\t/* Save page_setup data as key/value pairs in otherData.", "+\t\t\t\t * Note that page_setup properties must be stored and restored in the same order.", "+\t\t\t\t */", "+\t\t\t\tstore(\"orientation\", OS.gtk_page_setup_get_orientation(page_setup)); //$NON-NLS-1$", "+\t\t\t\tstore(\"top_margin\", OS.gtk_page_setup_get_top_margin(page_setup, OS.GTK_UNIT_MM)); //$NON-NLS-1$", "+\t\t\t\tstore(\"bottom_margin\", OS.gtk_page_setup_get_bottom_margin(page_setup, OS.GTK_UNIT_MM)); //$NON-NLS-1$", "+\t\t\t\tstore(\"left_margin\", OS.gtk_page_setup_get_left_margin(page_setup, OS.GTK_UNIT_MM)); //$NON-NLS-1$", "+\t\t\t\tstore(\"right_margin\", OS.gtk_page_setup_get_right_margin(page_setup, OS.GTK_UNIT_MM)); //$NON-NLS-1$", "+\t\t\t\tint /*long*/ paper_size = OS.gtk_page_setup_get_paper_size(page_setup); //$NON-NLS-1$", "+\t\t\t\tstoreBytes(\"paper_size_name\", OS.gtk_paper_size_get_name(paper_size)); //$NON-NLS-1$", "+\t\t\t\tstoreBytes(\"paper_size_display_name\", OS.gtk_paper_size_get_display_name(paper_size)); //$NON-NLS-1$", "+\t\t\t\tstoreBytes(\"paper_size_ppd_name\", OS.gtk_paper_size_get_ppd_name(paper_size)); //$NON-NLS-1$", "+\t\t\t\tstore(\"paper_size_width\", OS.gtk_paper_size_get_width(paper_size, OS.GTK_UNIT_MM)); //$NON-NLS-1$", "+\t\t\t\tstore(\"paper_size_height\", OS.gtk_paper_size_get_height(paper_size, OS.GTK_UNIT_MM)); //$NON-NLS-1$", "+\t\t\t\tstore(\"paper_size_is_custom\", OS.gtk_paper_size_is_custom(paper_size)); //$NON-NLS-1$", "+\t\t\t\tdata.otherData = settingsData;", "+\t\t\t\tOS.g_object_unref(settings);", "+\t\t\t}", "+\t\t}", "+\t\tOS.gtk_widget_destroy (handle);", "+\t\treturn data;", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62cb029d053173ddcce823c382caf28d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "e4a5b4039e34eaefc26de1944535bb7eeddf7be0", "commitAfterChange": "d05349824e51056345d3e4d57c688edd41637c64", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 94, "signatureBeforeChange": "  long windowProc (long hwnd, int msg, long wParam, long lParam)", "signatureAfterChange": "  long windowProc (long hwnd, int msg, long wParam, long lParam)", "diff": ["+\t\t\tboolean processSegments = false, redraw = false;", "-\t\t\t\tcase OS.WM_CHAR:\t\tresult = wmChar (hwnd, wParam, lParam); break;", "+\t\t\t\tcase OS.WM_CHAR:", "+\t\t\t\t\tprocessSegments = (hooks (SWT.Segments) || filters (SWT.Segments)) && !ignoreCharacter && OS.GetKeyState (OS.VK_CONTROL) >= 0 && OS.GetKeyState (OS.VK_MENU) >= 0;", "+\t\t\t\t\tresult = wmChar (hwnd, wParam, lParam);", "+\t\t\t\t\tbreak;", "-\t\t\t\tcase OS.WM_KEYDOWN:\t\tresult = wmKeyDown (hwnd, wParam, lParam); break;", "+\t\t\t\tcase OS.WM_KEYDOWN:", "+\t\t\t\t\tprocessSegments = wParam == OS.VK_DELETE && (hooks (SWT.Segments) || filters (SWT.Segments));", "+\t\t\t\t\tresult = wmKeyDown (hwnd, wParam, lParam);", "+\t\t\t\t\tbreak;", "-\t\t\t\t\t", "+", "+\t\t\t\tcase OS.EM_CANUNDO:", "+\t\t\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments)) return 0;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase OS.WM_UNDO:", "+\t\t\t\tcase OS.EM_UNDO:", "+\t\t\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments)) return 0;", "+\t\t\t\tcase OS.WM_COPY:", "-\t\t\t\tcase OS.WM_UNDO:", "-\t\t\t\tcase OS.EM_UNDO:", "+\t\t\t\t\tprocessSegments = hooks (SWT.Segments) || filters (SWT.Segments);", "+", "+\t\t\tif (processSegments) {", "+\t\t\t\tif (getDrawing () && OS.IsWindowVisible (hwndText)) {", "+\t\t\t\t\tredraw = true;", "+\t\t\t\t\tOS.DefWindowProc (hwndText, OS.WM_SETREDRAW, 0, 0);", "+\t\t\t\t}", "+\t\t\t\tclearSegments (true);", "+\t\t\t\tlong /*int*/ code = callWindowProc (hwnd, msg, wParam, lParam);", "+\t\t\t\tapplyEditSegments ();", "+\t\t\t\tif (redraw) {", "+\t\t\t\t\tOS.DefWindowProc (hwndText, OS.WM_SETREDRAW, 1, 0);", "+\t\t\t\t\tOS.InvalidateRect (hwndText, null, true);", "+\t\t\t\t}", "+\t\t\t\treturn code;", "+\t\t\t}", "-\tif (msg == OS.CB_SETCURSEL) {", "-\t\tif ((style & SWT.READ_ONLY) != 0) {", "-\t\t\tif (hooks (SWT.Verify) || filters (SWT.Verify)) {", "-\t\t\t\tString oldText = getText (), newText = null;", "-\t\t\t\tif (wParam == -1) {", "-\t\t\t\t\tnewText = \"\";", "-\t\t\t\t} else {", "-\t\t\t\t\tif (0 <= wParam && wParam < getItemCount ()) {", "-\t\t\t\t\t\tnewText = getItem ((int)/*64*/wParam);", "+\tswitch (msg) {", "+\t\tcase OS.CB_SETCURSEL: {", "+\t\t\tlong /*int*/ code = OS.CB_ERR;", "+\t\t\tint index = (int)/*64*/ wParam;", "+\t\t\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\t\t\tif (hooks (SWT.Verify) || filters (SWT.Verify)) {", "+\t\t\t\t\tString oldText = getText (), newText = null;", "+\t\t\t\t\tif (wParam == -1) {", "+\t\t\t\t\t\tnewText = \"\";", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (0 <= wParam && wParam < getItemCount ()) {", "+\t\t\t\t\t\t\tnewText = getItem ((int)/*64*/wParam);", "+\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (newText != null && !newText.equals (oldText)) {", "-\t\t\t\t\tint length = OS.GetWindowTextLength (handle);", "-\t\t\t\t\toldText = newText;", "-\t\t\t\t\tnewText = verifyText (newText, 0, length, null);", "-\t\t\t\t\tif (newText == null) return 0;", "-\t\t\t\t\tif (!newText.equals (oldText)) {", "-\t\t\t\t\t\tint index = indexOf (newText);", "-\t\t\t\t\t\tif (index != -1 && index != wParam) {", "-\t\t\t\t\t\t\treturn callWindowProc (handle, OS.CB_SETCURSEL, index, lParam);", "+\t\t\t\t\tif (newText != null && !newText.equals (oldText)) {", "+\t\t\t\t\t\tint length = OS.GetWindowTextLength (handle);", "+\t\t\t\t\t\toldText = newText;", "+\t\t\t\t\t\tnewText = verifyText (newText, 0, length, null);", "+\t\t\t\t\t\tif (newText == null) return 0;", "+\t\t\t\t\t\tif (!newText.equals (oldText)) {", "+\t\t\t\t\t\t\tindex = indexOf (newText);", "+\t\t\t\t\t\t\tif (index != -1 && index != wParam) {", "+\t\t\t\t\t\t\t\treturn callWindowProc (handle, OS.CB_SETCURSEL, index, lParam);", "+\t\t\t\t\t\t\t}", "+\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments)) {", "+\t\t\t\tcode = super.windowProc (hwnd, msg, wParam, lParam);", "+\t\t\t\tif (!(code == OS.CB_ERR || code == OS.CB_ERRSPACE)) {", "+\t\t\t\t\tsegments = null;", "+\t\t\t\t\tEvent event = getSegments (items [index]);", "+\t\t\t\t\tif (event != null) segments = event.segments;", "+\t\t\t\t\treturn code;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tcase OS.CB_ADDSTRING:", "+\t\tcase OS.CB_INSERTSTRING:", "+\t\tcase OS.CB_FINDSTRINGEXACT:", "+\t\t\tif (lParam != 0 && (hooks (SWT.Segments) || filters (SWT.Segments))) {", "+\t\t\t\tlong /*int*/ code = OS.CB_ERR;", "+\t\t\t\tint length = OS.IsUnicode ? OS.wcslen (lParam) : OS.strlen (lParam);", "+\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), length);", "+\t\t\t\tOS.MoveMemory (buffer, lParam, buffer.length () * TCHAR.sizeof);", "+\t\t\t\tString string = buffer.toString (0, length);", "+\t\t\t\tEvent event = getSegments (string);", "+\t\t\t\tif (event != null && event.segments != null) {", "+\t\t\t\t\tbuffer = new TCHAR (getCodePage (), getSegmentsText (string, event), true);", "+\t\t\t\t\tlong /*int*/ hHeap = OS.GetProcessHeap ();", "+\t\t\t\t\tlength = buffer.length() * TCHAR.sizeof;", "+\t\t\t\t\tlong /*int*/ pszText = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, length);", "+\t\t\t\t\tOS.MoveMemory (pszText, buffer, length); ", "+\t\t\t\t\tcode = super.windowProc (hwnd, msg, wParam, pszText);", "+\t\t\t\t\tOS.HeapFree (hHeap, 0, pszText);", "+\t\t\t\t}", "+\t\t\t\tif (msg == OS.CB_ADDSTRING || msg == OS.CB_INSERTSTRING) {", "+\t\t\t\t\tint index = msg == OS.CB_ADDSTRING ? items.length : (int)/*64*/ wParam;", "+\t\t\t\t\tString [] newItems = new String [items.length + 1];", "+\t\t\t\t\tSystem.arraycopy (items, 0, newItems, 0, index);", "+\t\t\t\t\tnewItems [index] = string;", "+\t\t\t\t\tSystem.arraycopy (items, index, newItems, index + 1, items.length - index);", "+\t\t\t\t\titems = newItems;", "+\t\t\t\t}", "+\t\t\t\tif (code != OS.CB_ERR && code != OS.CB_ERRSPACE) return code;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase OS.CB_DELETESTRING: {", "+\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments)) {", "+\t\t\t\tlong /*int*/ code = super.windowProc (hwnd, msg, wParam, lParam);", "+\t\t\t\tif (code != OS.CB_ERR && code != OS.CB_ERRSPACE) {", "+\t\t\t\t\tint index = (int)/*64*/ wParam;", "+\t\t\t\t\tString [] newItems = new String [items.length - 1];", "+\t\t\t\t\tSystem.arraycopy (items, 0, newItems, 0, index);", "+\t\t\t\t\tSystem.arraycopy (items, index + 1, newItems, index, items.length - index - 1);", "+\t\t\t\t\titems = newItems;", "+\t\t\t\t\tif (!noSelection) {", "+\t\t\t\t\t\tindex = (int)/*64*/OS.SendMessage (handle, OS.CB_GETCURSEL, 0, 0);", "+\t\t\t\t\t\tif (index == wParam) {", "+\t\t\t\t\t\t\tclearSegments (false);", "+\t\t\t\t\t\t\tapplyEditSegments ();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn code;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}", "+\t\tcase OS.CB_RESETCONTENT: {", "+\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments)) {", "+\t\t\t\tif (items.length > 0) items = new String [0];", "+\t\t\t\tclearSegments (false);", "+\t\t\t\tapplyEditSegments ();", "+\t\t\t}", "+\t\t\tbreak;"]}], "num": 17882}
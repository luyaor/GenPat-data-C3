{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "394e25033b3e99f402e0a3134e0cf8e6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2674876b12902f03224896fc6be8d1db", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/photon/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "cec669ea3b0cf84e0380b5bd6c8017a8050ce7e0", "commitAfterChange": "75fc9e9240c137385aef55f04172aedfdf72ca1f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\t", "+ */", "+", "+\t/* use Photon's built-in anchoring for resizing */", "+\tint[] args = {", "+\t\t\tOS.Pt_ARG_ANCHOR_FLAGS,", "+\t\t\tOS.Pt_TOP_ANCHORED_TOP | OS.Pt_BOTTOM_ANCHORED_BOTTOM | OS.Pt_LEFT_ANCHORED_LEFT | OS.Pt_RIGHT_ANCHORED_RIGHT,", "+\t\t\tOS.Pt_TOP_ANCHORED_TOP | OS.Pt_BOTTOM_ANCHORED_BOTTOM | OS.Pt_LEFT_ANCHORED_LEFT | OS.Pt_RIGHT_ANCHORED_RIGHT,", "+\t\t\tOS.Pt_ARG_FILL_COLOR,", "+\t\t\t0xFFFFFF,", "+\t\t\t0 };", "+\twebHandle = OS.PtCreateWidget(OS.PtWebClient(), handle, args.length / 3, args);", "+", "+\t/* configure the widget with a specific server */", "+\tFile netfront = new File(\"/usr/photon/bin/netfront\");", "+\tString name, server;", "+\tif (netfront.exists() || (OS.QNX_MAJOR >= 6 && OS.QNX_MINOR >= 3 && OS.QNX_MICRO >= 0)) {", "+\t\tname = \"NetfrontServer\";", "+\t\tserver = \"netfront\";", "+\t} else {", "+\t\tname = \"VoyagerServer-2\";", "+\t\tserver = \"vserver\";", "+\t}", "+\t/* set client name */", "+\tbyte[] nameBuffer = Converter.wcsToMbcs(null, name, true);", "+\tint namePtr = OS.malloc(nameBuffer.length);", "+\tOS.memmove(namePtr, nameBuffer, nameBuffer.length);", "+\tOS.PtSetResource(webHandle, OS.Pt_ARG_CLIENT_NAME, namePtr, 0);", "+\tOS.free(namePtr);", "+\t", "+\t/* select server */", "+\tbyte[] serverBuffer = Converter.wcsToMbcs(null, server, true);", "+\tint serverPtr = OS.malloc(serverBuffer.length);", "+\tOS.memmove(serverPtr, serverBuffer, serverBuffer.length);", "+\tOS.PtSetResource(webHandle, OS.Pt_ARG_WEB_SERVER, serverPtr, 0);", "+\tOS.free(serverPtr);", "+\t", "+\tif (callback == null) callback = new Callback(this.getClass(), \"webProc\", 3, false);", "+\tint webProc = callback.getAddress();", "+\tOS.PtAddCallback(webHandle,OS.Pt_CB_WEB_COMPLETE, webProc, OS.Pt_CB_WEB_COMPLETE);", "+\tOS.PtAddCallback(webHandle,OS.Pt_CB_WEB_START, webProc, OS.Pt_CB_WEB_START);", "+\tOS.PtAddCallback(webHandle,OS.Pt_CB_WEB_STATUS, webProc, OS.Pt_CB_WEB_STATUS);", "+\tOS.PtAddCallback(webHandle,OS.Pt_CB_WEB_URL, webProc, OS.Pt_CB_WEB_URL);", "+\t", "+\tListener listener = new Listener() {", "+\t\tpublic void handleEvent(Event event) {", "+\t\t\tswitch (event.type) {", "+\t\t\t\tcase SWT.Dispose: onDispose(); break;", "+\t\t\t\tcase SWT.FocusIn: onFocusGained(event);\tbreak;", "+\t\t\t}", "+\t\t}", "+\t};\t", "+\tint[] folderEvents = new int[]{", "+\t\tSWT.Dispose,", "+\t\tSWT.FocusIn,  ", "+\t};", "+\tfor (int i = 0; i < folderEvents.length; i++) {", "+\t\taddListener(folderEvents[i], listener);", "+\t}", "+\tOS.PtRealizeWidget(webHandle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b060c5f4ccc648451db32cf0e903b10", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "b4e6b3e5c97b6f5f03205e2f5e49caf3a26bbe1b", "commitAfterChange": "75f4adb1c9f2247ebc44ffbe474a83633ab81338", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\t\t\t\t\tVariant varResult = event.arguments[1];", "-\t\t\t\t\tif (varResult != null) {", "+\t\t\t\t\tVariant varResult = event.arguments[0];", "+\t\t\t\t\tIDispatch dispatch = varResult.getDispatch();", "+\t\t\t\t\tVariant variant = new Variant(auto);", "+\t\t\t\t\tIDispatch top = variant.getDispatch();", "+\t\t\t\t\tif (top.getAddress() == dispatch.getAddress()) {", "+\t\t\t\t\t\tvarResult = event.arguments[1];", "-\t\t\t\t\t\tif (locationListeners != null) {", "-\t\t\t\t\t\t\tfor (int i = 0; i < locationListeners.length; i++)", "-\t\t\t\t\t\t\t\tlocationListeners[i].changing(newEvent);", "-\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\tfor (int i = 0; i < locationListeners.length; i++)", "+\t\t\t\t\t\t\tlocationListeners[i].changing(newEvent);", "-\t\t\t\t\t\tif (cancel != null){", "+\t\t\t\t\t\tif (cancel != null) {", "-\t\t\t\t\treturn;", "+\t\t\t\t\t", "+\t\t\t\t\t/*", "+\t\t\t\t\t* This code is intentionally commented.  This IDispatch was received", "+\t\t\t\t\t* as an argument from the OleEvent and it will be disposed along with", "+\t\t\t\t\t* the other arguments.  ", "+\t\t\t\t\t*/", "+\t\t\t\t\t//dispatch.Release();", "+", "+\t\t\t\t\t/*", "+\t\t\t\t\t* This code is intentionally commented.  A Variant constructed from an", "+\t\t\t\t\t* OleAutomation object does not increase its reference count.  The IDispatch", "+\t\t\t\t\t* obtained from this Variant did not increase the reference count for the", "+\t\t\t\t\t* OleAutomation instance either. ", "+\t\t\t\t\t*/", "+\t\t\t\t\t//top.Release();", "+\t\t\t\t\t//variant.dispose();", "+\t\t\t\t\tbreak;", "-\t\t\t\t\tint command = 0;", "-\t\t\t\t\tif (varResult != null) {", "-\t\t\t\t\t\tcommand = varResult.getInt();", "-\t\t\t\t\t}", "+\t\t\t\t\tint command = varResult.getInt();", "-\t\t\t\t\tif (varResult != null) {", "-\t\t\t\t\t\tenabled = varResult.getBoolean();", "-\t\t\t\t\t}", "+\t\t\t\t\tenabled = varResult.getBoolean();", "-\t\t\t\t\treturn;", "+\t\t\t\t\tbreak;", "-\t\t\t\tcase NavigateComplete2: {", "-\t\t\t\t\tVariant varResult = event.arguments[1];", "-\t\t\t\t\tif (varResult != null) {", "-\t\t\t\t\t\tString url = varResult.getString();", "-\t\t\t\t\t\tLocationEvent newEvent = new LocationEvent(Browser.this);", "-\t\t\t\t\t\tnewEvent.location = url;", "-\t\t\t\t\t\tif (locationListeners != null) {", "+\t\t\t\tcase DocumentComplete: {", "+\t\t\t\t\tVariant varResult = event.arguments[0];", "+\t\t\t\t\tIDispatch dispatch = varResult.getDispatch();", "+\t\t\t\t\tVariant variant = new Variant(auto);", "+\t\t\t\t\tIDispatch top = variant.getDispatch();", "+\t\t\t\t\tif (top.getAddress() == dispatch.getAddress()) {", "+\t\t\t\t\t\tif (html != null) {", "+\t\t\t\t\t\t\tTCHAR buffer = new TCHAR(0, html, true);", "+\t\t\t\t\t\t\thtml = null;", "+\t\t\t\t\t\t\tint byteCount = buffer.length() * TCHAR.sizeof;", "+\t\t\t\t\t\t\tint hGlobal = OS.GlobalAlloc(OS.GMEM_FIXED, byteCount);", "+\t\t\t\t\t\t\tif (hGlobal != 0) {", "+\t\t\t\t\t\t\t\tOS.MoveMemory(hGlobal, buffer, byteCount);", "+\t\t\t\t\t\t\t\tint[] ppstm = new int[1];", "+\t\t\t\t\t\t\t\t/* ", "+\t\t\t\t\t\t\t\t* Note.  CreateStreamOnHGlobal is called with the flag fDeleteOnRelease.", "+\t\t\t\t\t\t\t\t* If the call succeeds the buffer hGlobal is freed automatically", "+\t\t\t\t\t\t\t\t* when the IStream object is released. If the call fails, free the buffer", "+\t\t\t\t\t\t\t\t* hGlobal.", "+\t\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\t\tif (OS.CreateStreamOnHGlobal(hGlobal, true, ppstm) == OS.S_OK) {", "+\t\t\t\t\t\t\t\t\tint[] rgdispid = auto.getIDsOfNames(new String[] {\"Document\"}); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t\tVariant pVarResult = auto.getProperty(rgdispid[0]);", "+\t\t\t\t\t\t\t\t\tpVarResult = auto.getProperty(rgdispid[0]);", "+\t\t\t\t\t\t\t\t\tIDispatch dispatchDocument = pVarResult.getDispatch();", "+\t\t\t\t\t\t\t\t\tpVarResult.dispose();", "+\t\t\t\t\t\t\t\t\tint[] ppvObject = new int[1];", "+\t\t\t\t\t\t\t\t\tint result = dispatchDocument.QueryInterface(COM.IIDIPersistStreamInit, ppvObject);", "+\t\t\t\t\t\t\t\t\tif (result == OS.S_OK) {", "+\t\t\t\t\t\t\t\t\t\tIPersistStreamInit persistStreamInit = new IPersistStreamInit(ppvObject[0]);", "+\t\t\t\t\t\t\t\t\t\tif (persistStreamInit.InitNew() == OS.S_OK) {", "+\t\t\t\t\t\t\t\t\t\t\tpersistStreamInit.Load(ppstm[0]);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tpersistStreamInit.Release();", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tdispatchDocument.Release();", "+\t\t\t\t\t\t\t\t\tIUnknown stream = new IUnknown(ppstm[0]);", "+\t\t\t\t\t\t\t\t\tstream.Release();", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tOS.GlobalFree(hGlobal);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tvarResult = event.arguments[1];", "+\t\t\t\t\t\t\tString url = varResult.getString();", "+\t\t\t\t\t\t\tLocationEvent locationEvent = new LocationEvent(Browser.this);", "+\t\t\t\t\t\t\tlocationEvent.location = url;", "-\t\t\t\t\t\t\t\tlocationListeners[i].changed(newEvent);", "-\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\tlocationListeners[i].changed(locationEvent);", "+\t\t\t\t\t\t\tProgressEvent progressEvent = new ProgressEvent(Browser.this);", "+\t\t\t\t\t\t\tfor (int i = 0; i < progressListeners.length; i++)", "+\t\t\t\t\t\t\t\tprogressListeners[i].completed(progressEvent);", "+\t\t\t\t\t\t}", "-\t\t\t\t\treturn;", "+\t\t\t\t\t", "+\t\t\t\t\t/*", "+\t\t\t\t\t* This code is intentionally commented.  A Variant constructed from an", "+\t\t\t\t\t* OleAutomation object does not increase its reference count.  The IDispatch", "+\t\t\t\t\t* obtained from this Variant did not increase the reference count for the", "+\t\t\t\t\t* OleAutomation instance either. ", "+\t\t\t\t\t*/", "+\t\t\t\t\t//top.Release();", "+\t\t\t\t\t//variant.dispose();", "+\t\t\t\t\t\t", "+\t\t\t\t\t/*", "+\t\t\t\t\t* This code is intentionally commented.  This IDispatch was received", "+\t\t\t\t\t* as an argument from the OleEvent and it will be disposed along with", "+\t\t\t\t\t* the other arguments.  ", "+\t\t\t\t\t*/", "+\t\t\t\t\t//dispatch.Release();", "+\t\t\t\t\tbreak;", "-\t\t\t\t\tint nProgress = (arg1 == null || arg1.getType() != OLE.VT_I4) ? 0 : arg1.getInt(); // may be -1", "+\t\t\t\t\tint nProgress = arg1.getType() != OLE.VT_I4 ? 0 : arg1.getInt(); // may be -1", "-\t\t\t\t\tint nProgressMax = (arg2 == null || arg2.getType() != OLE.VT_I4) ? 0 : arg2.getInt();", "+\t\t\t\t\tint nProgressMax = arg2.getType() != OLE.VT_I4 ? 0 : arg2.getInt();", "-\t\t\t\t\tif (progressListeners != null) {", "-\t\t\t\t\t\tif (nProgress != -1) {", "-\t\t\t\t\t\t\tfor (int i = 0; i < progressListeners.length; i++)", "-\t\t\t\t\t\t\t\tprogressListeners[i].changed(newEvent);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tfor (int i = 0; i < progressListeners.length; i++)", "-\t\t\t\t\t\t\t\tprogressListeners[i].completed(newEvent);", "-\t\t\t\t\t\t}", "+\t\t\t\t\tif (nProgress != -1) {", "+\t\t\t\t\t\tfor (int i = 0; i < progressListeners.length; i++)", "+\t\t\t\t\t\t\tprogressListeners[i].changed(newEvent);", "-\t\t\t\t\treturn;", "+\t\t\t\t\tbreak;", "-\t\t\t\t\tif (arg1 == null || arg1.getType() != OLE.VT_BSTR)\treturn;", "-\t\t\t\t\tString text = arg1.getString();", "-\t\t\t\t\tStatusTextEvent newEvent = new StatusTextEvent(Browser.this);", "-\t\t\t\t\tnewEvent.text = text;", "-\t\t\t\t\tif (statusTextListeners != null) {", "+\t\t\t\t\tif (arg1.getType() == OLE.VT_BSTR) {", "+\t\t\t\t\t\tString text = arg1.getString();", "+\t\t\t\t\t\tStatusTextEvent newEvent = new StatusTextEvent(Browser.this);", "+\t\t\t\t\t\tnewEvent.text = text;", "-\t\t\t\t\treturn;", "+\t\t\t\t\tbreak;", "+\t\t\t", "+\t\t\t/*", "+\t\t\t* Dispose all arguments passed in the OleEvent.  This must be", "+\t\t\t* done to properly release any IDispatch reference that was", "+\t\t\t* automatically addRef'ed when constructing the OleEvent.  ", "+\t\t\t*/", "+\t\t\tVariant[] arguments = event.arguments;", "+\t\t\tfor (int i = 0; i < arguments.length; i++) arguments[i].dispose();", "-\tsite.addEventListener(NavigateComplete2, listener);", "+\tsite.addEventListener(DocumentComplete, listener);"]}], "num": 10295}
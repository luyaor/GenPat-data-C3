{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cad6a9b9559ff11b65bf98319825e22d", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "494b9168887c5926b0531e3d081c30d0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ColorDialog.java", "commitBeforeChange": "f07f5197267cd0d7e55053cf48ba00db344b0ff0", "commitAfterChange": "4f7be61157667f6d4556d661045cbc7b57cd3678", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public RGB open ()", "signatureAfterChange": " public RGB open ()", "diff": ["+\tint /*long*/ hwndParent = parent.handle;", "+\t", "+\t/*", "+\t* Feature in Windows.  There is no API to set the orientation of a", "+\t* color dialog.  It is always inherited from the parent.  The fix is", "+\t* to create a hidden parent and set the orientation in the hidden", "+\t* parent for the dialog to inherit.", "+\t*/", "+\tboolean enabled = false;", "+\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION(4, 10)) {", "+\t\tint dialogOrientation = style & (SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT);", "+\t\tint parentOrientation = parent.style & (SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT);", "+\t\tif (dialogOrientation != parentOrientation) {", "+\t\t\tint exStyle = OS.WS_EX_NOINHERITLAYOUT;", "+\t\t\tif (dialogOrientation == SWT.RIGHT_TO_LEFT) exStyle |= OS.WS_EX_LAYOUTRTL;", "+\t\t\thwndOwner = OS.CreateWindowEx (", "+\t\t\t\texStyle,", "+\t\t\t\tShell.DialogClass,", "+\t\t\t\tnull,", "+\t\t\t\t0,", "+\t\t\t\tOS.CW_USEDEFAULT, 0, OS.CW_USEDEFAULT, 0,", "+\t\t\t\thwndParent,", "+\t\t\t\t0,", "+\t\t\t\tOS.GetModuleHandle (null),", "+\t\t\t\tnull);", "+\t\t\tenabled = OS.IsWindowEnabled (hwndParent);", "+\t\t\tif (enabled) OS.EnableWindow (hwndParent, false);", "+\t\t}", "+\t}", "+", "+\t/* Destroy the BIDI orientation window */", "+\tif (hwndParent != hwndOwner) {", "+\t\tif (enabled) OS.EnableWindow (hwndParent, true);", "+\t\tOS.SetActiveWindow (hwndParent);", "+\t\tOS.DestroyWindow (hwndOwner);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "103d23296b5863f711684028dda3112b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/win32/org/eclipse/swt/printing/PrintDialog.java", "commitBeforeChange": "04669c05ebaeea72cc0f94310dd2f03f2fba1e57", "commitAfterChange": "c8d6607e5d8bd7d80d520e6339aa0eada6a65b18", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": " public PrinterData open()", "signatureAfterChange": " public PrinterData open()", "diff": ["+\t/* Get the owner HWND for the dialog */", "+\tControl parent = getParent();", "+\tint style = getStyle();", "+\tint /*long*/ hwndOwner = parent.handle;", "+\tint /*long*/ hwndParent = parent.handle;", "+", "+\t/*", "+\t* Feature in Windows.  There is no API to set the orientation of a", "+\t* file dialog.  It is always inherited from the parent.  The fix is", "+\t* to create a hidden parent and set the orientation in the hidden", "+\t* parent for the dialog to inherit.", "+\t*/", "+\tboolean enabled = false;", "+\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION(4, 10)) {", "+\t\tint dialogOrientation = style & (SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT);", "+\t\tint parentOrientation = parent.getStyle() & (SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT);", "+\t\tif (dialogOrientation != parentOrientation) {", "+\t\t\tint exStyle = OS.WS_EX_NOINHERITLAYOUT;", "+\t\t\tif (dialogOrientation == SWT.RIGHT_TO_LEFT) exStyle |= OS.WS_EX_LAYOUTRTL;", "+\t\t\thwndOwner = OS.CreateWindowEx (", "+\t\t\t\texStyle,", "+\t\t\t\tDialogClass,", "+\t\t\t\tnull,", "+\t\t\t\t0,", "+\t\t\t\tOS.CW_USEDEFAULT, 0, OS.CW_USEDEFAULT, 0,", "+\t\t\t\thwndParent,", "+\t\t\t\t0,", "+\t\t\t\tOS.GetModuleHandle (null),", "+\t\t\t\tnull);", "+\t\t\tenabled = OS.IsWindowEnabled (hwndParent);", "+\t\t\tif (enabled) OS.EnableWindow (hwndParent, false);", "+\t\t}", "+\t}", "+", "-\tControl parent = getParent();", "-\tif (parent != null) pd.hwndOwner = parent.handle;", "+\tpd.hwndOwner = hwndOwner;", "+\t/* Destroy the BIDI orientation window */", "+\tif (hwndParent != hwndOwner) {", "+\t\tif (enabled) OS.EnableWindow (hwndParent, true);", "+\t\tOS.SetActiveWindow (hwndParent);", "+\t\tOS.DestroyWindow (hwndOwner);", "+\t}"]}], "num": 90}
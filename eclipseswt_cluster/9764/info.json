{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09e9ea2f51174cd97c4b7483b67e061f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1110c5521e171e882a2630c28bbea2e2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java", "commitBeforeChange": "399156490d22f3d1f71663eed297e579ef25b0fc", "commitAfterChange": "a1f55a007486ea929f61bc360225ffb5df8913db", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 84, "signatureBeforeChange": " \tvoid log(Event event)", "signatureAfterChange": " \tvoid log(Event event)", "diff": ["-\t\twhile (i < EVENT_NAMES.length) {", "-\t\t\tif (((Integer)EVENT_NAMES[i][1]).intValue() == event.type) break;", "+\t\twhile (i < EVENT_INFO.length) {", "+\t\t\tif (EVENT_INFO[i].type == event.type) break;", "-\t\tString toString = (String)EVENT_NAMES[i][0] + \" [\"+event.type+\"]: \";", "+\t\tString toString = EVENT_INFO[i].name + \" [\" + event.type + \"]: \";", "-\t\teventConsole.append (toString);", "-\t\teventConsole.append (\"\\n\");", "+\t\tlog (toString);", "+\t\t", "+\t\t/* Return values for event fields. */", "+\t\tint mask = EVENT_INFO[i].setFields;", "+\t\tif (!ignore && mask != 0) {", "+\t\t\tEvent setFieldsEvent = EVENT_INFO[i].event;", "+\t\t\tif ((mask & DOIT) != 0) event.doit = setFieldsEvent.doit;", "+\t\t\tif ((mask & DETAIL) != 0) event.detail = setFieldsEvent.detail;", "+\t\t\tif ((mask & TEXT) != 0) event.text = setFieldsEvent.text;", "+\t\t\tif ((mask & X) != 0) event.x = setFieldsEvent.x;", "+\t\t\tif ((mask & Y) != 0) event.y = setFieldsEvent.y;", "+\t\t\tif ((mask & WIDTH) != 0) event.width = setFieldsEvent.width;", "+\t\t\tif ((mask & HEIGHT) != 0) event.height = setFieldsEvent.height;", "+\t\t\teventConsole.append (ControlExample.getResourceString(\"Returning\"));", "+\t\t\tignore = true;", "+\t\t\tlog (event);", "+\t\t\tignore = false;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0485f72ea974b60478c305b01753a122", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "07cfbabfd10d437ea59b43cf5207c9aec243ed8d", "commitAfterChange": "6147d730779cb8ab37297fa17eb56d48841c159e", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  int filterProc (int xEvent, int gdkEvent, int data2)", "signatureAfterChange": "  int filterProc (int xEvent, int gdkEvent, int data2)", "diff": ["-\tif (eventType == OS.FocusOut || eventType == OS.FocusIn) {", "-\t\tOS.memmove (display.lastFocusChangeEvent, xEvent, XFocusChangeEvent.sizeof);", "+\tif (eventType != OS.FocusOut && eventType != OS.FocusIn) return 0;", "+\tXFocusChangeEvent xFocusEvent = new XFocusChangeEvent();", "+\tOS.memmove (xFocusEvent, xEvent, XFocusChangeEvent.sizeof);", "+\tswitch (eventType) {", "+\t\tcase OS.FocusIn: ", "+\t\t\tif (xFocusEvent.mode == OS.NotifyNormal || xFocusEvent.mode == OS.NotifyWhileGrabbed) {", "+\t\t\t\tif (xFocusEvent.detail == OS.NotifyNonlinear) {", "+\t\t\t\t\tif (tooltipsHandle != 0) OS.gtk_tooltips_enable (tooltipsHandle);", "+\t\t\t\t\tdisplay.activeShell = this;", "+\t\t\t\t\tdisplay.activePending = false;", "+\t\t\t\t\tsendEvent (SWT.Activate);", "+\t\t\t\t}", "+\t\t\t} ", "+\t\t\tbreak;", "+\t\tcase 10:", "+\t\t\tif (xFocusEvent.mode == OS.NotifyNormal || xFocusEvent.mode == OS.NotifyWhileGrabbed) {", "+\t\t\t\tif (xFocusEvent.detail == OS.NotifyNonlinearVirtual || xFocusEvent.detail == OS.NotifyVirtual) {", "+\t\t\t\t\tif (tooltipsHandle != 0) OS.gtk_tooltips_disable (tooltipsHandle);", "+\t\t\t\t\tsendEvent (SWT.Deactivate);", "+\t\t\t\t\tsetActiveControl (null);", "+\t\t\t\t\tif (display.activeShell == this) {", "+\t\t\t\t\t\tdisplay.activeShell = null;", "+\t\t\t\t\t\tdisplay.activePending = false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fd7bce8d06468b004aac91c31d55604", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "332536a6db872df6c8a55983e5b9507181322bee", "commitAfterChange": "c54491881240cacf62bc496023e05818dd936c3f", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": "  boolean setKeyState (Event event, int type, NSEvent nsEvent)", "signatureAfterChange": "  boolean setKeyState (Event event, int type, NSEvent nsEvent)", "diff": ["-//\tboolean isNull = false;", "-//\tint [] keyCode = new int [1];", "-//\tOS.GetEventParameter (theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "-//\tevent.keyCode = Display.translateKey (keyCode [0]);", "+\tboolean isNull = false;", "+\tint keyCode = nsEvent.keyCode ();", "+\tevent.keyCode = Display.translateKey (keyCode);", "-//\t\tcase SWT.LF: {", "-//\t\t\t/*", "-//\t\t\t* Feature in the Macintosh.  When the numeric key pad", "-//\t\t\t* Enter key is pressed, it generates '\\n'.  This is the", "-//\t\t\t* correct platform behavior but is not portable.  The", "-//\t\t\t* fix is to convert the '\\n' into '\\r'.", "-//\t\t\t*/", "-//\t\t\tevent.keyCode = SWT.KEYPAD_CR;", "-//\t\t\tevent.character = '\\r';", "-//\t\t\tbreak;", "-//\t\t}", "+\t\tcase SWT.LF: {", "+\t\t\t/*", "+\t\t\t* Feature in the Macintosh.  When the numeric key pad", "+\t\t\t* Enter key is pressed, it generates '\\n'.  This is the", "+\t\t\t* correct platform behavior but is not portable.  The", "+\t\t\t* fix is to convert the '\\n' into '\\r'.", "+\t\t\t*/", "+\t\t\tevent.keyCode = SWT.KEYPAD_CR;", "+\t\t\tevent.character = '\\r';", "+\t\t\tbreak;", "+\t\t}", "-//\t\tcase SWT.CR: event.character = '\\r'; break;", "+\t\tcase SWT.CR: event.character = '\\r'; break;", "-//\t\tcase SWT.ESC: event.character = 0x1B; break;", "-//\t\tcase SWT.TAB: event.character = '\\t'; break;", "-//\t\tdefault: {", "-//\t\t\tif (event.keyCode == 0 || (SWT.KEYPAD_MULTIPLY <= event.keyCode && event.keyCode <= SWT.KEYPAD_CR)) {", "-//\t\t\t\tint [] length = new int [1];", "-//\t\t\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 4, length, (char[])null);", "-//\t\t\t\tif (status == OS.noErr && length [0] != 0) {", "-//\t\t\t\t\tchar [] chars = new char [1];", "-//\t\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 2, null, chars);", "-//\t\t\t\t\tevent.character = chars [0];", "-//\t\t\t\t}", "-//\t\t\t\t/*", "-//\t\t\t\t* Bug in the Mactonish.  For some reason, Ctrl+Shift+'2' and Ctrl+Shift+'6'", "-//\t\t\t\t* fail to give 0x0 (^@ or ASCII NUL) and 0x1e (^^).  Other control character", "-//\t\t\t\t* key sequences such as ^A or even Ctrl+Shift+'-' (^_ or 0x1f) are correctly", "-//\t\t\t\t* translated to control characters.  Since it is not possible to know which", "-//\t\t\t\t* key combination gives '@' on an international keyboard, there is no way to", "-//\t\t\t\t* test for either character and convert it to a control character (Shift+'2'", "-//\t\t\t\t* gives '@' only on an English keyboard) to work around the problem.", "-//\t\t\t\t*", "-//\t\t\t\t* There is no fix at this time.", "-//\t\t\t\t*/", "-//\t\t\t}", "-//\t\t\tif (event.keyCode == 0) {", "-//\t\t\t\tint kchrPtr = OS.GetScriptManagerVariable ((short) OS.smKCHRCache);", "-//\t\t\t\tif (display.kchrPtr != kchrPtr) {", "-//\t\t\t\t\tdisplay.kchrPtr = kchrPtr;", "-//\t\t\t\t\tdisplay.kchrState [0] = 0;", "-//\t\t\t\t}", "-//\t\t\t\tint result = OS.KeyTranslate (display.kchrPtr, (short)keyCode [0], display.kchrState);", "-//\t\t\t\tif (result <= 0x7f) {", "-//\t\t\t\t\tevent.keyCode = result & 0x7f;", "-//\t\t\t\t} else {", "-//\t\t\t\t\tint [] encoding = new int [1];", "-//\t\t\t\t\tshort keyScript = (short) OS.GetScriptManagerVariable ((short) OS.smKeyScript);", "-//\t\t\t\t\tshort regionCode = (short) OS.GetScriptManagerVariable ((short) OS.smRegionCode);", "-//\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, regionCode, null, encoding) == OS.paramErr) {", "-//\t\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, (short) OS.kTextRegionDontCare, null, encoding) == OS.paramErr) {", "-//\t\t\t\t\t\t\tencoding [0] = OS.kTextEncodingMacRoman;", "-//\t\t\t\t\t\t}", "-//\t\t\t\t\t}", "-//\t\t\t\t\tint [] encodingInfo = new int [1];", "-//\t\t\t\t\tOS.CreateTextToUnicodeInfoByEncoding (encoding [0], encodingInfo);", "-//\t\t\t\t\tif (encodingInfo [0] != 0) {", "-//\t\t\t\t\t\tchar [] chars = new char [1];", "-//\t\t\t\t\t\tint [] nchars = new int [1];", "-//\t\t\t\t\t\tbyte [] buffer = new byte [2];", "-//\t\t\t\t\t\tbuffer [0] = 1;", "-//\t\t\t\t\t\tbuffer [1] = (byte) (result & 0xFF);", "-//\t\t\t\t\t\tOS.ConvertFromPStringToUnicode (encodingInfo [0], buffer, chars.length * 2, nchars, chars);", "-//\t\t\t\t\t\tOS.DisposeTextToUnicodeInfo (encodingInfo);", "-//\t\t\t\t\t\tevent.keyCode = chars [0];", "-//\t\t\t\t\t}", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t\tbreak;", "-//\t\t}", "+\t\tcase SWT.ESC: event.character = 0x1B; break;", "+\t\tcase SWT.TAB: event.character = '\\t'; break;", "+\t\tdefault:", "+\t\t\tif (event.keyCode == 0 || (SWT.KEYPAD_MULTIPLY <= event.keyCode && event.keyCode <= SWT.KEYPAD_CR)) {", "+\t\t\t\tNSString chars = nsEvent.characters ();", "+\t\t\t\tevent.character = (char)chars.characterAtIndex (0);", "+\t\t\t}", "+\t\t\tif (event.keyCode == 0) {", "+\t\t\t\t//TODO this is wrong for shifted keys like ';', '1' and non-english keyboards", "+\t\t\t\tNSString chars = nsEvent.charactersIgnoringModifiers ().lowercaseString();", "+\t\t\t\tevent.keyCode = (char)chars.characterAtIndex(0);", "+\t\t\t}", "-//\tif (event.keyCode == 0 && event.character == 0) {", "-//\t\tif (!isNull) return false;", "-//\t}", "-//\tint [] chord = new int [1];", "-//\tOS.GetEventParameter (theEvent, OS.kEventParamMouseChord, OS.typeUInt32, null, 4, null, chord);", "-//\tint [] modifiers = new int [1];", "-//\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "-//\treturn setInputState (event, type, chord [0], modifiers [0]);", "+\tif (event.keyCode == 0 && event.character == 0) {", "+\t\tif (!isNull) return false;", "+\t}", "+\tsetInputState (event, nsEvent, type);"]}], "num": 9764}
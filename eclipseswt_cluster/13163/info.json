{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0075cd94610215ec51039c666a70f64d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89a15ebab6e0eb44f624b0f49b76ea33", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "1478f86baa97e1588346adffb3446fe6c4b216a5", "commitAfterChange": "601e16b131cb8db0dcb7e9c8e0028977b5d52742", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  void _setImage (Image image)", "signatureAfterChange": "  void _setImage (Image image)", "diff": ["+\tif (image2 != null) image2.dispose ();", "+\timage2 = null;", "+\tif (hCopiedBitmap != 0) OS.DeleteObject (hCopiedBitmap);", "+\thCopiedBitmap = 0;", "-\t\t\t\tif (image2 != null) image2.dispose ();", "-\t\t\t\timage2 = null;", "-\t* it takes a copy of the bitmap.  Therefore the bitmap that was", "+\t* it makes a copy of the bitmap.  Therefore the bitmap that was", "+\t* ", "+\t* Note: The client code also needs to delete the copied image", "+\t* created by Windows when the image changed but does not need", "+\t* to delete the copied image when the control is disposed.", "-\tif (hasAlpha && hImage != 0) OS.DeleteObject (hImage);\t", "+\tif (hasAlpha && hImage != 0) {", "+\t\tOS.DeleteObject (hImage);", "+\t\thCopiedBitmap = OS.SendMessage (handle, OS.STM_GETIMAGE, OS.IMAGE_BITMAP, 0);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e56d58273a537eba6e5366c02a6b0bdf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "d2570584acf3dd12cd53dd558dc0fcd63df9decb", "commitAfterChange": "bdb97e1c7d54fc5776a56b7587ee53c1a1d04fd3", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "  boolean setScrollWidth (TableItem item, boolean force)", "signatureAfterChange": "  boolean setScrollWidth (TableItem item, boolean force)", "diff": ["-\t\tint newWidth = 0;", "+\t\tint newWidth = 0, imageIndent = 0, index = 0;", "-\t\tint index = 0;", "-\t\tint imageIndent = 0;", "+\t\t}", "+\t\t/*", "+\t\t* Bug in Windows.  When the width of the first column is", "+\t\t* small but not zero, Windows draws '...' outside of the", "+\t\t* bounds of the text.  This is strange, but only causes", "+\t\t* roblems when the item is selected.  In this case, Windows", "+\t\t* clears the '...' but doesn't redraw it when the item is", "+\t\t* deselected, causing pixel corruption.  The fix is to ensure", "+\t\t* that the column is at least wide enough to draw a single", "+\t\t* space.", "+\t\t*/", "+\t\tif (newWidth == 0) {", "+\t\t\tTCHAR buffer = new TCHAR (getCodePage (), \" \", true);", "+\t\t\tnewWidth = Math.max (newWidth, OS.SendMessage (handle, OS.LVM_GETSTRINGWIDTH, 0, buffer));"]}], "num": 13163}
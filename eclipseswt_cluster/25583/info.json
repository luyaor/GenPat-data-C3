{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1e9ce28fa03616834840142d0648348b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6fbe91417e5906adfbfc9dd0bfb4950", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "07e2a59a9f95423dd94e93f17c1d85884434abf2", "commitAfterChange": "ca108add451dfd07e852d9d3d51e498bcd07be26", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  void drawLines(boolean advance, int graphics, int linex, int y, StyleItem[] line, int index, int color, RECT clipRect, int alpha)", "signatureAfterChange": "  void drawLines(boolean advance, int graphics, int x, int lineBaseline, int lineUnderlinePos, int lineBottom, StyleItem[] line, int index, int color, RECT clipRect, int alpha)", "diff": ["-void drawLines(boolean advance, int /*long*/ graphics, int linex, int y, StyleItem[] line, int index, int /*long*/ color, RECT clipRect, int alpha) {", "+void drawLines(boolean advance, int /*long*/ graphics, int x, int lineBaseline, int lineUnderlinePos, int lineBottom, StyleItem[] line, int index, int /*long*/ color, RECT clipRect, int alpha) {", "-\tint x = linex + run.x;", "-\tint underlineY = y + run.ascent - run.underlinePos;", "-\tint strikeoutY = y + run.ascent - run.strikeoutPos;", "+\tint runX = x + run.x;", "+\tint underlineY = lineBaseline - lineUnderlinePos;", "+\tint strikeoutY = lineBaseline - run.strikeoutPos;", "-\t\t\t\t\tint squigglyY = Math.min(underlineY, y + run.ascent + run.descent - squigglyHeight - 1);", "-\t\t\t\t\tint squigglyX = x;", "+\t\t\t\t\tint squigglyY = Math.min(underlineY - squigglyHeight / 2, lineBottom - squigglyHeight - 1);", "+\t\t\t\t\tint squigglyX = runX;", "-\t\t\t\t\t\tsquigglyX = linex + line[i - 1].x;", "+\t\t\t\t\t\tsquigglyX = x + line[i - 1].x;", "-\t\t\t\t\t\tgdipRect.X = x;", "-\t\t\t\t\t\tgdipRect.Y = y;", "-\t\t\t\t\t\tgdipRect.Width = run.width;", "-\t\t\t\t\t\tgdipRect.Height = run.ascent + run.descent;", "+\t\t\t\t\t\tgdipRect.X = runX;", "+\t\t\t\t\t\tgdipRect.Y = squigglyY;", "+\t\t\t\t\t\tgdipRect.Width = run.width + 1;", "+\t\t\t\t\t\tgdipRect.Height = squigglyY + squigglyHeight + 1;", "-\t\t\t\t\tint[] points = computePolyline(squigglyX, squigglyY, x + run.width, squigglyY + squigglyHeight);", "+\t\t\t\t\tint[] points = computePolyline(squigglyX, squigglyY, runX + run.width, squigglyY + squigglyHeight);", "-\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, x, underlineY, run.width, run.underlineThickness);", "+\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, runX, underlineY, run.width, run.underlineThickness);", "-\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, x, underlineY, run.width, run.underlineThickness);", "-\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, x, underlineY + run.underlineThickness * 2, run.width, run.underlineThickness);", "+\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, runX, underlineY, run.width, run.underlineThickness);", "+\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, runX, underlineY + run.underlineThickness * 2, run.width, run.underlineThickness);", "-\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, x - run.underlineThickness, underlineY, run.width, run.underlineThickness * 2);", "+\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, runX - run.underlineThickness, underlineY, run.width, run.underlineThickness * 2);", "-\t\t\t\t\tGdip.Graphics_DrawLine(graphics, pen, x, underlineY, x + run.width, underlineY);", "+\t\t\t\t\tGdip.Graphics_DrawLine(graphics, pen, runX, underlineY, runX + run.width, underlineY);", "-\t\t\tGdip.Graphics_FillRectangle(graphics, brush, x, strikeoutY, run.width, run.strikeoutThickness);", "+\t\t\tGdip.Graphics_FillRectangle(graphics, brush, runX, strikeoutY, run.width, run.strikeoutThickness);", "-\t\t\t\t\tint squigglyY = Math.min(underlineY, y + run.ascent + run.descent - squigglyHeight - 1);", "-\t\t\t\t\tint squigglyX = x;", "+\t\t\t\t\tint squigglyY = Math.min(underlineY - squigglyHeight / 2, lineBottom - squigglyHeight - 1);", "+\t\t\t\t\tint squigglyX = runX;", "-\t\t\t\t\t\tsquigglyX = linex + line[i - 1].x;", "+\t\t\t\t\t\tsquigglyX = x + line[i - 1].x;", "-\t\t\t\t\t\tOS.IntersectClipRect(graphics, x, y, x + run.width, y + run.ascent + run.descent);", "+\t\t\t\t\t\tOS.IntersectClipRect(graphics, runX, squigglyY, runX + run.width + 1, squigglyY + squigglyHeight + 1);", "-\t\t\t\t\tint[] points = computePolyline(squigglyX, squigglyY, x + run.width, squigglyY + squigglyHeight);", "+\t\t\t\t\tint[] points = computePolyline(squigglyX, squigglyY, runX + run.width, squigglyY + squigglyHeight);", "-\t\t\t\t\tOS.SetRect(rect, x, underlineY, x + run.width, underlineY + run.underlineThickness);", "+\t\t\t\t\tOS.SetRect(rect, runX, underlineY, runX + run.width, underlineY + run.underlineThickness);", "-\t\t\t\t\tOS.SetRect(rect, x, underlineY, x + run.width, underlineY + run.underlineThickness);", "+\t\t\t\t\tOS.SetRect(rect, runX, underlineY, runX + run.width, underlineY + run.underlineThickness);", "-\t\t\t\t\tOS.SetRect(rect, x, underlineY + run.underlineThickness * 2, x + run.width, underlineY + run.underlineThickness * 3);", "+\t\t\t\t\tOS.SetRect(rect, runX, underlineY + run.underlineThickness * 2, runX + run.width, underlineY + run.underlineThickness * 3);", "-\t\t\t\t\tOS.SetRect(rect, x, underlineY - run.underlineThickness, x + run.width, underlineY + run.underlineThickness);", "+\t\t\t\t\tOS.SetRect(rect, runX, underlineY - run.underlineThickness, runX + run.width, underlineY + run.underlineThickness);", "-\t\t\t\t\tunderlineY = y + run.ascent + run.descent;", "+\t\t\t\t\tunderlineY = lineBaseline + run.descent;", "-\t\t\t\t\tOS.SetRect(rect, x, underlineY, x + run.width, underlineY + run.underlineThickness);", "+\t\t\t\t\tOS.SetRect(rect, runX, underlineY, runX + run.width, underlineY + run.underlineThickness);", "-\t\t\tOS.SetRect(rect, x, strikeoutY, x + run.width, strikeoutY + run.strikeoutThickness);", "+\t\t\tOS.SetRect(rect, runX, strikeoutY, runX + run.width, strikeoutY + run.strikeoutThickness);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ebd3c2046b52c6009618a8328200004a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " \tprivate void syncBounds()", "signatureAfterChange": " \t \tprivate void syncBounds(MacRect b)", "diff": ["-\t * Synchronize the size and visibilty of the MLTEtext with the underlying user pane.\r\t */", "-\tprivate void syncBounds() {", "+\tprivate void syncBounds(MacRect b) {", "-\t\tif (tx == 0)", "-\t\t\treturn;\t\t\t", "-\t\t", "-\t\tboolean isShowing= isShowing();", "-\t\tif (isShowing != txVisible) {", "-\t\t\ttxVisible= isShowing;", "-\t\t\tint[] tags= new int[] { OS.kTXNVisibilityTag };", "-\t\t\tint[] data= new int[] { txVisible ? 1 : 0 };", "-\t\t\tOS.TXNSetTXNObjectControls(tx, false, tags.length, tags, data);", "-\t\t}", "-\t\t", "-\t\tif (!isShowing)", "+\t\tif (fTX == 0)", "-\t\t\t\t", "-\t\tRect b= new Rect();", "-\t\tMacUtil.getControlBounds(handle, b);", "-", "-\t\t// this is just too hard to explain...", "-\t\tOS.HIViewSetBoundsOrigin(handle, b.left, b.top);", "-\t\t\t\t", "+\t", "+\t\tif (b == null) {", "+\t\t\tb= new MacRect();", "+\t\t\tOS.GetControlBounds(handle, b.getData());", "+\t\t}", "+\t", "+\t\tint x= b.getX();", "+\t\tint y= b.getY();", "+\t\tint w= b.getWidth();", "+\t\tint h= b.getHeight();", "+\t\t", "-\t\t\tb.left+= FOCUS_BORDER;", "-\t\t\tb.top+= FOCUS_BORDER;", "-\t\t\tb.right-= FOCUS_BORDER;", "-\t\t\tb.bottom-= FOCUS_BORDER;", "+\t\t\tx+= FOCUS_BORDER;", "+\t\t\ty+= FOCUS_BORDER;", "+\t\t\tw-= 2*FOCUS_BORDER;", "+\t\t\th-= 2*FOCUS_BORDER;", "-\t\tRectangle newBounds= new Rectangle(b.left, b.top, b.right-b.left, b.bottom-b.top);", "-\t\tif (txFrameBounds == null || !txFrameBounds.equals(newBounds)) {", "-\t\t\tOS.TXNSetFrameBounds(tx, b.top, b.left, b.bottom, b.right, txFrameID);", "-\t\t\tOS.HIViewSetNeedsDisplay(handle, true);", "-\t\t\ttxFrameBounds= newBounds;", "+\t\tRectangle oldRect= fFrameBounds;", "+\t\tfFrameBounds= new Rectangle(x, y, w, h);", "+\t\tif (oldRect == null || !oldRect.equals(fFrameBounds)) {", "+\t\t\tOS.TXNSetFrameBounds(fTX, y, x, y+h, x+w, fFrameID);", "-\t\tOS.TXNDraw(tx, 0);", "+\t\tOS.TXNDraw(fTX, 0);"]}], "num": 25583}
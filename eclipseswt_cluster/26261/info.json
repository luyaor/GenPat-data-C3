{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da19764b26d36b6f0e25d5040ed2faf7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4440ea2883ae6036feda0ddf52639561", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "b53c6f58164ca4bd4b5c26fa2abcb16f58f59b67", "commitAfterChange": "abcda6211c0bcc3a908332242b9d1409108c82ba", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 29, "signatureBeforeChange": "  int processMouseUp (int callData, int arg1, int int2)", "signatureAfterChange": " int processEvent (int eventNumber, int int0, int int1, int int2)", "diff": ["+int processEvent (int eventNumber, int int0, int int1, int int2) {", "+\tif (eventNumber == 0) {", "+\t\tswitch (OS.GDK_EVENT_TYPE (int0)) {", "+\t\t\tcase OS.GDK_BUTTON_PRESS:", "+\t\t\tcase OS.GDK_2BUTTON_PRESS: {", "+\t\t\t\tdoubleSelected = false;", "+\t\t\t\tif ((style & SWT.MULTI) != 0) selected = true;", "+\t\t\t\tdouble [] px = new double [1], py = new double [1];", "+\t\t\t\tOS.gdk_event_get_coords (int0, px, py);", "+\t\t\t\tint x = (int)(px[0]), y = (int)(py[0]);\t", "+\t\t\t\tif ((style & SWT.CHECK) != 0) {", "+\t\t\t\t\tif (!OS.gtk_ctree_is_hot_spot (handle, x, y)) {", "+\t\t\t\t\t\tint [] row = new int [1], column = new int [1];", "+\t\t\t\t\t\tif (OS.gtk_clist_get_selection_info (handle, x, y, row, column) != 0) {", "+\t\t\t\t\t\t\tint node = OS.gtk_ctree_node_nth (handle, row [0]);", "+\t\t\t\t\t\t\tint crow = OS.g_list_nth_data (node, 0);", "+\t\t\t\t\t\t\tGtkCTreeRow row_data = new GtkCTreeRow (crow);", "+\t\t\t\t\t\t\tGtkCTree ctree = new GtkCTree (handle);", "+\t\t\t\t\t\t\tGtkCList clist = new GtkCList (handle);", "+\t\t\t\t\t\t\tint nX = clist.hoffset + ctree.tree_indent * row_data.level - 2;", "+\t\t\t\t\t\t\tint nY = clist.voffset + (clist.row_height + 1) * row [0] + 2;", "+\t\t\t\t\t\t\tint [] check_width = new int [1], check_height = new int [1];", "+\t\t\t\t\t\t\tOS.gdk_drawable_get_size (check, check_width, check_height);", "+\t\t\t\t\t\t\tif (nX <= x && x <= nX + check_width [0]) {", "+\t\t\t\t\t\t\t\tif (nY <= y && y <= nY + check_height [0]) {", "+\t\t\t\t\t\t\t\t\tbyte [] spacing = new byte [1];", "+\t\t\t\t\t\t\t\t\tboolean [] is_leaf = new boolean [1], expanded = new boolean [1];", "+\t\t\t\t\t\t\t\t\tint [] pixmap = new int [1], mask = new int [1];", "+\t\t\t\t\t\t\t\t\tint index = OS.gtk_ctree_node_get_row_data (handle, node) - 1;", "+\t\t\t\t\t\t\t\t\tbyte [] text = Converter.wcsToMbcs (null, items [index].getText (), true);", "+\t\t\t\t\t\t\t\t\tOS.gtk_ctree_get_node_info (handle, node, null, spacing, pixmap, mask, pixmap, mask, is_leaf, expanded);", "+\t\t\t\t\t\t\t\t\tpixmap [0] = pixmap [0] == check ? uncheck : check;", "+\t\t\t\t\t\t\t\t\tOS.gtk_ctree_set_node_info (handle, node, text, spacing [0], pixmap [0], mask [0], pixmap [0], mask [0], is_leaf [0], expanded [0]);", "+\t\t\t\t\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\t\t\t\t\tevent.detail = SWT.CHECK;", "+\t\t\t\t\t\t\t\t\tevent.item = items [index];", "+\t\t\t\t\t\t\t\t\tpostEvent (SWT.Selection, event);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (OS.GDK_EVENT_TYPE (int0) == OS.GDK_2BUTTON_PRESS) {", "+\t\t\t\t\tif (!OS.gtk_ctree_is_hot_spot (handle, x, y)) {", "+\t\t\t\t\t\tint [] row = new int [1], column = new int [1];", "+\t\t\t\t\t\tif (OS.gtk_clist_get_selection_info (handle, x, y, row, column) != 0) {", "+\t\t\t\t\t\t\tdoubleSelected = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.GDK_BUTTON_RELEASE: {", "+\t\t\t\t/*", "+\t\t\t\t* Feature in GTK.  When an item is reselected in a", "+\t\t\t\t* mulit-select tree, GTK does not issue notification.", "+\t\t\t\t* The fix is to detect that the mouse was released over", "+\t\t\t\t* a selected item when no selection signal was set and", "+\t\t\t\t* issue a fake selection event.", "+\t\t\t\t* ", "+\t\t\t\t* Feature in GTK.  Double selection can only be implemented", "+\t\t\t\t* in a mouse up handler for a tree unlike the list,the event", "+\t\t\t\t* that caused the select signal is not included when the select", "+\t\t\t\t* signal is issued.", "+\t\t\t\t*/", "+\t\t\t\tdouble[] px = new double [1], py = new double [1];", "+\t\t\t\tOS.gdk_event_get_coords (int0, px, py);", "+\t\t\t\tint x = (int)(px[0]), y = (int)(py[0]);\t", "+\t\t\t\tif (!OS.gtk_ctree_is_hot_spot (handle, x, y)) {", "+\t\t\t\t\tif ((style & SWT.SINGLE) != 0) {", "+\t\t\t\t\t\tGtkCList clist = new GtkCList (handle);", "+\t\t\t\t\t\tint list = clist.selection;", "+\t\t\t\t\t\tif (list != 0 && OS.g_list_length (list) != 0) {", "+\t\t\t\t\t\t\tint node = OS.g_list_nth_data (list, 0);", "+\t\t\t\t\t\t\tint index = OS.gtk_ctree_node_get_row_data (handle, node) - 1;", "+\t\t\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\t\t\tevent.item = items [index];", "+\t\t\t\t\t\t\tif (doubleSelected) {", "+\t\t\t\t\t\t\t\tpostEvent (SWT.DefaultSelection, event);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tpostEvent (SWT.Selection, event);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tselected = false;", "+\t\t\t\t\t}", "+\t\t\t\t\tif ((style & SWT.MULTI) != 0) {", "+\t\t\t\t\t\tint [] row = new int [1], column = new int [1];", "+\t\t\t\t\t\tint code = OS.gtk_clist_get_selection_info (handle, x, y, row, column);", "+\t\t\t\t\t\tif (code != 0) {", "+\t\t\t\t\t\t\tint focus = OS.gtk_ctree_node_nth (handle, row [0]);", "+\t\t\t\t\t\t\tGtkCList clist = new GtkCList (handle);", "+\t\t\t\t\t\t\tif (selected && clist.selection != 0) {", "+\t\t\t\t\t\t\t\tint length = OS.g_list_length (clist.selection);", "+\t\t\t\t\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\t\t\t\t\tint node = OS.g_list_nth_data (clist.selection, i);", "+\t\t\t\t\t\t\t\t\tif (node == focus) {", "+\t\t\t\t\t\t\t\t\t\tint index = OS.gtk_ctree_node_get_row_data (handle, node) - 1;", "+\t\t\t\t\t\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\t\t\t\t\t\tevent.item = items [index];", "+\t\t\t\t\t\t\t\t\t\tif (doubleSelected) {", "+\t\t\t\t\t\t\t\t\t\t\tpostEvent (SWT.DefaultSelection, event);", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tpostEvent (SWT.Selection, event);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tselected = false;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tdoubleSelected = false;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\treturn 1;", "+\t}", "+\treturn super. processEvent (eventNumber, int0, int1, int2);", "+}", "-", "-int processMouseUp (int callData, int arg1, int int2) {", "-\tint result = super.processMouseUp (callData, arg1, int2);", "-\t/*", "-\t* Feature in GTK.  When an item is reselected in a", "-\t* mulit-select tree, GTK does not issue notification.", "-\t* The fix is to detect that the mouse was released over", "-\t* a selected item when no selection signal was set and", "-\t* issue a fake selection event.", "-\t* ", "-\t* Feature in GTK.  Double selection can only be implemented", "-\t* in a mouse up handler for a tree unlike the list,the event", "-\t* that caused the select signal is not included when the select", "-\t* signal is issued.", "-\t*/", "-\tdouble[] px = new double [1], py = new double [1];", "-\tOS.gdk_event_get_coords(callData, px, py);", "-\tint x = (int)(px[0]), y = (int)(py[0]);\t", "-\tif (!OS.gtk_ctree_is_hot_spot (handle, x, y)) {", "-\t\tif ((style & SWT.SINGLE) != 0) {", "-\t\t\tGtkCList clist = new GtkCList (handle);", "-\t\t\tint list = clist.selection;", "-\t\t\tif (list != 0 && OS.g_list_length (list) != 0) {", "-\t\t\t\tint node = OS.g_list_nth_data (list, 0);", "-\t\t\t\tint index = OS.gtk_ctree_node_get_row_data (handle, node) - 1;", "-\t\t\t\tEvent event = new Event ();", "-\t\t\t\tevent.item = items [index];", "-\t\t\t\tif (doubleSelected) {", "-\t\t\t\t\tpostEvent (SWT.DefaultSelection, event);", "-\t\t\t\t} else {", "-\t\t\t\t\tpostEvent (SWT.Selection, event);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tselected = false;", "-\t\t}", "-\t\tif ((style & SWT.MULTI) != 0) {", "-\t\t\tint [] row = new int [1], column = new int [1];", "-\t\t\tint code = OS.gtk_clist_get_selection_info (handle, x, y, row, column);", "-\t\t\tif (code != 0) {", "-\t\t\t\tint focus = OS.gtk_ctree_node_nth (handle, row [0]);", "-\t\t\t\tGtkCList clist = new GtkCList (handle);", "-\t\t\t\tif (selected && clist.selection != 0) {", "-\t\t\t\t\tint length = OS.g_list_length (clist.selection);", "-\t\t\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\t\tint node = OS.g_list_nth_data (clist.selection, i);", "-\t\t\t\t\t\tif (node == focus) {", "-\t\t\t\t\t\t\tint index = OS.gtk_ctree_node_get_row_data (handle, node) - 1;", "-\t\t\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\t\t\tevent.item = items [index];", "-\t\t\t\t\t\t\tif (doubleSelected) {", "-\t\t\t\t\t\t\t\tpostEvent (SWT.DefaultSelection, event);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tpostEvent (SWT.Selection, event);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tselected = false;", "-\t\t}", "-\t}", "-\tdoubleSelected = false;", "-\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5956ea6052315aee56b79b5d8dfb9039", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "72353ac7f94b26380383764a3b22b9ce8d44a91e", "commitAfterChange": "5b05aa6f4689e570a02934dff54fc1aa76a4eafb", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 32, "signatureBeforeChange": "  int processEvent (int eventNumber, int int0, int int1, int int2)", "signatureAfterChange": "  int processEvent (int eventNumber, int int0, int int1, int int2)", "diff": ["-", "-\t\t\tcase OS.GDK_BUTTON_PRESS:", "-\t\t\t\tdoubleSelected = false;", "-\t\t\t\tif ((style & SWT.MULTI) != 0) selected = true;", "-\t\t\t\tdouble [] px = new double [1], py = new double [1];", "+\t\t\t\t/*", "+\t\t\t\t* Feature in GTK.  Double selection can only be implemented", "+\t\t\t\t* in a mouse down handler for a tree unlike the list, the event", "+\t\t\t\t* that caused the select signal is not included when the select", "+\t\t\t\t* signal is issued.", "+\t\t\t\t*/", "+\t\t\t\tdoubleSelected = true;", "+\t\t\t\tdouble[] px = new double [1], py = new double [1];", "-\t\t\t\tif ((style & SWT.CHECK) != 0) {", "-\t\t\t\t\tif (!OS.gtk_ctree_is_hot_spot (handle, x, y)) {", "-\t\t\t\t\t\tint [] row = new int [1], column = new int [1];", "-\t\t\t\t\t\tif (OS.gtk_clist_get_selection_info (handle, x, y, row, column) != 0) {", "-\t\t\t\t\t\t\tint node = OS.gtk_ctree_node_nth (handle, row [0]);", "-\t\t\t\t\t\t\tint crow = OS.g_list_nth_data (node, 0);", "-\t\t\t\t\t\t\tGtkCTreeRow row_data = new GtkCTreeRow ();", "-\t\t\t\t\t\t\tOS.memmove (row_data, crow, GtkCTreeRow.sizeof);", "-\t\t\t\t\t\t\tint nX = OS.GTK_CLIST_HOFFSET (handle) + OS.GTK_CTREE_TREE_INDENT (handle) * row_data.level - 2;", "-\t\t\t\t\t\t\tint nY = OS.GTK_CLIST_VOFFSET (handle) + (OS.GTK_CLIST_ROW_HEIGHT (handle) + 1) * row [0] + 2;", "-\t\t\t\t\t\t\tint [] check_width = new int [1], check_height = new int [1];", "-\t\t\t\t\t\t\tOS.gdk_drawable_get_size (check, check_width, check_height);", "-\t\t\t\t\t\t\tif (nX <= x && x <= nX + check_width [0]) {", "-\t\t\t\t\t\t\t\tif (nY <= y && y <= nY + check_height [0]) {", "-\t\t\t\t\t\t\t\t\tbyte [] spacing = new byte [1];", "-\t\t\t\t\t\t\t\t\tboolean [] is_leaf = new boolean [1], expanded = new boolean [1];", "-\t\t\t\t\t\t\t\t\tint [] pixmap = new int [1], mask = new int [1];", "-\t\t\t\t\t\t\t\t\tint index = OS.gtk_ctree_node_get_row_data (handle, node) - 1;", "-\t\t\t\t\t\t\t\t\tbyte [] text = Converter.wcsToMbcs (null, items [index].getText (), true);", "-\t\t\t\t\t\t\t\t\tOS.gtk_ctree_get_node_info (handle, node, null, spacing, pixmap, mask, pixmap, mask, is_leaf, expanded);", "-\t\t\t\t\t\t\t\t\tpixmap [0] = pixmap [0] == check ? uncheck : check;", "-\t\t\t\t\t\t\t\t\tOS.gtk_ctree_set_node_info (handle, node, text, spacing [0], pixmap [0], mask [0], pixmap [0], mask [0], is_leaf [0], expanded [0]);", "-\t\t\t\t\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\t\t\t\t\tevent.detail = SWT.CHECK;", "-\t\t\t\t\t\t\t\t\tevent.item = items [index];", "-\t\t\t\t\t\t\t\t\tpostEvent (SWT.Selection, event);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\tif (!OS.gtk_ctree_is_hot_spot (handle, x, y)) {", "+\t\t\t\t\tint [] row = new int [1], column = new int [1];", "+\t\t\t\t\tint code = OS.gtk_clist_get_selection_info (handle, x, y, row, column);", "+\t\t\t\t\tif (code != 0) {", "+\t\t\t\t\t\tint node = OS.gtk_ctree_node_nth (handle, row [0]);", "+\t\t\t\t\t\tint index = OS.gtk_ctree_node_get_row_data (handle, node) - 1;", "+\t\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\t\tevent.item = items [index];", "+\t\t\t\t\t\tpostEvent (SWT.DefaultSelection, event);", "-\t\t\t\tif (type == OS.GDK_2BUTTON_PRESS) {", "-\t\t\t\t\tif (!OS.gtk_ctree_is_hot_spot (handle, x, y)) {", "-\t\t\t\t\t\tint [] row = new int [1], column = new int [1];", "-\t\t\t\t\t\tif (OS.gtk_clist_get_selection_info (handle, x, y, row, column) != 0) {", "-\t\t\t\t\t\t\tdoubleSelected = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tsuper.processMouseDown (int0, int1, int2); ", "+\t\t\t}  //FALL THROUGH", "+\t\t\tcase OS.GDK_BUTTON_PRESS:", "+\t\t\t\tOS.GTK_CLIST_RESYNC_SELECTION (handle);", "-\t\t\t}", "-\t\t\t\t* ", "-\t\t\t\t* Feature in GTK.  Double selection can only be implemented", "-\t\t\t\t* in a mouse up handler for a tree unlike the list, the event", "-\t\t\t\t* that caused the select signal is not included when the select", "-\t\t\t\t* signal is issued.", "-\t\t\t\tdouble[] px = new double [1], py = new double [1];", "-\t\t\t\tOS.gdk_event_get_coords (int0, px, py);", "-\t\t\t\tint x = (int)(px[0]), y = (int)(py[0]);\t", "-\t\t\t\tif (!OS.gtk_ctree_is_hot_spot (handle, x, y)) {", "-\t\t\t\t\tif ((style & SWT.SINGLE) != 0) {", "-\t\t\t\t\t\tint list = OS.GTK_CLIST_SELECTION (handle);", "-\t\t\t\t\t\tif (list != 0 && OS.g_list_length (list) != 0) {", "-\t\t\t\t\t\t\tint node = OS.g_list_nth_data (list, 0);", "-\t\t\t\t\t\t\tint index = OS.gtk_ctree_node_get_row_data (handle, node) - 1;", "-\t\t\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\t\t\tevent.item = items [index];", "-\t\t\t\t\t\t\tif (doubleSelected) {", "-\t\t\t\t\t\t\t\tpostEvent (SWT.DefaultSelection, event);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tif (selected) postEvent (SWT.Selection, event);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tselected = false;", "-\t\t\t\t\t}", "-\t\t\t\t\tif ((style & SWT.MULTI) != 0) {", "-\t\t\t\t\t\tint [] row = new int [1], column = new int [1];", "-\t\t\t\t\t\tint code = OS.gtk_clist_get_selection_info (handle, x, y, row, column);", "-\t\t\t\t\t\tif (code != 0) {", "-\t\t\t\t\t\t\tint focus = OS.gtk_ctree_node_nth (handle, row [0]);", "-\t\t\t\t\t\t\tint selection = OS.GTK_CLIST_SELECTION (handle);", "-\t\t\t\t\t\t\tif (selected && selection != 0) {", "-\t\t\t\t\t\t\t\tint length = OS.g_list_length (selection);", "-\t\t\t\t\t\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\t\t\t\t\tint node = OS.g_list_nth_data (selection, i);", "-\t\t\t\t\t\t\t\t\tif (node == focus) {", "-\t\t\t\t\t\t\t\t\t\tint index = OS.gtk_ctree_node_get_row_data (handle, node) - 1;", "-\t\t\t\t\t\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\t\t\t\t\t\tevent.item = items [index];", "-\t\t\t\t\t\t\t\t\t\tif (doubleSelected) {", "-\t\t\t\t\t\t\t\t\t\t\tpostEvent (SWT.DefaultSelection, event);", "-\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\tif ((style & SWT.MULTI) != 0) {", "+\t\t\t\t\tif (selected && !doubleSelected) {", "+\t\t\t\t\t\tdouble[] px = new double [1], py = new double [1];", "+\t\t\t\t\t\tOS.gdk_event_get_coords (int0, px, py);", "+\t\t\t\t\t\tint x = (int)(px[0]), y = (int)(py[0]);\t", "+\t\t\t\t\t\tif (!OS.gtk_ctree_is_hot_spot (handle, x, y)) {", "+\t\t\t\t\t\t\tint [] row = new int [1], column = new int [1];", "+\t\t\t\t\t\t\tint code = OS.gtk_clist_get_selection_info (handle, x, y, row, column);", "+\t\t\t\t\t\t\tif (code != 0) {", "+\t\t\t\t\t\t\t\tint focus = OS.gtk_ctree_node_nth (handle, row [0]);", "+\t\t\t\t\t\t\t\tint selection = OS.GTK_CLIST_SELECTION (handle);", "+\t\t\t\t\t\t\t\tif (selection != 0) {", "+\t\t\t\t\t\t\t\t\tint length = OS.g_list_length (selection);", "+\t\t\t\t\t\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\t\t\t\t\t\tint node = OS.g_list_nth_data (selection, i);", "+\t\t\t\t\t\t\t\t\t\tif (node == focus) {", "+\t\t\t\t\t\t\t\t\t\t\tint index = OS.gtk_ctree_node_get_row_data (handle, node) - 1;", "+\t\t\t\t\t\t\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\t\t\t\t\t\t\tevent.item = items [index];", "-\t\t\t\t\t\tselected = false;", "+\t\t\t\t\tselected = false;", "-\t\t\t\tsuper.processMouseUp (int0, int1, int2);"]}], "num": 26261}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ece578ebacee0ecc552211ccc8aa8d2b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8720949daedf7d293926661cebb77773", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 44, "signatureBeforeChange": "\r \r public void setVisible (boolean visible)", "signatureAfterChange": "\r \r public void setVisible (boolean visible)", "diff": ["+\t/*\r", "+\t* Feature in Photon.  It is not possible to show a PtWindow\r", "+\t* whose parent is not realized.  The fix is to temporarily\r", "+\t* reparent the child shell to NULL and then realize the child\r", "+\t* shell.\r", "+\t*/\r", "+\tif (parent != null) {\r", "+\t\tShell shell = parent.getShell ();\r", "+\t\tint parentHandle = shell.shellHandle;\r", "+\t\tif (!OS.PtWidgetIsRealized (parentHandle)) {\r", "+\t\t\tOS.PtReParentWidget (shellHandle, visible ? 0 : parentHandle);\r", "+\t\t}\r", "+\t}\r", "+\t/*\r", "+\t* Feature in Photon.  When a shell is shown, it may have child\r", "+\t* shells that have been temporarily reparented to NULL because\r", "+\t* the child was shown before the parent.  The fix is to reparent\r", "+\t* the child shells back to the correct parent.\r", "+\t*/\r", "+\tif (visible) {\r", "+\t\tShell [] shells = getShells ();\r", "+\t\tfor (int i=0; i<shells.length; i++) {\r", "+\t\t\tint childHandle = shells [i].shellHandle;\r", "+\t\t\tif (OS.PtWidgetParent (childHandle) == 0) {\r", "+\t\t\t\tOS.PtReParentWidget (childHandle, shellHandle);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b9ffd825e021b5905d3d28601aadda4c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "23f141903c49cd2a4f94e6b442d2f9668cacef88", "commitAfterChange": "15abd1c12d68db4380f484faa3ce336579f17bba", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "  void setWindowVisible (boolean visible)", "signatureAfterChange": "  void setWindowVisible (boolean visible)", "diff": ["-\t\t/*", "-\t\t* Bug in the Macintosh.  ShowWindow() does not activate the shell when an ON_TOP", "-\t\t* shell is active. The fix is to detect that the shell was not activated and", "-\t\t* activate it.", "-\t\t*/", "-\t\tShell activeShell = null;", "-\t\tif ((style & SWT.ON_TOP) == 0) {", "-\t\t\tactiveShell = display.getActiveShell ();", "-\t\t}", "+", "-\t\t\tif (activeShell != null && activeShell == display.getActiveShell () && (activeShell.style & SWT.ON_TOP) != 0) {", "-\t\t\t\tbringToTop (false);", "+\t\t\t/*", "+\t\t\t* Bug in the Macintosh.  ShowWindow() does not activate the shell when an ON_TOP", "+\t\t\t* shell is visible. The fix is to detect that the shell was not activated and", "+\t\t\t* activate it.", "+\t\t\t*/", "+\t\t\tif (display.getActiveShell () != this) {", "+\t\t\t\tShell[] shells = display.getShells();", "+\t\t\t\tfor (int i = 0; i < shells.length; i++) {", "+\t\t\t\t\tShell shell = shells [i];", "+\t\t\t\t\tif ((shell.style & SWT.ON_TOP) != 0 && shell.isVisible ()) {", "+\t\t\t\t\t\tbringToTop(false);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 46976}
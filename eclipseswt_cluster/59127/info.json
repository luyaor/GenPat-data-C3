{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9cdef2f0acce9bd72682f598e5663ebc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4967e56194e1ec118be331bb3df4a97a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/dnd/DNDExample.java", "commitBeforeChange": "9e0e5dcedd6cb4a0442b6a1a1e3bbd82f4332b36", "commitAfterChange": "4c3988ce8a0271ca00c04b5918fcaf66828ff3b9", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "  private void printEvent(DropTargetEvent e)", "signatureAfterChange": "  private void printEvent(DropTargetEvent e)", "diff": ["-\tStringBuffer sb = new StringBuffer();", "-\tsb.append(\"widget; \"); sb.append(e.widget);", "-\tsb.append(\", time: \"); sb.append(e.time);", "-\tsb.append(\", x: \"); sb.append(e.x);", "-\tsb.append(\", y: \"); sb.append(e.y);", "-\tsb.append(\", item: \"); sb.append(e.item);", "-\tsb.append(\", operations: \"); sb.append(e.operations);", "-\tsb.append(\", operation: \"); sb.append(e.detail);", "-\tsb.append(\", feedback: \"); sb.append(e.feedback);", "-\tif (e.dataTypes != null) {", "-\t\tfor (int i = 0; i < e.dataTypes.length; i++) {", "-\t\t\tsb.append(\", dataType \"); sb.append(i); sb.append(\": \"); sb.append(e.dataTypes[i].type);", "-\t\t}", "-\t} else {", "-\t\tsb.append(\", dataTypes: none\");", "-\t}", "-\tsb.append(\", currentDataType: \"); sb.append(e.currentDataType);", "-\tsb.append(\", data: \"); sb.append(e.data);", "-\tsb.append(\"\\n\");", "-\tdropConsole.append(sb.toString());", "+\tdropConsole.append(e.toString() + \"\\n\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1f8bb8657f56100edd7e71438ce24fc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "11d7e622edab38042f1e9855a2ec52dfb4825a8d", "commitAfterChange": "21e3a1c324afd8e1ecf94860a56b2da99d402638", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": "\r int processPaint (int callData)", "signatureAfterChange": "\r int processPaint (int callData)", "diff": ["+\tfinal String plainText = stripMnemonicCodes(this.text);\r", "-\tint preMnemonicWidth = 0, mnemonicWidth = 0;\r", "-\tif (text.length () != 0) {\r", "-\t\tif (mnemonicPos != -1) {\r", "-\t\t\tpreMnemonicWidth = gc.textExtent(text.substring(0, mnemonicPos)).x;\r", "-\t\t\tmnemonicWidth = gc.getAdvanceWidth(text.charAt(mnemonicPos));\r", "-\t\t\tint postMnemonicWidth = gc.textExtent(text.substring(mnemonicPos + 1)).x;\r", "-\t\t\ttextWidth = preMnemonicWidth + mnemonicWidth + postMnemonicWidth;\r", "-\t\t\ttextHeight = gc.textExtent(text).y;\r", "-\t\t} else {\r", "-\t\t\tPoint textExtent = gc.textExtent (text);\r", "-\t\t\ttextWidth = textExtent.x;\r", "-\t\t\ttextHeight = textExtent.y;\r", "-\t\t}\t\r", "+\tif (plainText.length () != 0) {\r", "+\t\tPoint textExtent = gc.textExtent (plainText);\r", "+\t\ttextWidth = textExtent.x;\r", "+\t\ttextHeight = textExtent.y;\r", "-\t\tif (mnemonicPos != -1) {\r", "-\t\t\tint x = textX;\r", "-\t\t\tif (preMnemonicWidth > 0) {\r", "-\t\t\t\tgc.drawText(text.substring(0, mnemonicPos), x, textY, false);\r", "-\t\t\t\tx += preMnemonicWidth;\r", "-\t\t\t}\r", "-\t\t\tif (mnemonicWidth > 0) {\r", "-\t\t\t\tgc.drawText(text.substring(mnemonicPos, mnemonicPos + 1), x, textY, false);\r", "-\t\t\t\t// draw an underscore just like the one Motif uses\r", "-\t\t\t\tFontMetrics fontMetrics = gc.getFontMetrics();\r", "-\t\t\t\tint underlineY = textY + fontMetrics.getHeight();\r", "-\t\t\t\tgc.drawLine(x, underlineY, x + mnemonicWidth, underlineY);\r", "-\t\t\t\t// Should use OS.XmStringDrawUnderline instead, but this functionality\r", "-\t\t\t\t// really belongs in GC so we'll deal with this the right way later.\r", "-\t\t\t\tx += mnemonicWidth;\r", "-\t\t\t}\r", "-\t\t\tif (mnemonicPos < text.length()) gc.drawText(text.substring(mnemonicPos + 1),\r", "-\t\t\t\tx, textY, false);\r", "-\t\t} else {\r", "-\t\t\tgc.drawText(text, textX, textY, false);\r", "-\t\t}\r", "+\t\t/* To display the mnemonic underscore we'll want to use XmStringDrawUnderline here */\r", "+\t\tgc.drawText(plainText, textX, textY, false);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f95a924240a65c1f7e74bf222b4d1f6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGeneratorUI.java", "commitBeforeChange": "34830c5ea1d64c3a02443211fb13e925cac126f1", "commitAfterChange": "4e64580ba3040d30ac205fe496a0b9154e6fedb9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 14, "signatureBeforeChange": " \t \tvoid buildExtrasNode(Document document, Node parent, TreeItem item, int level)", "signatureAfterChange": " \t \tvoid updateGenAttribute (TreeItem item)", "diff": ["-\t", "-\tvoid buildExtrasNode(Document document, Node parent, TreeItem item, int level) {", "-\t\tTreeItem[] items = item.getItems();", "-\t\tif (item.getData() instanceof Node) {", "-\t\t\tTreeColumn[] columns = item.getParent().getColumns();", "-\t\t\tNode node = (Node)item.getData();", "-\t\t\tString nodeName = node.getNodeName();", "-\t\t\tNode nameAttrib = gen.getNameAttribute(node);", "-\t\t\tElement newNode = document.createElement(nodeName);", "-\t\t\tif (nameAttrib != null) {", "-\t\t\t\tAttr attr = document.createAttribute(nameAttrib.getNodeName());", "-\t\t\t\tattr.setNodeValue(nameAttrib.getNodeValue());", "-\t\t\t\tnewNode.setAttributeNode(attr);", "-\t\t\t}", "-\t\t\tif (item.getChecked()) {", "-\t\t\t\tAttr attr = document.createAttribute(\"swt_gen\");", "-\t\t\t\tattr.setNodeValue(\"true\");", "-\t\t\t\tnewNode.setAttributeNode(attr);", "-\t\t\t}", "-\t\t\tfor (int i = 0; i < columns.length; i++) {", "-\t\t\t\tString attrName = columns[i].getText();", "-\t\t\t\tif (attrName.startsWith(\"swt_\")) {", "-\t\t\t\t\tString value = item.getText(i);", "-\t\t\t\t\tif (value.length() != 0) {", "-\t\t\t\t\t\tAttr attr = document.createAttribute(attrName);", "-\t\t\t\t\t\tattr.setNodeValue(value);", "-\t\t\t\t\t\tnewNode.setAttributeNode(attr);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tparent.appendChild(newNode);", "-\t\t\tparent = newNode;", "-\t\t}", "-\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\tbuildExtrasNode(document, parent, items[i], level + 1);", "-\t\t}", "-\t}", "+\tvoid updateGenAttribute (TreeItem item) {", "+\t\tif (item.getData() instanceof Element) {", "+\t\t\tElement node = (Element)item.getData();", "+\t\t\tif (item.getChecked()) {", "+\t\t\t\tnode.setAttribute(\"swt_gen\", \"true\");", "+\t\t\t} else {", "+\t\t\t\tnode.removeAttribute(\"swt_gen\");", "+\t\t\t}", "+\t\t}", "+\t\tTreeItem[] items = item.getItems();", "+\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\tupdateGenAttribute(items[i]);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6aedfc66889b3e079def56301d92f458", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/common/org/eclipse/swt/browser/WebBrowser.java", "commitBeforeChange": "5a2233010f7e94fd6c1309096fb18e83dc79b8ce", "commitAfterChange": "6608b0af915e3e359127fb98e6d8ba6099381359", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  public Object evaluate (String script) throws SWTException", "signatureAfterChange": "  public Object evaluate (String script, boolean trusted)", "diff": ["+public Object evaluate (String script, boolean trusted) {", "+\tif (!trusted) return evaluate(script);", "+\treturn null;", "+}"]}], "num": 59127}
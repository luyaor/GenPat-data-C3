{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "876f11183cc7a94083c52d53754f37b0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "584c3e569f1306dd01ae37a9ee2d0f8a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": "  void createHandle ()", "diff": ["-void createHandle (int index) {", "-\tstate |= HANDLE;", "-\tint parentHandle = parent.handle;", "-\t/* AW", "-\tint [] argList = {", "-\t\tOS.XmNwidth, DEFAULT_WIDTH,", "-\t\tOS.XmNheight, DEFAULT_HEIGHT,", "-\t\tOS.XmNrecomputeSize, 0,", "-\t\tOS.XmNhighlightThickness, (parent.style & SWT.NO_FOCUS) != 0 ? 0 : 1,", "-\t\tOS.XmNmarginWidth, 2,", "-\t\tOS.XmNmarginHeight, 1,", "-\t\tOS.XmNtraversalOn, (parent.style & SWT.NO_FOCUS) != 0 ? 0 : 1,", "-\t\tOS.XmNpositionIndex, index,", "-\t\tOS.XmNshadowType, OS.XmSHADOW_OUT,", "-\t\tOS.XmNancestorSensitive, 1,", "-\t};", "-\thandle = OS.XmCreateDrawnButton (parentHandle, null, argList, argList.length / 2);", "-\t*/", "-\tint width= DEFAULT_WIDTH;", "-\tint height= DEFAULT_HEIGHT;", "-\tif ((style & SWT.SEPARATOR) != 0) {", "-\t\tif ((parent.style & SWT.HORIZONTAL) != 0)", "-\t\t\twidth= DEFAULT_SEPARATOR_WIDTH;", "-\t\telse", "-\t\t\theight= DEFAULT_SEPARATOR_WIDTH;", "-\t}", "-\thandle = MacUtil.createDrawingArea(parentHandle, index, false, width, height, 0);", "-\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-}", "+", "+void createHandle () {", "+\tint [] outControl = new int [1];", "+\tint window = OS.GetControlOwner (parent.handle);", "+\tint features = OS.kControlSupportsEmbedding | 1 << 4;", "+\tOS.CreateUserPaneControl (window, null, features, outControl);", "+\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\thandle = outControl [0];", "+\tint width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT;", "+\tif ((style & SWT.SEPARATOR) == 0) {", "+\t\tControlButtonContentInfo inContent = new ControlButtonContentInfo ();", "+\t\tif ((style & SWT.DROP_DOWN) != 0) {", "+\t\t\tOS.CreateIconControl(window, null, inContent, false, outControl);", "+\t\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\tarrowHandle = outControl [0];", "+\t\t\tupdateArrow ();", "+\t\t}", "+\t\tOS.CreateIconControl(window, null, inContent, false, outControl);", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\ticonHandle = outControl [0];", "+\t\tOS.CreateIconControl(window, null, inContent, false, outControl);", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tlabelHandle = outControl [0];", "+\t} else {", "+\t\tif ((parent.style & SWT.HORIZONTAL) != 0) {", "+\t\t\twidth = DEFAULT_SEPARATOR_WIDTH;", "+\t\t} else {", "+\t\t\theight = DEFAULT_SEPARATOR_WIDTH;", "+\t\t}", "+\t}\t", "+\tsetBounds (0, 0, width, height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3008ada22935d0c6e3ebec171e9fc7a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "19051ffe4fd662e4376e9ef3523424e6764f8cc9", "commitAfterChange": "fec0d691465789ed5f8cc6a20256c17056f52d4b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": " void createHandle (int index)", "diff": ["-\tint decorations = 0;", "-\tif ((style & SWT.NO_TRIM) == 0) {", "-\t\tif ((style & SWT.MIN) != 0) decorations |= OS.MWM_DECOR_MINIMIZE;", "-\t\tif ((style & SWT.MAX) != 0) decorations |= OS.MWM_DECOR_MAXIMIZE;", "-\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.MWM_DECOR_RESIZEH;", "-\t\tif ((style & SWT.BORDER) != 0) decorations |= OS.MWM_DECOR_BORDER;", "-\t\tif ((style & SWT.MENU) != 0) decorations |= OS.MWM_DECOR_MENU;", "-\t\tif ((style & SWT.TITLE) != 0) decorations |= OS.MWM_DECOR_TITLE;", "+\tif (shellHandle == 0) {", "+\t\tint decorations = 0;", "+\t\tif ((style & SWT.NO_TRIM) == 0) {", "+\t\t\tif ((style & SWT.MIN) != 0) decorations |= OS.MWM_DECOR_MINIMIZE;", "+\t\t\tif ((style & SWT.MAX) != 0) decorations |= OS.MWM_DECOR_MAXIMIZE;", "+\t\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.MWM_DECOR_RESIZEH;", "+\t\t\tif ((style & SWT.BORDER) != 0) decorations |= OS.MWM_DECOR_BORDER;", "+\t\t\tif ((style & SWT.MENU) != 0) decorations |= OS.MWM_DECOR_MENU;", "+\t\t\tif ((style & SWT.TITLE) != 0) decorations |= OS.MWM_DECOR_TITLE;", "+\t\t\t/*", "+\t\t\t* Feature in Motif.  Under some Window Managers (Sawmill), in order", "+\t\t\t* to get any border at all from the window manager it is necessary", "+\t\t\t* to set MWM_DECOR_BORDER.  The fix is to force these bits when any", "+\t\t\t* kind of border is requested.", "+\t\t\t*/", "+\t\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.MWM_DECOR_BORDER;", "+\t\t}", "+\t\t", "-\t\t* Feature in Motif.  Under some Window Managers (Sawmill), in order", "-\t\t* to get any border at all from the window manager it is necessary", "-\t\t* to set MWM_DECOR_BORDER.  The fix is to force these bits when any", "-\t\t* kind of border is requested.", "+\t\t* Note: Motif treats the modal values as hints to the Window Manager.", "+\t\t* For example, Enlightenment treats all modes except for SWT.MODELESS", "+\t\t* as SWT.APPLICATION_MODAL.  The Motif Window Manager honours all modes.", "-\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.MWM_DECOR_BORDER;", "-\t}", "-\t", "-\t/*", "-\t* Note: Motif treats the modal values as hints to the Window Manager.", "-\t* For example, Enlightenment treats all modes except for SWT.MODELESS", "-\t* as SWT.APPLICATION_MODAL.  The Motif Window Manager honours all modes.", "-\t*/", "-\tint inputMode = OS.MWM_INPUT_MODELESS;", "-\tif ((style & SWT.PRIMARY_MODAL) != 0) inputMode = OS.MWM_INPUT_PRIMARY_APPLICATION_MODAL;", "-\tif ((style & SWT.APPLICATION_MODAL) != 0) inputMode = OS.MWM_INPUT_FULL_APPLICATION_MODAL;", "-\tif ((style & SWT.SYSTEM_MODAL) != 0) inputMode = OS.MWM_INPUT_SYSTEM_MODAL;", "-\t", "-\t/* ", "-\t* Bug in Motif.  For some reason, if the title string", "-\t* length is not a multiple of 4, Motif occasionally", "-\t* draws garbage after the last character in the title.", "-\t* The fix is to pad the title.", "-\t*/", "-\tbyte [] buffer = {(byte)' ', 0, 0, 0};", "-\tint ptr = OS.XtMalloc (buffer.length);", "-\tOS.memmove (ptr, buffer, buffer.length);", "-\tint [] argList1 = {", "-\t\tOS.XmNmwmInputMode, inputMode,", "-\t\tOS.XmNmwmDecorations, decorations,", "-\t\tOS.XmNoverrideRedirect, (style & SWT.ON_TOP) != 0 ? 1 : 0,", "-\t\tOS.XmNtitle, ptr,", "-\t};", "-\t", "-\t/* ", "-\t* Feature in Motif.  On some Window Managers, when a top level", "-\t* shell is created with no decorations, the Window Manager does", "-\t* not reparent the window regardless of the XmNoverrideRedirect", "-\t* resource.  The fix is to treat the window as if it has been", "-\t* reparented by the Window Manager despite the fact that this", "-\t* has not really happened.", "-\t*/\t", "-\tif (isUndecorated ()) {", "-\t\treparented = true;", "-\t} ", "-\t", "-\t/*", "-\t* Feature in Motif.  When a top level shell has no parent and is", "-\t* application modal, Motif does not honour the modality.  The fix", "-\t* is to create the shell as a child of a hidden shell handle, the", "-\t* same way that XmNoverrideRedirect shells without parents are", "-\t* created.", "-\t*/", "-\tbyte [] appClass = display.appClass;", "-\tif (parent == null && (style & SWT.ON_TOP) == 0 && inputMode != OS.MWM_INPUT_FULL_APPLICATION_MODAL) {", "-\t\tint xDisplay = display.xDisplay;", "-\t\tint widgetClass = OS.applicationShellWidgetClass ();", "-\t\tshellHandle = OS.XtAppCreateShell (display.appName, appClass, widgetClass, xDisplay, argList1, argList1.length / 2);", "+\t\tint inputMode = OS.MWM_INPUT_MODELESS;", "+\t\tif ((style & SWT.PRIMARY_MODAL) != 0) inputMode = OS.MWM_INPUT_PRIMARY_APPLICATION_MODAL;", "+\t\tif ((style & SWT.APPLICATION_MODAL) != 0) inputMode = OS.MWM_INPUT_FULL_APPLICATION_MODAL;", "+\t\tif ((style & SWT.SYSTEM_MODAL) != 0) inputMode = OS.MWM_INPUT_SYSTEM_MODAL;", "+\t\t", "+\t\t/* ", "+\t\t* Bug in Motif.  For some reason, if the title string", "+\t\t* length is not a multiple of 4, Motif occasionally", "+\t\t* draws garbage after the last character in the title.", "+\t\t* The fix is to pad the title.", "+\t\t*/", "+\t\tbyte [] buffer = {(byte)' ', 0, 0, 0};", "+\t\tint ptr = OS.XtMalloc (buffer.length);", "+\t\tOS.memmove (ptr, buffer, buffer.length);", "+\t\tint [] argList1 = {", "+\t\t\tOS.XmNmwmInputMode, inputMode,", "+\t\t\tOS.XmNmwmDecorations, decorations,", "+\t\t\tOS.XmNoverrideRedirect, (style & SWT.ON_TOP) != 0 ? 1 : 0,", "+\t\t\tOS.XmNtitle, ptr,", "+\t\t};", "+\t\t", "+\t\t/* ", "+\t\t* Feature in Motif.  On some Window Managers, when a top level", "+\t\t* shell is created with no decorations, the Window Manager does", "+\t\t* not reparent the window regardless of the XmNoverrideRedirect", "+\t\t* resource.  The fix is to treat the window as if it has been", "+\t\t* reparented by the Window Manager despite the fact that this", "+\t\t* has not really happened.", "+\t\t*/\t", "+\t\tif (isUndecorated ()) {", "+\t\t\treparented = true;", "+\t\t} ", "+\t\t", "+\t\t/*", "+\t\t* Feature in Motif.  When a top level shell has no parent and is", "+\t\t* application modal, Motif does not honour the modality.  The fix", "+\t\t* is to create the shell as a child of a hidden shell handle, the", "+\t\t* same way that XmNoverrideRedirect shells without parents are", "+\t\t* created.", "+\t\t*/", "+\t\tbyte [] appClass = display.appClass;", "+\t\tif (parent == null && (style & SWT.ON_TOP) == 0 && inputMode != OS.MWM_INPUT_FULL_APPLICATION_MODAL) {", "+\t\t\tint xDisplay = display.xDisplay;", "+\t\t\tint widgetClass = OS.applicationShellWidgetClass ();", "+\t\t\tshellHandle = OS.XtAppCreateShell (display.appName, appClass, widgetClass, xDisplay, argList1, argList1.length / 2);", "+\t\t} else {", "+\t\t\tint widgetClass = OS.transientShellWidgetClass ();", "+//\t\t\tif ((style & SWT.ON_TOP) != 0) {", "+//\t\t\t\twidgetClass = OS.OverrideShellWidgetClass ();", "+//\t\t\t}", "+\t\t\tint parentHandle = display.shellHandle;", "+\t\t\tif (parent != null) parentHandle = parent.handle;", "+\t\t\tshellHandle = OS.XtCreatePopupShell (appClass, widgetClass, parentHandle, argList1, argList1.length / 2);", "+\t\t}", "+\t\tOS.XtFree (ptr);", "+\t\tif (shellHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tif (handle != 0) {", "+\t\t\tOS.XtSetMappedWhenManaged (shellHandle, false);", "+\t\t\tOS.XtRealizeWidget (shellHandle);", "+\t\t\tOS.XtSetMappedWhenManaged (shellHandle, true);", "+\t\t\tint xDisplay = display.xDisplay;", "+\t\t\tint xWindow = OS.XtWindow (shellHandle);", "+\t\t\tif (xWindow == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t/*", "+\t\t\t* NOTE:  The embedded parent handle must be realized", "+\t\t\t* before embedding and cannot be realized here because", "+\t\t\t* the handle belongs to another thread.", "+\t\t\t*/", "+\t\t\tOS.XReparentWindow (xDisplay, xWindow, handle, 0, 0);", "+\t\t\thandle = 0;", "+\t\t}", "+\t\t", "+\t\t/* Create scrolled handle */", "+\t\tcreateHandle (index, shellHandle, true);", "-\t\tint widgetClass = OS.transientShellWidgetClass ();", "-//\t\tif ((style & SWT.ON_TOP) != 0) {", "-//\t\t\twidgetClass = OS.OverrideShellWidgetClass ();", "-//\t\t}", "-\t\tint parentHandle = display.shellHandle;", "-\t\tif (parent != null) parentHandle = parent.handle;", "-\t\tshellHandle = OS.XtCreatePopupShell (appClass, widgetClass, parentHandle, argList1, argList1.length / 2);", "+\t\tint [] buffer = new int [1];", "+\t\tint [] argList = {OS.XmNchildren, 0, OS.XmNnumChildren, 0};", "+\t\tOS.XtGetValues (shellHandle, argList, argList.length / 2);", "+\t\tif (argList [3] < 1) error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.memmove (buffer, argList [1], 4);", "+\t\tscrolledHandle = buffer [0];", "+\t\tif (scrolledHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\targList [1] = argList [3] = 0;", "+\t\tOS.XtGetValues (scrolledHandle, argList, argList.length / 2);", "+\t\tif (argList [3] < 4) error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.memmove (buffer, argList [1] + (argList [3] - 1) * 4, 4);", "+\t\thandle = buffer [0];", "+\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\tOS.XtFree (ptr);", "-\tif (shellHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\tif (handle != 0) {", "-\t\tOS.XtSetMappedWhenManaged (shellHandle, false);", "-\t\tOS.XtRealizeWidget (shellHandle);", "-\t\tOS.XtSetMappedWhenManaged (shellHandle, true);", "-\t\tint xDisplay = display.xDisplay;", "-\t\tint xWindow = OS.XtWindow (shellHandle);", "-\t\tif (xWindow == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t/*", "-\t\t* NOTE:  The embedded parent handle must be realized", "-\t\t* before embedding and cannot be realized here because", "-\t\t* the handle belongs to another thread.", "-\t\t*/", "-\t\tOS.XReparentWindow (xDisplay, xWindow, handle, 0, 0);", "-\t\thandle = 0;", "-\t}", "-\t", "-\t/* Create scrolled handle */", "-\tcreateHandle (index, shellHandle, true);"]}], "num": 54986}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6471ee8d45b2604da4eadf383ef024c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6c954835bcc3c3885c0f903aa98b4de", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT AWT/cocoa/org/eclipse/swt/awt/SWT_AWT.java", "commitBeforeChange": "2790bcfe60b3e7f8ce22350fe25d1448b588095d", "commitAfterChange": "090ac8e4454bad124d79786b35656482e1591fa6", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static Frame new_Frame(final Composite parent)", "signatureAfterChange": " public static Frame new_Frame(final Composite parent)", "diff": ["-\t\tString className = embeddedFrameClass != null ? embeddedFrameClass : \"apple.awt.CEmbeddedFrame\";", "+\t\tString className = embeddedFrameClass != null ? embeddedFrameClass : JDK16_FRAME;", "-\t\tSWT.error (SWT.ERROR_NOT_IMPLEMENTED, cne);\t\t", "+\t\ttry {", "+\t\t\tclazz = Class.forName(JDK17_FRAME);", "+\t\t} catch (ClassNotFoundException cne1) {", "+\t\t\tSWT.error (SWT.ERROR_NOT_IMPLEMENTED, cne1);", "+\t\t}", "+\tfinal boolean isJDK17 = JDK17_FRAME.equals(frame.getClass().getName());", "+\t/* When display is disposed the frame is disposed in AWT EventQueue.", "+\t * Force main event loop to run to let the frame finish dispose.", "+\t */", "+\tfinal Display display = parent.getDisplay();", "+\tdisplay.addListener(SWT.Dispose, new Listener() {", "+\t\tpublic void handleEvent(Event event) {", "+\t\t\twhile (frame.isDisplayable() && !display.isDisposed()) {", "+\t\t\t\tif (!display.readAndDispatch()) {", "+\t\t\t\t\tdisplay.sleep();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t//Frame finished dispose, the listener can be removed", "+\t\t\tif (!display.isDisposed()) {", "+\t\t\t\tdisplay.removeListener(SWT.Dispose, this);", "+\t\t\t}", "+\t\t}", "+\t});", "+\t", "+\t\t\t\t\tif (isJDK17) {", "+\t\t\t\t\t\tshell.removeListener (SWT.Activate, this);", "+\t\t\t\t\t\tshell.removeListener (SWT.Deactivate, this);", "+\t\t\t\t\t}", "+\t\t\t\tcase SWT.Activate:", "+\t\t\t\t\tif (!parent.isFocusControl()) return;", "+\t\t\t\tcase SWT.FocusOut:", "-\tparent.addListener (SWT.Deactivate, listener);", "+\tif (isJDK17) {", "+\t\tparent.addListener(SWT.FocusOut, listener);", "+\t\t//To allow cross-app activation/deactivation", "+\t\tshell.addListener (SWT.Activate, listener);\t", "+\t\tshell.addListener (SWT.Deactivate, listener);\t", "+\t} else {", "+\t\tparent.addListener (SWT.Deactivate, listener);\t", "+\t}", "-\tparent.getDisplay().asyncExec(new Runnable() {", "+\tdisplay.asyncExec(new Runnable() {", "-\t\t\tEventQueue.invokeLater(new Runnable () {", "-\t\t\t\tpublic void run () {", "-\t\t\t\t\tframe.setSize (clientArea.width, clientArea.height);", "-\t\t\t\t\tframe.validate();", "-\t\t\t\t\t", "-\t\t\t\t\t// Bug in Cocoa AWT? For some reason the frame isn't showing up on first draw.", "-\t\t\t\t\t// Toggling visibility seems to be the only thing that works.", "-\t\t\t\t\tframe.setVisible(false);", "-\t\t\t\t\tframe.setVisible(true);", "-\t\t\t\t}", "-\t\t\t});", "+\t\t\tif (isJDK17) {", "+\t\t\t\ttry {", "+\t\t\t\t\tMethod method = frame.getClass().getMethod(\"validateWithBounds\", new Class[] {int.class, int.class, int.class, int.class});", "+\t\t\t\t\tif (method != null) method.invoke(frame, new Object[]{new Integer(clientArea.x), new Integer(clientArea.y), new Integer(clientArea.width), new Integer(clientArea.height)});", "+\t\t\t\t} catch (Throwable e) {e.printStackTrace();}", "+\t\t\t} else {", "+\t\t\t\tEventQueue.invokeLater(new Runnable () {", "+\t\t\t\t\tpublic void run () {", "+\t\t\t\t\t\tframe.setSize(clientArea.width, clientArea.height);", "+\t\t\t\t\t\tframe.validate();", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// Bug in Cocoa AWT? For some reason the frame isn't showing up on first draw.", "+\t\t\t\t\t\t// Toggling visibility seems to be the only thing that works.", "+\t\t\t\t\t\tframe.setVisible(false);", "+\t\t\t\t\t\tframe.setVisible(true);", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f68609f155b5f496ee7e0570182c2cea", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT AWT/cocoa/org/eclipse/swt/awt/SWT_AWT.java", "commitBeforeChange": "a84e4f12000c77da8b885150e339fe7970a888cc", "commitAfterChange": "269e9bd88659168cd99ab994fb73a4e91595fd06", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static Frame new_Frame(final Composite parent)", "signatureAfterChange": " public static Frame new_Frame(final Composite parent)", "diff": ["-\t\tString className = embeddedFrameClass != null ? embeddedFrameClass : \"apple.awt.CEmbeddedFrame\";", "+\t\tString className = embeddedFrameClass != null ? embeddedFrameClass : JDK16_FRAME;", "-\t\tSWT.error (SWT.ERROR_NOT_IMPLEMENTED, cne);\t\t", "+\t\ttry {", "+\t\t\tclazz = Class.forName(JDK17_FRAME);", "+\t\t} catch (ClassNotFoundException cne1) {", "+\t\t\tSWT.error (SWT.ERROR_NOT_IMPLEMENTED, cne1);", "+\t\t}", "+\tfinal boolean isJDK17 = JDK17_FRAME.equals(frame.getClass().getName());", "+\t/* When display is disposed the frame is disposed in AWT EventQueue.", "+\t * Force main event loop to run to let the frame finish dispose.", "+\t */", "+\tfinal Display display = parent.getDisplay();", "+\tdisplay.addListener(SWT.Dispose, new Listener() {", "+\t\tpublic void handleEvent(Event event) {", "+\t\t\twhile (frame.isDisplayable() && !display.isDisposed()) {", "+\t\t\t\tif (!display.readAndDispatch()) {", "+\t\t\t\t\tdisplay.sleep();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t//Frame finished dispose, the listener can be removed", "+\t\t\tif (!display.isDisposed()) {", "+\t\t\t\tdisplay.removeListener(SWT.Dispose, this);", "+\t\t\t}", "+\t\t}", "+\t});", "+\t", "+\t\t\t\t\tif (isJDK17) {", "+\t\t\t\t\t\tshell.removeListener (SWT.Activate, this);", "+\t\t\t\t\t\tshell.removeListener (SWT.Deactivate, this);", "+\t\t\t\t\t}", "+\t\t\t\tcase SWT.Activate:", "+\t\t\t\t\tif (!parent.isFocusControl()) return;", "+\t\t\t\tcase SWT.FocusOut:", "-\tparent.addListener (SWT.Deactivate, listener);", "+\tif (isJDK17) {", "+\t\tparent.addListener(SWT.FocusOut, listener);", "+\t\t//To allow cross-app activation/deactivation", "+\t\tshell.addListener (SWT.Activate, listener);\t", "+\t\tshell.addListener (SWT.Deactivate, listener);\t", "+\t} else {", "+\t\tparent.addListener (SWT.Deactivate, listener);\t", "+\t}", "-\tparent.getDisplay().asyncExec(new Runnable() {", "+\tdisplay.asyncExec(new Runnable() {", "-\t\t\tEventQueue.invokeLater(new Runnable () {", "-\t\t\t\tpublic void run () {", "-\t\t\t\t\tframe.setSize (clientArea.width, clientArea.height);", "-\t\t\t\t\tframe.validate();", "-\t\t\t\t\t", "-\t\t\t\t\t// Bug in Cocoa AWT? For some reason the frame isn't showing up on first draw.", "-\t\t\t\t\t// Toggling visibility seems to be the only thing that works.", "-\t\t\t\t\tframe.setVisible(false);", "-\t\t\t\t\tframe.setVisible(true);", "-\t\t\t\t}", "-\t\t\t});", "+\t\t\tif (isJDK17) {", "+\t\t\t\ttry {", "+\t\t\t\t\tMethod method = frame.getClass().getMethod(\"validateWithBounds\", new Class[] {int.class, int.class, int.class, int.class});", "+\t\t\t\t\tif (method != null) method.invoke(frame, new Object[]{new Integer(clientArea.x), new Integer(clientArea.y), new Integer(clientArea.width), new Integer(clientArea.height)});", "+\t\t\t\t} catch (Throwable e) {e.printStackTrace();}", "+\t\t\t} else {", "+\t\t\t\tEventQueue.invokeLater(new Runnable () {", "+\t\t\t\t\tpublic void run () {", "+\t\t\t\t\t\tframe.setSize(clientArea.width, clientArea.height);", "+\t\t\t\t\t\tframe.validate();", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// Bug in Cocoa AWT? For some reason the frame isn't showing up on first draw.", "+\t\t\t\t\t\t// Toggling visibility seems to be the only thing that works.", "+\t\t\t\t\t\tframe.setVisible(false);", "+\t\t\t\t\t\tframe.setVisible(true);", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t}"]}], "num": 32574}
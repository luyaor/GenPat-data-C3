{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45db6e888d31ce3e520f3b96d59fc2c5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5bf79378be214ae5986e4841708bbef", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "8b753b0ebc77f81709855554fdc470c17af87b20", "commitAfterChange": "2582197191fb20feaee2c873f27f037e4402a98c", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 141, "signatureBeforeChange": "  boolean runSettings ()", "signatureAfterChange": "  boolean runSettings ()", "diff": ["-\tinitColors ();", "+\t", "+\tboolean ignoreColorChange = false;", "+\t/**", "+\t * Feature in Cocoa: When dark mode is enabled on OSX version >= 10.10 and a SWT TrayItem (NSStatusItem) is present in the menubar,", "+\t * changing the OSX appearance or changing the configuration of attached displays causes the textColor and textBackground color to change. ", "+\t * This sets the text foreground of several widgets as white and hence text is invisible. The workaround is to detect this case and prevent ", "+\t * the update of LIST_FOREGROUND, LIST_BACKGROUND and COLOR_WIDGET_FOREGROUND colors.", "+\t */", "+\tif (OS.VERSION_MMB >= OS.VERSION_MMB (10, 10, 0) && tray != null && tray.itemCount > 0) {", "+\t\t/* ", "+\t\t * osxMode will be \"Dark\" when in OSX dark mode. Otherwise, it'll be null.", "+\t\t */", "+\t\tNSString osxMode = NSUserDefaults.standardUserDefaults ().stringForKey (NSString.stringWith (\"AppleInterfaceStyle\"));", "+\t\tif (osxMode != null && \"Dark\".equals (osxMode.getString ())) {", "+\t\t\tignoreColorChange = true;", "+\t\t}", "+\t}", "+\tinitColors (ignoreColorChange);", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30f52402ea89db8aa1b0f8fe73ec0bc8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "4081902c239578f63f15203c525f876d179f2f59", "commitAfterChange": "6342d60ee241e531740db13f1e8f8d595ad76a9f", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  void drawBackground (int hDC, RECT rect)", "signatureAfterChange": "  void drawBackground (int hDC, RECT rect)", "diff": ["-\tint hPalette = display.hPalette;", "-\tif (hPalette != 0) {", "-\t\tOS.SelectPalette (hDC, hPalette, false);", "-\t\tOS.RealizePalette (hDC);", "+\tControl control = null;", "+\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "+\t\tcontrol = findThemeControl ();", "-\tint pixel = getBackgroundPixel ();", "-\tint hBrush = findBrush (pixel);", "-\tOS.FillRect (hDC, rect, hBrush);", "+\tif (control == null) {", "+\t\tint hPalette = display.hPalette;", "+\t\tif (hPalette != 0) {", "+\t\t\tOS.SelectPalette (hDC, hPalette, false);", "+\t\t\tOS.RealizePalette (hDC);", "+\t\t}", "+\t\tint pixel = getBackgroundPixel ();", "+\t\tint hBrush = findBrush (pixel);", "+\t\tOS.FillRect (hDC, rect, hBrush);", "+\t} else {", "+\t\tRECT rect2 = new RECT ();", "+\t\tOS.GetWindowRect (control.handle, rect2);\t\t", "+\t\tOS.MapWindowPoints (0, handle, rect2, 2);", "+\t\tcontrol.drawThemeBackground (hDC, rect2);\t", "+\t}", "+}"]}], "num": 29926}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "437533bea795d7e6a5b04e285f71a789", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5a071390f907ff85877d5cb9183a03d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "977d5e0f203ec4ef6c7d327c6fb00fb7e3a9fea1", "commitAfterChange": "d90c1dac39bb5b1c9da1307d0ac9b1f40b093e4c", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " void doMouseDown(Event event)", "signatureAfterChange": " void doMouseDown(Event event)", "diff": ["+\tif ((event.stateMask & SWT.SHIFT) == 0) anchorItem = null;", "+", "-\t\t\t} else {", "-\t\t\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == 0) {", "-\t\t\t\t\tselectItem(selectedItem, false);", "-\t\t\t\t\tsetFocusItem(selectedItem, true);", "-\t\t\t\t\tEvent newEvent = new Event();", "-\t\t\t\t\tnewEvent.item = selectedItem;", "-\t\t\t\t\tsendEvent(SWT.Selection, newEvent);", "-\t\t\t\t\tredrawItem(selectedItem.availableIndex);", "-\t\t\t\t}", "+\t\t\t\treturn;", "-\t\t} else {\t/* item is selected */", "-\t\t\tif (event.button == 1) {", "-\t\t\t\t/* fire a selection event, though the selection did not change */", "-\t\t\t\tEvent newEvent = new Event();", "-\t\t\t\tnewEvent.item = selectedItem;", "-\t\t\t\tsendEvent(SWT.Selection, newEvent);", "-\t\t\t}", "-\t\t}", "-\t} else {\t/* SWT.MULTI */", "-\t\tif (!selectedItem.selected) {", "-\t\t\tif (event.button == 1) {", "-\t\t\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == SWT.SHIFT) {", "-\t\t\t\t\t// TODO do shift-select", "-\t\t\t\t} else {", "-\t\t\t\t\tselectItem(selectedItem, (event.stateMask & SWT.CTRL) != 0);", "-\t\t\t\t\tsetFocusItem(selectedItem, true);", "-\t\t\t\t\tEvent newEvent = new Event();", "-\t\t\t\t\tnewEvent.item = selectedItem;", "-\t\t\t\t\tsendEvent(SWT.Selection, newEvent);", "-\t\t\t\t\tredrawItem(selectedItem.availableIndex);", "-\t\t\t\t}", "-\t\t\t} else {\t/* button 3 */", "-\t\t\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == 0) {", "-\t\t\t\t\tselectItem(selectedItem, false);", "-\t\t\t\t\tsetFocusItem(selectedItem, true);", "-\t\t\t\t\tEvent newEvent = new Event();", "-\t\t\t\t\tnewEvent.item = selectedItem;", "-\t\t\t\t\tsendEvent(SWT.Selection, newEvent);", "-\t\t\t\t\tredrawItem(selectedItem.availableIndex);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else {\t/* item is selected */", "-\t\t\tif (event.button != 1) return;", "-\t\t\tif ((event.stateMask & SWT.CTRL) != 0) {", "-\t\t\t\tremoveSelectedItem(getSelectionIndex(selectedItem));", "+\t\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == 0) {", "+\t\t\t\tselectItem(selectedItem, false);", "-\t\t\t\tredrawItem(selectedItem.availableIndex);", "-\t\t\t} else {", "-\t\t\t\tif ((event.stateMask & SWT.SHIFT) != 0) {", "-\t\t\t\t\t// TODO study this", "-\t\t\t\t} else {", "-\t\t\t\t\tselectItem(selectedItem, false);", "-\t\t\t\t\tsetFocusItem(selectedItem, true);", "-\t\t\t\t\tEvent newEvent = new Event();", "-\t\t\t\t\tnewEvent.item = selectedItem;", "-\t\t\t\t\tsendEvent(SWT.Selection, newEvent);", "-\t\t\t\t\tredrawItem(selectedItem.availableIndex);", "-\t\t\t\t}", "+\t\t\t\tredrawItem(selectedItem.availableIndex);", "+\t\t\t\treturn;", "-\t}\t\t", "+\t\t/* item is selected */", "+\t\tif (event.button == 1) {", "+\t\t\t/* fire a selection event, though the selection did not change */", "+\t\t\tEvent newEvent = new Event();", "+\t\t\tnewEvent.item = selectedItem;", "+\t\t\tsendEvent(SWT.Selection, newEvent);", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t/* SWT.MULTI */", "+\tif (!selectedItem.selected) {", "+\t\tif (event.button == 1) {", "+\t\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == SWT.SHIFT) {", "+\t\t\t\tif (anchorItem == null) anchorItem = focusItem;", "+\t\t\t\tint anchorIndex = anchorItem.availableIndex;", "+\t\t\t\tint selectIndex = selectedItem.availableIndex;", "+\t\t\t\tTreeItem2[] newSelection = new TreeItem2 [Math.abs(anchorIndex - selectIndex) + 1];", "+\t\t\t\tint step = anchorIndex < selectIndex ? 1 : -1;", "+\t\t\t\tint writeIndex = 0;", "+\t\t\t\tfor (int i = anchorIndex; i != selectIndex; i += step) {", "+\t\t\t\t\tnewSelection[writeIndex++] = availableItems[i];", "+\t\t\t\t}", "+\t\t\t\tnewSelection[writeIndex] = availableItems[selectIndex];", "+\t\t\t\tsetSelection(newSelection);", "+\t\t\t\tsetFocusItem(selectedItem, true);", "+\t\t\t\tEvent newEvent = new Event();", "+\t\t\t\tnewEvent.item = selectedItem;", "+\t\t\t\tsendEvent(SWT.Selection, newEvent);", "+\t\t\t\tredrawItems(Math.min(anchorIndex, selectIndex), Math.max(anchorIndex, selectIndex));", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tselectItem(selectedItem, (event.stateMask & SWT.CTRL) != 0);", "+\t\t\tsetFocusItem(selectedItem, true);", "+\t\t\tEvent newEvent = new Event();", "+\t\t\tnewEvent.item = selectedItem;", "+\t\t\tsendEvent(SWT.Selection, newEvent);", "+\t\t\tredrawItem(selectedItem.availableIndex);", "+\t\t\treturn;", "+\t\t}", "+\t\t/* button 3 */", "+\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == 0) {", "+\t\t\tselectItem(selectedItem, false);", "+\t\t\tsetFocusItem(selectedItem, true);", "+\t\t\tEvent newEvent = new Event();", "+\t\t\tnewEvent.item = selectedItem;", "+\t\t\tsendEvent(SWT.Selection, newEvent);", "+\t\t\tredrawItem(selectedItem.availableIndex);", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t/* item is selected */", "+\tif (event.button != 1) return;", "+\tif ((event.stateMask & SWT.CTRL) != 0) {", "+\t\tremoveSelectedItem(getSelectionIndex(selectedItem));", "+\t\tsetFocusItem(selectedItem, true);", "+\t\tredrawItem(selectedItem.availableIndex);", "+\t\tEvent newEvent = new Event();", "+\t\tnewEvent.item = selectedItem;", "+\t\tsendEvent(SWT.Selection, newEvent);", "+\t\treturn;", "+\t}", "+\tif ((event.stateMask & SWT.SHIFT) != 0) {", "+\t\tif (anchorItem == null) anchorItem = focusItem;", "+\t\tint anchorIndex = anchorItem.availableIndex;", "+\t\tint selectIndex = selectedItem.availableIndex;", "+\t\tTreeItem2[] newSelection = new TreeItem2 [Math.abs(anchorIndex - selectIndex) + 1];", "+\t\tint step = anchorIndex < selectIndex ? 1 : -1;", "+\t\tint writeIndex = 0;", "+\t\tfor (int i = anchorIndex; i != selectIndex; i += step) {", "+\t\t\tnewSelection[writeIndex++] = availableItems[i];", "+\t\t}", "+\t\tnewSelection[writeIndex] = availableItems[selectIndex];", "+\t\tsetSelection(newSelection);", "+\t\tsetFocusItem(selectedItem, true);", "+\t\tEvent newEvent = new Event();", "+\t\tnewEvent.item = selectedItem;", "+\t\tsendEvent(SWT.Selection, newEvent);", "+\t\tredrawItems(Math.min(anchorIndex, selectIndex), Math.max(anchorIndex, selectIndex));", "+\t\treturn;", "+\t}", "+\tselectItem(selectedItem, false);", "+\tsetFocusItem(selectedItem, true);", "+\tEvent newEvent = new Event();", "+\tnewEvent.item = selectedItem;", "+\tsendEvent(SWT.Selection, newEvent);", "+\tredrawItem(selectedItem.availableIndex);", "+\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "82bf84369b9c51467dd75a720c7cc49c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 49, "signatureBeforeChange": " void doMouseDown(Event event)", "signatureAfterChange": " void mouseDown(Event event)", "diff": ["-void doMouseDown(Event event) {", "-\tif (!isFocusControl()) setFocus();", "-\tint index = (event.y - getHeaderHeight()) / itemHeight + topIndex;", "-\tif (!(0 <= index && index < availableItems.length)) return;\t/* not on an available item */", "-\tTreeItem2 selectedItem = availableItems[index];", "-\t", "-\t/* if click was in expander box */", "-\tif (selectedItem.getItemCount() > 0 && selectedItem.getExpanderBounds().contains(event.x, event.y)) {", "-\t\tif (event.button != 1) return;", "-\t\tboolean expand = !selectedItem.getExpanded();", "-\t\tselectedItem.setExpanded(expand);", "-\t\tEvent newEvent = new Event();", "-\t\tnewEvent.item = selectedItem;", "-\t\tif (expand) {", "-\t\t\tinExpand = true;", "-\t\t\tsendEvent(SWT.Expand, newEvent);", "-\t\t\tinExpand = false;", "-\t\t\tif (isDisposed()) return;", "-\t\t\tif (selectedItem.getItemCount() == 0) {", "-\t\t\t\tselectedItem.expanded = false;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tsendEvent(SWT.Collapse, newEvent);", "-\t\t}", "-\t\treturn;", "-\t}", "-\t/* if click was in checkbox */", "-\tif ((style & SWT.CHECK) != 0 && selectedItem.getCheckboxBounds().contains(event.x, event.y)) {", "-\t\tif (event.button != 1) return;", "-\t\tselectedItem.setChecked(!selectedItem.getChecked());", "-\t\tEvent newEvent = new Event();", "-\t\tnewEvent.item = selectedItem;", "-\t\tnewEvent.detail = SWT.CHECK;", "-\t\tsendEvent(SWT.Selection, newEvent);", "-\t\treturn;", "-\t}", "-\t", "-\tif (!selectedItem.getHitBounds().contains(event.x, event.y)) return;", "-\t", "-\tif ((event.stateMask & SWT.SHIFT) == 0 && event.keyCode != SWT.SHIFT) anchorItem = null;", "-\tif ((style & SWT.SINGLE) != 0) {", "-\t\tif (!selectedItem.isSelected()) {", "-\t\t\tif (event.button == 1) {", "-\t\t\t\tselectItem(selectedItem, false);", "-\t\t\t\tsetFocusItem(selectedItem, true);", "-\t\t\t\tredrawItem(selectedItem.availableIndex);", "-\t\t\t\tEvent newEvent = new Event();", "-\t\t\t\tnewEvent.item = selectedItem;", "-\t\t\t\tsendEvent(SWT.Selection, newEvent);", "-\t\t\t\treturn;", "-\t\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == 0) {", "-\t\t\t\tselectItem(selectedItem, false);", "-\t\t\t\tsetFocusItem(selectedItem, true);", "-\t\t\t\tredrawItem(selectedItem.availableIndex);", "-\t\t\t\tEvent newEvent = new Event();", "-\t\t\t\tnewEvent.item = selectedItem;", "-\t\t\t\tsendEvent(SWT.Selection, newEvent);", "-\t\t\t\treturn;", "-\t\t}", "-\t\t/* item is selected */", "-\t\tif (event.button == 1) {", "-\t\t\t/* fire a selection event, though the selection did not change */", "-\t\t\tEvent newEvent = new Event();", "-\t\t\tnewEvent.item = selectedItem;", "-\t\t\tsendEvent(SWT.Selection, newEvent);", "-\t\t\treturn;", "-\t\t}", "-\t}", "-\t/* SWT.MULTI */", "-\tif (!selectedItem.isSelected()) {", "-\t\tif (event.button == 1) {", "-\t\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == SWT.SHIFT) {", "-\t\t\t\tif (anchorItem == null) anchorItem = focusItem;", "-\t\t\t\tint anchorIndex = anchorItem.availableIndex;", "-\t\t\t\tint selectIndex = selectedItem.availableIndex;", "-\t\t\t\tTreeItem2[] newSelection = new TreeItem2 [Math.abs(anchorIndex - selectIndex) + 1];", "-\t\t\t\tint step = anchorIndex < selectIndex ? 1 : -1;", "-\t\t\t\tint writeIndex = 0;", "-\t\t\t\tfor (int i = anchorIndex; i != selectIndex; i += step) {", "-\t\t\t\t\tnewSelection[writeIndex++] = availableItems[i];", "-\t\t\t\t}", "-\t\t\t\tnewSelection[writeIndex] = availableItems[selectIndex];", "-\t\t\t\tsetSelection(newSelection);", "-\t\t\t\tsetFocusItem(selectedItem, true);", "-\t\t\t\tredrawItems(Math.min(anchorIndex, selectIndex), Math.max(anchorIndex, selectIndex));", "-\t\t\t\tEvent newEvent = new Event();", "-\t\t\t\tnewEvent.item = selectedItem;", "-\t\t\t\tsendEvent(SWT.Selection, newEvent);", "-\t\t\t\treturn;", "-\t\t\tselectItem(selectedItem, (event.stateMask & SWT.CTRL) != 0);", "-\t\t\tsetFocusItem(selectedItem, true);", "-\t\t\tredrawItem(selectedItem.availableIndex);", "-\t\t\tEvent newEvent = new Event();", "-\t\t\tnewEvent.item = selectedItem;", "-\t\t\tsendEvent(SWT.Selection, newEvent);", "-\t\t\treturn;", "-\t\t/* button 3 */", "-\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == 0) {", "-\t\t\tselectItem(selectedItem, false);", "-\t\t\tsetFocusItem(selectedItem, true);", "-\t\t\tredrawItem(selectedItem.availableIndex);", "-\t\t\tEvent newEvent = new Event();", "-\t\t\tnewEvent.item = selectedItem;", "-\t\t\tsendEvent(SWT.Selection, newEvent);", "-\t\t\treturn;", "-\t\t}", "-\t}", "-\t/* item is selected */", "-\tif (event.button != 1) return;", "-\tif ((event.stateMask & SWT.CTRL) != 0) {", "-\t\tremoveSelectedItem(getSelectionIndex(selectedItem));", "-\t\tsetFocusItem(selectedItem, true);", "-\t\tredrawItem(selectedItem.availableIndex);", "-\t\tEvent newEvent = new Event();", "-\t\tnewEvent.item = selectedItem;", "-\t\tsendEvent(SWT.Selection, newEvent);", "-\t\treturn;", "-\t}", "-\tif ((event.stateMask & SWT.SHIFT) != 0) {", "-\t\tif (anchorItem == null) anchorItem = focusItem;", "-\t\tint anchorIndex = anchorItem.availableIndex;", "-\t\tint selectIndex = selectedItem.availableIndex;", "-\t\tTreeItem2[] newSelection = new TreeItem2 [Math.abs(anchorIndex - selectIndex) + 1];", "-\t\tint step = anchorIndex < selectIndex ? 1 : -1;", "-\t\tint writeIndex = 0;", "-\t\tfor (int i = anchorIndex; i != selectIndex; i += step) {", "-\t\t\tnewSelection[writeIndex++] = availableItems[i];", "-\t\t}", "-\t\tnewSelection[writeIndex] = availableItems[selectIndex];", "-\t\tsetSelection(newSelection);", "-\t\tsetFocusItem(selectedItem, true);", "-\t\tredrawItems(Math.min(anchorIndex, selectIndex), Math.max(anchorIndex, selectIndex));", "-\t\tEvent newEvent = new Event();", "-\t\tnewEvent.item = selectedItem;", "-\t\tsendEvent(SWT.Selection, newEvent);", "-\t\treturn;", "-\t}", "-\tselectItem(selectedItem, false);", "-\tsetFocusItem(selectedItem, true);", "-\tredrawItem(selectedItem.availableIndex);", "-\tEvent newEvent = new Event();", "-\tnewEvent.item = selectedItem;", "-\tsendEvent(SWT.Selection, newEvent);", "-}", "+ */", "+void mouseDown(Event event) {", "+\tint hitItemIndex;", "+\tTreeItem2 hitItem;", "+\tSelectableItem selectionItem = getLastSelection();", "+\tint itemAction;", "+", "+\thitItemIndex = event.y / getItemHeight();", "+\thitItem = getRoot().getVisibleItem(hitItemIndex + getTopIndex());", "+\tif (hitItem == null) {", "+\t\treturn;", "+\t}", "+\tif (!isFocusControl()) forceFocus();", "+\tswitch (itemAction = itemAction(hitItem, event.x, event.y)) {", "+\t\tcase ActionExpandCollapse:", "+\t\t\tif (event.button != 1) return;", "+\t\t\tif (hitItem.getExpanded() == true) {", "+\t\t\t\tcollapse(hitItem, true);", "+\t\t\t}", "+\t\t\telse {", "+\t\t\t\texpand(hitItem, true);", "+\t\tcase ActionSelect:", "+\t\t\tdoMouseSelect(hitItem, hitItemIndex + getTopIndex(), event.stateMask, event.button);", "+\t\t\tbreak;", "+\t\tcase ActionCheck:", "+\t\t\tif (event.button != 1) return;", "+\t\t\tdoCheckItem(hitItem);", "+\t\t\tbreak;", "+\t}", "+\tif (itemAction != ActionSelect && selectionItem == null) {", "+\t\tselectionItem = getRoot().getVisibleItem(getTopIndex());\t// select the top item if no item was selected before", "+\t\tselectNotify(selectionItem);\t\t\t\t\t\t\t\t"]}], "num": 2706}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8ddf7530878a3dc69172dc62097bb2d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2c6068ca3ac476fb0eac111716f0479", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/widgets/EventTable.java", "commitBeforeChange": "14d28b3fe6cf36e8628c8f9f5ebeeff54d692a1f", "commitAfterChange": "ee5d9893706139195fd8cc7feb51022f383cfd88", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \t\r public void hook (int eventType, Listener handler)", "signatureAfterChange": "\r \t\r public void hook (int eventType, Listener listener)", "diff": ["-public void hook (int eventType, Listener handler) {\r", "+public void hook (int eventType, Listener listener) {\r", "-\tif (handlers == null) handlers = new Listener [4];\r", "-\tfor (int i=0; i<types.length; i++) {\r", "-\t\tif (types [i] == 0) {\r", "-\t\t\ttypes [i] = eventType;\r", "-\t\t\thandlers [i] = handler;\r", "-\t\t\treturn;\r", "+\tif (listeners == null) listeners = new Listener [4];\r", "+\tint length = types.length, index = length - 1;\r", "+\twhile (index >= 0) {\r", "+\t\tif (types [index] != 0) break;\r", "+\t\t--index;\r", "+\t}\r", "+\tindex++;\r", "+\tif (index == length) {\r", "+\t\tif (level == 0) {\r", "+\t\t\tindex = 0;\r", "+\t\t\tfor (int i=0; i<types.length; i++) {\r", "+\t\t\t\tif (types [i] != 0) {\r", "+\t\t\t\t\ttypes [index] = types [i];\r", "+\t\t\t\t\tlisteners [index] = listeners [i];\r", "+\t\t\t\t\tindex++;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tfor (int i=index; i<types.length; i++) {\r", "+\t\t\t\ttypes [i] = 0;\r", "+\t\t\t\tlisteners [index] = null;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (index == length) {\r", "+\t\t\tint [] newTypes = new int [length + 4];\r", "+\t\t\tSystem.arraycopy (types, 0, newTypes, 0, length);\r", "+\t\t\ttypes = newTypes;\r", "+\t\t\tListener [] newListeners = new Listener [length + 4];\r", "+\t\t\tSystem.arraycopy (listeners, 0, newListeners, 0, length);\r", "+\t\t\tlisteners = newListeners;\r", "-\tint size = types.length;\r", "-\tint [] newTypes = new int [size + 4];\r", "-\tListener [] newHandlers = new Listener [size + 4];\r", "-\tSystem.arraycopy (types, 0, newTypes, 0, size);\r", "-\tSystem.arraycopy (handlers, 0, newHandlers, 0, size);\r", "-\ttypes = newTypes;  handlers = newHandlers;\r", "-\ttypes [size] = eventType;  handlers [size] = handler;\r", "+\ttypes [index] = eventType;\r", "+\tlisteners [index] = listener;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be8e18366841923d629b5de0435affee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 95, "signatureBeforeChange": " public void timerExec (int milliseconds, Runnable runnable)", "signatureAfterChange": "  public void timerExec (int milliseconds, Runnable runnable)", "diff": ["- */", "+", "+\tif (runnable == null) error (SWT.ERROR_NULL_ARGUMENT);", "-\tif (timerIDs == null) timerIDs = new int [4];", "+\tif (timerIds == null) timerIds = new int [4];", "+\twhile (index < timerList.length) {", "+\t\tif (timerList [index] == runnable) break;", "+\t\tindex++;", "+\t}", "+\tif (index != timerList.length) {", "+\t\tint timerId = timerIds [index];", "+\t\tif (milliseconds < 0) {", "+\t\t\tOS.RemoveEventLoopTimer (timerId);", "+\t\t\ttimerList [index] = null;", "+\t\t\ttimerIds [index] = 0;", "+\t\t} else {", "+\t\t\tOS.SetEventLoopTimerNextFireTime (timerId, milliseconds / 1000.0);", "+\t\t}", "+\t\treturn;", "+\t} ", "+\tif (milliseconds < 0) return;", "+\tindex = 0;", "-\t\tint [] newTimerIDs = new int [timerIDs.length + 4];", "-\t\tSystem.arraycopy (timerIDs, 0, newTimerIDs, 0, timerIDs.length);", "-\t\ttimerIDs = newTimerIDs;", "+\t\tint [] newTimerIds = new int [timerIds.length + 4];", "+\t\tSystem.arraycopy (timerIds, 0, newTimerIds, 0, timerIds.length);", "+\t\ttimerIds = newTimerIds;", "-\tint[] timer= new int[1];", "-\tOS.InstallEventLoopTimer(OS.GetCurrentEventLoop(), milliseconds / 1000.0, 0.0, timerProc, index, timer);", "-\tint timerID = timer[0];", "-\t", "-\tif (timerID != 0) {", "-\t\ttimerIDs [index] = timerID;", "+\tint [] timerId = new int [1];", "+\tint eventLoop = OS.GetCurrentEventLoop ();", "+\tOS.InstallEventLoopTimer (eventLoop, milliseconds / 1000.0, 0.0, timerProc, index, timerId);", "+\tif (timerId [0] != 0) {", "+\t\ttimerIds [index] = timerId [0];"]}], "num": 34860}
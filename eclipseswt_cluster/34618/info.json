{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a4ce013f223b1c4e423ccd7b63bd3e7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f8fb27e2f1f876ea8aba767db867cc2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "d8e1235ddc2020cd8f7be96d5c0bd682e9ea142b", "commitAfterChange": "197cfcd513aaafd6d3a47789f48b7c6bc1b8da70", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  int kEventRawKey (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventRawKey (int nextHandler, int theEvent, int userData)", "diff": ["-\t/*", "-\t* Feature in the Macintosh.  For some reason, the default handler", "-\t* does not issue kEventTextInputUnicodeForKeyEvent when the user", "-\t* types Command+Space.  The fix is to look for this case and", "-\t* send the key from kEventRawKeyDown instead.", "-\t* ", "-\t* NOTE: This code relies on Command+Space being consumed and", "-\t* will deliver two events if this ever changes.", "-\t*/\t", "-\tif ((state & CANVAS) != 0) {", "-\t\tint [] keyCode = new int [1];", "-\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "-\t\tif (keyCode [0] == 49 /* Space */) {", "-\t\t\tint [] modifiers = new int [1];", "-\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "-\t\t\tif (modifiers [0] == OS.cmdKey) {", "-\t\t\t\tif (!sendKeyEvent (SWT.KeyDown, theEvent)) return OS.noErr;", "-\t\t\t}", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "921d3d9784426a4b16e4b135e6363b59", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "0fd3bc9ae79cda4a88436e0ac75a8b1fc54953f0", "commitAfterChange": "92840bf1dc9c70e7ea3cb593123b2ec10d732093", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  int kEventRawKey (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventRawKey (int nextHandler, int theEvent, int userData)", "diff": ["+\t/*", "+\t* Feature in the Macintosh.  For some reason, the default handler", "+\t* does not issue kEventTextInputUnicodeForKeyEvent when the user", "+\t* types Command+Space.  The fix is to look for this case and", "+\t* send the key from kEventRawKeyDown instead.", "+\t* ", "+\t* NOTE: This code relies on Command+Space being consumed and", "+\t* will deliver two events if this ever changes.", "+\t*/\t", "+\tif ((state & CANVAS) != 0) {", "+\t\tint [] keyCode = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "+\t\tif (keyCode [0] == 49 /* Space */) {", "+\t\t\tint [] modifiers = new int [1];", "+\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "+\t\t\tif (modifiers [0] == OS.cmdKey) {", "+\t\t\t\tif (!sendKeyEvent (SWT.KeyDown, theEvent)) return OS.noErr;", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 34618}
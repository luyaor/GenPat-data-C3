{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9e63495ac8311abc2aeb03915a22852", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbc295a6b319b1c237c8439eb8feea4b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 56, "signatureBeforeChange": " public Point stringExtent(String string)", "signatureAfterChange": " public Point stringExtent(String string)", "diff": ["-public Point stringExtent(String string) {", "+public Point stringExtent(String string) {\t", "-\tif (string.length () == 0) return new Point(0, getFontHeight());", "-\t/* AW", "-\tbyte[] buffer = Converter.wcsToMbcs(getCodePage (), string, true);", "-\tint xmString = OS.XmStringCreate(buffer, OS.XmFONTLIST_DEFAULT_TAG);", "-\tint fontList = data.fontList;", "-\tint width = OS.XmStringWidth(fontList, xmString);", "-\tint height = OS.XmStringHeight(fontList, xmString);", "-\tOS.XmStringFree(xmString);", "-\t*/", "-\ttry {", "-\t\tfocus(false, null);", "-\t\tinstallFont();", "-\t\tint width= OS.TextWidth(string, data.font.fID, data.font.fSize, data.font.fFace);", "-\t\tshort[] fontInfo= new short[4];", "-\t\tOS.GetFontInfo(fontInfo);\t// FontInfo", "-\t\treturn new Point(width, fontInfo[0] + fontInfo[1]);", "-\t} finally {", "-\t\tunfocus(false);", "-\t}", "+\tint length = string.length();", "+\tif (length == 0) return new Point(0, data.fontAscent + data.fontDescent);", "+\tchar[] buffer = new char[length];", "+\tstring.getChars(0, length, buffer, 0);", "+\tint ptr1 = OS.NewPtr(length * 2);", "+\tOS.memcpy(ptr1, buffer, length * 2);", "+\tOS.ATSUSetTextPointerLocation(data.layout, ptr1, 0, length, length);", "+\tOS.ATSUSetRunStyle(data.layout, data.style, 0, length);", "+\tint ptr2 = OS.NewPtr(ATSTrapezoid.sizeof);", "+\tOS.ATSUGetGlyphBounds(data.layout, 0, 0, 0, length, (short)OS.kATSUseDeviceOrigins, 1, ptr2, null);", "+\tOS.DisposePtr(ptr1);", "+\tATSTrapezoid trapezoid = new ATSTrapezoid();", "+\tOS.memcpy(trapezoid, ptr2, ATSTrapezoid.sizeof);", "+\tOS.DisposePtr(ptr2);", "+\tint width = (trapezoid.upperRight_x >> 16) - (trapezoid.upperLeft_x >> 16);", "+\tint height = (trapezoid.lowerRight_y >> 16) - (trapezoid.upperRight_y >> 16);", "+\treturn new Point(width, height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6339f24e72da84d56ecc6993cf2d2f8d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void drawString (String string, int x, int y, boolean isTransparent)", "signatureAfterChange": " public void drawString(String string, int x, int y, boolean isTransparent)", "diff": ["-public void drawString (String string, int x, int y, boolean isTransparent) {", "+public void drawString(String string, int x, int y, boolean isTransparent) {", "-\t/* AW", "-\tbyte [] buffer = Converter.wcsToMbcs (getCodePage (), string, true);", "-\tint xmString = OS.XmStringCreate (buffer, OS.XmFONTLIST_DEFAULT_TAG);", "-\tif (isTransparent) {", "-\t\tOS.XmStringDraw (data.display, data.drawable, data.fontList, xmString, handle, x, y, 0x7FFFFFFF, OS.XmALIGNMENT_BEGINNING, 0, null);", "-\t} else {", "-\t\tOS.XmStringDrawImage (data.display, data.drawable, data.fontList, xmString, handle, x, y, 0x7FFFFFFF, OS.XmALIGNMENT_BEGINNING, 0, null);", "-\t}\t\t\t", "-//\tOS.XmStringDrawUnderline (display, drawable, fontList, xmString, handle, x, y, 0x7FFFFFFF, OS.XmALIGNMENT_BEGINNING, 0, null, 0);", "-\tOS.XmStringFree (xmString);", "-\t*/", "-\ttry {", "-\t\tif (focus(true, null)) {", "-\t\t\tinstallFont();", "-\t\t\tMacUtil.RGBForeColor(data.foreground);", "-\t\t\tif (isTransparent) {", "-\t\t\t\tOS.TextMode(OS.srcOr);", "-\t\t\t} else {", "-\t\t\t\tif ((data.background & 0xff000000) == 0) {", "-\t\t\t\t\tMacUtil.RGBBackColor(data.background);", "-\t\t\t\t\tOS.TextMode(OS.srcCopy);", "-\t\t\t\t} else {", "-\t\t\t\t\t//System.out.println(\"GC.drawString: \" + Integer.toHexString(data.background));", "-\t\t\t\t\tOS.TextMode(OS.srcOr);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tshort[] fontInfo= new short[4];", "-\t\t\tOS.GetFontInfo(fontInfo);\t// FontInfo", "-\t\t\tOS.MoveTo((short)x, (short)(y+fontInfo[0]));", "-\t\t\tOS.DrawText(string, data.font.fID, data.font.fSize, data.font.fFace);", "-\t\t}", "-\t} finally {", "-\t\tunfocus(true);", "-\t}", "+\tint length = string.length();", "+\tif (length == 0) return;", "+\tOS.CGContextSaveGState(handle);", "+\tOS.CGContextScaleCTM(handle, 1, -1);", "+\tOS.CGContextTranslateCTM(handle, 0, -data.fontAscent);", "+\tOS.CGContextSetFillColor(handle, data.foreground);", "+\tchar[] buffer = new char[length];", "+\tstring.getChars(0, length, buffer, 0);", "+\tint ptr = OS.NewPtr(length * 2);", "+\tOS.memcpy(ptr, buffer, length * 2);", "+\tOS.ATSUSetTextPointerLocation(data.layout, ptr, 0, length, length);", "+\tOS.ATSUSetRunStyle(data.layout, data.style, 0, length);", "+\tOS.ATSUDrawText(data.layout, 0, length, x << 16, -y << 16);", "+\tOS.DisposePtr(ptr);", "+\tOS.CGContextRestoreGState(handle);"]}], "num": 20744}
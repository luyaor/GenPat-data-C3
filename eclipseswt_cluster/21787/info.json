{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1abb6b30194589596d8bccc1d8388832", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd881dcdd416941a17829f1e4f519180", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "8ac9194986c2ebb4d1d36d3a4cfe3e33f9a6835a", "commitAfterChange": "f873a5e536bc324b9546bd9afbfa96c060b9f76e", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public Point getLocation(int offset, boolean trailing)", "signatureAfterChange": " public Point getLocation(int offset, boolean trailing)", "diff": ["-\tboolean nextOffset = offset != length && text.charAt(offset) != '\\n' && trailing;", "-\tlength = translateOffset(length);", "+\tfor (int i = 0; i < hardBreaks.length; i++) {", "+\t\tif (offset == hardBreaks[i]) {", "+\t\t\ttrailing = true;", "+\t\t\tif (offset > 0) offset--;", "+\t\t\tbreak;", "+\t\t}", "+\t}", "-\tif (nextOffset) offset++;", "+\tif (trailing) offset++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d2ef68349a0696ff61762b95c519990", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageLoader.java", "commitBeforeChange": "bbed1319bb8191b4c35b8c705558acbe1ddd6f79", "commitAfterChange": "67330b1b3f04f897b1514cbb46f9f8381e63a8a5", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public void test_saveLjava_io_OutputStreamI()", "signatureAfterChange": "  public void test_saveLjava_io_OutputStreamI()", "diff": ["-\t\t", "-\t\tString filename = SwtTestCase.imageFilenames[0];", "-\t\t// must use jpg since save is not implemented yet in png format\t\t", "-\t\tString filetype = \"jpg\";", "-\t\tinStream = SwtTestCase.class.getResourceAsStream(filename + \".\" + filetype);\t", "-\t\tloader.load(inStream);", "-\t\ttry {", "-\t\t\tinStream.close();", "-\t\t} catch (IOException e) {}", "-\t", "-\t\tString[] formats = {\"bmp\", \"bmp_rle\", \"gif\", \"ico\", \"jpg\", \"png\", \"tif\"};", "-\t\tfor (int i = 0; i < formats.length; i++) {", "-\t\t\tif (formats[i].equals(filetype)) {", "-\t\t\t\t// save using the appropriate format", "-\t\t\t\tloader.save(outStream, i);", "+\t\tboolean jpgSupported = false;", "+\t\tfor (int i=0; i<imageFormats.length; i++) {", "+\t\t\tif (imageFormats[i].equals(\"jpg\")) {", "+\t\t\t\tjpgSupported = true;", "+\t\t\t}", "+\t\t}", "+\t\tif (jpgSupported) {", "+\t\t\tString filename = SwtTestCase.imageFilenames[0];", "+\t\t\t// must use jpg since save is not implemented yet in png format\t\t", "+\t\t\tString filetype = \"jpg\";", "+\t\t\tinStream = SwtTestCase.class.getResourceAsStream(filename + \".\" + filetype);\t", "+\t\t\tloader.load(inStream);", "+\t\t\ttry {", "+\t\t\t\tinStream.close();", "+\t\t\t} catch (IOException e) {}", "+\t\t\tfor (int i = 0; i < imageFormats.length; i++) {", "+\t\t\t\tif (imageFormats[i].equals(filetype)) {", "+\t\t\t\t\t// save using the appropriate format", "+\t\t\t\t\tloader.save(outStream, i);", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t"]}], "num": 21787}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c250c124a11181b29471a66e9865564", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d3f25403d312cd5f2b57f514ba3a827", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 53, "signatureBeforeChange": " public void setImage(int index, Image image)", "signatureAfterChange": " public void setImage (int columnIndex, Image value)", "diff": ["- */", "-public void setImage(int index, Image image) {", "-\tcheckWidget();\t", "-\tif (getParent().indexOf(this) != -1) {", "-\t\tinternalSetImage(index, image);", "-\t}", "-}", "+}", "+public void setImage (int columnIndex, Image value) {", "+\tcheckWidget ();", "+\tif (value != null && value.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);", "+", "+\tTableColumn[] columns = parent.columns;", "+\tint validColumnCount = Math.max (1, columns.length);", "+\tif (!(0 <= columnIndex && columnIndex < validColumnCount)) return;", "+\tImage image = getImage (columnIndex);", "+\tif (value == image) return;", "+\tif (value != null && value.equals (image)) return;", "+\tif (columnIndex == 0) {", "+\t\tsuper.setImage (value);", "+\t} else {", "+\t\timages [columnIndex] = value;", "+\t}", "+\t", "+\t/* ", "+\t * An image width change may affect the space available for the item text, so", "+\t * recompute the displayText if there are columns.", "+\t */", "+\tif (columns.length > 0) {", "+\t\tGC gc = new GC (parent);", "+\t\tgc.setFont (getFont (columnIndex));", "+\t\tcomputeDisplayText (columnIndex, gc);", "+\t\ttextWidths [columnIndex] = gc.textExtent (getDisplayText (columnIndex)).x;", "+\t\tgc.dispose ();", "+\t}", "+\t", "+\tif (value == null) {", "+\t\tredrawItem ();", "+\t\treturn;", "+\t}", "+", "+\t/*", "+\t * If this is the first image being put into the table then its item height", "+\t * may be adjusted, in which case a full redraw is needed.", "+\t */", "+\tif (parent.imageHeight == 0) {", "+\t\tint oldItemHeight = parent.itemHeight;", "+\t\tparent.setImageHeight (value.getBounds ().height);", "+\t\tif (oldItemHeight != parent.itemHeight) {", "+\t\t\tif (columnIndex == 0) {", "+\t\t\t\tparent.col0ImageWidth = value.getBounds ().width;", "+\t\t\t\tif (columns.length > 0) {", "+\t\t\t\t\t/* ", "+\t\t\t\t\t * All column 0 cells will now have less room available for their texts,", "+\t\t\t\t\t * so all items must now recompute their column 0 displayTexts.", "+\t\t\t\t\t */", "+\t\t\t\t\tGC gc = new GC (parent);", "+\t\t\t\t\tTableItem[] rootItems = parent.items;", "+\t\t\t\t\tfor (int i = 0; i < rootItems.length; i++) {", "+\t\t\t\t\t\trootItems [i].updateColumnWidth (columns [0], gc);", "+\t\t\t\t\t}", "+\t\t\t\t\tgc.dispose ();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tparent.redraw ();", "+\t\t\treturn;", "+\t\t}", "+\t}", "+", "+\t/* ", "+\t * If this is the first image being put into column 0 then all cells", "+\t * in the column should also indent accordingly. ", "+\t */", "+\tif (columnIndex == 0 && parent.col0ImageWidth == 0) {", "+\t\tparent.col0ImageWidth = value.getBounds ().width;", "+\t\t/* redraw the column */", "+\t\tif (columns.length == 0) {", "+\t\t\tparent.redraw ();", "+\t\t} else {", "+\t\t\t/* ", "+\t\t\t * All column 0 cells will now have less room available for their texts,", "+\t\t\t * so all items must now recompute their column 0 displayTexts.", "+\t\t\t */", "+\t\t\tGC gc = new GC (parent);", "+\t\t\tTableItem[] rootItems = parent.items;", "+\t\t\tfor (int i = 0; i < rootItems.length; i++) {", "+\t\t\t\trootItems [i].updateColumnWidth (columns [0], gc);", "+\t\t\t}", "+\t\t\tgc.dispose ();", "+\t\t\tparent.redraw (", "+\t\t\t\t0, 0,", "+\t\t\t\tcolumns [0].width,", "+\t\t\t\tparent.getClientArea ().height,", "+\t\t\t\ttrue);", "+\t\t}", "+\t\treturn;", "+\t}", "+\tredrawItem ();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "154a8e5f4214ea220df4b6d834f009d6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "1c620522c51a270f40c2d23df3c326f48275d8bd", "commitAfterChange": "58c80ff0565eaf7cdcac1e8ac1379b16f9b58992", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 20, "signatureBeforeChange": " void handleEvent (Event event)", "signatureAfterChange": " void handleEvent (Event event)", "diff": ["-\tif (event.widget instanceof Combo) {", "-\t\tCombo combo = (Combo) event.widget;", "-\t\tint prevSelectIndex = ((Integer) combo.getData ()).intValue ();", "-\t\tString text = combo.getText ();", "-\t\tint newSelectIndex = combo.indexOf (text);", "-\t\tif (prevSelectIndex != newSelectIndex || newSelectIndex == -1) {", "+\tif (event.widget instanceof List) {", "+\t\tList list = (List) event.widget;", "+\t\tString text = getListSelection (list);", "+\t\tint oldSelectIndex = ((Integer)list.getData ()).intValue ();", "+\t\tint newSelectIndex = list.indexOf (text);", "+\t\tif (oldSelectIndex != newSelectIndex || newSelectIndex == -1) {", "-\t\t\tcombo.setData (new Integer (newSelectIndex));", "-\t\t\tif (combo == charSetCombo) initFaceNameCombo ();", "-\t\t\telse if (combo == faceNameCombo) initExtStyleCombo ();", "-\t\t\telse if (combo == extStyleCombo) initSizeCombo ();", "-\t\t\telse if (combo == fontSizeCombo) initStyleCombo ();", "+\t\t\tif (list == charSetList) initFaceNameList ();", "+\t\t\telse if (list == faceNameList) initExtStyleList ();", "+\t\t\telse if (list == extStyleList) initSizeList ();", "+\t\t\telse if (list == fontSizeList) initStyleList ();", "+\t\t\telse if (event.widget == fontSetList) {", "+\t\t\t\tcurrentFontData = fontData [fontSetList.getSelectionIndex ()];", "+\t\t\t\tsetFontControls (currentFontData);", "+\t\t\t\tupdateButtonEnablements ();", "+\t\t\t}", "+\t", "+\t\t\tupdateFontList ();", "+\t\t\tlist.setData (new Integer (newSelectIndex));", "-\t\t\t\t// in case it came by typing the name", "-\t\t\t\tcombo.select (newSelectIndex);", "+\t\t\t\tlist.select (newSelectIndex);", "-\t}\t\t", "-\telse", "-\tif (event.widget == okButton) {", "-\t\tokSelected = true;", "-\t\tshell.close ();", "+\t\treturn;", "-\telse", "-\tif (event.widget == cancelButton) {", "-\t\tokSelected = false;", "-\t\tshell.close ();", "-\t}", "-\telse", "-\tif (event.widget == colorButton) {", "-\t\tColorDialog colorDialog = new ColorDialog (shell, SWT.NONE);", "-\t\tcolorDialog.setRGB (rgb);", "-\t\tRGB newRgb = colorDialog.open ();", "-\t\tif (newRgb != null) {", "-\t\t\trgb = newRgb;", "-\t\t\tupdateSampleColor ();", "+\t", "+\tif (event.widget instanceof Button) {", "+\t\tif (event.widget == okButton) {", "+\t\t\tokSelected = true;", "+\t\t\tshell.close ();", "-\t}\t", "+\t\telse if (event.widget == cancelButton) {", "+\t\t\tokSelected = false;", "+\t\t\tshell.close ();", "+\t\t}", "+\t\telse if (event.widget == colorButton) {", "+\t\t\tColorDialog colorDialog = new ColorDialog (shell, SWT.NONE);", "+\t\t\tcolorDialog.setRGB (rgb);", "+\t\t\tRGB newRgb = colorDialog.open ();", "+\t\t\tif (newRgb != null) {", "+\t\t\t\trgb = newRgb;", "+\t\t\t\tupdateSampleColor ();", "+\t\t\t}", "+\t\t}", "+\t\telse if (event.widget == newButton) {", "+\t\t\tFontData [] newFontData = new FontData [fontData.length + 1];", "+\t\t\tSystem.arraycopy (fontData, 0, newFontData, 0, fontData.length);", "+\t\t\tFontData source = fontData [fontSetList.getSelectionIndex ()];", "+\t\t\tFontData newFd = copyFontData (source);", "+\t\t\tnewFontData [newFontData.length - 1] = newFd;", "+\t\t\tthis.fontData = newFontData;", "+\t\t\tupdateFontList ();", "+\t\t\tfontSetList.select (newFontData.length - 1);", "+\t\t\tfontSetList.setData (new Integer (newFontData.length - 1));", "+\t\t\tfontSetList.showSelection();", "+\t\t\tupdateButtonEnablements ();", "+\t\t}", "+\t\telse if (event.widget == removeButton) {", "+\t\t\tint selectionIndex = fontSetList.getSelectionIndex ();", "+\t\t\tFontData [] newFontData = new FontData [fontData.length - 1];", "+\t\t\tSystem.arraycopy (fontData, 0, newFontData, 0, selectionIndex);", "+\t\t\tSystem.arraycopy (fontData, selectionIndex + 1, newFontData, selectionIndex, newFontData.length - selectionIndex);", "+\t\t\tfontData = newFontData;", "+\t\t\tupdateFontList ();", "+\t\t\tupdateButtonEnablements ();", "+\t\t\tsetFontControls (fontData [fontSetList.getSelectionIndex ()]);", "+\t\t}", "+\t\telse if (event.widget == upButton) {", "+\t\t\tint selectionIndex = fontSetList.getSelectionIndex ();", "+\t\t\tFontData temp = fontData [selectionIndex];", "+\t\t\tfontData [selectionIndex] = fontData [selectionIndex - 1];", "+\t\t\tfontData [selectionIndex - 1] = temp;", "+\t\t\tfontSetList.select (selectionIndex - 1);", "+\t\t\tfontSetList.setData (new Integer (selectionIndex - 1));", "+\t\t\tupdateFontList ();", "+\t\t\tupdateButtonEnablements ();", "+\t\t}", "+\t\telse if (event.widget == downButton) {", "+\t\t\tint selectionIndex = fontSetList.getSelectionIndex ();", "+\t\t\tFontData temp = fontData [selectionIndex];", "+\t\t\tfontData [selectionIndex] = fontData [selectionIndex + 1];", "+\t\t\tfontData [selectionIndex + 1] = temp;", "+\t\t\tfontSetList.select (selectionIndex + 1);", "+\t\t\tfontSetList.setData (new Integer (selectionIndex + 1));", "+\t\t\tupdateFontList ();", "+\t\t\tupdateButtonEnablements ();", "+\t\t}", "+\t}", "+}"]}], "num": 24474}
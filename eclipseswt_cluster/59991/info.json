{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf9283ee334e8b19875450cf0259821f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a466526cae2f3c2753aee9a3f00711af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java", "commitBeforeChange": "31cd6ab709bd12e0a040b5f3cf2da696eefbaf45", "commitAfterChange": "828ba16598ffe05117d7e7850c0ff70351e02de8", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 74, "signatureBeforeChange": "  \tvoid installListeners()", "signatureAfterChange": "  \tvoid installListeners()", "diff": ["+\t\t\t\t", "+\t\t\t\tif (event.type == SWT.MouseUp && link != null) {", "+\t\t\t\t\tint offset = styledText.getCaretOffset();", "+\t\t\t\t\tStyleRange range = offset > 0 ? styledText.getStyleRangeAtOffset(offset-1) : null;", "+\t\t\t\t\tif (range != null) {", "+\t\t\t\t\t\tif (link == range.data) {", "+\t\t\t\t\t\t\t//\tTODO", "+\t\t\t\t\t\t\tSystem.out.println(\"LINK: \" + link);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t});", "+\t\tstyledText.addListener(SWT.Dispose, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\tStyleRange[] styles = styledText.getStyleRanges(0, styledText.getCharCount(), false);", "+\t\t\t\tfor (int i = 0; i < styles.length; i++) {", "+\t\t\t\t\tObject data = styles[i].data;", "+\t\t\t\t\tif (data != null) {", "+\t\t\t\t\t\tif (data instanceof Image) ((Image)data).dispose();", "+\t\t\t\t\t\tif (data instanceof Control) ((Control)data).dispose();", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c63886e3e32884065d393fd60b1fa60", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "ca45fe430ed44fea42c49b26ae3ce2c4c2ad8354", "commitAfterChange": "e8c8fc165f050f47ac2b161e31aa754f630d6915", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  void layoutItems ()", "signatureAfterChange": "  void layoutItems ()", "diff": ["-void layoutItems () {", "+void layoutItems () {\t", "+\t/*", "+\t* Feature in Windows.  When a tool bar has the style", "+\t* TBSTYLE_LIST and has a drop down item, Window leaves", "+\t* too much padding around the button.  This affects", "+\t* every button in the tool bar and makes the preferred", "+\t* height too big.  The fix is to set the TBSTYLE_LIST", "+\t* when the tool bar contains both text and images.", "+\t* ", "+\t* NOTE: Tool bars with CCS_VERT must have TBSTYLE_LIST", "+\t* set before any item is added or the tool bar does", "+\t* not lay out properly.  The work around does not run", "+\t* in this case.", "+\t*/", "+\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "+\t\tif ((style & SWT.RIGHT) != 0 && (style & SWT.VERTICAL) == 0) {", "+\t\t\tboolean hasText = false, hasImage = false;", "+\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\tToolItem item = items [i];", "+\t\t\t\tif (item != null) {", "+\t\t\t\t\tif (!hasText) hasText = item.text.length () != 0;", "+\t\t\t\t\tif (!hasImage) hasImage = item.image != null;", "+\t\t\t\t\tif (hasText && hasImage) break;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tint oldBits = OS.GetWindowLong (handle, OS.GWL_STYLE), newBits = oldBits;", "+\t\t\tif (hasText && hasImage) {", "+\t\t\t\tnewBits |= OS.TBSTYLE_LIST;", "+\t\t\t} else {", "+\t\t\t\tnewBits &= ~OS.TBSTYLE_LIST;", "+\t\t\t}", "+\t\t\tif (newBits != oldBits) {", "+\t\t\t\tsetDropDownItems (false);", "+\t\t\t\tOS.SetWindowLong (handle, OS.GWL_STYLE, newBits);", "+\t\t\t\tsetDropDownItems (true);", "+\t\t\t}", "+\t\t}", "+\t}", "+\t"]}], "num": 59991}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b16d3cbb0adad1e3d934927dcf0cdd5c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ce576d8756f1a60a8ea8f2f583de0fb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void drawRoundRectangle (int x, int y, int width, int height, int arcWidth, int arcHeight)", "signatureAfterChange": " public void drawRoundRectangle(int x, int y, int width, int height, int arcWidth, int arcHeight)", "diff": ["-public void drawRoundRectangle (int x, int y, int width, int height, int arcWidth, int arcHeight) {", "+public void drawRoundRectangle(int x, int y, int width, int height, int arcWidth, int arcHeight) {", "-\tif (width < 0) {", "-\t\tx = x + width;", "-\t\twidth = -width;", "+\tif (arcWidth == 0 || arcHeight == 0) {", "+\t\tdrawRectangle(x, y, width, height);", "+    \treturn;", "-\tif (height < 0) {", "-\t\ty = y + height;", "-\t\theight = -height;", "-\t}", "-\ttry {", "-\t\tif (focus(true, null)) {", "-\t\t\tMacUtil.RGBForeColor(data.foreground);", "-\t\t\tOS.PenSize((short) fLineWidth, (short) fLineWidth);", "-\t\t\tfRect.set(x, y, width+1, height+1);", "-\t\t\tOS.FrameRoundRect(fRect.getData(), (short)arcWidth, (short)arcHeight);", "-\t\t}", "-\t} finally {", "-\t\tunfocus(true);", "-\t}", "+\tOS.CGContextBeginPath(handle);", "+\tOS.CGContextSaveGState(handle);", "+\tOS.CGContextTranslateCTM(handle, x, y);", "+\tOS.CGContextScaleCTM(handle, arcWidth, arcHeight);", "+    float fw = width / (float)arcWidth;", "+\tfloat fh = height / (float)arcHeight;", "+\tOS.CGContextMoveToPoint(handle, fw, fh/2);", "+\tOS.CGContextAddArcToPoint(handle, fw, fh, fw/2, fh, 1);", "+\tOS.CGContextAddArcToPoint(handle, 0, fh, 0, fh/2, 1);", "+\tOS.CGContextAddArcToPoint(handle, 0, 0, fw/2, 0, 1);", "+\tOS.CGContextAddArcToPoint(handle, fw, 0, fw, fh/2, 1);", "+\tOS.CGContextClosePath(handle);", "+\tOS.CGContextRestoreGState(handle);", "+\tOS.CGContextStrokePath(handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6339f24e72da84d56ecc6993cf2d2f8d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " public void drawString (String string, int x, int y, boolean isTransparent)", "signatureAfterChange": " public void drawString(String string, int x, int y, boolean isTransparent)", "diff": ["-public void drawString (String string, int x, int y, boolean isTransparent) {", "+public void drawString(String string, int x, int y, boolean isTransparent) {", "-\t/* AW", "-\tbyte [] buffer = Converter.wcsToMbcs (getCodePage (), string, true);", "-\tint xmString = OS.XmStringCreate (buffer, OS.XmFONTLIST_DEFAULT_TAG);", "-\tif (isTransparent) {", "-\t\tOS.XmStringDraw (data.display, data.drawable, data.fontList, xmString, handle, x, y, 0x7FFFFFFF, OS.XmALIGNMENT_BEGINNING, 0, null);", "-\t} else {", "-\t\tOS.XmStringDrawImage (data.display, data.drawable, data.fontList, xmString, handle, x, y, 0x7FFFFFFF, OS.XmALIGNMENT_BEGINNING, 0, null);", "-\t}\t\t\t", "-//\tOS.XmStringDrawUnderline (display, drawable, fontList, xmString, handle, x, y, 0x7FFFFFFF, OS.XmALIGNMENT_BEGINNING, 0, null, 0);", "-\tOS.XmStringFree (xmString);", "-\t*/", "-\ttry {", "-\t\tif (focus(true, null)) {", "-\t\t\tinstallFont();", "-\t\t\tMacUtil.RGBForeColor(data.foreground);", "-\t\t\tif (isTransparent) {", "-\t\t\t\tOS.TextMode(OS.srcOr);", "-\t\t\t} else {", "-\t\t\t\tif ((data.background & 0xff000000) == 0) {", "-\t\t\t\t\tMacUtil.RGBBackColor(data.background);", "-\t\t\t\t\tOS.TextMode(OS.srcCopy);", "-\t\t\t\t} else {", "-\t\t\t\t\t//System.out.println(\"GC.drawString: \" + Integer.toHexString(data.background));", "-\t\t\t\t\tOS.TextMode(OS.srcOr);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tshort[] fontInfo= new short[4];", "-\t\t\tOS.GetFontInfo(fontInfo);\t// FontInfo", "-\t\t\tOS.MoveTo((short)x, (short)(y+fontInfo[0]));", "-\t\t\tOS.DrawText(string, data.font.fID, data.font.fSize, data.font.fFace);", "-\t\t}", "-\t} finally {", "-\t\tunfocus(true);", "-\t}", "+\tint length = string.length();", "+\tif (length == 0) return;", "+\tOS.CGContextSaveGState(handle);", "+\tOS.CGContextScaleCTM(handle, 1, -1);", "+\tOS.CGContextTranslateCTM(handle, 0, -data.fontAscent);", "+\tOS.CGContextSetFillColor(handle, data.foreground);", "+\tchar[] buffer = new char[length];", "+\tstring.getChars(0, length, buffer, 0);", "+\tint ptr = OS.NewPtr(length * 2);", "+\tOS.memcpy(ptr, buffer, length * 2);", "+\tOS.ATSUSetTextPointerLocation(data.layout, ptr, 0, length, length);", "+\tOS.ATSUSetRunStyle(data.layout, data.style, 0, length);", "+\tOS.ATSUDrawText(data.layout, 0, length, x << 16, -y << 16);", "+\tOS.DisposePtr(ptr);", "+\tOS.CGContextRestoreGState(handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27322f72c9cbddd1cd38e31b9a7770e9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void fillRoundRectangle (int x, int y, int width, int height, int arcWidth, int arcHeight)", "signatureAfterChange": " public void fillRoundRectangle(int x, int y, int width, int height, int arcWidth, int arcHeight)", "diff": ["-public void fillRoundRectangle (int x, int y, int width, int height, int arcWidth, int arcHeight) {", "+public void fillRoundRectangle(int x, int y, int width, int height, int arcWidth, int arcHeight) {", "-\ttry {", "-\t\tif (focus(true, null)) {", "-\t\t\tif ((data.background & 0xff000000) == 0) {", "-\t\t\t\tMacUtil.RGBForeColor(data.background);", "-\t\t\t\tfRect.set(x, y, width, height);", "-\t\t\t\tOS.PaintRoundRect(fRect.getData(), (short)arcWidth, (short)arcHeight);", "-\t\t\t} else {", "-\t\t\t\t//\tSystem.out.println(\"GC.fillRoundRectangle: \" + Integer.toHexString(data.background));", "-\t\t\t}", "-\t\t}", "-\t} finally {", "-\t\tunfocus(true);", "+\tif (arcWidth == 0 || arcHeight == 0) {", "+\t\tfillRectangle(x, y, width, height);", "+    \treturn;", "+\tOS.CGContextBeginPath(handle);", "+\tOS.CGContextSaveGState(handle);", "+\tOS.CGContextTranslateCTM(handle, x, y);", "+\tOS.CGContextScaleCTM(handle, arcWidth, arcHeight);", "+    float fw = width / (float)arcWidth;", "+\tfloat fh = height / (float)arcHeight;", "+\tOS.CGContextMoveToPoint(handle, fw, fh/2);", "+\tOS.CGContextAddArcToPoint(handle, fw, fh, fw/2, fh, 1);", "+\tOS.CGContextAddArcToPoint(handle, 0, fh, 0, fh/2, 1);", "+\tOS.CGContextAddArcToPoint(handle, 0, 0, fw/2, 0, 1);", "+\tOS.CGContextAddArcToPoint(handle, fw, 0, fw, fh/2, 1);", "+\tOS.CGContextClosePath(handle);", "+\tOS.CGContextRestoreGState(handle);", "+\tOS.CGContextFillPath(handle);"]}], "num": 4292}
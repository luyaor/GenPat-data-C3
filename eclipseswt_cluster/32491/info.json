{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0296ef127b1a5c36d9288e3522520d58", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cface36971f18624f78ec4530f1eada", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "62e797223f6c6aa3b4feac4a904182e94088a92c", "commitAfterChange": "1c70972bfbe39a9f87e858e5e97e923ee244c636", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "signatureAfterChange": "  void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "diff": ["+\t}", "+", "+\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION(4, 10)) {", "+\t\tBLENDFUNCTION blend = new BLENDFUNCTION();", "+\t\tblend.BlendOp = OS.AC_SRC_OVER;", "+\t\tint srcHdc = OS.CreateCompatibleDC(handle);", "+\t\tint oldSrcBitmap = OS.SelectObject(srcHdc, srcImage.handle);", "+\t\tif (srcImage.alpha != -1) {", "+\t\t\tblend.SourceConstantAlpha = (byte)srcImage.alpha;", "+\t\t\tOS.AlphaBlend(handle, destX, destY, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, blend);", "+\t\t} else {", "+\t\t\tint memDib = Image.createDIB(srcWidth, srcHeight, 32);", "+\t\t\tif (memDib == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\tint memHdc = OS.CreateCompatibleDC(handle);", "+\t\t\tint oldMemBitmap = OS.SelectObject(memHdc, memDib);", "+\t\t\tBITMAP dibBM = new BITMAP();", "+\t\t\tOS.GetObject(memDib, BITMAP.sizeof, dibBM);", "+\t\t\tOS.BitBlt(memHdc, 0, 0, srcWidth, srcHeight, srcHdc, srcX, srcY, OS.SRCCOPY);", "+\t\t\tbyte[] srcData = new byte[dibBM.bmWidthBytes * dibBM.bmHeight];", "+\t\t\tOS.MoveMemory(srcData, dibBM.bmBits, srcData.length);", "+\t\t\tfinal int apinc = imgWidth - srcWidth;", "+\t\t\tint ap = srcY * imgWidth + srcX, sp = 0;", "+\t\t\tbyte[] alphaData = srcImage.alphaData;", "+\t\t\tfor (int y = 0; y < srcHeight; ++y) {", "+\t\t\t\tfor (int x = 0; x < srcWidth; ++x) {", "+\t\t\t\t\tint alpha = alphaData[ap++];", "+\t\t\t\t\tsrcData[sp+3] = (byte)alpha;", "+\t\t\t\t\tsrcData[sp+2] = (byte)((srcData[sp+2] & 0xff) * alpha / 255);", "+\t\t\t\t\tsrcData[sp+1] = (byte)((srcData[sp+1] & 0xff) * alpha / 255);", "+\t\t\t\t\tsrcData[sp+0] = (byte)((srcData[sp+0] & 0xff) * alpha / 255);", "+\t\t\t\t\tsp += 4;", "+\t\t\t\t}", "+\t\t\t\tap += apinc;", "+\t\t\t}", "+\t\t\tOS.MoveMemory(dibBM.bmBits, srcData, srcData.length);", "+\t\t\tblend.SourceConstantAlpha = (byte)0xff;", "+\t\t\tblend.AlphaFormat = OS.AC_SRC_ALPHA;", "+\t\t\tOS.AlphaBlend(handle, destX, destY, destWidth, destHeight, memHdc, 0, 0, srcWidth, srcHeight, blend);", "+\t\t\tOS.SelectObject(memHdc, oldMemBitmap);", "+\t\t\tOS.DeleteDC(memHdc);", "+\t\t\tOS.DeleteObject(memDib);", "+\t\t}", "+\t\tOS.SelectObject(srcHdc, oldSrcBitmap);", "+\t\tOS.DeleteDC(srcHdc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0c2a425c56e150bc4d9a0e42f0dd21e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "e5b4152d301e516f2bb6e0a93df2792307f05dc8", "commitAfterChange": "da860aa51ff9140556b24444facddc915155c601", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r \r void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "signatureAfterChange": "\r \r void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "diff": ["-\tint memDib = createDIB(destWidth, destHeight, 32);\r", "+\tint memDib = createDIB(Math.max(srcWidth, destWidth), Math.max(srcWidth, destHeight), 32);\r", "-\tOS.SetStretchBltMode(memHdc, OS.COLORONCOLOR);\r", "-\tOS.StretchBlt(memHdc, 0, 0, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, OS.SRCCOPY);\r", "-\tbyte[] srcData = new byte[sizeInBytes];\r", "+ \tOS.BitBlt(memHdc, 0, 0, srcWidth, srcHeight, srcHdc, srcX, srcY, OS.SRCCOPY);\r", "+ \tbyte[] srcData = new byte[sizeInBytes];\r", "-\r", "-\t/* Compose the pixels */\r", "+\t\r", "+\t/* Merge the alpha channel in place */\r", "-\tbyte[] alphaData = null;\r", "-\tif (alpha == -1) {\r", "-\t\talphaData = new byte[destWidth * destHeight];\r", "-\t\tImageData.stretch8(srcImage.alphaData, imgWidth, srcX, srcY, srcWidth, srcHeight, alphaData, destWidth, 0, 0, destWidth, destHeight, null, false, false);\r", "+\tfinal boolean hasAlphaChannel = (srcImage.alpha == -1);\r", "+\tif (hasAlphaChannel) {\r", "+\t\tfinal int apinc = imgWidth - srcWidth;\r", "+\t\tfinal int spinc = dibBM.bmWidthBytes - srcWidth * 4;\r", "+\t\tint ap = 0, sp = 3;\r", "+\t\tbyte[] alphaData = srcImage.alphaData;\r", "+\t\tfor (int y = 0; y < srcHeight; ++y) {\r", "+\t\t\tfor (int x = 0; x < srcWidth; ++x) {\r", "+\t\t\t\tsrcData[sp] = alphaData[ap++];\r", "+\t\t\t\tsp += 4;\r", "+\t\t\t}\r", "+\t\t\tap += apinc;\r", "+\t\t\tsp += spinc;\r", "+\t\t}\r", "-\tfor (int i = 0; i < sizeInBytes; i += 4) {\r", "-\t\tif (alphaData != null) alpha = alphaData[i / 4] & 0xff;\r", "-\t\tdestData[i] += ((srcData[i] & 0xFF) - (destData[i] & 0xFF)) * alpha / 255;\r", "-\t\tdestData[i+1] += ((srcData[i+1] & 0xFF) - (destData[i+1] & 0xFF)) * alpha / 255;\r", "-\t\tdestData[i+2] += ((srcData[i+2] & 0xFF) - (destData[i+2] & 0xFF)) * alpha / 255;\r", "+\t\r", "+\t/* Scale the foreground pixels with alpha */\r", "+\tOS.SetStretchBltMode(memHdc, OS.COLORONCOLOR);\r", "+\tOS.MoveMemory(dibBM.bmBits, srcData, sizeInBytes);\r", "+\tOS.StretchBlt(memHdc, 0, 0, destWidth, destHeight, memHdc, 0, 0, srcWidth, srcHeight, OS.SRCCOPY);\r", "+\tOS.MoveMemory(srcData, dibBM.bmBits, sizeInBytes);\r", "+\t\r", "+\t/* Compose the pixels */\r", "+\tfinal int dpinc = dibBM.bmWidthBytes - destWidth * 4;\r", "+\tint dp = 0;\r", "+\tfor (int y = 0; y < destHeight; ++y) {\r", "+\t\tfor (int x = 0; x < destWidth; ++x) {\r", "+\t\t\tif (hasAlphaChannel) alpha = srcData[dp + 3] & 0xff;\r", "+\t\t\tdestData[dp] += ((srcData[dp] & 0xff) - (destData[dp] & 0xff)) * alpha / 255;\r", "+\t\t\tdestData[dp + 1] += ((srcData[dp + 1] & 0xff) - (destData[dp + 1] & 0xff)) * alpha / 255;\r", "+\t\t\tdestData[dp + 2] += ((srcData[dp + 2] & 0xff) - (destData[dp + 2] & 0xff)) * alpha / 255;\r", "+\t\t\tdp += 4;\r", "+\t\t}\r", "+\t\tdp += dpinc;\r"]}], "num": 32491}
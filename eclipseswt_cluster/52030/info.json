{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "051d458cf26107e6dc25c67d00521274", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "621bb538332deb0d2ab5172348a97e1d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.opengl/carbon/org/eclipse/swt/opengl/GLCanvas.java", "commitBeforeChange": "dfa24e6125855b843925fa744767b981b8f8ae60", "commitAfterChange": "1ac75d88696998fae3200d49cded9b84dc837b50", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  void handleResize (Event event)", "signatureAfterChange": "  void fixBounds ()", "diff": ["-void handleResize (Event event) {", "-\tRectangle bounds = getBounds ();", "-\tAGL.aglUpdateContext (glContext);", "-\tint[] glbounds = new int[4];", "-\tglbounds[0] = bounds.x;", "-\tglbounds[1] = bounds.y;", "-\tglbounds[2] = bounds.width;", "-\tglbounds[3] = bounds.height;", "-\tAGL.aglSetInteger (glContext, AGL.AGL_BUFFER_RECT, glbounds);", "-\tAGL.aglEnable (glContext, AGL.AGL_BUFFER_RECT);", "-}", "+void fixBounds () {", "+\tGCData data = new GCData();", "+\tint gc = internal_new_GC(data);", "+\tRect bounds = new Rect();", "+\tOS.GetRegionBounds (data.visibleRgn, bounds);", "+\tint width = bounds.right - bounds.left;", "+\tint height = bounds.bottom - bounds.top;", "+\tRect rect = new Rect ();", "+\tint window = OS.GetControlOwner (handle);", "+\tint port = OS.GetWindowPort (window);", "+\tOS.GetPortBounds (port, rect);", "+\tint [] glbounds = new int [4];", "+\tglbounds[0] = bounds.left;", "+\tglbounds[1] = rect.bottom - rect.top - bounds.top - height;", "+\tglbounds[2] = width;", "+\tglbounds[3] = height;", "+\tAGL.aglSetInteger (context, AGL.AGL_BUFFER_RECT, glbounds);", "+\tAGL.aglEnable (context, AGL.AGL_BUFFER_RECT);", "+\tAGL.aglSetInteger (context, AGL.AGL_CLIP_REGION, data.visibleRgn);", "+\tAGL.aglUpdateContext (context);", "+\tinternal_dispose_GC(gc, data);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1308a83ba0f870afe3f2ccb2d31e4cbd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "14120886fce522b10b4a78abec3834ceb820f1f5", "commitAfterChange": "3dbca50e1d527f9d970adadbc94c490ef4ed4b08", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  static boolean gio_isExecutable(String fileName)", "signatureAfterChange": "  static boolean gio_isExecutable(String fileName)", "diff": ["-\treturn OS.g_file_test(fileNameBuffer, OS.G_FILE_TEST_IS_EXECUTABLE);", "+\tif (!OS.g_file_test(fileNameBuffer, OS.G_FILE_TEST_IS_EXECUTABLE)) return false;", "+\tint /*long*/ file = OS.g_file_new_for_path (fileNameBuffer);", "+\tboolean result = false;", "+\tif (file != 0) {", "+\t\tbyte[] buffer = Converter.wcsToMbcs (null, \"*\", true); //$NON-NLS-1$", "+\t\tint /*long*/ fileInfo = OS.g_file_query_info(file, buffer, 0, 0, 0);", "+\t\tif (fileInfo != 0) {", "+\t\t\tint /*long*/ contentType = OS.g_file_info_get_content_type(fileInfo);", "+\t\t\tif (contentType != 0) {", "+\t\t\t\tbyte[] exeType = Converter.wcsToMbcs (null, \"application/x-executable\", true); //$NON-NLS-1$", "+\t\t\t\tresult = OS.g_content_type_is_a(contentType, exeType);", "+\t\t\t\tif (!result) {", "+\t\t\t\t\tbyte [] shellType = Converter.wcsToMbcs (null, \"application/x-shellscript\", true); //$NON-NLS-1$", "+\t\t\t\t\tresult = OS.g_content_type_equals(contentType, shellType);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.g_object_unref(fileInfo);", "+\t\t}", "+\t\tOS.g_object_unref (file);", "+\t}", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8632cc054954772bd26e8a5ac2ff481b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "0fc225484e34e60481435b9a30ca929fcc229bc5", "commitAfterChange": "12b7359f9fe249b36672bf747669f5296fc9af7a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r void createDisplay (DeviceData data)", "signatureAfterChange": "\r void createDisplay (DeviceData data)", "diff": ["+\t/* \r", "+\t* On some DB Linux platforms, the default font list may not be properly\r", "+\t* initialized to contain a FontSet. This causes the input method to\r", "+\t* fail. The fix is to set the fallback resource with an appropriated\r", "+\t* font.\r\t*/\r", "+\tint ptr1 = 0, ptr2 = 0; \r", "+\tif (OS.IsLinux && OS.IsDBLocale) {\r", "+\t\tString resource = \"*fontList: -*-fixed-medium-r-*-*-12-*-*-*-*-*-*-*:\";\r", "+\t\tbyte [] buffer = Converter.wcsToMbcs (null, resource, true);\r", "+\t\tptr1 = OS.XtMalloc (buffer.length);\r", "+\t\tif (ptr1 != 0) OS.memmove (ptr1, buffer, buffer.length);\r", "+\t\tint [] spec = new int[]{ptr1, 0};\r", "+\t\tptr2 = OS.XtMalloc (spec.length * 4);\r", "+\t\tif (ptr2 != 0)OS.memmove (ptr2, spec, spec.length * 4);\r", "+\t\tOS.XtAppSetFallbackResources(xtContext, ptr2); \r", "+\t}\r", "+\t\r", "+\t\r", "+\tif (ptr2 != 0) {\r", "+\t\tOS.XtAppSetFallbackResources (xtContext, 0);\r", "+\t\tOS.XtFree (ptr2);\r", "+\t}\r", "+\tif (ptr1 != 0) OS.XtFree (ptr1);\r"]}], "num": 52030}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ac6fc058b39ed2c9249c0ec03a1daa5", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce9fc2fd1164bb6356bde317cb08fc46", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "3b0705af4949799a7bdad553d998188a5ae0bb41", "commitAfterChange": "4fd4d291e6e9129de59f17e6d672d50a0cc226cb", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "  int kEventRawKeyPressed (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventRawKeyPressed (int nextHandler, int theEvent, int userData)", "diff": ["-\t* kEventRawKeyDown event when the Return key is pressed causing", "-\t* the kEventTextInputUnicodeForKeyEvent to be not sent.  The fix", "-\t* is to handle the Return key in kEventRawKeyDown instead.", "+\t* kEventRawKeyDown event when the Return key or up and down arrow", "+\t* keys are pressed, causing kEventTextInputUnicodeForKeyEvent not", "+\t* to be sent.  The fix is to handle these keys in kEventRawKeyDown.", "-\tif (keyCode [0] == 36 /* Return */) {", "-\t\tif (translateTraversal (keyCode [0], theEvent)) return OS.noErr;", "-\t\tif (!sendKeyEvent (SWT.KeyDown, theEvent)) return OS.noErr;", "-\t\tpostEvent(SWT.DefaultSelection);", "+\tswitch (keyCode [0]) {", "+\t\tcase 36: /* Return */", "+\t\t\tif (translateTraversal (keyCode [0], theEvent)) return OS.noErr;", "+\t\t\tif (!sendKeyEvent (SWT.KeyDown, theEvent)) return OS.noErr;", "+\t\t\tpostEvent(SWT.DefaultSelection);", "+\t\t\tbreak;", "+\t\tcase 126: /* Up arrow */", "+\t\tcase 125: /* Down arrow */", "+\t\t\tif (!sendKeyEvent (SWT.KeyDown, theEvent)) return OS.noErr;", "+\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7ab3ec796d168d1fed530d029faf136", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "a3fea13989cd18710fe0a6c63fa431cff5fb77dc", "commitAfterChange": "8a56311dae67c9ed61879e2fad29106bc7dbfad3", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["+\t\t\tbreak;", "-\t\t\t\t/*", "-\t\t\t\t* It is possible (but unlikely), that application", "-\t\t\t\t* code could have disposed the widget in the expand", "-\t\t\t\t* or collapse event.  If this happens, end the", "-\t\t\t\t* processing of the Windows message by returning", "-\t\t\t\t* zero as the result of the window proc.", "-\t\t\t\t*/", "-\t\t\t\tif (action [0] == OS.TVE_EXPAND) {", "-\t\t\t\t\tsendEvent (SWT.Expand, event);", "-\t\t\t\t\tif (isDisposed ()) return LRESULT.ZERO;", "-\t\t\t\t}", "-\t\t\t\tif (action [0] == OS.TVE_COLLAPSE) {", "-\t\t\t\t\tsendEvent (SWT.Collapse, event);", "-\t\t\t\t\tif (isDisposed ()) return LRESULT.ZERO;", "+\t\t\t\tswitch (action [0]) {", "+\t\t\t\t\tcase OS.TVE_EXPAND:", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t* Bug in Windows.  When the numeric keypad asterisk", "+\t\t\t\t\t\t* key is used to expand every item in the tree, Windows", "+\t\t\t\t\t\t* sends TVN_ITEMEXPANDING to items in the tree that", "+\t\t\t\t\t\t* have already been expanded.  The fix is to detect", "+\t\t\t\t\t\t* that the item is already expanded and ignore the", "+\t\t\t\t\t\t* notification.", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tif ((tvItem.state & OS.TVIS_EXPANDED) == 0) {", "+\t\t\t\t\t\t\tsendEvent (SWT.Expand, event);", "+\t\t\t\t\t\t\tif (isDisposed ()) return LRESULT.ZERO;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase OS.TVE_COLLAPSE:", "+\t\t\t\t\t\tsendEvent (SWT.Collapse, event);", "+\t\t\t\t\t\tif (isDisposed ()) return LRESULT.ZERO;", "+\t\t\t\t\t\tbreak;"]}], "num": 23176}
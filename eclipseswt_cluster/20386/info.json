{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f31df9ffb6b8a2cc8d32b01d1d1bfb0", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d5a7182cc00026d08aa76b5b21e338a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_TableItem.java", "commitBeforeChange": "891cc494ae4c67f837f4e56801ebbaefa071ff21", "commitAfterChange": "5a7cf25981afb3df35cc099989271851fccc11e2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void test_getBoundsI()", "signatureAfterChange": "  public void test_getBoundsI()", "diff": ["-\tint boundsX;", "+\tImage image = images[0];", "-\tTable table2 = new Table(shell, SWT.CHECK);", "-\tTableItem tableItem2 = new TableItem(table2, SWT.NULL);", "+\tRectangle bounds2;", "+\t", "+\t// no columns", "-\tassertTrue(\":a:\", bounds.x > 0 && bounds.width > 0);", "-\tboundsX = bounds.x;", "- \tbounds = tableItem.getBounds(-1);", "-\tassertTrue(\":b:\", bounds.equals(new Rectangle(0, 0, 0, 0)));\t", "+\tassertTrue(\":1a:\", bounds.x > 0 && bounds.height > 0);", "+\tbounds = tableItem.getBounds(-1);", "+\tassertTrue(\":1b:\", bounds.equals(new Rectangle(0, 0, 0, 0)));\t", "-\tassertTrue(\":c:\", bounds.equals(new Rectangle(0, 0, 0, 0)));", "- \t//table2.setWidths(new int[] {30});", "-\tTableColumn column = new TableColumn(table2, SWT.NONE, 0);", "-\tcolumn.setWidth(30);", "+\tassertTrue(\":1c:\", bounds.equals(new Rectangle(0, 0, 0, 0)));", "+\t", "+\ttableItem.setText(\"hello\");", "+\tbounds = tableItem.getBounds(0);", "+\tassertTrue(\":1d:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0);", "+\ttableItem.setText(\"\");", "+\tbounds2 = tableItem.getBounds(0);", "+\tassertTrue(\":1e:\", bounds2.x > 0 && bounds2.height > 0);", "+\t//assertTrue(\":1f:\", bounds2.width < bounds.width); // TODO doesn't shrink?", "+\t", "+\t//", "+\tmakeCleanEnvironment();", "+\t", "+\ttableItem.setImage(image);", "+\tbounds = tableItem.getBounds(0);", "+\tassertTrue(\":1g:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0);", "+\ttableItem.setImage((Image)null);", "+\tbounds2 = tableItem.getBounds(0);", "+\tassertTrue(\":1h:\", bounds2.x > 0 && bounds2.height > 0);", "+//\tassertTrue(\":1i:\", bounds2.width > bounds.width); // TODO once an image is added the space for it is always there", "+ \t", "+\t//", "+\tmakeCleanEnvironment();", "+\t", "+\ttableItem.setText(\"hello\");", "+\tbounds = tableItem.getBounds(0);", "+\ttableItem.setImage(image);", "+\tbounds2 = tableItem.getBounds(0);", "+\tassertTrue(\":1j:\", bounds2.x > 0 && bounds2.height > 0);", "+\tassertTrue(\":1k:\", bounds2.width > bounds.width);", "+\t", "+\t// no columns and CHECK style", "+\tTable table2 = new Table(shell, SWT.CHECK);", "+\tTableItem tableItem2 = new TableItem(table2, SWT.NONE);", "+\t", "-\tassertTrue(\":d:\", bounds.x > boundsX && bounds.width > 0);", "- \tbounds = tableItem2.getBounds(-1);", "-\tassertEquals(new Rectangle(0, 0, 0, 0), bounds);\t", "+\tassertTrue(\":2a:\", bounds.x > 0 && bounds.height > 0);", "+\tbounds = tableItem2.getBounds(-1);", "+\tassertTrue(\":2b:\", bounds.equals(new Rectangle(0, 0, 0, 0)));\t", "-\tassertEquals(new Rectangle(0, 0, 0, 0), bounds);\t\t\t", "-", "+\tassertTrue(\":2c:\", bounds.equals(new Rectangle(0, 0, 0, 0)));", "+\t", "+\ttableItem2.setText(\"hello\");", "+\tbounds = tableItem2.getBounds(0);", "+\tassertTrue(\":2d:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0);", "+\ttableItem2.setText(\"\");", "+\tbounds2 = tableItem2.getBounds(0);", "+\tassertTrue(\":2e:\", bounds2.x > 0 && bounds2.height > 0);", "+\t//assertTrue(\":2f:\", bounds2.width < bounds.width); // TODO doesn't shrink?", "+\t", "+\ttable2.dispose();", "+\ttable2 = new Table(shell, SWT.CHECK);", "+\ttableItem2 = new TableItem(table2, SWT.NONE);", "+\t", "+\ttableItem2.setImage(image);", "+\tbounds = tableItem2.getBounds(0);", "+\tassertTrue(\":2g:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0);", "+\ttableItem2.setImage((Image)null);", "+\tbounds2 = tableItem2.getBounds(0);", "+\tassertTrue(\":2h:\", bounds2.x > 0 && bounds2.height > 0);", "+\t//assertTrue(\":2i:\", bounds2.width < bounds.width);  // TODO once an image is added the space for it is always there", "+\t", "+\ttable2.dispose();", "+\ttable2 = new Table(shell, SWT.CHECK);", "+\ttableItem2 = new TableItem(table2, SWT.NONE);", "+\t", "+\ttableItem2.setText(\"hello\");", "+\tbounds = tableItem2.getBounds(0);", "+\ttableItem2.setImage(image);", "+\tbounds2 = tableItem2.getBounds(0);", "+\tassertTrue(\":2j:\", bounds2.x > 0 && bounds2.height > 0);", "+\tassertTrue(\":2k:\", bounds2.width > bounds.width);", "-\tImage image = images[0];", "+\t// with columns", "+\t", "+\tTableColumn column0 = new TableColumn(table, SWT.LEFT);", "+\tTableColumn column1 = new TableColumn(table, SWT.CENTER);", "+\t", "+\tbounds = tableItem.getBounds(0);", "+\tassertTrue(\":3a:\", bounds.x > 0 && bounds.height > 0 && bounds.width == 0);", "+\tbounds = tableItem.getBounds(1);", "+\tassertTrue(\":3b:\", /*bounds.x > 0 &&*/ bounds.height > 0 && bounds.width == 0); // TODO bounds.x == 0 Is this right?", "+\tbounds = tableItem.getBounds(-1);", "+\tassertTrue(\":3c:\", bounds.equals(new Rectangle(0, 0, 0, 0)));\t", "+ \tbounds = tableItem.getBounds(2);", "+\tassertTrue(\":3d:\", bounds.equals(new Rectangle(0, 0, 0, 0)));", "+\t", "+\tcolumn0.setWidth(100);", "+\tbounds = tableItem.getBounds(0);", "+\tassertTrue(\":3e:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = tableItem.getBounds(1);", "+\tassertTrue(\":3f:\", bounds.x >= 100 && bounds.height > 0 && bounds.width == 0);", "+\t", "+\tcolumn1.setWidth(200);", "+\tbounds = tableItem.getBounds(0);", "+\tassertTrue(\":3g:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = tableItem.getBounds(1);", "+\tassertTrue(\":3h:\", bounds.x >= 100 && bounds.height > 0 && bounds.width == 200);", "+\t", "+\ttableItem.setText(new String[] {\"hello\", \"world\"});", "+\tbounds = tableItem.getBounds(0);", "+\tassertTrue(\":3i:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = tableItem.getBounds(1);", "+\tassertTrue(\":3j:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "+\ttableItem.setText(new String[] {\"\", \"\"});", "+\tbounds = tableItem.getBounds(0);", "+\tassertTrue(\":3k:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = tableItem.getBounds(1);", "+\tassertTrue(\":3l:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "+\t", "+\t//", "+\tmakeCleanEnvironment();", "+\tcolumn0 = new TableColumn(table, SWT.LEFT);", "+\tcolumn1 = new TableColumn(table, SWT.CENTER);", "+\tcolumn0.setWidth(100);", "+\tcolumn1.setWidth(200);", "+\t", "+\ttableItem.setImage(new Image[] {image, image});", "+\tbounds = tableItem.getBounds(0);", "+\tassertTrue(\":3m:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = tableItem.getBounds(1);", "+\tassertTrue(\":3n:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "+ \ttableItem.setImage(new Image[] {null, null});", "+\tbounds = tableItem.getBounds(0);", "+\tassertTrue(\":3o:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = tableItem.getBounds(1);", "+\tassertTrue(\":3p:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "+\t", "+\t//", "+\tmakeCleanEnvironment();", "+\tcolumn0 = new TableColumn(table, SWT.LEFT);", "+\tcolumn1 = new TableColumn(table, SWT.CENTER);", "+\tcolumn0.setWidth(100);", "+\tcolumn1.setWidth(200);", "+\t", "+\ttableItem.setText(new String[] {\"hello\", \"world\"});", "+\ttableItem.setImage(new Image[] {null, null});", "+\tbounds = tableItem.getBounds(0);", "+\tassertTrue(\":3q:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = tableItem.getBounds(1);", "+\tassertTrue(\":3r:\", bounds.x > 0 && bounds.height > 0 && bounds.width  == 200);", "+\t", "+\t// with columns and CHECK style", "-\ttableItem2.dispose();", "-\ttableItem2 = new TableItem(table2, SWT.NULL);", "-\tcolumn.dispose();", "-", "-\tnew TableColumn(table, SWT.NULL);", "-\tnew TableColumn(table, SWT.NULL);", "-\ttableItem.setImage(1, image);", "-\tbounds = tableItem.getBounds(0);", "-\tassertTrue(\":a:\", bounds.x >= 0 && bounds.width >= 0);", "-\tboundsX = bounds.x;", "- \tbounds = tableItem.getBounds(-1);", "-\tassertEquals(new Rectangle(0, 0, 0, 0), bounds);\t", "- \tbounds = tableItem.getBounds(1);", "-\t//assert(\":c:\", bounds.x > 0 && bounds.width > 0);  // ?? setting the image in one column does not affect width of other columns", "-\tassertTrue(\":c:\", bounds.x >= 0 && bounds.height >= 0);", "- ", "-\tcolumn = new TableColumn(table2, SWT.NULL);", "-\tcolumn.setWidth(30);", "-\tnew TableColumn(table2, SWT.NULL);\t", "-\ttableItem2.setImage(1, image);", "+\ttableItem2 = new TableItem(table2, SWT.NONE);", "+\tcolumn0 = new TableColumn(table2, SWT.LEFT);", "+\tcolumn1 = new TableColumn(table2, SWT.CENTER);", "+\t", "-\tassertTrue(\":d:\", bounds.x > boundsX && bounds.width > 0);", "- \tbounds = tableItem2.getBounds(-1);", "-\tassertEquals(new Rectangle(0, 0, 0, 0), bounds);\t", "- \tbounds = tableItem2.getBounds(1);", "-\t//assert(\":f:\", bounds.x > 0 && bounds.width > 0); // ?? setting the image in one column does not affect width of other columns", "-\tassertTrue(\":f:\", bounds.x > 0 && bounds.height > 0);", "+\tassertTrue(\":4a:\", bounds.x > 0 && bounds.height > 0 && bounds.width == 0);", "+\tbounds = tableItem2.getBounds(1);", "+\tassertTrue(\":4b:\", /*bounds.x > 0 &&*/ bounds.height > 0 && bounds.width == 0); // TODO bounds.x == 0 Is this right?", "+\tbounds = tableItem2.getBounds(-1);", "+\tassertTrue(\":4c:\", bounds.equals(new Rectangle(0, 0, 0, 0)));\t", "+ \tbounds = tableItem2.getBounds(2);", "+\tassertTrue(\":4d:\", bounds.equals(new Rectangle(0, 0, 0, 0)));", "+\t", "+\tcolumn0.setWidth(100);", "+\tbounds = tableItem2.getBounds(0);", "+\tassertTrue(\":4e:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = tableItem2.getBounds(1);", "+\tassertTrue(\":4f:\", bounds.x >= 100 && bounds.height > 0 && bounds.width == 0);", "+\t", "+\tcolumn1.setWidth(200);", "+\tbounds = tableItem2.getBounds(0);", "+\tassertTrue(\":4g:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = tableItem2.getBounds(1);", "+\tassertTrue(\":4h:\", bounds.x >= 100 && bounds.height > 0 && bounds.width == 200);", "+\t", "+\ttableItem2.setText(new String[] {\"hello\", \"world\"});", "+\tbounds = tableItem2.getBounds(0);", "+\tassertTrue(\":4i:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = tableItem2.getBounds(1);", "+\tassertTrue(\":4j:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "+\ttableItem2.setText(new String[] {\"\", \"\"});", "+\tbounds = tableItem2.getBounds(0);", "+\tassertTrue(\":4k:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = tableItem2.getBounds(1);", "+\tassertTrue(\":4l:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "+\t", "+\t//", "+\ttable2.dispose();", "+\ttable2 = new Table(shell, SWT.CHECK);", "+\ttableItem2 = new TableItem(table2, SWT.NONE);", "+\tcolumn0 = new TableColumn(table2, SWT.LEFT);", "+\tcolumn1 = new TableColumn(table2, SWT.CENTER);", "+\tcolumn0.setWidth(100);", "+\tcolumn1.setWidth(200);", "+\t", "+\ttableItem2.setImage(new Image[] {image, image});", "+\tbounds = tableItem2.getBounds(0);", "+\tassertTrue(\":4m:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = tableItem2.getBounds(1);", "+\tassertTrue(\":4n:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "+ \ttableItem2.setImage(new Image[] {null, null});", "+\tbounds = tableItem2.getBounds(0);", "+\tassertTrue(\":4o:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = tableItem2.getBounds(1);", "+\tassertTrue(\":4p:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "+\t", "+\t//", "+\ttable2.dispose();", "+\ttable2 = new Table(shell, SWT.CHECK);", "+\ttableItem2 = new TableItem(table2, SWT.NONE);", "+\tcolumn0 = new TableColumn(table2, SWT.LEFT);", "+\tcolumn1 = new TableColumn(table2, SWT.CENTER);", "+\tcolumn0.setWidth(100);", "+\tcolumn1.setWidth(200);", "+\t", "+\ttableItem2.setText(new String[] {\"hello\", \"world\"});", "+\ttableItem2.setImage(new Image[] {null, null});", "+\tbounds = tableItem2.getBounds(0);", "+\tassertTrue(\":4q:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = tableItem2.getBounds(1);", "+\tassertTrue(\":4r:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c15ea28181e912edb61538a16381c610", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_TreeItem.java", "commitBeforeChange": "891cc494ae4c67f837f4e56801ebbaefa071ff21", "commitAfterChange": "5a7cf25981afb3df35cc099989271851fccc11e2", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public void test_getBoundsI()", "signatureAfterChange": "  public void test_getBoundsI()", "diff": ["-\tint boundsX;", "+\tImage image = images[0];", "-\tTree tree2 = new Tree(shell, SWT.CHECK);", "-\tTreeItem treeItem2 = new TreeItem(tree2, SWT.NULL);", "+\tRectangle bounds2;", "+\t", "+\t// no columns", "-\tassertTrue(\":a:\", bounds.x > 0 && bounds.width > 0);", "-\tboundsX = bounds.x;", "- \tbounds = treeItem.getBounds(-1);", "-\tassertTrue(\":b:\", bounds.equals(new Rectangle(0, 0, 0, 0)));\t", "+\tassertTrue(\":1a:\", bounds.x > 0 && bounds.height > 0);", "+\tbounds = treeItem.getBounds(-1);", "+\tassertTrue(\":1b:\", bounds.equals(new Rectangle(0, 0, 0, 0)));\t", "-\tassertTrue(\":c:\", bounds.equals(new Rectangle(0, 0, 0, 0)));", "-\tTreeColumn column = new TreeColumn(tree2, SWT.NONE, 0);", "-\tcolumn.setWidth(100);", "+\tassertTrue(\":1c:\", bounds.equals(new Rectangle(0, 0, 0, 0)));", "+\t", "+\ttreeItem.setText(\"hello\");", "+\tbounds = treeItem.getBounds(0);", "+\tassertTrue(\":1d:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0);", "+\ttreeItem.setText(\"\");", "+\tbounds2 = treeItem.getBounds(0);", "+\tassertTrue(\":1e:\", bounds2.x > 0 && bounds2.height > 0);", "+\tassertTrue(\":1f:\", bounds2.width < bounds.width);", "+\t", "+\t//", "+\tmakeCleanEnvironment();", "+\t", "+\ttreeItem.setImage(image);", "+\tbounds = treeItem.getBounds(0);", "+\tassertTrue(\":1g:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0);", "+\ttreeItem.setImage((Image)null);", "+\tbounds2 = treeItem.getBounds(0);", "+\tassertTrue(\":1h:\", bounds2.x > 0 && bounds2.height > 0);", "+//\tassertTrue(\":1i:\", bounds2.width > bounds.width); // once an image is added the space for it is always there", "+ \t", "+\t//", "+\tmakeCleanEnvironment();", "+\t", "+\ttreeItem.setText(\"hello\");", "+\tbounds = treeItem.getBounds(0);", "+\ttreeItem.setImage(image);", "+\tbounds2 = treeItem.getBounds(0);", "+\tassertTrue(\":1j:\", bounds2.x > 0 && bounds2.height > 0);", "+\tassertTrue(\":1k:\", bounds2.width > bounds.width);", "+\t", "+\t// no columns and CHECK style", "+\tTree tree2 = new Tree(shell, SWT.CHECK);", "+\tTreeItem treeItem2 = new TreeItem(tree2, SWT.NONE);", "+\t", "-\tassertTrue(\":d:\", bounds.x > boundsX && bounds.width > 0);", "- \tbounds = treeItem2.getBounds(-1);", "-\tassertEquals(new Rectangle(0, 0, 0, 0), bounds);\t", "+\tassertTrue(\":2a:\", bounds.x > 0 && bounds.height > 0);", "+\tbounds = treeItem2.getBounds(-1);", "+\tassertTrue(\":2b:\", bounds.equals(new Rectangle(0, 0, 0, 0)));\t", "-\tassertEquals(new Rectangle(0, 0, 0, 0), bounds);\t\t\t", "-", "+\tassertTrue(\":2c:\", bounds.equals(new Rectangle(0, 0, 0, 0)));", "+\t", "+\ttreeItem2.setText(\"hello\");", "+\tbounds = treeItem2.getBounds(0);", "+\tassertTrue(\":2d:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0);", "+\ttreeItem2.setText(\"\");", "+\tbounds2 = treeItem2.getBounds(0);", "+\tassertTrue(\":2e:\", bounds2.x > 0 && bounds2.height > 0);", "+\tassertTrue(\":2f:\", bounds2.width < bounds.width);", "+\t", "+\ttree2.dispose();", "+\ttree2 = new Tree(shell, SWT.CHECK);", "+\ttreeItem2 = new TreeItem(tree2, SWT.NONE);", "+\t", "+\ttreeItem2.setImage(image);", "+\tbounds = treeItem2.getBounds(0);", "+\tassertTrue(\":2g:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0);", "+\ttreeItem2.setImage((Image)null);", "+\tbounds2 = treeItem2.getBounds(0);", "+\tassertTrue(\":2h:\", bounds2.x > 0 && bounds2.height > 0);", "+\t//assertTrue(\":2i:\", bounds2.width < bounds.width);  // once an image is added the space for it is always there", "+\t", "+\ttree2.dispose();", "+\ttree2 = new Tree(shell, SWT.CHECK);", "+\ttreeItem2 = new TreeItem(tree2, SWT.NONE);", "+\t", "+\ttreeItem2.setText(\"hello\");", "+\tbounds = treeItem2.getBounds(0);", "+\ttreeItem2.setImage(image);", "+\tbounds2 = treeItem2.getBounds(0);", "+\tassertTrue(\":2j:\", bounds2.x > 0 && bounds2.height > 0);", "+\tassertTrue(\":2k:\", bounds2.width > bounds.width);", "-\tImage image = images[0];", "+\t// with columns", "+\t", "+\tTreeColumn column0 = new TreeColumn(tree, SWT.LEFT);", "+\tTreeColumn column1 = new TreeColumn(tree, SWT.CENTER);", "+\t", "+\tbounds = treeItem.getBounds(0);", "+\tassertTrue(\":3a:\", bounds.x > 0 && bounds.height > 0 && bounds.width == 0);", "+\tbounds = treeItem.getBounds(1);", "+\tassertTrue(\":3b:\", /*bounds.x > 0 &&*/ bounds.height > 0 && bounds.width == 0); // TODO bounds.x == 0 Is this right?", "+\tbounds = treeItem.getBounds(-1);", "+\tassertTrue(\":3c:\", bounds.equals(new Rectangle(0, 0, 0, 0)));\t", "+ \tbounds = treeItem.getBounds(2);", "+\tassertTrue(\":3d:\", bounds.equals(new Rectangle(0, 0, 0, 0)));", "+\t", "+\tcolumn0.setWidth(100);", "+\tbounds = treeItem.getBounds(0);", "+\tassertTrue(\":3e:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = treeItem.getBounds(1);", "+\tassertTrue(\":3f:\", bounds.x >= 100 && bounds.height > 0 && bounds.width == 0);", "+\t", "+\tcolumn1.setWidth(200);", "+\tbounds = treeItem.getBounds(0);", "+\tassertTrue(\":3g:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = treeItem.getBounds(1);", "+\tassertTrue(\":3h:\", bounds.x >= 100 && bounds.height > 0 && bounds.width == 200);", "+\t", "+\ttreeItem.setText(new String[] {\"hello\", \"world\"});", "+\tbounds = treeItem.getBounds(0);", "+\tassertTrue(\":3i:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = treeItem.getBounds(1);", "+\tassertTrue(\":3j:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "+\ttreeItem.setText(new String[] {\"\", \"\"});", "+\tbounds = treeItem.getBounds(0);", "+\tassertTrue(\":3k:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = treeItem.getBounds(1);", "+\tassertTrue(\":3l:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "+\t", "+\t//", "+\tmakeCleanEnvironment();", "+\tcolumn0 = new TreeColumn(tree, SWT.LEFT);", "+\tcolumn1 = new TreeColumn(tree, SWT.CENTER);", "+\tcolumn0.setWidth(100);", "+\tcolumn1.setWidth(200);", "+\t", "+\ttreeItem.setImage(new Image[] {image, image});", "+\tbounds = treeItem.getBounds(0);", "+\tassertTrue(\":3m:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = treeItem.getBounds(1);", "+\tassertTrue(\":3n:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "+ \ttreeItem.setImage(new Image[] {null, null});", "+\tbounds = treeItem.getBounds(0);", "+\tassertTrue(\":3o:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = treeItem.getBounds(1);", "+\tassertTrue(\":3p:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "+\t", "+\t//", "+\tmakeCleanEnvironment();", "+\tcolumn0 = new TreeColumn(tree, SWT.LEFT);", "+\tcolumn1 = new TreeColumn(tree, SWT.CENTER);", "+\tcolumn0.setWidth(100);", "+\tcolumn1.setWidth(200);", "+\t", "+\ttreeItem.setText(new String[] {\"hello\", \"world\"});", "+\ttreeItem.setImage(new Image[] {null, null});", "+\tbounds = treeItem.getBounds(0);", "+\tassertTrue(\":3q:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = treeItem.getBounds(1);", "+\tassertTrue(\":3r:\", bounds.x > 0 && bounds.height > 0 && bounds.width  == 200);", "+\t", "+\t// with columns and CHECK style", "-\ttreeItem2.dispose();", "-\ttreeItem2 = new TreeItem(tree2, SWT.NULL);", "-\tcolumn.dispose();", "-", "-\tnew TreeColumn(tree, SWT.NULL);", "-\tnew TreeColumn(tree, SWT.NULL);", "-\ttreeItem.setImage(1, image);", "-\tbounds = treeItem.getBounds(0);", "-\tassertTrue(\":a:\", bounds.x >= 0 && bounds.width >= 0);", "-\tboundsX = bounds.x;", "- \tbounds = treeItem.getBounds(-1);", "-\tassertEquals(new Rectangle(0, 0, 0, 0), bounds);\t", "- \tbounds = treeItem.getBounds(1);", "-\t//assert(\":c:\", bounds.x > 0 && bounds.width > 0);  // ?? setting the image in one column does not affect width of other columns", "-\tassertTrue(\":c:\", bounds.x >= 0 && bounds.height >= 0);", "- ", "-\tcolumn = new TreeColumn(tree2, SWT.NULL);", "-\tcolumn.setWidth(100);", "-\tnew TreeColumn(tree2, SWT.NULL);\t", "-\ttreeItem2.setImage(1, image);", "+\ttreeItem2 = new TreeItem(tree2, SWT.NONE);", "+\tcolumn0 = new TreeColumn(tree2, SWT.LEFT);", "+\tcolumn1 = new TreeColumn(tree2, SWT.CENTER);", "+\t", "-\tassertTrue(\":d:\", bounds.x > boundsX && bounds.width > 0);", "- \tbounds = treeItem2.getBounds(-1);", "-\tassertEquals(new Rectangle(0, 0, 0, 0), bounds);\t", "- \tbounds = treeItem2.getBounds(1);", "-\t//assert(\":f:\", bounds.x > 0 && bounds.width > 0); // ?? setting the image in one column does not affect width of other columns", "-\tassertTrue(\":f:\", bounds.x > 0 && bounds.height > 0);", "+\tassertTrue(\":4a:\", bounds.x > 0 && bounds.height > 0 && bounds.width == 0);", "+\tbounds = treeItem2.getBounds(1);", "+\tassertTrue(\":4b:\", /*bounds.x > 0 &&*/ bounds.height > 0 && bounds.width == 0); // TODO bounds.x == 0 Is this right?", "+\tbounds = treeItem2.getBounds(-1);", "+\tassertTrue(\":4c:\", bounds.equals(new Rectangle(0, 0, 0, 0)));\t", "+ \tbounds = treeItem2.getBounds(2);", "+\tassertTrue(\":4d:\", bounds.equals(new Rectangle(0, 0, 0, 0)));", "+\t", "+\tcolumn0.setWidth(100);", "+\tbounds = treeItem2.getBounds(0);", "+\tassertTrue(\":4e:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = treeItem2.getBounds(1);", "+\tassertTrue(\":4f:\", bounds.x >= 100 && bounds.height > 0 && bounds.width == 0);", "+\t", "+\tcolumn1.setWidth(200);", "+\tbounds = treeItem2.getBounds(0);", "+\tassertTrue(\":4g:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = treeItem2.getBounds(1);", "+\tassertTrue(\":4h:\", bounds.x >= 100 && bounds.height > 0 && bounds.width == 200);", "+\t", "+\ttreeItem2.setText(new String[] {\"hello\", \"world\"});", "+\tbounds = treeItem2.getBounds(0);", "+\tassertTrue(\":4i:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = treeItem2.getBounds(1);", "+\tassertTrue(\":4j:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "+\ttreeItem2.setText(new String[] {\"\", \"\"});", "+\tbounds = treeItem2.getBounds(0);", "+\tassertTrue(\":4k:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = treeItem2.getBounds(1);", "+\tassertTrue(\":4l:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "+\t", "+\t//", "+\ttree2.dispose();", "+\ttree2 = new Tree(shell, SWT.CHECK);", "+\ttreeItem2 = new TreeItem(tree2, SWT.NONE);", "+\tcolumn0 = new TreeColumn(tree2, SWT.LEFT);", "+\tcolumn1 = new TreeColumn(tree2, SWT.CENTER);", "+\tcolumn0.setWidth(100);", "+\tcolumn1.setWidth(200);", "+\t", "+\ttreeItem2.setImage(new Image[] {image, image});", "+\tbounds = treeItem2.getBounds(0);", "+\tassertTrue(\":4m:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = treeItem2.getBounds(1);", "+\tassertTrue(\":4n:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "+ \ttreeItem2.setImage(new Image[] {null, null});", "+\tbounds = treeItem2.getBounds(0);", "+\tassertTrue(\":4o:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = treeItem2.getBounds(1);", "+\tassertTrue(\":4p:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "+\t", "+\t//", "+\ttree2.dispose();", "+\ttree2 = new Tree(shell, SWT.CHECK);", "+\ttreeItem2 = new TreeItem(tree2, SWT.NONE);", "+\tcolumn0 = new TreeColumn(tree2, SWT.LEFT);", "+\tcolumn1 = new TreeColumn(tree2, SWT.CENTER);", "+\tcolumn0.setWidth(100);", "+\tcolumn1.setWidth(200);", "+\t", "+\ttreeItem2.setText(new String[] {\"hello\", \"world\"});", "+\ttreeItem2.setImage(new Image[] {null, null});", "+\tbounds = treeItem2.getBounds(0);", "+\tassertTrue(\":4q:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "+\tbounds = treeItem2.getBounds(1);", "+\tassertTrue(\":4r:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);"]}], "num": 20386}
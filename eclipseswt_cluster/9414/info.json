{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1edb4c76b110c53d1570371abac0966", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34e6519e53427859ad43eff42c3cc708", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "80b251b31c83958589f1abd498272858be874a7a", "commitAfterChange": "8f572d2ec74566db18ae463fd47252be6b268df0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public boolean open ()", "signatureAfterChange": "\r public boolean open ()", "diff": ["+\tif (rectangles == null) return false;\r", "-\tPOINT pt = new POINT ();\r", "-\t// Tracker behaves like a Dialog with its own OS event loop.\r", "+\tint oldX = (short) (oldPos & 0xFFFF);\r", "+\tint oldY = (short) (oldPos >> 16);\t\r", "+\t/*\r", "+ \t* Tracker behaves like a Dialog with its own OS event loop.\r", "+ \t*/\r", "-\t\tswitch (msg.message) {\r", "+\t\tint message = msg.message;\r", "+\t\tswitch (message) {\r", "-\t\t\t\tif (newPos != oldPos) {\r", "-\t\t\t\t\tint oldX = (short) (oldPos & 0xFFFF);\r", "-\t\t\t\t\tint oldY = (short) (oldPos >> 16);\r", "-\t\t\t\t\tint newX = (short) (newPos & 0xFFFF);\r", "-\t\t\t\t\tint newY = (short) (newPos >> 16);\t\r", "+\t\t\t\tint newX = (short) (newPos & 0xFFFF);\r", "+\t\t\t\tint newY = (short) (newPos >> 16);\t\r", "+\t\t\t\tif (newX != oldX || newY != oldY) {\r", "-\t\t\t\t\tfor (int i=0; i<rectangles.length; i++) {\r", "-\t\t\t\t\t\trectangles [i].x += newX - oldX;\r", "-\t\t\t\t\t\trectangles [i].y += newY - oldY;\r", "+\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {\r", "+\t\t\t\t\t\tresizeRectangles (newX - oldX, newY - oldY);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tmoveRectangles (newX - oldX, newY - oldY);\r", "-\t\t\t\t\tsendEvent (SWT.Move, event);\r", "+\t\t\t\t\tif ((style | SWT.RESIZE) != 0) {\r", "+\t\t\t\t\t\tsendEvent (SWT.Resize, event);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tsendEvent (SWT.Move, event);\r", "+\t\t\t\t\t}\r", "-\t\t\t\t\toldPos = newPos;\r", "+\t\t\t\t\toldX = newX;\r", "+\t\t\t\t\toldY = newY;\r", "-\t\t\t\tcancelled = msg.wParam == OS.VK_ESCAPE;\r", "+\t\t\t\tint stepSize = OS.GetKeyState (OS.VK_CONTROL) < 0 ? 2 : 10;\r", "+\t\t\t\tint xChange = 0, yChange = 0;\r", "+\t\t\t\tswitch (msg.wParam) {\r", "+\t\t\t\t\tcase OS.VK_ESCAPE:\r", "+\t\t\t\t\t\tcancelled = true;\r", "+\t\t\t\t\t\ttracking = false;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase OS.VK_RETURN:\r", "+\t\t\t\t\t\ttracking = false;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase OS.VK_LEFT:\r", "+\t\t\t\t\t\txChange = -stepSize;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase OS.VK_RIGHT:\r", "+\t\t\t\t\t\txChange = stepSize;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase OS.VK_UP:\r", "+\t\t\t\t\t\tyChange = -stepSize;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase OS.VK_DOWN:\r", "+\t\t\t\t\t\tyChange = stepSize;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\t\t\tif (xChange != 0 || yChange != 0) {\r", "+\t\t\t\t\tdrawRectangles ();\r", "+\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {\r", "+\t\t\t\t\t\tresizeRectangles (xChange, yChange);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tmoveRectangles (xChange, yChange);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tnewX = oldX + xChange;\r", "+\t\t\t\t\tnewY = oldY + yChange;\r", "+\t\t\t\t\tevent.x = newX;\r", "+\t\t\t\t\tevent.y = newY;\r", "+\t\t\t\t\tif ((style | SWT.RESIZE) != 0) {\r", "+\t\t\t\t\t\tsendEvent (SWT.Resize, event);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tsendEvent (SWT.Move, event);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\t/*\r", "+\t\t\t\t\t* It is possible (but unlikely) that application\r", "+\t\t\t\t\t* code could have disposed the widget in the move\r", "+\t\t\t\t\t* event.  If this happens return false to indicate\r", "+\t\t\t\t\t* that the tracking has failed.\r", "+\t\t\t\t\t*/\r", "+\t\t\t\t\tif (isDisposed ()) return false;\r", "+\t\t\t\t\tdrawRectangles ();\r", "+\t\t\t\t\tRectangle boundingRectangle = computeBounds();\r", "+\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {\r", "+\t\t\t\t\t\tnewX = boundingRectangle.x + boundingRectangle.width;\r", "+\t\t\t\t\t\tnewY = boundingRectangle.y + boundingRectangle.height;\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tnewX = boundingRectangle.x + boundingRectangle.width / 2;\r", "+\t\t\t\t\t\tnewY = boundingRectangle.y;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tPOINT pt = new POINT ();\r", "+\t\t\t\t\tpt.x = newX;  pt.y = newY;\r", "+\t\t\t\t\t/*\r", "+\t\t\t\t\t * Convert to screen coordinates iff needed\r", "+\t\t\t\t\t */\r", "+\t\t\t\t\tif (parent != null) {\r", "+\t\t\t\t\t\tOS.ClientToScreen (parent.handle, pt);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tOS.SetCursorPos (pt.x,pt.y);\r", "+\t\t\t\t\toldX = pt.x;  oldY = pt.y;\r", "+\t\t\t\t}\r", "+\t\t\t\t\r", "+\t\t}\r", "+\t\t/*\r", "+\t\t* Don't dispatch mouse and key events in general, EXCEPT once this\r", "+\t\t* tracker has finished its work.\r", "+\t\t*/\r", "+\t\tif (tracking && !cancelled) {\r", "+\t\t\tif (OS.WM_KEYFIRST <= message && message <= OS.WM_KEYLAST) continue;\r", "+\t\t\tif (OS.WM_MOUSEFIRST <= message && message <= OS.WM_MOUSELAST) continue;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8adc485f12ea6b1dafab47632afcab62", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "80b251b31c83958589f1abd498272858be874a7a", "commitAfterChange": "8f572d2ec74566db18ae463fd47252be6b268df0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r public boolean open ()", "signatureAfterChange": "\r public boolean open ()", "diff": ["+\tif (rectangles == null) return false;\r", "-\t// Tracker behaves like a Dialog with its own OS event loop.\r", "+\t/*\r", "+\t *  Tracker behaves like a Dialog with its own OS event loop.\r", "+\t */\r", "-\t\tOS.XtAppNextEvent (xtContext,  xEvent);\r", "+\t\tOS.XtAppNextEvent (xtContext, xEvent);\r", "-\t\t\t\t\tfor (int i=0; i<rectangles.length; i++) {\r", "-\t\t\t\t\t\trectangles [i].x += newX [0] - oldX [0];\r", "-\t\t\t\t\t\trectangles [i].y += newY [0] - oldY [0];\r", "+\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {\r", "+\t\t\t\t\t\tresizeRectangles(newX [0] - oldX [0], newY [0] - oldY [0]);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tmoveRectangles(newX [0] - oldX [0], newY [0] - oldY [0]);\r", "-\t\t\t\t\tevent.x = newX[0];\r", "-\t\t\t\t\tevent.y = newY[0];\r", "-\t\t\t\t\tsendEvent (SWT.Move,event);\r", "+\t\t\t\t\tevent.x = newX [0];\r", "+\t\t\t\t\tevent.y = newY [0];\r", "+\t\t\t\t\tif ((style | SWT.RESIZE) != 0) {\r", "+\t\t\t\t\t\tsendEvent (SWT.Resize, event);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tsendEvent (SWT.Move, event);\r", "+\t\t\t\t\t}\r", "+\r", "+\t\t\t\t\t/*\r", "+\t\t\t\t\t * It is possible (but unlikely) that application code\r", "+\t\t\t\t\t * could have disposed the widget in the move event.\r", "+\t\t\t\t\t * If this happens then return false to indicate that\r", "+\t\t\t\t\t * the move failed.\r", "+\t\t\t\t\t */\r", "+\t\t\t\t\tif (isDisposed()) return false;\r", "-\t\t\t\t\ttracking = keysym [0] != OS.XK_Escape && keysym [0] != OS.XK_Cancel;\r", "-\t\t\t\t\tcancelled = !tracking;\r", "+\t\t\t\t\tint xChange = 0, yChange = 0;\r", "+\t\t\t\t\tint stepSize = ((keyEvent.state & OS.ControlMask) != 0) ? 2 : 10;\r", "+\t\t\t\t\tswitch (keysym [0]) {\r", "+\t\t\t\t\t\tcase OS.XK_Return:\r", "+\t\t\t\t\t\t\ttracking = false;\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase OS.XK_Escape:\r", "+\t\t\t\t\t\t\ttracking = false;\r", "+\t\t\t\t\t\t\tcancelled = true;\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase OS.XK_Cancel:\r", "+\t\t\t\t\t\t\ttracking = false;\r", "+\t\t\t\t\t\t\tcancelled = true;\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase OS.XK_Left:\r", "+\t\t\t\t\t\t\txChange = -stepSize;\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase OS.XK_Right:\r", "+\t\t\t\t\t\t\txChange = stepSize;\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase OS.XK_Up:\r", "+\t\t\t\t\t\t\tyChange = -stepSize;\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\tcase OS.XK_Down:\r", "+\t\t\t\t\t\t\tyChange = stepSize;\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif (xChange != 0 || yChange != 0) {\r", "+\t\t\t\t\t\tdrawRectangles ();\r", "+\t\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {\r", "+\t\t\t\t\t\t\tresizeRectangles(xChange, yChange);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tmoveRectangles(xChange, yChange);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tEvent event = new Event();\r", "+\t\t\t\t\t\tevent.x = oldX[0] + xChange;\r", "+\t\t\t\t\t\tevent.y = oldY[0] + yChange;\r", "+\t\t\t\t\t\tif ((style | SWT.RESIZE) != 0) {\r", "+\t\t\t\t\t\t\tsendEvent (SWT.Resize,event);\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tsendEvent (SWT.Move,event);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t/*\r", "+\t\t\t\t\t\t * It is possible (but unlikely) that application code\r", "+\t\t\t\t\t\t * could have disposed the widget in the move event.\r", "+\t\t\t\t\t\t * If this happens then return false to indicate that\r", "+\t\t\t\t\t\t * the move failed.\r", "+\t\t\t\t\t\t */\r", "+\t\t\t\t\t\tif (isDisposed()) return false;\r", "+\t\t\t\t\t\tdrawRectangles ();\r", "+\t\t\t\t\t\tRectangle boundingRectangle = computeBounds();\r", "+\t\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {\r", "+\t\t\t\t\t\t\tnewX [0] = boundingRectangle.x + boundingRectangle.width;\r", "+\t\t\t\t\t\t\tnewY [0] = boundingRectangle.y + boundingRectangle.height;\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tnewX [0] = boundingRectangle.x + boundingRectangle.width / 2;\r", "+\t\t\t\t\t\t\tnewY [0] = boundingRectangle.y;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tOS.XWarpPointer (xDisplay, SWT.NONE, xWindow, 0, 0, 0, 0, newX [0], newY [0]);\r", "+\t\t\t\t\t\t/*\r", "+\t\t\t\t\t\t * The call to XWarpPointer does not always place the pointer on the\r", "+\t\t\t\t\t\t * exact location that is specified, so do a query (below) to get the\r", "+\t\t\t\t\t\t * actual location of the pointer after it has been moved.\r", "+\t\t\t\t\t\t */\r", "+\t\t\t\t\t\tOS.XQueryPointer (xDisplay, xWindow, unused, unused, newX, newY, unused, unused, unused);\r", "+\t\t\t\t\t\toldX[0] = newX[0];  oldY[0] = newY[0];\r", "+\t\t\t\t\t}\r", "+\t\t\tdefault:\r", "+\t\t\t\tOS.XtDispatchEvent (xEvent);\r", "-\t\tOS.XtDispatchEvent (xEvent);\r"]}], "num": 9414}
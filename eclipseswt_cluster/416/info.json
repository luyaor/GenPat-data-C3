{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9acc43f2c86e1c3d3f7072c84b952896", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8358727e7692925bb0e105c64839ed7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ec0f35229704d59e8a0e8d08c5de254e59e57d5b", "commitAfterChange": "520d1ed0b907299aeb948cdb51785c50502c0827", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 70, "signatureBeforeChange": " void paint (GC gc, TreeColumn column, boolean paintCellContent)", "signatureAfterChange": " boolean paint (GC gc, TreeColumn column, boolean backgroundOnly)", "diff": ["-void paint (GC gc, TreeColumn column, boolean paintCellContent) {", "-\tif (!parent.checkData (this, true)) return;", "+boolean paint (GC gc, TreeColumn column, boolean backgroundOnly) {", "+\tif (!parent.checkData (this, true)) return false;", "+", "+\tif (parent.hooks (SWT.MeasureItem) && parent.columns.length == 0) {", "+\t\tint contentWidth = getContentWidth (columnIndex);", "+\t\tint contentX = getContentX (columnIndex);", "+\t\tgc.setFont (getFont (columnIndex, false));", "+\t\tEvent event = new Event ();", "+\t\tevent.item = this;", "+\t\tevent.gc = gc;", "+\t\tevent.index = columnIndex;", "+\t\tevent.x = contentX;", "+\t\tevent.y = parent.getItemY (this);", "+\t\tevent.width = contentWidth;", "+\t\tevent.height = parent.itemHeight;", "+\t\tparent.sendEvent (SWT.MeasureItem, event);", "+\t\tevent.gc = null;", "+\t\tif (isDisposed ()) return false;", "+\t\tif (parent.allowItemHeightChange) {", "+\t\t\tparent.allowItemHeightChange = false;", "+\t\t\tif (parent.itemHeight != event.height) {", "+\t\t\t\tparent.itemHeight = event.height + 2 * parent.getCellPadding ();", "+\t\t\t\tparent.redraw ();", "+\t\t\t}", "+\t\t}", "+\t\tint change = event.width - (customWidth != -1 ? customWidth : contentWidth);", "+\t\tif (event.width != contentWidth || customWidth != -1) customWidth = event.width;", "+\t\tif (change != 0) {\t/* scrollbar may be affected since no columns */", "+\t\t\tparent.updateHorizontalBar (contentX + event.width, change);", "+\t\t\t// TODO what if clip is too small now?", "+\t\t}", "+\t}", "+", "-\tif (clientArea.x + clientArea.width < x) return;", "+\tif (clientArea.x + clientArea.width < x) return false;", "+\tboolean isSelected = isSelected ();", "+\tboolean drawSelection = isSelected;", "+\tboolean isFocusItem = parent.focusItem == this;", "+\tboolean drawFocus = isFocusItem;", "+\tboolean drawContent = true;", "+\tif (parent.hooks (SWT.EraseItem)) {", "+\t\tgc.setFont (getFont ());", "+\t\tif (isSelected && (columnIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "+\t\t\tgc.setForeground (display.getSystemColor (SWT.COLOR_LIST_SELECTION_TEXT));", "+\t\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "+\t\t} else {", "+\t\t\tgc.setForeground (getForeground (columnIndex));", "+\t\t\tgc.setBackground (getBackground (columnIndex));", "+\t\t}", "+\t\tEvent event = new Event ();", "+\t\tevent.item = this;", "+\t\tevent.gc = gc;", "+\t\tevent.index = columnIndex;", "+\t\tevent.doit = true;", "+\t\tif (isSelected) event.detail |= SWT.SELECTED;", "+\t\tif (isFocusItem) event.detail |= SWT.FOCUSED;", "+\t\tevent.x = cellBounds.x;", "+\t\tevent.y = cellBounds.y;", "+\t\tevent.width = cellBounds.width;", "+\t\tevent.height = cellBounds.height;", "+\t\tgc.setClipping (event.x, event.y, event.width, event.height);", "+\t\tparent.sendEvent (SWT.EraseItem, event);", "+\t\tevent.gc = null;", "+\t\tif (isDisposed ()) return false;", "+\t\tdrawSelection = isSelected && (event.detail & SWT.SELECTED) != 0;", "+\t\tdrawFocus = isFocusItem && (event.detail & SWT.FOCUSED) != 0;", "+\t\tdrawContent = event.doit;", "+\t}", "+", "-\tif (isSelected () && (orderedIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "+\tif (drawSelection && isSelected && (orderedIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "-\tif (!paintCellContent) return;", "+\tif (backgroundOnly) return false;", "-\tImage image = getImage (columnIndex, false);", "-\tString text = getDisplayText (columnIndex);", "-\tRectangle imageArea = getImageBounds (columnIndex);", "-\tint startX = imageArea.x;", "+\tif (drawContent) {", "+\t\tImage image = getImage (columnIndex, false);", "+\t\tString text = getDisplayText (columnIndex);", "+\t\tRectangle imageArea = getImageBounds (columnIndex);", "+\t\tint startX = imageArea.x;", "+\t\t", "+\t\t/* while painting the cell's content restrict the clipping region */", "+\t\tint padding = parent.getCellPadding ();", "+\t\tgc.setClipping (", "+\t\t\tstartX,", "+\t\t\tcellBounds.y + padding - (parent.linesVisible ? 1 : 0),", "+\t\t\tcellRightX - startX - padding,", "+\t\t\tcellBounds.height - 2 * (padding - (parent.linesVisible ? 1 : 0)));", "-\t/* while painting the cell's content restrict the clipping region */", "-\tint padding = parent.getCellPadding ();", "-\tgc.setClipping (", "-\t\tstartX,", "-\t\tcellBounds.y + padding - (parent.linesVisible ? 1 : 0),", "-\t\tcellRightX - startX - padding,", "-\t\tcellBounds.height - 2 * (padding - (parent.linesVisible ? 1 : 0)));", "-", "-\t/* draw the image */", "-\tif (image != null) {", "-\t\tRectangle imageBounds = image.getBounds ();", "-\t\tgc.drawImage (", "-\t\t\timage,", "-\t\t\t0, 0,\t\t\t\t\t\t\t\t\t/* source x, y */", "-\t\t\timageBounds.width, imageBounds.height,\t/* source width, height */", "-\t\t\timageArea.x, imageArea.y,\t\t\t\t/* dest x, y */", "-\t\t\timageArea.width, imageArea.height);\t\t/* dest width, height */", "+\t\t/* draw the image */", "+\t\tif (image != null) {", "+\t\t\tRectangle imageBounds = image.getBounds ();", "+\t\t\tgc.drawImage (", "+\t\t\t\timage,", "+\t\t\t\t0, 0,\t\t\t\t\t\t\t\t\t/* source x, y */", "+\t\t\t\timageBounds.width, imageBounds.height,\t/* source width, height */", "+\t\t\t\timageArea.x, imageArea.y,\t\t\t\t/* dest x, y */", "+\t\t\t\timageArea.width, imageArea.height);\t\t/* dest width, height */", "+\t\t}", "+\t\t", "+\t\t/* draw the text */", "+\t\tif (text.length () > 0) {", "+\t\t\tgc.setFont (getFont (columnIndex, false));", "+\t\t\tint fontHeight = getFontHeight (columnIndex);", "+\t\t\tif (isSelected () && (orderedIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "+\t\t\t\tgc.setForeground (display.getSystemColor (SWT.COLOR_LIST_SELECTION_TEXT));", "+\t\t\t} else {", "+\t\t\t\tgc.setForeground (getForeground (columnIndex));", "+\t\t\t}", "+\t\t\tx = getTextX (columnIndex) + MARGIN_TEXT;", "+\t\t\tgc.drawString (text, x, y + (itemHeight - fontHeight) / 2, true);", "+\t\t}", "-\t/* draw the text */", "-\tif (text.length () > 0) {", "-\t\tgc.setFont (getFont (columnIndex, false));", "-\t\tint fontHeight = getFontHeight (columnIndex);", "-\t\tif (isSelected () && (orderedIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "+\tif (parent.hooks (SWT.PaintItem)) {", "+\t\tint contentWidth = getContentWidth (columnIndex);", "+\t\tint contentX = getContentX (columnIndex);", "+\t\tgc.setFont (getFont ());", "+\t\tif (isSelected && (columnIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "+\t\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "+\t\t\tgc.setBackground (getBackground (columnIndex));", "-\t\tx = getTextX (columnIndex) + MARGIN_TEXT;", "-\t\tgc.drawString (text, x, y + (itemHeight - fontHeight) / 2, true);", "+\t\tEvent event = new Event ();", "+\t\tevent.item = this;", "+\t\tevent.gc = gc;", "+\t\tevent.index = columnIndex;", "+\t\tif (isSelected) event.detail |= SWT.SELECTED;", "+\t\tif (drawFocus) event.detail |= SWT.FOCUSED;", "+\t\tevent.x = contentX;", "+\t\tevent.y = cellBounds.y;", "+\t\tevent.width = contentWidth;", "+\t\tevent.height = cellBounds.height;", "+\t\tgc.setClipping (cellBounds.x, cellBounds.y, cellBounds.width, cellBounds.height);", "+\t\tparent.sendEvent (SWT.PaintItem, event);", "+\t\tdrawFocus = isFocusItem && (event.detail & SWT.FOCUSED) != 0;", "+\t\tevent.gc = null;", "+", "+\treturn isFocusItem && !drawFocus;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b23d763b9e56b8e9224837f6c6a4c352", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "6dd7232a9bfb7b172a0784b2787e3a481ad143be", "commitAfterChange": "15d65623cf9e946c3c4cb7552b2d8fa7c7e9ef50", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 46, "signatureBeforeChange": " void paint (GC gc, TableColumn column, boolean paintCellContent)", "signatureAfterChange": " void paint (GC gc, TableColumn column, boolean paintBackgroundOnly)", "diff": ["-void paint (GC gc, TableColumn column, boolean paintCellContent) {", "+void paint (GC gc, TableColumn column, boolean paintBackgroundOnly) {", "+", "+\tif (parent.hooks (SWT.MeasureItem) && parent.columns.length == 0) {", "+\t\tint contentWidth = getContentWidth (columnIndex);", "+\t\tint contentX = getContentX (columnIndex);", "+\t\tgc.setFont (getFont (columnIndex));", "+\t\tEvent event = new Event ();", "+\t\tevent.item = this;", "+\t\tevent.gc = gc;", "+\t\tevent.index = columnIndex;", "+\t\tevent.x = contentX;", "+\t\tevent.y = parent.getItemY (this);", "+\t\tevent.width = contentWidth;", "+\t\tevent.height = parent.itemHeight;", "+\t\tparent.sendEvent (SWT.MeasureItem, event);", "+\t\tevent.gc = null;", "+\t\tif (isDisposed ()) return;", "+\t\tif (parent.allowItemHeightChange) {", "+\t\t\tparent.allowItemHeightChange = false;", "+\t\t\tif (parent.itemHeight != event.height) {", "+\t\t\t\tparent.itemHeight = event.height;", "+\t\t\t\tparent.redraw ();", "+\t\t\t}", "+\t\t}", "+\t\tint change = event.width - (customWidth != -1 ? customWidth : contentWidth);", "+\t\tif (event.width != contentWidth || customWidth != -1) customWidth = event.width;", "+\t\tif (change != 0) {\t/* scrollbar may be affected since no columns */", "+\t\t\tparent.updateHorizontalBar (contentX + event.width, change);", "+\t\t\t// TODO what if clip is too small now?", "+\t\t}", "+\t}", "+", "-\t\tRectangle focusBounds = getFocusBounds ();\t\t", "+\t\tRectangle focusBounds = getFocusBounds ();", "+\tboolean isSelected = isSelected ();", "+\tboolean drawSelection = isSelected;", "+\tboolean drawContent = true;", "+\tif (parent.hooks (SWT.EraseItem)) {", "+\t\tgc.setFont (getFont ());", "+\t\tif (isSelected) {", "+\t\t\tgc.setForeground (display.getSystemColor (SWT.COLOR_LIST_SELECTION_TEXT));", "+\t\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "+\t\t} else {", "+\t\t\tgc.setForeground (getForeground (columnIndex));", "+\t\t\tgc.setBackground (getBackground (columnIndex));", "+\t\t}", "+\t\tEvent event = new Event ();", "+\t\tevent.item = this;", "+\t\tevent.gc = gc;", "+\t\tevent.index = columnIndex;", "+\t\tevent.doit = true;", "+\t\tif (drawSelection) event.detail |= SWT.SELECTED;", "+\t\tif (parent.focusItem == this) event.detail |= SWT.FOCUSED;", "+\t\tevent.x = cellBounds.x;", "+\t\tevent.y = cellBounds.y;", "+\t\tevent.width = cellBounds.width;", "+\t\tevent.height = cellBounds.height;", "+\t\tgc.setClipping (event.x, event.y, event.width, event.height);", "+\t\tparent.sendEvent (SWT.EraseItem, event);", "+\t\tevent.gc = null;", "+\t\tif (isDisposed ()) return;", "+\t\tdrawSelection = drawSelection && (event.detail & SWT.SELECTED) != 0;", "+\t\tdrawContent = event.doit;", "+\t}", "+", "-\tif (isSelected () && (columnIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "+\tif (drawSelection && (columnIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "-\tif (!paintCellContent) return;", "+\tif (paintBackgroundOnly) return;", "-\tImage image = getImage (columnIndex, false);", "-\tString text = getDisplayText (columnIndex);", "-\tRectangle imageArea = getImageBounds (columnIndex);", "-\tint startX = imageArea.x;", "+\tif (drawContent) {", "+\t\tImage image = getImage (columnIndex, false);", "+\t\tString text = getDisplayText (columnIndex);", "+\t\tRectangle imageArea = getImageBounds (columnIndex);", "+\t\tint startX = imageArea.x;", "+\t\t", "+\t\t/* while painting the cell's content restrict the clipping region */", "+\t\tint padding = parent.getCellPadding ();", "+\t\tgc.setClipping (", "+\t\t\tstartX,", "+\t\t\tcellBounds.y + padding - (parent.linesVisible ? 1 : 0),", "+\t\t\tcellRightX - startX - padding,", "+\t\t\tcellBounds.height - 2 * (padding - (parent.linesVisible ? 1 : 0)));", "-\t/* while painting the cell's content restrict the clipping region */", "-\tint padding = parent.getCellPadding ();", "-\tgc.setClipping (", "-\t\tstartX,", "-\t\tcellBounds.y + padding - (parent.linesVisible ? 1 : 0),", "-\t\tcellRightX - startX - padding,", "-\t\tcellBounds.height - 2 * (padding - (parent.linesVisible ? 1 : 0)));", "-", "-\t/* draw the image */", "-\tif (image != null) {", "-\t\tRectangle imageBounds = image.getBounds ();", "-\t\tgc.drawImage (", "-\t\t\timage,", "-\t\t\t0, 0,\t\t\t\t\t\t\t\t\t/* source x, y */", "-\t\t\timageBounds.width, imageBounds.height,\t/* source width, height */", "-\t\t\timageArea.x, imageArea.y,\t\t\t\t/* dest x, y */", "-\t\t\timageArea.width, imageArea.height);\t\t/* dest width, height */", "+\t\t/* draw the image */", "+\t\tif (image != null) {", "+\t\t\tRectangle imageBounds = image.getBounds ();", "+\t\t\tgc.drawImage (", "+\t\t\t\timage,", "+\t\t\t\t0, 0,\t\t\t\t\t\t\t\t\t/* source x, y */", "+\t\t\t\timageBounds.width, imageBounds.height,\t/* source width, height */", "+\t\t\t\timageArea.x, imageArea.y,\t\t\t\t/* dest x, y */", "+\t\t\t\timageArea.width, imageArea.height);\t\t/* dest width, height */", "+\t\t}", "+\t", "+\t\t/* draw the text */", "+\t\tif (text.length () > 0) {", "+\t\t\tgc.setFont (getFont (columnIndex, false));", "+\t\t\tint fontHeight = getFontHeight (columnIndex);", "+\t\t\tif (drawSelection && (columnIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "+\t\t\t\tif (parent.hasFocus () || (parent.style & SWT.HIDE_SELECTION) == 0) {", "+\t\t\t\t\tgc.setForeground (display.getSystemColor (SWT.COLOR_LIST_SELECTION_TEXT));", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tgc.setForeground (getForeground (columnIndex));", "+\t\t\t}", "+\t\t\tx = getTextX (columnIndex) + MARGIN_TEXT;", "+\t\t\tgc.drawString (text, x, y + (itemHeight - fontHeight) / 2, true);", "+\t\t}", "-\t/* draw the text */", "-\tif (text.length () > 0) {", "-\t\tgc.setFont (getFont (columnIndex, false));", "-\t\tint fontHeight = getFontHeight (columnIndex);", "-\t\tif (isSelected () && (columnIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "-\t\t\tif (parent.hasFocus () || (parent.style & SWT.HIDE_SELECTION) == 0) {", "-\t\t\t\tgc.setForeground (display.getSystemColor (SWT.COLOR_LIST_SELECTION_TEXT));", "-\t\t\t}", "+\tif (parent.hooks (SWT.PaintItem)) {", "+\t\tint contentWidth = getContentWidth (columnIndex);", "+\t\tint contentX = getContentX (columnIndex);", "+\t\tgc.setFont (getFont ());", "+\t\tif (isSelected) {", "+\t\t\tgc.setForeground (display.getSystemColor (SWT.COLOR_LIST_SELECTION_TEXT));", "+\t\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "+\t\t\tgc.setBackground (getBackground (columnIndex));", "-\t\tx = getTextX (columnIndex) + MARGIN_TEXT;", "-\t\tgc.drawString (text, x, y + (itemHeight - fontHeight) / 2, true);", "+\t\tEvent event = new Event ();", "+\t\tevent.item = this;", "+\t\tevent.gc = gc;", "+\t\tevent.index = columnIndex;", "+\t\tif (isSelected) event.detail |= SWT.SELECTED;", "+\t\tif (parent.focusItem == this) event.detail |= SWT.FOCUSED;", "+\t\tevent.x = contentX;", "+\t\tevent.y = cellBounds.y;", "+\t\tevent.width = contentWidth;", "+\t\tevent.height = cellBounds.height;", "+\t\tgc.setClipping (event.x, event.y, event.width, event.height);", "+\t\tparent.sendEvent (SWT.PaintItem, event);", "+\t\tevent.gc = null;", "+}"]}], "num": 416}
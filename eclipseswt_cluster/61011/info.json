{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "247693c594fe5834ecf902f2205a8bb0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b02ba324e003ecfb152bf775f4615286", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "af57b4287b6ed2d2e6984f1f8532d49577a00b42", "commitAfterChange": "7ec616b485cfbaa37753c7eddbc015ac1ca925e3", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tstatic int atkEditableText_set_run_attributes (int atkObject, int attrib_set, int start_offset, int end_offset)", "signatureAfterChange": " \tstatic int atkEditableText_set_run_attributes (int atkObject, int attrib_set, int start_offset, int end_offset)", "diff": ["+\t\t\t\tDisplay display = accessible.control.getDisplay();", "+\t\t\t\tint /*long*/ fontDesc = OS.pango_font_description_new ();", "+\t\t\t\tboolean createFont = false;", "+\t\t\t\tTextStyle style = new TextStyle();", "+\t\t\t\tString [] attributes = new String [0];", "+\t\t\t\tint /*long*/ current = attrib_set;", "+\t\t\t\tint listLength = OS.g_slist_length (attrib_set);", "+\t\t\t\tfor (int i = 0; i < listLength; i++) {", "+\t\t\t\t\tint /*long*/ attrPtr = OS.g_slist_data (current);", "+\t\t\t\t\tif (attrPtr != 0) {", "+\t\t\t\t\t\tAtkAttribute attr = new AtkAttribute();", "+\t\t\t\t\t\tATK.memmove(attr, attrPtr, AtkAttribute.sizeof);", "+\t\t\t\t\t\tString name = getString(attr.name);", "+\t\t\t\t\t\tString value = getString(attr.value);", "+\t\t\t\t\t\tOS.g_free(attrPtr);", "+\t\t\t\t\t\tif (DEBUG) print(\"name=\" + name + \", value=\" + value);", "+\t\t\t\t\t\tString [] newAttributes = new String [attributes.length + 2];", "+\t\t\t\t\t\tSystem.arraycopy (attributes, 0, newAttributes, 0, attributes.length);", "+\t\t\t\t\t\tnewAttributes[attributes.length] = name;", "+\t\t\t\t\t\tnewAttributes[attributes.length + 1] = value;", "+\t\t\t\t\t\tattributes = newAttributes;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tif (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_RISE)))) {", "+\t\t\t\t\t\t\t\t// number of pixels above baseline", "+\t\t\t\t\t\t\t\tstyle.rise = Integer.parseInt(value);", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_UNDERLINE)))) {", "+\t\t\t\t\t\t\t\t// \"none\", \"single\", \"double\", \"low\", or \"error\" (also allow \"squiggle\")", "+\t\t\t\t\t\t\t\tif (value.equals(\"single\") || value.equals(\"low\")) {", "+\t\t\t\t\t\t\t\t\tstyle.underline = true;", "+\t\t\t\t\t\t\t\t\tstyle.underlineStyle = SWT.UNDERLINE_SINGLE;", "+\t\t\t\t\t\t\t\t} else if (value.equals(\"double\")) {", "+\t\t\t\t\t\t\t\t\tstyle.underline = true;", "+\t\t\t\t\t\t\t\t\tstyle.underlineStyle = SWT.UNDERLINE_DOUBLE;", "+\t\t\t\t\t\t\t\t} else if (value.equals(\"error\")) {", "+\t\t\t\t\t\t\t\t\tstyle.underline = true;", "+\t\t\t\t\t\t\t\t\tstyle.underlineStyle = SWT.UNDERLINE_ERROR;", "+\t\t\t\t\t\t\t\t} else if (value.equals(\"squiggle\")) {", "+\t\t\t\t\t\t\t\t\tstyle.underline = true;", "+\t\t\t\t\t\t\t\t\tstyle.underlineStyle = SWT.UNDERLINE_SQUIGGLE;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_STRIKETHROUGH)))) {", "+\t\t\t\t\t\t\t\t// \"true\" or \"false\" (also allow \"1\" and \"single\")", "+\t\t\t\t\t\t\t\tif (value.equals(\"true\") || value.equals(\"1\") || value.equals(\"single\")) style.strikeout = true;", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_FAMILY_NAME)))) {", "+\t\t\t\t\t\t\t\t// font family name", "+\t\t\t\t\t\t\t\tbyte [] buffer = Converter.wcsToMbcs(null, value, true);", "+\t\t\t\t\t\t\t\tOS.pango_font_description_set_family(fontDesc, buffer);", "+\t\t\t\t\t\t\t\tcreateFont = true;", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_SIZE)))) {", "+\t\t\t\t\t\t\t\t// size of characters in points (allow fractional points)", "+\t\t\t\t\t\t\t\tfloat size = Float.parseFloat(value);", "+\t\t\t\t\t\t\t\tOS.pango_font_description_set_size(fontDesc, (int)(size * OS.PANGO_SCALE));", "+\t\t\t\t\t\t\t\tcreateFont = true;", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_STYLE)))) {", "+\t\t\t\t\t\t\t\t// \"normal\", \"italic\" or \"oblique\"", "+\t\t\t\t\t\t\t\tint fontStyle = -1;", "+\t\t\t\t\t\t\t\tif (value.equals(\"normal\")) fontStyle = OS.PANGO_STYLE_NORMAL;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"italic\")) fontStyle = OS.PANGO_STYLE_ITALIC;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"oblique\")) fontStyle = OS.PANGO_STYLE_OBLIQUE;", "+\t\t\t\t\t\t\t\tif (fontStyle != -1) {", "+\t\t\t\t\t\t\t\t\tOS.pango_font_description_set_style(fontDesc, fontStyle);", "+\t\t\t\t\t\t\t\t\tcreateFont = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_VARIANT)))) {", "+\t\t\t\t\t\t\t\t// \"normal\" or \"small_caps\"", "+\t\t\t\t\t\t\t\tint variant = -1;", "+\t\t\t\t\t\t\t\tif (value.equals(\"normal\")) variant = OS.PANGO_VARIANT_NORMAL;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"small_caps\")) variant = OS.PANGO_VARIANT_SMALL_CAPS;", "+\t\t\t\t\t\t\t\tif (variant != -1) {", "+\t\t\t\t\t\t\t\t\tOS.pango_font_description_set_variant(fontDesc, variant);", "+\t\t\t\t\t\t\t\t\tcreateFont = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_STRETCH)))) {", "+\t\t\t\t\t\t\t\t//\"ultra_condensed\", \"extra_condensed\", \"condensed\", \"semi_condensed\", \"normal\", \"semi_expanded\", \"expanded\", \"extra_expanded\" or \"ultra_expanded\" ", "+\t\t\t\t\t\t\t\tint stretch = -1;", "+\t\t\t\t\t\t\t\tif (value.equals(\"ultra_condensed\")) stretch = OS.PANGO_STRETCH_ULTRA_CONDENSED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"extra_condensed\")) stretch = OS.PANGO_STRETCH_EXTRA_CONDENSED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"condensed\")) stretch = OS.PANGO_STRETCH_CONDENSED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"semi_condensed\")) stretch = OS.PANGO_STRETCH_SEMI_CONDENSED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"normal\")) stretch = OS.PANGO_STRETCH_NORMAL;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"semi_expanded\")) stretch = OS.PANGO_STRETCH_SEMI_EXPANDED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"expanded\")) stretch = OS.PANGO_STRETCH_EXPANDED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"extra_expanded\")) stretch = OS.PANGO_STRETCH_EXTRA_EXPANDED;", "+\t\t\t\t\t\t\t\telse if (value.equals(\"ultra_expanded\")) stretch = OS.PANGO_STRETCH_ULTRA_EXPANDED;", "+\t\t\t\t\t\t\t\tif (stretch != -1) {", "+\t\t\t\t\t\t\t\t\tOS.pango_font_description_set_stretch(fontDesc, stretch);", "+\t\t\t\t\t\t\t\t\tcreateFont = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_WEIGHT)))) {", "+\t\t\t\t\t\t\t\t// weight of the characters", "+\t\t\t\t\t\t\t\tint weight = Integer.parseInt(value);", "+\t\t\t\t\t\t\t\tOS.pango_font_description_set_weight(fontDesc, weight);", "+\t\t\t\t\t\t\t\tcreateFont = true;", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_FG_COLOR)))) {", "+\t\t\t\t\t\t\t\t// RGB value of the format \"u,u,u\"", "+\t\t\t\t\t\t\t\tstyle.foreground = colorFromString(display, value);", "+\t\t\t\t\t\t\t} else if (name.equals(getString(ATK.atk_text_attribute_get_name(ATK.ATK_TEXT_ATTR_BG_COLOR)))) {", "+\t\t\t\t\t\t\t\t// RGB value of the format \"u,u,u\"", "+\t\t\t\t\t\t\t\tstyle.background = colorFromString(display, value);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t//TODO language and direction", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} catch (NumberFormatException ex) {}", "+\t\t\t\t\t}", "+\t\t\t\t\tcurrent = OS.g_slist_next (current);", "+\t\t\t\t}", "+\t\t\t\tif (createFont) {", "+\t\t\t\t\tstyle.font = Font.gtk_new(display, fontDesc);", "+\t\t\t\t}", "+", "-\t\t\t\t// TODO: get attrib_set and set event.textStyle and event.attributes (see atkText_get_run_attributes)", "+\t\t\t\tevent.textStyle = style;", "+\t\t\t\tevent.attributes = attributes;", "-\t\t\t\t// TODO: dispose event.textStyle font/foreground/background", "+\t\t\t\tif (style.font != null) {", "+\t\t\t\t\tstyle.font.dispose();", "+\t\t\t\t}", "+\t\t\t\tif (style.foreground != null) {", "+\t\t\t\t\tstyle.foreground.dispose();", "+\t\t\t\t}", "+\t\t\t\tif (style.background != null) {", "+\t\t\t\t\tstyle.background.dispose();", "+\t\t\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f9aa52ee033927123e91b6a04b43c19", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "deba00683b7e799ad97b05b6dcbb1d19c053de72", "commitAfterChange": "f295d81c96c5f0cad60547a25236d1a3bb649162", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "  LRESULT WM_IME_COMPOSITION (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_IME_COMPOSITION (int wParam, int lParam)", "diff": ["-\tLRESULT result  = super.WM_IME_COMPOSITION (wParam, lParam);", "-\t/*", "-\t* Bug in Windows.  On Korean Windows XP, the IME window", "-\t* for the Korean Input System (MS-IME 2002) always opens ", "-\t* in the top left corner of the screen, despite the fact", "-\t* that ImmSetCompositionWindow() was called to position", "-\t* the IME when focus is gained.  The fix is to position", "-\t* the IME on every WM_IME_COMPOSITION message.", "-\t*/", "-\tif (!OS.IsWinCE && OS.WIN32_VERSION == OS.VERSION (5, 1)) {", "-\t\tif (OS.IsDBLocale) {", "-\t\t\tshort langID = OS.GetSystemDefaultUILanguage ();", "-\t\t\tshort primaryLang = OS.PRIMARYLANGID (langID);", "-\t\t\tif (primaryLang == OS.LANG_KOREAN) {", "-\t\t\t\tif (caret != null && caret.isFocusCaret ()) {", "-\t\t\t\t\tPOINT ptCurrentPos = new POINT ();", "-\t\t\t\t\tif (OS.GetCaretPos (ptCurrentPos)) {", "-\t\t\t\t\t\tCOMPOSITIONFORM lpCompForm = new COMPOSITIONFORM ();", "-\t\t\t\t\t\tlpCompForm.dwStyle = OS.CFS_POINT;", "-\t\t\t\t\t\tlpCompForm.x = ptCurrentPos.x;", "-\t\t\t\t\t\tlpCompForm.y = ptCurrentPos.y;", "-\t\t\t\t\t\tint /*long*/ hIMC = OS.ImmGetContext (handle);", "-\t\t\t\t\t\tOS.ImmSetCompositionWindow (hIMC, lpCompForm);", "-\t\t\t\t\t\tOS.ImmReleaseContext (handle, hIMC);", "+\tLRESULT result = super.WM_IME_COMPOSITION (wParam, lParam);", "+\tif (OS.IsDBLocale && hooks (SWT.ImeComposition)) {", "+\t\tint /*long*/ hIMC = OS.ImmGetContext (handle);", "+\t\tif (hIMC != 0) {", "+\t\t\tTCHAR buffer = null;", "+\t\t\tif ((lParam & OS.GCS_RESULTSTR) != 0) {", "+\t\t\t\tint length = OS.ImmGetCompositionString (hIMC, OS.GCS_RESULTSTR, null, 0);", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tbuffer = new TCHAR (getCodePage (), length / TCHAR.sizeof);", "+\t\t\t\t\tOS.ImmGetCompositionString (hIMC, OS.GCS_RESULTSTR, buffer, length);", "+\t\t\t\t\tString text = buffer.toString (); ", "+\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\tevent.detail = SWT.COMPOSITION_CHANGED;", "+\t\t\t\t\tevent.text = text;", "+\t\t\t\t\tevent.count = text.length ();", "+\t\t\t\t\tsendEvent (SWT.ImeComposition, event);", "+\t\t\t\t\tif (event.doit) {", "+\t\t\t\t\t\tDisplay display = this.display;", "+\t\t\t\t\t\tdisplay.lastKey = 0;", "+\t\t\t\t\t\tdisplay.lastVirtual = display.lastNull = display.lastDead = false;", "+\t\t\t\t\t\tlength = text.length ();", "+\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\tchar c = text.charAt (i);", "+\t\t\t\t\t\t\tdisplay.lastAscii = c;", "+\t\t\t\t\t\t\tevent = new Event ();", "+\t\t\t\t\t\t\tevent.character = c;", "+\t\t\t\t\t\t\tsendEvent (SWT.KeyDown, event);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif ((lParam & OS.GCS_COMPSTR) == 0) return LRESULT.ONE;", "+\t\t\t}", "+\t\t\t", "+\t\t\tint index = 0;", "+\t\t\tint [] ranges = null;", "+\t\t\tTextStyle [] styles = null;", "+\t\t\tint /*long*/ layout = OS.GetKeyboardLayout (0);", "+\t\t\tshort langID = (short)OS.LOWORD (layout);", "+\t\t\tif ((lParam & OS.GCS_COMPSTR) != 0) {", "+\t\t\t\tint length = OS.ImmGetCompositionString (hIMC, OS.GCS_COMPSTR, null, 0);", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tbuffer = new TCHAR (getCodePage (), length / TCHAR.sizeof);", "+\t\t\t\t\tOS.ImmGetCompositionString (hIMC, OS.GCS_COMPSTR, buffer, length);", "+\t\t\t\t\tif ((lParam & OS.GCS_CURSORPOS) != 0) {", "+\t\t\t\t\t\tindex = OS.ImmGetCompositionString (hIMC, OS.GCS_CURSORPOS, null, 0);", "+\t\t\t\t\t}", "+\t\t\t\t\tint [] clauses = null;", "+\t\t\t\t\tif ((lParam & OS.GCS_COMPCLAUSE) != 0) {", "+\t\t\t\t\t\tlength = OS.ImmGetCompositionStringW (hIMC, OS.GCS_COMPCLAUSE, (int [])null, 0);", "+\t\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\t\tclauses = new int [length / 4];", "+\t\t\t\t\t\t\tOS.ImmGetCompositionStringW (hIMC, OS.GCS_COMPCLAUSE, clauses, length);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif ((lParam & OS.GCS_COMPATTR) != 0 && clauses != null) {", "+\t\t\t\t\t\tlength = OS.ImmGetCompositionStringA (hIMC, OS.GCS_COMPATTR, (byte [])null, 0);", "+\t\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\t\tbyte [] attrs = new byte [length];", "+\t\t\t\t\t\t\tOS.ImmGetCompositionStringA (hIMC, OS.GCS_COMPATTR, attrs, length);", "+\t\t\t\t\t\t\tlength = clauses.length - 1;", "+\t\t\t\t\t\t\tranges = new int [length * 2];", "+\t\t\t\t\t\t\tstyles = new TextStyle [length];", "+\t\t\t\t\t\t\tTF_DISPLAYATTRIBUTE attr = null; ", "+\t\t\t\t\t\t\tTextStyle style = null;", "+\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\t\tranges [i * 2] = clauses [i];", "+\t\t\t\t\t\t\t\tranges [i * 2 + 1] = clauses [i + 1] - clauses [i];", "+\t\t\t\t\t\t\t\tstyles [i] = style = new TextStyle ();", "+\t\t\t\t\t\t\t\tattr = getDisplayAttribute (langID, attrs [clauses [i]]);", "+\t\t\t\t\t\t\t\tif (attr != null) {", "+\t\t\t\t\t\t\t\t\tswitch (attr.crText.type) {", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.foreground = Color.win32_new (display, attr.crText.cr);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "+\t\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crText.cr);", "+\t\t\t\t\t\t\t\t\t\t\tstyle.foreground = Color.win32_new (display, colorRef);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tswitch (attr.crBk.type) {", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.background = Color.win32_new (display, attr.crBk.cr);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "+\t\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crBk.cr);", "+\t\t\t\t\t\t\t\t\t\t\tstyle.background = Color.win32_new (display, colorRef);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tswitch (attr.crLine.type) {", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.underlineColor = Color.win32_new (display, attr.crLine.cr);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "+\t\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crLine.cr);", "+\t\t\t\t\t\t\t\t\t\t\tstyle.underlineColor = Color.win32_new (display, colorRef);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tstyle.underline = attr.lsStyle != OS.TF_LS_NONE;", "+\t\t\t\t\t\t\t\t\tswitch (attr.lsStyle) {", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_SQUIGGLE:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = SWT.UNDERLINE_ERROR;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_DASH:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = UNDERLINE_IME_DASH; ", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_DOT:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = UNDERLINE_IME_DOT;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_SOLID:", "+\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = attr.fBoldLine ? UNDERLINE_IME_THICK : SWT.UNDERLINE_SINGLE;", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tOS.ImmReleaseContext (handle, hIMC);", "+\t\t\t}", "+\t\t\tString text = buffer != null ? buffer.toString () : \"\";", "+\t\t\tEvent event = new Event ();", "+\t\t\tevent.detail = SWT.COMPOSITION_CHANGED;", "+\t\t\tevent.text = text;", "+\t\t\tevent.index = index;", "+\t\t\tevent.count = 0;", "+\t\t\tevent.ranges = ranges;", "+\t\t\tevent.styles = styles;", "+\t\t\tevent.wideCaret = OS.PRIMARYLANGID (langID) == OS.LANG_KOREAN; ", "+\t\t\tsendEvent (SWT.ImeComposition, event);", "+\t\t}", "+\t\treturn LRESULT.ONE;", "+\t} else {", "+\t\t/*", "+\t\t* Bug in Windows.  On Korean Windows XP, the IME window", "+\t\t* for the Korean Input System (MS-IME 2002) always opens ", "+\t\t* in the top left corner of the screen, despite the fact", "+\t\t* that ImmSetCompositionWindow() was called to position", "+\t\t* the IME when focus is gained.  The fix is to position", "+\t\t* the IME on every WM_IME_COMPOSITION message.", "+\t\t*/", "+\t\tif (!OS.IsWinCE && OS.WIN32_VERSION == OS.VERSION (5, 1)) {", "+\t\t\tif (OS.IsDBLocale) {", "+\t\t\t\tshort langID = OS.GetSystemDefaultUILanguage ();", "+\t\t\t\tshort primaryLang = OS.PRIMARYLANGID (langID);", "+\t\t\t\tif (primaryLang == OS.LANG_KOREAN) {", "+\t\t\t\t\tif (caret != null && caret.isFocusCaret ()) {", "+\t\t\t\t\t\tPOINT ptCurrentPos = new POINT ();", "+\t\t\t\t\t\tif (OS.GetCaretPos (ptCurrentPos)) {", "+\t\t\t\t\t\t\tCOMPOSITIONFORM lpCompForm = new COMPOSITIONFORM ();", "+\t\t\t\t\t\t\tlpCompForm.dwStyle = OS.CFS_POINT;", "+\t\t\t\t\t\t\tlpCompForm.x = ptCurrentPos.x;", "+\t\t\t\t\t\t\tlpCompForm.y = ptCurrentPos.y;", "+\t\t\t\t\t\t\tint /*long*/ hIMC = OS.ImmGetContext (handle);", "+\t\t\t\t\t\t\tOS.ImmSetCompositionWindow (hIMC, lpCompForm);", "+\t\t\t\t\t\t\tOS.ImmReleaseContext (handle, hIMC);", "+\t\t\t\t\t\t}", "+\t}", "+\treturn result;", "+}"]}], "num": 61011}
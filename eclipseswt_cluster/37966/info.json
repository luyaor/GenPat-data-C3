{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ed1aafe1b30a74184ccad843f441ac8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e00eb718b132a505eaa75d85dcc4df5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "e31f7652984f652ea926922eada8f616d2b06239", "commitAfterChange": "d580a3f0fff23e1bdc5580a0c92a6b691a4d4d98", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 73, "signatureBeforeChange": "  void windowSendEvent(int id, int event)", "signatureAfterChange": "  void windowSendEvent(int id, int event)", "diff": ["-\tsuper.windowSendEvent(id, event);", "-\t\tControl focusControl = display.getFocusControl();", "-\t\tif (focusControl != null) {", "-\t\t\tfocusControl.sendKeyEvent(nsEvent, type == OS.NSKeyDown ? SWT.KeyDown : SWT.KeyUp);", "+\t\tControl eventTarget = display.getFocusControl();", "+\t\tif (eventTarget == null) {", "+\t\t\t/*", "+\t\t\t* If the first responder is the shared field editor then set its delegate", "+\t\t\t* as the event target.", "+\t\t\t*/", "+\t\t\tNSResponder firstResponder = window.firstResponder();", "+\t\t\tif (firstResponder.isKindOfClass(NSText.static_class())) {", "+\t\t\t\tNSText text = new NSText(firstResponder.id);", "+\t\t\t\tif (text.isFieldEditor()) {", "+\t\t\t\t\tid delegateId = text.delegate();", "+\t\t\t\t\tif (delegateId != null) {", "+\t\t\t\t\t\tNSObject delegate = new NSObject(delegateId.id);", "+\t\t\t\t\t\tif (delegate.respondsToSelector(OS.sel_tag)) {", "+\t\t\t\t\t\t\tint tag = OS.objc_msgSend(delegate.id, OS.sel_tag);", "+\t\t\t\t\t\t\tif (tag != 0 && tag != -1) {", "+\t\t\t\t\t\t\t\tControl control = (Control)OS.JNIGetObject(tag);", "+\t\t\t\t\t\t\t\tif (control != null) {", "+\t\t\t\t\t\t\t\t\teventTarget = control;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (eventTarget != null) {", "+\t\t\teventTarget.sendKeyEvent(nsEvent, type == OS.NSKeyDown ? SWT.KeyDown : SWT.KeyUp);", "+\tsuper.windowSendEvent(id, event);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35f142ba1b0285fef05f617e7e138ae4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "commitAfterChange": "5c7937250fcb4b2e69099c4b441e5a51b45e4add", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  int accessibilityAttributeNames(int id, int sel)", "signatureAfterChange": "  int accessibilityAttributeValue (int id, int sel, int arg0)", "diff": ["-int /*long*/ accessibilityAttributeNames(int /*long*/ id, int /*long*/ sel) {", "-\t", "-\tif (id == view.id) {", "-\t\tif (accessible != null) {", "-\t\t\t// If there is an accessible, it may provide its own list of attributes if it's a lightweight control.", "-\t\t\t// If not, let Cocoa handle it for this view.", "-\t\t\tid returnObject = accessible.internal_accessibilityAttributeNames(ACC.CHILDID_SELF);", "-\t\t\tif (returnObject != null) return returnObject.id;", "+int /*long*/ accessibilityAttributeValue (int /*long*/ id, int /*long*/ sel, int /*long*/ arg0) {", "+\tNSString nsAttributeName = new NSString(arg0);", "+\tint /*long*/ superValue = super.accessibilityAttributeValue(id, sel, arg0);", "+", "+\tif ((state & CANVAS) != 0) {", "+\t\t// If this Composite has an Accessible that defined a role, return that, unless the", "+\t\t// supplied role was NSAccessibilityUnknownRole.  In that case, return an SWT-specific constant.", "+\t\t// This lets the accessibility hierarchy know there's a container here.", "+\t\tif (id == accessibleHandle()) {", "+\t\t\tif (nsAttributeName.isEqualToString (OS.NSAccessibilityRoleAttribute)) {", "+\t\t\t\tif (superValue != 0) {", "+\t\t\t\t\tNSString role = new NSString(superValue);", "+\t\t\t\t\tif (!role.isEqualToString(OS.NSAccessibilityUnknownRole)) return superValue;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tNSString role = NSString.stringWith(\"SWTComposite\");", "+\t\t\t\treturn role.id;", "+\t\t\t} else if (nsAttributeName.isEqualToString (OS.NSAccessibilityRoleDescriptionAttribute)) {", "+\t\t\t\tif (superValue != 0) {", "+\t\t\t\t\tNSString role = new NSString(superValue);", "+\t\t\t\t\tif (!role.isEqualToString(OS.NSAccessibilityUnknownSubrole)) return superValue;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tNSString roleDescription = NSString.stringWith(\"generic container view\");", "+\t\t\t\treturn roleDescription.id;", "+\t\t\t}", "-\treturn super.accessibilityAttributeNames(id, sel);", "+\treturn superValue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6985f5153428a8e8a9cd5d77c294937f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TaskBar.java", "commitBeforeChange": "e75f9a9601f49a9f2f46f2af60c9c1dbeec1ab11", "commitAfterChange": "1a606235eed4952b3f545771da3e4f6926e0b3ab", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  int createShellLink (MenuItem item, String directory)", "signatureAfterChange": "  int createShellLink (MenuItem item, String directory)", "diff": ["-\t\thr = OS.VtblCall (20, pLink, EXE_PATH);", "+\t\tString exePath = (String)item.getData (EXE_PATH_KEY);", "+\t\tif (exePath != null) {", "+\t\t\tlength = exePath.length ();", "+\t\t\tbuffer = new char [length + 1];", "+\t\t\texePath.getChars (0, length, buffer, 0);", "+\t\t} else {", "+\t\t\tbuffer = EXE_PATH;", "+\t\t}", "+\t\thr = OS.VtblCall (20, pLink, buffer);", "-\t\ttext = Display.LAUNCHER_PREFIX + Display.TASKBAR_EVENT + item.id;", "+\t\ttext =  (String)item.getData (EXE_ARGS_KEY);", "+\t\tif (text == null) text = Display.LAUNCHER_PREFIX + Display.TASKBAR_EVENT + item.id;", "-\t\tImage image = item.getImage ();", "-\t\tif (image != null && directory != null) {", "-\t\t\tString imageFilename = directory + \"\\\\menu\" + item.id + \".ico\" ;", "-\t\t\tImageData data;", "-\t\t\tif (item.hBitmap != 0) {", "-\t\t\t\tImage image2 = Image.win32_new (display, SWT.BITMAP, item.hBitmap);", "-\t\t\t\tdata = image2.getImageData ();", "-\t\t\t} else {", "-\t\t\t\tdata = image.getImageData ();", "+\t\tString icon = (String)item.getData (ICON_KEY);", "+\t\tint index = 0;", "+\t\tif (icon != null) {", "+\t\t\ttext = (String)item.getData (ICON_INDEX_KEY);", "+\t\t\tif (text != null) index = Integer.parseInt (text);", "+\t\t} else {", "+\t\t\tImage image = item.getImage ();", "+\t\t\tif (image != null && directory != null) {", "+\t\t\t\ticon = directory + \"\\\\menu\" + item.id + \".ico\" ;", "+\t\t\t\tImageData data;", "+\t\t\t\tif (item.hBitmap != 0) {", "+\t\t\t\t\tImage image2 = Image.win32_new (display, SWT.BITMAP, item.hBitmap);", "+\t\t\t\t\tdata = image2.getImageData ();", "+\t\t\t\t} else {", "+\t\t\t\t\tdata = image.getImageData ();", "+\t\t\t\t}", "+\t\t\t\tImageLoader loader = new ImageLoader ();", "+\t\t\t\tloader.data = new ImageData [] {data};", "+\t\t\t\tloader.save (icon, SWT.IMAGE_ICO);", "-\t\t\tImageLoader loader = new ImageLoader ();", "-\t\t\tloader.data = new ImageData [] {data};", "-\t\t\tloader.save (imageFilename, SWT.IMAGE_ICO);", "-\t\t\tlength = imageFilename.length ();", "+\t\t}", "+\t\tif (icon != null) {", "+\t\t\tlength = icon.length ();", "-\t\t\timageFilename.getChars (0, length, buffer, 0);", "+\t\t\ticon.getChars (0, length, buffer, 0);", "-\t\t\thr = OS.VtblCall (17, pLink, buffer, 0);", "+\t\t\thr = OS.VtblCall (17, pLink, buffer, index);"]}], "num": 37966}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2fb59ecbc95585daade2e9419ccd4c92", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41f477037270a08bb5cd9a2b49733be0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabItem.java", "commitBeforeChange": "1f6933a1b15056c0d45fcdf5019d55449793c82d", "commitAfterChange": "03b27348c501db581e6b7fd3b2d0cc945cd398ee", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 21, "signatureBeforeChange": " int preferredWidth(GC gc, boolean isSelected)", "signatureAfterChange": " int preferredWidth(GC gc, boolean isSelected)", "diff": ["-\tCTabFolderEvent e = new CTabFolderEvent(this);", "-\te.widget = this;", "-\te.time = (int)System.currentTimeMillis();", "-\te.doit = true;", "-\te.x = e.y = e.width = e.height = 0;", "-\te.item = this;", "-\tfor (int j = 0; j < parent.folderListeners.length; j++) {", "-\t\tparent.folderListeners[j].getTabSize(e);", "-\t}", "-\tif (!e.doit) return e.width;", "+\t// NOTE: preferred width does not include the \"dead space\" caused", "+\t// by the curve.", "-\tif (!parent.simple && isSelected) w += CTabFolder.CURVE_INDENT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c35b00140fdb8b8e415cf8099642686b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/DragSource.java", "commitBeforeChange": "e5e0c32cb05eecaf8a37e2a99ced9c5808201174", "commitAfterChange": "3daec5bcdac549554c8cbda138e2ff635c199aeb", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 8, "signatureBeforeChange": "  private void drag(Event dragEvent)", "signatureAfterChange": "  private void drag(Event dragEvent)", "diff": ["-\tEventRecord theEvent = new EventRecord();", "-\ttheEvent.message = OS.kEventMouseMoved;", "-\ttheEvent.modifiers = (short)OS.GetCurrentEventKeyModifiers();", "-\ttheEvent.what = (short)OS.osEvt;", "-\ttheEvent.where_h = (short)pt.h;", "-\ttheEvent.where_v = (short)pt.v;", "-\t", "-\t// Immediately get data for transfer.  On other platforms, we wait", "-\t// until the data is requested, but on the mac, particularly in the case of files,", "-\t// we need to know how many items are being transferred when registering.  ", "-\t// The only way to know this is to get the data.", "-\t\t\tTransferData transferData = new TransferData();", "-\t\t\ttransferData.type = types[j];", "-\t\t\tevent = new DNDEvent();", "-\t\t\tevent.widget = this;", "-\t\t\tevent.time = (int)System.currentTimeMillis(); ", "-\t\t\tevent.dataType = transferData; ", "-\t\t\tnotifyListeners(DND.DragSetData, event);", "-\t\t\ttransferAgents[i].javaToNative(event.data, transferData);", "-\t\t\tif (transferData.result != OS.noErr || transferData.data == null) continue; ", "-\t\t\tfor (int k = 0; k < transferData.data.length; k++) {", "-\t\t\t\tbyte[] data = transferData.data[k];", "-\t\t\t\tOS.AddDragItemFlavor(theDrag[0], index++, types[j], data, data.length, 0);\t", "-\t\t\t}\t", "+\t\t\tOS.AddDragItemFlavor(theDrag[0], index++, types[j], null, 0, 0);\t", "+\tOS.SetDragSendProc(theDrag[0], DragSendDataProc.getAddress(), control.handle);", "+\t", "-\ttry {", "+\ttry {\t", "+\t\tEventRecord theEvent = new EventRecord();", "+\t\ttheEvent.message = OS.kEventMouseMoved;", "+\t\ttheEvent.modifiers = (short)OS.GetCurrentEventKeyModifiers();", "+\t\ttheEvent.what = (short)OS.osEvt;", "+\t\ttheEvent.where_h = (short)pt.h;", "+\t\ttheEvent.where_v = (short)pt.v;\t"]}], "num": 7697}
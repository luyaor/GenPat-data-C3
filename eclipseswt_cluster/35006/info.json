{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2534ff3186502efb7b4ecfc459ede0c9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "800a174f9658f23397581eba84d641bd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "942550e839861bd174b4700244a01daf806cc563", "commitAfterChange": "4ba9417e6db22a8726937adb28ec831a0cdfc1eb", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["+\t\t", "+\t\tclassName = \"SWTApplicationDelegate\";", "+\t\tif (OS.objc_lookUpClass (className) == 0) {", "+\t\t\tint /*long*/ appProc3 = applicationCallback3.getAddress();", "+\t\t\tif (appProc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t\tcls = OS.objc_allocateClassPair(OS.class_NSObject, className, 0);", "+\t\t\tOS.class_addMethod(cls, OS.sel_applicationWillFinishLaunching_, appProc3, \"@:@\");", "+\t\t\tOS.class_addMethod(cls, OS.sel_terminate_, appProc3, \"@:@\");", "+\t\t\tOS.class_addMethod(cls, OS.sel_quitRequested_, appProc3, \"@:@\");", "+\t\t\tOS.class_addMethod(cls, OS.sel_orderFrontStandardAboutPanel_, appProc3, \"@:@\");", "+\t\t\tOS.class_addMethod(cls, OS.sel_hideOtherApplications_, appProc3, \"@:@\");", "+\t\t\tOS.class_addMethod(cls, OS.sel_hide_, appProc3, \"@:@\");", "+\t\t\tOS.class_addMethod(cls, OS.sel_unhideAllApplications_, appProc3, \"@:@\");", "+\t\t\tOS.class_addMethod(cls, OS.sel_applicationDidBecomeActive_, appProc3, \"@:@\");", "+\t\t\tOS.class_addMethod(cls, OS.sel_applicationDidResignActive_, appProc3, \"@:@\");", "+\t\t\tOS.objc_registerClassPair(cls);", "+\t\t}\t", "+\t\tapplicationDelegate = (SWTApplicationDelegate)new SWTApplicationDelegate().alloc().init();", "+\t\tapplication.setDelegate(applicationDelegate);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1606b266f2e85e1eb57cefaeddd42ee8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "d507496911ca05232d09014eb4fedca709465fde", "commitAfterChange": "44e4c956863e2493464d792473b6cd0c1d2745d4", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  void decideDestinationWithSuggestedFilename (int download, int filename)", "signatureAfterChange": "  void decideDestinationWithSuggestedFilename (int download, int filename)", "diff": ["-\tFileDialog dialog = new FileDialog(browser.getShell(), SWT.SAVE);", "-\tdialog.setText(SWT.getMessage (\"SWT_FileDownload\")); //$NON-NLS-1$", "-\tdialog.setFileName(name);", "-\tString path = dialog.open();", "+", "+\t/*", "+\t* Bug in Safari.  As of OSX 10.5.5, showing the file dialog here invokes this", "+\t* callback a second time when the file dialog runs the event loop, which", "+\t* always leads to a crash.  The workaround is to choose a location to save", "+\t* the file without showing the file dialog. ", "+\t*/", "+\tString path = null;", "+\tif (OS.VERSION >= 0x1055) {", "+\t\tint array = Cocoa.NSSearchPathForDirectoriesInDomains (Cocoa.NSDesktopDirectory, Cocoa.NSAllDomainsMask, true);", "+\t\tint count = Cocoa.objc_msgSend (array, Cocoa.S_count);", "+\t\tif (count == 0) { /* should never happen */", "+\t\t\tarray = Cocoa.NSSearchPathForDirectoriesInDomains (Cocoa.NSDownloadsDirectory, Cocoa.NSAllDomainsMask, true);", "+\t\t\tcount = Cocoa.objc_msgSend (array, Cocoa.S_count);", "+\t\t\tif (count == 0) {", "+\t\t\t\tarray = Cocoa.NSSearchPathForDirectoriesInDomains (Cocoa.NSDocumentDirectory, Cocoa.NSAllDomainsMask, true);", "+\t\t\t\tcount = Cocoa.objc_msgSend (array, Cocoa.S_count);", "+\t\t\t\tif (count == 0) {", "+\t\t\t\t\tCocoa.objc_msgSend (download, Cocoa.S_cancel);", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tint string = Cocoa.objc_msgSend (array, Cocoa.S_objectAtIndex, 0);", "+\t\tlength = OS.CFStringGetLength (string);", "+\t\tbuffer = new char[length];", "+\t\trange = new CFRange ();", "+\t\trange.length = length;", "+\t\tOS.CFStringGetCharacters (string, range, buffer);", "+\t\tpath = new String (buffer) + '/' + name;", "+\t} else {", "+\t\tFileDialog dialog = new FileDialog(browser.getShell(), SWT.SAVE);", "+\t\tdialog.setText(SWT.getMessage (\"SWT_FileDownload\")); //$NON-NLS-1$", "+\t\tdialog.setFileName(name);", "+\t\tpath = dialog.open();", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a892d18056fdde331e1699d99844ea88", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/DragSource.java", "commitBeforeChange": "cd2b53b4a9279ed54f58046e25d52b26e8ff215a", "commitAfterChange": "a249bc7fdbc7fae25945bbe8a9ec4c661502f54f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  private void drag(Event dragEvent)", "signatureAfterChange": "  private void drag(Event dragEvent)", "diff": ["+\thwndDrag = 0;", "+\ttopControl = null;", "-\t\tOS.ImageList_BeginDrag(imagelist.getHandle(), 0, 0, 0);", "-\t\tPoint location = topControl.getLocation();", "+\t\t/* ", "+\t\t * Bug in Windows. The image is inverted if the shell is RIGHT_TO_LEFT.", "+\t\t * The fix is to create a transparent window that covers the shell client", "+\t\t * area and use it during the drag to prevent the image from being inverted.", "+\t\t * On XP if the shell is RTL, the image is not displayed.", "+\t\t */", "+\t\tint offset = 0;", "+\t\thwndDrag = topControl.handle;", "+\t\tif ((topControl.getStyle() & SWT.RIGHT_TO_LEFT) != 0) {", "+\t\t\toffset = image.getBounds().width;", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.GetClientRect (topControl.handle, rect);", "+\t\t\thwndDrag = OS.CreateWindowEx (", "+\t\t\t\tOS.WS_EX_TRANSPARENT | OS.WS_EX_NOINHERITLAYOUT,", "+\t\t\t\tWindowClass,", "+\t\t\t\tnull,", "+\t\t\t\tOS.WS_CHILD | OS.WS_CLIPSIBLINGS,", "+\t\t\t\t0, 0,", "+\t\t\t\trect.right - rect.left, rect.bottom - rect.top, ", "+\t\t\t\ttopControl.handle,", "+\t\t\t\t0,", "+\t\t\t\tOS.GetModuleHandle (null),", "+\t\t\t\tnull);", "+\t\t\tOS.ShowWindow (hwndDrag, OS.SW_SHOW);", "+\t\t}", "+\t\tOS.ImageList_BeginDrag(imagelist.getHandle(), 0, offset, 0);", "-\t\tOS.ImageList_DragEnter(topControl.handle, dragEvent.x - location.x, dragEvent.y - location.y);", "+\t\tPOINT pt = new POINT ();", "+\t\tpt.x = dragEvent.x;", "+\t\tpt.y = dragEvent.y;", "+\t\tOS.MapWindowPoints (0, hwndDrag, pt, 1);", "+\t\tOS.ImageList_DragEnter(hwndDrag, pt.x, pt.y);", "-\tint result = COM.DoDragDrop(iDataObject.getAddress(), iDropSource.getAddress(), operations, pdwEffect);", "-\tif (imagelist != null) {", "-\t\tOS.ImageList_DragLeave(topControl.handle);", "-\t\tOS.ImageList_EndDrag();", "-\t\timagelist.dispose();", "-\t\ttopControl = null;", "+\tint result = COM.DRAGDROP_S_CANCEL;", "+\ttry {", "+\t\tresult = COM.DoDragDrop(iDataObject.getAddress(), iDropSource.getAddress(), operations, pdwEffect);", "+\t} finally {", "+\t\t// ensure that we don't leave transparent window around", "+\t\tif (hwndDrag != 0) {", "+\t\t\tOS.ImageList_DragLeave(hwndDrag);", "+\t\t\tOS.ImageList_EndDrag();", "+\t\t\timagelist.dispose();", "+\t\t\tif (hwndDrag != topControl.handle) OS.DestroyWindow(hwndDrag);", "+\t\t\thwndDrag = 0;", "+\t\t\ttopControl = null;", "+\t\t}", "+\t\tdisplay.setData(key, oldValue);", "-\tdisplay.setData(key, oldValue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "182d6bb15842004cac1333152a63d99c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/DragSource.java", "commitBeforeChange": "df12063c60592b4f4da5ddbab8d1379ea9ab591b", "commitAfterChange": "2c1c08eda487ee5680bf810a1f25bde3ad041839", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public DragSource(Control control, int style)", "signatureAfterChange": " public DragSource(Control control, int style)", "diff": ["-\t\t\t\t\tDragSource.this.drag(event);", "+\t\t\t\t\tif (event.widget instanceof Table || event.widget instanceof Tree) {", "+\t\t\t\t\t\tDragSource.this.dragOutlineViewStart(event);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tDragSource.this.drag(event);", "+\t\t\t\t\t}", "-\t", "-\t// Create a delegate, but then stuff a pointer back to this object so callbacks will have", "-\t// access to this object's data.", "-\tdragSourceDelegate = (SWTDragSourceDelegate)new SWTDragSourceDelegate().alloc().init();", "+", "+", "+\t// The dragSourceDelegate implements the pasteboard callback to provide the dragged data, so we always need", "+\t// to create it. NSDraggingSource methods are ignored in the table and tree case. ", "+\tdragSourceDelegate = (SWTDragSourceDelegate)new SWTDragSourceDelegate().alloc().init();", "+", "+\t// Tables and trees already implement dragging, so we need to override their drag methods instead of creating a dragging source.", "+\tif (control instanceof Tree || control instanceof Table) {", "+\t\tint /*long*/ cls = OS.object_getClass(control.view.id);", "+", "+\t\tif (cls == 0) {", "+\t\t\tDND.error(DND.ERROR_CANNOT_INIT_DRAG);", "+\t\t}", "+", "+\t\t// If we already added it, no need to do it again.", "+\t\tint /*long*/ procPtr = OS.class_getMethodImplementation(cls, OS.sel_draggingSourceOperationMaskForLocal_);", "+\t\tif (procPtr == proc3) return;", "+", "+\t\tint /*long*/ draggedImage_endedAt_operationProc = OS.draggedImage_endedAt_operation_CALLBACK(proc5);", "+", "+\t\t// Add the NSDraggingSource overrides.", "+\t\tOS.class_addMethod(cls, OS.sel_draggingSourceOperationMaskForLocal_, proc3, \"@:I\");", "+\t\tOS.class_addMethod(cls, OS.sel_draggedImage_beganAt_, proc4, \"@:@{NSPoint=ff}\");", "+\t\tOS.class_addMethod(cls, OS.sel_draggedImage_endedAt_operation_, draggedImage_endedAt_operationProc, \"@:@{NSPoint=ff}I\");", "+\t\tOS.class_addMethod(cls, OS.sel_ignoreModifierKeysWhileDragging, proc3, \"@:\");", "+\t\t", "+\t\t// Override to return the drag effect's image.", "+\t\tOS.class_addMethod(cls, OS.sel_dragImageForRowsWithIndexes_tableColumns_event_offset_, proc6, \"@:@@@^NSPoint\");", "+\t} ", "+"]}], "num": 35006}
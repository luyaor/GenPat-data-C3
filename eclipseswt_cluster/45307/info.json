{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9835f8c4bfe1972cdf44c6423e39146b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a6efbe08ddb5b713cfef94c71cb14d0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "907c4dd47a285571bf0d66e34d1a9323e15dd90b", "commitAfterChange": "e4b1a868ce731255239223c8ff6f43351c81a864", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 65, "signatureBeforeChange": " void onPaint(Event event)", "signatureAfterChange": " void onPaint(Event event)", "diff": ["+\tGC gc = event.gc;", "+\tFont gcFont = gc.getFont();", "+\tColor gcBackground = gc.getBackground();", "+\tColor gcForeground = gc.getForeground();", "+\t", "-//GC gc = event.gc;", "-\tGC gc = event.gc;", "+\t\tgc.setBackground(gcBackground);\t", "-\tdrawTabArea(event);", "-\tgc.setForeground(getForeground());", "-\tgc.setBackground(getBackground());\t", "+\tgc.setFont(gcFont);", "+\tgc.setForeground(gcForeground);", "+\tgc.setBackground(gcBackground);", "+\t", "+\tCTabFolderEvent e = new CTabFolderEvent(this);", "+\te.widget = this;", "+\te.time = event.time;", "+\te.gc = event.gc;", "+\te.doit = true;", "+\tfor (int i = 0; i < folderListeners.length; i++) {", "+\t\tfolderListeners[i].drawTabs(e);", "+\t}", "+\tif (isDisposed()) return;", "+\tif (e.doit) drawTabArea(event);", "+\t", "+\tgc.setFont(gcFont);", "+\tgc.setForeground(gcForeground);", "+\tgc.setBackground(gcBackground);\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e6e58a054806849b7eaa4884e0dc170", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JavadocBasher/org/eclipse/swt/tools/internal/JavadocBasher.java", "commitBeforeChange": "42e53738f376d59346fd1e67a96b510d76cf8b16", "commitAfterChange": "3262a158cb5d63abc8646e4dd6f9c0fb97c7a7ac", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \r \r \tvoid bashFile(final File source, final File target, File out)", "signatureAfterChange": "\r \r \r \tvoid bashFile(final File source, final File target, File out)", "diff": ["+\t\t\t\t\t\tcomments.remove(key);\r", "+\t\t\t\t\t\tcomments.remove(key);\r", "+\t\t\t\t\t\tcomments.remove(key);\r", "-\t\t\r", "+\t\t/* Rudimentary API consistency checker.\r", "+\t\t * This assumes that:\r", "+\t\t * a) the sourceSubdir (typically win32) API is correct\r", "+\t\t * b) all sourceSubdir API classes, methods and fields do have a comment\r", "+\t\t * c) names that are in the filter list are never API,\r", "+\t\t * \t\tor they are old API that is defined in the super on some platforms\r", "+\t\t */\r", "+\t\tif (comments.size() > 0) {\r", "+\t\t\tString [] filter = new String [] {\r", "+\t\t\t\t\"Color.win32_newDeviceint\",\r", "+\t\t\t\t\"Cursor.win32_newDeviceint\",\r", "+\t\t\t\t\"Device.hPalette\",\r", "+\t\t\t\t\"Font.win32_newDevicelong\",\r", "+\t\t\t\t\"FontData.data\",\r", "+\t\t\t\t\"FontData.win32_newLOGFONTfloat\",\r", "+\t\t\t\t\"FontMetrics.handle\",\r", "+\t\t\t\t\"FontMetrics.win32_newTEXTMETRIC\",\r", "+\t\t\t\t\"GC.win32_newlongGCData\",\r", "+\t\t\t\t\"GC.win32_newDrawableGCData\",\r", "+\t\t\t\t\"Image.win32_newDeviceintlong\",\r", "+\t\t\t\t\"Pattern.handle\",\r", "+\t\t\t\t\"Region.win32_newDeviceint\",\r", "+\t\t\t\t\"Control.handle\",\r", "+\t\t\t\t\"Display.getSystemFont\",\r", "+\t\t\t\t\"Display.msg\",\r", "+\t\t\t\t\"Menu.handle\",\r", "+\t\t\t\t\"Shell.win32_newDisplaylong\",\t\r", "+\t\t\t\t\"Accessible.internal_WM_GETOBJECTlonglong\",\r", "+\t\t\t\t\"TransferData.result\",\r", "+\t\t\t\t\"TransferData.stgmedium\",\r", "+\t\t\t\t\"TransferData.pIDataObject\",\r", "+\t\t\t\t\"TransferData.formatetc\",\r", "+\t\t\t\t\"Printer.handle\",\r", "+\t\t\t\t\"Printer.checkDevice\",\t\r", "+\t\t\t\t\"TableDragSourceEffect.dragFinishedDragSourceEvent\",\r", "+\t\t\t\t\"TableDragSourceEffect.dragStartDragSourceEvent\",\r", "+\t\t\t\t\"TableDropTargetEffect.dragOverDropTargetEvent\",\r", "+\t\t\t\t\"TableDropTargetEffect.dragEnterDropTargetEvent\",\r", "+\t\t\t\t\"TableDropTargetEffect.dragLeaveDropTargetEvent\",\r", "+\t\t\t\t\"Transfer.validateObject\",\r", "+\t\t\t\t\"TransferData.result\",\r", "+\t\t\t\t\"TransferData.stgmedium\",\r", "+\t\t\t\t\"TransferData.pIDataObject\",\r", "+\t\t\t\t\"TransferData.formatetc\",\r", "+\t\t\t\t\"TreeDragSourceEffect.dragFinishedDragSourceEvent\",\r", "+\t\t\t\t\"TreeDragSourceEffect.dragStartDragSourceEvent\",\r", "+\t\t\t\t\"TreeDropTargetEffect.dragLeaveDropTargetEvent\",\r", "+\t\t\t\t\"TreeDropTargetEffect.dragEnterDropTargetEvent\",\r", "+\t\t\t\t\"TreeDropTargetEffect.dragOverDropTargetEvent\",\r", "+\t\t\t\t\"Printer.createDeviceData\",\r", "+\t\t\t\t\"Printer.internal_dispose_GClongGCData\",\r", "+\t\t\t\t\"Printer.release\",\r", "+\t\t\t\t\"Printer.destroy\",\r", "+\t\t\t\t\"Image.handle\",\r", "+\t\t\t\t\"Display.getClientArea\",\r", "+\t\t\t\t\"TreeItem.handle\",\r", "+\t\t\t};\r", "+\t\t\tfor (Iterator iterator = comments.keySet().iterator(); iterator.hasNext();) {\r", "+\t\t\t\tString name = (String) iterator.next();\r", "+\t\t\t\tif (((String) comments.get(name)).length() > 0){\r", "+\t\t\t\t\tint i = 0;\r", "+\t\t\t\t\tfor (i = 0; i < filter.length; i++) {\r", "+\t\t\t\t\t\tif (name.equals(filter[i])) break;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif (i >= filter.length) {\r", "+\t\t\t\t\t\tSystem.err.println(\"***No target for \" + name);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r"]}], "num": 45307}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a9886c1bc63a20a9768cd0b36b4f6c9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "385f9bc8af583941eefbecad3f55eba4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "845a28c229cc34b2e7400df12cf071dc7a41d0f2", "commitAfterChange": "5a902dea6af2bf530917df6db13cb86bc207413e", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r int createDIB(int width, int height)", "signatureAfterChange": "\r \r int createDIB(int width, int height)", "diff": ["-\tint depth = 32;\r", "-\tbyte[]\tbmi = new byte[40 + (OS.IsWinCE ? 12 : 0)];\r", "-\t\t\r", "-\t/* DWORD biSize = 40 */\r", "-\tbmi[0] = 40; bmi[1] = 0; bmi[2] = 0; bmi[3] = 0;\r", "-\t/* LONG biWidth = width */\r", "-\tbmi[4] = (byte)(width & 0xFF);\r", "-\tbmi[5] = (byte)((width >> 8) & 0xFF);\r", "-\tbmi[6] = (byte)((width >> 16) & 0xFF);\r", "-\tbmi[7] = (byte)((width >> 24) & 0xFF);\r", "-\t/* LONG biHeight = height */\r", "-\tbmi[8] = (byte)(-height & 0xFF);\r", "-\tbmi[9] = (byte)((-height >> 8) & 0xFF);\r", "-\tbmi[10] = (byte)((-height >> 16) & 0xFF);\r", "-\tbmi[11] = (byte)((-height >> 24) & 0xFF);\r", "-\t/* WORD biPlanes = 1 */\r", "-\tbmi[12] = 1;\r", "-\tbmi[13] = 0;\r", "-\t/* WORD biBitCount = depth */\r", "-\tbmi[14] = (byte)(depth & 0xFF);\r", "-\tbmi[15] = (byte)((depth >> 8) & 0xFF);\r", "-\tif (OS.IsWinCE) {\r", "-\t\t/* DWORD biCompression = BI_BITFIELDS = 3 */\r", "-\t\tbmi[16] = 3; bmi[17] = bmi[18] = bmi[19] = 0;\r", "-\t} else {\r", "-\t\t/* DWORD biCompression = BI_RGB = 0 */\r", "-\t\tbmi[16] = bmi[17] = bmi[18] = bmi[19] = 0;\r", "-\t}\r", "-\t/* DWORD biSizeImage = 0 (default) */\r", "-\tbmi[20] = bmi[21] = bmi[22] = bmi[23] = 0;\r", "-\t/* LONG biXPelsPerMeter = 0 */\r", "-\tbmi[24] = bmi[25] = bmi[26] = bmi[27] = 0;\r", "-\t/* LONG biYPelsPerMeter = 0 */\r", "-\tbmi[28] = bmi[29] = bmi[30] = bmi[31] = 0;\r", "-\t/* DWORD biClrUsed */\r", "-\tbmi[32] = bmi[33] = bmi[34] = bmi[35] = 0;\r", "-\t/* DWORD biClrImportant = 0 */\r", "-\tbmi[36] = bmi[37] = bmi[38] = bmi[39] = 0;\r", "+\tshort depth = 32;\r", "+\r", "+\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER();\r", "+\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;\r", "+\tbmiHeader.biWidth = width;\r", "+\tbmiHeader.biHeight = -height;\r", "+\tbmiHeader.biPlanes = 1;\r", "+\tbmiHeader.biBitCount = depth;\r", "+\tif (OS.IsWinCE) bmiHeader.biCompression = OS.BI_BITFIELDS;\r", "+\telse bmiHeader.biCompression = OS.BI_RGB;\r", "+\tbyte[]\tbmi = new byte[BITMAPINFOHEADER.sizeof + (OS.IsWinCE ? 12 : 0)];\r", "+\tOS.MoveMemory(bmi, bmiHeader, BITMAPINFOHEADER.sizeof);\r", "-\t\tbmi[40] = (byte)((redMask & 0xFF000000) >> 24);\r", "-\t\tbmi[41] = (byte)((redMask & 0xFF0000) >> 16);\r", "-\t\tbmi[42] = (byte)((redMask & 0xFF00) >> 8);\r", "-\t\tbmi[43] = (byte)((redMask & 0xFF) >> 0);\r", "-\t\tbmi[44] = (byte)((greenMask & 0xFF000000) >> 24);\r", "-\t\tbmi[45] = (byte)((greenMask & 0xFF0000) >> 16);\r", "-\t\tbmi[46] = (byte)((greenMask & 0xFF00) >> 8);\r", "-\t\tbmi[47] = (byte)((greenMask & 0xFF) >> 0);\r", "-\t\tbmi[48] = (byte)((blueMask & 0xFF000000) >> 24);\r", "-\t\tbmi[49] = (byte)((blueMask & 0xFF0000) >> 16);\r", "-\t\tbmi[50] = (byte)((blueMask & 0xFF00) >> 8);\r", "-\t\tbmi[51] = (byte)((blueMask & 0xFF) >> 0);\r", "+\t\tint offset = BITMAPINFOHEADER.sizeof;\r", "+\t\tbmi[offset] = (byte)((redMask & 0xFF000000) >> 24);\r", "+\t\tbmi[offset + 1] = (byte)((redMask & 0xFF0000) >> 16);\r", "+\t\tbmi[offset + 2] = (byte)((redMask & 0xFF00) >> 8);\r", "+\t\tbmi[offset + 3] = (byte)((redMask & 0xFF) >> 0);\r", "+\t\tbmi[offset + 4] = (byte)((greenMask & 0xFF000000) >> 24);\r", "+\t\tbmi[offset + 5] = (byte)((greenMask & 0xFF0000) >> 16);\r", "+\t\tbmi[offset + 6] = (byte)((greenMask & 0xFF00) >> 8);\r", "+\t\tbmi[offset + 7] = (byte)((greenMask & 0xFF) >> 0);\r", "+\t\tbmi[offset + 8] = (byte)((blueMask & 0xFF000000) >> 24);\r", "+\t\tbmi[offset + 9] = (byte)((blueMask & 0xFF0000) >> 16);\r", "+\t\tbmi[offset + 10] = (byte)((blueMask & 0xFF00) >> 8);\r", "+\t\tbmi[offset + 11] = (byte)((blueMask & 0xFF) >> 0);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b415d01a54210e7ba335c177c76b9d5f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ImageList.java", "commitBeforeChange": "1acd89a2d1e085725362a748b0102b8318356ef1", "commitAfterChange": "600117323003db9ea522ed0baf12ee909172c3dc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  int copyBitmap (int hImage, int width, int height)", "signatureAfterChange": "  int copyBitmap (int hImage, int width, int height)", "diff": ["-\tint hBitmap = OS.CreateCompatibleBitmap (hDC, width, height);", "+\t/*", "+\t* Feature in Windows.  If a bitmap has a 32-bit depth and any", "+\t* pixel has an alpha value different than zero, common controls", "+\t* version 6.0 assumes that the bitmap should be alpha blended.", "+\t* AlphaBlend() composes the alpha channel of a destination 32-bit", "+\t* depth image with the alpha channel of the source image. This", "+\t* may cause opaque images to draw transparently.  The fix is", "+\t* remove the alpha channel of opaque images by down sampling", "+\t* it to 24-bit depth.", "+\t*/", "+\tint hBitmap;", "+\tif (bm.bmBitsPixel == 32 && OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "+\t\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER();", "+\t\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;", "+\t\tbmiHeader.biWidth = width;", "+\t\tbmiHeader.biHeight = -height;", "+\t\tbmiHeader.biPlanes = 1;", "+\t\tbmiHeader.biBitCount = (short)24;", "+\t\tif (OS.IsWinCE) bmiHeader.biCompression = OS.BI_BITFIELDS;", "+\t\telse bmiHeader.biCompression = OS.BI_RGB;", "+\t\tbyte[] bmi = new byte[BITMAPINFOHEADER.sizeof + (OS.IsWinCE ? 12 : 0)];", "+\t\tOS.MoveMemory(bmi, bmiHeader, BITMAPINFOHEADER.sizeof);", "+\t\t/* Set the rgb colors into the bitmap info */", "+\t\tif (OS.IsWinCE) {", "+\t\t\tint redMask = 0xFF00;", "+\t\t\tint greenMask = 0xFF0000;", "+\t\t\tint blueMask = 0xFF000000;", "+\t\t\t/* big endian */", "+\t\t\tint offset = BITMAPINFOHEADER.sizeof;", "+\t\t\tbmi[offset] = (byte)((redMask & 0xFF000000) >> 24);", "+\t\t\tbmi[offset + 1] = (byte)((redMask & 0xFF0000) >> 16);", "+\t\t\tbmi[offset + 2] = (byte)((redMask & 0xFF00) >> 8);", "+\t\t\tbmi[offset + 3] = (byte)((redMask & 0xFF) >> 0);", "+\t\t\tbmi[offset + 4] = (byte)((greenMask & 0xFF000000) >> 24);", "+\t\t\tbmi[offset + 5] = (byte)((greenMask & 0xFF0000) >> 16);", "+\t\t\tbmi[offset + 6] = (byte)((greenMask & 0xFF00) >> 8);", "+\t\t\tbmi[offset + 7] = (byte)((greenMask & 0xFF) >> 0);", "+\t\t\tbmi[offset + 8] = (byte)((blueMask & 0xFF000000) >> 24);", "+\t\t\tbmi[offset + 9] = (byte)((blueMask & 0xFF0000) >> 16);", "+\t\t\tbmi[offset + 10] = (byte)((blueMask & 0xFF00) >> 8);", "+\t\t\tbmi[offset + 11] = (byte)((blueMask & 0xFF) >> 0);", "+\t\t}", "+\t\tint[] pBits = new int[1];", "+\t\thBitmap = OS.CreateDIBSection(0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "+\t} else {", "+\t\thBitmap = OS.CreateCompatibleBitmap (hDC, width, height);", "+\t}"]}], "num": 21356}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3008fbab9ea8dd92358fe30a273d5c1", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9424456b1e6f9ba9d794f47e1467535d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/PromptService2.java", "commitBeforeChange": "8093e4de11a4b3e09a48b5b00387350ee1d8feab", "commitAfterChange": "13c317ac82402adf05ac5fa6773736f7f5a76841", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  int PromptAuth(int aParent, int aChannel, int level, int authInfo, int checkboxLabel, int checkboxValue, int _retval)", "signatureAfterChange": "  int PromptAuth(int aParent, int aChannel, int level, int authInfo, int checkboxLabel, int checkboxValue, int _retval)", "diff": ["+\tnsIAuthInformation auth = new nsIAuthInformation (authInfo);", "+", "+\tnsIChannel channel = new nsIChannel (aChannel);", "+\tint /*long*/[] uri = new int /*long*/[1];", "+\tint rc = channel.GetURI (uri);", "+\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\tif (uri[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIURI nsURI = new nsIURI (uri[0]);", "+\tint /*long*/ host = XPCOM.nsEmbedCString_new ();", "+\trc = nsURI.GetHost (host);", "+\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\tint length = XPCOM.nsEmbedCString_Length (host);", "+\tint /*long*/ buffer = XPCOM.nsEmbedCString_get (host);", "+\tbyte[] bytes = new byte[length];", "+\tXPCOM.memmove (bytes, buffer, length);", "+\tString hostString = new String (bytes);", "+\tXPCOM.nsEmbedCString_delete (host);", "+", "+\tint /*long*/ spec = XPCOM.nsEmbedCString_new ();", "+\trc = nsURI.GetSpec (spec);", "+\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\tlength = XPCOM.nsEmbedCString_Length (spec);", "+\tbuffer = XPCOM.nsEmbedCString_get (spec);", "+\tbytes = new byte[length];", "+\tXPCOM.memmove (bytes, buffer, length);", "+\tString urlString = new String (bytes);", "+\tXPCOM.nsEmbedCString_delete (spec);", "+\tnsURI.Release ();", "+", "+\tif (browser != null) {", "+\t\tMozilla mozilla = (Mozilla)browser.webBrowser;", "+\t\t/*", "+\t\t * Do not invoke the listeners if this challenge has been failed too many", "+\t\t * times because a listener is likely giving incorrect credentials repeatedly", "+\t\t * and will do so indefinitely.", "+\t\t */", "+\t\tif (mozilla.authCount++ < 3) {", "+\t\t\tfor (int i = 0; i < mozilla.authenticationListeners.length; i++) {", "+\t\t\t\tAuthenticationEvent event = new AuthenticationEvent (browser);", "+\t\t\t\tevent.location = urlString;", "+\t\t\t\tmozilla.authenticationListeners[i].authenticate (event);", "+\t\t\t\tif (!event.doit) {", "+\t\t\t\t\tXPCOM.memmove (_retval, new int[] {0}, 4);\t/* PRBool */", "+\t\t\t\t\treturn XPCOM.NS_OK;", "+\t\t\t\t}", "+\t\t\t\tif (event.user != null && event.password != null) {", "+\t\t\t\t\tnsEmbedString string = new nsEmbedString (event.user);", "+\t\t\t\t\trc = auth.SetUsername (string.getAddress ());", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\t\t\t\t\tstring.dispose ();", "+\t\t\t\t\tstring = new nsEmbedString (event.password);", "+\t\t\t\t\trc = auth.SetPassword (string.getAddress ());", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\t\t\t\t\tstring.dispose ();", "+\t\t\t\t\tXPCOM.memmove (_retval, new int[] {1}, 4);\t/* PRBool */", "+\t\t\t\t\treturn XPCOM.NS_OK;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+", "+\t/* no listener handled the challenge, so show an authentication dialog */", "+", "-\t\tint length = XPCOM.strlen_PRUnichar (checkboxLabel);", "+\t\tlength = XPCOM.strlen_PRUnichar (checkboxLabel);", "-\tnsIAuthInformation auth = new nsIAuthInformation (authInfo);", "-", "-\tint rc = auth.GetUsername (ptr);", "+\trc = auth.GetUsername (ptr);", "-\tint length = XPCOM.nsEmbedString_Length (ptr);", "-\tint /*long*/ buffer = XPCOM.nsEmbedString_get (ptr);", "+\tlength = XPCOM.nsEmbedString_Length (ptr);", "+\tbuffer = XPCOM.nsEmbedString_get (ptr);", "-\tnsIChannel channel = new nsIChannel (aChannel);", "-\tint /*long*/[] uri = new int /*long*/[1];", "-\trc = channel.GetURI (uri);", "-\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "-\tif (uri[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "-", "-\tnsIURI nsURI = new nsIURI (uri[0]);", "-\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new ();", "-\trc = nsURI.GetHost (aSpec);", "-\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "-\tlength = XPCOM.nsEmbedCString_Length (aSpec);", "-\tbuffer = XPCOM.nsEmbedCString_get (aSpec);", "-\tbyte[] bytes = new byte[length];", "-\tXPCOM.memmove (bytes, buffer, length);", "-\tXPCOM.nsEmbedCString_delete (aSpec);", "-\tString host = new String (bytes);", "-\tnsURI.Release ();", "-", "-\tif (realm.length () > 0 && host.length () > 0) {", "-\t\tmessage = Compatibility.getMessage (\"SWT_Enter_Username_and_Password\", new String[] {realm, host}); //$NON-NLS-1$", "+\tif (realm.length () > 0 && hostString.length () > 0) {", "+\t\tmessage = Compatibility.getMessage (\"SWT_Enter_Username_and_Password\", new String[] {realm, hostString}); //$NON-NLS-1$"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "090616b4b666f77710b505a8aa02c7b2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/PromptService2.java", "commitBeforeChange": "0fc40a1b42db186715b9e463f0d06c86543ea114", "commitAfterChange": "96316cf49d0e892bc89eb57b2ec8956e4f218465", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  int PromptAuth(int aParent, int aChannel, int level, int authInfo, int checkboxLabel, int checkboxValue, int _retval)", "signatureAfterChange": "  int PromptAuth(int aParent, int aChannel, int level, int authInfo, int checkboxLabel, int checkboxValue, int _retval)", "diff": ["-\tnsIChannel channel = new nsIChannel (aChannel);", "-\tint /*long*/[] uri = new int /*long*/[1];", "-\tint rc = channel.GetURI (uri);", "-\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "-\tif (uri[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "-", "-\tnsIURI nsURI = new nsIURI (uri[0]);", "-\tint /*long*/ host = XPCOM.nsEmbedCString_new ();", "-\trc = nsURI.GetHost (host);", "-\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "-\tint length = XPCOM.nsEmbedCString_Length (host);", "-\tint /*long*/ buffer = XPCOM.nsEmbedCString_get (host);", "-\tbyte[] bytes = new byte[length];", "-\tXPCOM.memmove (bytes, buffer, length);", "-\tString hostString = new String (bytes);", "-\tXPCOM.nsEmbedCString_delete (host);", "-", "-\tint /*long*/ spec = XPCOM.nsEmbedCString_new ();", "-\trc = nsURI.GetSpec (spec);", "-\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "-\tlength = XPCOM.nsEmbedCString_Length (spec);", "-\tbuffer = XPCOM.nsEmbedCString_get (spec);", "-\tbytes = new byte[length];", "-\tXPCOM.memmove (bytes, buffer, length);", "-\tString urlString = new String (bytes);", "-\tXPCOM.nsEmbedCString_delete (spec);", "-\tnsURI.Release ();", "-", "-\t\t\t\tevent.location = urlString;", "+\t\t\t\tevent.location = mozilla.lastNavigateURL;", "-\t\t\t\t\trc = auth.SetUsername (string.getAddress ());", "+\t\t\t\t\tint rc = auth.SetUsername (string.getAddress ());", "-\t\tlength = XPCOM.strlen_PRUnichar (checkboxLabel);", "+\t\tint length = XPCOM.strlen_PRUnichar (checkboxLabel);", "-\trc = auth.GetUsername (ptr);", "+\tint rc = auth.GetUsername (ptr);", "-\tlength = XPCOM.nsEmbedString_Length (ptr);", "-\tbuffer = XPCOM.nsEmbedString_get (ptr);", "+\tint length = XPCOM.nsEmbedString_Length (ptr);", "+\tint /*long*/ buffer = XPCOM.nsEmbedString_get (ptr);", "+\tnsIChannel channel = new nsIChannel (aChannel);", "+\tint /*long*/[] uri = new int /*long*/[1];", "+\trc = channel.GetURI (uri);", "+\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\tif (uri[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIURI nsURI = new nsIURI (uri[0]);", "+\tint /*long*/ host = XPCOM.nsEmbedCString_new ();", "+\trc = nsURI.GetHost (host);", "+\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\tlength = XPCOM.nsEmbedCString_Length (host);", "+\tbuffer = XPCOM.nsEmbedCString_get (host);", "+\tbyte[] bytes = new byte[length];", "+\tXPCOM.memmove (bytes, buffer, length);", "+\tString hostString = new String (bytes);", "+\tXPCOM.nsEmbedCString_delete (host);", "+\tnsURI.Release ();", "+"]}], "num": 56947}
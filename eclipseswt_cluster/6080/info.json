{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "960326ad0a9ffb2c51687c8ce93962a1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70b4d9e47dfc8a9706805b5a278e7e85", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/coolbar/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "20b0eb441aada9604976583a80e3bdef4aa3362d", "commitAfterChange": "7a19591ebf7fe6141ff36a49f3e5c931d7f1c3df", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " int layoutItems ()", "signatureAfterChange": " int layoutItems ()", "diff": ["-\tint y = 0, maxWidth = 0, width = getSize().x;", "+\tint y = 0, width = getSize().x;", "+\twrapItems(width);", "-\t\tfor (int i = 0; i < items[row].length; i++) {", "+\t\tfor (int i = 0; i < count; i++) {", "-\t\t\tif (available < 0 && (width > item.internalGetMinimumWidth())) {", "-\t\t\t\t/* push the next items into the next row */", "-\t\t\t\tavailable += item.internalGetMinimumWidth();", "-\t\t\t\tint amount = items[row].length - i;\t", "-\t\t\t\tCoolItem[] nextRow;", "-\t\t\t\tif (row + 1 == items.length) { /* Adding a new row */", "-\t\t\t\t\tnextRow = new CoolItem [amount];", "-\t\t\t\t\tCoolItem[][] newItems = new CoolItem [items.length + 1][];", "-\t\t\t\t\tSystem.arraycopy(items, 0, newItems, 0, items.length);", "-\t\t\t\t\titems = newItems;", "-\t\t\t\t} else {", "-\t\t\t\t\tnextRow = new CoolItem [amount + items [row + 1].length];", "-\t\t\t\t\tSystem.arraycopy(items[row+1], 0, nextRow, amount, items [row + 1].length);", "-\t\t\t\t}", "-\t\t\t\tSystem.arraycopy(items[row], i, nextRow, 0, amount);", "-\t\t\t\titems [row + 1] = nextRow;", "-\t\t\t\tCoolItem[] thisRow = new CoolItem[i];", "-\t\t\t\tSystem.arraycopy(items[row], 0, thisRow, 0, i);", "-\t\t\t\titems[row] = thisRow;", "-\t\t\t\tbreak;\t\t\t", "-\t\t\t}", "-\t", "-\t\tfor (int i = 0; i < items[row].length; i++) {", "+\t\tfor (int i = 0; i < count; i++) {", "-\t\t\t\t}", "-\t\t\t\telse if (oldBounds.height != newBounds.height) {", "+\t\t\t\t} else if (oldBounds.height != newBounds.height) {", "-\t\t\t\t}", "-\t\t\t\telse if (oldBounds.x != newBounds.x) {", "+\t\t\t\t} else if (oldBounds.x != newBounds.x) {", "-\t\tmaxWidth = Math.max(maxWidth, x);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eb5e126cb89317030a35606fef02023", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/coolbar/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "c094648ffc8a72b873846910c5c303ece3eabf93", "commitAfterChange": "89f9ee47fc1e876611325e2d5a3ec0b4dfc233e1", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "\r int layoutItems ()", "signatureAfterChange": "\r int layoutItems ()", "diff": ["-\t\tint available = width - count * CoolItem.MINIMUM_WIDTH;\r", "-\t\tif (available < 0) available = count * CoolItem.MINIMUM_WIDTH;\r", "-\t\t/* determine the height of the row */\r", "+\t\t/* determine the height and the available width for the row */\r", "+\t\tint available = width;\r", "+\t\t\tavailable -= item.internalGetMinimumWidth();\t\r", "+\t\t\tif (available < 0 && (width > item.internalGetMinimumWidth())) {\r", "+\t\t\t\t/* push the next items into the next row */\r", "+\t\t\t\tavailable += item.internalGetMinimumWidth();\r", "+\t\t\t\tint amount = items[row].length - i;\t\r", "+\t\t\t\tCoolItem[] nextRow;\r", "+\t\t\t\tif (row + 1 == items.length) { /* Adding a new row */\r", "+\t\t\t\t\tnextRow = new CoolItem [amount];\r", "+\t\t\t\t\tCoolItem[][] newItems = new CoolItem [items.length + 1][];\r", "+\t\t\t\t\tSystem.arraycopy(items, 0, newItems, 0, items.length);\r", "+\t\t\t\t\titems = newItems;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tnextRow = new CoolItem [amount + items [row + 1].length];\r", "+\t\t\t\t\tSystem.arraycopy(items[row+1], 0, nextRow, amount, items [row + 1].length);\r", "+\t\t\t\t}\r", "+\t\t\t\tSystem.arraycopy(items[row], i, nextRow, 0, amount);\r", "+\t\t\t\titems [row + 1] = nextRow;\r", "+\t\t\t\tCoolItem[] thisRow = new CoolItem[i];\r", "+\t\t\t\tSystem.arraycopy(items[row], 0, thisRow, 0, i);\r", "+\t\t\t\titems[row] = thisRow;\r", "+\t\t\t\tbreak;\t\t\t\r", "+\t\t\t}\r", "+\t\r", "-\t\tfor (int i = 0; i < count; i++) {\r", "+\t\tfor (int i = 0; i < items[row].length; i++) {\r", "-\t\t\tint newWidth = available + CoolItem.MINIMUM_WIDTH;\r", "+\t\t\tint newWidth = available + child.internalGetMinimumWidth();\r", "-\t\t\t\tavailable -= (newWidth - CoolItem.MINIMUM_WIDTH);\r", "+\t\t\t\tavailable -= (newWidth - child.internalGetMinimumWidth());\r"]}], "num": 6080}
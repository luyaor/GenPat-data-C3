{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ed628daa0f38c9c817924a5d2e93d16", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e98dc91311c5485b00f60868904f96ee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "cffff79d915fb2c4476fba4c1c1103774a10b35e", "commitAfterChange": "3875e3ba1aa64e10bf5a0c495760e14e055a1a52", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "\r \r void setBounds (int x, int y, int width, int height, int flags)", "signatureAfterChange": "\r \r void setBounds (int x, int y, int width, int height, int flags)", "diff": ["-\t* Feature in Windows. If the combo box has the CBS_DROPDOWN\r", "+\t* Feature in Windows.  If the combo box has the CBS_DROPDOWN\r", "-\t\tsuper.setBounds (x, y, width, textHeight + 6 + (itemHeight * 5) + 2, flags);\r", "+\t\theight = textHeight + 6 + (itemHeight * 5) + 2;\r", "+\t\t/*\r", "+\t\t* Feature in Windows.  When a drop down combo box is resized,\r", "+\t\t* the combo box resizes height of the text field and uses the\r", "+\t\t* height provided in SetWindowPos () to determine the height\r", "+\t\t* of the drop down list.  For some reason, the combo box redraws\r", "+\t\t* the whole area, not just the text field.  The fix is to clear\r", "+\t\t* the SWP_NOSIZE bits when the height of text field and the drop\r", "+\t\t* down list is the same as the requested height.\r", "+\t\t*/\r", "+\t\tRECT rect = new RECT ();\r", "+\t\tif (OS.SendMessage (handle, OS.CB_GETDROPPEDCONTROLRECT, 0, rect) != 0) {\r", "+\t\t\tint oldWidth = rect.right - rect.left, oldHeight = rect.bottom - rect.top;\r", "+\t\t\tif (oldWidth == width && oldHeight == height) flags |= OS.SWP_NOSIZE;\r", "+\t\t}\r", "+\t\tflags |= OS.SWP_NOZORDER | OS.SWP_DRAWFRAME | OS.SWP_NOACTIVATE;\r", "+\t\tOS.SetWindowPos (handle, 0, x, y, width, height, flags);\r", "-\tif ((rect.right - rect.left) != width || (rect.bottom - rect.top) != height) {\r", "+\tint oldWidth = rect.right - rect.left, oldHeight = rect.bottom - rect.top;\r", "+\tif (oldWidth != width || oldHeight != height) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10e3aba80b6e8e88c4dca5c850cab926", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "d26d3b0e6590420c31062e2d65cb92b8da477deb", "commitAfterChange": "159858a59c5cc164ee72b85656c71d773b71a855", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " \t \tprivate void drawFrame(Object callData)", "signatureAfterChange": " \t \tprivate void drawFrame(Object callData)", "diff": ["-\t\t\t\tbounds.inset(FOCUS_BORDER, FOCUS_BORDER, FOCUS_BORDER, FOCUS_BORDER);", "-\t\t\t\tOS.DrawThemeEditTextFrame(bounds.getData(), OS.kThemeStateActive);", "+\t\t\t\tint m= FOCUS_BORDER;", "+\t\t\t\tbounds.inset(m, m, m, m+1);", "+\t\t\t\t", "+\t\t\t\tMacRect fbounds= new MacRect();", "+\t\t\t\tOS.GetControlBounds(handle, fbounds.getData());", "+\t\t\t\tfbounds.setLocation(0, 0);", "+\t\t\t\tint fm= FOCUS_BORDER;", "+\t\t\t\tfbounds.inset(fm, fm+1, fm, fm+1);", "+\t\t\t\t", "+\t\t\t\t", "-\t\t\t\t\tOS.DrawThemeFocusRect(bounds.getData(), false);", "-\t\t\t\t\tif (getDisplay().getFocusControl() == this)", "-\t\t\t\t\t\tOS.DrawThemeFocusRect(bounds.getData(), true);", "+\t\t\t\t\tif (getDisplay().getFocusControl() == this) {", "+\t\t\t\t\t\tOS.DrawThemeEditTextFrame(bounds.getData(), OS.kThemeStateActive);", "+\t\t\t\t\t\tOS.DrawThemeFocusRect(fbounds.getData(), true);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tOS.DrawThemeFocusRect(fbounds.getData(), false);", "+\t\t\t\t\t\tOS.DrawThemeEditTextFrame(bounds.getData(), OS.kThemeStateActive);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tOS.DrawThemeEditTextFrame(bounds.getData(), OS.kThemeStateActive);", "+\t\t\t\t", "+\t\tshowBeginning();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ea083ca0b7da896cddbd508428597db", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "55be32292a21959d2532f53a8eeea358f649fd32", "commitAfterChange": "c08ddd8028b85e1a566ab85b5ee5b04a964b5117", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " public void getClipping (Region region)", "signatureAfterChange": " public void getClipping (Region region)", "diff": ["-\tOS.GetWindowRgn (handle, region.handle);", "+\tint hRegion = region.handle;", "+\tOS.GetWindowRgn (handle, hRegion);", "+\tRECT rect = new RECT ();", "+\tif (OS.GetRgnBox  (hRegion, rect) == OS.NULLREGION) {", "+\t\tOS.GetWindowRect (handle, rect);", "+\t\tint rectRgn = OS.CreateRectRgn (0, 0, rect.right - rect.left, rect.bottom - rect.top);", "+\t\tOS.CombineRgn (hRegion, hRegion, hRegion, OS.RGN_DIFF);", "+\t\tOS.CombineRgn (hRegion, hRegion, rectRgn, OS.RGN_OR);", "+\t\tOS.DeleteObject (rectRgn);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3582321df0f57fd3756bc480b16f9f81", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Caret.java", "commitBeforeChange": "1215228ca28cd877225ea2d6d4c5dd6eb8a8d47a", "commitAfterChange": "437b26428f10a35a326ef6b319e71308ad9cdb90", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  boolean drawCaret ()", "signatureAfterChange": "  boolean drawCaret ()", "diff": ["-\tOS.PgSetRegion (OS.PtWidgetRid (handle));", "+\tPhPoint_t pt = new PhPoint_t ();  ", "+\tPhRect_t tran_rect = new PhRect_t();    ", "+\tint disjoint = OS.PtFindDisjoint( handle );", "+\tif( disjoint != 0 )", "+\t\tOS.PgSetRegion( OS.PtWidgetRid( disjoint ) );", "+\tOS.PtWidgetExtent(handle, tran_rect) ;", "+\tOS.PtWidgetOffset(handle, pt);", "+\tpt.x += tran_rect.ul_x;", "+\tpt.y += tran_rect.ul_y;", "+\tOS.PgSetTranslation(pt,0);", "+\tint clip = OS.PtGetVisibleTiles(handle);", "+\tif ( clip > 0 )", "+\t\tOS.PgSetMultiClipTiles(clip);", "+\tOS.PhFreeTiles(clip);"]}], "num": 11790}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c50aa9ae43e1321e024de7be51943934", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f83a6ad5e22e0f80d5c64ca30393b20", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "ec0fd72dfafa3580c8b3685a082cc525b5e48635", "commitAfterChange": "800f37e4ba6af1142a8f20dd9d1fe1dd5f3a77b9", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tint atkText_get_text_at_offset (int offset, int boundary_type, int start_offset, int end_offset)", "signatureAfterChange": "  \tint atkText_get_text_at_offset (int offset, int boundary_type, int start_offset, int end_offset)", "diff": ["-\t\t// TODO according to new gnome doc this determined text wrong", "-\t\tString text = getText ();", "-\t\tif (text != null) {", "-\t\t\tint startBounds = offset;", "-\t\t\tString beforeText = text.substring (0, offset);", "-\t\t\tint endBounds = offset;", "-\t\t\tString afterText = text.substring (offset);", "-\t\t\tswitch (boundary_type) {", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_CHAR: {", "-\t\t\t\t\tif (afterText.length () > 0) endBounds++;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_START:", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_END: {", "-\t\t\t\t\tstartBounds = beforeText.lastIndexOf ('\\n') + 1; // TODO use platform line delimiter?", "-\t\t\t\t\tint newlineIndex = afterText.indexOf ('\\n');\t//TODO use platform line delimiter?", "-\t\t\t\t\tif (newlineIndex == -1) newlineIndex = afterText.length ();", "-\t\t\t\t\tendBounds += newlineIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_START:", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_END: {", "-\t\t\t\t\t// TODO ask the client for eligible separators?", "-\t\t\t\t\tint separatorIndex = 0;", "-\t\t\t\t\tseparatorIndex = Math.max (separatorIndex, beforeText.lastIndexOf ('.') + 1);", "-\t\t\t\t\tseparatorIndex = Math.max (separatorIndex, beforeText.lastIndexOf ('?') + 1);", "-\t\t\t\t\tseparatorIndex = Math.max (separatorIndex, beforeText.lastIndexOf ('!') + 1);", "-\t\t\t\t\tstartBounds = separatorIndex;", "-\t\t\t\t\tseparatorIndex = afterText.length ();", "-\t\t\t\t\tint periodIndex = afterText.indexOf ('.');", "-\t\t\t\t\tif (periodIndex != -1) separatorIndex = Math.min (separatorIndex, periodIndex + 1);", "-\t\t\t\t\tint questionIndex = afterText.indexOf ('?');", "-\t\t\t\t\tif (questionIndex != -1) separatorIndex = Math.min (separatorIndex, questionIndex + 1);", "-\t\t\t\t\tint exclaimationIndex = afterText.indexOf ('!');", "-\t\t\t\t\tif (exclaimationIndex != -1) separatorIndex = Math.min (separatorIndex, exclaimationIndex + 1);", "-\t\t\t\t\tendBounds += separatorIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_START:", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_END: {", "-\t\t\t\t\t// TODO ask the client for eligible separators?", "-\t\t\t\t\tint separatorIndex = 0;", "-\t\t\t\t\tseparatorIndex = Math.max (separatorIndex, beforeText.lastIndexOf (' ') + 1);", "-\t\t\t\t\tseparatorIndex = Math.max (separatorIndex, beforeText.lastIndexOf ('\\n') + 1);", "-\t\t\t\t\tstartBounds = separatorIndex;", "-\t\t\t\t\tseparatorIndex = afterText.length ();", "-\t\t\t\t\tint spaceIndex = afterText.indexOf (' ');", "-\t\t\t\t\tif (spaceIndex != -1) separatorIndex = Math.min (separatorIndex, spaceIndex);", "-\t\t\t\t\tint newlineIndex = afterText.indexOf ('\\n');", "-\t\t\t\t\tif (newlineIndex != -1) separatorIndex = Math.min (separatorIndex, newlineIndex);", "-\t\t\t\t\tendBounds += separatorIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tOS.memmove (start_offset, new int[] {startBounds}, 4);", "-\t\t\tOS.memmove (end_offset, new int[] {endBounds}, 4);", "-\t\t\ttext = text.substring (startBounds, endBounds);", "-\t\t\tbyte[] bytes = Converter.wcsToMbcs (null, text, true);", "-//\t\t\tTODO gnopernicus bug? freeing previous string can cause gp", "-//\t\t\tif (textPtr != -1) OS.g_free (textPtr);", "-\t\t\ttextPtr = OS.g_malloc (bytes.length);", "-\t\t\tOS.memmove (textPtr, bytes, bytes.length);", "-\t\t\treturn textPtr;", "-\t\t} ", "+\t\t// TODO"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ffbceba9958c43062092416f65421b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 57, "signatureBeforeChange": " protected void init ()", "signatureAfterChange": "  protected void init ()", "diff": ["+", "-\t\t\t\t", "-\t/* Create the callbacks */", "-\ttimerProc= createCallback(\"timerProc\", 2);", "-\tcaretProc= createCallback(\"caretProc\", 2);", "-\tmouseHoverProc= createCallback(\"mouseHoverProc\", 2);", "-", "-\tfWindowProc= createCallback(\"handleWindowCallback\", 3);", "-\tfMouseProc= createCallback(\"handleMouseCallback\", 3);", "-\tfControlActionProc= createCallback(\"handleControlAction\", 2);", "-\tfUserPaneDrawProc= createCallback(\"handleUserPaneDraw\", 2);", "-\tfUserPaneHitTestProc= createCallback(\"handleUserPaneHitTest\", 2);", "-\tfUserPaneTrackingProc= createCallback(\"handleUserPaneTracking\", 3);", "-\tfDataBrowserDataProc= createCallback(\"handleDataBrowserDataCallback\", 5);", "-\tfDataBrowserCompareProc= createCallback(\"handleDataBrowserCompareCallback\", 4);", "-\tfDataBrowserItemNotificationProc= createCallback(\"handleDataBrowserItemNotificationCallback\", 3);", "-\tfMenuProc= createCallback(\"handleMenuCallback\", 3);", "+\tinitializeCallbacks ();", "+\tinitializeInsets ();\t", "+}", "-\t// create standard event handler", "-\tfApplicationProc= createCallback(\"handleApplicationCallback\", 3);", "-\tint[] mask= new int[] {", "-\t\t", "-\t\t//OS.kEventClassAppleEvent, OS.kAEQuitApplication,", "-\t\tOS.kEventClassAppleEvent, OS.kEventAppleEvent,", "-\t\t", "-\t\t// we track down events here because we need to know when the user ", "-\t\t// clicked in the menu bar", "-\t\tOS.kEventClassMouse, OS.kEventMouseDown,", "-\t\t// we track up, dragged, and moved events because", "-\t\t// we need to get these events even if the mouse is outside of the window.", "-\t\tOS.kEventClassMouse, OS.kEventMouseDragged,", "-\t\tOS.kEventClassMouse, OS.kEventMouseUp,", "-\t\tOS.kEventClassMouse, OS.kEventMouseMoved,", "-\t\t\t", "-\t\tSWT_USER_EVENT, 54321,", "-\t\tSWT_USER_EVENT, 54322,", "-\tif (OS.InstallEventHandler(OS.GetApplicationEventTarget(), fApplicationProc, mask, 0) != OS.kNoErr)", "-\t\terror (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t", "-\t", "-\tint textInputProc= createCallback(\"handleTextCallback\", 3);", "-\tmask= new int[] {", "-\tif (OS.InstallEventHandler(OS.GetUserFocusEventTarget(), textInputProc, mask, 0) != OS.kNoErr)", "-\t\terror (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t", "-\t", "-\tbuttonFont = Font.carbon_new (this, getThemeFont(OS.kThemeSmallSystemFont));", "-\tbuttonShadowThickness= 1;", "-", "-\t//scrolledInsetX = scrolledInsetY = 15;", "-\tscrolledMarginX= scrolledMarginY= 15;", "-\tcompositeForeground = 0x000000;", "-\tcompositeBackground = -1; // 0xEEEEEE;", "-\t", "-\tgroupFont = Font.carbon_new (this, getThemeFont(OS.kThemeSmallEmphasizedSystemFont));", "-\t", "-\tdialogForeground= 0x000000;", "-\tdialogBackground= 0xffffff;", "-\t", "-\tlabelForeground = 0x000000;", "-\tlabelBackground = -1; ", "-\tlabelFont = Font.carbon_new (this, getThemeFont(OS.kThemeSmallSystemFont));", "-\t", "-\tlistForeground = 0x000000;", "-\tlistBackground = 0xffffff;", "-\tlistSelect = listForeground;\t// if reversed colors", "-\tlistFont= Font.carbon_new (this, new MacFont((short)1)); // Mac Appl Font", "-", "-\tscrollBarForeground = 0x000000;", "-\tscrollBarBackground = 0xffffff;", "-", "-\ttextForeground = 0x000000;", "-\ttextBackground = 0xffffff;", "-\ttextHighlightThickness = 1; // ???", "-\ttextFont= Font.carbon_new (this, new MacFont((short)1));\t// Mac Appl Font", "-", "-\tCOLOR_WIDGET_DARK_SHADOW = \t\tColor.carbon_new(this, 0x333333, true);\t", "-\tCOLOR_WIDGET_NORMAL_SHADOW = \tColor.carbon_new(this, 0x666666, true);\t", "-\tCOLOR_WIDGET_LIGHT_SHADOW = \tColor.carbon_new(this, 0x999999, true);", "-\tCOLOR_WIDGET_HIGHLIGHT_SHADOW = Color.carbon_new(this, 0xCCCCCC, true);\t", "-\tCOLOR_WIDGET_BACKGROUND = \t\tColor.carbon_new(this, 0xFFFFFF, true);\t", "-\tCOLOR_WIDGET_BORDER = \t\t\tColor.carbon_new(this, 0x000000, true);\t", "-\tCOLOR_LIST_FOREGROUND = \t\tColor.carbon_new(this, 0x000000, true);\t", "-\tCOLOR_LIST_BACKGROUND = \t\tColor.carbon_new(this, 0xFFFFFF, true);\t", "-\tCOLOR_LIST_SELECTION = \t\t\tColor.carbon_new(this, 0x6666CC, true);", "-\tCOLOR_LIST_SELECTION_TEXT = \tColor.carbon_new(this, 0xFFFFFF, true);", "-\tCOLOR_INFO_BACKGROUND = \t\tColor.carbon_new(this, 0xFFFFE1, true);", "-\t", "-\tfHoverThemeFont= OS.kThemeSmallSystemFont;", "-", "-\tdefaultFont = Font.carbon_new (this, getThemeFont(OS.kThemeSmallSystemFont));", "-\t", "-\tdefaultForeground = compositeForeground;", "-\tdefaultBackground = compositeBackground;"]}], "num": 2047}
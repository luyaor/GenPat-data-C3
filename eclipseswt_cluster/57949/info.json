{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "944a5d4fc3e4790f0106bb912ef06e60", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13fb91fd8a0bef55c70993d546b2e9f7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "b22a7d19afbe2a3811a0f8aa54c1e85d92c62a2c", "commitAfterChange": "6b3c7f0839c7bbe5167edd98f5372c12c1468362", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tstatic long atkObject_get_attributes (long atkObject)", "signatureAfterChange": "  \tstatic long atkObject_get_attributes (long atkObject)", "diff": ["-\t\t\t\tevent.topMargin = event.bottomMargin = event.leftMargin = event.rightMargin = event.alignment = event.indent = -1;", "+\t\t\t\tevent.topMargin = event.bottomMargin = event.leftMargin = event.rightMargin = event.alignment", "+\t\t\t\t\t= event.indent = event.groupLevel = event.groupCount = event.groupIndex = -1;", "+\t\t\t\t", "+\t\t\t\t/* Check for group attributes. */", "+\t\t\t\tint level = (event.groupLevel != -1) ? event.groupLevel : 0;", "+\t\t\t\tint setsize = (event.groupCount != -1) ? event.groupCount : 0;", "+\t\t\t\tint posinset = (event.groupIndex != -1) ? event.groupIndex : 0;", "+\t\t\t\tif (setsize == 0 && posinset == 0) {", "+\t\t\t\t\t/* Determine position and count for radio buttons. */", "+\t\t\t\t\tControl control = accessible.control;", "+\t\t\t\t\tif (control instanceof Button && ((control.getStyle() & SWT.RADIO) != 0)) {", "+\t\t\t\t\t\tControl [] children = control.getParent().getChildren();", "+\t\t\t\t\t\tposinset = 1;", "+\t\t\t\t\t\tsetsize = 1;", "+\t\t\t\t\t\tfor (int i = 0; i < children.length; i++) {", "+\t\t\t\t\t\t\tControl child = children[i];", "+\t\t\t\t\t\t\tif (child instanceof Button && ((child.getStyle() & SWT.RADIO) != 0)) {", "+\t\t\t\t\t\t\t\tif (child == control) posinset = setsize;", "+\t\t\t\t\t\t\t\telse setsize++;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (level != 0) {", "+\t\t\t\t\tlong /*int*/ attrPtr = OS.g_malloc(AtkAttribute.sizeof);", "+\t\t\t\t\tattr.name = getStringPtr (\"level\"); //$NON-NLS-1$", "+\t\t\t\t\tattr.value = getStringPtr (String.valueOf(level));", "+\t\t\t\t\tATK.memmove(attrPtr, attr, AtkAttribute.sizeof);", "+\t\t\t\t\tparentResult = OS.g_slist_append(parentResult, attrPtr);", "+\t\t\t\t}", "+\t\t\t\tif (setsize != 0) {", "+\t\t\t\t\tlong /*int*/ attrPtr = OS.g_malloc(AtkAttribute.sizeof);", "+\t\t\t\t\tattr.name = getStringPtr (\"setsize\"); //$NON-NLS-1$", "+\t\t\t\t\tattr.value = getStringPtr (String.valueOf(setsize));", "+\t\t\t\t\tATK.memmove(attrPtr, attr, AtkAttribute.sizeof);", "+\t\t\t\t\tparentResult = OS.g_slist_append(parentResult, attrPtr);", "+\t\t\t\t}", "+\t\t\t\tif (posinset != 0) {", "+\t\t\t\t\tlong /*int*/ attrPtr = OS.g_malloc(AtkAttribute.sizeof);", "+\t\t\t\t\tattr.name = getStringPtr (\"posinset\"); //$NON-NLS-1$", "+\t\t\t\t\tattr.value = getStringPtr (String.valueOf(posinset));", "+\t\t\t\t\tATK.memmove(attrPtr, attr, AtkAttribute.sizeof);", "+\t\t\t\t\tparentResult = OS.g_slist_append(parentResult, attrPtr);", "+\t\t\t\t}", "+\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "077b5212701d19d40401ff9a3916ed86", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "93edbf9a37454e1a7d3dd3384a4625155d37717d", "commitAfterChange": "267407a8dd2a3c199a181934e5b56e8dc6cfea99", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "diff": ["+\tif ((style & SWT.DOUBLE_BUFFERED) != 0) {", "+\t\tint bits = OS.SendMessage (handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0);", "+\t\tif ((bits & OS.LVS_EX_DOUBLEBUFFER) == 0) {", "+\t\t\tGC gc = null;", "+\t\t\tint paintDC = 0;", "+\t\t\tPAINTSTRUCT ps = new PAINTSTRUCT ();", "+\t\t\tif (hooks (SWT.Paint)) {", "+\t\t\t\tGCData data = new GCData ();", "+\t\t\t\tdata.ps = ps;", "+\t\t\t\tdata.hwnd = handle;", "+\t\t\t\tgc = GC.win32_new (this, data);", "+\t\t\t\tpaintDC = gc.handle;", "+\t\t\t} else {", "+\t\t\t\tpaintDC = OS.BeginPaint (handle, ps);", "+\t\t\t}", "+\t\t\t", "+\t\t\t//TODO - only double buffer the damage", "+//\t\t\tint x = ps.left, y = ps.top;", "+//\t\t\tint width = ps.right - ps.left;", "+//\t\t\tint height = ps.bottom - ps.top;", "+\t\t\tforceResize ();", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\tint x = rect.left, y = rect.top;", "+\t\t\tint width = rect.right - rect.left;", "+\t\t\tint height = rect.bottom - rect.top;", "+\t\t\t", "+\t\t\tint hDC = OS.CreateCompatibleDC (paintDC);", "+\t\t\tint hBitmap = OS.CreateCompatibleBitmap (paintDC, width, height);", "+\t\t\tint hOldBitmap = OS.SelectObject (hDC, hBitmap);", "+\t\t\tint code = callWindowProc (handle, OS.WM_PAINT, hDC, 0);", "+\t\t\tOS.BitBlt (paintDC, x, y, width, height, hDC, 0, 0, OS.SRCCOPY);", "+\t\t\tOS.SelectObject (hDC, hOldBitmap);", "+\t\t\tOS.DeleteObject (hBitmap);", "+\t\t\tOS.DeleteObject (hDC);", "+\t\t\tif (hooks (SWT.Paint)) {", "+\t\t\t\tEvent event = new Event ();", "+\t\t\t\tevent.gc = gc;", "+\t\t\t\tevent.x = ps.left;", "+\t\t\t\tevent.y = ps.top;", "+\t\t\t\tevent.width = ps.right - ps.left;", "+\t\t\t\tevent.height = ps.bottom - ps.top;", "+\t\t\t\tsendEvent (SWT.Paint, event);", "+\t\t\t\t// widget could be disposed at this point", "+\t\t\t\tevent.gc = null;", "+\t\t\t\tgc.dispose ();", "+\t\t\t} else {", "+\t\t\t\tOS.EndPaint (handle, ps);", "+\t\t\t}", "+\t\t\treturn new LRESULT (code);", "+\t\t}", "+\t}"]}], "num": 57949}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed39dc61c8d492b4b81533edbf670307", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0463d7d8f6f2d9ae5666d69035cb2540", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "037e5168473a95763f975d71b44c32103e25ab3b", "commitAfterChange": "7ad48db865c653614ff19222e55f3c399d49ba7c", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": " public boolean setText(String html)", "signatureAfterChange": " public boolean setText(String html)", "diff": ["-", "+\t", "+\t/*", "+\t*  Feature in Mozilla.  The focus memory of Mozilla must be ", "+\t*  properly managed through the nsIWebBrowserFocus interface.", "+\t*  In particular, nsIWebBrowserFocus.deactivate must be called", "+\t*  when the focus moves from the browser (or one of its children", "+\t*  managed by Mozilla to another widget.  We currently do not", "+\t*  get notified when a widget takes focus away from the Browser.", "+\t*  As a result, deactivate is not properly called. This causes", "+\t*  Mozilla to retake focus the next time a document is loaded.", "+\t*  This breaks the case where the HTML loaded in the Browser ", "+\t*  varies while the user enters characters in a text widget. The text", "+\t*  widget loses focus every time new content is loaded.", "+\t*  The current workaround is to call deactivate everytime if ", "+\t*  the browser currently does not have focus. A better workaround", "+\t*  would be to have a mean to call deactivate when the Browser", "+\t*  or one of its children loses focus.", "+\t*/", "+\tif (this != getDisplay().getFocusControl()) Deactivate();", "+\t", "-\tint[] result = new int[1];", "+\tint /*long*/[] result = new int /*long*/[1];", "-\tint aSpec = XPCOM.nsEmbedCString_new(aString, aString.length);", "+\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new(aString, aString.length);", "-\tint aContentType = XPCOM.nsEmbedCString_new(contentTypeBuffer, contentTypeBuffer.length);", "+\tint /*long*/ aContentType = XPCOM.nsEmbedCString_new(contentTypeBuffer, contentTypeBuffer.length);", "-\tint aContentCharset = XPCOM.nsEmbedCString_new(contentCharsetBuffer, contentCharsetBuffer.length);", "+\tint /*long*/ aContentCharset = XPCOM.nsEmbedCString_new(contentCharsetBuffer, contentCharsetBuffer.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89b63a47072c4a519d4b0e4d79053f6c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/gtk/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "e2af8b2dd329c0bf3e09f561a937b75563fced9d", "commitAfterChange": "104948fea7e205f7e72eddec74e90621d796a735", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " public boolean setText(String html)", "signatureAfterChange": " public boolean setText(String html)", "diff": ["+\t", "+\t/*", "+\t*  Feature in Mozilla.  The focus memory of Mozilla must be ", "+\t*  properly managed through the nsIWebBrowserFocus interface.", "+\t*  In particular, nsIWebBrowserFocus.deactivate must be called", "+\t*  when the focus moves from the browser (or one of its children", "+\t*  managed by Mozilla to another widget.  We currently do not", "+\t*  get notified when a widget takes focus away from the Browser.", "+\t*  As a result, deactivate is not properly called. This causes", "+\t*  Mozilla to retake focus the next time a document is loaded.", "+\t*  This breaks the case where the HTML loaded in the Browser ", "+\t*  varies while the user enters characters in a text widget. The text", "+\t*  widget loses focus every time new content is loaded.", "+\t*  The current workaround is to call deactivate everytime if ", "+\t*  the browser currently does not have focus. A better workaround", "+\t*  would be to have a mean to call deactivate when the Browser", "+\t*  or one of its children loses focus.", "+\t*/", "+\tif (this != getDisplay().getFocusControl()) Deactivate();", "+\t"]}], "num": 35508}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d62b474716efc9f41d6a54932c82a38", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d917e721d45e75519705305b4e9f9a6b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void drawPolygon(int[] pointArray)", "signatureAfterChange": " public void drawPolygon(int[] pointArray)", "diff": ["-\t", "-\t// Motif does not have a native drawPolygon() call. Instead we ensure ", "-\t// that the first and last points are the same and call drawPolyline().", "-\t", "-\tint length = pointArray.length;", "-", "-\t// Need at least 3 points to define the polygon. If 2 or fewer points", "-\t// passed in, it is either a line or point so just call drawPolyline().", "-\t// Check what happens when XOR is implemented. We may not be able to", "-\t// do this optimization.", "-\t", "-\tif (length < 4) {", "-\t\t\tdrawPolyline(pointArray);", "-\t\t\treturn;", "+\tfloat[] points = new float[pointArray.length];", "+\tfor (int i=0; i<points.length; i++) {", "+\t\tpoints[i] = pointArray[i];", "-", "-\t// If first and last points are the same, the polygon is already closed.", "-\t// Just call drawPolyline().", "-\t//", "-\t// Check what happens when XOR is implemented. We may not be able to", "-\t// do this optimization.", "-\t", "-\tif (pointArray[0] == pointArray[length - 2] && (pointArray[1] == pointArray[length - 1])) {", "-\t\tdrawPolyline(pointArray);", "-\t\treturn;", "-\t}", "-", "-\t// Grow the list of points by one element and make sure the first and last", "-\t// points are the same. This will close the polygon and we can use the", "-\t// drawPolyline() call. ", "-\t\t", "-\tint newPoints[] = new int[length + 2];", "-\tfor (int i = 0; i < length ; i++) ", "-\t\tnewPoints[i] = pointArray[i];", "-\tnewPoints[length] = pointArray[0];", "-\tnewPoints[length + 1] = pointArray[1];", "-", "-\tdrawPolyline(newPoints);", "+\tOS.CGContextBeginPath(handle);", "+\tOS.CGContextAddLines(handle, points, points.length / 2);", "+\tOS.CGContextClosePath(handle);", "+\tOS.CGContextStrokePath(handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3d0725b3d5915913e2151f7225d8677", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "a7462f6b30f403b541de53811b1a2d45dd86b987", "commitAfterChange": "37c3fc5edd360862e04e4236fb6d1206ffdadd53", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": " public void setLocation (int x, int y)", "signatureAfterChange": " public void setLocation (int x, int y)", "diff": ["-\tMacRect br= new MacRect();", "-\tshort[] bounds= br.getData();", "-\tshort[] pbounds= new short[4];", "-\tinternalGetControlBounds(topHandle, br);", "+\tRect bounds= new Rect();", "+\tRect pbounds= new Rect();", "+\tinternalGetControlBounds(topHandle, bounds);", "-\t\tsameOrigin = (x == bounds[1]) && (y == bounds[0]);", "+\t\tsameOrigin = (x == bounds.left) && (y == bounds.top);", "-\t\tsameOrigin = (x == (bounds[1]-pbounds[1])) && (y == (bounds[0]-pbounds[0]));", "+\t\tsameOrigin = (x == (bounds.left-pbounds.left)) && (y == (bounds.top-pbounds.top));", "-\tinternalSetBounds(topHandle, br, pbounds[1]+x, pbounds[0]+y, bounds[3]-bounds[1], bounds[2]-bounds[0]);", "+\tinternalSetBounds(topHandle, bounds, pbounds.left+x, pbounds.top+y, bounds.right-bounds.left, bounds.bottom-bounds.top);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "524b641dc121349990c13761bc36da9c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "a7462f6b30f403b541de53811b1a2d45dd86b987", "commitAfterChange": "37c3fc5edd360862e04e4236fb6d1206ffdadd53", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public Rectangle getBounds ()", "signatureAfterChange": " public Rectangle getBounds ()", "diff": ["-\t\tfloat[] f= new float[4];", "-\t\tOS.HIViewGetFrame(handle, f);", "-\t\treturn new Rectangle((int)f[0], (int)f[1], (int)f[2], (int)f[3]);", "+\t\tCGRect rect= new CGRect();", "+\t\tOS.HIViewGetFrame(handle, rect);", "+\t\treturn new Rectangle((int)rect.x, (int)rect.y, (int)rect.width, (int)rect.height);", "-\t\tshort[] bounds= new short[4];", "-\t\tshort[] pbounds= new short[4];", "+\t\tRect bounds= new Rect();", "+\t\tRect pbounds= new Rect();", "-\t\treturn new Rectangle(bounds[1]-pbounds[1], bounds[0]-pbounds[0], bounds[3]-bounds[1], bounds[2]-bounds[0]);", "+\t\treturn new Rectangle(bounds.left-pbounds.left, bounds.top-pbounds.top, bounds.right-bounds.left, bounds.bottom-bounds.top);"]}], "num": 17144}
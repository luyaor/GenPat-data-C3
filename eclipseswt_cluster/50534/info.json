{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1d43b158bbc2a93fcfb929247a3d903", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cb82b4e3c34a3e180a327b8ef287b86", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/mozilla/org/eclipse/swt/browser/WindowCreator.java", "commitBeforeChange": "a6131ac9e2d912fd79a498410994704f80907b17", "commitAfterChange": "e758c60c4fb72428ae282ccc25e3e75b0adf65c4", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  int CreateChromeWindow(int parent, int chromeFlags, int _retval)", "signatureAfterChange": "  int CreateChromeWindow (int parent, int chromeFlags, int _retval)", "diff": ["-int /*long*/ CreateChromeWindow(int /*long*/ parent, int /*long*/ chromeFlags, int /*long*/ _retval) {", "+int /*long*/ CreateChromeWindow (int /*long*/ parent, int /*long*/ chromeFlags, int /*long*/ _retval) {", "-\t\tnsIWebBrowserChrome browserChromeParent = new nsIWebBrowserChrome(parent);", "+\t\tnsIWebBrowserChrome browserChromeParent = new nsIWebBrowserChrome (parent);", "-\t\tint rc = browserChromeParent.GetWebBrowser(aWebBrowser);", "-\t\tif (rc != XPCOM.NS_OK) Mozilla.error(rc);", "-\t\tif (aWebBrowser[0] == 0) Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\tint rc = browserChromeParent.GetWebBrowser (aWebBrowser);", "+\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\tif (aWebBrowser[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\tnsIWebBrowser webBrowser = new nsIWebBrowser(aWebBrowser[0]);", "+\t\tnsIWebBrowser webBrowser = new nsIWebBrowser (aWebBrowser[0]);", "-\t\trc = webBrowser.QueryInterface(nsIBaseWindow.NS_IBASEWINDOW_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) Mozilla.error(rc);", "-\t\tif (result[0] == 0) Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\twebBrowser.Release();", "+\t\trc = webBrowser.QueryInterface (nsIBaseWindow.NS_IBASEWINDOW_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\twebBrowser.Release ();", "-\t\tnsIBaseWindow baseWindow = new nsIBaseWindow(result[0]);", "+\t\tnsIBaseWindow baseWindow = new nsIBaseWindow (result[0]);", "-\t\trc = baseWindow.GetParentNativeWindow(aParentNativeWindow);", "-\t\tif (rc != XPCOM.NS_OK) Mozilla.error(rc);", "-\t\tif (aParentNativeWindow[0] == 0) Mozilla.error(XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\tbaseWindow.Release();", "+\t\trc = baseWindow.GetParentNativeWindow (aParentNativeWindow);", "+\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\tif (aParentNativeWindow[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\tbaseWindow.Release ();", "-\t\tsrc = Mozilla.findBrowser(aParentNativeWindow[0]);", "+\t\tsrc = Mozilla.findBrowser (aParentNativeWindow[0]);", "-\t\t\tnew Shell(SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL) :", "-\t\t\tnew Shell(src.getShell(), SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);", "-\t\tshell.setLayout(new FillLayout());", "-\t\tbrowser = new Browser(shell, src.getStyle() & SWT.NONE /*MOZILLA*/); // TODO", "-\t\tbrowser.addVisibilityWindowListener(new VisibilityWindowListener() {", "-\t\t\tpublic void hide(WindowEvent event) {", "+\t\t\tnew Shell (SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL) :", "+\t\t\tnew Shell (src.getShell(), SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL);", "+\t\tshell.setLayout (new FillLayout ());", "+\t\tbrowser = new Browser (shell, src.getStyle () & SWT.MOZILLA);", "+\t\tbrowser.addVisibilityWindowListener (new VisibilityWindowListener () {", "+\t\t\tpublic void hide (WindowEvent event) {", "-\t\t\tpublic void show(WindowEvent event) {", "-\t\t\t\tif (event.location != null) shell.setLocation(event.location);", "+\t\t\tpublic void show (WindowEvent event) {", "+\t\t\t\tif (event.location != null) shell.setLocation (event.location);", "-\t\t\t\t\tshell.setSize(shell.computeSize(size.x, size.y));", "+\t\t\t\t\tshell.setSize (shell.computeSize (size.x, size.y));", "-\t\t\t\tshell.open();", "+\t\t\t\tshell.open ();", "-\t\tbrowser.addCloseWindowListener(new CloseWindowListener() {", "-\t\t\tpublic void close(WindowEvent event) {", "-\t\t\t\tshell.close();", "+\t\tbrowser.addCloseWindowListener (new CloseWindowListener () {", "+\t\t\tpublic void close (WindowEvent event) {", "+\t\t\t\tshell.close ();", "-\t\tWindowEvent event = new WindowEvent(src);", "-\t\tevent.display = src.getDisplay();", "+\t\tWindowEvent event = new WindowEvent (src);", "+\t\tevent.display = src.getDisplay ();", "-\t\t\tsrc.webBrowser.openWindowListeners[i].open(event);", "+\t\t\tsrc.webBrowser.openWindowListeners[i].open (event);", "-\t\tdoit = browser != null && !browser.isDisposed();", "+\t\tdoit = browser != null && !browser.isDisposed ();", "-\t\tint /*long*/ address = ((Mozilla)browser.webBrowser).webBrowserChrome.getAddress();", "-\t\tnsIWebBrowserChrome webBrowserChrome = new nsIWebBrowserChrome(address);", "-\t\twebBrowserChrome.AddRef();", "-\t\tXPCOM.memmove(_retval, new int /*long*/[] {address}, OS.PTR_SIZEOF);", "+\t\tint /*long*/ address = ((Mozilla)browser.webBrowser).webBrowserChrome.getAddress ();", "+\t\tnsIWebBrowserChrome webBrowserChrome = new nsIWebBrowserChrome (address);", "+\t\twebBrowserChrome.AddRef ();", "+\t\tXPCOM.memmove (_retval, new int /*long*/[] {address}, C.PTR_SIZEOF);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f852b868b46fa7cd20d865d1d893a5d2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/WindowCreator.java", "commitBeforeChange": "56779bf37ed572facc0d0fe8a8a8848b8f7703f1", "commitAfterChange": "b8f738e4a2bba8bedd7b8fa6bd83bd041997e138", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \r int CreateChromeWindow(int parent, int chromeFlags, int _retval)", "signatureAfterChange": "  int CreateChromeWindow(int parent, int chromeFlags, int _retval)", "diff": ["-\r", "-int CreateChromeWindow(int parent, int chromeFlags, int _retval) {\r", "-\tnsIWebBrowserChrome browserChromeParent = new nsIWebBrowserChrome(parent);\r", "-\tint[] aWebBrowser = new int[1];\r", "-\tint rc = browserChromeParent.GetWebBrowser(aWebBrowser);\r", "-\tif (rc != XPCOM.NS_OK) Browser.error(rc);\r", "-\tif (aWebBrowser[0] == 0) Browser.error(XPCOM.NS_ERROR_NO_INTERFACE);\r", "-\t\r", "-\tnsIWebBrowser webBrowser = new nsIWebBrowser(aWebBrowser[0]);\r", "-\tint[] result = new int[1];\r", "-\trc = webBrowser.QueryInterface(nsIBaseWindow.NS_IBASEWINDOW_IID, result);\r", "-\tif (rc != XPCOM.NS_OK) Browser.error(rc);\r", "-\tif (result[0] == 0) Browser.error(XPCOM.NS_ERROR_NO_INTERFACE);\r", "-\twebBrowser.Release();\r", "-\t\r", "-\tnsIBaseWindow baseWindow = new nsIBaseWindow(result[0]);\r", "-\tresult[0] = 0;\r", "-\tint[] aParentNativeWindow = new int[1];\r", "-\trc = baseWindow.GetParentNativeWindow(aParentNativeWindow);\r", "-\tif (rc != XPCOM.NS_OK) Browser.error(rc);\r", "-\tif (aParentNativeWindow[0] == 0) Browser.error(XPCOM.NS_ERROR_NO_INTERFACE);\r", "-\tbaseWindow.Release();\r", "-\r", "-\tDisplay display = Display.getCurrent();\r", "-\tShell[] shells = display.getShells();\r", "-\tBrowser src = null;\r", "-\tfor (int i = 0; i < shells.length; i++) {\r", "-\t\tsrc = Browser.findBrowser(shells[i], aParentNativeWindow[0]);\r", "-\t\tif (src != null) break;\r", "-\t}\r", "-\tOpenWindowEvent event = new OpenWindowEvent(src);\r", "-\tevent.display = display;\r", "-\tevent.widget = src;\r", "-\tfor (int i = 0; i < src.openWindowListeners.length; i++)\r", "-\t\tsrc.openWindowListeners[i].open(event);\r", "-\tBrowser browser = event.browser;\r", "-\tboolean doit = browser != null && !browser.isDisposed();\r", "-\tif (doit) {\r", "-\t\tint address = browser.webBrowserChrome.getAddress();\r", "-\t\tnsIWebBrowserChrome webBrowserChrome = new nsIWebBrowserChrome(address);\r", "-\t\twebBrowserChrome.AddRef();\r", "-\t\tXPCOM.memmove(_retval, new int[] {address}, 4);\r", "-\t}\t\t\r", "-\treturn doit ? XPCOM.NS_OK : XPCOM.NS_ERROR_NOT_IMPLEMENTED;\r", "-}\r", "+", "+int CreateChromeWindow(int parent, int chromeFlags, int _retval) {", "+\tnsIWebBrowserChrome browserChromeParent = new nsIWebBrowserChrome(parent);", "+\tint[] aWebBrowser = new int[1];", "+\tint rc = browserChromeParent.GetWebBrowser(aWebBrowser);", "+\tif (rc != XPCOM.NS_OK) Browser.error(rc);", "+\tif (aWebBrowser[0] == 0) Browser.error(XPCOM.NS_ERROR_NO_INTERFACE);", "+\t", "+\tnsIWebBrowser webBrowser = new nsIWebBrowser(aWebBrowser[0]);", "+\tint[] result = new int[1];", "+\trc = webBrowser.QueryInterface(nsIBaseWindow.NS_IBASEWINDOW_IID, result);", "+\tif (rc != XPCOM.NS_OK) Browser.error(rc);", "+\tif (result[0] == 0) Browser.error(XPCOM.NS_ERROR_NO_INTERFACE);", "+\twebBrowser.Release();", "+\t", "+\tnsIBaseWindow baseWindow = new nsIBaseWindow(result[0]);", "+\tresult[0] = 0;", "+\tint[] aParentNativeWindow = new int[1];", "+\trc = baseWindow.GetParentNativeWindow(aParentNativeWindow);", "+\tif (rc != XPCOM.NS_OK) Browser.error(rc);", "+\tif (aParentNativeWindow[0] == 0) Browser.error(XPCOM.NS_ERROR_NO_INTERFACE);", "+\tbaseWindow.Release();", "+", "+\tDisplay display = Display.getCurrent();", "+\tShell[] shells = display.getShells();", "+\tBrowser src = null;", "+\tfor (int i = 0; i < shells.length; i++) {", "+\t\tsrc = Browser.findBrowser(shells[i], aParentNativeWindow[0]);", "+\t\tif (src != null) break;", "+\t}", "+\tWindowEvent event = new WindowEvent(src);", "+\tevent.display = display;", "+\tevent.widget = src;", "+\tfor (int i = 0; i < src.openWindowListeners.length; i++)", "+\t\tsrc.openWindowListeners[i].open(event);", "+\tBrowser browser = event.browser;", "+\tboolean doit = browser != null && !browser.isDisposed();", "+\tif (doit) {", "+\t\tint address = browser.webBrowserChrome.getAddress();", "+\t\tnsIWebBrowserChrome webBrowserChrome = new nsIWebBrowserChrome(address);", "+\t\twebBrowserChrome.AddRef();", "+\t\tXPCOM.memmove(_retval, new int[] {address}, 4);", "+\t}\t\t", "+\treturn doit ? XPCOM.NS_OK : XPCOM.NS_ERROR_NOT_IMPLEMENTED;", "+}"]}], "num": 50534}
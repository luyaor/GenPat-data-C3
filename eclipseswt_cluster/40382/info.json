{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "97031b42e75fc045fbaef194e41b3a96", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "119d6fb3859b881cc10f11c86634c212", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "  void addMouseHoverTimeOut (int handle)", "signatureAfterChange": "  void addMenu (Menu menu)", "diff": ["+void addMenu (Menu menu) {", "+\tif (menus == null) menus = new Menu [12];", "+\tfor (int i=0; i<menus.length; i++) {", "+\t\tif (menus [i] == null) {", "+\t\t\tmenu.id = (short)(ID_START + i);", "+\t\t\tmenus [i] = menu;", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\tMenu [] newMenus = new Menu [menus.length + 12];", "+\tmenu.id = (short)(ID_START + menus.length);", "+\tnewMenus [menus.length] = menu;", "+\tSystem.arraycopy (menus, 0, newMenus, 0, menus.length);", "+\tmenus = newMenus;", "-void addMouseHoverTimeOut (int handle) {", "-\tif (mouseHoverID != 0) OS.RemoveEventLoopTimer(mouseHoverID);", "-\tmouseHoverID = 0;", "-\tif (handle == fLastHoverHandle) return;", "-\tint[] timer= new int[1];", "-\tOS.InstallEventLoopTimer(OS.GetCurrentEventLoop(), HOVER_TIMEOUT / 1000.0, 0.0, mouseHoverProc, handle, timer);", "-\tmouseHoverID = timer[0];", "-\tmouseHoverHandle = handle;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d798c7bc674fafff6ea4397779cb8400", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 8, "signatureBeforeChange": " \t \tpublic static MacFont getThemeFont(short themeFontId)", "signatureAfterChange": "  void addMenuItem (MenuItem item)", "diff": ["+void addMenuItem (MenuItem item) {", "+\tif (items == null) items = new MenuItem [12];", "+\tfor (int i=0; i<items.length; i++) {", "+\t\tif (items [i] == null) {", "+\t\t\titem.id = ID_START + i;", "+\t\t\titems [i] = item;", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\tMenuItem [] newItems = new MenuItem [items.length + 12];", "+\titem.id = ID_START + items.length;", "+\tnewItems [items.length] = item;", "+\tSystem.arraycopy (items, 0, newItems, 0, items.length);", "+\titems = newItems;", "-\t", "-\tpublic static MacFont getThemeFont(short themeFontId) {", "-\t\tbyte[] fontName= new byte[256];", "-\t\tshort[] fontSize= new short[1];", "-\t\tbyte[] style= new byte[1];", "-\t\tOS.GetThemeFont(themeFontId, OS.smSystemScript, fontName, fontSize, style);", "-\t\treturn new MacFont(MacUtil.toString(fontName), fontSize[0], style[0]);", "-\t}"]}], "num": 40382}
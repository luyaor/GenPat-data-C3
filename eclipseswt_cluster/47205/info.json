{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9784ddb4d75f27e384afba691bc67038", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "199c77a314764bb62833b85f6abf5072", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "3e1b012af2b4ba818ce575f06ca138619a0a2859", "commitAfterChange": "4b27ffdfff25d04c66f5ca08e11b1e086b9d1dcd", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 134, "signatureBeforeChange": "  int tableView_selectionIndexesForProposedSelection (int id, int sel, int aTableView, int indexSet)", "signatureAfterChange": "  int tableView_selectionIndexesForProposedSelection (int id, int sel, int aTableView, int indexSet)", "diff": ["+\tNSTableView tableView = new NSTableView(aTableView);", "+", "+\t// If a checkbox is being tracked don't select the row.", "+\tif (display.trackedButtonRow != -1) return tableView.selectedRowIndexes().id;", "+\t", "+\t// If the click was in a checkbox, remove that row from the proposed selection.", "+\tNSMutableIndexSet mutableSelection = (NSMutableIndexSet) new NSMutableIndexSet().alloc();", "+\tmutableSelection = new NSMutableIndexSet(mutableSelection.initWithIndexSet(new NSIndexSet(indexSet)));", "+    int /*long*/ clickedCol = tableView.clickedColumn();", "+    int /*long*/ clickedRow = tableView.clickedRow();", "+    if (clickedRow >= 0 && clickedCol >= 0) {", "+        NSCell cell = tableView.preparedCellAtColumn(clickedCol, clickedRow);", "+        if (cell.isKindOfClass(OS.class_NSButtonCell) && cell.isEnabled()) {", "+            NSRect cellFrame = tableView.frameOfCellAtColumn(clickedCol, clickedRow);", "+            NSRect imageFrame = cell.imageRectForBounds(cellFrame);", "+            NSPoint hitPoint = tableView.convertPoint_fromView_(NSApplication.sharedApplication().currentEvent().locationInWindow(), null);", "+            if (OS.NSPointInRect(hitPoint, imageFrame)) {", "+    \t\t\tmutableSelection.removeIndex(clickedRow);", "+            }", "+        }            ", "+    }", "-\t\tNSIndexSet indexes = new NSIndexSet(indexSet);", "-\t\tNSTableView table = new NSTableView(aTableView);\t\t\t", "-\t\tif (indexes.count() != 1 && table.selectedRow() != -1) {", "-\t\t\tNSIndexSet newSelection = (NSIndexSet)new NSIndexSet().alloc();", "-\t\t\tnewSelection = newSelection.initWithIndex(table.selectedRow());", "-\t\t\tnewSelection.autorelease();", "-\t\t\treturn newSelection.id;", "+\t\tif (mutableSelection.count() != 1 && tableView.selectedRow() != -1) {", "+\t\t\treturn tableView.selectedRowIndexes().id;", "-\treturn indexSet;", "+\treturn mutableSelection.id;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81596d3d8a60efee2ddbbbefd3632015", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "7ee9370fb1f257b0959b64e9c229131ca3b8dbfc", "commitAfterChange": "0311d68036ad50521d345e1a90470acd1e4bf9b4", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 109, "signatureBeforeChange": "  int outlineView_selectionIndexesForProposedSelection (int id, int sel, int aTableView, int indexSet)", "signatureAfterChange": "  void selectRowIndexes_byExtendingSelection (int id, int sel, int indexes, boolean extend)", "diff": ["-", "-int /*long*/ outlineView_selectionIndexesForProposedSelection (int /*long*/ id, int /*long*/ sel, int /*long*/ aTableView, int /*long*/ indexSet) {", "-\tNSOutlineView tree = new NSOutlineView(aTableView);\t\t\t", "-", "-\t// If a checkbox is being tracked don't select the row.", "-\tif (display.trackedButtonRow != -1) return tree.selectedRowIndexes().id;", "-\t", "-\t// If the click was in a checkbox, remove that row from the proposed selection.", "-\tNSMutableIndexSet mutableSelection = (NSMutableIndexSet) new NSMutableIndexSet().alloc();", "-\tmutableSelection = new NSMutableIndexSet(mutableSelection.initWithIndexSet(new NSIndexSet(indexSet)));", "-    int /*long*/ clickedCol = tree.clickedColumn();", "-    int /*long*/ clickedRow = tree.clickedRow();", "-    if (clickedRow >= 0 && clickedCol >= 0) {", "-        NSCell cell = tree.preparedCellAtColumn(clickedCol, clickedRow);", "-        if (cell.isKindOfClass(OS.class_NSButtonCell) && cell.isEnabled()) {", "-            NSRect cellFrame = tree.frameOfCellAtColumn(clickedCol, clickedRow);", "-            NSRect imageFrame = cell.imageRectForBounds(cellFrame);", "-            NSPoint hitPoint = tree.convertPoint_fromView_(NSApplication.sharedApplication().currentEvent().locationInWindow(), null);", "-            if (OS.NSPointInRect(hitPoint, imageFrame)) {", "-    \t\t\tmutableSelection.removeIndex(clickedRow);", "-            }", "-        }            ", "-    }", "-", "-\tif ((style & SWT.SINGLE) != 0) {", "-\t\t/*", "-\t\t * Feature in Cocoa.  Calling setAllowsEmptySelection will automatically select the first row of the list. ", "-\t\t * And, single-selection NSTable/OutlineViews allow the user to de-select the selected item via command-click.", "-\t\t * This is normal platform behavior, but for compatibility with other platforms, if the SINGLE style is in use,", "-\t\t * force a selection by seeing if the proposed selection set is empty, and if so, put back the currently selected row.  ", "-\t\t */", "-\t\tif (mutableSelection.count() != 1 && tree.selectedRow() != -1) {", "-\t\t\treturn tree.selectedRowIndexes().id;", "-\t\t}", "-\t}", "-\t", "-\treturn mutableSelection.id;", "-}", "+void selectRowIndexes_byExtendingSelection (int /*long*/ id, int /*long*/ sel, int /*long*/ indexes, boolean extend) {", "+\tif (preventSelect && !ignoreSelect) return;", "+\tif ((style & SWT.SINGLE) != 0 && !ignoreSelect) {", "+\t\tNSIndexSet set = new NSIndexSet(indexes);", "+\t\tif (set.count() == 0) return;", "+\t}", "+\tsuper.selectRowIndexes_byExtendingSelection (id, sel, indexes, extend);", "+}"]}], "num": 47205}
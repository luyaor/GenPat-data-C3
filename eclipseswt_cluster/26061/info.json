{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8c9da387e18bc17db3e2ef42c4a2ae5f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb6d86c728bf065e19220379edc9634e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "5ba9287f6caa82e9989a01a562fc97d015948ef7", "commitAfterChange": "8c259c2fdd0bffd2ea76820f5d04cd4a52c2e4a7", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 120, "signatureBeforeChange": " void doColumnRight()", "signatureAfterChange": " void doVisualNext()", "diff": ["- */", "-void doColumnRight() {", "-\tint line = content.getLineAtOffset(caretOffset);", "-\tint lineOffset = content.getOffsetAtLine(line);\t", "-\tint offsetInLine = caretOffset - lineOffset;", "-\tString lineText = content.getLine(line);", "-\tint lineLength = lineText.length();", "-\t", "-\tif (isBidi()) {", "-\t\tGC gc = getGC();", "-\t\tStyledTextBidi bidi = getStyledTextBidi(lineText, lineOffset, gc);", "-\t\tif (bidi.getTextWidth() + leftMargin > horizontalScrollOffset + getClientArea().width || ", "-\t\t\toffsetInLine < lineLength) {", "-\t\t\tif (bidi.isRightToLeft(offsetInLine) == false && ", "-\t\t\t\toffsetInLine < lineLength) {", "-\t\t\t\t// advance caret logically if in L2R segment (move visually right)", "-\t\t\t\tcaretOffset++;", "-\t\t\t\tdoSelection(SWT.RIGHT);", "-\t\t\t\t// end of L2R segment reached (visual right side)?", "-\t\t\t\tif (bidi.isRightToLeft(caretOffset - lineOffset)) {", "-\t\t\t\t\t// go to end of R2L segment (visually left of next R2L segment)/ ", "-\t\t\t\t\t// end of line", "-\t\t\t\t\tcaretOffset++;", "-\t\t\t\t\twhile (caretOffset < lineOffset + lineLength &&", "-\t\t\t\t\t\t   bidi.isRightToLeft(caretOffset - lineOffset)) {", "-\t\t\t\t\t\tcaretOffset++;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse", "-\t\t\tif (offsetInLine > 0 && ", "-\t\t\t\t(bidi.isRightToLeft(offsetInLine) || ", "-\t\t\t\tbidi.getTextWidth() + leftMargin > horizontalScrollOffset + getClientArea().width ||", "-\t\t\t\toffsetInLine < lineLength)) {", "-\t\t\t\t// advance caret visually if in R2L segment or logically at line end ", "-\t\t\t\t// but right end of line is not fully visible yet", "-\t\t\t\tcaretOffset--;", "-\t\t\t\tdoSelection(SWT.LEFT);", "-\t\t\t\toffsetInLine = caretOffset - lineOffset;", "-\t\t\t\t// end of R2L segment reached (visual right side)?", "-\t\t\t\tif (offsetInLine > 0 && bidi.isRightToLeft(offsetInLine) == false) {", "-\t\t\t\t\t// go to end of R2L segment (visually left of next L2R segment)/ ", "-\t\t\t\t\t// end of line", "-\t\t\t\t\tcaretOffset++;", "-\t\t\t\t\twhile (caretOffset < lineOffset + lineLength &&", "-\t\t\t\t\t\t   bidi.isRightToLeft(caretOffset - lineOffset)) {", "-\t\t\t\t\t\tcaretOffset++;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse", "-\t\t\tif (offsetInLine == 0 && bidi.getTextPosition(0) != bidi.getTextWidth()) {", "-\t\t\t\t// at logical line start in R2L segment but there's more text (a L2R", "-\t\t\t\t// segment) go to end of R2L segment (visually left of next L2R", "-\t\t\t\t// segment)/end of line", "-\t\t\t\tcaretOffset++;", "-\t\t\t\twhile (caretOffset < lineOffset + lineLength &&", "-\t\t\t\t\t   bidi.isRightToLeft(caretOffset - lineOffset - 1)) {", "-\t\t\t\t\tcaretOffset++;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\toffsetInLine = caretOffset - lineOffset;", "-\t\t\t// if new caret position is to the right of the client area", "-\t\t\tif (bidi.getTextPosition(offsetInLine) >= horizontalScrollOffset) {", "-\t\t\t\t// scroll to the caret position", "-\t\t\t\tshowCaret();", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\t// otherwise just update caret position without scrolling it into view", "-\t\t\t\tsetBidiCaretLocation(null);", "-\t\t\t\tsetBidiKeyboardLanguage();", "-\t\t\t}", "-\t\t\tif (offsetInLine > 0 && offsetInLine < lineLength - 1) {", "-\t\t\t\tint clientAreaEnd = horizontalScrollOffset + getClientArea().width;", "-\t\t\t\tboolean directionChange = bidi.isRightToLeft(offsetInLine - 1) == false && bidi.isRightToLeft(offsetInLine);", "-\t\t\t\tint textWidth = bidi.getTextWidth() + leftMargin;", "-\t\t\t\t// between L2R and R2L segment and second character of R2L segment is", "-\t\t\t\t// left of right border and logical line end is left of right border", "-\t\t\t\t// but visual line end is not left of right border", "-\t\t\t\tif (directionChange && ", "-\t\t\t\t\tbidi.isRightToLeft(offsetInLine + 1) &&", "-\t\t\t\t\tbidi.getTextPosition(offsetInLine + 1) + leftMargin < clientAreaEnd && ", "-\t\t\t\t\tbidi.getTextPosition(lineLength) + leftMargin < clientAreaEnd && textWidth > clientAreaEnd) {", "-\t\t\t\t\t// make visual line end visible", "-\t\t\t\t\tscrollHorizontalBar(textWidth - clientAreaEnd);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tgc.dispose();", "-\t}", "-\telse", "-\tif (offsetInLine < lineLength) {", "-\t\tcaretOffset++;", "-\t\tshowCaret();", "+ */", "+void doVisualNext() {", "+\tint line = content.getLineAtOffset(caretOffset);", "+\tint lineOffset = content.getOffsetAtLine(line);\t", "+\tint offsetInLine = caretOffset - lineOffset;", "+\tString lineText = content.getLine(line);", "+\tint lineLength = lineText.length();", "+\t", "+\tif (isBidi()) {", "+\t\tGC gc = getGC();", "+\t\tStyledTextBidi bidi = getStyledTextBidi(lineText, lineOffset, gc);", "+\t\tint lineEndPixel = bidi.getTextWidth() + leftMargin; ", "+", "+\t\t// check if caret location is at the visual end of the line (can't use ", "+\t\t// caret location here since it's location is dependent on current keyboard", "+\t\t// language direction)", "+\t\tif (bidi.getTextPosition(offsetInLine, lastCaretDirection) == lineEndPixel) {", "+\t\t\tgc.dispose(); ", "+\t\t\treturn;", "+\t\t}", "+\t\tint visualOffset = -1;", "+\t\tif (offsetInLine == lineLength) {", "+\t\t\t//logical end of line may not be visual end, setup visualOffset to process as usual", "+\t\t\tvisualOffset = bidi.getVisualOffset(offsetInLine - 1);", "+\t\t}", "+\t\telse", "+\t\tif (offsetInLine < lineLength) {", "+\t\t\tvisualOffset = bidi.getVisualOffset(offsetInLine);", "+\t\t}", "+\t\tif (visualOffset != -1) {", "+\t\t\tvisualOffset++;", "+\t\t\toffsetInLine = bidi.getLogicalOffset(visualOffset);", "+\t\t\tif (offsetInLine > 0 && offsetInLine < lineLength) {", "+\t\t\t\tboolean isRightOriented = (getStyle() & SWT.RIGHT_TO_LEFT) != 0;", "+\t\t\t\tif (isRightOriented) {", "+\t\t\t\t\tboolean leftToRightStart = bidi.isRightToLeft(offsetInLine) == false && bidi.isRightToLeft(offsetInLine - 1);", "+\t\t\t\t\tif (leftToRightStart) {", "+\t\t\t\t\t\t//moving from RtoL segment to LtoR segment", "+\t\t\t\t\t\tlastCaretDirection = ST.COLUMN_PREVIOUS;", "+\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\telse {", "+\t\t\t\t\tboolean rightToLeftStart = bidi.isRightToLeft(offsetInLine) && bidi.isRightToLeft(offsetInLine - 1) == false;", "+\t\t\t\t\tif (bidi.isRightToLeftInput(offsetInLine) && bidi.isLatinNumber(offsetInLine - 1)) {", "+\t\t\t\t\t\t//moving from latin number to RtoL segment", "+\t\t\t\t\t\tlastCaretDirection = ST.COLUMN_NEXT;", "+\t\t\t\t\t}", "+\t\t\t\t\telse", "+\t\t\t\t\tif (rightToLeftStart) {", "+\t\t\t\t\t\t//moving from LtoR segment to RtoL segment", "+\t\t\t\t\t\tlastCaretDirection = ST.COLUMN_PREVIOUS;", "+\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcaretOffset = lineOffset + offsetInLine;", "+\t\t\tshowCaret();", "+\t\t}", "+\t\tgc.dispose();", "+\t}", "+\telse", "+\tif (offsetInLine < lineLength) {", "+\t\tcaretOffset++;", "+\t\tshowCaret();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49cd7855b5d31532e1f66b7080f98f9c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "5ba9287f6caa82e9989a01a562fc97d015948ef7", "commitAfterChange": "8c259c2fdd0bffd2ea76820f5d04cd4a52c2e4a7", "methodNumberBeforeChange": 91, "methodNumberAfterChange": 119, "signatureBeforeChange": " void doColumnLeft()", "signatureAfterChange": " void doVisualPrevious()", "diff": ["- */", "-void doColumnLeft() {", "-\tint line = content.getLineAtOffset(caretOffset);", "-\tint lineOffset = content.getOffsetAtLine(line);\t", "-\tint offsetInLine = caretOffset - lineOffset;", "-\t", "-\tif (isBidi()) {", "-\t\tString lineText = content.getLine(line);", "-\t\tint lineLength = lineText.length();", "-\t\tGC gc = getGC();", "-\t\tStyledTextBidi bidi = getStyledTextBidi(lineText, lineOffset, gc);", "-\t\t", "-\t\tif (horizontalScrollOffset > 0 || offsetInLine > 0) {", "-\t\t\tif (offsetInLine < lineLength && bidi.isRightToLeft(offsetInLine)) {", "-\t\t\t\t// advance caret logically if in R2L segment (move visually left)", "-\t\t\t\tcaretOffset++;", "-\t\t\t\tdoSelection(SWT.RIGHT);", "-\t\t\t\tif (caretOffset - lineOffset == lineLength) {", "-\t\t\t\t\t// if the line end is reached in a R2L segment, make the ", "-\t\t\t\t\t// caret position (visual left border) visible before ", "-\t\t\t\t\t// jumping to segment start", "-\t\t\t\t\tshowCaret();", "-\t\t\t\t}", "-\t\t\t\t// end of R2L segment reached (visual left side)?", "-\t\t\t\tif (bidi.isRightToLeft(caretOffset - lineOffset) == false) {", "-\t\t\t\t\tif (bidi.getTextPosition(caretOffset - lineOffset) < horizontalScrollOffset) {", "-\t\t\t\t\t\t// make beginning of R2L segment visible before going ", "-\t\t\t\t\t\t// left, to L2R segment important if R2L segment ends ", "-\t\t\t\t\t\t// at visual left in order to scroll all the way to the", "-\t\t\t\t\t\t// left. Fixes 1GKM3XS", "-\t\t\t\t\t\tshowCaret();", "-\t\t\t\t\t}", "-\t\t\t\t\t// go to beginning of R2L segment (visually end of next L2R", "-\t\t\t\t\t// segment)/beginning of line", "-\t\t\t\t\tcaretOffset--;", "-\t\t\t\t\twhile (caretOffset - lineOffset > 0 &&", "-\t\t\t\t\t\t   bidi.isRightToLeft(caretOffset - lineOffset)) {", "-\t\t\t\t\t\tcaretOffset--;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse", "-\t\t\tif (offsetInLine == lineLength && ", "-\t\t\t\tbidi.getTextPosition(lineLength) != XINSET) {", "-\t\t\t\t// at logical line end in R2L segment but there's more text (a", "-\t\t\t\t// L2R segment) go to end of R2L segment (visually left of next", "-\t\t\t\t// L2R segment)/end of line", "-\t\t\t\tcaretOffset--;", "-\t\t\t\twhile (caretOffset - lineOffset > 0 && ", "-\t\t\t\t\t   bidi.isRightToLeft(caretOffset - lineOffset)) {", "-\t\t\t\t\tcaretOffset--;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\telse", "-\t\t\tif (offsetInLine > 0 && bidi.isRightToLeft(offsetInLine) == false) {", "-\t\t\t\t// decrease caret logically if in L2R segment (move visually left)", "-\t\t\t\tcaretOffset--;", "-\t\t\t\tdoSelection(SWT.LEFT);", "-\t\t\t\t// end of L2R segment reached (visual left side of preceeding R2L ", "-\t\t\t\t// segment)?", "-\t\t\t\tif (caretOffset - lineOffset > 0 && ", "-\t\t\t\t\tbidi.isRightToLeft(caretOffset - lineOffset - 1)) {", "-\t\t\t\t\t// go to beginning of R2L segment (visually start of next L2R", "-\t\t\t\t\t// segment)/beginning of line", "-\t\t\t\t\tcaretOffset--;", "-\t\t\t\t\twhile (caretOffset - lineOffset > 0 &&", "-\t\t\t\t\t\t   bidi.isRightToLeft(caretOffset - lineOffset - 1)) {", "-\t\t\t\t\t\tcaretOffset--;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t// if new caret position is to the left of the client area", "-\t\t\tif (bidi.getTextPosition(caretOffset - lineOffset) < horizontalScrollOffset) {", "-\t\t\t\t// scroll to the caret position", "-\t\t\t\tshowCaret();", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\t// otherwise just update caret position without scrolling it into view", "-\t\t\t\tsetBidiCaretLocation(null);", "-\t\t\t\tsetBidiKeyboardLanguage();", "-\t\t\t}", "-\t\t\t// Beginning of line reached (auto scroll finished) but not scrolled ", "-\t\t\t// completely to the left? Fixes 1GKM193", "-\t\t\tif (caretOffset - lineOffset == 0 && horizontalScrollOffset > 0 && ", "-\t\t\t\thorizontalScrollOffset <= XINSET) {", "-\t\t\t\tscrollHorizontalBar(-horizontalScrollOffset);", "-\t\t\t}", "-\t\t}", "-\t\tgc.dispose();", "-\t}", "-\telse", "-\tif (offsetInLine > 0) {", "-\t\tcaretOffset--;", "-\t\tshowCaret();", "-\t}", "-}", "+ */", "+void doVisualPrevious() {", "+\tint line = content.getLineAtOffset(caretOffset);", "+\tint lineOffset = content.getOffsetAtLine(line);\t", "+\tint offsetInLine = caretOffset - lineOffset;", "+\t", "+\tif (isBidi()) {", "+\t\t// check if caret location is at the visual beginning of the line", "+\t\tif (columnX <= XINSET && horizontalScrollOffset == 0) { ", "+\t\t\treturn;", "+\t\t}\t\t", "+\t\tString lineText = content.getLine(line);", "+\t\tint lineLength = lineText.length();", "+\t\tGC gc = getGC();", "+\t\tStyledTextBidi bidi = getStyledTextBidi(lineText, lineOffset, gc);", "+\t\tint visualOffset = -1;", "+\t\t", "+\t\tif (offsetInLine == lineLength) {", "+\t\t\t//logical end of line may not be visual end, setup visualOffset to process as usual", "+\t\t\tvisualOffset = bidi.getVisualOffset(offsetInLine - 1);", "+\t\t}", "+\t\telse", "+\t\tif (offsetInLine < lineLength) {", "+\t\t\tvisualOffset = bidi.getVisualOffset(offsetInLine);", "+\t\t}", "+\t\tif (visualOffset != -1) {", "+\t\t\tif (visualOffset > 0) {", "+\t\t\t\tvisualOffset--;", "+\t\t\t\toffsetInLine = bidi.getLogicalOffset(visualOffset);", "+\t\t\t}", "+\t\t\telse", "+\t\t\tif (visualOffset == 0) {", "+\t\t\t\tboolean isRightOriented = (getStyle() & SWT.RIGHT_TO_LEFT) != 0;", "+", "+\t\t\t\t//move to visual line end (i.e., behind L2R character/in front of R2L character at visual 0)", "+\t\t\t\tif ((isRightOriented && bidi.isRightToLeft(offsetInLine) == false) ||", "+\t\t\t\t\t(isRightOriented == false && bidi.isRightToLeft(offsetInLine))) {", "+\t\t\t\t\toffsetInLine++;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif (offsetInLine > 0 && offsetInLine < lineLength) {", "+\t\t\t\t\tif (isRightOriented) {", "+\t\t\t\t\t\tboolean rightToLeftStart = bidi.isRightToLeft(offsetInLine) && bidi.isRightToLeft(offsetInLine - 1) == false;", "+\t\t\t\t\t\tif (rightToLeftStart) {", "+\t\t\t\t\t\t\t//moving from LtoR segment to RtoL segment", "+\t\t\t\t\t\t\tlastCaretDirection = ST.COLUMN_NEXT;", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t\telse {", "+\t\t\t\t\t\tboolean leftToRightStart = bidi.isRightToLeft(offsetInLine) == false && bidi.isRightToLeft(offsetInLine - 1);", "+\t\t\t\t\t\tif (bidi.isLatinNumber(offsetInLine) && bidi.isRightToLeftInput(offsetInLine - 1)) {", "+\t\t\t\t\t\t\t//moving from LtoR segment to latin number ", "+\t\t\t\t\t\t\tlastCaretDirection = ST.COLUMN_PREVIOUS;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\telse", "+\t\t\t\t\t\tif (leftToRightStart) {", "+\t\t\t\t\t\t\t//moving from RtoL segment to LtoR segment", "+\t\t\t\t\t\t\tlastCaretDirection = ST.COLUMN_NEXT;", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcaretOffset = lineOffset + offsetInLine;", "+\t\t\tshowCaret();", "+\t\t}", "+\t\tif (bidi.getTextPosition(offsetInLine, ST.COLUMN_NEXT) == XINSET) {", "+\t\t\t//scroll to origin if caret is at origin", "+\t\t\tscrollHorizontalBar(-horizontalScrollOffset);", "+\t\t}", "+\t\tgc.dispose();", "+\t}", "+\telse", "+\tif (offsetInLine > 0) {", "+\t\tcaretOffset--;", "+\t\tshowCaret();", "+\t}", "+}"]}], "num": 26061}
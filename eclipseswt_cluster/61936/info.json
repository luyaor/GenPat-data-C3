{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c96365e3dfb61979d1683abd9992e8b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dc8dccc18a391366481d766d3d9cfc7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 12, "signatureBeforeChange": "  \tstatic int atkComponent_get_size (int atkObject, int width, int height, int coord_type)", "signatureAfterChange": "  \tstatic int atkComponent_get_size (int atkObject, int width, int height, int coord_type)", "diff": ["-\t\tif (object == null) return 0;", "-\t\tif (ATK.g_type_is_a (object.parentType, ATK_COMPONENT_TYPE)) {", "-\t\t\tint /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));", "-\t\t\tAtkComponentIface componentIface = new AtkComponentIface ();", "-\t\t\tATK.memmove (componentIface, superType);", "-\t\t\tif (componentIface.get_extents != 0) {", "-\t\t\t\tATK.call (componentIface.get_size, object.handle, width, height, coord_type);", "+\t\tAtkComponentIface iface = getComponentIface (atkObject);", "+\t\tif (iface != null && iface.get_size != 0) {", "+\t\t\tATK.call (iface.get_size, atkObject, width, height, coord_type);", "+\t\t}", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleControlListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tint[] parentWidth = new int [1], parentHeight = new int [1];", "+\t\t\t\tOS.memmove (parentWidth, width, 4);", "+\t\t\t\tOS.memmove (parentHeight, height, 4);", "+\t\t\t\tAccessibleControlEvent event = new AccessibleControlEvent (object.accessible);", "+\t\t\t\tevent.childID = object.id;", "+\t\t\t\tevent.width = parentWidth [0]; event.height = parentHeight [0];", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener)listeners.elementAt (i);", "+\t\t\t\t\tlistener.getLocation (event);", "+\t\t\t\t}", "+\t\t\t\tOS.memmove (width, new int[] {event.width}, 4);", "+\t\t\t\tOS.memmove (height, new int[] {event.height}, 4);", "-\t\tAccessibleControlListener[] listeners = object.getControlListeners ();", "-\t\tif (listeners.length == 0) return 0;", "-\t\t", "-\t\tint[] parentWidth = new int [1], parentHeight = new int [1];", "-\t\tOS.memmove (parentWidth, width, 4);", "-\t\tOS.memmove (parentHeight, height, 4);", "-\t\tAccessibleControlEvent event = new AccessibleControlEvent (object.accessible);", "-\t\tevent.childID = object.id;", "-\t\tevent.width = parentWidth [0]; event.height = parentHeight [0];", "-\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\tlisteners [i].getLocation (event);", "-\t\t}", "-\t\tOS.memmove (width, new int[] {event.width}, 4);", "-\t\tOS.memmove (height, new int[] {event.height}, 4);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb295e6357f6f520fa7707e94a3d3cc8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tstatic int atkComponent_ref_accessible_at_point (int atkObject, int x, int y, int coord_type)", "signatureAfterChange": "  \tstatic int atkComponent_ref_accessible_at_point (int atkObject, int x, int y, int coord_type)", "diff": ["-\t\tif (object == null) return 0;", "-\t\tif (ATK.g_type_is_a (object.parentType, ATK_COMPONENT_TYPE)) {", "-\t\t\tint /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));", "-\t\t\tAtkComponentIface componentIface = new AtkComponentIface ();", "-\t\t\tATK.memmove (componentIface, superType);", "-\t\t\tif (componentIface.ref_accessible_at_point != 0) {", "-\t\t\t\tparentResult = ATK.call (componentIface.ref_accessible_at_point, object.handle, x, y, coord_type);", "+\t\tAtkComponentIface iface = getComponentIface (atkObject);", "+\t\tif (iface != null && iface.ref_accessible_at_point != 0) {", "+\t\t\tparentResult = ATK.call (iface.ref_accessible_at_point, atkObject, x, y, coord_type);", "+\t\t}", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleControlListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleControlEvent event = new AccessibleControlEvent (object.accessible);", "+\t\t\t\tevent.childID = object.id;", "+\t\t\t\tevent.x = (int)/*64*/x; event.y = (int)/*64*/y;", "+\t\t\t\tif (coord_type == ATK.ATK_XY_WINDOW) {", "+\t\t\t\t\t/* translate control -> display, for filling in the event to be dispatched */", "+\t\t\t\t\tint /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (atkObject);", "+\t\t\t\t\tGtkAccessible gtkAccessible = new GtkAccessible ();", "+\t\t\t\t\tATK.memmove (gtkAccessible, gtkAccessibleHandle);", "+\t\t\t\t\tint /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);", "+\t\t\t\t\tint /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);\t\t\t\t", "+\t\t\t\t\tint[] topWindowX = new int [1], topWindowY = new int [1];", "+\t\t\t\t\tOS.gdk_window_get_origin (window, topWindowX, topWindowY);", "+\t\t\t\t\tevent.x += topWindowX [0];", "+\t\t\t\t\tevent.y += topWindowY [0]; ", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener)listeners.elementAt (i);", "+\t\t\t\t\tlistener.getChildAtPoint (event);\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\tif (event.childID == object.id) event.childID = ACC.CHILDID_SELF;", "+\t\t\t\tAccessibleObject accObj = object.getChildByID (event.childID);", "+\t\t\t\tif (accObj != null) {", "+\t\t\t\t\tif (parentResult > 0) OS.g_object_unref (parentResult);", "+\t\t\t\t\tOS.g_object_ref (accObj.handle);\t", "+\t\t\t\t\treturn accObj.handle;", "+\t\t\t\t}", "-\t\t}", "-\t\tAccessibleControlListener[] listeners = object.getControlListeners ();", "-\t\tif (listeners.length == 0) return parentResult;", "-\t\t", "-\t\tAccessibleControlEvent event = new AccessibleControlEvent (object.accessible);", "-\t\tevent.childID = object.id;", "-\t\tevent.x = (int)/*64*/x; event.y = (int)/*64*/y;", "-\t\tif (coord_type == ATK.ATK_XY_WINDOW) {", "-\t\t\t/* translate control -> display, for filling in the event to be dispatched */", "-\t\t\tint /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);", "-\t\t\tGtkAccessible gtkAccessible = new GtkAccessible ();", "-\t\t\tATK.memmove (gtkAccessible, gtkAccessibleHandle);", "-\t\t\tint /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);", "-\t\t\tint /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);\t\t\t\t", "-\t\t\tint[] topWindowX = new int [1], topWindowY = new int [1];", "-\t\t\tOS.gdk_window_get_origin (window, topWindowX, topWindowY);", "-\t\t\tevent.x += topWindowX [0];", "-\t\t\tevent.y += topWindowY [0]; ", "-\t\t}", "-\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\tlisteners [i].getChildAtPoint (event);\t\t\t\t", "-\t\t}", "-\t\tif (event.childID == object.id) event.childID = ACC.CHILDID_SELF;", "-\t\tAccessibleObject accObj = object.getChildByID (event.childID);", "-\t\tif (accObj != null) {", "-\t\t\tif (parentResult > 0) OS.g_object_unref (parentResult);", "-\t\t\tOS.g_object_ref (accObj.handle);\t", "-\t\t\treturn accObj.handle;"]}], "num": 61936}
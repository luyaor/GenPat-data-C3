{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c10a983702b28328323a9f06dc4e701", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2605469e94013dce86740899276a94a7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "80da6bf58d24477ede05c59e897d7548ece865fc", "commitAfterChange": "f35602d80d3565855d35f27159f99c1a8d48ebe3", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  int handleCallback(int nextHandler, int theEvent)", "signatureAfterChange": "  int handleCallback(int nextHandler, int theEvent)", "diff": ["+", "+\t\t\t\t\tint[] length = new int[1];", "+\t\t\t\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 4, length, (char[])null);", "+\t\t\t\t\tif (status == OS.noErr && length[0] != 0) {", "+\t\t\t\t\t\tint[] modifiers = new int[1];", "+\t\t\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "+\t\t\t\t\t\tchar[] chars = new char[1];", "+\t\t\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 2, null, chars);", "+\t\t\t\t\t\tif ((modifiers[0] & OS.cmdKey) != 0) {", "+\t\t\t\t\t\t\tswitch (chars[0]) {", "+\t\t\t\t\t\t\t\tcase 'v': {", "+\t\t\t\t\t\t\t\t\tint webView = Cocoa.HIWebViewGetWebView (webViewHandle);", "+\t\t\t\t\t\t\t\t\tCocoa.objc_msgSend (webView, Cocoa.S_paste);", "+\t\t\t\t\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcase 'c': {", "+\t\t\t\t\t\t\t\t\tint webView = Cocoa.HIWebViewGetWebView (webViewHandle);", "+\t\t\t\t\t\t\t\t\tCocoa.objc_msgSend (webView, Cocoa.S_copy);", "+\t\t\t\t\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcase 'x': {", "+\t\t\t\t\t\t\t\t\tint webView = Cocoa.HIWebViewGetWebView (webViewHandle);", "+\t\t\t\t\t\t\t\t\tCocoa.objc_msgSend (webView, Cocoa.S_cut);", "+\t\t\t\t\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0917c12be28407be7337b6b4ace68896", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "811bdeccc1df1329eadad9688114f47a526dc8ab", "commitAfterChange": "3d4fc78948c5be186415043f009f2521a6863797", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \r int processPaint (int damage)", "signatureAfterChange": "\r \r int processPaint (int damage)", "diff": ["+\t\t\t\r", "+\t\t\t/* Get the clipping tiles for children and siblings */\r", "+\t\t\tint clip_tile = getClipping (handle, topHandle (), true, true);\r", "+\r", "+\t\t\t/* Translate the clipping to the current GC coordinates */\r", "+\t\t\tshort [] abs_x = new short [1], abs_y = new short [1];\r", "+\t\t\tOS.PtGetAbsPosition (handle, abs_x, abs_y);\r", "+\t\t\tshort [] dis_abs_x = new short [1], dis_abs_y = new short [1];\r", "+\t\t\tOS.PtGetAbsPosition (OS.PtFindDisjoint (handle), dis_abs_x, dis_abs_y);\r", "+\t\t\tPhPoint_t delta = new PhPoint_t ();\r", "+\t\t\tdelta.x = (short) (abs_x [0] - dis_abs_x [0]);\r", "+\t\t\tdelta.y = (short) (abs_y [0] - dis_abs_y [0]);\r", "+\t\t\tOS.PhTranslateTiles(clip_tile, delta);\r", "+\r", "+\t\t\t/* Set the clipping */\r", "+\t\t\tint[] clip_rects_count = new int [1];\r", "+\t\t\tint clip_rects = OS.PhTilesToRects (clip_tile, clip_rects_count);\r", "+\t\t\tOS.PhFreeTiles (clip_tile);\t\r", "+\t\t\tif (clip_rects_count [0] == 0) {\r", "+\t\t\t\tclip_rects_count [0] = 1;\r", "+\t\t\t\tOS.free (clip_rects);\r", "+\t\t\t\tclip_rects = OS.malloc (PhRect_t.sizeof);\r", "+\t\t\t}\r", "+\t\t\tOS.PgSetMultiClip (clip_rects_count[0], clip_rects);\r", "+\t\t\tOS.free (clip_rects);\r", "+\t\t\t\r", "+\t\t\t/* Draw the widget */\r", "+\t\t\t\r", "+\t\t\t/* Reset the clipping */\r", "+\t\t\tOS.PgSetMultiClip (0, 0);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8296f8bd9ca1cb99ba84b24c39cd1b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\tOS.HIViewAddSubview(handle, webViewHandle);", "+\tint window = OS.GetControlOwner(handle);", "+\tif (OS.HIVIEW) {", "+\t\tint[] contentView = new int[1];", "+\t\tOS.HIViewFindByID(OS.HIViewGetRoot(window), OS.kHIViewWindowContentID(), contentView);", "+\t\tOS.HIViewAddSubview(contentView[0], webViewHandle);", "+\t\tOS.HIViewChangeFeatures(webViewHandle, OS.kHIViewFeatureIsOpaque, 0);", "+\t} else {", "+\t\tOS.HIViewAddSubview(handle, webViewHandle);", "+\t}", "-\t\tOS.SendEventToEventTarget(showEvent[0], OS.GetWindowEventTarget(OS.GetControlOwner(handle)));", "+\t\tOS.SendEventToEventTarget(showEvent[0], OS.GetWindowEventTarget(window));", "-\t\t\t\t\tOS.HIViewGetFrame(handle, bounds);", "+\t\t\t\t\tif (OS.HIVIEW) {", "+\t\t\t\t\t\tOS.HIViewGetBounds(handle, bounds);", "+\t\t\t\t\t\tint[] contentView = new int[1];", "+\t\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(handle)), OS.kHIViewWindowContentID(), contentView);", "+\t\t\t\t\t\tOS.HIViewConvertRect(bounds, handle, contentView[0]);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tOS.HIViewGetFrame(handle, bounds);", "+\t\t\t\t\t}", "-\t\t\t\t\tOS.HIViewGetFrame(handle, bounds);", "+\t\t\t\t\tif (OS.HIVIEW) {", "+\t\t\t\t\t\tOS.HIViewGetBounds(handle, bounds);", "+\t\t\t\t\t\tint[] contentView = new int[1];", "+\t\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(handle)), OS.kHIViewWindowContentID(), contentView);", "+\t\t\t\t\t\tOS.HIViewConvertRect(bounds, handle, contentView[0]);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tOS.HIViewGetFrame(handle, bounds);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4196264fda6251f2d810af4f0fe1c96f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r void createHandle (int index)", "signatureAfterChange": "\r \r void createHandle (int index)", "diff": ["+\r", "+\tstate |= HANDLE;\r", "+\t} else if ((style & SWT.DROP_DOWN) != 0) {\r", "+\t\tint [] args =  {\r", "+\t\t\tOS.Pt_ARG_GROUP_ORIENTATION, OS.Pt_GROUP_HORIZONTAL, 0,\r", "+\t\t\tOS.Pt_ARG_GROUP_FLAGS, OS.Pt_GROUP_EQUAL_SIZE_VERTICAL, OS.Pt_GROUP_EQUAL_SIZE_VERTICAL,\r", "+\t\t};\r", "+\t\thandle = OS.PtCreateWidget (OS.PtGroup (), parentHandle, args.length / 3, args);\r", "+\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);\r", "+\t\tboolean rightAligned = (parent.style & SWT.RIGHT) != 0;\r", "+\t\targs =  new int [] {\r", "+\t\t\tOS.Pt_ARG_BALLOON_POSITION, rightAligned ? OS.Pt_BALLOON_RIGHT : OS.Pt_BALLOON_BOTTOM, 0,\r", "+\t\t\tOS.Pt_ARG_BASIC_FLAGS, 0, OS.Pt_RIGHT_ETCH | OS.Pt_RIGHT_OUTLINE,\r", "+\t\t};\r", "+\t\tbutton = OS.PtCreateWidget (OS.PtButton (), handle, args.length / 3, args);\r", "+\t\tif (button == 0) error (SWT.ERROR_NO_HANDLES);\r", "+\t\tint arrowImage = createArrowImage ();\r", "+\t\targs =  new int [] {\r", "+\t\t\tOS.Pt_ARG_LABEL_IMAGE, arrowImage, 0,\r", "+\t\t\tOS.Pt_ARG_LABEL_TYPE, OS.Pt_IMAGE, 0,\r", "+\t\t\tOS.Pt_ARG_MARGIN_WIDTH, 1, 0,\r", "+\t\t\tOS.Pt_ARG_BASIC_FLAGS, 0, OS.Pt_LEFT_ETCH | OS.Pt_LEFT_OUTLINE,\r", "+\t\t};\r", "+\t\tarrow = OS.PtCreateWidget (OS.PtButton (), handle, args.length / 3, args);\r", "+\t\tOS.free (arrowImage);\r", "+\t\tif (arrow == 0) error (SWT.ERROR_NO_HANDLES);\r", "-\t\thandle = OS.PtCreateWidget (OS.PtButton (), parentHandle, args.length / 3, args);\r", "+\t\thandle = button = OS.PtCreateWidget (OS.PtButton (), parentHandle, args.length / 3, args);\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ac29f4fd85f76b52c0c4b2ccb5fa66a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "3f40366a943605922c1277c5d17602a9e3318911", "commitAfterChange": "c8d5e49d5a2c0817d6316dd3dfcd4087e493d9a8", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "  int kEventUnicodeKeyPressed (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventUnicodeKeyPressed (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tcase 126: /* Up*/", "+\t\tcase 126: /* Up*/ {", "+\t\t\tint [] itemCount = new int [1];", "+\t\t\tif (OS.GetDataBrowserItemCount (handle, OS.kDataBrowserNoItem, false, OS.kDataBrowserItemAnyState, itemCount) == OS.noErr) {", "+\t\t\t\tif (itemCount [0] == 0) break;", "+\t\t\t}", "-\t\t\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\tint [] itemId = null;", "+\t\t\tint [] selectionCount = new int [1];", "+\t\t\tif (OS.GetDataBrowserItemCount (handle, OS.kDataBrowserNoItem, true, OS.kDataBrowserItemIsSelected, selectionCount) == OS.noErr) {", "+\t\t\t\tif (savedAnchor != 0 && selectionCount [0] == 0) {", "+\t\t\t\t\tint [] index = new int [1];", "+\t\t\t\t\tif (OS.GetDataBrowserTableViewItemRow (handle, savedAnchor, index) == OS.noErr) {", "+\t\t\t\t    \tindex [0] = index [0] + (keyCode [0] == 125 ? 1 : -1);", "+\t\t\t\t    \titemId = new int [1];", "+\t\t\t\t    \tif (OS.GetDataBrowserTableViewItemID (handle, index [0], itemId) != OS.noErr) {", "+\t\t\t\t    \t\titemId [0] = savedAnchor;", "+\t\t\t\t    \t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (itemId != null) {", "+\t\t\t\tOS.SetDataBrowserSelectedItems (handle, 1, itemId, OS.kDataBrowserItemsAssign);", "+\t\t\t\tresult = OS.noErr;", "+\t\t\t} else {", "+\t\t\t\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\t}", "-\t\t\t", "+\t\t\tbreak;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9506048fdf1cfe469bf5a201e7cf3f09", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void copyArea(int srcX, int srcY, int width, int height, int destX, int destY, boolean paint)", "signatureAfterChange": " public void copyArea(int srcX, int srcY, int width, int height, int destX, int destY, boolean paint)", "diff": ["-\t\tOS.GetControlBounds(data.control, rect);\t\t", "+\t\tOS.GetControlBounds(data.control, rect);", "+\t\tint convertX = 0, convertY = 0;", "+\t\tif (OS.HIVIEW) {", "+\t\t\tCGPoint pt = new CGPoint ();", "+\t\t\tint[] contentView = new int[1];", "+\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(window), OS.kHIViewWindowContentID(), contentView);", "+\t\t\tOS.HIViewConvertPoint(pt, OS.HIViewGetSuperview(data.control), contentView[0]);", "+\t\t\tconvertX = rect.left + (int) pt.x;", "+\t\t\tconvertY = rect.top + (int) pt.y;", "+\t\t\trect.left += (int) pt.x;", "+\t\t\trect.top += (int) pt.y;", "+\t\t\trect.right += (int) pt.x;", "+\t\t\trect.bottom += (int) pt.y;", "+\t\t}", "-\t\tOS.RectRgn(srcRgn, srcRect);\t\t", "+\t\tOS.RectRgn(srcRgn, srcRect);", "-\t\t\tOS.InvalWindowRgn(window, invalRgn);", "+\t\t\tif (OS.HIVIEW) {", "+\t\t\t\tOS.OffsetRgn(invalRgn, (short)-convertX, (short)-convertY);", "+\t\t\t\tOS.HIViewSetNeedsDisplayInRegion(data.control, invalRgn, true);", "+\t\t\t} else {", "+\t\t\t\tOS.InvalWindowRgn(window, invalRgn);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7a676d64b9ebbcb30e5a0ea195e5ff7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "3f40366a943605922c1277c5d17602a9e3318911", "commitAfterChange": "c8d5e49d5a2c0817d6316dd3dfcd4087e493d9a8", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "  int kEventUnicodeKeyPressed (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventUnicodeKeyPressed (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tcase 126: /* Up*/", "+\t\tcase 126: /* Up*/ {", "+\t\t\tif (itemCount == 0) break;", "-\t\t\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\tboolean selectItem = false;", "+\t\t\tint [] selectionCount = new int [1];", "+\t\t\tif (OS.GetDataBrowserItemCount (handle, OS.kDataBrowserNoItem, true, OS.kDataBrowserItemIsSelected, selectionCount) == OS.noErr) {", "+\t\t\t\tselectItem = savedAnchor != 0 && selectionCount [0] == 0;", "+\t\t\t}", "+\t\t\tif (selectItem) {", "+\t\t\t    int index = getIndex (savedAnchor) + (keyCode [0] == 125 ? 1 : -1);", "+\t\t\t    index = Math.max (0, Math.min (itemCount - 1, index));", "+\t\t\t    int [] itemId = new int [] {getId (index)};", "+\t\t\t\tOS.SetDataBrowserSelectedItems (handle, 1, itemId, OS.kDataBrowserItemsAssign);", "+\t\t\t\tresult = OS.noErr;", "+\t\t\t} else {", "+\t\t\t\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\t}", "-", "+\t\t\tbreak;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c95a35b1c640846809539e85e0a6a60d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon2/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "64cbe9dba56fd19153259107fd9e294dc23f8148", "commitAfterChange": "f3c932634f01c615b66ab97c33ec9f24e06338d1", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  int itemNotificationProc (int browser, int id, int message)", "signatureAfterChange": "  int itemNotificationProc (int browser, int id, int message)", "diff": ["+\t\tcase OS.kDataBrowserContainerClosing: {", "+\t\t\t/*", "+\t\t\t* Bug in the Macintosh.  For some reason, if the selected sub items of an item", "+\t\t\t* get a kDataBrowserItemDeselected notificaton when the item is collapsed, a", "+\t\t\t* call to GetDataBrowserSelectionAnchor () will cause a segment fault.  The", "+\t\t\t* fix is to deselect these items ignoring kDataBrowserItemDeselected and them", "+\t\t\t* issue a selection event.", "+\t\t\t*/", "+\t\t\tint ptr = OS.NewHandle (0);", "+\t\t\tif (OS.GetDataBrowserItems (handle, item.id, true, OS.kDataBrowserItemIsSelected, ptr) == OS.noErr) {", "+\t\t\t\tint count = OS.GetHandleSize (ptr) / 4;", "+\t\t\t\tif (count > 0) {", "+\t\t\t\t\tint [] ids = new int [count];", "+\t\t\t\t\tOS.HLock (ptr);", "+\t\t\t\t\tint [] start = new int [1];", "+\t\t\t\t\tOS.memcpy (start, ptr, 4);", "+\t\t\t\t\tOS.memcpy (ids, start [0], count * 4);", "+\t\t\t\t\tOS.HUnlock (ptr);", "+\t\t\t\t\tignoreSelect = true;", "+\t\t\t\t\tOS.SetDataBrowserSelectedItems (handle, ids.length, ids, OS.kDataBrowserItemsRemove);", "+\t\t\t\t\tignoreSelect = false;", "+\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\tevent.item = item;", "+\t\t\t\t\tif (ignoreExpand) {", "+\t\t\t\t\t\tsendEvent (SWT.Selection, event);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tpostEvent (SWT.Selection, event);", "+\t\t\t\t\t}\t\t\t\t\t\t ", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.DisposeHandle (ptr);", "+\t\t\tbreak;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f6ea0790ce1ec8205c9b9d4089234183", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d4ce2fe3631bc060a94000536e7454e9ee602a3d", "commitAfterChange": "be954920b3bf51c2767d57c5bc9db3ba96994f28", "methodNumberBeforeChange": 175, "methodNumberAfterChange": 175, "signatureBeforeChange": "  void applicationWillFinishLaunching (int id, int sel, int notification)", "signatureAfterChange": "  void applicationWillFinishLaunching (int id, int sel, int notification)", "diff": ["+\t", "+\t/*", "+\t * Bug in AWT:  If the AWT starts up first when the VM was started on the first thread it assumes that", "+\t * a Carbon-based SWT will be used, so it calls NSApplicationLoad().  This causes the Carbon menu", "+\t * manager to create an application menu that isn't accessible via NSMenu.  It is, however, accessible", "+\t * via the Carbon menu manager, so find and delete the menu items it added. ", "+\t * ", "+\t * Note that this code will continue to work if Apple does change this. GetIndMenuWithCommandID will", "+\t * return a non-zero value indicating failure, which we ignore.", "+\t */", "+\tif (isEmbedded) {", "+\t\tint /*long*/ outMenu [] = new int /*long*/ [1];", "+\t\tshort outIndex[] = new short[1];", "+\t\tint status = OS.GetIndMenuItemWithCommandID(0, OS.kHICommandHide, 1, outMenu, outIndex);", "+\t\tif (status == 0) OS.DeleteMenuItem(outMenu[0], outIndex[0]);", "+\t\tstatus = OS.GetIndMenuItemWithCommandID(0, OS.kHICommandHideOthers, 1, outMenu, outIndex);", "+\t\tif (status == 0) OS.DeleteMenuItem(outMenu[0], outIndex[0]);", "+\t\tstatus = OS.GetIndMenuItemWithCommandID(0, OS.kHICommandShowAll, 1, outMenu, outIndex);", "+\t\tif (status == 0) OS.DeleteMenuItem(outMenu[0], outIndex[0]);", "+\t\tstatus = OS.GetIndMenuItemWithCommandID(0, OS.kHICommandQuit, 1, outMenu, outIndex);", "+\t\tif (status == 0) OS.DeleteMenuItem(outMenu[0], outIndex[0]);", "+\t\tstatus = OS.GetIndMenuItemWithCommandID(0, OS.kHICommandServices, 1, outMenu, outIndex);", "+\t\tif (status == 0) OS.DeleteMenuItem(outMenu[0], outIndex[0]);", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0769f81400e1160f544d6d0df2b48a24", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/carbon/org/eclipse/swt/browser/MozillaDelegate.java", "commitBeforeChange": "2291cc53864300688c3a58c6df5ee259c93044d9", "commitAfterChange": "05a8cbba5a9312a46e3a6b81585ac0edaa21107d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  static int eventProc3 (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  static int eventProc3 (int nextHandler, int theEvent, int userData)", "diff": ["+\t\t\t\tint result = OS.noErr;", "-\t\t\t\tint result = OS.CallNextEventHandler (nextHandler, theEvent);", "+", "+\t\t\t\t/*", "+\t\t\t\t* Pressing the OSX shortcut to put focus into the menu bar does not work in", "+\t\t\t\t* embedded mozilla.  If this shortcut is not handled here then it falls through", "+\t\t\t\t* all of the key handlers for some reason.  The workaround is to detect this", "+\t\t\t\t* shortcut here and put focus into the menu bar.", "+\t\t\t\t*/", "+\t\t\t\tint [] modifiers = new int [1];", "+\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, modifiers.length * 4, null, modifiers);", "+\t\t\t\tint [] keyCode = new int [1];", "+\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "+\t\t\t\tif (keyCode [0] == 120 /* F2 */ && (modifiers[0] & (OS.controlKey | OS.cmdKey | OS.optionKey)) == OS.controlKey) {", "+\t\t\t\t\tint[] event = new int[1];", "+\t\t\t\t\tOS.CreateEvent (0, OS.kEventClassApplication, OS.kEventAppFocusMenuBar, 0.0, 0, event);", "+\t\t\t\t\tif (event [0] != 0) {", "+\t\t\t\t\t\tOS.SetEventParameter (event [0], OS.kEventParamKeyModifiers, OS.typeUInt32, 4, modifiers);", "+\t\t\t\t\t\tresult = OS.SendEventToEventTarget (event [0], OS.GetApplicationEventTarget ());", "+\t\t\t\t\t\tOS.ReleaseEvent (event [0]);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\t\t}", "+"]}], "num": 26748}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b23d9aba2132c18068ab96fe7f12a47f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ea5f72efb7569f5a0508a18ce0127af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/cocoa/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "4edc576de20a88abac088ae701d29ce3e54ede4f", "commitAfterChange": "c2ec875b36ecf39df432358c14d183b7d7f45fe0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 7, "signatureBeforeChange": " \t\t\tpublic void run()", "signatureAfterChange": "  static int browserProc(int id, int sel, int arg0, int arg1, int arg2)", "diff": ["-\t\tdisplay.disposeExec(new Runnable() {", "-\t\t\tpublic void run() {", "-\t\t\t\tif (outWindow[0] != 0) {", "-\t\t\t\t\tOS.DisposeWindow(outWindow[0]);", "-\t\t\t\t}", "-\t\t\t\toutWindow[0] = 0;", "-\t\t\t}", "+", "+static int browserProc(int id, int sel, int arg0, int arg1, int arg2) {", "+\tint jniRef = OS.objc_msgSend(id, OS.sel_tag);", "+\tif (jniRef == 0 || jniRef == -1) return 0;", "+\tSafari widget = (Safari)OS.JNIGetObject(jniRef);", "+\tif (widget == null) return 0;", "+\tif (sel == OS.sel_webView_1didFailProvisionalLoadWithError_1forFrame_1) {", "+\t\twidget.webView_didFailProvisionalLoadWithError_forFrame(arg0, arg1, arg2);", "+\t} else if (sel == OS.sel_webView_1didReceiveTitle_1forFrame_1) {", "+\t\twidget.webView_didReceiveTitle_forFrame(arg0, arg1, arg2);", "+\t} else if (sel == OS.sel_webView_1resource_1didFinishLoadingFromDataSource_1) {", "+\t\twidget.webView_resource_didFinishLoadingFromDataSource(arg0, arg1, arg2);", "+\t} else if (sel == OS.sel_webView_1identifierForInitialRequest_1fromDataSource_1) {", "+\t\treturn widget.webView_identifierForInitialRequest_fromDataSource(arg0, arg1, arg2);", "+\t} else if (sel == OS.sel_webView_1contextMenuItemsForElement_1defaultMenuItems_1) {", "+\t\treturn widget.webView_contextMenuItemsForElement_defaultMenuItems(arg0, arg1, arg2);", "+\t} else if (sel == OS.sel_webView_1mouseDidMoveOverElement_1modifierFlags_1) {", "+\t\twidget.webView_mouseDidMoveOverElement_modifierFlags(arg0, arg1, arg2);", "+\t} else if (sel == OS.sel_webView_1unableToImplementPolicyWithError_1frame_1) {", "+\t\twidget.webView_unableToImplementPolicyWithError_frame(arg0, arg1, arg2);", "+\t}", "+\treturn 0;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c411dda43040ae996885caf36c4340df", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "b796db7a88d068fbce3590cf91dcc3e9c7f9c320", "commitAfterChange": "37c57c08e60a278244a46818f49a47ece9a0e524", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 11, "signatureBeforeChange": " \t\tpublic void run()", "signatureAfterChange": "  static int dropTargetProc(int id, int sel, int arg0)", "diff": ["-\tdragOverHeartbeat = new Runnable() {", "-\t\tpublic void run() {", "-\t\t\tControl control = DropTarget.this.control;", "-\t\t\tif (control == null || control.isDisposed() || dragOverStart == 0) return;", "-\t\t\tlong time = System.currentTimeMillis();", "-\t\t\tint delay = DRAGOVER_HYSTERESIS;", "-\t\t\tif (time < dragOverStart) {", "-\t\t\t\tdelay = (int)(dragOverStart - time);", "-\t\t\t} else {\t", "-\t\t\t\tint allowedOperations = dragOverEvent.operations;", "-\t\t\t\tTransferData[] allowedTypes = dragOverEvent.dataTypes;", "-\t\t\t\t//pass a copy of data types in to listeners in case application modifies it", "-\t\t\t\tTransferData[] dataTypes = new TransferData[allowedTypes.length];", "-\t\t\t\tSystem.arraycopy(allowedTypes, 0, dataTypes, 0, dataTypes.length);", "-\t", "-\t\t\t\tDNDEvent event = new DNDEvent();", "-\t\t\t\tevent.widget = dragOverEvent.widget;", "-\t\t\t\tevent.x = dragOverEvent.x;", "-\t\t\t\tevent.y = dragOverEvent.y;", "-\t\t\t\tevent.time = (int)time;", "-\t\t\t\tevent.feedback = DND.FEEDBACK_SELECT;", "-\t\t\t\tevent.dataTypes = dataTypes;", "-\t\t\t\tevent.dataType = selectedDataType;", "-\t\t\t\tevent.operations = dragOverEvent.operations;", "-\t\t\t\tevent.detail  = selectedOperation;", "-\t\t\t\tif (dropEffect != null) {", "-\t\t\t\t\tevent.item = dropEffect.getItem(event.x, event.y);", "-\t\t\t\t}", "-\t\t\t\tselectedDataType = null;", "-\t\t\t\tselectedOperation = DND.DROP_NONE;\t\t\t\t", "-\t\t\t\tnotifyListeners(DND.DragOver, event);", "-\t\t\t\tif (event.dataType != null) {", "-\t\t\t\t\tfor (int i = 0; i < allowedTypes.length; i++) {", "-\t\t\t\t\t\tif (allowedTypes[i].type == event.dataType.type) {", "-\t\t\t\t\t\t\tselectedDataType = event.dataType;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (selectedDataType != null && (event.detail & allowedOperations) != 0) {", "-\t\t\t\t\tselectedOperation = event.detail;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcontrol = DropTarget.this.control;", "-\t\t\tif (control == null || control.isDisposed()) return;", "-\t\t\tcontrol.getDisplay().timerExec(delay, dragOverHeartbeat);", "-\t\t}", "+", "+static int /*long*/ dropTargetProc(int /*long*/ id, int /*long*/ sel, int /*long*/ arg0) {", "+\tDisplay display = Display.findDisplay(Thread.currentThread());", "+\tif (display == null || display.isDisposed()) return 0;", "+\tWidget widget = display.findWidget(id);", "+\tif (widget == null) return 0;", "+\tDropTarget dt = (DropTarget)widget.getData(DND.DROP_TARGET_KEY);", "+\tif (dt == null) return 0;", "+\t", "+\t// arg0 is _always_ the sender, and implements NSDraggingInfo.", "+\t// Looks like an NSObject for our purposes, though.", "+\tNSObject sender = new NSObject(arg0);", "+\t", "+\tif (sel == OS.sel_draggingEntered_) {", "+\t\treturn dt.draggingEntered(sender);", "+\t} else if (sel == OS.sel_draggingUpdated_) {", "+\t\treturn dt.draggingUpdated(sender);", "+\t} else if (sel == OS.sel_draggingExited_) {", "+\t\tdt.draggingExited(sender);", "+\t} else if (sel == OS.sel_performDragOperation_) {", "+\t\treturn dt.performDragOperation(sender) ? 1 : 0;", "+\t}", "+\t", "+\treturn 0;", "+}"]}], "num": 59675}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9b5fe044c2a4edb642e91a55090365f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3bdb757de0ca0095fa4e56a6165b456", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "61e9d1e36b247e8d7212c985a309e271586ecf1b", "commitAfterChange": "de99758dc483ca2e9c030e16d8437ab862b4c593", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["-\t/*", "-\t * Feature in the Macintosh.  On OS 10.2, it is necessary", "-\t * to explicitly check in with the Process Manager and set", "-\t * the current process to be the front process in order for", "-\t * windows to come to the front by default.  The fix is call", "-\t * both GetCurrentProcess() and SetFrontProcess().", "-\t * ", "-\t * NOTE: It is not actually necessary to use the process", "-\t * serial number returned by GetCurrentProcess() in the", "-\t * call to SetFrontProcess() (ie. kCurrentProcess can be", "-\t * used) but both functions must be called in order for", "-\t * windows to come to the front.", "-\t */", "-\tint [] psn = new int [2];", "-\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "-\t\tint pid = OS.getpid ();", "-\t\tint /*long*/ ptr = getAppName().UTF8String();", "-\t\tif (ptr != 0) OS.CPSSetProcessName (psn, ptr);", "-\t\tOS.TransformProcessType (psn, OS.kProcessTransformToForegroundApplication);", "-\t\tOS.SetFrontProcess (psn);", "-\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid));", "-\t\tif (ptr != 0) {", "-\t\t\tNSString path = NSString.stringWithUTF8String (ptr);", "-\t\t\tNSImage image = (NSImage) new NSImage().alloc();", "-\t\t\timage = image.initByReferencingFile(path);", "-\t\t\tdockImage = image;", "-\t\t\tapplication.setApplicationIconImage(image);", "+\tboolean bundled = NSBundle.mainBundle().bundleIdentifier() == null;", "+\tif (bundled) {", "+\t\t/*", "+\t\t * Feature in the Macintosh.  On OS 10.2, it is necessary", "+\t\t * to explicitly check in with the Process Manager and set", "+\t\t * the current process to be the front process in order for", "+\t\t * windows to come to the front by default.  The fix is call", "+\t\t * both GetCurrentProcess() and SetFrontProcess().", "+\t\t * ", "+\t\t * NOTE: It is not actually necessary to use the process", "+\t\t * serial number returned by GetCurrentProcess() in the", "+\t\t * call to SetFrontProcess() (ie. kCurrentProcess can be", "+\t\t * used) but both functions must be called in order for", "+\t\t * windows to come to the front.", "+\t\t */", "+\t\tint [] psn = new int [2];", "+\t\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "+\t\t\tint pid = OS.getpid ();", "+\t\t\tint /*long*/ ptr = getAppName().UTF8String();", "+\t\t\tif (ptr != 0) OS.CPSSetProcessName (psn, ptr);", "+\t\t\tOS.TransformProcessType (psn, OS.kProcessTransformToForegroundApplication);", "+\t\t\tOS.SetFrontProcess (psn);", "+\t\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid));", "+\t\t\tif (ptr != 0) {", "+\t\t\t\tNSString path = NSString.stringWithUTF8String (ptr);", "+\t\t\t\tNSImage image = (NSImage) new NSImage().alloc();", "+\t\t\t\timage = image.initByReferencingFile(path);", "+\t\t\t\tdockImage = image;", "+\t\t\t\tapplication.setApplicationIconImage(image);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbb229673da9114498387f6981fdbb10", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "6e5f0eee4d45442c0288f27c28fcb62ccfb28775", "commitAfterChange": "f3ac46f80431e506717343a9003388d250c1856a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  int _getOffset(int offset, int movement, boolean forward)", "signatureAfterChange": "  int _getOffset(int offset, int movement, boolean forward)", "diff": ["-\t\t\tbreakRun(run);", "+\t\t\tboolean isComplex = properties.fNeedsCaretInfo || properties.fNeedsWordBreaking;", "+\t\t\tif (isComplex) breakRun(run);", "-\t\t\t\tOS.MoveMemory(logAttr, run.psla + ((offset - run.start) * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof);", "+\t\t\t\tif (isComplex) {", "+\t\t\t\t\tOS.MoveMemory(logAttr, run.psla + ((offset - run.start) * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof);", "+\t\t\t\t}"]}], "num": 20780}
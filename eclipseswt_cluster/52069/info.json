{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc88713277d6fb4881461ff28721cc7e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed71588561d928e37c92893fda8c29f8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/GridLayout.java", "commitBeforeChange": "702db0f284de446da757fd3ee208896dbb2fd7fb", "commitAfterChange": "cb48ee3dfb90e4b0bbbaf2bb0eecef2cccfd1280", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  Point layout (Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)", "signatureAfterChange": "  Point layout (Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)", "diff": ["-\t\t\t\t\t\tif (spanExpandCount == 0) {", "-\t\t\t\t\t\t\twidths [j] += w;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tint delta = w / spanExpandCount;", "-\t\t\t\t\t\t\tint remainder = w % spanExpandCount, last = -1;", "+\t\t\t\t\t\tif (makeColumnsEqualWidth) {", "+\t\t\t\t\t\t\tint equalWidth = (w + spanWidth) / hSpan;", "+\t\t\t\t\t\t\tint remainder = (w + spanWidth) % hSpan, last = -1;", "-\t\t\t\t\t\t\t\tif (expandColumn [j-k]) {", "-\t\t\t\t\t\t\t\t\twidths [last=j-k] += delta;", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\twidths [last=j-k] = Math.max (equalWidth, widths [j-k]);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (spanExpandCount == 0) {", "+\t\t\t\t\t\t\t\twidths [j] += w;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tint delta = w / spanExpandCount;", "+\t\t\t\t\t\t\t\tint remainder = w % spanExpandCount, last = -1;", "+\t\t\t\t\t\t\t\tfor (int k = 0; k < hSpan; k++) {", "+\t\t\t\t\t\t\t\t\tif (expandColumn [j-k]) {", "+\t\t\t\t\t\t\t\t\t\twidths [last=j-k] += delta;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (last > -1) widths [last] += remainder;", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e245840ee73f14aa8a77229295994aa6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/wpf/org/eclipse/swt/program/Program.java", "commitBeforeChange": "25e0a88282a8f52572829023c99494b77782afb9", "commitAfterChange": "4492e7490e450a65a8ceed26e7c2cb00d8b99b49", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public ImageData getImageData ()", "signatureAfterChange": " public ImageData getImageData ()", "diff": ["-\t//TODO", "-\treturn null;", "+\tint nIconIndex = 0;", "+\tString fileName = iconName;", "+\tint index = iconName.indexOf (',');", "+\tif (index != -1) {", "+\t\tfileName = iconName.substring (0, index);", "+\t\tString iconIndex = iconName.substring (index + 1, iconName.length ()).trim ();", "+\t\ttry {", "+\t\t\tnIconIndex = Integer.parseInt (iconIndex);", "+\t\t} catch (NumberFormatException e) {}", "+\t}", "+\tint length = fileName.length ();", "+\tchar [] buffer = new char [length + 1];", "+\tfileName.getChars (0, length, buffer, 0);", "+\tint [] phiconSmall = new int [1], phiconLarge = null;", "+\tOS.ExtractIconExW (buffer, nIconIndex, phiconLarge, phiconSmall, 1);", "+\tif (phiconSmall [0] == 0) return null;", "+\tint empty = OS.Int32Rect_Empty ();", "+\tint source = OS.Imaging_CreateBitmapSourceFromHIcon (phiconSmall [0], empty, 0);", "+\tImage image = Image.wpf_new (null, SWT.ICON, source);", "+\tOS.GCHandle_Free (empty);", "+\tImageData imageData = image.getImageData ();", "+\timage.dispose ();", "+\treturn imageData;"]}], "num": 52069}
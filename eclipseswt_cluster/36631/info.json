{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e4046999fd0ff0c25bd8bd96eed2373", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "484197845641252f9f0558842cae50f9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Display.java", "commitBeforeChange": "3ace99cc2cbeca175428eabbe777b2fc353f5d7d", "commitAfterChange": "38b0d2b8f58957af87b01bf2967bf37e853d55b0", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 48, "signatureBeforeChange": "  public void test_postLorg_eclipse_swt_widgets_Event()", "signatureAfterChange": "  public void test_postLorg_eclipse_swt_widgets_Event()", "diff": ["-\twarnUnimpl(\"Test test_postLorg_eclipse_swt_widgets_Event not written\");", "+\tboolean success;", "+\tfinal boolean verifiedEvent[] = new boolean[5];", "+\t", "+\tfinal int KEYUP = 0;", "+\tfinal int KEYDOWN = 1;", "+\tfinal int MOUSEUP = 2;", "+\tfinal int MOUSEDOWN = 3;", "+\tfinal int MOUSEMOVE = 4;", "+\tfinal int CHARACTER = ' '; \t// space character works both in bidi language and western", "+\t", "+\tDisplay display = new Display();", "+\ttry {", "+\t\ttry {", "+\t\t\tdisplay.post(null);", "+\t\t\tfail(\"No exception thrown for post with null argument\");", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t\tassertEquals(\"Incorrect exception thrown for post with null argument\", SWT.ERROR_NULL_ARGUMENT, e);", "+\t\t}", "+\t\t", "+\t\tShell shell = new Shell(display, SWT.NO_TRIM);", "+\t\tshell.setBounds(display.getBounds());", "+\t\tshell.open();", "+\t\t", "+\t\tshell.addKeyListener(new KeyListener() {", "+\t\t\tpublic void keyPressed(KeyEvent e) {", "+\t\t\t\tif (e.character == CHARACTER)", "+\t\t\t\t\tverifiedEvent[KEYDOWN] = true;", "+\t\t\t}", "+\t\t\t", "+\t\t\tpublic void keyReleased(KeyEvent e) {", "+\t\t\t\tif (e.keyCode == SWT.F5)", "+\t\t\t\t\tverifiedEvent[KEYUP] = true;", "+\t\t\t}", "+\t\t});", "+\t\tshell.addMouseListener(new MouseListener() {", "+\t\t\tpublic void mouseDoubleClick(MouseEvent e) {", "+\t\t\t\tfail(\"Unsupported mouse double-click event was received\");", "+\t\t\t}", "+\t\t\tpublic void mouseDown(MouseEvent e) {", "+\t\t\t\tif (e.button == 1)", "+\t\t\t\t\tverifiedEvent[MOUSEDOWN] = true;", "+\t\t\t}", "+\t\t\tpublic void mouseUp(MouseEvent e) {", "+\t\t\t\tif (e.button == 1)", "+\t\t\t\t\tverifiedEvent[MOUSEUP] = true;", "+\t\t\t}", "+\t\t});", "+\t\tshell.addMouseMoveListener(new MouseMoveListener() {", "+\t\t\tpublic void mouseMove(MouseEvent e) {", "+\t\t\t\tverifiedEvent[MOUSEMOVE] = true;", "+\t\t\t}", "+\t\t});", "+\t\t", "+\t\tEvent event;", "+\t\t", "+\t\t// Test key events (down/up)", "+\t\tevent = new Event();", "+\t\tevent.type = SWT.KeyDown;", "+\t\tevent.character = (char) -1;  \t// bogus character", "+\t\tassertFalse(display.post(event));", "+\t\tevent.character = CHARACTER;", "+\t\tshell.setFocus();", "+\t\tassertTrue(display.post(event));", "+\t\tevent.type = SWT.KeyUp;", "+\t\tshell.setFocus();", "+\t\tassertTrue(display.post(event));", "+\t\t", "+\t\tevent = new Event();", "+\t\tevent.type = SWT.KeyUp;", "+\t\tevent.character = (char) -1;  \t// bogus character", "+\t\tevent.keyCode = -1;  \t\t\t// bogus keyCode", "+\t\tassertFalse(display.post(event));", "+", "+\t\tevent.type = SWT.KeyDown;", "+\t\tevent.keyCode = SWT.F5;", "+\t\tshell.setFocus();", "+\t\tassertTrue(display.post(event));", "+\t\tevent.type = SWT.KeyUp;", "+\t\tshell.setFocus();", "+\t\tassertTrue(display.post(event));", "+\t\t", "+\t\t// Test mouse events (down/up/move)", "+\t\tevent = new Event();", "+\t\tevent.type = SWT.MouseDown;", "+\t\tassertFalse(display.post(event));  // missing button", "+\t\tevent.button = 1;", "+\t\tshell.setFocus();", "+\t\tassertTrue(display.post(event));", "+\t\t", "+\t\tevent = new Event();", "+\t\tevent.type = SWT.MouseUp;", "+\t\tassertFalse(display.post(event));  // missing button", "+\t\tevent.button = 1;", "+\t\tshell.setFocus();", "+\t\tassertTrue(display.post(event));", "+\t\t", "+\t\tevent = new Event();", "+\t\tevent.type = SWT.MouseMove;", "+\t\tevent.x = 50;", "+\t\tevent.y = 100;", "+\t\tshell.setFocus();", "+\t\tassertTrue(display.post(event));", "+\t\t", "+\t\t// Test unsupported event", "+\t\tevent = new Event();", "+\t\tevent.type = SWT.MouseDoubleClick;", "+\t\tassertFalse(display.post(event));", "+\t\t", "+\t\t// Verify expected events were posted", "+\t\twhile (display.readAndDispatch()) {}", "+\t\tshell.dispose();", "+\t\t", "+\t\tassertTrue(\"posted KeyDown event not received\", verifiedEvent[KEYDOWN]);", "+\t\tassertTrue(\"posted KeyUp event not received\", verifiedEvent[KEYUP]);", "+\t\tassertTrue(\"posted MouseDown event not received\", verifiedEvent[MOUSEDOWN]);", "+\t\tassertTrue(\"posted MouseUp event not received\", verifiedEvent[MOUSEUP]);", "+\t\tassertTrue(\"posted MouseMove event not received\", verifiedEvent[MOUSEMOVE]);", "+\t} finally {", "+\t\tdisplay.dispose();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8358727e7692925bb0e105c64839ed7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ec0f35229704d59e8a0e8d08c5de254e59e57d5b", "commitAfterChange": "520d1ed0b907299aeb948cdb51785c50502c0827", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 70, "signatureBeforeChange": " void paint (GC gc, TreeColumn column, boolean paintCellContent)", "signatureAfterChange": " boolean paint (GC gc, TreeColumn column, boolean backgroundOnly)", "diff": ["-void paint (GC gc, TreeColumn column, boolean paintCellContent) {", "-\tif (!parent.checkData (this, true)) return;", "+boolean paint (GC gc, TreeColumn column, boolean backgroundOnly) {", "+\tif (!parent.checkData (this, true)) return false;", "+", "+\tif (parent.hooks (SWT.MeasureItem) && parent.columns.length == 0) {", "+\t\tint contentWidth = getContentWidth (columnIndex);", "+\t\tint contentX = getContentX (columnIndex);", "+\t\tgc.setFont (getFont (columnIndex, false));", "+\t\tEvent event = new Event ();", "+\t\tevent.item = this;", "+\t\tevent.gc = gc;", "+\t\tevent.index = columnIndex;", "+\t\tevent.x = contentX;", "+\t\tevent.y = parent.getItemY (this);", "+\t\tevent.width = contentWidth;", "+\t\tevent.height = parent.itemHeight;", "+\t\tparent.sendEvent (SWT.MeasureItem, event);", "+\t\tevent.gc = null;", "+\t\tif (isDisposed ()) return false;", "+\t\tif (parent.allowItemHeightChange) {", "+\t\t\tparent.allowItemHeightChange = false;", "+\t\t\tif (parent.itemHeight != event.height) {", "+\t\t\t\tparent.itemHeight = event.height + 2 * parent.getCellPadding ();", "+\t\t\t\tparent.redraw ();", "+\t\t\t}", "+\t\t}", "+\t\tint change = event.width - (customWidth != -1 ? customWidth : contentWidth);", "+\t\tif (event.width != contentWidth || customWidth != -1) customWidth = event.width;", "+\t\tif (change != 0) {\t/* scrollbar may be affected since no columns */", "+\t\t\tparent.updateHorizontalBar (contentX + event.width, change);", "+\t\t\t// TODO what if clip is too small now?", "+\t\t}", "+\t}", "+", "-\tif (clientArea.x + clientArea.width < x) return;", "+\tif (clientArea.x + clientArea.width < x) return false;", "+\tboolean isSelected = isSelected ();", "+\tboolean drawSelection = isSelected;", "+\tboolean isFocusItem = parent.focusItem == this;", "+\tboolean drawFocus = isFocusItem;", "+\tboolean drawContent = true;", "+\tif (parent.hooks (SWT.EraseItem)) {", "+\t\tgc.setFont (getFont ());", "+\t\tif (isSelected && (columnIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "+\t\t\tgc.setForeground (display.getSystemColor (SWT.COLOR_LIST_SELECTION_TEXT));", "+\t\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "+\t\t} else {", "+\t\t\tgc.setForeground (getForeground (columnIndex));", "+\t\t\tgc.setBackground (getBackground (columnIndex));", "+\t\t}", "+\t\tEvent event = new Event ();", "+\t\tevent.item = this;", "+\t\tevent.gc = gc;", "+\t\tevent.index = columnIndex;", "+\t\tevent.doit = true;", "+\t\tif (isSelected) event.detail |= SWT.SELECTED;", "+\t\tif (isFocusItem) event.detail |= SWT.FOCUSED;", "+\t\tevent.x = cellBounds.x;", "+\t\tevent.y = cellBounds.y;", "+\t\tevent.width = cellBounds.width;", "+\t\tevent.height = cellBounds.height;", "+\t\tgc.setClipping (event.x, event.y, event.width, event.height);", "+\t\tparent.sendEvent (SWT.EraseItem, event);", "+\t\tevent.gc = null;", "+\t\tif (isDisposed ()) return false;", "+\t\tdrawSelection = isSelected && (event.detail & SWT.SELECTED) != 0;", "+\t\tdrawFocus = isFocusItem && (event.detail & SWT.FOCUSED) != 0;", "+\t\tdrawContent = event.doit;", "+\t}", "+", "-\tif (isSelected () && (orderedIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "+\tif (drawSelection && isSelected && (orderedIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "-\tif (!paintCellContent) return;", "+\tif (backgroundOnly) return false;", "-\tImage image = getImage (columnIndex, false);", "-\tString text = getDisplayText (columnIndex);", "-\tRectangle imageArea = getImageBounds (columnIndex);", "-\tint startX = imageArea.x;", "+\tif (drawContent) {", "+\t\tImage image = getImage (columnIndex, false);", "+\t\tString text = getDisplayText (columnIndex);", "+\t\tRectangle imageArea = getImageBounds (columnIndex);", "+\t\tint startX = imageArea.x;", "+\t\t", "+\t\t/* while painting the cell's content restrict the clipping region */", "+\t\tint padding = parent.getCellPadding ();", "+\t\tgc.setClipping (", "+\t\t\tstartX,", "+\t\t\tcellBounds.y + padding - (parent.linesVisible ? 1 : 0),", "+\t\t\tcellRightX - startX - padding,", "+\t\t\tcellBounds.height - 2 * (padding - (parent.linesVisible ? 1 : 0)));", "-\t/* while painting the cell's content restrict the clipping region */", "-\tint padding = parent.getCellPadding ();", "-\tgc.setClipping (", "-\t\tstartX,", "-\t\tcellBounds.y + padding - (parent.linesVisible ? 1 : 0),", "-\t\tcellRightX - startX - padding,", "-\t\tcellBounds.height - 2 * (padding - (parent.linesVisible ? 1 : 0)));", "-", "-\t/* draw the image */", "-\tif (image != null) {", "-\t\tRectangle imageBounds = image.getBounds ();", "-\t\tgc.drawImage (", "-\t\t\timage,", "-\t\t\t0, 0,\t\t\t\t\t\t\t\t\t/* source x, y */", "-\t\t\timageBounds.width, imageBounds.height,\t/* source width, height */", "-\t\t\timageArea.x, imageArea.y,\t\t\t\t/* dest x, y */", "-\t\t\timageArea.width, imageArea.height);\t\t/* dest width, height */", "+\t\t/* draw the image */", "+\t\tif (image != null) {", "+\t\t\tRectangle imageBounds = image.getBounds ();", "+\t\t\tgc.drawImage (", "+\t\t\t\timage,", "+\t\t\t\t0, 0,\t\t\t\t\t\t\t\t\t/* source x, y */", "+\t\t\t\timageBounds.width, imageBounds.height,\t/* source width, height */", "+\t\t\t\timageArea.x, imageArea.y,\t\t\t\t/* dest x, y */", "+\t\t\t\timageArea.width, imageArea.height);\t\t/* dest width, height */", "+\t\t}", "+\t\t", "+\t\t/* draw the text */", "+\t\tif (text.length () > 0) {", "+\t\t\tgc.setFont (getFont (columnIndex, false));", "+\t\t\tint fontHeight = getFontHeight (columnIndex);", "+\t\t\tif (isSelected () && (orderedIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "+\t\t\t\tgc.setForeground (display.getSystemColor (SWT.COLOR_LIST_SELECTION_TEXT));", "+\t\t\t} else {", "+\t\t\t\tgc.setForeground (getForeground (columnIndex));", "+\t\t\t}", "+\t\t\tx = getTextX (columnIndex) + MARGIN_TEXT;", "+\t\t\tgc.drawString (text, x, y + (itemHeight - fontHeight) / 2, true);", "+\t\t}", "-\t/* draw the text */", "-\tif (text.length () > 0) {", "-\t\tgc.setFont (getFont (columnIndex, false));", "-\t\tint fontHeight = getFontHeight (columnIndex);", "-\t\tif (isSelected () && (orderedIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "+\tif (parent.hooks (SWT.PaintItem)) {", "+\t\tint contentWidth = getContentWidth (columnIndex);", "+\t\tint contentX = getContentX (columnIndex);", "+\t\tgc.setFont (getFont ());", "+\t\tif (isSelected && (columnIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "+\t\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "+\t\t\tgc.setBackground (getBackground (columnIndex));", "-\t\tx = getTextX (columnIndex) + MARGIN_TEXT;", "-\t\tgc.drawString (text, x, y + (itemHeight - fontHeight) / 2, true);", "+\t\tEvent event = new Event ();", "+\t\tevent.item = this;", "+\t\tevent.gc = gc;", "+\t\tevent.index = columnIndex;", "+\t\tif (isSelected) event.detail |= SWT.SELECTED;", "+\t\tif (drawFocus) event.detail |= SWT.FOCUSED;", "+\t\tevent.x = contentX;", "+\t\tevent.y = cellBounds.y;", "+\t\tevent.width = contentWidth;", "+\t\tevent.height = cellBounds.height;", "+\t\tgc.setClipping (cellBounds.x, cellBounds.y, cellBounds.width, cellBounds.height);", "+\t\tparent.sendEvent (SWT.PaintItem, event);", "+\t\tdrawFocus = isFocusItem && (event.detail & SWT.FOCUSED) != 0;", "+\t\tevent.gc = null;", "+", "+\treturn isFocusItem && !drawFocus;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b23d763b9e56b8e9224837f6c6a4c352", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "6dd7232a9bfb7b172a0784b2787e3a481ad143be", "commitAfterChange": "15d65623cf9e946c3c4cb7552b2d8fa7c7e9ef50", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 46, "signatureBeforeChange": " void paint (GC gc, TableColumn column, boolean paintCellContent)", "signatureAfterChange": " void paint (GC gc, TableColumn column, boolean paintBackgroundOnly)", "diff": ["-void paint (GC gc, TableColumn column, boolean paintCellContent) {", "+void paint (GC gc, TableColumn column, boolean paintBackgroundOnly) {", "+", "+\tif (parent.hooks (SWT.MeasureItem) && parent.columns.length == 0) {", "+\t\tint contentWidth = getContentWidth (columnIndex);", "+\t\tint contentX = getContentX (columnIndex);", "+\t\tgc.setFont (getFont (columnIndex));", "+\t\tEvent event = new Event ();", "+\t\tevent.item = this;", "+\t\tevent.gc = gc;", "+\t\tevent.index = columnIndex;", "+\t\tevent.x = contentX;", "+\t\tevent.y = parent.getItemY (this);", "+\t\tevent.width = contentWidth;", "+\t\tevent.height = parent.itemHeight;", "+\t\tparent.sendEvent (SWT.MeasureItem, event);", "+\t\tevent.gc = null;", "+\t\tif (isDisposed ()) return;", "+\t\tif (parent.allowItemHeightChange) {", "+\t\t\tparent.allowItemHeightChange = false;", "+\t\t\tif (parent.itemHeight != event.height) {", "+\t\t\t\tparent.itemHeight = event.height;", "+\t\t\t\tparent.redraw ();", "+\t\t\t}", "+\t\t}", "+\t\tint change = event.width - (customWidth != -1 ? customWidth : contentWidth);", "+\t\tif (event.width != contentWidth || customWidth != -1) customWidth = event.width;", "+\t\tif (change != 0) {\t/* scrollbar may be affected since no columns */", "+\t\t\tparent.updateHorizontalBar (contentX + event.width, change);", "+\t\t\t// TODO what if clip is too small now?", "+\t\t}", "+\t}", "+", "-\t\tRectangle focusBounds = getFocusBounds ();\t\t", "+\t\tRectangle focusBounds = getFocusBounds ();", "+\tboolean isSelected = isSelected ();", "+\tboolean drawSelection = isSelected;", "+\tboolean drawContent = true;", "+\tif (parent.hooks (SWT.EraseItem)) {", "+\t\tgc.setFont (getFont ());", "+\t\tif (isSelected) {", "+\t\t\tgc.setForeground (display.getSystemColor (SWT.COLOR_LIST_SELECTION_TEXT));", "+\t\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "+\t\t} else {", "+\t\t\tgc.setForeground (getForeground (columnIndex));", "+\t\t\tgc.setBackground (getBackground (columnIndex));", "+\t\t}", "+\t\tEvent event = new Event ();", "+\t\tevent.item = this;", "+\t\tevent.gc = gc;", "+\t\tevent.index = columnIndex;", "+\t\tevent.doit = true;", "+\t\tif (drawSelection) event.detail |= SWT.SELECTED;", "+\t\tif (parent.focusItem == this) event.detail |= SWT.FOCUSED;", "+\t\tevent.x = cellBounds.x;", "+\t\tevent.y = cellBounds.y;", "+\t\tevent.width = cellBounds.width;", "+\t\tevent.height = cellBounds.height;", "+\t\tgc.setClipping (event.x, event.y, event.width, event.height);", "+\t\tparent.sendEvent (SWT.EraseItem, event);", "+\t\tevent.gc = null;", "+\t\tif (isDisposed ()) return;", "+\t\tdrawSelection = drawSelection && (event.detail & SWT.SELECTED) != 0;", "+\t\tdrawContent = event.doit;", "+\t}", "+", "-\tif (isSelected () && (columnIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "+\tif (drawSelection && (columnIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "-\tif (!paintCellContent) return;", "+\tif (paintBackgroundOnly) return;", "-\tImage image = getImage (columnIndex, false);", "-\tString text = getDisplayText (columnIndex);", "-\tRectangle imageArea = getImageBounds (columnIndex);", "-\tint startX = imageArea.x;", "+\tif (drawContent) {", "+\t\tImage image = getImage (columnIndex, false);", "+\t\tString text = getDisplayText (columnIndex);", "+\t\tRectangle imageArea = getImageBounds (columnIndex);", "+\t\tint startX = imageArea.x;", "+\t\t", "+\t\t/* while painting the cell's content restrict the clipping region */", "+\t\tint padding = parent.getCellPadding ();", "+\t\tgc.setClipping (", "+\t\t\tstartX,", "+\t\t\tcellBounds.y + padding - (parent.linesVisible ? 1 : 0),", "+\t\t\tcellRightX - startX - padding,", "+\t\t\tcellBounds.height - 2 * (padding - (parent.linesVisible ? 1 : 0)));", "-\t/* while painting the cell's content restrict the clipping region */", "-\tint padding = parent.getCellPadding ();", "-\tgc.setClipping (", "-\t\tstartX,", "-\t\tcellBounds.y + padding - (parent.linesVisible ? 1 : 0),", "-\t\tcellRightX - startX - padding,", "-\t\tcellBounds.height - 2 * (padding - (parent.linesVisible ? 1 : 0)));", "-", "-\t/* draw the image */", "-\tif (image != null) {", "-\t\tRectangle imageBounds = image.getBounds ();", "-\t\tgc.drawImage (", "-\t\t\timage,", "-\t\t\t0, 0,\t\t\t\t\t\t\t\t\t/* source x, y */", "-\t\t\timageBounds.width, imageBounds.height,\t/* source width, height */", "-\t\t\timageArea.x, imageArea.y,\t\t\t\t/* dest x, y */", "-\t\t\timageArea.width, imageArea.height);\t\t/* dest width, height */", "+\t\t/* draw the image */", "+\t\tif (image != null) {", "+\t\t\tRectangle imageBounds = image.getBounds ();", "+\t\t\tgc.drawImage (", "+\t\t\t\timage,", "+\t\t\t\t0, 0,\t\t\t\t\t\t\t\t\t/* source x, y */", "+\t\t\t\timageBounds.width, imageBounds.height,\t/* source width, height */", "+\t\t\t\timageArea.x, imageArea.y,\t\t\t\t/* dest x, y */", "+\t\t\t\timageArea.width, imageArea.height);\t\t/* dest width, height */", "+\t\t}", "+\t", "+\t\t/* draw the text */", "+\t\tif (text.length () > 0) {", "+\t\t\tgc.setFont (getFont (columnIndex, false));", "+\t\t\tint fontHeight = getFontHeight (columnIndex);", "+\t\t\tif (drawSelection && (columnIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "+\t\t\t\tif (parent.hasFocus () || (parent.style & SWT.HIDE_SELECTION) == 0) {", "+\t\t\t\t\tgc.setForeground (display.getSystemColor (SWT.COLOR_LIST_SELECTION_TEXT));", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tgc.setForeground (getForeground (columnIndex));", "+\t\t\t}", "+\t\t\tx = getTextX (columnIndex) + MARGIN_TEXT;", "+\t\t\tgc.drawString (text, x, y + (itemHeight - fontHeight) / 2, true);", "+\t\t}", "-\t/* draw the text */", "-\tif (text.length () > 0) {", "-\t\tgc.setFont (getFont (columnIndex, false));", "-\t\tint fontHeight = getFontHeight (columnIndex);", "-\t\tif (isSelected () && (columnIndex == 0 || (parent.style & SWT.FULL_SELECTION) != 0)) {", "-\t\t\tif (parent.hasFocus () || (parent.style & SWT.HIDE_SELECTION) == 0) {", "-\t\t\t\tgc.setForeground (display.getSystemColor (SWT.COLOR_LIST_SELECTION_TEXT));", "-\t\t\t}", "+\tif (parent.hooks (SWT.PaintItem)) {", "+\t\tint contentWidth = getContentWidth (columnIndex);", "+\t\tint contentX = getContentX (columnIndex);", "+\t\tgc.setFont (getFont ());", "+\t\tif (isSelected) {", "+\t\t\tgc.setForeground (display.getSystemColor (SWT.COLOR_LIST_SELECTION_TEXT));", "+\t\t\tgc.setBackground (display.getSystemColor (SWT.COLOR_LIST_SELECTION));", "+\t\t\tgc.setBackground (getBackground (columnIndex));", "-\t\tx = getTextX (columnIndex) + MARGIN_TEXT;", "-\t\tgc.drawString (text, x, y + (itemHeight - fontHeight) / 2, true);", "+\t\tEvent event = new Event ();", "+\t\tevent.item = this;", "+\t\tevent.gc = gc;", "+\t\tevent.index = columnIndex;", "+\t\tif (isSelected) event.detail |= SWT.SELECTED;", "+\t\tif (parent.focusItem == this) event.detail |= SWT.FOCUSED;", "+\t\tevent.x = contentX;", "+\t\tevent.y = cellBounds.y;", "+\t\tevent.width = contentWidth;", "+\t\tevent.height = cellBounds.height;", "+\t\tgc.setClipping (event.x, event.y, event.width, event.height);", "+\t\tparent.sendEvent (SWT.PaintItem, event);", "+\t\tevent.gc = null;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "731f37819bd36566c54116864c4f249c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 297, "signatureBeforeChange": "  \tStyleRange getStyleRangeAtOffset(int offset)", "signatureAfterChange": " void setStyleRanges(int start, int length, int[] ranges, StyleRange[] styles, boolean reset)", "diff": ["-\t */ ", "-\tStyleRange getStyleRangeAtOffset(int offset) {", "-\t\tif (styleCount == 0) return null;", "-\t\tPoint pt = getOverlappingStyles(offset, 1);", "-\t\tif (pt == null || pt.y == 0) return null;", "-\t\tStyleRange newStyle = (StyleRange)styles[pt.x].clone();", "-\t\tnewStyle.start = offset;", "-\t\tnewStyle.length = 1;", "-\t\treturn newStyle;", "-\t}", "+}", "+void setStyleRanges(int start, int length, int[] ranges, StyleRange[] styles, boolean reset) {", "+\tint charCount = content.getCharCount();", "+\tint end = start + length; // -1 TODO ?", "+\tif (start > end || start < 0) {", "+\t\tSWT.error(SWT.ERROR_INVALID_RANGE);", "+\t}", "+\tif (styles != null) {", "+\t\tif (end > charCount) {", "+\t\t\tSWT.error(SWT.ERROR_INVALID_RANGE);", "+\t\t}", "+\t\tif (ranges != null) {", "+\t\t\tif (ranges.length != styles.length << 1) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\t}", "+\t\tint lastOffset = 0;", "+\t\tboolean variableHeight = false; ", "+\t\tfor (int i = 0; i < styles.length; i ++) {", "+\t\t\tif (styles[i] == null) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\t\tint rangeStart, rangeLength;", "+\t\t\tif (ranges != null) {", "+\t\t\t\trangeStart = ranges[i << 1];", "+\t\t\t\trangeLength = ranges[(i << 1) + 1];", "+\t\t\t} else {", "+\t\t\t\trangeStart = styles[i].start;", "+\t\t\t\trangeLength = styles[i].length;", "+\t\t\t}", "+\t\t\tif (rangeLength <= 0) SWT.error(SWT.ERROR_INVALID_ARGUMENT); ", "+\t\t\tif (!(0 <= rangeStart && rangeStart + rangeLength <= charCount)) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\t\tif (lastOffset > rangeStart) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\t\tvariableHeight |= styles[i].isVariableHeight();", "+\t\t\tlastOffset = rangeStart + rangeLength;", "+\t\t}", "+\t\tif (variableHeight) {", "+\t\t\tsetVariableLineHeight();", "+\t\t\t//TODO Init idle ?", "+\t\t}", "+\t}", "+\tint rangeStart = start, rangeEnd = end;", "+\tif (styles != null && styles.length > 0) {", "+\t\tif (ranges != null) {", "+\t\t\trangeStart = ranges[0];", "+\t\t\trangeEnd = ranges[ranges.length - 2] + ranges[ranges.length - 1];", "+\t\t} else {", "+\t\t\trangeStart = styles[0].start;", "+\t\t\trangeEnd = styles[styles.length - 1].start + styles[styles.length - 1].length;", "+\t\t}", "+\t}", "+\tint lastLineBottom = 0;", "+\tif (!isFixedLineHeight()) {", "+\t\tint lineEnd = content.getLineAtOffset(Math.max(end, rangeEnd));", "+\t\tlastLineBottom = getLinePixel(lineEnd + 1);", "+\t}", "+\tif (reset) {", "+\t\trenderer.setStyleRanges(null, null);", "+\t} else {", "+\t\trenderer.updateRanges(start, length, length);", "+\t}", "+\tif (styles != null && styles.length > 0) {", "+\t\trenderer.setStyleRanges(ranges, styles);", "+\t}", "+\tif (reset) {", "+\t\tresetCache(0, content.getLineCount());", "+\t\tsuper.redraw();", "+\t} else {", "+\t\tint lineStart = content.getLineAtOffset(Math.min(start, rangeStart));", "+\t\tint lineEnd = content.getLineAtOffset(Math.max(end, rangeEnd));", "+\t\tresetCache(lineStart, lineEnd - lineStart + 1);", "+\t\tint partialTopIndex = getPartialTopIndex();", "+\t\tint partialBottomIndex = getPartialBottomIndex();", "+\t\tif (!(lineStart > partialBottomIndex || lineEnd < partialTopIndex)) {", "+\t\t\tRectangle rect = getClientArea();", "+\t\t\tif (partialTopIndex <= lineStart && lineStart <= partialBottomIndex) {", "+\t\t\t\tint lineTop = Math.max(rect.y, getLinePixel(lineStart));", "+\t\t\t\trect.y = lineTop;", "+\t\t\t\trect.height -= lineTop;", "+\t\t\t} ", "+\t\t\tif (partialTopIndex <= lineEnd && lineEnd <= partialBottomIndex) {", "+\t\t\t\tint newLastLineBottom = getLinePixel(lineEnd + 1);", "+\t\t\t\tif (!isFixedLineHeight() && lastLineBottom != newLastLineBottom) {", "+\t\t\t\t\t//TODO fails if margin != 0", "+\t\t\t\t\tscroll(0, newLastLineBottom, 0, lastLineBottom, rect.width, rect.height - newLastLineBottom, true);", "+\t\t\t\t}", "+\t\t\t\trect.height = newLastLineBottom - rect.y;", "+\t\t\t}", "+\t\t\tsuper.redraw(rect.x, rect.y, rect.width, rect.height, false);\t\t", "+\t\t}", "+\t}"]}], "num": 36631}
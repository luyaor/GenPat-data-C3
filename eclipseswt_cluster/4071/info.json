{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6454d64dc84d0b67f83918455c425d1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95a2b93fb81484447d218fccbcd78e63", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 60, "signatureBeforeChange": "  void generateFunctions()", "signatureAfterChange": "  void generateFunctions()", "diff": ["+\t\t\t\t\tNodeList params = node.getChildNodes();", "+\t\t\t\t\tint count = 0;", "+\t\t\t\t\tfor (int j = 0; j < params.getLength(); j++) {", "+\t\t\t\t\t\tNode param = params.item(j);", "+\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "+\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (count > 0) {", "+\t\t\t\t\t\tout(\"/**\");", "+\t\t\t\t\t\toutln();", "+\t\t\t\t\t}", "+\t\t\t\t\tfor (int j = 0; j < params.getLength(); j++) {", "+\t\t\t\t\t\tNode param = params.item(j);", "+\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "+\t\t\t\t\t\t\tNamedNodeMap paramAttributes = param.getAttributes();", "+\t\t\t\t\t\t\tout(\" * @param \");", "+\t\t\t\t\t\t\tout(paramAttributes.getNamedItem(\"name\").getNodeValue());", "+\t\t\t\t\t\t\tif (isStruct(param)) {", "+\t\t\t\t\t\t\t\tout(\" flags=struct\");", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tout(\" cast=\");", "+\t\t\t\t\t\t\t\tNode declaredType = paramAttributes.getNamedItem(\"declared_type\");", "+\t\t\t\t\t\t\t\tString cast = declaredType.getNodeValue();", "+\t\t\t\t\t\t\t\tif (!cast.startsWith(\"(\")) out(\"(\");", "+\t\t\t\t\t\t\t\tout(cast);", "+\t\t\t\t\t\t\t\tif (!cast.endsWith(\")\")) out(\")\");", "+\t\t\t\t\t\t\t\toutln();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (count > 0) {", "+\t\t\t\t\t\tout(\" */\");", "+\t\t\t\t\t\toutln();", "+\t\t\t\t\t}", "-\t\t\t\t\tNodeList params = node.getChildNodes();", "+\t\t\t\t\tparams = node.getChildNodes();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b5c1736b22f55c343ee1c2052fe80bf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 46, "signatureBeforeChange": "  void generateSends()", "signatureAfterChange": "  void generateSends()", "diff": ["-\tTreeSet all = new TreeSet();", "+\tTreeMap all = new TreeMap();", "-\t\tall.add(buildSend(method, true, false));", "+\t\tall.put(buildSend(method, true, false), method);", "-\t\tall.add(key);", "+\t\tall.put(key, set.get(key));", "-\t\tall.add(key);", "+\t\tall.put(key, set64.get(key));", "-\tfor (Iterator iterator = all.iterator(); iterator.hasNext();) {", "-\t\tout(iterator.next().toString());", "-\t\toutln();", "-\t}", "-}", "+\tfor (Iterator iterator = all.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = (String)iterator.next();", "+\t\tNode method = (Node)all.get(key);", "+\t\tArrayList tags = new ArrayList();", "+\t\tint count = 0;", "+\t\t\t\t\ttags.add(\" * @param arg\" + count + \" flags=struct\");", "+\t\tout(\"/**\");", "+\t\tif (tags.size() > 0) {", "+\t\t\toutln();", "+\t\t\tout(\" *\");", "+\t\t}", "+\t\tout(\" @method flags=cast\");", "+\t\tif (tags.size() > 0) outln();", "+\t\tfor (Iterator iterator2 = tags.iterator(); iterator2.hasNext();) {", "+\t\t\tString tag = (String) iterator2.next();", "+\t\t\tout(tag);", "+\t\t\toutln();", "+\t\t}", "+\t\tout(\" */\");", "+\t\toutln();", "+\t\tout(key.toString());"]}], "num": 4071}
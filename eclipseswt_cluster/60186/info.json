{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "97dc91ff95c945e149b76c272ec3bd2f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1ca9eb27e449b18097a4a8d4fcb94cb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Scrollable.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t \tvoid _relayout()", "signatureAfterChange": " \t \tprivate void newRelayout()", "diff": ["-\tvoid _relayout() {", "+\t", "+\tprivate void newRelayout() {", "-\t\tif (scrolledHandle == 0)", "+\t\tint hndl= scrolledHandle;", "+\t\tif (hndl == 0)", "-\t\tRect bounds= new Rect();", "-\t\tOS.GetControlBounds(scrolledHandle, bounds);", "+\t\tMacRect bounds= new MacRect();", "+\t\tOS.GetControlBounds(hndl, bounds.getData());", "-\t\tboolean visible= OS.IsControlVisible(scrolledHandle);", "+\t\tboolean visible= OS.IsControlVisible(hndl);", "-\t\tint x= 0;", "-\t\tint y= 0;", "-\t\tint w= bounds.right-bounds.left;", "-\t\tint h= bounds.bottom-bounds.top;", "+\t\tint x= 0; // bounds.getX();", "+\t\tint y= 0; // bounds.getY();", "+\t\tint w= bounds.getWidth();", "+\t\tint h= bounds.getHeight();", "+\t\tif (ww < 0 || hh < 0) {", "+\t\t\tSystem.out.println(\"******* Scrollable.newRelayout: \" + ww + \" \" + hh);", "+\t\t\treturn;", "+\t\t}", "+\t\t", "-\t\tCGRect rect = new CGRect();", "-\t\trect.x = x;", "-\t\trect.y = y;", "-\t\trect.width = ww;", "-\t\trect.height = hh;", "-\t\tOS.HIViewSetFrame(handle, rect);", "-", "-\t\tif (hsb != null) {", "-\t\t\trect.x = x;", "-\t\t\trect.y = y+h-s;", "-\t\t\trect.width = ww;", "-\t\t\trect.height = s;", "-\t\t\tOS.HIViewSetFrame(hsb.handle, rect);", "-\t\t}", "+\t\tif (hsb != null)", "+\t\t\tOS.HIViewSetFrame(hsb.handle, x, y+h-s, ww, s);", "-\t\tif (vsb != null) {", "-\t\t\trect.x = x+w-s;", "-\t\t\trect.y = y;", "-\t\t\trect.width = s;", "-\t\t\trect.height = hh;", "-\t\t\tOS.HIViewSetFrame(vsb.handle, rect);", "+\t\tif (vsb != null)", "+\t\t\tOS.HIViewSetFrame(vsb.handle, x+w-s, y, s, hh);", "+\t\t", "+\t\tOS.HIViewSetFrame(handle, x, y, ww, hh);", "+\t\t", "+\t\t//if (ww != w && hh != h)", "+\t\t//\tOS.InvalWindowRect(OS.GetControlOwner(handle), new MacRect(x+w-s, y+h-s, s, s).getData());", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46aabe4960af5a511de35c7b9618383b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "24d19b3d7f33db77171fd62ba6a99b8de47c34c1", "commitAfterChange": "fac8d627952a2fc4c000be7083041ef017b0bc95", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public Monitor getPrimaryMonitor ()", "signatureAfterChange": " public Monitor getPrimaryMonitor ()", "diff": ["-\tMonitor monitor = new Monitor ();", "-\tRectangle rect = getBounds ();", "-\tmonitor.x = rect.x;", "-\tmonitor.y = rect.y;", "-\tmonitor.width = rect.width;", "-\tmonitor.height = rect.height;", "-\trect = getClientArea ();", "-\tmonitor.clientX = rect.x;", "-\tmonitor.clientY = rect.y;", "-\tmonitor.clientWidth = rect.width;", "-\tmonitor.clientHeight = rect.height;", "-\treturn monitor;", "+\t/*", "+\t* Note.  Photon does not define a primary monitor.", "+\t* The workaround is to arbitrarily return the first", "+\t* monitor whose coordinates are (0, 0), or the first", "+\t* monitor returned by getMonitors().", "+\t*/", "+\tMonitor [] monitors = getMonitors ();", "+\tif (monitors.length == 1) return monitors [0];", "+\tfor (int i = 0; i < monitors.length; i++) {", "+\t\tMonitor monitor = monitors [i];", "+\t\tif (monitor.x == 0 && monitor.y == 0) return monitor;", "+\t}", "+\treturn monitors [0];"]}], "num": 60186}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d58b58e08cce2a34f66191f91033dfc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d11cc1d2f415a8cdea5ac5598afe229", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "65aaf6e9768e61429e9ffb0c0ae5577af65eba85", "commitAfterChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 62, "signatureBeforeChange": " void onPaint(Event event)", "signatureAfterChange": " void onPaint(Event event)", "diff": ["-\t", "-\tGC gc = event.gc;", "-\tPoint size = getSize();", "-\t", "+", "+//{", "+//GC gc = event.gc;", "+//Point size = getSize();\t", "+//}", "-\tColor parentBackground = getParent().getBackground();", "-\tColor background = getBackground();", "-\t", "+\tGC gc = event.gc;", "-\t\tgc.setBackground(parentBackground);", "+\t\tPoint size = getSize();\t", "+\t\tgc.setBackground(getParent().getBackground());", "-\t// Fill in the empty spaces to the right and left of the tabs", "-\tif (single) {", "-\t\tint[] shapeLeft = null;", "-\t\tint[] shapeRight = null;", "-\t\tif (onBottom) {", "-\t\t\tint x = Math.max(0, borderLeft - 1);", "-\t\t\tint y = size.y - borderBottom - tabHeight;", "-\t\t\tint width = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "-\t\t\tint height = tabHeight;", "-\t\t\tif (borderRight > 0) height -= 1; // fill in behind border", "-\t\t\tshapeLeft = new int[BOTTOM_LEFT_OUTSIDE_CORNER.length+6];", "-\t\t\tint index = 0;", "-\t\t\tshapeLeft[index++] = x;", "-\t\t\tshapeLeft[index++] = y;", "-\t\t\tfor (int i = 0; i < BOTTOM_LEFT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\tshapeLeft[index++] = x+BOTTOM_LEFT_OUTSIDE_CORNER[2*i];", "-\t\t\t\tshapeLeft[index++] = y+height+BOTTOM_LEFT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeLeft[index++] = x+width;", "-\t\t\tshapeLeft[index++] = y + height;", "-\t\t\tshapeLeft[index++] = x+width;", "-\t\t\tshapeLeft[index++] = y;", "-\t\t\t", "-\t\t\tx = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "-\t\t\twidth = size.x - borderRight - x;", "-\t\t\tif (borderRight > 0) width += 1; // +1 overlap with border", "-\t\t\tshapeRight = new int[BOTTOM_RIGHT_OUTSIDE_CORNER.length+6];", "-\t\t\tindex = 0;", "-\t\t\tshapeRight[index++] = x;", "-\t\t\tshapeRight[index++] = y;", "-\t\t\tshapeRight[index++] = x;", "-\t\t\tshapeRight[index++] = y+height;", "-\t\t\tfor (int i = 0; i < BOTTOM_RIGHT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\tshapeRight[index++] = x+width+BOTTOM_RIGHT_OUTSIDE_CORNER[2*i];", "-\t\t\t\tshapeRight[index++] = y+height+BOTTOM_RIGHT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeRight[index++] = x+width;", "-\t\t\tshapeRight[index++] = y;", "-\t\t} else { // tabs on top", "-\t\t\tint x = Math.max(0, borderLeft - 1);", "-\t\t\tint y = borderTop;", "-\t\t\tint width = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "-\t\t\tint height = tabHeight;", "-\t\t\tshapeLeft = new int[TOP_LEFT_OUTSIDE_CORNER.length+6];", "-\t\t\tint index = 0;", "-\t\t\tshapeLeft[index++] = x;", "-\t\t\tshapeLeft[index++] = y+height;", "-\t\t\tfor (int i = 0; i < TOP_LEFT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\tshapeLeft[index++] = x+TOP_LEFT_OUTSIDE_CORNER[2*i];", "-\t\t\t\tshapeLeft[index++] = y+TOP_LEFT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeLeft[index++] = x+width;", "-\t\t\tshapeLeft[index++] = y;", "-\t\t\tshapeLeft[index++] = x+width;", "-\t\t\tshapeLeft[index++] = y+height;", "-\t\t\t", "-\t\t\tx = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "-\t\t\twidth = size.x - borderRight - x;", "-\t\t\tif (borderRight > 0) width += 1; // +1 overlap with border", "-\t\t\tshapeRight = new int[TOP_RIGHT_OUTSIDE_CORNER.length+6];", "-\t\t\tindex = 0;", "-\t\t\tshapeRight[index++] = x;", "-\t\t\tshapeRight[index++] = y+height;", "-\t\t\tshapeRight[index++] = x;", "-\t\t\tshapeRight[index++] = y;", "-\t\t\tfor (int i = 0; i < TOP_RIGHT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\tshapeRight[index++] = x+width+TOP_RIGHT_OUTSIDE_CORNER[2*i];", "-\t\t\t\tshapeRight[index++] = y+TOP_RIGHT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeRight[index++] = x+width;", "-\t\t\tshapeRight[index++] = y+height;", "-\t\t}", "-\t\t// Shape is non-rectangular, fill in gaps with parent colours\t", "-\t\tRegion r = new Region();", "-\t\tint x = Math.max(0, borderLeft - 1);", "-\t\tint y = onBottom ? size.y - borderBottom - tabHeight : borderTop;", "-\t\tint width = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "-\t\tint height = tabHeight;", "-\t\tr.add(new Rectangle(x, y, width, height));", "-\t\tr.subtract(shapeLeft);", "-\t\tgc.setBackground(getParent().getBackground());", "-\t\tfillRegion(gc, r);", "-\t\tgc.setBackground(background);", "-\t\tgc.fillPolygon(shapeLeft);", "-\t\t", "-\t\tx = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "-\t\twidth = size.x - borderRight - x;", "-\t\tif (width > 0) {", "-\t\t\tif (borderRight > 0) width += 1; // +1 overlap with border", "-\t\t\tr.subtract(r); // clear region", "-\t\t\tr.add(new Rectangle(x, y, width, height));", "-\t\t\tr.subtract(shapeRight);", "-\t\t\tgc.setBackground(getParent().getBackground());", "-\t\t\tfillRegion(gc, r);", "-\t\t\tgc.setBackground(background);", "-\t\t\tgc.fillPolygon(shapeRight);", "-\t\t}", "-\t\tr.dispose();", "-\t} else {", "-\t\t// Fill in the empty space to the right of the last tab", "-\t\t// with the parent background color", "-\t\tCTabItem2 lastItem = items[items.length -1];", "-\t\tint edge = lastItem.x+lastItem.width;", "-\t\tif (edge < size.x) {", "-\t\t\tint x = edge;", "-\t\t\tint y = onBottom ? size.y - borderBottom - tabHeight - 1 : borderTop;", "-\t\t\tint width = size.x - edge - borderRight + 1;", "-\t\t\tint height = tabHeight + 1;", "-\t\t\tgc.setBackground(parentBackground);", "-\t\t\tgc.fillRectangle(x, y, width, height);", "-\t\t}", "-\t}", "-\t", "-\t// Draw the unselected tabs.", "-\tif (!single) {", "-\t\tfor (int i=0; i < items.length; i++) {", "-\t\t\tif (i != selectedIndex && event.getBounds().intersects(items[i].getBounds())) {", "-\t\t\t\titems[i].onPaint(gc, false);", "-\t\t\t}", "-\t\t}", "-\t}", "-\t", "-\t// Draw selected tab", "-\tif (selectedIndex != -1) {", "-\t\tCTabItem2 item = items[selectedIndex];", "-\t\titem.onPaint(gc, true);", "-\t} else {", "-\t\t// no selected tab - draw line across bottom of all tabs", "-\t\tint x = borderLeft;", "-\t\tint y = onBottom ? size.y - borderBottom - tabHeight - HIGHLIGHT_HEADER : borderTop + tabHeight + 1;", "-\t\tint width = size.x - borderLeft - borderRight;", "-\t\tint height = HIGHLIGHT_HEADER - 1;", "-\t\tgc.setBackground(getBackground());", "-\t\tgc.fillRectangle(x, y, width, height);", "-\t\tx = borderLeft;", "-\t\ty = (onBottom) ? size.y - borderBottom - tabHeight - 1 : borderTop + tabHeight;", "-\t\tgc.setForeground(borderColor1);", "-\t\tgc.drawLine(x, y, x + width, y);", "-\t}", "-\t", "-\tdrawChevron(gc);", "-\tdrawMinimize(gc);", "-\tdrawMaximize(gc);", "-\tdrawBorder(gc);", "-\t", "-\t// draw insertion mark", "-//\tif (insertionIndex > -2) {", "-//\t\tgc.setForeground(getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));", "-//\t\tif (insertionIndex == -1) {", "-//\t\t\tRectangle bounds = items[0].getBounds();", "-//\t\t\tgc.drawLine(bounds.x, bounds.y, bounds.x, bounds.y + bounds.height - 1);", "-//\t\t\tgc.drawLine(bounds.x - 2, bounds.y, bounds.x + 2, bounds.y);", "-//\t\t\tgc.drawLine(bounds.x - 1, bounds.y + 1, bounds.x + 1, bounds.y + 1);", "-//\t\t\tgc.drawLine(bounds.x - 1, bounds.y + bounds.height - 2, bounds.x + 1, bounds.y + bounds.height - 2);", "-//\t\t\tgc.drawLine(bounds.x - 2, bounds.y + bounds.height - 1, bounds.x + 2, bounds.y + bounds.height - 1);", "-//", "-//\t\t} else {", "-//\t\t\tRectangle bounds = items[insertionIndex].getBounds();", "-//\t\t\tgc.drawLine(bounds.x + bounds.width, bounds.y, bounds.x + bounds.width, bounds.y + bounds.height - 1);", "-//\t\t\tgc.drawLine(bounds.x + bounds.width - 2, bounds.y, bounds.x + bounds.width + 2, bounds.y);", "-//\t\t\tgc.drawLine(bounds.x + bounds.width - 1, bounds.y + 1, bounds.x + bounds.width + 1, bounds.y + 1);", "-//\t\t\tgc.drawLine(bounds.x + bounds.width - 1, bounds.y + bounds.height - 2, bounds.x + bounds.width + 1, bounds.y + bounds.height - 2);", "-//\t\t\tgc.drawLine(bounds.x + bounds.width - 2, bounds.y + bounds.height - 1, bounds.x + bounds.width + 2, bounds.y + bounds.height - 1);", "-//\t\t}", "-//\t}", "+\tdrawBody(event);", "+\tdrawTabArea(event);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47e86f91581f2aaab3d9c2b7f06a6b3c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "8b437fb3842f95560dedea9ef4177462cda26613", "commitAfterChange": "548b08f4bee4c72ec1917d36850a817afc8e2973", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 61, "signatureBeforeChange": " void onPaint(Event event)", "signatureAfterChange": " void onPaint(Event event)", "diff": ["+\t\t\treturn;", "+\t", "+// Useful for debugging paint problems", "+//gc.setBackground(getDisplay().getSystemColor(SWT.COLOR_GREEN));", "+//gc.fillRectangle(-10, -10, size.x + 20, size.y+20);", "+\t", "+\t// Fill in the empty spaces to the right and left of the tabs", "-\t\t// Fill in the empty spaces to the right and left of the tab", "-\t\t// with the background color", "-\t\tif (selectedIndex != -1) {", "-\t\t\tCTabItem2 item = items[selectedIndex];", "-\t\t\tint[] shapeLeft = null;", "-\t\t\tint[] shapeRight = null;", "-\t\t\tif (onBottom) {", "-\t\t\t\tint x = Math.max(0, borderLeft - 1);", "-\t\t\t\tint y = size.y - borderBottom - tabHeight;", "-\t\t\t\tint width = item.x - x;", "-\t\t\t\tint height = tabHeight;", "-\t\t\t\tif (borderRight > 0) height -= 1; // fill in behind border", "-\t\t\t\tshapeLeft = new int[BOTTOM_LEFT_OUTSIDE_CORNER.length+6];", "-\t\t\t\tint index = 0;", "-\t\t\t\tshapeLeft[index++] = x;", "-\t\t\t\tshapeLeft[index++] = y;", "-\t\t\t\tfor (int i = 0; i < BOTTOM_LEFT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\t\tshapeLeft[index++] = x+BOTTOM_LEFT_OUTSIDE_CORNER[2*i];", "-\t\t\t\t\tshapeLeft[index++] = y+height+BOTTOM_LEFT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tshapeLeft[index++] = x+width;", "-\t\t\t\tshapeLeft[index++] = y + height;", "-\t\t\t\tshapeLeft[index++] = x+width;", "-\t\t\t\tshapeLeft[index++] = y;", "-\t\t\t\t", "-\t\t\t\tx = item.x + item.width;", "-\t\t\t\twidth = size.x - borderRight - x;", "-\t\t\t\tif (borderRight > 0) width += 1; // +1 overlap with border", "-\t\t\t\tshapeRight = new int[BOTTOM_RIGHT_OUTSIDE_CORNER.length+6];", "-\t\t\t\tindex = 0;", "-\t\t\t\tshapeRight[index++] = x;", "-\t\t\t\tshapeRight[index++] = y;", "-\t\t\t\tshapeRight[index++] = x;", "-\t\t\t\tshapeRight[index++] = y+height;", "-\t\t\t\tfor (int i = 0; i < BOTTOM_RIGHT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\t\tshapeRight[index++] = x+width+BOTTOM_RIGHT_OUTSIDE_CORNER[2*i];", "-\t\t\t\t\tshapeRight[index++] = y+height+BOTTOM_RIGHT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tshapeRight[index++] = x+width;", "-\t\t\t\tshapeRight[index++] = y;", "-\t\t\t} else { // tabs on top", "-\t\t\t\tint x = Math.max(0, borderLeft - 1);", "-\t\t\t\tint y = borderTop;", "-\t\t\t\tint width = item.x - x;", "-\t\t\t\tint height = tabHeight;", "-\t\t\t\tshapeLeft = new int[TOP_LEFT_OUTSIDE_CORNER.length+6];", "-\t\t\t\tint index = 0;", "-\t\t\t\tshapeLeft[index++] = x;", "-\t\t\t\tshapeLeft[index++] = y+height;", "-\t\t\t\tfor (int i = 0; i < TOP_LEFT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\t\tshapeLeft[index++] = x+TOP_LEFT_OUTSIDE_CORNER[2*i];", "-\t\t\t\t\tshapeLeft[index++] = y+TOP_LEFT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tshapeLeft[index++] = x+width;", "-\t\t\t\tshapeLeft[index++] = y;", "-\t\t\t\tshapeLeft[index++] = x+width;", "-\t\t\t\tshapeLeft[index++] = y+height;", "-\t\t\t\t", "-\t\t\t\tx = item.x + item.width;", "-\t\t\t\twidth = size.x - borderRight - x;", "-\t\t\t\tif (borderRight > 0) width += 1; // +1 overlap with border", "-\t\t\t\tshapeRight = new int[TOP_RIGHT_OUTSIDE_CORNER.length+6];", "-\t\t\t\tindex = 0;", "-\t\t\t\tshapeRight[index++] = x;", "-\t\t\t\tshapeRight[index++] = y+height;", "-\t\t\t\tshapeRight[index++] = x;", "-\t\t\t\tshapeRight[index++] = y;", "-\t\t\t\tfor (int i = 0; i < TOP_RIGHT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\t\tshapeRight[index++] = x+width+TOP_RIGHT_OUTSIDE_CORNER[2*i];", "-\t\t\t\t\tshapeRight[index++] = y+TOP_RIGHT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tshapeRight[index++] = x+width;", "-\t\t\t\tshapeRight[index++] = y+height;", "-\t\t\t}", "-\t\t\t// Shape is non-rectangular, fill in gaps with parent colours\t", "-\t\t\tRegion r = new Region();", "+\t\tint[] shapeLeft = null;", "+\t\tint[] shapeRight = null;", "+\t\tif (onBottom) {", "-\t\t\tint y = onBottom ? size.y - borderBottom - tabHeight : borderTop;", "-\t\t\tint width = item.x - x;", "+\t\t\tint y = size.y - borderBottom - tabHeight;", "+\t\t\tint width = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "+\t\t\tif (borderRight > 0) height -= 1; // fill in behind border", "+\t\t\tshapeLeft = new int[BOTTOM_LEFT_OUTSIDE_CORNER.length+6];", "+\t\t\tint index = 0;", "+\t\t\tshapeLeft[index++] = x;", "+\t\t\tshapeLeft[index++] = y;", "+\t\t\tfor (int i = 0; i < BOTTOM_LEFT_OUTSIDE_CORNER.length/2; i++) {", "+\t\t\t\tshapeLeft[index++] = x+BOTTOM_LEFT_OUTSIDE_CORNER[2*i];", "+\t\t\t\tshapeLeft[index++] = y+height+BOTTOM_LEFT_OUTSIDE_CORNER[2*i+1];", "+\t\t\t}", "+\t\t\tshapeLeft[index++] = x+width;", "+\t\t\tshapeLeft[index++] = y + height;", "+\t\t\tshapeLeft[index++] = x+width;", "+\t\t\tshapeLeft[index++] = y;", "+\t\t\t", "+\t\t\tx = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "+\t\t\twidth = size.x - borderRight - x;", "+\t\t\tif (borderRight > 0) width += 1; // +1 overlap with border", "+\t\t\tshapeRight = new int[BOTTOM_RIGHT_OUTSIDE_CORNER.length+6];", "+\t\t\tindex = 0;", "+\t\t\tshapeRight[index++] = x;", "+\t\t\tshapeRight[index++] = y;", "+\t\t\tshapeRight[index++] = x;", "+\t\t\tshapeRight[index++] = y+height;", "+\t\t\tfor (int i = 0; i < BOTTOM_RIGHT_OUTSIDE_CORNER.length/2; i++) {", "+\t\t\t\tshapeRight[index++] = x+width+BOTTOM_RIGHT_OUTSIDE_CORNER[2*i];", "+\t\t\t\tshapeRight[index++] = y+height+BOTTOM_RIGHT_OUTSIDE_CORNER[2*i+1];", "+\t\t\t}", "+\t\t\tshapeRight[index++] = x+width;", "+\t\t\tshapeRight[index++] = y;", "+\t\t} else { // tabs on top", "+\t\t\tint x = Math.max(0, borderLeft - 1);", "+\t\t\tint y = borderTop;", "+\t\t\tint width = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "+\t\t\tint height = tabHeight;", "+\t\t\tshapeLeft = new int[TOP_LEFT_OUTSIDE_CORNER.length+6];", "+\t\t\tint index = 0;", "+\t\t\tshapeLeft[index++] = x;", "+\t\t\tshapeLeft[index++] = y+height;", "+\t\t\tfor (int i = 0; i < TOP_LEFT_OUTSIDE_CORNER.length/2; i++) {", "+\t\t\t\tshapeLeft[index++] = x+TOP_LEFT_OUTSIDE_CORNER[2*i];", "+\t\t\t\tshapeLeft[index++] = y+TOP_LEFT_OUTSIDE_CORNER[2*i+1];", "+\t\t\t}", "+\t\t\tshapeLeft[index++] = x+width;", "+\t\t\tshapeLeft[index++] = y;", "+\t\t\tshapeLeft[index++] = x+width;", "+\t\t\tshapeLeft[index++] = y+height;", "+\t\t\t", "+\t\t\tx = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "+\t\t\twidth = size.x - borderRight - x;", "+\t\t\tif (borderRight > 0) width += 1; // +1 overlap with border", "+\t\t\tshapeRight = new int[TOP_RIGHT_OUTSIDE_CORNER.length+6];", "+\t\t\tindex = 0;", "+\t\t\tshapeRight[index++] = x;", "+\t\t\tshapeRight[index++] = y+height;", "+\t\t\tshapeRight[index++] = x;", "+\t\t\tshapeRight[index++] = y;", "+\t\t\tfor (int i = 0; i < TOP_RIGHT_OUTSIDE_CORNER.length/2; i++) {", "+\t\t\t\tshapeRight[index++] = x+width+TOP_RIGHT_OUTSIDE_CORNER[2*i];", "+\t\t\t\tshapeRight[index++] = y+TOP_RIGHT_OUTSIDE_CORNER[2*i+1];", "+\t\t\t}", "+\t\t\tshapeRight[index++] = x+width;", "+\t\t\tshapeRight[index++] = y+height;", "+\t\t}", "+\t\t// Shape is non-rectangular, fill in gaps with parent colours\t", "+\t\tRegion r = new Region();", "+\t\tint x = Math.max(0, borderLeft - 1);", "+\t\tint y = onBottom ? size.y - borderBottom - tabHeight : borderTop;", "+\t\tint width = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "+\t\tint height = tabHeight;", "+\t\tr.add(new Rectangle(x, y, width, height));", "+\t\tr.subtract(shapeLeft);", "+\t\tgc.setBackground(getParent().getBackground());", "+\t\tfillRegion(gc, r);", "+\t\tgc.setBackground(background);", "+\t\tgc.fillPolygon(shapeLeft);", "+\t\t", "+\t\tx = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "+\t\twidth = size.x - borderRight - x;", "+\t\tif (width > 0) {", "+\t\t\tif (borderRight > 0) width += 1; // +1 overlap with border", "+\t\t\tr.subtract(r); // clear region", "-\t\t\tr.subtract(shapeLeft);", "+\t\t\tr.subtract(shapeRight);", "-\t\t\tgc.fillPolygon(shapeLeft);", "-\t\t\t", "-\t\t\tx = item.x + item.width;", "-\t\t\twidth = size.x - borderRight - x;", "-\t\t\tif (width > 0) {", "-\t\t\t\tif (borderRight > 0) width += 1; // +1 overlap with border", "-\t\t\t\tr.subtract(r); // clear region", "-\t\t\t\tr.add(new Rectangle(x, y, width, height));", "-\t\t\t\tr.subtract(shapeRight);", "-\t\t\t\tgc.setBackground(getParent().getBackground());", "-\t\t\t\tfillRegion(gc, r);", "-\t\t\t\tgc.setBackground(background);", "-\t\t\t\tgc.fillPolygon(shapeRight);", "-\t\t\t}", "-\t\t\tr.dispose();", "+\t\t\tgc.fillPolygon(shapeRight);", "+\t\tr.dispose();", "-\t\tRectangle rect = item.getBounds();", "-\t\tif (event.getBounds().intersects(rect.x, rect.y, rect.width + CURVE_WIDTH, rect.height)) {", "-\t\t\titem.onPaint(gc, true);", "-\t\t}", "+\t\titem.onPaint(gc, true);", "+\t} else {", "+\t\t// no selected tab - draw line across bottom of all tabs", "+\t\tint x = borderLeft;", "+\t\tint y = onBottom ? size.y - borderBottom - tabHeight - HIGHLIGHT_HEADER : borderTop + tabHeight + 1;", "+\t\tint width = size.x - borderLeft - borderRight;", "+\t\tint height = HIGHLIGHT_HEADER - 1;", "+\t\tgc.setBackground(getBackground());", "+\t\tgc.fillRectangle(x, y, width, height);", "+\t\tx = borderLeft;", "+\t\ty = (onBottom) ? size.y - borderBottom - tabHeight - 1 : borderTop + tabHeight;", "+\t\tgc.setForeground(borderColor1);", "+\t\tgc.drawLine(x, y, x + width, y);", "-", "+\t", "-\t"]}], "num": 38989}
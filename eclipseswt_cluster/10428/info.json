{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "af89ea0a151da5310018e28afed26ee4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46fd833e7f7419f90a6d68332939cadd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "2703b6b4917ee70e34e69f6beabdf6e17c0e648e", "commitAfterChange": "0e0eae7504b067875076ee5d9af4693ac4a9b250", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["+\t\tint /*long*/ bitmapData = imageRep.bitmapData();", "+\t\tint /*long*/ bitmapFormat = imageRep.bitmapFormat();", "-", "-\t\tOS.memmove(srcData, imageRep.bitmapData(), dataSize);", "-", "-\t\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "-\t\tImageData data = new ImageData((int)/*64*/width, (int)/*64*/height, (int)/*64*/bpp, palette, 4, srcData);", "+\t\tOS.memmove(srcData, bitmapData, dataSize);", "+\t\t", "+\t\tPaletteData palette;", "+\t\tif (bpp == 32 && (bitmapFormat & OS.NSAlphaFirstBitmapFormat) == 0) {", "+\t\t\tpalette = new PaletteData(0xFF000000, 0xFF0000, 0xFF00);", "+\t\t} else {", "+\t\t\tpalette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "+\t\t}", "+\t\tImageData data = new ImageData((int)/*64*/width, (int)/*64*/height, (int)/*64*/bpp, palette, 1, srcData);", "-", "-\t\tdata.transparentPixel = transparentPixel;", "-\t\tif (transparentPixel == -1 && type == SWT.ICON) {", "-\t\t\t/* Get the icon mask data */", "-\t\t\tint maskPad = 2;", "-\t\t\tint /*long*/ maskBpl = (((width + 7) / 8) + (maskPad - 1)) / maskPad * maskPad;", "-\t\t\tbyte[] maskData = new byte[(int)/*64*/(height * maskBpl)];", "-\t\t\tint offset = 0, maskOffset = 0;", "-\t\t\tfor (int y = 0; y<height; y++) {", "-\t\t\t\tfor (int x = 0; x<width; x++) {", "-\t\t\t\t\tif (srcData[offset] != 0) {", "-\t\t\t\t\t\tmaskData[maskOffset + (x >> 3)] |= (1 << (7 - (x & 0x7)));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tmaskData[maskOffset + (x >> 3)] &= ~(1 << (7 - (x & 0x7)));", "-\t\t\t\t\t}", "-\t\t\t\t\toffset += 4;", "-\t\t\t\t}", "-\t\t\t\tmaskOffset += maskBpl;", "+\t\tif (imageRep.hasAlpha() && transparentPixel == -1 && alpha == -1 && alphaData == null) {", "+\t\t\tbyte[] alphaData = new byte[(int)/*64*/(width * height)];", "+\t\t\tint offset = (bitmapFormat & OS.NSAlphaFirstBitmapFormat) != 0 ? 0 : 3, a = 0;", "+\t\t\tfor (int i = offset; i < srcData.length; i+= 4) {", "+\t\t\t\talphaData[a++] = srcData[i];", "-\t\t\tdata.maskData = maskData;", "-\t\t\tdata.maskPad = maskPad;", "+\t\t\tdata.alphaData = alphaData;", "+\t\t} else {", "+\t\t\tdata.transparentPixel = transparentPixel;", "+\t\t\tif (transparentPixel == -1 && type == SWT.ICON) {", "+\t\t\t\t/* Get the icon mask data */", "+\t\t\t\tint maskPad = 2;", "+\t\t\t\tint /*long*/ maskBpl = (((width + 7) / 8) + (maskPad - 1)) / maskPad * maskPad;", "+\t\t\t\tbyte[] maskData = new byte[(int)/*64*/(height * maskBpl)];", "+\t\t\t\tint offset = 0, maskOffset = 0;", "+\t\t\t\tfor (int y = 0; y<height; y++) {", "+\t\t\t\t\tfor (int x = 0; x<width; x++) {", "+\t\t\t\t\t\tif (srcData[offset] != 0) {", "+\t\t\t\t\t\t\tmaskData[maskOffset + (x >> 3)] |= (1 << (7 - (x & 0x7)));", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tmaskData[maskOffset + (x >> 3)] &= ~(1 << (7 - (x & 0x7)));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\toffset += 4;", "+\t\t\t\t\t}", "+\t\t\t\t\tmaskOffset += maskBpl;", "+\t\t\t\t}", "+\t\t\t\tdata.maskData = maskData;", "+\t\t\t\tdata.maskPad = maskPad;", "+\t\t\t}", "+\t\t\tdata.alpha = alpha;", "+\t\t\tif (alpha == -1 && alphaData != null) {", "+\t\t\t\tdata.alphaData = new byte[alphaData.length];", "+\t\t\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);", "+\t\t\t}", "-\t\tfor (int i = 0; i < srcData.length; i+= 4) {", "-\t\t\tsrcData[i] = 0;", "-\t\t}", "-\t\tdata.alpha = alpha;", "-\t\tif (alpha == -1 && alphaData != null) {", "-\t\t\tdata.alphaData = new byte[alphaData.length];", "-\t\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);", "+\t\tif (bpp == 32) {", "+\t\t\tint offset = (bitmapFormat & OS.NSAlphaFirstBitmapFormat) != 0 ? 0 : 3;", "+\t\t\tfor (int i = offset; i < srcData.length; i+= 4) {", "+\t\t\t\tsrcData[i] = 0;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a33871a41769992e09289b62c8a219d5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "046b2b1ccf3f21ac6303aceb562ded417737fefc", "commitAfterChange": "b00764edfb26d776b9fe9f82005b87f9053f74be", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t \tint getInsertionPointLineNumberAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \t \tint getStringForRangeAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\tint getInsertionPointLineNumberAttribute (int nextHandler, int theEvent, int userData) {", "-\t\tAccessibleTextEvent event = new AccessibleTextEvent(this);", "-\t\tevent.childID = getChildIDFromEvent(theEvent);", "-\t\tevent.offset = -1;", "-\t\tfor (int i = 0; i < accessibleTextListeners.size(); i++) {", "-\t\t\tAccessibleTextListener listener = (AccessibleTextListener) accessibleTextListeners.elementAt(i);", "-\t\t\tlistener.getCaretOffset(event);", "-\t\t}", "-\t\tif (event.offset != -1) {", "-\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeSInt32, 4, new int [] {event.offset});", "-\t\t\treturn OS.noErr;", "+\tint getStringForRangeAttribute (int nextHandler, int theEvent, int userData) {", "+\t\tint valueRef [] = new int [1];", "+\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeParameter, OS.typeCFTypeRef, null, 4, null, valueRef);", "+\t\tif (status == OS.noErr) {", "+\t\t\tCFRange range = new CFRange();", "+\t\t\tboolean ok = OS.AXValueGetValue(valueRef[0], OS.kAXValueCFRangeType, range);", "+\t\t\tif (ok) {", "+\t\t\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "+\t\t\t\tevent.childID = getChildIDFromEvent(theEvent);", "+\t\t\t\tevent.result = null;", "+\t\t\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\t\t\tlistener.getValue(event);", "+\t\t\t\t}", "+\t\t\t\tString appValue = event.result;", "+\t\t\t\tif (appValue != null) {", "+\t\t\t\t\tint stringRef = stringToStringRef (appValue.substring(range.location, range.location + range.length));", "+\t\t\t\t\tif (stringRef != 0) {", "+\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef});", "+\t\t\t\t\t\tOS.CFRelease(stringRef);", "+\t\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 10428}
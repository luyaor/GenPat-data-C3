{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec1e0156e83198c24de5c3bc7ef74119", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdff0f6bb373fd40b0759a0709b81416", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "d86ccf7311b1b26cf1d62a483694e7a1700908ba", "commitAfterChange": "aecaa6269b337935ec99f9a6d9b790e4662ca557", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " void doMouseLocationChange(int x, int y, boolean select)", "signatureAfterChange": " void doMouseLocationChange(int x, int y, boolean select)", "diff": ["-\t\tx = Math.max(leftMargin, Math.min(x, clientAreaWidth - leftMargin - rightMargin));", "-\t\ty = Math.max(topMargin, Math.min(y, clientAreaHeight - topMargin - bottomMargin));", "-\t\tif (!select) clearBlockSelection(true);", "-\t\tint[] trailing = new int[1]; ", "-\t\tint offset = getOffsetAtPoint(x, y, trailing, true);", "-\t\tif (offset != -1) {", "-\t\t\tsetBlockSelectionOffset(offset + trailing[0]);", "+\t\tx = Math.max(leftMargin, Math.min(x, clientAreaWidth - rightMargin));", "+\t\ty = Math.max(topMargin, Math.min(y, clientAreaHeight - bottomMargin));", "+\t\tif (doubleClickEnabled && clickCount > 1) {", "+\t\t\tboolean wordSelect = (clickCount & 1) == 0;", "+\t\t\tif (wordSelect) {", "+\t\t\t\tPoint left = getPointAtOffset(doubleClickSelection.x);", "+\t\t\t\tint[] trailing = new int[1]; ", "+\t\t\t\tint offset = getOffsetAtPoint(x, y, trailing, true);", "+\t\t\t\tif (offset != -1) {", "+\t\t\t\t\tif (x > left.x) {", "+\t\t\t\t\t\toffset = getWordNext(offset + trailing[0], SWT.MOVEMENT_WORD_END);", "+\t\t\t\t\t\tsetBlockSelectionOffset(doubleClickSelection.x, offset);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\toffset = getWordPrevious(offset + trailing[0], SWT.MOVEMENT_WORD_START);", "+\t\t\t\t\t\tsetBlockSelectionOffset(doubleClickSelection.y, offset);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tif (x > left.x) {", "+\t\t\t\t\t\tsetBlockSelectionLocation(left.x, left.y, x, y);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tPoint right = getPointAtOffset(doubleClickSelection.y);", "+\t\t\t\t\t\tsetBlockSelectionLocation(right.x, right.y, x, y);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tsetBlockSelectionLocation(blockXLocation, y);", "+\t\t\t}", "-\t\t\tsetBlockSelectionLocation(x, y);", "+\t\t\tif (!select) clearBlockSelection(true);", "+\t\t\tint[] trailing = new int[1]; ", "+\t\t\tint offset = getOffsetAtPoint(x, y, trailing, true);", "+\t\t\tif (offset != -1) {", "+\t\t\t\tsetBlockSelectionOffset(offset + trailing[0]);", "+\t\t\t} else {", "+\t\t\t\tsetBlockSelectionLocation(x, y);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "249bb30d239617cc4c4766d0bdc27d76", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleControlSite.java", "commitBeforeChange": "771246814116ab7a06d741bac1b7a6515066ce29", "commitAfterChange": "59c7194abace25530f6cc464daa22f94507e57c5", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " void onFocusOut(Event e)", "signatureAfterChange": " void onFocusOut(Event e)", "diff": ["+\t\t/*", "+\t\t* Bug in Windows.  When IE7 loses focus and UIDeactivate()", "+\t\t* is called, IE destroys the caret even though it is", "+\t\t* no longer owned by IE.  If focus has moved to a control", "+\t\t* that shows a caret then the caret disappears.  The fix ", "+\t\t* is to detect this case and restore the caret.", "+\t\t*/", "+\t\tint threadId = OS.GetCurrentThreadId();", "+\t\tGUITHREADINFO lpgui1 = new GUITHREADINFO();", "+\t\tlpgui1.cbSize = GUITHREADINFO.sizeof;", "+\t\tOS.GetGUIThreadInfo(threadId, lpgui1);", "+\t\tif (lpgui1.hwndCaret != 0) {", "+\t\t\tGUITHREADINFO lpgui2 = new GUITHREADINFO();", "+\t\t\tlpgui2.cbSize = GUITHREADINFO.sizeof;", "+\t\t\tOS.GetGUIThreadInfo(threadId, lpgui2);", "+\t\t\tif (lpgui2.hwndCaret == 0 && lpgui1.hwndCaret == OS.GetFocus()) {", "+\t\t\t\tif (SWT_RESTORECARET == 0) {", "+\t\t\t\t\tSWT_RESTORECARET = OS.RegisterWindowMessage (new TCHAR (0, \"SWT_RESTORECARET\", true));", "+\t\t\t\t}", "+\t\t\t\t/*", "+\t\t\t\t* If the caret was not restored by SWT, put it back using", "+\t\t\t\t* the information from GUITHREADINFO.  Note that this will", "+\t\t\t\t* not be correct when the caret has a bitmap.  There is no", "+\t\t\t\t* API to query the bitmap that the caret is using.", "+\t\t\t\t*/", "+\t\t\t\tif (OS.SendMessage (lpgui1.hwndCaret, SWT_RESTORECARET, 0, 0) == 0) {", "+\t\t\t\t\tint width = lpgui1.right - lpgui1.left;", "+\t\t\t\t\tint height = lpgui1.bottom - lpgui1.top;", "+\t\t\t\t\tOS.CreateCaret (lpgui1.hwndCaret, 0, width, height);", "+\t\t\t\t\tOS.SetCaretPos (lpgui1.left, lpgui1.top);", "+\t\t\t\t\tOS.ShowCaret (lpgui1.hwndCaret);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bd827e8dde82e4b6d18be819b8e3118", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ef3348b27f4d541d10ee19a34027d5fffff6ba48", "commitAfterChange": "5546bb091907f0c70c7ee56bbc26c789d0a2340e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  LRESULT CDDS_PREPAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT CDDS_PREPAINT (int wParam, int lParam)", "diff": ["-\tif (OS.IsWindowVisible (handle)) {", "-\t\t/*", "-\t\t* Bug in Windows.  When the table has the extended style", "-\t\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "-\t\t* CLR_NONE to make the table transparent, Windows fills", "-\t\t* a black rectangle around any column that contains an", "-\t\t* image.  The fix is clear LVS_EX_FULLROWSELECT during", "-\t\t* custom draw.", "-\t\t*/", "+\t/*", "+\t* Bug in Windows.  When the table has the extended style", "+\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "+\t* CLR_NONE to make the table transparent, Windows fills", "+\t* a black rectangle around any column that contains an", "+\t* image.  The fix is clear LVS_EX_FULLROWSELECT during", "+\t* custom draw.", "+\t*/", "+\tif (customCount++ == 0 && OS.IsWindowVisible (handle)) {", "-\t\t\t\tOS.UpdateWindow (handle);", "-\t\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "-\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "-\t\t\t\tOS.ValidateRect (handle, null);", "+\t\t\t\tint dwExStyle = OS.SendMessage (handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0);", "+\t\t\t\tif ((dwExStyle & OS.LVS_EX_FULLROWSELECT) != 0) {", "+\t\t\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "+\t\t\t\t\tif (OS.IsWinCE) {", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tboolean damaged = OS.GetUpdateRect (handle, rect, true);", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "+\t\t\t\t\t\tOS.ValidateRect (handle, null);", "+\t\t\t\t\t\tif (damaged) OS.InvalidateRect (handle, rect, true);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint rgn = OS.CreateRectRgn (0, 0, 0, 0);", "+\t\t\t\t\t\tint result = OS.GetUpdateRgn (handle, rgn, true);", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "+\t\t\t\t\t\tOS.ValidateRect (handle, null);", "+\t\t\t\t\t\tif (result != OS.NULLREGION) OS.InvalidateRgn (handle, rgn, true);", "+\t\t\t\t\t\tOS.DeleteObject (rgn);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\tif (OS.IsWindowEnabled (handle)) {", "-\t\t\tControl control = findBackgroundControl ();", "-\t\t\tif (control != null && control.backgroundImage != null) {", "+\t}", "+\tif (OS.IsWindowVisible (handle) && OS.IsWindowEnabled (handle)) {", "+\t\tControl control = findBackgroundControl ();", "+\t\tif (control != null && control.backgroundImage != null) {", "+\t\t\tNMLVCUSTOMDRAW nmcd = new NMLVCUSTOMDRAW ();", "+\t\t\tOS.MoveMemory (nmcd, lParam, NMLVCUSTOMDRAW.sizeof);", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\tfillImageBackground (nmcd.hdc, control, rect);", "+\t\t} else {", "+\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) == OS.CLR_NONE) {", "-\t\t\t\tfillImageBackground (nmcd.hdc, control, rect);", "-\t\t\t} else {", "-\t\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) == OS.CLR_NONE) {", "-\t\t\t\t\tNMLVCUSTOMDRAW nmcd = new NMLVCUSTOMDRAW ();", "-\t\t\t\t\tOS.MoveMemory (nmcd, lParam, NMLVCUSTOMDRAW.sizeof);", "-\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "-\t\t\t\t\tif (control == null) control = this;", "-\t\t\t\t\tfillBackground (nmcd.hdc, control.getBackgroundPixel (), rect);", "-\t\t\t\t}", "+\t\t\t\tif (control == null) control = this;", "+\t\t\t\tfillBackground (nmcd.hdc, control.getBackgroundPixel (), rect);"]}], "num": 55118}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d274cf5b7177f3dcc0c300160615c0c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "339673ef7a3aa84493d8e0d2938b9897", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": " Point drawHorizontalItemConnector(GC gc, Point position)", "signatureAfterChange": " TreeItem[] computeAvailableDescendents ()", "diff": ["-Point drawHorizontalItemConnector(GC gc, Point position) {", "-\tint itemConnectorEndPos = position.x + getItemConnectorWidth() - 1;\t// -1 because the position of the last pixel needs to be calculated", "-", "-\tgc.drawLine(position.x, position.y, itemConnectorEndPos, position.y);", "-\treturn new Point(itemConnectorEndPos + 1, position.y);\t\t// + 1 in order to resume drawing after line not on end of line", "+TreeItem[] computeAvailableDescendents () {", "+\tif (!expanded) return new TreeItem[] {this};", "+\tint childCount = items.length;", "+\tTreeItem[][] childResults = new TreeItem[childCount][];", "+\tint count = 1;\t/* self */", "+\tfor (int i = 0; i < childCount; i++) {", "+\t\tchildResults[i] = items[i].computeAvailableDescendents ();", "+\t\tcount += childResults[i].length;", "+\t}", "+\tTreeItem[] result = new TreeItem[count];", "+\tint index = 0;", "+\tresult[index++] = this;", "+\tfor (int i = 0; i < childCount; i++) {", "+\t\tSystem.arraycopy (childResults[i], 0, result, index, childResults[i].length);", "+\t\tindex += childResults[i].length;", "+\t}", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "201f1b57cb43bde2a1ad2d4d4426d7a8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 7, "signatureBeforeChange": " void calculateVisibleItemCount()", "signatureAfterChange": " TreeItem[] computeAllDescendents ()", "diff": ["- */", "-void calculateVisibleItemCount() {", "-\tVector children;", "-\tTreeItem child;", "-\tint visibleItemCount = 0;", "-\t", "-\t// check isExpanded field directly for performance", "-\tif (internalGetExpanded() == true) {", "-\t\tchildren = getChildren();", "-\t\tvisibleItemCount = children.size();", "-\t\tfor (int i = 0; i < children.size(); i++) {", "-\t\t\tchild = (TreeItem) children.elementAt(i);", "-\t\t\tvisibleItemCount += child.getVisibleItemCount();", "-\t\t}", "-\tsetVisibleItemCount(visibleItemCount);", "-\tcalculateVisibleItemCountParent();", "+TreeItem[] computeAllDescendents () {", "+\tint childCount = items.length;", "+\tTreeItem[][] childResults = new TreeItem[childCount][];", "+\tint count = 1;\t/* self */", "+\tfor (int i = 0; i < childCount; i++) {", "+\t\tchildResults[i] = items[i].computeAllDescendents ();", "+\t\tcount += childResults[i].length;", "+\tTreeItem[] result = new TreeItem[count];", "+\tint index = 0;", "+\tresult[index++] = this;", "+\tfor (int i = 0; i < childCount; i++) {", "+\t\tSystem.arraycopy (childResults[i], 0, result, index, childResults[i].length);", "+\t\tindex += childResults[i].length;", "+\t}", "+\treturn result;"]}], "num": 11247}
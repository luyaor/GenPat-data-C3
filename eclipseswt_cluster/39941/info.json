{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "00a4284e1786b185068eafc01dcfc466", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4ab6926060848f203a2b39d7ed79e84", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "576b8b9621143b0dd2c8cf428f00a730c5074665", "commitAfterChange": "282f74d6ee885b09d0645c1a1456a7045a3ac6ee", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\t\t\t\t\tIsXULRunner = false;\t/* failed */", "-\t\t\t\t\t} else {", "+", "+\t\t\t\t\t\t/* attempt to XPCOMGlueStartup the GRE pointed at by MOZILLA_FIVE_HOME */", "+\t\t\t\t\t\tint /*long*/ ptr = C.getenv (MozillaDelegate.wcsToMbcs (null, XPCOM.MOZILLA_FIVE_HOME, true));", "+\t\t\t\t\t\tif (ptr == 0) {", "+\t\t\t\t\t\t\tIsXULRunner = false;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tlength = C.strlen (ptr);", "+\t\t\t\t\t\t\tbyte[] buffer = new byte[length];", "+\t\t\t\t\t\t\tC.memmove (buffer, ptr, length);", "+\t\t\t\t\t\t\tmozillaPath = new String (MozillaDelegate.mbcsToWcs (null, buffer));", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t * Attempting to XPCOMGlueStartup a mozilla-based GRE != xulrunner can", "+\t\t\t\t\t\t\t * crash, so don't attempt unless the GRE appears to be xulrunner.", "+\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\tif (mozillaPath.indexOf(\"xulrunner\") == -1) { //$NON-NLS-1$", "+\t\t\t\t\t\t\t\tIsXULRunner = false;\t", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tmozillaPath += SEPARATOR_OS + delegate.getLibraryName ();", "+\t\t\t\t\t\t\t\tpath = MozillaDelegate.wcsToMbcs (null, mozillaPath, true);", "+\t\t\t\t\t\t\t\trc = XPCOMInit.XPCOMGlueStartup (path);", "+\t\t\t\t\t\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\t\t\t\t\t\tIsXULRunner = false;", "+\t\t\t\t\t\t\t\t\tmozillaPath = mozillaPath.substring (0, mozillaPath.lastIndexOf (SEPARATOR_OS));", "+\t\t\t\t\t\t\t\t\tif (Device.DEBUG) System.out.println (\"failed to start as XULRunner: \" + mozillaPath); //$NON-NLS-1$", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} ", "+\t\t\t\t\t}", "+\t\t\t\t\tif (IsXULRunner) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d25ea89880e2ff46388d811ff9e09d57", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "a98eb2d6a83b6b63d61b42e51f7f149a33b7fbac", "commitAfterChange": "395692675e255578e24bb51eb09e1b4119931dff", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\tIsXULRunner = false;", "+\t\tboolean IsXULRunner = false;", "-\t\tPromptServiceFactory factory = new PromptServiceFactory ();", "+\t\tPromptService2Factory factory = new PromptService2Factory ();", "+\t\t/*", "+\t\t* This Download factory will be used if the GRE version is < 1.8.", "+\t\t* If the GRE version is 1.8.x then the Download factory that is registered later for", "+\t\t*   contract \"Transfer\" will be used.", "+\t\t* If the GRE version is >= 1.9 then no Download factory is registered because this", "+\t\t*   functionality is provided by the GRE.", "+\t\t*/", "-", "-\t\tDownloadFactory_1_8 downloadFactory_1_8 = new DownloadFactory_1_8 ();", "-\t\tdownloadFactory_1_8.AddRef ();", "-\t\taContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_TRANSFER_CONTRACTID, true);", "-\t\taClassName = MozillaDelegate.wcsToMbcs (null, \"Transfer\", true); //$NON-NLS-1$", "-\t\trc = componentRegistrar.RegisterFactory (XPCOM.NS_DOWNLOAD_CID, aClassName, aContractID, downloadFactory_1_8.getAddress ());", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (rc);", "-\t\t}", "-\t\tdownloadFactory_1_8.Release ();", "-\t\tIs_1_8 = IsXULRunner;", "-\tcomponentManager.Release ();", "-\tif (!Is_1_8) {", "+\tif (!PerformedVersionCheck) {", "+\t\tPerformedVersionCheck = true;", "+", "-\t\t* Check for the availability of the 1.8 implementation of nsIDocShell to determine", "-\t\t* if the GRE's version is >= 1.8. ", "+\t\t* Check for the availability of the pre-1.8 implementation of nsIDocShell", "+\t\t* to determine if the GRE's version is < 1.8.", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (XPCOM.NS_ERROR_FAILURE);", "+\t\t}", "+\t\tif (result[0] == 0) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\t}", "-\t\trc = interfaceRequestor.GetInterface (nsIDocShell_1_8.NS_IDOCSHELL_IID, result);", "+\t\trc = interfaceRequestor.GetInterface (nsIDocShell.NS_IDOCSHELL_IID, result);", "-\t\t\tIs_1_8 = true;", "+\t\t\tIsPre_1_8 = true;", "+\t\t}", "+\t\tresult[0] = 0;", "+", "+\t\t/*", "+\t\t* A Download factory for contract \"Transfer\" must be registered iff the GRE's version is 1.8.x.", "+\t\t*   Check for the availability of the 1.8 implementation of nsIDocShell to determine if the", "+\t\t*   GRE's version is 1.8.x.", "+\t\t* If the GRE version is < 1.8 then the previously-registered Download factory for contract", "+\t\t*   \"Download\" will be used.", "+\t\t* If the GRE version is >= 1.9 then no Download factory is registered because this", "+\t\t*   functionality is provided by the GRE.", "+\t\t*/", "+\t\tif (!IsPre_1_8) {", "+\t\t\trc = interfaceRequestor.GetInterface (nsIDocShell_1_8.NS_IDOCSHELL_IID, result);", "+\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) { /* 1.8 */", "+\t\t\t\tnew nsISupports (result[0]).Release ();", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\trc = componentManager.QueryInterface (nsIComponentRegistrar.NS_ICOMPONENTREGISTRAR_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\t\tbrowser.dispose ();", "+\t\t\t\t\terror (rc);", "+\t\t\t\t}", "+\t\t\t\tif (result[0] == 0) {", "+\t\t\t\t\tbrowser.dispose ();", "+\t\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "+\t\t\t\t}", "+", "+\t\t\t\tnsIComponentRegistrar componentRegistrar = new nsIComponentRegistrar (result[0]);", "+\t\t\t\tDownloadFactory_1_8 downloadFactory_1_8 = new DownloadFactory_1_8 ();", "+\t\t\t\tdownloadFactory_1_8.AddRef ();", "+\t\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_TRANSFER_CONTRACTID, true);", "+\t\t\t\tbyte[] aClassName = MozillaDelegate.wcsToMbcs (null, \"Transfer\", true); //$NON-NLS-1$", "+\t\t\t\trc = componentRegistrar.RegisterFactory (XPCOM.NS_DOWNLOAD_CID, aClassName, aContractID, downloadFactory_1_8.getAddress ());", "+\t\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\t\tbrowser.dispose ();", "+\t\t\t\t\terror (rc);", "+\t\t\t\t}", "+\t\t\t\tdownloadFactory_1_8.Release ();", "+\t\t\t\tcomponentRegistrar.Release ();", "+\t\t\t}", "+\tcomponentManager.Release ();"]}], "num": 39941}
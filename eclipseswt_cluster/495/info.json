{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d64e07dbfc84ebeb028852825a5af3f5", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21bf8498c37b72a5a285210d84b0bdb2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "05c90dd5e9edb969b4de6894aebe19cfb767b603", "commitAfterChange": "ac77a8e872ad51631c6d96b12859eeab9b82b50f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public String[] getAvailableTypeNames()", "signatureAfterChange": " public String[] getAvailableTypeNames()", "diff": ["-\treturn new String[0];", "+\tbyte[] buffer = Converter.wcsToMbcs(null, \"TARGETS\", true);", "+\tint typeId = OS.gdk_atom_intern(buffer, false);", "+\t// first try the primary clipboard", "+\tint selection_data = OS.gtk_clipboard_wait_for_contents(pGtkPrimary, typeId);", "+\tif (selection_data == 0) {", "+\t\t// try the clipboard selection second", "+\t\tselection_data  = OS.gtk_clipboard_wait_for_contents(pGtkClipboard, typeId);", "+\t}", "+\tif (selection_data == 0) {", "+\t\treturn new String[0]; // No types available", "+\t}", "+\tGtkSelectionData gtkSelectionData = new GtkSelectionData();", "+\tOS.memmove(gtkSelectionData, selection_data, GtkSelectionData.sizeof);", "+\tif (gtkSelectionData.length == 0) return new String[0];", "+\tint[] atoms = new int[gtkSelectionData.length * 8 / gtkSelectionData.format];", "+\tOS.memmove(atoms, gtkSelectionData.data, gtkSelectionData.length);", "+\tString[] result = new String[atoms.length];", "+\tfor (int i = 0; i < atoms.length; i++) {", "+\t\tint pName = OS.gdk_atom_name(atoms[i]);", "+\t\tbuffer = new byte [OS.strlen(pName)];", "+\t\tOS.memmove (buffer, pName, buffer.length);", "+\t\tOS.g_free (pName);", "+\t\tresult[i] = new String (Converter.mbcsToWcs (null, buffer));", "+\t}", "+\tOS.gtk_selection_data_free(selection_data);", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ca57323498c94b741e61cf62ee62863", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "189429edfa9fbff796a0033ed821365347e21fb7", "commitAfterChange": "ca9f82149fd684fb3dae8d4fbc43d142fa0d97e4", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " public String[] getAvailableTypeNames()", "signatureAfterChange": " public String[] getAvailableTypeNames()", "diff": ["-\tbyte[] buffer = Converter.wcsToMbcs(null, \"TARGETS\", true);", "-\tint typeId = OS.gdk_atom_intern(buffer, false);", "-\t// first try the primary clipboard", "-\tint selection_data = OS.gtk_clipboard_wait_for_contents(pGtkPrimary, typeId);", "-\tif (selection_data == 0) {", "-\t\t// try the clipboard selection second", "-\t\tselection_data  = OS.gtk_clipboard_wait_for_contents(pGtkClipboard, typeId);", "-\t}", "-\tif (selection_data == 0) {", "-\t\treturn new String[0]; // No types available", "-\t}", "-\tGtkSelectionData gtkSelectionData = new GtkSelectionData();", "-\tOS.memmove(gtkSelectionData, selection_data, GtkSelectionData.sizeof);", "-\tif (gtkSelectionData.length == 0) return new String[0];", "-\tint[] atoms = new int[gtkSelectionData.length * 8 / gtkSelectionData.format];", "-\tOS.memmove(atoms, gtkSelectionData.data, gtkSelectionData.length);", "-\tString[] result = new String[atoms.length];", "-\tfor (int i = 0; i < atoms.length; i++) {", "-\t\tint pName = OS.gdk_atom_name(atoms[i]);", "-\t\tbuffer = new byte [OS.strlen(pName)];", "+\tint[] types = _getAvailableTypes();", "+\tString[] result = new String[types.length];", "+\tfor (int i = 0; i < types.length; i++) {", "+\t\tint pName = OS.gdk_atom_name(types[i]);", "+\t\tbyte[] buffer = new byte [OS.strlen(pName)];", "-\tOS.gtk_selection_data_free(selection_data);"]}], "num": 495}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7da5e3584ac8297dadc41032991da8e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4e76c2886e42e7c1d2c35ac3ca72d44", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "aa08691f44f22c6dea2bd85fbb46dbadce200746", "commitAfterChange": "ff9f806f42a55a052cb1c034387c017803f7b17a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r void extractValues()", "signatureAfterChange": "\r \r int okPressed (int widget, int client, int call)", "diff": ["-}\r", "-void extractValues() {\r", "-\tfilterPath = fullPath = \"\";\r", "-\tint [] argList = {OS.XmNdirectory, 0, OS.XmNdirSpec, 0};\r", "-\tOS.XtGetValues (dialog, argList, argList.length / 2);\r", "-\t\r", "-\tint xmString1 = argList [1];\r", "-\tint ptr = OS.XmStringUnparse (\r", "-\t\txmString1,\r", "-\t\tnull,\r", "-\t\tOS.XmCHARSET_TEXT,\r", "-\t\tOS.XmCHARSET_TEXT,\r", "-\t\tnull,\r", "-\t\t0,\r", "-\t\tOS.XmOUTPUT_ALL);\r", "-\tif (ptr != 0) {\r", "-\t\tint length = OS.strlen (ptr);\r", "-\t\tbyte [] buffer = new byte [length];\r", "-\t\tOS.memmove (buffer, ptr, length);\r", "-\t\tOS.XtFree (ptr);\r", "-\t\t/* Use the character encoding for the default locale */\r", "-\t\tfilterPath = new String (Converter.mbcsToWcs (null, buffer));\r", "-\t}\r", "-\tOS.XmStringFree (xmString1);\r", "-\tif (filterPath.endsWith(\"/\")) {\r", "-\t\tfilterPath = filterPath.substring (0, filterPath.length() - 1);\r", "-\t}\r", "-\t\r", "-\tint xmString2 = argList [3];\r", "-\tptr = OS.XmStringUnparse (\r", "-\t\txmString2,\r", "-\t\tnull,\r", "-\t\tOS.XmCHARSET_TEXT,\r", "-\t\tOS.XmCHARSET_TEXT,\r", "-\t\tnull,\r", "-\t\t0,\r", "-\t\tOS.XmOUTPUT_ALL);\r", "-\tif (ptr != 0) {\r", "-\t\tint length = OS.strlen (ptr);\r", "-\t\tbyte [] buffer = new byte [length];\r", "-\t\tOS.memmove (buffer, ptr, length);\r", "-\t\tOS.XtFree (ptr);\r", "-\t\t/* Use the character encoding for the default locale */\r", "-\t\tfullPath = new String (Converter.mbcsToWcs (null, buffer)).trim();\r", "-\t}\r", "-\tOS.XmStringFree (xmString2);\r", "-\t\r", "-\tif ((style & SWT.MULTI) != 0) {\r", "-\t\tint fileList = OS.XmFileSelectionBoxGetChild (dialog, OS.XmDIALOG_LIST);\r", "-\t\tif (fileList == 0) return;\r", "-\t\tint [] argList2 = {OS.XmNselectedItems, 0, OS.XmNselectedItemCount, 0};\r", "-\t\tOS.XtGetValues (fileList, argList2, argList2.length / 2);\r", "-\t\tint items = argList2 [1], itemCount = argList2 [3];\r", "-\t\tint [] buffer1 = new int [1];\r", "-\t\tfileNames = new String [itemCount];\r", "-\t\tboolean match = false;\r", "-\t\tfor (int i = 0; i < itemCount; i++) {\r", "-\t\t\tOS.memmove (buffer1, items, 4);\r", "-\t\t\tptr = buffer1 [0];\r", "-\t\t\tint address = OS.XmStringUnparse (\r", "-\t\t\t\tptr,\r", "-\t\t\t\tnull,\r", "-\t\t\t\tOS.XmCHARSET_TEXT,\r", "-\t\t\t\tOS.XmCHARSET_TEXT,\r", "-\t\t\t\tnull,\r", "-\t\t\t\t0,\r", "-\t\t\t\tOS.XmOUTPUT_ALL);\r", "-\t\t\tif (address != 0) {\r", "-\t\t\t\tint length = OS.strlen (address);\r", "-\t\t\t\tbyte [] buffer = new byte [length];\r", "-\t\t\t\tOS.memmove (buffer, address, length);\r", "-\t\t\t\tOS.XtFree (address);\r", "-\t\t\t\t/* Use the character encoding for the default locale */\r", "-\t\t\t\tString fullFilename = new String (Converter.mbcsToWcs (null, buffer));\r", "-\t\t\t\tint index = fullFilename.lastIndexOf ('/');\r", "-\t\t\t\tfileNames [i] = fullFilename.substring (index + 1, fullFilename.length ());\r", "-\t\t\t\tif (fullFilename.equals (fullPath)) match = true;\r", "-\t\t\t}\r", "-\t\t\titems += 4;\r", "-\t\t}\r", "-\t\tif (match) {\r", "-\t\t\tfileName = fileNames [0];\r", "-\t\t} else {\r", "-\t\t\t/* The user has modified the text field such that it doesn't match any\r", "-\t\t\t * of the selected files, so use this value instead\r", "-\t\t\t */\r", "-\t\t\tint index = fullPath.lastIndexOf ('/');\r", "-\t\t\tfileName = fullPath.substring (index + 1, fullPath.length ());\r", "-\t\t\tfileNames = new String [] {fileName};\r", "-\t\t}\r", "-\t} else {\r", "-\t\tint index = fullPath.lastIndexOf ('/');\r", "-\t\tfileName = fullPath.substring (index + 1, fullPath.length ());\r", "-\t\tfileNames = new String [] {fileName};\r", "-\t}\r", "+\tString fullPath = null, fileName = null;\r", "+\tString [] fileNames = null;\r", "+\r", "+\tint [] argList = {OS.XmNdirSpec, 0, OS.XmNdirectory, 0};\r", "+\tOS.XtGetValues (dialog, argList, argList.length / 2);\r", "+\tint xmString1 = argList [1];\r", "+\tint ptr = OS.XmStringUnparse (\r", "+\t\txmString1,\r", "+\t\tnull,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tnull,\r", "+\t\t0,\r", "+\t\tOS.XmOUTPUT_ALL);\r", "+\tif (ptr != 0) {\r", "+\t\tint length = OS.strlen (ptr);\r", "+\t\tbyte [] buffer = new byte [length];\r", "+\t\tOS.memmove (buffer, ptr, length);\r", "+\t\tOS.XtFree (ptr);\r", "+\t\t/* Use the character encoding for the default locale */\r", "+\t\tfullPath = new String (Converter.mbcsToWcs (null, buffer)).trim();\r", "+\tOS.XmStringFree (xmString1);\r", "+\tif ((style & SWT.MULTI) != 0) {\r", "+\t\tint fileList = OS.XmFileSelectionBoxGetChild (dialog, OS.XmDIALOG_LIST);\r", "+\t\tif (fileList == 0) return 0;\r", "+\t\tint [] argList2 = {OS.XmNselectedItems, 0, OS.XmNselectedItemCount, 0};\r", "+\t\tOS.XtGetValues (fileList, argList2, argList2.length / 2);\r", "+\t\tint items = argList2 [1], itemCount = argList2 [3];\r", "+\t\tint [] buffer1 = new int [1];\r", "+\t\tfileNames = new String [itemCount];\r", "+\t\tboolean match = false;\r", "+\t\tfor (int i = 0; i < itemCount; i++) {\r", "+\t\t\tOS.memmove (buffer1, items, 4);\r", "+\t\t\tptr = buffer1 [0];\r", "+\t\t\tint address = OS.XmStringUnparse (\r", "+\t\t\t\tptr,\r", "+\t\t\t\tnull,\r", "+\t\t\t\tOS.XmCHARSET_TEXT,\r", "+\t\t\t\tOS.XmCHARSET_TEXT,\r", "+\t\t\t\tnull,\r", "+\t\t\t\t0,\r", "+\t\t\t\tOS.XmOUTPUT_ALL);\r", "+\t\t\tif (address != 0) {\r", "+\t\t\t\tint length = OS.strlen (address);\r", "+\t\t\t\tbyte [] buffer = new byte [length];\r", "+\t\t\t\tOS.memmove (buffer, address, length);\r", "+\t\t\t\tOS.XtFree (address);\r", "+\t\t\t\t/* Use the character encoding for the default locale */\r", "+\t\t\t\tString fullFilename = new String (Converter.mbcsToWcs (null, buffer));\r", "+\t\t\t\tint index = fullFilename.lastIndexOf ('/');\r", "+\t\t\t\tfileNames [i] = fullFilename.substring (index + 1, fullFilename.length ());\r", "+\t\t\t\tif (fullFilename.equals (fullPath)) match = true;\r", "+\t\t\t}\r", "+\t\t\titems += 4;\r", "+\t\t}\r", "+\t\tif (match) {\r", "+\t\t\tfileName = fileNames [0];\r", "+\t\t} else {\r", "+\t\t\t/* The user has modified the text field such that it doesn't match any\r", "+\t\t\t * of the selected files, so use this value instead\r", "+\t\t\t */\r", "+\t\t\tint index = fullPath.lastIndexOf ('/');\r", "+\t\t\tfileName = fullPath.substring (index + 1, fullPath.length ());\r", "+\t\t\tfileNames = new String [] {fileName};\r", "+\t\t}\r", "+\t} else {\r", "+\t\tint index = fullPath.lastIndexOf ('/');\r", "+\t\tfileName = fullPath.substring (index + 1, fullPath.length ());\r", "+\t\tfileNames = new String [] {fileName};\r", "+\t}\r", "+\r", "+\t// if no file selected then go into the current directory\r", "+\tif (fileName.equals(\"\")) {\r", "+\t\tint [] argList1 = {OS.XmNdirMask, 0};\r", "+\t\tOS.XtGetValues (dialog, argList1, argList1.length / 2);\r", "+\t\tint directoryHandle = argList1[1];\r", "+\t\tint [] argList2 = {OS.XmNpattern,directoryHandle};\r", "+\t\tOS.XtSetValues (dialog, argList2, argList2.length / 2);\r", "+\t\tOS.XmStringFree (directoryHandle);\r", "+\t\treturn 0;\r", "+\t}\t\t\r", "+\tint xmString2 = argList [3];\r", "+\tptr = OS.XmStringUnparse (\r", "+\t\txmString2,\r", "+\t\tnull,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tnull,\r", "+\t\t0,\r", "+\t\tOS.XmOUTPUT_ALL);\r", "+\tif (ptr != 0) {\r", "+\t\tint length = OS.strlen (ptr);\r", "+\t\tbyte [] buffer = new byte [length];\r", "+\t\tOS.memmove (buffer, ptr, length);\r", "+\t\tOS.XtFree (ptr);\r", "+\t\t/* Use the character encoding for the default locale */\r", "+\t\tfilterPath = new String (Converter.mbcsToWcs (null, buffer));\r", "+\t}\r", "+\tOS.XmStringFree (xmString2);\r", "+\tif (filterPath.endsWith(\"/\")) {\r", "+\t\tfilterPath = filterPath.substring (0, filterPath.length() - 1);\r", "+\t}\r", "+\r", "+\tthis.fullPath = fullPath;\r", "+\tthis.fileName = fileName;\r", "+\tthis.fileNames = fileNames;\r", "+\tOS.XtUnmanageChild (widget);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9ab750f8d6bc8f3aba66b6534a485ee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \t\r int processKeyDown (int callData)", "signatureAfterChange": "\r int XKeyPress (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-\t\r", "-int processKeyDown (int callData) {\r", "-\tsuper.processKeyDown (callData);\r", "-\tXKeyEvent xEvent = new XKeyEvent ();\r", "-\tOS.memmove (xEvent, callData, XKeyEvent.sizeof);\r", "-\tbyte [] buffer = new byte [1];\r", "-\tint [] keysym = new int [1];\r", "-\tOS.XLookupString (xEvent, buffer, buffer.length, keysym, null);\r", "-\t\r", "-\tswitch (keysym [0]) {\r", "-\t\tcase OS.XK_Left:\r", "-\t\tcase OS.XK_Right:\r", "-\t\tcase OS.XK_Up:\r", "-\t\tcase OS.XK_Down:\r", "-\t\t\tint xChange = 0, yChange = 0;\r", "-\t\t\tint stepSize = PAGE_INCREMENT;\r", "-\t\t\tif ((xEvent.state & OS.ControlMask) != 0) stepSize = INCREMENT;\r", "-\t\t\tif ((style & SWT.VERTICAL) != 0) {\r", "-\t\t\t\tif (keysym [0] == OS.XK_Up || keysym [0] == OS.XK_Down) break;\r", "-\t\t\t\txChange = keysym [0] == OS.XK_Left ? -stepSize : stepSize;\r", "-\t\t\t} else {\r", "-\t\t\t\tif (keysym [0] == OS.XK_Left || keysym [0] == OS.XK_Right) break;\r", "-\t\t\t\tyChange = keysym [0] == OS.XK_Up ? -stepSize : stepSize;\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\tint [] argList1 = {OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "-\t\t\tOS.XtGetValues (handle, argList1, argList1.length / 2);\r", "-\t\t\tint border = argList1 [5];\r", "-\t\t\tint width = argList1 [1] + (border * 2), height = argList1 [3] + (border * 2);\r", "-\t\t\tint [] argList2 = {OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "-\t\t\tOS.XtGetValues (parent.handle, argList2, argList2.length / 2);\r", "-\t\t\tint parentBorder = argList2 [5];\r", "-\t\t\tint parentWidth = argList2 [1] + (parentBorder * 2);\r", "-\t\t\tint parentHeight = argList2 [3] + (parentBorder * 2);\r", "-\t\t\tint newX = lastX, newY = lastY;\r", "-\t\t\tif ((style & SWT.VERTICAL) != 0) {\r", "-\t\t\t\tnewX = Math.min (Math.max (0, lastX + xChange - parentBorder - startX), parentWidth - width);\r", "-\t\t\t} else {\r", "-\t\t\t\tnewY = Math.min (Math.max (0, lastY + yChange - parentBorder - startY), parentHeight - height);\r", "-\t\t\t}\r", "-\t\t\tif (newX == lastX && newY == lastY) return 0;\r", "-\t\t\t\r", "-\t\t\t/* Ensure that the pointer image does not change */\r", "-\t\t\tint xDisplay = getDisplay().xDisplay;\r", "-\t\t\tint xWindow = OS.XtWindow (parent.handle);\r", "-\t\t\tint ptrGrabResult = OS.XGrabPointer (\r", "-\t\t\t\txDisplay,\r", "-\t\t\t\txWindow,\r", "-\t\t\t\t1,\r", "-\t\t\t\tOS.None,\r", "-\t\t\t\tOS.GrabModeAsync,\r", "-\t\t\t\tOS.GrabModeAsync,\r", "-\t\t\t\tOS.None,\r", "-\t\t\t\tcursor,\r", "-\t\t\t\tOS.CurrentTime);\r", "-\r", "-\t\t\t/* The event must be sent because its doit flag is used. */\r", "-\t\t\tEvent event = new Event ();\r", "-\t\t\tevent.time = xEvent.time;\r", "-\t\t\tevent.x = newX;  event.y = newY;\r", "-\t\t\tevent.width = width;  event.height = height;\r", "-\t\t\tsendEvent (SWT.Selection, event);\r", "-\t\t\tif (ptrGrabResult == OS.GrabSuccess) OS.XUngrabPointer (xDisplay, OS.CurrentTime);\r", "-\t\t\t\t\t\r", "-\t\t\t/*\r", "-\t\t\t * It is possible (but unlikely) that client code could have disposed\r", "-\t\t\t * the widget in the selection event.  If this happens end the processing\r", "-\t\t\t * of this message by returning.\r", "-\t\t\t */\r", "-\t\t\tif (isDisposed ()) break;\r", "-\t\t\tif (event.doit) {\r", "-\t\t\t\tlastX = event.x;  lastY = event.y;\r", "-\t\t\t\t/* Adjust the pointer position */\r", "-\t\t\t\tint cursorX = newX;  int cursorY = newY;\r", "-\t\t\t\tif ((style & SWT.VERTICAL) != 0) {\r", "-\t\t\t\t\tcursorY += height / 2;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tcursorX += width / 2;\r", "-\t\t\t\t}\r", "-\t\t\t\tOS.XWarpPointer (xDisplay, OS.None, xWindow, 0, 0, 0, 0, cursorX, cursorY);\r", "-\t\t\t}\r", "-\t\t\tbreak;\r", "-\t}\r", "-\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XKeyPress (int w, int client_data, int call_data, int continue_to_dispatch) {\t\r", "+\tint result = super.XKeyPress (w, client_data, call_data, continue_to_dispatch);\r", "+\tif (result != 0) return result;\r", "+\tXKeyEvent xEvent = new XKeyEvent ();\r", "+\tOS.memmove (xEvent, call_data, XKeyEvent.sizeof);\r", "+\tbyte [] buffer = new byte [1];\r", "+\tint [] keysym = new int [1];\r", "+\tOS.XLookupString (xEvent, buffer, buffer.length, keysym, null);\r", "+\t\r", "+\tswitch (keysym [0]) {\r", "+\t\tcase OS.XK_Left:\r", "+\t\tcase OS.XK_Right:\r", "+\t\tcase OS.XK_Up:\r", "+\t\tcase OS.XK_Down:\r", "+\t\t\tint xChange = 0, yChange = 0;\r", "+\t\t\tint stepSize = PAGE_INCREMENT;\r", "+\t\t\tif ((xEvent.state & OS.ControlMask) != 0) stepSize = INCREMENT;\r", "+\t\t\tif ((style & SWT.VERTICAL) != 0) {\r", "+\t\t\t\tif (keysym [0] == OS.XK_Up || keysym [0] == OS.XK_Down) break;\r", "+\t\t\t\txChange = keysym [0] == OS.XK_Left ? -stepSize : stepSize;\r", "+\t\t\t} else {\r", "+\t\t\t\tif (keysym [0] == OS.XK_Left || keysym [0] == OS.XK_Right) break;\r", "+\t\t\t\tyChange = keysym [0] == OS.XK_Up ? -stepSize : stepSize;\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\tint [] argList1 = {OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "+\t\t\tOS.XtGetValues (handle, argList1, argList1.length / 2);\r", "+\t\t\tint border = argList1 [5];\r", "+\t\t\tint width = argList1 [1] + (border * 2), height = argList1 [3] + (border * 2);\r", "+\t\t\tint [] argList2 = {OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "+\t\t\tOS.XtGetValues (parent.handle, argList2, argList2.length / 2);\r", "+\t\t\tint parentBorder = argList2 [5];\r", "+\t\t\tint parentWidth = argList2 [1] + (parentBorder * 2);\r", "+\t\t\tint parentHeight = argList2 [3] + (parentBorder * 2);\r", "+\t\t\tint newX = lastX, newY = lastY;\r", "+\t\t\tif ((style & SWT.VERTICAL) != 0) {\r", "+\t\t\t\tnewX = Math.min (Math.max (0, lastX + xChange - parentBorder - startX), parentWidth - width);\r", "+\t\t\t} else {\r", "+\t\t\t\tnewY = Math.min (Math.max (0, lastY + yChange - parentBorder - startY), parentHeight - height);\r", "+\t\t\t}\r", "+\t\t\tif (newX == lastX && newY == lastY) return result;\r", "+\t\t\t\r", "+\t\t\t/* Ensure that the pointer image does not change */\r", "+\t\t\tint xDisplay = getDisplay().xDisplay;\r", "+\t\t\tint xWindow = OS.XtWindow (parent.handle);\r", "+\t\t\tint ptrGrabResult = OS.XGrabPointer (\r", "+\t\t\t\txDisplay,\r", "+\t\t\t\txWindow,\r", "+\t\t\t\t1,\r", "+\t\t\t\tOS.None,\r", "+\t\t\t\tOS.GrabModeAsync,\r", "+\t\t\t\tOS.GrabModeAsync,\r", "+\t\t\t\tOS.None,\r", "+\t\t\t\tcursor,\r", "+\t\t\t\tOS.CurrentTime);\r", "+\r", "+\t\t\t/* The event must be sent because its doit flag is used. */\r", "+\t\t\tEvent event = new Event ();\r", "+\t\t\tevent.time = xEvent.time;\r", "+\t\t\tevent.x = newX;  event.y = newY;\r", "+\t\t\tevent.width = width;  event.height = height;\r", "+\t\t\tsendEvent (SWT.Selection, event);\r", "+\t\t\tif (ptrGrabResult == OS.GrabSuccess) OS.XUngrabPointer (xDisplay, OS.CurrentTime);\r", "+\t\t\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t * It is possible (but unlikely) that client code could have disposed\r", "+\t\t\t * the widget in the selection event.  If this happens end the processing\r", "+\t\t\t * of this message by returning.\r", "+\t\t\t */\r", "+\t\t\tif (isDisposed ()) break;\r", "+\t\t\tif (event.doit) {\r", "+\t\t\t\tlastX = event.x;  lastY = event.y;\r", "+\t\t\t\t/* Adjust the pointer position */\r", "+\t\t\t\tint cursorX = newX;  int cursorY = newY;\r", "+\t\t\t\tif ((style & SWT.VERTICAL) != 0) {\r", "+\t\t\t\t\tcursorY += height / 2;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tcursorX += width / 2;\r", "+\t\t\t\t}\r", "+\t\t\t\tOS.XWarpPointer (xDisplay, OS.None, xWindow, 0, 0, 0, 0, cursorX, cursorY);\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t}\r", "+\r", "+\treturn result;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e06b3339f653d4a2229d83d58809292f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r int processMouseMove (int callData)", "signatureAfterChange": "\r int XPointerMotion (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processMouseMove (int callData) {\r", "-\tsuper.processMouseMove (callData);\r", "-\tXMotionEvent xEvent = new XMotionEvent ();\r", "-\tOS.memmove (xEvent, callData, XMotionEvent.sizeof);\r", "-\tif (!dragging || (xEvent.state & OS.Button1Mask) == 0) return 0;\r", "-\tint [] argList1 = {OS.XmNx, 0, OS.XmNy, 0, OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "-\tOS.XtGetValues (handle, argList1, argList1.length / 2);\r", "-\tint border = argList1 [9], x = ((short) argList1 [1]) - border, y = ((short) argList1 [3]) - border;\r", "-\tint width = argList1 [5] + (border * 2), height = argList1 [7] + (border * 2);\r", "-\tint [] argList2 = {OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "-\tOS.XtGetValues (parent.handle, argList2, argList2.length / 2);\r", "-\tint parentBorder = argList2 [5];\r", "-\tint parentWidth = argList2 [1] + (parentBorder * 2);\r", "-\tint parentHeight = argList2 [3] + (parentBorder * 2);\r", "-\tint newX = lastX, newY = lastY;\r", "-\tif ((style & SWT.VERTICAL) != 0) {\r", "-\t\tnewX = Math.min (Math.max (0, xEvent.x + x - startX - parentBorder), parentWidth - width);\r", "-\t} else {\r", "-\t\tnewY = Math.min (Math.max (0, xEvent.y + y - startY - parentBorder), parentHeight - height);\r", "-\t}\r", "-\tif (newX == lastX && newY == lastY) return 0;\r", "-\tdrawBand (lastX, lastY, width, height);\r", "-\t/* The event must be sent because its doit flag is used. */\r", "-\tEvent event = new Event ();\r", "-\tevent.detail = SWT.DRAG;\r", "-\tevent.time = xEvent.time;\r", "-\tevent.x = newX;  event.y = newY;\r", "-\tevent.width = width;  event.height = height;\r", "-\t/*\r", "-\t * It is possible (but unlikely) that client code could have disposed\r", "-\t * the widget in the selection event.  If this happens end the processing\r", "-\t * of this message by returning.\r", "-\t */\r", "-\tsendEvent (SWT.Selection, event);\r", "-\tif (isDisposed ()) return 0;\r", "-\tif (event.doit) {\r", "-\t\tlastX = event.x;  lastY = event.y;\r", "-\t\tOS.XmUpdateDisplay (handle);\r", "-\t\tdrawBand (lastX, lastY, width, height);\r", "-\t}\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XPointerMotion (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tint result = super.XPointerMotion (w, client_data, call_data, continue_to_dispatch);\r", "+\tif (result != 0) return result;\r", "+\tXMotionEvent xEvent = new XMotionEvent ();\r", "+\tOS.memmove (xEvent, call_data, XMotionEvent.sizeof);\r", "+\tif (!dragging || (xEvent.state & OS.Button1Mask) == 0) return result;\r", "+\tint [] argList1 = {OS.XmNx, 0, OS.XmNy, 0, OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "+\tOS.XtGetValues (handle, argList1, argList1.length / 2);\r", "+\tint border = argList1 [9], x = ((short) argList1 [1]) - border, y = ((short) argList1 [3]) - border;\r", "+\tint width = argList1 [5] + (border * 2), height = argList1 [7] + (border * 2);\r", "+\tint [] argList2 = {OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "+\tOS.XtGetValues (parent.handle, argList2, argList2.length / 2);\r", "+\tint parentBorder = argList2 [5];\r", "+\tint parentWidth = argList2 [1] + (parentBorder * 2);\r", "+\tint parentHeight = argList2 [3] + (parentBorder * 2);\r", "+\tint newX = lastX, newY = lastY;\r", "+\tif ((style & SWT.VERTICAL) != 0) {\r", "+\t\tnewX = Math.min (Math.max (0, xEvent.x + x - startX - parentBorder), parentWidth - width);\r", "+\t} else {\r", "+\t\tnewY = Math.min (Math.max (0, xEvent.y + y - startY - parentBorder), parentHeight - height);\r", "+\t}\r", "+\tif (newX == lastX && newY == lastY) return result;\r", "+\tdrawBand (lastX, lastY, width, height);\r", "+\t/* The event must be sent because its doit flag is used. */\r", "+\tEvent event = new Event ();\r", "+\tevent.detail = SWT.DRAG;\r", "+\tevent.time = xEvent.time;\r", "+\tevent.x = newX;  event.y = newY;\r", "+\tevent.width = width;  event.height = height;\r", "+\t/*\r", "+\t * It is possible (but unlikely) that client code could have disposed\r", "+\t * the widget in the selection event.  If this happens end the processing\r", "+\t * of this message by returning.\r", "+\t */\r", "+\tsendEvent (SWT.Selection, event);\r", "+\tif (isDisposed ()) return result;\r", "+\tif (event.doit) {\r", "+\t\tlastX = event.x;  lastY = event.y;\r", "+\t\tOS.XmUpdateDisplay (handle);\r", "+\t\tdrawBand (lastX, lastY, width, height);\r", "+\t}\r", "+\treturn result;\r", "+}\r"]}], "num": 55392}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab249264e780e61427fd7ba65c63eb2a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdfd0dff14335688e63c935e7db3c800", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "7b1329ce4559c314d7caaf6d49255a2e36ae8db9", "commitAfterChange": "24fd6f27ac88e7d1cba0fa9d22650617bd958c27", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 1, "signatureBeforeChange": "  static int CallJava (int cx, int argc, int vp)", "signatureAfterChange": " static int callJava (int cx, int argc, int vp)", "diff": ["-static int /*long*/ CallJava (int /*long*/ cx, int /*long*/ argc, int /*long*/ vp) {", "+ */", "+static int /*long*/ callJava (int /*long*/ cx, int /*long*/ argc, int /*long*/ vp) {", "+\tint jsval_sizeof = 8;", "+\tint /*long*/ argsPtr = vp + 2 * jsval_sizeof;", "+\tnsIVariant resultVariant = null;", "+", "-\t//byte[] aContractID = MozillaDelegate.wcsToMbcs (null, \"@mozilla.org/js/xpc/XPConnect;1\", true);", "-\tnsID NS_IXPCONNECT_CID = new nsID (\"CB6593E0-F9B2-11d2-BDD6-000064657374\");", "-\tnsID NS_IXPCONNECT_IID = new nsID (\"a995b541-d514-43f1-ac0e-f49746c0b063\");", "-\trc = serviceManager.GetService(NS_IXPCONNECT_CID, NS_IXPCONNECT_IID, result);", "-\tnsIXPConnect connect = new nsIXPConnect(result[0]);", "-\tresult[0] = 0;", "-\t", "-\t", "-\t//int /*long*/[] result = new int /*long*/[1];", "-\tXPCOM.memmove(result, vp + 2 * C.PTR_SIZEOF, C.PTR_SIZEOF);", "-\tint /*long*/ arrayPtr = result[0];", "-\tresult[0] = 0;", "-\t", "-\tXPCOM.memmove(result, arrayPtr, C.PTR_SIZEOF);", "-\tint /*long*/ args = result[0];", "+\trc = serviceManager.GetService (XPCOM.NS_IXPCONNECT_CID, nsIXPConnect.NS_IXPCONNECT_IID, result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIXPConnect connect = new nsIXPConnect (result[0]);", "-\tint /*long*/ asdf4 = XPCOM.JSVAL_TO_IMPL2(Mozilla.jsLibPathBytes, arrayPtr);", "-\tSystem.out.println(asdf4);", "-\tasdf4 = XPCOM.JSVAL_TO_IMPL2(Mozilla.jsLibPathBytes, args);", "-\tSystem.out.println(asdf4);", "+\t/* extract the first argument value (the function id) */", "+\trc = connect.JSValToVariant (cx, argsPtr, result);", "+\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\tnsIVariant idVariant = new nsIVariant (result[0]);", "+\t\tresult[0] = 0;", "+\t\tshort[] dataType = new short[1];", "+\t\trc = idVariant.GetDataType (dataType);", "+\t\tif (rc == XPCOM.NS_OK && dataType[0] == nsIDataType.VTYPE_INT32) {", "+\t\t\tint[] intResult = new int[1];", "+\t\t\trc = idVariant.GetAsInt32 (intResult); /* PRInt32 */", "+\t\t\tif (rc == XPCOM.NS_OK) {", "+\t\t\t\tint functionId = (int)intResult[0];", "-\tint /*long*/ type2 = XPCOM.JS_TypeOfValue(Mozilla.jsLibPathBytes, cx, args);", "-\tSystem.out.println(type2);", "-\tint /*long*/ stringPtr = XPCOM.JS_ValueToString(Mozilla.jsLibPathBytes, cx, args);", "-\tint length  = (int)XPCOM.JS_GetStringLength(Mozilla.jsLibPathBytes, stringPtr);", "-\tint /*long*/ nativePtr = XPCOM.JS_GetStringCharsZ(Mozilla.jsLibPathBytes, cx, stringPtr);", "-\tchar[] dest = new char[length];", "-\tXPCOM.memmove (dest, nativePtr, length * 2);", "-\tSystem.out.println(new String (dest));", "-\t", "-\t", "-\targs += C.PTR_SIZEOF;", "-\ttype2 = XPCOM.JS_TypeOfValue(Mozilla.jsLibPathBytes, cx, args);", "-\tSystem.out.println(type2);", "-\tstringPtr = XPCOM.JS_ValueToString(Mozilla.jsLibPathBytes, cx, args);", "-\tlength  = (int)XPCOM.JS_GetStringLength(Mozilla.jsLibPathBytes, stringPtr);", "-\tnativePtr = XPCOM.JS_GetStringCharsZ(Mozilla.jsLibPathBytes, cx, stringPtr);", "-\tdest = new char[length];", "-\tXPCOM.memmove (dest, nativePtr, length * 2);", "-\tSystem.out.println(new String (dest));", "+\t\t\t\t/* get the second argument variant (the token string) */", "+\t\t\t\targsPtr += jsval_sizeof;", "+\t\t\t\trc = connect.JSValToVariant (cx, argsPtr, result);", "+\t\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t\t\t\tint /*long*/ tokenVariant = result[0];", "+\t\t\t\t\tresult[0] = 0;", "-\targs += C.PTR_SIZEOF;", "-\ttype2 = XPCOM.JS_TypeOfValue(Mozilla.jsLibPathBytes, cx, args);", "-\tSystem.out.println(type2);", "-\tstringPtr = XPCOM.JS_ValueToString(Mozilla.jsLibPathBytes, cx, args);", "-\tlength  = (int)XPCOM.JS_GetStringLength(Mozilla.jsLibPathBytes, stringPtr);", "-\tnativePtr = XPCOM.JS_GetStringCharsZ(Mozilla.jsLibPathBytes, cx, stringPtr);", "-\tdest = new char[length];", "-\tXPCOM.memmove (dest, nativePtr, length * 2);", "-\tSystem.out.println(new String (dest));", "+\t\t\t\t\t/* get the third argument variant (the invocation args) */", "+\t\t\t\t\targsPtr += jsval_sizeof;", "+\t\t\t\t\trc = connect.JSValToVariant (cx, argsPtr, result);", "+\t\t\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t\t\t\t\tint /*long*/ argsVariant = result[0];", "+\t\t\t\t\t\tresult[0] = 0;", "-\trc = connect.JSValToVariant(cx, args, result);", "-\tnsIVariant variant = new nsIVariant(result[0]);", "-\tshort[] type = new short[1];", "-\trc = variant.GetDataType(type);", "-\tObject asdf = convertToJava(variant, type[0]);", "-\tSystem.out.println(asdf);", "-\t", "-\tObject functionId = convertToJava(args);", "-\targs += C.PTR_SIZEOF;", "-\tObject token = convertToJava(args);", "-\t", "-\tfor (int i = 0; i < argc; i++) {", "-\t\t", "+\t\t\t\t\t\t/* invoke the BrowserFunction */", "+\t\t\t\t\t\tresultVariant = new nsIVariant (invokeFunction (functionId, tokenVariant, argsVariant));", "+\t\t\t\t\t\tnew nsISupports (argsVariant).Release ();", "+\t\t\t\t\t}", "+\t\t\t\t\tnew nsISupports (tokenVariant).Release ();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tidVariant.Release ();", "+\t}", "+\tresult[0] = 0;", "+", "+\t/* if the BrowserFunction could not be invoked for some reason then return null to JS */", "+\tif (resultVariant == null) {", "+\t\trc = XPCOM.NS_GetComponentManager (result);", "+\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+\t\tnsIComponentManager componentManager = new nsIComponentManager (result[0]);", "+\t\tresult[0] = 0;", "+\t\tresultVariant = convertToJS (null, componentManager);", "+\t\tcomponentManager.Release ();", "-\treturn 0;", "+\t/* convert the resulting variant to a jsval */", "+\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+\tserviceManager.Release();", "+", "+\tnsIMemory memory = new nsIMemory (result[0]);", "+\tresult[0] = 0;", "+\tint /*long*/ jsVal = memory.Alloc (jsval_sizeof);", "+\tC.memset (jsVal, 0, jsval_sizeof);", "+\tint /*long*/ globalObject = XPCOM.JS_GetGlobalObject (Mozilla.getJSLibPathBytes (), cx);", "+\trc = connect.VariantToJS (cx, globalObject, resultVariant.getAddress (), jsVal);", "+\tresultVariant.Release ();", "+\tconnect.Release ();", "+", "+\tint /*long*/ returnValue = XPCOM.JS_FALSE;", "+\tif (rc == XPCOM.NS_OK) {", "+\t\t/* write the jsval to the return value slot */", "+\t\tC.memmove (vp, jsVal, jsval_sizeof);", "+\t\treturnValue = XPCOM.JS_TRUE;", "+\t}", "+\tmemory.Free (jsVal);", "+\tmemory.Release ();", "+\treturn returnValue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "359649b01f4e16b10e3f167947b11513", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 69, "signatureBeforeChange": " \t\t \tprivate int handleMouseEvent(int nextHandler, int eRefHandle, int eventKind, int whichWindow)", "signatureAfterChange": "  int mouseProc (int nextHandler, int theEvent, int userData)", "diff": ["+int mouseProc (int nextHandler, int theEvent, int userData) {", "+\tint eventKind = OS.GetEventKind (theEvent);", "+\torg.eclipse.swt.internal.carbon.Point where = new org.eclipse.swt.internal.carbon.Point ();", "+\tOS.GetEventParameter (theEvent, OS.kEventParamMouseLocation, OS.typeQDPoint, null, where.sizeof, null, where);", "+\tint [] theWindow = new int [1];", "+\tint part = OS.FindWindow (where, theWindow);", "+\tswitch (part) {", "+\t\tcase OS.inMenuBar: {", "+\t\t\tif (eventKind == OS.kEventMouseDown) {", "+\t\t\t\tOS.MenuSelect (where);", "+\t\t\t\treturn OS.noErr;", "+\t\t\t}", "+\t\tcase OS.inContent: {", "+\t\t\tRect windowRect = new Rect ();", "+\t\t\tOS.GetWindowBounds (theWindow [0], (short) OS.kWindowContentRgn, windowRect);", "+\t\t\tCGPoint inPoint = new CGPoint ();", "+\t\t\tinPoint.x = where.h - windowRect.left;", "+\t\t\tinPoint.y = where.v - windowRect.top;", "+\t\t\tint [] theRoot = new int [1];", "+\t\t\tOS.GetRootControl (theWindow [0], theRoot);", "+\t\t\tint [] theControl = new int [1];", "+\t\t\tOS.HIViewGetSubviewHit (theRoot [0], inPoint, true, theControl);", "+\t\t\tif (theControl [0] == 0) theControl [0] = theRoot [0];", "+\t\t\tWidget widget = WidgetTable.get (theControl [0]);", "+\t\t\tswitch (eventKind) {", "+\t\t\t\tcase OS.kEventMouseDragged:", "+\t\t\t\tcase OS.kEventMouseMoved: {", "+\t\t\t\t\torg.eclipse.swt.internal.carbon.Point localPoint = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\t\t\tlocalPoint.h = (short) inPoint.x;", "+\t\t\t\t\tlocalPoint.v = (short) inPoint.y;", "+\t\t\t\t\tint [] modifiers = new int [1];", "+\t\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "+\t\t\t\t\tboolean [] cursorWasSet = new boolean [1];", "+\t\t\t\t\tOS.HandleControlSetCursor (theControl [0], localPoint, (short) modifiers [0], cursorWasSet);", "+\t\t\t\t\tif (!cursorWasSet [0]) OS.SetThemeCursor (OS.kThemeArrowCursor);", "+\t\t\t\t\tif (widget != null) {", "+\t\t\t\t\t\tif (widget == hoverControl) {", "+\t\t\t\t\t\t\tint [] outDelay = new int [1];", "+\t\t\t\t\t\t\tOS.HMGetTagDelay (outDelay);", "+\t\t\t\t\t\t\tif (mouseHoverID != 0) {", "+\t\t\t\t\t\t\t\tOS.SetEventLoopTimerNextFireTime (mouseHoverID, outDelay [0] / 1000.0);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t//NOT DONE - get rid of instanceof test", "+\t\t\t\t\t\t\tif (widget instanceof Control) {", "+\t\t\t\t\t\t\t\tif (mouseHoverID != 0) OS.RemoveEventLoopTimer (mouseHoverID);", "+\t\t\t\t\t\t\t\thoverControl = (Control) widget;", "+\t\t\t\t\t\t\t\tint [] id = new int [1], outDelay = new int [1];", "+\t\t\t\t\t\t\t\tOS.HMGetTagDelay (outDelay);", "+\t\t\t\t\t\t\t\tint handle = hoverControl.handle;", "+\t\t\t\t\t\t\t\tint eventLoop = OS.GetCurrentEventLoop ();", "+\t\t\t\t\t\t\t\tOS.InstallEventLoopTimer (eventLoop, outDelay [0] / 1000.0, 0.0, mouseHoverProc, handle, id);", "+\t\t\t\t\t\t\t\tif ((mouseHoverID = id [0]) == 0) hoverControl = null;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (widget != null) {", "+\t\t\t\treturn userData != 0 ? widget.mouseProc (nextHandler, theEvent, userData) : OS.eventNotHandledErr;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}", "+\t}", "+\tswitch (eventKind) {", "+\t\tcase OS.kEventMouseDragged:", "+\t\tcase OS.kEventMouseMoved:", "+\t\t\tOS.InitCursor ();", "+\t}", "+\tif (mouseHoverID != 0) OS.RemoveEventLoopTimer (mouseHoverID);", "+\tmouseHoverID = 0;", "+\thoverControl = null;", "+\treturn OS.eventNotHandledErr;", "+}", "-\t\t", "-\tprivate int handleMouseEvent(int nextHandler, int eRefHandle, int eventKind, int whichWindow) {", "-\t\t", "-\t\tif (MacUtil.HIVIEW)", "-\t\t\treturn OS.eventNotHandledErr;", "-\t\t", "-\t\tif (eventKind == OS.kEventMouseDown)", "-\t\t\tfTrackedControl= 0;", "-\t\t", "-\t\tMacEvent me= new MacEvent(eRefHandle);", "-\t\tMacPoint where= me.getWhere();", "-\t\t", "-\t\tshort part= 0;", "-\t\tif (whichWindow == 0) {", "-\t\t\tif (fTrackedControl != 0) {", "-\t\t\t\twhichWindow= OS.GetControlOwner(fTrackedControl);", "-\t\t\t} else {", "-\t\t\t\tint[] w= new int[1];", "-\t\t\t\tpart= OS.FindWindow(where.getData(), w);", "-\t\t\t\twhichWindow= w[0];", "-\t\t\t}", "-\t\t} else {", "-\t\t\tpart= OS.FindWindow(where.getData(), new int[1]);", "-\t\t}", "-\t\t", "-\t\tif (whichWindow == 0 && eventKind == OS.kEventMouseDown) {", "-\t\t\tint[] wHandle= new int[1];", "-\t\t\tint rc= OS.GetEventParameter(eRefHandle, OS.kEventParamWindowRef, OS.typeWindowRef, null, null, wHandle);", "-\t\t\tif (rc == OS.kNoErr)", "-\t\t\t\twhichWindow= wHandle[0];", "-\t\t}", "-\t\t", "-\t\tif (whichWindow == 0) {", "-\t\t\t//System.out.println(\"Display.handleMouseEvent:  whichWindow == 0\");", "-\t\t\treturn OS.eventNotHandledErr;", "-\t\t}", "-\t\t\t", "-\t\tMacEvent.trackStateMask(eRefHandle, eventKind);", "-\t\t\t\t", "-\t\tswitch (eventKind) {", "-\t\t", "-\t\tcase OS.kEventMouseWheelMoved:", "-\t\t\tOS.QDGlobalToLocalPoint(OS.GetWindowPort(whichWindow), where.getData());\t\t\t", "-\t\t\tint cntrl= MacUtil.findControlUnderMouse(where, whichWindow, null);", "-\t\t\tWidget ww= findWidget(cntrl);", "-\t\t\tif (ww instanceof Composite) {", "-\t\t\t\tComposite s= (Composite) ww;", "-\t\t\t\tScrollBar sb= s.getVerticalBar();", "-\t\t\t\tif (sb != null)", "-\t\t\t\t\treturn sb.processWheel(eRefHandle);", "-\t\t\t}", "-\t\t\tbreak;", "-\t\t", "-\t\tcase OS.kEventMouseDown:", "-\t\t\t\t\t", "-\t\t\tif (!OS.IsWindowActive(whichWindow)) {", "-\t\t\t\t// let the default handler activate the window", "-\t\t\t\treturn OS.eventNotHandledErr;", "-\t\t\t}", "-\t\t", "-\t\t\thideToolTip ();", "-\t\t", "-\t\t\tif (part == OS.inContent || (MacUtil.HIVIEW && part == OS.inStructure))", "-\t\t\t\tif (false && MacUtil.HIVIEW) {", "-\t\t\t\t\treturn OS.eventNotHandledErr;", "-\t\t\t\t} else {", "-\t\t\t\t\tif (!handleContentClick(me, whichWindow))", "-\t\t\t\t\t\treturn OS.kNoErr;", "-\t\t\t\t}", "-", "-\t\t\tbreak;", "-\t\t", "-\t\tcase OS.kEventMouseDragged:", "-\t\t\tif (fTrackedControl != 0) {", "-\t\t\t\twindowProc(fTrackedControl, SWT.MouseMove, new MacMouseEvent(me));", "-\t\t\t\treturn OS.kNoErr;", "-\t\t\t}", "-\t\t\tbreak;", "-", "-\t\tcase OS.kEventMouseUp:", "-\t\t\tif (fTrackedControl != 0) {", "-\t\t\t\twindowProc(fTrackedControl, SWT.MouseUp, new MacMouseEvent(me));", "-\t\t\t\tfTrackedControl= 0;", "-\t\t\t\treturn OS.kNoErr;", "-\t\t\t}\t", "-\t\t\tbreak;", "-\t\t\t", "-\t\tcase OS.kEventMouseMoved:", "-\t\t", "-\t\t\tfTrackedControl= 0;\t\t\t", "-\t\t\t", "-\t\t\tOS.QDGlobalToLocalPoint(OS.GetWindowPort(whichWindow), where.getData());\t\t\t", "-\t\t\tint whichControl= MacUtil.findControlUnderMouse(where, whichWindow, null);", "-\t\t", "-\t\t\tif (fCurrentControl != whichControl) {", "-\t\t\t", "-\t\t\t\tif (fCurrentControl != 0) {", "-\t\t\t\t\tfLastHoverHandle= 0;", "-\t\t\t\t\twindowProc(fCurrentControl, SWT.MouseExit, new MacMouseEvent(me));", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tfCurrentControl= whichControl;", "-\t\t\t\t", "-\t\t\t\tWidget w= findWidget(fCurrentControl);", "-\t\t\t\tif (w instanceof Control) {", "-\t\t\t\t\tControl c= (Control) w;", "-\t\t\t\t\tif (c.cursor != null)", "-\t\t\t\t\t\tc.cursor.install(this);\t", "-\t\t\t\t\telse", "-\t\t\t\t\t\tsetCursor(0);\t\t", "-\t\t\t\t} else", "-\t\t\t\t\tsetCursor(0);", "-\t\t\t\t", "-\t\t\t\twindowProc(fCurrentControl, SWT.MouseMove, new MacMouseEvent(me));", "-\t\t\t\t", "-\t\t\t\tif (fCurrentControl != 0) {", "-\t\t\t\t\twindowProc(fCurrentControl, SWT.MouseEnter, new MacMouseEvent(me));", "-\t\t\t\t}", "-\t\t\t\treturn OS.kNoErr;\t\t\t", "-\t\t\t} else {", "-\t\t\t\tif (fCurrentControl != 0) {", "-\t\t\t\t\twindowProc(fCurrentControl, SWT.MouseMove, new MacMouseEvent(me));", "-\t\t\t\t\treturn OS.kNoErr;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tbreak;", "-\t\t}", "-\t\t\t\t\t", "-\t\treturn OS.eventNotHandledErr;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "04f53e72220ce2fc5112159d18b44550", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "772dbb2157e9b2de63e2852948b2b41f878efc48", "commitAfterChange": "89998e87ec2f52bcae7a0a0eded4e8752e2c800f", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  void initClasses ()", "signatureAfterChange": "  void initClasses ()", "diff": ["-\tbyte [] bytes = new byte [types.length() + 1];", "-\tfor (int i = 0; i < types.length(); i++) {", "-\t\tbytes[i] = (byte)types.charAt(i);", "-\t}", "-\tint /*long*/ ptr = OS.malloc(bytes.length);", "-\tOS.memmove(ptr, bytes, bytes.length);", "-\tint /*long*/ [] sizep = new int /*long*/ [1], alignp = new int /*long*/ [1];", "-\tOS.NSGetSizeAndAlignment(ptr, sizep, alignp);", "-\tOS.free(ptr);\t", "+\tint size = C.PTR_SIZEOF, align = 2;", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar (cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar (cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "+\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53213b454692e426984f54b73653b32f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "dbfdea5a6ace7254c9bcb69a7489276f3b9d3e35", "commitAfterChange": "f1fbb8716f7eb6144440edb1c7a2f83e3f63fe10", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 104, "signatureBeforeChange": "  void initClasses ()", "signatureAfterChange": "  void initClasses ()", "diff": ["-\tclassName = \"SWTMenu\";", "-\tcls = OS.objc_allocateClassPair(OS.class_NSMenu, className, 0);", "-\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addMethod(cls, OS.sel_menuWillOpen_, proc3, \"@:@\");", "-\tOS.class_addMethod(cls, OS.sel_menuDidClose_, proc3, \"@:@\");", "-\tOS.class_addMethod(cls, OS.sel_menu_willHighlightItem_, proc4, \"@:@@\");", "-\tOS.class_addMethod(cls, OS.sel_menuNeedsUpdate_, proc3, \"@:@\");", "-\tOS.objc_registerClassPair(cls);", "-\t", "-\tclassName = \"SWTMenuItem\";", "-\tcls = OS.objc_allocateClassPair(OS.class_NSMenuItem, className, 0);", "-\tOS.class_addIvar(cls, SWT_OBJECT, size, (byte)align, types);", "-\tOS.class_addMethod(cls, OS.sel_sendSelection, proc2, \"@:\");", "-\tOS.objc_registerClassPair(cls);", "+\tcreateMenuSubclass(OS.class_NSMenu, \"SWTMenu\", false);", "+\tcreateMenuItemSubclass(OS.class_NSMenuItem, \"SWTMenuItem\", false);"]}], "num": 12641}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b7944966d6757e56362b467741ae51b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad84d94e320ab41ca80e369ec8c75a86", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TableDragSourceEffect.java", "commitBeforeChange": "5a8028d0064ece2db29042b455196c98ef644e7b", "commitAfterChange": "d9530391850eebbeb2618f65fb4c27b05c593e05", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tImage getDragSourceImage(DragSourceEvent event)", "signatureAfterChange": " \t \tImage getDragSourceImage(DragSourceEvent event)", "diff": ["-\t\tdragSourceImage = null;\t\t", "+\t\tdragSourceImage = null;", "+\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (5, 1)) {", "+\t\t\tSHDRAGIMAGE shdi = new SHDRAGIMAGE();", "+\t\t\tint DI_GETDRAGIMAGE = OS.RegisterWindowMessage (new TCHAR (0, \"ShellGetDragImage\", true)); //$NON-NLS-1$", "+\t\t\tif (OS.SendMessage (control.handle, DI_GETDRAGIMAGE, 0, shdi) != 0) {", "+\t\t\t\tevent.x += shdi.ptOffset.x;", "+\t\t\t\tevent.y += shdi.ptOffset.y;", "+\t\t\t\tint /*long */ hImage = shdi.hbmpDragImage;", "+\t\t\t\tif (hImage != 0) {", "+\t\t\t\t\tBITMAP bm = new BITMAP ();", "+\t\t\t\t\tOS.GetObject (hImage, BITMAP.sizeof, bm);", "+\t\t\t\t\tint srcWidth = bm.bmWidth;", "+\t\t\t\t\tint srcHeight = bm.bmHeight;", "+\t\t\t\t\t", "+\t\t\t\t\t/* Create resources */", "+\t\t\t\t\tint /*long*/ hdc = OS.GetDC (0);", "+\t\t\t\t\tint /*long*/ srcHdc = OS.CreateCompatibleDC (hdc);", "+\t\t\t\t\tint /*long*/ oldSrcBitmap = OS.SelectObject (srcHdc, hImage);", "+\t\t\t\t\tint /*long*/ memHdc = OS.CreateCompatibleDC (hdc);", "+\t\t\t\t\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER ();", "+\t\t\t\t\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;", "+\t\t\t\t\tbmiHeader.biWidth = srcWidth;", "+\t\t\t\t\tbmiHeader.biHeight = -srcHeight;", "+\t\t\t\t\tbmiHeader.biPlanes = 1;", "+\t\t\t\t\tbmiHeader.biBitCount = 32;", "+\t\t\t\t\tbmiHeader.biCompression = OS.BI_RGB;", "+\t\t\t\t\tbyte []\tbmi = new byte[BITMAPINFOHEADER.sizeof];", "+\t\t\t\t\tOS.MoveMemory (bmi, bmiHeader, BITMAPINFOHEADER.sizeof);", "+\t\t\t\t\tint /*long*/ [] pBits = new int /*long*/ [1];", "+\t\t\t\t\tint /*long*/ memDib = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "+\t\t\t\t\tif (memDib == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\t\tint /*long*/ oldMemBitmap = OS.SelectObject (memHdc, memDib);", "+", "+\t\t\t\t\tBITMAP dibBM = new BITMAP ();", "+\t\t\t\t\tOS.GetObject (memDib, BITMAP.sizeof, dibBM);", "+\t\t\t\t\tint sizeInBytes = dibBM.bmWidthBytes * dibBM.bmHeight;", "+", "+\t\t\t\t \t/* Get the foreground pixels */", "+\t\t\t\t \tOS.BitBlt (memHdc, 0, 0, srcWidth, srcHeight, srcHdc, 0, 0, OS.SRCCOPY);", "+\t\t\t\t \tbyte[] srcData = new byte [sizeInBytes];", "+\t\t\t\t\tOS.MoveMemory (srcData, dibBM.bmBits, sizeInBytes);", "+", "+\t\t\t\t\tbyte[] alphaData = new byte[srcWidth * srcHeight];", "+\t\t\t\t\tint spinc = dibBM.bmWidthBytes - srcWidth * 4;", "+\t\t\t\t\tint ap = 0, sp = 3;", "+\t\t\t\t\tfor (int y = 0; y < srcHeight; ++y) {", "+\t\t\t\t\t\tfor (int x = 0; x < srcWidth; ++x) {", "+\t\t\t\t\t\t\talphaData [ap++] = srcData [sp];", "+\t\t\t\t\t\t\tsp += 4;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tsp += spinc;", "+\t\t\t\t\t}", "+\t\t\t\t\tPaletteData palette = new PaletteData(0xFF00, 0xFF0000, 0xFF000000);", "+\t\t\t\t\tImageData data = new ImageData(srcWidth, srcHeight, bm.bmBitsPixel, palette, bm.bmWidthBytes, srcData);", "+\t\t\t\t\tdata.alphaData = alphaData;", "+\t\t\t\t\tdata.transparentPixel = shdi.crColorKey;", "+\t\t\t\t\tdragSourceImage = new Image(control.getDisplay(), data);", "+\t\t\t\t\tOS.SelectObject (memHdc, oldMemBitmap);", "+\t\t\t\t\tOS.DeleteDC (memHdc);", "+\t\t\t\t\tOS.DeleteObject (memDib);", "+\t\t\t\t\tOS.SelectObject (srcHdc, oldSrcBitmap);", "+\t\t\t\t\tOS.DeleteDC (srcHdc);", "+\t\t\t\t\tOS.ReleaseDC (0, hdc);", "+\t\t\t\t\treturn dragSourceImage;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c174154d8f2d8b33bdac4e3808d40813", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TreeDragSourceEffect.java", "commitBeforeChange": "5a8028d0064ece2db29042b455196c98ef644e7b", "commitAfterChange": "d9530391850eebbeb2618f65fb4c27b05c593e05", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tImage getDragSourceImage(DragSourceEvent event)", "signatureAfterChange": "  \tImage getDragSourceImage(DragSourceEvent event)", "diff": ["-\t\tdragSourceImage = null;\t\t", "+\t\tdragSourceImage = null;", "+\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (5, 1)) {", "+\t\t\tSHDRAGIMAGE shdi = new SHDRAGIMAGE();", "+\t\t\tint DI_GETDRAGIMAGE = OS.RegisterWindowMessage (new TCHAR (0, \"ShellGetDragImage\", true)); //$NON-NLS-1$", "+\t\t\tif (OS.SendMessage (control.handle, DI_GETDRAGIMAGE, 0, shdi) != 0) {", "+\t\t\t\tevent.x += shdi.ptOffset.x;", "+\t\t\t\tevent.y += shdi.ptOffset.y;", "+\t\t\t\tint /*long */ hImage = shdi.hbmpDragImage;", "+\t\t\t\tif (hImage != 0) {", "+\t\t\t\t\tBITMAP bm = new BITMAP ();", "+\t\t\t\t\tOS.GetObject (hImage, BITMAP.sizeof, bm);", "+\t\t\t\t\tint srcWidth = bm.bmWidth;", "+\t\t\t\t\tint srcHeight = bm.bmHeight;", "+\t\t\t\t\t", "+\t\t\t\t\t/* Create resources */", "+\t\t\t\t\tint /*long*/ hdc = OS.GetDC (0);", "+\t\t\t\t\tint /*long*/ srcHdc = OS.CreateCompatibleDC (hdc);", "+\t\t\t\t\tint /*long*/ oldSrcBitmap = OS.SelectObject (srcHdc, hImage);", "+\t\t\t\t\tint /*long*/ memHdc = OS.CreateCompatibleDC (hdc);", "+\t\t\t\t\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER ();", "+\t\t\t\t\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;", "+\t\t\t\t\tbmiHeader.biWidth = srcWidth;", "+\t\t\t\t\tbmiHeader.biHeight = -srcHeight;", "+\t\t\t\t\tbmiHeader.biPlanes = 1;", "+\t\t\t\t\tbmiHeader.biBitCount = 32;", "+\t\t\t\t\tbmiHeader.biCompression = OS.BI_RGB;", "+\t\t\t\t\tbyte []\tbmi = new byte[BITMAPINFOHEADER.sizeof];", "+\t\t\t\t\tOS.MoveMemory (bmi, bmiHeader, BITMAPINFOHEADER.sizeof);", "+\t\t\t\t\tint /*long*/ [] pBits = new int /*long*/ [1];", "+\t\t\t\t\tint /*long*/ memDib = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "+\t\t\t\t\tif (memDib == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\t\tint /*long*/ oldMemBitmap = OS.SelectObject (memHdc, memDib);", "+", "+\t\t\t\t\tBITMAP dibBM = new BITMAP ();", "+\t\t\t\t\tOS.GetObject (memDib, BITMAP.sizeof, dibBM);", "+\t\t\t\t\tint sizeInBytes = dibBM.bmWidthBytes * dibBM.bmHeight;", "+", "+\t\t\t\t \t/* Get the foreground pixels */", "+\t\t\t\t \tOS.BitBlt (memHdc, 0, 0, srcWidth, srcHeight, srcHdc, 0, 0, OS.SRCCOPY);", "+\t\t\t\t \tbyte[] srcData = new byte [sizeInBytes];", "+\t\t\t\t\tOS.MoveMemory (srcData, dibBM.bmBits, sizeInBytes);", "+\t\t\t\t\t", "+\t\t\t\t\tPaletteData palette = new PaletteData(0xFF00, 0xFF0000, 0xFF000000);", "+\t\t\t\t\tImageData data = new ImageData(srcWidth, srcHeight, bm.bmBitsPixel, palette, bm.bmWidthBytes, srcData);", "+\t\t\t\t\tdata.transparentPixel = shdi.crColorKey << 8;", "+\t\t\t\t\tdragSourceImage = new Image (control.getDisplay (), data);", "+\t\t\t\t\tOS.SelectObject (memHdc, oldMemBitmap);", "+\t\t\t\t\tOS.DeleteDC (memHdc);", "+\t\t\t\t\tOS.DeleteObject (memDib);", "+\t\t\t\t\tOS.SelectObject (srcHdc, oldSrcBitmap);", "+\t\t\t\t\tOS.DeleteDC (srcHdc);", "+\t\t\t\t\tOS.ReleaseDC (0, hdc);", "+\t\t\t\t\treturn dragSourceImage;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn null;", "+\t\t}", "+\t\t"]}], "num": 12025}
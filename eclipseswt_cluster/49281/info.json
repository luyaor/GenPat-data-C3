{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1f010a5c9202ce937048222d8bc69cc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe59192a9735f9429785e2ef6de19fa5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/DragSource.java", "commitBeforeChange": "6bd6730e32669fbb2a0c33215b3d8035dce857ef", "commitAfterChange": "37ab1e4e2102278481686b7e60e6dfb0a4bf0c90", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  private void drag(Event dragEvent)", "signatureAfterChange": "  private void drag(Event dragEvent)", "diff": ["-\tint imagelist = 0;", "+\tImageList imagelist = null;", "-\t\timagelist = createImageList(image);", "-\t\tif (imagelist != 0) {", "-\t\t\ttopControl = control.getShell();", "-\t\t\tOS.ImageList_BeginDrag(imagelist, 0, 0, 0);", "-\t\t\tPoint location = topControl.getLocation();", "-            /*", "-            * Feature in Windows. When ImageList_DragEnter() is called,", "-            * it takes a snapshot of the screen  If a drag is started", "-            * when another window is in front, then the snapshot will", "-            * contain part of the other window, causing pixel corruption.", "-            * The fix is to force all paints to be delivered before", "-            * calling ImageList_DragEnter().", "-            */", "-\t\t\tif (OS.IsWinCE) {", "-\t\t\t\tOS.UpdateWindow (topControl.handle);", "-\t\t\t} else {", "-\t\t\t\tint flags = OS.RDW_UPDATENOW | OS.RDW_ALLCHILDREN;", "-\t\t\t\tOS.RedrawWindow (topControl.handle, null, 0, flags);", "-\t\t\t}", "-\t\t\tOS.ImageList_DragEnter(topControl.handle, dragEvent.x - location.x, dragEvent.y - location.y);", "+\t\timagelist = new ImageList(SWT.NONE);", "+\t\timagelist.add(image);", "+\t\ttopControl = control.getShell();", "+\t\tOS.ImageList_BeginDrag(imagelist.getHandle(), 0, 0, 0);", "+\t\tPoint location = topControl.getLocation();", "+        /*", "+        * Feature in Windows. When ImageList_DragEnter() is called,", "+        * it takes a snapshot of the screen  If a drag is started", "+        * when another window is in front, then the snapshot will", "+        * contain part of the other window, causing pixel corruption.", "+        * The fix is to force all paints to be delivered before", "+        * calling ImageList_DragEnter().", "+        */", "+\t\tif (OS.IsWinCE) {", "+\t\t\tOS.UpdateWindow (topControl.handle);", "+\t\t} else {", "+\t\t\tint flags = OS.RDW_UPDATENOW | OS.RDW_ALLCHILDREN;", "+\t\t\tOS.RedrawWindow (topControl.handle, null, 0, flags);", "+\t\tOS.ImageList_DragEnter(topControl.handle, dragEvent.x - location.x, dragEvent.y - location.y);", "-\tif (imagelist != 0) {", "+\tif (imagelist != null) {", "-\t\tOS.ImageList_Destroy(imagelist);", "-\t\timagelist = 0;", "+\t\timagelist.dispose();", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a892d18056fdde331e1699d99844ea88", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/DragSource.java", "commitBeforeChange": "cd2b53b4a9279ed54f58046e25d52b26e8ff215a", "commitAfterChange": "a249bc7fdbc7fae25945bbe8a9ec4c661502f54f", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  private void drag(Event dragEvent)", "signatureAfterChange": "  private void drag(Event dragEvent)", "diff": ["+\thwndDrag = 0;", "+\ttopControl = null;", "-\t\tOS.ImageList_BeginDrag(imagelist.getHandle(), 0, 0, 0);", "-\t\tPoint location = topControl.getLocation();", "+\t\t/* ", "+\t\t * Bug in Windows. The image is inverted if the shell is RIGHT_TO_LEFT.", "+\t\t * The fix is to create a transparent window that covers the shell client", "+\t\t * area and use it during the drag to prevent the image from being inverted.", "+\t\t * On XP if the shell is RTL, the image is not displayed.", "+\t\t */", "+\t\tint offset = 0;", "+\t\thwndDrag = topControl.handle;", "+\t\tif ((topControl.getStyle() & SWT.RIGHT_TO_LEFT) != 0) {", "+\t\t\toffset = image.getBounds().width;", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.GetClientRect (topControl.handle, rect);", "+\t\t\thwndDrag = OS.CreateWindowEx (", "+\t\t\t\tOS.WS_EX_TRANSPARENT | OS.WS_EX_NOINHERITLAYOUT,", "+\t\t\t\tWindowClass,", "+\t\t\t\tnull,", "+\t\t\t\tOS.WS_CHILD | OS.WS_CLIPSIBLINGS,", "+\t\t\t\t0, 0,", "+\t\t\t\trect.right - rect.left, rect.bottom - rect.top, ", "+\t\t\t\ttopControl.handle,", "+\t\t\t\t0,", "+\t\t\t\tOS.GetModuleHandle (null),", "+\t\t\t\tnull);", "+\t\t\tOS.ShowWindow (hwndDrag, OS.SW_SHOW);", "+\t\t}", "+\t\tOS.ImageList_BeginDrag(imagelist.getHandle(), 0, offset, 0);", "-\t\tOS.ImageList_DragEnter(topControl.handle, dragEvent.x - location.x, dragEvent.y - location.y);", "+\t\tPOINT pt = new POINT ();", "+\t\tpt.x = dragEvent.x;", "+\t\tpt.y = dragEvent.y;", "+\t\tOS.MapWindowPoints (0, hwndDrag, pt, 1);", "+\t\tOS.ImageList_DragEnter(hwndDrag, pt.x, pt.y);", "-\tint result = COM.DoDragDrop(iDataObject.getAddress(), iDropSource.getAddress(), operations, pdwEffect);", "-\tif (imagelist != null) {", "-\t\tOS.ImageList_DragLeave(topControl.handle);", "-\t\tOS.ImageList_EndDrag();", "-\t\timagelist.dispose();", "-\t\ttopControl = null;", "+\tint result = COM.DRAGDROP_S_CANCEL;", "+\ttry {", "+\t\tresult = COM.DoDragDrop(iDataObject.getAddress(), iDropSource.getAddress(), operations, pdwEffect);", "+\t} finally {", "+\t\t// ensure that we don't leave transparent window around", "+\t\tif (hwndDrag != 0) {", "+\t\t\tOS.ImageList_DragLeave(hwndDrag);", "+\t\t\tOS.ImageList_EndDrag();", "+\t\t\timagelist.dispose();", "+\t\t\tif (hwndDrag != topControl.handle) OS.DestroyWindow(hwndDrag);", "+\t\t\thwndDrag = 0;", "+\t\t\ttopControl = null;", "+\t\t}", "+\t\tdisplay.setData(key, oldValue);", "-\tdisplay.setData(key, oldValue);"]}], "num": 49281}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6d25b682eef9e393b08e8f36b03161a1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c8b3adc0ff8a4a89d6f4b30ad714e6e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Spinner.java", "commitBeforeChange": "3ab0551451280a6b62c6f6f642ac3addeaec90c2", "commitAfterChange": "388d4d62f45977d8cf59bdb3d84540e0aa3a278d", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 49, "signatureBeforeChange": "  boolean sendKeyEvent (int type, Event event)", "signatureAfterChange": "  boolean shouldChangeTextInRange_replacementString(int id, int sel, int affectedCharRange, int replacementString)", "diff": ["-boolean sendKeyEvent (int type, Event event) {", "-\tif (!super.sendKeyEvent (type, event)) {", "-\t\treturn false;", "-\t}", "-\tif (type != SWT.KeyDown) return true;", "-\tif ((style & SWT.READ_ONLY) != 0) return true;", "-\tif (event.character == 0) return true;", "-\tif ((event.stateMask & SWT.COMMAND) != 0) return true;", "-//\tif (!hooks (SWT.Verify) && !filters (SWT.Verify)) return true;", "-\tString oldText = \"\", newText = \"\";", "-\tint /*long*/ charCount = 0;", "-\tcharCount = textView.stringValue().length();", "-\tNSText fieldEditor = textView.window().fieldEditor(false, textView);", "-\tNSRange selection = fieldEditor.selectedRange();", "-\tint /*long*/ start = selection.location, end = selection.location + selection.length;", "-\tswitch (event.character) {", "-\t\tcase SWT.BS:", "-\t\t\tif (start == end) {", "-\t\t\t\tif (start == 0) return true;", "-\t\t\t\tstart = Math.max (0, start - 1);", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase SWT.DEL:", "-\t\t\tif (start == end) {", "-\t\t\t\tif (start == charCount) return true;", "-\t\t\t\tend = Math.min (end + 1, charCount);", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase SWT.CR:", "-\t\t\treturn true;", "-\t\tdefault:", "-\t\t\tif (event.character != '\\t' && event.character < 0x20) return true;", "-\t\t\toldText = new String (new char [] {event.character});", "-\t}", "-\tnewText = verifyText (oldText, start, end, event);", "-\tif (newText == null) return false;", "-\tif (charCount - (end - start) + newText.length () > textLimit) {", "-\t\treturn false;", "-\t}", "-\tif (newText != oldText) {", "-\t\tsetText (newText, start, end, false);", "-\t\tstart += newText.length ();", "-\t\tselection.location = start;", "-\t\tselection.length = 0;", "-\t\tfieldEditor.setSelectedRange(selection);", "-\t}", "-\t/*", "-\t* Post the modify event so that the character will be inserted", "-\t* into the widget when the modify event is delivered.  Normally,", "-\t* modify events are sent but it is safe to post the event here", "-\t* because this method is called from the event loop.", "-\t*/", "-\tpostEvent (SWT.Modify);", "-\treturn newText == oldText;\t", "-}", "+boolean shouldChangeTextInRange_replacementString(int /*long*/ id, int /*long*/ sel, int /*long*/ affectedCharRange, int /*long*/ replacementString) {", "+\tNSRange range = new NSRange();", "+\tOS.memmove(range, affectedCharRange, NSRange.sizeof);", "+\tboolean result = callSuperBoolean(id, sel, range, replacementString);", "+\tif (hooks (SWT.Verify)) {", "+\t\tString text = new NSString(replacementString).getString();", "+\t\tNSEvent currentEvent = display.application.currentEvent();", "+\t\tString newText = verifyText(text, (int)/*64*/range.location, (int)/*64*/(range.location+range.length), currentEvent);", "+\t\tif (newText == null) return false;", "+\t\tif (text != newText) {", "+\t\t\tint length = newText.length();", "+\t\t\tNSText fieldEditor = textView.currentEditor ();", "+\t\t\tNSRange selectedRange = fieldEditor.selectedRange();", "+\t\t\tif (textLimit != LIMIT) {", "+\t\t\t\tint /*long*/ charCount = fieldEditor.string().length();", "+\t\t\t\tif (charCount - selectedRange.length + length > textLimit) {", "+\t\t\t\t\tlength = (int)/*64*/(textLimit - charCount + selectedRange.length);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tchar [] buffer = new char [length];", "+\t\t\tnewText.getChars (0, buffer.length, buffer, 0);", "+\t\t\tNSString nsstring = NSString.stringWithCharacters (buffer, buffer.length);", "+\t\t\tfieldEditor.replaceCharactersInRange (fieldEditor.selectedRange (), nsstring);", "+\t\t\tresult = false;", "+\t\t}", "+\t\tif (!result) sendEvent (SWT.Modify);", "+\t}", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97d92b8ebdd25507ad1f1b0e743d167e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 49, "signatureBeforeChange": " \t \tint sendKeyEvent(int type, MacEvent mEvent, Event event)", "signatureAfterChange": "  boolean sendKeyEvent (int type, Event event)", "diff": ["+", "+boolean sendKeyEvent (int type, Event event) {", "+\tif (!super.sendKeyEvent (type, event)) {", "+\t\treturn false;", "+\t}", "+\tif (type != SWT.KeyDown) return true;", "+\tif (event.character == 0) return true;", "+\tif ((style & SWT.READ_ONLY) != 0) return false;", "+\tString oldText = \"\";", "+\tint charCount = getCharCount ();", "+\tPoint selection = getSelection ();", "+\tint start = selection.x, end = selection.y;", "+\tswitch (event.character) {", "+\t\tcase SWT.BS:", "+\t\t\tif (start == end) {", "+\t\t\t\tif (start == 0) return true;", "+\t\t\t\tstart = Math.max (0, start - 1);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase SWT.DEL:", "+\t\t\tif (start == end) {", "+\t\t\t\tif (start == charCount) return true;", "+\t\t\t\tend = Math.min (end + 1, charCount);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase SWT.CR:", "+\t\t\tif ((style & SWT.SINGLE) != 0) {", "+\t\t\t\tpostEvent (SWT.DefaultSelection);", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\toldText = DELIMITER;", "+\t\t\tbreak;", "+\t\tdefault:", "+\t\t\tif (event.character != '\\t' && event.character < 0x20) return true;", "+\t\t\toldText = new String (new char [] {event.character});", "+\t}", "+\tString newText = verifyText (oldText, start, end);", "+\tif (newText == null) return false;", "+\tif (charCount - (end - start) + newText.length () > textLimit) {", "+\t\treturn false;", "+\t}", "+\tif (newText != oldText) setTXNText (start, end, newText);", "+\t/*", "+\t* Post the modify event so that the character will be inserted", "+\t* into the widget when the modify event is delivered.  Normally,", "+\t* modify events are sent but it is safe to post the event here", "+\t* because this method is called from the event loop.", "+\t*/", "+\tpostEvent (SWT.Modify);", "+\treturn newText == oldText;", "+}", "-\t", "-\tint sendKeyEvent(int type, MacEvent mEvent, Event event) {", "-\t", "-\t\tint status= OS.kNoErr;\t// we handled the event", "-\t\t", "-\t\tif ((mEvent.getModifiers() & OS.cmdKey) != 0) {", "-\t\t\tint kind= mEvent.getKind();", "-\t\t\tint code= mEvent.getKeyCode();", "-\t\t\tswitch (code) {", "-\t\t\tcase 0:", "-\t\t\t\tif (kind == OS.kEventRawKeyDown)", "-\t\t\t\t\tselectAll();", "-\t\t\t\treturn status;", "-\t\t\tcase 7:", "-\t\t\t\tif (kind == OS.kEventRawKeyDown)", "-\t\t\t\t\tcut();", "-\t\t\t\treturn status;", "-\t\t\tcase 8:", "-\t\t\t\tif (kind == OS.kEventRawKeyDown)", "-\t\t\t\t\tcopy();", "-\t\t\t\treturn status;", "-\t\t\tcase 9:", "-\t\t\t\tif (kind == OS.kEventRawKeyDown || kind == OS.kEventRawKeyRepeat)", "-\t\t\t\t\tpaste();", "-\t\t\t\treturn status;", "-\t\t\tdefault:", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tint eRefHandle= mEvent.getEventRef();", "-\t\tint nextHandler= mEvent.getNextHandler();", "-\t\tif (hooks (SWT.Verify)) {", "-", "-\t\t\t// extract characters from event", "-\t\t\tString unicode= mEvent.getText();", "-\t\t\tString text= unicode != null ? unicode : \"\";", "-\t\t\tString original= new String(text);", "-\t\t\t", "-\t\t\t// send verify event", "-\t\t\tint[] start= new int[1], end= new int[1];", "-\t\t\tOS.TXNGetSelection(fTX, start, end);", "-\t\t\t", "-\t\t\tif (text.length() == 1) {", "-\t\t\t\tswitch (text.charAt(0)) {", "-\t\t\t\tcase 0x08:", "-\t\t\t\t\tif (start[0] == end[0]) {", "-\t\t\t\t\t\tif (start[0] == 0)", "-\t\t\t\t\t\t\treturn status;", "-\t\t\t\t\t\tif (start[0] > 0)", "-\t\t\t\t\t\t\tstart[0]--;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\tString string= verifyText(original, start[0], end[0], event);", "-\t\t\tif (string == null)", "-\t\t\t\treturn status;\t// ignore event", "-\t\t\t\t", "-\t\t\tint l= string.length();", "-\t\t\tchar[] newChars= new char[l];", "-\t\t\tstring.getChars(0, l, newChars, 0);\t\t", "-\t\t\tif (true) {", "-\t\t\t\tOS.SetEventParameter(eRefHandle, OS.kEventParamTextInputSendText, OS.typeUnicodeText, newChars);", "-\t\t\t\tstatus= OS.CallNextEventHandler(nextHandler, eRefHandle);", "-\t\t\t} else {", "-\t\t\t\tOS.TXNSetSelection(fTX, start[0], end[0]);", "-\t\t\t\tOS.TXNSetData(fTX, newChars, OS.kTXNUseCurrentSelection, OS.kTXNUseCurrentSelection);", "-\t\t\t\tOS.TXNSetSelection(fTX, start[0], start[0]+newChars.length);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tstatus= OS.CallNextEventHandler(nextHandler, eRefHandle);", "-\t\t}", "-\t\t\t\t", "-\t\tsendEvent (SWT.Modify);", "-\t\t", "-\t\treturn status;", "-\t}"]}], "num": 61737}
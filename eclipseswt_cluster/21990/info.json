{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "384b06a4a3262ece161ffbb8cb666f09", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0283420db4a5effcf723d2f1af11807f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "2f3a1ca07389c9c53db62232e88be00765759300", "commitAfterChange": "f1ab5535d3d0fa4e1b6459d4151f49a39b2673cc", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " void doAutoScroll(int direction, int distance)", "signatureAfterChange": " void doAutoScroll(int direction, int distance)", "diff": ["-\tfinal int TIMER_INTERVAL = 50;", "-\t\t\t\t\tdisplay.timerExec(TIMER_INTERVAL, this);", "+\t\t\t\t\tdisplay.timerExec(V_SCROLL_RATE, this);", "+\t\tautoScrollDirection = direction;", "+\t\tdisplay.timerExec(V_SCROLL_RATE, timer);", "-\t\t\t\t\tdisplay.timerExec(TIMER_INTERVAL, this);", "+\t\t\t\t\tdisplay.timerExec(V_SCROLL_RATE, this);", "+\t\tautoScrollDirection = direction;", "+\t\tdisplay.timerExec(V_SCROLL_RATE, timer);", "-\t\t\t\t\tdisplay.timerExec(TIMER_INTERVAL, this);", "+\t\t\t\t\tdisplay.timerExec(H_SCROLL_RATE, this);", "+\t\tautoScrollDirection = direction;", "+\t\tdisplay.timerExec(H_SCROLL_RATE, timer);", "-\t\t\t\t\tdisplay.timerExec(TIMER_INTERVAL, this);", "+\t\t\t\t\tdisplay.timerExec(H_SCROLL_RATE, this);", "-\t} \t", "-\tif (timer != null) {", "-\t\tdisplay.timerExec(TIMER_INTERVAL, timer);", "+\t\tdisplay.timerExec(H_SCROLL_RATE, timer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eab8bedec0c644e2551d3893b372757f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \r protected void release ()", "signatureAfterChange": "\r \r protected void release ()", "diff": ["-\t\r", "-\t/* Release the warning and error callbacks */\r", "-\txtWarningCallback.dispose (); xtWarningCallback = null;\r", "-\txtWarningProc = 0;\r", "-\txErrorCallback.dispose (); xErrorCallback = null;\r", "-\txErrorProc = 0;\r", "-\txtErrorCallback.dispose (); xtErrorCallback = null;\r", "-\txtErrorProc = 0;\r", "-\txIOErrorCallback.dispose (); xIOErrorCallback = null;\r", "-\txIOErrorProc = 0;\r", "+\t", "+\t/* Free the Xt error handler */", "+\tint xtContext = OS.XtDisplayToApplicationContext (xDisplay);", "+\tOS.XtAppSetErrorHandler (xtContext, xtErrorProc);", "+\txtErrorCallback.dispose (); xtErrorCallback = null;", "+\txtNullErrorProc = xtErrorProc = 0;", "+\t", "+\t/* Free the Xt Warning handler */", "+\tOS.XtAppSetWarningHandler (xtContext, xtWarningProc);", "+\txtWarningCallback.dispose (); xtWarningCallback = null;", "+\txtNullWarningProc = xtWarningProc = 0;", "+\t", "+\t/* Free the X IO error handler */", "+\tOS.XSetIOErrorHandler (xIOErrorProc);", "+\txIOErrorCallback.dispose (); xIOErrorCallback = null;", "+\txNullIOErrorProc = xIOErrorProc = 0;", "+\t", "+\t/* Free the X error handler */", "+\t/*", "+\t* Bug in Motif.  For some reason, when a pixmap is", "+\t* set into a button or label, despite the fact that", "+\t* the pixmap is cleared from the widget before it", "+\t* is disposed, Motif still references the pixmap", "+\t* and attempts to dispose it in XtDestroyApplicationContext().", "+\t* The fix is to install the null error handler to avoid the", "+\t* warning.", "+\t*", "+\t* NOTE: The warning callback is leaked.", "+\t*/", "+\tOS.XSetErrorHandler (xNullErrorProc);", "+//\tOS.XSetErrorHandler (xErrorProc);", "+//\txErrorCallback.dispose (); xErrorCallback = null;", "+//\txNullErrorProc = xErrorProc = 0;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78262262ebf9aafd0b32c70ea687e9d8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabItem.java", "commitBeforeChange": "4a41229267d8ec39ffddb937135f7f228c3d90ec", "commitAfterChange": "a3f5ef23bb9a2d806a5c1b1bcf9eba42e3d5e4ca", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r private int imageWidth()", "signatureAfterChange": "\r int preferredHeight(GC gc)", "diff": ["-}\r", "-private int imageWidth() {\r", "-\tint imageWidth = 0;\r", "-\tImage image = getImage();\r", "-\tif (image != null) {\r", "-\t\timageWidth = image.getBounds().width;\r", "-\t}\r", "-\treturn imageWidth;\r", "-}\r", "+\tImage image = getImage();\r", "+\tint height = 0;\r", "+\tif (image != null) height = image.getBounds().height;\r", "+\tString text = getText();\r", "+\theight = Math.max(height, gc.textExtent(text, SWT.DRAW_MNEMONIC).y);\r", "+\treturn height + TOP_MARGIN + BOTTOM_MARGIN;\r"]}], "num": 21990}
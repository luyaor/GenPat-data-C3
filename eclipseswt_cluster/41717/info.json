{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98a75f8bb9a749808df85fa1561cbf8a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed8c3f689b70f78da7d04cdf5ec820b2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "1acd89a2d1e085725362a748b0102b8318356ef1", "commitAfterChange": "600117323003db9ea522ed0baf12ee909172c3dc", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight, int depth)", "signatureAfterChange": " void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight, int depth)", "diff": ["-\tint colorPixmap = 0, maskPixmap = 0;", "-\tint foreground = 0x00000000;", "-\tif (simple || (srcWidth == destWidth && srcHeight == destHeight)) {", "-\t\tcolorPixmap = srcImage.pixmap;", "-\t\tmaskPixmap = srcImage.mask;", "-\t} else {", "-\t\t/* Stretch the color and mask*/", "-\t\tint xImagePtr = scalePixmap(xDisplay, srcImage.pixmap, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "-\t\tif (xImagePtr != 0) {", "-\t\t\tint xMaskPtr = scalePixmap(xDisplay, srcImage.mask, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "-\t\t\tif (xMaskPtr != 0) {", "-\t\t\t\t/* Create color scaled pixmaps */", "-\t\t\t\tcolorPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, depth);", "-\t\t\t\tint tempGC = OS.XCreateGC(xDisplay, colorPixmap, 0, null);", "-\t\t\t\tOS.XPutImage(xDisplay, colorPixmap, tempGC, xImagePtr, 0, 0, 0, 0, destWidth, destHeight);", "-\t\t\t\tOS.XFreeGC(xDisplay, tempGC);", "-\t\t", "-\t\t\t\t/* Create mask scaled pixmaps */", "-\t\t\t\tmaskPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, 1);", "-\t\t\t\ttempGC = OS.XCreateGC(xDisplay, maskPixmap, 0, null);", "-\t\t\t\tOS.XPutImage(xDisplay, maskPixmap, tempGC, xMaskPtr, 0, 0, 0, 0, destWidth, destHeight);", "-\t\t\t\tOS.XFreeGC(xDisplay, tempGC);", "-\t\t\t\tOS.XDestroyImage(xMaskPtr);", "+\tif (device.useXRender) {", "+\t\tdrawImageXRender(srcImage, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, simple, imgWidth, imgHeight, srcImage.mask, OS.PictStandardA1);", "+\t} else {", "+\t\tint colorPixmap = 0, maskPixmap = 0;", "+\t\tint foreground = 0x00000000;", "+\t\tif (simple || (srcWidth == destWidth && srcHeight == destHeight)) {", "+\t\t\tcolorPixmap = srcImage.pixmap;", "+\t\t\tmaskPixmap = srcImage.mask;", "+\t\t} else {", "+\t\t\t/* Stretch the color and mask*/", "+\t\t\tint xImagePtr = scalePixmap(xDisplay, srcImage.pixmap, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "+\t\t\tif (xImagePtr != 0) {", "+\t\t\t\tint xMaskPtr = scalePixmap(xDisplay, srcImage.mask, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "+\t\t\t\tif (xMaskPtr != 0) {", "+\t\t\t\t\t/* Create color scaled pixmaps */", "+\t\t\t\t\tcolorPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, depth);", "+\t\t\t\t\tint tempGC = OS.XCreateGC(xDisplay, colorPixmap, 0, null);", "+\t\t\t\t\tOS.XPutImage(xDisplay, colorPixmap, tempGC, xImagePtr, 0, 0, 0, 0, destWidth, destHeight);", "+\t\t\t\t\tOS.XFreeGC(xDisplay, tempGC);", "+\t\t\t", "+\t\t\t\t\t/* Create mask scaled pixmaps */", "+\t\t\t\t\tmaskPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, 1);", "+\t\t\t\t\ttempGC = OS.XCreateGC(xDisplay, maskPixmap, 0, null);", "+\t\t\t\t\tOS.XPutImage(xDisplay, maskPixmap, tempGC, xMaskPtr, 0, 0, 0, 0, destWidth, destHeight);", "+\t\t\t\t\tOS.XFreeGC(xDisplay, tempGC);", "+\t", "+\t\t\t\t\tOS.XDestroyImage(xMaskPtr);", "+\t\t\t\t}", "+\t\t\t\tOS.XDestroyImage(xImagePtr);", "-\t\t\tOS.XDestroyImage(xImagePtr);", "+\t\t\t", "+\t\t\t/* Change the source rectangle */", "+\t\t\tsrcX = srcY = 0;", "+\t\t\tsrcWidth = destWidth;", "+\t\t\tsrcHeight = destHeight;", "+\t", "+\t\t\tforeground = ~foreground;", "-\t\t/* Change the source rectangle */", "-\t\tsrcX = srcY = 0;", "-\t\tsrcWidth = destWidth;", "-\t\tsrcHeight = destHeight;", "+\t\t/* Do the blts */", "+\t\tif (colorPixmap != 0 && maskPixmap != 0) {", "+\t\t\tXGCValues values = new XGCValues();", "+\t\t\tOS.XGetGCValues(xDisplay, handle, OS.GCForeground | OS. GCBackground | OS.GCFunction, values);", "+\t\t\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "+\t\t\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "+\t\t\tOS.XSetForeground(xDisplay, handle, foreground);", "+\t\t\tOS.XSetBackground(xDisplay, handle, ~foreground);", "+\t\t\tOS.XSetFunction(xDisplay, handle, OS.GXand);", "+\t\t\tOS.XCopyPlane(xDisplay, maskPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY, 1);", "+\t\t\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "+\t\t\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "+\t\t\tOS.XSetForeground(xDisplay, handle, values.foreground);", "+\t\t\tOS.XSetBackground(xDisplay, handle, values.background);", "+\t\t\tOS.XSetFunction(xDisplay, handle, values.function);", "+\t\t}", "-\t\tforeground = ~foreground;", "-\t}", "-\t", "-\t/* Do the blts */", "-\tif (colorPixmap != 0 && maskPixmap != 0) {", "-\t\tXGCValues values = new XGCValues();", "-\t\tOS.XGetGCValues(xDisplay, handle, OS.GCForeground | OS. GCBackground | OS.GCFunction, values);", "-\t\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "-\t\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "-\t\tOS.XSetForeground(xDisplay, handle, foreground);", "-\t\tOS.XSetBackground(xDisplay, handle, ~foreground);", "-\t\tOS.XSetFunction(xDisplay, handle, OS.GXand);", "-\t\tOS.XCopyPlane(xDisplay, maskPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY, 1);", "-\t\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "-\t\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "-\t\tOS.XSetForeground(xDisplay, handle, values.foreground);", "-\t\tOS.XSetBackground(xDisplay, handle, values.background);", "-\t\tOS.XSetFunction(xDisplay, handle, values.function);", "+\t\t/* Destroy scaled pixmaps */", "+\t\tif (colorPixmap != 0 && srcImage.pixmap != colorPixmap) OS.XFreePixmap(xDisplay, colorPixmap);", "+\t\tif (maskPixmap != 0 && srcImage.mask != maskPixmap) OS.XFreePixmap(xDisplay, maskPixmap);", "-\t/* Destroy scaled pixmaps */", "-\tif (colorPixmap != 0 && srcImage.pixmap != colorPixmap) OS.XFreePixmap(xDisplay, colorPixmap);", "-\tif (maskPixmap != 0 && srcImage.mask != maskPixmap) OS.XFreePixmap(xDisplay, maskPixmap);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fdb4238169082f931d598712da3227c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "97d7bbf8cfdbb6f96f4719f1f7be7a03fa93a649", "commitAfterChange": "86e7cf5504ff5ce8b2c98ba1a25038a04c256d57", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight, int depth)", "signatureAfterChange": " void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight, int depth)", "diff": ["-\tint colorPixmap = srcImage.pixmap;", "-\tint maskPixmap = srcImage.mask;", "+\tint colorPixmap = 0, maskPixmap = 0;", "-\tif (!(simple || (srcWidth == destWidth && srcHeight == destHeight))) {", "+\tif (simple || (srcWidth == destWidth && srcHeight == destHeight)) {", "+\t\tcolorPixmap = srcImage.pixmap;", "+\t\tmaskPixmap = srcImage.mask;", "+\t} else {", "-\t\tint xImagePtr = scalePixmap(xDisplay, colorPixmap, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "-\t\tint xMaskPtr = scalePixmap(xDisplay, maskPixmap, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "+\t\tint xImagePtr = scalePixmap(xDisplay, srcImage.pixmap, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "+\t\tif (xImagePtr != 0) {", "+\t\t\tint xMaskPtr = scalePixmap(xDisplay, srcImage.mask, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "+\t\t\tif (xMaskPtr != 0) {", "+\t\t\t\t/* Create color scaled pixmaps */", "+\t\t\t\tcolorPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, depth);", "+\t\t\t\tint tempGC = OS.XCreateGC(xDisplay, colorPixmap, 0, null);", "+\t\t\t\tOS.XPutImage(xDisplay, colorPixmap, tempGC, xImagePtr, 0, 0, 0, 0, destWidth, destHeight);", "+\t\t\t\tOS.XFreeGC(xDisplay, tempGC);", "+\t\t", "+\t\t\t\t/* Create mask scaled pixmaps */", "+\t\t\t\tmaskPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, 1);", "+\t\t\t\ttempGC = OS.XCreateGC(xDisplay, maskPixmap, 0, null);", "+\t\t\t\tOS.XPutImage(xDisplay, maskPixmap, tempGC, xMaskPtr, 0, 0, 0, 0, destWidth, destHeight);", "+\t\t\t\tOS.XFreeGC(xDisplay, tempGC);", "-\t\t/* Create color scaled pixmaps */", "-\t\tcolorPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, depth);", "-\t\tint tempGC = OS.XCreateGC(xDisplay, colorPixmap, 0, null);", "-\t\tOS.XPutImage(xDisplay, colorPixmap, tempGC, xImagePtr, 0, 0, 0, 0, destWidth, destHeight);", "-\t\tOS.XDestroyImage(xImagePtr);", "-\t\tOS.XFreeGC(xDisplay, tempGC);", "-", "-\t\t/* Create mask scaled pixmaps */", "-\t\tmaskPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, 1);", "-\t\ttempGC = OS.XCreateGC(xDisplay, maskPixmap, 0, null);", "-\t\tOS.XPutImage(xDisplay, maskPixmap, tempGC, xMaskPtr, 0, 0, 0, 0, destWidth, destHeight);", "-\t\tOS.XDestroyImage(xMaskPtr);", "-\t\tOS.XFreeGC(xDisplay, tempGC);", "+\t\t\t\tOS.XDestroyImage(xMaskPtr);", "+\t\t\t}", "+\t\t\tOS.XDestroyImage(xImagePtr);", "+\t\t}", "-\tXGCValues values = new XGCValues();", "-\tOS.XGetGCValues(xDisplay, handle, OS.GCForeground | OS. GCBackground | OS.GCFunction, values);", "-\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "-\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "-\tOS.XSetForeground(xDisplay, handle, foreground);", "-\tOS.XSetBackground(xDisplay, handle, ~foreground);", "-\tOS.XSetFunction(xDisplay, handle, OS.GXand);", "-\tOS.XCopyPlane(xDisplay, maskPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY, 1);", "-\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "-\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "-\tOS.XSetForeground(xDisplay, handle, values.foreground);", "-\tOS.XSetBackground(xDisplay, handle, values.background);", "-\tOS.XSetFunction(xDisplay, handle, values.function);", "+\tif (colorPixmap != 0 && maskPixmap != 0) {", "+\t\tXGCValues values = new XGCValues();", "+\t\tOS.XGetGCValues(xDisplay, handle, OS.GCForeground | OS. GCBackground | OS.GCFunction, values);", "+\t\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "+\t\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "+\t\tOS.XSetForeground(xDisplay, handle, foreground);", "+\t\tOS.XSetBackground(xDisplay, handle, ~foreground);", "+\t\tOS.XSetFunction(xDisplay, handle, OS.GXand);", "+\t\tOS.XCopyPlane(xDisplay, maskPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY, 1);", "+\t\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "+\t\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "+\t\tOS.XSetForeground(xDisplay, handle, values.foreground);", "+\t\tOS.XSetBackground(xDisplay, handle, values.background);", "+\t\tOS.XSetFunction(xDisplay, handle, values.function);", "+\t}", "-\tif (srcImage.pixmap != colorPixmap) OS.XFreePixmap(xDisplay, colorPixmap);", "-\tif (srcImage.mask != maskPixmap) OS.XFreePixmap(xDisplay, maskPixmap);", "+\tif (colorPixmap != 0 && srcImage.pixmap != colorPixmap) OS.XFreePixmap(xDisplay, colorPixmap);", "+\tif (maskPixmap != 0 && srcImage.mask != maskPixmap) OS.XFreePixmap(xDisplay, maskPixmap);"]}], "num": 41717}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2acf095510ddbceebeb114dc8c16346c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "280b23a7aee3f15b27e41b0c39325a3a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "7252c074be7d5fd8626b7fe92856d52e0eef4b48", "commitAfterChange": "02a2fd1ba0eecd76c8bdd51daf981f19dc23cc43", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Program findProgram (String extension)", "signatureAfterChange": " public static Program findProgram (String extension)", "diff": ["-\t\tworkspace.getInfoForFile(fullPath, appName, type);", "+\t\tif (!workspace.getInfoForFile(fullPath, appName, type)) return null;", "+\t\tint /*long*/ [] buffer2 = new int /*long*/[1];", "+\t\tOS.memmove(buffer2, type, C.PTR_SIZEOF);", "+\t\t\tNSString appType = new NSString(buffer2[0]);", "-\t\t\tif (bundle != null) return getProgram(bundle);", "+\t\t\tif (bundle != null) {", "+\t\t\t\tNSString textEditId = NSString.stringWith(\"com.apple.TextEdit\");", "+\t\t\t\tNSString bundleId = NSString.stringWith(\"CFBundleIdentifier\");", "+\t\t\t\tNSDictionary infoDictionary = bundle.infoDictionary();", "+\t\t\t\tboolean textEdit = textEditId.isEqual(infoDictionary.objectForKey(bundleId));", "+\t\t\t\tif (!textEdit) return getProgram(bundle);", "+\t\t\t\t// if text edit, make sure we're really one of the extensions that", "+\t\t\t\t// text edit says it can handle.", "+\t\t\t\tNSString CFBundleDocumentTypes = NSString.stringWith(\"CFBundleDocumentTypes\");", "+\t\t\t\tNSString CFBundleTypeExtensions = NSString.stringWith(\"CFBundleTypeExtensions\");", "+\t\t\t\tid id = infoDictionary.objectForKey(CFBundleDocumentTypes);", "+\t\t\t\tif (id != null) {", "+\t\t\t\t\tNSDictionary documentTypes = new NSDictionary(id.id);", "+\t\t\t\t\tNSEnumerator documentTypesEnumerator = documentTypes.objectEnumerator();", "+\t\t\t\t\twhile ((id = documentTypesEnumerator.nextObject()) != null) {", "+\t\t\t\t\t\tNSDictionary documentType = new NSDictionary(id.id);", "+\t\t\t\t\t\tNSDictionary supportedExtensions = new NSDictionary(documentType.objectForKey(CFBundleTypeExtensions));", "+\t\t\t\t\t\tif (supportedExtensions != null) {", "+\t\t\t\t\t\t\tNSEnumerator supportedExtensionsEnumerator = supportedExtensions.objectEnumerator();", "+\t\t\t\t\t\t\tif (supportedExtensionsEnumerator != null) {", "+\t\t\t\t\t\t\t\tid ext = null;", "+\t\t\t\t\t\t\t\twhile((ext = supportedExtensionsEnumerator.nextObject()) != null) {", "+\t\t\t\t\t\t\t\t\tNSString strExt = new NSString(ext);", "+\t\t\t\t\t\t\t\t\tif (appType.isEqual(strExt)) return getProgram (bundle);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d79da46e3cc0aa577d2a1237e4ab4f2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "d569a8e4e3f708a454ad8d2b1a32242d0ad822fd", "commitAfterChange": "80def70afe4125adafe1eb350e7d5315beb976e6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Program findProgram (String extension)", "signatureAfterChange": " public static Program findProgram (String extension)", "diff": ["-\tif (extension.charAt(0) != '.') extension = \".\" + extension;", "-\tNSAutoreleasePool pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "-\ttry {", "-\t\tNSWorkspace workspace = NSWorkspace.sharedWorkspace();", "-\t\tint /*long*/ appName = OS.malloc(C.PTR_SIZEOF);", "-\t\tint /*long*/ type = OS.malloc(C.PTR_SIZEOF);", "-\t\tNSString temp = new NSString(OS.NSTemporaryDirectory());", "-\t\tNSString fileName = NSString.stringWith(\"swt\" + System.currentTimeMillis() + extension);", "-\t\tNSString fullPath = temp.stringByAppendingPathComponent(fileName);", "-\t\tNSFileManager fileManager = NSFileManager.defaultManager();", "-\t\tfileManager.createFileAtPath(fullPath, null, null);", "-\t\tif (!workspace.getInfoForFile(fullPath, appName, type)) return null;", "-\t\tfileManager.removeItemAtPath(fullPath, 0);", "-\t\tint /*long*/ [] buffer = new int /*long*/[1];", "-\t\tint /*long*/ [] buffer2 = new int /*long*/[1];", "-\t\tOS.memmove(buffer, appName, C.PTR_SIZEOF);", "-\t\tOS.memmove(buffer2, type, C.PTR_SIZEOF);", "-\t\tOS.free(appName);", "-\t\tOS.free(type);", "-\t\tif (buffer [0] != 0) {", "-\t\t\tNSString appPath = new NSString(buffer[0]);", "-\t\t\tNSString appType = new NSString(buffer2[0]);", "-\t\t\tNSBundle bundle = NSBundle.bundleWithPath(appPath);", "-\t\t\tif (bundle != null) {", "-\t\t\t\tNSString textEditId = NSString.stringWith(\"com.apple.TextEdit\");", "-\t\t\t\tNSString bundleId = NSString.stringWith(\"CFBundleIdentifier\");", "-\t\t\t\tNSDictionary infoDictionary = bundle.infoDictionary();", "-\t\t\t\tboolean textEdit = textEditId.isEqual(infoDictionary.objectForKey(bundleId));", "-\t\t\t\tif (!textEdit) return getProgram(bundle);", "-\t\t\t\t// if text edit, make sure we're really one of the extensions that", "-\t\t\t\t// text edit says it can handle.", "-\t\t\t\tNSString CFBundleDocumentTypes = NSString.stringWith(\"CFBundleDocumentTypes\");", "-\t\t\t\tNSString CFBundleTypeExtensions = NSString.stringWith(\"CFBundleTypeExtensions\");", "-\t\t\t\tid id = infoDictionary.objectForKey(CFBundleDocumentTypes);", "-\t\t\t\tif (id != null) {", "-\t\t\t\t\tNSDictionary documentTypes = new NSDictionary(id.id);", "-\t\t\t\t\tNSEnumerator documentTypesEnumerator = documentTypes.objectEnumerator();", "-\t\t\t\t\twhile ((id = documentTypesEnumerator.nextObject()) != null) {", "-\t\t\t\t\t\tNSDictionary documentType = new NSDictionary(id.id);", "-\t\t\t\t\t\tNSDictionary supportedExtensions = new NSDictionary(documentType.objectForKey(CFBundleTypeExtensions));", "-\t\t\t\t\t\tif (supportedExtensions != null) {", "-\t\t\t\t\t\t\tNSEnumerator supportedExtensionsEnumerator = supportedExtensions.objectEnumerator();", "-\t\t\t\t\t\t\tif (supportedExtensionsEnumerator != null) {", "-\t\t\t\t\t\t\t\tid ext = null;", "-\t\t\t\t\t\t\t\twhile((ext = supportedExtensionsEnumerator.nextObject()) != null) {", "-\t\t\t\t\t\t\t\t\tNSString strExt = new NSString(ext);", "-\t\t\t\t\t\t\t\t\tif (appType.isEqual(strExt)) return getProgram (bundle);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\tProgram program = null;", "+\tchar[] chars;", "+\tif (extension.charAt (0) != '.') {", "+\t\tchars = new char[extension.length()];", "+\t\textension.getChars(0, chars.length, chars, 0);", "+\t} else {", "+\t\tchars = new char[extension.length() - 1];", "+\t\textension.getChars(1, extension.length(), chars, 0);\t\t", "+\t}", "+\tNSString ext = NSString.stringWithCharacters(chars, chars.length);", "+\tif (ext != null) {", "+\t\tbyte[] fsRef = new byte[80];", "+\t\tif (OS.LSGetApplicationForInfo(OS.kLSUnknownType, OS.kLSUnknownCreator, ext.id, OS.kLSRolesAll, fsRef, null) == OS.noErr) {", "+\t\t\tint /*long*/ url = OS.CFURLCreateFromFSRef(OS.kCFAllocatorDefault(), fsRef);", "+\t\t\tif (url != 0) {", "+\t\t\t\tNSString bundlePath = new NSURL(url).path();", "+\t\t\t\tNSBundle bundle = NSBundle.bundleWithPath(bundlePath);", "+\t\t\t\tprogram = getProgram(bundle);", "+\t\t\t\tOS.CFRelease(url);", "-\t\treturn null;", "-\t} finally {", "-\t\tpool.release();", "+\treturn program;"]}], "num": 2305}
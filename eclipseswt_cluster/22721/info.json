{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e26615712fe1377eccdbbc4c91541571", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b425b351f7f0c176359cbbdc870061c4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "096e1fb757d4499d3e9dd63533efc08559c46bbd", "commitAfterChange": "f428c4a2986fde1b4a4fc29a3f0cfb32a0967d42", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam, boolean forceSelect)", "signatureAfterChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam, boolean forceSelect)", "diff": ["+\t", "+\t/* Remove the scroll bars that Windows keeps automatically adding */", "+\tboolean fixScroll = false;", "+\tif ((style & SWT.H_SCROLL) == 0 || (style & SWT.V_SCROLL) == 0) {", "+\t\tswitch (msg) {", "+\t\t\tcase OS.WM_PAINT:", "+\t\t\tcase OS.WM_NCPAINT:", "+\t\t\tcase OS.WM_WINDOWPOSCHANGING: {", "+\t\t\t\tint bits = OS.GetWindowLong (hwnd, OS.GWL_STYLE);", "+\t\t\t\tif ((style & SWT.H_SCROLL) == 0 && (bits & OS.WS_HSCROLL) != 0) {", "+\t\t\t\t\tfixScroll = true;", "+\t\t\t\t\tbits &= ~OS.WS_HSCROLL;", "+\t\t\t\t}", "+\t\t\t\tif ((style & SWT.V_SCROLL) == 0 && (bits & OS.WS_VSCROLL) != 0) {", "+\t\t\t\t\tfixScroll = true;", "+\t\t\t\t\tbits &= ~OS.WS_VSCROLL;", "+\t\t\t\t}", "+\t\t\t\tif (fixScroll) OS.SetWindowLong (handle, OS.GWL_STYLE, bits);", "+\t\t\t}", "+\t\t}", "+\t}", "+\t}", "+\tif (fixScroll) {", "+\t\tint flags = OS.RDW_FRAME | OS.RDW_INVALIDATE;", "+\t\tOS.RedrawWindow (handle, null, 0, flags);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5894036431ce665c230e395275a0f9aa", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "a397adb9835229656215e95243704829dfcbbeb5", "commitAfterChange": "def775014633899bdd73c908cbbdd1bf2fa7d5be", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 28, "signatureBeforeChange": " \t \tString getText ()", "signatureAfterChange": " \t \tString getText ()", "diff": ["-\t\tif (accessible.getAccessibleListeners ().length == 0) return null;", "-\t\tAccessibleControlListener[] listeners = accessible.getControlListeners();", "+\t\tint parentResult = 0;", "+\t\tString parentText = \"\";", "+\t\tif (OS.g_type_is_a (parentType, AccessibleType.ATK_TEXT_TYPE)) {", "+\t\t\tint superType = OS.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (handle));", "+\t\t\tAtkTextIface textIface = new AtkTextIface ();", "+\t\t\tATK.memmove (textIface, superType);", "+\t\t\tint characterCount = 0;", "+\t\t\tif (textIface.get_character_count != 0) {", "+\t\t\t\tcharacterCount = OS.call (textIface.get_character_count, handle);", "+\t\t\t}", "+\t\t\tif (characterCount > 0 && textIface.get_text != 0) {", "+\t\t\t\tparentResult = OS.call (textIface.get_text, handle, 0, characterCount);", "+\t\t\t\tif (parentResult != 0) {", "+\t\t\t\t\tint length = OS.strlen (parentResult);", "+\t\t\t\t\tbyte [] buffer = new byte [length];", "+\t\t\t\t\tOS.memmove (buffer, parentResult, length);", "+\t\t\t\t\tparentText = new String (Converter.mbcsToWcs (null, buffer));", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tAccessibleControlListener[] listeners = accessible.getControlListeners ();", "+\t\tif (listeners.length == 0) return parentText;", "+\t\t", "+\t\tevent.result = parentText;", "-\t\t\tlisteners [i].getValue(event);\t\t\t\t", "+\t\t\tlisteners [i].getValue (event);\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "818091e53a6e1a8131ae9ebb4a4405cb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "07a46e8f1baf40ffa37f64002699ab20e003e2f6", "commitAfterChange": "2d43eab414d246f6d1d46d3c78a4ed9ad1289c94", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": "  public void setItemCount (int count)", "signatureAfterChange": "  public void setItemCount (int count)", "diff": ["+\tcheckItems (true);", "+\tcount = Math.max (0, count);", "+\tif (count == itemCount) return;", "-\tremoveAll ();", "-\titemCount = Math.max (0, count);", "-\titems = new TableItem [(itemCount + 3) / 4 * 4];", "-\tif ((style & SWT.VIRTUAL) == 0) {", "-\t\tfor (int i=0; i<itemCount; i++) {", "-\t\t\titems [i] = new TableItem (this, SWT.NONE, i, true);", "-\t\t}", "-\t}", "-", "-\t/*", "-\t* Feature in the Mac. When AddDataBrowserItems() is used", "-\t* to add items, item notification callbacks are issued with", "-\t* the message kDataBrowserItemAdded.  When many items are", "-\t* added, this is slow.  The fix is to temporarily remove", "-\t* the item notification callback.", "-\t*/", "-\tDataBrowserCallbacks callbacks = new DataBrowserCallbacks ();", "+    int[] top = new int [1], left = new int [1];", "+    OS.GetDataBrowserScrollPosition (handle, top, left);", "+    DataBrowserCallbacks callbacks = new DataBrowserCallbacks ();", "+\tif (count < itemCount) {", "+\t\tint index = count;", "+\t\twhile (index < itemCount) {", "+\t\t\tint [] id = new int [] {index + 1};", "+\t\t\tif (OS.RemoveDataBrowserItems (handle, OS.kDataBrowserNoItem, id.length, id, 0) != OS.noErr) {", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tTableItem item = items [index];", "+\t\t\tif (item != null) item.releaseResources ();", "+\t\t\tindex++;", "+\t\t}", "+\t\tif (index < itemCount) error (SWT.ERROR_ITEM_NOT_REMOVED);", "+\t}", "+\tTableItem [] newItems = new TableItem [(count + 3) / 4 * 4];", "+\tSystem.arraycopy (items, 0, newItems, 0, Math.min (count, itemCount));", "+\titems = newItems;", "+\tif ((style & SWT.VIRTUAL) == 0) {", "+\t\tfor (int i=count; i<itemCount; i++) {", "+\t\t\titems [i] = new TableItem (this, SWT.NONE, i, false);", "+\t\t}", "+\t}", "+\titemCount = count;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1d58d0ca7549d28c6b28ba5a1b41a7f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": "  int mouseProc (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int mouseProc (int nextHandler, int theEvent, int userData)", "diff": ["-\t\t\tint [] theRoot = new int [1];", "-\t\t\tOS.GetRootControl (theWindow [0], theRoot);", "-\t\t\tint [] theControl = new int [1];", "-\t\t\tOS.HIViewGetSubviewHit (theRoot [0], inPoint, true, theControl);", "-\t\t\twhile (theControl [0] != 0 && !OS.IsControlEnabled (theControl [0])) {\t\t\t\t", "-\t\t\t\tOS.GetSuperControl (theControl [0], theControl);", "-\t\t\t}", "-\t\t\tWidget widget = null;", "-\t\t\tboolean consume = false;", "-\t\t\tif (theControl [0] == 0) theControl [0] = theRoot [0];", "-\t\t\tdo {", "-\t\t\t\twidget = getWidget (theControl [0]);", "-\t\t\t\tif (widget != null) {", "-\t\t\t\t\tif (widget.isEnabled ()) break;", "-\t\t\t\t\tconsume = true;", "+\t\t\tif (OS.HIVIEW) {", "+\t\t\t\tint [] buffer = new int [1];", "+\t\t\t\tOS.HIViewGetViewForMouseEvent (OS.HIViewGetRoot (theWindow [0]), theEvent, buffer);", "+\t\t\t\tint view = buffer [0];", "+\t\t\t\twhile (view != 0 && !OS.IsControlEnabled (view)) {\t", "+\t\t\t\t\tview = OS.HIViewGetSuperview (view);", "-\t\t\t\tOS.GetSuperControl (theControl [0], theControl);", "-\t\t\t} while (theControl [0] != 0);", "-\t\t\tif (theControl [0] == 0) widget = getWidget (theRoot [0]);", "-\t\t\tif (widget != null) {", "-\t\t\t\tif (widget.contains ((int) inPoint.x, (int) inPoint.y)) {", "-\t\t\t\t\tint result = userData != 0 ? widget.mouseProc (nextHandler, theEvent, userData) : OS.eventNotHandledErr;", "-\t\t\t\t\treturn consume ? OS.noErr : result;", "+\t\t\t\tWidget widget = null;", "+\t\t\t\tboolean consume = false;", "+\t\t\t\tdo {", "+\t\t\t\t\twidget = getWidget (view);", "+\t\t\t\t\tif (widget != null) {", "+\t\t\t\t\t\tif (widget.isEnabled ()) break;", "+\t\t\t\t\t\tconsume = true;", "+\t\t\t\t\t}", "+\t\t\t\t\tview = OS.HIViewGetSuperview (view);", "+\t\t\t\t} while (view != 0);", "+\t\t\t\tif (widget != null) {", "+\t\t\t\t\tif (widget.contains ((int) inPoint.x, (int) inPoint.y)) {", "+\t\t\t\t\t\tint result = userData != 0 ? widget.mouseProc (nextHandler, theEvent, userData) : OS.eventNotHandledErr;", "+\t\t\t\t\t\treturn consume ? OS.noErr : result;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tint [] theRoot = new int [1];", "+\t\t\t\tOS.GetRootControl (theWindow [0], theRoot);", "+\t\t\t\tint [] theControl = new int [1];", "+\t\t\t\tOS.HIViewGetSubviewHit (theRoot [0], inPoint, true, theControl);", "+\t\t\t\twhile (theControl [0] != 0 && !OS.IsControlEnabled (theControl [0])) {\t\t\t\t", "+\t\t\t\t\tOS.GetSuperControl (theControl [0], theControl);", "+\t\t\t\t}", "+\t\t\t\tWidget widget = null;", "+\t\t\t\tboolean consume = false;", "+\t\t\t\tif (theControl [0] == 0) theControl [0] = theRoot [0];", "+\t\t\t\tdo {", "+\t\t\t\t\twidget = getWidget (theControl [0]);", "+\t\t\t\t\tif (widget != null) {", "+\t\t\t\t\t\tif (widget.isEnabled ()) break;", "+\t\t\t\t\t\tconsume = true;", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.GetSuperControl (theControl [0], theControl);", "+\t\t\t\t} while (theControl [0] != 0);", "+\t\t\t\tif (theControl [0] == 0) widget = getWidget (theRoot [0]);", "+\t\t\t\tif (widget != null) {", "+\t\t\t\t\tif (widget.contains ((int) inPoint.x, (int) inPoint.y)) {", "+\t\t\t\t\t\tint result = userData != 0 ? widget.mouseProc (nextHandler, theEvent, userData) : OS.eventNotHandledErr;", "+\t\t\t\t\t\treturn consume ? OS.noErr : result;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "439f6c6bc868b03cb44496cca465360f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "d3720d5589f8dfd5450c9294bbf3a0e6e61c8822", "commitAfterChange": "7d74281b7bfdc8518f6d49fab7107ca4fc9888e1", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void setAlignment (int alignment)", "signatureAfterChange": " public void setAlignment (int alignment)", "diff": ["+\tif ((alignment & (SWT.LEFT | SWT.RIGHT | SWT.CENTER)) == 0) return;", "+\tstyle &= ~(SWT.LEFT | SWT.RIGHT | SWT.CENTER);", "+\tstyle |= alignment & (SWT.LEFT | SWT.RIGHT | SWT.CENTER);", "+\tint just = OS.teFlushLeft;", "+\tif ((alignment & SWT.CENTER) != 0) just = OS.teCenter;", "+\tif ((alignment & SWT.RIGHT) != 0) just = OS.teFlushRight;", "+\tControlFontStyleRec fontStyle = new ControlFontStyleRec ();", "+\tOS.GetControlData (handle, (short) OS.kControlEntireControl, OS.kControlFontStyleTag, ControlFontStyleRec.sizeof, fontStyle, null);", "+\tfontStyle.flags |= OS.kControlUseJustMask;", "+\tfontStyle.just = (short) just;", "+\tOS.SetControlFontStyle (handle, fontStyle);", "+\tredraw ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d6f016b793f738e6c506908e37651e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "60125763a1efa11e54ec12a70126a066824d2e46", "commitAfterChange": "9c30fc8178dc03f08865834d533d272ba55d6454", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  int calculateWidth (int column, int iter)", "signatureAfterChange": "  int calculateWidth (int column, int iter, boolean recurse)", "diff": ["-int calculateWidth (int /*long*/ column, int /*long*/ iter) {", "+int calculateWidth (int /*long*/ column, int /*long*/ iter, boolean recurse) {", "-\tif (OS.gtk_tree_view_get_expander_column (handle) == column) {\t\t", "+\tint /*long*/ path = 0;", "+", "+\tif (OS.gtk_tree_view_get_expander_column (handle) == column) {", "+\t\t/* indent */", "+\t\tGdkRectangle rect = new GdkRectangle ();", "+\t\tOS.gtk_widget_realize (handle);", "+\t\tpath = OS.gtk_tree_model_get_path (modelHandle, iter);", "+\t\tOS.gtk_tree_view_get_cell_area (handle, path, column, rect);", "+\t\twidth += rect.x;", "+\t\t/* expander */", "+", "+\tif (recurse) {", "+\t\tif (path == 0) path = OS.gtk_tree_model_get_path (modelHandle, iter);", "+\t\tboolean expanded = OS.gtk_tree_view_row_expanded (handle, path);", "+\t\tif (expanded) {", "+\t\t\tint /*long*/ childIter = OS.g_malloc (OS.GtkTreeIter_sizeof ());", "+\t\t\tboolean valid = OS.gtk_tree_model_iter_children (modelHandle, childIter, iter);", "+\t\t\twhile (valid) {", "+\t\t\t\twidth = Math.max (width, calculateWidth (column, childIter, true));", "+\t\t\t\tvalid = OS.gtk_tree_model_iter_next (modelHandle, childIter);", "+\t\t\t}", "+\t\t\tOS.g_free (childIter);", "+\t\t}", "+\t}", "+", "+\tif (path != 0) OS.gtk_tree_path_free (path);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a89164690f337edc74f43d38e2b43544", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "bb3acb6a7f8689f7c815f88c972ddb82333b7d6a", "commitAfterChange": "a3b0979fabcd78b8d5f896dda401ebe780fe2171", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam, boolean forceSelect)", "signatureAfterChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam, boolean forceSelect)", "diff": ["-\tint /*long*/ code = OS.CallWindowProc (TableProc, hwnd, msg, wParam, lParam);", "+\t", "+\t/*", "+\t* Bug in Windows.  For some reason, when the WS_EX_COMPOSITED", "+\t* style is set in a parent of a table and the header is visible,", "+\t* Windows issues an endless stream of WM_PAINT messages.  The", "+\t* fix is to call BeginPaint() and EndPaint() outside of WM_PAINT", "+\t* and pass the paint HDC in to the window proc.", "+\t*/", "+\tboolean fixPaint = false;", "+\tif (msg == OS.WM_PAINT) {", "+\t\tint bits0 = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\tif ((bits0 & OS.LVS_NOCOLUMNHEADER) == 0) {", "+\t\t\tint /*long*/ hwndParent = OS.GetParent (handle), hwndOwner = 0;", "+\t\t\twhile (hwndParent != 0) {", "+\t\t\t\tint bits1 = OS.GetWindowLong (hwndParent, OS.GWL_EXSTYLE);", "+\t\t\t\tif ((bits1 & OS.WS_EX_COMPOSITED) != 0) {", "+\t\t\t\t\tfixPaint = true;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\thwndOwner = OS.GetWindow (hwndParent, OS.GW_OWNER);", "+\t\t\t\tif (hwndOwner != 0) break;", "+\t\t\t\thwndParent = OS.GetParent (hwndParent);", "+\t\t\t}", "+\t\t}", "+\t}", "+\tint /*long*/ code = 0;", "+\tif (fixPaint) {", "+\t\tPAINTSTRUCT ps = new PAINTSTRUCT ();", "+\t\tint /*long*/ hDC = OS.BeginPaint (hwnd, ps);", "+\t\tcode = OS.CallWindowProc (TableProc, hwnd, OS.WM_PAINT, hDC, lParam);", "+\t\tOS.EndPaint (hwnd, ps);", "+\t} else {", "+\t\tcode = OS.CallWindowProc (TableProc, hwnd, msg, wParam, lParam);", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d62df1c703b0671c2722d89429cd535a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "43fd114e4016eb2de2ee29501c22790c09e363ec", "commitAfterChange": "d46b1913bf6637ab5b41fc364ab6cfb3ebbf78c0", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " public void setMinimumSize (int width, int height)", "signatureAfterChange": " public void setMinimumSize (int width, int height)", "diff": ["-\tminWidth = width == SWT.DEFAULT ? SWT.DEFAULT : Math.max (0, width);", "-\tminHeight = height == SWT.DEFAULT ? SWT.DEFAULT : Math.max (0, height);", "+\tint widthLimit = 0, heightLimit = 0;", "+\tint trim = SWT.TITLE | SWT.CLOSE | SWT.MIN | SWT.MAX;", "+\tif ((style & SWT.NO_TRIM) == 0 && (style & trim) != 0) {", "+\t\twidthLimit = OS.GetSystemMetrics (OS.SM_CXMINTRACK);", "+\t\tif ((style & SWT.RESIZE) != 0) {", "+\t\t\theightLimit = OS.GetSystemMetrics (OS.SM_CYMINTRACK);", "+\t\t} else {", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\t\tOS.AdjustWindowRectEx (rect, bits, false, OS.GetWindowLong (handle, OS.GWL_EXSTYLE));", "+\t\t\theightLimit = rect.bottom - rect.top;", "+\t\t}", "+\t} ", "+\tminWidth = Math.max (widthLimit, width);", "+\tminHeight = Math.max (heightLimit, height);", "-\tint newWidth = Math.max (size.x, minWidth), newHeight = Math.max (size.y, minHeight);", "+\tint newWidth = Math.max (size.x, minWidth);", "+\tint newHeight = Math.max (size.y, minHeight);", "+\tif (minWidth <= widthLimit) minWidth = SWT.DEFAULT;", "+\tif (minHeight <= heightLimit) minHeight = SWT.DEFAULT;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9f90ed7d074c853701228eac936ffd5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "496ab79a8f803f9a98ae79d4cd7e2c65d16c76b5", "commitAfterChange": "8d17b94848accb9b845b79b8edca0016618da3a9", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "\r void manageChildren ()", "signatureAfterChange": "\r void manageChildren ()", "diff": ["+\t* \r", "+\t* NOTE: This code currently does not work when a\r", "+\t* sibling will take focus.\r", "+\tboolean fixFocus = false;\r", "-\tint [] argList2 = {OS.XmNtraversalOn, 0};\r", "-\tOS.XtSetValues (handle, argList2, argList2.length / 2);\r", "+\tif (argList1 [1] != 0) {\r", "+\t\tint xDisplay = OS.XtDisplay (handle);\r", "+\t\tif (xDisplay != 0) {\r", "+\t\t\tint [] buffer1 = new int [1], buffer2 = new int [1];\r", "+\t\t\tOS.XGetInputFocus (xDisplay, buffer1, buffer2);\r", "+\t\t\tint xWindow = buffer1 [0];\r", "+\t\t\tif (xWindow != 0) {\r", "+\t\t\t\tint focusHandle = OS.XtWindowToWidget (xDisplay, xWindow);\r", "+\t\t\t\tif (focusHandle != 0) {\r", "+\t\t\t\t\tfocusHandle = OS.XmGetFocusWidget (focusHandle);\r", "+\t\t\t\t\tif (focusHandle != 0) {\r", "+\t\t\t\t\t\tint parentHandle = parent.handle;\r", "+\t\t\t\t\t\tdo {\r", "+\t\t\t\t\t\t\tif (parentHandle == focusHandle) break;\r", "+\t\t\t\t\t\t} while ((parentHandle = OS.XtParent (parentHandle)) != 0);\r", "+\t\t\t\t\t\tfixFocus = parentHandle != 0;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\t\r", "+\tif (fixFocus) {\r", "+\t\tint [] argList2 = {OS.XmNtraversalOn, 0};\r", "+\t\tOS.XtSetValues (handle, argList2, argList2.length / 2);\r", "+\t}\r", "-\tOS.XtSetValues (handle, argList1, argList1.length / 2);\r", "+\tif (fixFocus) {\r", "+\t\tOS.XtSetValues (handle, argList1, argList1.length / 2);\r", "+\t}\r", "+\tDisplay display = getDisplay ();\r", "+\tOS.XtOverrideTranslations (handle, display.tabTranslations);\r", "+\tOS.XtOverrideTranslations (handle, display.arrowTranslations);\r"]}], "num": 22721}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65fa4b5214ebda172fb1e71d5c9d7ca4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "005dfdb52b787131fdbdbde0107ce73b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "84ad2169e6003f2095790d093bec59c305be3499", "commitAfterChange": "3d1071088ced6ed6e9f01c8d7208fa00cb52a57a", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r public void setMenuBar (Menu menu)", "signatureAfterChange": "\r public void setMenuBar (Menu menu)", "diff": ["-\tif (OS.IsPPC) {\r", "-\t\t/*\r", "-\t\t* Note in WinCE PPC.  MenuBar is a separate popup window. If\r", "-\t\t* the Shell is full screen, resize its window to leave\r", "-\t\t* space for the MenuBar.\r", "-\t\t*/\r", "-\t\tboolean resize = (getMaximized() && menuBar != menu);\r", "-\t\tif (menuBar != null) {\r", "-\t\t\tOS.CommandBar_Destroy (hwndCB);\r", "-\t\t\thwndCB = 0;\r", "-\t\t\thwndTB = 0;\r", "-\t\t}\r", "-\t\tmenuBar = menu;\r", "-\t\tif (menuBar != null) {\t\t\r", "-\t\t\tSHMENUBARINFO mbi = new SHMENUBARINFO ();\r", "-\t\t\tmbi.cbSize = mbi.sizeof;\r", "-\t\t\tmbi.hwndParent = handle;\r", "-\t\t\tmbi.dwFlags = 0;\r", "-\t\t\tmbi.nToolBarId = 100; /* as defined in .rc file */\r", "-\t\t\tmbi.hInstRes = OS.GetLibraryHandle ();\r", "-\t\t\tboolean success = OS.SHCreateMenuBar (mbi);\r", "-\t\t\thwndCB = mbi.hwndMB;\r", "-\r", "-\t\t\t/* get toolbar */\r", "-\t\t\tif (success && hwndCB != 0) hwndTB = OS.GetWindow (hwndCB, OS.GW_CHILD);\r", "-\t\t\t\t\t\t\r", "-\t\t\tif (hwndTB == 0) {\r", "-\t\t\t\t/* we can't use the menubar */\r", "-\t\t\t\tif (hwndCB != 0) OS.CommandBar_Destroy (hwndCB);\r", "-\t\t\t\treturn;\r", "+\tif (OS.IsWinCE) {\r", "+\t\tif (OS.IsHPC) {\r", "+\t\t\tboolean resize = menuBar != menu;\r", "+\t\t\tif (menuBar != null) OS.CommandBar_Show (menuBar.hwndCB, false);\r", "+\t\t\tmenuBar = menu;\r", "+\t\t\tif (menuBar != null) OS.CommandBar_Show (menuBar.hwndCB, true);\r", "+\t\t\tif (resize) {\r", "+\t\t\t\tsendEvent (SWT.Resize);\r", "+\t\t\t\tlayout (false);\r", "-\t\t\t/* remove the menu item coming from the resource file */\r", "-\t\t\tOS.SendMessage (hwndTB, OS.TB_DELETEBUTTON, 0, 0);\r", "-\t\t\t\r", "-\t\t\t/* populate tool bar mapping menu items to tool items */\r", "-\t\t\tif (menuBar.getItemCount () > 0) {\r", "-\t\t\t\tMenuItem[] items = menuBar.getItems ();\r", "-\t\t\t\tTBBUTTON lpButton = new TBBUTTON ();\r", "-\t\t\t\tTBBUTTONINFO info = new TBBUTTONINFO ();\r", "-\t\t\t\tinfo.cbSize = TBBUTTONINFO.sizeof;\r", "-\t\t\t\tinfo.dwMask = OS.TBIF_TEXT;\r", "-\t\t\t\t\r", "-\t\t\t\tint cch = 128;\r", "-\t\t\t\tint hHeap = OS.GetProcessHeap ();\r", "-\t\t\t\tint byteCount = cch * TCHAR.sizeof;\r", "-\t\t\t\tint pszText = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, byteCount);\r", "-\t\t\t\tMENUITEMINFO mii = new MENUITEMINFO ();\r", "-\t\t\t\tmii.cbSize = MENUITEMINFO.sizeof;\r", "-\t\t\t\tmii.fMask = OS.MIIM_STATE | OS.MIIM_TYPE;\r", "-\t\t\t\tmii.dwTypeData = pszText;\r", "-\r", "-\t\t\t\tfor (int i = 0; i < items.length; i++) {\r", "-\t\t\t\t\tMenuItem item = items[i];\r", "-\t\t\t\t\t/* insert item */\r", "-\t\t\t\t\tlpButton.idCommand = item.id;\r", "-\t\t\t\t\tlpButton.fsStyle = (byte) (OS.TBSTYLE_DROPDOWN | OS.TBSTYLE_AUTOSIZE | 0x80);\r", "-\t\t\t\t\tlpButton.fsState = (byte) OS.TBSTATE_ENABLED;\r", "-\t\t\t\t\tlpButton.iBitmap = OS.I_IMAGENONE;\r", "-\t\t\t\t\tif ((item.style & SWT.SEPARATOR) != 0) {\r", "-\t\t\t\t\t\tlpButton.fsStyle = (byte) OS.BTNS_SEP;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tOS.SendMessage (hwndTB, OS.TB_INSERTBUTTON, i, lpButton);\r", "-\r", "-\t\t\t\t\tif ((item.style & SWT.SEPARATOR) == 0) {\r", "-\t\t\t\t\t\t/* set text and state info */\r", "-\t\t\t\t\t\tMenu parent = item.parent;\r", "-\t\t\t\t\t\tint id = item.id;\r", "-\t\t\t\t\t\tint hMenu = parent.handle;\r", "-\t\t\t\t\t\t\t\t\t\t\t\t\r", "-\t\t\t\t\t\tmii.cch = cch;\r", "-\t\t\t\t\t\tsuccess = OS.GetMenuItemInfo (hMenu, i, true, mii);\r", "-\t\t\t\t\t\tif (!success) error (SWT.ERROR_INVALID_ARGUMENT);\r", "-\t\t\t\t\t\tboolean enabled = (mii.fState & (OS.MFS_DISABLED | OS.MFS_GRAYED)) == 0;\r", "-\t\t\t\t\t\tif (!enabled) {\r", "-\t\t\t\t\t\t\tinfo.dwMask |= OS.TBIF_STATE;\r", "-\t\t\t\t\t\t\tinfo.fsStyle = 0;\r", "-\t\t\t\t\t\t}\t\t\t\t\t\t\r", "-\t\t\t\t\t\tinfo.pszText = pszText;\r", "-\t\t\t\t\t\tOS.SendMessage (hwndTB, OS.TB_SETBUTTONINFO, item.id, info);\r", "-\r", "-\t\t\t\t\t\t/* set menu */\r", "-\t\t\t\t\t\tMenu menu2 = item.menu;\r", "-\t\t\t\t\t\tif (menu2 != null) {\r", "-\t\t\t\t\t\t\tOS.SendMessage (hwndCB, OS.SHCMBM_SETSUBMENU, item.id, menu2.handle);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\tif (pszText != 0) OS.HeapFree (hHeap, 0, pszText);\r", "+\t\t} else {\r", "+\t\t\tif (OS.IsPPC) {\r", "+\t\t\t\t/*\r", "+\t\t\t\t* Note in WinCE PPC.  The menu bar is a separate popup window.\r", "+\t\t\t\t* If the shell is full screen, resize its window to leave\r", "+\t\t\t\t* space for the menu bar.\r", "+\t\t\t\t*/\r", "+\t\t\t\tboolean resize = getMaximized () && menuBar != menu;\r", "+\t\t\t\tif (menuBar != null) OS.ShowWindow (menuBar.hwndCB, OS.SW_HIDE);\r", "+\t\t\t\tmenuBar = menu;\r", "+\t\t\t\tif (menuBar != null) OS.ShowWindow (menuBar.hwndCB, OS.SW_SHOW);\r", "+\t\t\t\tif (resize) setMaximized (true);\r", "-\t\t}\r", "-\t\tif (resize) setMaximized (true);\r", "-\t} else if (OS.IsHPC) {\r", "-\t\tboolean resize = menuBar != menu;\r", "-\t\tif (menuBar != null) {\r", "-\t\t\t/*\r", "-\t\t\t* Because CommandBar_Destroy destroys the menu bar, it\r", "-\t\t\t* is necessary to move the current items into a new menu\r", "-\t\t\t* before it is called.\r", "-\t\t\t*/\r", "-\t\t\tint hMenu = OS.CreateMenu ();\r", "-\t\t\tif (!moveMenu (menuBar.handle, hMenu)) {\r", "-\t\t\t\terror (SWT.ERROR_CANNOT_SET_MENU);\r", "-\t\t\t}\r", "-\t\t\tmenuBar.handle = hMenu;\r", "-\t\t\tif (hwndCB != 0) OS.CommandBar_Destroy (hwndCB);\r", "-\t\t\thwndCB = 0;\r", "-\t\t}\r", "-\t\tmenuBar = menu;\r", "-\t\tif (menuBar != null) {\t\t\r", "-\t\t\thwndCB = OS.CommandBar_Create (OS.GetModuleHandle (null), handle, 1);\r", "-\t\t\tOS.CommandBar_InsertMenubarEx (hwndCB, 0, menuBar.handle, 0);\r", "-\t\t\t/*\r", "-\t\t\t* The command bar hosts the 'close' button when the window does not\r", "-\t\t\t* have a caption.\r", "-\t\t\t*/\r", "-\t\t\tif ((style & SWT.CLOSE) != 0 && (style & SWT.TITLE) == 0) {\r", "-\t\t\t\tOS.CommandBar_AddAdornments(hwndCB, 0, 0);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tif (resize) {\r", "-\t\t\tsendEvent (SWT.Resize);\r", "-\t\t\tlayout (false);\r", "-\t\t}\r", "+\t\t} \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c7b371b06ce6e6e54c20d5860232bc8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/graphics/GraphicsExample.java", "commitBeforeChange": "6dce95c7bac82718c59672a2a21a82d9007c1492", "commitAfterChange": "17a2abe4bc42062a492b649309d8eb9791b8cc17", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void createToolBar(final Composite parent)", "signatureAfterChange": "  void createToolBar(final Composite parent)", "diff": ["-\tListener toolBarListener = new Listener() {", "-\t\tpublic void handleEvent(Event event) {", "-\t\t\tswitch (event.type) {", "-\t\t\t\tcase SWT.Selection: {", "-\t\t\t\t\tif (event.widget == playItem) {", "-\t\t\t\t\t\tanimate = true;", "-\t\t\t\t\t\tplayItem.setEnabled(!animate);", "-\t\t\t\t\t\tpauseItem.setEnabled(animate);", "-\t\t\t\t\t} else if (event.widget == pauseItem) {", "-\t\t\t\t\t\tanimate = false;", "-\t\t\t\t\t\tplayItem.setEnabled(!animate);", "-\t\t\t\t\t\tpauseItem.setEnabled(animate);", "-\t\t\t\t\t} else if (event.widget == backItem) {", "-\t\t\t\t\t\tfinal ToolItem toolItem = (ToolItem) event.widget;", "-\t\t\t\t\t\tfinal ToolBar  toolBar = toolItem.getParent();\t\t\t", "-\t\t\t\t\t\tRectangle toolItemBounds = toolItem.getBounds();", "-\t\t\t\t\t\tPoint point = toolBar.toDisplay(new Point(toolItemBounds.x, toolItemBounds.y));", "-\t\t\t\t\t\tbackMenu.setLocation(point.x, point.y + toolItemBounds.height);", "-\t\t\t\t\t\tbackMenu.setVisible(true);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "+\t", "+\tColorMenu colorMenu = new ColorMenu();", "+\t", "+\t// setup items to be contained in the background menu", "+\tcolorMenu.setColorItems(true);", "+\tcolorMenu.setPatternItems(true);", "+\tcolorMenu.setGradientItems(true);", "+\t", "+\t// create the background menu", "+\tbackMenu = colorMenu.createMenu(parent, new ColorListener() {", "+\t\tpublic void setColor(GraphicsBackground gb) {", "+\t\t\tbackground = gb;", "+\t\t\tbackItem.setImage(gb.getBgImage());", "+\t\t\tif (canvas != null) canvas.redraw();", "-\t};", "+\t});", "-\tplayItem = new ToolItem(toolBar, SWT.PUSH);", "-\tplayItem.setText(getResourceString(\"Play\")); //$NON-NLS-1$", "-\tplayItem.setImage(loadImage(display, \"play.gif\")); //$NON-NLS-1$", "-\tplayItem.addListener(SWT.Selection, toolBarListener);", "+\t// initialize the background to the first item in the menu", "+\tbackground =(GraphicsBackground)backMenu.getItem(0).getData();", "-\tpauseItem = new ToolItem(toolBar, SWT.PUSH);", "-\tpauseItem.setText(getResourceString(\"Pause\")); //$NON-NLS-1$", "-\tpauseItem.setImage(loadImage(display, \"pause.gif\")); //$NON-NLS-1$", "-\tpauseItem.addListener(SWT.Selection, toolBarListener);", "-\t", "+\t// background tool item", "-\tbackItem.addListener(SWT.Selection, toolBarListener);", "-\tString[] names = new String[]{", "-\t\tgetResourceString(\"White\"), //$NON-NLS-1$", "-\t\tgetResourceString(\"Black\"), //$NON-NLS-1$", "-\t\tgetResourceString(\"Red\"), //$NON-NLS-1$", "-\t\tgetResourceString(\"Green\"), //$NON-NLS-1$", "-\t\tgetResourceString(\"Blue\"), //$NON-NLS-1$", "-\t\tgetResourceString(\"CustomColor\"), //$NON-NLS-1$", "-\t};", "-\tColor[] colors = new Color[]{", "-\t\tdisplay.getSystemColor(SWT.COLOR_WHITE),\t", "-\t\tdisplay.getSystemColor(SWT.COLOR_BLACK),\t", "-\t\tdisplay.getSystemColor(SWT.COLOR_RED),\t", "-\t\tdisplay.getSystemColor(SWT.COLOR_GREEN),\t", "-\t\tdisplay.getSystemColor(SWT.COLOR_BLUE),", "-\t\tnull,", "-\t};\t", "-\tbackMenu = new Menu(parent);", "-\tListener listener = new Listener() {", "+\tbackItem.setImage(background.getBgImage());", "+\tbackItem.addListener(SWT.Selection, new Listener() {", "-\t\t\tMenuItem item = (MenuItem)event.widget;", "-\t\t\tif (customMI == item) {", "-\t\t\t\tColorDialog dialog = new ColorDialog(parent.getShell());", "-\t\t\t\tRGB rgb = dialog.open();", "-\t\t\t\tif (rgb == null) return;", "-\t\t\t\tif (customColor != null) customColor.dispose();", "-\t\t\t\tcustomColor = new Color(display, rgb);", "-\t\t\t\tif (customImage != null) customImage.dispose();", "-\t\t\t\tcustomImage = createImage(display, customColor);", "-\t\t\t\titem.setData(new Object[]{customColor, customImage});", "-\t\t\t\titem.setImage(customImage);", "+\t\t\tif (event.widget == backItem) {", "+\t\t\t\tfinal ToolItem toolItem = (ToolItem) event.widget;", "+\t\t\t\tfinal ToolBar  toolBar = toolItem.getParent();", "+\t\t\t\tRectangle toolItemBounds = toolItem.getBounds();", "+\t\t\t\tPoint point = toolBar.toDisplay(new Point(toolItemBounds.x, toolItemBounds.y));", "+\t\t\t\tbackMenu.setLocation(point.x, point.y + toolItemBounds.height);", "+\t\t\t\tbackMenu.setVisible(true);", "-\t\t\ttabBackground = (Object[])item.getData();", "-\t\t\tbackItem.setImage((Image)tabBackground[1]);", "-\t\t\tcanvas.redraw();", "-\t};", "-\tfor (int i = 0; i < names.length; i++) {", "-\t\tMenuItem item = new MenuItem(backMenu, SWT.NONE);", "-\t\titem.setText(names[i]);", "-\t\titem.addListener(SWT.Selection, listener);", "-\t\tImage image = null;", "-\t\tif (colors[i] != null) {", "-\t\t\timage = createImage(display, colors[i]);", "-\t\t\timages.addElement(image);", "-\t\t\titem.setImage(image);", "-\t\t} else {", "-\t\t\t// custom menu item", "-\t\t\tcustomMI = item;", "-\t\t}", "-\t\titem.setData(new Object[]{colors[i], image});", "-\t\tif (tabBackground == null) {", "-\t\t\ttabBackground = (Object[])item.getData();", "-\t\t\tbackItem.setImage((Image)tabBackground[1]);", "-\t\t}", "-\t}", "+\t});", "+\t// double buffer tool item", "-", "-\tToolItem separator = new ToolItem(toolBar, SWT.SEPARATOR);", "-\tComposite comp = new Composite(toolBar, SWT.NONE);", "-\tGridData data;", "-\tGridLayout layout = new GridLayout(1, false);", "-\tlayout.verticalSpacing = 0;", "-\tlayout.marginWidth = layout.marginHeight = 3;", "-\tcomp.setLayout(layout);", "-\ttimerSpinner = new Spinner(comp, SWT.BORDER | SWT.WRAP);", "-\tdata = new GridData(SWT.CENTER, SWT.CENTER, false, false);", "-\ttimerSpinner.setLayoutData(data);", "-\tLabel label = new Label(comp, SWT.NONE);", "-\tlabel.setText(getResourceString(\"Animation\")); //$NON-NLS-1$", "-\tdata = new GridData(SWT.CENTER, SWT.CENTER, false, false);", "-\tlabel.setLayoutData(data);", "-\ttimerSpinner.setMaximum(1000);", "-\ttimerSpinner.setSelection(TIMER);", "-\ttimerSpinner.setSelection(TIMER);", "-\tseparator.setControl(comp);", "-\tseparator.setWidth(comp.computeSize(SWT.DEFAULT, SWT.DEFAULT).x);"]}], "num": 61404}
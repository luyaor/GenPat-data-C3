{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dace7c55256b0024a08c7eccfd0454bd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f67778d801d66399e5eb84cc187d1edd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "22ebc0bfda7d51c576a69d9ad65b1367c74fe002", "commitAfterChange": "b024555b7be59ed9c69f2568310cc99cd0b6720a", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "  LRESULT WM_CHAR (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_CHAR (int wParam, int lParam)", "diff": ["-\t\tcase SWT.CR:", "-\t\t\t/*", "-\t\t\t* Feature in Windows.  Windows sends NM_RETURN from WM_KEYDOWN", "-\t\t\t* instead of using WM_CHAR.  This means that application code", "-\t\t\t* that expects to consume the key press and therefore avoid a", "-\t\t\t* SWT.DefaultSelection event from WM_CHAR will fail.  The fix", "-\t\t\t* is to implement SWT.DefaultSelection in WM_CHAR instead of", "-\t\t\t* using NM_RETURN.", "-\t\t\t*/", "-\t\t\tEvent event = new Event ();", "-\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "-\t\t\tif (hItem != 0) {", "-\t\t\t\tTVITEM tvItem = new TVITEM ();", "-\t\t\t\ttvItem.hItem = hItem;", "-\t\t\t\ttvItem.mask = OS.TVIF_PARAM;", "-\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "-\t\t\t\tevent.item = items [tvItem.lParam];", "-\t\t\t}", "-\t\t\tpostEvent (SWT.DefaultSelection, event);", "-\t\t\t//FALL THROUGH", "-\t\tcase SWT.ESC:", "-\t\tcase ' ':", "-\t\t\treturn LRESULT.ZERO;", "-\t}", "-\treturn result;", "-}", "+\t\tcase ' ': {", "+\t\t\treturn LRESULT.ZERO;", "+\t\tcase SWT.CR: {", "+\t\t\t/*", "+\t\t\t* Feature in Windows.  Windows sends NM_RETURN from WM_KEYDOWN", "+\t\t\t* instead of using WM_CHAR.  This means that application code", "+\t\t\t* that expects to consume the key press and therefore avoid a", "+\t\t\t* SWT.DefaultSelection event from WM_CHAR will fail.  The fix", "+\t\t\t* is to implement SWT.DefaultSelection in WM_CHAR instead of", "+\t\t\t* using NM_RETURN.", "+\t\t\t*/", "+\t\t\tEvent event = new Event ();", "+\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "+\t\t\tif (hItem != 0) {", "+\t\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\t\ttvItem.hItem = hItem;", "+\t\t\t\ttvItem.mask = OS.TVIF_PARAM;", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "+\t\t\t\tevent.item = items [tvItem.lParam];", "+\t\t\t}", "+\t\t\tpostEvent (SWT.DefaultSelection, event);", "+\t\t\treturn LRESULT.ZERO;", "+\t\t}", "+\t\tcase SWT.ESC:", "+\t\t\treturn LRESULT.ZERO;", "+\t}", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e6abf8024015af674da7e5c86fb5e7d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "8687cd618665675e4d4eec2fb36e773a2eec96b3", "commitAfterChange": "dec417ccdc6a050dac541d5eb88bff5d26e71096", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 81, "signatureBeforeChange": "  int kEventRawKeyModifiersChanged (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventRawKeyModifiersChanged (int nextHandler, int theEvent, int userData)", "diff": ["+", "+int kEventRawKeyModifiersChanged (int nextHandler, int theEvent, int userData) {", "+\tDisplay display = this.display;", "+\tint [] modifiers = new int [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, modifiers.length * 4, null, modifiers);", "+\tint lastModifiers = display.lastModifiers;", "+\tint chord = OS.GetCurrentEventButtonState ();", "+\tint type = SWT.KeyUp;", "+\tif ((modifiers [0] & OS.alphaLock) != 0 && (lastModifiers & OS.alphaLock) == 0) type = SWT.KeyDown;", "+\tif ((modifiers [0] & OS.shiftKey) != 0 && (lastModifiers & OS.shiftKey) == 0) type = SWT.KeyDown;", "+\tif ((modifiers [0] & OS.controlKey) != 0 && (lastModifiers & OS.controlKey) == 0) type = SWT.KeyDown;", "+\tif ((modifiers [0] & OS.cmdKey) != 0 && (lastModifiers & OS.cmdKey) == 0) type = SWT.KeyDown;", "+\tif ((modifiers [0] & OS.optionKey) != 0 && (lastModifiers & OS.optionKey) == 0) type = SWT.KeyDown;", "+\tif (type == SWT.KeyUp && (modifiers [0] & OS.alphaLock) == 0 && (lastModifiers & OS.alphaLock) != 0) {", "+\t\tEvent event = new Event ();", "+\t\tevent.keyCode = SWT.CAPS_LOCK;", "+\t\tsetInputState (event, SWT.KeyDown, chord, modifiers [0]);", "+\t\tsendKeyEvent (SWT.KeyDown, event);", "+\t}", "+\tEvent event = new Event ();", "+\tsetInputState (event, type, chord, modifiers [0]);", "+\tif (event.keyCode == 0 && event.character == 0) return OS.eventNotHandledErr;", "+\tboolean result = sendKeyEvent (type, event);", "+\tif (type == SWT.KeyDown && (modifiers [0] & OS.alphaLock) != 0 && (lastModifiers & OS.alphaLock) == 0) {", "+\t\tevent = new Event ();", "+\t\tevent.keyCode = SWT.CAPS_LOCK;", "+\t\tsetInputState (event, SWT.KeyUp, chord, modifiers [0]);", "+\t\tsendKeyEvent (SWT.KeyUp, event);", "+\t}", "+\tdisplay.lastModifiers = modifiers [0];", "+\treturn result ? OS.eventNotHandledErr : OS.noErr;", "+}", "-int kEventRawKeyModifiersChanged (int nextHandler, int theEvent, int userData) {", "-\treturn OS.eventNotHandledErr;", "-}"]}], "num": 60059}
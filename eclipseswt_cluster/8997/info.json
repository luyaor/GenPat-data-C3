{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6be0e4455b548923c3f10348bc2b63eb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "147599cf4e3f5e8f9f1343fbb8529880", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "8b437fb3842f95560dedea9ef4177462cda26613", "commitAfterChange": "548b08f4bee4c72ec1917d36850a817afc8e2973", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " void drawBorder(GC gc)", "signatureAfterChange": " void drawBorder(GC gc)", "diff": ["-\t// Draw selection border across all tabs", "-\tif (selectedIndex == -1) { // no selected item", "-\t\tint x = borderLeft;", "-\t\tint y = onBottom ? size.y - borderBottom - tabHeight - HIGHLIGHT_HEADER : borderTop + tabHeight + 1;", "-\t\tint width = size.x - borderLeft - borderRight;", "-\t\tint height = HIGHLIGHT_HEADER - 1;", "-\t\tgc.setBackground(getBackground());", "-\t\tgc.fillRectangle(x, y, width, height);", "-\t\tx = borderLeft;", "-\t\ty = (onBottom) ? size.y - borderBottom - tabHeight - 1 : borderTop + tabHeight;", "-\t\tgc.setForeground(borderColor1);", "-\t\tgc.drawLine(x, y, x + width, y);", "-\t} else { //selected item", "-\t\tint x = borderLeft;", "-\t\tint y = onBottom ? size.y - borderBottom - tabHeight - HIGHLIGHT_HEADER : borderTop + tabHeight + 1;", "-\t\tint width = size.x - borderLeft - borderRight;", "-\t\tint height = HIGHLIGHT_HEADER - 1;", "-\t\tint[] shape = new int[] {x,y, x+width,y, x+width,y+height, x,y+height};", "-\t\tdrawSelectionBackground(gc, shape);", "-", "-\t\tCTabItem2 item = items[selectedIndex];", "-\t\tint itemX = item.x;", "-\t\tint itemY = item.y;", "-\t\tint itemW = item.width;", "-\t\tint itemH = item.height;", "-\t\tint extra = CTabFolder2.CURVE_WIDTH/2 + 4; // +4 to avoid overlapping with text in next tab", "+\t//draw 1 pixel border around outside", "+\tif (borderLeft > 0) {", "+\t\tColor parentBackground = getParent().getBackground();", "+\t\tColor color = borderColor1;", "+\t\tgc.setForeground(color);", "-\t\t\tint rightTabEdge = getRightItemEdge();", "-\t\t\tif (!single && selectedIndex != topTabIndex && itemX + itemW >= rightTabEdge){ ", "-\t\t\t\tshape = new int[4];", "+\t\t\tint x1 = 0;", "+\t\t\tint x2 = size.x - borderRight;", "+\t\t\tint y1 = borderTop - 1;", "+\t\t\tint y2 = size.y - tabHeight - borderBottom - 1;", "+\t\t\tgc.drawLine(x1, y1, x1, y2); // left", "+\t\t\tgc.drawLine(x2, y1, x2, y2); // right", "+\t\t\tgc.drawLine(x1, y1, x2, y1); // top", "+\t\t\tif (single) {", "+\t\t\t\tint x = Math.max(0, borderLeft - 1);", "+\t\t\t\tint y = size.y - borderBottom - tabHeight;", "+\t\t\t\tint width = size.x - borderLeft - borderRight + 1;", "+\t\t\t\tint height = tabHeight - 1;", "+\t\t\t\tint[] shape = new int[BOTTOM_LEFT_OUTSIDE_CORNER.length + BOTTOM_RIGHT_OUTSIDE_CORNER.length + 4];", "-\t\t\t\tshape[index++] = Math.max(0, borderLeft - 1);", "-\t\t\t\tshape[index++] = itemY - 1;", "-\t\t\t\tshape[index++] = size.x - borderRight;", "-\t\t\t\tshape[index++] = itemY - 1;", "-\t\t\t} else {", "-\t\t\t\tint[] left = BOTTOM_LEFT_CORNER;", "-\t\t\t\tint[] right = curve;", "-\t\t\t\tshape = new int[left.length + right.length + 8];", "-\t\t\t\tint index = 0;", "-\t\t\t\tshape[index++] = Math.max(0, borderLeft - 1);", "-\t\t\t\tshape[index++] = itemY - 1;", "-\t\t\t\tshape[index++] = itemX;", "-\t\t\t\tshape[index++] = itemY - 1;", "-\t\t\t\tfor (int i = 0; i < left.length/2; i++) {", "-\t\t\t\t\tshape[index++] = itemX + left[2*i];", "-\t\t\t\t\tshape[index++] = itemY + itemH + left[2*i+1]-1;", "+\t\t\t\tshape[index++] = x;", "+\t\t\t\tshape[index++] = y;", "+\t\t\t\tfor (int i = 0; i < BOTTOM_LEFT_OUTSIDE_CORNER.length/2; i++) {", "+\t\t\t\t\tshape[index++] = x+BOTTOM_LEFT_OUTSIDE_CORNER[2*i];", "+\t\t\t\t\tshape[index++] = y+height+BOTTOM_LEFT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t\tfor (int i = 0; i < right.length/2; i++) {", "-\t\t\t\t\tshape[index++] = itemX + itemW - extra + right[2*i];", "-\t\t\t\t\tshape[index++] = itemY + right[2*i+1] - 2;", "+\t\t\t\tfor (int i = 0; i < BOTTOM_RIGHT_OUTSIDE_CORNER.length/2; i++) {", "+\t\t\t\t\tshape[index++] = x+width+BOTTOM_RIGHT_OUTSIDE_CORNER[2*i];", "+\t\t\t\t\tshape[index++] = y+height+BOTTOM_RIGHT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t\tint temp = 0;\t\t\t", "-\t\t\t\tfor (int i = 0; i < shape.length/2; i++) {", "-\t\t\t\t\tif (shape[2*i] > rightTabEdge) {", "-\t\t\t\t\t\tif (temp == 0 && i > 0) {", "-\t\t\t\t\t\t\ttemp = shape[2*i-1];", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\ttemp = itemY - 1;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tshape[2*i] = rightTabEdge;", "-\t\t\t\t\t\tshape[2*i+1] = temp;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tshape[index++] = rightTabEdge;", "-\t\t\t\tshape[index++] = itemY - 1;", "-\t\t\t\tshape[index++] = size.x - borderRight;", "-\t\t\t\tshape[index++] = itemY - 1;", "+\t\t\t\tshape[index++] = x+width;", "+\t\t\t\tshape[index++] = y-1;", "+\t\t\t", "+\t\t\t\tantialias(shape, borderColor1.getRGB(), getBackground().getRGB(), parentBackground.getRGB(), gc);", "+\t\t\t\tgc.setForeground(borderColor1);", "+\t\t\t\tgc.drawPolyline(shape);", "-\t\t\tint rightTabEdge = getRightItemEdge();", "-\t\t\tif (!single && selectedIndex != topTabIndex && itemX + itemW >= rightTabEdge){ ", "-\t\t\t\tshape = new int[4];", "+\t\t\tint x1 = borderLeft - 1;", "+\t\t\tint x2 = size.x - borderRight;", "+\t\t\tint y1 = borderTop + tabHeight;", "+\t\t\tint y2 = size.y - borderBottom;", "+\t\t\tgc.drawLine(x1, y1, x1, y2); // left", "+\t\t\tgc.drawLine(x2, y1, x2, y2); // right", "+\t\t\tgc.drawLine(x1, y2, x2, y2); //bottom", "+\t\t\tif (single) {", "+\t\t\t\tint x = Math.max(0, borderLeft - 1);", "+\t\t\t\tint y = borderTop;", "+\t\t\t\tint width = size.x - borderLeft - borderRight + 1;", "+\t\t\t\tint height = tabHeight - 1;", "+\t\t\t\tint[] shape = new int[TOP_LEFT_OUTSIDE_CORNER.length + TOP_RIGHT_OUTSIDE_CORNER.length + 4];", "-\t\t\t\tshape[index++] = Math.max(0, borderLeft - 1);", "-\t\t\t\tshape[index++] = itemY + itemH;", "-\t\t\t\tshape[index++] = size.x - borderRight;", "-\t\t\t\tshape[index++] = itemY + itemH;", "-\t\t\t} else {", "-\t\t\t\tint[] left = TOP_LEFT_CORNER;", "-\t\t\t\tint[] right = curve;", "-\t\t\t\tshape = new int[left.length+right.length+8];", "-\t\t\t\tint index = 0;", "+\t\t\t\tshape[index++] = x;", "+\t\t\t\tshape[index++] = y+height;", "+\t\t\t\tfor (int i = 0; i < TOP_LEFT_OUTSIDE_CORNER.length/2; i++) {", "+\t\t\t\t\tshape[index++] = x+TOP_LEFT_OUTSIDE_CORNER[2*i];", "+\t\t\t\t\tshape[index++] = y+TOP_LEFT_OUTSIDE_CORNER[2*i+1];", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < TOP_RIGHT_OUTSIDE_CORNER.length/2; i++) {", "+\t\t\t\t\tshape[index++] = x+width+TOP_RIGHT_OUTSIDE_CORNER[2*i];", "+\t\t\t\t\tshape[index++] = y+TOP_RIGHT_OUTSIDE_CORNER[2*i+1];", "+\t\t\t\t}", "+\t\t\t\tshape[index++] = x+width;", "+\t\t\t\tshape[index++] = y+height+1;", "-\t\t\t\tshape[index++] = Math.max(0, borderLeft - 1);", "-\t\t\t\tshape[index++] = itemY + itemH;", "-\t\t\t\tshape[index++] = itemX;", "-\t\t\t\tshape[index++] = itemY + itemH;", "-\t\t\t\t", "-\t\t\t\tfor (int i = 0; i < left.length/2; i++) {", "-\t\t\t\t\tshape[index++] = itemX + left[2*i];", "-\t\t\t\t\tshape[index++] = itemY + left[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tfor (int i = 0; i < right.length/2; i++) {", "-\t\t\t\t\tshape[index++] = itemX + itemW - extra + right[2*i];", "-\t\t\t\t\tshape[index++] = itemY + right[2*i+1];", "-\t\t\t\t}", "-\t\t\t\t\t", "-\t\t\t\tint temp = 0;", "-\t\t\t\tfor (int i = 0; i < shape.length/2; i++) {", "-\t\t\t\t\tif (shape[2*i] > rightTabEdge) {", "-\t\t\t\t\t\tif (temp == 0 && i > 0) {", "-\t\t\t\t\t\t\ttemp = shape[2*i-1];", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\ttemp = itemY + itemH;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tshape[2*i] = rightTabEdge;", "-\t\t\t\t\t\tshape[2*i+1] = temp;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tshape[index++] = rightTabEdge;", "-\t\t\t\tshape[index++] = itemY + itemH;", "-\t\t\t\tshape[index++] = size.x - borderRight;", "-\t\t\t\tshape[index++] = itemY + itemH;", "+\t\t\t\tantialias(shape, borderColor1.getRGB(), getBackground().getRGB(), parentBackground.getRGB(), gc);", "+\t\t\t\tgc.setForeground(borderColor1);", "+\t\t\t\tgc.drawPolyline(shape);", "-", "-\t\t// draw line", "-\t\tRGB inside = selectionBackground.getRGB();", "-\t\tif (backgroundImage != null || (gradientColors != null && gradientColors.length > 1)) inside = null;", "-\t\tRGB outside = single ? getBackground().getRGB() : getParent().getBackground().getRGB();", "-\t\tantialias(shape, borderColor1.getRGB(), inside, outside, gc);\t", "-\t\tgc.setForeground(borderColor1);", "-\t\tgc.drawPolyline(shape);", "-\t", "-\t//draw 1 pixel border around outside for flat look", "-\tif (borderLeft > 0) drawFlatBorder(gc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a63517c2ff29c7e0796eb80eae575e2d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "fca36a743f6a048ad199c103a03cfa79445ff4a7", "commitAfterChange": "772dbb2157e9b2de63e2852948b2b41f878efc48", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  void initClasses ()", "signatureAfterChange": "  void initClasses ()", "diff": ["+\tString types = \"*\";", "+\tbyte [] bytes = new byte [types.length() + 1];", "+\tfor (int i = 0; i < types.length(); i++) {", "+\t\tbytes[i] = (byte)types.charAt(i);", "+\t}", "+\tint /*long*/ ptr = OS.malloc(bytes.length);", "+\tOS.memmove(ptr, bytes, bytes.length);", "+\tint /*long*/ [] sizep = new int /*long*/ [1], alignp = new int /*long*/ [1];", "+\tOS.NSGetSizeAndAlignment(ptr, sizep, alignp);", "+\tOS.free(ptr);\t", "+", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar (cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar (cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);", "-\tOS.class_addIvar(cls, SWT_OBJECT, C.PTR_SIZEOF, (byte)(Math.log(C.PTR_SIZEOF) / Math.log(2)), \"^v\");", "+\tOS.class_addIvar(cls, SWT_OBJECT, sizep [0], (byte)alignp [0], types);"]}], "num": 8997}
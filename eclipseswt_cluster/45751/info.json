{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b75bab8a9c023743e2036c23fe1da47", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16976074f81c6268e5f19e02a08a6b37", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "107a4509401e932f6a24887c098d80bfd37d7353", "commitAfterChange": "7319ea76449839519ae1976d3a4dd6a44ee2a2c5", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": " public int internal_new_GC (GCData data)", "signatureAfterChange": " public int internal_new_GC (GCData data)", "diff": ["-\tNSGraphicsContext current = NSGraphicsContext.currentContext();", "-\tNSGraphicsContext context = NSGraphicsContext.graphicsContextWithWindow(view.window());", "-\tNSGraphicsContext.setCurrentContext(context);", "-\tNSAffineTransform transform = NSAffineTransform.transform();", "-\tNSRect rect = topView().frame(); //FIME: Needs to be updated when view size changes", "-\ttransform.translateXBy(0, rect.height);", "-\ttransform.scaleXBy(1, -1);", "-\ttransform.set();", "+\tint context = 0;", "+\tif (data != null && data.paintRect != null) {", "+\t\tcontext = NSGraphicsContext.currentContext().id;", "+\t} else {", "+\t\tcontext = NSGraphicsContext.graphicsContextWithWindow(view.window()).id;", "+\t}", "-\tNSGraphicsContext.setCurrentContext(current);", "-\treturn context.id;", "+\treturn context;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c6226b8c08b9c037b592a694aa4f103", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/internal/BidiUtil.java", "commitBeforeChange": "15f4b6985d669ab2f137286d34b4076c147cdfeb", "commitAfterChange": "08c585db9f021144d2bc0a6d14fa6a69aa45d75d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r static int EnumCodePagesProc(int lpCodePageString)", "signatureAfterChange": "\r static int EnumSystemLanguageGroupsProc(int lpLangGrpId, int lpLangGrpIdString, int lpLangGrpName, int options, int lParam)", "diff": ["-static int EnumCodePagesProc(int lpCodePageString) {\t\r", "-\t/* Get the code pages */\r", "-\tint length = 8;\r", "-\tTCHAR buffer = new TCHAR(0, length);\r", "-\tint byteCount = length * TCHAR.sizeof;\r", "-\tOS.MoveMemory(buffer, lpCodePageString, byteCount);\r", "-\tString cpg = buffer.toString(0, buffer.strlen());\r", "-\t\r", "-\tif (CD_PG_ARABIC.equals(cpg) || CD_PG_HEBREW.equals(cpg)) {\r", "+static int EnumSystemLanguageGroupsProc(int lpLangGrpId, int lpLangGrpIdString, int lpLangGrpName, int options, int lParam) {\r", "+\tif (lpLangGrpId == OS.LGRPID_HEBREW) {\r", "-\telse return 1;\r", "-}\r", "+\tif (lpLangGrpId == OS.LGRPID_ARABIC) {\r", "+\t\tisBidiPlatform = 1;\r", "+\t\treturn 0;\r", "+\t}\r", "+\treturn 1;\r", "+} \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd3540dae36711a4b4acb8a57e46864a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java", "commitBeforeChange": "e26934ac680ad70439130b120695448c0a630d25", "commitAfterChange": "95842c4b8acd967ae07a3fa166a616e528ae2f66", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 87, "signatureBeforeChange": "  void initializeColors()", "signatureAfterChange": "  \tstatic String getResourceString(String key)", "diff": ["-void initializeColors() {", "-\tDisplay display = Display.getDefault();", "-\tRED = new Color (display, new RGB(255,0,0));", "-\tBLUE = new Color (display, new RGB(0,0,255));", "-\tGREEN = new Color (display, new RGB(0,255,0));", "-}", "+", "+\tstatic String getResourceString(String key) {", "+\t\ttry {", "+\t\t\treturn resources.getString(key);", "+\t\t} catch (MissingResourceException e) {", "+\t\t\treturn key;", "+\t\t} catch (NullPointerException e) {", "+\t\t\treturn \"!\" + key + \"!\";  //$NON-NLS-1$ //$NON-NLS-2$", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7771431d2f1a21a9deea22dfe8b26f3a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT PI/common_j2se/org/eclipse/swt/internal/Library.java", "commitBeforeChange": "01c8ee61afe5a2a55fed1839db4f28acfab46b3e", "commitAfterChange": "e0dc1dcebf5cb2c23b90e6736c844e317de5b017", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  static boolean isLoadable ()", "signatureAfterChange": "  static boolean isLoadable ()", "diff": ["-\ttry {", "-\t\turl = new URL (url.getPath ());", "-\t} catch (MalformedURLException e) {", "-\t\t/* should never happen since url's initial path value must be valid */", "-\t}", "-", "-\t\tString path = URLDecoder.decode(url.getPath (), \"UTF-8\");", "-\t\tint index = path.indexOf ('!');", "-\t\tFile file = new File (path.substring (0, index));", "-\t\tJarFile jar = new JarFile (file);", "-\t\tattributes = jar.getManifest ().getMainAttributes ();", "+\t\tURLConnection connection = url.openConnection();", "+\t\tif (!(connection instanceof JarURLConnection)) {", "+\t\t\t/* should never happen for a \"jar:\" url */", "+\t\t\treturn false;", "+\t\t}", "+\t\tJarURLConnection jc = (JarURLConnection) connection;", "+\t\tattributes = jc.getMainAttributes();"]}], "num": 45751}
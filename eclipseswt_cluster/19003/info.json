{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "894c4960eafa6eb02dac16afe1eaa3c4", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88c724345a31f992c8ca7ee2dd92dd80", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "383485f9396fa5b3ecc9c6104e597ef309bf8b65", "commitAfterChange": "d23fba0b8199ef3dc1f513e3ea053b6773edb46c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  Image createDisabledImage (Image image, Color color)", "signatureAfterChange": "  Image createDisabledImage (Image image, Color color)", "diff": ["-\tif (OS.IsWinCE) {", "-\t\treturn new Image (display, image, SWT.IMAGE_DISABLE);", "-\t}", "-\tRectangle rect = image.getBounds ();", "-\tImage disabled = new Image (display, rect);", "-\tGC gc = new GC (disabled);", "-\tgc.setBackground (color);", "-\tgc.fillRectangle (rect);", "-\tint hDC = gc.handle;", "-\tint hImage = image.handle;", "-\tint fuFlags = OS.DSS_DISABLED;", "-\tswitch (image.type) {", "-\t\tcase SWT.BITMAP: fuFlags |= OS.DST_BITMAP; break;", "-\t\tcase SWT.ICON: fuFlags |= OS.DST_ICON; break;", "-\t}", "-\tOS.DrawState (hDC, 0, 0, hImage, 0, 0, 0, rect.width, rect.height, fuFlags);", "-\tgc.dispose ();", "-\treturn disabled;", "+  \t/*", "+  \t* In order to be consistent with the way that disabled", "+\t* images appear in other places in the user interface,", "+\t* use the SWT Graphics to create a disabled image instead", "+    * of calling DrawState().", "+\t*/", "+\treturn new Image (display, image, SWT.IMAGE_DISABLE);", "+\t/*", "+\t* This code is intentionally commented.", "+\t*/", "+//\tif (OS.IsWinCE) {", "+//\t\treturn new Image (display, image, SWT.IMAGE_DISABLE);", "+//\t}", "+//\tRectangle rect = image.getBounds ();", "+//\tImage disabled = new Image (display, rect);", "+//\tGC gc = new GC (disabled);", "+//\tgc.setBackground (color);", "+//\tgc.fillRectangle (rect);", "+//\tint hDC = gc.handle;", "+//\tint hImage = image.handle;", "+//\tint fuFlags = OS.DSS_DISABLED;", "+//\tswitch (image.type) {", "+//\t\tcase SWT.BITMAP: fuFlags |= OS.DST_BITMAP; break;", "+//\t\tcase SWT.ICON: fuFlags |= OS.DST_ICON; break;", "+//\t}", "+//\tOS.DrawState (hDC, 0, 0, hImage, 0, 0, 0, rect.width, rect.height, fuFlags);", "+//\tgc.dispose ();", "+//\treturn disabled;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e1f98307961a8256c938d597c3f968f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "5544ce1d748561f71c4f1d1997c431f82e5c4c86", "commitAfterChange": "24e0049851c0d0a09cb9f25e5892d112e2936fed", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " void createCaretBitmaps()", "signatureAfterChange": " void createCaretBitmaps()", "diff": ["-\tint gcStyle = isMirrored() ? SWT.RIGHT_TO_LEFT : SWT.LEFT_TO_RIGHT;", "-\t", "-\tif (caretPalette == null) {", "-\t\tcaretPalette = new PaletteData(new RGB[] {new RGB (0,0,0), new RGB (255,255,255)});", "-\t}\t", "+\t\tCaret caret = getCaret();", "+\t\tif (caret != null && leftCaretBitmap.equals(caret.getImage())) {", "+\t\t\tgetCaret().setImage(null);", "+\t\t}", "-\tImageData imageData = new ImageData(caretWidth, lineHeight, 1, caretPalette);", "-\tleftCaretBitmap = new Image(display, imageData);", "-\t// mirror the caret gc because when the bitmap is rendered on the screen it will be ", "-\t// mirrored since the GC for the canvas is mirrored", "-\tGC gc = new GC (leftCaretBitmap, gcStyle); ", "+\tleftCaretBitmap = new Image(display, caretWidth, lineHeight);", "+\tGC gc = new GC (leftCaretBitmap); ", "+\tgc.setBackground(display.getSystemColor(SWT.COLOR_BLACK));", "+\tgc.fillRectangle(0, 0, caretWidth, lineHeight);", "+\t\tCaret caret = getCaret();", "+\t\tif (caret != null && rightCaretBitmap.equals(caret.getImage())) {", "+\t\t\tgetCaret().setImage(null);", "+\t\t}", "-\trightCaretBitmap = new Image(display, imageData);", "-\t// mirror the caret gc because when the bitmap is rendered on the screen it will be ", "-\t// mirrored since the GC for the canvas is mirrored", "-\tgc = new GC (rightCaretBitmap, gcStyle); ", "+\trightCaretBitmap = new Image(display, caretWidth, lineHeight);", "+\tgc = new GC (rightCaretBitmap); ", "+\tgc.setBackground(display.getSystemColor(SWT.COLOR_BLACK));", "+\tgc.fillRectangle(0, 0, caretWidth, lineHeight);", "-\tgc.dispose();\t", "+\tgc.dispose();"]}], "num": 19003}
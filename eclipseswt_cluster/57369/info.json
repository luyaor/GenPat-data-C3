{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96f5d0def5401f403d88dde5ad009801", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7d72f7557695443475a478dcd2fd522", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/DragSource.java", "commitBeforeChange": "4cee1510f39bbb7c7d4f6e9abf9fd1a33eea8ac5", "commitAfterChange": "3ab56b5604383800c8a292b023ac3e8e38549981", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void drag(Event dragEvent)", "signatureAfterChange": "  void drag(Event dragEvent)", "diff": ["+\tImage newImage = null;", "+\t\t\t/* Bug174467: It seems that SetDragImageWithCGImage expects an image with the alpha", "+\t\t\t * channel; otherwise the image will not be visible.", "+\t\t\t */", "+\t\t\tif (OS.CGImageGetAlphaInfo(image.handle) == OS.kCGImageAlphaNoneSkipFirst) {", "+\t\t\t\tImageData data = image.getImageData();", "+\t\t\t\tdata.alpha = 0xFF;", "+\t\t\t\tnewImage = new Image(image.getDevice(), data);", "+\t\t\t\timage = newImage;", "+\t\t\t}", "+\t\tif (newImage != null) newImage.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed97816cc3bd3b2c7832be61f3d2fc7a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "a87a0403ac3b9edf077183bd0f22ecbd0e7e4a59", "commitAfterChange": "ce5bc5ccb4b7e34346accfd668928ba52a6f7a27", "methodNumberBeforeChange": 111, "methodNumberAfterChange": 111, "signatureBeforeChange": "  void initXPCOM (String mozillaPath, boolean isXULRunner)", "signatureAfterChange": "  void initXPCOM (String mozillaPath, boolean isXULRunner)", "diff": ["-\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_InitEmbedding\", true); //$NON-NLS-1$", "+\t\tint version = Integer.getInteger(XULRUNNER_VERSION, 0).intValue();", "+\t\tif (version < 2) IsPre_2 = true;", "+\t\tString initFunctionName = IsPre_2 ? \"XRE_InitEmbedding\" : \"XRE_InitEmbedding2\";", "+\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, initFunctionName, true); //$NON-NLS-1$", "-\t\trc = XPCOM.Call (functionPtr, localFile.getAddress (), localFile.getAddress (), LocationProvider.getAddress (), 0, 0);", "+\t\tif (IsPre_2) {", "+\t\t\trc = XPCOM.Call (functionPtr, localFile.getAddress (), localFile.getAddress (), LocationProvider.getAddress (), 0, 0);", "+\t\t} else {", "+\t\t\trc = XPCOM.Call (functionPtr, localFile.getAddress (), localFile.getAddress (), LocationProvider.getAddress ());", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47537fd60427dbb73d1d351643a59bcf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/TextTransfer.java", "commitBeforeChange": "41379afd447e143f3a057620b8db69d0717b2e63", "commitAfterChange": "26a56a1cbfe587585a35a9712abb11e853344060", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void javaToNative (Object object, TransferData transferData)", "signatureAfterChange": " public void javaToNative (Object object, TransferData transferData)", "diff": ["-\tbyte[] buffer = Converter.wcsToMbcs (null, string, true);", "+\tbyte[] utf8 = Converter.wcsToMbcs (null, string, true);", "-\t\tboolean result = OS.gdk_utf8_to_compound_text(buffer, encoding, format, ctext, length);", "+\t\tboolean result = OS.gdk_utf8_to_compound_text(utf8, encoding, format, ctext, length);", "-\tif (transferData.type == UTF8_STRING_ID ||", "-\t\ttransferData.type == STRING_ID) {", "-\t\tint /*long*/ pValue = OS.g_malloc(buffer.length);", "+\tif (transferData.type == UTF8_STRING_ID) {", "+\t\tint /*long*/ pValue = OS.g_malloc(utf8.length);", "-\t\tOS.memmove(pValue, buffer, buffer.length);", "-\t\ttransferData.type = transferData.type;", "+\t\tOS.memmove(pValue, utf8, utf8.length);", "+\t\ttransferData.type = UTF8_STRING_ID;", "-\t\ttransferData.length = buffer.length - 1;", "+\t\ttransferData.length = utf8.length - 1;", "+\t\ttransferData.result = 1;", "+\t}", "+\tif (transferData.type == STRING_ID) {", "+\t\tint /*long*/ string_target = OS.gdk_utf8_to_string_target(utf8);", "+\t\tif (string_target ==  0) return;", "+\t\ttransferData.type = STRING_ID;", "+\t\ttransferData.format = 8;", "+\t\ttransferData.length = OS.strlen(string_target);", "+\t\ttransferData.pValue = string_target;"]}], "num": 57369}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "992e9c886e5133980458c9a69a8cf969", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8befed086887b9e24bcafce94502bf1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 51, "signatureBeforeChange": " void paintSubItem(Event event, TableItem paintItem, TableColumn column, int paintYPosition)", "signatureAfterChange": " void headerPaintShadow (GC gc, Rectangle bounds, boolean paintHLines, boolean paintVLines)", "diff": ["+void headerPaintShadow (GC gc, Rectangle bounds, boolean paintHLines, boolean paintVLines) {", "+\tgc.setClipping (bounds.x, bounds.y, bounds.width, getHeaderHeight ());", "+\tColor oldForeground = gc.getForeground ();", "+\t", "+\t/* draw highlight shadow */", "+\tgc.setForeground (display.getSystemColor (SWT.COLOR_WIDGET_HIGHLIGHT_SHADOW));", "+\tif (paintHLines) {", "+\t\tint endX = bounds.x + bounds.width;", "+\t\tgc.drawLine (bounds.x, bounds.y, endX, bounds.y);", "+\t}", "+\tif (paintVLines) {", "+\t\tgc.drawLine (bounds.x, bounds.y, bounds.x, bounds.y + bounds.height - 1);", "+\t}", "+\t", "+\t/* draw lowlight shadow */", "+\tPoint bottomShadowStart = new Point (bounds.x + 1, bounds.height - 2);", "+\tPoint bottomShadowStop = new Point (bottomShadowStart.x + bounds.width - 2, bottomShadowStart.y);\t", "+", "+\t/* light inner shadow */", "+\tgc.setForeground (display.getSystemColor (SWT.COLOR_WIDGET_NORMAL_SHADOW));", "+\tif (paintHLines) {", "+\t\tgc.drawLine (", "+\t\t\tbottomShadowStart.x, bottomShadowStart.y,", "+\t\t\tbottomShadowStop.x, bottomShadowStop.y);", "+\t}", "+\tPoint rightShadowStart = new Point (bounds.x + bounds.width - 2, bounds.y + 1);", "+\tPoint rightShadowStop = new Point (rightShadowStart.x, bounds.height - 2);", "+\tif (paintVLines) {", "+\t\tgc.drawLine (", "+\t\t\trightShadowStart.x, rightShadowStart.y,", "+\t\t\trightShadowStop.x, rightShadowStop.y);", "+\t}", "+", "+\t/* dark outer shadow */ ", "+\tgc.setForeground (display.getSystemColor (SWT.COLOR_WIDGET_DARK_SHADOW));", "+\t--bottomShadowStart.x;", "+\t++bottomShadowStart.y;", "+\t++bottomShadowStop.y;", "+\t", "+\tif (paintHLines) {", "+\t\tgc.drawLine (", "+\t\t\tbottomShadowStart.x, bottomShadowStart.y,", "+\t\t\tbottomShadowStop.x, bottomShadowStop.y);", "+\t}", "+\tif (paintVLines) {", "+\t\tgc.drawLine (", "+\t\t\trightShadowStart.x + 1, rightShadowStart.y - 1,", "+\t\t\trightShadowStop.x + 1, rightShadowStop.y + 1);", "+\t}", "+\t", "+\tgc.setForeground (oldForeground);", "+}", "- */", "-void paintSubItem(Event event, TableItem paintItem, TableColumn column, int paintYPosition) {", "-\tRectangle columnBounds = column.getBounds();", "-\tPoint paintPosition;", "-\tint gridLineWidth = getGridLineWidth();", "-\tint itemDrawStopX = columnBounds.x + columnBounds.width - gridLineWidth;", "-\tint clipX;", "-\t", "-\tif (event.x + event.width > itemDrawStopX) {\t// does the invalidated area stretch past the current column's right border?", "-\t\tclipX = Math.max(columnBounds.x, event.x);", "-\t\tRectangle clipRect = new Rectangle(", "-\t\t\t\tclipX, event.y, ", "-\t\t\t\tMath.max(0, itemDrawStopX - clipX), event.height);", "-\t\tif (!drawGridLines) clipRect.width++;", "-\t\tevent.gc.setClipping(clipRect);\t\t\t\t// clip the drawing area", "-\t}", "-\tpaintPosition = new Point(columnBounds.x, paintYPosition);", "-\tpaintItem.paint(event.gc, paintPosition, column);", "-\tif (event.x + event.width > itemDrawStopX) {", "-\t\tevent.gc.setClipping(event.x, event.y, event.width, event.height); // restore original clip rectangle", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c39d49add39ea2017eb61f3e3908d92a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "commitAfterChange": "bbeab947327689cb203638e742e58f555e6c1b64", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 108, "signatureBeforeChange": " void resetTabSize(boolean checkHeight)", "signatureAfterChange": " boolean updateToolTip (int x, int y, Label label)", "diff": ["-}", "-void resetTabSize(boolean checkHeight){", "-\tint oldHeight = tabHeight;", "-\tif (!fixedTabHeight && checkHeight) {", "-\t\tif (topRight != null) tempHeight = Math.max(tempHeight, topRight.computeSize(SWT.DEFAULT, SWT.DEFAULT).y);", "-\t\t", "-\tif (tabHeight != oldHeight){", "-\t\toldSize = null;", "-\t\tnotifyListeners(SWT.Resize, new Event());", "-\t\tsetItemBounds();", "-\t\tredraw();", "+boolean updateToolTip (int x, int y, Label label) {", "+\tCTabItem item = getItem(new Point (x, y));", "+\tif (item == null) return false;", "+\tString tooltip = item.getToolTipText();", "+\tif (tooltip == null) return false;", "+\tif (tooltip.equals(label.getText())) return true;", "+\t", "+\tShell tip = label.getShell();", "+\tlabel.setText(tooltip);", "+\tPoint labelSize = label.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\tlabelSize.x += 2; labelSize.y += 2;", "+\tlabel.setSize(labelSize);", "+\ttip.pack();", "+\t/*", "+\t * On some platforms, there is a minimum size for a shell  ", "+\t * which may be greater than the label size.", "+\t * To avoid having the background of the tip shell showing", "+\t * around the label, force the label to fill the entire client area.", "+\t */", "+\tRectangle area = tip.getClientArea();", "+\tlabel.setSize(area.width, area.height);", "+\t/*", "+\t * Position the tooltip and ensure that it is not located off", "+\t * the screen.", "+\t */", "+\tPoint cursorLocation = getDisplay().getCursorLocation();", "+\t// Assuming cursor is 21x21 because this is the size of", "+\t// the arrow cursor on Windows ", "+\tint cursorHeight = 21; ", "+\tPoint size = tip.getSize();", "+\tRectangle rect = tip.getMonitor().getBounds();", "+\tPoint pt = new Point(cursorLocation.x, cursorLocation.y + cursorHeight + 2);", "+\tpt.x = Math.max(pt.x, rect.x);", "+\tif (pt.x + size.x > rect.x + rect.width) pt.x = rect.x + rect.width - size.x;", "+\tif (pt.y + size.y > rect.y + rect.height) {", "+\t\tpt.y = cursorLocation.y - 2 - size.y;", "+\t}", "+\ttip.setLocation(pt);", "+\treturn true;"]}], "num": 43102}
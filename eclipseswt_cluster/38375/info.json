{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "be5b5226e689b9bdca2e72a78b6cb3b1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2461b7acfea5d8f0776837ab56fa583", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "89dd18f56416766e9f25e99fa93a3cfdf736ff7e", "commitAfterChange": "0333c3cd6e1227d0185cdb60c13b053083d72b21", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-", "-\tbyte[] data = (byte[])super.nativeToJava(transferData);", "-\tif (data == null) return null;", "-\tchar[] unicode = Converter.mbcsToWcs(null, data);", "-\tString string  = new String(unicode);", "-\t// parse data and convert string to array of files", "-\tint start = string.indexOf(\"file:\");", "-\tif (start == -1) return null;", "-\tstart += 5;", "-\tString[] fileNames = new String[0];", "-\twhile (start < string.length()) { ", "-\t\tint end = string.indexOf(\"\\r\", start);", "-\t\tif (end == -1) end = string.length() - 1;", "-\t\tString fileName = string.substring(start, end);", "-\t\t", "-\t\tString[] newFileNames = new String[fileNames.length + 1];", "-\t\tSystem.arraycopy(fileNames, 0, newFileNames, 0, fileNames.length);", "-\t\tnewFileNames[fileNames.length] = fileName;", "-\t\tfileNames = newFileNames;", "-", "-\t\tstart = string.indexOf(\"file:\", end);", "-\t\tif (start == -1) break;", "-\t\tstart += 5;", "+\tif (!isSupportedType(transferData) || transferData.data == null) return null;", "+\tif (transferData.data.length == 0) return null;", "+\t", "+\tif (transferData.type == URILISTID) {", "+\t\tbyte[] data = transferData.data[0];", "+\t\tif (data.length == 0) return null;", "+\t\tchar[] chars = new char[(data.length + 1) / 2];", "+\t\tOS.memcpy(chars, data, data.length);", "+\t\tString str = new String(chars);", "+\t\tint start = str.indexOf(URILIST_PREFIX);", "+\t\tif (start == -1) return null;", "+\t\tstart += URILIST_PREFIX.length();", "+\t\tString[] fileNames = new String[0];", "+\t\twhile (start < str.length()) { ", "+\t\t\tint end = str.indexOf(URILIST_SEPARATOR, start);", "+\t\t\tif (end == -1) end = str.length() - 1;", "+\t\t\tString fileName = str.substring(start, end);", "+\t\t\tString[] newFileNames = new String[fileNames.length + 1];", "+\t\t\tSystem.arraycopy(fileNames, 0, newFileNames, 0, fileNames.length);", "+\t\t\tnewFileNames[fileNames.length] = fileName;", "+\t\t\tfileNames = newFileNames;", "+\t\t\tstart = str.indexOf(URILIST_PREFIX, end);", "+\t\t\tif (start == -1) break;", "+\t\t\tstart += URILIST_PREFIX.length();", "+\t\t}", "+\t\treturn fileNames;", "-\treturn fileNames;", "+\tif (transferData.type == HFSID) {", "+\t\tint count = transferData.data.length;", "+\t\tString[] fileNames = new String[count];", "+\t\tfor (int i=0; i<count; i++) {", "+\t\t\tbyte[] data = transferData.data[i];", "+\t\t\tbyte[] fsspec = new byte[data.length - 10];", "+\t\t\tSystem.arraycopy(data, 10, fsspec, 0, fsspec.length);", "+\t\t\tbyte[] fsRef = new byte[80];", "+\t\t\tif (OS.FSpMakeFSRef(fsspec, fsRef) != OS.noErr) return null;", "+\t\t\tint url = OS.CFURLCreateFromFSRef(OS.kCFAllocatorDefault, fsRef);", "+\t\t\tif (url == 0) return null;", "+\t\t\ttry {", "+\t\t\t\tint path = OS.CFURLCopyFileSystemPath(url, OS.kCFURLPOSIXPathStyle);", "+\t\t\t\tif (path == 0) return null;", "+\t\t\t\ttry {", "+\t\t\t\t\tint length = OS.CFStringGetLength(path);", "+\t\t\t\t\tif (length == 0) return null;", "+\t\t\t\t\tchar[] buffer= new char[length];", "+\t\t\t\t\tCFRange range = new CFRange();", "+\t\t\t\t\trange.length = length;", "+\t\t\t\t\tOS.CFStringGetCharacters(path, range, buffer);", "+\t\t\t\t\tfileNames[i] = new String(buffer);", "+\t\t\t\t} finally {", "+\t\t\t\t\tOS.CFRelease(path);", "+\t\t\t\t}", "+\t\t\t} finally {", "+\t\t\t\tOS.CFRelease(url);", "+\t\t\t}", "+\t\t}", "+\t\treturn fileNames;", "+\t}", "+\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d0eab3a27f7b1623f30899b20338360", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "64effad0f66392d90fe436b2cdfb9750628edbf7", "commitAfterChange": "80a49f89c5a8052f1a382214fc771eca7a097cd6", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-\t", "-\tif (transferData.type == URILISTID) {", "-\t\tbyte[] data = transferData.data[0];", "-\t\tif (data.length == 0) return null;", "-\t\tchar[] chars = new char[(data.length + 1) / 2];", "-\t\tOS.memcpy(chars, data, data.length);", "-\t\tString str = new String(chars);", "-\t\tint start = str.indexOf(URILIST_PREFIX);", "-\t\tif (start == -1) return null;", "-\t\tstart += URILIST_PREFIX.length();", "-\t\tString[] fileNames = new String[0];", "-\t\twhile (start < str.length()) { ", "-\t\t\tint end = str.indexOf(URILIST_SEPARATOR, start);", "-\t\t\tif (end == -1) end = str.length() - 1;", "-\t\t\tString fileName = str.substring(start, end);", "-\t\t\tString[] newFileNames = new String[fileNames.length + 1];", "-\t\t\tSystem.arraycopy(fileNames, 0, newFileNames, 0, fileNames.length);", "-\t\t\tnewFileNames[fileNames.length] = fileName;", "-\t\t\tfileNames = newFileNames;", "-\t\t\tstart = str.indexOf(URILIST_PREFIX, end);", "-\t\t\tif (start == -1) break;", "-\t\t\tstart += URILIST_PREFIX.length();", "-\t\t}", "-\t\treturn fileNames;", "-\t}", "-\tif (transferData.type == HFSID) {", "-\t\tint count = transferData.data.length;", "-\t\tString[] fileNames = new String[count];", "-\t\tfor (int i=0; i<count; i++) {", "-\t\t\tbyte[] data = transferData.data[i];", "+\tint count = transferData.data.length;", "+\tString[] fileNames = new String[count];", "+\tfor (int i=0; i<count; i++) {", "+\t\tbyte[] data = transferData.data[i];", "+\t\tint url = 0;", "+\t\tif (transferData.type == HFSID) {", "-\t\t\tint url = OS.CFURLCreateFromFSRef(OS.kCFAllocatorDefault, fsRef);", "+\t\t\turl = OS.CFURLCreateFromFSRef(OS.kCFAllocatorDefault, fsRef);", "-\t\t\ttry {", "-\t\t\t\tint path = OS.CFURLCopyFileSystemPath(url, OS.kCFURLPOSIXPathStyle);", "-\t\t\t\tif (path == 0) return null;", "-\t\t\t\ttry {", "-\t\t\t\t\tint length = OS.CFStringGetLength(path);", "-\t\t\t\t\tif (length == 0) return null;", "-\t\t\t\t\tchar[] buffer= new char[length];", "-\t\t\t\t\tCFRange range = new CFRange();", "-\t\t\t\t\trange.length = length;", "-\t\t\t\t\tOS.CFStringGetCharacters(path, range, buffer);", "-\t\t\t\t\tfileNames[i] = new String(buffer);", "-\t\t\t\t} finally {", "-\t\t\t\t\tOS.CFRelease(path);", "-\t\t\t\t}", "-\t\t\t} finally {", "-\t\t\t\tOS.CFRelease(url);", "-\t\t\t}", "-\t\treturn fileNames;", "+\t\tif (transferData.type == FURLID) {", "+\t\t\tint encoding = OS.CFStringGetSystemEncoding();", "+\t\t\turl = OS.CFURLCreateWithBytes(OS.kCFAllocatorDefault, data, data.length, encoding, 0);", "+\t\t\tif (url == 0) return null;", "+\t\t}", "+\t\ttry {", "+\t\t\tint path = OS.CFURLCopyFileSystemPath(url, OS.kCFURLPOSIXPathStyle);", "+\t\t\tif (path == 0) return null;", "+\t\t\ttry {", "+\t\t\t\tint length = OS.CFStringGetLength(path);", "+\t\t\t\tif (length == 0) return null;", "+\t\t\t\tchar[] buffer= new char[length];", "+\t\t\t\tCFRange range = new CFRange();", "+\t\t\t\trange.length = length;", "+\t\t\t\tOS.CFStringGetCharacters(path, range, buffer);", "+\t\t\t\tfileNames[i] = new String(buffer);", "+\t\t\t} finally {", "+\t\t\t\tOS.CFRelease(path);", "+\t\t\t}", "+\t\t} finally {", "+\t\t\tOS.CFRelease(url);", "+\t\t}", "-\treturn null;", "+\treturn fileNames;"]}], "num": 38375}
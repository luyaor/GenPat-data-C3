{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ddb6779e3f83eaadccd79cea5df5ad43", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "deee65f558dd6767a577634cc56ea08d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "18ce373e262126236e66fff74f7d2ddc7fffb312", "commitAfterChange": "41ad2a506242e46d3b0d85d794d3bd6a732e7252", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 30, "signatureBeforeChange": " \t \tid getColumnsAttribute(int childID)", "signatureAfterChange": " \t \tid getColumnsAttribute(int childID)", "diff": ["-\t\tid returnValue = null;", "+\t\tif (accessibleTableListeners.size() == 0) return null;", "+", "+\t\t\tlistener.getColumnCount(event);", "-\t\tif (event.accessibles != null) {", "-\t\t\tNSMutableArray array = NSMutableArray.arrayWithCapacity(event.accessibles.length);", "-\t\t\tAccessible[] accessibles = event.accessibles;", "-\t\t\tfor (int i = 0; i < accessibles.length; i++) {", "-\t\t\t\tAccessible acc = accessibles[i];", "-\t\t\t\tacc.index = i;", "-\t\t\t\tarray.addObject(acc.delegate);", "+", "+\t\tif (event.accessibles == null) event.accessibles = new Accessible[0];", "+", "+\t\tif (event.count != event.accessibles.length) {", "+\t\t\tcreateTableDelegate();", "+", "+\t\t\t// Rerun the Column query, now that our adapter is in place.", "+\t\t\tfor (int i = 0; i < accessibleTableListeners.size(); i++) {", "+\t\t\t\tAccessibleTableListener listener = (AccessibleTableListener)accessibleTableListeners.elementAt(i);", "+\t\t\t\tlistener.getColumnCount(event);", "+\t\t\t\tlistener.getColumns(event);", "-\t\t\treturnValue = array;", "-\t\treturn returnValue == null ? NSArray.array() : returnValue;", "+", "+\t\tNSMutableArray array = NSMutableArray.arrayWithCapacity(event.accessibles.length);", "+\t\tAccessible[] accessibles = event.accessibles;", "+\t\tfor (int i = 0; i < accessibles.length; i++) {", "+\t\t\tAccessible acc = accessibles[i];", "+\t\t\tacc.index = i;", "+\t\t\tarray.addObject(acc.delegate);", "+\t\t}", "+\t\treturn array;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "deb5bd3a8a7365a518a278befcd38230", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "18ce373e262126236e66fff74f7d2ddc7fffb312", "commitAfterChange": "41ad2a506242e46d3b0d85d794d3bd6a732e7252", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 27, "signatureBeforeChange": " \t \tid getRowsAttribute(int childID)", "signatureAfterChange": "  \tid getRowsAttribute(int childID)", "diff": ["-\t", "-\tid getRowsAttribute(int childID) {", "-\t\tid returnValue = null;", "-\t\tAccessibleTableEvent event = new AccessibleTableEvent(this);", "-\t\tfor (int i = 0; i < accessibleTableListeners.size(); i++) {", "-\t\t\tAccessibleTableListener listener = (AccessibleTableListener)accessibleTableListeners.elementAt(i);", "-\t\t\tlistener.getRows(event);", "-\t\t}", "-\t\tif (event.accessibles != null) {", "-\t\t\tNSMutableArray array = NSMutableArray.arrayWithCapacity(event.accessibles.length);", "-\t\t\tObject[] rows = event.accessibles;", "-\t\t\tfor (int i = 0; i < rows.length; i++) {", "-\t\t\t\tAccessible acc = (Accessible) rows[i];", "-\t\t\t\tacc.index = i;", "-\t\t\t\tarray.addObject(acc.delegate);", "-\t\t\t}", "-\t\t\treturnValue = array;", "+", "+\tid getRowsAttribute(int childID) {", "+\t\tif (accessibleTableListeners.size() == 0) return null;", "+\t\t", "+\t\tAccessibleTableEvent event = new AccessibleTableEvent(this);", "+\t\tfor (int i = 0; i < accessibleTableListeners.size(); i++) {", "+\t\t\tAccessibleTableListener listener = (AccessibleTableListener)accessibleTableListeners.elementAt(i);", "+\t\t\tlistener.getRowCount(event);", "+\t\t\tlistener.getRows(event);", "+\t\t}", "+\t\t", "+\t\tif (event.accessibles == null) event.accessibles = new Accessible[0];", "+\t\t", "+\t\tif (event.count != event.accessibles.length) {", "+\t\t\tcreateTableDelegate();", "+", "+\t\t\t// Rerun the row query now that our accessible is in place.", "+\t\t\tfor (int i = 0; i < accessibleTableListeners.size(); i++) {", "+\t\t\t\tAccessibleTableListener listener = (AccessibleTableListener)accessibleTableListeners.elementAt(i);", "+\t\t\t\tlistener.getRowCount(event);", "+\t\t\t\tlistener.getRows(event);", "+\t\t\t}", "+\t\t}", "+", "+\t\tNSMutableArray array = NSMutableArray.arrayWithCapacity(event.accessibles.length);", "+\t\tObject[] rows = event.accessibles;", "+\t\tfor (int i = 0; i < rows.length; i++) {", "+\t\t\tAccessible acc = (Accessible) rows[i];", "+\t\t\tacc.index = i;", "+\t\t\tarray.addObject(acc.delegate);", "+\t\t}", "+\t\treturn array;", "+\t}"]}], "num": 3299}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "646f66ce400fd71f137e1ff78c529b54", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "146747c25d87cba88b450fdaea044482", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 31, "signatureBeforeChange": " public Rectangle getImageBounds(int index)", "signatureAfterChange": " public Rectangle getImageBounds (int columnIndex)", "diff": ["- */", "-public Rectangle getImageBounds(int index) {", "-\tcheckWidget();", "-\tTable parent = getParent();", "-\tif (!parent.checkData (this, true)) error (SWT.ERROR_WIDGET_DISPOSED);", "-\tint itemIndex = parent.indexOf (this);", "-\tint imageWidth = 0;", "-\tPoint imageExtent = parent.getImageExtent();", "-\tRectangle imageBounds = getBounds(index);", "-\t", "-\tif (itemIndex == -1) {", "-\t\timageBounds = new Rectangle(0, 0, 0, 0);", "-\t}", "-\telse", "-\tif (imageExtent != null) {", "-\t\tif (index == TableColumn.FIRST || getImage(index) != null) {", "-\t\t\timageWidth = imageExtent.x;", "-\t\t}", "-\t}", "-\timageBounds.width = imageWidth;", "-\treturn imageBounds;", "-}", "+}", "+public Rectangle getImageBounds (int columnIndex) {", "+\tcheckWidget ();", "+\tif (!parent.checkData (this, true)) error (SWT.ERROR_WIDGET_DISPOSED);", "+\tint validColumnCount = Math.max (1, parent.columns.length);", "+\tif (!(0 <= columnIndex && columnIndex < validColumnCount)) return new Rectangle (0,0,0,0);", "+", "+\tint padding = parent.getCellPadding ();", "+\tint startX = getContentX (columnIndex);", "+\tint itemHeight = parent.itemHeight;", "+\tint imageSpaceY = itemHeight - 2 * padding;", "+\tint y = parent.getItemY (this);", "+\tImage image = getImage (columnIndex); ", "+\tif (image == null) {", "+\t\treturn new Rectangle (startX, y + padding, 0, imageSpaceY);", "+\t}", "+\t", "+\tRectangle imageBounds = image.getBounds ();", "+\t/* ", "+\t * For column 0 all images have the same width, which may be larger or smaller", "+\t * than the image to be drawn here.  Therefore the image bounds to draw must be", "+\t * specified.", "+\t */", "+\tint drawWidth;", "+\tif (columnIndex == 0) {", "+\t\tint imageSpaceX = parent.col0ImageWidth;", "+\t\tdrawWidth = Math.min (imageSpaceX, imageBounds.width);", "+\t} else {", "+\t\tdrawWidth = imageBounds.width;", "+\t}", "+\tint drawHeight = Math.min (imageSpaceY, imageBounds.height);", "+\treturn new Rectangle (", "+\t\tstartX, y + (itemHeight - drawHeight) / 2,", "+\t\tdrawWidth, drawHeight);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9401cc7b8ffc8fa2f6ea1d06fed30b0a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "1a6a47fd4cb07a565544aa8caf7003382a6b00f3", "commitAfterChange": "375107332fc5402c59bbea222825730a86b9abf8", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tint count = singleLine ? 1 : content.getLineCount();", "-\tint width = wHint;", "-\t//TODO rewrite computeSize", "-\tif (wHint == SWT.DEFAULT) {", "-//\t\tLineCache computeLineCache = lineCache;", "-//\t\tif (wordWrap) {", "-//\t\t\t// set non-wrapping content width calculator. Ensures ideal line width ", "-//\t\t\t// that does not required wrapping. Fixes bug 31195.", "-//\t\t\tcomputeLineCache = new ContentWidthCache(this, logicalContent);", "-//\t\t\tif (!singleLine) {", "-//\t\t\t\tcount = logicalContent.getLineCount();", "-//\t\t\t}", "-//\t\t}", "-//\t\t// Only calculate what can actually be displayed.", "-//\t\t// Do this because measuring each text line is a ", "-//\t\t// time-consuming process.", "-//\t\tint visibleCount = Math.min (count, getDisplay().getBounds().height / lineHeight);", "-//\t\tcomputeLineCache.calculate(0, visibleCount);", "-//\t\twidth = computeLineCache.getWidth() + leftMargin + rightMargin;", "-//\t} else if (wordWrap && !singleLine) {", "-//\t\t// calculate to wrap to width hint. Fixes bug 20377. ", "-//\t\t// don't wrap live content. Fixes bug 38344.", "-//\t\tWrappedContent2 wrappedContent = new WrappedContent2(renderer, logicalContent);", "-//\t\twrappedContent.wrapLines(width);", "-//\t\tcount = wrappedContent.getLineCount();", "-\t}", "-\tint height;", "-\tif (hHint != SWT.DEFAULT) {", "-\t\theight = hHint;", "-\t} else {", "-\t\theight = count * lineHeight + topMargin + bottomMargin;", "+\tint lineCount = singleLine ? 1 : content.getLineCount();", "+\tint width = 0;", "+\tint height = 0;", "+\tif (wHint == SWT.DEFAULT || hHint == SWT.DEFAULT) {", "+\t\tDisplay display = getDisplay();", "+\t\tint maxHeight = display.getClientArea().height;", "+\t\tint lineIndex = 0;", "+\t\twhile (lineIndex < lineCount && height < maxHeight) {", "+\t\t\tint lineOffset = content.getOffsetAtLine(lineIndex);", "+\t\t\tString line = content.getLine(lineIndex);", "+\t\t\tTextLayout layout = renderer.getTextLayout(line, lineOffset);", "+\t\t\tif (wordWrap) {", "+\t\t\t\tlayout.setWidth(wHint);", "+\t\t\t}", "+\t\t\tRectangle rect = layout.getBounds();", "+\t\t\theight += rect.height;", "+\t\t\twidth = Math.max(width, rect.width);", "+\t\t\trenderer.disposeTextLayout(layout);", "+\t\t\tlineIndex++;", "+\t\t}", "-\tif (width == 0)\twidth = DEFAULT_WIDTH;", "-\tif (height == 0) height = singleLine ? lineHeight : DEFAULT_HEIGHT;", "-\tRectangle rect = computeTrim(0, 0, width, height);", "+\tif (width == 0) width = DEFAULT_WIDTH;", "+\tif (height == 0) height = DEFAULT_HEIGHT;", "+\tif (wHint != SWT.DEFAULT) width = wHint;", "+\tif (hHint != SWT.DEFAULT) height = hHint;", "+\tint wTrim = leftMargin + rightMargin + getCaretWidth();", "+\tint hTrim = topMargin + bottomMargin;", "+\tRectangle rect = computeTrim(0, 0, width + wTrim, height + hTrim);"]}], "num": 52031}
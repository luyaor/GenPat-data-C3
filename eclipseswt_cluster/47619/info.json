{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df279a90dd0fa6d15c7ae0c756f1e7be", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d71947942b0358e57b054487602c1d04", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "5a902dea6af2bf530917df6db13cb86bc207413e", "commitAfterChange": "cb9349c8fe54c4e535a82ed4f4dd8d55bc306228", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r int createDIBFromDDB(int hDC, int hBitmap, int width, int height)", "signatureAfterChange": "\r int createDIBFromDDB(int hDC, int hBitmap, int width, int height)", "diff": ["-\tbyte[] bmi;\r", "-\tif (isDirect) bmi = new byte[40 + (useBitfields ? 12 : 0)];\r", "-\telse  bmi = new byte[40 + rgbs.length * 4];\r", "-\t/* DWORD biSize = 40 */\r", "-\tbmi[0] = 40; bmi[1] = 0; bmi[2] = 0; bmi[3] = 0;\r", "-\t/* LONG biWidth = width */\r", "-\tbmi[4] = (byte)(width & 0xFF);\r", "-\tbmi[5] = (byte)((width >> 8) & 0xFF);\r", "-\tbmi[6] = (byte)((width >> 16) & 0xFF);\r", "-\tbmi[7] = (byte)((width >> 24) & 0xFF);\r", "-\t/* LONG biHeight = height */\r", "-\tint height2 = -height;\r", "-\tbmi[8] = (byte)(height2 & 0xFF);\r", "-\tbmi[9] = (byte)((height2 >> 8) & 0xFF);\r", "-\tbmi[10] = (byte)((height2 >> 16) & 0xFF);\r", "-\tbmi[11] = (byte)((height2 >> 24) & 0xFF);\r", "-\t/* WORD biPlanes = 1 */\r", "-\tbmi[12] = 1;\r", "-\tbmi[13] = 0;\r", "-\t/* WORD biBitCount = depth */\r", "-\tbmi[14] = (byte)(depth & 0xFF);\r", "-\tbmi[15] = (byte)((depth >> 8) & 0xFF);\r", "-\tif (useBitfields) {\r", "-\t\t/* DWORD biCompression = BI_BITFIELDS = 3 */\r", "-\t\tbmi[16] = 3; bmi[17] = bmi[18] = bmi[19] = 0;\r", "-\t} else {\r", "-\t\t/* DWORD biCompression = BI_RGB = 0 */\r", "-\t\tbmi[16] = bmi[17] = bmi[18] = bmi[19] = 0;\r", "-\t}\r", "-\t/* DWORD biSizeImage = 0 (default) */\r", "-\tbmi[20] = bmi[21] = bmi[22] = bmi[23] = 0;\r", "-\t/* LONG biXPelsPerMeter = 0 */\r", "-\tbmi[24] = bmi[25] = bmi[26] = bmi[27] = 0;\r", "-\t/* LONG biYPelsPerMeter = 0 */\r", "-\tbmi[28] = bmi[29] = bmi[30] = bmi[31] = 0;\r", "-\t/* DWORD biClrUsed */\r", "-\tbmi[32] = bmi[33] = bmi[34] = bmi[35] = 0;\r", "-\t/* DWORD biClrImportant = 0 */\r", "-\tbmi[36] = bmi[37] = bmi[38] = bmi[39] = 0;\r", "+\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER();\r", "+\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;\r", "+\tbmiHeader.biWidth = width;\r", "+\tbmiHeader.biHeight = -height;\r", "+\tbmiHeader.biPlanes = 1;\r", "+\tbmiHeader.biBitCount = (short)depth;\r", "+\tif (useBitfields) bmiHeader.biCompression = OS.BI_BITFIELDS;\r", "+\telse bmiHeader.biCompression = OS.BI_RGB;\r", "+\tbyte[] bmi;\r", "+\tif (isDirect) bmi = new byte[BITMAPINFOHEADER.sizeof + (useBitfields ? 12 : 0)];\r", "+\telse  bmi = new byte[BITMAPINFOHEADER.sizeof + rgbs.length * 4];\r", "+\tOS.MoveMemory(bmi, bmiHeader, BITMAPINFOHEADER.sizeof);\r", "+\r", "-\tint offset = 40;\r", "+\tint offset = BITMAPINFOHEADER.sizeof;\r", "-\t\t\t\t\tbmi[40] = (byte)((redMask & 0xFF) >> 0);\r", "-\t\t\t\t\tbmi[41] = (byte)((redMask & 0xFF00) >> 8);\r", "-\t\t\t\t\tbmi[42] = (byte)((redMask & 0xFF0000) >> 16);\r", "-\t\t\t\t\tbmi[43] = (byte)((redMask & 0xFF000000) >> 24);\r", "-\t\t\t\t\tbmi[44] = (byte)((greenMask & 0xFF) >> 0);\r", "-\t\t\t\t\tbmi[45] = (byte)((greenMask & 0xFF00) >> 8);\r", "-\t\t\t\t\tbmi[46] = (byte)((greenMask & 0xFF0000) >> 16);\r", "-\t\t\t\t\tbmi[47] = (byte)((greenMask & 0xFF000000) >> 24);\r", "-\t\t\t\t\tbmi[48] = (byte)((blueMask & 0xFF) >> 0);\r", "-\t\t\t\t\tbmi[49] = (byte)((blueMask & 0xFF00) >> 8);\r", "-\t\t\t\t\tbmi[50] = (byte)((blueMask & 0xFF0000) >> 16);\r", "-\t\t\t\t\tbmi[51] = (byte)((blueMask & 0xFF000000) >> 24);\r", "+\t\t\t\t\tbmi[offset] = (byte)((redMask & 0xFF) >> 0);\r", "+\t\t\t\t\tbmi[offset + 1] = (byte)((redMask & 0xFF00) >> 8);\r", "+\t\t\t\t\tbmi[offset + 2] = (byte)((redMask & 0xFF0000) >> 16);\r", "+\t\t\t\t\tbmi[offset + 3] = (byte)((redMask & 0xFF000000) >> 24);\r", "+\t\t\t\t\tbmi[offset + 4] = (byte)((greenMask & 0xFF) >> 0);\r", "+\t\t\t\t\tbmi[offset + 5] = (byte)((greenMask & 0xFF00) >> 8);\r", "+\t\t\t\t\tbmi[offset + 6] = (byte)((greenMask & 0xFF0000) >> 16);\r", "+\t\t\t\t\tbmi[offset + 7] = (byte)((greenMask & 0xFF000000) >> 24);\r", "+\t\t\t\t\tbmi[offset + 8] = (byte)((blueMask & 0xFF) >> 0);\r", "+\t\t\t\t\tbmi[offset + 9] = (byte)((blueMask & 0xFF00) >> 8);\r", "+\t\t\t\t\tbmi[offset + 10] = (byte)((blueMask & 0xFF0000) >> 16);\r", "+\t\t\t\t\tbmi[offset + 11] = (byte)((blueMask & 0xFF000000) >> 24);\r", "-\t\t\t\t\tbmi[40] = (byte)((redMask & 0xFF000000) >> 24);\r", "-\t\t\t\t\tbmi[41] = (byte)((redMask & 0xFF0000) >> 16);\r", "-\t\t\t\t\tbmi[42] = (byte)((redMask & 0xFF00) >> 8);\r", "-\t\t\t\t\tbmi[43] = (byte)((redMask & 0xFF) >> 0);\r", "-\t\t\t\t\tbmi[44] = (byte)((greenMask & 0xFF000000) >> 24);\r", "-\t\t\t\t\tbmi[45] = (byte)((greenMask & 0xFF0000) >> 16);\r", "-\t\t\t\t\tbmi[46] = (byte)((greenMask & 0xFF00) >> 8);\r", "-\t\t\t\t\tbmi[47] = (byte)((greenMask & 0xFF) >> 0);\r", "-\t\t\t\t\tbmi[48] = (byte)((blueMask & 0xFF000000) >> 24);\r", "-\t\t\t\t\tbmi[49] = (byte)((blueMask & 0xFF0000) >> 16);\r", "-\t\t\t\t\tbmi[50] = (byte)((blueMask & 0xFF00) >> 8);\r", "-\t\t\t\t\tbmi[51] = (byte)((blueMask & 0xFF) >> 0);\r", "+\t\t\t\t\tbmi[offset] = (byte)((redMask & 0xFF000000) >> 24);\r", "+\t\t\t\t\tbmi[offset + 1] = (byte)((redMask & 0xFF0000) >> 16);\r", "+\t\t\t\t\tbmi[offset + 2] = (byte)((redMask & 0xFF00) >> 8);\r", "+\t\t\t\t\tbmi[offset + 3] = (byte)((redMask & 0xFF) >> 0);\r", "+\t\t\t\t\tbmi[offset + 4] = (byte)((greenMask & 0xFF000000) >> 24);\r", "+\t\t\t\t\tbmi[offset + 5] = (byte)((greenMask & 0xFF0000) >> 16);\r", "+\t\t\t\t\tbmi[offset + 6] = (byte)((greenMask & 0xFF00) >> 8);\r", "+\t\t\t\t\tbmi[offset + 7] = (byte)((greenMask & 0xFF) >> 0);\r", "+\t\t\t\t\tbmi[offset + 8] = (byte)((blueMask & 0xFF000000) >> 24);\r", "+\t\t\t\t\tbmi[offset + 9] = (byte)((blueMask & 0xFF0000) >> 16);\r", "+\t\t\t\t\tbmi[offset + 10] = (byte)((blueMask & 0xFF00) >> 8);\r", "+\t\t\t\t\tbmi[offset + 11] = (byte)((blueMask & 0xFF) >> 0);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23f01e607f56ca9df0174553feabe1b9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "5a902dea6af2bf530917df6db13cb86bc207413e", "commitAfterChange": "cb9349c8fe54c4e535a82ed4f4dd8d55bc306228", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "\r \r static int[] init(Device device, Image image, ImageData i)", "signatureAfterChange": "\r \r static int[] init(Device device, Image image, ImageData i)", "diff": ["-\tbyte[] bmi;\r", "+\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER();\r", "+\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;\r", "+\tbmiHeader.biWidth = i.width;\r", "+\tbmiHeader.biHeight = -i.height;\r", "+\tbmiHeader.biPlanes = 1;\r", "+\tbmiHeader.biBitCount = (short)i.depth;\r", "+\tif (useBitfields) bmiHeader.biCompression = OS.BI_BITFIELDS;\r", "+\telse bmiHeader.biCompression = OS.BI_RGB;\r", "+\tbmiHeader.biClrUsed = rgbs == null ? 0 : rgbs.length;\r", "+\tbyte[] bmi;\r", "-\t\tbmi = new byte[40 + (useBitfields ? 12 : 0)];\r", "+\t\tbmi = new byte[BITMAPINFOHEADER.sizeof + (useBitfields ? 12 : 0)];\r", "-\t\tbmi = new byte[40 + rgbs.length * 4];\r", "-\t/* DWORD biSize = 40 */\r", "-\tbmi[0] = 40; bmi[1] = 0; bmi[2] = 0; bmi[3] = 0;\r", "-\t/* LONG biWidth = width */\r", "-\tbmi[4] = (byte)(i.width & 0xFF);\r", "-\tbmi[5] = (byte)((i.width >> 8) & 0xFF);\r", "-\tbmi[6] = (byte)((i.width >> 16) & 0xFF);\r", "-\tbmi[7] = (byte)((i.width >> 24) & 0xFF);\r", "-\t/* LONG biHeight = height */\r", "-\tint height = -i.height;\r", "-\tbmi[8] = (byte)(height & 0xFF);\r", "-\tbmi[9] = (byte)((height >> 8) & 0xFF);\r", "-\tbmi[10] = (byte)((height >> 16) & 0xFF);\r", "-\tbmi[11] = (byte)((height >> 24) & 0xFF);\r", "-\t/* WORD biPlanes = 1 */\r", "-\tbmi[12] = 1;\r", "-\tbmi[13] = 0;\r", "-\t/* WORD biBitCount = depth */\r", "-\tbmi[14] = (byte)(i.depth & 0xFF);\r", "-\tbmi[15] = (byte)((i.depth >> 8) & 0xFF);\r", "-\tif (useBitfields) {\r", "-\t\t/* DWORD biCompression = BI_BITFIELDS = 3 */\r", "-\t\tbmi[16] = 3; bmi[17] = bmi[18] = bmi[19] = 0;\r", "-\t} else {\r", "-\t\t/* DWORD biCompression = BI_RGB = 0 */\r", "-\t\tbmi[16] = bmi[17] = bmi[18] = bmi[19] = 0;\r", "-\t}\r", "-\t/* DWORD biSizeImage = 0 (default) */\r", "-\tbmi[20] = bmi[21] = bmi[22] = bmi[23] = 0;\r", "-\t/* LONG biXPelsPerMeter = 0 */\r", "-\tbmi[24] = bmi[25] = bmi[26] = bmi[27] = 0;\r", "-\t/* LONG biYPelsPerMeter = 0 */\r", "-\tbmi[28] = bmi[29] = bmi[30] = bmi[31] = 0;\r", "-\t/* DWORD biClrUsed */\r", "-\tif (rgbs == null) {\r", "-\t\tbmi[32] = bmi[33] = bmi[34] = bmi[35] = 0;\r", "-\t} else {\r", "-\t\tbmi[32] = (byte)(rgbs.length & 0xFF);\r", "-\t\tbmi[33] = (byte)((rgbs.length >> 8) & 0xFF);\r", "-\t\tbmi[34] = (byte)((rgbs.length >> 16) & 0xFF);\r", "-\t\tbmi[35] = (byte)((rgbs.length >> 24) & 0xFF);\r", "-\t}\r", "-\t/* DWORD biClrImportant = 0 */\r", "-\tbmi[36] = bmi[37] = bmi[38] = bmi[39] = 0;\r", "+\t\tbmi = new byte[BITMAPINFOHEADER.sizeof + rgbs.length * 4];\r", "+\tOS.MoveMemory(bmi, bmiHeader, BITMAPINFOHEADER.sizeof);\r", "-\tint offset = 40;\r", "+\tint offset = BITMAPINFOHEADER.sizeof;\r", "-\t\t\t\tbmi[40] = (byte)((redMask & 0xFF) >> 0);\r", "-\t\t\t\tbmi[41] = (byte)((redMask & 0xFF00) >> 8);\r", "-\t\t\t\tbmi[42] = (byte)((redMask & 0xFF0000) >> 16);\r", "-\t\t\t\tbmi[43] = (byte)((redMask & 0xFF000000) >> 24);\r", "-\t\t\t\tbmi[44] = (byte)((greenMask & 0xFF) >> 0);\r", "-\t\t\t\tbmi[45] = (byte)((greenMask & 0xFF00) >> 8);\r", "-\t\t\t\tbmi[46] = (byte)((greenMask & 0xFF0000) >> 16);\r", "-\t\t\t\tbmi[47] = (byte)((greenMask & 0xFF000000) >> 24);\r", "-\t\t\t\tbmi[48] = (byte)((blueMask & 0xFF) >> 0);\r", "-\t\t\t\tbmi[49] = (byte)((blueMask & 0xFF00) >> 8);\r", "-\t\t\t\tbmi[50] = (byte)((blueMask & 0xFF0000) >> 16);\r", "-\t\t\t\tbmi[51] = (byte)((blueMask & 0xFF000000) >> 24);\r", "+\t\t\t\tbmi[offset] = (byte)((redMask & 0xFF) >> 0);\r", "+\t\t\t\tbmi[offset + 1] = (byte)((redMask & 0xFF00) >> 8);\r", "+\t\t\t\tbmi[offset + 2] = (byte)((redMask & 0xFF0000) >> 16);\r", "+\t\t\t\tbmi[offset + 3] = (byte)((redMask & 0xFF000000) >> 24);\r", "+\t\t\t\tbmi[offset + 4] = (byte)((greenMask & 0xFF) >> 0);\r", "+\t\t\t\tbmi[offset + 5] = (byte)((greenMask & 0xFF00) >> 8);\r", "+\t\t\t\tbmi[offset + 6] = (byte)((greenMask & 0xFF0000) >> 16);\r", "+\t\t\t\tbmi[offset + 7] = (byte)((greenMask & 0xFF000000) >> 24);\r", "+\t\t\t\tbmi[offset + 8] = (byte)((blueMask & 0xFF) >> 0);\r", "+\t\t\t\tbmi[offset + 9] = (byte)((blueMask & 0xFF00) >> 8);\r", "+\t\t\t\tbmi[offset + 10] = (byte)((blueMask & 0xFF0000) >> 16);\r", "+\t\t\t\tbmi[offset + 11] = (byte)((blueMask & 0xFF000000) >> 24);\r", "-\t\t\t\tbmi[40] = (byte)((redMask & 0xFF000000) >> 24);\r", "-\t\t\t\tbmi[41] = (byte)((redMask & 0xFF0000) >> 16);\r", "-\t\t\t\tbmi[42] = (byte)((redMask & 0xFF00) >> 8);\r", "-\t\t\t\tbmi[43] = (byte)((redMask & 0xFF) >> 0);\r", "-\t\t\t\tbmi[44] = (byte)((greenMask & 0xFF000000) >> 24);\r", "-\t\t\t\tbmi[45] = (byte)((greenMask & 0xFF0000) >> 16);\r", "-\t\t\t\tbmi[46] = (byte)((greenMask & 0xFF00) >> 8);\r", "-\t\t\t\tbmi[47] = (byte)((greenMask & 0xFF) >> 0);\r", "-\t\t\t\tbmi[48] = (byte)((blueMask & 0xFF000000) >> 24);\r", "-\t\t\t\tbmi[49] = (byte)((blueMask & 0xFF0000) >> 16);\r", "-\t\t\t\tbmi[50] = (byte)((blueMask & 0xFF00) >> 8);\r", "-\t\t\t\tbmi[51] = (byte)((blueMask & 0xFF) >> 0);\r", "+\t\t\t\tbmi[offset] = (byte)((redMask & 0xFF000000) >> 24);\r", "+\t\t\t\tbmi[offset + 1] = (byte)((redMask & 0xFF0000) >> 16);\r", "+\t\t\t\tbmi[offset + 2] = (byte)((redMask & 0xFF00) >> 8);\r", "+\t\t\t\tbmi[offset + 3] = (byte)((redMask & 0xFF) >> 0);\r", "+\t\t\t\tbmi[offset + 4] = (byte)((greenMask & 0xFF000000) >> 24);\r", "+\t\t\t\tbmi[offset + 5] = (byte)((greenMask & 0xFF0000) >> 16);\r", "+\t\t\t\tbmi[offset + 6] = (byte)((greenMask & 0xFF00) >> 8);\r", "+\t\t\t\tbmi[offset + 7] = (byte)((greenMask & 0xFF) >> 0);\r", "+\t\t\t\tbmi[offset + 8] = (byte)((blueMask & 0xFF000000) >> 24);\r", "+\t\t\t\tbmi[offset + 9] = (byte)((blueMask & 0xFF0000) >> 16);\r", "+\t\t\t\tbmi[offset + 10] = (byte)((blueMask & 0xFF00) >> 8);\r", "+\t\t\t\tbmi[offset + 11] = (byte)((blueMask & 0xFF) >> 0);\r"]}], "num": 47619}
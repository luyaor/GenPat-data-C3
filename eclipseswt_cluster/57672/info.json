{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "935f9e15e2c42aa6d02f23ee47350163", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e89de1536a462ef20369146004fffc1b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "0965c047c4647355d2d59defeda7977f1c34f584", "commitAfterChange": "cc500238418d38b85dc837cf8469541ca5f69f28", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public void javaToNative(Object object, TransferData transferData)", "signatureAfterChange": "\r public void javaToNative(Object object, TransferData transferData)", "diff": ["-\t\t\r", "-\t// build a byte array from data\r", "-\tString[] fileNames = (String[]) object;\r", "-\tint fileNameSize = 0;\r", "-\tbyte[][] files = new byte[fileNames.length][];\r", "-\tfor (int i = 0; i < fileNames.length; i++) {\r", "-\t\tfiles[i] = (fileNames[i]+'\\0').getBytes(); // each name is null terminated\r", "-\t\tfileNameSize += files[i].length;\r", "-\t}\r", "-\tbyte[] buffer = new byte[DROPFILES.sizeof + fileNameSize + 1]; // there is an extra null terminator at the very end\r", "-\tDROPFILES dropfiles = new DROPFILES();\r", "-\tdropfiles.pFiles = DROPFILES.sizeof;\r", "-\tdropfiles.pt_x = dropfiles.pt_y = 0;\r", "-\tdropfiles.fNC = 0;\r", "-\tdropfiles.fWide = 0;\t\r", "-\tCOM.MoveMemory(buffer, dropfiles, DROPFILES.sizeof);\r", "-\tint offset = DROPFILES.sizeof;\r", "-\tfor (int i = 0; i < fileNames.length; i++) {\r", "-\t\tSystem.arraycopy(files[i], 0, buffer, offset, files[i].length);\r", "-\t\toffset += files[i].length;\r", "-\t}\r", "+\tif (isSupportedType(transferData)) {\r", "-\t// pass byte array on to super to convert to native\r", "-\tsuper.javaToNative(buffer, transferData);\r", "+\t\tString[] fileNames = (String[]) object;\r", "+\t\tStringBuffer allFiles = new StringBuffer();\r", "+\t\tfor (int i = 0; i < fileNames.length; i++) {\r", "+\t\t\tallFiles.append(fileNames[i]); \r", "+\t\t\tallFiles.append('\\0'); // each name is null terminated\r", "+\t\t}\r", "+\t\tTCHAR buffer = new TCHAR(0, allFiles.toString(), true); // there is an extra null terminator at the very end\r", "+\t\t\r", "+\t\tDROPFILES dropfiles = new DROPFILES();\r", "+\t\tdropfiles.pFiles = DROPFILES.sizeof;\r", "+\t\tdropfiles.pt_x = dropfiles.pt_y = 0;\r", "+\t\tdropfiles.fNC = 0;\r", "+\t\tdropfiles.fWide = COM.IsUnicode ? 1 : 0;\r", "+\t\t\r", "+\t\t// Allocate the memory because the caller (DropTarget) has not handed it in\r", "+\t\t// The caller of this method must release the data when it is done with it.\r", "+\t\tint byteCount = buffer.length() * TCHAR.sizeof;\r", "+\t\tint newPtr = COM.GlobalAlloc(COM.GMEM_FIXED | COM.GMEM_ZEROINIT, DROPFILES.sizeof + byteCount);\r", "+\t\tCOM.MoveMemory(newPtr, dropfiles, DROPFILES.sizeof);\r", "+\t\tCOM.MoveMemory(newPtr + DROPFILES.sizeof, buffer, byteCount);\r", "+\t\t\r", "+\t\ttransferData.stgmedium = new STGMEDIUM();\r", "+\t\ttransferData.stgmedium.tymed = COM.TYMED_HGLOBAL;\r", "+\t\ttransferData.stgmedium.unionField = newPtr;\r", "+\t\ttransferData.stgmedium.pUnkForRelease = 0;\r", "+\t\ttransferData.result = COM.S_OK;\r", "+\t\treturn;\r", "+\t}\r", "+\t\r", "+\t// did not match the TYMED\r", "+\ttransferData.stgmedium = new STGMEDIUM();\r", "+\ttransferData.result = COM.DV_E_TYMED;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2ddb0a8489b8ab4a49f048f33c5dde4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "613386a136aed7f7be85acd46a7cab744bbae94d", "commitAfterChange": "e144c0287be1ac0d08cd8310d65398d20b566a1f", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r void initSizeCombo(FontExtStyles fontExtStyles)", "signatureAfterChange": "\r void initSizeCombo ()", "diff": ["- */\r", "-void initSizeCombo(FontExtStyles fontExtStyles) {\r", "-\tCombo sizeCombo = getSizeCombo();\r", "-\tString previousSize = sizeCombo.getText();\r", "-\tsizeCombo.removeAll();\r", "-\r", "-\tint selectionIndex = -1;\r", "-\r", "-\tif (fontExtStyles.isScalable()) {\r", "-\t\tsizeCombo.setItems(SCALABLE_SIZES);\r", "-\t\tselectionIndex = sizeCombo.indexOf(String.valueOf(DEFAULT_SIZE));\r", "-\t}\r", "-\telse {\r", "-\t\tVector sizes = fontExtStyles.getSizes(getExtStyleCombo().getText());\r", "-\t\tfor (int i = 0; i < sizes.size(); i++) {\r", "-\t\t\tInteger size = (Integer) sizes.elementAt(i);\r", "-\t\t\tsizeCombo.add(size.toString());\r", "-\t\t\t// select the largest height if there's no font\r", "-\t\t\t// size that is at least as high as SelectionSize\r", "-\t\t\tif (size.intValue() >= DEFAULT_SIZE && selectionIndex == -1)\r", "-\t\t\t\tselectionIndex = i;\r", "-\t\t}\r", "-\t}\r", "-\r", "-\tint indexOfPreviousSelection = sizeCombo.indexOf(previousSize);\r", "-\tif (indexOfPreviousSelection != -1)\r", "-\t\tselectionIndex = indexOfPreviousSelection;\r", "-\r", "-\tif (selectionIndex == -1)\t// last resort case, should not happen\r", "-\t\tselectionIndex = sizeCombo.getItemCount() - 1;\t\t\t\r", "-\r", "-\tsizeCombo.select(selectionIndex);\t\r", "-}\r", "+ */\r", "+void initSizeCombo () {\r", "+\tString oldSelect = fontSizeCombo.getText ();\r", "+\tfontSizeCombo.removeAll ();\r", "+\t\r", "+\tString characterSet = charSetCombo.getText ();\r", "+\tString faceName = faceNameCombo.getText ();\r", "+\tString extStyle = extStyleCombo.getText ();\r", "+\tHashtable sizes = getSizes (characterSet, faceName, extStyle);\r", "+\tif (sizes == null) return;\r", "+\tif (sizes.get (SCALABLE_KEY) == null) {\r", "+\t\t/*\r", "+\t\t * Font is not scalable so just present the provided sizes.\r", "+\t\t */\r", "+\t\tsetSizeItemsSorted (sizes.keys ());\r", "+\t} else {\r", "+\t\t/*\r", "+\t\t * Font is scalable so present the provided sizes and scalable\r", "+\t\t * sizes for selection.\r", "+\t\t */\r", "+\t\tVector allSizes = new Vector ();\r", "+\t\t/*\r", "+\t\t * Add the scalable sizes.\r", "+\t\t */\r", "+\t\tfor (int i = 0; i < SCALABLE_SIZES.length; i++) {\r", "+\t\t\tallSizes.addElement (new Integer (SCALABLE_SIZES [i]));\r", "+\t\t}\r", "+\t\t/*\r", "+\t\t * Add the provided sizes.\r", "+\t\t */\r", "+\t\tEnumeration providedSizes = sizes.keys ();\r", "+\t\twhile (providedSizes.hasMoreElements ()) {\r", "+\t\t\tInteger size = (Integer) providedSizes.nextElement ();\r", "+\t\t\tif (!size.equals (SCALABLE_KEY) && !allSizes.contains (size)) {\r", "+\t\t\t\tallSizes.addElement (size);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tsetSizeItemsSorted (allSizes.elements ());\r", "+\t}\r", "+\t\r", "+\tint selectIndex = fontSizeCombo.indexOf (oldSelect);\r", "+\tif (selectIndex == -1) {\r", "+\t\tselectIndex = fontSizeCombo.indexOf (String.valueOf (DEFAULT_SIZE));\r", "+\t}\r", "+\tselectIndex = Math.max (0, selectIndex);\r", "+\tfontSizeCombo.select (selectIndex);\r", "+\tfontSizeCombo.setData (new Integer (selectIndex));\r", "+\tinitStyleCombo ();\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "986338efb94ff89f05fd39928854c51a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "dbb652fe193019d96be9d6af80af3f6e1918e181", "commitAfterChange": "a9865ce41544b9634fe7b5cf08a114ae91a2faeb", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 13, "signatureBeforeChange": "  static boolean isWindowManagerCompliant()", "signatureAfterChange": "  static Program kde_getProgram(Display display, String mimeType)", "diff": ["+", "+static Program kde_getProgram(Display display, String mimeType) {", "+\tProgram program = null;", "+\t/* Use the character encoding for the default locale */", "+\tbyte[] buffer = Converter.wcsToMbcs(null, mimeType, true);", "+\tint /*long*/ mimeTypeName = KDE.QString_new(buffer);", "+\tint /*long*/ serviceList = KDE.KMimeType_offers(mimeTypeName);", "+\tif (serviceList != 0) {", "+\t\tKDE.KServiceList_delete(serviceList);", "+\t\tprogram = new Program();", "+\t\tprogram.display = display;", "+\t\tprogram.name = mimeType;", "+\t\tprogram.command = \"KRun::runURL(url,mimeType)\";", "+\t\t//TODO - LEAK??", "+\t\tint /*long*/ kMimeType = KDE.KMimeType_mimeType(mimeTypeName);", "+\t\tif (kMimeType != 0) {", "+\t\t\t//TODO - LEAK??", "+\t\t\tint /*long*/ mimeIcon = KDE.KMimeType_icon(kMimeType, 0, false);", "+\t\t\tint /*long*/ loader = KDE.KGlobal_iconLoader();", "+\t\t\tint /*long*/ path = KDE.KIconLoader_iconPath(loader, mimeIcon, KDE.KICON_SMALL, true);", "+\t\t\tprogram.iconPath = kde_convertQStringAndFree(path);", "+\t\t}", "+\t\t", "+\t}", "+\tKDE.QString_delete(mimeTypeName);", "+\treturn program;", "-", "-static boolean isWindowManagerCompliant() {", "-\tbyte[] name = Converter.wcsToMbcs(null, \"_NET_SUPPORTING_WM_CHECK\", true);", "-\t/*", "-\t* Bug in GDK. The flag only_if_exists is ignored and gdk_atom_intern", "-\t* never returns GDK_NONE. The workaround is to not rely on this function", "-\t* to detect an atom.", "-\t*/", "-\tint /*long*/ atom = OS.gdk_atom_intern(name, true);", "-\tif (atom == OS.GDK_NONE) return false;\t", "-\tint /*long*/[] actualType = new int /*long*/[1];", "-\tint[] actualFormat = new int[1];", "-\tint[] actualLength = new int[1];", "-\tint /*long*/[] data = new int /*long*/[1];", "-\tif (!OS.gdk_property_get(OS.GDK_ROOT_PARENT(), atom, OS.XA_WINDOW,", "-\t\t0, 1, 0, actualType, actualFormat, actualLength, data)) return false;", "-\tif (data[0] != 0) OS.g_free(data[0]);", "-\treturn actualLength[0] > 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "597a2904e8b0bc2f7ef132d0fb56dd8e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CBanner.java", "commitBeforeChange": "4f6cacc9f76349f45c7a4f16b88a3566ae23ff3b", "commitAfterChange": "8e878fd2cf08a4ff98d0bd94fbda608760fdcee1", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void layout (boolean changed)", "signatureAfterChange": " public void layout (boolean changed)", "diff": ["-\tPoint rightSize;", "-\tboolean drawCurve = left != null && right != null;", "-\tint curveWidth = drawCurve ? CURVE_WIDTH : 0;", "-\tint indentLeft = drawCurve ? INDENT_LEFT : 0;", "-\tint indentRight = drawCurve ? INDENT_RIGHT : 0;", "-\tint borderTop = drawCurve ? BORDER_TOP : 0;", "-\tint borderBottom = drawCurve ? BORDER_BOTTOM : 0;", "-\tif (right == null) {", "-\t\tint width = rightWidth == SWT.DEFAULT ? 0 : rightWidth;", "-\t\trightSize = new Point(width, 0);", "-\t} else {", "-\t\trightSize = right.computeSize(rightWidth, SWT.DEFAULT);", "+\tboolean noCurve = left == null || right == null;", "+\tPoint rightSize = new Point(0,0);", "+\tif (right != null) {", "+\t\tPoint trim = right.computeSize(rightWidth, SWT.DEFAULT);", "+\t\ttrim.x = trim.x - rightWidth;", "+\t\trightSize = right.computeSize(rightWidth == SWT.DEFAULT ? SWT.DEFAULT : rightWidth - trim.x, SWT.DEFAULT);", "-\tint width = size.x - curveWidth + indentLeft + indentRight - BORDER_LEFT - BORDER_RIGHT; ", "+\tint width = noCurve ? size.x : size.x - curveWidth + 2* curveIndent - BORDER_LEFT - BORDER_RIGHT; ", "-\tPoint leftSize = (left == null) ? new Point (0, 0) : left.computeSize(width, SWT.DEFAULT);", "+\tPoint leftSize = new Point(0, 0);", "+\tif (left != null) {", "+\t\tPoint trim = left.computeSize(width, SWT.DEFAULT);", "+\t\ttrim.x = trim.x - width;", "+\t\tleftSize = left.computeSize(width - trim.x, SWT.DEFAULT);", "+\t}", "-\tint x = BORDER_LEFT;", "+\tint x = noCurve ? 0 : BORDER_LEFT;", "-\t\tint height = Math.min(size.y - borderTop - borderBottom - 2*BORDER_STRIPE, leftSize.y);", "-\t\tint y = borderTop + BORDER_STRIPE;", "+\t\tint height = Math.min(noCurve ? size.y : size.y - BORDER_TOP - BORDER_BOTTOM - 2*BORDER_STRIPE, leftSize.y);", "+\t\tint y = noCurve ? 0 : BORDER_TOP + BORDER_STRIPE;", "-\tcurveStart = x - indentLeft;", "-\tx += curveWidth - indentLeft - indentRight;", "+\tif (!noCurve) {", "+\t\tcurveStart = x - curveIndent;", "+\t\tx += curveWidth - 2*curveIndent;", "+\t}", "-\t\tint height = Math.min(size.y - borderTop - borderBottom - 2*BORDER_STRIPE, rightSize.y);", "-\t\tint y = borderTop + BORDER_STRIPE;", "+\t\tint height = Math.min(noCurve ? size.y : size.y - BORDER_TOP - BORDER_BOTTOM - 2*BORDER_STRIPE, rightSize.y);", "+\t\tint y = noCurve ? 0 : BORDER_TOP + BORDER_STRIPE;", "-\t\tredraw(curveStart - CURVE_TAIL, 0, oldStart + CURVE_WIDTH - curveStart + CURVE_TAIL, size.y, false);", "+\t\tredraw(curveStart - CURVE_TAIL, 0, oldStart + curveWidth - curveStart + CURVE_TAIL + 5, size.y, false);", "-\t\tredraw(oldStart - CURVE_TAIL, 0, curveStart + CURVE_WIDTH - oldStart + CURVE_TAIL, size.y, false);", "+\t\tredraw(oldStart - CURVE_TAIL, 0, curveStart + curveWidth - oldStart + CURVE_TAIL + 5, size.y, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cf5fdb3145be5beb888b37cc8c204c2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 15, "signatureBeforeChange": " void init(Device device, int width, int height)", "signatureAfterChange": "  void init(Device device, int width, int height)", "diff": ["+", "-\tif (device == null) device = Device.getDevice();", "-\tif (device == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "-\tthis.device = device;", "-\t/* Create the pixmap */", "-\tif (width <= 0 | height <= 0)", "-\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);", "-", "-\tthis.type = SWT.BITMAP;", "-\tthis.pixmap = createPixMap(width, height, device.fScreenDepth);", "-", "-\t/* Fill the bitmap with white */", "-    int[] offscreenGWorld= new int[1];", "-\tOS.NewGWorldFromPtr(offscreenGWorld, pixmap);", "-\tint gw= offscreenGWorld[0];", "-\tif (gw == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "-", "-\tint[] savePort= new int[1];", "-\tint[] saveGWorld= new int[1];", "-\tOS.GetGWorld(savePort, saveGWorld);", "-\tOS.SetGWorld(gw, 0);", "-\tOS.EraseRect(new short[] { 0, 0, (short)height, (short)width } );", "-\tOS.SetGWorld(savePort[0], saveGWorld[0]);", "-\t", "-\tOS.DisposeGWorld(gw);", "-}", "+\tif (width <= 0 || height <= 0) {", "+\t\tSWT.error (SWT.ERROR_INVALID_ARGUMENT);", "+\tthis.device = device;", "+\tthis.type = SWT.BITMAP;", "+", "+\t/* Create the image */", "+\tint bpr = width * 4;", "+\tint dataSize = height * bpr;", "+\tdata = OS.NewPtr(dataSize);", "+\tif (data == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint provider = OS.CGDataProviderCreateWithData(0, data, dataSize, 0);", "+\tif (provider == 0) {", "+\t\tOS.DisposePtr(data);", "+\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "+\t}", "+\tint colorspace = device.colorspace;", "+\thandle = OS.CGImageCreate(width, height, 8, 32, bpr, colorspace, OS.kCGImageAlphaNoneSkipFirst, provider, null, false, 0);", "+\tOS.CGDataProviderRelease(provider);", "+\tif (handle == 0) {", "+\t\tOS.DisposePtr(data);", "+\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "+\t}", "+\t\t", "+\t/* Fill the image with white */", "+\tint bpc = OS.CGImageGetBitsPerComponent(handle);", "+\tint context = OS.CGBitmapContextCreate(this.data, width, height, bpc, bpr, colorspace, OS.kCGImageAlphaNoneSkipFirst);", "+\tCGRect rect = new CGRect();", "+\trect.width = width; rect.height = height;", "+\tOS.CGContextSetRGBFillColor(context, 1, 1, 1, 1);", "+\tOS.CGContextFillRect(context, rect);", "+\tOS.CGContextRelease(context);", "+}"]}], "num": 57672}
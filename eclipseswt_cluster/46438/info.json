{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ba5e86d9d5d7bbc5ccfc3368895d5e6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4fc5642feb0dff5c0c6f55a60a28348", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "dbb652fe193019d96be9d6af80af3f6e1918e181", "commitAfterChange": "a9865ce41544b9634fe7b5cf08a114ae91a2faeb", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 23, "signatureBeforeChange": " public boolean execute (String fileName)", "signatureAfterChange": " public boolean execute(String fileName)", "diff": ["-public boolean execute (String fileName) {", "+public boolean execute(String fileName) {", "-\t", "-\tif (desktop == DESKTOP_GNOME) {\t\t", "-\t\tif (gnomeExpectUri) {", "-\t\t\t/* Convert the given path into a URL */", "-\t\t\tfileName = \"file://\" + fileName;", "-\t\t}", "-", "-\t\t/* Parse the command into its individual arguments. */", "-\t\tString[] args = parseCommand(command);", "-\t\tint fileArg = -1;", "-\t\tint index;", "-\t\tfor (index = 0; index < args.length; index++) {", "-\t\t\tint j = args[index].indexOf(\"%f\");", "-\t\t\tif (j != -1) {", "-\t\t\t\tString value = args[index];", "-\t\t\t\tfileArg = index;", "-\t\t\t\targs[index] = value.substring(0, j) + fileName + value.substring(j + 2);", "-\t\t\t}", "-\t\t}", "-\t", "-\t\t/* If a file name was given but the command did not have \"%f\" */", "-\t\tif ((fileName.length() > 0) && (fileArg < 0)) {", "-\t\t\tString[] newArgs = new String[args.length + 1];", "-\t\t\tfor (index = 0; index < args.length; index++) newArgs[index] = args[index];", "-\t\t\tnewArgs[args.length] = fileName;", "-\t\t\targs = newArgs;", "-\t\t}", "-\t", "-\t\t/* Execute the command. */", "-\t\ttry {", "-\t\t\tCompatibility.exec(args);", "-\t\t} catch (IOException e) {", "-\t\t\treturn false;", "-\t\t}", "-\t\treturn true;", "-\t}\t\t", "-", "+\tswitch (desktop) {", "+\t\tcase DESKTOP_GNOME: return gnome_execute(fileName);", "+\t\tcase DESKTOP_KDE: return kde_execute(fileName);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7343055c4f3e5319077fd62622893c4c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "c58691d416476543a711efb8d8fef004d55ca7cb", "commitAfterChange": "a6582da2b4670467019588906b3cf5d5d15d7dbf", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 14, "signatureBeforeChange": " public boolean execute (String fileName)", "signatureAfterChange": "\r public boolean execute (String fileName)", "diff": ["- */", "-public boolean execute (String fileName) {", "-\tif (fileName == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "-\t", "-\treturn false;", "-}", "+ */\r", "+public boolean execute (String fileName) {\r", "+\tif (fileName == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);\r", "+\t\r", "+\tint desktop = getDesktop(display);\r", "+\tif (desktop == DESKTOP_GNOME) {\t\t\r", "+\t\tif (gnomeExpectUri) {\r", "+\t\t\t/* convert the given path into a URL */\r", "+\t\t\tfileName = \"file://\" + fileName;\r", "+\t\t}\r", "+\r", "+\t\t// Parse the command into its individual arguments.\r", "+\t\tString[] args = parseCommand(command);\r", "+\t\tint fileArg = -1;\r", "+\t\tint index;\r", "+\t\tfor (index = 0; index < args.length; index++) {\r", "+\t\t\tint j = args[index].indexOf(\"%f\");\r", "+\t\t\tif (j != -1) {\r", "+\t\t\t\tString value = args[index];\r", "+\t\t\t\tfileArg = index;\r", "+\t\t\t\targs[index] = value.substring(0, j) + fileName + value.substring(j + 2);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\r", "+\t\t// If a file name was given but the command did not have \"%f\"\r", "+\t\tif ((fileName.length() > 0) && (fileArg < 0)) {\r", "+\t\t\tString[] newArgs = new String[args.length + 1];\r", "+\t\t\tfor (index = 0; index < args.length; index++)\r", "+\t\t\t\tnewArgs[index] = args[index];\r", "+\t\t\tnewArgs[args.length] = fileName;\r", "+\t\t\targs = newArgs;\r", "+\t\t}\r", "+\t\r", "+\t\t// Execute the command.\r", "+\t\ttry {\r", "+\t\t\tCompatibility.exec(args);\r", "+\t\t} catch (IOException e) {\r", "+\t\t\treturn false;\r", "+\t\t}\r", "+\t\treturn true;\r", "+\t}\t\t\r", "+\r", "+\treturn false;\r", "+}\r"]}], "num": 46438}
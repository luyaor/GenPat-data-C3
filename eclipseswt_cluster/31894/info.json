{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a6f4bc183ca4329225c06965d1f2bdf7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2fa40742b5e6fb3c49346e51a5e251f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "9b4500653984e31e0b219c0cf186dae7605efc88", "commitAfterChange": "52c70666c67573818da17f34fd1a3b38e8311391", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "  void createCOMInterfaces ()", "signatureAfterChange": "  void createCOMInterfaces ()", "diff": ["+\twebProgressListener_17 = new XPCOMObject (new int[] {2, 0, 0, 4, 6, 4, 4, 3}) {", "+\t\tpublic long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}", "+\t\tpublic long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}", "+\t\tpublic long /*int*/ method2 (long /*int*/[] args) {return Release ();}", "+\t\tpublic long /*int*/ method3 (long /*int*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}", "+\t\tpublic long /*int*/ method4 (long /*int*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}", "+\t\tpublic long /*int*/ method5 (long /*int*/[] args) {return OnLocationChange (args[0], args[1], args[2], (int)/*64*/args[3]);}", "+\t\tpublic long /*int*/ method6 (long /*int*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}", "+\t\tpublic long /*int*/ method7 (long /*int*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}", "+\t};", "+\t", "+\t};", "+\t", "+\tembeddingSiteWindow_17 = new XPCOMObject (new int[] {2, 0, 0, 5, 5, 0, 1, 1, 1, 1, 1}) {", "+\t\tpublic long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}", "+\t\tpublic long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}", "+\t\tpublic long /*int*/ method2 (long /*int*/[] args) {return Release ();}", "+\t\tpublic long /*int*/ method3 (long /*int*/[] args) {return SetDimensions ((int)/*64*/args[0], (int)/*64*/args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4]);}", "+\t\tpublic long /*int*/ method4 (long /*int*/[] args) {return GetDimensions ((int)/*64*/args[0], args[1], args[2], args[3], args[4]);}", "+\t\tpublic long /*int*/ method5 (long /*int*/[] args) {return SetFocus ();}", "+\t\tpublic long /*int*/ method6 (long /*int*/[] args) {return GetVisibility (args[0]);}", "+\t\tpublic long /*int*/ method7 (long /*int*/[] args) {return SetVisibility ((int)/*64*/args[0]);}", "+\t\tpublic long /*int*/ method8 (long /*int*/[] args) {return GetTitle (args[0]);}", "+\t\tpublic long /*int*/ method9 (long /*int*/[] args) {return SetTitle (args[0]);}", "+\t\tpublic long /*int*/ method10 (long /*int*/[] args) {return GetSiteWindow (args[0]);}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5845e83bc52df968495da41ccce2f7f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "e5d55243766f39b4f94c45d3343e7d9362dd0674", "commitAfterChange": "6cedeab1e01e48352dc5c697eab2b078ad380c2b", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tvoid createIAccessible2()", "signatureAfterChange": "  \tvoid createIAccessible2()", "diff": ["-\t\t\t// We will not add the IAccessible methods here because \"AT's should not rely on IA inheritance\"", "+\t\t\t", "+\t\t\t/* ", "+\t\t\t * Even though the IA2 spec says \"AT's should not rely on IA inheritance\",", "+\t\t\t * some AT's do rely on it, so we need to implement the IAccessible methods here.", "+\t\t\t */", "+\t\t\t// method3 GetTypeInfoCount - not implemented", "+\t\t\t// method4 GetTypeInfo - not implemented", "+\t\t\t// method5 GetIDsOfNames - not implemented", "+\t\t\t// method6 Invoke - not implemented", "+\t\t\tpublic int /*long*/ method7(int /*long*/[] args) {return get_accParent(args[0]);}", "+\t\t\tpublic int /*long*/ method8(int /*long*/[] args) {return get_accChildCount(args[0]);}", "+\t\t\tpublic int /*long*/ method9(int /*long*/[] args) {return get_accChild(args[0], args[1]);}", "+\t\t\tpublic int /*long*/ method10(int /*long*/[] args) {return get_accName(args[0], args[1]);}", "+\t\t\tpublic int /*long*/ method11(int /*long*/[] args) {return get_accValue(args[0], args[1]);}", "+\t\t\tpublic int /*long*/ method12(int /*long*/[] args) {return get_accDescription(args[0], args[1]);}", "+\t\t\tpublic int /*long*/ method13(int /*long*/[] args) {return get_accRole(args[0], args[1]);}", "+\t\t\tpublic int /*long*/ method14(int /*long*/[] args) {return get_accState(args[0], args[1]);}", "+\t\t\tpublic int /*long*/ method15(int /*long*/[] args) {return get_accHelp(args[0], args[1]);}", "+\t\t\tpublic int /*long*/ method16(int /*long*/[] args) {return get_accHelpTopic(args[0], args[1], args[2]);}", "+\t\t\tpublic int /*long*/ method17(int /*long*/[] args) {return get_accKeyboardShortcut(args[0], args[1]);}", "+\t\t\tpublic int /*long*/ method18(int /*long*/[] args) {return get_accFocus(args[0]);}", "+\t\t\tpublic int /*long*/ method19(int /*long*/[] args) {return get_accSelection(args[0]);}", "+\t\t\tpublic int /*long*/ method20(int /*long*/[] args) {return get_accDefaultAction(args[0], args[1]);}", "+\t\t\tpublic int /*long*/ method21(int /*long*/[] args) {return accSelect((int)/*64*/args[0], args[1]);}", "+\t\t\tpublic int /*long*/ method22(int /*long*/[] args) {return accLocation(args[0], args[1], args[2], args[3], args[4]);}", "+\t\t\tpublic int /*long*/ method23(int /*long*/[] args) {return accNavigate((int)/*64*/args[0], args[1], args[2]);}", "+\t\t\tpublic int /*long*/ method24(int /*long*/[] args) {return accHitTest((int)/*64*/args[0], (int)/*64*/args[1], args[2]);}", "+\t\t\tpublic int /*long*/ method25(int /*long*/[] args) {return accDoDefaultAction(args[0]);}", "+\t\t\tpublic int /*long*/ method26(int /*long*/[] args) {return put_accName(args[0], args[1]);}", "+\t\t\tpublic int /*long*/ method27(int /*long*/[] args) {return put_accValue(args[0], args[1]);}", "+", "+\t\t\t// IAccessible2 methods", "+", "+\t\t/* If the callback takes a struct parameter (for example, a VARIANT),", "+\t\t * then create a custom callback that dereferences the struct and", "+\t\t * passes a pointer to the original callback.", "+\t\t */", "+\t\tint /*long*/ ppVtable = objIAccessible2.ppVtable;", "+\t\tint /*long*/[] pVtable = new int /*long*/[1];", "+\t\tCOM.MoveMemory(pVtable, ppVtable, OS.PTR_SIZEOF);", "+\t\tint /*long*/[] funcs = new int /*long*/[28];", "+\t\tCOM.MoveMemory(funcs, pVtable[0], OS.PTR_SIZEOF * funcs.length);", "+\t\tfuncs[9] = COM.get_accChild_CALLBACK(funcs[9]);", "+\t\tfuncs[10] = COM.get_accName_CALLBACK(funcs[10]);", "+\t\tfuncs[11] = COM.get_accValue_CALLBACK(funcs[11]);", "+\t\tfuncs[12] = COM.get_accDescription_CALLBACK(funcs[12]);", "+\t\tfuncs[13] = COM.get_accRole_CALLBACK(funcs[13]);", "+\t\tfuncs[14] = COM.get_accState_CALLBACK(funcs[14]);", "+\t\tfuncs[15] = COM.get_accHelp_CALLBACK(funcs[15]);", "+\t\tfuncs[16] = COM.get_accHelpTopic_CALLBACK(funcs[16]);", "+\t\tfuncs[17] = COM.get_accKeyboardShortcut_CALLBACK(funcs[17]);", "+\t\tfuncs[20] = COM.get_accDefaultAction_CALLBACK(funcs[20]);", "+\t\tfuncs[21] = COM.accSelect_CALLBACK(funcs[21]);", "+\t\tfuncs[22] = COM.accLocation_CALLBACK(funcs[22]);", "+\t\tfuncs[23] = COM.accNavigate_CALLBACK(funcs[23]);", "+\t\tfuncs[25] = COM.accDoDefaultAction_CALLBACK(funcs[25]);", "+\t\tfuncs[26] = COM.put_accName_CALLBACK(funcs[26]);", "+\t\tfuncs[27] = COM.put_accValue_CALLBACK(funcs[27]);", "+\t\tCOM.MoveMemory(pVtable[0], funcs, OS.PTR_SIZEOF * funcs.length);"]}], "num": 31894}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6deafdc9204f0998fd4ca78566ccff30", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6306db6d5ea72edfd9fb1aff1e54834d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "fb9bbf51bcbcca155af75b83246cd84b690dc924", "commitAfterChange": "df49f698bb0e6e765ab855f825c7815df2092c2b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  @Override void createHandle (int index)", "signatureAfterChange": "  @Override void createHandle (int index)", "diff": ["-\tint bits = SWT.CHECK | SWT.RADIO | SWT.PUSH | SWT.SEPARATOR;", "+\tint bits = SWT.CHECK | SWT.RADIO | SWT.PUSH | SWT.SEPARATOR | SWT.CASCADE;", "+\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\thandle = OS.gtk_radio_menu_item_new_with_label (group, buffer);", "+\t\t\tif (OS.GTK3) {", "+\t\t\t\thandle = OS.gtk_radio_menu_item_new (group);", "+\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tlabelHandle = OS.gtk_accel_label_new (buffer);", "+\t\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tboxHandle = gtk_box_new (OS.GTK_ORIENTATION_HORIZONTAL, false, 6);", "+\t\t\t\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "+\t\t\t\t\timageHandle = OS.gtk_image_new ();", "+\t\t\t\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\t}", "+\t\t\t} else { // Gtk2", "+\t\t\t\thandle = OS.gtk_radio_menu_item_new_with_label (group, buffer);", "+\t\t\t}", "-\t\t\thandle = OS.gtk_check_menu_item_new_with_label (buffer);", "+\t\t\tif (OS.GTK3) {", "+\t\t\t\thandle = OS.gtk_check_menu_item_new ();", "+\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tlabelHandle = OS.gtk_accel_label_new (buffer);", "+\t\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tboxHandle = gtk_box_new (OS.GTK_ORIENTATION_HORIZONTAL, false, 6);", "+\t\t\t\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "+\t\t\t\t\timageHandle = OS.gtk_image_new ();", "+\t\t\t\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\t}", "+\t\t\t} else { // Gtk2", "+\t\t\t\thandle = OS.gtk_check_menu_item_new_with_label (buffer);", "+\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t}", "+\t\t// This case now needs to be handled due to double padding. When double padded", "+\t\t// menus are used, the \"head\" menu item (such as File, Edit, Help, etc.) should", "+\t\t// not be padded. We only care about this in Gtk3.", "+\t\tcase SWT.CASCADE:", "+\t\t\tif (OS.GTK3) {", "+\t\t\t\thandle = OS.gtk_menu_item_new ();", "+\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tlabelHandle = OS.gtk_accel_label_new (buffer);", "+\t\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tboxHandle = gtk_box_new (OS.GTK_ORIENTATION_HORIZONTAL, false, 6);", "+\t\t\t\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tif ((parent.style & bits) == SWT.BAR) {", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "+\t\t\t\t\timageHandle = OS.gtk_image_new ();", "+\t\t\t\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "-\t\t\thandle = OS.gtk_image_menu_item_new_with_label (buffer);", "+\t\t\tif (OS.GTK3) {", "+\t\t\t\thandle = OS.gtk_menu_item_new ();", "+\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tlabelHandle = OS.gtk_accel_label_new (buffer);", "+\t\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tboxHandle = gtk_box_new (OS.GTK_ORIENTATION_HORIZONTAL, false, 6);", "+\t\t\t\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "+\t\t\t\t\timageHandle = OS.gtk_image_new ();", "+\t\t\t\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\t}", "+\t\t\t} else { // Gtk2", "+\t\t\t\thandle = OS.gtk_image_menu_item_new_with_label (buffer);", "+\t\t\t}", "-\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+\tif (imageHandle != 0) {", "+\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "+\t\t\tOS.gtk_image_set_pixel_size (imageHandle, 16);", "+\t\t}", "+\t\tOS.gtk_container_add (boxHandle, imageHandle);", "+\t\tOS.gtk_widget_show (imageHandle);", "+\t}", "+\tif (labelHandle != 0) {", "+\t\tif (OS.GTK_VERSION >= OS.VERSION (3, 16, 0)) {", "+\t\t\tOS.gtk_label_set_xalign (labelHandle, 0);", "+\t\t\tOS.gtk_widget_set_halign (labelHandle, OS.GTK_ALIGN_FILL);", "+\t\t} else {", "+\t\t\tOS.gtk_misc_set_alignment(labelHandle, 0, 0);", "+\t\t}", "+\t\tOS.gtk_box_pack_end (boxHandle, labelHandle, true, true, 0);", "+\t\tOS.gtk_widget_show (labelHandle);", "+\t}", "+\tif (boxHandle != 0) {", "+\t\tOS.gtk_container_add (handle, boxHandle);", "+\t\tOS.gtk_widget_show (boxHandle);", "+\t}", "-\t\tlong /*int*/ label = OS.gtk_bin_get_child (handle);", "-\t\tOS.gtk_accel_label_set_accel_widget (label, 0);", "+\t\tif (boxHandle == 0) {", "+\t\t\tlabelHandle = OS.gtk_bin_get_child (handle);", "+\t\t}", "+\t\tOS.gtk_accel_label_set_accel_widget (labelHandle, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1dcef05fe18d44006742aa4c8f06d677", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/TreeDragUnderEffect.java", "commitBeforeChange": "def9dd3c9ed5f5f9d15cae6222faadd9db6a4bfc", "commitAfterChange": "fd85a9c460077fc39bada144eb3bd6ee30bb8964", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " void setDragUnderEffect(int effect, TreeItem item)", "signatureAfterChange": " void setDragUnderEffect(int effect, TreeItem item)", "diff": ["-}", "-\tswitch (effect) {\t\t\t\t", "-\t\tcase DND.FEEDBACK_SELECT:", "-\t\t\tif (currentEffect == DND.FEEDBACK_INSERT_AFTER ||", "-\t\t\t    currentEffect == DND.FEEDBACK_INSERT_BEFORE) {", "-\t\t\t\tsetInsertMark(null, false);", "-\t\t\t\tcurrentEffect = DND.FEEDBACK_NONE;", "-\t\t\t\tcurrentItem = null;", "+\tif ((effect & DND.FEEDBACK_EXPAND) == 0) {", "+\t\texpandBeginTime = 0;", "+\t\texpandIndex = null;", "+\t} else {", "+\t\tif (item != null && item.equals(expandIndex) && expandBeginTime != 0) {", "+\t\t\tif (System.currentTimeMillis() >= expandBeginTime) {", "+\t\t\t\titem.setExpanded(true);", "+\t\t\t\texpandBeginTime = 0;", "+\t\t\t\texpandIndex = null;", "-\t\t\tif (currentEffect != effect || currentItem != item) { ", "-\t\t\t\tsetDropSelection(item); ", "-\t\t\t\tcurrentEffect = DND.FEEDBACK_SELECT;", "-\t\t\t\tcurrentItem = item;", "+\t\t} else {", "+\t\t\texpandBeginTime = System.currentTimeMillis() + EXPAND_HYSTERESIS;", "+\t\t\texpandIndex = item;", "+\t\t}", "+\t}", "+\t", "+\tif ((effect & DND.FEEDBACK_SCROLL) == 0) {", "+\t\tscrollBeginTime = 0;", "+\t\tscrollIndex = null;", "+\t} else {", "+\t\tif (item != null && item.equals(scrollIndex)  && scrollBeginTime != 0) {", "+\t\t\tif (System.currentTimeMillis() >= scrollBeginTime) {", "+\t\t\t\tTreeItem nextItem = null;", "+\t\t\t\tRectangle bounds = item.getBounds();", "+\t\t\t\tRectangle area = tree.getClientArea();", "+\t\t\t\tint headerHeight = tree.getHeaderHeight();", "+\t\t\t\tint itemHeight= tree.getItemHeight();", "+\t\t\t\tif (bounds.y + bounds.height < area.y + headerHeight + 2 * itemHeight) {", "+\t\t\t\t\t// scroll up", "+\t\t\t\t\tTreeItem childItem = item;", "+\t\t\t\t\tTreeItem parentItem = childItem.getParentItem();", "+\t\t\t\t\tint index = parentItem == null ? tree.indexOf(childItem) : parentItem.indexOf(childItem);", "+\t\t\t\t\tif (index == 0) {", "+\t\t\t\t\t\tnextItem = parentItem;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tnextItem = parentItem == null ? tree.getItem(index-1) : parentItem.getItem(index-1);", "+\t\t\t\t\t\tint count = nextItem.getItemCount();", "+\t\t\t\t\t\twhile (count > 0 && nextItem.getExpanded()) {", "+\t\t\t\t\t\t\tnextItem = nextItem.getItem(count - 1);", "+\t\t\t\t\t\t\tcount = nextItem.getItemCount();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (bounds.y > area.y + area.height - 2 * itemHeight) {", "+\t\t\t\t\t// scroll down", "+\t\t\t\t\tif (item.getExpanded()) {", "+\t\t\t\t\t\tnextItem = item.getItem(0);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tTreeItem childItem = item;", "+\t\t\t\t\t\tTreeItem parentItem = childItem.getParentItem();", "+\t\t\t\t\t\tint index = parentItem == null ? tree.indexOf(childItem) : parentItem.indexOf(childItem);", "+\t\t\t\t\t\tint count = parentItem == null ? tree.getItemCount() : parentItem.getItemCount();", "+\t\t\t\t\t\twhile (nextItem == null) { ", "+\t\t\t\t\t\t\tif (index + 1 < count) {", "+\t\t\t\t\t\t\t\tnextItem = parentItem == null ? tree.getItem(index + 1) : parentItem.getItem(index + 1);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (parentItem == null) {", "+\t\t\t\t\t\t\t\t\tnextItem = item;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tchildItem = parentItem;", "+\t\t\t\t\t\t\t\t\tparentItem = childItem.getParentItem();", "+\t\t\t\t\t\t\t\t\tindex = parentItem == null ? tree.indexOf(childItem) : parentItem.indexOf(childItem);", "+\t\t\t\t\t\t\t\t\tcount = parentItem == null ? tree.getItemCount() : parentItem.getItemCount();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (nextItem != null) tree.showItem(nextItem);", "+\t\t\t\tscrollBeginTime = 0;", "+\t\t\t\tscrollIndex = null;", "-\t\t\tbreak;", "-\t\tcase DND.FEEDBACK_INSERT_AFTER:", "-\t\tcase DND.FEEDBACK_INSERT_BEFORE:", "-\t\t\tif (currentEffect == DND.FEEDBACK_SELECT) {", "-\t\t\t\tsetDropSelection(null);", "-\t\t\t\tcurrentEffect = DND.FEEDBACK_NONE;", "-\t\t\t\tcurrentItem = null;", "-\t\t\t}", "-\t\t\tif (currentEffect != effect || currentItem != item) { ", "-\t\t\t\tsetInsertMark(item, effect == DND.FEEDBACK_INSERT_AFTER);", "-\t\t\t\tcurrentEffect = effect;", "-\t\t\t\tcurrentItem = item;", "-\t\t\t}", "-\t\t\tbreak;\t\t\t", "-\t\tdefault :", "-\t\t\tif (currentEffect == DND.FEEDBACK_INSERT_AFTER ||", "-\t\t\t    currentEffect == DND.FEEDBACK_INSERT_BEFORE) {", "-\t\t\t\tsetInsertMark(null, false);", "-\t\t\t}", "-\t\t\tif (currentEffect == DND.FEEDBACK_SELECT) {", "-\t\t\t\tsetDropSelection(null);", "-\t\t\t}", "+\t\t} else {", "+\t\t\tscrollBeginTime = System.currentTimeMillis() + SCROLL_HYSTERESIS;", "+\t\t\tscrollIndex = item;", "+\t\t}", "+\t}", "+\t", "+\tif ((effect & DND.FEEDBACK_SELECT) != 0) {", "+\t\tif ((currentEffect & DND.FEEDBACK_INSERT_AFTER) != 0 ||", "+\t\t    (currentEffect & DND.FEEDBACK_INSERT_BEFORE) != 0) {", "+\t\t\tsetInsertMark(null, false);", "-\t\t\tbreak;", "+\t\t}", "+\t\tif (currentEffect != effect || currentItem != item) { ", "+\t\t\tsetDropSelection(item); ", "+\t\t\tcurrentEffect = DND.FEEDBACK_SELECT;", "+\t\t\tcurrentItem = item;", "+\t\t}", "+\t}", "+\t", "+\tif ((effect & DND.FEEDBACK_INSERT_AFTER) != 0 ||", "+\t\t(effect & DND.FEEDBACK_INSERT_BEFORE) != 0) {", "+\t\tif (currentEffect == DND.FEEDBACK_SELECT) {", "+\t\t\tsetDropSelection(null);", "+\t\t\tcurrentEffect = DND.FEEDBACK_NONE;", "+\t\t\tcurrentItem = null;", "+\t\t}", "+\t\tif (currentEffect != effect || currentItem != item) { ", "+\t\t\tsetInsertMark(item, effect == DND.FEEDBACK_INSERT_AFTER);", "+\t\t\tcurrentEffect = effect;", "+\t\t\tcurrentItem = item;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b8017e90d6f6958893e9714743d136f9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "89c7bd58cc0f196b206506434a742780b967e190", "commitAfterChange": "bd91d6fde8acd820d94d5b8688df3f086edb9944", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  @Override void createHandle (int index)", "signatureAfterChange": "  @Override void createHandle (int index)", "diff": ["-\tint bits = SWT.CHECK | SWT.RADIO | SWT.PUSH | SWT.SEPARATOR;", "+\tint bits = SWT.CHECK | SWT.RADIO | SWT.PUSH | SWT.SEPARATOR | SWT.CASCADE;", "+\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\thandle = OS.gtk_radio_menu_item_new_with_label (group, buffer);", "+\t\t\tif (OS.GTK3) {", "+\t\t\t\thandle = OS.gtk_radio_menu_item_new (group);", "+\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tlabelHandle = OS.gtk_accel_label_new (buffer);", "+\t\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tboxHandle = gtk_box_new (OS.GTK_ORIENTATION_HORIZONTAL, false, 6);", "+\t\t\t\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "+\t\t\t\t\timageHandle = OS.gtk_image_new ();", "+\t\t\t\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\t}", "+\t\t\t} else { // Gtk2", "+\t\t\t\thandle = OS.gtk_radio_menu_item_new_with_label (group, buffer);", "+\t\t\t}", "-\t\t\thandle = OS.gtk_check_menu_item_new_with_label (buffer);", "+\t\t\tif (OS.GTK3) {", "+\t\t\t\thandle = OS.gtk_check_menu_item_new ();", "+\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tlabelHandle = OS.gtk_accel_label_new (buffer);", "+\t\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tboxHandle = gtk_box_new (OS.GTK_ORIENTATION_HORIZONTAL, false, 6);", "+\t\t\t\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "+\t\t\t\t\timageHandle = OS.gtk_image_new ();", "+\t\t\t\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\t}", "+\t\t\t} else { // Gtk2", "+\t\t\t\thandle = OS.gtk_check_menu_item_new_with_label (buffer);", "+\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t}", "+\t\t// This case now needs to be handled due to double padding. When double padded", "+\t\t// menus are used, the \"head\" menu item (such as File, Edit, Help, etc.) should", "+\t\t// not be padded. We only care about this in Gtk3.", "+\t\tcase SWT.CASCADE:", "+\t\t\tif (OS.GTK3) {", "+\t\t\t\thandle = OS.gtk_menu_item_new ();", "+\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tlabelHandle = OS.gtk_accel_label_new (buffer);", "+\t\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tboxHandle = gtk_box_new (OS.GTK_ORIENTATION_HORIZONTAL, false, 6);", "+\t\t\t\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tif ((parent.style & bits) == SWT.BAR) {", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "+\t\t\t\t\timageHandle = OS.gtk_image_new ();", "+\t\t\t\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "-\t\t\thandle = OS.gtk_image_menu_item_new_with_label (buffer);", "+\t\t\tif (OS.GTK3) {", "+\t\t\t\thandle = OS.gtk_menu_item_new ();", "+\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tlabelHandle = OS.gtk_accel_label_new (buffer);", "+\t\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tboxHandle = gtk_box_new (OS.GTK_ORIENTATION_HORIZONTAL, false, 6);", "+\t\t\t\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+", "+\t\t\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "+\t\t\t\t\timageHandle = OS.gtk_image_new ();", "+\t\t\t\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\t}", "+\t\t\t} else { // Gtk2", "+\t\t\t\thandle = OS.gtk_image_menu_item_new_with_label (buffer);", "+\t\t\t}", "-\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+\tif (imageHandle != 0) {", "+\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "+\t\t\tOS.gtk_image_set_pixel_size (imageHandle, 16);", "+\t\t}", "+\t\tOS.gtk_container_add (boxHandle, imageHandle);", "+\t\tOS.gtk_widget_show (imageHandle);", "+\t}", "+\tif (labelHandle != 0) {", "+\t\tif (OS.GTK_VERSION >= OS.VERSION (3, 16, 0)) {", "+\t\t\tOS.gtk_label_set_xalign (labelHandle, 0);", "+\t\t\tOS.gtk_widget_set_halign (labelHandle, OS.GTK_ALIGN_FILL);", "+\t\t} else {", "+\t\t\tOS.gtk_misc_set_alignment(labelHandle, 0, 0);", "+\t\t}", "+\t\tOS.gtk_box_pack_end (boxHandle, labelHandle, true, true, 0);", "+\t\tOS.gtk_widget_show (labelHandle);", "+\t}", "+\tif (boxHandle != 0) {", "+\t\tOS.gtk_container_add (handle, boxHandle);", "+\t\tOS.gtk_widget_show (boxHandle);", "+\t}", "-\t\tlong /*int*/ label = OS.gtk_bin_get_child (handle);", "-\t\tOS.gtk_accel_label_set_accel_widget (label, 0);", "+\t\tif (boxHandle == 0) {", "+\t\t\tlabelHandle = OS.gtk_bin_get_child (handle);", "+\t\t}", "+\t\tOS.gtk_accel_label_set_accel_widget (labelHandle, 0);"]}], "num": 5252}
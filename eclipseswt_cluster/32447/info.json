{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b568c24b9a8d453aa6070a083a7ba2bd", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47623548d1c9688c51fae8f60a9a23e6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "18a77004921c958d7933e6a4bf2f9879ef0cfdc3", "commitAfterChange": "235449f60e73b051bff45b523d24758455cf4aa9", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public ImageData getImageData ()", "signatureAfterChange": " public ImageData getImageData ()", "diff": ["-//\tint[] iconRef = new int[1];", "-//\tOS.GetIconRefFromFileInfo(fsRef, 0, null, 0, 0, 0, iconRef, null);", "-//\tint[] family = new int[1];", "-//\tint rc = OS.IconRefToIconFamily(iconRef[0], OS.kSelectorAlLAvailableData, family);", "-//\tOS.ReleaseIconRef(iconRef[0]);", "-//\tif (rc != OS.noErr) return null;", "-////\tImageData result = createImageFromFamily(family[0], OS.kLarge32BitData, OS.kLarge8BitMask, 32, 32);", "-//\tImageData result = createImageFromFamily(family[0], OS.kSmall32BitData, OS.kSmall8BitMask, 16, 16);", "-//\tOS.DisposeHandle(family[0]);", "-//\tif (result == null) {", "-//\t\tRGB[] rgbs = new RGB[] {", "-//\t\t\tnew RGB(0xff, 0xff, 0xff), ", "-//\t\t\tnew RGB(0x5f, 0x5f, 0x5f),", "-//\t\t\tnew RGB(0x80, 0x80, 0x80),", "-//\t\t\tnew RGB(0xC0, 0xC0, 0xC0),", "-//\t\t\tnew RGB(0xDF, 0xDF, 0xBF),", "-//\t\t\tnew RGB(0xFF, 0xDF, 0x9F),", "-//\t\t\tnew RGB(0x00, 0x00, 0x00),", "-//\t\t};  ", "-//\t\tresult = new ImageData(16, 16, 4, new PaletteData(rgbs)\t);", "-//\t\tresult.transparentPixel = 6; // use black for transparency", "-//\t\tString[] p= {", "-//\t\t\t\"CCCCCCCCGGG\",", "-//\t\t\t\"CFAAAAACBGG\",", "-//\t\t\t\"CAAAAAACFBG\",", "-//\t\t\t\"CAAAAAACBBB\",", "-//\t\t\t\"CAAAAAAAAEB\",", "-//\t\t\t\"CAAAAAAAAEB\",", "-//\t\t\t\"CAAAAAAAAEB\",", "-//\t\t\t\"CAAAAAAAAEB\",", "-//\t\t\t\"CAAAAAAAAEB\",", "-//\t\t\t\"CAAAAAAAAEB\",", "-//\t\t\t\"CAAAAAAAAEB\",", "-//\t\t\t\"CAAAAAAAAEB\",", "-//\t\t\t\"CDDDDDDDDDB\",", "-//\t\t\t\"CBBBBBBBBBB\",", "-//\t\t};", "-//\t\tfor (int y= 0; y < p.length; y++) {", "-//\t\t\tfor (int x= 0; x < 11; x++) {", "-//\t\t\t\tresult.setPixel(x+3, y+1, p[y].charAt(x)-'A');", "-//\t\t\t}", "-//\t\t}", "-//\t}", "-//\treturn result;", "+\tNSWorkspace workspace = NSWorkspace.sharedWorkspace();", "+\tNSString fullPath;", "+\tif (this.fullPath != null) {", "+\t\tfullPath = NSString.stringWith(this.fullPath);", "+\t} else {", "+\t\tfullPath = workspace.fullPathForApplication(NSString.stringWith(name));", "+\t}", "+\tif (fullPath != null) {", "+\t\tNSImage nsImage = workspace.iconForFile(fullPath);", "+\t\tif (nsImage != null) {", "+\t\t\tNSSize size = new NSSize();", "+\t\t\tsize.width = size.height = 16;", "+\t\t\tnsImage.setSize(size);", "+\t\t\tNSImageRep rep = nsImage.bestRepresentationForDevice(null);", "+\t\t\tNSBitmapImageRep imageRep = null;", "+\t\t\tif (rep.isKindOfClass(NSBitmapImageRep.static_class())) { ", "+\t\t\t\timageRep = new NSBitmapImageRep(rep.id);", "+\t\t\t}", "+\t\t\tif (imageRep != null) {", "+\t\t\t\tint width = imageRep.pixelsWide();", "+\t\t\t\tint height = imageRep.pixelsHigh();", "+\t\t\t\tint bpr = imageRep.bytesPerRow();", "+\t\t\t\tint bpp = imageRep.bitsPerPixel();", "+\t\t\t\tint dataSize = height * bpr;", "+\t\t\t\tbyte[] srcData = new byte[dataSize];", "+\t\t\t\tOS.memmove(srcData, imageRep.bitmapData(), dataSize);", "+\t\t\t\t//TODO check color info", "+\t\t\t\tPaletteData palette = new PaletteData(0xFF000000, 0xFF0000, 0xFF00);", "+\t\t\t\tImageData data = new ImageData(width, height, bpp, palette, 4, srcData);", "+\t\t\t\tdata.bytesPerLine = bpr;", "+\t\t\t\tdata.alphaData = new byte[width * height];", "+\t\t\t\tfor (int i = 3, o = 0; i < srcData.length; i+= 4, o++) {", "+\t\t\t\t\tdata.alphaData[o] = srcData[i];", "+\t\t\t\t}", "+\t\t\t\treturn data;", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "12eedefa3fc961a50f710a1e553587b1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/carbon/org/eclipse/swt/program/Program.java", "commitBeforeChange": "14581ca5a7841e362a4bb6a68c76d00675c70760", "commitAfterChange": "2882bbd7423650466596733b7f7109e5d58042c8", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "  static String[] parseCommand(String cmd)", "signatureAfterChange": " public ImageData getImageData ()", "diff": ["-", "-static String[] parseCommand(String cmd) {", "-\tVector args = new Vector();", "-\tint sIndex = 0;", "-\tint eIndex;", "-\twhile (sIndex < cmd.length()) {", "-\t\t/* Trim initial white space of argument. */", "-\t\twhile (sIndex < cmd.length() && Compatibility.isWhitespace(cmd.charAt(sIndex))) {", "-\t\t\tsIndex++;", "-\t\t}", "-\t\tif (sIndex < cmd.length()) {", "-\t\t\t/* If the command is a quoted string */", "-\t\t\tif (cmd.charAt(sIndex) == '\"' || cmd.charAt(sIndex) == '\\'') {", "-\t\t\t\t/* Find the terminating quote (or end of line).", "-\t\t\t\t * This code currently does not handle escaped characters (e.g., \" a\\\"b\").", "-\t\t\t\t */", "-\t\t\t\teIndex = sIndex + 1;", "-\t\t\t\twhile (eIndex < cmd.length() && cmd.charAt(eIndex) != cmd.charAt(sIndex)) eIndex++;", "-\t\t\t\tif (eIndex >= cmd.length()) { ", "-\t\t\t\t\t/* The terminating quote was not found", "-\t\t\t\t\t * Add the argument as is with only one initial quote.", "-\t\t\t\t\t */", "-\t\t\t\t\targs.addElement(cmd.substring(sIndex, eIndex));", "-\t\t\t\t}", "-\t\t\t\telse {", "-\t\t\t\t\t/* Add the argument, trimming off the quotes. */", "-\t\t\t\t\targs.addElement(cmd.substring(sIndex+1, eIndex));", "-\t\t\t\t}", "-\t\t\t\tsIndex = eIndex + 1;", "-\t\t\t}\t\t\t", "-\t\t\telse {", "-\t\t\t\t/* Use white space for the delimiters. */", "-\t\t\t\teIndex = sIndex;", "-\t\t\t\twhile (eIndex < cmd.length() && !Compatibility.isWhitespace(cmd.charAt(eIndex))) eIndex++;", "-\t\t\t\targs.addElement(cmd.substring(sIndex, eIndex));", "-\t\t\t\tsIndex = eIndex + 1;", "-\t}\t", "-\tString[] result = new String[args.size()];", "-\targs.copyInto(result);", "-\treturn result;", "+\tint[] iconRef = new int[1];", "+\tOS.GetIconRefFromFileInfo(fsRef, 0, null, 0, 0, 0, iconRef, null);", "+\tint[] family = new int[1];", "+\tint rc = OS.IconRefToIconFamily(iconRef[0], OS.kSelectorAlLAvailableData, family);", "+\tOS.ReleaseIconRef(iconRef[0]);", "+\tif (rc != OS.noErr) return null;", "+//\tImageData result = createImageFromFamily(family[0], OS.kLarge32BitData, OS.kLarge8BitMask, 32, 32);", "+\tImageData result = createImageFromFamily(family[0], OS.kSmall32BitData, OS.kSmall8BitMask, 16, 16);", "+\tOS.DisposeHandle(family[0]);", "+\tif (result == null) {", "+\t\tRGB[] rgbs = new RGB[] {", "+\t\t\tnew RGB(0xff, 0xff, 0xff), ", "+\t\t\tnew RGB(0x5f, 0x5f, 0x5f),", "+\t\t\tnew RGB(0x80, 0x80, 0x80),", "+\t\t\tnew RGB(0xC0, 0xC0, 0xC0),", "+\t\t\tnew RGB(0xDF, 0xDF, 0xBF),", "+\t\t\tnew RGB(0xFF, 0xDF, 0x9F),", "+\t\t\tnew RGB(0x00, 0x00, 0x00),", "+\t\t};  ", "+\t\tresult = new ImageData(16, 16, 4, new PaletteData(rgbs)\t);", "+\t\tresult.transparentPixel = 6; // use black for transparency", "+\t\tString[] p= {", "+\t\t\t\"CCCCCCCCGGG\",", "+\t\t\t\"CFAAAAACBGG\",", "+\t\t\t\"CAAAAAACFBG\",", "+\t\t\t\"CAAAAAACBBB\",", "+\t\t\t\"CAAAAAAAAEB\",", "+\t\t\t\"CAAAAAAAAEB\",", "+\t\t\t\"CAAAAAAAAEB\",", "+\t\t\t\"CAAAAAAAAEB\",", "+\t\t\t\"CAAAAAAAAEB\",", "+\t\t\t\"CAAAAAAAAEB\",", "+\t\t\t\"CAAAAAAAAEB\",", "+\t\t\t\"CAAAAAAAAEB\",", "+\t\t\t\"CDDDDDDDDDB\",", "+\t\t\t\"CBBBBBBBBBB\",", "+\t\t};", "+\t\tfor (int y= 0; y < p.length; y++) {", "+\t\t\tfor (int x= 0; x < 11; x++) {", "+\t\t\t\tresult.setPixel(x+3, y+1, p[y].charAt(x)-'A');", "+\t\t\t}", "+\t}", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd27806e55ce18102034e27c541c7f5d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/carbon/org/eclipse/swt/program/Program.java", "commitBeforeChange": "589c1ec7b77d39c8770bf37f2bb671074c60dc5b", "commitAfterChange": "8d27542b5364358690f55f77bc0c995713708d46", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " public ImageData getImageData ()", "signatureAfterChange": " public ImageData getImageData ()", "diff": ["-\t/* AW", "-\tint nIconIndex = 0;", "-\tString fileName = iconName;", "-\tint index = iconName.indexOf (',');", "-\tif (index != -1) {", "-\t\tfileName = iconName.substring (0, index);", "-\t\tString iconIndex = iconName.substring (index + 1, iconName.length ()).trim ();", "-\t\ttry {", "-\t\t\tnIconIndex = Integer.parseInt (iconIndex);", "-\t\t} catch (NumberFormatException e) {};", "-\t}", "-\t*/", "-\t/* Use the character encoding for the default locale */", "-\t/*", "-\tTCHAR lpszFile = new TCHAR (0, fileName, true);", "-\tint [] phiconSmall = new int[1], phiconLarge = null;", "-\tOS.ExtractIconEx (lpszFile, nIconIndex, phiconLarge, phiconSmall, 1);", "-\tif (phiconSmall [0] == 0) return null;", "-\tImage image = Image.win32_new (null, SWT.ICON, phiconSmall[0]);", "-\t*/", "-\t", "-\tif (fImageData == null) {", "-\t\tfImageData= new ImageData(16, 16, 4, ", "-\t\t\tnew PaletteData(", "-\t\t\t\tnew RGB[] {", "-\t\t\t\t\tnew RGB(0xff, 0xff, 0xff), ", "-\t\t\t\t\tnew RGB(0x5f, 0x5f, 0x5f),", "-\t\t\t\t\tnew RGB(0x80, 0x80, 0x80),", "-\t\t\t\t\tnew RGB(0xC0, 0xC0, 0xC0),", "-\t\t\t\t\tnew RGB(0xDF, 0xDF, 0xBF),", "-\t\t\t\t\tnew RGB(0xFF, 0xDF, 0x9F),", "-\t\t\t\t\tnew RGB(0x00, 0x00, 0x00),", "-\t\t\t\t}", "-\t\t\t)", "-\t\t);", "-\t\tfImageData.transparentPixel= 6;\t\t\t// use black for transparency", "-\t", "-\t\tString[] p= {", "-\t\t\t\"CCCCCCCCGGG\",", "-\t\t\t\"CFAAAAACBGG\",", "-\t\t\t\"CAAAAAACFBG\",", "-\t\t\t\"CAAAAAACBBB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CDDDDDDDDDB\",", "-\t\t\t\"CBBBBBBBBBB\"", "-\t\t};", "-\t\t", "-\t\tfor (int y= 0; y < p.length; y++)", "-\t\t\tfor (int x= 0; x < 11; x++)", "-\t\t\t\tfImageData.setPixel(x+3, y+1, p[y].charAt(x)-'A');", "+\tRGB[] rgbs = new RGB[] {", "+\t\tnew RGB(0xff, 0xff, 0xff), ", "+\t\tnew RGB(0x5f, 0x5f, 0x5f),", "+\t\tnew RGB(0x80, 0x80, 0x80),", "+\t\tnew RGB(0xC0, 0xC0, 0xC0),", "+\t\tnew RGB(0xDF, 0xDF, 0xBF),", "+\t\tnew RGB(0xFF, 0xDF, 0x9F),", "+\t\tnew RGB(0x00, 0x00, 0x00),", "+\t};  ", "+\tImageData data = new ImageData(16, 16, 4, new PaletteData(rgbs)\t);", "+\tdata.transparentPixel = 6; // use black for transparency", "+\tString[] p= {", "+\t\t\"CCCCCCCCGGG\",", "+\t\t\"CFAAAAACBGG\",", "+\t\t\"CAAAAAACFBG\",", "+\t\t\"CAAAAAACBBB\",", "+\t\t\"CAAAAAAAAEB\",", "+\t\t\"CAAAAAAAAEB\",", "+\t\t\"CAAAAAAAAEB\",", "+\t\t\"CAAAAAAAAEB\",", "+\t\t\"CAAAAAAAAEB\",", "+\t\t\"CAAAAAAAAEB\",", "+\t\t\"CAAAAAAAAEB\",", "+\t\t\"CAAAAAAAAEB\",", "+\t\t\"CDDDDDDDDDB\",", "+\t\t\"CBBBBBBBBBB\",", "+\t};", "+\tfor (int y= 0; y < p.length; y++) {", "+\t\tfor (int x= 0; x < 11; x++) {", "+\t\t\tdata.setPixel(x+3, y+1, p[y].charAt(x)-'A');", "+\t\t}", "-\treturn fImageData;", "+\treturn data;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "848f8659f4647f6312bfe2d636fb2061", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public ImageData getImageData ()", "signatureAfterChange": " public ImageData getImageData ()", "diff": ["-\tNSWorkspace workspace = NSWorkspace.sharedWorkspace();", "-\tNSString fullPath;", "-\tif (this.fullPath != null) {", "-\t\tfullPath = NSString.stringWith(this.fullPath);", "-\t} else {", "-\t\tfullPath = workspace.fullPathForApplication(NSString.stringWith(name));", "-\t}", "-\tif (fullPath != null) {", "-\t\tNSImage nsImage = workspace.iconForFile(fullPath);", "-\t\tif (nsImage != null) {", "-\t\t\tNSSize size = new NSSize();", "-\t\t\tsize.width = size.height = 16;", "-\t\t\tnsImage.setSize(size);", "-\t\t\tNSBitmapImageRep imageRep = null;", "-\t\t\tNSImageRep rep = nsImage.bestRepresentationForDevice(null);", "-\t\t\tif (rep.isKindOfClass(OS.class_NSBitmapImageRep)) { ", "-\t\t\t\timageRep = new NSBitmapImageRep(rep.id);", "-\t\t\t}", "-\t\t\tif (imageRep != null) {", "-\t\t\t\tint width = (int)/*64*/imageRep.pixelsWide();", "-\t\t\t\tint height = (int)/*64*/imageRep.pixelsHigh();", "-\t\t\t\tint bpr = (int)/*64*/imageRep.bytesPerRow();", "-\t\t\t\tint bpp = (int)/*64*/imageRep.bitsPerPixel();", "-\t\t\t\tint dataSize = height * bpr;", "-\t\t\t\tbyte[] srcData = new byte[dataSize];", "-\t\t\t\tOS.memmove(srcData, imageRep.bitmapData(), dataSize);", "-\t\t\t\t//TODO check color info", "-\t\t\t\tPaletteData palette = new PaletteData(0xFF000000, 0xFF0000, 0xFF00);", "-\t\t\t\tImageData data = new ImageData(width, height, bpp, palette, 4, srcData);", "-\t\t\t\tdata.bytesPerLine = bpr;", "-\t\t\t\tdata.alphaData = new byte[width * height];", "-\t\t\t\tfor (int i = 3, o = 0; i < srcData.length; i+= 4, o++) {", "-\t\t\t\t\tdata.alphaData[o] = srcData[i];", "+\tNSAutoreleasePool pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tNSWorkspace workspace = NSWorkspace.sharedWorkspace();", "+\t\tNSString fullPath;", "+\t\tif (this.fullPath != null) {", "+\t\t\tfullPath = NSString.stringWith(this.fullPath);", "+\t\t} else {", "+\t\t\tfullPath = workspace.fullPathForApplication(NSString.stringWith(name));", "+\t\t}", "+\t\tif (fullPath != null) {", "+\t\t\tNSImage nsImage = workspace.iconForFile(fullPath);", "+\t\t\tif (nsImage != null) {", "+\t\t\t\tNSSize size = new NSSize();", "+\t\t\t\tsize.width = size.height = 16;", "+\t\t\t\tnsImage.setSize(size);", "+\t\t\t\tNSBitmapImageRep imageRep = null;", "+\t\t\t\tNSImageRep rep = nsImage.bestRepresentationForDevice(null);", "+\t\t\t\tif (rep.isKindOfClass(OS.class_NSBitmapImageRep)) { ", "+\t\t\t\t\timageRep = new NSBitmapImageRep(rep.id);", "-\t\t\t\treturn data;", "+\t\t\t\tif (imageRep != null) {", "+\t\t\t\t\tint width = (int)/*64*/imageRep.pixelsWide();", "+\t\t\t\t\tint height = (int)/*64*/imageRep.pixelsHigh();", "+\t\t\t\t\tint bpr = (int)/*64*/imageRep.bytesPerRow();", "+\t\t\t\t\tint bpp = (int)/*64*/imageRep.bitsPerPixel();", "+\t\t\t\t\tint dataSize = height * bpr;", "+\t\t\t\t\tbyte[] srcData = new byte[dataSize];", "+\t\t\t\t\tOS.memmove(srcData, imageRep.bitmapData(), dataSize);", "+\t\t\t\t\t//TODO check color info", "+\t\t\t\t\tPaletteData palette = new PaletteData(0xFF000000, 0xFF0000, 0xFF00);", "+\t\t\t\t\tImageData data = new ImageData(width, height, bpp, palette, 4, srcData);", "+\t\t\t\t\tdata.bytesPerLine = bpr;", "+\t\t\t\t\tdata.alphaData = new byte[width * height];", "+\t\t\t\t\tfor (int i = 3, o = 0; i < srcData.length; i+= 4, o++) {", "+\t\t\t\t\t\tdata.alphaData[o] = srcData[i];", "+\t\t\t\t\t}", "+\t\t\t\t\treturn data;", "+\t\t\t\t}", "+\t\treturn null;", "+\t} finally {", "+\t\tpool.release();", "-\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8e390575c0cd6289d525c233e6e6cb1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "4edc576de20a88abac088ae701d29ce3e54ede4f", "commitAfterChange": "c2ec875b36ecf39df432358c14d183b7d7f45fe0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public ImageData getImageData ()", "signatureAfterChange": " public ImageData getImageData ()", "diff": ["-\tint[] iconRef = new int[1];", "-\tOS.GetIconRefFromFileInfo(fsRef, 0, null, 0, 0, 0, iconRef, null);", "-\tint[] family = new int[1];", "-\tint rc = OS.IconRefToIconFamily(iconRef[0], OS.kSelectorAlLAvailableData, family);", "-\tOS.ReleaseIconRef(iconRef[0]);", "-\tif (rc != OS.noErr) return null;", "-//\tImageData result = createImageFromFamily(family[0], OS.kLarge32BitData, OS.kLarge8BitMask, 32, 32);", "-\tImageData result = createImageFromFamily(family[0], OS.kSmall32BitData, OS.kSmall8BitMask, 16, 16);", "-\tOS.DisposeHandle(family[0]);", "-\tif (result == null) {", "-\t\tRGB[] rgbs = new RGB[] {", "-\t\t\tnew RGB(0xff, 0xff, 0xff), ", "-\t\t\tnew RGB(0x5f, 0x5f, 0x5f),", "-\t\t\tnew RGB(0x80, 0x80, 0x80),", "-\t\t\tnew RGB(0xC0, 0xC0, 0xC0),", "-\t\t\tnew RGB(0xDF, 0xDF, 0xBF),", "-\t\t\tnew RGB(0xFF, 0xDF, 0x9F),", "-\t\t\tnew RGB(0x00, 0x00, 0x00),", "-\t\t};  ", "-\t\tresult = new ImageData(16, 16, 4, new PaletteData(rgbs)\t);", "-\t\tresult.transparentPixel = 6; // use black for transparency", "-\t\tString[] p= {", "-\t\t\t\"CCCCCCCCGGG\",", "-\t\t\t\"CFAAAAACBGG\",", "-\t\t\t\"CAAAAAACFBG\",", "-\t\t\t\"CAAAAAACBBB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CAAAAAAAAEB\",", "-\t\t\t\"CDDDDDDDDDB\",", "-\t\t\t\"CBBBBBBBBBB\",", "-\t\t};", "-\t\tfor (int y= 0; y < p.length; y++) {", "-\t\t\tfor (int x= 0; x < 11; x++) {", "-\t\t\t\tresult.setPixel(x+3, y+1, p[y].charAt(x)-'A');", "-\t\t\t}", "-\t\t}", "-\t}", "-\treturn result;", "+//\tint[] iconRef = new int[1];", "+//\tOS.GetIconRefFromFileInfo(fsRef, 0, null, 0, 0, 0, iconRef, null);", "+//\tint[] family = new int[1];", "+//\tint rc = OS.IconRefToIconFamily(iconRef[0], OS.kSelectorAlLAvailableData, family);", "+//\tOS.ReleaseIconRef(iconRef[0]);", "+//\tif (rc != OS.noErr) return null;", "+////\tImageData result = createImageFromFamily(family[0], OS.kLarge32BitData, OS.kLarge8BitMask, 32, 32);", "+//\tImageData result = createImageFromFamily(family[0], OS.kSmall32BitData, OS.kSmall8BitMask, 16, 16);", "+//\tOS.DisposeHandle(family[0]);", "+//\tif (result == null) {", "+//\t\tRGB[] rgbs = new RGB[] {", "+//\t\t\tnew RGB(0xff, 0xff, 0xff), ", "+//\t\t\tnew RGB(0x5f, 0x5f, 0x5f),", "+//\t\t\tnew RGB(0x80, 0x80, 0x80),", "+//\t\t\tnew RGB(0xC0, 0xC0, 0xC0),", "+//\t\t\tnew RGB(0xDF, 0xDF, 0xBF),", "+//\t\t\tnew RGB(0xFF, 0xDF, 0x9F),", "+//\t\t\tnew RGB(0x00, 0x00, 0x00),", "+//\t\t};  ", "+//\t\tresult = new ImageData(16, 16, 4, new PaletteData(rgbs)\t);", "+//\t\tresult.transparentPixel = 6; // use black for transparency", "+//\t\tString[] p= {", "+//\t\t\t\"CCCCCCCCGGG\",", "+//\t\t\t\"CFAAAAACBGG\",", "+//\t\t\t\"CAAAAAACFBG\",", "+//\t\t\t\"CAAAAAACBBB\",", "+//\t\t\t\"CAAAAAAAAEB\",", "+//\t\t\t\"CAAAAAAAAEB\",", "+//\t\t\t\"CAAAAAAAAEB\",", "+//\t\t\t\"CAAAAAAAAEB\",", "+//\t\t\t\"CAAAAAAAAEB\",", "+//\t\t\t\"CAAAAAAAAEB\",", "+//\t\t\t\"CAAAAAAAAEB\",", "+//\t\t\t\"CAAAAAAAAEB\",", "+//\t\t\t\"CDDDDDDDDDB\",", "+//\t\t\t\"CBBBBBBBBBB\",", "+//\t\t};", "+//\t\tfor (int y= 0; y < p.length; y++) {", "+//\t\t\tfor (int x= 0; x < 11; x++) {", "+//\t\t\t\tresult.setPixel(x+3, y+1, p[y].charAt(x)-'A');", "+//\t\t\t}", "+//\t\t}", "+//\t}", "+//\treturn result;", "+\treturn null;"]}], "num": 32447}
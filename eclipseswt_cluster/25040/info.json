{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a767a9ff0f8517dda4d7a21e5ea3802", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3008ada22935d0c6e3ebec171e9fc7a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "19051ffe4fd662e4376e9ef3523424e6764f8cc9", "commitAfterChange": "fec0d691465789ed5f8cc6a20256c17056f52d4b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": " void createHandle (int index)", "diff": ["-\tint decorations = 0;", "-\tif ((style & SWT.NO_TRIM) == 0) {", "-\t\tif ((style & SWT.MIN) != 0) decorations |= OS.MWM_DECOR_MINIMIZE;", "-\t\tif ((style & SWT.MAX) != 0) decorations |= OS.MWM_DECOR_MAXIMIZE;", "-\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.MWM_DECOR_RESIZEH;", "-\t\tif ((style & SWT.BORDER) != 0) decorations |= OS.MWM_DECOR_BORDER;", "-\t\tif ((style & SWT.MENU) != 0) decorations |= OS.MWM_DECOR_MENU;", "-\t\tif ((style & SWT.TITLE) != 0) decorations |= OS.MWM_DECOR_TITLE;", "+\tif (shellHandle == 0) {", "+\t\tint decorations = 0;", "+\t\tif ((style & SWT.NO_TRIM) == 0) {", "+\t\t\tif ((style & SWT.MIN) != 0) decorations |= OS.MWM_DECOR_MINIMIZE;", "+\t\t\tif ((style & SWT.MAX) != 0) decorations |= OS.MWM_DECOR_MAXIMIZE;", "+\t\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.MWM_DECOR_RESIZEH;", "+\t\t\tif ((style & SWT.BORDER) != 0) decorations |= OS.MWM_DECOR_BORDER;", "+\t\t\tif ((style & SWT.MENU) != 0) decorations |= OS.MWM_DECOR_MENU;", "+\t\t\tif ((style & SWT.TITLE) != 0) decorations |= OS.MWM_DECOR_TITLE;", "+\t\t\t/*", "+\t\t\t* Feature in Motif.  Under some Window Managers (Sawmill), in order", "+\t\t\t* to get any border at all from the window manager it is necessary", "+\t\t\t* to set MWM_DECOR_BORDER.  The fix is to force these bits when any", "+\t\t\t* kind of border is requested.", "+\t\t\t*/", "+\t\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.MWM_DECOR_BORDER;", "+\t\t}", "+\t\t", "-\t\t* Feature in Motif.  Under some Window Managers (Sawmill), in order", "-\t\t* to get any border at all from the window manager it is necessary", "-\t\t* to set MWM_DECOR_BORDER.  The fix is to force these bits when any", "-\t\t* kind of border is requested.", "+\t\t* Note: Motif treats the modal values as hints to the Window Manager.", "+\t\t* For example, Enlightenment treats all modes except for SWT.MODELESS", "+\t\t* as SWT.APPLICATION_MODAL.  The Motif Window Manager honours all modes.", "-\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.MWM_DECOR_BORDER;", "-\t}", "-\t", "-\t/*", "-\t* Note: Motif treats the modal values as hints to the Window Manager.", "-\t* For example, Enlightenment treats all modes except for SWT.MODELESS", "-\t* as SWT.APPLICATION_MODAL.  The Motif Window Manager honours all modes.", "-\t*/", "-\tint inputMode = OS.MWM_INPUT_MODELESS;", "-\tif ((style & SWT.PRIMARY_MODAL) != 0) inputMode = OS.MWM_INPUT_PRIMARY_APPLICATION_MODAL;", "-\tif ((style & SWT.APPLICATION_MODAL) != 0) inputMode = OS.MWM_INPUT_FULL_APPLICATION_MODAL;", "-\tif ((style & SWT.SYSTEM_MODAL) != 0) inputMode = OS.MWM_INPUT_SYSTEM_MODAL;", "-\t", "-\t/* ", "-\t* Bug in Motif.  For some reason, if the title string", "-\t* length is not a multiple of 4, Motif occasionally", "-\t* draws garbage after the last character in the title.", "-\t* The fix is to pad the title.", "-\t*/", "-\tbyte [] buffer = {(byte)' ', 0, 0, 0};", "-\tint ptr = OS.XtMalloc (buffer.length);", "-\tOS.memmove (ptr, buffer, buffer.length);", "-\tint [] argList1 = {", "-\t\tOS.XmNmwmInputMode, inputMode,", "-\t\tOS.XmNmwmDecorations, decorations,", "-\t\tOS.XmNoverrideRedirect, (style & SWT.ON_TOP) != 0 ? 1 : 0,", "-\t\tOS.XmNtitle, ptr,", "-\t};", "-\t", "-\t/* ", "-\t* Feature in Motif.  On some Window Managers, when a top level", "-\t* shell is created with no decorations, the Window Manager does", "-\t* not reparent the window regardless of the XmNoverrideRedirect", "-\t* resource.  The fix is to treat the window as if it has been", "-\t* reparented by the Window Manager despite the fact that this", "-\t* has not really happened.", "-\t*/\t", "-\tif (isUndecorated ()) {", "-\t\treparented = true;", "-\t} ", "-\t", "-\t/*", "-\t* Feature in Motif.  When a top level shell has no parent and is", "-\t* application modal, Motif does not honour the modality.  The fix", "-\t* is to create the shell as a child of a hidden shell handle, the", "-\t* same way that XmNoverrideRedirect shells without parents are", "-\t* created.", "-\t*/", "-\tbyte [] appClass = display.appClass;", "-\tif (parent == null && (style & SWT.ON_TOP) == 0 && inputMode != OS.MWM_INPUT_FULL_APPLICATION_MODAL) {", "-\t\tint xDisplay = display.xDisplay;", "-\t\tint widgetClass = OS.applicationShellWidgetClass ();", "-\t\tshellHandle = OS.XtAppCreateShell (display.appName, appClass, widgetClass, xDisplay, argList1, argList1.length / 2);", "+\t\tint inputMode = OS.MWM_INPUT_MODELESS;", "+\t\tif ((style & SWT.PRIMARY_MODAL) != 0) inputMode = OS.MWM_INPUT_PRIMARY_APPLICATION_MODAL;", "+\t\tif ((style & SWT.APPLICATION_MODAL) != 0) inputMode = OS.MWM_INPUT_FULL_APPLICATION_MODAL;", "+\t\tif ((style & SWT.SYSTEM_MODAL) != 0) inputMode = OS.MWM_INPUT_SYSTEM_MODAL;", "+\t\t", "+\t\t/* ", "+\t\t* Bug in Motif.  For some reason, if the title string", "+\t\t* length is not a multiple of 4, Motif occasionally", "+\t\t* draws garbage after the last character in the title.", "+\t\t* The fix is to pad the title.", "+\t\t*/", "+\t\tbyte [] buffer = {(byte)' ', 0, 0, 0};", "+\t\tint ptr = OS.XtMalloc (buffer.length);", "+\t\tOS.memmove (ptr, buffer, buffer.length);", "+\t\tint [] argList1 = {", "+\t\t\tOS.XmNmwmInputMode, inputMode,", "+\t\t\tOS.XmNmwmDecorations, decorations,", "+\t\t\tOS.XmNoverrideRedirect, (style & SWT.ON_TOP) != 0 ? 1 : 0,", "+\t\t\tOS.XmNtitle, ptr,", "+\t\t};", "+\t\t", "+\t\t/* ", "+\t\t* Feature in Motif.  On some Window Managers, when a top level", "+\t\t* shell is created with no decorations, the Window Manager does", "+\t\t* not reparent the window regardless of the XmNoverrideRedirect", "+\t\t* resource.  The fix is to treat the window as if it has been", "+\t\t* reparented by the Window Manager despite the fact that this", "+\t\t* has not really happened.", "+\t\t*/\t", "+\t\tif (isUndecorated ()) {", "+\t\t\treparented = true;", "+\t\t} ", "+\t\t", "+\t\t/*", "+\t\t* Feature in Motif.  When a top level shell has no parent and is", "+\t\t* application modal, Motif does not honour the modality.  The fix", "+\t\t* is to create the shell as a child of a hidden shell handle, the", "+\t\t* same way that XmNoverrideRedirect shells without parents are", "+\t\t* created.", "+\t\t*/", "+\t\tbyte [] appClass = display.appClass;", "+\t\tif (parent == null && (style & SWT.ON_TOP) == 0 && inputMode != OS.MWM_INPUT_FULL_APPLICATION_MODAL) {", "+\t\t\tint xDisplay = display.xDisplay;", "+\t\t\tint widgetClass = OS.applicationShellWidgetClass ();", "+\t\t\tshellHandle = OS.XtAppCreateShell (display.appName, appClass, widgetClass, xDisplay, argList1, argList1.length / 2);", "+\t\t} else {", "+\t\t\tint widgetClass = OS.transientShellWidgetClass ();", "+//\t\t\tif ((style & SWT.ON_TOP) != 0) {", "+//\t\t\t\twidgetClass = OS.OverrideShellWidgetClass ();", "+//\t\t\t}", "+\t\t\tint parentHandle = display.shellHandle;", "+\t\t\tif (parent != null) parentHandle = parent.handle;", "+\t\t\tshellHandle = OS.XtCreatePopupShell (appClass, widgetClass, parentHandle, argList1, argList1.length / 2);", "+\t\t}", "+\t\tOS.XtFree (ptr);", "+\t\tif (shellHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tif (handle != 0) {", "+\t\t\tOS.XtSetMappedWhenManaged (shellHandle, false);", "+\t\t\tOS.XtRealizeWidget (shellHandle);", "+\t\t\tOS.XtSetMappedWhenManaged (shellHandle, true);", "+\t\t\tint xDisplay = display.xDisplay;", "+\t\t\tint xWindow = OS.XtWindow (shellHandle);", "+\t\t\tif (xWindow == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t/*", "+\t\t\t* NOTE:  The embedded parent handle must be realized", "+\t\t\t* before embedding and cannot be realized here because", "+\t\t\t* the handle belongs to another thread.", "+\t\t\t*/", "+\t\t\tOS.XReparentWindow (xDisplay, xWindow, handle, 0, 0);", "+\t\t\thandle = 0;", "+\t\t}", "+\t\t", "+\t\t/* Create scrolled handle */", "+\t\tcreateHandle (index, shellHandle, true);", "-\t\tint widgetClass = OS.transientShellWidgetClass ();", "-//\t\tif ((style & SWT.ON_TOP) != 0) {", "-//\t\t\twidgetClass = OS.OverrideShellWidgetClass ();", "-//\t\t}", "-\t\tint parentHandle = display.shellHandle;", "-\t\tif (parent != null) parentHandle = parent.handle;", "-\t\tshellHandle = OS.XtCreatePopupShell (appClass, widgetClass, parentHandle, argList1, argList1.length / 2);", "+\t\tint [] buffer = new int [1];", "+\t\tint [] argList = {OS.XmNchildren, 0, OS.XmNnumChildren, 0};", "+\t\tOS.XtGetValues (shellHandle, argList, argList.length / 2);", "+\t\tif (argList [3] < 1) error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.memmove (buffer, argList [1], 4);", "+\t\tscrolledHandle = buffer [0];", "+\t\tif (scrolledHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\targList [1] = argList [3] = 0;", "+\t\tOS.XtGetValues (scrolledHandle, argList, argList.length / 2);", "+\t\tif (argList [3] < 4) error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.memmove (buffer, argList [1] + (argList [3] - 1) * 4, 4);", "+\t\thandle = buffer [0];", "+\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\tOS.XtFree (ptr);", "-\tif (shellHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\tif (handle != 0) {", "-\t\tOS.XtSetMappedWhenManaged (shellHandle, false);", "-\t\tOS.XtRealizeWidget (shellHandle);", "-\t\tOS.XtSetMappedWhenManaged (shellHandle, true);", "-\t\tint xDisplay = display.xDisplay;", "-\t\tint xWindow = OS.XtWindow (shellHandle);", "-\t\tif (xWindow == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t/*", "-\t\t* NOTE:  The embedded parent handle must be realized", "-\t\t* before embedding and cannot be realized here because", "-\t\t* the handle belongs to another thread.", "-\t\t*/", "-\t\tOS.XReparentWindow (xDisplay, xWindow, handle, 0, 0);", "-\t\thandle = 0;", "-\t}", "-\t", "-\t/* Create scrolled handle */", "-\tcreateHandle (index, shellHandle, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d54dd24d6ae7d0c6693ea24845785bf5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 12, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": "  void createHandle ()", "diff": ["-void createHandle (int index) {", "-\tstate |= HANDLE | CANVAS;", "-\t", "-\tint decorations = 0;", "-    /* AW", "+", "+void createHandle () {", "+\tstate |= CANVAS | GRAB | HIDDEN;", "+\tint attributes = OS.kWindowStandardHandlerAttribute; // | OS.kWindowCompositingAttribute;", "-\t\tif ((style & SWT.MIN) != 0) decorations |= NSWindow.MiniaturizableWindowMask;", "-\t\tif ((style & SWT.MAX) != 0) decorations |= OS.MWM_DECOR_MAXIMIZE;", "-\t\tif ((style & SWT.RESIZE) != 0) decorations |= NSWindow.ResizableWindowMask;", "-\t\tif ((style & SWT.BORDER) != 0) decorations |= NSWindow.BorderlessWindowMask;", "-\t\tif ((style & SWT.MENU) != 0) decorations |= OS.MWM_DECOR_MENU;", "-\t\tif ((style & SWT.TITLE) != 0) decorations |= NSWindow.TitledWindowMask;", "-\t}", "-    */", "-    ", "-\tif (MacUtil.HIVIEW)", "-    \tdecorations |= OS.kWindowCompositingAttribute;", "-\t", "-\tif (style == SWT.NONE) {", "-\t} else if ((style & SWT.NO_TRIM) == 0) {", "-\t\tif ((style & SWT.CLOSE) != 0) decorations |= OS.kWindowCloseBoxAttribute;", "-\t\tif ((style & SWT.MIN) != 0) decorations |= OS.kWindowCollapseBoxAttribute;", "-\t\tif ((style & SWT.MAX) != 0) decorations |= OS.kWindowFullZoomAttribute;", "-\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.kWindowResizableAttribute | OS.kWindowLiveResizeAttribute;", "-\t\t//if ((style & SWT.BORDER) == 0) decorations |= OS.kWindowNoShadowAttribute;", "-\t//} else {", "-\t//\tdecorations |= OS.kWindowNoShadowAttribute;", "-\t}", "-\t", "-    /* AW", "-\tint inputMode = OS.MWM_INPUT_MODELESS;", "-\tif ((style & SWT.PRIMARY_MODAL) != 0) inputMode = OS.MWM_INPUT_PRIMARY_APPLICATION_MODAL;", "-\tif ((style & SWT.APPLICATION_MODAL) != 0) inputMode = OS.MWM_INPUT_FULL_APPLICATION_MODAL;", "-\tif ((style & SWT.SYSTEM_MODAL) != 0) inputMode = OS.MWM_INPUT_SYSTEM_MODAL;", "-    */", "-\tint inputMode = OS.kWindowModalityNone;", "-\tif ((style & SWT.PRIMARY_MODAL) != 0) inputMode = OS.kWindowModalityWindowModal;", "-\tif ((style & SWT.APPLICATION_MODAL) != 0) inputMode = OS.kWindowModalityAppModal;", "-\tif ((style & SWT.SYSTEM_MODAL) != 0) inputMode = OS.kWindowModalitySystemModal;\t", "-", "-    /* AW", "-\tint [] argList1 = {", "-\t\tOS.XmNmwmInputMode, inputMode,", "-\t\tOS.XmNmwmDecorations, decorations,", "-\t\tOS.XmNoverrideRedirect, (style & SWT.ON_TOP) != 0 ? 1 : 0,", "-\t\tOS.XmNtitle, ptr,", "-\t};", "-\tbyte [] appClass = display.appClass;", "-    */", "-\t", "-\tMacRect bounds= new MacRect(100, 100, 100, 100);", "-\tint windowClass= 0;", "-\tshort themeBrush= OS.kThemeBrushDialogBackgroundActive;", "-\tif (parent == null && (style & SWT.ON_TOP) == 0) {", "-        /* AW", "-\t\tint xDisplay = display.xDisplay;", "-\t\tint widgetClass = OS.TopLevelShellWidgetClass ();", "-\t\tshellHandle = OS.XtAppCreateShell (display.appName, appClass, widgetClass, xDisplay, argList1, argList1.length / 2);", "-        */", "-\t\tif ((style & SWT.NO_TRIM) != 0)", "-\t\t\twindowClass= OS.kHelpWindowClass;", "-\t\telse {", "-\t\t\twindowClass= OS.kDocumentWindowClass;", "-\t\t\t//themeBrush= OS.kThemeBrushDocumentWindowBackground;", "+\t\tif ((style & SWT.CLOSE) != 0) attributes |= OS.kWindowCloseBoxAttribute;", "+\t\tif ((style & SWT.MIN) != 0) attributes |= OS.kWindowCollapseBoxAttribute;", "+\t\tif ((style & SWT.MAX) != 0) attributes |= OS.kWindowFullZoomAttribute;", "+\t\tif ((style & SWT.RESIZE) != 0) {", "+\t\t\tattributes |= OS.kWindowResizableAttribute | OS.kWindowLiveResizeAttribute;", "+\t}", "+\tint windowClass = OS.kDocumentWindowClass;", "+\tif ((style & (SWT.CLOSE | SWT.TITLE)) == 0) windowClass = OS.kSheetWindowClass;", "+//\tint windowClass = parent == null ? OS.kDocumentWindowClass : OS.kSheetWindowClass;", "+//\tif ((style & SWT.APPLICATION_MODAL) != 0) windowClass = OS.kMovableModalWindowClass;", "+//\tif ((style & SWT.SYSTEM_MODAL) != 0) windowClass = OS.kModalWindowClass;", "+\tRect rect = new Rect ();", "+\tOS.GetAvailableWindowPositioningBounds (OS.GetMainDevice (), rect);", "+\tint width = (rect.right - rect.left) * 5 / 8;", "+\tint height = (rect.bottom - rect.top) * 5 / 8;", "+\tOS.SetRect (rect, (short) 0, (short) 0, (short) width, (short) height);", "+\tint [] outWindow = new int [1];", "+\tattributes &= OS.GetAvailableWindowAttributes (windowClass);", "+\tOS.CreateNewWindow (windowClass, attributes, rect, outWindow);", "+\tif (outWindow [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\tshellHandle = outWindow [0];", "+\tif ((style & SWT.ON_TOP) != 0) {", "+\t\tOS.SetWindowActivationScope (shellHandle, OS.kWindowActivationScopeNone);", "+\t}", "+\tOS.RepositionWindow (shellHandle, 0, OS.kWindowCascadeOnMainScreen);", "+\tOS.SetThemeWindowBackground (shellHandle, (short) OS.kThemeBrushDialogBackgroundActive, false);", "+\tint [] theRoot = new int [1];", "+\tOS.CreateRootControl (shellHandle, theRoot);", "+\tOS.GetRootControl (shellHandle, theRoot);", "+\tif (theRoot [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) != 0) {", "+\t\tcreateScrolledHandle (theRoot [0]);", "-        /* AW", "-\t\tint widgetClass = OS.TransientShellWidgetClass ();", "-//\t\tif ((style & SWT.ON_TOP) != 0) {", "-//\t\t\twidgetClass = OS.OverrideShellWidgetClass ();", "-//\t\t}", "-        */", "-        /* AW", "-\t\tint parentHandle = display.shellHandle;", "-\t\tif (parent != null) parentHandle = parent.handle;", "-\t\tshellHandle = OS.XtCreatePopupShell (appClass, widgetClass, parentHandle, argList1, argList1.length / 2);", "-        */", "-\t\tif (style == SWT.NONE) {", "-\t\t\t//System.out.println(\"Shell.createHandle: SWT.NONE\");", "-\t\t\twindowClass= OS.kHelpWindowClass;", "-\t\t} else if ((style & SWT.NO_TRIM) != 0 && (style & SWT.ON_TOP) != 0) {", "-\t\t\t//System.out.println(\"Shell.createHandle: SWT.NO_TRIM | SWT.ON_TOP\");", "-\t\t\twindowClass= OS.kHelpWindowClass;", "-\t\t} else if ((style & SWT.NO_TRIM) != 0) {", "-\t\t\t//System.out.println(\"Shell.createHandle: SWT.NO_TRIM\");", "-\t\t\twindowClass= OS.kHelpWindowClass;", "-\t\t} else if (inputMode == OS.kWindowModalityAppModal) {", "-\t\t\t//System.out.println(\"Shell.createHandle: kMovableModalWindowClass\");", "-\t\t\twindowClass= OS.kMovableModalWindowClass;", "-\t\t} else if (inputMode == OS.kWindowModalitySystemModal) {", "-\t\t\t//System.out.println(\"Shell.createHandle: kModalWindowClass\");", "-\t\t\twindowClass= OS.kModalWindowClass;", "-\t\t} else if ((style & SWT.ON_TOP) != 0) {", "-\t\t\t//System.out.println(\"Shell.createHandle: SWT.ON_TOP\");", "-\t\t\t//windowClass= OS.kFloatingWindowClass;", "-\t\t\twindowClass= OS.kHelpWindowClass;", "-\t\t\tdecorations= 0;", "-\t\t} else {", "-\t\t\t//System.out.println(\"Shell.createHandle: kDocumentWindowClass\");", "-\t\t\twindowClass= OS.kDocumentWindowClass;", "-\t\t}", "+\t\tcreateHandle (theRoot [0]);", "-\t", "-\t// check whether window class supports a given decoration ", "-\tif ((decorations & OS.kWindowCloseBoxAttribute) != 0 &&", "-\t\t\twindowClass != OS.kDocumentWindowClass &&", "-\t\t\t\twindowClass != OS.kFloatingWindowClass &&", "-\t\t\t\t\twindowClass != OS.kUtilityWindowClass) {", "-\t\tdecorations&= ~OS.kWindowCloseBoxAttribute;", "+\tint [] outGroup = new int [1];", "+\tOS.CreateWindowGroup (OS.kWindowGroupAttrHideOnCollapse, outGroup);", "+\tif (outGroup [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\twindowGroup = outGroup [0];", "+\tif (parent != null) {", "+\t\tShell shell = parent.getShell ();", "+\t\tint parentGroup = shell.windowGroup;", "+\t\tOS.SetWindowGroup (shellHandle, parentGroup);", "+\t\tOS.SetWindowGroupParent (windowGroup, parentGroup);", "+\t} else {", "+\t\tint parentGroup = OS.GetWindowGroupOfClass (windowClass);", "+\t\tOS.SetWindowGroupParent (windowGroup, parentGroup);", "-\tif ((decorations & OS.kWindowFullZoomAttribute) != 0 &&", "-\t\t\twindowClass != OS.kDocumentWindowClass &&", "-\t\t\t\twindowClass != OS.kFloatingWindowClass &&", "-\t\t\t\t\twindowClass != OS.kUtilityWindowClass) {", "-\t\tdecorations&= ~OS.kWindowFullZoomAttribute;", "-\t}", "-\tif ((decorations & OS.kWindowCollapseBoxAttribute) != 0 &&", "-\t\t\twindowClass != OS.kDocumentWindowClass) {", "-\t\tdecorations&= ~OS.kWindowCollapseBoxAttribute;", "-\t}", "-\tif ((decorations & OS.kWindowCollapseBoxAttribute) != 0 &&", "-\t\t\twindowClass != OS.kDocumentWindowClass &&", "-\t\t\t\twindowClass != OS.kMovableModalWindowClass &&", "-\t\t\t\t\twindowClass != OS.kFloatingWindowClass &&", "-\t\t\t\t\t\twindowClass != OS.kUtilityWindowClass &&", "-\t\t\t\t\t\t\twindowClass != OS.kSheetWindowClass) {", "-\t\tdecorations&= ~OS.kWindowCollapseBoxAttribute;", "-\t}", "-", "-\tint[] wHandle= new int[1];", "-\tif (OS.CreateNewWindow(windowClass, decorations | OS.kWindowStandardHandlerAttribute, bounds.getData(), wHandle) == OS.kNoErr)", "-\t\tshellHandle= wHandle[0];", "-\telse {", "-\t\tSystem.out.println(\"Shell.createHandle: can't create window with these attributes; creating default window\");", "-\t\tif (OS.CreateNewWindow(OS.kDocumentWindowClass, OS.kWindowStandardHandlerAttribute, bounds.getData(), wHandle) == OS.kNoErr)", "-\t\t\tshellHandle= wHandle[0];", "-\t}", "-", "-\tif (shellHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t", "-\tif (themeBrush != 0)", "-\t\tOS.SetThemeWindowBackground(shellHandle, themeBrush, false);", "-\t", "-\t// set modality", "-\tif (inputMode != OS.kWindowModalityNone) {", "-\t\tint parentShellHandle= 0;", "-\t\tif (parent != null) parentShellHandle = parent.handle;", "-\t\t//System.out.println(\"Shell.createHandle: OS.SetWindowModality: \" + inputMode);", "-\t\tOS.SetWindowModality(shellHandle, inputMode, parentShellHandle);", "-\t}", "-", "-\t/* Create scrolled handle */", "-\tcreateScrolledHandle (shellHandle);", "-", "-\t/*", "-\t* Feature in Motif.  There is no way to get the single pixel", "-\t* border surrounding a TopLevelShell or a TransientShell.", "-\t* Also, attempts to set a border on either the shell handle", "-\t* or the main window handle fail.  The fix is to set the border", "-\t* on the client area.", "-\t*/", "-    /* AW", "-\tif ((style & (SWT.NO_TRIM | SWT.BORDER | SWT.RESIZE)) == 0) {", "-\t\tint [] argList2 = {OS.XmNborderWidth, 1};", "-\t\tOS.XtSetValues (handle, argList2, argList2.length / 2);", "-\t}", "-    */", "+\tOS.SetWindowGroupOwner (windowGroup, shellHandle);"]}], "num": 25040}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ac44175e17c5fd5fd86257340560e1e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54aa31fca0f25020afb26f669c183453", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "5ff7ac2fddf79437e7380da2c61f177a9d2b7b57", "commitAfterChange": "a11f12229032da8f3583f9824ed7436735b4c74e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void copyArea(Image image, int x, int y)", "signatureAfterChange": " public void copyArea(Image image, int x, int y)", "diff": ["-\t\tcopyArea(image, x, y, offscreen[0]);", "+\t\tcopyArea(image, x, y, offscreen[0], false);", "-\t\tcopyArea(image, x, y, data.image.handle);", "+\t\tcopyArea(image, x, y, data.image.handle, false);", "-//\t\tint imageHandle = image.handle;", "-//\t\tCGRect rect = new CGRect();", "-//\t\trect.x = x;", "-//\t\trect.y = y;", "-//\t\trect.width = OS.CGImageGetWidth(imageHandle);", "-//\t\trect.height = OS.CGImageGetHeight(imageHandle);", "-//\t\tint[] displays = new int[16];", "-//\t\tint[] count = new int[1];", "-//\t\tif (OS.CGGetDisplaysWithRect(rect, displays.length, displays, count) != 0) return;", "-//\t\tfor (int i = 0; i < count[0]; i++) {", "-//\t\t\tint display = displays[i];", "-//\t\t\tif (OS.CGDisplayCapture(display) == 0) {", "-//\t\t\t\tint address = OS.CGDisplayAddressForPosition (display, x, y);", "-//\t\t\t\tSystem.out.println(address);", "-//\t\t\t\tint colorspace = data.device.colorspace;", "-//\t\t\t\tint provider = OS.CGDataProviderCreateWithData(0, data, dataSize, 0);", "-//\t\t\t\tint srcImage = OS.CGImageCreate(width, height, 8, 32, bpr, colorspace, OS.kCGImageAlphaNoneSkipFirst, provider, null, false, 0);", "-//\t\t\t\tOS.CGDataProviderRelease(provider);", "-//\t\t\t\tcopyArea(image, x, y, srcImage);", "-//\t\t\t\tif (srcImage != 0) OS.CGImageRelease(srcImage);", "-//\t\t\t\tOS.CGDisplayRelease(display);", "-//\t\t\t}", "-//\t\t}", "+\t\tint imageHandle = image.handle;", "+\t\tCGRect rect = new CGRect();", "+\t\trect.x = x;", "+\t\trect.y = y;", "+\t\trect.width = OS.CGImageGetWidth(imageHandle);", "+\t\trect.height = OS.CGImageGetHeight(imageHandle);", "+\t\tint[] displays = new int[16];", "+\t\tint[] count = new int[1];", "+\t\tif (OS.CGGetDisplaysWithRect(rect, displays.length, displays, count) != 0) return;", "+\t\tfor (int i = 0; i < count[0]; i++) {", "+\t\t\tint display = displays[i];", "+\t\t\tint address = OS.CGDisplayBaseAddress(display);", "+\t\t\tif (address != 0) {", "+\t\t\t\tint width = OS.CGDisplayPixelsWide(display);", "+\t\t\t\tint height = OS.CGDisplayPixelsHigh(display);", "+\t\t\t\tint bpr = OS.CGDisplayBytesPerRow(display);", "+\t\t\t\tint bpp = OS.CGDisplayBitsPerPixel(display);", "+\t\t\t\tint bps = OS.CGDisplayBitsPerSample(display);", "+\t\t\t\tSystem.out.println(width + \" \" + height + \" \" + bpr + \" \" + bpp + \" \" + bps);", "+\t\t\t\tint provider = OS.CGDataProviderCreateWithData(0, address, bpr * height, 0);", "+\t\t\t\tint srcImage = OS.CGImageCreate(width, height, bps, bpp, bpr, data.device.colorspace, OS.kCGImageAlphaNoneSkipFirst, provider, null, false, 0);", "+\t\t\t\tOS.CGDataProviderRelease(provider);", "+\t\t\t\tcopyArea(image, x, y, srcImage, true);", "+\t\t\t\tif (srcImage != 0) OS.CGImageRelease(srcImage);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0411d29dc41b3fc4982d574851ee0ae7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "7d76cc622a15faf17862e315d91aaa4dbfe8f148", "commitAfterChange": "ba456bc3459bbfe3ebe7b7f98ce0c3032335e33c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void copyArea(Image image, int x, int y)", "signatureAfterChange": " public void copyArea(Image image, int x, int y)", "diff": ["-\t//NOT IMPLEMENTED", "+\tif (data.control != 0) {", "+\t\tint[] offscreen = new int[1];", "+\t\tOS.HIViewCreateOffscreenImage(data.control, 0, null, offscreen);", "+\t\tcopyArea(image, x, y, offscreen[0]);", "+\t\tif (offscreen[0] != 0) OS.CGImageRelease(offscreen[0]);", "+\t} else if (data.image != null) {", "+\t\tcopyArea(image, x, y, data.image.handle);", "+\t} else if (data.window != 0) {", "+//\t\tint imageHandle = image.handle;", "+//\t\tCGRect rect = new CGRect();", "+//\t\trect.x = x;", "+//\t\trect.y = y;", "+//\t\trect.width = OS.CGImageGetWidth(imageHandle);", "+//\t\trect.height = OS.CGImageGetHeight(imageHandle);", "+//\t\tint[] displays = new int[16];", "+//\t\tint[] count = new int[1];", "+//\t\tif (OS.CGGetDisplaysWithRect(rect, displays.length, displays, count) != 0) return;", "+//\t\tfor (int i = 0; i < count[0]; i++) {", "+//\t\t\tint display = displays[i];", "+//\t\t\tif (OS.CGDisplayCapture(display) == 0) {", "+//\t\t\t\tint address = OS.CGDisplayAddressForPosition (display, x, y);", "+//\t\t\t\tSystem.out.println(address);", "+//\t\t\t\tint colorspace = data.device.colorspace;", "+//\t\t\t\tint provider = OS.CGDataProviderCreateWithData(0, data, dataSize, 0);", "+//\t\t\t\tint srcImage = OS.CGImageCreate(width, height, 8, 32, bpr, colorspace, OS.kCGImageAlphaNoneSkipFirst, provider, null, false, 0);", "+//\t\t\t\tOS.CGDataProviderRelease(provider);", "+//\t\t\t\tcopyArea(image, x, y, srcImage);", "+//\t\t\t\tif (srcImage != 0) OS.CGImageRelease(srcImage);", "+//\t\t\t\tOS.CGDisplayRelease(display);", "+//\t\t\t}", "+//\t\t}", "+\t}\t", "+}"]}], "num": 11756}
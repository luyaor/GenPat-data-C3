{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ede264aabc5cae58b388e36a97ee19b8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0fc77d87b083c8e2ee73b35d2b823ed", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "3eba119aced2cefa7acb911169b7c357a2c3094d", "commitAfterChange": "5b2613217108ad522e09f31e59950a1790e21738", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tif (wHint == SWT.DEFAULT) wHint = 200;", "-\treturn computeNativeSize (scrolledHandle, wHint, hHint, changed);", "+\t", "+\t/* Compute the height based on the items */", "+\tint height;", "+\tGtkStyle st = new GtkStyle ();", "+\tOS.memmove (st, OS.gtk_widget_get_style (handle));", "+\tif (hHint != SWT.DEFAULT) {", "+\t\theight = hHint;", "+\t} else {", "+\t\theight = getHeaderHeight();", "+\t\theight += OS.GTK_CLIST_ROW_HEIGHT (handle) * getItemCount();", "+\t\theight += 2 * st.ythickness;", "+\t\tif ((style & SWT.H_SCROLL) != 0) height += 18; //WRONG, must obtain the real size", "+\t\t// FIXME - check for border", "+\t}", "+\t", "+\t/* Compute the width based on the items */", "+\tint width;", "+\tif (wHint != SWT.DEFAULT) {", "+\t\twidth = wHint;", "+\t} else {", "+\t\twidth = 2 * st.xthickness;", "+\t\tint count = getColumnCount();", "+\t\tfor (int i = 0; i<count; i++) width += getColumn(i).getWidth();", "+\t\tif ((style & SWT.V_SCROLL) != 0) width += 18; //WRONG, must obtain the real size", "+\t\t// FIXME - check for border", "+\t}", "+\t", "+\t/* In no event will we request ourselves smaller than the minimum OS size */", "+\tPoint minimum = computeNativeSize (scrolledHandle, wHint, hHint, changed);", "+\twidth = Math.max(width, minimum.x);", "+\theight = Math.max(height, minimum.y);", "+\t", "+\treturn new Point(width, height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f572d3164b5c19461f8697deaa8d793", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "6c4a2c166738e67832efca98869d4a51c06db92b", "commitAfterChange": "84d56fe220646f29848300da6bc168504ddc3a77", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t", "-\t/* Compute the height based on the items */", "-\tint height;", "-\tGtkStyle st = new GtkStyle ();", "-\tOS.memmove (st, OS.gtk_widget_get_style (handle));", "-\tif (hHint != SWT.DEFAULT) {", "-\t\theight = hHint;", "-\t} else {", "-\t\theight = getHeaderHeight();", "-\t\theight += OS.GTK_CLIST_ROW_HEIGHT (handle) * getItemCount();", "-\t\theight += 2 * st.ythickness;", "-\t\tint hBarHandle = OS.GTK_SCROLLED_WINDOW_HSCROLLBAR(scrolledHandle);", "-\t\tGtkRequisition requisition = new GtkRequisition();", "-\t\tOS.gtk_widget_size_request(hBarHandle, requisition);", "-\t\theight += requisition.height + OS.GTK_SCROLLED_WINDOW_SCROLLBAR_SPACING(scrolledHandle);", "-\t}", "-\t", "-\t/* Compute the width based on the items */", "-\tint width;", "-\tif (wHint != SWT.DEFAULT) {", "-\t\twidth = wHint;", "-\t} else {", "-\t\twidth = 2 * st.xthickness;", "-\t\tint count = getColumnCount();", "-\t\tfor (int i = 0; i<count; i++) {", "-\t\t\twidth += OS.gtk_clist_optimal_column_width(handle, i);", "-\t\t}", "-\t\twidth += vScrollBarWidth();", "-\t}", "-\t", "-\t/* In no event will we request ourselves smaller than the minimum OS size */", "-\tPoint minimum = computeNativeSize (scrolledHandle, wHint, hHint, changed);", "-\twidth = Math.max(width, minimum.x);", "-\theight = Math.max(height, minimum.y);", "-\t", "-\treturn new Point(width, height);", "-}", "+\tPoint size = computeNativeSize(handle, wHint, hHint, changed);", "+\tRectangle trim = computeTrim (0, 0, size.x, size.y);", "+\tsize.x = trim.width;", "+\tsize.y = trim.height;", "+\treturn size;"]}], "num": 40201}
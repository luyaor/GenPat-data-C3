{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ab7537f5d8cc1fc34e89a566e5ec406", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34c168e84b04315baf2c65690ee34a7f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "d1d6c13713c6e9a3e805c48f63b815964ce8c1f4", "commitAfterChange": "c4e269cbe03f86f086d0a767bf67254d44fe1338", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  int gtk_button_press_event (int widget, int event)", "signatureAfterChange": "  int gtk_button_press_event (int widget, int event)", "diff": ["-\t", "-\t* Note on GTK. When multiple items are already selected, the default handler", "-\t* toggles the selection state of the item and clears any former selection.", "-\t* This is not the desired behaviour when bringing up a popup menu. The", "-\t* workaround is to detect that case and not run the default handler when the", "-\t* item is already part of the current selection.", "+\t* Feature in GTK.  In a multi-select tree view, when multiple items are already", "+\t* selected, the selection state of the item is toggled and the previous selection ", "+\t* is cleared. This is not the desired behaviour when bringing up a popup menu.", "+\t* Also, when an item is reselected with the right button, the tree view issues", "+\t* an unwanted selection event. The workaround is to detect that case and not", "+\t* run the default handler when the item is already part of the current selection.", "-\tif (menu != null && (style & SWT.MULTI) != 0) {", "-\t\tGdkEventButton gdkEvent = new GdkEventButton ();", "-\t\tOS.memmove (gdkEvent, event, GdkEventButton.sizeof);", "-\t\tint button = gdkEvent.button;", "-\t\tif (button == 3 && gdkEvent.type == OS.GDK_BUTTON_PRESS) {", "-\t\t\tint [] path = new int [1];", "-\t\t\tif (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {", "-\t\t\t\tif (path [0] != 0) {", "-\t\t\t\t\tint selection = OS.gtk_tree_view_get_selection (handle);", "-\t\t\t\t\tif (OS.gtk_tree_selection_path_is_selected (selection, path [0])) result = 1;", "-\t\t\t\t\tOS.gtk_tree_path_free (path [0]);", "-\t\t\t\t}", "+\tGdkEventButton gdkEvent = new GdkEventButton ();", "+\tOS.memmove (gdkEvent, event, GdkEventButton.sizeof);", "+\tint button = gdkEvent.button;", "+\tif (button == 3 && gdkEvent.type == OS.GDK_BUTTON_PRESS) {", "+\t\tint [] path = new int [1];", "+\t\tif (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {", "+\t\t\tif (path [0] != 0) {", "+\t\t\t\tint selection = OS.gtk_tree_view_get_selection (handle);", "+\t\t\t\tif (OS.gtk_tree_selection_path_is_selected (selection, path [0])) result = 1;", "+\t\t\t\tOS.gtk_tree_path_free (path [0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f02849f441a999b39a1da85da87a487", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "d1d6c13713c6e9a3e805c48f63b815964ce8c1f4", "commitAfterChange": "c4e269cbe03f86f086d0a767bf67254d44fe1338", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  int gtk_button_press_event (int widget, int event)", "signatureAfterChange": "  int gtk_button_press_event (int widget, int event)", "diff": ["-", "-\t* Note on GTK. When multiple items are already selected, the default handler", "-\t* toggles the selection state of the item and clears any former selection.", "-\t* This is not the desired behaviour when bringing up a popup menu. The", "-\t* workaround is to detect that case and not run the default handler when the", "-\t* item is already part of the current selection.", "+\t* Feature in GTK.  In a multi-select list view, when multiple items are already", "+\t* selected, the selection state of the item is toggled and the previous selection ", "+\t* is cleared. This is not the desired behaviour when bringing up a popup menu.", "+\t* Also, when an item is reselected with the right button, the tree view issues", "+\t* an unwanted selection event. The workaround is to detect that case and not", "+\t* run the default handler when the item is already part of the current selection.", "-\tif (menu != null && (style & SWT.MULTI) != 0) {", "-\t\tGdkEventButton gdkEvent = new GdkEventButton ();", "-\t\tOS.memmove (gdkEvent, event, GdkEventButton.sizeof);", "-\t\tint button = gdkEvent.button;", "-\t\tif (button == 3 && gdkEvent.type == OS.GDK_BUTTON_PRESS) {", "-\t\t\tint [] path = new int [1];", "-\t\t\tif (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {", "-\t\t\t\tif (path [0] != 0) {", "-\t\t\t\t\tint selection = OS.gtk_tree_view_get_selection (handle);", "-\t\t\t\t\tif (OS.gtk_tree_selection_path_is_selected (selection, path [0])) result = 1;", "-\t\t\t\t\tOS.gtk_tree_path_free (path [0]);", "-\t\t\t\t}", "+\tGdkEventButton gdkEvent = new GdkEventButton ();", "+\tOS.memmove (gdkEvent, event, GdkEventButton.sizeof);", "+\tint button = gdkEvent.button;", "+\tif (button == 3 && gdkEvent.type == OS.GDK_BUTTON_PRESS) {", "+\t\tint [] path = new int [1];", "+\t\tif (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {", "+\t\t\tif (path [0] != 0) {", "+\t\t\t\tint selection = OS.gtk_tree_view_get_selection (handle);", "+\t\t\t\tif (OS.gtk_tree_selection_path_is_selected (selection, path [0])) result = 1;", "+\t\t\t\tOS.gtk_tree_path_free (path [0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0477439d6ee6772297330e44da473312", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "3518dcf86c71885a55fc8e7584e113022fefcef3", "commitAfterChange": "0828fa148f6ab10bffd0dad7cb0381fa25623a9b", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "  boolean dragDetect (int x, int y, boolean filter, boolean [] consume)", "signatureAfterChange": "  boolean dragDetect (int x, int y, boolean filter, boolean [] consume)", "diff": ["+\t/**", "+\t * Feature in Cocoa. Mouse drag events do not account for hysteresis.", "+\t * As soon as the mouse drags a mouse dragged event is fired.  Fix is to", "+\t * check for another mouse drag event that is at least 5 pixels away ", "+\t * from the start of the drag. ", "+\t */", "-\tNSEvent event = application.nextEventMatchingMask(OS.NSLeftMouseDraggedMask, NSDate.dateWithTimeIntervalSinceNow(0.2), OS.NSDefaultRunLoopMode, false);", "-\treturn (event != null);", "+\tboolean dragging = false;", "+\tint /*long*/ eventType = OS.NSLeftMouseDown;", "+\tfloat /*double*/ dragX = x;", "+\tfloat /*double*/ dragY = y;", "+\t", "+\t/**", "+\t * To check for an actual drag we need to pull off mouse moved and mouse up events", "+\t * to detect if the user dragged outside of a 10 x 10 box centered on the mouse down location.", "+\t * We still want the view to see the events, so save them and re-post when done checking.", "+\t */", "+\tNSEvent mouseUpEvent = null;", "+\tNSMutableArray dragEvents = NSMutableArray.arrayWithCapacity(10);", "+", "+\twhile (eventType != OS.NSLeftMouseUp) {", "+\t\tNSEvent event = application.nextEventMatchingMask((OS.NSLeftMouseUpMask | OS.NSLeftMouseDraggedMask),", "+\t\t\t\tNSDate.distantFuture(), OS.NSEventTrackingRunLoopMode, true);", "+\t\teventType = event.type();", "+\t\t", "+\t\tif (eventType == OS.NSLeftMouseDragged) {", "+\t\t\tdragEvents.addObject(event);", "+\t\t\tNSPoint windowLoc = event.locationInWindow();", "+\t\t\tNSPoint viewLoc = view.convertPoint_fromView_(windowLoc, null);", "+\t\t\tif ((Math.abs(viewLoc.x - dragX) > DEFAULT_DRAG_HYSTERESIS) || (Math.abs(viewLoc.y - dragY) > DEFAULT_DRAG_HYSTERESIS)) {", "+\t\t\t\tdragging = true;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t} else if (eventType == OS.NSLeftMouseUp) {", "+\t\t\tmouseUpEvent = event;", "+\t\t}", "+\t}", "+", "+\t// Push back any events we took out of the queue so the control can receive them. ", "+\tif (mouseUpEvent != null) application.postEvent(mouseUpEvent, true);", "+", "+\tif (dragEvents.count() > 0) {", "+\t\twhile (dragEvents.count() > 0) {", "+\t\t\tNSEvent currEvent = new NSEvent(dragEvents.objectAtIndex(dragEvents.count() - 1).id);", "+\t\t\tdragEvents.removeLastObject();", "+\t\t\tapplication.postEvent(currEvent, true);", "+\t\t}", "+\t}", "+", "+\treturn dragging;"]}], "num": 21974}
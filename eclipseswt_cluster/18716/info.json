{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "54f5c844446b4ea75a643c319607dabc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b49a3e6601cdf943a6a539f1e6d11d9e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "6930fdd35d9cdffd6d05c778fb4b82a2018d7fcb", "commitAfterChange": "4b4619a6b5b2cd61a37c980601ead9593d587b9d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  void applyEditSegments ()", "signatureAfterChange": "  void applyEditSegments ()", "diff": ["-\tif (!hooks (SWT.Segments) && !filters (SWT.Segments)) return;", "+\tif (!hooks (SWT.Segments) && !filters (SWT.Segments) && (state & HAS_AUTO_DIRECTION) == 0) return;", "-", "-\t/* Get segments text */", "-\tEvent event = new Event ();", "-\tevent.text = string;", "-\tevent.segments = segments;", "-\tsendEvent (SWT.Segments, event);", "+\t/* Get segments */", "+\tsegments = null;", "+\tEvent event = getSegments (string);", "+\tif (event == null || event.segments == null) return;", "-\tif (segments == null) return;", "-\tint nSegments = segments.length;", "+\tint nSegments = segments.length; ", "-\tlength = string == null ? 0 : string.length ();", "-", "-\tfor (int i = 1; i < nSegments; i++) {", "-\t\tif (event.segments [i] < event.segments [i - 1] || event.segments [i] > length) {", "-\t\t\terror (SWT.ERROR_INVALID_ARGUMENT);", "-\t\t}", "-\t}", "-", "+\t}", "+\tif (segmentsChars != null && segmentsChars.length > 0) {", "+\t\t/* ", "+\t\t * In addition to enforcing the required direction by prepending a UCC (LRE", "+\t\t * or RLE), also set the direction through a Window style.", "+\t\t * This is to ensure correct caret movement, and makes sense even when the", "+\t\t * UCC was added by an authentic SegmentListener.", "+\t\t */", "+\t\tif (segmentsChars[0] == RLE) {", "+\t\t\tsuper.updateTextDirection(SWT.RIGHT_TO_LEFT);", "+\t\t} else if (segmentsChars[0] == LRE) {", "+\t\t\tsuper.updateTextDirection(SWT.LEFT_TO_RIGHT);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2384184c3e5d9b94709e91e919fee97a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ScrollBar.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 23, "signatureBeforeChange": " int processWheel(int eRefHandle)", "signatureAfterChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "diff": ["+int kEventMouseDown (int nextHandler, int theEvent, int userData) {", "+\tint status = super.kEventMouseDown (nextHandler, theEvent, userData);", "+\tif (status == OS.noErr) return status;", "+\tdragging = false;", "+\tstatus = OS.CallNextEventHandler (nextHandler, theEvent);", "+\tif (dragging) {", "+\t\tEvent event = new Event ();", "+\t\tsendEvent (SWT.Selection, event);", "+\t}", "+\tdragging = false;", "+\treturn status;", "+}", "-}", "-int processWheel(int eRefHandle) {", "-\tint[] t= new int[1];", "-\tOS.GetEventParameter(eRefHandle, OS.kEventParamMouseWheelDelta, OS.typeSInt32, null, null, t);", "-\tOS.SetControl32BitValue(handle, OS.GetControl32BitValue(handle) - (increment * t[0]));", "-\tEvent event= new Event ();", "-    event.detail= t[0] > 0 ? SWT.ARROW_UP : SWT.ARROW_DOWN;\t", "-\tsendEvent (SWT.Selection, event);", "-\tgetDisplay().update();", "-\treturn OS.kNoErr;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "292ff289cfc007200d4ecdc419141ceb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 58, "signatureBeforeChange": " public void setVisible (boolean visible)", "signatureAfterChange": "  public void setVisible (boolean visible)", "diff": ["+", "-\trealizeWidget ();", "-\t", "-\t/* Show the shell */", "-\t\t", "+\t\tif ((state & HIDDEN) == 0) return;", "+\t\tstate &= ~HIDDEN;", "+\t} else {", "+\t\tif ((state & HIDDEN) != 0) return;", "+\t\tstate |= HIDDEN;", "+\t}", "+\tif (parent != null && !parent.isVisible ()) return;", "+\tsetWindowVisible (visible);", "+}", "-", "-\t\t/* Map the widget */", "-        /* AW", "-\t\tOS.XtSetMappedWhenManaged (shellHandle, true);", "-\t\tif (OS.XtIsTopLevelShell (shellHandle)) {", "-\t\t\tOS.XtMapWidget (shellHandle);", "-\t\t} else {", "-\t\t\tOS.XtPopup (shellHandle, OS.XtGrabNone);", "-        */", "-\t\tOS.ShowWindow(shellHandle);", "-\t\t//OS.SelectWindow(shellHandle);", "-\t\tOS.BringToFront(shellHandle);", "-", "-\t\tprocessResize (null);", "-\t\t", "-\t\t// find focus", "-\t\t//if (savedFocus == null)", "-\t\t//\tsetFocus();", "-", "-\t\t/*", "-\t\t* Force the shell to be fully exposed before returning.", "-\t\t* This ensures that the shell coordinates are correct", "-\t\t* when queried directly after showing the shell.", "-\t\t*/", "-\t\tdo {", "-\t\t\tdisplay.update ();", "-\t\t} while (!isVisible ());", "-", "-\t\t//adjustTrim ();", "-", "-\t\t/* Set the saved focus widget */", "-\t\t/*", "-\t\tif (savedFocus != null && !savedFocus.isDisposed ()) {", "-\t\t\tsavedFocus.setFocus ();", "-\t\t}", "-\t\tsavedFocus = null;", "-\t\t*/", "-\t\t", "-\t\t//sendEvent (SWT.Show);", "-\t\t", "-\t\treturn;", "-\t}", "-\t", "-\tShell[] shells= getShells();", "-\tfor (int i= 0; i < shells.length; i++) {", "-\t\tShell shell= shells[i];", "-\t\tif (shell.isVisible())", "-\t\t\tshell.setVisible(false);", "-\t}", "-\t", "-\t/* Hide the shell */", "-    /* AW", "-\tOS.XtSetMappedWhenManaged (shellHandle, false);", "-\tif (OS.XtIsTopLevelShell (shellHandle)) {", "-\t\tOS.XtUnmapWidget (shellHandle);", "-\t\tOS.XtPopdown (shellHandle);", "-    */", "-    OS.HideWindow(shellHandle);", "-\tsendEvent (SWT.Hide);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce4d577ebde47cf418ffa0f02fbe0bdb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "5f75e2dae2083c0061842ac6356ab5d489381754", "commitAfterChange": "528027af0b27ada34be52afa13892d4c48dca57c", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " public TreeItem getTopItem ()", "signatureAfterChange": " public TreeItem getTopItem ()", "diff": ["-\tcheckWidget();", "-\t//TODO - optimize", "-\tRect rect = new Rect ();", "-\tint y = getBorderWidth () + getHeaderHeight ();", "-\tfor (int i=0; i<items.length; i++) {", "-\t\tTreeItem item = items [i];", "-\t\tif (item != null) {", "-\t\t\tint columnId = (columnCount == 0) ? column_id : columns [0].id;", "-\t\t\tif (OS.GetDataBrowserItemPartBounds (handle, item.id, columnId, OS.kDataBrowserPropertyEnclosingPart, rect) == OS.noErr) {", "-\t\t\t\tif (rect.top <= y && y <= rect.bottom) return item;", "-\t\t\t}", "-\t\t}", "-\t}", "+\tcheckWidget ();", "+\t/* Find the topItem by calculating its row position */", "+\tint[] top = new int[1], left = new int[1];", "+\tOS.GetDataBrowserScrollPosition (handle, top, left);\t\t", "+\tint row = top[0] / getItemHeight ();;", "+\tint [] itemId = new int[1];", "+\tint result = OS.GetDataBrowserTableViewItemID (handle, row, itemId);", "+\tif (result == OS.noErr) return _getItem (itemId[0], false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f037fc75af8942a5b3c846b3affc164", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "f4bb8ef7d86d4b06d34d232ac624ae216be4183a", "commitAfterChange": "358e077459326bfde3a675b949aa20349d21bc3d", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 37, "signatureBeforeChange": "  String getFormattedString(int style)", "signatureAfterChange": "  String getFormattedString (int style)", "diff": ["-String getFormattedString(int style) {", "-\tif ((style & SWT.TIME) != 0) {", "-\t\tString[] ampm = formatSymbols.getAmPmStrings();", "-\t\tint h = calendar.get(Calendar.HOUR); if (h == 0) h = 12;", "-\t\tint m = calendar.get(Calendar.MINUTE);", "-\t\tint s = calendar.get(Calendar.SECOND);", "-\t\tint a = calendar.get(Calendar.AM_PM);", "-\t\tif ((style & SWT.SHORT) != 0) return \"\" + (h < 10 ? \" \" : \"\") + h + \":\" + (m < 10 ? \"0\" : \"\") + m + \" \" + ampm[a];", "-\t\treturn \"\" + (h < 10 ? \" \" : \"\") + h + \":\" + (m < 10 ? \"0\" : \"\") + m + \":\" + (s < 10 ? \"0\" : \"\") + s + \" \" + ampm[a];", "+String getFormattedString (int style) {", "+\tString formattedSting = null;", "+\tif (isTime ()) {", "+\t\tString[] ampm = formatSymbols.getAmPmStrings ();", "+\t\tint h = calendar.get (Calendar.HOUR); if (h == 0) h = 12;", "+\t\tint m = calendar.get (Calendar.MINUTE);", "+\t\tint s = calendar.get (Calendar.SECOND);", "+\t\tint a = calendar.get (Calendar.AM_PM);", "+\t\tformattedSting = \"\" + (h < 10 ? \"0\" : \"\") + h + \":\";", "+\t\tif ((style & SWT.SHORT) != 0) {", "+\t\t\tformattedSting +=  (m < 10 ? \"0\" : \"\") + m + \" \" + ampm[a];", "+\t\t} else {", "+\t\t\tformattedSting +=  (m < 10 ? \"0\" : \"\") + m + \":\" + (s < 10 ? \"0\" : \"\") + s + \" \" + ampm[a];", "+\t\t}", "+\t} else if (isDate ()) {", "+\t\tint y = calendar.get (Calendar.YEAR);", "+\t\tint m = calendar.get (Calendar.MONTH) + 1;", "+\t\tint d = calendar.get (Calendar.DAY_OF_MONTH);", "+\t\tformattedSting = \"\" + (m < 10 ? \"0\" : \"\") + m + \"/\";", "+\t\tif ((style & SWT.SHORT) != 0) {", "+\t\t\tformattedSting += y;", "+\t\t} else {", "+\t\t\tformattedSting += (d < 10 ? \"0\" : \"\") + d + \"/\" + y;", "+\t\t}", "-\t/* SWT.DATE */", "-\tint y = calendar.get(Calendar.YEAR);", "-\tint m = calendar.get(Calendar.MONTH) + 1;", "-\tint d = calendar.get(Calendar.DAY_OF_MONTH);", "-\tif ((style & SWT.SHORT) != 0) return \"\" + (m < 10 ? \" \" : \"\") + m + \"/\" + y;", "-\treturn \"\" + (m < 10 ? \" \" : \"\") + m + \"/\" + (d < 10 ? \" \" : \"\") + d + \"/\" + y;", "+\treturn formattedSting;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39ccae3d50649d185e18da6eee02a070", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "d72f35ff56bd7e207ead34e5ce2d69658d62510a", "commitAfterChange": "26b368475bdffed26a9e49073a4a60fac1d97883", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " void drawChevron(GC gc)", "signatureAfterChange": " void drawChevron(GC gc)", "diff": ["-\t// draw chevron (6x5)", "+\t// draw chevron (10x7)", "-\t\t\tint[] shape = new int[] {x,y, x+2,y, x+6,y+4, x+6,y+5, x+2,y+9, x,y+9, x,y+7, x+2,y+5, x+2,y+4, x,y+2};", "+\t\t\tint[] shape = new int[] {x,y, x+9,y, x+9,y+2, x+5,y+6, x+4,y+6, x,y+2, x,y};", "-\t\t\tint[] shape = new int[] {x,y, x+2,y, x+6,y+4, x+6,y+5, x+2,y+9, x,y+9, x,y+7, x+2,y+5, x+2,y+4, x,y+2};", "+\t\t\tint[] shape = new int[] {x,y, x+9,y, x+9,y+2, x+5,y+6, x+4,y+6, x,y+2, x,y};", "-\t\t\tint[] shape = new int[] {x+1,y+1, x+3,y+1, x+7,y+5, x+7,y+6, x+3,y+10, x+1,y+10, x+1,y+8, x+3,y+6, x+3,y+5, x+1,y+3};", "+\t\t\tint[] shape = new int[] {x+1,y+1, x+10,y+1, x+10,y+3, x+6,y+7, x+5,y+7, x+1,y+3, x+1,y+1};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "32291de1ea508c5112f7e5335dd4d720", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/PromptService.java", "commitBeforeChange": "778b8b3af5e5339e84ddecf30d6a81801e3a02c7", "commitAfterChange": "97ec9a32696bacaa354998d3ea0c1338465e3bf1", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  Browser getBrowser(int aDOMWindow)", "signatureAfterChange": "  Browser getBrowser(int aDOMWindow)", "diff": ["-\tDisplay display = Display.getCurrent();", "-\tShell[] shells = display.getShells();", "-\tBrowser browser = null;", "-\tfor (int i = 0; i < shells.length; i++) {", "-\t\tbrowser = Browser.findBrowser(shells[i], result[0]);", "-\t\tif (browser != null) break;", "-\t}", "-\treturn browser;", "+\treturn Browser.findBrowser(result[0]); "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73fe0ed5009a1f9188cf96322dacf01d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 26, "signatureBeforeChange": " Rectangle getHitBounds ()", "signatureAfterChange": " Point getItemExtent()", "diff": ["- */", "-Rectangle getHitBounds () {", "-\tint contentX = getContentX (0);", "-\tint width = 0;", "-\tif (parent.getColumnCount () == 0) {", "-\t\twidth = getFocusX () + getTextPaintWidth (0) - contentX; ", "-\t} else {", "-\t\tTreeColumn column = parent.getColumn (0);", "-\t\twidth = column.getWidth () - contentX;", "-\t}", "-\treturn new Rectangle (contentX, parent.getItemY (this), width, parent.getItemHeight ());", "-}", "+ */", "+Point getItemExtent() {", "+\tTree2 parent;", "+\tPoint imageExtent;", "+\tString text;", "+\tint itemWidth;", "+\t", "+\tif (itemExtent == null) {", "+\t\tparent = getParent();", "+\t\timageExtent = parent.getImageExtent();", "+\t\ttext = getText();", "+\t\titemWidth = SELECTION_PADDING;", "+\t\tif (text != null) {", "+\t\t\titemWidth += getTextWidth(text) + TEXT_INDENT;", "+\t\t}", "+\t\tif (imageExtent != null) {", "+\t\t\titemWidth += imageExtent.x + IMAGE_PADDING;", "+\t\t}", "+\t\titemExtent = new Point(itemWidth, parent.getItemHeight());", "+\t}", "+\treturn itemExtent;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d0bd4be9a398b841a3fa79b12a8cabf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "ca611642fc41807588637202b032414f273f2b1e", "commitAfterChange": "7f6898e7f25aa3abfc9d050db6890b8da8096e1f", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 101, "signatureBeforeChange": " private RGB blend(RGB from, RGB to)", "signatureAfterChange": "  void setSelectionHighlightGradientColor(Color start)", "diff": ["+", "+void setSelectionHighlightGradientColor(Color start) {", "+\t//Set to null to match all the early return cases.", "+\t//For early returns, don't realloc the cache, we may get a cache hit next time we're given the highlight", "+\tselectionHighlightGradientBegin = null;", "+", "+\tif(start == null)", "+\t\treturn;", "+", "+\t//don't bother on low colour", "+\tif (getDisplay().getDepth() < 15)", "+\t\treturn;", "+\t", "+\t//don't bother if we don't have a background gradient", "+\tif(selectionGradientColors.length < 2) ", "+\t\treturn;", "+", "+\t//OK we know its a valid gradient now", "+\tselectionHighlightGradientBegin = start;", "+", "+\tif(! isSelectionHighlightColorsCacheHit(start))", "+\t\tcreateSelectionHighlightGradientColors(start);  //if no cache hit then compute new ones", "+}", "- */", "-private RGB blend(RGB from, RGB to){", "-\tint red = (from.red + to.red) / 2;", "-\tint green = (from.green + to.green) / 2;", "-\tint blue = (from.blue + to.blue) / 2;", "-\treturn new RGB(red, green, blue);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa0da1aadceae00b078067fdf4172841", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": " Point getItemExtent(TableColumn column)", "signatureAfterChange": " int getPreferredWidth (int columnIndex)", "diff": ["- */", "-Point getItemExtent(TableColumn column) {", "-\tTable parent = getParent();", "-\tint columnIndex = column.getIndex();", "-\tPoint extent = new Point(getImageStopX(columnIndex), parent.getItemHeight() - parent.getGridLineWidth());", "-\tGC gc = new GC(parent);", "-\tgc.setFont(getFont());", "-\tString trimmedText = getText(gc, column);", "-", "-\tif (trimmedText != null && trimmedText.length() > 0) {", "-\t\textent.x += gc.stringExtent(trimmedText).x + getTextIndent(columnIndex);", "-\t}", "-\tif (columnIndex == TableColumn.FIRST) {", "-\t\textent.x += SELECTION_PADDING;", "-\t}", "-\tgc.dispose();\t\t", "-\treturn extent;", "-}", "+ */", "+int getPreferredWidth (int columnIndex) {", "+\tGC gc = new GC (parent);", "+\tgc.setFont (getFont (columnIndex));", "+\tint textPaintWidth = gc.textExtent (getText (columnIndex)).x + 2 * MARGIN_TEXT;", "+\tgc.dispose ();", "+\tint result = getTextX (columnIndex) + textPaintWidth + parent.getCellPadding ();\t/* right side cell pad */", "+\tresult -= parent.columns [columnIndex].getX ();", "+\treturn result;", "+}"]}], "num": 18716}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7922efc2dcb5859b1a5e2e7f236011c2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d1ebda67e20eca076732c674088bf368", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Spinner.java", "commitBeforeChange": "48e52aa22d171fa426dd2029dfc554b40adc5e47", "commitAfterChange": "ab395137a9ad910580d0b3cefc99184f207fe751", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 43, "signatureBeforeChange": "  void updateText ()", "signatureAfterChange": "  void updateSelection (int delta)", "diff": ["-void updateText () {", "-\tString valStr = digits == 0 ? value+\"\" : new Double (value/Math.pow(10, digits)).toString();", "-\tint strPtr = createDotNetString (valStr, false);", "-\tOS.TextBox_Text (textHandle, strPtr);", "-\tOS.GCHandle_Free (strPtr);", "+void updateSelection (int delta) { ", "+\tboolean [] parseFail = new boolean [1];", "+\tint value = getSelectionText (parseFail);", "+\tif (parseFail [0]) value = this.value;", "+\tint newValue = value + delta;", "+\tif ((style & SWT.WRAP) != 0) {", "+\t\tif (newValue < min) newValue = max;", "+\t\tif (newValue > max) newValue = min;", "+\t}", "+\tnewValue = Math.min (Math.max (min, newValue), max);", "+\tif (value != newValue) setSelection (newValue, true, true, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8c4562d507059a0803a74ebfcc25123", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 66, "signatureBeforeChange": " \t \tprivate int handleMouseCallback(int nextHandler, int eRefHandle, int whichWindow)", "signatureAfterChange": "  int keyboardProc (int nextHandler, int theEvent, int userData)", "diff": ["+", "+int keyboardProc (int nextHandler, int theEvent, int userData) {", "+\tWidget widget = WidgetTable.get (userData);", "+\tif (widget == null) {", "+\t\tint theWindow = OS.ActiveNonFloatingWindow ();", "+\t\tif (theWindow == 0) return OS.eventNotHandledErr;", "+\t\tint [] theControl = new int [1];", "+\t\tOS.GetKeyboardFocus (theWindow, theControl);", "+\t\tif (theControl [0] == 0) {", "+\t\t\tOS.GetRootControl (theWindow, theControl);", "+\t\t}", "+\t\twidget = WidgetTable.get (theControl [0]);", "+\t}", "+\tif (widget != null) return widget.keyboardProc (nextHandler, theEvent, userData);", "+\treturn OS.eventNotHandledErr;", "+}", "-\t", "-\tprivate int handleMouseCallback(int nextHandler, int eRefHandle, int whichWindow) {", "-\t\tint eventClass= OS.GetEventClass(eRefHandle);", "-\t\tint eventKind= OS.GetEventKind(eRefHandle);", "-\t\t", "-\t\tswitch (eventClass) {", "-\t\t\t", "-\t\tcase OS.kEventClassMouse:", "-\t\t\treturn handleMouseEvent(nextHandler, eRefHandle, eventKind, whichWindow);", "-\t\t", "-\t\tdefault:", "-\t\t\tSystem.out.println(\"handleMouseCallback: unexpected event class: \" + MacUtil.toString(eventClass));", "-\t\t\tbreak;", "-\t\t}", "-\t\treturn OS.eventNotHandledErr;", "-\t}"]}], "num": 57965}
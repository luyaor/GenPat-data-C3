{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c10374d0aba57058998e91432b7bd397", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f67778d801d66399e5eb84cc187d1edd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "22ebc0bfda7d51c576a69d9ad65b1367c74fe002", "commitAfterChange": "b024555b7be59ed9c69f2568310cc99cd0b6720a", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "  LRESULT WM_CHAR (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_CHAR (int wParam, int lParam)", "diff": ["-\t\tcase SWT.CR:", "-\t\t\t/*", "-\t\t\t* Feature in Windows.  Windows sends NM_RETURN from WM_KEYDOWN", "-\t\t\t* instead of using WM_CHAR.  This means that application code", "-\t\t\t* that expects to consume the key press and therefore avoid a", "-\t\t\t* SWT.DefaultSelection event from WM_CHAR will fail.  The fix", "-\t\t\t* is to implement SWT.DefaultSelection in WM_CHAR instead of", "-\t\t\t* using NM_RETURN.", "-\t\t\t*/", "-\t\t\tEvent event = new Event ();", "-\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "-\t\t\tif (hItem != 0) {", "-\t\t\t\tTVITEM tvItem = new TVITEM ();", "-\t\t\t\ttvItem.hItem = hItem;", "-\t\t\t\ttvItem.mask = OS.TVIF_PARAM;", "-\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "-\t\t\t\tevent.item = items [tvItem.lParam];", "-\t\t\t}", "-\t\t\tpostEvent (SWT.DefaultSelection, event);", "-\t\t\t//FALL THROUGH", "-\t\tcase SWT.ESC:", "-\t\tcase ' ':", "-\t\t\treturn LRESULT.ZERO;", "-\t}", "-\treturn result;", "-}", "+\t\tcase ' ': {", "+\t\t\treturn LRESULT.ZERO;", "+\t\tcase SWT.CR: {", "+\t\t\t/*", "+\t\t\t* Feature in Windows.  Windows sends NM_RETURN from WM_KEYDOWN", "+\t\t\t* instead of using WM_CHAR.  This means that application code", "+\t\t\t* that expects to consume the key press and therefore avoid a", "+\t\t\t* SWT.DefaultSelection event from WM_CHAR will fail.  The fix", "+\t\t\t* is to implement SWT.DefaultSelection in WM_CHAR instead of", "+\t\t\t* using NM_RETURN.", "+\t\t\t*/", "+\t\t\tEvent event = new Event ();", "+\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "+\t\t\tif (hItem != 0) {", "+\t\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\t\ttvItem.hItem = hItem;", "+\t\t\t\ttvItem.mask = OS.TVIF_PARAM;", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "+\t\t\t\tevent.item = items [tvItem.lParam];", "+\t\t\t}", "+\t\t\tpostEvent (SWT.DefaultSelection, event);", "+\t\t\treturn LRESULT.ZERO;", "+\t\t}", "+\t\tcase SWT.ESC:", "+\t\t\treturn LRESULT.ZERO;", "+\t}", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "437b62ad02d8ea9edea6025b324d736e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "b8b3d8d333270c82331f79c34684ac5101f04bf4", "commitAfterChange": "f5441d1714ca7f50c8c942b97ca2567450f3ceff", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 54, "signatureBeforeChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["+\t\t/*", "+\t\t* In a multi-select tree, if the user is collapsing a subtree that", "+\t\t* contains selected items, clear the selection from these items and", "+\t\t* issue a selection event.  Only items that are selected and visible", "+\t\t* are cleared.", "+\t\t*/", "+\t\tboolean fixSelection = false, deselected = false;", "+\t\tif ((style & SWT.MULTI) != 0) {", "+\t\t\tif (lpht.hItem != 0 && (lpht.flags & OS.TVHT_ONITEMBUTTON) != 0) {", "+\t\t\t\tint hSelection = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "+\t\t\t\tif (hSelection != 0) {", "+\t\t\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\t\t\ttvItem.mask = OS.TVIF_STATE | OS.TVIF_PARAM;", "+\t\t\t\t\ttvItem.hItem = lpht.hItem;", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "+\t\t\t\t\tif ((tvItem.state & OS.TVIS_EXPANDED) != 0) {", "+\t\t\t\t\t\tfixSelection = true;", "+\t\t\t\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;", "+\t\t\t\t\t\tint hParent = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_PARENT, lpht.hItem);", "+\t\t\t\t\t\tint hLast = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, lpht.hItem);", "+\t\t\t\t\t\tint hNext = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, lpht.hItem);", "+\t\t\t\t\t\twhile (hNext != 0 && hNext != hLast) {", "+\t\t\t\t\t\t\ttvItem.hItem = hNext;", "+\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "+\t\t\t\t\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) != 0) deselected = true;", "+\t\t\t\t\t\t\ttvItem.state = 0;", "+\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);", "+\t\t\t\t\t\t\tif ((hNext = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, hNext)) == 0) break;", "+\t\t\t\t\t\t\tif (hParent == OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_PARENT, hNext)) break;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (fixSelection) ignoreDeselect = ignoreSelect = lockSelection = true;", "+\t\tif (fixSelection) ignoreDeselect = ignoreSelect = lockSelection = false;", "+\t\tif (deselected) {", "+\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\ttvItem.mask = OS.TVIF_PARAM;", "+\t\t\ttvItem.hItem = lpht.hItem;", "+\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "+\t\t\tEvent event = new Event ();", "+\t\t\tevent.item = items [tvItem.lParam];", "+\t\t\tpostEvent (SWT.Selection, event);", "+\t\t}"]}], "num": 18587}
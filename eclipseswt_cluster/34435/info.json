{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf3154eb4b1155ea83621a7054eae776", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a7b4133458fe73c144c38a918934c43", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "8afcdcd7d47e126428894c294ab0932c45f92c03", "commitAfterChange": "0b98cbfc159eac17dba46a5f03afbcf2aa8dfd04", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  static int create32bitDIB (int hBitmap, int alpha, byte [] alphaData, int transparentPixel)", "signatureAfterChange": "  static int create32bitDIB (Image image)", "diff": ["+static int create32bitDIB (Image image) {", "+\tint transparentPixel = -1, alpha = -1, hMask = 0, hBitmap = 0;", "+\tbyte[] alphaData = null;", "+\tswitch (image.type) {", "+\t\tcase SWT.ICON:", "+\t\t\tICONINFO info = new ICONINFO ();", "+\t\t\tOS.GetIconInfo (image.handle, info);", "+\t\t\thBitmap = info.hbmColor;", "+\t\t\thMask = info.hbmMask;", "+\t\t\tbreak;", "+\t\tcase SWT.BITMAP:", "+\t\t\tImageData data = image.getImageData ();", "+\t\t\thBitmap = image.handle;", "+\t\t\talpha = data.alpha;", "+\t\t\talphaData = data.alphaData;", "+\t\t\ttransparentPixel = data.transparentPixel;", "+\t\t\tbreak;", "+\t}", "+\tBITMAP bm = new BITMAP ();", "+\tOS.GetObject (hBitmap, BITMAP.sizeof, bm);", "+\tint imgWidth = bm.bmWidth;", "+\tint imgHeight = bm.bmHeight;", "+\tint hDC = OS.GetDC (0);", "+\tint srcHdc = OS.CreateCompatibleDC (hDC);", "+\tint oldSrcBitmap = OS.SelectObject (srcHdc, hBitmap);", "+\tint memHdc = OS.CreateCompatibleDC (hDC);", "+\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER ();", "+\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;", "+\tbmiHeader.biWidth = imgWidth;", "+\tbmiHeader.biHeight = -imgHeight;", "+\tbmiHeader.biPlanes = 1;", "+\tbmiHeader.biBitCount = (short)32;", "+\tbmiHeader.biCompression = OS.BI_RGB;", "+\tbyte []\tbmi = new byte [BITMAPINFOHEADER.sizeof];", "+\tOS.MoveMemory (bmi, bmiHeader, BITMAPINFOHEADER.sizeof);", "+\tint [] pBits = new int [1];", "+\tint memDib = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "+\tif (memDib == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\tint oldMemBitmap = OS.SelectObject (memHdc, memDib);", "+\tBITMAP dibBM = new BITMAP ();", "+\tOS.GetObject (memDib, BITMAP.sizeof, dibBM);", "+\tint sizeInBytes = dibBM.bmWidthBytes * dibBM.bmHeight;", "+ \tOS.BitBlt (memHdc, 0, 0, imgWidth, imgHeight, srcHdc, 0, 0, OS.SRCCOPY);", "+ \tbyte red = 0, green = 0, blue = 0;", "+ \tif (transparentPixel != -1) {", "+\t\tif (bm.bmBitsPixel <= 8) {", "+\t\t\tbyte [] color = new byte [4];", "+\t\t\tOS.GetDIBColorTable (srcHdc, transparentPixel, 1, color);", "+\t\t\tblue = color [0];", "+\t\t\tgreen = color [1];", "+\t\t\tred = color [2];", "+\t\t} else {", "+\t\t\tswitch (bm.bmBitsPixel) {", "+\t\t\t\tcase 16:", "+\t\t\t\t\tblue = (byte)((transparentPixel & 0x1F) << 3);", "+\t\t\t\t\tgreen = (byte)((transparentPixel & 0x3E0) >> 2);", "+\t\t\t\t\tred = (byte)((transparentPixel & 0x7C00) >> 7);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 24:", "+\t\t\t\t\tblue = (byte)((transparentPixel & 0xFF0000) >> 16);", "+\t\t\t\t\tgreen = (byte)((transparentPixel & 0xFF00) >> 8);", "+\t\t\t\t\tred = (byte)(transparentPixel & 0xFF);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase 32:", "+\t\t\t\t\tblue = (byte)((transparentPixel & 0xFF000000) >>> 24);", "+\t\t\t\t\tgreen = (byte)((transparentPixel & 0xFF0000) >> 16);", "+\t\t\t\t\tred = (byte)((transparentPixel & 0xFF00) >> 8);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+ \t}", "+ \tbyte [] srcData = new byte [sizeInBytes];", "+\tOS.MoveMemory (srcData, pBits [0], sizeInBytes);", "+\tif (hMask != 0) {", "+\t\tOS.SelectObject(srcHdc, hMask);", "+\t\tfor (int y = 0, dp = 0; y < imgHeight; ++y) {", "+\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "+\t\t\t\tif (OS.GetPixel(srcHdc, x, y) != 0) {", "+\t\t\t\t\tsrcData[dp + 3] = (byte)0;", "+\t\t\t\t} else {", "+\t\t\t\t\tsrcData[dp + 3] = (byte)0xFF;", "+\t\t\t\t}", "+\t\t\t\tdp += 4;", "+\t\t\t}", "+\t\t}", "+\t} else if (alpha != -1) {", "+\t\tfor (int y = 0, dp = 0; y < imgHeight; ++y) {", "+\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "+\t\t\t\tsrcData [dp + 3] = (byte)alpha;", "+\t\t\t\tdp += 4;", "+\t\t\t}", "+\t\t}", "+\t} else if (alphaData != null) {", "+\t\tfor (int y = 0, dp = 0, ap = 0; y < imgHeight; ++y) {", "+\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "+\t\t\t\tsrcData [dp + 3] = alphaData [ap++];", "+\t\t\t\tdp += 4;", "+\t\t\t}", "+\t\t}", "+\t} else if (transparentPixel != -1) {", "+\t\tfor (int y = 0, dp = 0; y < imgHeight; ++y) {", "+\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "+\t\t\t\tif (srcData [dp] == blue && srcData [dp + 1] == green && srcData [dp + 2] == red) {", "+\t\t\t\t\tsrcData [dp + 3] = (byte)0;", "+\t\t\t\t} else {", "+\t\t\t\t\tsrcData [dp + 3] = (byte)0xFF;", "+\t\t\t\t}", "+\t\t\t\tdp += 4;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tOS.MoveMemory (pBits [0], srcData, sizeInBytes);", "+\tOS.SelectObject (srcHdc, oldSrcBitmap);", "+\tOS.SelectObject (memHdc, oldMemBitmap);", "+\tOS.DeleteObject (srcHdc);", "+\tOS.DeleteObject (memHdc);", "+\tOS.ReleaseDC (0, hDC);", "+\tif (hBitmap != image.handle && hBitmap != 0) OS.DeleteObject (hBitmap);", "+\tif (hMask != 0) OS.DeleteObject (hMask);", "+\treturn memDib;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61ff6b13eb5c3f5d6bc933d989401a29", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "9a7a23f05c644cb62fddfb0991fcc9f64f0514a5", "commitAfterChange": "37c77a940ee262e41e745195024a2482e016f15b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r Point adjustResizeCursor ()", "signatureAfterChange": "\r \r Point adjustResizeCursor ()", "diff": ["-\t\r", "+\r", "+\r", "+\tint newCursor = 0;\r", "+\tswitch (cursorOrientation) {\r", "+\t\tcase SWT.UP:\r", "+\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZENS);\r", "+\t\t\tbreak;\r", "+\t\tcase SWT.DOWN:\r", "+\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZENS);\r", "+\t\t\tbreak;\r", "+\t\tcase SWT.LEFT:\r", "+\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZEWE);\r", "+\t\t\tbreak;\r", "+\t\tcase SWT.RIGHT:\r", "+\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZEWE);\r", "+\t\t\tbreak;\r", "+\t\tcase SWT.LEFT | SWT.UP:\r", "+\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZENWSE);\r", "+\t\t\tbreak;\r", "+\t\tcase SWT.RIGHT | SWT.DOWN:\r", "+\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZENWSE);\r", "+\t\t\tbreak;\r", "+\t\tcase SWT.LEFT | SWT.DOWN:\r", "+\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZENESW);\r", "+\t\t\tbreak;\r", "+\t\tcase SWT.RIGHT | SWT.UP:\r", "+\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZENESW);\r", "+\t\t\tbreak;\r", "+\t\tdefault:\r", "+\t\t\tnewCursor = OS.LoadCursor (0, OS.IDC_SIZEALL);\r", "+\t\t\tbreak;\r", "+\t}\r", "+\tOS.SetCursor (newCursor);\r", "+\tif (cursor != 0) {\r", "+\t\tOS.DestroyCursor (cursor);\r", "+\t}\r", "+\tcursor = newCursor;\r", "+\t\t\r"]}], "num": 34435}
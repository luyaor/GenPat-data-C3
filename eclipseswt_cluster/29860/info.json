{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07f33ca8c125797a9ff399ce02fef174", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80c11deb89d03c0c91cd3a6ab7cfbe4f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/DialogTab.java", "commitBeforeChange": "96ef7b540ebf07250332ca86dc923e4542c1b770", "commitAfterChange": "3a3b3eae51c5c9d2dc56f640836dc0c23db825a4", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tvoid createButtonSelected(SelectionEvent event)", "signatureAfterChange": " \tvoid createButtonSelected(SelectionEvent event)", "diff": ["-\t\t\tdialog.setRGB (new RGB (100, 100, 100));", "+\t\t\tif (usePreviousResultButton.getSelection()) {", "+\t\t\t\tdialog.setRGB (colorDialogResult);", "+\t\t\t}", "+\t\t\tcolorDialogResult = result;", "+\t\t\tif (usePreviousResultButton.getSelection()) {", "+\t\t\t\tdialog.setFilterPath (directoryDialogResult);", "+\t\t\t}", "+\t\t\tdirectoryDialogResult = result;", "-\t\t\tdialog.setFileName (ControlExample.getResourceString(\"readme_txt\"));", "+\t\t\tif (usePreviousResultButton.getSelection()) {", "+\t\t\t\tdialog.setFileName (fileDialogResult);", "+\t\t\t\tdialog.setFilterIndex(fileDialogIndexResult);", "+\t\t\t}", "+\t\t\ttextWidget.append (\"getFilterIndex() =\" + dialog.getFilterIndex() + Text.DELIMITER);", "-\t\t\ttextWidget.append (\"getFilterIndex() = \" + dialog.getFilterIndex() + Text.DELIMITER + Text.DELIMITER);", "+\t\t\ttextWidget.append (Text.DELIMITER);", "+\t\t\tfileDialogResult = result;", "+\t\t\tfileDialogIndexResult = dialog.getFilterIndex();", "-\t\t\tdialog.setText (ControlExample.getResourceString(\"Title\"));", "+\t\t\tif (usePreviousResultButton.getSelection()) {", "+\t\t\t\tdialog.setFontList (fontDialogFontListResult);", "+\t\t\t\tdialog.setRGB(fontDialogColorResult);", "+\t\t\t}", "+\t\t\tdialog.setText (ControlExample.getResourceString(\"Title\"));", "+\t\t\tfontDialogFontListResult = dialog.getFontList ();", "+\t\t\tfontDialogColorResult = dialog.getRGB();", "+\t\t\tif (usePreviousResultButton.getSelection()) {", "+\t\t\t\tdialog.setPrinterData(printDialogResult);", "+\t\t\t}", "-\t\t\ttextWidget.append (\"getScope() = \" + dialog.getScope() + Text.DELIMITER);", "-\t\t\ttextWidget.append (\"getStartPage() = \" + dialog.getStartPage() + Text.DELIMITER);", "-\t\t\ttextWidget.append (\"getEndPage() = \" + dialog.getEndPage() + Text.DELIMITER);", "-\t\t\ttextWidget.append (\"getPrintToFile() = \" + dialog.getPrintToFile() + Text.DELIMITER);", "-\t\t\t\ttextWidget.append (\"result.fileName = \" + result.fileName + Text.DELIMITER);", "-\t\t\t\ttextWidget.append (\"result.orientation = \" + (result.orientation == PrinterData.LANDSCAPE ? \"PrinterData.LANDSCAPE\" : \"PrinterData.PORTRAIT\") + Text.DELIMITER);", "-\t\t\t\ttextWidget.append (\"result.copyCount = \" + result.copyCount + Text.DELIMITER);", "-\t\t\t\ttextWidget.append (\"result.collate = \" + result.collate + Text.DELIMITER);", "+\t\t\t\ttextWidget.append (\"printerData.scope = \" + (result.scope == PrinterData.PAGE_RANGE ? \"PAGE_RANGE\" : result.scope == PrinterData.SELECTION ? \"SELECTION\" : \"ALL_PAGES\") + Text.DELIMITER);", "+\t\t\t\ttextWidget.append (\"printerData.startPage = \" + result.startPage + Text.DELIMITER);", "+\t\t\t\ttextWidget.append (\"printerData.endPage = \" + result.endPage + Text.DELIMITER);", "+\t\t\t\ttextWidget.append (\"printerData.printToFile = \" + result.printToFile + Text.DELIMITER);", "+\t\t\t\ttextWidget.append (\"printerData.fileName = \" + result.fileName + Text.DELIMITER);", "+\t\t\t\ttextWidget.append (\"printerData.orientation = \" + (result.orientation == PrinterData.LANDSCAPE ? \"LANDSCAPE\" : \"PORTRAIT\") + Text.DELIMITER);", "+\t\t\t\ttextWidget.append (\"printerData.copyCount = \" + result.copyCount + Text.DELIMITER);", "+\t\t\t\ttextWidget.append (\"printerData.collate = \" + result.collate + Text.DELIMITER);", "+\t\t\t\ttextWidget.append (\"printerData.duplex = \" + (result.duplex == PrinterData.DUPLEX_LONG_EDGE ? \"DUPLEX_LONG_EDGE\" : result.duplex == PrinterData.DUPLEX_SHORT_EDGE ? \"DUPLEX_SHORT_EDGE\" : \"NONE\") + Text.DELIMITER);", "+\t\t\tprintDialogResult = result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c752bb4d555b28b0f17a687750cbbd70", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "3d1071088ced6ed6e9f01c8d7208fa00cb52a57a", "commitAfterChange": "a9f618df2b93f8cb19629621c0313294fe974299", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \r void createHandle ()", "signatureAfterChange": "\r \r void createHandle ()", "diff": ["-\t\t/*\r", "-\t\t* Note in WinCE PPC.  CreateMenu cannot insert items of type \r", "-\t\t* separator.  The workaround is to always use CreatePopupMenu.\r", "-\t\t*/\r", "-\t\thandle = OS.IsPPC ? OS.CreatePopupMenu () : OS.CreateMenu();\r", "+\t\tif (OS.IsPPC) {\r", "+\t\t\tint hwndShell = parent.handle;\r", "+\t\t\tSHMENUBARINFO mbi = new SHMENUBARINFO ();\r", "+\t\t\tmbi.cbSize = mbi.sizeof;\r", "+\t\t\tmbi.hwndParent = hwndShell;\r", "+\t\t\tmbi.dwFlags = OS.SHCMBF_HIDDEN;\r", "+\t\t\tmbi.nToolBarId = ID_PPCBAR;\r", "+\t\t\tmbi.hInstRes = OS.GetLibraryHandle ();\r", "+\t\t\tboolean success = OS.SHCreateMenuBar (mbi);\r", "+\t\t\thwndCB = mbi.hwndMB;\r", "+\t\t\tif (!success) error (SWT.ERROR_NO_HANDLES);\r", "+\t\t\t/* Remove the item from the resource file */\r", "+\t\t\tOS.SendMessage (hwndCB, OS.TB_DELETEBUTTON, 0, 0);\r", "+\t\t\treturn;\r", "+\t\t}\r", "+\t\thandle = OS.CreateMenu ();\r", "+\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);\r", "+\t\tif (OS.IsHPC) {\r", "+\t\t\tint hwndShell = parent.handle;\r", "+\t\t\thwndCB = OS.CommandBar_Create (OS.GetModuleHandle (null), hwndShell, 1);\r", "+\t\t\tif (hwndCB == 0) error (SWT.ERROR_NO_HANDLES);\r", "+\t\t\tOS.CommandBar_Show (hwndCB, false);\r", "+\t\t\tOS.CommandBar_InsertMenubarEx (hwndCB, 0, handle, 0);\r", "+\t\t\t/*\r", "+\t\t\t* The command bar hosts the 'close' button when the window does not\r", "+\t\t\t* have a caption.\r", "+\t\t\t*/\r", "+\t\t\tif ((parent.style & SWT.CLOSE) != 0 && (parent.style & SWT.TITLE) == 0) {\r", "+\t\t\t\tOS.CommandBar_AddAdornments (hwndCB, 0, 0);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);\r", "-\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);\r"]}], "num": 29860}
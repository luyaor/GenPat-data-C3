{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5283d10ec9547089f4370f78f10b66d1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76d9dbf0ce9093901c1015eb1ecf3cfa", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "98fc614af4e0736880ddc01f544655cbdad4088c", "commitAfterChange": "3b27b41db1dd3c54eec31645b5eb2d11fe630ed4", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  void generateConstants()", "signatureAfterChange": "  void generateConstants()", "diff": ["-\t\t\t\tNamedNodeMap attributes = node.getAttributes();", "-\t\t\t\tout(\"public static final native int \");", "-\t\t\t\tout(attributes.getNamedItem(\"name\").getNodeValue());", "-\t\t\t\tout(\"();\");", "-\t\t\t\toutln();", "+\t\t\t\tif (getGen(node)) {", "+\t\t\t\t\tNamedNodeMap attributes = node.getAttributes();", "+\t\t\t\t\tString constName = attributes.getNamedItem(\"name\").getNodeValue();", "+\t\t\t\t\tout(\"public static final native int \");", "+\t\t\t\t\tout(constName);", "+\t\t\t\t\tout(\"();\");", "+\t\t\t\t\toutln();", "+//\t\t\t\t\tif (attributes.getNamedItem(\"declared_type\").getNodeValue().equals(\"NSString*\")) {", "+//\t\t\t\t\t\tout(\"public static final NSString \");", "+//\t\t\t\t\t\tout(constName);", "+//\t\t\t\t\t\tout(\"= new NSString(\");", "+//\t\t\t\t\t\tout(constName);", "+//\t\t\t\t\t\tout(\"());\");", "+//\t\t\t\t\t\toutln();", "+//\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb0393cebe57ce326690b8ab15355f45", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "98fc614af4e0736880ddc01f544655cbdad4088c", "commitAfterChange": "3b27b41db1dd3c54eec31645b5eb2d11fe630ed4", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "  void generateSends()", "signatureAfterChange": "  void generateSends()", "diff": ["-//\t\t\t\tNamedNodeMap attributes = node.getAttributes();", "-//\t\t\t\tString name = attributes.getNamedItem(\"name\").getNodeValue();", "-//\t\t\t\tif (getGenerateClass(name)) {", "+\t\t\t\tif (getGen(node)) {", "-\t\t\t\t\t\t\tNode returnNode = getReturnNode(method.getChildNodes());", "-\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\t\t\tbuffer.append(\"public static final native \"); ", "-\t\t\t\t\t\t\tif (returnNode != null && isStruct(returnNode)) {", "-\t\t\t\t\t\t\t\tbuffer.append(\"void objc_msgSend_stret(\");", "-\t\t\t\t\t\t\t\tbuffer.append(getJavaType(returnNode));", "-\t\t\t\t\t\t\t\tbuffer.append(\" result, \");", "-\t\t\t\t\t\t\t} else if (returnNode != null && isFloatingPoint(returnNode)) {", "-\t\t\t\t\t\t\t\tbuffer.append(\"double objc_msgSend_fpret(\");", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tbuffer.append(\"int objc_msgSend(\");", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbuffer.append(\"int id, int sel\");", "-\t\t\t\t\t\t\tNodeList params = method.getChildNodes();", "-\t\t\t\t\t\t\tboolean first = false;", "-\t\t\t\t\t\t\tint count = 0;", "-\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "-\t\t\t\t\t\t\t\tNode param = params.item(k);", "-\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "-\t\t\t\t\t\t\t\t\tif (!first) buffer.append(\", \");", "-\t\t\t\t\t\t\t\t\tif (isStruct(param)) {", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(getJavaType(param));", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(getType(param));", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tfirst = false;", "-\t\t\t\t\t\t\t\t\tbuffer.append(\" arg\");", "-\t\t\t\t\t\t\t\t\tbuffer.append(String.valueOf(count++));", "+\t\t\t\t\t\t\tif (getGen(method)) {", "+\t\t\t\t\t\t\t\tNode returnNode = getReturnNode(method.getChildNodes());", "+\t\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\t\t\t\t\tbuffer.append(\"public static final native \"); ", "+\t\t\t\t\t\t\t\tif (returnNode != null && isStruct(returnNode)) {", "+\t\t\t\t\t\t\t\t\tbuffer.append(\"void objc_msgSend_stret(\");", "+\t\t\t\t\t\t\t\t\tbuffer.append(getJavaType(returnNode));", "+\t\t\t\t\t\t\t\t\tbuffer.append(\" result, \");", "+\t\t\t\t\t\t\t\t} else if (returnNode != null && isFloatingPoint(returnNode)) {", "+\t\t\t\t\t\t\t\t\tbuffer.append(\"double objc_msgSend_fpret(\");", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tbuffer.append(\"int objc_msgSend(\");", "+\t\t\t\t\t\t\t\tbuffer.append(\"int id, int sel\");", "+\t\t\t\t\t\t\t\tNodeList params = method.getChildNodes();", "+\t\t\t\t\t\t\t\tboolean first = false;", "+\t\t\t\t\t\t\t\tint count = 0;", "+\t\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "+\t\t\t\t\t\t\t\t\tNode param = params.item(k);", "+\t\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "+\t\t\t\t\t\t\t\t\t\tif (!first) buffer.append(\", \");", "+\t\t\t\t\t\t\t\t\t\tif (isStruct(param)) {", "+\t\t\t\t\t\t\t\t\t\t\tbuffer.append(getJavaType(param));", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tbuffer.append(getType(param));", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tfirst = false;", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(\" arg\");", "+\t\t\t\t\t\t\t\t\t\tbuffer.append(String.valueOf(count++));", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tbuffer.append(\");\");", "+\t\t\t\t\t\t\t\tset.add(buffer.toString());", "-\t\t\t\t\t\t\tbuffer.append(\");\");", "-\t\t\t\t\t\t\tset.add(buffer.toString());", "-//\t\t\t\t}", "+\t\t\t\t}"]}], "num": 9941}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4feee396a23a7e42288e039f2b2078e8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a66f7343f1eea4ab04cf93a49f456104", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleClientSite.java", "commitBeforeChange": "647ee8ac0b4674688a64286f665d0bc51c0718e8", "commitAfterChange": "8c113a426e5f05549192616bd0df00498451eac3", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 90, "signatureBeforeChange": " private boolean saveToStorageFile(File file)", "signatureAfterChange": " private boolean saveToStorageFile(File file)", "diff": ["-\tint /*long*/[] address = new int /*long*/[1];", "-\tif (objIOleObject.QueryInterface(COM.IIDIPersistFile, address) == COM.S_OK) {", "-\t\tString fileName = null; ", "-\t\tIPersistFile persistFile = new IPersistFile(address[0]);", "-\t\tint /*long*/[] ppszFileName = new int /*long*/[1];", "-\t\tif (persistFile.GetCurFile(ppszFileName) == COM.S_OK) {", "-\t\t\tint /*long*/ pszFileName = ppszFileName [0];", "-\t\t    int length = OS.wcslen(pszFileName);", "-\t\t    char[] buffer = new char[length];", "-\t\t    OS.MoveMemory(buffer, pszFileName, length * 2);", "-\t\t    fileName = new String(buffer, 0, length);", "-\t\t    // Doc says to use IMalloc::Free, but CoTaskMemFree() does the same ", "-\t\t    COM.CoTaskMemFree(pszFileName);", "-\t\t}", "-\t\tint result;", "-\t\tString newFile = file.getAbsolutePath();", "-\t\tif (fileName != null && fileName.equalsIgnoreCase(newFile)) {", "-\t\t\tresult = persistFile.Save(0, false);", "-\t\t} else {", "-\t\t\tint length = newFile.length();", "-\t\t\tchar[] buffer = new char[length + 1];", "-\t\t\tnewFile.getChars(0, length, buffer, 0);", "-\t\t\tint /*long*/ lpszNewFile = COM.CoTaskMemAlloc(buffer.length * 2);", "-\t\t\tCOM.MoveMemory(lpszNewFile, buffer, buffer.length * 2);", "-\t\t\tresult = persistFile.Save(lpszNewFile, false);", "-\t\t\tCOM.CoTaskMemFree(lpszNewFile);", "-\t\t}", "-\t\tpersistFile.Release();", "-\t\tif (result == COM.S_OK) return true;", "-\t}", "-\t", "+\tint /*long*/[] address = new int /*long*/[1];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f337a51cba1511b03ffd46b439f394a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "5a1722e7ed2ad9d5a4489af845cf0419502b0fda", "commitAfterChange": "13fdd1d635c82d6269b098a4008efefeaf88b0d2", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 68, "signatureBeforeChange": "  boolean shouldChangeTextInRange_replacementString(int id, int sel, int affectedCharRange, int replacementString)", "signatureAfterChange": "  boolean shouldChangeTextInRange_replacementString(int id, int sel, int affectedCharRange, int replacementString)", "diff": ["-\t\tString text = new NSString(replacementString).getString();", "+\t\tString string = new NSString(replacementString).getString();", "-\t\tString newText = verifyText(text, (int)/*64*/range.location, (int)/*64*/(range.location+range.length), currentEvent);", "+\t\tString newText = verifyText(string, (int)/*64*/range.location, (int)/*64*/(range.location+range.length), currentEvent);", "-\t\tif (text != newText) {", "-\t\t\tinsertEditText(newText);", "+\t\tif (!string.equals(newText)) {", "+\t\t\tint length = newText.length();", "+\t\t\tPoint selection = getSelection();", "+\t\t\tif (textLimit != LIMIT) {", "+\t\t\t\tint charCount = getCharCount();", "+\t\t\t\tif (charCount - (selection.y - selection.x) + length > textLimit) {", "+\t\t\t\t\tlength = textLimit - charCount + (selection.y - selection.x);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tchar [] buffer = new char [length];", "+\t\t\tnewText.getChars (0, buffer.length, buffer, 0);", "+\t\t\tNSString nsstring = NSString.stringWithCharacters (buffer, buffer.length);", "+\t\t\tNSText fieldEditor = ((NSTextField) view).currentEditor ();", "+\t\t\tfieldEditor.replaceCharactersInRange (fieldEditor.selectedRange (), nsstring);", "+\t\t\ttext = fieldEditor.string().getString();", "+\t\t\tsendEvent (SWT.Modify);", "-\t\t}", "-\t\tif (!result) sendEvent (SWT.Modify);", "+\t\t} ", "+\t}", "+\tif (result) {", "+\t\tchar[] chars = new char[text.length()];", "+\t\ttext.getChars(0, chars.length, chars, 0);", "+\t\tNSMutableString mutable = (NSMutableString) NSMutableString.stringWithCharacters(chars, chars.length);", "+\t\tmutable.replaceCharactersInRange(range, new NSString(replacementString));", "+\t\ttext = mutable.getString();", "+\t\tselectionRange = null;"]}], "num": 57896}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5ab90abf51fec210eeeb9ec171a4491", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0164b7b99d2de90ae439f7411b16ce7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "6d671179e56122bf4c75081a96a44e45b06a5b27", "commitAfterChange": "33615efba6b3b14d1b8ee0928c8a1f12f629315a", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 21, "signatureBeforeChange": "  Point minimumSize (int wHint, int Hint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+", "+public Point computeSize (int wHint, int hHint, boolean changed) {", "+\tPoint size = super.computeSize (wHint, hHint, changed);", "+\tif (toolBar != null) {", "+\t\tif (wHint == SWT.DEFAULT && toolBar.itemCount > 0) {", "+\t\t\tPoint tbSize = toolBar.computeSize (SWT.DEFAULT, SWT.DEFAULT);", "+\t\t\tsize.x = Math.max (tbSize.x, size.x);", "+\t\t}", "+\t}", "+\treturn size;", "-", "-Point minimumSize (int wHint, int Hint, boolean changed) {", "-\t// minimumSize is used by computeSize() to figure out how big the view", "-\t// (or, in this case, the content view of the Shell) should be.", "-\t// An NSToolbar does not contribute to the content area, but must be", "-\t// accounted for. If the shell has a toolbar but no other children", "-\t// this will return the width of the toolbar and a height of 1", "-\tControl [] children = _getChildren ();", "-\tint width = 0, height = 0;", "-\tfor (int i=0; i<children.length; i++) {", "-\t\tRectangle rect = children [i].getBounds ();", "-\t\twidth = Math.max (width, rect.x + rect.width);", "-\t\tif (children[i] != toolBar)\t{", "-\t\t\theight = Math.max (height, rect.y + rect.height);", "-\t\t} else {", "-\t\t\theight = Math.max (height, 1);", "-\t\t}", "-\t}", "-\treturn new Point (width, height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc02f3ca9ad6f1fb325336b4d7f66558", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 4, "signatureBeforeChange": " void recomputeTextWidths (GC gc)", "signatureAfterChange": " void calculateVisibleItemCount()", "diff": ["+ */", "+void calculateVisibleItemCount() {", "+\tVector children;", "+\tTreeItem2 child;", "+\tint visibleItemCount = 0;", "+\t", "+\t// check isExpanded field directly for performance", "+\tif (internalGetExpanded() == true) {", "+\t\tchildren = getChildren();", "+\t\tvisibleItemCount = children.size();", "+\t\tfor (int i = 0; i < children.size(); i++) {", "+\t\t\tchild = (TreeItem2) children.elementAt(i);", "+\t\t\tvisibleItemCount += child.getVisibleItemCount();", "+\t\t}", "+\t}", "+\tsetVisibleItemCount(visibleItemCount);", "+\tcalculateVisibleItemCountParent();", "+}", "-}", "-void recomputeTextWidths (GC gc) {", "-\ttextWidths = new int [texts.length];", "-\tFont oldFont = gc.getFont ();", "-\tfor (int i = 0; i < texts.length; i++) {", "-\t\tString value = texts [i];", "-\t\tif (value != null) {", "-\t\t\tboolean fontChanged = false;", "-\t\t\tFont font = getFont (i);", "-\t\t\tif (!font.equals (oldFont)) {", "-\t\t\t\tgc.setFont (font);", "-\t\t\t\tfontChanged = true;", "-\t\t\t}", "-\t\t\ttextWidths[i] = gc.textExtent (value).x;", "-\t\t\tif (fontChanged) gc.setFont (oldFont);", "-\t\t}", "-\t}", "-}"]}], "num": 542}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d4c81ea04d6b3e210fd6c84378f2fb6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca9fa5d7b232911220769f7d5b36b244", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "3ba419e0c1ded4c75bf94b37412b839b171784a4", "commitAfterChange": "af43cd1b0d9f0a39c6d6a427843a7b90d67c3f9d", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "  public boolean execute (String script)", "signatureAfterChange": "  public boolean execute (String script)", "diff": ["+\t/* ", "+\t * Since the script is flattened to a single line (possibly containing", "+\t * \\n and/or \\r characters), a line comment ('//') results in all", "+\t * subsequent content being interpreted as comment text.  To work around", "+\t * this, pre-process the script to remove all line comments. ", "+\t */", "+\tString LINE_COMMENT = \"//\"; //$NON-NLS-1$", "+\tint index = script.indexOf (LINE_COMMENT);", "+\twhile (index != -1) {", "+\t\tint endIndex1 = script.indexOf ('\\r', index);", "+\t\tint endIndex2 = script.indexOf ('\\n', index);", "+\t\tint endIndex = script.length ();", "+\t\tif (endIndex1 != -1) endIndex = endIndex1;", "+\t\tif (endIndex2 != -1) endIndex = Math.min (endIndex, endIndex2);", "+\t\tscript = script.substring (0, index) + script.substring (endIndex);", "+\t\tindex = script.indexOf (LINE_COMMENT, index);", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44253d48b473fea5e5ee2c61e2d82da1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "f428c4a2986fde1b4a4fc29a3f0cfb32a0967d42", "commitAfterChange": "b6f3e62de0eabd760aa0ef40883db2f2b3051dc5", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "  public boolean execute (String script)", "signatureAfterChange": "  public boolean execute (String script)", "diff": ["-\t/* ", "-\t * Since the script is flattened to a single line (possibly containing", "-\t * \\n and/or \\r characters), a line comment ('//') results in all", "-\t * subsequent content being interpreted as comment text.  To work around", "-\t * this, pre-process the script to remove all line comments. ", "-\t */", "-\tString LINE_COMMENT = \"//\"; //$NON-NLS-1$", "-\tint index = script.indexOf (LINE_COMMENT);", "-\twhile (index != -1) {", "-\t\tint endIndex1 = script.indexOf ('\\r', index);", "-\t\tint endIndex2 = script.indexOf ('\\n', index);", "-\t\tint endIndex = script.length ();", "-\t\tif (endIndex1 != -1) endIndex = endIndex1;", "-\t\tif (endIndex2 != -1) endIndex = Math.min (endIndex, endIndex2);", "-\t\tscript = script.substring (0, index) + script.substring (endIndex);", "-\t\tindex = script.indexOf (LINE_COMMENT, index);", "-\t}", "-"]}], "num": 37646}
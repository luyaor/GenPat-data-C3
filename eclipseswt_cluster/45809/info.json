{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0167903b8c30dd62c71fc698653ebb63", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4be278cd6245c2ad29688894027db5b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "f4bb8ef7d86d4b06d34d232ac624ae216be4183a", "commitAfterChange": "358e077459326bfde3a675b949aa20349d21bc3d", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 119, "signatureBeforeChange": "  void setTextField(int fieldName, int value, boolean commit, boolean adjust)", "signatureAfterChange": "  void setTextField (int fieldName, int value, boolean commitInternalDataStructure, boolean adjustDisplayedFormatting)", "diff": ["-void setTextField(int fieldName, int value, boolean commit, boolean adjust) {", "-\tif (commit) {", "-\t\tint max = calendar.getActualMaximum(fieldName);", "-\t\tint min = calendar.getActualMinimum(fieldName);", "-\t\tif (fieldName == Calendar.YEAR) {", "-\t\t\tmax = MAX_YEAR;", "-\t\t\tmin = MIN_YEAR;", "-\t\t\t/* Special case: convert 1 or 2-digit years into reasonable 4-digit years. */", "-\t\t\tint currentYear = Calendar.getInstance().get(Calendar.YEAR);", "-\t\t\tint currentCentury = (currentYear / 100) * 100;", "-\t\t\tif (value < (currentYear + 30) % 100) value += currentCentury;", "-\t\t\telse if (value < 100) value += currentCentury - 100;", "-\t\t}", "-\t\tif (value > max) value = min; // wrap", "-\t\tif (value < min) value = max; // wrap", "-\tint start = fieldIndices[currentField].x;", "-\tint end = fieldIndices[currentField].y;", "-\ttext.setSelection(start, end);", "-\tString newValue = formattedStringValue(fieldName, value, adjust);", "-\tStringBuffer buffer = new StringBuffer(newValue);", "-\t/* Convert leading 0's into spaces. */", "-\tint prependCount = end - start - buffer.length();", "-\tfor (int i = 0; i < prependCount; i++) {", "-\t\tswitch (fieldName) {", "-\t\t\tcase Calendar.MINUTE:", "-\t\t\tcase Calendar.SECOND:", "-\t\t\t\tbuffer.insert(0, 0);", "-\t\t\t\tbreak;", "-\t\t\tdefault:", "-\t\t\t\tbuffer.insert(0, ' ');", "-\t\t\t\tbreak;", "-\t\t}", "-\t}\t\t", "-\tnewValue = buffer.toString();", "-\tignoreVerify = true;", "-\ttext.insert(newValue);", "-\tignoreVerify = false;", "-\tselectField(currentField);", "-\tif (commit) setField(fieldName, value);", "+", "+void setTextField (int fieldName, int value, boolean commitInternalDataStructure, boolean adjustDisplayedFormatting) {", "+\tint start = fieldIndices[currentField].x;", "+\tint end = fieldIndices[currentField].y;", "+\tsetSelection (start, end);", "+\tif (commitInternalDataStructure) {", "+\t\tint validValue = validateValueBounds (fieldName, value);", "+\t\tsetFieldOfInternalDataStructure (fieldName, validValue);", "+\t\tupdateControl ();", "+\t} else {", "+\t\tString newValue = formattedStringValue (fieldName, value, adjustDisplayedFormatting);", "+\t\tnewValue = padWithZeros (start, end, newValue);", "+\t\treplaceCurrentlySelectedTextRegion (newValue);", "+\t}", "+\tselectField (currentField);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84728bb3bfa0e3140edcea7ed6ef789b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "d8c7ac1c238569192a4106f29243a448a4e0192d", "commitAfterChange": "1c8d6d064e4a8a70316f776a21806c7dda140423", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " public void setOrientation (int orientation)", "signatureAfterChange": " public void setOrientation (int orientation)", "diff": ["-\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {", "-\t\tcheckWidget();", "-\t\tint flags = SWT.RIGHT_TO_LEFT | SWT.LEFT_TO_RIGHT;", "-\t\tif ((orientation & flags) == 0 || (orientation & flags) == flags) return;", "-\t\tstyle &= ~flags;", "-\t\tstyle |= orientation & flags;", "-\t\tint dir = (orientation & SWT.RIGHT_TO_LEFT) != 0 ? OS.GTK_TEXT_DIR_RTL : OS.GTK_TEXT_DIR_LTR;", "-\t\tOS.gtk_widget_set_direction (fixedHandle, dir);", "-\t\tOS.gtk_widget_set_direction (handle, dir);", "-\t\tif (entryHandle != 0) OS.gtk_widget_set_direction (entryHandle, dir);", "-\t\tif (listHandle != 0) {", "-\t\t\tOS.gtk_widget_set_direction (listHandle, dir);", "-\t\t\tint /*long*/ itemsList = OS.gtk_container_get_children (listHandle);", "-\t\t\tif (itemsList != 0) {", "-\t\t\t\tint count = OS.g_list_length (itemsList);", "-\t\t\t\tfor (int i=count - 1; i>=0; i--) {", "-\t\t\t\t\tint /*long*/ widget = OS.gtk_bin_get_child (OS.g_list_nth_data (itemsList, i));", "-\t\t\t\t\tOS.gtk_widget_set_direction (widget, dir);", "-\t\t\t\t}", "-\t\t\t\tOS.g_list_free (itemsList);", "-\t\t\t}", "-\t\t}", "-\t\tif (cellHandle != 0) OS.gtk_widget_set_direction (cellHandle, dir);", "-\t\tif (popupHandle != 0) OS.gtk_container_forall (popupHandle, display.setDirectionProc, dir);", "-\t}", "+\tsuper.setOrientation (orientation);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0eb66785a2af38f5603e0bcada731393", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "e49d876ec140d7ebc28625e48df185a92ae2e105", "commitAfterChange": "f387cedab0a11fb8c290dcad92bd0503c5f0facb", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["-\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {", "-\t} else {", "-\t\thandle = OS.gtk_combo_new ();", "-\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tOS.gtk_container_add (fixedHandle, handle);", "-\t\tGtkCombo combo = new GtkCombo ();", "-\t\tOS.memmove (combo, handle);", "-\t\tentryHandle = combo.entry;", "-\t\tlistHandle = combo.list;", "-\t\t", "-\t\tif (OS.GTK_VERSION < OS.VERSION (2, 4, 0)) {", "-\t\t\tint /*long*/ parentHandle = 0;", "-\t\t\tint /*long*/ temp = listHandle;", "-\t\t\twhile ((temp = OS.gtk_widget_get_parent(temp)) != 0) {", "-\t\t\t\tparentHandle = temp;", "-\t\t\t}", "-\t\t\tpopupHandle = parentHandle;", "-\t\t\tif (popupHandle != 0) {", "-\t\t\t\tint /*long*/ modalGroup = getShell().modalGroup;", "-\t\t\t\tif (modalGroup != 0) {", "-\t\t\t\t\tOS.gtk_window_group_add_window (modalGroup, popupHandle);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t/*", "-\t\t* Feature in GTK.  There is no API to query the arrow", "-\t\t* handle from a combo box although it is possible to", "-\t\t* get the list and text field.  The arrow handle is needed", "-\t\t* to hook events.  The fix is to find the first child that is", "-\t\t* not the entry or list and assume this is the arrow handle.", "-\t\t*/", "-\t\tint /*long*/ list = OS.gtk_container_get_children (handle);", "-\t\tif (list != 0) {", "-\t\t\tint i = 0, count = OS.g_list_length (list);", "-\t\t\twhile (i<count) {", "-\t\t\t\tint /*long*/ childHandle = OS.g_list_nth_data (list, i);", "-\t\t\t\tif (childHandle != entryHandle && childHandle != listHandle) {", "-\t\t\t\t\tbuttonHandle = childHandle;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\ti++;", "-\t\t\t}", "-\t\t\tOS.g_list_free (list);", "-\t\t}", "-\t\t", "-\t\tboolean editable = (style & SWT.READ_ONLY) == 0;", "-\t\tOS.gtk_editable_set_editable (entryHandle, editable);", "-\t\tOS.gtk_combo_disable_activate (handle);", "-\t\tOS.gtk_combo_set_case_sensitive (handle, true);", "-\t}"]}], "num": 45809}
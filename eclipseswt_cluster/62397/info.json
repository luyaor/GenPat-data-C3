{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba408cd2eb0ea4de7fdeb1e7f912f460", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dabb460ecdb59422ce09939bfc994c90", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "4ef51dfe2ffecc59d5fe9c7cb2f4cd3516b4c0b2", "commitAfterChange": "b582abcbb5af9e9e8a0d429cf605c4541967d6dc", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "\t  int kEventControlTrack (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "\t  int kEventControlTrack (int nextHandler, int theEvent, int userData)", "diff": ["-//\tif (isEnabledModal ()) sendMouseEvent (SWT.MouseMove, theEvent);", "-\treturn OS.eventNotHandledErr;", "+\tint result = super.kEventControlTrack (nextHandler, theEvent, userData);", "+\tif (result == OS.noErr) return result;", "+\t/*", "+\t* Feature in the Macintosh.  Some controls call TrackControl() to track", "+\t* the mouse.  Unfortunately, mouse move events and the mouse up events are", "+\t* consumed.  The fix is to call the default handler and send a fake mouse up", "+\t* when tracking is finished if the mouse event was consumed.", "+\t* ", "+\t* NOTE: No mouse move events are sent while tracking.  There is no", "+\t* fix for this at this time.", "+\t*/", "+\tdisplay.grabControl = null;", "+\tdisplay.runDeferredEvents ();", "+\tint oldChord = OS.GetCurrentEventButtonState ();", "+\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "+\tint newChord = OS.GetCurrentEventButtonState ();", "+\tif (newChord != oldChord) {", "+\t\tint [] masks = {OS.kEventClassMouse, OS.kEventMouseUp};", "+\t\tint mouseUpEvent = OS.AcquireFirstMatchingEventInQueue (OS.GetCurrentEventQueue (), masks.length, masks, OS.kEventQueueOptionsNone);", "+\t\tif (mouseUpEvent != 0) {", "+\t\t\tOS.ReleaseEvent (mouseUpEvent);", "+\t\t} else {", "+\t\t\torg.eclipse.swt.internal.carbon.Point outPt = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\tOS.GetGlobalMouse (outPt);", "+\t\t\tRect rect = new Rect ();", "+\t\t\tint window = OS.GetControlOwner (handle);", "+\t\t\tint x, y;", "+\t\t\tif (OS.HIVIEW) {", "+\t\t\t\tCGPoint pt = new CGPoint ();", "+\t\t\t\tpt.x = outPt.h;", "+\t\t\t\tpt.y = outPt.v;", "+\t\t\t\tOS.HIViewConvertPoint (pt, 0, handle);", "+\t\t\t\tx = (int) pt.x;", "+\t\t\t\ty = (int) pt.y;", "+\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowStructureRgn, rect);", "+\t\t\t} else {", "+\t\t\t\tOS.GetControlBounds (handle, rect);", "+\t\t\t\tx = outPt.h - rect.left;", "+\t\t\t\ty = outPt.v - rect.top;", "+\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\t\t\t}", "+\t\t\tx -= rect.left;", "+\t\t\ty -=  rect.top;", "+\t\t\tshort [] button = new short [1];", "+\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button);", "+\t\t\tint modifiers = OS.GetCurrentEventKeyModifiers ();", "+\t\t\tsendMouseEvent (SWT.MouseUp, button [0], display.clickCount, false, newChord, (short)x, (short)y, modifiers);", "+\t\t}", "+\t}", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25ff6579825a034d2735ee36778df162", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "257d61e9439d7943ecdc8704cdc26b87077b747e", "commitAfterChange": "735e9a9bdbb6a114195dba9738a0d9f8f6b1edcf", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void drawString (String string, int x, int y, boolean isTransparent)", "signatureAfterChange": " public void drawString (String string, int x, int y, boolean isTransparent)", "diff": ["-\t\tOS.PgDrawText(buffer, buffer.length, (short)x, (short)y, drawFlags);", "+\t\tif (!data.xorMode) {", "+\t\t\tOS.PgDrawText(buffer, buffer.length, (short)x, (short)y, drawFlags);", "+\t\t} else {", "+\t\t\tif (isTransparent) {", "+\t\t\t\tPhRect_t rect = new PhRect_t();", "+\t\t\t\tOS.PfExtentText(rect, null, data.font, buffer, buffer.length);", "+\t\t\t\tshort width = (short)(rect.lr_x - rect.ul_x + 1);", "+\t\t\t\tshort height = (short)(rect.lr_y - rect.ul_y + 1);", "+\t\t\t\tint image = OS.PhCreateImage(null, width, height, OS.Pg_IMAGE_DIRECT_888, 0, 0, 0);", "+\t\t\t\tPhDim_t dim = new PhDim_t();", "+\t\t\t\tdim.w = width;", "+\t\t\t\tdim.h = height;", "+\t\t\t\tPhPoint_t point = new PhPoint_t();", "+\t\t\t\tint pmMC = OS.PmMemCreateMC(image, dim, point);", "+\t\t\t\tif (pmMC == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tint prevCont = OS.PmMemStart(pmMC);", "+\t\t\t\tOS.PgSetTextColor(data.foreground);", "+\t\t\t\tOS.PgSetFont(data.font);", "+\t\t\t\tOS.PgDrawText(buffer, buffer.length, (short)0, (short)0, drawFlags);", "+\t\t\t\tOS.PmMemFlush(pmMC, image);", "+\t\t\t\tOS.PmMemStop(pmMC);", "+\t\t\t\tOS.PhDCSetCurrent(prevCont);", "+\t\t\t\tOS.PmMemReleaseMC(pmMC);", "+\t\t\t\tpoint.x = (short)x;", "+\t\t\t\tpoint.y = (short)y;", "+\t\t\t\tPhImage_t phImage = new PhImage_t();", "+\t\t\t\tOS.memmove(phImage, image, PhImage_t.sizeof);", "+\t\t\t\tOS.PgDrawImage(phImage.image, phImage.type, point, dim, phImage.bpl, 0);", "+\t\t\t\tphImage.flags = OS.Ph_RELEASE_IMAGE_ALL;", "+\t\t\t\tOS.memmove(image, phImage, PhImage_t.sizeof);", "+\t\t\t\tOS.PhReleaseImage(image);", "+\t\t\t\tOS.free(image);", "+\t\t\t} else {", "+\t\t\t\tOS.PgSetTextXORColor(data.foreground, data.background);", "+\t\t\t\tOS.PgSetDrawMode(OS.Pg_DrawModeS);", "+\t\t\t\tOS.PgDrawText(buffer, buffer.length, (short)x, (short)y, drawFlags);", "+\t\t\t\tdirtyBits |= DIRTY_XORMODE | DIRTY_FOREGROUND;\t\t\t\t", "+\t\t\t}", "+\t\t}"]}], "num": 62397}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f86d12bfc556537485d82a86a7b1c33", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ead79d447867e6f904b2b42a0f13fe1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 41, "signatureBeforeChange": " void doArrowDown (int stateMask)", "signatureAfterChange": " static void initializeImageData()", "diff": ["-}", "-void doArrowDown (int stateMask) {", "-\tif ((stateMask & SWT.SHIFT) == 0 && (stateMask & SWT.CTRL) == 0) {", "-\t\tint newFocusIndex = focusItem.availableIndex + 1;", "-\t\tif (newFocusIndex == availableItems.length) return; \t/* at bottom */", "-\t\tselectItem(availableItems[newFocusIndex], false);", "-\t\tsetFocusItem(availableItems[newFocusIndex], true);", "-\t\tredrawItem(newFocusIndex);", "-\t\tshowItem(availableItems[newFocusIndex]);", "-\t\tEvent newEvent = new Event();", "-\t\tnewEvent.item = this;", "-\t\tsendEvent(SWT.Selection, newEvent);", "-\t\treturn;", "-\t}", "-\tif ((style & SWT.SINGLE) != 0) {", "-\t\tif ((stateMask & SWT.CTRL) != 0) {", "-\t\t\tint visibleItemCount = (getClientArea().height - getHeaderHeight()) / itemHeight;", "-\t\t\tif (availableItems.length <= topIndex + visibleItemCount) return;\t/* at bottom */", "-\t\t\ttopIndex++;", "-\t\t\tgetVerticalBar().setSelection(topIndex);", "-\t\t\tRectangle clientArea = getClientArea();", "-\t\t\tGC gc = new GC(this);", "-\t\t\tgc.copyArea(", "-\t\t\t\t0, 0,", "-\t\t\t\tclientArea.width, clientArea.height,", "-\t\t\t\t0, -itemHeight);", "-\t\t\tgc.dispose();", "-\t\t\treturn;", "-\t\t}", "-\t\tint newFocusIndex = focusItem.availableIndex + 1;", "-\t\tif (newFocusIndex == availableItems.length) return; \t/* at bottom */", "-\t\tselectItem(availableItems[newFocusIndex], false);", "-\t\tsetFocusItem(availableItems[newFocusIndex], true);", "-\t\tredrawItem(newFocusIndex);", "-\t\tshowItem(availableItems[newFocusIndex]);", "-\t\tEvent newEvent = new Event();", "-\t\tnewEvent.item = this;", "-\t\tsendEvent(SWT.Selection, newEvent);", "-\t\treturn;", "-\t}", "-\t/* SWT.MULTI */", "-\tif ((stateMask & SWT.CTRL) != 0) {", "-\t\tif ((stateMask & SWT.SHIFT) != 0) {", "-\t\t\tint visibleItemCount = (getClientArea().height - getHeaderHeight()) / itemHeight;", "-\t\t\tif (availableItems.length <= topIndex + visibleItemCount) return;\t/* at bottom */", "-\t\t\ttopIndex++;", "-\t\t\tgetVerticalBar().setSelection(topIndex);", "-\t\t\tRectangle clientArea = getClientArea();", "-\t\t\tGC gc = new GC(this);", "-\t\t\tgc.copyArea(", "-\t\t\t\t0, 0,", "-\t\t\t\tclientArea.width, clientArea.height,", "-\t\t\t\t0, -itemHeight);", "-\t\t\tgc.dispose();", "-\t\t\treturn;", "-\t\t}", "-\t\tint focusIndex = focusItem.availableIndex; ", "-\t\tif (focusIndex == availableItems.length - 1) return;\t/* at bottom */", "-\t\tTreeItem2 newFocusItem = availableItems[focusIndex + 1];", "-\t\tsetFocusItem(newFocusItem, true);", "-\t\tshowItem(newFocusItem);", "-\t\tredrawItem(newFocusItem.availableIndex);", "-\t\treturn;", "-\t}", "-\tint newFocusIndex = focusItem.availableIndex + 1;", "-\tif (newFocusIndex == availableItems.length) return; \t/* at bottom */", "-\tif (anchorItem == null) anchorItem = focusItem;", "-\tselectItem(availableItems[newFocusIndex], true);", "-\tsetFocusItem(availableItems[newFocusIndex], true);", "-\tredrawItem(newFocusIndex);", "-\tshowItem(availableItems[newFocusIndex]);", "-\tEvent newEvent = new Event();", "-\tnewEvent.item = this;", "-\tsendEvent(SWT.Selection, newEvent);", "-}", "+ */", "+static void initializeImageData() {", "+\tPaletteData fourBit = new PaletteData(", "+\t\tnew RGB[] {new RGB(0, 0, 0), new RGB (128, 0, 0), new RGB (0, 128, 0), new RGB (128, 128, 0), new RGB (0, 0, 128), new RGB (128, 0, 128), new RGB (0, 128, 128), new RGB (128, 128, 128), new RGB (192, 192, 192), new RGB (255, 0, 0), new RGB (0, 255, 0), new RGB (255, 255, 0), new RGB (0, 0, 255), new RGB (255, 0, 255), new RGB (0, 255, 255), new RGB (255, 255, 255)});", "+\t", "+\tCollapsedImageData = new ImageData(", "+\t\t9, 9, 4, \t\t\t\t\t\t\t\t\t\t// width, height, depth", "+\t\tfourBit, 4,", "+\t\tnew byte[] {119, 119, 119, 119, 112, 0, 0, 0, 127, -1, -1, -1, 112, 0, 0, 0, 127, -1, 15, -1, 112, 0, 0, 0, 127, -1, 15, -1, 112, 0, 0, 0, 127, 0, 0, 15, 112, 0, 0, 0, 127, -1, 15, -1, 112, 0, 0, 0, 127, -1, 15, -1, 112, 0, 0, 0, 127, -1, -1, -1, 112, 0, 0, 0, 119, 119, 119, 119, 112, 0, 0, 0});", "+\tCollapsedImageData.transparentPixel = 15;\t\t\t// use white for transparency", "+\tExpandedImageData = new ImageData(", "+\t\t9, 9, 4, \t\t\t\t\t\t\t\t\t\t// width, height, depth", "+\t\tfourBit, 4,", "+\t\tnew byte[] {119, 119, 119, 119, 112, 0, 0, 0, 127, -1, -1, -1, 112, 0, 0, 0, 127, -1, -1, -1, 112, 0, 0, 0, 127, -1, -1, -1, 112, 0, 0, 0, 127, 0, 0, 15, 112, 0, 0, 0, 127, -1, -1, -1, 112, 0, 0, 0, 127, -1, -1, -1, 112, 0, 0, 0, 127, -1, -1, -1, 112, 0, 0, 0, 119, 119, 119, 119, 112, 0, 0, 0});", "+\tExpandedImageData.transparentPixel = 15;\t\t\t// use white for transparency", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "393092b564edb3c4408377e24b2bf488", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 9, "signatureBeforeChange": " void scrollForCollapse(TreeItem collapsedItem)", "signatureAfterChange": " void doArrowDown (int stateMask)", "diff": ["+}", "+void doArrowDown (int stateMask) {", "+\tif ((stateMask & SWT.SHIFT) == 0 && (stateMask & SWT.CTRL) == 0) {", "+\t\tint newFocusIndex = focusItem.availableIndex + 1;", "+\t\tif (newFocusIndex == availableItems.length) return; \t/* at bottom */", "+\t\tselectItem(availableItems[newFocusIndex], false);", "+\t\tsetFocusItem(availableItems[newFocusIndex], true);", "+\t\tredrawItem(newFocusIndex);", "+\t\tshowItem(availableItems[newFocusIndex]);", "+\t\tEvent newEvent = new Event();", "+\t\tnewEvent.item = this;", "+\t\tsendEvent(SWT.Selection, newEvent);", "+\tif ((style & SWT.SINGLE) != 0) {", "+\t\tif ((stateMask & SWT.CTRL) != 0) {", "+\t\t\tint visibleItemCount = (getClientArea().height - getHeaderHeight()) / itemHeight;", "+\t\t\tif (availableItems.length <= topIndex + visibleItemCount) return;\t/* at bottom */", "+\t\t\ttopIndex++;", "+\t\t\tgetVerticalBar().setSelection(topIndex);", "+\t\t\tRectangle clientArea = getClientArea();", "+\t\t\tGC gc = new GC(this);", "+\t\t\tgc.copyArea(", "+\t\t\t\t0, 0,", "+\t\t\t\tclientArea.width, clientArea.height,", "+\t\t\t\t0, -itemHeight);", "+\t\t\tgc.dispose();", "+\t\t\treturn;", "+\t\tint newFocusIndex = focusItem.availableIndex + 1;", "+\t\tif (newFocusIndex == availableItems.length) return; \t/* at bottom */", "+\t\tselectItem(availableItems[newFocusIndex], false);", "+\t\tsetFocusItem(availableItems[newFocusIndex], true);", "+\t\tredrawItem(newFocusIndex);", "+\t\tshowItem(availableItems[newFocusIndex]);", "+\t\tEvent newEvent = new Event();", "+\t\tnewEvent.item = this;", "+\t\tsendEvent(SWT.Selection, newEvent);", "+\t\treturn;", "+\t}", "+\t/* SWT.MULTI */", "+\tif ((stateMask & SWT.CTRL) != 0) {", "+\t\tif ((stateMask & SWT.SHIFT) != 0) {", "+\t\t\tint visibleItemCount = (getClientArea().height - getHeaderHeight()) / itemHeight;", "+\t\t\tif (availableItems.length <= topIndex + visibleItemCount) return;\t/* at bottom */", "+\t\t\ttopIndex++;", "+\t\t\tgetVerticalBar().setSelection(topIndex);", "+\t\t\tRectangle clientArea = getClientArea();", "+\t\t\tGC gc = new GC(this);", "+\t\t\tgc.copyArea(", "+\t\t\t\t0, 0,", "+\t\t\t\tclientArea.width, clientArea.height,", "+\t\t\t\t0, -itemHeight);", "+\t\t\tgc.dispose();", "+\t\t\treturn;", "+\t\t}", "+\t\tint focusIndex = focusItem.availableIndex; ", "+\t\tif (focusIndex == availableItems.length - 1) return;\t/* at bottom */", "+\t\tTreeItem newFocusItem = availableItems[focusIndex + 1];", "+\t\tsetFocusItem(newFocusItem, true);", "+\t\tshowItem(newFocusItem);", "+\t\tredrawItem(newFocusItem.availableIndex);", "+\t\treturn;", "+\t}", "+\tint newFocusIndex = focusItem.availableIndex + 1;", "+\tif (newFocusIndex == availableItems.length) return; \t/* at bottom */", "+\tif (anchorItem == null) anchorItem = focusItem;", "+\tselectItem(availableItems[newFocusIndex], true);", "+\tsetFocusItem(availableItems[newFocusIndex], true);", "+\tredrawItem(newFocusIndex);", "+\tshowItem(availableItems[newFocusIndex]);", "+\tEvent newEvent = new Event();", "+\tnewEvent.item = this;", "+\tsendEvent(SWT.Selection, newEvent);", "+}", "- */", "-void scrollForCollapse(TreeItem collapsedItem) {", "-\tRectangle clientArea = getClientArea();\t", "-\tint topIndex = getTopIndex();", "-\tint itemCount = collapsedItem.getVisibleItemCount();", "-\tint scrollYPositions[] = calculateChildrenYPos(collapsedItem);", "-", "-\tif (scrollYPositions[0] == -1 && scrollYPositions[1] == -1) {", "-\t\treturn;", "-\t}", "-\tif (topIndex + getItemCountWhole() == getVisibleItemCount() && itemCount < topIndex) {", "-\t\t// scroll from top if last item is at bottom and will stay at ", "-\t\t// bottom after collapse. Avoids flash caused by too much bit ", "-\t\t// blitting (which force update and thus premature redraw)", "-\t\tint height = scrollYPositions[1] - scrollYPositions[0];", "-\t\tscroll(", "-\t\t\t0, 0,\t\t\t\t\t// destination x, y", "-\t\t\t0, -height,\t\t\t\t// source x, y\t\t", "-\t\t\tclientArea.width, scrollYPositions[0]+height, true);", "-\t\tsetTopIndexNoScroll(topIndex - itemCount, true);", "-\t}\t", "-\telse {", "-\t\tscroll(", "-\t\t\t0, scrollYPositions[0],\t\t\t\t// destination x, y", "-\t\t\t0, scrollYPositions[1],\t\t\t\t// source x, y\t\t", "-\t\t\tclientArea.width, clientArea.height - scrollYPositions[0], true);", "-\t}", "-}"]}], "num": 25502}
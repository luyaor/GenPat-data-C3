{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5fe58c30112e5ffbd75461ec15c381f4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac0e364a17d4d4750c97387b384cd122", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "7eb1b2020c252b9fac720e23e60d819aaecfb9b6", "commitAfterChange": "e6b3ea94e713cdc0d69085c90ac65222bf35efce", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void sendSelection ()", "signatureAfterChange": "  void sendSelection ()", "diff": ["+", "-\tpostEvent (SWT.Selection);", "+\tNSEvent event = NSApplication.sharedApplication().currentEvent();", "+\tif (event != null && (style & SWT.CALENDAR) != 0) {", "+\t\tif (event.clickCount() == 2) {", "+\t\t\tpostEvent (SWT.DefaultSelection);", "+\t\t} else if (event.type() == OS.NSLeftMouseUp) {", "+\t\t\tpostEvent (SWT.Selection);", "+\t\t}", "+\t} else { // SWT.DATE or SWT.TIME", "+\t\tpostEvent (SWT.Selection);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8b573ed4b23a7bc4d517a38822e7d33", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "a2f6c56c96d7e25e3d41f0e2f92b4603ac8fff5c", "commitAfterChange": "afb3a79505a19ae9fb8bffcff94849cca01815db", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "\r \r public void setRedraw (boolean redraw)", "signatureAfterChange": "\r \r public void setRedraw (boolean redraw)", "diff": ["+\r", "+\t\t\t/*\r", "+\t\t\t* Bug in Windows.  For some reason, when WM_SETREDRAW is used \r", "+\t\t\t* to turn redraw back on this may result in a WM_SIZE.  If the table column\r", "+\t\t\t* widths are adjusted in the WM_SIZE callback, blank lines may be\r", "+\t\t\t* inserted at the top of the widget.  A call to LVM_GETTOPINDEX will\r", "+\t\t\t* return a negative number (this is an impossible result).  The fix is to\r", "+\t\t\t* ignore any resize generated by WM_SETREDRAW and defer the work\r", "+\t\t\t* until the WM_SETREDRAW has returned.\r", "+\t\t\t*/\r", "+\t\t\tignoreResize = true;\r", "+\t\t\tif (!ignoreResize) {\r", "+\t\t\t\tint count = getChildrenCount ();\r", "+\t\t\t\tif (count > 1 && hdwp == 0) {\r", "+\t\t\t\t\thdwp = OS.BeginDeferWindowPos (count);\r", "+\t\t\t\t}\r", "+\t\t\t\tif (layout != null) layout.layout (this, false);\r", "+\t\t\t\tsendEvent (SWT.Resize);\r", "+\t\t\t\t// widget may be disposed at this point\r", "+\t\t\t\tif (isDisposed ()) return;\r", "+\t\t\t\tint oldHdwp = hdwp;\r", "+\t\t\t\thdwp = 0;\r", "+\t\t\t\tif (oldHdwp != 0) OS.EndDeferWindowPos (oldHdwp);\r", "+\t\t\t}\r", "+\t\t\tignoreResize = false;\r", "+\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff1e5da75f434bca056fc86e9f610b7d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "c738133a2fdbe3d60fd9dfabbfd9e737153e1aa5", "commitAfterChange": "c9992cb98fd2a837c866ff6f32642b9e42588c7e", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "  void init(Drawable drawable, GCData data, int gdkGC)", "signatureAfterChange": "  void init(Drawable drawable, GCData data, int gdkGC)", "diff": ["+\tint context = OS.gdk_pango_context_get();", "+\tif (context == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tdata.context = context;\t", "+\tint layout = OS.pango_layout_new(context);", "+\tif (context == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tdata.layout = layout;", "+", "-\tif (background != null) OS.gdk_gc_set_background (gdkGC, background);", "+\tif (background != null) OS.gdk_gc_set_background (gdkGC, background);\t", "+\tint font = data.font;", "+\tif (font != 0) OS.pango_context_set_font_description(context, font);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57adf474148fc585fb8403d7db6771b0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "f9528eaf04b9a7bbff7eef46517a4a22f774b385", "commitAfterChange": "aef40797195cb5e2b3bf6818f1b0fa0d190030aa", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "  \tstatic int atkText_get_selection (int atkObject, int selection_num, int start_offset, int end_offset)", "signatureAfterChange": "  \tstatic int atkText_get_selection (int atkObject, int selection_num, int start_offset, int end_offset)", "diff": ["+\t\t\t\tif (parentResult != 0) OS.g_free(parentResult);", "-\t\t\t\t\t//TODO return the selected text, should we free parent result", "+\t\t\t\t\tif (parentResult != 0) OS.g_free(parentResult);", "+\t\t\t\t\tString text = object.getText();", "+\t\t\t\t\tif (text != null && text.length () > event.offset && text.length() >= event.offset + event.length) {", "+\t\t\t\t\t\treturn getStringPtr (text.substring(event.offset, event.offset + event.length));", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a77bab8ef806eb3eef737ca10d4583b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "5506cab4b428c80e29a6e4456dfb962867ed7143", "commitAfterChange": "ee0ffc0c1bf96f679a31f66890d19720c01f05c6", "methodNumberBeforeChange": 312, "methodNumberAfterChange": 312, "signatureBeforeChange": " void reset()", "signatureAfterChange": " void reset()", "diff": ["+\tif (ime != null) {", "+\t\tString text = ime.getText();", "+\t\tif (text != null && text.length() > 0 && ime.getCompositionOffset() != -1) {", "+\t\t\time.setCompositionOffset(0);", "+\t\t\tcontent.replaceTextRange(0, 0, text);", "+\t\t\tsetCaretOffset(ime.getCaretOffset(), SWT.DEFAULT);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e221712ff65c457d11fc6a770a84b54", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "f75ec0817058061f436144267b5df05e7f2605d0", "commitAfterChange": "bb59e96d0bacb08d4b2d6e37105448dfe0785986", "methodNumberBeforeChange": 281, "methodNumberAfterChange": 281, "signatureBeforeChange": "\r void internalSetSelection(int start, int length, boolean sendEvent)", "signatureAfterChange": "\r void internalSetSelection(int start, int length, boolean sendEvent)", "diff": ["-\tif (selection.x != start || selection.y != end) {\r", "+\tif (start > end) {\r", "+\t\tint temp = end;\r", "+\t\tend = start;\r", "+\t\tstart = temp;\r", "+\t}\r", "+\t// is the selection range different or is the selection direction \r", "+\t// different?\r", "+\tif (selection.x != start || selection.y != end || \r", "+\t\t(length > 0 && selectionAnchor != selection.x) || \r", "+\t\t(length < 0 && selectionAnchor != selection.y)) {\r", "-\t\tselectionAnchor = selection.x = start;\r", "-\t\tcaretOffset = selection.y = end;\r", "-\t\tcaretLine = content.getLineAtOffset(caretOffset);\r", "-\t\tif (length > 0) {\r", "-\t\t\tinternalRedrawRange(selection.x, selection.y - selection.x, true);\r", "+\t\tif (length < 0) {\r", "+\t\t\tselectionAnchor = selection.y = end;\r", "+\t\t\tcaretOffset = selection.x = start;\r", "+\t\telse {\r", "+\t\t\tselectionAnchor = selection.x = start;\r", "+\t\t\tcaretOffset = selection.y = end;\r", "+\t\t}\r", "+\t\tcaretLine = content.getLineAtOffset(caretOffset);\r", "+\t\tinternalRedrawRange(selection.x, selection.y - selection.x, true);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19c08466397823b5fccc6f3a8c00f420", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "e5d64fd81f96f67f474e48cc570d6faada05a8c9", "commitAfterChange": "2460307210ca1c84db4d87d040f55706616b5591", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+\t} else {", "+\t\t/* ", "+\t\t * In a SWT.READ_ONLY Combo with single item, but no selection, ", "+\t\t * the width of the cell returned by cellSize() is smaller than expected.", "+\t\t * Get the correct width by setting and resetting the selected item.", "+\t\t */", "+\t\tNSPopUpButton nsPopUpButton = (NSPopUpButton)view;", "+\t\tif ((nsPopUpButton.numberOfItems () == 1) && (nsPopUpButton.indexOfSelectedItem () == -1)) {", "+\t\t\tnsPopUpButton.selectItemAtIndex (0);", "+\t\t\tsize = viewCell.cellSize ();", "+\t\t\twidth = Math.max (width, (int)Math.ceil (size.width));", "+\t\t\tnsPopUpButton.selectItemAtIndex (-1);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "116d5cadb995b43205f14db3f141d1e3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "ba2ae9a6603ab1f345933ac4128a3bea8c47bfaa", "commitAfterChange": "7e5271d5260816cd8bde7544a35b126b2ca852f4", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " public int internal_new_GC (GCData data)", "signatureAfterChange": " public int internal_new_GC (GCData data)", "diff": ["-\t//TODO", "-\treturn 0;", "+\t//TODO - for now, return a drawing context that can measure text", "+\tif (data == null) return 0;", "+\tint visual = OS.gcnew_DrawingVisual();", "+\tif (visual == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint dc = OS.DrawingVisual_RenderOpen (visual);", "+\tif (dc == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\tdata.visual = visual;", "+\treturn data.drawingContext = dc;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bde7b3bd8c4831266393062cb858226", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "bb717d59b79c0a782a38ba12420d934c86085f62", "commitAfterChange": "5dc510036d3f589b77ab51681b222b8b9e1a0c26", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "  void showItem (TreeItem item, boolean scroll)", "signatureAfterChange": "  void showItem (TreeItem item, boolean scroll)", "diff": ["-\tint count = 0;", "-//\tTreeItem parentItem = item.parentItem;", "-//\twhile (parentItem != null && !parentItem._getExpanded ()) {", "-//\t\tcount++;", "-//\t\tparentItem = parentItem.parentItem;", "-//\t}", "-//\tint index = 0;", "-//\tparentItem = item.parentItem;", "-//\tTreeItem [] path = new TreeItem [count];", "-//\twhile (parentItem != null && !parentItem._getExpanded ()) {", "-//\t\tpath [index++] = parentItem;", "-//\t\tparentItem = parentItem.parentItem;", "-//\t}", "-//\tfor (int i=path.length-1; i>=0; --i) {", "-//\t\tpath [i].setExpanded (true);", "-//\t}", "-//\tif (scroll) {", "-//\t\t/*", "-//\t\t* Bug in the Macintosh.  When there is not room to show a", "-//\t\t* single item in the data browser, RevealDataBrowserItem()", "-//\t\t* scrolls the item such that it is above the top of the data", "-//\t\t* browser.  The fix is to remember the index and scroll when", "-//\t\t* the data browser is resized.", "-//\t\t* ", "-//\t\t* Bug in the Macintosh.  When items are added to the data", "-//\t\t* browser after is has been hidden, RevealDataBrowserItem()", "-//\t\t* when called before the controls behind the data browser", "-//\t\t* are repainted causes a redraw.  This redraw happens right", "-//\t\t* away causing pixel corruption.  The fix is to remember the", "-//\t\t* index and scroll when the data browser is shown.", "-//\t\t*/", "-//\t\tRectangle rect = getClientArea ();", "-//\t\tif (rect.height < getItemHeight () || !OS.IsControlVisible (handle)) {", "-//\t\t\tshowItem = item;", "-//\t\t\treturn;", "-//\t\t}", "-//\t\tshowItem = null;", "-//\t\tRectangle itemRect = item.getBounds ();", "-//\t\tif (!itemRect.isEmpty()) {", "-//\t\t\tif (rect.contains (itemRect.x, itemRect.y)", "-//\t\t\t\t&& rect.contains (itemRect.x, itemRect.y + itemRect.height)) return;", "-//\t\t}", "-//\t\tint [] top = new int [1], left = new int [1];", "-//\t\tOS.GetDataBrowserScrollPosition (handle, top, left);", "-//\t\tint columnId = (columnCount == 0) ? column_id : columns [0].id;", "-//\t\tint options = OS.kDataBrowserRevealWithoutSelecting;", "-//\t\t/*", "-//\t\t* This code is intentionally commented, since kDataBrowserRevealAndCenterInView", "-//\t\t* does not scroll the item to the center always (it seems to scroll to the", "-//\t\t* end in some cases).", "-//\t\t*/", "-//\t\t//options |= OS.kDataBrowserRevealAndCenterInView;", "-//\t\tOS.RevealDataBrowserItem (handle, item.id, columnId, (byte) options);", "-//\t\tint [] newTop = new int [1], newLeft = new int [1];", "-//\t\tif (columnCount == 0) {", "-//\t\t\tboolean fixScroll = false;", "-//\t\t\tRect content = new Rect ();", "-//\t\t\tif (OS.GetDataBrowserItemPartBounds (handle, item.id, columnId, OS.kDataBrowserPropertyContentPart, content) == OS.noErr) {", "-//\t\t\t\tfixScroll = content.left < rect.x || content.left >= rect.x + rect.width;", "-//\t\t\t\tif (!fixScroll) {", "-//\t\t\t\t\tGC gc = new GC (this);", "-//\t\t\t\t\tint contentWidth = calculateWidth (new int[]{item.id}, gc, false, 0, 0);", "-//\t\t\t\t\tgc.dispose ();", "-//\t\t\t\t\tfixScroll =  content.left + contentWidth > rect.x + rect.width;", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t\tif (fixScroll) {", "-//\t\t\t\tint leftScroll = getLeftDisclosureInset (columnId);", "-//\t\t\t\tint levelIndent = DISCLOSURE_COLUMN_LEVEL_INDENT;", "-//\t\t\t\tif (OS.VERSION >= 0x1040) {", "-//\t\t\t\t\tfloat [] metric = new float [1];", "-//\t\t\t\t\tOS.DataBrowserGetMetric (handle, OS.kDataBrowserMetricDisclosureColumnPerDepthGap, null, metric);", "-//\t\t\t\t\tlevelIndent = (int) metric [0];", "-//\t\t\t\t}", "-//\t\t\t\tTreeItem temp = item;", "-//\t\t\t\twhile (temp.parentItem != null) {", "-//\t\t\t\t\tleftScroll += levelIndent;", "-//\t\t\t\t\ttemp = temp.parentItem;", "-//\t\t\t\t}", "-//\t\t\t\tOS.GetDataBrowserScrollPosition (handle, newTop, newLeft);", "-//\t\t\t\tOS.SetDataBrowserScrollPosition (handle, newTop [0], leftScroll);", "-//\t\t\t}", "-//\t\t}", "-//", "-//\t\t/*", "-//\t\t* Bug in the Macintosh.  For some reason, when the DataBrowser is scrolled", "-//\t\t* by RevealDataBrowserItem(), the scrollbars are not redrawn.  The fix is to", "-//\t\t* force a redraw.", "-//\t\t*/", "-//\t\tOS.GetDataBrowserScrollPosition (handle, newTop, newLeft);", "-//\t\tif (horizontalBar != null && newLeft [0] != left [0]) horizontalBar.redraw ();", "-//\t\tif (verticalBar != null && newTop [0] != top [0]) verticalBar.redraw ();", "-//\t}", "+\tTreeItem parentItem = item.parentItem;", "+\tif (parentItem != null && !parentItem.expanded) {", "+\t\tshowItem (parentItem, false);", "+\t\tparentItem.setExpanded (true);", "+\t}", "+\tif (scroll) {", "+\t\tNSOutlineView outlineView = (NSOutlineView) view;", "+\t\tint row = outlineView.rowForItem (item.handle);", "+\t\toutlineView.scrollRowToVisible (row);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "debf1efe7deac8d942636dc4d4eaceef", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "b736b4300b016cc6528af9f62c30fdfee607e20c", "commitAfterChange": "ca083c1ee82acb16a5435cb7041be6d577024f30", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": "  void windowSendEvent (int id, int sel, int event)", "signatureAfterChange": "  void windowSendEvent (int id, int sel, int event)", "diff": ["+\t\t\t", "+\t\t\t// Tooltip updating: Find the widget under the cursor. If it changed, clear the tooltip from", "+\t\t\t// the last tracked item and send a tooltip event to make it visible on the new widget. ", "-\t\t\tif (control != null) target = control.findTooltip (nsEvent.locationInWindow());", "+\t\t\tif (control != null) {", "+\t\t\t\tNSPoint eventPoint = nsEvent.locationInWindow();", "+\t\t\t\tif (hitView[0] != null) {", "+\t\t\t\t\tNSWindow eventWindow = nsEvent.window();", "+", "+\t\t\t\t\t// If a NSMouseMoved happens on an inactive window, convert the", "+\t\t\t\t\t// event coordinates to the window of the target view.", "+\t\t\t\t\tif (eventWindow != null && eventWindow != hitView[0].window()) {", "+\t\t\t\t\t\teventPoint = eventWindow.convertBaseToScreen(eventPoint);", "+\t\t\t\t\t\teventPoint = hitView[0].window().convertScreenToBase(eventPoint);", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t", "+\t\t\t\ttarget = control.findTooltip (eventPoint);", "+\t\t\t}", "+\t\t\t"]}], "num": 414}
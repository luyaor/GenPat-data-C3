{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1cec334e4ea55fece13a52903cd5124e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "467cf54483704541c77b1d897a7e97a7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "30005ec31327bf492e89c83d8cc99b536cf437a0", "commitAfterChange": "078a3d8a947c3d5dcb2d1501d6463b5d2d62f25e", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public DropTarget(Control control, int style)", "signatureAfterChange": "\t public DropTarget(Control control, int style)", "diff": ["- */", "+ */\t", "-\tsuper(control, style);", "+\tsuper(control, checkStyle(style));", "+\tthis.control = control;", "+\t", "+\t// Drag Motion Callback\t", "+\tdragMotion = new Callback(this, \"dragMotion\", 5);", "+\tbyte[] buffer = Converter.wcsToMbcs(null, \"drag_motion\", true);", "+\tOS.g_signal_connect(control.handle, buffer, dragMotion.getAddress(), 0);", "+", "+\t// Drag Leave Callback\t", "+\tdragLeave = new Callback(this, \"dragLeave\", 3);", "+\tbuffer = Converter.wcsToMbcs(null, \"drag_leave\", true);", "+\tOS.g_signal_connect(control.handle, buffer, dragLeave.getAddress(), 0);", "+\t", "+\t// Drag Data Received Callback\t", "+\tdragDataReceived = new Callback(this, \"dragDataReceived\", 7);", "+\tbuffer = Converter.wcsToMbcs(null, \"drag_data_received\", true);", "+\tOS.g_signal_connect(control.handle, buffer, dragDataReceived.getAddress(), 0);", "+\t", "+\t// Drag Data Received Callback\t", "+\tdragDrop = new Callback(this, \"dragDrop\", 5);", "+\tbuffer = Converter.wcsToMbcs(null, \"drag_drop\", true);", "+\tOS.g_signal_connect(control.handle, buffer, dragDrop.getAddress(), 0);", "+", "+\t// Dispose listeners\t", "+\tcontrolListener = new Listener(){", "+\t\tpublic void handleEvent(Event event){", "+\t\t\tDropTarget.this.dispose();", "+\t\t}", "+\t};", "+\tcontrol.addListener(SWT.Dispose, controlListener);\t", "+\tthis.addListener(SWT.Dispose, new Listener(){", "+\t\tpublic void handleEvent(Event event){", "+\t\t\tDropTarget.this.onDispose();", "+\t\t}\t", "+\t});", "+", "+\t// Drag under effect", "+\tif (control instanceof Tree) {", "+\t\teffect = new TreeDragUnderEffect((Tree)control);", "+\t} else if (control instanceof Table) {", "+\t\teffect = new TableDragUnderEffect((Table)control);", "+\t} else {", "+\t\teffect = new NoDragUnderEffect(control);", "+\t}", "+", "+\tdragOverHeartbeat = new Runnable() {", "+\t\tpublic void run() {", "+\t\t\tif (DropTarget.this.control.isDisposed() || dragOverStart == 0) return;", "+\t\t\tlong time = System.currentTimeMillis();", "+\t\t\tint delay = DRAGOVER_HYSTERESIS;", "+\t\t\tif (time >= dragOverStart) {", "+\t\t\t\tif (selectedDataType == null) {", "+\t\t\t\t\tselectedDataType = dragOverEvent.dataTypes[0];", "+\t\t\t\t}", "+\t\t\t\tDNDEvent event = new DNDEvent();", "+\t\t\t\tevent.widget = DropTarget.this.control;", "+\t\t\t\tevent.time = (int)time;", "+\t\t\t\tevent.x = dragOverEvent.x;", "+\t\t\t\tevent.y = dragOverEvent.y;", "+\t\t\t\tevent.dataTypes  = dragOverEvent.dataTypes;", "+\t\t\t\tevent.feedback = DND.FEEDBACK_SELECT;", "+\t\t\t\tint allowedOperations = dragOverEvent.operations;", "+\t\t\t\tTransferData[] allowedTypes = event.dataTypes;", "+\t\t\t\tevent.operations = allowedOperations;", "+\t\t\t\tevent.dataType  = selectedDataType;", "+\t\t\t\tevent.detail  = selectedOperation;", "+\t\t\t\tnotifyListeners(DND.DragOver, event);", "+\t\t\t\teffect.show(event.feedback, event.x, event.y);", "+\t\t\t\tselectedDataType = null;", "+\t\t\t\tif (event.dataType != null) {", "+\t\t\t\t\tfor (int i = 0; i < allowedTypes.length; i++) {", "+\t\t\t\t\t\tif (allowedTypes[i].type == event.dataType.type) {", "+\t\t\t\t\t\t\tselectedDataType = event.dataType;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t", "+\t\t\t\tselectedOperation = DND.DROP_NONE;", "+\t\t\t\tif (selectedDataType != null && (event.detail & allowedOperations) != 0) {", "+\t\t\t\t\tselectedOperation = event.detail;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tdelay = (int)(dragOverStart - time);", "+\t\t\t}", "+\t\t\tDropTarget.this.control.getDisplay().timerExec(delay, dragOverHeartbeat);", "+\t\t}", "+\t};"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a880a6de694b6e499eaeb0e79e8e4b7c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "4b10f2a3a24e7037b13a6b21d0386bf976be739d", "commitAfterChange": "616f5a4d963ffa9e332b664b81207bb1f17d8c21", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t public DropTarget(Control control, int style)", "signatureAfterChange": "\t public DropTarget(Control control, int style)", "diff": ["-\tbyte[] buffer = Converter.wcsToMbcs(null, \"drag_motion\", true);", "-\tOS.g_signal_connect(control.handle, buffer, DragMotion.getAddress(), 0);", "-\tbuffer = Converter.wcsToMbcs(null, \"drag_leave\", true);", "-\tOS.g_signal_connect(control.handle, buffer, DragLeave.getAddress(), 0);", "-\tbuffer = Converter.wcsToMbcs(null, \"drag_data_received\", true);", "-\tOS.g_signal_connect(control.handle, buffer, DragDataReceived.getAddress(), 0);", "-\tbuffer = Converter.wcsToMbcs(null, \"drag_drop\", true);", "-\tOS.g_signal_connect(control.handle, buffer, DragDrop.getAddress(), 0);", "+\tbyte[] buffer = Converter.wcsToMbcs(null, \"drag_motion\", true); //$NON-NLS-1$", "+\tOS.g_signal_connect(control.handle, buffer, Drag_Motion.getAddress(), 0);", "+\tbuffer = Converter.wcsToMbcs(null, \"drag_leave\", true); //$NON-NLS-1$", "+\tOS.g_signal_connect(control.handle, buffer, Drag_Leave.getAddress(), 0);", "+\tbuffer = Converter.wcsToMbcs(null, \"drag_data_received\", true); //$NON-NLS-1$", "+\tOS.g_signal_connect(control.handle, buffer, Drag_Data_Received.getAddress(), 0);", "+\tbuffer = Converter.wcsToMbcs(null, \"drag_drop\", true); //$NON-NLS-1$", "+\tOS.g_signal_connect(control.handle, buffer, Drag_Drop.getAddress(), 0);", "-\t\t\tif (time >= dragOverStart) {", "-\t\t\t\tif (selectedDataType == null) {", "-\t\t\t\t\tselectedDataType = dragOverEvent.dataTypes[0];", "-\t\t\t\t}", "+\t\t\tif (time < dragOverStart) {", "+\t\t\t\tdelay = (int)(dragOverStart - time);", "+\t\t\t} else {\t", "+\t\t\t\tint allowedOperations = dragOverEvent.operations;", "+\t\t\t\tTransferData[] allowedTypes = dragOverEvent.dataTypes;", "+\t\t\t\t//pass a copy of data types in to listeners in case application modifies it", "+\t\t\t\tTransferData[] dataTypes = new TransferData[allowedTypes.length];", "+\t\t\t\tSystem.arraycopy(allowedTypes, 0, dataTypes, 0, dataTypes.length);", "+\t", "-\t\t\t\tevent.widget = DropTarget.this.control;", "-\t\t\t\tevent.time = (int)time;", "+\t\t\t\tevent.widget = dragOverEvent.widget;", "-\t\t\t\tevent.dataTypes  = dragOverEvent.dataTypes;", "+\t\t\t\tevent.time = (int)time;", "-\t\t\t\tint allowedOperations = dragOverEvent.operations;", "-\t\t\t\tTransferData[] allowedTypes = event.dataTypes;", "-\t\t\t\tevent.operations = allowedOperations;", "-\t\t\t\tevent.dataType  = selectedDataType;", "+\t\t\t\tevent.dataTypes = dataTypes;", "+\t\t\t\tevent.dataType = selectedDataType;", "+\t\t\t\tevent.operations = dragOverEvent.operations;", "-\t\t\t\tnotifyListeners(DND.DragOver, event);", "+\t\t\t\t", "+\t\t\t\ttry {", "+\t\t\t\t\tnotifyListeners(DND.DragOver, event);", "+\t\t\t\t} catch (Throwable e) {", "+\t\t\t\t\tevent.dataType = null;", "+\t\t\t\t\tevent.detail  = DND.DROP_NONE;", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t", "-\t\t\t", "+", "-\t\t\t} else {", "-\t\t\t\tdelay = (int)(dragOverStart - time);"]}], "num": 24183}
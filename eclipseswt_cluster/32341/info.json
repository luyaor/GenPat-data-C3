{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "378618dd850157740972dd9cdec8381c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46c411cb7d0ecccc462a9bb2f67c7825", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabItem.java", "commitBeforeChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "commitAfterChange": "bbeab947327689cb203638e742e58f555e6c1b64", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 13, "signatureBeforeChange": " void onPaint(GC gc, boolean isSelected)", "signatureAfterChange": " void onPaint(GC gc, boolean isSelected)", "diff": ["- */", "-\t", "-\t", "-\tDisplay display = getDisplay();", "-\tColor highlightShadow = display.getSystemColor(SWT.COLOR_WIDGET_HIGHLIGHT_SHADOW);", "-\tColor normalShadow = display.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);\t\t", "-", "-\tint index = parent.indexOf(this);", "-\t", "-", "-\t\tRectangle bounds = null;", "-\t\tif (!parent.onBottom) {", "-\t\t\tif (index == parent.topTabIndex) {", "-\t\t\t\tbounds = new Rectangle(x + 1, y + 1, width - 2, height - 1);", "-\t\t\t} else {", "-\t\t\t\tbounds = new Rectangle(x + 2, y + 1, width - 3, height - 1);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tif (index == parent.topTabIndex) {", "-\t\t\t\tbounds = new Rectangle(x + 1, y + 1, width - 2, height - 2);", "-\t\t\t} else {", "-\t\t\t\tbounds = new Rectangle(x + 2, y + 1, width - 3, height - 2);", "-\t\t\t}", "-\t\t}", "-\t\tif (parent.backgroundImage != null) {", "-\t\t\t// draw a background image behind the text", "-\t\t\tRectangle imageRect = parent.backgroundImage.getBounds();", "-\t\t\tgc.drawImage(parent.backgroundImage, 0, 0, imageRect.width, imageRect.height,", "-\t\t\t\tbounds.x, bounds.y, bounds.width, bounds.height);", "-\t\t} else if (parent.gradientColors != null) {", "-\t\t\t// draw a gradient behind the text", "-\t\t\tColor oldBackground = gc.getBackground();", "-\t\t\tif (parent.gradientColors.length == 1) {", "-\t\t\t\tif (parent.gradientColors[0] != null) gc.setBackground(parent.gradientColors[0]);", "-\t\t\t\tgc.fillRectangle(bounds.x, bounds.y, bounds.width, bounds.height);", "-\t\t\t} else {", "-\t\t\t\tColor oldForeground = gc.getForeground();", "-\t\t\t\tColor lastColor = parent.gradientColors[0];", "-\t\t\t\tif (lastColor == null) lastColor = oldBackground;", "-\t\t\t\tfor (int i = 0, pos = 0; i < parent.gradientPercents.length; ++i) {", "-\t\t\t\t\tgc.setForeground(lastColor);", "-\t\t\t\t\tlastColor = parent.gradientColors[i + 1];", "-\t\t\t\t\tif (lastColor == null) lastColor = oldBackground;", "-\t\t\t\t\tgc.setBackground(lastColor);", "-\t\t\t\t\tint gradientWidth = (parent.gradientPercents[i] * bounds.width / 100) - pos;", "-\t\t\t\t\tgc.fillGradientRectangle(bounds.x + pos, bounds.y, gradientWidth, bounds.height, false);", "-\t\t\t\t\tpos += gradientWidth;", "-\t\t\t\t}", "-\t\t\t\tgc.setForeground(oldForeground);", "-\t\t\t}", "-\t\t\tgc.setBackground(oldBackground);", "-\t\t}", "-", "-\t\t// draw tab lines", "-\t\tif (!parent.onBottom) {", "-\t\t\tgc.setForeground(normalShadow);", "-\t\t\tif (index != parent.topTabIndex) {", "-\t\t\t\tgc.drawLine(x + 1, y,              x + 1, y);", "-\t\t\t\tgc.drawLine(x,     y + 1,          x,     y + height - 2);", "-\t\t\t\tgc.drawLine(x,     y + height - 1, x,     y + height - 1);", "-\t\t\t}", "-\t\t\tgc.drawLine(x + width - 1, y,              x + width - 1, y);", "-\t\t\tgc.drawLine(x + width,     y + 1,          x + width,     y + height - 2);", "-\t\t\tgc.drawLine(x + width,     y + height - 1, x + width,     y + height - 1);", "-\t", "-\t\t\tgc.setForeground(highlightShadow);", "-\t\t\tif (index != parent.topTabIndex) {", "-\t\t\t\tgc.drawLine(x + 2, y,              x + 2, y);", "-\t\t\t\tgc.drawLine(x + 1, y + 1,          x + 1, y + height - 2);", "-\t\t\t\tgc.drawLine(x + 1, y + height - 1, x + 1, y + height - 1);", "-\t\t\t} else {", "-\t\t\t\tgc.drawLine(x, y, x, y + height - 1);", "-\t\t\t}", "-\t\t\t", "-\t\t\tgc.drawLine(x + width - 2, y,              x + width - 2, y);", "-\t\t\tgc.drawLine(x + width - 1, y + 1,          x + width - 1, y + height - 2);", "-\t\t\tgc.drawLine(x + width - 1, y + height - 1, x + width - 1, y + height - 1);", "-\t", "-\t\t\t// light line across top", "-\t\t\tif (index != parent.topTabIndex) {", "-\t\t\t\tgc.drawLine(x + 3, y, x + width - 3, y);", "-\t\t\t} else {", "-\t\t\t\tgc.drawLine(x + 1, y, x + width - 3, y);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tgc.setForeground(normalShadow);", "-\t\t\tif (index != parent.topTabIndex) {", "-\t\t\t\tgc.drawLine(x,     y,              x,     y);", "-\t\t\t\tgc.drawLine(x,     y + 1,          x,     y + height - 2);", "-\t\t\t\tgc.drawLine(x + 1, y + height - 1, x + 1, y + height - 1);", "-\t\t\t}", "-\t\t\tgc.drawLine(x + width,     y,              x + width,     y);", "-\t\t\tgc.drawLine(x + width,     y + 1,          x + width,     y + height - 2);", "-\t\t\tgc.drawLine(x + width - 1, y + height - 1, x + width - 1, y + height - 1);", "-\t", "-\t\t\tgc.setForeground(highlightShadow);", "-\t\t\tif (index != parent.topTabIndex) {", "-\t\t\t\tgc.drawLine(x + 1, y,              x + 1, y);", "-\t\t\t\tgc.drawLine(x + 1, y + 1,          x + 1, y + height - 2);", "-\t\t\t\tgc.drawLine(x + 2, y + height - 1, x + 2, y + height - 1);", "-\t\t\t} else {", "-\t\t\t\tgc.drawLine(x, y, x, y + height - 1);", "-\t\t\t}", "-\t\t\t", "-\t\t\tgc.drawLine(x + width - 1, y,              x + width - 1, y);", "-\t\t\tgc.drawLine(x + width - 1, y + 1,          x + width - 1, y + height - 2);", "-\t\t\tgc.drawLine(x + width - 2, y + height - 1, x + width - 2, y + height - 1);", "-\t", "-\t\t\t// light line across top and bottom", "-\t\t\tif (index != parent.topTabIndex) {", "-\t\t\t\tgc.drawLine(x + 1, y, x + width - 2, y);", "-\t\t\t\tgc.drawLine(x + 2, y + height - 1, x + width - 3, y + height - 1);", "-\t\t\t} else {", "-\t\t\t\tgc.drawLine(x + 1, y, x + width - 2, y);", "-\t\t\t\tgc.drawLine(x + 1, y + height - 1, x + width - 3, y + height - 1);", "-\t\t\t}\t\t\t", "-\t\t}", "-\t\tif (parent.isFocusControl()) {", "-\t\t\t// draw a focus rectangle", "-\t\t\tint x1, y1, width1, height1;", "-\t\t\tif (!parent.onBottom) {", "-\t\t\t\tif (index == parent.topTabIndex) {", "-\t\t\t\t\tx1 = x + 1; y1 = y + 1; width1 = width - 2; height1 = height - 1;", "-\t\t\t\t} else {", "-\t\t\t\t\tx1 = x + 2; y1 = y + 1; width1 = width - 3; height1 = height - 1;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif (index == parent.topTabIndex) {", "-\t\t\t\t\tx1 = x + 1; y1 = y + 1; width1 = width - 2; height1 = height - 2;", "-\t\t\t\t} else {", "-\t\t\t\t\tx1 = x + 2; y1 = y + 1; width1 = width - 3; height1 = height - 2;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tgc.setBackground(display.getSystemColor(SWT.COLOR_BLACK));", "-\t\t\tgc.setForeground(display.getSystemColor(SWT.COLOR_WHITE));", "-\t\t\tgc.drawFocus(x1, y1, width1, height1);", "-\t\t}", "+\t\tdrawSelected(gc);", "-\t\t// draw tab lines for unselected items", "-\t\tgc.setForeground(normalShadow);", "-\t\tif (!parent.onBottom) {", "-\t\t\tif (index != parent.topTabIndex && index != parent.getSelectionIndex() + 1) {", "-\t\t\t\tgc.drawLine(x, y, x, y + (height / 2));", "-\t\t\t}", "-\t\t} else {", "-\t\t\tif (index != parent.topTabIndex && index != parent.getSelectionIndex() + 1) {", "-\t\t\t\tgc.drawLine(x, y + (height / 2), x, y + height - 1);", "-\t\t\t}", "-\t\t}", "-\t\t", "+\t\tdrawUnselected(gc);", "-", "-\t// draw Image", "-\tint xDraw = x + LEFT_MARGIN;", "-\t", "-\tImage image = getImage();", "-\tif (!isSelected && image != null) {", "-\t\tImage temp = getDisabledImage();", "-\t\tif (temp != null){", "-\t\t\timage = temp;", "-\t\t}", "-\t}", "-\tif (image != null) {", "-\t\tRectangle imageBounds = image.getBounds();", "-\t\tint imageX = xDraw;", "-\t\tint imageHeight = Math.min(height - BOTTOM_MARGIN - TOP_MARGIN, imageBounds.height);", "-\t\tint imageY = y + (height - imageHeight) / 2;", "-\t\tint imageWidth = imageBounds.width * imageHeight / imageBounds.height;", "-\t\tgc.drawImage(image, ", "-\t\t\t         imageBounds.x, imageBounds.y, imageBounds.width, imageBounds.height,", "-\t\t\t         imageX, imageY, imageWidth, imageHeight);", "-\t\txDraw += imageWidth + INTERNAL_SPACING;", "-\t}", "-\t", "-\t// draw Text", "-\tint textWidth = x + width - xDraw - RIGHT_MARGIN;", "-\tif (isSelected && parent.showClose) {", "-\t\ttextWidth = x + width - xDraw - parent.closeBar.getSize().x - RIGHT_MARGIN;", "-\t}", "-\tif (shortenedText == null || shortenedTextWidth != textWidth) {", "-\t\tshortenedText = shortenText(gc, getText(), textWidth);", "-\t\tshortenedTextWidth = textWidth;", "-\t}", "-\tString text = shortenedText;", "-\t", "-\tif (isSelected && parent.selectionForeground != null) {", "-\t\tgc.setForeground(parent.selectionForeground);", "-\t} else {", "-\t\tgc.setForeground(parent.getForeground());", "-\t}", "-\tint textY = y + (height - gc.textExtent(text, SWT.DRAW_MNEMONIC).y) / 2; \t", "-\tgc.drawText(text, xDraw, textY, SWT.DRAW_TRANSPARENT | SWT.DRAW_MNEMONIC);", "-\t", "-\tgc.setForeground(parent.getForeground());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ac465c29bb197707db62bf7916adeec", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "65aaf6e9768e61429e9ffb0c0ae5577af65eba85", "commitAfterChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 15, "signatureBeforeChange": " void drawSelectionBackground(GC gc, int[] shape)", "signatureAfterChange": " void drawBackground(GC gc, int[] shape, boolean selected)", "diff": ["+void drawBackground(GC gc, int[] shape, boolean selected) {", "+\tint height = tabHeight + HIGHLIGHT_HEADER; ", "+\tint y = onBottom ? size.y - borderBottom - height : borderTop;", "+\tint x = 0;", "+\tint width = size.x;", "+\tif (borderLeft > 0) {", "+\t\tx += 1; width -= 2;", "+\t}", "+\t", "+\tRegion clipping = new Region();", "+\tgc.getClipping(clipping);", "+\tRegion region = new Region();", "+\tregion.add(shape);", "+\tgc.setClipping(region);", "+\t", "+\tColor defaultBackground = selected ? selectionBackground : getBackground();", "+\tImage image = selected ? selectionBgImage : bgImage;", "+\tColor[] colors = selected ? selectionGradientColors : gradientColors;", "+\tboolean vertical = selected ? selectionGradientVertical : gradientVertical;", "+\tint[] percents = selected ? selectionGradientPercents : gradientPercents;", "+\t", "+\tif (image != null) {", "+\t\t// draw the background image in shape", "+\t\tgc.setBackground(defaultBackground);", "+\t\tgc.fillRectangle(x, y, width, height);", "+\t\tRectangle imageRect = image.getBounds();", "+\t\tgc.drawImage(image, imageRect.x, imageRect.y, imageRect.width, imageRect.height, x, y, width, height);", "+\t} else if (colors != null) {", "+\t\t// draw gradient", "+\t\tif (colors.length == 1) {", "+\t\t\tColor background = colors[0] != null ? colors[0] : defaultBackground;", "+\t\t\tgc.setBackground(background);", "+\t\t\tgc.fillRectangle(x, y, width, height);", "+\t\t} else {", "+\t\t\tif (vertical) {", "+\t\t\t\tif (onBottom) {", "+\t\t\t\t\tint pos = 0;", "+\t\t\t\t\tif (percents[percents.length - 1] < 100) {", "+\t\t\t\t\t\tpos = percents[percents.length - 1] * height / 100;", "+\t\t\t\t\t\tgc.setBackground(defaultBackground);", "+\t\t\t\t\t\tgc.fillRectangle(x, y, width, pos);", "+\t\t\t\t\t}", "+\t\t\t\t\tColor lastColor = colors[colors.length-1];", "+\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\tfor (int i = percents.length-1; i >= 0; i--) {", "+\t\t\t\t\t\tgc.setForeground(lastColor);", "+\t\t\t\t\t\tlastColor = colors[i];", "+\t\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\t\tgc.setBackground(lastColor);", "+\t\t\t\t\t\tint gradientHeight = percents[i] * height / 100;", "+\t\t\t\t\t\tgc.fillGradientRectangle(x, y+pos, width, gradientHeight, true);", "+\t\t\t\t\t\tpos += gradientHeight;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tColor lastColor = colors[0];", "+\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\tint pos = 0;", "+\t\t\t\t\tfor (int i = 0; i < percents.length; i++) {", "+\t\t\t\t\t\tgc.setForeground(lastColor);", "+\t\t\t\t\t\tlastColor = colors[i + 1];", "+\t\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\t\tgc.setBackground(lastColor);", "+\t\t\t\t\t\tint gradientHeight = percents[i] * height / 100;", "+\t\t\t\t\t\tgc.fillGradientRectangle(x, y+pos, width, gradientHeight, true);", "+\t\t\t\t\t\tpos += gradientHeight;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (pos < height) {", "+\t\t\t\t\t\tgc.setBackground(defaultBackground);", "+\t\t\t\t\t\tgc.fillRectangle(x, pos, width, height-pos);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else { //horizontal gradient", "+\t\t\t\tColor lastColor = colors[0];", "+\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\tint pos = 0;", "+\t\t\t\tfor (int i = 0; i < percents.length; ++i) {", "+\t\t\t\t\tgc.setForeground(lastColor);", "+\t\t\t\t\tlastColor = colors[i + 1];", "+\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\tgc.setBackground(lastColor);", "+\t\t\t\t\tint gradientWidth = (percents[i] * width / 100) - pos;", "+\t\t\t\t\tgc.fillGradientRectangle(x+pos, y, gradientWidth, height, false);", "+\t\t\t\t\tpos += gradientWidth;", "+\t\t\t\t}", "+\t\t\t\tif (pos < width) {", "+\t\t\t\t\tgc.setBackground(defaultBackground);", "+\t\t\t\t\tgc.fillRectangle(x+pos, y, width-pos, height);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t} else {", "+\t\t// draw a solid background using default background in shape", "+\t\tgc.setBackground(defaultBackground);", "+\t\tgc.fillRectangle(x, y, width, height);", "+\t}", "+\tgc.setClipping(clipping);", "+\tclipping.dispose();", "+\tregion.dispose();", "+}", "-void drawSelectionBackground(GC gc, int[] shape) {", "-\tint height = tabHeight + HIGHLIGHT_HEADER; ", "-\tint y = onBottom ? size.y - borderBottom - height : borderTop;", "-\tint x = 0;", "-\tint width = size.x;", "-\tif (borderLeft > 0) {", "-\t\tx += 1; width -= 2;", "-\tRegion clipping = new Region();", "-\tgc.getClipping(clipping);", "-\tRegion region = new Region();", "-\tregion.add(shape);", "-\tgc.setClipping(region);", "-\t\t", "-\tif (backgroundImage != null) {", "-\t\t// draw the background image in shape", "-\t\tgc.setBackground(selectionBackground);", "-\t\tgc.fillRectangle(x, y, width, height);", "-\t\tRectangle imageRect = backgroundImage.getBounds();", "-\t\tif (tiled) {", "-\t\t\t// tile image to fill space", "-\t\t\tint xPos = x;", "-\t\t\twhile (xPos < x+width) {", "-\t\t\t\tint yPos = y;", "-\t\t\t\twhile (yPos < y+height) {", "-\t\t\t\t\tgc.drawImage(backgroundImage, xPos, yPos);", "-\t\t\t\t\tyPos += imageRect.height;", "-\t\t\t\t}", "-\t\t\t\txPos += imageRect.width;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tgc.drawImage(backgroundImage, imageRect.x, imageRect.y, imageRect.width, imageRect.height, x, y, width, height);", "-\t\t", "-\t\t}", "-\t} else if (gradientColors != null) {", "-\t\t// draw gradient", "-\t\tif (gradientColors.length == 1) {", "-\t\t\tColor background = gradientColors[0] != null ? gradientColors[0] : selectionBackground;", "-\t\t\tgc.setBackground(background);", "-\t\t\tgc.fillRectangle(x, y, width, height);", "-\t\t} else {", "-\t\t\tif (gradientVertical) {", "-\t\t\t\tif (onBottom) {", "-\t\t\t\t\tint pos = 0;", "-\t\t\t\t\tif (gradientPercents[gradientPercents.length - 1] < 100) {", "-\t\t\t\t\t\tpos = gradientPercents[gradientPercents.length - 1] * height / 100;", "-\t\t\t\t\t\tgc.setBackground(selectionBackground);", "-\t\t\t\t\t\tgc.fillRectangle(x, y, width, pos);", "-\t\t\t\t\t}", "-\t\t\t\t\tColor lastColor = gradientColors[gradientColors.length-1];", "-\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "-\t\t\t\t\tfor (int i = gradientPercents.length-1; i >= 0; i--) {", "-\t\t\t\t\t\tgc.setForeground(lastColor);", "-\t\t\t\t\t\tlastColor = gradientColors[i];", "-\t\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "-\t\t\t\t\t\tgc.setBackground(lastColor);", "-\t\t\t\t\t\tint gradientHeight = gradientPercents[i] * height / 100;", "-\t\t\t\t\t\tgc.fillGradientRectangle(x, y+pos, width, gradientHeight, true);", "-\t\t\t\t\t\tpos += gradientHeight;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tColor lastColor = gradientColors[0];", "-\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "-\t\t\t\t\tint pos = 0;", "-\t\t\t\t\tfor (int i = 0; i < gradientPercents.length; i++) {", "-\t\t\t\t\t\tgc.setForeground(lastColor);", "-\t\t\t\t\t\tlastColor = gradientColors[i + 1];", "-\t\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "-\t\t\t\t\t\tgc.setBackground(lastColor);", "-\t\t\t\t\t\tint gradientHeight = gradientPercents[i] * height / 100;", "-\t\t\t\t\t\tgc.fillGradientRectangle(x, y+pos, width, gradientHeight, true);", "-\t\t\t\t\t\tpos += gradientHeight;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (pos < height) {", "-\t\t\t\t\t\tgc.setBackground(selectionBackground);", "-\t\t\t\t\t\tgc.fillRectangle(x, pos, width, height-pos);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else { //horizontal gradient", "-\t\t\t\tColor lastColor = gradientColors[0];", "-\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "-\t\t\t\tint pos = 0;", "-\t\t\t\tfor (int i = 0; i < gradientPercents.length; ++i) {", "-\t\t\t\t\tgc.setForeground(lastColor);", "-\t\t\t\t\tlastColor = gradientColors[i + 1];", "-\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "-\t\t\t\t\tgc.setBackground(lastColor);", "-\t\t\t\t\tint gradientWidth = (gradientPercents[i] * width / 100) - pos;", "-\t\t\t\t\tgc.fillGradientRectangle(x+pos, y, gradientWidth, height, false);", "-\t\t\t\t\tpos += gradientWidth;", "-\t\t\t\t}", "-\t\t\t\tif (pos < width) {", "-\t\t\t\t\tgc.setBackground(selectionBackground);", "-\t\t\t\t\tgc.fillRectangle(x+pos, y, width-pos, height);", "-\t\t\t\t}", "-\t} else {", "-\t\t// draw a solid background using selectionBackground in shape", "-\t\tgc.setBackground(selectionBackground);", "-\t\tgc.fillRectangle(x, y, width, height);", "-\tgc.setClipping(clipping);", "-\tclipping.dispose();", "-\tregion.dispose();"]}], "num": 32341}
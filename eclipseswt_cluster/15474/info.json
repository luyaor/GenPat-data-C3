{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da7b56d9992e2a630acb20c52d22d4de", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6b042f30889fae98bb84f3af84f356c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "ab5f809a36315ad5857453f35067dbbb901e79ce", "commitAfterChange": "7404081ade192181f8ff81775bae1c7953f006c7", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": " public Image getSystemImage (int id)", "signatureAfterChange": " public Image getSystemImage (int id)", "diff": ["-\tint code;", "-\t\tcase SWT.ICON_ERROR:", "-\t\t\tcode = OS.kAlertStopIcon;", "-\t\t\tbreak;", "+\t\tcase SWT.ICON_ERROR: {\t", "+\t\t\tif (errorImage != null) return errorImage;", "+\t\t\tNSImage nsImage = NSWorkspace.sharedWorkspace ().iconForFileType (new NSString (OS.NSFileTypeForHFSTypeCode (OS.kAlertStopIcon)));", "+\t\t\tif (nsImage == null) return null;", "+\t\t\tnsImage.retain ();", "+\t\t\treturn errorImage = Image.cocoa_new (this, SWT.ICON, nsImage);", "+\t\t}", "-\t\tcase SWT.ICON_WORKING:", "-\t\t\tcode = OS.kAlertNoteIcon;", "-\t\t\tbreak;", "-\t\tcase SWT.ICON_WARNING:", "-\t\t\tcode = OS.kAlertCautionIcon;", "-\t\t\tbreak;", "-\t\tdefault:", "-\t\t\treturn null;", "+\t\tcase SWT.ICON_WORKING: {", "+\t\t\tif (infoImage != null) return infoImage;", "+\t\t\tNSImage nsImage = NSWorkspace.sharedWorkspace ().iconForFileType (new NSString (OS.NSFileTypeForHFSTypeCode (OS.kAlertNoteIcon)));", "+\t\t\tif (nsImage == null) return null;", "+\t\t\tnsImage.retain ();", "+\t\t\treturn infoImage = Image.cocoa_new (this, SWT.ICON, nsImage);", "+\t\t}", "+\t\tcase SWT.ICON_WARNING: {", "+\t\t\tif (warningImage != null) return warningImage;", "+\t\t\tNSImage nsImage = NSWorkspace.sharedWorkspace ().iconForFileType (new NSString (OS.NSFileTypeForHFSTypeCode (OS.kAlertCautionIcon)));", "+\t\t\tif (nsImage == null) return null;", "+\t\t\tnsImage.retain ();", "+\t\t\treturn warningImage = Image.cocoa_new (this, SWT.ICON, nsImage);", "+\t\t}", "-\tNSImage nsImage = NSWorkspace.sharedWorkspace().iconForFileType(new NSString(OS.NSFileTypeForHFSTypeCode(code)));", "-\tif (nsImage == null) return null;", "-\treturn Image.cocoa_new(this, SWT.ICON, nsImage);", "+\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "668929a3b07d9177a5cba986ca08a8a7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "7dc0ed76c00a73244d89c00fb91aa296e1c8bb9a", "commitAfterChange": "283346df972bf05bab552efd3c4080f6b823b0e2", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void enableWidget (boolean enabled)", "signatureAfterChange": "  void enableWidget (boolean enabled)", "diff": ["-\t\t\t\t\tString string = enabled ? text : text + \" \";", "-\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, true);", "-\t\t\t\t\tOS.SetWindowText (handle, buffer);", "+\t\t\t\tString string = enabled ? text : text + \" \";", "+\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, true);", "+\t\t\t\tOS.SetWindowText (handle, buffer);", "+\t\t}", "+\t}", "+\t/*", "+\t* Bug in Windows.  When a button has the style BS_CHECKBOX", "+\t* or BS_RADIOBUTTON, is checked, and is displaying both an", "+\t* image and some text, when BCM_SETIMAGELIST is used to", "+\t* assign an image list for each of the button states, the", "+\t* button does not draw properly.  When the user drags the", "+\t* mouse in and out of the button, it draws using a blank", "+\t* image.  The fix is to set the complete image list only", "+\t* when the button is disabled.", "+\t*/", "+\tif (OS.COMCTL32_MAJOR >= 6) {", "+\t\tif (imageList != null) {", "+\t\t\tBUTTON_IMAGELIST buttonImageList = new BUTTON_IMAGELIST ();", "+\t\t\tOS.SendMessage (handle, OS.BCM_GETIMAGELIST, 0, buttonImageList);", "+\t\t\tif (imageList != null) imageList.dispose ();", "+\t\t\timageList = new ImageList (style & SWT.RIGHT_TO_LEFT);", "+\t\t\timageList.add (image); //PBS_NORMAL", "+\t\t\tif (!OS.IsWindowEnabled (handle)) {", "+\t\t\t\timageList.add (image); //PBS_HOT", "+\t\t\t\timageList.add (image); //PBS_PRESSED", "+\t\t\t\tif (disabledImage != null) disabledImage.dispose ();", "+\t\t\t\tdisabledImage = new Image (display, image, SWT.IMAGE_DISABLE);", "+\t\t\t\timageList.add (disabledImage); //PBS_DISABLED", "+\t\t\t\timageList.add (image); //PBS_DEFAULTED", "+\t\t\t\timageList.add (image); //PBS_STYLUSHOT", "+\t\t\t}", "+\t\t\tbuttonImageList.himl = imageList.getHandle ();", "+\t\t\tOS.SendMessage (handle, OS.BCM_SETIMAGELIST, 0, buttonImageList);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9e5ccd97e830f0c7b52821aa68669d9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "ad7a9e5b3b139f6b5bd4c2f25f8cf8b336105a91", "commitAfterChange": "52d678e47ee00e0c9d7473cd6841b89c8499131e", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["-\thandle = OS.gtk_combo_new ();", "-\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\tOS.gtk_container_add (fixedHandle, handle);", "-\tGtkCombo combo = new GtkCombo ();", "-\tOS.memmove (combo, handle);", "-\tentryHandle = combo.entry;", "-\tlistHandle = combo.list;", "-\t", "-\t/*", "-\t* Feature in GTK.  There is no API to query the arrow", "-\t* handle from a combo box although it is possible to", "-\t* get the list and text field.  The arrow handle is needed", "-\t* to hook events.  The fix is to find the first child that is", "-\t* not the entry or list and assume this is the arrow handle.", "-\t*/", "-\tint /*long*/ list = OS.gtk_container_get_children (handle);", "-\tif (list != 0) {", "-\t\tint i = 0, count = OS.g_list_length (list);", "-\t\twhile (i<count) {", "-\t\t\tint /*long*/ childHandle = OS.g_list_nth_data (list, i);", "-\t\t\tif (childHandle != entryHandle && childHandle != listHandle) {", "-\t\t\t\tarrowHandle = childHandle;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\ti++;", "+\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {", "+\t\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\t\thandle = OS.gtk_combo_box_new_text ();", "+\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t} else {", "+\t\t\thandle = OS.gtk_combo_box_entry_new_text ();", "+\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\tentryHandle = OS.gtk_bin_get_child (handle);", "+\t\t\tif (entryHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tOS.g_list_free (list);", "+\t\tOS.gtk_container_add (fixedHandle, handle);", "+\t\ttextRenderer = OS.gtk_cell_renderer_text_new ();", "+\t\tif (textRenderer == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.gtk_cell_layout_clear (handle);", "+\t\tOS.gtk_cell_layout_pack_start (handle, textRenderer, true);", "+\t\tOS.gtk_cell_layout_set_attributes (handle, textRenderer, OS.text, 0, 0);", "+\t} else {", "+\t\thandle = OS.gtk_combo_new ();", "+\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.gtk_container_add (fixedHandle, handle);", "+\t\tGtkCombo combo = new GtkCombo ();", "+\t\tOS.memmove (combo, handle);", "+\t\tentryHandle = combo.entry;", "+\t\tlistHandle = combo.list;", "+\t\t", "+\t\t/*", "+\t\t* Feature in GTK.  There is no API to query the arrow", "+\t\t* handle from a combo box although it is possible to", "+\t\t* get the list and text field.  The arrow handle is needed", "+\t\t* to hook events.  The fix is to find the first child that is", "+\t\t* not the entry or list and assume this is the arrow handle.", "+\t\t*/", "+\t\tint /*long*/ list = OS.gtk_container_get_children (handle);", "+\t\tif (list != 0) {", "+\t\t\tint i = 0, count = OS.g_list_length (list);", "+\t\t\twhile (i<count) {", "+\t\t\t\tint /*long*/ childHandle = OS.g_list_nth_data (list, i);", "+\t\t\t\tif (childHandle != entryHandle && childHandle != listHandle) {", "+\t\t\t\t\tarrowHandle = childHandle;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\ti++;", "+\t\t\t}", "+\t\t\tOS.g_list_free (list);", "+\t\t}", "+\t\t", "+\t\tboolean editable = (style & SWT.READ_ONLY) == 0;", "+\t\tOS.gtk_editable_set_editable (entryHandle, editable);", "+\t\tOS.gtk_combo_disable_activate (handle);", "+\t\tOS.gtk_combo_set_case_sensitive (handle, true);", "-\t", "-\tboolean editable = (style & SWT.READ_ONLY) == 0;", "-\tOS.gtk_editable_set_editable (entryHandle, editable);", "-\tOS.gtk_combo_disable_activate (handle);", "-\tOS.gtk_combo_set_case_sensitive (handle, true);"]}], "num": 15474}
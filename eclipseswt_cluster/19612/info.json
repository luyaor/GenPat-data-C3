{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb5c7644cf5d66b1957cb8ea5cf7b3f7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ebc5ee043216e844e397156ed2b18a7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "f8f6911662cdf639af13524cf14867c235847d09", "commitAfterChange": "469a0f34eb8c282719498f4d15cb3ef0bd826b45", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "\r \r public void setRedraw (boolean redraw)", "signatureAfterChange": "\r \r public void setRedraw (boolean redraw)", "diff": ["-\t\t\t* to turn redraw back on this may result in a WM_SIZE.  If the table column\r", "-\t\t\t* widths are adjusted in the WM_SIZE callback, blank lines may be\r", "-\t\t\t* inserted at the top of the widget.  A call to LVM_GETTOPINDEX will\r", "-\t\t\t* return a negative number (this is an impossible result).  The fix is to\r", "-\t\t\t* ignore any resize generated by WM_SETREDRAW and defer the work\r", "-\t\t\t* until the WM_SETREDRAW has returned.\r", "+\t\t\t* to turn redraw back on this may result in a WM_SIZE.  If the\r", "+\t\t\t* table column widths are adjusted in WM_SIZE, blank lines may\r", "+\t\t\t* be inserted at the top of the widget.  A call to LVM_GETTOPINDEX\r", "+\t\t\t* will return a negative number (this is an impossible result).\r", "+\t\t\t* The fix is to ignore any resize generated by WM_SETREDRAW and\r", "+\t\t\t* defer the work until the WM_SETREDRAW has returned.\r", "+\t\t\t*\r", "+\t\t\t* NOTE: The window proc for the table does not redraw the\r", "+\t\t\t* non-client area (ie. the border and scroll bars).  This \r", "+\t\t\t* must be explicitly redrawn.  This code can be removed\r", "+\t\t\t* if we stop relying on the undocuemented behavior.\r", "+\t\t\tif (OS.IsWinCE) {\r", "+\t\t\t\tOS.InvalidateRect (handle, null, false);\r", "+\t\t\t} else {\r", "+\t\t\t\tOS.RedrawWindow (handle, null, 0, OS.RDW_FRAME | OS.RDW_INVALIDATE);\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b91490bac86587adb449b3b7a9e0822", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "36e66383037b49f2f525487f3f2f4f6d4165ed25", "commitAfterChange": "8166f2fcef730025a015f208c5ea1ef7b871e1ec", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": "\r \r void setBounds (int x, int y, int width, int height, int flags)", "signatureAfterChange": "\r \r void setBounds (int x, int y, int width, int height, int flags)", "diff": ["-\tflags |= OS.SWP_NOZORDER | OS.SWP_DRAWFRAME | OS.SWP_NOACTIVATE;\r", "+\t/*\r", "+\t* Feature on WinCE.  The SWP_DRAWFRAME flag in SetWindowPos\r", "+\t* causes a WM_SIZE event to be thrown even if SWP_NOSIZE is\r", "+\t* set.  When setBounds is called with the flag SWP_NOSIZE,\r", "+\t* the width and height are ignored.  This case should not throw\r", "+\t* a WM_SIZE event.  The fix is to set the SWP_DRAWFRAME flag only if\r", "+\t* SWP_NOSIZE is not specified.\r", "+\t*/\r", "+\tif (OS.IsWinCE) {\r", "+\t\tif ((flags | OS.SWP_NOSIZE) == 0) flags |= OS.SWP_DRAWFRAME;\r", "+\t\tflags |= OS.SWP_NOZORDER | OS.SWP_NOACTIVATE;\r", "+\t} else {\r", "+\t\tflags |= OS.SWP_NOZORDER | OS.SWP_DRAWFRAME | OS.SWP_NOACTIVATE;\r", "+\t}\r"]}], "num": 19612}
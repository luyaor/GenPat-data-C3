{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3cd71efd08e3ab6ba9cc0321440ee48", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5d6e1b92b2a6d21c37691c27b48eb2e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "aa5a69fe81e993c5bb9fcff4c9a425715ad470cd", "commitAfterChange": "bf9b442200602eaa6f44a276dfab033f09afe62d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  void createRenderers (int columnHandle, int modelIndex, boolean check, int columnStyle)", "signatureAfterChange": "  void createRenderers (int columnHandle, int modelIndex, boolean check, int columnStyle)", "diff": ["-void createRenderers (int /*long*/ columnHandle, int modelIndex, boolean check, int columnStyle) {", "-\tOS.gtk_tree_view_column_clear (columnHandle);", "-\tif ((style & SWT.CHECK) != 0 && check) {", "-\t\tOS.gtk_tree_view_column_pack_start (columnHandle, checkRenderer, false);", "-\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, checkRenderer, OS.active, CHECKED_COLUMN);", "-\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 2, 0)) {", "-\t\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, checkRenderer, OS.cell_background_gdk, BACKGROUND_COLUMN);", "-\t\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, checkRenderer, OS.inconsistent, GRAYED_COLUMN);", "-\t\t}", "-\tint /*long*/ pixbufRenderer = OS.gtk_cell_renderer_pixbuf_new ();", "-\tif (pixbufRenderer == 0) error (SWT.ERROR_NO_HANDLES);", "-\tint /*long*/ textRenderer = OS.gtk_cell_renderer_text_new ();", "-\tif (textRenderer == 0) error (SWT.ERROR_NO_HANDLES);", "-\t/*", "-\t* Feature on GTK.  When a tree view column contains only one activatable", "-\t* cell renderer such as a toggle renderer, mouse clicks anywhere in a cell", "-\t* activate that renderer. The workaround is to set a second  cell renderer", "-\t* to be activatable.", "-\t*/", "-\tif ((style & SWT.CHECK) != 0 && check) {", "-\t\tOS.g_object_set (pixbufRenderer, OS.mode, OS.GTK_CELL_RENDERER_MODE_ACTIVATABLE, 0);", "-\t}", "-", "-\t/* Set alignment */", "-\tif ((columnStyle & SWT.RIGHT) != 0) {", "-\t\tOS.g_object_set (textRenderer, OS.xalign, 1f, 0);", "-\t\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, false);", "-\t\tOS.gtk_tree_view_column_pack_start (columnHandle, textRenderer, true);", "-\t\tOS.gtk_tree_view_column_set_alignment (columnHandle, 1f);", "-\t} else if ((columnStyle & SWT.CENTER) != 0) {", "-\t\tOS.g_object_set (textRenderer, OS.xalign, 0.5f, 0);", "-\t\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, false);", "-\t\tOS.gtk_tree_view_column_pack_end (columnHandle, textRenderer, true);", "-\t\tOS.gtk_tree_view_column_set_alignment (columnHandle, 0.5f);", "-\t} else {", "-\t\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, false);", "-\t\tOS.gtk_tree_view_column_pack_start (columnHandle, textRenderer, true);", "-\t\tOS.gtk_tree_view_column_set_alignment (columnHandle, 0f);", "-\t}", "-", "-\t/* Add attributes */", "-\tOS.gtk_tree_view_column_add_attribute (columnHandle, pixbufRenderer, OS.pixbuf, modelIndex);", "-\tif (OS.GTK_VERSION >= OS.VERSION (2, 2, 0)) {", "-\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, pixbufRenderer, OS.cell_background_gdk, BACKGROUND_COLUMN);", "-\t}", "-\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, OS.text, modelIndex + 1);", "-\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, OS.foreground_gdk, FOREGROUND_COLUMN);", "-\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, OS.background_gdk, BACKGROUND_COLUMN);", "-\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, OS.font_desc, FONT_COLUMN);", "-\t", "-\tboolean customDraw = firstCustomDraw;", "-\tif (columnCount != 0) {", "-\t\tfor (int i=0; i<columnCount; i++) {", "-\t\t\tif (columns [i].handle == columnHandle) {", "-\t\t\t\tcustomDraw = columns [i].customDraw;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t}", "-\tif ((style & SWT.VIRTUAL) != 0 || customDraw) {", "-\t\tOS.gtk_tree_view_column_set_cell_data_func (columnHandle, textRenderer, display.textCellDataProc, handle, 0);", "-\t\tOS.gtk_tree_view_column_set_cell_data_func (columnHandle, pixbufRenderer, display.pixbufCellDataProc, handle, 0);", "+void createRenderers (int /*long*/ columnHandle, int modelIndex, boolean check, int columnStyle) {", "+\tOS.gtk_tree_view_column_clear (columnHandle);", "+\tif ((style & SWT.CHECK) != 0 && check) {", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, checkRenderer, false);", "+\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, checkRenderer, OS.active, CHECKED_COLUMN);", "+\t\t/*", "+\t\t* Feature in GTK. The inconsistent property only exists in GTK 2.2.x.", "+\t\t*/", "+\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 2, 0)) {", "+\t\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, checkRenderer, OS.inconsistent, GRAYED_COLUMN);", "+\t\t}", "+\t\t/*", "+\t\t* Bug on GTK. Gtk renders the background on top of the checkbox.", "+\t\t* This only happens in version 2.2.1 and earlier. The fix is not to set the background.   ", "+\t\t*/", "+\t\tif (OS.GTK_VERSION > OS.VERSION (2, 2, 1)) {", "+\t\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, checkRenderer, OS.cell_background_gdk, BACKGROUND_COLUMN);", "+\t\t}", "+\t}", "+\tint /*long*/ pixbufRenderer = OS.gtk_cell_renderer_pixbuf_new ();", "+\tif (pixbufRenderer == 0) error (SWT.ERROR_NO_HANDLES);", "+\tint /*long*/ textRenderer = OS.gtk_cell_renderer_text_new ();", "+\tif (textRenderer == 0) error (SWT.ERROR_NO_HANDLES);", "+\t", "+\t/*", "+\t* Feature on GTK.  When a tree view column contains only one activatable", "+\t* cell renderer such as a toggle renderer, mouse clicks anywhere in a cell", "+\t* activate that renderer. The workaround is to set a second  cell renderer", "+\t* to be activatable.", "+\t*/", "+\tif ((style & SWT.CHECK) != 0 && check) {", "+\t\tOS.g_object_set (pixbufRenderer, OS.mode, OS.GTK_CELL_RENDERER_MODE_ACTIVATABLE, 0);", "+\t}", "+", "+\t/* Set alignment */", "+\tif ((columnStyle & SWT.RIGHT) != 0) {", "+\t\tOS.g_object_set (textRenderer, OS.xalign, 1f, 0);", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, false);", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, textRenderer, true);", "+\t\tOS.gtk_tree_view_column_set_alignment (columnHandle, 1f);", "+\t} else if ((columnStyle & SWT.CENTER) != 0) {", "+\t\tOS.g_object_set (textRenderer, OS.xalign, 0.5f, 0);", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, false);", "+\t\tOS.gtk_tree_view_column_pack_end (columnHandle, textRenderer, true);", "+\t\tOS.gtk_tree_view_column_set_alignment (columnHandle, 0.5f);", "+\t} else {", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, false);", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, textRenderer, true);", "+\t\tOS.gtk_tree_view_column_set_alignment (columnHandle, 0f);", "+\t}", "+", "+\t/* Add attributes */", "+\tOS.gtk_tree_view_column_add_attribute (columnHandle, pixbufRenderer, OS.pixbuf, modelIndex + CELL_PIXBUF);", "+\t/*", "+\t * Bug on GTK. Gtk renders the background on top of the pixbuf.", "+\t * This only happens in version 2.2.1 and earlier. The fix is not to set the background.   ", "+\t */", "+\tif (OS.GTK_VERSION > OS.VERSION (2, 2, 1)) {", "+\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, pixbufRenderer, OS.cell_background_gdk, BACKGROUND_COLUMN);", "+\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, OS.background_gdk, BACKGROUND_COLUMN);", "+\t}", "+\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, OS.text, modelIndex + CELL_TEXT);", "+\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, OS.foreground_gdk, FOREGROUND_COLUMN);", "+\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, OS.font_desc, FONT_COLUMN);", "+\t", "+\tboolean customDraw = firstCustomDraw;", "+\tif (columnCount != 0) {", "+\t\tfor (int i=0; i<columnCount; i++) {", "+\t\t\tif (columns [i].handle == columnHandle) {", "+\t\t\t\tcustomDraw = columns [i].customDraw;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif ((style & SWT.VIRTUAL) != 0 || customDraw) {", "+\t\tOS.gtk_tree_view_column_set_cell_data_func (columnHandle, textRenderer, display.textCellDataProc, handle, 0);", "+\t\tOS.gtk_tree_view_column_set_cell_data_func (columnHandle, pixbufRenderer, display.pixbufCellDataProc, handle, 0);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4eed1563a5c295362366c858da0c76a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "cc7a79cec8920b1b6175a6c2124e7f63a3823262", "commitAfterChange": "d8f34c9ec09bc11f5d7b71293f9d378725f3146c", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 43, "signatureBeforeChange": "  int gtk_button_press_event (int widget, int event)", "signatureAfterChange": "  int gtk_button_press_event (int widget, int event)", "diff": ["+", "+int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {", "+\tGdkEventButton gdkEvent = new GdkEventButton ();", "+\tOS.memmove (gdkEvent, event, GdkEventButton.sizeof);", "+\tif (gdkEvent.window != OS.gtk_tree_view_get_bin_window (handle)) return 0;", "+\tint border = getBorderWidth ();", "+\tint headerHeight = getHeaderHeight ();", "+\tgdkEvent.x += border;", "+\tgdkEvent.y += headerHeight;", "+\tOS.memmove (event, gdkEvent, GdkEventButton.sizeof);", "+\tint /*long*/ result = super.gtk_button_press_event (widget, event);", "+\tgdkEvent.x -= border;", "+\tgdkEvent.y -= headerHeight;", "+\tOS.memmove (event, gdkEvent, GdkEventButton.sizeof);", "+\tif (result != 0) return result;", "+\t/*", "+\t* Feature in GTK.  In a multi-select tree view, when multiple items are already", "+\t* selected, the selection state of the item is toggled and the previous selection ", "+\t* is cleared. This is not the desired behaviour when bringing up a popup menu.", "+\t* Also, when an item is reselected with the right button, the tree view issues", "+\t* an unwanted selection event. The workaround is to detect that case and not", "+\t* run the default handler when the item is already part of the current selection.", "+\t*/", "+\tint button = gdkEvent.button;", "+\tif (button == 3 && gdkEvent.type == OS.GDK_BUTTON_PRESS) {", "+\t\tint /*long*/ [] path = new int /*long*/ [1];", "+\t\tif (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {", "+\t\t\tif (path [0] != 0) {", "+\t\t\t\tint /*long*/ selection = OS.gtk_tree_view_get_selection (handle);", "+\t\t\t\tif (OS.gtk_tree_selection_path_is_selected (selection, path [0])) result = 1;", "+\t\t\t\tOS.gtk_tree_path_free (path [0]);", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+\t/*", "+\t* Feature in GTK.  When the user clicks in a single selection GtkTreeView", "+\t* and there are no selected items, the first item is selected automatically", "+\t* before the click is processed, causing two selection events.  The is fix", "+\t* is the set the cursor item to be same as the clicked item to stop the", "+\t* widget from automatically selecting the first item.", "+\t*/", "+\tif ((style & SWT.SINGLE) != 0 && getSelectionCount () == 0) {", "+\t\tint /*long*/ [] path = new int /*long*/ [1];", "+\t\tif (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {", "+\t\t\tif (path [0] != 0) {", "+\t\t\t\tint /*long*/ selection = OS.gtk_tree_view_get_selection (handle);", "+\t\t\t\tOS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "+\t\t\t\tOS.gtk_tree_view_set_cursor (handle, path [0], 0, false);", "+\t\t\t\tOS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "+\t\t\t\tOS.gtk_tree_path_free (path [0]);", "+\t\t\t}", "+\t\t}", "+\t}", "+\t/*", "+\t* Bug in GTK. GTK segments fault, if the GtkTreeView widget is", "+\t* not in focus and all items in the widget are disposed before", "+\t* it finishes processing a button press.  The fix is to give", "+\t* focus to the widget before it starts processing the event.", "+\t*/", "+\tif (!OS.GTK_WIDGET_HAS_FOCUS (handle)) {", "+\t\tOS.gtk_widget_grab_focus (handle);", "+\t}", "+\treturn result;", "+}", "-", "-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {", "-\tint /*long*/ result = super.gtk_button_press_event (widget, event);", "-\tif (result != 0) return result;", "-\t/*", "-\t* Feature in GTK.  In a multi-select tree view, when multiple items are already", "-\t* selected, the selection state of the item is toggled and the previous selection ", "-\t* is cleared. This is not the desired behaviour when bringing up a popup menu.", "-\t* Also, when an item is reselected with the right button, the tree view issues", "-\t* an unwanted selection event. The workaround is to detect that case and not", "-\t* run the default handler when the item is already part of the current selection.", "-\t*/", "-\tGdkEventButton gdkEvent = new GdkEventButton ();", "-\tOS.memmove (gdkEvent, event, GdkEventButton.sizeof);", "-\tint button = gdkEvent.button;", "-\tif (button == 3 && gdkEvent.type == OS.GDK_BUTTON_PRESS) {", "-\t\tint /*long*/ [] path = new int /*long*/ [1];", "-\t\tif (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {", "-\t\t\tif (path [0] != 0) {", "-\t\t\t\tint /*long*/ selection = OS.gtk_tree_view_get_selection (handle);", "-\t\t\t\tif (OS.gtk_tree_selection_path_is_selected (selection, path [0])) result = 1;", "-\t\t\t\tOS.gtk_tree_path_free (path [0]);", "-\t\t\t}", "-\t\t}", "-\t}", "-\t", "-\t/*", "-\t* Feature in GTK.  When the user clicks in a single selection GtkTreeView", "-\t* and there are no selected items, the first item is selected automatically", "-\t* before the click is processed, causing two selection events.  The is fix", "-\t* is the set the cursor item to be same as the clicked item to stop the", "-\t* widget from automatically selecting the first item.", "-\t*/", "-\tif ((style & SWT.SINGLE) != 0 && getSelectionCount () == 0) {", "-\t\tint /*long*/ [] path = new int /*long*/ [1];", "-\t\tif (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {", "-\t\t\tif (path [0] != 0) {", "-\t\t\t\tint /*long*/ selection = OS.gtk_tree_view_get_selection (handle);", "-\t\t\t\tOS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "-\t\t\t\tOS.gtk_tree_view_set_cursor (handle, path [0], 0, false);", "-\t\t\t\tOS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "-\t\t\t\tOS.gtk_tree_path_free (path [0]);", "-\t\t\t}", "-\t\t}", "-\t}", "-\t/*", "-\t* Bug in GTK. GTK segments fault, if the GtkTreeView widget is", "-\t* not in focus and all items in the widget are disposed before", "-\t* it finishes processing a button press.  The fix is to give", "-\t* focus to the widget before it starts processing the event.", "-\t*/", "-\tif (!OS.GTK_WIDGET_HAS_FOCUS (handle)) {", "-\t\tOS.gtk_widget_grab_focus (handle);", "-\t}", "-\treturn result;", "-}"]}], "num": 51892}
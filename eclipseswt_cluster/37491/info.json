{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "01ca8d715598d828d099c7b9be674da4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26946127293dc0275acc4cc23a156d97", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "e2ec65253a8e34657e931525b15536b9cdc64d53", "commitAfterChange": "cf338074634c02b2b71ed97fe4d0947e77d380e9", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 85, "signatureBeforeChange": "  void setToolTipText (int widget, String string)", "signatureAfterChange": "  void setToolTipText (int widget, String newString, String oldString)", "diff": ["-void setToolTipText (int /*long*/ widget, String string) {", "+void setToolTipText (int /*long*/ widget, String newString, String oldString) {", "-\tif (string != null && string.length () > 0) {", "-\t\tbuffer = Converter.wcsToMbcs (null, string, true);", "+\tif (newString != null && newString.length () > 0) {", "+\t\tbuffer = Converter.wcsToMbcs (null, newString, true);", "+", "+\t/*", "+\t* Feature in GTK.  There is no API to position a tooltip.", "+\t* The fix is to connect to the size_allocate signal for", "+\t* the tooltip window and position it before it is mapped.", "+\t*/", "+\tOS.gtk_tooltips_force_window (tooltipsHandle);", "+\tint /*long*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (tooltipsHandle);", "+\tif (tipWindow != tooltipWindow) {", "+\t\tOS.g_signal_connect (tipWindow, OS.size_allocate, display.sizeAllocateProc, shellHandle);", "+\t\ttooltipWindow = tipWindow;", "+\t}", "+\t", "+\t/*", "+\t* Bug in GTK.  If the cursor is inside the window when a new", "+\t* tooltip is set and the old tooltip is null, the new tooltip", "+\t* is not displayed until the mouse enters the window.  The", "+\t* fix is to cause and enter/leave event to happen by creating", "+\t* a temporary INPUT_ONLY GDK window.", "+\t*/", "+\tif ((OS.GTK_WIDGET_FLAGS (widget) & OS.GTK_REALIZED) == 0) return;", "+\tif ((OS.GTK_WIDGET_FLAGS (widget) & OS.GTK_VISIBLE) == 0) return;", "+\tif (oldString == null || oldString.length () == 0) {", "+\t\tif (newString != null && newString.length () != 0) {", "+\t\t\tint[] x = new int [1], y = new int [1];", "+\t\t\tint /*long*/ window = OS.gdk_window_at_pointer (x, y);", "+\t\t\tif (window != 0) {", "+\t\t\t\tint /*long*/ [] user_data = new int /*long*/ [1];", "+\t\t\t\tOS.gdk_window_get_user_data (window, user_data);", "+\t\t\t\tif (widget == user_data [0]) {", "+\t\t\t\t\tint /*long*/ parentHandle = OS.gtk_widget_get_parent (widget);", "+\t\t\t\t\tint /*long*/ parentWindow = OS.GTK_WIDGET_WINDOW (parentHandle);", "+\t\t\t\t\tGdkWindowAttr attributes = new GdkWindowAttr ();", "+\t\t\t\t\tattributes.width = OS.GTK_WIDGET_WIDTH (parentHandle);", "+\t\t\t\t\tattributes.height = OS.GTK_WIDGET_HEIGHT (parentHandle);", "+\t\t\t\t\tattributes.event_mask = (0xFFFFFFFF & ~OS.ExposureMask);", "+\t\t\t\t\tattributes.wclass = OS.GDK_INPUT_ONLY;", "+\t\t\t\t\tattributes.window_type = OS.GDK_WINDOW_CHILD;", "+\t\t\t\t\tint enterWindow = OS.gdk_window_new (parentWindow, attributes, OS.GDK_WA_X | OS.GDK_WA_Y);", "+\t\t\t\t\tif (enterWindow != 0) {", "+\t\t\t\t\t\tOS.gdk_window_raise (enterWindow);", "+\t\t\t\t\t\tOS.gdk_window_show (enterWindow);", "+\t\t\t\t\t\tOS.gdk_window_destroy (enterWindow);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "795a8711d9dbb47551ed4320bfaa19b9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "62848e80248a4ec169cf2f914e64f41448cf93e7", "commitAfterChange": "dee160fb77b5c2e7ab5959e6351f379e6f244071", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": "  void setToolTipText (int widget, String newString, String oldString)", "signatureAfterChange": "  void setToolTipText (int widget, String string)", "diff": ["-void setToolTipText (int /*long*/ widget, String newString, String oldString) {", "+void setToolTipText (int /*long*/ widget, String string) {", "-\tif (newString != null && newString.length () > 0) {", "-\t\tbuffer = Converter.wcsToMbcs (null, newString, true);", "+\tif (string != null && string.length () > 0) {", "+\t\tbuffer = Converter.wcsToMbcs (null, string, true);", "-\t* tooltip is set and the old tooltip is null, the new tooltip", "-\t* is not displayed until the mouse enters the window.  The", "-\t* fix is to cause and enter/leave event to happen by creating", "-\t* a temporary INPUT_ONLY GDK window.", "+\t* tooltip is set and the old tooltip is hidden, the new tooltip", "+\t* is not displayed until the mouse re-enters the window.  The", "+\t* fix is force the new tooltip active.", "-\tif (oldString == null || oldString.length () == 0) {", "-\t\tif (newString != null && newString.length () != 0) {", "-\t\t\tint[] x = new int [1], y = new int [1];", "-\t\t\tint /*long*/ window = OS.gdk_window_at_pointer (x, y);", "-\t\t\tif (window != 0) {", "-\t\t\t\tint /*long*/ [] user_data = new int /*long*/ [1];", "-\t\t\t\tOS.gdk_window_get_user_data (window, user_data);", "-\t\t\t\tif (widget == user_data [0]) {", "-\t\t\t\t\tint /*long*/ data = OS.gtk_tooltips_data_get (widget);", "-\t\t\t\t\tOS.GTK_TOOLTIPS_SET_ACTIVE (tooltipsHandle, data);", "-\t\t\t\t\tOS.gtk_tooltips_set_tip (tooltipsHandle, widget, buffer, null);", "-\t\t\t\t}", "-\t\t\t}", "+\tint[] x = new int [1], y = new int [1];", "+\tint /*long*/ window = OS.gdk_window_at_pointer (x, y);", "+\tif (window != 0) {", "+\t\tint /*long*/ [] user_data = new int /*long*/ [1];", "+\t\tOS.gdk_window_get_user_data (window, user_data);", "+\t\tif (widget == user_data [0]) {", "+\t\t\tint /*long*/ data = OS.gtk_tooltips_data_get (widget);", "+\t\t\tOS.GTK_TOOLTIPS_SET_ACTIVE (tooltipsHandle, data);", "+\t\t\tOS.gtk_tooltips_set_tip (tooltipsHandle, widget, buffer, null);"]}], "num": 37491}
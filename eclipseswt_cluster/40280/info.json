{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb74ffc83be5ca64ddf0f570abef7e9c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d85fb205bfea862eff4a1d3cb95b1995", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/carbon/org/eclipse/swt/program/Program.java", "commitBeforeChange": "589c1ec7b77d39c8770bf37f2bb671074c60dc5b", "commitAfterChange": "8d27542b5364358690f55f77bc0c995713708d46", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": " public boolean execute (String fileName)", "signatureAfterChange": " public boolean execute (String fileName)", "diff": ["-\tif (fileName == null) SWT.error (SWT.ERROR_NULL_ARGUMENT);", "-\tboolean quote = true;", "-\tString prefix = command, suffix = \"\";", "-\tint index = command.indexOf (\"%1\");", "-\tif (index != -1) {", "-\t\tint count=0;", "-\t\tint i=index + 2, length = command.length ();", "-\t\twhile (i < length) {", "-\t\t\tif (command.charAt (i) == '\"') count++;", "-\t\t\ti++;", "+\tif (fileName == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+\t", "+\t/* Parse the command into its individual arguments. */", "+\tString[] args = parseCommand(command);", "+\tint fileArg = -1;", "+\tint index;", "+\tfor (index = 0; index < args.length; index++) {", "+\t\tint j = args[index].indexOf(\"%f\");", "+\t\tif (j != -1) {", "+\t\t\tString value = args[index];", "+\t\t\tfileArg = index;", "+\t\t\targs[index] = value.substring(0, j) + fileName + value.substring(j + 2);", "-\t\tquote = count % 2 == 0;", "-\t\tprefix = command.substring (0, index);", "-\t\tsuffix = command.substring (index + 2, length);", "-\tif (quote) fileName = \" \\\"\" + fileName + \"\\\"\";", "+", "+\t/* If a file name was given but the command did not have \"%f\" */", "+\tif ((fileName.length() > 0) && (fileArg < 0)) {", "+\t\tString[] newArgs = new String[args.length + 1];", "+\t\tfor (index = 0; index < args.length; index++) newArgs[index] = args[index];", "+\t\tnewArgs[args.length] = fileName;", "+\t\targs = newArgs;", "+\t}", "+", "+\t/* Execute the command. */", "-\t\tCompatibility.exec(prefix + fileName + suffix);", "+\t\tCompatibility.exec(args);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0405c1dd9b0e71fe31fdb7843fb1e643", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "e5acbe6c16a694c7f3c29cf4f69a551bf55b4776", "commitAfterChange": "0a7e0762eb6a91569487ff333d468559f2ea1861", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 94, "signatureBeforeChange": "\r \r void setBounds (int x, int y, int width, int height, int flags)", "signatureAfterChange": "\r \r void setBounds (int x, int y, int width, int height, int flags)", "diff": ["-\tint count = parent.getChildrenCount ();\r", "-\tif (parent.hdwp == 0) {\r", "-\t\tif (count > 1) {\r", "-\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);\r", "-\t\t\tif ((bits & OS.WS_CLIPSIBLINGS) == 0) flags |= OS.SWP_NOCOPYBITS;\r", "-\t\t}\r", "+\tif (parent.lpwp == null) {\r", "+\t\t/*\r", "+\t\t* This code is intentionally commented.  All widgets that\r", "+\t\t* are created by SWT have WS_CLIPSIBLINGS to ensure that\r", "+\t\t* application code does not draw outside of the control.\r", "+\t\t*/\r", "+//\t\tint count = parent.getChildrenCount ();\r", "+//\t\tif (count > 1) {\r", "+//\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);\r", "+//\t\t\tif ((bits & OS.WS_CLIPSIBLINGS) == 0) flags |= OS.SWP_NOCOPYBITS;\r", "+//\t\t}\r", "-\tint hdwp = OS.DeferWindowPos (parent.hdwp, handle, 0, x, y, width, height, flags);\r", "-\tif (hdwp == 0) {\r", "-\t\tint oldHdwp = parent.hdwp;\r", "-\t\tparent.hdwp = 0;\r", "-\t\tOS.EndDeferWindowPos (oldHdwp);\r", "-\t\tif (count > 1) hdwp = OS.BeginDeferWindowPos (count);\r", "+\tforceResize ();\r", "+\tWINDOWPOS [] lpwp = parent.lpwp;\r", "+\tint index = 0;\r", "+\twhile (index < lpwp.length) {\r", "+\t\tif (lpwp [index] == null) break;\r", "+\t\tindex ++;\r", "-\tparent.hdwp = hdwp;\r", "+\tif (index == lpwp.length) {\r", "+\t\tWINDOWPOS [] newLpwp = new WINDOWPOS [lpwp.length + 4];\r", "+\t\tSystem.arraycopy (lpwp, 0, newLpwp, 0, lpwp.length);\r", "+\t\tparent.lpwp = lpwp = newLpwp;\r", "+\t}\r", "+\tWINDOWPOS wp = new WINDOWPOS ();\r", "+\twp.hwnd = handle;\r", "+\twp.x = x;\r", "+\twp.y = y;\r", "+\twp.cx = width;\r", "+\twp.cy = height;\r", "+\twp.flags = flags;\r", "+\tlpwp [index] = wp;\r"]}], "num": 40280}
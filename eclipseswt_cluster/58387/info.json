{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8773170f47da5f7319da347f1112b9dc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2ddef6bf5199b5b6adf420bc33cffb7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Group.java", "commitBeforeChange": "d62d95171d1b9884e29ffebb40505397ee01c22b", "commitAfterChange": "bef1bdbd7048feb0ad77f320e25be5e5f6cc6607", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public Rectangle computeTrim (int x, int y, int width, int height)", "signatureAfterChange": "  public Rectangle computeTrim (int x, int y, int width, int height)", "diff": ["-\tNSSize margins = widget.contentViewMargins();", "+\tNSRect titleRect = widget.titleRect();", "+\tfloat borderWidth = widget.borderWidth();", "-\twidth += margins.width * 2;", "-\theight += margins.height * 2 + frame.y;", "+\twidth += borderWidth * 2 + frame.x;", "+\theight += borderWidth * 2 + titleRect.height + frame.y;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffeaa29b659073e57ff804048f2d3a62", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextBidi.java", "commitBeforeChange": "5ba9287f6caa82e9989a01a562fc97d015948ef7", "commitAfterChange": "8c259c2fdd0bffd2ea76820f5d04cd4a52c2e4a7", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " private Vector getDirectionRuns(int logicalStart, int length)", "signatureAfterChange": " private Vector getDirectionRuns(int logicalStart, int length)", "diff": ["+\tint checkSide = isRightOriented ? -1 : 1;  ", "-\t\t\t\t\t((isRightToLeftSegment && (order[segmentLogicalEnd + 1]+ 1 == order[segmentLogicalEnd])) ||", "-\t\t\t\t\t(isRightToLeftSegment == false && (order[segmentLogicalEnd + 1]- 1 == order[segmentLogicalEnd]))) &&", "+\t\t\t\t  \t(order[segmentLogicalEnd + 1] == order[segmentLogicalEnd] || \t// treat ligatures as part of the direction segment", "+  \t\t\t\t\t(isRightToLeftSegment && (order[segmentLogicalEnd + 1] + checkSide == order[segmentLogicalEnd])) ||", "+\t\t\t\t\t(isRightToLeftSegment == false && (order[segmentLogicalEnd + 1] - checkSide == order[segmentLogicalEnd]))) &&"]}], "num": 58387}
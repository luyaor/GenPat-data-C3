{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dae1a7d8f6b96e835d4b439a78b5e188", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5bf79378be214ae5986e4841708bbef", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "8b753b0ebc77f81709855554fdc470c17af87b20", "commitAfterChange": "2582197191fb20feaee2c873f27f037e4402a98c", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 141, "signatureBeforeChange": "  boolean runSettings ()", "signatureAfterChange": "  boolean runSettings ()", "diff": ["-\tinitColors ();", "+\t", "+\tboolean ignoreColorChange = false;", "+\t/**", "+\t * Feature in Cocoa: When dark mode is enabled on OSX version >= 10.10 and a SWT TrayItem (NSStatusItem) is present in the menubar,", "+\t * changing the OSX appearance or changing the configuration of attached displays causes the textColor and textBackground color to change. ", "+\t * This sets the text foreground of several widgets as white and hence text is invisible. The workaround is to detect this case and prevent ", "+\t * the update of LIST_FOREGROUND, LIST_BACKGROUND and COLOR_WIDGET_FOREGROUND colors.", "+\t */", "+\tif (OS.VERSION_MMB >= OS.VERSION_MMB (10, 10, 0) && tray != null && tray.itemCount > 0) {", "+\t\t/* ", "+\t\t * osxMode will be \"Dark\" when in OSX dark mode. Otherwise, it'll be null.", "+\t\t */", "+\t\tNSString osxMode = NSUserDefaults.standardUserDefaults ().stringForKey (NSString.stringWith (\"AppleInterfaceStyle\"));", "+\t\tif (osxMode != null && \"Dark\".equals (osxMode.getString ())) {", "+\t\t\tignoreColorChange = true;", "+\t\t}", "+\t}", "+\tinitColors (ignoreColorChange);", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9653e4ecb690a6cbc44bd10377a73cb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "344495d193406fcc18fd9d953e0e7125082dc624", "commitAfterChange": "3e7cd17b0f25301421344ef85e8eac75a5a11cf2", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  void layoutItems ()", "signatureAfterChange": "  void layoutItems ()", "diff": ["+", "+\t/*", "+\t* Feature on Windows. When SWT.WRAP or SWT.VERTICAL are set", "+\t* the separator items with control are implemented using BTNS_BUTTON ", "+\t* instead of BTNS_SEP. When that is the case and TBSTYLE_LIST is ", "+\t* set, the layout of the ToolBar recalculates the width for all ", "+\t* BTNS_BUTTON based on the text and bitmap of the item.", "+\t* This is not strictly wrong, but the user defined width for the", "+\t* separators has to be respected if set.", "+\t* The fix is to detect this case and reset the cx width for the item.  ", "+\t*/", "+\tif ((style & (SWT.WRAP | SWT.VERTICAL)) != 0) {", "+\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\tif ((bits & OS.TBSTYLE_LIST) != 0) {", "+\t\t\tTBBUTTONINFO info = new TBBUTTONINFO ();", "+\t\t\tinfo.cbSize = TBBUTTONINFO.sizeof;", "+\t\t\tinfo.dwMask = OS.TBIF_SIZE;", "+\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\tToolItem item = items [i];", "+\t\t\t\tif (item != null && item.cx > 0) {", "+\t\t\t\t\tinfo.cx = item.cx;", "+\t\t\t\t\tOS.SendMessage (handle, OS.TB_SETBUTTONINFO, item.id, info);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\t"]}], "num": 24130}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a418a5d4609a3b57e1d30fa1410738a3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baf179dbb2e3579273bc9238dfd12f5d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGeneratorAppUI.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  void createMembersPanel(Composite panel)", "signatureAfterChange": "  void createMembersPanel(Composite panel)", "diff": ["-\t\t\tItemData memberData = (ItemData)item.getData();", "+\t\t\tJNIItem memberData = (JNIItem)item.getData();", "-\t\t\tMetaData metaData = app.getMetaData();", "-\t\t\tif (memberData instanceof FieldData) {", "-\t\t\t\tFieldData fieldData = (FieldData)memberData;", "+\t\t\tif (memberData instanceof JNIField) {", "+\t\t\t\tJNIField field = (JNIField)memberData;", "-\t\t\t\t\t\tfieldData.setCast(text);", "-\t\t\t\t\t\titem.setText(column, fieldData.getCast());", "+\t\t\t\t\t\tfield.setCast(text);", "+\t\t\t\t\t\titem.setText(column, field.getCast());", "-\t\t\t\t\t\tfieldData.setAccessor(text.equals(fieldData.getField().getName()) ? \"\" : text);", "-\t\t\t\t\t\titem.setText(column, fieldData.getAccessor());", "+\t\t\t\t\t\tfield.setAccessor(text.equals(field.getName()) ? \"\" : text);", "+\t\t\t\t\t\titem.setText(column, field.getAccessor());", "-\t\t\t\t\t\tfieldData.setExclude(text);", "-\t\t\t\t\t\titem.setText(column, fieldData.getExclude());", "+\t\t\t\t\t\tfield.setExclude(text);", "+\t\t\t\t\t\titem.setText(column, field.getExclude());", "-\t\t\t\tmetaData.setMetaData(fieldData.getField(), fieldData);", "-\t\t\t} else if (memberData instanceof MethodData) {", "-\t\t\t\tMethodData methodData = (MethodData)memberData;", "+\t\t\t} else if (memberData instanceof JNIMethod) {", "+\t\t\t\tJNIMethod method = (JNIMethod)memberData;", "-\t\t\t\t\t\tmethodData.setAccessor(text.equals(methodData.getMethod().getName()) ? \"\" : text);", "-\t\t\t\t\t\titem.setText(column, methodData.getAccessor());", "+\t\t\t\t\t\tmethod.setAccessor(text.equals(method.getName()) ? \"\" : text);", "+\t\t\t\t\t\titem.setText(column, method.getAccessor());", "-\t\t\t\t\t\tmethodData.setExclude(text);", "-\t\t\t\t\t\titem.setText(column, methodData.getExclude());", "+\t\t\t\t\t\tmethod.setExclude(text);", "+\t\t\t\t\t\titem.setText(column, method.getExclude());", "-\t\t\t\tmetaData.setMetaData(methodData.getMethod(), methodData);", "-\t\t\tItemData data = (ItemData)item.getData();", "+\t\t\tJNIItem data = (JNIItem)item.getData();", "-\t\t\tMetaData metaData = app.getMetaData();", "-\t\t\tif (data instanceof FieldData) {", "-\t\t\t\tFieldData fieldData = (FieldData)data;", "-\t\t\t\tmetaData.setMetaData(fieldData.getField(), fieldData);", "-\t\t\t\tmembersLt.getColumn(column).pack();", "-\t\t\t} else if (data instanceof MethodData) {", "-\t\t\t\tMethodData methodData = (MethodData)data;", "-\t\t\t\tmetaData.setMetaData(methodData.getMethod(), methodData);", "-\t\t\t\tmembersLt.getColumn(column).pack();", "-\t\t\t}", "+\t\t\tmembersLt.getColumn(column).pack();", "-\t\t\t\t\tItemData itemData = (ItemData)item.getData();", "-\t\t\t\t\tif (itemData instanceof FieldData) {", "-\t\t\t\t\t\tFieldData data = (FieldData)itemData;", "+\t\t\t\t\tObject itemData = item.getData();", "+\t\t\t\t\tif (itemData instanceof JNIField) {", "+\t\t\t\t\t\tJNIField field = (JNIField)itemData;", "-\t\t\t\t\t\t\t\tcase FIELD_CAST_COLUMN: text = data.getCast(); break;", "+\t\t\t\t\t\t\t\tcase FIELD_CAST_COLUMN: text = field.getCast(); break;", "-\t\t\t\t\t\t\t\t\ttext = data.getAccessor(); ", "+\t\t\t\t\t\t\t\t\ttext = field.getAccessor(); ", "-\t\t\t\t\t\t\t\t\t\ttext = data.getField().getName();", "+\t\t\t\t\t\t\t\t\t\ttext = field.getName();", "-\t\t\t\t\t\t\t\tcase FIELD_EXCLUDE_COLUMN: text = data.getExclude(); break;", "+\t\t\t\t\t\t\t\tcase FIELD_EXCLUDE_COLUMN: text = field.getExclude(); break;", "-\t\t\t\t\t\t\tmemberEditorLt.setItems(FieldData.getAllFlags());", "-\t\t\t\t\t\t\tmemberEditorLt.setSelection(data.getFlags());", "+\t\t\t\t\t\t\tmemberEditorLt.setItems(JNIField.FLAGS);", "+\t\t\t\t\t\t\tmemberEditorLt.setSelection(field.getFlags());", "-\t\t\t\t\t} else if (itemData instanceof MethodData) {", "-\t\t\t\t\t\tMethodData data = (MethodData)itemData;", "+\t\t\t\t\t} else if (itemData instanceof JNIMethod) {", "+\t\t\t\t\t\tJNIMethod method = (JNIMethod)itemData;", "-\t\t\t\t\t\t\t\t\ttext = data.getAccessor();", "-\t\t\t\t\t\t\t\t\tif (text.length() == 0) text = data.getMethod().getName();", "+\t\t\t\t\t\t\t\t\ttext = method.getAccessor();", "+\t\t\t\t\t\t\t\t\tif (text.length() == 0) text = method.getName();", "-\t\t\t\t\t\t\t\tcase METHOD_EXCLUDE_COLUMN: text = data.getExclude(); break;", "+\t\t\t\t\t\t\t\tcase METHOD_EXCLUDE_COLUMN: text = method.getExclude(); break;", "-\t\t\t\t\t\t\tmemberEditorLt.setItems(MethodData.getAllFlags());", "-\t\t\t\t\t\t\tmemberEditorLt.setSelection(data.getFlags());", "+\t\t\t\t\t\t\tmemberEditorLt.setItems(JNIMethod.FLAGS);", "+\t\t\t\t\t\t\tmemberEditorLt.setSelection(method.getFlags());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5fd294012edb09b4708d5cbd71d55c8e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "6b0a245288556e7224d3c56682401ca81ba95245", "commitAfterChange": "4dbd09dcd54c5e8b8416ccbe2fdfacc6901be61f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-\tif (transferData.data.length == 0) return null;", "-\tint count = transferData.data.length;", "+\tNSArray array = (NSArray) transferData.data;", "+\tif (array.count() == 0) return null;", "+\tint count = array.count();", "-\t\tbyte[] data = transferData.data[i];", "-\t\tint url = 0;", "-\t\tif (transferData.type == HFSID) {", "-\t\t\tbyte[] fsspec = new byte[data.length - 10];", "-\t\t\tSystem.arraycopy(data, 10, fsspec, 0, fsspec.length);", "-\t\t\tbyte[] fsRef = new byte[80];", "-\t\t\tif (OS.FSpMakeFSRef(fsspec, fsRef) != OS.noErr) return null;", "-\t\t\turl = OS.CFURLCreateFromFSRef(OS.kCFAllocatorDefault, fsRef);", "-\t\t\tif (url == 0) return null;", "-\t\t}", "-\t\tif (transferData.type == FURLID) {", "-\t\t\tint encoding = OS.kCFStringEncodingUTF8;", "-\t\t\turl = OS.CFURLCreateWithBytes(OS.kCFAllocatorDefault, data, data.length, encoding, 0);", "-\t\t\tif (url == 0) return null;", "-\t\t}", "-\t\ttry {", "-\t\t\tint path = OS.CFURLCopyFileSystemPath(url, OS.kCFURLPOSIXPathStyle);", "-\t\t\tif (path == 0) return null;", "-\t\t\ttry {", "-\t\t\t\tint length = OS.CFStringGetLength(path);", "-\t\t\t\tif (length == 0) return null;", "-\t\t\t\tchar[] buffer= new char[length];", "-\t\t\t\tCFRange range = new CFRange();", "-\t\t\t\trange.length = length;", "-\t\t\t\tOS.CFStringGetCharacters(path, range, buffer);", "-\t\t\t\tfileNames[i] = new String(buffer);", "-\t\t\t} finally {", "-\t\t\t\tOS.CFRelease(path);", "-\t\t\t}", "-\t\t} finally {", "-\t\t\tOS.CFRelease(url);", "-\t\t}", "+\t\tNSString string = new NSString(array.objectAtIndex(i));", "+\t\tchar[] chars = new char[string.length()];", "+\t\tstring.getCharacters_(chars);", "+\t\tfileNames[i] = new String(chars);"]}], "num": 24560}
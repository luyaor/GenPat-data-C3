{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83c93e1256ee25b1fd8a46e5a5a4342c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2773a60ce81649b161983cf4cc15de53", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "770424cb90ac09b444a2b31992d2c7b5853208d6", "commitAfterChange": "270369a2774c9adb72d20072ee39a162882a5dda", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["-\t\t\tOS.GetDIBits(hBitmapDC, hBitmap, 0, height, 0, bmi, OS.DIB_RGB_COLORS);", "+\t\t\tOS.GetDIBits(hBitmapDC, hBitmap, 0, height, null, bmi, OS.DIB_RGB_COLORS);", "-\t\t\tint /*long*/ hHeap = OS.GetProcessHeap();", "-\t\t\tint /*long*/ lpvBits = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, imageSize);", "-\t\t\tif (lpvBits == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\tOS.GetDIBits(hBitmapDC, hBitmap, 0, height, lpvBits, bmi, OS.DIB_RGB_COLORS);", "-\t\t\tOS.MoveMemory(data, lpvBits, imageSize);", "+\t\t\tOS.GetDIBits(hBitmapDC, hBitmap, 0, height, data, bmi, OS.DIB_RGB_COLORS);", "-\t\t\t\tOS.GetDIBits(hBitmapDC, hBitmap, height, height, lpvBits, bmi, OS.DIB_RGB_COLORS);", "-\t\t\t\tOS.MoveMemory(maskData, lpvBits, imageSize);", "+\t\t\t\tOS.GetDIBits(hBitmapDC, hBitmap, height, height, maskData, bmi, OS.DIB_RGB_COLORS);", "-\t\t\t\tOS.GetDIBits(hBitmapDC, info.hbmMask, 0, height, 0, bmi, OS.DIB_RGB_COLORS);", "+\t\t\t\tOS.GetDIBits(hBitmapDC, info.hbmMask, 0, height, null, bmi, OS.DIB_RGB_COLORS);", "-\t\t\t\tint /*long*/ lpvMaskBits = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, imageSize);", "-\t\t\t\tif (lpvMaskBits == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\t\tOS.GetDIBits(hBitmapDC, info.hbmMask, 0, height, lpvMaskBits, bmi, OS.DIB_RGB_COLORS);", "-\t\t\t\tOS.MoveMemory(maskData, lpvMaskBits, imageSize);\t", "-\t\t\t\tOS.HeapFree(hHeap, 0, lpvMaskBits);", "+\t\t\t\tOS.GetDIBits(hBitmapDC, info.hbmMask, 0, height, maskData, bmi, OS.DIB_RGB_COLORS);", "-\t\t\tOS.HeapFree(hHeap, 0, lpvBits);", "-\t\t\t\tOS.GetDIBits(hBitmapDC, handle, 0, height, 0, bmi, OS.DIB_RGB_COLORS);", "+\t\t\t\tOS.GetDIBits(hBitmapDC, handle, 0, height, null, bmi, OS.DIB_RGB_COLORS);", "-\t\t\t\tint /*long*/ hHeap = OS.GetProcessHeap();", "-\t\t\t\tint /*long*/ lpvBits = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, imageSize);", "-\t\t\t\tif (lpvBits == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\t\tOS.GetDIBits(hBitmapDC, handle, 0, height, lpvBits, bmi, OS.DIB_RGB_COLORS);", "-\t\t\t\tOS.MoveMemory(data, lpvBits, imageSize);", "-\t\t\t\tOS.HeapFree(hHeap, 0, lpvBits);", "+\t\t\t\tOS.GetDIBits(hBitmapDC, handle, 0, height, data, bmi, OS.DIB_RGB_COLORS);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6858a3123cb647bba15309f0ab7b8351", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void copyArea(Image image, int x, int y)", "signatureAfterChange": " public void copyArea(Image image, int x, int y)", "diff": ["-\t\t\tint /*long*/ contextID = OS.objc_msgSend(NSApplication.sharedApplication().id, OS.sel_contextID);", "+\t\t\tlong /*int*/ contextID = OS.objc_msgSend(NSApplication.sharedApplication().id, OS.sel_contextID);", "-\t\t\tint /*long*/ displays = OS.malloc(4 * displayCount), countPtr = OS.malloc(4);", "+\t\t\tlong /*int*/ displays = OS.malloc(4 * displayCount), countPtr = OS.malloc(4);", "-\t\t\t\tint /*long*/ srcImage = 0;", "-\t\t\t\tint /*long*/ address = OS.VERSION >= 0x1070 ? 0 : OS.CGDisplayBaseAddress(display[0]);", "+\t\t\t\tlong /*int*/ srcImage = 0;", "+\t\t\t\tlong /*int*/ address = OS.VERSION >= 0x1070 ? 0 : OS.CGDisplayBaseAddress(display[0]);", "-\t\t\t\t\tint /*long*/ width = OS.CGDisplayPixelsWide(display[0]);", "-\t\t\t\t\tint /*long*/ height = OS.CGDisplayPixelsHigh(display[0]);", "-\t\t\t\t\tint /*long*/ bpr = OS.CGDisplayBytesPerRow(display[0]);", "-\t\t\t\t\tint /*long*/ bpp = OS.CGDisplayBitsPerPixel(display[0]);", "-\t\t\t\t\tint /*long*/ bps = OS.CGDisplayBitsPerSample(display[0]);", "+\t\t\t\t\tlong /*int*/ width = OS.CGDisplayPixelsWide(display[0]);", "+\t\t\t\t\tlong /*int*/ height = OS.CGDisplayPixelsHigh(display[0]);", "+\t\t\t\t\tlong /*int*/ bpr = OS.CGDisplayBytesPerRow(display[0]);", "+\t\t\t\t\tlong /*int*/ bpp = OS.CGDisplayBitsPerPixel(display[0]);", "+\t\t\t\t\tlong /*int*/ bps = OS.CGDisplayBitsPerSample(display[0]);", "-\t\t\t\t\t\tint /*long*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "-\t\t\t\t\t\tint /*long*/ context = OS.CGBitmapContextCreate(address, width, height, bps, bpr, colorspace, bitmapInfo);", "+\t\t\t\t\t\tlong /*int*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "+\t\t\t\t\t\tlong /*int*/ context = OS.CGBitmapContextCreate(address, width, height, bps, bpr, colorspace, bitmapInfo);", "-\t\t\t\t\t\tint /*long*/ provider = OS.CGDataProviderCreateWithData(0, address, bpr * height, 0);", "-\t\t\t\t\t\tint /*long*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "+\t\t\t\t\t\tlong /*int*/ provider = OS.CGDataProviderCreateWithData(0, address, bpr * height, 0);", "+\t\t\t\t\t\tlong /*int*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39a267029445440dd346e304570cf8df", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TableDragSourceEffect.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tImage getDragSourceImage(DragSourceEvent event)", "signatureAfterChange": " \t \tImage getDragSourceImage(DragSourceEvent event)", "diff": ["-\t\t\t\tint /*long*/ hImage = shdi.hbmpDragImage;", "+\t\t\t\tlong /*int*/ hImage = shdi.hbmpDragImage;", "-\t\t\t\t\tint /*long*/ hdc = OS.GetDC (0);", "-\t\t\t\t\tint /*long*/ srcHdc = OS.CreateCompatibleDC (hdc);", "-\t\t\t\t\tint /*long*/ oldSrcBitmap = OS.SelectObject (srcHdc, hImage);", "-\t\t\t\t\tint /*long*/ memHdc = OS.CreateCompatibleDC (hdc);", "+\t\t\t\t\tlong /*int*/ hdc = OS.GetDC (0);", "+\t\t\t\t\tlong /*int*/ srcHdc = OS.CreateCompatibleDC (hdc);", "+\t\t\t\t\tlong /*int*/ oldSrcBitmap = OS.SelectObject (srcHdc, hImage);", "+\t\t\t\t\tlong /*int*/ memHdc = OS.CreateCompatibleDC (hdc);", "-\t\t\t\t\tint /*long*/ [] pBits = new int /*long*/ [1];", "-\t\t\t\t\tint /*long*/ memDib = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "+\t\t\t\t\tlong /*int*/ [] pBits = new long /*int*/ [1];", "+\t\t\t\t\tlong /*int*/ memDib = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "-\t\t\t\t\tint /*long*/ oldMemBitmap = OS.SelectObject (memHdc, memDib);", "+\t\t\t\t\tlong /*int*/ oldMemBitmap = OS.SelectObject (memHdc, memDib);", "-\t\tint /*long*/ tableImageList = OS.SendMessage (table.handle, OS.LVM_GETIMAGELIST, OS.LVSIL_SMALL, 0);", "+\t\tlong /*int*/ tableImageList = OS.SendMessage (table.handle, OS.LVM_GETIMAGELIST, OS.LVSIL_SMALL, 0);", "-\t\t\tint /*long*/ hDC = OS.GetDC(0);", "-\t\t\tint /*long*/ hDC1 = OS.CreateCompatibleDC(hDC);", "+\t\t\tlong /*int*/ hDC = OS.GetDC(0);", "+\t\t\tlong /*int*/ hDC1 = OS.CreateCompatibleDC(hDC);", "-\t\t\tint /*long*/ bitmap = OS.CreateCompatibleBitmap(hDC, bounds.width, bounds.height);", "-\t\t\tint /*long*/ hOldBitmap = OS.SelectObject(hDC1, bitmap);", "+\t\t\tlong /*int*/ bitmap = OS.CreateCompatibleBitmap(hDC, bounds.width, bounds.height);", "+\t\t\tlong /*int*/ hOldBitmap = OS.SelectObject(hDC1, bitmap);", "-\t\t\tint /*long*/ hBrush = OS.GetStockObject(OS.WHITE_BRUSH);", "+\t\t\tlong /*int*/ hBrush = OS.GetStockObject(OS.WHITE_BRUSH);", "-\t\t\t\tint /*long*/ imageList = OS.SendMessage (table.handle, OS.LVM_CREATEDRAGIMAGE, table.indexOf(selected), pt);", "+\t\t\t\tlong /*int*/ imageList = OS.SendMessage (table.handle, OS.LVM_CREATEDRAGIMAGE, table.indexOf(selected), pt);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "912b15e5cd9fe3a616e372f967f8e374", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TreeDragSourceEffect.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tImage getDragSourceImage(DragSourceEvent event)", "signatureAfterChange": "  \tImage getDragSourceImage(DragSourceEvent event)", "diff": ["-\t\t\t\tint /*long*/ hImage = shdi.hbmpDragImage;", "+\t\t\t\tlong /*int*/ hImage = shdi.hbmpDragImage;", "-\t\t\t\t\tint /*long*/ hdc = OS.GetDC (0);", "-\t\t\t\t\tint /*long*/ srcHdc = OS.CreateCompatibleDC (hdc);", "-\t\t\t\t\tint /*long*/ oldSrcBitmap = OS.SelectObject (srcHdc, hImage);", "-\t\t\t\t\tint /*long*/ memHdc = OS.CreateCompatibleDC (hdc);", "+\t\t\t\t\tlong /*int*/ hdc = OS.GetDC (0);", "+\t\t\t\t\tlong /*int*/ srcHdc = OS.CreateCompatibleDC (hdc);", "+\t\t\t\t\tlong /*int*/ oldSrcBitmap = OS.SelectObject (srcHdc, hImage);", "+\t\t\t\t\tlong /*int*/ memHdc = OS.CreateCompatibleDC (hdc);", "-\t\t\t\t\tint /*long*/ [] pBits = new int /*long*/ [1];", "-\t\t\t\t\tint /*long*/ memDib = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "+\t\t\t\t\tlong /*int*/ [] pBits = new long /*int*/ [1];", "+\t\t\t\t\tlong /*int*/ memDib = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "-\t\t\t\t\tint /*long*/ oldMemBitmap = OS.SelectObject (memHdc, memDib);", "+\t\t\t\t\tlong /*int*/ oldMemBitmap = OS.SelectObject (memHdc, memDib);", "-\t\tint /*long*/ treeImageList = OS.SendMessage (tree.handle, OS.TVM_GETIMAGELIST, OS.TVSIL_NORMAL, 0);", "+\t\tlong /*int*/ treeImageList = OS.SendMessage (tree.handle, OS.TVM_GETIMAGELIST, OS.TVSIL_NORMAL, 0);", "-\t\t\tint /*long*/ hDC = OS.GetDC(tree.handle);", "-\t\t\tint /*long*/ hDC1 = OS.CreateCompatibleDC(hDC);", "-\t\t\tint /*long*/ bitmap = OS.CreateCompatibleBitmap(hDC, bounds.width, bounds.height);", "-\t\t\tint /*long*/ hOldBitmap = OS.SelectObject(hDC1, bitmap);", "+\t\t\tlong /*int*/ hDC = OS.GetDC(tree.handle);", "+\t\t\tlong /*int*/ hDC1 = OS.CreateCompatibleDC(hDC);", "+\t\t\tlong /*int*/ bitmap = OS.CreateCompatibleBitmap(hDC, bounds.width, bounds.height);", "+\t\t\tlong /*int*/ hOldBitmap = OS.SelectObject(hDC1, bitmap);", "-\t\t\tint /*long*/ hBrush = OS.GetStockObject(OS.WHITE_BRUSH);", "+\t\t\tlong /*int*/ hBrush = OS.GetStockObject(OS.WHITE_BRUSH);", "-\t\t\t\tint /*long*/ imageList = OS.SendMessage(tree.handle, OS.TVM_CREATEDRAGIMAGE, 0, selected.handle);", "+\t\t\t\tlong /*int*/ imageList = OS.SendMessage(tree.handle, OS.TVM_CREATEDRAGIMAGE, 0, selected.handle);"]}], "num": 203}
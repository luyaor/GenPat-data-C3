{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "948b8256a6d5e8e744dc266ab2855e25", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f33a60a45f81ad67d6fa80751968aee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "7cc86b558c8ed2ecca6d43cefd721c44d6767a88", "commitAfterChange": "2dc7cd02a20ded6a928bf721f3a223ef0291063d", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  void drawBitmapTransparent(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "signatureAfterChange": "  void drawBitmapTransparent(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "diff": ["-\t\t\t\tint offset = srcImage.transparentPixel * 4;", "-\t\t\t\tbyte[] newColors = new byte[oldColors.length];", "-\t\t\t\ttransRed = transGreen = transBlue = 0xff;", "-\t\t\t\tnewColors[offset] = (byte)transBlue;", "-\t\t\t\tnewColors[offset+1] = (byte)transGreen;", "-\t\t\t\tnewColors[offset+2] = (byte)transRed;", "-\t\t\t\tOS.SetDIBColorTable(srcHdc, 0, maxColors, newColors);", "-\t\t\t\toriginalColors = oldColors;", "+\t\t\t\tint offset = srcImage.transparentPixel * 4;\t\t\t\t", "+\t\t\t\tboolean fixPalette = false;", "+\t\t\t\tfor (int i = 0; i < oldColors.length; i += 4) {", "+\t\t\t\t\tif (i != offset) {", "+\t\t\t\t\t\tif (oldColors[offset] == oldColors[i] && oldColors[offset+1] == oldColors[i+1] && oldColors[offset+2] == oldColors[i+2]) {", "+\t\t\t\t\t\t\tfixPalette = true;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (fixPalette) {", "+\t\t\t\t\tbyte[] newColors = new byte[oldColors.length];", "+\t\t\t\t\ttransRed = transGreen = transBlue = 0xff;", "+\t\t\t\t\tnewColors[offset] = (byte)transBlue;", "+\t\t\t\t\tnewColors[offset+1] = (byte)transGreen;", "+\t\t\t\t\tnewColors[offset+2] = (byte)transRed;", "+\t\t\t\t\tOS.SetDIBColorTable(srcHdc, 0, maxColors, newColors);", "+\t\t\t\t\toriginalColors = oldColors;", "+\t\t\t\t} else {", "+\t\t\t\t\ttransRed = oldColors[offset] & 0xFF;", "+\t\t\t\t\ttransGreen = oldColors[offset+1] & 0xFF;", "+\t\t\t\t\ttransBlue = oldColors[offset+2] & 0xFF;", "+\t\t\t\t}", "+\tint transparentColor = transBlue << 16 | transGreen << 8 | transRed;", "-\t\tint transparentColor = transBlue << 16 | transGreen << 8 | transRed;", "-\t\tOS.TransparentImage(handle, destX, destY, destWidth, destHeight,", "-\t\t\tsrcHdc, srcX, srcY, srcWidth, srcHeight, transparentColor);", "+\t\tOS.TransparentImage(handle, destX, destY, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, transparentColor);", "+\t} else if (originalColors == null && OS.IsWinNT && OS.WIN32_VERSION >= OS.VERSION(4, 10)) {", "+\t\tint mode = OS.SetStretchBltMode(handle, OS.COLORONCOLOR);", "+\t\tOS.TransparentBlt(handle, destX, destY, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, transparentColor);", "+\t\tOS.SetStretchBltMode(handle, mode);", "-\t\tOS.SetBkColor(srcHdc, (transBlue << 16) | (transGreen << 8) | transRed);", "+\t\tOS.SetBkColor(srcHdc, transparentColor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aac6e6fa63498ce225e3f1574d678028", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ImageList.java", "commitBeforeChange": "cbf85ae1b5c4ea922719b166c1d27766c5fdad3a", "commitAfterChange": "0f32f1d336e593b238b490fbe0e9b4ecf1880dae", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "  int createMask (int hBitmap, int width, int height, int background)", "signatureAfterChange": "  int createMask (int hBitmap, int destWidth, int destHeight, int background, int transparentPixel)", "diff": ["-int createMask (int hBitmap, int width, int height, int background) {", "-\tint hMask = OS.CreateBitmap (width, height, 1, 1, null);", "+", "+int createMask (int hBitmap, int destWidth, int destHeight, int background, int transparentPixel) {", "+\tBITMAP bm = new BITMAP ();", "+\tOS.GetObject (hBitmap, BITMAP.sizeof, bm);", "+\tint srcWidth = bm.bmWidth;", "+\tint srcHeight = bm.bmHeight;", "+\tint hMask = OS.CreateBitmap (destWidth, destHeight, 1, 1, null);", "+\t\t", "+\t\t/*", "+\t\t* If the image has a palette with multiple entries having", "+\t\t* the same color and one of those entries is the transparentPixel,", "+\t\t* only the first entry becomes transparent. To avoid this", "+\t\t* problem, temporarily change the image palette to a palette", "+\t\t* where the transparentPixel is white and everything else is", "+\t\t* black. ", "+\t\t*/", "+\t\tboolean isDib = bm.bmBits != 0;", "+\t\tbyte[] originalColors = null;", "+\t\tif (transparentPixel != -1 && isDib && bm.bmBitsPixel <= 8) {", "+\t\t\tint maxColors = 1 << bm.bmBitsPixel;", "+\t\t\tbyte[] oldColors = new byte[maxColors * 4];", "+\t\t\tOS.GetDIBColorTable(hdc1, 0, maxColors, oldColors);", "+\t\t\tint offset = transparentPixel * 4;", "+\t\t\tbyte[] newColors = new byte[oldColors.length];", "+\t\t\tnewColors[offset] = (byte)0xFF;", "+\t\t\tnewColors[offset+1] = (byte)0xFF;", "+\t\t\tnewColors[offset+2] = (byte)0xFF;", "+\t\t\tOS.SetDIBColorTable(hdc1, 0, maxColors, newColors);", "+\t\t\toriginalColors = oldColors;", "+\t\t\tOS.SetBkColor (hdc1, 0xFFFFFF);", "+\t\t} else {", "+\t\t\tOS.SetBkColor (hdc1, background);", "+\t\t}", "+\t\t", "-\t\tOS.SetBkColor (hdc1, background);", "-\t\tOS.BitBlt (hdc2, 0, 0, width, height, hdc1, 0, 0, OS.SRCCOPY);", "+\t\tif (destWidth != srcWidth || destHeight != srcHeight) {", "+\t\t\tif (!OS.IsWinCE) OS.SetStretchBltMode (hdc2, OS.COLORONCOLOR);", "+\t\t\tOS.StretchBlt (hdc2, 0, 0, destWidth, destHeight, hdc1, 0, 0, srcWidth, srcHeight, OS.SRCCOPY);", "+\t\t} else {", "+\t\t\tOS.BitBlt (hdc2, 0, 0, destWidth, destHeight, hdc1, 0, 0, OS.SRCCOPY);", "+\t\t}", "+", "+\t\t/* Put back the original palette */", "+\t\tif (originalColors != null) OS.SetDIBColorTable(hdc1, 0, 1 << bm.bmBitsPixel, originalColors);", "-\t\tOS.PatBlt (hdc1, 0, 0, width, height, OS.BLACKNESS);", "+\t\tOS.PatBlt (hdc1, 0, 0, destWidth, destHeight, OS.BLACKNESS);", "+\treturn hMask;", "+}"]}], "num": 29381}
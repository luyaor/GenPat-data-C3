{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cdde6dbdb3e2b042237cf3324c4d43ce", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5137b91724a1d3dfe78718ec2ece7b30", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "c8a01657248adeebdb4e78d52aa7b164f5be7e36", "commitAfterChange": "cfd82e695b90b1f4e613721ac0cd7f667880a9a7", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 44, "signatureBeforeChange": "\r \r LRESULT WM_SIZE (int wParam, int lParam)", "signatureAfterChange": "\r \r void setBounds (int x, int y, int width, int height, int flags)", "diff": ["+void setBounds (int x, int y, int width, int height, int flags) {\r", "+\t/*\r", "+\t* Feature in Windows.  When the caret is moved,\r", "+\t* the text widget scrolls to show the new location.\r", "+\t* This means that the text widget may be scrolled\r", "+\t* to the right in order to show the caret when the\r", "+\t* widget is not large enough to show both the caret\r", "+\t* location and all the text.  Unfortunately, when\r", "+\t* the text widget is resized such that all the text\r", "+\t* and the caret could be visible, Windows does not\r", "+\t* scroll the widget back.  The fix is to resize the\r", "+\t* text widget, set the selection to the start of the\r", "+\t* text and then restore the selection.  This will\r", "+\t* cause the text widget compute the correct scroll\r", "+\t* position.\r", "+\t*/\r", "+\tif ((flags & OS.SWP_NOSIZE) == 0 && width != 0) {\r", "+\t\tRECT rect = new RECT ();\r", "+\t\tOS.GetWindowRect (handle, rect);\r", "+\t\tif (rect.right - rect.left == 0) {\r", "+\t\t\tint [] start = new int [1], end = new int [1];\r", "+\t\t\tOS.SendMessage (handle, OS.EM_GETSEL, start, end);\r", "+\t\t\tif (start [0] != 0 || end [0] != 0) {\r", "+\t\t\t\tOS.SetWindowPos (handle, 0, x, y, width, height, flags);\r", "+\t\t\t\tOS.SendMessage (handle, OS.EM_SETSEL, 0, 0);\r", "+\t\t\t\tOS.SendMessage (handle, OS.EM_SETSEL, start [0], end [0]);\r", "+\t\t\t\treturn;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\t\r", "+\tsuper.setBounds (x, y, width, height, flags);\r", "+}\r", "-\r", "-LRESULT WM_SIZE (int wParam, int lParam) {\r", "-\tLRESULT result = super.WM_SIZE (wParam, lParam);\r", "-\t// widget may be disposed at this point\r", "-\tif (handle == 0) return result;\r", "-\t\r", "-\t/*\r", "-\t* Feature in Windows.  When the caret is moved,\r", "-\t* the text widget scrolls to show the new location.\r", "-\t* This means that the text widget may be scrolled\r", "-\t* to the left in order to show the caret when the\r", "-\t* widget is not large enough to show both the caret\r", "-\t* location and all the text.  Unfortunately, when\r", "-\t* the text widget is resized such that all the text\r", "-\t* and the caret could be visible, Windows does not\r", "-\t* scroll the widget back.  The fix is to save the\r", "-\t* current selection, set the selection to the start\r", "-\t* of the text and then restore the selection.  This\r", "-\t* will cause the text widget recompute the left\r", "-\t* scroll position.\r", "-\t*\r", "-\t* NOTE: Currently, this work around is only applied\r", "-\t* to single line text widgets that are not visible.\r", "-\t* If the widget is resized when it is visible, this\r", "-\t* is fine because the user has already seen that the\r", "-\t* text is scrolled.\r", "-\t*/\r", "-\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE); \r", "-\tif ((bits & OS.ES_MULTILINE) != 0) return result;\r", "-\tif (OS.IsWindowVisible (handle)) return result;\r", "-\tint [] start = new int [1], end = new int [1];\r", "-\tOS.SendMessage (handle, OS.EM_GETSEL, start, end);\r", "-\tif (start [0] == 0 && end [0] == 0) return result;\r", "-\tOS.SendMessage (handle, OS.EM_SETSEL, 0, 0);\r", "-\tOS.SendMessage (handle, OS.EM_SETSEL, start [0], end [0]);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "969fb0c7669d8c5fa7e80fdfaaf48f8e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "cabce7a504b376ba4a2bbe191acc5449e828a45a", "commitAfterChange": "32ca2a35fc6b7ecbddd68d976476a4797d52ddb6", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 80, "signatureBeforeChange": "  void setTXNBounds ()", "signatureAfterChange": "  void setZOrder ()", "diff": ["-void setTXNBounds () {", "-\tRect viewRect = new Rect ();", "-\tOS.TXNGetViewRect (txnObject, viewRect);", "-", "-\tRect rect = new Rect ();", "-\tOS.GetControlBounds (handle, rect);", "-\tRect inset = inset ();", "-\trect.left += inset.left;", "-\trect.top += inset.top;", "-\trect.right -= inset.right;", "-\trect.bottom -= inset.bottom;", "-\tOS.TXNSetFrameBounds (txnObject, rect.top, rect.left, rect.bottom, rect.right, txnFrameID);", "-", "-\t/*", "-\t* Bug in the Macintosh.  When the caret is moved,", "-\t* the text widget scrolls to show the new location.", "-\t* This means that the text widget may be scrolled", "-\t* to the left in order to show the caret when the", "-\t* widget is not large enough to show both the caret", "-\t* location and all the text.  Unfortunately, when", "-\t* the widget is resized such that all the text and", "-\t* the caret could be visible, the Macintosh does not", "-\t* scroll the widget back.  The fix is to save the ", "-\t* current selection, set the selection to the start", "-\t* of the text and then restore the selection.  This", "-\t* will cause the widget to recompute the left scroll", "-\t* position.", "-\t*/", "-\tint width = viewRect.left - viewRect.right;", "-\tint height = viewRect.bottom - viewRect.top;", "-\tif (width <= (inset.left + inset.right) && height <= (inset.top + inset.bottom)) {", "-\t\tint [] oStartOffset = new int [1], oEndOffset = new int [1];", "-\t\tOS.TXNGetSelection (txnObject, oStartOffset, oEndOffset);", "-\t\tOS.TXNSetSelection (txnObject, OS.kTXNStartOffset, OS.kTXNStartOffset);", "-\t\tOS.TXNShowSelection (txnObject, false);", "-\t\tOS.TXNSetSelection (txnObject, oStartOffset [0], oEndOffset [0]);", "-\t\tOS.TXNShowSelection (txnObject, false);", "-\t}", "-}", "+", "+void setZOrder () {", "+\tif (frameHandle != 0) {", "+\t\tint child = scrolledHandle != 0 ? scrolledHandle : handle;", "+\t\tOS.HIViewAddSubview (frameHandle, child);", "+\t\tHILayoutInfo layout = new HILayoutInfo ();", "+\t\tlayout.version = 0;", "+\t\tOS.HIViewGetLayoutInfo (child, layout);", "+\t\tHISideBinding biding = layout.binding.top;", "+\t\tbiding.toView = 0;", "+\t\tbiding.kind = OS.kHILayoutBindMin;", "+\t\tbiding.offset = 0;", "+\t\tbiding = layout.binding.left;", "+\t\tbiding.toView = 0;", "+\t\tbiding.kind = OS.kHILayoutBindMin;", "+\t\tbiding.offset = 0;", "+\t\tbiding = layout.binding.bottom;", "+\t\tbiding.toView = 0;", "+\t\tbiding.kind = OS.kHILayoutBindMax;", "+\t\tbiding.offset = 0;", "+\t\tbiding = layout.binding.right;", "+\t\tbiding.toView = 0;", "+\t\tbiding.kind = OS.kHILayoutBindMax;", "+\t\tbiding.offset = 0;", "+\t\tCGRect r = new CGRect();", "+\t\tr.width = r.height = 100;", "+\t\tOS.HIViewSetFrame (frameHandle, r);", "+\t\tRect inset = inset ();", "+\t\tr.x += inset.left;", "+\t\tr.y += inset.top;", "+\t\tr.width -= inset.left + inset.right;", "+\t\tr.height -= inset.top + inset.bottom;", "+\t\tOS.HIViewSetFrame (child, r);", "+\t\tOS.HIViewSetLayoutInfo (child, layout);", "+\t}", "+\tsuper.setZOrder ();"]}], "num": 47604}
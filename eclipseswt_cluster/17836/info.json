{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bc1e3876b2cd7f55407c83c14a3c5b89", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83508718e45c0c67f37b1c28ddb15ad4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "4cde7dce4a62a12afca75bf893246ddd59f51b9e", "commitAfterChange": "cd01d8c794d2ee57cc20eae684610126923df1d8", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  void setBounds (int x, int y, int width, int height, int flags)", "signatureAfterChange": "  void setBounds (int x, int y, int width, int height, int flags)", "diff": ["-\t}\t", "+\t}", "+\t", "+\t/*", "+\t* Bug in Windows. If the client area height is smaller than ", "+\t* the font height, then the multi-line text widget does not", "+\t* update the formatting rectangle when resized. The fix is to", "+\t* detect this case and explicitly set the formatting rectangle.", "+\t*/", "+\tif ((flags & OS.SWP_NOSIZE) == 0) {", "+\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\tif ((bits & OS.ES_MULTILINE) != 0) {", "+\t\t\tint /*long*/ newFont, oldFont = 0;", "+\t\t\tint /*long*/ hDC = OS.GetDC (handle);", "+\t\t\tnewFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "+\t\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "+\t\t\tTEXTMETRIC tm = OS.IsUnicode ? (TEXTMETRIC) new TEXTMETRICW () : new TEXTMETRICA ();", "+\t\t\tOS.GetTextMetrics (hDC, tm);", "+\t\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "+\t\t\tOS.ReleaseDC (handle, hDC);", "+\t\t\tRECT rect = new RECT();", "+\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\tif ((rect.bottom - rect.top) < tm.tmHeight) {", "+\t\t\t\tint /*long*/ margins = OS.SendMessage (handle, OS.EM_GETMARGINS, 0, 0);", "+\t\t\t\trect.left += OS.LOWORD (margins);", "+\t\t\t\trect.right -= OS.HIWORD (margins);", "+\t\t\t\trect.top = 0;", "+\t\t\t\trect.bottom = tm.tmHeight;", "+\t\t\t\tOS.SendMessage (handle, OS.EM_SETRECT, 0, rect);", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eca424691a35d856f48614be2aaa177f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "e2c2a7a74542ff409e980bc4b2fbaa161b141be9", "commitAfterChange": "06b0b6bb52d1fd2fb63bfd651ac4ecf3e0f11d0d", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 52, "signatureBeforeChange": " public void setItems (String [] items)", "signatureAfterChange": " public void setItems (String [] items)", "diff": ["+\tRECT rect = null;", "+\tint hDC = 0, oldFont = 0, newFont = 0, newWidth = 0;", "+\tif ((style & SWT.H_SCROLL) != 0) {", "+\t\trect = new RECT ();", "+\t\thDC = OS.GetDC (handle);", "+\t\tnewFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "+\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "+\t\tOS.SendMessage (handle, OS.CB_SETHORIZONTALEXTENT, 0, 0);", "+\t}", "+\t\tif ((style & SWT.H_SCROLL) != 0) {", "+\t\t\tint flags = OS.DT_CALCRECT | OS.DT_SINGLELINE | OS.DT_NOPREFIX;", "+\t\t\tOS.DrawText (hDC, buffer, buffer.length (), rect, flags);", "+\t\t\tnewWidth = Math.max (newWidth, rect.right - rect.left);", "+\t\t}", "-\t// widget could be disposed at this point", "+\tif ((style & SWT.H_SCROLL) != 0) {", "+\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "+\t\tOS.ReleaseDC (handle, hDC);", "+\t\tOS.SendMessage (handle, OS.CB_SETHORIZONTALEXTENT, newWidth + 3, 0);", "+\t}", "+\t// widget could be disposed at this point"]}], "num": 17836}
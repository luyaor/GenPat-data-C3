{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34a8de78d3963538bc07137c188d5c42", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d6ee6d2157eba3c7665b042a0caa297", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ce2f35c3f6b1d0b5778f68f011b1d8668d3c5c72", "commitAfterChange": "00bee382096a1807d86474fed7c933116a37eeb8", "methodNumberBeforeChange": 159, "methodNumberAfterChange": 175, "signatureBeforeChange": "\r void handlePaint(Event event)", "signatureAfterChange": "\r void handlePaint(Event event)", "diff": ["-\tdraw(event.x, event.y, event.width, event.height, event.gc, true);\r", "+\tint startLine = (event.y + verticalScrollOffset) / lineHeight;\r", "+\tint paintYFromTopLine = (startLine - topIndex) * lineHeight;\r", "+\tint topLineOffset = topIndex * lineHeight - verticalScrollOffset;\r", "+\tint startY = paintYFromTopLine + topLineOffset;\t// adjust y position for pixel based scrolling\r", "+\tint renderHeight = event.y + event.height - startY;\r", "+\tint paintY = 0;\r", "+\tint lineCount = content.getLineCount();\r", "+\tRectangle clientArea = getClientArea();\r", "+\tColor background = getBackground();\r", "+\tColor foreground = getForeground();\r", "+\tImage lineBuffer;\r", "+\tGC lineGC;\r", "+\t\t\r", "+\t// Check if there is work to do. clientArea.width should never be 0\r", "+\t// if we receive a paint event but we never want to try and create \r", "+\t// an Image with 0 width.\r", "+\tif (clientArea.width == 0 || event.height == 0) {\t\t\r", "+\t\treturn;\r", "+\t}\r", "+\tif (isSingleLine()) {\r", "+\t\tlineCount = 1;\r", "+\t\tif (startLine > 1) {\r", "+\t\t\tstartLine = 1;\r", "+\t\t}\r", "+\t}\r", "+\tlineBuffer = new Image(getDisplay(), clientArea.width, renderHeight);\r", "+\tlineGC = new GC(lineBuffer);\r", "+\tlineGC.setFont(event.gc.getFont());\r", "+\tlineGC.setForeground(foreground);\r", "+\tlineGC.setBackground(background);\r", "+\tfor (int i = startLine; paintY < renderHeight && i < lineCount; i++, paintY += lineHeight) {\r", "+\t\tString line = content.getLine(i);\r", "+\t\tdrawLine(line, i, paintY, lineGC, background, foreground, true);\r", "+\t}\r", "+\tif (paintY < renderHeight) {\r", "+\t\tlineGC.setBackground(background);\r", "+\t\tlineGC.setForeground(background);\r", "+\t\tlineGC.fillRectangle(0, paintY, clientArea.width, renderHeight - paintY);\r", "+\t}\r", "+\tevent.gc.drawImage(lineBuffer, 0, startY);\r", "+\tlineGC.dispose();\r", "+\tlineBuffer.dispose();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "619f0a7f874d80db19ae286774669404", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "6d45410e136f807ef79f7ae29764cf531166798d", "commitAfterChange": "b1a0e6d11ab761abaa61e0af2a65911b134dc63e", "methodNumberBeforeChange": 207, "methodNumberAfterChange": 207, "signatureBeforeChange": "\r void performPaint(GC gc,int startLine,int startY, int renderHeight, boolean drawDirect)", "signatureAfterChange": "\r void performPaint(GC gc,int startLine,int startY, int renderHeight)", "diff": ["-void performPaint(GC gc,int startLine,int startY, int renderHeight, boolean drawDirect)\t{\r", "+void performPaint(GC gc,int startLine,int startY, int renderHeight)\t{\r", "-\t// Do double buffering on direct draw operations only\r", "-\tif (drawDirect || SWT.getPlatform().equals(\"win32\")) {\r", "-\t\tImage lineBuffer = new Image(getDisplay(), clientArea.width, renderHeight);\r", "-\t\tGC lineGC = new GC(lineBuffer);\t\r", "+\tImage lineBuffer = new Image(getDisplay(), clientArea.width, renderHeight);\r", "+\tGC lineGC = new GC(lineBuffer);\t\r", "-\t\tlineGC.setFont(font);\r", "-\t\tlineGC.setForeground(foreground);\r", "-\t\tlineGC.setBackground(background);\r", "-\t\tfor (int i = startLine; paintY < renderHeight && i < lineCount; i++, paintY += lineHeight) {\r", "-\t\t\tString line = content.getLine(i);\r", "-\t\t\trenderer.drawLine(line, i, paintY, lineGC, background, foreground, fontData, true);\r", "-\t\t}\r", "-\t\tif (paintY < renderHeight) {\r", "-\t\t\tlineGC.setBackground(background);\r", "-\t\t\tlineGC.setForeground(background);\r", "-\t\t\tlineGC.fillRectangle(0, paintY, clientArea.width, renderHeight - paintY);\r", "-\t\t}\r", "-\t\tgc.drawImage(lineBuffer, 0, startY);\r", "-\t\tlineGC.dispose();\r", "-\t\tlineBuffer.dispose();\r", "-\t} else {\r", "-\t\tfor (int i = startLine; paintY < renderHeight && i < lineCount; i++, paintY += lineHeight) {\r", "-\t\t\tString line = content.getLine(i);\r", "-\t\t\trenderer.drawLine(line, i, paintY + startY, gc, background, foreground, fontData, true);\r", "-\t\t}\r", "-\t\tif (paintY < renderHeight) {\r", "-\t\t\tgc.setBackground(background);\r", "-\t\t\tgc.setForeground(background);\r", "-\t\t\tgc.fillRectangle(0, paintY + startY, clientArea.width, renderHeight - paintY);\r", "-\t\t}\r", "+\tlineGC.setFont(font);\r", "+\tlineGC.setForeground(foreground);\r", "+\tlineGC.setBackground(background);\r", "+\tfor (int i = startLine; paintY < renderHeight && i < lineCount; i++, paintY += lineHeight) {\r", "+\t\tString line = content.getLine(i);\r", "+\t\trenderer.drawLine(line, i, paintY, lineGC, background, foreground, fontData, true);\r", "+\tif (paintY < renderHeight) {\r", "+\t\tlineGC.setBackground(background);\r", "+\t\tlineGC.setForeground(background);\r", "+\t\tlineGC.fillRectangle(0, paintY, clientArea.width, renderHeight - paintY);\r", "+\t}\r", "+\tgc.drawImage(lineBuffer, 0, startY);\r", "+\tlineGC.dispose();\r", "+\tlineBuffer.dispose();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24faceb76da7549e1505fe75a111f1d6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "b2d1b28bdafb73ead9193c538dfcd04f6eaa6ede", "commitAfterChange": "c73348786abf15e490fc20d69d35d41b71bf2fe0", "methodNumberBeforeChange": 205, "methodNumberAfterChange": 205, "signatureBeforeChange": "\r void handlePaint(Event event)", "signatureAfterChange": "\r void handlePaint(Event event)", "diff": ["-\tint paintY = topMargin;\r", "+\tRectangle clientArea = getClientArea();\r", "+\t\r", "+\t// Check if there is work to do. clientArea.width should never be 0\r", "+\t// if we receive a paint event but we never want to try and create \r", "+\t// an Image with 0 width.\r", "+\tif (clientArea.width == 0 || event.height == 0) {\t\t\r", "+\t\treturn;\r", "+\t}\r", "+\tperformPaint(event.gc, startLine, startY, renderHeight);\t\r", "+}\t\r", "-\t// Check if there is work to do. clientArea.width should never be 0\r", "-\t// if we receive a paint event but we never want to try and create \r", "-\t// an Image with 0 width.\r", "-\tif (clientArea.width == 0 || event.height == 0) {\t\t\r", "-\tfont = event.gc.getFont();\r", "-\tlineBuffer = new Image(getDisplay(), clientArea.width, renderHeight);\r", "-\tlineGC = new GC(lineBuffer);\t\r", "-\tlineGC.setFont(font);\r", "-\tlineGC.setForeground(foreground);\r", "-\tlineGC.setBackground(background);\r", "-\tfor (int i = startLine; paintY < renderHeight && i < lineCount; i++, paintY += lineHeight) {\r", "-\t\tString line = content.getLine(i);\r", "-\t\trenderer.drawLine(line, i, paintY, lineGC, background, foreground, fontData, true);\r", "-\t}\r", "-\tif (paintY < renderHeight) {\r", "-\t\tlineGC.setForeground(background);\r", "-\t\tlineGC.fillRectangle(0, paintY, clientArea.width, renderHeight - paintY);\r", "-\tevent.gc.drawImage(lineBuffer, 0, startY);\r", "-\tlineGC.dispose();\r", "-\tlineBuffer.dispose();\r", "-\tevent.gc.setBackground(background);\r", "-\tevent.gc.fillRectangle(0, 0, clientArea.width, topMargin);\r", "-\tevent.gc.fillRectangle(0, 0, leftMargin, renderHeight);\t\r", "-\tevent.gc.fillRectangle(\r", "-\tevent.gc.fillRectangle(\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25c886f8413a319d00cbbddc94c26651", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "aa93674761d896e34c7f50d13888b0b9aa441fb8", "commitAfterChange": "e447a9523d07551d4377952bb344bc3db97c3617", "methodNumberBeforeChange": 201, "methodNumberAfterChange": 201, "signatureBeforeChange": "\r void handlePaint(Event event)", "signatureAfterChange": "\r void handlePaint(Event event)", "diff": ["-\tint startLine = (event.y + verticalScrollOffset) / lineHeight;\r", "+\tint startLine = (event.y - topMargin + verticalScrollOffset) / lineHeight;\r", "-\tlineBuffer = new Image(getDisplay(), clientArea.width, renderHeight);\r", "-\tlineGC = new GC(lineBuffer);\t\r", "-\tlineGC.setFont(font);\r", "-\tlineGC.setForeground(foreground);\r", "-\tlineGC.setBackground(background);\r", "-\tfor (int i = startLine; paintY < renderHeight && i < lineCount; i++, paintY += lineHeight) {\r", "-\t\tString line = content.getLine(i);\r", "-\t\tdrawLine(line, i, paintY, lineGC, background, foreground, fontData, true);\r", "-\t}\r", "-\tif (paintY < renderHeight) {\r", "+\tif (clientArea.width > (leftMargin + rightMargin)) {\r", "+\t\tlineBuffer = new Image(getDisplay(), clientArea.width - leftMargin - rightMargin, renderHeight);\r", "+\t\tlineGC = new GC(lineBuffer);\t\r", "+\t\tlineGC.setFont(font);\r", "+\t\tlineGC.setForeground(foreground);\r", "-\t\tlineGC.setForeground(background);\r", "-\t\tlineGC.fillRectangle(0, paintY, clientArea.width, renderHeight - paintY);\r", "+\t\tfor (int i = startLine; paintY < renderHeight && i < lineCount; i++, paintY += lineHeight) {\r", "+\t\t\tString line = content.getLine(i);\r", "+\t\t\tdrawLine(line, i, paintY, lineGC, background, foreground, fontData, true);\r", "+\t\t}\r", "+\t\tif (paintY < renderHeight) {\r", "+\t\t\tlineGC.setBackground(background);\r", "+\t\t\tlineGC.setForeground(background);\r", "+\t\t\tlineGC.fillRectangle(0, paintY, clientArea.width, renderHeight - paintY);\r", "+\t\t}\r", "+\t\tevent.gc.drawImage(lineBuffer, leftMargin, topMargin + startY);\r", "+\t\tlineGC.dispose();\r", "+\t\tlineBuffer.dispose();\r", "-\tevent.gc.drawImage(lineBuffer, 0, startY);\r", "-\tlineGC.dispose();\r", "-\tlineBuffer.dispose();\r", "+\t// clear the margin background\r", "+\tevent.gc.setBackground(background);\r", "+\tevent.gc.fillRectangle(0, 0, clientArea.width, topMargin);\r", "+\tevent.gc.fillRectangle(0, 0, leftMargin, renderHeight);\t\r", "+\tevent.gc.fillRectangle(\r", "+\t\t0, clientArea.height - bottomMargin, \r", "+\t\tclientArea.width, bottomMargin);\r", "+\tevent.gc.fillRectangle(\r", "+\t\tclientArea.width - rightMargin, 0, \r", "+\t\trightMargin, renderHeight);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c2f8ea461f0a05362628f6cfad43848", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ec7edbaede68f4fd7608786e759e23fd6dbe2200", "commitAfterChange": "b206c3d5f3a448a2b6dfbc2c13ed7e271cef1597", "methodNumberBeforeChange": 201, "methodNumberAfterChange": 207, "signatureBeforeChange": "\r void handlePaint(Event event)", "signatureAfterChange": "\r void handlePaint(Event event)", "diff": ["-\tint startLine = (event.y - topMargin + verticalScrollOffset) / lineHeight;\r", "+\tint startLine = Math.max(0, (event.y - topMargin + verticalScrollOffset) / lineHeight);\r", "-\tint paintY = 0;\r", "+\tint paintY = topMargin;\r", "-\tif (clientArea.width > (leftMargin + rightMargin)) {\r", "-\t\tlineBuffer = new Image(getDisplay(), clientArea.width - leftMargin - rightMargin, renderHeight);\r", "-\t\tlineGC = new GC(lineBuffer);\t\r", "-\t\tlineGC.setFont(font);\r", "-\t\tlineGC.setForeground(foreground);\r", "-\t\tlineGC.setBackground(background);\r", "-\t\tfor (int i = startLine; paintY < renderHeight && i < lineCount; i++, paintY += lineHeight) {\r", "-\t\t\tString line = content.getLine(i);\r", "-\t\t\tdrawLine(line, i, paintY, lineGC, background, foreground, fontData, true);\r", "-\t\t}\r", "-\t\tif (paintY < renderHeight) {\r", "-\t\t\tlineGC.setBackground(background);\r", "-\t\t\tlineGC.setForeground(background);\r", "-\t\t\tlineGC.fillRectangle(0, paintY, clientArea.width, renderHeight - paintY);\r", "-\t\t}\r", "-\t\tevent.gc.drawImage(lineBuffer, leftMargin, topMargin + startY);\r", "-\t\tlineGC.dispose();\r", "-\t\tlineBuffer.dispose();\r", "+\tlineBuffer = new Image(getDisplay(), clientArea.width, renderHeight);\r", "+\tlineGC = new GC(lineBuffer);\t\r", "+\tlineGC.setFont(font);\r", "+\tlineGC.setForeground(foreground);\r", "+\tlineGC.setBackground(background);\r", "+\tfor (int i = startLine; paintY < renderHeight && i < lineCount; i++, paintY += lineHeight) {\r", "+\t\tString line = content.getLine(i);\r", "+\t\trenderer.drawLine(line, i, paintY, lineGC, background, foreground, fontData, true);\r", "+\tif (paintY < renderHeight) {\r", "+\t\tlineGC.setBackground(background);\r", "+\t\tlineGC.setForeground(background);\r", "+\t\tlineGC.fillRectangle(0, paintY, clientArea.width, renderHeight - paintY);\r", "+\t}\r", "+\tevent.gc.drawImage(lineBuffer, 0, startY);\r", "+\tlineGC.dispose();\r", "+\tlineBuffer.dispose();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b1e5a23dbe4e15c06f25ef272bd095b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "a2d20a77730197bc49ca44196a9d2b8d8f89d9ec", "commitAfterChange": "8f9792ad382231f4a069479e42cc7c4ed22ea444", "methodNumberBeforeChange": 214, "methodNumberAfterChange": 231, "signatureBeforeChange": "\r void performPaint(GC gc,int startLine,int startY, int renderHeight)", "signatureAfterChange": "\r void performPaint(GC gc,int startLine,int startY, int renderHeight)", "diff": ["- */\r", "-void performPaint(GC gc,int startLine,int startY, int renderHeight)\t{\r", "-\tint lineCount = content.getLineCount();\r", "-\tint paintY = topMargin;\t\r", "-\tRectangle clientArea = getClientArea();\r", "-\tColor background = getBackground();\r", "-\tColor foreground = getForeground();\r", "-\tFont font = gc.getFont();\r", "-\tFontData fontData = font.getFontData()[0];\r", "-\t\r", "-\t// Check if there is work to do. We never want to try and create \r", "-\t// an Image with 0 width or 0 height.\r", "-\tif (clientArea.width == 0 || renderHeight == 0) {\t\t\r", "-\t\treturn;\r", "-\t}\r", "-\tif (isSingleLine()) {\r", "-\t\tlineCount = 1;\r", "-\t\tif (startLine > 1) {\r", "-\t\t\tstartLine = 1;\r", "-\t\t}\r", "-\t}\r", "-\tImage lineBuffer = new Image(getDisplay(), clientArea.width, renderHeight);\r", "-\tGC lineGC = new GC(lineBuffer);\t\r", "-\r", "-\tlineGC.setFont(font);\r", "-\tlineGC.setForeground(foreground);\r", "-\tlineGC.setBackground(background);\r", "-\tfor (int i = startLine; paintY < renderHeight && i < lineCount; i++, paintY += lineHeight) {\r", "-\t\tString line = content.getLine(i);\r", "-\t\trenderer.drawLine(line, i, paintY, lineGC, background, foreground, fontData, true);\r", "-\t}\r", "-\tif (paintY < renderHeight) {\r", "-\t\tlineGC.setBackground(background);\r", "-\t\tlineGC.setForeground(background);\r", "-\t\tlineGC.fillRectangle(0, paintY, clientArea.width, renderHeight - paintY);\r", "-\t}\r", "-\tgc.drawImage(lineBuffer, 0, startY);\r", "-\tlineGC.dispose();\r", "-\tlineBuffer.dispose();\r", "-\tclearMargin(gc, background, clientArea, renderHeight);\r", "-}\r", "+ */\r", "+void performPaint(GC gc,int startLine,int startY, int renderHeight)\t{\r", "+\tRectangle clientArea = getClientArea();\r", "+\tColor background = getBackground();\r", "+\t\r", "+\t// Check if there is work to do. We never want to try and create \r", "+\t// an Image with 0 width or 0 height.\r", "+\tif (clientArea.width == 0) {\r", "+\t\treturn;\r", "+\t}\r", "+\tif (renderHeight > 0) {\r", "+\t\t// renderHeight will be negative when only top margin needs redrawing\r", "+\t\tFont font = gc.getFont();\r", "+\t\tFontData fontData = font.getFontData()[0];\r", "+\t\tColor foreground = getForeground();\r", "+\t\tint lineCount = content.getLineCount();\r", "+\t\tint paintY = 0;\r", "+\t\t\r", "+\t\tif (isSingleLine()) {\r", "+\t\t\tlineCount = 1;\r", "+\t\t\tif (startLine > 1) {\r", "+\t\t\t\tstartLine = 1;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tImage lineBuffer = new Image(getDisplay(), clientArea.width, renderHeight);\r", "+\t\tGC lineGC = new GC(lineBuffer);\t\r", "+\t\r", "+\t\tlineGC.setFont(font);\r", "+\t\tlineGC.setForeground(foreground);\r", "+\t\tlineGC.setBackground(background);\r", "+\t\tfor (int i = startLine; paintY < renderHeight && i < lineCount; i++, paintY += lineHeight) {\r", "+\t\t\tString line = content.getLine(i);\r", "+\t\t\trenderer.drawLine(line, i, paintY, lineGC, background, foreground, fontData, true);\r", "+\t\t}\r", "+\t\tif (paintY < renderHeight) {\r", "+\t\t\tlineGC.setBackground(background);\r", "+\t\t\tlineGC.setForeground(background);\r", "+\t\t\tlineGC.fillRectangle(0, paintY, clientArea.width, renderHeight - paintY);\r", "+\t\t}\r", "+\t\tgc.drawImage(lineBuffer, 0, startY);\r", "+\t\tlineGC.dispose();\r", "+\t\tlineBuffer.dispose();\r", "+\t}\r", "+\tclearMargin(gc, background, clientArea, renderHeight);\r", "+}\r"]}], "num": 41189}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c802e72d3a2cf73af5393c0af5fb654", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89b293a814d05564fd2643f2d1aebd04", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java", "commitBeforeChange": "afba14f47eff5cdb3ffc5e31f34548950bea4512", "commitAfterChange": "53807038c50282048aeefad597ad634fe317aa27", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void test_ConstructorIIILorg_eclipse_swt_graphics_PaletteDataI$B()", "signatureAfterChange": "  public void test_ConstructorIIILorg_eclipse_swt_graphics_PaletteDataI$B()", "diff": ["-\twarnUnimpl(\"Test test_ConstructorIIILorg_eclipse_swt_graphics_PaletteDataI$B not written\");", "+\t// illegal argument, width < 0", "+\ttry {", "+\t\tnew ImageData(-1, 1, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 4, new byte[] {});", "+\t\tfail(\"No exception thrown for width < 0\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\t// illegal argument, height < 0", "+\ttry {", "+\t\tnew ImageData(1, -1, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 4, new byte[] {});", "+\t\tfail(\"No exception thrown for height < 0\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\t// illegal argument, depth != 1, 2, 4, 8, 16, 24 or 32", "+\ttry {", "+\t\tnew ImageData(1, 1, 7, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 4, new byte[] {});", "+\t\tfail(\"No exception thrown for depth != 1, 2, 4, 8, 16, 24 or 32\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\t// illegal argument, palette is null", "+\ttry {", "+\t\tnew ImageData(1, 1, 8, null, 4, new byte[] {});", "+\t\tfail(\"No exception thrown for null palette\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\t// illegal argument, data is null", "+\ttry {", "+\t\tnew ImageData(1, 1, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 4, null);", "+\t\tfail(\"No exception thrown for null data\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\t// illegal argument, scanlinePad == 0", "+\ttry {", "+\t\tnew ImageData(1, 1, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 0, new byte[] {});", "+\t\tfail(\"No exception thrown for scanlinePad == 0\");", "+\t} catch (IllegalArgumentException e) {", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d598f447877898466d8f5339ac98228a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_Font.java", "commitBeforeChange": "2272262fa1ad2a17677f9473dd0c94e9b168217c", "commitAfterChange": "66413abed4d13d9d98291abd8415d641f3043b15", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_Device$Lorg_eclipse_swt_graphics_FontData()", "signatureAfterChange": "  public void test_ConstructorLorg_eclipse_swt_graphics_Device$Lorg_eclipse_swt_graphics_FontData()", "diff": ["-\twarnUnimpl(\"Test test_ConstructorLorg_eclipse_swt_graphics_Device$Lorg_eclipse_swt_graphics_FontData not written\");", "+\t", "+\t// null  device argument", "+\t", "+\tboolean exceptionThrown = false;", "+\ttry {", "+\t\tFontData[] data = new FontData[1];", "+\t\tFont font = new Font(null,data);", "+\t\tfont.dispose();", "+\t} catch (IllegalArgumentException e) {", "+\t\texceptionThrown = true;", "+\t} ", "+\tassertTrue(exceptionThrown);", "+\t", "+\t// null data argument", "+\t", "+\texceptionThrown = false;", "+\ttry {", "+\t\tFontData[] data = null;", "+\t\tFont font = new Font(display,data);", "+\t\tfont.dispose();", "+\t} catch (IllegalArgumentException e) {", "+\t\texceptionThrown = true;", "+\t} ", "+\tassertTrue(exceptionThrown);", "+", "+\t// zero length data array", "+\t", "+\texceptionThrown = false;", "+\ttry {", "+\t\tFontData[] data = new FontData[0];", "+\t\tFont font = new Font(display,data);", "+\t\tfont.dispose();", "+\t} catch (IllegalArgumentException e) {", "+\t\texceptionThrown = true;", "+\t} ", "+\tassertTrue(exceptionThrown);", "+\t", "+\t// null data element", "+\t", "+\texceptionThrown = false;", "+\ttry {", "+\t\tFontData[] data = {", "+\t\t\tnull,", "+\t\t\tnew FontData()", "+\t\t};", "+\t\tFont font = new Font(display,data);", "+\t\tfont.dispose();", "+\t} catch (IllegalArgumentException e) {", "+\t\texceptionThrown = true;", "+\t} ", "+\tassertTrue(\"null data element 0\",exceptionThrown);", "+", "+\texceptionThrown = false;", "+\ttry {", "+\t\tFontData[] data = {", "+\t\t\tnew FontData(),", "+\t\t\tnull", "+\t\t};", "+\t\tFont font = new Font(display,data);", "+\t\tfont.dispose();", "+\t} catch (IllegalArgumentException e) {", "+\t\texceptionThrown = true;", "+\t} ", "+\tassertTrue(\"null data element 1\",exceptionThrown);", "+\t", "+\t// test that FontData is set correctly", "+\t", "+\tFontData data = new FontData();", "+\tFont font = new Font(display,data);", "+\tFontData[] returnedData = font.getFontData();", "+\tassertEquals(data,returnedData[0]);", "+\tfont.dispose();"]}], "num": 1184}
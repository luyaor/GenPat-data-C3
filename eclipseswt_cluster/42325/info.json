{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5aae003dd93c67033bae38e0c00473f6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3dba6bc956c1b3a21d10e25df95ab35d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "bd03150150212e50e6fa2274c59ffe38b92a7f17", "commitAfterChange": "4696ed3242b05bb22c4416f9db8b2c5c29434a83", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "  void windowSendEvent (int id, int sel, int event)", "signatureAfterChange": "  void windowSendEvent (int id, int sel, int event)", "diff": ["-\tswitch ((int)/*64*/nsEvent.type ()) {", "-\t\tcase OS.NSLeftMouseUp:\t", "-\t\tcase OS.NSRightMouseUp:\t", "-\t\tcase OS.NSOtherMouseUp:\t", "+\tint type = (int)/*64*/nsEvent.type ();", "+\tswitch (type) {", "+\t\tcase OS.NSLeftMouseUp:", "+\t\tcase OS.NSRightMouseUp:", "+\t\tcase OS.NSOtherMouseUp:", "-\t\t\tWidget target = null;", "+\t\t\tif (type == OS.NSMouseMoved) {", "+\t\t\t\tControl trimControl = control;", "+\t\t\t\tif (control != null && control.isTrim (view)) trimControl = null;", "+\t\t\t\tdisplay.checkEnterExit (trimControl, nsEvent, false);", "+\t\t\t\tif (trimControl != null) trimControl.sendMouseEvent (nsEvent, type, false);", "+\t\t\t}", "+\t\t\tWidget target = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b5df425e2d50eaf407a94397e3f415c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "d820b37300fd1d750a00c8339cc179561d90308c", "commitAfterChange": "421dd20c72ea4483b5a69aeba70ea8a605a9a6d3", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 66, "signatureBeforeChange": " public void remove (int [] indices)", "signatureAfterChange": " public void remove (int [] indices)", "diff": ["+\tint iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());", "-\t\t\tOS.gtk_list_store_remove (modelHandle, item.handle);", "-\t\t\titem.releaseResources ();", "+\t\t\tif (item != null && !item.isDisposed ()) {", "+\t\t\t\tOS.gtk_list_store_remove (modelHandle, item.handle);", "+\t\t\t\titem.releaseResources ();", "+\t\t\t} else {", "+\t\t\t\tOS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);", "+\t\t\t\tOS.gtk_list_store_remove (modelHandle, iter);", "+\t\t\t} ", "+\tOS.g_free (iter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f04f194fb05efd06cba8e7bafca40c85", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "41e8931d8059d992463eeb155adabeac9625431b", "commitAfterChange": "60ff4c61f9b274f470c47d2955baafd01620b5ee", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  long gtk_clipboard_wait_for_contents(long clipboard, long target)", "signatureAfterChange": "  long gtk_clipboard_wait_for_contents(long clipboard, long target)", "diff": ["+\tlong startTime = System.currentTimeMillis();", "+\tlong duration = System.currentTimeMillis() - startTime;", "+\tif (selection_data == 0 && duration > 5000) {", "+\t\t// Bug 241957: In case of timeout take clipboard ownership to unblock future calls", "+\t\tClipboardProxy._getInstance(display).setData(this, new String[] {\" \"},", "+\t\t\t\tnew Transfer[] { TextTransfer.getInstance() },", "+\t\t\t\tclipboard == GTKCLIPBOARD ? DND.CLIPBOARD : DND.SELECTION_CLIPBOARD);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3af48eb707cdb277d47ca423c22012d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "0aefae2205ecbebdf2518c8c6d05ab0032e5adad", "commitAfterChange": "43f69591d2861e44e31ebc47702400b2a09fcdc6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void _setVisible (boolean visible)", "signatureAfterChange": "  void _setVisible (boolean visible)", "diff": ["+\t\t\tint /*long*/ data = 0;", "+\t\t\tif ((OS.GTK_VERSION >=  OS.VERSION (2, 10, 0))) {", "+\t\t\t\t/*", "+\t\t\t\t* Popup-menu to the status icon should be aligned to  ", "+\t\t\t\t* Tray rather than to cursor position. There is a ", "+\t\t\t\t* possibility (unlikely) that TrayItem might have  ", "+\t\t\t\t* been disposed in the listener, for which case  ", "+\t\t\t\t* the menu should be shown in the cursor position. ", "+\t\t\t\t*/", "+\t\t\t\tTrayItem item = display.currentTrayItem;", "+\t\t\t\tif (item != null && !item.isDisposed()) {", "+\t\t\t\t\t data = item.handle;", "+\t\t\t\t\t address = OS.gtk_status_icon_position_menu_func ();", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\tOS.gtk_menu_popup (handle, 0, 0, address, 0, 0, display.getLastEventTime ());", "+\t\t\tOS.gtk_menu_popup (handle, 0, 0, address, data, 0, display.getLastEventTime ());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1cac8c9a9787c8d486b29530490fd41", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "593a20e14cabc307ffcbb96ca3baba1cabda4153", "commitAfterChange": "b4b4915a8b6d503d1a91832f2e2cbbca416027d4", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["-//\t\tint pid = OS.getpid ();", "-//\t\tbyte [] buffer = null;", "-//\t\tint ptr = OS.getenv (ascii (\"APP_NAME_\" + pid));", "-//\t\tif (ptr != 0) {", "-//\t\t\tbuffer = new byte [OS.strlen (ptr) + 1];", "-//\t\t\tOS.memmove (buffer, ptr, buffer.length);", "-//\t\t} else {", "-//\t\t\tif (APP_NAME != null) {", "-//\t\t\t\tchar [] chars = new char [APP_NAME.length ()];", "-//\t\t\t\tAPP_NAME.getChars (0, chars.length, chars, 0);", "-//\t\t\t\tint cfstring = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, chars, chars.length);", "-//\t\t\t\tif (cfstring != 0) {", "-//\t\t\t\t\tCFRange range = new CFRange ();", "-//\t\t\t\t\trange.length = chars.length;", "-//\t\t\t\t\tint encoding = OS.CFStringGetSystemEncoding ();", "-//\t\t\t\t\tint [] size = new int [1];", "-//\t\t\t\t\tint numChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, null, 0, size);", "-//\t\t\t\t\tif (numChars != 0) {", "-//\t\t\t\t\t\tbuffer = new byte [size [0] + 1];", "-//\t\t\t\t\t\tnumChars = OS.CFStringGetBytes (cfstring, range, encoding, (byte) '?', true, buffer, size [0], size);", "-//\t\t\t\t\t}", "-//\t\t\t\t\tOS.CFRelease (cfstring);", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t}", "-//\t\tif (buffer != null) OS.CPSSetProcessName (psn, buffer);\t", "+\t\tint ptr = OS.getenv (ascii (\"APP_NAME_\" + OS.getpid ()));", "+\t\tif (ptr  == 0 && APP_NAME != null) {", "+\t\t\tptr = NSString.stringWith(APP_NAME).UTF8String();\t", "+\t\t}", "+\t\tif (ptr != 0) OS.CPSSetProcessName (psn, ptr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d138ccd3a7184e794a9acda800847ad6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "34830c5ea1d64c3a02443211fb13e925cac126f1", "commitAfterChange": "4e64580ba3040d30ac205fe496a0b9154e6fedb9", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public MacGenerator(String[] xmls)", "signatureAfterChange": " \t public MacGenerator(String[] xmls)", "diff": ["+\tlong start = System.currentTimeMillis();", "-\textraAttributes = new Hashtable[xmls.length];", "-\t\tdocuments[i] = getDocument(xmls[i]);", "-\t\textraAttributes[i] = loadExtraAttributes(xmls[i]);", "+\t\tDocument document = documents[i] = getDocument(xmls[i]);", "+\t\tif (document == null) continue;", "+\t\tmerge(document, document, loadExtraAttributes(xmls[i]));", "+\tlong end = System.currentTimeMillis();", "+\tSystem.out.println(\"load=\" + (end - start));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15a2931c89fa036228ee4b8d2ad8eb19", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "5a7c149aeb8d18a02cc47db0e52d6bca3505a8b8", "commitAfterChange": "285048d733ba2ac7ac939aae339235bf286f43d0", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["+\t\tint ptr = OS.getenv ((\"APP_ICON_\" + OS.getpid() + \"\\0\").getBytes ());", "+\t\tif (ptr != 0) {", "+\t\t\tint [] image = readImageRef (ptr);", "+\t\t\tif (image != null) {", "+\t\t\t\tdockImage = image [0];", "+\t\t\t\tdockImageData = image [1];", "+\t\t\t\tOS.SetApplicationDockTileImage (dockImage);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55c9bc159bbe43b2bdeb8ef66ac1d355", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "5f2f9722fb558345b2e1962ac41660a1bc2aed06", "commitAfterChange": "6d9ffc9776ed53230601b1f118f94e4523e13f00", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "\r \r boolean translateTraversal (MSG msg)", "signatureAfterChange": "\r \r boolean translateTraversal (MSG msg)", "diff": ["-\tswitch (msg.wParam) {\r", "-\t\tcase OS.VK_ESCAPE:\r", "-\t\t\t/* Allow the escape key to close the combo box */\r", "-\t\t\tif (OS.SendMessage (handle, OS.CB_GETDROPPEDSTATE, 0, 0) != 0) {\r", "-\t\t\t\treturn false;\r", "-\t\t\t}\r", "-\t\t\t// FALL THROUGH\r", "-\t\tcase OS.VK_TAB:\r", "-\t\tcase OS.VK_RETURN:\r", "-\t\t\tboolean translated = super.translateTraversal (msg);\r", "-\t\t\tif (!translated && msg.wParam == OS.VK_RETURN) {\r", "-\t\t\t\tsendEvent (SWT.DefaultSelection);\r", "-\t\t\t\t// widget could be disposed at this point\r", "-\t\t\t}\r", "-\t\t\treturn true;\r", "+\tint hwndText = OS.GetDlgItem (handle, CBID_EDIT);\r", "+\tif (hwndText != 0 && msg.hwnd == hwndText) {\r", "+\t\tswitch (msg.wParam) {\r", "+\t\t\tcase OS.VK_ESCAPE:\r", "+\t\t\t\t/* Allow the escape key to close the combo box */\r", "+\t\t\t\tif (OS.SendMessage (handle, OS.CB_GETDROPPEDSTATE, 0, 0) != 0) {\r", "+\t\t\t\t\treturn false;\r", "+\t\t\t\t}\r", "+\t\t\t\t// FALL THROUGH\r", "+\t\t\tcase OS.VK_TAB:\r", "+\t\t\tcase OS.VK_RETURN:\r", "+\t\t\t\tboolean translated = super.translateTraversal (msg);\r", "+\t\t\t\tif (!translated) {\r", "+\t\t\t\t\tsendKeyEvent (SWT.KeyDown, msg.message, msg.wParam, msg.lParam);\r", "+\t\t\t\t\tif (msg.wParam == OS.VK_RETURN) {\r", "+\t\t\t\t\t\tsendEvent (SWT.DefaultSelection);\r", "+\t\t\t\t\t\t// widget could be disposed at this point\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t\treturn true;\r", "+\t\t}\r"]}], "num": 42325}
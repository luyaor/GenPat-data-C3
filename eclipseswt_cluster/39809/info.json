{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f560fbb3a0ecf1dd1c32985021a34d3f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a45e15675a45ded7fddc0ea7e46e32e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "726968a24a410100379c1fac10f24f5b50dd1935", "commitAfterChange": "619a5f67ffa764e20badd65688c430544e8dec67", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  int[] createGdipImage()", "signatureAfterChange": "  int[] createGdipImage()", "diff": ["-\t\tcase SWT.ICON: return new int[]{Gdip.Bitmap_new(handle), 0};", "+\t\tcase SWT.ICON: {", "+\t\t\t/*", "+\t\t\t* Bug in GDI+. Creating a new GDI+ Bitmap from a HICON segment faults", "+\t\t\t* when the icon width is bigger than the icon height.  The fix is to", "+\t\t\t* detect this and create a PixelFormat32bppARGB image instead.", "+\t\t\t*/", "+\t\t\tICONINFO iconInfo = new ICONINFO();", "+\t\t\tif (OS.IsWinCE) {", "+\t\t\t\tGetIconInfo(this, iconInfo);", "+\t\t\t} else {", "+\t\t\t\tOS.GetIconInfo(handle, iconInfo);", "+\t\t\t}", "+\t\t\tint hBitmap = iconInfo.hbmColor;", "+\t\t\tif (hBitmap == 0) hBitmap = iconInfo.hbmMask;", "+\t\t\tBITMAP bm = new BITMAP();", "+\t\t\tOS.GetObject(hBitmap, BITMAP.sizeof, bm);", "+\t\t\tint imgWidth = bm.bmWidth;", "+\t\t\tint imgHeight = hBitmap == iconInfo.hbmMask ? bm.bmHeight / 2 : bm.bmHeight;", "+\t\t\tint img = 0, pixels = 0;", "+\t\t\tif (imgWidth > imgHeight) {", "+\t\t\t\tint hDC = device.internal_new_GC(null);", "+\t\t\t\tint srcHdc = OS.CreateCompatibleDC(hDC);", "+\t\t\t\tint oldSrcBitmap = OS.SelectObject(srcHdc, hBitmap);", "+\t\t\t\tint memHdc = OS.CreateCompatibleDC(hDC);", "+\t\t\t\tint memDib = createDIB(imgWidth, imgHeight, 32);", "+\t\t\t\tif (memDib == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tint oldMemBitmap = OS.SelectObject(memHdc, memDib);\t", "+\t\t\t\tBITMAP dibBM = new BITMAP();", "+\t\t\t\tOS.GetObject(memDib, BITMAP.sizeof, dibBM);", "+\t\t\t \tOS.BitBlt(memHdc, 0, 0, imgWidth, imgHeight, srcHdc, 0, hBitmap == iconInfo.hbmMask ? imgHeight : 0, OS.SRCCOPY);", "+\t\t\t\tOS.SelectObject(memHdc, oldMemBitmap);", "+\t\t\t\tOS.DeleteObject(memHdc);", "+\t\t\t \tbyte[] srcData = new byte[dibBM.bmWidthBytes * dibBM.bmHeight];", "+\t\t\t\tOS.MoveMemory(srcData, dibBM.bmBits, srcData.length);", "+\t\t\t\tOS.DeleteObject(memDib);", "+\t\t\t\tOS.SelectObject(srcHdc, iconInfo.hbmMask);", "+\t\t\t\tfor (int y = 0, dp = 0; y < imgHeight; ++y) {", "+\t\t\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "+\t\t\t\t\t\tif (OS.GetPixel(srcHdc, x, y) != 0) {", "+\t\t\t\t\t\t\tsrcData[dp + 3] = (byte)0;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tsrcData[dp + 3] = (byte)0xFF;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tdp += 4;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tOS.SelectObject(srcHdc, oldSrcBitmap);", "+\t\t\t\tOS.DeleteObject(srcHdc);", "+\t\t\t\tdevice.internal_dispose_GC(hDC, null);", "+\t\t\t\tint hHeap = OS.GetProcessHeap();", "+\t\t\t\tpixels = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, srcData.length);", "+\t\t\t\tOS.MoveMemory(pixels, srcData, srcData.length);", "+\t\t\t\timg = Gdip.Bitmap_new(imgWidth, imgHeight, dibBM.bmWidthBytes, Gdip.PixelFormat32bppARGB, pixels);", "+\t\t\t} else {", "+\t\t\t\timg = Gdip.Bitmap_new(handle);", "+\t\t\t}", "+\t\t\tif (iconInfo.hbmColor == 0) OS.DeleteObject(iconInfo.hbmColor);", "+\t\t\tif (iconInfo.hbmMask == 0) OS.DeleteObject(iconInfo.hbmMask);", "+\t\t\treturn new int[]{img, pixels};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "771577b59d10fb155447eb77492740d8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "e1ea4ea930c303d7a66cc1c333c813723dbd0917", "commitAfterChange": "07eff1b74b49b8400fef10ab67f94111fd65d9d4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  int createGdipImage()", "signatureAfterChange": "  int[] createGdipImage()", "diff": ["-int createGdipImage() {", "+int[] createGdipImage() {", "-\t\tcase SWT.BITMAP: return Gdip.Bitmap_new(handle, 0);", "-\t\tcase SWT.ICON: return Gdip.Bitmap_new(handle);", "+\t\tcase SWT.BITMAP: {", "+\t\t\tif (alpha != -1 || alphaData != null || transparentPixel != -1) {", "+\t\t\t\tBITMAP bm = new BITMAP();", "+\t\t\t\tOS.GetObject(handle, BITMAP.sizeof, bm);", "+\t\t\t\tint imgWidth = bm.bmWidth;", "+\t\t\t\tint imgHeight = bm.bmHeight;", "+\t\t\t\tint hDC = device.internal_new_GC(null);", "+\t\t\t\tint srcHdc = OS.CreateCompatibleDC(hDC);", "+\t\t\t\tint oldSrcBitmap = OS.SelectObject(srcHdc, handle);", "+\t\t\t\tint memHdc = OS.CreateCompatibleDC(hDC);", "+\t\t\t\tint memDib = createDIB(imgWidth, imgHeight, 32);", "+\t\t\t\tif (memDib == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tint oldMemBitmap = OS.SelectObject(memHdc, memDib);\t", "+\t\t\t\tBITMAP dibBM = new BITMAP();", "+\t\t\t\tOS.GetObject(memDib, BITMAP.sizeof, dibBM);", "+\t\t\t\tint sizeInBytes = dibBM.bmWidthBytes * dibBM.bmHeight;\t", "+\t\t\t \tOS.BitBlt(memHdc, 0, 0, imgWidth, imgHeight, srcHdc, 0, 0, OS.SRCCOPY);", "+\t\t\t \tbyte red = 0, green = 0, blue = 0;", "+\t\t\t \tif (transparentPixel != -1) {", "+\t\t\t\t\tif (bm.bmBitsPixel <= 8)  {", "+\t\t\t\t\t\tbyte[] color = new byte[4];", "+\t\t\t\t\t\tOS.GetDIBColorTable(srcHdc, transparentPixel, 1, color);", "+\t\t\t\t\t\tblue = color[0];", "+\t\t\t\t\t\tgreen = color[1];", "+\t\t\t\t\t\tred = color[2];", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tswitch (bm.bmBitsPixel) {", "+\t\t\t\t\t\t\tcase 16:", "+\t\t\t\t\t\t\t\tblue = (byte)((transparentPixel & 0x1F) << 3);", "+\t\t\t\t\t\t\t\tgreen = (byte)((transparentPixel & 0x3E0) >> 2);", "+\t\t\t\t\t\t\t\tred = (byte)((transparentPixel & 0x7C00) >> 7);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 24:", "+\t\t\t\t\t\t\t\tblue = (byte)((transparentPixel & 0xFF0000) >> 16);", "+\t\t\t\t\t\t\t\tgreen = (byte)((transparentPixel & 0xFF00) >> 8);", "+\t\t\t\t\t\t\t\tred = (byte)(transparentPixel & 0xFF);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 32:", "+\t\t\t\t\t\t\t\tblue = (byte)((transparentPixel & 0xFF000000) >>> 24);", "+\t\t\t\t\t\t\t\tgreen = (byte)((transparentPixel & 0xFF0000) >> 16);", "+\t\t\t\t\t\t\t\tred = (byte)((transparentPixel & 0xFF00) >> 8);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t \t}", "+\t\t\t\tOS.SelectObject(srcHdc, oldSrcBitmap);", "+\t\t\t\tOS.SelectObject(memHdc, oldMemBitmap);", "+\t\t\t\tOS.DeleteObject(srcHdc);", "+\t\t\t\tOS.DeleteObject(memHdc);", "+\t\t\t \tbyte[] srcData = new byte[sizeInBytes];", "+\t\t\t\tOS.MoveMemory(srcData, dibBM.bmBits, sizeInBytes);", "+\t\t\t\tOS.DeleteObject(memDib);", "+\t\t\t\tdevice.internal_dispose_GC(hDC, null);", "+\t\t\t\tif (alpha != -1) {", "+\t\t\t\t\tfor (int y = 0, dp = 0; y < imgHeight; ++y) {", "+\t\t\t\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "+\t\t\t\t\t\t\tsrcData[dp + 3] = (byte)alpha;", "+\t\t\t\t\t\t\tdp += 4;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else if (alphaData != null) {", "+\t\t\t\t\tfor (int y = 0, dp = 0, ap = 0; y < imgHeight; ++y) {", "+\t\t\t\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "+\t\t\t\t\t\t\tsrcData[dp + 3] = alphaData[ap++];", "+\t\t\t\t\t\t\tdp += 4;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else if (transparentPixel != -1) {", "+\t\t\t\t\tfor (int y = 0, dp = 0; y < imgHeight; ++y) {", "+\t\t\t\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "+\t\t\t\t\t\t\tif (srcData[dp] == blue && srcData[dp + 1] == green && srcData[dp + 2] == red) {", "+\t\t\t\t\t\t\t\tsrcData[dp + 3] = (byte)0;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tsrcData[dp + 3] = (byte)0xFF;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tdp += 4;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tint hHeap = OS.GetProcessHeap();", "+\t\t\t\tint pixels = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, srcData.length);", "+\t\t\t\tOS.MoveMemory(pixels, srcData, sizeInBytes);", "+\t\t\t\treturn new int[]{Gdip.Bitmap_new(imgWidth, imgHeight, dibBM.bmWidthBytes, Gdip.PixelFormat32bppARGB, pixels), pixels};", "+\t\t\t}", "+\t\t\treturn new int[]{Gdip.Bitmap_new(handle, 0), 0};", "+\t\t}", "+\t\tcase SWT.ICON: return new int[]{Gdip.Bitmap_new(handle), 0};", "-\treturn 0;", "+\treturn null;"]}], "num": 39809}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1894b5e4df49c17b311f271e207f24cb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56d3fde41c4fae9d18627ed2b889ca12", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "dbfdea5a6ace7254c9bcb69a7489276f3b9d3e35", "commitAfterChange": "f1fbb8716f7eb6144440edb1c7a2f83e3f63fe10", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void createItem (MenuItem item, int index)", "signatureAfterChange": "  void createItem (MenuItem item, int index)", "diff": ["-\tNSMenuItem nsItem = null;", "-\tif ((item.style & SWT.SEPARATOR) != 0) {", "-\t\tnsItem = NSMenuItem.separatorItem();", "-\t\tnsItem.retain();", "+\tboolean add = true;", "+\tNSMenuItem nsItem = item.nsItem;", "+\tif (nsItem == null) {", "+\t\tif ((item.style & SWT.SEPARATOR) != 0) {", "+\t\t\tnsItem = NSMenuItem.separatorItem();", "+\t\t\tnsItem.retain();", "+\t\t} else {", "+\t\t\tnsItem = (NSMenuItem)new SWTMenuItem().alloc();", "+\t\t\tNSString empty = NSString.string();", "+\t\t\tnsItem.initWithTitle(empty, 0, empty);", "+\t\t\tnsItem.setTarget(nsItem);", "+\t\t\tnsItem.setAction(OS.sel_sendSelection);", "+\t\t}", "+\t\titem.nsItem = nsItem;", "-\t\tnsItem = (NSMenuItem)new SWTMenuItem().alloc();", "-\t\tNSString empty = NSString.string();", "-\t\tnsItem.initWithTitle(empty, 0, empty);", "+\t\tint /*long*/ cls = OS.object_getClass(nsItem.id);", "+\t\tint /*long*/ dynNSMenuItem_class = display.createMenuItemSubclass(cls, \"SWTSystemMenuItem\", true);", "+\t\tif (cls != dynNSMenuItem_class) {", "+\t\t\tOS.object_setClass(nsItem.id, dynNSMenuItem_class);", "+\t\t}", "+\t\tnsItem.retain();", "+\t\titem.nsItemAction = nsItem.action();", "+\t\titem.nsItemTarget = nsItem.target();", "+", "+\t\t// Sync native item type to Item's style.", "+\t\tint type = SWT.PUSH;", "+\t\tif (nsItem.isSeparatorItem()) type = SWT.SEPARATOR;", "+\t\tif (nsItem.submenu() != null) type = SWT.CASCADE;", "+\t\titem.style |= type;", "+\t\t", "+\t\t// Sync native item text to Item's text.", "+\t\titem.text = nsItem.title().getString();", "+\t\t", "+\t\t// Sync native key equivalent to MenuItem's accelerator.", "+\t\t// The system menu on OS X only uses command and option, so it's", "+\t\t// safe to just check for those two key masks.", "+\t\tint /*long*/ keyMask = nsItem.keyEquivalentModifierMask();", "+\t\tNSString keyEquivString = nsItem.keyEquivalent();", "+\t\tint /*long*/ keyEquiv = 0;", "+\t\tif (keyEquivString != null) {", "+\t\t\tkeyEquiv = keyEquivString.characterAtIndex(0);", "+\t\t\tif ((keyMask & OS.NSCommandKeyMask) != 0) keyEquiv |= SWT.COMMAND;", "+\t\t\tif ((keyMask & OS.NSAlternateKeyMask) != 0) keyEquiv |= SWT.ALT;", "+\t\t\titem.accelerator = (int) keyEquiv;", "+\t\t}", "+\t\tadd = false;", "-\titem.nsItem = nsItem;", "-\tnsMenu.insertItem(nsItem, index);", "+\tif (add) {", "+\t\tnsMenu.insertItem(nsItem, index);", "+\t}", "-\tNSMenu emptyMenu = item.createEmptyMenu ();", "-\tif (emptyMenu != null) {", "-\t\tnsItem.setSubmenu (emptyMenu);", "-\t\temptyMenu.release();", "-\t}", "-\tif (display.menuBar == this) {", "-\t\tNSApplication application = display.application;", "-\t\tNSMenu menubar = application.mainMenu();", "-\t\tif (menubar != null) {", "-\t\t\tnsItem.setMenu(null);", "-\t\t\tmenubar.insertItem(nsItem, index + 1);", "+\tif (add) {", "+\t\tNSMenu emptyMenu = item.createEmptyMenu ();", "+\t\tif (emptyMenu != null) {", "+\t\t\tnsItem.setSubmenu (emptyMenu);", "+\t\t\temptyMenu.release();", "+\t\t}", "+\t\tif (display.menuBar == this) {", "+\t\t\tNSApplication application = display.application;", "+\t\t\tNSMenu menubar = application.mainMenu();", "+\t\t\tif (menubar != null) {", "+\t\t\t\tnsItem.setMenu(null);", "+\t\t\t\tmenubar.insertItem(nsItem, index + 1);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1590ec81614ef9954dac71aefba40c6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet210.java", "commitBeforeChange": "f0b5a2c507d630ff9b6f5c0fce711b372ffa881f", "commitAfterChange": "d2f52b369eab94d1c6888522edffcc17a18bd3ec", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static void main (String [] args)", "signatureAfterChange": " \t public static void main (String [] args)", "diff": ["+\t", "-\tfinal StyledText text = new StyledText(shell, style);", "-\ttext.setText(string);", "-\tDragSource source = new DragSource(text, DND.DROP_COPY | DND.DROP_MOVE);", "+\tfinal StyledText text1 = new StyledText(shell, style);", "+\ttext1.setText(string1);", "+\tDragSource source = new DragSource(text1, DND.DROP_COPY | DND.DROP_MOVE);", "-\t\t\tPoint selection = text.getSelection();", "-\t\t\tint offset = text.getOffsetAtLocation(new Point(e.x, e.y));", "-\t\t\te.doit = offset > selection.x && offset < selection.y;", "+\t\t\tPoint selection = text1.getSelection();", "+\t\t\ttry {", "+\t\t\t\tint offset = text1.getOffsetAtLocation(new Point(e.x, e.y));", "+\t\t\t\te.doit = offset > selection.x && offset < selection.y;", "+\t\t\t} catch (IllegalArgumentException ex) {", "+\t\t\t}", "-\t\t\tPoint selection = text.getSelection();", "+\t\t\tPoint selection = text1.getSelection();", "-\t\t\t\te.data = text.getText(selection.x, selection.y-1);", "+\t\t\t\te.data = text1.getText(selection.x, selection.y-1);", "-\t\t\t\ttext.insert(\"\");", "+\t\t\t\ttext1.insert(\"\");", "-\tfinal Label label = new Label(shell, SWT.BORDER | SWT.WRAP);", "-\tlabel.setText(\"Drop Target\");", "-\tDropTarget target = new DropTarget(label, DND.DROP_DEFAULT | DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK);", "+\tfinal StyledText text2 = new StyledText(shell, style);", "+\ttext2.setText(string2);", "+\tDropTarget target = new DropTarget(text2, DND.DROP_DEFAULT | DND.DROP_MOVE | DND.DROP_COPY | DND.DROP_LINK);", "-\t\tpublic void dragEnter(DropTargetEvent event) {", "-\t\t\tif (event.detail == DND.DROP_DEFAULT)", "-\t\t\t\tevent.detail = DND.DROP_COPY;", "+\t\tpublic void dragEnter(DropTargetEvent e) {", "+\t\t\tif (e.detail == DND.DROP_DEFAULT)", "+\t\t\t\te.detail = DND.DROP_COPY;", "-\t\tpublic void dragOperationChanged(DropTargetEvent event) {", "-\t\t\tif (event.detail == DND.DROP_DEFAULT)", "-\t\t\t\tevent.detail = DND.DROP_COPY;", "+\t\tpublic void dragOperationChanged(DropTargetEvent e) {", "+\t\t\tif (e.detail == DND.DROP_DEFAULT)", "+\t\t\t\te.detail = DND.DROP_COPY;", "-\t\tpublic void drop(DropTargetEvent event) {", "-\t\t\tlabel.setText((String)event.data);", "+\t\tpublic void dragOver(DropTargetEvent e) {", "+\t\t\ttext2.setFocus();", "+\t\t\tPoint location = display.map(null, text2, e.x, e.y);", "+\t\t\tlocation.x = Math.max(0, location.x);", "+\t\t\tlocation.y = Math.max(0, location.y);", "+\t\t\ttry {", "+\t\t\t\tint offset = text2.getOffsetAtLocation(new Point(location.x, location.y));", "+\t\t\t\ttext2.setCaretOffset(offset);", "+\t\t\t} catch (IllegalArgumentException ex) {", "+\t\t\t\tint maxOffset = text2.getCharCount();", "+\t\t\t\tPoint maxLocation = text2.getLocationAtOffset(maxOffset);", "+\t\t\t\tif (location.y >= maxLocation.y) {", "+\t\t\t\t\tif (location.x >= maxLocation.x) {", "+\t\t\t\t\t\ttext2.setCaretOffset(maxOffset);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint offset = text2.getOffsetAtLocation(new Point(location.x, maxLocation.y));", "+\t\t\t\t\t\ttext2.setCaretOffset(offset);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\ttext2.setCaretOffset(maxOffset);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t}", "+\t\tpublic void drop(DropTargetEvent e) {", "+\t\t\ttext2.insert((String)e.data);"]}], "num": 58092}
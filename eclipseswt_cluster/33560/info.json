{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d65f256012011a7a0555aed6e3ccf720", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d566433baa9e6c2e90a90e0f8141e69f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "cb49a6d2f8f3f9a40eac2f482526f691922fcc89", "commitAfterChange": "a1cedd58d52b28d936b71cea33845220b7b635ec", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["+", "+\t\t/*", "+\t\t* Browser clients that ship XULRunner in a plug-in must have an opportunity ", "+\t\t* to set the org.eclipse.swt.browser.XULRunnerPath system property to point", "+\t\t* at their XULRunner before the first Mozilla-based Browser is created.  To", "+\t\t* facilitate this, reflection is used to reference non-existent class", "+\t\t* org.eclipse.swt.browser.XULRunnerInitializer the first time a Mozilla-", "+\t\t* based Browser is created.   A client wishing to use this hook can do so", "+\t\t* by creating a fragment of org.eclipse.swt that implements this class and", "+\t\t* sets the system property in its static initializer.", "+\t\t*/", "+\t\tif (mozillaPath == null) {", "+\t\t\ttry {", "+\t\t\t\tClass clazz = Class.forName (\"org.eclipse.swt.browser.XULRunnerInitializer\"); //$NON-NLS-1$", "+\t\t\t\tmozillaPath = System.getProperty (XULRUNNER_PATH);", "+\t\t\t} catch (ClassNotFoundException e) {", "+\t\t\t\t/* no fragment is providing this class, which is the typical case */", "+\t\t\t}", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88669410c382544b7d0f699bf9eb7976", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/common/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "c0a24ef99e9fd113fcc4344addef7bfbbb08fbfd", "commitAfterChange": "ae3945e746000b28b90b6daa3bba44b6b63622f2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  static int checkStyle(int style)", "signatureAfterChange": "  static int checkStyle(int style)", "diff": ["+\t\t/*", "+\t\t* Some Browser clients that explicitly specify the native renderer to use", "+\t\t* (by creating a Browser with style SWT.MOZILLA or SWT.WEBKIT) may also", "+\t\t* need to specify that all \"default\" Browser instances (those created with", "+\t\t* style SWT.NONE) should use this renderer as well.  This may be needed in", "+\t\t* order to avoid incompatibilities that can arise from having multiple", "+\t\t* native renderers loaded within the same process.  A client can do this by", "+\t\t* setting the \"org.eclipse.swt.browser.DefaultType\" java system property to", "+\t\t* a value like \"mozilla\" or \"webkit\".  ", "+\t\t*/", "+", "+\t\t/*", "+\t\t* Plug-ins need an opportunity to set the org.eclipse.swt.browser.DefaultType", "+\t\t* system property before the first Browser is created.  To facilitate this,", "+\t\t* reflection is used to reference non-existent class", "+\t\t* org.eclipse.swt.browser.BrowserInitializer the first time a Browser is created.", "+\t\t* A client wishing to use this hook can do so by creating a fragment of", "+\t\t* org.eclipse.swt that implements this class and sets the system property in its", "+\t\t* static initializer.", "+\t\t*/", "+\t\ttry {", "+\t\t\tClass.forName (\"org.eclipse.swt.browser.BrowserInitializer\"); //$NON-NLS-1$", "+\t\t} catch (ClassNotFoundException e) {", "+\t\t\t/* no fragment is providing this class, which is the typical case */", "+\t\t}", "+"]}], "num": 33560}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22f6374fa52f181e0e4346809c2fb786", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c1e48dd45b62883ab68790b7ecd4e1c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "ad7a9e5b3b139f6b5bd4c2f25f8cf8b336105a91", "commitAfterChange": "52d678e47ee00e0c9d7473cd6841b89c8499131e", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 64, "signatureBeforeChange": "  int setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "signatureAfterChange": "  int setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "diff": ["+\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {", "+\t\treturn super.setBounds (x, y, width, height, move, resize);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b5d6e1b92b2a6d21c37691c27b48eb2e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "aa5a69fe81e993c5bb9fcff4c9a425715ad470cd", "commitAfterChange": "bf9b442200602eaa6f44a276dfab033f09afe62d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  void createRenderers (int columnHandle, int modelIndex, boolean check, int columnStyle)", "signatureAfterChange": "  void createRenderers (int columnHandle, int modelIndex, boolean check, int columnStyle)", "diff": ["-void createRenderers (int /*long*/ columnHandle, int modelIndex, boolean check, int columnStyle) {", "-\tOS.gtk_tree_view_column_clear (columnHandle);", "-\tif ((style & SWT.CHECK) != 0 && check) {", "-\t\tOS.gtk_tree_view_column_pack_start (columnHandle, checkRenderer, false);", "-\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, checkRenderer, OS.active, CHECKED_COLUMN);", "-\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 2, 0)) {", "-\t\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, checkRenderer, OS.cell_background_gdk, BACKGROUND_COLUMN);", "-\t\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, checkRenderer, OS.inconsistent, GRAYED_COLUMN);", "-\t\t}", "-\tint /*long*/ pixbufRenderer = OS.gtk_cell_renderer_pixbuf_new ();", "-\tif (pixbufRenderer == 0) error (SWT.ERROR_NO_HANDLES);", "-\tint /*long*/ textRenderer = OS.gtk_cell_renderer_text_new ();", "-\tif (textRenderer == 0) error (SWT.ERROR_NO_HANDLES);", "-\t/*", "-\t* Feature on GTK.  When a tree view column contains only one activatable", "-\t* cell renderer such as a toggle renderer, mouse clicks anywhere in a cell", "-\t* activate that renderer. The workaround is to set a second  cell renderer", "-\t* to be activatable.", "-\t*/", "-\tif ((style & SWT.CHECK) != 0 && check) {", "-\t\tOS.g_object_set (pixbufRenderer, OS.mode, OS.GTK_CELL_RENDERER_MODE_ACTIVATABLE, 0);", "-\t}", "-", "-\t/* Set alignment */", "-\tif ((columnStyle & SWT.RIGHT) != 0) {", "-\t\tOS.g_object_set (textRenderer, OS.xalign, 1f, 0);", "-\t\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, false);", "-\t\tOS.gtk_tree_view_column_pack_start (columnHandle, textRenderer, true);", "-\t\tOS.gtk_tree_view_column_set_alignment (columnHandle, 1f);", "-\t} else if ((columnStyle & SWT.CENTER) != 0) {", "-\t\tOS.g_object_set (textRenderer, OS.xalign, 0.5f, 0);", "-\t\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, false);", "-\t\tOS.gtk_tree_view_column_pack_end (columnHandle, textRenderer, true);", "-\t\tOS.gtk_tree_view_column_set_alignment (columnHandle, 0.5f);", "-\t} else {", "-\t\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, false);", "-\t\tOS.gtk_tree_view_column_pack_start (columnHandle, textRenderer, true);", "-\t\tOS.gtk_tree_view_column_set_alignment (columnHandle, 0f);", "-\t}", "-", "-\t/* Add attributes */", "-\tOS.gtk_tree_view_column_add_attribute (columnHandle, pixbufRenderer, OS.pixbuf, modelIndex);", "-\tif (OS.GTK_VERSION >= OS.VERSION (2, 2, 0)) {", "-\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, pixbufRenderer, OS.cell_background_gdk, BACKGROUND_COLUMN);", "-\t}", "-\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, OS.text, modelIndex + 1);", "-\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, OS.foreground_gdk, FOREGROUND_COLUMN);", "-\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, OS.background_gdk, BACKGROUND_COLUMN);", "-\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, OS.font_desc, FONT_COLUMN);", "-\t", "-\tboolean customDraw = firstCustomDraw;", "-\tif (columnCount != 0) {", "-\t\tfor (int i=0; i<columnCount; i++) {", "-\t\t\tif (columns [i].handle == columnHandle) {", "-\t\t\t\tcustomDraw = columns [i].customDraw;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t}", "-\tif ((style & SWT.VIRTUAL) != 0 || customDraw) {", "-\t\tOS.gtk_tree_view_column_set_cell_data_func (columnHandle, textRenderer, display.textCellDataProc, handle, 0);", "-\t\tOS.gtk_tree_view_column_set_cell_data_func (columnHandle, pixbufRenderer, display.pixbufCellDataProc, handle, 0);", "+void createRenderers (int /*long*/ columnHandle, int modelIndex, boolean check, int columnStyle) {", "+\tOS.gtk_tree_view_column_clear (columnHandle);", "+\tif ((style & SWT.CHECK) != 0 && check) {", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, checkRenderer, false);", "+\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, checkRenderer, OS.active, CHECKED_COLUMN);", "+\t\t/*", "+\t\t* Feature in GTK. The inconsistent property only exists in GTK 2.2.x.", "+\t\t*/", "+\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 2, 0)) {", "+\t\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, checkRenderer, OS.inconsistent, GRAYED_COLUMN);", "+\t\t}", "+\t\t/*", "+\t\t* Bug on GTK. Gtk renders the background on top of the checkbox.", "+\t\t* This only happens in version 2.2.1 and earlier. The fix is not to set the background.   ", "+\t\t*/", "+\t\tif (OS.GTK_VERSION > OS.VERSION (2, 2, 1)) {", "+\t\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, checkRenderer, OS.cell_background_gdk, BACKGROUND_COLUMN);", "+\t\t}", "+\t}", "+\tint /*long*/ pixbufRenderer = OS.gtk_cell_renderer_pixbuf_new ();", "+\tif (pixbufRenderer == 0) error (SWT.ERROR_NO_HANDLES);", "+\tint /*long*/ textRenderer = OS.gtk_cell_renderer_text_new ();", "+\tif (textRenderer == 0) error (SWT.ERROR_NO_HANDLES);", "+\t", "+\t/*", "+\t* Feature on GTK.  When a tree view column contains only one activatable", "+\t* cell renderer such as a toggle renderer, mouse clicks anywhere in a cell", "+\t* activate that renderer. The workaround is to set a second  cell renderer", "+\t* to be activatable.", "+\t*/", "+\tif ((style & SWT.CHECK) != 0 && check) {", "+\t\tOS.g_object_set (pixbufRenderer, OS.mode, OS.GTK_CELL_RENDERER_MODE_ACTIVATABLE, 0);", "+\t}", "+", "+\t/* Set alignment */", "+\tif ((columnStyle & SWT.RIGHT) != 0) {", "+\t\tOS.g_object_set (textRenderer, OS.xalign, 1f, 0);", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, false);", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, textRenderer, true);", "+\t\tOS.gtk_tree_view_column_set_alignment (columnHandle, 1f);", "+\t} else if ((columnStyle & SWT.CENTER) != 0) {", "+\t\tOS.g_object_set (textRenderer, OS.xalign, 0.5f, 0);", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, false);", "+\t\tOS.gtk_tree_view_column_pack_end (columnHandle, textRenderer, true);", "+\t\tOS.gtk_tree_view_column_set_alignment (columnHandle, 0.5f);", "+\t} else {", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, false);", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, textRenderer, true);", "+\t\tOS.gtk_tree_view_column_set_alignment (columnHandle, 0f);", "+\t}", "+", "+\t/* Add attributes */", "+\tOS.gtk_tree_view_column_add_attribute (columnHandle, pixbufRenderer, OS.pixbuf, modelIndex + CELL_PIXBUF);", "+\t/*", "+\t * Bug on GTK. Gtk renders the background on top of the pixbuf.", "+\t * This only happens in version 2.2.1 and earlier. The fix is not to set the background.   ", "+\t */", "+\tif (OS.GTK_VERSION > OS.VERSION (2, 2, 1)) {", "+\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, pixbufRenderer, OS.cell_background_gdk, BACKGROUND_COLUMN);", "+\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, OS.background_gdk, BACKGROUND_COLUMN);", "+\t}", "+\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, OS.text, modelIndex + CELL_TEXT);", "+\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, OS.foreground_gdk, FOREGROUND_COLUMN);", "+\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, OS.font_desc, FONT_COLUMN);", "+\t", "+\tboolean customDraw = firstCustomDraw;", "+\tif (columnCount != 0) {", "+\t\tfor (int i=0; i<columnCount; i++) {", "+\t\t\tif (columns [i].handle == columnHandle) {", "+\t\t\t\tcustomDraw = columns [i].customDraw;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif ((style & SWT.VIRTUAL) != 0 || customDraw) {", "+\t\tOS.gtk_tree_view_column_set_cell_data_func (columnHandle, textRenderer, display.textCellDataProc, handle, 0);", "+\t\tOS.gtk_tree_view_column_set_cell_data_func (columnHandle, pixbufRenderer, display.pixbufCellDataProc, handle, 0);", "+\t}", "+}"]}], "num": 30604}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "835858986194cb34de32d0afe535604f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11b30ccb89075cd70ee4b531d6ffe64b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/carbon/org/eclipse/swt/printing/PrintDialog.java", "commitBeforeChange": "8b58c269ee653fc8374b5b45a0e6d529e6a1ef82", "commitAfterChange": "f697c2f3c6cb12d162d7452013f38ec22841b4b0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public PrinterData open()", "signatureAfterChange": " public PrinterData open()", "diff": ["-\t/* Return the first printer in the list */", "-\tPrinterData[] printers = Printer.getPrinterList();", "-\tif (printers.length > 0) return printers[0];", "+\tint[] buffer = new int[1];", "+\tif (OS.PMCreateSession(buffer) == OS.noErr) {", "+\t\tint printSession = buffer[0];", "+\t\tif (OS.PMCreatePrintSettings(buffer) == OS.noErr) {", "+\t\t\tint printSettings = buffer[0];", "+\t\t\tOS.PMSessionDefaultPrintSettings(printSession, printSettings);", "+\t\t\tif (OS.PMCreatePageFormat(buffer) == OS.noErr) {", "+\t\t\t\tint pageFormat = buffer[0];", "+\t\t\t\tOS.PMSessionDefaultPageFormat(printSession, pageFormat);", "+\t\t\t\tOS.PMSessionSetDestination(printSession, printSettings, (short) (printToFile ? OS.kPMDestinationFile : OS.kPMDestinationPrinter), 0, 0);", "+\t\t\t\tif (scope == PrinterData.PAGE_RANGE) {", "+\t\t\t\t\tOS.PMSetFirstPage(printSettings, startPage, false);", "+\t\t\t\t\tOS.PMSetLastPage(printSettings, endPage, false);", "+\t\t\t\t\tOS.PMSetPageRange(printSettings, startPage, endPage);", "+\t\t\t\t} else {", "+\t\t\t\t\tOS.PMSetPageRange(printSettings, 1, OS.kPMPrintAllPages);", "+\t\t\t\t}", "+\t\t\t\tboolean[] accepted = new boolean [1];", "+\t\t\t\tOS.PMSessionPageSetupDialog(printSession, pageFormat, accepted);\t", "+\t\t\t\tif (accepted[0]) {\t\t", "+\t\t\t\t\tOS.PMSessionPrintDialog(printSession, printSettings, pageFormat, accepted);", "+\t\t\t\t\tif (accepted[0]) {", "+\t\t\t\t\t\tString name = Printer.getCurrentPrinterName(printSession);", "+\t\t\t\t\t\tPrinterData data = new PrinterData(Printer.DRIVER, name);", "+\t\t\t\t\t\tshort[] destType = new short[1];", "+\t\t\t\t\t\tOS.PMSessionGetDestinationType(printSession, printSettings, destType);", "+\t\t\t\t\t\tif (destType [0] == OS.kPMDestinationFile) {", "+\t\t\t\t\t\t\tdata.printToFile = true;", "+\t\t\t\t\t\t\tOS.PMSessionCopyDestinationLocation(printSession, printSettings, buffer);", "+\t\t\t\t\t\t\tint fileName = OS.CFURLCopyFileSystemPath(buffer[0],OS.kCFURLPOSIXPathStyle);", "+\t\t\t\t\t\t\tOS.CFRelease(buffer[0]);", "+\t\t\t\t\t\t\tdata.fileName = Printer.getString(fileName);", "+\t\t\t\t\t\t\tOS.CFRelease(fileName);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.PMGetCopies(printSettings, buffer);", "+\t\t\t\t\t\tdata.copyCount = buffer[0];\t\t\t\t\t\t", "+\t\t\t\t\t\tOS.PMGetFirstPage(printSettings, buffer);", "+\t\t\t\t\t\tdata.startPage = buffer[0];", "+\t\t\t\t\t\tOS.PMGetLastPage(printSettings, buffer);", "+\t\t\t\t\t\tdata.endPage = buffer[0];", "+\t\t\t\t\t\tOS.PMGetPageRange(printSettings, null, buffer);", "+\t\t\t\t\t\tif (data.startPage == 1 && data.endPage == OS.kPMPrintAllPages) {", "+\t\t\t\t\t\t\tdata.scope = PrinterData.ALL_PAGES;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tboolean[] collate = new boolean[1];", "+\t\t\t\t\t\tOS.PMGetCollate(printSettings, collate);", "+\t\t\t\t\t\tdata.collate = collate[0];", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t/* Serialize settings */", "+\t\t\t\t\t\tint[] flatSettings = new int[1];", "+\t\t\t\t\t\tOS.PMFlattenPrintSettings(printSettings, flatSettings);", "+\t\t\t\t\t\tint[] flatFormat = new int[1];", "+\t\t\t\t\t\tOS.PMFlattenPageFormat(pageFormat, flatFormat);", "+\t\t\t\t\t\tint settingsLength = OS.GetHandleSize (flatSettings[0]);", "+\t\t\t\t\t\tint formatLength = OS.GetHandleSize (flatFormat[0]);", "+\t\t\t\t\t\tbyte[] otherData = data.otherData = new byte[settingsLength + formatLength + 8];", "+\t\t\t\t\t\tint offset = 0;", "+\t\t\t\t\t\toffset = Printer.packData(flatSettings[0], otherData, offset);", "+\t\t\t\t\t\toffset = Printer.packData(flatFormat[0], otherData, offset);", "+\t\t\t\t\t\tOS.DisposeHandle(flatSettings[0]);", "+\t\t\t\t\t\tOS.DisposeHandle(flatFormat[0]);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tscope = data.scope;", "+\t\t\t\t\t\tstartPage = data.startPage;", "+\t\t\t\t\t\tendPage = data.endPage;", "+\t\t\t\t\t\tprintToFile = data.printToFile;", "+\t\t\t\t\t\treturn data;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tOS.PMRelease(pageFormat);", "+\t\t\t}", "+\t\t\tOS.PMRelease(printSettings);", "+\t\t}", "+\t\tOS.PMRelease(printSession);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc5cf656924ee406ba1569fed25335bf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "2eda618caa8a3739d0982addf2afc5298cbf130e", "commitAfterChange": "8e85d1ede4a8fceb6018dcc84f174945605fd2a7", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "  boolean runEnterExit ()", "signatureAfterChange": "  boolean runEnterExit ()", "diff": ["-\t//OPTIMIZE - use OS calls, no garbage, widget already hit tested in mouse move", "-\tPoint point = null;", "-\tint chord = 0, modifiers = 0;", "-\tControl control = getCursorControl ();", "+\t//OPTIMIZE - get rid of garbage, use hittest from mouse proc", "+\tControl control = null;", "+\tCGPoint inPoint = null;", "+\torg.eclipse.swt.internal.carbon.Point where = new org.eclipse.swt.internal.carbon.Point ();", "+\tOS.GetGlobalMouse (where);", "+\tint [] theWindow = new int [1];", "+\tif (OS.FindWindow (where, theWindow) == OS.inContent) {", "+\t\tif (theWindow [0] != 0) {", "+\t\t\tRect windowRect = new Rect ();", "+\t\t\tOS.GetWindowBounds (theWindow [0], (short) OS.kWindowContentRgn, windowRect);", "+\t\t\tinPoint = new CGPoint ();", "+\t\t\tinPoint.x = where.h - windowRect.left;", "+\t\t\tinPoint.y = where.v - windowRect.top;", "+\t\t\tint [] theRoot = new int [1];", "+\t\t\tOS.GetRootControl (theWindow [0], theRoot);", "+\t\t\tint [] theControl = new int [1];", "+\t\t\tOS.HIViewGetSubviewHit (theRoot [0], inPoint, true, theControl);", "+\t\t\tWidget widget = null;", "+\t\t\tif (theControl [0] != 0) {", "+\t\t\t\tdo {", "+\t\t\t\t\twidget = WidgetTable.get (theControl [0]);", "+\t\t\t\t\tif (widget != null && widget instanceof Control) {", "+\t\t\t\t\t\tif (((Control) widget).getEnabled ()) break;", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.GetSuperControl (theControl [0], theControl);", "+\t\t\t\t} while (theControl [0] != 0);", "+\t\t\t}", "+\t\t\tif (widget == null) widget = WidgetTable.get (theRoot [0]);", "+\t\t\tif (widget != null && widget instanceof Control) {", "+\t\t\t\tcontrol = (Control) widget;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tboolean eventSent = false;", "+\t\tint x = 0, y = 0, chord = 0, modifiers = 0;", "-\t\t\tpoint = getCursorLocation ();", "+\t\t\teventSent = true;", "-\t\t\tPoint pt = currentControl.toControl (point);", "-\t\t\tcurrentControl.sendMouseEvent (SWT.MouseExit, (short)0, chord, (short)pt.x, (short)pt.y, modifiers);", "+\t\t\tint controlHandle = currentControl.handle;", "+\t\t\tif (inPoint == null) {", "+\t\t\t\tinPoint = new CGPoint ();", "+\t\t\t\tRect windowRect = new Rect ();", "+\t\t\t\tint window = OS.GetControlOwner (controlHandle);", "+\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, windowRect);", "+\t\t\t\tinPoint.x = where.h - windowRect.left;", "+\t\t\t\tinPoint.y = where.v - windowRect.top;", "+\t\t\t}", "+\t\t\tRect controlRect = new Rect ();", "+\t\t\tOS.GetControlBounds (controlHandle, controlRect);", "+\t\t\tx = (int) inPoint.x - controlRect.left;", "+\t\t\ty = (int) inPoint.y - controlRect.top;", "+\t\t\tcurrentControl.sendMouseEvent (SWT.MouseExit, (short)0, chord, (short)x, (short)y, modifiers);", "-\t\t\tif (point == null) {", "-\t\t\t\tpoint = getCursorLocation ();", "+\t\t\tif (!eventSent) {", "+\t\t\t\teventSent = true;", "+\t\t\t\tint controlHandle = currentControl.handle;", "+\t\t\t\tif (inPoint == null) {", "+\t\t\t\t\tinPoint = new CGPoint ();", "+\t\t\t\t\tRect windowRect = new Rect ();", "+\t\t\t\t\tint window = OS.GetControlOwner (controlHandle);", "+\t\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, windowRect);", "+\t\t\t\t\tinPoint.x = where.h - windowRect.left;", "+\t\t\t\t\tinPoint.y = where.v - windowRect.top;", "+\t\t\t\t}", "+\t\t\t\tRect controlRect = new Rect ();", "+\t\t\t\tOS.GetControlBounds (controlHandle, controlRect);", "+\t\t\t\tx = (int) inPoint.x - controlRect.left;", "+\t\t\t\ty = (int) inPoint.y - controlRect.top;", "+", "-\t\t\tPoint pt = currentControl.toControl (point);", "-\t\t\tcurrentControl.sendMouseEvent (SWT.MouseEnter, (short)0, chord, (short)pt.x, (short)pt.y, modifiers);", "+\t\t\tcurrentControl.sendMouseEvent (SWT.MouseEnter, (short)0, chord, (short)x, (short)y, modifiers);", "+\t\t\torg.eclipse.swt.internal.carbon.Point localPoint = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\tOS.SetPt (localPoint, (short) inPoint.x, (short) inPoint.y);", "+\t\t\tboolean [] cursorWasSet = new boolean [1];", "+\t\t\tOS.HandleControlSetCursor (currentControl.handle, localPoint, (short) modifiers, cursorWasSet);", "+\t\t\tif (!cursorWasSet [0]) OS.SetThemeCursor (OS.kThemeArrowCursor);", "-\treturn point != null;", "+\treturn eventSent;"]}], "num": 19757}
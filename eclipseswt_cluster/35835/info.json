{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90e2751b3afbf832b893cb0f551060b5", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6c89262ec0c0b44764012f6a9154a42", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "e19b8929298db4194771a475b4b9ef56a8238374", "commitAfterChange": "ca0c5209be7fe694c5578ad160491b05c77a1894", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public Control getCursorControl ()", "signatureAfterChange": " public Control getCursorControl ()", "diff": ["-\tint inputElement = OS.Mouse_DirectlyOver ();", "+\tint inputElement = 0;", "+\tint captured = OS.Mouse_Captured ();", "+\tif (captured != 0) {", "+\t\tint sources = OS.PresentationSource_CurrentSources ();", "+\t\tint enumerator = OS.IEnumerable_GetEnumerator (sources);", "+\t\twhile (OS.IEnumerator_MoveNext (enumerator) && inputElement == 0) {", "+\t\t\tint current = OS.IEnumerator_Current (enumerator);", "+\t\t\tint root = OS.PresentationSource_RootVisual (current);", "+\t\t\tif (root != 0) {", "+\t\t\t\tint pt = OS.Mouse_GetPosition (root);", "+\t\t\t\tinputElement = OS.UIElement_InputHitTest (root, pt);", "+\t\t\t\tOS.GCHandle_Free (pt);", "+\t\t\t\tOS.GCHandle_Free (root);", "+\t\t\t}", "+\t\t\tOS.GCHandle_Free (current);", "+\t\t}", "+\t\tOS.GCHandle_Free (enumerator);", "+\t\tOS.GCHandle_Free (sources);", "+\t\tif (captured!=0)OS.GCHandle_Free (captured);", "+\t} else {", "+\t\tinputElement = OS.Mouse_DirectlyOver ();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca4f7a13b9dd781c6e010aeccc8597a7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "f6cc538297408832aa00573abc861f357a5685cd", "commitAfterChange": "d50c92039c774f47798b07f96f84be9679e08c72", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "\r public void setControl (Control control)", "signatureAfterChange": "\r public void setControl (Control control)", "diff": ["+\t\t/*\r", "+\t\t * It is possible that the control was created with a \r", "+\t\t * z-order below that of the current tool item. In this\r", "+\t\t * case, the control is not visible because it is \r", "+\t\t * obscured by the tool item. The fix is to move the \r", "+\t\t * control above this tool item in the z-order.  \r", "+\t\t * The code below is similar to the code found in \r", "+\t\t * setZOrder.\r", "+\t\t */\r", "+\t\tint xDisplay = OS.XtDisplay (handle);\r", "+\t\tif (xDisplay == 0) return;\r", "+\t\tif (!OS.XtIsRealized (handle)) {\r", "+\t\t\tShell shell = parent.getShell ();\r", "+\t\t\tshell.realizeWidget ();\r", "+\t\t}\r", "+\t\tint topHandle1 = control.topHandle ();\r", "+\t\tint window1 = OS.XtWindow (topHandle1);\r", "+\t\tif (window1 == 0) return;\r", "+\t\tint topHandle2 = this.topHandle ();\r", "+\t\tint window2 = OS.XtWindow (topHandle2);\r", "+\t\tif (window2 == 0) return;\r", "+\t\tXWindowChanges struct = new XWindowChanges ();\r", "+\t\tstruct.sibling = window2;\r", "+\t\tstruct.stack_mode = OS.Above;\r", "+\t\tint screen = OS.XDefaultScreen (xDisplay);\r", "+\t\tint flags = OS.CWStackMode | OS.CWSibling;\r", "+\t\tOS.XReconfigureWMWindow (xDisplay, window1, screen, flags, struct);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2db3b4ade1fae72d34324ded1511b66c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "483fa10c58617ef5c7747f0eb622f29ae07c8f30", "commitAfterChange": "65046fe56198703fc47a1bcc30243bde5e029379", "methodNumberBeforeChange": 154, "methodNumberAfterChange": 154, "signatureBeforeChange": "  void setZOrder (Control sibling, boolean above, boolean fixChildren)", "signatureAfterChange": "  void setZOrder (Control sibling, boolean above, boolean fixChildren)", "diff": ["-\tif (above) {", "-\t\tif (window != 0) OS.gdk_window_raise (window);", "-\t\tif (fixChildren) parent.moveAbove (topHandle, siblingHandle);", "-\t} else {", "-\t\tif (window != 0) OS.gdk_window_lower (window);", "-\t\tif (fixChildren) parent.moveBelow (topHandle, siblingHandle);", "+\tif (window != 0) {", "+\t\tint siblingWindow = sibling != null ? OS.GTK_WIDGET_WINDOW (siblingHandle) : 0;", "+\t\tif (!OS.GDK_WINDOWING_X11 () || siblingWindow == 0) {", "+\t\t\t\tif (above) {", "+\t\t\t\t\tOS.gdk_window_raise (window);", "+\t\t\t\t} else {", "+\t\t\t\t\tOS.gdk_window_lower (window);", "+\t\t\t\t}", "+\t\t} else {", "+\t\t\tXWindowChanges changes = new XWindowChanges ();", "+\t\t\tchanges.sibling = OS.gdk_x11_drawable_get_xid (siblingWindow);", "+\t\t\tchanges.stack_mode = above ? OS.Above : OS.Below;", "+\t\t\tint xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);", "+\t\t\tint xWindow = OS.gdk_x11_drawable_get_xid (window);", "+\t\t\tint xScreen = OS.XDefaultScreen (xDisplay);", "+\t\t\tint flags = OS.CWStackMode | OS.CWSibling;", "+\t\t\t/*", "+\t\t\t* Feature in X. If the receiver is a top level, XConfigureWindow ()", "+\t\t\t* will fail (with a BadMatch error) for top level shells because top", "+\t\t\t* level shells are reparented by the window manager and do not share", "+\t\t\t* the same X window parent.  This is the correct behavior but it is", "+\t\t\t* unexpected.  The fix is to use XReconfigureWMWindow () instead.", "+\t\t\t* When the receiver is not a top level shell, XReconfigureWMWindow ()", "+\t\t\t* behaves the same as XConfigureWindow ().", "+\t\t\t*/", "+\t\t\tOS.XReconfigureWMWindow (xDisplay, xWindow, xScreen, flags, changes);", "+\t\t}", "+\tif (fixChildren) {", "+\t\tif (above) {", "+\t\t\tparent.moveAbove (topHandle, siblingHandle);", "+\t\t} else {", "+\t\t\tparent.moveBelow (topHandle, siblingHandle);", "+\t\t}", "+\t}", "+\t/*", "+\t* Make sure that the parent handle is on the bottom of the stack", "+\t* when the parent children are siblings of the parent handle.", "+\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc6ce9aea7ed65a289ca339e4ef796fe", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "222c99bbebba9ab406a0910e7665c9a35629b288", "commitAfterChange": "a44223adfcd4e06bb8c8891ca5fa698e5d0b0ad8", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\t\t\tint row = OS.gcnew_SWTRow (parent.jniRef, handle);", "-\t\t\tOS.GridViewRowPresenter_Content (headerHandle, row);", "-\t\t\tOS.GCHandle_Free (row);", "-\t\t\tint row = OS.gcnew_SWTRow (parent.jniRef, handle);", "-\t\t\tOS.HeaderedItemsControl_Header (handle, row);", "-\t\t\tOS.GCHandle_Free (row);", "-\tupdateCheckState (false);", "+\tupdateCheck ();", "+\t", "+\t//clear the default templated foreground.", "+\tint itemStyle = OS.gcnew_Style();", "+\tint property = OS.Control_ForegroundProperty();", "+\tint propertyPath = createDotNetString(\"Foreground\", false);", "+\tint binding = OS.gcnew_Binding(propertyPath);", "+\tint source = OS.gcnew_RelativeSource(OS.RelativeSourceMode_FindAncestor);", "+\tint treeViewType = OS.TreeView_typeid();", "+\tOS.RelativeSource_AncestorType(source, treeViewType);", "+\tOS.Binding_RelativeSource(binding, source);", "+\tint setter = OS.gcnew_Setter(property, binding);", "+\tint setters = OS.Style_Setters(itemStyle);", "+\tOS.SetterBaseCollection_Add(setters, setter);", "+\tOS.FrameworkElement_Style(handle, itemStyle);", "+\tOS.GCHandle_Free(property);", "+\tOS.GCHandle_Free(propertyPath);", "+\tOS.GCHandle_Free(binding);", "+\tOS.GCHandle_Free(source);", "+\tOS.GCHandle_Free(treeViewType);", "+\tOS.GCHandle_Free(setter);", "+\tOS.GCHandle_Free(setters);", "+\tOS.GCHandle_Free(itemStyle);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1308a83ba0f870afe3f2ccb2d31e4cbd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "14120886fce522b10b4a78abec3834ceb820f1f5", "commitAfterChange": "3dbca50e1d527f9d970adadbc94c490ef4ed4b08", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  static boolean gio_isExecutable(String fileName)", "signatureAfterChange": "  static boolean gio_isExecutable(String fileName)", "diff": ["-\treturn OS.g_file_test(fileNameBuffer, OS.G_FILE_TEST_IS_EXECUTABLE);", "+\tif (!OS.g_file_test(fileNameBuffer, OS.G_FILE_TEST_IS_EXECUTABLE)) return false;", "+\tint /*long*/ file = OS.g_file_new_for_path (fileNameBuffer);", "+\tboolean result = false;", "+\tif (file != 0) {", "+\t\tbyte[] buffer = Converter.wcsToMbcs (null, \"*\", true); //$NON-NLS-1$", "+\t\tint /*long*/ fileInfo = OS.g_file_query_info(file, buffer, 0, 0, 0);", "+\t\tif (fileInfo != 0) {", "+\t\t\tint /*long*/ contentType = OS.g_file_info_get_content_type(fileInfo);", "+\t\t\tif (contentType != 0) {", "+\t\t\t\tbyte[] exeType = Converter.wcsToMbcs (null, \"application/x-executable\", true); //$NON-NLS-1$", "+\t\t\t\tresult = OS.g_content_type_is_a(contentType, exeType);", "+\t\t\t\tif (!result) {", "+\t\t\t\t\tbyte [] shellType = Converter.wcsToMbcs (null, \"application/x-shellscript\", true); //$NON-NLS-1$", "+\t\t\t\t\tresult = OS.g_content_type_equals(contentType, shellType);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.g_object_unref(fileInfo);", "+\t\t}", "+\t\tOS.g_object_unref (file);", "+\t}", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "217da0a12e4c2361776b022d7b34200a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "d7c1fc5764f6967174b7e672c5757dca7558afa1", "commitAfterChange": "f6e0d0d1edf37b12b050c1459d864b748a7d7855", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " public void setTopIndex (int index)", "signatureAfterChange": " public void setTopIndex (int index)", "diff": ["-\t//FIXME: LineCount returns -1 until widget is realized", "-\tindex = Math.min (Math.max (index, 0), count - 1);", "-\tint topIndex = OS.TextBox_GetFirstVisibleLineIndex (handle);", "-\t//FIXME ScrollToLine != top index", "-\tOS.TextBox_ScrollToLine (handle, index - topIndex);", "+\tif (count == -1) {", "+\t\tupdateLayout (handle);", "+\t\tcount = OS.TextBox_LineCount (handle);", "+\t}", "+\tindex = Math.max(0, Math.min (index, count-1));", "+\tint family = OS.Control_FontFamily (handle);", "+\tdouble lineSpacing = OS.FontFamily_LineSpacing (family);", "+\tOS.GCHandle_Free (family);", "+\tdouble size = OS.Control_FontSize (handle);", "+\tdouble lineHeight = lineSpacing * size;", "+\tint name = createDotNetString (\"PART_ContentHost\", false);", "+\tint template = OS.Control_Template (handle);", "+\tint scroller = OS.FrameworkTemplate_FindName (template, name, handle);", "+\tOS.GCHandle_Free (name);", "+\tOS.GCHandle_Free (template);", "+\tif (scroller == 0) return;", "+\tdouble vertOffset = index*lineHeight;", "+\tOS.ScrollViewer_ScrollToVerticalOffset (scroller, vertOffset);", "+\tOS.GCHandle_Free (scroller);", "+\tupdateLayout(handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8632cc054954772bd26e8a5ac2ff481b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "0fc225484e34e60481435b9a30ca929fcc229bc5", "commitAfterChange": "12b7359f9fe249b36672bf747669f5296fc9af7a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r void createDisplay (DeviceData data)", "signatureAfterChange": "\r void createDisplay (DeviceData data)", "diff": ["+\t/* \r", "+\t* On some DB Linux platforms, the default font list may not be properly\r", "+\t* initialized to contain a FontSet. This causes the input method to\r", "+\t* fail. The fix is to set the fallback resource with an appropriated\r", "+\t* font.\r\t*/\r", "+\tint ptr1 = 0, ptr2 = 0; \r", "+\tif (OS.IsLinux && OS.IsDBLocale) {\r", "+\t\tString resource = \"*fontList: -*-fixed-medium-r-*-*-12-*-*-*-*-*-*-*:\";\r", "+\t\tbyte [] buffer = Converter.wcsToMbcs (null, resource, true);\r", "+\t\tptr1 = OS.XtMalloc (buffer.length);\r", "+\t\tif (ptr1 != 0) OS.memmove (ptr1, buffer, buffer.length);\r", "+\t\tint [] spec = new int[]{ptr1, 0};\r", "+\t\tptr2 = OS.XtMalloc (spec.length * 4);\r", "+\t\tif (ptr2 != 0)OS.memmove (ptr2, spec, spec.length * 4);\r", "+\t\tOS.XtAppSetFallbackResources(xtContext, ptr2); \r", "+\t}\r", "+\t\r", "+\t\r", "+\tif (ptr2 != 0) {\r", "+\t\tOS.XtAppSetFallbackResources (xtContext, 0);\r", "+\t\tOS.XtFree (ptr2);\r", "+\t}\r", "+\tif (ptr1 != 0) OS.XtFree (ptr1);\r"]}], "num": 35835}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c6ef5f3f258361ae94cbdb4b4320523", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "223ed9a38c73f6a6a194fce6c2df8fff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "0636059c6a5b4de3812ff9426295459552bf6910", "commitAfterChange": "8e9705d93325d1390b1c14aa0ba55b9649457ef3", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " public void timerExec (int milliseconds, Runnable runnable)", "signatureAfterChange": " public void timerExec (int milliseconds, Runnable runnable)", "diff": ["+\tif (runnable == null) error (SWT.ERROR_NULL_ARGUMENT);\r", "-\tif (timers == null) timers = new int [4];\r", "+\tif (timerIds == null) timerIds = new int [4];\r", "-\t\tif (timerList [index] == null) break;\r", "+\t\tif (timerList [index] == runnable) break;\r", "-\tif (index == timerList.length) {\r", "-\t\tRunnable [] newTimerList = new Runnable [timerList.length + 4];\r", "-\t\tSystem.arraycopy (timerList, 0, newTimerList, 0, timerList.length);\r", "-\t\ttimerList = newTimerList;\r", "-\t\tint [] newTimers = new int [timers.length + 4];\r", "-\t\tSystem.arraycopy (timers, 0, newTimers, 0, timers.length);\r", "-\t\ttimers = newTimers;\r", "+\tif (index != timerList.length) {\r", "+\t\tOS.PtDestroyWidget (timerIds [index]);\r", "+\t\ttimerList [index] = null;\r", "+\t\ttimerIds [index] = 0;\r", "+\t\tif (milliseconds < 0) return;\r", "+\t} else {\r", "+\t\tif (milliseconds < 0) return;\r", "+\t\tindex = 0;\r", "+\t\twhile (index < timerList.length) {\r", "+\t\t\tif (timerList [index] == null) break;\r", "+\t\t\tindex++;\r", "+\t\t}\r", "+\t\tif (index == timerList.length) {\r", "+\t\t\tRunnable [] newTimerList = new Runnable [timerList.length + 4];\r", "+\t\t\tSystem.arraycopy (timerList, 0, newTimerList, 0, timerList.length);\r", "+\t\t\ttimerList = newTimerList;\r", "+\t\t\tint [] newTimerIds = new int [timerIds.length + 4];\r", "+\t\t\tSystem.arraycopy (timerIds, 0, newTimerIds, 0, timerIds.length);\r", "+\t\t\ttimerIds = newTimerIds;\r", "+\t\t}\r", "-\tint handle = OS.PtCreateWidget (OS.PtTimer (), timerHandle, args.length / 3, args);\r", "-\tOS.PtRealizeWidget (handle);\r", "-\tif (handle != 0) {\r", "-\t\tOS.PtAddCallback (handle, OS.Pt_CB_TIMER_ACTIVATE, timerProc, index);\r", "+\tint timerId = OS.PtCreateWidget (OS.PtTimer (), timerHandle, args.length / 3, args);\r", "+\tif (timerId != 0) {\r", "+\t\tOS.PtRealizeWidget (timerId);\r", "+\t\tOS.PtAddCallback (timerId, OS.Pt_CB_TIMER_ACTIVATE, timerProc, index);\r", "+\t\ttimerIds [index] = timerId;\r", "-\t\ttimers [index] = handle;\r", "-\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ec5fe26e3101ffe823d93efe98cd019", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Color.java", "commitBeforeChange": "6fec6ced4910cccf9d4e60208d0302cbddc495a9", "commitAfterChange": "802e089feef0ca11ad1a5094d14ea1ddf29d3800", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  void init(Device display, int red, int green, int blue)", "signatureAfterChange": "  void init(Device device, int red, int green, int blue)", "diff": ["-void init(Device display, int red, int green, int blue) {", "-\tif (display == null) display = Display.getDefault();", "-\tthis.display = display;", "-\thandle = new GdkColor();", "-\thandle.red = (short)((red & 0xFF) | ((red & 0xFF) << 8));", "-\thandle.green = (short)((green & 0xFF) | ((green & 0xFF) << 8));", "-\thandle.blue = (short)((blue & 0xFF) | ((blue & 0xFF) << 8));", "+", "+void init(Device device, int red, int green, int blue) {", "+\tif (device == null) device = Device.getDevice();", "+\tif (device == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+\tthis.device = device;", "+\tif ((red > 255) || (red < 0) ||", "+\t\t(green > 255) || (green < 0) ||", "+\t\t(blue > 255) || (blue < 0)) {", "+\t\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t}", "+\tGdkColor gdkColor = new GdkColor();", "+\tgdkColor.red = (short)((red & 0xFF) | ((red & 0xFF) << 8));", "+\tgdkColor.green = (short)((green & 0xFF) | ((green & 0xFF) << 8));", "+\tgdkColor.blue = (short)((blue & 0xFF) | ((blue & 0xFF) << 8));", "-\tOS.gdk_color_alloc(colormap, handle);", "-\tif (display.colorRefCount != null) {", "-\t\t// Make a copy of the color to put in the colors array", "+\tif (!OS.gdk_colormap_alloc_color(colormap, gdkColor, true, true)) {", "+\t\t/* Allocate black. */", "+\t\tgdkColor = new GdkColor();", "+\t\tOS.gdk_colormap_alloc_color(colormap, gdkColor, true, true);", "+\t}", "+\thandle = gdkColor;", "+\tif (device.colorRefCount != null) {", "+\t\t/* Make a copy of the color to put in the colors array */", "-\t\tdisplay.gdkColors[colorCopy.pixel] = colorCopy;", "-\t\tdisplay.colorRefCount[colorCopy.pixel]++;", "+\t\tdevice.gdkColors[colorCopy.pixel] = colorCopy;", "+\t\tdevice.colorRefCount[colorCopy.pixel]++;"]}], "num": 17846}
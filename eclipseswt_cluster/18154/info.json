{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f2f6cced72fdc31eeb82e62c4422e8c8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "113ec2cbd56f9b29ec35c126feee6455", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "272967205f3824ec29456112026262c64ae69dfa", "commitAfterChange": "fc62fa389f9358a82d98c59fbeba910f7ca8c593", "methodNumberBeforeChange": 198, "methodNumberAfterChange": 196, "signatureBeforeChange": "  LRESULT WM_MOUSEMOVE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_MOUSEMOVE (int wParam, int lParam)", "diff": ["-\tint pos = OS.GetMessagePos ();", "-\tif (pos != display.lastMouse) {", "-\t\tif (!OS.IsWinCE) {", "-\t\t\tboolean mouseEnter = hooks (SWT.MouseEnter) || display.filters (SWT.MouseEnter);", "-\t\t\tboolean mouseExit = hooks (SWT.MouseExit) || display.filters (SWT.MouseExit);", "-\t\t\tboolean mouseHover = hooks (SWT.MouseHover) || display.filters (SWT.MouseHover);", "-\t\t\tif (mouseEnter || mouseExit || mouseHover) {", "-\t\t\t\tTRACKMOUSEEVENT lpEventTrack = new TRACKMOUSEEVENT ();", "-\t\t\t\tlpEventTrack.cbSize = TRACKMOUSEEVENT.sizeof;", "-\t\t\t\tlpEventTrack.dwFlags = OS.TME_QUERY;", "-\t\t\t\tlpEventTrack.hwndTrack = handle;", "-\t\t\t\tOS.TrackMouseEvent (lpEventTrack);", "-\t\t\t\tif (lpEventTrack.dwFlags == 0) {", "-\t\t\t\t\tlpEventTrack.dwFlags = OS.TME_LEAVE | OS.TME_HOVER;", "-\t\t\t\t\tlpEventTrack.hwndTrack = handle;", "-\t\t\t\t\tOS.TrackMouseEvent (lpEventTrack);", "-\t\t\t\t\tif (mouseEnter) {", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* Force all outstanding WM_MOUSELEAVE messages to be dispatched before", "-\t\t\t\t\t\t* issuing a mouse enter.  This causes mouse exit events to be processed", "-\t\t\t\t\t\t* before mouse enter events.  Note that WM_MOUSELEAVE is posted to the", "-\t\t\t\t\t\t* event queue by TrackMouseEvent().", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tMSG msg = new MSG ();", "-\t\t\t\t\t\tint flags = OS.PM_REMOVE | OS.PM_NOYIELD | OS.PM_QS_INPUT | OS.PM_QS_POSTMESSAGE;", "-\t\t\t\t\t\twhile (OS.PeekMessage (msg, 0, OS.WM_MOUSELEAVE, OS.WM_MOUSELEAVE, flags)) {", "-\t\t\t\t\t\t\tOS.TranslateMessage (msg);", "-\t\t\t\t\t\t\tOS.DispatchMessage (msg);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tsendMouseEvent (SWT.MouseEnter, 0, OS.WM_MOUSEMOVE, wParam, lParam);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tlpEventTrack.dwFlags = OS.TME_HOVER;", "-\t\t\t\t\tOS.TrackMouseEvent (lpEventTrack);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tdisplay.lastMouse = pos;", "-\t\tsendMouseEvent (SWT.MouseMove, 0, OS.WM_MOUSEMOVE, wParam, lParam);", "-\t}", "-\treturn null;", "+\treturn wmMouseMove (handle, wParam, lParam);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47f89456c555cc2aa5da21b2c9fb24b9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "d4eb14ad4f7b1074d4935c2b9211f94b2750616d", "commitAfterChange": "7d562ae8941ad5655a314eac8dd19e3b2aaef50c", "methodNumberBeforeChange": 163, "methodNumberAfterChange": 163, "signatureBeforeChange": "\r \r LRESULT WM_MOUSEMOVE (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_MOUSEMOVE (int wParam, int lParam)", "diff": ["-\tboolean hooksMouseEnter = hooks (SWT.MouseEnter);\r", "-\tif (hooksMouseEnter || hooks (SWT.MouseExit) || hooks (SWT.MouseHover)) {\r", "-\t\tTRACKMOUSEEVENT lpEventTrack = new TRACKMOUSEEVENT ();\r", "-\t\tlpEventTrack.cbSize = TRACKMOUSEEVENT.sizeof;\r", "-\t\tlpEventTrack.dwFlags = OS.TME_QUERY;\r", "-\t\tlpEventTrack.hwndTrack = handle;\r", "-\t\tOS.TrackMouseEvent (lpEventTrack);\r", "-\t\tif (lpEventTrack.dwFlags == 0) {\r", "-\t\t\tlpEventTrack.dwFlags = OS.TME_LEAVE | OS.TME_HOVER;\r", "+\tif (!OS.IsWinCE) {\r", "+\t\tboolean hooksMouseEnter = hooks (SWT.MouseEnter);\r", "+\t\tif (hooksMouseEnter || hooks (SWT.MouseExit) || hooks (SWT.MouseHover)) {\r", "+\t\t\tTRACKMOUSEEVENT lpEventTrack = new TRACKMOUSEEVENT ();\r", "+\t\t\tlpEventTrack.cbSize = TRACKMOUSEEVENT.sizeof;\r", "+\t\t\tlpEventTrack.dwFlags = OS.TME_QUERY;\r", "-\t\t\tif (hooksMouseEnter) {\r", "-\t\t\t\tEvent event = new Event ();\r", "-\t\t\t\tevent.time = OS.GetMessageTime ();\r", "-\t\t\t\tevent.x = (short) (lParam & 0xFFFF);\r", "-\t\t\t\tevent.y = (short) (lParam >> 16);\r", "-\t\t\t\tpostEvent (SWT.MouseEnter, event);\r", "+\t\t\tif (lpEventTrack.dwFlags == 0) {\r", "+\t\t\t\tlpEventTrack.dwFlags = OS.TME_LEAVE | OS.TME_HOVER;\r", "+\t\t\t\tlpEventTrack.hwndTrack = handle;\r", "+\t\t\t\tOS.TrackMouseEvent (lpEventTrack);\r", "+\t\t\t\tif (hooksMouseEnter) {\r", "+\t\t\t\t\tEvent event = new Event ();\r", "+\t\t\t\t\tevent.x = (short) (lParam & 0xFFFF);\r", "+\t\t\t\t\tevent.y = (short) (lParam >> 16);\r", "+\t\t\t\t\tpostEvent (SWT.MouseEnter, event);\r", "+\t\t\t\t}\r", "+\t\t\t} else {\r", "+\t\t\t\tlpEventTrack.dwFlags = OS.TME_HOVER;\r", "+\t\t\t\tOS.TrackMouseEvent (lpEventTrack);\r", "-\t\t} else {\r", "-\t\t\tlpEventTrack.dwFlags = OS.TME_HOVER;\r", "-\t\t\tOS.TrackMouseEvent (lpEventTrack);\r"]}], "num": 18154}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a12085bc4434a25d8dc22ffb0d99f2b1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "682707f54e3d431e9e0be511561ecdb1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Spinner.java", "commitBeforeChange": "a59fff904b3e7df800e239fd40c3c4caa287ab9c", "commitAfterChange": "af47b10ecd62c321048a89b6e8b7417850c28ef2", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  void keyDown (int id, int sel, int theEvent)", "signatureAfterChange": " public int getTextLimit ()", "diff": ["-void keyDown (int /*long*/ id, int /*long*/ sel, int /*long*/ theEvent) {", "-\tNSEvent event = new NSEvent(theEvent);", "-\tNSString chars = event.charactersIgnoringModifiers();", "-\t", "-\tint delta = 0;", "-    int keyChar = 0;", "-", "-    if (chars.length() != 1) return;", "-    ", "-    keyChar = (int)/*64*/chars.characterAtIndex(0);", "-", "-    switch (keyChar) {", "-\t    case OS.NSEnterCharacter: /* KP Enter */", "-\t    case OS.NSNewlineCharacter: /* Return */", "-\t    \tpostEvent (SWT.DefaultSelection);", "-\t    \treturn;", "-\t    case OS.NSPageUpFunctionKey: delta = pageIncrement; break;", "-\t    case OS.NSPageDownFunctionKey: delta = -pageIncrement; break;", "-\t    case OS.NSDownArrowFunctionKey: delta = -getIncrement(); break;", "-\t    case OS.NSUpArrowFunctionKey: delta = getIncrement(); break;", "-\t    ", "-\t    default: {", "-\t    \tNSCharacterSet numbers = new NSCharacterSet(NSCharacterSet.decimalDigitCharacterSet().id);", "-\t    \tboolean isANumber = numbers.characterIsMember((short) keyChar);", "-\t    \tboolean isSeparator = (keyChar == textFormatter.decimalSeparator().characterAtIndex(0));", "-\t    \tboolean isMathSymbol = (keyChar == 0x2d || keyChar == 0x2b); // Minus sign, plus sign", "-\t    \tif (isANumber || (isSeparator && digits > 0) || isMathSymbol) super.keyDown(id, sel, theEvent);", "-\t    }", "-    }", "-", "-    if (delta != 0) {", "-    \tboolean [] parseFail = new boolean [1];", "-    \tint value = getSelectionText (parseFail);", "-    \tif (parseFail [0]) {", "-    \t\tvalue = (int)buttonView.doubleValue();", "-    \t}", "-    \tint newValue = value + delta;", "-    \tint max = (int)buttonView.maxValue();", "-    \tint min = (int)buttonView.minValue();", "-    \tif ((style & SWT.WRAP) != 0) {", "-    \t\tif (newValue > max) newValue = min;", "-    \t\tif (newValue < min) newValue = max;", "-    \t}", "-    \tnewValue = Math.min (Math.max (min, newValue), max);", "-    \tif (value != newValue) setSelection (newValue, true, true, true);", "-    \treturn;", "-    } else {", "-    \tboolean [] parseFail = new boolean [1];", "-    \tint value = getSelectionText (parseFail);", "-    \tif (!parseFail [0]) {", "-    \t\tint pos = (int)buttonView.doubleValue();", "-    \t\tif (pos != value) setSelection (value, true, false, true);", "-    \t}", "-    }", "+ */", "+public int getTextLimit () {", "+\tcheckWidget();", "+    return textLimit;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31cf8d66e25fd21730dd53150082b3a9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "45585fa2e7285a3bb37f9ceb83572ce9673699f1", "commitAfterChange": "1ad491e6034e78929a62a27a0caa0a133127f327", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create(Composite parent, int style)", "signatureAfterChange": "  public void create(Composite parent, int style)", "diff": ["-\t/*", "-\t* Registry entry HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Internet Explorer\\Version indicates", "-\t* which version of IE is installed.  Check this value in order to determine version-specific", "-\t* features that can be enabled.", "-\t*/", "-\tTCHAR key = new TCHAR (0, \"Software\\\\Microsoft\\\\Internet Explorer\", true);\t//$NON-NLS-1$", "-\tint /*long*/ [] phkResult = new int /*long*/ [1];", "-\tif (OS.RegOpenKeyEx (OS.HKEY_LOCAL_MACHINE, key, 0, OS.KEY_READ, phkResult) == 0) {", "-\t\tint [] lpcbData = new int [1];", "-\t\tTCHAR buffer = new TCHAR (0, \"Version\", true); //$NON-NLS-1$", "-\t\tint result = OS.RegQueryValueEx (phkResult [0], buffer, 0, null, (TCHAR) null, lpcbData);", "-\t\tif (result == 0) {", "-\t\t\tTCHAR lpData = new TCHAR (0, lpcbData [0] / TCHAR.sizeof);", "-\t\t\tresult = OS.RegQueryValueEx (phkResult [0], buffer, 0, null, lpData, lpcbData);", "-\t\t\tif (result == 0) {", "-\t\t\t\tString versionString = lpData.toString (0, lpData.strlen ());", "-\t\t\t\tint index = versionString.indexOf (\".\"); //$NON-NLS-1$", "-\t\t\t\tif (index != -1) {", "-\t\t\t\t\tString majorString = versionString.substring (0, index);", "-\t\t\t\t\tint major = 0;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tmajor = Integer.valueOf (majorString).intValue ();", "-\t\t\t\t\t} catch (NumberFormatException e) {", "-\t\t\t\t\t\t/* just continue, version-specific features will not be enabled */", "-\t\t\t\t\t}", "-\t\t\t\t\tif (major >= 7) {", "-\t\t\t\t\t\tsilenceInternalNavigate = true;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tOS.RegCloseKey (phkResult [0]);", "-\t}", "-", "-\t/*", "-\t* Registry entry HKEY_CLASSES_ROOT\\Shell.Explorer\\CLSID indicates which version of", "-\t* Shell.Explorer to use by default.  We usually want to use this value because it", "-\t* typically points at the newest one that is available.  However it is possible for", "-\t* this registry entry to be changed by another application to point at some other", "-\t* Shell.Explorer version.", "-\t*", "-\t* The Browser depends on the Shell.Explorer version being at least Shell.Explorer.2.", "-\t* If it is detected in the registry to be Shell.Explorer.1 then change the progId that", "-\t* will be embedded to explicitly specify Shell.Explorer.2.", "-\t*/", "-\tString progId = \"Shell.Explorer\";\t//$NON-NLS-1$", "-\tkey = new TCHAR (0, \"Shell.Explorer\\\\CLSID\", true);\t//$NON-NLS-1$", "-\tphkResult = new int /*long*/ [1];", "-\tif (OS.RegOpenKeyEx (OS.HKEY_CLASSES_ROOT, key, 0, OS.KEY_READ, phkResult) == 0) {", "-\t\tint [] lpcbData = new int [1];", "-\t\tint result = OS.RegQueryValueEx (phkResult [0], null, 0, null, (TCHAR) null, lpcbData);", "-\t\tif (result == 0) {", "-\t\t\tTCHAR lpData = new TCHAR (0, lpcbData [0] / TCHAR.sizeof);", "-\t\t\tresult = OS.RegQueryValueEx (phkResult [0], null, 0, null, lpData, lpcbData);", "-\t\t\tif (result == 0) {", "-\t\t\t\tString clsid = lpData.toString (0, lpData.strlen ());", "-\t\t\t\tif (clsid.equals (CLSID_SHELLEXPLORER1)) {", "-\t\t\t\t\t/* Shell.Explorer.1 is the default, ensure that Shell.Explorer.2 is available */", "-\t\t\t\t\tkey = new TCHAR (0, \"Shell.Explorer.2\", true);\t//$NON-NLS-1$", "-\t\t\t\t\tint /*long*/ [] phkResult2 = new int /*long*/ [1];", "-\t\t\t\t\tif (OS.RegOpenKeyEx (OS.HKEY_CLASSES_ROOT, key, 0, OS.KEY_READ, phkResult2) == 0) {", "-\t\t\t\t\t\t/* specify that Shell.Explorer.2 is to be used */", "-\t\t\t\t\t\tOS.RegCloseKey (phkResult2 [0]);", "-\t\t\t\t\t\tprogId = \"Shell.Explorer.2\";\t//$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tOS.RegCloseKey (phkResult [0]);", "-\t}", "-\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d3f5c56329a76df939d8fa86907cddd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "d62639ede6a7c1602973b824cc7101b67ed4c309", "commitAfterChange": "21edcd9179bf3e0a6f314b5d553d95c17b6bc393", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": "  void setToolTipText (long rootWidget, long tipWidget, String string)", "signatureAfterChange": "  void setToolTipText (long rootWidget, long tipWidget, String string)", "diff": ["-\tif (OS.GTK_VERSION >= OS.VERSION (2, 12, 0)) {", "-\t\tbyte [] buffer = null;", "-\t\tif (string != null && string.length () > 0) {", "-\t\t\tchar [] chars = fixMnemonic (string, false);", "-\t\t\tbuffer = Converter.wcsToMbcs (null, chars, true);", "-\t\t}", "-\t\tlong /*int*/ oldTooltip = OS.gtk_widget_get_tooltip_text (rootWidget);", "-\t\tboolean same = false;", "-\t\tif (buffer == null && oldTooltip == 0) {", "-\t\t\tsame = true;", "-\t\t} else if (buffer != null && oldTooltip != 0) {", "-\t\t\tsame = OS.strcmp (oldTooltip, buffer) == 0;", "-\t\t}", "-\t\tif (oldTooltip != 0) OS.g_free(oldTooltip);", "-\t\tif (same) return;", "-", "-\t\tlong /*int*/ eventPtr = 0;", "-\t\tif (OS.GTK_VERSION < OS.VERSION (2, 18, 0)) {", "-\t\t\tOS.gtk_widget_set_tooltip_text (rootWidget, null);", "-\t\t\t/*", "-\t\t\t * Bug in GTK. In GTK 2.12, due to a miscalculation of window", "-\t\t\t * coordinates, using gtk_tooltip_trigger_tooltip_query ()", "-\t\t\t * to update an existing a toboltip will result in the tooltip", "-\t\t\t * being displayed at a wrong position. The fix is to send out", "-\t\t\t * 2 fake GDK_MOTION_NOTIFY events (to mimic the GTK call) which", "-\t\t\t * contain the proper x and y coordinates.", "-\t\t\t */", "-\t\t\tlong /*int*/ tipWindow = gtk_widget_get_window (rootWidget);", "-\t\t\tif (tipWindow != 0) {", "-\t\t\t\tint [] x = new int [1], y = new int [1];", "-\t\t\t\tlong /*int*/ window = OS.gdk_window_at_pointer (x, y);", "-\t\t\t\tlong /*int*/ [] user_data = new long /*int*/ [1];", "-\t\t\t\tif (window != 0) OS.gdk_window_get_user_data (window, user_data);", "-\t\t\t\tif (tipWidget == user_data [0]) {", "-\t\t\t\t\teventPtr = OS.gdk_event_new (OS.GDK_MOTION_NOTIFY);", "-\t\t\t\t\tGdkEventMotion event = new GdkEventMotion ();", "-\t\t\t\t\tevent.type = OS.GDK_MOTION_NOTIFY;", "-\t\t\t\t\tevent.window = OS.g_object_ref (tipWindow);", "-\t\t\t\t\tevent.x = x [0];", "-\t\t\t\t\tevent.y = y [0];", "-\t\t\t\t\tOS.gdk_window_get_origin (window, x, y);", "-\t\t\t\t\tevent.x_root = event.x + x [0];", "-\t\t\t\t\tevent.y_root = event.y + y [0];", "-\t\t\t\t\tOS.memmove (eventPtr, event, GdkEventMotion.sizeof);", "-\t\t\t\t\tOS.gtk_main_do_event (eventPtr);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tOS.gtk_widget_set_tooltip_text (rootWidget, buffer);", "-\t\tif (eventPtr != 0) {", "-\t\t\tOS.gtk_main_do_event (eventPtr);", "-\t\t\tOS.gdk_event_free (eventPtr);", "-\t\t}", "-\t} else {", "-\t\tbyte [] buffer = null;", "-\t\tif (string != null && string.length () > 0) {", "-\t\t\tchar [] chars = fixMnemonic (string, false);", "-\t\t\tbuffer = Converter.wcsToMbcs (null, chars, true);", "-\t\t}", "-\t\tlong /*int*/ tipData = OS.gtk_tooltips_data_get(tipWidget);", "-\t\tif (tipData != 0) {", "-\t\t\tlong /*int*/ oldTooltip = OS.GTK_TOOLTIPS_GET_TIP_TEXT(tipData);", "-\t\t\tif (string == null && oldTooltip == 0) {", "-\t\t\t\treturn;", "-\t\t\t} else if (string != null && oldTooltip != 0) {", "-\t\t\t\tif (buffer != null) {", "-\t\t\t\t\tif (OS.strcmp (oldTooltip, buffer) == 0) return;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (tooltipsHandle == 0) {", "-\t\t\ttooltipsHandle = OS.gtk_tooltips_new ();", "-\t\t\tif (tooltipsHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\tOS.g_object_ref (tooltipsHandle);", "-\t\t\tOS.g_object_ref_sink (tooltipsHandle);", "-\t\t}", "-", "-\t\t/*", "-\t\t* Feature in GTK.  There is no API to position a tooltip.", "-\t\t* The fix is to connect to the size_allocate signal for", "-\t\t* the tooltip window and position it before it is mapped.", "-\t\t*", "-\t\t* Bug in Solaris-GTK.  Invoking gtk_tooltips_force_window()", "-\t\t* can cause a crash in older versions of GTK.  The fix is", "-\t\t* to avoid this call if the GTK version is older than 2.2.x.", "-\t\t* The call is to be avoided on GTK versions newer than 2.12.0", "-\t\t* where it's deprecated.", "-\t\t*/", "-\t\tOS.gtk_tooltips_force_window (tooltipsHandle);", "-\t\tlong /*int*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (tooltipsHandle);", "-\t\tif (tipWindow != 0 && tipWindow != tooltipWindow) {", "-\t\t\tOS.g_signal_connect (tipWindow, OS.size_allocate, display.sizeAllocateProc, shellHandle);", "-\t\t\ttooltipWindow = tipWindow;", "-\t\t}", "-", "-\t\t/*", "-\t\t* Bug in GTK.  If the cursor is inside the window when a new", "-\t\t* tooltip is set and the old tooltip is hidden, the new tooltip", "-\t\t* is not displayed until the mouse re-enters the window.  The", "-\t\t* fix is force the new tooltip to be active.", "-\t\t*/", "-\t\tboolean set = true;", "-\t\tif (tipWindow != 0) {", "-\t\t\tif (gtk_widget_get_visible (tipWidget) || gtk_widget_get_realized (tipWidget)) {", "-\t\t\t\tint [] x = new int [1], y = new int [1];", "-\t\t\t\tlong /*int*/ window = OS.gdk_window_at_pointer (x, y);", "-\t\t\t\tif (window != 0) {", "-\t\t\t\t\tlong /*int*/ [] user_data = new long /*int*/ [1];", "-\t\t\t\t\tOS.gdk_window_get_user_data (window, user_data);", "-\t\t\t\t\tif (tipWidget == user_data [0]) {", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* Feature in GTK.  Calling gtk_tooltips_set_tip() positions and", "-\t\t\t\t\t\t* shows the tooltip.  If the tooltip is already visible, moving", "-\t\t\t\t\t\t* it to a new location in the size_allocate signal causes flashing.", "-\t\t\t\t\t\t* The fix is to hide the tip window in the size_request signal", "-\t\t\t\t\t\t* and before the new tooltip is forced to be active.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tset = false;", "-\t\t\t\t\t\tint handler_id = OS.g_signal_connect (tipWindow, OS.size_request, display.sizeRequestProc, shellHandle);", "-\t\t\t\t\t\tOS.gtk_tooltips_set_tip (tooltipsHandle, tipWidget, buffer, null);", "-\t\t\t\t\t\tOS.gtk_widget_hide (tipWindow);", "-\t\t\t\t\t\tlong /*int*/ data = OS.gtk_tooltips_data_get (tipWidget);", "-\t\t\t\t\t\tOS.GTK_TOOLTIPS_SET_ACTIVE (tooltipsHandle, data);", "-\t\t\t\t\t\tOS.gtk_tooltips_set_tip (tooltipsHandle, tipWidget, buffer, null);", "-\t\t\t\t\t\tif (handler_id != 0) OS.g_signal_handler_disconnect (tipWindow, handler_id);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (set) OS.gtk_tooltips_set_tip (tooltipsHandle, tipWidget, buffer, null);", "+\tbyte [] buffer = null;", "+\tif (string != null && string.length () > 0) {", "+\t\tchar [] chars = fixMnemonic (string, false);", "+\t\tbuffer = Converter.wcsToMbcs (null, chars, true);", "+\tlong /*int*/ oldTooltip = OS.gtk_widget_get_tooltip_text (rootWidget);", "+\tboolean same = false;", "+\tif (buffer == null && oldTooltip == 0) {", "+\t\tsame = true;", "+\t} else if (buffer != null && oldTooltip != 0) {", "+\t\tsame = OS.strcmp (oldTooltip, buffer) == 0;", "+\t}", "+\tif (oldTooltip != 0) OS.g_free(oldTooltip);", "+\tif (same) return;", "+\tOS.gtk_widget_set_tooltip_text (rootWidget, buffer);"]}], "num": 3561}
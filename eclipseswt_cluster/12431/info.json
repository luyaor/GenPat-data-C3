{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4ef92755bcad00aa05480fdca20fc3bf", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a790000fa7758007920a7886c0a8aefa", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/carbon/org/eclipse/swt/printing/PrintDialog.java", "commitBeforeChange": "8f175c0902b6952b9ad454b26d734bc7107ccafe", "commitAfterChange": "389adb00dc3aaa9a8f5a87ca149390abf76b86aa", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public PrinterData open()", "signatureAfterChange": " public PrinterData open()", "diff": ["-\t\t\t\tOS.PMSessionPageSetupDialog(printSession, pageFormat, accepted);\t", "-\t\t\t\tif (accepted[0]) {\t\t", "-\t\t\t\t\tOS.PMSessionPrintDialog(printSession, printSettings, pageFormat, accepted);", "-\t\t\t\t\tif (accepted[0]) {", "-\t\t\t\t\t\tshort[] destType = new short[1];", "-\t\t\t\t\t\tOS.PMSessionGetDestinationType(printSession, printSettings, destType);", "-\t\t\t\t\t\tString name = Printer.getCurrentPrinterName(printSession);", "-\t\t\t\t\t\tString driver = Printer.DRIVER;", "-\t\t\t\t\t\tswitch (destType[0]) {", "-\t\t\t\t\t\t\tcase OS.kPMDestinationFax: driver = Printer.FAX_DRIVER; break;", "-\t\t\t\t\t\t\tcase OS.kPMDestinationFile: driver = Printer.FILE_DRIVER; break;", "-\t\t\t\t\t\t\tcase OS.kPMDestinationPreview: driver = Printer.PREVIEW_DRIVER; break;", "-\t\t\t\t\t\t\tcase OS.kPMDestinationPrinter: driver = Printer.PRINTER_DRIVER; break;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tPrinterData data = new PrinterData(driver, name);", "-\t\t\t\t\t\tif (destType[0] == OS.kPMDestinationFile) {", "-\t\t\t\t\t\t\tdata.printToFile = true;", "-\t\t\t\t\t\t\tOS.PMSessionCopyDestinationLocation(printSession, printSettings, buffer);", "-\t\t\t\t\t\t\tint fileName = OS.CFURLCopyFileSystemPath(buffer[0],OS.kCFURLPOSIXPathStyle);", "-\t\t\t\t\t\t\tOS.CFRelease(buffer[0]);", "-\t\t\t\t\t\t\tdata.fileName = Printer.getString(fileName);", "-\t\t\t\t\t\t\tOS.CFRelease(fileName);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tOS.PMGetCopies(printSettings, buffer);", "-\t\t\t\t\t\tdata.copyCount = buffer[0];\t\t\t\t\t\t", "-\t\t\t\t\t\tOS.PMGetFirstPage(printSettings, buffer);", "-\t\t\t\t\t\tdata.startPage = buffer[0];", "-\t\t\t\t\t\tOS.PMGetLastPage(printSettings, buffer);", "-\t\t\t\t\t\tdata.endPage = buffer[0];", "-\t\t\t\t\t\tOS.PMGetPageRange(printSettings, null, buffer);", "-\t\t\t\t\t\tif (data.startPage == 1 && data.endPage == OS.kPMPrintAllPages) {", "-\t\t\t\t\t\t\tdata.scope = PrinterData.ALL_PAGES;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean[] collate = new boolean[1];", "-\t\t\t\t\t\tOS.PMGetCollate(printSettings, collate);", "-\t\t\t\t\t\tdata.collate = collate[0];", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t/* Serialize settings */", "-\t\t\t\t\t\tint[] flatSettings = new int[1];", "-\t\t\t\t\t\tOS.PMFlattenPrintSettings(printSettings, flatSettings);", "-\t\t\t\t\t\tint[] flatFormat = new int[1];", "-\t\t\t\t\t\tOS.PMFlattenPageFormat(pageFormat, flatFormat);", "-\t\t\t\t\t\tint settingsLength = OS.GetHandleSize (flatSettings[0]);", "-\t\t\t\t\t\tint formatLength = OS.GetHandleSize (flatFormat[0]);", "-\t\t\t\t\t\tbyte[] otherData = data.otherData = new byte[settingsLength + formatLength + 8];", "-\t\t\t\t\t\tint offset = 0;", "-\t\t\t\t\t\toffset = Printer.packData(flatSettings[0], otherData, offset);", "-\t\t\t\t\t\toffset = Printer.packData(flatFormat[0], otherData, offset);", "-\t\t\t\t\t\tOS.DisposeHandle(flatSettings[0]);", "-\t\t\t\t\t\tOS.DisposeHandle(flatFormat[0]);", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tscope = data.scope;", "-\t\t\t\t\t\tstartPage = data.startPage;", "-\t\t\t\t\t\tendPage = data.endPage;", "-\t\t\t\t\t\tprintToFile = data.printToFile;", "-\t\t\t\t\t\treturn data;", "+\t\t\t\tif (OS.VERSION >= 0x1050) {", "+\t\t\t\t\tint printDialogOptions = OS.kPMShowDefaultInlineItems | OS.kPMShowPageAttributesPDE;", "+\t\t\t\t\tOS.PMShowPrintDialogWithOptions(printSession, printSettings, pageFormat, printDialogOptions, accepted);", "+\t\t\t\t} else {", "+\t\t\t\t\tOS.PMSessionPageSetupDialog(printSession, pageFormat, accepted);\t", "+\t\t\t\t\tif (accepted[0]) OS.PMSessionPrintDialog(printSession, printSettings, pageFormat, accepted);", "+\t\t\t\t}", "+\t\t\t\tif (accepted[0]) {", "+\t\t\t\t\tshort[] destType = new short[1];", "+\t\t\t\t\tOS.PMSessionGetDestinationType(printSession, printSettings, destType);", "+\t\t\t\t\tString name = Printer.getCurrentPrinterName(printSession);", "+\t\t\t\t\tString driver = Printer.DRIVER;", "+\t\t\t\t\tswitch (destType[0]) {", "+\t\t\t\t\t\tcase OS.kPMDestinationFax: driver = Printer.FAX_DRIVER; break;", "+\t\t\t\t\t\tcase OS.kPMDestinationFile: driver = Printer.FILE_DRIVER; break;", "+\t\t\t\t\t\tcase OS.kPMDestinationPreview: driver = Printer.PREVIEW_DRIVER; break;", "+\t\t\t\t\t\tcase OS.kPMDestinationPrinter: driver = Printer.PRINTER_DRIVER; break;", "+\t\t\t\t\tPrinterData data = new PrinterData(driver, name);", "+\t\t\t\t\tif (destType[0] == OS.kPMDestinationFile) {", "+\t\t\t\t\t\tdata.printToFile = true;", "+\t\t\t\t\t\tOS.PMSessionCopyDestinationLocation(printSession, printSettings, buffer);", "+\t\t\t\t\t\tint fileName = OS.CFURLCopyFileSystemPath(buffer[0],OS.kCFURLPOSIXPathStyle);", "+\t\t\t\t\t\tOS.CFRelease(buffer[0]);", "+\t\t\t\t\t\tdata.fileName = Printer.getString(fileName);", "+\t\t\t\t\t\tOS.CFRelease(fileName);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.PMGetCopies(printSettings, buffer);", "+\t\t\t\t\tdata.copyCount = buffer[0];\t\t\t\t\t\t", "+\t\t\t\t\tOS.PMGetFirstPage(printSettings, buffer);", "+\t\t\t\t\tdata.startPage = buffer[0];", "+\t\t\t\t\tOS.PMGetLastPage(printSettings, buffer);", "+\t\t\t\t\tdata.endPage = buffer[0];", "+\t\t\t\t\tOS.PMGetPageRange(printSettings, null, buffer);", "+\t\t\t\t\tif (data.startPage == 1 && data.endPage == OS.kPMPrintAllPages) {", "+\t\t\t\t\t\tdata.scope = PrinterData.ALL_PAGES;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "+\t\t\t\t\t}", "+\t\t\t\t\tboolean[] collate = new boolean[1];", "+\t\t\t\t\tOS.PMGetCollate(printSettings, collate);", "+\t\t\t\t\tdata.collate = collate[0];", "+\t\t\t\t\t", "+\t\t\t\t\t/* Serialize settings */", "+\t\t\t\t\tint[] flatSettings = new int[1];", "+\t\t\t\t\tOS.PMFlattenPrintSettings(printSettings, flatSettings);", "+\t\t\t\t\tint[] flatFormat = new int[1];", "+\t\t\t\t\tOS.PMFlattenPageFormat(pageFormat, flatFormat);", "+\t\t\t\t\tint settingsLength = OS.GetHandleSize (flatSettings[0]);", "+\t\t\t\t\tint formatLength = OS.GetHandleSize (flatFormat[0]);", "+\t\t\t\t\tbyte[] otherData = data.otherData = new byte[settingsLength + formatLength + 8];", "+\t\t\t\t\tint offset = 0;", "+\t\t\t\t\toffset = Printer.packData(flatSettings[0], otherData, offset);", "+\t\t\t\t\toffset = Printer.packData(flatFormat[0], otherData, offset);", "+\t\t\t\t\tOS.DisposeHandle(flatSettings[0]);", "+\t\t\t\t\tOS.DisposeHandle(flatFormat[0]);", "+\t\t\t\t\t", "+\t\t\t\t\tscope = data.scope;", "+\t\t\t\t\tstartPage = data.startPage;", "+\t\t\t\t\tendPage = data.endPage;", "+\t\t\t\t\tprintToFile = data.printToFile;", "+\t\t\t\t\treturn data;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1854110b78e807e85102f21641688ab8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 135, "methodNumberAfterChange": 137, "signatureBeforeChange": "  void setZOrder (int control, int otheControl, boolean above)", "signatureAfterChange": "  void setZOrder (int control, int otheControl, boolean above)", "diff": ["-\tint inOp = above ?  OS.kHIViewZOrderBelow :  OS.kHIViewZOrderAbove;", "-\tint oldRgn = 0;", "-\tboolean drawing = isDrawing (control);", "-\tif (drawing) oldRgn = getVisibleRegion (control, false);", "-\tOS.HIViewSetZOrder (control, inOp, otheControl);", "-\tinvalidateVisibleRegion (control);", "-\tif (drawing) {", "-\t\tint newRgn = getVisibleRegion (control, false);", "-\t\tif (above) {", "-\t\t\tOS.DiffRgn (newRgn, oldRgn, newRgn);", "-\t\t} else {", "-\t\t\tOS.DiffRgn (oldRgn, newRgn, newRgn);", "+\tif (OS.HIVIEW) {", "+\t\tint inOp = above ?  OS.kHIViewZOrderAbove :  OS.kHIViewZOrderBelow;", "+\t\tOS.HIViewSetZOrder (control, inOp, otheControl);", "+\t\tinvalidateVisibleRegion (control);", "+\t} else {", "+\t\tint inOp = above ?  OS.kHIViewZOrderBelow :  OS.kHIViewZOrderAbove;", "+\t\tint oldRgn = 0;", "+\t\tboolean drawing = isDrawing (control);", "+\t\tif (drawing) oldRgn = getVisibleRegion (control, false);", "+\t\tOS.HIViewSetZOrder (control, inOp, otheControl);", "+\t\tinvalidateVisibleRegion (control);", "+\t\tif (drawing) {", "+\t\t\tint newRgn = getVisibleRegion (control, false);", "+\t\t\tif (above) {", "+\t\t\t\tOS.DiffRgn (newRgn, oldRgn, newRgn);", "+\t\t\t} else {", "+\t\t\t\tOS.DiffRgn (oldRgn, newRgn, newRgn);", "+\t\t\t}", "+\t\t\tint window = OS.GetControlOwner (control);", "+\t\t\tinvalWindowRgn (window, newRgn);", "+\t\t\tOS.DisposeRgn (oldRgn);", "+\t\t\tOS.DisposeRgn (newRgn);", "-\t\tint window = OS.GetControlOwner (control);", "-\t\tinvalWindowRgn (window, newRgn);", "-\t\tOS.DisposeRgn (oldRgn);", "-\t\tOS.DisposeRgn (newRgn);"]}], "num": 12431}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0772f26089722d462943dca2668b3d0c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2271b64f38721d01f273722d2393b59a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "2d2908aafbcfc259e4cd16140b2915756521d48e", "commitAfterChange": "cc9ff1eaaea7372d6cef2dbd2a12ff220660892f", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": "\r public void setBounds (int x, int y, int width, int height)", "signatureAfterChange": "\r boolean setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "diff": ["+boolean setBounds (int x, int y, int width, int height, boolean move, boolean resize) {\r", "+\tint topHandle = topHandle ();\r", "+\tif (move && resize) {\r", "+\t\tint [] argList = {\r", "+\t\t\tOS.XmNx, 0, \t\t\t/* 1 */\r", "+\t\t\tOS.XmNy, 0, \t\t\t/* 3 */\r", "+\t\t\tOS.XmNwidth, 0, \t\t/* 5 */\r", "+\t\t\tOS.XmNheight, 0, \t\t/* 7 */\r", "+\t\t\tOS.XmNborderWidth, 0, \t/* 9 */\r", "+\t\t};\r", "+\t\tOS.XtGetValues (topHandle, argList, argList.length / 2);\r", "+\t\t/*\r", "+\t\t* Feature in Motif.  Motif will not allow a window\r", "+\t\t* to have a zero width or zero height.  The fix is\r", "+\t\t* to ensure these values are never zero.\r", "+\t\t*/\r", "+\t\twidth = Math.max (width - (argList [9] * 2), 1);\r", "+\t\theight = Math.max (height - (argList [9] * 2), 1);\r", "+\t\tboolean sameOrigin = (x == (short) argList [1]) && (y == (short) argList [3]);\r", "+\t\tboolean sameExtent = (width == argList [5]) && (height == argList [7]);\r", "+\t\tif (sameOrigin && sameExtent) return false;\r", "+\t\tOS.XtConfigureWidget (topHandle, x, y, width, height, argList [9]);\r", "+\t\tif (!sameOrigin) sendEvent (SWT.Move);\r", "+\t\tif (!sameExtent) sendEvent (SWT.Resize);\r", "+\t\treturn true;\r", "+\t}\r", "+\tif (move) {\r", "+\t\tint [] argList = {OS.XmNx, 0, OS.XmNy, 0};\r", "+\t\tOS.XtGetValues (topHandle, argList, argList.length / 2);\r", "+\t\tif (x == (short) argList [1] && y == (short) argList [3]) return false;\r", "+\t\tOS.XtMoveWidget (topHandle, x, y);\r", "+\t\tsendEvent (SWT.Move);\r", "+\t\treturn true;\r", "+\t}\r", "+\tif (resize) {\r", "+\t\tint [] argList = {OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "+\t\tOS.XtGetValues (topHandle, argList, argList.length / 2);\r", "+\t\t/*\r", "+\t\t* Feature in Motif.  Motif will not allow a window\r", "+\t\t* to have a zero width or zero height.  The fix is\r", "+\t\t* to ensure these values are never zero.\r", "+\t\t*/\r", "+\t\twidth = Math.max (width - (argList [5] * 2), 1);\r", "+\t\theight = Math.max (height - (argList [5] * 2), 1);\r", "+\t\tif (width == argList [1] && height == argList [3]) return false;\r", "+\t\tOS.XtResizeWidget (topHandle, width, height, argList [5]);\r", "+\t\tsendEvent (SWT.Resize);\r", "+\t\treturn true;\r", "+\t}\r", "+\treturn false;\r", "+}\r", "-\t/*\r", "-\t* Feature in Motif.  Motif will not allow a window\r", "-\t* to have a zero width or zero height.  The fix is\r", "-\t* to ensure these values are never zero.\r", "-\t*/\r", "-\tint topHandle = topHandle ();\r", "-\tint [] argList = {\r", "-\t\tOS.XmNx, 0, \t\t\t/* 1 */\r", "-\t\tOS.XmNy, 0, \t\t\t/* 3 */\r", "-\t\tOS.XmNwidth, 0, \t\t/* 5 */\r", "-\t\tOS.XmNheight, 0, \t\t/* 7 */\r", "-\t\tOS.XmNborderWidth, 0, \t/* 9 */\r", "-\t};\r", "-\tOS.XtGetValues (topHandle, argList, argList.length / 2);\r", "-\tint newWidth = Math.max (width - (argList [9] * 2), 1);\r", "-\tint newHeight = Math.max (height - (argList [9] * 2), 1);\r", "-\tboolean sameOrigin = (x == (short) argList [1]) && (y == (short) argList [3]);\r", "-\tboolean sameExtent = (newWidth == argList [5]) && (newHeight == argList [7]);\r", "-\tif (sameOrigin && sameExtent) return;\r", "-\tOS.XtConfigureWidget (topHandle, x, y, newWidth, newHeight, argList [9]);\r", "-\tif (!sameOrigin) sendEvent (SWT.Move);\r", "-\tif (!sameExtent) sendEvent (SWT.Resize);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caecabdddde09502ff13b251ca1f51c8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "abcda6211c0bcc3a908332242b9d1409108c82ba", "commitAfterChange": "04de3fc7ae68f9215fb3d4fcc47ca5754e572bac", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "  int processMouseDown (int callData, int arg1, int int2)", "signatureAfterChange": "  int processMouseDown (int callData, int int1, int int2)", "diff": ["+", "+int processMouseDown (int callData, int int1, int int2) {", "+\tsuper.processMouseDown (callData, int1, int2);", "+\tint button = OS.gdk_event_button_get_button (callData);", "+\tif (button != 1) return 0;", "+\tdouble[] px = new double [1], py = new double [1];", "+\tOS.gdk_event_get_coords (callData, px, py);", "+\tstartX = (int)px [0];  startY = (int) py [0];", "+\tint border = 0;", "+\tint x = OS.GTK_WIDGET_X (handle);", "+\tint y = OS.GTK_WIDGET_Y (handle);", "+\tint width = OS.GTK_WIDGET_WIDTH (handle);", "+\tint height = OS.GTK_WIDGET_HEIGHT (handle);", "+\tlastX = x - border;  lastY = y - border;", "+\t/* The event must be sent because its doit flag is used. */", "+\tEvent event = new Event ();", "+\tevent.detail = SWT.DRAG;", "+\tevent.time = OS.gdk_event_get_time (callData);", "+\tevent.x = lastX;  event.y = lastY;", "+\tevent.width = width;  event.height = height;", "+\t/*", "+\t * It is possible (but unlikely) that client code could have disposed", "+\t * the widget in the selection event.  If this happens end the processing", "+\t * of this message by returning.", "+\t */", "+\tsendEvent (SWT.Selection, event);", "+\tif (isDisposed ()) return 0;", "+\tif (event.doit) {", "+\t\tdragging = true;", "+//\t\tOS.XmUpdateDisplay (handle);", "+\t\tdrawBand (lastX = event.x, lastY = event.y, width, height);", "+\t}", "+\treturn 0;\t", "+}", "-", "-int processMouseDown (int callData, int arg1, int int2) {", "-\tsuper.processMouseDown (callData,arg1,int2);", "-\tif (OS.gdk_event_button_get_button(callData) != 1) return 0;", "-\t", "-\toriginX = OS.GTK_WIDGET_X(handle);", "-\toriginY = OS.GTK_WIDGET_Y(handle);", "-\tlastX = 0;", "-\tlastY = 0;", "-\t", "-\t/* The event must be sent because its doit flag is used. */", "-\tEvent event = new Event ();", "-\tevent.detail = SWT.DRAG;", "-\tevent.time = OS.gdk_event_get_time(callData);", "-\tevent.x = originX;", "-\tevent.y = originY;", "-\tevent.width = OS.GTK_WIDGET_WIDTH (handle);", "-\tevent.height = OS.GTK_WIDGET_HEIGHT (handle);", "-\t/*", "-\t * It is possible (but unlikely) that client code could have disposed", "-\t * the widget in the selection event.  If this happens end the processing", "-\t * of this message by returning.", "-\t */", "-\tsendEvent (SWT.Selection, event);", "-\tif (isDisposed ()) return 0;", "-\tif (event.doit) {", "-\t\tdragging = true;", "-\t\tdrawBand (originX, originY, event.width, event.height);", "-\t}", "-\treturn 0;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af89860596aa9f89ed6d6bc80e5eb07b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 143, "signatureBeforeChange": "\r int processMouseDown (int callData)", "signatureAfterChange": "\r int XButtonPress (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processMouseDown (int callData) {\r", "-\tDisplay display = getDisplay ();\r", "-\tShell shell = getShell ();\r", "-\tdisplay.hideToolTip ();\r", "-\tXButtonEvent xEvent = new XButtonEvent ();\r", "-\tOS.memmove (xEvent, callData, XButtonEvent.sizeof);\r", "-\tsendMouseEvent (SWT.MouseDown, xEvent.button, xEvent);\r", "-\tif (xEvent.button == 2 && hooks (SWT.DragDetect)) {\r", "-\t\tpostEvent (SWT.DragDetect);\r", "-\t}\r", "-\tif (xEvent.button == 3 && menu != null) {\r", "-\t\tsetFocus ();\r", "-//\t\tmenu.setLocation (xEvent.x_root, xEvent.y_root);\r", "-\t\tmenu.setVisible (true);\r", "-\t}\r", "-\tint clickTime = display.getDoubleClickTime ();\r", "-\tint lastTime = display.lastTime, eventTime = xEvent.time;\r", "-\tint lastButton = display.lastButton, eventButton = xEvent.button;\r", "-\tif (lastButton == eventButton && lastTime != 0 && Math.abs (lastTime - eventTime) <= clickTime) {\r", "-\t\tsendMouseEvent (SWT.MouseDoubleClick, eventButton, xEvent);\r", "-\t}\r", "-\tdisplay.lastTime = eventTime == 0 ? 1 : eventTime;\r", "-\tdisplay.lastButton = eventButton;\r", "-\t\r", "-\t/*\r", "-\t* It is possible that the shell may be\r", "-\t* disposed at this point.  If this happens\r", "-\t* don't send the activate and deactivate\r", "-\t* events.\r", "-\t*/\t\r", "-\tif (!shell.isDisposed ()) {\r", "-\t\tshell.setActiveControl (this);\r", "-\t}\r", "-\treturn 0;\r", "-}\r", "+int XButtonPress (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tDisplay display = getDisplay ();\r", "+\tShell shell = getShell ();\r", "+\tdisplay.hideToolTip ();\r", "+\tXButtonEvent xEvent = new XButtonEvent ();\r", "+\tOS.memmove (xEvent, call_data, XButtonEvent.sizeof);\r", "+\tsendMouseEvent (SWT.MouseDown, xEvent.button, xEvent);\r", "+\tif (xEvent.button == 2 && hooks (SWT.DragDetect)) {\r", "+\t\tpostEvent (SWT.DragDetect);\r", "+\t}\r", "+\tif (xEvent.button == 3 && menu != null) {\r", "+\t\tsetFocus ();\r", "+//\t\tmenu.setLocation (xEvent.x_root, xEvent.y_root);\r", "+\t\tmenu.setVisible (true);\r", "+\t}\r", "+\tint clickTime = display.getDoubleClickTime ();\r", "+\tint lastTime = display.lastTime, eventTime = xEvent.time;\r", "+\tint lastButton = display.lastButton, eventButton = xEvent.button;\r", "+\tif (lastButton == eventButton && lastTime != 0 && Math.abs (lastTime - eventTime) <= clickTime) {\r", "+\t\tsendMouseEvent (SWT.MouseDoubleClick, eventButton, xEvent);\r", "+\t}\r", "+\tdisplay.lastTime = eventTime == 0 ? 1 : eventTime;\r", "+\tdisplay.lastButton = eventButton;\r", "+\t\r", "+\t/*\r", "+\t* It is possible that the shell may be\r", "+\t* disposed at this point.  If this happens\r", "+\t* don't send the activate and deactivate\r", "+\t* events.\r", "+\t*/\t\r", "+\tif (!shell.isDisposed ()) {\r", "+\t\tshell.setActiveControl (this);\r", "+\t}\r", "+\treturn 0;\r", "+}\r"]}], "num": 61656}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0943a1603b069f36e0aa16d3fb74937", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9adc064808624b848bf5598946468d88", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "19051ffe4fd662e4376e9ef3523424e6764f8cc9", "commitAfterChange": "fec0d691465789ed5f8cc6a20256c17056f52d4b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\tMonitor monitor = getMonitor ();", "-\tRectangle rect = monitor.getClientArea ();", "-\tint width = rect.width * 5 / 8;", "-\tint height = rect.height * 5 / 8;", "-\tRect bounds = new Rect ();", "-\tOS.SetRect (bounds, (short) 0, (short) 0, (short) width, (short) height);", "-\tint [] outWindow = new int [1];", "-\tattributes &= OS.GetAvailableWindowAttributes (windowClass);", "-\tOS.CreateNewWindow (windowClass, attributes, bounds, outWindow);", "-\tif (outWindow [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\tshellHandle = outWindow [0];", "-\tOS.RepositionWindow (shellHandle, 0, OS.kWindowCascadeOnMainScreen);", "-//\tOS.SetThemeWindowBackground (shellHandle, (short) OS.kThemeBrushDialogBackgroundActive, false);", "-\tint [] theRoot = new int [1];", "-\tif (OS.HIVIEW) {", "+\tif (shellHandle == 0) {", "+\t\tMonitor monitor = getMonitor ();", "+\t\tRectangle rect = monitor.getClientArea ();", "+\t\tint width = rect.width * 5 / 8;", "+\t\tint height = rect.height * 5 / 8;", "+\t\tRect bounds = new Rect ();", "+\t\tOS.SetRect (bounds, (short) 0, (short) 0, (short) width, (short) height);", "+\t\tint [] outWindow = new int [1];", "+\t\tattributes &= OS.GetAvailableWindowAttributes (windowClass);", "+\t\tOS.CreateNewWindow (windowClass, attributes, bounds, outWindow);", "+\t\tif (outWindow [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tshellHandle = outWindow [0];", "+\t\tOS.RepositionWindow (shellHandle, 0, OS.kWindowCascadeOnMainScreen);", "+//\t\tOS.SetThemeWindowBackground (shellHandle, (short) OS.kThemeBrushDialogBackgroundActive, false);", "+\t\tint [] theRoot = new int [1];", "+\t\tif (OS.HIVIEW) {", "+\t\t\tOS.HIViewFindByID (shellHandle, OS.kHIViewWindowContentID (), theRoot);", "+\t\t\t/*", "+\t\t\t* Bug in the Macintosh.  When the window class is kMovableModalWindowClass or", "+\t\t\t* kModalWindowClass, HIViewFindByID() fails to find the control identified by", "+\t\t\t* kHIViewWindowContentID.  The fix is to call GetRootControl() if the call", "+\t\t\t* failed.", "+\t\t\t*/", "+\t\t\tif (theRoot [0] == 0) OS.GetRootControl (shellHandle, theRoot);\t\t", "+\t\t} else {", "+\t\t\tOS.CreateRootControl (shellHandle, theRoot);", "+\t\t\tOS.GetRootControl (shellHandle, theRoot);", "+\t\t}", "+\t\tif (theRoot [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) != 0) {", "+\t\t\tcreateScrolledHandle (theRoot [0]);", "+\t\t} else {", "+\t\t\tcreateHandle (theRoot [0]);", "+\t\t}", "+\t\tOS.SetControlVisibility (topHandle (), false, false);", "+\t} else {", "+\t\tint [] theRoot = new int [1];", "-\t\t/*", "-\t\t* Bug in the Macintosh.  When the window class is kMovableModalWindowClass or", "-\t\t* kModalWindowClass, HIViewFindByID() fails to find the control identified by", "-\t\t* kHIViewWindowContentID.  The fix is to call GetRootControl() if the call", "-\t\t* failed.", "-\t\t*/", "-\t\tif (theRoot [0] == 0) OS.GetRootControl (shellHandle, theRoot);\t\t", "-\t} else {", "-\t\tOS.CreateRootControl (shellHandle, theRoot);", "-\t\tOS.GetRootControl (shellHandle, theRoot);", "+\t\tif (theRoot [0] == 0) OS.GetRootControl (shellHandle, theRoot);", "+\t\thandle = OS.HIViewGetFirstSubview (theRoot [0]);", "+\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tif (OS.IsWindowVisible (shellHandle)) state &= ~HIDDEN;", "-\tif (theRoot [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) != 0) {", "-\t\tcreateScrolledHandle (theRoot [0]);", "-\t} else {", "-\t\tcreateHandle (theRoot [0]);", "-\t}", "-\tOS.SetControlVisibility (topHandle (), false, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "846f7bf0da3142ba8a9282ffb902d4db", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "25e0b9cefcf6aad913e775e22fb19b1e3de2a216", "commitAfterChange": "abdb7df6c5ef7f31dd770f626e22ad0d039e1629", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\tMonitor monitor = getMonitor ();", "-\tRectangle rect = monitor.getClientArea ();", "-\tint width = rect.width * 5 / 8;", "-\tint height = rect.height * 5 / 8;", "-\tRect bounds = new Rect ();", "-\tOS.SetRect (bounds, (short) 0, (short) 0, (short) width, (short) height);", "-\tint [] outWindow = new int [1];", "-\tattributes &= OS.GetAvailableWindowAttributes (windowClass);", "-\tOS.CreateNewWindow (windowClass, attributes, bounds, outWindow);", "-\tif (outWindow [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\tshellHandle = outWindow [0];", "-\tOS.RepositionWindow (shellHandle, 0, OS.kWindowCascadeOnMainScreen);", "-//\tOS.SetThemeWindowBackground (shellHandle, (short) OS.kThemeBrushDialogBackgroundActive, false);", "-\tint [] theRoot = new int [1];", "-\tif (OS.HIVIEW) {", "+\tif (shellHandle == 0) {", "+\t\tMonitor monitor = getMonitor ();", "+\t\tRectangle rect = monitor.getClientArea ();", "+\t\tint width = rect.width * 5 / 8;", "+\t\tint height = rect.height * 5 / 8;", "+\t\tRect bounds = new Rect ();", "+\t\tOS.SetRect (bounds, (short) 0, (short) 0, (short) width, (short) height);", "+\t\tint [] outWindow = new int [1];", "+\t\tattributes &= OS.GetAvailableWindowAttributes (windowClass);", "+\t\tOS.CreateNewWindow (windowClass, attributes, bounds, outWindow);", "+\t\tif (outWindow [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tshellHandle = outWindow [0];", "+\t\tOS.RepositionWindow (shellHandle, 0, OS.kWindowCascadeOnMainScreen);", "+\t//\tOS.SetThemeWindowBackground (shellHandle, (short) OS.kThemeBrushDialogBackgroundActive, false);", "+\t\tint [] theRoot = new int [1];", "+\t\tif (OS.HIVIEW) {", "+\t\t\tOS.HIViewFindByID (shellHandle, OS.kHIViewWindowContentID (), theRoot);", "+\t\t\t/*", "+\t\t\t* Bug in the Macintosh.  When the window class is kMovableModalWindowClass or", "+\t\t\t* kModalWindowClass, HIViewFindByID() fails to find the control identified by", "+\t\t\t* kHIViewWindowContentID.  The fix is to call GetRootControl() if the call", "+\t\t\t* failed.", "+\t\t\t*/", "+\t\t\tif (theRoot [0] == 0) OS.GetRootControl (shellHandle, theRoot);\t\t", "+\t\t} else {", "+\t\t\tOS.CreateRootControl (shellHandle, theRoot);", "+\t\t\tOS.GetRootControl (shellHandle, theRoot);", "+\t\t}", "+\t\tif (theRoot [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) != 0) {", "+\t\t\tcreateScrolledHandle (theRoot [0]);", "+\t\t} else {", "+\t\t\tcreateHandle (theRoot [0]);", "+\t\t}", "+\t\tOS.SetControlVisibility (topHandle (), false, false);", "+\t} else {", "+\t\tint [] theRoot = new int [1];", "-\t\t/*", "-\t\t* Bug in the Macintosh.  When the window class is kMovableModalWindowClass or", "-\t\t* kModalWindowClass, HIViewFindByID() fails to find the control identified by", "-\t\t* kHIViewWindowContentID.  The fix is to call GetRootControl() if the call", "-\t\t* failed.", "-\t\t*/", "-\t\tif (theRoot [0] == 0) OS.GetRootControl (shellHandle, theRoot);\t\t", "-\t} else {", "-\t\tOS.CreateRootControl (shellHandle, theRoot);", "-\t\tOS.GetRootControl (shellHandle, theRoot);", "+\t\tif (theRoot [0] == 0) OS.GetRootControl (shellHandle, theRoot);", "+\t\thandle = OS.HIViewGetFirstSubview (theRoot[0]);", "+\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tif (OS.IsWindowVisible (shellHandle)) state &= ~HIDDEN;", "-\tif (theRoot [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) != 0) {", "-\t\tcreateScrolledHandle (theRoot [0]);", "-\t} else {", "-\t\tcreateHandle (theRoot [0]);", "-\t}", "-\tOS.SetControlVisibility (topHandle (), false, false);"]}], "num": 16543}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65a32116e7baa8016923acf89220da2b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c0e8212ee01a3e0f6ca02483a735c76", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_List.java", "commitBeforeChange": "9390f9712c76d9eb51a4dc4b4510af71d8d45c8c", "commitAfterChange": "b0b8de1fdd2055cd1dd1a9960de5b25be22b9089", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  public void test_setSelection$I()", "signatureAfterChange": "  public void test_setSelection$I()", "diff": ["-\tint number = 5;", "+\tint number = 8;", "-\tint[] ind = { 1 };", "-\tlist.setSelection(ind);", "-\tassertEquals(list.getSelectionIndices(), new int[] { 1 });", "-", "-\tString[][] cases = { { \"\" }, {", "-\t\t\t\"\", \"\" }, {", "-\t\t\t\"text1\", \"text2\" }", "-\t};", "-\tint[] items = { 0 };", "-\tfor (int i = 0; i < cases.length; i++) {", "-\t\tlist.setItems(cases[i]);", "-\t\tlist.setSelection(items);", "-\t\tassertEquals(", "-\t\t\t\"case: \" + String.valueOf(i),", "-\t\t\tlist.getSelection(), new String[] { cases[i][0] });", "-\t}", "-", "-\tString[] items2 = { \"item0\", \"item1\", \"item2\", \"item3\" };", "-\tlist.setItems(items2);", "-", "-\tlist.setSelection(new int[] { 0, 2 });", "-\tassertSame(\"{0, 2}\", list.getSelectionIndices(), new int[] { 0, 2 });", "-", "-\tlist.setSelection(new int[] { 1, 3 });", "-\tassertSame(\"{1, 3}\", list.getSelectionIndices(), new int[] { 1, 3 });", "-", "-\tlist.setSelection(new int[] { 0, 1, 2, 3 });", "-\tassertSame(", "-\t\t\"{0, 1, 2, 3}\",", "-\t\tlist.getSelectionIndices(), new int[] { 0, 1, 2, 3 });", "-", "-\tlist.setSelection(new int[] { 1 });", "-\tassertEquals(\"{1}\", list.getSelectionIndices(), new int[] { 1 });", "-", "-\tind = new int[] { -1, 0, 1, 2, 3 };", "-\tlist.setSelection(ind);", "-\tassertSame(", "-\t\t\"setSelection(\" + ind + \"):\",", "-\t\tlist.getSelectionIndices(), new int[] { 0, 1, 2, 3 });", "-", "-\t", "-\tsetSingleList();", "-\tfor (int i = 0; i < number; i++)", "-\t\tlist.add(\"fred\" + i);", "-", "-\tind = new int[]{ -1, 0, 1, 2, 3 };", "-\tlist.setSelection(ind);", "-\tassertEquals(list.getSelectionIndices(), new int[] { 0 });", "-", "-\t", "-\tind = new int[32];", "-\tfor (int i = 0; i < ind.length; i++)", "-\t\tind[i] = i;", "-", "-\tlist.setSelection(ind);", "-\tassertEquals(list.getSelectionIndices(), new int[] { 0 });", "-", "-\t", "-\tind = new int[]{ 1 };", "-\tlist.setSelection(ind);", "-\tassertEquals(list.getSelectionIndices(), new int[] { 1 });", "-", "-\t", "-\tlist.deselectAll();", "-\tassertEquals(0, list.getSelectionCount());", "-\t", "-\tind = new int[]{ -1 };", "-\tlist.setSelection(ind);", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "-", "-\t", "-\tlist.setSelection(new int[] { 0, 2 });", "-\tassertEquals(list.getSelectionIndices(), new int[] { 0 });", "-", "-\tlist.setSelection(new int[] { 1, 3 });", "-\tassertEquals(list.getSelectionIndices(), new int[] { 1 });", "-", "-\tlist.setSelection(new int[] { 0, 1, 2, 3 });", "-\tassertEquals(list.getSelectionIndices(), new int[] { 0 });", "-", "-\tlist.setSelection(new int[] { 1 });", "-\tassertEquals(list.getSelectionIndices(), new int[] { 1 });", "+\tlist.setSelection(new int [0]);", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), 0);", "+\t}", "+\t", "+\tlist.setSelection(new int [] {2});", "+\tassertEquals(list.getSelectionIndices(), new int[] {2});", "+\tassertEquals(list.getFocusIndex(), 2);", "+", "+\tlist.setSelection(new int [] {number});", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), 2);", "+\t", "+\tlist.setSelection(new int [] {1, 0});", "+\tassertEquals(list.getSelectionIndices(), new int[] {0, 1});", "+\tassertEquals(list.getFocusIndex(), 1);", "+", "+\tlist.setSelection(new int [] {-1, number});", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), 1);", "+\t", "+\tlist.setSelection(new int [] {number - 1, number});", "+\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertEquals(list.getFocusIndex(), number - 1);", "+", "+\tlist.setSelection(new int [] {-1, 0});", "+\tassertEquals(list.getSelectionIndices(), new int[] {0});", "+\tassertEquals(list.getFocusIndex(), number - 1);", "+\t", "+\tint[] indices = new int [number];", "+\tfor (int i = 0; i < number; i++) {", "+\t\tindices[i] = i;", "+\t}", "+\tlist.setSelection(indices);", "+\tassertEquals(list.getSelectionIndices(), indices);", "+\tassertEquals(list.getFocusIndex(), indices[0]);", "+\t", "+\tlist.setSelection(new int [] {number, number});", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), 0);", "+\t", "+\tlist.setSelection(new int [] {number - 1, number - 1});", "+\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertEquals(list.getFocusIndex(), number - 1);", "+\t", "+\tlist.setSelection(new int [] {0, number, 1});", "+\tassertEquals(list.getSelectionIndices(), new int[] {0, 1});", "+\tassertEquals(list.getFocusIndex(), 0);", "+\t", "+\tlist.setSelection(new int [] {number - 1, 0, number - 2});", "+\tassertEquals(list.getSelectionIndices(), new int[] {0, number - 2, number - 1});", "+\tassertEquals(list.getFocusIndex(), number - 1);", "+\t", "+\tif (fCheckSWTPolicy) {", "+\t\tlist.removeAll();", "+\t\t", "+\t\tlist.setSelection(new int [0]);", "+\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+", "+\t\ttry {", "+\t\t\tlist.setSelection((int[]) null);", "+\t\t\tfail(\"No exception thrown\");", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t}", "+\t\t", "+\t\tlist.setSelection(new int [] {0});", "+\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+", "+\t\tlist.setSelection(new int [] {-1});", "+\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+", "+\t\tlist.setSelection(new int [] {0, 0});", "+\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+\t\t", "+\t\tlist.setSelection(new int [] {-1, 0});", "+\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+\t\t", "+\t\tlist.setSelection(new int [] {0, -1});", "+\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+\t}", "+\t", "+\tsetSingleList();", "+\tfor (int i = 0; i < number; i++)", "+\t\tlist.add(\"fred\" + i);", "+", "+\tlist.setSelection(new int [0]);", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), 0);", "+", "+\ttry {", "+\t\tlist.setSelection((int[]) null);", "+\t\tfail(\"No exception thrown\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+\t", "+\tlist.setSelection(new int [] {2});", "+\tassertEquals(list.getSelectionIndices(), new int[] {2});", "+\tassertEquals(list.getFocusIndex(), 2);", "+", "+\tlist.setSelection(new int [] {number});", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), 2);", "+\t", "+\tlist.setSelection(new int [] {1, 0});", "+\tassertEquals(list.getSelectionIndices(), new int[] {1});", "+\tassertEquals(list.getFocusIndex(), 1);", "+", "+\tlist.setSelection(new int [] {-1, number});", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), 1);", "+\t", "+\tlist.setSelection(new int [] {number - 1, number});", "+\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertEquals(list.getFocusIndex(), number - 1);", "+", "+\tlist.setSelection(new int [] {-1, 0});", "+\tassertEquals(list.getSelectionIndices(), new int[] {0});", "+\tassertEquals(list.getFocusIndex(), 0);", "+\t", "+\tindices = new int [number];", "+\tfor (int i = 0; i < number; i++) {", "+\t\tindices[i] = i;", "+\t}", "+\tlist.setSelection(indices);", "+\tassertEquals(list.getSelectionIndices(), new int[] {indices[0]});", "+\tassertEquals(list.getFocusIndex(), indices[0]);", "+\t", "+\tlist.setSelection(new int [] {number, number});", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), 0);", "+\t", "+\tlist.setSelection(new int [] {number - 1, number - 1});", "+\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertEquals(list.getFocusIndex(), number - 1);", "+\t", "+\tlist.setSelection(new int [] {0, number, 1});", "+\tassertEquals(list.getSelectionIndices(), new int[] {0});", "+\tassertEquals(list.getFocusIndex(), 0);", "+\t", "+\tlist.setSelection(new int [] {number - 1, 0, number - 2});", "+\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertEquals(list.getFocusIndex(), number - 1);", "+\t", "+\tif (fCheckSWTPolicy) {", "+\t\tlist.removeAll();", "+\t\t", "+\t\tlist.setSelection(new int [0]);", "+\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+", "+\t\ttry {", "+\t\t\tlist.setSelection((int[]) null);", "+\t\t\tfail(\"No exception thrown\");", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t}", "+\t\t", "+\t\tlist.setSelection(new int [] {0});", "+\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+", "+\t\tlist.setSelection(new int [] {-1});", "+\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+", "+\t\tlist.setSelection(new int [] {0, 0});", "+\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+\t\t", "+\t\tlist.setSelection(new int [] {-1, 0});", "+\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+\t\t", "+\t\tlist.setSelection(new int [] {0, -1});", "+\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0fa919a248dea80d0b6e4c56d4e9ca58", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_List.java", "commitBeforeChange": "77f06688bfac39a45b447aab335a7b06b05d1b28", "commitAfterChange": "1d07db3b5a2325ee7331dbc2a2920f9a13277045", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  public void test_setSelection$Ljava_lang_String()", "signatureAfterChange": "  public void test_setSelection$Ljava_lang_String()", "diff": ["-\tString[] items = { \"item0\", \"item1\", \"item2\", \"item3\" };", "-\tlist.setItems(items);", "+\tint number = 8;", "+\tfor (int i = 0; i < number; i++)", "+\t\tlist.add(\"fred \" + i);", "-\tlist.setSelection(new String[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "-", "-\tlist.setSelection(new String[] { \"\" });", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "-", "-\tlist.setSelection(new String[] { \"item2\" });", "-\tassertEquals(list.getSelectionIndices(), new int[] { 2 });", "-", "-\tlist.setSelection(new String[] { \"item2\", \"item1\" });", "-\tassertSame(list.getSelectionIndices(), new int[] { 1, 2 });", "-", "-\tlist.setSelection(new String[] { \"item5\", \"item1\" });", "-\tassertEquals(list.getSelectionIndices(), new int[] { 1 });", "-", "-\tlist.setSelection(new String[] { \"item1\", \"item1\" });", "-\tassertEquals(list.getSelectionIndices(), new int[] { 1 });", "-", "-\tlist.setItems(items);", "-\ttry {", "-\t\tlist.setSelection((int[]) null);", "-\t\tfail(\"No exception thrown for selection == null\");", "-\t} catch (IllegalArgumentException e) {", "+\tlist.setSelection(new String [0]);", "+\tassertEquals(list.getSelection(), new String[0]);", "+\tif (fCheckSWTPolicy) {", "+\t\tassertEquals(list.getFocusIndex(), -1);", "-\t", "-\tsetSingleList();", "-\tlist.setItems(items);", "-", "-\tlist.setSelection(new String[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "-", "-\tlist.setSelection(new String[] { \"\" });", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "-", "-\tlist.setSelection(new String[] { \"item2\" });", "-\tassertEquals(1, list.getSelectionCount());", "-\tassertEquals(list.getSelectionIndices(), new int[] { 2 });", "-", "-\tlist.setSelection(new String[] { \"item2\", \"item1\" });", "-\tassertEquals(list.getSelectionIndices(), new int[] { 1 });", "-", "-\tlist.setSelection(new String[] { \"item5\", \"item1\" });", "-\tassertEquals(list.getSelectionIndices(), new int[] { 1 });", "-", "-\tlist.setSelection(new String[] { \"item1\", \"item1\" });", "-\tassertEquals(list.getSelectionIndices(), new int[] { 1 });", "-", "-\t", "-\t\tfail(\"No exception thrown for selection == null\");", "+\t\tfail(\"No exception thrown\");", "+\t", "+\tlist.setSelection(new String [] {\"fred 2\"});", "+\tassertEquals(list.getSelection(), new String [] {\"fred 2\"});", "+\tassertEquals(list.getFocusIndex(), 2);", "+", "+\tlist.setSelection(new String [] {\"fred \" + number});", "+\tassertEquals(list.getSelection(), new String [0]);", "+\tassertEquals(list.getFocusIndex(), 2);", "+\t", "+\tlist.setSelection(new String [] {\"fred 1\", \"fred 0\"});", "+\tassertEquals(list.getSelection(), new String [] {\"fred 0\", \"fred 1\"});", "+\tassertEquals(list.getFocusIndex(), 1);", "+", "+\tlist.setSelection(new String [] {\"fred -1\", \"fred \" + number});", "+\tassertEquals(list.getSelection(), new String [0]);", "+\tassertEquals(list.getFocusIndex(), 1);", "+\t", "+\tlist.setSelection(new String [] {\"fred \" + (number - 1), \"fred \" + number});", "+\tassertEquals(list.getSelection(), new String [] {\"fred \" + (number - 1)});", "+\tassertEquals(list.getFocusIndex(), number - 1);", "+", "+\tlist.setSelection(new String [] {\"fred -1\", \"fred 0\"});", "+\tassertEquals(list.getSelection(), new String [] {\"fred 0\"});", "+\tassertEquals(list.getFocusIndex(), 0);", "+\t", "+\tString[] items = new String [number];", "+\tfor (int i = 0; i < number; i++) {", "+\t\titems[i] = \"fred \" + i;", "+\t}", "+\tlist.setSelection(items);", "+\tassertEquals(list.getSelection(), items);", "+\tassertEquals(list.getFocusIndex(), 0);", "+\t", "+\tlist.setSelection(new String [] {\"fred \" + number, \"fred \" + number});", "+\tassertEquals(list.getSelection(), new String [0]);", "+\tassertEquals(list.getFocusIndex(), 0);", "+\t", "+\tlist.setSelection(new String [] {\"fred \" + (number - 1), \"fred \" + (number - 1)});", "+\tassertEquals(list.getSelection(), new String[] {\"fred \" + (number - 1)});", "+\tassertEquals(list.getFocusIndex(), number - 1);", "+\t", "+\tlist.setSelection(new String [] {\"fred 0\", \"fred \" + number, \"fred 1\"});", "+\tassertEquals(list.getSelection(), new String[] {\"fred 0\", \"fred 1\"});", "+\tassertEquals(list.getFocusIndex(), 0);", "+\t", "+\tif (fCheckSWTPolicy) {", "+\t\tlist.removeAll();", "+\t\t", "+\t\tlist.setSelection(new String [0]);", "+\t\tassertEquals(list.getSelection(), new String[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+", "+\t\ttry {", "+\t\t\tlist.setSelection((String[]) null);", "+\t\t\tfail(\"No exception thrown\");", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t}", "+\t\t", "+\t\tlist.setSelection(new String [] {\"fred 0\"});", "+\t\tassertEquals(list.getSelection(), new String[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+", "+\t\tlist.setSelection(new String [] {\"fred 0\", \"fred 0\"});", "+\t\tassertEquals(list.getSelection(), new String[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+\t}", "+\t", "+\tsetSingleList();", "+\tfor (int i = 0; i < number; i++)", "+\t\tlist.add(\"fred \" + i);", "+", "+\tlist.setSelection(new String [0]);", "+\tassertEquals(list.getSelection(), new String[0]);", "+\tif (fCheckSWTPolicy) {", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+\t}", "+", "+\ttry {", "+\t\tlist.setSelection((String[]) null);", "+\t\tfail(\"No exception thrown\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+\t", "+\tlist.setSelection(new String [] {\"fred 2\"});", "+\tassertEquals(list.getSelection(), new String[] {\"fred 2\"});", "+\tassertEquals(list.getFocusIndex(), 2);", "+", "+\tlist.setSelection(new String [] {\"fred \" + number});", "+\tassertEquals(list.getSelection(), new String[0]);", "+\tassertEquals(list.getFocusIndex(), 2);", "+\t", "+\tlist.setSelection(new String [] {\"fred 1\", \"fred 0\"});", "+\tassertEquals(list.getSelection(), new String[] {\"fred 0\"});", "+\tassertEquals(list.getFocusIndex(), 0);", "+", "+\tlist.setSelection(new String [] {\"fred -1\", \"fred \" + number});", "+\tassertEquals(list.getSelection(), new String[0]);", "+\tassertEquals(list.getFocusIndex(), 0);", "+\t", "+\tlist.setSelection(new String [] {\"fred \" + (number - 1), \"fred \" + number});", "+\tassertEquals(list.getSelection(), new String[] {\"fred \" + (number - 1)});", "+\tassertEquals(list.getFocusIndex(), number - 1);", "+", "+\tlist.setSelection(new String [] {\"fred -1\", \"fred 0\"});", "+\tassertEquals(list.getSelection(), new String[] {\"fred 0\"});", "+\tassertEquals(list.getFocusIndex(), 0);", "+\t", "+\titems = new String[number];", "+\tfor (int i = 0; i < number; i++) {", "+\t\titems[i] = \"fred \" + i;", "+\t}", "+\tlist.setSelection(items);", "+\tassertEquals(list.getSelection(), new String[] {\"fred \" + (number - 1)});", "+\tassertEquals(list.getFocusIndex(), number - 1);", "+\t", "+\tlist.setSelection(new String [] {\"fred \" + number, \"fred \" + number});", "+\tassertEquals(list.getSelection(), new String[0]);", "+\tassertEquals(list.getFocusIndex(), number - 1);", "+\t", "+\tlist.setSelection(new String [] {\"fred \" + (number - 1), \"fred \" + (number - 1)});", "+\tassertEquals(list.getSelection(), new String[] {\"fred \" + (number - 1)});", "+\tassertEquals(list.getFocusIndex(), number - 1);", "+\t", "+\tlist.setSelection(new String [] {\"fred 0\", \"fred \" + number, \"fred 1\"});", "+\tassertEquals(list.getSelection(), new String[] {\"fred 1\"});", "+\tassertEquals(list.getFocusIndex(), 1);", "+\t", "+\tif (fCheckSWTPolicy) {", "+\t\tlist.removeAll();", "+\t\t", "+\t\tlist.setSelection(new String [0]);", "+\t\tassertEquals(list.getSelection(), new String[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+", "+\t\ttry {", "+\t\t\tlist.setSelection((String[]) null);", "+\t\t\tfail(\"No exception thrown\");", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t}", "+\t\t", "+\t\tlist.setSelection(new String [] {\"fred 0\"});", "+\t\tassertEquals(list.getSelection(), new String[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+", "+\t\tlist.setSelection(new String [] {\"fred 0\", \"fred 0\"});", "+\t\tassertEquals(list.getSelection(), new String[0]);", "+\t\tassertEquals(list.getFocusIndex(), -1);", "+\t}"]}], "num": 21801}
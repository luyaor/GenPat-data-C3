{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18ecf25280e4a8434302165369036335", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44c8850efb9c00f8c19b4f0a4f3833c7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "d210fa9d39566655f9c3694b37a81a867775c6fb", "commitAfterChange": "3ad31e0f367aa1b600ee746ae8b160bb349a69e1", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 46, "signatureBeforeChange": "\r void drawText(GC gc, Point position)", "signatureAfterChange": "\r \r void redraw()", "diff": ["- */\r", "-void drawText(GC gc, Point position) {\r", "-\tTree parent = getParent();\r", "-\tString text = getText();\r", "-\t\r", "-\tif (text != null) {\r", "-\t\tif (isSelected() == true) {\r", "-\t\t\tgc.setBackground(getSelectionBackgroundColor());\r", "-\t\t\tgc.setForeground(getSelectionForegroundColor());\r", "-\t\t}\r", "-\t\tgc.drawString(text, position.x, position.y);\r", "-\t\tif (isSelected() == true) {\r", "-\t\t\tgc.setBackground(parent.getBackground());\r", "-\t\t\tgc.setForeground(parent.getForeground());\r", "-\t\t}\r", "+\r", "+void redraw(){\r", "+\tRectangle bounds = getBounds();\r", "+\tgetParent().redraw(bounds.x, bounds.y, bounds.width, bounds.height, false);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77bbd59aabae22652e000db8ac4dad6a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "5544ce1d748561f71c4f1d1997c431f82e5c4c86", "commitAfterChange": "24e0049851c0d0a09cb9f25e5892d112e2936fed", "methodNumberBeforeChange": 273, "methodNumberAfterChange": 271, "signatureBeforeChange": " void showBidiCaret()", "signatureAfterChange": " void setCaretLocation()", "diff": ["- */", "-void showBidiCaret() {", "-\tint line = content.getLineAtOffset(caretOffset);", "-\tint lineOffset = content.getOffsetAtLine(line);", "-\tint offsetInLine = caretOffset - lineOffset;", "-\tString lineText = content.getLine(line);", "-\tint xAtOffset = 0;", "-\tboolean scrolled = false;\t\t", "-\tGC gc = getGC();", "-\tStyledTextBidi bidi = getStyledTextBidi(lineText, lineOffset, gc);", "-\t// getXAtOffset, inlined for better performance", "-\txAtOffset = getBidiTextPosition(lineText, offsetInLine, bidi) + leftMargin;", "-\tif (offsetInLine > lineText.length()) {", "-\t\t// offset is not on the line. return an x location one character ", "-\t\t// after the line to indicate the line delimiter.", "-\t\txAtOffset += lineEndSpaceWidth;", "-\t}", "-\txAtOffset -= horizontalScrollOffset;", "-\t//", "-\tscrolled = showLocation(xAtOffset, line);", "-\tif (scrolled == false) {", "-\t\tsetBidiCaretLocation(bidi);", "-\t}", "-\tgc.dispose();", "-}", "+\tint lineIndex = getCaretLine();", "+\tString line = content.getLine(lineIndex);", "+\tint lineOffset = content.getOffsetAtLine(lineIndex);", "+\tint offsetInLine = caretOffset - lineOffset;", "+\tint newCaretX = getXAtOffset(line, lineIndex, offsetInLine);", "+\tsetCaretLocation(newCaretX, lineIndex, getCaretDirection());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3fa558689b110fb3ca7ff06d115179f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "be7a6b56ec36f2937282f99ce8f6d3a09d752bb5", "commitAfterChange": "388089e4bec9dc7b9e91ccd2ec44faabbba9290c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\tif (OS.HIVIEW) {", "-\t\tint[] contentView = new int[1];", "-\t\tOS.HIViewFindByID(OS.HIViewGetRoot(window), OS.kHIViewWindowContentID(), contentView);", "-\t\tOS.HIViewAddSubview(contentView[0], webViewHandle);", "-\t\tOS.HIViewChangeFeatures(webViewHandle, OS.kHIViewFeatureIsOpaque, 0);", "-\t} else {", "-\t\tOS.HIViewAddSubview(browser.handle, webViewHandle);", "-\t}", "+\tint[] contentView = new int[1];", "+\tOS.HIViewFindByID(OS.HIViewGetRoot(window), OS.kHIViewWindowContentID(), contentView);", "+\tOS.HIViewAddSubview(contentView[0], webViewHandle);", "+\tOS.HIViewChangeFeatures(webViewHandle, OS.kHIViewFeatureIsOpaque, 0);", "+", "-\t\t\t\t\tif (OS.HIVIEW) OS.DisposeControl(webViewHandle);", "+\t\t\t\t\tOS.DisposeControl(webViewHandle);", "-\t\t\t\t\tif (OS.HIVIEW) {", "-\t\t\t\t\t\tOS.HIViewGetBounds(browser.handle, bounds);", "-\t\t\t\t\t\tint[] contentView = new int[1];", "-\t\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(browser.handle)), OS.kHIViewWindowContentID(), contentView);", "-\t\t\t\t\t\tOS.HIViewConvertRect(bounds, browser.handle, contentView[0]);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tOS.HIViewGetFrame(browser.handle, bounds);", "-\t\t\t\t\t}", "+\t\t\t\t\tOS.HIViewGetBounds(browser.handle, bounds);", "+\t\t\t\t\tint[] contentView = new int[1];", "+\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(browser.handle)), OS.kHIViewWindowContentID(), contentView);", "+\t\t\t\t\tOS.HIViewConvertRect(bounds, browser.handle, contentView[0]);", "-\t\t\t\t\tif (OS.HIVIEW) {", "-\t\t\t\t\t\tOS.HIViewGetBounds(browser.handle, bounds);", "-\t\t\t\t\t\tint[] contentView = new int[1];", "-\t\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(browser.handle)), OS.kHIViewWindowContentID(), contentView);", "-\t\t\t\t\t\tOS.HIViewConvertRect(bounds, browser.handle, contentView[0]);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tOS.HIViewGetFrame(browser.handle, bounds);", "-\t\t\t\t\t}", "+\t\t\t\t\tOS.HIViewGetBounds(browser.handle, bounds);", "+\t\t\t\t\tint[] contentView = new int[1];", "+\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(browser.handle)), OS.kHIViewWindowContentID(), contentView);", "+\t\t\t\t\tOS.HIViewConvertRect(bounds, browser.handle, contentView[0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88251c117095052edb965f0f77434e98", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ce2f35c3f6b1d0b5778f68f011b1d8668d3c5c72", "commitAfterChange": "00bee382096a1807d86474fed7c933116a37eeb8", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 75, "signatureBeforeChange": "\r void doMouseLocationChange(int x, int y, boolean select)", "signatureAfterChange": "\r void doMouseLocationChange(int x, int y, boolean select)", "diff": ["-\tint line = (y + verticalScrollOffset) / getLineHeight();\r", "+\tif (isBidi()) {\r", "+\t\tdoBidiMouseLocationChange(x, y, select);\r", "+\t\treturn;\r", "+\t}\r", "+\tint line = (y + verticalScrollOffset) / lineHeight;\r", "-\t\tint offsetInLine = -1;\r", "-\t\tint newCaretOffset;\r", "+\t\tint offsetInLine = getCaretOffsetAtX(lineText, lineOffset, x);\r", "+\t\tint newCaretOffset = lineOffset + offsetInLine;\r", "-\t\tif (select && selectionAnchor == lineOffset && line < lineCount - 1) {\r", "-\t\t\tGC gc = new GC(this);\t\t\r", "-\t\t\tint lineLength = lineText.length();\r", "-\t\t\t// represent the line break as one additional white space\r", "-\t\t\t// if the selection mouse event occurs beyond the line end\r", "-\t\t\tif (x + horizontalScrollOffset > textWidth(lineText, line, lineLength, gc)) {\r", "-\t\t\t\tline++;\r", "-\t\t\t\toffsetInLine = 0;\r", "-\t\t\t\tlineOffset = content.getOffsetAtLine(line);\r", "-\t\t\t}\r", "-\t\t\tgc.dispose();\r", "-\t\t}\r", "-\t\tif (offsetInLine == -1) {\r", "-\t\t\toffsetInLine = getOffsetAtX(lineText, lineOffset, x);\r", "-\t\t}\r", "-\t\tnewCaretOffset = lineOffset + offsetInLine;\r", "-\t\t\tshowCaret();\r", "+\t\t\tsetCaretLocation();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56309f23b1cf13c1b0f0973052da79ba", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "66fbf00b16cbfd92f2e860b2a2c0976227853d36", "commitAfterChange": "ab0b2d3bbe9918e6c436a9c99106bcc28d4fcea4", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " public void select (TreeItem item)", "signatureAfterChange": " public void select (TreeItem item)", "diff": ["-\t\tint /*long*/ hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "-\t\tif (hItem != 0) {", "+\t\tint /*long*/ hItem = item.handle;", "+\t\tint state = 0;", "+\t\tif (OS.IsWinCE) {", "-\t\t\ttvItem.mask = OS.TVIF_HANDLE | OS.TVIF_STATE;", "-\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;", "+\t\t\ttvItem.mask = OS.TVIF_STATE;", "-\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) != 0) {", "-\t\t\t\tif (hItem == item.handle) return;", "-\t\t\t\ttvItem.state = 0;", "-\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);", "-\t\t\t}", "+\t\t\tstate = tvItem.state;", "+\t\t} else {", "+\t\t\tstate = (int)/*64*/OS.SendMessage (handle, OS.TVM_GETITEMSTATE, hItem, OS.TVIS_SELECTED);", "+\t\tif ((state & OS.TVIS_SELECTED) != 0) return;", "-\t\tignoreSelect = true;", "-\t\tOS.SendMessage (handle, OS.TVM_SELECTITEM, OS.TVGN_CARET, item.handle);", "-\t\tignoreSelect = false;", "+\t\tsetSelection (item);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d9cc07950b7a57c43ab3992be2a3a66", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "a3a1752d4cca52a10819bc086957df9ad04a0a87", "commitAfterChange": "9effcc166dfa61e54b0f9bb76b17f1175f53b69b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  int gtk_key_press_event (int widget, int eventPtr)", "signatureAfterChange": "  int gtk_key_press_event (int widget, int eventPtr)", "diff": ["-\t\t\tint width = 0;", "-\t\t\tint height = 0;", "-\t\t\tint parentWidth = 0;", "-\t\t\tint parentHeight = 0;", "-\t\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "-\t\t\t\tOS.gtk_widget_get_allocation(handle, allocation);", "-\t\t\t\twidth = allocation.width;", "-\t\t\t\theight = allocation.height;", "-\t\t\t\tOS.gtk_widget_get_allocation(parent.handle, allocation);", "-\t\t\t\tparentWidth = allocation.width;", "-\t\t\t\tparentHeight = allocation.height;", "-\t\t\t} else {", "-\t\t\t\twidth = OS.GTK_WIDGET_WIDTH (handle);", "-\t\t\t\theight = OS.GTK_WIDGET_HEIGHT (handle);", "-\t\t\t\tparentWidth = OS.GTK_WIDGET_WIDTH (parent.handle);", "-\t\t\t\tparentHeight = OS.GTK_WIDGET_HEIGHT (parent.handle);", "-\t\t\t}", "+\t\t\tgtk_widget_get_allocation (handle, allocation);", "+\t\t\tint width = allocation.width;", "+\t\t\tint height = allocation.height;", "+\t\t\tgtk_widget_get_allocation (parent.handle, allocation);", "+\t\t\tint parentWidth = allocation.width;", "+\t\t\tint parentHeight = allocation.height;"]}], "num": 37905}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cbf978c5d218243e4f9bb84f59b20c01", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "078773ff893071dc14471457f6ae142b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/win32/org/eclipse/swt/browser/WebFrameLoadDelegate.java", "commitBeforeChange": "73bece2a93a84ede732dede8b40b2d8c17119094", "commitAfterChange": "3684f6f68db473f62f594c1867c30510d320282b", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  int didFinishLoadForFrame (int webview, int frame)", "signatureAfterChange": "  int didFinishLoadForFrame (int webview, int frame)", "diff": ["-\tif (top) {", "-\t\t/*", "-\t\t * If html is not null then there is html from a previous setText() call", "-\t\t * waiting to be set into the about:blank page once it has completed loading. ", "-\t\t */", "-\t\tif (html != null) {", "-\t\t\tif (getUrl ().startsWith (WebKit.ABOUT_BLANK)) {", "-\t\t\t\t((WebKit)browser.webBrowser).loadingText = true;", "-\t\t\t\tint /*long*/ string = WebKit.createBSTR (html);", "-\t\t\t\tint /*long*/ URLString;", "-\t\t\t\tif (((WebKit)browser.webBrowser).untrustedText) {", "-\t\t\t\t\tURLString = WebKit.createBSTR (WebKit.ABOUT_BLANK);", "-\t\t\t\t} else {", "-\t\t\t\t\tURLString = WebKit.createBSTR (WebKit.URI_FILEROOT);", "-\t\t\t\t}", "-\t\t\t\tIWebFrame mainFrame = new IWebFrame (frame);", "-\t\t\t\tmainFrame.loadHTMLString (string, URLString);", "-\t\t\t\thtml = null;", "-\t\t\t}", "-\t\t}", "+\tif (!top) return COM.S_OK;", "-\t\t/*", "-\t\t* The loadHTMLString() invocation above will trigger a second webView_didFinishLoadForFrame", "-\t\t* callback when it is completed.  If text was just set into the browser then wait for this", "-\t\t* second callback to come before sending the title or completed events.", "-\t\t*/", "-\t\tif (!((WebKit)browser.webBrowser).loadingText) {", "-\t\t\tif (browser.isDisposed ()) return COM.S_OK;", "-\t\t\t/*", "-\t\t\t* To be consistent with other platforms a title event should be fired when a", "-\t\t\t* page has completed loading.  A page with a <title> tag will do this", "-\t\t\t* automatically when the didReceiveTitle callback is received.  However a page", "-\t\t\t* without a <title> tag will not do this by default, so fire the event", "-\t\t\t* here with the page's url as the title.", "-\t\t\t*/", "-\t\t\tDisplay display = browser.getDisplay ();", "+\t/*", "+\t * If html is not null then there is html from a previous setText() call", "+\t * waiting to be set into the about:blank page once it has completed loading. ", "+\t */", "+\tif (html != null) {", "+\t\tif (getUrl ().startsWith (WebKit.ABOUT_BLANK)) {", "+\t\t\t((WebKit)browser.webBrowser).loadingText = true;", "+\t\t\tint /*long*/ string = WebKit.createBSTR (html);", "+\t\t\tint /*long*/ URLString;", "+\t\t\tif (((WebKit)browser.webBrowser).untrustedText) {", "+\t\t\t\tURLString = WebKit.createBSTR (WebKit.ABOUT_BLANK);", "+\t\t\t} else {", "+\t\t\t\tURLString = WebKit.createBSTR (WebKit.URI_FILEROOT);", "+\t\t\t}", "-\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\thr = mainFrame.dataSource (result);", "-\t\t\tif (hr != COM.S_OK || result[0] == 0) {", "-\t\t\t\treturn COM.S_OK;", "-\t\t    }", "-\t\t\tIWebDataSource dataSource = new IWebDataSource (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\thr = dataSource.pageTitle (result);", "-\t\t\tdataSource.Release ();", "-\t\t\tif (hr != COM.S_OK) {", "-\t\t\t\treturn COM.S_OK;", "-\t\t    }", "-\t\t\tString title = null;", "-\t\t\tif (result[0] != 0) {", "-\t\t\t\ttitle = WebKit.extractBSTR (result[0]);", "-\t\t\t\tCOM.SysFreeString (result[0]);", "-\t\t\t}", "-\t\t\tif (title == null || title.length () == 0) {\t/* page has no title */", "-\t\t\t\tTitleEvent newEvent = new TitleEvent (browser);", "-\t\t\t\tnewEvent.display = display;", "-\t\t\t\tnewEvent.widget = browser;", "-\t\t\t\tnewEvent.title = getUrl ();", "-\t\t\t\tTitleListener[] titleListeners = browser.webBrowser.titleListeners;", "-\t\t\t\tfor (int i = 0; i < titleListeners.length; i++) {", "-\t\t\t\t\ttitleListeners[i].changed (newEvent);", "-\t\t\t\t}", "-\t\t\t\tif (browser.isDisposed ()) return COM.S_OK;", "-\t\t\t}", "-", "-\t\t\tProgressEvent progress = new ProgressEvent (browser);", "-\t\t\tprogress.display = display;", "-\t\t\tprogress.widget = browser;", "-\t\t\tprogress.current = WebKit.MAX_PROGRESS;", "-\t\t\tprogress.total = WebKit.MAX_PROGRESS;", "-\t\t\tProgressListener[] progressListeners = browser.webBrowser.progressListeners;", "-\t\t\tfor (int i = 0; i < progressListeners.length; i++) {", "-\t\t\t\tprogressListeners[i].completed (progress);", "-\t\t\t}", "+\t\t\tmainFrame.loadHTMLString (string, URLString);", "+\t\t\thtml = null;", "-\t\t((WebKit)browser.webBrowser).loadingText = false;", "+\t}", "+", "+\t/*", "+\t* The loadHTMLString() invocation above will trigger a second didFinishLoadForFrame", "+\t* callback when it is completed.  If text was just set into the browser then wait for this", "+\t* second callback to come before sending the title or completed events.", "+\t*/", "+\tif (!((WebKit)browser.webBrowser).loadingText) {", "+\t\tif (browser.isDisposed ()) return COM.S_OK;", "+\t\t/*", "+\t\t* To be consistent with other platforms a title event should be fired when a", "+\t\t* page has completed loading.  A page with a <title> tag will do this", "+\t\t* automatically when the didReceiveTitle callback is received.  However a page", "+\t\t* without a <title> tag will not do this by default, so fire the event", "+\t\t* here with the page's url as the title.", "+\t\t*/", "+\t\tDisplay display = browser.getDisplay ();", "+\t\tIWebFrame mainFrame = new IWebFrame (frame);", "+\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\thr = mainFrame.dataSource (result);", "+\t\tif (hr != COM.S_OK || result[0] == 0) {", "+\t\t\treturn COM.S_OK;", "+\t\t}", "+\t\tIWebDataSource dataSource = new IWebDataSource (result[0]);", "+\t\tresult[0] = 0;", "+\t\thr = dataSource.pageTitle (result);", "+\t\tdataSource.Release ();", "+\t\tif (hr != COM.S_OK) {", "+\t\t\treturn COM.S_OK;", "+\t\t}", "+\t\tString title = null;", "+\t\tif (result[0] != 0) {", "+\t\t\ttitle = WebKit.extractBSTR (result[0]);", "+\t\t\tCOM.SysFreeString (result[0]);", "+\t\t}", "+\t\tif (title == null || title.length () == 0) {\t/* page has no title */", "+\t\t\tTitleEvent newEvent = new TitleEvent (browser);", "+\t\t\tnewEvent.display = display;", "+\t\t\tnewEvent.widget = browser;", "+\t\t\tnewEvent.title = getUrl ();", "+\t\t\tTitleListener[] titleListeners = browser.webBrowser.titleListeners;", "+\t\t\tfor (int i = 0; i < titleListeners.length; i++) {", "+\t\t\t\ttitleListeners[i].changed (newEvent);", "+\t\t\t}", "+\t\t\tif (browser.isDisposed ()) return COM.S_OK;", "+\t\t}", "+", "+\t\tProgressEvent progress = new ProgressEvent (browser);", "+\t\tprogress.display = display;", "+\t\tprogress.widget = browser;", "+\t\tprogress.current = WebKit.MAX_PROGRESS;", "+\t\tprogress.total = WebKit.MAX_PROGRESS;", "+\t\tProgressListener[] progressListeners = browser.webBrowser.progressListeners;", "+\t\tfor (int i = 0; i < progressListeners.length; i++) {", "+\t\t\tprogressListeners[i].completed (progress);", "+\t\t}", "+\t((WebKit)browser.webBrowser).loadingText = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab8374e9bf044bc7fc28443253c4d18c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/win32/org/eclipse/swt/browser/WebUIDelegate.java", "commitBeforeChange": "ee1312c0a8bceb260836539216b0ab2d958157e2", "commitAfterChange": "a99d0f7512ef64a51e058b97dfb32c83f03879ac", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": "  int printFrame (int webView, int frame)", "signatureAfterChange": "  int printFrame (int webView, int frame)", "diff": ["-\tOS.PrintDlg (pd);", "+\tif (!OS.PrintDlg (pd)) return COM.S_OK;", "-\treturn COM.S_OK;", "+\t\treturn COM.S_OK;"]}], "num": 7623}
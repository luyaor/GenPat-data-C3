{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ea40441d43f7d7ebce9db3ba26789f3b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eac4b0bb6254d93880e8aa9e5ec733c1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "9cdeeef16ecd0dd86b274a41cdcf8af6db40077a", "commitAfterChange": "62d90062dd8cb11eec7528efece057a0af693514", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public Rectangle getBounds (int start, int end)", "signatureAfterChange": " public Rectangle getBounds (int start, int end)", "diff": ["-\tint startLine = getLineIndex(start);", "-\tint endLine = getLineIndex(end);", "-\tlength = segmentsText.length();", "-\tif (startLine != endLine) {", "-\t\tint width = 0;", "-\t\tint y = lineY[startLine];", "-\t\twhile (startLine <= endLine) {", "-\t\t\twidth = Math.max (width, lineWidth[startLine++]);", "-\t\t}", "-\t\treturn new Rectangle (0, y, width, lineY[endLine + 1] - y);", "-\t}", "-\tint x = 0, startRunX = 0, endRunX = 0, i = 0;", "-\tStyleItem startRun = null, endRun = null, lastRun;", "-\tStyleItem[] lineRuns = runs[startLine];", "-\tfor (; i < lineRuns.length; i++) {", "-\t\tStyleItem run = lineRuns[i];", "+\tint left = 0x7fffffff, right = 0;", "+\tint top = 0x7fffffff, bottom = 0;", "+\tint lineIndex = 0;", "+\tboolean isRTL = (orientation & SWT.RIGHT_TO_LEFT) != 0;", "+\tfor (int i = 0; i < allRuns.length - 1; i++) {", "+\t\tStyleItem run = allRuns[i];", "-\t\tif (runEnd == length) runEnd++;", "+\t\tif (run.lineBreak) lineIndex++;", "+\t\tif (runEnd <= start) continue;", "+\t\tif (run.start > end) break;", "+\t\tint runLead = run.x;", "+\t\tint runTrail = run.x + run.width;", "-\t\t\tstartRun = run;", "-\t\t\tstartRunX = x;", "-\t\t\tbreak;", "-\t\t}", "-\t\tx  += run.width;", "-\t}", "-\tboolean reordered = false;\t", "-\tlastRun = startRun;", "-\tboolean isRTL = (orientation & SWT.RIGHT_TO_LEFT) != 0 ^ (lastRun.analysis.s.uBidiLevel & 1) != 0;", "-\tfor (; i < lineRuns.length; i++) {", "-\t\tStyleItem run = lineRuns[i];", "-\t\tif (run != lastRun) {", "-\t\t\tif (isRTL) {", "-\t\t\t\treordered = run.start + run.length != lastRun.start;", "+\t\t\tint cx = 0;", "+\t\t\tif (!run.tab) {", "+\t\t\t\tint[] piX = new int[1];", "+\t\t\t\tOS.ScriptCPtoX(start - run.start, false, run.length, run.glyphCount, run.clusters, run.visAttrs, run.advances, run.analysis, piX);", "+\t\t\t\tcx = isRTL ? run.width - piX[0] : piX[0];", "+\t\t\t}", "+\t\t\tif (run.analysis.fRTL ^ isRTL) {", "+\t\t\t\trunTrail = run.x + cx;", "-\t\t\t\treordered = lastRun.start + lastRun.length != run.start;", "+\t\t\t\trunLead = run.x + cx;", "-\t\tif (reordered) break;", "-\t\tlastRun = run;", "-\t\tint runEnd = run.start + run.length;\t", "-\t\tif (runEnd == length) runEnd++;", "-\t\tif ( run.start <= end && end < runEnd) {", "-\t\t\tendRun = run;", "-\t\t\tendRunX = x;", "-\t\t\tbreak;", "+\t\tif (run.start <= end && end < runEnd) {", "+\t\t\tint cx = run.width;", "+\t\t\tif (!run.tab) {", "+\t\t\t\tint[] piX = new int[1];", "+\t\t\t\tOS.ScriptCPtoX(end - run.start, true, run.length, run.glyphCount, run.clusters, run.visAttrs, run.advances, run.analysis, piX);", "+\t\t\t\tcx = isRTL ? run.width - piX[0] : piX[0];", "+\t\t\t}", "+\t\t\tif (run.analysis.fRTL ^ isRTL) {", "+\t\t\t\trunLead = run.x + cx;", "+\t\t\t} else {", "+\t\t\t\trunTrail = run.x + cx;", "+\t\t\t}", "-\t\tx  += run.width;", "+\t\tleft = Math.min(left, runLead);", "+\t\tright = Math.max(right, runTrail);", "+\t\ttop = Math.min(top, lineY[lineIndex]);", "+\t\tbottom = Math.max(bottom, lineY[lineIndex + 1]);", "-\tif (reordered || endRun == null) {", "-\t\tint y = lineY[startLine];", "-\t\treturn new Rectangle (0, y, lineWidth[startLine], lineY[startLine + 1] - y);", "-\t}", "-\tif (((startRun.analysis.s.uBidiLevel & 1) != 0) ^ ((endRun.analysis.s.uBidiLevel & 1) != 0)) {", "-\t\tint y = lineY[startLine];", "-\t\treturn new Rectangle (startRunX, y, endRunX + endRun.width, lineY[startLine + 1] - y);", "-\t}", "-\tint startX, endX;", "-\tif (startRun.tab) {", "-\t\tstartX = startRunX;", "-\t} else {", "-\t\tint runOffset = start - startRun.start;", "-\t\tint cChars = startRun.length;", "-\t\tint gGlyphs = startRun.glyphCount;", "-\t\tint[] piX = new int[1];", "-\t\tOS.ScriptCPtoX(runOffset, false, cChars, gGlyphs, startRun.clusters, startRun.visAttrs, startRun.advances, startRun.analysis, piX);", "-\t\tif ((orientation & SWT.RIGHT_TO_LEFT) != 0) {", "-\t\t\tpiX[0] = startRun.width - piX[0];", "-\t\t}", "-\t\tstartX = startRunX + piX[0];", "-\t}", "-\tif (endRun.tab) {", "-\t\tendX = endRunX + endRun.width;", "-\t} else {", "-\t\tint runOffset = end - endRun.start;", "-\t\tint cChars = endRun.length;", "-\t\tint gGlyphs = endRun.glyphCount;", "-\t\tint[] piX = new int[1];", "-\t\tOS.ScriptCPtoX(runOffset, true, cChars, gGlyphs, endRun.clusters, endRun.visAttrs, endRun.advances, endRun.analysis, piX);", "-\t\tif ((orientation & SWT.RIGHT_TO_LEFT) != 0) {", "-\t\t\tpiX[0] = endRun.width - piX[0];", "-\t\t}", "-\t\tendX = endRunX + piX[0];", "-\t}", "-\tif (startX > endX) {", "-\t\tint tmp = startX;", "-\t\tstartX = endX;", "-\t\tendX = tmp;", "-\t}", "-\tint width = endX - startX;", "-\tif (wrapWidth != -1) {", "-\t\tswitch (alignment) {", "-\t\t\tcase SWT.CENTER: startX += (wrapWidth - lineWidth[startLine]) / 2; break;", "-\t\t\tcase SWT.RIGHT: startX += wrapWidth - lineWidth[startLine]; break;", "-\t\t}", "-\t}", "-\tint y = lineY[startLine];", "-\treturn new Rectangle (startX, y, width, lineY[startLine + 1] - y);", "+\treturn new Rectangle(left, top, right - left, bottom - top);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7b7c9dd436a457a806fea8773cd6b10d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 12, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["-\tRectangle srcBounds = getBounds();", "-\tint width = srcBounds.width;", "-\tint height = srcBounds.height;", "-    int srcDepth= getDepth(pixmap);", "-\t/* Get the data for the source image. */", "-    int srcRowBytes= rowBytes(width, srcDepth);", "-    int srcBitsPerPixel= srcDepth;", "-\tbyte[] srcData = new byte[srcRowBytes * height];", "- \tcopyPixMapData(pixmap, srcData);", "-", "-\t/* Build the palette */", "-\tPaletteData palette = null;", "-\tswitch (srcDepth) {", "-\tcase 1:", "-\t\tpalette = new PaletteData(new RGB[] {", "-\t\t\tnew RGB(0, 0, 0),", "-\t\t\tnew RGB(255, 255, 255)", "-\t\t});", "-\t\tbreak;", "-\tcase 4:", "-\t\tshort[] colorTable4= getColorTable(pixmap);", "-\t\tRGB[] rgbs4 = new RGB[ colorTable4.length/4 ];", "-\t\tfor (int i = 0; i < rgbs4.length; i++) {", "-\t\t\tint packed= getRGB(colorTable4, i);", "-\t\t\trgbs4[i] = new RGB((packed >> 16) & 0xFF, (packed >> 8) & 0xFF, (packed >> 0) & 0xFF);", "-\t\t}", "-\t\tpalette = new PaletteData(rgbs4);", "-\t\tbreak;", "-\tcase 8:", "-\t\t/* Normalize the pixels in the source image data (by making the", "-\t\t * pixel values sequential starting at pixel 0). Reserve normalized", "-\t\t * pixel 0 so that it maps to real pixel 0. This assumes pixel 0 is", "-\t\t * always used in the image.", "-\t\t */", "-\t\tbyte[] normPixel = new byte[ 256 ];", "-\t\tfor (int index = 0; index < normPixel.length; index++) {", "-\t\t\tnormPixel[ index ] = 0;", "-\t\t}", "-\t\tint numPixels = 1;", "-\t\tint index = 0;", "-\t\tfor (int y = 0; y < height; y++) {", "-\t\t\tfor (int x = 0; x < srcRowBytes; x++) {", "-\t\t\t\tint srcPixel = srcData[ index + x ] & 0xFF;", "-\t\t\t\tif (srcPixel != 0 && normPixel[ srcPixel ] == 0) {", "-\t\t\t\t\tnormPixel[ srcPixel ] = (byte)numPixels++;", "-\t\t\t\t}", "-\t\t\t\tsrcData[ index + x ] = normPixel[ srcPixel ];", "-\t\t\t}", "-\t\t\tindex += srcRowBytes;", "-\t\t}", "-\t\t", "-\t\tshort[] colorTable= getColorTable(pixmap);", "-", "-\t\t/* Create a palette with only the RGB values used in the image. */", "-\t\tRGB[] rgbs = new RGB[ numPixels ];", "-\t\tfor (int srcPixel = 0; srcPixel < normPixel.length; srcPixel++) {", "-\t\t\t// If the pixel value was used in the image, get its RGB values.", "-\t\t\tif (srcPixel == 0 || normPixel[ srcPixel ] != 0) {", "-\t\t\t\tint packed= getRGB(colorTable, srcPixel);", "-\t\t\t\tint rgbIndex = normPixel[ srcPixel ] & 0xFF;", "-\t\t\t\trgbs[ rgbIndex ] = new RGB((packed >> 16) & 0xFF, (packed >> 8) & 0xFF, (packed >> 0) & 0xFF);\t\t\t\t\t", "-\t\t\t}", "-\t\t}", "-\t\tpalette = new PaletteData(rgbs);", "-\t\tbreak;", "-\tcase 16:", "-\tcase 24:", "-\tcase 32:", "-\t\tpalette = new PaletteData(getRedMask(srcDepth), getGreenMask(srcDepth), getBlueMask(srcDepth));", "-\t\tbreak;", "-\tdefault:", "-\t\tSWT.error(SWT.ERROR_UNSUPPORTED_DEPTH);", "-\t}", "+\tint width = OS.CGImageGetWidth(handle);", "+\tint height = OS.CGImageGetHeight(handle);", "+\tint bpr = OS.CGImageGetBytesPerRow(handle);", "+\tint bpp = OS.CGImageGetBitsPerPixel(handle);\t", "+\tint dataSize = height * bpr;", "+\tbyte[] srcData = new byte[dataSize];", "+\tOS.memcpy(srcData, data, dataSize);", "-\t", "-\tImageData data = new ImageData(width, height, srcDepth, palette);", "+\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "+\tImageData data = new ImageData(width, height, bpp, palette);", "-\tif (false && srcBitsPerPixel == 32) {", "-\t\t/*", "-\t\t * If bits per pixel is 32, scale the data down to 24, since we do not", "-\t\t * support 32-bit images", "-\t\t */", "-\t\tbyte[] oldData = data.data;", "-\t\tint bytesPerLine = (width * srcDepth + 7) / 8;", "-\t\tbytesPerLine = (bytesPerLine + 3) / 4 * 4;", "-\t\tbyte[] newData = new byte[bytesPerLine * height];", "-\t\tint destIndex = 0;", "-\t\tint srcIndex = 0;", "-\t\t", "-\t\tfor (int y = 0; y < height; y++) {", "-\t\t\tdestIndex = y * bytesPerLine;", "-\t\t\tsrcIndex = y * srcRowBytes;", "-\t\t\tfor (int x = 0; x < width; x++) {", "-\t\t\t\tnewData[destIndex] = oldData[srcIndex + 1];", "-\t\t\t\tnewData[destIndex + 1] = oldData[srcIndex + 2];", "-\t\t\t\tnewData[destIndex + 2] = oldData[srcIndex + 3];", "-\t\t\t\tsrcIndex += 4;", "-\t\t\t\tdestIndex += 3;", "-\t\t\t}", "-\t\t}", "-\t\tdata.data = newData;", "-\t}", "-\tif (transparentPixel == -1 && type == SWT.ICON && mask != 0) {", "-\t\t/* Get the icon data */", "-\t\tdata.maskPad = 4;", "-\t\tint maskRowBytes= rowBytes(width, getDepth(mask));", "-\t\tdata.maskData = new byte[maskRowBytes * height];", "-\t\tcopyPixMapData(mask, data.maskData);", "-\t}", "+\tdata.bytesPerLine = bpr;", "+", "+\tif (transparentPixel == -1 && type == SWT.ICON) {", "+\t\t/* Get the icon mask data */", "+\t\tint maskBpl = (((width + 7) / 8) + 3) / 4 * 4;", "+\t\tbyte[] maskData = new byte[height * maskBpl];", "+\t\tint offset = 0, maskOffset = 0;", "+\t\tfor (int y = 0; y<height; y++) {", "+\t\t\tfor (int x = 0; x<width; x++) {", "+\t\t\t\tif (srcData[offset] != 0) {", "+\t\t\t\t\tmaskData[maskOffset + (x >> 3)] |= (1 << (7 - (x & 0x7)));", "+\t\t\t\t} else {", "+\t\t\t\t\tmaskData[maskOffset + (x >> 3)] &= ~(1 << (7 - (x & 0x7)));", "+\t\t\t\t}", "+\t\t\t\toffset += 4;", "+\t\t\t}", "+\t\t\tmaskOffset += maskBpl;", "+\t\t}", "+\t\tdata.maskData = maskData;", "+\t\tdata.maskPad = 4;", "+\t}"]}], "num": 14681}
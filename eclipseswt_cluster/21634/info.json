{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf327ddabc3f7f8cd9a3b88b511dcdf9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8310c985dd4e0649752ea0aa37dbbaad", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "187ea656e7718232fbbad1117283cd1f27ee85cc", "commitAfterChange": "edcfa2b9454cf2ea4b6dac430c1d7266bf2aed9f", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 137, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\t\tcase OS.CDDS_PREPAINT: {", "-\t\t\t\t\tif (OS.IsWindowVisible (handle)) {", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* Bug in Windows.  When the table has the extended style", "-\t\t\t\t\t\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "-\t\t\t\t\t\t* CLR_NONE to make the table transparent, Windows fills", "-\t\t\t\t\t\t* a black rectangle around any column that contains an", "-\t\t\t\t\t\t* image.  The fix is clear LVS_EX_FULLROWSELECT during", "-\t\t\t\t\t\t* custom draw.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "-\t\t\t\t\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) == OS.CLR_NONE) {", "-\t\t\t\t\t\t\t\tOS.UpdateWindow (handle);", "-\t\t\t\t\t\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "-\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "-\t\t\t\t\t\t\t\tOS.ValidateRect (handle, null);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "-\t\t\t\t\t\t\tControl control = findBackgroundControl ();", "-\t\t\t\t\t\t\tif (control != null && control.backgroundImage != null) {", "-\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "-\t\t\t\t\t\t\t\tfillImageBackground (nmcd.hdc, control, rect);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) == OS.CLR_NONE) {", "-\t\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "-\t\t\t\t\t\t\t\t\tif (control == null) control = this;", "-\t\t\t\t\t\t\t\t\tfillBackground (nmcd.hdc, control.getBackgroundPixel (), rect);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn new LRESULT (OS.CDRF_NOTIFYITEMDRAW | OS.CDRF_NOTIFYPOSTPAINT);", "-\t\t\t\t}", "-\t\t\t\tcase OS.CDDS_POSTPAINT: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug in Windows.  When the table has the extended style", "-\t\t\t\t\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "-\t\t\t\t\t* CLR_NONE to make the table transparent, Windows fills", "-\t\t\t\t\t* a black rectangle around any column that contains an", "-\t\t\t\t\t* image.  The fix is clear LVS_EX_FULLROWSELECT during", "-\t\t\t\t\t* custom draw.", "-\t\t\t\t\t*/", "-\t\t\t\t\tif (OS.IsWindowVisible (handle) && (style & SWT.FULL_SELECTION) != 0) {", "-\t\t\t\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) == OS.CLR_NONE) {", "-\t\t\t\t\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "-\t\t\t\t\t\t\tif (OS.IsWinCE) {", "-\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\t\t\tboolean damaged = OS.GetUpdateRect (handle, rect, true);", "-\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, bits);", "-\t\t\t\t\t\t\t\tOS.ValidateRect (handle, null);", "-\t\t\t\t\t\t\t\tif (damaged) OS.InvalidateRect (handle, rect, true);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tint rgn = OS.CreateRectRgn (0, 0, 0, 0);", "-\t\t\t\t\t\t\t\tint result = OS.GetUpdateRgn (handle, rgn, true);", "-\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, bits);", "-\t\t\t\t\t\t\t\tOS.ValidateRect (handle, null);", "-\t\t\t\t\t\t\t\tif (result != OS.NULLREGION) OS.InvalidateRgn (handle, rgn, true);", "-\t\t\t\t\t\t\t\tOS.DeleteObject (rgn);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase OS.CDDS_ITEMPREPAINT: {", "-\t\t\t\t\treturn new LRESULT (OS.CDRF_NOTIFYSUBITEMDRAW | OS.CDRF_NOTIFYPOSTPAINT);", "-\t\t\t\t}", "-\t\t\t\tcase OS.CDDS_SUBITEMPREPAINT: {", "-\t\t\t\t\tint hDC = nmcd.hdc;", "-\t\t\t\t\tTableItem item = _getItem (nmcd.dwItemSpec);", "-\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [nmcd.iSubItem] : -1;", "-\t\t\t\t\tif (hFont == -1) hFont = item.font;", "-\t\t\t\t\tint clrText = item.cellForeground != null ? item.cellForeground [nmcd.iSubItem] : -1;", "-\t\t\t\t\tif (clrText == -1) clrText = item.foreground;", "-\t\t\t\t\tint clrTextBk = item.cellBackground != null ? item.cellBackground [nmcd.iSubItem] : -1;", "-\t\t\t\t\tif (clrTextBk == -1) clrTextBk = item.background;", "-\t\t\t\t\tif (OS.IsWindowVisible (handle) && hooks (SWT.MeasureItem)) {", "-\t\t\t\t\t\tRECT itemRect = item.getBounds (nmcd.dwItemSpec, nmcd.iSubItem, true, true, false, false, hDC);", "-\t\t\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "-\t\t\t\t\t\tGCData data = new GCData ();", "-\t\t\t\t\t\tdata.device = display;", "-\t\t\t\t\t\tdata.hFont = hFont;", "-\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "-\t\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\t\tevent.item = item;", "-\t\t\t\t\t\tevent.gc = gc;", "-\t\t\t\t\t\tevent.index = nmcd.iSubItem;", "-\t\t\t\t\t\tevent.x = itemRect.left;", "-\t\t\t\t\t\tevent.y = itemRect.top;", "-\t\t\t\t\t\tevent.width = itemRect.right - itemRect.left;", "-\t\t\t\t\t\tevent.height = itemRect.bottom - itemRect.top;", "-\t\t\t\t\t\tsendEvent (SWT.MeasureItem, event);", "-\t\t\t\t\t\tevent.gc = null;", "-\t\t\t\t\t\tgc.dispose ();", "-\t\t\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "-\t\t\t\t\t\tif (isDisposed () || item.isDisposed ()) break;", "-\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "-\t\t\t\t\t\tif (count == 1 && columns [0] == null) {", "-\t\t\t\t\t\t\tint width = OS.SendMessage (handle, OS.LVM_GETCOLUMNWIDTH, 0, 0);", "-\t\t\t\t\t\t\tif (event.x + event.width > width) {", "-\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, event.x + event.width);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!ignoreItemHeight) {", "-\t\t\t\t\t\t\tif (event.height > getItemHeight ()) setItemHeight (event.height);", "-\t\t\t\t\t\t\tignoreItemHeight = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tignoreDraw = false;", "-\t\t\t\t\tboolean ignoreDrawSelected = false;", "-\t\t\t\t\tif (OS.IsWindowVisible (handle) && hooks (SWT.EraseItem)) {", "-\t\t\t\t\t\tRECT cellRect = item.getBounds (nmcd.dwItemSpec, nmcd.iSubItem, true, true, true, true, hDC);", "-\t\t\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* Bug in Windows.  For some reason, CDIS_SELECTED always set,", "-\t\t\t\t\t\t* even for items that are not selected.  The fix is to get", "-\t\t\t\t\t\t* the selection state from the item.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tLVITEM lvItem = new LVITEM ();", "-\t\t\t\t\t\tlvItem.mask = OS.LVIF_STATE;", "-\t\t\t\t\t\tlvItem.stateMask = OS.LVIS_SELECTED;", "-\t\t\t\t\t\tlvItem.iItem = nmcd.dwItemSpec;", "-\t\t\t\t\t\tint result = OS.SendMessage (handle, OS.LVM_GETITEM, 0, lvItem);", "-\t\t\t\t\t\tboolean selected = (result != 0 && (lvItem.state & OS.LVIS_SELECTED) != 0);", "-\t\t\t\t\t\tGCData data = new GCData ();", "-\t\t\t\t\t\tdata.device = display;", "-\t\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "-\t\t\t\t\t\t\tif (selected && (nmcd.iSubItem == 0 || (style & SWT.FULL_SELECTION) != 0)) {", "-\t\t\t\t\t\t\t\tdata.foreground = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "-\t\t\t\t\t\t\t\tdata.background = OS.GetSysColor (OS.COLOR_HIGHLIGHT);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tdata.foreground = clrText != -1 ? clrText : OS.GetTextColor (hDC);", "-\t\t\t\t\t\t\t\tdata.background = clrTextBk != -1 ? clrTextBk : OS.GetBkColor (hDC);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tdata.hPen = OS.CreatePen (OS.PS_SOLID, 0, data.foreground);", "-\t\t\t\t\t\t\tdata.hBrush = OS.CreateSolidBrush (data.background);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tdata.hFont = hFont;", "-\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "-\t\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\t\tevent.item = item;", "-\t\t\t\t\t\tevent.gc = gc;", "-\t\t\t\t\t\tevent.index = nmcd.iSubItem;", "-\t\t\t\t\t\tif (selected) event.detail |= SWT.SELECTED;", "-\t\t\t\t\t\tif ((nmcd.uItemState & OS.CDIS_FOCUS) != 0) event.detail |= SWT.FOCUSED;", "-\t\t\t\t\t\tevent.x = cellRect.left;", "-\t\t\t\t\t\tevent.y = cellRect.top;", "-\t\t\t\t\t\tevent.width = cellRect.right - cellRect.left;", "-\t\t\t\t\t\tevent.height = cellRect.bottom - cellRect.top;", "-\t\t\t\t\t\tdrawBackground (hDC, cellRect);", "-\t\t\t\t\t\tgc.setClipping (event.x, event.y, event.width, event.height);", "-\t\t\t\t\t\tsendEvent (SWT.EraseItem, event);", "-\t\t\t\t\t\tevent.gc = null;", "-\t\t\t\t\t\t//int newClrText = OS.GetTextColor (hDC);", "-\t\t\t\t\t\t//int newClrTextBk = OS.GetBkColor (hDC);", "-\t\t\t\t\t\tgc.dispose ();", "-\t\t\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "-\t\t\t\t\t\tif (isDisposed () || item.isDisposed ()) break;", "-\t\t\t\t\t\tif (selected) {", "-\t\t\t\t\t\t\tif ((event.detail & SWT.SELECTED) == 0) {", "-\t\t\t\t\t\t\t\tignoreDrawSelected = true;", "-\t\t\t\t\t\t\t\tif (nmcd.iSubItem == 0 || (style & SWT.FULL_SELECTION) != 0) {", "-\t\t\t\t\t\t\t\t\tclrText = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "-\t\t\t\t\t\t\t\t\t//clrText = newClrText;", "-\t\t\t\t\t\t\t\t\t//clrTextBk = newClrTextBk;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tnmcd.uItemState &= ~OS.CDIS_SELECTED;", "-\t\t\t\t\t\t\t\tOS.MoveMemory (lParam, nmcd, NMLVCUSTOMDRAW.sizeof);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif ((event.detail & SWT.SELECTED) != 0) {", "-\t\t\t\t\t\t\t\tif (nmcd.iSubItem == 0 || (style & SWT.FULL_SELECTION) != 0) {", "-\t\t\t\t\t\t\t\t\tclrText = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "-\t\t\t\t\t\t\t\t\tclrTextBk = OS.GetSysColor (OS.COLOR_HIGHLIGHT);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tnmcd.uItemState |= OS.CDIS_SELECTED;", "-\t\t\t\t\t\t\t\tOS.MoveMemory (lParam, nmcd, NMLVCUSTOMDRAW.sizeof);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tignoreDraw = !event.doit;", "-\t\t\t\t\t\tif (ignoreDraw) {", "-\t\t\t\t\t\t\tRECT itemRect = item.getBounds (nmcd.dwItemSpec, nmcd.iSubItem, true, true, false);", "-\t\t\t\t\t\t\tOS.SaveDC (hDC);", "-\t\t\t\t\t\t\tOS.SelectClipRgn (hDC, 0);", "-\t\t\t\t\t\t\tOS.ExcludeClipRect (hDC, itemRect.left, itemRect.top, itemRect.right, itemRect.bottom);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug in Windows.  When the table has the extended style", "-\t\t\t\t\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "-\t\t\t\t\t* CLR_NONE to make the table transparent, Windows draws", "-\t\t\t\t\t* a black rectangle around any column that contains an", "-\t\t\t\t\t* image.  The fix is emulate LVS_EX_FULLROWSELECT by", "-\t\t\t\t\t* drawing the selection.", "-\t\t\t\t\t*/", "-\t\t\t\t\tif (OS.IsWindowVisible (handle) && (style & SWT.FULL_SELECTION) != 0 && !ignoreDrawSelected) {", "-\t\t\t\t\t\tint bits = OS.SendMessage (handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0);", "-\t\t\t\t\t\tif ((bits & OS.LVS_EX_FULLROWSELECT) == 0) {", "-\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t* Bug in Windows.  For some reason, CDIS_SELECTED always set,", "-\t\t\t\t\t\t\t* even for items that are not selected.  The fix is to get", "-\t\t\t\t\t\t\t* the selection state from the item.", "-\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\tLVITEM lvItem = new LVITEM ();", "-\t\t\t\t\t\t\tlvItem.mask = OS.LVIF_STATE;", "-\t\t\t\t\t\t\tlvItem.stateMask = OS.LVIS_SELECTED;", "-\t\t\t\t\t\t\tlvItem.iItem = nmcd.dwItemSpec;", "-\t\t\t\t\t\t\tint result = OS.SendMessage (handle, OS.LVM_GETITEM, 0, lvItem);", "-\t\t\t\t\t\t\tif ((result != 0 && (lvItem.state & OS.LVIS_SELECTED) != 0)) {", "-\t\t\t\t\t\t\t\tif (OS.GetFocus () == handle) {", "-\t\t\t\t\t\t\t\t\tclrText = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "-\t\t\t\t\t\t\t\t\tclrTextBk = OS.GetSysColor (OS.COLOR_HIGHLIGHT);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tif ((style & SWT.HIDE_SELECTION) == 0) {", "-\t\t\t\t\t\t\t\t\t\tclrTextBk = OS.GetSysColor (OS.COLOR_3DFACE);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (clrTextBk != -1 && nmcd.iSubItem == 0) {", "-\t\t\t\t\t\t\t\t\tRECT itemRect = new RECT ();", "-\t\t\t\t\t\t\t\t\titemRect.left = OS.LVIR_SELECTBOUNDS;", "-\t\t\t\t\t\t\t\t\tif (OS.SendMessage (handle, OS. LVM_GETITEMRECT, nmcd.dwItemSpec, itemRect) != 0) {", "-\t\t\t\t\t\t\t\t\t\tRECT headerRect = new RECT ();", "-\t\t\t\t\t\t\t\t\t\tif (OS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, 0, headerRect) != 0) {", "-\t\t\t\t\t\t\t\t\t\t\titemRect.left = itemRect.right;", "-\t\t\t\t\t\t\t\t\t\t\titemRect.right = headerRect.right;", "-\t\t\t\t\t\t\t\t\t\t\tfillBackground (hDC, clrTextBk, itemRect);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Feature in Windows.  When the font is set for one cell in a table,", "-\t\t\t\t\t* Windows does not reset the font for the next cell.  As a result,", "-\t\t\t\t\t* all subsequent cells are drawn using the new font.  The fix is to", "-\t\t\t\t\t* reset the font to the default.", "-\t\t\t\t\t* ", "-\t\t\t\t\t* NOTE: This does not happen for foreground and background.", "-\t\t\t\t\t*/", "-\t\t\t\t\tif (hFont == -1 && clrText == -1 && clrTextBk == -1) {", "-\t\t\t\t\t\tif (item.cellForeground == null && item.cellBackground == null && item.cellFont == null) {", "-\t\t\t\t\t\t\tif (OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0) == 1) {", "-\t\t\t\t\t\t\t\tif (ignoreDraw || hooks (SWT.EraseItem) || hooks (SWT.PaintItem)) {", "-\t\t\t\t\t\t\t\t\treturn new LRESULT (OS.CDRF_NOTIFYPOSTPAINT);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (hFont == -1) hFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "-\t\t\t\t\tOS.SelectObject (hDC, hFont);", "-\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "-\t\t\t\t\t\tnmcd.clrText = clrText == -1 ? getForegroundPixel () : clrText;", "-\t\t\t\t\t\tif (clrTextBk == -1) {", "-\t\t\t\t\t\t\tControl control = findBackgroundControl ();", "-\t\t\t\t\t\t\tif (control == null) control = this;", "-\t\t\t\t\t\t\tif (control.backgroundImage == null && !hooks (SWT.EraseItem)) {", "-\t\t\t\t\t\t\t\tnmcd.clrTextBk = control.getBackgroundPixel ();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tnmcd.clrTextBk = clrTextBk;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tOS.MoveMemory (lParam, nmcd, NMLVCUSTOMDRAW.sizeof);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (ignoreDraw || hooks (SWT.EraseItem) || hooks (SWT.PaintItem)) {", "-\t\t\t\t\t\treturn new LRESULT (OS.CDRF_NEWFONT | OS.CDRF_NOTIFYPOSTPAINT);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn new LRESULT (OS.CDRF_NEWFONT);", "-\t\t\t\t}", "-\t\t\t\tcase OS.CDDS_SUBITEMPOSTPAINT: {", "-\t\t\t\t\tint hDC = nmcd.hdc;", "-\t\t\t\t\tif (ignoreDraw) OS.RestoreDC (hDC, -1);", "-\t\t\t\t\tif (OS.IsWindowVisible (handle) && hooks (SWT.PaintItem)) {", "-\t\t\t\t\t\tTableItem item = _getItem (nmcd.dwItemSpec);", "-\t\t\t\t\t\tRECT itemRect = item.getBounds (nmcd.dwItemSpec, nmcd.iSubItem, true, true, false, false, hDC);", "-\t\t\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "-\t\t\t\t\t\tGCData data = new GCData ();", "-\t\t\t\t\t\tdata.device = display;", "-\t\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [nmcd.iSubItem] : -1;", "-\t\t\t\t\t\tif (hFont == -1) hFont = item.font;", "-\t\t\t\t\t\tdata.hFont = hFont;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* Bug in Windows.  For some reason, CDIS_SELECTED always set,", "-\t\t\t\t\t\t* even for items that are not selected.  The fix is to get", "-\t\t\t\t\t\t* the selection state from the item.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tLVITEM lvItem = new LVITEM ();", "-\t\t\t\t\t\tlvItem.mask = OS.LVIF_STATE;", "-\t\t\t\t\t\tlvItem.stateMask = OS.LVIS_SELECTED;", "-\t\t\t\t\t\tlvItem.iItem = nmcd.dwItemSpec;", "-\t\t\t\t\t\tint result = OS.SendMessage (handle, OS.LVM_GETITEM, 0, lvItem);", "-\t\t\t\t\t\tboolean selected = result != 0 && (lvItem.state & OS.LVIS_SELECTED) != 0;", "-\t\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "-\t\t\t\t\t\t\tif (selected && (nmcd.iSubItem == 0 || (style & SWT.FULL_SELECTION) != 0)) {", "-\t\t\t\t\t\t\t\tdata.foreground = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "-\t\t\t\t\t\t\t\tdata.background = OS.GetSysColor (OS.COLOR_HIGHLIGHT);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tint clrText = item.cellForeground != null ? item.cellForeground [nmcd.iSubItem] : -1;", "-\t\t\t\t\t\t\t\tif (clrText == -1) clrText = item.foreground;", "-\t\t\t\t\t\t\t\tint clrTextBk = item.cellBackground != null ? item.cellBackground [nmcd.iSubItem] : -1;", "-\t\t\t\t\t\t\t\tif (clrTextBk == -1) clrTextBk = item.background;", "-\t\t\t\t\t\t\t\tdata.foreground = clrText != -1 ? clrText : OS.GetTextColor (hDC);", "-\t\t\t\t\t\t\t\tdata.background = clrTextBk != -1 ? clrTextBk : OS.GetBkColor (hDC);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tdata.hPen = OS.CreatePen (OS.PS_SOLID, 0, data.foreground);", "-\t\t\t\t\t\t\tdata.hBrush = OS.CreateSolidBrush (data.background);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "-\t\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\t\tevent.item = item;", "-\t\t\t\t\t\tevent.gc = gc;", "-\t\t\t\t\t\tevent.index = nmcd.iSubItem;", "-\t\t\t\t\t\tif (selected) event.detail |= SWT.SELECTED;", "-\t\t\t\t\t\tif ((nmcd.uItemState & OS.CDIS_FOCUS) != 0) event.detail |= SWT.FOCUSED;", "-\t\t\t\t\t\tevent.x = itemRect.left;", "-\t\t\t\t\t\tevent.y = itemRect.top;", "-\t\t\t\t\t\tevent.width = itemRect.right - itemRect.left;", "-\t\t\t\t\t\tevent.height = itemRect.bottom - itemRect.top;", "-\t\t\t\t\t\tRECT cellRect = item.getBounds (nmcd.dwItemSpec, nmcd.iSubItem, true, true, true, true, hDC);", "-\t\t\t\t\t\tint cellWidth = cellRect.right - cellRect.left;", "-\t\t\t\t\t\tint cellHeight = cellRect.bottom - cellRect.top;", "-\t\t\t\t\t\tgc.setClipping (cellRect.left, cellRect.top, cellWidth, cellHeight);", "-\t\t\t\t\t\tsendEvent (SWT.PaintItem, event);", "-\t\t\t\t\t\tevent.gc = null;", "-\t\t\t\t\t\tgc.dispose ();", "-\t\t\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "-\t\t\t\t\t\tif (isDisposed () || item.isDisposed ()) break;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "+\t\t\t\tcase OS.CDDS_ITEMPREPAINT: return CDDS_ITEMPREPAINT (wParam, lParam);", "+\t\t\t\tcase OS.CDDS_POSTPAINT: return CDDS_POSTPAINT (wParam, lParam);", "+\t\t\t\tcase OS.CDDS_PREPAINT: return CDDS_PREPAINT (wParam, lParam);", "+\t\t\t\tcase OS.CDDS_SUBITEMPOSTPAINT: return CDDS_SUBITEMPOSTPAINT (wParam, lParam);", "+\t\t\t\tcase OS.CDDS_SUBITEMPREPAINT: return CDDS_SUBITEMPREPAINT (wParam, lParam);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a84207e509442536e5a9c165c022a29a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "a87a0403ac3b9edf077183bd0f22ecbd0e7e4a59", "commitAfterChange": "ce5bc5ccb4b7e34346accfd668928ba52a6f7a27", "methodNumberBeforeChange": 184, "methodNumberAfterChange": 187, "signatureBeforeChange": "  int HandleEvent (int event)", "signatureAfterChange": "  int HandleEvent (int event)", "diff": ["-", "-int HandleEvent (int /*long*/ event) {", "-", "+", "+int HandleEvent (int /*long*/ event) {", "+\tif (!IsPre_2) {", "+\t\treturn HandleEvent_2(event);", "+\t} else {", "+\t\treturn HandleEvent_1_9(event);", "+\t}", "+}"]}], "num": 21634}
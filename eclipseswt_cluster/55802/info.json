{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f51c2876c5e9f2841aa58ffa66636b10", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6104a5e8256ebf53eacda6135f30729d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "84fc2c9805b2d2c52f9b3b56022cf3cd83acd074", "commitAfterChange": "6c404aff6586aea72c108bcc651a08e596ba632c", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "\r public void setVisible (boolean visible)", "signatureAfterChange": "\r public void setVisible (boolean visible)", "diff": ["+\t/*\r", "+\t* Feature in Windows.  Because TrackPopupMenu() runs a\r", "+\t* modal menu loop and does not return until an item is\r", "+\t* selected or the user cancels the menu and SWT.Selection\r", "+\t* events are posted, they won't run until execution returns\r", "+\t* to the event loop.  While this is not strictly incorrect,\r", "+\t* it means that code that relies on the modal menu loop\r", "+\t* to decide when to destroy the menu will destroy the menu\r", "+\t* before the SWT.Selection event is delivered.  The fix is\r", "+\t* to run the deferred events after the menu is hidden. \r", "+\t*/\r", "+\tDisplay display = getDisplay ();\r", "+\tdisplay.runDeferredEvents ();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c02f3395793cf8070f66e5d8e7a2c71", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "e9a0a8a473f19cbb5f3b647036f0938863649fb4", "commitAfterChange": "aec7bef7b910798d977e991d3426c01cdb0e564c", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "  LRESULT wmKeyDown (int hwnd, int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmKeyDown (int hwnd, int wParam, int lParam)", "diff": ["+\t*  Bug in Windows.  Somehow, the widget is becoming disposed after", "+\t*  calling PeekMessage().  In rare cirucmstances, it seems that", "+\t*  PeekMessage() can allow SWT listeners to run that might contain", "+\t*  application code that disposes the widget.  It is not exactly", "+\t*  clear how this can happen.  PeekMessage() is only looking for", "+\t*  WM_DEADCHAR.  It is not dispatching any message that it finds", "+\t*  or removing any message from the queue.  Cross-thread messages", "+\t*  are disabled.  The fix is to check for a disposed widget and", "+\t*  return without calling the window proc.", "+\t*/", "+\tif (isDisposed ()) return LRESULT.ONE;", "+\t", "+\t/*"]}], "num": 55802}
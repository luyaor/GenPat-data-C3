{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "efc162dd489c292e95a8954acbb3a642", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "863e317f12c219124892f5dedaca2d72", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Display.java", "commitBeforeChange": "6350427271e30cbd3731a00deddf1a1c7533abaf", "commitAfterChange": "2527982ac068176e33d2c5edefd4e2394a3a98cc", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  public void test_LongEventWatchdog()", "signatureAfterChange": "  public void test_LongEventWatchdog()", "diff": ["-\t\tfinal boolean[] eventSent = {false};", "-\t\tILongEventWatchdog callback = new ILongEventWatchdog() {", "-\t\t\tpublic void beginEvent(int depth) {", "+\t\tListener preListener = new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "-", "-\t\t\tpublic void onLongEvent(LongEventInfo event) {", "-\t\t\t\teventSent[0] = true;", "-\t\t\t}", "-", "-\t\t\tpublic void endEvent(int depth) {", "+\t\t};", "+\t\t", "+\t\tListener postListener = new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "-", "-\t\tdisplay.getSynchronizer().registerLongDispatchWatchdogCallback(callback, DURATION_MILLIS);", "-", "+\t\t", "+\t\tdisplay.addListener(SWT.PreEvent, preListener);", "+\t\tdisplay.addListener(SWT.PostEvent, postListener);", "+\t\t", "-\t\t// Detect falling edge of readAndDispatch's return value. It must always go high at least", "-\t\t// once for the runnable this test asyncExec'd.", "-\t\tboolean prevMoreToDispatch = false;", "-\t\tboolean moreToDispatch = false;", "-", "-\t\twhile (!eventHasRun[0] && !(prevMoreToDispatch && !moreToDispatch)) {", "-\t\t\tprevMoreToDispatch = moreToDispatch;", "-\t\t\tmoreToDispatch = display.readAndDispatch();", "-\t\t\tassertTrue(beginCalled[0] == endCalled[0]);", "-\t\t\tassertTrue(!eventHasRun[0] || eventSent[0]); // eventHasRun[0] -> eventSent[0]", "+\t\twhile (display.readAndDispatch()) {", "-", "-\t\tdisplay.getSynchronizer().unregisterLongDispatchWatchdogCallback(callback);", "+\t\t", "+\t\tdisplay.removeListener(SWT.PreEvent, preListener);", "+\t\tdisplay.removeListener(SWT.PostEvent, preListener);", "+\t\t", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b0d6c7faa1cdf7e78bca6f9755cd6a6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 33, "signatureBeforeChange": " public Point getLocation ()", "signatureAfterChange": "  public Point getLocation ()", "diff": ["- */", "+", "-\tint topHandle= topHandle ();", "-\tMacRect br= new MacRect();", "-    if (MacUtil.USE_FRAME) {", "-\t\tinternalGetControlBounds(topHandle, br);", "-\t\treturn br.getLocation();", "-    } else {", "-\t\tshort[] bounds= br.getData();", "-\t\tshort[] pbounds= new short[4];", "-\t\tinternalGetControlBounds(topHandle, br);", "-\t\tOS.GetControlBounds(parent.handle, pbounds);", "-\t\treturn new Point(bounds[1]-pbounds[1], bounds[0]-pbounds[0]);", "-    }", "+\tRect rect = getControlBounds (topHandle ());", "+\treturn new Point (rect.left, rect.top);"]}], "num": 25157}
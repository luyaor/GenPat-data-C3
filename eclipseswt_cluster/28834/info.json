{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f71444a9fa2929278ffe68ce2fa07da3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e443886e848ac54ce82fb80ddd3b9fba", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "bd7861d3f10ae5263261fadc72efba55b44f5f8c", "commitAfterChange": "5bfbfd6550d25db2695eb695eae08fb135ba96b1", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void initNative(String filename)", "signatureAfterChange": "  void initNative(String filename)", "diff": ["+\t\t\tboolean hasAlpha = OS.gdk_pixbuf_get_has_alpha(pixbuf);", "-\t\t\t\tint cairoStride = Cairo.cairo_format_stride_for_width(Cairo.CAIRO_FORMAT_ARGB32, width);", "+\t\t\t\tint format = hasAlpha ? Cairo.CAIRO_FORMAT_ARGB32 : Cairo.CAIRO_FORMAT_RGB24;", "+\t\t\t\tint cairoStride = Cairo.cairo_format_stride_for_width(format, width);", "-\t\t\t\tsurface = Cairo.cairo_image_surface_create_for_data(surfaceData, Cairo.CAIRO_FORMAT_ARGB32, width, height, cairoStride);", "+\t\t\t\tsurface = Cairo.cairo_image_surface_create_for_data(surfaceData, format, width, height, cairoStride);", "-\t\t\t\tbyte[] line = new byte[Math.max(cairoStride, stride)];", "+\t\t\t\tbyte[] line = new byte[stride];", "-\t\t\t\tfor (int y = 0; y < height; y++) {", "-\t\t\t\t\tOS.memmove(line, pixels + (y * stride), stride);", "-\t\t\t\t\tfor (int x = 0, offset = 0; x < width; x++, offset += 4) {", "-\t\t\t\t\t\tint a = line[offset + 3] & 0xFF;", "-\t\t\t\t\t\tint r = ((line[offset + 0] & 0xFF) * a) + 128;", "-\t\t\t\t\t\tr = (r + (r >> 8)) >> 8;", "-\t\t\t\t\t\tint g = ((line[offset + 1] & 0xFF) * a) + 128;", "-\t\t\t\t\t\tg = (g + (g >> 8)) >> 8;", "-\t\t\t\t\t\tint b = ((line[offset + 2] & 0xFF) * a) + 128;", "-\t\t\t\t\t\tb = (b + (b >> 8)) >> 8;", "-\t\t\t\t\t\tline[offset + oa] = (byte)a;", "-\t\t\t\t\t\tline[offset + or] = (byte)r;", "-\t\t\t\t\t\tline[offset + og] = (byte)g;", "-\t\t\t\t\t\tline[offset + ob] = (byte)b;", "+\t\t\t\tif (hasAlpha) {", "+\t\t\t\t\tbyte[] cairoLine = new byte[cairoStride];", "+\t\t\t\t\tfor (int y = 0; y < height; y++) {", "+\t\t\t\t\t\tOS.memmove(line, pixels + (y * stride), stride);", "+\t\t\t\t\t\tfor (int x = 0, offset = 0; x < width; x++, offset += 4) {", "+\t\t\t\t\t\t\tint a = line[offset + 3] & 0xFF;", "+\t\t\t\t\t\t\tint r = ((line[offset + 0] & 0xFF) * a) + 128;", "+\t\t\t\t\t\t\tr = (r + (r >> 8)) >> 8;", "+\t\t\t\t\t\t\tint g = ((line[offset + 1] & 0xFF) * a) + 128;", "+\t\t\t\t\t\t\tg = (g + (g >> 8)) >> 8;", "+\t\t\t\t\t\t\tint b = ((line[offset + 2] & 0xFF) * a) + 128;", "+\t\t\t\t\t\t\tb = (b + (b >> 8)) >> 8;", "+\t\t\t\t\t\t\tcairoLine[offset + oa] = (byte)a;", "+\t\t\t\t\t\t\tcairoLine[offset + or] = (byte)r;", "+\t\t\t\t\t\t\tcairoLine[offset + og] = (byte)g;", "+\t\t\t\t\t\t\tcairoLine[offset + ob] = (byte)b;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.memmove(data + (y * cairoStride), cairoLine, cairoStride);", "-\t\t\t\t\tOS.memmove(data + (y * cairoStride), line, cairoStride);", "+\t\t\t\t} else {", "+\t\t\t\t\tbyte[] cairoLine = new byte[cairoStride];", "+\t\t\t\t\tfor (int y = 0; y < height; y++) {", "+\t\t\t\t\t\tOS.memmove(line, pixels + (y * stride), stride);", "+\t\t\t\t\t\tfor (int x = 0, offset = 0, cairoOffset = 0; x < width; x++, offset += 3, cairoOffset += 4) {", "+\t\t\t\t\t\t\tint r = line[offset + 0] & 0xFF;", "+\t\t\t\t\t\t\tint g = line[offset + 1] & 0xFF;", "+\t\t\t\t\t\t\tint b = line[offset + 2] & 0xFF;", "+\t\t\t\t\t\t\tcairoLine[cairoOffset + or] = (byte)r;", "+\t\t\t\t\t\t\tcairoLine[cairoOffset + og] = (byte)g;", "+\t\t\t\t\t\t\tcairoLine[cairoOffset + ob] = (byte)b;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.memmove(data + (y * cairoStride), cairoLine, cairoStride);", "+\t\t\t\t\t}", "-\t\t\t\tboolean hasAlpha = OS.gdk_pixbuf_get_has_alpha(pixbuf);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c18c527336db85a6ea2062030126f06", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "345d26d0b7dcabbbf25af6157a029fcc5e7866eb", "commitAfterChange": "e4496f774aefe96ea3b0a264fd8b918ee1e8cd04", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  static int create32bitDIB (Image image)", "signatureAfterChange": "  static int create32bitDIB (Image image)", "diff": ["-\t\t\t\tsrcData [dp + 3] = (byte)alpha;", "-\t\t\t\tif (srcData [dp + 3] == 0) srcData [dp + 0] = srcData [dp + 1] = srcData [dp + 2] = 0;", "+\t\t\t\tint r = ((srcData[dp + 0] & 0xFF) * alpha) + 128;", "+\t\t\t\tr = (r + (r >> 8)) >> 8;", "+\t\t\t\tint g = ((srcData[dp + 1] & 0xFF) * alpha) + 128;", "+\t\t\t\tg = (g + (g >> 8)) >> 8;", "+\t\t\t\tint b = ((srcData[dp + 2] & 0xFF) * alpha) + 128;", "+\t\t\t\tb = (b + (b >> 8)) >> 8;", "+\t\t\t\tsrcData[dp+0] = (byte)r;", "+\t\t\t\tsrcData[dp+1] = (byte)g;", "+\t\t\t\tsrcData[dp+2] = (byte)b;", "+\t\t\t\tsrcData[dp+3] = (byte)alpha;", "-\t\t\t\tsrcData [dp + 3] = alphaData [ap++];", "-\t\t\t\tif (srcData [dp + 3] == 0) srcData [dp + 0] = srcData [dp + 1] = srcData [dp + 2] = 0;", "+\t\t\t\tint a = alphaData[ap++] & 0xFF;", "+\t\t\t\tint r = ((srcData[dp + 0] & 0xFF) * a) + 128;", "+\t\t\t\tr = (r + (r >> 8)) >> 8;", "+\t\t\t\tint g = ((srcData[dp + 1] & 0xFF) * a) + 128;", "+\t\t\t\tg = (g + (g >> 8)) >> 8;", "+\t\t\t\tint b = ((srcData[dp + 2] & 0xFF) * a) + 128;", "+\t\t\t\tb = (b + (b >> 8)) >> 8;", "+\t\t\t\tsrcData[dp+0] = (byte)r;", "+\t\t\t\tsrcData[dp+1] = (byte)g;", "+\t\t\t\tsrcData[dp+2] = (byte)b;", "+\t\t\t\tsrcData[dp+3] = (byte)a;"]}], "num": 28834}
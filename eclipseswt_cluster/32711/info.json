{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "273c12fb4e499ab08dd93b465e8709fd", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da10dec54eb658dc92b7fc448b17902d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT AWT/cocoa/org/eclipse/swt/awt/SWT_AWT.java", "commitBeforeChange": "a4b9a6829a0560da22fad24a26489669262a4881", "commitAfterChange": "bd52a4082739e315645298860f2c48361efabf9b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic static Frame new_Frame(final Composite parent)", "signatureAfterChange": " \tpublic static Frame new_Frame(final Composite parent)", "diff": ["+\t\tinitializeSwing();", "+\t\tframe.addNotify();", "+\t\t", "-\t\tListener listener = new Listener() {", "-\t\t\tpublic void handleEvent(Event e) {", "+\t\t/* Forward the iconify and deiconify events */", "+\t\tfinal Listener shellListener = new Listener () {", "+\t\t\tpublic void handleEvent (Event e) {", "-\t\t\t\t\tcase SWT.Dispose: {", "-\t\t\t\t\t\tparent.setVisible(false);", "+\t\t\t\t\tcase SWT.Deiconify:", "-\t\t\t\t\t\t\t\tframe.dispose ();", "+\t\t\t\t\t\t\t\tframe.dispatchEvent (new WindowEvent (frame, WindowEvent.WINDOW_DEICONIFIED));", "-\t\t\t\t\t}", "+\t\t\t\t\tcase SWT.Iconify:", "+\t\t\t\t\t\tEventQueue.invokeLater(new Runnable () {", "+\t\t\t\t\t\t\tpublic void run () {", "+\t\t\t\t\t\t\t\tframe.dispatchEvent (new WindowEvent (frame, WindowEvent.WINDOW_ICONIFIED));", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t});", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t};", "+\t\tShell shell = parent.getShell ();", "+\t\tshell.addListener (SWT.Deiconify, shellListener);", "+\t\tshell.addListener (SWT.Iconify, shellListener);", "+\t\t", "+\t\t/*", "+\t\t * Generate the appropriate events to activate and deactivate", "+\t\t * the embedded frame. This is needed in order to make keyboard", "+\t\t * focus work properly for lightweights.", "+\t\t */", "+\t\tListener listener = new Listener () {", "+\t\t\tpublic void handleEvent (Event e) {", "+\t\t\t\tswitch (e.type) {", "+\t\t\t\t\tcase SWT.Dispose:", "+\t\t\t\t\t\tShell shell = parent.getShell ();", "+\t\t\t\t\t\tshell.removeListener (SWT.Deiconify, shellListener);", "+\t\t\t\t\t\tshell.removeListener (SWT.Iconify, shellListener);", "+\t\t\t\t\t\tparent.setVisible(false);", "+\t\t\t\t\t\tEventQueue.invokeLater(new Runnable () {", "+\t\t\t\t\t\t\tpublic void run () {", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tframe.dispose ();", "+\t\t\t\t\t\t\t\t} catch (Throwable e) {}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t});", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase SWT.FocusIn:", "+\t\t\t\t\t\tEventQueue.invokeLater(new Runnable () {", "+\t\t\t\t\t\t\tpublic void run () {", "+\t\t\t\t\t\t\t\tif (frame.isActive()) return;", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tClass clazz = frame.getClass();", "+\t\t\t\t\t\t\t\t\tMethod method = clazz.getMethod(\"synthesizeWindowActivation\", new Class[]{boolean.class});", "+\t\t\t\t\t\t\t\t\tif (method != null) method.invoke(frame, new Object[]{new Boolean(true)});", "+\t\t\t\t\t\t\t\t} catch (Throwable e) {e.printStackTrace();}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t});", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase SWT.Deactivate:", "+\t\t\t\t\t\tEventQueue.invokeLater(new Runnable () {", "+\t\t\t\t\t\t\tpublic void run () {", "+\t\t\t\t\t\t\t\tif (!frame.isActive()) return;", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tClass clazz = frame.getClass();", "+\t\t\t\t\t\t\t\t\tMethod method = clazz.getMethod(\"synthesizeWindowActivation\", new Class[]{boolean.class});", "+\t\t\t\t\t\t\t\t\tif (method != null) method.invoke(frame, new Object[]{new Boolean(false)});", "+\t\t\t\t\t\t\t\t} catch (Throwable e) {e.printStackTrace();}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t});", "+\t\t\t\t\t\tbreak;", "-\t\tparent.addListener(SWT.Dispose, listener);", "+\t\tparent.addListener (SWT.FocusIn, listener);", "+\t\tparent.addListener (SWT.Deactivate, listener);", "+\t\tparent.addListener (SWT.Dispose, listener);", "+\t\t", "+\t\tparent.getDisplay().asyncExec(new Runnable() {", "+\t\t\tpublic void run () {", "+\t\t\t\tif (parent.isDisposed()) return;", "+\t\t\t\tfinal Rectangle clientArea = parent.getClientArea();", "+\t\t\t\tEventQueue.invokeLater(new Runnable () {", "+\t\t\t\t\tpublic void run () {", "+\t\t\t\t\t\tframe.setSize (clientArea.width, clientArea.height);", "+\t\t\t\t\t\tframe.validate();", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t// Bug in Cocoa AWT? For some reason the frame isn't showing up on first draw.", "+\t\t\t\t\t\t// Toggling visibility seems to be the only thing that works.", "+\t\t\t\t\t\tframe.setVisible(false);", "+\t\t\t\t\t\tframe.setVisible(true);", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t}", "+\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "790dc50cc6be1109726d7f9fba7e780d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT AWT/win32/org/eclipse/swt/awt/SWT_AWT.java", "commitBeforeChange": "9590c886e5aa5dfa6590d62b81b13c52ec4149a6", "commitAfterChange": "eff4a91fc5004d296b6e06870a24dbbbada441e2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public static Frame new_Frame (final Composite parent)", "signatureAfterChange": " public static Frame new_Frame (final Composite parent)", "diff": ["-\tparent.addListener (SWT.Activate, new Listener () {", "+\tListener listener = new Listener () {", "-\t\t\tEventQueue.invokeLater(new Runnable () {", "-\t\t\t\tpublic void run () {", "-\t\t\t\t\tif (Library.JAVA_VERSION < Library.JAVA_VERSION(1, 4, 0)) {", "-\t\t\t\t\t\tframe.dispatchEvent (new WindowEvent (frame, WindowEvent.WINDOW_ACTIVATED));", "-\t\t\t\t\t\tframe.dispatchEvent (new FocusEvent (frame, FocusEvent.FOCUS_GAINED));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tframe.dispatchEvent (new WindowEvent (frame, WindowEvent.WINDOW_ACTIVATED));", "-\t\t\t\t\t\tframe.dispatchEvent (new WindowEvent (frame, WindowEvent.WINDOW_GAINED_FOCUS));", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t});", "-\t\t}", "-\t});", "-\tparent.addListener (SWT.Deactivate, new Listener () {", "-\t\tpublic void handleEvent (Event e) {", "-\t\t\tEventQueue.invokeLater(new Runnable () {", "-\t\t\t\tpublic void run () {", "-\t\t\t\t\tif (Library.JAVA_VERSION < Library.JAVA_VERSION(1, 4, 0)) {", "-\t\t\t\t\t\tframe.dispatchEvent (new WindowEvent (frame, WindowEvent.WINDOW_DEACTIVATED));", "-\t\t\t\t\t\tframe.dispatchEvent (new FocusEvent (frame, FocusEvent.FOCUS_LOST));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tframe.dispatchEvent (new WindowEvent (frame, WindowEvent.WINDOW_LOST_FOCUS));", "-\t\t\t\t\t\tframe.dispatchEvent (new WindowEvent (frame, WindowEvent.WINDOW_DEACTIVATED));", "-\t\t\t\t\t}", "-\t\t\t\t\tif (Library.JAVA_VERSION >= Library.JAVA_VERSION(1, 4, 2)) {", "-\t\t\t\t\t\tif (menuSelectionManager != null && clearSelectionPath != null) {", "-\t\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\t\tclearSelectionPath.invoke(menuSelectionManager, new Object[0]);", "-\t\t\t\t\t\t\t} catch (Throwable e) {}", "+\t\t\tswitch (e.type) {", "+\t\t\t\tcase SWT.Dispose:", "+\t\t\t\t\tparent.setVisible(false);", "+\t\t\t\t\tEventQueue.invokeLater(new Runnable () {", "+\t\t\t\t\t\tpublic void run () {", "+\t\t\t\t\t\t\tframe.dispose ();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t});", "+\t\t\t\t\t});", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase SWT.Activate:", "+\t\t\t\t\tEventQueue.invokeLater(new Runnable () {", "+\t\t\t\t\t\tpublic void run () {", "+\t\t\t\t\t\t\tif (Library.JAVA_VERSION < Library.JAVA_VERSION(1, 4, 0)) {", "+\t\t\t\t\t\t\t\tframe.dispatchEvent (new WindowEvent (frame, WindowEvent.WINDOW_ACTIVATED));", "+\t\t\t\t\t\t\t\tframe.dispatchEvent (new FocusEvent (frame, FocusEvent.FOCUS_GAINED));", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tframe.dispatchEvent (new WindowEvent (frame, WindowEvent.WINDOW_ACTIVATED));", "+\t\t\t\t\t\t\t\tframe.dispatchEvent (new WindowEvent (frame, WindowEvent.WINDOW_GAINED_FOCUS));", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t});", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase SWT.Deactivate:", "+\t\t\t\t\tEventQueue.invokeLater(new Runnable () {", "+\t\t\t\t\t\tpublic void run () {", "+\t\t\t\t\t\t\tif (Library.JAVA_VERSION < Library.JAVA_VERSION(1, 4, 0)) {", "+\t\t\t\t\t\t\t\tframe.dispatchEvent (new WindowEvent (frame, WindowEvent.WINDOW_DEACTIVATED));", "+\t\t\t\t\t\t\t\tframe.dispatchEvent (new FocusEvent (frame, FocusEvent.FOCUS_LOST));", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tframe.dispatchEvent (new WindowEvent (frame, WindowEvent.WINDOW_LOST_FOCUS));", "+\t\t\t\t\t\t\t\tframe.dispatchEvent (new WindowEvent (frame, WindowEvent.WINDOW_DEACTIVATED));", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t});", "+\t\t\t\t\tbreak;", "+\t\t\t}", "-\t});", "-", "-\tparent.addListener (SWT.Dispose, new Listener () {", "-\t\tpublic void handleEvent (Event event) {", "-\t\t\tparent.setVisible(false);", "-\t\t\tEventQueue.invokeLater(new Runnable () {", "-\t\t\t\tpublic void run () {", "-\t\t\t\t\tframe.dispose ();", "-\t\t\t\t}", "-\t\t\t});", "-\t\t}", "-\t});", "+\t};", "+\tparent.addListener (SWT.Activate, listener);", "+\tparent.addListener (SWT.Deactivate, listener);", "+\tparent.addListener (SWT.Dispose, listener);", "+\t"]}], "num": 32711}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "73b697ddf6ad032b75e2a5297610894c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1c9726ac39f25bbf6c13350554356e2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "c6f6287d8b8fdc02e78b208f87146aa3823ab38c", "commitAfterChange": "eae5c56386c6900bfd7feddaea222ffeb4fcdf2a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 128, "signatureBeforeChange": "\r int [] getStyleOffsets (String line, int lineOffset)", "signatureAfterChange": "\r int [] getBidiSegmentsCompatibility(String line, int lineOffset)", "diff": ["-}\r", "-int [] getStyleOffsets (String line, int lineOffset) {\r", "-\tStyledTextEvent event = getLineStyleData(lineOffset, line);\r", "-\tStyleRange [] styles = new StyleRange [0];\r", "-\tif (event != null) {\r", "-\t\tstyles = event.styles;\r", "-\t}\r", "-\tif (styles.length == 0 || !bidiColoring) {\r", "-\t\treturn new int[] {0, line.length()};\r", "-\t}\r", "-\r", "-\tint k=0, count = 1;\r", "-\twhile (k < styles.length && styles[k].start == 0 && styles[k].length == line.length()) {\r", "-\t\tk++;\r", "-\t}\r", "-\tint[] offsets = new int[(styles.length - k) * 2 + 2];\r", "-\tfor (int i = k; i < styles.length; i++) {\r", "-\t\tStyleRange style = styles[i];\r", "-\t\tint styleLineStart = Math.max(style.start - lineOffset, 0);\r", "-\t\tint styleLineEnd = Math.max(style.start + style.length - lineOffset, styleLineStart);\r", "-\t\tstyleLineEnd = Math.min (styleLineEnd, line.length ());\r", "-\t\tif (i > 0 && count > 1 &&\r", "-\t\t\t((styleLineStart >= offsets[count-2] && styleLineStart <= offsets[count-1]) ||\r", "-\t\t\t (styleLineEnd >= offsets[count-2] && styleLineEnd <= offsets[count-1])) &&\r", "-\t\t\t style.similarTo(styles[i-1])) {\r", "-\t\t\toffsets[count-2] = Math.min(offsets[count-2], styleLineStart);\r", "-\t\t\toffsets[count-1] = Math.max(offsets[count-1], styleLineEnd);\r", "-\t\t} else {\r", "-\t\t\tif (styleLineStart > offsets[count - 1]) {\r", "-\t\t\t\toffsets[count] = styleLineStart;\r", "-\t\t\t\tcount++;\r", "-\t\t\t}\r", "-\t\t\toffsets[count] = styleLineEnd;\r", "-\t\t\tcount++;\r", "-\t\t}\r", "-\t}\r", "-\t// add offset for last non-colored segment in line, if any\r", "-\tif (line.length() > offsets[count-1]) {\r", "-\t\toffsets [count] = line.length();\r", "-\t\tcount++;\r", "-\t}\r", "-\tif (count == offsets.length)\r", "-\t\treturn offsets;\r", "-\tint [] result = new int [count];\r", "-\tSystem.arraycopy (offsets, 0, result, 0, count);\r", "-\treturn result;\r", "-}\r", "+ */\r", "+int [] getBidiSegmentsCompatibility(String line, int lineOffset) {\r", "+\tStyledTextEvent event = getLineStyleData(lineOffset, line);\r", "+\tStyleRange [] styles = new StyleRange [0];\r", "+\tif (event != null) {\r", "+\t\tstyles = event.styles;\r", "+\t}\r", "+\tif (styles.length == 0 || !bidiColoring) {\r", "+\t\treturn new int[] {0, line.length()};\r", "+\t}\r", "+\r", "+\tint k=0, count = 1;\r", "+\twhile (k < styles.length && styles[k].start == 0 && styles[k].length == line.length()) {\r", "+\t\tk++;\r", "+\t}\r", "+\tint[] offsets = new int[(styles.length - k) * 2 + 2];\r", "+\tfor (int i = k; i < styles.length; i++) {\r", "+\t\tStyleRange style = styles[i];\r", "+\t\tint styleLineStart = Math.max(style.start - lineOffset, 0);\r", "+\t\tint styleLineEnd = Math.max(style.start + style.length - lineOffset, styleLineStart);\r", "+\t\tstyleLineEnd = Math.min (styleLineEnd, line.length ());\r", "+\t\tif (i > 0 && count > 1 &&\r", "+\t\t\t((styleLineStart >= offsets[count-2] && styleLineStart <= offsets[count-1]) ||\r", "+\t\t\t (styleLineEnd >= offsets[count-2] && styleLineEnd <= offsets[count-1])) &&\r", "+\t\t\t style.similarTo(styles[i-1])) {\r", "+\t\t\toffsets[count-2] = Math.min(offsets[count-2], styleLineStart);\r", "+\t\t\toffsets[count-1] = Math.max(offsets[count-1], styleLineEnd);\r", "+\t\t} else {\r", "+\t\t\tif (styleLineStart > offsets[count - 1]) {\r", "+\t\t\t\toffsets[count] = styleLineStart;\r", "+\t\t\t\tcount++;\r", "+\t\t\t}\r", "+\t\t\toffsets[count] = styleLineEnd;\r", "+\t\t\tcount++;\r", "+\t\t}\r", "+\t}\r", "+\t// add offset for last non-colored segment in line, if any\r", "+\tif (line.length() > offsets[count-1]) {\r", "+\t\toffsets [count] = line.length();\r", "+\t\tcount++;\r", "+\t}\t\t\r", "+\tif (count == offsets.length) {\r", "+\t\treturn offsets;\r", "+\t}\r", "+\tint [] result = new int [count];\r", "+\tSystem.arraycopy (offsets, 0, result, 0, count);\r", "+\treturn result;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db5392a018c59f993d3b9616148ae27d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextRenderer.java", "commitBeforeChange": "2a453289bd44f7a775eb792bac5c0306a39048d4", "commitAfterChange": "00044d960d22ae0ff107fa60b140159a76aa4f68", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " TextLayout getTextLayout(String line, int lineOffset, StyledTextEvent event)", "signatureAfterChange": " TextLayout getTextLayout(String line, int lineOffset)", "diff": ["-TextLayout getTextLayout(String line, int lineOffset, StyledTextEvent event) {", "-\tTextLayout layout = new TextLayout(device);", "+TextLayout getTextLayout(String line, int lineOffset) {", "+\tint lineIndex = getContent().getLineAtOffset(lineOffset);", "+\tTextLayout layout = createTextLayout(lineIndex);", "+\tStyledTextEvent event = getLineStyleData(lineOffset, line);", "+\tint lastOffset = 0;", "-\t\tint lastOffset = 0;", "-\t\t\t// do not create unnecessary style in the text layout (optimization only)", "-\t\t\t", "-\t\t\tif (lineOffset > style.start) {//style starts in a previous line", "+\t\t\tif (lineOffset > style.start) {", "-\t\t\t\tend = Math.min (length, style.length - lineOffset + style.start);//consider only length in the current line", "+\t\t\t\tend = Math.min (length, style.length - lineOffset + style.start);", "-\t\t\tif (lastOffset >= end) continue;//do not overlap style", "-\t\t\tTextStyle textStyle = null;", "-\t\t\tfor (int i = 0; i < styleIndex; i++) {", "-\t\t\t\tif (style.similarTo(styles[i])) {", "-\t\t\t\t\tif (styles[i].textStyle != null) {", "-\t\t\t\t\t\ttextStyle = styles[i].textStyle;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (textStyle == null) {", "-\t\t\t\tFont font = style.fontStyle == SWT.NORMAL ? regularFont : boldFont;", "-\t\t\t\ttextStyle = new TextStyle(device, font, style.foreground, style.background);", "-\t\t\t\tstyle.textStyle = textStyle;", "-\t\t\t}", "+\t\t\tif (lastOffset != start) {", "+\t\t\t\tlayout.setStyle(null, lastOffset, start - 1);\t\t\t\t", "+\t\t\t}\t", "+\t\t\tFont font = style.fontStyle == SWT.NORMAL ? regularFont : boldFont;", "+\t\t\tTextStyle textStyle = new TextStyle(font, style.foreground, style.background);", "+\tif (lastOffset != length) layout.setStyle(null, lastOffset, length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8caae7f52f319882fa16bd85b2aa16f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextRenderer.java", "commitBeforeChange": "5544ce1d748561f71c4f1d1997c431f82e5c4c86", "commitAfterChange": "24e0049851c0d0a09cb9f25e5892d112e2936fed", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 26, "signatureBeforeChange": " private StyleRange[] getFontStyleRanges(StyleRange[] styles, int lineOffset, int lineLength)", "signatureAfterChange": " TextLayout getTextLayout(String line, int lineOffset, StyledTextEvent event)", "diff": ["- */", "-private StyleRange[] getFontStyleRanges(StyleRange[] styles, int lineOffset, int lineLength) {", "-\tint count = 0;", "-\tStyleRange[] ranges = null;", "-\t", "-\tif (styles == null) {", "-\t\treturn null;", "-\t}", "-\t// figure out the number of ranges with font styles", "-\tfor (int i = 0; i < styles.length; i++) {", "-\t\tStyleRange style = styles[i];", "-\t\tif (style.start - lineOffset < lineLength) {", "-\t\t\tif (style.fontStyle == SWT.BOLD) {", "-\t\t\t\tcount++;", "-\t\t\t}", "-\t\t}", "-\t}", "-\t// get the style information", "-\tif (count > 0) {", "-\t\tranges = new StyleRange[count];", "-\t\tcount = 0;", "-\t\tfor (int i = 0; i < styles.length; i++) {", "-\t\t\tStyleRange style = styles[i];", "-\t\t\tint styleLineStart = style.start - lineOffset;", "-\t\t\tif (styleLineStart < lineLength) {\t\t\t", "-\t\t\t\tif (style.fontStyle == SWT.BOLD) {", "-\t\t\t\t\tStyleRange newStyle = new StyleRange();", "-\t\t\t\t\tnewStyle.start = Math.max(0, styleLineStart);", "-\t\t\t\t\tnewStyle.length = (Math.min(styleLineStart + style.length, lineLength)) - newStyle.start;", "-\t\t\t\t\tranges[count] = newStyle;", "-\t\t\t\t\tcount++;", "-\t\t\t\t}", "-\t\t\t}\t\t", "-\t\t}", "-\t}", "-\treturn ranges;", "+ */", "+TextLayout getTextLayout(String line, int lineOffset, StyledTextEvent event) {", "+\tTextLayout layout = new TextLayout(device);", "+\tlayout.setFont(regularFont);", "+\tlayout.setText(line);", "+\tlayout.setOrientation(getOrientation());", "+\tlayout.setTabs(new int[]{tabWidth});", "+\tint length = line.length();", "+\tStyleRange[] styles = event != null ? event.styles : null;", "+\tif (styles != null) {", "+\t\tint lastOffset = 0;", "+\t\tfor (int styleIndex = 0; styleIndex < styles.length; styleIndex++) {", "+\t\t\tStyleRange style = styles[styleIndex];", "+\t\t\t// do not create unnecessary style in the text layout (optimization only)", "+\t\t\tif (style.isUnstyled()) continue;", "+\t\t\t", "+\t\t\tint start, end; ", "+\t\t\tif (lineOffset > style.start) {//style starts in a previous line", "+\t\t\t\tstart = 0;", "+\t\t\t\tend = Math.min (length, style.length - lineOffset + style.start);//consider only length in the current line", "+\t\t\t} else {", "+\t\t\t\tstart = style.start - lineOffset;", "+\t\t\t\tend = Math.min(length, start + style.length);", "+\t\t\t}", "+\t\t\tif (start >= length) break;", "+\t\t\tif (lastOffset >= end) continue;//do not overlap style", "+\t\t\tTextStyle textStyle = null;", "+\t\t\tfor (int i = 0; i < styleIndex; i++) {", "+\t\t\t\tif (style.similarTo(styles[i])) {", "+\t\t\t\t\tif (styles[i].textStyle != null) {", "+\t\t\t\t\t\ttextStyle = styles[i].textStyle;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (textStyle == null) {", "+\t\t\t\tFont font = style.fontStyle == SWT.NORMAL ? regularFont : boldFont;", "+\t\t\t\ttextStyle = new TextStyle(device, font, style.foreground, style.background);", "+\t\t\t\tstyle.textStyle = textStyle;", "+\t\t\t}", "+\t\t\tlayout.setStyle(textStyle, start, end - 1);", "+\t\t\tlastOffset = end;", "+\t\t}", "+\t}", "+\treturn layout;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4439634cfaac8bebf955848b4dc2a2a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 19, "signatureBeforeChange": " \tvoid writeStyledLine(String line, int lineOffset, StyleRange[] styles, Color lineBackground)", "signatureAfterChange": " \tvoid writeStyledLine(String line, int lineOffset, int ranges[], StyleRange[] styles, Color lineBackground, int indent, int alignment, boolean justify)", "diff": ["-\tvoid writeStyledLine(String line, int lineOffset, StyleRange[] styles, Color lineBackground) {", "+\tvoid writeStyledLine(String line, int lineOffset, int ranges[], StyleRange[] styles, Color lineBackground, int indent, int alignment, boolean justify) {", "-\t\tint lineIndex;", "-\t\tint copyEnd;", "-\t\tint startOffset = getStart();\t\t", "-\t\tint endOffset = startOffset + super.getCharCount();", "-\t\tint lineEndOffset = Math.min(lineLength, endOffset - lineOffset);", "+\t\tint startOffset = getStart();", "+\t\tif (writeOffset >= lineLength) return;", "+\t\tint lineIndex = Math.max(0, writeOffset);", "+\t\t\t", "+\t\twrite(\"\\\\fi\");", "+\t\twrite(indent);", "+\t\tswitch (alignment) {", "+\t\t\tcase SWT.LEFT: write(\"\\\\ql\"); break;", "+\t\t\tcase SWT.CENTER: write(\"\\\\qc\"); break;", "+\t\t\tcase SWT.RIGHT: write(\"\\\\qr\"); break;", "+\t\t}", "+\t\tif (justify) write(\"\\\\qj\");", "-\t\tif (writeOffset >= line.length()) {", "-\t\t\treturn;\t\t\t\t\t// whole line is outside write range", "-\t\t}", "-\t\telse", "-\t\tif (writeOffset > 0) {", "-\t\t\tlineIndex = writeOffset;\t\t// line starts before RTF write start", "-\t\t}", "-\t\telse {", "-\t\t\tlineIndex = 0;", "-\t\t}", "-\t\tfor (int i = 0; i < styles.length; i++) {\t\t", "+\t\tint endOffset = startOffset + super.getCharCount();", "+\t\tint lineEndOffset = Math.min(lineLength, endOffset - lineOffset);", "+\t\tfor (int i = 0; i < styles.length; i++) {", "-\t\t\tint start = style.start - lineOffset;", "-\t\t\tint end = start + style.length;", "-\t\t\tint colorIndex;", "+\t\t\tint start, end;", "+\t\t\tif (ranges != null) {", "+\t\t\t\tstart = ranges[i << 1] - lineOffset;", "+\t\t\t\tend = start + ranges[(i << 1) + 1];", "+\t\t\t} else {", "+\t\t\t\tstart = style.start - lineOffset;", "+\t\t\t\tend = start + style.length;", "+\t\t\t}", "-\t\t\tif (lineIndex < start) { ", "+\t\t\tif (lineIndex < start) {", "-\t\t\tcolorIndex = getColorIndex(style.background, DEFAULT_BACKGROUND);", "+\t\t\tint colorIndex = getColorIndex(style.background, DEFAULT_BACKGROUND);", "-\t\t\tif ((style.fontStyle & SWT.BOLD) != 0) {", "-\t\t\t\twrite(\"\\\\b\"); ", "-\t\t\t}", "-\t\t\tif ((style.fontStyle & SWT.ITALIC) != 0) {", "-\t\t\t\twrite(\"\\\\i\"); ", "+\t\t\tFont font = style.font;", "+\t\t\tif (font != null) {", "+\t\t\t\tint fontIndex = getFontIndex(font);", "+\t\t\t\twrite(\"\\\\f\");", "+\t\t\t\twrite(fontIndex);", "+\t\t\t\tFontData fontData = font.getFontData()[0];", "+\t\t\t\twrite(\"\\\\fs\");", "+\t\t\t\twrite(fontData.getHeight() * 2);", "+\t\t\t} else {", "+\t\t\t\tif ((style.fontStyle & SWT.BOLD) != 0) {", "+\t\t\t\t\twrite(\"\\\\b\"); ", "+\t\t\t\t}", "+\t\t\t\tif ((style.fontStyle & SWT.ITALIC) != 0) {", "+\t\t\t\t\twrite(\"\\\\i\"); ", "+\t\t\t\t}", "-\t\t\tcopyEnd = Math.min(end, lineEndOffset);", "+\t\t\tint copyEnd = Math.min(end, lineEndOffset);", "-\t\t\tif ((style.fontStyle & SWT.BOLD) != 0) {", "-\t\t\t\twrite(\"\\\\b0\"); ", "-\t\t\t}", "-\t\t\tif ((style.fontStyle & SWT.ITALIC) != 0) {", "-\t\t\t\twrite(\"\\\\i0\"); ", "+\t\t\tif (font == null) {", "+\t\t\t\tif ((style.fontStyle & SWT.BOLD) != 0) {", "+\t\t\t\t\twrite(\"\\\\b0\"); ", "+\t\t\t\t}", "+\t\t\t\tif ((style.fontStyle & SWT.ITALIC) != 0) {", "+\t\t\t\t\twrite(\"\\\\i0\"); ", "+\t\t\t\t}", "-\t\t\t}\t\t\t", "+\t\t\t}", "-\t\tif (lineBackground != null) {", "-\t\t\twrite(\"}\");", "-\t\t}", "+\t\tif (lineBackground != null) write(\"}\");"]}], "num": 27455}
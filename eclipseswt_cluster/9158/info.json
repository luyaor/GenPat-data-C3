{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "307475813bc928e2a4ebf545743c63b4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a32285f6576798776a2b4389c35b90c0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r void init (Device device, FontData fd)", "signatureAfterChange": "\r void init (Device device, FontData fd)", "diff": ["-\tbyte[] buffer = Converter.wcsToMbcs(null, fd.getXlfd(), true);\r", "-\tboolean warnings = device.getWarnings();\r", "-\tdevice.setWarnings(false);\r", "-\tint fontListEntry = OS.XmFontListEntryLoad(device.xDisplay, buffer, 0, OS.XmFONTLIST_DEFAULT_TAG);\r", "-\tdevice.setWarnings(warnings);\r", "+\tint xDisplay = device.xDisplay;\r", "+\tint fontStruct = loadFont(xDisplay, fd);\r", "+\tif (fontStruct == 0) {\r", "+\t\t/*\r", "+\t\t* If the desired font can not be loaded, the XLFD fields are wildcard\r", "+\t\t* in order to preserve the font style and height. If there is no\r", "+\t\t* font with the desired style and height, the slant, weight and points\r", "+\t\t* are wildcard in that order, until a font can be loaded.\r", "+\t\t*/\r", "+\t\tFontData newFD = new FontData();\r", "+\t\tnewFD.slant = fd.slant;\r", "+\t\tnewFD.weight = fd.weight;\r", "+\t\tnewFD.points = fd.points;\r", "+\t\tnewFD.characterSetName = fd.characterSetName;\r", "+\t\tif (newFD.characterSetName == null) {\r", "+\t\t\tnewFD.characterSetName = device.characterSetName;\r", "+\t\t}\r", "+\t\tnewFD.characterSetRegistry = fd.characterSetRegistry;\r", "+\t\tif (newFD.characterSetRegistry == null) {\r", "+\t\t\tnewFD.characterSetRegistry = device.characterSetRegistry;\r", "+\t\t}\r", "+\t\tfontStruct = matchFont(xDisplay, newFD);\r", "+\r", "+\t\t/* Failed to load any font. Use the system font. */\r", "+\t\tif (fontStruct == 0) {\r", "+\t\t\thandle = device.systemFont;\r", "+\t\t\tif (handle != 0) return;\r", "+\t\t}\r", "+\t}\r", "+\tif (fontStruct == 0) SWT.error(SWT.ERROR_NO_HANDLES);\r", "+\tint fontListEntry = OS.XmFontListEntryCreate(OS.XmFONTLIST_DEFAULT_TAG, OS.XmFONT_IS_FONT, fontStruct);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84ddf3d03a7dceda8cb8cd96795d831f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/gtk/org/eclipse/swt/printing/PrintDialog.java", "commitBeforeChange": "ca0a7dfbd72c3695b066c30bf3539bee466202cd", "commitAfterChange": "cb62adfcdcffb4abe98618644df77026ccb818e9", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public PrinterData open()", "signatureAfterChange": " public PrinterData open()", "diff": ["-\t\tif (printerData != null) {", "-\t\t\tif (printerData.otherData != null) {", "-\t\t\t\tPrinter.restore(printerData.otherData, settings, page_setup);", "-\t\t\t}", "-\t\t\t/* Set values of settings from PrinterData. */", "-\t\t\tPrinter.setScope(settings, printerData.scope, printerData.startPage, printerData.endPage);", "-\t\t\t//TODO: Should we look at printToFile, or driver/name for \"Print to File\", or both? (see gtk bug 345590)", "-\t\t\tif (printerData.printToFile) {", "-\t\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, printerData.fileName, true);", "-\t\t\t\tOS.gtk_print_settings_set(settings, OS.GTK_PRINT_SETTINGS_OUTPUT_URI, buffer);", "-\t\t\t}", "+\t\tif (printerData.otherData != null) {", "+\t\t\tPrinter.restore(printerData.otherData, settings, page_setup);", "+\t\t}", "+\t\t/* Set values of settings from PrinterData. */", "+\t\tPrinter.setScope(settings, printerData.scope, printerData.startPage, printerData.endPage);", "+\t\t//TODO: Should we look at printToFile, or driver/name for \"Print to File\", or both? (see gtk bug 345590)", "+\t\tif (printerData.printToFile && printerData.fileName != null) {", "+\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, printerData.fileName, true);", "+\t\t\tOS.gtk_print_settings_set(settings, OS.GTK_PRINT_SETTINGS_OUTPUT_URI, buffer);", "+\t\t}", "+\t\tif (printerData.driver != null && printerData.name != null && printerData.fileName != null) {", "-\t\t\tOS.gtk_print_settings_set_n_copies(settings, printerData.copyCount);", "-\t\t\tOS.gtk_print_settings_set_collate(settings, printerData.collate);\t", "+\t\tOS.gtk_print_settings_set_n_copies(settings, printerData.copyCount);", "+\t\tOS.gtk_print_settings_set_collate(settings, printerData.collate);", "+\t\tint orientation = printerData.orientation == PrinterData.LANDSCAPE ? OS.GTK_PAGE_ORIENTATION_LANDSCAPE : OS.GTK_PAGE_ORIENTATION_PORTRAIT;", "+\t\tOS.gtk_print_settings_set_orientation(settings, orientation);", "+\t\tOS.gtk_page_setup_set_orientation(page_setup, orientation);", "-\t\tPrinter.setScope(settings, scope, startPage, endPage);", "-\t\tif (printToFile) {", "+\t\tPrinter.setScope(settings, printerData.scope, printerData.startPage, printerData.endPage);", "+\t\tif (printerData.printToFile) {", "-\t\t\t\t\t\tscope = PrinterData.ALL_PAGES;", "+\t\t\t\t\t\tdata.scope = PrinterData.ALL_PAGES;", "-\t\t\t\t\t\tscope = PrinterData.PAGE_RANGE;", "+\t\t\t\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "-\t\t\t\t\t\tstartPage = min == Integer.MAX_VALUE ? 1 : min;", "-\t\t\t\t\t\tendPage = max == 0 ? 1 : max;", "+\t\t\t\t\t\tdata.startPage = min == Integer.MAX_VALUE ? 1 : min;", "+\t\t\t\t\t\tdata.endPage = max == 0 ? 1 : max;", "-\t\t\t\t\t\tscope = PrinterData.SELECTION;", "-\t\t\t\t\t\tstartPage = endPage = OS.gtk_print_unix_dialog_get_current_page(handle);", "+\t\t\t\t\t\tdata.scope = PrinterData.SELECTION;", "+\t\t\t\t\t\tdata.startPage = data.endPage = OS.gtk_print_unix_dialog_get_current_page(handle);", "-\t\t\t\tprintToFile = data.name.equals(\"Print to File\"); //$NON-NLS-1$", "-\t\t\t\tif (printToFile) {", "+\t\t\t\tdata.printToFile = data.name.equals(\"Print to File\"); //$NON-NLS-1$", "+\t\t\t\tif (data.printToFile) {", "-\t\t\t\tdata.scope = scope;", "-\t\t\t\tdata.startPage = startPage;", "-\t\t\t\tdata.endPage = endPage;", "-\t\t\t\tdata.printToFile = printToFile;", "+\t\t\t\tdata.orientation = OS.gtk_page_setup_get_orientation(page_setup) == OS.GTK_PAGE_ORIENTATION_LANDSCAPE ? PrinterData.LANDSCAPE : PrinterData.PORTRAIT;", "+\t\t\t\tprinterData = data;"]}], "num": 9158}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e353552d69ee6e09b0e9177bd88bf93", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "342831cd2bab744b38a885b4cf318dd4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "a95be7c50f695a73a58d9ded8bbfb5d9f9919f09", "commitAfterChange": "b1b0fd9b80ca15010164104d137cbaa93bd3ed64", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\t\tRectangle r = image.getBounds();", "+\t\t\tRectangle r = image.getBounds ();", "-\t\t\tFont font = getFont ();", "-\t\t\tFontInfo info = new FontInfo ();", "-\t\t\tOS.FetchFontInfo(font.id, font.size, font.style, info);", "-\t\t\tint fontHeight = info.ascent + info.descent;", "-\t\t\theight = fontHeight;", "-\t\t\t\tString string = Display.convertToLf (text);", "-\t\t\t\tint [] layout = new int [1];", "-\t\t\t\tOS.ATSUCreateTextLayout (layout);", "-\t\t\t\tif (layout [0] == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\tint [] atsuiStyle = new int [1];", "-\t\t\t\tOS.ATSUCreateStyle (atsuiStyle);", "-\t\t\t\tif (atsuiStyle [0] == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\tint ptr1 = OS.NewPtr (16);", "-\t\t\t\tOS.memcpy (ptr1, new int [] {font.handle}, 4); ", "-\t\t\t\tOS.memcpy (ptr1 + 4, new int [] {OS.X2Fix (font.size)}, 4);", "-\t\t\t\tint [] tags = new int [] {OS.kATSUFontTag, OS.kATSUSizeTag};", "-\t\t\t\tint [] sizes = new int [] {4, 4};", "-\t\t\t\tint [] values = new int [] {ptr1, ptr1 + 4};", "-\t\t\t\tOS.ATSUSetAttributes (atsuiStyle [0], tags.length, tags, sizes, values);", "-\t\t\t\tOS.DisposePtr (ptr1);", "-\t\t\t\tint ptr2 = OS.NewPtr (length * 2);", "-\t\t\t\tOS.memcpy (ptr2, string, length * 2);", "-\t\t\t\tOS.ATSUSetTextPointerLocation (layout [0], ptr2, 0, length, length);", "-\t\t\t\tOS.ATSUSetRunStyle (layout [0], atsuiStyle [0], 0, length);", "-\t\t\t\theight = 0;", "-\t\t\t\twidth = wHint != SWT.DEFAULT ? wHint : 0;", "-\t\t\t\tint [] breakCount = new int [1];", "-\t\t\t\tATSTrapezoid trapezoid = new ATSTrapezoid();", "-\t\t\t\tint start = 0, index = 0;", "-\t\t\t\tdo {", "-\t\t\t\t\tindex = string.indexOf ('\\n', start);", "-\t\t\t\t\tint end = index == -1 ? length : index;", "-\t\t\t\t\tif ((style & SWT.WRAP) != 0 && wHint != SWT.DEFAULT) {", "-\t\t\t\t\t\tOS.ATSUBatchBreakLines (layout [0], start, end - start, OS.X2Fix (wHint), breakCount);", "-\t\t\t\t\t\theight += (breakCount [0] + (index == -1 ? 1 : 0)) * fontHeight;", "+\t\t\t\tint [] ptr = new int [1];", "+\t\t\t\tOS.GetControlData (handle, (short) 0 , OS.kControlStaticTextCFStringTag, 4, ptr, null);", "+\t\t\t\tif (ptr [0] != 0) {", "+\t\t\t\t\torg.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\t\t\tif ((style & SWT.WRAP) != 0 && wHint != SWT.DEFAULT) ioBounds.h = (short) wHint;\t\t\t\t\t", "+\t\t\t\t\tif (font == null) {", "+\t\t\t\t\t\tOS.GetThemeTextDimensions (ptr [0], (short)OS.kThemePushButtonFont, OS.kThemeStateActive, ioBounds.h != 0, ioBounds, null);", "-\t\t\t\t\t\tOS.ATSUGetGlyphBounds (layout [0], 0, 0, start, end - start, (short) OS.kATSUseDeviceOrigins, 1, trapezoid, null);", "-\t\t\t\t\t\twidth = Math.max (width, OS.Fix2Long (trapezoid.upperRight_x) - OS.Fix2Long (trapezoid.upperLeft_x));", "-\t\t\t\t\t\theight += OS.Fix2Long (trapezoid.lowerRight_y) - OS.Fix2Long (trapezoid.upperRight_y);", "+\t\t\t\t\t\tint [] currentPort = new int [1];", "+\t\t\t\t\t\tOS.GetPort (currentPort);", "+\t\t\t\t\t\tOS.SetPortWindowPort (OS.GetControlOwner (handle));", "+\t\t\t\t\t\tOS.TextFont (font.id);", "+\t\t\t\t\t\tOS.TextFace (font.style);", "+\t\t\t\t\t\tOS.TextSize (font.size);", "+\t\t\t\t\t\tOS.GetThemeTextDimensions (ptr [0], (short) OS.kThemeCurrentPortFont, OS.kThemeStateActive, ioBounds.h != 0, ioBounds, null);", "+\t\t\t\t\t\tOS.SetPort (currentPort [0]);", "-\t\t\t\t\tstart = index + 1;", "-\t\t\t\t} while (index != -1);", "-\t\t\t\tOS.ATSUDisposeStyle (atsuiStyle [0]);", "-\t\t\t\tOS.ATSUDisposeTextLayout (layout [0]);", "-\t\t\t\tOS.DisposePtr (ptr2);", "+\t\t\t\t\twidth = ioBounds.h;", "+\t\t\t\t\theight = ioBounds.v;", "+\t\t\t\t}", "+\t\t\t\tOS.CFRelease (ptr [0]);", "+\t\t\t} else {", "+\t\t\t\tFont font = getFont ();", "+\t\t\t\tFontInfo info = new FontInfo ();", "+\t\t\t\tOS.FetchFontInfo(font.id, font.size, font.style, info);", "+\t\t\t\tint fontHeight = info.ascent + info.descent;", "+\t\t\t\theight = fontHeight;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62c3f61abf028445ca5fb26e69d67e1b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "f92aec5deb4a565ea89e04280ed631a305c98831", "commitAfterChange": "4b430f4288445278b605b873a915f11105ca8844", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\t\theight = DEFAULT_HEIGHT;", "-\t\t\tif (text.length () != 0) {", "-\t\t\t\tint [] ptr = new int [1];", "-\t\t\t\tint [] actualSize = new int [1];", "-\t\t\t\tOS.GetControlData (handle, (short)0 , OS.kControlStaticTextCFStringTag, 4, ptr, actualSize);", "-\t\t\t\tif (ptr [0] != 0) {", "-\t\t\t\t\torg.eclipse.swt.internal.carbon.Point bounds = new org.eclipse.swt.internal.carbon.Point ();", "-\t\t\t\t\tshort [] baseLine = new short [1];", "-\t\t\t\t\tboolean wrap = false;", "+\t\t\tFont font = getFont ();", "+\t\t\tFontInfo info = new FontInfo ();", "+\t\t\tOS.FetchFontInfo(font.id, font.size, font.style, info);", "+\t\t\tint fontHeight = info.ascent + info.descent;", "+\t\t\theight = fontHeight;", "+\t\t\tint length = text.length (); ", "+\t\t\tif (length != 0) {", "+\t\t\t\tString string = Display.convertToLf (text);", "+\t\t\t\tint [] layout = new int [1];", "+\t\t\t\tOS.ATSUCreateTextLayout (layout);", "+\t\t\t\tif (layout [0] == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tint [] atsuiStyle = new int [1];", "+\t\t\t\tOS.ATSUCreateStyle (atsuiStyle);", "+\t\t\t\tif (atsuiStyle [0] == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tint ptr1 = OS.NewPtr (16);", "+\t\t\t\tOS.memcpy (ptr1, new int [] {font.handle}, 4); ", "+\t\t\t\tOS.memcpy (ptr1 + 4, new int [] {OS.X2Fix (font.size)}, 4);", "+\t\t\t\tint [] tags = new int [] {OS.kATSUFontTag, OS.kATSUSizeTag};", "+\t\t\t\tint [] sizes = new int [] {4, 4};", "+\t\t\t\tint [] values = new int [] {ptr1, ptr1 + 4};", "+\t\t\t\tOS.ATSUSetAttributes (atsuiStyle [0], tags.length, tags, sizes, values);", "+\t\t\t\tOS.DisposePtr (ptr1);", "+\t\t\t\tint ptr2 = OS.NewPtr (length * 2);", "+\t\t\t\tOS.memcpy (ptr2, string, length * 2);", "+\t\t\t\tOS.ATSUSetTextPointerLocation (layout [0], ptr2, 0, length, length);", "+\t\t\t\tOS.ATSUSetRunStyle (layout [0], atsuiStyle [0], 0, length);", "+\t\t\t\theight = 0;", "+\t\t\t\twidth = wHint != SWT.DEFAULT ? wHint : 0;", "+\t\t\t\tint [] breakCount = new int [1];", "+\t\t\t\tATSTrapezoid trapezoid = new ATSTrapezoid();", "+\t\t\t\tint start = 0, index = 0;", "+\t\t\t\tdo {", "+\t\t\t\t\tindex = string.indexOf ('\\n', start);", "+\t\t\t\t\tint end = index == -1 ? length : index;", "-\t\t\t\t\t\twrap = true;", "-\t\t\t\t\t\tbounds.h = (short) wHint;", "+\t\t\t\t\t\tOS.ATSUBatchBreakLines (layout [0], start, end - start, OS.X2Fix (wHint), breakCount);", "+\t\t\t\t\t\theight += (breakCount [0] + (index == -1 ? 1 : 0)) * fontHeight;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tOS.ATSUGetGlyphBounds (layout [0], 0, 0, start, end - start, (short) OS.kATSUseDeviceOrigins, 1, trapezoid, null);", "+\t\t\t\t\t\twidth = Math.max (width, OS.Fix2Long (trapezoid.upperRight_x) - OS.Fix2Long (trapezoid.upperLeft_x));", "+\t\t\t\t\t\theight += OS.Fix2Long (trapezoid.lowerRight_y) - OS.Fix2Long (trapezoid.upperRight_y);", "-\t\t\t\t\t// NEEDS work - only works for default font", "-\t\t\t\t\tOS.GetThemeTextDimensions (ptr [0], (short)OS.kThemeSystemFont, OS.kThemeStateActive, wrap, bounds, baseLine);", "-\t\t\t\t\twidth = bounds.h;", "-\t\t\t\t\theight = bounds.v;", "-\t\t\t\t\tOS.CFRelease (ptr [0]);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tFont font = getFont ();", "-\t\t\t\tFontInfo info = new FontInfo ();", "-\t\t\t\tOS.FetchFontInfo(font.id, font.size, font.style, info);", "-\t\t\t\theight = info.ascent + info.descent;", "+\t\t\t\t\tstart = index + 1;", "+\t\t\t\t} while (index != -1);", "+\t\t\t\tOS.ATSUDisposeStyle (atsuiStyle [0]);", "+\t\t\t\tOS.ATSUDisposeTextLayout (layout [0]);", "+\t\t\t\tOS.DisposePtr (ptr2);"]}], "num": 40727}
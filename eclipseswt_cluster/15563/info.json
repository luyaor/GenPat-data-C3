{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ab6b0020c011655d88f8286b00e9230", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90c65d69dc8265a4835e56ae8218d6d3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "dbb652fe193019d96be9d6af80af3f6e1918e181", "commitAfterChange": "a9865ce41544b9634fe7b5cf08a114ae91a2faeb", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 32, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["-\tString iconPath = null;", "-\t\tcase DESKTOP_KDE: {", "-\t\t\t/* Use the character encoding for the default locale */", "-\t\t\tbyte[] buffer = Converter.wcsToMbcs(null, name, true);", "-\t\t\tint mimeTypeName = KDE.QString_new(buffer);", "-\t\t\tint mimeType = KDE.KMimeType_mimeType(mimeTypeName);", "-\t\t\tKDE.QString_delete(mimeTypeName);\t\t\t", "-\t\t\tif (mimeType == 0) return null;\t\t\t", "-\t\t\tint mimeIcon = KDE.KMimeType_icon(mimeType, 0, false);", "-\t\t\tint loader = KDE.KGlobal_iconLoader();", "-\t\t\tint path = KDE.KIconLoader_iconPath(loader, mimeIcon, KDE.KICON_SMALL, true);", "-\t\t\tif (path == 0) return null;", "-\t\t\ticonPath = kde_convertQStringAndFree(path);", "-\t\t\tbreak;", "-\t\t}", "-\t\tcase DESKTOP_GNOME: return imageData;", "+\t\tcase DESKTOP_GNOME: return gnome_getImageData();", "+\t\tcase DESKTOP_KDE: return kde_getImageData();", "-\t\tcase DESKTOP_UNKNOWN: return null;", "-\tif (iconPath.endsWith(\"xpm\")) {", "-\t\tint xDisplay = display.xDisplay;", "-\t\tint screen  = OS.XDefaultScreenOfDisplay(xDisplay);", "-\t\tint fgPixel = OS.XWhitePixel(display.xDisplay, OS.XDefaultScreen(xDisplay));", "-\t\tint bgPixel = OS.XBlackPixel(display.xDisplay, OS.XDefaultScreen(xDisplay));", "-\t\t/* Use the character encoding for the default locale */", "-\t\tbyte[] iconName = Converter.wcsToMbcs(null, iconPath, true);", "-\t\tint pixmap = OS.XmGetPixmap(screen, iconName, fgPixel, bgPixel);", "-\t\tif (pixmap == OS.XmUNSPECIFIED_PIXMAP) return null;", "-\t\tImage image = Image.motif_new(display, SWT.BITMAP, pixmap, 0);", "-\t\tImageData imageData = image.getImageData();", "-\t\t", "-\t\t/* The pixmap returned from XmGetPixmap is cached by Motif", "-\t\t * and must be deleted by XmDestroyPixmap. Because it cannot", "-\t\t * be deleted directly by XFreePixmap, image.dispose() must not", "-\t\t * be called. The following code should do an equivalent image.dispose().", "-\t\t */", "-\t\tOS.XmDestroyPixmap(screen, pixmap);", "-\t\treturn imageData;\t", "-\t}", "-\ttry {", "-\t\treturn new ImageData(iconPath);", "-\t} catch (Exception e) {", "-\t\treturn null;", "-\t}", "+\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "829df11b0a2ec17d6c388cff180005ec", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "5e356c18b07e7f5af1a6b17c096783ad43ee7650", "commitAfterChange": "bec9de216652a0f1829bdec4dfa5d60c81e5e090", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 27, "signatureBeforeChange": " public ImageData getImageData ()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["-public ImageData getImageData () {", "+public ImageData getImageData() {", "-\tswitch (getDesktop( display )) {", "+\tswitch (getDesktop(display)) {", "-\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, name, true);", "-\t\t\tint mimeTypeName = KDE.QString_new( buffer );", "-\t\t\tint mimeType = KDE.KMimeType_mimeType( mimeTypeName );", "-\t\t\tKDE.QString_delete( mimeTypeName );\t\t\t", "+\t\t\tbyte[] buffer = Converter.wcsToMbcs(null, name, true);", "+\t\t\tint mimeTypeName = KDE.QString_new(buffer);", "+\t\t\tint mimeType = KDE.KMimeType_mimeType(mimeTypeName);", "+\t\t\tKDE.QString_delete(mimeTypeName);\t\t\t", "-\t\t", "-\t\tcase DESKTOP_GNOME: {", "-\t\t\treturn imageData;", "-\t\t}", "-\t\t", "-\t\tcase DESKTOP_CDE: {", "-\t\t\treturn cde_getImageData();", "-\t\t}", "-\t\t", "-\t\tcase DESKTOP_UNKNOWN: {", "-\t\t\treturn null;", "-\t\t}", "+\t\tcase DESKTOP_GNOME: return imageData;", "+\t\tcase DESKTOP_CDE: return cde_getImageData();", "+\t\tcase DESKTOP_UNKNOWN: return null;", "-\tif (iconPath.endsWith (\"xpm\")) {", "+\tif (iconPath.endsWith(\"xpm\")) {", "-\t\tint screen  = OS.XDefaultScreenOfDisplay( xDisplay );", "-\t\tint fgPixel = OS.XWhitePixel( display.xDisplay, OS.XDefaultScreen( xDisplay ) );", "-\t\tint bgPixel = OS.XBlackPixel( display.xDisplay, OS.XDefaultScreen( xDisplay ) );", "+\t\tint screen  = OS.XDefaultScreenOfDisplay(xDisplay);", "+\t\tint fgPixel = OS.XWhitePixel(display.xDisplay, OS.XDefaultScreen(xDisplay));", "+\t\tint bgPixel = OS.XBlackPixel(display.xDisplay, OS.XDefaultScreen(xDisplay));", "-\t\tbyte [] iconName = Converter.wcsToMbcs (null, iconPath, true);", "-\t\tint pixmap = OS.XmGetPixmap( screen, iconName, fgPixel, bgPixel );", "+\t\tbyte[] iconName = Converter.wcsToMbcs(null, iconPath, true);", "+\t\tint pixmap = OS.XmGetPixmap(screen, iconName, fgPixel, bgPixel);", "-\t\tImage image = Image.motif_new (display, SWT.BITMAP, pixmap, 0);", "-\t\tImageData imageData = image.getImageData ();", "+\t\tImage image = Image.motif_new(display, SWT.BITMAP, pixmap, 0);", "+\t\tImageData imageData = image.getImageData();", "-\t\t// The pixmap returned from XmGetPixmap is cached by Motif", "-\t\t// and must be deleted by XmDestroyPixmap. Because it cannot", "-\t\t// be deleted directly by XFreePixmap, image.dispose() must not", "-\t\t// be called. The following code should do an equivalent image.dispose().", "-\t\tOS.XmDestroyPixmap( screen, pixmap );", "-\t\treturn imageData;\t\t", "+\t\t/* The pixmap returned from XmGetPixmap is cached by Motif", "+\t\t * and must be deleted by XmDestroyPixmap. Because it cannot", "+\t\t * be deleted directly by XFreePixmap, image.dispose() must not", "+\t\t * be called. The following code should do an equivalent image.dispose().", "+\t\t */", "+\t\tOS.XmDestroyPixmap(screen, pixmap);", "+\t\treturn imageData;\t", "-\t\treturn new ImageData (iconPath);", "+\t\treturn new ImageData(iconPath);"]}], "num": 15563}
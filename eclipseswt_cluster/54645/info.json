{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b197f7c3bf227479c24ccb50714af79", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3f214944d4ec3862d29157d43b5ad12", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "10dcf451824eee186f55fdc5845ca7af6620fc4f", "commitAfterChange": "f7ab947683071fbd803ab1ee1fc0aef9e31082e8", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 67, "signatureBeforeChange": "  LRESULT WM_CLEAR (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_CLEAR (int wParam, int lParam)", "diff": ["-\treturn verify (OS.WM_CLEAR, wParam, lParam);", "+\tif (!hooks (SWT.Verify) && !filters (SWT.Verify)) return result;", "+\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\tif ((bits & OS.ES_READONLY) != 0) return result;", "+\tint [] start = new int [1], end = new int [1];", "+\tOS.SendMessage (handle, OS.EM_GETSEL, start, end);", "+\tif (start [0] == end [0]) return result;", "+\tString newText = verifyText (\"\", start [0], end [0], null);", "+\tif (newText == null) return LRESULT.ZERO;", "+\tif (newText.length () != 0) {", "+\t\tresult = new LRESULT (callWindowProc (OS.WM_CLEAR, 0, 0));\t", "+\t\tnewText = Display.withCrLf (newText);", "+\t\tTCHAR buffer = new TCHAR (getCodePage (), newText, true);", "+\t\t/*", "+\t\t* Feature in Windows.  When an edit control with ES_MULTILINE", "+\t\t* style that does not have the WS_VSCROLL style is full (i.e.", "+\t\t* there is no space at the end to draw any more characters),", "+\t\t* EM_REPLACESEL sends a WM_CHAR with a backspace character", "+\t\t* to remove any further text that is added.  This is an", "+\t\t* implementation detail of the edit control that is unexpected", "+\t\t* and can cause endless recursion when EM_REPLACESEL is sent", "+\t\t* from a WM_CHAR handler.  The fix is to ignore calling the", "+\t\t* handler from WM_CHAR.", "+\t\t*/", "+\t\tignoreCharacter = true;", "+\t\tOS.SendMessage (handle, OS.EM_REPLACESEL, 0, buffer);", "+\t\tignoreCharacter = false;", "+\t}", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d149e452fc09547a277978e85baf8ec", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "10dcf451824eee186f55fdc5845ca7af6620fc4f", "commitAfterChange": "f7ab947683071fbd803ab1ee1fc0aef9e31082e8", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 68, "signatureBeforeChange": "  LRESULT WM_CUT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_CUT (int wParam, int lParam)", "diff": ["-\treturn verify (OS.WM_CUT, wParam, lParam);", "+\tif (!hooks (SWT.Verify) && !filters (SWT.Verify)) return result;", "+\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\tif ((bits & OS.ES_READONLY) != 0) return result;", "+\tint [] start = new int [1], end = new int [1];", "+\tOS.SendMessage (handle, OS.EM_GETSEL, start, end);", "+\tif (start [0] == end [0]) return result;", "+\tString newText = verifyText (\"\", start [0], end [0], null);", "+\tif (newText == null) return LRESULT.ZERO;", "+\tif (newText.length () != 0) {", "+\t\tresult = new LRESULT (callWindowProc (OS.WM_CUT, 0, 0));\t", "+\t\tnewText = Display.withCrLf (newText);", "+\t\tTCHAR buffer = new TCHAR (getCodePage (), newText, true);", "+\t\t/*", "+\t\t* Feature in Windows.  When an edit control with ES_MULTILINE", "+\t\t* style that does not have the WS_VSCROLL style is full (i.e.", "+\t\t* there is no space at the end to draw any more characters),", "+\t\t* EM_REPLACESEL sends a WM_CHAR with a backspace character", "+\t\t* to remove any further text that is added.  This is an", "+\t\t* implementation detail of the edit control that is unexpected", "+\t\t* and can cause endless recursion when EM_REPLACESEL is sent", "+\t\t* from a WM_CHAR handler.  The fix is to ignore calling the", "+\t\t* handler from WM_CHAR.", "+\t\t*/", "+\t\tignoreCharacter = true;", "+\t\tOS.SendMessage (handle, OS.EM_REPLACESEL, 0, buffer);", "+\t\tignoreCharacter = false;", "+\t}", "+\treturn result;"]}], "num": 54645}
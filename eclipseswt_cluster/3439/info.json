{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85b20c073eb44e205445df576f17ce10", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37e2c09f3131c9e399dae54b4412b5c4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/TextTransfer.java", "commitBeforeChange": "bd377d5ede28b82ea37a0902d7d539f96218e9fe", "commitAfterChange": "c03f2bbcabd697f87ad83444a1e4e58283e6ab32", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void javaToNative (Object object, TransferData transferData)", "signatureAfterChange": " public void javaToNative (Object object, TransferData transferData)", "diff": ["-\tint ptr = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, chars.length);", "-\tif (ptr == 0) {", "-\t\ttransferData.result = -1;", "-\t\treturn;", "+\tswitch (transferData.type) {", "+\t\tcase TEXTID: {", "+\t\t\tint ptr = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, chars.length);", "+\t\t\tif (ptr == 0) {", "+\t\t\t\ttransferData.result = -1;", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tCFRange range = new CFRange();", "+\t\t\trange.length = chars.length;", "+\t\t\tint encoding = OS.CFStringGetSystemEncoding();", "+\t\t\tint[] size = new int[1];", "+\t\t\tOS.CFStringGetBytes(ptr, range, encoding, (byte)'?', true, null, 0, size);", "+\t\t\tbyte[] buffer = new byte[size[0]];", "+\t\t\tOS.CFStringGetBytes(ptr, range, encoding, (byte)'?', true, buffer, size [0], size);", "+\t\t\tOS.CFRelease(ptr);", "+\t\t\tsuper.javaToNative(buffer, transferData);", "+\t\t\tbreak;", "+\t\t}", "+\t\tcase UTEXTID: {", "+\t\t\tbyte[] buffer = new byte[chars.length * 2];", "+\t\t\tOS.memcpy(buffer, chars, buffer.length);", "+\t\t\tsuper.javaToNative(buffer, transferData);", "+\t\t\tbreak;", "+\t\t}", "-\tCFRange range = new CFRange();", "-\trange.length = chars.length;", "-\tint encoding = OS.CFStringGetSystemEncoding();", "-\tint[] size = new int[1];", "-\tOS.CFStringGetBytes(ptr, range, encoding, (byte)'?', true, null, 0, size);", "-\tbyte[] buffer = new byte[size[0]];", "-\tOS.CFStringGetBytes(ptr, range, encoding, (byte)'?', true, buffer, size [0], size);", "-\tOS.CFRelease(ptr);", "-\tsuper.javaToNative(buffer, transferData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faf1f6d332e09cc7540701ed7e698410", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/TextTransfer.java", "commitBeforeChange": "bd377d5ede28b82ea37a0902d7d539f96218e9fe", "commitAfterChange": "c03f2bbcabd697f87ad83444a1e4e58283e6ab32", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-\t// convert byte array to a string", "-\tint encoding = OS.CFStringGetSystemEncoding();", "-\tint ptr = OS.CFStringCreateWithBytes(OS.kCFAllocatorDefault, buffer, buffer.length, encoding, true);", "-\tint length = OS.CFStringGetLength(ptr);", "-\tchar[] chars = new char[length];", "-\tCFRange range = new CFRange();", "-\trange.length = length;", "-\tOS.CFStringGetCharacters(ptr, range, chars);", "-\tOS.CFRelease (ptr);", "-\treturn new String (chars);", "+\tif (transferData.type == TEXTID) {", "+\t\t// convert byte array to a string", "+\t\tint encoding = OS.CFStringGetSystemEncoding();", "+\t\tint ptr = OS.CFStringCreateWithBytes(OS.kCFAllocatorDefault, buffer, buffer.length, encoding, true);", "+\t\tint length = OS.CFStringGetLength(ptr);", "+\t\tchar[] chars = new char[length];", "+\t\tCFRange range = new CFRange();", "+\t\trange.length = length;", "+\t\tOS.CFStringGetCharacters(ptr, range, chars);", "+\t\tOS.CFRelease (ptr);", "+\t\treturn new String (chars);", "+\t}", "+\tif (transferData.type == UTEXTID) {", "+\t\tchar[] chars = new char[(transferData.data.length + 1) / 2];", "+\t\tOS.memcpy(chars, transferData.data, transferData.data.length);", "+\t\treturn new String(chars);", "+\t}", "+\treturn null;"]}], "num": 3439}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eaeef608ef66ac7c05f75cb5081cd0ed", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ebfe58c0f446462600c9dedbbf811f2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "80f137cfd2db6016880fb35b713904c3f9862024", "commitAfterChange": "3d6268b28bff93d191d7c30b9cc692bcbf536b2f", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "  int gtk_key_press_event (int widget, int event)", "signatureAfterChange": "  int gtk_key_press_event (int widget, int event)", "diff": ["+\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0) && (style & SWT.READ_ONLY) == 0) {", "+\t\tGdkEventKey keyEvent = new GdkEventKey ();", "+\t\tOS.memmove (keyEvent, event, GdkEventKey.sizeof);", "+\t\tint oldIndex = OS.gtk_combo_box_get_active (handle);", "+\t\tint newIndex = oldIndex;", "+\t\tint key = keyEvent.keyval;", "+\t\tswitch (key) {", "+\t\t\tcase OS.GDK_Down:", "+\t\t\tcase OS.GDK_KP_Down: ", "+\t\t\t\t if (oldIndex != (items.length - 1)) {", "+\t\t\t\t\tnewIndex = oldIndex + 1;", "+\t\t\t\t }", "+\t\t\t\t break;", "+\t\t\tcase OS.GDK_Up:", "+\t\t\tcase OS.GDK_KP_Up: ", "+\t\t\t\tif (oldIndex != -1 && oldIndex != 0) {", "+\t\t\t\t\tnewIndex = oldIndex - 1;", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase OS.GDK_Page_Up:", "+\t\t    case OS.GDK_KP_Page_Up:", "+\t\t    case OS.GDK_Home: ", "+\t\t    case OS.GDK_KP_Home:", "+\t\t    \tnewIndex = 0;", "+\t\t    \tbreak;", "+\t\t    case OS.GDK_Page_Down:", "+\t\t    case OS.GDK_KP_Page_Down:", "+\t\t    case OS.GDK_End: ", "+\t\t    case OS.GDK_KP_End:", "+\t\t    \tnewIndex = items.length - 1;", "+\t\t    \tbreak;  ", "+\t\t}", "+\t\tif (newIndex != oldIndex) {", "+\t\t\tOS.g_signal_handlers_block_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "+\t\t\tOS.gtk_combo_box_set_active (handle, newIndex);", "+\t\t\tOS.g_signal_handlers_unblock_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "+\t\t}", "+\t\treturn 1;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b6b362162ca35d002e62461daa2ebd5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Group.java", "commitBeforeChange": "a38cdec12de35954521831ad0e8e78895c25ed1c", "commitAfterChange": "fa7c76641c503cd76fa7003bec8ccf78fc6288cd", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  void printWidget (int hwnd, GC gc)", "signatureAfterChange": "  void printWidget (int hwnd, int hdc, GC gc)", "diff": ["-void printWidget (int /*long*/ hwnd, GC gc) {", "+void printWidget (int /*long*/ hwnd, int /*long*/ hdc, GC gc) {", "+\t/*", "+\t* Bug in Windows.  For some reason, PrintWindow()", "+\t* returns success but does nothing when it is called", "+\t* on a printer.  The fix is to just go directly to", "+\t* WM_PRINT in this case.", "+\t*/", "+\tboolean success = false;", "+\tif (!(OS.GetDeviceCaps(gc.handle, OS.TECHNOLOGY) == OS.DT_RASPRINTER)) {", "+\t\tsuccess = OS.PrintWindow (hwnd, hdc, 0);", "+\t}", "+\t", "-\tint /*long*/ hDC = gc.handle;", "-\tif (!OS.PrintWindow (hwnd, hDC, 0)) {", "+\tif (!success) {", "-\t\tOS.SendMessage (hwnd, OS.WM_PRINT, hDC, flags);", "-\t\tint nSavedDC = OS.SaveDC (hDC);", "+\t\tOS.SendMessage (hwnd, OS.WM_PRINT, hdc, flags);", "+\t\tint nSavedDC = OS.SaveDC (hdc);", "-\t\tOS.IntersectClipRect (hDC, 0, 0, rect.width, rect.height);", "+\t\tOS.IntersectClipRect (hdc, 0, 0, rect.width, rect.height);", "-\t\t\tOS.SetWindowOrgEx (hDC, -location.x, -location.y, null);", "-\t\t\tchildren [i].print (gc);", "+\t\t\tint graphicsMode = OS.GetGraphicsMode(hdc);", "+\t\t\tif (graphicsMode == OS.GM_ADVANCED) {", "+\t\t\t\tfloat [] lpXform = {1, 0, 0, 1, location.x, location.y};", "+\t\t\t\tOS.ModifyWorldTransform(hdc, lpXform, OS.MWT_LEFTMULTIPLY);", "+\t\t\t} else {", "+\t\t\t\tOS.SetWindowOrgEx (hdc, -location.x, -location.y, null);", "+\t\t\t}", "+\t\t\tint /*long*/ topHandle = children [i].topHandle();", "+\t\t\tint bits = OS.GetWindowLong (topHandle, OS.GWL_STYLE);", "+\t\t\tif ((bits & OS.WS_VISIBLE) == 0) {", "+\t\t\t\tOS.DefWindowProc (topHandle, OS.WM_SETREDRAW, 1, 0);", "+\t\t\t}", "+\t\t\tchildren [i].printWidget (topHandle, hdc, gc);", "+\t\t\tif ((bits & OS.WS_VISIBLE) == 0) {", "+\t\t\t\tOS.DefWindowProc (topHandle, OS.WM_SETREDRAW, 0, 0);", "+\t\t\t}", "+\t\t\tif (graphicsMode == OS.GM_ADVANCED) {", "+\t\t\t\tfloat [] lpXform = {1, 0, 0, 1, -location.x, -location.y};", "+\t\t\t\tOS.ModifyWorldTransform(hdc, lpXform, OS.MWT_LEFTMULTIPLY);", "+\t\t\t}", "-\t\tOS.RestoreDC (hDC, nSavedDC);", "+\t\tOS.RestoreDC (hdc, nSavedDC);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39b1e2cf0e59f4bc1d098e7f7043d032", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "69dda192f297e6da101ddc0c83e03a5e332b59a2", "commitAfterChange": "b3103c9cfd8bc21e24ef79ed4f3a3f2f439d3613", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 67, "signatureBeforeChange": " public void setText (String string)", "signatureAfterChange": " public void setText (String string)", "diff": ["+\t/*", "+\t* Feature in gtk.  When text is set in gtk, separate events are fired for the deletion and ", "+\t* insertion of the text.  This is not wrong, but is inconsistent with other platforms.  The workaround", "+\t* is to block the firing of these events and fire them ourselves in a consistent manner. ", "+\t*/", "+\tif (hooks (SWT.Verify) || filters (SWT.Verify)) {", "+\t\tstring = verifyText (string, 0, getCharCount ());", "+\t\tif (string == null) return;", "+\t}", "+\t\tOS.g_signal_handlers_block_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "+\t\tOS.g_signal_handlers_block_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, DELETE_TEXT);", "+\t\tOS.g_signal_handlers_block_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, INSERT_TEXT);", "+\t\tOS.g_signal_handlers_unblock_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "+\t\tOS.g_signal_handlers_unblock_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, DELETE_TEXT);", "+\t\tOS.g_signal_handlers_unblock_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, INSERT_TEXT);", "+\t\tOS.g_signal_handlers_block_matched (bufferHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "+\t\tOS.g_signal_handlers_block_matched (bufferHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, DELETE_RANGE);", "+\t\tOS.g_signal_handlers_block_matched (bufferHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, INSERT_TEXT);", "+\t\tOS.g_signal_handlers_unblock_matched (bufferHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "+\t\tOS.g_signal_handlers_unblock_matched (bufferHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, DELETE_RANGE);", "+\t\tOS.g_signal_handlers_unblock_matched (bufferHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, INSERT_TEXT);", "+\tsendEvent (SWT.Modify);"]}], "num": 4619}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "83f9f42177b450605c1697d45da01686", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a849b20d216038903a13055a5643aca3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java", "commitBeforeChange": "77b3fbb225bf670e0c417bef815fb7c859299e19", "commitAfterChange": "e0856b8b808f57d665e09a4e0393d4c9c1b2f815", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "  \tvoid paintImage(PaintEvent event)", "signatureAfterChange": "  \tvoid paintImage(PaintEvent event)", "diff": ["+\t\tGC gc = event.gc;", "+\t\t", "+\t\t/* If the user wants to see the transparent pixel in its actual color,", "+\t\t * then temporarily turn off transparency.", "+\t\t */", "+\t\t", "+\t\t/* Scale the image when drawing, using the user's selected scaling factor. */", "-\t\tevent.gc.drawImage(", "+\t\t", "+\t\t/* If any of the background is visible, fill it with the background color. */", "+\t\tRectangle bounds = imageCanvas.getBounds();", "+\t\tif (imageData.getTransparencyType() != SWT.TRANSPARENCY_NONE) {", "+\t\t\t/* If there is any transparency at all, fill the whole background. */", "+\t\t\tgc.fillRectangle(0, 0, bounds.width, bounds.height);", "+\t\t} else {", "+\t\t\t/* Otherwise, just fill in the backwards L. */", "+\t\t\tif (ix + w < bounds.width) gc.fillRectangle(ix + w, 0, bounds.width - (ix + w), bounds.height);", "+\t\t\tif (iy + h < bounds.height) gc.fillRectangle(0, iy + h, ix + w, bounds.height - (iy + h));", "+\t\t}", "+\t\t", "+\t\t/* Draw the image */", "+\t\tgc.drawImage(", "+\t\t", "+\t\t/* If there is a mask and the user wants to see it, draw it. */", "-\t\t\tevent.gc.drawImage(", "+\t\t\tgc.drawImage(", "+\t\t", "+\t\t/* If transparency was temporarily disabled, restore it. */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1f7b03da7cc676f7b7c7f7fb6c707f6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CLabel.java", "commitBeforeChange": "ac5f577ed3d76a063b5c9dfd6cf56e9df031b4bc", "commitAfterChange": "ec11b1e99b3dd5a45b6257429fe326259f31bfea", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " protected String shortenText(GC gc, String t, int width)", "signatureAfterChange": " protected String shortenText(GC gc, String t, int width)", "diff": ["+\tif (width<=w) return t;", "-\tint pivot = l/2;", "-\tint s = pivot;", "-\tint e = pivot+1;", "-\twhile (s >= 0 && e < l) {", "-\t\tString s1 = t.substring(0, s);", "-\t\tString s2 = t.substring(e, l);", "+\tint max = l/2;", "+\tint min = 0;", "+\tint mid = (max+min)/2 - 1;", "+\tif (mid <= 0) return t;", "+\twhile (min < mid && mid < max) {", "+\t\tString s1 = t.substring(0, mid);", "+\t\tString s2 = t.substring(l-mid, l);", "-\t\tif (l1+w+l2 < width) {", "-\t\t\tt = s1 + ELLIPSIS + s2;", "-\t\t\tbreak;", "+\t\tif (l1+w+l2 > width) {", "+\t\t\tmax = mid;\t\t\t", "+\t\t\tmid = (max+min)/2;", "+\t\t} else if (l1+w+l2 < width) {", "+\t\t\tmin = mid;", "+\t\t\tmid = (max+min)/2;", "+\t\t} else {", "+\t\t\tmin = max;", "-\t\ts--;", "-\t\te++;", "-\treturn t;", "+\tif (mid == 0) return t;", "+ \treturn t.substring(0, mid)+ELLIPSIS+t.substring(l-mid, l);"]}], "num": 21860}
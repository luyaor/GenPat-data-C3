{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6da4ee7e9f597f1d9d4c24e743038c1b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ccb1a992009f0a77b8f3595ca2e2808", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextRenderer.java", "commitBeforeChange": "d7cf53a873d76e603f43a368e1d580ca30321619", "commitAfterChange": "321182c4d3e7f5c155a3d6ee888fa2858ea3e949", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " void calculateLineHeight()", "signatureAfterChange": " void calculateLineHeight()", "diff": ["+\tFont originalFont = gc.getFont();", "+\tFontData[] fontData = originalFont.getFontData();", "+\tFont font;", "+\t// don't assume that bold and normal fonts have the same height", "+\t// fixes bug 41773", "+\tfor (int i = 0; i < fontData.length; i++) {", "+\t\tint fontStyle = fontData[i].getStyle(); ", "+\t\tif ((fontStyle & SWT.BOLD) == SWT.BOLD) {", "+\t\t\tfontData[i].setStyle(fontStyle ^ SWT.BOLD);", "+\t\t} else {", "+\t\t\tfontData[i].setStyle(fontStyle | SWT.BOLD);", "+\t\t} ", "+\t}", "+\tfont = new Font(getDevice(), fontData);", "+\tgc.setFont(font);", "+\tlineHeight = Math.max(lineHeight, gc.getFontMetrics().getHeight());", "+\tgc.setFont(originalFont);", "+\tfont.dispose();\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f3bb16510b030e973d8e84e9f0f3441", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "81c8912c5c70333113602ba22affbc4585bded82", "commitAfterChange": "ff62aa5e7c7f3d11ec529d730cde567330dcd9e8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["-//\tfloat[] foreground = gc.data.foreground;", "-//\tNSColor color = NSColor.colorWithDeviceRed(foreground[0], foreground[1], foreground[2], foreground[3]);", "-//\ttextStorage.setForegroundColor(color);", "+\tfloat[] fg = gc.data.foreground;", "+\tNSColor foreground = NSColor.colorWithDeviceRed(fg[0], fg[1], fg[2], fg[3]);", "-\tNSRange range = new NSRange();", "-\trange.length = layoutManager.numberOfGlyphs();", "-\tif (range.length > 0) {", "+\tint numberOfGlyphs = layoutManager.numberOfGlyphs();", "+\tif (numberOfGlyphs > 0) {", "+\t\tNSRange range = new NSRange();", "+\t\tfor (int i = 0; i < styles.length - 1; i++) {", "+\t\t\tStyleItem run = styles[i];", "+\t\t\tif (run.style != null && run.style.foreground != null) continue;", "+\t\t\trange.location = length != 0 ? translateOffset(run.start) : 0;", "+\t\t\trange.length = translateOffset(styles[i + 1].start) - range.location;", "+\t\t\tlayoutManager.addTemporaryAttribute(OS.NSForegroundColorAttributeName, foreground, range);", "+\t\t}", "+\t\trange.location = 0;", "+\t\trange.length = numberOfGlyphs;", "+\t\trange.length = length;", "+\t\tlayoutManager.removeTemporaryAttribute(OS.NSForegroundColorAttributeName, range);"]}], "num": 16056}
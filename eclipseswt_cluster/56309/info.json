{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47077da3f78870c925a42ba485b924fd", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb46467bf574eb52a3cfa75b400f6b12", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/internal/image/GIFFileFormat.java", "commitBeforeChange": "44c31398c5f7d5a95cc03a487182c9e0b2abe8be", "commitAfterChange": "ff9c15961deba7f09d9b58b96d5ee00c19a9ff6f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tImageData[] loadFromByteStream()", "signatureAfterChange": " \tImageData[] loadFromByteStream()", "diff": ["-\t\tgetExtensions();", "-\t\tint id = readID();", "-\t\twhile (id == GIF_IMAGE_BLOCK_ID) {", "-\t\t\tImageData image = readImageBlock(palette);", "-\t\t\tif (loader.hasListeners()) {", "-\t\t\t\tloader.notifyListeners(new ImageLoaderEvent(loader, image, 3, true));", "-\t\t\t}", "-\t\t\tImageData[] oldImages = images;", "-\t\t\timages = new ImageData[oldImages.length + 1];", "-\t\t\tSystem.arraycopy(oldImages, 0, images, 0, oldImages.length);", "-\t\t\timages[images.length - 1] = image;", "-\t\t\ttry {", "-\t\t\t\t/* Read the 0-byte terminator at the end of the image. */", "-\t\t\t\tid = inputStream.read();", "-\t\t\t\tif (id > 0) {", "-\t\t\t\t\t/* We read the terminator earlier. */", "-\t\t\t\t\tinputStream.unread(new byte[] {(byte)id});", "+\t\tint id = readID();", "+\t\twhile (id != GIF_TRAILER_ID && id != -1) {", "+\t\t\tif (id == GIF_IMAGE_BLOCK_ID) {", "+\t\t\t\tImageData image = readImageBlock(palette);", "+\t\t\t\tif (loader.hasListeners()) {", "+\t\t\t\t\tloader.notifyListeners(new ImageLoaderEvent(loader, image, 3, true));", "-\t\t\t} catch (IOException e) {", "-\t\t\t\tSWT.error(SWT.ERROR_IO, e);", "+\t\t\t\tImageData[] oldImages = images;", "+\t\t\t\timages = new ImageData[oldImages.length + 1];", "+\t\t\t\tSystem.arraycopy(oldImages, 0, images, 0, oldImages.length);", "+\t\t\t\timages[images.length - 1] = image;", "+\t\t\t} else if (id == GIF_EXTENSION_BLOCK_ID) {", "+\t\t\t\t/* Read the extension block. Currently, only the", "+\t\t\t\t * interesting parts of certain extensions are kept,", "+\t\t\t\t * and the rest is discarded. In future, if we want", "+\t\t\t\t * to keep extensions, they should be grouped with", "+\t\t\t\t * the image data before which they appear.", "+\t\t\t\t */", "+\t\t\t\treadExtension();", "+\t\t\t} else {", "+\t\t\t\t/* The GIF is not to spec, but try to salvage it", "+\t\t\t\t * if we read at least one image. */", "+\t\t\t\tif (images.length > 0) break;", "+\t\t\t\tSWT.error(SWT.ERROR_INVALID_IMAGE);", "-\t\t\tgetExtensions();", "-\t\t\tid = readID();", "+\t\t\tid = readID(); // block terminator (0)", "+\t\t\tif (id == 0) id = readID(); // next block ID (unless we just read it)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "caef9360b56ddb579ccfe7d9893235a9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 274, "signatureBeforeChange": " \tint get_accSelection(int pvarChildren)", "signatureAfterChange": " \tint get_accSelection(int pvarChildren)", "diff": ["-\t\tif (iaccessible == null) return COM.CO_E_OBJNOTCONNECTED;", "-", "-\t\t/* Get the default selection from the OS. */", "-\t\tint code = iaccessible.get_accSelection(pvarChildren);", "-\t\tif (accessibleControlListeners.size() == 0) return code;", "-\t\tif (code == COM.S_OK) {", "-\t\t\tVARIANT v = getVARIANT(pvarChildren);", "-\t\t\tif (v.vt == COM.VT_I4) {", "-\t\t\t\tosChild = osToChildID(v.lVal);", "-\t\t\t} else if (v.vt == COM.VT_UNKNOWN) {", "-\t\t\t\tosChild = ACC.CHILDID_MULTIPLE;", "-\t\t\t\t/* Should get IEnumVARIANT from punkVal field, and enumerate children... */", "+\t\tint /*long*/ osChildObject = 0;", "+\t\tif (iaccessible != null) {", "+\t\t\t/* Get the default selection from the OS. */", "+\t\t\tint code = iaccessible.get_accSelection(pvarChildren);", "+\t\t\tif (accessibleControlListeners.size() == 0) return code;", "+\t\t\tif (code == COM.S_OK) {", "+\t\t\t\tVARIANT v = getVARIANT(pvarChildren);", "+\t\t\t\tif (v.vt == COM.VT_I4) {", "+\t\t\t\t\tosChild = osToChildID(v.lVal);", "+\t\t\t\t} else if (v.vt == COM.VT_DISPATCH) {", "+\t\t\t\t\tosChildObject = v.lVal;", "+\t\t\t\t} else if (v.vt == COM.VT_UNKNOWN) {", "+\t\t\t\t\tosChild = ACC.CHILDID_MULTIPLE;", "+\t\t\t\t\t// TODO: Should get IEnumVARIANT from punkVal field, and enumerate children...", "+\t\t\t\t}", "-\t\t\t/* Should also handle (v.vt == COM.VT_DISPATCH) */", "-\t\t\tsetPtrVARIANT(pvarChildren, COM.VT_DISPATCH, accessible.objIAccessible.getAddress());", "+\t\t\tsetPtrVARIANT(pvarChildren, COM.VT_DISPATCH, accessible.getAddress());", "-\t\t\tsetVARIANT(pvarChildren, COM.VT_EMPTY, 0);", "+\t\t\tif (osChildObject != 0) return COM.S_OK;", "+\t\t\tsetIntVARIANT(pvarChildren, COM.VT_EMPTY, 0);", "-\t\t\tAddRef();", "-\t\t\tsetPtrVARIANT(pvarChildren, COM.VT_UNKNOWN, objIAccessible.getAddress());", "+\t\t\t// TODO: return an enumeration for event.children (currently just returns enumeration from proxy)", "+\t\t\t//AddRef();", "+\t\t\t//setPtrVARIANT(pvarChildren, COM.VT_UNKNOWN, getAddress());", "-\t\t\tsetPtrVARIANT(pvarChildren, COM.VT_DISPATCH, objIAccessible.getAddress());", "+\t\t\tsetPtrVARIANT(pvarChildren, COM.VT_DISPATCH, getAddress());", "-\t\tsetVARIANT(pvarChildren, COM.VT_I4, childIDToOs(childID));", "+\t\tsetIntVARIANT(pvarChildren, COM.VT_I4, childIDToOs(childID));"]}], "num": 56309}
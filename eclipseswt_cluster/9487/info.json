{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8327162167797ec8b6ea1444adaf69c1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d74ab3985fa2a98b586e280fc5fd5178", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "409208d6d4b1a68eff6380851a4426d1f663d5c1", "commitAfterChange": "c407d3ccf9bd8bcf88b474a11dfc54ec1f4f35c9", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+\tupdateLayout (parent.handle);", "+\tif (columnCount == 0) { // pack the default column", "+\t\tdouble width = 0;", "+\t\tint columns = OS.GridView_Columns (gridViewHandle);", "+\t\tint column = OS.GridViewColumnCollection_default (columns, 0);", "+\t\tOS.GCHandle_Free (columns);", "+\t\tint columnHeader = OS.GridViewColumn_Header (column);", "+\t\tif (columnHeader != 0) {", "+\t\t\tint size = OS.UIElement_DesiredSize (columnHeader);", "+\t\t\twidth = OS.Size_Width (size);", "+\t\t\tOS.GCHandle_Free (size);", "+\t\t\tOS.GCHandle_Free (columnHeader);", "+\t\t}", "+\t\tint items = OS.ItemsControl_Items (handle);", "+\t\tfor (int i=0; i<itemCount; i++) {", "+\t\t\tTableItem item = getItem (items, i, false);", "+\t\t\tif (item != null) width = Math.max (width, item.computeWidth (0));", "+\t\t}", "+\t\tOS.GCHandle_Free (items);", "+\t\tOS.GridViewColumn_Width (column, width);", "+\t\tOS.GCHandle_Free (column);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5367bd97e3260a6f7c432ff99c606902", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/DirectoryDialog.java", "commitBeforeChange": "00d380d8afe6cdf3418db077938169eb2149ff89", "commitAfterChange": "81b0820b14e5ac2abe1fc2bae3347a5c29ba0b51", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public String open ()", "signatureAfterChange": " public String open ()", "diff": ["-//\tif (OS.IsWinCE) SWT.error (SWT.ERROR_NOT_IMPLEMENTED);", "-//\t", "-//\tint hHeap = OS.GetProcessHeap ();", "-//\t", "-//\t/* Get the owner HWND for the dialog */", "-//\tint hwndOwner = 0;", "-//\tif (parent != null) hwndOwner = parent.handle;", "-//", "-//\t/* Copy the message to OS memory */", "-//\tint lpszTitle = 0;", "-//\tif (message.length () != 0) {", "-//\t\tString string = message;", "-//\t\tif (string.indexOf ('&') != -1) {", "-//\t\t\tint length = string.length ();", "-//\t\t\tchar [] buffer = new char [length * 2];", "-//\t\t\tint index = 0;", "-//\t\t\tfor (int i=0; i<length; i++) {", "-//\t\t\t\tchar ch = string.charAt (i);", "-//\t\t\t\tif (ch == '&') buffer [index++] = '&';", "-//\t\t\t\tbuffer [index++] = ch;", "-//\t\t\t}", "-//\t\t\tstring = new String (buffer, 0, index);", "-//\t\t}", "-//\t\t/* Use the character encoding for the default locale */", "-//\t\tTCHAR buffer = new TCHAR (0, string, true);", "-//\t\tint byteCount = buffer.length () * TCHAR.sizeof;", "-//\t\tlpszTitle = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, byteCount);", "-//\t\tOS.MoveMemory (lpszTitle, buffer, byteCount);", "-//\t}", "-//", "-//\t/* Create the BrowseCallbackProc */", "-//\tCallback callback = new Callback (this, \"BrowseCallbackProc\", 4); //$NON-NLS-1$", "-//\tint address = callback.getAddress ();", "-//\tif (address == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "-//\t", "-//\t/* Make the parent shell be temporary modal */", "-//\tShell oldModal = null;", "-//\tDisplay display = parent.getDisplay ();", "-//\tif ((style & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "-//\t\toldModal = display.getModalDialogShell ();", "-//\t\tdisplay.setModalDialogShell (parent);", "-//\t}", "-//\t", "-//\tdirectoryPath = null;", "-//\tBROWSEINFO lpbi = new BROWSEINFO ();", "-//\tlpbi.hwndOwner = hwndOwner;", "-//\tlpbi.lpszTitle = lpszTitle;", "-//\tlpbi.ulFlags = OS.BIF_NEWDIALOGSTYLE | OS.BIF_RETURNONLYFSDIRS | OS.BIF_EDITBOX | OS.BIF_VALIDATE;", "-//\tlpbi.lpfn = address;", "-//\t/*", "-//\t* Bug in Windows.  On some hardware configurations, SHBrowseForFolder()", "-//\t* causes warning dialogs with the message \"There is no disk in the drive", "-//\t* Please insert a disk into \\Device\\Harddisk0\\DR0\".  This is possibly", "-//\t* caused by SHBrowseForFolder() calling internally GetVolumeInformation().", "-//\t* MSDN for GetVolumeInformation() says:", "-//\t* ", "-//\t* \"If you are attempting to obtain information about a floppy drive", "-//\t* that does not have a floppy disk or a CD-ROM drive that does not ", "-//\t* have a compact disc, the system displays a message box asking the ", "-//\t* user to insert a floppy disk or a compact disc, respectively. ", "-//\t* To prevent the system from displaying this message box, call the ", "-//\t* SetErrorMode function with SEM_FAILCRITICALERRORS.\"", "-//\t* ", "-//\t* The fix is to save and restore the error mode using SetErrorMode()", "-//\t* with the SEM_FAILCRITICALERRORS flag around SHBrowseForFolder().", "-//\t*/", "-//\tint oldErrorMode = OS.SetErrorMode (OS.SEM_FAILCRITICALERRORS);", "-//\t", "-//\t/*", "-//\t* Bug in Windows.  When a WH_MSGFILTER hook is used to run code", "-//\t* during the message loop for SHBrowseForFolder(), running code", "-//\t* in the hook can cause a GP.  Specifically, SetWindowText()", "-//\t* for static controls seemed to make the problem happen.", "-//\t* The fix is to disable async messages while the directory", "-//\t* dialog is open.", "-//\t* ", "-//\t* NOTE:  This only happens in versions of the comctl32.dll", "-//\t* earlier than 6.0.", "-//\t*/", "-//\tboolean oldRunMessages = display.runMessages;", "-//\tif (OS.COMCTL32_MAJOR < 6) display.runMessages = false;", "-//\tint lpItemIdList = OS.SHBrowseForFolder (lpbi);", "-//\tif (OS.COMCTL32_MAJOR < 6) display.runMessages = oldRunMessages;", "-//\tOS.SetErrorMode (oldErrorMode);", "-//\t", "-//\t/* Clear the temporary dialog modal parent */", "-//\tif ((style & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "-//\t\tdisplay.setModalDialogShell (oldModal);", "-//\t}", "-//\t", "-//\tboolean success = lpItemIdList != 0;", "-//\tif (success) {", "-//\t\t/* Use the character encoding for the default locale */", "-//\t\tTCHAR buffer = new TCHAR (0, OS.MAX_PATH);", "-//\t\tif (OS.SHGetPathFromIDList (lpItemIdList, buffer)) {", "-//\t\t\tdirectoryPath = buffer.toString (0, buffer.strlen ());", "-//\t\t\tfilterPath = directoryPath;", "-//\t\t}", "-//\t}", "-//", "-//\t/* Free the BrowseCallbackProc */", "-//\tcallback.dispose ();", "-//\t", "-//\t/* Free the OS memory */", "-//\tif (lpszTitle != 0) OS.HeapFree (hHeap, 0, lpszTitle);", "-//", "-//\t/* Free the pointer to the ITEMIDLIST */", "-//\tint [] ppMalloc = new int [1];", "-//\tif (OS.SHGetMalloc (ppMalloc) == OS.S_OK) {", "-//\t\t/* void Free (struct IMalloc *this, void *pv); */", "-//\t\tOS.VtblCall (5, ppMalloc [0], lpItemIdList);", "-//\t}", "-//\t", "-//\t/*", "-//\t* This code is intentionally commented.  On some", "-//\t* platforms, the owner window is repainted right", "-//\t* away when a dialog window exits.  This behavior", "-//\t* is currently unspecified.", "-//\t*/", "-////\tif (hwndOwner != 0) OS.UpdateWindow (hwndOwner);", "-//\t", "-//\t/* Return the directory path */", "-//\tif (!success) return null;", "-//\treturn directoryPath;", "-\treturn null;", "+\tint dialog = OS.gcnew_FolderBrowserDialog ();", "+\tif (dialog == 0) error (SWT.ERROR_NO_HANDLES);", "+\tint length = message.length ();", "+\tchar [] buffer = new char [length + 1];", "+\tmessage.getChars (0, length, buffer, 0);", "+\tint messagePtr = OS.gcnew_String (buffer);", "+\tif (messagePtr == 0) error (SWT.ERROR_NO_HANDLES);", "+\tOS.FolderBrowserDialog_Description (dialog, messagePtr);", "+\tOS.GCHandle_Free (messagePtr);", "+\t//TODO: filter path...", "+\tint result = OS.FormsCommonDialog_ShowDialog (dialog);", "+\tString directoryPath = null;", "+\tif (result == OS.DialogResult_OK) {", "+\t\tint ptr = OS.FolderBrowserDialog_SelectedPath (dialog);", "+\t\tint charArray = OS.String_ToCharArray (ptr);", "+\t\tchar[] chars = new char[OS.String_Length (ptr)];", "+\t\tOS.memcpy (chars, charArray, chars.length * 2);", "+\t\tOS.GCHandle_Free (charArray);", "+\t\tOS.GCHandle_Free (ptr);", "+\t\tdirectoryPath = new String (chars);", "+\t}", "+\tOS.GCHandle_Free (dialog);", "+\treturn directoryPath;"]}], "num": 9487}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fefac4eb14fc9116f3ee358ee5b1a4fd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9710b480ab0daa710e73fbfe6324b600", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "b796db7a88d068fbce3590cf91dcc3e9c7f9c320", "commitAfterChange": "37c57c08e60a278244a46818f49a47ece9a0e524", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 23, "signatureBeforeChange": "  boolean setEventData(int theDrag, DNDEvent event)", "signatureAfterChange": "  boolean setEventData(NSObject draggingState, DNDEvent event)", "diff": ["-boolean setEventData(int theDrag, DNDEvent event) {", "-//\tif (theDrag == 0) return false;", "-//\t", "-//\t// get allowed operations", "-//\tint style = getStyle();", "-//\tint[] outActions = new int[1];", "-//\tOS.GetDragAllowableActions(theDrag, outActions);", "-//\tint operations = osOpToOp(outActions[0]) & style;", "-//\tif (operations == DND.DROP_NONE) return false;", "-//\t", "-//\t//get current operation", "-//\tint operation =  getOperationFromKeyState(theDrag);", "-//\tkeyOperation = operation;", "-//\tif (operation == DND.DROP_DEFAULT) {", "-//\t\t if ((style & DND.DROP_DEFAULT) == 0) {", "-//\t\t\toperation = (operations & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;", "-//\t\t }", "-//\t} else {", "-//\t\tif ((operation & operations) == 0) operation = DND.DROP_NONE;", "-//\t}", "-//\t", "-//\t// get allowed transfer types", "-//\tshort[] numItems = new short[1];", "-//\tOS.CountDragItems(theDrag, numItems);", "-//\tint[] flavors = new int[10];", "-//\tint index = -1;", "-//\t//Get a unique list of flavors", "-//\tfor (short i = 0; i < numItems[0]; i++) {", "-//\t\tint[] theItemRef = new int[1];", "-//\t\tOS.GetDragItemReferenceNumber(theDrag, (short) (i+1), theItemRef);", "-//\t\tshort[] numFlavors = new short[1];", "-//\t\tOS.CountDragItemFlavors(theDrag, theItemRef[0], numFlavors);", "-//\t\tint[] theType = new int[1];", "-//\t\tfor (int j = 0; j < numFlavors[0]; j++) {", "-//\t\t\ttheType[0] = 0;", "-//\t\t\tif (OS.GetFlavorType(theDrag, theItemRef[0], (short) (j+1), theType) == OS.noErr) {", "-//\t\t\t\tboolean unique = true;", "-//\t\t\t\tfor (int k = 0; k < flavors.length; k++) {", "-//\t\t\t\t\tif (flavors[k] == theType[0]) {", "-//\t\t\t\t\t\tunique = false;", "-//\t\t\t\t\t\tbreak;", "-//\t\t\t\t\t}", "-//\t\t\t\t}", "-//\t\t\t\tif (unique) {", "-//\t\t\t\t\tif (index == flavors.length - 1) {", "-//\t\t\t\t\t\tint[] temp = new int[flavors.length + 10];", "-//\t\t\t\t\t\tSystem.arraycopy(flavors, 0, temp, 0, flavors.length);", "-//\t\t\t\t\t\tflavors = temp;", "-//\t\t\t\t\t}", "-//\t\t\t\t\tflavors[++index] = theType[0];", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t}", "-//\t}", "-//\tif (index == -1) return false;", "-//\t", "-//\tTransferData[] dataTypes = new TransferData[index+1];", "-//\tindex = -1;", "-//\tfor (int i = 0; i < dataTypes.length; i++) {", "-//\t\tif (flavors[i] != 0) {", "-//\t\t\tTransferData data = new TransferData();", "-//\t\t\tdata.type = flavors[i];", "-//\t\t\tfor (int j = 0; j < transferAgents.length; j++) {", "-//\t\t\t\tTransfer transfer = transferAgents[j];", "-//\t\t\t\tif (transfer != null && transfer.isSupportedType(data)) {", "-//\t\t\t\t\tdataTypes[++index] = data;", "-//\t\t\t\t\tbreak;", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t}", "-//\t}", "-//\tif (index == -1) return false;", "-//\t", "-//\tif (index < dataTypes.length - 1) {", "-//\t\tTransferData[] temp = new TransferData[index + 1];", "-//\t\tSystem.arraycopy(dataTypes, 0, temp, 0, index + 1);", "-//\t\tdataTypes = temp;", "-//\t}", "-//", "-//\tPoint mouse = new Point();", "-//\tOS.GetDragMouse(theDrag, mouse, null);", "+boolean setEventData(NSObject draggingState, DNDEvent event) {", "+\tif (draggingState == null) return false;", "-\tint operation = DND.DROP_NONE;", "+\t// get allowed operations", "+\tint style = getStyle();", "+\tint allowedActions = draggingState.draggingSourceOperationMask();", "+\tint operations = osOpToOp(allowedActions) & style;", "+\tif (operations == DND.DROP_NONE) return false;", "+", "+\t// get current operation", "+\tint operation = getOperationFromKeyState();", "+\tkeyOperation = operation;", "+\tif (operation == DND.DROP_DEFAULT) {", "+\t\t if ((style & DND.DROP_DEFAULT) == 0) {", "+\t\t\toperation = (operations & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;", "+\t\t }", "+\t} else {", "+\t\tif ((operation & operations) == 0) operation = DND.DROP_NONE;", "+\t}", "+\t", "+\t", "+\t// get allowed transfer types", "+\tNSPasteboard dragPBoard = draggingState.draggingPasteboard();", "+\tNSArray draggedTypes = dragPBoard.types();", "+\tif (draggedTypes == null) return false;", "+\t", "+\tint draggedTypeCount = draggedTypes.count();", "+\t", "+\tTransferData[] dataTypes = new TransferData[draggedTypeCount];", "+\tint index = -1;", "+\tfor (int i = 0; i < draggedTypeCount; i++) {", "+\t\tid draggedType = draggedTypes.objectAtIndex(i);", "+\t\tNSString nativeDataType = new NSString(draggedType);", "+\t\tTransferData data = new TransferData();", "+\t\tdata.type = Transfer.registerType(nativeDataType.getString());", "+\t\t", "+\t\tfor (int j = 0; j < transferAgents.length; j++) {", "+\t\t\tTransfer transfer = transferAgents[j];", "+\t\t\tif (transfer != null && transfer.isSupportedType(data)) {", "+\t\t\t\tdataTypes[++index] = data;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (index == -1) return false;", "+\t", "+\tif (index < dataTypes.length - 1) {", "+\t\tTransferData[] temp = new TransferData[index + 1];", "+\t\tSystem.arraycopy(dataTypes, 0, temp, 0, index + 1);", "+\t\tdataTypes = temp;", "+\t}", "+", "+\t// Convert from window-relative to global coordinates, and flip it.", "+\tNSPoint mouse = draggingState.draggingLocation();", "+\tNSPoint globalMouse = draggingState.draggingDestinationWindow().convertBaseToScreen(mouse);", "+\tNSArray screens = NSScreen.screens();", "+\tNSRect screenRect = new NSScreen(screens.objectAtIndex(0)).frame();", "+\tglobalMouse.y = screenRect.height - globalMouse.y;", "-//\tevent.x = mouse.h;", "-//\tevent.y = mouse.v;", "+\tevent.x = (int)globalMouse.x;", "+\tevent.y = (int)globalMouse.y;", "-//\tevent.dataTypes = dataTypes;", "-//\tevent.dataType = dataTypes[0];", "-//\tevent.operations = operations;", "+\tevent.dataTypes = dataTypes;", "+\tevent.dataType = dataTypes[0];", "+\tevent.operations = operations;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f277dd55bac688d82398b58b59d20e45", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "0ef9617c1012a47a6d1ff1554f6abcb04cfa36ad", "commitAfterChange": "26cde76ce3c88c1f3b47c43e3bb62261f679e704", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void setEventData(int theDrag, DNDEvent event)", "signatureAfterChange": "  private boolean setEventData(int theDrag, DNDEvent event)", "diff": ["-void setEventData(int theDrag, DNDEvent event) {", "-\t", "-\tint[] outActions = new int[1];", "-\tint style = getStyle();", "-\tOS.GetDragAllowableActions(theDrag, outActions);", "-\tint operations = osOpToOp(outActions[0]) & style;", "-\t", "-\t", "-\tif (dataTypes == null) {", "-\t\tshort[] numItems = new short[1];", "-\t\tOS.CountDragItems(theDrag, numItems);", "-\t\tint[] flavors = new int[10];", "-\t\tint index = -1;", "-\t\t//Get a unique list of flavors", "-\t\tfor (short i = 0; i < numItems[0]; i++) {", "-\t\t\tint[] theItemRef = new int[1];", "-\t\t\tOS.GetDragItemReferenceNumber(theDrag, (short) (i+1), theItemRef);", "-\t\t\tshort[] numFlavors = new short[1];", "-\t\t\tOS.CountDragItemFlavors(theDrag, theItemRef[0], numFlavors);", "-\t\t\tint[] theType = new int[1];", "-\t\t\tfor (int j = 0; j < numFlavors.length; j++) {", "-\t\t\t\ttheType[0] = 0;", "-\t\t\t\tif (OS.GetFlavorType(theDrag, theItemRef[0], (short) (j+1), theType) == OS.noErr) {", "-\t\t\t\t\tboolean unique = true;", "-\t\t\t\t\tfor (int k = 0; k < flavors.length; k++) {", "-\t\t\t\t\t\tif (flavors[k] == theType[0]) {", "-\t\t\t\t\t\t\tunique = false;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (unique) {", "-\t\t\t\t\t\tif (index == flavors.length - 1) {", "-\t\t\t\t\t\t\tint[] temp = new int[flavors.length + 10];", "-\t\t\t\t\t\t\tSystem.arraycopy(flavors, 0, temp, 0, flavors.length);", "-\t\t\t\t\t\t\tflavors = temp;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tflavors[++index] = theType[0];", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (index > -1) {", "-\t\t\tindex = -1;", "-\t\t\tdataTypes = new TransferData[flavors.length];", "-\t\t\tfor (int i = 0; i < flavors.length; i++) {", "-\t\t\t\tif (flavors[i] != 0) {", "-\t\t\t\t\tTransferData data = new TransferData();", "-\t\t\t\t\tdata.type = flavors[i];", "-\t\t\t\t\tfor (int j = 0; j < transferAgents.length; j++) {", "-\t\t\t\t\t\tif (transferAgents[j].isSupportedType(data)) {", "-\t\t\t\t\t\t\tdataTypes[++index] = data;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (index == -1) {", "-\t\t\t\tdataTypes = null;", "-\t\t\t} else if (index < dataTypes.length - 1) {", "-\t\t\t\tTransferData[] temp = new TransferData[index + 1];", "-\t\t\t\tSystem.arraycopy(dataTypes, 0, temp, 0, index + 1);", "-\t\t\t\tdataTypes = temp;", "-\t\t\t}", "-\t\t}", "-\t}", "-", "-\tint currentOperation =  getOperationFromKeyState(OS.GetCurrentEventKeyModifiers ());", "-\tif (currentOperation == DND.DROP_DEFAULT && (style & DND.DROP_DEFAULT) == 0){", "-\t\tcurrentOperation = DND.DROP_MOVE;", "-\t}", "-\t", "-\tevent.widget = this;", "-\tevent.time = (int)System.currentTimeMillis();", "-\tPoint mouse = new Point();", "-\tOS.GetDragMouse(theDrag, mouse, null);", "-\tevent.x = mouse.h;", "-\tevent.y = mouse.v;", "-\tevent.feedback = DND.FEEDBACK_SELECT;", "-\tevent.operations = operations;", "-\tevent.dataTypes = dataTypes;", "-\tif (dataTypes != null && dataTypes.length > 0) event.dataType = dataTypes[0];", "-\tevent.detail = DND.DROP_NONE;", "-\tif( (currentOperation & style) == currentOperation) {", "-\t\tevent.detail = currentOperation;", "-\t} ", "-}", "+private boolean setEventData(int theDrag, DNDEvent event) {", "+\tif (theDrag == 0) return false;", "+\t", "+\t// get allowed operations", "+\tint style = getStyle();", "+\tint[] outActions = new int[1];", "+\tOS.GetDragAllowableActions(theDrag, outActions);", "+\tint operations = osOpToOp(outActions[0]) & style;", "+\tif (operations == DND.DROP_NONE) return false;", "+\t", "+\t//get current operation", "+\tint operation =  getOperationFromKeyState(theDrag);", "+\tkeyOperation = operation;", "+\tif (operation == DND.DROP_DEFAULT) {", "+\t\t if ((style & DND.DROP_DEFAULT) == 0) {", "+\t\t\toperation = (operations & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;", "+\t\t }", "+\t} else {", "+\t\tif ((operation & operations) == 0) operation = DND.DROP_NONE;", "+\t}", "+\t", "+\t// get allowed transfer types", "+\tshort[] numItems = new short[1];", "+\tOS.CountDragItems(theDrag, numItems);", "+\tint[] flavors = new int[10];", "+\tint index = -1;", "+\t//Get a unique list of flavors", "+\tfor (short i = 0; i < numItems[0]; i++) {", "+\t\tint[] theItemRef = new int[1];", "+\t\tOS.GetDragItemReferenceNumber(theDrag, (short) (i+1), theItemRef);", "+\t\tshort[] numFlavors = new short[1];", "+\t\tOS.CountDragItemFlavors(theDrag, theItemRef[0], numFlavors);", "+\t\tint[] theType = new int[1];", "+\t\tfor (int j = 0; j < numFlavors.length; j++) {", "+\t\t\ttheType[0] = 0;", "+\t\t\tif (OS.GetFlavorType(theDrag, theItemRef[0], (short) (j+1), theType) == OS.noErr) {", "+\t\t\t\tboolean unique = true;", "+\t\t\t\tfor (int k = 0; k < flavors.length; k++) {", "+\t\t\t\t\tif (flavors[k] == theType[0]) {", "+\t\t\t\t\t\tunique = false;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (unique) {", "+\t\t\t\t\tif (index == flavors.length - 1) {", "+\t\t\t\t\t\tint[] temp = new int[flavors.length + 10];", "+\t\t\t\t\t\tSystem.arraycopy(flavors, 0, temp, 0, flavors.length);", "+\t\t\t\t\t\tflavors = temp;", "+\t\t\t\t\t}", "+\t\t\t\t\tflavors[++index] = theType[0];", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (index == -1) return false;", "+\t", "+\tTransferData[] dataTypes = new TransferData[index+1];", "+\tindex = -1;", "+\tfor (int i = 0; i < dataTypes.length; i++) {", "+\t\tif (flavors[i] != 0) {", "+\t\t\tTransferData data = new TransferData();", "+\t\t\tdata.type = flavors[i];", "+\t\t\tfor (int j = 0; j < transferAgents.length; j++) {", "+\t\t\t\tif (transferAgents[j].isSupportedType(data)) {", "+\t\t\t\t\tdataTypes[++index] = data;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (index == -1) return false;", "+\t", "+\tif (index < dataTypes.length - 1) {", "+\t\tTransferData[] temp = new TransferData[index + 1];", "+\t\tSystem.arraycopy(dataTypes, 0, temp, 0, index + 1);", "+\t\tdataTypes = temp;", "+\t}", "+", "+\tPoint mouse = new Point();", "+\tOS.GetDragMouse(theDrag, mouse, null);", "+\t", "+\tevent.widget = this;", "+\tevent.x = mouse.h;", "+\tevent.y = mouse.v;", "+\tevent.time = (int)System.currentTimeMillis();", "+\tevent.feedback = DND.FEEDBACK_SELECT;", "+\tevent.dataTypes = dataTypes;", "+\tevent.dataType = dataTypes[0];", "+\tevent.operations = operations;", "+\tevent.detail = operation;", "+\t", "+\treturn true;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70cbd83771cf8149cb0cba7e1afbeaa2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "6b0a245288556e7224d3c56682401ca81ba95245", "commitAfterChange": "4dbd09dcd54c5e8b8416ccbe2fdfacc6901be61f", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 14, "signatureBeforeChange": "  boolean setEventData(int theDrag, DNDEvent event)", "signatureAfterChange": "  boolean setEventData(int theDrag, DNDEvent event)", "diff": ["-\tif (theDrag == 0) return false;", "+//\tif (theDrag == 0) return false;", "+//\t", "+//\t// get allowed operations", "+//\tint style = getStyle();", "+//\tint[] outActions = new int[1];", "+//\tOS.GetDragAllowableActions(theDrag, outActions);", "+//\tint operations = osOpToOp(outActions[0]) & style;", "+//\tif (operations == DND.DROP_NONE) return false;", "+//\t", "+//\t//get current operation", "+//\tint operation =  getOperationFromKeyState(theDrag);", "+//\tkeyOperation = operation;", "+//\tif (operation == DND.DROP_DEFAULT) {", "+//\t\t if ((style & DND.DROP_DEFAULT) == 0) {", "+//\t\t\toperation = (operations & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;", "+//\t\t }", "+//\t} else {", "+//\t\tif ((operation & operations) == 0) operation = DND.DROP_NONE;", "+//\t}", "+//\t", "+//\t// get allowed transfer types", "+//\tshort[] numItems = new short[1];", "+//\tOS.CountDragItems(theDrag, numItems);", "+//\tint[] flavors = new int[10];", "+//\tint index = -1;", "+//\t//Get a unique list of flavors", "+//\tfor (short i = 0; i < numItems[0]; i++) {", "+//\t\tint[] theItemRef = new int[1];", "+//\t\tOS.GetDragItemReferenceNumber(theDrag, (short) (i+1), theItemRef);", "+//\t\tshort[] numFlavors = new short[1];", "+//\t\tOS.CountDragItemFlavors(theDrag, theItemRef[0], numFlavors);", "+//\t\tint[] theType = new int[1];", "+//\t\tfor (int j = 0; j < numFlavors[0]; j++) {", "+//\t\t\ttheType[0] = 0;", "+//\t\t\tif (OS.GetFlavorType(theDrag, theItemRef[0], (short) (j+1), theType) == OS.noErr) {", "+//\t\t\t\tboolean unique = true;", "+//\t\t\t\tfor (int k = 0; k < flavors.length; k++) {", "+//\t\t\t\t\tif (flavors[k] == theType[0]) {", "+//\t\t\t\t\t\tunique = false;", "+//\t\t\t\t\t\tbreak;", "+//\t\t\t\t\t}", "+//\t\t\t\t}", "+//\t\t\t\tif (unique) {", "+//\t\t\t\t\tif (index == flavors.length - 1) {", "+//\t\t\t\t\t\tint[] temp = new int[flavors.length + 10];", "+//\t\t\t\t\t\tSystem.arraycopy(flavors, 0, temp, 0, flavors.length);", "+//\t\t\t\t\t\tflavors = temp;", "+//\t\t\t\t\t}", "+//\t\t\t\t\tflavors[++index] = theType[0];", "+//\t\t\t\t}", "+//\t\t\t}", "+//\t\t}", "+//\t}", "+//\tif (index == -1) return false;", "+//\t", "+//\tTransferData[] dataTypes = new TransferData[index+1];", "+//\tindex = -1;", "+//\tfor (int i = 0; i < dataTypes.length; i++) {", "+//\t\tif (flavors[i] != 0) {", "+//\t\t\tTransferData data = new TransferData();", "+//\t\t\tdata.type = flavors[i];", "+//\t\t\tfor (int j = 0; j < transferAgents.length; j++) {", "+//\t\t\t\tTransfer transfer = transferAgents[j];", "+//\t\t\t\tif (transfer != null && transfer.isSupportedType(data)) {", "+//\t\t\t\t\tdataTypes[++index] = data;", "+//\t\t\t\t\tbreak;", "+//\t\t\t\t}", "+//\t\t\t}", "+//\t\t}", "+//\t}", "+//\tif (index == -1) return false;", "+//\t", "+//\tif (index < dataTypes.length - 1) {", "+//\t\tTransferData[] temp = new TransferData[index + 1];", "+//\t\tSystem.arraycopy(dataTypes, 0, temp, 0, index + 1);", "+//\t\tdataTypes = temp;", "+//\t}", "+//", "+//\tPoint mouse = new Point();", "+//\tOS.GetDragMouse(theDrag, mouse, null);", "-\t// get allowed operations", "-\tint style = getStyle();", "-\tint[] outActions = new int[1];", "-\tOS.GetDragAllowableActions(theDrag, outActions);", "-\tint operations = osOpToOp(outActions[0]) & style;", "-\tif (operations == DND.DROP_NONE) return false;", "-\t", "-\t//get current operation", "-\tint operation =  getOperationFromKeyState(theDrag);", "-\tkeyOperation = operation;", "-\tif (operation == DND.DROP_DEFAULT) {", "-\t\t if ((style & DND.DROP_DEFAULT) == 0) {", "-\t\t\toperation = (operations & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;", "-\t\t }", "-\t} else {", "-\t\tif ((operation & operations) == 0) operation = DND.DROP_NONE;", "-\t}", "-\t", "-\t// get allowed transfer types", "-\tshort[] numItems = new short[1];", "-\tOS.CountDragItems(theDrag, numItems);", "-\tint[] flavors = new int[10];", "-\tint index = -1;", "-\t//Get a unique list of flavors", "-\tfor (short i = 0; i < numItems[0]; i++) {", "-\t\tint[] theItemRef = new int[1];", "-\t\tOS.GetDragItemReferenceNumber(theDrag, (short) (i+1), theItemRef);", "-\t\tshort[] numFlavors = new short[1];", "-\t\tOS.CountDragItemFlavors(theDrag, theItemRef[0], numFlavors);", "-\t\tint[] theType = new int[1];", "-\t\tfor (int j = 0; j < numFlavors[0]; j++) {", "-\t\t\ttheType[0] = 0;", "-\t\t\tif (OS.GetFlavorType(theDrag, theItemRef[0], (short) (j+1), theType) == OS.noErr) {", "-\t\t\t\tboolean unique = true;", "-\t\t\t\tfor (int k = 0; k < flavors.length; k++) {", "-\t\t\t\t\tif (flavors[k] == theType[0]) {", "-\t\t\t\t\t\tunique = false;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (unique) {", "-\t\t\t\t\tif (index == flavors.length - 1) {", "-\t\t\t\t\t\tint[] temp = new int[flavors.length + 10];", "-\t\t\t\t\t\tSystem.arraycopy(flavors, 0, temp, 0, flavors.length);", "-\t\t\t\t\t\tflavors = temp;", "-\t\t\t\t\t}", "-\t\t\t\t\tflavors[++index] = theType[0];", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (index == -1) return false;", "-\t", "-\tTransferData[] dataTypes = new TransferData[index+1];", "-\tindex = -1;", "-\tfor (int i = 0; i < dataTypes.length; i++) {", "-\t\tif (flavors[i] != 0) {", "-\t\t\tTransferData data = new TransferData();", "-\t\t\tdata.type = flavors[i];", "-\t\t\tfor (int j = 0; j < transferAgents.length; j++) {", "-\t\t\t\tTransfer transfer = transferAgents[j];", "-\t\t\t\tif (transfer != null && transfer.isSupportedType(data)) {", "-\t\t\t\t\tdataTypes[++index] = data;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (index == -1) return false;", "-\t", "-\tif (index < dataTypes.length - 1) {", "-\t\tTransferData[] temp = new TransferData[index + 1];", "-\t\tSystem.arraycopy(dataTypes, 0, temp, 0, index + 1);", "-\t\tdataTypes = temp;", "-\t}", "-", "-\tPoint mouse = new Point();", "-\tOS.GetDragMouse(theDrag, mouse, null);", "+\tint operation = DND.DROP_NONE;", "-\tevent.x = mouse.h;", "-\tevent.y = mouse.v;", "+//\tevent.x = mouse.h;", "+//\tevent.y = mouse.v;", "-\tevent.dataTypes = dataTypes;", "-\tevent.dataType = dataTypes[0];", "-\tevent.operations = operations;", "+//\tevent.dataTypes = dataTypes;", "+//\tevent.dataType = dataTypes[0];", "+//\tevent.operations = operations;"]}], "num": 32391}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32594642097b2f004f57eda5db8fe825", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8488d8c77d894c06edbc828dabcc803a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TabItem.java", "commitBeforeChange": "942ec679a976f688d77e8b46890c2911dc6ed10b", "commitAfterChange": "57d6c7e9ace75c6a8c830dacb23ac34a3a74ccbc", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public void setControl (Control control)", "signatureAfterChange": " public void setControl (Control control)", "diff": ["-\tif (OS.GTK3) {", "-\t\t/*", "-\t\t* Bug 454936 (see also other 454936 references in TabFolder)", "-\t\t* Architecture Fix:", "-\t\t*  We reparent the child to be a child of the 'tab' rather than tabfolder's parent swtFixed container.", "-\t\t*  Note, this reparenting is only on the GTK side, not on the SWT side.", "-\t\t*", "-\t\t*  Note, GTK2 and GTK3 child nesting behaviour is different now.", "-\t\t*  GTK2:", "-\t\t*    swtFixed", "-\t\t*    |-- GtkNoteBook", "-\t\t*    |   |-- tabLabel1", "-\t\t*    |   |-- tabLabel2", "-\t\t*    |-- swtFixed (child1)  //child is sibling of Notebook", "-\t\t*    |-- swtFixed (child2)", "-\t\t*", "-\t\t*  GTK3+:", "-\t\t*  \tswtFixed", "-\t\t*  \t|--\tGtkNoteBook", "-\t\t*  \t\t|-- tabLabel1", "-\t\t*  \t\t|-- tabLabel2", "-\t\t*  \t\t|-- swtFixed (child1) //child now child of Notebook.", "-\t\t*  \t\t|-- swtFixed (child2)", "-\t\t*", "-\t\t*  This corrects the hierarchy so that children are beneath gtkNotebook (as oppose to", "-\t\t*  being siblings) and thus fixes DND and background color issues.", "-\t\t*  In gtk2, reparenting doesn't function properly (tab content appear blank),", "-\t\t*  so this is a gtk3-specific behavior.", "-\t\t*", "-\t\t*  Note about the reason for reparenting:", "-\t\t*   Reparenting (as oppose to adding widget to a tab in the first place) is neccessary", "-\t\t*   because you can have a situation where you create a widget before you create a tab. e.g", "-\t\t*     TabFolder tabFolder = new TabFolder(shell, 0);", "-\t\t*     Composite composite = new Composite(tabFolder, 0);", "-\t\t*     TabItem tabItem = new TabItem(tabFolder, 0);", "-\t\t*     tabitem.setControl(composite);", "-\t\t*/", "-\t\tOS.g_object_ref (control.topHandle ()); //so that it won't get destroyed due to lack of references.", "-\t\tOS.gtk_container_remove (control.parent.topHandle (), control.topHandle ());", "-\t\tOS.gtk_container_add (pageHandle, control.topHandle ());", "-\t\tOS.g_object_unref (control.topHandle ());", "-\t}", "+\t\tif (control != null && OS.GTK3) {", "+\t\t\t/*", "+\t\t\t* Bug 454936 (see also other 454936 references in TabFolder)", "+\t\t\t* Architecture Fix:", "+\t\t\t*  We reparent the child to be a child of the 'tab' rather than tabfolder's parent swtFixed container.", "+\t\t\t*  Note, this reparenting is only on the GTK side, not on the SWT side.", "+\t\t\t*", "+\t\t\t*  Note, GTK2 and GTK3 child nesting behaviour is different now.", "+\t\t\t*  GTK2:", "+\t\t\t*    swtFixed", "+\t\t\t*    |-- GtkNoteBook", "+\t\t\t*    |   |-- tabLabel1", "+\t\t\t*    |   |-- tabLabel2", "+\t\t\t*    |-- swtFixed (child1)  //child is sibling of Notebook", "+\t\t\t*    |-- swtFixed (child2)", "+\t\t\t*", "+\t\t\t*  GTK3+:", "+\t\t\t*  \tswtFixed", "+\t\t\t*  \t|--\tGtkNoteBook", "+\t\t\t*  \t\t|-- tabLabel1", "+\t\t\t*  \t\t|-- tabLabel2", "+\t\t\t*  \t\t|-- swtFixed (child1) //child now child of Notebook.", "+\t\t\t*  \t\t|-- swtFixed (child2)", "+\t\t\t*", "+\t\t\t*  This corrects the hierarchy so that children are beneath gtkNotebook (as oppose to", "+\t\t\t*  being siblings) and thus fixes DND and background color issues.", "+\t\t\t*  In gtk2, reparenting doesn't function properly (tab content appear blank),", "+\t\t\t*  so this is a gtk3-specific behavior.", "+\t\t\t*", "+\t\t\t*  Note about the reason for reparenting:", "+\t\t\t*   Reparenting (as oppose to adding widget to a tab in the first place) is neccessary", "+\t\t\t*   because you can have a situation where you create a widget before you create a tab. e.g", "+\t\t\t*     TabFolder tabFolder = new TabFolder(shell, 0);", "+\t\t\t*     Composite composite = new Composite(tabFolder, 0);", "+\t\t\t*     TabItem tabItem = new TabItem(tabFolder, 0);", "+\t\t\t*     tabitem.setControl(composite);", "+\t\t\t*/", "+\t\t\tgtk_widget_reparent (control, pageHandle);", "+\t\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dcd015470397e9020bac8a100cc408f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "a56f8f599aaa1c8fdb28f85142db5eee5b0707f4", "commitAfterChange": "5a0d106dbe31583de549b9590dedebd87d738c84", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "  int itemCompareProc (int browser, int itemOne, int itemTwo, int sortProperty)", "signatureAfterChange": "  int itemCompareProc (int browser, int itemOne, int itemTwo, int sortProperty)", "diff": ["-\tif (!(0 < itemOne && itemOne <= items.length)) return OS.noErr;", "-\tif (!(0 < itemTwo && itemTwo <= items.length)) return OS.noErr;", "-\tTreeItem item1 = items [itemOne - 1];", "-\tTreeItem item2 = items [itemTwo - 1];", "+\tTreeItem item1 = _getItem (itemOne, false);", "+\tTreeItem item2 = _getItem (itemTwo, false);"]}], "num": 62999}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "75d6130d0452200b68f959fae429fbe3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "423a0197a8ebae15bf5188dab2a594a8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "ff9455a446c1c0d9507f87b8ba0cd725e34bab5b", "commitAfterChange": "f2838c7c5a06537eec4689ec5c97910861297c54", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "  void releaseHandle ()", "signatureAfterChange": "  void releaseHandle ()", "diff": ["+\t", "+\tif (window == null && currWindowClass != 0) {", "+\t\tint /*long*/ [] embedCount = new int /*long*/ [1];", "+\t\tOS.object_getInstanceVariable(view.window().id, Display.SWT_EMBED_FRAMES, embedCount);", "+\t\tembedCount[0]--;", "+\t\tOS.object_setInstanceVariable(view.window().id, Display.SWT_EMBED_FRAMES, embedCount[0]);", "+\t\t", "+\t\tif (embedCount[0] <= 0) OS.object_setClass(view.window().id, currWindowClass);", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0411d29dc41b3fc4982d574851ee0ae7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "7d76cc622a15faf17862e315d91aaa4dbfe8f148", "commitAfterChange": "ba456bc3459bbfe3ebe7b7f98ce0c3032335e33c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void copyArea(Image image, int x, int y)", "signatureAfterChange": " public void copyArea(Image image, int x, int y)", "diff": ["-\t//NOT IMPLEMENTED", "+\tif (data.control != 0) {", "+\t\tint[] offscreen = new int[1];", "+\t\tOS.HIViewCreateOffscreenImage(data.control, 0, null, offscreen);", "+\t\tcopyArea(image, x, y, offscreen[0]);", "+\t\tif (offscreen[0] != 0) OS.CGImageRelease(offscreen[0]);", "+\t} else if (data.image != null) {", "+\t\tcopyArea(image, x, y, data.image.handle);", "+\t} else if (data.window != 0) {", "+//\t\tint imageHandle = image.handle;", "+//\t\tCGRect rect = new CGRect();", "+//\t\trect.x = x;", "+//\t\trect.y = y;", "+//\t\trect.width = OS.CGImageGetWidth(imageHandle);", "+//\t\trect.height = OS.CGImageGetHeight(imageHandle);", "+//\t\tint[] displays = new int[16];", "+//\t\tint[] count = new int[1];", "+//\t\tif (OS.CGGetDisplaysWithRect(rect, displays.length, displays, count) != 0) return;", "+//\t\tfor (int i = 0; i < count[0]; i++) {", "+//\t\t\tint display = displays[i];", "+//\t\t\tif (OS.CGDisplayCapture(display) == 0) {", "+//\t\t\t\tint address = OS.CGDisplayAddressForPosition (display, x, y);", "+//\t\t\t\tSystem.out.println(address);", "+//\t\t\t\tint colorspace = data.device.colorspace;", "+//\t\t\t\tint provider = OS.CGDataProviderCreateWithData(0, data, dataSize, 0);", "+//\t\t\t\tint srcImage = OS.CGImageCreate(width, height, 8, 32, bpr, colorspace, OS.kCGImageAlphaNoneSkipFirst, provider, null, false, 0);", "+//\t\t\t\tOS.CGDataProviderRelease(provider);", "+//\t\t\t\tcopyArea(image, x, y, srcImage);", "+//\t\t\t\tif (srcImage != 0) OS.CGImageRelease(srcImage);", "+//\t\t\t\tOS.CGDisplayRelease(display);", "+//\t\t\t}", "+//\t\t}", "+\t}\t", "+}"]}], "num": 43952}
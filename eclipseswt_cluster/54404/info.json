{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ebe0fd35990f819af3b8b9c3178c811", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "20dc9430ad94e5ec9b2796350422bbad", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "5e05c860c75fb9386e23dd52fa60db7a593598e0", "commitAfterChange": "82a1c09af233bc8cd6f0c7fc54f4d78ed4a74ece", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void fillGradientRectangle(int x, int y, int width, int height, boolean vertical)", "signatureAfterChange": " public void fillGradientRectangle(int x, int y, int width, int height, boolean vertical)", "diff": ["-\tint xDisplay = data.display;", "-\tint xScreenNum = OS.XDefaultScreen(xDisplay);", "-\tXGCValues values = new XGCValues();", "-\tint fromColor, toColor;", "-\tOS.XGetGCValues(xDisplay, handle, OS.GCForeground | OS.GCBackground, values);", "-\tfromColor = values.foreground;", "-\ttoColor = values.background;", "+", "+\tRGB backgroundRGB, foregroundRGB;", "+\tbackgroundRGB = getBackground().getRGB();", "+\tforegroundRGB = getForeground().getRGB();", "+", "+\tRGB fromRGB, toRGB;", "+\tfromRGB = foregroundRGB;", "+\ttoRGB   = backgroundRGB;", "-\t\tfinal int t = fromColor;", "-\t\tfromColor = toColor;", "-\t\ttoColor = t;", "+\t\tfromRGB = backgroundRGB;", "+\t\ttoRGB   = foregroundRGB;", "-\tif (fromColor == toColor) {", "-\t\tOS.XFillRectangle(xDisplay, data.drawable, handle, x, y, width, height);", "+\tif (fromRGB.equals(toRGB)) {", "+\t\tfillRectangle(x, y, width, height);", "+\tint xDisplay = data.display;", "+\tint xScreenNum = OS.XDefaultScreen(xDisplay);", "-\tXColor xColor = new XColor();", "-\txColor.pixel = fromColor;", "-\tOS.XQueryColor(xDisplay, data.colormap, xColor);", "-\tfinal RGB fromRGB = new RGB((xColor.red & 0xffff) >>> 8, (xColor.green & 0xffff) >>> 8, (xColor.blue & 0xffff) >>> 8);", "-\txColor.pixel = toColor;", "-\tOS.XQueryColor(xDisplay, data.colormap, xColor);", "-\tfinal RGB toRGB = new RGB((xColor.red & 0xffff) >>> 8, (xColor.green & 0xffff) >>> 8, (xColor.blue & 0xffff) >>> 8);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbc33338a5511f707092bceb7448ed21", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/win32/org/eclipse/swt/browser/WebKit.java", "commitBeforeChange": "be91c6378853be89eec60aa864eb2c5076be911c", "commitAfterChange": "9e2702afa6b962fde80f1108a5ec6c9116dd479c", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\tfinal Listener filter = new Listener () {", "-\t\tpublic void handleEvent (Event event) {", "-\t\t\tswitch (event.type) {", "-\t\t\t\tcase SWT.Traverse: {", "-\t\t\t\t\ttraverseNext = event.detail != SWT.TRAVERSE_TAB_PREVIOUS;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t};", "-\t\t\t\tcase SWT.Activate: {", "-\t\t\t\t\tbrowser.getDisplay ().removeFilter (SWT.Traverse, filter);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase SWT.Deactivate: {", "-\t\t\t\t\tbrowser.getDisplay ().removeFilter (SWT.Traverse, filter);", "-\t\t\t\t\tbrowser.getDisplay ().addFilter (SWT.Traverse, filter);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\t\tbrowser.getDisplay ().removeFilter (SWT.Traverse, filter);", "-\t\t\t\t\tonFocus ();", "+\t\t\t\t\tOS.SetFocus (webViewWindowHandle);", "-\tbrowser.addListener (SWT.Activate, listener);", "-\tbrowser.addListener (SWT.Deactivate, listener);", "-\tif (!browser.isFocusControl ()) {", "-\t\tbrowser.getDisplay ().addFilter (SWT.Traverse, filter);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40f88d2c9666c29367780a1104dd228f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "ee543bcb83fee603dbf808a397bfdb1dd9d1075a", "commitAfterChange": "4d0cb802366fe6174a4b8ac8db904ee38766dceb", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void hookMouseListeners(OleAutomation webBrowser, final boolean isTop)", "signatureAfterChange": "  void hookMouseListeners(OleAutomation webBrowser, final boolean isTop)", "diff": ["-\t", "-\tOleListener stopListener = new OleListener () {", "-\t\tpublic void handleEvent(OleEvent event) {", "-\t\t\tunhookMouseListeners (document, isTop);", "-\t\t\tchar[] buffer = (COM.IIDIHTMLDocumentEvents2 + '\\0').toCharArray();", "-\t\t\tGUID guid = new GUID();", "-\t\t\tif (COM.IIDFromString(buffer, guid) == COM.S_OK) {", "-\t\t\t\tsite.removeEventListener(document, guid, COM.DISPID_HTMLDOCUMENTEVENTS_ONSTOP, this);", "-\t\t\t}", "-\t\t}", "-\t};", "-\t * Feature of IE.  ONSTOP is fired for a document that is replaced by navigating to", "-\t * a new document, but it is not fired for a document that is replaced by a Back or", "-\t * Forward operation.  As a result, it's possible that the current document may", "-\t * already have mouse listeners hooked on it from a previous viewing.  Unhook mouse", "-\t * listeners from the current document before hooking our mouse listeners to ensure", "-\t * that multiple sets of events will not be received.", "+\t * In some cases, such as setting the Browser's content from a string,", "+\t * NavigateComplete2 is received multiple times for a top-level document.", "+\t * For cases like this, any previously-hooked mouse listeners must be", "+\t * removed from the document before hooking the new set of listeners,", "+\t * otherwise multiple sets of events will be received.  ", "-\tunhookMouseListeners (document, isTop);", "-\tchar[] buffer = (COM.IIDIHTMLDocumentEvents2 + '\\0').toCharArray();", "-\tGUID guid = new GUID();", "-\tif (COM.IIDFromString(buffer, guid) == COM.S_OK) {", "-\t\tsite.removeEventListener(document, guid, COM.DISPID_HTMLDOCUMENTEVENTS_ONSTOP, stopListener);", "-\t}", "+\tunhookMouseListeners (new OleAutomation[] {document});", "-\tsite.addEventListener(document, COM.IIDIHTMLDocumentEvents2, COM.DISPID_HTMLDOCUMENTEVENTS_ONSTOP, stopListener);", "+", "+\tOleAutomation[] newDocuments = new OleAutomation[documents.length + 1];", "+\tSystem.arraycopy(documents, 0, newDocuments, 0, documents.length);", "+\tnewDocuments[documents.length] = document;", "+\tdocuments = newDocuments;"]}], "num": 54404}
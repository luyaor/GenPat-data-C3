{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba06e88c2ec7d025c954c123e70a3978", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac43d9ffc6f45b302efc2d78941a097b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Scrollable.java", "commitBeforeChange": "73ee56991535559e50652ecc6391cdfa11c08af2", "commitAfterChange": "79b4c494683ecd3609c3ab417806e1f053ca5e78", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  long gtk_scroll_event (long widget, long eventPtr)", "signatureAfterChange": "  long gtk_scroll_event (long widget, long eventPtr)", "diff": ["-\t\tif (gdkEvent.direction == OS.GDK_SCROLL_UP || gdkEvent.direction == OS.GDK_SCROLL_DOWN) {", "-\t\t\tscrollBar = verticalBar;", "+\t\tif (gdkEvent.direction == OS.GDK_SCROLL_SMOOTH) {", "+\t\t\tif (gdkEvent.delta_x != 0) {", "+\t\t\t\tscrollBar = horizontalBar;", "+\t\t\t\tif (scrollBar != null && !gtk_widget_get_visible (scrollBar.handle) && scrollBar.getEnabled()) {", "+\t\t\t\t\tGtkAdjustment adjustment = new GtkAdjustment ();", "+\t\t\t\t\tgtk_adjustment_get (scrollBar.adjustmentHandle, adjustment);", "+\t\t\t\t\tdouble delta = Math.pow(adjustment.page_size, 2.0 / 3.0) * gdkEvent.delta_x;", "+\t\t\t\t\tint value = (int) Math.max(adjustment.lower,", "+\t\t\t\t\t\t\tMath.min(adjustment.upper - adjustment.page_size, adjustment.value + delta));", "+\t\t\t\t\tOS.gtk_adjustment_set_value (scrollBar.adjustmentHandle, value);", "+\t\t\t\t\tresult = 1;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (gdkEvent.delta_y != 0) {", "+\t\t\t\tscrollBar = verticalBar;", "+\t\t\t\tif (scrollBar != null && !gtk_widget_get_visible (scrollBar.handle) && scrollBar.getEnabled()) {", "+\t\t\t\t\tGtkAdjustment adjustment = new GtkAdjustment ();", "+\t\t\t\t\tgtk_adjustment_get (scrollBar.adjustmentHandle, adjustment);", "+\t\t\t\t\tdouble delta = Math.pow(adjustment.page_size, 2.0 / 3.0) * gdkEvent.delta_y;", "+\t\t\t\t\tint value = (int) Math.max(adjustment.lower,", "+\t\t\t\t\t\t\tMath.min(adjustment.upper - adjustment.page_size, adjustment.value + delta));", "+\t\t\t\t\tOS.gtk_adjustment_set_value (scrollBar.adjustmentHandle, value);", "+\t\t\t\t\tresult = 1;", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\tscrollBar = horizontalBar;", "-\t\t}", "-\t\tif (scrollBar != null && !gtk_widget_get_visible (scrollBar.handle) && scrollBar.getEnabled()) {", "-\t\t\tGtkAdjustment adjustment = new GtkAdjustment ();", "-\t\t\tgtk_adjustment_get (scrollBar.adjustmentHandle, adjustment);", "-\t\t\t/* Calculate wheel delta to match GTK+ 2.4 and higher */", "-\t\t\tint wheel_delta = (int) Math.pow(adjustment.page_size, 2.0 / 3.0);", "-\t\t\tif (gdkEvent.direction == OS.GDK_SCROLL_UP || gdkEvent.direction == OS.GDK_SCROLL_LEFT)", "-\t\t\t\twheel_delta = -wheel_delta;", "-\t\t\tint value = (int) Math.max(adjustment.lower,", "-\t\t\t\t\tMath.min(adjustment.upper - adjustment.page_size, adjustment.value + wheel_delta));", "-\t\t\tOS.gtk_adjustment_set_value (scrollBar.adjustmentHandle, value);", "-\t\t\treturn 1;", "+\t\t\tif (gdkEvent.direction == OS.GDK_SCROLL_UP || gdkEvent.direction == OS.GDK_SCROLL_DOWN) {", "+\t\t\t\tscrollBar = verticalBar;", "+\t\t\t} else {", "+\t\t\t\tscrollBar = horizontalBar;", "+\t\t\t}", "+\t\t\tif (scrollBar != null && !gtk_widget_get_visible (scrollBar.handle) && scrollBar.getEnabled()) {", "+\t\t\t\tGtkAdjustment adjustment = new GtkAdjustment ();", "+\t\t\t\tgtk_adjustment_get (scrollBar.adjustmentHandle, adjustment);", "+\t\t\t\t/* Calculate wheel delta to match GTK+ 2.4 and higher */", "+\t\t\t\tint wheel_delta = (int) Math.pow(adjustment.page_size, 2.0 / 3.0);", "+\t\t\t\tif (gdkEvent.direction == OS.GDK_SCROLL_UP || gdkEvent.direction == OS.GDK_SCROLL_LEFT)", "+\t\t\t\t\twheel_delta = -wheel_delta;", "+\t\t\t\tint value = (int) Math.max(adjustment.lower,", "+\t\t\t\t\t\tMath.min(adjustment.upper - adjustment.page_size, adjustment.value + wheel_delta));", "+\t\t\t\tOS.gtk_adjustment_set_value (scrollBar.adjustmentHandle, value);", "+\t\t\t\treturn 1;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3e0e0922b235e04d2de5add02b1f3ab", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DirectoryDialog.java", "commitBeforeChange": "52e20f102db42a003d4de919d7b6feaae485fc2b", "commitAfterChange": "7f8bf8760658a1115ba38f670e13909efd38b188", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public String open ()", "signatureAfterChange": " public String open ()", "diff": ["-\treturn super.open();\r", "+\tbyte [] titleBytes = Converter.wcsToMbcs (null, title, true);\r", "+\thandle = OS.gtk_file_selection_new (titleBytes);\r", "+\tif (parent!=null) {\r", "+\t\tOS.gtk_window_set_transient_for(handle, parent.topHandle());\r", "+\t}\r", "+\tanswer = null;\r", "+\tif (filterPath != null) {\r", "+\t\tbyte [] filterBytes = Converter.wcsToMbcs (null, filterPath, true);\r", "+\t\tOS.gtk_file_selection_set_filename (handle, filterBytes);\r", "+\t}\r", "+\tGtkFileSelection selection = new GtkFileSelection();\r", "+\tOS.memmove(selection, handle);\r", "+\tOS.gtk_file_selection_hide_fileop_buttons (handle);\r", "+\tint fileListParent = OS.gtk_widget_get_parent(selection.file_list);\r", "+\tOS.gtk_widget_hide(selection.file_list);\r", "+\tOS.gtk_widget_hide(fileListParent);\r", "+\tint response = OS.gtk_dialog_run(handle);\r", "+\tif (response == OS.GTK_RESPONSE_OK) {\r", "+\t\tint lpFilename = OS.gtk_file_selection_get_filename (handle);\r", "+\t\tint filenameLength = OS.strlen (lpFilename);\r", "+\t\tbyte [] filenameBytes = new byte [filenameLength];\r", "+\t\tOS.memmove (filenameBytes, lpFilename, filenameLength);\r", "+\t\tString osAnswer = new String( Converter.mbcsToWcs (null, filenameBytes) );\r", "+\t\tif (osAnswer!=null) {\r", "+\t\t\tanswer = osAnswer;\r", "+\t\t\t// add trailing separator if not already present\r", "+\t\t\tint separatorIndex = answer.lastIndexOf(SEPARATOR);\r", "+\t\t\tif (separatorIndex != answer.length() - 1) answer += SEPARATOR;\r", "+\t\t}\r", "+\t}\r", "+\tOS.gtk_widget_destroy(handle);\r", "+\treturn answer;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f0b477d9739be6082aa71f3a1a50c49", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/MessageBox.java", "commitBeforeChange": "129fbfa6925dd2ecc036f96c29029ce6e8775018", "commitAfterChange": "45e7cb56ec54dbaabbc35532642a56d2bbcf1119", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  private void createButtons()", "signatureAfterChange": "  private void createButtons (int alignment)", "diff": ["-private void createButtons() {", "-\tif ((style & SWT.OK) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, \"gtk-ok\", true), SWT.OK);", "-\tif ((style & SWT.CANCEL) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, \"gtk-cancel\", true), SWT.CANCEL);", "-\tif ((style & SWT.YES) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, \"gtk-yes\", true), SWT.YES);", "-\tif ((style & SWT.NO) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, \"gtk-no\", true), SWT.NO);", "-\tif ((style & SWT.ABORT) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, SWT.getMessage(\"SWT_Abort\"), true), SWT.ABORT);", "-\tif ((style & SWT.RETRY) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, SWT.getMessage(\"SWT_Retry\"), true), SWT.RETRY);", "-\tif ((style & SWT.IGNORE) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, SWT.getMessage(\"SWT_Ignore\"), true), SWT.IGNORE);", "+private void createButtons (int alignment) {", "+\tif (alignment == SWT.LEFT) {", "+\t\tif ((style & SWT.OK) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, \"gtk-ok\", true), SWT.OK);", "+\t\tif ((style & SWT.ABORT) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, SWT.getMessage(\"SWT_Abort\"), true), SWT.ABORT);", "+\t\tif ((style & SWT.RETRY) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, SWT.getMessage(\"SWT_Retry\"), true), SWT.RETRY);", "+\t\tif ((style & SWT.YES) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, \"gtk-yes\", true), SWT.YES);", "+\t\tif ((style & SWT.NO) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, \"gtk-no\", true), SWT.NO);", "+\t\tif ((style & SWT.IGNORE) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, SWT.getMessage(\"SWT_Ignore\"), true), SWT.IGNORE);", "+\t\tif ((style & SWT.CANCEL) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, \"gtk-cancel\", true), SWT.CANCEL);", "+\t} else {\t\t", "+\t\tif ((style & SWT.CANCEL) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, \"gtk-cancel\", true), SWT.CANCEL);", "+\t\tif ((style & SWT.OK) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, \"gtk-ok\", true), SWT.OK);", "+\t\tif ((style & SWT.NO) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, \"gtk-no\", true), SWT.NO);", "+\t\tif ((style & SWT.YES) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, \"gtk-yes\", true), SWT.YES);", "+\t\tif ((style & SWT.IGNORE) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, SWT.getMessage(\"SWT_Ignore\"), true), SWT.IGNORE);", "+\t\tif ((style & SWT.RETRY) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, SWT.getMessage(\"SWT_Retry\"), true), SWT.RETRY);", "+\t\tif ((style & SWT.ABORT) != 0) OS.gtk_dialog_add_button(handle, Converter.wcsToMbcs (null, SWT.getMessage(\"SWT_Abort\"), true), SWT.ABORT);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc23319389f441fedc9043c389456723", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "b096bc1b25557993b572960cdeb7c9ef52287a77", "commitAfterChange": "52ce8593b4ebbc671b42f8a9d90fb366dce958a9", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void setControl (Control control)", "signatureAfterChange": " public void setControl (Control control)", "diff": ["+\t/*", "+\t* Feature in Windows.  When a tool bar wraps, tool items", "+\t* with the style BTNS_SEP are used as wrap points.  This", "+\t* means that controls that are placed on top of separator", "+\t* items are not positioned properly.  The fix is to change", "+\t* the tool item style from BTNS_SEP to BTNS_BUTTON, causing", "+\t* the item to wrap like a tool item button.  The new tool", "+\t* item button is disabled to avoid key traversal and the", "+\t* image is set to I_IMAGENONE to avoid getting the first", "+\t* image from the image list.", "+\t*/", "+\tif ((parent.style & SWT.WRAP) != 0) {", "+\t\tboolean changed = false;", "+\t\tint hwnd = parent.handle;", "+\t\tTBBUTTONINFO info = new TBBUTTONINFO ();", "+\t\tinfo.cbSize = TBBUTTONINFO.sizeof;", "+\t\tinfo.dwMask = OS.TBIF_STYLE | OS.TBIF_STATE;", "+\t\tOS.SendMessage (hwnd, OS.TB_GETBUTTONINFO, id, info);", "+\t\tif (control == null) {", "+\t\t\tif ((info.fsStyle & OS.BTNS_SEP) == 0) {", "+\t\t\t\tchanged = true;", "+\t\t\t\tinfo.fsStyle &= ~OS.BTNS_BUTTON;", "+\t\t\t\tinfo.fsStyle |= OS.BTNS_SEP;", "+\t\t\t\tif ((state & DISABLED) != 0) {", "+\t\t\t\t\tinfo.fsState &= ~OS.TBSTATE_ENABLED;", "+\t\t\t\t} else {", "+\t\t\t\t\tinfo.fsState |= OS.TBSTATE_ENABLED;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif ((info.fsStyle & OS.BTNS_SEP) != 0) {", "+\t\t\t\tchanged = true;", "+\t\t\t\tinfo.fsStyle &= ~OS.BTNS_SEP;", "+\t\t\t\tinfo.fsStyle |= OS.BTNS_BUTTON;", "+\t\t\t\tinfo.fsState &= ~OS.TBSTATE_ENABLED;", "+\t\t\t\tinfo.dwMask |= OS.TBIF_IMAGE;", "+\t\t\t\tinfo.iImage = OS.I_IMAGENONE;", "+\t\t\t}", "+\t\t}", "+\t\tif (changed) {", "+\t\t\tOS.SendMessage (hwnd, OS.TB_SETBUTTONINFO, id, info);", "+\t\t\t/*", "+\t\t\t* Bug in Windows.  When TB_SETBUTTONINFO changes the", "+\t\t\t* style of a tool item from BTNS_SEP to BTNS_BUTTON", "+\t\t\t* and the tool bar is wrapped, the tool bar does not", "+\t\t\t* redraw properly.  Windows uses separator items as", "+\t\t\t* wrap points and sometimes draws etching above or", "+\t\t\t* below and entire row.  The fix is to redraw the", "+\t\t\t* tool bar.", "+\t\t\t*/", "+\t\t\tif (OS.SendMessage (hwnd, OS.TB_GETROWS, 0, 0) > 1) {", "+\t\t\t\tOS.InvalidateRect (hwnd, null, true);", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94531c41a03d25df7b9bd60ba6c54cc0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "112135ebf6fa3f329c25a2ce1e629d3b6d0410e9", "commitAfterChange": "165e842fc520954e5381e7d8f37cf34cc184e7fc", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void pack ()", "signatureAfterChange": " public void pack ()", "diff": ["+\tparent.ignoreResize = true;", "+\tint oldWidth = OS.SendMessage (hwnd, OS.LVM_GETCOLUMNWIDTH, index, 0);", "+\t\t\t/*", "+\t\t\t* Feature in Windows.  When LVSCW_AUTOSIZE_USEHEADER is used", "+\t\t\t* with LVM_SETCOLUMNWIDTH to resize the last column, the last", "+\t\t\t* column is expanded to fill the client area.  The fix is to", "+\t\t\t* insert and remove a temporary column last column for the", "+\t\t\t* duration of LVM_SETCOLUMNWIDTH.", "+\t\t\t*/", "+\t\t\tboolean fixWidth = index == parent.getColumnCount () - 1;", "+\t\t\tif (fixWidth) {", "+\t\t\t\tLVCOLUMN lvColumn = new LVCOLUMN ();", "+\t\t\t\tlvColumn.mask = OS.LVCF_WIDTH;", "+\t\t\t\tOS.SendMessage (hwnd, OS.LVM_INSERTCOLUMN, index + 1, lvColumn);", "+\t\t\t}", "+\t\t\tif (fixWidth) {", "+\t\t\t\tOS.SendMessage (hwnd, OS.LVM_DELETECOLUMN, index + 1, 0);", "+\t\t\t}", "+\t\t\t\t/*", "+\t\t\t\t* Feature in Windows.  When LVSCW_AUTOSIZE_USEHEADER is used", "+\t\t\t\t* with LVM_SETCOLUMNWIDTH to resize the last column, the last", "+\t\t\t\t* column is expanded to fill the client area.  The fix is to", "+\t\t\t\t* insert and remove a temporary column last column for the", "+\t\t\t\t* duration of LVM_SETCOLUMNWIDTH.", "+\t\t\t\t*/", "+\t\t\t\tboolean fixWidth = index == parent.getColumnCount () - 1;", "+\t\t\t\tif (fixWidth) {", "+\t\t\t\t\tLVCOLUMN lvColumn = new LVCOLUMN ();", "+\t\t\t\t\tlvColumn.mask = OS.LVCF_WIDTH;", "+\t\t\t\t\tOS.SendMessage (hwnd, OS.LVM_INSERTCOLUMN, index + 1, lvColumn);", "+\t\t\t\t}", "+\t\t\t\tif (fixWidth) {", "+\t\t\t\t\tOS.SendMessage (hwnd, OS.LVM_DELETECOLUMN, index + 1, 0);", "+\t\t\t\t}", "+\tparent.ignoreResize = false;", "+\tint newWidth = OS.SendMessage (hwnd, OS.LVM_GETCOLUMNWIDTH, index, 0);", "+\tif (oldWidth != newWidth) {", "+\t\tsendEvent (SWT.Resize);", "+\t\tif (isDisposed ()) return;", "+\t\tTableColumn [] columns = parent.getColumns ();", "+\t\tfor (int i=index + 1; i<columns.length; i++) {", "+\t\t\tif (!columns [i].isDisposed ()) {", "+\t\t\t\tcolumns [i].sendEvent (SWT.Move);", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e2184f7b029d0146b89121faad80906", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "fe73beca67d6d612e9420f01c445fc8c5c241739", "commitAfterChange": "95f658532be8ae896c1e93f3e3dd62c77d2a9a57", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 70, "signatureBeforeChange": "  LRESULT WM_NCPAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNCPaint (int hwnd, int wParam, int lParam)", "diff": ["-LRESULT WM_NCPAINT (int /*long*/ wParam, int /*long*/ lParam) {", "-\tLRESULT result = super.WM_NCPAINT (wParam, lParam);", "-\tif (result != null) return result;", "-\tif ((state & CANVAS) != 0) {", "-\t\tresult = wmNCPaint (handle, wParam, lParam);", "-\t}", "-\treturn result;", "-}", "+\tLRESULT result = super.wmNCPaint (hwnd, wParam, lParam);", "+\tif (result != null) return result;", "+\tint scrolledHandle = scrolledHandle ();", "+\tif ((state & CANVAS) != 0 || (hwnd == scrolledHandle && handle != scrolledHandle)) {", "+\t\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "+\t\t\tint bits1 = OS.GetWindowLong (hwnd, OS.GWL_EXSTYLE);", "+\t\t\tif ((bits1 & OS.WS_EX_CLIENTEDGE) != 0) {", "+\t\t\t\tint /*long*/ code = 0;", "+\t\t\t\tint bits2 = OS.GetWindowLong (hwnd, OS.GWL_STYLE);", "+\t\t\t\tif ((bits2 & (OS.WS_HSCROLL | OS.WS_VSCROLL)) != 0) {", "+\t\t\t\t\tcode = callWindowProc (hwnd, OS.WM_NCPAINT, wParam, lParam);", "+\t\t\t\t}", "+\t\t\t\tint /*long*/ hDC = OS.GetWindowDC (hwnd);", "+\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\tOS.GetWindowRect (hwnd, rect);", "+\t\t\t\trect.right -= rect.left;", "+\t\t\t\trect.bottom -= rect.top;", "+\t\t\t\trect.left = rect.top = 0;", "+\t\t\t\tint border = OS.GetSystemMetrics (OS.SM_CXEDGE);", "+\t\t\t\tOS.ExcludeClipRect (hDC, border, border, rect.right - border, rect.bottom - border);", "+\t\t\t\tOS.DrawThemeBackground (display.hEditTheme (), hDC, OS.EP_EDITTEXT, OS.ETS_NORMAL, rect, null);", "+\t\t\t\tOS.ReleaseDC (hwnd, hDC);", "+\t\t\t\treturn new LRESULT (code);", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56d3fde41c4fae9d18627ed2b889ca12", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "dbfdea5a6ace7254c9bcb69a7489276f3b9d3e35", "commitAfterChange": "f1fbb8716f7eb6144440edb1c7a2f83e3f63fe10", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 15, "signatureBeforeChange": "  void createItem (MenuItem item, int index)", "signatureAfterChange": "  void createItem (MenuItem item, int index)", "diff": ["-\tNSMenuItem nsItem = null;", "-\tif ((item.style & SWT.SEPARATOR) != 0) {", "-\t\tnsItem = NSMenuItem.separatorItem();", "-\t\tnsItem.retain();", "+\tboolean add = true;", "+\tNSMenuItem nsItem = item.nsItem;", "+\tif (nsItem == null) {", "+\t\tif ((item.style & SWT.SEPARATOR) != 0) {", "+\t\t\tnsItem = NSMenuItem.separatorItem();", "+\t\t\tnsItem.retain();", "+\t\t} else {", "+\t\t\tnsItem = (NSMenuItem)new SWTMenuItem().alloc();", "+\t\t\tNSString empty = NSString.string();", "+\t\t\tnsItem.initWithTitle(empty, 0, empty);", "+\t\t\tnsItem.setTarget(nsItem);", "+\t\t\tnsItem.setAction(OS.sel_sendSelection);", "+\t\t}", "+\t\titem.nsItem = nsItem;", "-\t\tnsItem = (NSMenuItem)new SWTMenuItem().alloc();", "-\t\tNSString empty = NSString.string();", "-\t\tnsItem.initWithTitle(empty, 0, empty);", "+\t\tint /*long*/ cls = OS.object_getClass(nsItem.id);", "+\t\tint /*long*/ dynNSMenuItem_class = display.createMenuItemSubclass(cls, \"SWTSystemMenuItem\", true);", "+\t\tif (cls != dynNSMenuItem_class) {", "+\t\t\tOS.object_setClass(nsItem.id, dynNSMenuItem_class);", "+\t\t}", "+\t\tnsItem.retain();", "+\t\titem.nsItemAction = nsItem.action();", "+\t\titem.nsItemTarget = nsItem.target();", "+", "+\t\t// Sync native item type to Item's style.", "+\t\tint type = SWT.PUSH;", "+\t\tif (nsItem.isSeparatorItem()) type = SWT.SEPARATOR;", "+\t\tif (nsItem.submenu() != null) type = SWT.CASCADE;", "+\t\titem.style |= type;", "+\t\t", "+\t\t// Sync native item text to Item's text.", "+\t\titem.text = nsItem.title().getString();", "+\t\t", "+\t\t// Sync native key equivalent to MenuItem's accelerator.", "+\t\t// The system menu on OS X only uses command and option, so it's", "+\t\t// safe to just check for those two key masks.", "+\t\tint /*long*/ keyMask = nsItem.keyEquivalentModifierMask();", "+\t\tNSString keyEquivString = nsItem.keyEquivalent();", "+\t\tint /*long*/ keyEquiv = 0;", "+\t\tif (keyEquivString != null) {", "+\t\t\tkeyEquiv = keyEquivString.characterAtIndex(0);", "+\t\t\tif ((keyMask & OS.NSCommandKeyMask) != 0) keyEquiv |= SWT.COMMAND;", "+\t\t\tif ((keyMask & OS.NSAlternateKeyMask) != 0) keyEquiv |= SWT.ALT;", "+\t\t\titem.accelerator = (int) keyEquiv;", "+\t\t}", "+\t\tadd = false;", "-\titem.nsItem = nsItem;", "-\tnsMenu.insertItem(nsItem, index);", "+\tif (add) {", "+\t\tnsMenu.insertItem(nsItem, index);", "+\t}", "-\tNSMenu emptyMenu = item.createEmptyMenu ();", "-\tif (emptyMenu != null) {", "-\t\tnsItem.setSubmenu (emptyMenu);", "-\t\temptyMenu.release();", "-\t}", "-\tif (display.menuBar == this) {", "-\t\tNSApplication application = display.application;", "-\t\tNSMenu menubar = application.mainMenu();", "-\t\tif (menubar != null) {", "-\t\t\tnsItem.setMenu(null);", "-\t\t\tmenubar.insertItem(nsItem, index + 1);", "+\tif (add) {", "+\t\tNSMenu emptyMenu = item.createEmptyMenu ();", "+\t\tif (emptyMenu != null) {", "+\t\t\tnsItem.setSubmenu (emptyMenu);", "+\t\t\temptyMenu.release();", "+\t\t}", "+\t\tif (display.menuBar == this) {", "+\t\t\tNSApplication application = display.application;", "+\t\t\tNSMenu menubar = application.mainMenu();", "+\t\t\tif (menubar != null) {", "+\t\t\t\tnsItem.setMenu(null);", "+\t\t\t\tmenubar.insertItem(nsItem, index + 1);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ee9afeeb4ad82641c5b5e37c556c40d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "fabfac354ba77dfbc16a5fdfaff79beee369b36f", "commitAfterChange": "77f06688bfac39a45b447aab335a7b06b05d1b28", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  int kEventMenuDrawItemContent (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventMenuDrawItemContent (int nextHandler, int theEvent, int userData)", "diff": ["-\t\t\tString accelText = item.text.substring (accelIndex);", "-\t\t\tint result = OS.CallNextEventHandler (nextHandler, theEvent);", "-\t\t\tRect rect = new Rect ();", "-\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamMenuItemBounds, OS.typeQDRectangle, null, Rect.sizeof, null, rect);", "-\t\t\tint [] context = new int [1];", "-\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamCGContextRef, OS.typeCGContextRef, null, 4, null, context);", "-\t\t\tchar [] buffer = new char [accelText.length ()];", "-\t\t\taccelText.getChars (0, buffer.length, buffer, 0);", "-\t\t\tint str = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-\t\t\tshort [] extraHeight = new short [1], extraWidth = new short [1];", "-\t\t\tOS.GetThemeMenuItemExtra ((short) OS.kThemeMenuItemHierarchical, extraHeight, extraWidth);", "-\t\t\trect.right -= extraWidth [0] / 2;", "-\t\t\tOS.DrawThemeTextBox (str, (short) OS.kThemeMenuItemCmdKeyFont, OS.kThemeStateActive, false, rect, (short) OS.teFlushRight, context [0]);", "-\t\t\tOS.CFRelease (str);", "-\t\t\treturn result;", "+\t\t\tString accelText = item.text.substring (accelIndex + 1);", "+\t\t\tint length = accelText.length ();", "+\t\t\tif (length != 0) {", "+\t\t\t\tint result = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\t\tRect rect = new Rect ();", "+\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamMenuItemBounds, OS.typeQDRectangle, null, Rect.sizeof, null, rect);", "+\t\t\t\tint [] context = new int [1];", "+\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamCGContextRef, OS.typeCGContextRef, null, 4, null, context);", "+", "+\t\t\t\t/* Draw the key */", "+\t\t\t\tshort left = rect.left;\t", "+\t\t\t\tint modifierIndex = modifierIndex (accelText);", "+\t\t\t\tchar [] buffer = new char [length - modifierIndex - 1];", "+\t\t\t\taccelText.getChars (modifierIndex + 1, length, buffer, 0);", "+\t\t\t\tint font = OS.kThemeMenuItemFont;", "+\t\t\t\tif (buffer.length > 1) font = OS.kThemeMenuItemCmdKeyFont;", "+\t\t\t\tbyte [] family = new byte [256];", "+\t\t\t\tshort [] size = new short [1];", "+\t\t\t\tbyte [] style = new byte [1];", "+\t\t\t\tOS.GetThemeFont ((short) font, (short) OS.smSystemScript, family, size, style);", "+\t\t\t\tFontInfo info = new FontInfo ();", "+\t\t\t\tOS.FetchFontInfo (family[0], size[0], style[0], info);", "+\t\t\t\tint [] metric = new int [1];", "+\t\t\t\tOS.GetThemeMetric (OS.kThemeMetricMenuIconTrailingEdgeMargin, metric);", "+\t\t\t\trect.left = (short) (rect.right - info.widMax - metric [0]);", "+\t\t\t\tint str = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\tOS.DrawThemeTextBox (str, (short) font, OS.kThemeStateActive, false, rect, (short) OS.teFlushDefault, context [0]);", "+\t\t\t\tOS.CFRelease (str);", "+\t\t\t\t", "+\t\t\t\t/* Draw the modifiers */", "+\t\t\t\tif (modifierIndex != -1) {", "+\t\t\t\t\tbuffer = new char [modifierIndex + 1];", "+\t\t\t\t\taccelText.getChars (0, buffer.length, buffer, 0);", "+\t\t\t\t\trect.right = rect.left;", "+\t\t\t\t\trect.left = left;", "+\t\t\t\t\tstr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\t\tOS.DrawThemeTextBox (str, (short) OS.kThemeMenuItemCmdKeyFont, OS.kThemeStateActive, false, rect, (short) OS.teFlushRight, context [0]);", "+\t\t\t\t\tOS.CFRelease (str);", "+\t\t\t\t}", "+\t\t\t\treturn result;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d75dcd48858c1d84ac51f26bec3d5c8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "7bb9625eaf17f2d808c7a3030e773ca59228f497", "commitAfterChange": "e429c1fa2f667ecb3fe93176354bcf3743610780", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 27, "signatureBeforeChange": "  int indexOf (int hItem, int hChild)", "signatureAfterChange": "  int findIndex (int hFirstItem, int hItem)", "diff": ["+int findIndex (int hFirstItem, int hItem) {", "+\tif (hFirstItem == 0) return -1;", "+\tif (hFirstItem == hFirstIndexOf) {", "+\t\tif (hFirstIndexOf == hItem) return 0;", "+\t\tif (hLastIndexOf == hItem) return lastIndexOf;", "+\t\tint hPrevItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_PREVIOUS, hLastIndexOf);", "+\t\tif (hPrevItem == hItem) {", "+\t\t\thLastIndexOf = hPrevItem;", "+\t\t\treturn --lastIndexOf;", "+\t\t}", "+\t\tint hNextItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXT, hLastIndexOf);", "+\t\tif (hNextItem == hItem) {", "+\t\t\thLastIndexOf = hNextItem;", "+\t\t\treturn ++lastIndexOf;", "+\t\t}", "+\t\tint previousIndex = lastIndexOf - 1;", "+\t\twhile (hPrevItem != 0 && hPrevItem != hItem) {", "+\t\t\thPrevItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_PREVIOUS, hPrevItem);", "+\t\t\t--previousIndex;", "+\t\t}", "+\t\tif (hPrevItem == hItem) {", "+\t\t\thLastIndexOf = hPrevItem;", "+\t\t\treturn lastIndexOf = previousIndex;", "+\t\t}", "+\t\tint nextIndex = lastIndexOf + 1;", "+\t\twhile (hNextItem != 0 && hNextItem != hItem) {", "+\t\t\thNextItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXT, hNextItem);", "+\t\t\tnextIndex++;", "+\t\t}", "+\t\tif (hNextItem == hItem) {", "+\t\t\thLastIndexOf = hNextItem;", "+\t\t\treturn lastIndexOf = nextIndex;", "+\t\t}", "+\t\treturn -1;", "+\t}", "+\tint index = 0, hNextItem = hFirstItem;", "+\twhile (hNextItem != 0 && hNextItem != hItem) {", "+\t\thNextItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXT, hNextItem);", "+\t\tindex++;", "+\t}", "+\tif (hNextItem == hItem) {", "+\t\thFirstIndexOf = hFirstItem;", "+\t\thLastIndexOf = hNextItem;", "+\t\treturn lastIndexOf = index;", "+\t}", "+\treturn -1;", "+}", "-int indexOf (int hItem, int hChild) {", "-\tint index = 0;", "-\twhile (hItem != 0 && hItem != hChild) {", "-\t\thItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXT, hItem);", "-\t\tindex++;", "-\t}", "-\treturn hItem == hChild ? index : -1;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "310a37ce96da0164a470274b7b85a771", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "5782a7a6c12d443e5d141047bc86f8591d5777b4", "commitAfterChange": "ff95f186106d1d356c813d019de91a816aab9e4e", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public void drawText (String string, int x, int y, int flags)", "signatureAfterChange": " public void drawText (String string, int x, int y, int flags)", "diff": ["-\t\t//TODO - honor flags", "-\t\tcairo_font_extents_t extents = new cairo_font_extents_t();", "-\t\tCairo.cairo_font_extents(cairo, extents);", "-\t\tdouble baseline = y + extents.ascent;", "-\t\tCairo.cairo_move_to(cairo, x, baseline);", "-\t\tbyte[] buffer = Converter.wcsToMbcs(null, string, true);", "-\t\tCairo.cairo_show_text(cairo, buffer);", "-\t\tCairo.cairo_new_path(cairo);", "-\t\treturn;", "+\t\tif (OS.GTK_VERSION < OS.VERSION(2, 8, 0)) {", "+\t\t\t//TODO - honor flags", "+\t\t\tcairo_font_extents_t extents = new cairo_font_extents_t();", "+\t\t\tCairo.cairo_font_extents(cairo, extents);", "+\t\t\tdouble baseline = y + extents.ascent;", "+\t\t\tCairo.cairo_move_to(cairo, x, baseline);", "+\t\t\tbyte[] buffer = Converter.wcsToMbcs(null, string, true);", "+\t\t\tCairo.cairo_show_text(cairo, buffer);", "+\t\t\tCairo.cairo_new_path(cairo);", "+\t\t\treturn;", "+\t\t}", "+\tif (cairo != 0) {", "+\t\tif ((flags & SWT.DRAW_TRANSPARENT) == 0) {", "+\t\t\tCairo.cairo_save(cairo);", "+\t\t\tif (data.backgroundPattern != null) {", "+\t\t\t\tCairo.cairo_set_source(cairo, data.backgroundPattern.handle);", "+\t\t\t} else {", "+\t\t\t\tGdkGCValues values = new GdkGCValues();", "+\t\t\t\tOS.gdk_gc_get_values(handle, values);", "+\t\t\t\tGdkColor color = new GdkColor();", "+\t\t\t\tcolor.pixel = values.background_pixel;", "+\t\t\t\tint /*long*/ colormap = OS.gdk_colormap_get_system();", "+\t\t\t\tOS.gdk_colormap_query_color(colormap, color.pixel, color);", "+\t\t\t\tCairo.cairo_set_source_rgba(cairo, (color.red & 0xFFFF) / (float)0xFFFF, (color.green & 0xFFFF) / (float)0xFFFF, (color.blue & 0xFFFF) / (float)0xFFFF, data.alpha / (float)0xFF);", "+\t\t\t}", "+\t\t\tint[] width = new int[1], height = new int[1];", "+\t\t\tOS.pango_layout_get_size(data.layout, width, height);", "+\t\t\tCairo.cairo_rectangle(cairo, x, y, OS.PANGO_PIXELS(width[0]), OS.PANGO_PIXELS(height[0]));", "+\t\t\tCairo.cairo_fill(cairo);", "+\t\t\tCairo.cairo_restore(cairo);", "+\t\t}", "+\t\tCairo.cairo_move_to(cairo, x, y);", "+\t\tOS.pango_cairo_show_layout(cairo, data.layout);", "+\t\treturn;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76fd6555b9dcae7321720cd9d4b65d19", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "31688c68d3a4f46048f3504cdb5812f8b9066e99", "commitAfterChange": "bf8ec00c7e0997467c4d951702784d000849bf7f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 28, "signatureBeforeChange": " void createWidget (int index)", "signatureAfterChange": "  private void setMode(int icon)", "diff": ["-}", "-void createWidget (int index) {", "-\tsuper.createWidget (index);", "-\tif ((style & SWT.PUSH) == 0) return;", "-\tif (getShell ().parent == null) return;", "-\t/* AW", "-\tint [] argList = new int [] {OS.XmNdefaultButtonShadowThickness, 1};", "-\tOS.XtSetValues (handle, argList, argList.length / 2);", "+private void setMode(int icon) {", "+\t", "+\tif ((style & SWT.FLAT) != 0 || fImageMode) {", "+\t\tOS.SetBevelButtonContentInfo(handle, OS.kControlContentCIconHandle, icon);", "+\t\treturn;", "+\t}", "+", "+\tif ((style & SWT.PUSH) == 0)", "+\t\treturn;\t// we only transmogrify push buttons", "+\t", "+\tfImageMode= true;", "+\t", "+\tint[] ph= new int[1];", "+\tint rc= OS.GetSuperControl(handle, ph);", "+\tif (rc != OS.kNoErr)", "+\t\tSystem.out.println(\"Button.setMode: \" + rc);", "+\tint parentHandle= ph[0];", "+\t", "+\tMacRect bounds= new MacRect();", "+\tOS.GetControlBounds(handle, bounds.getData());", "+\t", "+\tint index= MacUtil.indexOf(parentHandle, handle);", "+\tif (index < 0)", "+\t\tSystem.out.println(\"Button.setMode: can't find handle\");", "+\tWidget w= WidgetTable.get(handle);", "+\tWidgetTable.remove(handle);", "+\tOS.DisposeControl(handle);", "+\t", "+\tshort type= icon != 0 ? OS.kControlBevelButtonNormalBevelProc : OS.kControlPushButtonProc;", "+\t\t", "+    handle= MacUtil.newControl(parentHandle, index, (short)0, (short)0, (short)0, type);", "+\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+\tWidgetTable.put(handle, w);", "+\t", "+\tOS.SetControlBounds(handle, bounds.getData());", "+\tOS.SetBevelButtonContentInfo(handle, OS.kControlContentCIconHandle, icon);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "917b65ac2878bbf73697a25aeb363c45", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "abcda6211c0bcc3a908332242b9d1409108c82ba", "commitAfterChange": "04de3fc7ae68f9215fb3d4fcc47ca5754e572bac", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "  int processMouseMove (int callData, int arg1, int int2)", "signatureAfterChange": "  int processMouseMove (int callData, int int1, int int2)", "diff": ["+", "+int processMouseMove (int callData, int int1, int int2) {", "+\tsuper.processMouseMove (callData, int1, int2);", "+\tint [] state = new int [1];", "+\tOS.gdk_event_get_state (callData, state);", "+\tif (!dragging || (state [0] & OS.GDK_BUTTON1_MASK) == 0) return 0;", "+\tint x = OS.GTK_WIDGET_X (handle);", "+\tint y = OS.GTK_WIDGET_Y (handle);", "+\tint width = OS.GTK_WIDGET_WIDTH (handle);", "+\tint height = OS.GTK_WIDGET_HEIGHT (handle);", "+\tint border = 0, parentBorder = 0;", "+\tint parentWidth = OS.GTK_WIDGET_WIDTH (parent.handle);", "+\tint parentHeight = OS.GTK_WIDGET_WIDTH (parent.handle);", "+\tdouble[] px = new double [1], py = new double [1];", "+\tOS.gdk_event_get_coords (callData, px, py);", "+\tint newX = lastX, newY = lastY;", "+\tif ((style & SWT.VERTICAL) != 0) {", "+\t\tnewX = Math.min (Math.max (0, (int)px [0] + x - startX - parentBorder), parentWidth - width);", "+\t} else {", "+\t\tnewY = Math.min (Math.max (0, (int)py[0] + y - startY - parentBorder), parentHeight - height);", "+\t}", "+\tif (newX == lastX && newY == lastY) return 0;", "+\tdrawBand (lastX, lastY, width, height);", "+\t/* The event must be sent because its doit flag is used. */", "+\tEvent event = new Event ();", "+\tevent.detail = SWT.DRAG;", "+\tevent.time = OS.gdk_event_get_time (callData);", "+\tevent.x = newX;  event.y = newY;", "+\tevent.width = width;  event.height = height;", "+\t/*", "+\t * It is possible (but unlikely) that client code could have disposed", "+\t * the widget in the selection event.  If this happens end the processing", "+\t * of this message by returning.", "+\t */", "+\tsendEvent (SWT.Selection, event);", "+\tif (isDisposed ()) return 0;", "+\tif (event.doit) {", "+\t\tlastX = event.x;  lastY = event.y;", "+//\t\tOS.XmUpdateDisplay (handle);", "+\t\tdrawBand (lastX, lastY, width, height);", "+\t}", "+\treturn 0;", "+}", "-", "-int processMouseMove (int callData, int arg1, int int2) {", "-\tsuper.processMouseMove (callData, arg1, int2);", "-\tif (!dragging) return 0;", "-\t", "-\t/* Get the coordinates where the event happened, relative to the receiver */", "-\tdouble[] px = new double[1];", "-\tdouble[] py = new double[1];", "-\tOS.gdk_event_get_coords(callData, px, py);", "-\tint x = (int)(px[0]);", "-\tint y = (int)(py[0]);", "-\t", "-\tint width = OS.GTK_WIDGET_WIDTH(handle);", "-\tint height = OS.GTK_WIDGET_HEIGHT(handle);", "-", "-\tif ((style & SWT.VERTICAL) != 0) {", "-\t\t/* Erase the old one */", "-\t\tint oldDrawX = originX + lastX;", "-\t\tdrawBand(oldDrawX, originY, width, height);", "-\t\t/* Draw the new */", "-\t\tint drawX = originX + x;", "-\t\tdrawBand(drawX, originY, width, height);", "-\t\tlastX = x;", "-\t} else {", "-\t\t/* Erase the old one */", "-\t\tint oldDrawY = originY + lastY;", "-\t\tdrawBand(originX, oldDrawY, width, height);", "-\t\t/* Draw the new */", "-\t\tint drawY = originY + y;", "-\t\tdrawBand(originX, drawY, width, height);", "-\t\tlastY = y;", "-\t}", "-\treturn 0;", "-}"]}], "num": 36069}
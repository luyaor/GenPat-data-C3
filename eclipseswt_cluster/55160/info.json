{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1164c5ead93bdb3e38b409405a87411d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "105c70e3d621dfe2523f0dc31f1e127a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ce2f35c3f6b1d0b5778f68f011b1d8668d3c5c72", "commitAfterChange": "00bee382096a1807d86474fed7c933116a37eeb8", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 93, "signatureBeforeChange": "\r int drawText(String text, int lineOffset, int startOffset, int length, StyleRange[] lineStyles, int paintX, int paintY, GC gc)", "signatureAfterChange": "\r int drawText(String text, int lineOffset, int startOffset, int length, int paintX, int paintY, GC gc, StyledTextBidi bidi)", "diff": ["-int drawText(String text, int lineOffset, int startOffset, int length, StyleRange[] lineStyles, int paintX, int paintY, GC gc) {\r", "+int drawText(String text, int lineOffset, int startOffset, int length, int paintX, int paintY, GC gc, StyledTextBidi bidi) {\r", "-\tStyleRange[] styles;\r", "-\tFontData fontData = gc.getFont().getFontData()[0];\r", "-\t\t\tif (lineStyles != null) {\r", "-\t\t\t\tpaintX = styledTextWidth(tabSegment, lineOffset + i, lineStyles, paintX, paintY, gc, true);\r", "+\t\t\tif (bidi != null) {\r", "+\t\t\t\tpaintX = bidi.drawBidiText(i, tabIndex - i, -horizontalScrollOffset, paintY);\r", "-\t\t\t\tfontData = setLineFont(gc, fontData, SWT.NORMAL);\r", "-\t\t\t}\r", "-\t\t\tif (tabIndex != endOffset && tabWidth > 0) {\r", "-\t\t\t\tpaintX += tabWidth;\r", "-\t\t\t\tpaintX -= paintX % tabWidth;\r", "+\t\t\t\tif (tabIndex != endOffset && tabWidth > 0) {\r", "+\t\t\t\t\tpaintX += tabWidth;\r", "+\t\t\t\t\tpaintX -= paintX % tabWidth;\r", "+\t\t\t\t}\r", "-\t\tif (tabWidth > 0) {\r", "+\t\tif (tabWidth > 0 && isBidi() == false) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5d67dca376fc700cdbdd721b560c390", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT PI/carbon/org/eclipse/swt/internal/carbon/OS.java", "commitBeforeChange": "99e5f8f60bd4f2b02ed6bcd9cbe99223ea735fbe", "commitAfterChange": "1ada0f1f2bcb03f9d1968e500fd4c6e92dfc8db7", "methodNumberBeforeChange": 394, "methodNumberAfterChange": 395, "signatureBeforeChange": " \t\t\t \tpublic static int OSType(String s)", "signatureAfterChange": " \tpublic static native short HasDepth(int gdHandle, short depth, short whichFlags, short flags);", "diff": ["-\t\t\t", "-\tpublic static int OSType(String s) {", "-\t\treturn ((s.charAt(0) & 0xff) << 24) | ((s.charAt(1) & 0xff) << 16) | ((s.charAt(2) & 0xff) << 8) | (s.charAt(3) & 0xff);", "-\t}", "+\tpublic static native short HasDepth(int gdHandle, short depth, short whichFlags, short flags);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0751207b031ea84bbb33167f6463cfea", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Scale.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 1, "signatureBeforeChange": " int processSelection (Object callData)", "signatureAfterChange": "  int actionProc (int theControl, int partCode)", "diff": ["+int actionProc (int theControl, int partCode) {", "+\tEvent event = new Event ();", "+\tsendEvent (SWT.Selection);", "+\tDisplay display = getDisplay ();", "+\tdisplay.update ();", "+\treturn 0;", "+}", "-}", "-int processSelection (Object callData) {", "-\tMacControlEvent macEvent= (MacControlEvent) callData;", "-", "-\tEvent event = new Event ();", "-    if (macEvent.getPartCode() == OS.kControlIndicatorPart) {\t// end of drag or continuos drag", "-\t\tif (macEvent.isMouseDown()) {", "-\t\t\tevent.detail = SWT.DRAG;\t// continuos drag", "-\t\t} else {", "-\t\t\t/*", "-\t\t\t * Do not set the detail field to SWT.DRAG", "-\t\t\t * to indicate that the dragging has ended.", "-\t\t\t */", "-\t\t}", "-    }", "-\t", "-\tsendEvent (SWT.Selection, event);", "-\t", "-\t/* AW FIXME: may be we need the following here too...", "-\tif (macEvent.isMouseDown()) {", "-\t\tint wHandle= OS.GetControlOwner(handle);", "-\t\tif (wHandle != 0) {", "-\t\t\tgetDisplay().updateWindow(wHandle);", "-\t\t}", "-\t}", "-\t*/", "-\treturn 0;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a905fe7023cba1e04451609807db8a0e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "7626dd6837c79b3d44c889ada194bd6cf6fefbaf", "commitAfterChange": "f490c340b8fb06c8878d22853dfd8ecb77079ee9", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 88, "signatureBeforeChange": "  boolean setScrollWidth (TableItem items[], boolean callMeasureItem, boolean isAllItems)", "signatureAfterChange": "  boolean setScrollWidth (TableItem [] items, boolean set)", "diff": ["-", "-boolean setScrollWidth (TableItem items[], boolean callMeasureItem, boolean isAllItems) {", "-//\tif (currentItem != null) {", "-//\t\tif (currentItem != item) fixScrollWidth = true;", "-//\t\treturn false;", "-//\t}", "-\tif (/*ignoreRedraw ||*/ drawCount != 0) return false;", "-\tint newWidth = 0;", "+", "+boolean setScrollWidth (TableItem [] items, boolean set) {", "+\tif (columnCount != 0) return false;", "+\tif (drawCount != 0) return false;", "+\tif (currentItem != null) {", "+\t\tfixScrollWidth = true;", "+\t\treturn false;", "+\t}", "+\tGC gc = new GC (this);", "+\tint newWidth = 0;", "-\t\tTableItem item = items[i];", "-\t\tif (item != null && !item.isDisposed ()) {", "-\t\t\tnewWidth = Math.max (newWidth, item.calculateWidth (0, gc, callMeasureItem));", "-\t\t\tif (isDisposed ()) {", "-\t\t\t\tgc.dispose ();", "-\t\t\t\treturn false;", "-\t\t\t}", "+\t\tTableItem item = items [i];", "+\t\tif (item != null) {", "+\t\t\tnewWidth = Math.max (newWidth, item.calculateWidth (0, gc));", "-\tnewWidth += getInsetWidth ();", "-\t/*", "-\t * update the column width either if it needs to grow, or if all items in the Table", "-\t * were measured (in which case it is safe to shrink the column if appropriate)", "-\t */", "-\tif ((firstColumn.width () < newWidth) || isAllItems) {", "-\t\tfirstColumn.setWidth (newWidth);", "+\tif (!set) {", "+\t\tint oldWidth = (int)firstColumn.width ();", "+\t\tif (oldWidth >= newWidth) return false;", "+\tfirstColumn.setWidth (newWidth);"]}], "num": 55160}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "868327b18811461ea70c157613ab26bb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09bc15e8cdb26b47685d1ff24b68d8f0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CLabel.java", "commitBeforeChange": "65c87a607b760458761f1e972f7bac14bae5d4cc", "commitAfterChange": "3eceed62c4e91355e0aea7f92e2c2057accd054b", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 29, "signatureBeforeChange": "  void onPaint(PaintEvent event)", "signatureAfterChange": "  void onPaint(PaintEvent event)", "diff": ["-\tint availableWidth = Math.max(0, rect.width - 2*hIndent);", "+\tint availableWidth = Math.max(0, rect.width - (leftMargin + rightMargin));", "-\tint x = rect.x + hIndent;", "+\tint x = rect.x + leftMargin;", "-\t\tx = rect.width - hIndent - extent.x;", "+\t\tx = rect.width - rightMargin - extent.x;", "+\t/*", "+\t * Compute text height and image height. If image height is more than", "+\t * the text height, draw image starting from top margin. Else draw text", "+\t * starting from top margin.", "+\t */", "+\tRectangle imageRect = null;", "+\tint lineHeight = 0, textHeight = 0, imageHeight = 0;", "+\t", "+\tif (img != null) {", "+\t    imageRect = img.getBounds();", "+\t    imageHeight = imageRect.height;", "+\t}", "+\tif (lines != null) {", "+\t    lineHeight = gc.getFontMetrics().getHeight();", "+\t    textHeight = lines.length * lineHeight;", "+\t}", "+\t", "+\tint imageY = 0, midPoint = 0, lineY = 0;", "+\tif (imageHeight > textHeight ) {", "+\t    if (topMargin == DEFAULT_MARGIN && bottomMargin == DEFAULT_MARGIN) imageY = rect.y + (rect.height - imageHeight) / 2;", "+\t    else imageY = topMargin;", "+\t    midPoint = imageY + imageHeight/2;", "+\t    lineY = midPoint - textHeight / 2;", "+\t}", "+\telse {", "+\t    if (topMargin == DEFAULT_MARGIN && bottomMargin == DEFAULT_MARGIN) lineY = rect.y + (rect.height - textHeight) / 2;", "+\t    else lineY = topMargin;", "+\t    midPoint = lineY + textHeight/2;", "+\t    imageY = midPoint - imageHeight / 2;", "+\t}", "+\t", "-\t\tRectangle imageRect = img.getBounds();", "-\t\tgc.drawImage(img, 0, 0, imageRect.width, imageRect.height, ", "-\t\t                x, (rect.height-imageRect.height)/2, imageRect.width, imageRect.height);", "+\t\tgc.drawImage(img, 0, 0, imageRect.width, imageHeight, ", "+\t\t                x, imageY, imageRect.width, imageHeight);", "+\t", "-\t\tint lineHeight = gc.getFontMetrics().getHeight();", "-\t\tint textHeight = lines.length * lineHeight;", "-\t\tint lineY = Math.max(vIndent, rect.y + (rect.height - textHeight) / 2);", "-\t\t\t\t\tlineX = Math.max(x, rect.x + rect.width - hIndent - lineWidth);", "+\t\t\t\t\tlineX = Math.max(x, rect.x + rect.width - rightMargin - lineWidth);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38c282d74203581443829c11ed487e8a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem2.java", "commitBeforeChange": "0bdde811530233a98417bfd51a03e863bcbbc1b6", "commitAfterChange": "6fe853b29d6dcedf69f8209e4b19fa3cf0a85a8b", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " void paint (GC gc, TreeColumn column, boolean paintCellContent)", "signatureAfterChange": " void paint (GC gc, TreeColumn column, boolean paintCellContent)", "diff": ["-\tint y = parent.getItemY (this);", "-\tint padding = parent.getCellPadding ();", "-\tint itemHeight = parent.getItemHeight ();", "+\t/* if this cell is completely to the right of the client area then there's no need to paint it */", "+\tRectangle clientArea = parent.getClientArea ();", "+\tif (clientArea.x + clientArea.width < x) return;", "+", "+", "+\t/* if this cell is completely to the left of the client area then there's no need to paint it */", "+\tif (cellRightX < 0) return;", "+", "+\t/* restrict the clipping region to the full cell */", "+\tgc.setClipping (x, cellBounds.y, cellRightX - x, cellBounds.height);", "+\tint y = parent.getItemY (this);", "+\tint padding = parent.getCellPadding ();", "+\tint itemHeight = parent.getItemHeight ();", "+", "-\tif (background != null && !background.equals (parent.getBackground ())) {", "+\tColor background = getBackground (columnIndex);", "+\tif (background != parent.getBackground ()) {", "- ", "-\tRectangle oldClipping = gc.getClipping ();", "-\t\t", "+", "-\t\t/* while painting the cell's contents restrict the clipping region */", "-\t\tgc.setClipping (x, cellBounds.y, cellRightX - x, cellBounds.height);", "-", "-\t\t", "+", "-\t\t", "+", "-\t/* while painting the cell's contents restrict the clipping region */", "+\t/* while painting the cell's content restrict the clipping region */", "-\t\t\timageArea.x, imageArea.y,\t/* dest x, y */", "-\t\t\timageArea.width, imageArea.height);\t\t\t\t\t/* dest width, height */", "+\t\t\timageArea.x, imageArea.y,\t\t\t\t/* dest x, y */", "+\t\t\timageArea.width, imageArea.height);\t\t/* dest width, height */", "-\tif (text.length() > 0) {", "+\tif (text.length () > 0) {", "-\t\tif (font != null) {", "+\t\tFont font = getFont (columnIndex);", "+\t\tif (font != parent.getFont ()) {", "-\t\t\tif (foreground != null) {", "+\t\t\tColor foreground = getForeground (columnIndex);", "+\t\t\tif (foreground != parent.getForeground ()) {", "-\t\tgc.drawText (text, getTextX (columnIndex), y + (itemHeight - fontHeight) / 2, true);", "+\t\tgc.drawString (text, getTextX (columnIndex), y + (itemHeight - fontHeight) / 2, true);", "-\t", "-\t/* restore the original clipping */", "-\tgc.setClipping (oldClipping);"]}], "num": 24378}
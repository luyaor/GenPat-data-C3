{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "208103d7267db49cc4a5da30bfb96daf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad84d94e320ab41ca80e369ec8c75a86", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TableDragSourceEffect.java", "commitBeforeChange": "5a8028d0064ece2db29042b455196c98ef644e7b", "commitAfterChange": "d9530391850eebbeb2618f65fb4c27b05c593e05", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tImage getDragSourceImage(DragSourceEvent event)", "signatureAfterChange": " \t \tImage getDragSourceImage(DragSourceEvent event)", "diff": ["-\t\tdragSourceImage = null;\t\t", "+\t\tdragSourceImage = null;", "+\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (5, 1)) {", "+\t\t\tSHDRAGIMAGE shdi = new SHDRAGIMAGE();", "+\t\t\tint DI_GETDRAGIMAGE = OS.RegisterWindowMessage (new TCHAR (0, \"ShellGetDragImage\", true)); //$NON-NLS-1$", "+\t\t\tif (OS.SendMessage (control.handle, DI_GETDRAGIMAGE, 0, shdi) != 0) {", "+\t\t\t\tevent.x += shdi.ptOffset.x;", "+\t\t\t\tevent.y += shdi.ptOffset.y;", "+\t\t\t\tint /*long */ hImage = shdi.hbmpDragImage;", "+\t\t\t\tif (hImage != 0) {", "+\t\t\t\t\tBITMAP bm = new BITMAP ();", "+\t\t\t\t\tOS.GetObject (hImage, BITMAP.sizeof, bm);", "+\t\t\t\t\tint srcWidth = bm.bmWidth;", "+\t\t\t\t\tint srcHeight = bm.bmHeight;", "+\t\t\t\t\t", "+\t\t\t\t\t/* Create resources */", "+\t\t\t\t\tint /*long*/ hdc = OS.GetDC (0);", "+\t\t\t\t\tint /*long*/ srcHdc = OS.CreateCompatibleDC (hdc);", "+\t\t\t\t\tint /*long*/ oldSrcBitmap = OS.SelectObject (srcHdc, hImage);", "+\t\t\t\t\tint /*long*/ memHdc = OS.CreateCompatibleDC (hdc);", "+\t\t\t\t\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER ();", "+\t\t\t\t\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;", "+\t\t\t\t\tbmiHeader.biWidth = srcWidth;", "+\t\t\t\t\tbmiHeader.biHeight = -srcHeight;", "+\t\t\t\t\tbmiHeader.biPlanes = 1;", "+\t\t\t\t\tbmiHeader.biBitCount = 32;", "+\t\t\t\t\tbmiHeader.biCompression = OS.BI_RGB;", "+\t\t\t\t\tbyte []\tbmi = new byte[BITMAPINFOHEADER.sizeof];", "+\t\t\t\t\tOS.MoveMemory (bmi, bmiHeader, BITMAPINFOHEADER.sizeof);", "+\t\t\t\t\tint /*long*/ [] pBits = new int /*long*/ [1];", "+\t\t\t\t\tint /*long*/ memDib = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "+\t\t\t\t\tif (memDib == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\t\tint /*long*/ oldMemBitmap = OS.SelectObject (memHdc, memDib);", "+", "+\t\t\t\t\tBITMAP dibBM = new BITMAP ();", "+\t\t\t\t\tOS.GetObject (memDib, BITMAP.sizeof, dibBM);", "+\t\t\t\t\tint sizeInBytes = dibBM.bmWidthBytes * dibBM.bmHeight;", "+", "+\t\t\t\t \t/* Get the foreground pixels */", "+\t\t\t\t \tOS.BitBlt (memHdc, 0, 0, srcWidth, srcHeight, srcHdc, 0, 0, OS.SRCCOPY);", "+\t\t\t\t \tbyte[] srcData = new byte [sizeInBytes];", "+\t\t\t\t\tOS.MoveMemory (srcData, dibBM.bmBits, sizeInBytes);", "+", "+\t\t\t\t\tbyte[] alphaData = new byte[srcWidth * srcHeight];", "+\t\t\t\t\tint spinc = dibBM.bmWidthBytes - srcWidth * 4;", "+\t\t\t\t\tint ap = 0, sp = 3;", "+\t\t\t\t\tfor (int y = 0; y < srcHeight; ++y) {", "+\t\t\t\t\t\tfor (int x = 0; x < srcWidth; ++x) {", "+\t\t\t\t\t\t\talphaData [ap++] = srcData [sp];", "+\t\t\t\t\t\t\tsp += 4;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tsp += spinc;", "+\t\t\t\t\t}", "+\t\t\t\t\tPaletteData palette = new PaletteData(0xFF00, 0xFF0000, 0xFF000000);", "+\t\t\t\t\tImageData data = new ImageData(srcWidth, srcHeight, bm.bmBitsPixel, palette, bm.bmWidthBytes, srcData);", "+\t\t\t\t\tdata.alphaData = alphaData;", "+\t\t\t\t\tdata.transparentPixel = shdi.crColorKey;", "+\t\t\t\t\tdragSourceImage = new Image(control.getDisplay(), data);", "+\t\t\t\t\tOS.SelectObject (memHdc, oldMemBitmap);", "+\t\t\t\t\tOS.DeleteDC (memHdc);", "+\t\t\t\t\tOS.DeleteObject (memDib);", "+\t\t\t\t\tOS.SelectObject (srcHdc, oldSrcBitmap);", "+\t\t\t\t\tOS.DeleteDC (srcHdc);", "+\t\t\t\t\tOS.ReleaseDC (0, hdc);", "+\t\t\t\t\treturn dragSourceImage;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn null;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c174154d8f2d8b33bdac4e3808d40813", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TreeDragSourceEffect.java", "commitBeforeChange": "5a8028d0064ece2db29042b455196c98ef644e7b", "commitAfterChange": "d9530391850eebbeb2618f65fb4c27b05c593e05", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tImage getDragSourceImage(DragSourceEvent event)", "signatureAfterChange": "  \tImage getDragSourceImage(DragSourceEvent event)", "diff": ["-\t\tdragSourceImage = null;\t\t", "+\t\tdragSourceImage = null;", "+\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (5, 1)) {", "+\t\t\tSHDRAGIMAGE shdi = new SHDRAGIMAGE();", "+\t\t\tint DI_GETDRAGIMAGE = OS.RegisterWindowMessage (new TCHAR (0, \"ShellGetDragImage\", true)); //$NON-NLS-1$", "+\t\t\tif (OS.SendMessage (control.handle, DI_GETDRAGIMAGE, 0, shdi) != 0) {", "+\t\t\t\tevent.x += shdi.ptOffset.x;", "+\t\t\t\tevent.y += shdi.ptOffset.y;", "+\t\t\t\tint /*long */ hImage = shdi.hbmpDragImage;", "+\t\t\t\tif (hImage != 0) {", "+\t\t\t\t\tBITMAP bm = new BITMAP ();", "+\t\t\t\t\tOS.GetObject (hImage, BITMAP.sizeof, bm);", "+\t\t\t\t\tint srcWidth = bm.bmWidth;", "+\t\t\t\t\tint srcHeight = bm.bmHeight;", "+\t\t\t\t\t", "+\t\t\t\t\t/* Create resources */", "+\t\t\t\t\tint /*long*/ hdc = OS.GetDC (0);", "+\t\t\t\t\tint /*long*/ srcHdc = OS.CreateCompatibleDC (hdc);", "+\t\t\t\t\tint /*long*/ oldSrcBitmap = OS.SelectObject (srcHdc, hImage);", "+\t\t\t\t\tint /*long*/ memHdc = OS.CreateCompatibleDC (hdc);", "+\t\t\t\t\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER ();", "+\t\t\t\t\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;", "+\t\t\t\t\tbmiHeader.biWidth = srcWidth;", "+\t\t\t\t\tbmiHeader.biHeight = -srcHeight;", "+\t\t\t\t\tbmiHeader.biPlanes = 1;", "+\t\t\t\t\tbmiHeader.biBitCount = 32;", "+\t\t\t\t\tbmiHeader.biCompression = OS.BI_RGB;", "+\t\t\t\t\tbyte []\tbmi = new byte[BITMAPINFOHEADER.sizeof];", "+\t\t\t\t\tOS.MoveMemory (bmi, bmiHeader, BITMAPINFOHEADER.sizeof);", "+\t\t\t\t\tint /*long*/ [] pBits = new int /*long*/ [1];", "+\t\t\t\t\tint /*long*/ memDib = OS.CreateDIBSection (0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);", "+\t\t\t\t\tif (memDib == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\t\tint /*long*/ oldMemBitmap = OS.SelectObject (memHdc, memDib);", "+", "+\t\t\t\t\tBITMAP dibBM = new BITMAP ();", "+\t\t\t\t\tOS.GetObject (memDib, BITMAP.sizeof, dibBM);", "+\t\t\t\t\tint sizeInBytes = dibBM.bmWidthBytes * dibBM.bmHeight;", "+", "+\t\t\t\t \t/* Get the foreground pixels */", "+\t\t\t\t \tOS.BitBlt (memHdc, 0, 0, srcWidth, srcHeight, srcHdc, 0, 0, OS.SRCCOPY);", "+\t\t\t\t \tbyte[] srcData = new byte [sizeInBytes];", "+\t\t\t\t\tOS.MoveMemory (srcData, dibBM.bmBits, sizeInBytes);", "+\t\t\t\t\t", "+\t\t\t\t\tPaletteData palette = new PaletteData(0xFF00, 0xFF0000, 0xFF000000);", "+\t\t\t\t\tImageData data = new ImageData(srcWidth, srcHeight, bm.bmBitsPixel, palette, bm.bmWidthBytes, srcData);", "+\t\t\t\t\tdata.transparentPixel = shdi.crColorKey << 8;", "+\t\t\t\t\tdragSourceImage = new Image (control.getDisplay (), data);", "+\t\t\t\t\tOS.SelectObject (memHdc, oldMemBitmap);", "+\t\t\t\t\tOS.DeleteDC (memHdc);", "+\t\t\t\t\tOS.DeleteObject (memDib);", "+\t\t\t\t\tOS.SelectObject (srcHdc, oldSrcBitmap);", "+\t\t\t\t\tOS.DeleteDC (srcHdc);", "+\t\t\t\t\tOS.ReleaseDC (0, hdc);", "+\t\t\t\t\treturn dragSourceImage;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn null;", "+\t\t}", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13f77e888a1d5d54e939c3ab9520090e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/DirectoryDialog.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " public String open ()", "signatureAfterChange": "  public String open ()", "diff": ["- */", "+", "-\tint dialog= 0;", "-\tint titleHandle= 0;", "-\tint messageHandle= 0;", "-\ttry {", "-\t\tint[] dialogHandle= new int[1];", "-\t\t", "-\t\tint parentWindowHandle= 0;", "-\t\tif (parent != null)", "-\t\t\tparentWindowHandle= parent.shellHandle;", "-\t\t\t", "-\t\ttitleHandle= OS.CFStringCreateWithCharacters(title);", "-\t\tmessageHandle= OS.CFStringCreateWithCharacters(message);", "-\t\t", "-\t\tint flags= 0;", "-\t\tOS.NavCreateChooseFolderDialog(flags, titleHandle, messageHandle, parentWindowHandle, dialogHandle);", "-\t\tdialog= dialogHandle[0];", "-\t\t", "-\t\tif (dialog != 0) {", "-\t\t\t\t\t", "-\t\t\tOS.NavDialogRun(dialog);", "-\t\t", "-\t\t\tswitch (OS.NavDialogGetUserAction(dialog)) {", "-\t\t\tcase OS.kNavUserActionCancel:", "-\t\t\t\tbreak;", "-\t\t\t\t", "-\t\t\tcase OS.kNavUserActionOpen:", "-\t\t\tcase OS.kNavUserActionChoose:\t\t\t", "-\t\t\t\treturn interpretOsAnswer(dialog);", "+\tString directoryPath = null;\t", "+\tint titlePtr = 0;", "+\tint messagePtr = 0;", "+\tif (title != null) {", "+\t\tchar [] buffer = new char [title.length ()];", "+\t\ttitle.getChars (0, buffer.length, buffer, 0);", "+\t\ttitlePtr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t}", "+\tif (message != null) {", "+\t\tchar [] buffer = new char [message.length ()];", "+\t\tmessage.getChars (0, buffer.length, buffer, 0);", "+\t\tmessagePtr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t}", "+", "+\tNavDialogCreationOptions options = new NavDialogCreationOptions ();", "+\toptions.parentWindow = OS.GetControlOwner (parent.handle);", "+\t// NEEDS WORK - no title displayed", "+\toptions.windowTitle = options.clientName = titlePtr;", "+\toptions.optionFlags = OS.kNavSupportPackages | OS.kNavAllowOpenPackages | OS.kNavAllowInvisibleFiles;", "+\toptions.message = messagePtr;", "+\toptions.location_h = -1;", "+\toptions.location_v = -1;", "+\tint [] outDialog = new int [1];", "+\t// NEEDS WORK - use inFilterProc to handle filtering", "+\tif (OS.NavCreateChooseFolderDialog (options, 0, 0, 0, outDialog) == OS.noErr) {", "+\t\tOS.NavDialogRun (outDialog [0]);", "+\t\tif (OS.NavDialogGetUserAction (outDialog [0]) == OS.kNavUserActionChoose) {", "+\t\t\tNavReplyRecord record = new NavReplyRecord ();", "+\t\t\tOS.NavDialogGetReply (outDialog [0], record);", "+\t\t\tAEDesc selection = new AEDesc ();", "+\t\t\tselection.descriptorType = record.selection_descriptorType;", "+\t\t\tselection.dataHandle = record.selection_dataHandle;", "+\t\t\tint [] count = new int [1];", "+\t\t\tOS.AECountItems (selection, count);", "+\t\t\tif (count [0] > 0) {", "+\t\t\t\tint [] theAEKeyword = new int [1];", "+\t\t\t\tint [] typeCode = new int [1];", "+\t\t\t\tint maximumSize = 80; // size of FSRef", "+\t\t\t\tint dataPtr = OS.NewPtr (maximumSize);", "+\t\t\t\tint [] actualSize = new int [1];", "+\t\t\t\tint status = OS.AEGetNthPtr (selection, 1, OS.typeFSRef, theAEKeyword, typeCode, dataPtr, maximumSize, actualSize);", "+\t\t\t\tif (status == OS.noErr && typeCode [0] == OS.typeFSRef) {", "+\t\t\t\t\tbyte [] fsRef = new byte [actualSize [0]];", "+\t\t\t\t\tOS.memcpy (fsRef, dataPtr, actualSize [0]);", "+\t\t\t\t\tint dirUrl = OS.CFURLCreateFromFSRef (OS.kCFAllocatorDefault, fsRef);", "+\t\t\t\t\tint dirString = OS.CFURLCopyFileSystemPath(dirUrl, OS.kCFURLPOSIXPathStyle);", "+\t\t\t\t\tOS.CFRelease (dirUrl);\t\t\t\t\t\t", "+\t\t\t\t\tint length = OS.CFStringGetLength (dirString);", "+\t\t\t\t\tchar [] buffer= new char [length];", "+\t\t\t\t\tCFRange range = new CFRange ();", "+\t\t\t\t\trange.length = length;", "+\t\t\t\t\tOS.CFStringGetCharacters (dirString, range, buffer);", "+\t\t\t\t\tOS.CFRelease (dirString);", "+\t\t\t\t\tdirectoryPath = new String (buffer);", "+\t\t\t\t}", "+\t\t\t\tOS.DisposePtr (dataPtr);", "-\t\t", "-\t\treturn null;", "-", "-\t} finally {", "-\t\tif (titleHandle != 0)", "-\t\t\tOS.CFRelease(titleHandle);", "-\t\tif (messageHandle != 0)", "-\t\t\tOS.CFRelease(messageHandle);", "-\t\tif (dialog != 0)", "-\t\t\tOS.NavDialogDispose(dialog);", "+\tif (titlePtr != 0) OS.CFRelease (titlePtr);\t", "+\tif (messagePtr != 0) OS.CFRelease (messagePtr);", "+\tif (outDialog [0] != 0) OS.NavDialogDispose (outDialog [0]);", "+\treturn directoryPath;"]}], "num": 50563}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "587d9bad4136a30da3ab622c59f93df0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9b7667616e0d52e10e61e87fd1993ec", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "5aba9b6cb1ae5e0f3e35624835172a06410c3c51", "commitAfterChange": "50ffc4c89de3b9247aed5737cd70563ccc951b93", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t void printWindow (boolean first, Control control, int gc, int drawable, int depth, int window, int x, int y)", "signatureAfterChange": "  void printWindow (boolean first, Control control, int gc, int drawable, int depth, int window, int x, int y)", "diff": ["-\t", "+", "-\tOS.gdk_window_invalidate_rect (window, rect, false);", "-\tOS.gdk_window_process_updates (window, false);", "-\tOS.gdk_window_get_internal_paint_info (window, real_drawable, x_offset, y_offset);", "-\tif (window == paintWindow ()) {", "-\t\tif (hooks (SWT.Paint) || filters (SWT.Paint)) {", "-\t\t\tGCData data = new GCData ();", "-\t\t\tint /*long*/ gdkGC = OS.gdk_gc_new (real_drawable [0]);", "-\t\t\tif (gdkGC == 0) error (SWT.ERROR_NO_HANDLES);\t", "-\t\t\tif (data != null) {", "-\t\t\t\tint mask = SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT;", "-\t\t\t\tif ((data.style & mask) == 0) {", "-\t\t\t\t\tdata.style |= style & (mask | SWT.MIRRORED);", "-\t\t\t\t} else {", "-\t\t\t\t\tif ((data.style & SWT.RIGHT_TO_LEFT) != 0) {", "-\t\t\t\t\t\tdata.style |= SWT.MIRRORED;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tdata.realDrawable = true;", "-\t\t\t\tdata.drawable = real_drawable [0];", "-\t\t\t\tdata.device = display;", "-\t\t\t\tdata.foreground = getForegroundColor ();", "-\t\t\t\tControl backgroundControl = findBackgroundControl ();", "-\t\t\t\tif (backgroundControl == null) backgroundControl = this;", "-\t\t\t\tdata.background = backgroundControl.getBackgroundColor ();", "-\t\t\t\tdata.font = font != null ? font : defaultFont (); ", "-\t\t\t}", "-\t\t\tEvent event = new Event ();", "-\t\t\tevent.width = width [0];", "-\t\t\tevent.height = height [0];", "-\t\t\tif ((style & SWT.MIRRORED) != 0) event.x = getClientWidth () - event.width - event.x;", "-\t\t\tGC paintGC = event.gc = GC.gtk_new (gdkGC, data);", "-\t\t\tsendEvent (SWT.Paint, event);", "-\t\t\tpaintGC.dispose ();", "-\t\t\tOS.g_object_unref (gdkGC);", "-\t\t}", "+\tOS.gdk_window_get_internal_paint_info (window, real_drawable, x_offset, y_offset);\t", "+\tint /*long*/ [] userData = new int /*long*/ [1];", "+\tOS.gdk_window_get_user_data (window, userData);", "+\tif (userData [0] != 0) {", "+\t\tint /*long*/ eventPtr = OS.gdk_event_new (OS.GDK_EXPOSE);", "+\t\tGdkEventExpose event = new GdkEventExpose ();", "+\t\tevent.type = OS.GDK_EXPOSE;", "+\t\tevent.window = OS.g_object_ref (window);", "+\t\tevent.area_width = rect.width;", "+\t\tevent.area_height = rect.height;", "+\t\tevent.region = OS.gdk_region_rectangle (rect);", "+\t\tOS.memmove (eventPtr, event, GdkEventExpose.sizeof);", "+\t\tOS.gtk_widget_send_expose (userData [0], eventPtr);", "+\t\tOS.gdk_event_free (eventPtr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3efbd2cd3ca49346ce2df853dd2f4844", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "0354f2fcd681774fe492f4e3d5f23f1a78e0b89a", "commitAfterChange": "1f0268d817d4d6da6a35f97f46ada77b8aa2e671", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t void printWindow (Control control, int  gc, int drawable, int depth, int window, int x, int y)", "signatureAfterChange": " \t void printWindow (boolean first, Control control, int gc, int drawable, int depth, int window, int x, int y)", "diff": ["-void printWindow (Control control, int /*long*/  gc, int /*long*/ drawable, int depth, int /*long*/ window, int x, int y) {", "+void printWindow (boolean first, Control control, int /*long*/ gc, int /*long*/ drawable, int depth, int /*long*/ window, int x, int y) {", "-\tOS.gdk_draw_drawable (drawable, gc, real_drawable [0], x_offset [0], y_offset [0], x, y, width [0], height [0]);", "+\tif (window == paintWindow ()) {", "+\t\tif (hooks (SWT.Paint) || filters (SWT.Paint)) {", "+\t\t\tGCData data = new GCData ();", "+\t\t\tint /*long*/ gdkGC = OS.gdk_gc_new (real_drawable [0]);", "+\t\t\tif (gdkGC == 0) error (SWT.ERROR_NO_HANDLES);\t", "+\t\t\tif (data != null) {", "+\t\t\t\tint mask = SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT;", "+\t\t\t\tif ((data.style & mask) == 0) {", "+\t\t\t\t\tdata.style |= style & (mask | SWT.MIRRORED);", "+\t\t\t\t} else {", "+\t\t\t\t\tif ((data.style & SWT.RIGHT_TO_LEFT) != 0) {", "+\t\t\t\t\t\tdata.style |= SWT.MIRRORED;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tdata.realDrawable = true;", "+\t\t\t\tdata.drawable = real_drawable [0];", "+\t\t\t\tdata.device = display;", "+\t\t\t\tdata.foreground = getForegroundColor ();", "+\t\t\t\tControl backgroundControl = findBackgroundControl ();", "+\t\t\t\tif (backgroundControl == null) backgroundControl = this;", "+\t\t\t\tdata.background = backgroundControl.getBackgroundColor ();", "+\t\t\t\tdata.font = font != null ? font.handle : defaultFont (); ", "+\t\t\t}", "+\t\t\tEvent event = new Event ();", "+\t\t\tevent.width = width [0];", "+\t\t\tevent.height = height [0];", "+\t\t\tif ((style & SWT.MIRRORED) != 0) event.x = getClientWidth () - event.width - event.x;", "+\t\t\tGC paintGC = event.gc = GC.gtk_new (gdkGC, data);", "+\t\t\tsendEvent (SWT.Paint, event);", "+\t\t\tpaintGC.dispose ();", "+\t\t\tOS.g_object_unref (gdkGC);", "+\t\t}", "+\t}", "+\tint srcX = x_offset [0], srcY = y_offset [0];", "+\tint destX = x, destY = y, destWidth = width [0], destHeight = height [0];", "+\tif (!first) {", "+\t\tint [] cX = new int [1], cY = new int [1];", "+\t\tOS.gdk_window_get_position (window, cX, cY);", "+\t\tint /*long*/ parentWindow = OS.gdk_window_get_parent (window);", "+\t\tint [] pW = new int [1], pH = new int [1];", "+\t\tOS.gdk_drawable_get_size (parentWindow, pW, pH);", "+\t\tsrcX = x_offset [0] - cX [0];", "+\t\tsrcY = y_offset [0] - cY [0];", "+\t\tdestX = x - cX [0];", "+\t\tdestY = y - cY [0];", "+\t\tdestWidth = Math.min (cX [0] + width [0], pW [0]);", "+\t\tdestHeight = Math.min (cY [0] + height [0], pH [0]);", "+\t}", "+\tOS.gdk_draw_drawable (drawable, gc, real_drawable [0], srcX, srcY, destX, destY, destWidth, destHeight);", "-\t\t\t\t\t\tprintWindow (control, gc, drawable, depth, child, x + x_pos [0], y + y_pos [0]);", "+\t\t\t\t\t\tprintWindow (false, control, gc, drawable, depth, child, x + x_pos [0], y + y_pos [0]);"]}], "num": 46085}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e8fdc9ce1c11fae7e411c8e6a8527794", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a18add3c48249fe66b1239dcfcaa0cdb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "5df79af4244cc3f0b7dd2ecfd8284b34c42bf49c", "commitAfterChange": "9461a400b3fd4507d4b848736cdb37e604393c75", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "  void setTXNBounds ()", "signatureAfterChange": "  void setTXNBounds ()", "diff": ["+", "+\t/*", "+\t* Bug in the Macintosh.  When the caret is moved,", "+\t* the text widget scrolls to show the new location.", "+\t* This means that the text widget may be scrolled", "+\t* to the left in order to show the caret when the", "+\t* widget is not large enough to show both the caret", "+\t* location and all the text.  Unfortunately, when", "+\t* the widget is resized such that all the text and", "+\t* the caret could be visible, the Macintosh does not", "+\t* scroll the widget back.  The fix is to save the ", "+\t* current selection, set the selection to the start", "+\t* of the text and then restore the selection.  This", "+\t* will cause the widget text widget to recompute the", "+\t* left scroll position.", "+\t* ", "+\t* NOTE: Currently, this work around is only applied", "+\t* to text widgets that are not visible.  If the widget", "+\t* is resized when it is visible, this is fine because", "+\t* the user has already seen that the text is scrolled.", "+\t*/", "+\tif (OS.IsControlVisible (handle)) return;", "+\tint [] oStartOffset = new int [1], oEndOffset = new int [1];", "+\tOS.TXNGetSelection (txnObject, oStartOffset, oEndOffset);", "+\tOS.TXNSetSelection (txnObject, OS.kTXNStartOffset, OS.kTXNStartOffset);", "+\tOS.TXNShowSelection (txnObject, false);", "+\tOS.TXNSetSelection (txnObject, oStartOffset [0], oEndOffset [0]);", "+\tOS.TXNShowSelection (txnObject, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b66bf8512865776f784bffe9848b881b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "0126c5a6d355fc599ddc17649e4339aac7ddb113", "commitAfterChange": "9f15df97b21445f1fe89db1532851795b9656519", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  @Override public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  @Override public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\tint [] buffer = new int [1];", "-\t\tOS.g_object_get (labelHandle, OS.ypad, buffer, 0);", "-\t\tfontHeight += 2 * buffer [0];", "+\t\tif (OS.GTK3) {", "+\t\t\tint [] bufferBottom = new int [1];", "+\t\t\tint [] bufferTop = new int [1];", "+\t\t\tOS.g_object_get(labelHandle, OS.margin_bottom, bufferBottom, 0);", "+\t\t\tOS.g_object_get(labelHandle, OS.margin_top, bufferTop, 0);", "+\t\t\tfontHeight += bufferBottom [0] + bufferTop [0];", "+\t\t} else {", "+\t\t\tint [] bufferYpad = new int[1];", "+\t\t\tOS.g_object_get (labelHandle, OS.ypad, bufferYpad, 0);", "+\t\t\tfontHeight += 2 * bufferYpad [0];", "+\t\t}"]}], "num": 48681}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd52d1b0c78b0afac905f53d5062bfbd", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8eb1b93cb5918e37ee690f19d8c2ea5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "32c09d8f3234247ca1b573423e5d4d72bbdbf08a", "commitAfterChange": "940e0a0cd5dddd2d3fdf0714f46e96d2b27435e7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  int accessibilityAttributeNames(int id, int sel)", "signatureAfterChange": "  int accessibilityAttributeNames(int id, int sel)", "diff": ["-\tif (id == accessibleHandle() && accessible != null) {\t\t\t", "-\t\tNSArray returnValue = accessible.internal_accessibilityAttributeNames(ACC.CHILDID_SELF);", "-\t\tif (returnValue != null) return returnValue.id;", "+\tint /*long*/ returnValue = 0;", "+\t", "+\tif (id == accessibleHandle() && accessible != null) {", "+\t\t// See if the accessible is defining the attribute set for the control.", "+\t\tid value = accessible.internal_accessibilityAttributeNames(ACC.CHILDID_SELF);", "+\t\treturnValue = (value != null ? value.id : 0);", "+\t\t", "+\t\t// If not, ask Cocoa for the set for this control.", "+\t\tif (returnValue == 0) returnValue = super.accessibilityAttributeNames(id, sel);", "+\t\t", "+\t\t// Add relationship attributes.", "+\t\treturnValue = accessible.internal_addRelationAttributes(returnValue);", "-\treturn super.accessibilityAttributeNames(id, sel);", "+\t// If the SWT accessibility didn't give us anything get the default for the view/cell.", "+\tif (returnValue == 0) returnValue = super.accessibilityAttributeNames(id, sel);", "+\t", "+\treturn returnValue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76e3ce89ff21853c4707102ea70363f9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "d8d3e8f612b1662e51aaeb1aba1b797cad6504c1", "commitAfterChange": "a2a2b61ca97ad1454fa39c9d961ae445a63a1a20", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  int accessibilityAttributeValue (int id, int sel, int arg0)", "signatureAfterChange": "  boolean accessibilityIsIgnored(int id, int sel)", "diff": ["-int accessibilityAttributeValue (int /*long*/ id, int /*long*/ sel, int /*long*/ arg0) {", "-\t", "-\tNSString attributeName = new NSString(arg0);", "-\t", "-\tif (accessible != null) {", "-\t\tid returnObject = accessible.internal_accessibilityAttributeValue(attributeName, ACC.CHILDID_SELF);", "-\t\tif (returnObject != null) return returnObject.id;", "-\t}", "-\t", "-\t// Accessibility Verifier requires a subrole for windows, even though most other controls don't have a subrole.", "-\t// So, we need to override and return the right subrole here.", "-\tif (attributeName.isEqualToString (OS.NSAccessibilitySubroleAttribute)) {", "-\t\tNSString roleText = null;", "-", "-\t\tif ((style & SWT.ON_TOP) != 0)", "-\t\t\troleText = OS.NSAccessibilityFloatingWindowSubrole;", "-\t\telse", "-\t\t\troleText = OS.NSAccessibilityStandardWindowSubrole;", "-\t\t", "-\t\treturn roleText.id;", "-\t}", "-\t", "-\treturn super.accessibilityAttributeValue(id, sel, arg0);", "+boolean accessibilityIsIgnored(int /*long*/ id, int /*long*/ sel) {", "+\t// The content view of a shell is always ignored.", "+\tif (id == view.id) return true;", "+\treturn super.accessibilityIsIgnored(id, sel);"]}], "num": 41248}
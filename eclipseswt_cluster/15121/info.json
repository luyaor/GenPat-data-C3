{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6853ee2da00fa59de4cc101d4a1be0b0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "122dfa910720b8b794516dfce58cce00", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "2c8a13d0df1694740c0af6220e23682b3ddd10de", "commitAfterChange": "056762a1d7c74e75bfac132d1e756819b6f3b39e", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 24, "signatureBeforeChange": "  public boolean setUrl(String url)", "signatureAfterChange": "  public boolean setUrl(String url, String postData, String[] headers)", "diff": ["-public boolean setUrl(String url) {", "+public boolean setUrl(String url, String postData, String[] headers) {", "-\tchar[] chars = new char[url.length()];", "-\turl.getChars(0, chars.length, chars, 0);", "-\tint str = OS.CFStringCreateWithCharacters(0, chars, chars.length);", "+\tint str = createNSString(url);", "-\t//request = [NSURLRequest requestWithURL:(NSURL*)inURL];", "-\tint request = Cocoa.objc_msgSend(Cocoa.C_NSURLRequest, Cocoa.S_requestWithURL, inURL);", "+\tint request = Cocoa.objc_msgSend(Cocoa.C_NSMutableURLRequest, Cocoa.S_requestWithURL, inURL);", "-\t//mainFrame = [webView mainFrame];", "+\tif (postData != null) {", "+\t\tint post = createNSString(POST);", "+\t\tCocoa.objc_msgSend(request, Cocoa.S_setHTTPMethod, post);", "+\t\tOS.CFRelease (post);", "+\t\tbyte[] bytes = postData.getBytes();", "+\t\tint data = Cocoa.objc_msgSend(Cocoa.C_NSData, Cocoa.S_dataWithBytes, bytes, bytes.length);", "+\t\tCocoa.objc_msgSend(request, Cocoa.S_setHTTPBody, data);", "+\t}", "+\tif (headers != null) {", "+\t\tfor (int i = 0; i < headers.length; i++) {", "+\t\t\tString current = headers[i];", "+\t\t\tint index = current.indexOf(':');", "+\t\t\tif (index != -1) {", "+\t\t\t\tString key = current.substring(0, index).trim();", "+\t\t\t\tString value = current.substring(index + 1).trim();", "+\t\t\t\tif (key.length() > 0 && value.length() > 0) {", "+\t\t\t\t\tif (key.equals(USER_AGENT)) {", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t* Feature of Safari.  The user-agent header value cannot be overridden", "+\t\t\t\t\t\t* here.  The workaround is to temporarily set the value on the WebView", "+\t\t\t\t\t\t* and then remove it after the loading of the request has begun.", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tint string = createNSString(value);", "+\t\t\t\t\t\tCocoa.objc_msgSend(webView, Cocoa.S_setCustomUserAgent, string);", "+\t\t\t\t\t\tOS.CFRelease (string);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint keyString = createNSString(key);", "+\t\t\t\t\t\tint valueString = createNSString(value);", "+\t\t\t\t\t\tCocoa.objc_msgSend(request, Cocoa.S_setValueForHTTPHeaderField, keyString, valueString);", "+\t\t\t\t\t\tOS.CFRelease (valueString);", "+\t\t\t\t\t\tOS.CFRelease (keyString);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+", "-", "-\t//[mainFrame loadRequest:request];", "-", "+\tCocoa.objc_msgSend(webView, Cocoa.S_setCustomUserAgent, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70a331d0ad3cb974dbabf42af71b829d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "056762a1d7c74e75bfac132d1e756819b6f3b39e", "commitAfterChange": "f7f1dba87199260397b55de5f4e77818bcad3cd8", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  public boolean setUrl(String url, String postData, String[] headers)", "signatureAfterChange": "  public boolean setUrl(String url, String postData, String[] headers)", "diff": ["-\t\t\tint index = current.indexOf(':');", "-\t\t\tif (index != -1) {", "-\t\t\t\tString key = current.substring(0, index).trim();", "-\t\t\t\tString value = current.substring(index + 1).trim();", "-\t\t\t\tif (key.length() > 0 && value.length() > 0) {", "-\t\t\t\t\tif (key.equals(USER_AGENT)) {", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* Feature of Safari.  The user-agent header value cannot be overridden", "-\t\t\t\t\t\t* here.  The workaround is to temporarily set the value on the WebView", "-\t\t\t\t\t\t* and then remove it after the loading of the request has begun.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tint string = createNSString(value);", "-\t\t\t\t\t\tCocoa.objc_msgSend(webView, Cocoa.S_setCustomUserAgent, string);", "-\t\t\t\t\t\tOS.CFRelease (string);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tint keyString = createNSString(key);", "-\t\t\t\t\t\tint valueString = createNSString(value);", "-\t\t\t\t\t\tCocoa.objc_msgSend(request, Cocoa.S_setValueForHTTPHeaderField, keyString, valueString);", "-\t\t\t\t\t\tOS.CFRelease (valueString);", "-\t\t\t\t\t\tOS.CFRelease (keyString);", "+\t\t\tif (current != null) {", "+\t\t\t\tint index = current.indexOf(':');", "+\t\t\t\tif (index != -1) {", "+\t\t\t\t\tString key = current.substring(0, index).trim();", "+\t\t\t\t\tString value = current.substring(index + 1).trim();", "+\t\t\t\t\tif (key.length() > 0 && value.length() > 0) {", "+\t\t\t\t\t\tif (key.equals(USER_AGENT)) {", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t* Feature of Safari.  The user-agent header value cannot be overridden", "+\t\t\t\t\t\t\t* here.  The workaround is to temporarily set the value on the WebView", "+\t\t\t\t\t\t\t* and then remove it after the loading of the request has begun.", "+\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\tint string = createNSString(value);", "+\t\t\t\t\t\t\tCocoa.objc_msgSend(webView, Cocoa.S_setCustomUserAgent, string);", "+\t\t\t\t\t\t\tOS.CFRelease (string);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint keyString = createNSString(key);", "+\t\t\t\t\t\t\tint valueString = createNSString(value);", "+\t\t\t\t\t\t\tCocoa.objc_msgSend(request, Cocoa.S_setValueForHTTPHeaderField, keyString, valueString);", "+\t\t\t\t\t\t\tOS.CFRelease (valueString);", "+\t\t\t\t\t\t\tOS.CFRelease (keyString);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3e69793ac866e848ca19daba4463a8d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "56d7296ca97caab4d55a03fef16b1386812f14a1", "commitAfterChange": "0a8649d4c4b3f13145067478ae1f23acfb944b65", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create(Composite parent, int style)", "signatureAfterChange": "  public void create(Composite parent, int style)", "diff": ["-\t", "+", "+\tif (!Initialized) {", "+\t\tInitialized = true;", "+\t\tint version = 0;", "+\t\tString versionProperty = System.getProperty(PROPERTY_IEVERSION);", "+\t\tif (versionProperty != null) {", "+\t\t\tif (versionProperty.equalsIgnoreCase(VALUE_DEFAULT)) {", "+\t\t\t\tversion = -1;", "+\t\t\t} else {", "+\t\t\t\ttry {", "+\t\t\t\t\tversion = Integer.valueOf(versionProperty).intValue();", "+\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\t/* ", "+\t\t\t\t\t * An invalid value was specified for the IEVersion java property.  Ignore it", "+\t\t\t\t\t * and continue with the usual steps for determining the version to specify.", "+\t\t\t\t\t */", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (version == 0) {", "+\t\t\tif (IEVersion != 0) {", "+\t\t\t\tversion = IEVersion * 1000;", "+\t\t\t} else {", "+\t\t\t\tversion = DEFAULT_IE_VERSION;", "+\t\t\t}", "+\t\t}", "+", "+\t\tif (version != -1) {", "+\t\t\tint /*long*/[] key = new int /*long*/[1];", "+\t\t\tfinal TCHAR subkey = new TCHAR(0, \"Software\\\\Microsoft\\\\Internet Explorer\\\\Main\\\\FeatureControl\\\\FEATURE_BROWSER_EMULATION\", true);\t//$NON-NLS-1$", "+\t\t\tif (OS.RegCreateKeyEx(OS.HKEY_CURRENT_USER, subkey, 0, null, OS.REG_OPTION_VOLATILE, OS.KEY_WRITE | OS.KEY_QUERY_VALUE, 0, key, null) == 0) {", "+\t\t\t\tTCHAR lpszFile = new TCHAR(0, OS.MAX_PATH);", "+\t\t\t\tOS.GetModuleFileName(0, lpszFile, lpszFile.length());", "+\t\t\t\tString path = lpszFile.toString(0, lpszFile.strlen());", "+\t\t\t\tint index = path.lastIndexOf(SEPARATOR_OS);", "+\t\t\t\tString executable = index != -1 ? path.substring(index + 1) : path;", "+\t\t\t\tfinal TCHAR lpValueName = new TCHAR(0, executable, true);", "+\t\t\t\tif (OS.RegQueryValueEx(key[0], lpValueName, 0, null, (int[])null, null) == OS.ERROR_FILE_NOT_FOUND) {", "+\t\t\t\t\tif (OS.RegSetValueEx(key[0], lpValueName, 0, OS.REG_DWORD, new int[] {version}, 4) == 0) {", "+\t\t\t\t\t\tparent.getDisplay().addListener(SWT.Dispose, new Listener() {\t\t\t", "+\t\t\t\t\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\t\t\t\t\tint /*long*/[] key = new int /*long*/[1];", "+\t\t\t\t\t\t\t\tif (OS.RegOpenKeyEx(OS.HKEY_CURRENT_USER, subkey, 0, OS.KEY_WRITE, key) == 0) {", "+\t\t\t\t\t\t\t\t\tOS.RegDeleteValue(key[0], lpValueName);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t});", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tOS.RegCloseKey(key[0]);", "+\t\t\t}", "+\t\t}", "+\t}", "+"]}], "num": 15121}
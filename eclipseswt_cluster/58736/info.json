{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8bd51842872f3009774f673130065a1d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1db552a1740d00138783f8bc3072d0c4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ee155d593cfda428fc88139d1e8da486bb5a73cf", "commitAfterChange": "59b2491032a801ab7176764808e4a778061c6b28", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 72, "signatureBeforeChange": " public void setImage (int columnIndex, Image value)", "signatureAfterChange": " public void setImage (int columnIndex, Image value)", "diff": ["+\t", "+\t/* ", "+\t * An image width change may affect the space available for the item text, so", "+\t * recompute the displayText if there are columns.", "+\t */", "+\tif (columns.length > 0) {", "+\t\tGC gc = new GC (parent);", "+\t\tgc.setFont (getFont (columnIndex));", "+\t\tcomputeDisplayText (columnIndex, gc);", "+\t\ttextWidths [columnIndex] = gc.textExtent (getDisplayText (columnIndex)).x;", "+\t\tgc.dispose ();", "+\t}", "+\t", "+\t\t\t\tif (columns.length > 0) {", "+\t\t\t\t\t/* ", "+\t\t\t\t\t * All column 0 cells will now have less room available for their texts,", "+\t\t\t\t\t * so all items must now recompute their column 0 displayTexts.", "+\t\t\t\t\t */", "+\t\t\t\t\tGC gc = new GC (parent);", "+\t\t\t\t\tTreeItem[] rootItems = parent.items;", "+\t\t\t\t\tfor (int i = 0; i < rootItems.length; i++) {", "+\t\t\t\t\t\trootItems [i].updateColumnWidth (columns [0], gc);", "+\t\t\t\t\t}", "+\t\t\t\t\tgc.dispose ();", "+\t\t\t\t}", "+\t\t\t/* ", "+\t\t\t * All column 0 cells will now have less room available for their texts,", "+\t\t\t * so all items must now recompute their column 0 displayTexts.", "+\t\t\t */", "+\t\t\tGC gc = new GC (parent);", "+\t\t\tTreeItem[] rootItems = parent.items;", "+\t\t\tfor (int i = 0; i < rootItems.length; i++) {", "+\t\t\t\trootItems [i].updateColumnWidth (columns [0], gc);", "+\t\t\t}", "+\t\t\tgc.dispose ();", "+\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5c35686f921a5adc43f2ea5225a9a22", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_TreeItem.java", "commitBeforeChange": "80dfb437e1cf72ae8fdf50da1fe73b0a6cf99eed", "commitAfterChange": "5f54319c118c62a8385f5e04df3f5c1e943c1812", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 37, "signatureBeforeChange": "  public void test_setTextLjava_lang_String()", "signatureAfterChange": "  public void test_setText$Ljava_lang_String()", "diff": ["-", "-public void test_setTextLjava_lang_String() {", "-\t\ttreeItem.setText((String)null);\t\t", "-\t\tfail(\"No exception thrown for string == null\");", "+", "+public void test_setText$Ljava_lang_String() {", "+\tfinal String TestString = \"test\";", "+\tfinal String TestStrings[] = new String[] {TestString, TestString + \"1\", TestString + \"2\"};", "+\t", "+\ttry {", "+\t\ttreeItem.setText((String []) null);", "+\t\tfail(\"No exception thrown for strings == null\");", "+\t}", "+\tcatch (IllegalArgumentException e) {", "+\t}", "+\t", "+   /*", "+ \t* Test the getText/setText API with a Tree that has only ", "+ \t* the default column.", "+ \t*/", "+\t", "+\tassertEquals(0, treeItem.getText(1).length());", "+\t", "+\ttreeItem.setText(TestStrings);", "+\tassertEquals(TestStrings[0], treeItem.getText(0));", "+\tfor (int i = 1; i < TestStrings.length; i++) {", "+\t\tassertEquals(0, treeItem.getText(i).length());", "+\t}", "+\t", "+\t", "+   /*", "+ \t* Test the getText/setText API with a Tree that enough ", "+ \t* columns to fit all test item texts.", "+ \t*/", "+ \t\t", "+\tint columnCount = tree.getColumnCount();", "+\tif (columnCount < images.length) {", "+\t\tfor (int i = columnCount; i < images.length; i++){", "+\t\t\tTreeColumn column = new TreeColumn(tree, SWT.NONE);", "+\t\t}", "+\t}", "+\tTreeColumn[] columns = tree.getColumns();", "+\tfor (int i = 0; i < TestStrings.length; i++) {", "+\t\tcolumns[i].setText(TestStrings[i]);", "+\t}", "+\tassertEquals(0, treeItem.getText(1).length());", "+", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "397e0db5eb580a89ec80e43ef6d043f4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGeneratorUI.java", "commitBeforeChange": "275ce1322d2d2acef8289e7a428bae512f0206b1", "commitAfterChange": "56ca7c39a4fdb71b796d09fde89d6bca48c9f734", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void open()", "signatureAfterChange": " \t \tpublic void open()", "diff": ["+\t\t\t}", "+\t\t});", "+\t\tnodesTree.addListener(SWT.Expand, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\tTreeItem item = (TreeItem)event.item;", "+\t\t\t\tif (item.getItemCount() == 1 && item.getItem(0).getData() == null) {", "+\t\t\t\t\titem.getItem(0).dispose();", "+\t\t\t\t\tNode node = (Node)item.getData();", "+\t\t\t\t\tNodeList childNodes = node.getChildNodes();", "+\t\t\t\t\tfor (int i = 0, length = childNodes.getLength(); i < length; i++) {", "+\t\t\t\t\t\taddChild(childNodes.item(i), item);", "+\t\t\t\t\t}", "+\t\t\t\t\tTreeColumn[] columns = nodesTree.getColumns();", "+\t\t\t\t\tfor (int i = 0; i < columns.length; i++) {", "+\t\t\t\t\t\tcolumns[i].pack();", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t});", "-\t\t", "+\t\t});\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9932883a8bb21a3515edc4a0e4791335", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "a6793950af6d017aab139136a30b4f9fd754599e", "commitAfterChange": "e139d0ab76ea26e5296ceee7a81cdb4cd23f3694", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  void destroyItem (TableColumn column)", "signatureAfterChange": "  void destroyItem (TableColumn column)", "diff": ["+\tint orderIndex = 0;", "+\tint [] order = new int [columnCount];", "+\tOS.SendMessage (handle, OS.LVM_GETCOLUMNORDERARRAY, columnCount, order);", "+\twhile (orderIndex < columnCount) {", "+\t\tif (order [orderIndex] == index) break;", "+\t\torderIndex++;", "+\t}", "+\tignoreResize = true;", "+\tignoreResize = false;", "+\tif (columnCount != 0) {", "+\t\tint count = columnCount - orderIndex;", "+\t\tTableColumn [] newColumns = new TableColumn [count];", "+\t\torderIndex++;", "+\t\tfor (int i=orderIndex; i<order.length; i++) {", "+\t\t\tnewColumns [i - orderIndex] = columns [order [i] - 1];", "+\t\t}", "+\t\tfor (int i=0; i<newColumns.length; i++) {", "+\t\t\tif (!newColumns [i].isDisposed ()) {", "+\t\t\t\tnewColumns [i].sendEvent (SWT.Move);", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46c993b37ad6bdc3df4466e73a80a551", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java", "commitBeforeChange": "0a84e48780b862c804e190ba06d17878143631e6", "commitAfterChange": "209551697995b7dd42bc12ac2427dd0390f53c5f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " \tvoid createListenerSelectionDialog ()", "signatureAfterChange": " \tvoid createListenerSelectionDialog ()", "diff": ["-\t\tfor (int i = 1; i < EVENT_NAMES.length; i++) {", "+\t\tfor (int i = 0; i < EVENT_NAMES.length; i++) {", "+\t\t}", "+\t\tfinal String [] customNames = getCustomEventNames ();", "+\t\tfor (int i = 0; i < customNames.length; i++) {", "+\t\t\tTableItem item = new TableItem (table, SWT.NONE);", "+\t\t\titem.setText (customNames[i]);", "+\t\t\titem.setChecked (eventsFilter[EVENT_NAMES.length + i]);", "-\t\t\t\tfor (int i = 1; i < EVENT_NAMES.length; i++) {", "-\t\t\t\t\titems[i - 1].setChecked(true);", "+\t\t\t\tfor (int i = 0; i < EVENT_NAMES.length; i++) {", "+\t\t\t\t\titems[i].setChecked(true);", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < customNames.length; i++) {", "+\t\t\t\t\titems[EVENT_NAMES.length + i].setChecked(true);", "-\t\t\t\tfor (int i = 1; i < EVENT_NAMES.length; i++) {", "-\t\t\t\t\titems[i - 1].setChecked(false);", "+\t\t\t\tfor (int i = 0; i < EVENT_NAMES.length; i++) {", "+\t\t\t\t\titems[i].setChecked(false);", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < customNames.length; i++) {", "+\t\t\t\t\titems[EVENT_NAMES.length + i].setChecked(false);", "-\t\t\t\tfor (int i = 1; i < EVENT_NAMES.length; i++) {", "-\t\t\t\t\teventsFilter[i] = items[i - 1].getChecked();", "+\t\t\t\tfor (int i = 0; i < EVENT_NAMES.length; i++) {", "+\t\t\t\t\teventsFilter[i] = items[i].getChecked();", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < customNames.length; i++) {", "+\t\t\t\t\teventsFilter[EVENT_NAMES.length + i] = items[EVENT_NAMES.length + i].getChecked();"]}], "num": 58736}
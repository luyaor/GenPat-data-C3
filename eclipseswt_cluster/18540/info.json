{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3166516ea868c5a1657e201a60aefef", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a88b2808dbf25f23d5ac98a6837583a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "5544ce1d748561f71c4f1d1997c431f82e5c4c86", "commitAfterChange": "24e0049851c0d0a09cb9f25e5892d112e2936fed", "methodNumberBeforeChange": 277, "methodNumberAfterChange": 268, "signatureBeforeChange": " void setBidiCaretLocation(StyledTextBidi bidi)", "signatureAfterChange": " void setCaretImage(int direction)", "diff": ["+void setCaretImage(int direction) {", "+\tboolean updateImage = true;", "+\tImage caretImage = caret.getImage();", "+\tif (caretImage != null) {", "+\t\tupdateImage = caretImage.equals(leftCaretBitmap) || caretImage.equals(rightCaretBitmap);", "+\t}", "+\t", "+\t//workaround bug#54922 ", "+\tif (updateImage) {", "+\t\tif ((leftCaretBitmap != null && leftCaretBitmap.isDisposed()) ||", "+\t\t\t(rightCaretBitmap != null && rightCaretBitmap.isDisposed())) {", "+\t\t\tcreateCaretBitmaps();", "+\t\t}", "+\t}", "+\t", "+\t\tif (updateImage) caret.setImage(null);", "+\t}", "+\telse", "+\t\tif (updateImage) caret.setImage(leftCaretBitmap);", "+\t\t//TODO API needed", "+\t\tBidiUtil.setKeyboardLanguage(BidiUtil.KEYBOARD_NON_BIDI);", "+\t}", "+\telse", "- */", "-void setBidiCaretLocation(StyledTextBidi bidi) {", "-\tint caretLine = getCaretLine();", "-\t", "-\tsetBidiCaretLocation(bidi, caretLine);", "-}", "+\t\tif (updateImage) caret.setImage(rightCaretBitmap);", "+\t\t//TODO API needed", "+\t\tBidiUtil.setKeyboardLanguage(BidiUtil.KEYBOARD_BIDI);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea4b9a3f34b9fd426f59de4512b7995d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "c18b649a43b3a0227a39ee31bcf8b834a32d441e", "commitAfterChange": "f7ffa8339b5c8ff097dd579d9f209e06c22ae32b", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "  boolean setScrollWidth (TableItem item, boolean force)", "signatureAfterChange": "  boolean setScrollWidth (TableItem item, boolean force)", "diff": ["-\t* LVM_SETCOUMNWIDTH with LVSCW_AUTOSIZE.", "+\t* LVM_SETCOLUMNWIDTH with LVSCW_AUTOSIZE.", "+\t\t\tint font = -1;", "+\t\t\t\tif (item.cellFont != null) font = item.cellFont [0];", "+\t\t\t\tif (font == -1) font = item.font;", "-\t\t\t\t\tstring = items [index].text;", "-\t\t\t\t\timageIndent = Math.max (imageIndent, items [index].imageIndent);", "+\t\t\t\t\tTableItem tableItem = items [index];", "+\t\t\t\t\tstring = tableItem.text;", "+\t\t\t\t\timageIndent = Math.max (imageIndent, tableItem.imageIndent);", "+\t\t\t\t\tif (tableItem.cellFont != null) font = tableItem.cellFont [0];", "+\t\t\t\t\tif (font == -1) font = tableItem.font;", "-\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, true);", "-\t\t\t\tnewWidth = Math.max (newWidth, OS.SendMessage (handle, OS.LVM_GETSTRINGWIDTH, 0, buffer));", "+\t\t\t\tif (font != -1) {", "+\t\t\t\t\tint hDC = OS.GetDC (handle);", "+\t\t\t\t\tint oldFont = OS.SelectObject (hDC, font);", "+\t\t\t\t\tint flags = OS.DT_CALCRECT | OS.DT_SINGLELINE | OS.DT_NOPREFIX;", "+\t\t\t\t\tTCHAR tchar = new TCHAR (getCodePage (), string, false);", "+\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\tOS.DrawText (hDC, tchar, tchar.length (), rect, flags);", "+\t\t\t\t\tOS.SelectObject (hDC, oldFont);", "+\t\t\t\t\tOS.ReleaseDC (handle, hDC);", "+\t\t\t\t\tnewWidth = Math.max (newWidth, rect.right - rect.left);", "+\t\t\t\t} else {", "+\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, true);", "+\t\t\t\t\tnewWidth = Math.max (newWidth, OS.SendMessage (handle, OS.LVM_GETSTRINGWIDTH, 0, buffer));", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e09e1304c6f9dd5e3b916f70c395da79", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "33b8da45cf5af610631c1a731109d8a5e601ac2c", "commitAfterChange": "14fbe017d1e3dc78020213280156fbd51d492d0a", "methodNumberBeforeChange": 300, "methodNumberAfterChange": 300, "signatureBeforeChange": "\r public void showSelection()", "signatureAfterChange": "\r public void showSelection()", "diff": ["-\tshowOffset(selection.x);\r", "-\tshowOffset(selection.y);\r", "+\tboolean selectionFits;\r", "+\tint startOffset, startLine, startX, endOffset, endLine, endX, offsetInLine;\r", "+\r", "+\t// is selection from right-to-left?\r", "+\tboolean rightToLeft = caretOffset == selection.x;\r", "+\r", "+\tif (rightToLeft) {\r", "+\t\tstartOffset = selection.y;\r", "+\t\tendOffset = selection.x;\r", "+\t} else {\r", "+\t\tstartOffset = selection.x;\r", "+\t\tendOffset = selection.y;\r", "+\t}\r", "+\t\r", "+\t// calculate the logical start and end values for the selection\r", "+\tstartLine = content.getLineAtOffset(startOffset);\r", "+\toffsetInLine = startOffset - content.getOffsetAtLine(startLine);\r", "+\tstartX = getXAtOffset(content.getLine(startLine), startLine, offsetInLine);\t\r", "+\tendLine  = content.getLineAtOffset(endOffset);\r", "+\toffsetInLine = endOffset - content.getOffsetAtLine(endLine);\r", "+\tendX = getXAtOffset(content.getLine(endLine), endLine, offsetInLine);\t\r", "+\r", "+\t// can the selection be fully displayed within the widget's visible width?\r", "+\tint w = getClientArea().width;\r", "+\tif (rightToLeft) {\r", "+\t\tselectionFits = startX - endX <= w;\r", "+\t} else {\r", "+\t\tselectionFits = endX - startX <= w;\r", "+\t}\r", "+\t\r", "+\tif (selectionFits) {\r", "+\t\t// show as much of the selection as possible by first showing\r", "+\t\t// the start of the selection\r", "+\t\tshowLocation(startX, startLine);\r", "+\t\t// endX value could change if showing startX caused a scroll to occur\r", "+\t\tendX = getXAtOffset(content.getLine(endLine), endLine, offsetInLine);\t\r", "+\t\tshowLocation(endX, endLine);\r", "+\t} else {\r", "+\t\t// just show the end of the selection since the selection start \r", "+\t\t// will not be visible\r", "+\t\tshowLocation(endX, endLine);\r", "+\t}\t \r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd899f791fd35bdf4e45060ae65f6eb6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "788aa210199a74de286d6a077ccd83db9fcc48c1", "commitAfterChange": "750a2fb25f4d584fd9298132f606c31cf0442464", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  void drawIcon(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple)", "signatureAfterChange": "  void drawIcon(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple)", "diff": ["+\tint offsetX = 0, offsetY = 0;", "-\t\tflags |= OS.DI_NOMIRROR;", "+\t\tif ((OS.GetLayout(handle) & OS.LAYOUT_RTL) != 0) {", "+\t\t\tflags |= OS.DI_NOMIRROR;", "+\t\t\t/*", "+\t\t\t* Bug in Windows.  For some reason, DrawIconEx() does not take", "+\t\t\t* into account the window origin when the DI_NOMIRROR and", "+\t\t\t* LAYOUT_RTL are set.  The fix is to set the window origin to", "+\t\t\t* (0, 0) and offset the drawing ourselves.  ", "+\t\t\t*/", "+\t\t\tPOINT pt = new POINT();", "+\t\t\tOS.GetWindowOrgEx(handle, pt);", "+\t\t\toffsetX = pt.x;", "+\t\t\toffsetY = pt.y;", "+\t\t}", "-\t\tOS.DrawIconEx(handle, destX, destY, srcImage.handle, 0, 0, 0, 0, flags);", "+\t\tif (offsetX != 0 || offsetY != 0) OS.SetWindowOrgEx(handle, 0, 0, null);", "+\t\tOS.DrawIconEx(handle, destX - offsetX, destY - offsetY, srcImage.handle, 0, 0, 0, 0, flags);", "+\t\tif (offsetX != 0 || offsetY != 0) OS.SetWindowOrgEx(handle, offsetX, offsetY, null);", "-\t\t\tOS.DrawIconEx(handle, destX, destY, srcImage.handle, 0, 0, 0, 0, flags);", "+\t\t\tif (offsetX != 0 || offsetY != 0) OS.SetWindowOrgEx(handle, 0, 0, null);", "+\t\t\tOS.DrawIconEx(handle, destX - offsetX, destY - offsetY, srcImage.handle, 0, 0, 0, 0, flags);", "+\t\t\tif (offsetX != 0 || offsetY != 0) OS.SetWindowOrgEx(handle, offsetX, offsetY, null);", "-\t\t\t\tOS.DrawIconEx(handle, destX, destY, hIcon, destWidth, destHeight, 0, 0, flags);", "+\t\t\t\tif (offsetX != 0 || offsetY != 0) OS.SetWindowOrgEx(handle, 0, 0, null);", "+\t\t\t\tOS.DrawIconEx(handle, destX - offsetX, destY - offsetY, hIcon, destWidth, destHeight, 0, 0, flags);", "+\t\t\t\tif (offsetX != 0 || offsetY != 0) OS.SetWindowOrgEx(handle, offsetX, offsetY, null);"]}], "num": 18540}
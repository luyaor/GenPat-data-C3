{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "adc61d6fe464a45770c490692c360dc6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1eb61e309be50f3e9990278534d48752", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "6c4a2c166738e67832efca98869d4a51c06db92b", "commitAfterChange": "84d56fe220646f29848300da6bc168504ddc3a77", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 5, "signatureBeforeChange": "  int processEvent (int eventNumber, int int0, int int1, int int2)", "signatureAfterChange": "  int _createColumnHandle(int index)", "diff": ["+int _createColumnHandle(int index) {", "+\tint columnHandle = OS.gtk_tree_view_column_new();", "+\tif (columnHandle == 0) error(SWT.ERROR_NO_HANDLES);", "+\tint renderer;", "+\trenderer = OS.gtk_cell_renderer_text_new();", "+\tif (renderer == 0) error(SWT.ERROR_NO_HANDLES);", "+\tOS.gtk_tree_view_column_pack_end(columnHandle, renderer, true);", "+\tOS.gtk_tree_view_column_add_attribute(columnHandle, renderer, \"text\", index);", "+\tOS.gtk_tree_view_column_add_attribute(columnHandle, renderer, \"foreground-gdk\", 2*MAX_COLUMNS+1);", "+\tOS.gtk_tree_view_column_add_attribute(columnHandle, renderer, \"background-gdk\", 2*MAX_COLUMNS+2);", "+\trenderer = OS.gtk_cell_renderer_pixbuf_new();", "+\tif (renderer == 0) error(SWT.ERROR_NO_HANDLES);", "+\tOS.gtk_tree_view_column_pack_end(columnHandle, renderer, false);", "+\tOS.gtk_tree_view_column_add_attribute(columnHandle, renderer, \"pixbuf\", index+MAX_COLUMNS);", "+\tif ((style & SWT.CHECK) != 0 && (index==0)) {", "+\t\trenderer = OS.gtk_cell_renderer_toggle_new();", "+\t\tif (renderer == 0) error(SWT.ERROR_NO_HANDLES);", "+\t\tOS.gtk_tree_view_column_pack_end(columnHandle, renderer, false);", "+\t\tOS.gtk_tree_view_column_add_attribute(columnHandle, renderer, \"active\", 2*MAX_COLUMNS);", "+\t\tOS.g_signal_connect(renderer, OS.toggled, getDisplay().toggleProc, columnHandle);", "+\tOS.gtk_tree_view_column_set_resizable(columnHandle, true);", "+\treturn columnHandle;", "-int processEvent (int eventNumber, int int0, int int1, int int2) {", "-\tif (eventNumber == 0) {", "-\t\tGdkEvent gdkEvent = new GdkEvent ();", "-\t\tOS.memmove (gdkEvent, int0, GdkEvent.sizeof);", "-\t\tswitch (gdkEvent.type) {", "-\t\t\tcase OS.GDK_BUTTON_PRESS:", "-\t\t\tcase OS.GDK_2BUTTON_PRESS: {", "-\t\t\t\tOS.GTK_CLIST_RESYNC_SELECTION (handle);", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.GDK_BUTTON_RELEASE: {", "-\t\t\t\t/*", "-\t\t\t\t* Feature in GTK.  When an item is reselected, GTK", "-\t\t\t\t* does not issue notification.  The fix is to detect", "-\t\t\t\t* that the mouse was released over a selected item when", "-\t\t\t\t* no selection signal was set and issue a fake selection", "-\t\t\t\t* event.", "-\t\t\t\t*/", "-\t\t\t\tif ((style & SWT.MULTI) != 0) {", "-\t\t\t\t\tif (selected) {", "-\t\t\t\t\t\tdouble[] px = new double [1], py = new double [1];", "-\t\t\t\t\t\tOS.gdk_event_get_coords (int0, px, py);", "-\t\t\t\t\t\tint x = (int) (px[0]), y = (int) (py[0]);", "-\t\t\t\t\t\tint [] row = new int [1], column = new int [1];", "-\t\t\t\t\t\tif (OS.gtk_clist_get_selection_info (handle, x, y, row, column) != 0) {", "-\t\t\t\t\t\t\tint list = OS.GTK_CLIST_SELECTION (handle);", "-\t\t\t\t\t\t\tif (list != 0) {", "-\t\t\t\t\t\t\t\tint length = OS.g_list_length (list);", "-\t\t\t\t\t\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\t\t\t\t\tif (row [0] == OS.g_list_nth_data (list, i)) {", "-\t\t\t\t\t\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\t\t\t\t\t\tevent.item = items [row [0]];", "-\t\t\t\t\t\t\t\t\t\tpostEvent (SWT.Selection, event);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tselected = false;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.GDK_FOCUS_CHANGE: {", "-\t\t\t\t/*", "-\t\t\t\t* Bug in GTK.  When an application opens a new modal top level", "-\t\t\t\t* shell from inside the \"select_row\" signal, the GtkCList does not get the", "-\t\t\t\t* mouse up and does not release grabs.  The fix is to release the grabs", "-\t\t\t\t* when focus is lost.", "-\t\t\t\t*/", "-\t\t\t\tGdkEventFocus focusEvent = new GdkEventFocus ();", "-\t\t\t\tOS.memmove (focusEvent, int0, GdkEventFocus.sizeof);", "-\t\t\t\tif (focusEvent.in == 0) {", "-\t\t\t\t\tif (OS.gtk_grab_get_current () == handle) {", "-\t\t\t\t\t\tOS.gtk_grab_remove (handle);", "-\t\t\t\t\t\tOS.gdk_pointer_ungrab (OS.GDK_CURRENT_TIME);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\treturn 1;", "-\t}", "-\treturn super.processEvent (eventNumber, int0, int1, int2);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c45aedcb3250f8ec268442f99d0307f4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "08ed4d34906d3cb004511badd9a3286f04d40b7a", "commitAfterChange": "3587c6fb9068182d41169c6c886f0d5faa0219e6", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 22, "signatureBeforeChange": "  int processEvent (int eventNumber, int int0, int int1, int int2)", "signatureAfterChange": "  int processDefaultSelection (int int0, int int1, int int2)", "diff": ["-", "-int processEvent (int eventNumber, int int0, int int1, int int2) {", "-\tif (eventNumber == 0) {", "-\t\tGdkEvent gdkEvent = new GdkEvent ();", "-\t\tOS.memmove (gdkEvent, int0, GdkEvent.sizeof);", "-\t\tint type = gdkEvent.type;", "-\t\tswitch (type) {", "-\t\t\tcase OS.GDK_BUTTON_PRESS:", "-\t\t\tcase OS.GDK_2BUTTON_PRESS: {", "-\t\t\t\tOS.GTK_CLIST_RESYNC_SELECTION (handle);", "-\t\t\t\t", "-\t\t\t\t/*", "-\t\t\t\t* Feature in GTK.  Double selection can only be implemented", "-\t\t\t\t* in a mouse down handler for a tree unlike the list, the event", "-\t\t\t\t* that caused the select signal is not included when the select", "-\t\t\t\t* signal is issued.", "-\t\t\t\t*/", "-\t\t\t\tif (type == OS.GDK_2BUTTON_PRESS) {", "-\t\t\t\t\tdoubleSelected = true;", "-\t\t\t\t\tdouble[] px = new double [1], py = new double [1];", "-\t\t\t\t\tOS.gdk_event_get_coords (int0, px, py);", "-\t\t\t\t\tint x = (int)(px[0]), y = (int)(py[0]);\t", "-\t\t\t\t\tif (!OS.gtk_ctree_is_hot_spot (handle, x, y)) {", "-\t\t\t\t\t\tint [] row = new int [1], column = new int [1];", "-\t\t\t\t\t\tint code = OS.gtk_clist_get_selection_info (handle, x, y, row, column);", "-\t\t\t\t\t\tif (code != 0) {", "-\t\t\t\t\t\t\tint node = OS.gtk_ctree_node_nth (handle, row [0]);", "-\t\t\t\t\t\t\tint index = OS.gtk_ctree_node_get_row_data (handle, node) - 1;", "-\t\t\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\t\t\tevent.item = items [index];", "-\t\t\t\t\t\t\tpostEvent (SWT.DefaultSelection, event);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.GDK_BUTTON_RELEASE: {", "-\t\t\t\t/*", "-\t\t\t\t* Feature in GTK.  When an item is reselected in a", "-\t\t\t\t* multi-select tree, GTK does not issue notification.", "-\t\t\t\t* The fix is to detect that the mouse was released over", "-\t\t\t\t* a selected item when no selection signal was set and", "-\t\t\t\t* issue a fake selection event.", "-\t\t\t\t*/", "-\t\t\t\tif ((style & SWT.MULTI) != 0) {", "-\t\t\t\t\tif (selected && !doubleSelected) {", "-\t\t\t\t\t\tdouble[] px = new double [1], py = new double [1];", "-\t\t\t\t\t\tOS.gdk_event_get_coords (int0, px, py);", "-\t\t\t\t\t\tint x = (int)(px[0]), y = (int)(py[0]);\t", "-\t\t\t\t\t\tif (!OS.gtk_ctree_is_hot_spot (handle, x, y)) {", "-\t\t\t\t\t\t\tint [] row = new int [1], column = new int [1];", "-\t\t\t\t\t\t\tint code = OS.gtk_clist_get_selection_info (handle, x, y, row, column);", "-\t\t\t\t\t\t\tif (code != 0) {", "-\t\t\t\t\t\t\t\tint focus = OS.gtk_ctree_node_nth (handle, row [0]);", "-\t\t\t\t\t\t\t\tint selection = OS.GTK_CLIST_SELECTION (handle);", "-\t\t\t\t\t\t\t\tif (selection != 0) {", "-\t\t\t\t\t\t\t\t\tint length = OS.g_list_length (selection);", "-\t\t\t\t\t\t\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\t\t\t\t\t\tint node = OS.g_list_nth_data (selection, i);", "-\t\t\t\t\t\t\t\t\t\tif (node == focus) {", "-\t\t\t\t\t\t\t\t\t\t\tint index = OS.gtk_ctree_node_get_row_data (handle, node) - 1;", "-\t\t\t\t\t\t\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\t\t\t\t\t\t\tevent.item = items [index];", "-\t\t\t\t\t\t\t\t\t\t\tpostEvent (SWT.Selection, event);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tselected = false;", "-\t\t\t\t}", "-\t\t\t\tdoubleSelected = false;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.GDK_FOCUS_CHANGE: {", "-\t\t\t\t/*", "-\t\t\t\t* Bug in GTK.  When an application opens a new modal top level", "-\t\t\t\t* shell from inside the \"select_row\" signal, the GtkCList does not get the", "-\t\t\t\t* mouse up and does not release grabs.  The fix is to release the grabs", "-\t\t\t\t* when focus is lost.", "-\t\t\t\t*/", "-\t\t\t\tGdkEventFocus focusEvent = new GdkEventFocus ();", "-\t\t\t\tOS.memmove (focusEvent, int0, GdkEventFocus.sizeof);", "-\t\t\t\tif (focusEvent.in == 0) {", "-\t\t\t\t\tif (OS.gtk_grab_get_current () == handle) {", "-\t\t\t\t\t\tOS.gtk_grab_remove (handle);", "-\t\t\t\t\t\tOS.gdk_pointer_ungrab (OS.GDK_CURRENT_TIME);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\treturn 1;", "-\t}", "-\treturn super.processEvent (eventNumber, int0, int1, int2);", "-}", "+int processDefaultSelection (int int0, int int1, int int2) {", "+\tint iter = OS.g_malloc(OS.GtkTreeIter_sizeof());", "+\tOS.gtk_tree_model_get_iter(modelHandle, iter, int0);", "+\tint[] index = new int[1];", "+\tOS.gtk_tree_model_get(modelHandle, iter, 4, index, -1);", "+\tOS.g_free(iter);", "+\tEvent event = new Event ();", "+\tevent.item = items[index[0]];", "+\tpostEvent (SWT.DefaultSelection, event);", "+\treturn 0;"]}], "num": 32367}
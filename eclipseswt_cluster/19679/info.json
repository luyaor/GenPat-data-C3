{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "32d0987d832d75be808640ae7c7280f3", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c4716a798092eb9eb7b986c1ff8a255", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/cocoa/org/eclipse/swt/browser/WebKit.java", "commitBeforeChange": "647136ddf4768614d99658a624528bafb2469eb5", "commitAfterChange": "b42f3deae13793369b19cd7f6ae257616fcd4739", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "  NSObject callJava (int index, int args, int arg1)", "signatureAfterChange": "  NSObject callJava (int index, int token, int args, int arg1)", "diff": ["-NSObject callJava (int /*long*/ index, int /*long*/ args, int /*long*/ arg1) {", "+NSObject callJava (int /*long*/ index, int /*long*/ token, int /*long*/ args, int /*long*/ arg1) {", "-\t\tBrowserFunction function = (BrowserFunction)functions.get (key);", "-\t\tif (function != null) {", "-\t\t\ttry {", "-\t\t\t\tObject temp = convertToJava (args);", "-\t\t\t\tif (temp instanceof Object[]) {", "-\t\t\t\t\tObject[] arguments = (Object[])temp;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\treturnValue = function.function (arguments);", "-\t\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\t\t/* exception during function invocation */", "-\t\t\t\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());", "+\t\tobject = new NSObject (token);", "+\t\tif (object.isKindOfClass (clazz)) {", "+\t\t\tnumber = new NSNumber (token);", "+\t\t\tlong tokenValue = (long)number.doubleValue ();", "+\t\t\tBrowserFunction function = (BrowserFunction)functions.get (key);", "+\t\t\tif (function != null && tokenValue == function.token) {", "+\t\t\t\ttry {", "+\t\t\t\t\tObject temp = convertToJava (args);", "+\t\t\t\t\tif (temp instanceof Object[]) {", "+\t\t\t\t\t\tObject[] arguments = (Object[])temp;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\treturnValue = function.function (arguments);", "+\t\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\t\t/* exception during function invocation */", "+\t\t\t\t\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());", "+\t\t\t\t\t\t}", "+\t\t\t\t} catch (IllegalArgumentException e) {", "+\t\t\t\t\t/* invalid argument value type */", "+\t\t\t\t\tif (function.isEvaluate) {", "+\t\t\t\t\t\t/* notify the evaluate function so that a java exception can be thrown */", "+\t\t\t\t\t\tfunction.function (new String[] {WebBrowser.CreateErrorString (new SWTException (SWT.ERROR_INVALID_RETURN_VALUE).getLocalizedMessage ())});", "+\t\t\t\t\t}", "+\t\t\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());", "-\t\t\t} catch (IllegalArgumentException e) {", "-\t\t\t\t/* invalid argument value type */", "-\t\t\t\tif (function.isEvaluate) {", "-\t\t\t\t\t/* notify the evaluate function so that a java exception can be thrown */", "-\t\t\t\t\tfunction.function (new String[] {WebBrowser.CreateErrorString (new SWTException (SWT.ERROR_INVALID_RETURN_VALUE).getLocalizedMessage ())});", "-\t\t\t\t}", "-\t\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "befdbdc73954f101b832dffe556b91a3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/carbon/org/eclipse/swt/browser/WebKit.java", "commitBeforeChange": "647136ddf4768614d99658a624528bafb2469eb5", "commitAfterChange": "b42f3deae13793369b19cd7f6ae257616fcd4739", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": "  int callJava (int index, int args, int arg1)", "signatureAfterChange": "  int callJava (int index, int token, int args, int arg1)", "diff": ["-int /*long*/ callJava (int /*long*/ index, int /*long*/ args, int /*long*/ arg1) {", "+int /*long*/ callJava (int /*long*/ index, int /*long*/ token, int /*long*/ args, int /*long*/ arg1) {", "-\t\tObject key = new Integer (functionIndex);", "-\t\tBrowserFunction function = (BrowserFunction)functions.get (key);", "-\t\tif (function != null) {", "-\t\t\ttry {", "-\t\t\t\tObject temp = convertToJava (args);", "-\t\t\t\tif (temp instanceof Object[]) {", "-\t\t\t\t\tObject[] arguments = (Object[])temp;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\treturnValue = function.function (arguments);", "-\t\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\t\t/* exception during function invocation */", "-\t\t\t\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());", "+\t\tif (Cocoa.objc_msgSend (token, Cocoa.S_isKindOfClass, Cocoa.C_NSNumber) != 0) {", "+\t\t\tlong tokenValue = (long)Cocoa.objc_msgSend_fpret (token, Cocoa.S_doubleValue);", "+\t\t\tObject key = new Integer (functionIndex);", "+\t\t\tBrowserFunction function = (BrowserFunction)functions.get (key);", "+\t\t\tif (function != null && tokenValue == function.token) {", "+\t\t\t\ttry {", "+\t\t\t\t\tObject temp = convertToJava (args);", "+\t\t\t\t\tif (temp instanceof Object[]) {", "+\t\t\t\t\t\tObject[] arguments = (Object[])temp;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\treturnValue = function.function (arguments);", "+\t\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\t\t/* exception during function invocation */", "+\t\t\t\t\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());", "+\t\t\t\t\t\t}", "+\t\t\t\t} catch (IllegalArgumentException e) {", "+\t\t\t\t\t/* invalid argument value type */", "+\t\t\t\t\tif (function.isEvaluate) {", "+\t\t\t\t\t\t/* notify the evaluate function so that a java exception can be thrown */", "+\t\t\t\t\t\tfunction.function (new String[] {WebBrowser.CreateErrorString (new SWTException (SWT.ERROR_INVALID_RETURN_VALUE).getLocalizedMessage ())});", "+\t\t\t\t\t}", "+\t\t\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());", "-\t\t\t} catch (IllegalArgumentException e) {", "-\t\t\t\t/* invalid argument value type */", "-\t\t\t\tif (function.isEvaluate) {", "-\t\t\t\t\t/* notify the evaluate function so that a java exception can be thrown */", "-\t\t\t\t\tfunction.function (new String[] {WebBrowser.CreateErrorString (new SWTException (SWT.ERROR_INVALID_RETURN_VALUE).getLocalizedMessage ())});", "-\t\t\t\t}", "-\t\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());"]}], "num": 19679}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "280a7d279b130b84d3f0df3112d44769", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b91871cb200c4c25dd3670a5d7673bcf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\tint features = OS.kControlSupportsEmbedding | OS.kControlSupportsFocus | OS.kControlGetsFocusOnClick;", "-\tint [] outControl = new int [1];", "-\tint window = OS.GetControlOwner (parent.handle);", "-\tOS.CreateUserPaneControl (window, null, features, outControl);", "-\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\thandle = outControl [0];", "+\tif (OS.HIVIEW) {", "+\t\tint [] outControl = new int [1];", "+\t\tif ((style & SWT.MULTI) != 0 || ((style & SWT.BORDER) == 0)) {", "+\t\t\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) != 0) {", "+\t\t\t\tint options = 0;", "+\t\t\t\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) == (SWT.H_SCROLL | SWT.V_SCROLL)) options |= OS.kHIScrollViewOptionsAllowGrow;", "+\t\t\t\tif ((style & SWT.H_SCROLL) != 0) options |= OS.kHIScrollViewOptionsHorizScroll;", "+\t\t\t\tif ((style & SWT.V_SCROLL) != 0) options |= OS.kHIScrollViewOptionsVertScroll;", "+\t\t\t\tOS.HIScrollViewCreate (options, outControl);", "+\t\t\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tscrolledHandle = outControl [0];", "+\t\t\t\tOS.HIViewSetVisible (scrolledHandle, true);", "+\t\t\t}", "+\t\t\tint iFrameOptions = OS.kTXNDontDrawCaretWhenInactiveMask | OS.kTXNMonostyledTextMask;", "+\t\t\tif ((style & SWT.SINGLE) != 0) iFrameOptions |= OS.kTXNSingleLineOnlyMask;", "+\t\t\tif ((style & SWT.WRAP) != 0) iFrameOptions |= OS.kTXNAlwaysWrapAtViewEdgeMask;", "+\t\t\tOS.HITextViewCreate (null, 0, iFrameOptions, outControl);", "+\t\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\thandle = outControl [0];", "+\t\t\tOS.HIViewSetVisible (handle, true);", "+\t\t\ttxnObject = OS.HITextViewGetTXNObject (handle);\t\t\t", "+\t\t\tint ptr = OS.NewPtr (Rect.sizeof);", "+\t\t\tRect rect = inset ();", "+\t\t\tOS.memcpy (ptr, rect, Rect.sizeof);", "+\t\t\tint [] tags = new int [] {", "+\t\t\t\tOS.kTXNDisableDragAndDropTag,", "+\t\t\t\tOS.kTXNIOPrivilegesTag,", "+\t\t\t\tOS.kTXNMarginsTag,", "+\t\t\t\tOS.kTXNJustificationTag,", "+\t\t\t\tOS.kTXNDoFontSubstitution,", "+\t\t\t\tOS.kTXNWordWrapStateTag,", "+\t\t\t\tOS.kTXNAutoScrollBehaviorTag,", "+\t\t\t};", "+\t\t\tint just = OS.kTXNFlushLeft;", "+\t\t\tif ((style & SWT.CENTER) != 0) just = OS.kTXNCenter;", "+\t\t\tif ((style & SWT.RIGHT) != 0) just = OS.kTXNFlushRight;", "+\t\t\tint [] datas = new int [] {", "+\t\t\t\t1,", "+\t\t\t\t(style & SWT.READ_ONLY) != 0 ? 1 : 0,", "+\t\t\t\tptr,", "+\t\t\t\tjust,", "+\t\t\t\t1,", "+\t\t\t\t(style & SWT.WRAP) != 0 ? 0 : 1,", "+\t\t\t\t0,", "+\t\t\t};", "+\t\t\tOS.TXNSetTXNObjectControls (txnObject, false, tags.length, tags, datas);", "+\t\t\tOS.DisposePtr (ptr);", "+\t\t} else {", "+\t\t\tint window = OS.GetControlOwner (parent.handle);", "+\t\t\tOS.CreateEditUnicodeTextControl (window, null, 0, (style & SWT.PASSWORD) != 0, null, outControl);", "+\t\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\thandle = outControl [0];", "+\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextSingleLineTag, 1, new byte [] {1});", "+\t\t\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlEditTextLockedTag, 1, new byte [] {1});", "+\t\t\t}", "+\t\t\tif ((style & (SWT.RIGHT | SWT.CENTER)) != 0) {", "+\t\t\t\tControlFontStyleRec fontStyle = new ControlFontStyleRec ();", "+\t\t\t\tfontStyle.flags |= OS.kControlUseJustMask;", "+\t\t\t\tif ((style & SWT.CENTER) != 0) fontStyle.just = OS.teJustCenter;", "+\t\t\t\tif ((style & SWT.RIGHT) != 0) fontStyle.just = OS.teJustRight;", "+\t\t\t\tOS.SetControlFontStyle (handle, fontStyle);", "+\t\t\t}", "+\t\t}\t\t", "+\t} else {", "+\t\tint features = OS.kControlSupportsEmbedding | OS.kControlSupportsFocus | OS.kControlGetsFocusOnClick;", "+\t\tint [] outControl = new int [1];", "+\t\tint window = OS.GetControlOwner (parent.handle);", "+\t\tOS.CreateUserPaneControl (window, null, features, outControl);", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\t", "+\t\t/*", "+\t\t* Feature in the Macintosh.  The TXNObject is not a control but creates scroll", "+\t\t* bar controls to scroll the text.  These are created in the root and are not", "+\t\t* children of the user pane that is used to represent the TNXObject.  The fix", "+\t\t* is to embed the scroll bars in the user pane.", "+\t\t*/", "+\t\tint [] theRoot = new int [1];", "+\t\tOS.GetRootControl (window, theRoot);", "+\t\tshort [] oldCount = new short [1];", "+\t\tOS.CountSubControls (theRoot [0], oldCount);\t", "+\t\t", "+\t\t/* Create the TXNObject */", "+\t\tint iFrameOptions = OS.kTXNDontDrawCaretWhenInactiveMask | OS.kTXNMonostyledTextMask;", "+\t\tif ((style & SWT.H_SCROLL) != 0) iFrameOptions |= OS.kTXNWantHScrollBarMask;", "+\t\tif ((style & SWT.V_SCROLL) != 0) iFrameOptions |= OS.kTXNWantVScrollBarMask;", "+\t\tif ((style & SWT.SINGLE) != 0) iFrameOptions |= OS.kTXNSingleLineOnlyMask;", "+\t\tif ((style & SWT.WRAP) != 0) iFrameOptions |= OS.kTXNAlwaysWrapAtViewEdgeMask;", "+\t\tint [] oTXNObject = new int [1], oTXNFrameID = new int[1];", "+\t\tOS.TXNNewObject (0, window, null, iFrameOptions, OS.kTXNTextEditStyleFrameType, OS.kTXNUnicodeTextFile, OS.kTXNSystemDefaultEncoding, oTXNObject, oTXNFrameID, 0);", "+\t\tif (oTXNObject [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\ttxnObject = oTXNObject [0];", "+\t\ttxnFrameID = oTXNFrameID [0];", "+\t\t", "+\t\t/* Embed the scroll bars in the user pane */", "+\t\tshort [] newCount = new short [1];", "+\t\tOS.CountSubControls (theRoot [0], newCount);", "+\t\tint [] scrollBar = new int [1];", "+\t\tfor (int i=newCount [0]; i>oldCount [0]; --i) {", "+\t\t\tOS.GetIndexedSubControl (theRoot [0], (short) i, scrollBar);", "+\t\t\tOS.HIViewRemoveFromSuperview (scrollBar [0]);", "+\t\t\tOS.HIViewAddSubview (handle, scrollBar [0]);", "+\t\t}", "+\t\t", "+\t\t/* Configure the TXNObject */", "+\t\tint ptr = OS.NewPtr (Rect.sizeof);", "+\t\tRect rect = new Rect ();", "+\t\tif (hasBorder ()) {", "+\t\t\tOS.SetRect (rect, (short) 1, (short) 1, (short) 1, (short) 1);", "+\t\t}", "+\t\tOS.memcpy (ptr, rect, Rect.sizeof);", "+\t\tint [] tags = new int [] {", "+\t\t\tOS.kTXNDisableDragAndDropTag,", "+\t\t\tOS.kTXNIOPrivilegesTag,", "+\t\t\tOS.kTXNMarginsTag,", "+\t\t\tOS.kTXNJustificationTag,", "+\t\t\tOS.kTXNDoFontSubstitution,", "+\t\t};", "+\t\tint just = OS.kTXNFlushLeft;", "+\t\tif ((style & SWT.CENTER) != 0) just = OS.kTXNCenter;", "+\t\tif ((style & SWT.RIGHT) != 0) just = OS.kTXNFlushRight;", "+\t\tint [] datas = new int [] {", "+\t\t\t1,", "+\t\t\t(style & SWT.READ_ONLY) != 0 ? 1 : 0,", "+\t\t\tptr,", "+\t\t\tjust,", "+\t\t\t1,", "+\t\t};", "+\t\tOS.TXNSetTXNObjectControls (txnObject, false, tags.length, tags, datas);", "+\t\tOS.TXNSetFrameBounds (txnObject, 0, 0, 0, 0, txnFrameID);", "+\t\tOS.DisposePtr (ptr);", "-\t/*", "-\t* Feature in the Macintosh.  The TXNObject is not a control but creates scroll", "-\t* bar controls to scroll the text.  These are created in the root and are not", "-\t* children of the user pane that is used to represent the TNXObject.  The fix", "-\t* is to embed the scroll bars in the user pane.", "-\t*/", "-\tint [] theRoot = new int [1];", "-\tOS.GetRootControl (window, theRoot);", "-\tshort [] oldCount = new short [1];", "-\tOS.CountSubControls (theRoot [0], oldCount);\t", "-\t", "-\t/* Create the TXNObject */", "-\tint iFrameOptions = OS.kTXNDontDrawCaretWhenInactiveMask | OS.kTXNMonostyledTextMask;", "-\tif ((style & SWT.H_SCROLL) != 0) iFrameOptions |= OS.kTXNWantHScrollBarMask;", "-\tif ((style & SWT.V_SCROLL) != 0) iFrameOptions |= OS.kTXNWantVScrollBarMask;", "-\tif ((style & SWT.SINGLE) != 0) iFrameOptions |= OS.kTXNSingleLineOnlyMask;", "-\tif ((style & SWT.WRAP) != 0) iFrameOptions |= OS.kTXNAlwaysWrapAtViewEdgeMask;", "-\tint [] oTXNObject = new int [1], oTXNFrameID = new int[1];", "-\tOS.TXNNewObject (0, window, null, iFrameOptions, OS.kTXNTextEditStyleFrameType, OS.kTXNUnicodeTextFile, OS.kTXNSystemDefaultEncoding, oTXNObject, oTXNFrameID, 0);", "-\tif (oTXNObject [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\ttxnObject = oTXNObject [0];", "-\ttxnFrameID = oTXNFrameID [0];", "-\t", "-\t/* Embed the scroll bars in the user pane */", "-\tshort [] newCount = new short [1];", "-\tOS.CountSubControls (theRoot [0], newCount);", "-\tint [] scrollBar = new int [1];", "-\tfor (int i=newCount [0]; i>oldCount [0]; --i) {", "-\t\tOS.GetIndexedSubControl (theRoot [0], (short) i, scrollBar);", "-\t\tOS.HIViewRemoveFromSuperview (scrollBar [0]);", "-\t\tOS.HIViewAddSubview (handle, scrollBar [0]);", "-\t}", "-\t", "-\t/* Configure the TXNObject */", "-\tint ptr = OS.NewPtr (Rect.sizeof);", "-\tRect rect = new Rect ();", "-\tif (hasBorder ()) {", "-\t\tOS.SetRect (rect, (short) 1, (short) 1, (short) 1, (short) 1);", "-\t}", "-\tOS.memcpy (ptr, rect, Rect.sizeof);", "-\tint [] tags = new int [] {", "-\t\tOS.kTXNDisableDragAndDropTag,", "-\t\tOS.kTXNIOPrivilegesTag,", "-\t\tOS.kTXNMarginsTag,", "-\t\tOS.kTXNJustificationTag,", "-\t\tOS.kTXNDoFontSubstitution,", "-\t};", "-\tint just = OS.kTXNFlushLeft;", "-\tif ((style & SWT.CENTER) != 0) just = OS.kTXNCenter;", "-\tif ((style & SWT.RIGHT) != 0) just = OS.kTXNFlushRight;", "-\tint [] datas = new int [] {", "-\t\t1,", "-\t\t(style & SWT.READ_ONLY) != 0 ? 1 : 0,", "-\t\tptr,", "-\t\tjust,", "-\t\t1,", "-\t};", "-\tOS.TXNSetTXNObjectControls (txnObject, false, tags.length, tags, datas);", "-\tOS.TXNSetFrameBounds (txnObject, 0, 0, 0, 0, txnFrameID);", "-\tOS.DisposePtr (ptr);", "+\t\t/*", "+\t\t* Bug in the Macintosh.  The caret height is too small until some text is set in the", "+\t\t* TXNObject.  The fix is to temporary change the text.", "+\t\t*/", "+\t\tchar [] buffer = new char [] {' '};", "+\t\tOS.TXNSetData (txnObject, OS.kTXNUnicodeTextData, buffer, 2, OS.kTXNStartOffset, OS.kTXNEndOffset);", "+\t\tOS.TXNSetData (txnObject, OS.kTXNUnicodeTextData, buffer, 0, OS.kTXNStartOffset, OS.kTXNEndOffset);", "-\t/*", "-\t* Bug in the Macintosh.  The caret height is too small until some text is set in the", "-\t* TXNObject.  The fix is to temporary change the text.", "-\t*/", "-\tchar [] buffer = new char [] {' '};", "-\tOS.TXNSetData (txnObject, OS.kTXNUnicodeTextData, buffer, 2, OS.kTXNStartOffset, OS.kTXNEndOffset);", "-\tOS.TXNSetData (txnObject, OS.kTXNUnicodeTextData, buffer, 0, OS.kTXNStartOffset, OS.kTXNEndOffset);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee84e59cdef16f5effdec637a6274888", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": "  void createHandle ()", "diff": ["-}", "-void createHandle (int index) {", "-\tstate |= HANDLE;", "-\t/* AW", "-\tint borderWidth = (style & SWT.BORDER) != 0 ? 1 : 0;", "-\t*/", "-\tint parentHandle = parent.handle;", "-\t/* ARROW button */", "+", "+void createHandle () {", "+\tint [] outControl = new int [1];", "+\tint window = OS.GetControlOwner (parent.handle);", "+\t\t\t\t", "-        /*", "-\t\tint alignment = OS.XmARROW_UP;", "-\t\tif ((style & SWT.UP) != 0) alignment = OS.XmARROW_UP;", "-\t\tif ((style & SWT.DOWN) != 0) alignment = OS.XmARROW_DOWN;", "-\t\tif ((style & SWT.LEFT) != 0) alignment = OS.XmARROW_LEFT;", "-\t\tif ((style & SWT.RIGHT) != 0) alignment = OS.XmARROW_RIGHT;", "-\t\tint [] argList = {", "-\t\t\tOS.XmNtraversalOn, 0,", "-\t\t\tOS.XmNarrowDirection, alignment,", "-\t\t\tOS.XmNborderWidth, borderWidth,", "-\t\t\tOS.XmNancestorSensitive, 1,", "-\t\t};", "-\t\thandle = OS.XmCreateArrowButton (parentHandle, null, argList, argList.length / 2);", "-        */", "-        handle= MacUtil.newControl(parentHandle, (short)OS.kControlBevelButtonNormalBevelProc);", "-\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tint kThemeDisclosureRight = 0;", "-  \t\tint kThemeDisclosureDown = 1;", "-  \t\tint kThemeDisclosureLeft = 2;", "-  \t\tint kThemeDisclosureButton = 6;", "-  \t\tint kControlBevelButtonKindTag = ('b'<<24) + ('e'<<16) + ('b'<<8) + 'k';", "-\t\tint orientation = kThemeDisclosureRight;", "-\t\tif ((style & SWT.UP) != 0) orientation = kThemeDisclosureRight; // NEEDS WORK", "-\t\tif ((style & SWT.DOWN) != 0) orientation = kThemeDisclosureDown;", "-\t\tif ((style & SWT.LEFT) != 0) orientation = kThemeDisclosureLeft;", "-\t\tOS.SetControlData (handle, OS.kControlEntireControl, kControlBevelButtonKindTag, new short [] {(short)(kThemeDisclosureButton)});", "+\t\tint orientation = OS.kThemeDisclosureRight;", "+\t\tif ((style & SWT.UP) != 0) orientation = OS.kThemeDisclosureRight; // NEEDS WORK", "+\t\tif ((style & SWT.DOWN) != 0) orientation = OS.kThemeDisclosureDown;", "+\t\tif ((style & SWT.LEFT) != 0) orientation = OS.kThemeDisclosureLeft;", "+\t\tOS.CreateBevelButtonControl(window, null, 0, (short)0, (short)OS.kControlBehaviorPushbutton, 0, (short)0, (short)0, (short)0, outControl);", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlBevelButtonKindTag, 2, new short [] {(short)(OS.kThemeDisclosureButton)});", "-        /* AW", "-\t\tif ((style & SWT.FLAT) != 0) {", "-\t\t\tint [] argList1 = {OS.XmNshadowThickness, 1};", "-\t\t\tOS.XtSetValues (handle, argList1, argList1.length / 2);", "-\t\t}", "-        */", "-\t\treturn;", "-", "-\t/* Compute alignment */", "-    /* AW", "-\tint alignment = OS.XmALIGNMENT_BEGINNING;", "-\tif ((style & SWT.CENTER) != 0) alignment = OS.XmALIGNMENT_CENTER;", "-\tif ((style & SWT.RIGHT) != 0) alignment = OS.XmALIGNMENT_END;", "-    */", "-", "-\t/* TOGGLE button */", "+\t", "+\tif ((style & SWT.CHECK) != 0) {", "+\t\t//OS.CreateCheckBoxControl (window, null, 0, 0 /*initially off*/, true, outControl);", "+\t\tOS.CreateBevelButtonControl(window, null, 0, (short)0, (short)OS.kControlBehaviorToggles, 0, (short)0, (short)0, (short)0, outControl);", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlBevelButtonKindTag, 2, new short [] {(short)OS.kThemeCheckBox});", "+\t}", "+\t", "+\tif ((style & SWT.RADIO) != 0) {", "+\t\t//OS.CreateRadioButtonControl(window, null, 0, 0 /*initially off*/, true, outControl);", "+\t\tOS.CreateBevelButtonControl(window, null, 0, (short)0, (short)OS.kControlBehaviorToggles, 0, (short)0, (short)0, (short)0, outControl);", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlBevelButtonKindTag, 2, new short [] {(short)OS.kThemeRadioButton});", "+\t}", "+\t", "-\t\t/*", "-\t\t* Bug in Motif.  When XmNindicatorOn is set to false,", "-\t\t* Motif doesn't reset the shadow thickness to give a", "-\t\t* push button look.  The fix is to set the shadow", "-\t\t* thickness when ever this resource is changed.", "-\t\t*/", "-        /* AW", "-\t\tDisplay display = getDisplay ();", "-\t\tint thickness = display.buttonShadowThickness;", "-\t\tint [] argList = {", "-\t\t\tOS.XmNancestorSensitive, 1,", "-\t\t\tOS.XmNrecomputeSize, 0,", "-\t\t\tOS.XmNindicatorOn, 0,", "-\t\t\tOS.XmNshadowThickness, (style & SWT.FLAT) != 0 ? 1 : thickness,", "-\t\t\tOS.XmNalignment, alignment,", "-\t\t\tOS.XmNborderWidth, borderWidth,", "-\t\t};", "-\t\thandle = OS.XmCreateToggleButton (parentHandle, null, argList, argList.length / 2);", "-        */", "-\t\thandle= MacUtil.newControl(parentHandle, (short)0, OS.kControlBehaviorToggles, (short)0, OS.kControlBevelButtonNormalBevelProc);", "-\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tsetFont(defaultFont());", "-\t\treturn;", "+\t\tOS.CreateBevelButtonControl(window, null, 0, (short)OS.kControlBevelButtonNormalBevel, (short)OS.kControlBehaviorToggles, 0, (short)0, (short)0, (short)0, outControl);", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\tif ((style & SWT.FLAT) == 0 ) {", "+\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlBevelButtonKindTag, 2, new short [] {(short)OS.kThemeRoundedBevelButton});", "+\t\t}", "+\t}", "+\t", "+\tif ((style & SWT.PUSH) != 0) {", "+\t\tif ((style & SWT.FLAT) != 0) {", "+\t\t\tOS.CreateBevelButtonControl(window, null, 0, (short)2, (short)OS.kControlBehaviorPushbutton, 0, (short)0, (short)0, (short)0, outControl);", "+\t\t} else {", "+\t\t\tOS.CreatePushButtonControl (window, null, 0, outControl);", "+\t\t\t//OS.CreateBevelButtonControl(window, null, 0, (short)2, (short)OS.kControlBehaviorPushbutton, 0, (short)0, (short)0, (short)0, outControl);", "+\t\t}", "+\t\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = outControl [0];", "+\t\tif ((style & SWT.FLAT) == 0 ) {", "+\t\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlBevelButtonKindTag, 2, new short [] {(short)OS.kThemePushButton});", "+\t\t}", "-\t/* CHECK or RADIO button */", "-\tif ((style & (SWT.CHECK | SWT.RADIO)) != 0) {", "-\t\t/*", "-\t\t* Bug in Motif.  For some reason, a toggle button", "-\t\t* with XmNindicatorType XmONE_OF_MANY must have this", "-\t\t* value set at creation or the highlight color will", "-\t\t* not be correct.  The fix is to set these values", "-\t\t* on create.", "-\t\t*/", "-        /* AW", "-\t\tint indicatorType = OS.XmONE_OF_MANY;", "-\t\tif ((style & SWT.CHECK) != 0) indicatorType = OS.XmN_OF_MANY;", "-\t\tint [] argList = {", "-\t\t\tOS.XmNancestorSensitive, 1,", "-\t\t\tOS.XmNrecomputeSize, 0,", "-\t\t\tOS.XmNindicatorType, indicatorType,", "-\t\t\tOS.XmNalignment, alignment,", "-\t\t\tOS.XmNborderWidth, borderWidth,", "-\t\t};", "-\t\thandle = OS.XmCreateToggleButton (parentHandle, null, argList, argList.length / 2);", "-        */", "-\t\tshort type= (style & SWT.CHECK) != 0", "-\t\t\t\t\t? OS.kControlCheckBoxAutoToggleProc", "-\t\t\t\t\t: OS.kControlRadioButtonAutoToggleProc;", "-\t\thandle= MacUtil.newControl(parentHandle, (short)0, (short)0, (short)100, type);", "-\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tsetFont(defaultFont());", "-\t\treturn;", "+\tControlFontStyleRec fontRec = new ControlFontStyleRec();", "+\tfontRec.flags = (short) OS.kControlUseThemeFontIDMask;", "+\tfontRec.font = (short) defaultThemeFont ();", "+\tOS.SetControlFontStyle (handle, fontRec);", "+\t", "+\tif ((style & (SWT.LEFT | SWT.RIGHT | SWT.CENTER)) != 0) {", "+\t\tint textAlignment = 0;", "+\t\tint graphicAlignment = 0;", "+\t\tif ((style & SWT.LEFT) != 0) {", "+\t\t\ttextAlignment = OS.kControlBevelButtonAlignTextFlushLeft;", "+\t\t\tgraphicAlignment = OS.kControlBevelButtonAlignLeft;", "+\t\t}", "+\t\tif ((style & SWT.CENTER) != 0) {", "+\t\t\ttextAlignment = OS.kControlBevelButtonAlignTextCenter;", "+\t\t\tgraphicAlignment = OS.kControlBevelButtonAlignCenter;", "+\t\t}", "+\t\tif ((style & SWT.RIGHT) != 0) {", "+\t\t\ttextAlignment = OS.kControlBevelButtonAlignTextFlushRight;", "+\t\t\tgraphicAlignment = OS.kControlBevelButtonAlignRight;", "+\t\t}", "+\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlBevelButtonTextAlignTag, 2, new short [] {(short)textAlignment});", "+\t\tOS.SetControlData (handle, OS.kControlEntireControl, OS.kControlBevelButtonGraphicAlignTag, 2, new short [] {(short)graphicAlignment});", "+}", "-\t/* PUSH button */", "-    /* AW", "-\tint [] argList = {", "-\t\tOS.XmNancestorSensitive, 1,", "-\t\tOS.XmNrecomputeSize, 0,", "-\t\tOS.XmNalignment, alignment,", "-\t\tOS.XmNborderWidth, borderWidth,", "-    */", "-\tshort type= (style & SWT.FLAT) != 0", "-\t\t\t\t\t? OS.kControlBevelButtonNormalBevelProc", "-\t\t\t\t\t: OS.kControlPushButtonProc;", "-    handle= MacUtil.newControl(parentHandle, type);", "-\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\tsetFont(defaultFont());", "-\t/* AW", "-\tif ((style & SWT.FLAT) != 0) {", "-\t\tint [] argList1 = {OS.XmNshadowThickness, 1};", "-\t\tOS.XtSetValues (handle, argList1, argList1.length / 2);", "-\t}", "-\t*/"]}], "num": 35750}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1e8c41e17750c6050918eed5cb03776", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "840eb66804315ee2bc048b096688fcff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGeneratorAppUI.java", "commitBeforeChange": "89d88139f9e2cae0710fade32dcb1296489cc848", "commitAfterChange": "a5c47e65b59ca8e74887d733cd9f95e86a436d1a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public void open ()", "signatureAfterChange": "  public void open ()", "diff": ["-\t};", "+\t};\t", "+\tcreateMainClassPanel(panel, updateMainClassListener);", "+\tcreateOutputDirPanel(panel, updateMainClassListener);", "+\tcreateClassesPanel(panel);", "+\tcreateMembersPanel(panel);", "+\tcreateParametersPanel(panel);", "+\tcreateActionButtons(shell);", "+", "+\tPoint preferredSize = shell.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\tshell.setSize(shell.getSize().x, preferredSize.y);", "+\t((GridData)classesLt.getLayoutData()).heightHint = -1;", "+\t((GridData)membersLt.getLayoutData()).heightHint = -1;", "+\t((GridData)paramsLt.getLayoutData()).heightHint = -1;", "+\tupdateMainClass();", "+\tupdateClasses();", "+\tupdateMembers();", "+\tupdateParameters();", "+}", "-\t", "-\tmainClassCb.addListener(SWT.Selection, updateMainClassListener);", "-\tmainClassCb.addListener(SWT.DefaultSelection, updateMainClassListener);", "-\t", "-\toutputDirCb.addListener(SWT.Selection, updateMainClassListener);", "-\toutputDirCb.addListener(SWT.DefaultSelection, updateMainClassListener);", "-\t", "-\t", "-\tmemberEditorTx.addListener(SWT.FocusOut, new Listener() {", "-\t});", "-\tmemberEditorLt.addListener(SWT.FocusOut, new Listener() {", "-\t});", "-", "-\tparamEditorTx.addListener(SWT.FocusOut, new Listener() {", "-\t});", "-\tparamEditorLt.addListener(SWT.FocusOut, new Listener() {", "-\t});", "-\t", "-\tButton action;", "-\t\t", "-\tComposite actionsPanel = new Composite(shell, SWT.NONE);", "-\tdata = new GridData(GridData.FILL_VERTICAL);", "-\t", "-\taction = new Button(actionsPanel, SWT.PUSH);", "-\taction.setText(\"Generate All\");", "-\tdata = new GridData(GridData.FILL_HORIZONTAL);", "-\taction.setLayoutData(data);", "-\taction.addListener(SWT.Selection, new Listener() {", "-\taction = new Button(actionsPanel, SWT.PUSH);", "-\taction.setText(\"Generate Structs Header\");", "-\tdata = new GridData(GridData.FILL_HORIZONTAL);", "-\taction.setLayoutData(data);", "-\taction.addListener(SWT.Selection, new Listener() {", "-\t", "-\taction = new Button(actionsPanel, SWT.PUSH);", "-\taction.setText(\"Generate Structs\");", "-\tdata = new GridData(GridData.FILL_HORIZONTAL);", "-\taction.setLayoutData(data);", "-\taction.addListener(SWT.Selection, new Listener() {", "-", "-\taction = new Button(actionsPanel, SWT.PUSH);", "-\taction.setText(\"Generate Natives\");", "-\tdata = new GridData(GridData.FILL_HORIZONTAL);", "-\taction.setLayoutData(data);", "-\taction.addListener(SWT.Selection, new Listener() {", "-", "-\taction = new Button(actionsPanel, SWT.PUSH);", "-\taction.setText(\"Generate Constants\");", "-\tdata = new GridData(GridData.FILL_HORIZONTAL);", "-\taction.setLayoutData(data);", "-\taction.addListener(SWT.Selection, new Listener() {", "-\t});", "-\t", "-\taction = new Button(actionsPanel, SWT.PUSH);", "-\taction.setText(\"Generate Sizeof\");", "-\tdata = new GridData(GridData.FILL_HORIZONTAL);", "-\taction.setLayoutData(data);", "-\taction.addListener(SWT.Selection, new Listener() {", "-", "-\taction = new Button(actionsPanel, SWT.PUSH);", "-\taction.setText(\"Generate Meta Data\");", "-\tdata = new GridData(GridData.FILL_HORIZONTAL);", "-\taction.setLayoutData(data);", "-\taction.addListener(SWT.Selection, new Listener() {", "-\t", "-\tPoint preferredSize = shell.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\tshell.setSize(shell.getSize().x, preferredSize.y);", "-\t((GridData)classesLt.getLayoutData()).heightHint = -1;", "-\t((GridData)membersLt.getLayoutData()).heightHint = -1;", "-\t((GridData)paramsLt.getLayoutData()).heightHint = -1;", "-\t", "-\tupdateMainClass();", "-\tupdateClasses();", "-\tupdateMembers();", "-\tupdateParameters();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a116437f968a19d7f6030be17b99eec5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OpenGL/cocoa/org/eclipse/swt/opengl/GLCanvas.java", "commitBeforeChange": "510a9055a880b0149407b8b6f474eee88b6c1452", "commitAfterChange": "6d6e8bfdd21aebcd1012a6cbb789486aef5cbee8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public GLData getGLData ()", "signatureAfterChange": " public GLData getGLData ()", "diff": ["-\tint [] value = new int [1];", "-\t//TODO implement getGLData()", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_DOUBLEBUFFER, value);", "-//\tdata.doubleBuffer = value [0] != 0;", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_STEREO, value);", "-//\tdata.stereo = value [0] != 0;", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_RED_SIZE, value);", "-//\tdata.redSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_GREEN_SIZE, value);", "-//\tdata.greenSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_BLUE_SIZE, value);", "-//\tdata.blueSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_ALPHA_SIZE, value);", "-//\tdata.alphaSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_DEPTH_SIZE, value);", "-//\tdata.depthSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_STENCIL_SIZE, value);", "-//\tdata.stencilSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_ACCUM_RED_SIZE, value);", "-//\tdata.accumRedSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_ACCUM_GREEN_SIZE, value);", "-//\tdata.accumGreenSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_ACCUM_BLUE_SIZE, value);", "-//\tdata.accumBlueSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_ACCUM_ALPHA_SIZE, value);", "-//\tdata.accumAlphaSize = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_SAMPLE_BUFFERS_ARB, value);", "-//\tdata.sampleBuffers = value [0];", "-//\tAGL.aglDescribePixelFormat (pixelFormat, AGL.AGL_SAMPLES_ARB, value);", "-\tdata.samples = value [0];", "+\tint /*long*/ [] value = new int /*long*/ [1];", "+\tpixelFormat.getValues(value, OS.NSOpenGLPFADoubleBuffer, 0);", "+\tdata.doubleBuffer = value [0] != 0;", "+\tpixelFormat.getValues(value, OS.NSOpenGLPFAStereo, 0);", "+\tdata.stereo = value [0] != 0;", "+", "+\tpixelFormat.getValues(value, OS.NSOpenGLPFAAlphaSize, 0);", "+\tdata.alphaSize = (int/*64*/)value [0];", "+", "+\t/*", "+\t * Feature in Cocoa: NSOpenGL/CoreOpenGL only supports specifying the total number of bits", "+\t * in the size of the color component. For compatibility we split the color size less any alpha", "+\t * into thirds and allocate a third to each color.", "+\t */", "+\tpixelFormat.getValues(value, OS.NSOpenGLPFAColorSize, 0);", "+", "+\tint colorSize = ((int/*64*/)(value[0] - data.alphaSize)) / 3;", "+", "+\tdata.redSize = colorSize;", "+\tdata.greenSize = colorSize;", "+\tdata.blueSize = colorSize;", "+\t", "+\tpixelFormat.getValues(value, OS.NSOpenGLPFADepthSize, 0);", "+\tdata.depthSize = (int/*64*/)value [0];", "+\tpixelFormat.getValues(value, OS.NSOpenGLPFAStencilSize, 0);", "+\tdata.stencilSize = (int/*64*/)value [0];", "+\t", "+\t/*", "+\t * Feature(?) in Cocoa: NSOpenGL/CoreOpenGL doesn't support setting an accumulation buffer alpha, but", "+\t * has an alpha if the color values for the accumulation buffer were set. Allocate the values evenly", "+\t * in that case.", "+\t */", "+\tpixelFormat.getValues(value, OS.NSOpenGLPFAAccumSize, 0);", "+", "+\tint accumColorSize = (int/*64*/)(value[0]) / 4;\t", "+\tdata.accumRedSize = accumColorSize;", "+\tdata.accumGreenSize = accumColorSize;", "+\tdata.accumBlueSize = accumColorSize;", "+\tdata.accumAlphaSize = accumColorSize;", "+", "+\tpixelFormat.getValues(value, OS.NSOpenGLPFASampleBuffers, 0);", "+\tdata.sampleBuffers = (int/*64*/)value [0];", "+\tpixelFormat.getValues(value, OS.NSOpenGLPFASamples, 0);", "+\tdata.samples = (int/*64*/)value [0];"]}], "num": 20390}
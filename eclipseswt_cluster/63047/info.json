{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ef0b2a7df3eb90c771ec39b29d14dbbe", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c40e4dfec411181b7bb7bfce89a3ec64", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ce2f35c3f6b1d0b5778f68f011b1d8668d3c5c72", "commitAfterChange": "00bee382096a1807d86474fed7c933116a37eeb8", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 64, "signatureBeforeChange": "\r void doColumnRight()", "signatureAfterChange": "\r void doColumnRight()", "diff": ["-\t\r", "-\tif (offsetInLine < content.getLine(line).length()) {\r", "+\tString lineText = content.getLine(line);\r", "+\tint lineLength = lineText.length();\r", "+\r", "+\tif (isBidi()) {\r", "+\t\tGC gc = new GC(this);\t\r", "+\t\tStyledTextEvent event = getLineStyleData(lineOffset, lineText);\r", "+\t\tint[] boldStyles = null;\r", "+\t\tStyledTextBidi bidi;\r", "+\r", "+\t\tif (event != null) {\r", "+\t\t\tboldStyles = getBoldRanges(event.styles, lineOffset, lineLength);\r", "+\t\t}\r", "+\t\tbidi = new StyledTextBidi(gc, tabWidth, lineText, boldStyles, boldFont, getStyleOffsets (lineText, lineOffset));\r", "+\t\tif (bidi.getTextWidth() > horizontalScrollOffset + getClientArea().width || offsetInLine < lineLength) {\r", "+\t\t\tif (bidi.isRightToLeft(offsetInLine) == false && offsetInLine < lineLength) {\r", "+\t\t\t\t// advance caret logically if in L2R segment (move visually right)\r", "+\t\t\t\tcaretOffset++;\r", "+\t\t\t\tdoSelection(SWT.RIGHT);\r", "+\t\t\t\t// end of L2R segment reached (visual right side)?\r", "+\t\t\t\tif (bidi.isRightToLeft(caretOffset - lineOffset)) {\r", "+\t\t\t\t\t// go to end of R2L segment (visually left of next R2L segment)/end of line\r", "+\t\t\t\t\tcaretOffset++;\r", "+\t\t\t\t\twhile (caretOffset < lineOffset + lineLength && bidi.isRightToLeft(caretOffset - lineOffset)) {\r", "+\t\t\t\t\t\tcaretOffset++;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\telse\r", "+\t\t\tif (offsetInLine > 0 && (bidi.isRightToLeft(offsetInLine) || bidi.getTextWidth() > horizontalScrollOffset + getClientArea().width || offsetInLine < lineLength)) {\r", "+\t\t\t\t// advance caret visually if in R2L segment or logically at line end \r", "+\t\t\t\t// but right end of line is not fully visible yet\r", "+\t\t\t\tcaretOffset--;\r", "+\t\t\t\tdoSelection(SWT.LEFT);\r", "+\t\t\t\toffsetInLine = caretOffset - lineOffset;\r", "+\t\t\t\t// end of R2L segment reached (visual right side)?\r", "+\t\t\t\tif (offsetInLine > 0 && bidi.isRightToLeft(offsetInLine) == false) {\r", "+\t\t\t\t\t// go to end of R2L segment (visually left of next L2R segment)/end of line\r", "+\t\t\t\t\tcaretOffset++;\r", "+\t\t\t\t\twhile (caretOffset < lineOffset + lineLength && bidi.isRightToLeft(caretOffset - lineOffset)) {\r", "+\t\t\t\t\t\tcaretOffset++;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\telse\r", "+\t\t\tif (offsetInLine == 0 && bidi.getCaretPosition(0) != bidi.getTextWidth()) {\r", "+\t\t\t\t// at logical line start in R2L segment but there's more text (a L2R segment)\r", "+\t\t\t\t// go to end of R2L segment (visually left of next L2R segment)/end of line\r", "+\t\t\t\tcaretOffset++;\r", "+\t\t\t\twhile (caretOffset < lineOffset + lineLength && bidi.isRightToLeft(caretOffset - lineOffset - 1)) {\r", "+\t\t\t\t\tcaretOffset++;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\toffsetInLine = caretOffset - lineOffset;\r", "+\t\t\t// if new caret position is to the right of the client area\r", "+\t\t\tif (bidi.getCaretPosition(offsetInLine) >= horizontalScrollOffset) {\r", "+\t\t\t\t// scroll to the caret position\r", "+\t\t\t\tshowCaret();\r", "+\t\t\t}\r", "+\t\t\telse {\r", "+\t\t\t\t// otherwise just update caret position without scrolling it into view\r", "+\t\t\t\tsetCaretLocation();\r", "+\t\t\t}\r", "+\t\t\tif (offsetInLine > 0 && offsetInLine < lineLength - 1) {\r", "+\t\t\t\tint clientAreaEnd = horizontalScrollOffset + getClientArea().width;\r", "+\t\t\t\tboolean directionChange = bidi.isRightToLeft(offsetInLine - 1) == false && bidi.isRightToLeft(offsetInLine);\r", "+\t\t\t\tint textWidth = bidi.getTextWidth();\r", "+\t\t\t\t// between L2R and R2L segment and second character of R2L segment is left of right border and logical line end is left of right border but visual line end is not left of right border\r", "+\t\t\t\tif (directionChange && \r", "+\t\t\t\t\tbidi.isRightToLeft(offsetInLine + 1) && bidi.getCaretPosition(offsetInLine + 1) < clientAreaEnd && \r", "+\t\t\t\t\tbidi.getCaretPosition(lineLength) < clientAreaEnd && textWidth > clientAreaEnd) {\r", "+\t\t\t\t\t// make visual line end visible\r", "+\t\t\t\t\tscrollHorizontalBar(textWidth - clientAreaEnd);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tgc.dispose();\r", "+\t}\r", "+\telse\r", "+\tif (offsetInLine < lineLength) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e2adc2ece921c5990a5f809e7b7154a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ce2f35c3f6b1d0b5778f68f011b1d8668d3c5c72", "commitAfterChange": "00bee382096a1807d86474fed7c933116a37eeb8", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 63, "signatureBeforeChange": "\r void doColumnLeft()", "signatureAfterChange": "\r void doColumnLeft()", "diff": ["-\t\r", "+\r", "+\tif (isBidi()) {\r", "+\t\tGC gc = new GC(this);\t\r", "+\t\tString lineText = content.getLine(line);\r", "+\t\tint lineLength = lineText.length();\r", "+\t\tStyledTextEvent event = getLineStyleData(lineOffset, lineText);\r", "+\t\tint[] boldStyles = null;\r", "+\t\tStyledTextBidi bidi;\r", "+\r", "+\t\tif (event != null) {\r", "+\t\t\tboldStyles = getBoldRanges(event.styles, lineOffset, lineLength);\r", "+\t\t}\r", "+\t\tbidi = new StyledTextBidi(gc, tabWidth, lineText, boldStyles, boldFont, getStyleOffsets (lineText, lineOffset));\r", "+\t\tif (horizontalScrollOffset > 0 || offsetInLine > 0) {\r", "+\t\t\tif (offsetInLine < lineLength && bidi.isRightToLeft(offsetInLine)) {\r", "+\t\t\t\t// advance caret logically if in R2L segment (move visually left)\r", "+\t\t\t\tcaretOffset++;\r", "+\t\t\t\tdoSelection(SWT.RIGHT);\r", "+\t\t\t\tif (caretOffset - lineOffset == lineLength) {\r", "+\t\t\t\t\t// if the line end is reached in a R2L segment, make the caret position \r", "+\t\t\t\t\t// (visual left border) visible before jumping to segment start\r", "+\t\t\t\t\tshowCaret();\r", "+\t\t\t\t}\r", "+\t\t\t\t// end of R2L segment reached (visual left side)?\r", "+\t\t\t\tif (bidi.isRightToLeft(caretOffset - lineOffset) == false) {\r", "+\t\t\t\t\t// go to beginning of R2L segment (visually end of next L2R segment)/beginning of line\r", "+\t\t\t\t\tcaretOffset--;\r", "+\t\t\t\t\twhile (caretOffset - lineOffset > 0 && bidi.isRightToLeft(caretOffset - lineOffset)) {\r", "+\t\t\t\t\t\tcaretOffset--;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\telse\r", "+\t\t\tif (offsetInLine < lineLength && bidi.isRightToLeft(offsetInLine) == false) {\r", "+\t\t\t\t// decrease caret logically if in L2R segment (move visually left)\r", "+\t\t\t\tcaretOffset--;\r", "+\t\t\t\tdoSelection(SWT.LEFT);\r", "+\t\t\t\t// end of L2R segment reached (visual left side of preceeding R2L segment)?\r", "+\t\t\t\tif (caretOffset - lineOffset > 0 && bidi.isRightToLeft(caretOffset - lineOffset - 1)) {\r", "+\t\t\t\t\t// go to beginning of R2L segment (visually start of next L2R segment)/beginning of line\r", "+\t\t\t\t\tcaretOffset--;\r", "+\t\t\t\t\twhile (caretOffset - lineOffset > 1 && bidi.isRightToLeft(caretOffset - lineOffset - 2)) {\r", "+\t\t\t\t\t\tcaretOffset--;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\telse\r", "+\t\t\tif (offsetInLine == lineLength && bidi.getCaretPosition(lineLength) != xInset) {\r", "+\t\t\t\t// at logical line end in R2L segment but there's more text (a L2R segment)\r", "+\t\t\t\t// go to end of R2L segment (visually left of next L2R segment)/end of line\r", "+\t\t\t\tcaretOffset--;\r", "+\t\t\t\twhile (caretOffset < lineOffset + lineLength && bidi.isRightToLeft(caretOffset - lineOffset)) {\r", "+\t\t\t\t\tcaretOffset--;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\t// if new caret position is to the left of the client area\r", "+\t\t\tif (bidi.getCaretPosition(caretOffset - lineOffset) < horizontalScrollOffset) {\r", "+\t\t\t\t// scroll to the caret position\r", "+\t\t\t\tshowCaret();\r", "+\t\t\t}\r", "+\t\t\telse {\r", "+\t\t\t\t// otherwise just update caret position without scrolling it into view\r", "+\t\t\t\tsetCaretLocation();\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tgc.dispose();\r", "+\t}\r", "+\telse\r"]}], "num": 63047}
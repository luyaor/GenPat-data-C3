{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6f80395f412ae0dda5971c4b87dd4eb4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b685bf4382fad19a890ac790595e733", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 75, "signatureBeforeChange": " void resizeRedraw(TableColumn column, int oldColumnWidth, int newColumnWidth)", "signatureAfterChange": " void onScrollHorizontal (Event event)", "diff": ["+void onScrollHorizontal (Event event) {", "+\tint newSelection = getHorizontalBar ().getSelection ();", "+\tRectangle clientArea = getClientArea ();", "+\tupdate ();", "+\tGC gc = new GC (this);", "+\tgc.copyArea (", "+\t\t0, 0,", "+\t\tclientArea.width, clientArea.height,", "+\t\thorizontalOffset - newSelection, 0);", "+\tgc.dispose ();", "+\tif (header.isVisible ()) {", "+\t\theader.update ();", "+\t\tclientArea = header.getClientArea ();", "+\t\tgc = new GC (header);", "+\t\tgc.copyArea (", "+\t\t\t0, 0,", "+\t\t\tclientArea.width, clientArea.height,", "+\t\t\thorizontalOffset - newSelection, 0);", "+\t\tgc.dispose ();", "+\thorizontalOffset = newSelection;", "- */", "-void resizeRedraw(TableColumn column, int oldColumnWidth, int newColumnWidth) {", "-\tRectangle columnBounds = column.getBounds();", "-\tint columnIndex = column.getIndex();", "-\tint oldRedrawStartX[] = getResizeRedrawX(columnIndex, oldColumnWidth);", "-\tint newRedrawStartX[] = getResizeRedrawX(columnIndex, newColumnWidth);", "-\tint itemHeight = getItemHeight();", "-\tint widthChange = newColumnWidth - oldColumnWidth;", "-\tint topIndex = getTopIndex();", "-", "-\tfor (int i = 0; i < newRedrawStartX.length; i++) {", "-\t\tif (newRedrawStartX[i] != oldRedrawStartX[i]) {", "-\t\t\tif (widthChange > 0) {", "-\t\t\t\tnewRedrawStartX[i] = oldRedrawStartX[i];", "-\t\t\t}", "-\t\t\tredraw(", "-\t\t\t\tcolumnBounds.x + newRedrawStartX[i], columnBounds.y + itemHeight * (i + topIndex), ", "-\t\t\t\tcolumnBounds.width - newRedrawStartX[i], itemHeight, false);", "-\t\t}", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd10fab140b76aad7022718475a0a6d8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 76, "signatureBeforeChange": "  public Point computeSize(int wHint, int hHint, boolean changed)", "signatureAfterChange": " public void setFont (Font value)", "diff": ["-", "-public Point computeSize(int wHint, int hHint, boolean changed) {", "-\tcheckWidget();", "-\tPoint size = super.computeSize(wHint, hHint, changed);", "-\tGC gc;", "-\tfinal int WidthCalculationCount = 50;\t\t// calculate item width for the first couple of items only", "-\tTreeRoots root = getRoot();", "-\tTreeItem item;", "-\tImage itemImage;", "-\tString itemText;", "-\tint width;", "-\tint newItemWidth = 0;", "-\t\t", "-\tif (wHint == SWT.DEFAULT && getContentWidth() == 0 && getItemCount() > 0) {", "-\t\tgc = new GC(this);", "-\t\tfor (int i = 0; i < WidthCalculationCount; i++) {", "-\t\t\titem = root.getVisibleItem(i);", "-\t\t\tif (item == null) {", "-\t\t\t\tbreak;\t\t\t\t\t\t\t\t\t\t\t// no more items", "-\t\t\t}", "-\t\t\titemImage = item.getImage();", "-\t\t\titemText = item.getText();", "-\t\t\twidth = 0;", "-\t\t\tif (itemImage != null) {", "-\t\t\t\twidth += itemImage.getBounds().width;", "-\t\t\t}", "-\t\t\tif (itemText != null) {", "-\t\t\t\tgc.setFont(item.getFont());", "-\t\t\t\twidth += gc.stringExtent(itemText).x;", "-\t\t\t}", "-\t\t\tnewItemWidth = Math.max(newItemWidth, width);", "-\t\tif (newItemWidth > 0) {", "-\t\t\tsize.x = newItemWidth;", "-\t\t}\t\t", "-\treturn size;", "+public void setFont (Font value) {", "+\tFont oldFont = getFont();", "+\tsuper.setFont(value);", "+\tFont font = getFont();", "+\tif (font.equals (oldFont)) return;", "+\t\t", "+\tGC gc = new GC(this);", "+\t", "+\t/* recompute the receiver's cached font height and item height values */", "+\tfontHeight = gc.getFontMetrics().getHeight();", "+\titemHeight = Math.max(fontHeight, imageHeight) + 2 * getCellPadding();", "+\tPoint headerSize = header.getSize();", "+\tint newHeaderHeight = Math.max(fontHeight, headerImageHeight) + 2 * getHeaderPadding();", "+\tif (headerSize.y != newHeaderHeight) {", "+\t\theader.setSize(headerSize.x, newHeaderHeight);", "+\t}", "+\t/* ", "+\t * Notify all columns of the font change so that they can recompute", "+\t * their cached string widths.", "+\t */", "+\tfor (int i = 0; i < columns.length; i++) {", "+\t\tcolumns[i].updateFont(gc);", "+\t/* ", "+\t * Notify all items of the font change so that those items that", "+\t * use the receiver's font can recompute their cached string widths.", "+\t */", "+\tfor (int i = 0; i < items.length; i++) {", "+\t\titems[i].updateFont(gc);", "+\t", "+\tgc.dispose();", "+\t", "+\tif (header.isVisible()) header.redraw();", "+\tredraw();"]}], "num": 11409}
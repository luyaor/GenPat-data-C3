{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed0e08c673198b5a9d4b199ed5e401fa", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96134ec8520cb563076940f6b4756763", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "d0d36c693c6576b09f534da7893869c71cdfad17", "commitAfterChange": "25aa012e5674a6ce6fa0827a09432e17d307ea2a", "methodNumberBeforeChange": 218, "methodNumberAfterChange": 220, "signatureBeforeChange": " void handlePaint(Event event)", "signatureAfterChange": " void handlePaint(Event event)", "diff": ["-\t\tint firstLine = getLineIndex(blockYAnchor - getVerticalScrollOffset());", "-\t\tint lastLine = getLineIndex(blockYLocation - getVerticalScrollOffset()); ", "-\t\tif (firstLine > lastLine) {", "-\t\t\tint temp = firstLine;", "-\t\t\tfirstLine = lastLine;", "-\t\t\tlastLine = temp;", "-\t\t}", "-\t\tint left = blockXAnchor - horizontalScrollOffset;", "-\t\tint top = getLinePixel(firstLine);", "-\t\tint right = blockXLocation - horizontalScrollOffset;", "-\t\tint bottom = getLinePixel(lastLine + 1) - 1;", "-\t\tgc.drawRectangle(left, top, right - left, bottom - top);", "+\t\tRectangle rect = getBlockSelectionRectangle();", "+\t\tgc.drawRectangle(rect);", "-\t\t\tgc.fillRectangle(left, top, right - left, bottom - top);", "+\t\t\tgc.fillRectangle(rect);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "889eb0bb4b7e3885d6ce6c9578160e8f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Slider.java", "commitBeforeChange": "ff065b5c44d02b1a88b447e021360b7bf40ab332", "commitAfterChange": "68057cbf552c2cb144586f06d2232a3297bd2d4f", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": " private void check(String call, int set, int minExpected, int maxExpected, int selectionExpected, int thumbExpected)", "signatureAfterChange": " private void check(String call, int minExpected, int maxExpected, int selectionExpected, int thumbExpected)", "diff": ["-private void check(String call, int set, int minExpected, int maxExpected, int selectionExpected, int thumbExpected) {", "-\tassertTrue(call + \"(\" + set + \"): Maximum Expected: \" + maxExpected + \"  Actual: \" + slider.getMaximum(), slider.getMaximum() == maxExpected);", "-\tassertTrue(call + \"(\" + set + \"): Minimum Expected: \" + minExpected + \"  Actual: \" + slider.getMinimum(), slider.getMinimum() == minExpected);", "-\tassertTrue(call + \"(\" + set + \"): Selection Expected: \" + selectionExpected + \"  Actual: \" + slider.getSelection(), slider.getSelection() == selectionExpected);", "-\tassertTrue(call + \"(\" + set + \"): Thumb Expected: \" + thumbExpected + \"  Actual: \" + slider.getThumb(), slider.getThumb() == thumbExpected);", "+private void check(String call, int minExpected, int maxExpected, int selectionExpected, int thumbExpected) {", "+\tassertEquals(call+\" max \", maxExpected, slider.getMaximum());", "+\tassertEquals(call+\" min \", minExpected, slider.getMinimum());", "+\tassertEquals(call+\" sel \", selectionExpected, slider.getSelection());", "+\tassertEquals(call+\" thmb \", thumbExpected, slider.getThumb());"]}], "num": 30834}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c66b0dfb700171be2464919bde62e11", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ef1142d610b65c88de749d9e63cecfe", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/cocoa/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "36e21f6aba5204fa5195a71658979a8b334d36bf", "commitAfterChange": "77b4feca7776d7a102f6b78d108d292827dbe92c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " protected void create(DeviceData deviceData)", "signatureAfterChange": " protected void create(DeviceData deviceData)", "diff": ["-\tdata = (PrinterData)deviceData;", "-\tif (data.otherData != null) {", "-\t\tNSData nsData = NSData.dataWithBytes(data.otherData, data.otherData.length);", "-\t\tprintInfo = new NSPrintInfo(NSKeyedUnarchiver.unarchiveObjectWithData(nsData).id);", "-\t} else {", "-\t\tprintInfo = NSPrintInfo.sharedPrintInfo();", "+\tNSAutoreleasePool pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tdata = (PrinterData)deviceData;", "+\t\tif (data.otherData != null) {", "+\t\t\tNSData nsData = NSData.dataWithBytes(data.otherData, data.otherData.length);", "+\t\t\tprintInfo = new NSPrintInfo(NSKeyedUnarchiver.unarchiveObjectWithData(nsData).id);", "+\t\t} else {", "+\t\t\tprintInfo = NSPrintInfo.sharedPrintInfo();", "+\t\t}", "+\t\tprintInfo.retain();", "+\t\tprinter = NSPrinter.printerWithName(NSString.stringWith(data.name));", "+\t\tif (printer != null) {", "+\t\t\tprinter.retain();", "+\t\t\tprintInfo.setPrinter(printer);", "+\t\t}", "+\t\t/*", "+\t\t* Bug in Cocoa.  For some reason, the output still goes to the printer when", "+\t\t* the user chooses the preview button.  The fix is to reset the job disposition.", "+\t\t*/", "+\t\tNSString job = printInfo.jobDisposition();", "+\t\tif (job.isEqual(new NSString(OS.NSPrintPreviewJob()))) {", "+\t\t\tprintInfo.setJobDisposition(job);", "+\t\t}", "+\t\tNSRect rect = new NSRect();", "+\t\twindow = (NSWindow)new NSWindow().alloc();", "+\t\twindow.initWithContentRect(rect, OS.NSBorderlessWindowMask, OS.NSBackingStoreBuffered, false);", "+\t\tString className = \"SWTPrinterView\"; //$NON-NLS-1$", "+\t\tif (OS.objc_lookUpClass(className) == 0) {", "+\t\t\tIsFlipped = new Callback(getClass(), \"isFlipped\", 2); //$NON-NLS-1$", "+\t\t\tint /*long*/ cls = OS.objc_allocateClassPair(OS.class_NSView, className, 0);", "+\t\t\tOS.class_addMethod(cls, OS.sel_isFlipped, IsFlipped.getAddress(), \"@:\");", "+\t\t\tOS.objc_registerClassPair(cls);", "+\t\t}", "+\t\tview = (NSView)new SWTPrinterView().alloc();", "+\t\tview.initWithFrame(rect);", "+\t\twindow.setContentView(view);", "+\t\toperation = NSPrintOperation.printOperationWithView(view, printInfo);", "+\t\toperation.retain();", "+\t\toperation.setShowsPrintPanel(false);", "+\t\toperation.setShowsProgressPanel(false);", "+\t} finally {", "+\t\tpool.release();", "-\tprintInfo.retain();", "-\tprinter = NSPrinter.printerWithName(NSString.stringWith(data.name));", "-\tif (printer != null) {", "-\t\tprinter.retain();", "-\t\tprintInfo.setPrinter(printer);", "-\t}", "-\t/*", "-\t* Bug in Cocoa.  For some reason, the output still goes to the printer when", "-\t* the user chooses the preview button.  The fix is to reset the job disposition.", "-\t*/", "-\tNSString job = printInfo.jobDisposition();", "-\tif (job.isEqual(new NSString(OS.NSPrintPreviewJob()))) {", "-\t\tprintInfo.setJobDisposition(job);", "-\t}", "-\tNSRect rect = new NSRect();", "-\twindow = (NSWindow)new NSWindow().alloc();", "-\twindow.initWithContentRect(rect, OS.NSBorderlessWindowMask, OS.NSBackingStoreBuffered, false);", "-\tString className = \"SWTPrinterView\"; //$NON-NLS-1$", "-\tif (OS.objc_lookUpClass(className) == 0) {", "-\t\tIsFlipped = new Callback(getClass(), \"isFlipped\", 2); //$NON-NLS-1$", "-\t\tint /*long*/ cls = OS.objc_allocateClassPair(OS.class_NSView, className, 0);", "-\t\tOS.class_addMethod(cls, OS.sel_isFlipped, IsFlipped.getAddress(), \"@:\");", "-\t\tOS.objc_registerClassPair(cls);", "-\t}", "-\tview = (NSView)new SWTPrinterView().alloc();", "-\tview.initWithFrame(rect);", "-\twindow.setContentView(view);", "-\toperation = NSPrintOperation.printOperationWithView(view, printInfo);", "-\toperation.retain();", "-\toperation.setShowsPrintPanel(false);", "-\toperation.setShowsProgressPanel(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "848f8659f4647f6312bfe2d636fb2061", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public ImageData getImageData ()", "signatureAfterChange": " public ImageData getImageData ()", "diff": ["-\tNSWorkspace workspace = NSWorkspace.sharedWorkspace();", "-\tNSString fullPath;", "-\tif (this.fullPath != null) {", "-\t\tfullPath = NSString.stringWith(this.fullPath);", "-\t} else {", "-\t\tfullPath = workspace.fullPathForApplication(NSString.stringWith(name));", "-\t}", "-\tif (fullPath != null) {", "-\t\tNSImage nsImage = workspace.iconForFile(fullPath);", "-\t\tif (nsImage != null) {", "-\t\t\tNSSize size = new NSSize();", "-\t\t\tsize.width = size.height = 16;", "-\t\t\tnsImage.setSize(size);", "-\t\t\tNSBitmapImageRep imageRep = null;", "-\t\t\tNSImageRep rep = nsImage.bestRepresentationForDevice(null);", "-\t\t\tif (rep.isKindOfClass(OS.class_NSBitmapImageRep)) { ", "-\t\t\t\timageRep = new NSBitmapImageRep(rep.id);", "-\t\t\t}", "-\t\t\tif (imageRep != null) {", "-\t\t\t\tint width = (int)/*64*/imageRep.pixelsWide();", "-\t\t\t\tint height = (int)/*64*/imageRep.pixelsHigh();", "-\t\t\t\tint bpr = (int)/*64*/imageRep.bytesPerRow();", "-\t\t\t\tint bpp = (int)/*64*/imageRep.bitsPerPixel();", "-\t\t\t\tint dataSize = height * bpr;", "-\t\t\t\tbyte[] srcData = new byte[dataSize];", "-\t\t\t\tOS.memmove(srcData, imageRep.bitmapData(), dataSize);", "-\t\t\t\t//TODO check color info", "-\t\t\t\tPaletteData palette = new PaletteData(0xFF000000, 0xFF0000, 0xFF00);", "-\t\t\t\tImageData data = new ImageData(width, height, bpp, palette, 4, srcData);", "-\t\t\t\tdata.bytesPerLine = bpr;", "-\t\t\t\tdata.alphaData = new byte[width * height];", "-\t\t\t\tfor (int i = 3, o = 0; i < srcData.length; i+= 4, o++) {", "-\t\t\t\t\tdata.alphaData[o] = srcData[i];", "+\tNSAutoreleasePool pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tNSWorkspace workspace = NSWorkspace.sharedWorkspace();", "+\t\tNSString fullPath;", "+\t\tif (this.fullPath != null) {", "+\t\t\tfullPath = NSString.stringWith(this.fullPath);", "+\t\t} else {", "+\t\t\tfullPath = workspace.fullPathForApplication(NSString.stringWith(name));", "+\t\t}", "+\t\tif (fullPath != null) {", "+\t\t\tNSImage nsImage = workspace.iconForFile(fullPath);", "+\t\t\tif (nsImage != null) {", "+\t\t\t\tNSSize size = new NSSize();", "+\t\t\t\tsize.width = size.height = 16;", "+\t\t\t\tnsImage.setSize(size);", "+\t\t\t\tNSBitmapImageRep imageRep = null;", "+\t\t\t\tNSImageRep rep = nsImage.bestRepresentationForDevice(null);", "+\t\t\t\tif (rep.isKindOfClass(OS.class_NSBitmapImageRep)) { ", "+\t\t\t\t\timageRep = new NSBitmapImageRep(rep.id);", "-\t\t\t\treturn data;", "+\t\t\t\tif (imageRep != null) {", "+\t\t\t\t\tint width = (int)/*64*/imageRep.pixelsWide();", "+\t\t\t\t\tint height = (int)/*64*/imageRep.pixelsHigh();", "+\t\t\t\t\tint bpr = (int)/*64*/imageRep.bytesPerRow();", "+\t\t\t\t\tint bpp = (int)/*64*/imageRep.bitsPerPixel();", "+\t\t\t\t\tint dataSize = height * bpr;", "+\t\t\t\t\tbyte[] srcData = new byte[dataSize];", "+\t\t\t\t\tOS.memmove(srcData, imageRep.bitmapData(), dataSize);", "+\t\t\t\t\t//TODO check color info", "+\t\t\t\t\tPaletteData palette = new PaletteData(0xFF000000, 0xFF0000, 0xFF00);", "+\t\t\t\t\tImageData data = new ImageData(width, height, bpp, palette, 4, srcData);", "+\t\t\t\t\tdata.bytesPerLine = bpr;", "+\t\t\t\t\tdata.alphaData = new byte[width * height];", "+\t\t\t\t\tfor (int i = 3, o = 0; i < srcData.length; i+= 4, o++) {", "+\t\t\t\t\t\tdata.alphaData[o] = srcData[i];", "+\t\t\t\t\t}", "+\t\t\t\t\treturn data;", "+\t\t\t\t}", "+\t\treturn null;", "+\t} finally {", "+\t\tpool.release();", "-\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "772fc0f7d8cc5e1dfcf480cbbf769faf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public static Program [] getPrograms ()", "signatureAfterChange": " public static Program [] getPrograms ()", "diff": ["-\tVector vector = new Vector();", "-\tNSWorkspace workspace = NSWorkspace.sharedWorkspace();", "-\tNSArray array = new NSArray(OS.NSSearchPathForDirectoriesInDomains(OS.NSAllApplicationsDirectory, OS.NSAllDomainsMask, true));", "-\tint count = (int)/*64*/array.count();", "-\tfor (int i = 0; i < count; i++) {", "-\t\tNSString path = new NSString(array.objectAtIndex(i));", "-\t\tNSFileManager fileManager = NSFileManager.defaultManager();", "-\t\tNSDirectoryEnumerator enumerator = fileManager.enumeratorAtPath(path);", "-\t\tif (enumerator != null) {", "-\t\t\tid id;", "-\t\t\twhile ((id = enumerator.nextObject()) != null) {", "-\t\t\t\tenumerator.skipDescendents();", "-\t\t\t\tNSString fullPath = path.stringByAppendingPathComponent(new NSString(id.id));", "-\t\t\t\tif (workspace.isFilePackageAtPath(fullPath)) {", "-\t\t\t\t\tNSBundle bundle = NSBundle.bundleWithPath(fullPath);", "-\t\t\t\t    vector.addElement(getProgram(bundle));", "+\tNSAutoreleasePool pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tVector vector = new Vector();", "+\t\tNSWorkspace workspace = NSWorkspace.sharedWorkspace();", "+\t\tNSArray array = new NSArray(OS.NSSearchPathForDirectoriesInDomains(OS.NSAllApplicationsDirectory, OS.NSAllDomainsMask, true));", "+\t\tint count = (int)/*64*/array.count();", "+\t\tfor (int i = 0; i < count; i++) {", "+\t\t\tNSString path = new NSString(array.objectAtIndex(i));", "+\t\t\tNSFileManager fileManager = NSFileManager.defaultManager();", "+\t\t\tNSDirectoryEnumerator enumerator = fileManager.enumeratorAtPath(path);", "+\t\t\tif (enumerator != null) {", "+\t\t\t\tid id;", "+\t\t\t\twhile ((id = enumerator.nextObject()) != null) {", "+\t\t\t\t\tenumerator.skipDescendents();", "+\t\t\t\t\tNSString fullPath = path.stringByAppendingPathComponent(new NSString(id.id));", "+\t\t\t\t\tif (workspace.isFilePackageAtPath(fullPath)) {", "+\t\t\t\t\t\tNSBundle bundle = NSBundle.bundleWithPath(fullPath);", "+\t\t\t\t\t\tvector.addElement(getProgram(bundle));", "+\t\t\t\t\t}", "+\t\tProgram[] programs = new Program[vector.size()];", "+\t\tvector.copyInto(programs);", "+\t\treturn programs;", "+\t} finally {", "+\t\tpool.release();", "-\tProgram[] programs = new Program[vector.size()];", "-\tvector.copyInto(programs);", "-\treturn programs;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fde90a2d10dc07995d8144d587e82535", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/cocoa/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "36e21f6aba5204fa5195a71658979a8b334d36bf", "commitAfterChange": "77b4feca7776d7a102f6b78d108d292827dbe92c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static PrinterData getDefaultPrinterData()", "signatureAfterChange": " public static PrinterData getDefaultPrinterData()", "diff": ["-\tNSPrinter printer = NSPrintInfo.defaultPrinter();", "-\tif (printer == null) return null;", "-\tNSString str = printer.name();", "-\treturn new PrinterData(DRIVER, str.getString());", "+\tNSAutoreleasePool pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tNSPrinter printer = NSPrintInfo.defaultPrinter();", "+\t\tif (printer == null) return null;", "+\t\tNSString str = printer.name();", "+\t\treturn new PrinterData(DRIVER, str.getString());", "+\t} finally {", "+\t\tpool.release();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "347e0826bbc04bf2a5ff5ad6b4dfe519", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "1a876750782f037ea9cd2cbd6b3dfc67d39d1b46", "commitAfterChange": "4152cddcd37ba1ab9b8d34e3a41677daf8cc810f", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Program findProgram (String extension)", "signatureAfterChange": " public static Program findProgram (String extension)", "diff": ["-\tif (extension == null) SWT.error (SWT.ERROR_NULL_ARGUMENT);", "-\tif (extension.length () == 0) return null;", "-\tProgram program = null;", "-\tchar[] chars;", "-\tif (extension.charAt (0) != '.') {", "-\t\tchars = new char[extension.length()];", "-\t\textension.getChars(0, chars.length, chars, 0);", "-\t} else {", "-\t\tchars = new char[extension.length() - 1];", "-\t\textension.getChars(1, extension.length(), chars, 0);\t\t", "-\t}", "-\tNSString ext = NSString.stringWithCharacters(chars, chars.length);", "-\tif (ext != null) {", "-\t\tbyte[] fsRef = new byte[80];", "-\t\tif (OS.LSGetApplicationForInfo(OS.kLSUnknownType, OS.kLSUnknownCreator, ext.id, OS.kLSRolesAll, fsRef, null) == OS.noErr) {", "-\t\t\tint /*long*/ url = OS.CFURLCreateFromFSRef(OS.kCFAllocatorDefault(), fsRef);", "-\t\t\tif (url != 0) {", "-\t\t\t\tNSString bundlePath = new NSURL(url).path();", "-\t\t\t\tNSBundle bundle = NSBundle.bundleWithPath(bundlePath);", "-\t\t\t\tprogram = getProgram(bundle);", "-\t\t\t\tOS.CFRelease(url);", "+\tNSAutoreleasePool pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tif (extension == null) SWT.error (SWT.ERROR_NULL_ARGUMENT);", "+\t\tif (extension.length () == 0) return null;", "+\t\tProgram program = null;", "+\t\tchar[] chars;", "+\t\tif (extension.charAt (0) != '.') {", "+\t\t\tchars = new char[extension.length()];", "+\t\t\textension.getChars(0, chars.length, chars, 0);", "+\t\t} else {", "+\t\t\tchars = new char[extension.length() - 1];", "+\t\t\textension.getChars(1, extension.length(), chars, 0);\t\t", "+\t\t}", "+\t\tNSString ext = NSString.stringWithCharacters(chars, chars.length);", "+\t\tif (ext != null) {", "+\t\t\tbyte[] fsRef = new byte[80];", "+\t\t\tif (OS.LSGetApplicationForInfo(OS.kLSUnknownType, OS.kLSUnknownCreator, ext.id, OS.kLSRolesAll, fsRef, null) == OS.noErr) {", "+\t\t\t\tint /*long*/ url = OS.CFURLCreateFromFSRef(OS.kCFAllocatorDefault(), fsRef);", "+\t\t\t\tif (url != 0) {", "+\t\t\t\t\tNSString bundlePath = new NSURL(url).path();", "+\t\t\t\t\tNSBundle bundle = NSBundle.bundleWithPath(bundlePath);", "+\t\t\t\t\tprogram = getProgram(bundle);", "+\t\t\t\t\tOS.CFRelease(url);", "+\t\t\t\t}", "+\t\treturn program;", "+\t} finally {", "+\t\tpool.release();", "-\treturn program;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d07a1d414e885b96e1c642462b834e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/cocoa/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "36e21f6aba5204fa5195a71658979a8b334d36bf", "commitAfterChange": "77b4feca7776d7a102f6b78d108d292827dbe92c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " protected void destroy()", "signatureAfterChange": " protected void destroy()", "diff": ["-\tif (printer != null) printer.release();", "-\tif (printInfo != null) printInfo.release();", "-\tif (view != null) view.release();", "-\tif (window != null) window.release();", "-\tif (operation != null) operation.release();", "-\tprinter = null;", "-\tprintInfo = null;", "-\tview = null;", "-\toperation = null;", "+\tNSAutoreleasePool pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tif (printer != null) printer.release();", "+\t\tif (printInfo != null) printInfo.release();", "+\t\tif (view != null) view.release();", "+\t\tif (window != null) window.release();", "+\t\tif (operation != null) operation.release();", "+\t\tprinter = null;", "+\t\tprintInfo = null;", "+\t\tview = null;", "+\t\toperation = null;", "+\t} finally {", "+\t\tpool.release();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ea02da92cc8ea422347f0540ffa20abd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/cocoa/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "36e21f6aba5204fa5195a71658979a8b334d36bf", "commitAfterChange": "77b4feca7776d7a102f6b78d108d292827dbe92c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public static PrinterData[] getPrinterList()", "signatureAfterChange": " public static PrinterData[] getPrinterList()", "diff": ["-\tNSArray printers = NSPrinter.printerNames();", "-\tint count = (int)/*64*/printers.count();", "-\tPrinterData[] result = new PrinterData[count];", "-\tfor (int i = 0; i < count; i++) {", "-\t\tNSString str = new NSString(printers.objectAtIndex(i));", "-\t\tresult[i] = new PrinterData(DRIVER, str.getString());", "+\tNSAutoreleasePool pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tNSArray printers = NSPrinter.printerNames();", "+\t\tint count = (int)/*64*/printers.count();", "+\t\tPrinterData[] result = new PrinterData[count];", "+\t\tfor (int i = 0; i < count; i++) {", "+\t\t\tNSString str = new NSString(printers.objectAtIndex(i));", "+\t\t\tresult[i] = new PrinterData(DRIVER, str.getString());", "+\t\t}", "+\t\treturn result;", "+\t} finally {", "+\t\tpool.release();", "-\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3a67c93a23bb92540fe3e731be0c5da", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static String [] getExtensions ()", "signatureAfterChange": " public static String [] getExtensions ()", "diff": ["-\tNSMutableSet supportedDocumentTypes = (NSMutableSet)NSMutableSet.set();", "-\tNSWorkspace workspace = NSWorkspace.sharedWorkspace();", "-\tNSString CFBundleDocumentTypes = NSString.stringWith(\"CFBundleDocumentTypes\");", "-\tNSString CFBundleTypeExtensions = NSString.stringWith(\"CFBundleTypeExtensions\");", "-\tNSArray array = new NSArray(OS.NSSearchPathForDirectoriesInDomains(OS.NSAllApplicationsDirectory, OS.NSAllDomainsMask, true));", "-\tint count = (int)/*64*/array.count();", "-\tfor (int i = 0; i < count; i++) {", "-\t\tNSString path = new NSString(array.objectAtIndex(i));", "-\t\tNSFileManager fileManager = NSFileManager.defaultManager();", "-\t\tNSDirectoryEnumerator enumerator = fileManager.enumeratorAtPath(path);", "-\t\tif (enumerator != null) {", "-\t\t\tid id;", "-\t\t\twhile ((id = enumerator.nextObject()) != null) {", "-\t\t\t\tenumerator.skipDescendents();", "-\t\t\t\tNSString filePath = new NSString(id.id);", "-\t\t\t\tNSString fullPath = path.stringByAppendingPathComponent(filePath);", "-\t\t\t\tif (workspace.isFilePackageAtPath(fullPath)) {", "-\t\t\t\t\tNSBundle bundle = NSBundle.bundleWithPath(fullPath);", "-\t\t\t\t\tid = bundle.infoDictionary().objectForKey(CFBundleDocumentTypes);", "-\t\t\t\t\tif (id != null) {", "-\t\t\t\t\t\tNSDictionary documentTypes = new NSDictionary(id.id);", "-\t\t\t\t\t\tNSEnumerator documentTypesEnumerator = documentTypes.objectEnumerator();", "-\t\t\t\t\t\twhile ((id = documentTypesEnumerator.nextObject()) != null) {", "-\t\t\t\t\t\t\tNSDictionary documentType = new NSDictionary(id.id);", "-\t\t\t\t\t\t\tid = documentType.objectForKey(CFBundleTypeExtensions);", "-\t\t\t\t\t\t\tif (id != null) {", "-\t\t\t\t\t\t\t\tsupportedDocumentTypes.addObjectsFromArray(new NSArray(id.id));", "+\tNSAutoreleasePool pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tNSMutableSet supportedDocumentTypes = (NSMutableSet)NSMutableSet.set();", "+\t\tNSWorkspace workspace = NSWorkspace.sharedWorkspace();", "+\t\tNSString CFBundleDocumentTypes = NSString.stringWith(\"CFBundleDocumentTypes\");", "+\t\tNSString CFBundleTypeExtensions = NSString.stringWith(\"CFBundleTypeExtensions\");", "+\t\tNSArray array = new NSArray(OS.NSSearchPathForDirectoriesInDomains(OS.NSAllApplicationsDirectory, OS.NSAllDomainsMask, true));", "+\t\tint count = (int)/*64*/array.count();", "+\t\tfor (int i = 0; i < count; i++) {", "+\t\t\tNSString path = new NSString(array.objectAtIndex(i));", "+\t\t\tNSFileManager fileManager = NSFileManager.defaultManager();", "+\t\t\tNSDirectoryEnumerator enumerator = fileManager.enumeratorAtPath(path);", "+\t\t\tif (enumerator != null) {", "+\t\t\t\tid id;", "+\t\t\t\twhile ((id = enumerator.nextObject()) != null) {", "+\t\t\t\t\tenumerator.skipDescendents();", "+\t\t\t\t\tNSString filePath = new NSString(id.id);", "+\t\t\t\t\tNSString fullPath = path.stringByAppendingPathComponent(filePath);", "+\t\t\t\t\tif (workspace.isFilePackageAtPath(fullPath)) {", "+\t\t\t\t\t\tNSBundle bundle = NSBundle.bundleWithPath(fullPath);", "+\t\t\t\t\t\tid = bundle.infoDictionary().objectForKey(CFBundleDocumentTypes);", "+\t\t\t\t\t\tif (id != null) {", "+\t\t\t\t\t\t\tNSDictionary documentTypes = new NSDictionary(id.id);", "+\t\t\t\t\t\t\tNSEnumerator documentTypesEnumerator = documentTypes.objectEnumerator();", "+\t\t\t\t\t\t\twhile ((id = documentTypesEnumerator.nextObject()) != null) {", "+\t\t\t\t\t\t\t\tNSDictionary documentType = new NSDictionary(id.id);", "+\t\t\t\t\t\t\t\tid = documentType.objectForKey(CFBundleTypeExtensions);", "+\t\t\t\t\t\t\t\tif (id != null) {", "+\t\t\t\t\t\t\t\t\tsupportedDocumentTypes.addObjectsFromArray(new NSArray(id.id));", "+\t\t\t\t\t\t\t\t}", "+\t\tint i = 0;", "+\t\tString[] exts = new String[(int)/*64*/supportedDocumentTypes.count()];", "+\t\tNSEnumerator enumerator = supportedDocumentTypes.objectEnumerator();", "+\t\tid id;", "+\t\twhile ((id = enumerator.nextObject()) != null) {", "+\t\t\tString ext = new NSString(id.id).getString();", "+\t\t\tif (!ext.equals(\"*\")) exts[i++] = \".\" + ext;", "+\t\t}", "+\t\tif (i != exts.length) {", "+\t\t\tString[] temp = new String[i];", "+\t\t\tSystem.arraycopy(exts, 0, temp, 0, i);", "+\t\t\texts = temp;", "+\t\t}", "+\t\treturn exts;", "+\t} finally {", "+\t\tpool.release();", "-\tint i = 0;", "-\tString[] exts = new String[(int)/*64*/supportedDocumentTypes.count()];", "-\tNSEnumerator enumerator = supportedDocumentTypes.objectEnumerator();", "-\tid id;", "-\twhile ((id = enumerator.nextObject()) != null) {", "-\t\tString ext = new NSString(id.id).getString();", "-\t\tif (!ext.equals(\"*\")) exts[i++] = \".\" + ext;", "-\t}", "-\tif (i != exts.length) {", "-\t\tString[] temp = new String[i];", "-\t\tSystem.arraycopy(exts, 0, temp, 0, i);", "-\t\texts = temp;", "-\t}", "-\treturn exts;"]}], "num": 36815}
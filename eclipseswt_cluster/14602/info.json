{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8548a2d2b1aaac53603240f80b1d1eac", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b3e2af71577a81142910297adfcad48", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "7d43c8943a049ee05c94731fcc15e66f4bdd37e2", "commitAfterChange": "f0c5376e3c68982adcd8d52528b0b4735f67414a", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 72, "signatureBeforeChange": "\r void installListeners()", "signatureAfterChange": "\r void installListeners()", "diff": ["-\tControl focusWindow = getFocusWindow();\r", "-\t// HACK: All we're really interested in is focus change and key down\r", "-\t// for the table itself. Doesn't work that way because setFocus sets \r", "-\t// focus to the first child of the receiver (which is our focus window)\r", "-\tfocusWindow.addListener(SWT.FocusOut, listener);\r", "-\tfocusWindow.addListener(SWT.FocusIn, listener);\r", "-\tfocusWindow.addListener(SWT.KeyDown, listener);\t\t\r", "-\tfocusWindow.addListener(SWT.Traverse, listener);\t\t\r", "-\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fc94eb1e4364101bfaeca8d79156bc0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "0a6811e80079fc0387e0cc87279a001c95b12743", "commitAfterChange": "def0218c22c8740186dfa86c4d354b293854c64b", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create(Composite parent, int style)", "signatureAfterChange": "  public void create(Composite parent, int style)", "diff": ["-\tmouseListener = new OleListener() {", "+\tdomListener = new OleListener() {", "-\t\t\thandleMouseEvent(e);", "+\t\t\thandleDOMEvent(e);", "-\t\t\t\t\t* so check for this before unhooking its mouse listeners.", "+\t\t\t\t\t* so check for this before unhooking its DOM listeners.", "-\t\t\t\t\tif (!frame.isDisposed ()) unhookMouseListeners(documents);", "+\t\t\t\t\tif (!frame.isDisposed ()) unhookDOMListeners(documents);", "-\t\t\t\t\tmouseListener = null;", "+\t\t\t\t\tdomListener = null;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase SWT.KeyDown:", "-\t\t\t\tcase SWT.KeyUp: {", "-\t\t\t\t\tbrowser.notifyListeners(e.type, e);", "-\tsite.addListener(SWT.KeyDown, listener);", "-\tsite.addListener(SWT.KeyUp, listener);", "-\t\t\t\t\t\t\t\t/* unhook mouse listeners and unref the last document(s) */", "-\t\t\t\t\t\t\t\tunhookMouseListeners(documents);", "+\t\t\t\t\t\t\t\t/* unhook DOM listeners and unref the last document(s) */", "+\t\t\t\t\t\t\t\tunhookDOMListeners(documents);", "-\t\t\t\t\t\thookMouseListeners(webBrowser, isTop);", "+\t\t\t\t\t\thookDOMListeners(webBrowser, isTop);"]}], "num": 14602}
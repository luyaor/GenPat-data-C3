{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26aa32f00011b6a0c332f1e89652a7cf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "531a800c666ea67deb31707467c37b88", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "4045cc82c196a0c6aa2d28422af4dfc5c984251e", "commitAfterChange": "fb6d2df828bbfcf96d146011227cfe339524c82e", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["-\t\tcase SWT_KEYMSG:", "+\t\tcase SWT_KEYMSG: {", "-\t\tcase SWT_SETTINGCHANGED: {", "-\t\t\tsettingsChanged = false;", "-\t\t\tFont oldFont = getSystemFont ();", "-\t\t\tupdateImages ();", "-\t\t\tupdateFonts ();", "-\t\t\tsendEvent (SWT.Settings, null);", "-\t\t\tFont newFont = getSystemFont ();", "-\t\t\tShell [] shells = getShells ();", "-\t\t\tfor (int i=0; i<shells.length; i++) {", "-\t\t\t\tShell shell = shells [i];", "-\t\t\t\tif (!shell.isDisposed ()) {", "-\t\t\t\t\tshell.updateFont (oldFont, newFont);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase SWT_TRAYICONMSG:", "+\t\tcase SWT_TRAYICONMSG: {", "-\t\tcase OS.WM_ACTIVATEAPP:", "+\t\t}", "+\t\tcase OS.WM_ACTIVATEAPP: {", "-\t\tcase OS.WM_ENDSESSION:", "+\t\t}", "+\t\tcase OS.WM_ENDSESSION: {", "-\t\tcase OS.WM_QUERYENDSESSION:", "+\t\t}", "+\t\tcase OS.WM_QUERYENDSESSION: {", "-\t\tcase OS.WM_SETTINGCHANGE:", "-\t\t\tif (settingsChanged) break;", "-\t\t\tsettingsChanged = true;", "-\t\t\tOS.PostMessage (hwnd, SWT_SETTINGCHANGED, 0 ,0);", "+\t\t}", "+\t\tcase OS.WM_SETTINGCHANGE: {", "+\t\t\tif (wParam == 0 || wParam == 1) {", "+\t\t\t\tFont oldFont = getSystemFont ();", "+\t\t\t\tupdateImages ();", "+\t\t\t\tupdateFonts ();", "+\t\t\t\tsendEvent (SWT.Settings, null);", "+\t\t\t\tFont newFont = getSystemFont ();", "+\t\t\t\tShell [] shells = getShells ();", "+\t\t\t\tfor (int i=0; i<shells.length; i++) {", "+\t\t\t\t\tShell shell = shells [i];", "+\t\t\t\t\tif (!shell.isDisposed ()) {", "+\t\t\t\t\t\tshell.updateFont (oldFont, newFont);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\t\tcase OS.WM_TIMER:", "+\t\t}", "+\t\tcase OS.WM_TIMER: {", "-\t\tdefault:", "+\t\t}", "+\t\tdefault: {", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5186a2c8ec823c441d5c8a4951f4d32e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "857431fb0346569b270d2d64d87a0d49ee554249", "commitAfterChange": "655553f843c3b05818fb9e7f567f216acb7aa6cb", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 31, "signatureBeforeChange": "  boolean dragDetect (double x, double y)", "signatureAfterChange": "  boolean dragDetect (double x, double y, boolean post)", "diff": ["-boolean dragDetect (double x, double y) {", "+", "+boolean dragDetect (double x, double y, boolean post) {", "-\tint rect = display.dragRect = OS.gcnew_Rect(x - minH, y - minV, minH * 2, minV * 2);", "-\tint frame = display.dragDetectFrame = OS.gcnew_DispatcherFrame ();", "-\tOS.Dispatcher_PushFrame (frame);", "-\tOS.GCHandle_Free (rect);", "-\tOS.GCHandle_Free (frame);", "-\tdisplay.dragDetectFrame = display.dragRect = 0;", "+\tdisplay.dragRect = OS.gcnew_Rect(x - minH, y - minV, minH * 2, minV * 2);", "+\tif (post) {", "+\t\tint handler = OS.gcnew_NoArgsDelegate (jniRef, \"dragHandler\");", "+\t\tOS.Dispatcher_BeginInvoke (display.dispatcher, OS.DispatcherPriority_Send, handler);", "+\t\tOS.GCHandle_Free (handler);", "+\t} else {", "+\t\tdragHandler ();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6341c515efb0e7d907fd59046571ed66", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "bda1f46fe4a14e4dc3f19a61e20e3947c3441f0e", "commitAfterChange": "791cf784319e88f74022f4f85a68083e14d57e78", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\tOS.gtk_widget_set_size_request (labelHandle, -1, -1);", "+\t\tOS.gtk_widget_set_size_request (labelHandle, wHint, hHint);", "-\t\t/*", "-\t\t * Temporary code.", "-\t\t * If the wHint is set, the GtkLabel will believe it has", "-\t\t * more width at its disposal than it actually does (by a few pixels).", "-\t\t * In other words, the frame width is included in the hint and", "-\t\t * it shouldn't.  It is possible (but unlikely) that this will", "-\t\t * cause the label to answer the wrong (smaller) height.", "-\t\t */", "+\t\tif (requisition.height == 0)  {", "+\t\t\trequisition.height = fontHeight (getFontDescription (), labelHandle);", "+\t\t}", "-\twidth = wHint == SWT.DEFAULT ? requisition.width : wHint;", "-\theight = hHint == SWT.DEFAULT ? requisition.height : hHint;", "-\treturn new Point (width, height);\t", "+\treturn new Point (requisition.width, requisition.height);\t"]}], "num": 15974}
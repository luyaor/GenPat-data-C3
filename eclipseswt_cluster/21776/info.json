{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7bd3df3479b26366885631fc13c948f2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d8cba132c04c8438467ec5bb62203dfa", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "bae8b23adf7bc3b1466643065f2bbf62746953bd", "commitAfterChange": "807928601cf0d0a466c6ebcb5402d42a14e504c3", "methodNumberBeforeChange": 159, "methodNumberAfterChange": 159, "signatureBeforeChange": " public void update ()", "signatureAfterChange": " public void update ()", "diff": ["+\tint gc = OS.gdk_gc_new (window);", "+\tOS.gdk_gc_set_exposures (gc, true);", "+\tOS.gdk_draw_drawable (window, gc, window, 0, 0, 0, 0, 0, 0);", "+\tOS.g_object_unref (gc);", "+\tint event = 0;", "+\twhile ((event = OS.gdk_event_get_graphics_expose (window)) != 0) {", "+\t\tOS.gtk_main_do_event (event);", "+\t\tOS.gdk_event_free (event);\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddc5e535148fe4ba38e4c06ff86c5fe3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "fb9bbf51bcbcca155af75b83246cd84b690dc924", "commitAfterChange": "df49f698bb0e6e765ab855f825c7815df2092c2b", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " @Override public void setImage (Image image)", "signatureAfterChange": " @Override public void setImage (Image image)", "diff": ["-\tif (!OS.GTK_IS_IMAGE_MENU_ITEM (handle)) return;", "-\t\tlong /*int*/ imageHandle = OS.gtk_image_new_from_pixbuf (pixbuf);", "-\t\tOS.gtk_image_menu_item_set_image (handle, imageHandle);", "-\t\tOS.gtk_widget_show (imageHandle);", "-\t} else {", "-\t\tOS.gtk_image_menu_item_set_image (handle, 0);", "+\t\tif (OS.GTK3) {", "+\t\t\tif (!OS.GTK_IS_MENU_ITEM (handle)) return;", "+\t\t\tif (OS.SWT_PADDED_MENU_ITEMS && imageHandle != 0) {", "+\t\t\t\tOS.gtk_image_set_from_pixbuf(imageHandle, pixbuf);", "+\t\t\t} else {", "+\t\t\t\timageHandle = OS.gtk_image_new_from_pixbuf (pixbuf);", "+\t\t\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tif (boxHandle != 0) {", "+\t\t\t\t\tOS.gtk_container_add (boxHandle, imageHandle);", "+\t\t\t\t\tOS.gtk_box_reorder_child (boxHandle, imageHandle, 0);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (!OS.GTK_IS_IMAGE_MENU_ITEM (handle)) return;", "+\t\t\timageHandle = OS.gtk_image_new_from_pixbuf (pixbuf);", "+\t\t\tOS.gtk_image_menu_item_set_image (handle, imageHandle);", "+\t\t\t}", "+\tOS.gtk_widget_show (imageHandle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c78f4bf52a39a62c343183f2601dd7c4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/gtk/org/eclipse/swt/browser/WebKit.java", "commitBeforeChange": "3b7e04304effe884e33175739d7c3054dcac5e13", "commitAfterChange": "8d895e4bdf05b8234ec4199b4f2b83cc1cbe3aaa", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "  int webkit_download_requested (int web_view, int download)", "signatureAfterChange": "  int webkit_download_requested (int web_view, int download)", "diff": ["-\tString nameString = new String (Converter.mbcsToWcs (null, bytes));", "-\tFileDialog dialog = new FileDialog (browser.getShell (), SWT.OPEN);", "-\tdialog.setFileName (nameString);", "-\tString title = Compatibility.getMessage (\"SWT_FileDownload\"); //$NON-NLS-1$", "-\tdialog.setText (title);", "-\tString path = dialog.open ();", "+\tfinal String nameString = new String (Converter.mbcsToWcs (null, bytes));", "-\tif (path != null) {", "-\t\tpath = URI_FILEROOT + path;", "-\t\tbyte[] uriBytes = Converter.wcsToMbcs (null, path, true);", "-\t\tWebKitGTK.webkit_download_set_destination_uri (download, uriBytes);", "-\t\topenDownloadWindow (download);", "-\t} else {", "-\t\tWebKitGTK.webkit_download_cancel (download);", "-\t}", "+\tfinal int /*long*/ request = WebKitGTK.webkit_download_get_network_request (download);", "+\tOS.g_object_ref (request);", "+", "+\t/*", "+\t* As of WebKitGTK 1.8.x attempting to show a FileDialog in this callback causes", "+\t* a hang.  The workaround is to open it asynchronously with a new download.", "+\t*/", "+\tbrowser.getDisplay ().asyncExec (new Runnable () {", "+\t\tpublic void run () {", "+\t\t\tif (!browser.isDisposed ()) {", "+\t\t\t\tFileDialog dialog = new FileDialog (browser.getShell (), SWT.OPEN);", "+\t\t\t\tdialog.setFileName (nameString);", "+\t\t\t\tString title = Compatibility.getMessage (\"SWT_FileDownload\"); //$NON-NLS-1$", "+\t\t\t\tdialog.setText (title);", "+\t\t\t\tString path = dialog.open ();", "+\t\t\t\tif (path != null) {", "+\t\t\t\t\tpath = URI_FILEROOT + path;", "+\t\t\t\t\tint /*long*/ newDownload = WebKitGTK.webkit_download_new (request);", "+\t\t\t\t\tbyte[] uriBytes = Converter.wcsToMbcs (null, path, true);", "+\t\t\t\t\tWebKitGTK.webkit_download_set_destination_uri (newDownload, uriBytes);", "+\t\t\t\t\topenDownloadWindow (newDownload);", "+\t\t\t\t\tWebKitGTK.webkit_download_start (newDownload);", "+\t\t\t\t\tOS.g_object_unref (newDownload);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.g_object_unref (request);", "+\t\t}", "+\t});", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "933a81352b90b68b0c7419ea48637515", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "6cd96601d8e3781cbea6e8160421e463e535713c", "commitAfterChange": "3d16bdf9400649d9f4f0fff0831768ba6c38fdea", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 89, "signatureBeforeChange": " void releaseDisplay ()", "signatureAfterChange": " void releaseDisplay ()", "diff": ["+\t/* destroy the System Images */", "+\tint screen = OS.XDefaultScreenOfDisplay (xDisplay);", "+\tif (errorImage != 0) OS.XmDestroyPixmap (screen, errorImage);", "+\tif (infoImage != 0) OS.XmDestroyPixmap (screen, infoImage);", "+\tif (questionImage != 0) OS.XmDestroyPixmap (screen, questionImage);", "+\tif (warningImage != 0) OS.XmDestroyPixmap (screen, warningImage);", "+\tif (workingImage != 0) OS.XmDestroyPixmap (screen, workingImage);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0903607a1fc822c9745322942bccbc35", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/gtk/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "ac473adfcb9983f414d3da15b8b15f56fca50498", "commitAfterChange": "7171ce75440e1c2f381de2d9486e536f525ae21d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 19, "signatureBeforeChange": " public boolean startJob(String jobName)", "signatureAfterChange": " public boolean startJob(String jobName)", "diff": ["+\tcheckDevice();", "+\tbyte [] buffer = Converter.wcsToMbcs (null, jobName, true);", "+\tprintJob = OS.gtk_print_job_new (buffer, printer, settings, pageSetup);", "+\tif (printJob == 0) return false;", "+\tsurface = OS.gtk_print_job_get_surface(printJob, null);", "+\tif (surface == 0) {", "+\t\tOS.g_object_unref(printJob);", "+\t\tprintJob = 0;", "+\t\treturn false;", "+\t}", "+\tcairo = Cairo.cairo_create(surface);", "+\tif (cairo == 0)  {", "+\t\tOS.g_object_unref(printJob);", "+\t\tprintJob = 0;", "+\t\treturn false;", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76437f57431b7ae206ff0675dedcfcba", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Spinner.java", "commitBeforeChange": "48e52aa22d171fa426dd2029dfc554b40adc5e47", "commitAfterChange": "ab395137a9ad910580d0b3cefc99184f207fe751", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 29, "signatureBeforeChange": "  void hookEvents ()", "signatureAfterChange": "  void hookEvents ()", "diff": ["-//\tint handler = OS.gcnew_TextCompositionEventHandler (jniRef, \"HandlePreviewTextInput\");", "-//\tif (handler == 0) error (SWT.ERROR_NO_HANDLES);", "-//\tOS.UIElement_PreviewTextInput (handle, handler);", "-//\tOS.GCHandle_Free (handler);", "+\tint handler = OS.gcnew_TextCompositionEventHandler (jniRef, \"HandlePreviewTextInput\");", "+\tif (handler == 0) error (SWT.ERROR_NO_HANDLES);", "+\tOS.UIElement_PreviewTextInput (textHandle, handler);", "+\tOS.GCHandle_Free (handler);", "-//\thandler = OS.gcnew_TextChangedEventHandler (jniRef, \"HandleTextChanged\");", "-//\tif (handler == 0) error (SWT.ERROR_NO_HANDLES);", "-//\tOS.TextBoxBase_TextChanged (handle, handler);", "-//\tOS.GCHandle_Free(handler);", "+\thandler = OS.gcnew_TextChangedEventHandler (jniRef, \"HandleTextChanged\");", "+\tif (handler == 0) error (SWT.ERROR_NO_HANDLES);", "+\tOS.TextBoxBase_TextChanged (textHandle, handler);", "+\tOS.GCHandle_Free (handler);", "+\t", "-\tint handler = OS.gcnew_RoutedEventHandler (jniRef, \"HandleDownClick\");", "+\thandler = OS.gcnew_RoutedEventHandler (jniRef, \"HandleDownClick\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acc7f24f69651aeddf53844ef4e64364", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/Transfer.java", "commitBeforeChange": "95707932f038406df95c0c03bbb9d01c0456b4a8", "commitAfterChange": "fdfcd3aedd5d6c02212881f46ebc8c60bfc955cd", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public static int registerType(String formatName)", "signatureAfterChange": " public static int registerType(String formatName)", "diff": ["-\t// System.out.println(\"Transfer.registerType: \" + formatName);", "-\t// AW: FIXME: hashCode may not be not unique!", "-\treturn formatName.hashCode();", "+\tint length = formatName.length();", "+\t// TODO - hashcode may not be unique - need another way", "+\tif (length > 4) return formatName.hashCode();", "+\tint type = 0;", "+\tif (length > 0) type |= (formatName.charAt(0) & 0xff) << 24;", "+\tif (length > 1) type |= (formatName.charAt(1) & 0xff) << 16;", "+\tif (length > 2) type |= (formatName.charAt(2) & 0xff) << 8;", "+\tif (length > 3) type |= formatName.charAt(3) & 0xff; ", "+\treturn type;"]}], "num": 21776}
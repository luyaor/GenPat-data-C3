{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "69172150e0a5313c9e8cbdb298d7c223", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68f628b7420e4b38ae4fd70f82294cc8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 55, "signatureBeforeChange": " int processKeyDown (Object callData)", "signatureAfterChange": "  int kEventControlDraw (int nextHandler, int theEvent, int userData)", "diff": ["-}", "-int processKeyDown (Object callData) {", "-\tMacEvent macEvent = (MacEvent) callData;", "-\tif (translateTraversal (macEvent))", "-\t\treturn OS.kNoErr;", "-\t// widget could be disposed at this point", "-\tif (isDisposed ()) return 0;", "-\treturn sendKeyEvent (SWT.KeyDown, macEvent);", "-}", "+", "+int kEventControlDraw (int nextHandler, int theEvent, int userData) {", "+\tint result = super.kEventControlDraw (nextHandler, theEvent, userData);", "+\tint [] theControl = new int [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamDirectObject, OS.typeControlRef, null, 4, null, theControl);", "+\tif (theControl [0] != handle) return result;", "+\tif (!hooks (SWT.Paint) && !filters (SWT.Paint)) return result;", "+", "+\t/* Retrieve the damage region */", "+\tint [] region = new int [1];\t", "+\tOS.GetEventParameter (theEvent, OS.kEventParamRgnHandle, OS.typeQDRgnHandle, null, 4, null, region);", "+\tRect bounds = new Rect ();", "+\tOS.GetRegionBounds (region [0], bounds);", "+\tRect rect = new Rect ();", "+\tOS.GetControlBounds (handle, rect);", "+\tif (!OS.SectRect (rect, bounds, bounds)) return result;", "+\tOS.OffsetRect (bounds, (short) -rect.left, (short) -rect.top);", "+", "+\tGCData data = new GCData ();", "+\tdata.paintEvent = theEvent;", "+\tGC gc = GC.carbon_new (this, data);", "+\t", "+\t/* Send the paint event */", "+\tEvent event = new Event ();", "+\tevent.gc = gc;", "+\tevent.x = bounds.left;", "+\tevent.y = bounds.top;", "+\tevent.width = bounds.right - bounds.left;", "+\tevent.height = bounds.bottom - bounds.top;", "+//\tgc.setClipping (Region.carbon_new (region [0]));", "+\tsendEvent (SWT.Paint, event);", "+\tevent.gc = null;", "+\tgc.dispose ();", "+", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "411bc97890ded28157dbafef332d51b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 49, "signatureBeforeChange": " int processMouseDown (MacMouseEvent mmEvent)", "signatureAfterChange": "  void updateText ()", "diff": ["-}", "-int processMouseDown (MacMouseEvent mmEvent) {", "-\tDisplay display = getDisplay ();", "-//\tShell shell = parent.getShell ();", "-\tdisplay.hideToolTip ();", "-\t", "-\t/* AW", "-\tXButtonEvent xEvent = new XButtonEvent ();", "-\tOS.memmove (xEvent, callData, XButtonEvent.sizeof);", "-\t*/", "-\tif (mmEvent.getButton() == 1) {", "-\t\tif (!set && (style & SWT.RADIO) == 0) {", "-\t\t\tsetDrawPressed (!set);", "-\t\t}", "-\t}", "-\t", "-\t/*", "-\t* Forward the mouse event to the parent.", "-\t* This is necessary so that mouse listeners", "-\t* in the parent will be called, despite the", "-\t* fact that the event did not really occur", "-\t* in X in the parent.  This is done to be", "-\t* compatible with Windows.", "-\t*/", "-\t/* AW", "-\tint [] argList = {OS.XmNx, 0, OS.XmNy, 0};", "-\tOS.XtGetValues (handle, argList, argList.length / 2);", "-\txEvent.window = OS.XtWindow (parent.handle);", "-\txEvent.x += argList [1];  xEvent.y += argList [3];", "-\tOS.memmove (callData, xEvent, XButtonEvent.sizeof);", "-\t*/", "-\tparent.processMouseDown (mmEvent);", "-\t/*", "-\t* It is possible that the shell may be", "-\t* disposed at this point.  If this happens", "-\t* don't send the activate and deactivate", "-\t* events.", "-\t*/\t", "-//\tif (!shell.isDisposed()) {", "-//\t\tshell.setActiveControl (parent);", "-//\t}", "-\treturn 0;", "-}", "+", "+void updateText () {", "+\tif (labelCIcon != 0) destroyCIcon (labelCIcon);", "+\tlabelCIcon = 0;", "+\tControlButtonContentInfo inContent = new ControlButtonContentInfo ();", "+\tif (text.length () > 0) {", "+\t\tchar [] buffer = new char [text.length ()];", "+\t\ttext.getChars (0, buffer.length, buffer, 0);", "+\t\tint i=0, j=0;", "+\t\twhile (i < buffer.length) {", "+\t\t\tif ((buffer [j++] = buffer [i++]) == Mnemonic) {", "+\t\t\t\tif (i == buffer.length) {continue;}", "+\t\t\t\tif (buffer [i] == Mnemonic) {i++; continue;}", "+\t\t\t\tj--;", "+\t\t\t}", "+\t\tFont font = parent.getFont ();", "+\t\tGC gc = new GC (parent);", "+\t\tPoint size = gc.stringExtent (text);", "+\t\tgc.dispose ();", "+\t\tDisplay display = getDisplay ();", "+\t\tImage image = new Image (display, size.x, size.y);", "+\t\tgc = new GC (image);", "+\t\tgc.setFont (font);", "+\t\tgc.drawString (text, 0, 0);", "+\t\tgc.dispose ();", "+\t\tImageData data = image.getImageData ();", "+\t\tdata.transparentPixel = 0xFFFFFFFF;", "+\t\timage.dispose ();", "+\t\timage = new Image (display, data, data.getTransparencyMask());", "+\t\tlabelCIcon = createCIcon (image);", "+\t\timage.dispose ();", "+\t\tinContent.contentType = (short) OS.kControlContentCIconHandle;", "+\t\tinContent.iconRef = labelCIcon;", "+\tOS.SetBevelButtonContentInfo (labelHandle, inContent);\t", "+\tredrawWidget (labelHandle);", "+\tPoint size = computeSize ();", "+\tsetSize (size.x, size.y, true);"]}], "num": 48309}
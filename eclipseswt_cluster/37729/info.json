{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e27f94279161df6ca3c32a8d97ce4fec", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c8b41ba9819e15efc3909f38bb43bc41", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/NativesGenerator.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void generateFunctionCall(Method method, MethodData methodData, Class[] paramTypes, Class returnType, boolean needsReturn)", "signatureAfterChange": "  void generateFunctionCall(JNIMethod method, JNIParameter[] params, JNIType returnType, JNIType returnType64, boolean needsReturn)", "diff": ["-void generateFunctionCall(Method method, MethodData methodData, Class[] paramTypes, Class returnType, boolean needsReturn) {", "+void generateFunctionCall(JNIMethod method, JNIParameter[] params, JNIType returnType, JNIType returnType64, boolean needsReturn) {", "-\tString copy = (String)methodData.getParam(\"copy\");", "-\tboolean makeCopy = copy.length() != 0 && isCPP && returnType != Void.TYPE;", "+\tString copy = (String)method.getParam(\"copy\");", "+\tboolean makeCopy = copy.length() != 0 && isCPP && !returnType.isType(\"void\");", "-\t\tgenerateFunctionCallLeftSide(method, methodData, returnType, needsReturn);", "+\t\tgenerateFunctionCallLeftSide(method, returnType, returnType64, needsReturn);", "-\t\tParameterData paramData = getMetaData().getMetaData(method, 0);", "-\t\tString cast = paramData.getCast(); ", "+\t\tString cast = params[0].getCast(); ", "-\t\t\toutput(getTypeSignature2(returnType));", "+\t\t\toutput(returnType.getTypeSignature2(!returnType.equals(returnType64)));", "-\t\toutput(getTypeSignature2(returnType));", "+\t\toutput(returnType.getTypeSignature2(!returnType.equals(returnType64)));", "-\t\tfor (int i = 1; i < paramTypes.length; i++) {", "+\t\tfor (int i = 1; i < params.length; i++) {", "-\t\t\tClass paramType = paramTypes[i];", "-\t\t\toutput(getTypeSignature4(paramType));", "+\t\t\tJNIParameter param = params[i];", "+\t\t\tJNIType paramType = param.getType(), paramType64 = param.getType64();", "+\t\t\toutput(paramType.getTypeSignature4(!paramType.equals(paramType64), false));", "-\t\toutput(getTypeSignature4(paramTypes[1]));", "+\t\tJNIType paramType = params[1].getType(), paramType64 = params[1].getType64();", "+\t\toutput(paramType.getTypeSignature4(!paramType.equals(paramType64), false));", "-\t} else if (methodData.getFlag(FLAG_CPP) || methodData.getFlag(FLAG_SETTER) || methodData.getFlag(FLAG_GETTER) || methodData.getFlag(FLAG_ADDER)) {", "-\t\tif (methodData.getFlag(FLAG_GCOBJECT)) {", "+\t} else if (method.getFlag(FLAG_CPP) || method.getFlag(FLAG_SETTER) || method.getFlag(FLAG_GETTER) || method.getFlag(FLAG_ADDER)) {", "+\t\tif (method.getFlag(FLAG_GCOBJECT)) {", "-\t\tParameterData paramData = getMetaData().getMetaData(method, 0);", "-\t\tif (paramData.getFlag(FLAG_STRUCT)) output(\"*\");", "-\t\tString cast = paramData.getCast(); ", "+\t\tJNIParameter param = params[0];", "+\t\tif (param.getFlag(FLAG_STRUCT)) output(\"*\");", "+\t\tString cast = param.getCast(); ", "-\t\tif (paramData.getFlag(FLAG_GCOBJECT)) {", "+\t\tif (param.getFlag(FLAG_GCOBJECT)) {", "-\t\tif (paramData.getFlag(FLAG_GCOBJECT)) {", "+\t\tif (param.getFlag(FLAG_GCOBJECT)) {", "-\t\tString accessor = methodData.getAccessor();", "+\t\tString accessor = method.getAccessor();", "-\t} else if (methodData.getFlag(FLAG_GCNEW)) {", "+\t} else if (method.getFlag(FLAG_GCNEW)) {", "-\t\tString accessor = methodData.getAccessor();", "+\t\tString accessor = method.getAccessor();", "-\t} else if (methodData.getFlag(FLAG_NEW)) {", "+\t} else if (method.getFlag(FLAG_NEW)) {", "-\t\tString accessor = methodData.getAccessor();", "+\t\tString accessor = method.getAccessor();", "-\t} else if (methodData.getFlag(FLAG_DELETE)) {", "+\t} else if (method.getFlag(FLAG_DELETE)) {", "-\t\tParameterData paramData = getMetaData().getMetaData(method, 0);", "-\t\tString cast = paramData.getCast(); ", "+\t\tJNIParameter param = params[0];", "+\t\tString cast = param.getCast(); ", "-\t\tif (methodData.getFlag(FLAG_GCOBJECT)) {", "+\t\tif (method.getFlag(FLAG_GCOBJECT)) {", "-\t\tif (methodData.getFlag(Flags.FLAG_CAST)) {", "+\t\tif (method.getFlag(Flags.FLAG_CAST)) {", "-\t\t\toutput(getTypeSignature2(returnType));", "+\t\t\toutput(returnType.getTypeSignature2(!returnType.equals(returnType64)));", "-\t\t\tfor (int i = 0; i < paramTypes.length; i++) {", "+\t\t\tfor (int i = 0; i < params.length; i++) {", "-\t\t\t\tClass paramType = paramTypes[i];", "-\t\t\t\tParameterData paramData = getMetaData().getMetaData(method, i);", "-\t\t\t\tString cast = paramData.getCast();", "+\t\t\t\tJNIParameter param = params[i];", "+\t\t\t\tString cast = param.getCast();", "-\t\t\t\t\toutput(getTypeSignature4(paramType, paramData.getFlag(FLAG_STRUCT)));", "+\t\t\t\t\tJNIType paramType = param.getType(), paramType64 = param.getType64();", "+\t\t\t\t\tif (!(paramType.isPrimitive() || paramType.isArray())) {", "+\t\t\t\t\t\tif (param.getTypeClass().getFlag(FLAG_STRUCT)) {", "+\t\t\t\t\t\t\toutput(\"struct \");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\toutput(paramType.getTypeSignature4(!paramType.equals(paramType64), param.getFlag(FLAG_STRUCT)));", "-\t\tString accessor = methodData.getAccessor();", "+\t\tString accessor = method.getAccessor();", "-\t\tif (methodData.getFlag(Flags.FLAG_CAST)) {", "+\t\tif (method.getFlag(Flags.FLAG_CAST)) {", "-\tif ((methodData.getFlag(FLAG_SETTER) && paramTypes.length == 3) || (methodData.getFlag(FLAG_GETTER) && paramTypes.length == 2)) {", "+\tif ((method.getFlag(FLAG_SETTER) && params.length == 3) || (method.getFlag(FLAG_GETTER) && params.length == 2)) {", "-\tif (methodData.getFlag(FLAG_SETTER)) output(\" = \");", "-\tif (methodData.getFlag(FLAG_ADDER)) output(\" += \");", "-\tif (!methodData.getFlag(FLAG_GETTER)) {", "-\t\tgenerateFunctionCallRightSide(method, methodData, paramTypes, paramStart);", "+\tif (method.getFlag(FLAG_SETTER)) output(\" = \");", "+\tif (method.getFlag(FLAG_ADDER)) output(\" += \");", "+\tif (!method.getFlag(FLAG_GETTER)) {", "+\t\tgenerateFunctionCallRightSide(method, params, paramStart);", "-\tif (methodData.getFlag(FLAG_GCNEW) || methodData.getFlag(FLAG_GCOBJECT)) {", "+\tif (method.getFlag(FLAG_GCNEW) || method.getFlag(FLAG_GCOBJECT)) {", "-\t\toutput(getTypeSignature2(returnType));", "+\t\toutput(returnType.getTypeSignature2(!returnType.equals(returnType64)));", "-\t\toutput(getTypeSignature4(paramTypes[0], true));", "+\t\tJNIType paramType = params[0].getType(), paramType64 = params[0].getType64();", "+\t\toutput(paramType.getTypeSignature4(!paramType.equals(paramType64), true));", "-\t\tfor (int i = 1; i < paramTypes.length; i++) {", "+\t\tfor (int i = 1; i < params.length; i++) {", "-\t\t\tClass paramType = paramTypes[i];", "-\t\t\tParameterData paramData = getMetaData().getMetaData(method, i);", "-\t\t\tString cast = paramData.getCast();", "+\t\t\tJNIParameter param = params[i];", "+\t\t\tString cast = param.getCast();", "-\t\t\t\toutput(getTypeSignature4(paramType, paramData.getFlag(FLAG_STRUCT)));", "+\t\t\t\tparamType = param.getType(); paramType64 = param.getType64();", "+\t\t\t\toutput(paramType.getTypeSignature4(!paramType.equals(paramType64), param.getFlag(FLAG_STRUCT)));", "-\t\tgenerateFunctionCallRightSide(method, methodData, paramTypes, 1);", "+\t\tgenerateFunctionCallRightSide(method, params, 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a8befed086887b9e24bcafce94502bf1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 51, "signatureBeforeChange": " void paintSubItem(Event event, TableItem paintItem, TableColumn column, int paintYPosition)", "signatureAfterChange": " void headerPaintShadow (GC gc, Rectangle bounds, boolean paintHLines, boolean paintVLines)", "diff": ["+void headerPaintShadow (GC gc, Rectangle bounds, boolean paintHLines, boolean paintVLines) {", "+\tgc.setClipping (bounds.x, bounds.y, bounds.width, getHeaderHeight ());", "+\tColor oldForeground = gc.getForeground ();", "+\t", "+\t/* draw highlight shadow */", "+\tgc.setForeground (display.getSystemColor (SWT.COLOR_WIDGET_HIGHLIGHT_SHADOW));", "+\tif (paintHLines) {", "+\t\tint endX = bounds.x + bounds.width;", "+\t\tgc.drawLine (bounds.x, bounds.y, endX, bounds.y);", "+\t}", "+\tif (paintVLines) {", "+\t\tgc.drawLine (bounds.x, bounds.y, bounds.x, bounds.y + bounds.height - 1);", "+\t}", "+\t", "+\t/* draw lowlight shadow */", "+\tPoint bottomShadowStart = new Point (bounds.x + 1, bounds.height - 2);", "+\tPoint bottomShadowStop = new Point (bottomShadowStart.x + bounds.width - 2, bottomShadowStart.y);\t", "+", "+\t/* light inner shadow */", "+\tgc.setForeground (display.getSystemColor (SWT.COLOR_WIDGET_NORMAL_SHADOW));", "+\tif (paintHLines) {", "+\t\tgc.drawLine (", "+\t\t\tbottomShadowStart.x, bottomShadowStart.y,", "+\t\t\tbottomShadowStop.x, bottomShadowStop.y);", "+\t}", "+\tPoint rightShadowStart = new Point (bounds.x + bounds.width - 2, bounds.y + 1);", "+\tPoint rightShadowStop = new Point (rightShadowStart.x, bounds.height - 2);", "+\tif (paintVLines) {", "+\t\tgc.drawLine (", "+\t\t\trightShadowStart.x, rightShadowStart.y,", "+\t\t\trightShadowStop.x, rightShadowStop.y);", "+\t}", "+", "+\t/* dark outer shadow */ ", "+\tgc.setForeground (display.getSystemColor (SWT.COLOR_WIDGET_DARK_SHADOW));", "+\t--bottomShadowStart.x;", "+\t++bottomShadowStart.y;", "+\t++bottomShadowStop.y;", "+\t", "+\tif (paintHLines) {", "+\t\tgc.drawLine (", "+\t\t\tbottomShadowStart.x, bottomShadowStart.y,", "+\t\t\tbottomShadowStop.x, bottomShadowStop.y);", "+\t}", "+\tif (paintVLines) {", "+\t\tgc.drawLine (", "+\t\t\trightShadowStart.x + 1, rightShadowStart.y - 1,", "+\t\t\trightShadowStop.x + 1, rightShadowStop.y + 1);", "+\t}", "+\t", "+\tgc.setForeground (oldForeground);", "+}", "- */", "-void paintSubItem(Event event, TableItem paintItem, TableColumn column, int paintYPosition) {", "-\tRectangle columnBounds = column.getBounds();", "-\tPoint paintPosition;", "-\tint gridLineWidth = getGridLineWidth();", "-\tint itemDrawStopX = columnBounds.x + columnBounds.width - gridLineWidth;", "-\tint clipX;", "-\t", "-\tif (event.x + event.width > itemDrawStopX) {\t// does the invalidated area stretch past the current column's right border?", "-\t\tclipX = Math.max(columnBounds.x, event.x);", "-\t\tRectangle clipRect = new Rectangle(", "-\t\t\t\tclipX, event.y, ", "-\t\t\t\tMath.max(0, itemDrawStopX - clipX), event.height);", "-\t\tif (!drawGridLines) clipRect.width++;", "-\t\tevent.gc.setClipping(clipRect);\t\t\t\t// clip the drawing area", "-\t}", "-\tpaintPosition = new Point(columnBounds.x, paintYPosition);", "-\tpaintItem.paint(event.gc, paintPosition, column);", "-\tif (event.x + event.width > itemDrawStopX) {", "-\t\tevent.gc.setClipping(event.x, event.y, event.width, event.height); // restore original clip rectangle", "-\t}", "-}"]}], "num": 37729}
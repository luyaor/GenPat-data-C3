{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09827a63842dc1401b9d1368ec8895d7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0b8cf8c3a16724e47c4121a7052691c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "e7d3f96d2d9183741a56ad3af6b85eca3c65142d", "commitAfterChange": "b99e0e369a51571b12234356a1c0332a2bed35be", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": "  LRESULT WM_KEYDOWN (int wParam, int lParam)", "signatureAfterChange": " \t LRESULT WM_KEYDOWN (int wParam, int lParam)", "diff": ["-LRESULT WM_KEYDOWN (int /*long*/ wParam, int /*long*/ lParam) {", "-\tLRESULT result = super.WM_KEYDOWN (wParam, lParam);", "-\t* this key processing.", "-\t\t\tint location = -1;", "+\t", "+LRESULT WM_KEYDOWN (int /*long*/ wParam, int /*long*/ lParam) {", "+\tLRESULT result = super.WM_KEYDOWN (wParam, lParam);", "+\tif (result != null) return result;", "+\t/*", "+\t* Feature in Windows.  The Windows list box does not implement", "+\t* the control key interface for multi-select list boxes, making", "+\t* it inaccessible from the keyboard.  The fix is to implement", "+\t* the key processing.", "+\t*/", "+\tif (OS.GetKeyState (OS.VK_CONTROL) < 0 && OS.GetKeyState (OS.VK_SHIFT) >= 0) {", "+\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\tif ((bits & OS.LBS_EXTENDEDSEL) != 0) {", "+\t\t\tint location = -1;", "+\t\t\tswitch ((int)/*64*/wParam) {", "+\t\t\t\tcase OS.VK_SPACE: {", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Ensure that the window proc does not process VK_SPACE", "+\t\t\t\t\t* so that it can be handled in WM_CHAR.  This allows the", "+\t\t\t\t\t* application to cancel an operation that is normally", "+\t\t\t\t\t* performed in WM_KEYDOWN from WM_CHAR.", "+\t\t\t\t\t*/", "+\t", "+\t/*", "+\t* Feature in Windows.  When the user changes focus using", "+\t* the keyboard, the focus indicator does not draw.  The", "+\t* fix is to update the UI state for the control whenever", "+\t* the focus indicator changes as a result of something", "+\t* the user types.", "+\t*/", "+\tint uiState = (int)/*64*/OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "+\tif ((uiState & OS.UISF_HIDEFOCUS) != 0) {", "+\t\tint oldIndex = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "+\t\tint /*long*/ code = callWindowProc (handle, OS.WM_KEYDOWN, wParam, lParam);", "+\t\tint newIndex = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "+\t\tif (oldIndex != newIndex) {", "+\t\t\tOS.SendMessage (handle, OS.WM_CHANGEUISTATE, OS.UIS_INITIALIZE, 0);", "+\t\t\t/*", "+\t\t\t* Bug in Windows.  When the WM_CHANGEUISTATE is used", "+\t\t\t* to update the UI state for a list that has been", "+\t\t\t* selected using Shift+Arrow, the focus indicator", "+\t\t\t* has pixel corruption.  The fix is to redraw the", "+\t\t\t* focus item.", "+\t\t\t*/", "+\t\t\tRECT itemRect = new RECT ();", "+\t\t\tOS.SendMessage (handle, OS.LB_GETITEMRECT, newIndex, itemRect);", "+\t\t\tOS.InvalidateRect (handle, itemRect, true);", "+\t\t}", "+\t\treturn new LRESULT (code);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72e9ba1e5954204daa17fc573730de7e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "5a6cf4729fcf322bd23b4717e113de08287fc648", "commitAfterChange": "5857b8c40b76d95ba94a274ef865880a11402c24", "methodNumberBeforeChange": 55, "methodNumberAfterChange": 55, "signatureBeforeChange": " \t LRESULT WM_KEYDOWN (int wParam, int lParam)", "signatureAfterChange": " \t LRESULT WM_KEYDOWN (int wParam, int lParam)", "diff": ["-\t\t\tint location = -1;", "+\t\t\tint newIndex = -1;", "-\t\t\t\t\tint index = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "-\t\t\t\t\tlocation = Math.max (0, index + (((int)/*64*/wParam) == OS.VK_UP ? -1 : 1));", "+\t\t\t\t\tint oldIndex = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "+\t\t\t\t\tnewIndex = Math.max (0, oldIndex + (((int)/*64*/wParam) == OS.VK_UP ? -1 : 1));", "-\t\t\t\t\tint index = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "-\t\t\t\t\tif (index != topIndex) {", "-\t\t\t\t\t\tlocation = topIndex;", "+\t\t\t\t\tint oldIndex = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "+\t\t\t\t\tif (oldIndex != topIndex) {", "+\t\t\t\t\t\tnewIndex = topIndex;", "-\t\t\t\t\t\tlocation = Math.max (0, topIndex - (pageSize - 1));", "+\t\t\t\t\t\tnewIndex = Math.max (0, topIndex - (pageSize - 1));", "-\t\t\t\t\tint index = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "+\t\t\t\t\tint oldIndex = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "-\t\t\t\t\tif (index != bottomIndex) {", "-\t\t\t\t\t\tlocation = bottomIndex;", "+\t\t\t\t\tif (oldIndex != bottomIndex) {", "+\t\t\t\t\t\tnewIndex = bottomIndex;", "-\t\t\t\t\t\tlocation = bottomIndex + pageSize - 1;", "+\t\t\t\t\t\tnewIndex = bottomIndex + pageSize - 1;", "-\t\t\t\t\tif (count != OS.LB_ERR) location = Math.min (count - 1, location);", "+\t\t\t\t\tif (count != OS.LB_ERR) newIndex = Math.min (count - 1, newIndex);", "-\t\t\t\t\tlocation = 0;", "+\t\t\t\t\tnewIndex = 0;", "-\t\t\t\t\tlocation = count - 1;", "+\t\t\t\t\tnewIndex = count - 1;", "-\t\t\tif (location != -1) {", "-\t\t\t\tOS.SendMessage (handle, OS.WM_CHANGEUISTATE, OS.UIS_INITIALIZE, 0);", "-\t\t\t\tOS.SendMessage (handle, OS.LB_SETCARETINDEX, location, 0);", "+\t\t\tif (newIndex != -1) {", "+\t\t\t\t/*", "+\t\t\t\t* Feature in Windows.  When the user changes focus using", "+\t\t\t\t* the keyboard, the focus indicator does not draw.  The", "+\t\t\t\t* fix is to update the UI state for the control whenever", "+\t\t\t\t* the focus indicator changes as a result of something", "+\t\t\t\t* the user types.", "+\t\t\t\t*/", "+\t\t\t\tint uiState = (int)/*64*/OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "+\t\t\t\tif ((uiState & OS.UISF_HIDEFOCUS) != 0) {", "+\t\t\t\t\tOS.SendMessage (handle, OS.WM_CHANGEUISTATE, OS.UIS_INITIALIZE, 0);", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Bug in Windows.  When the WM_CHANGEUISTATE is used", "+\t\t\t\t\t* to update the UI state for a list that has been", "+\t\t\t\t\t* selected using Shift+Arrow, the focus indicator", "+\t\t\t\t\t* has pixel corruption.  The fix is to redraw the", "+\t\t\t\t\t* control.", "+\t\t\t\t\t*/", "+\t\t\t\t\tRECT itemRect = new RECT ();", "+\t\t\t\t\tint oldIndex = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "+\t\t\t\t\tOS.SendMessage (handle, OS.LB_GETITEMRECT, oldIndex, itemRect);", "+\t\t\t\t\tOS.InvalidateRect (handle, itemRect, true);", "+\t\t\t\t}", "+\t\t\t\tOS.SendMessage (handle, OS.LB_SETCARETINDEX, newIndex, 0);", "-\t}", "-\t", "-\t/*", "-\t* Feature in Windows.  When the user changes focus using", "-\t* the keyboard, the focus indicator does not draw.  The", "-\t* fix is to update the UI state for the control whenever", "-\t* the focus indicator changes as a result of something", "-\t* the user types.", "-\t*/", "-\tint uiState = (int)/*64*/OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "-\tif ((uiState & OS.UISF_HIDEFOCUS) != 0) {", "-\t\tint oldIndex = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "-\t\tint /*long*/ code = callWindowProc (handle, OS.WM_KEYDOWN, wParam, lParam);", "-\t\tint newIndex = (int)/*64*/OS.SendMessage (handle, OS.LB_GETCARETINDEX, 0, 0);", "-\t\tif (oldIndex != newIndex) {", "-\t\t\tOS.SendMessage (handle, OS.WM_CHANGEUISTATE, OS.UIS_INITIALIZE, 0);", "-\t\t\t/*", "-\t\t\t* Bug in Windows.  When the WM_CHANGEUISTATE is used", "-\t\t\t* to update the UI state for a list that has been", "-\t\t\t* selected using Shift+Arrow, the focus indicator", "-\t\t\t* has pixel corruption.  The fix is to redraw the", "-\t\t\t* focus item.", "-\t\t\t*/", "-\t\t\tRECT itemRect = new RECT ();", "-\t\t\tOS.SendMessage (handle, OS.LB_GETITEMRECT, newIndex, itemRect);", "-\t\t\tOS.InvalidateRect (handle, itemRect, true);", "-\t\t}", "-\t\treturn new LRESULT (code);"]}], "num": 28072}
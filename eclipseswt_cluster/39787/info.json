{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c79751a15a8349a040df1ff695e0a693", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55c40197d58f7ccc1f9b3c71c0aa8229", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "56201926f64ad6ea7f48b4affd1bb7e12a2c8db2", "commitAfterChange": "55a22ab9240db91b3cefd3f1694927c9a71b6ad8", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " public void setSelection (int start, int end)", "signatureAfterChange": " public void setSelection (int start, int end)", "diff": ["-\tif ((style & SWT.SINGLE) != 0) { ", "+\tif ((style & SWT.SINGLE) != 0) {", "+\t\tint /*long*/ ptr = OS.gtk_entry_get_text (handle);", "+\t\tstart = (int)/*64*/OS.g_utf16_offset_to_utf8_offset (ptr, start);", "+\t\tend = (int)/*64*/OS.g_utf16_offset_to_utf8_offset (ptr, end);", "+\t\tOS.gtk_text_buffer_get_bounds (bufferHandle, startIter, endIter);", "+\t\tint /*long*/ ptr = OS.gtk_text_buffer_get_text (bufferHandle, startIter, endIter, true);", "+\t\tstart = (int)/*64*/OS.g_utf16_offset_to_utf8_offset (ptr, start);", "+\t\tend = (int)/*64*/OS.g_utf16_offset_to_utf8_offset (ptr, end);", "+\t\tOS.g_free (ptr);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1153eda4dc0a10b652e12a6814c1085", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "fc59b19065f60bbcb485c797c7ff1561e9bb73f6", "commitAfterChange": "6079b58ee7045c020f911594524a48a4bc5cb888", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight)", "signatureAfterChange": " void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight)", "diff": ["-\t\t//NOT DONE - there must be a better way of scaling a GdkBitmap", "-\t\t\tint /*long*/ gdkImagePtr = OS.gdk_drawable_get_image(maskPixmap, 0, 0, imgWidth, imgHeight);", "-\t\t\tif (gdkImagePtr != 0) {", "+\t\t\tint /*long*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, srcWidth, srcHeight);", "+\t\t\tif (maskPixbuf != 0) {", "+\t\t\t\tOS.gdk_pixbuf_get_from_drawable(maskPixbuf, maskPixmap, 0, srcX, srcY, 0, 0, srcWidth, srcHeight);", "+\t\t\t\tint maskStride = OS.gdk_pixbuf_get_rowstride(maskPixbuf);", "+\t\t\t\tint /*long*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);", "+\t\t\t\tbyte[] maskLine = new byte[maskStride];", "+\t\t\t\t\tint /*long*/ maskOffset = maskPixels + (y * maskStride);", "+\t\t\t\t\tOS.memmove(maskLine, maskOffset, maskStride);", "-\t\t\t\t\t\tif (OS.gdk_image_get_pixel(gdkImagePtr, x + srcX, y + srcY) == 0) {", "+\t\t\t\t\t\tif (maskLine[x * 3] == 0) {", "-\t\t\t\tOS.g_object_unref(gdkImagePtr);", "+\t\t\t\tOS.g_object_unref(maskPixbuf);"]}], "num": 39787}
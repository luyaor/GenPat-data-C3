{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b2a53d53b01ece11eb11570ae75e888", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "062a29d4fce387f7a753cad2e5a99931", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/TableCursor.java", "commitBeforeChange": "08d4b631bb252f1aeb58da08539aaade20e2bce6", "commitAfterChange": "ae8649cbc5451548c97f158ddd1902c665a55911", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void keyDown(Event event)", "signatureAfterChange": "  void keyDown(Event event)", "diff": ["+        \t\tint[] order = table.getColumnOrder();", "+        \t\tint index = 0;", "+        \t\twhile (index < order.length) {", "+        \t\t\tif (order[index] == columnIndex) break;", "+        \t\t\tindex++;", "+\t\t\t\t}", "+\t\t\t\tif (index == order.length) index = 0;", "-\t\t           setRowColumn(rowIndex, Math.max(0, columnIndex - 1), true);", "+\t\t           setRowColumn(rowIndex, order[Math.max(0, index - 1)], true);", "-\t\t           setRowColumn(rowIndex, Math.min(columnCount - 1, columnIndex + 1), true);", "+\t\t           setRowColumn(rowIndex, order[Math.min(columnCount - 1, index + 1)], true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec188dba335e2a48c9b10544fe385ed1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "971acde0c0dda01a2bbf2f82eb24b808d1769d05", "commitAfterChange": "28b6234802ba59fc40a1f3131356be01d668d9ca", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 25, "signatureBeforeChange": " protected void release ()", "signatureAfterChange": " protected void release ()", "diff": ["-\t/* Free the X IO error handler */", "-\tOS.XSetIOErrorHandler (xIOErrorProc);", "-\txIOErrorCallback.dispose (); xIOErrorCallback = null;", "-\txNullIOErrorProc = xIOErrorProc = 0;", "-\t", "-\t/* Free the X error handler */", "-\t/*", "-\t* Bug in Motif.  For some reason, when a pixmap is", "-\t* set into a button or label, despite the fact that", "-\t* the pixmap is cleared from the widget before it", "-\t* is disposed, Motif still references the pixmap", "-\t* and attempts to dispose it in XtDestroyApplicationContext().", "-\t* The fix is to install the null error handler to avoid the", "-\t* warning.", "-\t*", "-\t* NOTE: The warning callback is leaked.", "-\t*/", "-\tOS.XSetErrorHandler (xNullErrorProc);", "-//\tOS.XSetErrorHandler (xErrorProc);", "-//\txErrorCallback.dispose (); xErrorCallback = null;", "-//\txNullErrorProc = xErrorProc = 0;", "+\tint index = 0;", "+\twhile (index < Devices.length) {", "+\t\tif (Devices [index] != null) break;", "+\t\tindex++;", "+\t}", "+\tif (index == Devices.length) {", "+\t\t/* Free the X IO error handler */", "+\t\tOS.XSetIOErrorHandler (XIOErrorProc);", "+\t\tXIOErrorCallback.dispose (); XIOErrorCallback = null;", "+\t\tXNullIOErrorProc = XIOErrorProc = 0;", "+\t\t", "+\t\t/* Free the X error handler */", "+\t\t/*", "+\t\t* Bug in Motif.  For some reason, when a pixmap is", "+\t\t* set into a button or label, despite the fact that", "+\t\t* the pixmap is cleared from the widget before it", "+\t\t* is disposed, Motif still references the pixmap", "+\t\t* and attempts to dispose it in XtDestroyApplicationContext().", "+\t\t* The fix is to avoid warnings by leaving our handler", "+\t\t* and settings warnings to false.", "+\t\t*", "+\t\t* NOTE: The warning callback is leaked.", "+\t\t*/", "+\t\twarnings = false;", "+//\t\tOS.XSetErrorHandler (XErrorProc);", "+//\t\tXErrorCallback.dispose (); XErrorCallback = null;", "+//\t\tXNullErrorProc = XErrorProc = 0;", "+\t}"]}], "num": 55934}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6591a2b79a6238866aacec0e07969a82", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "627bd6cdec3d1e0c247bf691dbd43de8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "dff12c6acd8909ca8291683b0755a76e3389df80", "commitAfterChange": "be6f344f6c5c168c19ca2e69a5af59ce3b851963", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": "  int kEventMouseWheelMoved (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventMouseWheelMoved (int nextHandler, int theEvent, int userData)", "diff": ["+\t", "+\t/*", "+\t* Bug in the Macintosh.  Mouse Wheel events are still processed when the", "+\t* window is not enabled due to a modal dialog.  The fix is to not let the", "+\t* default handlers run when window is modal disabled.", "+\t*/", "+\tint window = OS.GetControlOwner (handle);", "+\tif (OS.HIWindowIsDocumentModalTarget (window, null)) {", "+\t\treturn OS.noErr;", "+\t}\t", "+\tint[] event = new int[1];", "+\tOS.CreateEvent (0, OS.kEventClassWindow, OS.kEventWindowGetClickModality, 0.0, 0, event);", "+\tif (event [0] != 0) {", "+\t\tshort [] part = new short [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamWindowPartCode, OS.typeWindowPartCode, null, 2, null, part);", "+\t\tint [] modifiers = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, modifiers.length * 4, null, modifiers);", "+\t\tOS.SetEventParameter (event [0], OS.kEventParamDirectObject, OS.typeWindowRef, 4, new int[]{window});", "+\t\tOS.SetEventParameter (event [0], OS.kEventParamWindowPartCode, OS.typeWindowPartCode, 2, part);", "+\t\tOS.SetEventParameter (event [0], OS.kEventParamKeyModifiers, OS.typeUInt32, 4, modifiers);", "+\t\tOS.SetEventParameter (event [0], OS.kEventParamEventRef, OS.typeEventRef, 4, new int[]{theEvent});", "+\t\tOS.SendEventToEventTarget (event [0], OS.GetApplicationEventTarget ());", "+\t\tint [] clickResult = new int [1];", "+\t\tOS.GetEventParameter (event [0], OS.kEventParamModalClickResult, OS.typeModalClickResult, null, modifiers.length * 4, null, clickResult);", "+\t\tOS.ReleaseEvent (event [0]);", "+\t\tif ((clickResult [0] & OS.kHIModalClickIsModal) != 0) {", "+\t\t\tif ((clickResult [0] & OS.kHIModalClickAllowEvent) == 0) {", "+\t\t\t\treturn OS.noErr;", "+\t\t\t}", "+\t\t}", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0769f81400e1160f544d6d0df2b48a24", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/carbon/org/eclipse/swt/browser/MozillaDelegate.java", "commitBeforeChange": "2291cc53864300688c3a58c6df5ee259c93044d9", "commitAfterChange": "05a8cbba5a9312a46e3a6b81585ac0edaa21107d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  static int eventProc3 (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  static int eventProc3 (int nextHandler, int theEvent, int userData)", "diff": ["+\t\t\t\tint result = OS.noErr;", "-\t\t\t\tint result = OS.CallNextEventHandler (nextHandler, theEvent);", "+", "+\t\t\t\t/*", "+\t\t\t\t* Pressing the OSX shortcut to put focus into the menu bar does not work in", "+\t\t\t\t* embedded mozilla.  If this shortcut is not handled here then it falls through", "+\t\t\t\t* all of the key handlers for some reason.  The workaround is to detect this", "+\t\t\t\t* shortcut here and put focus into the menu bar.", "+\t\t\t\t*/", "+\t\t\t\tint [] modifiers = new int [1];", "+\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, modifiers.length * 4, null, modifiers);", "+\t\t\t\tint [] keyCode = new int [1];", "+\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "+\t\t\t\tif (keyCode [0] == 120 /* F2 */ && (modifiers[0] & (OS.controlKey | OS.cmdKey | OS.optionKey)) == OS.controlKey) {", "+\t\t\t\t\tint[] event = new int[1];", "+\t\t\t\t\tOS.CreateEvent (0, OS.kEventClassApplication, OS.kEventAppFocusMenuBar, 0.0, 0, event);", "+\t\t\t\t\tif (event [0] != 0) {", "+\t\t\t\t\t\tOS.SetEventParameter (event [0], OS.kEventParamKeyModifiers, OS.typeUInt32, 4, modifiers);", "+\t\t\t\t\t\tresult = OS.SendEventToEventTarget (event [0], OS.GetApplicationEventTarget ());", "+\t\t\t\t\t\tOS.ReleaseEvent (event [0]);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\t\t}", "+"]}], "num": 14678}
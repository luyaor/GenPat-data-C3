{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "795a8e007bfc9c1d9c3102154bc06ae1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b718864c04908227cc77743a8f8f9e63", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "c75fa2aaa81cd96400f0b4207d26c662b67c5bce", "commitAfterChange": "68dd096752e238c658788f5395a8c9f209d457e7", "methodNumberBeforeChange": 148, "methodNumberAfterChange": 148, "signatureBeforeChange": "  int styleSetProc (int gobject, int arg1, int user_data)", "signatureAfterChange": "  int signalProc (int gobject, int arg1, int user_data)", "diff": ["-int /*long*/ styleSetProc (int /*long*/ gobject, int /*long*/ arg1, int /*long*/ user_data) {", "-\tsettingsChanged = true;", "+int /*long*/ signalProc (int /*long*/ gobject, int /*long*/ arg1, int /*long*/ user_data) {", "+\tswitch(user_data) {", "+\t\tcase STYLE_SET:", "+\t\t\tsettingsChanged = true;", "+\t\t\tbreak;", "+\t\tcase PROPERTY_NOTIFY:", "+\t\t\tGdkEventProperty gdkEvent = new GdkEventProperty ();", "+\t\t\tOS.memmove (gdkEvent, arg1);", "+\t\t\tif (gdkEvent.type == OS.GDK_PROPERTY_NOTIFY) {", "+\t\t\t\tbyte[] name = Converter.wcsToMbcs (null, \"org.eclipse.swt.filePath.message\", true); //$NON-NLS-1$", "+\t\t\t\tint /*long*/ atom = OS.gdk_x11_atom_to_xatom (OS.gdk_atom_intern (name, true));", "+\t\t\t\tif (atom == OS.gdk_x11_atom_to_xatom (gdkEvent.atom)) {", "+\t\t\t\t\tint /*long*/ xWindow = OS.gdk_x11_drawable_get_xid (OS.GTK_WIDGET_WINDOW( shellHandle));", "+\t\t\t\t\tint /*long*/ [] type = new int /*long*/ [1];", "+\t\t\t\t\tint /*long*/ [] format = new int /*long*/ [1];", "+\t\t\t\t\tlong [] nitems = new long [1];", "+\t\t\t\t\tlong [] bytes_after = new long [1];", "+\t\t\t\t\tint /*long*/ [] data = new int /*long*/ [1];", "+\t\t\t\t\tOS.XGetWindowProperty (OS.GDK_DISPLAY (), xWindow, atom, 0l, -1l, true, OS.AnyPropertyType,", "+\t\t\t\t\t\t\ttype, format, nitems, bytes_after, data);", "+\t\t\t\t\t", "+\t\t\t\t\tif (nitems [0] > 0) {", "+\t\t\t\t\t\tbyte [] buffer = new byte [(int)/*64*/nitems [0]];", "+\t\t\t\t\t\tOS.memmove(buffer, data [0], buffer.length);", "+\t\t\t\t\t\tOS.XFree (data [0]);", "+\t\t\t\t\t\tchar[] chars = Converter.mbcsToWcs(null, buffer);", "+\t\t\t\t\t\tString string = new String (chars);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tint lastIndex = 0;", "+\t\t\t\t\t\tint index = string.indexOf (':');", "+\t\t\t\t\t\twhile (index != -1) {", "+\t\t\t\t\t\t\tString file = string.substring (lastIndex, index);", "+\t\t\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\t\t\tevent.type = SWT.OpenDoc;", "+\t\t\t\t\t\t\tevent.text = file;", "+\t\t\t\t\t\t\tpostEvent (event);", "+\t\t\t\t\t\t\tlastIndex = index+1;", "+\t\t\t\t\t\t\tindex = string.indexOf(':', lastIndex);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69dc2d2ab57875ce74c6efd196ac47fb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "b683aa10176d904b43fcc24b25f27de44d98f32a", "commitAfterChange": "db44f811fdd3778cffa3b94af6d227463daf97df", "methodNumberBeforeChange": 155, "methodNumberAfterChange": 155, "signatureBeforeChange": "  boolean setKeyState (Event event, int type, NSEvent nsEvent)", "signatureAfterChange": "  boolean setKeyState (Event event, int type, NSEvent nsEvent)", "diff": ["-\t\t\t\t//TODO this is wrong for shifted keys like ';', '1' and non-english keyboards", "-\t\t\t\tNSString unmodifiedChars = nsEvent.charactersIgnoringModifiers ().lowercaseString();", "-\t\t\t\tif (unmodifiedChars.length() > 0) event.keyCode = (char)unmodifiedChars.characterAtIndex(0);", "+\t\t\t\tint /*long*/ uchrPtr = 0;", "+\t\t\t\tint /*long*/ currentKbd = OS.TISCopyCurrentKeyboardInputSource();", "+\t\t\t\tint /*long*/ uchrCFData = OS.TISGetInputSourceProperty(currentKbd, OS.kTISPropertyUnicodeKeyLayoutData());", "+\t\t\t\t", "+\t\t\t\tif (uchrCFData != 0) {", "+\t\t\t\t\t// If the keyboard changed since the last keystroke clear the dead key state.", "+\t\t\t\t\tif (uchrCFData != display.currentKeyboardUCHRdata) display.deadKeyState[0] = 0;", "+\t\t\t\t\tuchrPtr = OS.CFDataGetBytePtr(uchrCFData);", "+\t\t\t\t\t", "+\t\t\t\t\tif (uchrPtr != 0 && OS.CFDataGetLength(uchrCFData) > 0) {", "+\t\t\t\t\t\tint /*long*/ cgEvent = nsEvent.CGEvent();", "+\t\t\t\t\t\tlong keyboardType = OS.CGEventGetIntegerValueField(cgEvent, OS.kCGKeyboardEventKeyboardType);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tint maxStringLength = 256;", "+\t\t\t\t\t\tchar [] output = new char [maxStringLength];", "+\t\t\t\t\t\tint [] actualStringLength = new int [1];", "+\t\t\t\t\t\tOS.UCKeyTranslate (uchrPtr, (short)keyCode, (short)OS.kUCKeyActionDown, 0, (int)keyboardType, 0, display.deadKeyState, maxStringLength, actualStringLength, output);", "+\t\t\t\t\t\tif (actualStringLength[0] < 1) {", "+\t\t\t\t\t\t\t// part of a multi-key key", "+\t\t\t\t\t\t\tevent.keyCode = 0;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tevent.keyCode = output[0];", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// KCHR keyboard layouts are no longer supported, so fall back to the basic but flawed", "+\t\t\t\t\t// method of determining which key was pressed.", "+\t\t\t\t\tNSString unmodifiedChars = nsEvent.charactersIgnoringModifiers ().lowercaseString();", "+\t\t\t\t\tif (unmodifiedChars.length() > 0) event.keyCode = (char)unmodifiedChars.characterAtIndex(0);", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif (currentKbd != 0) OS.CFRelease(currentKbd);"]}], "num": 36299}
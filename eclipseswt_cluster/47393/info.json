{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67ecae9c9eaa429ba17054fcc92f530b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58657d0a3abfbb51e03189d550323e61", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "9e4aa4f79d8d08d57d797296be9d3269723e755b", "commitAfterChange": "c7a37ce473beb9045c99b97900ef561257b98af2", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic NSArray internal_accessibilityParameterizedAttributeNames(int childID)", "signatureAfterChange": " \tpublic NSArray internal_accessibilityParameterizedAttributeNames(int childID)", "diff": ["+\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "+\t\tevent.childID = childID;", "+\t\tevent.detail = -1;", "+\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\tlistener.getRole(event);", "+\t\t}", "+\t\t// No accessible listener is overriding the role of the control, so let Cocoa", "+\t\t// return the default set for the control.", "+\t\tif (event.detail == -1)", "+\t\t\treturn null;", "+\t\t", "-", "-\t\tif (accessibleTextListeners.size() > 0) {", "-\t\t\tfor (int i = 0; i < baseParameterizedAttributes.length; i++) {", "-\t\t\t\tif (!returnValue.containsObject(baseParameterizedAttributes[i])) {", "-\t\t\t\t\treturnValue.addObject(baseParameterizedAttributes[i]);", "-\t\t\t\t}", "-\t\t\t}", "-", "+\t\t", "+\t\tswitch(event.detail) {", "+\t\t\tcase ACC.ROLE_TEXT:", "+\t\t\t\treturnValue.addObject(OS.NSAccessibilityStringForRangeParameterizedAttribute);", "+\t\t\t\treturnValue.addObject(OS.NSAccessibilityRangeForLineParameterizedAttribute);", "+\t\t\t\treturnValue.addObject(OS.NSAccessibilityLineForIndexParameterizedAttribute);", "+\t\t\t\treturnValue.addObject(OS.NSAccessibilityBoundsForRangeParameterizedAttribute);", "+\t\t\t\tbreak;", "+\t\t\tcase ACC.ROLE_TABLE:", "+\t\t\t\tif (OS.VERSION >= 0x1060) returnValue.addObject(OS.NSAccessibilityCellForColumnAndRowParameterizedAttribute);", "+\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a318c0c4b13290aeff7c1d56651d57b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "9e4aa4f79d8d08d57d797296be9d3269723e755b", "commitAfterChange": "c7a37ce473beb9045c99b97900ef561257b98af2", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 72, "signatureBeforeChange": " \t \tid getStringForRangeAttribute (id parameter, int childID)", "signatureAfterChange": " \t \tid getStringForRangeAttribute (id parameter, int childID)", "diff": ["-\t\tNSRange range = parameterObject.rangeValue();\t\t", "-\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "-\t\tevent.childID = childID;", "-\t\tevent.result = null;", "-\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "-\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "-\t\t\tlistener.getValue(event);", "+\t\tNSRange range = parameterObject.rangeValue();", "+\t\tif (accessibleTextExtendedListeners.size() > 0) {", "+\t\t\tAccessibleTextExtendedEvent event = new AccessibleTextExtendedEvent(this);", "+\t\t\tevent.childID = childID;", "+\t\t\tevent.start = (int) /*64*/ range.location;", "+\t\t\tevent.end = (int) /*64*/ (range.location + range.length);", "+\t\t\tevent.type = ACC.TEXT_BOUNDARY_ALL;", "+\t\t\tfor (int i = 0; i < accessibleTextExtendedListeners.size(); i++) {", "+\t\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) accessibleTextExtendedListeners.elementAt(i);", "+\t\t\t\tlistener.getText(event);", "+\t\t\t}", "+\t\t\tif (event.result != null) returnValue = NSString.stringWith(event.result);", "+\t\t} else {", "+\t\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "+\t\t\tevent.childID = childID;", "+\t\t\tevent.result = null;", "+\t\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\t\tlistener.getValue(event);", "+\t\t\t}", "+\t\t\tString appValue = event.result;", "+\t", "+\t\t\tif (appValue != null) {", "+\t\t\t\treturnValue = NSString.stringWith(appValue.substring((int)/*64*/range.location, (int)/*64*/(range.location + range.length)));", "+\t\t\t}", "-\t\tString appValue = event.result;", "-", "-\t\tif (appValue != null) {", "-\t\t\treturnValue = NSString.stringWith(appValue.substring((int)/*64*/range.location, (int)/*64*/(range.location + range.length)));", "-\t\t}", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c008332c06189aed727efd0072ec997d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 246, "methodNumberAfterChange": 246, "signatureBeforeChange": " \tpublic void textChanged (int type, int startIndex, int length)", "signatureAfterChange": " \tpublic void textChanged (int type, int startIndex, int length)", "diff": ["+\t\tAccessibleTextEvent event = new AccessibleTextEvent(this);", "+\t\tevent.start = startIndex;", "+\t\tevent.end = startIndex + length;", "+\t\tevent.count = 0;", "+\t\tevent.type = ACC.TEXT_BOUNDARY_ALL;", "+\t\tfor (int i = 0; i < accessibleTextExtendedListeners.size(); i++) {", "+\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) accessibleTextExtendedListeners.elementAt(i);", "+\t\t\tlistener.getText(event);", "+\t\t}", "+\t\tif (event.result != null) {", "+\t\t\tObject[] eventData = new Object[] {", "+\t\t\t\t\tnew Integer(type),", "+\t\t\t\t\tnew Integer(startIndex),", "+\t\t\t\t\tnew Integer(startIndex + length),", "+\t\t\t\t\tevent.result};", "+\t\t\tsendEvent(ACC.EVENT_TEXT_CHANGED, eventData);", "+\t\t\treturn;", "+\t\t}"]}], "num": 47393}
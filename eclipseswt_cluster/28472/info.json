{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f107fc92fc27e7628271aa47e09ae45", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf4a9d805c3ed1cea3dae77a05629ebd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Spinner.java", "commitBeforeChange": "fa4d0855c444aaf27093e89f13699e08ffe9104e", "commitAfterChange": "d0b78d74cada563e42efc741bdd21aaf1ce13f4f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-//\tint width = 0, height = 0;", "-//\tint max = OS.GetControl32BitMaximum (buttonHandle);", "-//\tString string = String.valueOf (max);", "-//\tif (digits > 0) {", "-//\t\tStringBuffer buffer = new StringBuffer ();", "-//\t\tbuffer.append (string);", "-//\t\tbuffer.append (getDecimalSeparator ());", "-//\t\tint count = digits - string.length ();", "-//\t\twhile (count >= 0) {", "-//\t\t\tbuffer.append (\"0\");", "-//\t\t\tcount--;", "-//\t\t}", "-//\t\tstring = buffer.toString ();", "-//\t}", "-//\tchar [] buffer = new char [string.length ()];", "-//\tstring.getChars (0, buffer.length, buffer, 0);", "-//\tint ptr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-//\tPoint size = textExtent (ptr, 0);", "-//\tif (ptr != 0) OS.CFRelease (ptr);", "-//\twidth = Math.max (width, size.x);", "-//\theight = Math.max (height, size.y);", "-//\tint [] metric = new int [1];", "-//\tOS.GetThemeMetric (OS.kThemeMetricEditTextWhitespace, metric);", "-//\twidth += metric [0] * 2;", "-//\tif (wHint != SWT.DEFAULT) width = wHint;", "-//\tif (hHint != SWT.DEFAULT) height = hHint;", "-//\tRectangle trim = computeTrim (0, 0, width, height);", "-//\tOS.GetThemeMetric (OS.kThemeMetricLittleArrowsHeight, metric);", "-//\ttrim.height = Math.max (trim.height, metric [0]);", "-//\treturn new Point (trim.width, trim.height);", "-\treturn new Point(60, 26);", "-}", "+\tfloat width = 0, height = 0;", "+\tString string = Double.toString (buttonView.maxValue ());", "+\tNSMutableDictionary dict = NSMutableDictionary.dictionaryWithCapacity (1);", "+\tdict.setObject(textView.font (), OS.NSFontAttributeName ());", "+\tint length = string.length ();", "+\tchar [] chars = new char [length];", "+\tstring.getChars (0, length, chars, 0);", "+\tNSString nsString = NSString.stringWithCharacters (chars, length);", "+\tNSAttributedString str = ((NSAttributedString) new NSAttributedString ().alloc ()).initWithString_attributes_ (nsString, dict);", "+\tNSSize size = str.size ();", "+\tstr.release ();", "+\twidth = size.width;", "+\theight = size.height;", "+\tNSRect frameRect = textView.frame();", "+\tNSCell cell = new NSCell (textView.cell ());", "+\tNSRect cellRect = cell.drawingRectForBounds(frameRect);", "+\twidth += frameRect.width - cellRect.width;", "+\theight += frameRect.height - cellRect.height;", "+\twidth += GAP;", "+\tNSRect oldRect = buttonView.frame ();", "+\tNSRect newRect = buttonView.frame ();", "+\tbuttonView.setFrame (oldRect);", "+\twidth += newRect.width;", "+\theight = Math.max (height, newRect.height);", "+\tif (wHint != SWT.DEFAULT) width = wHint;", "+\tif (hHint != SWT.DEFAULT) height = hHint;", "+\tRectangle trim = computeTrim (0, 0, (int) width, (int) height);", "+\treturn new Point (trim.width, trim.height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dbbba17a93441e8ccef56471e58f450", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 203, "methodNumberAfterChange": 53, "signatureBeforeChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tint count, width, height;", "-\t", "-\tif (singleLine) {", "-\t\tcount = 1;", "-\t} else {", "-\t\tcount = content.getLineCount();", "-\t}", "-\tif (wHint != SWT.DEFAULT) {", "-\t\twidth = wHint;", "-\t} ", "-\telse {", "-\t\twidth = DEFAULT_WIDTH;", "-\t}", "-\tif (wHint == SWT.DEFAULT) {", "-\t\tLineCache computeLineCache = lineCache;", "-\t\tif (wordWrap) {", "-\t\t\t// set non-wrapping content width calculator. Ensures ideal line width ", "-\t\t\t// that does not required wrapping. Fixes bug 31195.", "-\t\t\tcomputeLineCache = new ContentWidthCache(this, logicalContent);", "-\t\t\tif (!singleLine) {", "-\t\t\t\tcount = logicalContent.getLineCount();", "+\tint lineCount = singleLine ? 1 : content.getLineCount();", "+\tint width = 0;", "+\tint height = 0;", "+\tif (wHint == SWT.DEFAULT || hHint == SWT.DEFAULT) {", "+\t\tDisplay display = getDisplay();", "+\t\tint maxHeight = display.getClientArea().height;", "+\t\tint lineIndex = 0;", "+\t\twhile (lineIndex < lineCount && height < maxHeight) {", "+\t\t\tTextLayout layout = renderer.getTextLayout(lineIndex);", "+\t\t\tif (wordWrap) {", "+\t\t\t\tlayout.setWidth(wHint);", "+\t\t\tRectangle rect = layout.getBounds();", "+\t\t\theight += rect.height;", "+\t\t\twidth = Math.max(width, rect.width);", "+\t\t\trenderer.disposeTextLayout(layout);", "+\t\t\tlineIndex++;", "-\t\t// Only calculate what can actually be displayed.", "-\t\t// Do this because measuring each text line is a ", "-\t\t// time-consuming process.", "-\t\tint visibleCount = Math.min (count, getDisplay().getBounds().height / lineHeight);", "-\t\tcomputeLineCache.calculate(0, visibleCount);", "-\t\twidth = computeLineCache.getWidth() + leftMargin + rightMargin;", "-\t}", "-\telse", "-\tif (wordWrap && !singleLine) {", "-\t\t// calculate to wrap to width hint. Fixes bug 20377. ", "-\t\t// don't wrap live content. Fixes bug 38344.", "-\t\tWrappedContent wrappedContent = new WrappedContent(renderer, logicalContent);", "-\t\twrappedContent.wrapLines(width);", "-\t\tcount = wrappedContent.getLineCount();", "-\t}", "-\tif (hHint != SWT.DEFAULT) {", "-\t\theight = hHint;", "-\t} ", "-\telse {", "-\t\theight = count * lineHeight + topMargin + bottomMargin;", "-\tif (width == 0) {", "-\t\twidth = DEFAULT_WIDTH;", "-\t}", "-\tif (height == 0) {", "-\t\tif (singleLine) {", "-\t\t\theight = lineHeight;", "-\t\t}", "-\t\telse {", "-\t\t\theight = DEFAULT_HEIGHT;", "-\t\t}", "-\t}", "-\tRectangle rect = computeTrim(0, 0, width, height);", "+\tif (width == 0) width = DEFAULT_WIDTH;", "+\tif (height == 0) height = DEFAULT_HEIGHT;", "+\tif (wHint != SWT.DEFAULT) width = wHint;", "+\tif (hHint != SWT.DEFAULT) height = hHint;", "+\tint wTrim = leftMargin + rightMargin + getCaretWidth();", "+\tint hTrim = topMargin + bottomMargin;", "+\tRectangle rect = computeTrim(0, 0, width + wTrim, height + hTrim);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9401cc7b8ffc8fa2f6ea1d06fed30b0a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "1a6a47fd4cb07a565544aa8caf7003382a6b00f3", "commitAfterChange": "375107332fc5402c59bbea222825730a86b9abf8", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tint count = singleLine ? 1 : content.getLineCount();", "-\tint width = wHint;", "-\t//TODO rewrite computeSize", "-\tif (wHint == SWT.DEFAULT) {", "-//\t\tLineCache computeLineCache = lineCache;", "-//\t\tif (wordWrap) {", "-//\t\t\t// set non-wrapping content width calculator. Ensures ideal line width ", "-//\t\t\t// that does not required wrapping. Fixes bug 31195.", "-//\t\t\tcomputeLineCache = new ContentWidthCache(this, logicalContent);", "-//\t\t\tif (!singleLine) {", "-//\t\t\t\tcount = logicalContent.getLineCount();", "-//\t\t\t}", "-//\t\t}", "-//\t\t// Only calculate what can actually be displayed.", "-//\t\t// Do this because measuring each text line is a ", "-//\t\t// time-consuming process.", "-//\t\tint visibleCount = Math.min (count, getDisplay().getBounds().height / lineHeight);", "-//\t\tcomputeLineCache.calculate(0, visibleCount);", "-//\t\twidth = computeLineCache.getWidth() + leftMargin + rightMargin;", "-//\t} else if (wordWrap && !singleLine) {", "-//\t\t// calculate to wrap to width hint. Fixes bug 20377. ", "-//\t\t// don't wrap live content. Fixes bug 38344.", "-//\t\tWrappedContent2 wrappedContent = new WrappedContent2(renderer, logicalContent);", "-//\t\twrappedContent.wrapLines(width);", "-//\t\tcount = wrappedContent.getLineCount();", "-\t}", "-\tint height;", "-\tif (hHint != SWT.DEFAULT) {", "-\t\theight = hHint;", "-\t} else {", "-\t\theight = count * lineHeight + topMargin + bottomMargin;", "+\tint lineCount = singleLine ? 1 : content.getLineCount();", "+\tint width = 0;", "+\tint height = 0;", "+\tif (wHint == SWT.DEFAULT || hHint == SWT.DEFAULT) {", "+\t\tDisplay display = getDisplay();", "+\t\tint maxHeight = display.getClientArea().height;", "+\t\tint lineIndex = 0;", "+\t\twhile (lineIndex < lineCount && height < maxHeight) {", "+\t\t\tint lineOffset = content.getOffsetAtLine(lineIndex);", "+\t\t\tString line = content.getLine(lineIndex);", "+\t\t\tTextLayout layout = renderer.getTextLayout(line, lineOffset);", "+\t\t\tif (wordWrap) {", "+\t\t\t\tlayout.setWidth(wHint);", "+\t\t\t}", "+\t\t\tRectangle rect = layout.getBounds();", "+\t\t\theight += rect.height;", "+\t\t\twidth = Math.max(width, rect.width);", "+\t\t\trenderer.disposeTextLayout(layout);", "+\t\t\tlineIndex++;", "+\t\t}", "-\tif (width == 0)\twidth = DEFAULT_WIDTH;", "-\tif (height == 0) height = singleLine ? lineHeight : DEFAULT_HEIGHT;", "-\tRectangle rect = computeTrim(0, 0, width, height);", "+\tif (width == 0) width = DEFAULT_WIDTH;", "+\tif (height == 0) height = DEFAULT_HEIGHT;", "+\tif (wHint != SWT.DEFAULT) width = wHint;", "+\tif (hHint != SWT.DEFAULT) height = hHint;", "+\tint wTrim = leftMargin + rightMargin + getCaretWidth();", "+\tint hTrim = topMargin + bottomMargin;", "+\tRectangle rect = computeTrim(0, 0, width + wTrim, height + hTrim);"]}], "num": 28472}
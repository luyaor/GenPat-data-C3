{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b5f611e6b4325726ca794ed9afd8435f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8328a9a0d1fcabe5351303bc2b593e65", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "683530eeba436413425ed23ff7ebcc1f75ca9b81", "commitAfterChange": "c6693daac69fdac02f880b4c10b8219d9b330161", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 48, "signatureBeforeChange": "  void generateSends()", "signatureAfterChange": "  void generateSends()", "diff": ["+", "+\tHashSet tagsSet = new HashSet();", "-\t\t\t\t\t\t\t\tNode returnNode = getReturnNode(method.getChildNodes());", "-\t\t\t\t\t\t\t\tStringBuffer buffer = new StringBuffer();", "-\t\t\t\t\t\t\t\tbuffer.append(\"public static final native \"); ", "-\t\t\t\t\t\t\t\tif (returnNode != null && isStruct(returnNode)) {", "-\t\t\t\t\t\t\t\t\tbuffer.append(\"void objc_msgSend_stret(\");", "-\t\t\t\t\t\t\t\t\tbuffer.append(getJavaType(returnNode));", "-\t\t\t\t\t\t\t\t\tbuffer.append(\" result, \");", "-\t\t\t\t\t\t\t\t} else if (returnNode != null && isFloatingPoint(returnNode)) {", "-\t\t\t\t\t\t\t\t\tbuffer.append(\"double objc_msgSend_fpret(\");", "+\t\t\t\t\t\t\t\tString code = buildSend(method, false, false);", "+\t\t\t\t\t\t\t\tString codeTags = buildSend(method, true, false);", "+\t\t\t\t\t\t\t\tif (set.contains(code) && !tagsSet.contains(codeTags)) {", "+\t\t\t\t\t\t\t\t\tString code64 = buildSend(method, false, true);", "+\t\t\t\t\t\t\t\t\ttagsSet.add(code64);", "-\t\t\t\t\t\t\t\t\tbuffer.append(\"int objc_msgSend(\");", "+\t\t\t\t\t\t\t\t\ttagsSet.add(codeTags);", "-\t\t\t\t\t\t\t\tbuffer.append(\"int id, int sel\");", "-\t\t\t\t\t\t\t\tNodeList params = method.getChildNodes();", "-\t\t\t\t\t\t\t\tboolean first = false;", "-\t\t\t\t\t\t\t\tint count = 0;", "-\t\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "-\t\t\t\t\t\t\t\t\tNode param = params.item(k);", "-\t\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "-\t\t\t\t\t\t\t\t\t\tif (!first) buffer.append(\", \");", "-\t\t\t\t\t\t\t\t\t\tif (isStruct(param)) {", "-\t\t\t\t\t\t\t\t\t\t\tbuffer.append(getJavaType(param));", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tbuffer.append(getType(param));", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tfirst = false;", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(\" arg\");", "-\t\t\t\t\t\t\t\t\t\tbuffer.append(String.valueOf(count++));", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbuffer.append(\");\");", "-\t\t\t\t\t\t\t\tset.add(buffer.toString());", "+\t\t\t\t\t\t\t\tset.add(code);", "-\tfor (Iterator iterator = set.iterator(); iterator.hasNext();) {", "+\tfor (Iterator iterator = tagsSet.iterator(); iterator.hasNext();) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39115b6cd6033a7dc935c5473343e455", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "59447a1923b1252d62656622d6666900d696c50d", "commitAfterChange": "0ea92b64c1d5ed49d057d55bd33c4fd1813b7dae", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": " public void setImage (Image image)", "signatureAfterChange": " public void setImage (Image image)", "diff": ["+\tif (icon != null) icon.dispose ();", "+\ticon = null;", "-\t\tif (hIcon != 0) OS.DestroyIcon (hIcon);", "-\t\thIcon = 0;", "-\t\t\t\t/* Copy the bitmap in case it's a DIB */", "-\t\t\t\tint hBitmap = image.handle;", "-\t\t\t\tBITMAP bm = new BITMAP ();", "-\t\t\t\tOS.GetObject (hBitmap, BITMAP.sizeof, bm);", "-\t\t\t\tbyte [] lpvBits = new byte [(bm.bmWidth + 15) / 16 * 2 * bm.bmHeight];", "-\t\t\t\tint hMask = OS.CreateBitmap (bm.bmWidth, bm.bmHeight, 1, 1, lpvBits);", "-\t\t\t\tint hDC = OS.GetDC (handle);", "-\t\t\t\tint hdcMem = OS.CreateCompatibleDC (hDC);", "-\t\t\t\tint hColor = OS.CreateCompatibleBitmap (hDC, bm.bmWidth, bm.bmHeight);", "-\t\t\t\tOS.SelectObject (hdcMem, hColor);", "-\t\t\t\tint hdcBmp = OS.CreateCompatibleDC (hDC);", "-\t\t\t\tOS.SelectObject (hdcBmp, hBitmap);", "-\t\t\t\tOS.BitBlt (hdcMem, 0, 0, bm.bmWidth, bm.bmHeight, hdcBmp, 0, 0, OS.SRCCOPY);", "-\t\t\t\tICONINFO info = new ICONINFO ();", "-\t\t\t\tinfo.fIcon = true;", "-\t\t\t\tinfo.hbmMask = hMask;", "-\t\t\t\tinfo.hbmColor = hColor;", "-\t\t\t\thImage = hIcon = OS.CreateIconIndirect (info);", "-\t\t\t\tOS.DeleteObject (hMask);", "-\t\t\t\tOS.DeleteObject(hColor);", "-\t\t\t\tOS.DeleteDC (hdcBmp);", "-\t\t\t\tOS.DeleteDC (hdcMem);", "-\t\t\t\tOS.ReleaseDC (handle, hDC);", "+\t\t\t\tImageData data = image.getImageData ();", "+\t\t\t\tImageData mask = data.getTransparencyMask ();", "+\t\t\t\ticon = new Image (display, data, mask);", "+\t\t\t\thImage = icon.handle;", "-\t\tif (hIcon == 0 && (style & SWT.BORDER) != 0) {", "+\t\tif (icon == null && (style & SWT.BORDER) != 0) {"]}], "num": 61877}
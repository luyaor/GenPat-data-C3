{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "605928e1cc79a9852ae4fc5e7cd40859", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40562f3c74a433573d034f3d8696eda7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "0ef9617c1012a47a6d1ff1554f6abcb04cfa36ad", "commitAfterChange": "26cde76ce3c88c1f3b47c43e3bb62261f679e704", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  private int dragTrackingHandler(int message, int theWindow, int handlerRefCon, int theDrag)", "signatureAfterChange": "  private int dragTrackingHandler(int message, int theWindow, int handlerRefCon, int theDrag)", "diff": ["-\tif (message == OS.kDragTrackingEnterWindow) {", "-\t\tlastOperation = -1;", "-\t\tdataTypes = null;", "+\t", "+\tif (message == OS.kDragTrackingLeaveWindow) {", "+\t\tupdateDragOverHover(0, null);", "+\t\teffect.show(DND.FEEDBACK_NONE, 0, 0);", "+\t\tOS.SetThemeCursor(OS.kThemeArrowCursor);", "+\t\tif (keyOperation == -1) return OS.noErr;", "+\t\tkeyOperation = -1;", "+\t\t", "+\t\tDNDEvent event = new DNDEvent();", "+\t\tevent.widget = this;", "+\t\tevent.time = (int)System.currentTimeMillis();", "+\t\tevent.detail = DND.DROP_NONE;", "+\t\ttry {", "+\t\t\tnotifyListeners(DND.DragLeave, event);", "+\t\t} catch (Throwable e) {}", "+\t\treturn OS.noErr;", "+\tint oldKeyOperation = keyOperation;", "+\t", "-\tsetEventData(theDrag, event);", "-", "-\tif (event.operations == 0 || event.dataTypes == null || event.dataTypes.length == 0) {", "-\t\tif (message == OS.kDragTrackingLeaveWindow) {", "-\t\t\tOS.SetThemeCursor(OS.kThemeArrowCursor);", "-\t\t} else {", "-\t\t\tOS.SetThemeCursor(OS.kThemeNotAllowedCursor);", "-\t\t}", "+\tif (!setEventData(theDrag, event)) {", "+\t\tOS.SetThemeCursor(OS.kThemeNotAllowedCursor);", "-\tTransferData[] allowedTypes = event.dataTypes;", "+\tTransferData[] allowedDataTypes = new TransferData[event.dataTypes.length];", "+\tSystem.arraycopy(event.dataTypes, 0, allowedDataTypes, 0, allowedDataTypes.length);", "-\t\t\tlastOperation = event.detail;", "+\t\t\tselectedDataType = null;", "+\t\t\tselectedOperation = 0;", "-\t\t\tif (lastOperation != event.detail) {", "+\t\t\tevent.dataType = selectedDataType;", "+\t\t\tif (keyOperation != oldKeyOperation) {", "-\t\t\t\tlastOperation = event.detail;", "-\t\t\tevent.dataType = selectedDataType;", "-\t\tcase OS.kDragTrackingLeaveWindow: {", "-\t\t\tevent.type = DND.DragLeave;", "-\t\t\tevent.detail = DND.DROP_NONE;", "-\t\t\tbreak;", "-\t\t}", "+\t", "+\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);", "-\t\tevent.detail = DND.DROP_NONE;", "-\t\tevent.dataType = null;", "+\t\tOS.SetThemeCursor(OS.kThemeNotAllowedCursor);", "+\t\treturn OS.dragNotAcceptedErr;", "-\t\tevent.detail = DND.DROP_MOVE;", "+\t\tevent.detail = (allowedOperations & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;", "-\t\tfor (int i = 0; i < allowedTypes.length; i++) {", "-\t\t\tif (allowedTypes[i].type == event.dataType.type) {", "-\t\t\t\tselectedDataType = event.dataType;", "+\t\tfor (int i = 0; i < allowedDataTypes.length; i++) {", "+\t\t\tif (allowedDataTypes[i].type == event.dataType.type) {", "+\t\t\t\tselectedDataType = allowedDataTypes[i];", "-\tif (selectedDataType != null && (event.detail & allowedOperations) != 0) {", "+\tif (selectedDataType != null && (allowedOperations & event.detail) != 0) {", "-\tswitch (message) {", "-\t\tcase OS.kDragTrackingEnterWindow:", "-\t\t\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);", "-\t\t\tdragOverHeartbeat.run();", "-\t\t\teffect.show(event.feedback, event.x, event.y);", "-\t\t\tbreak;", "-\t\tcase OS.kDragTrackingInWindow:", "-\t\t\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);", "-\t\t\teffect.show(event.feedback, event.x, event.y);", "-\t\t\tbreak;", "-\t\tcase OS.kDragTrackingLeaveWindow: {", "-\t\t\tupdateDragOverHover(0, null);", "-\t\t\teffect.show(DND.FEEDBACK_NONE, 0, 0);", "-\t\t\tOS.SetThemeCursor(OS.kThemeArrowCursor);", "-\t\t\treturn OS.noErr;", "-\t\t}", "-\t}", "-\t", "-\t", "+\teffect.show(event.feedback, event.x, event.y);", "+", "+  \tif (message == OS.kDragTrackingEnterWindow) {", "+\t\tdragOverHeartbeat.run();\t\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fb950c043339caf75652fb469051468", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "4b10f2a3a24e7037b13a6b21d0386bf976be739d", "commitAfterChange": "616f5a4d963ffa9e332b664b81207bb1f17d8c21", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  int dragMotion ( int widget, int context, int x, int y, int time)", "signatureAfterChange": "  private int drag_motion ( int widget, int context, int x, int y, int time)", "diff": ["-int dragMotion ( int widget, int context, int x, int y, int time){", "+private int drag_motion ( int widget, int context, int x, int y, int time){", "+\tint oldKeyOperation = keyOperation;", "+\t", "+\t\tkeyOperation = -1;", "+\t", "-\tTransferData[] allowedTypes = event.dataTypes;", "-\t\t", "-\tif (event.detail == DND.DROP_DEFAULT && (getStyle() & DND.DROP_DEFAULT) == 0) {", "-\t\tif ((allowedOperations & DND.DROP_MOVE) != 0) {", "-\t\t\tevent.detail = DND.DROP_MOVE;", "+\tTransferData[] allowedDataTypes = new TransferData[event.dataTypes.length];", "+\tSystem.arraycopy(event.dataTypes, 0, allowedDataTypes, 0, allowedDataTypes.length);", "+", "+\tif (oldKeyOperation == -1) {", "+\t\tselectedDataType = null;", "+\t\tselectedOperation = DND.DROP_NONE;", "+\t\tevent.type = DND.DragEnter;", "+\t} else {", "+\t\tevent.dataType = selectedDataType;", "+\t\tif (keyOperation == oldKeyOperation) {", "+\t\t\tevent.type = DND.DragOver;", "+\t\t\tevent.detail = selectedOperation;", "-\t\t\tevent.detail = DND.DROP_NONE;", "+\t\t\tevent.type = DND.DragOperationChanged;", "-", "-\tif (lastOperation == -1) {", "-\t\t\tevent.type = DND.DragEnter;", "-\t\t\tint atom = OS.gtk_drag_dest_find_target(control.handle, context, 0);", "-\t\t\tif (atom == 0) {", "-\t\t\t\tOS.gdk_drag_status(context, 0, time);", "-\t\t\t\treturn 0;", "-\t\t\t}", "-\t\t\tevent.dataType = new TransferData();", "-\t\t\tevent.dataType.type = atom;", "-\t\t\tlastOperation = event.detail;", "-\t} else {", "-\t\t\tif (lastOperation != event.detail) {", "-\t\t\t\tevent.type = DND.DragOperationChanged;", "-\t\t\t\tlastOperation = event.detail;", "-\t\t\t} else {", "-\t\t\t\tevent.type = DND.DragOver;", "-\t\t\t\tevent.detail = selectedOperation;", "-\t\t\t}", "-\t\t\tevent.dataType = selectedDataType;", "-\t}", "-\tevent.feedback = DND.FEEDBACK_SELECT;", "-\t\tevent.detail = DND.DROP_NONE;", "-\t\tevent.dataType = null;", "+\t\tOS.gdk_drag_status(context, 0, time);", "+\t\treturn 0;", "-\t\tevent.detail = DND.DROP_MOVE;", "+\t\tevent.detail = (allowedOperations & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;", "-\t\tfor (int i = 0; i < allowedTypes.length; i++) {", "-\t\t\tif (allowedTypes[i].type == event.dataType.type) {", "+\t\tfor (int i = 0; i < allowedDataTypes.length; i++) {", "+\t\t\tif (allowedDataTypes[i].type == event.dataType.type) {", "-\tif (selectedDataType != null && (event.detail & allowedOperations) != 0) {", "+\tif (selectedDataType != null && (allowedOperations & event.detail) != 0) {", "+\t"]}], "num": 26151}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "871891ef717a7e8a899eb0b1bbd83777", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0b2fcc103cb6de5613f97dd9b5462b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleClientSite.java", "commitBeforeChange": "da194abf36dfeaf1cef432501bc0d6c396c87dde", "commitAfterChange": "21af898a5d6ec508de2042508e5800867bc3cbcd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public OleClientSite(Composite parent, int style, String progId, File file)", "signatureAfterChange": " public OleClientSite(Composite parent, int style, String progId, File file)", "diff": ["-\t", "-", "-\t\tif (file == null || file.isDirectory() || !file.exists())", "-\t\t\tOLE.error(OLE.ERROR_INVALID_ARGUMENT);", "-\t\t\t", "+\t\tif (file == null || file.isDirectory() || !file.exists()) OLE.error(OLE.ERROR_INVALID_ARGUMENT);\t\t\t\t", "-\t\t\t// use default mechanism", "-\t\t\t// Open a temporary storage object", "+\t\t\t// Using the same application that created file, therefore, use default mechanism.", "-", "-\t\t\tif (result != COM.S_OK)", "-\t\t\t\tOLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-", "+\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t\t// use a conversion mechanism", "+\t\t\t// Not using the same application that created file, therefore, copy from original file to a new storage file", "+\t\t\tIStorage storage = null;", "+\t\t\tif (COM.StgIsStorageFile(fileName) == COM.S_OK) {", "+\t\t\t\tint[] address = new int[1];", "+\t\t\t\tint mode = COM.STGM_READ | COM.STGM_TRANSACTED | COM.STGM_SHARE_EXCLUSIVE;", "+\t\t\t\tint result = COM.StgOpenStorage(fileName, 0, mode, 0, 0, address); //Does an AddRef if successful", "+\t\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "+\t\t\t\tstorage = new IStorage(address[0]);", "+\t\t\t} else {", "+\t\t\t\t// Original file is not a Storage file so copy contents to a stream in a new storage file", "+\t\t\t\tint[] address = new int[1];", "+\t\t\t\tint mode = COM.STGM_READWRITE | COM.STGM_DIRECT | COM.STGM_SHARE_EXCLUSIVE | COM.STGM_CREATE;", "+\t\t\t\tint result = COM.StgCreateDocfile(null, mode | COM.STGM_DELETEONRELEASE, 0, address); // Increments ref count if successful", "+\t\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "+\t\t\t\tstorage = new IStorage(address[0]);", "+\t\t\t\t// Create a stream on the storage object.", "+\t\t\t\t// Word does not follow the standard and does not use \"CONTENTS\" as the name of", "+\t\t\t\t// its primary stream", "+\t\t\t\tString streamName = \"CONTENTS\"; //$NON-NLS-1$", "+\t\t\t\tGUID wordGUID = getClassID(WORDPROGID);", "+\t\t\t\tif (COM.IsEqualGUID(appClsid, wordGUID)) streamName = \"WordDocument\"; //$NON-NLS-1$", "+\t\t\t\taddress = new int[1];", "+\t\t\t\tresult = storage.CreateStream(streamName, mode, 0, 0, address); // Increments ref count if successful", "+\t\t\t\tif (result != COM.S_OK) {", "+\t\t\t\t\tstorage.Release();", "+\t\t\t\t\tOLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "+\t\t\t\t}", "+\t\t\t\tIStream stream = new IStream(address[0]);", "+\t\t\t\ttry {", "+\t\t\t\t\t// Copy over data in file to named stream", "+\t\t\t\t\tFileInputStream fileInput = new FileInputStream(file);", "+\t\t\t\t\tint increment = 1024*4;", "+\t\t\t\t\tbyte[] buffer = new byte[increment];", "+\t\t\t\t\tint count = 0;", "+\t\t\t\t\twhile((count = fileInput.read(buffer)) > 0){", "+\t\t\t\t\t\tint pv = COM.CoTaskMemAlloc(count);", "+\t\t\t\t\t\tOS.MoveMemory(pv, buffer, count);", "+\t\t\t\t\t\tresult = stream.Write(pv, count, null) ;", "+\t\t\t\t\t\tCOM.CoTaskMemFree(pv);", "+\t\t\t\t\t\tif (result != COM.S_OK) {", "+\t\t\t\t\t\t\tfileInput.close();", "+\t\t\t\t\t\t\tstream.Release();", "+\t\t\t\t\t\t\tstorage.Release();", "+\t\t\t\t\t\t\tOLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tfileInput.close();", "+\t\t\t\t\tstream.Commit(COM.STGC_DEFAULT);", "+\t\t\t\t\tstream.Release();", "+\t\t\t\t} catch (IOException err) {", "+\t\t\t\t\tstream.Release();", "+\t\t\t\t\tstorage.Release();", "+\t\t\t\t\tOLE.error(OLE.ERROR_CANNOT_OPEN_FILE);", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t// Word does not follow the standard and does not use \"CONTENTS\" as the name of", "-\t\t\t// its primary stream", "-\t\t\tString contentStream = \"CONTENTS\"; //$NON-NLS-1$", "-\t\t\tGUID wordGUID = getClassID(WORDPROGID);", "-\t\t\tif (COM.IsEqualGUID(appClsid, wordGUID)) contentStream = \"WordDocument\"; //$NON-NLS-1$", "-", "-\t\t\t// Copy over the contents of the file into a new temporary storage object", "-\t\t\tOleFile oleFile = new OleFile(file, contentStream, OleFile.READ);", "-\t\t\tIStorage storage = oleFile.getRootStorage();", "-\t\t\tstorage.AddRef();", "-\t\t\tif (result != COM.S_OK)", "-\t\t\t\tOLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "-\t\t\toleFile.dispose();", "+\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "-\t\t\tif (result != COM.S_OK){\t\t", "-\t\t\t\ttempStorage.Release();", "-\t\t\t\tOLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t\t}", "+\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-", "-\t\t\tif (result != COM.S_OK){", "-\t\t\t\ttempStorage.Release();", "-\t\t\t\tobjIUnknown.Release();", "-\t\t\t\tOLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t\t}", "+\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-", "-\t\t\tif (result != COM.S_OK){", "-\t\t\t\ttempStorage.Release();", "-\t\t\t\ttempStorage = null;", "-\t\t\t\tobjIUnknown.Release();", "-\t\t\t\tobjIUnknown = null;", "-\t\t\t\tOLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t\t}", "+\t\t\tif (result != COM.S_OK)OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bb451fa271ec83e614ba8d0f4f94a42", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleClientSite.java", "commitBeforeChange": "dd0862c01e9b993d658b395af820f586129ec8a1", "commitAfterChange": "7f2ab38fb4043d4a5bb5f2320fea53804d91ff7f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public OleClientSite(Composite parent, int style, String progId, File file)", "signatureAfterChange": " public OleClientSite(Composite parent, int style, String progId, File file)", "diff": ["-\t\tif (COM.IsEqualGUID(appClsid, fileClsid)){", "-\t\t\t// Using the same application that created file, therefore, use default mechanism.", "-\t\t\ttempStorage = createTempStorage();", "-\t\t\t// Create ole object with storage object", "-\t\t\tint /*long*/[] address = new int /*long*/[1];", "-\t\t\tint result = COM.OleCreateFromFile(appClsid, fileName, COM.IIDIUnknown, COM.OLERENDER_DRAW, null, iOleClientSite.getAddress(), tempStorage.getAddress(), address);", "-\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t\tobjIUnknown = new IUnknown(address[0]);", "-\t\t} else {", "-\t\t\t// Not using the same application that created file, therefore, copy from original file to a new storage file", "-\t\t\tIStorage storage = null;", "-\t\t\tif (COM.StgIsStorageFile(fileName) == COM.S_OK) {", "-\t\t\t\tint /*long*/[] address = new int /*long*/[1];", "-\t\t\t\tint mode = COM.STGM_READ | COM.STGM_TRANSACTED | COM.STGM_SHARE_EXCLUSIVE;", "-\t\t\t\tint result = COM.StgOpenStorage(fileName, 0, mode, 0, 0, address); //Does an AddRef if successful", "-\t\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "-\t\t\t\tstorage = new IStorage(address[0]);", "-\t\t\t} else {", "-\t\t\t\t// Original file is not a Storage file so copy contents to a stream in a new storage file", "-\t\t\t\tint /*long*/[] address = new int /*long*/[1];", "-\t\t\t\tint mode = COM.STGM_READWRITE | COM.STGM_DIRECT | COM.STGM_SHARE_EXCLUSIVE | COM.STGM_CREATE;", "-\t\t\t\tint result = COM.StgCreateDocfile(null, mode | COM.STGM_DELETEONRELEASE, 0, address); // Increments ref count if successful", "-\t\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "-\t\t\t\tstorage = new IStorage(address[0]);", "-\t\t\t\t// Create a stream on the storage object.", "-\t\t\t\t// Word does not follow the standard and does not use \"CONTENTS\" as the name of", "-\t\t\t\t// its primary stream", "-\t\t\t\tString streamName = \"CONTENTS\"; //$NON-NLS-1$", "-\t\t\t\tGUID wordGUID = getClassID(WORDPROGID);", "-\t\t\t\tif (wordGUID != null && COM.IsEqualGUID(appClsid, wordGUID)) streamName = \"WordDocument\"; //$NON-NLS-1$", "-\t\t\t\taddress = new int /*long*/[1];", "-\t\t\t\tresult = storage.CreateStream(streamName, mode, 0, 0, address); // Increments ref count if successful", "-\t\t\t\tif (result != COM.S_OK) {", "-\t\t\t\t\tstorage.Release();", "-\t\t\t\t\tOLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "-\t\t\t\t}", "-\t\t\t\tIStream stream = new IStream(address[0]);", "-\t\t\t\ttry {", "-\t\t\t\t\t// Copy over data in file to named stream", "-\t\t\t\t\tFileInputStream fileInput = new FileInputStream(file);", "-\t\t\t\t\tint increment = 1024*4;", "-\t\t\t\t\tbyte[] buffer = new byte[increment];", "-\t\t\t\t\tint count = 0;", "-\t\t\t\t\twhile((count = fileInput.read(buffer)) > 0){", "-\t\t\t\t\t\tint /*long*/ pv = COM.CoTaskMemAlloc(count);", "-\t\t\t\t\t\tOS.MoveMemory(pv, buffer, count);", "-\t\t\t\t\t\tresult = stream.Write(pv, count, null) ;", "-\t\t\t\t\t\tCOM.CoTaskMemFree(pv);", "-\t\t\t\t\t\tif (result != COM.S_OK) {", "-\t\t\t\t\t\t\tfileInput.close();", "-\t\t\t\t\t\t\tstream.Release();", "-\t\t\t\t\t\t\tstorage.Release();", "-\t\t\t\t\t\t\tOLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tfileInput.close();", "-\t\t\t\t\tstream.Commit(COM.STGC_DEFAULT);", "-\t\t\t\t\tstream.Release();", "-\t\t\t\t} catch (IOException err) {", "-\t\t\t\t\tstream.Release();", "-\t\t\t\t\tstorage.Release();", "-\t\t\t\t\tOLE.error(OLE.ERROR_CANNOT_OPEN_FILE);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\t// Open a temporary storage object", "-\t\t\ttempStorage = createTempStorage();", "-\t\t\t// Copy over contents of file", "-\t\t\tint result = storage.CopyTo(0, null, null, tempStorage.getAddress());", "-\t\t\tstorage.Release();", "-\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "-", "-\t\t\t// create ole client", "-\t\t\tint /*long*/[] ppv = new int /*long*/[1];", "-\t\t\tresult = COM.CoCreateInstance(appClsid, 0, COM.CLSCTX_INPROC_HANDLER | COM.CLSCTX_INPROC_SERVER, COM.IIDIUnknown, ppv);", "-\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t\tobjIUnknown = new IUnknown(ppv[0]);", "-\t\t\t// get the persistent storage of the ole client", "-\t\t\tppv = new int /*long*/[1];", "-\t\t\tresult = objIUnknown.QueryInterface(COM.IIDIPersistStorage, ppv);", "-\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t\tIPersistStorage iPersistStorage = new IPersistStorage(ppv[0]);", "-\t\t\t// load the contents of the file into the ole client site", "-\t\t\tresult = iPersistStorage.Load(tempStorage.getAddress());", "-\t\t\tiPersistStorage.Release();", "-\t\t\tif (result != COM.S_OK)OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t}", "-\t\t", "-\t\t// Init sinks", "-\t\taddObjectReferences();", "-\t\t", "-\t\tif (COM.OleRun(objIUnknown.getAddress()) == OLE.S_OK) state = STATE_RUNNING;", "-\t\t", "+\t\tOleCreate(appClsid, fileClsid, fileName, file);", "+}"]}], "num": 12424}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c4582e6726cdb54319a0ace4d1dbd32", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "744729044a97bd88ea7c14b89ebaed58", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ec0f35229704d59e8a0e8d08c5de254e59e57d5b", "commitAfterChange": "520d1ed0b907299aeb948cdb51785c50502c0827", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " void onPaint (Event event)", "signatureAfterChange": " void onPaint (Event event)", "diff": ["-\t/* Determine the TreeItems to be painted */", "+\t/* Determine the items to be painted */", "-\tfor (int i = startIndex; i <= endIndex; i++) {", "-\t\tTreeItem item = availableItems [i];", "-\t\tif (startColumn == -1) {", "-\t\t\t/* indicates that region to paint is to the right of the last column */", "-\t\t\titem.paint (gc, null, false);", "-\t\t} else {", "-\t\t\tif (numColumns == 0) {", "-\t\t\t\titem.paint (gc, null, true);", "-\t\t\t} else {", "-\t\t\t\tfor (int j = startColumn; j <= endColumn; j++) {", "-\t\t\t\t\titem.paint (gc, orderedColumns [j], true);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+\t", "+\t/* paint the items */", "+\tboolean noFocusDraw = false;", "+\tint[] lineDash = gc.getLineDash ();", "+\tfor (int i = startIndex; i <= Math.min (endIndex, availableItemsCount - 1); i++) {", "+\t\tTreeItem item = availableItems [i];", "+\t\tif (!item.isDisposed ()) {\t/* ensure that item was not disposed in a callback */", "+\t\t\tif (startColumn == -1) {", "+\t\t\t\t/* indicates that region to paint is to the right of the last column */", "+\t\t\t\tnoFocusDraw = item.paint (gc, null, true) || noFocusDraw;", "+\t\t\t} else {", "+\t\t\t\tif (numColumns == 0) {", "+\t\t\t\t\tnoFocusDraw = item.paint (gc, null, false) || noFocusDraw;", "+\t\t\t\t} else {", "+\t\t\t\t\tfor (int j = startColumn; j <= Math.min (endColumn, columns.length - 1); j++) {", "+\t\t\t\t\t\tif (!item.isDisposed ()) {\t/* ensure that item was not disposed in a callback */", "+\t\t\t\t\t\t\tnoFocusDraw = item.paint (gc, orderedColumns [j], false) || noFocusDraw;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (isDisposed ()) return;\t/* ensure that receiver was not disposed in a callback */", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (isDisposed ()) return;\t/* ensure that receiver was not disposed in a callback */", "+\t}", "+\tgc.setClipping(clipping);", "+\t\tgc.setLineDash (lineDash);", "-\tif (isFocusControl ()) {", "+\tif (!noFocusDraw && isFocusControl ()) {", "-\t\t\t\tint[] oldLineDash = gc.getLineDash ();", "-\t\t\t\tgc.setLineDash (oldLineDash);", "-\t\t\tint[] oldLineDash = gc.getLineDash ();", "-\t\t\tgc.setLineDash (oldLineDash);", "+\t\tgc.setLineDash (lineDash);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68facbbf494961ab77cddd4119dc6371", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "6dd7232a9bfb7b172a0784b2787e3a481ad143be", "commitAfterChange": "15d65623cf9e946c3c4cb7552b2d8fa7c7e9ef50", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " void onPaint (Event event)", "signatureAfterChange": " void onPaint (Event event)", "diff": ["-\t/* Determine the TableItems to be painted */", "+\t/* Determine the items to be painted */", "-\tfor (int i = startIndex; i <= endIndex; i++) {", "-\t\tTableItem item = items [i];", "-\t\tif (startColumn == -1) {", "-\t\t\t/* indicates that region to paint is to the right of the last column */", "-\t\t\titem.paint (gc, null, false);", "-\t\t} else {", "-\t\t\tif (numColumns == 0) {", "-\t\t\t\titem.paint (gc, null, true);", "-\t\t\t} else {", "-\t\t\t\tfor (int j = startColumn; j <= endColumn; j++) {", "-\t\t\t\t\titem.paint (gc, orderedColumns [j], true);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "+\t/* paint the items */", "+\tfor (int i = startIndex; i <= Math.min (endIndex, itemsCount - 1); i++) {", "+\t\tTableItem item = items [i];", "+\t\tif (!item.isDisposed ()) {\t/* ensure that item was not disposed in a callback */", "+\t\t\tif (startColumn == -1) {", "+\t\t\t\t/* indicates that region to paint is to the right of the last column */", "+\t\t\t\titem.paint (gc, null, true);", "+\t\t\t} else {", "+\t\t\t\tif (numColumns == 0) {", "+\t\t\t\t\titem.paint (gc, null, false);", "+\t\t\t\t} else {", "+\t\t\t\t\tfor (int j = startColumn; j <= Math.min (endColumn, columns.length - 1); j++) {", "+\t\t\t\t\t\tif (!item.isDisposed ()) {\t/* ensure that item was not disposed in a callback */", "+\t\t\t\t\t\t\titem.paint (gc, orderedColumns [j], false);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (isDisposed ()) return;\t/* ensure that receiver was not disposed in a callback */", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (isDisposed ()) return;\t/* ensure that receiver was not disposed in a callback */", "+\t}", "+", "+\tgc.setClipping(clipping);"]}], "num": 49900}
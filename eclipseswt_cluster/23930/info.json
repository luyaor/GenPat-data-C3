{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9e41e6af86ee4fb1c4594652c80aed34", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a741361f60636c4113dfd9b11171142", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "b334d44ba3c70fd8db4e08687ef0db9af2bd2587", "commitAfterChange": "f69d75cc3fb0aa90baf729e9d5be0fedd8d56818", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " \t \tint getTitleAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \t \tint getTitleAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tString osTitleAttribute = null;", "-\t\tint [] stringRef = new int [1];", "-\t\tif (code == OS.noErr) {", "-\t\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, null, 4, null, stringRef);", "-\t\t\tif (status == OS.noErr) {", "-\t\t\t\tosTitleAttribute = stringRefToString (stringRef [0]);", "+\t\tint childID = getChildIDFromEvent(theEvent);", "+\t\t", "+\t\t/*", "+\t\t* Feature of the Macintosh.  The text of a Label is returned in its value,", "+\t\t* not its title, so ensure that the role is not Label before asking for the title.", "+\t\t*/", "+\t\tAccessibleControlEvent roleEvent = new AccessibleControlEvent(this);", "+\t\troleEvent.childID = childID;", "+\t\troleEvent.detail = -1;", "+\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\tlistener.getRole(roleEvent);", "+\t\t}", "+\t\tif (roleEvent.detail != ACC.ROLE_LABEL) {", "+\t\t\tString osTitleAttribute = null;", "+\t\t\tint [] stringRef = new int [1];", "+\t\t\tif (code == OS.noErr) {", "+\t\t\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, null, 4, null, stringRef);", "+\t\t\t\tif (status == OS.noErr) {", "+\t\t\t\t\tosTitleAttribute = stringRefToString (stringRef [0]);", "+\t\t\t\t}", "-\t\t}", "-\t\tAccessibleEvent event = new AccessibleEvent(this);", "-\t\tevent.childID = getChildIDFromEvent(theEvent);", "-\t\tevent.result = osTitleAttribute;", "-\t\tfor (int i = 0; i < accessibleListeners.size(); i++) {", "-\t\t\tAccessibleListener listener = (AccessibleListener) accessibleListeners.elementAt(i);", "-\t\t\tlistener.getName(event);", "-\t\t}", "-\t\tif (event.result != null) {", "-\t\t\tstringRef [0] = stringToStringRef (event.result);", "-\t\t\tif (stringRef [0] != 0) {", "-\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "-\t\t\t\tOS.CFRelease(stringRef [0]);", "-\t\t\t\tcode = OS.noErr;", "+\t\t\tAccessibleEvent event = new AccessibleEvent(this);", "+\t\t\tevent.childID = childID;", "+\t\t\tevent.result = osTitleAttribute;", "+\t\t\tfor (int i = 0; i < accessibleListeners.size(); i++) {", "+\t\t\t\tAccessibleListener listener = (AccessibleListener) accessibleListeners.elementAt(i);", "+\t\t\t\tlistener.getName(event);", "+\t\t\t}", "+\t\t\tif (event.result != null) {", "+\t\t\t\tstringRef [0] = stringToStringRef (event.result);", "+\t\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "+\t\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\t\tcode = OS.noErr;", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abc6ca4ebf111339b577d2c74c0db710", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "9e4aa4f79d8d08d57d797296be9d3269723e755b", "commitAfterChange": "c7a37ce473beb9045c99b97900ef561257b98af2", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 67, "signatureBeforeChange": " \t \tid getNumberOfCharactersAttribute (int childID)", "signatureAfterChange": " \t \tid getNumberOfCharactersAttribute (int childID)", "diff": ["-\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "-\t\tevent.childID = childID;", "-\t\tevent.result = null;", "-\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "-\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "-\t\t\tlistener.getValue(event);", "-\t\t}", "-\t\tString appValue = event.result;", "-\t\tif (appValue != null) {", "-\t\t\treturnValue = NSNumber.numberWithInt(appValue.length());", "+\t\tif (accessibleTextExtendedListeners.size() > 0) {", "+\t\t\tAccessibleTextExtendedEvent event = new AccessibleTextExtendedEvent(this);", "+\t\t\tevent.childID = childID;", "+\t\t\tfor (int i = 0; i < accessibleTextExtendedListeners.size(); i++) {", "+\t\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) accessibleTextExtendedListeners.elementAt(i);", "+\t\t\t\tlistener.getCharacterCount(event);", "+\t\t\t}", "+\t\t\treturnValue = NSNumber.numberWithInt(event.count);", "+\t\t} else {", "+\t\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "+\t\t\tevent.childID = childID;", "+\t\t\tevent.result = null;", "+\t\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\t\tlistener.getValue(event);", "+\t\t\t}", "+\t\t\tString appValue = event.result;", "+\t\t\tif (appValue != null) {", "+\t\t\t\treturnValue = NSNumber.numberWithInt(appValue.length());", "+\t\t\t}"]}], "num": 23930}
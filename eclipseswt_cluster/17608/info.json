{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eaa525e8ab61ff64e59463c37ee98442", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ee3298bf6b895dbc74968214b97c31f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "0b40dc8adaa1fa3feafc9b7a1c5e53734db7ca70", "commitAfterChange": "090e8dfef891d537ee91a695bdd9547272135b17", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": "  void rendererRender (long cell, long cr, long window, long widget, long background_area, long cell_area, long expose_area, long flags)", "signatureAfterChange": "  void rendererRender (long cell, long cr, long window, long widget, long background_area, long cell_area, long expose_area, long flags)", "diff": ["-\t\t\t\t\tif (cr != 0) {", "-\t\t\t\t\t\tCairo.cairo_save (cr);", "-\t\t\t\t\t\tCairo.cairo_reset_clip (cr);", "-\t\t\t\t\t}", "-\t\t\t\t\tdrawBackground (control, window, cr, 0, rect.x, rect.y, rect.width, rect.height);", "-\t\t\t\t\tif (cr != 0) {", "-\t\t\t\t\t\tCairo.cairo_restore (cr);", "+\t\t\t\t\t// GTK >= 3.10 sends a cairo for the window of the tree widget, but not for for the bin window.", "+\t\t\t\t\t// Besides, GTK 3.10 >= uses the same cairo for all the tree's children. SWT invalidates the cairo.", "+\t\t\t\t\t// The fix is to create a new cairo.", "+\t\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION(3, 9, 0)) {", "+\t\t\t\t\t\tif (window == 0) {", "+\t\t\t\t\t\t\twindow = OS.gtk_widget_get_window(handle);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (window != 0) {", "+\t\t\t\t\t\t\tGdkRectangle r = new GdkRectangle();", "+\t\t\t\t\t\t\tOS.gdk_cairo_get_clip_rectangle(cr, r);", "+\t\t\t\t\t\t\tdrawBackground (control, window, 0, 0, rect.x, r.y, r.width, r.height);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (cr != 0) {", "+\t\t\t\t\t\t\tCairo.cairo_save (cr);", "+\t\t\t\t\t\t\tCairo.cairo_reset_clip (cr);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tdrawBackground (control, window, cr, 0, rect.x, rect.y, rect.width, rect.height);", "+\t\t\t\t\t\tif (cr != 0) {", "+\t\t\t\t\t\t\tCairo.cairo_restore (cr);", "+\t\t\t\t\t\t}", "-\t\t\t\tGC gc = new GC (this);", "+\t\t\t\tGC gc;", "+\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION(3, 9, 0)) {", "+\t\t\t\t\tGCData gcData = new GCData();", "+\t\t\t\t\tgcData.cairo = OS.gdk_cairo_create(OS.gtk_widget_get_window(handle));", "+\t\t\t\t\tgc = GC.gtk_new(this, gcData );", "+\t\t\t\t} else {", "+\t\t\t\t\tgc = new GC (this);", "+\t\t\t\t}", "-\t\t\t\tgc.setClipping (rect.x, rect.y, rect.width, rect.height);", "+\t\t\t\t// Since we create a new cairo, we have to clip it", "+\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION(3, 9, 0) && cr != 0) {", "+\t\t\t\t\tGdkRectangle r = new GdkRectangle();", "+\t\t\t\t\tOS.gdk_cairo_get_clip_rectangle(cr, r);", "+\t\t\t\t\tgc.setClipping(rect.x, r.y, r.width, r.height);", "+\t\t\t\t} else {", "+\t\t\t\t\tgc.setClipping (rect.x, rect.y, rect.width, rect.height);", "+\t\t\t\t}", "+\t\t\t\t\t if (OS.GTK_VERSION < OS.VERSION(3, 9, 0)) {", "+\t\t\t\t\t\t// GTK >= 3.10 creates a different background if we use this code", "+\t\t\t\t\t }", "-\t\t\t\tGC gc = new GC (this);", "+\t\t\t\tGC gc;", "+\t\t\t\t// GTK >= 3.10 sends a cairo for the window of the tree widget, but not for for the bin window.", "+\t\t\t\t// Besides, GTK >= 3.10 uses the same cairo for all the tree's children. SWT invalidates the cairo.", "+\t\t\t\t// The fix is to create a new cairo.", "+\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION(3, 9, 0)) {", "+\t\t\t\t\tGCData gcData = new GCData();", "+\t\t\t\t\tgcData.cairo = OS.gdk_cairo_create(OS.gtk_widget_get_window(handle));", "+\t\t\t\t\tgc = GC.gtk_new(this, gcData );", "+\t\t\t\t} else {", "+\t\t\t\t\tgc = new GC(this);", "+\t\t\t\t}", "-\t\t\t\tgc.setClipping (clipRect.x, clipRect.y, clipRect.width, clipRect.height);", "+\t\t\t\t// Since we create a new cairo, we have to clip it", "+\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION(3, 9, 0) && (cr != 0)) {", "+\t\t\t\t\tGdkRectangle r = new GdkRectangle();", "+\t\t\t\t\tOS.gdk_cairo_get_clip_rectangle(cr, r);", "+\t\t\t\t\tgc.setClipping(clipRect.x, r.y, r.width, r.height);", "+\t\t\t\t} else {", "+\t\t\t\t\tgc.setClipping (clipRect.x, clipRect.y, clipRect.width, clipRect.height);", "+\t\t\t\t}", "-\t\t\t\tsendEvent (SWT.PaintItem, event);\t", "+\t\t\t\tsendEvent (SWT.PaintItem, event);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "292bd45c9485cfee386f97a90a8bb6c9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "63b50c5fea4ab60936c84a3080eb596f376bf6a1", "commitAfterChange": "45c66a5bd7603371a720a2a643661cd929a5ff6a", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tint width, height;", "+\tint width = 0, height = 0;", "-\t\tTXNLongRect oTextRect = new TXNLongRect ();", "-\t\tOS.TXNGetRectBounds (txnObject, null, null, oTextRect);", "-\t\twidth = oTextRect.right - oTextRect.left;", "-\t\theight = oTextRect.bottom - oTextRect.top;", "+\t\tif (OS.VERSION >= 0x1030) {", "+\t\t\tif ((style & SWT.WRAP) != 0) {", "+\t\t\t\tint [] oDataHandle = new int [1];", "+\t\t\t\tOS.TXNGetData (txnObject, OS.kTXNStartOffset, OS.kTXNEndOffset, oDataHandle);", "+\t\t\t\tif (oDataHandle [0] != 0) {", "+\t\t\t\t\tint length = OS.GetHandleSize (oDataHandle [0]);", "+\t\t\t\t\tif (length != 0) {", "+\t\t\t\t\t\tint [] ptr = new int [1];", "+\t\t\t\t\t\tOS.HLock (oDataHandle [0]);", "+\t\t\t\t\t\tOS.memcpy (ptr, oDataHandle [0], 4);", "+\t\t\t\t\t\tint str = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, ptr [0], length / 2);", "+\t\t\t\t\t\tif (str != 0) {", "+\t\t\t\t\t\t\tfloat [] w = new float [1], h = new float [1];", "+\t\t\t\t\t\t\tHIThemeTextInfo info = new HIThemeTextInfo ();", "+\t\t\t\t\t\t\tinfo.state = OS.kThemeStateActive;", "+\t\t\t\t\t\t\tif (font != null) {", "+\t\t\t\t\t\t\t\tOS.TextFont (font.id);", "+\t\t\t\t\t\t\t\tOS.TextFace (font.style);", "+\t\t\t\t\t\t\t\tOS.TextSize (font.size);", "+\t\t\t\t\t\t\t\tinfo.fontID = (short) OS.kThemeCurrentPortFont; ", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tinfo.fontID = (short) defaultThemeFont ();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tOS.HIThemeGetTextDimensions (str, wHint == SWT.DEFAULT ? 0 : wHint, info, w, h, null);", "+\t\t\t\t\t\t\tOS.CFRelease (str);", "+\t\t\t\t\t\t\twidth = (int) w [0];", "+\t\t\t\t\t\t\theight = (int) h [0];", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.HUnlock (oDataHandle[0]);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.DisposeHandle (oDataHandle[0]);", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tCGRect rect = new CGRect ();", "+\t\t\t\tOS.TXNGetHIRect (txnObject, OS.kTXNTextRectKey, rect);", "+\t\t\t\twidth = (int) rect.width;", "+\t\t\t\theight = (int) rect.height;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tTXNLongRect oTextRect = new TXNLongRect ();", "+\t\t\tOS.TXNGetRectBounds (txnObject, null, null, oTextRect);", "+\t\t\twidth = oTextRect.right - oTextRect.left;", "+\t\t\theight = oTextRect.bottom - oTextRect.top;", "+\t\t}", "-\twidth = trim.width;  height = trim.height;", "+\twidth = trim.width;", "+\theight = trim.height;"]}], "num": 17608}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6de16162f957008eddf7dc7d07a0f29e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f092a932d2f77f1b5f04a62826a7e16c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "9632ed39e080a2f80328d76fafecf59d673c6888", "commitAfterChange": "e162ce64150df9ea3d8c13b106ed9cd20c953447", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\t\tSystem.setProperty (XULRUNNER_PATH, mozillaPath); //$NON-NLS-1$", "+\t\t\tSystem.setProperty (XULRUNNER_PATH, mozillaPath);", "-\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true);", "-\t\trc = serviceManager.GetServiceByContractID (buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (rc);", "-\t\t}", "-\t\tif (result[0] == 0) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t}", "-", "-\t\tnsIDirectoryService directoryService = new nsIDirectoryService (result[0]);", "-\t\tresult[0] = 0;", "-\t\trc = directoryService.QueryInterface (nsIProperties.NS_IPROPERTIES_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (rc);", "-\t\t}", "-\t\tif (result[0] == 0) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t}", "-\t\tdirectoryService.Release ();", "-", "-\t\tnsIProperties properties = new nsIProperties (result[0]);", "-\t\tresult[0] = 0;", "-\t\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_APP_APPLICATION_REGISTRY_DIR, true);", "-\t\trc = properties.Get (buffer, nsIFile.NS_IFILE_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (rc);", "-\t\t}", "-\t\tif (result[0] == 0) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t}", "-\t\tproperties.Release ();", "-", "-\t\tnsIFile profileDir = new nsIFile (result[0]);", "-\t\tresult[0] = 0;", "-\t\tint /*long*/ path = XPCOM.nsEmbedCString_new ();", "-\t\trc = profileDir.GetNativePath (path);", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (rc);", "-\t\t}", "-\t\tint length = XPCOM.nsEmbedCString_Length (path);", "-\t\tint /*long*/ ptr = XPCOM.nsEmbedCString_get (path);", "-\t\tbuffer = new byte [length];", "-\t\tXPCOM.memmove (buffer, ptr, length);", "-\t\tString profilePath = new String (MozillaDelegate.mbcsToWcs (null, buffer)) + PROFILE_DIR;", "-\t\tLocationProvider.setProfilePath (profilePath);", "-\t\tXPCOM.nsEmbedCString_delete (path);", "-\t\tprofileDir.Release ();", "-", "-\t\t/* notify observers of a new profile directory being used */", "-\t\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "-\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (rc);", "-\t\t}", "-\t\tif (result[0] == 0) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t}", "-", "-\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "-\t\tresult[0] = 0;", "-\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_DO_CHANGE, true);", "-\t\tlength = STARTUP.length ();", "-\t\tchar[] chars = new char [length + 1];", "-\t\tSTARTUP.getChars (0, length, chars, 0);", "-\t\trc = observerService.NotifyObservers (0, buffer, chars);", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (rc);", "-\t\t}", "-\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_AFTER_CHANGE, true);", "-\t\trc = observerService.NotifyObservers (0, buffer, chars);", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (rc);", "-\t\t}", "-\t\tobserverService.Release ();", "-", "-\t\tdisplay.addListener (SWT.Dispose, new Listener () {", "-\t\t\tpublic void handleEvent (Event event) {", "-\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\t\t\t\tresult[0] = 0;\t\t", "-\t\t\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "-\t\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\tserviceManager.Release ();", "-", "-\t\t\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_BEFORE_CHANGE, true);", "-\t\t\t\tint length = SHUTDOWN_PERSIST.length ();", "-\t\t\t\tchar[] chars = new char [length + 1];", "-\t\t\t\tSHUTDOWN_PERSIST.getChars (0, length, chars, 0);", "-\t\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tobserverService.Release ();", "+\t\tif (LocationProvider != null) {", "+\t\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true);", "+\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (rc);", "-\t\t});", "+\t\t\tif (result[0] == 0) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "+\t\t\t}", "+", "+\t\t\tnsIDirectoryService directoryService = new nsIDirectoryService (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\trc = directoryService.QueryInterface (nsIProperties.NS_IPROPERTIES_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (rc);", "+\t\t\t}", "+\t\t\tif (result[0] == 0) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "+\t\t\t}", "+\t\t\tdirectoryService.Release ();", "+", "+\t\t\tnsIProperties properties = new nsIProperties (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_APP_APPLICATION_REGISTRY_DIR, true);", "+\t\t\trc = properties.Get (buffer, nsIFile.NS_IFILE_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (rc);", "+\t\t\t}", "+\t\t\tif (result[0] == 0) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "+\t\t\t}", "+\t\t\tproperties.Release ();", "+", "+\t\t\tnsIFile profileDir = new nsIFile (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tint /*long*/ path = XPCOM.nsEmbedCString_new ();", "+\t\t\trc = profileDir.GetNativePath (path);", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (rc);", "+\t\t\t}", "+\t\t\tint length = XPCOM.nsEmbedCString_Length (path);", "+\t\t\tint /*long*/ ptr = XPCOM.nsEmbedCString_get (path);", "+\t\t\tbuffer = new byte [length];", "+\t\t\tXPCOM.memmove (buffer, ptr, length);", "+\t\t\tString profilePath = new String (MozillaDelegate.mbcsToWcs (null, buffer)) + PROFILE_DIR;", "+\t\t\tLocationProvider.setProfilePath (profilePath);", "+\t\t\tXPCOM.nsEmbedCString_delete (path);", "+\t\t\tprofileDir.Release ();", "+", "+\t\t\t/* notify observers of a new profile directory being used */", "+\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "+\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (rc);", "+\t\t\t}", "+\t\t\tif (result[0] == 0) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "+\t\t\t}", "+", "+\t\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_DO_CHANGE, true);", "+\t\t\tlength = STARTUP.length ();", "+\t\t\tchar[] chars = new char [length + 1];", "+\t\t\tSTARTUP.getChars (0, length, chars, 0);", "+\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (rc);", "+\t\t\t}", "+\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_AFTER_CHANGE, true);", "+\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (rc);", "+\t\t\t}", "+\t\t\tobserverService.Release ();", "+", "+\t\t\tdisplay.addListener (SWT.Dispose, new Listener () {", "+\t\t\t\tpublic void handleEvent (Event event) {", "+\t\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\t\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\t\t\t\t\tresult[0] = 0;\t\t", "+\t\t\t\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "+\t\t\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\t\t\t\tserviceManager.Release ();", "+", "+\t\t\t\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "+\t\t\t\t\tresult[0] = 0;", "+\t\t\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_BEFORE_CHANGE, true);", "+\t\t\t\t\tint length = SHUTDOWN_PERSIST.length ();", "+\t\t\t\t\tchar[] chars = new char [length + 1];", "+\t\t\t\t\tSHUTDOWN_PERSIST.getChars (0, length, chars, 0);", "+\t\t\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\tobserverService.Release ();", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "-\t\tbuffer = new byte[1];", "+\t\tbyte[] buffer = new byte[1];", "-\t\t\tlength = XPCOM.strlen_PRUnichar (result[0]);", "+\t\t\tint length = XPCOM.strlen_PRUnichar (result[0]);", "-\t\t\tlength = newLocales.length ();", "+\t\t\tint length = newLocales.length ();", "-\t\t\tlength = XPCOM.strlen_PRUnichar (result[0]);", "+\t\t\tint length = XPCOM.strlen_PRUnichar (result[0]);", "-\t\t\tlength = newCharset.length ();", "+\t\t\tint length = newCharset.length ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9361862262a2d0bd61eca801c229ea4b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "48b98e2320e6e86a6887f8923af23f6b65cabf55", "commitAfterChange": "d08804766f47b158c36407c33bd830982dde16ec", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\t\tLocationProvider = new AppFileLocProvider (mozillaPath);", "+\t\t\tString profilePath = delegate.getProfilePath ();", "+\t\t\tLocationProvider = new AppFileLocProvider (mozillaPath, profilePath, IsXULRunner);", "-\t\t\t/* extract external.xpt to temp */", "-\t\t\tString tempPath = System.getProperty (\"java.io.tmpdir\"); //$NON-NLS-1$", "-\t\t\tFile componentsDir = new File (tempPath, \"eclipse/mozillaComponents\"); //$NON-NLS-1$", "+\t\t\t/* extract external.xpt to the profile's components directory */", "+\t\t\tFile componentsDir = new File (profilePath, AppFileLocProvider.COMPONENTS_DIR);", "-\t\t\t}", "-\t\t\tif (componentsDir.exists () && componentsDir.isDirectory ()) {", "-\t\t\t\tLocationProvider.setComponentsPath (componentsDir.getAbsolutePath ());", "-\t\t/* compute the profile directory and set it on the AppFileLocProvider */", "-\t\tif (LocationProvider != null) {", "-\t\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true);", "-\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tif (result[0] == 0) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t\t}", "+\t\t/* notify observers of a new profile directory being used */", "-\t\t\tnsIDirectoryService directoryService = new nsIDirectoryService (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\trc = directoryService.QueryInterface (nsIProperties.NS_IPROPERTIES_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tif (result[0] == 0) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t\t}", "-\t\t\tdirectoryService.Release ();", "-", "-\t\t\tnsIProperties properties = new nsIProperties (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_APP_APPLICATION_REGISTRY_DIR, true);", "-\t\t\trc = properties.Get (buffer, nsIFile.NS_IFILE_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tif (result[0] == 0) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t\t}", "-\t\t\tproperties.Release ();", "-", "-\t\t\tnsIFile profileDir = new nsIFile (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tint /*long*/ path = XPCOM.nsEmbedCString_new ();", "-\t\t\trc = profileDir.GetNativePath (path);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tint length = XPCOM.nsEmbedCString_Length (path);", "-\t\t\tint /*long*/ ptr = XPCOM.nsEmbedCString_get (path);", "-\t\t\tbuffer = new byte [length];", "-\t\t\tXPCOM.memmove (buffer, ptr, length);", "-\t\t\tString profilePath = new String (MozillaDelegate.mbcsToWcs (null, buffer)) + PROFILE_DIR;", "-\t\t\tLocationProvider.setProfilePath (profilePath);", "-\t\t\tLocationProvider.isXULRunner = IsXULRunner;", "-\t\t\tXPCOM.nsEmbedCString_delete (path);", "-\t\t\tprofileDir.Release ();", "-", "-\t\t\t/* notify observers of a new profile directory being used */", "-\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "-\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tif (result[0] == 0) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t\t}", "-", "-\t\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_DO_CHANGE, true);", "-\t\t\tlength = STARTUP.length ();", "-\t\t\tchar[] chars = new char [length + 1];", "-\t\t\tSTARTUP.getChars (0, length, chars, 0);", "-\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_AFTER_CHANGE, true);", "-\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tobserverService.Release ();", "-", "-\t        if (IsXULRunner) {", "-\t\t\t\tint size = XPCOM.nsDynamicFunctionLoad_sizeof ();", "-\t\t\t\t/* alloc memory for two structs, the second is empty to signify the end of the list */", "-\t\t\t\tptr = C.malloc (size * 2);", "-\t\t\t\tC.memset (ptr, 0, size * 2);", "-\t\t\t\tnsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();", "-\t\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_NotifyProfile\", true); //$NON-NLS-1$", "-\t\t\t\tfunctionLoad.functionName = C.malloc (bytes.length);", "-\t\t\t\tC.memmove (functionLoad.functionName, bytes, bytes.length);", "-\t\t\t\tfunctionLoad.function = C.malloc (C.PTR_SIZEOF);", "-\t\t\t\tC.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);", "-\t\t\t\tXPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());", "-\t\t\t\tXPCOM.XPCOMGlueLoadXULFunctions (ptr);", "-\t\t\t\tC.memmove (result, functionLoad.function, C.PTR_SIZEOF);", "-\t\t\t\tint /*long*/ functionPtr = result[0];", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tC.free (functionLoad.function);", "-\t\t\t\tC.free (functionLoad.functionName);", "-\t\t\t\tC.free (ptr);", "-\t\t\t\t/* functionPtr == 0 for xulrunner < 1.9 */", "-\t\t\t\tif (functionPtr != 0) {", "-\t\t\t\t\trc = XPCOM.Call (functionPtr);", "-\t            \tif (rc != XPCOM.NS_OK) {", "-\t            \t\tbrowser.dispose ();", "-\t            \t\terror (rc);", "-\t            \t}", "-\t\t\t\t}", "-\t        }", "+\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "+\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (rc);", "+\t\tif (result[0] == 0) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (XPCOM.NS_NOINTERFACE);", "+\t\t}", "+", "+\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "+\t\tresult[0] = 0;", "+\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_DO_CHANGE, true);", "+\t\tint length = STARTUP.length ();", "+\t\tchar[] chars = new char [length + 1];", "+\t\tSTARTUP.getChars (0, length, chars, 0);", "+\t\trc = observerService.NotifyObservers (0, buffer, chars);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (rc);", "+\t\t}", "+\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_AFTER_CHANGE, true);", "+\t\trc = observerService.NotifyObservers (0, buffer, chars);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (rc);", "+\t\t}", "+\t\tobserverService.Release ();", "+", "+        if (IsXULRunner) {", "+\t\t\tint size = XPCOM.nsDynamicFunctionLoad_sizeof ();", "+\t\t\t/* alloc memory for two structs, the second is empty to signify the end of the list */", "+\t\t\tint /*long*/ ptr = C.malloc (size * 2);", "+\t\t\tC.memset (ptr, 0, size * 2);", "+\t\t\tnsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();", "+\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_NotifyProfile\", true); //$NON-NLS-1$", "+\t\t\tfunctionLoad.functionName = C.malloc (bytes.length);", "+\t\t\tC.memmove (functionLoad.functionName, bytes, bytes.length);", "+\t\t\tfunctionLoad.function = C.malloc (C.PTR_SIZEOF);", "+\t\t\tC.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);", "+\t\t\tXPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());", "+\t\t\tXPCOM.XPCOMGlueLoadXULFunctions (ptr);", "+\t\t\tC.memmove (result, functionLoad.function, C.PTR_SIZEOF);", "+\t\t\tint /*long*/ functionPtr = result[0];", "+\t\t\tresult[0] = 0;", "+\t\t\tC.free (functionLoad.function);", "+\t\t\tC.free (functionLoad.functionName);", "+\t\t\tC.free (ptr);", "+\t\t\t/* functionPtr == 0 for xulrunner < 1.9 */", "+\t\t\tif (functionPtr != 0) {", "+\t\t\t\trc = XPCOM.Call (functionPtr);", "+            \tif (rc != XPCOM.NS_OK) {", "+            \t\tbrowser.dispose ();", "+            \t\terror (rc);", "+            \t}", "+\t\t\t}", "+        }", "-\t\tbyte[] buffer = new byte[1];", "+\t\tbuffer = new byte[1];", "-\t\t\tint length = XPCOM.strlen_PRUnichar (result[0]);", "+\t\t\tlength = XPCOM.strlen_PRUnichar (result[0]);", "-\t\t\tint length = newLocales.length ();", "+\t\t\tlength = newLocales.length ();", "-\t\t\tint length = XPCOM.strlen_PRUnichar (result[0]);", "+\t\t\tlength = XPCOM.strlen_PRUnichar (result[0]);", "-\t\t\tint length = newCharset.length ();", "+\t\t\tlength = newCharset.length ();", "-\t\t\tint length = proxyHost.length ();", "+\t\t\tlength = proxyHost.length ();"]}], "num": 63216}
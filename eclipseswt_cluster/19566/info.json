{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "acb80104e2aa2194fd8b6393897281e2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d7140f356aa302c7699e6fcbeabec47", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "ff7a7565646414b3418637259a20a7e8cc0d7d33", "commitAfterChange": "625d7442af2e067cc40f25eb22b19ef7acd83ba7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \r void init(Device device, String name, int height, int style, byte[] stem)", "signatureAfterChange": "\r \r void init(Device device, String name, int height, int style, byte[] stem)", "diff": ["-\tif (height < 0) SWT.error(SWT.ERROR_NULL_ARGUMENT);\r", "+\tif (height < 0) SWT.error(SWT.ERROR_INVALID_ARGUMENT);\r", "-\t\tbyte[] description = (name == null) ? null : Converter.wcsToMbcs(null, name, true);\r", "+\t\tbyte[] description = Converter.wcsToMbcs(null, name, true);\r", "-\t\tif (handle == null) handle = OS.PfGenerateFontName(DefaultFontName, osStyle, height, buffer);\r", "+\t\tif (handle == null) {\r", "+\t\t\tbyte[] defaultFont = device.systemFont;\r", "+\t\t\tint fontID = OS.PfDecomposeStemToID(defaultFont);\r", "+\t\t\tif (fontID != 0) {\r", "+\t\t\t\tint desc = OS.PfFontDescription(fontID);\r", "+\t\t\t\tint length = OS.strlen(desc);\r", "+\t\t\t\tbyte[] defaultFontName = new byte[length + 1];\r", "+\t\t\t\tOS.memmove(defaultFontName, desc, length);\r", "+\t\t\t\tOS.PfFreeFont(fontID);\r", "+\t\t\t\thandle = OS.PfGenerateFontName(defaultFontName, osStyle, height, buffer);\r", "+\t\t\t}\r", "+\t\t\tif (handle == null) handle = defaultFont;\r", "+\t\t}\r", "-\tif (handle == null) handle = DefaultFont;\r", "-\tFontQueryInfo info = new FontQueryInfo();\r", "-\tif (OS.PfQueryFontInfo(handle, info) == 0) handle = info.font;\r", "+\tif (handle == null)SWT.error(SWT.ERROR_NO_HANDLES);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "201596085596b82d8cede88412d28443", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "040fd9d514ac61b48864fec8900fd39b5b1a66ab", "commitAfterChange": "9227d728eba1d0a4ac6bdb3c2c1622885187e116", "methodNumberBeforeChange": 208, "methodNumberAfterChange": 208, "signatureBeforeChange": "  void setBackgroundColor (long context, long handle, GdkRGBA rgba)", "signatureAfterChange": "  void setBackgroundColor (long context, long handle, GdkRGBA rgba)", "diff": ["-\tOS.gtk_widget_override_background_color (handle, OS.GTK_STATE_FLAG_NORMAL, rgba);", "+\tif (OS.GTK_VERSION >= OS.VERSION(3, 16, 0)) {", "+\t\tlong /*int*/ str = OS.gtk_widget_get_name (handle);", "+\t\tString name;", "+\t\tif (str == 0) {", "+\t\t\tname = \"*\";", "+\t\t} else {", "+\t\t\tint length = OS.strlen (str);", "+\t\t\tbyte [] buffer = new byte [length];", "+\t\t\tOS.memmove (buffer, str, length);", "+\t\t\tname = new String (Converter.mbcsToWcs (null, buffer));", "+\t\t}", "+\t\tString css = name + \" {background-color: \" + gtk_rgba_to_css_string (rgba) + \";}\";", "+\t\tgtk_css_provider_load_from_css (context, css);", "+\t} else {", "+\t\tOS.gtk_widget_override_background_color (handle, OS.GTK_STATE_FLAG_NORMAL, rgba);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e951aab86b35dbe393bbd238c824abae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "6aa70af2b2255a8835f7c355b62ecd1f4b80e177", "commitAfterChange": "36bf32c512b26344384fa98557497dd9d14cd2be", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "  void setInitialBounds ()", "signatureAfterChange": "  void setInitialBounds ()", "diff": ["-\tMonitor monitor = getMonitor ();", "-\tRectangle rect = monitor.getClientArea ();", "-\tint width = rect.width * 5 / 8;", "-\tint height = rect.height * 5 / 8;", "+\tint width = OS.gdk_screen_width () * 5 / 8;", "+\tint height = OS.gdk_screen_height () * 5 / 8;", "+\tint /*long*/ screen = OS.gdk_screen_get_default ();", "+\tif (screen != 0) {", "+\t\tif (OS.gdk_screen_get_n_monitors (screen) > 1) {", "+\t\t\tint monitorNumber = OS.gdk_screen_get_monitor_at_window (screen, paintWindow ());", "+\t\t\tGdkRectangle dest = new GdkRectangle ();", "+\t\t\tOS.gdk_screen_get_monitor_geometry (screen, monitorNumber, dest);", "+\t\t\twidth = dest.width * 5 / 8;", "+\t\t\theight = dest.height * 5 / 8;", "+\t\t}", "+\t}"]}], "num": 19566}
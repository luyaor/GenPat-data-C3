{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cee17d67c27ddd70a7a412e7880de252", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb1aab132c4b43d6d8e0aae0899ce4a6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet367.java", "commitBeforeChange": "462ddba44ceacd7a5a10f4858a27edd162738567", "commitAfterChange": "a51f8c14ef5d18ff7e30a0c7c6e4b1fc4fb77f36", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \tpublic static void main (String [] args)", "signatureAfterChange": "  \tpublic static void main (String [] args)", "diff": ["+", "-\t\tfinal Display display = new Display ();", "-\t\t\t\tcase 100:", "-\t\t\t\t\treturn \"collapseall.png\";", "-\t\t\t\t\treturn \"collapseall@1.5x.png\";", "+\t\t\t\t\treturn IMAGE_PATH_150;", "-\t\t\t\t\treturn \"collapseall@2x.png\";", "+\t\t\t\t\treturn IMAGE_PATH_200;", "+\t\t\t\tdefault:", "+\t\t\t\t\treturn IMAGE_PATH_100;", "-\t\t\t\treturn null;", "-\t\t\t\tcase 100:", "-\t\t\t\t\treturn new ImageData (\"collapseall.png\");", "-\t\t\t\t\treturn new ImageData (\"collapseall@1.5x.png\");", "+\t\t\t\t\treturn new ImageData (IMAGE_PATH_150);", "-\t\t\t\t\treturn new ImageData (\"collapseall@2x.png\");", "+\t\t\t\t\treturn new ImageData (IMAGE_PATH_200);", "+\t\t\t\tdefault:", "+\t\t\t\t\treturn new ImageData (IMAGE_PATH_100);", "-\t\t\t\treturn null;", "-\t\tfinal Image image_even = new Image (display, filenameProvider);", "-\t\tfinal Image image_odd = new Image (display, imageDataProvider);", "+", "+\t\tfinal Display display = new Display ();", "-\t\tshell.setLayout (new GridLayout ());", "-\t\tfinal CTabFolder folder = new CTabFolder (shell, SWT.BORDER);", "-\t\tfolder.setLayoutData (new GridData (SWT.FILL, SWT.FILL, true, false));", "-\t\tfolder.setSimple (false);", "-\t\tfolder.setUnselectedImageVisible (false);", "-\t\tfor (int i = 0; i < 8; i++) {", "-\t\t\tCTabItem item = new CTabItem (folder, SWT.NONE);", "-\t\t\titem.setText (\"Item \"+i);", "-\t\t\titem.setImage ((i % 2 == 0) ? image_even : image_odd);", "-\t\t\tText text = new Text (folder, SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL);", "-\t\t\ttext.setText (\"Switch\\nTabs:\\n Image\\nZooms...\\n\");", "-\t\t\titem.setControl (text);", "-\t\t}", "-\t\tshell.setSize (300, 300);", "+\t\tshell.setLayout (new GridLayout (2, false));", "+", "+\t\tnew Label (shell, SWT.NONE).setText (IMAGE_200 + \":\");", "+\t\tnew Label (shell, SWT.NONE).setImage (new Image(display, IMAGE_PATH_200));", "+", "+\t\tnew Label (shell, SWT.NONE).setText (IMAGE_150 + \":\");", "+\t\tnew Label (shell, SWT.NONE).setImage (new Image(display, IMAGE_PATH_150));", "+", "+\t\tnew Label (shell, SWT.NONE).setText (IMAGE_100 + \":\");", "+\t\tnew Label (shell, SWT.NONE).setImage (new Image(display, IMAGE_PATH_100));", "+", "+\t\tnew Label (shell, SWT.SEPARATOR | SWT.HORIZONTAL).setLayoutData (new GridData (SWT.FILL, SWT.FILL, true, false, 2, 1));", "+", "+\t\tnew Label (shell, SWT.NONE).setText (\"ImageFileNameProvider:\");", "+\t\tnew Label (shell, SWT.NONE).setImage (new Image (display, filenameProvider));", "+", "+\t\tnew Label (shell, SWT.NONE).setText (\"ImageDataProvider:\");", "+\t\tnew Label (shell, SWT.NONE).setImage (new Image (display, imageDataProvider));", "+", "+\t\tshell.pack ();", "-\t\timage_even.dispose ();", "-\t\timage_odd.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfa938a000b76b961fb20433c6563b3a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 74, "signatureBeforeChange": " void releaseDisplay ()", "signatureAfterChange": "  void releaseDisplay ()", "diff": ["+", "-\t", "-\t/* Dispose the caret callback */", "-\t/* AW", "-\tif (caretID != 0) OS.XtRemoveTimeOut (caretID);", "-\t*/", "-\tif (caretID != 0) OS.RemoveEventLoopTimer(caretID);", "-\tcaretID = caretProc = 0;", "-\t", "-\t/* Dispose the timer callback */", "-\tif (timerIDs != null) {", "-\t\tfor (int i=0; i<timerIDs.length; i++) {", "-\t\t\t/* AW", "-\t\t\tif (timerIDs [i] != 0) OS.XtRemoveTimeOut (timerIDs [i]);", "-\t\t\t*/", "-\t\t\tif (timerIDs [i] != 0) OS.RemoveEventLoopTimer (timerIDs [i]);", "-\t\t}", "-\t}", "-\ttimerIDs = null;", "-\ttimerList = null;", "+\tactionCallback.dispose ();", "+\tcaretCallback.dispose ();", "+\tcommandCallback.dispose ();", "+\tcontrolCallback.dispose ();", "+\tdrawItemCallback.dispose ();", "+\titemDataCallback.dispose ();", "+\titemNotificationCallback.dispose ();", "+\thelpCallback.dispose ();", "+\thitTestCallback.dispose ();", "+\tkeyboardCallback.dispose ();", "+\tmenuCallback.dispose ();", "+\tmouseHoverCallback.dispose ();", "+\tmouseCallback.dispose ();", "+\ttrackingCallback.dispose ();", "+\twindowCallback.dispose ();", "+\tactionCallback = caretCallback = commandCallback = null;", "+\tcontrolCallback = drawItemCallback = itemDataCallback = itemNotificationCallback = null;", "+\thelpCallback = hitTestCallback = keyboardCallback = menuCallback = null;", "+\tmouseHoverCallback = mouseCallback = trackingCallback = windowCallback = null;", "+\tactionProc = caretProc = commandProc = 0;", "+\tcontrolProc = drawItemProc = itemDataProc = itemNotificationProc = 0;", "+\thelpProc = hitTestProc = keyboardProc = menuProc = 0;", "+\tmouseHoverProc = mouseProc = trackingProc = windowProc = 0;", "+\ttimerCallback.dispose ();", "+\ttimerCallback = null;", "+\tgrabControl = helpControl = currentControl = null;", "+\tif (helpString != 0) OS.CFRelease (helpString);", "+\thelpString = 0;", "+\t//NOT DONE - call terminate TXN if this is the last display ", "+\t//NOTE: - display create and dispose needs to be synchronized on all platforms", "+//\t TXNTerminateTextension ();", "-\t/* Dispose the mouse hover callback */", "-\tif (mouseHoverID != 0) OS.RemoveEventLoopTimer(mouseHoverID);", "-\tmouseHoverID = mouseHoverProc = mouseHoverHandle = toolTipWindowHandle = 0;", "-", "-\t/* Free the font lists */", "-\t/* AW", "-\tif (buttonFont != 0) OS.XmFontListFree (buttonFont);", "-\tif (labelFont != 0) OS.XmFontListFree (labelFont);", "-\tif (textFont != 0) OS.XmFontListFree (textFont);", "-\tif (listFont != 0) OS.XmFontListFree (listFont);", "-\tlistFont = textFont = labelFont = buttonFont = 0;", "-\t*/", "-\tdefaultFont = null;\t", "-\t", "-\t/* Release references */", "-\tthread = null;", "-\tbuttonBackground = buttonForeground = 0;", "-\tdefaultBackground = defaultForeground = 0;", "-\tCOLOR_WIDGET_DARK_SHADOW = COLOR_WIDGET_NORMAL_SHADOW = COLOR_WIDGET_LIGHT_SHADOW =", "-\tCOLOR_WIDGET_HIGHLIGHT_SHADOW = COLOR_WIDGET_BACKGROUND = COLOR_WIDGET_BORDER =", "-\tCOLOR_LIST_FOREGROUND = COLOR_LIST_BACKGROUND = COLOR_LIST_SELECTION = COLOR_LIST_SELECTION_TEXT = null;", "-\tCOLOR_INFO_BACKGROUND = null;", "-}"]}], "num": 23433}
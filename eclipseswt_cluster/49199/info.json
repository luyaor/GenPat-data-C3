{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c8fc436c4a9ff5f16a298a480f2bffa7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ba9f9809c0d5f182b23c00f45e17d6d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "b59c4fffa07de3eacd340320122e3f64e74d8809", "commitAfterChange": "12139012e040ff572bb2d7ef4f64f6412e24565d", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\tif (profileFolder == null) {", "-\t\tint rc = XPCOM.NS_GetServiceManager(result);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t", "-\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "-\t\tresult[0] = 0;\t\t", "-\t\t/* Create a temporary profile */", "-\t\tbyte[] buffer = XPCOM.NS_PROFILE_CONTRACTID.getBytes();", "-\t\tbyte[] aContractID = new byte[buffer.length + 1];", "-\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "-\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIProfile.NS_IPROFILE_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "-\t\tserviceManager.Release();", "-", "-\t\tnsIProfile profile = new nsIProfile(result[0]);", "-\t\tresult[0] = 0;", "-\t\tString randomName = \"org.eclipse.swt.browser.Browser_\" + Long.toHexString(System.currentTimeMillis()); //$NON-NLS-1$", "-\t\tchar[] profileName = new char[randomName.length() + 1];", "-\t\trandomName.getChars(0, randomName.length(), profileName, 0);", "-\t\tString folder = new File(System.getProperty(\"java.io.tmpdir\"), randomName).getAbsolutePath();", "-\t\tchar[] nativeProfileDir = new char[folder.length() + 1];", "-\t\tfolder.getChars(0, folder.length(), nativeProfileDir, 0);", "-\t\trc = profile.CreateNewProfile(profileName, nativeProfileDir, null, false);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\trc = profile.SetCurrentProfile(profileName);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t/*", "-\t\t* Feature in Mozilla.  The guest profile created with CreateNewProfile can be seen in a", "-\t\t* standalone Mozilla inside the \"User Profile Dialog\". That behaviour is unwanted.  The", "-\t\t* workaround is to remove the profile from the profile list immediately after it has been", "-\t\t* created. The temporary folder storing the profile must be deleted when the display is disposed.", "-\t\t*/", "-\t\trc = profile.DeleteProfile(profileName, false);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\tprofile.Release();", "-\t\t", "-\t\tprofileFolder = folder;", "-\t\t", "-\t\tgetDisplay().addListener(SWT.Dispose, new Listener() {", "-\t\t\tpublic void handleEvent(Event e) {", "-\t\t\t\t/* Delete the temporary profile */", "-\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\t\t\t\t\t", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tbyte[] buffer = XPCOM.NS_PROFILE_CONTRACTID.getBytes();", "-\t\t\t\tbyte[] aContractID = new byte[buffer.length + 1];", "-\t\t\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "-\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIProfile.NS_IPROFILE_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "-\t\t\t\tserviceManager.Release();", "-\t\t\t\t", "-\t\t\t\tnsIProfile profile = new nsIProfile(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = profile.ShutDownCurrentProfile(nsIProfile.SHUTDOWN_CLEANSE);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tprofile.Release();\t\t\t", "-", "-\t\t\t\tdeleteFile(new File(profileFolder));", "-\t\t\t\t", "-\t\t\t\t/*", "-\t\t\t\t* Note.  It is possible a new Display and a new Browser be created", "-\t\t\t\t* next.  In that case, a new profile must be created. ", "-\t\t\t\t*/", "-\t\t\t\tprofileFolder = null;", "-\t\t\t}", "-\t\t});", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63cffea1d256354ef43f626c70d6a2c5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "527e05cfb7d03ed9f1f2f525ae603a117bd65322", "commitAfterChange": "037e5168473a95763f975d71b44c32103e25ab3b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["+\t\t\tdispose();", "+\t\tif (System.getProperty(\"java.io.tmpdir\") == null) { //$NON-NLS-1$", "+\t\t\tdispose();", "+\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [Missing system property java.io.tmpdir is required to create Mozilla profile]\"); //$NON-NLS-1$", "+\t\t}", "+", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [NS_InitEmbedding \"+mozillaPath+\" error \"+rc+\"]\");", "+\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [NS_InitEmbedding \"+mozillaPath+\" error \"+rc+\"]\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tresult[0] = 0;", "+\t\tresult[0] = 0;\t\t", "-\t\tbuffer = \"Prompt Service\".getBytes();", "+\t\tbuffer = \"Prompt Service\".getBytes(); //$NON-NLS-1$", "-\t\tbuffer = \"Helper App Launcher Dialog\".getBytes();", "+\t\tbuffer = \"Helper App Launcher Dialog\".getBytes(); //$NON-NLS-1$", "-\t\tbuffer = \"Download\".getBytes();", "+\t\tbuffer = \"Download\".getBytes(); //$NON-NLS-1$", "+\t}", "+\tif (profileFolder == null) {", "+\t\tint rc = XPCOM.NS_GetServiceManager(result);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\t\t", "+\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\t\tresult[0] = 0;\t\t", "+\t\t/* Create a temporary profile */", "+\t\tbyte[] buffer = XPCOM.NS_PROFILE_CONTRACTID.getBytes();", "+\t\tbyte[] aContractID = new byte[buffer.length + 1];", "+\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "+\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIProfile.NS_IPROFILE_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "+\t\tserviceManager.Release();", "+", "+\t\tnsIProfile profile = new nsIProfile(result[0]);", "+\t\tresult[0] = 0;", "+\t\tString randomName = \"org.eclipse.swt.browser.Browser_\" + Long.toHexString(System.currentTimeMillis()); //$NON-NLS-1$", "+\t\tchar[] profileName = new char[randomName.length() + 1];", "+\t\trandomName.getChars(0, randomName.length(), profileName, 0);", "+\t\tString folder = new File(System.getProperty(\"java.io.tmpdir\"), randomName).getAbsolutePath();", "+\t\tchar[] nativeProfileDir = new char[folder.length() + 1];", "+\t\tfolder.getChars(0, folder.length(), nativeProfileDir, 0);", "+\t\trc = profile.CreateNewProfile(profileName, nativeProfileDir, null, false);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\trc = profile.SetCurrentProfile(profileName);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t/*", "+\t\t* Feature in Mozilla.  The guest profile created with CreateNewProfile can be seen in a", "+\t\t* standalone Mozilla inside the \"User Profile Dialog\". That behaviour is unwanted.  The", "+\t\t* workaround is to remove the profile from the profile list immediately after it has been", "+\t\t* created. The temporary folder storing the profile must be deleted when the display is disposed.", "+\t\t*/", "+\t\trc = profile.DeleteProfile(profileName, false);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tprofile.Release();", "+\t\t", "+\t\tprofileFolder = folder;", "+\t\t", "+\t\tgetDisplay().addListener(SWT.Dispose, new Listener() {", "+\t\t\tpublic void handleEvent(Event e) {", "+\t\t\t\t/* Delete the temporary profile */", "+\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\t\t\t\t\t\t\t", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tbyte[] buffer = XPCOM.NS_PROFILE_CONTRACTID.getBytes();", "+\t\t\t\tbyte[] aContractID = new byte[buffer.length + 1];", "+\t\t\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "+\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIProfile.NS_IPROFILE_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\t\tserviceManager.Release();", "+\t\t\t\t", "+\t\t\t\tnsIProfile profile = new nsIProfile(result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\trc = profile.ShutDownCurrentProfile(nsIProfile.SHUTDOWN_CLEANSE);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\t\tprofile.Release();\t\t\t", "+", "+\t\t\t\tdeleteFile(new File(profileFolder));", "+\t\t\t\t", "+\t\t\t\t/*", "+\t\t\t\t* Note.  It is possible a new Display and a new Browser be created", "+\t\t\t\t* next.  In that case, a new profile must be created. ", "+\t\t\t\t*/", "+\t\t\t\tprofileFolder = null;", "+\t\t\t}", "+\t\t});", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70844c42b390329c9d999fec6e2aa158", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/gtk/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "a1b298ef9cb022d6b7d81fce88e5ceb6dd70af0a", "commitAfterChange": "b59c4fffa07de3eacd340320122e3f64e74d8809", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\t\t}", "-\t\tif (System.getProperty(\"java.io.tmpdir\") == null) { //$NON-NLS-1$", "-\t\t\tdispose();", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [Missing system property java.io.tmpdir is required to create Mozilla profile]\"); //$NON-NLS-1$", "-\tif (profileFolder == null) {", "-\t\tint rc = XPCOM.NS_GetServiceManager(result);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t", "-\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "-\t\tresult[0] = 0;\t\t", "-\t\t/* Create a temporary profile */", "-\t\tbyte[] buffer = XPCOM.NS_PROFILE_CONTRACTID.getBytes();", "-\t\tbyte[] aContractID = new byte[buffer.length + 1];", "-\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "-\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIProfile.NS_IPROFILE_IID, result);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "-\t\tserviceManager.Release();", "-", "-\t\tnsIProfile profile = new nsIProfile(result[0]);", "-\t\tresult[0] = 0;", "-\t\tString randomName = \"org.eclipse.swt.browser.Browser_\" + Long.toHexString(System.currentTimeMillis()); //$NON-NLS-1$", "-\t\tchar[] profileName = new char[randomName.length() + 1];", "-\t\trandomName.getChars(0, randomName.length(), profileName, 0);", "-\t\tString folder = new File(System.getProperty(\"java.io.tmpdir\"), randomName).getAbsolutePath();", "-\t\tchar[] nativeProfileDir = new char[folder.length() + 1];", "-\t\tfolder.getChars(0, folder.length(), nativeProfileDir, 0);", "-\t\trc = profile.CreateNewProfile(profileName, nativeProfileDir, null, false);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\trc = profile.SetCurrentProfile(profileName);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t/*", "-\t\t* Feature in Mozilla.  The guest profile created with CreateNewProfile can be seen in a", "-\t\t* standalone Mozilla inside the \"User Profile Dialog\". That behaviour is unwanted.  The", "-\t\t* workaround is to remove the profile from the profile list immediately after it has been", "-\t\t* created. The temporary folder storing the profile must be deleted when the display is disposed.", "-\t\t*/", "-\t\trc = profile.DeleteProfile(profileName, false);", "-\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\tprofile.Release();", "-\t\t", "-\t\tprofileFolder = folder;", "-\t\t", "-\t\tgetDisplay().addListener(SWT.Dispose, new Listener() {", "-\t\t\tpublic void handleEvent(Event e) {", "-\t\t\t\t/* Delete the temporary profile */", "-\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\t\t\t\t\t", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tbyte[] buffer = XPCOM.NS_PROFILE_CONTRACTID.getBytes();", "-\t\t\t\tbyte[] aContractID = new byte[buffer.length + 1];", "-\t\t\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "-\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIProfile.NS_IPROFILE_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "-\t\t\t\tserviceManager.Release();", "-\t\t\t\t", "-\t\t\t\tnsIProfile profile = new nsIProfile(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = profile.ShutDownCurrentProfile(nsIProfile.SHUTDOWN_CLEANSE);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tprofile.Release();\t\t\t", "-", "-\t\t\t\tdeleteFile(new File(profileFolder));", "-\t\t\t\t", "-\t\t\t\t/*", "-\t\t\t\t* Note.  It is possible a new Display and a new Browser be created", "-\t\t\t\t* next.  In that case, a new profile must be created. ", "-\t\t\t\t*/", "-\t\t\t\tprofileFolder = null;", "-\t\t\t}", "-\t\t});", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c71f7f4e3954a983d99be727025a352", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/gtk/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "d9ff0920e38dbe40e7e183fc285b75f5b4dcdb26", "commitAfterChange": "1f80efece3a80bdcdd937ba5e6082d6ded3b47de", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["+\t\t\tdispose();", "+\t\t}", "+\t\tString tempDir = System.getProperty(\"java.io.tmpdir\"); //$NON-NLS-1$", "+\t\tif (tempDir == null) {", "+\t\t\tdispose();", "+\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [Missing system property java.io.tmpdir is required to create Mozilla profile]\"); //$NON-NLS-1$", "-\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [NS_InitEmbedding \"+mozillaPath+\" error \"+rc+\"]\");", "+\t\t\tSWT.error(SWT.ERROR_NO_HANDLES, null, \" [NS_InitEmbedding \"+mozillaPath+\" error \"+rc+\"]\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "-\t\tresult[0] = 0;", "-\t\tbyte[] buffer = XPCOM.NS_WINDOWWATCHER_CONTRACTID.getBytes();", "+\t\tresult[0] = 0;\t\t", "+\t\t/* Create a temporary profile */", "+\t\tbyte[] buffer = XPCOM.NS_PROFILE_CONTRACTID.getBytes();", "+\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "+\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIProfile.NS_IPROFILE_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "+\t\t", "+\t\tnsIProfile profile = new nsIProfile(result[0]);", "+\t\tresult[0] = 0;", "+\t\tString randomName = \"org.eclipse.swt.browser.Browser_\" + Long.toHexString(System.currentTimeMillis()); //$NON-NLS-1$", "+\t\tchar[] profileName = new char[randomName.length() + 1];", "+\t\trandomName.getChars(0, randomName.length(), profileName, 0);", "+\t\tprofileFolder = new File(tempDir, randomName).getAbsolutePath();", "+\t\tchar[] nativeProfileDir = new char[profileFolder.length() + 1];", "+\t\tprofileFolder.getChars(0, profileFolder.length(), nativeProfileDir, 0);", "+\t\trc = profile.CreateNewProfile(profileName, nativeProfileDir, null, false);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\trc = profile.SetCurrentProfile(profileName);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t/*", "+\t\t* Feature in Mozilla.  The guest profile created with CreateNewProfile can be seen in a", "+\t\t* standalone Mozilla inside the \"User Profile Dialog\". That behaviour is unwanted.  The", "+\t\t* workaround is to remove the profile from the profile list immediately after it has been", "+\t\t* created. The temporary folder storing the profile must be deleted when the display is disposed.", "+\t\t*/", "+\t\trc = profile.DeleteProfile(profileName, false);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tprofile.Release();", "+", "+\t\tbuffer = XPCOM.NS_WINDOWWATCHER_CONTRACTID.getBytes();", "+\t\taContractID = new byte[buffer.length + 1];", "-\t\tbuffer = \"Prompt Service\".getBytes();", "+\t\tbuffer = \"Prompt Service\".getBytes(); //$NON-NLS-1$", "-\t\tbuffer = \"Helper App Launcher Dialog\".getBytes();", "+\t\tbuffer = \"Helper App Launcher Dialog\".getBytes(); //$NON-NLS-1$", "-\t\tbuffer = \"Download\".getBytes();", "+\t\tbuffer = \"Download\".getBytes(); //$NON-NLS-1$", "+\tgetDisplay().addListener(SWT.Dispose, new Listener() {", "+\t\tpublic void handleEvent(Event e) {", "+\t\t\t/* Delete the temporary profile */", "+\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\tint rc = XPCOM.NS_GetServiceManager(result);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\t\t\t\t\t\t", "+\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tbyte[] buffer = XPCOM.NS_PROFILE_CONTRACTID.getBytes();", "+\t\t\tbyte[] aContractID = new byte[buffer.length + 1];", "+\t\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "+\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIProfile.NS_IPROFILE_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\tserviceManager.Release();", "+\t\t\t", "+\t\t\tnsIProfile profile = new nsIProfile(result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\trc = profile.ShutDownCurrentProfile(nsIProfile.SHUTDOWN_CLEANSE);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tprofile.Release();\t\t\t", "+", "+\t\t\tdeleteFile(new File(profileFolder));", "+\t\t}", "+\t});", "+}"]}], "num": 49199}
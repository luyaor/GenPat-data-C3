{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c2f34ce1ef67f2bd071b694fdc884c93", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44dec48749ba2244c6d33333905e37ef", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "70ad0effe5f094be7c9f0fc126e3f2ba49252b61", "commitAfterChange": "d04fb3f614d054ed3cf2600f4c59c394b9406469", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": " \t \tprivate int handleTextCallback(int nextHandler, int eRefHandle)", "signatureAfterChange": " \t \tprivate int handleTextCallback(int nextHandler, int eRefHandle)", "diff": ["+\t", "-\t\tControl focus= getFocusControl();", "-\t\tif (focus instanceof Combo)", "-\t\t\treturn ((Combo)focus).sendKeyEvent(nextHandler, eRefHandle);", "-\t\tif (focus instanceof Text)", "-\t\t\treturn ((Text)focus).sendKeyEvent(nextHandler, eRefHandle);", "-\t\t//return OS.CallNextEventHandler(nextHandler, eRefHandle);", "+\t\t", "+\t\tint eventClass= OS.GetEventClass(eRefHandle);", "+\t\tint eventKind= OS.GetEventKind(eRefHandle);", "+\t\t", "+\t\tswitch (eventClass) {", "+\t\tcase OS.kEventClassTextInput:", "+\t\t\tswitch (eventKind) {", "+\t\t\tcase OS.kEventTextInputUnicodeForKeyEvent:", "+\t\t\t\treturn OS.eventNotHandledErr;", "+\t\t\tdefault:", "+\t\t\t\tSystem.out.println(\"Display.handleTextCallback: kEventClassTextInput: unexpected event kind\");", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase OS.kEventClassKeyboard:", "+\t\t\tControl focus= getFocusControl();\t", "+\t\t\tswitch (eventKind) {", "+\t\t\tcase OS.kEventRawKeyDown:", "+\t\t\tcase OS.kEventRawKeyRepeat:", "+\t\t\t\tif (focus != null)", "+\t\t\t\t\treturn focus.sendKeyEvent(SWT.KeyDown, nextHandler, eRefHandle);", "+\t\t\t\tbreak;", "+\t\t\tcase OS.kEventRawKeyUp:", "+\t\t\t\tif (focus != null)", "+\t\t\t\t\treturn focus.sendKeyEvent(SWT.KeyUp, nextHandler, eRefHandle);", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tSystem.out.println(\"Display.handleTextCallback: kEventClassKeyboard: unexpected event kind\");", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tdefault:", "+\t\t\tSystem.out.println(\"Display.handleTextCallback: unexpected event class\");", "+\t\t\tbreak;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faf28c080a7a8fd5a2d92527ee37a0a3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "ebafd3a38c46dd46b5dcf6dfd34949295c064eb5", "commitAfterChange": "c830ba87659f66da0a8654b6fd6e8eaf78f224a3", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "  boolean setKeyState (Event event, int type, PhKeyEvent_t ke)", "signatureAfterChange": "  boolean setKeyState (Event event, int type, PhKeyEvent_t ke)", "diff": ["-\tboolean isNull = false;", "-\t/*", "-\t* Fetuare in Photon.  The key_sym value is not valid when Ctrl", "-\t* or Alt is pressed. The fix is to detect this case and try to", "-\t* use the key_cap value.", "-\t*/", "-\tif ((ke.key_flags & OS.Pk_KF_Sym_Valid) != 0) {", "-\t\tevent.keyCode = Display.translateKey (key = ke.key_sym);", "-\t} else if ((ke.key_flags & OS.Pk_KF_Cap_Valid) != 0) {", "-\t\tevent.keyCode = Display.translateKey (key = ke.key_cap);", "+\tboolean isNull = false;", "+\tif ((ke.key_flags & OS.Pk_KF_Cap_Valid) != 0) {", "+\t\tkey = ke.key_cap;", "+\t\tif ((ke.key_mods & OS.Pk_KM_Num_Lock) == 0) {", "+\t\t\tswitch (key) {", "+\t\t\t\tcase OS.Pk_KP_0: key = OS.Pk_Insert; break;", "+\t\t\t\tcase OS.Pk_KP_1: key = OS.Pk_End; break;", "+\t\t\t\tcase OS.Pk_KP_2: key = OS.Pk_Down; break;", "+\t\t\t\tcase OS.Pk_KP_3: key = OS.Pk_Pg_Down; break;", "+\t\t\t\tcase OS.Pk_KP_4: key = OS.Pk_Left; break;", "+\t\t\t\tcase OS.Pk_KP_5: break;", "+\t\t\t\tcase OS.Pk_KP_6: key = OS.Pk_Right; break;", "+\t\t\t\tcase OS.Pk_KP_7: key = OS.Pk_Home; break;", "+\t\t\t\tcase OS.Pk_KP_8: key = OS.Pk_Up; break;", "+\t\t\t\tcase OS.Pk_KP_9: key = OS.Pk_Pg_Up; break;", "+\t\t\t\tcase OS.Pk_KP_Decimal: key = OS.Pk_Delete; break;", "+\t\t\t}", "+\t\t\t", "+\t\t}", "+\t\tevent.keyCode = Display.translateKey (key);", "-\t\tcase OS.Pk_Break:", "-\t\tcase OS.Pk_Pause:", "-\t\tcase OS.Pk_Print:", "-\t\tcase OS.Pk_Help:", "-\t\tcase OS.Pk_Caps_Lock:", "-\t\tcase OS.Pk_Num_Lock:", "-\t\tcase OS.Pk_Scroll_Lock:\tbreak;", "+\t\t\tbreak;", "-\t\t\t\tif ((ke.key_mods & (OS.Pk_KM_Alt | OS.Pk_KM_Ctrl)) != 0) {", "+\t\t\t}", "+\t\t\t/*", "+\t\t\t* Fetuare in Photon.  The key_sym value is not valid when Ctrl", "+\t\t\t* or Alt is pressed. The fix is to detect this case and try to", "+\t\t\t* use the key_cap value.", "+\t\t\t*/", "+\t\t\tif ((ke.key_mods & (OS.Pk_KM_Alt | OS.Pk_KM_Ctrl)) != 0) {", "+\t\t\t\tif (0 <= key && key <= 0x7F) {", "-\t\t\t\t\t\tevent.character = (char) key;\t\t\t", "+\t\t\t\t\t\tif ((ke.key_flags & OS.Pk_KF_Sym_Valid) != 0) {", "+\t\t\t\t\t\t\tevent.character = (char) ke.key_sym;", "+\t\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tbyte [] buffer = new byte [6];", "-\t\t\t\t\tint length = OS.PhKeyToMb (buffer, ke);", "-\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\tchar [] unicode = Converter.mbcsToWcs (null, buffer);", "-\t\t\t\t\t\tif (unicode.length > 0) event.character = unicode [0];", "-\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tbyte [] buffer = new byte [6];", "+\t\t\t\tint length = OS.PhKeyToMb (buffer, ke);", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tchar [] unicode = Converter.mbcsToWcs (null, buffer);", "+\t\t\t\t\tif (unicode.length > 0) event.character = unicode [0];"]}], "num": 25149}
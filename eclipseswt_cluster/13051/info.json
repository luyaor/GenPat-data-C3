{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de035b34fe7034997f9d85a311d08705", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddf06453eacbccd239a678ec8d41facf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "574ed7b32d53c5a45e5ee1174a71c7c508bd18b6", "commitAfterChange": "d6a90c284cb192f294fd46d0e1ac845bc7bcab7e", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 123, "signatureBeforeChange": "  void sendKeyEvent (int type, GdkEventKey keyEvent)", "signatureAfterChange": "  boolean sendKeyEvent (int type, GdkEventKey keyEvent)", "diff": ["-void sendKeyEvent (int type, GdkEventKey keyEvent) {", "-\tint time = keyEvent.time;", "+", "+boolean sendKeyEvent (int type, GdkEventKey keyEvent) {", "-\t\tevent.time = time;", "+\t\tevent.time = keyEvent.time;", "-\t\tpostEvent (type, event);", "-\t} else {", "-\t\tint string = keyEvent.string;", "-\t\tbyte [] buffer = new byte [length];", "-\t\tOS.memmove (buffer, string, length);", "-\t\tchar [] result = Converter.mbcsToWcs (null, buffer);", "-\t\tint index = 0;", "-\t\twhile (index < result.length) {", "-\t\t\tif (result [index] == 0) break;", "-\t\t\tEvent event = new Event ();", "-\t\t\tevent.time = time;", "-\t\t\tevent.character = result [index];", "-\t\t\tsetInputState (event, keyEvent.state);", "-\t\t\tpostEvent (type, event);", "-\t\t\tindex++;", "-\t\t}", "+\t\tsendEvent (type, event);", "+\t\treturn event.doit;", "+\tbyte [] buffer = new byte [length];", "+\tOS.memmove (buffer, keyEvent.string, length);", "+\tchar [] chars = Converter.mbcsToWcs (null, buffer);", "+\treturn sendIMKeyEvent (type, keyEvent, chars) != null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e61eee34465b9f3d8337101ebb4af2f5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "59c942d907fe880340f3cd92acf69e830cc831bb", "commitAfterChange": "56f17f635b5e99bd6a800e409a11b7ed0d58babd", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "  public boolean setText (String html)", "signatureAfterChange": "  public boolean setText (String html)", "diff": ["-\t * First detect if the nsIWebBrowserStream interface is available, since this interface is frozen.", "-\t * However, this may fail because this interface was only introduced as of mozilla 1.8; if this", "-\t * interface is not found then use the pre-1.8 approach of utilizing nsIDocShell instead. ", "-\t */", "-\tint /*long*/[] result = new int /*long*/[1];", "-\tint rc = webBrowser.QueryInterface (nsIWebBrowserStream.NS_IWEBBROWSERSTREAM_IID, result);", "-\tif (rc == XPCOM.NS_OK) {", "-\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\tnew nsISupports (result[0]).Release ();", "-\t\tresult[0] = 0;", "-", "+\t* If the GRE version is >= 1.8 then use frozen interface nsIWebBrowserStream.", "+\t* If this interface is not available then use the pre-1.8 approach of utilizing", "+\t* nsIDocShell instead.", "+\t*/", "+\tif (Is_1_8) {", "-\t\trc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);", "+\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\tint rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);", "-\t\tresult[0] = 0;", "-", "-\t\trc = XPCOM.NS_GetServiceManager (result);", "+\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\tint rc = XPCOM.NS_GetServiceManager (result);"]}], "num": 13051}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f08eb704d05960dcedd6ddd36a1a03aa", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1c82e0236b649bd56897a0d0f8b57da", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/gtk/org/eclipse/swt/browser/MozillaDelegate.java", "commitBeforeChange": "3550033b997d0fa2bf95b0dc245702b98b5325bd", "commitAfterChange": "ff8ec8fc1484c7eedcc70981458ecc23d5a64f37", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  static void loadAdditionalLibraries (String mozillaPath)", "signatureAfterChange": "  static void loadAdditionalLibraries (String mozillaPath)", "diff": ["-// the following is intentionally commented", "+\tif (Mozilla.IsPre_4) return;", "-//\tif (!Mozilla.IsPre_4) {", "-//\t\tSystem.loadLibrary (\"swt-xulrunner10\"); // get it extracted", "-//\t\tbyte[] bytes = Converter.wcsToMbcs (null, /* path to libswt-xulrunner10.so */ \"\", true); //$NON-NLS-1$", "-//\t\tOS.dlopen (bytes, OS.RTLD_NOW | OS.RTLD_GLOBAL);", "-//\t}", "+\t/*", "+\t* The use of the swt-xulrunner-fix library works around mozilla bug", "+\t* https://bugzilla.mozilla.org/show_bug.cgi?id=720682 (XULRunner 10).", "+\t*/", "+\tString libName = \"libswt-xulrunner-fix.so\"; //$NON-NLS-1$", "+\tFile libsDir = new File (getProfilePath () + \"/libs/\" + Mozilla.OS() + '/' + Mozilla.Arch ()); //$NON-NLS-1$", "+\tFile file = new File (libsDir, libName);", "+\tjava.io.InputStream is = Library.class.getResourceAsStream ('/' + libName);", "+\tif (is != null) {", "+\t\tif (!libsDir.exists ()) {", "+\t\t\tlibsDir.mkdirs ();", "+\t\t}", "+\t\tint read;", "+\t\tbyte [] buffer = new byte [4096];", "+\t\ttry {", "+\t\t\tFileOutputStream os = new FileOutputStream (file);", "+\t\t\twhile ((read = is.read (buffer)) != -1) {", "+\t\t\t\tos.write(buffer, 0, read);", "+\t\t\t}", "+\t\t\tos.close ();", "+\t\t\tis.close ();", "+\t\t} catch (FileNotFoundException e) {", "+\t\t} catch (IOException e) {", "+\t\t}", "+\t}", "+", "+\tif (file.exists ()) {", "+\t\tbyte[] bytes = Converter.wcsToMbcs (null, file.getAbsolutePath (), true);", "+\t\tOS.dlopen (bytes, OS.RTLD_NOW | OS.RTLD_GLOBAL);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4aaf1ba3faaed14d3b61dd2f13744572", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "3fa10aec500a4081c70ceb9a57998af702891944", "commitAfterChange": "a84c4f3464a5f713e18d5891323717c2051b011d", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 130, "signatureBeforeChange": "  void initExternal (String profilePath)", "signatureAfterChange": "  void initExternal (String profilePath)", "diff": ["-\tjava.io.InputStream is = Library.class.getResourceAsStream (\"/external.xpt\"); //$NON-NLS-1$", "+\tjava.io.InputStream is = Library.class.getResourceAsStream (\"/swt.xpt\"); //$NON-NLS-1$", "-\t\tFile file = new File (componentsDir, \"external.xpt\"); //$NON-NLS-1$", "+\t\tFile file = new File (componentsDir, \"swt.xpt\"); //$NON-NLS-1$", "+\t\ttry {", "+\t\t\tFileOutputStream os = new FileOutputStream (file);", "+\t\t\twhile ((read = is.read (buffer)) != -1) {", "+\t\t\t\tos.write(buffer, 0, read);", "+\t\t\t}", "+\t\t\tos.close ();", "+\t\t\tis.close ();", "+\t\t} catch (FileNotFoundException e) {", "+\t\t} catch (IOException e) {", "+\t\t}", "+\t}", "+\tis = Library.class.getResourceAsStream (\"/swt.js\"); //$NON-NLS-1$", "+\tif (is != null) {", "+\t\tif (!componentsDir.exists ()) {", "+\t\t\tcomponentsDir.mkdirs ();", "+\t\t}", "+\t\tint read;", "+\t\tbyte [] buffer = new byte [4096];", "+\t\tFile file = new File (componentsDir, \"swt.js\"); //$NON-NLS-1$", "+\t\ttry {", "+\t\t\tFileOutputStream os = new FileOutputStream (file);", "+\t\t\twhile ((read = is.read (buffer)) != -1) {", "+\t\t\t\tos.write(buffer, 0, read);", "+\t\t\t}", "+\t\t\tos.close ();", "+\t\t\tis.close ();", "+\t\t} catch (FileNotFoundException e) {", "+\t\t} catch (IOException e) {", "+\t\t}", "+\t}", "+\tis = Library.class.getResourceAsStream (\"/chrome.manifest\"); //$NON-NLS-1$", "+\tif (is != null) {", "+\t\tint read;", "+\t\tbyte [] buffer = new byte [4096];", "+\t\tFile file = new File (profilePath, \"chrome.manifest\"); //$NON-NLS-1$"]}], "num": 56026}
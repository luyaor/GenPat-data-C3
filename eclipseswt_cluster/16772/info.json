{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34f60887f4beca45f9b64337478d4b52", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5908d8844d748524d8a490c30ad945df", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Caret.java", "commitBeforeChange": "b300d06e8a006b6b8e628424d8002d7091bea18d", "commitAfterChange": "a0cb6b14f3221651351e12702cd357982811b42b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  boolean drawCaret ()", "signatureAfterChange": "  boolean drawCaret ()", "diff": ["-\tif (!parent.isDrawing (parent.handle)) return false;", "-\tint nWidth = width, nHeight = height;", "-\tif (image != null) {", "-\t\tRectangle rect = image.getBounds ();", "-\t\tnHeight = rect.height;", "-\t}", "-\tif (nWidth <= 0) nWidth = 1;", "+\tif (!parent.isDrawing (parentHandle)) return false;", "+\tint nWidth = width, nHeight = height;", "+\tif (nWidth <= 0) nWidth = 1;", "-\tOS.SetRect(rect, (short) left, (short) top, (short) (left + nWidth), (short) (top + nHeight));", "-\tRGBColor color = new RGBColor ();", "-\tcolor.red = (short) 0xFFFF;", "-\tcolor.green = (short) 0xFFFF;", "-\tcolor.blue = (short) 0xFFFF;", "-\tOS.RGBBackColor (color);", "-\tOS.InvertRect (rect);\t", "+\tif (image == null) {", "+\t\tOS.SetRect(rect, (short) left, (short) top, (short) (left + nWidth), (short) (top + nHeight));", "+\t\tRGBColor color = new RGBColor ();", "+\t\tcolor.red = (short) 0xFFFF;", "+\t\tcolor.green = (short) 0xFFFF;", "+\t\tcolor.blue = (short) 0xFFFF;", "+\t\tOS.RGBBackColor (color);", "+\t\tOS.InvertRect (rect);", "+\t} else {", "+\t\tint imageHandle = image.handle;", "+\t\tnWidth = OS.CGImageGetWidth (imageHandle);", "+\t\tnHeight = OS.CGImageGetHeight (imageHandle);", "+\t\tint bpl = OS.CGImageGetBytesPerRow (imageHandle);", "+\t\tRect bounds = new Rect ();", "+\t\tbounds.right = (short) nWidth;", "+\t\tbounds.bottom = (short) nHeight;", "+\t\tRect portRect = new Rect ();", "+\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, portRect);", "+\t\tleft += portRect.left;", "+\t\ttop += portRect.top;\t\t", "+\t\tOS.SetRect(rect, (short) left, (short) top, (short) (left + nWidth), (short) (top + nHeight));", "+\t\tint [] gWorld = new int [1];", "+\t\tOS.NewGWorldFromPtr (gWorld, OS.k32ARGBPixelFormat, bounds, 0, 0, 0, image.data, bpl);", "+\t\tint [] curPort = new int [1];", "+\t\tint [] curGWorld = new int [1];", "+\t\tOS.GetGWorld (curPort, curGWorld);\t", "+\t\tOS.SetGWorld (gWorld [0], curGWorld [0]);", "+\t\tint portBitMap = OS.GetPortBitMapForCopyBits (port);", "+\t\tint gworldBitMap = OS.GetPortBitMapForCopyBits (gWorld [0]);", "+\t\tOS.OffsetRgn(visibleRgn, portRect.left, portRect.top);", "+\t\tOS.CopyBits (gworldBitMap, portBitMap, bounds, rect, (short) OS.notSrcXor, visibleRgn);", "+\t\tOS.OffsetRgn(visibleRgn, (short) -portRect.left, (short) -portRect.top);", "+\t\tOS.SetGWorld (curPort [0], curGWorld [0]);", "+\t\tOS.DisposeGWorld (gWorld [0]);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "26946127293dc0275acc4cc23a156d97", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "e2ec65253a8e34657e931525b15536b9cdc64d53", "commitAfterChange": "cf338074634c02b2b71ed97fe4d0947e77d380e9", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 85, "signatureBeforeChange": "  void setToolTipText (int widget, String string)", "signatureAfterChange": "  void setToolTipText (int widget, String newString, String oldString)", "diff": ["-void setToolTipText (int /*long*/ widget, String string) {", "+void setToolTipText (int /*long*/ widget, String newString, String oldString) {", "-\tif (string != null && string.length () > 0) {", "-\t\tbuffer = Converter.wcsToMbcs (null, string, true);", "+\tif (newString != null && newString.length () > 0) {", "+\t\tbuffer = Converter.wcsToMbcs (null, newString, true);", "+", "+\t/*", "+\t* Feature in GTK.  There is no API to position a tooltip.", "+\t* The fix is to connect to the size_allocate signal for", "+\t* the tooltip window and position it before it is mapped.", "+\t*/", "+\tOS.gtk_tooltips_force_window (tooltipsHandle);", "+\tint /*long*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (tooltipsHandle);", "+\tif (tipWindow != tooltipWindow) {", "+\t\tOS.g_signal_connect (tipWindow, OS.size_allocate, display.sizeAllocateProc, shellHandle);", "+\t\ttooltipWindow = tipWindow;", "+\t}", "+\t", "+\t/*", "+\t* Bug in GTK.  If the cursor is inside the window when a new", "+\t* tooltip is set and the old tooltip is null, the new tooltip", "+\t* is not displayed until the mouse enters the window.  The", "+\t* fix is to cause and enter/leave event to happen by creating", "+\t* a temporary INPUT_ONLY GDK window.", "+\t*/", "+\tif ((OS.GTK_WIDGET_FLAGS (widget) & OS.GTK_REALIZED) == 0) return;", "+\tif ((OS.GTK_WIDGET_FLAGS (widget) & OS.GTK_VISIBLE) == 0) return;", "+\tif (oldString == null || oldString.length () == 0) {", "+\t\tif (newString != null && newString.length () != 0) {", "+\t\t\tint[] x = new int [1], y = new int [1];", "+\t\t\tint /*long*/ window = OS.gdk_window_at_pointer (x, y);", "+\t\t\tif (window != 0) {", "+\t\t\t\tint /*long*/ [] user_data = new int /*long*/ [1];", "+\t\t\t\tOS.gdk_window_get_user_data (window, user_data);", "+\t\t\t\tif (widget == user_data [0]) {", "+\t\t\t\t\tint /*long*/ parentHandle = OS.gtk_widget_get_parent (widget);", "+\t\t\t\t\tint /*long*/ parentWindow = OS.GTK_WIDGET_WINDOW (parentHandle);", "+\t\t\t\t\tGdkWindowAttr attributes = new GdkWindowAttr ();", "+\t\t\t\t\tattributes.width = OS.GTK_WIDGET_WIDTH (parentHandle);", "+\t\t\t\t\tattributes.height = OS.GTK_WIDGET_HEIGHT (parentHandle);", "+\t\t\t\t\tattributes.event_mask = (0xFFFFFFFF & ~OS.ExposureMask);", "+\t\t\t\t\tattributes.wclass = OS.GDK_INPUT_ONLY;", "+\t\t\t\t\tattributes.window_type = OS.GDK_WINDOW_CHILD;", "+\t\t\t\t\tint enterWindow = OS.gdk_window_new (parentWindow, attributes, OS.GDK_WA_X | OS.GDK_WA_Y);", "+\t\t\t\t\tif (enterWindow != 0) {", "+\t\t\t\t\t\tOS.gdk_window_raise (enterWindow);", "+\t\t\t\t\t\tOS.gdk_window_show (enterWindow);", "+\t\t\t\t\t\tOS.gdk_window_destroy (enterWindow);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7d7be7e9fc6110ced1c62cd2eef6cf7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "a2121a3b36fd9f479b5853f961011d3d772dea1a", "commitAfterChange": "180b63adf3a86ec0ec05574f5a95cc8803880a19", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " void sendIMKeyEvent (int type, XKeyEvent xEvent, byte [] mbcs, char [] chars)", "signatureAfterChange": " boolean sendIMKeyEvent (int type, XKeyEvent xEvent, int textHandle)", "diff": ["+}", "+boolean sendIMKeyEvent (int type, XKeyEvent xEvent, int textHandle) {", "+\tif (length == 0) return true;", "-}", "-void sendIMKeyEvent (int type, XKeyEvent xEvent, byte [] mbcs, char [] chars) {", "-\tint index = 0;", "+\tchar [] chars = Converter.mbcsToWcs (null, buffer);", "+\tint index = 0, count = 0;", "-\t\tif (chars [index] == 0) break;", "+\t\tif (chars [index] == 0) {", "+\t\t\tchars [count] = 0;", "+\t\t\tbreak;", "+\t\t}", "-\t\tpostEvent (type, event);", "+\t\tsendEvent (type, event);", "+\t\tif (event.doit) chars [count++] = chars [index];", "+\tif (count == 0) return false;", "+\tif (textHandle != 0) {", "+\t\t/*", "+\t\t* Bug in Motif. On Solaris and Linux, XmImMbLookupString() clears", "+\t\t* the characters from the IME. This causes the characters to be", "+\t\t* stolen from the text widget. The fix is to detect that the IME", "+\t\t* has been cleared and use XmTextInsert() to insert the stolen", "+\t\t* characters. This problem does not happen on AIX.", "+\t\t*/", "+\t\tbyte [] testBuffer = new byte [5];", "+\t\tint testLength = OS.XmImMbLookupString (textHandle, xEvent, testBuffer, testBuffer.length, unused, unused);", "+\t\tif (testLength == 0 || index != count) {", "+\t\t\tint [] start = new int [1], end = new int [1];", "+\t\t\tOS.XmTextGetSelectionPosition (textHandle, start, end);", "+\t\t\tif (start [0] == end [0]) {", "+\t\t\t\tstart [0] = end [0] = OS.XmTextGetInsertionPosition (textHandle);", "+\t\t\t}", "+\t\t\tboolean warnings = display.getWarnings ();", "+\t\t\tdisplay.setWarnings (false);", "+\t\t\tif (index != count) {", "+\t\t\t\tbuffer = Converter.wcsToMbcs (getCodePage (), chars, true);", "+\t\t\t}", "+\t\t\tOS.XmTextReplace (textHandle, start [0], end [0], buffer);", "+\t\t\tint position = start [0] + count;", "+\t\t\tOS.XmTextSetInsertionPosition (textHandle, position);", "+\t\t\tdisplay.setWarnings (warnings);", "+\t\t}", "+\t\treturn false;", "+\t}", "+\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ca77ef2976be5b6f1192f14f8b5fa1d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "953e10e0355d3dc7d5822c7f864020f36774c727", "commitAfterChange": "c3476e9f1d3f3564f30bf12aa100bab984f287da", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public FontData open ()", "signatureAfterChange": " public FontData open ()", "diff": ["-\tOS.FPShowHideFontPanel ();\t", "+\t/*", "+\t* Feature in the Macintosh.  The Fonts window is not modal and it cannot", "+\t* be accessed through direct API.  The fix is to figure out the Fonts", "+\t* window by checking all available windows and set its modality", "+\t* explicitily.", "+\t*/", "+\tint count = 0;", "+\tint window = OS.GetPreviousWindow (0);", "+\twhile (window != 0) {", "+\t\tcount++;", "+\t\twindow = OS.GetPreviousWindow (window);", "+\t}", "+\tint [] windows = new int [count];", "+\tboolean[] visible = new boolean [count];", "+\tcount = 0;", "+\twindow = OS.GetPreviousWindow (0);", "+\twhile (window != 0) {", "+\t\twindows [count] = window;", "+\t\tvisible [count] = OS.IsWindowVisible (window);", "+\t\tcount++;", "+\t\twindow = OS.GetPreviousWindow (window);", "+\t}", "+\tOS.FPShowHideFontPanel ();", "+\tint fontsWindow = 0;", "+\twindow = OS.GetPreviousWindow (0);", "+\twhile (window != 0 && fontsWindow == 0) {", "+\t\tif (OS.IsWindowVisible (window)) {", "+\t\t\tboolean found = false;", "+\t\t\tfor (int i = 0; i < windows.length; i++) {", "+\t\t\t\tif (windows [i] == window) {", "+\t\t\t\t\tfound = true;", "+\t\t\t\t\tif (!visible [i]) {", "+\t\t\t\t\t\tfontsWindow = window;", "+\t\t\t\t\t\tbreak;\t\t\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (!found) {", "+\t\t\t\tfontsWindow = window;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\twindow = OS.GetPreviousWindow (window);", "+\t}", "+\tif (fontsWindow != 0) {", "+\t\tint inModalKind = OS.kWindowModalityNone;", "+\t\tif ((style & SWT.PRIMARY_MODAL) != 0) inModalKind = OS.kWindowModalityWindowModal;", "+\t\tif ((style & SWT.APPLICATION_MODAL) != 0) inModalKind = OS.kWindowModalityAppModal;", "+\t\tif ((style & SWT.SYSTEM_MODAL) != 0) inModalKind = OS.kWindowModalitySystemModal;", "+\t\tif (inModalKind != OS.kWindowModalityNone) {", "+\t\t\tint inUnavailableWindow = 0;", "+\t\t\tif (parent != null) inUnavailableWindow = OS.GetControlOwner (parent.handle);", "+\t\t\tOS.SetWindowModality (fontsWindow, inModalKind, inUnavailableWindow);", "+\t\t\tOS.SelectWindow (fontsWindow);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e5b204aa61826a88974e7c52add1fab", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGeneratorUI.java", "commitBeforeChange": "ebac5ac4f54306fed9009986f7bcaeafd42136d7", "commitAfterChange": "394b59ba7f80a17d87cb429672cd3e14536c086a", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " \t \tvoid searchFor(String name)", "signatureAfterChange": " \tvoid searchFor(String name)", "diff": ["+\tArrayList flatNodes;", "-", "+\t\tTreeItem[] selection = nodesTree.getSelection();", "+\t\tNode node = null;", "+\t\tif (selection.length != 0) {", "+\t\t\tif (selection[0].getData() instanceof Node) {", "+\t\t\t\tnode = (Node)selection[0].getData();", "+\t\t\t} else {", "+\t\t\t\tif (selection[0].getItemCount() > 0 && selection[0].getItem(0).getData() instanceof Node) {", "+\t\t\t\t\tnode = (Node)selection[0].getItem(0).getData();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tDocument[] documents = gen.getDocuments();", "+\t\tif (node == null && documents.length > 0) node = gen.getDocuments()[0];", "+\t\tif (flatNodes == null) {", "+\t\t\tflatNodes = new ArrayList();", "+\t\t\tfor (int i = 0; i < documents.length; i++) {", "+\t\t\t\taddNodes(documents[i], flatNodes);", "+\t\t\t}", "+\t\t}", "+\t\tint index = 0;", "+\t\twhile (flatNodes.get(index++) != node);\t\t", "+\t\tint start = index;", "+\t\twhile (index < flatNodes.size()) {", "+\t\t\tNode child = (Node)flatNodes.get(index);", "+\t\t\tNode attribName = gen.getIDAttribute(child);", "+\t\t\tif (attribName != null && attribName.getNodeValue().matches(name)) {", "+\t\t\t\tselectNode(child);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tindex++;", "+\t\t}", "+\t\tindex = 0;", "+\t\twhile (index < start) {", "+\t\t\tNode child = (Node)flatNodes.get(index);", "+\t\t\tNode attribName = gen.getIDAttribute(child);", "+\t\t\tif (attribName != null && attribName.getNodeValue().matches(name)) {", "+\t\t\t\tselectNode(child);", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tindex++;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d025daa53da2ab93380d8b02970fde8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "6de31d3123a8a42cd97dc6a937874bae99bc6464", "commitAfterChange": "171babc134a24ff1a3b09c194ff4f1b494378665", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r \r int activate (int widget, int client, int call)", "signatureAfterChange": "\r void extractValues()", "diff": ["-int activate (int widget, int client, int call) {\r", "-\tcancel = client == OS.XmDIALOG_CANCEL_BUTTON;\r", "+void extractValues() {\r", "+\tfilterPath = fullPath = \"\";\r", "+\tint [] argList2 = {OS.XmNdirectory, 0, OS.XmNdirSpec, 0};\r", "+\tOS.XtGetValues (dialog, argList2, argList2.length / 2);\r", "+\t\r", "+\tint xmString3 = argList2 [1];\r", "+\tint ptr = OS.XmStringUnparse (\r", "+\t\txmString3,\r", "+\t\tnull,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tnull,\r", "+\t\t0,\r", "+\t\tOS.XmOUTPUT_ALL);\r", "+\tif (ptr != 0) {\r", "+\t\tint length = OS.strlen (ptr);\r", "+\t\tbyte [] buffer = new byte [length];\r", "+\t\tOS.memmove (buffer, ptr, length);\r", "+\t\tOS.XtFree (ptr);\r", "+\t\t/* Use the character encoding for the default locale */\r", "+\t\tfilterPath = new String (Converter.mbcsToWcs (null, buffer));\r", "+\t}\r", "+\tOS.XmStringFree (xmString3);\r", "+\t\r", "+\tint xmString4 = argList2 [3];\r", "+\tptr = OS.XmStringUnparse (\r", "+\t\txmString4,\r", "+\t\tnull,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tOS.XmCHARSET_TEXT,\r", "+\t\tnull,\r", "+\t\t0,\r", "+\t\tOS.XmOUTPUT_ALL);\r", "+\tif (ptr != 0) {\r", "+\t\tint length = OS.strlen (ptr);\r", "+\t\tbyte [] buffer = new byte [length];\r", "+\t\tOS.memmove (buffer, ptr, length);\r", "+\t\tOS.XtFree (ptr);\r", "+\t\t/* Use the character encoding for the default locale */\r", "+\t\tfullPath = new String (Converter.mbcsToWcs (null, buffer));\r", "+\t}\r", "+\tOS.XmStringFree (xmString4);\r", "+\t\r", "+\tint length = filterPath.length ();\r", "+\tif (length != 0 && filterPath.charAt (length - 1) == '/') {\r", "+\t\tfilterPath = filterPath.substring (0, length - 1);\r", "+\t\tint index = fullPath.lastIndexOf ('/');\r", "+\t\tfileName = fullPath.substring (index + 1, fullPath.length ());\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b27729444da8f0b09b89125ca37fdccb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "d7f52e244190d0233789b162a34cf1d32f1aac26", "commitAfterChange": "ab790bd82f5e4890a492355780ef36249213722b", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  void setImages (Image image, Image [] images)", "signatureAfterChange": "  void setImages (Image image, Image [] images)", "diff": ["-\t//TODO", "+\tint encoder = OS.gcnew_TiffBitmapEncoder ();", "+\tint frames = OS.BitmapEncoder_Frames (encoder);", "+\tif (image != null) {", "+\t\tint frame = OS.BitmapFrame_Create (image.handle);", "+\t\tOS.BitmapFrameCollection_Add (frames, frame);", "+\t\tOS.GCHandle_Free (frame);", "+\t}", "+\tif (images != null) {", "+\t\tif (images.length > 1) {", "+\t\t\tImageData [] datas = null;", "+\t\t\tImage [] bestImages = new Image [images.length];", "+\t\t\tSystem.arraycopy (images, 0, bestImages, 0, images.length);", "+\t\t\tdatas = new ImageData [images.length];", "+\t\t\tfor (int i=0; i<datas.length; i++) {", "+\t\t\t\tdatas [i] = images [i].getImageData ();", "+\t\t\t}", "+\t\t\timages = bestImages;", "+\t\t\tsort (images, datas);", "+\t\t}", "+\t\tfor (int i = 0; i < images.length; i++) {", "+\t\t\tint frame = OS.BitmapFrame_Create (images [i].handle);", "+\t\t\tOS.BitmapFrameCollection_Add (frames, frame);", "+\t\t\tOS.GCHandle_Free (frame);", "+\t\t}", "+\t}", "+\tOS.GCHandle_Free (frames);", "+\tint stream = OS.gcnew_MemoryStream ();", "+\tOS.BitmapEncoder_Save (encoder, stream);", "+\tOS.GCHandle_Free (encoder);", "+\tint decoder = OS.BitmapDecoder_Create (stream, OS.BitmapCreateOptions_None, OS.BitmapCacheOption_Default);", "+\tframes = OS.BitmapDecoder_Frames (decoder);", "+\tint icon = OS.BitmapFrameCollection_default (frames, 0);", "+\tOS.GCHandle_Free (frames);", "+\tOS.GCHandle_Free (decoder);", "+\tOS.Window_Icon(shellHandle, icon);", "+\tOS.GCHandle_Free (icon);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c787fd9b364ff2e40c15c6e106685ac3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/GridLayout.java", "commitBeforeChange": "d68f2e34d91d2ae1a99b0c89e4caa148a068c2e9", "commitAfterChange": "ef6bac7bddd91ebd2f8fa756a2aae2c03abe06a0", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  Point layout (Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)", "signatureAfterChange": "  Point layout (Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)", "diff": ["+\t/* Wrapping */", "+\tif (move) {", "+\t\tfor (int j=0; j<columnCount; j++) {", "+\t\t\tfor (int i=0; i<rowCount; i++) {", "+\t\t\t\tGridData data = getData (grid, i, j, rowCount, columnCount, false);", "+\t\t\t\tif (data != null) {", "+\t\t\t\t\tif (data.heightHint == SWT.DEFAULT) {", "+\t\t\t\t\t\tControl child = grid [i][j];", "+\t\t\t\t\t\t//TEMPORARY CODE", "+\t\t\t\t\t\tif ((child.getStyle () & SWT.WRAP) != 0) {", "+\t\t\t\t\t\t\tint hSpan = Math.max (1, Math.min (data.horizontalSpan, columnCount));", "+\t\t\t\t\t\t\tint currentWidth = 0;", "+\t\t\t\t\t\t\tfor (int k=0; k<hSpan; k++) {", "+\t\t\t\t\t\t\t\tcurrentWidth += widths [j-k];", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tcurrentWidth += (hSpan - 1) * horizontalSpacing - data.horizontalIndent;", "+\t\t\t\t\t\t\tif ((currentWidth != data.cacheWidth && data.horizontalAlignment == SWT.FILL) ||", "+\t\t\t\t\t\t\t\t(data.cacheWidth > currentWidth)) { ", "+\t\t\t\t\t\t\t\tint trim = 0;", "+\t\t\t\t\t\t\t\tif (child instanceof Scrollable) {", "+\t\t\t\t\t\t\t\t\tRectangle rect = ((Scrollable) child).computeTrim (0, 0, 0, 0);", "+\t\t\t\t\t\t\t\t\ttrim = rect.width;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\ttrim = child.getBorderWidth () * 2;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcurrentWidth = Math.max (0, currentWidth - trim);", "+\t\t\t\t\t\t\t\tPoint size = child.computeSize (currentWidth, data.heightHint, true);", "+\t\t\t\t\t\t\t\tdata.cacheWidth = size.x;", "+\t\t\t\t\t\t\t\tdata.cacheHeight = size.y;", "+\t\t\t\t\t\t\t\tdata.flushCache = true;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\t"]}], "num": 16772}
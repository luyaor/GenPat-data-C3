{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27796f0214d5997270e861daec7d6703", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3065d6230fe9633cdc452048ee27b1e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "44b3178ffce3d19c1b2c77898fcf07c89beddda5", "commitAfterChange": "f51b769b025a9b25c5d56c48323852378a03a4ba", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 118, "signatureBeforeChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["+", "+\t\t/*", "+\t\t * If htmlBytes is not null then there is html from a previous setText() call", "+\t\t * waiting to be set into the about:blank page once it has completed loading. ", "+\t\t */", "+\t\tif (htmlBytes != null) {", "+\t\t\tnsIRequest req = new nsIRequest (aRequest);", "+\t\t\tint /*long*/ name = XPCOM.nsEmbedCString_new ();", "+\t\t\trc = req.GetName (name);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tint length = XPCOM.nsEmbedCString_Length (name);", "+\t\t\tint /*long*/ buffer = XPCOM.nsEmbedCString_get (name);", "+\t\t\tbyte[] dest = new byte[length];", "+\t\t\tXPCOM.memmove (dest, buffer, length);", "+\t\t\tString url = new String (dest);", "+\t\t\tXPCOM.nsEmbedCString_delete (name);", "+", "+\t\t\tif (url.startsWith (ABOUT_BLANK)) {", "+\t\t\t\t/*", "+\t\t\t\t * Setting mozilla's content with nsIWebBrowserStream invalidates the ", "+\t\t\t\t * DOM listeners that were hooked on it (about:blank), so remove them and", "+\t\t\t\t * add new ones after the content has been set.", "+\t\t\t\t */", "+\t\t\t\tunhookDOMListeners ();", "+", "+\t\t\t\trc = XPCOM.NS_GetServiceManager (result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\trc = serviceManager.GetService (XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\t\t\tserviceManager.Release ();", "+", "+\t\t\t\tnsIIOService ioService = new nsIIOService (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\t/*", "+\t\t\t\t* Note.  Mozilla ignores LINK tags used to load CSS stylesheets", "+\t\t\t\t* when the URI protocol for the nsInputStreamChannel", "+\t\t\t\t* is about:blank.  The fix is to specify the file protocol.", "+\t\t\t\t*/", "+\t\t\t\tbyte[] aString = MozillaDelegate.wcsToMbcs (null, URI_FROMMEMORY, false);", "+\t\t\t\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);", "+\t\t\t\trc = ioService.NewURI (aSpec, null, 0, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\t\t\tXPCOM.nsEmbedCString_delete (aSpec);", "+\t\t\t\tioService.Release ();", "+", "+\t\t\t\tnsIURI uri = new nsIURI (result[0]);", "+\t\t\t\tresult[0] = 0;", "+", "+\t\t\t\trc = webBrowser.QueryInterface (nsIWebBrowserStream.NS_IWEBBROWSERSTREAM_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\t\t\t\tnsIWebBrowserStream stream = new nsIWebBrowserStream (result[0]);", "+\t\t\t\tresult[0] = 0;", "+", "+\t\t\t\tbyte[] contentTypeBuffer = MozillaDelegate.wcsToMbcs (null, \"text/html\", true); // $NON-NLS-1$", "+\t\t\t\tint /*long*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);", "+", "+\t\t\t\trc = stream.OpenStream (uri.getAddress (), aContentType);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tint /*long*/ ptr = C.malloc (htmlBytes.length);", "+\t\t\t\tXPCOM.memmove (ptr, htmlBytes, htmlBytes.length);", "+\t\t\t\tint pageSize = 8192;", "+\t\t\t\tint pageCount = htmlBytes.length / pageSize + 1;", "+\t\t\t\tint /*long*/ current = ptr;", "+\t\t\t\tfor (int i = 0; i < pageCount; i++) {", "+\t\t\t\t\tlength = i == pageCount - 1 ? htmlBytes.length % pageSize : pageSize;", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\trc = stream.AppendToStream (current, length);", "+\t\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\t}", "+\t\t\t\t\tcurrent += pageSize;", "+\t\t\t\t}", "+\t\t\t\trc = stream.CloseStream ();", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tC.free (ptr);", "+\t\t\t\tXPCOM.nsEmbedCString_delete (aContentType);", "+\t\t\t\tstream.Release ();", "+\t\t\t\turi.Release ();", "+\t\t\t\thtmlBytes = null;", "+", "+\t\t\t\trc = webBrowser.GetContentDOMWindow (result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\t\t\tboolean isTop = result[0] == domWindow.getAddress ();", "+\t\t\t\tnew nsISupports (result[0]).Release ();", "+\t\t\t\tresult[0] = 0;", "+", "+\t\t\t\trc = domWindow.QueryInterface (nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\t\t\tnsIDOMEventTarget target = new nsIDOMEventTarget (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\thookDOMListeners (target, isTop);", "+\t\t\t\ttarget.Release ();", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2756a2c1ef06e2441c0165580990d84a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "3d76437e9be9ca8a536ed794ffc0967ce5bb9920", "commitAfterChange": "0b913a59e399c16554e58b7a500e5a396ebf8265", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 110, "signatureBeforeChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["+", "+\t\t/*", "+\t\t * Add the page's nsIDOMWindow to the collection of windows that will", "+\t\t * have DOM listeners added to them later on in the page loading", "+\t\t * process.  These listeners cannot be added yet because the", "+\t\t * nsIDOMWindow is not ready to take them at this stage.", "+\t\t */", "+\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\tnsIWebProgress progress = new nsIWebProgress (aWebProgress);", "+\t\tint rc = progress.GetDOMWindow (result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\tunhookedDOMWindows.addElement (new LONG (result[0]));", "+\t\t/*", "+\t\t* If this page's nsIDOMWindow handle is still in unhookedDOMWindows then", "+\t\t* add its DOM listeners now.  It's possible for this to happen since", "+\t\t* there is no guarantee that a STATE_TRANSFERRING state change will be", "+\t\t* received for every window in a page, which is when these listeners", "+\t\t* are typically added.", "+\t\t*/", "+\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\tnsIWebProgress progress = new nsIWebProgress (aWebProgress);", "+\t\tint rc = progress.GetDOMWindow (result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\tnsIDOMWindow domWindow = new nsIDOMWindow (result[0]);", "+", "+\t\tLONG ptrObject = new LONG (result[0]);", "+\t\tresult[0] = 0;", "+\t\tint index = unhookedDOMWindows.indexOf (ptrObject);", "+\t\tif (index != -1) {", "+\t\t\trc = domWindow.GetTop (result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\t\tboolean isTop = result[0] == domWindow.getAddress ();", "+\t\t\tnew nsISupports (result[0]).Release ();", "+\t\t\tresult[0] = 0;", "+", "+\t\t\trc = domWindow.QueryInterface (nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+", "+\t\t\tnsIDOMEventTarget target = new nsIDOMEventTarget (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\thookDOMListeners (target, isTop);", "+\t\t\ttarget.Release ();", "+", "+\t\t\t/*", "+\t\t\t* Remove and unreference the nsIDOMWindow from the collection of windows", "+\t\t\t* that are waiting to have DOM listeners hooked on them. ", "+\t\t\t*/", "+\t\t\tunhookedDOMWindows.remove (ptrObject);", "+\t\t\tnew nsISupports (ptrObject.value).Release ();", "+\t\t}", "+\t\tdomWindow.Release ();", "+", "-\t\t\tint rc = req.GetName (name);", "+\t\t\trc = req.GetName (name);", "-\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t", "+", "-\t", "+", "-\t\t\t\t", "+", "-\t", "+", "-\t\t\t\t", "+", "-\t", "+", "-\t\thookDOMListeners ();", "+\t\t/*", "+\t\t* Hook DOM listeners to the page's nsIDOMWindow here because this is", "+\t\t* the earliest opportunity to do so.    ", "+\t\t*/", "+\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\tnsIWebProgress progress = new nsIWebProgress (aWebProgress);", "+\t\tint rc = progress.GetDOMWindow (result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\tnsIDOMWindow domWindow = new nsIDOMWindow (result[0]);", "+", "+\t\tLONG ptrObject = new LONG (result[0]);", "+\t\tresult[0] = 0;", "+\t\tint index = unhookedDOMWindows.indexOf (ptrObject);", "+\t\tif (index != -1) {", "+\t\t\trc = domWindow.GetTop (result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\t\tboolean isTop = result[0] == domWindow.getAddress ();", "+\t\t\tnew nsISupports (result[0]).Release ();", "+\t\t\tresult[0] = 0;", "+", "+\t\t\trc = domWindow.QueryInterface (nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+", "+\t\t\tnsIDOMEventTarget target = new nsIDOMEventTarget (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\thookDOMListeners (target, isTop);", "+\t\t\ttarget.Release ();", "+", "+\t\t\t/*", "+\t\t\t* Remove and unreference the nsIDOMWindow from the collection of windows", "+\t\t\t* that are waiting to have DOM listeners hooked on them. ", "+\t\t\t*/", "+\t\t\tunhookedDOMWindows.remove (ptrObject);", "+\t\t\tnew nsISupports (ptrObject.value).Release ();", "+\t\t}", "+\t\tdomWindow.Release ();", "-}\t", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19f1888c4e8a1de383d839a116fce848", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "4782372115ecc2c5d5fcd4afc2822f4541a873b7", "commitAfterChange": "9524f8f97224b1a886d71621a713f7ad07d4c65a", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 110, "signatureBeforeChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["-\t\t* Feature on Mozilla.  When a request is redirected (STATE_REDIRECTING),", "+\t\t * If htmlBytes is not null then there is html from a previous setText() call", "+\t\t * waiting to be set into the about:blank page once it has completed loading. ", "+\t\t */", "+\t\tif (htmlBytes != null) {", "+\t\t\tnsIRequest req = new nsIRequest (aRequest);", "+\t\t\tint /*long*/ name = XPCOM.nsEmbedCString_new ();", "+\t\t\tint rc = req.GetName (name);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tint length = XPCOM.nsEmbedCString_Length (name);", "+\t\t\tint /*long*/ buffer = XPCOM.nsEmbedCString_get (name);", "+\t\t\tbyte[] dest = new byte[length];", "+\t\t\tXPCOM.memmove (dest, buffer, length);", "+\t\t\tXPCOM.nsEmbedCString_delete (name);", "+\t\t\tString url = new String (dest);", "+", "+\t\t\tif (url.equals (ABOUT_BLANK)) {", "+\t\t\t\t/*", "+\t\t\t\t * Setting the browser's content with nsIWebBrowserStream invalidates the ", "+\t\t\t\t * DOM listeners that were hooked on it (about:blank), so remove them and", "+\t\t\t\t * add new ones after the content has been set.", "+\t\t\t\t */", "+\t\t\t\tunhookDOMListeners ();", "+", "+\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\t\trc = XPCOM.NS_GetServiceManager (result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\trc = serviceManager.GetService (XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\t\t\tserviceManager.Release ();", "+\t", "+\t\t\t\tnsIIOService ioService = new nsIIOService (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\t/*", "+\t\t\t\t* Note.  Mozilla ignores LINK tags used to load CSS stylesheets", "+\t\t\t\t* when the URI protocol for the nsInputStreamChannel", "+\t\t\t\t* is about:blank.  The fix is to specify the file protocol.", "+\t\t\t\t*/", "+\t\t\t\tbyte[] aString = MozillaDelegate.wcsToMbcs (null, URI_FROMMEMORY, false);", "+\t\t\t\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);", "+\t\t\t\trc = ioService.NewURI (aSpec, null, 0, result);", "+\t\t\t\tXPCOM.nsEmbedCString_delete (aSpec);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\t\t\tioService.Release ();", "+\t\t\t\t", "+\t\t\t\tnsIURI uri = new nsIURI (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t", "+\t\t\t\trc = webBrowser.QueryInterface (nsIWebBrowserStream.NS_IWEBBROWSERSTREAM_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\t\t\tnsIWebBrowserStream stream = new nsIWebBrowserStream (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\t", "+\t\t\t\tbyte[] contentTypeBuffer = MozillaDelegate.wcsToMbcs (null, \"text/html\", true); // $NON-NLS-1$", "+\t\t\t\tint /*long*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);", "+\t", "+\t\t\t\trc = stream.OpenStream (uri.getAddress (), aContentType);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tint /*long*/ ptr = C.malloc (htmlBytes.length);", "+\t\t\t\tXPCOM.memmove (ptr, htmlBytes, htmlBytes.length);", "+\t\t\t\tint pageSize = 8192;", "+\t\t\t\tint pageCount = htmlBytes.length / pageSize + 1;", "+\t\t\t\tint /*long*/ current = ptr;", "+\t\t\t\tfor (int i = 0; i < pageCount; i++) {", "+\t\t\t\t\tlength = i == pageCount - 1 ? htmlBytes.length % pageSize : pageSize;", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\trc = stream.AppendToStream (current, length);", "+\t\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\t}", "+\t\t\t\t\tcurrent += pageSize;", "+\t\t\t\t}", "+\t\t\t\trc = stream.CloseStream ();", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+", "+\t\t\t\tC.free (ptr);", "+\t\t\t\tXPCOM.nsEmbedCString_delete (aContentType);", "+\t\t\t\tstream.Release ();", "+\t\t\t\turi.Release ();", "+\t\t\t\thtmlBytes = null;", "+\t\t\t\thookDOMListeners ();", "+\t\t\t}", "+\t\t}", "+", "+\t\t/*", "+\t\t* Feature in Mozilla.  When a request is redirected (STATE_REDIRECTING),"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c26e13fdb94fe0d2040a3565c75c9f0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "54aed4fbd5df18a764a007813a3707f09efb92d5", "commitAfterChange": "4508514c485affa97e5c71dcb79f80de914f7288", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 110, "signatureBeforeChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["-\t\t * If htmlBytes is not null then there is html from a previous setText() call", "-\t\t * waiting to be set into the about:blank page once it has completed loading. ", "-\t\t */", "-\t\tif (htmlBytes != null) {", "-\t\t\tnsIRequest req = new nsIRequest (aRequest);", "-\t\t\tint /*long*/ name = XPCOM.nsEmbedCString_new ();", "-\t\t\trc = req.GetName (name);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tint length = XPCOM.nsEmbedCString_Length (name);", "-\t\t\tint /*long*/ buffer = XPCOM.nsEmbedCString_get (name);", "-\t\t\tbyte[] dest = new byte[length];", "-\t\t\tXPCOM.memmove (dest, buffer, length);", "-\t\t\tXPCOM.nsEmbedCString_delete (name);", "-\t\t\tString url = new String (dest);", "-", "-\t\t\tif (url.startsWith (ABOUT_BLANK)) {", "-\t\t\t\t/*", "-\t\t\t\t * Setting the browser's content with nsIWebBrowserStream invalidates the ", "-\t\t\t\t * DOM listeners that were hooked on it (about:blank), so remove them and", "-\t\t\t\t * add new ones after the content has been set.", "-\t\t\t\t */", "-\t\t\t\tunhookDOMListeners ();", "-", "-\t\t\t\trc = XPCOM.NS_GetServiceManager (result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = serviceManager.GetService (XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\tserviceManager.Release ();", "-", "-\t\t\t\tnsIIOService ioService = new nsIIOService (result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\t/*", "-\t\t\t\t* Note.  Mozilla ignores LINK tags used to load CSS stylesheets", "-\t\t\t\t* when the URI protocol for the nsInputStreamChannel", "-\t\t\t\t* is about:blank.  The fix is to specify the file protocol.", "-\t\t\t\t*/", "-\t\t\t\tbyte[] aString = MozillaDelegate.wcsToMbcs (null, URI_FROMMEMORY, false);", "-\t\t\t\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);", "-\t\t\t\trc = ioService.NewURI (aSpec, null, 0, result);", "-\t\t\t\tXPCOM.nsEmbedCString_delete (aSpec);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\tioService.Release ();", "-", "-\t\t\t\tnsIURI uri = new nsIURI (result[0]);", "-\t\t\t\tresult[0] = 0;", "-", "-\t\t\t\trc = webBrowser.QueryInterface (nsIWebBrowserStream.NS_IWEBBROWSERSTREAM_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\tnsIWebBrowserStream stream = new nsIWebBrowserStream (result[0]);", "-\t\t\t\tresult[0] = 0;", "-", "-\t\t\t\tbyte[] contentTypeBuffer = MozillaDelegate.wcsToMbcs (null, \"text/html\", true); // $NON-NLS-1$", "-\t\t\t\tint /*long*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);", "-", "-\t\t\t\trc = stream.OpenStream (uri.getAddress (), aContentType);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tint /*long*/ ptr = C.malloc (htmlBytes.length);", "-\t\t\t\tXPCOM.memmove (ptr, htmlBytes, htmlBytes.length);", "-\t\t\t\tint pageSize = 8192;", "-\t\t\t\tint pageCount = htmlBytes.length / pageSize + 1;", "-\t\t\t\tint /*long*/ current = ptr;", "-\t\t\t\tfor (int i = 0; i < pageCount; i++) {", "-\t\t\t\t\tlength = i == pageCount - 1 ? htmlBytes.length % pageSize : pageSize;", "-\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\trc = stream.AppendToStream (current, length);", "-\t\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\t}", "-\t\t\t\t\tcurrent += pageSize;", "-\t\t\t\t}", "-\t\t\t\trc = stream.CloseStream ();", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-", "-\t\t\t\tC.free (ptr);", "-\t\t\t\tXPCOM.nsEmbedCString_delete (aContentType);", "-\t\t\t\tstream.Release ();", "-\t\t\t\turi.Release ();", "-\t\t\t\thtmlBytes = null;", "-\t\t\t\thookDOMListeners ();", "-\t\t\t}", "-\t\t}", "-", "-\t\t/*"]}], "num": 26922}
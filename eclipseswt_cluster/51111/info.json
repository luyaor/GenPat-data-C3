{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "78ceaf77bcb3504fd05ac9ce7cad048a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "43a5a386c44a35984043f945a73bd9e0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "165ef20666a328e69332f6011a32b35bb8e1e01a", "commitAfterChange": "883e5deef3becc19a00d940a486c36754f7b23e5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void copyArea(int x, int y, int width, int height, int destX, int destY)", "signatureAfterChange": " public void copyArea(int x, int y, int width, int height, int destX, int destY)", "diff": ["-\t\t\tint rid = OS.PtWidgetRid(widget);\r", "-\t\t\tif (rid == 0) return;\r", "-\t\t\tshort[] unused = new short[1];\r", "-\t\t\tint[] child_tiles_buffer = new int[1];\r", "-\t\t\tint child_clip = getClipping(widget, data.topWidget, true, true, child_tiles_buffer);\r", "-\t\t\tint child_tiles = child_tiles_buffer[0];\r", "+\t\t\tint child_clip = getClipping(widget, data.topWidget, true, true, null);\r", "-\t\t\t\tOS.PhBlit(rid, rect, delta);\r", "+\t\t\t\tOS.PtBlit(widget, rect, delta);\r", "-\t\t\t\t/*\r", "-\t\t\t\t* Determine source rectangles that should be copied considering\r", "-\t\t\t\t* the clipping region.\r", "-\t\t\t\t*/\r", "-\t\t\t\tint dest = OS.PhGetTile();\r", "-\t\t\t\tOS.memmove(dest, rect, PhRect_t.sizeof);\r", "-\t\t\t\tOS.PhTranslateTiles(dest, delta);\r", "+\t\t\t\tint srcTile = OS.PhGetTile();\r", "+\t\t\t\tOS.memmove(srcTile, rect, PhRect_t.sizeof);\r", "-\t\t\t\t\t\tclip = OS.PhIntersectTilings(clip, child_clip, unused);\r", "+\t\t\t\t\t\tshort[] unused = new short[1];\r", "+\t\t\t\t\t\tint newClip = OS.PhIntersectTilings(clip, child_clip, unused);\r", "+\t\t\t\t\t\tOS.PhFreeTiles(clip);\r", "+\t\t\t\t\t\tclip = newClip;\r", "-\t\t\t\tint dest_tiles = OS.PhIntersectTilings(dest, clip, unused);\r", "+\t\t\t\tOS.PtClippedBlit(widget, srcTile, delta, clip);\r", "-\t\t\t\tOS.PhFreeTiles(dest);\r", "-\t\t\t\tPhPoint_t inverseDelta = new PhPoint_t();\r", "-\t\t\t\tinverseDelta.x = (short)(-delta.x);\r", "-\t\t\t\tinverseDelta.y = (short)(-delta.y);\r", "-\t\t\t\tOS.PhTranslateTiles(dest_tiles, inverseDelta);\r", "-\t\t\t\t\r", "-\t\t\t\t/* Exclude rectangles obscured by widgets. */\r", "-\t\t\t\tif (child_tiles != 0) {\r", "-\t\t\t\t\tdest_tiles = OS.PhClipTilings(dest_tiles, child_tiles, null);\r", "-\t\t\t\t}\r", "-\t\t\t\t\r", "-\t\t\t\t/* Copy rectangles. */\r", "-\t\t\t\tint[] src_rects_count = new int[1];\r", "-\t\t\t\tint src_rects = OS.PhTilesToRects(dest_tiles, src_rects_count);\r", "-\t\t\t\tOS.PhFreeTiles(dest_tiles);\r", "-\t\t\t\tPhRect_t src_rect = new PhRect_t();\r", "-\t\t\t\tfor (int i = 0; i<src_rects_count[0]; i++) {\r", "-\t\t\t\t\tOS.memmove(src_rect, src_rects + (i * PhRect_t.sizeof), PhRect_t.sizeof);\r", "-\t\t\t\t\tOS.PhBlit(rid, src_rect, delta);\r", "-\t\t\t\t}\r", "-\t\t\t\tOS.free(src_rects);\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\t/*\r", "-\t\t\t* Damage destination rectangles that where obscured by widgets\r", "-\t\t\t* in the source rectangle.\r", "-\t\t\t*/\r", "-\t\t\tint src = OS.PhGetTile();\r", "-\t\t\tOS.memmove(src, rect, PhRect_t.sizeof);\r", "-\t\t\tint widget_damage_tiles = 0;\r", "-\t\t\tif (child_tiles != 0) {\r", "-\t\t\t\twidget_damage_tiles = OS.PhIntersectTilings(src, child_tiles, unused);\r", "-\t\t\t\tOS.PhTranslateTiles(widget_damage_tiles, delta);\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\t/*\r", "-\t\t\t* Damage the source rectangle excluding the intersecting area\r", "-\t\t\t* with the destination rectangle.\r", "-\t\t\t*/\r", "-\t\t\tint src_damage_tiles;\r", "-\t\t\tif (!overlaps) {\r", "-\t\t\t\tsrc_damage_tiles = src;\r", "-\t\t\t} else {\r", "-\t\t\t\tint dest = OS.PhGetTile();\r", "-\t\t\t\tOS.memmove(dest, rect, PhRect_t.sizeof);\r", "-\t\t\t\tOS.PhTranslateTiles(dest, delta);\r", "-\t\t\t\tsrc_damage_tiles = OS.PhClipTilings(src, dest, null);\r", "-\t\t\t\tOS.PhFreeTiles(dest);\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\t/* Merge all damage rectangles. */\r", "-\t\t\tint damage_tiles = src_damage_tiles;\r", "-\t\t\tif (widget_damage_tiles != 0) {\r", "-\t\t\t\tdamage_tiles = OS.PhAddMergeTiles(src_damage_tiles, widget_damage_tiles, null);\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\t/*\r", "-\t\t\t* TEMPORARY CODE\r", "-\t\t\t* \r", "-\t\t\t* Damage areas that were obscure and became visible. Photon\r", "-\t\t\t* post expose events for those areas, but these events can not\r", "-\t\t\t* be flushed with PtFlush().\r", "-\t\t\t*/\r", "-\t\t\tsrc = OS.PhGetTile();\r", "-\t\t\tOS.memmove(src, rect, PhRect_t.sizeof);\r", "-\t\t\tint widget_tile = OS.PhGetTile();\r", "-\t\t\tOS.PtWidgetCanvas(widget, widget_tile); // NOTE: widget_tile->rect\r", "-\t\t\tOS.PhDeTranslateTiles(widget_tile, widget_tile); // NOTE: widget_tile->rect.ul\r", "-\t\t\tint obscured_tiles = OS.PhClipTilings(src, widget_tile, null);\r", "-\t\t\tOS.PhFreeTiles(widget_tile);\r", "-\t\t\tOS.PhTranslateTiles(obscured_tiles, delta);\r", "-\t\t\tdamage_tiles = OS.PhAddMergeTiles(damage_tiles, obscured_tiles, null);\r", "-\r", "-\t\t\t/* Exclude damage rectangles obscured by widgets. */\r", "-\t\t\tdamage_tiles = OS.PhClipTilings(damage_tiles, child_tiles, null);\r", "-\r", "-\t\t\tOS.PhFreeTiles (child_tiles);\r", "-\r", "-\t\t\t/* Damage rectangles. */\t\t\t\r", "-\t\t\tint[] damage_rects_count = new int[1];\r", "-\t\t\tint damage_rects = OS.PhTilesToRects(damage_tiles, damage_rects_count);\r", "-\t\t\tOS.PhFreeTiles(damage_tiles);\r", "-\t\t\tfor (int i=0; i<damage_rects_count[0]; i++) {\r", "-\t\t\t\tOS.memmove(rect, damage_rects + (i * PhRect_t.sizeof), PhRect_t.sizeof);\r", "-\t\t\t\tOS.PtDamageExtent (widget, rect);\r", "-\t\t\t}\r", "-\t\t\tOS.free(damage_rects);\r", "+\t\t\t}\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8160768d6960caa38e588fd435ce938", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "800f0db681dd224b4823f551f85cc352d9839ab0", "commitAfterChange": "fc972a2dd70ea438e7d24a69180b16968356c7c2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void copyArea(int x, int y, int width, int height, int destX, int destY)", "signatureAfterChange": " public void copyArea(int x, int y, int width, int height, int destX, int destY)", "diff": ["-\t\t\tint child_clip = getClipping(widget, data.topWidget, true, true);\r", "+\t\t\tshort[] unused = new short[1];\r", "+\t\t\tint[] child_tiles = new int[1];\r", "+\t\t\tint child_clip = getClipping(widget, data.topWidget, true, true, child_tiles);\r", "+\t\t\t\t/*\r", "+\t\t\t\t* Determine source rectangles that should be copied considering\r", "+\t\t\t\t* the clipping region.\r", "+\t\t\t\t*/\r", "-\t\t\t\tshort[] unused = new short[1];\r", "+\t\t\t\t\r", "+\t\t\t\t/* Exclude rectangles obscured by widgets. */\r", "+\t\t\t\tdest_tiles = OS.PhClipTilings(dest_tiles, child_tiles[0], null);\r", "+\t\t\t\t\r", "+\t\t\t\t/* Copy rectangles. */\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* Damage destination rectangles that where obscured by widgets\r", "+\t\t\t* in the source rectangle.\r", "+\t\t\t*/\r", "+\t\t\tint src = OS.PhGetTile();\r", "+\t\t\tOS.memmove(src, rect, PhRect_t.sizeof);\r", "+\t\t\tint widget_damage_tiles = OS.PhIntersectTilings(src, child_tiles[0], unused);\r", "+\t\t\tOS.PhTranslateTiles(widget_damage_tiles, delta);\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* Damage the source rectangle excluding the intersecting area\r", "+\t\t\t* with the destination rectangle.\r", "+\t\t\t*/\r", "+\t\t\tint src_damage_tiles;\r", "-\t\t\t\tOS.PtDamageExtent (widget, rect);\r", "+\t\t\t\tsrc_damage_tiles = src;\r", "-\t\t\t\tint src = OS.PhGetTile();\r", "-\t\t\t\tOS.memmove(src, rect, PhRect_t.sizeof);\r", "-\t\t\t\tint damage_tile = OS.PhClipTilings(src, dest, null);\r", "-\t\t\t\tint[] damage_rects_count = new int[1];\r", "-\t\t\t\tint damage_rects = OS.PhTilesToRects(damage_tile, damage_rects_count);\r", "+\t\t\t\tsrc_damage_tiles = OS.PhClipTilings(src, dest, null);\r", "-\t\t\t\tOS.PhFreeTiles(damage_tile);\r", "-\t\t\t\tfor (int i=0; i<damage_rects_count[0]; i++) {\r", "-\t\t\t\t\tOS.memmove(rect, damage_rects + (i * PhRect_t.sizeof), PhRect_t.sizeof);\r", "-\t\t\t\t\tOS.PtDamageExtent (widget, rect);\r", "-\t\t\t\t}\r", "-\t\t\t\tOS.free(damage_rects);\r", "-\t}\r", "+\t\t\t\r", "+\t\t\t/* Merge all damage rectangles. */\r", "+\t\t\tint damage_tiles = OS.PhAddMergeTiles(src_damage_tiles, widget_damage_tiles, null);\r", "+\r", "+\t\t\t/* Exclude damage rectangles obscured by widgets. */\r", "+\t\t\tdamage_tiles = OS.PhClipTilings(damage_tiles, child_tiles[0], null);\r", "+\r", "+\t\t\tOS.PhFreeTiles (child_tiles[0]);\r", "+\r", "+\t\t\t/* Damage rectangles. */\t\t\t\r", "+\t\t\tint[] damage_rects_count = new int[1];\r", "+\t\t\tint damage_rects = OS.PhTilesToRects(damage_tiles, damage_rects_count);\r", "+\t\t\tOS.PhFreeTiles(damage_tiles);\r", "+\t\t\tfor (int i=0; i<damage_rects_count[0]; i++) {\r", "+\t\t\t\tOS.memmove(rect, damage_rects + (i * PhRect_t.sizeof), PhRect_t.sizeof);\r", "+\t\t\t\tOS.PtDamageExtent (widget, rect);\r", "+\t\t\t}\r", "+\t\t\tOS.free(damage_rects);\r", "+\t\t}\r"]}], "num": 51111}
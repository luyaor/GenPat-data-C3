{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33634696f963a4022f428b5364e2b0fd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "faa06e60534c13b5b4891cbffd707aac", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/Check64CompilationParticipant.java", "commitBeforeChange": "e9f7cb66c5064542dfb452f0fb70088c0628ea74", "commitAfterChange": "0e2401ad2734bf1872067c127ae6b51635876794", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void createProblemFor(IResource resource, int start, int end, String message)", "signatureAfterChange": "  void createProblems(IJavaProject project, String root) throws CoreException", "diff": ["-", "-void createProblemFor(IResource resource, int start, int end, String message) {", "-\t\tIMarker marker = resource.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);", "-\t\tint severity = IMarker.SEVERITY_ERROR;", "-\t\tmarker.setAttributes(", "-\t\t\tnew String[] {IMarker.MESSAGE, IMarker.SEVERITY, IMarker.CHAR_START, IMarker.CHAR_END, IMarker.SOURCE_ID},", "-\t\t\tnew Object[] {message, new Integer(severity), new Integer(start), new Integer(end), SOURCE_ID});", "-\t} catch (CoreException e) {", "-\t\te.printStackTrace();", "-\t}", "-}", "+", "+void createProblems(IJavaProject project, String root) throws CoreException {", "+\ttry {", "+\t\tInputStream is = new BufferedInputStream(new FileInputStream(root + \"/log.xml\"));", "+\t\tIProject proj = project.getProject();\t", "+\t\t\t\t\t\t\t\t\t\tIMarker marker = resource.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);", "+\t\t\t\t\t\t\t\t\t\tint severity = IMarker.SEVERITY_ERROR;", "+\t\t\t\t\t\t\t\t\t\tmarker.setAttributes(", "+\t\t\t\t\t\t\t\t\t\t\tnew String[] {IMarker.MESSAGE, IMarker.SEVERITY, IMarker.CHAR_START, IMarker.CHAR_END, IMarker.SOURCE_ID},", "+\t\t\t\t\t\t\t\t\t\t\tnew Object[] {message, new Integer(severity), new Integer(start), new Integer(end), SOURCE_ID});", "+\t} catch (Exception e) {", "+\t\tthrow new CoreException(new Status(IStatus.ERROR, Activator.PLUGIN_ID, \"Problem creating 64-bit problems\", e));", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfd58027c4aafee4a0f710d6da438c89", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "2c8a13d0df1694740c0af6220e23682b3ddd10de", "commitAfterChange": "056762a1d7c74e75bfac132d1e756819b6f3b39e", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": "  public boolean setUrl (String url)", "signatureAfterChange": "  public boolean setUrl (String url, String postData, String[] headers)", "diff": ["-public boolean setUrl (String url) {", "+public boolean setUrl (String url, String postData, String[] headers) {", "+\tresult[0] = 0;", "-\trc = webNavigation.LoadURI (uri, nsIWebNavigation.LOAD_FLAGS_NONE, 0, 0, 0);", "+", "+    nsIMIMEInputStream postDataStream = null;", "+    InputStream dataStream = null;", "+\tif (postData != null) {", "+    \trc = XPCOM.NS_GetComponentManager (result);", "+    \tif (rc != XPCOM.NS_OK) error (rc);", "+    \tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+    \tnsIComponentManager componentManager = new nsIComponentManager (result[0]);", "+    \tresult[0] = 0;", "+    \tbyte[] contractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MIMEINPUTSTREAM_CONTRACTID, true);", "+    \trc = componentManager.CreateInstanceByContractID (contractID, 0, nsIMIMEInputStream.NS_IMIMEINPUTSTREAM_IID, result);", "+    \tcomponentManager.Release();", "+", "+    \tif (rc == XPCOM.NS_OK && result[0] != 0) { /* nsIMIMEInputStream is not in mozilla 1.4 */", "+    \t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, postData, false);", "+    \t\tdataStream = new InputStream (bytes);", "+    \t\tdataStream.AddRef ();", "+    \t\tpostDataStream = new nsIMIMEInputStream (result[0]);", "+    \t\trc = postDataStream.SetData (dataStream.getAddress ());", "+    \t\tif (rc != XPCOM.NS_OK) error (rc);", "+    \t\trc = postDataStream.SetAddContentLength (1);", "+    \t\tif (rc != XPCOM.NS_OK) error (rc);", "+    \t\tbyte[] name = MozillaDelegate.wcsToMbcs (null, HEADER_CONTENTTYPE, true);", "+    \t\tbyte[] value = MozillaDelegate.wcsToMbcs (null, MIMETYPE_FORMURLENCODED, true);", "+    \t\trc = postDataStream.AddHeader (name, value);", "+    \t\tif (rc != XPCOM.NS_OK) error (rc);", "+    \t}", "+    \tresult[0] = 0;", "+\t}", "+", "+    InputStream headersStream = null;", "+    if (headers != null) {", "+\t\tStringBuffer buffer = new StringBuffer ();", "+\t\tfor (int i = 0; i < headers.length; i++) {", "+\t\t\tString current = headers[i];", "+\t\t\tint sep = current.indexOf (':');", "+\t\t\tif (sep != -1) {", "+\t\t\t\tString key = current.substring (0, sep).trim ();", "+\t\t\t\tString value = current.substring (sep + 1).trim ();", "+\t\t\t\tif (key.length () > 0 && value.length () > 0) {", "+\t\t\t\t\tbuffer.append (key);", "+\t\t\t\t\tbuffer.append (':');", "+\t\t\t\t\tbuffer.append (value);", "+\t\t\t\t\tbuffer.append (\"\\r\\n\");", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+    \tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, buffer.toString (), true);", "+    \theadersStream = new InputStream (bytes);", "+    \theadersStream.AddRef ();", "+    }", "+", "+\trc = webNavigation.LoadURI (", "+\t\turi,", "+\t\tnsIWebNavigation.LOAD_FLAGS_NONE,", "+\t\t0,", "+\t\tpostDataStream == null ? 0 : postDataStream.getAddress (),", "+\t\theadersStream == null ? 0 : headersStream.getAddress ());", "+\tif (dataStream != null) dataStream.Release ();", "+\tif (headersStream != null) headersStream.Release ();"]}], "num": 15525}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "deb4928c999849412d379e485f52f3af", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c595c81196f31c29e4146218f1fb746f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "6690d674a484a07e4445df2a5224ec4517b7f791", "commitAfterChange": "1ba8b708320d2a0e38aa19602a51bfddb75db828", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 95, "signatureBeforeChange": "  boolean sendKeyEvent (int type, int theEvent)", "signatureAfterChange": " boolean sendKeyEvent (NSEvent nsEvent, int type)", "diff": ["-boolean sendKeyEvent (int type, int theEvent) {", "-//\tint [] length = new int [1];", "-//\tint status = OS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 4, length, (char[])null);", "-//\tif (status == OS.noErr && length [0] > 2) {", "-//\t\tint count = 0;", "-//\t\tint [] chord = new int [1];", "-//\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseChord, OS.typeUInt32, null, 4, null, chord);", "-//\t\tint [] modifiers = new int [1];", "-//\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "-//\t\tchar [] chars = new char [length [0] / 2];", "-//\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, chars.length * 2, null, chars);", "-//\t\tfor (int i=0; i<chars.length; i++) {", "-//\t\t\tEvent event = new Event ();", "-//\t\t\tevent.character = chars [i];", "-//\t\t\tsetInputState (event, type, chord [0], modifiers [0]);", "-//\t\t\tif (sendKeyEvent (type, event)) chars [count++] = chars [i];", "-//\t\t}", "-//\t\tif (count == 0) return false;", "-//\t\tif (count != chars.length - 1) {", "-//\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, count * 2, chars);", "-//\t\t}", "-//\t\treturn true;", "-//\t} else {", "-//\t\tEvent event = new Event ();", "-//\t\tif (!setKeyState (event, type, theEvent)) return true;", "-//\t\treturn sendKeyEvent (type, event);", "-//\t}", "-\treturn false;", "+//TODO - missing modifier keys (see flagsChanged:)", "+boolean sendKeyEvent (NSEvent nsEvent, int type) {", "+\tif ((state & SAFARI_EVENTS_FIX) != 0) return true;", "+\tint count = 0;", "+\tNSString keys = nsEvent.characters();", "+\t//TODO - check lowercase doesn't mangle char codes", "+\tNSString keyCodes = nsEvent.charactersIgnoringModifiers().lowercaseString();", "+\tchar [] chars = new char [keys.length()];", "+\tfor (int i=0; i<keys.length(); i++) {", "+\t\tEvent event = new Event ();", "+\t\tint keyCode = Display.translateKey (keys.characterAtIndex (i) & 0xFFFF);", "+\t\tif (keyCode != 0) {", "+\t\t\tevent.keyCode = keyCode;", "+\t\t} else {", "+\t\t\tevent.character = (char) keys.characterAtIndex (i);", "+\t\t\t//TODO - get unshifted values for Shift+1", "+\t\t\tevent.keyCode = keyCodes.characterAtIndex (i);", "+\t\t}", "+\t\tsetInputState (event, nsEvent, type);", "+\t\tif (!setKeyState(event, type, nsEvent)) return false;", "+\t\tif (sendKeyEvent (type, event)) {", "+\t\t\tchars [count++] = chars [i];", "+\t\t}", "+\t}", "+//\tif (count == 0) return false;", "+\tif (count != keys.length () - 1) {", "+//\t\tOS.SetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, count * 2, chars);", "+\t}", "+\treturn count == keys.length ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f1745355bcb40f314e0636320deb5e46", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "6fe853b29d6dcedf69f8209e4b19fa3cf0a85a8b", "commitAfterChange": "cc7a79cec8920b1b6175a6c2124e7f63a3823262", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 67, "signatureBeforeChange": "  void showItem (int hItem)", "signatureAfterChange": "  void showItem (int hItem)", "diff": ["+\t\t\t}", "+\t\t}", "+\t}", "+\tif (hwndParent != 0) {", "+\t\tRECT itemRect = new RECT ();", "+\t\titemRect.left = hItem;", "+\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, itemRect) != 0) {", "+\t\t\tforceResize ();", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.GetClientRect (hwndParent, rect);", "+\t\t\tOS.MapWindowPoints (hwndParent, handle, rect, 2);", "+\t\t\tPOINT pt = new POINT ();", "+\t\t\tpt.x = itemRect.left;", "+\t\t\tpt.y = itemRect.top;", "+\t\t\tif (!OS.PtInRect (rect, pt)) {", "+\t\t\t\tpt.y = itemRect.bottom;", "+\t\t\t\tif (!OS.PtInRect (rect, pt)) {", "+\t\t\t\t\tSCROLLINFO info = new SCROLLINFO ();", "+\t\t\t\t\tinfo.cbSize = SCROLLINFO.sizeof;", "+\t\t\t\t\tinfo.fMask = OS.SIF_POS;", "+\t\t\t\t\tinfo.nPos = Math.max (0, pt.x - Tree.INSET / 2);", "+\t\t\t\t\tOS.SetScrollInfo (hwndParent, OS.SB_HORZ, info, true);", "+\t\t\t\t\tsetScrollWidth ();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tupdateScrollBar ();", "+}"]}], "num": 894}
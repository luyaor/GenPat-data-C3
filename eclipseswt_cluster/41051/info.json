{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2492fd135aecd629aac7b78a7c0d32fe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1470ffe5ae59adfce3a6b16aa0b47028", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Path.java", "commitBeforeChange": "ff22354677b5d9a3279f7c1ed7dedaeab283bd03", "commitAfterChange": "1bccd9551405353b093a48e5b41738e24b6850d6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void addString(String string, float x, float y, Font font)", "signatureAfterChange": " public void addString(String string, float x, float y, Font font)", "diff": ["+\t\ttextContainer.setLineFragmentPadding(0);", "-\t\t\tint /*long*/ glyphs = OS.malloc(4 * range.length * 2);", "-\t\t\tlayoutManager.getGlyphs(glyphs, range);", "+\t\t\tint /*long*/ glyphs = OS.malloc((range.length + 1) * 4);", "+\t\t\tint count = layoutManager.getGlyphs(glyphs, range);", "-\t\t\tNSPoint point = new NSPoint();", "-\t\t\tpath.moveToPoint(point);", "-\t\t\tpath.appendBezierPathWithGlyphs(glyphs, range.length, font.handle);", "+\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\tNSPoint pt = layoutManager.locationForGlyphAtIndex(i);", "+\t\t\t\tNSRect lineFragmentRect = layoutManager.lineFragmentUsedRectForGlyphAtIndex(i, 0);", "+\t\t\t\tNSFont actualFont = new NSFont(textStorage.attribute(OS.NSFontAttributeName, layoutManager.characterIndexForGlyphAtIndex(i), 0));", "+\t\t\t\tpt.x = pt.x + x + lineFragmentRect.x;", "+\t\t\t\tpt.y =  - pt.y - y - lineFragmentRect.y;", "+\t\t\t\tpath.moveToPoint(pt);", "+\t\t\t\tpath.appendBezierPathWithGlyphs(glyphs + (i * 4), 1, actualFont);", "+\t\t\t}", "+\t\t\tOS.free(glyphs);", "-\t\t\tfloat /*double*/ baseline = layoutManager.defaultBaselineOffsetForFont(font.handle);", "-\t\t\ttransform.translateXBy(x, -(y + baseline));", "-\t\t\tOS.free(glyphs);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "203cafe201cc7877d88dcab7c38f5bc6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "8bd177cbeb23abde04c3e9a9b26ff34ca214ed1b", "commitAfterChange": "8c4aab30e72216e23f2c03bdb2b40776fb26240c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void scroll (int destX, int destY, int x, int y, int width, int height, boolean all)", "signatureAfterChange": " public void scroll (int destX, int destY, int x, int y, int width, int height, boolean all)", "diff": ["-\tRECT rect = new RECT ();", "-\tOS.SetRect (rect, x, y, x + width, y + height);", "+\tRECT lpRect = new RECT ();", "+\tOS.SetRect (lpRect, x, y, x + width, y + height);", "-\tif (all) flags |= OS.SW_SCROLLCHILDREN;", "-\tOS.ScrollWindowEx (handle, deltaX, deltaY, rect, null, 0, null, flags);", "+\t/*", "+\t* Feature in Windows.  If any child in the widget tree partially", "+\t* intersects the scrolling rectangle, Windows moves the child", "+\t* and copies the bits that intersect the scrolling rectangle but", "+\t* does not redraw the child.", "+\t* ", "+\t* Feature in Windows.  When any child in the widget tree does", "+\t* not intersect the scrolling rectangle but the parent does intersect,", "+\t* Windows does not move the child.  This is the documented (but", "+\t* strange) Windows behavior.", "+\t* ", "+\t* The fix is to not use SW_SCROLLCHILDREN and move the children", "+\t* explicitly after scrolling.  ", "+\t*/", "+\t//if (all) flags |= OS.SW_SCROLLCHILDREN;", "+\tOS.ScrollWindowEx (handle, deltaX, deltaY, lpRect, null, 0, null, flags);", "+\tif (all) {", "+\t\tControl [] children = _getChildren ();", "+\t\tfor (int i=0; i<children.length; i++) {", "+\t\t\tControl child = children [i];", "+\t\t\tRectangle rect = child.getBounds ();", "+\t\t\tif (Math.min(x + width, rect.x + rect.width) > Math.max (x, rect.x) && ", "+\t\t\t\tMath.min(y + height, rect.y + rect.height) > Math.max (y, rect.y)) {", "+\t\t\t\t\tchild.setLocation (rect.x + deltaX, rect.y + deltaY);", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 41051}
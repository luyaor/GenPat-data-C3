{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45548b0f7b891a43759016ddd2f27865", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f55f8a3754f6c217a47df8237724cd02", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": " public int getLineHeight ()", "signatureAfterChange": " public int getLineHeight ()", "diff": ["+\tif (txnObject == 0) {", "+\t\tint ptr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, new char[]{' '}, 1);", "+\t\torg.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point ();", "+\t\tif (font == null) {", "+\t\t\tOS.GetThemeTextDimensions (ptr, (short) defaultThemeFont (), OS.kThemeStateActive, false, ioBounds, null);", "+\t\t} else {", "+\t\t\tint [] currentPort = new int [1];", "+\t\t\tOS.GetPort (currentPort);", "+\t\t\tOS.SetPortWindowPort (OS.GetControlOwner (handle));", "+\t\t\tOS.TextFont (font.id);", "+\t\t\tOS.TextFace (font.style);", "+\t\t\tOS.TextSize (font.size);", "+\t\t\tOS.GetThemeTextDimensions (ptr, (short) OS.kThemeCurrentPortFont, OS.kThemeStateActive, false, ioBounds, null);", "+\t\t\tOS.SetPort (currentPort [0]);", "+\t\t}", "+\t\tOS.CFRelease (ptr);", "+\t\treturn ioBounds.v;", "+\t} "]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d6b97e81226fab523f971a512898822", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "fe9cf8b69b05605c0699efe7aea722d3e2396198", "commitAfterChange": "a76fbcdb2bea80d2aa22d622558bd4081d9e971a", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 45, "signatureBeforeChange": " public void setText (String string)", "signatureAfterChange": " public void setText (String string)", "diff": ["-\tbyte [] buffer = Converter.wcsToMbcs (null, string, true);", "-\tint ptr = OS.malloc (buffer.length);", "-\tOS.memmove (ptr, buffer, buffer.length);", "+\tchar [] text = new char [string.length ()];", "+\tstring.getChars (0, text.length, text, 0);", "+\tchar mnemonic = fixMnemonic (text);", "+\tbyte [] buffer = Converter.wcsToMbcs (null, text, true);", "+\tint ptr1 = OS.malloc (buffer.length);", "+\tOS.memmove (ptr1, buffer, buffer.length);", "+\tint ptr2 = 0;", "+\tif (mnemonic != 0) {", "+\t\tbyte [] buffer2 = Converter.wcsToMbcs (null, new char []{mnemonic}, true);", "+\t\tptr2 = OS.malloc (buffer2.length);", "+\t\tOS.memmove (ptr2, buffer2, buffer2.length);", "+\t}", "+\treplaceMnemonic (mnemonic, true, true);", "-\t\tOS.Pt_ARG_TEXT_STRING, ptr, 0,", "+\t\tOS.Pt_ARG_TEXT_STRING, ptr1, 0,", "+\t\tOS.Pt_ARG_ACCEL_KEY, ptr2, 0,", "-\tif (ptr != 0) OS.free (ptr);", "+\tOS.free (ptr1);", "+\tOS.free (ptr2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "afff23ac75675a4b23ff75f8e61f2e62", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "3f822b76a618595ebd6a11a1ba3ab9f63e256bca", "commitAfterChange": "0a950d59cad36be3ba2dfe58ad8c3d4ffa9d627e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\tstate |= THEME_BACKGROUND;\t", "+\tstate |= THEME_BACKGROUND;", "-\t\thandle = OS.gcnew_Separator ();", "+\t\thandle = OS.gcnew_UserControl ();", "+\t\tint separator = OS.gcnew_Label ();", "+\t\tif (separator == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.ContentControl_Content (handle, separator);", "+\t\tif ((style & SWT.VERTICAL) != 0) {", "+\t\t\tOS.FrameworkElement_Width (separator, OS.SystemParameters_ThinVerticalBorderWidth ());", "+\t\t\tOS.Control_HorizontalContentAlignment (handle, OS.HorizontalAlignment_Center);", "+\t\t\tOS.Control_VerticalContentAlignment (handle, OS.VerticalAlignment_Stretch);", "+\t\t} else {", "+\t\t\tOS.FrameworkElement_Height (separator, OS.SystemParameters_ThinHorizontalBorderHeight ());", "+\t\t\tOS.Control_HorizontalContentAlignment (handle, OS.HorizontalAlignment_Stretch);", "+\t\t\tOS.Control_VerticalContentAlignment (handle, OS.VerticalAlignment_Center);", "+\t\t}", "+\t\tint brush = OS.SystemColors_ActiveBorderBrush ();", "+\t\tOS.Control_Background (separator, brush);", "+\t\tOS.GCHandle_Free (brush);", "+\t\tOS.GCHandle_Free (separator);", "-\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);\t\t", "+\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c91a11f6f52aa9e28df26d6bc80d448", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet226.java", "commitBeforeChange": "b1ecfb2158021d26fad71b625b51c37cc1bcb41b", "commitAfterChange": "d6a88a70fdf7f1bfb40ae2d70ea3909548876864", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public static void main(String [] args)", "signatureAfterChange": " \t public static void main(String [] args)", "diff": ["-\tshell.setText(\"Custom Selection - Gradient selection\");", "+\tshell.setText(\"Tree: Custom Gradient selection\");", "+\t/*", "+\t * NOTE: MeasureItem, PaintItem and EraseItem are called repeatedly.", "+\t * Therefore, it is critical for performance that these methods be as efficient as possible.", "+\t */", "+\t\t\t\tRectangle area = tree.getClientArea();", "+\t\t\t\t/*", "+\t\t\t\t * If you wish to paint the selection beyond the end of", "+\t\t\t\t * last column, you must change the clipping region.", "+\t\t\t\t */", "+\t\t\t\tint columnCount = tree.getColumnCount();", "+\t\t\t\tif (event.index == columnCount - 1 || columnCount == 0) {", "+\t\t\t\t\tRegion region = new Region();", "+\t\t\t\t\tgc.getClipping(region);", "+\t\t\t\t\tregion.add(event.x, event.y, area.x + area.width - event.x, event.height); ", "+\t\t\t\t\tgc.setClipping(region);", "+\t\t\t\t\tregion.dispose();", "+\t\t\t\t}", "+\t\t\t\tColor foreground = gc.getForeground();", "+\t\t\t\tColor background = gc.getBackground();", "-\t\t\t\tgc.fillGradientRectangle(0, rect.y, 500, rect.height, false);", "+\t\t\t\tgc.fillGradientRectangle(0, rect.y, area.width, rect.height, false);", "+\t\t\t\t// restore colors for subsequent drawing", "+\t\t\t\tgc.setForeground(foreground);", "+\t\t\t\tgc.setBackground(background);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80a67cf07b267e6815d869d3bda38e07", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "d394748baa45afbd580331c831b85672b97b114e", "commitAfterChange": "5f321000d94eb71bd024c1f4d113ca6eeea25bd0", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "  void setSortDirection (int direction)", "signatureAfterChange": "  void setSortDirection (int direction)", "diff": ["-\t\t\tint column = direction == SWT.NONE ? -1 : index;", "-\t\t\tOS.SendMessage (hwnd, OS.LVM_SETSELECTEDCOLUMN, column, 0);", "+\t\t\tint oldColumn = OS.SendMessage (hwnd, OS.LVM_GETSELECTEDCOLUMN, 0, 0);", "+\t\t\tint newColumn = direction == SWT.NONE ? -1 : index;", "+\t\t\tOS.SendMessage (hwnd, OS.LVM_SETSELECTEDCOLUMN, newColumn, 0);", "+\t\t\t/* ", "+\t\t\t* Bug in Windows.  When LVM_SETSELECTEDCOLUMN is set, Windows", "+\t\t\t* does not redraw either the new or the previous selected column.", "+\t\t\t* The fix is to force a redraw.", "+\t\t\t*/", "+\t\t\tparent.forceResize ();", "+\t\t\tRECT rect = new RECT (), itemRect = new RECT ();", "+\t\t\tOS.GetClientRect (hwnd, rect);", "+\t\t\tif (oldColumn != -1) {", "+\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, oldColumn, itemRect);", "+\t\t\t\trect.left = itemRect.left;", "+\t\t\t\trect.right = itemRect.right;", "+\t\t\t\tOS.InvalidateRect (hwnd, rect, true);", "+\t\t\t}", "+\t\t\tif (newColumn != -1) {", "+\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, newColumn, itemRect);", "+\t\t\t\trect.left = itemRect.left;", "+\t\t\t\trect.right = itemRect.right;", "+\t\t\t\tOS.InvalidateRect (hwnd, rect, true);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad652351a8be733bf975377e26f8fb7d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "e9fc86e3b8aadcb391059f857ae260720aeb0cdc", "commitAfterChange": "2f05c8a8cd01dd3f4eb259ad3c782ca4b77e17ea", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \t\r int processKeyDown (int callData)", "signatureAfterChange": "\r \t\r int processKeyDown (int callData)", "diff": ["+\t\r", "+\t\t\t\r", "+\t\t\t/* Ensure that the pointer image does not change */\r", "+\t\t\tint xDisplay = getDisplay().xDisplay;\r", "+\t\t\tint xWindow = OS.XtWindow (parent.handle);\r", "+\t\t\tint ptrGrabResult = OS.XGrabPointer (\r", "+\t\t\t\txDisplay,\r", "+\t\t\t\txWindow,\r", "+\t\t\t\t1,\r", "+\t\t\t\tOS.None,\r", "+\t\t\t\tOS.GrabModeAsync,\r", "+\t\t\t\tOS.GrabModeAsync,\r", "+\t\t\t\tOS.None,\r", "+\t\t\t\tOS.None,\r", "+\t\t\t\tOS.CurrentTime);\r", "+\t\t\tOS.XChangeActivePointerGrab (\r", "+\t\t\t\txDisplay,\r", "+\t\t\t\tOS.None,\r", "+\t\t\t\tcursor,\r", "+\t\t\t\tOS.CurrentTime);\r", "+\r", "+\t\t\tsendEvent (SWT.Selection, event);\r", "+\t\t\tif (ptrGrabResult == OS.GrabSuccess) OS.XUngrabPointer (xDisplay, OS.CurrentTime);\r", "+\t\t\t\t\t\r", "-\t\t\tsendEvent (SWT.Selection, event);\r", "+\t\t\t\t/* Adjust the pointer position */\r", "+\t\t\t\tint cursorX = newX;  int cursorY = newY;\r", "+\t\t\t\tif ((style & SWT.VERTICAL) != 0) {\r", "+\t\t\t\t\tcursorY += height / 2;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tcursorX += width / 2;\r", "+\t\t\t\t}\r", "+\t\t\t\tOS.XWarpPointer (xDisplay, OS.None, xWindow, 0, 0, 0, 0, cursorX, cursorY);\r", "-\t\r", "+\r"]}], "num": 15827}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "07e9ebafaea04c5551812feb69c6b62d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e89de1536a462ef20369146004fffc1b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "0965c047c4647355d2d59defeda7977f1c34f584", "commitAfterChange": "cc500238418d38b85dc837cf8469541ca5f69f28", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public void javaToNative(Object object, TransferData transferData)", "signatureAfterChange": "\r public void javaToNative(Object object, TransferData transferData)", "diff": ["-\t\t\r", "-\t// build a byte array from data\r", "-\tString[] fileNames = (String[]) object;\r", "-\tint fileNameSize = 0;\r", "-\tbyte[][] files = new byte[fileNames.length][];\r", "-\tfor (int i = 0; i < fileNames.length; i++) {\r", "-\t\tfiles[i] = (fileNames[i]+'\\0').getBytes(); // each name is null terminated\r", "-\t\tfileNameSize += files[i].length;\r", "-\t}\r", "-\tbyte[] buffer = new byte[DROPFILES.sizeof + fileNameSize + 1]; // there is an extra null terminator at the very end\r", "-\tDROPFILES dropfiles = new DROPFILES();\r", "-\tdropfiles.pFiles = DROPFILES.sizeof;\r", "-\tdropfiles.pt_x = dropfiles.pt_y = 0;\r", "-\tdropfiles.fNC = 0;\r", "-\tdropfiles.fWide = 0;\t\r", "-\tCOM.MoveMemory(buffer, dropfiles, DROPFILES.sizeof);\r", "-\tint offset = DROPFILES.sizeof;\r", "-\tfor (int i = 0; i < fileNames.length; i++) {\r", "-\t\tSystem.arraycopy(files[i], 0, buffer, offset, files[i].length);\r", "-\t\toffset += files[i].length;\r", "-\t}\r", "+\tif (isSupportedType(transferData)) {\r", "-\t// pass byte array on to super to convert to native\r", "-\tsuper.javaToNative(buffer, transferData);\r", "+\t\tString[] fileNames = (String[]) object;\r", "+\t\tStringBuffer allFiles = new StringBuffer();\r", "+\t\tfor (int i = 0; i < fileNames.length; i++) {\r", "+\t\t\tallFiles.append(fileNames[i]); \r", "+\t\t\tallFiles.append('\\0'); // each name is null terminated\r", "+\t\t}\r", "+\t\tTCHAR buffer = new TCHAR(0, allFiles.toString(), true); // there is an extra null terminator at the very end\r", "+\t\t\r", "+\t\tDROPFILES dropfiles = new DROPFILES();\r", "+\t\tdropfiles.pFiles = DROPFILES.sizeof;\r", "+\t\tdropfiles.pt_x = dropfiles.pt_y = 0;\r", "+\t\tdropfiles.fNC = 0;\r", "+\t\tdropfiles.fWide = COM.IsUnicode ? 1 : 0;\r", "+\t\t\r", "+\t\t// Allocate the memory because the caller (DropTarget) has not handed it in\r", "+\t\t// The caller of this method must release the data when it is done with it.\r", "+\t\tint byteCount = buffer.length() * TCHAR.sizeof;\r", "+\t\tint newPtr = COM.GlobalAlloc(COM.GMEM_FIXED | COM.GMEM_ZEROINIT, DROPFILES.sizeof + byteCount);\r", "+\t\tCOM.MoveMemory(newPtr, dropfiles, DROPFILES.sizeof);\r", "+\t\tCOM.MoveMemory(newPtr + DROPFILES.sizeof, buffer, byteCount);\r", "+\t\t\r", "+\t\ttransferData.stgmedium = new STGMEDIUM();\r", "+\t\ttransferData.stgmedium.tymed = COM.TYMED_HGLOBAL;\r", "+\t\ttransferData.stgmedium.unionField = newPtr;\r", "+\t\ttransferData.stgmedium.pUnkForRelease = 0;\r", "+\t\ttransferData.result = COM.S_OK;\r", "+\t\treturn;\r", "+\t}\r", "+\t\r", "+\t// did not match the TYMED\r", "+\ttransferData.stgmedium = new STGMEDIUM();\r", "+\ttransferData.result = COM.DV_E_TYMED;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "986338efb94ff89f05fd39928854c51a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "dbb652fe193019d96be9d6af80af3f6e1918e181", "commitAfterChange": "a9865ce41544b9634fe7b5cf08a114ae91a2faeb", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 13, "signatureBeforeChange": "  static boolean isWindowManagerCompliant()", "signatureAfterChange": "  static Program kde_getProgram(Display display, String mimeType)", "diff": ["+", "+static Program kde_getProgram(Display display, String mimeType) {", "+\tProgram program = null;", "+\t/* Use the character encoding for the default locale */", "+\tbyte[] buffer = Converter.wcsToMbcs(null, mimeType, true);", "+\tint /*long*/ mimeTypeName = KDE.QString_new(buffer);", "+\tint /*long*/ serviceList = KDE.KMimeType_offers(mimeTypeName);", "+\tif (serviceList != 0) {", "+\t\tKDE.KServiceList_delete(serviceList);", "+\t\tprogram = new Program();", "+\t\tprogram.display = display;", "+\t\tprogram.name = mimeType;", "+\t\tprogram.command = \"KRun::runURL(url,mimeType)\";", "+\t\t//TODO - LEAK??", "+\t\tint /*long*/ kMimeType = KDE.KMimeType_mimeType(mimeTypeName);", "+\t\tif (kMimeType != 0) {", "+\t\t\t//TODO - LEAK??", "+\t\t\tint /*long*/ mimeIcon = KDE.KMimeType_icon(kMimeType, 0, false);", "+\t\t\tint /*long*/ loader = KDE.KGlobal_iconLoader();", "+\t\t\tint /*long*/ path = KDE.KIconLoader_iconPath(loader, mimeIcon, KDE.KICON_SMALL, true);", "+\t\t\tprogram.iconPath = kde_convertQStringAndFree(path);", "+\t\t}", "+\t\t", "+\t}", "+\tKDE.QString_delete(mimeTypeName);", "+\treturn program;", "-", "-static boolean isWindowManagerCompliant() {", "-\tbyte[] name = Converter.wcsToMbcs(null, \"_NET_SUPPORTING_WM_CHECK\", true);", "-\t/*", "-\t* Bug in GDK. The flag only_if_exists is ignored and gdk_atom_intern", "-\t* never returns GDK_NONE. The workaround is to not rely on this function", "-\t* to detect an atom.", "-\t*/", "-\tint /*long*/ atom = OS.gdk_atom_intern(name, true);", "-\tif (atom == OS.GDK_NONE) return false;\t", "-\tint /*long*/[] actualType = new int /*long*/[1];", "-\tint[] actualFormat = new int[1];", "-\tint[] actualLength = new int[1];", "-\tint /*long*/[] data = new int /*long*/[1];", "-\tif (!OS.gdk_property_get(OS.GDK_ROOT_PARENT(), atom, OS.XA_WINDOW,", "-\t\t0, 1, 0, actualType, actualFormat, actualLength, data)) return false;", "-\tif (data[0] != 0) OS.g_free(data[0]);", "-\treturn actualLength[0] > 0;"]}], "num": 21338}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c9631ee8b7eb0ebff52fe1b7b981192a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b09c36984dfb8b381e1bff5a3778f40c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "d771086aa977f99f068da574ec32efbca3c90084", "commitAfterChange": "7df4483d84bff3d62bcce7ab431b1b7000cedfd3", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  @Override void createHandle (int index)", "signatureAfterChange": "  @Override void createHandle (int index)", "diff": ["-\tint bits = SWT.CHECK | SWT.RADIO | SWT.PUSH | SWT.SEPARATOR | SWT.CASCADE;", "+\tint bits = SWT.CHECK | SWT.RADIO | SWT.PUSH | SWT.SEPARATOR;", "-\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\tif (OS.GTK3) {", "-\t\t\t\thandle = OS.gtk_radio_menu_item_new (group);", "-\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tlabelHandle = OS.gtk_accel_label_new (buffer);", "-\t\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tboxHandle = gtk_box_new (OS.GTK_ORIENTATION_HORIZONTAL, false, 6);", "-\t\t\t\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "-\t\t\t\t\timageHandle = OS.gtk_image_new ();", "-\t\t\t\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\t}", "-\t\t\t} else { // Gtk2", "-\t\t\t\thandle = OS.gtk_radio_menu_item_new_with_label (group, buffer);", "-\t\t\t}", "+\t\t\thandle = OS.gtk_radio_menu_item_new_with_label (group, buffer);", "-\t\t\tif (OS.GTK3) {", "-\t\t\t\thandle = OS.gtk_check_menu_item_new ();", "-\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tlabelHandle = OS.gtk_accel_label_new (buffer);", "-\t\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tboxHandle = gtk_box_new (OS.GTK_ORIENTATION_HORIZONTAL, false, 6);", "-\t\t\t\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "-\t\t\t\t\timageHandle = OS.gtk_image_new ();", "-\t\t\t\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\t}", "-\t\t\t} else { // Gtk2", "-\t\t\t\thandle = OS.gtk_check_menu_item_new_with_label (buffer);", "-\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\t}", "+\t\t\thandle = OS.gtk_check_menu_item_new_with_label (buffer);", "-\t\t// This case now needs to be handled due to double padding. When double padded", "-\t\t// menus are used, the \"head\" menu item (such as File, Edit, Help, etc.) should", "-\t\t// not be padded. We only care about this in Gtk3.", "-\t\tcase SWT.CASCADE:", "-\t\t\tif (OS.GTK3) {", "-\t\t\t\thandle = OS.gtk_menu_item_new ();", "-\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tlabelHandle = OS.gtk_accel_label_new (buffer);", "-\t\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tboxHandle = gtk_box_new (OS.GTK_ORIENTATION_HORIZONTAL, false, 6);", "-\t\t\t\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\tif ((parent.style & bits) == SWT.BAR) {", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "-\t\t\t\t\timageHandle = OS.gtk_image_new ();", "-\t\t\t\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tif (OS.GTK3) {", "-\t\t\t\thandle = OS.gtk_menu_item_new ();", "-\t\t\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tlabelHandle = OS.gtk_accel_label_new (buffer);", "-\t\t\t\tif (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tboxHandle = gtk_box_new (OS.GTK_ORIENTATION_HORIZONTAL, false, 6);", "-\t\t\t\tif (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-", "-\t\t\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "-\t\t\t\t\timageHandle = OS.gtk_image_new ();", "-\t\t\t\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\t}", "-\t\t\t} else { // Gtk2", "-\t\t\t\thandle = OS.gtk_image_menu_item_new_with_label (buffer);", "-\t\t\t}", "+\t\t\thandle = OS.gtk_image_menu_item_new_with_label (buffer);", "-\tif (imageHandle != 0) {", "-\t\tif (OS.SWT_PADDED_MENU_ITEMS) {", "-\t\t\tOS.gtk_image_set_pixel_size (imageHandle, 16);", "-\t\t}", "-\t\tOS.gtk_container_add (boxHandle, imageHandle);", "-\t\tOS.gtk_widget_show (imageHandle);", "-\t}", "-\tif (labelHandle != 0) {", "-\t\tif (OS.GTK_VERSION >= OS.VERSION (3, 16, 0)) {", "-\t\t\tOS.gtk_label_set_xalign (labelHandle, 0);", "-\t\t\tOS.gtk_widget_set_halign (labelHandle, OS.GTK_ALIGN_FILL);", "-\t\t} else {", "-\t\t\tOS.gtk_misc_set_alignment(labelHandle, 0, 0);", "-\t\t}", "-\t\tOS.gtk_box_pack_end (boxHandle, labelHandle, true, true, 0);", "-\t\tOS.gtk_widget_show (labelHandle);", "-\t}", "-\tif (boxHandle != 0) {", "-\t\tOS.gtk_container_add (handle, boxHandle);", "-\t\tOS.gtk_widget_show (boxHandle);", "-\t}", "+\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tif (boxHandle == 0) {", "-\t\t\tlabelHandle = OS.gtk_bin_get_child (handle);", "-\t\t}", "-\t\tOS.gtk_accel_label_set_accel_widget (labelHandle, 0);", "+\t\tlong /*int*/ label = OS.gtk_bin_get_child (handle);", "+\t\tOS.gtk_accel_label_set_accel_widget (label, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d1d526f154956e8811565bba73169be", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ec7edbaede68f4fd7608786e759e23fd6dbe2200", "commitAfterChange": "b206c3d5f3a448a2b6dfbc2c13ed7e271cef1597", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r void drawStyledLine(String line, int lineOffset, int renderOffset, StyleRange[] styles, int paintX, int paintY, GC gc, Color lineBackground, Color lineForeground, FontData currentFont, StyledTextBidi bidi)", "signatureAfterChange": "\r \tvoid print()", "diff": ["+\t */\r", "+\tvoid print() {\r", "+\t\tStyledTextContent content = renderer.getContent();\r", "+\t\tFontData printerFontData = gc.getFont().getFontData()[0];\r", "+\t\tColor background = gc.getBackground();\r", "+\t\tColor foreground = gc.getForeground();\r", "+\t\tint lineHeight = renderer.getLineHeight();\r", "+\t\tint lineCount = content.getLineCount();\r", "+\t\tint paintY = clientArea.y;\r", "+\t\t\r", "+\t\tif (singleLine) {\r", "+\t\t\tlineCount = 1;\r", "+\t\t}\r", "+\t\tif (startPage == 1) {\r", "+\t\t\tprinter.startPage();\r", "+\t\t}\t\t\t\r", "+\t\tfor (int i = startLine; i < lineCount && i < endLine; i++, paintY += lineHeight) {\r", "+\t\t\tString line = content.getLine(i);\r", "+\t\t\t\r", "+\t\t\tif (paintY + lineHeight > clientArea.y + clientArea.height) {\r", "+\t\t\t\tprinter.endPage();\r", "+\t\t\t\tprinter.startPage();\r", "+\t\t\t\tpaintY = clientArea.y;\r", "+\t\t\t}\r", "+\t\t\trenderer.drawLine(\r", "+\t\t\t\tline, i, paintY, gc, background, foreground, printerFontData, true);\r", "+\t\t}\r", "+\t\tif (paintY > clientArea.y && paintY <= clientArea.y + clientArea.height) {\r", "+\t\t\tprinter.endPage();\r", "+\t\t}\r", "+\t}\t\r", "- */\r", "-void drawStyledLine(String line, int lineOffset, int renderOffset, StyleRange[] styles, int paintX, int paintY, GC gc, Color lineBackground, Color lineForeground, FontData currentFont, StyledTextBidi bidi) {\r", "-\tint lineLength = line.length();\r", "-\tColor background = gc.getBackground();\r", "-\tColor foreground = gc.getForeground();\t\r", "-\tStyleRange style = null;\r", "-\tStyleRange[] filteredStyles = filterLineStyles(styles);\t\r", "-\tint renderStopX = getClientArea().width + horizontalScrollOffset;\r", "-\t\t\r", "-\t// Always render the entire line when in a bidi locale.\r", "-\t// Since we render the line in logical order we may start past the end\r", "-\t// of the visual right border of the client area and work towards the\r", "-\t// left.\r", "-\tfor (int i = 0; i < styles.length && (paintX < renderStopX || bidi != null); i++) {\r", "-\t\tint styleLineLength;\r", "-\t\tint styleLineStart;\r", "-\t\tint styleLineEnd;\r", "-\t\tstyle = styles[i];\r", "-\t\tstyleLineEnd = style.start + style.length - lineOffset;\r", "-\t\tstyleLineStart = Math.max(style.start - lineOffset, 0);\r", "-\t\t// render unstyled text between the start of the current \r", "-\t\t// style range and the end of the previously rendered \r", "-\t\t// style range\r", "-\t\tif (styleLineStart > renderOffset) {\r", "-\t\t\tbackground = setLineBackground(gc, background, lineBackground);\r", "-\t\t\tforeground = setLineForeground(gc, foreground, lineForeground);\r", "-\t\t\tsetLineFont(gc, currentFont, SWT.NORMAL);\t\t\t\r", "-\t\t\t// don't try to render more text than requested\r", "-\t\t\tstyleLineStart = Math.min(lineLength, styleLineStart);\r", "-\t\t\tpaintX = drawText(line, renderOffset, styleLineStart - renderOffset, paintX, paintY, gc, bidi);\r", "-\t\t\trenderOffset = styleLineStart;\r", "-\t\t}\r", "-\t\telse\r", "-\t\tif (styleLineEnd <= renderOffset) {\r", "-\t\t\t// style ends before render start offset\r", "-\t\t\t// skip to the next style\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (styleLineStart >= lineLength) {\r", "-\t\t\t// there are line styles but no text for those styles\r", "-\t\t\t// possible when called with partial line text\r", "-\t\t\tbreak;\r", "-\t\t}\t\t\r", "-\t\tstyleLineLength = Math.min(styleLineEnd, lineLength) - renderOffset;\r", "-\t\t// set style background color if specified\r", "-\t\tif (style.background != null) {\r", "-\t\t\tbackground = setLineBackground(gc, background, style.background);\r", "-\t\t\tforeground = setLineForeground(gc, foreground, style.background);\r", "-\t\t\tif (bidi != null) {\r", "-\t\t\t\tbidi.fillBackground(renderOffset, styleLineLength, -horizontalScrollOffset, paintY, lineHeight);\r", "-\t\t\t}\r", "-\t\t\telse {\r", "-\t\t\t\tint fillWidth = textWidth(line, lineOffset, renderOffset, styleLineLength, filteredStyles, paintX, gc, currentFont);\r", "-\t\t\t\tgc.fillRectangle(paintX - horizontalScrollOffset, paintY, fillWidth, lineHeight);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\telse {\r", "-\t\t\tbackground = setLineBackground(gc, background, lineBackground);\r", "-\t\t}\r", "-\t\t// set style foreground color if specified\r", "-\t\tif (style.foreground != null) {\r", "-\t\t\tforeground = setLineForeground(gc, foreground, style.foreground);\r", "-\t\t}\r", "-\t\telse {\r", "-\t\t\tforeground = setLineForeground(gc, foreground, lineForeground);\r", "-\t\t}\r", "-\t\tsetLineFont(gc, currentFont, style.fontStyle);\r", "-\t\tpaintX = drawText(line, renderOffset, styleLineLength, paintX, paintY, gc, bidi);\r", "-\t\trenderOffset += styleLineLength;\r", "-\t}\r", "-\t// render unstyled text at the end of the line\r", "-\tif ((style == null || renderOffset < lineLength) && \r", "-\t\t(paintX < renderStopX || bidi != null)) {\r", "-\t\tsetLineBackground(gc, background, lineBackground);\r", "-\t\tsetLineForeground(gc, foreground, lineForeground);\r", "-\t\tsetLineFont(gc, currentFont, SWT.NORMAL);\r", "-\t\tdrawText(line, renderOffset, lineLength - renderOffset, paintX, paintY, gc, bidi);\r", "-\t}\t\r", "-}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d35120aefc2d6e3dbd2f3a76775e483", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "e7ab60cfa38a8c3fdcd69ddcf2d3bdc3dd7d8859", "commitAfterChange": "cea7ad4f53311c6e11b8d036e80114124cd5665a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t * Bug in Safari. The WebView does not receive mouse and key events when it is added", "-\t * to a visible top window.  It is assumed that Safari hooks its own event listener", "-\t * when the top window emits the kEventWindowShown event. The workaround is to send a", "-\t * fake kEventWindowShown event to the top window after the WebView has been added", "-\t * to the HIView (after the top window is visible) to give Safari a chance to hook", "-\t * events.", "-\t */", "+\t* Bug in Safari. The WebView does not draw properly if it is embedded as", "+\t* sub view of the browser handle.  The fix is to add the web view to the", "+\t* window root control and resize it on top of the browser handle.", "+\t* ", "+\t* Note that when reparent the browser is reparented, the web view has to", "+\t* be reparent by hand by hooking kEventControlOwningWindowChanged.", "+\t*/", "+\t/*", "+\t* Bug in Safari. The WebView does not receive mouse and key events when it is added", "+\t* to a visible top window.  It is assumed that Safari hooks its own event listener", "+\t* when the top window emits the kEventWindowShown event. The workaround is to send a", "+\t* fake kEventWindowShown event to the top window after the WebView has been added", "+\t* to the HIView (after the top window is visible) to give Safari a chance to hook", "+\t* events.", "+\t*/", "-\t\t\t\t\tShell shell = browser.getShell();", "-\t\t\t\t\tshell.removeListener(SWT.Resize, this);", "-\t\t\t\t\tshell.removeListener(SWT.Show, this);", "-\t\t\t\t\tshell.removeListener(SWT.Hide, this);", "-\t\t\t\t\tControl c = browser;", "-\t\t\t\t\tdo {", "-\t\t\t\t\t\tc.removeListener(SWT.Show, this);", "-\t\t\t\t\t\tc.removeListener(SWT.Hide, this);", "-\t\t\t\t\t\tc = c.getParent();", "-\t\t\t\t\t} while (c != shell);", "+\t\t\t\t\tOS.RemoveEventHandler(windowBoundsHandler);", "+\t\t\t\t\twindowBoundsHandler = 0;", "-\t\t\t\tcase SWT.Hide: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug on Safari. The web view cannot be obscured by other views above it.", "-\t\t\t\t\t* This problem is specified in the apple documentation for HiWebViewCreate.", "-\t\t\t\t\t* The workaround is to hook Hide and Show events on the browser's parents", "-\t\t\t\t\t* and set its size to 0 in Hide and to restore its size in Show.", "-\t\t\t\t\t*/", "-\t\t\t\t\tCGRect bounds = new CGRect();", "-\t\t\t\t\tbounds.x = bounds.y = -MIN_SIZE;", "-\t\t\t\t\tbounds.width = bounds.height = MIN_SIZE;", "-\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase SWT.Show: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Do not update size when it is not visible. Note that isVisible()", "-\t\t\t\t\t* cannot be used because SWT.Show is sent before the widget is", "-\t\t\t\t\t* actually visible. ", "-\t\t\t\t\t*/", "-\t\t\t\t\tShell shell = browser.getShell();", "-\t\t\t\t\tComposite parent = browser;", "-\t\t\t\t\twhile (parent != shell && (parent.getVisible() || parent == e.widget)) {", "-\t\t\t\t\t\tparent = parent.getParent();", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!(parent.getVisible() || parent == e.widget)) return;", "-", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug on Safari. The web view cannot be obscured by other views above it.", "-\t\t\t\t\t* This problem is specified in the apple documentation for HiWebViewCreate.", "-\t\t\t\t\t* The workaround is to hook Hide and Show events on the browser's parents", "-\t\t\t\t\t* and set its size to 0 in Hide and to restore its size in Show.", "-\t\t\t\t\t*/", "-\t\t\t\t\tCGRect bounds = new CGRect();", "-\t\t\t\t\tOS.HIViewGetBounds(browser.handle, bounds);", "-\t\t\t\t\tint[] contentView = new int[1];", "-\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(browser.handle)), OS.kHIViewWindowContentID(), contentView);", "-\t\t\t\t\tOS.HIViewConvertRect(bounds, browser.handle, contentView[0]);", "-\t\t\t\t\t/* ", "-\t\t\t\t\t* Bug in Safari.  For some reason, the web view will display incorrectly or", "-\t\t\t\t\t* blank depending on its contents, if its size is set to a value smaller than", "-\t\t\t\t\t* MIN_SIZE. It will not display properly even after the size is made larger.", "-\t\t\t\t\t* The fix is to avoid setting sizes smaller than MIN_SIZE. ", "-\t\t\t\t\t*/", "-\t\t\t\t\tif (bounds.width <= MIN_SIZE) bounds.width = MIN_SIZE;", "-\t\t\t\t\tif (bounds.height <= MIN_SIZE) bounds.height = MIN_SIZE;", "-\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase SWT.Resize: {", "-\t\t\t\t\t/* Do not update size when it is not visible */", "-\t\t\t\t\tif (!browser.isVisible()) return;", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug on Safari. Resizing the height of a Shell containing a Browser at", "-\t\t\t\t\t* a fixed location causes the Browser to redraw at a wrong location.", "-\t\t\t\t\t* The web view is a HIView container that internally hosts", "-\t\t\t\t\t* a Cocoa NSView that uses a coordinates system with the origin at the", "-\t\t\t\t\t* bottom left corner of a window instead of the coordinates system used", "-\t\t\t\t\t* in Carbon that starts at the top left corner. The workaround is to", "-\t\t\t\t\t* reposition the web view every time the Shell of the Browser is resized.", "-\t\t\t\t\t*/", "-\t\t\t\t\tCGRect bounds = new CGRect();", "-\t\t\t\t\tOS.HIViewGetBounds(browser.handle, bounds);", "-\t\t\t\t\tint[] contentView = new int[1];", "-\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(browser.handle)), OS.kHIViewWindowContentID(), contentView);", "-\t\t\t\t\tOS.HIViewConvertRect(bounds, browser.handle, contentView[0]);", "-\t\t\t\t\t/* ", "-\t\t\t\t\t* Bug in Safari.  For some reason, the web view will display incorrectly or", "-\t\t\t\t\t* blank depending on its contents, if its size is set to a value smaller than", "-\t\t\t\t\t* MIN_SIZE. It will not display properly even after the size is made larger.", "-\t\t\t\t\t* The fix is to avoid setting sizes smaller than MIN_SIZE. ", "-\t\t\t\t\t*/", "-\t\t\t\t\tif (bounds.width <= MIN_SIZE) bounds.width = MIN_SIZE;", "-\t\t\t\t\tif (bounds.height <= MIN_SIZE) bounds.height = MIN_SIZE;", "-\t\t\t\t\tif (e.widget == browser.getShell()) {", "-\t\t\t\t\t\tbounds.x++;", "-\t\t\t\t\t\t/* Note that the bounds needs to change */", "-\t\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\t\tbounds.x--;", "-\t\t\t\t\t}", "-\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\tbrowser.addListener(SWT.Resize, listener);", "-\tShell shell = browser.getShell();", "-\tshell.addListener(SWT.Resize, listener);", "-\tshell.addListener(SWT.Show, listener);", "-\tshell.addListener(SWT.Hide, listener);", "-\tControl c = browser;", "-\tdo {", "-\t\tc.addListener(SWT.Show, listener);", "-\t\tc.addListener(SWT.Hide, listener);", "-\t\tc = c.getParent();", "-\t} while (c != shell);", "-\tint controlTarget = OS.GetControlEventTarget(webViewHandle);", "-\tOS.InstallEventHandler(controlTarget, callback3Address, mask.length / 2, mask, webViewHandle, null);", "+\tOS.InstallEventHandler(OS.GetControlEventTarget(webViewHandle), callback3Address, mask.length / 2, mask, webViewHandle, null);", "+\tint[] mask1 = new int[] {", "+\t\tOS.kEventClassControl, OS.kEventControlBoundsChanged,", "+\t\tOS.kEventClassControl, OS.kEventControlVisibilityChanged,", "+\t\tOS.kEventClassControl, OS.kEventControlOwningWindowChanged,", "+\t};", "+\tOS.InstallEventHandler(OS.GetControlEventTarget(browser.handle), callback3Address, mask1.length / 2, mask1, browser.handle, null);", "+\tint[] mask2 = new int[] {", "+\t\tOS.kEventClassWindow, OS.kEventWindowBoundsChanged,", "+\t};", "+\tint[] outRef = new int[1];", "+\tOS.InstallEventHandler(OS.GetWindowEventTarget(window), callback3Address, mask2.length / 2, mask2, browser.handle, outRef);", "+\twindowBoundsHandler = outRef[0];"]}], "num": 25804}
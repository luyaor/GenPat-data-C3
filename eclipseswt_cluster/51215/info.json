{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3270b96f2503b567f9567def92313489", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f9b5485f582e3260fe15aab5ead4add", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/ImageTransfer.java", "commitBeforeChange": "6b0a245288556e7224d3c56682401ca81ba95245", "commitAfterChange": "4dbd09dcd54c5e8b8416ccbe2fdfacc6901be61f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void javaToNative(Object object, TransferData transferData)", "signatureAfterChange": " public void javaToNative(Object object, TransferData transferData)", "diff": ["-\ttransferData.result = -1;", "-", "-\tint handle = image.handle;", "-\tint width = OS.CGImageGetWidth(handle);", "-\tint height = OS.CGImageGetHeight(handle);", "-\tint alphaInfo = OS.CGImageGetAlphaInfo(handle);", "-\tint bpr = OS.CGImageGetBytesPerRow(handle);", "-", "-\tRect rect = new Rect();", "-\trect.left = 0;", "-\trect.top = 0;", "-\trect.right = (short) width;", "-\trect.bottom = (short) height;", "-", "-\tint[] gWorld = new int[1];", "-\tint format = OS.k24RGBPixelFormat;", "-\tif (alphaInfo != OS.kCGImageAlphaNoneSkipFirst) {", "-\t\tformat = OS.k32ARGBPixelFormat;", "-\t}", "-\tOS.NewGWorldFromPtr(gWorld, format, rect, 0, 0, 0, image.data, bpr);", "-\tint[] curPort = new int[1];", "-\tint[] curGWorld = new int[1];", "-\tOS.GetGWorld(curPort, curGWorld);", "-\tOS.SetGWorld(gWorld[0], curGWorld[0]);", "-\tint pictHandle = OS.OpenPicture(rect);", "-\tint portBitMap = OS.GetPortBitMapForCopyBits(gWorld[0]);", "-\tOS.CopyBits(portBitMap, portBitMap, rect, rect, (short) OS.srcCopy, 0);", "-\tOS.ClosePicture();", "-\tOS.SetGWorld(curPort[0], curGWorld[0]);", "-\tOS.DisposeGWorld(gWorld[0]);", "-\tint length = OS.GetHandleSize(pictHandle);", "-\tOS.HLock(pictHandle);", "-\tint[] buffer = new int[1];", "-\tOS.memmove(buffer, pictHandle, 4);", "-\tbyte[] pictData = new byte[length];", "-\tOS.memmove(pictData, buffer[0], length);", "-\tOS.HUnlock(pictHandle);", "-\tOS.KillPicture(pictHandle);", "+\tNSImage handle = image.handle;", "+\ttransferData.data = handle.TIFFRepresentation();", "-", "-\ttransferData.data = new byte[][] { pictData };", "-\ttransferData.result = OS.noErr;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc4e5fb1d1b01cafa433a92d752a11ed", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "815face9c5027040f3c7c99b10975d0bd5a29ae0", "commitAfterChange": "35a61cc1c43b28bcac378ce6ae2744f3a0935b9d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\t\t// Determine the height of the current font.", "-\t\t\tint [] currentPort = new int [1];", "-\t\t\tshort themeFont = (short) defaultThemeFont ();", "-\t\t\tif (font != null) {", "-\t\t\t\tthemeFont = OS.kThemeCurrentPortFont;", "-\t\t\t\tOS.GetPort (currentPort);", "-\t\t\t\tOS.SetPortWindowPort (OS.GetControlOwner (handle));", "-\t\t\t\tOS.TextFont (font.id);", "-\t\t\t\tOS.TextFace (font.style);", "-\t\t\t\tOS.TextSize (font.size);", "-\t\t\t}", "-\t\t\tFontInfo info = new FontInfo ();", "-\t\t\tOS.GetFontInfo (info);", "-\t\t\theight = info.ascent + info.descent;", "-\t\t\t", "-\t\t\t// Max with the height of the up/down buttons.", "-\t\t\tint [] metric = new int [1];", "-\t\t\tOS.GetThemeMetric (OS.kThemeMetricLittleArrowsHeight, metric);", "-\t\t\theight = Math.max (height, metric [0]);", "-\t\t\t", "-\t\t\t// Determine the width of the date or time string in the current font.", "-\t\t\t// TODO: All of these strings need to be locale-specific", "-\t\t\tString string = (style & SWT.SHORT) != 0 ? \"00/0000\" : \"00/00/0000\";", "-\t\t\tif ((style & SWT.TIME) != 0) string = (style & SWT.SHORT) != 0 ? \"00:00 AM\" : \"00:00:00 AM\";", "-\t\t\t", "-\t\t\tchar [] buffer = new char [string.length ()];", "-\t\t\tstring.getChars (0, buffer.length, buffer, 0);", "-\t\t\tint ptr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-\t\t\torg.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point ();", "-\t\t\tif (ptr != 0) {", "-\t\t\t\tOS.GetThemeTextDimensions (ptr, themeFont, OS.kThemeStateActive, false, ioBounds, null);", "-\t\t\t\twidth = Math.max (width, ioBounds.h);", "-\t\t\t\theight = Math.max (height, ioBounds.v);", "-\t\t\t\tOS.CFRelease (ptr);", "-\t\t\t}", "-\t\t\tif (font != null) {", "-\t\t\t\tOS.SetPort (currentPort [0]);", "-\t\t\t}", "-\t\t\t", "-\t\t\t// Add the width of the up/down buttons.", "-\t\t\tOS.GetThemeMetric (OS.kThemeMetricLittleArrowsWidth, metric);", "-\t\t\twidth += metric [0];", "-\t\t\t", "-\t\t\t// Add the margin between the text and the buttons.", "-\t\t\tOS.GetThemeMetric (OS.kThemeMetricEditTextWhitespace, metric);", "-\t\t\twidth += metric [0] * 4;", "+\t\t\tRect rect = new Rect ();", "+\t\t\tOS.GetBestControlRect (handle, rect, null);", "+\t\t\twidth = rect.right - rect.left;", "+\t\t\theight = rect.bottom - rect.top;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f51dfa5be8644e63c053560a050051b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 92, "signatureBeforeChange": " void showToolTip (int handle, String toolTipText)", "signatureAfterChange": "  void setMenuBar (Menu menu)", "diff": ["+", "+void setMenuBar (Menu menu) {", "+\t/*", "+\t* Feature in the Macintosh.  SetRootMenu() does not", "+\t* accept NULL to indicate that their should be no", "+\t* menu bar. The fix is to create a temporary empty", "+\t* menu, set that to be the menu bar, clear the menu", "+\t* bar and then delete the temporary menu.", "+\t*/", "+\tif (menu == menuBar) return;", "+\tint theMenu = 0;", "+\tif (menu == null) {", "+\t\tint outMenuRef [] = new int [1];", "+\t\tOS.CreateNewMenu ((short) ID_TEMPORARY, 0, outMenuRef);", "+\t\ttheMenu = outMenuRef [0];", "+\t} else {", "+\t\ttheMenu = menu.handle;", "+\t}", "+\tOS.SetRootMenu (theMenu);", "+\tif (menu == null) {", "+\t\tOS.ClearMenuBar ();", "+\t\tOS.DeleteMenu (OS.GetMenuID (theMenu));", "+\t\tOS.DisposeMenu (theMenu);", "+\t}", "+\tmenuBar = menu;", "-void showToolTip (int handle, String toolTipText) {", "-\tif (toolTipText == null || toolTipText.length () == 0) {", "-\t\tif (toolTipWindowHandle != 0)", "-\t\t\tOS.HideWindow(toolTipWindowHandle);", "-\t\treturn;", "-\t}", "-", "-\tif (toolTipWindowHandle != 0)", "-\t\t return;", "-\t", "-\tif (handle != fCurrentControl) {", "-\t\t//System.out.println(\"Display.showToolTip: handle is not current\");", "-\t\t//beep();", "-\t\treturn;", "-\t}", "-\tif (fInContextMenu) {", "-\t\t//System.out.println(\"Display.showToolTip: menu is visible\");", "-\t\t//beep();", "-\t\treturn;", "-\t}\t", "-\tif (OS.StillDown()) {", "-\t\t//System.out.println(\"Display.showToolTip: button is down\");", "-\t\t//beep();", "-\t\treturn;", "-\t}\t", "-\t", "-\ttoolTipText= MacUtil.removeMnemonics(toolTipText);", "-\t", "-\t// remember text", "-\tfToolTipText= toolTipText;", "-\t", "-\t// calculate text bounding box", "-\tshort[] bounds= new short[2];", "-\tshort[] baseLine= new short[1];", "-\tint sHandle= OS.CFStringCreateWithCharacters(toolTipText);", "-\tOS.GetThemeTextDimensions(sHandle, fHoverThemeFont, OS.kThemeStateActive, false, bounds, baseLine);", "-\tif (bounds[1] > 200) {\t// too wide -> wrap text", "-\t\tbounds[1]= (short) 200;", "-\t\tOS.GetThemeTextDimensions(sHandle, fHoverThemeFont, OS.kThemeStateActive, true, bounds, baseLine);", "-\t}", "-\tOS.CFRelease(sHandle);", "-\tint width= bounds[1] + 2*TOOLTIP_MARGIN;", "-\tint height= bounds[0] + 2*TOOLTIP_MARGIN;", "-\t", "-\t// position just below mouse cursor", "-\tMacPoint loc= new MacPoint();", "-\tOS.GetGlobalMouse(loc.getData());", "-\tint x= loc.getX() + 16;", "-\tint y= loc.getY() + 16;", "-", "-\t// Ensure that the tool tip is on the screen.", "-\tMacRect screenBounds= new MacRect();", "-\tOS.GetAvailableWindowPositioningBounds(OS.GetMainDevice(), screenBounds.getData());", "-\tx = Math.max (0, Math.min (x, screenBounds.getWidth() - width ));", "-\ty = Math.max (0, Math.min (y, screenBounds.getHeight() - height ));", "-", "-\t// create window", "-\tint[] wHandle= new int[1];", "-\tif (OS.CreateNewWindow(OS.kHelpWindowClass, 0, new MacRect(x, y, width, height).getData(), wHandle) == OS.kNoErr) {", "-\t\ttoolTipWindowHandle= wHandle[0];", "-\t\tint[] mask= new int[] {", "-\t\t\tOS.kEventClassWindow, OS.kEventWindowDrawContent", "-\t\t};", "-\t\tOS.InstallEventHandler(OS.GetWindowEventTarget(toolTipWindowHandle), fWindowProc, mask, toolTipWindowHandle);", "-\t\tOS.ShowWindow(toolTipWindowHandle);", "-\t\tfLastHoverHandle= handle;", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78db364ed89f74e3591a87494a527ca9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \r public void scroll (int destX, int destY, int x, int y, int width, int height, boolean all)", "signatureAfterChange": "\r \r public void scroll (int destX, int destY, int x, int y, int width, int height, boolean all)", "diff": ["-\tPhRect_t rect = new PhRect_t();\r", "-\trect.ul_x = (short)x;\r", "-\trect.ul_y = (short)y;\r", "-\trect.lr_x = (short)(x + width - 1);\r", "-\trect.lr_y = (short)(y + height - 1);\r", "-\tPhPoint_t delta = new PhPoint_t();\r", "-\tdelta.x = (short)deltaX;\r", "-\tdelta.y = (short)deltaY;\r", "-\tOS.PtFlush ();\r", "-\tOS.PhBlit(OS.PtWidgetRid(handle), rect, delta);\r", "-\tboolean overlaps = (destX < x + width) && (destY < y + height) &&\r", "-\t\t(destX + width > x) && (destY + height > y);\r", "-\tif (!overlaps) {\r", "-\t\tOS.PtDamageExtent (handle, rect);\r", "-\t} else {\r", "-\t\tint src = OS.PhGetTile();\r", "-\t\tint dest = OS.PhGetTile();\r", "-\t\tOS.memmove(src, rect, PhRect_t.sizeof);\r", "-\t\tOS.memmove(dest, rect, PhRect_t.sizeof);\r", "-\t\tOS.PhTranslateTiles(dest, delta);\r", "-\t\tint damage_tile = OS.PhClipTilings(src, dest, null);\r", "-\t\tint[] damage_rects_count = new int[1];\r", "-\t\tint damage_rects = OS.PhTilesToRects(damage_tile, damage_rects_count);\r", "-\t\tOS.PhFreeTiles(dest);\r", "-\t\tOS.PhFreeTiles(damage_tile);\r", "-\t\tfor (int i=0; i<damage_rects_count[0]; i++) {\r", "-\t\t\tOS.memmove(rect, damage_rects + (i * PhRect_t.sizeof), PhRect_t.sizeof);\r", "-\t\t\tOS.PtDamageExtent (handle, rect);\r", "-\t\t}\r", "-\t\tOS.free(damage_rects);\r", "-\t}\r", "+\tGC gc = new GC (this);\r", "+\tgc.copyArea (x, y, width, height, destX, destY);\r", "+\tgc.dispose ();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6170f45d038ce9f4bc09946a88005c62", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "1879f0110762a14d14725c1ff98b0c876188176a", "commitAfterChange": "ec0b807b1bde11bc567a2a3419e26587b448a196", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void copy ()", "signatureAfterChange": " public void copy ()", "diff": ["-\tint [] str = new int [1];", "-\tshort start, end;", "-\tif ((style & SWT.READ_ONLY) != 0) {", "-\t\t// NEEDS WORK - getting whole text, not just selection", "-\t\tint index = OS.GetControlValue (handle);", "-\t\tif (OS.CopyMenuItemTextAsCFString(menuHandle, (short)index, str) != OS.noErr) return;", "-\t\tstart = 0; end = (short)OS.CFStringGetLength (str [0]);", "-\t\tif (start >= end) {", "-\t\t\tOS.CFRelease (str [0]);", "-\t\t\treturn;", "-\t\t}", "-\t} else {", "-\t\tshort [] s = new short [2];", "-\t\tOS.GetControlData (handle, (short)OS.kHIComboBoxEditTextPart, OS.kControlEditTextSelectionTag, 4, s, null);", "-\t\tif (s [0] >= s [1]) return;", "-\t\tstart = s [0]; end = s [1];", "-\t\tif (OS.GetControlData (handle, (short)OS.kHIComboBoxEditTextPart, OS.kControlEditTextCFStringTag, 4, str, null) != OS.noErr) return;", "-\t}", "-\tCFRange range = new CFRange ();", "-\trange.location = start;", "-\trange.length = end - start;", "-\tint encoding = OS.CFStringGetSystemEncoding ();", "-\tint [] size = new int [1];", "-\tOS.CFStringGetBytes (str [0], range, encoding, (byte)'?', true, null, 0, size);", "-\tbyte [] buffer = new byte [size [0]];", "-\tOS.CFStringGetBytes (str [0], range, encoding, (byte)'?', true, buffer, size [0], size);", "-\tOS.CFRelease (str [0]);", "-\t", "-\tOS.ClearCurrentScrap();", "-\tint[] scrap = new int [1];", "+\tPoint selection = getSelection ();", "+\tif (selection.x == selection.y) return;", "+\tcopy (getText (selection.x, selection.y));", "+}", "-\tOS.PutScrapFlavor(scrap [0], OS.kScrapFlavorTypeText, 0, buffer.length, buffer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd891de20b257b6e1ab47c576f7618cb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "e45c8daf8437089db6cbc5e3d29e82678a90a879", "commitAfterChange": "de8a2a56c7d611f04c53b54fd28808f20c983fab", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r static int scalePixmap(int display, int pixmap, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean flipX, boolean flipY)", "signatureAfterChange": "\r static int scalePixmap(int display, int pixmap, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean flipX, boolean flipY)", "diff": ["-\t\tcase 16: {\r", "-\t\t\txImagePtr = OS.XCreateImage(display, visual, 16, OS.ZPixmap, 0, 0, destWidth, destHeight, 32, 0);\r", "-\t\t\tif (xImagePtr == 0) break;\r", "-\t\t\tXImage xImage = new XImage();\r", "-\t\t\tOS.memmove(xImage, xImagePtr, XImage.sizeof);\r", "-\t\t\tint bufSize = xImage.bytes_per_line * destHeight;\r", "-\t\t\tbyte[] buf = new byte[bufSize];\r", "-\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "-\t\t\t\tsrcData, 16, xSrcImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, srcWidth, srcHeight, 0, 0, 0,\r", "-\t\t\t\tImageData.ALPHA_OPAQUE, null, 0, 0, 0,\r", "-\t\t\t\tbuf, 16, xImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, 0, 0, 0,\r", "-\t\t\t\tflipX, flipY);\r", "-\t\t\tint bufPtr = OS.XtMalloc(bufSize);\r", "-\t\t\tOS.memmove(bufPtr, buf, bufSize);\r", "-\t\t\txImage.data = bufPtr;\r", "-\t\t\tOS.memmove(xImagePtr, xImage, XImage.sizeof);\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t\tcase 24: {\r", "-\t\t\txImagePtr = OS.XCreateImage(display, visual, 24, OS.ZPixmap, 0, 0, destWidth, destHeight, 32, 0);\r", "-\t\t\tif (xImagePtr == 0) break;\r", "-\t\t\tXImage xImage = new XImage();\r", "-\t\t\tOS.memmove(xImage, xImagePtr, XImage.sizeof);\r", "-\t\t\tint bufSize = xImage.bytes_per_line * destHeight;\r", "-\t\t\tbyte[] buf = new byte[bufSize];\r", "-\t\t\tImageData.blit(ImageData.BLIT_SRC,\r", "-\t\t\t\tsrcData, 24, xSrcImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, srcWidth, srcHeight, 0, 0, 0,\r", "-\t\t\t\tImageData.ALPHA_OPAQUE, null, 0, 0, 0,\r", "-\t\t\t\tbuf, 24, xImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, 0, 0, 0,\r", "-\t\t\t\tflipX, flipY);\r", "-\t\t\tint bufPtr = OS.XtMalloc(bufSize);\r", "-\t\t\tOS.memmove(bufPtr, buf, bufSize);\r", "-\t\t\txImage.data = bufPtr;\r", "-\t\t\tOS.memmove(xImagePtr, xImage, XImage.sizeof);\r", "-\t\t\tbreak;\r", "-\t\t}\r", "+\t\tcase 16:\r", "+\t\tcase 24:\r", "-\t\t\txImagePtr = OS.XCreateImage(display, visual, 24, OS.ZPixmap, 0, 0, destWidth, destHeight, 32, 0);\r", "+\t\t\txImagePtr = OS.XCreateImage(display, visual, xSrcImage.depth, OS.ZPixmap, 0, 0, destWidth, destHeight, 32, 0);\r", "-\t\t\t\tsrcData, 32, xSrcImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, srcWidth, srcHeight, 0, 0, 0,\r", "+\t\t\t\tsrcData, xSrcImage.bits_per_pixel, xSrcImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, srcWidth, srcHeight, 0, 0, 0,\r", "-\t\t\t\tbuf, 32, xImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, 0, 0, 0,\r", "+\t\t\t\tbuf, xImage.bits_per_pixel, xImage.bytes_per_line, ImageData.MSB_FIRST, 0, 0, destWidth, destHeight, 0, 0, 0,\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4732eb8b9b159f1584e6a07ac6284b53", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "6b0a245288556e7224d3c56682401ca81ba95245", "commitAfterChange": "4dbd09dcd54c5e8b8416ccbe2fdfacc6901be61f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void javaToNative(Object object, TransferData transferData)", "signatureAfterChange": " public void javaToNative(Object object, TransferData transferData)", "diff": ["-\ttransferData.result = -1;", "-\tbyte[][] data = new byte[files.length][];", "-\tfor (int i = 0; i < data.length; i++) {", "-\t\tFile file = new File(files[i]);", "-\t\tboolean isDirectory = file.isDirectory();", "+\tint length = files.length;", "+\tNSMutableArray array = NSMutableArray.arrayWithCapacity(length);", "+\tfor (int i = 0; i < length; i++) {", "-\t\tchar [] chars = new char [fileName.length ()];", "-\t\tfileName.getChars (0, chars.length, chars, 0);", "-\t\tint cfstring = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, chars, chars.length);", "-\t\tif (cfstring == 0) return;", "-\t\ttry {", "-\t\t\tint url = OS.CFURLCreateWithFileSystemPath(OS.kCFAllocatorDefault, cfstring, OS.kCFURLPOSIXPathStyle, isDirectory);", "-\t\t\tif (url == 0) return;", "-\t\t\ttry {", "-\t\t\t\tif (transferData.type == HFSID) {", "-\t\t\t\t\tbyte[] fsRef = new byte[80];", "-\t\t\t\t\tif (!OS.CFURLGetFSRef(url, fsRef)) return;", "-\t\t\t\t\tbyte[] fsSpec = new byte[70];", "-\t\t\t\t\tif (OS.FSGetCatalogInfo(fsRef, 0, null, null, fsSpec, null) != OS.noErr) return;", "-\t\t\t\t\tbyte[] hfsflavor = new byte[10 + fsSpec.length];", "-\t\t\t\t\tbyte[] finfo = new byte[16];", "-\t\t\t\t\tOS.FSpGetFInfo(fsSpec, finfo);", "-\t\t\t\t\tSystem.arraycopy(finfo, 0, hfsflavor, 0, 10);", "-\t\t\t\t\tSystem.arraycopy(fsSpec, 0, hfsflavor, 10, fsSpec.length);", "-\t\t\t\t\tdata[i] = hfsflavor;", "-\t\t\t\t}", "-\t\t\t\tif (transferData.type == FURLID) {", "-\t\t\t\t\tint encoding = OS.CFStringGetSystemEncoding();", "-\t\t\t\t\tint theData = OS.CFURLCreateData(OS.kCFAllocatorDefault, url, encoding, true);", "-\t\t\t\t\tif (theData == 0) return;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tint length = OS.CFDataGetLength(theData);", "-\t\t\t\t\t\tbyte[] buffer = new byte[length];", "-\t\t\t\t\t\tCFRange range = new CFRange();", "-\t\t\t\t\t\trange.length = length;", "-\t\t\t\t\t\tOS.CFDataGetBytes(theData, range, buffer);", "-\t\t\t\t\t\tdata[i] = buffer;", "-\t\t\t\t\t} finally {", "-\t\t\t\t\t\tOS.CFRelease(theData);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} finally {", "-\t\t\t\tOS.CFRelease(url);", "-\t\t\t}", "-\t\t} finally {", "-\t\t\tOS.CFRelease(cfstring);", "-\t\t}", "+\t\tNSString string = NSString.stringWith(fileName);", "+\t\tarray.addObject(string);", "-\ttransferData.data = data;", "-\ttransferData.result = 0;", "+\ttransferData.data = array;"]}], "num": 51215}
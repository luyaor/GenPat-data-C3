{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3d4514fa4f46b60d451860c741e58f03", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe88d704c50c46f1689fa0e112af5cba", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/WebSite.java", "commitBeforeChange": "289fd35b0cad8e2959ad2aaad800132b21fddb4c", "commitAfterChange": "74bc3bf9e2fa90f65ba4467afaa401244bd32dd3", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "  int ProcessUrlAction(int pwszUrl, int dwAction, int pPolicy, int cbPolicy, int pContext, int cbContext, int dwFlags, int dwReserved)", "signatureAfterChange": "  int ProcessUrlAction(int pwszUrl, int dwAction, int pPolicy, int cbPolicy, int pContext, int cbContext, int dwFlags, int dwReserved)", "diff": ["+\t/*", "+\t* If the current page is about:blank and is trusted then", "+\t* override default zone elevation settings to allow the action.  ", "+\t*/", "+\tif (dwAction == IE.URLACTION_FEATURE_ZONE_ELEVATION) {", "+\t    IE ie = (IE)((Browser)getParent().getParent()).webBrowser;", "+\t    if (ie.auto != null && ie._getUrl().startsWith(IE.ABOUT_BLANK) && !ie.untrustedText) {", "+\t\t\tif (cbPolicy >= 4) COM.MoveMemory(pPolicy, new int[] {IE.URLPOLICY_ALLOW}, 4);", "+\t\t\treturn COM.S_OK;", "+\t    }", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5641439edb8761f092ee78f99af0ebc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "7b875feb9aab87fbca7cd80d8d00ddfd577b532c", "commitAfterChange": "cf88a4f46102f955017749fd392f852deca59091", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": " \t\t \tprivate int handleMouseEvent(int nextHandler, int eRefHandle, int eventKind, int whichWindow)", "signatureAfterChange": " \t\t \tprivate int handleMouseEvent(int nextHandler, int eRefHandle, int eventKind, int whichWindow)", "diff": ["+\t\t\t\t", "+\t\t\t\tint cursor= 0;", "+\t\t\t\tWidget w= findWidget(fCurrentControl);", "+\t\t\t\tif (w instanceof Control) {", "+\t\t\t\t\tControl c= (Control) w;", "+\t\t\t\t\tif (c.fCursor != null && c.fCursor.handle != -1)", "+\t\t\t\t\t\tcursor= c.fCursor.handle;", "+\t\t\t\t}", "+\t\t\t\tif (cursor == 0)", "+\t\t\t\t\tOS.InitCursor();", "+\t\t\t\telse", "+\t\t\t\t\tOS.SetCursor(cursor);", "+\t\t\t\t"]}], "num": 8686}
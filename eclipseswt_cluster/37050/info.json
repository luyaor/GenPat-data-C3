{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c7716b8992881e4b559e4079cc43e9f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf0a4aab93c49db2157d0d9ef84ba445", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ce2f35c3f6b1d0b5778f68f011b1d8668d3c5c72", "commitAfterChange": "00bee382096a1807d86474fed7c933116a37eeb8", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 92, "signatureBeforeChange": "\r void drawStyledLine(String line, int lineOffset, int renderOffset, StyleRange[] styles, int paintX, int paintY, GC gc, Color lineBackground, Color lineForeground)", "signatureAfterChange": "\r void drawStyledLine(String line, int lineOffset, int renderOffset, StyleRange[] styles, int paintX, int paintY, GC gc, Color lineBackground, Color lineForeground, StyledTextBidi bidi)", "diff": ["-void drawStyledLine(String line, int lineOffset, int renderOffset, StyleRange[] styles, int paintX, int paintY, GC gc, Color lineBackground, Color lineForeground) {\r", "+void drawStyledLine(String line, int lineOffset, int renderOffset, StyleRange[] styles, int paintX, int paintY, GC gc, Color lineBackground, Color lineForeground, StyledTextBidi bidi) {\r", "-\t\r", "-\tfor (int i = 0; i < styles.length && paintX < renderStopX; i++) {\r", "+\tFontData fontData = gc.getFont().getFontData()[0];\r", "+\t\t\r", "+\t// Always render the entire line when in a bidi locale.\r", "+\t// Since we render the line in logical order we may start past the end\r", "+\t// of the visual right border of the client area and work towards the\r", "+\t// left.\r", "+\tfor (int i = 0; i < styles.length && (paintX < renderStopX || bidi != null); i++) {\r", "+\t\t\tsetLineFont(gc, fontData, SWT.NORMAL);\t\t\t\r", "-\t\t\tpaintX = drawText(line, lineOffset, renderOffset, styleLineStart - renderOffset, filteredStyles, paintX, paintY, gc);\r", "+\t\t\tpaintX = drawText(line, lineOffset, renderOffset, styleLineStart - renderOffset, paintX, paintY, gc, bidi);\r", "-\t\t\tint fillWidth = textWidth(line, lineOffset, renderOffset, styleLineLength, filteredStyles, paintX, gc);\r", "-\t\t\tgc.fillRectangle(paintX - horizontalScrollOffset, paintY, fillWidth, lineHeight);\r", "+\t\t\tif (bidi != null) {\r", "+\t\t\t\tbidi.fillBackground(renderOffset, styleLineLength, -horizontalScrollOffset, paintY, lineHeight);\r", "+\t\t\t}\r", "+\t\t\telse {\r", "+\t\t\t\tint fillWidth = textWidth(line, lineOffset, renderOffset, styleLineLength, filteredStyles, paintX, gc, bidi);\r", "+\t\t\t\tgc.fillRectangle(paintX - horizontalScrollOffset, paintY, fillWidth, lineHeight);\r", "+\t\t\t}\r", "-\t\tpaintX = drawText(line, lineOffset, renderOffset, styleLineLength, filteredStyles, paintX, paintY, gc);\r", "+\t\tsetLineFont(gc, fontData, style.fontStyle);\r", "+\t\tpaintX = drawText(line, lineOffset, renderOffset, styleLineLength, paintX, paintY, gc, bidi);\r", "-\tif ((style == null || renderOffset < lineLength) && paintX < renderStopX) {\r", "+\tif ((style == null || renderOffset < lineLength) && (paintX < renderStopX || bidi != null)) {\r", "-\t\tdrawText(line, lineOffset, renderOffset, lineLength - renderOffset, filteredStyles, paintX, paintY, gc);\r", "+\t\tsetLineFont(gc, fontData, SWT.NORMAL);\r", "+\t\tdrawText(line, lineOffset, renderOffset, lineLength - renderOffset, paintX, paintY, gc, bidi);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d1d526f154956e8811565bba73169be", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ec7edbaede68f4fd7608786e759e23fd6dbe2200", "commitAfterChange": "b206c3d5f3a448a2b6dfbc2c13ed7e271cef1597", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r void drawStyledLine(String line, int lineOffset, int renderOffset, StyleRange[] styles, int paintX, int paintY, GC gc, Color lineBackground, Color lineForeground, FontData currentFont, StyledTextBidi bidi)", "signatureAfterChange": "\r \tvoid print()", "diff": ["+\t */\r", "+\tvoid print() {\r", "+\t\tStyledTextContent content = renderer.getContent();\r", "+\t\tFontData printerFontData = gc.getFont().getFontData()[0];\r", "+\t\tColor background = gc.getBackground();\r", "+\t\tColor foreground = gc.getForeground();\r", "+\t\tint lineHeight = renderer.getLineHeight();\r", "+\t\tint lineCount = content.getLineCount();\r", "+\t\tint paintY = clientArea.y;\r", "+\t\t\r", "+\t\tif (singleLine) {\r", "+\t\t\tlineCount = 1;\r", "+\t\t}\r", "+\t\tif (startPage == 1) {\r", "+\t\t\tprinter.startPage();\r", "+\t\t}\t\t\t\r", "+\t\tfor (int i = startLine; i < lineCount && i < endLine; i++, paintY += lineHeight) {\r", "+\t\t\tString line = content.getLine(i);\r", "+\t\t\t\r", "+\t\t\tif (paintY + lineHeight > clientArea.y + clientArea.height) {\r", "+\t\t\t\tprinter.endPage();\r", "+\t\t\t\tprinter.startPage();\r", "+\t\t\t\tpaintY = clientArea.y;\r", "+\t\t\t}\r", "+\t\t\trenderer.drawLine(\r", "+\t\t\t\tline, i, paintY, gc, background, foreground, printerFontData, true);\r", "+\t\t}\r", "+\t\tif (paintY > clientArea.y && paintY <= clientArea.y + clientArea.height) {\r", "+\t\t\tprinter.endPage();\r", "+\t\t}\r", "+\t}\t\r", "- */\r", "-void drawStyledLine(String line, int lineOffset, int renderOffset, StyleRange[] styles, int paintX, int paintY, GC gc, Color lineBackground, Color lineForeground, FontData currentFont, StyledTextBidi bidi) {\r", "-\tint lineLength = line.length();\r", "-\tColor background = gc.getBackground();\r", "-\tColor foreground = gc.getForeground();\t\r", "-\tStyleRange style = null;\r", "-\tStyleRange[] filteredStyles = filterLineStyles(styles);\t\r", "-\tint renderStopX = getClientArea().width + horizontalScrollOffset;\r", "-\t\t\r", "-\t// Always render the entire line when in a bidi locale.\r", "-\t// Since we render the line in logical order we may start past the end\r", "-\t// of the visual right border of the client area and work towards the\r", "-\t// left.\r", "-\tfor (int i = 0; i < styles.length && (paintX < renderStopX || bidi != null); i++) {\r", "-\t\tint styleLineLength;\r", "-\t\tint styleLineStart;\r", "-\t\tint styleLineEnd;\r", "-\t\tstyle = styles[i];\r", "-\t\tstyleLineEnd = style.start + style.length - lineOffset;\r", "-\t\tstyleLineStart = Math.max(style.start - lineOffset, 0);\r", "-\t\t// render unstyled text between the start of the current \r", "-\t\t// style range and the end of the previously rendered \r", "-\t\t// style range\r", "-\t\tif (styleLineStart > renderOffset) {\r", "-\t\t\tbackground = setLineBackground(gc, background, lineBackground);\r", "-\t\t\tforeground = setLineForeground(gc, foreground, lineForeground);\r", "-\t\t\tsetLineFont(gc, currentFont, SWT.NORMAL);\t\t\t\r", "-\t\t\t// don't try to render more text than requested\r", "-\t\t\tstyleLineStart = Math.min(lineLength, styleLineStart);\r", "-\t\t\tpaintX = drawText(line, renderOffset, styleLineStart - renderOffset, paintX, paintY, gc, bidi);\r", "-\t\t\trenderOffset = styleLineStart;\r", "-\t\t}\r", "-\t\telse\r", "-\t\tif (styleLineEnd <= renderOffset) {\r", "-\t\t\t// style ends before render start offset\r", "-\t\t\t// skip to the next style\r", "-\t\t\tcontinue;\r", "-\t\t}\r", "-\t\tif (styleLineStart >= lineLength) {\r", "-\t\t\t// there are line styles but no text for those styles\r", "-\t\t\t// possible when called with partial line text\r", "-\t\t\tbreak;\r", "-\t\t}\t\t\r", "-\t\tstyleLineLength = Math.min(styleLineEnd, lineLength) - renderOffset;\r", "-\t\t// set style background color if specified\r", "-\t\tif (style.background != null) {\r", "-\t\t\tbackground = setLineBackground(gc, background, style.background);\r", "-\t\t\tforeground = setLineForeground(gc, foreground, style.background);\r", "-\t\t\tif (bidi != null) {\r", "-\t\t\t\tbidi.fillBackground(renderOffset, styleLineLength, -horizontalScrollOffset, paintY, lineHeight);\r", "-\t\t\t}\r", "-\t\t\telse {\r", "-\t\t\t\tint fillWidth = textWidth(line, lineOffset, renderOffset, styleLineLength, filteredStyles, paintX, gc, currentFont);\r", "-\t\t\t\tgc.fillRectangle(paintX - horizontalScrollOffset, paintY, fillWidth, lineHeight);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\telse {\r", "-\t\t\tbackground = setLineBackground(gc, background, lineBackground);\r", "-\t\t}\r", "-\t\t// set style foreground color if specified\r", "-\t\tif (style.foreground != null) {\r", "-\t\t\tforeground = setLineForeground(gc, foreground, style.foreground);\r", "-\t\t}\r", "-\t\telse {\r", "-\t\t\tforeground = setLineForeground(gc, foreground, lineForeground);\r", "-\t\t}\r", "-\t\tsetLineFont(gc, currentFont, style.fontStyle);\r", "-\t\tpaintX = drawText(line, renderOffset, styleLineLength, paintX, paintY, gc, bidi);\r", "-\t\trenderOffset += styleLineLength;\r", "-\t}\r", "-\t// render unstyled text at the end of the line\r", "-\tif ((style == null || renderOffset < lineLength) && \r", "-\t\t(paintX < renderStopX || bidi != null)) {\r", "-\t\tsetLineBackground(gc, background, lineBackground);\r", "-\t\tsetLineForeground(gc, foreground, lineForeground);\r", "-\t\tsetLineFont(gc, currentFont, SWT.NORMAL);\r", "-\t\tdrawText(line, renderOffset, lineLength - renderOffset, paintX, paintY, gc, bidi);\r", "-\t}\t\r", "-}\r"]}], "num": 37050}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "35e79c66991745a03e2872b86d20293e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0b13b71e1327e9f4d0d2f9f81b4385e0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "b84283a91e582d2270aa3a7806c977cb6509440e", "commitAfterChange": "63b280b539f9d81d7dcad44df5b189827eb16556", "methodNumberBeforeChange": 220, "methodNumberAfterChange": 220, "signatureBeforeChange": " void handleMouseMove(Event event)", "signatureAfterChange": " void handleMouseMove(Event event)", "diff": ["-\tif (clickCount == 0) return;", "-\tdoMouseLocationChange(event.x, event.y, true);", "-\tupdate();", "-\tdoAutoScroll(event);", "+\tif (clickCount > 0) {", "+\t\tupdate();", "+\t\tdoAutoScroll(event);", "+\t\tdoMouseLocationChange(event.x, event.y, true);", "+\t} ", "+\tif (renderer.hasLinks) {", "+\t\tint offset = getOffsetAtPoint(event.x, event.y, null, true);", "+\t\tDisplay display = getDisplay();", "+\t\tCursor newCursor = cursor;", "+\t\tif (renderer.hasLink(offset)) {", "+\t\t\tnewCursor = display.getSystemCursor(SWT.CURSOR_HAND);", "+\t\t} else {", "+\t\t\tif (cursor == null) {", "+\t\t\t\tint type = blockSelection ? SWT.CURSOR_CROSS : SWT.CURSOR_IBEAM;", "+\t\t\t\tnewCursor = display.getSystemCursor(type);", "+\t\t\t}", "+\t\t}", "+\t\tif (newCursor != getCursor()) super.setCursor(newCursor);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65ada5f2815d7d78beaa7e2554e26faf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "f705f1e76286c6f3660ecf53b6864bbd63d66494", "commitAfterChange": "0197907d68007347a84613b33a3d149ba32c4fc3", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  void columnAdded (int index)", "signatureAfterChange": "  void columnAdded (int index)", "diff": ["-\tint newLength = parent.columnCount + 1;", "-\tif (images != null) {", "-\t\tImage [] temp = new Image [newLength];", "-\t\tSystem.arraycopy (images, 0, temp, 0, index);", "-\t\tSystem.arraycopy (images, index, temp, index + 1, parent.columnCount - index);", "-\t\timages = temp;", "+\tif (parent.columnCount == 0) {", "+\t\tint headerTemplate = OS.HeaderedItemsControl_HeaderTemplateProperty ();", "+\t\tOS.DependencyObject_ClearValue (handle, headerTemplate);", "+\t\tOS.GCHandle_Free (headerTemplate);", "+\t\tint row = OS.HeaderedItemsControl_Header (handle);", "+\t\tint header = OS.gcnew_SWTTreeViewRowPresenter (parent.handle);", "+\t\tif (header == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.GridViewRowPresenterBase_Columns (header, parent.columns);", "+\t\tOS.HeaderedItemsControl_Header (handle, header);", "+\t\tOS.GridViewRowPresenter_Content (header, row);", "+\t\tOS.GCHandle_Free (header);", "+\t\tOS.GCHandle_Free (row);", "+\t} else {", "+\t\tint newLength = parent.columnCount + 1;", "+\t\tif (images != null) {", "+\t\t\tImage [] temp = new Image [newLength];", "+\t\t\tSystem.arraycopy (images, 0, temp, 0, index);", "+\t\t\tSystem.arraycopy (images, index, temp, index + 1, parent.columnCount - index);", "+\t\t\timages = temp;", "+\t\t}", "+\t\tOS.ArrayList_Insert (stringList, index, 0);", "+\t\tif (imageList != 0) OS.ArrayList_Insert (imageList, index, 0);", "-\tOS.ArrayList_Insert (stringList, index, 0);", "-\tOS.ArrayList_Insert (imageList, index, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b70fcbf487a24dae3b9919aa030bc34", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/wpf/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "8e746dffcecf23a840e3dfc0bae71b16f86cd38f", "commitAfterChange": "76097374ea0b9824b33cdc5c544b526a4229ae52", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void javaToNative(Object object, TransferData transferData)", "signatureAfterChange": " public void javaToNative(Object object, TransferData transferData)", "diff": ["+\tif (!checkFile(object) || !isSupportedType(transferData)) {", "+\t\tDND.error(DND.ERROR_INVALID_DATA);", "+\t}", "+\tString[] fileNames = (String[]) object;", "+\tint length = fileNames.length;", "+\tint pStringId = OS.String_typeid();", "+\tint pStringArray = OS.Array_CreateInstance(pStringId, length);", "+\tfor (int i = 0; i < length; i++) {", "+\t\tint pString = createDotNetString(fileNames[i]);", "+\t\tOS.Array_SetValue(pStringArray, pString, i);", "+\t\tOS.GCHandle_Free(pString);", "+\t}", "+\ttransferData.pValue = pStringArray;", "+\tOS.GCHandle_Free(pStringId);\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac65f4885781485c15a80d32e0670789", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "af9f857dda29d2ee1989cc89928edc6e0958ebc8", "commitAfterChange": "4b24af5ef710affbf05bf5fb1df78e69400546d5", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": "  \tprivate int handleApplicationCallback(int nextHandler, int eRefHandle, int userData)", "signatureAfterChange": "  \tprivate int handleApplicationCallback(int nextHandler, int eRefHandle, int userData)", "diff": ["+\t\t//System.out.println(\"handleApplicationCallback: \" + MacUtil.toString(eventClass));", "+", "-\t\t\t\tSystem.out.println(\"kEventMenuBeginTracking\");", "+\t\t\t\t//System.out.println(\"kEventMenuBeginTracking\");", "-\t\t\t\tSystem.out.println(\"kEventMenuEndTracking\");", "+\t\t\t\t//System.out.println(\"kEventMenuEndTracking\");", "-\t\t\treturn handleMouseCallback(nextHandler, eRefHandle);", "+\t\t\tif (eventKind == OS.kEventMouseDown) {", "+\t\t\t\t\t", "+\t\t\t\thideToolTip ();", "+\t", "+\t\t\t\tOS.ConvertEventRefToEventRecord(eRefHandle, mEvent.getData());", "+\t\t\t\t", "+\t\t\t\tMacPoint where= mEvent.getWhere();", "+\t\t\t\tint[] w= new int[1];", "+\t\t\t\tshort part= OS.FindWindow(where.getData(), w);", "+\t\t\t\t\t\t\t\t", "+\t\t\t\tint oldPort= OS.GetPort();", "+\t\t\t\tOS.SetPortWindowPort(w[0]);", "+\t\t\t\tOS.GlobalToLocal(where.getData());", "+\t\t\t\tOS.SetPort(oldPort);", "+\t\t\t\t", "+\t\t\t\tif (part == OS.inMenuBar) {", "+\t\t\t\t\tdoMenuCommand(OS.MenuSelect(mEvent.getWhere().getData()));", "+\t\t\t\t\treturn OS.kNoErr;", "+\t\t\t\t}", "+\t\t\t}\t\t", "+\t\t\treturn OS.eventNotHandledErr;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "069d0f657e541789e58767c5fd90e667", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "0ec16a191637037ae868aa23c8c55cf2d8a64f40", "commitAfterChange": "d78a1f304fc5886faf978adcf843b66da4334afd", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 50, "signatureBeforeChange": " public void setItems (String [] items)", "signatureAfterChange": " public void setItems (String [] items)", "diff": ["-\tremoveAll ();", "+\tblockSignal (handle, SWT.Selection);", "+\tOS.gtk_list_store_clear (modelHandle);", "+\tunblockSignal (handle, SWT.Selection);", "+\tint iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());", "+\tif (iter == 0) error (SWT.ERROR_ITEM_NOT_ADDED);", "-\t\tadd (items [i]);", "+\t\tString string = items [i];", "+\t\tif (string == null) {", "+\t\t\tOS.g_free (iter);", "+\t\t\terror (SWT.ERROR_NULL_ARGUMENT);", "+\t\t}", "+\t\tbyte [] buffer = Converter.wcsToMbcs (null, string, true);", "+\t\tOS.gtk_list_store_append (modelHandle, iter);", "+\t\tOS.gtk_list_store_set (modelHandle, iter, 0, buffer, -1);", "+\tOS.g_free (iter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78bef7b81df9fd82af3554cc9323f7ae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "c881851b05cec10d724ded28d73b52aced2b4e6a", "commitAfterChange": "7ee9370fb1f257b0959b64e9c229131ca3b8dbfc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["-\t\tif (lockText && msg == OS.WM_SETTEXT) return 0;", "+\t\tif (lockText && msg == OS.WM_SETTEXT) {", "+\t\t\tint /*long*/ hHeap = OS.GetProcessHeap ();", "+\t\t\tint length = OS.GetWindowTextLength (handle);", "+\t\t\tTCHAR buffer = new TCHAR (getCodePage (), length + 1);", "+\t\t\tOS.GetWindowText (handle, buffer, length + 1);", "+\t\t\tint byteCount = buffer.length () * TCHAR.sizeof;", "+\t\t\tint /*long*/ pszText = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, byteCount);", "+\t\t\tOS.MoveMemory (pszText, buffer, byteCount); ", "+\t\t\tint /*long*/ code = OS.CallWindowProc (EditProc, hwndText, msg, wParam, pszText);", "+\t\t\tOS.HeapFree (hHeap, 0, pszText);", "+\t\t\treturn code; ", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "42931fc2f72d338e927706ea73d7b259", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "f6eb283d9f51cb65d57551174be05c7411264a81", "commitAfterChange": "613593df840e56449f6f8204612cf696478ba510", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public boolean loadFont (String path)", "signatureAfterChange": " public boolean loadFont (String path)", "diff": ["-\t//TODO", "-\treturn false;", "+\tcheckDevice();", "+\tif (path == null) SWT.error (SWT.ERROR_NULL_ARGUMENT);", "+\tint length = path.length ();", "+\tchar[] buffer = new char [length + 1];", "+\tpath.getChars (0, length, buffer, 0);", "+\tint str = OS.gcnew_String(buffer);", "+\tint uri = OS.gcnew_Uri(str, OS.UriKind_RelativeOrAbsolute);", "+\tint list = OS.Fonts_GetTypefaces(uri);", "+\tint count = OS.TypefaceCollection_Count(list);", "+\tOS.GCHandle_Free(list);", "+\tOS.GCHandle_Free(uri);", "+\tOS.GCHandle_Free(str);", "+\treturn count != 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c780d291a474b7eb8929dec21fded147", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "3c95388a8bf53c04d5226468d72b0027f3440c32", "commitAfterChange": "41f8d7adece06452508f7ef9680fa45b7d048dcb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r \r void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "signatureAfterChange": "\r \r void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "diff": ["-\tOS.StretchBlt(memHdc, 0, 0, destWidth, destHeight, memHdc, 0, 0, srcWidth, srcHeight, OS.SRCCOPY);\r", "+\t/* \r", "+\t* Bug in WinCE.  StretchBlt does not correctly stretch when the\r", "+\t* source and destination HDCs are the same.  The workaround is to\r", "+\t* stretch to a temporary HDC and blit back into the original HDC.\r", "+\t* Note that StretchBlt correctly compresses the image when the\r", "+\t* source and destination HDCs are the same.\r", "+\t*/\r", "+\tif (OS.IsWinCE && (destWidth > srcWidth || destHeight > srcHeight)) {\r", "+\t\tint tempHdc = OS.CreateCompatibleDC(handle);\r", "+\t\tint tempDib = createDIB(destWidth, destHeight);\r", "+\t\tint oldTempBitmap = OS.SelectObject(tempHdc, tempDib);\r", "+\t\tOS.StretchBlt(tempHdc, 0, 0, destWidth, destHeight, memHdc, 0, 0, srcWidth, srcHeight, OS.SRCCOPY);\r", "+\t\tOS.BitBlt(memHdc, 0, 0, destWidth, destHeight, tempHdc, 0, 0, OS.SRCCOPY);\r", "+\t\tOS.SelectObject(tempHdc, oldTempBitmap);\r", "+\t\tOS.DeleteObject(tempDib);\r", "+\t\tOS.DeleteDC(tempHdc);\r", "+\t} else {\r", "+\t\tOS.StretchBlt(memHdc, 0, 0, destWidth, destHeight, memHdc, 0, 0, srcWidth, srcHeight, OS.SRCCOPY);\r", "+\t}\r"]}], "num": 40148}
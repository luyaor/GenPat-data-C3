{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d334710c8b7a4f35966fdd749f520fa", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55260950442b4ebf7510ecb05aa8e813", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 367, "methodNumberAfterChange": 368, "signatureBeforeChange": " \tint get_text(int startOffset, int endOffset, int pbstrText)", "signatureAfterChange": " \tint get_text(int startOffset, int endOffset, int pbstrText)", "diff": ["+\t\tevent.count = 0;", "+\t\tevent.type = ACC.TEXT_BOUNDARY_ALL;", "-\t\tif (event.result == null || event.result.length() == 0) return COM.S_FALSE; // TODO: is S_FALSE ok here?", "+\t\tif (event.result == null) {", "+\t\t\tAccessibleControlEvent e = new AccessibleControlEvent(this);", "+\t\t\te.childID = ACC.CHILDID_SELF;", "+\t\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\t\tlistener.getRole(e);", "+\t\t\t\tlistener.getValue(e);", "+\t\t\t}", "+\t\t\t// TODO: Consider passing the value through for other roles as well (i.e. combo, etc). Keep in sync with get_nCharacters.", "+\t\t\tif (e.detail == ACC.ROLE_TEXT) {", "+\t\t\t\tevent.result = e.result;", "+\t\t\t}", "+\t\t}", "+\t\tif (DEBUG) print(\"IAccessibleText::get_text(\" + startOffset + \", \" + endOffset + \") returning \" + event.result);", "+\t\tif (event.result == null) return COM.E_INVALIDARG;", "-\t\t// TODO: @retval E_INVALIDARG if bad [in] passed, [out] value is NULL"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "341e60ae0c2c1185c4b780d03d92ec1b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "cac6973b2c58ca0acd4675b42eb96193c2a77ffe", "commitAfterChange": "bb6359af4f45e12393d67d626b7c45734cc22977", "methodNumberBeforeChange": 289, "methodNumberAfterChange": 284, "signatureBeforeChange": " \tint get_attributes(int pbstrAttributes)", "signatureAfterChange": " \tint get_attributes(int pbstrAttributes)", "diff": ["-\t\tAccessibleControlEvent event2 = new AccessibleControlEvent(this);", "-\t\tevent2.childID = ACC.CHILDID_SELF;", "-\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "-\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "-\t\t\tlistener.getRole(event2);", "-\t\t}", "-\t\tif (event2.detail == ACC.ROLE_TEXT) {", "+\t\tif (getRole() == ACC.ROLE_TEXT) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2c4265c47dfb5fba988e28901dca55f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "cac6973b2c58ca0acd4675b42eb96193c2a77ffe", "commitAfterChange": "bb6359af4f45e12393d67d626b7c45734cc22977", "methodNumberBeforeChange": 279, "methodNumberAfterChange": 274, "signatureBeforeChange": " \tint get_states(int pStates)", "signatureAfterChange": " \tint get_states(int pStates)", "diff": ["-\t\tAccessibleControlEvent event2 = new AccessibleControlEvent(this);", "-\t\tevent2.childID = ACC.CHILDID_SELF;", "-\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "-\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "-\t\t\tlistener.getRole(event2);", "-\t\t}", "-\t\tif (event2.detail == ACC.ROLE_TEXT && accessibleTextExtendedListeners.size() > 0) {", "+\t\tif (getRole() == ACC.ROLE_TEXT && accessibleTextExtendedListeners.size() > 0) {", "-\t\tif (DEBUG) printIA2States(\"IAccessible2::get_states returning \", ia2States);", "+\t\tif (DEBUG) print(\"IAccessible2::get_states returning \" + getIA2StatesString(ia2States));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "924d7f09eec1a81641ebc3c642e37c99", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "18ce373e262126236e66fff74f7d2ddc7fffb312", "commitAfterChange": "41ad2a506242e46d3b0d85d794d3bd6a732e7252", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 39, "signatureBeforeChange": " \tpublic boolean internal_accessibilityIsIgnored(int childID)", "signatureAfterChange": " \tpublic boolean internal_accessibilityIsIgnored(int childID)", "diff": ["-\t\treturn false;", "+\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "+\t\tevent.childID = childID;", "+\t\tevent.detail = -1;", "+\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\tlistener.getRole(event);", "+\t\t}", "+", "+\t\tboolean shouldIgnore = (event.detail == -1);", "+\t\t", "+\t\tif (shouldIgnore) {", "+\t\t\tshouldIgnore = getTitleAttribute(childID) == null && getHelpAttribute(childID) == null && getDescriptionAttribute(childID) == null;", "+\t\t}", "+\t\t", "+\t\treturn shouldIgnore;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c008332c06189aed727efd0072ec997d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 246, "methodNumberAfterChange": 246, "signatureBeforeChange": " \tpublic void textChanged (int type, int startIndex, int length)", "signatureAfterChange": " \tpublic void textChanged (int type, int startIndex, int length)", "diff": ["+\t\tAccessibleTextEvent event = new AccessibleTextEvent(this);", "+\t\tevent.start = startIndex;", "+\t\tevent.end = startIndex + length;", "+\t\tevent.count = 0;", "+\t\tevent.type = ACC.TEXT_BOUNDARY_ALL;", "+\t\tfor (int i = 0; i < accessibleTextExtendedListeners.size(); i++) {", "+\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) accessibleTextExtendedListeners.elementAt(i);", "+\t\t\tlistener.getText(event);", "+\t\t}", "+\t\tif (event.result != null) {", "+\t\t\tObject[] eventData = new Object[] {", "+\t\t\t\t\tnew Integer(type),", "+\t\t\t\t\tnew Integer(startIndex),", "+\t\t\t\t\tnew Integer(startIndex + length),", "+\t\t\t\t\tevent.result};", "+\t\t\tsendEvent(ACC.EVENT_TEXT_CHANGED, eventData);", "+\t\t\treturn;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a2f889c0ecafb6b434651e6b15ed379", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 366, "methodNumberAfterChange": 367, "signatureBeforeChange": " \tint get_selection(int selectionIndex, int pStartOffset, int pEndOffset)", "signatureAfterChange": " \tint get_selection(int selectionIndex, int pStartOffset, int pEndOffset)", "diff": ["+\t\tevent.start = -1;", "+\t\tevent.end = -1;", "+\t\tif (event.start == -1 && selectionIndex == 0) {", "+\t\t\tevent.childID = ACC.CHILDID_SELF;", "+\t\t\tevent.offset = -1;", "+\t\t\tevent.length = 0;", "+\t\t\tfor (int i = 0; i < accessibleTextListeners.size(); i++) {", "+\t\t\t\tAccessibleTextListener listener = (AccessibleTextListener) accessibleTextListeners.elementAt(i);", "+\t\t\t\tlistener.getSelectionRange (event);", "+\t\t\t}", "+\t\t\tevent.start = event.offset;", "+\t\t\tevent.end = event.offset + event.length;", "+\t\t}", "+\t\tif (DEBUG) print(\"IAccessibleText::get_selection(\" + selectionIndex + \") returning \" + event.start + \", \" + event.end);", "+\t\t/*", "+\t\t * Note that the current IA2 spec says to return 0,0 when there's nothing to return,", "+\t\t * but since 0 is a valid return value, the spec is going to be updated to return -1,-1.", "+\t\t */", "+\t\tif (event.start == -1) return COM.S_FALSE;", "-\t\t// TODO: @retval S_FALSE if there is nothing to return, [out] values are 0s@retval E_INVALIDARG if bad [in] passed, [out] values are 0s"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "507cff256bf1a374b7e50d83b9d07eb5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 364, "methodNumberAfterChange": 365, "signatureBeforeChange": " \tint get_nSelections(int pNSelections)", "signatureAfterChange": " \tint get_nSelections(int pNSelections)", "diff": ["+\t\tevent.count = -1;", "+\t\t}", "+\t\tif (event.count == -1) {", "+\t\t\tevent.childID = ACC.CHILDID_SELF;", "+\t\t\tevent.offset = -1;", "+\t\t\tevent.length = 0;", "+\t\t\tfor (int i = 0; i < accessibleTextListeners.size(); i++) {", "+\t\t\t\tAccessibleTextListener listener = (AccessibleTextListener) accessibleTextListeners.elementAt(i);", "+\t\t\t\tlistener.getSelectionRange (event);", "+\t\t\t}", "+\t\t\tevent.count = event.offset != -1 && event.length > 0 ? 1 : 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "84c31b41b44990ff32b6b8de23cc2e3b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "cac6973b2c58ca0acd4675b42eb96193c2a77ffe", "commitAfterChange": "bb6359af4f45e12393d67d626b7c45734cc22977", "methodNumberBeforeChange": 275, "methodNumberAfterChange": 270, "signatureBeforeChange": " \tint get_role(int pRole)", "signatureAfterChange": " \tint get_role(int pRole)", "diff": ["-\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "-\t\tevent.childID = ACC.CHILDID_SELF;", "-\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "-\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "-\t\t\tlistener.getRole(event);", "-\t\t}", "-\t\tCOM.MoveMemory(pRole, new int [] { event.detail }, 4);", "+\t\tint role = getRole();", "+\t\tif (DEBUG) print(\"IAccessible::get_accRole() returning \" + getRoleString(role));", "+\t\tCOM.MoveMemory(pRole, new int [] { role }, 4);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19782fe6e579ea8ad93b0562306d07aa", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 374, "methodNumberAfterChange": 375, "signatureBeforeChange": " \tint get_nCharacters(int pNCharacters)", "signatureAfterChange": " \tint get_nCharacters(int pNCharacters)", "diff": ["+\t\tevent.count = -1;", "+\t\t}", "+\t\tif (event.count == -1) {", "+\t\t\tAccessibleControlEvent e = new AccessibleControlEvent(this);", "+\t\t\te.childID = ACC.CHILDID_SELF;", "+\t\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\t\tlistener.getRole(e);", "+\t\t\t\tlistener.getValue(e);", "+\t\t\t}", "+\t\t\t// TODO: Consider passing the value through for other roles as well (i.e. combo, etc). Keep in sync with get_text.", "+\t\t\tevent.count = e.detail == ACC.ROLE_TEXT && e.result != null ? e.result.length() : 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b92fe2d282edc972fd043b23f6a73f16", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 305, "methodNumberAfterChange": 306, "signatureBeforeChange": " \tint get_localizedName(int actionIndex, int pbstrLocalizedName)", "signatureAfterChange": " \tint get_localizedName(int actionIndex, int pbstrLocalizedName)", "diff": ["-\t\t// TODO: Maybe return getName here also?", "-\t\treturn COM.S_FALSE;", "+\t\tAccessibleActionEvent event = new AccessibleActionEvent(this);", "+\t\tevent.index = actionIndex;", "+\t\tevent.localized = true;", "+\t\tfor (int i = 0; i < accessibleActionListeners.size(); i++) {", "+\t\t\tAccessibleActionListener listener = (AccessibleActionListener) accessibleActionListeners.elementAt(i);", "+\t\t\tlistener.getName(event);", "+\t\t}", "+\t\tif (event.result == null || event.result.length() == 0) {", "+\t\t\tsetString(pbstrLocalizedName, null);", "+\t\t\treturn COM.S_FALSE;", "+\t\t}", "+\t\tsetString(pbstrLocalizedName, event.result);", "+\t\treturn COM.S_OK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "447b627c4bf07cec9016cf6dc047cbf6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "d8d3e8f612b1662e51aaeb1aba1b797cad6504c1", "commitAfterChange": "a2a2b61ca97ad1454fa39c9d961ae445a63a1a20", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " \t \tid getDescriptionAttribute (int childID)", "signatureAfterChange": " \t \tid getDescriptionAttribute (int childID)", "diff": ["-\t\t\tfor (int i = 0; i < accessibleListeners.size(); i++) {", "-\t\t\t\tAccessibleListener listener = (AccessibleListener) accessibleListeners.elementAt(i);", "-\t\t\t\tlistener.getName(event);", "-\t\t\t}", "-", "-\t\t\treturnValue = (event.result != null ? NSString.stringWith(event.result) : null);", "-", "-\t\t\t// If that failed and we are a composite or a canvas return a blank string -- otherwise, let the", "-\t\t\t// Cocoa control handle it.", "-\t\t\tif (returnValue == null) {", "-\t\t\t\tif (control instanceof Composite) returnValue = NSString.stringWith(\"\");", "-\t\t\t}", "+\t\t\tif (control instanceof Composite) returnValue = NSString.stringWith(\"\");"]}], "num": 42232}
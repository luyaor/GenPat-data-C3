{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98f1daac116e33847baaeb7d86b7beae", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75ad3ece3e1fe238ea663863d04508a5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "b6e2bd057926c623f72600c821ac1a30f188a3a4", "commitAfterChange": "ca6d7bb7967745a2285b1116244864fea9898082", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 95, "signatureBeforeChange": "  int hitTest (int id, int sel, NSPoint point)", "signatureAfterChange": "  int hitTest (int id, int sel, NSPoint point)", "diff": ["+", "-\t\tNSView superview = new NSView(id).superview();", "-\t\tif (superview != null) {", "-\t\t\tNSPoint pt = superview.convertPoint_toView_(point, view);", "-\t\t\tif (!view.isFlipped ()) {", "-\t\t\t\tpt.y = view.bounds().height - pt.y;", "-\t\t\t}", "-\t\t\tif (!regionPath.containsPoint(pt)) return 0;", "-\t\t}", "+\t\tNSView rgnView = topView ();", "+\t\tif (!rgnView.isFlipped()) rgnView = eventView ();", "+\t\tNSPoint pt = rgnView.convertPoint_fromView_ (point, new NSView (id).superview());", "+\t\tif (!regionPath.containsPoint(pt)) return 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6222f7fa0173ab9313d146a63bc386e6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "bb3534bcdc2d38bc184b055b59a542f294cf921d", "commitAfterChange": "02978a488ad6a59baa930b6015ae04662bb09af1", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 58, "signatureBeforeChange": "  \tid getAttributedStringForRangeParameterizedAttribute(id parameter, int childID)", "signatureAfterChange": "  \tid getAttributedStringForRangeParameterizedAttribute(id parameter, int childID)", "diff": ["-\t\tif (accessibleAttributeListeners.size() == 0) return null;", "+\t\tif (accessibleAttributeListenersSize() == 0) return null;", "-\t\t\tif (accessibleAttributeListeners.size() > 0) {", "-\t\t\t\tfor (int i = 0; i < accessibleAttributeListeners.size(); i++) {", "-\t\t\t\t\tAccessibleAttributeListener listener = (AccessibleAttributeListener) accessibleAttributeListeners.elementAt(i);", "-\t\t\t\t\tlistener.getTextAttributes(event);", "-\t\t\t\t}", "+\t\t\tfor (int i = 0; i < accessibleAttributeListenersSize(); i++) {", "+\t\t\t\tAccessibleAttributeListener listener = (AccessibleAttributeListener) accessibleAttributeListeners.elementAt(i);", "+\t\t\t\tlistener.getTextAttributes(event);", "-\t\tif (accessibleAttributeListeners.size() > 0) {", "-\t\t\tfor (int i = 0; i < accessibleAttributeListeners.size(); i++) {", "-\t\t\t\tAccessibleAttributeListener listener = (AccessibleAttributeListener) accessibleAttributeListeners.elementAt(i);", "-\t\t\t\tlistener.getAttributes(docAttributes);", "-\t\t\t}", "+\t\tfor (int i = 0; i < accessibleAttributeListenersSize(); i++) {", "+\t\t\tAccessibleAttributeListener listener = (AccessibleAttributeListener) accessibleAttributeListeners.elementAt(i);", "+\t\t\tlistener.getAttributes(docAttributes);"]}], "num": 23003}
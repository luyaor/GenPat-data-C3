{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1bc5e50213142763ad4ad097a98cb1d3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff67caefc0c36cc4ab0bcb3c562772f9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java", "commitBeforeChange": "31cd6ab709bd12e0a040b5f3cf2da696eefbaf45", "commitAfterChange": "828ba16598ffe05117d7e7850c0ff70351e02de8", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 90, "signatureBeforeChange": " \tvoid setStyle(int style, int start, int length)", "signatureAfterChange": " \tvoid setStyle(int style, int start, int length)", "diff": ["+\t\t\t\tcase UNDERLINE_LINK:", "+\t\t\t\t\tif (link != null && link.length() > 0) {", "+\t\t\t\t\t\tnewRange.underlineStyle = SWT.UNDERLINE_LINK;", "+\t\t\t\t\t\tnewRange.data = link;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tnewRange.underline = false;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "-\t\t\tnewRange.underlineColor = underlineColor;", "+\t\t\tif (newRange.underline) newRange.underlineColor = underlineColor;", "-\t\t\t\tmergedRange.underline = !range.underline || range.underlineStyle != newRange.underlineStyle || range.underlineColor != newRange.underlineColor;", "+\t\t\t\tif ((style & UNDERLINE_LINK) != 0) {", "+\t\t\t\t\tmergedRange.underline = !range.underline || range.underlineStyle != newRange.underlineStyle || range.underlineColor != newRange.underlineColor || range.data != newRange.data;", "+\t\t\t\t\tif (newRange.data == null) mergedRange.underline = false;", "+\t\t\t\t} else {", "+\t\t\t\t\tmergedRange.underline = !range.underline || range.underlineStyle != newRange.underlineStyle || range.underlineColor != newRange.underlineColor;", "+\t\t\t\t}", "+\t\t\t\tmergedRange.data = mergedRange.underline ? newRange.data : null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5589a248cf7899ca6d2bf9f300b262ee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "22de0ea22c2d2d4f45ea2d42713f45532f3dae10", "commitAfterChange": "c2238720db4daf5a12590fa4578a04a7b36dabc4", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "  boolean setKeyState (Event event, int type)", "signatureAfterChange": "  boolean setKeyState (Event event, int type, int wParam, int lParam)", "diff": ["-boolean setKeyState (Event event, int type) {", "-\tif (display.lastAscii != 0 || display.lastNull) {", "-\t\tevent.character = mbcsToWcs ((char) display.lastAscii);", "+boolean setKeyState (Event event, int type, int wParam, int lParam) {", "+\t", "+\t/*", "+\t* Feature in Windows.  When the user presses Ctrl+Backspace", "+\t* or Ctrl+Enter, Windows sends a WM_CHAR with Delete (0x7F)", "+\t* and '\\n' instead of '\\b' and '\\r'.  This is the correct", "+\t* platform behavior but is not portable.  The fix is detect", "+\t* these cases and convert the character.", "+\t*/", "+\tswitch (display.lastAscii) {", "+\t\tcase SWT.DEL:", "+\t\t\tif (display.lastKey == SWT.BS) display.lastAscii = SWT.BS;", "+\t\t\tbreak;", "+\t\tcase SWT.LF:", "+\t\t\tif (display.lastKey == SWT.CR) display.lastAscii = SWT.CR;", "+\t\t\tbreak;", "+\t}", "+\t", "+\t/*", "+\t* Feature in Windows.  When the user presses either the Enter", "+\t* key or the numeric keypad Enter key, Windows sends a WM_KEYDOWN", "+\t* with wParam=VK_RETURN in both cases.  In order to distinguish", "+\t* between the keys, the extended key bit is tested. If the bit", "+\t* is set, assume that the numeric keypad Enter was pressed. ", "+\t*/", "+\tif (display.lastKey == SWT.CR && display.lastAscii == SWT.CR) {", "+\t\tif ((lParam & 0x1000000) != 0) display.lastKey = SWT.KEYPAD_CR;", "+\t}", "+\t", "+\tif (display.lastVirtual) {", "+\t\t/*", "+\t\t* Feature in Windows.  The virtual key VK_DELETE is not", "+\t\t* treated as both a virtual key and an ASCII key by Windows.", "+\t\t* Therefore, we will not receive a WM_CHAR for this key.", "+\t\t* The fix is to treat VK_DELETE as a special case and map", "+\t\t* the ASCII value explictly (Delete is 0x7F).", "+\t\t*/", "+\t\tif (display.lastKey == OS.VK_DELETE) display.lastAscii = 0x7F;", "+\t\t", "+\t\tevent.keyCode = Display.translateKey (display.lastKey);", "+\t} else {", "-\tif (display.lastVirtual) {", "-\t\tevent.keyCode = Display.translateKey (display.lastKey);", "+\tif (display.lastAscii != 0 || display.lastNull) {", "+\t\tevent.character = mbcsToWcs ((char) display.lastAscii);"]}], "num": 52591}
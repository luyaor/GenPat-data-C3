{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6ea4519592ae8c4a7b560949c52eb919", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09cf79fae6ee0cc127cbc75e63875ed1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/NativesGenerator.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public void generate(Method method)", "signatureAfterChange": "  public void generate(JNIMethod method)", "diff": ["-public void generate(Method method) {", "-\tMethodData methodData = getMetaData().getMetaData(method);", "-\tif (methodData.getFlag(FLAG_NO_GEN)) return;", "-\tClass returnType = method.getReturnType();", "-\tClass[] paramTypes = method.getParameterTypes();", "-\tString function = getFunctionName(method);", "-\t", "-\tif (!(returnType == Void.TYPE || returnType.isPrimitive() || isSystemClass(returnType) || returnType == String.class)) {", "+public void generate(JNIMethod method) {", "+\tif (method.getFlag(FLAG_NO_GEN)) return;", "+\tJNIType returnType = method.getReturnType(), returnType64 = method.getReturnType64();\t", "+\tif (!(returnType.isType(\"void\") || returnType.isPrimitive() || isSystemClass(returnType) || returnType.isType(\"java.lang.String\"))) {", "-\t", "-\tgenerateSourceStart(function);", "+\tJNIParameter[] params = method.getParameters();", "+\tString function = getFunctionName(method), function64 = getFunctionName(method, method.getParameterTypes64());\t", "+\tgenerateSourceStart(function, function64);", "+\tboolean sameFunction = function.equals(function64);", "+\tif (!sameFunction) {", "+\t\toutput(\"#ifndef \");", "+\t\toutput(JNI64);", "+\t\toutputln();", "+\t}", "-\t\tgenerateFunctionPrototype(method, function, paramTypes, returnType, true);", "+\t\tgenerateFunctionPrototype(method, function, params, returnType, returnType64, true);", "-\tgenerateFunctionPrototype(method, function, paramTypes, returnType, false);", "-\tgenerateFunctionBody(method, methodData, function, paramTypes, returnType);", "+\tgenerateFunctionPrototype(method, function, params, returnType, returnType64, !sameFunction);", "+\tif (!function.equals(function64)) {", "+\t\toutputln();", "+\t\toutputln(\"#else\");", "+\t\tif (isCPP) {", "+\t\t\toutput(\"extern \\\"C\\\" \");", "+\t\t\tgenerateFunctionPrototype(method, function64, params, returnType, returnType64, true);", "+\t\t\toutputln(\";\");", "+\t\t}", "+\t\tgenerateFunctionPrototype(method, function64, params, returnType, returnType64, !sameFunction);", "+\t\toutputln();", "+\t\toutputln(\"#endif\");", "+\t}", "+\tgenerateFunctionBody(method, function, function64, params, returnType, returnType64);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cca30ae269b0ddf98ff7792084019607", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/ClipboardProxy.java", "commitBeforeChange": "a23347b0f61594cc11dfc269d3641f4c34fbdc88", "commitAfterChange": "effac1e46c22741d9e3c8e7bcdf198ca545ece88", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  int[] getAvailableTypes(int clipboardType)", "signatureAfterChange": "  int[] getAvailableTypes(int clipboardType)", "diff": ["-\tint target = clipboardType == DND.CLIPBOARD ? atomAtom : targetsAtom;", "+\tint target = targetsAtom;", "+\t}", "+\tif (done && selectionValue == null) {", "+\t\tdone = false;", "+\t\ttarget = motifClipboardAtom;", "+\t\tOS.XtGetSelectionValue(shellHandle, selection, target, XtSelectionCallbackCallback.getAddress(), 0, OS.CurrentTime);", "+\t\tif (!done) {", "+\t\t\tint xtContext = OS.XtDisplayToApplicationContext(xDisplay);", "+\t\t\tint selectionTimeout = OS.XtAppGetSelectionTimeout(xtContext);", "+\t\t\twait(selectionTimeout);", "+\t\t\t", "+\t\t}", "+\t}", "+\tif (done && selectionValue == null) {", "+\t\tdone = false;", "+\t\ttarget = atomAtom;", "+\t\tOS.XtGetSelectionValue(shellHandle, selection, target, XtSelectionCallbackCallback.getAddress(), 0, OS.CurrentTime);", "+\t\tif (!done) {", "+\t\t\tint xtContext = OS.XtDisplayToApplicationContext(xDisplay);", "+\t\t\tint selectionTimeout = OS.XtAppGetSelectionTimeout(xtContext);", "+\t\t\twait(selectionTimeout);", "+\t\t\t", "+\t\t}"]}], "num": 15537}
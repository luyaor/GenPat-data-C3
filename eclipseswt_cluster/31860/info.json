{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6c4c55de4c318d48278e09e9f8b4811f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3ae34401266e548e8ea56e3c2e63516", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "e66a062753963b40648248fc8a6673896e5ac6b7", "commitAfterChange": "494ab6f0b71cc7f5e8cc75a8b9a6f702134e7e32", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "  public boolean post(Event event)", "signatureAfterChange": "  public boolean post(Event event)", "diff": ["-\t\t\t\tchar key = event.character;", "+\t\t\t\tint key = -1;", "-\t\t\t\tfor (int i = 0 ; i <= 0x7F ; i++) {", "-\t\t\t\t\tint result = OS.KeyTranslate (kchrPtr, (short) i, state);", "-\t\t\t\t\tif (result <= 0x7f) {", "-\t\t\t\t\t\tcode = result & 0x7f;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tint [] encoding = new int [1];", "-\t\t\t\t\t\tshort keyScript = (short) OS.GetScriptManagerVariable ((short) OS.smKeyScript);", "-\t\t\t\t\t\tshort regionCode = (short) OS.GetScriptManagerVariable ((short) OS.smRegionCode);", "-\t\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, regionCode, null, encoding) == OS.paramErr) {", "-\t\t\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, (short) OS.kTextRegionDontCare, null, encoding) == OS.paramErr) {", "-\t\t\t\t\t\t\t\tencoding [0] = OS.kTextEncodingMacRoman;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tint [] encodingInfo = new int [1];", "-\t\t\t\t\t\tOS.CreateTextToUnicodeInfoByEncoding (encoding [0], encodingInfo);", "-\t\t\t\t\t\tif (encodingInfo [0] != 0) {", "-\t\t\t\t\t\t\tchar [] chars = new char [1];", "-\t\t\t\t\t\t\tint [] nchars = new int [1];", "-\t\t\t\t\t\t\tbyte [] buffer = new byte [2];", "-\t\t\t\t\t\t\tbuffer [0] = 1;", "-\t\t\t\t\t\t\tbuffer [1] = (byte) (result & 0xFF);", "-\t\t\t\t\t\t\tOS.ConvertFromPStringToUnicode (encodingInfo [0], buffer, chars.length * 2, nchars, chars);", "-\t\t\t\t\t\t\tOS.DisposeTextToUnicodeInfo (encodingInfo);", "-\t\t\t\t\t\t\tcode = chars [0];", "-\t\t\t\t\t\t}", "+\t\t\t\tint [] encoding = new int [1];", "+\t\t\t\tshort keyScript = (short) OS.GetScriptManagerVariable ((short) OS.smKeyScript);", "+\t\t\t\tshort regionCode = (short) OS.GetScriptManagerVariable ((short) OS.smRegionCode);", "+\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, regionCode, null, encoding) == OS.paramErr) {", "+\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, (short) OS.kTextRegionDontCare, null, encoding) == OS.paramErr) {", "+\t\t\t\t\t\tencoding [0] = OS.kTextEncodingMacRoman;", "-\t\t\t\t\tif (code == key) {", "+\t\t\t\t}", "+\t\t\t\tint [] encodingInfo = new int [1];", "+\t\t\t\tOS.CreateUnicodeToTextInfoByEncoding (encoding [0], encodingInfo);", "+\t\t\t\tif (encodingInfo [0] != 0) {", "+\t\t\t\t\tchar [] input = {event.character};", "+\t\t\t\t\tbyte [] buffer = new byte [2];", "+\t\t\t\t\tOS.ConvertFromUnicodeToPString (encodingInfo [0], 2, input, buffer);", "+\t\t\t\t\tOS.DisposeUnicodeToTextInfo (encodingInfo);", "+\t\t\t\t\tkey = buffer [1] & 0x7f;", "+\t\t\t\t}", "+\t\t\t\tif (key == -1) return false;\t\t\t\t", "+\t\t\t\tfor (int i = 0 ; i <= 0x7F ; i++) {", "+\t\t\t\t\tint result1 = OS.KeyTranslate (kchrPtr, (short) (i | 512), state);", "+\t\t\t\t\tint result2 = OS.KeyTranslate (kchrPtr, (short) i, state);", "+\t\t\t\t\tif ((result1 & 0x7f) == key || (result2 & 0x7f) == key) {", "+\t\t\tint chord = OS.GetCurrentEventButtonState ();", "-\t\t\t\tint chord = OS.GetCurrentEventButtonState ();", "-\t\t\t\treturn OS.CGPostMouseEvent (mouseCursorPosition, true, 1, ((chord & 0x1) != 0)) == 0;", "+\t\t\t\treturn OS.CGPostMouseEvent (mouseCursorPosition, true, 3, (chord & 0x1) != 0, (chord & 0x2) != 0, (chord & 0x4) != 0) == 0;", "-\t\t\t\tif (event.button != 1) return false;", "+\t\t\t\tint button = event.button;", "+\t\t\t\tif (button < 1 || button > 3) return false;", "+\t\t\t\tboolean button1 = false, button2 = false, button3 = false;", "+\t\t\t\tswitch (button) {", "+\t\t\t\t\tcase 1: {", "+\t\t\t\t\t\tbutton1 = type == SWT.MouseDown;", "+\t\t\t\t\t\tbutton2 = (chord & 0x4) != 0;", "+\t\t\t\t\t\tbutton3 = (chord & 0x2) != 0;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase 2: {", "+\t\t\t\t\t\tbutton1 = (chord & 0x1) != 0;", "+\t\t\t\t\t\tbutton2 = type == SWT.MouseDown;", "+\t\t\t\t\t\tbutton3 = (chord & 0x2) != 0;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase 3: {", "+\t\t\t\t\t\tbutton1 = (chord & 0x1) != 0;", "+\t\t\t\t\t\tbutton2 = (chord & 0x4) != 0;", "+\t\t\t\t\t\tbutton3 = type == SWT.MouseDown;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\t\treturn OS.CGPostMouseEvent (mouseCursorPosition, true, 1, type == SWT.MouseDown) == 0;", "+\t\t\t\treturn OS.CGPostMouseEvent (mouseCursorPosition, true, 3, button1, button3, button2) == 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6195c303e292855303440df3ab4cd33", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "90874dd0f318ad72c86947cdc4c25287bab952a0", "commitAfterChange": "d83561e2a470cacc6095411b57b2532529e6968b", "methodNumberBeforeChange": 155, "methodNumberAfterChange": 155, "signatureBeforeChange": "  boolean setKeyState (Event event, int type, int theEvent)", "signatureAfterChange": "  boolean setKeyState (Event event, int type, int theEvent)", "diff": ["-\t\t\t\tint result = OS.KeyTranslate (display.kchrPtr, (short)keyCode [0], display.kchrState);", "-\t\t\t\tif (result <= 0x7f) {", "-\t\t\t\t\tevent.keyCode = result & 0x7f;", "-\t\t\t\t} else {", "-\t\t\t\t\tint [] encoding = new int [1];", "-\t\t\t\t\tshort keyScript = (short) OS.GetScriptManagerVariable ((short) OS.smKeyScript);", "-\t\t\t\t\tshort regionCode = (short) OS.GetScriptManagerVariable ((short) OS.smRegionCode);", "-\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, regionCode, null, encoding) == OS.paramErr) {", "-\t\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, (short) OS.kTextRegionDontCare, null, encoding) == OS.paramErr) {", "-\t\t\t\t\t\t\tencoding [0] = OS.kTextEncodingMacRoman;", "-\t\t\t\t\t\t}", "+\t\t\t\tint [] layoutRef = new int [1];", "+\t\t\t\tint layoutKind = OS.kKLKCHRKind;", "+\t\t\t\tif (OS.KLGetCurrentKeyboardLayout (layoutRef) == OS.noErr) {", "+\t\t\t\t\tint [] layoutKindRef = new int [1];", "+\t\t\t\t\tOS.KLGetKeyboardLayoutProperty (layoutRef[0], OS.kKLKind, layoutKindRef);", "+\t\t\t\t\tlayoutKind = layoutKindRef [0];", "+\t\t\t\t}", "+\t\t\t\tif (layoutKind == OS.kKLuchrKind) {", "+\t\t\t\t\tint [] layoutPtr = new int [1];", "+\t\t\t\t\tOS.KLGetKeyboardLayoutProperty (layoutRef[0], OS.kKLuchrData, layoutPtr);", "+\t\t\t\t\tint maxStringLength = 256;", "+\t\t\t\t\tchar [] output = new char [maxStringLength];", "+\t\t\t\t\tint [] actualStringLength = new int [1];", "+\t\t\t\t\tOS.UCKeyTranslate (layoutPtr[0], (short)keyCode[0], (short)OS.kUCKeyActionDown, 0, OS.LMGetKbdType (), 0, display.kchrState, maxStringLength, actualStringLength, output);", "+\t\t\t\t\tif (actualStringLength[0] < 1) {", "+\t\t\t\t\t\t// part of a multi-key key", "+\t\t\t\t\t\tevent.keyCode = 0;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tevent.keyCode = output[0];", "-\t\t\t\t\tint [] encodingInfo = new int [1];", "-\t\t\t\t\tOS.CreateTextToUnicodeInfoByEncoding (encoding [0], encodingInfo);", "-\t\t\t\t\tif (encodingInfo [0] != 0) {", "-\t\t\t\t\t\tchar [] chars = new char [1];", "-\t\t\t\t\t\tint [] nchars = new int [1];", "-\t\t\t\t\t\tbyte [] buffer = new byte [2];", "-\t\t\t\t\t\tbuffer [0] = 1;", "-\t\t\t\t\t\tbuffer [1] = (byte) (result & 0xFF);", "-\t\t\t\t\t\tOS.ConvertFromPStringToUnicode (encodingInfo [0], buffer, chars.length * 2, nchars, chars);", "-\t\t\t\t\t\tOS.DisposeTextToUnicodeInfo (encodingInfo);", "-\t\t\t\t\t\tevent.keyCode = chars [0];", "+\t\t\t\t} else {", "+\t\t\t\t\tint result = OS.KeyTranslate (display.kchrPtr, (short)keyCode [0], display.kchrState);", "+\t\t\t\t\tif (result <= 0x7f) {", "+\t\t\t\t\t\tevent.keyCode = result & 0x7f;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint [] encoding = new int [1];", "+\t\t\t\t\t\tshort keyScript = (short) OS.GetScriptManagerVariable ((short) OS.smKeyScript);", "+\t\t\t\t\t\tshort regionCode = (short) OS.GetScriptManagerVariable ((short) OS.smRegionCode);", "+\t\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, regionCode, null, encoding) == OS.paramErr) {", "+\t\t\t\t\t\t\tif (OS.UpgradeScriptInfoToTextEncoding (keyScript, (short) OS.kTextLanguageDontCare, (short) OS.kTextRegionDontCare, null, encoding) == OS.paramErr) {", "+\t\t\t\t\t\t\t\tencoding [0] = OS.kTextEncodingMacRoman;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint [] encodingInfo = new int [1];", "+\t\t\t\t\t\tOS.CreateTextToUnicodeInfoByEncoding (encoding [0], encodingInfo);", "+\t\t\t\t\t\tif (encodingInfo [0] != 0) {", "+\t\t\t\t\t\t\tchar [] chars = new char [1];", "+\t\t\t\t\t\t\tint [] nchars = new int [1];", "+\t\t\t\t\t\t\tbyte [] buffer = new byte [2];", "+\t\t\t\t\t\t\tbuffer [0] = 1;", "+\t\t\t\t\t\t\tbuffer [1] = (byte) (result & 0xFF);", "+\t\t\t\t\t\t\tOS.ConvertFromPStringToUnicode (encodingInfo [0], buffer, chars.length * 2, nchars, chars);", "+\t\t\t\t\t\t\tOS.DisposeTextToUnicodeInfo (encodingInfo);", "+\t\t\t\t\t\t\tevent.keyCode = chars [0];", "+\t\t\t\t\t\t}"]}], "num": 31860}
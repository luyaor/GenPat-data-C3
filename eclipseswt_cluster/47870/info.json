{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d19d48bdd266280ec244925527866dbd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e393620a67980bf1905156d9d18e98b9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "c7a37ce473beb9045c99b97900ef561257b98af2", "commitAfterChange": "1a876750782f037ea9cd2cbd6b3dfc67d39d1b46", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "  \tstatic int atkTable_get_column_extent_at (int atkObject, int row, int column)", "signatureAfterChange": "  \tstatic int atkTable_get_column_extent_at (int atkObject, int row, int column)", "diff": ["-\t\t\tAccessibleTableEvent event = new AccessibleTableEvent(accessible);", "-\t\t\tevent.row = (int)/*64*/row;", "-\t\t\tevent.column = (int)/*64*/column;", "-\t\t\tfor (int i = 0, length = listeners.size(); i < length; i++) {", "-\t\t\t\tAccessibleTableListener listener = (AccessibleTableListener) listeners.elementAt(i);", "-\t\t\t\tlistener.getCell(event);", "-\t\t\t}", "-\t\t\tAccessible result = event.accessible;", "-\t\t\tif (result != null) {", "-\t\t\t\tlisteners = result.accessibleTableCellListeners;", "-\t\t\t\tAccessibleTableCellEvent cellEvent = new AccessibleTableCellEvent(result);", "-\t\t\t\tcellEvent.count = (int)/*64*/parentResult;", "-\t\t\t\tfor (int i = 0, length = listeners.size(); i < length; i++) {", "-\t\t\t\t\tAccessibleTableCellListener listener = (AccessibleTableCellListener) listeners.elementAt(i);", "-\t\t\t\t\tlistener.getColumnSpan(cellEvent);", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleTableEvent event = new AccessibleTableEvent(accessible);", "+\t\t\t\tevent.row = (int)/*64*/row;", "+\t\t\t\tevent.column = (int)/*64*/column;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleTableListener listener = (AccessibleTableListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getCell(event);", "-\t\t\t\treturn cellEvent.count;", "+\t\t\t\tAccessible result = event.accessible;", "+\t\t\t\tif (result != null) {", "+\t\t\t\t\tlisteners = result.accessibleTableCellListeners;", "+\t\t\t\t\tlength = listeners.size();", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\tAccessibleTableCellEvent cellEvent = new AccessibleTableCellEvent(result);", "+\t\t\t\t\t\tcellEvent.count = (int)/*64*/parentResult;", "+\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\tAccessibleTableCellListener listener = (AccessibleTableCellListener) listeners.elementAt(i);", "+\t\t\t\t\t\t\tlistener.getColumnSpan(cellEvent);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn cellEvent.count;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ccdbda421a34828131da1f577338a426", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "c7a37ce473beb9045c99b97900ef561257b98af2", "commitAfterChange": "1a876750782f037ea9cd2cbd6b3dfc67d39d1b46", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "  \tstatic int atkTable_is_selected (int atkObject, int row, int column)", "signatureAfterChange": "  \tstatic int atkTable_is_selected (int atkObject, int row, int column)", "diff": ["-\t\t\tAccessibleTableEvent event = new AccessibleTableEvent(accessible);", "-\t\t\tevent.row = (int)/*64*/row;", "-\t\t\tevent.column = (int)/*64*/column;", "-\t\t\tfor (int i = 0, length = listeners.size(); i < length; i++) {", "-\t\t\t\tAccessibleTableListener listener = (AccessibleTableListener) listeners.elementAt(i);", "-\t\t\t\tlistener.getCell(event);", "-\t\t\t}", "-\t\t\tAccessible result = event.accessible;", "-\t\t\tif (result != null) {", "-\t\t\t\tlisteners = result.accessibleTableCellListeners;", "-\t\t\t\tAccessibleTableCellEvent cellEvent = new AccessibleTableCellEvent(result);", "-\t\t\t\tcellEvent.isSelected = parentResult != 0;", "-\t\t\t\tfor (int i = 0, length = listeners.size(); i < length; i++) {", "-\t\t\t\t\tAccessibleTableCellListener listener = (AccessibleTableCellListener) listeners.elementAt(i);", "-\t\t\t\t\tlistener.isSelected(cellEvent);", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleTableEvent event = new AccessibleTableEvent(accessible);", "+\t\t\t\tevent.row = (int)/*64*/row;", "+\t\t\t\tevent.column = (int)/*64*/column;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleTableListener listener = (AccessibleTableListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getCell(event);", "-\t\t\t\treturn cellEvent.isSelected ? 1 : 0;", "+\t\t\t\tAccessible result = event.accessible;", "+\t\t\t\tif (result != null) {", "+\t\t\t\t\tlisteners = result.accessibleTableCellListeners;", "+\t\t\t\t\tlength = listeners.size();", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\tAccessibleTableCellEvent cellEvent = new AccessibleTableCellEvent(result);", "+\t\t\t\t\t\tcellEvent.isSelected = parentResult != 0;", "+\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\tAccessibleTableCellListener listener = (AccessibleTableCellListener) listeners.elementAt(i);", "+\t\t\t\t\t\t\tlistener.isSelected(cellEvent);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn cellEvent.isSelected ? 1 : 0;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 47870}
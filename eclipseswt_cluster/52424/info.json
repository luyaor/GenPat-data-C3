{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "918f9b5edf9325ede0ed52b93cd5dfa8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0418d4abade9a689d97a0358c848180d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "4edc576de20a88abac088ae701d29ce3e54ede4f", "commitAfterChange": "c2ec875b36ecf39df432358c14d183b7d7f45fe0", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public boolean execute (String fileName)", "signatureAfterChange": " public boolean execute (String fileName)", "diff": ["-\tif (OS.VERSION < 0x1040) return launch(fileName);", "-\tint rc = -1;", "-\tint fsRefPtr = OS.NewPtr(fsRef.length);", "-\tif (fsRefPtr != 0) {", "-\t\tOS.memmove(fsRefPtr, fsRef, fsRef.length);", "-\t\tLSApplicationParameters params = new LSApplicationParameters();", "-\t\tparams.version = 0;", "-\t\tparams.flags = 0;", "-\t\tparams.application = fsRefPtr;", "-\t\tif (fileName.length() == 0) {", "-\t\t\trc = OS.LSOpenApplication(params, null);", "-\t\t} else {", "-\t\t\tif (fileName.indexOf(':') == -1) fileName = \"file://\" + fileName;", "-\t\t\tchar[] chars = new char[fileName.length()];", "-\t\t\tfileName.getChars(0, chars.length, chars, 0);", "-\t\t\tint str = OS.CFStringCreateWithCharacters(0, chars, chars.length);", "-\t\t\tif (str != 0) {", "-\t\t\t\tint unscapedStr = OS.CFStringCreateWithCharacters(0, new char[]{'%'}, 1);", "-\t\t\t\tint escapedStr = OS.CFURLCreateStringByAddingPercentEscapes(OS.kCFAllocatorDefault, str, unscapedStr, 0, OS.kCFStringEncodingUTF8);", "-\t\t\t\tif (escapedStr != 0) {", "-\t\t\t\t\tint urls = OS.CFArrayCreateMutable(OS.kCFAllocatorDefault, 1, 0);", "-\t\t\t\t\tif (urls != 0) {", "-\t\t\t\t\t\tint url = OS.CFURLCreateWithString(OS.kCFAllocatorDefault, escapedStr, 0);", "-\t\t\t\t\t\tif (url != 0) {", "-\t\t\t\t\t\t\tOS.CFArrayAppendValue(urls, url);", "-\t\t\t\t\t\t\trc = OS.LSOpenURLsWithRole(urls, OS.kLSRolesAll, 0, params, null, 0);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tOS.CFRelease(urls);", "-\t\t\t\t\t}", "-\t\t\t\t\tOS.CFRelease(escapedStr);", "-\t\t\t\t}", "-\t\t\t\tif (unscapedStr != 0) OS.CFRelease(unscapedStr);", "-\t\t\t\tOS.CFRelease(str);", "-\t\t\t}", "-\t\t}", "-\t\tOS.DisposePtr(fsRefPtr);", "-\t}", "-\treturn rc == OS.noErr;", "+//\tif (OS.VERSION < 0x1040) return launch(fileName);", "+//\tint rc = -1;", "+//\tint fsRefPtr = OS.NewPtr(fsRef.length);", "+//\tif (fsRefPtr != 0) {", "+//\t\tOS.memmove(fsRefPtr, fsRef, fsRef.length);", "+//\t\tLSApplicationParameters params = new LSApplicationParameters();", "+//\t\tparams.version = 0;", "+//\t\tparams.flags = 0;", "+//\t\tparams.application = fsRefPtr;", "+//\t\tif (fileName.length() == 0) {", "+//\t\t\trc = OS.LSOpenApplication(params, null);", "+//\t\t} else {", "+//\t\t\tif (fileName.indexOf(':') == -1) fileName = \"file://\" + fileName;", "+//\t\t\tchar[] chars = new char[fileName.length()];", "+//\t\t\tfileName.getChars(0, chars.length, chars, 0);", "+//\t\t\tint str = OS.CFStringCreateWithCharacters(0, chars, chars.length);", "+//\t\t\tif (str != 0) {", "+//\t\t\t\tint unscapedStr = OS.CFStringCreateWithCharacters(0, new char[]{'%'}, 1);", "+//\t\t\t\tint escapedStr = OS.CFURLCreateStringByAddingPercentEscapes(OS.kCFAllocatorDefault, str, unscapedStr, 0, OS.kCFStringEncodingUTF8);", "+//\t\t\t\tif (escapedStr != 0) {", "+//\t\t\t\t\tint urls = OS.CFArrayCreateMutable(OS.kCFAllocatorDefault, 1, 0);", "+//\t\t\t\t\tif (urls != 0) {", "+//\t\t\t\t\t\tint url = OS.CFURLCreateWithString(OS.kCFAllocatorDefault, escapedStr, 0);", "+//\t\t\t\t\t\tif (url != 0) {", "+//\t\t\t\t\t\t\tOS.CFArrayAppendValue(urls, url);", "+//\t\t\t\t\t\t\trc = OS.LSOpenURLsWithRole(urls, OS.kLSRolesAll, 0, params, null, 0);", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t\tOS.CFRelease(urls);", "+//\t\t\t\t\t}", "+//\t\t\t\t\tOS.CFRelease(escapedStr);", "+//\t\t\t\t}", "+//\t\t\t\tif (unscapedStr != 0) OS.CFRelease(unscapedStr);", "+//\t\t\t\tOS.CFRelease(str);", "+//\t\t\t}", "+//\t\t}", "+//\t\tOS.DisposePtr(fsRefPtr);", "+//\t}", "+//\treturn rc == OS.noErr;", "+\treturn false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d0f4e4c965de6cb5aebc7c32f61e628", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ddffafae4e896b2e9ec78e332a5997a3daf99c21", "commitAfterChange": "627bed0d1b682a0f533dde99c53beac29b1f066b", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "  LRESULT WM_ERASEBKGND (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_ERASEBKGND (int wParam, int lParam)", "diff": ["-\tif (!OS.IsWindowEnabled (handle)) return result;", "-\t* Feature in Windows.  When WM_ERASEBKGND is called,", "-\t* it clears the damaged area by filling it with the", "-\t* background color.  During WM_PAINT, when the table", "-\t* items are drawn, the background for each item is", "-\t* also drawn, causing flashing.  The fix is to adjust", "-\t* the damage by subtracting the bounds of each visible", "-\t* table item.", "+\t* This code is intentionally commented.  When a table contains", "+\t* images that are not in the first column, the work around causes", "+\t* pixel corruption.", "-\tint itemCount = getItemCount ();", "-\tif (itemCount == 0) return result;", "-\tGCData data = new GCData();", "-\tdata.device = display;", "-\tGC gc = GC.win32_new (wParam, data);", "-\tRegion region = new Region (display);", "-\tgc.getClipping (region);", "-\tint columnCount = Math.max (1, getColumnCount ());", "-\tRectangle clientArea = getClientArea ();", "-\tint i = getTopIndex ();", "-\tint bottomIndex = i + OS.SendMessage (handle, OS.LVM_GETCOUNTPERPAGE, 0, 0);", "-\tbottomIndex = Math.min (itemCount, bottomIndex);", "-\twhile (i < bottomIndex) {", "-\t\tint j = 0;", "-\t\twhile (j < columnCount) {", "-\t\t\tif (j != 0 || (!isSelected (i) && i != getFocusIndex ())) {", "-\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\trect.top = j;", "-\t\t\t\trect.left = OS.LVIR_LABEL;", "-\t\t\t\tOS.SendMessage (handle, OS. LVM_GETSUBITEMRECT, i, rect);", "-\t\t\t\tint width = Math.max (0, rect.right - rect.left);", "-\t\t\t\tint height = Math.max (0, rect.bottom - rect.top);", "-\t\t\t\tRectangle rect2 = new Rectangle (rect.left, rect.top, width, height);", "-\t\t\t\tif (!rect2.intersects (clientArea)) break;", "-\t\t\t\tregion.subtract (rect2);", "-\t\t\t}", "-\t\t\tj++;", "-\t\t}", "-\t\ti++;", "-\t}", "-\tgc.setClipping (region);", "-\tdrawBackground (wParam);", "-\tgc.setClipping ((Region) null);", "-\tregion.dispose ();", "-\tgc.dispose ();", "-\treturn LRESULT.ONE;", "+//\tif (!OS.IsWindowEnabled (handle)) return result;", "+//\t/*", "+//\t* Feature in Windows.  When WM_ERASEBKGND is called,", "+//\t* it clears the damaged area by filling it with the", "+//\t* background color.  During WM_PAINT, when the table", "+//\t* items are drawn, the background for each item is", "+//\t* also drawn, causing flashing.  The fix is to adjust", "+//\t* the damage by subtracting the bounds of each visible", "+//\t* table item.", "+//\t*/", "+//\tint itemCount = getItemCount ();", "+//\tif (itemCount == 0) return result;", "+//\tGCData data = new GCData();", "+//\tdata.device = display;", "+//\tGC gc = GC.win32_new (wParam, data);", "+//\tRegion region = new Region (display);", "+//\tgc.getClipping (region);", "+//\tint columnCount = Math.max (1, getColumnCount ());", "+//\tRectangle clientArea = getClientArea ();", "+//\tint i = getTopIndex ();", "+//\tint bottomIndex = i + OS.SendMessage (handle, OS.LVM_GETCOUNTPERPAGE, 0, 0);", "+//\tbottomIndex = Math.min (itemCount, bottomIndex);", "+//\twhile (i < bottomIndex) {", "+//\t\tint j = 0;", "+//\t\twhile (j < columnCount) {", "+//\t\t\tif (j != 0 || (!isSelected (i) && i != getFocusIndex ())) {", "+//\t\t\t\tRECT rect = new RECT ();", "+//\t\t\t\trect.top = j;", "+//\t\t\t\trect.left = OS.LVIR_LABEL;", "+//\t\t\t\tOS.SendMessage (handle, OS. LVM_GETSUBITEMRECT, i, rect);", "+//\t\t\t\tint width = Math.max (0, rect.right - rect.left);", "+//\t\t\t\tint height = Math.max (0, rect.bottom - rect.top);", "+//\t\t\t\tRectangle rect2 = new Rectangle (rect.left, rect.top, width, height);", "+//\t\t\t\tif (!rect2.intersects (clientArea)) break;", "+//\t\t\t\tregion.subtract (rect2);", "+//\t\t\t}", "+//\t\t\tj++;", "+//\t\t}", "+//\t\ti++;", "+//\t}", "+//\tgc.setClipping (region);", "+//\tdrawBackground (wParam);", "+//\tgc.setClipping ((Region) null);", "+//\tregion.dispose ();", "+//\tgc.dispose ();", "+//\treturn LRESULT.ONE;", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24faceb76da7549e1505fe75a111f1d6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "b2d1b28bdafb73ead9193c538dfcd04f6eaa6ede", "commitAfterChange": "c73348786abf15e490fc20d69d35d41b71bf2fe0", "methodNumberBeforeChange": 205, "methodNumberAfterChange": 205, "signatureBeforeChange": "\r void handlePaint(Event event)", "signatureAfterChange": "\r void handlePaint(Event event)", "diff": ["-\tint paintY = topMargin;\r", "+\tRectangle clientArea = getClientArea();\r", "+\t\r", "+\t// Check if there is work to do. clientArea.width should never be 0\r", "+\t// if we receive a paint event but we never want to try and create \r", "+\t// an Image with 0 width.\r", "+\tif (clientArea.width == 0 || event.height == 0) {\t\t\r", "+\t\treturn;\r", "+\t}\r", "+\tperformPaint(event.gc, startLine, startY, renderHeight);\t\r", "+}\t\r", "-\t// Check if there is work to do. clientArea.width should never be 0\r", "-\t// if we receive a paint event but we never want to try and create \r", "-\t// an Image with 0 width.\r", "-\tif (clientArea.width == 0 || event.height == 0) {\t\t\r", "-\tfont = event.gc.getFont();\r", "-\tlineBuffer = new Image(getDisplay(), clientArea.width, renderHeight);\r", "-\tlineGC = new GC(lineBuffer);\t\r", "-\tlineGC.setFont(font);\r", "-\tlineGC.setForeground(foreground);\r", "-\tlineGC.setBackground(background);\r", "-\tfor (int i = startLine; paintY < renderHeight && i < lineCount; i++, paintY += lineHeight) {\r", "-\t\tString line = content.getLine(i);\r", "-\t\trenderer.drawLine(line, i, paintY, lineGC, background, foreground, fontData, true);\r", "-\t}\r", "-\tif (paintY < renderHeight) {\r", "-\t\tlineGC.setForeground(background);\r", "-\t\tlineGC.fillRectangle(0, paintY, clientArea.width, renderHeight - paintY);\r", "-\tevent.gc.drawImage(lineBuffer, 0, startY);\r", "-\tlineGC.dispose();\r", "-\tlineBuffer.dispose();\r", "-\tevent.gc.setBackground(background);\r", "-\tevent.gc.fillRectangle(0, 0, clientArea.width, topMargin);\r", "-\tevent.gc.fillRectangle(0, 0, leftMargin, renderHeight);\t\r", "-\tevent.gc.fillRectangle(\r", "-\tevent.gc.fillRectangle(\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c67aa62bef0e52abe3563baf079f8a24", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "082681b66332177ea03672e4a3002a6e9aca5dfb", "commitAfterChange": "d29e369d5010d75bbca2f5d0e5a06752fb22a13d", "methodNumberBeforeChange": 198, "methodNumberAfterChange": 199, "signatureBeforeChange": "  int OnStartURIOpen (long aURI, long retval)", "signatureAfterChange": "  int OnStartURIOpen (long aURI, long retval)", "diff": ["-\tisViewingErrorPage = value.indexOf (\"netError.xhtml\") != -1; //$NON-NLS-1$", "-", "-\tboolean doit = true;", "-\tif (request == 0) {", "-\t\t/* ", "-\t\t * listeners should not be notified of internal transitions like \"javascript:...\"", "-\t\t * because this is an implementation side-effect, not a true navigate", "-\t\t */", "-\t\tif (!value.startsWith (PREFIX_JAVASCRIPT)) {", "-\t\t\tif (locationListeners.length > 0) {", "-\t\t\t\tLocationEvent event = new LocationEvent (browser);", "-\t\t\t\tevent.display = browser.getDisplay();", "-\t\t\t\tevent.widget = browser;", "-\t\t\t\tevent.location = value;", "-\t\t\t\t/*", "-\t\t\t\t * If the URI indicates that the page is being rendered from memory", "-\t\t\t\t * (via setText()) then set it to about:blank to be consistent with IE.", "-\t\t\t\t */", "-\t\t\t\tif (event.location.equals (URI_FILEROOT)) {", "-\t\t\t\t\tevent.location = ABOUT_BLANK;", "-\t\t\t\t} else {", "-\t\t\t\t\tlength = URI_FILEROOT.length ();", "-\t\t\t\t\tif (event.location.startsWith (URI_FILEROOT) && event.location.charAt (length) == '#') {", "-\t\t\t\t\t\tevent.location = ABOUT_BLANK + event.location.substring (length);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tevent.doit = doit;", "-\t\t\t\tfor (int i = 0; i < locationListeners.length; i++) {", "-\t\t\t\t\tlocationListeners[i].changing (event);", "-\t\t\t\t}", "-\t\t\t\tdoit = event.doit && !browser.isDisposed();", "-\t\t\t}", "-", "-\t\t\tif (doit) {", "-\t\t\t\tif (jsEnabled != jsEnabledOnNextPage) {", "-\t\t\t\t\tjsEnabled = jsEnabledOnNextPage;", "-\t\t\t\t\tlong /*int*/[] result = new long /*int*/[1];", "-\t\t\t\t\tint rc = webBrowser.QueryInterface (nsIWebBrowserSetup.NS_IWEBBROWSERSETUP_IID, result);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t", "-\t\t\t\t\tnsIWebBrowserSetup setup = new nsIWebBrowserSetup (result[0]);", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\trc = setup.SetProperty (nsIWebBrowserSetup.SETUP_ALLOW_JAVASCRIPT, jsEnabled ? 1 : 0);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tsetup.Release ();", "-\t\t\t\t}", "-\t\t\t\tif (!isViewingErrorPage) lastNavigateURL = value;", "-\t\t\t}", "-\t\t}", "-\t}", "+\tboolean doit = sendChangingEvent (value);"]}], "num": 52424}
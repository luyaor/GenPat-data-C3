{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d940a554e5e83f5be030f8622077fc71", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1963ca4482822a9c7f94558ee572a0ca", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "5303764efd8ba35e172b6219df5fadc1a0d392a8", "commitAfterChange": "f94123ee4e132f6e7e84978d91811f502d0830cb", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  void bringToTop (boolean force)", "signatureAfterChange": "  void bringToTop (boolean force)", "diff": ["+\t/*", "+\t* Bug in GTK.  When a shell that is not managed by the window", "+\t* manage is given focus, GTK gets stuck in \"focus follows pointer\"", "+\t* mode when the pointer is within the shell and its parent when", "+\t* the shell is hidden or disposed. The fix is to use XSetInputFocus()", "+\t* to assign focus when ever the active shell has not managed by", "+\t* the window manager.", "+\t* ", "+\t* NOTE: This bug is fixed in GTK+ 2.6.8 and above.", "+\t*/", "+\tboolean xFocus = false;", "+\t\tif (OS.GTK_VERSION < OS.VERSION (2, 6, 8)) {", "+\t\t\txFocus = (activeShell.style & SWT.ON_TOP) != 0;", "+\t\t}", "-\tif ((style & SWT.ON_TOP) != 0 && OS.GDK_WINDOWING_X11 ()) {", "+\tif ((xFocus || (style & SWT.ON_TOP) != 0) && OS.GDK_WINDOWING_X11 ()) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c387fcdb616736c82f2d01393da32d5b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/ClipboardProxy.java", "commitBeforeChange": "2a6e0c9b702b0b502452265cc844e28c66b4245c", "commitAfterChange": "9500727710c9626dc536a0475cdc8a8842b13b33", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " long getFunc(long clipboard, long selection_data, long info, long user_data_or_owner)", "signatureAfterChange": " long getFunc(long clipboard, long selection_data, long info, long user_data_or_owner)", "diff": ["-\tGtkSelectionData selectionData = new GtkSelectionData();", "-\tOS.memmove(selectionData, selection_data, GtkSelectionData.sizeof);", "+\tlong /*int*/ target;", "+\tif (OS.GTK_VERSION >= OS.VERSION(2, 14, 0)) {", "+\t\ttarget = OS.gtk_selection_data_get_target(selection_data);", "+\t} else {", "+\t\tGtkSelectionData selectionData = new GtkSelectionData();", "+\t\tOS.memmove(selectionData, selection_data, GtkSelectionData.sizeof);", "+\t\ttarget = selectionData.target;", "+\t}", "-\ttdata.type = selectionData.target;", "+\ttdata.type = target;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bc51d97e425a832b1ea9ad2c7db4da6f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/TabFolder.java", "commitBeforeChange": "6f63c24e373499ea53f00a7791184f797694d4b8", "commitAfterChange": "fbf00428264d3d3bf003889ad4adc2af01116755", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public int getSelectionIndex ()", "signatureAfterChange": " public int getSelectionIndex ()", "diff": ["-\tint [] args = {OS.Pt_ARG_PG_CURRENT_INDEX, 0, 0};\r", "-\tOS.PtGetResources (handle, args.length / 3, args);\r", "-\treturn args [1] == OS.Pt_PG_INVALID ? -1 : args [1];\r", "+\tint index;\r", "+\tif (currentIndex != OS.Pt_PG_INVALID && !OS.PtWidgetIsRealized (handle)) {\r", "+\t\tindex = currentIndex;\r", "+\t} else {\r", "+\t\tint [] args = {OS.Pt_ARG_PG_CURRENT_INDEX, 0, 0};\r", "+\t\tOS.PtGetResources (handle, args.length / 3, args);\r", "+\t\tindex = args [1];\r", "+\t}\r", "+\treturn index == OS.Pt_PG_INVALID ? -1 : index;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae770e1a666c169aced386cbe341f799", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ColorDialog.java", "commitBeforeChange": "2b1f2830b8d411e84c9809819724a5df17bd0813", "commitAfterChange": "d7f3b7dff8d1b17258ff5e14145012df39142cc5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public RGB open ()", "signatureAfterChange": " public RGB open ()", "diff": ["-\tGtkColorSelectionDialog dialog = new GtkColorSelectionDialog ();", "-\tOS.memmove (dialog, handle);", "+\tlong /*int*/ colorsel;", "+\tif (OS.GTK_VERSION >= OS.VERSION(2, 14, 0)) {", "+\t\tcolorsel = OS.gtk_color_selection_dialog_get_color_selection(handle);", "+\t} else{", "+\t\tGtkColorSelectionDialog dialog = new GtkColorSelectionDialog ();", "+\t\tOS.memmove (dialog, handle);", "+\t\tcolorsel = dialog.colorsel;", "+\t}", "+\t", "-\t\tOS.gtk_color_selection_set_current_color (dialog.colorsel, color);", "+\t\tOS.gtk_color_selection_set_current_color (colorsel, color);", "-\tOS.gtk_color_selection_set_has_palette (dialog.colorsel, true);", "+\tOS.gtk_color_selection_set_has_palette (colorsel, true);", "-\t\tOS.gtk_color_selection_get_current_color (dialog.colorsel, color);", "+\t\tOS.gtk_color_selection_get_current_color (colorsel, color);"]}], "num": 60374}
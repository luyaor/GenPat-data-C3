{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "954b3aa801be4e09414d9cd2a711e406", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c63468935ccff218ad4a8850428316b4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "09f6d18cc5e2837c50c709dcd8bf3f7347cf409a", "commitAfterChange": "baf3ed865f39b991591bba6f2bf2a1931cf6633c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public FontData[] getFontList (String faceName, boolean scalable)", "signatureAfterChange": " public FontData[] getFontList (String faceName, boolean scalable)", "diff": ["-public FontData[] getFontList (String faceName, boolean scalable) {\t", "+public FontData[] getFontList (String faceName, boolean scalable) {", "-\t//NOT DONE - scalable", "-\tint nFds = 0;", "-\tFontData[] fds = new FontData[4];", "-", "-\tint[] font = new int[1];", "-\tshort[] fontFamily = new short[1];", "+\tif (!scalable) return new FontData[0];", "-\tshort[] size = new short[1];", "-\tbyte[] buffer = new byte[256];", "-\tint familyIter = OS.NewPtr(16 * 4);", "-\tint fontIter = OS.NewPtr(16 * 4);", "-\tOS.FMCreateFontFamilyIterator(0, 0, 0, familyIter);", "-\twhile (OS.FMGetNextFontFamily(familyIter, fontFamily) != OS.kFMIterationCompleted) {", "-\t\tOS.FMGetFontFamilyName(fontFamily[0], buffer);", "-\t\tint length = buffer[0] & 0xFF;", "-\t\tchar[] chars = new char[length];", "-\t\tfor (int i=0; i<length; i++) {", "-\t\t\tchars[i]= (char)buffer[i+1];", "-\t\t}", "-\t\tString name = new String(chars);", "+\tshort[] family = new short[1];", "+\tint[] fontCount = new int[1];", "+\tint[] actualLength = new int[1];", "+\tOS.ATSUGetFontIDs(null, 0, fontCount);", "+\tint[] fontIDs = new int[fontCount[0]];", "+\tOS.ATSUGetFontIDs(fontIDs, fontIDs.length, fontCount);", "+\tFontData[] fds = new FontData[fontCount[0]];", "+\tfor (int i=0; i<fds.length; i++) {", "+\t\tint fontID = fontIDs[i];", "+\t\tOS.ATSUFindFontName(fontID, OS.kFontFamilyName, OS.kFontNoPlatformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, 0, null, actualLength, null);", "+\t\tbyte[] buffer = new byte[actualLength[0]];", "+\t\tOS.ATSUFindFontName(fontID, OS.kFontFamilyName, OS.kFontNoPlatformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, buffer.length, buffer, actualLength, null);", "+\t\tString name = new String(buffer);", "-\t\t\tOS.FMCreateFontFamilyInstanceIterator(fontFamily[0], fontIter);", "-\t\t\twhile (OS.FMGetNextFontFamilyInstance(fontIter, font, style, size) != OS.kFMIterationCompleted) {", "-\t\t\t\tint s = SWT.NORMAL;", "-\t\t\t\tif ((style[0] & OS.italic) != 0) s |= SWT.ITALIC;", "-\t\t\t\tif ((style[0] & OS.bold) != 0) s |= SWT.BOLD;", "-\t\t\t\tFontData data = new FontData(name, s, size[0]);", "-\t\t\t\tif (nFds == fds.length) {", "-\t\t\t\t\tFontData[] newFds = new FontData[fds.length + 4];", "-\t\t\t\t\tSystem.arraycopy(fds, 0, newFds, 0, nFds);", "-\t\t\t\t\tfds = newFds;", "-\t\t\t\t}", "-\t\t\t\tfds[nFds++] = data;", "-\t\t\t}", "-\t\t\tOS.FMDisposeFontFamilyInstanceIterator(fontIter);", "+\t\t\tOS.FMGetFontFamilyInstanceFromFont(fontID, family, style);", "+\t\t\tint s = SWT.NORMAL;", "+\t\t\tif ((style[0] & OS.italic) != 0) s |= SWT.ITALIC;", "+\t\t\tif ((style[0] & OS.bold) != 0) s |= SWT.BOLD;", "+\t\t\tFontData data = new FontData(name, 0, s);", "+\t\t\tfds[i] = data;", "-\tOS.FMDisposeFontFamilyIterator(familyIter);", "-\tOS.DisposePtr(familyIter);", "-\tOS.DisposePtr(fontIter);", "-\t", "-\tif (nFds == fds.length) return fds;", "-\tFontData[] result = new FontData[nFds];", "-\tSystem.arraycopy(fds, 0, result, 0, nFds);", "-\treturn result;", "+\treturn fds;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51f936deee5731b7df33356fa2b0dc3a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public FontData [] getFontList (String faceName, boolean scalable)", "signatureAfterChange": " public FontData[] getFontList (String faceName, boolean scalable)", "diff": ["-public FontData [] getFontList (String faceName, boolean scalable) {\t", "+public FontData[] getFontList (String faceName, boolean scalable) {\t", "-\t/* AW", "-\tString xlfd;", "-\tif (faceName == null) {", "-\t\txlfd = \"-*-*-*-*-*-*-*-*-*-*-*-*-*-*\";", "-\t} else {", "-\t\tint dashIndex = faceName.indexOf('-');", "-\t\tif (dashIndex < 0) {", "-\t\t\txlfd = \"-*-\" + faceName + \"-*-*-*-*-*-*-*-*-*-*-*-*\";", "-\t\t} else {", "-\t\t\txlfd = \"-\" + faceName + \"-*-*-*-*-*-*-*-*-*-*-*-*\";", "+\t//NOT DONE - scalable", "+\tint nFds = 0;", "+\tFontData[] fds = new FontData[4];", "+", "+\tint[] font = new int[1];", "+\tshort[] fontFamily = new short[1];", "+\tshort[] style = new short[1];", "+\tshort[] size = new short[1];", "+\tbyte[] buffer = new byte[256];", "+\tint familyIter = OS.NewPtr(16 * 4);", "+\tint fontIter = OS.NewPtr(16 * 4);", "+\tOS.FMCreateFontFamilyIterator(0, 0, 0, familyIter);", "+\twhile (OS.FMGetNextFontFamily(familyIter, fontFamily) != OS.kFMIterationCompleted) {", "+\t\tOS.FMGetFontFamilyName(fontFamily[0], buffer);", "+\t\tint length = buffer[0] & 0xFF;", "+\t\tchar[] chars = new char[length];", "+\t\tfor (int i=0; i<length; i++) {", "+\t\t\tchars[i]= (char)buffer[i+1];", "+\t\t}", "+\t\tString name = new String(chars);", "+\t\tif (faceName == null || Compatibility.equalsIgnoreCase(faceName, name)) {", "+\t\t\tOS.FMCreateFontFamilyInstanceIterator(fontFamily[0], fontIter);", "+\t\t\twhile (OS.FMGetNextFontFamilyInstance(fontIter, font, style, size) != OS.kFMIterationCompleted) {", "+\t\t\t\tint s = SWT.NORMAL;", "+\t\t\t\tif ((style[0] & OS.italic) != 0) s |= SWT.ITALIC;", "+\t\t\t\tif ((style[0] & OS.bold) != 0) s |= SWT.BOLD;", "+\t\t\t\tFontData data = new FontData(name, s, size[0]);", "+\t\t\t\tif (nFds == fds.length) {", "+\t\t\t\t\tFontData[] newFds = new FontData[fds.length + 4];", "+\t\t\t\t\tSystem.arraycopy(fds, 0, newFds, 0, nFds);", "+\t\t\t\t\tfds = newFds;", "+\t\t\t\t}", "+\t\t\t\tfds[nFds++] = data;", "+\t\t\t}", "+\t\t\tOS.FMDisposeFontFamilyInstanceIterator(fontIter);", "-\t*/", "-\t/* Use the character encoding for the default locale */", "-\t/* AW", "-\tbyte [] buffer1 = Converter.wcsToMbcs (null, xlfd, true);", "-\tint [] ret = new int [1];", "-\tint listPtr = OS.XListFonts (xDisplay, buffer1, 65535, ret);", "-\tint ptr = listPtr;", "-\tint [] intBuf = new int [1];", "-\tFontData [] fd = new FontData [ret [0]];", "-\tint fdIndex = 0;", "-\tfor (int i = 0; i < ret [0]; i++) {", "-\t\tOS.memmove (intBuf, ptr, 4);", "-\t\tint charPtr = intBuf [0];", "-\t\tint length = OS.strlen (charPtr);", "-\t\tbyte [] buffer2 = new byte [length];", "-\t\tOS.memmove (buffer2, charPtr, length);", "-\t\t// Use the character encoding for the default locale", "-\t\tchar [] chars = Converter.mbcsToWcs (null, buffer2);", "-\t\tFontData data = FontData.motif_new (new String (chars));", "-\t\tboolean isScalable = data.averageWidth == 0 && data.pixels == 0 && data.points == 0;", "-\t\tif (isScalable == scalable) {", "-\t\t\tfd [fdIndex++] = data;", "-\t\t}", "-\t\tptr += 4;", "-\t}", "-\tOS.XFreeFontNames (listPtr);", "-\tif (fdIndex == ret [0]) return fd;", "-\tFontData [] result = new FontData [fdIndex];", "-\tSystem.arraycopy (fd, 0, result, 0, fdIndex);", "+\tOS.FMDisposeFontFamilyIterator(familyIter);", "+\tOS.DisposePtr(familyIter);", "+\tOS.DisposePtr(fontIter);", "+\t", "+\tif (nFds == fds.length) return fds;", "+\tFontData[] result = new FontData[nFds];", "+\tSystem.arraycopy(fds, 0, result, 0, nFds);", "-\t*/", "-\treturn new FontData [0];"]}], "num": 25882}
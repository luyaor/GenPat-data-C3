{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b48cd88db10c0f0ed7a1af0423ae57f4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7bb6f819bab9c3f05a86250ee2b3a68", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "5dd555b333bfe4be20987ae764a2256175dee6d5", "commitAfterChange": "417f8bbebaee175318e96c4131831bf11c482f6f", "methodNumberBeforeChange": 179, "methodNumberAfterChange": 265, "signatureBeforeChange": " int getWordEndNoSpaces(int offset)", "signatureAfterChange": " int sendWordBoundaryEvent(int eventType, int movement, int offset, int newOffset, String lineText, int lineOffset)", "diff": ["- */", "-int getWordEndNoSpaces(int offset) {", "-\tif (offset >= getCharCount()) {", "-\t\treturn offset;", "-\t}", "-\tint line = content.getLineAtOffset(offset);", "-\tint lineOffset = content.getOffsetAtLine(line);", "-\tString lineText = content.getLine(line);", "-\tint lineLength = lineText.length();", "-\tif (offset == lineOffset + lineLength) {", "-\t\tline++;", "-\t\toffset = content.getOffsetAtLine(line);", "-\t} else {", "-\t\toffset -= lineOffset;", "-\t\tchar ch = lineText.charAt(offset);", "-\t\tboolean letterOrDigit = Compatibility.isLetterOrDigit(ch);", "-\t\twhile (offset < lineLength - 1 && Compatibility.isLetterOrDigit(ch) == letterOrDigit && !Compatibility.isSpaceChar(ch)) {", "-\t\t\toffset++;", "-\t\t\tch = lineText.charAt(offset);", "-\t\tif (offset == lineLength - 1 && Compatibility.isLetterOrDigit(ch) == letterOrDigit && !Compatibility.isSpaceChar(ch)) {", "-\t\t\toffset++;", "-\t\t}", "-\t\toffset += lineOffset;", "-\treturn offset;", "+int sendWordBoundaryEvent(int eventType, int movement, int offset, int newOffset, String lineText, int lineOffset) {", "+\tif (isListening(eventType)) {", "+\t\tStyledTextEvent event = new StyledTextEvent(content);", "+\t\tevent.detail = lineOffset;", "+\t\tevent.text = lineText;", "+\t\tevent.count = movement;", "+\t\tevent.start = offset;", "+\t\tevent.end = newOffset;", "+\t\tnotifyListeners(eventType, event);", "+\t\toffset = event.end;", "+\t\tif (offset != newOffset) {", "+\t\t\tint length = getCharCount();", "+\t\t\tif (offset < 0) {", "+\t\t\t\toffset = 0;", "+\t\t\t} else if (offset > length) {", "+\t\t\t\toffset = length;", "+\t\t\t} else {", "+\t\t\t\tif (isLineDelimiter(offset)) {", "+\t\t\t\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn offset;", "+\t}", "+\treturn newOffset;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e980d59c497006ef3ce7913f9d82fadc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "c67a9c15e1d189241e01e956e2e9b242a9fda50d", "commitAfterChange": "dc5446ab4c95d58f2fa8f5395a9138a20c9237ec", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  void drawWidget (int id, NSRect rect)", "signatureAfterChange": "  void drawWidget (int id, NSRect rect)", "diff": ["-\tif (id == view.id && getSelection ()) {", "-\t\tNSRect bounds = view.bounds();", "-\t\tNSGraphicsContext context = NSGraphicsContext.currentContext();", "-\t\tcontext.saveGraphicsState();", "-\t\tNSColor.colorWithDeviceRed(0.1f, 0.1f, 0.1f, 0.1f).setFill();", "-\t\tNSColor.colorWithDeviceRed(0.2f, 0.2f, 0.2f, 0.2f).setStroke();", "-\t\tNSBezierPath.fillRect(bounds);", "-\t\tbounds.x += 0.5f;", "-\t\tbounds.y += 0.5f;", "-\t\tbounds.width -= 1;", "-\t\tbounds.height -= 1;", "-\t\tNSBezierPath.strokeRect(bounds);", "-\t\tcontext.restoreGraphicsState();", "-\t}", "-\tif (arrow != null && id == arrow.id) {", "-\t\tNSRect frame = arrow.frame();", "-\t\tNSGraphicsContext context = NSGraphicsContext.currentContext();", "-\t\tcontext.saveGraphicsState();", "-\t\tNSPoint p1 = new NSPoint();", "-\t\tp1.y = (float)Math.ceil(frame.height / 2 - frame.width / 2);", "-\t\tNSPoint p2 = new NSPoint();", "-\t\tp2.x = frame.width;", "-\t\tp2.y = p1.y;", "-\t\tNSPoint p3 = new NSPoint();", "-\t\tp3.x = frame.width / 2;", "-\t\tp3.y = (float)(p2.y + Math.sqrt(Math.pow(frame.width, 2) - Math.pow(frame.width / 2, 2)));", "-\t\tNSBezierPath path = NSBezierPath.bezierPath();", "-\t\tpath.moveToPoint(p1);", "-\t\tpath.lineToPoint(p2);", "-\t\tpath.lineToPoint(p3);", "-\t\tpath.closePath();", "-\t\tNSColor color = isEnabled() ? NSColor.blackColor() : NSColor.disabledControlTextColor();", "-\t\tcolor.set();", "-\t\tpath.fill();", "-\t\tcontext.restoreGraphicsState();", "+\tif (id == view.id) {", "+\t\tif (getSelection ()) {", "+\t\t\tNSRect bounds = view.bounds();", "+\t\t\tNSGraphicsContext context = NSGraphicsContext.currentContext();", "+\t\t\tcontext.saveGraphicsState();", "+\t\t\tNSColor.colorWithDeviceRed(0.1f, 0.1f, 0.1f, 0.1f).setFill();", "+\t\t\tNSColor.colorWithDeviceRed(0.2f, 0.2f, 0.2f, 0.2f).setStroke();", "+\t\t\tNSBezierPath.fillRect(bounds);", "+\t\t\tbounds.x += 0.5f;", "+\t\t\tbounds.y += 0.5f;", "+\t\t\tbounds.width -= 1;", "+\t\t\tbounds.height -= 1;", "+\t\t\tNSBezierPath.strokeRect(bounds);", "+\t\t\tcontext.restoreGraphicsState();", "+\t\t}", "+\t\tif ((style & SWT.DROP_DOWN) != 0) {", "+\t\t\tNSRect bounds = view.bounds();", "+\t\t\tNSGraphicsContext context = NSGraphicsContext.currentContext();", "+\t\t\tcontext.saveGraphicsState();", "+\t\t\tNSBezierPath path = NSBezierPath.bezierPath();", "+\t\t\tNSPoint pt = new NSPoint();", "+\t\t\tpath.moveToPoint(pt);", "+\t\t\tpt.x += ARROW_WIDTH;", "+\t\t\tpath.lineToPoint(pt);", "+\t\t\tpt.y += ARROW_WIDTH - 1;", "+\t\t\tpt.x -= ARROW_WIDTH / 2f;", "+\t\t\tpath.lineToPoint(pt);", "+\t\t\tpath.closePath();", "+\t\t\tNSAffineTransform transform = NSAffineTransform.transform();", "+\t\t\tSystem.out.println(bounds.height);", "+\t\t\ttransform.translateXBy((int)bounds.width - ARROW_WIDTH - INSET, (int)(bounds.height - ARROW_WIDTH / 2) / 2);", "+\t\t\ttransform.concat();", "+\t\t\tNSColor color = isEnabled() ? NSColor.blackColor() : NSColor.disabledControlTextColor();", "+\t\t\tcolor.set();", "+\t\t\tpath.fill();", "+\t\t\tcontext.restoreGraphicsState();", "+\t\t}"]}], "num": 57590}
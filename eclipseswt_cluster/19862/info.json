{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3991bdbe4cf412e39ccc7ff3a4672235", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d6d0edb19683d7c65355b84c9a25548", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "83b90a54ba3b915ddf5c905bc3c2d9ec47fef8c3", "commitAfterChange": "eb7f42555b902107cac1113c7ee603215303fa2b", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["-\t\tfloat /*double*/ [] fg = gc.data.foreground;", "-\t\tNSColor foreground = NSColor.colorWithDeviceRed(fg[0], fg[1], fg[2], fg[3]);", "+\t\tNSRange range = new NSRange();", "-\t\tNSRange selectionRange = null;", "-\t\tNSColor selectionColor = null;", "-\t\t\tselectionColor = NSColor.colorWithDeviceRed(selectionBackground.handle[0], selectionBackground.handle[1], selectionBackground.handle[2], selectionBackground.handle[3]);", "-\t\t}", "-\t\tif (hasSelection) {", "-\t\t\tselectionRange = new NSRange();", "-\t\t\tselectionRange.location = translateOffset(selectionStart);", "-\t\t\tselectionRange.length = translateOffset(selectionEnd - selectionStart + 1);", "-\t\t\tlayoutManager.addTemporaryAttribute(OS.NSBackgroundColorAttributeName, selectionColor, selectionRange);", "+\t\t\tNSColor selectionColor = NSColor.colorWithDeviceRed(selectionBackground.handle[0], selectionBackground.handle[1], selectionBackground.handle[2], selectionBackground.handle[3]);", "+\t\t\tNSBezierPath path = NSBezierPath.bezierPath();", "+\t\t\tNSRect rect = new NSRect();", "+\t\t\tif (hasSelection) {", "+\t\t\t\tint /*long*/ pRectCount = OS.malloc(C.PTR_SIZEOF);", "+\t\t\t\trange.location = translateOffset(selectionStart);", "+\t\t\t\trange.length = translateOffset(selectionEnd - selectionStart + 1);", "+\t\t\t\tint /*long*/ pArray = layoutManager.rectArrayForCharacterRange(range, range, textContainer, pRectCount);", "+\t\t\t\tint /*long*/ [] rectCount = new int /*long*/ [1];", "+\t\t\t\tOS.memmove(rectCount, pRectCount, C.PTR_SIZEOF);", "+\t\t\t\tOS.free(pRectCount);", "+\t\t\t\tfor (int k = 0; k < rectCount[0]; k++, pArray += NSRect.sizeof) {", "+\t\t\t\t\tOS.memmove(rect, pArray, NSRect.sizeof);", "+\t\t\t\t\trect.x += pt.x;", "+\t\t\t\t\trect.y += pt.y;", "+\t\t\t\t\tpath.appendBezierPathWithRect(rect);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif ((flags & SWT.LAST_LINE_SELECTION) != 0) {", "+\t\t\t\tNSRect bounds = lineBounds[lineBounds.length - 1];", "+\t\t\t\trect.x = pt.x + bounds.x + bounds.width;", "+\t\t\t\trect.y = y + bounds.y;", "+\t\t\t\trect.width = (flags & SWT.FULL_SELECTION) != 0 ? 0x7fffffff : bounds.height / 3;", "+\t\t\t\trect.height = bounds.height;", "+\t\t\t\tpath.appendBezierPathWithRect(rect);", "+\t\t\t}", "+\t\t\tselectionColor.setFill();", "+\t\t\tpath.fill();", "-\t\t\tNSRange range = new NSRange();", "+\t\t\tfloat /*double*/ [] fg = gc.data.foreground;", "+\t\t\tNSColor foreground = NSColor.colorWithDeviceRed(fg[0], fg[1], fg[2], fg[3]);", "-\t\t}", "-\t\tif ((flags & SWT.LAST_LINE_SELECTION) != 0) {", "-\t\t\tNSRect bounds = lineBounds[lineBounds.length - 1];", "-\t\t\tNSRect rect = new NSRect();", "-\t\t\trect.x = pt.x + bounds.x + bounds.width;", "-\t\t\trect.y = y + bounds.y;", "-\t\t\trect.width = (flags & SWT.FULL_SELECTION) != 0 ? 0x7fffffff : bounds.height / 3;", "-\t\t\trect.height = bounds.height;", "-\t\t\tselectionColor.setFill();", "-\t\t\tNSBezierPath path = NSBezierPath.bezierPath();", "-\t\t\tpath.appendBezierPathWithRect(rect);", "-\t\t\tpath.fill();", "-\t\t}", "-\t\tif (selectionRange != null) {", "-\t\t\tlayoutManager.removeTemporaryAttribute(OS.NSBackgroundColorAttributeName, selectionRange);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68be824cde32e96ff599ea4c06dfeca5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "ef782aa1d47f4cc453e1ff5e98420459bde2afbb", "commitAfterChange": "5a273c2ef1049cff7bd4d5ace6d67f7530a2ce69", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " public Rectangle getClipping()", "signatureAfterChange": " public Rectangle getClipping()", "diff": ["-\tNSRect rect = null;", "-\tif (data.view != null) {", "-\t\trect = data.view.visibleRect();", "-\t} else {", "-\t\trect = new NSRect();", "-\t\tif (data.image != null) {", "-\t\t\tNSSize size = data.image.handle.size();", "-\t\t\trect.width = size.width;", "-\t\t\trect.height = size.height;", "-\t\t} else if (data.size != null) {", "-\t\t\trect.width = data.size.width;", "-\t\t\trect.height = data.size.height;", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tNSRect rect = null;", "+\t\tif (data.view != null) {", "+\t\t\trect = data.view.visibleRect();", "+\t\t} else {", "+\t\t\trect = new NSRect();", "+\t\t\tif (data.image != null) {", "+\t\t\t\tNSSize size = data.image.handle.size();", "+\t\t\t\trect.width = size.width;", "+\t\t\t\trect.height = size.height;", "+\t\t\t} else if (data.size != null) {", "+\t\t\t\trect.width = data.size.width;", "+\t\t\t\trect.height = data.size.height;", "+\t\t\t}", "+\t\tif (data.paintRect != null || data.clipPath != null || data.inverseTransform != null) {", "+\t\t\tif (data.paintRect != null) {", "+\t\t\t\tOS.NSIntersectionRect(rect, rect, data.paintRect);", "+\t\t\t}", "+\t\t\tif (data.clipPath != null) {", "+\t\t\t\tNSRect clip = data.clipPath.bounds();", "+\t\t\t\tOS.NSIntersectionRect(rect, rect, clip);", "+\t\t\t}", "+\t\t\tif (data.inverseTransform != null && rect.width > 0 && rect.height > 0) {", "+\t\t\t\tNSPoint pt = new NSPoint();", "+\t\t\t\tpt.x = rect.x;", "+\t\t\t\tpt.y = rect.y;", "+\t\t\t\tNSSize size = new NSSize();", "+\t\t\t\tsize.width = rect.width;", "+\t\t\t\tsize.height = rect.height;", "+\t\t\t\tpt = data.inverseTransform.transformPoint(pt);", "+\t\t\t\tsize =  data.inverseTransform.transformSize(size);", "+\t\t\t\trect.x = pt.x;", "+\t\t\t\trect.y = pt.y;", "+\t\t\t\trect.width = size.width;", "+\t\t\t\trect.height = size.height;", "+\t\t\t}", "+\t\t}", "+\t\treturn new Rectangle((int)rect.x, (int)rect.y, (int)rect.width, (int)rect.height);", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "-\tif (data.paintRect != null || data.clipPath != null || data.inverseTransform != null) {", "-\t\tif (data.paintRect != null) {", "-\t\t\tOS.NSIntersectionRect(rect, rect, data.paintRect);", "-\t\t}", "-\t\tif (data.clipPath != null) {", "-\t\t\tNSRect clip = data.clipPath.bounds();", "-\t\t\tOS.NSIntersectionRect(rect, rect, clip);", "-\t\t}", "-\t\tif (data.inverseTransform != null && rect.width > 0 && rect.height > 0) {", "-\t\t\tNSPoint pt = new NSPoint();", "-\t\t\tpt.x = rect.x;", "-\t\t\tpt.y = rect.y;", "-\t\t\tNSSize size = new NSSize();", "-\t\t\tsize.width = rect.width;", "-\t\t\tsize.height = rect.height;", "-\t\t\tpt = data.inverseTransform.transformPoint(pt);", "-\t\t\tsize =  data.inverseTransform.transformSize(size);", "-\t\t\trect.x = pt.x;", "-\t\t\trect.y = pt.y;", "-\t\t\trect.width = size.width;", "-\t\t\trect.height = size.height;", "-\t\t}", "-\t}", "-\treturn new Rectangle((int)rect.x, (int)rect.y, (int)rect.width, (int)rect.height);"]}], "num": 19862}
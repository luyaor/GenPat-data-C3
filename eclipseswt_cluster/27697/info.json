{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1efafc3e6fdebeae22855901669f1bf0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2384184c3e5d9b94709e91e919fee97a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ScrollBar.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 23, "signatureBeforeChange": " int processWheel(int eRefHandle)", "signatureAfterChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "diff": ["+int kEventMouseDown (int nextHandler, int theEvent, int userData) {", "+\tint status = super.kEventMouseDown (nextHandler, theEvent, userData);", "+\tif (status == OS.noErr) return status;", "+\tdragging = false;", "+\tstatus = OS.CallNextEventHandler (nextHandler, theEvent);", "+\tif (dragging) {", "+\t\tEvent event = new Event ();", "+\t\tsendEvent (SWT.Selection, event);", "+\t}", "+\tdragging = false;", "+\treturn status;", "+}", "-}", "-int processWheel(int eRefHandle) {", "-\tint[] t= new int[1];", "-\tOS.GetEventParameter(eRefHandle, OS.kEventParamMouseWheelDelta, OS.typeSInt32, null, null, t);", "-\tOS.SetControl32BitValue(handle, OS.GetControl32BitValue(handle) - (increment * t[0]));", "-\tEvent event= new Event ();", "-    event.detail= t[0] > 0 ? SWT.ARROW_UP : SWT.ARROW_DOWN;\t", "-\tsendEvent (SWT.Selection, event);", "-\tgetDisplay().update();", "-\treturn OS.kNoErr;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "292ff289cfc007200d4ecdc419141ceb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 58, "signatureBeforeChange": " public void setVisible (boolean visible)", "signatureAfterChange": "  public void setVisible (boolean visible)", "diff": ["+", "-\trealizeWidget ();", "-\t", "-\t/* Show the shell */", "-\t\t", "+\t\tif ((state & HIDDEN) == 0) return;", "+\t\tstate &= ~HIDDEN;", "+\t} else {", "+\t\tif ((state & HIDDEN) != 0) return;", "+\t\tstate |= HIDDEN;", "+\t}", "+\tif (parent != null && !parent.isVisible ()) return;", "+\tsetWindowVisible (visible);", "+}", "-", "-\t\t/* Map the widget */", "-        /* AW", "-\t\tOS.XtSetMappedWhenManaged (shellHandle, true);", "-\t\tif (OS.XtIsTopLevelShell (shellHandle)) {", "-\t\t\tOS.XtMapWidget (shellHandle);", "-\t\t} else {", "-\t\t\tOS.XtPopup (shellHandle, OS.XtGrabNone);", "-        */", "-\t\tOS.ShowWindow(shellHandle);", "-\t\t//OS.SelectWindow(shellHandle);", "-\t\tOS.BringToFront(shellHandle);", "-", "-\t\tprocessResize (null);", "-\t\t", "-\t\t// find focus", "-\t\t//if (savedFocus == null)", "-\t\t//\tsetFocus();", "-", "-\t\t/*", "-\t\t* Force the shell to be fully exposed before returning.", "-\t\t* This ensures that the shell coordinates are correct", "-\t\t* when queried directly after showing the shell.", "-\t\t*/", "-\t\tdo {", "-\t\t\tdisplay.update ();", "-\t\t} while (!isVisible ());", "-", "-\t\t//adjustTrim ();", "-", "-\t\t/* Set the saved focus widget */", "-\t\t/*", "-\t\tif (savedFocus != null && !savedFocus.isDisposed ()) {", "-\t\t\tsavedFocus.setFocus ();", "-\t\t}", "-\t\tsavedFocus = null;", "-\t\t*/", "-\t\t", "-\t\t//sendEvent (SWT.Show);", "-\t\t", "-\t\treturn;", "-\t}", "-\t", "-\tShell[] shells= getShells();", "-\tfor (int i= 0; i < shells.length; i++) {", "-\t\tShell shell= shells[i];", "-\t\tif (shell.isVisible())", "-\t\t\tshell.setVisible(false);", "-\t}", "-\t", "-\t/* Hide the shell */", "-    /* AW", "-\tOS.XtSetMappedWhenManaged (shellHandle, false);", "-\tif (OS.XtIsTopLevelShell (shellHandle)) {", "-\t\tOS.XtUnmapWidget (shellHandle);", "-\t\tOS.XtPopdown (shellHandle);", "-    */", "-    OS.HideWindow(shellHandle);", "-\tsendEvent (SWT.Hide);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d0bd4be9a398b841a3fa79b12a8cabf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "ca611642fc41807588637202b032414f273f2b1e", "commitAfterChange": "7f6898e7f25aa3abfc9d050db6890b8da8096e1f", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 101, "signatureBeforeChange": " private RGB blend(RGB from, RGB to)", "signatureAfterChange": "  void setSelectionHighlightGradientColor(Color start)", "diff": ["+", "+void setSelectionHighlightGradientColor(Color start) {", "+\t//Set to null to match all the early return cases.", "+\t//For early returns, don't realloc the cache, we may get a cache hit next time we're given the highlight", "+\tselectionHighlightGradientBegin = null;", "+", "+\tif(start == null)", "+\t\treturn;", "+", "+\t//don't bother on low colour", "+\tif (getDisplay().getDepth() < 15)", "+\t\treturn;", "+\t", "+\t//don't bother if we don't have a background gradient", "+\tif(selectionGradientColors.length < 2) ", "+\t\treturn;", "+", "+\t//OK we know its a valid gradient now", "+\tselectionHighlightGradientBegin = start;", "+", "+\tif(! isSelectionHighlightColorsCacheHit(start))", "+\t\tcreateSelectionHighlightGradientColors(start);  //if no cache hit then compute new ones", "+}", "- */", "-private RGB blend(RGB from, RGB to){", "-\tint red = (from.red + to.red) / 2;", "-\tint green = (from.green + to.green) / 2;", "-\tint blue = (from.blue + to.blue) / 2;", "-\treturn new RGB(red, green, blue);", "-}"]}], "num": 27697}
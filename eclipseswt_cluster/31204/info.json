{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6f30ef8491ea4c163592cfe1fe73eb5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "15d430dff07887c5b03074db76cf4a2b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 377, "methodNumberAfterChange": 378, "signatureBeforeChange": " \tint get_newText(int pNewText)", "signatureAfterChange": " \tint get_newText(int pNewText)", "diff": ["-\t\t// TODO: Try to implement this without providing API", "-\t\treturn COM.S_FALSE;", "-//\t\tAccessibleTextEvent event = new AccessibleTextEvent(this);", "-//\t\tfor (int i = 0; i < accessibleTextExtendedListeners.size(); i++) {", "-//\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) accessibleTextExtendedListeners.elementAt(i);", "-//\t\t\tlistener.getNewText(event);", "-//\t\t}", "-//\t\t// TODO: create a text segment struct using the data in the event", "-//\t\t//COM.MoveMemory(pNewText, new int [] { event.string }, 4);", "-//\t\treturn COM.S_OK;", "-\t\t// TODO: @retval S_FALSE if there is nothing to return, [out] value is NULL", "+\t\tString text = null;", "+\t\tint start = 0;", "+\t\tint end = 0;", "+\t\tif (textInserted != null) {", "+\t\t\ttext = (String) textInserted[3];", "+\t\t\tstart = ((Integer)textInserted[1]).intValue();", "+\t\t\tend = ((Integer)textInserted[2]).intValue();", "+\t\t}", "+\t\tsetString(pNewText, text);", "+\t\tCOM.MoveMemory(pNewText + OS.PTR_SIZEOF, new int [] {start}, 4);", "+\t\tCOM.MoveMemory(pNewText + OS.PTR_SIZEOF + 4, new int [] {end}, 4);", "+\t\tif (textInserted == null) return COM.S_FALSE;", "+\t\treturn COM.S_OK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6a2b011a14f315c931257ab2c0320d7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 378, "methodNumberAfterChange": 379, "signatureBeforeChange": " \tint get_oldText(int pOldText)", "signatureAfterChange": " \tint get_oldText(int pOldText)", "diff": ["-\t\t// TODO: Try to implement this without providing API", "-\t\treturn COM.S_FALSE;", "-//\t\tAccessibleTextEvent event = new AccessibleTextEvent(this);", "-//\t\tfor (int i = 0; i < accessibleTextExtendedListeners.size(); i++) {", "-//\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) accessibleTextExtendedListeners.elementAt(i);", "-//\t\t\tlistener.getOldText(event);", "-//\t\t}", "-//\t\t// TODO: create a text segment struct using the data in the event", "-//\t\t//COM.MoveMemory(pOldText, new int [] { event.string }, 4);", "-//\t\treturn COM.S_OK;", "-\t\t// TODO: @retval S_FALSE if there is nothing to return, [out] value is NULL", "+\t\tString text = null;", "+\t\tint start = 0;", "+\t\tint end = 0;", "+\t\tif (textDeleted != null) {", "+\t\t\ttext = (String) textDeleted[3];", "+\t\t\tstart = ((Integer)textDeleted[1]).intValue();", "+\t\t\tend = ((Integer)textDeleted[2]).intValue();", "+\t\t}", "+\t\tsetString(pOldText, text);", "+\t\tCOM.MoveMemory(pOldText + OS.PTR_SIZEOF, new int [] {start}, 4);", "+\t\tCOM.MoveMemory(pOldText + OS.PTR_SIZEOF + 4, new int [] {end}, 4);", "+\t\tif (textDeleted == null) return COM.S_FALSE;", "+\t\treturn COM.S_OK;"]}], "num": 31204}
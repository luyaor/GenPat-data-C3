{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3bc2ae21ba3a0a7d2a95a6ee2d105bd0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86649ec4d7c2768973b5d6d94d30209c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "6659b206fba2b7730d90f8d39f17b64a55b3ecfd", "commitAfterChange": "6ac50ee6198c77b26406a8d010d2e50b3e4c4a26", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  static boolean kde_init()", "signatureAfterChange": "  static boolean kde_init()", "diff": ["-\t//TEMPORARY CODE", "-\tif (true) return false;", "-", "+\t/*", "+\t* Feature in KDE. The argv argument passed to KApplication()", "+\t* is kept by KDE and cannot be freed.", "+\t*/", "-\tint /*long*/ [] argv = new int /*long*/ []{ptr, 0};", "-\tKDE.KApplication_new(1, argv, qcString, false, false);", "-\tKDE.free(ptr);", "+\tint /*long*/ argv = KDE.malloc(OS.PTR_SIZEOF * 2);", "+\tOS.memmove(argv, new int /*long*/ []{ptr, 0}, OS.PTR_SIZEOF * 2);", "+\t/*", "+\t* Feature in KDE.  When a KDE application is initialized, it installs", "+\t* its own SIGSEGV,SIGFPE,SIGILL,SIGABRT signal handlers so that it can", "+\t* pop up a dialo box and display an error message should SIGSEGV occur.", "+\t* After the dialogue box is closed, it terminates the program. Some Java VMs", "+\t* happen to catch SIGSEGV signals so that it can throw a null pointer exception.", "+\t* Thus when KDE is initialized, the Java try ... catch mechanism for null pointers", "+\t* does not work.  The fix is to obtain the VM's signal handlers before", "+\t* initializing KDE and to reinstall that handlers after the initialization. The", "+\t* method sigaction() must be used instead of signal() because it returns more", "+\t* information on how to handle the signal.", "+\t*/", "+\tbyte[] sigabrt = new byte[KDE.sigaction_sizeof()];", "+\tKDE.sigaction(KDE.SIGABRT, null, sigabrt);", "+\tbyte[] sigfpe = new byte[KDE.sigaction_sizeof()];", "+\tKDE.sigaction(KDE.SIGFPE, null, sigfpe);", "+\tbyte[] sigill = new byte[KDE.sigaction_sizeof()];", "+\tKDE.sigaction(KDE.SIGILL, null, sigill);", "+\tbyte[] sigsegv = new byte[KDE.sigaction_sizeof()];", "+\tKDE.sigaction(KDE.SIGSEGV, null, sigsegv);", "+\tKDE.KApplication_new(1, argv, qcString, false, true);", "+\tKDE.sigaction(KDE.SIGABRT, sigill, null);", "+\tKDE.sigaction(KDE.SIGFPE, sigill, null);", "+\tKDE.sigaction(KDE.SIGILL, sigill, null);", "+\tKDE.sigaction(KDE.SIGSEGV, sigsegv, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73868bda46a591659530f5fa4facbe9f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "6659b206fba2b7730d90f8d39f17b64a55b3ecfd", "commitAfterChange": "6ac50ee6198c77b26406a8d010d2e50b3e4c4a26", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  static boolean kde_init()", "signatureAfterChange": "  static boolean kde_init()", "diff": ["-\t//TEMPORARY CODE", "-\tif (true) return false;", "-", "+\t/*", "+\t* Feature in KDE. The argv argument passed to KApplication()", "+\t* is kept by KDE and cannot be freed.", "+\t*/", "-\tint /*long*/ [] argv = new int /*long*/ []{ptr, 0};", "-\tKDE.KApplication_new(1, argv, qcString, false, false);", "-\tKDE.free(ptr);", "+\tint /*long*/ argv = KDE.malloc(OS.PTR_SIZEOF * 2);", "+\tOS.memmove(argv, new int /*long*/ []{ptr, 0}, OS.PTR_SIZEOF * 2);", "+\t/*", "+\t* Feature in KDE.  When a KDE application is initialized, it installs", "+\t* its own SIGSEGV,SIGFPE,SIGILL,SIGABRT signal handlers so that it can", "+\t* pop up a dialo box and display an error message should SIGSEGV occur.", "+\t* After the dialogue box is closed, it terminates the program. Some Java VMs", "+\t* happen to catch SIGSEGV signals so that it can throw a null pointer exception.", "+\t* Thus when KDE is initialized, the Java try ... catch mechanism for null pointers", "+\t* does not work.  The fix is to obtain the VM's signal handlers before", "+\t* initializing KDE and to reinstall that handlers after the initialization. The", "+\t* method sigaction() must be used instead of signal() because it returns more", "+\t* information on how to handle the signal.", "+\t*/", "+\tbyte[] sigabrt = new byte[KDE.sigaction_sizeof()];", "+\tKDE.sigaction(KDE.SIGABRT, null, sigabrt);", "+\tbyte[] sigfpe = new byte[KDE.sigaction_sizeof()];", "+\tKDE.sigaction(KDE.SIGFPE, null, sigfpe);", "+\tbyte[] sigill = new byte[KDE.sigaction_sizeof()];", "+\tKDE.sigaction(KDE.SIGILL, null, sigill);", "+\tbyte[] sigsegv = new byte[KDE.sigaction_sizeof()];", "+\tKDE.sigaction(KDE.SIGSEGV, null, sigsegv);", "+\tKDE.KApplication_new(1, argv, qcString, false, true);", "+\tKDE.sigaction(KDE.SIGABRT, sigill, null);", "+\tKDE.sigaction(KDE.SIGFPE, sigill, null);", "+\tKDE.sigaction(KDE.SIGILL, sigill, null);", "+\tKDE.sigaction(KDE.SIGSEGV, sigsegv, null);"]}], "num": 45256}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "98365bdfb89eb7ee86307b1d1723c180", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2bed1de4ca674da7540ce55b56b8ce3c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": "  void createHandle ()", "diff": ["-void createHandle (int index) {", "-\tstate |= HANDLE;", "-    /* AW", "-\tint [] argList1 = {", "-\t\tOS.XmNverifyBell, 0,", "-\t\tOS.XmNeditMode, (style & SWT.SINGLE) != 0 ? OS.XmSINGLE_LINE_EDIT : OS.XmMULTI_LINE_EDIT,", "-\t\tOS.XmNscrollHorizontal, (style & SWT.H_SCROLL) != 0 ? 1 : 0,", "-\t\tOS.XmNscrollVertical, (style & SWT.V_SCROLL) != 0 ? 1 : 0,", "-\t\tOS.XmNwordWrap, (style & SWT.WRAP) != 0 ? 1: 0,", "-\t\tOS.XmNeditable, (style & SWT.READ_ONLY) != 0 ? 0 : 1,", "-\t\tOS.XmNcursorPositionVisible, (style & SWT.READ_ONLY) != 0 && (style & SWT.SINGLE) != 0 ? 0 : 1,", "-\t\tOS.XmNancestorSensitive, 1,", "-\t};", "-    */", "-\tint frameOptions= OS.kTXNDontDrawCaretWhenInactiveMask | OS.kTXNMonostyledTextMask;", "-\tif ((style & SWT.H_SCROLL) != 0)", "-\t\tframeOptions |= OS.kTXNWantHScrollBarMask;", "-\tif ((style & SWT.V_SCROLL) != 0)", "-\t\tframeOptions |= OS.kTXNWantVScrollBarMask;", "-\tif ((style & SWT.SINGLE) != 0)", "-\t\tframeOptions |= OS.kTXNSingleLineOnlyMask;", "-\tif ((style & SWT.READ_ONLY) != 0)", "-\t\tframeOptions |= OS.kTXNReadOnlyMask;", "-\tif ((style & SWT.WRAP) != 0)", "-\t\tframeOptions |= OS.kTXNAlwaysWrapAtViewEdgeMask;", "-\t", "-\tint parentHandle= parent.handle;", "-\thandle= MacUtil.createDrawingArea(parentHandle, -1, true, 0, 0, 0);\t\t", "-\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\tint wHandle= OS.GetControlOwner(parentHandle);", "-\tMacRect bounds= new MacRect();", "-\tOS.GetControlBounds(handle, bounds.getData());", "-\tint frameType= OS.kTXNTextEditStyleFrameType;", "-\tint iFileType= OS.kTXNUnicodeTextFile;", "-\tint iPermanentEncoding= OS.kTXNSystemDefaultEncoding;", "-\tint[] tnxObject= new int[1];", "-\tint[] frameID= new int[1];", "+void createHandle () {", "+\tint features = OS.kControlSupportsEmbedding | OS.kControlSupportsFocus | OS.kControlGetsFocusOnClick;", "+\tint [] outControl = new int [1];", "+\tint window = OS.GetControlOwner (parent.handle);", "+\tOS.CreateUserPaneControl (window, null, features, outControl);", "+\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\thandle = outControl [0];", "-\t * Since MLTE is no real control it must embed its scrollbars in the root control.", "-\t * However, this breaks SWT assumption that everything is a nice and clean hierarchy.", "-\t * To work around this problem we try to move the scrollbars from the root control", "-\t * to the real parent of the Text widget.", "-\t * This is done in two steps: before creating the MLTE object with TXNNewObject", "-\t * we count the number of controls under the root control. Second step: see below.", "-\t */", "-\tint root;", "-\tif (true) {", "-\t\tint[] rootHandle= new int[1];", "-\t\tOS.GetRootControl(wHandle, rootHandle);", "-\t\troot= rootHandle[0];", "-\t} else {", "-\t\troot= OS.HIViewGetRoot(wHandle);", "-\t}", "-\tshort[] cnt= new short[1];", "-\tOS.CountSubControls(root, cnt);", "-\tshort oldCount= cnt[0];", "+\t* Feature in the Macintosh.  The TXNObject is not a control but creates scroll", "+\t* bar controls to scroll the text.  These are created in the root and are not", "+\t* children of the user pane that is used to represent the TNXObject.  The fix", "+\t* is to embed the scroll bars in the user pane.\r\t*/", "+\tint [] theRoot = new int [1];", "+\tOS.GetRootControl (window, theRoot);", "+\tshort [] oldCount = new short [1];", "+\tOS.CountSubControls (theRoot [0], oldCount);\t", "-\t/*", "-\t * Create the MLTE object (and possibly 0-2 scrollbars)", "-\t */", "-\tint status= OS.TXNNewObject(0, wHandle, bounds.getData(), frameOptions, frameType, iFileType, iPermanentEncoding,", "-\t\t\t\t\t\ttnxObject, frameID, handle);", "-\tif (status != OS.kNoErr)", "-\t\terror(SWT.ERROR_NO_HANDLES);", "-\t\t", "-\t/*", "-\t * Second step: count the controls under root again to find out how many", "-\t * scrollbars had been added. Then move these new controls under the user pane", "-\t */", "-\tshort[] newCnt= new short[1];", "-\tOS.CountSubControls(root, newCnt);", "-\tshort newCount= newCnt[0];", "-\tint[] child= new int[1];", "-\tfor (short i= newCount; i > oldCount; i--) {", "-\t\tOS.GetIndexedSubControl(root, i, child);", "-\t\tOS.HIViewRemoveFromSuperview(child[0]);", "-\t\tOS.HIViewAddSubview(handle, child[0]);", "-\t}", "+\t/* Create the TXNObject */", "+\tint iFrameOptions = OS.kTXNDontDrawCaretWhenInactiveMask | OS.kTXNMonostyledTextMask;", "+\tif ((style & SWT.H_SCROLL) != 0) iFrameOptions |= OS.kTXNWantHScrollBarMask;", "+\tif ((style & SWT.V_SCROLL) != 0) iFrameOptions |= OS.kTXNWantVScrollBarMask;", "+\tif ((style & SWT.SINGLE) != 0) iFrameOptions |= OS.kTXNSingleLineOnlyMask;", "+\tif ((style & SWT.READ_ONLY) != 0) iFrameOptions |= OS.kTXNReadOnlyMask;", "+\tif ((style & SWT.WRAP) != 0) iFrameOptions |= OS.kTXNAlwaysWrapAtViewEdgeMask;", "+\tint [] oTXNObject = new int [1], oTXNFrameID = new int[1];", "+\tOS.TXNNewObject (0, window, null, iFrameOptions, OS.kTXNTextEditStyleFrameType, OS.kTXNUnicodeTextFile, OS.kTXNSystemDefaultEncoding, oTXNObject, oTXNFrameID, 0);", "+\tif (oTXNObject [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\ttxnObject = oTXNObject [0];", "+\ttxnFrameID = oTXNFrameID [0];", "-\tfTX= tnxObject[0];", "-\tfFrameID= frameID[0];", "-\tOS.TXNActivate(fTX, fFrameID, OS.kScrollBarsSyncWithFocus);", "+\t/* Embed the scroll bars in the user pane */", "+\tshort [] newCount = new short [1];", "+\tOS.CountSubControls (theRoot [0], newCount);", "+\tint [] scrollBar = new int [1];", "+\tfor (int i=newCount [0]; i>oldCount [0]; --i) {", "+\t\tOS.GetIndexedSubControl (theRoot [0], (short) i, scrollBar);", "+\t\tOS.HIViewRemoveFromSuperview (scrollBar [0]);", "+\t\tOS.HIViewAddSubview (handle, scrollBar [0]);", "+\t}\t", "-\tOS.TXNFocus(fTX, false);", "-\t/*", "-\t * If the widget remains empty the caret will be too short.", "-\t * As a workaround initialize the widget with a single character", "-\t * and immediately remove it afterwards.", "-\t */", "-\tOS.TXNSetData(fTX, new char[] { ' ' }, 0, 0);", "-\tOS.TXNSetData(fTX, new char[0], 0, 1);", "-\t", "-\tOS.setTXNMargins(fTX, (short)MARGIN);", "+\t/* Configure the TXNOBject */", "+\tOS.TXNSetTXNObjectControls (txnObject, false, 1, new int [] {OS.kTXNDisableDragAndDropTag}, new int [] {1});", "+\tOS.TXNSetFrameBounds (txnObject, 0, 0, 0, 0, txnFrameID);", "+\tint ptr = OS.NewPtr (Rect.sizeof);", "+\tRect rect = new Rect ();", "+\tOS.SetRect (rect, (short) 1, (short) 1, (short) 1, (short) 1);", "+\tOS.memcpy (ptr, rect, Rect.sizeof);", "+\tOS.TXNSetTXNObjectControls (txnObject, false, 1, new int [] {OS.kTXNMarginsTag}, new int [] {ptr});", "+\tOS.DisposePtr (ptr);", "+}", "-\tOS.TXNSetTXNObjectControls(fTX, false, 1, new int[] { OS.kTXNDoFontSubstitution }, new int[] { 1 });", "-}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6a16f9c31045b4be348bd9e3c60e670", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 50, "signatureBeforeChange": "  \tprivate boolean focus(boolean doClip, MacRect bounds)", "signatureAfterChange": "  void setCGClipping ()", "diff": ["+", "+void setCGClipping () {", "+\tif (data.control == 0) {", "+\t\tOS.CGContextScaleCTM(handle, 1, -1);", "+\t\tif (data.clipRgn != 0) {", "+\t\t\tOS.ClipCGContextToRegion(handle, new Rect(), data.clipRgn);", "+\t\t} else {", "+\t\t\tint rgn = OS.NewRgn();", "+\t\t\tOS.SetRectRgn(rgn, (short)-32768, (short)-32768, (short)32767, (short)32767);", "+\t\t\tOS.ClipCGContextToRegion(handle, new Rect(), rgn);", "+\t\t\tOS.DisposeRgn(rgn);", "+\t\t}", "+\t\tOS.CGContextScaleCTM(handle, 1, -1);", "+\t\treturn;", "+\t}", "+\tint window = OS.GetControlOwner(data.control);", "+\tint port = OS.GetWindowPort(window);", "+\tRect rect = new Rect();", "+\tOS.GetControlBounds(data.control, rect);", "+\tRect portRect = new Rect();", "+\tOS.GetPortBounds(port, portRect);", "+\tint portHeight = portRect.bottom - portRect.top;", "+\tOS.CGContextTranslateCTM(handle, -rect.left, portHeight - rect.top);", "+\tOS.CGContextScaleCTM(handle, 1, -1);", "+\tif (data.clipRgn != 0) { ", "+\t\tint rgn = OS.NewRgn();", "+\t\tOS.CopyRgn(data.clipRgn, rgn);", "+\t\tOS.OffsetRgn(rgn, rect.left, rect.top);", "+\t\tOS.SectRgn(data.visibleRgn, rgn, rgn);", "+\t\tOS.ClipCGContextToRegion(handle, portRect, rgn);", "+\t\tOS.DisposeRgn(rgn);", "+\t} else {", "+\t\tOS.ClipCGContextToRegion(handle, portRect, data.visibleRgn);", "+\t}", "+\tOS.CGContextScaleCTM(handle, 1, -1);", "+\tOS.CGContextTranslateCTM(handle, rect.left, -portHeight + rect.top);", "+}", "-", "-\tprivate boolean focus(boolean doClip, MacRect bounds) {", "-\t\t", "-\t\tif (fIsFocused && !fPendingClip) {", "-\t\t\treturn true;", "-\t\t}", "-", "-\t\t// save global state", "-\t\tOS.GetGWorld(fSavePort, fSaveGWorld);\t\t", "-\t\tOS.SetGWorld(handle, fSaveGWorld[0]);", "-\t\t", "-\t\tif (!doClip)", "-\t\t\treturn true;", "-\t\t", "-\t\tint dx= 0, dy= 0;", "-", "-\t\t// set origin of port using drawable bounds", "-\t\tif (data.controlHandle != 0) {", "-\t\t\tOS.GetControlBounds(data.controlHandle, fRect.getData());", "-\t\t\tdx= fRect.getX();", "-\t\t\tdy= fRect.getY();", "-\t\t\tOS.SetOrigin((short)-dx, (short)-dy);", "-\t\t\tMacPoint p= new MacPoint(-dx, -dy);", "-\t\t\tOS.QDSetPatternOrigin(p.getData());", "-\t\t}", "-\t\t// save clip region", "-\t\tOS.GetClip(fSaveClip);", "-\t\t", "-\t\t// calculate new clip based on the controls bound and GC clipping region", "-\t\tif (data.controlHandle != 0) {", "-\t\t\t", "-\t\t\tint result= OS.NewRgn();", "-\t\t\tMacUtil.getVisibleRegion(data.controlHandle, result, true);", "-\t\t\tOS.OffsetRgn(result, (short)-dx, (short)-dy);", "-", "-\t\t\t// clip against damage ", "-\t\t\tif (fDamageRgn != 0) {", "-\t\t\t\tint dRgn= OS.NewRgn();", "-\t\t\t\tOS.CopyRgn(fDamageRgn, dRgn);", "-\t\t\t\tOS.OffsetRgn(dRgn, (short)-dx, (short)-dy);", "-\t\t\t\tOS.SectRgn(result, dRgn, result);", "-\t\t\t}", "-\t\t\t", "-\t\t\t// clip against GC clipping region", "-\t\t\tif (data.clipRgn != 0) {", "-\t\t\t\tOS.SectRgn(result, data.clipRgn, result);", "-\t\t\t}", "-\t\t\t\t", "-\t\t\tOS.SetClip(result);", "-\t\t\tif (bounds != null)", "-\t\t\t\tOS.GetRegionBounds(result, bounds.getData());", "-\t\t\tOS.DisposeRgn(result);", "-\t\t\t", "-\t\t} else {", "-\t\t\t// clip against GC clipping region", "-\t\t\tif (data.clipRgn != 0) {", "-\t\t\t\tOS.SetClip(data.clipRgn);", "-\t\t\t\tif (bounds != null)", "-\t\t\t\t\tOS.GetRegionBounds(data.clipRgn, bounds.getData());", "-\t\t\t} else {", "-\t\t\t\tif (bounds != null)", "-\t\t\t\t\tbounds.set(0, 0, 0x8fff, 0x8fff);", "-\t\t\t}", "-\t\t}", "-\t\tfPendingClip= false;", "-\t\t", "-\t\treturn true;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eea969d9f81427101adb849828ab3d3a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 19, "signatureBeforeChange": " Point drawVerticalItemConnector(GC gc, Point position)", "signatureAfterChange": " int getContentX (int columnIndex)", "diff": ["- */", "-Point drawVerticalItemConnector(GC gc, Point position) {", "-\tTree parent = getParent();", "-\tTreeItem parentItem = getParentItem();\t", "-\tRectangle indicatorRectangle = parent.getHierarchyIndicatorRect();", "-\tint itemHeight = parent.getItemHeight();", "-\tint itemHeightDiv2 = itemHeight / 2 + itemHeight % 2;", "-\tint indicatorHeightDiv2 = indicatorRectangle.height / 2 + indicatorRectangle.height % 2;", "-\tint lineX = position.x + indicatorRectangle.width / 2;", "-\tint lineStartY = position.y - itemHeightDiv2;\t", "-\tint lineEndY = position.y + itemHeightDiv2 - itemHeight % 2;", "-\tTreeItem predecessor;", "-\tboolean isFirstChild = false;", "-", "-\tif (isRoot() == true) {", "-\t\tif (getIndex() == 0) {", "-\t\t\treturn position;\t\t\t\t\t\t\t\t\t// first root, don't draw vertical line", "-\telse\t", "-\tif (getIndex() == 0) {\t\t\t\t\t\t\t\t\t\t// if item is first child", "-\t\tlineStartY += itemHeightDiv2;", "-\t\tisFirstChild = true;", "-\tpredecessor = getPredecessor();", "-\tif (predecessor != null && predecessor.isLeaf() == false) {", "-\t\tlineStartY += indicatorHeightDiv2;\t\t\t\t\t\t// leave space for the hierarchy image", "-\t}", "-\tif (isLeaf() == false) {", "-\t\tlineEndY -= indicatorHeightDiv2;", "-\t}", "-\tgc.drawLine(lineX, lineStartY, lineX, lineEndY);", "-\t\tparentItem.drawVerticalItemConnector(gc, position.y, isFirstChild);", "-\treturn position;", "+int getContentX (int columnIndex) {", "+\tif (columnIndex > 0) {", "+\t\tTreeColumn column = parent.getColumn (columnIndex);", "+\t\tint contentX = column.getX () + MARGIN_TEXT;", "+\t\tif ((column.style & SWT.LEFT) != 0) return contentX;", "+\t\t", "+\t\tint contentWidth = internalGetTextWidth (columnIndex);", "+\t\tImage image = internalGetImage (columnIndex);", "+\t\tif (image != null) {", "+\t\t\tcontentWidth += Tree.MARGIN_IMAGE + image.getBounds ().width;", "+\t\t}", "+\t\tif ((column.style & SWT.RIGHT) != 0) {", "+\t\t\tint padding = parent.getCellPadding ();", "+\t\t\tcontentX = Math.max (contentX, column.getX () + column.getWidth () - padding - contentWidth);\t", "+\t\t} else {\t/* SWT.CENTER */", "+\t\t\tcontentX = Math.max (contentX, column.getX () + (column.getWidth () - contentWidth) / 2);", "+\t\t}", "+\t\treturn contentX;", "+\t}", "+\t/* column 0 */", "+\tif ((parent.style & SWT.CHECK) != 0) {", "+\t\tRectangle checkBounds = getCheckboxBounds ();", "+\t\treturn checkBounds.x + checkBounds.width + Tree.MARGIN_IMAGE;", "+\t}", "+\treturn getHconnectorEndpoints ()[1].x + Tree.MARGIN_IMAGE;", "+}"]}], "num": 36109}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f869ce2cf402ec4a9532f7a4c440ef63", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d7c1d4a1e483222adbcc440341266d7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabItem.java", "commitBeforeChange": "0317ba6a815f207c70e5fda4d9b59938d7524871", "commitAfterChange": "52cc9f66dc2d916f415347f67eda980737e233af", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void drawSelected(GC gc )", "signatureAfterChange": " void drawSelected(GC gc )", "diff": ["-\t// Limit drawing area of tab", "-\tRegion r = new Region();", "-\tr.subtract(r); //clear", "-\tRegion clipping = new Region();", "-\tgc.getClipping(clipping);", "-\tr.add(clipping);", "-\tr.intersect(new Rectangle(x, y, Math.min(width, rightTabEdge-x), height));", "-\tgc.setClipping(r);", "-", "-\t// draw Image", "-\tint xDraw = x + LEFT_MARGIN;", "-\tImage image = getImage();", "-\tif (image != null) {", "-\t\tRectangle imageBounds = image.getBounds();", "-\t\tint imageX = xDraw;", "-\t\tint imageHeight = imageBounds.height;", "-\t\tint imageY = y + (height - imageHeight) / 2;", "-\t\timageY += parent.onBottom ? -1 : 1;", "-\t\tint imageWidth = imageBounds.width * imageHeight / imageBounds.height;", "-\t\tgc.drawImage(image, ", "-\t\t\t         imageBounds.x, imageBounds.y, imageBounds.width, imageBounds.height,", "-\t\t\t         imageX, imageY, imageWidth, imageHeight);", "-\t\txDraw += imageWidth + INTERNAL_SPACING;", "+\tif (x < rightTabEdge) {", "+\t\t// Limit drawing area of tab", "+\t\tRegion r = new Region();", "+\t\tr.subtract(r); //clear", "+\t\tRegion clipping = new Region();", "+\t\tgc.getClipping(clipping);", "+\t\tr.add(clipping);", "+\t\tr.intersect(new Rectangle(x, y, Math.min(width, rightTabEdge-x), height));", "+\t\tgc.setClipping(r);", "+\t", "+\t\t// draw Image", "+\t\tint xDraw = x + LEFT_MARGIN;", "+\t\tImage image = getImage();", "+\t\tif (image != null) {", "+\t\t\tRectangle imageBounds = image.getBounds();", "+\t\t\tint imageX = xDraw;", "+\t\t\tint imageHeight = imageBounds.height;", "+\t\t\tint imageY = y + (height - imageHeight) / 2;", "+\t\t\timageY += parent.onBottom ? -1 : 1;", "+\t\t\tint imageWidth = imageBounds.width * imageHeight / imageBounds.height;", "+\t\t\tgc.drawImage(image, ", "+\t\t\t\t         imageBounds.x, imageBounds.y, imageBounds.width, imageBounds.height,", "+\t\t\t\t         imageX, imageY, imageWidth, imageHeight);", "+\t\t\txDraw += imageWidth + INTERNAL_SPACING;", "+\t\t}", "+\t\t", "+\t\t// draw Text", "+\t\tint textWidth = x + width - xDraw - RIGHT_MARGIN;", "+\t\tif (closeRect.width > 0) textWidth -= closeRect.width + INTERNAL_SPACING;", "+\t\tif (shortenedText == null || shortenedTextWidth != textWidth) {", "+\t\t\tshortenedText = shortenText(gc, getText(), textWidth);", "+\t\t\tshortenedTextWidth = textWidth;", "+\t\t}", "+\t\tPoint extent = gc.textExtent(shortenedText, FLAGS);\t", "+\t\tint textY = y + (height - extent.y) / 2;", "+\t\ttextY += parent.onBottom ? -1 : 1;", "+\t\t", "+\t\tgc.setForeground(parent.selectionForeground);", "+\t\tgc.drawText(shortenedText, xDraw, textY, FLAGS);", "+\t\t", "+\t\tif (parent.showClose || showClose) drawClose(gc);", "+\t\t", "+\t\t// draw a Focus rectangle", "+\t\tif (parent.isFocusControl()) {", "+\t\t\tDisplay display = getDisplay();", "+\t\t\tgc.setBackground(display.getSystemColor(SWT.COLOR_BLACK));", "+\t\t\tgc.setForeground(display.getSystemColor(SWT.COLOR_WHITE));", "+\t\t\tgc.drawFocus(xDraw-3, textY-2, extent.x+6, extent.y+4);", "+\t\t}", "+\t\t", "+\t\tgc.setClipping(clipping);", "+\t\tr.dispose();", "+\t\tclipping.dispose();", "-\t", "-\t// draw Text", "-\tint textWidth = x + width - xDraw - RIGHT_MARGIN;", "-\tif (closeRect.width > 0) textWidth -= closeRect.width + INTERNAL_SPACING;", "-\tif (shortenedText == null || shortenedTextWidth != textWidth) {", "-\t\tshortenedText = shortenText(gc, getText(), textWidth);", "-\t\tshortenedTextWidth = textWidth;", "-\t}", "-\tPoint extent = gc.textExtent(shortenedText, FLAGS);\t", "-\tint textY = y + (height - extent.y) / 2;", "-\ttextY += parent.onBottom ? -1 : 1;", "-\t", "-\tgc.setForeground(parent.selectionForeground);", "-\tgc.drawText(shortenedText, xDraw, textY, FLAGS);", "-\t", "-\tif (parent.showClose || showClose) drawClose(gc);", "-\t", "-\t// draw a Focus rectangle", "-\tif (parent.isFocusControl()) {", "-\t\tDisplay display = getDisplay();", "-\t\tgc.setBackground(display.getSystemColor(SWT.COLOR_BLACK));", "-\t\tgc.setForeground(display.getSystemColor(SWT.COLOR_WHITE));", "-\t\tgc.drawFocus(xDraw-3, textY-2, extent.x+6, extent.y+4);", "-\t}", "-\t", "-\tgc.setClipping(clipping);", "-\tr.dispose();", "-\tclipping.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27e4a68c8c761b86c6f2a70479da169d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabItem2.java", "commitBeforeChange": "0317ba6a815f207c70e5fda4d9b59938d7524871", "commitAfterChange": "52cc9f66dc2d916f415347f67eda980737e233af", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void drawSelected(GC gc )", "signatureAfterChange": " void drawSelected(GC gc )", "diff": ["-\t// Limit drawing area of tab", "-\tRegion r = new Region();", "-\tr.subtract(r); //clear", "-\tRegion clipping = new Region();", "-\tgc.getClipping(clipping);", "-\tr.add(clipping);", "-\tr.intersect(new Rectangle(x, y, Math.min(width, rightTabEdge-x), height));", "-\tgc.setClipping(r);", "-", "-\t// draw Image", "-\tint xDraw = x + LEFT_MARGIN;", "-\tImage image = getImage();", "-\tif (image != null) {", "-\t\tRectangle imageBounds = image.getBounds();", "-\t\tint imageX = xDraw;", "-\t\tint imageHeight = imageBounds.height;", "-\t\tint imageY = y + (height - imageHeight) / 2;", "-\t\timageY += parent.onBottom ? -1 : 1;", "-\t\tint imageWidth = imageBounds.width * imageHeight / imageBounds.height;", "-\t\tgc.drawImage(image, ", "-\t\t\t         imageBounds.x, imageBounds.y, imageBounds.width, imageBounds.height,", "-\t\t\t         imageX, imageY, imageWidth, imageHeight);", "-\t\txDraw += imageWidth + INTERNAL_SPACING;", "+\tif ( x < rightTabEdge) {", "+\t\t// Limit drawing area of tab", "+\t\tRegion r = new Region();", "+\t\tr.subtract(r); //clear", "+\t\tRegion clipping = new Region();", "+\t\tgc.getClipping(clipping);", "+\t\tr.add(clipping);", "+\t\tr.intersect(new Rectangle(x, y, Math.min(width, rightTabEdge-x), height));", "+\t\tgc.setClipping(r);", "+\t", "+\t\t// draw Image", "+\t\tint xDraw = x + LEFT_MARGIN;", "+\t\tImage image = getImage();", "+\t\tif (image != null) {", "+\t\t\tRectangle imageBounds = image.getBounds();", "+\t\t\tint imageX = xDraw;", "+\t\t\tint imageHeight = imageBounds.height;", "+\t\t\tint imageY = y + (height - imageHeight) / 2;", "+\t\t\timageY += parent.onBottom ? -1 : 1;", "+\t\t\tint imageWidth = imageBounds.width * imageHeight / imageBounds.height;", "+\t\t\tgc.drawImage(image, ", "+\t\t\t\t         imageBounds.x, imageBounds.y, imageBounds.width, imageBounds.height,", "+\t\t\t\t         imageX, imageY, imageWidth, imageHeight);", "+\t\t\txDraw += imageWidth + INTERNAL_SPACING;", "+\t\t}", "+\t\t", "+\t\t// draw Text", "+\t\tint textWidth = x + width - xDraw - RIGHT_MARGIN;", "+\t\tif (closeRect.width > 0) textWidth -= closeRect.width + INTERNAL_SPACING;", "+\t\tif (shortenedText == null || shortenedTextWidth != textWidth) {", "+\t\t\tshortenedText = shortenText(gc, getText(), textWidth);", "+\t\t\tshortenedTextWidth = textWidth;", "+\t\t}", "+\t\tPoint extent = gc.textExtent(shortenedText, FLAGS);\t", "+\t\tint textY = y + (height - extent.y) / 2;", "+\t\ttextY += parent.onBottom ? -1 : 1;", "+\t\t", "+\t\tgc.setForeground(parent.selectionForeground);", "+\t\tgc.drawText(shortenedText, xDraw, textY, FLAGS);", "+\t\t", "+\t\tif (parent.showClose || showClose) drawClose(gc);", "+\t\t", "+\t\t// draw a Focus rectangle", "+\t\tif (parent.isFocusControl()) {", "+\t\t\tDisplay display = getDisplay();", "+\t\t\tgc.setBackground(display.getSystemColor(SWT.COLOR_BLACK));", "+\t\t\tgc.setForeground(display.getSystemColor(SWT.COLOR_WHITE));", "+\t\t\tgc.drawFocus(xDraw-3, textY-2, extent.x+6, extent.y+4);", "+\t\t}", "+\t\t", "+\t\tgc.setClipping(clipping);", "+\t\tr.dispose();", "+\t\tclipping.dispose();", "-\t", "-\t// draw Text", "-\tint textWidth = x + width - xDraw - RIGHT_MARGIN;", "-\tif (closeRect.width > 0) textWidth -= closeRect.width + INTERNAL_SPACING;", "-\tif (shortenedText == null || shortenedTextWidth != textWidth) {", "-\t\tshortenedText = shortenText(gc, getText(), textWidth);", "-\t\tshortenedTextWidth = textWidth;", "-\t}", "-\tPoint extent = gc.textExtent(shortenedText, FLAGS);\t", "-\tint textY = y + (height - extent.y) / 2;", "-\ttextY += parent.onBottom ? -1 : 1;", "-\t", "-\tgc.setForeground(parent.selectionForeground);", "-\tgc.drawText(shortenedText, xDraw, textY, FLAGS);", "-\t", "-\tif (parent.showClose || showClose) drawClose(gc);", "-\t", "-\t// draw a Focus rectangle", "-\tif (parent.isFocusControl()) {", "-\t\tDisplay display = getDisplay();", "-\t\tgc.setBackground(display.getSystemColor(SWT.COLOR_BLACK));", "-\t\tgc.setForeground(display.getSystemColor(SWT.COLOR_WHITE));", "-\t\tgc.drawFocus(xDraw-3, textY-2, extent.x+6, extent.y+4);", "-\t}", "-\t", "-\tgc.setClipping(clipping);", "-\tr.dispose();", "-\tclipping.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01f77cf0e235fbf5070612b210e03c2a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/win32/org/eclipse/swt/printing/PrintDialog.java", "commitBeforeChange": "6b5e884c7f535b7cb8b5648a01d99cae09e194fc", "commitAfterChange": "9e2e2840ac367eab30032d03153cd028ed78aaef", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public PrinterData open()", "signatureAfterChange": " public PrinterData open()", "diff": ["+\tPrinterData data = null;", "-\tOS.PrintDlg(pd);", "-", "-\t/*", "-\t * If user setup info from a previous print dialog was specified,", "-\t * then restore the previous DEVMODE struct.", "-\t */", "-\tint /*long*/ lpInitData = 0;", "-\tint /*long*/ hHeap = OS.GetProcessHeap();", "-\tbyte devmodeData [] = printerData.otherData;", "-\tif (devmodeData != null && devmodeData.length != 0) {", "-\t\tlpInitData = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, devmodeData.length);", "-\t\tOS.MoveMemory(lpInitData, devmodeData, devmodeData.length);", "-\t\tif (pd.hDevMode != 0) OS.GlobalFree(pd.hDevMode);", "-\t\tpd.hDevMode = lpInitData;", "-\t}", "+\tif (OS.PrintDlg(pd)) {", "-\t/* Initialize the DEVMODE struct's fields from the printerData. */", "-\tint /*long*/ hMem = pd.hDevMode;", "-\tint /*long*/ ptr = OS.GlobalLock(hMem);", "-\tDEVMODE devmode = OS.IsUnicode ? (DEVMODE)new DEVMODEW () : new DEVMODEA ();", "-\tOS.MoveMemory(devmode, ptr, OS.IsUnicode ? OS.DEVMODEW_sizeof() : OS.DEVMODEA_sizeof());", "-\tdevmode.dmFields |= OS.DM_ORIENTATION;", "-\tdevmode.dmOrientation = printerData.orientation == PrinterData.PORTRAIT ? OS.DMORIENT_PORTRAIT : OS.DMORIENT_LANDSCAPE;", "-\tif (printerData.copyCount != 1) {", "-\t\tdevmode.dmFields |= OS.DM_COPIES;", "-\t\tdevmode.dmCopies = (short)printerData.copyCount;", "-\t}", "-\tif (printerData.collate != false) {", "-\t\tdevmode.dmFields |= OS.DM_COLLATE;", "-\t\tdevmode.dmCollate = OS.DMCOLLATE_TRUE;", "-\t}", "-\tOS.MoveMemory(ptr, devmode, OS.IsUnicode ? OS.DEVMODEW_sizeof() : OS.DEVMODEA_sizeof());", "-\tOS.GlobalUnlock(hMem);", "-", "-\tpd.Flags = OS.PD_USEDEVMODECOPIESANDCOLLATE;", "-\tif (printerData.printToFile) pd.Flags |= OS.PD_PRINTTOFILE;", "-\tswitch (printerData.scope) {", "-\t\tcase PrinterData.PAGE_RANGE: pd.Flags |= OS.PD_PAGENUMS; break;", "-\t\tcase PrinterData.SELECTION: pd.Flags |= OS.PD_SELECTION; break;", "-\t\tdefault: pd.Flags |= OS.PD_ALLPAGES;", "-\t}", "-\tpd.nMinPage = 1;", "-\tpd.nMaxPage = -1;", "-\tpd.nFromPage = (short) Math.min (0xFFFF, Math.max (1, printerData.startPage));", "-\tpd.nToPage = (short) Math.min (0xFFFF, Math.max (1, printerData.endPage));", "-", "-\tDisplay display = parent.getDisplay();", "-\tShell [] shells = display.getShells();", "-\tif ((getStyle() & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "-\t\tfor (int i=0; i<shells.length; i++) {", "-\t\t\tif (shells[i].isEnabled() && shells[i] != parent) {", "-\t\t\t\tshells[i].setEnabled(false);", "-\t\t\t} else {", "-\t\t\t\tshells[i] = null;", "-\t\t\t}", "+\t\t/*", "+\t\t * If user setup info from a previous print dialog was specified,", "+\t\t * then restore the previous DEVMODE struct.", "+\t\t */", "+\t\tint /*long*/ lpInitData = 0;", "+\t\tint /*long*/ hHeap = OS.GetProcessHeap();", "+\t\tbyte devmodeData [] = printerData.otherData;", "+\t\tif (devmodeData != null && devmodeData.length != 0) {", "+\t\t\tlpInitData = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, devmodeData.length);", "+\t\t\tOS.MoveMemory(lpInitData, devmodeData, devmodeData.length);", "+\t\t\tif (pd.hDevMode != 0) OS.GlobalFree(pd.hDevMode);", "+\t\t\tpd.hDevMode = lpInitData;", "-\t}", "-\tPrinterData data = null;", "-\tString key = \"org.eclipse.swt.internal.win32.runMessagesInIdle\"; //$NON-NLS-1$", "-\tObject oldValue = display.getData(key);", "-\tdisplay.setData(key, new Boolean(true));", "-\tboolean success = OS.PrintDlg(pd);", "-\tdisplay.setData(key, oldValue);", "-\tif ((getStyle() & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "-\t\tfor (int i=0; i<shells.length; i++) {", "-\t\t\tif (shells[i] != null && !shells[i].isDisposed ()) {", "-\t\t\t\tshells[i].setEnabled(true);", "-\t\t\t}", "-\t\t}", "-\t}", "-\t", "-\tif (success) {", "-\t\t/* Get driver and device from the DEVNAMES struct */", "-\t\thMem = pd.hDevNames;", "-\t\t/* Ensure size is a multiple of 2 bytes on UNICODE platforms */", "-\t\tint size = OS.GlobalSize(hMem) / TCHAR.sizeof * TCHAR.sizeof;", "-\t\tptr = OS.GlobalLock(hMem);", "-\t\tshort[] offsets = new short[4];", "-\t\tOS.MoveMemory(offsets, ptr, 2 * offsets.length);", "-\t\tTCHAR buffer = new TCHAR(0, size);", "-\t\tOS.MoveMemory(buffer, ptr, size);\t", "-\t\tOS.GlobalUnlock(hMem);", "-\t\tif (pd.hDevNames != 0) OS.GlobalFree(pd.hDevNames);", "-", "-\t\tint driverOffset = offsets[0];", "-\t\tint i = 0;", "-\t\twhile (driverOffset + i < size) {", "-\t\t\tif (buffer.tcharAt(driverOffset + i) == 0) break;", "-\t\t\ti++;", "-\t\t}", "-\t\tString driver = buffer.toString(driverOffset, i);", "-", "-\t\tint deviceOffset = offsets[1];", "-\t\ti = 0;", "-\t\twhile (deviceOffset + i < size) {", "-\t\t\tif (buffer.tcharAt(deviceOffset + i) == 0) break;", "-\t\t\ti++;", "-\t\t}", "-\t\tString device = buffer.toString(deviceOffset, i);\t", "-", "-\t\tint outputOffset = offsets[2];", "-\t\ti = 0;", "-\t\twhile (outputOffset + i < size) {", "-\t\t\tif (buffer.tcharAt(outputOffset + i) == 0) break;", "-\t\t\ti++;", "-\t\t}", "-\t\tString output = buffer.toString(outputOffset, i);", "-\t\t/* Create PrinterData object and set fields from PRINTDLG */", "-\t\tdata = new PrinterData(driver, device);", "-\t\tif ((pd.Flags & OS.PD_PAGENUMS) != 0) {", "-\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "-\t\t\tdata.startPage = pd.nFromPage & 0xFFFF;", "-\t\t\tdata.endPage = pd.nToPage & 0xFFFF;", "-\t\t} else if ((pd.Flags & OS.PD_SELECTION) != 0) {", "-\t\t\tdata.scope = PrinterData.SELECTION;", "-\t\t}", "-\t\tdata.printToFile = (pd.Flags & OS.PD_PRINTTOFILE) != 0;", "-\t\tif (data.printToFile) data.fileName = output;", "-\t\tdata.copyCount = pd.nCopies;", "-\t\tdata.collate = (pd.Flags & OS.PD_COLLATE) != 0;", "-", "-\t\t/* Bulk-save the printer-specific settings in the DEVMODE struct */", "-\t\thMem = pd.hDevMode;", "-\t\tsize = OS.GlobalSize(hMem);", "-\t\tptr = OS.GlobalLock(hMem);", "-\t\tdata.otherData = new byte[size];", "-\t\tOS.MoveMemory(data.otherData, ptr, size);", "-\t\tdevmode = OS.IsUnicode ? (DEVMODE)new DEVMODEW () : new DEVMODEA ();", "+\t\t/* Initialize the DEVMODE struct's fields from the printerData. */", "+\t\tint /*long*/ hMem = pd.hDevMode;", "+\t\tint /*long*/ ptr = OS.GlobalLock(hMem);", "+\t\tDEVMODE devmode = OS.IsUnicode ? (DEVMODE)new DEVMODEW () : new DEVMODEA ();", "-\t\tif ((devmode.dmFields & OS.DM_ORIENTATION) != 0) {", "-\t\t\tint dmOrientation = devmode.dmOrientation;", "-\t\t\tdata.orientation = dmOrientation == OS.DMORIENT_LANDSCAPE ? PrinterData.LANDSCAPE : PrinterData.PORTRAIT;", "+\t\tdevmode.dmFields |= OS.DM_ORIENTATION;", "+\t\tdevmode.dmOrientation = printerData.orientation == PrinterData.PORTRAIT ? OS.DMORIENT_PORTRAIT : OS.DMORIENT_LANDSCAPE;", "+\t\tif (printerData.copyCount != 1) {", "+\t\t\tdevmode.dmFields |= OS.DM_COPIES;", "+\t\t\tdevmode.dmCopies = (short)printerData.copyCount;", "+\t\tif (printerData.collate != false) {", "+\t\t\tdevmode.dmFields |= OS.DM_COLLATE;", "+\t\t\tdevmode.dmCollate = OS.DMCOLLATE_TRUE;", "+\t\t}", "+\t\tOS.MoveMemory(ptr, devmode, OS.IsUnicode ? OS.DEVMODEW_sizeof() : OS.DEVMODEA_sizeof());", "-\t\tif (pd.hDevMode != 0) OS.GlobalFree(pd.hDevMode);", "-\t\tif (lpInitData != 0) OS.HeapFree(hHeap, 0, lpInitData);", "-\t\tprinterData = data;", "+\t", "+\t\tpd.Flags = OS.PD_USEDEVMODECOPIESANDCOLLATE;", "+\t\tif (printerData.printToFile) pd.Flags |= OS.PD_PRINTTOFILE;", "+\t\tswitch (printerData.scope) {", "+\t\t\tcase PrinterData.PAGE_RANGE: pd.Flags |= OS.PD_PAGENUMS; break;", "+\t\t\tcase PrinterData.SELECTION: pd.Flags |= OS.PD_SELECTION; break;", "+\t\t\tdefault: pd.Flags |= OS.PD_ALLPAGES;", "+\t\t}", "+\t\tpd.nMinPage = 1;", "+\t\tpd.nMaxPage = -1;", "+\t\tpd.nFromPage = (short) Math.min (0xFFFF, Math.max (1, printerData.startPage));", "+\t\tpd.nToPage = (short) Math.min (0xFFFF, Math.max (1, printerData.endPage));", "+\t", "+\t\tDisplay display = parent.getDisplay();", "+\t\tShell [] shells = display.getShells();", "+\t\tif ((getStyle() & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "+\t\t\tfor (int i=0; i<shells.length; i++) {", "+\t\t\t\tif (shells[i].isEnabled() && shells[i] != parent) {", "+\t\t\t\t\tshells[i].setEnabled(false);", "+\t\t\t\t} else {", "+\t\t\t\t\tshells[i] = null;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tString key = \"org.eclipse.swt.internal.win32.runMessagesInIdle\"; //$NON-NLS-1$", "+\t\tObject oldValue = display.getData(key);", "+\t\tdisplay.setData(key, new Boolean(true));", "+\t\tboolean success = OS.PrintDlg(pd);", "+\t\tdisplay.setData(key, oldValue);", "+\t\tif ((getStyle() & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "+\t\t\tfor (int i=0; i<shells.length; i++) {", "+\t\t\t\tif (shells[i] != null && !shells[i].isDisposed ()) {", "+\t\t\t\t\tshells[i].setEnabled(true);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tif (success) {", "+\t\t\t/* Get driver and device from the DEVNAMES struct */", "+\t\t\thMem = pd.hDevNames;", "+\t\t\t/* Ensure size is a multiple of 2 bytes on UNICODE platforms */", "+\t\t\tint size = OS.GlobalSize(hMem) / TCHAR.sizeof * TCHAR.sizeof;", "+\t\t\tptr = OS.GlobalLock(hMem);", "+\t\t\tshort[] offsets = new short[4];", "+\t\t\tOS.MoveMemory(offsets, ptr, 2 * offsets.length);", "+\t\t\tTCHAR buffer = new TCHAR(0, size);", "+\t\t\tOS.MoveMemory(buffer, ptr, size);\t", "+\t\t\tOS.GlobalUnlock(hMem);", "+\t\t\tif (pd.hDevNames != 0) OS.GlobalFree(pd.hDevNames);", "+\t", "+\t\t\tint driverOffset = offsets[0];", "+\t\t\tint i = 0;", "+\t\t\twhile (driverOffset + i < size) {", "+\t\t\t\tif (buffer.tcharAt(driverOffset + i) == 0) break;", "+\t\t\t\ti++;", "+\t\t\t}", "+\t\t\tString driver = buffer.toString(driverOffset, i);", "+\t", "+\t\t\tint deviceOffset = offsets[1];", "+\t\t\ti = 0;", "+\t\t\twhile (deviceOffset + i < size) {", "+\t\t\t\tif (buffer.tcharAt(deviceOffset + i) == 0) break;", "+\t\t\t\ti++;", "+\t\t\t}", "+\t\t\tString device = buffer.toString(deviceOffset, i);\t", "+\t", "+\t\t\tint outputOffset = offsets[2];", "+\t\t\ti = 0;", "+\t\t\twhile (outputOffset + i < size) {", "+\t\t\t\tif (buffer.tcharAt(outputOffset + i) == 0) break;", "+\t\t\t\ti++;", "+\t\t\t}", "+\t\t\tString output = buffer.toString(outputOffset, i);", "+\t\t\t", "+\t\t\t/* Create PrinterData object and set fields from PRINTDLG */", "+\t\t\tdata = new PrinterData(driver, device);", "+\t\t\tif ((pd.Flags & OS.PD_PAGENUMS) != 0) {", "+\t\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "+\t\t\t\tdata.startPage = pd.nFromPage & 0xFFFF;", "+\t\t\t\tdata.endPage = pd.nToPage & 0xFFFF;", "+\t\t\t} else if ((pd.Flags & OS.PD_SELECTION) != 0) {", "+\t\t\t\tdata.scope = PrinterData.SELECTION;", "+\t\t\t}", "+\t\t\tdata.printToFile = (pd.Flags & OS.PD_PRINTTOFILE) != 0;", "+\t\t\tif (data.printToFile) data.fileName = output;", "+\t\t\tdata.copyCount = pd.nCopies;", "+\t\t\tdata.collate = (pd.Flags & OS.PD_COLLATE) != 0;", "+\t", "+\t\t\t/* Bulk-save the printer-specific settings in the DEVMODE struct */", "+\t\t\thMem = pd.hDevMode;", "+\t\t\tsize = OS.GlobalSize(hMem);", "+\t\t\tptr = OS.GlobalLock(hMem);", "+\t\t\tdata.otherData = new byte[size];", "+\t\t\tOS.MoveMemory(data.otherData, ptr, size);", "+\t\t\tdevmode = OS.IsUnicode ? (DEVMODE)new DEVMODEW () : new DEVMODEA ();", "+\t\t\tOS.MoveMemory(devmode, ptr, OS.IsUnicode ? OS.DEVMODEW_sizeof() : OS.DEVMODEA_sizeof());", "+\t\t\tif ((devmode.dmFields & OS.DM_ORIENTATION) != 0) {", "+\t\t\t\tint dmOrientation = devmode.dmOrientation;", "+\t\t\t\tdata.orientation = dmOrientation == OS.DMORIENT_LANDSCAPE ? PrinterData.LANDSCAPE : PrinterData.PORTRAIT;", "+\t\t\t}", "+\t\t\tOS.GlobalUnlock(hMem);", "+\t\t\tif (pd.hDevMode != 0) OS.GlobalFree(pd.hDevMode);", "+\t\t\tif (lpInitData != 0) OS.HeapFree(hHeap, 0, lpInitData);", "+\t\t\tprinterData = data;", "+\t\t}"]}], "num": 12069}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae0b744db80a87101ca0b97e5452c417", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9459b71eb880590de283b7f5caedbdde", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 61, "signatureBeforeChange": "\r \r int processResize (int callData)", "signatureAfterChange": "\r int XStructureNotify (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-\r", "-int processResize (int callData) {\r", "-\tXConfigureEvent xEvent = new XConfigureEvent ();\r", "-\tOS.memmove (xEvent, callData, XConfigureEvent.sizeof);\r", "-\tswitch (xEvent.type) {\r", "-\t\tcase OS.ReparentNotify: {\r", "-\t\t\tif (reparented) return 0;\r", "-\t\t\treparented = true;\r", "-\t\t\tshort [] root_x = new short [1], root_y = new short [1];\r", "-\t\t\tOS.XtTranslateCoords (shellHandle, (short) 0, (short) 0, root_x, root_y);\r", "-\t\t\tint [] argList = {OS.XmNwidth, 0, OS.XmNheight, 0};\r", "-\t\t\tOS.XtGetValues (shellHandle, argList, argList.length / 2);\t\r", "-\t\t\txEvent.x = root_x [0];  xEvent.y = root_y [0];\r", "-\t\t\txEvent.width = argList [1];  xEvent.height = argList [3];\r", "-\t\t\t// FALL THROUGH\r", "-\t\t}\r", "-\t\tcase OS.ConfigureNotify:\r", "-\t\t\tif (!reparented) return 0;\r", "-\t\t\tconfigured = false;\r", "-\t\t\tif (oldX != xEvent.x || oldY != xEvent.y) sendEvent (SWT.Move);\r", "-\t\t\tif (oldWidth != xEvent.width || oldHeight != xEvent.height) {\r", "-\t\t\t\tXAnyEvent event = new XAnyEvent ();\r", "-\t\t\t\tdisplay.resizeWindow = xEvent.window;\r", "-\t\t\t\tdisplay.resizeWidth = xEvent.width;\r", "-\t\t\t\tdisplay.resizeHeight = xEvent.height;\r", "-\t\t\t\tdisplay.resizeCount = 0;\r", "-\t\t\t\tint checkResizeProc = display.checkResizeProc;\r", "-\t\t\t\tOS.XCheckIfEvent (xEvent.display, event, checkResizeProc, 0);\r", "-\t\t\t\tif (display.resizeCount == 0) {\r", "-\t\t\t\t\tsendEvent (SWT.Resize);\r", "-\t\t\t\t\tif (layout != null) layout (false);\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tif (xEvent.x != 0) oldX = xEvent.x;\r", "-\t\t\tif (xEvent.y != 0) oldY = xEvent.y;\r", "-\t\t\toldWidth = xEvent.width;\r", "-\t\t\toldHeight = xEvent.height;\r", "-\t\t\treturn 0;\r", "-\t\tcase OS.UnmapNotify:\r", "-\t\t\tint [] argList = {OS.XmNmappedWhenManaged, 0};\r", "-\t\t\tOS.XtGetValues (shellHandle, argList, argList.length / 2);\r", "-\t\t\tif (argList [1] != 0) {\r", "-\t\t\t\tminimized = true;\r", "-\t\t\t\tsendEvent (SWT.Iconify);\r", "-\t\t\t}\r", "-\t\t\treturn 0;\r", "-\t\tcase OS.MapNotify:\r", "-\t\t\tif (minimized) {\r", "-\t\t\t\tminimized = false;\r", "-\t\t\t\tsendEvent (SWT.Deiconify);\r", "-\t\t\t}\r", "-\t\t\treturn 0;\r", "-\t}\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XStructureNotify (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tXConfigureEvent xEvent = new XConfigureEvent ();\r", "+\tOS.memmove (xEvent, call_data, XConfigureEvent.sizeof);\r", "+\tswitch (xEvent.type) {\r", "+\t\tcase OS.ReparentNotify: {\r", "+\t\t\tif (reparented) return 0;\r", "+\t\t\treparented = true;\r", "+\t\t\tshort [] root_x = new short [1], root_y = new short [1];\r", "+\t\t\tOS.XtTranslateCoords (shellHandle, (short) 0, (short) 0, root_x, root_y);\r", "+\t\t\tint [] argList = {OS.XmNwidth, 0, OS.XmNheight, 0};\r", "+\t\t\tOS.XtGetValues (shellHandle, argList, argList.length / 2);\t\r", "+\t\t\txEvent.x = root_x [0];  xEvent.y = root_y [0];\r", "+\t\t\txEvent.width = argList [1];  xEvent.height = argList [3];\r", "+\t\t\t// FALL THROUGH\r", "+\t\t}\r", "+\t\tcase OS.ConfigureNotify:\r", "+\t\t\tif (!reparented) return 0;\r", "+\t\t\tconfigured = false;\r", "+\t\t\tif (oldX != xEvent.x || oldY != xEvent.y) sendEvent (SWT.Move);\r", "+\t\t\tif (oldWidth != xEvent.width || oldHeight != xEvent.height) {\r", "+\t\t\t\tXAnyEvent event = new XAnyEvent ();\r", "+\t\t\t\tdisplay.resizeWindow = xEvent.window;\r", "+\t\t\t\tdisplay.resizeWidth = xEvent.width;\r", "+\t\t\t\tdisplay.resizeHeight = xEvent.height;\r", "+\t\t\t\tdisplay.resizeCount = 0;\r", "+\t\t\t\tint checkResizeProc = display.checkResizeProc;\r", "+\t\t\t\tOS.XCheckIfEvent (xEvent.display, event, checkResizeProc, 0);\r", "+\t\t\t\tif (display.resizeCount == 0) {\r", "+\t\t\t\t\tsendEvent (SWT.Resize);\r", "+\t\t\t\t\tif (layout != null) layout (false);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tif (xEvent.x != 0) oldX = xEvent.x;\r", "+\t\t\tif (xEvent.y != 0) oldY = xEvent.y;\r", "+\t\t\toldWidth = xEvent.width;\r", "+\t\t\toldHeight = xEvent.height;\r", "+\t\t\treturn 0;\r", "+\t\tcase OS.UnmapNotify:\r", "+\t\t\tint [] argList = {OS.XmNmappedWhenManaged, 0};\r", "+\t\t\tOS.XtGetValues (shellHandle, argList, argList.length / 2);\r", "+\t\t\tif (argList [1] != 0) {\r", "+\t\t\t\tminimized = true;\r", "+\t\t\t\tsendEvent (SWT.Iconify);\r", "+\t\t\t}\r", "+\t\t\treturn 0;\r", "+\t\tcase OS.MapNotify:\r", "+\t\t\tif (minimized) {\r", "+\t\t\t\tminimized = false;\r", "+\t\t\t\tsendEvent (SWT.Deiconify);\r", "+\t\t\t}\r", "+\t\t\treturn 0;\r", "+\t}\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9468d45e3f2899b15914cb311f603f47", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 149, "signatureBeforeChange": "\r int processKeyUp (int callData)", "signatureAfterChange": "\r int XKeyRelease (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processKeyUp (int callData) {\r", "-\tXKeyEvent xEvent = new XKeyEvent ();\r", "-\tOS.memmove (xEvent, callData, XKeyEvent.sizeof);\r", "-\tif (menu != null && xEvent.state == OS.ShiftMask) {\r", "-\t\tbyte [] buffer = new byte [1];\r", "-\t\tint [] keysym = new int [1];\t\r", "-\t\tOS.XLookupString (xEvent, buffer, buffer.length, keysym, null);\r", "-\t\tif (keysym [0] == OS.XK_F10) {\r", "-\t\t\tmenu.setVisible (true);\r", "-\t\t\treturn 0;\r", "-\t\t}\r", "-\t}\r", "-\tsendKeyEvent (SWT.KeyUp, xEvent);\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XKeyRelease (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tXKeyEvent xEvent = new XKeyEvent ();\r", "+\tOS.memmove (xEvent, call_data, XKeyEvent.sizeof);\r", "+\tif (menu != null && xEvent.state == OS.ShiftMask) {\r", "+\t\tbyte [] buffer = new byte [1];\r", "+\t\tint [] keysym = new int [1];\t\r", "+\t\tOS.XLookupString (xEvent, buffer, buffer.length, keysym, null);\r", "+\t\tif (keysym [0] == OS.XK_F10) {\r", "+\t\t\tmenu.setVisible (true);\r", "+\t\t\treturn 0;\r", "+\t\t}\r", "+\t}\r", "+\tsendKeyEvent (SWT.KeyUp, xEvent);\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8dc2d8427a83e2ae3a937c559abb720", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 144, "signatureBeforeChange": "\r int processMouseUp (int callData)", "signatureAfterChange": "\r int XButtonRelease (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processMouseUp (int callData) {\r", "-\tDisplay display = getDisplay ();\r", "-\tdisplay.hideToolTip ();\r", "-\tXButtonEvent xEvent = new XButtonEvent ();\r", "-\tOS.memmove (xEvent, callData, XButtonEvent.sizeof);\r", "-\tsendMouseEvent (SWT.MouseUp, xEvent.button, xEvent);\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XButtonRelease (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tDisplay display = getDisplay ();\r", "+\tdisplay.hideToolTip ();\r", "+\tXButtonEvent xEvent = new XButtonEvent ();\r", "+\tOS.memmove (xEvent, call_data, XButtonEvent.sizeof);\r", "+\tsendMouseEvent (SWT.MouseUp, xEvent.button, xEvent);\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af89860596aa9f89ed6d6bc80e5eb07b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 143, "signatureBeforeChange": "\r int processMouseDown (int callData)", "signatureAfterChange": "\r int XButtonPress (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processMouseDown (int callData) {\r", "-\tDisplay display = getDisplay ();\r", "-\tShell shell = getShell ();\r", "-\tdisplay.hideToolTip ();\r", "-\tXButtonEvent xEvent = new XButtonEvent ();\r", "-\tOS.memmove (xEvent, callData, XButtonEvent.sizeof);\r", "-\tsendMouseEvent (SWT.MouseDown, xEvent.button, xEvent);\r", "-\tif (xEvent.button == 2 && hooks (SWT.DragDetect)) {\r", "-\t\tpostEvent (SWT.DragDetect);\r", "-\t}\r", "-\tif (xEvent.button == 3 && menu != null) {\r", "-\t\tsetFocus ();\r", "-//\t\tmenu.setLocation (xEvent.x_root, xEvent.y_root);\r", "-\t\tmenu.setVisible (true);\r", "-\t}\r", "-\tint clickTime = display.getDoubleClickTime ();\r", "-\tint lastTime = display.lastTime, eventTime = xEvent.time;\r", "-\tint lastButton = display.lastButton, eventButton = xEvent.button;\r", "-\tif (lastButton == eventButton && lastTime != 0 && Math.abs (lastTime - eventTime) <= clickTime) {\r", "-\t\tsendMouseEvent (SWT.MouseDoubleClick, eventButton, xEvent);\r", "-\t}\r", "-\tdisplay.lastTime = eventTime == 0 ? 1 : eventTime;\r", "-\tdisplay.lastButton = eventButton;\r", "-\t\r", "-\t/*\r", "-\t* It is possible that the shell may be\r", "-\t* disposed at this point.  If this happens\r", "-\t* don't send the activate and deactivate\r", "-\t* events.\r", "-\t*/\t\r", "-\tif (!shell.isDisposed ()) {\r", "-\t\tshell.setActiveControl (this);\r", "-\t}\r", "-\treturn 0;\r", "-}\r", "+int XButtonPress (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tDisplay display = getDisplay ();\r", "+\tShell shell = getShell ();\r", "+\tdisplay.hideToolTip ();\r", "+\tXButtonEvent xEvent = new XButtonEvent ();\r", "+\tOS.memmove (xEvent, call_data, XButtonEvent.sizeof);\r", "+\tsendMouseEvent (SWT.MouseDown, xEvent.button, xEvent);\r", "+\tif (xEvent.button == 2 && hooks (SWT.DragDetect)) {\r", "+\t\tpostEvent (SWT.DragDetect);\r", "+\t}\r", "+\tif (xEvent.button == 3 && menu != null) {\r", "+\t\tsetFocus ();\r", "+//\t\tmenu.setLocation (xEvent.x_root, xEvent.y_root);\r", "+\t\tmenu.setVisible (true);\r", "+\t}\r", "+\tint clickTime = display.getDoubleClickTime ();\r", "+\tint lastTime = display.lastTime, eventTime = xEvent.time;\r", "+\tint lastButton = display.lastButton, eventButton = xEvent.button;\r", "+\tif (lastButton == eventButton && lastTime != 0 && Math.abs (lastTime - eventTime) <= clickTime) {\r", "+\t\tsendMouseEvent (SWT.MouseDoubleClick, eventButton, xEvent);\r", "+\t}\r", "+\tdisplay.lastTime = eventTime == 0 ? 1 : eventTime;\r", "+\tdisplay.lastButton = eventButton;\r", "+\t\r", "+\t/*\r", "+\t* It is possible that the shell may be\r", "+\t* disposed at this point.  If this happens\r", "+\t* don't send the activate and deactivate\r", "+\t* events.\r", "+\t*/\t\r", "+\tif (!shell.isDisposed ()) {\r", "+\t\tshell.setActiveControl (this);\r", "+\t}\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1af985e96b83f1e31fa44b6a827ac9af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 148, "signatureBeforeChange": "\r int processKeyDown (int callData)", "signatureAfterChange": "\r int XKeyPress (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-int processKeyDown (int callData) {\r", "-\tXKeyEvent xEvent = new XKeyEvent ();\r", "-\tOS.memmove (xEvent, callData, XKeyEvent.sizeof);\r", "-\tif (xEvent.keycode != 0) {\r", "-\t\tsendKeyEvent (SWT.KeyDown, xEvent);\r", "-\t} else {\r", "-\t\tsendIMEKeyEvent (SWT.KeyDown, xEvent);\r", "-\t}\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XKeyPress (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tXKeyEvent xEvent = new XKeyEvent ();\r", "+\tOS.memmove (xEvent, call_data, XKeyEvent.sizeof);\r", "+\tif (xEvent.keycode != 0) {\r", "+\t\tsendKeyEvent (SWT.KeyDown, xEvent);\r", "+\t} else {\r", "+\t\tsendIMEKeyEvent (SWT.KeyDown, xEvent);\r", "+\t}\r", "+\treturn 0;\r", "+}\r"]}], "num": 53847}
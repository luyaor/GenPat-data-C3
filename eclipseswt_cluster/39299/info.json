{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b80d647dae1ea801315c6c9889fc052", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fe7de4d882c01fa45e82ea73ae252ef", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "16869ddf67c23faeefbc3dfea87ba1d07b576aa4", "commitAfterChange": "5490853b5c3594d14688ab1c5595c53977b8ead0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Image(Device device, Image srcImage, int flag)", "signatureAfterChange": " public Image(Device device, Image srcImage, int flag)", "diff": ["+\t", "+\tif (OS.USE_CAIRO_SURFACE) {", "+\t\tif (flag != SWT.IMAGE_DISABLE) transparentPixel = srcImage.transparentPixel;", "+\t\talpha = srcImage.alpha;", "+\t\tif (srcImage.alphaData != null) {", "+\t\t\talphaData = new byte[srcImage.alphaData.length];", "+\t\t\tSystem.arraycopy(srcImage.alphaData, 0, alphaData, 0, alphaData.length);", "+\t\t}", "+\t", "+\t\tint /*long*/ imageSurface = srcImage.surface;", "+\t\tint format = Cairo.cairo_image_surface_get_format(imageSurface);", "+\t\tint width = this.width = Cairo.cairo_image_surface_get_width(imageSurface);", "+\t\tint height = this.height = Cairo.cairo_image_surface_get_height(imageSurface);", "+\t\tboolean hasAlpha = format == Cairo.CAIRO_FORMAT_ARGB32;", "+\t\tsurface = Cairo.cairo_image_surface_create(format, width, height);", "+\t\tif (surface == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tint /*long*/ cairo = Cairo.cairo_create(surface);", "+\t\tif (cairo == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tCairo.cairo_set_operator(cairo, Cairo.CAIRO_OPERATOR_SRC);", "+\t\tCairo.cairo_set_source_surface (cairo, imageSurface, 0, 0);", "+\t\tCairo.cairo_paint (cairo);", "+\t\tCairo.cairo_destroy(cairo);", "+\t\tif (flag != SWT.IMAGE_COPY) {", "+\t\t\tint stride = Cairo.cairo_image_surface_get_stride(surface);", "+\t\t\tint /*long*/ data = Cairo.cairo_image_surface_get_data(surface);", "+\t\t\tint oa, or, og, ob;", "+\t\t\tif (OS.BIG_ENDIAN) {", "+\t\t\t\toa = 0; or = 1; og = 2; ob = 3;", "+\t\t\t} else {", "+\t\t\t\toa = 3; or = 2; og = 1; ob = 0;", "+\t\t\t}", "+\t\t\tswitch (flag) {", "+\t\t\t\tcase SWT.IMAGE_DISABLE: {", "+\t\t\t\t\tColor zeroColor = device.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);", "+\t\t\t\t\tRGB zeroRGB = zeroColor.getRGB();", "+\t\t\t\t\tint zeroRed = zeroRGB.red;", "+\t\t\t\t\tint zeroGreen = zeroRGB.green;", "+\t\t\t\t\tint zeroBlue = zeroRGB.blue;", "+\t\t\t\t\tColor oneColor = device.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);", "+\t\t\t\t\tRGB oneRGB = oneColor.getRGB();", "+\t\t\t\t\tint oneRed = oneRGB.red;", "+\t\t\t\t\tint oneGreen = oneRGB.green;", "+\t\t\t\t\tint oneBlue = oneRGB.blue;", "+\t\t\t\t\tbyte[] line = new byte[stride];", "+\t\t\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\t\t\tOS.memmove(line, data + (y * stride), stride);", "+\t\t\t\t\t\tfor (int x=0, offset=0; x<width; x++, offset += 4) {", "+\t\t\t\t\t\t\tint a = line[offset + oa] & 0xFF;", "+\t\t\t\t\t\t\tint r = line[offset + or] & 0xFF;", "+\t\t\t\t\t\t\tint g = line[offset + og] & 0xFF;", "+\t\t\t\t\t\t\tint b = line[offset + ob] & 0xFF;", "+\t\t\t\t\t\t\tif (hasAlpha && a != 0) {", "+\t\t\t\t\t\t\t\t//TODO write this without floating point math", "+\t\t\t\t\t\t\t\tr = (int)((r / (float)a) * 0xFF);", "+\t\t\t\t\t\t\t\tg = (int)((g / (float)a) * 0xFF);", "+\t\t\t\t\t\t\t\tb = (int)((b / (float)a) * 0xFF);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tint intensity = r * r + g * g + b * b;", "+\t\t\t\t\t\t\tif (intensity < 98304) {", "+\t\t\t\t\t\t\t\tr = zeroRed;", "+\t\t\t\t\t\t\t\tg = zeroGreen;", "+\t\t\t\t\t\t\t\tb = zeroBlue;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tr = oneRed;", "+\t\t\t\t\t\t\t\tg = oneGreen;", "+\t\t\t\t\t\t\t\tb = oneBlue;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (hasAlpha) {", "+\t\t\t\t\t\t\t\t/* pre-multiplied alpha */", "+\t\t\t\t\t\t\t\tr = (r * a) + 128;", "+\t\t\t\t\t\t\t\tr = (r + (r >> 8)) >> 8;", "+\t\t\t\t\t\t\t\tg = (g * a) + 128;", "+\t\t\t\t\t\t\t\tg = (g + (g >> 8)) >> 8;", "+\t\t\t\t\t\t\t\tb = (b * a) + 128;", "+\t\t\t\t\t\t\t\tb = (b + (b >> 8)) >> 8;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tline[offset + or] = (byte)r;", "+\t\t\t\t\t\t\tline[offset + og] = (byte)g;", "+\t\t\t\t\t\t\tline[offset + ob] = (byte)b;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.memmove(data + (y * stride), line, stride);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tcase SWT.IMAGE_GRAY: {\t\t\t", "+\t\t\t\t\tbyte[] line = new byte[stride];", "+\t\t\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\t\t\tOS.memmove(line, data + (y * stride), stride);", "+\t\t\t\t\t\tfor (int x=0, offset = 0; x<width; x++, offset += 4) {", "+\t\t\t\t\t\t\tint a = line[offset + oa] & 0xFF;", "+\t\t\t\t\t\t\tint r = line[offset + or] & 0xFF;", "+\t\t\t\t\t\t\tint g = line[offset + og] & 0xFF;", "+\t\t\t\t\t\t\tint b = line[offset + ob] & 0xFF;", "+\t\t\t\t\t\t\tif (hasAlpha && a != 0) {", "+\t\t\t\t\t\t\t\t//TODO write this without floating point math", "+\t\t\t\t\t\t\t\tr = (int)((r / (float)a) * 0xFF);", "+\t\t\t\t\t\t\t\tg = (int)((g / (float)a) * 0xFF);", "+\t\t\t\t\t\t\t\tb = (int)((b / (float)a) * 0xFF);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tint intensity = (r+r+g+g+g+g+g+b) >> 3;", "+\t\t\t\t\t\t\tif (hasAlpha) {", "+\t\t\t\t\t\t\t\t/* pre-multiplied alpha */", "+\t\t\t\t\t\t\t\tintensity = (intensity * a) + 128;", "+\t\t\t\t\t\t\t\tintensity = (intensity + (intensity >> 8)) >> 8;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tline[offset+or] = line[offset+og] = line[offset+ob] = (byte)intensity;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.memmove(data + (y * stride), line, stride);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tinit();", "+\t\treturn;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e5a4012b34ddf8c0784230ca678f0f0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "21541d1c7be3bc786f754e0d8604695c158056de", "commitAfterChange": "4e877ff6e374c0eac9d6ca011beec9646167b530", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Image(Device device, Image srcImage, int flag)", "signatureAfterChange": " public Image(Device device, Image srcImage, int flag)", "diff": ["-\tif (device == null) device = Device.getDevice();", "-\tif (device == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+\tsuper(device);", "-\tthis.device = device;", "+\tdevice = this.device;", "-\tif (flag == SWT.IMAGE_COPY) return;", "+\tif (flag != SWT.IMAGE_COPY) {", "-\t/* Apply transformation */", "-\tswitch (flag) {", "-\t\tcase SWT.IMAGE_DISABLE: {", "-\t\t\tColor zeroColor = device.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);", "-\t\t\tRGB zeroRGB = zeroColor.getRGB();", "-\t\t\tbyte zeroRed = (byte)zeroRGB.red;", "-\t\t\tbyte zeroGreen = (byte)zeroRGB.green;", "-\t\t\tbyte zeroBlue = (byte)zeroRGB.blue;", "-\t\t\tColor oneColor = device.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);", "-\t\t\tRGB oneRGB = oneColor.getRGB();", "-\t\t\tbyte oneRed = (byte)oneRGB.red;", "-\t\t\tbyte oneGreen = (byte)oneRGB.green;", "-\t\t\tbyte oneBlue = (byte)oneRGB.blue;", "-\t\t\tbyte[] line = new byte[bpr];", "-\t\t\tfor (int y=0; y<height; y++) {", "-\t\t\t\tOS.memmove(line, data + (y * bpr), bpr);", "-\t\t\t\tint offset = 0;", "-\t\t\t\tfor (int x=0; x<width; x++) {", "-\t\t\t\t\tint red = line[offset+1] & 0xFF;", "-\t\t\t\t\tint green = line[offset+2] & 0xFF;", "-\t\t\t\t\tint blue = line[offset+3] & 0xFF;", "-\t\t\t\t\tint intensity = red * red + green * green + blue * blue;", "-\t\t\t\t\tif (intensity < 98304) {", "-\t\t\t\t\t\tline[offset+1] = zeroRed;", "-\t\t\t\t\t\tline[offset+2] = zeroGreen;", "-\t\t\t\t\t\tline[offset+3] = zeroBlue;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tline[offset+1] = oneRed;", "-\t\t\t\t\t\tline[offset+2] = oneGreen;", "-\t\t\t\t\t\tline[offset+3] = oneBlue;", "+\t\t/* Apply transformation */", "+\t\tswitch (flag) {", "+\t\t\tcase SWT.IMAGE_DISABLE: {", "+\t\t\t\tColor zeroColor = device.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);", "+\t\t\t\tRGB zeroRGB = zeroColor.getRGB();", "+\t\t\t\tbyte zeroRed = (byte)zeroRGB.red;", "+\t\t\t\tbyte zeroGreen = (byte)zeroRGB.green;", "+\t\t\t\tbyte zeroBlue = (byte)zeroRGB.blue;", "+\t\t\t\tColor oneColor = device.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);", "+\t\t\t\tRGB oneRGB = oneColor.getRGB();", "+\t\t\t\tbyte oneRed = (byte)oneRGB.red;", "+\t\t\t\tbyte oneGreen = (byte)oneRGB.green;", "+\t\t\t\tbyte oneBlue = (byte)oneRGB.blue;", "+\t\t\t\tbyte[] line = new byte[bpr];", "+\t\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\t\tOS.memmove(line, data + (y * bpr), bpr);", "+\t\t\t\t\tint offset = 0;", "+\t\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\t\t\tint red = line[offset+1] & 0xFF;", "+\t\t\t\t\t\tint green = line[offset+2] & 0xFF;", "+\t\t\t\t\t\tint blue = line[offset+3] & 0xFF;", "+\t\t\t\t\t\tint intensity = red * red + green * green + blue * blue;", "+\t\t\t\t\t\tif (intensity < 98304) {", "+\t\t\t\t\t\t\tline[offset+1] = zeroRed;", "+\t\t\t\t\t\t\tline[offset+2] = zeroGreen;", "+\t\t\t\t\t\t\tline[offset+3] = zeroBlue;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tline[offset+1] = oneRed;", "+\t\t\t\t\t\t\tline[offset+2] = oneGreen;", "+\t\t\t\t\t\t\tline[offset+3] = oneBlue;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\toffset += 4;", "-\t\t\t\t\toffset += 4;", "+\t\t\t\t\tOS.memmove(data + (y * bpr), line, bpr);", "-\t\t\t\tOS.memmove(data + (y * bpr), line, bpr);", "+\t\t\t\tbreak;", "-\t\t\tbreak;", "-\t\t}", "-\t\tcase SWT.IMAGE_GRAY: {\t\t\t", "-\t\t\tbyte[] line = new byte[bpr];", "-\t\t\tfor (int y=0; y<height; y++) {", "-\t\t\t\tOS.memmove(line, data + (y * bpr), bpr);", "-\t\t\t\tint offset = 0;", "-\t\t\t\tfor (int x=0; x<width; x++) {", "-\t\t\t\t\tint red = line[offset+1] & 0xFF;", "-\t\t\t\t\tint green = line[offset+2] & 0xFF;", "-\t\t\t\t\tint blue = line[offset+3] & 0xFF;", "-\t\t\t\t\tbyte intensity = (byte)((red+red+green+green+green+green+green+blue) >> 3);", "-\t\t\t\t\tline[offset+1] = line[offset+2] = line[offset+3] = intensity;", "-\t\t\t\t\toffset += 4;", "+\t\t\tcase SWT.IMAGE_GRAY: {\t\t\t", "+\t\t\t\tbyte[] line = new byte[bpr];", "+\t\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\t\tOS.memmove(line, data + (y * bpr), bpr);", "+\t\t\t\t\tint offset = 0;", "+\t\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\t\t\tint red = line[offset+1] & 0xFF;", "+\t\t\t\t\t\tint green = line[offset+2] & 0xFF;", "+\t\t\t\t\t\tint blue = line[offset+3] & 0xFF;", "+\t\t\t\t\t\tbyte intensity = (byte)((red+red+green+green+green+green+green+blue) >> 3);", "+\t\t\t\t\t\tline[offset+1] = line[offset+2] = line[offset+3] = intensity;", "+\t\t\t\t\t\toffset += 4;", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.memmove(data + (y * bpr), line, bpr);", "-\t\t\t\tOS.memmove(data + (y * bpr), line, bpr);", "+\t\t\t\tbreak;", "-\t\t\tbreak;", "+\tinit();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "656b3f53784e98f14cc230eb9e5881aa", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "21541d1c7be3bc786f754e0d8604695c158056de", "commitAfterChange": "4e877ff6e374c0eac9d6ca011beec9646167b530", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Image(Device device, Image srcImage, int flag)", "signatureAfterChange": " public Image(Device device, Image srcImage, int flag)", "diff": ["-\tif (device == null) device = Device.getDevice();", "-\tif (device == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+\tsuper(device);", "-\tthis.device = device;", "+\tdevice = this.device;", "-\tif (flag == SWT.IMAGE_COPY) return;", "-\t", "-\t/* Apply transformation */", "-\tswitch (flag) {", "-\t\tcase SWT.IMAGE_DISABLE: {", "-\t\t\tColor zeroColor = device.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);", "-\t\t\tRGB zeroRGB = zeroColor.getRGB();", "-\t\t\tbyte zeroRed = (byte)zeroRGB.red;", "-\t\t\tbyte zeroGreen = (byte)zeroRGB.green;", "-\t\t\tbyte zeroBlue = (byte)zeroRGB.blue;", "-\t\t\tColor oneColor = device.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);", "-\t\t\tRGB oneRGB = oneColor.getRGB();", "-\t\t\tbyte oneRed = (byte)oneRGB.red;", "-\t\t\tbyte oneGreen = (byte)oneRGB.green;", "-\t\t\tbyte oneBlue = (byte)oneRGB.blue;", "-\t\t\tbyte[] line = new byte[bpr];", "-\t\t\tfor (int y=0; y<height; y++) {", "-\t\t\t\tOS.memmove(line, data + (y * bpr), bpr);", "-\t\t\t\tint offset = 0;", "-\t\t\t\tfor (int x=0; x<width; x++) {", "-\t\t\t\t\tint red = line[offset+1] & 0xFF;", "-\t\t\t\t\tint green = line[offset+2] & 0xFF;", "-\t\t\t\t\tint blue = line[offset+3] & 0xFF;", "-\t\t\t\t\tint intensity = red * red + green * green + blue * blue;", "-\t\t\t\t\tif (intensity < 98304) {", "-\t\t\t\t\t\tline[offset+1] = zeroRed;", "-\t\t\t\t\t\tline[offset+2] = zeroGreen;", "-\t\t\t\t\t\tline[offset+3] = zeroBlue;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tline[offset+1] = oneRed;", "-\t\t\t\t\t\tline[offset+2] = oneGreen;", "-\t\t\t\t\t\tline[offset+3] = oneBlue;", "+\tif (flag != SWT.IMAGE_COPY) {", "+\t\t", "+\t\t/* Apply transformation */", "+\t\tswitch (flag) {", "+\t\t\tcase SWT.IMAGE_DISABLE: {", "+\t\t\t\tColor zeroColor = device.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);", "+\t\t\t\tRGB zeroRGB = zeroColor.getRGB();", "+\t\t\t\tbyte zeroRed = (byte)zeroRGB.red;", "+\t\t\t\tbyte zeroGreen = (byte)zeroRGB.green;", "+\t\t\t\tbyte zeroBlue = (byte)zeroRGB.blue;", "+\t\t\t\tColor oneColor = device.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);", "+\t\t\t\tRGB oneRGB = oneColor.getRGB();", "+\t\t\t\tbyte oneRed = (byte)oneRGB.red;", "+\t\t\t\tbyte oneGreen = (byte)oneRGB.green;", "+\t\t\t\tbyte oneBlue = (byte)oneRGB.blue;", "+\t\t\t\tbyte[] line = new byte[bpr];", "+\t\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\t\tOS.memmove(line, data + (y * bpr), bpr);", "+\t\t\t\t\tint offset = 0;", "+\t\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\t\t\tint red = line[offset+1] & 0xFF;", "+\t\t\t\t\t\tint green = line[offset+2] & 0xFF;", "+\t\t\t\t\t\tint blue = line[offset+3] & 0xFF;", "+\t\t\t\t\t\tint intensity = red * red + green * green + blue * blue;", "+\t\t\t\t\t\tif (intensity < 98304) {", "+\t\t\t\t\t\t\tline[offset+1] = zeroRed;", "+\t\t\t\t\t\t\tline[offset+2] = zeroGreen;", "+\t\t\t\t\t\t\tline[offset+3] = zeroBlue;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tline[offset+1] = oneRed;", "+\t\t\t\t\t\t\tline[offset+2] = oneGreen;", "+\t\t\t\t\t\t\tline[offset+3] = oneBlue;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\toffset += 4;", "-\t\t\t\t\toffset += 4;", "+\t\t\t\t\tOS.memmove(data + (y * bpr), line, bpr);", "-\t\t\t\tOS.memmove(data + (y * bpr), line, bpr);", "+\t\t\t\tbreak;", "-\t\t\tbreak;", "-\t\t}", "-\t\tcase SWT.IMAGE_GRAY: {\t\t\t", "-\t\t\tbyte[] line = new byte[bpr];", "-\t\t\tfor (int y=0; y<height; y++) {", "-\t\t\t\tOS.memmove(line, data + (y * bpr), bpr);", "-\t\t\t\tint offset = 0;", "-\t\t\t\tfor (int x=0; x<width; x++) {", "-\t\t\t\t\tint red = line[offset+1] & 0xFF;", "-\t\t\t\t\tint green = line[offset+2] & 0xFF;", "-\t\t\t\t\tint blue = line[offset+3] & 0xFF;", "-\t\t\t\t\tbyte intensity = (byte)((red+red+green+green+green+green+green+blue) >> 3);", "-\t\t\t\t\tline[offset+1] = line[offset+2] = line[offset+3] = intensity;", "-\t\t\t\t\toffset += 4;", "+\t\t\tcase SWT.IMAGE_GRAY: {\t\t\t", "+\t\t\t\tbyte[] line = new byte[bpr];", "+\t\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\t\tOS.memmove(line, data + (y * bpr), bpr);", "+\t\t\t\t\tint offset = 0;", "+\t\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\t\t\tint red = line[offset+1] & 0xFF;", "+\t\t\t\t\t\tint green = line[offset+2] & 0xFF;", "+\t\t\t\t\t\tint blue = line[offset+3] & 0xFF;", "+\t\t\t\t\t\tbyte intensity = (byte)((red+red+green+green+green+green+green+blue) >> 3);", "+\t\t\t\t\t\tline[offset+1] = line[offset+2] = line[offset+3] = intensity;", "+\t\t\t\t\t\toffset += 4;", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.memmove(data + (y * bpr), line, bpr);", "-\t\t\t\tOS.memmove(data + (y * bpr), line, bpr);", "+\t\t\t\tbreak;", "-\t\t\tbreak;", "+\tinit();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eff3f1782a8c6c1c8e8682d44d0e892c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "21541d1c7be3bc786f754e0d8604695c158056de", "commitAfterChange": "4e877ff6e374c0eac9d6ca011beec9646167b530", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Image(Device device, Image srcImage, int flag)", "signatureAfterChange": " public Image(Device device, Image srcImage, int flag)", "diff": ["-\tif (device == null) device = Device.getDevice();", "-\tif (device == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+\tsuper(device);", "-\tthis.device = device;", "+\tdevice = this.device;", "-\t\tif (device.tracking) device.new_Object(this);", "-\t\treturn;", "-\t}", "+\t} else {", "+\t\t", "+\t\t/* Retrieve the source pixmap data */", "+\t\tint /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);", "+\t\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tint /*long*/ colormap = OS.gdk_colormap_get_system();", "+\t\tOS.gdk_pixbuf_get_from_drawable(pixbuf, srcImage.pixmap, colormap, 0, 0, 0, 0, width, height);", "+\t\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "+\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "-\t/* Retrieve the source pixmap data */", "-\tint /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);", "-\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tint /*long*/ colormap = OS.gdk_colormap_get_system();", "-\tOS.gdk_pixbuf_get_from_drawable(pixbuf, srcImage.pixmap, colormap, 0, 0, 0, 0, width, height);", "-\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "-\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "-", "-\t/* Apply transformation */", "-\tswitch (flag) {", "-\t\tcase SWT.IMAGE_DISABLE: {", "-\t\t\tColor zeroColor = device.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);", "-\t\t\tRGB zeroRGB = zeroColor.getRGB();", "-\t\t\tbyte zeroRed = (byte)zeroRGB.red;", "-\t\t\tbyte zeroGreen = (byte)zeroRGB.green;", "-\t\t\tbyte zeroBlue = (byte)zeroRGB.blue;", "-\t\t\tColor oneColor = device.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);", "-\t\t\tRGB oneRGB = oneColor.getRGB();", "-\t\t\tbyte oneRed = (byte)oneRGB.red;", "-\t\t\tbyte oneGreen = (byte)oneRGB.green;", "-\t\t\tbyte oneBlue = (byte)oneRGB.blue;", "-\t\t\tbyte[] line = new byte[stride];", "-\t\t\tfor (int y=0; y<height; y++) {", "-\t\t\t\tOS.memmove(line, pixels + (y * stride), stride);", "-\t\t\t\tfor (int x=0; x<width; x++) {", "-\t\t\t\t\tint offset = x*3;", "-\t\t\t\t\tint red = line[offset] & 0xFF;", "-\t\t\t\t\tint green = line[offset+1] & 0xFF;", "-\t\t\t\t\tint blue = line[offset+2] & 0xFF;", "-\t\t\t\t\tint intensity = red * red + green * green + blue * blue;", "-\t\t\t\t\tif (intensity < 98304) {", "-\t\t\t\t\t\tline[offset] = zeroRed;", "-\t\t\t\t\t\tline[offset+1] = zeroGreen;", "-\t\t\t\t\t\tline[offset+2] = zeroBlue;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tline[offset] = oneRed;", "-\t\t\t\t\t\tline[offset+1] = oneGreen;", "-\t\t\t\t\t\tline[offset+2] = oneBlue;", "+\t\t/* Apply transformation */", "+\t\tswitch (flag) {", "+\t\t\tcase SWT.IMAGE_DISABLE: {", "+\t\t\t\tColor zeroColor = device.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);", "+\t\t\t\tRGB zeroRGB = zeroColor.getRGB();", "+\t\t\t\tbyte zeroRed = (byte)zeroRGB.red;", "+\t\t\t\tbyte zeroGreen = (byte)zeroRGB.green;", "+\t\t\t\tbyte zeroBlue = (byte)zeroRGB.blue;", "+\t\t\t\tColor oneColor = device.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);", "+\t\t\t\tRGB oneRGB = oneColor.getRGB();", "+\t\t\t\tbyte oneRed = (byte)oneRGB.red;", "+\t\t\t\tbyte oneGreen = (byte)oneRGB.green;", "+\t\t\t\tbyte oneBlue = (byte)oneRGB.blue;", "+\t\t\t\tbyte[] line = new byte[stride];", "+\t\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\t\tOS.memmove(line, pixels + (y * stride), stride);", "+\t\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\t\t\tint offset = x*3;", "+\t\t\t\t\t\tint red = line[offset] & 0xFF;", "+\t\t\t\t\t\tint green = line[offset+1] & 0xFF;", "+\t\t\t\t\t\tint blue = line[offset+2] & 0xFF;", "+\t\t\t\t\t\tint intensity = red * red + green * green + blue * blue;", "+\t\t\t\t\t\tif (intensity < 98304) {", "+\t\t\t\t\t\t\tline[offset] = zeroRed;", "+\t\t\t\t\t\t\tline[offset+1] = zeroGreen;", "+\t\t\t\t\t\t\tline[offset+2] = zeroBlue;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tline[offset] = oneRed;", "+\t\t\t\t\t\t\tline[offset+1] = oneGreen;", "+\t\t\t\t\t\t\tline[offset+2] = oneBlue;", "+\t\t\t\t\t\t}", "+\t\t\t\t\tOS.memmove(pixels + (y * stride), line, stride);", "-\t\t\t\tOS.memmove(pixels + (y * stride), line, stride);", "+\t\t\t\tbreak;", "-\t\t\tbreak;", "-\t\t}", "-\t\tcase SWT.IMAGE_GRAY: {\t\t\t", "-\t\t\tbyte[] line = new byte[stride];", "-\t\t\tfor (int y=0; y<height; y++) {", "-\t\t\t\tOS.memmove(line, pixels + (y * stride), stride);", "-\t\t\t\tfor (int x=0; x<width; x++) {", "-\t\t\t\t\tint offset = x*3;", "-\t\t\t\t\tint red = line[offset] & 0xFF;", "-\t\t\t\t\tint green = line[offset+1] & 0xFF;", "-\t\t\t\t\tint blue = line[offset+2] & 0xFF;", "-\t\t\t\t\tbyte intensity = (byte)((red+red+green+green+green+green+green+blue) >> 3);", "-\t\t\t\t\tline[offset] = line[offset+1] = line[offset+2] = intensity;", "+\t\t\tcase SWT.IMAGE_GRAY: {\t\t\t", "+\t\t\t\tbyte[] line = new byte[stride];", "+\t\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\t\tOS.memmove(line, pixels + (y * stride), stride);", "+\t\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\t\t\tint offset = x*3;", "+\t\t\t\t\t\tint red = line[offset] & 0xFF;", "+\t\t\t\t\t\tint green = line[offset+1] & 0xFF;", "+\t\t\t\t\t\tint blue = line[offset+2] & 0xFF;", "+\t\t\t\t\t\tbyte intensity = (byte)((red+red+green+green+green+green+green+blue) >> 3);", "+\t\t\t\t\t\tline[offset] = line[offset+1] = line[offset+2] = intensity;", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.memmove(pixels + (y * stride), line, stride);", "-\t\t\t\tOS.memmove(pixels + (y * stride), line, stride);", "+\t\t\t\tbreak;", "-\t\t\tbreak;", "-\t}", "-", "-\t/* Copy data back to destination pixmap */", "-\tOS.gdk_pixbuf_render_to_drawable(pixbuf, pixmap, gdkGC, 0, 0, 0, 0, width, height, OS.GDK_RGB_DITHER_NORMAL, 0, 0);", "-\t/* Free resources */", "-\tOS.g_object_unref(pixbuf);", "-\tOS.g_object_unref(gdkGC);", "-\tif (device.tracking) device.new_Object(this);", "+\t\t/* Copy data back to destination pixmap */", "+\t\tOS.gdk_pixbuf_render_to_drawable(pixbuf, pixmap, gdkGC, 0, 0, 0, 0, width, height, OS.GDK_RGB_DITHER_NORMAL, 0, 0);", "+\t\t", "+\t\t/* Free resources */", "+\t\tOS.g_object_unref(pixbuf);", "+\t\tOS.g_object_unref(gdkGC);", "+\t}", "+\tinit();"]}], "num": 39299}
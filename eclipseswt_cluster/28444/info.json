{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0fecac0de0d8905bf5fbd192f80c90b3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7234ad28a83a6101a3fe2519a35d13cb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple)", "signatureAfterChange": " void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple)", "diff": ["-\tRect bounds= new Rect();", "-\tOS.GetPixBounds(srcImage.pixmap, bounds);", "- \tint imgWidth = bounds.right - bounds.left;", "- \tint imgHeight = bounds.bottom - bounds.top;", "+\tMacRect bounds= new MacRect();", "+\tOS.GetPixBounds(srcImage.pixmap, bounds.getData());", "+ \tint imgWidth = bounds.getWidth();", "+ \tint imgHeight = bounds.getHeight();", "-\t\t\tRect ib= new Rect();", "-\t\t\tib.left= (short)srcX; ib.top= (short)srcY;", "-\t\t\tib.right= (short)(srcX + srcWidth); ib.bottom= (short)(srcY + srcHeight);", "-\t\t\t", "-\t\t\tRect rect= new Rect();", "-\t\t\trect.left= (short)destX; rect.top= (short)destY;", "-\t\t\trect.right= (short)(destX + destWidth); rect.bottom= (short)(destY + destHeight);", "-\t\t\t", "-\t\t\tRGBColor color = new RGBColor();", "-\t\t\tcolor.red = (short)0xFFFF;", "-\t\t\tcolor.green = (short)0xFFFF;", "-\t\t\tcolor.blue = (short)0xFFFF;", "-\t\t\tOS.RGBBackColor(color);", "-\t\t\tcolor.red = (short)0x0000;", "-\t\t\tcolor.green = (short)0x0000;", "-\t\t\tcolor.blue = (short)0x0000;", "-\t\t\tOS.RGBForeColor(color);", "+\t\t\tMacRect ib= new MacRect(srcX, srcY, srcWidth, srcHeight);", "+\t\t\tfRect.set(destX, destY, destWidth, destHeight);", "+\t\t", "+\t\t\tOS.RGBBackColor((short)0xFFFF, (short)0xFFFF, (short)0xFFFF);", "+\t\t\tOS.RGBForeColor((short)0x0000, (short)0x0000, (short)0x0000);", "-\t\t\t\t\tOS.CopyBits(srcBits, destBits, ib, rect, (short)0, 0);", "+\t\t\t\t\tOS.CopyBits(srcBits, destBits, ib.getData(), fRect.getData(), (short)0, 0);", "-\t\t\t\t\tint rc= OS.CopyMask(srcBits, maskBits, destBits, ib, ib, rect);", "-\t\t\t\t\tif (rc != OS.noErr)", "+\t\t\t\t\tint rc= OS.CopyMask(srcBits, maskBits, destBits, ib.getData(), ib.getData(), fRect.getData());", "+\t\t\t\t\tif (rc != OS.kNoErr)", "-\t\t\t\tOS.CopyBits(srcBits, destBits, ib, rect, (short)0, 0);", "+\t\t\t\tOS.CopyBits(srcBits, destBits, ib.getData(), fRect.getData(), (short)0, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e34fa5340ed2f18cd2bd748c80cfb4b5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": " int processPaint (Object callData)", "signatureAfterChange": " int processPaint (Object callData)", "diff": ["-\t", "+", "-\t\treturn OS.noErr;", "+\t\treturn 0;", "-\tRect bounds= new Rect();", "-\tOS.GetControlBounds(handle, bounds);", "-\tint width= bounds.right - bounds.left;", "-\tint height= bounds.bottom - bounds.top;", "-\tOS.SetRect(bounds, (short)0, (short)0, (short)width, (short)height);", "+\tMacRect bounds= new MacRect();", "+\tOS.GetControlBounds(handle, bounds.getData());", "+\tbounds.setLocation(0, 0);", "+\t", "+\tint width= bounds.getWidth();", "+\tint height= bounds.getHeight();", "-\t\t\tint port= OS.GetWindowPort(OS.GetControlOwner(handle));", "-\t\t\tif (port == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\treturn port;", "+\t\t\treturn OS.GetWindowPort(OS.GetControlOwner(handle));", "-\tMacControlEvent me= (MacControlEvent) callData;", "-\tRectangle r= gc.carbon_focus(me.getDamageRegionHandle(), me.getGCContext());", "+\tMacControlEvent me= (MacControlEvent) callData;", "+\tRectangle r= gc.carbon_focus(me.getDamageRegionHandle());", "-", "+\t\t", "-\t\t\tOS.DrawThemeSeparator(bounds, OS.kThemeStateActive);", "+\t\t\tOS.DrawThemeSeparator(bounds.getData(), OS.kThemeStateActive);", "-\t\t\tThemeButtonDrawInfo newInfo= new ThemeButtonDrawInfo();", "-\t\t\tnewInfo.value= (short)(set ? OS.kThemeButtonOn : OS.kThemeButtonOff);", "+\t\t\tshort[] newInfo= new short[3];", "+\t\t\t\t\t", "+\t\t\tnewInfo[1]= set ? OS.kThemeButtonOn : OS.kThemeButtonOff;", "-\t\t\t\t\tnewInfo.state= (short)(OS.StillDown() ? OS.kThemeStatePressed : OS.kThemeStateActive);", "-\t\t\t\t} else {", "+\t\t\t\t\tif (OS.StillDown())", "+\t\t\t\t\t\tnewInfo[0]= OS.kThemeStatePressed;", "+\t\t\t\t\telse", "+\t\t\t\t\t\tnewInfo[0]= OS.kThemeStateActive;", "+\t\t\t\t} else", "-\t\t\t\t}", "-\t\t\t\tnewInfo.state= (short)((hasCursor && OS.StillDown()) ? OS.kThemeStatePressed : OS.kThemeStateActive);", "+\t\t\t\tnewInfo[0]= (hasCursor && OS.StillDown()) ? OS.kThemeStatePressed : OS.kThemeStateActive;", "-\t\t\t\tRect b= new Rect();", "-\t\t\t\tOS.SetRect(b, (short)1, (short)1, (short)(width-1), (short)(height-1));", "-\t\t\t\tOS.DrawThemeButton(b, (short)OS.kThemeSmallBevelButton, newInfo, null, 0, 0, 0);", "+\t\t\t\tMacRect b= new MacRect(1, 1, width-2, height-2);", "+\t\t\t\tOS.DrawThemeButton(b.getData(), OS.kThemeSmallBevelButton, newInfo, fPrevInfo, 0, 0, 0);", "+\t\t\tfPrevInfo= newInfo;", "-\treturn OS.noErr;", "+\treturn 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "745737fb00188982d6ad05b9271a55b5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 63, "signatureBeforeChange": " void showToolTip (int handle, String toolTipText)", "signatureAfterChange": " void showToolTip (int handle, String toolTipText)", "diff": ["-\torg.eclipse.swt.internal.carbon.Point loc= new org.eclipse.swt.internal.carbon.Point();", "-\tOS.GetGlobalMouse(loc);", "-\tint x= loc.h + 16;", "-\tint y= loc.v + 16;", "+\tMacPoint loc= new MacPoint();", "+\tOS.GetGlobalMouse(loc.getData());", "+\tint x= loc.getX() + 16;", "+\tint y= loc.getY() + 16;", "-\tRect screenBounds= new Rect();", "-\tOS.GetAvailableWindowPositioningBounds(OS.GetMainDevice(), screenBounds);", "-\tx = Math.max (0, Math.min (x, screenBounds.right - screenBounds.left - width ));", "-\ty = Math.max (0, Math.min (y, screenBounds.bottom - screenBounds.top - height ));", "+\tMacRect screenBounds= new MacRect();", "+\tOS.GetAvailableWindowPositioningBounds(OS.GetMainDevice(), screenBounds.getData());", "+\tx = Math.max (0, Math.min (x, screenBounds.getWidth() - width ));", "+\ty = Math.max (0, Math.min (y, screenBounds.getHeight() - height ));", "-\tRect rect = new Rect();", "-\trect.left = (short)x;", "-\trect.top = (short)y;", "-\trect.right = (short)(x + width);", "-\trect.bottom = (short)(y + height);", "-\tif (OS.CreateNewWindow(OS.kHelpWindowClass, 0, rect, wHandle) == OS.noErr) {", "+\tif (OS.CreateNewWindow(OS.kHelpWindowClass, 0, new MacRect(x, y, width, height).getData(), wHandle) == OS.kNoErr) {", "-\t\tint[] refHandler= new int[1];", "-\t\tOS.InstallEventHandler(OS.GetWindowEventTarget(toolTipWindowHandle), fTooltipWindowProc,", "-\t\t\t\t\t\tmask.length / 2, mask, toolTipWindowHandle, refHandler);", "-\t\tfToolTipRefHandler= refHandler[0];", "+\t\tOS.InstallEventHandler(OS.GetWindowEventTarget(toolTipWindowHandle), fWindowProc, mask, toolTipWindowHandle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0dc09eacb948e079456bc0b38cdddc7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " \t \tprivate boolean focus(boolean doClip, Rect bounds)", "signatureAfterChange": "  \tprivate boolean focus(boolean doClip, MacRect bounds)", "diff": ["-\t", "-\tprivate boolean focus(boolean doClip, Rect bounds) {", "+", "+\tprivate boolean focus(boolean doClip, MacRect bounds) {", "-\t\tif (data.isFocused && !data.pendingClip) {", "+\t\tif (fIsFocused && !fPendingClip) {", "-\t\tOS.GetGWorld(data.savePort, data.saveGWorld);\t\t", "-\t\tOS.SetGWorld(handle, data.saveGWorld[0]);", "+\t\tOS.GetGWorld(fSavePort, fSaveGWorld);\t\t", "+\t\tOS.SetGWorld(handle, fSaveGWorld[0]);", "-\t\t\tRect r= new Rect();", "-\t\t\tMacUtil.getControlBounds(data.controlHandle, r);", "-\t\t\tdx= r.left;", "-\t\t\tdy= r.top;", "+\t\t\tOS.GetControlBounds(data.controlHandle, fRect.getData());", "+\t\t\tdx= fRect.getX();", "+\t\t\tdy= fRect.getY();", "-\t\t\torg.eclipse.swt.internal.carbon.Point p= new org.eclipse.swt.internal.carbon.Point();", "-\t\t\tp.h= (short)-dx;", "-\t\t\tp.v= (short)-dy;", "-\t\t\tOS.QDSetPatternOrigin(p);", "+\t\t\tMacPoint p= new MacPoint(-dx, -dy);", "+\t\t\tOS.QDSetPatternOrigin(p.getData());", "-\t\tif (data.saveClip == 0)", "-\t\t\tdata.saveClip= OS.NewRgn();", "-\t\tOS.GetClip(data.saveClip);", "+\t\tOS.GetClip(fSaveClip);", "-\t\t// calculate new clip based on the Control's bound and GC clipping region", "+\t\t// calculate new clip based on the controls bound and GC clipping region", "-\t\t\t\t\t\t", "-\t\t\tint result= OS.NewRgn();", "-\t\t\tif (data.damageRgn == 0) {", "-\t\t\t\t// since we've got no damage region", "-\t\t\t\t// we assume that focus has been called for direct drawing.", "-\t\t\t\t// We need to calculate the visible region of the control.", "-\t\t\t\tMacUtil.getVisibleRegion(data.controlHandle, result, data.clipAgainstChildren); ", "-\t\t\t\tOS.OffsetRgn(result, (short)-dx, (short)-dy);", "-\t\t\t} else {", "-\t\t\t\t// the damage area takes the visible region of the Control into account", "-\t\t\t\tOS.CopyRgn(data.damageRgn, result);", "+\t\t\tint result= OS.NewRgn();", "+\t\t\tMacUtil.getVisibleRegion(data.controlHandle, result, true);", "+\t\t\tOS.OffsetRgn(result, (short)-dx, (short)-dy);", "+", "+\t\t\t// clip against damage ", "+\t\t\tif (fDamageRgn != 0) {", "+\t\t\t\tint dRgn= OS.NewRgn();", "+\t\t\t\tOS.CopyRgn(fDamageRgn, dRgn);", "+\t\t\t\tOS.OffsetRgn(dRgn, (short)-dx, (short)-dy);", "+\t\t\t\tOS.SectRgn(result, dRgn, result);", "-\t\t\tif (data.clipRgn != 0)", "+\t\t\tif (data.clipRgn != 0) {", "+\t\t\t}", "-\t\t\t", "-\t\t\t// optionally extract clip bounds", "-\t\t\t\tOS.GetRegionBounds(result, bounds);", "-\t\t\t\t", "+\t\t\t\tOS.GetRegionBounds(result, bounds.getData());", "-\t\t\t\t\tOS.GetRegionBounds(data.clipRgn, bounds);", "+\t\t\t\t\tOS.GetRegionBounds(data.clipRgn, bounds.getData());", "-\t\t\t\t\tOS.SetRect(bounds, (short)0, (short)0, (short)0x7fff, (short)0x7fff);", "+\t\t\t\t\tbounds.set(0, 0, 0x8fff, 0x8fff);", "-\t\tdata.pendingClip= false;", "+\t\tfPendingClip= false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c1377d1f7260505c668c274691c516a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " \t \tprivate void drawFrame(int damageRegion)", "signatureAfterChange": " \t \tprivate void drawFrame(Object callData)", "diff": ["-\tprivate void drawFrame(int damageRegion) {", "+\tprivate void drawFrame(Object callData) {", "-\t\tGC gc= new GC(this);\t\t", "-\t\tRectangle r= gc.carbon_focus(damageRegion);", "-\t\tif (!r.isEmpty()) {", "-\t\t\tRect bounds= new Rect();", "-\t\t\tOS.GetControlBounds(handle, bounds);", "-\t\t\tOS.SetRect(bounds, (short)0, (short)0, (short)(bounds.right - bounds.left), (short)(bounds.bottom - bounds.top));", "-\t\t\tint m= FOCUS_BORDER;", "-\t\t\tbounds.left+= m;", "-\t\t\tbounds.top+= m;", "-\t\t\tbounds.right-= m;", "-\t\t\tbounds.bottom-= m+1;", "-\t\t\t", "-\t\t\tRect fbounds= new Rect();", "-\t\t\tOS.GetControlBounds(handle, fbounds);", "-\t\t\tOS.SetRect(fbounds, (short)0, (short)0, (short)(fbounds.right - fbounds.left), (short)(fbounds.bottom - fbounds.top));", "-\t\t\tint fm= FOCUS_BORDER;", "-\t\t\tfbounds.left+= fm;", "-\t\t\tfbounds.top+= fm+1;", "-\t\t\tfbounds.right-= fm;", "-\t\t\tfbounds.bottom-= fm+1;", "-\t\t\t", "-\t\t\tif ((style & SWT.READ_ONLY) == 0) {", "-\t\t\t\tif (getDisplay().getFocusControl() == this) {", "-\t\t\t\t\tOS.DrawThemeEditTextFrame(bounds, OS.kThemeStateActive);", "-\t\t\t\t\tOS.DrawThemeFocusRect(fbounds, true);", "+\t\tGC gc= new GC(this);", "+\t\tint damageRegion= 0;", "+\t\tif (callData instanceof MacControlEvent)", "+\t\t\tdamageRegion= ((MacControlEvent)callData).getDamageRegionHandle();", "+\t\ttry {", "+\t\t\tRectangle r= gc.carbon_focus(damageRegion);", "+\t\t\tif (!r.isEmpty()) {", "+\t\t\t\tMacRect bounds= new MacRect();", "+\t\t\t\tOS.GetControlBounds(handle, bounds.getData());", "+\t\t\t\tbounds.setLocation(0, 0);", "+\t\t\t\tint m= FOCUS_BORDER;", "+\t\t\t\tbounds.inset(m, m, m, m+1);", "+\t\t\t\t", "+\t\t\t\tMacRect fbounds= new MacRect();", "+\t\t\t\tOS.GetControlBounds(handle, fbounds.getData());", "+\t\t\t\tfbounds.setLocation(0, 0);", "+\t\t\t\tint fm= FOCUS_BORDER;", "+\t\t\t\tfbounds.inset(fm, fm+1, fm, fm+1);", "+\t\t\t\t", "+\t\t\t\t", "+\t\t\t\tif ((style & SWT.READ_ONLY) == 0) {", "+\t\t\t\t\tif (getDisplay().getFocusControl() == this) {", "+\t\t\t\t\t\tOS.DrawThemeEditTextFrame(bounds.getData(), OS.kThemeStateActive);", "+\t\t\t\t\t\tOS.DrawThemeFocusRect(fbounds.getData(), true);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tOS.DrawThemeFocusRect(fbounds.getData(), false);", "+\t\t\t\t\t\tOS.DrawThemeEditTextFrame(bounds.getData(), OS.kThemeStateActive);", "+\t\t\t\t\t}", "-\t\t\t\t\tOS.DrawThemeFocusRect(fbounds, false);", "-\t\t\t\t\tOS.DrawThemeEditTextFrame(bounds, OS.kThemeStateActive);", "+\t\t\t\t\tOS.DrawThemeEditTextFrame(bounds.getData(), OS.kThemeStateActive);", "-\t\t\t} else {", "-\t\t\t\tOS.DrawThemeEditTextFrame(bounds, OS.kThemeStateActive);", "+\t\t\t\t", "-\t\t\t", "+\t\t} finally {", "+\t\t\tgc.carbon_unfocus();", "-\t\tgc.carbon_unfocus();", "-\t\trevealBeginning();", "+\t\tshowBeginning();"]}], "num": 28444}
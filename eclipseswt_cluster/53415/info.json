{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94dce7ee437fedc1b59183e55063bd04", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ae10aefe7ceb01aa1ae137a1a43be428", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "c53e2b63fa7a9c733204725abd2e8529aad3827d", "commitAfterChange": "91bf69e39d5953c1dbfa01dee3b55c5c62a41e78", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": " \t\t \tprivate int handleMouseCallback(int nextHandler, int eRefHandle, int whichWindow)", "signatureAfterChange": " \t\t \tprivate int handleMouseCallback(int nextHandler, int eRefHandle, int whichWindow)", "diff": ["-\t\t\t\tint ww= OS.GetControlOwner(fTrackedControl);", "-\t\t\t\tint[] w= new int[1];", "-\t\t\t\tint rc= OS.GetEventParameter(eRefHandle, OS.kEventParamWindowRef, OS.typeWindowRef, null, 4, null, w);", "-\t\t\t\tif (rc == OS.noErr)", "-\t\t\t\t\twhichWindow= w[0];", "-\t\t\t\tif (whichWindow != ww)", "-\t\t\t\t\tSystem.out.println(\"Display.handleMouseEvent:  oops\");", "+\t\t\t\twhichWindow= OS.GetControlOwner(fTrackedControl);", "-\t\t\tif (fTrackedControl != 0) {", "+\t\t\tif (fTrackedControl != 0) {\t// continue mouse tracking", "-\t\t\t\tfTrackedControl= 0;", "+\t\t\t\tfTrackedControl= 0;\t\t// continue mouse tracking"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d88e1972b36ca35bb4cf53815742071", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "3fa10aec500a4081c70ceb9a57998af702891944", "commitAfterChange": "a84c4f3464a5f713e18d5891323717c2051b011d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "  static long invokeFunction (int functionId, long tokenVariant, long args)", "signatureAfterChange": "  static long invokeFunction (int functionId, long tokenVariant, long args)", "diff": ["-\t\t\tshort[] type = new short[1]; /* PRUint16 */", "-\t\t\tint rc = variant.GetDataType (type);", "-\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\tObject temp = convertToJava (variant, type[0]);", "-\t\t\ttype[0] = 0;", "+\t\t\tObject temp = convertToJava (variant);", "-\t\t\t\t\trc = variant.GetDataType (type);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\t\t\ttemp = convertToJava (variant, type[0]);", "+\t\t\t\t\ttemp = convertToJava (variant);"]}], "num": 53415}
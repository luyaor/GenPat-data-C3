{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a68ab2e5339cf04098dcb4f486632a32", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59fcfc35df9a352ea648c2343691f13d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "34bb16e15a880bd108a2eaf728d01fe5fdbf9c64", "commitAfterChange": "69244aab01ed0a8f7e0ccdb7583f91733ebf5c15", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 11, "signatureBeforeChange": " public boolean open ()", "signatureAfterChange": " public boolean open ()", "diff": ["-\tboolean cancelled=false;", "+\tint window = OS.GDK_ROOT_PARENT ();", "+\tif (parent != null) {", "+\t\twindow = OS.GTK_WIDGET_WINDOW (parent.paintHandle());", "+\t} ", "+\tif (window == 0) return false;", "+\tboolean cancelled = false;", "+\tint [] oldX = new int [1], oldY = new int [1], state = new int [1];", "+\tOS.gdk_window_get_pointer (window, oldX, oldY, state);", "-\tint[] newX = new int[1];", "-\tint[] newY = new int[1];", "-\tint[] oldX = new int[1];", "-\tint[] oldY = new int[1];", "-\tOS.gdk_window_get_pointer(xWindow, oldX,oldY, null);", "-\tgrab();", "-\t", "-\t// if exactly one of UP/DOWN is specified as a style then set the cursor", "-\t// orientation accordingly (the same is done for LEFT/RIGHT styles below)", "+\t/*", "+\t* if exactly one of UP/DOWN is specified as a style then set the cursor", "+\t* orientation accordingly (the same is done for LEFT/RIGHT styles below)", "+\t*/", "+\tPoint cursorPos;", "+\tint mask = OS.GDK_BUTTON1_MASK | OS.GDK_BUTTON2_MASK | OS.GDK_BUTTON3_MASK; ", "+\tboolean mouseDown = (state [0] & mask) != 0;", "+\t/*", "+\t * The following is intentionally commented.  Since gtk does not currently", "+\t * support pointer warping, the resize cursor cannot be adjusted.  If this", "+\t * capability is added in the future then the following should be uncommented,", "+\t * and the #adjustResizeCursor method can be copied from another platform.", "+\t */", "+//\tif (!mouseDown) {", "+//\t\tif ((style & SWT.RESIZE) != 0) {", "+//\t\t\tcursorPos = adjustResizeCursor (xDisplay, xWindow);", "+//\t\t} else {", "+//\t\t\tcursorPos = adjustMoveCursor (xDisplay, xWindow);", "+//\t\t}", "+//\t\toldX [0] = cursorPos.x;  oldY [0] = cursorPos.y;", "+//\t}", "+\t", "+\tGdkEvent gdkEvent = new GdkEvent();", "+\tGdkEventKey keyEvent = new GdkEventKey ();", "+\tint [] newX = new int [1], newY = new int [1];", "+\tint grabMask = OS.GDK_POINTER_MOTION_MASK | OS.GDK_BUTTON_RELEASE_MASK;", "+\tint ptrGrabResult = OS.gdk_pointer_grab (window, false, grabMask, window, cursor, OS.GDK_CURRENT_TIME);", "+\tlastCursor = cursor;", "+", "-\t\t// wait for an event\t\t", "-\t\t\teventPtr = OS.gdk_event_get();", "+\t\t\teventPtr = OS.gdk_event_get ();", "-\t\t\t} ", "-\t\t\telse {", "+\t\t\t} else {", "-", "-\t\tGdkEvent osEvent = new GdkEvent();", "-\t\tOS.memmove(osEvent, eventPtr, GdkEvent.sizeof);", "-\t\tint eventType = osEvent.type;", "+\t\tOS.memmove (gdkEvent, eventPtr, GdkEvent.sizeof);", "+\t\tint eventType = gdkEvent.type;", "-\t\t\tcase OS.GDK_BUTTON_RELEASE:", "-\t\t\t\t\tungrab();", "-\t\t\t\t\tgrab();", "+\t\t\t\t\tif (ptrGrabResult == OS.GDK_GRAB_SUCCESS) OS.gdk_pointer_ungrab (OS.GDK_CURRENT_TIME);", "+\t\t\t\t\tptrGrabResult = OS.gdk_pointer_grab (window, false, grabMask, window, cursor, OS.GDK_CURRENT_TIME);", "-\t\t\t\tOS.gdk_window_get_pointer(xWindow, newX,newY, null);", "+\t\t\t\t// fall through", "+\t\t\tcase OS.GDK_BUTTON_RELEASE:", "+\t\t\t\tOS.gdk_window_get_pointer (window, newX,newY, null);", "-\t\t\t\t\t\tungrab ();", "-\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\tcancelled = true;", "+\t\t\t\t\t\tbreak;", "-\t\t\t\ttracking = (eventType != OS.GDK_BUTTON_RELEASE);", "+\t\t\t\ttracking = eventType != OS.GDK_BUTTON_RELEASE;", "-\t\t\t\tGdkEventKey gdkEvent = new GdkEventKey ();", "-\t\t\t\tOS.memmove (gdkEvent, eventPtr, GdkEventKey.sizeof);", "-\t\t\t\tint stepSize = ((gdkEvent.state & OS.GDK_CONTROL_MASK) != 0) ? STEPSIZE_SMALL : STEPSIZE_LARGE;", "+\t\t\t\tOS.memmove (keyEvent, eventPtr, GdkEventKey.sizeof);", "+\t\t\t\tint stepSize = ((keyEvent.state & OS.GDK_CONTROL_MASK) != 0) ? STEPSIZE_SMALL : STEPSIZE_LARGE;", "-\t\t\t\tswitch (gdkEvent.keyval) {", "+\t\t\t\tswitch (keyEvent.keyval) {", "-\t\t\t\t\t\tungrab ();", "-\t\t\t\t\t\treturn false;", "+\t\t\t\t\t\tcancelled = true;", "+\t\t\t\t\t\tbreak;", "-\t\t\t}  // switch", "-\t\t\tOS.gdk_event_free(eventPtr);", "-\t\t}  // while", "-\tdrawRectangles();", "-\tungrab();", "+\t\t\tdefault:", "+\t\t}", "+\t\tOS.gdk_event_free (eventPtr);", "+\t}", "+\tif (!isDisposed ()) drawRectangles ();", "+\tif (ptrGrabResult == OS.GDK_GRAB_SUCCESS) OS.gdk_pointer_ungrab (OS.GDK_CURRENT_TIME);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ef4dd4f0298d630c371a83fcfbd94a4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextRenderer2.java", "commitBeforeChange": "803af91b2502e0be5abf9c99c3a910ce8743a2fa", "commitAfterChange": "ea7476519b9e21c42e4d4550669901e532bedcab", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " int drawLine(String line, int lineIndex, int paintX, int paintY, GC gc, Color widgetBackground, Color widgetForeground, boolean clearBackground)", "signatureAfterChange": " int drawLine(String line, int lineIndex, int paintX, int paintY, GC gc, Color widgetBackground, Color widgetForeground, boolean clearBackground)", "diff": ["-\tint lineOffset = getContent().getOffsetAtLine(lineIndex);", "+\tif (styledText == null) return 0;", "+\tStyledTextContent content = getContent();", "+\tint lineOffset = content.getOffsetAtLine(lineIndex);", "-\tPoint selection = getSelection();", "+\tPoint selection = styledText.internalGetSelection();", "-\tColor lineBackground = null;", "-\tRectangle client = getClientArea();", "-\tStyledTextEvent event = getLineBackgroundData(lineOffset, line);", "+\tRectangle client = styledText.getClientArea();  ", "+\tStyledTextEvent event = styledText.getLineBackgroundData(lineOffset, line);", "+\tColor lineBackground = null;", "-\t}", "-\t", "+\t}\t", "+\tboolean fullSelection = (styledText.getStyle() & SWT.FULL_SELECTION) != 0;", "-\t\t(!isFullLineSelection() || ", "+\t\t(!fullSelection || ", "-\t\tRectangle rect = layout.getLineBounds(0);", "-\t\tdrawFullLineSelection(line, lineOffset, paintX + rect.x + rect.width, paintY, gc);", "+\t\tint y = paintY;", "+\t\tint[] offsets = layout.getLineOffsets();", "+\t\tint lineCount = layout.getLineCount();", "+\t\tgc.setBackground(styledText.getSelectionBackground());", "+\t\tfor (int i = 0; i < lineCount; i++) {", "+\t\t\tint lineStart = offsets[i];", "+\t\t\tint lineEnd = Math.max(0, offsets[i + 1] - 1);", "+\t\t\tif (lineStart >= selectionEnd - lineOffset) break;", "+\t\t\tRectangle lineBounds = layout.getLineBounds(i);", "+\t\t\tif (selectionStart - lineOffset <= lineEnd && lineEnd < selectionEnd - lineOffset - 1) {", "+\t\t\t\tint x = paintX + lineBounds.x + lineBounds.width;", "+\t\t\t\tif (fullSelection) {", "+\t\t\t\t\tgc.fillRectangle(x, y, client.width - x, lineBounds.height);", "+\t\t\t\t} else {", "+\t\t\t\t\tif (i == lineCount - 1) {", "+\t\t\t\t\t\tgc.fillRectangle(x, y, lineEndSpaceWidth, lineBounds.height);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\ty += lineBounds.height;", "+\t\t}", "-\t\tlayout.draw(gc, paintX, paintY, start, end - 1, getSelectionForeground(), getSelectionBackground());", "+\t\tColor selectionFk = styledText.getSelectionForeground();", "+\t\tColor selectionBk = styledText.getSelectionBackground();", "+\t\tlayout.draw(gc, paintX, paintY, start, end - 1, selectionFk, selectionBk);"]}], "num": 60822}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42fd3d19166e731d6cc4818775cdebd9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "91904a457e7dc46c32e7aa51bedf42c7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "653b1bb7bd49f57477be0c4ae69f99560ca77716", "commitAfterChange": "6858e0619ec4553d451a7613e230f39ae4587066", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 143, "signatureBeforeChange": "  int textInputProc (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int textInputProc (int nextHandler, int theEvent, int userData)", "diff": ["-\t\t\t/* Stop the default event handler from activating the default button */", "-\t\t\tOS.GetWindowDefaultButton (theWindow, theControl);", "-\t\t\tOS.SetWindowDefaultButton (theWindow, 0);", "-\t\t\tint result = widget.textInputProc (nextHandler, theEvent, userData);", "-\t\t\tif (result == OS.eventNotHandledErr) {", "-\t\t\t\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\tMenuTrackingData outData = new MenuTrackingData ();", "+\t\t\tif (OS.GetMenuTrackingData (0, outData) != OS.noErr) {", "+\t\t\t\t/* Stop the default event handler from activating the default button */", "+\t\t\t\tOS.GetWindowDefaultButton (theWindow, theControl);", "+\t\t\t\tOS.SetWindowDefaultButton (theWindow, 0);", "+\t\t\t\tint result = widget.textInputProc (nextHandler, theEvent, userData);", "+\t\t\t\tif (result == OS.eventNotHandledErr) {", "+\t\t\t\t\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\t\t}", "+\t\t\t\tOS.SetWindowDefaultButton (theWindow, theControl [0]);", "+\t\t\t\treturn result;", "-\t\t\tOS.SetWindowDefaultButton (theWindow, theControl [0]);", "-\t\t\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9becbc0dd1297e7e5ba149e4f62a057", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "6e89f26f4d6cf8c990840a7f12e701138a427091", "commitAfterChange": "f668234fdd0d0970ccc5e1be0c9c3474d48930dc", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " \t\t\t \tprivate boolean handleContentClick(MacEvent me, int whichWindow)", "signatureAfterChange": " \t\t\t \tprivate boolean handleContentClick(MacEvent me, int whichWindow)", "diff": ["-\t\t", "-\t\tWidget w= findWidget(whichControl);", "-\t\t//System.out.println(\"  front click: \" + w);", "-\t\t", "-\t\t// activate control", "-\t\t/* AW already done in Control.processMouseDown", "-\t\tWidget w1= findWidget(whichControl);", "-\t\tWidget w2= findWidget(whichWindow);", "-\t\tif (w1 instanceof Control && w2 instanceof Shell) {", "-\t\t\tShell shell= (Shell) w2;", "-\t\t\tshell.setActiveControl((Control) w1);", "-\t\t}", "-\t\t*/", "-\t\t", "+\t\t\t\t\t\t", "-\t\t\t// process the context menu", "+\t\t\t// deal with the context menu", "-\t\t\t\t\thandleContextClick(cm, globalPos, me);", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tfInContextMenu= true;", "+\t\t\t\t\t\t// AW: not ready for primetime", "+\t\t\t\t\t\t// OS.ContextualMenuSelect(cm.handle, globalPos.getData(), new short[1], new short[1]);", "+\t\t\t\t\t\tOS.PopUpMenuSelect(cm.handle, (short)globalPos.getY(), (short)globalPos.getX(), (short)1);", "+\t\t\t\t\t} finally {", "+\t\t\t\t\t\tfInContextMenu= false;", "+\t\t\t\t\t}", "-\t\t\t\t\trepairPending();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e75e64ed6dbd4b9fb4fe898b946c78e0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "accca3b673d3390ae7927f3a41037eac649d871a", "commitAfterChange": "5da35fc3c0cc5b018b8fdd8b0bd681c0c5481f98", "methodNumberBeforeChange": 127, "methodNumberAfterChange": 127, "signatureBeforeChange": "  int textInputProc (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int textInputProc (int nextHandler, int theEvent, int userData)", "diff": ["-\tWidget widget = getWidget (userData);", "-\tif (widget == null) {", "-\t\tint theWindow = OS.GetUserFocusWindow ();", "-\t\tif (theWindow == 0) return OS.eventNotHandledErr;", "+\tint theWindow = OS.GetUserFocusWindow ();", "+\tif (theWindow != 0) {", "-\t\twidget = getWidget (theControl [0]);", "+\t\tWidget widget = getWidget (theControl [0]);", "+\t\tif (widget != null) {", "+\t\t\t/* Stop the default event handler from activating the default button */", "+\t\t\tOS.GetWindowDefaultButton (theWindow, theControl);", "+\t\t\tOS.SetWindowDefaultButton (theWindow, 0);", "+\t\t\tint result = widget.textInputProc (nextHandler, theEvent, userData);", "+\t\t\tif (result == OS.eventNotHandledErr) {", "+\t\t\t\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\t}", "+\t\t\tOS.SetWindowDefaultButton (theWindow, theControl [0]);", "+\t\t\treturn result;", "+\t\t}", "-\tif (widget != null) return widget.textInputProc (nextHandler, theEvent, userData);"]}], "num": 61590}
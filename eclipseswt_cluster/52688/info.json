{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5584af790a914c310562f26c655013fc", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3fc6685d6fa5181576e216300101ec7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "aa5a69fe81e993c5bb9fcff4c9a425715ad470cd", "commitAfterChange": "bf9b442200602eaa6f44a276dfab033f09afe62d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public Rectangle getImageBounds (int index)", "signatureAfterChange": " public Rectangle getImageBounds (int index)", "diff": ["-\tint /*long*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);", "-\tif (list == 0) return new Rectangle (0, 0, 0, 0);", "-\tint count = OS.g_list_length (list);", "-\tint /*long*/ pixbufRenderer = 0;", "-\tint i = 0;", "-\twhile (i < count) {", "-\t\tint /*long*/ renderer = OS.g_list_nth_data (list, i);", "-\t\tif (OS.GTK_IS_CELL_RENDERER_PIXBUF (renderer)) {", "-\t\t\tpixbufRenderer = renderer;", "-\t\t\tbreak;", "-\t\t}", "-\t\ti++;", "-\t}", "-\tOS.g_list_free (list);\t", "+\tint /*long*/ pixbufRenderer = parent.getPixbufRenderer (column);", "+", "+\t/*", "+\t* The OS call gtk_cell_renderer_get_size() provides the width of image to be drawn", "+\t* by the cell renderer.  If there is no image in the cell, the width is zero.  If the table contains", "+\t* images of varying widths, gtk_cell_renderer_get_size() will return the width of the image, ", "+\t* not the width of the area in which the image is drawn.", "+\t* New API was added in GTK 2.1.3 for determining the full width of the renderer area.", "+\t* For earlier versions of GTK, the result is only correct if all rows have images of the same", "+\t* width.", "+\t*/", "+\tif (OS.GTK_VERSION >= OS.VERSION (2, 1, 3)) {", "+\t\tint [] x = new int [1], w = new int[1];", "+\t\tOS.gtk_tree_view_column_cell_get_position (column, pixbufRenderer, x, w);", "+\t\trect.x += x [0];", "+\t\trect.width = w [0];", "+\t} else {", "+\t\tint [] w = new int [1];", "+\t\tOS.gtk_tree_view_column_cell_set_cell_data (column, parent.modelHandle, handle, false, false);", "+\t\tOS.gtk_cell_renderer_get_size (pixbufRenderer, parentHandle, null, null, null, w, null);", "+\t\trect.width = w [0];", "+\t}", "+\t", "-\t/*", "-\t* The OS call gtk_cell_renderer_get_size() provides the width of image to be drawn", "-\t* by the cell renderer.  If there is no image in the cell, the width is zero.  If the table contains", "-\t* images of varying widths, gtk_cell_renderer_get_size() will return the width of the image, ", "-\t* not the width of the area in which the image is drawn.", "-\t* New API was added in GTK 2.1.3 for determining the full width of the renderer area.", "-\t* For earlier versions of GTK, the result is only correct if all rows have images of the same", "-\t* width.", "-\t*/", "-\tint [] w = new int[1];", "-\tif (OS.GTK_VERSION >= OS.VERSION (2, 1, 3)) {", "-\t\tint [] x = new int [1];", "-\t\tOS.gtk_tree_view_column_cell_get_position (column, pixbufRenderer, x, w);", "-\t\trect.x += x [0];", "-\t} else {", "-\t\tOS.gtk_tree_view_column_cell_set_cell_data (column, parent.modelHandle, handle, false, false);", "-\t\tOS.gtk_cell_renderer_get_size (pixbufRenderer, parentHandle, null, null, null, w, null);", "-\t}", "+\t", "-\treturn new Rectangle (rect.x + border, rect.y + headerHeight, w [0], rect.height + 1);", "+\treturn new Rectangle (rect.x + border, rect.y + (headerHeight == 0 ?  border : headerHeight), rect.width, rect.height + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a256b85dc23e1aa64a2426b51148a8d9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "cc7a79cec8920b1b6175a6c2124e7f63a3823262", "commitAfterChange": "d8f34c9ec09bc11f5d7b71293f9d378725f3146c", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": " public Rectangle getBounds ()", "signatureAfterChange": " public Rectangle getBounds ()", "diff": ["+\t// TODO fully test on early and later versions of GTK", "+\t// shifted a bit too far right on later versions of GTK - however, old Tree also had this problem", "+\tif (!parent.checkData (this)) error (SWT.ERROR_WIDGET_DISPOSED);", "-\tGdkRectangle rect = new GdkRectangle ();", "+\tif (column == 0) return new Rectangle (0, 0, 0, 0);", "+\tint /*long*/ textRenderer = parent.getTextRenderer (column);", "+\tint /*long*/ pixbufRenderer = parent.getPixbufRenderer (column);", "+\tif (textRenderer == 0 || pixbufRenderer == 0)  return new Rectangle (0, 0, 0, 0);", "+", "-\tOS.gtk_tree_view_get_cell_area (parentHandle, path, column, rect);", "-\tint [] x = new int [1], width = new int [1];", "-\tOS.gtk_cell_renderer_get_size (parent.textRenderer, parentHandle, null, null, null, width, null);", "-\trect.width = width [0];", "+\t", "+\tGdkRectangle rect = new GdkRectangle ();", "+\tOS.gtk_tree_view_get_cell_area (parentHandle, path, column, rect);", "+\tOS.gtk_tree_path_free (path);", "+", "+\tint [] x = new int [1], w = new int [1];", "+\tOS.gtk_cell_renderer_get_size (textRenderer, parentHandle, null, null, null, w, null);", "+\trect.width = w [0];", "+\t", "-\t\tOS.gtk_tree_view_column_cell_get_position (column, parent.textRenderer, x, null);", "+\t\tOS.gtk_tree_view_column_cell_get_position (column, textRenderer, x, null);", "-\t\t\tOS.gtk_cell_renderer_get_size (parent.checkRenderer, parentHandle, null, null, null, width, null);", "-\t\t\trect.x += width [0] + horizontalSeparator;", "+\t\t\tOS.gtk_cell_renderer_get_size (parent.checkRenderer, parentHandle, null, null, null, w, null);", "+\t\t\trect.x += w [0] + horizontalSeparator;", "-\t\tOS.gtk_cell_renderer_get_size (parent.pixbufRenderer, parentHandle, null, null, null, width, null);", "-\t\trect.x += width [0] + horizontalSeparator;", "+\t\tOS.gtk_cell_renderer_get_size (pixbufRenderer, parentHandle, null, null, null, w, null);", "+\t\trect.x += w [0] + horizontalSeparator;", "-\tint border = parent.getBorderWidth ();", "-\trect.x += border;", "-\trect.y += border;", "-\tOS.gtk_tree_path_free (path);", "-\treturn new Rectangle (rect.x, rect.y, rect.width, rect.height);", "-}\t", "+\t", "+\tint border = parent.getBorderWidth ();", "+\tint headerHeight = parent.getHeaderHeight ();", "+\treturn new Rectangle (rect.x + border, rect.y + (headerHeight == 0 ?  border : headerHeight), rect.width + 1, rect.height + 1);", "+}"]}], "num": 52688}
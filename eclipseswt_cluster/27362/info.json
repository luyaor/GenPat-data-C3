{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f4ad7ea36ad94ec1d6c007c432089424", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24a903aec70ca3c87e20d64186d55b13", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/internal/ImageList.java", "commitBeforeChange": "2958e16615b4d5e0811266d64a0c720c35a392bf", "commitAfterChange": "23a4ae5a01c03d1e89c88b45ce6a00f7b7cfc803", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  void set (int index, Image image, int count)", "signatureAfterChange": "  void set (int index, Image image, int count)", "diff": ["-\t\t\t\t\tif (OS.COMCTL32_MAJOR >= 6) {", "+\t\t\t\t\t/*", "+\t\t\t\t\t * Fully transparent image is rendered as a black image, so such", "+\t\t\t\t\t * image needs to be rendered using ImageData mask approach.", "+\t\t\t\t\t * Refer bug 426247", "+\t\t\t\t\t * ", "+\t\t\t\t\t * TODO: Explore using createMaskFromAlpha() method even", "+\t\t\t\t\t * for newer versions of the COMCTL32 library.", "+\t\t\t\t\t */", "+\t\t\t\t\tboolean fullyTransparent = true;", "+\t\t\t\t\tif (data.alphaData == null) {", "+\t\t\t\t\t\tfullyTransparent = false;", "+\t\t\t\t\t}", "+\t\t\t\t\telse {", "+\t\t\t\t\t\tfor (byte alphaData : data.alphaData) {", "+\t\t\t\t\t\t\tif (alphaData != 0) {", "+\t\t\t\t\t\t\t\tfullyTransparent = false;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (OS.COMCTL32_MAJOR >= 6 && !fullyTransparent) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4877ca53d4d53bec6a98fb68fdd1d286", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "56da45c918466be78880ee6b4d4bdb1082792de2", "commitAfterChange": "0a534e24535b49af95f1fc31d7420b8bcd3720a8", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  void setBounds (int x, int y, int width, int height, int flags, boolean defer)", "signatureAfterChange": "  void setBounds (int x, int y, int width, int height, int flags, boolean defer)", "diff": ["-\t\tif (OS.IsIconic (handle) || OS.IsZoomed (handle)) {", "+\t\tif (OS.IsIconic (handle)) {", "+\tboolean sameOrigin = true;", "-\t\tif (rect.left != x || rect.top != y) {", "-\t\t\tmoved = true;", "-\t\t}", "+\t\tsameOrigin = rect.left == x && rect.top == y;", "+\t\tif (!sameOrigin) moved = true;", "+\tboolean sameExtent = true;", "-\t\tif (rect.right - rect.left != width || rect.bottom - rect.top != height) {", "-\t\t\tresized = true;", "+\t\tsameExtent = rect.right - rect.left == width && rect.bottom - rect.top == height;", "+\t\tif (!sameExtent) resized = true;", "+\t}", "+\tif (!OS.IsWinCE) {", "+\t\tif (OS.IsZoomed (handle)) {", "+\t\t\tif (sameOrigin && sameExtent) return;", "+\t\t\tsetPlacement (x, y, width, height, flags);", "+\t\t\tsetMaximized (false);", "+\t\t\treturn;"]}], "num": 27362}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1beb2a06a92d931e7ba3419a7642b2c8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f903418c0c3f766471d252e7e295650", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/cocoa/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "0a50d92817a0ec852579e15a962a04552ba58310", "commitAfterChange": "5f8c70f9663ba812b07371317d526ce083d22a28", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public static PrinterData[] getPrinterList()", "signatureAfterChange": " public static PrinterData[] getPrinterList()", "diff": ["-\tPrinterData[] result = null;", "-\tint[] printSession = new int[1];", "-\tOS.PMCreateSession(printSession);", "-\tif (printSession[0] != 0) {", "-\t\tint[] printerList = new int[1], currentIndex = new int[1], currentPrinter = new int[1];", "-\t\tOS.PMSessionCreatePrinterList(printSession[0], printerList, currentIndex, currentPrinter);", "-\t\tif (printerList[0] != 0) {", "-\t\t\tint count = OS.CFArrayGetCount(printerList[0]);", "-\t\t\tresult = new PrinterData[count];", "-\t\t\tfor (int i=0; i<count; i++) {", "-\t\t\t\tString name = getString(OS.CFArrayGetValueAtIndex(printerList[0], i));", "-\t\t\t\tresult[i] = new PrinterData(DRIVER, name);", "-\t\t\t}", "-\t\t\tOS.CFRelease(printerList[0]);", "-\t\t}", "-\t\tOS.PMRelease(printSession[0]);", "+\tNSArray printers = NSPrinter.printerNames();", "+\tint count = printers.count();", "+\tPrinterData[] result = new PrinterData[count];", "+\tfor (int i = 0; i < count; i++) {", "+\t\tNSString str = new NSString(printers.objectAtIndex(i));", "+\t\tchar[] buffer = new char[str.length()];", "+\t\tstr.getCharacters_(buffer);", "+\t\tresult[i] = new PrinterData(DRIVER, new String(buffer));", "-\treturn result == null ? new PrinterData[0] : result;", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a64ae5a83b8b63f3e5674bff88199c44", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "da556c9b17830907056468c4948706802ae67161", "commitAfterChange": "f658aef2494ee6a768d79c1b2ced077e25523979", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": "  public void update ()", "signatureAfterChange": "  public void update ()", "diff": ["-\tcheckDevice ();", "-\tint [] outEvent = new int [1];", "-\tint [] mask = new int [] {OS.kEventClassWindow, OS.kEventWindowUpdate};", "-\twhile (OS.ReceiveNextEvent (mask.length / 2, mask, OS.kEventDurationNoWait, true, outEvent) == OS.noErr) {", "-\t\t/*", "-\t\t* Bug in the Macintosh.  For some reason, when a hierarchy of", "-\t\t* windows is disposed from kEventWindowClose, despite the fact", "-\t\t* that DisposeWindow() has been called, the window is not", "-\t\t* disposed and there are outstandings kEventWindowUpdate events", "-\t\t* in the event queue.  Dispatching these events will cause a", "-\t\t* segment fault.  The fix is to dispatch events to visible", "-\t\t* windows only.", "-\t\t*/", "-\t\tint [] theWindow = new int [1];", "-\t\tOS.GetEventParameter (outEvent [0], OS.kEventParamDirectObject, OS.typeWindowRef, null, 4, null, theWindow);", "-\t\tif (OS.IsWindowVisible (theWindow [0])) OS.SendEventToEventTarget (outEvent [0], OS.GetEventDispatcherTarget ());", "-\t\tOS.ReleaseEvent (outEvent [0]);", "+\tcheckDevice ();\t", "+\tShell [] shells = getShells ();", "+\tfor (int i=0; i<shells.length; i++) {", "+\t\tShell shell = shells [i];", "+\t\tif (!shell.isDisposed ()) shell.update ();", "+\t/*", "+\t* This code is intentionally commented.", "+\t*/", "+//\tint [] outEvent = new int [1];", "+//\tint [] mask = new int [] {OS.kEventClassWindow, OS.kEventWindowUpdate};", "+//\twhile (OS.ReceiveNextEvent (mask.length / 2, mask, OS.kEventDurationNoWait, true, outEvent) == OS.noErr) {", "+//\t\t/*", "+//\t\t* Bug in the Macintosh.  For some reason, when a hierarchy of", "+//\t\t* windows is disposed from kEventWindowClose, despite the fact", "+//\t\t* that DisposeWindow() has been called, the window is not", "+//\t\t* disposed and there are outstandings kEventWindowUpdate events", "+//\t\t* in the event queue.  Dispatching these events will cause a", "+//\t\t* segment fault.  The fix is to dispatch events to visible", "+//\t\t* windows only.", "+//\t\t*/", "+//\t\tint [] theWindow = new int [1];", "+//\t\tOS.GetEventParameter (outEvent [0], OS.kEventParamDirectObject, OS.typeWindowRef, null, 4, null, theWindow);", "+//\t\tif (OS.IsWindowVisible (theWindow [0])) OS.SendEventToEventTarget (outEvent [0], OS.GetEventDispatcherTarget ());", "+//\t\tOS.ReleaseEvent (outEvent [0]);", "+//\t}"]}], "num": 42833}
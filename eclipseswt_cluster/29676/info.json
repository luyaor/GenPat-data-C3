{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7797f4a0577aee66fb1da6065083c802", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba61602b0a5bb98bf307bdbbb2f66464", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "c892e0aeb33d21436b946e3627f40a5d2a0ce2de", "commitAfterChange": "c16f373de1f1cde98e6cfe71beacc736f035717a", "methodNumberBeforeChange": 198, "methodNumberAfterChange": 198, "signatureBeforeChange": "  void restackWindow (long window, long sibling, boolean above)", "signatureAfterChange": "  void restackWindow (long window, long sibling, boolean above)", "diff": ["-\t    if (OS.GTK_VERSION >= OS.VERSION (2, 17, 11)) {", "-\t    \tOS.gdk_window_restack (window, sibling, above);", "-\t    } else {", "-\t    \t/*", "-\t\t\t* Feature in X. If the receiver is a top level, XConfigureWindow ()", "-\t\t\t* will fail (with a BadMatch error) for top level shells because top", "-\t\t\t* level shells are reparented by the window manager and do not share", "-\t\t\t* the same X window parent.  This is the correct behavior but it is", "-\t\t\t* unexpected.  The fix is to use XReconfigureWMWindow () instead.", "-\t\t\t* When the receiver is not a top level shell, XReconfigureWMWindow ()", "-\t\t\t* behaves the same as XConfigureWindow ().", "-\t\t\t*/", "-\t\t\tlong /*int*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);", "-\t\t\tlong /*int*/ xWindow = OS.gdk_x11_drawable_get_xid (window);", "-\t\t\tint xScreen = OS.XDefaultScreen (xDisplay);", "-\t\t\tint flags = OS.CWStackMode | OS.CWSibling;", "-\t\t\tXWindowChanges changes = new XWindowChanges ();", "-\t\t\tchanges.sibling = OS.gdk_x11_drawable_get_xid (sibling);", "-\t\t\tchanges.stack_mode = above ? OS.Above : OS.Below;", "-\t\t\tOS.XReconfigureWMWindow (xDisplay, xWindow, xScreen, flags, changes);", "-\t    }", "-\t}", "+   \tOS.gdk_window_restack (window, sibling, above);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64231392b7fdb769bc63c86cefeacd70", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleType.java", "commitBeforeChange": "a73836b62f7b4598932e8c5312c4b064291c921f", "commitAfterChange": "9e104f73db7a2c845f9e17635faa75853418512a", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 26, "signatureBeforeChange": " \t \tint createInstance (Accessible accessible, int widget)", "signatureAfterChange": "  \tstatic AccessibleType getInstance ()", "diff": ["-\t", "-\tint createInstance (Accessible accessible, int widget) {", "-\t\tint type = handle;", "-\t\tAccessible acc = accessible;", "-\t\tif (acc == null) {", "-\t\t\t// we don't care about this control, so create it with the parent's ", "-\t\t\t// type so that its accessibility callbacks will not pass though here", "-\t\t\ttype = OS.g_type_parent (type);", "-\t\t\tint result = OS.g_object_new (type, 0);", "-\t\t\tOS.atk_object_initialize (result, widget);", "-\t\t\treturn result;", "-\t\t}", "-\t\tAccessibleObject object = new AccessibleObject (type, widget, acc);", "-\t\taccessibleObjects.put (new Integer (object.handle), object);", "-\t\tacc.accessibleObject = object;", "-\t\treturn object.handle;", "-\t}", "+\tstatic AccessibleType getInstance () {", "+\t\treturn instance;", "+\t}"]}], "num": 29676}
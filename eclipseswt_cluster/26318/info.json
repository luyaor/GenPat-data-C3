{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c43e0e2ea77859b5f5f49ca89a53ee7a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e7e835e0d6234d8fd58a39801b8f087", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d6b025633a28920ae40301a1b987f0b923d26e74", "commitAfterChange": "6e89f26f4d6cf8c990840a7f12e701138a427091", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public void fillGradientRectangle(int x, int y, int width, int height, boolean vertical)", "signatureAfterChange": " public void fillGradientRectangle(int x, int y, int width, int height, boolean vertical)", "diff": ["-\tfocus(true);", "-\t", "-\t/* AW", "-\tint xDisplay = data.display;", "-\tint xScreenNum = OS.XDefaultScreen(xDisplay);", "-\tXGCValues values = new XGCValues();", "-\t*/", "-\tint fromColor, toColor;", "-\t/* AW", "-\tOS.XGetGCValues(xDisplay, handle, OS.GCForeground | OS.GCBackground, values);", "-\tfromColor = values.foreground;", "-\ttoColor = values.background;", "-\t*/", "-\tfromColor = data.foreground;", "-\ttoColor = data.background;", "-\t", "-\tboolean swapColors = false;", "-\tif (width < 0) {", "-\t\tx += width; width = -width;", "-\t\tif (! vertical) swapColors = true;", "-\t}", "-\tif (height < 0) {", "-\t\ty += height; height = -height;", "-\t\tif (vertical) swapColors = true;", "-\t}", "-\tif (swapColors) {", "-\t\tfinal int t = fromColor;", "-\t\tfromColor = toColor;", "-\t\ttoColor = t;", "-\t}", "-\tif (fromColor == toColor) {", "-\t\t/* AW", "-\t\tOS.XFillRectangle(xDisplay, data.drawable, handle, x, y, width, height);", "-\t\t*/", "-\t\tinstallForeColor(data.foreground);", "-\t\tfRect.set(x, y, width, height);", "-\t\tOS.PaintRect(fRect.getData());", "+\ttry {", "+\t\tif (! focus(true, null))", "+\t\t\treturn;", "-\t\tunfocus(true);", "-\t\treturn;", "-\t}", "-\t/* X Window deals with a virtually limitless array of color formats", "-\t * but we only distinguish between paletted and direct modes", "-\t */\t", "-\t/* AW", "-\tfinal int xScreen = OS.XDefaultScreenOfDisplay(xDisplay);", "-\tfinal int xVisual = OS.XDefaultVisual(xDisplay, xScreenNum);", "-\tVisual visual = new Visual();", "-\tOS.memmove(visual, xVisual, visual.sizeof);", "-\tfinal int depth = OS.XDefaultDepthOfScreen(xScreen);", "-\t*/", "-\tint depth= 32;", "-\tfinal boolean directColor = (depth > 8);", "-", "-\t// This code is intentionally commented since elsewhere in SWT we", "-\t// assume that depth <= 8 means we are in a paletted mode though", "-\t// this is not always the case.", "-\t//final boolean directColor = (visual.c_class == OS.TrueColor) || (visual.c_class == OS.DirectColor);", "-", "-\t/* AW", "-\tXColor xColor = new XColor();", "-\txColor.pixel = fromColor;", "-\tOS.XQueryColor(xDisplay, data.colormap, xColor);", "-\tfinal RGB fromRGB = new RGB((xColor.red & 0xffff) >>> 8, (xColor.green & 0xffff) >>> 8, (xColor.blue & 0xffff) >>> 8);", "-\txColor.pixel = toColor;", "-\tOS.XQueryColor(xDisplay, data.colormap, xColor);", "-\tfinal RGB toRGB = new RGB((xColor.red & 0xffff) >>> 8, (xColor.green & 0xffff) >>> 8, (xColor.blue & 0xffff) >>> 8);", "-\t*/", "+\t\t/* AW", "+\t\tint xDisplay = data.display;", "+\t\tint xScreenNum = OS.XDefaultScreen(xDisplay);", "+\t\tXGCValues values = new XGCValues();", "+\t\t*/", "+\t\tint fromColor, toColor;", "+\t\t/* AW", "+\t\tOS.XGetGCValues(xDisplay, handle, OS.GCForeground | OS.GCBackground, values);", "+\t\tfromColor = values.foreground;", "+\t\ttoColor = values.background;", "+\t\t*/", "+\t\tfromColor = data.foreground;", "+\t\ttoColor = data.background;", "+\t\t", "+\t\tboolean swapColors = false;", "+\t\tif (width < 0) {", "+\t\t\tx += width; width = -width;", "+\t\t\tif (! vertical) swapColors = true;", "+\t\t}", "+\t\tif (height < 0) {", "+\t\t\ty += height; height = -height;", "+\t\t\tif (vertical) swapColors = true;", "+\t\t}", "+\t\tif (swapColors) {", "+\t\t\tfinal int t = fromColor;", "+\t\t\tfromColor = toColor;", "+\t\t\ttoColor = t;", "+\t\t}", "+\t\t", "+\t\tif (fromColor == toColor) {", "+\t\t\t/* AW", "+\t\t\tOS.XFillRectangle(xDisplay, data.drawable, handle, x, y, width, height);", "+\t\t\t*/", "+\t\t\tinstallForeColor(data.foreground);", "+\t\t\tfRect.set(x, y, width, height);", "+\t\t\tOS.PaintRect(fRect.getData());", "+\t\t\treturn;", "+\t\t}", "+\t\t/* X Window deals with a virtually limitless array of color formats", "+\t\t * but we only distinguish between paletted and direct modes", "+\t\t */\t", "+\t\t/* AW", "+\t\tfinal int xScreen = OS.XDefaultScreenOfDisplay(xDisplay);", "+\t\tfinal int xVisual = OS.XDefaultVisual(xDisplay, xScreenNum);", "+\t\tVisual visual = new Visual();", "+\t\tOS.memmove(visual, xVisual, visual.sizeof);", "+\t\tfinal int depth = OS.XDefaultDepthOfScreen(xScreen);", "+\t\t*/", "+\t\tint depth= 32;", "+\t\tfinal boolean directColor = (depth > 8);", "-\tRGB fromRGB = Color.carbon_new(data.device, fromColor).getRGB();", "-\tRGB toRGB = Color.carbon_new(data.device, toColor).getRGB();", "-", "-\tfinal int redBits, greenBits, blueBits;", "-\tif (directColor) {", "-\t\t// RGB mapped display", "-\t\tredBits = getChannelWidth(0x00ff0000 /* AW visual.red_mask */);", "-\t\tgreenBits = getChannelWidth(0x0000ff00 /* AW visual.green_mask */);", "-\t\tblueBits = getChannelWidth(0x000000ff /* AW visual.blue_mask */);", "-\t} else {", "-\t\t// Index display", "-\t\tredBits = greenBits = blueBits = 0;", "+\t\t// This code is intentionally commented since elsewhere in SWT we", "+\t\t// assume that depth <= 8 means we are in a paletted mode though", "+\t\t// this is not always the case.", "+\t\t//final boolean directColor = (visual.c_class == OS.TrueColor) || (visual.c_class == OS.DirectColor);", "+\t", "+\t\t/* AW", "+\t\tXColor xColor = new XColor();", "+\t\txColor.pixel = fromColor;", "+\t\tOS.XQueryColor(xDisplay, data.colormap, xColor);", "+\t\tfinal RGB fromRGB = new RGB((xColor.red & 0xffff) >>> 8, (xColor.green & 0xffff) >>> 8, (xColor.blue & 0xffff) >>> 8);", "+\t\txColor.pixel = toColor;", "+\t\tOS.XQueryColor(xDisplay, data.colormap, xColor);", "+\t\tfinal RGB toRGB = new RGB((xColor.red & 0xffff) >>> 8, (xColor.green & 0xffff) >>> 8, (xColor.blue & 0xffff) >>> 8);", "+\t\t*/", "+\t\t", "+\t\tRGB fromRGB = Color.carbon_new(data.device, fromColor).getRGB();", "+\t\tRGB toRGB = Color.carbon_new(data.device, toColor).getRGB();", "+\t", "+\t\tfinal int redBits, greenBits, blueBits;", "+\t\tif (directColor) {", "+\t\t\t// RGB mapped display", "+\t\t\tredBits = getChannelWidth(0x00ff0000 /* AW visual.red_mask */);", "+\t\t\tgreenBits = getChannelWidth(0x0000ff00 /* AW visual.green_mask */);", "+\t\t\tblueBits = getChannelWidth(0x000000ff /* AW visual.blue_mask */);", "+\t\t} else {", "+\t\t\t// Index display", "+\t\t\tredBits = greenBits = blueBits = 0;", "+\t\t}", "+\t", "+\t\tImageData.fillGradientRectangle(this, data.device,", "+\t\t\tx, y, width, height, vertical, fromRGB, toRGB,", "+\t\t\tredBits, greenBits, blueBits);", "+\t\t\t", "+\t} finally {", "+\t\tunfocus(true);", "-", "-\tImageData.fillGradientRectangle(this, data.device,", "-\t\tx, y, width, height, vertical, fromRGB, toRGB,", "-\t\tredBits, greenBits, blueBits);", "-", "-\tunfocus(true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a49988f33bce3553d7d216d82e98529a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void fillGradientRectangle(int x, int y, int width, int height, boolean vertical)", "signatureAfterChange": " public void fillGradientRectangle(int x, int y, int width, int height, boolean vertical)", "diff": ["-\ttry {", "-\t\tif (! focus(true, null))", "-\t\t\treturn;", "-\t\t", "-\t\t/* AW", "-\t\tint xDisplay = data.display;", "-\t\tint xScreenNum = OS.XDefaultScreen(xDisplay);", "-\t\tXGCValues values = new XGCValues();", "-\t\t*/", "-\t\tint fromColor, toColor;", "-\t\t/* AW", "-\t\tOS.XGetGCValues(xDisplay, handle, OS.GCForeground | OS.GCBackground, values);", "-\t\tfromColor = values.foreground;", "-\t\ttoColor = values.background;", "-\t\t*/", "-\t\tfromColor = data.foreground;", "-\t\ttoColor = data.background;", "-\t\t", "-\t\tboolean swapColors = false;", "-\t\tif (width < 0) {", "-\t\t\tx += width; width = -width;", "-\t\t\tif (! vertical) swapColors = true;", "-\t\t}", "-\t\tif (height < 0) {", "-\t\t\ty += height; height = -height;", "-\t\t\tif (vertical) swapColors = true;", "-\t\t}", "-\t\tif (swapColors) {", "-\t\t\tfinal int t = fromColor;", "-\t\t\tfromColor = toColor;", "-\t\t\ttoColor = t;", "-\t\t}", "-\t\t", "-\t\tif (fromColor == toColor) {", "-\t\t\t/* AW", "-\t\t\tOS.XFillRectangle(xDisplay, data.drawable, handle, x, y, width, height);", "-\t\t\t*/", "-\t\t\tMacUtil.RGBForeColor(data.foreground);", "-\t\t\tfRect.set(x, y, width, height);", "-\t\t\tOS.PaintRect(fRect.getData());", "-\t\t\treturn;", "-\t\t}", "-\t\t/* X Window deals with a virtually limitless array of color formats", "-\t\t * but we only distinguish between paletted and direct modes", "-\t\t */\t", "-\t\t/* AW", "-\t\tfinal int xScreen = OS.XDefaultScreenOfDisplay(xDisplay);", "-\t\tfinal int xVisual = OS.XDefaultVisual(xDisplay, xScreenNum);", "-\t\tVisual visual = new Visual();", "-\t\tOS.memmove(visual, xVisual, visual.sizeof);", "-\t\tfinal int depth = OS.XDefaultDepthOfScreen(xScreen);", "-\t\t*/", "-\t\t", "-\t\tint depth= getCurrentScreenDepth();", "-\t\tfinal boolean directColor = (depth > 8);", "-\t", "-\t\t// This code is intentionally commented since elsewhere in SWT we", "-\t\t// assume that depth <= 8 means we are in a paletted mode though", "-\t\t// this is not always the case.", "-\t\t//final boolean directColor = (visual.c_class == OS.TrueColor) || (visual.c_class == OS.DirectColor);", "-\t", "-\t\t/* AW", "-\t\tXColor xColor = new XColor();", "-\t\txColor.pixel = fromColor;", "-\t\tOS.XQueryColor(xDisplay, data.colormap, xColor);", "-\t\tfinal RGB fromRGB = new RGB((xColor.red & 0xffff) >>> 8, (xColor.green & 0xffff) >>> 8, (xColor.blue & 0xffff) >>> 8);", "-\t\txColor.pixel = toColor;", "-\t\tOS.XQueryColor(xDisplay, data.colormap, xColor);", "-\t\tfinal RGB toRGB = new RGB((xColor.red & 0xffff) >>> 8, (xColor.green & 0xffff) >>> 8, (xColor.blue & 0xffff) >>> 8);", "-\t\t*/", "-\t\t", "-\t\tRGB fromRGB = Color.carbon_new(data.device, fromColor, false).getRGB();", "-\t\tRGB toRGB = Color.carbon_new(data.device, toColor, false).getRGB();", "-\t", "-\t\tfinal int redBits, greenBits, blueBits;", "-\t\tif (directColor) {", "-\t\t\t// RGB mapped display", "-\t\t\tredBits = getChannelWidth(0x00ff0000 /* AW visual.red_mask */);", "-\t\t\tgreenBits = getChannelWidth(0x0000ff00 /* AW visual.green_mask */);", "-\t\t\tblueBits = getChannelWidth(0x000000ff /* AW visual.blue_mask */);", "-\t\t} else {", "-\t\t\t// Index display", "-\t\t\tredBits = greenBits = blueBits = 0;", "-\t\t}", "-\t", "-\t\tImageData.fillGradientRectangle(this, data.device,", "-\t\t\tx, y, width, height, vertical, fromRGB, toRGB,", "-\t\t\tredBits, greenBits, blueBits);", "-\t\t\t", "-\t} finally {", "-\t\tunfocus(true);", "-\t}", "-}", "+\t/* Rewrite this to use GdkPixbuf */", "+\tRGB backgroundRGB, foregroundRGB;", "+\tbackgroundRGB = getBackground().getRGB();", "+\tforegroundRGB = getForeground().getRGB();", "+", "+\tRGB fromRGB, toRGB;", "+\tfromRGB = foregroundRGB;", "+\ttoRGB   = backgroundRGB;", "+\tboolean swapColors = false;", "+\tif (width < 0) {", "+\t\tx += width; width = -width;", "+\t\tif (! vertical) swapColors = true;", "+\tif (height < 0) {", "+\t\ty += height; height = -height;", "+\t\tif (vertical) swapColors = true;", "+\t}", "+\tif (swapColors) {", "+\t\tfromRGB = backgroundRGB;", "+\t\ttoRGB   = foregroundRGB;", "+\t}", "+\tif (fromRGB == toRGB) {", "+\t\tfillRectangle(x, y, width, height);", "+\t\treturn;", "+\t}", "+\tImageData.fillGradientRectangle(this, data.device,", "+\t\tx, y, width, height, vertical, fromRGB, toRGB,", "+\t\t8, 8, 8);"]}], "num": 26318}
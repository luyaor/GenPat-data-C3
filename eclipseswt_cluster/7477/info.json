{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f9ee513d52e496ec90d33e13ec95349", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e89f3726d2af2ca4eb8d061333bfc43", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "115f3e3ceb4f3ae6b51eb27ec3539632d1fa9cff", "commitAfterChange": "b74ae62b82beae503cc3ceeef2dd599062f8ba27", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["-//\t\tcase OS.WM_SETFOCUS: {", "-//\t\t\t/*", "-//\t\t\t* Feature in Windows.  When a tree control processes WM_SETFOCUS,", "-//\t\t\t* if no item is selected, the first item in the tree is selected.", "-//\t\t\t* This is unexpected and might clear the previous selection.", "-//\t\t\t* The fix is to detect that there is no selection and set it to", "-//\t\t\t* the first item in the tree.  If the item was not selected,", "-//\t\t\t* only the focus is assigned.", "-//\t\t\t*/", "-//\t\t\tif ((style & SWT.SINGLE) != 0) break;", "-//\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "-//\t\t\tif (hItem == 0) {", "-//\t\t\t\thItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_ROOT, 0);", "-//\t\t\t\tif (hItem != 0) {", "-//\t\t\t\t\tTVITEM tvItem = new TVITEM ();", "-//\t\t\t\t\ttvItem.mask = OS.TVIF_PARAM | OS.TVIF_STATE;", "-//\t\t\t\t\ttvItem.hItem = hItem;", "-//\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "-//\t\t\t\t\tignoreDeselect = ignoreSelect = lockSelection = true;", "-//\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SELECTITEM, OS.TVGN_CARET, hItem);", "-//\t\t\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) == 0) {", "-//\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);", "-//\t\t\t\t\t}", "-//\t\t\t\t\tignoreDeselect = ignoreSelect = lockSelection = false;", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t\tbreak;", "-//\t\t}", "+\t\tcase OS.WM_SETFOCUS: {", "+\t\t\t/*", "+\t\t\t* Feature in Windows.  When a tree control processes WM_SETFOCUS,", "+\t\t\t* if no item is selected, the first item in the tree is selected.", "+\t\t\t* This is unexpected and might clear the previous selection.", "+\t\t\t* The fix is to detect that there is no selection and set it to", "+\t\t\t* the first item in the tree.  If the item was not selected,", "+\t\t\t* only the focus is assigned.", "+\t\t\t*/", "+\t\t\tif ((style & SWT.SINGLE) != 0) break;", "+\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "+\t\t\tif (hItem == 0) {", "+\t\t\t\thItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_ROOT, 0);", "+\t\t\t\tif (hItem != 0) {", "+\t\t\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\t\t\ttvItem.mask = OS.TVIF_PARAM | OS.TVIF_STATE;", "+\t\t\t\t\ttvItem.hItem = hItem;", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "+\t\t\t\t\tignoreDeselect = ignoreSelect = lockSelection = true;", "+\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SELECTITEM, OS.TVGN_CARET, hItem);", "+\t\t\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) == 0) {", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);", "+\t\t\t\t\t}", "+\t\t\t\t\tignoreDeselect = ignoreSelect = lockSelection = false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd08b8587f231658b59ba8230ccf5c36", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "f5cd9014d4ffe8335c6cb4ab361438e103573a42", "commitAfterChange": "61583f8f8b007c1f3c125fc81753e1e987524b45", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public int getCaretPosition ()", "signatureAfterChange": " public int getCaretPosition ()", "diff": ["-\tint startLine = OS.SendMessage (handle, OS.EM_LINEFROMCHAR, start [0], 0);", "-\tint caretPos = OS.SendMessage (handle, OS.EM_LINEINDEX, -1, 0);", "-\tint caretLine = OS.SendMessage (handle, OS.EM_LINEFROMCHAR, caretPos, 0);", "-\tint caret = end [0];", "-\tif (caretLine == startLine) caret = start [0];", "+\t/*", "+\t* In Windows, there is no API to get the position of the caret", "+\t* when the selection is an i-beam.  The best that can be done", "+\t* is to query the pixel position of the current caret and compare", "+\t* it to the pixel position of the start and end of the selection.", "+\t* ", "+\t* NOTE:  This does not work when the i-beam belongs to another", "+\t* control.  In this case, guess that the i-beam is at the start", "+\t* of the selection.", "+\t*/", "+\tint caret = start [0];", "+\tif (start [0] != end [0]) {", "+\t\tint startLine = OS.SendMessage (handle, OS.EM_LINEFROMCHAR, start [0], 0);", "+\t\tint endLine = OS.SendMessage (handle, OS.EM_LINEFROMCHAR, end [0], 0);", "+\t\tif (startLine == endLine) {", "+\t\t\tif (!OS.IsWinCE) {", "+\t\t\t\tint idThread = OS.GetWindowThreadProcessId (handle, null);", "+\t\t\t\tGUITHREADINFO  lpgui = new GUITHREADINFO();", "+\t\t\t\tlpgui.cbSize = GUITHREADINFO.sizeof;", "+\t\t\t\tif (OS.GetGUIThreadInfo (idThread, lpgui)) {", "+\t\t\t\t\tif (lpgui.hwndCaret == handle || lpgui.hwndCaret == 0) {", "+\t\t\t\t\t\tPOINT ptCurrentPos = new POINT ();", "+\t\t\t\t\t\tif (OS.GetCaretPos (ptCurrentPos)) {", "+\t\t\t\t\t\t\tint endPos = OS.SendMessage (handle, OS.EM_POSFROMCHAR, end [0], 0);", "+\t\t\t\t\t\t\tif (endPos == -1) {", "+\t\t\t\t\t\t\t\tint startPos = OS.SendMessage (handle, OS.EM_POSFROMCHAR, start [0], 0);", "+\t\t\t\t\t\t\t\tint startX = (short) (startPos & 0xFFFF);", "+\t\t\t\t\t\t\t\tif (ptCurrentPos.x > startX) caret = end [0];", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tint endX = (short) (endPos & 0xFFFF);", "+\t\t\t\t\t\t\t\tif (ptCurrentPos.x >= endX) caret = end [0];", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tint caretPos = OS.SendMessage (handle, OS.EM_LINEINDEX, -1, 0);", "+\t\t\tint caretLine = OS.SendMessage (handle, OS.EM_LINEFROMCHAR, caretPos, 0);", "+\t\t\tif (caretLine == endLine) caret = end [0];", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31127cc5998352da0bd395b9a776d7df", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "94c141dfb85857d40b2d74b967ba34770a0ca734", "commitAfterChange": "1395ca8a520d793c48bbad39b2d3bbc01fcbbe71", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 96, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\t\t\tif (hwndHeader != 0) {", "-\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "-\t\t\t\t\t\tif (count != 0) {", "-\t\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "-\t\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "-\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, 0, hdItem);", "-\t\t\t\t\t\t\tint hRgn = OS.CreateRectRgn (nmcd.left, nmcd.top, nmcd.left + hdItem.cxy, nmcd.bottom);", "-\t\t\t\t\t\t\tOS.SelectClipRgn (hDC, hRgn);", "-\t\t\t\t\t\t\tOS.DeleteObject (hRgn);", "+\t\t\t\t\tif (!printClient) {", "+\t\t\t\t\t\tif (hwndHeader != 0) {", "+\t\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\t\tif (count != 0) {", "+\t\t\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "+\t\t\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "+\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, 0, hdItem);", "+\t\t\t\t\t\t\t\tint hRgn = OS.CreateRectRgn (nmcd.left, nmcd.top, nmcd.left + hdItem.cxy, nmcd.bottom);", "+\t\t\t\t\t\t\t\tOS.SelectClipRgn (hDC, hRgn);", "+\t\t\t\t\t\t\t\tOS.DeleteObject (hRgn);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (printClient) {", "+\t\t\t\t\t\t\t\t\t/* Assume that the disabled color is COLOR_BTN_FACE */", "+\t\t\t\t\t\t\t\t\tint clrBackground = OS.IsWindowEnabled (handle) ? getBackgroundPixel () : OS.GetSysColor (OS.COLOR_BTNFACE);", "+\t\t\t\t\t\t\t\t\tdrawBackground (hDC, clrBackground, rect);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (printClient) {", "+\t\t\t\t\t\t\tif (hwndHeader != 0) {", "+\t\t\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\t\t\tif (count != 0 && printClient) {", "+\t\t\t\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "+\t\t\t\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "+\t\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, 0, hdItem);", "+\t\t\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left + hdItem.cxy, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\t\t\t\tOS.DrawEdge (hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc79c562a11f46a9f2345729dfb0b237", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/gtk/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "ac473adfcb9983f414d3da15b8b15f56fca50498", "commitAfterChange": "7171ce75440e1c2f381de2d9486e536f525ae21d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 16, "signatureBeforeChange": " public int internal_new_GC(GCData data)", "signatureAfterChange": " public int internal_new_GC(GCData data)", "diff": ["-\treturn 0;", "+\tint /*long*/ drawable = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), 1, 1, 1);", "+\tint /*long*/ gdkGC = OS.gdk_gc_new (drawable);", "+\tif (gdkGC == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\tif (data != null) {", "+\t\tif (isGCCreated) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\tint mask = SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT;", "+\t\tif ((data.style & mask) == 0) {", "+\t\t\tdata.style |= SWT.LEFT_TO_RIGHT;", "+\t\t}", "+\t\tdata.device = this;", "+\t\tdata.drawable = drawable;", "+\t\tdata.background = getSystemColor (SWT.COLOR_WHITE).handle;", "+\t\tdata.foreground = getSystemColor (SWT.COLOR_BLACK).handle;", "+\t\tdata.font = getSystemFont ().handle;", "+\t\tif (cairo == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tdata.cairo = cairo;", "+\t\tisGCCreated = true;", "+\t}", "+\treturn gdkGC;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be01f45ebf4fd8e39c084a81b3f6567b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "5a4ec706c1fb816c9cff4c4e7493b85db9b7b5b8", "commitAfterChange": "30b3672ceb3d2c5d7c5e65c4765952fcea275186", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " public TableItem getItem (Point point)", "signatureAfterChange": " public TableItem getItem (Point point)", "diff": ["+\tint count = (int)/*64*/OS.SendMessage (handle, OS.LVM_GETITEMCOUNT, 0, 0);", "+\tif (count == 0) return null;", "-\tpinfo.x = point.x;  pinfo.y = point.y;", "+\tpinfo.x = point.x;", "+\tpinfo.y = point.y;", "+\tif ((style & SWT.FULL_SELECTION) == 0) {", "+\t\tif (hooks (SWT.MeasureItem)) {", "+\t\t\tOS.SendMessage (handle, OS.LVM_SUBITEMHITTEST, 0, pinfo);", "+\t\t\tif (pinfo.iItem == -1) {", "+\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\trect.left = OS.LVIR_ICON;", "+\t\t\t\tignoreCustomDraw = true;", "+\t\t\t\tint /*long*/ code = OS.SendMessage (handle, OS.LVM_GETITEMRECT, 0, rect);", "+\t\t\t\tignoreCustomDraw = false;", "+\t\t\t\tif (code != 0) {", "+\t\t\t\t\tpinfo.x = rect.left;", "+\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SUBITEMHITTEST, 0, pinfo);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (pinfo.iItem != -1 && pinfo.iSubItem == 0) {", "+\t\t\t\tif (hitTestSelection (pinfo.iItem, pinfo.x, pinfo.y)) {", "+\t\t\t\t\treturn _getItem (pinfo.iItem);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn null;", "+\t\t}", "+\t}"]}], "num": 7477}
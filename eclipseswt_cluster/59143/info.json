{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ddc427d1517cfb9a42d4a20648049b3a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2b91e8bdbf8890afe0bc155e43d4ac4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "df55805e4a74ab0fc8f545a1792d755c95a4e419", "commitAfterChange": "b178ded274cefa13fff8fc6fb8115ee14a844dc8", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  long gtk_expose_event (long widget, long eventPtr)", "signatureAfterChange": "  long gtk_expose_event (long widget, long eventPtr)", "diff": ["-\tOS.gdk_region_get_rectangles (gdkEvent.region, rectangles, n_rectangles);", "-\tGdkRectangle rect = new GdkRectangle ();", "-\tfor (int i=0; i<n_rectangles[0]; i++) {", "-\t\tEvent event = new Event ();", "-\t\tOS.memmove (rect, rectangles [0] + i * GdkRectangle.sizeof, GdkRectangle.sizeof);", "-\t\tevent.x = rect.x;", "-\t\tevent.y = rect.y;", "-\t\tevent.width = rect.width;", "-\t\tevent.height = rect.height;", "-\t\tif ((style & SWT.MIRRORED) != 0) event.x = getClientWidth () - event.width - event.x;", "-\t\tlong /*int*/ damageRgn = OS.gdk_region_new ();", "-\t\tOS.gdk_region_union_with_rect (damageRgn, rect);", "-\t\tGCData data = new GCData ();", "-\t\tdata.damageRgn = damageRgn;", "-\t\tGC gc = event.gc = GC.gtk_new (this, data);", "-\t\tsendEvent (SWT.Paint, event);", "-\t\tgc.dispose ();", "-\t\tOS.gdk_region_destroy (damageRgn);", "-\t\tevent.gc = null;", "+\tif (OS.GTK_VERSION >= OS.VERSION(3, 0, 0)) {", "+\t\t int num = Cairo.cairo_region_num_rectangles (gdkEvent.region);", "+\t\t for (int n = 0; n < num; n++) {", "+\t\t\t Cairo.cairo_region_get_rectangle (gdkEvent.region, n, rectangles[n]);", "+\t\t }", "+\t\tcairo_rectangle_int_t rect = new cairo_rectangle_int_t ();", "+\t\tfor (int i=0; i<n_rectangles[0]; i++) {", "+\t\t\tEvent event = new Event ();", "+\t\t\tCairo.memmove (rect, rectangles [0] + i * cairo_rectangle_int_t.sizeof, cairo_rectangle_int_t.sizeof);", "+\t\t\tevent.x = rect.x;", "+\t\t\tevent.y = rect.y;", "+\t\t\tevent.width = rect.width;", "+\t\t\tevent.height = rect.height;", "+\t\t\tif ((style & SWT.MIRRORED) != 0) event.x = getClientWidth () - event.width - event.x;", "+\t\t\tlong /*int*/ damageRgn = Cairo.cairo_region_create ();", "+\t\t\tCairo.cairo_region_union_rectangle (damageRgn, rect);", "+\t\t\tGCData data = new GCData ();", "+\t\t\tdata.damageRgn = damageRgn;", "+\t\t\tGC gc = event.gc = GC.gtk_new (this, data);", "+\t\t\tsendEvent (SWT.Paint, event);", "+\t\t\tgc.dispose ();", "+\t\t\tCairo.cairo_region_destroy (damageRgn);", "+\t\t\tevent.gc = null;", "+\t\t}", "+\t} else {", "+\t\tOS.gdk_region_get_rectangles (gdkEvent.region, rectangles, n_rectangles);", "+\t\tGdkRectangle rect = new GdkRectangle ();", "+\t\tfor (int i=0; i<n_rectangles[0]; i++) {", "+\t\t\tEvent event = new Event ();", "+\t\t\tOS.memmove (rect, rectangles [0] + i * GdkRectangle.sizeof, GdkRectangle.sizeof);", "+\t\t\tevent.x = rect.x;", "+\t\t\tevent.y = rect.y;", "+\t\t\tevent.width = rect.width;", "+\t\t\tevent.height = rect.height;", "+\t\t\tif ((style & SWT.MIRRORED) != 0) event.x = getClientWidth () - event.width - event.x;", "+\t\t\tlong /*int*/ damageRgn = OS.gdk_region_new ();", "+\t\t\tOS.gdk_region_union_with_rect (damageRgn, rect);", "+\t\t\tGCData data = new GCData ();", "+\t\t\tdata.damageRgn = damageRgn;", "+\t\t\tGC gc = event.gc = GC.gtk_new (this, data);", "+\t\t\tsendEvent (SWT.Paint, event);", "+\t\t\tgc.dispose ();", "+\t\t\tOS.gdk_region_destroy (damageRgn);", "+\t\t\tevent.gc = null;", "+\t\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d611a0f37e833c8581d644821f5f948", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "df55805e4a74ab0fc8f545a1792d755c95a4e419", "commitAfterChange": "b178ded274cefa13fff8fc6fb8115ee14a844dc8", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " void drawImageXRender(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight, long maskPixmap, int maskType)", "signatureAfterChange": " void drawImageXRender(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight, long maskPixmap, int maskType)", "diff": ["-\t\t\tclipping = OS.gdk_region_new();", "-\t\t\tOS.gdk_region_union(clipping, data.clipRgn);", "-\t\t\tOS.gdk_region_intersect(clipping, data.damageRgn);", "+\t\t\tclipping = cairo_region_create ();", "+\t\t\tcairo_region_union (clipping, data.clipRgn);", "+\t\t\tcairo_region_intersect (clipping, data.damageRgn);", "-\t\tOS.gdk_region_get_rectangles(clipping, rects, nRects);", "-\t\tGdkRectangle rect = new GdkRectangle();", "-\t\tshort[] xRects = new short[nRects[0] * 4];", "-\t\tfor (int i=0, j=0; i<nRects[0]; i++, j+=4) {", "-\t\t\tOS.memmove(rect, rects[0] + (i * GdkRectangle.sizeof), GdkRectangle.sizeof);", "-\t\t\txRects[j] = (short)(translateX + rect.x);", "-\t\t\txRects[j+1] = (short)(translateY + rect.y);", "-\t\t\txRects[j+2] = (short)rect.width;", "-\t\t\txRects[j+3] = (short)rect.height;", "-\t\t}", "-\t\tOS.XRenderSetPictureClipRectangles(xDisplay, destPict, 0, 0, xRects, nRects[0]);", "-\t\tif (clipping != data.clipRgn && clipping != data.damageRgn) {", "-\t\t\tOS.gdk_region_destroy(clipping);", "+\t\tif (OS.GTK_VERSION >= OS.VERSION(3, 0, 0)) {", "+\t\t\t int num = Cairo.cairo_region_num_rectangles (clipping);", "+\t\t\t for (int n = 0; n < num; n++) {", "+\t\t\t\t Cairo.cairo_region_get_rectangle (clipping, n, nRects[n]);", "+\t\t\t }", "+\t\t\tcairo_rectangle_int_t rect = new cairo_rectangle_int_t ();", "+\t\t\tshort[] xRects = new short[nRects[0] * 4];", "+\t\t\tfor (int i=0, j=0; i<nRects[0]; i++, j+=4) {", "+\t\t\t\tCairo.memmove(rect, rects[0] + (i * cairo_rectangle_int_t.sizeof), cairo_rectangle_int_t.sizeof);", "+\t\t\t\txRects[j] = (short)(translateX + rect.x);", "+\t\t\t\txRects[j+1] = (short)(translateY + rect.y);", "+\t\t\t\txRects[j+2] = (short)rect.width;", "+\t\t\t\txRects[j+3] = (short)rect.height;", "+\t\t\t}", "+\t\t\tOS.XRenderSetPictureClipRectangles(xDisplay, destPict, 0, 0, xRects, nRects[0]);", "+\t\t\tif (clipping != data.clipRgn && clipping != data.damageRgn) {", "+\t\t\t\tCairo.cairo_region_destroy(clipping);", "+\t\t\t}\t", "+\t\t} else {", "+\t\t\tOS.gdk_region_get_rectangles(clipping, rects, nRects);", "+\t\t\tGdkRectangle rect = new GdkRectangle();", "+\t\t\tshort[] xRects = new short[nRects[0] * 4];", "+\t\t\tfor (int i=0, j=0; i<nRects[0]; i++, j+=4) {", "+\t\t\t\tOS.memmove(rect, rects[0] + (i * GdkRectangle.sizeof), GdkRectangle.sizeof);", "+\t\t\t\txRects[j] = (short)(translateX + rect.x);", "+\t\t\t\txRects[j+1] = (short)(translateY + rect.y);", "+\t\t\t\txRects[j+2] = (short)rect.width;", "+\t\t\t\txRects[j+3] = (short)rect.height;", "+\t\t\t}", "+\t\t\tOS.XRenderSetPictureClipRectangles(xDisplay, destPict, 0, 0, xRects, nRects[0]);", "+\t\t\tif (clipping != data.clipRgn && clipping != data.damageRgn) {", "+\t\t\t\tOS.gdk_region_destroy(clipping);", "+\t\t\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c4f5d0bdf143ebead00a5b76b757dbb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "24d19b3d7f33db77171fd62ba6a99b8de47c34c1", "commitAfterChange": "fac8d627952a2fc4c000be7083041ef017b0bc95", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": " public Monitor [] getMonitors ()", "signatureAfterChange": " public Monitor [] getMonitors ()", "diff": ["-\tcheckDevice ();", "-\treturn new Monitor [] {getPrimaryMonitor ()};", "+\tcheckDevice ();\t", "+\tint cnt = OS.PhQueryRids (0, 0, 0, OS.Ph_GRAFX_REGION, 0, 0, null, null, 0);", "+\tint [] rids = new int [cnt];", "+\tcnt = OS.PhQueryRids (0, 0, 0, OS.Ph_GRAFX_REGION, 0, 0, null, rids, rids.length);", "+\tPhRect_t rect = new PhRect_t ();", "+\tMonitor [] monitors = new Monitor [cnt];", "+\tfor (int i = 0; i < cnt; i++) {", "+\t\tMonitor monitor = new Monitor ();", "+\t\tmonitor.handle = rids [i];", "+\t\tOS.PhWindowQueryVisible (OS.Ph_QUERY_CONSOLE, rids [i], OS.PhInputGroup (0), rect);", "+\t\tmonitor.x = rect.ul_x;", "+\t\tmonitor.y = rect.ul_y;", "+\t\tmonitor.width = rect.lr_x - rect.ul_x + 1;", "+\t\tmonitor.height = rect.lr_y - rect.ul_y + 1;", "+\t\tOS.PhWindowQueryVisible (OS.Ph_QUERY_WORKSPACE, rids [i], OS.PhInputGroup (0), rect);", "+\t\tmonitor.clientX = rect.ul_x;", "+\t\tmonitor.clientY = rect.ul_y;", "+\t\tmonitor.clientWidth = rect.lr_x - rect.ul_x + 1;", "+\t\tmonitor.clientHeight = rect.lr_y - rect.ul_y + 1;", "+\t\tmonitors [i] = monitor;", "+\t}", "+\treturn monitors;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c284d788d6b4bec318cc342f45729e33", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "78468bca446d96c75fb7a488b69a2588651540b3", "commitAfterChange": "bd2fbb8410192877f5552bd4ede9ef550094b912", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 60, "signatureBeforeChange": " public Monitor [] getMonitors ()", "signatureAfterChange": " public Monitor [] getMonitors ()", "diff": ["-\treturn new Monitor [] {getPrimaryMonitor ()};", "+\tint count = 0;", "+\tMonitor [] monitors = new Monitor [1];", "+\tRect rect = new Rect ();", "+\tGDevice device = new GDevice ();", "+\tint gdevice = OS.GetDeviceList ();", "+\twhile (gdevice != 0) {", "+\t\tif (count >= monitors.length) {", "+\t\t\tMonitor [] newMonitors = new Monitor [monitors.length + 4];", "+\t\t\tSystem.arraycopy (monitors, 0, newMonitors, 0, monitors.length);", "+\t\t\tmonitors = newMonitors;", "+\t\t}", "+\t\tMonitor monitor = new Monitor ();", "+\t\tmonitor.handle = gdevice;", "+\t\tint [] ptr = new int [1];", "+\t\tOS.memcpy (ptr, gdevice, 4);", "+\t\tOS.memcpy (device, ptr [0], GDevice.sizeof);\t\t\t\t", "+\t\tmonitor.x = device.left;", "+\t\tmonitor.y = device.top;", "+\t\tmonitor.width = device.right - device.left;", "+\t\tmonitor.height = device.bottom - device.top;", "+\t\tOS.GetAvailableWindowPositioningBounds (gdevice, rect);", "+\t\tmonitor.clientX = rect.left;", "+\t\tmonitor.clientY = rect.top;", "+\t\tmonitor.clientWidth = rect.right - rect.left;", "+\t\tmonitor.clientHeight = rect.bottom - rect.top;", "+\t\tmonitors [count++] = monitor;", "+\t\tgdevice = OS.GetNextDevice (gdevice);\t\t", "+\t}", "+\tif (count < monitors.length) {", "+\t\tMonitor [] newMonitors = new Monitor [count];", "+\t\tSystem.arraycopy (monitors, 0, newMonitors, 0, count);", "+\t\tmonitors = newMonitors;", "+\t}\t", "+\treturn monitors;"]}], "num": 59143}
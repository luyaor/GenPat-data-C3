{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0fd5d858e548a2f334e1aa6acb51ea17", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47b2b252d95f27b8aa309e2f65b2514e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "d54f89ff989006d607d53b534afb484bf72112b0", "commitAfterChange": "4f8c243743556b45a5a75c94872fcbe031996683", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "  int kEventRawKeyPressed (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventRawKeyPressed (int nextHandler, int theEvent, int userData)", "diff": ["+\t* ", "+\t* NOTE:  This was fixed in OS X 10.4.", "-\tint [] keyCode = new int [1];", "-\tOS.GetEventParameter (theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "-\tswitch (keyCode [0]) {", "-\t\tcase 126: /* Up arrow */", "-\t\tcase 125: /* Down arrow */", "-\t\t\tif (!sendKeyEvent (SWT.KeyDown, theEvent)) return OS.noErr;", "-\t\t\tbreak;", "+\tif (OS.VERSION < 0x1040) {", "+\t\tint [] keyCode = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "+\t\tswitch (keyCode [0]) {", "+\t\t\tcase 126: /* Up arrow */", "+\t\t\tcase 125: /* Down arrow */", "+\t\t\t\tif (!sendKeyEvent (SWT.KeyDown, theEvent)) return OS.noErr;", "+\t\t\t\tbreak;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3cefe7e3804459163112eb940824846", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "27723b1e4b2ae87a193517c00ef751923d7f193b", "commitAfterChange": "5e467403f09c889574f829fcf948e58433761966", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " int kEventRawKeyDown (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " int kEventRawKeyDown (int nextHandler, int theEvent, int userData)", "diff": ["-\tint [] keyCode = new int [1];", "-\tOS.GetEventParameter (theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "-\tswitch (keyCode [0]) {", "-\t\tcase 36: /* Return */", "-\t\t\t/*", "-\t\t\t* Feature in the Macintosh.  The default behaviour when the return key is pressed is", "-\t\t\t* to select the default button.  This is not the expected behaviour for Composite and", "-\t\t\t* its subclasses.  The fix is to avoid calling the default handler.", "-\t\t\t*/", "-\t\t\treturn OS.noErr;", "+\tif ((state & CANVAS) != 0) {", "+\t\tint [] keyCode = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "+\t\tswitch (keyCode [0]) {", "+\t\t\tcase 36: /* Return */", "+\t\t\t\t/*", "+\t\t\t\t* Feature in the Macintosh.  The default behaviour when the return key is pressed is", "+\t\t\t\t* to select the default button.  This is not the expected behaviour for Composite and", "+\t\t\t\t* its subclasses.  The fix is to avoid calling the default handler.", "+\t\t\t\t*/", "+\t\t\t\treturn OS.noErr;", "+\t\t}"]}], "num": 9060}
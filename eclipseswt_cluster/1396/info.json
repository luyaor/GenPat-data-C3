{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59f6d59bbee85bd467e533737739d74b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2df2795014a02510c143c8e3ab716c2f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 276, "signatureBeforeChange": "   \tpublic void textChanged(int startOffset, int newLineCount, int replaceLineCount, int newCharCount, int replaceCharCount)", "signatureAfterChange": " public void setLineAlignment(int startLine, int lineCount, int alignment)", "diff": ["-\t */  ", "-\tpublic void textChanged(int startOffset, int newLineCount, int replaceLineCount, int newCharCount, int replaceCharCount) {", "-\t\tint startLine = parent.getLineAtOffset(startOffset);", "-\t\tboolean removedMaxLine = (maxWidthLineIndex > startLine && maxWidthLineIndex <= startLine + replaceLineCount);", "-\t\t// entire text deleted?", "-\t\tif (startLine == 0 && replaceLineCount == lineCount) {", "-\t\t\tlineCount = newLineCount;", "-\t\t\tlineWidth = new int[lineCount];", "-\t\t\treset(0, lineCount, false);", "-\t\t\tmaxWidth = 0;", "-\t\t}", "-\t\telse {", "-\t\t\tlinesChanged(startLine, -replaceLineCount);", "-\t\t\tlinesChanged(startLine, newLineCount);", "-\t\t\tlineWidth[startLine] = -1;", "-\t\t}", "-\t\t// only calculate the visible lines. otherwise measurements of changed lines ", "-\t\t// outside the visible area may subsequently change again without the ", "-\t\t// lines ever being visible.", "-\t\tcalculateVisible(startLine, newLineCount);", "-\t\t// maxWidthLineIndex will be -1 (i.e., unknown line width) if the widget has ", "-\t\t// not been visible yet and the changed lines have therefore not been", "-\t\t// calculated above.", "-\t\tif (removedMaxLine || ", "-\t\t\t(maxWidthLineIndex != -1 && lineWidth[maxWidthLineIndex] < maxWidth)) {", "-\t\t\t// longest line has been removed or changed and is now shorter.", "-\t\t\t// need to recalculate maximum content width for all lines", "-\t\t\tmaxWidth = 0;", "-\t\t\tfor (int i = 0; i < lineCount; i++) {", "-\t\t\t\tif (lineWidth[i] > maxWidth) {", "-\t\t\t\t\tmaxWidth = lineWidth[i];", "-\t\t\t\t\tmaxWidthLineIndex = i;", "-\t\t\t\t}", "-\t\t\t}\t\t\t", "-\t\t}", "-\t}", "+ */", "+public void setLineAlignment(int startLine, int lineCount, int alignment) {", "+\tcheckWidget();", "+\tif (isListening(LineGetStyle)) return;", "+\tif (startLine < 0 || startLine + lineCount > content.getLineCount()) {", "+\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t}", "+", "+\trenderer.setLineAlignment(startLine, lineCount, alignment);", "+\tresetCache(startLine, lineCount);", "+\tredrawLines(startLine, lineCount);", "+\tint caretLine = getCaretLine();", "+\tif (startLine <= caretLine && caretLine < startLine + lineCount) {", "+\t\tsetCaretLocation();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5320dfd379caae898f8ffa2bf4d38f82", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 69, "signatureBeforeChange": " void redrawAfterModify(SelectableItem modifiedItem, int modifiedIndex)", "signatureAfterChange": " void removeColumn(TreeColumn column)", "diff": ["- */", "-void redrawAfterModify(SelectableItem modifiedItem, int modifiedIndex) {", "-\tint redrawStartY;", "-\tint redrawStopY;", "-\tint itemChildIndex = ((TreeItem) modifiedItem).getIndex();", "-\tint topIndex = getTopIndex();", "-\tint itemHeight = getItemHeight();", "-\tint redrawItemIndex;", "-\tint itemCount;", "-\tAbstractTreeItem parentItem = ((TreeItem) modifiedItem).getParentItem();", "-\tAbstractTreeItem redrawItem = null;", "-", "-\tif (redrawParentItem(modifiedItem) == false) {", "-\tif (parentItem == null) {\t\t\t\t\t\t\t// a root item is added/removed", "-\t\tparentItem = getRoot();", "-\titemCount = parentItem.getItemCount();", "-\t// redraw hierarchy decorations of preceeding item if the last item at a tree ", "-\t// level was added/removed", "-\t// otherwise, if the first item was removed, redraw the parent to update hierarchy icon", "-\tif (itemChildIndex > 0) {\t\t\t\t\t\t\t// more than one item left at this tree level", "-\t\t// added/removed last item at this tree level? have to test >=.", "-\t\t// when removing last item, item index is outside itemCount ", "-\t\tif (itemChildIndex >= itemCount - 1) { ", "-\t\t\tredrawItem = (AbstractTreeItem) parentItem.getChildren().elementAt(itemChildIndex - 1);", "-\telse ", "-\tif (getVisibleItemCount() > 0 && itemCount < 2) {\t// last item at this level removed/first item added?", "-\t\tredrawItem = parentItem;\t\t\t\t\t\t// redraw parent item to update hierarchy icon", "-\t}", "-\tif (redrawItem != null) {", "-\t\tredrawItemIndex = redrawItem.getVisibleIndex();", "-\t\tif (modifiedIndex == -1) {", "-\t\t\tmodifiedIndex = redrawItemIndex + 1;", "-\t\t}", "-\t\tredrawStartY = (redrawItemIndex - topIndex) * itemHeight;", "-\t\tredrawStopY = (modifiedIndex - topIndex) * itemHeight;", "-\t\tredraw(", "-\t\t\t0, ", "-\t\t\tredrawStartY, ", "-\t\t\tredrawItem.getCheckboxXPosition(), \t\t\t// only redraw up to and including hierarchy icon to avoid flashing", "-\t\t\tredrawStopY - redrawStartY, false);", "-\t}\t", "-\tif (modifiedIndex == 0) {\t\t\t\t\t\t\t\t\t\t\t// added/removed first item ?", "-\t\tredraw(0, 0, getClientArea().width, getItemHeight() * 2, false);// redraw new first two items to ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// fix vertical hierarchy line", "+void removeColumn(TreeColumn column) {", "+\tint numColumns = getColumnCount();", "+\tint index = column.getIndex();", "+", "+\tTreeColumn[] newColumns = new TreeColumn[columns.length - 1];", "+\tSystem.arraycopy(columns, 0, newColumns, 0, index);", "+\tSystem.arraycopy(columns, index + 1, newColumns, index, columns.length - index);", "+\tcolumns = newColumns;", "+\t", "+\tTreeColumn lastColumn = columns[columns.length - 1];", "+\tgetHorizontalBar().setMaximum(lastColumn.getX() + lastColumn.width);"]}], "num": 1396}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30d3c5037fe5eb979e53d0dac14223ff", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a66f7343f1eea4ab04cf93a49f456104", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleClientSite.java", "commitBeforeChange": "647ee8ac0b4674688a64286f665d0bc51c0718e8", "commitAfterChange": "8c113a426e5f05549192616bd0df00498451eac3", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 90, "signatureBeforeChange": " private boolean saveToStorageFile(File file)", "signatureAfterChange": " private boolean saveToStorageFile(File file)", "diff": ["-\tint /*long*/[] address = new int /*long*/[1];", "-\tif (objIOleObject.QueryInterface(COM.IIDIPersistFile, address) == COM.S_OK) {", "-\t\tString fileName = null; ", "-\t\tIPersistFile persistFile = new IPersistFile(address[0]);", "-\t\tint /*long*/[] ppszFileName = new int /*long*/[1];", "-\t\tif (persistFile.GetCurFile(ppszFileName) == COM.S_OK) {", "-\t\t\tint /*long*/ pszFileName = ppszFileName [0];", "-\t\t    int length = OS.wcslen(pszFileName);", "-\t\t    char[] buffer = new char[length];", "-\t\t    OS.MoveMemory(buffer, pszFileName, length * 2);", "-\t\t    fileName = new String(buffer, 0, length);", "-\t\t    // Doc says to use IMalloc::Free, but CoTaskMemFree() does the same ", "-\t\t    COM.CoTaskMemFree(pszFileName);", "-\t\t}", "-\t\tint result;", "-\t\tString newFile = file.getAbsolutePath();", "-\t\tif (fileName != null && fileName.equalsIgnoreCase(newFile)) {", "-\t\t\tresult = persistFile.Save(0, false);", "-\t\t} else {", "-\t\t\tint length = newFile.length();", "-\t\t\tchar[] buffer = new char[length + 1];", "-\t\t\tnewFile.getChars(0, length, buffer, 0);", "-\t\t\tint /*long*/ lpszNewFile = COM.CoTaskMemAlloc(buffer.length * 2);", "-\t\t\tCOM.MoveMemory(lpszNewFile, buffer, buffer.length * 2);", "-\t\t\tresult = persistFile.Save(lpszNewFile, false);", "-\t\t\tCOM.CoTaskMemFree(lpszNewFile);", "-\t\t}", "-\t\tpersistFile.Release();", "-\t\tif (result == COM.S_OK) return true;", "-\t}", "-\t", "+\tint /*long*/[] address = new int /*long*/[1];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4b46c7490d35dbadfb442b8177441a9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleClientSite.java", "commitBeforeChange": "306f95301b97e9d8ba82cad67812ad605a6ab86b", "commitAfterChange": "de5b9b1f68cbb466a86733b45d1a63f217e8c701", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": " private boolean saveToStorageFile(File file)", "signatureAfterChange": " private boolean saveToStorageFile(File file)", "diff": ["-\t// get access to the persistent storage mechanism", "+\tif (objIOleObject.QueryInterface(COM.IIDIPersistFile, address) == COM.S_OK) {", "+\t\tString fileName = null; ", "+\t\tIPersistFile persistFile = new IPersistFile(address[0]);", "+\t\tint /*long*/[] ppszFileName = new int /*long*/[1];", "+\t\tif (persistFile.GetCurFile(ppszFileName) == COM.S_OK) {", "+\t\t\tint /*long*/ pszFileName = ppszFileName [0];", "+\t\t    int length = OS.wcslen(pszFileName);", "+\t\t    char[] buffer = new char[length];", "+\t\t    OS.MoveMemory(buffer, pszFileName, length * 2);", "+\t\t    fileName = new String(buffer, 0, length);", "+\t\t    // Doc says to use IMalloc::Free, but CoTaskMemFree() does the same ", "+\t\t    COM.CoTaskMemFree(pszFileName);", "+\t\t}", "+\t\tint result;", "+\t\tString newFile = file.getAbsolutePath();", "+\t\tif (fileName != null && fileName.equalsIgnoreCase(newFile)) {", "+\t\t\tresult = persistFile.Save(0, false);", "+\t\t} else {", "+\t\t\tint length = newFile.length();", "+\t\t\tchar[] buffer = new char[length + 1];", "+\t\t\tnewFile.getChars(0, length, buffer, 0);", "+\t\t\tint lpszNewFile = COM.CoTaskMemAlloc(buffer.length * 2);", "+\t\t\tCOM.MoveMemory(lpszNewFile, buffer, buffer.length * 2);", "+\t\t\tresult = persistFile.Save(lpszNewFile, false);", "+\t\t\tCOM.CoTaskMemFree(lpszNewFile);", "+\t\t}", "+\t\tpersistFile.Release();", "+\t\tif (result == COM.S_OK) return true;", "+\t}", "+\t", "+\t// get access to the persistent storage mechanism"]}], "num": 7775}
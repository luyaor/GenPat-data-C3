{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d2c1192f65fbadaa4e95750d6bd836af", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b49a3e6601cdf943a6a539f1e6d11d9e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "6930fdd35d9cdffd6d05c778fb4b82a2018d7fcb", "commitAfterChange": "4b4619a6b5b2cd61a37c980601ead9593d587b9d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  void applyEditSegments ()", "signatureAfterChange": "  void applyEditSegments ()", "diff": ["-\tif (!hooks (SWT.Segments) && !filters (SWT.Segments)) return;", "+\tif (!hooks (SWT.Segments) && !filters (SWT.Segments) && (state & HAS_AUTO_DIRECTION) == 0) return;", "-", "-\t/* Get segments text */", "-\tEvent event = new Event ();", "-\tevent.text = string;", "-\tevent.segments = segments;", "-\tsendEvent (SWT.Segments, event);", "+\t/* Get segments */", "+\tsegments = null;", "+\tEvent event = getSegments (string);", "+\tif (event == null || event.segments == null) return;", "-\tif (segments == null) return;", "-\tint nSegments = segments.length;", "+\tint nSegments = segments.length; ", "-\tlength = string == null ? 0 : string.length ();", "-", "-\tfor (int i = 1; i < nSegments; i++) {", "-\t\tif (event.segments [i] < event.segments [i - 1] || event.segments [i] > length) {", "-\t\t\terror (SWT.ERROR_INVALID_ARGUMENT);", "-\t\t}", "-\t}", "-", "+\t}", "+\tif (segmentsChars != null && segmentsChars.length > 0) {", "+\t\t/* ", "+\t\t * In addition to enforcing the required direction by prepending a UCC (LRE", "+\t\t * or RLE), also set the direction through a Window style.", "+\t\t * This is to ensure correct caret movement, and makes sense even when the", "+\t\t * UCC was added by an authentic SegmentListener.", "+\t\t */", "+\t\tif (segmentsChars[0] == RLE) {", "+\t\t\tsuper.updateTextDirection(SWT.RIGHT_TO_LEFT);", "+\t\t} else if (segmentsChars[0] == LRE) {", "+\t\t\tsuper.updateTextDirection(SWT.LEFT_TO_RIGHT);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb1d5e2306f8d32274b64ee7c9b49b0f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "9e2e2840ac367eab30032d03153cd028ed78aaef", "commitAfterChange": "6a4fab6a6810d4c98deea393a2884fa3aa164dfe", "methodNumberBeforeChange": 183, "methodNumberAfterChange": 183, "signatureBeforeChange": " int [] getBidiSegments(int lineOffset, String line)", "signatureAfterChange": "  StyledTextEvent getBidiSegments(int lineOffset, String line)", "diff": ["- */", "-int [] getBidiSegments(int lineOffset, String line) {", "+StyledTextEvent getBidiSegments(int lineOffset, String line) {", "-\t\treturn getBidiSegmentsCompatibility(line, lineOffset);", "+\t\tStyledTextEvent event = new StyledTextEvent(content);", "+\t\tevent.segments = getBidiSegmentsCompatibility(line, lineOffset);", "+\t\treturn event;", "+\tif (event == null || event.segments == null || event.segments.length == 0) return null;", "-\tint[] segments;", "-\tif (event == null || event.segments == null || event.segments.length == 0) {", "-\t\tsegments = new int[] {0, lineLength};", "-\t} else {", "-\t\tint segmentCount = event.segments.length;", "-\t\t", "+\tint[] segments = event.segments;", "+\tint segmentCount = segments.length;", "+\tif (event.segmentsChars == null) {", "-\t\tif (event.segments[0] != 0) {", "+\t\tif (segments[0] != 0) {", "-\t\t} \t", "+\t\t}", "-\t\t\tif (event.segments[i] <= event.segments[i - 1] || event.segments[i] > lineLength) {", "+\t\t\tif (segments[i] <= segments[i - 1] || segments[i] > lineLength) {", "-\t\t\t} \t", "+\t\t\t}", "-\t\tif (event.segments[segmentCount - 1] != lineLength) {", "+\t\tif (segments[segmentCount - 1] != lineLength) {", "-\t\t} else {", "-\t\t\tsegments = event.segments;", "+\t\t}", "+\t\tevent.segments = segments;", "+\t} else {", "+\t\tfor (int i = 1; i < segmentCount; i++) {", "+\t\t\tif (event.segments[i] < event.segments[i - 1] || event.segments[i] > lineLength) {", "+\t\t\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\t\t}", "-\treturn segments;", "+\treturn event;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66bd194ecac58762bc8d943615e4d9bf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "db8003c8f90beb76b88b1209aa0ad9e6c8d8c3d2", "commitAfterChange": "d3c0efa94b11c766b17f4670a7e8438e97a87bdc", "methodNumberBeforeChange": 183, "methodNumberAfterChange": 183, "signatureBeforeChange": " StyledTextEvent getBidiSegments(int lineOffset, String line)", "signatureAfterChange": " StyledTextEvent getBidiSegments(int lineOffset, String line)", "diff": ["-\tint segmentCount = segments.length;", "-\tif (event.segmentsChars == null) {", "-\t\t// test segment index consistency", "-\t\tif (segments[0] != 0) {", "+\tif (segments[0] > lineLength) {", "+\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t}", "+\tfor (int i = 1; i < segments.length; i++) {", "+\t\tif (segments[i] <= segments[i - 1] || segments[i] > lineLength) {", "-\t\t}", "-\t\tfor (int i = 1; i < segmentCount; i++) {", "-\t\t\tif (segments[i] <= segments[i - 1] || segments[i] > lineLength) {", "-\t\t\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);", "-\t\t\t}", "-\t\t}", "-\t\t// ensure that last segment index is line end offset", "-\t\tif (segments[segmentCount - 1] != lineLength) {", "-\t\t\tsegments = new int[segmentCount + 1];", "-\t\t\tSystem.arraycopy(event.segments, 0, segments, 0, segmentCount);", "-\t\t\tsegments[segmentCount] = lineLength;", "-\t\t}", "-\t\tevent.segments = segments;", "-\t} else {", "-\t\tfor (int i = 1; i < segmentCount; i++) {", "-\t\t\tif (event.segments[i] < event.segments[i - 1] || event.segments[i] > lineLength) {", "-\t\t\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);", "-\t\t\t}"]}], "num": 42528}
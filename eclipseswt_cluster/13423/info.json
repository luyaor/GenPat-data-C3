{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3dc33bf4d77ff3d55e256cd6ebff10bc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0c6ca285d54c4a45524486e44b73fd86", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "309644bf324d87b6316efb407a46b35c706d2891", "commitAfterChange": "25e0a88282a8f52572829023c99494b77782afb9", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  void addInvalidate (Control control)", "signatureAfterChange": "  void addInvalidate (Control control)", "diff": ["+\tif (invalidateHandler == 0) {", "+\t\tint handler = invalidateHandler = OS.gcnew_NoArgsDelegate (jniRef, \"invalidateHandler\");", "+\t\tint operation = OS.Dispatcher_BeginInvoke (dispatcher, OS.DispatcherPriority_Send, handler);", "+\t\tOS.GCHandle_Free (operation);", "+\t\tOS.GCHandle_Free (handler);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61faac8b1ee4c41d613a43f22d4c458f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "fa63240efdeedc784957e35c0bbc9be236fdf23a", "commitAfterChange": "b6d63697d93cb9f75fd821f66bd8fc084e724f13", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 99, "signatureBeforeChange": " public boolean sleep ()", "signatureAfterChange": " public boolean sleep ()", "diff": ["-//System.out.print(\"<\");", "-//try {", "-//\tif (getMessageCount () != 0) return true;", "-//\tsleep = 0;", "-//\tOS.DispatcherFrame_Continue(frame, true);", "-//\tOS.Dispatcher_PushFrame(frame);", "-//\tsleep = -1;", "+\tint handler = OS.gcnew_NoArgsDelegate (jniRef, \"sleep_noop\");", "+\tsleep = OS.Dispatcher_BeginInvoke(dispatcher, 0, handler);", "+\tOS.DispatcherOperation_Wait(sleep);", "+\tOS.GCHandle_Free(handler);", "+\tOS.GCHandle_Free(sleep);", "+\tsleep = 0;", "-//} finally {", "-//\tSystem.out.println(\">\");", "-//}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "875045a950c82982f31b727ff0a545cc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "fa63240efdeedc784957e35c0bbc9be236fdf23a", "commitAfterChange": "b6d63697d93cb9f75fd821f66bd8fc084e724f13", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 78, "signatureBeforeChange": " public boolean readAndDispatch ()", "signatureAfterChange": " public boolean readAndDispatch ()", "diff": ["-//\tSystem.out.print(\"[\");", "-\ttry {", "-\t\tOS.DispatcherFrame_Continue (frame, true);", "-\t\tOS.Dispatcher_PushFrame (frame);", "-\t\tif (!idle) {", "-\t\t\trunDeferredEvents();", "-\t\t\treturn true;", "-\t\t}", "-//\t\treturn runAsyncMessages (false);", "-\t\treturn !idle;", "-\t} finally {", "-//\t\tSystem.out.print(\"]\");", "+\tidle = false;", "+\tint handler = OS.gcnew_NoArgsDelegate(jniRef, \"setIdleHandler\");", "+\toperation = OS.Dispatcher_BeginInvoke(dispatcher, 2, handler);", "+\tOS.DispatcherOperation_Wait(operation);", "+\tOS.GCHandle_Free(handler);", "+\tOS.GCHandle_Free(operation);", "+\toperation = 0;", "+\tif (!idle) {", "+\t\trunDeferredEvents();", "+\t\treturn true;", "+\treturn runAsyncMessages(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f300f368f7837e88683834684cc078f4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "1054da589c4ce7da01e9eb9d8e4e75bf9b62a2db", "commitAfterChange": "6b71999963d0165be5a5c1e361d6a8dce42a829d", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "  void initGdip(boolean draw, boolean fill)", "signatureAfterChange": "  void initGdip(boolean draw, boolean fill)", "diff": ["-\tif (gdipGraphics == 0) gdipGraphics = data.gdipGraphics = Gdip.Graphics_new(handle);", "+\tif (gdipGraphics == 0) {", "+\t\t/*", "+\t\t* Feature in GDI+. The GDI+ clipping set with Graphics->SetClip()", "+\t\t* is always intersected with the GDI clipping at the time the", "+\t\t* GDI+ graphics is created.  This means that the clipping ", "+\t\t* cannot be reset.  The fix is to clear the clipping before", "+\t\t* the GDI+ graphics is created and reset it afterwards.", "+\t\t*/", "+\t\tint hRgn = OS.CreateRectRgn(0, 0, 0, 0);", "+\t\tint result = OS.GetClipRgn(handle, hRgn);", "+\t\tOS.SelectClipRgn(handle, 0);", "+\t\tgdipGraphics = data.gdipGraphics = Gdip.Graphics_new(handle);", "+\t\tif (result == 1) setClipping(hRgn);", "+\t\tOS.DeleteObject(hRgn);", "+\t}"]}], "num": 13423}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aee5deb3a41c1aa57442005269606279", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bba4e42b0f77a0c26d3488ff5dab3df6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java", "commitBeforeChange": "77b3fbb225bf670e0c417bef815fb7c859299e19", "commitAfterChange": "e0856b8b808f57d665e09a4e0393d4c9c1b2f815", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": " \tString dataHexDump(String lineDelimiter)", "signatureAfterChange": " \tString dataHexDump(String lineDelimiter)", "diff": ["-\t\tchar[] dump = new char[imageData.height * (6 + 3 * imageData.bytesPerLine + lineDelimiter.length())];", "-\t\tint index = 0;", "-\t\tfor (int i = 0; i < imageData.data.length; i++) {", "-\t\t\tif (i % imageData.bytesPerLine == 0) {", "-\t\t\t\tint line = i / imageData.bytesPerLine;", "-\t\t\t\tdump[index++] = Character.forDigit(line / 1000 % 10, 10);", "-\t\t\t\tdump[index++] = Character.forDigit(line / 100 % 10, 10);", "-\t\t\t\tdump[index++] = Character.forDigit(line / 10 % 10, 10);", "-\t\t\t\tdump[index++] = Character.forDigit(line % 10, 10);", "-\t\t\t\tdump[index++] = ':';", "-\t\t\t\tdump[index++] = ' ';", "-\t\t\t}", "-\t\t\tbyte b = imageData.data[i];", "-\t\t\tdump[index++] = Character.forDigit((b & 0xF0) >> 4, 16);", "-\t\t\tdump[index++] = Character.forDigit(b & 0x0F, 16);", "-\t\t\tdump[index++] = ' ';", "-\t\t\tif ((i + 1) % imageData.bytesPerLine == 0) {", "-\t\t\t\tdump[index++] = lineDelimiter.charAt(0);", "-\t\t\t\tif (lineDelimiter.length() > 1)", "-\t\t\t\t\tdump[index++] = lineDelimiter.charAt(1);", "-\t\t\t}", "+\t\tboolean truncated = false;", "+\t\tchar[] dump = null;", "+\t\ttry {", "+\t\t\tdump = new char[imageData.height * (6 + 3 * imageData.bytesPerLine + lineDelimiter.length())];", "+\t\t} catch (OutOfMemoryError e) {", "+\t\t\t/* Too much data to dump - truncate at 4M. */", "+\t\t\tdump = new char[4 * 1024 * 1024];", "+\t\t\ttruncated = true;", "+\t\tint index = 0;", "+\t\ttry {", "+\t\t\tfor (int i = 0; i < imageData.data.length; i++) {", "+\t\t\t\tif (i % imageData.bytesPerLine == 0) {", "+\t\t\t\t\tint line = i / imageData.bytesPerLine;", "+\t\t\t\t\tdump[index++] = Character.forDigit(line / 1000 % 10, 10);", "+\t\t\t\t\tdump[index++] = Character.forDigit(line / 100 % 10, 10);", "+\t\t\t\t\tdump[index++] = Character.forDigit(line / 10 % 10, 10);", "+\t\t\t\t\tdump[index++] = Character.forDigit(line % 10, 10);", "+\t\t\t\t\tdump[index++] = ':';", "+\t\t\t\t\tdump[index++] = ' ';", "+\t\t\t\t}", "+\t\t\t\tbyte b = imageData.data[i];", "+\t\t\t\tdump[index++] = Character.forDigit((b & 0xF0) >> 4, 16);", "+\t\t\t\tdump[index++] = Character.forDigit(b & 0x0F, 16);", "+\t\t\t\tdump[index++] = ' ';", "+\t\t\t\tif ((i + 1) % imageData.bytesPerLine == 0) {", "+\t\t\t\t\tdump[index++] = lineDelimiter.charAt(0);", "+\t\t\t\t\tif (lineDelimiter.length() > 1)", "+\t\t\t\t\t\tdump[index++] = lineDelimiter.charAt(1);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (IndexOutOfBoundsException e) {}", "-\t\t\tresult = new String(dump, 0, 4 * 1024 * 1024) + \"\\n ...data dump truncated at 4M...\";", "+\t\t\tresult = new String(dump, 0, 4 * 1024 * 1024);", "+\t\t\ttruncated = true;", "+\t\tif (truncated) result += \"\\n ...data dump truncated at 4M...\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cd8acfd35f2cc62d5213638d7403983", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "6de5d128065bf1d280a4f3338b044f38646dc566", "commitAfterChange": "f8ef3cf7f50531eb98cb5b6c6b6b74b2ed865cbd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create(Composite parent, int style)", "signatureAfterChange": "  public void create(Composite parent, int style)", "diff": ["-\t\t\t\t\t\tint extensionIndex = url.lastIndexOf('.');", "-\t\t\t\t\t\tif (extensionIndex != -1) {", "-\t\t\t\t\t\t\tString extension = url.substring(extensionIndex);", "-\t\t\t\t\t\t\tif (extension.equalsIgnoreCase(EXTENSION_PDF)) {", "-\t\t\t\t\t\t\t\tPDFCount++;", "-\t\t\t\t\t\t\t\tif (PDFCount > MAX_PDF) {", "-\t\t\t\t\t\t\t\t\tCOM.FreeUnusedLibraries = false;", "+\t\t\t\t\t\tboolean isPDF = false;", "+\t\t\t\t\t\tString path = null;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tpath = new URL(url).getPath();", "+\t\t\t\t\t\t} catch (MalformedURLException e) {", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (path != null) {", "+\t\t\t\t\t\t\tint extensionIndex = path.lastIndexOf('.');", "+\t\t\t\t\t\t\tif (extensionIndex != -1) {", "+\t\t\t\t\t\t\t\tString extension = path.substring(extensionIndex);", "+\t\t\t\t\t\t\t\tif (extension.equalsIgnoreCase(EXTENSION_PDF)) {", "+\t\t\t\t\t\t\t\t\tisPDF = true;", "+\t\t\t\t\t\t\t\t\tPDFCount++;", "+\t\t\t\t\t\t\t\t\tif (PDFCount > MAX_PDF) {", "+\t\t\t\t\t\t\t\t\t\tCOM.FreeUnusedLibraries = false;", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\thookDOMListeners(webBrowser, isTop);", "+\t\t\t\t\t\tif (!isPDF) {", "+\t\t\t\t\t\t\thookDOMListeners(webBrowser, isTop);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "acc43434aa9f3bb3becfd5cc5a50a855", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java", "commitBeforeChange": "925f14a33eeac0f4833418994841b4456efea4a1", "commitAfterChange": "33b3d85737bcb5645b2c280ec92e2f0b556ab42b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  public void test_getTransparencyType()", "signatureAfterChange": "  public void test_getTransparencyType()", "diff": ["-\tImage image = new Image(Display.getDefault(), getClass().getResourceAsStream(transparentImageFilenames[0]));", "+\tInputStream stream = getClass().getResourceAsStream(transparentImageFilenames[0]);", "+\tImage image = new Image(Display.getDefault(), stream);", "+\ttry {", "+\t\tstream.close();", "+\t} catch (IOException e) {}", "-\timage = new Image(Display.getDefault(), getClass().getResourceAsStream(imageFilenames[0] + '.' + imageFormats[imageFormats.length-1]));", "+\tstream = getClass().getResourceAsStream(imageFilenames[0] + '.' + imageFormats[imageFormats.length-1]);", "+\timage = new Image(Display.getDefault(), stream);", "+\ttry {", "+\t\tstream.close();", "+\t} catch (IOException e) {}"]}], "num": 18039}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b4c38de4bf5930a75d127e23c8679ed", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14c12b9c36be845f8c338e3e2b26cb75", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "commitAfterChange": "bbeab947327689cb203638e742e58f555e6c1b64", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 56, "signatureBeforeChange": " boolean setItemBounds()", "signatureAfterChange": " void onMenu(Event event)", "diff": ["- */", "-boolean setItemBounds() {", "-\tboolean changed = false;", "-\tif (isDisposed()) return changed;", "-\tRectangle area = super.getClientArea();", "-\txClient = area.x + borderLeft + marginWidth;", "-\tif (onBottom) {", "-\t\tyClient = area.y + borderTop + marginHeight; ", "-\t\tyClient = area.y + borderTop + tabHeight + 1 + marginHeight; ", "-\t\t// +1 is for the line at the bottom of the tabs", "-\t", "-\tif (area.width <= 0 || area.height <= 0 || items.length == 0) return changed;", "-\t", "-\tint[] widths = new int[items.length];", "-\tGC gc = new GC(this);", "-\tfor (int i = 0; i < items.length; i++) {", "-\t\twidths[i] = items[i].preferredWidth(gc);", "-\t}", "-\tgc.dispose();", "-", "-\tint oldAverageWidth = 0;", "-\tint averageWidth = (area.width - borderLeft - borderRight) / items.length;", "-\twhile (averageWidth > oldAverageWidth) {", "-\t\tint width = area.width - borderLeft - borderRight;", "-\t\tint count = items.length;", "-\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\tif (widths[i] < averageWidth) {", "-\t\t\t\twidth -= widths[i];", "-\t\t\t\tcount--;", "+}", "+void onMenu(Event event) {", "+\tif (single && selectedIndex != -1) {", "+\t\tfinal CTabFolderEvent e = new CTabFolderEvent(CTabFolder.this);", "+\t\te.widget = this;", "+\t\te.time = event.time;", "+\t\tRectangle rect = items[selectedIndex].getBounds();", "+\t\trect.y += onBottom ? -HIGHLIGHT_HEADER : HIGHLIGHT_HEADER;", "+\t\te.rect = rect;", "+\t\tif (listListeners.length == 0) {", "+\t\t\tshowList(e.rect, SWT.LEFT);", "+\t\t} else {", "+\t\t\tfor (int j = 0; j < listListeners.length; j++) {", "+\t\t\t\tlistListeners[j].showList(e);", "-\t\toldAverageWidth = averageWidth;", "-\t\tif (count > 0) {", "-\t\t\taverageWidth = width / count;", "-\t\t}", "-\taverageWidth = Math.max(averageWidth, MIN_TAB_WIDTH * tabHeight);", "-\tfor (int i = 0; i < items.length; i++) {", "-\t\tif (widths[i] > averageWidth) {", "-\t\t\twidths[i] = averageWidth;", "-\t\t}", "-\t}", "-\t", "-\tint totalWidth = 0;", "-\tfor (int i = 0; i < items.length; i++) { ", "-\t\tCTabItem tab = items[i];", "-\t\tif (tab.height != tabHeight || tab.width != widths[i]) changed = true;", "-\t\ttab.height = tabHeight;", "-\t\ttab.width = widths[i];", "-\t\ttotalWidth += widths[i];", "-\t}", "-\t", "-\tint areaWidth = area.x + area.width - borderRight;", "-\tif (totalWidth <= areaWidth) {", "-\t\ttopTabIndex = 0;", "-\t} ", "-\tif (setItemLocation()) changed = true;", "-\t", "-\t// Is there a gap after last item showing", "-\tif (correctLastItem()) changed = true;", "-\treturn changed;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5561a2a019bd7f9e6a22a79a97f4dce7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "2be0f523c12be706f131f18494ce7c53c5d33e35", "commitAfterChange": "12b097f1ff6fdc23e2e6d19434a4af7db1bb871d", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r \r void init (Device device, FontData[] fds)", "signatureAfterChange": "\r \r void init (Device device, FontData[] fds)", "diff": ["-\r", "-\tint xDisplay = device.xDisplay;\r", "-\t/* An alternative locale have to be set in the first font data */\r", "+\t/* Change current locale if needed. Note: only the first font data is used */\r", "-\t}\t\t\r", "+\t}\r", "-\t/* Copy font datas since they might be simplified. */\r", "+\t/* Generate desire font name */\r", "-\tFontData[] newFds = new FontData [fds.length];\r", "+\tStringBuffer stringBuffer = new StringBuffer();\r", "-\t\tFontData newFd = newFds[i] = new FontData();\r", "-\t\tnewFd.foundry = fd.foundry;\r", "-\t\tnewFd.fontFamily = fd.fontFamily;\r", "-\t\tnewFd.weight = fd.weight;\r", "-\t\tnewFd.slant = fd.slant;\r", "-\t\tnewFd.setWidth = fd.setWidth;\r", "-\t\tnewFd.addStyle = fd.addStyle;\r", "-\t\tnewFd.pixels = fd.pixels;\r", "-\t\tnewFd.points = fd.points;\r", "+\t\tint hRes = fd.horizontalResolution, vRes = fd.verticalResolution;\r", "-\t\t\tnewFd.horizontalResolution = dpi.x;\r", "-\t\t\tnewFd.verticalResolution = dpi.y;\r", "-\t\t} else {\r", "-\t\t\tnewFd.horizontalResolution = fd.horizontalResolution;\r", "-\t\t\tnewFd.verticalResolution = fd.verticalResolution;\r", "+\t\t\tfd.horizontalResolution = dpi.x;\r", "+\t\t\tfd.verticalResolution = dpi.y;\r", "-\t\tnewFd.spacing = fd.spacing;\r", "-\t\tnewFd.averageWidth = fd.averageWidth;\r", "-\t\tnewFd.characterSetRegistry = fd.characterSetRegistry;\r", "-\t\tnewFd.characterSetName = fd.characterSetName;\r", "-\t}\r", "-\t\r", "-\t/* Load desired font. */\r", "-\tint[] missingCharset = new int[1];\r", "-\tint[] missingCharsetCount = new int[1];\r", "-\tint[] defString = new int[1];\r", "-\tStringBuffer stringBuffer = new StringBuffer(newFds[0].getXlfd());\t\r", "-\tfor (int i=1; i<newFds.length; i++) {\r", "+\t\tstringBuffer.append(fd.getXlfd());\r", "-\t\tstringBuffer.append(newFds[i].getXlfd());\r", "+\t\tfd.horizontalResolution = hRes;\r", "+\t\tfd.verticalResolution = vRes;\r", "-\tbyte[] buffer = Converter.wcsToMbcs(null, stringBuffer.toString() , true);\r", "-\tint fontSet = OS.XCreateFontSet(xDisplay, buffer, missingCharset, missingCharsetCount, defString);\r", "-\t\r", "+\r", "+\t/* Append simplified font name */\t\t\r", "+\tFontData newFd = new FontData();\r", "+\tnewFd.points = firstFd.points;\r", "-\t* If failed to load desired font or there are missing character\r", "-\t* sets, simplify XLFDs and try again.\r", "+\t* Bug in Motif.  In Japanese AIX only, in some cases loading a bold Japanese\r", "+\t* font takes a very long time (10 minutes) when there are no Japanese bold\r", "+\t* fonts available.  The fix is to wildcard the field weight.\r", "-\tif (fontSet == 0 || missingCharsetCount[0] != 0) {\r", "-\t\tint index = 0;\r", "-\t\tint lastMissingCharsetCount = fontSet != 0 ? missingCharsetCount[0] : 0xFFFF;\r", "-\t\tString loadedXlfds = getXlfds(fontSet);\r", "-\t\twhile ((index = wildcardXfld(newFds, index)) < newFds.length) {\r", "-\t\t\tstringBuffer.setLength(0);\r", "-\t\t\tstringBuffer.append(loadedXlfds);\r", "-\t\t\tif (stringBuffer.length() != 0) stringBuffer.append(\",\");\r", "-\t\t\tstringBuffer.append(newFds[index].getXlfd());\r", "-\t\t\tbuffer = Converter.wcsToMbcs(null, stringBuffer.toString(), true);\r", "-\t\t\tif (missingCharset[0] != 0) OS.XFreeStringList (missingCharset[0]);\r", "-\t\t\tif (fontSet != 0) OS.XFreeFontSet(xDisplay, fontSet);\r", "-\t\t\tfontSet = OS.XCreateFontSet(xDisplay, buffer, missingCharset, missingCharsetCount, defString);\r", "-\t  \t\tif (fontSet != 0) {\r", "-\t  \t\t\tif (missingCharsetCount[0] == 0) {\r", "-\t  \t\t\t\tbreak;\r", "-\t  \t\t\t} else {\r", "-\t  \t\t\t\tif (lastMissingCharsetCount > missingCharsetCount[0]) {\r", "-\t\t  \t\t\t\tlastMissingCharsetCount = missingCharsetCount[0];\r", "-\t\t  \t\t\t\tloadedXlfds = getXlfds(fontSet);\r", "-\t  \t\t\t\t}\t\t\t\t\r", "-\t  \t\t\t}\r", "-\t  \t\t}\r", "-\t\t}\r", "+\tif (OS.IsAIX && OS.IsDBLocale) {\r", "+\t\tstringBuffer.append(newFd.getXlfd());\r", "+\t} else {\r", "+\t\tnewFd.weight = firstFd.weight;\r", "+\t\tnewFd.slant = firstFd.slant;\r", "+\t\tstringBuffer.append(newFd.getXlfd());\r", "+\t\tnewFd.weight = null;\r", "+\t\tnewFd.slant = null;\t\t\r", "+\t\tstringBuffer.append(',');\r", "+\t\tstringBuffer.append(newFd.getXlfd());\r", "-\tif (missingCharset[0] != 0) OS.XFreeStringList (missingCharset[0]);\r", "-\t/* If no font could be loaded, use the system font. */\r", "-\tif (fontSet == 0) {\r", "+\t/* Load font list entry */\t\t \r", "+\tbyte[] buffer = Converter.wcsToMbcs(null, stringBuffer.toString() , true);\r", "+\tint fontListEntry = OS.XmFontListEntryLoad(device.xDisplay, buffer, OS.XmFONT_IS_FONTSET, OS.XmFONTLIST_DEFAULT_TAG);\r", "+\tif (fontListEntry != 0) {\r", "+\t\thandle = OS.XmFontListAppendEntry(0, fontListEntry);\r", "+\t\tOS.XmFontListEntryFree(new int[]{fontListEntry});\r", "+\t\tint codesetPtr = OS.nl_langinfo(OS.CODESET);\r", "+\t\tint length = OS.strlen(codesetPtr);\r", "+\t\tbyte[] codeset = new byte[length];\r", "+\t\tOS.memmove(codeset, codesetPtr, length);\r", "+\t\tcodePage = new String(Converter.mbcsToWcs(null, codeset));\r", "+\t} else {\r", "-\t} else {\r", "-\t\tint fontListEntry = OS.XmFontListEntryCreate(OS.XmFONTLIST_DEFAULT_TAG, OS.XmFONT_IS_FONTSET, fontSet);\r", "-\t\tif (fontListEntry != 0) {\r", "-\t\t\thandle = OS.XmFontListAppendEntry(0, fontListEntry);\r", "-\t\t\tOS.XmFontListEntryFree(new int[]{fontListEntry});\r", "-\t\t\tint codesetPtr = OS.nl_langinfo(OS.CODESET);\r", "-\t\t\tint length = OS.strlen(codesetPtr);\r", "-\t\t\tbyte[] codeset = new byte[length];\r", "-\t\t\tOS.memmove(codeset, codesetPtr, length);\r", "-\t\t\tcodePage = new String(codeset);\r", "-\t\t}\r", "-\r", "-\t/* Reset locale */\r", "+\t\r", "+\t/* Reset current locale if needed */\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "342831cd2bab744b38a885b4cf318dd4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "a95be7c50f695a73a58d9ded8bbfb5d9f9919f09", "commitAfterChange": "b1b0fd9b80ca15010164104d137cbaa93bd3ed64", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\t\tRectangle r = image.getBounds();", "+\t\t\tRectangle r = image.getBounds ();", "-\t\t\tFont font = getFont ();", "-\t\t\tFontInfo info = new FontInfo ();", "-\t\t\tOS.FetchFontInfo(font.id, font.size, font.style, info);", "-\t\t\tint fontHeight = info.ascent + info.descent;", "-\t\t\theight = fontHeight;", "-\t\t\t\tString string = Display.convertToLf (text);", "-\t\t\t\tint [] layout = new int [1];", "-\t\t\t\tOS.ATSUCreateTextLayout (layout);", "-\t\t\t\tif (layout [0] == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\tint [] atsuiStyle = new int [1];", "-\t\t\t\tOS.ATSUCreateStyle (atsuiStyle);", "-\t\t\t\tif (atsuiStyle [0] == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "-\t\t\t\tint ptr1 = OS.NewPtr (16);", "-\t\t\t\tOS.memcpy (ptr1, new int [] {font.handle}, 4); ", "-\t\t\t\tOS.memcpy (ptr1 + 4, new int [] {OS.X2Fix (font.size)}, 4);", "-\t\t\t\tint [] tags = new int [] {OS.kATSUFontTag, OS.kATSUSizeTag};", "-\t\t\t\tint [] sizes = new int [] {4, 4};", "-\t\t\t\tint [] values = new int [] {ptr1, ptr1 + 4};", "-\t\t\t\tOS.ATSUSetAttributes (atsuiStyle [0], tags.length, tags, sizes, values);", "-\t\t\t\tOS.DisposePtr (ptr1);", "-\t\t\t\tint ptr2 = OS.NewPtr (length * 2);", "-\t\t\t\tOS.memcpy (ptr2, string, length * 2);", "-\t\t\t\tOS.ATSUSetTextPointerLocation (layout [0], ptr2, 0, length, length);", "-\t\t\t\tOS.ATSUSetRunStyle (layout [0], atsuiStyle [0], 0, length);", "-\t\t\t\theight = 0;", "-\t\t\t\twidth = wHint != SWT.DEFAULT ? wHint : 0;", "-\t\t\t\tint [] breakCount = new int [1];", "-\t\t\t\tATSTrapezoid trapezoid = new ATSTrapezoid();", "-\t\t\t\tint start = 0, index = 0;", "-\t\t\t\tdo {", "-\t\t\t\t\tindex = string.indexOf ('\\n', start);", "-\t\t\t\t\tint end = index == -1 ? length : index;", "-\t\t\t\t\tif ((style & SWT.WRAP) != 0 && wHint != SWT.DEFAULT) {", "-\t\t\t\t\t\tOS.ATSUBatchBreakLines (layout [0], start, end - start, OS.X2Fix (wHint), breakCount);", "-\t\t\t\t\t\theight += (breakCount [0] + (index == -1 ? 1 : 0)) * fontHeight;", "+\t\t\t\tint [] ptr = new int [1];", "+\t\t\t\tOS.GetControlData (handle, (short) 0 , OS.kControlStaticTextCFStringTag, 4, ptr, null);", "+\t\t\t\tif (ptr [0] != 0) {", "+\t\t\t\t\torg.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\t\t\tif ((style & SWT.WRAP) != 0 && wHint != SWT.DEFAULT) ioBounds.h = (short) wHint;\t\t\t\t\t", "+\t\t\t\t\tif (font == null) {", "+\t\t\t\t\t\tOS.GetThemeTextDimensions (ptr [0], (short)OS.kThemePushButtonFont, OS.kThemeStateActive, ioBounds.h != 0, ioBounds, null);", "-\t\t\t\t\t\tOS.ATSUGetGlyphBounds (layout [0], 0, 0, start, end - start, (short) OS.kATSUseDeviceOrigins, 1, trapezoid, null);", "-\t\t\t\t\t\twidth = Math.max (width, OS.Fix2Long (trapezoid.upperRight_x) - OS.Fix2Long (trapezoid.upperLeft_x));", "-\t\t\t\t\t\theight += OS.Fix2Long (trapezoid.lowerRight_y) - OS.Fix2Long (trapezoid.upperRight_y);", "+\t\t\t\t\t\tint [] currentPort = new int [1];", "+\t\t\t\t\t\tOS.GetPort (currentPort);", "+\t\t\t\t\t\tOS.SetPortWindowPort (OS.GetControlOwner (handle));", "+\t\t\t\t\t\tOS.TextFont (font.id);", "+\t\t\t\t\t\tOS.TextFace (font.style);", "+\t\t\t\t\t\tOS.TextSize (font.size);", "+\t\t\t\t\t\tOS.GetThemeTextDimensions (ptr [0], (short) OS.kThemeCurrentPortFont, OS.kThemeStateActive, ioBounds.h != 0, ioBounds, null);", "+\t\t\t\t\t\tOS.SetPort (currentPort [0]);", "-\t\t\t\t\tstart = index + 1;", "-\t\t\t\t} while (index != -1);", "-\t\t\t\tOS.ATSUDisposeStyle (atsuiStyle [0]);", "-\t\t\t\tOS.ATSUDisposeTextLayout (layout [0]);", "-\t\t\t\tOS.DisposePtr (ptr2);", "+\t\t\t\t\twidth = ioBounds.h;", "+\t\t\t\t\theight = ioBounds.v;", "+\t\t\t\t}", "+\t\t\t\tOS.CFRelease (ptr [0]);", "+\t\t\t} else {", "+\t\t\t\tFont font = getFont ();", "+\t\t\t\tFontInfo info = new FontInfo ();", "+\t\t\t\tOS.FetchFontInfo(font.id, font.size, font.style, info);", "+\t\t\t\tint fontHeight = info.ascent + info.descent;", "+\t\t\t\theight = fontHeight;"]}], "num": 29373}
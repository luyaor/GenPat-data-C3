{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "10bd15354ff1d960d276395ddc55f1dc", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a1d947461b9404417dc17e39ae8423dc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "dfd4650fd75100a5a002cab81ff3277b16862845", "commitAfterChange": "d01fac9d213e0fa304edfed85d0f0844e9d59792", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "  void init(Drawable drawable, GCData data, int hDC)", "signatureAfterChange": "  void init(Drawable drawable, GCData data, int hDC)", "diff": ["-\t\tOS.SetTextColor(hDC, foreground);", "-\t\tint newPen = OS.CreatePen(OS.PS_SOLID, 0, foreground);", "-\t\tOS.SelectObject(hDC, newPen);", "-\t\tif (data.hPen != 0) OS.DeleteObject(data.hPen);", "-\t\tdata.hPen = newPen;", "+\t\tdata.state &= ~(FOREGROUND | FOREGROUND_TEXT | PEN);", "+\t} else {", "+\t\tdata.foreground = OS.GetTextColor(hDC);", "-\t\tOS.SetBkColor(hDC, background);", "-\t\tint newBrush = OS.CreateSolidBrush(background);", "-\t\tOS.SelectObject(hDC, newBrush);", "-\t\tif (data.hBrush != 0) OS.DeleteObject (data.hBrush);", "-\t\tdata.hBrush = newBrush;", "+\t\tdata.state &= ~(BACKGROUND | BACKGROUND_TEXT | BRUSH);", "+\t} else {", "+\t\tdata.background = OS.GetBkColor(hDC);", "+\tdata.state &= ~(NULL_BRUSH | NULL_PEN);", "-\tif (hFont != 0) OS.SelectObject (hDC, hFont);", "+\tif (hFont != 0) {", "+\t\tdata.state &= ~FONT;", "+\t} else {", "+\t\thFont = OS.GetCurrentObject(hDC, OS.OBJ_FONT);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3269d395f5b5f9c32b4d86f2ba439988", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "61f597f77bae4a8b673ae18f59f40157652eabb4", "commitAfterChange": "02662f54aa660a584e270a3ec8d454f2fd89e09d", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": " public void setTopItem (TreeItem item)", "signatureAfterChange": " public void setTopItem (TreeItem item)", "diff": ["-\tint columnId = (style & SWT.CHECK) != 0 ? CHECK_COLUMN_ID : columnCount == 0 ? column_id : columns [0].id;", "-\tOS.RevealDataBrowserItem (handle, item.id, columnId, (byte) OS.kDataBrowserRevealWithoutSelecting);", "-\tRect rect = new Rect ();", "-\tif (OS.GetDataBrowserItemPartBounds (handle, item.id, column_id, OS.kDataBrowserPropertyEnclosingPart, rect) == OS.noErr) {", "-\t\tint border = getBorderWidth ();", "-\t\tint [] top = new int [1], left = new int [1];", "-\t\tOS.GetDataBrowserScrollPosition (handle, top, left);", "-\t\tOS.SetDataBrowserScrollPosition (handle, Math.max (0, top [0] + rect.top - border - getHeaderHeight ()), left [0]);", "-\t}", "+\tint itemHeight = getItemHeight ();", "+    int [] top = new int [1], left = new int [1];", "+    OS.GetDataBrowserScrollPosition (handle, top, left);", "+    int [] index = new int [1];", "+    OS.GetDataBrowserTableViewItemRow (handle, item.id, index);", "+    top [0] = Math.max (0, Math.min (itemHeight * visibleCount + getHeaderHeight () - getClientArea ().height, index [0] * itemHeight));", "+    OS.SetDataBrowserScrollPosition (handle, top [0], item.parentItem != null ? left [0] : 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0db9c46d3d7565a2107cf82645aa2a0f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "bf221f66369037ceea33728d5ed71d69549dd596", "commitAfterChange": "73be0ec89889e2c1322c1bfa09d83f81f689ab7f", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 84, "signatureBeforeChange": " void doPageUp(boolean select, int height)", "signatureAfterChange": " void doPageUp(boolean select, int height)", "diff": ["-\t\tint partialTopIndex = getPartialTopIndex();", "-\t\tint lineHeight = renderer.getLineHeight(partialTopIndex);", "+\t\tint lineHeight, lineIndex;", "-\t\t\tif (partialHeight == 0) {", "+\t\t\tif (topIndexY == 0) {", "-\t\t\t\theight = clientAreaHeight - partialHeight;", "+\t\t\t\tint y;", "+\t\t\t\tif (topIndex > 0) {", "+\t\t\t\t\tlineIndex = topIndex - 1;", "+\t\t\t\t\tlineHeight = renderer.getLineHeight(lineIndex);", "+\t\t\t\t\theight = clientAreaHeight - topIndexY;", "+\t\t\t\t\ty = lineHeight - topIndexY;", "+\t\t\t\t} else {", "+\t\t\t\t\tlineIndex = topIndex;", "+\t\t\t\t\tlineHeight = renderer.getLineHeight(lineIndex);", "+\t\t\t\t\theight = clientAreaHeight - (lineHeight + topIndexY);", "+\t\t\t\t\ty = -topIndexY;", "+\t\t\t\t}", "-\t\t\t\t\tint y = lineHeight - partialHeight;", "-\t\t\t\t\tTextLayout layout = renderer.getTextLayout(partialTopIndex);", "+\t\t\t\t\tTextLayout layout = renderer.getTextLayout(lineIndex);", "-\t\t\tint lineIndex = getLineIndex(clientAreaHeight - height);", "+\t\t\tlineIndex = getLineIndex(clientAreaHeight - height);", "-\t\tint availableHeight = 0;", "-\t\tif (partialHeight != 0) {", "-\t\t\tavailableHeight = lineHeight - partialHeight;", "-\t\t}", "-\t\tint lineIndex = partialTopIndex - 1;", "-\t\twhile (height > availableHeight && lineIndex >= 0) {", "-\t\t\tavailableHeight += renderer.getLineHeight(lineIndex--);", "-\t\t}", "-\t\t\tint offsetInLine = caretOffset - content.getOffsetAtLine(caretLine);", "-\t\t\tlineIndex = layout.getLineIndex(offsetInLine);", "-\t\t\tint[] offsets = layout.getLineOffsets();", "-\t\t\tif (lineIndex != 0 && offsetInLine == offsets[lineIndex] && caretAlignment == PREVIOUS_OFFSET_TRAILING) {", "-\t\t\t\tlineIndex--;", "-\t\t\t}", "+\t\t\tint offsetInLine = caretOffset - content.getOffsetAtLine(caretLine);", "+\t\t\tlineIndex = getVisualLineIndex(layout, offsetInLine);", "-\t\theight = Math.min(height, availableHeight);", "+\t\theight = getAvailableHeightAbove(height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f193a3aff0b1d052525318dddf2fba4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "9fa5fc1bc49fd827821b4fd087f2e3db8ee6639a", "commitAfterChange": "6ba413495cb7224afee0baa7d5e3ae3a252d74d2", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 54, "signatureBeforeChange": "  void setBounds (int x, int y, int width, int height, int flags)", "signatureAfterChange": "  LRESULT WM_SIZE (int wParam, int lParam)", "diff": ["-void setBounds (int x, int y, int width, int height, int flags) {", "-\t/*", "-\t* Bug in Windows.  If the receiver is scrolled horizontally", "-\t* and is resized, the list does not redraw properly.  The fix", "-\t* is to redraw the control when resizing is not deferred and", "-\t* the new size is different from the previous size.", "-\t*/", "-\tif (parent.lpwp != null || (flags & OS.SWP_NOSIZE) != 0) {\t", "-\t\tsuper.setBounds (x, y, width, height, flags);", "-\t\treturn;", "-\t}", "-\tRECT rect = new RECT ();", "-\tOS.GetWindowRect (handle, rect);", "-\tint oldWidth = rect.right - rect.left;", "-\tint oldHeight = rect.bottom - rect.top;", "-\tsuper.setBounds (x, y, width, height, flags);", "-\tif (oldWidth == width && oldHeight == height) return;", "-\tSCROLLINFO info = new SCROLLINFO ();", "-\tinfo.cbSize = SCROLLINFO.sizeof;", "-\tinfo.fMask = OS.SIF_POS;", "-\tif (!OS.GetScrollInfo (handle, OS.SB_HORZ, info)) return;", "-\tif (info.nPos != 0) OS.InvalidateRect (handle, null, true);", "-}", "+LRESULT WM_SIZE (int wParam, int lParam) {", "+\t/*", "+\t* Bug in Windows.  If the top index is changed while the", "+\t* list is being resized, Windows does not redraw properly", "+\t* when their is white space at the bottom of the control.", "+\t* The fix is to detect when the top index has changed and", "+\t* redraw the control.", "+\t*", "+\t* Bug in Windows.  If the receiver is scrolled horizontally", "+\t* and is resized, the list does not redraw properly.  The fix", "+\t* is to redraw the control when the horizontal scroll bar is", "+\t* not at the beginning.", "+\t*/", "+\tint oldIndex = OS.SendMessage (handle, OS.LB_GETTOPINDEX, 0, 0);", "+\tLRESULT result = super.WM_SIZE (wParam, lParam);", "+\tif (!isDisposed ()) {", "+\t\tSCROLLINFO info = new SCROLLINFO ();", "+\t\tinfo.cbSize = SCROLLINFO.sizeof;", "+\t\tinfo.fMask = OS.SIF_POS;", "+\t\tif (OS.GetScrollInfo (handle, OS.SB_HORZ, info)) {", "+\t\t\tif (info.nPos != 0) OS.InvalidateRect (handle, null, true);", "+\t\t}", "+\t\tint newIndex = OS.SendMessage (handle, OS.LB_GETTOPINDEX, 0, 0);", "+\t\tif (oldIndex != newIndex) OS.InvalidateRect (handle, null, true);", "+\t}", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7860c13afe752afcd7c5a501652f7b73", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "8727d22e38059537dcc917ca55f0d6ddcedac706", "commitAfterChange": "0e7716ec8b85ed8b2a10afa69a4dfa63fe12298f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object getContents(Transfer transfer)", "signatureAfterChange": " public Object getContents(Transfer transfer)", "diff": ["-\t", "+\t\t", "+\tif (transfer == null)", "+\t\treturn null;", "+\t\t", "+\t\t", "+\t// Does Clipboard have data in required format?", "+\tint[] typeIds= transfer.getTypeIds();", "+\tfor (int i= 0; i < typeIds.length; i++) {", "+\t\tint flavorType= typeIds[i];", "+\t\tint[] size= new int[1];", "+\t\tif (OS.GetScrapFlavorSize(scrap, flavorType, size) == OS.kNoErr) {", "+\t\t\tif (size[0] > 0) {", "+\t\t\t\t", "+\t\t\t\tTransferData tdata= new TransferData();", "+\t\t\t\ttdata.type= flavorType;\t\t", "+\t\t\t\ttdata.data= new byte[size[0]];", "+\t\t\t\tOS.GetScrapFlavorData(scrap, flavorType, size, tdata.data);", "+\t\t\t\ttdata.length= size[0];", "+\t\t\t\t", "+\t\t\t\tObject result= transfer.nativeToJava(tdata);", "+\t\t\t\tif (result != null)", "+\t\t\t\t\treturn result;", "+\t\t\t}", "+\t\t}", "+\t}\t\t", "+\t\t", "+\t\t", "+\t/*", "-\t//System.out.println(\"Clipboard.getContents:\");", "+\tSystem.out.println(\"Clipboard.getContents:\");", "-\t\t\t//System.out.println(\"  \" + i + \": Clipboard.getContents: \" + type);", "+\t\t\tSystem.out.println(\"  \" + i + \": \" + type);", "-\treturn null;", "+\t*/", "+\t", "+\treturn null;\t// No data available for this transfer"]}], "num": 683}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "531969ccd2013c8e58d590cbe131166e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8eeb8199ec16274b11da7912ec4cd3a6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "600b89ee6ff510b2a64fa922689dfd227ef54277", "commitAfterChange": "2b534ce2a81715fb909f4a246680577d6b4de34c", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public void setFullScreen (boolean fullScreen)", "signatureAfterChange": " public void setFullScreen (boolean fullScreen)", "diff": ["+\tif (this.fullScreen == fullScreen) return;", "-//reparents into a new shell.", "-//\tif (fullScreen) {", "-//\t\tNSScreen screen = window.screen();", "-//\t\tcontentView().enterFullScreenMode(screen, null);", "-//\t\tSystem.out.println(contentView().window()+ \" \" + window);", "-//\t} else {", "-//\t\tcontentView().exitFullScreenModeWithOptions(null);", "-//\t\tSystem.out.println(\"out: \"+contentView().window()+ \" \" + window);", "-//\t}", "+", "+\tif (fullScreen) {", "+\t\tcurrentFrame = window.frame();", "+\t\twindow.setShowsResizeIndicator(false); //only hides resize indicator", "+\t\tif (window.respondsToSelector(OS.sel_setMovable_)) {", "+\t\t\tOS.objc_msgSend(window.id, OS.sel_setMovable_, 0);", "+\t\t}", "+\t\t", "+\t\tfullScreenFrame = NSScreen.mainScreen().frame();", "+\t\tif (getMonitor().equals(display.getPrimaryMonitor ())) {", "+\t\t\tif (menuBar != null) {", "+\t\t\t\tfloat /*double*/ menuBarHt = currentFrame.height - contentView().frame().height;", "+\t\t\t\tfullScreenFrame.height -= menuBarHt;", "+\t\t\t\tOS.SetSystemUIMode(OS.kUIModeContentHidden, 0);", "+\t\t\t} ", "+\t\t\telse {", "+\t\t\t\tOS.SetSystemUIMode(OS.kUIModeAllHidden, 0);", "+\t\t\t}", "+\t\t}", "+\t\twindow.setFrame(fullScreenFrame, true);", "+\t\twindow.contentView().setFrame(fullScreenFrame);", "+\t} else {", "+\t\twindow.setShowsResizeIndicator(true);", "+\t\tif (window.respondsToSelector(OS.sel_setMovable_)) {", "+\t\t\tOS.objc_msgSend(window.id, OS.sel_setMovable_, 1);", "+\t\t}", "+\t\tOS.SetSystemUIMode(OS.kUIModeNormal, 0);", "+\t\twindow.setFrame(currentFrame, true);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62cbf24e41d6d576cc0d968c68f65c32", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "4a8c42db878bdd4798c685e53645a0b151e01c05", "commitAfterChange": "04c1918096eb2054794003a56c6df6c91e1a72f0", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 40, "signatureBeforeChange": "\r public void setVisible (boolean visible)", "signatureAfterChange": "\r public void setVisible (boolean visible)", "diff": ["+\t\t\t/*\r", "+\t\t\t* Feature in GTK.  When gtk_menu_popup() is called with no parent menu shell\r", "+\t\t\t* and parent menu item, the menu temporarily takes focus from the top level shell\r", "+\t\t\t* and then restores the focus when the menu pops down.  This behavior is not\r", "+\t\t\t* incorrect but is unwanted.  The fix is to create a temporary menu bar and item\r", "+\t\t\t* to pass to gtk_menu_popup().  This requires special code to pop down the\r", "+\t\t\t* menu when the user clicks outside of the menu and special code to ensure\r", "+\t\t\t* that an item is selected when it is pressed.\r", "+\t\t\t*/ \r", "+\t\t\tint parentHandle = parent.fixedHandle;\r", "+\t\t\tint width = OS.GTK_WIDGET_WIDTH (parentHandle);\r", "+\t\t\tint height = OS.GTK_WIDGET_HEIGHT (parentHandle);\r", "+\t\t\tint barHandle = OS.gtk_menu_bar_new ();\r", "+\t\t\tOS.gtk_container_add (parentHandle, barHandle);\r", "+\t\t\tOS.gtk_fixed_move (parentHandle, barHandle, width, height);\r", "+\t\t\tOS.gtk_widget_show (barHandle);\r", "+\t\t\tint itemHandle = OS.gtk_image_menu_item_new_with_label (new byte[1]);\r", "+\t\t\tOS.gtk_menu_shell_insert (barHandle, itemHandle, 0);\r", "+\t\t\tOS.gtk_widget_show (itemHandle);\r", "+\t\t\tOS.gtk_menu_shell_select_item (barHandle, itemHandle);\r", "+\t\t\tCallback GtkMenuBarEventFunc = new Callback (this, \"GtkMenuBarEventFunc\", 3);\r", "+\t\t\tOS.gtk_signal_connect (barHandle, OS.event_after, GtkMenuBarEventFunc.getAddress(), 0);\r", "+\t\t\tOS.gtk_signal_connect (barHandle, OS.button_press_event, GtkMenuBarEventFunc.getAddress(), SWT.MouseDown);\r", "+\t\t\t\r", "+\t\t\t/* Pop up the menu */\r", "-\t\t\tOS.gtk_menu_popup (handle, 0, 0, address, 0, 0, OS.gtk_get_current_event_time());\r", "+\t\t\tOS.gtk_menu_popup (handle, barHandle, itemHandle, address, 0, 0, OS.gtk_get_current_event_time());\r", "+\t\t\t\r", "+\t\t\t/* Run an event loop */\r", "+\t\t\tDisplay display = getDisplay ();\r", "+\t\t\twhile (!isDisposed () && getVisible ()) {\r", "+\t\t\t\tif (!display.readAndDispatch()) display.sleep ();\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\t/* Release resources and unwanted grabs */\r", "+\t\t\tOS.gdk_pointer_ungrab (0);\r", "+\t\t\tOS.gtk_widget_destroy (barHandle);\t\t\t\r", "+\t\t\tGtkMenuBarEventFunc.dispose ();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0ea909fa879c31728a4a7864f5902fd3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "0279ac89ad933bec67322b956321e83b2a1ac93a", "commitAfterChange": "dbc3f579c8454ac59e01ac2d56752eda0d58b6cd", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\tstate |= THEME_BACKGROUND;", "-\tif (hasBorder()) {", "-\t\tNSRect rect = new NSRect();", "-\t\tNSScrollView scrollWidget = (NSScrollView)new SWTScrollView().alloc();", "-\t\tscrollWidget.initWithFrame (rect);", "-\t\tscrollWidget.setDrawsBackground(false);", "-\t\tscrollWidget.setBorderType(OS.NSBezelBorder);", "-\t\tscrollView = scrollWidget;", "+\tif ((style & SWT.SMOOTH) != 0) {", "+\t\tnsToolbar = ((NSToolbar)new SWTToolbar().alloc()).initWithIdentifier(NSString.stringWith(String.valueOf(NEXT_ID++)));", "+\t\tnsToolbar.setDelegate(nsToolbar);", "+\t\tnsToolbar.setDisplayMode(OS.NSToolbarDisplayModeIconOnly);", "+\t\tNSWindow window = parent.view.window();", "+\t\twindow.setToolbar(nsToolbar);", "+\t\tnsToolbar.setVisible(true);", "+\t\tNSArray views = window.contentView().superview().subviews();", "+\t\tfor (int i = 0; i < views.count(); i++) {", "+\t\t\tid id = views.objectAtIndex(i);", "+\t\t\tif (new NSObject(id).className().getString().equals(\"NSToolbarView\")) {", "+\t\t\t\tview = new NSView(id);", "+\t\t\t\tOS.object_setClass(view.id, OS.objc_getClass(\"SWTToolbarView\"));", "+\t\t\t\tview.retain();", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\tstyle &= ~SWT.SMOOTH;", "+\t} else {", "+\t\tstate |= THEME_BACKGROUND;", "+\t\tif (hasBorder()) {", "+\t\t\tNSRect rect = new NSRect();", "+\t\t\tNSScrollView scrollWidget = (NSScrollView)new SWTScrollView().alloc();", "+\t\t\tscrollWidget.initWithFrame (rect);", "+\t\t\tscrollWidget.setDrawsBackground(false);", "+\t\t\tscrollWidget.setBorderType(OS.NSBezelBorder);", "+\t\t\tscrollView = scrollWidget;", "+\t\t}", "+\t\tNSView widget = (NSView)new SWTView().alloc();", "+\t\twidget.init();", "+\t\tview = widget;", "+\t\tif (scrollView != null) view.setAutoresizingMask(OS.NSViewHeightSizable | OS.NSViewWidthSizable);", "-\tNSView widget = (NSView)new SWTView().alloc();", "-\twidget.init();", "-//\twidget.setDrawsBackground(false);", "-\tview = widget;", "-\tif (scrollView != null) view.setAutoresizingMask(OS.NSViewHeightSizable | OS.NSViewWidthSizable);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0990528400e726d3e45b07fa78e7f6f8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "ee7a783083e0c18c9c0e00c3f49a7de5eaa86f7e", "commitAfterChange": "df518e1d40069787b8bec5a1ea6e923fc650b996", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\tif (window != null) {", "+\twindowDelegate = (SWTWindowDelegate)new SWTWindowDelegate().alloc().init();", "+", "+\tif (window == null) {", "+\t\tNSWindow hostWindow = view.window();", "+\t\tint /*long*/ windowClass = OS.object_getClass(hostWindow.id);", "+\t\tint /*long*/ sendEventImpl = OS.class_getMethodImplementation(windowClass, OS.sel_sendEvent_);", "+\t\tif (sendEventImpl != Display.windowCallback3.getAddress()) {", "+\t\t\tint /*long*/ embeddedSubclass = display.createWindowSubclass(windowClass, \"SWTAWTWindow\");", "+\t\t\tOS.object_setClass(hostWindow.id, embeddedSubclass);", "+\t\t}", "+", "+\t\t// Register for notifications. An embedded shell has no control over the host window,", "+\t\t// so it isn't correct to install a delegate.", "+\t\tNSNotificationCenter defaultCenter = NSNotificationCenter.defaultCenter();", "+\t\tdefaultCenter.addObserver(windowDelegate, OS.sel_windowDidBecomeKey_, OS.NSWindowDidBecomeKeyNotification, hostWindow);", "+\t\tdefaultCenter.addObserver(windowDelegate, OS.sel_windowDidDeminiaturize_, OS.NSWindowDidDeminiaturizeNotification, hostWindow);", "+\t\tdefaultCenter.addObserver(windowDelegate, OS.sel_windowDidMiniaturize_, OS.NSWindowDidMiniaturizeNotification, hostWindow);", "+\t\tdefaultCenter.addObserver(windowDelegate, OS.sel_windowDidMove_, OS.NSWindowDidMoveNotification, hostWindow);", "+\t\tdefaultCenter.addObserver(windowDelegate, OS.sel_windowDidResize_, OS.NSWindowDidResizeNotification, hostWindow);", "+\t\tdefaultCenter.addObserver(windowDelegate, OS.sel_windowDidResignKey_, OS.NSWindowDidResignKeyNotification, hostWindow);", "+\t\tdefaultCenter.addObserver(windowDelegate, OS.sel_windowWillClose_, OS.NSWindowWillCloseNotification, hostWindow);", "+\t} else {", "-\t\twindowDelegate = (SWTWindowDelegate)new SWTWindowDelegate().alloc().init();"]}], "num": 58369}
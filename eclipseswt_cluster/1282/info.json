{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c27af068535a3af5d6ede1d33d96f52f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a19e9c309559413b0a70b9dc53a4f83a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "d7f67e8b48c54b2018c6a5f759c5479dd3e1cfe5", "commitAfterChange": "c83c3ac091bc0c96fc3831473381c286685245e0", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void dispose ()", "signatureAfterChange": " public void dispose ()", "diff": ["-\tRectangle parentBounds = parent.getClientArea ();", "+\tRectangle parentBounds = parent.clientArea;", "+\tint nextColumnAlignment = parent.columns.length > 1 ? parent.columns [1].getAlignment () : SWT.LEFT;", "-\t * If column 0 was disposed and if the parent has style CHECK then", "-\t * the new column 0 will change, so explicitly redraw it if it appears to", "-\t * the left of the disposed column in the column order.", "+\t * If column 0 was disposed then the new column 0 must be redrawn if it appears to the", "+\t * left of the disposed column in the column order AND one the following are true:", "+\t * - the parent has style CHECK, since these will now appear in the new column 0", "+\t * - the new column 0 had non-left alignment before the dispose, since the parent will have", "+\t * \tchanged this to LEFT in the call to dispose(true)", "-\tif ((parent.style & SWT.CHECK) != 0 && index == 0) {", "+\tif (index == 0 && ((parent.style & SWT.CHECK) != 0 || nextColumnAlignment != SWT.LEFT)) {", "-\t\t\t\tparent.redraw (newColumn0.getX (), 0, newColumn0.width, parentBounds.height, false);", "+\t\t\t\tint newColumn0x = newColumn0.getX (); ", "+\t\t\t\tparent.redraw (newColumn0x, 0, newColumn0.width, parentBounds.height, false);", "+\t\t\t\t/* if the alignment changed then the header text must be repainted with its new alignment */", "+\t\t\t\tif (nextColumnAlignment != SWT.LEFT && parent.getHeaderVisible () && parent.drawCount == 0) {", "+\t\t\t\t\tparent.header.redraw (newColumn0x, 0, newColumn0.width, parent.header.getClientArea ().height, false);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cece287c1c95df61ecd3d3106530fc72", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "d7f67e8b48c54b2018c6a5f759c5479dd3e1cfe5", "commitAfterChange": "c83c3ac091bc0c96fc3831473381c286685245e0", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 65, "signatureBeforeChange": " void updateColumnWidth (TableColumn column, GC gc)", "signatureAfterChange": " void updateColumnWidth (TableColumn column, GC gc)", "diff": ["-\tboolean columnIsLeft = (column.style & SWT.LEFT) != 0;", "-\tif (!columnIsLeft || parent.hooks (SWT.EraseItem) || parent.hooks (SWT.PaintItem)) {", "-\t\tRectangle cellBounds = getCellBounds (columnIndex);", "-\t\tparent.redraw (cellBounds.x, cellBounds.y, cellBounds.width, cellBounds.height, false);", "-\t\treturn;", "-\t}", "-\t/* if the display text has changed then the cell text must be damaged in order to repaint */\t", "-\tif (!oldDisplayText.equals (displayTexts [columnIndex])) {", "-\t\tRectangle cellBounds = getCellBounds (columnIndex);", "-\t\tint textX = getTextX (columnIndex);", "-\t\tparent.redraw (textX, cellBounds.y, cellBounds.x + cellBounds.width - textX, cellBounds.height, false);", "+\tif (isInViewport ()) {", "+\t\tboolean columnIsLeft = (column.style & SWT.LEFT) != 0;", "+\t\tif (!columnIsLeft || parent.hooks (SWT.EraseItem) || parent.hooks (SWT.PaintItem)) {", "+\t\t\tRectangle cellBounds = getCellBounds (columnIndex);", "+\t\t\tparent.redraw (cellBounds.x, cellBounds.y, cellBounds.width, cellBounds.height, false);", "+\t\t\treturn;", "+\t\t}", "+\t\t/* if the display text has changed then the cell text must be damaged in order to repaint */\t", "+\t\tif (oldDisplayText == null || !oldDisplayText.equals (displayTexts [columnIndex])) {", "+\t\t\tRectangle cellBounds = getCellBounds (columnIndex);", "+\t\t\tint textX = getTextX (columnIndex);", "+\t\t\tparent.redraw (textX, cellBounds.y, cellBounds.x + cellBounds.width - textX, cellBounds.height, false);", "+\t\t}"]}], "num": 1282}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3dc102d6405a351a9c8829f70deab94e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cb774acfc4670381c65d26e529574bd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "852f17f3e885ddde267886a8be3483ac6f27465d", "commitAfterChange": "3cdae47da159662ce7eb57e9a6b0f13f94eaec5c", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 98, "signatureBeforeChange": "  static Browser getBrowser (int aDOMWindow)", "signatureAfterChange": "  static Browser getBrowser (int aDOMWindow)", "diff": ["-\tif (!IsPre_2) {", "-\t\tnsIDOMWindow window = new nsIDOMWindow (aDOMWindow);", "-\t\trc = window.GetTop (result);", "-\t} else {", "-\t\tnsIDOMWindow_1_9 window = new nsIDOMWindow_1_9 (aDOMWindow);", "-\t\trc = window.GetTop (result);", "-\t}", "+\tnsIDOMWindow window = new nsIDOMWindow (aDOMWindow);", "+\trc = window.GetTop (result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97dc7830766618c2a724fdabbd194068", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "360dd20c4bfdba6bc8c1d8560f6c4e4e98ff4d89", "commitAfterChange": "d9052f51780320105a9c8c51ba549b58b0882604", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\t\t\t\trc = prefService.SavePrefFile(prefFile.getAddress ());", "+\t\t\t\t\trc = prefService.SavePrefFile (prefFile.getAddress ());", "-\t\t\t\t\t* XULRunner 1.9 can crash on Windows if XPCOMGlueShutdown is invoked here,", "-\t\t\t\t\t* presumably because one or more of its unloaded symbols are referenced when", "-\t\t\t\t\t* this callback returns.  The workaround is to delay invoking XPCOMGlueShutdown", "-\t\t\t\t\t* so that its symbols are still available once this callback returns.", "+\t\t\t\t\t* The following is intentionally commented because it causes subsequent", "+\t\t\t\t\t* browser instantiations within the process to fail.  Mozilla does not", "+\t\t\t\t\t* support being unloaded and then re-initialized in a process, see", "+\t\t\t\t\t* http://www.mail-archive.com/dev-embedding@lists.mozilla.org/msg01732.html . ", "-\t\t\t\t\tdisplay.asyncExec (new Runnable () {", "-\t\t\t\t\t\tpublic void run () {", "-\t\t\t\t\t\t\tXPCOM.XPCOMGlueShutdown ();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t});", "-", "-\t\t\t\t\t// the following is intentionally commented, because calling XRE_TermEmbedding", "-\t\t\t\t\t// causes subsequent browser instantiations within the process to fail", "+//\t\t\t\t\tXPCOM.XPCOMGlueShutdown ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fb2d4e4c260122f167cb58608babe2a2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Table.java", "commitBeforeChange": "66c7e3e3543f2f43533c404a190b13e793af8494", "commitAfterChange": "c54e6b035eef96cd6c136ab848077a275a9dcc42", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "  public void test_setSelection$I()", "signatureAfterChange": "  public void test_setSelection$I()", "diff": ["-\ttable.deselectAll();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25094d6fc0d7a6f684e16caa1035e4cd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "613386a136aed7f7be85acd46a7cab744bbae94d", "commitAfterChange": "e144c0287be1ac0d08cd8310d65398d20b566a1f", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r void initExtStyleCombo()", "signatureAfterChange": "\r void initExtStyleCombo ()", "diff": ["-void initExtStyleCombo() {\r", "-\tString characterSet = getCharacterSetCombo().getText();\r", "-\tString faceName = getFaceNameCombo().getText();\r", "-\tHashtable faceNames = (Hashtable) getFonts().get(characterSet);\r", "-\tFontExtStyles fontExtStyles = (FontExtStyles) faceNames.get(faceName);\r", "-\tCombo extStyleCombo = getExtStyleCombo();\r", "-\r", "-\tsetItemsSorted(extStyleCombo, fontExtStyles.getExtStyles());\r", "-\textStyleCombo.select(0);\r", "-\tinitFontDataCombos();\r", "+void initExtStyleCombo () {\r", "+\tString oldSelect = extStyleCombo.getText ();\r", "+\textStyleCombo.removeAll ();\r", "+\t\r", "+\tString characterSet = charSetCombo.getText ();\r", "+\tString faceName = faceNameCombo.getText ();\r", "+\tHashtable extStyles = getExtStyles (characterSet, faceName);\r", "+\tif (extStyles == null) return;\r", "+\tsetItemsSorted (extStyleCombo, extStyles);\r", "+\t\r", "+\tint selectIndex = extStyleCombo.indexOf (oldSelect);\r", "+\tselectIndex = Math.max (0, selectIndex);\r", "+\textStyleCombo.select (selectIndex);\r", "+\textStyleCombo.setData (new Integer (selectIndex));\r", "+\tinitSizeCombo ();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f4631d3c164258b3f45ac841c0834cd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "f736dbfd5d0ce9567f1410c8e42cbad12a1935ca", "commitAfterChange": "3dc220718412431322c00e1f820c9ce0168892f5", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "  void initializeSystemColors ()", "signatureAfterChange": "  void initializeSystemColors ()", "diff": ["-\t\tOS.gtk_style_context_get_color (context, OS.GTK_STATE_FLAG_NORMAL, rgba);", "-\t\tCOLOR_INFO_FOREGROUND = toGdkColor (rgba);", "+\t\tCOLOR_INFO_FOREGROUND = toGdkColor (styleContextGetColor (context, OS.GTK_STATE_FLAG_NORMAL, rgba));", "-\t\tOS.gtk_style_context_get_color (context, OS.GTK_STATE_FLAG_NORMAL, rgba);", "-\t\tCOLOR_WIDGET_FOREGROUND = toGdkColor (rgba);", "+\t\tCOLOR_WIDGET_FOREGROUND = toGdkColor (styleContextGetColor (context, OS.GTK_STATE_FLAG_NORMAL, rgba));", "-\t\tOS.gtk_style_context_get_color (context, OS.GTK_STATE_FLAG_NORMAL, rgba);", "-\t\tCOLOR_LIST_FOREGROUND = toGdkColor (rgba);", "+\t\tCOLOR_LIST_FOREGROUND = toGdkColor (styleContextGetColor (context, OS.GTK_STATE_FLAG_NORMAL, rgba));", "-\t\tOS.gtk_style_context_get_color (context, OS.GTK_STATE_FLAG_SELECTED, rgba);", "-\t\tCOLOR_LIST_SELECTION_TEXT = toGdkColor (rgba);", "+\t\tCOLOR_LIST_SELECTION_TEXT = toGdkColor (styleContextGetColor (context, OS.GTK_STATE_FLAG_SELECTED, rgba));", "-\t\tOS.gtk_style_context_get_color (context, OS.GTK_STATE_FLAG_ACTIVE, rgba);", "-\t\tCOLOR_LIST_SELECTION_TEXT_INACTIVE = toGdkColor (rgba);", "+\t\tCOLOR_LIST_SELECTION_TEXT_INACTIVE = toGdkColor (styleContextGetColor (context, OS.GTK_STATE_FLAG_ACTIVE, rgba));", "-\t\tOS.gtk_style_context_get_color (context, OS.GTK_STATE_FLAG_INSENSITIVE, rgba);", "-\t\tCOLOR_TITLE_INACTIVE_FOREGROUND = toGdkColor (rgba);", "+\t\tCOLOR_TITLE_INACTIVE_FOREGROUND = toGdkColor (styleContextGetColor (context, OS.GTK_STATE_FLAG_INSENSITIVE, rgba));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e7c31505fa1a5eb32dde75960ec82d5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "0eca40a26667c3712617b5dd23e67af76bcbab4d", "commitAfterChange": "c345d69dc06c2a69d5f698a12d1c7890b32841ad", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 59, "signatureBeforeChange": " void calculateTopIndex()", "signatureAfterChange": " void calculateTopIndex()", "diff": ["-\tint verticalIncrement = getVerticalIncrement();", "-\tif (verticalIncrement == 0) {", "-\t\treturn;", "-\t}", "-\ttopIndex = Compatibility.ceil(verticalScrollOffset, verticalIncrement);", "-\t// Set top index to partially visible top line if no line is fully ", "-\t// visible but at least some of the widget client area is visible.", "-\t// Fixes bug 15088.", "-\tif (topIndex > 0) {", "-\t\tint clientAreaHeight = getClientArea().height;", "-\t\tif (clientAreaHeight > 0) {", "-\t\t\tint bottomPixel = verticalScrollOffset + clientAreaHeight;", "-\t\t\tint fullLineTopPixel = topIndex * verticalIncrement;", "-\t\t\tint fullLineVisibleHeight = bottomPixel - fullLineTopPixel;", "-\t\t\t// set top index to partially visible line if no line fully fits in ", "-\t\t\t// client area or if space is available but not used (the latter should", "-\t\t\t// never happen because we use claimBottomFreeSpace)", "-\t\t\tif (fullLineVisibleHeight < verticalIncrement) {", "-\t\t\t\ttopIndex--;", "+\t", "+\tRectangle clientArea = getClientArea();", "+\ttopIndex = getLineIndex(clientArea.y);", "+\tint linePixel = getLinePixel(topIndex);", "+\tif (linePixel < 0) {", "+\t\tint lineCount = content.getLineCount();", "+\t\tif (topIndex < lineCount - 1) {", "+\t\t\tint bottom = getLinePixel(topIndex + 1);", "+\t\t\tbottom = lineCache.getLineHeight(topIndex + 1);", "+\t\t\tif (clientArea.height > bottom) {", "+\t\t\t\ttopIndex++;", "-\t\t} else if (topIndex >= content.getLineCount()) {", "-\t\t\ttopIndex = content.getLineCount() - 1;", "-\t}", "+\t} ", "+", "+//\tint verticalIncrement = getVerticalIncrement();", "+//\tif (verticalIncrement == 0) {", "+//\t\treturn;", "+//\t}", "+//\ttopIndex = Compatibility.ceil(verticalScrollOffset, verticalIncrement);", "+//\t// Set top index to partially visible top line if no line is fully ", "+//\t// visible but at least some of the widget client area is visible.", "+//\t// Fixes bug 15088.", "+//\tif (topIndex > 0) {", "+//\t\tint clientAreaHeight = getClientArea().height;", "+//\t\tif (clientAreaHeight > 0) {", "+//\t\t\tint bottomPixel = verticalScrollOffset + clientAreaHeight;", "+//\t\t\tint fullLineTopPixel = topIndex * verticalIncrement;", "+//\t\t\tint fullLineVisibleHeight = bottomPixel - fullLineTopPixel;", "+//\t\t\t// set top index to partially visible line if no line fully fits in ", "+//\t\t\t// client area or if space is available but not used (the latter should", "+//\t\t\t// never happen because we use claimBottomFreeSpace)", "+//\t\t\tif (fullLineVisibleHeight < verticalIncrement) {", "+//\t\t\t\ttopIndex--;", "+//\t\t\t}", "+//\t\t} else if (topIndex >= content.getLineCount()) {", "+//\t\t\ttopIndex = content.getLineCount() - 1;", "+//\t\t}", "+//\t}", "+\t", "-\t\tlineCache.calculate(topIndex, getPartialBottomIndex() - topIndex + 1);", "+\t\tlineCache.calculateClientArea();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd244e86ef10ebc2014f633b89cfd79d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "426b8394868b0de9dcdda5017f961bcc1f0d0167", "commitAfterChange": "16f78cb6583ca784ce5f5034bf6a8267afd506f7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  void drawWidget (int id, NSGraphicsContext context, NSRect rect)", "signatureAfterChange": "  void drawWidget (int id, NSGraphicsContext context, NSRect rect)", "diff": ["+\t\tint /*long*/ ctx = context.graphicsPort();", "+\t\tOS.CGContextSaveGState (ctx);", "+\t\tOS.CGContextSetBlendMode (ctx, OS.kCGBlendModeDifference);", "-\t\t\tint /*long*/ ctx = context.graphicsPort();", "-\t\t\tOS.CGContextSaveGState(ctx);", "-\t\t\tOS.CGContextRestoreGState(ctx);", "-\t\t\tcontext.saveGraphicsState();", "-\t\t\tcontext.setCompositingOperation(OS.NSCompositeXOR);", "-\t\t\tNSRect drawRect = new NSRect();", "-\t\t\tdrawRect.x = caret.x;", "-\t\t\tdrawRect.y = caret.y;", "-\t\t\tdrawRect.width = caret.width != 0 ? caret.width : Caret.DEFAULT_WIDTH;", "-\t\t\tdrawRect.height = caret.height;", "-\t\t\tcontext.setShouldAntialias(false);", "-\t\t\tNSColor color = NSColor.colorWithDeviceRed(1, 1, 1, 1);", "-\t\t\tcolor.set();", "-\t\t\tNSBezierPath.fillRect(drawRect);", "-\t\t\tcontext.restoreGraphicsState();", "+\t\t\tCGRect drawRect = new CGRect();", "+\t\t\tdrawRect.origin.x = caret.x;", "+\t\t\tdrawRect.origin.y = caret.y;", "+\t\t\tdrawRect.size.width = caret.width != 0 ? caret.width : Caret.DEFAULT_WIDTH;", "+\t\t\tdrawRect.size.height = caret.height;", "+\t\t\tint /*long*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "+\t\t\tOS.CGContextSetFillColorSpace(ctx, colorspace);", "+\t\t\tOS.CGColorSpaceRelease(colorspace);", "+\t\t\tOS.CGContextSetFillColor(ctx, new float /*double*/ [] {1, 1, 1, 1});", "+\t\t\tOS.CGContextFillRect(ctx, drawRect);", "+\t\tOS.CGContextRestoreGState(ctx);"]}], "num": 22685}
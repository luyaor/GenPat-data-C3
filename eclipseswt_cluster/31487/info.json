{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30d0693b777d47b6926b9be41c9f8157", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed1eee7d55c11f4c0b3970075db9cb67", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "48512dc20e32e369917d3e1ccfb92109c9724e7e", "commitAfterChange": "1942f64e0b774317e0a8e6ec44902bb736bb7790", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 53, "signatureBeforeChange": " public void showSelection ()", "signatureAfterChange": " public void showSelection ()", "diff": ["-\tif ((style & SWT.SINGLE) != 0) return;", "+\t/*if ((style & SWT.SINGLE) != 0) return;", "-\t\tGtkAdjustment adjustment = new GtkAdjustment();", "-\t       \tOS.memmove(adjustment, adjustmentHandle, GtkAdjustment.sizeof);", "+\t\tGtkAdjustment adjustment = new GtkAdjustment(adjustmentHandle);", "-", "+*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e976a3b47e1802fb2944ed8d916060b0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "9deefd18be8de01a672cfca15620a560b1ae5f22", "commitAfterChange": "d67b8caceb3f10df6a8e238427498db262144133", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight)", "signatureAfterChange": " public void drawImage(Image image, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight)", "diff": ["-public void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight) {", "-\t/* basic sanity checks */", "+public void drawImage(Image image, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight) {", "-\tif (srcImage == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "-\tif (srcImage.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\tif (image == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+\tif (image.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\tdrawImage(image, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false);", "+}", "-\t/* source image properties */", "-\tif ((srcY + srcWidth > width[0]) ||", "-\t\t(srcY + srcHeight > height[0])) {", "-\t\terror(SWT.ERROR_INVALID_ARGUMENT);", "-", "-\t/* Special case:  If we don't need to scale, and there is no alpha/mask,", "-\t * then we can just blit the image inside the X server - no net traffic", "-\t */", "-\tboolean needScaling = (srcWidth != destWidth) || (srcHeight != destHeight);", "-\tboolean simple = !needScaling & (srcImage.mask == 0);", "-\t", "-\tif (simple) {", "-\t\tOS.gdk_draw_pixmap(data.drawable, handle, srcImage.pixmap,", "-\t\t\tsrcX, srcY,", "-\t\t\tdestX, destY,", "-\t\t\twidth[0], height[0]);", "-\t", "-\t", "-\t/* Fetch a local GdkPixbuf from server */", "-\tPixbuffer pixbuf = new Pixbuffer(srcImage);", "-\t", "-\t/* Scale if necessary */", "-\tif ((srcWidth != destWidth) || (srcHeight != destHeight)) {", "-\t\tdouble scale_x = (double)destWidth / (double)srcWidth;", "-\t\tdouble scale_y = (double)destHeight / (double)srcHeight;", "-\t\tdouble offset_x = - srcX * scale_x;", "-\t\tdouble offset_y = - srcY * scale_y;", "-", "-\t\tint destSizePixbuf = GDKPIXBUF.gdk_pixbuf_new (", "-\t\t\tGDKPIXBUF.GDK_COLORSPACE_RGB(),", "-\t\t\ttrue, 8, destWidth, destHeight);", "-\t\tGDKPIXBUF.gdk_pixbuf_scale(", "-\t\t\tpixbuf.handle, // src,", "-\t\t\tdestSizePixbuf,", "-\t\t\t0,", "-\t\t\t0,", "-\t\t\tdestWidth, destHeight,", "-\t\t\toffset_x, offset_y,", "-\t\t\tscale_x, scale_y,", "-\t\t\tGDKPIXBUF.GDK_INTERP_BILINEAR);", "-\t\tpixbuf.handle = destSizePixbuf;", "-\t/* Paint it */", "-\tGDKPIXBUF.gdk_pixbuf_render_to_drawable_alpha(", "-\t\t\tpixbuf.handle,", "-\t\t\tdata.drawable,", "-\t\t\t0, 0,", "-\t\t\tdestX, destY,", "-\t\t\tdestWidth, destHeight,", "-\t\t\tGDKPIXBUF.GDK_PIXBUF_ALPHA_BILEVEL, 128,", "-\t\t\tGDKPIXBUF.GDK_RGB_DITHER_NORMAL,", "-\t\t\t0, 0", "-\t\t\t);"]}], "num": 31487}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a609368ec3d4d20b24ce4092b1adedf", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e24aa03aa6bf8637ec39f5b7303ebb43", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_custom_TableTree.java", "commitBeforeChange": "ea405f6fb0d3c326c6d6598b865868c79c617d4c", "commitAfterChange": "ca7d9417c41b11f3b661bfffad06504c3c22dc98", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 20, "signatureBeforeChange": "  public void test_selectAll()", "signatureAfterChange": "  public void test_selectAll()", "diff": ["+", "-\twarnUnimpl(\"Test test_selectAll not written\");", "+\t/* FUTURE: Should also add sub-nodes, and test both single and multi with those.", "+\t * i.e. subitems[i] = new TableTreeItem(items[i], SWT.NONE); */", "+", "+\tselectAll_helper(\"Empty table tree\", 0, new TableTreeItem[] {});", "+", "+\tint number = 8;", "+\tTableTreeItem[] items = new TableTreeItem[number];", "+\tfor (int i = 0; i < number; i++) {", "+\t\titems[i] = new TableTreeItem(tableTree, SWT.NONE);", "+\t}", "+\tselectAll_helper(\"selectAll()\", number, items);", "+", "+\t", "+\t/* Now run the same tests on a single-select TableTree. */", "+\tsingleSelect();", "+\tselectAll_helper(\"Empty table tree\", 0, new TableTreeItem[] {});", "+", "+\titems = new TableTreeItem[number];", "+\tfor (int i = 0; i < number; i++) {", "+\t\titems[i] = new TableTreeItem(tableTree, SWT.NONE);", "+\t}", "+\tselectAll_helper(\"selectAll()\", 0, new TableTreeItem[] {});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "501ac4d873bef88a466fa06396657c4e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "7e01a6d9771ad5bd12b9af1fbbe393164c9959aa", "commitAfterChange": "c61a57d7a074a80b5b03c4761a563015a2ecc5fa", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 101, "signatureBeforeChange": " public void setItemCount (int count)", "signatureAfterChange": " public void setItemCount (int count)", "diff": ["-\tint itemCount = items.length;", "-\tif (count == itemCount) return;", "+\tif (count == itemsCount) return;", "-\tif (count < itemCount) {", "-\t\tfor (int i = count; i < itemCount; i++) {", "+\tif (count < itemsCount) {", "+\t\tfor (int i = count; i < itemsCount; i++) {", "-\t}", "-\t", "-\tTableItem[] newItems = new TableItem [count];", "-\tSystem.arraycopy (items, 0, newItems, 0, Math.min (count, itemCount));", "-\titems = newItems;", "-\tfor (int i = itemCount; i < count; i++) {", "-\t\titems [i] = new TableItem (this, SWT.NONE, i, false);", "+\t\titemsCount = count;", "+\t} else {", "+\t\tTableItem[] newItems = new TableItem [count];", "+\t\tSystem.arraycopy (items, 0, newItems, 0, Math.min (count, itemsCount));", "+\t\titems = newItems;", "+\t\tfor (int i = itemsCount; i < count; i++) {", "+\t\t\titems [i] = new TableItem (this, SWT.NONE, i, false);", "+\t\t\titemsCount++;", "+\t\t}"]}], "num": 39032}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47c218efd7c89236b9085d41fa151b7d", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a42a116fc7f724fd48b14aad8343f088", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGeneratorUI.java", "commitBeforeChange": "275ce1322d2d2acef8289e7a428bae512f0206b1", "commitAfterChange": "56ca7c39a4fdb71b796d09fde89d6bca48c9f734", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tTreeItem addChild (Node node, TreeItem superItem)", "signatureAfterChange": " \tTreeItem addChild (Node node, TreeItem superItem)", "diff": ["+\tTreeItem lastParent;", "-\t\tTreeItem[] items = superItem.getItems();", "-\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\tif (name.equals(items[i].getData())) {", "-\t\t\t\tparentItem = items[i];", "-\t\t\t\tbreak;", "+\t\tif (lastParent != null && name.equals(lastParent.getData())) {", "+\t\t\tparentItem = lastParent;", "+\t\t} else {", "+\t\t\tTreeItem[] items = superItem.getItems();", "+\t\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\t\tif (name.equals(items[i].getData())) {", "+\t\t\t\t\tparentItem = items[i];", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t\t}", "-\t\tif (parentItem == null) {", "-\t\t\tparentItem = new TreeItem(superItem, SWT.NONE);", "-\t\t\tparentItem.setData(name);", "-\t\t\tparentItem.setText(getPrettyText(name));", "+\t\t\tif (parentItem == null) {", "+\t\t\t\tparentItem = new TreeItem(superItem, SWT.NONE);", "+\t\t\t\tparentItem.setData(name);", "+\t\t\t\tparentItem.setText(getPrettyText(name));", "+\t\t\t}", "+\t\t\tlastParent = parentItem;", "-\t\tfor (int i = 0; i < attributes.getLength(); i++) {", "+\t\tfor (int i = 0, length = attributes.getLength(); i < length; i++) {", "-\t\tfor (int i = 0; i < childNodes.getLength(); i++) {", "-\t\t\taddChild(childNodes.item(i), item);", "-\t\t}", "+\t\tif (childNodes.getLength() > 0) new TreeItem(item, SWT.NONE);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61f8d3874b2ba4650c48a428a6834e4b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": " int computeColumnIntersect (int x, int startColumn)", "signatureAfterChange": " void calculateWidestExpandingItem(TreeItem2 item)", "diff": ["+ */", "+void calculateWidestExpandingItem(TreeItem2 item) {", "+\tint itemIndex = item.getVisibleIndex();", "+\tint newMaximumItemWidth = getContentWidth();", "+\tint stopIndex = itemIndex + item.getVisibleItemCount();", "+", "+\tfor (int i = itemIndex + 1; i <= stopIndex; i++) {", "+\t\tnewMaximumItemWidth = Math.max(newMaximumItemWidth, getContentWidth(i));", "+\t}", "+\tsetContentWidth(newMaximumItemWidth);", "+}", "-int computeColumnIntersect (int x, int startColumn) {", "-\tint numColumns = getColumnCount ();", "-\tfor (int i = startColumn; i < numColumns; i++) {", "-\t\tint endX = columns[i].getX () + columns[i].width;", "-\t\tif (x <= endX) return i;", "-\t}", "-\treturn -1;", "-}"]}], "num": 11586}
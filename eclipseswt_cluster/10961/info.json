{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3209897aaa766782d87644bb3d0f4f7e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8689e038a4647f0fcfb32937ccdd8295", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 100, "signatureBeforeChange": " \t\t\t \tprivate boolean handleContentClick(MacEvent me, int whichWindow)", "signatureAfterChange": "  void updateMenuBar (Shell shell)", "diff": ["+", "+void updateMenuBar (Shell shell) {", "+\tif (shell == null) shell = getActiveShell ();", "+\tboolean modal = false;", "+\tint mask = SWT.PRIMARY_MODAL | SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL;", "+\twhile (shell != null) {", "+\t\tif (shell.menuBar != null) break;", "+\t\tif ((shell.style & mask) != 0) modal = true;", "+\t\tshell = (Shell) shell.parent;", "+\t* Feature in the Macintosh.  For some reason, when a modal shell", "+\t* is active, DisableMenuItem() when called with zero (indicating", "+\t* that the entire menu is to be disabled) will not disable the", "+\t* current menu bar.  The fix is to disable each individual menu", "+\t* item.", "+\tif (menuBar != null) {", "+\t\tMenuItem [] items = menuBar.getItems ();", "+\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\tif (items [i].getEnabled ()) items [i]._setEnabled (true);", "+\t\t}", "+\t}", "+\tsetMenuBar (shell != null ? shell.menuBar : null);", "+\tif (menuBar != null && modal) {", "+\t\tint theMenu = menuBar.handle;", "+\t\tMenuItem [] items = menuBar.getItems ();", "+\t\tfor (int i=0; i<items.length; i++) items [i]._setEnabled (false);", "+\t}", "-\t\t\t", "-\tprivate boolean handleContentClick(MacEvent me, int whichWindow) {", "-\t", "-\t\tMacPoint where= me.getWhere();", "-\t\tMacPoint globalPos= me.getWhere();", "-\t\t\t\t", "-\t\tOS.QDGlobalToLocalPoint(OS.GetWindowPort(whichWindow), where.getData());", "-\t\t", "-\t\tshort[] cpart= new short[1];\t\t", "-\t\tint whichControl= 0;", "-\t\tif (MacUtil.HIVIEW) {", "-\t\t\tint[] ov= new int[1];", "-\t\t\tint root= OS.HIViewGetRoot(whichWindow);", "-\t\t\tOS.HIViewGetViewForMouseEvent(root, me.getEventRef(), ov);", "-\t\t\twhichControl= ov[0];", "-\t\t} else {", "-\t\t\twhichControl= MacUtil.findControlUnderMouse(where, whichWindow, cpart);\t\t\t\t", "-\t\t}", "-\t\t", "-\t\t// focus change", "-\t\tsetMacFocusHandle(whichWindow, whichControl);", "-\t\t\t\t\t\t\t\t", "-\t\tif (whichControl != 0) {", "-\t\t", "-\t\t\t// deal with the context menu", "-\t\t\tWidget wc= WidgetTable.get(whichControl);", "-\t\t\tif (wc instanceof Control) {", "-\t\t\t\tMenu cm= ((Control)wc).getMenu();\t// is a context menu installed?", "-\t\t\t\tif (cm != null && me.isShowContextualMenuClick()) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tfInContextMenu= true;", "-\t\t\t\t\t\t// AW: not ready for primetime", "-\t\t\t\t\t\t// OS.ContextualMenuSelect(cm.handle, globalPos.getData(), new short[1], new short[1]);", "-\t\t\t\t\t\tOS.PopUpMenuSelect(cm.handle, (short)globalPos.getY(), (short)globalPos.getX(), (short)1);", "-\t\t\t\t\t} finally {", "-\t\t\t\t\t\tfInContextMenu= false;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\tif (MacUtil.HIVIEW) {", "-\t\t\t\tOS.HIViewClick(whichControl, me.getEventRef());", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t", "-\t\t\tswitch (cpart[0]) {", "-\t\t\tcase 0:", "-\t\t\t\tbreak;", "-", "-\t\t\tcase 111:\t// User pane", "-\t\t\t\tfTrackedControl= whichControl;\t// starts mouse tracking", "-\t\t\t\twindowProc(whichControl, SWT.MouseDown, new MacMouseEvent(me));", "-\t\t\t\tbreak;", "-", "-\t\t\tcase 112:\t// User pane", "-\t\t\t\twindowProc(whichControl, SWT.MouseDown, new MacMouseEvent(me));", "-\t\t\t\tbreak;", "-\t\t\t\t", "-\t\t\tdefault:", "-\t\t\t\twindowProc(whichControl, SWT.MouseDown, new MacMouseEvent(me));", "-\t\t\t\t", "-\t\t\t\tif (MacUtil.HIVIEW) {", "-\t\t\t\t\t// AW: Jaguar:", "-\t\t\t\t\tOS.HIViewClick(whichControl, me.getEventRef());", "-\t\t\t\t} else {", "-\t\t\t\t\tint cpart2= OS.HandleControlClick(whichControl, where.getData(), me.getModifiers(), -1);", "-\t\t\t\t\tif (cpart2 != 0) {", "-\t\t\t\t\t\twindowProc(whichControl, SWT.Selection, new MacControlEvent(whichControl, cpart2, false));", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\treturn false;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc204c2a8b291f4c48e8b447e61bef75", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 95, "signatureBeforeChange": " boolean filters (int eventType)", "signatureAfterChange": " \t\t\t \tprivate boolean handleContentClick(MacEvent me, int whichWindow)", "diff": ["-}", "-boolean filters (int eventType) {", "-\tif (filterTable == null) return false;", "-\treturn filterTable.hooks (eventType);", "+\t\t\t", "+\tprivate boolean handleContentClick(MacEvent me, int whichWindow) {", "+\t", "+\t\tMacPoint where= me.getWhere();", "+\t\tMacPoint globalPos= me.getWhere();", "+\t\t\t\t", "+\t\tOS.QDGlobalToLocalPoint(OS.GetWindowPort(whichWindow), where.getData());", "+\t\t", "+\t\tshort[] cpart= new short[1];\t\t", "+\t\tint whichControl= 0;", "+\t\tif (MacUtil.HIVIEW) {", "+\t\t\tint[] ov= new int[1];", "+\t\t\tint root= OS.HIViewGetRoot(whichWindow);", "+\t\t\tOS.HIViewGetViewForMouseEvent(root, me.getEventRef(), ov);", "+\t\t\twhichControl= ov[0];", "+\t\t} else {", "+\t\t\twhichControl= MacUtil.findControlUnderMouse(where, whichWindow, cpart);\t\t\t\t", "+\t\t}", "+\t\t", "+\t\t// focus change", "+\t\tsetMacFocusHandle(whichWindow, whichControl);", "+\t\t\t\t\t\t\t\t", "+\t\tif (whichControl != 0) {", "+\t\t", "+\t\t\t// deal with the context menu", "+\t\t\tWidget wc= WidgetTable.get(whichControl);", "+\t\t\tif (wc instanceof Control) {", "+\t\t\t\tMenu cm= ((Control)wc).getMenu();\t// is a context menu installed?", "+\t\t\t\tif (cm != null && me.isShowContextualMenuClick()) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tfInContextMenu= true;", "+\t\t\t\t\t\t// AW: not ready for primetime", "+\t\t\t\t\t\t// OS.ContextualMenuSelect(cm.handle, globalPos.getData(), new short[1], new short[1]);", "+\t\t\t\t\t\tOS.PopUpMenuSelect(cm.handle, (short)globalPos.getY(), (short)globalPos.getX(), (short)1);", "+\t\t\t\t\t} finally {", "+\t\t\t\t\t\tfInContextMenu= false;", "+\t\t\t\t\t}", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (MacUtil.HIVIEW) {", "+\t\t\t\tOS.HIViewClick(whichControl, me.getEventRef());", "+\t\t\t\treturn false;", "+\t\t\t}", "+\t\t", "+\t\t\tswitch (cpart[0]) {", "+\t\t\tcase 0:", "+\t\t\t\tbreak;", "+", "+\t\t\tcase 111:\t// User pane", "+\t\t\t\tfTrackedControl= whichControl;\t// starts mouse tracking", "+\t\t\t\twindowProc(whichControl, SWT.MouseDown, new MacMouseEvent(me));", "+\t\t\t\tbreak;", "+", "+\t\t\tcase 112:\t// User pane", "+\t\t\t\twindowProc(whichControl, SWT.MouseDown, new MacMouseEvent(me));", "+\t\t\t\tbreak;", "+\t\t\t\t", "+\t\t\tdefault:", "+\t\t\t\twindowProc(whichControl, SWT.MouseDown, new MacMouseEvent(me));", "+\t\t\t\t", "+\t\t\t\tif (MacUtil.HIVIEW) {", "+\t\t\t\t\t// AW: Jaguar:", "+\t\t\t\t\tOS.HIViewClick(whichControl, me.getEventRef());", "+\t\t\t\t} else {", "+\t\t\t\t\tint cpart2= OS.HandleControlClick(whichControl, where.getData(), me.getModifiers(), -1);", "+\t\t\t\t\tif (cpart2 != 0) {", "+\t\t\t\t\t\twindowProc(whichControl, SWT.Selection, new MacControlEvent(whichControl, cpart2, false));", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\treturn false;"]}], "num": 10961}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a8aad08cbb519dc10ac0d0cd2d4d844", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "038fe03cfc29b4872ce1373064da87c8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "c0e52cb484656d9c8fde7046773ace24dace36d1", "commitAfterChange": "536fea109939f314c8db78904a303b501123d0c7", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Image(Device device, Image srcImage, int flag)", "signatureAfterChange": " public Image(Device device, Image srcImage, int flag)", "diff": ["-// \tint width = OS.CGImageGetWidth(srcImage.handle);", "-// \tint height = OS.CGImageGetHeight(srcImage.handle);", "-// \tint bpr = OS.CGImageGetBytesPerRow(srcImage.handle);", "-// \tint bpc = OS.CGImageGetBitsPerComponent(srcImage.handle);", "-// \tint bpp = OS.CGImageGetBitsPerPixel(srcImage.handle);", "-//\tint colorspace = OS.CGImageGetColorSpace(srcImage.handle);", "-//\tint alphaInfo = OS.kCGImageAlphaNoneSkipFirst;", "-// \t", "-//\t/* Copy transparent pixel and alpha data when necessary */", "-//\talphaInfo = OS.CGImageGetAlphaInfo(srcImage.handle);", "-//\ttransparentPixel = srcImage.transparentPixel;", "-//\talpha = srcImage.alpha;", "-//\tif (srcImage.alphaData != null) {", "-//\t\talphaData = new byte[srcImage.alphaData.length];", "-//\t\tSystem.arraycopy(srcImage.alphaData, 0, alphaData, 0, alphaData.length);", "-//\t}", "-//", "-//\t/* Create the image */", "-//\tint dataSize = height * bpr;", "-//\tdata = OS.NewPtr(dataSize);", "-//\tif (data == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-//\tint provider = OS.CGDataProviderCreateWithData(0, data, dataSize, device.releaseProc);", "-//\tif (provider == 0) {", "-//\t\tOS.DisposePtr(data);", "-//\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-//\t}", "-//\thandle = OS.CGImageCreate(width, height, bpc, bpp, bpr, colorspace, alphaInfo, provider, null, true, 0);", "-//\tOS.CGDataProviderRelease(provider);", "-//\tif (handle == 0) {", "-//\t\tOS.DisposePtr(data);", "-//\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-//\t}", "-//\t", "-//\tOS.memmove(data, srcImage.data, dataSize);", "-//\tif (flag == SWT.IMAGE_COPY) return;", "-//\t", "-//\t/* Apply transformation */", "-//\tswitch (flag) {", "-//\t\tcase SWT.IMAGE_DISABLE: {", "-//\t\t\tColor zeroColor = device.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);", "-//\t\t\tRGB zeroRGB = zeroColor.getRGB();", "-//\t\t\tbyte zeroRed = (byte)zeroRGB.red;", "-//\t\t\tbyte zeroGreen = (byte)zeroRGB.green;", "-//\t\t\tbyte zeroBlue = (byte)zeroRGB.blue;", "-//\t\t\tColor oneColor = device.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);", "-//\t\t\tRGB oneRGB = oneColor.getRGB();", "-//\t\t\tbyte oneRed = (byte)oneRGB.red;", "-//\t\t\tbyte oneGreen = (byte)oneRGB.green;", "-//\t\t\tbyte oneBlue = (byte)oneRGB.blue;", "-//\t\t\tbyte[] line = new byte[bpr];", "-//\t\t\tfor (int y=0; y<height; y++) {", "-//\t\t\t\tOS.memmove(line, data + (y * bpr), bpr);", "-//\t\t\t\tint offset = 0;", "-//\t\t\t\tfor (int x=0; x<width; x++) {", "-//\t\t\t\t\tint red = line[offset+1] & 0xFF;", "-//\t\t\t\t\tint green = line[offset+2] & 0xFF;", "-//\t\t\t\t\tint blue = line[offset+3] & 0xFF;", "-//\t\t\t\t\tint intensity = red * red + green * green + blue * blue;", "-//\t\t\t\t\tif (intensity < 98304) {", "-//\t\t\t\t\t\tline[offset+1] = zeroRed;", "-//\t\t\t\t\t\tline[offset+2] = zeroGreen;", "-//\t\t\t\t\t\tline[offset+3] = zeroBlue;", "-//\t\t\t\t\t} else {", "-//\t\t\t\t\t\tline[offset+1] = oneRed;", "-//\t\t\t\t\t\tline[offset+2] = oneGreen;", "-//\t\t\t\t\t\tline[offset+3] = oneBlue;", "-//\t\t\t\t\t}", "-//\t\t\t\t\toffset += 4;", "-//\t\t\t\t}", "-//\t\t\t\tOS.memmove(data + (y * bpr), line, bpr);", "-//\t\t\t}", "-//\t\t\tbreak;", "-//\t\t}", "-//\t\tcase SWT.IMAGE_GRAY: {\t\t\t", "-//\t\t\tbyte[] line = new byte[bpr];", "-//\t\t\tfor (int y=0; y<height; y++) {", "-//\t\t\t\tOS.memmove(line, data + (y * bpr), bpr);", "-//\t\t\t\tint offset = 0;", "-//\t\t\t\tfor (int x=0; x<width; x++) {", "-//\t\t\t\t\tint red = line[offset+1] & 0xFF;", "-//\t\t\t\t\tint green = line[offset+2] & 0xFF;", "-//\t\t\t\t\tint blue = line[offset+3] & 0xFF;", "-//\t\t\t\t\tbyte intensity = (byte)((red+red+green+green+green+green+green+blue) >> 3);", "-//\t\t\t\t\tline[offset+1] = line[offset+2] = line[offset+3] = intensity;", "-//\t\t\t\t\toffset += 4;", "-//\t\t\t\t}", "-//\t\t\t\tOS.memmove(data + (y * bpr), line, bpr);", "-//\t\t\t}", "-//\t\t\tbreak;", "-//\t\t}", "-//\t}", "+\tNSSize size = srcImage.handle.size();", "+ \tint width = (int)size.width;", "+ \tint height = (int)size.height;", "+ \tNSBitmapImageRep srcRep = srcImage.imageRep;", "+ \tint bpr = srcRep.bytesPerRow();", "+", "+\t/* Copy transparent pixel and alpha data when necessary */", "+\ttransparentPixel = srcImage.transparentPixel;", "+\talpha = srcImage.alpha;", "+\tif (srcImage.alphaData != null) {", "+\t\talphaData = new byte[srcImage.alphaData.length];", "+\t\tSystem.arraycopy(srcImage.alphaData, 0, alphaData, 0, alphaData.length);", "+\t}", "+", "+\t/* Create the image */", "+\thandle = (NSImage)new NSImage().alloc();", "+\thandle = handle.initWithSize(size);", "+\tNSBitmapImageRep rep = imageRep = (NSBitmapImageRep)new NSBitmapImageRep().alloc();", "+\trep = rep.initWithBitmapDataPlanes_pixelsWide_pixelsHigh_bitsPerSample_samplesPerPixel_hasAlpha_isPlanar_colorSpaceName_bitmapFormat_bytesPerRow_bitsPerPixel_(0, width, height, srcRep.bitsPerSample(), srcRep.samplesPerPixel(), srcRep.samplesPerPixel() == 4, srcRep.isPlanar(), new NSString(OS.NSDeviceRGBColorSpace()), OS.NSAlphaFirstBitmapFormat | OS.NSAlphaNonpremultipliedBitmapFormat, srcRep.bytesPerRow(), srcRep.bitsPerPixel());", "+\thandle.addRepresentation(rep);", "+\t", "+\tint data = rep.bitmapData();", "+\tOS.memmove(data, srcImage.imageRep.bitmapData(), width * height * 4);", "+\tif (flag == SWT.IMAGE_COPY) return;", "+\t", "+\t/* Apply transformation */", "+\tswitch (flag) {", "+\t\tcase SWT.IMAGE_DISABLE: {", "+\t\t\tColor zeroColor = device.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);", "+\t\t\tRGB zeroRGB = zeroColor.getRGB();", "+\t\t\tbyte zeroRed = (byte)zeroRGB.red;", "+\t\t\tbyte zeroGreen = (byte)zeroRGB.green;", "+\t\t\tbyte zeroBlue = (byte)zeroRGB.blue;", "+\t\t\tColor oneColor = device.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);", "+\t\t\tRGB oneRGB = oneColor.getRGB();", "+\t\t\tbyte oneRed = (byte)oneRGB.red;", "+\t\t\tbyte oneGreen = (byte)oneRGB.green;", "+\t\t\tbyte oneBlue = (byte)oneRGB.blue;", "+\t\t\tbyte[] line = new byte[bpr];", "+\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\tOS.memmove(line, data + (y * bpr), bpr);", "+\t\t\t\tint offset = 0;", "+\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\t\tint red = line[offset+1] & 0xFF;", "+\t\t\t\t\tint green = line[offset+2] & 0xFF;", "+\t\t\t\t\tint blue = line[offset+3] & 0xFF;", "+\t\t\t\t\tint intensity = red * red + green * green + blue * blue;", "+\t\t\t\t\tif (intensity < 98304) {", "+\t\t\t\t\t\tline[offset+1] = zeroRed;", "+\t\t\t\t\t\tline[offset+2] = zeroGreen;", "+\t\t\t\t\t\tline[offset+3] = zeroBlue;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tline[offset+1] = oneRed;", "+\t\t\t\t\t\tline[offset+2] = oneGreen;", "+\t\t\t\t\t\tline[offset+3] = oneBlue;", "+\t\t\t\t\t}", "+\t\t\t\t\toffset += 4;", "+\t\t\t\t}", "+\t\t\t\tOS.memmove(data + (y * bpr), line, bpr);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}", "+\t\tcase SWT.IMAGE_GRAY: {\t\t\t", "+\t\t\tbyte[] line = new byte[bpr];", "+\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\tOS.memmove(line, data + (y * bpr), bpr);", "+\t\t\t\tint offset = 0;", "+\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\t\tint red = line[offset+1] & 0xFF;", "+\t\t\t\t\tint green = line[offset+2] & 0xFF;", "+\t\t\t\t\tint blue = line[offset+3] & 0xFF;", "+\t\t\t\t\tbyte intensity = (byte)((red+red+green+green+green+green+green+blue) >> 3);", "+\t\t\t\t\tline[offset+1] = line[offset+2] = line[offset+3] = intensity;", "+\t\t\t\t\toffset += 4;", "+\t\t\t\t}", "+\t\t\t\tOS.memmove(data + (y * bpr), line, bpr);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eff3f1782a8c6c1c8e8682d44d0e892c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "21541d1c7be3bc786f754e0d8604695c158056de", "commitAfterChange": "4e877ff6e374c0eac9d6ca011beec9646167b530", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Image(Device device, Image srcImage, int flag)", "signatureAfterChange": " public Image(Device device, Image srcImage, int flag)", "diff": ["-\tif (device == null) device = Device.getDevice();", "-\tif (device == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+\tsuper(device);", "-\tthis.device = device;", "+\tdevice = this.device;", "-\t\tif (device.tracking) device.new_Object(this);", "-\t\treturn;", "-\t}", "+\t} else {", "+\t\t", "+\t\t/* Retrieve the source pixmap data */", "+\t\tint /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);", "+\t\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tint /*long*/ colormap = OS.gdk_colormap_get_system();", "+\t\tOS.gdk_pixbuf_get_from_drawable(pixbuf, srcImage.pixmap, colormap, 0, 0, 0, 0, width, height);", "+\t\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "+\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "-\t/* Retrieve the source pixmap data */", "-\tint /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);", "-\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tint /*long*/ colormap = OS.gdk_colormap_get_system();", "-\tOS.gdk_pixbuf_get_from_drawable(pixbuf, srcImage.pixmap, colormap, 0, 0, 0, 0, width, height);", "-\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "-\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "-", "-\t/* Apply transformation */", "-\tswitch (flag) {", "-\t\tcase SWT.IMAGE_DISABLE: {", "-\t\t\tColor zeroColor = device.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);", "-\t\t\tRGB zeroRGB = zeroColor.getRGB();", "-\t\t\tbyte zeroRed = (byte)zeroRGB.red;", "-\t\t\tbyte zeroGreen = (byte)zeroRGB.green;", "-\t\t\tbyte zeroBlue = (byte)zeroRGB.blue;", "-\t\t\tColor oneColor = device.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);", "-\t\t\tRGB oneRGB = oneColor.getRGB();", "-\t\t\tbyte oneRed = (byte)oneRGB.red;", "-\t\t\tbyte oneGreen = (byte)oneRGB.green;", "-\t\t\tbyte oneBlue = (byte)oneRGB.blue;", "-\t\t\tbyte[] line = new byte[stride];", "-\t\t\tfor (int y=0; y<height; y++) {", "-\t\t\t\tOS.memmove(line, pixels + (y * stride), stride);", "-\t\t\t\tfor (int x=0; x<width; x++) {", "-\t\t\t\t\tint offset = x*3;", "-\t\t\t\t\tint red = line[offset] & 0xFF;", "-\t\t\t\t\tint green = line[offset+1] & 0xFF;", "-\t\t\t\t\tint blue = line[offset+2] & 0xFF;", "-\t\t\t\t\tint intensity = red * red + green * green + blue * blue;", "-\t\t\t\t\tif (intensity < 98304) {", "-\t\t\t\t\t\tline[offset] = zeroRed;", "-\t\t\t\t\t\tline[offset+1] = zeroGreen;", "-\t\t\t\t\t\tline[offset+2] = zeroBlue;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tline[offset] = oneRed;", "-\t\t\t\t\t\tline[offset+1] = oneGreen;", "-\t\t\t\t\t\tline[offset+2] = oneBlue;", "+\t\t/* Apply transformation */", "+\t\tswitch (flag) {", "+\t\t\tcase SWT.IMAGE_DISABLE: {", "+\t\t\t\tColor zeroColor = device.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);", "+\t\t\t\tRGB zeroRGB = zeroColor.getRGB();", "+\t\t\t\tbyte zeroRed = (byte)zeroRGB.red;", "+\t\t\t\tbyte zeroGreen = (byte)zeroRGB.green;", "+\t\t\t\tbyte zeroBlue = (byte)zeroRGB.blue;", "+\t\t\t\tColor oneColor = device.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);", "+\t\t\t\tRGB oneRGB = oneColor.getRGB();", "+\t\t\t\tbyte oneRed = (byte)oneRGB.red;", "+\t\t\t\tbyte oneGreen = (byte)oneRGB.green;", "+\t\t\t\tbyte oneBlue = (byte)oneRGB.blue;", "+\t\t\t\tbyte[] line = new byte[stride];", "+\t\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\t\tOS.memmove(line, pixels + (y * stride), stride);", "+\t\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\t\t\tint offset = x*3;", "+\t\t\t\t\t\tint red = line[offset] & 0xFF;", "+\t\t\t\t\t\tint green = line[offset+1] & 0xFF;", "+\t\t\t\t\t\tint blue = line[offset+2] & 0xFF;", "+\t\t\t\t\t\tint intensity = red * red + green * green + blue * blue;", "+\t\t\t\t\t\tif (intensity < 98304) {", "+\t\t\t\t\t\t\tline[offset] = zeroRed;", "+\t\t\t\t\t\t\tline[offset+1] = zeroGreen;", "+\t\t\t\t\t\t\tline[offset+2] = zeroBlue;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tline[offset] = oneRed;", "+\t\t\t\t\t\t\tline[offset+1] = oneGreen;", "+\t\t\t\t\t\t\tline[offset+2] = oneBlue;", "+\t\t\t\t\t\t}", "+\t\t\t\t\tOS.memmove(pixels + (y * stride), line, stride);", "-\t\t\t\tOS.memmove(pixels + (y * stride), line, stride);", "+\t\t\t\tbreak;", "-\t\t\tbreak;", "-\t\t}", "-\t\tcase SWT.IMAGE_GRAY: {\t\t\t", "-\t\t\tbyte[] line = new byte[stride];", "-\t\t\tfor (int y=0; y<height; y++) {", "-\t\t\t\tOS.memmove(line, pixels + (y * stride), stride);", "-\t\t\t\tfor (int x=0; x<width; x++) {", "-\t\t\t\t\tint offset = x*3;", "-\t\t\t\t\tint red = line[offset] & 0xFF;", "-\t\t\t\t\tint green = line[offset+1] & 0xFF;", "-\t\t\t\t\tint blue = line[offset+2] & 0xFF;", "-\t\t\t\t\tbyte intensity = (byte)((red+red+green+green+green+green+green+blue) >> 3);", "-\t\t\t\t\tline[offset] = line[offset+1] = line[offset+2] = intensity;", "+\t\t\tcase SWT.IMAGE_GRAY: {\t\t\t", "+\t\t\t\tbyte[] line = new byte[stride];", "+\t\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\t\tOS.memmove(line, pixels + (y * stride), stride);", "+\t\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\t\t\tint offset = x*3;", "+\t\t\t\t\t\tint red = line[offset] & 0xFF;", "+\t\t\t\t\t\tint green = line[offset+1] & 0xFF;", "+\t\t\t\t\t\tint blue = line[offset+2] & 0xFF;", "+\t\t\t\t\t\tbyte intensity = (byte)((red+red+green+green+green+green+green+blue) >> 3);", "+\t\t\t\t\t\tline[offset] = line[offset+1] = line[offset+2] = intensity;", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.memmove(pixels + (y * stride), line, stride);", "-\t\t\t\tOS.memmove(pixels + (y * stride), line, stride);", "+\t\t\t\tbreak;", "-\t\t\tbreak;", "-\t}", "-", "-\t/* Copy data back to destination pixmap */", "-\tOS.gdk_pixbuf_render_to_drawable(pixbuf, pixmap, gdkGC, 0, 0, 0, 0, width, height, OS.GDK_RGB_DITHER_NORMAL, 0, 0);", "-\t/* Free resources */", "-\tOS.g_object_unref(pixbuf);", "-\tOS.g_object_unref(gdkGC);", "-\tif (device.tracking) device.new_Object(this);", "+\t\t/* Copy data back to destination pixmap */", "+\t\tOS.gdk_pixbuf_render_to_drawable(pixbuf, pixmap, gdkGC, 0, 0, 0, 0, width, height, OS.GDK_RGB_DITHER_NORMAL, 0, 0);", "+\t\t", "+\t\t/* Free resources */", "+\t\tOS.g_object_unref(pixbuf);", "+\t\tOS.g_object_unref(gdkGC);", "+\t}", "+\tinit();"]}], "num": 12177}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d4dba7adba53e34d6f2a099cf1a07daf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4edf4f8ce574253e400a2a9bcf490b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Display.java", "commitBeforeChange": "3ace99cc2cbeca175428eabbe777b2fc353f5d7d", "commitAfterChange": "38b0d2b8f58957af87b01bf2967bf37e853d55b0", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 66, "signatureBeforeChange": "  public void test_setSynchronizerLorg_eclipse_swt_widgets_Synchronizer()", "signatureAfterChange": "  public void test_setSynchronizerLorg_eclipse_swt_widgets_Synchronizer()", "diff": ["-\twarnUnimpl(\"Test test_setSynchronizerLorg_eclipse_swt_widgets_Synchronizer not written\");", "+\tfinal Display display = new Display();", "+\tfinal boolean[] asyncExecRan = new boolean[] {false};", "+\t", "+\ttry {", "+\t\ttry {", "+\t\t\tdisplay.setSynchronizer(null);", "+\t\t\tfail(\"No exception thrown for post with null argument\");", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t\tassertEquals(\"Incorrect exception thrown for set synchronizer with null argument\", SWT.ERROR_NULL_ARGUMENT, e);", "+\t\t}", "+\t\t", "+\t\tclass MySynchronizer extends Synchronizer {", "+\t\t\tboolean invoked = false;", "+\t\t\tMySynchronizer(Display d) {", "+\t\t\t\tsuper(d);", "+\t\t\t}", "+\t\t\tprotected void asyncExec (Runnable runnable) {", "+\t\t\t\tinvoked = true;", "+\t\t\t\tsuper.asyncExec(runnable);", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tMySynchronizer mySynchronizer = new MySynchronizer(display);", "+\t\tdisplay.setSynchronizer(mySynchronizer);", "+\t\tdisplay.asyncExec(new Runnable() {", "+\t\t\tpublic void run() {", "+\t\t\t\tasyncExecRan[0] = true;", "+\t\t\t}", "+\t\t});", "+\t\twhile (display.readAndDispatch()) {}", "+\t\tassertTrue(mySynchronizer.invoked);", "+\t\tassertTrue(asyncExecRan[0]);", "+\t} finally {", "+\t\tdisplay.dispose();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "108f5fd84deebb656449dbf5a58b1f35", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Display.java", "commitBeforeChange": "3ace99cc2cbeca175428eabbe777b2fc353f5d7d", "commitAfterChange": "38b0d2b8f58957af87b01bf2967bf37e853d55b0", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 70, "signatureBeforeChange": "  public void test_sleep()", "signatureAfterChange": "  public void test_sleep()", "diff": ["-\twarnUnimpl(\"Test test_sleep not written\");", "+\tfinal Display display = new Display();", "+\ttry {", "+\t\tThread thread;", "+\t\tboolean eventQueued;", "+\t\t", "+\t\t// Ensure event queue is empty, otherwise sleep() will just return.", "+\t\twhile(display.readAndDispatch()) {}", "+\t\tthread = new Thread() {", "+\t\t\tpublic void run() {", "+\t\t\t\ttry {", "+\t\t\t\t\t// Delay to ensure the UI thread has been put to sleep.", "+\t\t\t\t\tsleep(3000);", "+\t\t\t\t} catch (InterruptedException ex) {", "+\t\t\t\t}", "+\t\t\t\t// Use wake() to revive from sleep().", "+\t\t\t\tdisplay.wake();", "+\t\t\t}", "+\t\t};", "+\t\tthread.start();", "+\t\t// Note that sleep seems to always return true, at least", "+\t\t// on Windows, since wake() uses a null event. ", "+\t\teventQueued = display.sleep();", "+\t\t", "+\t\t// Ensure event queue is empty, otherwise sleep() will just return.", "+\t\twhile(display.readAndDispatch()) {}", "+\t\tthread = new Thread() {", "+\t\t\tpublic void run() {", "+\t\t\t\ttry {", "+\t\t\t\t\t// Delay to ensure the UI thread has been put to sleep.", "+\t\t\t\t\tsleep(3000);", "+\t\t\t\t} catch (InterruptedException ex) {", "+\t\t\t\t}", "+\t\t\t\t// Cause OS to generate an event to revive from sleep().", "+\t\t\t\tdisplay.syncExec(new Runnable() {", "+\t\t\t\t\tpublic void run() {", "+\t\t\t\t\t\tShell s = new Shell(display);", "+\t\t\t\t\t\ts.open();", "+\t\t\t\t\t\ts.dispose();", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t}", "+\t\t};", "+\t\tthread.start();", "+\t\teventQueued = display.sleep();", "+\t\tassertTrue(eventQueued);", "+\t} finally {", "+\t\tdisplay.dispose();", "+\t}"]}], "num": 37398}
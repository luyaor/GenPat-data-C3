{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "43a658e1dca6113230aa80bec5f9a16c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "226df735df64bdefbde693dcb59938f0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Slider.java", "commitBeforeChange": "4ef51dfe2ffecc59d5fe9c7cb2f4cd3516b4c0b2", "commitAfterChange": "b582abcbb5af9e9e8a0d429cf605c4541967d6dc", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 13, "signatureBeforeChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "diff": ["-", "-\t/*", "-\t* Feature in the Macintosh.  Some controls call TrackControl() or", "-\t* HandleControlClick() to track the mouse.  Unfortunately, mouse move", "-\t* events and the mouse up events are consumed.  The fix is to call the", "-\t* default handler and send a fake mouse up when tracking is finished.", "-\t* ", "-\t* NOTE: No mouse move events are sent while tracking.  There is no", "-\t* fix for this at this time.", "-\t*/", "-\tdisplay.grabControl = null;", "-\tdisplay.runDeferredEvents ();", "-\tdragging = tracking = false;", "+\tdragging = false;", "-\tif (tracking) {", "-\t\torg.eclipse.swt.internal.carbon.Point outPt = new org.eclipse.swt.internal.carbon.Point ();", "-\t\tOS.GetGlobalMouse (outPt);", "-\t\tRect rect = new Rect ();", "-\t\tint window = OS.GetControlOwner (handle);", "-\t\tint x, y;", "-\t\tif (OS.HIVIEW) {", "-\t\t\tCGPoint pt = new CGPoint ();", "-\t\t\tpt.x = outPt.h;", "-\t\t\tpt.y = outPt.v;", "-\t\t\tOS.HIViewConvertPoint (pt, 0, handle);", "-\t\t\tx = (int) pt.x;", "-\t\t\ty = (int) pt.y;", "-\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowStructureRgn, rect);", "-\t\t} else {", "-\t\t\tOS.GetControlBounds (handle, rect);", "-\t\t\tx = outPt.h - rect.left;", "-\t\t\ty = outPt.v - rect.top;", "-\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "-\t\t}", "-\t\tx -= rect.left;", "-\t\ty -=  rect.top;", "-\t\tshort [] button = new short [1];", "-\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button);", "-\t\tint chord = OS.GetCurrentEventButtonState ();", "-\t\tint modifiers = OS.GetCurrentEventKeyModifiers ();", "-\t\tsendMouseEvent (SWT.MouseUp, button [0], display.clickCount, true, chord, (short)x, (short)y, modifiers);", "-\t}", "-\ttracking = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c1848abb5100e9bea59722b9c105889", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "4ef51dfe2ffecc59d5fe9c7cb2f4cd3516b4c0b2", "commitAfterChange": "b582abcbb5af9e9e8a0d429cf605c4541967d6dc", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "diff": ["-\t/*", "-\t* Feature in the Macintosh.  Some controls call TrackControl() or", "-\t* HandleControlClick() to track the mouse.  Unfortunately, mouse move", "-\t* events and the mouse up events are consumed.  The fix is to call the", "-\t* default handler and send a fake mouse up when tracking is finished.", "-\t* ", "-\t* NOTE: No mouse move events are sent while tracking.  There is no", "-\t* fix for this at this time.", "-\t*/", "-\tif (wasExpanded) {", "-\t\torg.eclipse.swt.internal.carbon.Point outPt = new org.eclipse.swt.internal.carbon.Point ();", "-\t\tOS.GetGlobalMouse (outPt);", "-\t\tRect rect = new Rect ();", "-\t\tint window = OS.GetControlOwner (handle);", "-\t\tint x, y;", "-\t\tif (OS.HIVIEW) {", "-\t\t\tCGPoint pt = new CGPoint ();", "-\t\t\tpt.x = outPt.h;", "-\t\t\tpt.y = outPt.v;", "-\t\t\tOS.HIViewConvertPoint (pt, 0, handle);", "-\t\t\tx = (int) pt.x;", "-\t\t\ty = (int) pt.y;", "-\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowStructureRgn, rect);", "-\t\t} else {", "-\t\t\tOS.GetControlBounds (handle, rect);", "-\t\t\tx = outPt.h - rect.left;", "-\t\t\ty = outPt.v - rect.top;", "-\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "-\t\t}", "-\t\tx -= rect.left;", "-\t\ty -=  rect.top;", "-\t\tshort [] button = new short [1];", "-\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button);", "-\t\tint chord = OS.GetCurrentEventButtonState ();", "-\t\tint modifiers = OS.GetCurrentEventKeyModifiers ();", "-\t\tsendMouseEvent (SWT.MouseUp, button [0], display.clickCount, true, chord, (short)x, (short)y, modifiers);", "-\t}"]}], "num": 30185}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0b2f662d0e3f19bf3869dcf1d59711d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d890d013a9484d724ecdebd41a28cf90", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "3b0ac113d2b0be33221673aa6f3ada5f0d0911c0", "commitAfterChange": "48737b3c2cf609849ea87ebdfeb38e228af5b142", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " public int [] getSelectionIndices ()", "signatureAfterChange": " public int [] getSelectionIndices ()", "diff": ["-\tdisplay.treeSelectionLength  = 0;", "-\tdisplay.treeSelection = new int [itemCount];", "-\tOS.gtk_tree_selection_selected_foreach (selection, display.treeSelectionProc, handle);", "-\tif (display.treeSelectionLength == display.treeSelection.length) return display.treeSelection;", "-\tint [] result = new int [display.treeSelectionLength];", "-\tSystem.arraycopy (display.treeSelection, 0, result, 0, display.treeSelectionLength);", "-\treturn result;", "+\tif (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {", "+\t\tdisplay.treeSelectionLength  = 0;", "+\t\tdisplay.treeSelection = new int [itemCount];", "+\t\tOS.gtk_tree_selection_selected_foreach (selection, display.treeSelectionProc, handle);", "+\t\tif (display.treeSelectionLength == display.treeSelection.length) return display.treeSelection;", "+\t\tint [] result = new int [display.treeSelectionLength];", "+\t\tSystem.arraycopy (display.treeSelection, 0, result, 0, display.treeSelectionLength);", "+\t\treturn result;", "+\t}", "+\tint /*long*/ list = OS.gtk_tree_selection_get_selected_rows (selection, null);", "+\tif (list != 0) {", "+\t\tint count = OS.g_list_length (list);", "+\t\tint [] treeSelection = new int [count];", "+\t\tint length = 0;", "+\t\tfor (int i=0; i<count; i++) {", "+\t\t\tint /*long*/ data = OS.g_list_nth_data (list, i);", "+\t\t\tint /*long*/ indices = OS.gtk_tree_path_get_indices (data);", "+\t\t\tif (indices != 0) {", "+\t\t\t\tint [] index = new int [1];", "+\t\t\t\tOS.memmove (index, indices, 4);", "+\t\t\t\ttreeSelection [length] = index [0];", "+\t\t\t\tlength++;", "+\t\t\t}", "+\t\t}", "+\t\tOS.g_list_free (list);", "+\t\tint [] result = new int [length];", "+\t\tSystem.arraycopy (treeSelection, 0, result, 0, length);", "+\t\treturn result;", "+\t}", "+\treturn new int [0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bff4ca9d1987414cb9c06a5df467da4e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Cursor.java", "commitBeforeChange": "95d4565f745af57180cf5681e3ac70077cc7e816", "commitAfterChange": "7ac469e20b5a52d321e3f3042fd720e66ba8fada", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Cursor (Device device, ImageData source, ImageData mask, int hotspotX, int hotspotY)", "signatureAfterChange": " public Cursor (Device device, ImageData source, ImageData mask, int hotspotX, int hotspotY)", "diff": ["-//\t/* Swap the bits if necessary */", "-//\tbyte[] sourceData = new byte[source.data.length];", "-//\tbyte[] maskData = new byte[mask.data.length];", "-//\t/* Swap the bits in each byte */", "-//\tbyte[] data = source.data;", "-//\tfor (int i = 0; i < data.length; i++) {", "-//\t\tbyte s = data[i];", "-//\t\tsourceData[i] = (byte)(((s & 0x80) >> 7) |", "-//\t\t\t((s & 0x40) >> 5) |", "-//\t\t\t((s & 0x20) >> 3) |", "-//\t\t\t((s & 0x10) >> 1) |", "-//\t\t\t((s & 0x08) << 1) |", "-//\t\t\t((s & 0x04) << 3) |", "-//\t\t\t((s & 0x02) << 5) |", "-//\t\t\t((s & 0x01) << 7));", "-//\t\tsourceData[i] = (byte) ~sourceData[i];", "-//\t}", "-//\tdata = mask.data;", "-//\tfor (int i = 0; i < data.length; i++) {", "-//\t\tbyte s = data[i];", "-//\t\tmaskData[i] = (byte)(((s & 0x80) >> 7) |", "-//\t\t\t((s & 0x40) >> 5) |", "-//\t\t\t((s & 0x20) >> 3) |", "-//\t\t\t((s & 0x10) >> 1) |", "-//\t\t\t((s & 0x08) << 1) |", "-//\t\t\t((s & 0x04) << 3) |", "-//\t\t\t((s & 0x02) << 5) |", "-//\t\t\t((s & 0x01) << 7));", "-//\t\tmaskData[i] = (byte) ~maskData[i];", "-//\t}", "-//\tint xDisplay = device.xDisplay;", "-//\tint drawable = OS.XDefaultRootWindow(xDisplay);", "-//\tint sourcePixmap = OS.XCreateBitmapFromData(xDisplay, drawable, sourceData, source.width, source.height);", "-//\tint maskPixmap = OS.XCreateBitmapFromData(xDisplay, drawable, maskData, source.width, source.height);", "-//\t/* Get the colors */", "-//\tint screenNum = OS.XDefaultScreen(xDisplay);", "-//\tXColor foreground = new XColor();", "-//\tforeground.pixel = OS.XBlackPixel(xDisplay, screenNum);", "-//\tforeground.red = foreground.green = foreground.blue = 0;", "-//\tXColor background = new XColor();", "-//\tbackground.pixel = OS.XWhitePixel(xDisplay, screenNum);", "-//\tbackground.red = background.green = background.blue = (short)0xFFFF;", "-//\t/* Create the cursor */", "-//\thandle = OS.XCreatePixmapCursor(xDisplay, maskPixmap, sourcePixmap, foreground, background, hotspotX, hotspotY);", "-//\t/* Dispose the pixmaps */", "-//\tOS.XFreePixmap(xDisplay, sourcePixmap);", "-//\tOS.XFreePixmap(xDisplay, maskPixmap);", "-", "-\thandle= CURSOR1;", "+\t", "+\tint w= Math.min(16, source.width);", "+\tint h= Math.min(16, source.height);", "+\t", "+\tshort[] data= new short[16];", "+\tshort[] msk= new short[16];", "+\t", "+\tfor (int y= 0; y < h; y++) {", "+\t\tshort d= 0;", "+\t\tshort m= 0;", "+\t\tfor (int x= 0; x < w; x++) {", "+\t\t\tint bit= 1 >> x;", "+\t\t\tif (source.getPixel(x, y) != 0)", "+\t\t\t\td |= bit;", "+\t\t\tif (mask.getPixel(x, y) != 0)", "+\t\t\t\tm |= bit;", "+\t\t}", "+\t\tdata[y]= d;", "+\t\tmsk[y]= m;", "+\t}", "+\t", "+\tOS.NewCursor((short) hotspotX, (short)hotspotY, data, msk);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8199aaca956ec50ff6fb05be93313615", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "3b0ac113d2b0be33221673aa6f3ada5f0d0911c0", "commitAfterChange": "48737b3c2cf609849ea87ebdfeb38e228af5b142", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public int [] getSelectionIndices ()", "signatureAfterChange": " public int [] getSelectionIndices ()", "diff": ["-\tint itemCount = OS.gtk_tree_model_iter_n_children (modelHandle, 0);", "-\tdisplay.treeSelectionLength  = 0;", "-\tdisplay.treeSelection = new int [itemCount];", "-\tOS.gtk_tree_selection_selected_foreach (selection, display.treeSelectionProc, handle);", "-\tif (display.treeSelectionLength == display.treeSelection.length) return display.treeSelection;", "-\tint [] result = new int [display.treeSelectionLength];", "-\tSystem.arraycopy (display.treeSelection, 0, result, 0, display.treeSelectionLength);", "-\treturn result;", "+\tif (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {", "+\t\tint itemCount = OS.gtk_tree_model_iter_n_children (modelHandle, 0);", "+\t\tdisplay.treeSelectionLength  = 0;", "+\t\tdisplay.treeSelection = new int [itemCount];", "+\t\tOS.gtk_tree_selection_selected_foreach (selection, display.treeSelectionProc, handle);", "+\t\tif (display.treeSelectionLength == display.treeSelection.length) return display.treeSelection;", "+\t\tint [] result = new int [display.treeSelectionLength];", "+\t\tSystem.arraycopy (display.treeSelection, 0, result, 0, display.treeSelectionLength);", "+\t\treturn result;", "+\t}", "+\tint /*long*/ list = OS.gtk_tree_selection_get_selected_rows (selection, null);", "+\tif (list != 0) {", "+\t\tint count = OS.g_list_length (list);", "+\t\tint [] treeSelection = new int [count];", "+\t\tint length = 0;", "+\t\tfor (int i=0; i<count; i++) {", "+\t\t\tint /*long*/ data = OS.g_list_nth_data (list, i);", "+\t\t\tint /*long*/ indices = OS.gtk_tree_path_get_indices (data);", "+\t\t\tif (indices != 0) {", "+\t\t\t\tint [] index = new int [1];", "+\t\t\t\tOS.memmove (index, indices, 4);", "+\t\t\t\ttreeSelection [length] = index [0];", "+\t\t\t\tlength++;", "+\t\t\t}", "+\t\t}", "+\t\tOS.g_list_free (list);", "+\t\tint [] result = new int [length];", "+\t\tSystem.arraycopy (treeSelection, 0, result, 0, length);", "+\t\treturn result;", "+\t}", "+\treturn new int [0];"]}], "num": 32123}
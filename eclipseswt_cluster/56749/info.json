{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cdc22a383defe7b10012124f16e8c0c2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd5ae0330e90bf2ef2b1c1a58e4c1ea1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 17, "signatureBeforeChange": " \tpublic void writeLine(String line, int lineOffset)", "signatureAfterChange": " \tpublic void writeLine(String line, int lineOffset)", "diff": ["-\t\tStyleRange[] styles = new StyleRange[0];", "-\t\tColor lineBackground = null;", "-\t\tStyledTextEvent event;", "-\t\t", "-\t\tevent = renderer.getLineStyleData(lineOffset, line);", "+\t\tint lineIndex = content.getLineAtOffset(lineOffset);", "+\t\tint lineAlignment, lineIndent;", "+\t\tboolean lineJustify;", "+\t\tint[] ranges;", "+\t\tStyleRange[] styles;", "+\t\tStyledTextEvent event = getLineStyleData(lineOffset, line);", "+\t\t\tlineAlignment = event.alignment;", "+\t\t\tlineIndent = event.indent;", "+\t\t\tlineJustify = event.justify;", "+\t\t\tranges = event.ranges;", "+\t\t} else {", "+\t\t\tlineAlignment = renderer.getLineAlignment(lineIndex, alignment);", "+\t\t\tlineIndent =  renderer.getLineIndent(lineIndex, indent);\t\t\t", "+\t\t\tlineJustify = renderer.getLineJustify(lineIndex, justify);", "+\t\t\tranges = renderer.getRanges(lineOffset, line.length());", "+\t\t\tstyles = renderer.getStyleRanges(lineOffset, line.length(), false);", "-\t\tevent = renderer.getLineBackgroundData(lineOffset, line);", "-\t\tif (event != null) {", "-\t\t\tlineBackground = event.lineBackground;", "-\t\t}", "-\t\tif (lineBackground == null) {", "-\t\t\tlineBackground = getBackground();", "-\t\t}", "-\t\twriteStyledLine(line, lineOffset, styles, lineBackground);", "+\t\tif (styles == null) styles = new StyleRange[0];\t\t", "+\t\tColor lineBackground = renderer.getLineBackground(lineIndex, null);", "+\t\tevent = getLineBackgroundData(lineOffset, line);", "+\t\tif (event != null && event.lineBackground != null) lineBackground = event.lineBackground;", "+\t\twriteStyledLine(line, lineOffset, ranges, styles, lineBackground, lineIndent, lineAlignment, lineJustify);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5c0e08a054edb41d71ef46068c016a3e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "b302d875486b75e533e3d2399973295d9226483f", "commitAfterChange": "7c792fbfb245e095de7492a841c53ba97a7be55a", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r \tvoid writeStyledLine(String line, int lineOffset, StyleRange[] styles, Color lineBackground)", "signatureAfterChange": "\r \tvoid writeStyledLine(String line, int lineOffset, StyleRange[] styles, Color lineBackground)", "diff": ["+\t\tint lineEndOffset = Math.min(lineLength, endOffset - lineOffset);\r", "-\t\t\t// break on partial last line\r", "-\t\t\tif (style.start > endOffset) {\r", "+\t\t\t// style starts beyond line end or RTF write end\r", "+\t\t\tif (start >= lineEndOffset) {\r", "-\t\t\t\t// copy to start of style or end of write range (specified \r", "-\t\t\t\t// during object creation) or end of line\r", "-\t\t\t\tcopyEnd = Math.min(start, endOffset - lineOffset);\r", "-\t\t\t\tcopyEnd = Math.min(copyEnd, lineLength);\r", "-\t\t\t\twrite(line, lineIndex, copyEnd);\r", "-\t\t\t\tlineIndex = copyEnd;\r", "-\t\t\t\tif (copyEnd != start) {\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\t}\r", "+\t\t\t\t// copy to start of style\r", "+\t\t\t\t// style starting betond end of write range or end of line \r", "+\t\t\t\t// is guarded against above.\r", "+\t\t\t\twrite(line, lineIndex, start);\r", "+\t\t\t\tlineIndex = start;\r", "-\t\t\t// copy to end of style or end of write range (specified \r", "-\t\t\t// during object creation) or end of line\r", "-\t\t\tcopyEnd = Math.min(end, endOffset - lineOffset);\r", "-\t\t\tcopyEnd = Math.min(copyEnd, lineLength);\r", "+\t\t\t// copy to end of style or end of write range or end of line\r", "+\t\t\tcopyEnd = Math.min(end, lineEndOffset);\r", "+\t\t\t// guard against invalid styles and let style processing continue\r", "+\t\t\tcopyEnd = Math.max(copyEnd, lineIndex);\r", "-\t\t\tif (copyEnd != end) {\r", "-\t\t\t\tbreak;\r", "-\t\t\t}\r", "-\t\tcopyEnd = Math.min(lineLength, endOffset - lineOffset);\r", "-\t\tif (lineIndex < copyEnd) {\r", "-\t\t\twrite(line, lineIndex, copyEnd);\r", "+\t\t// write unstyled text at the end of the line\r", "+\t\tif (lineIndex < lineEndOffset) {\r", "+\t\t\twrite(line, lineIndex, lineEndOffset);\r"]}], "num": 56749}
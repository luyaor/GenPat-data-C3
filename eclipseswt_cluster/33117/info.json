{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "85da298706e4785d8ba42b9644a2ca60", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e6e58a054806849b7eaa4884e0dc170", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JavadocBasher/org/eclipse/swt/tools/internal/JavadocBasher.java", "commitBeforeChange": "42e53738f376d59346fd1e67a96b510d76cf8b16", "commitAfterChange": "3262a158cb5d63abc8646e4dd6f9c0fb97c7a7ac", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \r \r \tvoid bashFile(final File source, final File target, File out)", "signatureAfterChange": "\r \r \r \tvoid bashFile(final File source, final File target, File out)", "diff": ["+\t\t\t\t\t\tcomments.remove(key);\r", "+\t\t\t\t\t\tcomments.remove(key);\r", "+\t\t\t\t\t\tcomments.remove(key);\r", "-\t\t\r", "+\t\t/* Rudimentary API consistency checker.\r", "+\t\t * This assumes that:\r", "+\t\t * a) the sourceSubdir (typically win32) API is correct\r", "+\t\t * b) all sourceSubdir API classes, methods and fields do have a comment\r", "+\t\t * c) names that are in the filter list are never API,\r", "+\t\t * \t\tor they are old API that is defined in the super on some platforms\r", "+\t\t */\r", "+\t\tif (comments.size() > 0) {\r", "+\t\t\tString [] filter = new String [] {\r", "+\t\t\t\t\"Color.win32_newDeviceint\",\r", "+\t\t\t\t\"Cursor.win32_newDeviceint\",\r", "+\t\t\t\t\"Device.hPalette\",\r", "+\t\t\t\t\"Font.win32_newDevicelong\",\r", "+\t\t\t\t\"FontData.data\",\r", "+\t\t\t\t\"FontData.win32_newLOGFONTfloat\",\r", "+\t\t\t\t\"FontMetrics.handle\",\r", "+\t\t\t\t\"FontMetrics.win32_newTEXTMETRIC\",\r", "+\t\t\t\t\"GC.win32_newlongGCData\",\r", "+\t\t\t\t\"GC.win32_newDrawableGCData\",\r", "+\t\t\t\t\"Image.win32_newDeviceintlong\",\r", "+\t\t\t\t\"Pattern.handle\",\r", "+\t\t\t\t\"Region.win32_newDeviceint\",\r", "+\t\t\t\t\"Control.handle\",\r", "+\t\t\t\t\"Display.getSystemFont\",\r", "+\t\t\t\t\"Display.msg\",\r", "+\t\t\t\t\"Menu.handle\",\r", "+\t\t\t\t\"Shell.win32_newDisplaylong\",\t\r", "+\t\t\t\t\"Accessible.internal_WM_GETOBJECTlonglong\",\r", "+\t\t\t\t\"TransferData.result\",\r", "+\t\t\t\t\"TransferData.stgmedium\",\r", "+\t\t\t\t\"TransferData.pIDataObject\",\r", "+\t\t\t\t\"TransferData.formatetc\",\r", "+\t\t\t\t\"Printer.handle\",\r", "+\t\t\t\t\"Printer.checkDevice\",\t\r", "+\t\t\t\t\"TableDragSourceEffect.dragFinishedDragSourceEvent\",\r", "+\t\t\t\t\"TableDragSourceEffect.dragStartDragSourceEvent\",\r", "+\t\t\t\t\"TableDropTargetEffect.dragOverDropTargetEvent\",\r", "+\t\t\t\t\"TableDropTargetEffect.dragEnterDropTargetEvent\",\r", "+\t\t\t\t\"TableDropTargetEffect.dragLeaveDropTargetEvent\",\r", "+\t\t\t\t\"Transfer.validateObject\",\r", "+\t\t\t\t\"TransferData.result\",\r", "+\t\t\t\t\"TransferData.stgmedium\",\r", "+\t\t\t\t\"TransferData.pIDataObject\",\r", "+\t\t\t\t\"TransferData.formatetc\",\r", "+\t\t\t\t\"TreeDragSourceEffect.dragFinishedDragSourceEvent\",\r", "+\t\t\t\t\"TreeDragSourceEffect.dragStartDragSourceEvent\",\r", "+\t\t\t\t\"TreeDropTargetEffect.dragLeaveDropTargetEvent\",\r", "+\t\t\t\t\"TreeDropTargetEffect.dragEnterDropTargetEvent\",\r", "+\t\t\t\t\"TreeDropTargetEffect.dragOverDropTargetEvent\",\r", "+\t\t\t\t\"Printer.createDeviceData\",\r", "+\t\t\t\t\"Printer.internal_dispose_GClongGCData\",\r", "+\t\t\t\t\"Printer.release\",\r", "+\t\t\t\t\"Printer.destroy\",\r", "+\t\t\t\t\"Image.handle\",\r", "+\t\t\t\t\"Display.getClientArea\",\r", "+\t\t\t\t\"TreeItem.handle\",\r", "+\t\t\t};\r", "+\t\t\tfor (Iterator iterator = comments.keySet().iterator(); iterator.hasNext();) {\r", "+\t\t\t\tString name = (String) iterator.next();\r", "+\t\t\t\tif (((String) comments.get(name)).length() > 0){\r", "+\t\t\t\t\tint i = 0;\r", "+\t\t\t\t\tfor (i = 0; i < filter.length; i++) {\r", "+\t\t\t\t\t\tif (name.equals(filter[i])) break;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tif (i >= filter.length) {\r", "+\t\t\t\t\t\tSystem.err.println(\"***No target for \" + name);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e89af218c0e21f348fdbeca2bdb2ac5d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 4, "signatureBeforeChange": " String getTranslatedCharSet (FontData fontData)", "signatureAfterChange": "  int fontProc (int nextHandler, int theEvent, int userData)", "diff": ["- */", "-String getTranslatedCharSet (FontData fontData) {", "-\tString characterSet = fontData.characterSetRegistry;", "-\tString translatedCharSet = null;", "-", "-\tif (characterSet.startsWith (PREFIX_ISO8859)) {", "-\t\tint charSetName = 1;", "-\t\ttry {", "-\t\t\tcharSetName = Integer.valueOf (fontData.characterSetName).intValue ();", "-\t\t} catch (NumberFormatException e) {", "-\t\t\t/*", "-\t\t\t * This block is purposely left empty since a default", "-\t\t\t * value is already specified above.", "-\t\t\t */", "-\t\t}", "-", "-\t\tcharacterSet += \"-\" + charSetName;", "-\t\ttranslatedCharSet = ISO_CHARSETS [charSetName];", "-\t}", "-\telse\t", "-\tif (characterSet.startsWith (PREFIX_ISO646)) {", "-\t\ttranslatedCharSet = SWT.getMessage(\"SWT_Charset_ASCII\");", "-\t}", "-\telse\t", "-\tif (characterSet.startsWith (PREFIX_UNICODE)) {", "-\t\ttranslatedCharSet = SWT.getMessage(\"SWT_Charset_Unicode\");", "-\t}", "-\telse\t", "-\tif (characterSet.startsWith (PREFIX_JAPANESE)) {", "-\t\ttranslatedCharSet = SWT.getMessage(\"SWT_Charset_Japanese\");", "-\t}", "-\telse\t", "-\tif (characterSet.startsWith (PREFIX_SIMPLIFIEDCHINESE)) {", "-\t\ttranslatedCharSet = SWT.getMessage(\"SWT_Charset_SimplifiedChinese\");", "-\t}", "-\telse\t", "-\tif (characterSet.startsWith (PREFIX_TRADITIONALCHINESE)) {", "-\t\ttranslatedCharSet = SWT.getMessage(\"SWT_Charset_TraditionalChinese\");", "-\t}", "-\telse\t", "-\tif (characterSet.startsWith (PREFIX_KOREAN)) {", "-\t\ttranslatedCharSet = SWT.getMessage(\"SWT_Charset_Korean\");", "-\t}", "-\tif (translatedCharSet != null) {", "-\t\ttranslatedCharSet += \" (\" + characterSet + ')';", "-\t}", "-\telse {", "-\t\ttranslatedCharSet = characterSet;", "-\t}", "-\treturn translatedCharSet;", "-}", "+int fontProc (int nextHandler, int theEvent, int userData) {", "+\tint kind = OS.GetEventKind (theEvent);", "+\tswitch (kind) {", "+\t\tcase OS.kEventFontPanelClosed:", "+\t\t\topen = false;", "+\t\t\tbreak;", "+\t\tcase OS.kEventFontSelection:", "+\t\t\tif (fontData == null) fontData = new FontData();", "+\t\t\tshort [] fontFamily = new short [1];", "+\t\t\tif (OS.GetEventParameter (theEvent, OS.kEventParamFMFontFamily, OS.typeSInt16, null, 2, null, fontFamily) == OS.noErr) {", "+\t\t\t\tbyte[] buffer = new byte[256];", "+\t\t\t\tOS.FMGetFontFamilyName(fontFamily [0], buffer);", "+\t\t\t\tint length = buffer[0] & 0xFF;", "+\t\t\t\tchar[] chars = new char[length];", "+\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\tchars[i]= (char)buffer[i+1];", "+\t\t\t\t}", "+\t\t\t\tfontData.setName (new String(chars));", "+\t\t\tshort [] fontStyle = new short [1];", "+\t\t\tif (OS.GetEventParameter (theEvent, OS.kEventParamFMFontStyle, OS.typeSInt16, null, 2, null, fontStyle) == OS.noErr) {", "+\t\t\t\tint style = SWT.NORMAL;", "+\t\t\t\tif ((fontStyle [0] & OS.bold) != 0) style |= SWT.BOLD;", "+\t\t\t\tif ((fontStyle [0] & OS.italic) != 0) style |= SWT.ITALIC;", "+\t\t\t\tfontData.setStyle (style);", "+\t\t\tshort [] fontSize = new short [1];", "+\t\t\tif (OS.GetEventParameter (theEvent, OS.kEventParamFMFontSize, OS.typeSInt16, null, 2, null, fontSize) == OS.noErr) {", "+\t\t\t\tfontData.setHeight (fontSize [0]);", "+\t\t\t}", "+\t\t\t// NEEDS WORK - color not supported in native dialog for Carbon", "+\t\t\tRGBColor color = new RGBColor ();", "+\t\t\tint [] actualSize = new int [1];", "+\t\t\tif (OS.GetEventParameter (theEvent, OS.kEventParamFontColor, OS.typeRGBColor, null, RGBColor.sizeof, actualSize, color) == OS.noErr) {", "+\t\t\t\tint red = (color.red >> 8) & 0xFF;", "+\t\t\t\tint green = (color.green >> 8) & 0xFF;", "+\t\t\t\tint blue =\t(color.blue >> 8) & 0xFF;", "+\t\t\t\trgb = new RGB(red, green, blue);", "+\t\t\t}", "+\t\t\tbreak;", "+\treturn OS.noErr;"]}], "num": 33117}
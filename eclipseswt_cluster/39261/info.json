{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4256d1731ac57d5d9161de13c820a522", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d34c013fc9b1dd756e426a5b4ba01016", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "960b778cd29f39602256437735e3a4d46add2d85", "commitAfterChange": "aac1e895cec971aa32d4b9d48dfb432a9a753155", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void setControl (Control control)", "signatureAfterChange": " public void setControl (Control control)", "diff": ["-\t//TODO ", "-//\tControl oldControl = this.control, newControl = control;", "-//\tthis.control = control;", "-//\tint parentHandle = parent.parentingHandle ();", "-//\tint parentChildren = OS.Panel_Children (parentHandle);", "-//\tif (oldControl != null) {", "-//\t\tint topHandle = oldControl.topHandle ();", "-//\t\tOS.UIElementCollection_Remove (parentChildren, topHandle);", "-//\t}", "-//\tOS.GCHandle_Free (parentChildren);", "-//\t", "-//\tparent.setControl (this, newControl);", "-\tthis.control = control;", "+\tif (control == null) {", "+\t\tint property = OS.Control_BackgroundProperty ();", "+\t\tOS.DependencyObject_ClearValue (handle, property);", "+\t\tOS.GCHandle_Free (property);", "+\t\tControl oldControl = this.control;", "+\t\tif (oldControl != null && !oldControl.isDisposed ()) OS.Panel_SetZIndex (oldControl.handle, 0);", "+\t} else {", "+\t\tint brush = OS.Brushes_Transparent ();", "+\t\tOS.Control_Background (handle, brush);", "+\t\tOS.GCHandle_Free (brush);", "+\t\tint pt = OS.gcnew_Point (0, 0);", "+\t\tif (pt == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tint loc = OS.UIElement_TranslatePoint (handle, pt, parent.parentingHandle);", "+\t\tOS.GCHandle_Free (pt);", "+\t\tOS.Canvas_SetLeft (control.handle, OS.Point_X (loc));", "+\t\tOS.Canvas_SetTop (control.handle, OS.Point_Y (loc));", "+\t\tOS.Panel_SetZIndex (control.handle, parent.childCount);", "+\t\tOS.GCHandle_Free (loc);", "+\t}", "+\tthis.control = control;\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3955c54ae9565c63f5c98f8a817a906", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "c63ca636edfbea4cd55ccc07da414186be375ce0", "commitAfterChange": "e38d4aec3f79c42ea6666a7a37c026187a8aa6ea", "methodNumberBeforeChange": 251, "methodNumberAfterChange": 258, "signatureBeforeChange": "  LRESULT wmColorChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmColorChild (int wParam, int lParam)", "diff": ["-\tif ((state & TRANSPARENT) != 0) {", "-\t\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "-\t\t\tcontrol = findThemeControl ();", "+\tif (backgroundImage != null) {", "+\t\tif ((state & TRANSPARENT) != 0) {", "+\t\t\tcontrol = findImageControl (backgroundImage);", "-\tif (background == -1 && foreground == -1 && control == null) {", "-\t\treturn null;", "+\tif (foreground == -1 && background == -1 && control == null) {", "+\t\tif ((state & TRANSPARENT) != 0) {", "+\t\t\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "+\t\t\t\tcontrol = findThemeControl ();", "+\t\t\t}", "+\t\t}", "+\t\tif (control == null) return null;", "-\t\tcontrol.drawThemeBackground (wParam, handle, rect);", "-\t\tOS.SetBkMode (wParam, OS.TRANSPARENT);", "-\t\treturn new LRESULT (OS.GetStockObject (OS.NULL_BRUSH));", "+\t\tif (backgroundImage != null) {", "+\t\t\tint hwnd = control.handle;", "+\t\t\tint hBitmap = backgroundImage.handle;", "+\t\t\tOS.MapWindowPoints (handle, hwnd, rect, 2);", "+\t\t\tPOINT lpPoint = new POINT ();", "+\t\t\tOS.GetWindowOrgEx (wParam, lpPoint);", "+\t\t\tOS.SetBrushOrgEx (wParam, -rect.left - lpPoint.x, -rect.top - lpPoint.y, lpPoint);", "+\t\t\tint hBrush = findBrush (hBitmap, OS.BS_PATTERN);", "+\t\t\tif ((state & DRAW_BACKGROUND) != 0) {", "+\t\t\t\tint hOldBrush = OS.SelectObject (wParam, hBrush);", "+\t\t\t\tOS.MapWindowPoints (hwnd, handle, rect, 2);", "+\t\t\t\tOS.PatBlt (wParam, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top, OS.PATCOPY);", "+\t\t\t\tOS.SelectObject (wParam, hOldBrush);", "+\t\t\t}", "+\t\t\tOS.SetBkMode (wParam, OS.TRANSPARENT);", "+\t\t\treturn new LRESULT (hBrush);", "+\t\t} else {", "+\t\t\tfillBackground (wParam, control, rect);", "+\t\t\tOS.SetBkMode (wParam, OS.TRANSPARENT);", "+\t\t\treturn new LRESULT (OS.GetStockObject (OS.NULL_BRUSH));", "+\t\t}", "-\treturn new LRESULT (findBrush (backPixel));", "+\treturn new LRESULT (findBrush (backPixel, OS.BS_SOLID));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a251f4ab60ed408dd941fcdb4ba4cc2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "a62cb4f3b5a52f32bd2e8a19c653c47c8c62cdfd", "commitAfterChange": "12917518bee3a227f438e29fb003e026839ee122", "methodNumberBeforeChange": 275, "methodNumberAfterChange": 275, "signatureBeforeChange": "  LRESULT WM_WINDOWPOSCHANGING (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_WINDOWPOSCHANGING (int wParam, int lParam)", "diff": ["-\t\t\t\tint /*long*/ hwndParent = parent == null ? 0 : parent.handle;", "-\t\t\t\tOS.MapWindowPoints (0, hwndParent, rect, 2);", "-\t\t\t\tOS.InvalidateRect (hwndParent, rect, true);", "+\t\t\t\tint width = rect.right - rect.left;", "+\t\t\t\tint height = rect.bottom - rect.top;", "+\t\t\t\tif (width != 0 && height != 0) {", "+\t\t\t\t\tint /*long*/ hwndParent = parent == null ? 0 : parent.handle;", "+\t\t\t\t\tOS.MapWindowPoints (0, hwndParent, rect, 2);", "+\t\t\t\t\tif (OS.IsWinCE) {", "+\t\t\t\t\t\tOS.InvalidateRect (hwndParent, rect, true);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint /*long*/ rgn1 = OS.CreateRectRgn (rect.left, rect.top, rect.right, rect.bottom);", "+\t\t\t\t\t\tint /*long*/ rgn2 = OS.CreateRectRgn (lpwp.x, lpwp.y, lpwp.x + lpwp.cx, lpwp.y + lpwp.cy);", "+\t\t\t\t\t\tOS.CombineRgn (rgn1, rgn1, rgn2, OS.RGN_DIFF);", "+\t\t\t\t\t\tint flags = OS.RDW_ERASE | OS.RDW_FRAME | OS.RDW_INVALIDATE | OS.RDW_ALLCHILDREN;", "+\t\t\t\t\t\tOS.RedrawWindow (hwndParent, null, rgn1, flags);", "+\t\t\t\t\t\tOS.DeleteObject (rgn1);", "+\t\t\t\t\t\tOS.DeleteObject (rgn2);", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c1becad4b84387c8c9db19863d1d0a2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 59, "signatureBeforeChange": " boolean hasFirstColumnImage()", "signatureAfterChange": " void onArrowRight (int stateMask)", "diff": ["- */", "-boolean hasFirstColumnImage() {", "-\treturn firstColumnImage;", "+}", "+void onArrowRight (int stateMask) {", "+\tScrollBar hBar = getHorizontalBar ();", "+\tint maximum = hBar.getMaximum ();", "+\tint clientWidth = getClientArea ().width;", "+\tif ((horizontalOffset + getClientArea ().width) == maximum) return;", "+\tif (maximum <= clientWidth) return;", "+\tint newSelection = Math.min (horizontalOffset + SIZE_HORIZONTALSCROLL, maximum - clientWidth);", "+\tRectangle clientArea = getClientArea ();", "+\tupdate ();", "+\tGC gc = new GC (this);", "+\tgc.copyArea (", "+\t\t0, 0,", "+\t\tclientArea.width, clientArea.height,", "+\t\thorizontalOffset - newSelection, 0);", "+\tgc.dispose ();", "+\tif (getHeaderVisible ()) {", "+\t\tclientArea = header.getClientArea ();", "+\t\theader.update ();", "+\t\tgc = new GC (header);", "+\t\tgc.copyArea (", "+\t\t\t0, 0,", "+\t\t\tclientArea.width, clientArea.height,", "+\t\t\thorizontalOffset - newSelection, 0);", "+\t\tgc.dispose();", "+\t}", "+\thorizontalOffset = newSelection;", "+\thBar.setSelection (horizontalOffset);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed6e735059285b68e066be7a89448eee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet205.java", "commitBeforeChange": "20484d81041a6bb493003f692de13beee6ceb29f", "commitAfterChange": "789cafaaafd872de22048c1bf4e248615ee61318", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public static void main(String[] args)", "signatureAfterChange": " \t public static void main(String[] args)", "diff": ["+\tshell.setText(\"Embedding Objects in StyledText\");", "-\tString text = \"Embedded Images test, the first image is blue: \\uFFFC, the second one if magenta: \\uFFFC, and last one green: \\uFFFC.\";", "-\tfinal int[] offsets = {47, 77, 100};", "+\tfinal Button button = new Button(shell, SWT.PUSH);", "+\tbutton.setText(\"Button\");", "+\tbutton.pack();", "+\tString text = \"Here is some text with a blue image \\uFFFC, a magenta image \\uFFFC, a green image \\uFFFC, and a button: \\uFFFC.\";", "+\tfinal int[] imageOffsets = {36, 55, 72};", "-\t\tTextStyle imageStyle = new TextStyle (null, null, null);", "-\t\timageStyle.metrics = new GlyphMetrics (bounds.height, 0, bounds.width); ", "-\t\tlayout.setStyle(imageStyle, offsets[i], offsets[i]);", "+\t\tTextStyle imageStyle = new TextStyle(null, null, null);", "+\t\timageStyle.metrics = new GlyphMetrics(bounds.height, 0, bounds.width); ", "+\t\tlayout.setStyle(imageStyle, imageOffsets[i], imageOffsets[i]);", "-", "+\tRectangle bounds = button.getBounds();", "+\tTextStyle buttonStyle = new TextStyle(null, null, null);", "+\tbuttonStyle.metrics = new GlyphMetrics(bounds.height, 0, bounds.width); ", "+\tfinal int buttonOffset = text.length() - 2;", "+\tlayout.setStyle(buttonStyle, buttonOffset, buttonOffset);", "-\t\t\t\tint offset = offsets[i];", "+\t\t\t\tint offset = imageOffsets[i];", "+\t\t\tint lineIndex = layout.getLineIndex(buttonOffset);", "+\t\t\tFontMetrics lineMetrics = layout.getLineMetrics(lineIndex);", "+\t\t\tPoint point = layout.getLocation(buttonOffset, false);", "+\t\t\tGlyphMetrics glyphMetrics = layout.getStyle(buttonOffset).metrics;", "+\t\t\tbutton.setLocation(point.x + margin.x, point.y + margin.y + lineMetrics.getAscent() - glyphMetrics.ascent);", "-\tdisplay.dispose ();", "+\tdisplay.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44b3ea731d34705e1048cda883a10f35", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "89eb385b1da972fcbe2914fa0139ceb359ab6ba8", "commitAfterChange": "f304fd949d33aeaf7168524a4af52e038b23993e", "methodNumberBeforeChange": 122, "methodNumberAfterChange": 122, "signatureBeforeChange": " public void setRedraw (boolean redraw)", "signatureAfterChange": " public void setRedraw (boolean redraw)", "diff": ["+\tif (redraw) {", "+\t\tif (--drawCount == 0) {", "+\t\t\tif (redrawWindow != 0) {", "+\t\t\t\tint xDisplay = OS.XtDisplay(handle);", "+\t\t\t\tOS.XDestroyWindow(xDisplay, redrawWindow);", "+\t\t\t\tredrawWindow = 0;", "+\t\t\t}", "+\t\t}", "+\t} else {", "+\t\tif (drawCount++ == 0) {", "+\t\t\tint xDisplay = OS.XtDisplay (handle);", "+\t\t\tif (xDisplay == 0) return;", "+\t\t\tint xWindow = OS.XtWindow (handle);", "+\t\t\tif (xWindow == 0) return;", "+\t\t\tRectangle rect = getBounds();", "+\t\t\tXSetWindowAttributes attributes = new XSetWindowAttributes ();", "+\t\t\tattributes.background_pixmap = OS.None;", "+\t\t\tattributes.event_mask = OS.ExposureMask;", "+\t\t\tint mask = OS.CWDontPropagate | OS.CWEventMask | OS.CWBackPixmap;", "+\t\t\tredrawWindow = OS.XCreateWindow (xDisplay, xWindow, 0, 0, rect.width, rect.height,", "+\t\t\t\t\t0,OS.CopyFromParent, OS.CopyFromParent, OS.CopyFromParent, mask, attributes);", "+\t\t\tOS.XRaiseWindow (xDisplay, redrawWindow);", "+\t\t\tOS.XMapWindow (xDisplay, redrawWindow);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5007266ee5790312f679a536aae9aad", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "ef2c019fd0294b2970a5f92b4892277f3d0a8568", "commitAfterChange": "2637aeee793efc6570a7b95e5bfd1e1b7facd424", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "\r \r int Ph_EV_BUT_PRESS (int widget, int info)", "signatureAfterChange": "\r \r int Ph_EV_BUT_PRESS (int widget, int info)", "diff": ["+\tint result = super.Ph_EV_BUT_PRESS (widget, info);\r", "+\tif (result != OS.Pt_CONTINUE)return result;\r", "+\tif ((state & CANVAS) != 0) {\r", "+\t\tif (info == 0) return OS.Pt_END;\r", "+\t\tPtCallbackInfo_t cbinfo = new PtCallbackInfo_t ();\r", "+\t\tOS.memmove (cbinfo, info, PtCallbackInfo_t.sizeof);\r", "+\t\tif (cbinfo.event == 0) return OS.Pt_END;\r", "+\t\tPhEvent_t ev = new PhEvent_t ();\r", "+\t\tOS.memmove (ev, cbinfo.event, PhEvent_t.sizeof);\r", "+\t\tint data = OS.PhGetData (cbinfo.event);\r", "+\t\tif (data == 0) return OS.Pt_END;\r", "+\t\tPhPointerEvent_t pe = new PhPointerEvent_t ();\r", "+\t\tOS.memmove (pe, data, PhPointerEvent_t.sizeof);\r", "+\t\r", "+\t\t/* Set focus for a CANVAS with no children */\r", "+\t\tif ((style & SWT.NO_FOCUS) == 0) {\r", "+\t\t\tif (pe.buttons == OS.Ph_BUTTON_SELECT) {\r", "+\t\t\t\tif (OS.PtWidgetChildFront (handle) == 0) setFocus ();\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\treturn result;\r", "+}\r", "-\t\tif (!(menu != null && pe.buttons == OS.Ph_BUTTON_MENU)) {\r", "-\t\t\tif (pe.click_count == 1) {\r", "-\t\t\t\tPhRect_t rect = new PhRect_t ();\r", "-\t\t\t\tPhPoint_t pos = new PhPoint_t();\r", "-\t\t\t\tpos.x = pe.pos_x;\r", "-\t\t\t\tpos.y = pe.pos_y;\r", "-\t\t\t\trect.ul_x = rect.lr_x = (short) (pos.x + ev.translation_x);\r", "-\t\t\t\trect.ul_y = rect.lr_y = (short) (pos.y + ev.translation_y);\r", "-\t\t\t\tint rid = OS.PtWidgetRid (handle);\r", "-\t\t\t\tint input_group = OS.PhInputGroup (0);\r", "-\t\t\t\tint flags = OS.Ph_DRAG_KEY_MOTION | OS.Ph_DRAG_TRACK | OS.Ph_TRACK_DRAG;\r", "-\t\t\t\tOS.PhInitDrag (rid, flags, rect, null, input_group, null, null, null, pos, null);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\r", "-\t\tint result = super.Ph_EV_BUT_PRESS (widget, info);\r", "-\t\r", "-\t\t/* Set focus for the a CANVAS with no children */\r", "-\t\tif ((style & SWT.NO_FOCUS) == 0) {\r", "-\t\t\tif (pe.buttons == OS.Ph_BUTTON_SELECT) {\r", "-\t\t\t\tif (OS.PtWidgetChildFront (handle) == 0) {\r", "-\t\t\t\t\tsetFocus ();\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\treturn result;\r", "-\treturn super.Ph_EV_BUT_PRESS (widget, info);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e245840ee73f14aa8a77229295994aa6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/wpf/org/eclipse/swt/program/Program.java", "commitBeforeChange": "25e0a88282a8f52572829023c99494b77782afb9", "commitAfterChange": "4492e7490e450a65a8ceed26e7c2cb00d8b99b49", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public ImageData getImageData ()", "signatureAfterChange": " public ImageData getImageData ()", "diff": ["-\t//TODO", "-\treturn null;", "+\tint nIconIndex = 0;", "+\tString fileName = iconName;", "+\tint index = iconName.indexOf (',');", "+\tif (index != -1) {", "+\t\tfileName = iconName.substring (0, index);", "+\t\tString iconIndex = iconName.substring (index + 1, iconName.length ()).trim ();", "+\t\ttry {", "+\t\t\tnIconIndex = Integer.parseInt (iconIndex);", "+\t\t} catch (NumberFormatException e) {}", "+\t}", "+\tint length = fileName.length ();", "+\tchar [] buffer = new char [length + 1];", "+\tfileName.getChars (0, length, buffer, 0);", "+\tint [] phiconSmall = new int [1], phiconLarge = null;", "+\tOS.ExtractIconExW (buffer, nIconIndex, phiconLarge, phiconSmall, 1);", "+\tif (phiconSmall [0] == 0) return null;", "+\tint empty = OS.Int32Rect_Empty ();", "+\tint source = OS.Imaging_CreateBitmapSourceFromHIcon (phiconSmall [0], empty, 0);", "+\tImage image = Image.wpf_new (null, SWT.ICON, source);", "+\tOS.GCHandle_Free (empty);", "+\tImageData imageData = image.getImageData ();", "+\timage.dispose ();", "+\treturn imageData;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41e1420e47c18f4d122c22b4a2df33c9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "f54e41448034ec247ad049d3a28f78159fa1e0ee", "commitAfterChange": "34c584c8119c0f52680701ebb1b115322f2f4505", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r public boolean open ()", "signatureAfterChange": "\r public boolean open ()", "diff": ["+\t\r", "+\tint ptrGrabResult = OS.XGrabPointer (\r", "+\t\txDisplay,\r", "+\t\txWindow,\r", "+\t\t0,\r", "+\t\tOS.ButtonPressMask | OS.ButtonReleaseMask | OS.PointerMotionMask,\r", "+\t\tOS.GrabModeAsync,\r", "+\t\tOS.GrabModeAsync,\r", "+\t\tOS.None,\r", "+\t\tOS.None,\r", "+\t\tOS.CurrentTime);\r", "+\tint kbdGrabResult = OS.XGrabKeyboard (\r", "+\t\txDisplay,\r", "+\t\txWindow,\r", "+\t\t0,\r", "+\t\tOS.GrabModeAsync,\r", "+\t\tOS.GrabModeAsync,\r", "+\t\tOS.CurrentTime);\r", "+\t\t\t\t\r", "-\t\t\t\t\tif (isDisposed ()) return false;\r", "+\t\t\t\t\tif (isDisposed ()) {\r", "+\t\t\t\t\t\tif (ptrGrabResult == OS.GrabSuccess) OS.XUngrabPointer (xDisplay, OS.CurrentTime);\r", "+\t\t\t\t\t\tif (kbdGrabResult == OS.GrabSuccess) OS.XUngrabKeyboard (xDisplay, OS.CurrentTime);\r", "+\t\t\t\t\t\treturn false;\r", "+\t\t\t\t\t}\r", "-\t\t\t\t\t\tif (isDisposed ()) return false;\r", "+\t\t\t\t\t\tif (isDisposed ()) {\r", "+\t\t\t\t\t\t\tif (ptrGrabResult == OS.GrabSuccess) OS.XUngrabPointer (xDisplay, OS.CurrentTime);\r", "+\t\t\t\t\t\t\tif (kbdGrabResult == OS.GrabSuccess) OS.XUngrabKeyboard (xDisplay, OS.CurrentTime);\r", "+\t\t\t\t\t\t\treturn false;\r", "+\t\t\t\t\t\t}\r", "+\tif (ptrGrabResult == OS.GrabSuccess) OS.XUngrabPointer (xDisplay, OS.CurrentTime);\r", "+\tif (kbdGrabResult == OS.GrabSuccess) OS.XUngrabKeyboard (xDisplay, OS.CurrentTime);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1794502d87ef9ea8c87d825b74938177", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "abfdcfb2a80c73d1ca40740cee6b7363f053a0e4", "commitAfterChange": "0504548696e73ed8e85a9f8d88ac00a2de9be404", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void copyArea(Image image, int x, int y)", "signatureAfterChange": " public void copyArea(Image image, int x, int y)", "diff": ["-\t//TODO fix for USE_CAIRO", "+\tif (OS.USE_CAIRO) {", "+\t\tint /*long*/ cairo = Cairo.cairo_create(image.surface);", "+\t\tif (data.image != null) {", "+\t\t\tCairo.cairo_set_source_surface(cairo, data.image.surface, x, y);", "+\t\t} else if (OS.GTK_VERSION >= OS.VERSION(2, 24, 0)) {", "+\t\t\tOS.gdk_cairo_set_source_window(cairo, data.drawable, x, y);", "+\t\t} else {", "+\t\t\tint[] w = new int[1], h = new int[1];", "+\t\t\tOS.gdk_drawable_get_size(data.drawable, w, h);", "+\t\t\tint width = w[0], height = h[0];", "+\t\t\tint /*long*/ xDisplay = OS.GDK_DISPLAY();", "+\t\t\tint /*long*/ xDrawable = OS.gdk_x11_drawable_get_xid(data.drawable);", "+\t\t\tint /*long*/ xVisual = OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system());", "+\t\t\tint /*long*/ srcSurface = Cairo.cairo_xlib_surface_create(xDisplay, xDrawable, xVisual, width, height);", "+\t\t\tCairo.cairo_set_source_surface(cairo, srcSurface, x, y);", "+\t\t}", "+\t\tCairo.cairo_paint(cairo);", "+\t\tCairo.cairo_destroy(cairo);", "+        return;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8dc984f6308dad77d2b9550f82c17c20", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "41efa709fc7b42b5d6c32ef02ee91aff46f38f19", "commitAfterChange": "610006779f31a591399b2248feb3ec3f70558558", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "\r \r int processMouse (int info)", "signatureAfterChange": "\r \r int processMouse (int info)", "diff": ["-\r", "-\t/* Set focus for a canvas with no children */\r", "-\tif ((state & CANVAS) != 0 && (style & SWT.NO_FOCUS) == 0) {\r", "-\t\tif (OS.PtWidgetChildFront (handle) == 0) {\r", "-\t\t\tif (info == 0) return OS.Pt_END;\r", "-\t\t\tPtCallbackInfo_t cbinfo = new PtCallbackInfo_t ();\r", "-\t\t\tOS.memmove (cbinfo, info, PtCallbackInfo_t.sizeof);\r", "-\t\t\tif (cbinfo.event == 0) return OS.Pt_END;\r", "-\t\t\tPhEvent_t ev = new PhEvent_t ();\r", "-\t\t\tOS.memmove (ev, cbinfo.event, PhEvent_t.sizeof);\r", "-\t\t\tswitch (ev.type) {\r", "-\t\t\t\tcase OS.Ph_EV_BUT_PRESS: {\r", "-\t\t\t\t\tint data = OS.PhGetData (cbinfo.event);\r", "-\t\t\t\t\tif (data == 0) return OS.Pt_END;\r", "-\t\t\t\t\tPhPointerEvent_t pe = new PhPointerEvent_t ();\r", "-\t\t\t\t\tOS.memmove (pe, data, PhPointerEvent_t.sizeof);\r", "-\t\t\t\t\tif (pe.buttons == OS.Ph_BUTTON_SELECT) {\r", "+\tint result = super.processMouse (info);\r", "+\tif ((state & CANVAS) != 0) {\r", "+\t\tif (info == 0) return OS.Pt_END;\r", "+\t\tPtCallbackInfo_t cbinfo = new PtCallbackInfo_t ();\r", "+\t\tOS.memmove (cbinfo, info, PtCallbackInfo_t.sizeof);\r", "+\t\tif (cbinfo.event == 0) return OS.Pt_END;\r", "+\t\tPhEvent_t ev = new PhEvent_t ();\r", "+\t\tOS.memmove (ev, cbinfo.event, PhEvent_t.sizeof);\r", "+\t\tif (ev.type == OS.Ph_EV_BUT_PRESS) {\r", "+\t\t\tint data = OS.PhGetData (cbinfo.event);\r", "+\t\t\tif (data == 0) return OS.Pt_END;\r", "+\t\t\tPhPointerEvent_t pe = new PhPointerEvent_t ();\r", "+\t\t\tOS.memmove (pe, data, PhPointerEvent_t.sizeof);\r", "+\t\r", "+\t\t\t/* Grab pointer */\r", "+\t\t\tPhRect_t rect = new PhRect_t ();\r", "+\t\t\tPhPoint_t pos = new PhPoint_t();\r", "+\t\t\tpos.x = pe.pos_x;\r", "+\t\t\tpos.y = pe.pos_y;\r", "+\t\t\trect.ul_x = rect.lr_x = (short) (pos.x + ev.translation_x);\r", "+\t\t\trect.ul_y = rect.lr_y = (short) (pos.y + ev.translation_y);\r", "+\t\t\tint rid = OS.PtWidgetRid (handle);\r", "+\t\t\tint input_group = OS.PhInputGroup (0);\r", "+\t\t\tint flags = OS.Ph_DRAG_KEY_MOTION | OS.Ph_DRAG_TRACK | OS.Ph_TRACK_DRAG;\r", "+\t\t\tOS.PhInitDrag (rid, flags, rect, null, input_group, null, null, null, pos, null);\r", "+\t\r", "+\t\t\t/* Set focus for the a CANVAS with no children */\r", "+\t\t\tif ((style & SWT.NO_FOCUS) == 0) {\r", "+\t\t\t\tif (pe.buttons == OS.Ph_BUTTON_SELECT) {\r", "+\t\t\t\t\tif (OS.PtWidgetChildFront (handle) == 0) {\r", "-\treturn super.processMouse (info);\r", "+\treturn result;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "285353d961c73f76634cf89b9f5b2983", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "db35a0fea379040e77b4418433132e2917cf7f22", "commitAfterChange": "3cace3c27d8d6053d1deaead90a985278fba8102", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " StyleItem[] merge (int items, int itemCount)", "signatureAfterChange": " StyleItem[] merge (int items, int itemCount)", "diff": ["+\tboolean merge = itemCount > TOO_MANY_RUNS;", "+\tSCRIPT_PROPERTIES sp = new SCRIPT_PROPERTIES();", "+\t\t\tif (nextItemIndex < itemCount && merge) {", "+\t\t\t\tif (!item.lineBreak) {", "+\t\t\t\t\tOS.MoveMemory(sp, device.scripts[item.analysis.eScript], SCRIPT_PROPERTIES.sizeof);", "+\t\t\t\t\tif (!sp.fComplex || item.tab) {", "+\t\t\t\t\t\tfor (int i = 0; i < MERGE_MAX; i++) {", "+\t\t\t\t\t\t\tif (nextItemIndex == itemCount) break;", "+\t\t\t\t\t\t\tchar c = segmentsText.charAt(itemLimit);", "+\t\t\t\t\t\t\tif (c == '\\n' || c == '\\r') break;", "+\t\t\t\t\t\t\tif (c == '\\t' != item.tab) break;", "+\t\t\t\t\t\t\tOS.MoveMemory(sp, device.scripts[scriptItem.a.eScript], SCRIPT_PROPERTIES.sizeof);", "+\t\t\t\t\t\t\tif (!item.tab && sp.fComplex) break;", "+\t\t\t\t\t\t\tnextItemIndex++;", "+\t\t\t\t\t\t\tOS.MoveMemory(scriptItem, items + nextItemIndex * SCRIPT_ITEM.sizeof, SCRIPT_ITEM.sizeof);", "+\t\t\t\t\t\t\titemLimit = scriptItem.iCharPos;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "60bdba95241693e41e4dfcb15906066d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "da73e4e9d77d3d189a51ac8699bc35dc6a7e1a25", "commitAfterChange": "da27f2fb43178376570f08fa3646e1091c342061", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void drawBackground (GC gc, int x, int y, int width, int height)", "signatureAfterChange": " public void drawBackground (GC gc, int x, int y, int width, int height)", "diff": ["-\t//int pixel = background == -1 ? gc.getBackground ().handle : -1;", "-\t//TODO WHAT COLOR TO USE ?", "-\t", "-\tgc.fillRectangle (x, y, width, height);", "-//\tint drawingContext = gc.handle;", "-//\tint color = getBackgroundColor ();", "-//\tint brush = OS.gcnew_SolidColorBrush (color);", "-//\tint rect = OS.gcnew_Rect (x, y, width, height);", "-//\tOS.DrawingContext_DrawRectangle (drawingContext, brush, 0, rect);", "-//\tOS.GCHandle_Free (rect);", "-//\tOS.GCHandle_Free (brush);", "+\tControl control = findBackgroundControl ();", "+\tif (control != null) {", "+\t\tif (width < 0) {", "+\t\t\tx = x + width;", "+\t\t\twidth = -width;", "+\t\t}", "+\t\tif (height < 0) {", "+\t\t\ty = y + height;", "+\t\t\theight = -height;", "+\t\t}", "+\t\tPoint pt = display.map (this, control, 0, 0);", "+\t\tint transform = OS.gcnew_TranslateTransform (-pt.x, -pt.y);", "+\t\tOS.DrawingContext_PushTransform (gc.handle, transform);", "+\t\tx += pt.x;", "+\t\ty += pt.y;", "+\t\tint rect = OS.gcnew_Rect (x, y, width, height);", "+\t\tint backgroundHandle = control.backgroundHandle ();", "+\t\tint property = backgroundProperty ();", "+\t\tint brush = OS.DependencyObject_GetValue (backgroundHandle, property);", "+\t\tOS.GCHandle_Free (property);", "+\t\tOS.DrawingContext_DrawRectangle (gc.handle, brush, 0, rect);", "+\t\tOS.DrawingContext_Pop (gc.handle);", "+\t\tOS.GCHandle_Free (transform);", "+\t\tOS.GCHandle_Free (rect);", "+\t\tOS.GCHandle_Free (brush);", "+\t} else {", "+\t\tgc.fillRectangle (x, y, width, height);", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e917585fd0e648ad2b56e38b92c4fa89", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "26aa979781f0037710304353201abd8b6f8f299c", "commitAfterChange": "f19b0105ae672d2b363d1f662e3dcd851e30b426", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r int copyPhImage(int image)", "signatureAfterChange": "\r \r int copyPhImage(int image)", "diff": ["-\tint imageHandle = OS.PiDuplicateImage (image, 0);\r", "-\t/* Bug in Photon - The image returned by PiDuplicateImage\r", "-\thas the same mask_bm as the original image.\r", "+\tint newImage = OS.PiDuplicateImage (image, 0);\r", "+\r", "+\t/*\r", "+\t* Bug in Photon.  The image returned by PiDuplicateImage might\r", "+\t* have the same mask_bm/alpha as the original image.  The fix\r", "+\t* is to detect this case and copy mask_bm/alpha if necessary.\r", "-\tOS.memmove (phImage, imageHandle, PhImage_t.sizeof);\r", "-\tif (phImage.mask_bm != 0) {\r", "-\t\tint length = phImage.mask_bpl * phImage.size_h;\r", "-\t\tint ptr = OS.malloc (length);\r", "-\t\tOS.memmove(ptr, phImage.mask_bm, length);\r", "-\t\tphImage.mask_bm = ptr;\r", "-\t\tOS.memmove (imageHandle, phImage, PhImage_t.sizeof);\r", "+\tOS.memmove (phImage, image, PhImage_t.sizeof);\r", "+\tPhImage_t newPhImage = new PhImage_t();\r", "+\tOS.memmove(newPhImage, newImage, PhImage_t.sizeof);\r", "+\tif (newPhImage.mask_bm != 0 && phImage.mask_bm == newPhImage.mask_bm) {\r", "+\t\tint length = newPhImage.mask_bpl * newPhImage.size_h;\r", "+\t\tint ptr = OS.malloc(length);\r", "+\t\tOS.memmove(ptr, newPhImage.mask_bm, length);\r", "+\t\tnewPhImage.mask_bm = ptr;\r", "-\treturn imageHandle;\r", "+\tif (newPhImage.alpha != 0 && phImage.alpha == newPhImage.alpha) {\r", "+\t\tPgAlpha_t alpha = new PgAlpha_t();\r", "+\t\tOS.memmove(alpha, phImage.alpha, PgAlpha_t.sizeof);\r", "+\t\tif (alpha.src_alpha_map_map != 0) {\r", "+\t\t\tint length = alpha.src_alpha_map_bpl * alpha.src_alpha_map_dim_h;\r", "+\t\t\tint ptr = OS.malloc(length);\r", "+\t\t\tOS.memmove(ptr, alpha.src_alpha_map_map, length);\r", "+\t\t\talpha.src_alpha_map_map = ptr;\r", "+\t\t}\r", "+\t\tint ptr = OS.malloc(PgAlpha_t.sizeof);\r", "+\t\tOS.memmove(ptr, alpha, PgAlpha_t.sizeof);\r", "+\t\tnewPhImage.alpha = ptr;\r", "+\t}\r", "+\tOS.memmove(newImage, newPhImage, PhImage_t.sizeof);\r", "+\treturn newImage;\r"]}], "num": 39261}
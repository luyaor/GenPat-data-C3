{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9cc9ed5c392288d092889edcb3996cab", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3354b87172aca0213f6249cd90f47bd9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "2d4721e8844701eefc82daa8be5939610844433c", "commitAfterChange": "09a3785768d503bf2c57574a8260c2d0c49427ff", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " void computeRuns (GC gc)", "signatureAfterChange": " void computeRuns (GC gc)", "diff": ["+\tint[] ppSp = new int[1];", "+\tint[] piNumScripts = new int[1];", "+\tOS.ScriptGetProperties(ppSp, piNumScripts);", "+\tint[] scripts = new int[piNumScripts[0]];", "+\tOS.MoveMemory(scripts, ppSp[0], scripts.length * 4);", "+\tif (device.logFontsCache == null) \tdevice.logFontsCache = new LOGFONT[piNumScripts[0]];", "+\tSCRIPT_PROPERTIES properties = new SCRIPT_PROPERTIES();", "-\t\t} else {", "-\t\t\tif (wrapWidth != -1 && lineWidth + run.width > wrapWidth) {", "-\t\t\t\tint start = 0;", "-\t\t\t\tint[] piDx = new int[run.length];", "-\t\t\t\tOS.ScriptGetLogicalWidths(run.analysis, run.length, run.glyphCount, run.advances, run.clusters, run.visAttrs, piDx);", "-\t\t\t\tint width = 0, maxWidth = wrapWidth - lineWidth;", "-\t\t\t\twhile (width + piDx[start] < maxWidth) {", "-\t\t\t\t\twidth += piDx[start++];", "+\t\t} ", "+\t\tif (wrapWidth != -1 && lineWidth + run.width > wrapWidth) {", "+\t\t\tint start = 0;", "+\t\t\tint[] piDx = new int[run.length];", "+\t\t\tOS.ScriptGetLogicalWidths(run.analysis, run.length, run.glyphCount, run.advances, run.clusters, run.visAttrs, piDx);", "+\t\t\tint width = 0, maxWidth = wrapWidth - lineWidth;", "+\t\t\twhile (width + piDx[start] < maxWidth) {", "+\t\t\t\twidth += piDx[start++];", "+\t\t\t}", "+\t\t\tint firstStart = start;", "+\t\t\tint firstIndice = i;", "+\t\t\twhile (i >= lineStart) {", "+\t\t\t\tbreakRun(run);", "+\t\t\t\twhile (start >= 0) {", "+\t\t\t\t\tOS.MoveMemory(logAttr, run.psla + (start * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof); ", "+\t\t\t\t\tif (logAttr.fSoftBreak || logAttr.fWhiteSpace) break;", "+\t\t\t\t\tstart--;", "-\t\t\t\tint firstStart = start;", "-\t\t\t\tint firstIndice = i;", "-\t\t\t\twhile (i >= lineStart) {", "-\t\t\t\t\tbreakRun(run);", "-\t\t\t\t\twhile (start >= 0) {", "-\t\t\t\t\t\tOS.MoveMemory(logAttr, run.psla + (start * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof); ", "-\t\t\t\t\t\tif (logAttr.fSoftBreak || logAttr.fWhiteSpace) break;", "-\t\t\t\t\t\tstart--;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (start >= 0 || i == lineStart) break;", "-\t\t\t\t\trun = allRuns[--i];", "-\t\t\t\t\tstart = run.length - 1;", "-\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t/*", "+\t\t\t\t*  Bug in Windows. For some reason Uniscribe sets the fSoftBreak flag for the first letter", "+\t\t\t\t*  after a letter with an accent. This cause a break line to be set in the middle of a word.", "+\t\t\t\t*  The fix is to detect the case and ignore fSoftBreak forcing the algorithm keep searching.", "+\t\t\t\t*/", "-\t\t\t\t\trun = allRuns[--i];", "-\t\t\t\t}", "-\t\t\t\tif (start <= 0 && i == lineStart) {", "-\t\t\t\t\ti = firstIndice;", "-\t\t\t\t\trun = allRuns[i];", "-\t\t\t\t\tstart = Math.max(1, firstStart);", "-\t\t\t\t\tbreakRun(run);", "-\t\t\t\t\twhile (start < run.length) {", "-\t\t\t\t\t\tOS.MoveMemory(logAttr, run.psla + (start * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof); ", "-\t\t\t\t\t\tif (!logAttr.fWhiteSpace) break;", "-\t\t\t\t\t\tstart++;", "+\t\t\t\t\tif (logAttr.fSoftBreak && !logAttr.fWhiteSpace) {", "+\t\t\t\t\t\tOS.MoveMemory(properties, scripts[run.analysis.eScript], SCRIPT_PROPERTIES.sizeof);", "+\t\t\t\t\t\tint langID = properties.langid;", "+\t\t\t\t\t\tStyleItem pRun = allRuns[i - 1];", "+\t\t\t\t\t\tOS.MoveMemory(properties, scripts[pRun.analysis.eScript], SCRIPT_PROPERTIES.sizeof);", "+\t\t\t\t\t\tif (properties.langid == langID) {", "+\t\t\t\t\t\t\tbreakRun(pRun);", "+\t\t\t\t\t\t\tOS.MoveMemory(logAttr, pRun.psla + ((pRun.length - 1) * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof); ", "+\t\t\t\t\t\t\tif (!logAttr.fWhiteSpace) start = -1;", "+\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (0 < start && start < run.length) {", "-\t\t\t\t\tStyleItem newRun = new StyleItem();", "-\t\t\t\t\tnewRun.start = run.start + start;", "-\t\t\t\t\tnewRun.length = run.length - start;", "-\t\t\t\t\tnewRun.style = run.style;", "-\t\t\t\t\tnewRun.analysis = run.analysis;", "-\t\t\t\t\trun.free();", "-\t\t\t\t\trun.length = start;", "-\t\t\t\t\tOS.SelectObject(srcHdc, getItemFont(run));", "-\t\t\t\t\tshape (srcHdc, run);", "-\t\t\t\t\tshape (srcHdc, newRun);", "-\t\t\t\t\tStyleItem[] newAllRuns = new StyleItem[allRuns.length + 1];", "-\t\t\t\t\tSystem.arraycopy(allRuns, 0, newAllRuns, 0, i + 1);", "-\t\t\t\t\tSystem.arraycopy(allRuns, i + 1, newAllRuns, i + 2, allRuns.length - i - 1);", "-\t\t\t\t\tallRuns = newAllRuns;", "-\t\t\t\t\tallRuns[i + 1] = newRun;", "-\t\t\t\t}", "-\t\t\t\tif (i != allRuns.length - 2) {", "-\t\t\t\t\trun.softBreak = run.lineBreak = true;", "-\t\t\t\t}", "+\t\t\t\t}\t\t", "+\t\t\t\tif (start >= 0 || i == lineStart) break;", "+\t\t\t\trun = allRuns[--i];", "+\t\t\t\tstart = run.length - 1;", "+\t\t\t}", "+\t\t\tif (start == 0 && i != lineStart) {", "+\t\t\t\trun = allRuns[--i];", "+\t\t\t} else \tif (start <= 0 && i == lineStart) {", "+\t\t\t\ti = firstIndice;", "+\t\t\t\trun = allRuns[i];", "+\t\t\t\tstart = Math.max(1, firstStart);", "+\t\t\t}", "+\t\t\tbreakRun(run);", "+\t\t\twhile (start < run.length) {", "+\t\t\t\tOS.MoveMemory(logAttr, run.psla + (start * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof); ", "+\t\t\t\tif (!logAttr.fWhiteSpace) break;", "+\t\t\t\tstart++;", "+\t\t\t}", "+\t\t\tif (0 < start && start < run.length) {", "+\t\t\t\tStyleItem newRun = new StyleItem();", "+\t\t\t\tnewRun.start = run.start + start;", "+\t\t\t\tnewRun.length = run.length - start;", "+\t\t\t\tnewRun.style = run.style;", "+\t\t\t\tnewRun.analysis = run.analysis;", "+\t\t\t\trun.free();", "+\t\t\t\trun.length = start;", "+\t\t\t\tOS.SelectObject(srcHdc, getItemFont(run));", "+\t\t\t\tshape (srcHdc, run);", "+\t\t\t\tshape (srcHdc, newRun);", "+\t\t\t\tStyleItem[] newAllRuns = new StyleItem[allRuns.length + 1];", "+\t\t\t\tSystem.arraycopy(allRuns, 0, newAllRuns, 0, i + 1);", "+\t\t\t\tSystem.arraycopy(allRuns, i + 1, newAllRuns, i + 2, allRuns.length - i - 1);", "+\t\t\t\tallRuns = newAllRuns;", "+\t\t\t\tallRuns[i + 1] = newRun;", "+\t\t\t}", "+\t\t\tif (i != allRuns.length - 2) {", "+\t\t\t\trun.softBreak = run.lineBreak = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37202480fd07cf2e50668ea3085cf8ac", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "622142e9aecef456e7a7dc1fafab897e752d2241", "commitAfterChange": "be94780df198ed89429c785c4f23c4e7b064c71f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  int processMouseDown (int callData, int arg1, int int2)", "signatureAfterChange": "  int processMouseDown (int callData, int arg1, int int2)", "diff": ["-/*\tOS.gtk_grab_add(handle);", "-\tdragging = true;", "-\tint button = OS.gdk_event_button_get_button(callData);", "-\tif (button != 1) return 0;", "+\tsuper.processMouseDown (callData,arg1,int2);", "+\tif (OS.gdk_event_button_get_button(callData) != 1) return 0;", "-\tGtkWidget gtkwidget =  new GtkWidget();", "-\tOS.memmove(gtkwidget, handle, GtkWidget.sizeof);", "-\tint border = 0, width = gtkwidget.alloc_width+border*2, height = gtkwidget.alloc_height+border*2;", "-\tlastX = gtkwidget.alloc_x - border;  lastY = gtkwidget.alloc_y - border;", "+\tint width = OS.GTK_WIDGET_WIDTH (handle);", "+\tint height = OS.GTK_WIDGET_HEIGHT (handle);", "+\tlastX = OS.GTK_WIDGET_X(handle);  lastY = OS.GTK_WIDGET_Y(handle);", "+\t/* The event must be sent because its doit flag is used. */", "-\tsendEvent (SWT.MouseDown, event);*/", "+\t/*", "+\t * It is possible (but unlikely) that client code could have disposed", "+\t * the widget in the selection event.  If this happens end the processing", "+\t * of this message by returning.", "+\t */", "+\tsendEvent (SWT.MouseDown, event);", "+\tif (isDisposed ()) return 0;", "+\tif (event.doit) {", "+\t\tdragging = true;", "+\t\tdrawBand (lastX = event.x, lastY = event.y, width, height);", "+\t}"]}], "num": 18096}
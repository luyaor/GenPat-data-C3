{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "365f784d973c473411061fd41d4a8158", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fa55a32645f2d76962c2b2a52620066", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "9dbb1a9b930bc9f40523638de74b34cd089dd27a", "commitAfterChange": "fa01e290bf435dfab0446b77a2b069698d8013d4", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "  public void setVisible (boolean visible)", "signatureAfterChange": "  public void setVisible (boolean visible)", "diff": ["-\t\tmapped = false;", "-\t\tOS.gtk_widget_show (shellHandle);", "-\t\tif (isDisposed ()) return;", "-\t\tdisplay.dispatchEvents = new int [] {", "-\t\t\tOS.GDK_EXPOSE,", "-\t\t\tOS.GDK_FOCUS_CHANGE,", "-\t\t\tOS.GDK_CONFIGURE,", "-\t\t\tOS.GDK_MAP,", "-\t\t\tOS.GDK_UNMAP,", "-\t\t\tOS.GDK_NO_EXPOSE,", "-\t\t};", "-\t\tDisplay display = this.display;", "-\t\tdisplay.putGdkEvents();", "-\t\tboolean iconic = false;", "-\t\tShell shell = parent != null ? parent.getShell() : null;", "-\t\tdo {", "-\t\t\tOS.g_main_context_iteration (0, false);", "-\t\t\tif (isDisposed ()) break;", "-\t\t\ticonic = minimized || (shell != null && shell.minimized);", "-\t\t} while (!mapped && !iconic);", "-\t\tdisplay.dispatchEvents = null;", "-\t\tif (isDisposed ()) return;", "-\t\tif (!iconic) {", "-\t\t\tupdate (true, true);", "+\t\tif (!OS.GTK_IS_PLUG (shellHandle)) {", "+\t\t\tmapped = false;", "+\t\t\tOS.gtk_widget_show (shellHandle);", "-\t\t\tadjustTrim ();", "+\t\t\tdisplay.dispatchEvents = new int [] {", "+\t\t\t\tOS.GDK_EXPOSE,", "+\t\t\t\tOS.GDK_FOCUS_CHANGE,", "+\t\t\t\tOS.GDK_CONFIGURE,", "+\t\t\t\tOS.GDK_MAP,", "+\t\t\t\tOS.GDK_UNMAP,", "+\t\t\t\tOS.GDK_NO_EXPOSE,", "+\t\t\t};", "+\t\t\tDisplay display = this.display;", "+\t\t\tdisplay.putGdkEvents();", "+\t\t\tboolean iconic = false;", "+\t\t\tShell shell = parent != null ? parent.getShell() : null;", "+\t\t\tdo {", "+\t\t\t\tOS.g_main_context_iteration (0, false);", "+\t\t\t\tif (isDisposed ()) break;", "+\t\t\t\ticonic = minimized || (shell != null && shell.minimized);", "+\t\t\t} while (!mapped && !iconic);", "+\t\t\tdisplay.dispatchEvents = null;", "+\t\t\tif (isDisposed ()) return;", "+\t\t\tif (!iconic) {", "+\t\t\t\tupdate (true, true);", "+\t\t\t\tif (isDisposed ()) return;", "+\t\t\t\tadjustTrim ();", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2978c11f88985f22fc18d77a757e2426", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "b0d82207e08710fa83230725747e162f9d7baf93", "commitAfterChange": "3361092634871469737625ac5be2b68be2ef3d94", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["+\tisEmbedded = application.isRunning();", "-\t/*", "-\t * TODO: If an NSApplication is already running we don't want to create another NSApplication.", "-\t * But if we don't we won't get mouse events, since we currently need to subclass NSApplication and intercept sendEvent to", "-\t * deliver mouse events correctly to widgets.   ", "-\t */", "-\tif (!application.isRunning()) {", "+\tif (!isEmbedded) {", "+\t}", "-\t\tString className = \"SWTApplication\";", "-\t\tint /*long*/ cls;", "-\t\tif ((cls = OS.objc_lookUpClass (className)) == 0) {", "-\t\t\tClass clazz = getClass();", "-\t\t\tapplicationCallback2 = new Callback(clazz, \"applicationProc\", 2);", "-\t\t\tint /*long*/ proc2 = applicationCallback2.getAddress();", "-\t\t\tif (proc2 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\t\tapplicationCallback3 = new Callback(clazz, \"applicationProc\", 3);", "-\t\t\tint /*long*/ proc3 = applicationCallback3.getAddress();", "-\t\t\tif (proc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\t\tapplicationCallback6 = new Callback(clazz, \"applicationProc\", 6);", "-\t\t\tint /*long*/ proc6 = applicationCallback6.getAddress();", "-\t\t\tif (proc6 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\t\tcls = OS.objc_allocateClassPair(OS.class_NSApplication, className, 0);", "-\t\t\tOS.class_addMethod(cls, OS.sel_sendEvent_, proc3, \"@:@\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_nextEventMatchingMask_untilDate_inMode_dequeue_, proc6, \"@:i@@B\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_isRunning, proc2, \"@:\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_finishLaunching, proc2, \"@:\");", "-\t\t\tOS.objc_registerClassPair(cls);", "-\t\t}", "-\t\tapplicationClass = OS.object_setClass(application.id, cls);", "+\tString className = \"SWTApplication\";", "+\tint /*long*/ cls;", "+\tif ((cls = OS.objc_lookUpClass (className)) == 0) {", "+\t\tClass clazz = getClass();", "+\t\tapplicationCallback2 = new Callback(clazz, \"applicationProc\", 2);", "+\t\tint /*long*/ proc2 = applicationCallback2.getAddress();", "+\t\tif (proc2 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tapplicationCallback3 = new Callback(clazz, \"applicationProc\", 3);", "+\t\tint /*long*/ proc3 = applicationCallback3.getAddress();", "+\t\tif (proc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tapplicationCallback6 = new Callback(clazz, \"applicationProc\", 6);", "+\t\tint /*long*/ proc6 = applicationCallback6.getAddress();", "+\t\tif (proc6 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tcls = OS.objc_allocateClassPair(OS.object_getClass(application.id), className, 0);", "+\t\tOS.class_addMethod(cls, OS.sel_sendEvent_, proc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_nextEventMatchingMask_untilDate_inMode_dequeue_, proc6, \"@:i@@B\");", "+\t\tOS.class_addMethod(cls, OS.sel_isRunning, proc2, \"@:\");", "+\t\tOS.class_addMethod(cls, OS.sel_finishLaunching, proc2, \"@:\");", "+\t\tOS.objc_registerClassPair(cls);", "+\t}", "+\tapplicationClass = OS.object_setClass(application.id, cls);", "-\t\tclassName = \"SWTApplicationDelegate\";", "-\t\tif (OS.objc_lookUpClass (className) == 0) {", "-\t\t\tint /*long*/ appProc3 = applicationCallback3.getAddress();", "-\t\t\tif (appProc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\t\tcls = OS.objc_allocateClassPair(OS.class_NSObject, className, 0);", "-\t\t\tOS.class_addMethod(cls, OS.sel_applicationWillFinishLaunching_, appProc3, \"@:@\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_terminate_, appProc3, \"@:@\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_quitRequested_, appProc3, \"@:@\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_orderFrontStandardAboutPanel_, appProc3, \"@:@\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_hideOtherApplications_, appProc3, \"@:@\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_hide_, appProc3, \"@:@\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_unhideAllApplications_, appProc3, \"@:@\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_applicationDidBecomeActive_, appProc3, \"@:@\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_applicationDidResignActive_, appProc3, \"@:@\");", "-\t\t\tOS.objc_registerClassPair(cls);", "-\t\t}", "+\tclassName = \"SWTApplicationDelegate\";", "+\tif (OS.objc_lookUpClass (className) == 0) {", "+\t\tint /*long*/ appProc3 = applicationCallback3.getAddress();", "+\t\tif (appProc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tcls = OS.objc_allocateClassPair(OS.class_NSObject, className, 0);", "+\t\tOS.class_addMethod(cls, OS.sel_applicationWillFinishLaunching_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_terminate_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_quitRequested_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_orderFrontStandardAboutPanel_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_hideOtherApplications_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_hide_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_unhideAllApplications_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_applicationDidBecomeActive_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_applicationDidResignActive_, appProc3, \"@:@\");", "+\t\tOS.objc_registerClassPair(cls);", "+\t}", "+\tif (!isEmbedded) {", "-\t} else {", "-\t\tisEmbedded = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9655aa16f9636c6cbaf7a5cdc886337", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/AllTests.java", "commitBeforeChange": "8711b46aa73758862c570f16e5f4b22f73f0553f", "commitAfterChange": "99eec3368ee7b99165620cd8f6704d4aa3c370ba", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public AllTests()", "signatureAfterChange": "  public AllTests()", "diff": ["+\tif (!SWT.getPlatform().equals(\"cocoa\")) {", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ac32616425e686e9c29bec45511ed3e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "9bff9c57dbcd920318537ab873aa751028f71874", "commitAfterChange": "69f429f048911edb8268cd2746ff91939e28beea", "methodNumberBeforeChange": 130, "methodNumberAfterChange": 130, "signatureBeforeChange": "  void initFactories (nsIServiceManager serviceManager, nsIComponentManager componentManager, boolean isXULRunner)", "signatureAfterChange": "  void initFactories (nsIServiceManager serviceManager, nsIComponentManager componentManager, boolean isXULRunner)", "diff": ["-\tFilePickerFactory pickerFactory = new FilePickerFactory ();", "-\tpickerFactory.AddRef ();", "-\taContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_FILEPICKER_CONTRACTID, true);", "-\taClassName = MozillaDelegate.wcsToMbcs (null, \"swtFilePicker\", true); //$NON-NLS-1$", "-\trc = componentRegistrar.RegisterFactory (XPCOM.NS_FILEPICKER_CID, aClassName, aContractID, pickerFactory.getAddress ());", "-\t/* a failure here is fine, it likely indicates that the OS has provided a default implementation */", "-\tpickerFactory.Release ();", "+\tif (!nsISupports.IsXULRunner24) {", "+\t\tFilePickerFactory pickerFactory = new FilePickerFactory ();", "+\t\tpickerFactory.AddRef ();", "+\t\taContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_FILEPICKER_CONTRACTID, true);", "+\t\taClassName = MozillaDelegate.wcsToMbcs (null, \"swtFilePicker\", true); //$NON-NLS-1$", "+\t\trc = componentRegistrar.RegisterFactory (XPCOM.NS_FILEPICKER_CID, aClassName, aContractID, pickerFactory.getAddress ());", "+\t\t/* a failure here is fine, it likely indicates that a default implementation is provided */", "+\t\tpickerFactory.Release ();", "+\t}"]}], "num": 21670}
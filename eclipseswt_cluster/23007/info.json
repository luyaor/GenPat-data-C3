{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca21014ecf6711e15e31d2c4bf9a1e26", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f69609f4d251fb4c2225c2427b1de759", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/TreeColumn.java", "commitBeforeChange": "d42ee8fbf7af101bb2203346e9cc60000f519f21", "commitAfterChange": "9167c1dc4954b55dce10ed59193759bf15f0af32", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  int calculateWidth (int[] ids, int index, GC gc, int width)", "signatureAfterChange": "  int calculateWidth (int[] ids, int index, GC gc, int width)", "diff": ["-\tif (ids == null) return width;", "+\tint max = width;", "+\tif (ids == null) return max;", "-\t\tif (item != null) {", "-\t\t\twidth = Math.max (width, item.calculateWidth (index, gc));", "+\t\tif (item != null && item.cached) {", "+\t\t\tmax = Math.max (max, item.calculateWidth (index, gc));", "-\t\t\t\twidth = Math.max (width, calculateWidth (item.childIds, index, gc, width));", "+\t\t\t\tmax = Math.max (max, calculateWidth (item.childIds, index, gc, max));", "-\treturn width;", "+\treturn max;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "292a9927d35ad08422696e87502f2fe5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "9213cc7759276dfbb4dc068628f524b49e86b501", "commitAfterChange": "68636a56d8d850b4f73d1c0b16c1b71a8e851ba7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  int calculateWidth (int [] ids, GC gc, boolean recurse)", "signatureAfterChange": "  int calculateWidth (int [] ids, GC gc, boolean recurse, int level, int levelIndent)", "diff": ["-int calculateWidth (int [] ids, GC gc, boolean recurse) {", "+int calculateWidth (int [] ids, GC gc, boolean recurse, int level, int levelIndent) {", "-\t\t\twidth = Math.max (width, item.calculateWidth (0, gc));", "+\t\t\tint itemWidth = item.calculateWidth (0, gc);", "+\t\t\titemWidth += level * levelIndent;", "+\t\t\twidth = Math.max (width, itemWidth);", "-\t\t\t\twidth = Math.max (width, calculateWidth (item.childIds, gc, recurse));", "+\t\t\t\twidth = Math.max (width, calculateWidth (item.childIds, gc, recurse, level + 1, levelIndent));"]}], "num": 23007}
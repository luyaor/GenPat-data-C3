{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2e0fb2c6d74a437ca86c42f239accc89", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "359649b01f4e16b10e3f167947b11513", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 69, "signatureBeforeChange": " \t\t \tprivate int handleMouseEvent(int nextHandler, int eRefHandle, int eventKind, int whichWindow)", "signatureAfterChange": "  int mouseProc (int nextHandler, int theEvent, int userData)", "diff": ["+int mouseProc (int nextHandler, int theEvent, int userData) {", "+\tint eventKind = OS.GetEventKind (theEvent);", "+\torg.eclipse.swt.internal.carbon.Point where = new org.eclipse.swt.internal.carbon.Point ();", "+\tOS.GetEventParameter (theEvent, OS.kEventParamMouseLocation, OS.typeQDPoint, null, where.sizeof, null, where);", "+\tint [] theWindow = new int [1];", "+\tint part = OS.FindWindow (where, theWindow);", "+\tswitch (part) {", "+\t\tcase OS.inMenuBar: {", "+\t\t\tif (eventKind == OS.kEventMouseDown) {", "+\t\t\t\tOS.MenuSelect (where);", "+\t\t\t\treturn OS.noErr;", "+\t\t\t}", "+\t\tcase OS.inContent: {", "+\t\t\tRect windowRect = new Rect ();", "+\t\t\tOS.GetWindowBounds (theWindow [0], (short) OS.kWindowContentRgn, windowRect);", "+\t\t\tCGPoint inPoint = new CGPoint ();", "+\t\t\tinPoint.x = where.h - windowRect.left;", "+\t\t\tinPoint.y = where.v - windowRect.top;", "+\t\t\tint [] theRoot = new int [1];", "+\t\t\tOS.GetRootControl (theWindow [0], theRoot);", "+\t\t\tint [] theControl = new int [1];", "+\t\t\tOS.HIViewGetSubviewHit (theRoot [0], inPoint, true, theControl);", "+\t\t\tif (theControl [0] == 0) theControl [0] = theRoot [0];", "+\t\t\tWidget widget = WidgetTable.get (theControl [0]);", "+\t\t\tswitch (eventKind) {", "+\t\t\t\tcase OS.kEventMouseDragged:", "+\t\t\t\tcase OS.kEventMouseMoved: {", "+\t\t\t\t\torg.eclipse.swt.internal.carbon.Point localPoint = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\t\t\tlocalPoint.h = (short) inPoint.x;", "+\t\t\t\t\tlocalPoint.v = (short) inPoint.y;", "+\t\t\t\t\tint [] modifiers = new int [1];", "+\t\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "+\t\t\t\t\tboolean [] cursorWasSet = new boolean [1];", "+\t\t\t\t\tOS.HandleControlSetCursor (theControl [0], localPoint, (short) modifiers [0], cursorWasSet);", "+\t\t\t\t\tif (!cursorWasSet [0]) OS.SetThemeCursor (OS.kThemeArrowCursor);", "+\t\t\t\t\tif (widget != null) {", "+\t\t\t\t\t\tif (widget == hoverControl) {", "+\t\t\t\t\t\t\tint [] outDelay = new int [1];", "+\t\t\t\t\t\t\tOS.HMGetTagDelay (outDelay);", "+\t\t\t\t\t\t\tif (mouseHoverID != 0) {", "+\t\t\t\t\t\t\t\tOS.SetEventLoopTimerNextFireTime (mouseHoverID, outDelay [0] / 1000.0);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t//NOT DONE - get rid of instanceof test", "+\t\t\t\t\t\t\tif (widget instanceof Control) {", "+\t\t\t\t\t\t\t\tif (mouseHoverID != 0) OS.RemoveEventLoopTimer (mouseHoverID);", "+\t\t\t\t\t\t\t\thoverControl = (Control) widget;", "+\t\t\t\t\t\t\t\tint [] id = new int [1], outDelay = new int [1];", "+\t\t\t\t\t\t\t\tOS.HMGetTagDelay (outDelay);", "+\t\t\t\t\t\t\t\tint handle = hoverControl.handle;", "+\t\t\t\t\t\t\t\tint eventLoop = OS.GetCurrentEventLoop ();", "+\t\t\t\t\t\t\t\tOS.InstallEventLoopTimer (eventLoop, outDelay [0] / 1000.0, 0.0, mouseHoverProc, handle, id);", "+\t\t\t\t\t\t\t\tif ((mouseHoverID = id [0]) == 0) hoverControl = null;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (widget != null) {", "+\t\t\t\treturn userData != 0 ? widget.mouseProc (nextHandler, theEvent, userData) : OS.eventNotHandledErr;", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}", "+\t}", "+\tswitch (eventKind) {", "+\t\tcase OS.kEventMouseDragged:", "+\t\tcase OS.kEventMouseMoved:", "+\t\t\tOS.InitCursor ();", "+\t}", "+\tif (mouseHoverID != 0) OS.RemoveEventLoopTimer (mouseHoverID);", "+\tmouseHoverID = 0;", "+\thoverControl = null;", "+\treturn OS.eventNotHandledErr;", "+}", "-\t\t", "-\tprivate int handleMouseEvent(int nextHandler, int eRefHandle, int eventKind, int whichWindow) {", "-\t\t", "-\t\tif (MacUtil.HIVIEW)", "-\t\t\treturn OS.eventNotHandledErr;", "-\t\t", "-\t\tif (eventKind == OS.kEventMouseDown)", "-\t\t\tfTrackedControl= 0;", "-\t\t", "-\t\tMacEvent me= new MacEvent(eRefHandle);", "-\t\tMacPoint where= me.getWhere();", "-\t\t", "-\t\tshort part= 0;", "-\t\tif (whichWindow == 0) {", "-\t\t\tif (fTrackedControl != 0) {", "-\t\t\t\twhichWindow= OS.GetControlOwner(fTrackedControl);", "-\t\t\t} else {", "-\t\t\t\tint[] w= new int[1];", "-\t\t\t\tpart= OS.FindWindow(where.getData(), w);", "-\t\t\t\twhichWindow= w[0];", "-\t\t\t}", "-\t\t} else {", "-\t\t\tpart= OS.FindWindow(where.getData(), new int[1]);", "-\t\t}", "-\t\t", "-\t\tif (whichWindow == 0 && eventKind == OS.kEventMouseDown) {", "-\t\t\tint[] wHandle= new int[1];", "-\t\t\tint rc= OS.GetEventParameter(eRefHandle, OS.kEventParamWindowRef, OS.typeWindowRef, null, null, wHandle);", "-\t\t\tif (rc == OS.kNoErr)", "-\t\t\t\twhichWindow= wHandle[0];", "-\t\t}", "-\t\t", "-\t\tif (whichWindow == 0) {", "-\t\t\t//System.out.println(\"Display.handleMouseEvent:  whichWindow == 0\");", "-\t\t\treturn OS.eventNotHandledErr;", "-\t\t}", "-\t\t\t", "-\t\tMacEvent.trackStateMask(eRefHandle, eventKind);", "-\t\t\t\t", "-\t\tswitch (eventKind) {", "-\t\t", "-\t\tcase OS.kEventMouseWheelMoved:", "-\t\t\tOS.QDGlobalToLocalPoint(OS.GetWindowPort(whichWindow), where.getData());\t\t\t", "-\t\t\tint cntrl= MacUtil.findControlUnderMouse(where, whichWindow, null);", "-\t\t\tWidget ww= findWidget(cntrl);", "-\t\t\tif (ww instanceof Composite) {", "-\t\t\t\tComposite s= (Composite) ww;", "-\t\t\t\tScrollBar sb= s.getVerticalBar();", "-\t\t\t\tif (sb != null)", "-\t\t\t\t\treturn sb.processWheel(eRefHandle);", "-\t\t\t}", "-\t\t\tbreak;", "-\t\t", "-\t\tcase OS.kEventMouseDown:", "-\t\t\t\t\t", "-\t\t\tif (!OS.IsWindowActive(whichWindow)) {", "-\t\t\t\t// let the default handler activate the window", "-\t\t\t\treturn OS.eventNotHandledErr;", "-\t\t\t}", "-\t\t", "-\t\t\thideToolTip ();", "-\t\t", "-\t\t\tif (part == OS.inContent || (MacUtil.HIVIEW && part == OS.inStructure))", "-\t\t\t\tif (false && MacUtil.HIVIEW) {", "-\t\t\t\t\treturn OS.eventNotHandledErr;", "-\t\t\t\t} else {", "-\t\t\t\t\tif (!handleContentClick(me, whichWindow))", "-\t\t\t\t\t\treturn OS.kNoErr;", "-\t\t\t\t}", "-", "-\t\t\tbreak;", "-\t\t", "-\t\tcase OS.kEventMouseDragged:", "-\t\t\tif (fTrackedControl != 0) {", "-\t\t\t\twindowProc(fTrackedControl, SWT.MouseMove, new MacMouseEvent(me));", "-\t\t\t\treturn OS.kNoErr;", "-\t\t\t}", "-\t\t\tbreak;", "-", "-\t\tcase OS.kEventMouseUp:", "-\t\t\tif (fTrackedControl != 0) {", "-\t\t\t\twindowProc(fTrackedControl, SWT.MouseUp, new MacMouseEvent(me));", "-\t\t\t\tfTrackedControl= 0;", "-\t\t\t\treturn OS.kNoErr;", "-\t\t\t}\t", "-\t\t\tbreak;", "-\t\t\t", "-\t\tcase OS.kEventMouseMoved:", "-\t\t", "-\t\t\tfTrackedControl= 0;\t\t\t", "-\t\t\t", "-\t\t\tOS.QDGlobalToLocalPoint(OS.GetWindowPort(whichWindow), where.getData());\t\t\t", "-\t\t\tint whichControl= MacUtil.findControlUnderMouse(where, whichWindow, null);", "-\t\t", "-\t\t\tif (fCurrentControl != whichControl) {", "-\t\t\t", "-\t\t\t\tif (fCurrentControl != 0) {", "-\t\t\t\t\tfLastHoverHandle= 0;", "-\t\t\t\t\twindowProc(fCurrentControl, SWT.MouseExit, new MacMouseEvent(me));", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tfCurrentControl= whichControl;", "-\t\t\t\t", "-\t\t\t\tWidget w= findWidget(fCurrentControl);", "-\t\t\t\tif (w instanceof Control) {", "-\t\t\t\t\tControl c= (Control) w;", "-\t\t\t\t\tif (c.cursor != null)", "-\t\t\t\t\t\tc.cursor.install(this);\t", "-\t\t\t\t\telse", "-\t\t\t\t\t\tsetCursor(0);\t\t", "-\t\t\t\t} else", "-\t\t\t\t\tsetCursor(0);", "-\t\t\t\t", "-\t\t\t\twindowProc(fCurrentControl, SWT.MouseMove, new MacMouseEvent(me));", "-\t\t\t\t", "-\t\t\t\tif (fCurrentControl != 0) {", "-\t\t\t\t\twindowProc(fCurrentControl, SWT.MouseEnter, new MacMouseEvent(me));", "-\t\t\t\t}", "-\t\t\t\treturn OS.kNoErr;\t\t\t", "-\t\t\t} else {", "-\t\t\t\tif (fCurrentControl != 0) {", "-\t\t\t\t\twindowProc(fCurrentControl, SWT.MouseMove, new MacMouseEvent(me));", "-\t\t\t\t\treturn OS.kNoErr;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tbreak;", "-\t\t}", "-\t\t\t\t\t", "-\t\treturn OS.eventNotHandledErr;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "144ace51d21c45070ba09e36067fef1a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 93, "signatureBeforeChange": " \t \tprivate int handleMouseCallback(int nextHandler, int eRefHandle, int whichWindow)", "signatureAfterChange": " \t\t \tprivate int handleMouseEvent(int nextHandler, int eRefHandle, int eventKind, int whichWindow)", "diff": ["-\t", "-\tprivate int handleMouseCallback(int nextHandler, int eRefHandle, int whichWindow) {", "-\t\tint eventClass= OS.GetEventClass(eRefHandle);", "-\t\tif (eventClass != OS.kEventClassMouse) {", "-\t\t\tSystem.out.println(\"handleMouseCallback: unexpected event class: \" + MacUtil.toString(eventClass));", "+\tprivate int handleMouseEvent(int nextHandler, int eRefHandle, int eventKind, int whichWindow) {", "+\t\t", "+\t\tif (MacUtil.HIVIEW)", "-\t\t}", "-\t\t\t\t", "-\t\tint eventKind= OS.GetEventKind(eRefHandle);", "-", "-\t\tif (eventKind == OS.kEventMouseDown) {", "+\t\t", "+\t\tif (eventKind == OS.kEventMouseDown)", "-\t\t}", "-\t\torg.eclipse.swt.internal.carbon.Point where= me.getWhere();", "-\t\tlastGlobalMouseXPos= where.h;", "-\t\tlastGlobalMouseYPos= where.v;", "+\t\tMacPoint where= me.getWhere();", "-\t\t// retrieve window and window part from event", "+\t\tshort part= 0;", "-\t\t\t\t// in tracking mode: get window from control", "-\t\t\t\tOS.FindWindow(where, w);", "+\t\t\t\tpart= OS.FindWindow(where.getData(), w);", "-\t\t\t\tif (whichWindow == 0) {", "-\t\t\t\t\t// try to retrieve window from event", "-\t\t\t\t\tint rc= OS.GetEventParameter(eRefHandle, OS.kEventParamWindowRef, OS.typeWindowRef, null, 4, null, w);", "-\t\t\t\t\tif (rc == OS.noErr)", "-\t\t\t\t\t\twhichWindow= w[0];", "-\t\t\t\t\telse {", "-\t\t\t\t\t\t// the event is a MouseMoved event:", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t} else {", "+\t\t\tpart= OS.FindWindow(where.getData(), new int[1]);", "-\t\t\t\t", "+\t\t", "+\t\tif (whichWindow == 0 && eventKind == OS.kEventMouseDown) {", "+\t\t\tint[] wHandle= new int[1];", "+\t\t\tint rc= OS.GetEventParameter(eRefHandle, OS.kEventParamWindowRef, OS.typeWindowRef, null, null, wHandle);", "+\t\t\tif (rc == OS.kNoErr)", "+\t\t\t\twhichWindow= wHandle[0];", "+\t\t}", "+\t\t", "-\t\t\t// give up", "+\t\t\t//System.out.println(\"Display.handleMouseEvent:  whichWindow == 0\");", "-\t\t// determine control under mouse", "-\t\tshort[] cpart= new short[1];\t\t", "-\t\tint whichControl= MacUtil.findControlUnderMouse(whichWindow, me, cpart);\t\t\t\t", "-\t\tWidget widget= WidgetTable.get(whichControl);", "-\t\t", "-\t\tMacMouseEvent mme= fLastMouseEvent = new MacMouseEvent(me);", "-\t\t", "-\t\tcase OS.kEventMouseDown:\t\t\t", "-\t\t\t", "-\t\t\tShell shell= null;", "-\t\t\tWidget w= findWidget(whichWindow);", "-\t\t\tif (w instanceof Shell)", "-\t\t\t\tshell= (Shell) w;", "-\t\t\t\t", "-\t\t\t// first click in window -> activation", "-\t\t\tif (!OS.IsWindowActive(whichWindow)) {", "-\t\t\t\tif (shell != null && (shell.getStyle() & SWT.ON_TOP) == 0) {", "-\t\t\t\t\t// let the default handler activate the window", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\t// whatever we do, we hide the tooltip", "-\t\t\thideToolTip();", "-", "-\t\t\t// focus handling", "-\t\t\tif (shell != null && (shell.getStyle() & SWT.ON_TOP) == 0)", "-\t\t\t\tsetMacFocusHandle(whichWindow, whichControl);", "-\t\t\t\t\t\t\t\t\t", "-\t\t\tif (whichControl != 0) {", "-\t\t\t", "-\t\t\t\t// deal with the context menu", "-\t\t\t\tif (widget instanceof Control) {", "-\t\t\t\t\tMenu cm= ((Control)widget).getMenu();\t// is a context menu installed?", "-\t\t\t\t\tif (cm != null && me.isShowContextualMenuClick()) {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tfInContextMenu= true;", "-\t\t\t\t\t\t\t// AW todo: not ready for primetime (see InitContextualMenus in createDisplay)", "-\t\t\t\t\t\t\t// OS.ContextualMenuSelect(cm.handle, globalPos.getData(), new short[1], new short[1]);", "-\t\t\t\t\t\t\torg.eclipse.swt.internal.carbon.Point pos= me.getWhere();", "-\t\t\t\t\t\t\tOS.PopUpMenuSelect(cm.handle, pos.v, pos.h, (short)1);", "-\t\t\t\t\t\t} finally {", "-\t\t\t\t\t\t\tfInContextMenu= false;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tif (cpart[0] == 111) { \t// a user pane", "-\t\t\t\t\tif (!(widget instanceof Text)) ", "-\t\t\t\t\t\tfTrackedControl= whichControl;\t// starts mouse tracking", "-\t\t\t\t\twindowProc(whichControl, SWT.MouseDown, mme);", "-\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t} else {", "-\t\t\t\t\twindowProc(whichControl, SWT.MouseDown, mme);", "-\t\t\t\t}", "+\t\tcase OS.kEventMouseWheelMoved:", "+\t\t\tOS.QDGlobalToLocalPoint(OS.GetWindowPort(whichWindow), where.getData());\t\t\t", "+\t\t\tint cntrl= MacUtil.findControlUnderMouse(where, whichWindow, null);", "+\t\t\tWidget ww= findWidget(cntrl);", "+\t\t\tif (ww instanceof Composite) {", "+\t\t\t\tComposite s= (Composite) ww;", "+\t\t\t\tScrollBar sb= s.getVerticalBar();", "+\t\t\t\tif (sb != null)", "+\t\t\t\t\treturn sb.processWheel(eRefHandle);", "+\t\tcase OS.kEventMouseDown:", "+\t\t\t\t\t", "+\t\t\tif (!OS.IsWindowActive(whichWindow)) {", "+\t\t\t\t// let the default handler activate the window", "+\t\t\t\treturn OS.eventNotHandledErr;", "+\t\t\t}", "+\t\t", "+\t\t\thideToolTip ();", "+\t\t", "+\t\t\tif (part == OS.inContent || (MacUtil.HIVIEW && part == OS.inStructure))", "+\t\t\t\tif (false && MacUtil.HIVIEW) {", "+\t\t\t\t\treturn OS.eventNotHandledErr;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (!handleContentClick(me, whichWindow))", "+\t\t\t\t\t\treturn OS.kNoErr;", "+\t\t\t\t}", "+", "+\t\t\tbreak;", "+\t\t", "-\t\t\tif (fTrackedControl != 0) {\t// continue mouse tracking", "-\t\t\t\twindowProc(fTrackedControl, SWT.MouseMove, mme);", "-\t\t\t\treturn OS.noErr;", "+\t\t\tif (fTrackedControl != 0) {", "+\t\t\t\twindowProc(fTrackedControl, SWT.MouseMove, new MacMouseEvent(me));", "+\t\t\t\treturn OS.kNoErr;", "-\t\t\t\twindowProc(fTrackedControl, SWT.MouseUp, mme);", "-\t\t\t\tfTrackedControl= 0;\t\t// continue mouse tracking", "-\t\t\t\treturn OS.noErr;", "+\t\t\t\twindowProc(fTrackedControl, SWT.MouseUp, new MacMouseEvent(me));", "+\t\t\t\tfTrackedControl= 0;", "+\t\t\t\treturn OS.kNoErr;", "-\t\t\t\t\t", "+\t\t\t", "+\t\t\tOS.QDGlobalToLocalPoint(OS.GetWindowPort(whichWindow), where.getData());\t\t\t", "+\t\t\tint whichControl= MacUtil.findControlUnderMouse(where, whichWindow, null);", "+\t\t", "-\t\t\t\t\twindowProc(fCurrentControl, SWT.MouseExit, mme);", "+\t\t\t\t\twindowProc(fCurrentControl, SWT.MouseExit, new MacMouseEvent(me));", "-\t\t\t\tif (widget instanceof Control) {", "-\t\t\t\t\tControl c= (Control) widget;", "+\t\t\t\tWidget w= findWidget(fCurrentControl);", "+\t\t\t\tif (w instanceof Control) {", "+\t\t\t\t\tControl c= (Control) w;", "-\t\t\t\twindowProc(fCurrentControl, SWT.MouseMove, mme);", "+\t\t\t\twindowProc(fCurrentControl, SWT.MouseMove, new MacMouseEvent(me));", "-\t\t\t\t\twindowProc(fCurrentControl, SWT.MouseEnter, mme);", "+\t\t\t\t\twindowProc(fCurrentControl, SWT.MouseEnter, new MacMouseEvent(me));", "-\t\t\t\treturn OS.noErr;", "-\t\t\t\t", "+\t\t\t\treturn OS.kNoErr;\t\t\t", "-\t\t\t\t\twindowProc(fCurrentControl, SWT.MouseMove, mme);", "-\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\twindowProc(fCurrentControl, SWT.MouseMove, new MacMouseEvent(me));", "+\t\t\t\t\treturn OS.kNoErr;", "-\t\t\t}", "-\t\t\tbreak;", "-\t\t\t", "-\t\tcase OS.kEventMouseWheelMoved:", "-\t\t\tif (widget instanceof Composite) {", "-\t\t\t\tScrollBar sb= ((Composite) widget).getVerticalBar();", "-\t\t\t\tif (sb != null)", "-\t\t\t\t\treturn sb.processWheel(eRefHandle);"]}], "num": 1238}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c67944ac4717b0dbb86801746c2268ba", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2756a2c1ef06e2441c0165580990d84a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "3d76437e9be9ca8a536ed794ffc0967ce5bb9920", "commitAfterChange": "0b913a59e399c16554e58b7a500e5a396ebf8265", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 110, "signatureBeforeChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["+", "+\t\t/*", "+\t\t * Add the page's nsIDOMWindow to the collection of windows that will", "+\t\t * have DOM listeners added to them later on in the page loading", "+\t\t * process.  These listeners cannot be added yet because the", "+\t\t * nsIDOMWindow is not ready to take them at this stage.", "+\t\t */", "+\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\tnsIWebProgress progress = new nsIWebProgress (aWebProgress);", "+\t\tint rc = progress.GetDOMWindow (result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\tunhookedDOMWindows.addElement (new LONG (result[0]));", "+\t\t/*", "+\t\t* If this page's nsIDOMWindow handle is still in unhookedDOMWindows then", "+\t\t* add its DOM listeners now.  It's possible for this to happen since", "+\t\t* there is no guarantee that a STATE_TRANSFERRING state change will be", "+\t\t* received for every window in a page, which is when these listeners", "+\t\t* are typically added.", "+\t\t*/", "+\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\tnsIWebProgress progress = new nsIWebProgress (aWebProgress);", "+\t\tint rc = progress.GetDOMWindow (result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\tnsIDOMWindow domWindow = new nsIDOMWindow (result[0]);", "+", "+\t\tLONG ptrObject = new LONG (result[0]);", "+\t\tresult[0] = 0;", "+\t\tint index = unhookedDOMWindows.indexOf (ptrObject);", "+\t\tif (index != -1) {", "+\t\t\trc = domWindow.GetTop (result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\t\tboolean isTop = result[0] == domWindow.getAddress ();", "+\t\t\tnew nsISupports (result[0]).Release ();", "+\t\t\tresult[0] = 0;", "+", "+\t\t\trc = domWindow.QueryInterface (nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+", "+\t\t\tnsIDOMEventTarget target = new nsIDOMEventTarget (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\thookDOMListeners (target, isTop);", "+\t\t\ttarget.Release ();", "+", "+\t\t\t/*", "+\t\t\t* Remove and unreference the nsIDOMWindow from the collection of windows", "+\t\t\t* that are waiting to have DOM listeners hooked on them. ", "+\t\t\t*/", "+\t\t\tunhookedDOMWindows.remove (ptrObject);", "+\t\t\tnew nsISupports (ptrObject.value).Release ();", "+\t\t}", "+\t\tdomWindow.Release ();", "+", "-\t\t\tint rc = req.GetName (name);", "+\t\t\trc = req.GetName (name);", "-\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t", "+", "-\t", "+", "-\t\t\t\t", "+", "-\t", "+", "-\t\t\t\t", "+", "-\t", "+", "-\t\thookDOMListeners ();", "+\t\t/*", "+\t\t* Hook DOM listeners to the page's nsIDOMWindow here because this is", "+\t\t* the earliest opportunity to do so.    ", "+\t\t*/", "+\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\tnsIWebProgress progress = new nsIWebProgress (aWebProgress);", "+\t\tint rc = progress.GetDOMWindow (result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\tnsIDOMWindow domWindow = new nsIDOMWindow (result[0]);", "+", "+\t\tLONG ptrObject = new LONG (result[0]);", "+\t\tresult[0] = 0;", "+\t\tint index = unhookedDOMWindows.indexOf (ptrObject);", "+\t\tif (index != -1) {", "+\t\t\trc = domWindow.GetTop (result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\t\tboolean isTop = result[0] == domWindow.getAddress ();", "+\t\t\tnew nsISupports (result[0]).Release ();", "+\t\t\tresult[0] = 0;", "+", "+\t\t\trc = domWindow.QueryInterface (nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+", "+\t\t\tnsIDOMEventTarget target = new nsIDOMEventTarget (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\thookDOMListeners (target, isTop);", "+\t\t\ttarget.Release ();", "+", "+\t\t\t/*", "+\t\t\t* Remove and unreference the nsIDOMWindow from the collection of windows", "+\t\t\t* that are waiting to have DOM listeners hooked on them. ", "+\t\t\t*/", "+\t\t\tunhookedDOMWindows.remove (ptrObject);", "+\t\t\tnew nsISupports (ptrObject.value).Release ();", "+\t\t}", "+\t\tdomWindow.Release ();", "-}\t", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3b848587f7eb722de70ba07329cb585", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "207a4b25fd56c9312ed63c7b379bc292f193f84c", "commitAfterChange": "18ce373e262126236e66fff74f7d2ddc7fffb312", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 109, "signatureBeforeChange": "  void initPreferences (nsIServiceManager serviceManager, nsIComponentManager componentManager)", "signatureAfterChange": "  void initPreferences (nsIServiceManager serviceManager, nsIComponentManager componentManager)", "diff": ["+\t\t", "-\t\tchar[] charBuffer = new char[length + 1];", "+\t\tchar[] charBuffer = new char[length];", "+", "+\t\trc = prefBranch.GetComplexValue (buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result);", "+\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t\tnsIPrefLocalizedString value = new nsIPrefLocalizedString (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\trc = value.ToString (result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NULL_POINTER);", "+\t\t\tlength = XPCOM.strlen_PRUnichar (result[0]);", "+\t\t\tchar[] dest = new char[length];", "+\t\t\tXPCOM.memmove (dest, result[0], length * 2);", "+\t\t\toldProxyHostFTP = new String (dest);", "+\t\t} else {", "+\t\t\t/* value is default */", "+\t\t\toldProxyHostFTP = DEFAULTVALUE_STRING;", "+\t\t}", "+\t\tresult[0] = 0;", "+", "+\t\trc = prefBranch.GetComplexValue (buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result);", "+\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t\tnsIPrefLocalizedString value = new nsIPrefLocalizedString (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\trc = value.ToString (result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NULL_POINTER);", "+\t\t\tlength = XPCOM.strlen_PRUnichar (result[0]);", "+\t\t\tchar[] dest = new char[length];", "+\t\t\tXPCOM.memmove (dest, result[0], length * 2);", "+\t\t\toldProxyHostHTTP = new String (dest);", "+\t\t} else {", "+\t\t\t/* value is default */", "+\t\t\toldProxyHostHTTP = DEFAULTVALUE_STRING;", "+\t\t}", "+\t\tresult[0] = 0;", "+", "+\t\trc = prefBranch.GetComplexValue (buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result);", "+\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t\tnsIPrefLocalizedString value = new nsIPrefLocalizedString (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\trc = value.ToString (result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NULL_POINTER);", "+\t\t\tlength = XPCOM.strlen_PRUnichar (result[0]);", "+\t\t\tchar[] dest = new char[length];", "+\t\t\tXPCOM.memmove (dest, result[0], length * 2);", "+\t\t\toldProxyHostSSL = new String (dest);", "+\t\t} else {", "+\t\t\t/* value is default */", "+\t\t\toldProxyHostSSL = DEFAULTVALUE_STRING;", "+\t\t}", "+\t\tresult[0] = 0;", "+", "+\tint[] intResult = new int[1]; /* C long*/", "+\t\trc = prefBranch.GetIntPref (buffer, intResult);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\toldProxyPortFTP = intResult[0];", "+\t\tintResult[0] = 0;", "+", "+\t\trc = prefBranch.GetIntPref (buffer, intResult);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\toldProxyPortHTTP = intResult[0];", "+\t\tintResult[0] = 0;", "+", "+\t\trc = prefBranch.GetIntPref (buffer, intResult);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\toldProxyPortSSL = intResult[0];", "+\t\tintResult[0] = 0;", "+\t\trc = prefBranch.GetIntPref (buffer, intResult);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\toldProxyType = intResult[0];", "+\t\tintResult[0] = 0;"]}], "num": 56314}
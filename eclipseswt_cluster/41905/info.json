{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "12cd32b6e60a151956c451fac363e923", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa2a44f78548f103c5b6bcab382485b1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "f72bfdff3bc176627d604e0a70e04d5844399d73", "commitAfterChange": "06f7df35a761c3b3ac5b1850e81b81415f7cfef4", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["-\tif (!OS.IsPPC) return super.WM_LBUTTONDOWN (wParam, lParam);", "-\tLRESULT result = null;", "-\tif (!sendMouseEvent (SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam)) {", "-\t\tresult = LRESULT.ZERO;", "-\t}", "-\t/*", "-\t* Note: On WinCE PPC, only attempt to recognize the gesture for", "-\t* a context menu when the control contains a valid menu or there", "-\t* are listeners for the MenuDetect event.", "-\t* ", "-\t* Note: On WinCE PPC, the gesture that brings up a popup menu", "-\t* on the text widget must keep the current text selection.  As a", "-\t* result, the window proc is only called if the menu is not shown.", "-\t*/", "-\tboolean hasMenu = menu != null && !menu.isDisposed ();", "-\tif (hasMenu || hooks (SWT.MenuDetect)) {", "-\t\tint x = (short) (lParam & 0xFFFF);", "-\t\tint y = (short) (lParam >> 16);", "-\t\tSHRGINFO shrg = new SHRGINFO ();", "-\t\tshrg.cbSize = SHRGINFO.sizeof;", "-\t\tshrg.hwndClient = handle;", "-\t\tshrg.ptDown_x = x;", "-\t\tshrg.ptDown_y = y; ", "-\t\tshrg.dwFlags = OS.SHRG_RETURNCMD;", "-\t\tint type = OS.SHRecognizeGesture (shrg);", "-\t\tif (type == OS.GN_CONTEXTMENU) {", "-\t\t\tshowMenu (x, y);", "-\t\t\treturn LRESULT.ONE;", "+\tif (OS.IsPPC) {", "+\t\tLRESULT result = null;", "+\t\tboolean dispatch = sendMouseEvent (SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam);", "+\t\t/*", "+\t\t* Note: On WinCE PPC, only attempt to recognize the gesture for", "+\t\t* a context menu when the control contains a valid menu or there", "+\t\t* are listeners for the MenuDetect event.", "+\t\t* ", "+\t\t* Note: On WinCE PPC, the gesture that brings up a popup menu", "+\t\t* on the text widget must keep the current text selection.  As a", "+\t\t* result, the window proc is only called if the menu is not shown.", "+\t\t*/", "+\t\tboolean hasMenu = menu != null && !menu.isDisposed ();", "+\t\tif (hasMenu || hooks (SWT.MenuDetect)) {", "+\t\t\tint x = (short) (lParam & 0xFFFF);", "+\t\t\tint y = (short) (lParam >> 16);", "+\t\t\tSHRGINFO shrg = new SHRGINFO ();", "+\t\t\tshrg.cbSize = SHRGINFO.sizeof;", "+\t\t\tshrg.hwndClient = handle;", "+\t\t\tshrg.ptDown_x = x;", "+\t\t\tshrg.ptDown_y = y; ", "+\t\t\tshrg.dwFlags = OS.SHRG_RETURNCMD;", "+\t\t\tint type = OS.SHRecognizeGesture (shrg);", "+\t\t\tif (type == OS.GN_CONTEXTMENU) {", "+\t\t\t\tshowMenu (x, y);", "+\t\t\t\treturn LRESULT.ONE;", "+\t\t\t}", "+\t\tif (dispatch) {", "+\t\t\tresult = new LRESULT (callWindowProc (handle, OS.WM_LBUTTONDOWN, wParam, lParam));", "+\t\t} else {", "+\t\t\tresult = LRESULT.ZERO;", "+\t\t}", "+\t\tif (OS.GetCapture () != handle) OS.SetCapture (handle);", "+\t\treturn result;", "-\tif (OS.GetCapture () != handle) OS.SetCapture (handle);", "-\treturn result;", "+\t return super.WM_LBUTTONDOWN (wParam, lParam);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a19674e28408ef0f514cc1c1bd8ee19d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "e27af9edbc37fc3f795c2a59ac30799d616b20cf", "commitAfterChange": "30e8044688ba62159f92439db3c6fa804252d489", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 81, "signatureBeforeChange": "\r void paintSubItem(Event event, TableItem paintItem, TableColumn column, int paintYPosition)", "signatureAfterChange": "\r void paintSubItem(Event event, TableItem paintItem, TableColumn column, int paintYPosition)", "diff": ["+\tPoint paintPosition;\r", "-\t\t\titemDrawStopX - clipX, event.height);\t\t\r", "+\t\t\tMath.max(0, itemDrawStopX - clipX), event.height);\t\t\r", "-\tcolumn.paint(paintItem, event.gc, paintYPosition);\r", "+\tpaintPosition = new Point(columnBounds.x, paintYPosition);\r", "+\tpaintItem.paint(event.gc, paintPosition, column);\r"]}], "num": 41905}
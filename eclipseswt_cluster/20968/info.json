{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8e34628b7fbb7c0b1dcb41d427f66c2c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b81721b011eed9156d509323d1a60087", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "b260c2870ca7bdb7aee30d4ef6a0933014d56802", "commitAfterChange": "9cca76c6044ec305831264a964ee0bcbebfbd744", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public int getOffset(int x, int y, int[] trailing)", "signatureAfterChange": " public int getOffset(int x, int y, int[] trailing)", "diff": ["-\tint lineY = 0, start = 0;", "-\tfor (int i=0; i<breaks.length-1; i++) {", "-\t\tint lineBreak = breaks[i];", "-\t\tint height = lineHeight[i];", "+\tint lineY = 0, start = 0, lineIndex;", "+\tfor (lineIndex=0; lineIndex<breaks.length-1; lineIndex++) {", "+\t\tint lineBreak = breaks[lineIndex];", "+\t\tint height = lineHeight[lineIndex];", "+\tif (x >= lineX[lineIndex] + lineWidth[lineIndex]) x = lineX[lineIndex] + lineWidth[lineIndex] - 1;", "+\tif (x < lineX[lineIndex]) x = lineX[lineIndex];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73095aa0bd8febaed8a57665f1a8b1c0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "0d80efe32817c2ef97e0f512adc1d82ff755eb3a", "commitAfterChange": "a854bd55744bda8f116fd9fe464ec0f994871e53", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "\r void setKeyState (Event event, XKeyEvent xEvent)", "signatureAfterChange": "\r void setKeyState (Event event, XKeyEvent xEvent)", "diff": ["+\t\t\r", "+\t\t\r", "+\t\t/*\r", "+\t\t* Feature in MOTIF. For some reason, XLookupString() fails \r", "+\t\t* to translate both the keysym and the character when the\r", "+\t\t* control key is down.  For example, Ctrl+2 has the correct\r", "+\t\t* keysym value (50) but no character value, while Ctrl+/ has\r", "+\t\t* the keysym value (2F) but an invalid character value\r", "+\t\t* (1F).  It seems that Motif is applying the algorithm to\r", "+\t\t* convert a character to a control character for characters\r", "+\t\t* that are not valid control characters.  The fix is to test\r", "+\t\t* for 7-bit ASCII keysym, ignoring the valid control character\r", "+\t\t* range, and use the keysym value as the character.\r", "+\t\t* \r", "+\t\t* Some other cases include Ctrl+3..Ctr+8, Ctrl+[.\r", "+\t\t*/\r", "+\t\tif ((xEvent.state & OS.ControlMask) != 0) {\r", "+\t\t\tif (0 <= keysym [0] && keysym [0] <= 0x7F) {\r", "+\t\t\t\tif (!(64 <= keysym [0] && keysym [0] <= 95)) {\r", "+\t\t\t\t\tbuffer [0] = (byte) keysym [0];\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t\r", "+\t\t/* Fill in the event keyCode or character */\r"]}], "num": 20968}
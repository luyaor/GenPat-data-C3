{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "265dbd8c1f5c689a078c42df8e795405", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ef57cdc90aac54aa21b0fd94ca1184fd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "7797431085f381781603127c1f820e618e643d20", "commitAfterChange": "81787cd27e32af892df033b20e65ebc1ed6c38e6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \r void destroyItem (CoolItem item)", "signatureAfterChange": "\r \r void destroyItem (CoolItem item)", "diff": ["-\t\r", "-\t/*\r", "-\t* Feature in Windows.  When the last item in a row is removed,\r", "-\t* Windows sometimes moves items to the right side of the cool\r", "-\t* bar.  The fix is to resize the next to last item to be the\r", "-\t* maximum size.\r", "-\t*/\r", "+\t\t\t/*\r", "+\t\t\t * Feature in Windows.  If the last item in a row is given its ideal size, it will be \r", "+\t\t\t * placed at the far right hand edge of the coolbar.  It is preferred that the last item \r", "+\t\t\t * appear next to the second last item.  The fix is to size the last item of each row \r", "+\t\t\t * so that it occupies all the available space to the right in the row.\r", "+\t\t\t */\r", "+\t\t\tresizeToMaximumWidth (lastIndex - 1);\r", "+\t\t} else if (index != 0) {\r", "+\t\t\t/*\r", "+\t\t\t* Feature in Windows.   Consider a coolbar with two rows; row A and row B.\r", "+\t\t\t* The last item of each row is sized so that it occupies all the space to the right.\r", "+\t\t\t* Thus, the last item in row A and the last item in row B will occupy all the space to the right.  \r", "+\t\t\t* When  the  first item in a row is removed all the remaining items on the same \r", "+\t\t\t* row are moved to the previous row.  Thus if the first item in row B is removed, all \r", "+\t\t\t* the remaining items in row B will move to row A.  However, the item that was previously\r", "+\t\t\t* the last item in row A is still occupying all the space to the right.  In order for the items from\r", "+\t\t\t* row B to be visible in row A, the item that was previously the last item in row A must \r", "+\t\t\t* be resized to have its ideal size.\r", "+\t\t\t* \r", "+\t\t\t* Note: this does not apply to the very first item in the very first row which is the \r", "+\t\t\t* item with index 0.\r", "+\t\t\t*/\r", "-\t\t\trbBand.fMask = OS.RBBIM_SIZE;\t\t\t\r", "-\t\t\trbBand.cx = MAX_WIDTH;\r", "-\t\t\tOS.SendMessage (handle, OS.RB_SETBANDINFO, lastIndex - 1, rbBand);\r", "+\t\t\trbBand.fMask = OS.RBBIM_STYLE;\r", "+\t\t\tOS.SendMessage (handle, OS.RB_GETBANDINFO, index, rbBand);\r", "+\t\t\tif ((rbBand.fStyle & OS.RBBS_BREAK) != 0) {\r", "+\t\t\t\tresizeToPreferredWidth (index - 1);\r", "+\t\t\t}\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52b3b12833c5b765aaa3de211584d9b4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "a7cb56d4fbe7f67d1c809e9e30777cd2b8d8ee1d", "commitAfterChange": "380f53e0dc80d5ce2750fb6a05ddce1ca7ad8ae6", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "\r \r void destroyItem (CoolItem item)", "signatureAfterChange": "\r \r void destroyItem (CoolItem item)", "diff": ["-\t\t} else if (index != 0) {\r", "-\t\t\t/*\r", "-\t\t\t* Feature in Windows.   Consider a coolbar with two rows; row A and row B.\r", "-\t\t\t* The last item of each row is sized so that it occupies all the space to the right.\r", "-\t\t\t* Thus, the last item in row A and the last item in row B will occupy all the space to the right.  \r", "-\t\t\t* When  the  first item in a row is removed all the remaining items on the same \r", "-\t\t\t* row are moved to the previous row.  Thus if the first item in row B is removed, all \r", "-\t\t\t* the remaining items in row B will move to row A.  However, the item that was previously\r", "-\t\t\t* the last item in row A is still occupying all the space to the right.  In order for the items from\r", "-\t\t\t* row B to be visible in row A, the item that was previously the last item in row A must \r", "-\t\t\t* be resized to have its ideal size.\r", "-\t\t\t* \r", "-\t\t\t* Note: this does not apply to the very first item in the very first row which is the \r", "-\t\t\t* item with index 0.\r", "-\t\t\t*/\r", "-\t\t\tREBARBANDINFO rbBand = new REBARBANDINFO ();\r", "-\t\t\trbBand.cbSize = REBARBANDINFO.sizeof;\r", "-\t\t\trbBand.fMask = OS.RBBIM_STYLE;\r", "-\t\t\tOS.SendMessage (handle, OS.RB_GETBANDINFO, index, rbBand);\r", "-\t\t\tif ((rbBand.fStyle & OS.RBBS_BREAK) != 0) {\r", "-\t\t\t\tresizeToPreferredWidth (index - 1);\r", "-\t\t\t}\t\t\t\r", "-\t\t}\t\t\t\t\t\t\t\r", "+\t\t}\t\t\t\t\t\t\r", "+\tif (wasWrap) {\r", "+\t\tif (0 <= index && index < getItemCount ()) {\r", "+\t\t\tgetItem (index).setWrap (true);\r", "+\t\t}\r", "+\t}\r", "+\tif (wasVisible) control.setVisible (true);\r", "-\tif (wasWrap) {\r", "-\t\tif (0 <= index && index < getItemCount ()) {\r", "-\t\t\tgetItem (index).setWrap (true);\r", "-\t\t}\r", "-\t}\r", "-\tif (wasVisible) control.setVisible (true);\r"]}], "num": 3550}
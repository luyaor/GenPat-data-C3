{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f1b3208518a1d28c10fa5ed46a764ba", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e5a9dd93290d9d58878d57f2419df82", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "commitAfterChange": "bbeab947327689cb203638e742e58f555e6c1b64", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 15, "signatureBeforeChange": " private void updateArrowBar()", "signatureAfterChange": " void drawBackground(GC gc, int[] shape, boolean selected)", "diff": ["+void drawBackground(GC gc, int[] shape, boolean selected) {", "+\tPoint size = getSize();", "+\tint height = tabHeight + HIGHLIGHT_HEADER; ", "+\tint y = onBottom ? size.y - borderBottom - height : borderTop;", "+\tint x = 0;", "+\tint width = size.x;", "+\tif (borderLeft > 0) {", "+\t\tx += 1; width -= 2;", "+\tRegion clipping = new Region();", "+\tgc.getClipping(clipping);", "+\tRegion region = new Region();", "+\tregion.add(shape);", "+\tgc.setClipping(region);", "+\tColor defaultBackground = selected ? selectionBackground : getBackground();", "+\tImage image = selected ? selectionBgImage : bgImage;", "+\tColor[] colors = selected ? selectionGradientColors : gradientColors;", "+\tboolean vertical = selected ? selectionGradientVertical : gradientVertical;", "+\tint[] percents = selected ? selectionGradientPercents : gradientPercents;", "+\tif (image != null) {", "+\t\t// draw the background image in shape", "+\t\tgc.setBackground(defaultBackground);", "+\t\tgc.fillRectangle(x, y, width, height);", "+\t\tRectangle imageRect = image.getBounds();", "+\t\tgc.drawImage(image, imageRect.x, imageRect.y, imageRect.width, imageRect.height, x, y, width, height);", "+\t} else if (colors != null) {", "+\t\t// draw gradient", "+\t\tif (colors.length == 1) {", "+\t\t\tColor background = colors[0] != null ? colors[0] : defaultBackground;", "+\t\t\tgc.setBackground(background);", "+\t\t\tgc.fillRectangle(x, y, width, height);", "+\t\t\tif (vertical) {", "+\t\t\t\tif (onBottom) {", "+\t\t\t\t\tint pos = 0;", "+\t\t\t\t\tif (percents[percents.length - 1] < 100) {", "+\t\t\t\t\t\tpos = percents[percents.length - 1] * height / 100;", "+\t\t\t\t\t\tgc.setBackground(defaultBackground);", "+\t\t\t\t\t\tgc.fillRectangle(x, y, width, pos);", "+\t\t\t\t\t}", "+\t\t\t\t\tColor lastColor = colors[colors.length-1];", "+\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\tfor (int i = percents.length-1; i >= 0; i--) {", "+\t\t\t\t\t\tgc.setForeground(lastColor);", "+\t\t\t\t\t\tlastColor = colors[i];", "+\t\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\t\tgc.setBackground(lastColor);", "+\t\t\t\t\t\tint gradientHeight = percents[i] * height / 100;", "+\t\t\t\t\t\tgc.fillGradientRectangle(x, y+pos, width, gradientHeight, true);", "+\t\t\t\t\t\tpos += gradientHeight;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tColor lastColor = colors[0];", "+\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\tint pos = 0;", "+\t\t\t\t\tfor (int i = 0; i < percents.length; i++) {", "+\t\t\t\t\t\tgc.setForeground(lastColor);", "+\t\t\t\t\t\tlastColor = colors[i + 1];", "+\t\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\t\tgc.setBackground(lastColor);", "+\t\t\t\t\t\tint gradientHeight = percents[i] * height / 100;", "+\t\t\t\t\t\tgc.fillGradientRectangle(x, y+pos, width, gradientHeight, true);", "+\t\t\t\t\t\tpos += gradientHeight;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (pos < height) {", "+\t\t\t\t\t\tgc.setBackground(defaultBackground);", "+\t\t\t\t\t\tgc.fillRectangle(x, pos, width, height-pos);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else { //horizontal gradient", "+\t\t\t\tColor lastColor = colors[0];", "+\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\tint pos = 0;", "+\t\t\t\tfor (int i = 0; i < percents.length; ++i) {", "+\t\t\t\t\tgc.setForeground(lastColor);", "+\t\t\t\t\tlastColor = colors[i + 1];", "+\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\tgc.setBackground(lastColor);", "+\t\t\t\t\tint gradientWidth = (percents[i] * width / 100) - pos;", "+\t\t\t\t\tgc.fillGradientRectangle(x+pos, y, gradientWidth, height, false);", "+\t\t\t\t\tpos += gradientWidth;", "+\t\t\t\t}", "+\t\t\t\tif (pos < width) {", "+\t\t\t\t\tgc.setBackground(defaultBackground);", "+\t\t\t\t\tgc.fillRectangle(x+pos, y, width-pos, height);", "+\t\t\t\t}", "+\t\t\t}", "+\t} else {", "+\t\t// draw a solid background using default background in shape", "+\t\tgc.setBackground(defaultBackground);", "+\t\tgc.fillRectangle(x, y, width, height);", "+\tgc.setClipping(clipping);", "+\tclipping.dispose();", "+\tregion.dispose();", "+}", "-}", "-private void updateArrowBar() {", "-\t//Temporary code - need a better way to determine toolBar trim", "-\tint toolbarTrim = 4;", "-\tString platform = SWT.getPlatform();", "-\tif (\"photon\".equals(platform)) toolbarTrim = 6; //$NON-NLS-1$", "-\tif (\"gtk\".equals(platform)) toolbarTrim = 8; //$NON-NLS-1$", "-", "-\tint maxHeight = tabHeight - toolbarTrim;", "-\tif (maxHeight < 3) return;", "-\tint imageHeight = Math.max(9, maxHeight);\t", "-\t", "-\tif (arrowLeftImage != null) {", "-\t\tint height = arrowLeftImage.getBounds().height;", "-\t\tif (height == imageHeight) return;", "-\t\tif (imageHeight > maxHeight && height == maxHeight) return;", "-\t}", "-", "-\tif (arrowBar != null) arrowBar.dispose();", "-\tarrowBar = null;", "-\tif (arrowLeftImage != null) arrowLeftImage.dispose();", "-\tif (arrowRightImage != null) arrowRightImage.dispose();", "-\t", "-\tcreateArrowBar();", "-\tToolItem[] items = arrowBar.getItems();", "-\tToolItem left  = items[0];", "-\tToolItem right = items[1];", "-\t", "-\tDisplay display = getDisplay();", "-\tColor foreground = getForeground();", "-\tColor black = display.getSystemColor(SWT.COLOR_BLACK);", "-\tColor background = getBackground();", "-\t", "-\tPaletteData palette = new PaletteData(new RGB[]{foreground.getRGB(), background.getRGB(), black.getRGB()});", "-\tImageData imageData = new ImageData(7, imageHeight, 4, palette);", "-\timageData.transparentPixel = 1;", "-\tarrowLeftImage = new Image(display, imageData);", "-\tGC gc = new GC(arrowLeftImage);", "-\tgc.setBackground(background);", "-\tgc.fillRectangle(0, 0, 7, imageHeight);", "-\tgc.setBackground(black);", "-\t//draw a 9x5 '<' centered vertically in image", "-\tint h = (imageHeight / 2 )* 2;", "-\tint midpoint = h / 2 - 1;", "-\tint[] pointArr = new int[] {6, midpoint - 5,", "-                                         1, midpoint, ", "-\t\t                                 6,  midpoint + 5,};", "-\tgc.fillPolygon(pointArr);", "-\tgc.dispose();", "-\t", "-\tpalette = new PaletteData(new RGB[]{foreground.getRGB(), background.getRGB(), black.getRGB()});", "-\timageData = new ImageData(7, imageHeight, 4, palette);", "-\timageData.transparentPixel = 1;", "-\tarrowRightImage = new Image(display, imageData);", "-\tgc = new GC(arrowRightImage);", "-\tgc.setBackground(background);", "-\tgc.fillRectangle(0, 0, 7, imageHeight);", "-\tgc.setBackground(black);", "-\t//draw a 9x5 '>' centered vertically in image", "-\tpointArr = new int[] {1, midpoint - 5, ", "-                                  6, midpoint,", "-\t\t                          1, midpoint + 5,};", "-\tgc.fillPolygon(pointArr);", "-\tgc.dispose();", "-\t", "-\tif (maxHeight < imageHeight) {", "-\t\ttry {", "-\t\t\t//rescale image", "-\t\t\tImage leftTemp = scaleImage(arrowLeftImage, imageHeight, maxHeight);", "-\t\t\tarrowLeftImage.dispose();", "-\t\t\tarrowLeftImage = leftTemp;", "-\t\t} catch (IllegalArgumentException e) {", "-\t\t} catch (SWTException e) {", "-\t\t}", "-\t\t", "-\t\ttry {", "-\t\t\tImage rightTemp = scaleImage(arrowRightImage, imageHeight, maxHeight);", "-\t\t\tarrowRightImage.dispose();", "-\t\t\tarrowRightImage = rightTemp;", "-\t\t} catch (IllegalArgumentException e) {", "-\t\t} catch (SWTException e) {", "-\t\t}\t", "-\t}", "-\tleft.setImage(arrowLeftImage);", "-\tright.setImage(arrowRightImage);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c2eb5b7a2a67e0585443bc560ab47b6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/cocoa/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "4edc576de20a88abac088ae701d29ce3e54ede4f", "commitAfterChange": "c2ec875b36ecf39df432358c14d183b7d7f45fe0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t/*", "-\t* Note.  Loading the webkit bundle on Jaguar causes a crash.", "-\t* The workaround is to detect any OS prior to 10.30 and fail", "-\t* without crashing.", "-\t*/", "-\tif (OS.VERSION < 0x1030) {", "-\t\tbrowser.dispose();", "-\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t}", "-\tint outControl[] = new int[1];", "-\ttry {", "-\t\tCocoa.HIWebViewCreate(outControl);", "-\t} catch (UnsatisfiedLinkError e) {", "-\t\tbrowser.dispose();", "-\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t}", "-\twebViewHandle = outControl[0];", "-\tif (webViewHandle == 0) {", "-\t\tbrowser.dispose();", "-\t\tSWT.error(SWT.ERROR_NO_HANDLES);\t\t", "-\t}", "-\tDisplay display = browser.getDisplay();", "-\tdisplay.setData(ADD_WIDGET_KEY, new Object[] {new Integer(webViewHandle), browser});", "-\t/*", "-\t* Bug in Safari.  For some reason, every application must contain", "-\t* a visible window that has never had a WebView or mouse move events", "-\t* are not delivered.  This seems to happen after a browser has been", "-\t* either hidden or disposed in any window.  The fix is to create a", "-\t* single transparent overlay window that is disposed when the display", "-\t* is disposed.", "-\t*/", "-\tif (display.getData(BROWSER_WINDOW) == null) {", "-\t\tRect bounds = new Rect ();", "-\t\tOS.SetRect (bounds, (short) 0, (short) 0, (short) 1, (short) 1);", "-\t\tfinal int[] outWindow = new int[1];", "-\t\tOS.CreateNewWindow(OS.kOverlayWindowClass, 0, bounds, outWindow);", "-\t\tOS.ShowWindow(outWindow[0]);", "-\t\tdisplay.disposeExec(new Runnable() {", "-\t\t\tpublic void run() {", "-\t\t\t\tif (outWindow[0] != 0) {", "-\t\t\t\t\tOS.DisposeWindow(outWindow[0]);", "-\t\t\t\t}", "-\t\t\t\toutWindow[0] = 0;", "-\t\t\t}", "-\t\t});", "-\t\tdisplay.setData(BROWSER_WINDOW, outWindow);", "+\tString className = \"SWTWebViewDelegate\";", "+\tif (OS.objc_lookUpClass(className) == 0) {", "+\t\tClass safaryClass = this.getClass();", "+\t\tCallback2 = new Callback(safaryClass, \"browserProc\", 2);", "+\t\tint proc2 = Callback2.getAddress();", "+\t\tif (proc2 == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tCallback3 = new Callback(safaryClass, \"browserProc\", 3);", "+\t\tint proc3 = Callback3.getAddress();", "+\t\tif (proc3 == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tCallback4 = new Callback(safaryClass, \"browserProc\", 4);", "+\t\tint proc4 = Callback4.getAddress();", "+\t\tif (proc4 == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tCallback5 = new Callback(safaryClass, \"browserProc\", 5);", "+\t\tint proc5 = Callback5.getAddress();", "+\t\tif (proc5 == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tCallback6 = new Callback(safaryClass, \"browserProc\", 6);", "+\t\tint proc6 = Callback6.getAddress();", "+\t\tif (proc6 == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tCallback7 = new Callback(safaryClass, \"browserProc\", 7);", "+\t\tint proc7 = Callback7.getAddress();", "+\t\tif (proc7 == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\t", "+\t\tint cls = OS.objc_allocateClassPair(OS.class_WebView, className, 0);", "+\t\tOS.class_addIvar(cls, \"tag\", OS.PTR_SIZEOF, (byte)(Math.log(OS.PTR_SIZEOF) / Math.log(2)), \"i\");", "+\t\tOS.class_addMethod(cls, OS.sel_tag, proc2, \"@:\");", "+\t\tOS.class_addMethod(cls, OS.sel_setTag_1, proc3, \"@:i\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1didFailProvisionalLoadWithError_1forFrame_1, proc5, \"@:@@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1didFinishLoadForFrame_1, proc4, \"@:@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1didReceiveTitle_1forFrame_1, proc5, \"@:@@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1didStartProvisionalLoadForFrame_1, proc4, \"@:@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1didCommitLoadForFrame_1, proc4, \"@:@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1resource_1didFinishLoadingFromDataSource_1, proc5, \"@:@@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1resource_1didFailLoadingWithError_1fromDataSource_1, proc6, \"@:@@@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1identifierForInitialRequest_1fromDataSource_1, proc5, \"@:@@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1resource_1willSendRequest_1redirectResponse_1fromDataSource_1, proc7, \"@:@@@@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_handleNotification_1, proc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1createWebViewWithRequest_1, proc4, \"@:@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webViewShow_1, proc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1setFrame_1, proc4, \"@:@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webViewClose_1, proc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1contextMenuItemsForElement_1defaultMenuItems_1, proc5, \"@:@@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1setStatusBarVisible_1, proc4, \"@:@B\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1setResizable_1, proc4, \"@:@B\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1setToolbarsVisible_1, proc4, \"@:@B\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1setStatusText_1, proc4, \"@:@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webViewFocus_1, proc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webViewUnfocus_1, proc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1runJavaScriptAlertPanelWithMessage_1, proc4, \"@:@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1runJavaScriptConfirmPanelWithMessage_1, proc4, \"@:@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1runOpenPanelForFileButtonWithResultListener_1, proc4, \"@:@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1mouseDidMoveOverElement_1modifierFlags_1, proc5, \"@:@@I\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1decidePolicyForMIMEType_1request_1frame_1decisionListener_1, proc7, \"@:@@@@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1decidePolicyForNavigationAction_1request_1frame_1decisionListener_1, proc7, \"@:@@@@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1decidePolicyForNewWindowAction_1request_1newFrameName_1decisionListener_1, proc7, \"@:@@@@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_webView_1unableToImplementPolicyWithError_1frame_1, proc5, \"@:@@@\");", "+\t\tOS.class_addMethod(cls, OS.sel_download_1decideDestinationWithSuggestedFilename_1, proc4, \"@:@@\");", "+\t\tOS.objc_registerClassPair(cls);", "-\t/*", "-\t* Bug in Safari. The WebView does not draw properly if it is embedded as", "-\t* sub view of the browser handle.  The fix is to add the web view to the", "-\t* window root control and resize it on top of the browser handle.", "-\t* ", "-\t* Note that when reparent the browser is reparented, the web view has to", "-\t* be reparent by hand by hooking kEventControlOwningWindowChanged.", "-\t*/", "-\tint window = OS.GetControlOwner(browser.handle);", "-\tint[] contentView = new int[1];", "-\tOS.HIViewFindByID(OS.HIViewGetRoot(window), OS.kHIViewWindowContentID(), contentView);", "-\tOS.HIViewAddSubview(contentView[0], webViewHandle);", "-\tOS.HIViewChangeFeatures(webViewHandle, OS.kHIViewFeatureIsOpaque, 0);", "-", "-\t/*", "-\t* Bug in Safari. The WebView does not receive mouse and key events when it is added", "-\t* to a visible top window.  It is assumed that Safari hooks its own event listener", "-\t* when the top window emits the kEventWindowShown event. The workaround is to send a", "-\t* fake kEventWindowShown event to the top window after the WebView has been added", "-\t* to the HIView (after the top window is visible) to give Safari a chance to hook", "-\t* events.", "-\t*/", "-\tOS.HIViewSetVisible(webViewHandle, true);\t", "-\tif (browser.getShell().isVisible()) {", "-\t\tint[] showEvent = new int[1];", "-\t\tOS.CreateEvent(0, OS.kEventClassWindow, OS.kEventWindowShown, 0.0, OS.kEventAttributeUserEvent, showEvent);", "-\t\tOS.SetEventParameter(showEvent[0], OS.kEventParamDirectObject, OS.typeWindowRef, 4, new int[] {OS.GetControlOwner(browser.handle)});", "-\t\tOS.SendEventToEventTarget(showEvent[0], OS.GetWindowEventTarget(window));", "-\t\tif (showEvent[0] != 0) OS.ReleaseEvent(showEvent[0]);", "-\t}", "-", "-\tfinal int webView = Cocoa.HIWebViewGetWebView(webViewHandle);", "-\t/*", "-\t* This code is intentionally commented. Setting a group name is the right thing", "-\t* to do in order to avoid multiple open window requests. For some reason, Safari", "-\t* crashes when requested to reopen the same window if that window was previously", "-\t* closed. This may be because that window was not correctly closed. ", "-\t*/\t", "-//\tString groupName = \"MyDocument\"; //$NON-NLS-1$", "-//\tint length = groupName.length();", "-//\tchar[] buffer = new char[length];", "-//\tgroupName.getChars(0, length, buffer, 0);", "-//\tint groupNameString = OS.CFStringCreateWithCharacters(0, buffer, length);", "-//\t// [webView setGroupName:@\"MyDocument\"];", "-//\tWebKit.objc_msgSend(webView, WebKit.S_setGroupName, groupNameString);", "-//\tOS.CFRelease(groupNameString);", "+\tWebView webView = (WebView)new WebView().alloc();", "+\tif (webView == null) SWT.error(SWT.ERROR_NO_HANDLES);", "+\twebView.initWithFrame(browser.view.frame(), null, null);", "+\twebView.setAutoresizingMask(OS.NSViewWidthSizable | OS.NSViewHeightSizable);", "+\tjniRef = OS.NewGlobalRef(this);", "+\tif (jniRef == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tSWTWebViewDelegate delegate = (SWTWebViewDelegate)new SWTWebViewDelegate().alloc().init();", "+\tdelegate.setTag(jniRef);", "+\tthis.delegate = delegate;", "+\tthis.webView = webView;", "+\tbrowser.view.addSubview_(webView);", "-\tfinal int notificationCenter = Cocoa.objc_msgSend(Cocoa.C_NSNotificationCenter, Cocoa.S_defaultCenter);", "+\tNSNotificationCenter notificationCenter = NSNotificationCenter.defaultCenter();", "-\t\t\t\t\tOS.RemoveEventHandler(windowBoundsHandler);", "-\t\t\t\t\twindowBoundsHandler = 0;", "-", "-\t\t\t\t\te.display.setData(ADD_WIDGET_KEY, new Object[] {new Integer(webViewHandle), null});", "-", "-\t\t\t\t\tCocoa.objc_msgSend(webView, Cocoa.S_setFrameLoadDelegate, 0);", "-\t\t\t\t\tCocoa.objc_msgSend(webView, Cocoa.S_setResourceLoadDelegate, 0);", "-\t\t\t\t\tCocoa.objc_msgSend(webView, Cocoa.S_setUIDelegate, 0);", "-\t\t\t\t\tCocoa.objc_msgSend(webView, Cocoa.S_setPolicyDelegate, 0);", "-\t\t\t\t\tCocoa.objc_msgSend(notificationCenter, Cocoa.S_removeObserver, delegate);", "+\t\t\t\t\tSafari.this.webView.setFrameLoadDelegate(null);", "+\t\t\t\t\tSafari.this.webView.setResourceLoadDelegate(null);", "+\t\t\t\t\tSafari.this.webView.setUIDelegate(null);", "+\t\t\t\t\tSafari.this.webView.setPolicyDelegate(null);", "+\t\t\t\t\tNSNotificationCenter.defaultCenter().removeObserver(Safari.this.webView);", "-\t\t\t\t\tCocoa.objc_msgSend(delegate, Cocoa.S_release);", "-\t\t\t\t\tOS.DisposeControl(webViewHandle);", "+\t\t\t\t\tSafari.this.webView.release();", "+\t\t\t\t\tSafari.this.webView = null;", "+\t\t\t\t\tSafari.this.delegate.release();", "+\t\t\t\t\tSafari.this.delegate = null;", "-\t", "-\tif (Callback3 == null) Callback3 = new Callback(this.getClass(), \"eventProc3\", 3); //$NON-NLS-1$", "-\tint callback3Address = Callback3.getAddress();", "-\tif (callback3Address == 0) SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);", "-", "-\tint[] mask = new int[] {", "-\t\tOS.kEventClassKeyboard, OS.kEventRawKeyDown,", "-\t\tOS.kEventClassControl, OS.kEventControlDraw,", "-\t\tOS.kEventClassControl, OS.kEventControlSetCursor,", "-\t\tOS.kEventClassTextInput, OS.kEventTextInputUnicodeForKeyEvent,", "-\t};", "-\tOS.InstallEventHandler(OS.GetControlEventTarget(webViewHandle), callback3Address, mask.length / 2, mask, webViewHandle, null);", "-\tint[] mask1 = new int[] {", "-\t\tOS.kEventClassControl, OS.kEventControlBoundsChanged,", "-\t\tOS.kEventClassControl, OS.kEventControlVisibilityChanged,", "-\t\tOS.kEventClassControl, OS.kEventControlOwningWindowChanged,", "-\t};", "-\tOS.InstallEventHandler(OS.GetControlEventTarget(browser.handle), callback3Address, mask1.length / 2, mask1, browser.handle, null);", "-\tint[] mask2 = new int[] {", "-\t\tOS.kEventClassWindow, OS.kEventWindowBoundsChanged,", "-\t};", "-\tint[] outRef = new int[1];", "-\tOS.InstallEventHandler(OS.GetWindowEventTarget(window), callback3Address, mask2.length / 2, mask2, browser.handle, outRef);", "-\twindowBoundsHandler = outRef[0];", "-", "-\tif (Callback7 == null) Callback7 = new Callback(this.getClass(), \"eventProc7\", 7); //$NON-NLS-1$", "-\tint callback7Address = Callback7.getAddress();", "-\tif (callback7Address == 0) SWT.error(SWT.ERROR_NO_MORE_CALLBACKS);", "-\t", "-\t// delegate = [[WebResourceLoadDelegate alloc] init eventProc];", "-\tdelegate = Cocoa.objc_msgSend(Cocoa.C_WebKitDelegate, Cocoa.S_alloc);", "-\tdelegate = Cocoa.objc_msgSend(delegate, Cocoa.S_initWithProc, callback7Address, webViewHandle);", "-\t// [webView setFrameLoadDelegate:delegate];", "-\tCocoa.objc_msgSend(webView, Cocoa.S_setFrameLoadDelegate, delegate);", "-\t\t", "-\t// [webView setResourceLoadDelegate:delegate];", "-\tCocoa.objc_msgSend(webView, Cocoa.S_setResourceLoadDelegate, delegate);", "-", "-\t// [webView setUIDelegate:delegate];", "-\tCocoa.objc_msgSend(webView, Cocoa.S_setUIDelegate, delegate);", "-\t", "-\t/* register delegate for all notifications sent out from webview */", "-\tCocoa.objc_msgSend(notificationCenter, Cocoa.S_addObserver_selector_name_object, delegate, Cocoa.S_handleNotification, 0, webView);", "-\t", "-\t// [webView setPolicyDelegate:delegate];", "-\tCocoa.objc_msgSend(webView, Cocoa.S_setPolicyDelegate, delegate);", "-", "-\t// [webView setDownloadDelegate:delegate];", "-\tCocoa.objc_msgSend(webView, Cocoa.S_setDownloadDelegate, delegate);", "+\twebView.setFrameLoadDelegate(delegate);", "+\twebView.setResourceLoadDelegate(delegate);", "+\twebView.setUIDelegate(delegate);\t", "+\tnotificationCenter.addObserver(delegate, OS.sel_handleNotification_1, null, webView);", "+\twebView.setPolicyDelegate(delegate);", "+\twebView.setDownloadDelegate(delegate);", "-\t\tint preferences = Cocoa.objc_msgSend(Cocoa.C_WebPreferences, Cocoa.S_standardPreferences);", "-\t\tCocoa.objc_msgSend(preferences, Cocoa.S_setJavaEnabled, 0);", "+\t\tWebPreferences.standardPreferences().setJavaEnabled(false);"]}], "num": 30987}
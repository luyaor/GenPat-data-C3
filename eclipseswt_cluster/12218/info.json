{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f85c28c25434f89a07280dacc8a356da", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46e02bdc27ee1347c50d84ba946ed5b4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "d45fca5fe38816ea0e49d88992f8a36f2c79c3af", "commitAfterChange": "fc949910d259b2f09c2a6d209f57255840ca1162", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  void copyClassMethodsDown(final Map classes)", "signatureAfterChange": "  void copyClassMethodsDown(final Map<String, Object[]> classes)", "diff": ["-void copyClassMethodsDown(final Map classes) {", "-\tArrayList sortedClasses = Collections.list(Collections.enumeration(classes.values()));", "-\tCollections.sort(sortedClasses, new Comparator() {", "+void copyClassMethodsDown(final Map<String, Object[]> classes) {", "+\tArrayList<Object[]> sortedClasses = Collections.list(Collections.enumeration(classes.values()));", "+\tCollections.sort(sortedClasses, new Comparator<Object>() {", "-\t\t\t\tsuperclass = getSuperclassName((Node)((Object[])classes.get(superclass))[0]);", "+\t\t\t\tsuperclass = getSuperclassName((Node)classes.get(superclass)[0]);", "-\tfor (Iterator iterator = sortedClasses.iterator(); iterator.hasNext();) {", "-\t\tObject[] clazz = (Object[]) iterator.next();", "+\tfor (Iterator<Object[]> iterator = sortedClasses.iterator(); iterator.hasNext();) {", "+\t\tObject[] clazz = iterator.next();", "-\t\tArrayList methods = (ArrayList)clazz[1];", "-\t\tObject[] superclass = (Object[])classes.get(getSuperclassName(node));", "+\t\tArrayList<Node> methods = (ArrayList<Node>)clazz[1];", "+\t\tObject[] superclass = classes.get(getSuperclassName(node));", "-\t\t\tfor (Iterator iterator2 = ((ArrayList)superclass[1]).iterator(); iterator2.hasNext();) {", "+\t\t\tfor (Iterator<?> iterator2 = ((ArrayList<?>)superclass[1]).iterator(); iterator2.hasNext();) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "703dd923c96571a3fee69b5846e94534", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "d45fca5fe38816ea0e49d88992f8a36f2c79c3af", "commitAfterChange": "fc949910d259b2f09c2a6d209f57255840ca1162", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  void merge(Document document, Document extraDocument)", "signatureAfterChange": "  void merge(Document document, Document extraDocument)", "diff": ["-\tHashMap extras = new HashMap();", "+\tHashMap<String, Node> extras = new HashMap<String, Node>();", "-\tHashMap lookup = new HashMap();", "+\tHashMap<String, Node> lookup = new HashMap<String, Node>();", "-\tArrayList sortedNodes = Collections.list(Collections.enumeration(extras.values()));", "-\tCollections.sort(sortedNodes, new Comparator() {", "+\tArrayList<Node> sortedNodes = Collections.list(Collections.enumeration(extras.values()));", "+\tCollections.sort(sortedNodes, new Comparator<Object>() {", "-\tfor (Iterator iterator = sortedNodes.iterator(); iterator.hasNext();) {", "-\t\tNode node = (Node) iterator.next();", "+\tfor (Iterator<Node> iterator = sortedNodes.iterator(); iterator.hasNext();) {", "+\t\tNode node = iterator.next();", "-\t\tNode parent = (Node)lookup.get(getKey(node.getParentNode()));", "+\t\tNode parent = lookup.get(getKey(node.getParentNode()));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "75a92a84b38f297cd9ff7a888423609c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/Check64CompilationParticipant.java", "commitBeforeChange": "3418cfa63d3b83d0b2d185baa847e100d68881e8", "commitAfterChange": "d45fca5fe38816ea0e49d88992f8a36f2c79c3af", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  void createBadOverwrittenMethodProblems(IJavaProject project, String root) throws CoreException", "signatureAfterChange": "  void createBadOverwrittenMethodProblems(IJavaProject project, String root) throws CoreException", "diff": ["-\tHashMap cache = new HashMap();", "-\tfor (Iterator iterator = sources.iterator(); iterator.hasNext();) {", "-\t\tString path = (String) iterator.next();", "+\tHashMap<String, TypeDeclaration> cache = new HashMap<String, TypeDeclaration>();", "+\tfor (Iterator<String> iterator = sources.iterator(); iterator.hasNext();) {", "+\t\tString path = iterator.next();", "-\t\tList superclasses = new ArrayList();", "+\t\tList<TypeDeclaration> superclasses = new ArrayList<TypeDeclaration>();", "-\t\t\tfor (Iterator iterator2 = superclasses.iterator(); iterator2.hasNext();) {", "-\t\t\t\tTypeDeclaration supertype = (TypeDeclaration) iterator2.next();", "+\t\t\tfor (Iterator<TypeDeclaration> iterator2 = superclasses.iterator(); iterator2.hasNext();) {", "+\t\t\t\tTypeDeclaration supertype = iterator2.next();", "-\t\t\t\t\t\tList mParams = method.parameters();", "-\t\t\t\t\t\tList sParams = supermethod.parameters();", "+\t\t\t\t\t\tList<SingleVariableDeclaration> mParams = method.parameters();", "+\t\t\t\t\t\tList<SingleVariableDeclaration> sParams = supermethod.parameters();", "-\t\t\t\t\t\t\tSingleVariableDeclaration p1 = (SingleVariableDeclaration) mParams.get(k);", "-\t\t\t\t\t\t\tSingleVariableDeclaration p2 = (SingleVariableDeclaration) sParams.get(k);", "+\t\t\t\t\t\t\tSingleVariableDeclaration p1 = mParams.get(k);", "+\t\t\t\t\t\t\tSingleVariableDeclaration p2 = sParams.get(k);"]}], "num": 12218}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c2a088f284b8f061258db6e9b931a58c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54aa31fca0f25020afb26f669c183453", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "5ff7ac2fddf79437e7380da2c61f177a9d2b7b57", "commitAfterChange": "a11f12229032da8f3583f9824ed7436735b4c74e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void copyArea(Image image, int x, int y)", "signatureAfterChange": " public void copyArea(Image image, int x, int y)", "diff": ["-\t\tcopyArea(image, x, y, offscreen[0]);", "+\t\tcopyArea(image, x, y, offscreen[0], false);", "-\t\tcopyArea(image, x, y, data.image.handle);", "+\t\tcopyArea(image, x, y, data.image.handle, false);", "-//\t\tint imageHandle = image.handle;", "-//\t\tCGRect rect = new CGRect();", "-//\t\trect.x = x;", "-//\t\trect.y = y;", "-//\t\trect.width = OS.CGImageGetWidth(imageHandle);", "-//\t\trect.height = OS.CGImageGetHeight(imageHandle);", "-//\t\tint[] displays = new int[16];", "-//\t\tint[] count = new int[1];", "-//\t\tif (OS.CGGetDisplaysWithRect(rect, displays.length, displays, count) != 0) return;", "-//\t\tfor (int i = 0; i < count[0]; i++) {", "-//\t\t\tint display = displays[i];", "-//\t\t\tif (OS.CGDisplayCapture(display) == 0) {", "-//\t\t\t\tint address = OS.CGDisplayAddressForPosition (display, x, y);", "-//\t\t\t\tSystem.out.println(address);", "-//\t\t\t\tint colorspace = data.device.colorspace;", "-//\t\t\t\tint provider = OS.CGDataProviderCreateWithData(0, data, dataSize, 0);", "-//\t\t\t\tint srcImage = OS.CGImageCreate(width, height, 8, 32, bpr, colorspace, OS.kCGImageAlphaNoneSkipFirst, provider, null, false, 0);", "-//\t\t\t\tOS.CGDataProviderRelease(provider);", "-//\t\t\t\tcopyArea(image, x, y, srcImage);", "-//\t\t\t\tif (srcImage != 0) OS.CGImageRelease(srcImage);", "-//\t\t\t\tOS.CGDisplayRelease(display);", "-//\t\t\t}", "-//\t\t}", "+\t\tint imageHandle = image.handle;", "+\t\tCGRect rect = new CGRect();", "+\t\trect.x = x;", "+\t\trect.y = y;", "+\t\trect.width = OS.CGImageGetWidth(imageHandle);", "+\t\trect.height = OS.CGImageGetHeight(imageHandle);", "+\t\tint[] displays = new int[16];", "+\t\tint[] count = new int[1];", "+\t\tif (OS.CGGetDisplaysWithRect(rect, displays.length, displays, count) != 0) return;", "+\t\tfor (int i = 0; i < count[0]; i++) {", "+\t\t\tint display = displays[i];", "+\t\t\tint address = OS.CGDisplayBaseAddress(display);", "+\t\t\tif (address != 0) {", "+\t\t\t\tint width = OS.CGDisplayPixelsWide(display);", "+\t\t\t\tint height = OS.CGDisplayPixelsHigh(display);", "+\t\t\t\tint bpr = OS.CGDisplayBytesPerRow(display);", "+\t\t\t\tint bpp = OS.CGDisplayBitsPerPixel(display);", "+\t\t\t\tint bps = OS.CGDisplayBitsPerSample(display);", "+\t\t\t\tSystem.out.println(width + \" \" + height + \" \" + bpr + \" \" + bpp + \" \" + bps);", "+\t\t\t\tint provider = OS.CGDataProviderCreateWithData(0, address, bpr * height, 0);", "+\t\t\t\tint srcImage = OS.CGImageCreate(width, height, bps, bpp, bpr, data.device.colorspace, OS.kCGImageAlphaNoneSkipFirst, provider, null, false, 0);", "+\t\t\t\tOS.CGDataProviderRelease(provider);", "+\t\t\t\tcopyArea(image, x, y, srcImage, true);", "+\t\t\t\tif (srcImage != 0) OS.CGImageRelease(srcImage);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8596f7ef7e6d1fe7cbc94bacd1009877", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Pattern.java", "commitBeforeChange": "c05f56c1b0acda6d358c754d485bebfca2e085c4", "commitAfterChange": "2703f006fbf38788b5d53d9129d34aeb73ab335e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  int drawPatternProc (int ref, int context)", "signatureAfterChange": "  int drawPatternProc (int ref, int context)", "diff": ["+\t\tint imageWidth = OS.CGImageGetWidth(imageHandle);", "+\t\tint imageHeight = OS.CGImageGetHeight(imageHandle);", "-\t\trect.width = OS.CGImageGetWidth(imageHandle);", "-\t\trect.height = OS.CGImageGetHeight(imageHandle);", "+\t\trect.width = imageWidth;", "+\t\trect.height = imageHeight;", "-\t \tOS.CGContextTranslateCTM(context, 0, -rect.height);", "-\t\tOS.CGContextDrawImage(context, rect, imageHandle);", "+\t \tif (drawRect != null && (drawRect.x % imageWidth) + drawRect.width < imageWidth && (drawRect.y % imageHeight) + drawRect.height < imageHeight) {", "+\t \t\trect.x = drawRect.x % imageWidth;", "+\t \t\trect.y = drawRect.y % imageHeight;", "+\t \t\trect.width = drawRect.width;", "+\t \t\trect.height = drawRect.height;", "+\t \t\tif (OS.VERSION >= 0x1040) {", "+\t \t\t\timageHandle = OS.CGImageCreateWithImageInRect(imageHandle, rect);", "+\t \t\t} else {", "+\t\t \t\tint srcX = (int)drawRect.x, srcY = (int)drawRect.y;", "+\t\t \t\tint srcWidth = (int)drawRect.width, srcHeight = (int)drawRect.height;", "+\t\t \t\tint bpc = OS.CGImageGetBitsPerComponent(imageHandle);", "+\t\t\t\tint bpp = OS.CGImageGetBitsPerPixel(imageHandle);", "+\t\t\t\tint bpr = OS.CGImageGetBytesPerRow(imageHandle);", "+\t\t\t\tint colorspace = OS.CGImageGetColorSpace(imageHandle);", "+\t\t\t\tint alphaInfo = OS.CGImageGetAlphaInfo(imageHandle);", "+\t\t\t\tint data = image.data + (srcY * bpr) + srcX * 4;", "+\t\t\t\tint provider = OS.CGDataProviderCreateWithData(0, data, srcHeight * bpr, 0);", "+\t\t\t\tif (provider != 0) {", "+\t\t\t\t\timageHandle = OS.CGImageCreate(srcWidth, srcHeight, bpc, bpp, bpr, colorspace, alphaInfo, provider, null, true, 0);", "+\t\t\t\t\tOS.CGDataProviderRelease(provider);", "+\t\t\t\t}", "+\t\t\t}", "+\t \t}", "+\t \tOS.CGContextTranslateCTM(context, 0, -(rect.height + 2 * rect.y));", "+\t \tOS.CGContextDrawImage(context, rect, imageHandle);", "+\t \tif (imageHandle != 0 && imageHandle != image.handle) OS.CGImageRelease(imageHandle);"]}], "num": 15204}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd9eb2e508d07cc0daf979fccb87916c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "302e720efcf1cf8bb4bc5d6535fbe73b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "1e9a9b9a2f3b0161323b03292062cd8133cbbcb8", "commitAfterChange": "dec9fd8ce799a13104a343c8b185b7ed15925f00", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": " int untranslateOffset(int offset)", "signatureAfterChange": " int untranslateOffset(int offset)", "diff": ["-\tif (ascent != -1 || descent != -1) {", "-\t\tint /*long*/ ptr = OS.pango_layout_get_text(layout);", "-\t\tint /*long*/ iter = OS.pango_layout_get_iter(layout);", "-\t\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tint count = 0;", "-\t\tdo {", "-\t\t\tint bytePos = OS.pango_layout_iter_get_index(iter);", "-\t\t\tint pos = (int)/*64*/OS.g_utf8_pointer_to_offset(ptr, ptr + bytePos);", "-\t\t\tif (pos >= offset) break;", "-\t\t\tcount++;", "-\t\t} while (OS.pango_layout_iter_next_line(iter));", "-\t\tOS.pango_layout_iter_free (iter);", "-\t\toffset -= count;", "+\tif (invalidOffsets == null) return offset;", "+\tfor (int i = 0; i < invalidOffsets.length; i++) {", "+\t\tif (offset == invalidOffsets[i]) {", "+\t\t\toffset++;", "+\t\t\tcontinue;", "+\t\t}", "+\t\tif (offset < invalidOffsets[i]) {", "+\t\t\treturn offset - i;", "+\t\t}", "-\tif (segments == null) return offset;", "-\tint nSegments = segments.length;", "-\tif (nSegments <= 1) return offset;", "-\tif (nSegments == 2) {", "-\t\tif (segments[0] == 0 && segments[1] == length) return offset;", "-\t}", "-\tfor (int i = 0; i < nSegments && offset > segments[i]; i++) {", "-\t\toffset--;", "-\t}", "-\treturn offset;", "+\treturn offset - invalidOffsets.length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a49988f33bce3553d7d216d82e98529a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": " public void fillGradientRectangle(int x, int y, int width, int height, boolean vertical)", "signatureAfterChange": " public void fillGradientRectangle(int x, int y, int width, int height, boolean vertical)", "diff": ["-\ttry {", "-\t\tif (! focus(true, null))", "-\t\t\treturn;", "-\t\t", "-\t\t/* AW", "-\t\tint xDisplay = data.display;", "-\t\tint xScreenNum = OS.XDefaultScreen(xDisplay);", "-\t\tXGCValues values = new XGCValues();", "-\t\t*/", "-\t\tint fromColor, toColor;", "-\t\t/* AW", "-\t\tOS.XGetGCValues(xDisplay, handle, OS.GCForeground | OS.GCBackground, values);", "-\t\tfromColor = values.foreground;", "-\t\ttoColor = values.background;", "-\t\t*/", "-\t\tfromColor = data.foreground;", "-\t\ttoColor = data.background;", "-\t\t", "-\t\tboolean swapColors = false;", "-\t\tif (width < 0) {", "-\t\t\tx += width; width = -width;", "-\t\t\tif (! vertical) swapColors = true;", "-\t\t}", "-\t\tif (height < 0) {", "-\t\t\ty += height; height = -height;", "-\t\t\tif (vertical) swapColors = true;", "-\t\t}", "-\t\tif (swapColors) {", "-\t\t\tfinal int t = fromColor;", "-\t\t\tfromColor = toColor;", "-\t\t\ttoColor = t;", "-\t\t}", "-\t\t", "-\t\tif (fromColor == toColor) {", "-\t\t\t/* AW", "-\t\t\tOS.XFillRectangle(xDisplay, data.drawable, handle, x, y, width, height);", "-\t\t\t*/", "-\t\t\tMacUtil.RGBForeColor(data.foreground);", "-\t\t\tfRect.set(x, y, width, height);", "-\t\t\tOS.PaintRect(fRect.getData());", "-\t\t\treturn;", "-\t\t}", "-\t\t/* X Window deals with a virtually limitless array of color formats", "-\t\t * but we only distinguish between paletted and direct modes", "-\t\t */\t", "-\t\t/* AW", "-\t\tfinal int xScreen = OS.XDefaultScreenOfDisplay(xDisplay);", "-\t\tfinal int xVisual = OS.XDefaultVisual(xDisplay, xScreenNum);", "-\t\tVisual visual = new Visual();", "-\t\tOS.memmove(visual, xVisual, visual.sizeof);", "-\t\tfinal int depth = OS.XDefaultDepthOfScreen(xScreen);", "-\t\t*/", "-\t\t", "-\t\tint depth= getCurrentScreenDepth();", "-\t\tfinal boolean directColor = (depth > 8);", "-\t", "-\t\t// This code is intentionally commented since elsewhere in SWT we", "-\t\t// assume that depth <= 8 means we are in a paletted mode though", "-\t\t// this is not always the case.", "-\t\t//final boolean directColor = (visual.c_class == OS.TrueColor) || (visual.c_class == OS.DirectColor);", "-\t", "-\t\t/* AW", "-\t\tXColor xColor = new XColor();", "-\t\txColor.pixel = fromColor;", "-\t\tOS.XQueryColor(xDisplay, data.colormap, xColor);", "-\t\tfinal RGB fromRGB = new RGB((xColor.red & 0xffff) >>> 8, (xColor.green & 0xffff) >>> 8, (xColor.blue & 0xffff) >>> 8);", "-\t\txColor.pixel = toColor;", "-\t\tOS.XQueryColor(xDisplay, data.colormap, xColor);", "-\t\tfinal RGB toRGB = new RGB((xColor.red & 0xffff) >>> 8, (xColor.green & 0xffff) >>> 8, (xColor.blue & 0xffff) >>> 8);", "-\t\t*/", "-\t\t", "-\t\tRGB fromRGB = Color.carbon_new(data.device, fromColor, false).getRGB();", "-\t\tRGB toRGB = Color.carbon_new(data.device, toColor, false).getRGB();", "-\t", "-\t\tfinal int redBits, greenBits, blueBits;", "-\t\tif (directColor) {", "-\t\t\t// RGB mapped display", "-\t\t\tredBits = getChannelWidth(0x00ff0000 /* AW visual.red_mask */);", "-\t\t\tgreenBits = getChannelWidth(0x0000ff00 /* AW visual.green_mask */);", "-\t\t\tblueBits = getChannelWidth(0x000000ff /* AW visual.blue_mask */);", "-\t\t} else {", "-\t\t\t// Index display", "-\t\t\tredBits = greenBits = blueBits = 0;", "-\t\t}", "-\t", "-\t\tImageData.fillGradientRectangle(this, data.device,", "-\t\t\tx, y, width, height, vertical, fromRGB, toRGB,", "-\t\t\tredBits, greenBits, blueBits);", "-\t\t\t", "-\t} finally {", "-\t\tunfocus(true);", "-\t}", "-}", "+\t/* Rewrite this to use GdkPixbuf */", "+\tRGB backgroundRGB, foregroundRGB;", "+\tbackgroundRGB = getBackground().getRGB();", "+\tforegroundRGB = getForeground().getRGB();", "+", "+\tRGB fromRGB, toRGB;", "+\tfromRGB = foregroundRGB;", "+\ttoRGB   = backgroundRGB;", "+\tboolean swapColors = false;", "+\tif (width < 0) {", "+\t\tx += width; width = -width;", "+\t\tif (! vertical) swapColors = true;", "+\tif (height < 0) {", "+\t\ty += height; height = -height;", "+\t\tif (vertical) swapColors = true;", "+\t}", "+\tif (swapColors) {", "+\t\tfromRGB = backgroundRGB;", "+\t\ttoRGB   = foregroundRGB;", "+\t}", "+\tif (fromRGB == toRGB) {", "+\t\tfillRectangle(x, y, width, height);", "+\t\treturn;", "+\t}", "+\tImageData.fillGradientRectangle(this, data.device,", "+\t\tx, y, width, height, vertical, fromRGB, toRGB,", "+\t\t8, 8, 8);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c60aae411ae72258050cc9b81ba86ab3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "1e9a9b9a2f3b0161323b03292062cd8133cbbcb8", "commitAfterChange": "dec9fd8ce799a13104a343c8b185b7ed15925f00", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  int validateOffset(int offset, int step)", "signatureAfterChange": "  int validateOffset(int offset, int step)", "diff": ["-\toffset += step;", "-\tint pos;", "-\tint /*long*/ iter;", "-\tint /*long*/ ptr = OS.pango_layout_get_text(layout);", "-\tif (ascent != -1 || descent != -1) {", "-\t\titer = OS.pango_layout_get_iter(layout);", "-\t\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tdo {", "-\t\t\tint bytePos = OS.pango_layout_iter_get_index(iter);", "-\t\t\tpos = (int)/*64*/OS.g_utf8_pointer_to_offset(ptr, ptr + bytePos);", "-\t\t\tif (pos == offset) {", "-\t\t\t\toffset += step;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t} while (OS.pango_layout_iter_next_line(iter) && offset > pos);", "-\t\tOS.pango_layout_iter_free (iter);", "-\t}", "-\tif (segments != null && segments.length > 2) {", "-\t\tfor (int j = 0; j < segments.length; j++) {", "-\t\t\tif (translateOffset(segments[j]) - 1 == offset) {", "-\t\t\t\toffset += step;", "-\t\t\t\tbreak;", "-\t\t\t}", "+\tif (invalidOffsets == null) return offset + step;", "+\tint i = step > 0 ? 0 : invalidOffsets.length - 1;", "+\tdo {", "+\t\toffset += step;", "+\t\twhile (0 <= i && i < invalidOffsets.length) {", "+\t\t\tif (invalidOffsets[i] == offset) break;", "+\t\t\ti += step;", "-\t}", "+\t} while (0 <= i && i < invalidOffsets.length);"]}], "num": 58043}
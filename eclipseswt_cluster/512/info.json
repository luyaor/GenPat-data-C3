{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11191143d61e7ee17cd1f59ea8472fcf", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3fdb6271ff374784872ae66e7dec80f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "00044d960d22ae0ff107fa60b140159a76aa4f68", "commitAfterChange": "e3652a50c88e949df733c4507943c28f05cffd6f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "signatureAfterChange": "  public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "diff": ["+\tRectangle clip = gc.getClipping();", "-\t\tint baseline = 0;", "-\t\tfor (int i = 0; i < lineRuns.length; i++) {", "-\t\t\tbaseline = Math.max(baseline, lineRuns[i].baseline);", "-\t\t}", "-\t\tint lineHeight = lineY[line+1] - lineY[line];", "+\t\tif (drawX > clip.x + clip.width) continue;", "+\t\tif (drawX + lineWidth[line] < clip.x) continue;", "+\t\tint baseline = 0;", "+\t\tfor (int i = 0; i < lineRuns.length; i++) {", "+\t\t\tbaseline = Math.max(baseline, lineRuns[i].baseline);", "+\t\t}", "+\t\tint lineHeight = lineY[line+1] - lineY[line];", "-\t\t\tif (!run.lineBreak || run.softBreak) {", "-\t\t\t\tString string = text.substring(run.start, run.start + run.length);", "-\t\t\t\tint drawRunY = drawY + (baseline - run.baseline);", "-\t\t\t\tint end = run.start + run.length - 1;", "-\t\t\t\tgc.setFont(getItemFont(run));", "-\t\t\t\tboolean fullSelection = hasSelection && selectionStart <= run.start && selectionEnd >= end;", "-\t\t\t\tif (fullSelection) {", "-\t\t\t\t\tgc.setBackground(selectionBackground);", "-\t\t\t\t\tgc.fillRectangle(drawX, drawY, run.width, lineHeight);", "-\t\t\t\t\tif (!run.tab) {", "-\t\t\t\t\t\tgc.setForeground(selectionForeground);", "-\t\t\t\t\t\tgc.drawString(string, drawX, drawRunY, true);", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tif (run.style != null && run.style.background != null) {", "-\t\t\t\t\t\tColor bg = run.style.background;", "-\t\t\t\t\t\tgc.setBackground(bg);", "-\t\t\t\t\t\tgc.fillRectangle(drawX, drawRunY, run.width, run.height);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!run.tab) {", "-\t\t\t\t\t\tColor fg = foreground;", "-\t\t\t\t\t\tif (run.style != null && run.style.foreground != null) fg = run.style.foreground;", "-\t\t\t\t\t\tgc.setForeground(fg);", "-\t\t\t\t\t\tgc.drawString(string, drawX, drawRunY, true);", "-\t\t\t\t\t\tboolean partialSelection = hasSelection && !(selectionStart > end || run.start > selectionEnd);", "-\t\t\t\t\t\tif (partialSelection) {", "-\t\t\t\t\t\t\tint selStart = Math.max(selectionStart, run.start);", "-\t\t\t\t\t\t\tint selEnd = Math.min(selectionEnd, end);", "-\t\t\t\t\t\t\tstring = text.substring(run.start, selStart);", "-\t\t\t\t\t\t\tint selX = drawX + gc.stringExtent(string).x;", "-\t\t\t\t\t\t\tstring = text.substring(selStart, selEnd + 1);", "-\t\t\t\t\t\t\tint selWidth = gc.stringExtent(string).x;", "-\t\t\t\t\t\t\tgc.setBackground(selectionBackground);", "-\t\t\t\t\t\t\tgc.fillRectangle(selX, drawY, selWidth, lineHeight);", "-\t\t\t\t\t\t\tif (fg != selectionForeground) {", "-\t\t\t\t\t\t\t\tgc.setForeground(selectionForeground);", "-\t\t\t\t\t\t\t\tgc.drawString(string, selX, drawRunY, true);", "+\t\t\tif (drawX > clip.x + clip.width) break;", "+\t\t\tif (drawX + run.width >= clip.x) {", "+\t\t\t\tif (!run.lineBreak || run.softBreak) {", "+\t\t\t\t\tString string = text.substring(run.start, run.start + run.length);", "+\t\t\t\t\tint drawRunY = drawY + (baseline - run.baseline);", "+\t\t\t\t\tint end = run.start + run.length - 1;", "+\t\t\t\t\tgc.setFont(getItemFont(run));", "+\t\t\t\t\tboolean fullSelection = hasSelection && selectionStart <= run.start && selectionEnd >= end;", "+\t\t\t\t\tif (fullSelection) {", "+\t\t\t\t\t\tgc.setBackground(selectionBackground);", "+\t\t\t\t\t\tgc.fillRectangle(drawX, drawY, run.width, lineHeight);", "+\t\t\t\t\t\tif (!run.tab) {", "+\t\t\t\t\t\t\tgc.setForeground(selectionForeground);", "+\t\t\t\t\t\t\tgc.drawString(string, drawX, drawRunY, true);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (run.style != null && run.style.background != null) {", "+\t\t\t\t\t\t\tColor bg = run.style.background;", "+\t\t\t\t\t\t\tgc.setBackground(bg);", "+\t\t\t\t\t\t\tgc.fillRectangle(drawX, drawRunY, run.width, run.height);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!run.tab) {", "+\t\t\t\t\t\t\tColor fg = foreground;", "+\t\t\t\t\t\t\tif (run.style != null && run.style.foreground != null) fg = run.style.foreground;", "+\t\t\t\t\t\t\tgc.setForeground(fg);", "+\t\t\t\t\t\t\tgc.drawString(string, drawX, drawRunY, true);", "+\t\t\t\t\t\t\tboolean partialSelection = hasSelection && !(selectionStart > end || run.start > selectionEnd);", "+\t\t\t\t\t\t\tif (partialSelection) {", "+\t\t\t\t\t\t\t\tint selStart = Math.max(selectionStart, run.start);", "+\t\t\t\t\t\t\t\tint selEnd = Math.min(selectionEnd, end);", "+\t\t\t\t\t\t\t\tstring = text.substring(run.start, selStart);", "+\t\t\t\t\t\t\t\tint selX = drawX + gc.stringExtent(string).x;", "+\t\t\t\t\t\t\t\tstring = text.substring(selStart, selEnd + 1);", "+\t\t\t\t\t\t\t\tint selWidth = gc.stringExtent(string).x;", "+\t\t\t\t\t\t\t\tgc.setBackground(selectionBackground);", "+\t\t\t\t\t\t\t\tgc.fillRectangle(selX, drawY, selWidth, lineHeight);", "+\t\t\t\t\t\t\t\tif (fg != selectionForeground) {", "+\t\t\t\t\t\t\t\t\tgc.setForeground(selectionForeground);", "+\t\t\t\t\t\t\t\t\tgc.drawString(string, selX, drawRunY, true);", "+\t\t\t\t\t\t\t\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "691d45f4dea05edb2d55861fd3ca7ca4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/textlayout/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "00044d960d22ae0ff107fa60b140159a76aa4f68", "commitAfterChange": "e3652a50c88e949df733c4507943c28f05cffd6f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "signatureAfterChange": "  public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "diff": ["+\tRectangle clip = gc.getClipping();", "-\t\tFontMetrics metrics = getLineMetrics(line);", "-\t\tint baseline = metrics.getAscent() + metrics.getLeading();", "-\t\tint lineHeight = metrics.getHeight();", "+\t\tif (drawX > clip.x + clip.width) continue;", "+\t\tif (drawX + lineWidth[line] < clip.x) continue;", "+\t\tFontMetrics metrics = getLineMetrics(line);", "+\t\tint baseline = metrics.getAscent() + metrics.getLeading();", "+\t\tint lineHeight = metrics.getHeight();\t\t", "-\t\t\tif (!run.lineBreak || run.softBreak) {", "-\t\t\t\tcurrentFont = getItemFont(run);", "-\t\t\t\tif (!currentFont.equals(lastFont)) {", "-\t\t\t\t\tgc.setFont(currentFont);", "-\t\t\t\t\tmetrics = gc.getFontMetrics();", "-\t\t\t\t\tdrawRunY = drawY + (baseline - metrics.getAscent());", "-\t\t\t\t\tlastFont = currentFont;", "-\t\t\t\t}", "-\t\t\t\tint end = run.start + run.length - 1;", "-\t\t\t\tboolean fullSelection = hasSelection && selectionStart <= run.start && selectionEnd >= end;", "-\t\t\t\tif (fullSelection) {", "-\t\t\t\t\tgc.setBackground(selectionBackground);", "-\t\t\t\t\tgc.fillRectangle(drawX, drawY, run.width, lineHeight);", "-\t\t\t\t\tif (!run.tab) {", "-\t\t\t\t\t\tgc.setForeground(selectionForeground);", "-\t\t\t\t\t\tString string = text.substring(run.start, run.start + run.length);", "-\t\t\t\t\t\tgc.drawString(string, drawX, drawRunY, true);", "+\t\t\tif (drawX > clip.x + clip.width) break;", "+\t\t\tif (drawX + run.width >= clip.x) {", "+\t\t\t\tif (!run.lineBreak || run.softBreak) {", "+\t\t\t\t\tcurrentFont = getItemFont(run);", "+\t\t\t\t\tif (!currentFont.equals(lastFont)) {", "+\t\t\t\t\t\tgc.setFont(currentFont);", "+\t\t\t\t\t\tmetrics = gc.getFontMetrics();", "+\t\t\t\t\t\tdrawRunY = drawY + (baseline - metrics.getAscent());", "+\t\t\t\t\t\tlastFont = currentFont;", "-\t\t\t\t} else {", "-\t\t\t\t\tif (run.style != null && run.style.background != null) {", "-\t\t\t\t\t\tColor bg = run.style.background;", "-\t\t\t\t\t\tgc.setBackground(bg);", "-\t\t\t\t\t\tgc.fillRectangle(drawX, drawRunY, run.width, run.height);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!run.tab) {", "-\t\t\t\t\t\tColor fg = foreground;", "-\t\t\t\t\t\tif (run.style != null && run.style.foreground != null) fg = run.style.foreground;", "-\t\t\t\t\t\tgc.setForeground(fg);", "-\t\t\t\t\t\tString string = text.substring(run.start, run.start + run.length);", "-\t\t\t\t\t\tgc.drawString(string, drawX, drawRunY, true);", "-\t\t\t\t\t\tboolean partialSelection = hasSelection && !(selectionStart > end || run.start > selectionEnd);", "-\t\t\t\t\t\tif (partialSelection) {", "-\t\t\t\t\t\t\tint selStart = Math.max(selectionStart, run.start);", "-\t\t\t\t\t\t\tint selEnd = Math.min(selectionEnd, end);", "-\t\t\t\t\t\t\tstring = text.substring(run.start, selStart);", "-\t\t\t\t\t\t\tint selX = drawX + gc.stringExtent(string).x;", "-\t\t\t\t\t\t\tstring = text.substring(selStart, selEnd + 1);", "-\t\t\t\t\t\t\tint selWidth = gc.stringExtent(string).x;", "-\t\t\t\t\t\t\tgc.setBackground(selectionBackground);", "-\t\t\t\t\t\t\tgc.fillRectangle(selX, drawY, selWidth, lineHeight);", "-\t\t\t\t\t\t\tif (fg != selectionForeground) {", "-\t\t\t\t\t\t\t\tgc.setForeground(selectionForeground);", "-\t\t\t\t\t\t\t\tgc.drawString(string, selX, drawRunY, true);", "+\t\t\t\t\tint end = run.start + run.length - 1;", "+\t\t\t\t\tboolean fullSelection = hasSelection && selectionStart <= run.start && selectionEnd >= end;", "+\t\t\t\t\tif (fullSelection) {", "+\t\t\t\t\t\tgc.setBackground(selectionBackground);", "+\t\t\t\t\t\tgc.fillRectangle(drawX, drawY, run.width, lineHeight);", "+\t\t\t\t\t\tif (!run.tab) {", "+\t\t\t\t\t\t\tgc.setForeground(selectionForeground);", "+\t\t\t\t\t\t\tString string = text.substring(run.start, run.start + run.length);", "+\t\t\t\t\t\t\tgc.drawString(string, drawX, drawRunY, true);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (run.style != null && run.style.background != null) {", "+\t\t\t\t\t\t\tColor bg = run.style.background;", "+\t\t\t\t\t\t\tgc.setBackground(bg);", "+\t\t\t\t\t\t\tgc.fillRectangle(drawX, drawRunY, run.width, run.height);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (!run.tab) {", "+\t\t\t\t\t\t\tColor fg = foreground;", "+\t\t\t\t\t\t\tif (run.style != null && run.style.foreground != null) fg = run.style.foreground;", "+\t\t\t\t\t\t\tgc.setForeground(fg);", "+\t\t\t\t\t\t\tString string = text.substring(run.start, run.start + run.length);", "+\t\t\t\t\t\t\tgc.drawString(string, drawX, drawRunY, true);", "+\t\t\t\t\t\t\tboolean partialSelection = hasSelection && !(selectionStart > end || run.start > selectionEnd);", "+\t\t\t\t\t\t\tif (partialSelection) {", "+\t\t\t\t\t\t\t\tint selStart = Math.max(selectionStart, run.start);", "+\t\t\t\t\t\t\t\tint selEnd = Math.min(selectionEnd, end);", "+\t\t\t\t\t\t\t\tstring = text.substring(run.start, selStart);", "+\t\t\t\t\t\t\t\tint selX = drawX + gc.stringExtent(string).x;", "+\t\t\t\t\t\t\t\tstring = text.substring(selStart, selEnd + 1);", "+\t\t\t\t\t\t\t\tint selWidth = gc.stringExtent(string).x;", "+\t\t\t\t\t\t\t\tgc.setBackground(selectionBackground);", "+\t\t\t\t\t\t\t\tgc.fillRectangle(selX, drawY, selWidth, lineHeight);", "+\t\t\t\t\t\t\t\tif (fg != selectionForeground) {", "+\t\t\t\t\t\t\t\t\tgc.setForeground(selectionForeground);", "+\t\t\t\t\t\t\t\t\tgc.drawString(string, selX, drawRunY, true);", "+\t\t\t\t\t\t\t\t}", "+}"]}], "num": 512}
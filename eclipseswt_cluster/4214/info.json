{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "196cae41e2b9092c7072a771e5eaeaf4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6752f6170cb4dd48f525a43298823999", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "21541d1c7be3bc786f754e0d8604695c158056de", "commitAfterChange": "4e877ff6e374c0eac9d6ca011beec9646167b530", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Image(Device device, Image srcImage, int flag)", "signatureAfterChange": " public Image(Device device, Image srcImage, int flag)", "diff": ["-\tif (device == null) device = Device.getDevice();", "-\tif (device == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "-\tthis.device = device;", "+\tsuper(device);", "-\t\t\tif (device.tracking) device.new_Object(this);\t", "-\t\t\treturn;", "+\t\t\tbreak;", "-\t\t\tinit (device, newData);", "-\t\t\tif (device.tracking) device.new_Object(this);\t", "-\t\t\treturn;", "+\t\t\tinit (newData);", "+\t\t\tbreak;", "+\tinit();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eff3f1782a8c6c1c8e8682d44d0e892c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "21541d1c7be3bc786f754e0d8604695c158056de", "commitAfterChange": "4e877ff6e374c0eac9d6ca011beec9646167b530", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Image(Device device, Image srcImage, int flag)", "signatureAfterChange": " public Image(Device device, Image srcImage, int flag)", "diff": ["-\tif (device == null) device = Device.getDevice();", "-\tif (device == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+\tsuper(device);", "-\tthis.device = device;", "+\tdevice = this.device;", "-\t\tif (device.tracking) device.new_Object(this);", "-\t\treturn;", "-\t}", "+\t} else {", "+\t\t", "+\t\t/* Retrieve the source pixmap data */", "+\t\tint /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);", "+\t\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tint /*long*/ colormap = OS.gdk_colormap_get_system();", "+\t\tOS.gdk_pixbuf_get_from_drawable(pixbuf, srcImage.pixmap, colormap, 0, 0, 0, 0, width, height);", "+\t\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "+\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "-\t/* Retrieve the source pixmap data */", "-\tint /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);", "-\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tint /*long*/ colormap = OS.gdk_colormap_get_system();", "-\tOS.gdk_pixbuf_get_from_drawable(pixbuf, srcImage.pixmap, colormap, 0, 0, 0, 0, width, height);", "-\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "-\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "-", "-\t/* Apply transformation */", "-\tswitch (flag) {", "-\t\tcase SWT.IMAGE_DISABLE: {", "-\t\t\tColor zeroColor = device.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);", "-\t\t\tRGB zeroRGB = zeroColor.getRGB();", "-\t\t\tbyte zeroRed = (byte)zeroRGB.red;", "-\t\t\tbyte zeroGreen = (byte)zeroRGB.green;", "-\t\t\tbyte zeroBlue = (byte)zeroRGB.blue;", "-\t\t\tColor oneColor = device.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);", "-\t\t\tRGB oneRGB = oneColor.getRGB();", "-\t\t\tbyte oneRed = (byte)oneRGB.red;", "-\t\t\tbyte oneGreen = (byte)oneRGB.green;", "-\t\t\tbyte oneBlue = (byte)oneRGB.blue;", "-\t\t\tbyte[] line = new byte[stride];", "-\t\t\tfor (int y=0; y<height; y++) {", "-\t\t\t\tOS.memmove(line, pixels + (y * stride), stride);", "-\t\t\t\tfor (int x=0; x<width; x++) {", "-\t\t\t\t\tint offset = x*3;", "-\t\t\t\t\tint red = line[offset] & 0xFF;", "-\t\t\t\t\tint green = line[offset+1] & 0xFF;", "-\t\t\t\t\tint blue = line[offset+2] & 0xFF;", "-\t\t\t\t\tint intensity = red * red + green * green + blue * blue;", "-\t\t\t\t\tif (intensity < 98304) {", "-\t\t\t\t\t\tline[offset] = zeroRed;", "-\t\t\t\t\t\tline[offset+1] = zeroGreen;", "-\t\t\t\t\t\tline[offset+2] = zeroBlue;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tline[offset] = oneRed;", "-\t\t\t\t\t\tline[offset+1] = oneGreen;", "-\t\t\t\t\t\tline[offset+2] = oneBlue;", "+\t\t/* Apply transformation */", "+\t\tswitch (flag) {", "+\t\t\tcase SWT.IMAGE_DISABLE: {", "+\t\t\t\tColor zeroColor = device.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);", "+\t\t\t\tRGB zeroRGB = zeroColor.getRGB();", "+\t\t\t\tbyte zeroRed = (byte)zeroRGB.red;", "+\t\t\t\tbyte zeroGreen = (byte)zeroRGB.green;", "+\t\t\t\tbyte zeroBlue = (byte)zeroRGB.blue;", "+\t\t\t\tColor oneColor = device.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND);", "+\t\t\t\tRGB oneRGB = oneColor.getRGB();", "+\t\t\t\tbyte oneRed = (byte)oneRGB.red;", "+\t\t\t\tbyte oneGreen = (byte)oneRGB.green;", "+\t\t\t\tbyte oneBlue = (byte)oneRGB.blue;", "+\t\t\t\tbyte[] line = new byte[stride];", "+\t\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\t\tOS.memmove(line, pixels + (y * stride), stride);", "+\t\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\t\t\tint offset = x*3;", "+\t\t\t\t\t\tint red = line[offset] & 0xFF;", "+\t\t\t\t\t\tint green = line[offset+1] & 0xFF;", "+\t\t\t\t\t\tint blue = line[offset+2] & 0xFF;", "+\t\t\t\t\t\tint intensity = red * red + green * green + blue * blue;", "+\t\t\t\t\t\tif (intensity < 98304) {", "+\t\t\t\t\t\t\tline[offset] = zeroRed;", "+\t\t\t\t\t\t\tline[offset+1] = zeroGreen;", "+\t\t\t\t\t\t\tline[offset+2] = zeroBlue;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tline[offset] = oneRed;", "+\t\t\t\t\t\t\tline[offset+1] = oneGreen;", "+\t\t\t\t\t\t\tline[offset+2] = oneBlue;", "+\t\t\t\t\t\t}", "+\t\t\t\t\tOS.memmove(pixels + (y * stride), line, stride);", "-\t\t\t\tOS.memmove(pixels + (y * stride), line, stride);", "+\t\t\t\tbreak;", "-\t\t\tbreak;", "-\t\t}", "-\t\tcase SWT.IMAGE_GRAY: {\t\t\t", "-\t\t\tbyte[] line = new byte[stride];", "-\t\t\tfor (int y=0; y<height; y++) {", "-\t\t\t\tOS.memmove(line, pixels + (y * stride), stride);", "-\t\t\t\tfor (int x=0; x<width; x++) {", "-\t\t\t\t\tint offset = x*3;", "-\t\t\t\t\tint red = line[offset] & 0xFF;", "-\t\t\t\t\tint green = line[offset+1] & 0xFF;", "-\t\t\t\t\tint blue = line[offset+2] & 0xFF;", "-\t\t\t\t\tbyte intensity = (byte)((red+red+green+green+green+green+green+blue) >> 3);", "-\t\t\t\t\tline[offset] = line[offset+1] = line[offset+2] = intensity;", "+\t\t\tcase SWT.IMAGE_GRAY: {\t\t\t", "+\t\t\t\tbyte[] line = new byte[stride];", "+\t\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\t\tOS.memmove(line, pixels + (y * stride), stride);", "+\t\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\t\t\tint offset = x*3;", "+\t\t\t\t\t\tint red = line[offset] & 0xFF;", "+\t\t\t\t\t\tint green = line[offset+1] & 0xFF;", "+\t\t\t\t\t\tint blue = line[offset+2] & 0xFF;", "+\t\t\t\t\t\tbyte intensity = (byte)((red+red+green+green+green+green+green+blue) >> 3);", "+\t\t\t\t\t\tline[offset] = line[offset+1] = line[offset+2] = intensity;", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.memmove(pixels + (y * stride), line, stride);", "-\t\t\t\tOS.memmove(pixels + (y * stride), line, stride);", "+\t\t\t\tbreak;", "-\t\t\tbreak;", "-\t}", "-", "-\t/* Copy data back to destination pixmap */", "-\tOS.gdk_pixbuf_render_to_drawable(pixbuf, pixmap, gdkGC, 0, 0, 0, 0, width, height, OS.GDK_RGB_DITHER_NORMAL, 0, 0);", "-\t/* Free resources */", "-\tOS.g_object_unref(pixbuf);", "-\tOS.g_object_unref(gdkGC);", "-\tif (device.tracking) device.new_Object(this);", "+\t\t/* Copy data back to destination pixmap */", "+\t\tOS.gdk_pixbuf_render_to_drawable(pixbuf, pixmap, gdkGC, 0, 0, 0, 0, width, height, OS.GDK_RGB_DITHER_NORMAL, 0, 0);", "+\t\t", "+\t\t/* Free resources */", "+\t\tOS.g_object_unref(pixbuf);", "+\t\tOS.g_object_unref(gdkGC);", "+\t}", "+\tinit();"]}], "num": 4214}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a7eb156caaa4cf889fb076f5a63a34cf", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d83b97a4410c2c8940530eea7128edbb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "0215664973954ec1e7f14d34d79815e704ff9294", "commitAfterChange": "4603eec963557970617bd828d47f041e2fd29ca3", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "\r void initializeList ()", "signatureAfterChange": "\r void initializeList ()", "diff": ["-\tint [] argList = {OS.XmNforeground, 0, OS.XmNbackground, 0, OS.XmNfontList, 0, OS.XmNhighlightColor, 0};\r", "+\tint [] argList = {OS.XmNforeground, 0, OS.XmNbackground, 0, OS.XmNfontList, 0, OS.XmNselectColor, 0, OS.XmNhighlightColor, 0};\r", "-\tlistSelect = argList [7];\r", "+\t\r", "-\tlistFont = OS.XmFontListCopy (argList [5]); \r", "+\tlistFont = OS.XmFontListCopy (argList [5]);\r", "+\t\r", "+\t/**\r", "+\t* Feature in Motif.  If the value of resource XmNselectColor is\r", "+\t* XmDEFAULT_SELECT_COLOR then querying for this resource gives\r", "+\t* the value of the selection color to use, which is between the\r", "+\t* background and bottom shadow colors.\r", "+\t*/\r", "+\tif (argList [7] == OS.XmREVERSED_GROUND_COLORS) {\r", "+\t\tlistSelect = listForeground;\r", "+\t} else {\r", "+\t\tif (argList [7] == OS.XmHIGHLIGHT_COLOR) {\r", "+\t\t\tlistSelect = argList [9];\r", "+\t\t} else {\r", "+\t\t\tlistSelect = argList[7];\t// the middle color to use\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d274565952d41c51c032c943a061d35", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "7d420187472c4255c955c0841e36919b6af42403", "commitAfterChange": "d40180969e058820e7b65ecda5a796369b957f6c", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "  int kEventControlSetFocusPart (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventControlSetFocusPart (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tsendFocusEvent (part [0] != 0, false);", "+", "+\t\t/*", "+\t\t* Feature in the Macintosh.  GetKeyboardFocus() returns NULL during", "+\t\t* kEventControlSetFocusPart if the focus part is not kControlFocusNoPart.", "+\t\t* The fix is to remember the focus control and return it during", "+\t\t* kEventControlSetFocusPart.", "+\t\t*/", "+\t\tDisplay display = this.display;", "+\t\tif (part [0] != OS.kControlFocusNoPart) display.focusControl = this;", "+\t\tsendFocusEvent (part [0] != OS.kControlFocusNoPart, false);", "+\t\tif (part [0] != OS.kControlFocusNoPart) display.focusControl = null;", "+", "+\t\tif (isDisposed ()) return OS.noErr;", "-\tif (isDisposed ()) return OS.noErr;"]}], "num": 3188}
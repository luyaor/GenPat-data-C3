{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0669b6e1a403b674d9c2a42a11025f9f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c29bec61f1d51de5a31e2cbe198ef95d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "252a9be34fefb5f44adadae747e851b38287eadb", "commitAfterChange": "791b4b7760f9ec59a02cf0bbfb6e8fe5aad71937", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["-\t\tvboxHandle = gtk_box_new (OS.GTK_ORIENTATION_VERTICAL, false, 0);", "-\t\tif (vboxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tcreateHandle (index, false, true);", "-\t\tOS.gtk_container_add (vboxHandle, scrolledHandle);", "-\t\tOS.gtk_box_set_child_packing (vboxHandle, scrolledHandle, true, true, 0, OS.GTK_PACK_END);", "-\t} else {", "-\t\tvboxHandle = OS.gtk_bin_get_child (shellHandle);", "-\t\tif (vboxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tlong /*int*/ children = OS.gtk_container_get_children (vboxHandle);", "-\t\tif (OS.g_list_length (children) > 0) {", "-\t\t\tscrolledHandle = OS.g_list_data (children);", "-\t\t}", "-\t\tOS.g_list_free (children);", "-\t\tif (scrolledHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\thandle = OS.gtk_bin_get_child (scrolledHandle);", "-\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+\tvboxHandle = gtk_box_new (OS.GTK_ORIENTATION_VERTICAL, false, 0);", "+\tif (vboxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\tcreateHandle (index, false, true);", "+\tOS.gtk_container_add (vboxHandle, scrolledHandle);", "+\tOS.gtk_box_set_child_packing (vboxHandle, scrolledHandle, true, true, 0, OS.GTK_PACK_END);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff590d0c5c20afffc52c4c17fccb2fc5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "abdb7df6c5ef7f31dd770f626e22ad0d039e1629", "commitAfterChange": "f098d2465fbdfa81c6532fa2c9d1d4a8feb55b7a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\tif (shellHandle == 0) {", "-\t\tMonitor monitor = getMonitor ();", "-\t\tRectangle rect = monitor.getClientArea ();", "-\t\tint width = rect.width * 5 / 8;", "-\t\tint height = rect.height * 5 / 8;", "-\t\tRect bounds = new Rect ();", "-\t\tOS.SetRect (bounds, (short) 0, (short) 0, (short) width, (short) height);", "-\t\tint [] outWindow = new int [1];", "-\t\tattributes &= OS.GetAvailableWindowAttributes (windowClass);", "-\t\tOS.CreateNewWindow (windowClass, attributes, bounds, outWindow);", "-\t\tif (outWindow [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tshellHandle = outWindow [0];", "-\t\tOS.RepositionWindow (shellHandle, 0, OS.kWindowCascadeOnMainScreen);", "-\t//\tOS.SetThemeWindowBackground (shellHandle, (short) OS.kThemeBrushDialogBackgroundActive, false);", "-\t\tint [] theRoot = new int [1];", "-\t\tif (OS.HIVIEW) {", "-\t\t\tOS.HIViewFindByID (shellHandle, OS.kHIViewWindowContentID (), theRoot);", "-\t\t\t/*", "-\t\t\t* Bug in the Macintosh.  When the window class is kMovableModalWindowClass or", "-\t\t\t* kModalWindowClass, HIViewFindByID() fails to find the control identified by", "-\t\t\t* kHIViewWindowContentID.  The fix is to call GetRootControl() if the call", "-\t\t\t* failed.", "-\t\t\t*/", "-\t\t\tif (theRoot [0] == 0) OS.GetRootControl (shellHandle, theRoot);\t\t", "-\t\t} else {", "-\t\t\tOS.CreateRootControl (shellHandle, theRoot);", "-\t\t\tOS.GetRootControl (shellHandle, theRoot);", "-\t\t}", "-\t\tif (theRoot [0] == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) != 0) {", "-\t\t\tcreateScrolledHandle (theRoot [0]);", "-\t\t} else {", "-\t\t\tcreateHandle (theRoot [0]);", "-\t\t}", "-\t\tOS.SetControlVisibility (topHandle (), false, false);", "-\t} else {", "-\t\tint [] theRoot = new int [1];", "+\tMonitor monitor = getMonitor ();", "+\tRectangle rect = monitor.getClientArea ();", "+\tint width = rect.width * 5 / 8;", "+\tint height = rect.height * 5 / 8;", "+\tRect bounds = new Rect ();", "+\tOS.SetRect (bounds, (short) 0, (short) 0, (short) width, (short) height);", "+\tint [] outWindow = new int [1];", "+\tattributes &= OS.GetAvailableWindowAttributes (windowClass);", "+\tOS.CreateNewWindow (windowClass, attributes, bounds, outWindow);", "+\tif (outWindow [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\tshellHandle = outWindow [0];", "+\tOS.RepositionWindow (shellHandle, 0, OS.kWindowCascadeOnMainScreen);", "+//\tOS.SetThemeWindowBackground (shellHandle, (short) OS.kThemeBrushDialogBackgroundActive, false);", "+\tint [] theRoot = new int [1];", "+\tif (OS.HIVIEW) {", "-\t\tif (theRoot [0] == 0) OS.GetRootControl (shellHandle, theRoot);", "-\t\thandle = OS.HIViewGetFirstSubview (theRoot[0]);", "-\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tif (OS.IsWindowVisible (shellHandle)) state &= ~HIDDEN;", "+\t\t/*", "+\t\t* Bug in the Macintosh.  When the window class is kMovableModalWindowClass or", "+\t\t* kModalWindowClass, HIViewFindByID() fails to find the control identified by", "+\t\t* kHIViewWindowContentID.  The fix is to call GetRootControl() if the call", "+\t\t* failed.", "+\t\t*/", "+\t\tif (theRoot [0] == 0) OS.GetRootControl (shellHandle, theRoot);\t\t", "+\t} else {", "+\t\tOS.CreateRootControl (shellHandle, theRoot);", "+\t\tOS.GetRootControl (shellHandle, theRoot);", "+\tif (theRoot [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\tif ((style & (SWT.H_SCROLL | SWT.V_SCROLL)) != 0) {", "+\t\tcreateScrolledHandle (theRoot [0]);", "+\t} else {", "+\t\tcreateHandle (theRoot [0]);", "+\t}", "+\tOS.SetControlVisibility (topHandle (), false, false);"]}], "num": 46710}
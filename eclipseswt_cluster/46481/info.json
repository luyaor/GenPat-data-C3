{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b13c9d106b9c3207ee5913c30d8e6745", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55260950442b4ebf7510ecb05aa8e813", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 367, "methodNumberAfterChange": 368, "signatureBeforeChange": " \tint get_text(int startOffset, int endOffset, int pbstrText)", "signatureAfterChange": " \tint get_text(int startOffset, int endOffset, int pbstrText)", "diff": ["+\t\tevent.count = 0;", "+\t\tevent.type = ACC.TEXT_BOUNDARY_ALL;", "-\t\tif (event.result == null || event.result.length() == 0) return COM.S_FALSE; // TODO: is S_FALSE ok here?", "+\t\tif (event.result == null) {", "+\t\t\tAccessibleControlEvent e = new AccessibleControlEvent(this);", "+\t\t\te.childID = ACC.CHILDID_SELF;", "+\t\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\t\tlistener.getRole(e);", "+\t\t\t\tlistener.getValue(e);", "+\t\t\t}", "+\t\t\t// TODO: Consider passing the value through for other roles as well (i.e. combo, etc). Keep in sync with get_nCharacters.", "+\t\t\tif (e.detail == ACC.ROLE_TEXT) {", "+\t\t\t\tevent.result = e.result;", "+\t\t\t}", "+\t\t}", "+\t\tif (DEBUG) print(\"IAccessibleText::get_text(\" + startOffset + \", \" + endOffset + \") returning \" + event.result);", "+\t\tif (event.result == null) return COM.E_INVALIDARG;", "-\t\t// TODO: @retval E_INVALIDARG if bad [in] passed, [out] value is NULL"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a2f889c0ecafb6b434651e6b15ed379", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 366, "methodNumberAfterChange": 367, "signatureBeforeChange": " \tint get_selection(int selectionIndex, int pStartOffset, int pEndOffset)", "signatureAfterChange": " \tint get_selection(int selectionIndex, int pStartOffset, int pEndOffset)", "diff": ["+\t\tevent.start = -1;", "+\t\tevent.end = -1;", "+\t\tif (event.start == -1 && selectionIndex == 0) {", "+\t\t\tevent.childID = ACC.CHILDID_SELF;", "+\t\t\tevent.offset = -1;", "+\t\t\tevent.length = 0;", "+\t\t\tfor (int i = 0; i < accessibleTextListeners.size(); i++) {", "+\t\t\t\tAccessibleTextListener listener = (AccessibleTextListener) accessibleTextListeners.elementAt(i);", "+\t\t\t\tlistener.getSelectionRange (event);", "+\t\t\t}", "+\t\t\tevent.start = event.offset;", "+\t\t\tevent.end = event.offset + event.length;", "+\t\t}", "+\t\tif (DEBUG) print(\"IAccessibleText::get_selection(\" + selectionIndex + \") returning \" + event.start + \", \" + event.end);", "+\t\t/*", "+\t\t * Note that the current IA2 spec says to return 0,0 when there's nothing to return,", "+\t\t * but since 0 is a valid return value, the spec is going to be updated to return -1,-1.", "+\t\t */", "+\t\tif (event.start == -1) return COM.S_FALSE;", "-\t\t// TODO: @retval S_FALSE if there is nothing to return, [out] values are 0s@retval E_INVALIDARG if bad [in] passed, [out] values are 0s"]}], "num": 46481}
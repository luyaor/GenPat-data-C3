{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a724eb8457c6cc1ff2fa084f27fd1af", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6694094b8df544db2a03c910a381e498", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "0519b301515901148cc1199b76a3200406342671", "commitAfterChange": "dda200f74dfa766ae79378364929a02abde88b6b", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 82, "signatureBeforeChange": "  @Override boolean updateTextDirection(int textDirection)", "signatureAfterChange": "  boolean updateTextDirection(int textDirection)", "diff": ["-@Override", "-\tif (textDirection == AUTO_TEXT_DIRECTION) {", "-\t\tint length = OS.GetWindowTextLength (handle);", "-\t\tif (length > 0) {", "-\t\t\tTCHAR buffer = new TCHAR (getCodePage (), length + 1);", "-\t\t\tOS.GetWindowText (handle, buffer, length + 1);", "-\t\t\tif (segments != null) {", "-\t\t\t\tbuffer = deprocessText (buffer, 0, -1, false);", "-\t\t\t\ttextDirection = resolveTextDirection(buffer.toString ());", "-\t\t\t} else {", "-\t\t\t\ttextDirection = resolveTextDirection(buffer.toString (0, length));", "-\t\t\t}", "-\t\t\tif (textDirection == SWT.NONE) {", "-\t\t\t\t/*", "-\t\t\t\t * Force direction update also when no strong bidi chars are", "-\t\t\t\t * found.", "-\t\t\t\t */", "-\t\t\t\ttextDirection = (style & SWT.RIGHT_TO_LEFT) != 0 ? SWT.RIGHT_TO_LEFT : SWT.LEFT_TO_RIGHT;", "-\t\t\t}", "-\t\t}", "-\t\tstate |= HAS_AUTO_DIRECTION;", "-\t} else {", "-\t\tstate &= ~HAS_AUTO_DIRECTION;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "953f16246cdd6d0cabe4b2acc40c01da", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Group.java", "commitBeforeChange": "bf216ef6a93d103e9113ee67337be632fff4be9d", "commitAfterChange": "58098a35d5242498a1aa19f6b3c0a31e3d5b294c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public Rectangle computeTrim (int x, int y, int width, int height)", "signatureAfterChange": "  public Rectangle computeTrim (int x, int y, int width, int height)", "diff": ["+", "-\tint textWidth = 0;", "-\tint length = OS.GetWindowTextLength (handle);", "-\tif (length != 0) {", "-\t\t/*", "-\t\t* If the group has text, and the text is wider than the", "-\t\t* client area, pad the width so the text is not clipped.", "-\t\t*/", "-\t\tTCHAR buffer1 = new TCHAR (getCodePage (), length + 1);", "-\t\tOS.GetWindowText (handle, buffer1, length + 1);", "-\t\tRECT rect = new RECT ();", "-\t\tint flags = OS.DT_CALCRECT | OS.DT_SINGLELINE;", "-\t\tOS.DrawText (hDC, buffer1, length, rect, flags);", "-\t\ttextWidth = rect.right - rect.left + CLIENT_INSET * 4;", "-\t}", "-\ttrim.width = Math.max (trim.width, textWidth) + CLIENT_INSET * 2;", "+\ttrim.width += CLIENT_INSET * 2;"]}], "num": 63432}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e121dd9dba11d4636f8cf5b5f667497", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "305503a0914874a8c6030f70ce8ad623", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "6215640175ccfe897f3840a8201a886b754fe47e", "commitAfterChange": "45ceafadc60325534082e286f4aafee627d1de0d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "    private static Hashtable gnome_getMimeInfo()", "signatureAfterChange": " private static Hashtable gnome_getMimeInfo()", "diff": ["-  ", "-\t", "-\t// Extract the mime info from the system directory.", "-\tString mimeDirectory = gnome_getDataDirectory (\"mime-info\");", "-\tgnome_getMimeInfoFromDirectory( mimeInfo, new File( mimeDirectory ) );", "-\t", "-\t// Append the mime info from the user's directory (if it exists).", "-\tString userDirectory = gnome_getHomeDirectory();", "-\tif (userDirectory != null) {", "-\t\tuserDirectory = userDirectory + File.separator + \".gnome\" + File.separator + \"mime-info\";", "-\t\tgnome_getMimeInfoFromDirectory( mimeInfo, new File( userDirectory ) );", "+\tint[] mimeData = new int[1];", "+\tint[] extensionData = new int[1];", "+\tint mimeList = GNOME.gnome_vfs_get_registered_mime_types();", "+\tint mimeElement = mimeList;", "+\twhile (mimeElement != 0) {", "+\t\tOS.memmove (mimeData, mimeElement, 4);", "+\t\tint mimePtr = mimeData[0];", "+\t\tint mimeLength = OS.strlen(mimePtr);", "+\t\tbyte[] mimeTypeBuffer = new byte[mimeLength];", "+\t\tOS.memmove(mimeTypeBuffer, mimePtr, mimeLength);", "+\t\tString mimeType = new String(Converter.mbcsToWcs(null, mimeTypeBuffer));", "+\t\tint extensionList = GNOME.gnome_vfs_mime_get_extensions_list(mimePtr);", "+\t\tif (extensionList != 0) {", "+\t\t\tVector extensions = new Vector();", "+\t\t\tint extensionElement = extensionList;", "+\t\t\twhile (extensionElement != 0) {", "+\t\t\t\tOS.memmove(extensionData, extensionElement, 4);", "+\t\t\t\tint extensionPtr = extensionData[0];", "+\t\t\t\tint extension_length = OS.strlen(extensionPtr);", "+\t\t\t\tbyte[] extensionBuffer = new byte[extension_length];", "+\t\t\t\tOS.memmove(extensionBuffer, extensionPtr, extension_length);", "+\t\t\t\tString extension = new String(Converter.mbcsToWcs(null, extensionBuffer));", "+\t\t\t\textension = '.' + extension;", "+\t\t\t\textensions.add(extension);", "+\t\t\t\textensionElement = GNOME.g_list_next(extensionElement); ", "+\t\t\t}", "+\t\t\tGNOME.gnome_vfs_mime_extensions_list_free(extensionList);", "+\t\t\tif (extensions.size() > 0) mimeInfo.put(mimeType, extensions);", "+\t\t}", "+\t\tmimeElement = GNOME.g_list_next(mimeElement);", "-", "+\tif (mimeList != 0) GNOME.gnome_vfs_mime_registered_mime_type_list_free(mimeList);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d36c62efed00ad40cb79d76f896f9708", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "d70097b3723123dbd8abcf6b34b2f106be849ad8", "commitAfterChange": "b6666a5139ca22ba429077362792bdaf8b234877", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  static Hashtable gio_getMimeInfo()", "signatureAfterChange": "  static Hashtable gio_getMimeInfo()", "diff": ["-\tint /*long*/ mimeDatabase;", "+\tint /*long*/ mimeDatabase = 0, fileInfo = 0;", "-\tif (fileInputStream == 0) {", "-\t\tOS.g_object_unref (mimeDatabase);", "-\t\treturn null;", "-\t}", "-\tint /*long*/ [] modTimestamp = new int /*long*/ [2];", "-\tbuffer = Converter.wcsToMbcs (null, \"*\", true);", "-\tint /*long*/ fileInfo = OS.g_file_query_info(mimeDatabase, buffer, 0, 0, 0);", "-\tOS.g_file_info_get_modification_time(fileInfo, modTimestamp);", "-\tif (modTime != 0 && modTimestamp[0] == modTime) {", "-\t\treturn mimeTable;", "-\t} else {", "-\t\tmimeTable = new Hashtable();", "-\t\tmodTime = modTimestamp[0];", "-\t\tint /*long*/ reader = OS.g_data_input_stream_new (fileInputStream);", "-\t\tint[] length = new int[1];", "-\t\t", "-\t\tif (reader != 0) {", "-\t\t\tint /*long*/ linePtr = OS.g_data_input_stream_read_line (reader, length, 0, 0);", "-\t\t\twhile (linePtr != 0) {", "-\t\t\t\tbyte[] lineBytes = new byte[length[0]];", "-\t\t\t\tOS.memmove(lineBytes, linePtr, length[0]);", "-\t\t\t\tString line = new String (Converter.mbcsToWcs (null, lineBytes));", "-\t", "-\t\t\t\tint separatorIndex = line.indexOf (':');", "-\t\t\t\tif (separatorIndex > 0) {", "-\t\t\t\t\tVector mimeTypes = new Vector ();", "-\t\t\t\t    String mimeType = line.substring (0, separatorIndex);", "-\t\t\t\t\tString extensionFormat = line.substring (separatorIndex+1);", "-\t\t\t\t\tint extensionIndex = extensionFormat.indexOf (\".\");", "-\t\t\t\t\tif (extensionIndex > 0) {", "-\t\t\t\t\t\tString extension = extensionFormat.substring (extensionIndex);", "-\t\t\t\t\t\tmimeTypes.add (mimeType);", "-\t\t\t\t\t\tif (mimeTable.containsKey (extension)) {", "-\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t * If mimeType already exists, it is required to update", "-\t\t\t\t\t\t\t * the existing key (mime-type) with the new extension. ", "-\t\t\t\t\t\t\t */", "-\t\t\t\t\t\t\tVector value = (Vector) mimeTable.get (extension);", "-\t\t\t\t\t\t\tmimeTypes.addAll (value);", "+\ttry {", "+\t\tif (fileInputStream != 0) {", "+\t\t\tint /*long*/ [] modTimestamp = new int /*long*/ [2];", "+\t\t\tbuffer = Converter.wcsToMbcs (null, \"*\", true);", "+\t\t\tfileInfo = OS.g_file_query_info(mimeDatabase, buffer, 0, 0, 0);", "+\t\t\tOS.g_file_info_get_modification_time(fileInfo, modTimestamp);", "+\t\t\tif (modTime != 0 && modTimestamp[0] == modTime) {", "+\t\t\t\treturn mimeTable;", "+\t\t\t} else {", "+\t\t\t\tmimeTable = new Hashtable();", "+\t\t\t\tmodTime = modTimestamp[0];", "+\t\t\t\tint /*long*/ reader = OS.g_data_input_stream_new (fileInputStream);", "+\t\t\t\tint[] length = new int[1];", "+\t\t\t\t", "+\t\t\t\tif (reader != 0) {", "+\t\t\t\t\tint /*long*/ linePtr = OS.g_data_input_stream_read_line (reader, length, 0, 0);", "+\t\t\t\t\twhile (linePtr != 0) {", "+\t\t\t\t\t\tbyte[] lineBytes = new byte[length[0]];", "+\t\t\t\t\t\tOS.memmove(lineBytes, linePtr, length[0]);", "+\t\t\t\t\t\tString line = new String (Converter.mbcsToWcs (null, lineBytes));", "+\t\t\t", "+\t\t\t\t\t\tint separatorIndex = line.indexOf (':');", "+\t\t\t\t\t\tif (separatorIndex > 0) {", "+\t\t\t\t\t\t\tVector mimeTypes = new Vector ();", "+\t\t\t\t\t\t    String mimeType = line.substring (0, separatorIndex);", "+\t\t\t\t\t\t\tString extensionFormat = line.substring (separatorIndex+1);", "+\t\t\t\t\t\t\tint extensionIndex = extensionFormat.indexOf (\".\");", "+\t\t\t\t\t\t\tif (extensionIndex > 0) {", "+\t\t\t\t\t\t\t\tString extension = extensionFormat.substring (extensionIndex);", "+\t\t\t\t\t\t\t\tmimeTypes.add (mimeType);", "+\t\t\t\t\t\t\t\tif (mimeTable.containsKey (extension)) {", "+\t\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t\t * If mimeType already exists, it is required to update", "+\t\t\t\t\t\t\t\t\t * the existing key (mime-type) with the new extension. ", "+\t\t\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\t\t\tVector value = (Vector) mimeTable.get (extension);", "+\t\t\t\t\t\t\t\t\tmimeTypes.addAll (value);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tmimeTable.put (extension, mimeTypes);", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tmimeTable.put (extension, mimeTypes);", "+\t\t\t\t\t\tOS.g_free(linePtr);", "+\t\t\t\t\t\tlinePtr = OS.g_data_input_stream_read_line (reader, length, 0, 0);", "-\t\t\t\tlinePtr = OS.g_data_input_stream_read_line (reader, length, 0, 0);", "+\t\t\t\tif (reader != 0) OS.g_object_unref (reader);", "+\t\t\t\treturn mimeTable;", "-\t\t}", "-\t\treturn mimeTable;", "+\t\t} ", "+\t\treturn null;", "+\t} finally {", "+\t\tif (fileInfo != 0) OS.g_object_unref(fileInfo);", "+\t\tif (fileInputStream != 0) OS.g_object_unref(fileInputStream);", "+\t\tif (mimeDatabase != 0) \tOS.g_object_unref (mimeDatabase);"]}], "num": 32068}
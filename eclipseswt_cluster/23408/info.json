{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a12ed51448f6f2c6d421db9a9975e75", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f04aaed279ce6d0703f91d856c5bce8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ce2f35c3f6b1d0b5778f68f011b1d8668d3c5c72", "commitAfterChange": "00bee382096a1807d86474fed7c933116a37eeb8", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 191, "signatureBeforeChange": "\r public void redrawRange(int start, int length, boolean clearBackground)", "signatureAfterChange": "\r public void redrawRange(int start, int length, boolean clearBackground)", "diff": ["-public void redrawRange(int start, int length, boolean clearBackground) {\r", "-\tint lineHeight = getLineHeight();\r", "-\tint end = start + length;\r", "-\tint firstLine = content.getLineAtOffset(start);\r", "-\tint lastLine = content.getLineAtOffset(end);\r", "-\tint redrawX;\r", "-\tint redrawY;\r", "-\tint firstLineOffset;\r", "-\tint offsetInFirstLine;\r", "-\tint partialBottomIndex = getPartialBottomIndex();\r", "-\tint partialTopIndex = verticalScrollOffset / lineHeight;\r", "-\tString line;\r", "-\tGC gc = null;\r", "-\t// do nothing if redraw range is completely invisible\t\r", "-\tif (firstLine > partialBottomIndex || lastLine < partialTopIndex) {\r", "-\t\treturn;\r", "-\t}\r", "-\tif (clearBackground == false) {\r", "-\t\tgc = new GC(this);\r", "-\t}\r", "-\t// only redraw visible lines\r", "-\tif (partialTopIndex > firstLine) {\r", "-\t\tfirstLine = partialTopIndex;\r", "-\t\tfirstLineOffset = start = content.getOffsetAtLine(firstLine);\r", "-\t\toffsetInFirstLine = 0;\r", "-\t}\r", "-\telse {\r", "-\t\tfirstLineOffset = content.getOffsetAtLine(firstLine);\r", "-\t\toffsetInFirstLine = start - firstLineOffset;\r", "-\t}\r", "-\tif (partialBottomIndex + 1 < lastLine) {\r", "-\t\tlastLine = partialBottomIndex + 1;\t// + 1 to redraw whole bottom line, including line break\r", "-\t\tend = content.getOffsetAtLine(lastLine);\r", "-\t}\r", "-\t// redraw first line\r", "-\tline = content.getLine(firstLine);\r", "-\t// calculate redraw start location\r", "-\tredrawX = getXAtOffset(line, firstLine, offsetInFirstLine);\r", "-\tredrawY = firstLine * lineHeight - verticalScrollOffset;\t\t\r", "-\t\tredrawStopX = getXAtOffset(line, firstLine, end - firstLineOffset);\r", "-\tdraw(redrawX, redrawY, redrawStopX - redrawX, lineHeight, gc, clearBackground);\r", "-\tfirstLine++;\t\t// first line has been redrawn.\r", "-\r", "-\t// redraw last line if more than line needs redrawing \r", "-\t\tint offsetInLastLine = end - content.getOffsetAtLine(lastLine);\t\r", "-\t\t\tdraw(0, redrawY, redrawStopX, lineHeight, gc, clearBackground);\r", "-\t\tlastLine--;\t\t\t// last line has been redrawn.\r", "-\t}\r", "-\t// redraw entire center lines if redraw range includes more than two lines\r", "-\tif (lastLine >= firstLine) {\r", "-\t\tint redrawStopY = (lastLine + 1) * lineHeight - verticalScrollOffset;\t\t\r", "-\t\tredrawY = firstLine * lineHeight - verticalScrollOffset;\t\t\t\t\r", "-\t\tdraw(0, redrawY, clientArea.width, redrawStopY - redrawY, gc, clearBackground);\r", "-\t}\r", "-\tif (gc != null) {\r", "-\t\tgc.dispose();\r", "+public void redrawRange(int start, int length, boolean clearBackground) {\r", "+\tcheckWidget();\r", "+\tinternalRedrawRange(start, length, clearBackground);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "534e96649709b3c94ae2f309c330fc23", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextRenderer.java", "commitBeforeChange": "f9c3b5973aa314c2c0842a04a410e5cc909a74fe", "commitAfterChange": "4e22aa7cc6f558a2b3130ccb8327c63b7cc18d3f", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 26, "signatureBeforeChange": " private int getStyledTextWidth(String text, int textStartOffset, StyleRange[] lineStyles, int paintX, GC gc, FontData fontData)", "signatureAfterChange": " protected abstract int getStyledTextWidth(String text, int textStartOffset, StyleRange[] lineStyles, int paintX, GC gc);", "diff": ["-private int getStyledTextWidth(String text, int textStartOffset, StyleRange[] lineStyles, int paintX, GC gc, FontData fontData) {", "-\tString textSegment;", "-\tint textLength = text.length();", "-\tint textIndex = 0;", "-", "-\tfor (int styleIndex = 0; styleIndex < lineStyles.length; styleIndex++) {", "-\t\tStyleRange style = lineStyles[styleIndex];", "-\t\tint textEnd;", "-\t\tint styleSegmentStart = style.start - textStartOffset;", "-\t\tif (styleSegmentStart + style.length < 0) {", "-\t\t\tcontinue;", "-\t\t}", "-\t\tif (styleSegmentStart >= textLength) {", "-\t\t\tbreak;", "-\t\t}", "-\t\t// is there a style for the current string position?", "-\t\tif (textIndex < styleSegmentStart) {", "-\t\t\tsetLineFont(gc, fontData, SWT.NORMAL);", "-\t\t\ttextSegment = text.substring(textIndex, styleSegmentStart);", "-\t\t\tpaintX += gc.stringExtent(textSegment).x;", "-\t\t\ttextIndex = styleSegmentStart;", "-\t\t}", "-\t\ttextEnd = Math.min(textLength, styleSegmentStart + style.length);", "-\t\tsetLineFont(gc, fontData, style.fontStyle);", "-\t\ttextSegment = text.substring(textIndex, textEnd);", "-\t\tpaintX += gc.stringExtent(textSegment).x;", "-\t\ttextIndex = textEnd;", "-\t}", "-\t// is there unmeasured and unstyled text?", "-\tif (textIndex < textLength) {", "-\t\tsetLineFont(gc, fontData, SWT.NORMAL);", "-\t\ttextSegment = text.substring(textIndex, textLength);", "-\t\tpaintX += gc.stringExtent(textSegment).x;", "-\t}", "-\treturn paintX;", "-}", "+protected abstract int getStyledTextWidth(String text, int textStartOffset, StyleRange[] lineStyles, int paintX, GC gc);"]}], "num": 23408}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0f5113234495e629573a18f54ba2c99c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e0d6ccd66c3a169899cdd253cd07280", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "71e082670a2e587e99ba9f0683312b9a404c65b8", "commitAfterChange": "2c2409b91eac452fa03efa9c9e69da66618d6519", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["-\t* Feature in Windows.  When a tree item is", "-\t* reselected, Windows does not issue a WM_NOTIFY.", "-\t* This is inconsistent with the list widget and", "-\t* other widgets in Windows.  The fix is to detect", "-\t* the case when an item is reselected and issue", "-\t* the notification.  The first part of this work", "-\t* around is to ensure that the user has selected", "-\t* an item.", "+\t* In a multi-select tree, if the user is collapsing a subtree that", "+\t* contains selected items, clear the selection from these items and", "+\t* issue a selection event.  Only items that are selected and visible", "+\t* are cleared.  This code also runs in the case when no item is selected.", "-\tif (lpht.hItem == 0 || (lpht.flags & OS.TVHT_ONITEM) == 0) {", "+\tif (lpht.hItem == 0 || (lpht.flags & OS.TVHT_ONITEMBUTTON) != 0) {", "-\t\t/*", "-\t\t* In a multi-select tree, if the user is collapsing a subtree that", "-\t\t* contains selected items, clear the selection from these items and", "-\t\t* issue a selection event.  Only items that are selected and visible", "-\t\t* are cleared.", "-\t\t*/", "-\t\tif ((style & SWT.MULTI) != 0) {", "-\t\t\tif (lpht.hItem != 0 && (lpht.flags & OS.TVHT_ONITEMBUTTON) != 0) {", "-\t\t\t\tint hSelection = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "-\t\t\t\tif (hSelection != 0) {", "-\t\t\t\t\tTVITEM tvItem = new TVITEM ();", "-\t\t\t\t\ttvItem.mask = OS.TVIF_STATE | OS.TVIF_PARAM;", "-\t\t\t\t\ttvItem.hItem = lpht.hItem;", "-\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "-\t\t\t\t\tif ((tvItem.state & OS.TVIS_EXPANDED) != 0) {", "-\t\t\t\t\t\tfixSelection = true;", "-\t\t\t\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;", "-\t\t\t\t\t\tint hParent = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_PARENT, lpht.hItem);", "-\t\t\t\t\t\tint hLast = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, lpht.hItem);", "-\t\t\t\t\t\tint hNext = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, lpht.hItem);", "-\t\t\t\t\t\twhile (hNext != 0 && hNext != hLast) {", "-\t\t\t\t\t\t\ttvItem.hItem = hNext;", "-\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "-\t\t\t\t\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) != 0) deselected = true;", "-\t\t\t\t\t\t\ttvItem.state = 0;", "-\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);", "-\t\t\t\t\t\t\tif ((hNext = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, hNext)) == 0) break;", "-\t\t\t\t\t\t\tif (hParent == OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_PARENT, hNext)) break;", "-\t\t\t\t\t\t}", "+\t\tif (lpht.hItem != 0 && (style & SWT.MULTI) != 0) {", "+\t\t\tint hSelection = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "+\t\t\tif (hSelection != 0) {", "+\t\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\t\ttvItem.mask = OS.TVIF_STATE | OS.TVIF_PARAM;", "+\t\t\t\ttvItem.hItem = lpht.hItem;", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "+\t\t\t\tif ((tvItem.state & OS.TVIS_EXPANDED) != 0) {", "+\t\t\t\t\tfixSelection = true;", "+\t\t\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;", "+\t\t\t\t\tint hParent = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_PARENT, lpht.hItem);", "+\t\t\t\t\tint hLast = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, lpht.hItem);", "+\t\t\t\t\tint hNext = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, lpht.hItem);", "+\t\t\t\t\twhile (hNext != 0 && hNext != hLast) {", "+\t\t\t\t\t\ttvItem.hItem = hNext;", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "+\t\t\t\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) != 0) deselected = true;", "+\t\t\t\t\t\ttvItem.state = 0;", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);", "+\t\t\t\t\t\tif ((hNext = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, hNext)) == 0) break;", "+\t\t\t\t\t\tif (hParent == OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_PARENT, hNext)) break;", "+\t/*", "+\t* Determine whether the full line should be selected.", "+\t* Note that mouse selection for a tree with columns", "+\t* does not currently use TVS_FULLROWSELECT to do the", "+\t* selection because it does not draw properly.", "+\t*/", "+\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "+\t\t\tOS.SendMessage (handle, OS.TVM_SELECTITEM, OS.TVGN_CARET, lpht.hItem);", "+\t\t}", "+\t}", "-\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect1);", "-\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect2);", "+\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\t\t\tint fItemRect = (bits & OS.TVS_FULLROWSELECT) != 0 ? 0 : 1;", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, fItemRect, rect1);", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, fItemRect, rect2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7ae2ad6abd1548eca74a43780d0be86", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "b8b3d8d333270c82331f79c34684ac5101f04bf4", "commitAfterChange": "f5441d1714ca7f50c8c942b97ca2567450f3ceff", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 58, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\t\t\t* Feature on Windows.  When a new tree item is inserted", "+\t\t\t\t\t* Feature in Windows.  When a new tree item is inserted", "-\t\t\tif (hooks (SWT.DefaultSelection)) {", "-\t\t\t\treturn LRESULT.ONE;", "-\t\t\t}", "+\t\t\tif (hooks (SWT.DefaultSelection)) return LRESULT.ONE;", "+\t\t\tif ((style & SWT.MULTI) != 0) {", "+\t\t\t\tif (lockSelection) {", "+\t\t\t\t\t/* Restore the old selection state of both items */", "+\t\t\t\t\tif (oldSelected) {", "+\t\t\t\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\t\t\t\tint offset = NMHDR.sizeof + 4;", "+\t\t\t\t\t\tOS.MoveMemory (tvItem, lParam + offset, TVITEM.sizeof);", "+\t\t\t\t\t\ttvItem.mask = OS.TVIF_STATE;", "+\t\t\t\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;", "+\t\t\t\t\t\ttvItem.state = OS.TVIS_SELECTED;", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (!newSelected && ignoreSelect) {", "+\t\t\t\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\t\t\t\tint offset = NMHDR.sizeof + 4 + TVITEM.sizeof;", "+\t\t\t\t\t\tOS.MoveMemory (tvItem, lParam + offset, TVITEM.sizeof);", "+\t\t\t\t\t\ttvItem.mask = OS.TVIF_STATE;", "+\t\t\t\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;", "+\t\t\t\t\t\ttvItem.state = 0;", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif ((style & SWT.MULTI) != 0) {", "+\t\t\t\tif (lockSelection) {", "+\t\t\t\t\t/* Save the old selection state for both items */", "+\t\t\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\t\t\tint offset1 = NMHDR.sizeof + 4;", "+\t\t\t\t\tOS.MoveMemory (tvItem, lParam + offset1, TVITEM.sizeof);", "+\t\t\t\t\toldSelected = (tvItem.state & OS.TVIS_SELECTED) != 0;", "+\t\t\t\t\tint offset2 = NMHDR.sizeof + 4 + TVITEM.sizeof;", "+\t\t\t\t\tOS.MoveMemory (tvItem, lParam + offset2, TVITEM.sizeof);", "+\t\t\t\t\tnewSelected = (tvItem.state & OS.TVIS_SELECTED) != 0;", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t\tint [] action = new int [1];", "-\t\t\t\tOS.MoveMemory (action, lParam + NMHDR.sizeof, 4);", "-\t\t\t\t* Feature on Windows.  In some cases, TVM_ITEMEXPANDING", "+\t\t\t\t* Feature in Windows.  In some cases, TVM_ITEMEXPANDING", "+\t\t\t\tint [] action = new int [1];", "+\t\t\t\tOS.MoveMemory (action, lParam + NMHDR.sizeof, 4);", "-\t\t\t* Feature on Pocket PC.  The tree and table controls detect the tap", "+\t\t\t* Feature in Pocket PC.  The tree and table controls detect the tap"]}], "num": 45759}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cecf469c5cf10ae111a66852d4795da2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5367bd97e3260a6f7c432ff99c606902", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/DirectoryDialog.java", "commitBeforeChange": "00d380d8afe6cdf3418db077938169eb2149ff89", "commitAfterChange": "81b0820b14e5ac2abe1fc2bae3347a5c29ba0b51", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public String open ()", "signatureAfterChange": " public String open ()", "diff": ["-//\tif (OS.IsWinCE) SWT.error (SWT.ERROR_NOT_IMPLEMENTED);", "-//\t", "-//\tint hHeap = OS.GetProcessHeap ();", "-//\t", "-//\t/* Get the owner HWND for the dialog */", "-//\tint hwndOwner = 0;", "-//\tif (parent != null) hwndOwner = parent.handle;", "-//", "-//\t/* Copy the message to OS memory */", "-//\tint lpszTitle = 0;", "-//\tif (message.length () != 0) {", "-//\t\tString string = message;", "-//\t\tif (string.indexOf ('&') != -1) {", "-//\t\t\tint length = string.length ();", "-//\t\t\tchar [] buffer = new char [length * 2];", "-//\t\t\tint index = 0;", "-//\t\t\tfor (int i=0; i<length; i++) {", "-//\t\t\t\tchar ch = string.charAt (i);", "-//\t\t\t\tif (ch == '&') buffer [index++] = '&';", "-//\t\t\t\tbuffer [index++] = ch;", "-//\t\t\t}", "-//\t\t\tstring = new String (buffer, 0, index);", "-//\t\t}", "-//\t\t/* Use the character encoding for the default locale */", "-//\t\tTCHAR buffer = new TCHAR (0, string, true);", "-//\t\tint byteCount = buffer.length () * TCHAR.sizeof;", "-//\t\tlpszTitle = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, byteCount);", "-//\t\tOS.MoveMemory (lpszTitle, buffer, byteCount);", "-//\t}", "-//", "-//\t/* Create the BrowseCallbackProc */", "-//\tCallback callback = new Callback (this, \"BrowseCallbackProc\", 4); //$NON-NLS-1$", "-//\tint address = callback.getAddress ();", "-//\tif (address == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);", "-//\t", "-//\t/* Make the parent shell be temporary modal */", "-//\tShell oldModal = null;", "-//\tDisplay display = parent.getDisplay ();", "-//\tif ((style & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "-//\t\toldModal = display.getModalDialogShell ();", "-//\t\tdisplay.setModalDialogShell (parent);", "-//\t}", "-//\t", "-//\tdirectoryPath = null;", "-//\tBROWSEINFO lpbi = new BROWSEINFO ();", "-//\tlpbi.hwndOwner = hwndOwner;", "-//\tlpbi.lpszTitle = lpszTitle;", "-//\tlpbi.ulFlags = OS.BIF_NEWDIALOGSTYLE | OS.BIF_RETURNONLYFSDIRS | OS.BIF_EDITBOX | OS.BIF_VALIDATE;", "-//\tlpbi.lpfn = address;", "-//\t/*", "-//\t* Bug in Windows.  On some hardware configurations, SHBrowseForFolder()", "-//\t* causes warning dialogs with the message \"There is no disk in the drive", "-//\t* Please insert a disk into \\Device\\Harddisk0\\DR0\".  This is possibly", "-//\t* caused by SHBrowseForFolder() calling internally GetVolumeInformation().", "-//\t* MSDN for GetVolumeInformation() says:", "-//\t* ", "-//\t* \"If you are attempting to obtain information about a floppy drive", "-//\t* that does not have a floppy disk or a CD-ROM drive that does not ", "-//\t* have a compact disc, the system displays a message box asking the ", "-//\t* user to insert a floppy disk or a compact disc, respectively. ", "-//\t* To prevent the system from displaying this message box, call the ", "-//\t* SetErrorMode function with SEM_FAILCRITICALERRORS.\"", "-//\t* ", "-//\t* The fix is to save and restore the error mode using SetErrorMode()", "-//\t* with the SEM_FAILCRITICALERRORS flag around SHBrowseForFolder().", "-//\t*/", "-//\tint oldErrorMode = OS.SetErrorMode (OS.SEM_FAILCRITICALERRORS);", "-//\t", "-//\t/*", "-//\t* Bug in Windows.  When a WH_MSGFILTER hook is used to run code", "-//\t* during the message loop for SHBrowseForFolder(), running code", "-//\t* in the hook can cause a GP.  Specifically, SetWindowText()", "-//\t* for static controls seemed to make the problem happen.", "-//\t* The fix is to disable async messages while the directory", "-//\t* dialog is open.", "-//\t* ", "-//\t* NOTE:  This only happens in versions of the comctl32.dll", "-//\t* earlier than 6.0.", "-//\t*/", "-//\tboolean oldRunMessages = display.runMessages;", "-//\tif (OS.COMCTL32_MAJOR < 6) display.runMessages = false;", "-//\tint lpItemIdList = OS.SHBrowseForFolder (lpbi);", "-//\tif (OS.COMCTL32_MAJOR < 6) display.runMessages = oldRunMessages;", "-//\tOS.SetErrorMode (oldErrorMode);", "-//\t", "-//\t/* Clear the temporary dialog modal parent */", "-//\tif ((style & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "-//\t\tdisplay.setModalDialogShell (oldModal);", "-//\t}", "-//\t", "-//\tboolean success = lpItemIdList != 0;", "-//\tif (success) {", "-//\t\t/* Use the character encoding for the default locale */", "-//\t\tTCHAR buffer = new TCHAR (0, OS.MAX_PATH);", "-//\t\tif (OS.SHGetPathFromIDList (lpItemIdList, buffer)) {", "-//\t\t\tdirectoryPath = buffer.toString (0, buffer.strlen ());", "-//\t\t\tfilterPath = directoryPath;", "-//\t\t}", "-//\t}", "-//", "-//\t/* Free the BrowseCallbackProc */", "-//\tcallback.dispose ();", "-//\t", "-//\t/* Free the OS memory */", "-//\tif (lpszTitle != 0) OS.HeapFree (hHeap, 0, lpszTitle);", "-//", "-//\t/* Free the pointer to the ITEMIDLIST */", "-//\tint [] ppMalloc = new int [1];", "-//\tif (OS.SHGetMalloc (ppMalloc) == OS.S_OK) {", "-//\t\t/* void Free (struct IMalloc *this, void *pv); */", "-//\t\tOS.VtblCall (5, ppMalloc [0], lpItemIdList);", "-//\t}", "-//\t", "-//\t/*", "-//\t* This code is intentionally commented.  On some", "-//\t* platforms, the owner window is repainted right", "-//\t* away when a dialog window exits.  This behavior", "-//\t* is currently unspecified.", "-//\t*/", "-////\tif (hwndOwner != 0) OS.UpdateWindow (hwndOwner);", "-//\t", "-//\t/* Return the directory path */", "-//\tif (!success) return null;", "-//\treturn directoryPath;", "-\treturn null;", "+\tint dialog = OS.gcnew_FolderBrowserDialog ();", "+\tif (dialog == 0) error (SWT.ERROR_NO_HANDLES);", "+\tint length = message.length ();", "+\tchar [] buffer = new char [length + 1];", "+\tmessage.getChars (0, length, buffer, 0);", "+\tint messagePtr = OS.gcnew_String (buffer);", "+\tif (messagePtr == 0) error (SWT.ERROR_NO_HANDLES);", "+\tOS.FolderBrowserDialog_Description (dialog, messagePtr);", "+\tOS.GCHandle_Free (messagePtr);", "+\t//TODO: filter path...", "+\tint result = OS.FormsCommonDialog_ShowDialog (dialog);", "+\tString directoryPath = null;", "+\tif (result == OS.DialogResult_OK) {", "+\t\tint ptr = OS.FolderBrowserDialog_SelectedPath (dialog);", "+\t\tint charArray = OS.String_ToCharArray (ptr);", "+\t\tchar[] chars = new char[OS.String_Length (ptr)];", "+\t\tOS.memcpy (chars, charArray, chars.length * 2);", "+\t\tOS.GCHandle_Free (charArray);", "+\t\tOS.GCHandle_Free (ptr);", "+\t\tdirectoryPath = new String (chars);", "+\t}", "+\tOS.GCHandle_Free (dialog);", "+\treturn directoryPath;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b545c260fbde65822be457666b0b5502", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "26615d151623308bd52afc83b930f16926d42d34", "commitAfterChange": "81c0d6a9ea3d94ab81d4b84017e9c471a6ec66f8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public FontData open ()", "signatureAfterChange": " public FontData open ()", "diff": ["-//\tif (OS.IsWinCE) SWT.error (SWT.ERROR_NOT_IMPLEMENTED);", "-//\t", "-//\t/* Get the owner HWND for the dialog */", "-//\tint hwndOwner = 0;", "-//\tif (parent != null) hwndOwner = parent.handle;", "-//", "-//\t/* Open the dialog */", "-//\tint hHeap = OS.GetProcessHeap ();", "-//\tCHOOSEFONT lpcf = new CHOOSEFONT ();", "-//\tlpcf.lStructSize = CHOOSEFONT.sizeof;", "-//\tlpcf.hwndOwner = hwndOwner;", "-//\tlpcf.Flags = OS.CF_SCREENFONTS | OS.CF_EFFECTS;", "-//\tint lpLogFont = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, LOGFONT.sizeof);", "-//\tif (fontData != null && fontData.data != null) {", "-//\t\tLOGFONT logFont = fontData.data;", "-//\t\tint lfHeight = logFont.lfHeight;", "-//\t\tint hDC = OS.GetDC (0);", "-//\t\tint pixels = -Compatibility.round (fontData.height * OS.GetDeviceCaps(hDC, OS.LOGPIXELSY), 72);", "-//\t\tOS.ReleaseDC (0, hDC);", "-//\t\tlogFont.lfHeight = pixels;", "-//\t\tlpcf.Flags |= OS.CF_INITTOLOGFONTSTRUCT;", "-//\t\tOS.MoveMemory (lpLogFont, logFont, LOGFONT.sizeof);", "-//\t\tlogFont.lfHeight = lfHeight;", "-//\t}", "-//\tlpcf.lpLogFont = lpLogFont;", "-//\tif (rgb != null) {", "-//\t\tint red = rgb.red & 0xFF;", "-//\t\tint green = (rgb.green << 8) & 0xFF00;", "-//\t\tint blue = (rgb.blue << 16) & 0xFF0000;", "-//\t\tlpcf.rgbColors = red | green | blue;", "-//\t}", "-//\t", "-//\t/* Make the parent shell be temporary modal */", "-//\tShell oldModal = null;", "-//\tDisplay display = null;", "-//\tif ((style & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "-//\t\tdisplay = parent.getDisplay ();", "-//\t\toldModal = display.getModalDialogShell ();", "-//\t\tdisplay.setModalDialogShell (parent);", "-//\t}", "-//", "-//\t/* Open the dialog */", "-//\tboolean success = OS.ChooseFont (lpcf);", "-//\t", "-//\t/* Clear the temporary dialog modal parent */", "-//\tif ((style & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "-//\t\tdisplay.setModalDialogShell (oldModal);", "-//\t}", "-//\t", "-//\t/* Compute the result */", "-//\tif (success) {", "-//\t\tLOGFONT logFont = OS.IsUnicode ? (LOGFONT) new LOGFONTW () : new LOGFONTA ();", "-//\t\tOS.MoveMemory (logFont, lpLogFont, LOGFONT.sizeof);", "-//", "-//\t\t/*", "-//\t\t * This will not work on multiple screens or", "-//\t\t * for printing. Should use DC for the proper device.", "-//\t\t */", "-//\t\tint hDC = OS.GetDC(0);", "-//\t\tint logPixelsY = OS.GetDeviceCaps(hDC, OS.LOGPIXELSY);", "-//\t\tint pixels = 0; ", "-//\t\tif (logFont.lfHeight > 0) {", "-//\t\t\t/*", "-//\t\t\t * Feature in Windows. If the lfHeight of the LOGFONT structure", "-//\t\t\t * is positive, the lfHeight measures the height of the entire", "-//\t\t\t * cell, including internal leading, in logical units. Since the", "-//\t\t\t * height of a font in points does not include the internal leading,", "-//\t\t\t * we must subtract the internal leading, which requires a TEXTMETRIC,", "-//\t\t\t * which in turn requires font creation.", "-//\t\t\t */", "-//\t\t\tint hFont = OS.CreateFontIndirect(logFont);", "-//\t\t\tint oldFont = OS.SelectObject(hDC, hFont);", "-//\t\t\tTEXTMETRIC lptm = OS.IsUnicode ? (TEXTMETRIC) new TEXTMETRICW () : new TEXTMETRICA ();", "-//\t\t\tOS.GetTextMetrics(hDC, lptm);", "-//\t\t\tOS.SelectObject(hDC, oldFont);", "-//\t\t\tOS.DeleteObject(hFont);", "-//\t\t\tpixels = logFont.lfHeight - lptm.tmInternalLeading;", "-//\t\t} else {", "-//\t\t\tpixels = -logFont.lfHeight;", "-//\t\t}", "-//\t\tOS.ReleaseDC(0, hDC);", "-//", "-//\t\tint points = Compatibility.round(pixels * 72, logPixelsY);", "-//\t\tfontData = FontData.win32_new (logFont, points);", "-//\t\tint red = lpcf.rgbColors & 0xFF;", "-//\t\tint green = (lpcf.rgbColors >> 8) & 0xFF;", "-//\t\tint blue = (lpcf.rgbColors >> 16) & 0xFF;", "-//\t\trgb = new RGB (red, green, blue);", "-//\t}", "-//\t\t", "-//\t/* Free the OS memory */", "-//\tif (lpLogFont != 0) OS.HeapFree (hHeap, 0, lpLogFont);", "-//", "-//\t/*", "-//\t* This code is intentionally commented.  On some", "-//\t* platforms, the owner window is repainted right", "-//\t* away when a dialog window exits.  This behavior", "-//\t* is currently unspecified.", "-//\t*/", "-////\tif (hwndOwner != 0) OS.UpdateWindow (hwndOwner);", "-//\t", "-//\tif (!success) return null;", "-//\treturn fontData;", "-\treturn null;", "+\tint dialog = OS.gcnew_FontDialog ();", "+\tOS.FontDialog_ShowColor  (dialog, true);", "+\tif (fontData != null) {", "+\t\tint fontFamily = parent.createDotNetString (fontData.fontFamily, false);", "+\t\tint fontStyle = 0;", "+\t\tint fontWeight = OS.FontWeight_ToOpenTypeWeight (OS.FontWeights_Bold);", "+\t\tif (fontWeight == fontData.weight) fontStyle |= OS.FontStyle_Bold;", "+\t\tif (fontData.style == OS.FontStyles_Italic) fontStyle |= OS.FontStyle_Italic;", "+\t\tif (fontData.style == OS.FontStyles_Normal) fontStyle |= OS.FontStyle_Regular;", "+\t\t//TODO strikethrough/underline", "+\t\tint font = OS.gcnew_Font (fontFamily, fontData.height, fontStyle);", "+\t\tOS.FontDialog_Font (dialog, font);", "+\t\tOS.GCHandle_Free (font);", "+\t\tOS.GCHandle_Free (fontFamily);", "+\t}", "+\tif (rgb != null) {", "+\t\tint color = OS.DrawingColor_FromArgb (174, rgb.red, rgb.blue, rgb.green);", "+\t\tOS.FontDialog_Color (dialog, color);", "+\t\tOS.GCHandle_Free (color);", "+\t}", "+\tint result = OS.FormsCommonDialog_ShowDialog (dialog);", "+\tboolean success = result == OS.DialogResult_OK; ", "+\tif (success) {", "+\t\tint font = OS.FontDialog_Font (dialog);", "+\t\tint fontFamilyPtr = OS.Font_FontFamily (font);", "+\t\tint fontFamilyName = OS.DrawingFontFamily_Name (fontFamilyPtr);", "+\t\tString fontFamily = Widget.createJavaString (fontFamilyName);", "+\t\tint fontStyle = OS.Font_Style (font);", "+\t\tint fontDataStyle;", "+\t\tif ((fontStyle & OS.FontStyle_Italic) != 0) {", "+\t\t\tfontDataStyle = OS.FontStyles_Italic;", "+\t\t} else {", "+\t\t\tfontDataStyle = OS.FontStyles_Normal;", "+\t\t}", "+\t\tint weight; ", "+\t\tif ((fontStyle & OS.FontStyle_Bold) != 0) {", "+\t\t\tweight = OS.FontWeight_ToOpenTypeWeight (OS.FontWeights_Bold);", "+\t\t} else {", "+\t\t\tweight = OS.FontWeight_ToOpenTypeWeight (OS.FontWeights_Normal);", "+\t\t}", "+\t\tint height = OS.Font_Size (font);", "+\t\tOS.GCHandle_Free(fontFamilyName);", "+\t\tOS.GCHandle_Free(fontFamilyPtr);", "+\t\tOS.GCHandle_Free(font);", "+\t\tfontData = FontData.wpf_new (fontFamily, fontDataStyle, weight, 1, height);", "+\t\t\t\t", "+\t\tint color = OS.FontDialog_Color (dialog);", "+\t\tint argb = OS.DrawingColor_ToArgb (color);\t", "+\t\tint red = (argb & 0xFF0000) >> 16;", "+\t\tint green = (argb & 0xFF00) >> 8;", "+\t\tint blue = argb & 0xFF;", "+\t\tOS.GCHandle_Free (color);", "+\t\trgb = new RGB (red, green, blue);", "+\t}", "+\tOS.GCHandle_Free (dialog);", "+\treturn success ? fontData : null;"]}], "num": 10730}
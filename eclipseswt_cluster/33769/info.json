{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "03e58a2b290273be83bf75ea6719070b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3bc7bab8f4fb99a315adf9d187202618", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "5c71c160828b856065885beff06af81ccfac684f", "commitAfterChange": "1692fbe72737d57ce7a28edd69b8de45d624b6dc", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  LRESULT WM_SIZE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_SIZE (int wParam, int lParam)", "diff": ["+\t/*", "+\t* Bug in Windows.  The code in Windows that determines", "+\t* when tool items should wrap seems to use the window", "+\t* bounds rather than the client area.  Unfortunately,", "+\t* tool bars with the style TBSTYLE_EX_HIDECLIPPEDBUTTONS", "+\t* use the client area.  This means that buttons which", "+\t* overlap the border are hidden before they are wrapped.", "+\t* The fix is to compute TBSTYLE_EX_HIDECLIPPEDBUTTONS", "+\t* and set it each time the tool bar is resized.", "+\t*/", "+\tif ((style & SWT.BORDER) != 0 && (style & SWT.WRAP) != 0) {", "+\t\tRECT windowRect = new RECT ();", "+\t\tOS.GetWindowRect (handle, windowRect);", "+\t\tint index = 0, border = getBorderWidth () * 2; ", "+\t\tRECT rect = new RECT ();", "+\t\tint count = OS.SendMessage (handle, OS.TB_BUTTONCOUNT, 0, 0);", "+\t\twhile (index < count) {", "+\t\t\tOS.SendMessage (handle, OS.TB_GETITEMRECT, index, rect);", "+\t\t\tOS.MapWindowPoints (handle, 0, rect, 2);", "+\t\t\tif (rect.right > windowRect.right - border * 2) break;", "+\t\t\tindex++;", "+\t\t}", "+\t\tint bits = OS.SendMessage (handle, OS.TB_GETEXTENDEDSTYLE, 0, 0);", "+\t\tif (index == count) {", "+\t\t\tbits |= OS.TBSTYLE_EX_HIDECLIPPEDBUTTONS;", "+\t\t} else {", "+\t\t\tbits &= ~OS.TBSTYLE_EX_HIDECLIPPEDBUTTONS;", "+\t\t}", "+\t\tOS.SendMessage (handle, OS.TB_SETEXTENDEDSTYLE, 0, bits);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83508718e45c0c67f37b1c28ddb15ad4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "4cde7dce4a62a12afca75bf893246ddd59f51b9e", "commitAfterChange": "cd01d8c794d2ee57cc20eae684610126923df1d8", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  void setBounds (int x, int y, int width, int height, int flags)", "signatureAfterChange": "  void setBounds (int x, int y, int width, int height, int flags)", "diff": ["-\t}\t", "+\t}", "+\t", "+\t/*", "+\t* Bug in Windows. If the client area height is smaller than ", "+\t* the font height, then the multi-line text widget does not", "+\t* update the formatting rectangle when resized. The fix is to", "+\t* detect this case and explicitly set the formatting rectangle.", "+\t*/", "+\tif ((flags & OS.SWP_NOSIZE) == 0) {", "+\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\tif ((bits & OS.ES_MULTILINE) != 0) {", "+\t\t\tint /*long*/ newFont, oldFont = 0;", "+\t\t\tint /*long*/ hDC = OS.GetDC (handle);", "+\t\t\tnewFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "+\t\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "+\t\t\tTEXTMETRIC tm = OS.IsUnicode ? (TEXTMETRIC) new TEXTMETRICW () : new TEXTMETRICA ();", "+\t\t\tOS.GetTextMetrics (hDC, tm);", "+\t\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "+\t\t\tOS.ReleaseDC (handle, hDC);", "+\t\t\tRECT rect = new RECT();", "+\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\tif ((rect.bottom - rect.top) < tm.tmHeight) {", "+\t\t\t\tint /*long*/ margins = OS.SendMessage (handle, OS.EM_GETMARGINS, 0, 0);", "+\t\t\t\trect.left += OS.LOWORD (margins);", "+\t\t\t\trect.right -= OS.HIWORD (margins);", "+\t\t\t\trect.top = 0;", "+\t\t\t\trect.bottom = tm.tmHeight;", "+\t\t\t\tOS.SendMessage (handle, OS.EM_SETRECT, 0, rect);", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 33769}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6390977bd1b352fe05032a4ebb980585", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab514b0ecd4534d2d539fe1d8d7e8a6c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "153dc58747616ee30d16c5df09dda3c5f38b9e98", "commitAfterChange": "365ae4763f41efd9f24a353e52413886733dcdb3", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  int itemNotificationProc (int browser, int id, int message)", "signatureAfterChange": "  int itemNotificationProc (int browser, int id, int message)", "diff": ["-\t\tcase OS.kDataBrowserUserToggledContainer: {", "-\t\t\twasToggled = true;", "-\t\t\tint [] state = new int [1];", "-\t\t\tEvent event = new Event ();", "-\t\t\tevent.item = item;", "-\t\t\tOS.GetDataBrowserItemState (handle, id, state);", "-\t\t\tif ((state [0] & OS.kDataBrowserContainerIsOpen) != 0) {", "-\t\t\t\tsendEvent (SWT.Collapse, event);", "-\t\t\t} else {", "-\t\t\t\tsendEvent (SWT.Expand, event);", "-\t\t\t}", "-\t\t\tbreak;", "-\t\t}", "+\t\t\twasToggled = true;", "+\t\t\tif (!ignoreToggled) {", "+\t\t\t\tEvent event = new Event ();", "+\t\t\t\tevent.item = item;", "+\t\t\t\tsendEvent (SWT.Collapse, event);", "+\t\t\t}", "+\t\t\twasToggled = true;", "+\t\t\tif (!ignoreToggled) {", "+\t\t\t\tEvent event = new Event ();", "+\t\t\t\tevent.item = item;", "+\t\t\t\ttry {", "+\t\t\t\t\titem.state |= EXPANDING;", "+\t\t\t\t\tsendEvent (SWT.Expand, event);", "+\t\t\t\t} finally {", "+\t\t\t\t\titem.state &= ~EXPANDING;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f52c6ce4fe63ec06c52db87de8d517d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "5ec019025250a666d7ee69d99aa3d3c4e05e7317", "commitAfterChange": "d758ff603766d7abc7a9cca73d1b2fe834948150", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  int commandProc (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int commandProc (int nextHandler, int theEvent, int userData)", "diff": ["-\t\t\t\t\t\tint [] outCommandID = new int [1];", "-\t\t\t\t\t\tshort menuIndex = command.menu_menuItemIndex;", "-\t\t\t\t\t\tOS.GetMenuItemCommandID (menuRef, menuIndex, outCommandID);", "-\t\t\t\t\t\tMenuItem item = findMenuItem (outCommandID [0]);", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t* Feature in the Macintosh.  When a menu item is selected by the", "+\t\t\t\t\t\t* user, the Macintosh sends kEventMenuOpening, remembers the index", "+\t\t\t\t\t\t* of the item the user selected, sends kEventMenuClosed and then", "+\t\t\t\t\t\t* sends kEventProcessCommand.  If application code modifies the menu", "+\t\t\t\t\t\t* inside of kEventMenuClosed by adding or removing items, the index", "+\t\t\t\t\t\t* of the item that the user selected is invalid.  The fix is to detect", "+\t\t\t\t\t\t* that a menu has been modified during kEventMenuClosed and use the", "+\t\t\t\t\t\t* last target item remembered kEventMenuTargetItem.", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tMenuItem item = null;", "+\t\t\t\t\t\tif (menu.closed && menu.modified) {", "+\t\t\t\t\t\t\titem = menu.lastTarget;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\titem = findMenuItem (command.commandID);", "+\t\t\t\t\t\t}", "-\t\t\t\t\t\t} ", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96c9bc9757f04c3da319bc375e1ac995", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "3d9c2cb2520654c5b26b0b0cfee3576c14bbb71b", "commitAfterChange": "a2be781b6dd32de4e7e15ba616b1cc49fdc50683", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": " public boolean loadFont (String path)", "signatureAfterChange": " public boolean loadFont (String path)", "diff": ["-\tint length = path.length ();", "-\tchar[] buffer = new char [length + 1];", "-\tpath.getChars (0, length, buffer, 0);", "-\treturn OS.AddFontResourceExW (buffer, OS.FR_PRIVATE, 0) != 0;", "+\tif (OS.IsWinNT && OS.WIN32_VERSION >= OS.VERSION (4, 10)) {", "+\t\tTCHAR lpszFilename = new TCHAR (0, path, true);", "+\t\treturn OS.AddFontResourceEx (lpszFilename, OS.FR_PRIVATE, 0) != 0;", "+\t}", "+\treturn false;"]}], "num": 21135}
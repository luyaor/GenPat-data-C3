{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "33f644d0b29325c62d0691343c32667f", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11ff09b6d3a0111e522f1d7fce297d48", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "3dcdb69260a8d0386d7bd3821e11a38117c3042c", "commitAfterChange": "603a45f7eb3ac6d507869451321a13384caeb656", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  int _getOffset (int offset, int movement, boolean forward)", "signatureAfterChange": "  int _getOffset (int offset, int movement, boolean forward)", "diff": ["-\t\t\tlength = translateOffset(length);", "-\t\t\tNSRange range = textStorage.doubleClickAtIndex(length == offset ? length - 1 : offset);", "-\t\t\toffset = (int)/*64*/ (range.location +  range.length);", "+\t\t\tif (forward) {", "+\t\t\t\toffset = (int)/*64*/textStorage.nextWordFromIndex(offset, true);", "+\t\t\t} else {", "+\t\t\t\tlength = translateOffset(length);", "+\t\t\t\tint result = 0;", "+\t\t\t\twhile (result < length) {", "+\t\t\t\t\tint wordEnd = (int)/*64*/textStorage.nextWordFromIndex(result, true);", "+\t\t\t\t\tif (wordEnd >= offset) {", "+\t\t\t\t\t\toffset = result;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tresult = wordEnd;", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\tlength = translateOffset(length);", "-\t\t\tNSRange range = textStorage.doubleClickAtIndex(length == offset ? length - 1 : offset);", "-\t\t\toffset = (int)/*64*/ range.location;", "+\t\t\tif (forward) {", "+\t\t\t\tint result = translateOffset(length);", "+\t\t\t\twhile (result > 0) {", "+\t\t\t\t\tint wordStart = (int)/*64*/textStorage.nextWordFromIndex(result, false);", "+\t\t\t\t\tif (wordStart <= offset) {", "+\t\t\t\t\t\toffset = result;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tresult = wordStart;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\toffset = (int)/*64*/textStorage.nextWordFromIndex(offset, false);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "782515537a755efe6a0a44a38d1645e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "a472b803cedb6af3b18daeca703ee4b14948124c", "commitAfterChange": "7aa83ef547f4724cb7ca6b2dd185190653998e13", "methodNumberBeforeChange": 171, "methodNumberAfterChange": 171, "signatureBeforeChange": "  Control findControl (boolean checkTrim, NSView[] hitView)", "signatureAfterChange": "  Control findControl (boolean checkTrim, NSView[] hitView)", "diff": ["-\tint /*long*/ hitWindowNumber = 0;", "-\t\thitWindowNumber = NSWindow.windowNumberAtPoint(screenLocation, 0);", "-\t} else {", "-\t\tCGPoint cgLocation = new CGPoint();", "-\t\tcgLocation.x = screenLocation.x;", "-\t\tcgLocation.y = getPrimaryFrame().height - screenLocation.y;", "-\t\tint /*long*/ cgLocationPtr = OS.malloc(OS.CGPoint_sizeof());", "-\t\tOS.memmove(cgLocationPtr, cgLocation, OS.CGPoint_sizeof());", "-\t\tint /*long*/ outWindow[] = new int /*long*/ [1];", "-\t\tint /*long*/ err = OS.HIWindowFindAtLocation (cgLocationPtr, 2, -1, 0, outWindow, null, 0);", "-", "-\t\tif (err == OS.noErr) {", "-\t\t\thitWindowNumber = OS.HIWindowGetCGWindowID(outWindow[0]);", "-\t\t}", "-\t}", "-\t", "-\tNSWindow window = application.windowWithWindowNumber(hitWindowNumber);", "-\tif (window != null) {", "-\t\tNSView contentView = window.contentView();", "-\t\tif (contentView != null) contentView = contentView.superview();", "-\t\tif (contentView != null) {", "-\t\t\tNSPoint location = window.convertScreenToBase(screenLocation);", "-\t\t\tview = contentView.hitTest (location);", "-\t\t\tif (view == null && !checkTrim) {", "-\t\t\t\tview = contentView;", "+\t\tint /*long*/ hitWindowNumber = NSWindow.windowNumberAtPoint(screenLocation, 0);", "+\t\tNSWindow window = application.windowWithWindowNumber(hitWindowNumber);", "+\t\tif (window != null) {", "+\t\t\tNSView contentView = window.contentView();", "+\t\t\tif (contentView != null) contentView = contentView.superview();", "+\t\t\tif (contentView != null) {", "+\t\t\t\tNSPoint location = window.convertScreenToBase(screenLocation);", "+\t\t\t\tview = contentView.hitTest (location);", "+\t\t\t\tif (view == null && !checkTrim) {", "+\t\t\t\t\tview = contentView;", "+\t\t\t\t}", "+\t} else {", "+\t\t// Use NSWindowList instead of [NSApplication orderedWindows] because orderedWindows", "+\t\t// skips NSPanels. See bug 321614.", "+\t\tint /*long*/ outCount[] = new int /*long*/ [1];", "+\t\tOS.NSCountWindows(outCount);", "+\t\tint /*long*/ windowIDs[] = new int /*long*/ [(int)outCount[0]];", "+\t\tOS.NSWindowList(outCount[0], windowIDs);", "+", "+\t\tfor (int i = 0, count = windowIDs.length; i < count && view == null; i++) {", "+\t\t\tNSWindow window = application.windowWithWindowNumber(windowIDs[i]);", "+\t\t\t// NSWindowList returns all window numbers for all processes. If the window ", "+\t\t\t// number passed to windowWithWindowNumber returns nil the window doesn't belong to", "+\t\t\t// this process.", "+\t\t\tif (window != null) {", "+\t\t\t\tNSView contentView = window.contentView();", "+\t\t\t\tif (contentView != null) contentView = contentView.superview();", "+\t\t\t\t// TODO: This line is technically wrong -- NSPointInRect doesn't account for transparent parts of the window's", "+\t\t\t\t// structure region.", "+\t\t\t\tif (contentView != null && OS.NSPointInRect(screenLocation, window.frame())) {", "+\t\t\t\t\tNSPoint location = window.convertScreenToBase(screenLocation);", "+\t\t\t\t\tview = contentView.hitTest (location);", "+\t\t\t\t\tif (view == null && !checkTrim) {", "+\t\t\t\t\t\tview = contentView;", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+ \t\t\t}", "+\t\t}"]}], "num": 21241}
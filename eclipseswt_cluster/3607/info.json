{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1340fb06ecde8b7a4e874e3528adb722", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ce1632f39c5285cc56128417221dc6a8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 7, "signatureBeforeChange": " public String open ()", "signatureAfterChange": "  public String open ()", "diff": ["- */", "+\tString fullPath = null;", "+\tfileNames = null;", "+\t\t", "+\tint titlePtr = 0;", "+\tif (title != null) {", "+\t\tchar [] buffer = new char [title.length ()];", "+\t\ttitle.getChars (0, buffer.length, buffer, 0);", "+\t\ttitlePtr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t}", "+\tint fileNamePtr = 0;", "+\tif (fileName != null) {", "+\t\tchar [] buffer = new char [fileName.length ()];", "+\t\tfileName.getChars (0, buffer.length, buffer, 0);", "+\t\tfileNamePtr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);\t\t", "+\t}", "+\t\t", "+\tNavDialogCreationOptions options = new NavDialogCreationOptions ();", "+\toptions.windowTitle = options.clientName = titlePtr;", "+\toptions.parentWindow = OS.GetControlOwner (parent.handle);", "+\toptions.optionFlags = OS.kNavSupportPackages | OS.kNavAllowOpenPackages | OS.kNavAllowInvisibleFiles;", "+\toptions.location_h = -1;", "+\toptions.location_v = -1;", "+\toptions.saveFileName = fileNamePtr;", "-\tint dialog= 0;", "-\tString result= null;", "-\t", "-\tint titleHandle= 0;", "-\ttry {", "-\t\tint parentWindowHandle= 0;", "-\t\tif (parent != null)", "-\t\t\tparentWindowHandle= parent.shellHandle;", "-\t\t", "-\t\ttitleHandle= OS.CFStringCreateWithCharacters(title);", "-", "-\t\tint status= 0;", "-\t\tint flags= 0;", "-\t\tint[] dialogHandle= new int[1];", "-\t\t", "-\t\tif ((style & SWT.SAVE) != 0) {", "-\t\t\tstatus= OS.NavCreatePutFileDialog(flags, titleHandle, parentWindowHandle, dialogHandle,", "-\t\t\t\t\t\t\tMacUtil.OSType(\"TEXT\"), MacUtil.OSType(\"KAHL\"));", "-\t\t} else /* if ((style & SWT.OPEN) != 0) */ {", "-\t\t\tif ((style & SWT.MULTI) != 0)", "-\t\t\t\tflags |= OS.kNavAllowMultipleFiles;", "-\t\t\tstatus= OS.NavCreateGetFileDialog(flags, titleHandle, parentWindowHandle, dialogHandle);", "-\t\t}", "-\t\t", "-\t\tif (status == 0) {", "-\t\t\tdialog= dialogHandle[0];", "-\t\t} else {", "-\t\t\t//System.out.println(\"FileDialog.open: status \" + status);", "-\t\t}", "-\t\t", "-\t\tif (dialog != 0) {", "-\t\t\t//System.out.println(\"FileDialog.open: got dialog\");", "-\t\t", "-\t\t\tif ((style & SWT.SAVE) != 0) {", "-\t\t\t\tint fileNameHandle= 0;", "-\t\t\t\ttry {", "-\t\t\t\t\tfileNameHandle= OS.CFStringCreateWithCharacters(fileNames[0]);", "-\t\t\t\t\tOS.NavDialogSetSaveFileName(dialog, fileNameHandle);", "-\t\t\t\t} finally {", "-\t\t\t\t\tif (fileNameHandle != 0)", "-\t\t\t\t\t\tOS.CFRelease(fileNameHandle);", "+\tint [] outDialog = new int [1];", "+\tif ((style & SWT.SAVE) != 0) {", "+\t\t// NEEDS WORK - filter extensions, start in filter path, allow user", "+\t\t// to select existing files.", "+\t\tOS.NavCreatePutFileDialog (options, 0, 0, 0, 0, outDialog);\t\t", "+\t} else {", "+\t\tif ((style & SWT.MULTI) != 0) options.optionFlags |= OS.kNavAllowMultipleFiles;", "+\t\t// NEEDS WORK - filter extensions, start in filter path, select file name if it exists", "+\t\tOS.NavCreateGetFileDialog(options, 0, 0, 0, 0, 0, outDialog);", "+\t}", "+\tif (outDialog [0] != 0) {", "+\t\tOS.NavDialogRun (outDialog [0]);", "+\t\tint action = OS.NavDialogGetUserAction (outDialog [0]);", "+\t\tswitch (action) {", "+\t\t\tcase OS.kNavUserActionOpen:", "+\t\t\tcase OS.kNavUserActionChoose:\t\t\t\t\t\t\t", "+\t\t\tcase OS.kNavUserActionSaveAs: {", "+\t\t\t\tNavReplyRecord record = new NavReplyRecord ();", "+\t\t\t\tOS.NavDialogGetReply (outDialog [0], record);", "+\t\t\t\tAEDesc selection = new AEDesc ();", "+\t\t\t\tselection.descriptorType = record.selection_descriptorType;", "+\t\t\t\tselection.dataHandle = record.selection_dataHandle;", "+\t\t\t\tint [] count = new int [1];", "+\t\t\t\tOS.AECountItems (selection, count);", "+\t\t\t\tif (count [0] > 0) {", "+\t\t\t\t\tfileNames = new String [count [0]];", "+\t\t\t\t\tint maximumSize = 80; // size of FSRef", "+\t\t\t\t\tint dataPtr = OS.NewPtr (maximumSize);", "+\t\t\t\t\tint[] aeKeyword = new int [1];", "+\t\t\t\t\tint[] typeCode = new int [1];", "+\t\t\t\t\tint[] actualSize = new int [1];", "+\t\t\t\t\tint pathString = 0;", "+\t\t\t\t\tint fullString = 0;", "+\t\t\t\t\tint fileString = 0;", "+\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\tif ((style & SWT.SAVE) != 0) {", "+\t\t\t\t\t\tif (OS.AEGetNthPtr (selection, 1, OS.typeFSRef, aeKeyword, typeCode, dataPtr, maximumSize, actualSize) == OS.noErr) {", "+\t\t\t\t\t\t\tbyte[] fsRef = new byte[actualSize[0]];", "+\t\t\t\t\t\t\tOS.memcpy (fsRef, dataPtr, actualSize [0]);", "+\t\t\t\t\t\t\tint pathUrl = OS.CFURLCreateFromFSRef (OS.kCFAllocatorDefault, fsRef);", "+\t\t\t\t\t\t\tint fullUrl = OS.CFURLCreateCopyAppendingPathComponent(OS.kCFAllocatorDefault, pathUrl, record.saveFileName, false);", "+\t\t\t\t\t\t\tpathString = OS.CFURLCopyFileSystemPath(pathUrl, OS.kCFURLPOSIXPathStyle);", "+\t\t\t\t\t\t\tfullString = OS.CFURLCopyFileSystemPath(fullUrl, OS.kCFURLPOSIXPathStyle);", "+\t\t\t\t\t\t\tfileString = record.saveFileName;", "+\t\t\t\t\t\t\tOS.CFRelease (pathUrl);", "+\t\t\t\t\t\t\tOS.CFRelease (fullUrl);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfor (int i = 0; i < count [0]; i++) {", "+\t\t\t\t\t\t\tif (OS.AEGetNthPtr (selection, i+1, OS.typeFSRef, aeKeyword, typeCode, dataPtr, maximumSize, actualSize) == OS.noErr) {", "+\t\t\t\t\t\t\t\tbyte[] fsRef = new byte[actualSize[0]];", "+\t\t\t\t\t\t\t\tOS.memcpy (fsRef, dataPtr, actualSize [0]);", "+\t\t\t\t\t\t\t\tint url = OS.CFURLCreateFromFSRef (OS.kCFAllocatorDefault, fsRef);", "+\t\t\t\t\t\t\t\tif (i == 0) {", "+\t\t\t\t\t\t\t\t\tint pathUrl = OS.CFURLCreateCopyDeletingLastPathComponent(OS.kCFAllocatorDefault, url);", "+\t\t\t\t\t\t\t\t\tpathString = OS.CFURLCopyFileSystemPath (pathUrl, OS.kCFURLPOSIXPathStyle);", "+\t\t\t\t\t\t\t\t\tfullString = OS.CFURLCopyFileSystemPath (url, OS.kCFURLPOSIXPathStyle);", "+\t\t\t\t\t\t\t\t\tfileString = OS.CFURLCopyLastPathComponent (url);", "+\t\t\t\t\t\t\t\t\tOS.CFRelease (pathUrl);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tint lastString = OS.CFURLCopyLastPathComponent (url);", "+\t\t\t\t\t\t\t\t\tint length = OS.CFStringGetLength (lastString);", "+\t\t\t\t\t\t\t\t\tchar [] buffer= new char [length];", "+\t\t\t\t\t\t\t\t\tCFRange range = new CFRange ();", "+\t\t\t\t\t\t\t\t\trange.length = length;", "+\t\t\t\t\t\t\t\t\tOS.CFStringGetCharacters (lastString, range, buffer);", "+\t\t\t\t\t\t\t\t\tfileNames [i] = new String (buffer);", "+\t\t\t\t\t\t\t\t\tOS.CFRelease (lastString);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tOS.CFRelease (url);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.DisposePtr (dataPtr);", "+\t\t\t\t\t", "+\t\t\t\t\tif (pathString != 0) {\t\t", "+\t\t\t\t\t\tint length = OS.CFStringGetLength (pathString);", "+\t\t\t\t\t\tchar [] buffer= new char [length];", "+\t\t\t\t\t\tCFRange range = new CFRange ();", "+\t\t\t\t\t\trange.length = length;", "+\t\t\t\t\t\tOS.CFStringGetCharacters (pathString, range, buffer);", "+\t\t\t\t\t\tOS.CFRelease (pathString);", "+\t\t\t\t\t\tfilterPath = new String (buffer);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (fullString != 0) {", "+\t\t\t\t\t\tint length = OS.CFStringGetLength (fullString);", "+\t\t\t\t\t\tchar [] buffer= new char [length];", "+\t\t\t\t\t\tCFRange range = new CFRange ();", "+\t\t\t\t\t\trange.length = length;", "+\t\t\t\t\t\tOS.CFStringGetCharacters (fullString, range, buffer);", "+\t\t\t\t\t\tOS.CFRelease (fullString);", "+\t\t\t\t\t\tfullPath = new String (buffer);", "+\t\t\t\t\t} ", "+\t\t\t\t\tif (fileString != 0) {", "+\t\t\t\t\t\tint length = OS.CFStringGetLength (fileString);", "+\t\t\t\t\t\tchar [] buffer= new char [length];", "+\t\t\t\t\t\tCFRange range = new CFRange ();", "+\t\t\t\t\t\trange.length = length;", "+\t\t\t\t\t\tOS.CFStringGetCharacters (fileString, range, buffer);", "+\t\t\t\t\t\tOS.CFRelease (fileString);", "+\t\t\t\t\t\tfileName = fileNames [0] = new String (buffer);", "+\t\t\t\t\t}", "-\t\t", "-\t\t\t//System.out.println(\"FileDialog.open: vor run\");", "-\t\t\tOS.NavDialogRun(dialog);", "-\t\t\t//System.out.println(\"FileDialog.open: nach run\");", "-\t\t", "-\t\t\tint action= OS.NavDialogGetUserAction(dialog);", "-\t\t\tswitch (action) {", "-\t\t\tcase OS.kNavUserActionCancel:", "-\t\t\t\tbreak;", "-\t\t\t\t", "-\t\t\tcase OS.kNavUserActionOpen:", "-\t\t\tcase OS.kNavUserActionChoose:\t\t\t", "-\t\t\t\tresult= interpretOsAnswer(dialog);", "-\t\t\t\tbreak;", "-\t\t\t\t", "-\t\t\tcase OS.kNavUserActionSaveAs:", "-\t\t\t\tresult= MacUtil.getStringAndRelease(OS.NavDialogGetSaveFileName(dialog));", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t} else {", "-\t\t\t//System.out.println(\"FileDialog.open: dialog == null\");", "-", "-\t} finally {", "-\t\tif (titleHandle != 0)", "-\t\t\tOS.CFRelease(titleHandle);", "-\t\tif (dialog != 0)", "-\t\t\tOS.NavDialogDispose(dialog);", "-\t", "-\treturn result;", "+", "+\tif (titlePtr != 0) OS.CFRelease (titlePtr);", "+\tif (fileNamePtr != 0) OS.CFRelease (fileNamePtr);\t", "+\tif (outDialog [0] != 0) OS.NavDialogDispose (outDialog [0]);", "+", "+\treturn fullPath;\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fad5f28e7e5bb8c6198ef82919c998d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "4d7a5617c7fd9b4d56124b2a05a51b83b51caab1", "commitAfterChange": "d474035c5d20e929e4ad7bf4aedf2c50355572cf", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": " public String open ()", "signatureAfterChange": " public String open ()", "diff": ["-\t\t\t\t\tint pathString = 0;", "-\t\t\t\t\tint fullString = 0;", "-\t\t\t\t\tint fileString = 0;", "-\t\t\t\t\t\t\tint fullUrl = OS.CFURLCreateCopyAppendingPathComponent(OS.kCFAllocatorDefault, pathUrl, record.saveFileName, false);", "-\t\t\t\t\t\t\tpathString = OS.CFURLCopyFileSystemPath(pathUrl, OS.kCFURLPOSIXPathStyle);", "-\t\t\t\t\t\t\tfullString = OS.CFURLCopyFileSystemPath(fullUrl, OS.kCFURLPOSIXPathStyle);", "-\t\t\t\t\t\t\tfileString = record.saveFileName;", "-\t\t\t\t\t\t\tOS.CFRelease (pathUrl);", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t/* Filter path */", "+\t\t\t\t\t\t\tint pathString = OS.CFURLCopyFileSystemPath (pathUrl, OS.kCFURLPOSIXPathStyle);", "+\t\t\t\t\t\t\tfilterPath = getString (pathString);", "+\t\t\t\t\t\t\tOS.CFRelease (pathString);", "+", "+\t\t\t\t\t\t\t/* Full path */", "+\t\t\t\t\t\t\tint fullUrl = OS.CFURLCreateCopyAppendingPathComponent (OS.kCFAllocatorDefault, pathUrl, record.saveFileName, false);", "+\t\t\t\t\t\t\tint fullString = OS.CFURLCopyFileSystemPath (fullUrl, OS.kCFURLPOSIXPathStyle);", "+\t\t\t\t\t\t\tfullPath = getString (fullString);", "+\t\t\t\t\t\t\tOS.CFRelease (fullString);", "+", "+\t\t\t\t\t\t\t/* File name */", "+\t\t\t\t\t\t\tfileName = fileNames [0] = getString (record.saveFileName);", "+\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\tOS.CFRelease (pathUrl);", "+\t\t\t\t\t\t\t\tint fullString = OS.CFURLCopyFileSystemPath (url, OS.kCFURLPOSIXPathStyle);", "+\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t/* File path */", "+\t\t\t\t\t\t\t\tint pathUrl = OS.CFURLCreateCopyDeletingLastPathComponent (OS.kCFAllocatorDefault, url);", "+\t\t\t\t\t\t\t\tint pathString = OS.CFURLCopyFileSystemPath (pathUrl, OS.kCFURLPOSIXPathStyle);", "+\t\t\t\t\t\t\t\tString path = getString (pathString);", "+\t\t\t\t\t\t\t\tOS.CFRelease (pathString);", "+\t\t\t\t\t\t\t\tOS.CFRelease (pathUrl);", "+", "-\t\t\t\t\t\t\t\t\tint pathUrl = OS.CFURLCreateCopyDeletingLastPathComponent(OS.kCFAllocatorDefault, url);", "-\t\t\t\t\t\t\t\t\tpathString = OS.CFURLCopyFileSystemPath (pathUrl, OS.kCFURLPOSIXPathStyle);", "-\t\t\t\t\t\t\t\t\tfullString = OS.CFURLCopyFileSystemPath (url, OS.kCFURLPOSIXPathStyle);", "-\t\t\t\t\t\t\t\t\tfileString = OS.CFURLCopyLastPathComponent (url);", "-\t\t\t\t\t\t\t\t\tOS.CFRelease (pathUrl);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tint lastString = OS.CFURLCopyLastPathComponent (url);", "-\t\t\t\t\t\t\t\t\tint length = OS.CFStringGetLength (lastString);", "-\t\t\t\t\t\t\t\t\tchar [] buffer= new char [length];", "-\t\t\t\t\t\t\t\t\tCFRange range = new CFRange ();", "-\t\t\t\t\t\t\t\t\trange.length = length;", "-\t\t\t\t\t\t\t\t\tOS.CFStringGetCharacters (lastString, range, buffer);", "-\t\t\t\t\t\t\t\t\tfileNames [i] = new String (buffer);", "-\t\t\t\t\t\t\t\t\tOS.CFRelease (lastString);", "+\t\t\t\t\t\t\t\t\t/* Full path */", "+\t\t\t\t\t\t\t\t\tfullPath = getString (fullString);", "+", "+\t\t\t\t\t\t\t\t\t/* Filter path */", "+\t\t\t\t\t\t\t\t\tfilterPath = path;", "+", "+\t\t\t\t\t\t\t\t\t/* File name */", "+\t\t\t\t\t\t\t\t\tint fileString = OS.CFURLCopyLastPathComponent (url);", "+\t\t\t\t\t\t\t\t\tfileName = fileNames [0] = getString (fileString);", "+\t\t\t\t\t\t\t\t\tOS.CFRelease (fileString);", "+\t\t\t\t\t\t\t\t} else {\t\t\t\t\t\t\t\t\t", "+\t\t\t\t\t\t\t\t\tif (path.equals (filterPath)) {", "+\t\t\t\t\t\t\t\t\t\tint fileString = OS.CFURLCopyLastPathComponent (url);", "+\t\t\t\t\t\t\t\t\t\tfileNames [i] = getString (fileString);", "+\t\t\t\t\t\t\t\t\t\tOS.CFRelease (fileString);", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tfileNames [i] = getString (fullString);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tOS.CFRelease (fullString);", "-\t\t\t\t\t", "-\t\t\t\t\tif (pathString != 0) {\t\t", "-\t\t\t\t\t\tint length = OS.CFStringGetLength (pathString);", "-\t\t\t\t\t\tchar [] buffer= new char [length];", "-\t\t\t\t\t\tCFRange range = new CFRange ();", "-\t\t\t\t\t\trange.length = length;", "-\t\t\t\t\t\tOS.CFStringGetCharacters (pathString, range, buffer);", "-\t\t\t\t\t\tOS.CFRelease (pathString);", "-\t\t\t\t\t\tfilterPath = new String (buffer);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (fullString != 0) {", "-\t\t\t\t\t\tint length = OS.CFStringGetLength (fullString);", "-\t\t\t\t\t\tchar [] buffer= new char [length];", "-\t\t\t\t\t\tCFRange range = new CFRange ();", "-\t\t\t\t\t\trange.length = length;", "-\t\t\t\t\t\tOS.CFStringGetCharacters (fullString, range, buffer);", "-\t\t\t\t\t\tOS.CFRelease (fullString);", "-\t\t\t\t\t\tfullPath = new String (buffer);", "-\t\t\t\t\t} ", "-\t\t\t\t\tif (fileString != 0) {", "-\t\t\t\t\t\tint length = OS.CFStringGetLength (fileString);", "-\t\t\t\t\t\tchar [] buffer= new char [length];", "-\t\t\t\t\t\tCFRange range = new CFRange ();", "-\t\t\t\t\t\trange.length = length;", "-\t\t\t\t\t\tOS.CFStringGetCharacters (fileString, range, buffer);", "-\t\t\t\t\t\tOS.CFRelease (fileString);", "-\t\t\t\t\t\tfileName = fileNames [0] = new String (buffer);", "-\t\t\t\t\t}", "+\t\t\t\tOS.NavDisposeReply (record);"]}], "num": 3607}
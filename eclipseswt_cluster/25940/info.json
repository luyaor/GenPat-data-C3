{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47e937953168c4db02b52b2064855c84", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "39b6a4008cc4e8c9e31105dfe62704c3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "bae278f5f9ff6c79b79331f037b2e24e2349ad2e", "commitAfterChange": "285bff3f50bb7a5309377a178cb96c3eb863ae70", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \r void drawBitmapTransparent(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "signatureAfterChange": "\r \r void drawBitmapTransparent(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "diff": ["-\t/* Create the mask for the source image */\r", "-\tint maskHdc = OS.CreateCompatibleDC(hDC);\r", "-\tint maskBitmap = OS.CreateBitmap(imgWidth, imgHeight, 1, 1, null);\r", "-\tint oldMaskBitmap = OS.SelectObject(maskHdc, maskBitmap);\r", "-\tOS.SetBkColor(srcHdc, (transBlue << 16) | (transGreen << 8) | transRed);\r", "-\tOS.BitBlt(maskHdc, 0, 0, imgWidth, imgHeight, srcHdc, 0, 0, OS.SRCCOPY);\r", "-\tif (originalColors != null) OS.SetDIBColorTable(srcHdc, 0, 1 << bm.bmBitsPixel, originalColors);\r", "-\r", "-\t/* Draw the source bitmap transparently using invert/and mask/invert */\r", "-\tint tempHdc = OS.CreateCompatibleDC(hDC);\r", "-\tint tempBitmap = OS.CreateCompatibleBitmap(hDC, destWidth, destHeight);\t\r", "-\tint oldTempBitmap = OS.SelectObject(tempHdc, tempBitmap);\r", "-\tOS.BitBlt(tempHdc, 0, 0, destWidth, destHeight, handle, destX, destY, OS.SRCCOPY);\r", "-\tif (!OS.IsWinCE) OS.SetStretchBltMode(tempHdc, OS.COLORONCOLOR);\r", "-\tOS.StretchBlt(tempHdc, 0, 0, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, OS.SRCINVERT);\r", "-\tOS.StretchBlt(tempHdc, 0, 0, destWidth, destHeight, maskHdc, srcX, srcY, srcWidth, srcHeight, OS.SRCAND);\r", "-\tOS.StretchBlt(tempHdc, 0, 0, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, OS.SRCINVERT);\r", "-\tOS.BitBlt(handle, destX, destY, destWidth, destHeight, tempHdc, 0, 0, OS.SRCCOPY);\r", "-\r", "-\t/* Release resources */\r", "-\tOS.SelectObject(tempHdc, oldTempBitmap);\r", "-\tOS.DeleteDC(tempHdc);\r", "-\tOS.DeleteObject(tempBitmap);\r", "-\tOS.SelectObject(maskHdc, oldMaskBitmap);\r", "-\tOS.DeleteDC(maskHdc);\r", "-\tOS.DeleteObject(maskBitmap);\r", "+\tif (OS.IsWinCE) {\r", "+\t\t/*\r", "+\t\t* Note in WinCE. TransparentImage uses the first entry of a palette\r", "+\t\t* based image when there are multiple entries that have the same\r", "+\t\t* transparent color.\r", "+\t\t*/\r", "+\t\tint transparentColor = transBlue << 16 | transGreen << 8 | transRed;\r", "+\t\tOS.TransparentImage(handle, destX, destY, destWidth, destHeight,\r", "+\t\t\tsrcHdc, srcX, srcY, srcWidth, srcHeight, transparentColor);\r", "+\t} else {\r", "+\t\t/* Create the mask for the source image */\r", "+\t\tint maskHdc = OS.CreateCompatibleDC(hDC);\r", "+\t\tint maskBitmap = OS.CreateBitmap(imgWidth, imgHeight, 1, 1, null);\r", "+\t\tint oldMaskBitmap = OS.SelectObject(maskHdc, maskBitmap);\r", "+\t\tOS.SetBkColor(srcHdc, (transBlue << 16) | (transGreen << 8) | transRed);\r", "+\t\tOS.BitBlt(maskHdc, 0, 0, imgWidth, imgHeight, srcHdc, 0, 0, OS.SRCCOPY);\r", "+\t\tif (originalColors != null) OS.SetDIBColorTable(srcHdc, 0, 1 << bm.bmBitsPixel, originalColors);\r", "+\t\r", "+\t\t/* Draw the source bitmap transparently using invert/and mask/invert */\r", "+\t\tint tempHdc = OS.CreateCompatibleDC(hDC);\r", "+\t\tint tempBitmap = OS.CreateCompatibleBitmap(hDC, destWidth, destHeight);\t\r", "+\t\tint oldTempBitmap = OS.SelectObject(tempHdc, tempBitmap);\r", "+\t\tOS.BitBlt(tempHdc, 0, 0, destWidth, destHeight, handle, destX, destY, OS.SRCCOPY);\r", "+\t\tif (!OS.IsWinCE) OS.SetStretchBltMode(tempHdc, OS.COLORONCOLOR);\r", "+\t\tOS.StretchBlt(tempHdc, 0, 0, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, OS.SRCINVERT);\r", "+\t\tOS.StretchBlt(tempHdc, 0, 0, destWidth, destHeight, maskHdc, srcX, srcY, srcWidth, srcHeight, OS.SRCAND);\r", "+\t\tOS.StretchBlt(tempHdc, 0, 0, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, OS.SRCINVERT);\r", "+\t\tOS.BitBlt(handle, destX, destY, destWidth, destHeight, tempHdc, 0, 0, OS.SRCCOPY);\r", "+\t\r", "+\t\t/* Release resources */\r", "+\t\tOS.SelectObject(tempHdc, oldTempBitmap);\r", "+\t\tOS.DeleteDC(tempHdc);\r", "+\t\tOS.DeleteObject(tempBitmap);\r", "+\t\tOS.SelectObject(maskHdc, oldMaskBitmap);\r", "+\t\tOS.DeleteDC(maskHdc);\r", "+\t\tOS.DeleteObject(maskBitmap);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3980ca2c2ff1a4c9e2d95b90ea47329d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "88080c08af2325fb66aea8c24d7f0210fa71fd6c", "commitAfterChange": "dcc2e380d1e3ea8a88162c2cf3d96db6df8c9c44", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "  void drawBitmapTransparent(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "signatureAfterChange": "  void drawBitmapTransparent(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "diff": ["+", "-\t\t/* Draw the source bitmap transparently using invert/and mask/invert */", "-\t\tint tempHdc = OS.CreateCompatibleDC(hDC);", "-\t\tint tempBitmap = OS.CreateCompatibleBitmap(hDC, destWidth, destHeight);\t", "-\t\tint oldTempBitmap = OS.SelectObject(tempHdc, tempBitmap);", "-\t\tOS.BitBlt(tempHdc, 0, 0, destWidth, destHeight, handle, destX, destY, OS.SRCCOPY);", "-\t\tif (!simple && (srcWidth != destWidth || srcHeight != destHeight)) {", "-\t\t\tif (!OS.IsWinCE) OS.SetStretchBltMode(tempHdc, OS.COLORONCOLOR);", "-\t\t\tOS.StretchBlt(tempHdc, 0, 0, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, OS.SRCINVERT);", "-\t\t\tOS.StretchBlt(tempHdc, 0, 0, destWidth, destHeight, maskHdc, srcX, srcY, srcWidth, srcHeight, OS.SRCAND);", "-\t\t\tOS.StretchBlt(tempHdc, 0, 0, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, OS.SRCINVERT);", "+\t\tif (OS.GetDeviceCaps(handle, OS.TECHNOLOGY) == OS.DT_RASPRINTER) {", "+\t\t\t/* Most printers do not support BitBlt(), draw the source bitmap transparently using clipping */", "+\t\t\tdrawBitmapTransparentByClipping(srcHdc, maskHdc, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, simple, imgWidth, imgHeight);", "-\t\t\tOS.BitBlt(tempHdc, 0, 0, destWidth, destHeight, srcHdc, srcX, srcY, OS.SRCINVERT);", "-\t\t\tOS.BitBlt(tempHdc, 0, 0, destWidth, destHeight, maskHdc, srcX, srcY, OS.SRCAND);", "-\t\t\tOS.BitBlt(tempHdc, 0, 0, destWidth, destHeight, srcHdc, srcX, srcY, OS.SRCINVERT);", "+\t\t\t/* Draw the source bitmap transparently using invert/and mask/invert */", "+\t\t\tint tempHdc = OS.CreateCompatibleDC(hDC);", "+\t\t\tint tempBitmap = OS.CreateCompatibleBitmap(hDC, destWidth, destHeight);\t", "+\t\t\tint oldTempBitmap = OS.SelectObject(tempHdc, tempBitmap);", "+\t\t\tOS.BitBlt(tempHdc, 0, 0, destWidth, destHeight, handle, destX, destY, OS.SRCCOPY);", "+\t\t\tif (!simple && (srcWidth != destWidth || srcHeight != destHeight)) {", "+\t\t\t\tif (!OS.IsWinCE) OS.SetStretchBltMode(tempHdc, OS.COLORONCOLOR);", "+\t\t\t\tOS.StretchBlt(tempHdc, 0, 0, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, OS.SRCINVERT);", "+\t\t\t\tOS.StretchBlt(tempHdc, 0, 0, destWidth, destHeight, maskHdc, srcX, srcY, srcWidth, srcHeight, OS.SRCAND);", "+\t\t\t\tOS.StretchBlt(tempHdc, 0, 0, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, OS.SRCINVERT);", "+\t\t\t} else {", "+\t\t\t\tOS.BitBlt(tempHdc, 0, 0, destWidth, destHeight, srcHdc, srcX, srcY, OS.SRCINVERT);", "+\t\t\t\tOS.BitBlt(tempHdc, 0, 0, destWidth, destHeight, maskHdc, srcX, srcY, OS.SRCAND);", "+\t\t\t\tOS.BitBlt(tempHdc, 0, 0, destWidth, destHeight, srcHdc, srcX, srcY, OS.SRCINVERT);", "+\t\t\t}", "+\t\t\tOS.BitBlt(handle, destX, destY, destWidth, destHeight, tempHdc, 0, 0, OS.SRCCOPY);", "+\t\t\tOS.SelectObject(tempHdc, oldTempBitmap);", "+\t\t\tOS.DeleteDC(tempHdc);", "+\t\t\tOS.DeleteObject(tempBitmap);", "-\t\tOS.BitBlt(handle, destX, destY, destWidth, destHeight, tempHdc, 0, 0, OS.SRCCOPY);", "-\t", "-\t\t/* Release resources */", "-\t\tOS.SelectObject(tempHdc, oldTempBitmap);", "-\t\tOS.DeleteDC(tempHdc);", "-\t\tOS.DeleteObject(tempBitmap);"]}], "num": 25940}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b7a2fe9f65a32d3887de5e358a778589", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa6ec6da61dcda77d06973d363c21487", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "25a820b9c61bce768cba2e9e95ac223905930030", "commitAfterChange": "722bc94f4f7e83a70c3470a84d80e9545657ad49", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  void hookDOMListeners(OleAutomation webBrowser, final boolean isTop)", "signatureAfterChange": "  void hookDOMListeners(OleAutomation webBrowser, final boolean isTop)", "diff": ["-\tint[] rgdispid = webBrowser.getIDsOfNames(new String[] { PROPERTY_DOCUMENT });", "+\t/*", "+\t* DOM listeners are only applicable when HTML content is shown.", "+\t* HTML documents always answer the Type property, so failure to get", "+\t* this value indicates that some other content type is being shown.", "+\t*/", "+\tint[] rgdispid = webBrowser.getIDsOfNames(new String[] { PROPERTY_TYPE });", "+\tif (rgdispid == null) {", "+\t\treturn;", "+\t}", "+\tif (pVarResult == null || pVarResult.getType() != COM.VT_BSTR) {", "+\t\tif (pVarResult != null) pVarResult.dispose ();", "+\t\treturn;", "+\t}", "+\tString type = pVarResult.getString();", "+\tpVarResult.dispose();", "+\tif (!type.equals(HTML_DOCUMENT)) return;", "+", "+\trgdispid = webBrowser.getIDsOfNames(new String[] { PROPERTY_DOCUMENT });", "+\tdispIdMember = rgdispid[0];", "+\tpVarResult = webBrowser.getProperty(dispIdMember);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38385ee1555d6fe5d390fefa265369ad", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGeneratorApp.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  public Class[] getClasses()", "signatureAfterChange": "  public JNIClass[] getClasses()", "diff": ["-public Class[] getClasses() {", "-\tif (mainClassName == null) return new Class[0];", "+public JNIClass[] getClasses() {", "+\tif (classes != null) return classes;", "+\tif (mainClassName == null) return new JNIClass[0];", "+\tif (USE_AST) return getASTClasses();", "-\tClass[] classes = new Class[classNames.length];", "+\tJNIClass[] classes = new JNIClass[classNames.length];", "-\t\t\tclasses[i] = Class.forName(packageName + \".\" + className, false, getClass().getClassLoader());", "+\t\t\tString qualifiedName = packageName + \".\" + className;", "+\t\t\tif (qualifiedName.equals(mainClassName)) {", "+\t\t\t\tclasses[i] = mainClass;", "+\t\t\t} else {", "+\t\t\t\tString sourcePath = new File(outputDir).getParent() + \"/\" + qualifiedName.replace('.', '/') + \".java\";", "+\t\t\t\tclasses[i] = new ReflectClass(Class.forName(qualifiedName, false, getClass().getClassLoader()), metaData, sourcePath);", "+\t\t\t}"]}], "num": 56692}
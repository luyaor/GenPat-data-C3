{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc8f4782a5321b82ca6a34c48ac15ad0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d014b552065967d8553f1eb662563cd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "4050c833656a0fc5cbbf9b90229349498d472ae9", "commitAfterChange": "fb6bc4c89147f7b506bef4e864f80773bf8c749f", "methodNumberBeforeChange": 262, "methodNumberAfterChange": 262, "signatureBeforeChange": "  long windowProc (long handle, long arg0, long user_data)", "signatureAfterChange": "  long windowProc (long handle, long arg0, long user_data)", "diff": ["-\t\t\t\tif (control != null && control.backgroundImage != null) {", "-\t\t\t\t\tGdkEventExpose gdkEvent = new GdkEventExpose ();", "-\t\t\t\t\tOS.memmove (gdkEvent, arg0, GdkEventExpose.sizeof);", "-\t\t\t\t\tlong /*int*/ paintWindow = paintWindow();", "-\t\t\t\t\tlong /*int*/ window = gdkEvent.window;", "-\t\t\t\t\tif (window != paintWindow) break;", "-\t\t\t\t\tdrawBackground(control, window, gdkEvent.region, gdkEvent.area_x, gdkEvent.area_y, gdkEvent.area_width, gdkEvent.area_height);", "+\t\t\t\tboolean draw = control != null && control.backgroundImage != null;", "+\t\t\t\tif (OS.GTK3 && !draw && (state & CANVAS) != 0) {", "+\t\t\t\t\tGdkRGBA rgba = new GdkRGBA();", "+\t\t\t\t\tlong /*int*/ context = OS.gtk_widget_get_style_context (handle);", "+\t\t\t\t\tOS.gtk_style_context_get_background_color (context, OS.GTK_STATE_FLAG_NORMAL, rgba);", "+\t\t\t\t\tdraw = rgba.alpha == 0;", "+\t\t\t\t}", "+\t\t\t\tif (draw) {", "+\t\t\t\t\tif (OS.GTK3) {", "+\t\t\t\t\t\tlong /*int*/ cairo = arg0;", "+\t\t\t\t\t\tGdkRectangle rect = new GdkRectangle ();", "+\t\t\t\t\t\tOS.gdk_cairo_get_clip_rectangle (cairo, rect);", "+\t\t\t\t\t\tif (control == null) control = this;", "+\t\t\t\t\t\tdrawBackground (control, 0, cairo, 0, rect.x, rect.y, rect.width, rect.height);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tGdkEventExpose gdkEvent = new GdkEventExpose ();", "+\t\t\t\t\t\tOS.memmove (gdkEvent, arg0, GdkEventExpose.sizeof);", "+\t\t\t\t\t\tlong /*int*/ paintWindow = paintWindow();", "+\t\t\t\t\t\tlong /*int*/ window = gdkEvent.window;", "+\t\t\t\t\t\tif (window != paintWindow) break;", "+\t\t\t\t\t\tdrawBackground(control, window, gdkEvent.region, gdkEvent.area_x, gdkEvent.area_y, gdkEvent.area_width, gdkEvent.area_height);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "977cc3e2ce9d2339063b1fda1ab00373", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "11441b9b87d6c5ed4f6022b2e94bdecbdba8a0fd", "commitAfterChange": "6f96d56c7cd19d74c17065bbf64753fa69960b72", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 27, "signatureBeforeChange": "  void flushExposes (int window, boolean all)", "signatureAfterChange": "  void flushExposes ()", "diff": ["-void flushExposes (int /*long*/ window, boolean all) {", "+void flushExposes () {", "-\t\tthis.flushWindow = window;", "-\t\tthis.flushAll = all;", "+\t\tGdkRectangle rect = new GdkRectangle ();", "+\t\tXExposeEvent exposeEvent = new XExposeEvent ();", "-\t\tOS.XCheckIfEvent (xDisplay, xEvent, checkIfEventProc, 0);", "+\t\twhile (OS.XCheckMaskEvent (xDisplay, OS.ExposureMask, xEvent)) {", "+\t\t\tOS.memmove (exposeEvent, xEvent, XExposeEvent.sizeof);", "+\t\t\trect.x = exposeEvent.x;", "+\t\t\trect.y = exposeEvent.y;", "+\t\t\trect.width = exposeEvent.width;", "+\t\t\trect.height = exposeEvent.height;", "+\t\t\tint /*long*/ window = OS.gdk_window_lookup (exposeEvent.window);", "+\t\t\tif (window != 0) OS.gdk_window_invalidate_rect (window, rect, true);", "+\t\t}", "-\t\tthis.flushWindow = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cfc0b29a9e3cb7676217f0f3cf19cf5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  void drawBackground (int control, float [] background)", "signatureAfterChange": "  void drawBackground (int control, int context, float [] background)", "diff": ["-void drawBackground (int control, float [] background) {", "-\tRect rect = new Rect ();", "-\tOS.GetControlBounds (control, rect);", "-\tif (background != null) {", "-\t\tOS.RGBForeColor (toRGBColor (background));", "-\t\tOS.PaintRect (rect);", "+void drawBackground (int control, int context, float [] background) {", "+\tif (OS.HIVIEW && OS.VERSION >= 0x1040) {", "+\t\tCGRect rect = new CGRect ();", "+\t\tOS.HIViewGetBounds (control, rect);", "+\t\tif (background != null) {", "+\t\t\tint colorspace = OS.CGColorSpaceCreateDeviceRGB ();", "+\t\t\tOS.CGContextSetFillColorSpace (context, colorspace);", "+\t\t\tOS.CGContextSetFillColor (context, background);", "+\t\t\tOS.CGColorSpaceRelease (colorspace);", "+\t\t} else {", "+\t\t\tOS.HIThemeSetFill (OS.kThemeBrushDialogBackgroundActive, 0, context, OS.kHIThemeOrientationNormal);", "+\t\t}", "+\t\tOS.CGContextFillRect (context, rect);", "-\t\tOS.SetThemeBackground((short) OS.kThemeBrushDialogBackgroundActive, (short) 0, true);", "-\t\tOS.EraseRect (rect);", "+\t\tRect rect = new Rect ();", "+\t\tOS.GetControlBounds (control, rect);", "+\t\tif (background != null) {", "+\t\t\tOS.RGBForeColor (toRGBColor (background));", "+\t\t\tOS.PaintRect (rect);", "+\t\t} else {", "+\t\t\tOS.SetThemeBackground((short) OS.kThemeBrushDialogBackgroundActive, (short) 0, true);", "+\t\t\tOS.EraseRect (rect);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f66280bc140844c6c400c4a85bf7795", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "4adc0fa9f03279720a68fba8d51956d0da465d22", "commitAfterChange": "a33b627d26b59d25b640310efd793c4c8154f807", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  void drawBackground (int control, int context)", "signatureAfterChange": "  void drawBackground (int control, int context)", "diff": ["+\tif (OS.HIVIEW) {", "+\t\tif (control == handle && getSelection ()) {", "+\t\t\tCGRect rect = new CGRect();", "+\t\t\tOS.HIViewGetBounds (handle, rect);", "+\t\t\tOS.CGContextSaveGState (context);", "+\t\t\tOS.CGContextSetFillColor (context, new float[]{0.1f, 0.1f, 0.1f, 0.1f});", "+\t\t\tOS.CGContextFillRect (context, rect);", "+\t\t\tOS.CGContextSetStrokeColor (context, new float[]{0.2f, 0.2f, 0.2f, 0.2f});", "+\t\t\trect.x += 0.5f;", "+\t\t\trect.y += 0.5f;", "+\t\t\trect.width -= 1;", "+\t\t\trect.height -= 1;", "+\t\t\tOS.CGContextStrokeRect (context, rect);", "+\t\t\tOS.CGContextRestoreGState (context);", "+\t\t}", "+\t\treturn;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d26573bf265b3bc97f2e669a82f3107", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Spinner.java", "commitBeforeChange": "1dacd3e9ed06c61e8552e31c6adebb0ab30245ee", "commitAfterChange": "ffc9f40b7904f00bfd32f38d3b3ec04c8aced62e", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public Rectangle computeTrim (int x, int y, int width, int height)", "signatureAfterChange": "  public Rectangle computeTrim (int x, int y, int width, int height)", "diff": ["-\tPoint thickness = getThickness (handle);", "-\tif ((this.style & SWT.BORDER) != 0) {", "-\t\txborder += thickness.x;", "-\t\tyborder += thickness.y;", "+\tRectangle trim = super.computeTrim (x, y, width, height);", "+\tif (OS.GTK3) {", "+\t\tGtkBorder tmp = new GtkBorder();", "+\t\tlong /*int*/ context = OS.gtk_widget_get_style_context (handle);", "+\t\tOS.gtk_style_context_get_padding (context, OS.GTK_STATE_FLAG_NORMAL, tmp);", "+\t\tif ((style & SWT.BORDER) != 0) {", "+\t\t\tOS.gtk_style_context_get_border (context, OS.GTK_STATE_FLAG_NORMAL, tmp);", "+\t\t\ttrim.x -= tmp.left;", "+\t\t\ttrim.y -= tmp.top;", "+\t\t\ttrim.width += tmp.left + tmp.right;", "+\t\t\ttrim.height += tmp.top + tmp.bottom;", "+\t\t}", "+\t}else {", "+\t\tPoint thickness = getThickness (handle);", "+\t\tif ((this.style & SWT.BORDER) != 0) {", "+\t\t\txborder += thickness.x;", "+\t\t\tyborder += thickness.y;", "+\t\t}", "+\t\tlong /*int*/ fontDesc = getFontDescription ();", "+\t\tint fontSize = OS.pango_font_description_get_size (fontDesc);", "+\t\tint arrowSize = Math.max (OS.PANGO_PIXELS (fontSize), MIN_ARROW_WIDTH);", "+\t\tarrowSize = arrowSize - arrowSize % 2;\t\t", "+\t\ttrim.width += arrowSize + (2 * thickness.x);", "-\tlong /*int*/ fontDesc = getFontDescription ();", "-\tint fontSize = OS.pango_font_description_get_size (fontDesc);", "-\tint arrowSize = Math.max (OS.PANGO_PIXELS (fontSize), MIN_ARROW_WIDTH);", "-\tarrowSize = arrowSize - arrowSize % 2;\t", "-\tRectangle trim = super.computeTrim (x, y, width, height);", "-\ttrim.width += arrowSize + (2 * thickness.x);"]}], "num": 19108}
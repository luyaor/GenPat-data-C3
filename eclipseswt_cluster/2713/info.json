{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "28ff751dcd2cc3896f9e911c56e61448", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50d44be31c93dfdf455247949f841e50", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "4795e367064c6a575be6f5a39856b9babc26012b", "commitAfterChange": "05c7d4bb9f02f88c0d9d0a290cb1774b2aae3613", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 121, "signatureBeforeChange": " boolean traverseGroup (boolean next)", "signatureAfterChange": " boolean traverseGroup (boolean next)", "diff": ["-\treturn true;", "+\tControl root = computeTabRoot();", "+\tControl group = computeTabGroup();", "+\tControl[] list = root.computeTabList();", "+\tint length = list.length;", "+\tint index = 0;", "+\twhile (index < length) {", "+\t\tif (list [index] == group) break;", "+\t\tindex++;", "+\t}", "+\t/*", "+\t* It is possible (but unlikely), that application", "+\t* code could have disposed the widget in focus in", "+\t* or out events.  Ensure that a disposed widget is", "+\t* not accessed.", "+\t*/", "+\tif (index == length) return false;", "+\tint start = index, offset = (next) ? 1 : -1;", "+\twhile ((index = ((index + offset + length) % length)) != start) {", "+\t\tControl control = list [index];", "+\t\tif (!control.isDisposed () && control.setTabGroupFocus ()) {", "+\t\t\tif (!isDisposed () && !isFocusControl ()) return true;", "+\t\t}", "+\t}", "+\tif (group.isDisposed ()) return false;", "+\treturn group.setTabGroupFocus ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bebca1e3e97bc526d1e5a4a312f09c57", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "e3ffa03ceaf7703e7ab3292990f53dd9ebc09848", "commitAfterChange": "bad1afba2bae87fcb485bb971088066d4ff1a6e9", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 108, "signatureBeforeChange": "\r \r boolean traverseGroup (boolean next, boolean control)", "signatureAfterChange": "\r \r boolean traverseGroup (boolean next)", "diff": ["-boolean traverseGroup (boolean next, boolean control) {\r", "-\tif (control) {\r", "-\t\tif (next) return OS.PtGlobalFocusPrevContainer (handle, null) != 0;\r", "-\t\treturn OS.PtGlobalFocusNextContainer (handle, null) != 0;\r", "+boolean traverseGroup (boolean next) {\r", "+\tControl root = computeTabRoot ();\r", "+\tControl group = computeTabGroup ();\r", "+\tControl [] list = root.computeTabList ();\r", "+\tint length = list.length;\r", "+\tint index = 0;\r", "+\twhile (index < length) {\r", "+\t\tif (list [index] == group) break;\r", "+\t\tindex++;\r", "-\tif (next) return OS.PtGlobalFocusPrev (handle, null) != 0;\r", "-\treturn OS.PtGlobalFocusNext (handle, null) != 0;\r", "+\t/*\r", "+\t* It is possible (but unlikely), that application\r", "+\t* code could have disposed the widget in focus in\r", "+\t* or out events.  Ensure that a disposed widget is\r", "+\t* not accessed.\r", "+\t*/\r", "+\tif (index == length) return false;\r", "+\tint start = index, offset = (next) ? 1 : -1;\r", "+\twhile ((index = ((index + offset + length) % length)) != start) {\r", "+\t\tControl control = list [index];\r", "+\t\tif (!control.isDisposed () && control.setTabGroupFocus ()) {\r", "+\t\t\tif (!isDisposed () && !isFocusControl ()) return true;\r", "+\t\t}\r", "+\t}\r", "+\tif (group.isDisposed ()) return false;\r", "+\treturn group.setTabGroupFocus ();\r"]}], "num": 2713}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5bbdaff242ffa6b4e6a715be1082ecf8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31a15763d48c3c880349763cf38875d7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "d9aa53af16d8aa1951b6c08902d541c33197b74b", "commitAfterChange": "a4b9a6829a0560da22fad24a26489669262a4881", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": "  void updateParent (boolean visible)", "signatureAfterChange": "  void updateParent (boolean visible)", "diff": ["-\tif (visible) {", "-\t\tif (parent != null && parent.getVisible ()) {", "-\t\t\t((Shell)parent).window.addChildWindow (window, OS.NSWindowAbove);", "-\t\t\t", "-\t\t\t/**", "-\t\t\t * Feature in Cocoa: When a window is added as a child window,", "-\t\t\t * its window level resets to its parent's window level. So, we", "-\t\t\t * have to set the level for ON_TOP child window again.", "-\t\t\t */", "-\t\t\tif ((style & SWT.ON_TOP) != 0) {", "-\t\t\t\twindow.setLevel(OS.NSStatusWindowLevel);", "+\tif (window != null) {", "+\t\tif (visible) {", "+\t\t\tif (parent != null && parent.getVisible ()) {", "+\t\t\t\t((Shell)parent).window.addChildWindow (window, OS.NSWindowAbove);", "+\t\t\t\t", "+\t\t\t\t/**", "+\t\t\t\t * Feature in Cocoa: When a window is added as a child window,", "+\t\t\t\t * its window level resets to its parent's window level. So, we", "+\t\t\t\t * have to set the level for ON_TOP child window again.", "+\t\t\t\t */", "+\t\t\t\tif ((style & SWT.ON_TOP) != 0) {", "+\t\t\t\t\twindow.setLevel(OS.NSStatusWindowLevel);", "+\t\t\t\t}", "+\t\t} else {", "+\t\t\tNSWindow parentWindow = window.parentWindow ();", "+\t\t\tif (parentWindow != null) parentWindow.removeChildWindow (window);", "-\t} else {", "-\t\tNSWindow parentWindow = window.parentWindow ();", "-\t\tif (parentWindow != null) parentWindow.removeChildWindow (window);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c7b1362ef75d3e355df22fcba7bbe14", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "c8a676e3087ddbe22a668753e1001fa28d6ae9be", "commitAfterChange": "1eb6b519b5ad13a3dc93006b9f6a39921ded9354", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\t\t// 'view' is set to the NSView we should add the window's content view to as a subview.", "-\t\t// If that is null but 'window' is not we are in the foreign-handle case and shouldn't modify", "-\t\t// the window since we don't own it.", "+\t\t\t// In the FOREIGN_HANDLE case, 'window' is an NSWindow created on our behalf.", "+\t\t\t// It may already have a content view, so if it does, grab and retain, since we release()", "+\t\t\t// the view at disposal time.  Otherwise, create a new 'view' that will be used as the window's", "+\t\t\t// content view in setZOrder.", "+\t\t\t// In the embedded case, 'view' is already set to the NSView we should add the window's content view to as a subview.", "+\t\t\t// In that case we will hold on to the foreign view, create our own SWTCanvasView (which overwrites 'view') and then", "+\t\t\t// add it to the foreign view.", "-\t\tid id = window.fieldEditor (true, null);", "-\t\tif (id != null) {", "-\t\t\tOS.object_setClass (id.id, OS.objc_getClass (\"SWTEditorView\"));", "-\t\t}", "+\t", "+\tNSWindow fieldEditorWindow = window;", "+\tif (fieldEditorWindow == null) fieldEditorWindow = view.window();", "+\tid id = fieldEditorWindow.fieldEditor (true, null);", "+\tif (id != null) {", "+\t\tOS.object_setClass (id.id, OS.objc_getClass (\"SWTEditorView\"));", "+\t}", "+"]}], "num": 62545}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "77d0b7b3a5de6abb914345cfcb77627f", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7f4379c9e5529125cbe235656037a6be", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "40cdf2a9aca64c3d5be03c7e511afd690ece84ea", "commitAfterChange": "a4b7aa3a6538ae186e20f13ca84baaf05474bec5", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " void doPageUp(boolean select, int height)", "signatureAfterChange": " void doPageUp(boolean select, int height)", "diff": ["-\tif (isSingleLine()) {", "-\t\treturn;", "-\t}", "+\tif (isSingleLine()) return;", "-\t\t\tint lines = height / lineHeight;", "+\t\t\tint lines = (height == -1 ? clientAreaHeight : height) / lineHeight;", "-\t\t\t// scroll one page up or to the top", "-\t\tint oldVScrollOffset = getVerticalScrollOffset();", "-\t\tint caretY = getCaret().getLocation().y;\t", "-\t\tint vscroll = Math.min(getVerticalScrollOffset(), height);", "-\t\tscrollVertical(-vscroll, true);", "-\t\tcaretY -= height - (oldVScrollOffset - getVerticalScrollOffset());", "-\t\tcaretOffset = getOffsetAtPoint(columnX, caretY);", "-\t\tsetCaretLocation();", "-\t\tif (select) {", "-\t\t\tdoSelection(ST.COLUMN_PREVIOUS);", "+\t\tint caretLine = getCaretLine();", "+\t\tint partialTopIndex = getPartialTopIndex();", "+\t\tint lineHeight = renderer.getLineHeight(partialTopIndex);", "+\t\tif (height == -1) {", "+\t\t\tif (partialHeight == 0) {", "+\t\t\t\theight = clientAreaHeight;", "+\t\t\t} else {", "+\t\t\t\theight = clientAreaHeight - partialHeight;", "+\t\t\t\tif (wordWrap) {", "+\t\t\t\t\tint y = lineHeight - partialHeight;", "+\t\t\t\t\tTextLayout layout = renderer.getTextLayout(partialTopIndex);", "+\t\t\t\t\tfor (int i = 0; i < layout.getLineCount(); i++) {", "+\t\t\t\t\t\tRectangle bounds = layout.getLineBounds(i);", "+\t\t\t\t\t\tif (bounds.contains(bounds.x, y)) {", "+\t\t\t\t\t\t\theight += lineHeight - (bounds.y + bounds.height);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\trenderer.disposeTextLayout(layout);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tint lineIndex = getLineIndex(clientAreaHeight - height);", "+\t\t\tint topLineY = getLinePixel(lineIndex);", "+\t\t\tif (wordWrap) {", "+\t\t\t\tTextLayout layout = renderer.getTextLayout(lineIndex);", "+\t\t\t\tint y = topLineY;", "+\t\t\t\tfor (int i = 0; i < layout.getLineCount(); i++) {", "+\t\t\t\t\tRectangle bounds = layout.getLineBounds(i);", "+\t\t\t\t\tif (bounds.contains(bounds.x, y)) {", "+\t\t\t\t\t\theight = clientAreaHeight - (topLineY + bounds.y);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\trenderer.disposeTextLayout(layout);", "+\t\t\t} else {", "+\t\t\t\theight = clientAreaHeight - topLineY;", "+\t\t\t}", "+\t\tint availableHeight = 0;", "+\t\tif (partialHeight != 0) {", "+\t\t\tavailableHeight = lineHeight - partialHeight;", "+\t\t}", "+\t\tint lineIndex = partialTopIndex - 1;", "+\t\twhile (height > availableHeight && lineIndex >= 0) {", "+\t\t\tavailableHeight += renderer.getLineHeight(lineIndex--);", "+\t\t}", "+\t\tint caretHeight = height;", "+\t\tif (wordWrap) {", "+\t\t\tint offsetInLine = caretOffset - content.getOffsetAtLine(caretLine);", "+\t\t\tTextLayout layout = renderer.getTextLayout(caretLine);", "+\t\t\tlineIndex = layout.getLineIndex(offsetInLine);", "+\t\t\tint[] offsets = layout.getLineOffsets();", "+\t\t\tif (lineIndex != 0 && offsetInLine == offsets[lineIndex] && caretAlignment == PREVIOUS_OFFSET_TRAILING) {", "+\t\t\t\tlineIndex--;", "+\t\t\t}", "+\t\t\tcaretHeight += layout.getBounds().height - layout.getLineBounds(lineIndex).y;", "+\t\t\trenderer.disposeTextLayout(layout);", "+\t\t}", "+\t\tlineIndex = caretLine;", "+\t\tlineHeight = renderer.getLineHeight(lineIndex);", "+\t\twhile (caretHeight - lineHeight >= 0 && lineIndex > 0) {", "+\t\t\tcaretHeight -= lineHeight;", "+\t\t\tlineHeight = renderer.getLineHeight(--lineIndex);", "+\t\t}", "+\t\tlineHeight = renderer.getLineHeight(lineIndex);", "+\t\tcaretOffset = getOffsetAtPoint(columnX, lineHeight - caretHeight, lineIndex);\t", "+\t\tif (select) doSelection(ST.COLUMN_PREVIOUS);", "+\t\theight = Math.min(height, availableHeight);", "+\t\tscrollVertical(-height, true);", "+\t\tif (height == 0) setCaretLocation();\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df55b8cdf39abb5f26dc97b179848cbf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "40cdf2a9aca64c3d5be03c7e511afd690ece84ea", "commitAfterChange": "a4b7aa3a6538ae186e20f13ca84baaf05474bec5", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": " void doPageDown(boolean select, int height)", "signatureAfterChange": " void doPageDown(boolean select, int height)", "diff": ["-\t// do nothing if in single line mode. fixes 5673", "-\tif (isSingleLine()) {", "-\t\treturn;", "-\t}\t", "+\tif (isSingleLine()) return;", "-\t\t\tint lines = height / lineHeight;", "+\t\t\tint lines = (height == -1 ? clientAreaHeight : height) / lineHeight;", "-\t\t\t// ensure that scrollLines never gets negative and at leat one ", "+\t\t\t// ensure that scrollLines never gets negative and at least one ", "-\t\tint oldVScrollOffset = getVerticalScrollOffset();", "-\t\tint caretY = getCaret().getLocation().y;", "-\t\tboolean scroll = getLineIndex(getClientArea().height) != content.getLineCount() - 1;", "-\t\tif (scroll) {", "-\t\t\tscrollVertical(height, true);", "-\t\t\tclaimBottomFreeSpace();", "+\t\tint lineCount = content.getLineCount();", "+\t\tint caretLine = getCaretLine();", "+\t\tint partialBottomIndex = getPartialBottomIndex();", "+\t\tint topY = getLinePixel(partialBottomIndex);", "+\t\tint lineHeight = renderer.getLineHeight(partialBottomIndex);", "+\t\tif (height == -1) {", "+\t\t\theight = topY;", "+\t\t\tif (wordWrap) {", "+\t\t\t\tif (topY + lineHeight >= clientAreaHeight) {", "+\t\t\t\t\theight += lineHeight;", "+\t\t\t\t} else {\t\t\t\t", "+\t\t\t\t\tTextLayout layout = renderer.getTextLayout(partialBottomIndex);", "+\t\t\t\t\tint y = clientAreaHeight - topY;", "+\t\t\t\t\tfor (int i = 0; i < layout.getLineCount(); i++) {", "+\t\t\t\t\t\tRectangle bounds = layout.getLineBounds(i);", "+\t\t\t\t\t\tif (bounds.contains(bounds.x, y)) {", "+\t\t\t\t\t\t\theight += bounds.y;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\trenderer.disposeTextLayout(layout);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tint lineIndex = getLineIndex(height);", "+\t\t\tint topLineY = getLinePixel(lineIndex);", "+\t\t\tif (wordWrap) {", "+\t\t\t\tTextLayout layout = renderer.getTextLayout(lineIndex);", "+\t\t\t\tint y = height - topLineY;", "+\t\t\t\tfor (int i = 0; i < layout.getLineCount(); i++) {", "+\t\t\t\t\tRectangle bounds = layout.getLineBounds(i);", "+\t\t\t\t\tif (bounds.contains(bounds.x, y)) {", "+\t\t\t\t\t\theight = topLineY + bounds.y + bounds.height;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\trenderer.disposeTextLayout(layout);", "+\t\t\t} else {", "+\t\t\t\theight = topLineY + renderer.getLineHeight(lineIndex);", "+\t\t\t}", "-\t\tcaretY += height - (getVerticalScrollOffset() - oldVScrollOffset);", "-\t\tcaretOffset = getOffsetAtPoint(columnX, caretY);", "-\t\tsetCaretLocation();", "-\t\tif (select) {", "-\t\t\tdoSelection(ST.COLUMN_NEXT);", "+\t\tint availableHeight = 0;", "+\t\tif (topY + lineHeight > clientAreaHeight) {", "+\t\t\tavailableHeight = lineHeight - (clientAreaHeight - topY);", "+\t\tint lineIndex = partialBottomIndex + 1;", "+\t\twhile (height > availableHeight && lineIndex < lineCount) {", "+\t\t\tavailableHeight += renderer.getLineHeight(lineIndex++);", "+\t\t}", "+\t\tint caretHeight = height;", "+\t\tif (wordWrap) {", "+\t\t\tint offsetInLine = caretOffset - content.getOffsetAtLine(caretLine);", "+\t\t\tTextLayout layout = renderer.getTextLayout(caretLine);", "+\t\t\tlineIndex = layout.getLineIndex(offsetInLine);", "+\t\t\tint[] offsets = layout.getLineOffsets();", "+\t\t\tif (lineIndex != 0 && offsetInLine == offsets[lineIndex] && caretAlignment == PREVIOUS_OFFSET_TRAILING) {", "+\t\t\t\tlineIndex--;", "+\t\t\t}", "+\t\t\tcaretHeight += layout.getLineBounds(lineIndex).y;", "+\t\t\trenderer.disposeTextLayout(layout);", "+\t\t}", "+\t\tlineIndex = caretLine;", "+\t\tlineHeight = renderer.getLineHeight(lineIndex);", "+\t\twhile (caretHeight - lineHeight >= 0 && lineIndex < lineCount - 1) {", "+\t\t\tcaretHeight -= lineHeight;", "+\t\t\tlineHeight = renderer.getLineHeight(++lineIndex);", "+\t\t}", "+\t\tcaretOffset = getOffsetAtPoint(columnX, caretHeight, lineIndex);", "+\t\tif (select) doSelection(ST.COLUMN_NEXT);", "+\t\theight = Math.min(height, availableHeight);", "+\t\tscrollVertical(height, true);", "+\t\tif (height == 0) setCaretLocation();", "-\tcolumnX = oldColumnX + hScrollChange;", "+\tcolumnX = oldColumnX + hScrollChange;\t"]}], "num": 28358}
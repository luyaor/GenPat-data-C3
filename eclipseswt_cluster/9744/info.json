{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d20f6a3037df2b127a3c54cd5e7e2b7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f728a1e75896c0a946738d71e02af9c9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "3fa10aec500a4081c70ceb9a57998af702891944", "commitAfterChange": "a84c4f3464a5f713e18d5891323717c2051b011d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static long callJava (long cx, long argc, long vp)", "signatureAfterChange": "  static int callJava (int functionId, long tokenVariant, long argsVariant, long returnPtr)", "diff": ["- */", "-static long /*int*/ callJava (long /*int*/ cx, long /*int*/ argc, long /*int*/ vp) {", "-\tint jsval_sizeof = 8;", "-\tlong /*int*/ argsPtr = vp + 2 * jsval_sizeof;", "-\tnsIVariant resultVariant = null;", "-", "-\tlong /*int*/[] result = new long /*int*/[1];", "-\tint rc = XPCOM.NS_GetServiceManager (result);", "-\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "-", "-\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\tresult[0] = 0;", "-\trc = serviceManager.GetService (XPCOM.NS_IXPCONNECT_CID, IIDStore.GetIID (nsIXPConnect.class), result);", "-\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "-", "-\tnsIXPConnect connect = new nsIXPConnect (result[0]);", "-\tresult[0] = 0;", "-", "-\t/* extract the first argument value (the function id) */", "-\trc = connect.JSValToVariant (cx, argsPtr, result);", "-\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "-\t\tnsIVariant idVariant = new nsIVariant (result[0]);", "-\t\tresult[0] = 0;", "-\t\tshort[] dataType = new short[1];", "-\t\trc = idVariant.GetDataType (dataType);", "-\t\tif (rc == XPCOM.NS_OK && dataType[0] == nsIDataType.VTYPE_INT32) {", "-\t\t\tint[] intResult = new int[1];", "-\t\t\trc = idVariant.GetAsInt32 (intResult); /* PRInt32 */", "-\t\t\tif (rc == XPCOM.NS_OK) {", "-\t\t\t\tint functionId = intResult[0];", "-", "-\t\t\t\t/* get the second argument variant (the token string) */", "-\t\t\t\targsPtr += jsval_sizeof;", "-\t\t\t\trc = connect.JSValToVariant (cx, argsPtr, result);", "-\t\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "-\t\t\t\t\tlong /*int*/ tokenVariant = result[0];", "-\t\t\t\t\tresult[0] = 0;", "-", "-\t\t\t\t\t/* get the third argument variant (the invocation args) */", "-\t\t\t\t\targsPtr += jsval_sizeof;", "-\t\t\t\t\trc = connect.JSValToVariant (cx, argsPtr, result);", "-\t\t\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "-\t\t\t\t\t\tlong /*int*/ argsVariant = result[0];", "-\t\t\t\t\t\tresult[0] = 0;", "-", "-\t\t\t\t\t\t/* invoke the BrowserFunction */", "-\t\t\t\t\t\tresultVariant = new nsIVariant (invokeFunction (functionId, tokenVariant, argsVariant));", "-\t\t\t\t\t\tnew nsISupports (argsVariant).Release ();", "-\t\t\t\t\t}", "-\t\t\t\t\tnew nsISupports (tokenVariant).Release ();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tidVariant.Release ();", "-\t}", "-\tresult[0] = 0;", "-", "-\t/* if the BrowserFunction could not be invoked for some reason then return null to JS */", "-\tif (resultVariant == null) {", "-\t\trc = XPCOM.NS_GetComponentManager (result);", "-\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "-\t\tnsIComponentManager componentManager = new nsIComponentManager (result[0]);", "-\t\tresult[0] = 0;", "-\t\tresultVariant = convertToJS (null, componentManager);", "-\t\tcomponentManager.Release ();", "-\t}", "-", "-\t/* convert the resulting variant to a jsval */", "-\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "-\trc = serviceManager.GetServiceByContractID (aContractID, IIDStore.GetIID (nsIMemory.class), result);", "-\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "-\tserviceManager.Release();", "-", "-\tnsIMemory memory = new nsIMemory (result[0]);", "-\tresult[0] = 0;", "-\tlong /*int*/ jsVal = memory.Alloc (jsval_sizeof);", "-\tC.memset (jsVal, 0, jsval_sizeof);", "-\tlong /*int*/ globalObject = 0;", "-\tif (MozillaVersion.CheckVersion (MozillaVersion.VERSION_XR24)) {", "-\t\tglobalObject = XPCOM.JS_GetGlobalForScopeChain24 (cx);", "-\t} else {", "-\t\tglobalObject = XPCOM.JS_GetGlobalObject (Mozilla.getJSLibPathBytes (), cx);", "-\t}", "-\trc = connect.VariantToJS (cx, globalObject, resultVariant.getAddress (), jsVal);", "-\tresultVariant.Release ();", "-\tconnect.Release ();", "-", "-\tlong /*int*/ returnValue = XPCOM.JS_FALSE;", "-\tif (rc == XPCOM.NS_OK) {", "-\t\t/* write the jsval to the return value slot */", "-\t\tC.memmove (vp, jsVal, jsval_sizeof);", "-\t\treturnValue = XPCOM.JS_TRUE;", "-\t}", "-\tmemory.Free (jsVal);", "-\tmemory.Release ();", "-\treturn returnValue;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "efd2c2b53d6beb3cd183ed01aa9413b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "6b28578ec575cf9b9bc42578b2cd2a249f83e1ad", "commitAfterChange": "6a69a1fd95a7e88062f2270d5c638a035c824208", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  static int callJava (int functionId, long tokenVariant, long argsVariant, long returnPtr)", "signatureAfterChange": " static long callJava (long cx, long argc, long vp)", "diff": ["+ */", "+static long /*int*/ callJava (long /*int*/ cx, long /*int*/ argc, long /*int*/ vp) {", "+\tint jsval_sizeof = 8;", "+\tlong /*int*/ argsPtr = vp + 2 * jsval_sizeof;", "+\tnsIVariant resultVariant = null;", "+", "+\tlong /*int*/[] result = new long /*int*/[1];", "+\tint rc = XPCOM.NS_GetServiceManager (result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\tresult[0] = 0;", "+\trc = serviceManager.GetService (XPCOM.NS_IXPCONNECT_CID, IIDStore.GetIID (nsIXPConnect.class), result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIXPConnect connect = new nsIXPConnect (result[0]);", "+\tresult[0] = 0;", "+", "+\t/* extract the first argument value (the function id) */", "+\trc = connect.JSValToVariant (cx, argsPtr, result);", "+\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\tnsIVariant idVariant = new nsIVariant (result[0]);", "+\t\tresult[0] = 0;", "+\t\tshort[] dataType = new short[1];", "+\t\trc = idVariant.GetDataType (dataType);", "+\t\tif (rc == XPCOM.NS_OK && dataType[0] == nsIDataType.VTYPE_INT32) {", "+\t\t\tint[] intResult = new int[1];", "+\t\t\trc = idVariant.GetAsInt32 (intResult); /* PRInt32 */", "+\t\t\tif (rc == XPCOM.NS_OK) {", "+\t\t\t\tint functionId = intResult[0];", "+", "+\t\t\t\t/* get the second argument variant (the token string) */", "+\t\t\t\targsPtr += jsval_sizeof;", "+\t\t\t\trc = connect.JSValToVariant (cx, argsPtr, result);", "+\t\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t\t\t\tlong /*int*/ tokenVariant = result[0];", "+\t\t\t\t\tresult[0] = 0;", "+", "+\t\t\t\t\t/* get the third argument variant (the invocation args) */", "+\t\t\t\t\targsPtr += jsval_sizeof;", "+\t\t\t\t\trc = connect.JSValToVariant (cx, argsPtr, result);", "+\t\t\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t\t\t\t\tlong /*int*/ argsVariant = result[0];", "+\t\t\t\t\t\tresult[0] = 0;", "+", "+\t\t\t\t\t\t/* invoke the BrowserFunction */", "+\t\t\t\t\t\tresultVariant = new nsIVariant (invokeFunction (functionId, tokenVariant, argsVariant));", "+\t\t\t\t\t\tnew nsISupports (argsVariant).Release ();", "+\t\t\t\t\t}", "+\t\t\t\t\tnew nsISupports (tokenVariant).Release ();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tidVariant.Release ();", "+\t}", "+\tresult[0] = 0;", "+", "+\t/* if the BrowserFunction could not be invoked for some reason then return null to JS */", "+\tif (resultVariant == null) {", "+\t\trc = XPCOM.NS_GetComponentManager (result);", "+\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+\t\tnsIComponentManager componentManager = new nsIComponentManager (result[0]);", "+\t\tresult[0] = 0;", "+\t\tresultVariant = convertToJS (null, componentManager);", "+\t\tcomponentManager.Release ();", "+\t}", "+", "+\t/* convert the resulting variant to a jsval */", "+\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\trc = serviceManager.GetServiceByContractID (aContractID, IIDStore.GetIID (nsIMemory.class), result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+\tserviceManager.Release();", "+", "+\tnsIMemory memory = new nsIMemory (result[0]);", "+\tresult[0] = 0;", "+\tlong /*int*/ jsVal = memory.Alloc (jsval_sizeof);", "+\tC.memset (jsVal, 0, jsval_sizeof);", "+\tlong /*int*/ globalObject = 0;", "+\tglobalObject = XPCOM.JS_GetGlobalObject (Mozilla.getJSLibPathBytes (), cx);", "+\trc = connect.VariantToJS (cx, globalObject, resultVariant.getAddress (), jsVal);", "+\tresultVariant.Release ();", "+\tconnect.Release ();", "+", "+\tlong /*int*/ returnValue = XPCOM.JS_FALSE;", "+\tif (rc == XPCOM.NS_OK) {", "+\t\t/* write the jsval to the return value slot */", "+\t\tC.memmove (vp, jsVal, jsval_sizeof);", "+\t\treturnValue = XPCOM.JS_TRUE;", "+\t}", "+\tmemory.Free (jsVal);", "+\tmemory.Release ();", "+\treturn returnValue;", "+}"]}], "num": 9744}
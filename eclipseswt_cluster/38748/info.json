{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aeb575faa4862331e06b601833bf033a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98cf782c65b6e8aa5d090a0f1f55d38a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "272967205f3824ec29456112026262c64ae69dfa", "commitAfterChange": "fc62fa389f9358a82d98c59fbeba910f7ca8c593", "methodNumberBeforeChange": 164, "methodNumberAfterChange": 162, "signatureBeforeChange": "  LRESULT WM_CONTEXTMENU (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_CONTEXTMENU (int wParam, int lParam)", "diff": ["-\tif (wParam != handle) return null;", "-\t", "-\t/*", "-\t* Feature in Windows.  SHRecognizeGesture() sends an undocumented", "-\t* WM_CONTEXTMENU notification when the flag SHRG_NOTIFY_PARENT is", "-\t* not set.  This causes the context menu to be displayed twice,", "-\t* once by the caller of SHRecognizeGesture() and once from this", "-\t* method.  The fix is to ignore WM_CONTEXTMENU notifications on", "-\t* all WinCE platforms.", "-\t* ", "-\t* NOTE: This only happens on WM2003.  Previous WinCE versions did", "-\t* not support WM_CONTEXTMENU.", "-\t*/", "-\tif (OS.IsWinCE) return null;", "-\t", "-\t/*", "-\t* Feature in Windows.  When the user presses  WM_NCRBUTTONUP,", "-\t* a WM_CONTEXTMENU message is generated.  This happens when", "-\t* the user releases the mouse over a scroll bar.  Normally,", "-\t* window displays the default scrolling menu but applications", "-\t* can process WM_CONTEXTMENU to display a different menu.", "-\t* Typically, an application does not want to supply a special", "-\t* scroll menu.  The fix is to look for a WM_CONTEXTMENU that", "-\t* originated from a mouse event and display the menu when the", "-\t* mouse was released in the client area.", "-\t*/", "-\tint x = 0, y = 0;", "-\tif (lParam != -1) {", "-\t\tPOINT pt = new POINT ();", "-\t\tx = pt.x = (short) (lParam & 0xFFFF);", "-\t\ty = pt.y = (short) (lParam >> 16);", "-\t\tOS.ScreenToClient (handle, pt);", "-\t\tRECT rect = new RECT ();", "-\t\tOS.GetClientRect (handle, rect);", "-\t\tif (!OS.PtInRect (rect, pt)) return null;", "-\t} else {", "-\t\tint pos = OS.GetMessagePos ();", "-\t\tx = (short) (pos & 0xFFFF);", "-\t\ty = (short) (pos >> 16);", "-\t}", "-", "-\t/* Show the menu */", "-\treturn showMenu (x, y) ? LRESULT.ZERO : null;", "+\treturn wmContextMenu (handle, wParam, lParam);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c8dbf44d2f221e428b4a1189c4fc816", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "912f7235b81078eb5b127bdf9e5c55ee4f5a763c", "commitAfterChange": "4d0b24a27232ff40c8169511178d0b60b9efdcc2", "methodNumberBeforeChange": 153, "methodNumberAfterChange": 153, "signatureBeforeChange": "\r \r LRESULT WM_CONTEXTMENU (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_CONTEXTMENU (int wParam, int lParam)", "diff": ["+\tif (wParam != handle) return null;\r", "+\t\r", "+\t/*\r", "+\t* Feature in Windows.  When the user presses  WM_NCRBUTTONUP,\r", "+\t* a WM_CONTEXTMENU message is generated.  This happens when\r", "+\t* the user releases the mouse over a scroll bar.  Normally,\r", "+\t* window displays the default scrolling menu but applications\r", "+\t* can process WM_CONTEXTMENU to display a different menu.\r", "+\t* Typically, an application does not want to supply a special\r", "+\t* scroll menu.  The fix is to look for a WM_CONTEXTMENU that\r", "+\t* originated from a mouse event and display the menu when the\r", "+\t* mouse was released in the client area.\r", "+\t*/\r", "+\tPOINT pt = new POINT ();\r", "+\tpt.x = (short) (lParam & 0xFFFF);\r", "+\tpt.y = (short) (lParam >> 16);\r", "+\tif (pt.x != -1 || pt.y != -1) {\r", "+\t\tRECT rect = new RECT ();\r", "+\t\tOS.GetClientRect (handle, rect);\r", "+\t\tOS.ScreenToClient (handle, pt);\r", "+\t\tif (!OS.PtInRect (rect, pt)) return null;\r", "+\t}\r", "+\t\r", "-\t* have been destroyed but not removed from the control.\r", "+\t* have been destroyed.\r", "-\tif (wParam != handle) return null;\r", "-//\t\tint x = (short) (lParam & 0xFFFF);\r", "-//\t\tint y = (short) (lParam >> 16);\r"]}], "num": 38748}
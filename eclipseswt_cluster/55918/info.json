{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5301eef0d1c6d322c4ca52fb784f8428", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9eb9aafbbe86f4e76243120ee1fe1cd1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "98c6f69fa8161c32de538e355728bb324ae2b917", "commitAfterChange": "2e45d5416828f3b0bb52adac29f41e56427dcb88", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": " public int internal_new_GC (GCData data)", "signatureAfterChange": " public int internal_new_GC (GCData data)", "diff": ["-\t\tOS.GetControlBounds (handle, rect);", "+\t\tOS.GetControlBounds (handle, rect);", "+\t\tif (data != null) {", "+\t\t\tdata.portRect = portRect;", "+\t\t\tdata.controlRect = rect;", "+\t\t}", "+\t", "+\t\tif (data.paintEvent == 0) {", "+\t\t\tif (gcs == null) gcs = new GCData [4];", "+\t\t\tint index = 0;", "+\t\t\twhile (index < gcs.length && gcs [index] != null) index++;", "+\t\t\tif (index == gcs.length) {", "+\t\t\t\tGCData [] newGCs = new GCData [gcs.length + 4];", "+\t\t\t\tSystem.arraycopy (gcs, 0, newGCs, 0, gcs.length);", "+\t\t\t\tgcs = newGCs;", "+\t\t\t}", "+\t\t\tgcs [index] = data;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee87eaea502536765b13500d3c803eda", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/AppFileLocProvider.java", "commitBeforeChange": "c57f6d49ff9af1c5214a225793ae023507e004d2", "commitAfterChange": "0c4f2dac1db651a98bfd8e05aee318617acd8539", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  int getFiles (int prop, int _retval)", "signatureAfterChange": "  int getFiles (int prop, int _retval)", "diff": ["-\t\t\t/* set the first value to the MOZ_PLUGIN_PATH environment variable value if it's defined */", "+\t\t\t/* set the first value(s) to the MOZ_PLUGIN_PATH environment variable value if it's defined */", "-\t\t\t\t\tpluginDirs = new String[3];", "-\t\t\t\t\tpluginDirs[index++] = value;", "+\t\t\t\t\tString separator = System.getProperty (\"path.separator\"); // $NON-NLS-1$", "+\t\t\t\t\tStringTokenizer tokenizer = new StringTokenizer (value, separator);", "+\t\t\t\t\tint count = tokenizer.countTokens ();", "+\t\t\t\t\tpluginDirs = new String[2 + count];", "+\t\t\t\t\twhile (tokenizer.hasMoreTokens ()) {", "+\t\t\t\t\t\tpluginDirs[index++] = tokenizer.nextToken ();", "+\t\t\t\t\t}", "+\t\tint index = 0;", "-\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NULL_POINTER);", "+\t\t\tif (rc != XPCOM.NS_ERROR_FILE_UNRECOGNIZED_PATH) {", "+\t\t\t\t/* value appears to be a valid pathname */", "+\t\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NULL_POINTER);", "+", "+\t\t\t\tnsILocalFile localFile = new nsILocalFile (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\trc = localFile.QueryInterface (nsIFile.NS_IFILE_IID, result); ", "+\t\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NULL_POINTER);", "+\t\t\t\tlocalFile.Release ();", "+", "+\t\t\t\tnsIFile file = new nsIFile (result[0]);", "+\t\t\t\tfiles[index++] = file;", "+\t\t\t}", "-", "-\t\t\tnsILocalFile localFile = new nsILocalFile (result[0]);", "-\t\t    rc = localFile.QueryInterface (nsIFile.NS_IFILE_IID, result); ", "-\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NULL_POINTER);", "-\t\t\tlocalFile.Release ();", "+\t\t}", "-\t\t\tnsIFile file = new nsIFile (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tfiles[i] = file;", "+\t\tif (index < propertyValues.length) {", "+\t\t\t/* there were some invalid values so remove the trailing empty array slots */", "+\t\t\tnsISupports[] temp = new nsISupports [index];", "+\t\t\tSystem.arraycopy (files, 0, temp, 0, index);", "+\t\t\tfiles = temp;", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4890e74d8be45cadea1cb110ff62afb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "4b2efc18e9766c038130b73874c789ddb36da6d2", "commitAfterChange": "7f498f5e56b7c0fade96b51d0436413dc870fa9b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public FontData[] getFontList (String faceName, boolean scalable)", "signatureAfterChange": " public FontData[] getFontList (String faceName, boolean scalable)", "diff": ["+\tString systemFontName = systemFont.getFontData()[0].getName();", "+\tboolean systemFontIncluded = false;", "+\t\t\t\t\t\tif (Compatibility.equalsIgnoreCase(systemFontName, name)) {", "+\t\t\t\t\t\t\tsystemFontIncluded = true;", "+\t\t\t\t\t\t}", "+\tif (!systemFontIncluded && (faceName == null || Compatibility.equalsIgnoreCase(faceName, systemFontName))) {", "+\t\t/*", "+\t\t * Feature in Mac OS X 10.10: The default system font \".Helvetica Neue DeskInterface\"", "+\t\t * is not available from the NSFontManager. The fix is to include it manually if necessary.", "+\t\t */", "+\t\tif (count == fds.length) {", "+\t\t\tFontData[] newFds = new FontData[fds.length + 1];", "+\t\t\tSystem.arraycopy(fds, 0, newFds, 0, fds.length);", "+\t\t\tfds = newFds;", "+\t\t}", "+\t\tfds[count++] = systemFont.getFontData()[0];", "+\t}"]}], "num": 55918}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2856d05e3b64b803a6d5401414411e16", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbfe91c685b0a17f9b50125abb3e18b2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "108b9dd38cc7c1124205fb1899f8aad5ad317989", "commitAfterChange": "5014eebfedd0f623cdc5c8c21ddc6fda2b771129", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  void clearText ()", "signatureAfterChange": "  void clearText ()", "diff": ["-\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {", "-\t\tOS.g_signal_handlers_block_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "-\t\tif ((style & SWT.READ_ONLY) != 0) {", "-\t\t\tint index = OS.gtk_combo_box_get_active (handle);", "-\t\t\tif (index != -1) {", "-\t\t\t\tint /*long*/ modelHandle = OS.gtk_combo_box_get_model (handle);", "-\t\t\t\tint /*long*/ [] ptr = new int /*long*/ [1];", "-\t\t\t\tint /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());", "-\t\t\t\tOS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);", "-\t\t\t\tOS.gtk_tree_model_get (modelHandle, iter, 0, ptr, -1);", "-\t\t\t\tOS.g_free (iter);", "-\t\t\t\tif (ptr [0] != 0 && OS.strlen (ptr [0]) > 0) postEvent (SWT.Modify);", "-\t\t\t\tOS.g_free (ptr [0]);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tOS.gtk_entry_set_text (entryHandle, new byte[1]);", "+\tOS.g_signal_handlers_block_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "+\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\tint index = OS.gtk_combo_box_get_active (handle);", "+\t\tif (index != -1) {", "+\t\t\tint /*long*/ modelHandle = OS.gtk_combo_box_get_model (handle);", "+\t\t\tint /*long*/ [] ptr = new int /*long*/ [1];", "+\t\t\tint /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());", "+\t\t\tOS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);", "+\t\t\tOS.gtk_tree_model_get (modelHandle, iter, 0, ptr, -1);", "+\t\t\tOS.g_free (iter);", "+\t\t\tif (ptr [0] != 0 && OS.strlen (ptr [0]) > 0) postEvent (SWT.Modify);", "+\t\t\tOS.g_free (ptr [0]);", "-\t\tOS.gtk_combo_box_set_active (handle, -1);", "- \t\tOS.g_signal_handlers_unblock_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);", "+\t} else {", "+\t\tOS.gtk_entry_set_text (entryHandle, new byte[1]);", "+\tOS.gtk_combo_box_set_active (handle, -1);", "+\tOS.g_signal_handlers_unblock_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9772aa75b9081bb6fd30a89ba1da307c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "28611873c812080da03092456ee7cc4c93ef80a3", "commitAfterChange": "e657e76e5131e900496ccd41899277450879646c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t\t\tpublic int windowProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int transparentProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["-\t\tObject windowProc = new Object () {", "-\t\t\tpublic int windowProc (int hwnd, int msg, int wParam, int lParam) {", "-\t\t\t\tswitch (msg) {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* We typically do not want to answer that the transparent window is", "-\t\t\t\t\t* transparent to hits since doing so negates the effect of having it", "-\t\t\t\t\t* to grab events.  However, clients of the tracker should not be aware", "-\t\t\t\t\t* of this transparent window.  Therefore if there is a hit query", "-\t\t\t\t\t* performed as a result of client code then answer that the transparent", "-\t\t\t\t\t* window is transparent to hits so that its existence will not impact", "-\t\t\t\t\t* the client.", "-\t\t\t\t\t*/", "-\t\t\t\t\tcase OS.WM_NCHITTEST:", "-\t\t\t\t\t\tif (inEvent) return OS.HTTRANSPARENT;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.WM_SETCURSOR:", "-\t\t\t\t\t\tif (clientCursor != 0) {", "-\t\t\t\t\t\t\tOS.SetCursor (clientCursor);", "-\t\t\t\t\t\t\treturn 1;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (resizeCursor != 0) {", "-\t\t\t\t\t\t\tOS.SetCursor (resizeCursor);", "-\t\t\t\t\t\t\treturn 1;", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn OS.CallWindowProc (oldProc, hwnd, msg, wParam, lParam);", "-\t\t\t}", "+", "+int transparentProc (int hwnd, int msg, int wParam, int lParam) {", "+\tswitch (msg) {", "+\t\t/*", "+\t\t* We typically do not want to answer that the transparent window is", "+\t\t* transparent to hits since doing so negates the effect of having it", "+\t\t* to grab events.  However, clients of the tracker should not be aware", "+\t\t* of this transparent window.  Therefore if there is a hit query", "+\t\t* performed as a result of client code then answer that the transparent", "+\t\t* window is transparent to hits so that its existence will not impact", "+\t\t* the client.", "+\t\t*/", "+\t\tcase OS.WM_NCHITTEST:", "+\t\t\tif (inEvent) return OS.HTTRANSPARENT;", "+\t\t\tbreak;", "+\t\tcase OS.WM_SETCURSOR:", "+\t\t\tif (clientCursor != 0) {", "+\t\t\t\tOS.SetCursor (clientCursor);", "+\t\t\t\treturn 1;", "+\t\t\t}", "+\t\t\tif (resizeCursor != 0) {", "+\t\t\t\tOS.SetCursor (resizeCursor);", "+\t\t\t\treturn 1;", "+\t\t\t}", "+\t}", "+\treturn OS.CallWindowProc (oldProc, hwnd, msg, wParam, lParam);", "+}"]}], "num": 37169}
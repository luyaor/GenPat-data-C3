{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "82635bf16b7df18d3178d6b4031fc0ce", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68f88fbfbc5b1d1ed8b932049f5d849b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "1215228ca28cd877225ea2d6d4c5dd6eb8a8d47a", "commitAfterChange": "437b26428f10a35a326ef6b319e71308ad9cdb90", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  int drawProc (int widget, int damage)", "signatureAfterChange": "  int drawProc (int widget, int damage)", "diff": ["-\tdrawWidget (widget, damage);", "+\tif (widget <=0) return OS.Pt_CONTINUE; ", "+\tdrawWidget (widget, damage );", "-\t", "-\t/* Translate the damage to widget coordinates */", "-\tshort [] widgetX = new short [1];", "-\tshort [] widgetY = new short [1];", "-\tOS.PtGetAbsPosition (handle, widgetX, widgetY);", "-\tshort [] shellX = new short [1];", "-\tshort [] shellY = new short [1];", "-\tint shellHandle = OS.PtFindDisjoint (handle);", "-\tOS.PtGetAbsPosition (shellHandle, shellX, shellY);", "-\tPhPoint_t pt = new PhPoint_t ();", "-\tpt.x = (short) (shellX [0] - widgetX [0]);", "-\tpt.y = (short) (shellY [0] - widgetY [0]);", "-\tdamage = OS.PhCopyTiles (damage);", "-\tdamage = OS.PhTranslateTiles (damage, pt);", "-\t", "+\tPhPoint_t pt = new PhPoint_t ();  ", "+\tPhRect_t widRect = new PhRect_t();    ", "+\tOS.PtWidgetExtent(widget, widRect) ;", "+\tOS.PtWidgetOffset(widget, pt);", "+\tpt.x += widRect.ul_x;", "+\tpt.y += widRect.ul_y;", "+\tdamage = OS.PhCopyTiles( damage );", "+\tint transPoint = OS.malloc ( PhPoint_t.sizeof);", "+\tOS.memmove(transPoint, pt, PhPoint_t.sizeof);", "+\tOS.PhDeTranslateTiles(damage, transPoint);", "+\tOS.free(transPoint);", "+\tOS.memmove (tile, damage, PhTile_t.sizeof);", "-\tif (tile.next != 0 && noMerge) {", "-\t\twhile (tile.next != 0) {", "-\t\t\tOS.memmove (tile, tile.next, PhTile_t.sizeof);", "-\t\t\tif (tile.rect_ul_x != tile.rect_lr_x || tile.rect_ul_y != tile.rect_lr_y) {", "-\t\t\t\tEvent event = new Event ();", "-\t\t\t\tevent.x = tile.rect_ul_x;", "-\t\t\t\tevent.y = tile.rect_ul_y;", "-\t\t\t\tevent.width = tile.rect_lr_x - tile.rect_ul_x + 1;", "-\t\t\t\tevent.height = tile.rect_lr_y - tile.rect_ul_y + 1;", "-\t\t\t\tGCData data = new GCData();", "-\t\t\t\tif (OS.QNX_MAJOR > 6 || (OS.QNX_MAJOR == 6 && (OS.QNX_MINOR > 2 || (OS.QNX_MINOR == 2 && OS.QNX_MICRO >= 1)))) {", "-\t\t\t\t\tdata.paint = true;", "-\t\t\t\t}", "-\t\t\t\tGC gc = event.gc = GC.photon_new (this, data);", "-\t\t\t\tgc.setClipping (event.x, event.y, event.width, event.height);", "-\t\t\t\tsendEvent (SWT.Paint, event);", "-\t\t\t\tif (isDisposed ()) break;", "-\t\t\t\tgc.dispose ();", "-\t\t\t\tevent.gc = null;", "-\t\t\t}", "-\t\t}", "-\t} else {", "-\t\tif (tile.rect_ul_x != tile.rect_lr_x || tile.rect_ul_y != tile.rect_lr_y) {", "+\tif (tile.next != 0 && noMerge) ", "+\t{", "+\t\tOS.memmove (tile, tile.next, PhTile_t.sizeof);", "+\t\twhile (tile.next != 0) ", "+\t\t{", "-\t\t\tevent.x = tile.rect_ul_x;", "-\t\t\tevent.y = tile.rect_ul_y;", "-\t\t\tRegion region = Region.photon_new (display, tile.next);", "-\t\t\tGCData data = new GCData();", "-\t\t\tif (OS.QNX_MAJOR > 6 || (OS.QNX_MAJOR == 6 && (OS.QNX_MINOR > 2 || (OS.QNX_MINOR == 2 && OS.QNX_MICRO >= 1)))) {", "-\t\t\t\tdata.paint = true;", "-\t\t\t}", "-\t\t\tGC gc = event.gc = GC.photon_new (this, data);", "-\t\t\tgc.setClipping (region);", "+\t\t\tevent.x = tile.rect_ul_x;", "+\t\t\tevent.y = tile.rect_ul_y; ", "+\t\t\tGC gc = event.gc = new GC (this);", "+\t\t\tgc.setClipping(event.x, event.y, event.width, event.height);", "+\t\t\tsendEvent (SWT.Paint, event);", "+\t\t\tif (isDisposed ()) break;", "+\t\t\tgc.dispose ();", "+\t\t\tevent.gc = null;", "+\t\t\tif ( tile.next != 0 )", "+\t\t\t\tOS.memmove (tile, tile.next, PhTile_t.sizeof);", "+\t\t}", "+\t} ", "+\telse ", "+\t{", "+\t\tint rect1 = OS.malloc (PhRect_t.sizeof);", "+\t\tint rect2 = OS.malloc (PhRect_t.sizeof);", "+\t\tOS.memmove (rect1, tile, PhRect_t.sizeof);", "+\t\tOS.memmove (rect2, widRect, PhRect_t.sizeof);", "+\t\tint inter = OS.PhRectIntersect(rect1, rect2);", "+\t\tif ( inter == 1 )", "+\t\t{", "+\t\t\tOS.memmove(widRect, rect1, PhRect_t.sizeof);", "+\t\t\tEvent event = new Event ();", "+\t\t\tevent.x = widRect.ul_x;", "+\t\t\tevent.y = widRect.ul_y; ", "+\t\t\tevent.width = widRect.lr_x - widRect.ul_x + 1;", "+\t\t\tevent.height = widRect.lr_y - widRect.ul_y + 1;", "+            GC gc = event.gc = new GC (this);", "+            gc.setClipping(event.x, event.y, event.width, event.height );", "+\t\tOS.free(rect1);", "+\t\tOS.free(rect2);", "-\tOS.PhFreeTiles (damage);", "+\tOS.PhFreeTiles( damage );"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c06ccf89a30e53a84422bf1369a67947", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "5b2c3a06efe9f03e6d0b95d1830abbd80f01c4a5", "commitAfterChange": "7265e03acce403fc13fb49544db1e7781932cd4c", "methodNumberBeforeChange": 131, "methodNumberAfterChange": 131, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\t\t\tint index = 0;", "+\t\t\t\t\tint index = 0, count = 0;", "-\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\tcount = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "-\t\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "-\t\t\t\t\t\tRECT textRect = item.getBounds (index, true, false, false, false, true, hDC);", "-\t\t\t\t\t\t\t\tdrawBackground (hDC, textRect, OS.GetBkColor (hDC));", "+\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t* Feature in Windows.  When the tree has the style", "+\t\t\t\t\t\t\t\t* TVS_FULLROWSELECT, the background color for the", "+\t\t\t\t\t\t\t\t* entire row is filled when an item is painted,", "+\t\t\t\t\t\t\t\t* drawing on top of any custom drawing.  The fix", "+\t\t\t\t\t\t\t\t* is to emulate TVS_FULLROWSELECT.", "+\t\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\t\t\t\tfillBackground (hDC, OS.GetBkColor (hDC), rect);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tRECT textRect = item.getBounds (index, true, false, false, false, true, hDC);", "+\t\t\t\t\t\t\t\t\tdrawBackground (hDC, textRect, OS.GetBkColor (hDC));", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\tOS.SaveDC (hDC);", "-\t\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-\t\t\t\t\tif (clipRect != null) {", "-\t\t\t\t\t\tif (!printClient && (bits & OS.TVS_FULLROWSELECT) == 0) {", "-\t\t\t\t\t\t\tint hRgn = OS.CreateRectRgn (clipRect.left, clipRect.top, clipRect.right, clipRect.bottom);", "-\t\t\t\t\t\t\tOS.SelectClipRgn (hDC, hRgn);", "-\t\t\t\t\t\t\tOS.DeleteObject (hRgn);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (clrText == -1 && clrTextBk == -1 && hFont == -1) {", "-\t\t\t\t\t\treturn new LRESULT (OS.CDRF_DODEFAULT | OS.CDRF_NOTIFYPOSTPAINT);\t", "-\t\t\t\t\t}", "-\t\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "-\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* Feature in Windows.  Windows does not fill the entire cell", "-\t\t\t\t\t\t* with the background color when TVS_FULLROWSELECT is not set.", "-\t\t\t\t\t\t* The fix is to fill it, event when the item is selected.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "-\t\t\t\t\t\t\tif (hwndHeader != 0) {", "-\t\t\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "-\t\t\t\t\t\t\t\tif (count != 0) {", "-\t\t\t\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "-\t\t\t\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "-\t\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, index, hdItem);", "-\t\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.left + hdItem.cxy, nmcd.bottom);", "-\t\t\t\t\t\t\t\t\tif (OS.COMCTL32_MAJOR < 6 || !OS.IsAppThemed ()) {", "-\t\t\t\t\t\t\t\t\t\tRECT itemRect = new RECT ();", "-\t\t\t\t\t\t\t\t\t\titemRect.left = item.handle;", "-\t\t\t\t\t\t\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, itemRect) != 0) {", "-\t\t\t\t\t\t\t\t\t\t\trect.left = Math.min (itemRect.left, rect.right);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (clrTextBk != -1) fillBackground (hDC, clrTextBk, rect);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Feature in Windows.  When the tree has the style", "+\t\t\t\t\t* TVS_FULLROWSELECT, the background color for the", "+\t\t\t\t\t* entire row is filled when an item is painted,", "+\t\t\t\t\t* drawing on top of any custom drawing.  The fix", "+\t\t\t\t\t* is to emulate TVS_FULLROWSELECT.", "+\t\t\t\t\t*/", "+\t\t\t\t\tif (selected) {", "+\t\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\t\t\t\t\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "+\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\t\t\tfillBackground (hDC, OS.GetBkColor (hDC), rect);", "-\t\t\t\t\t\tif (!selected) {", "+\t\t\t\t\t}", "+\t\t\t\t\tLRESULT result = null;", "+\t\t\t\t\tif (clrText == -1 && clrTextBk == -1 && hFont == -1) {", "+\t\t\t\t\t\tresult = new LRESULT (OS.CDRF_DODEFAULT | OS.CDRF_NOTIFYPOSTPAINT);\t", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tresult = new LRESULT (OS.CDRF_NEWFONT | OS.CDRF_NOTIFYPOSTPAINT);", "+\t\t\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "+\t\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "-\t\t\t\t\t\t\tnmcd.clrTextBk = clrTextBk == -1 ? getBackgroundPixel () : clrTextBk;", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t* Feature in Windows.  Windows does not fill the entire cell", "+\t\t\t\t\t\t\t* with the background color when TVS_FULLROWSELECT is not set.", "+\t\t\t\t\t\t\t* The fix is to fill the cell with the background color.", "+\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\tif (!selected && clrTextBk != -1) {", "+\t\t\t\t\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\t\t\t\t\t\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "+\t\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\t\t\t\tif (count != 0 && hwndHeader != 0) {", "+\t\t\t\t\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "+\t\t\t\t\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "+\t\t\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, index, hdItem);", "+\t\t\t\t\t\t\t\t\t\tnmcd.right = nmcd.left + hdItem.cxy;", "+\t\t\t\t\t\t\t\t\t\tif (OS.COMCTL32_MAJOR < 6 || !OS.IsAppThemed ()) {", "+\t\t\t\t\t\t\t\t\t\t\tRECT itemRect = new RECT ();", "+\t\t\t\t\t\t\t\t\t\t\titemRect.left = item.handle;", "+\t\t\t\t\t\t\t\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, itemRect) != 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\trect.left = Math.min (itemRect.left, rect.right);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tfillBackground (hDC, clrTextBk, rect);", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\t\t\t\t\t\tfillBackground (hDC, clrTextBk, rect);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tnmcd.clrTextBk = clrTextBk == -1 ? getBackgroundPixel () : clrTextBk;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\treturn new LRESULT (OS.CDRF_NEWFONT | OS.CDRF_NOTIFYPOSTPAINT);", "+\t\t\t\t\tOS.SaveDC (hDC);", "+\t\t\t\t\tif (clipRect != null) {", "+\t\t\t\t\t\tint hRgn = OS.CreateRectRgn (clipRect.left, clipRect.top, clipRect.right, clipRect.bottom);", "+\t\t\t\t\t\tOS.SelectClipRgn (hDC, hRgn);", "+\t\t\t\t\t\tOS.DeleteObject (hRgn);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn result;", "-\t\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-\t\t\t\t\tRECT clientRect = new RECT ();", "+\t\t\t\t\tRECT clientRect = new RECT (), focusRect = null;", "-\t\t\t\t\t\t\tboolean drawItem = true, drawText = true, drawImage = true, drawBackground = true;", "+\t\t\t\t\t\t\tboolean drawItem = true, drawText = true, drawImage = true, drawBackground = false;", "-\t\t\t\t\t\t\t\tdrawItem = drawImage = drawText = drawBackground = false;", "+\t\t\t\t\t\t\t\tdrawItem = drawImage = drawText = false;", "-\t\t\t\t\t\t\t\tif (control != null) {", "-\t\t\t\t\t\t\t\t\trect.left = item.handle;", "-\t\t\t\t\t\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect) != 0) {", "-\t\t\t\t\t\t\t\t\t\tdrawItem = drawText = drawBackground = true;", "+\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t* Feature in Windows.  When the tree has the style", "+\t\t\t\t\t\t\t\t* TVS_FULLROWSELECT, the background color for the", "+\t\t\t\t\t\t\t\t* entire row is filled when an item is painted,", "+\t\t\t\t\t\t\t\t* drawing on top of any custom drawing.  The fix", "+\t\t\t\t\t\t\t\t* is to emulate TVS_FULLROWSELECT.", "+\t\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\t\t\t\tOS.SetRect (rect, width, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\t\t\t\tif ((selected || control == null) && !ignoreDraw && !ignoreDrawSelected) {", "+\t\t\t\t\t\t\t\t\t\tfillBackground (hDC, OS.GetBkColor (hDC), rect);", "-\t\t\t\t\t\t\t\t\trect.bottom -= gridWidth;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (control != null) {", "+\t\t\t\t\t\t\t\t\tdrawItem = drawText = drawBackground = true;", "+\t\t\t\t\t\t\t\t\trect = item.getBounds (index, true, false, false, false, true, hDC);", "+\t\t\t\t\t\t\t\t\tif (linesVisible) {", "+\t\t\t\t\t\t\t\t\t\trect.right++;", "+\t\t\t\t\t\t\t\t\t\trect.bottom++;", "+\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "-\t\t\t\t\t\t\t\t\t/* set the default colors for the row */", "-\t\t\t\t\t\t\t\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "-\t\t\t\t\t\t\t\t\t\tOS.SetTextColor (hDC, getForegroundPixel ());", "-\t\t\t\t\t\t\t\t\t\tOS.SetBkColor (hDC, getBackgroundPixel ());", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (!selected || (index != 0 && (bits & OS.TVS_FULLROWSELECT) == 0)) {", "+\t\t\t\t\t\t\t\tboolean drawForeground = false;", "+\t\t\t\t\t\t\t\tif (selected) {", "+\t\t\t\t\t\t\t\t\tif (i != 0 && (style & SWT.FULL_SELECTION) == 0) {", "+\t\t\t\t\t\t\t\t\t\tOS.SetTextColor (hDC, getForegroundPixel ());", "+\t\t\t\t\t\t\t\t\t\tOS.SetBkColor (hDC, getBackgroundPixel ());", "+\t\t\t\t\t\t\t\t\t\tdrawForeground = drawBackground = true;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tdrawForeground = drawBackground = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (drawForeground) {", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tif (drawBackground) {", "-\t\t\t\t\t\t\t/* needed or tree expand draws in the next column */", "-\t\t\t\t\t\t\tif (clrTextBk == -1) {", "-\t\t\t\t\t\t\t\tif (printClient || (bits & OS.TVS_FULLROWSELECT) != 0) {", "-\t\t\t\t\t\t\t\t\tclrTextBk = OS.GetBkColor (hDC);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (drawBackground && !ignoreDraw && !ignoreDrawSelected) {", "+\t\t\t\t\t\t\t\tif (!ignoreDraw && !ignoreDrawSelected) {", "-\t\t\t\t\t\t\t\t\t\tfillBackground (hDC, clrTextBk, rect);", "+\t\t\t\t\t\t\t\t\t\tif (drawBackground) fillBackground (hDC, clrTextBk, rect);", "-\t\t\t\t\t\t\t\t\t\t\tif (i == 0 && (bits & OS.TVS_FULLROWSELECT) == 0) {", "+\t\t\t\t\t\t\t\t\t\t\tif (i == 0) {", "-\t\t\t\t\t\t\t\t\t\t\t\tfillImageBackground (hDC, control, rect);", "+\t\t\t\t\t\t\t\t\t\t\t\tif (drawBackground) fillImageBackground (hDC, control, rect);", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (hItem == item.handle) OS.DrawFocusRect (hDC, rect);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\tif (hItem == item.handle) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tfocusRect = new RECT ();", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tOS.SetRect (focusRect, rect.left, rect.top, rect.right, rect.bottom);", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\tfillImageBackground (hDC, control, rect);", "+\t\t\t\t\t\t\t\t\t\t\t\tif (drawBackground) fillImageBackground (hDC, control, rect);", "-\t\t\t\t\t\t\t\tgc.setClipping (cellRect.left, cellRect.top, cellWidth, cellHeight);\t\t\t\t\t\tsendEvent (SWT.PaintItem, event);", "+\t\t\t\t\t\t\t\tgc.setClipping (cellRect.left, cellRect.top, cellWidth, cellHeight);", "+\t\t\t\t\t\t\t\tsendEvent (SWT.PaintItem, event);", "-\t\t\t\t\tif (count > 0) {", "-\t\t\t\t\t\tif (printClient || (bits & OS.TVS_FULLROWSELECT) != 0) {", "-\t\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\t\tOS.SetRect (rect, x, nmcd.top, nmcd.right, nmcd.bottom - gridWidth);", "-\t\t\t\t\t\t\tfillBackground (hDC, OS.GetBkColor (hDC), rect);", "-\t\t\t\t\t\t\t/* This code is intentionally commented */", "-\t\t\t\t\t\t\t//drawBackground (hDC, rect);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\t\tif (printClient && (bits & OS.TVS_FULLROWSELECT) != 0) {", "+\t\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "-\t\t\t\t\t\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "-\t\t\t\t\t\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "-\t\t\t\t\t\t\t\tif (handle == OS.GetFocus ()) {", "-\t\t\t\t\t\t\t\t\tint uiState = OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "-\t\t\t\t\t\t\t\t\tif ((uiState & OS.UISF_HIDEFOCUS) == 0) {", "-\t\t\t\t\t\t\t\t\t\trect.left = item.handle;", "-\t\t\t\t\t\t\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect) != 0) {", "-\t\t\t\t\t\t\t\t\t\t\tint hItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "-\t\t\t\t\t\t\t\t\t\t\tif (hItem == item.handle) {", "-\t\t\t\t\t\t\t\t\t\t\t\tOS.SetRect (rect, rect.right, nmcd.top, nmcd.right, nmcd.bottom);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\trect.left = nmcd.left;", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\tif (focusRect != null && (style & SWT.FULL_SELECTION) == 0) {", "+\t\t\t\t\t\tOS.DrawFocusRect (hDC, focusRect);", "+\t\t\t\t\t}"]}], "num": 35783}
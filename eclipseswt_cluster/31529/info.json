{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "92819b009e7dc34c80ead948fe4bd68f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76676a21468ff9b9c220f3b2d43762e3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGeneratorUI.java", "commitBeforeChange": "961675a39464cdd8f0eb4b7a0d6422470b6619a5", "commitAfterChange": "ebac5ac4f54306fed9009986f7bcaeafd42136d7", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 19, "signatureBeforeChange": " \t\t \tpublic void open()", "signatureAfterChange": " \t \tpublic void open()", "diff": ["-\tpublic void open() {", "-\t\tdisplay = new Display();", "-\t\tshell = new Shell(display);", "-\t\tshell.setLayout(new GridLayout(3, false));", "-", "-\t\tComposite parent = shell;", "-", "-\t\tGridData data;", "-\t\tLabel label = new Label(shell, SWT.NONE);", "-\t\tlabel = new Label(shell, SWT.NONE);", "-\t\tlabel.setText(\"Properties:\");", "-\t\tComposite panel = new Composite(parent, SWT.NONE);", "-\t\tdata = new GridData(GridData.FILL_VERTICAL);", "-\t\tdata.verticalSpan = 2;", "-\t\tpanel.setLayoutData(data);", "-\t\tpanel.setLayout(new GridLayout(1, true));", "-\t\t", "-\t\tButton generate = new Button(panel, SWT.PUSH);", "-\t\tgenerate.setText(\"Generate\");", "-\t\tgenerate.addListener(SWT.Selection, new Listener() {", "-\t\t\tpublic void handleEvent(Event event) {", "-\t\t\t\tTreeItem[] items = nodesTree.getItems();", "-\t\t\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\t\t\tupdateGenAttribute(items[i]);", "-\t\t\t\t}", "-\t\t\t\tgen.generateAll();", "-", "-\t\tnodesTree = new Tree(parent, SWT.SINGLE | SWT.CHECK | SWT.BORDER | SWT.FULL_SELECTION);", "-\t\tattribTable = new Table(parent, SWT.BORDER | SWT.FULL_SELECTION);", "-\t\tdata = new GridData(GridData.FILL_BOTH);", "-\t\tattribTable.setLayoutData(data);", "-\t\tattribTable.setLinesVisible(true);", "-\t\tattribTable.setHeaderVisible(true);", "-\t\tTableColumn nameColumn = new TableColumn(attribTable, SWT.NONE);", "-\t\tnameColumn.setText(\"Name\");", "-\t\tnameColumn.pack();", "-\t\tTableColumn valueColumn = new TableColumn(attribTable, SWT.NONE);", "-\t\tvalueColumn.setText(\"Value\");", "-\t\tvalueColumn.pack();", "-", "-", "+\t", "+\tpublic void open() {", "+\t\tdisplay = new Display();", "+\t\tshell = new Shell(display);", "+", "+\t\tComposite parent = shell;", "+\t\tFormLayout layout = new FormLayout();", "+\t\tparent.setLayout(layout);", "+\t\t", "+\t\tComposite signaturePanel = createSignaturesPanel(parent);", "+\t\tfinal Sash sash = new Sash(parent, SWT.SMOOTH | SWT.VERTICAL);", "+\t\tComposite propertiesPanel = createPropertiesPanel(parent);", "+\t\tComposite actionsPanel = createActionsPanel(parent);", "+", "+\t\tFormData data;", "+\t\t", "+\t\tdata = new FormData();\t\t", "+\t\tdata.left = new FormAttachment(0, 0);", "+\t\tdata.top = new FormAttachment(0, 0);", "+\t\tdata.right = new FormAttachment(sash, 0);", "+\t\tdata.bottom = new FormAttachment(100, 0);", "+\t\tsignaturePanel.setLayoutData(data);", "+\t\t", "+\t\tdata = new FormData();", "+\t\tdata.left = new FormAttachment(null, Math.max(200, shell.getSize().x / 2));", "+\t\tdata.top = new FormAttachment(0, 0);", "+\t\tdata.bottom = new FormAttachment(100, 0);", "+\t\tsash.setLayoutData(data);", "+\t\t", "+\t\tdata = new FormData();", "+\t\tdata.left = new FormAttachment(sash, sash.computeSize(SWT.DEFAULT, SWT.DEFAULT).x);", "+\t\tdata.top = new FormAttachment(0, 0);", "+\t\tdata.right = new FormAttachment(actionsPanel, 0);", "+\t\tdata.bottom = new FormAttachment(100, 0);", "+\t\tpropertiesPanel.setLayoutData(data);", "+", "+\t\tdata = new FormData();", "+\t\tdata.top = new FormAttachment(0, 0);", "+\t\tdata.right = new FormAttachment(100, 0);", "+\t\tdata.bottom = new FormAttachment(100, 0);", "+\t\tactionsPanel.setLayoutData(data);", "+\t\t", "+\t\tsash.addListener(SWT.Selection, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\tComposite parent = sash.getParent();", "+\t\t\t\tRectangle rect = parent.getClientArea();", "+\t\t\t\tevent.x = Math.min (Math.max (event.x, 60), rect.width - 60);", "+\t\t\t\tif (event.detail != SWT.DRAG) {", "+\t\t\t\t\tFormData data = (FormData)sash.getLayoutData();", "+\t\t\t\t\tdata.left.offset = event.x;", "+\t\t\t\t\tparent.layout(true);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13382557181bac1ce00db2c9026b867b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/cocoa/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "4edc576de20a88abac088ae701d29ce3e54ede4f", "commitAfterChange": "c2ec875b36ecf39df432358c14d183b7d7f45fe0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 6, "signatureBeforeChange": "  int handleCallback(int nextHandler, int theEvent)", "signatureAfterChange": "  static int browserProc(int id, int sel, int arg0, int arg1)", "diff": ["+", "+static int browserProc(int id, int sel, int arg0, int arg1) {", "+\tif (sel == OS.sel_setTag_1) {", "+\t\tOS.object_setInstanceVariable(id, \"tag\", arg0);", "+\t\treturn 0;", "+\t}", "+\tint jniRef = OS.objc_msgSend(id, OS.sel_tag);", "+\tif (jniRef == 0 || jniRef == -1) return 0;", "+\tSafari widget = (Safari)OS.JNIGetObject(jniRef);", "+\tif (widget == null) return 0;", "+\tif (sel == OS.sel_webView_1didFinishLoadForFrame_1) {", "+\t\twidget.webView_didFinishLoadForFrame(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1didStartProvisionalLoadForFrame_1) {", "+\t\twidget.webView_didStartProvisionalLoadForFrame(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1didCommitLoadForFrame_1) {", "+\t\twidget.webView_didCommitLoadForFrame(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1setFrame_1) {", "+\t\twidget.webView_setFrame(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1createWebViewWithRequest_1) {", "+\t\treturn widget.webView_createWebViewWithRequest(arg0, arg1);\t\t", "+\t} else if (sel == OS.sel_webView_1setStatusBarVisible_1) {", "+\t\twidget.webView_setStatusBarVisible(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1setResizable_1) {", "+\t\twidget.webView_setResizable(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1setStatusText_1) {", "+\t\twidget.webView_setStatusText(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1setToolbarsVisible_1) {", "+\t\twidget.webView_setToolbarsVisible(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1runJavaScriptAlertPanelWithMessage_1) {", "+\t\twidget.webView_runJavaScriptAlertPanelWithMessage(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1runJavaScriptConfirmPanelWithMessage_1) {", "+\t\treturn widget.webView_runJavaScriptConfirmPanelWithMessage(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1runOpenPanelForFileButtonWithResultListener_1) {", "+\t\twidget.webView_runOpenPanelForFileButtonWithResultListener(arg0, arg1);", "+\t} else if (sel == OS.sel_download_1decideDestinationWithSuggestedFilename_1) {", "+\t\twidget.download_decideDestinationWithSuggestedFilename(arg0, arg1);", "+\t} ", "+\treturn 0;", "+}", "-int handleCallback(int nextHandler, int theEvent) {", "-\tint eventKind = OS.GetEventKind(theEvent);", "-\tswitch (OS.GetEventClass(theEvent)) {", "-\t\tcase OS.kEventClassControl:", "-\t\t\tswitch (eventKind) {", "-\t\t\t\tcase OS.kEventControlSetCursor: {", "-\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t}", "-\t\t\t\tcase OS.kEventControlDraw: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t * Bug on Safari. The web view cannot be obscured by other views above it.", "-\t\t\t\t\t * This problem is specified in the apple documentation for HiWebViewCreate.", "-\t\t\t\t\t * The workaround is to don't draw the web view when it is not visible.", "-\t\t\t\t\t */", "-\t\t\t\t\tif (!browser.isVisible ()) return OS.noErr;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase OS.kEventControlOwningWindowChanged: {", "-\t\t\t\t\t/* Reparent the web view handler */", "-\t\t\t\t\tint window = OS.GetControlOwner(browser.handle);", "-\t\t\t\t\tint[] contentView = new int[1];", "-\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(window), OS.kHIViewWindowContentID(), contentView);", "-\t\t\t\t\tOS.HIViewAddSubview(contentView[0], webViewHandle);", "-\t\t\t\t\t", "-\t\t\t\t\t/* Reset the kEventWindowBoundsChanged handler */", "-\t\t\t\t\tOS.RemoveEventHandler(windowBoundsHandler);", "-\t\t\t\t\tint[] mask2 = new int[] {", "-\t\t\t\t\t\tOS.kEventClassWindow, OS.kEventWindowBoundsChanged,", "-\t\t\t\t\t};", "-\t\t\t\t\tint[] outRef = new int[1];", "-\t\t\t\t\tOS.InstallEventHandler(OS.GetWindowEventTarget(window), Callback3.getAddress(), mask2.length / 2, mask2, browser.handle, outRef);", "-\t\t\t\t\twindowBoundsHandler = outRef[0];", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase OS.kEventControlBoundsChanged:", "-\t\t\t\tcase OS.kEventControlVisibilityChanged: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t * Bug on Safari. The web view cannot be obscured by other views above it.", "-\t\t\t\t\t * This problem is specified in the apple documentation for HiWebViewCreate.", "-\t\t\t\t\t * The workaround is to hook kEventControlVisibilityChanged on the browser", "-\t\t\t\t\t * and move the browser out of the screen when hidden and restore its bounds", "-\t\t\t\t\t * when shown.", "-\t\t\t\t\t */", "-\t\t\t\t\tCGRect bounds = new CGRect();", "-\t\t\t\t\tif (!browser.isVisible()) {", "-\t\t\t\t\t\tbounds.x = bounds.y = -MIN_SIZE;", "-\t\t\t\t\t\tbounds.width = bounds.height = MIN_SIZE;", "-\t\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tOS.HIViewGetBounds(browser.handle, bounds);", "-\t\t\t\t\t\tint[] contentView = new int[1];", "-\t\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(browser.handle)), OS.kHIViewWindowContentID(), contentView);", "-\t\t\t\t\t\tOS.HIViewConvertRect(bounds, browser.handle, contentView[0]);", "-\t\t\t\t\t\t/* ", "-\t\t\t\t\t\t* Bug in Safari.  For some reason, the web view will display incorrectly or", "-\t\t\t\t\t\t* blank depending on its contents, if its size is set to a value smaller than", "-\t\t\t\t\t\t* MIN_SIZE. It will not display properly even after the size is made larger.", "-\t\t\t\t\t\t* The fix is to avoid setting sizes smaller than MIN_SIZE. ", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif (bounds.width <= MIN_SIZE) bounds.width = MIN_SIZE;", "-\t\t\t\t\t\tif (bounds.height <= MIN_SIZE) bounds.height = MIN_SIZE;", "-\t\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\tcase OS.kEventClassWindow:", "-\t\t\tswitch (eventKind) {", "-\t\t\t\tcase OS.kEventWindowBoundsChanged:", "-\t\t\t\t\t/*", "-\t\t\t\t\t * Bug on Safari. Resizing the height of a Shell containing a Browser at", "-\t\t\t\t\t * a fixed location causes the Browser to redraw at a wrong location.", "-\t\t\t\t\t * The web view is a HIView container that internally hosts", "-\t\t\t\t\t * a Cocoa NSView that uses a coordinates system with the origin at the", "-\t\t\t\t\t * bottom left corner of a window instead of the coordinates system used", "-\t\t\t\t\t * in Carbon that starts at the top left corner. The workaround is to", "-\t\t\t\t\t * reposition the web view every time the Shell of the Browser is resized.", "-\t\t\t\t\t * ", "-\t\t\t\t\t * Note the size should not be updated if the browser is hidden.", "-\t\t\t\t\t */", "-\t\t\t\t\tif (browser.isVisible()) {", "-\t\t\t\t\t\tCGRect oldBounds = new CGRect();", "-\t\t\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamOriginalBounds, OS.typeHIRect, null, CGRect.sizeof, null, oldBounds);", "-\t\t\t\t\t\tCGRect bounds = new CGRect();", "-\t\t\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamCurrentBounds, OS.typeHIRect, null, CGRect.sizeof, null, bounds);", "-\t\t\t\t\t\tif (oldBounds.height == bounds.height) break;", "-\t\t\t\t\t\tOS.HIViewGetBounds(browser.handle, bounds);", "-\t\t\t\t\t\tint[] contentView = new int[1];", "-\t\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(browser.handle)), OS.kHIViewWindowContentID(), contentView);", "-\t\t\t\t\t\tOS.HIViewConvertRect(bounds, browser.handle, contentView[0]);", "-\t\t\t\t\t\t/* ", "-\t\t\t\t\t\t* Bug in Safari.  For some reason, the web view will display incorrectly or", "-\t\t\t\t\t\t* blank depending on its contents, if its size is set to a value smaller than", "-\t\t\t\t\t\t* MIN_SIZE. It will not display properly even after the size is made larger.", "-\t\t\t\t\t\t* The fix is to avoid setting sizes smaller than MIN_SIZE. ", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif (bounds.width <= MIN_SIZE) bounds.width = MIN_SIZE;", "-\t\t\t\t\t\tif (bounds.height <= MIN_SIZE) bounds.height = MIN_SIZE;", "-\t\t\t\t\t\tbounds.x++;", "-\t\t\t\t\t\t/* Note that the bounds needs to change */", "-\t\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\t\tbounds.x--;", "-\t\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\t}", "-\t\t\t}", "-\t\tcase OS.kEventClassKeyboard:", "-\t\t\tswitch (eventKind) {", "-\t\t\t\tcase OS.kEventRawKeyDown: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug in Safari. The WebView blocks the propagation of certain Carbon events", "-\t\t\t\t\t* such as kEventRawKeyDown. On the Mac, Carbon events propagate from the", "-\t\t\t\t\t* Focus Target Handler to the Control Target Handler, Window Target and finally", "-\t\t\t\t\t* the Application Target Handler. It is assumed that WebView hooks its events", "-\t\t\t\t\t* on the Window Target and does not pass kEventRawKeyDown to the next handler.", "-\t\t\t\t\t* Since kEventRawKeyDown events never make it to the Application Target Handler,", "-\t\t\t\t\t* the Application Target Handler never gets to emit kEventTextInputUnicodeForKeyEvent", "-\t\t\t\t\t* used by SWT to send a SWT.KeyDown event.", "-\t\t\t\t\t* The workaround is to hook kEventRawKeyDown on the Control Target Handler which gets", "-\t\t\t\t\t* called before the WebView hook on the Window Target Handler. Then, forward this event", "-\t\t\t\t\t* directly to the Application Target Handler. Note that if in certain conditions Safari", "-\t\t\t\t\t* does not block the kEventRawKeyDown, then multiple kEventTextInputUnicodeForKeyEvent", "-\t\t\t\t\t* events might be generated as a result of this workaround.", "-\t\t\t\t\t*/", "-\t\t\t\t\t//TEMPORARY CODE", "-//\t\t\t\t\tdoit = false;", "-//\t\t\t\t\tOS.SendEventToEventTarget(theEvent, OS.GetApplicationEventTarget());", "-//\t\t\t\t\tif (!doit) return OS.noErr;", "-", "-\t\t\t\t\tint[] length = new int[1];", "-\t\t\t\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 4, length, (char[])null);", "-\t\t\t\t\tif (status == OS.noErr && length[0] != 0) {", "-\t\t\t\t\t\tint[] modifiers = new int[1];", "-\t\t\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "-\t\t\t\t\t\tchar[] chars = new char[1];", "-\t\t\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 2, null, chars);", "-\t\t\t\t\t\tif ((modifiers[0] & OS.cmdKey) != 0) {", "-\t\t\t\t\t\t\tswitch (chars[0]) {", "-\t\t\t\t\t\t\t\tcase 'v': {", "-\t\t\t\t\t\t\t\t\tint webView = Cocoa.HIWebViewGetWebView (webViewHandle);", "-\t\t\t\t\t\t\t\t\tCocoa.objc_msgSend (webView, Cocoa.S_paste);", "-\t\t\t\t\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcase 'c': {", "-\t\t\t\t\t\t\t\t\tint webView = Cocoa.HIWebViewGetWebView (webViewHandle);", "-\t\t\t\t\t\t\t\t\tCocoa.objc_msgSend (webView, Cocoa.S_copy);", "-\t\t\t\t\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcase 'x': {", "-\t\t\t\t\t\t\t\t\tint webView = Cocoa.HIWebViewGetWebView (webViewHandle);", "-\t\t\t\t\t\t\t\t\tCocoa.objc_msgSend (webView, Cocoa.S_cut);", "-\t\t\t\t\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\tcase OS.kEventClassTextInput:", "-\t\t\tswitch (eventKind) {", "-\t\t\t\tcase OS.kEventTextInputUnicodeForKeyEvent: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Note.  This event is received from the Window Target therefore after it was received", "-\t\t\t\t\t* by the Focus Target. The SWT.KeyDown event is sent by SWT on the Focus Target. If it", "-\t\t\t\t\t* is received here, then the SWT.KeyDown doit flag must have been left to the value", "-\t\t\t\t\t* true.  For package visibility reasons we cannot access the doit flag directly.", "-\t\t\t\t\t* ", "-\t\t\t\t\t* Sequence of events when the user presses a key down", "-\t\t\t\t\t* ", "-\t\t\t\t\t* .Control Target - kEventRawKeyDown", "-\t\t\t\t\t* \t.forward to ApplicationEventTarget", "-\t\t\t\t\t* \t\t.Focus Target kEventTextInputUnicodeForKeyEvent - SWT emits SWT.KeyDown - ", "-\t\t\t\t\t* \t\t\tblocks further propagation if doit false. Browser does not know directly about", "-\t\t\t\t\t* \t\t\tthe doit flag value.", "-\t\t\t\t\t* \t\t\t.Window Target kEventTextInputUnicodeForKeyEvent - if received, Browser knows ", "-\t\t\t\t\t* \t\t\tSWT.KeyDown is not blocked and event should be sent to WebKit", "-\t\t\t\t\t*  Return from Control Target - kEventRawKeyDown: let the event go to WebKit if doit true ", "-\t\t\t\t\t*  (eventNotHandledErr) or stop it (noErr).", "-\t\t\t\t\t*/", "-\t\t\t\t\t//TEMPORARY CODE", "-//\t\t\t\t\tdoit = true;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t}", "-\treturn OS.eventNotHandledErr;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daff360bb34a8a69224c0965c566bda8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "a2fb28aada03076e456f5d04cff320b4b64690b6", "commitAfterChange": "8bdc7452496d997678c005f282bcd2cc736b0512", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  void initializeSystemResources ()", "signatureAfterChange": "  void initializeSystemResources ()", "diff": ["-\tGtkStyle style = new GtkStyle();", "-\tOS.memmove (style, OS.gtk_widget_get_style (shellHandle));\t", "-\tGtkStyle tooltipStyle = new GtkStyle();", "-\tOS.memmove (tooltipStyle, OS.gtk_widget_get_style (tooltipShellHandle));", "+\tint style = OS.gtk_widget_get_style (shellHandle);\t", "+\tint tooltipStyle = OS.gtk_widget_get_style (tooltipShellHandle);", "-\tdefaultFont = OS.pango_font_description_copy (style.font_desc);", "+\tdefaultFont = OS.pango_font_description_copy (OS.gtk_style_get_font_desc (style));", "-\tgdkColor.pixel = style.black_pixel;", "-\tgdkColor.red   = style.black_red;", "-\tgdkColor.green = style.black_green;", "-\tgdkColor.blue  = style.black_blue;", "+\tOS.gtk_style_get_black (style, gdkColor);", "-\tgdkColor.pixel = style.dark0_pixel;", "-\tgdkColor.red   = style.dark0_red;", "-\tgdkColor.green = style.dark0_green;", "-\tgdkColor.blue  = style.dark0_blue;", "+\tOS.gtk_style_get_dark (style, 0, gdkColor);", "-\tgdkColor.pixel = style.bg0_pixel;", "-\tgdkColor.red   = style.bg0_red;", "-\tgdkColor.green = style.bg0_green;", "-\tgdkColor.blue  = style.bg0_blue;", "+\tOS.gtk_style_get_bg (style, 0, gdkColor);", "-\tgdkColor.pixel = style.light0_pixel;", "-\tgdkColor.red   = style.light0_red;", "-\tgdkColor.green = style.light0_green;", "-\tgdkColor.blue  = style.light0_blue;", "+\tOS.gtk_style_get_light (style, 0, gdkColor);", "-\tgdkColor.pixel = style.fg0_pixel;", "-\tgdkColor.red   = style.fg0_red;", "-\tgdkColor.green = style.fg0_green;", "-\tgdkColor.blue  = style.fg0_blue;", "+\tOS.gtk_style_get_fg (style, 0, gdkColor);", "-\tgdkColor.pixel = style.bg0_pixel;", "-\tgdkColor.red   = style.bg0_red;", "-\tgdkColor.green = style.bg0_green;", "-\tgdkColor.blue  = style.bg0_blue;", "+\tOS.gtk_style_get_bg (style, 0, gdkColor);", "-\tgdkColor.pixel = style.text0_pixel;", "-\tgdkColor.red   = style.text0_red;", "-\tgdkColor.green = style.text0_green;", "-\tgdkColor.blue  = style.text0_blue;", "+\tOS.gtk_style_get_text (style, 0, gdkColor);", "-\tgdkColor.pixel = style.base0_pixel;", "-\tgdkColor.red   = style.base0_red;", "-\tgdkColor.green = style.base0_green;", "-\tgdkColor.blue  = style.base0_blue;", "+\tOS.gtk_style_get_base (style, 0, gdkColor);", "-\tgdkColor.pixel = style.text0_pixel;", "-\tgdkColor.red   = style.text0_red;", "-\tgdkColor.green = style.text0_green;", "-\tgdkColor.blue  = style.text0_blue;", "+\tOS.gtk_style_get_text (style, 0, gdkColor);", "-\tgdkColor.pixel = style.base0_pixel;", "-\tgdkColor.red   = style.base0_red;", "-\tgdkColor.green = style.base0_green;", "-\tgdkColor.blue  = style.base0_blue;", "+\tOS.gtk_style_get_base (style, 0, gdkColor);", "-\tgdkColor.pixel = style.text3_pixel;", "-\tgdkColor.red   = style.text3_red;", "-\tgdkColor.green = style.text3_green;", "-\tgdkColor.blue  = style.text3_blue;", "+\tOS.gtk_style_get_text (style, 3, gdkColor);", "-\tgdkColor.pixel = style.base3_pixel;", "-\tgdkColor.red   = style.base3_red;", "-\tgdkColor.green = style.base3_green;", "-\tgdkColor.blue  = style.base3_blue;", "+\tOS.gtk_style_get_base (style, 3, gdkColor);", "-\tgdkColor.pixel = tooltipStyle.fg0_pixel;", "-\tgdkColor.red   = tooltipStyle.fg0_red;", "-\tgdkColor.green = tooltipStyle.fg0_green;", "-\tgdkColor.blue  = tooltipStyle.fg0_blue;", "+\tOS.gtk_style_get_fg (tooltipStyle, 0, gdkColor);", "-\tgdkColor.pixel = tooltipStyle.bg0_pixel;", "-\tgdkColor.red   = tooltipStyle.bg0_red;", "-\tgdkColor.green = tooltipStyle.bg0_green;", "-\tgdkColor.blue  = tooltipStyle.bg0_blue;", "+\tOS.gtk_style_get_bg (tooltipStyle, 0, gdkColor);", "-\tgdkColor.pixel = style.bg3_pixel;", "-\tgdkColor.red   = style.bg3_red;", "-\tgdkColor.green = style.bg3_green;", "-\tgdkColor.blue  = style.bg3_blue;", "+\tOS.gtk_style_get_bg (style, 3, gdkColor);", "-\tgdkColor.pixel = style.fg3_pixel;", "-\tgdkColor.red   = style.fg3_red;", "-\tgdkColor.green = style.fg3_green;", "-\tgdkColor.blue  = style.fg3_blue;", "+\tOS.gtk_style_get_fg (style, 3, gdkColor);", "-\tgdkColor.pixel = style.light3_pixel;", "-\tgdkColor.red   = style.light3_red;", "-\tgdkColor.green = style.light3_green;", "-\tgdkColor.blue  = style.light3_blue;", "+\tOS.gtk_style_get_light (style, 3, gdkColor);", "-\tgdkColor.pixel = style.bg4_pixel;", "-\tgdkColor.red   = style.bg4_red;", "-\tgdkColor.green = style.bg4_green;", "-\tgdkColor.blue  = style.bg4_blue;", "+\tOS.gtk_style_get_bg (style, 4, gdkColor);", "-\tgdkColor.pixel = style.fg4_pixel;", "-\tgdkColor.red   = style.fg4_red;", "-\tgdkColor.green = style.fg4_green;", "-\tgdkColor.blue  = style.fg4_blue;", "+\tOS.gtk_style_get_fg (style, 4, gdkColor);", "-\tgdkColor.pixel = style.light4_pixel;", "-\tgdkColor.red   = style.light4_red;", "-\tgdkColor.green = style.light4_green;", "-\tgdkColor.blue  = style.light4_blue;", "+\tOS.gtk_style_get_light (style, 4, gdkColor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3c4ee555081efdcd79da31534d2b0d76", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "faf1b17ce38d7db186ae3678559b0f7c7aa0346b", "commitAfterChange": "2f4a5c62ac7c181999d015c72b6b830a180e7054", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void generateClasses()", "signatureAfterChange": "  void generateClasses()", "diff": ["+", "-\tMetaData metaData = new MetaData(mainClassName);", "-\t", "+\tHashMap classes = new HashMap();", "-\t\t\tif (\"class\".equals(node.getNodeName())) {", "-\t\t\t\tif (getGen(node)) {", "-\t\t\t\t\tByteArrayOutputStream out = new ByteArrayOutputStream();", "-\t\t\t\t\tthis.out = new PrintStream(out);", "-\t\t\t\t\tString data = metaData.getMetaData(\"swt_copyright\", null);", "-\t\t\t\t\tif (data != null && data.length() != 0) {", "-\t\t\t\t\t\tout(fixDelimiter(data));", "+\t\t\tif (\"class\".equals(node.getNodeName()) && getGen(node)) {", "+\t\t\t\tMap methods;", "+\t\t\t\tNamedNodeMap attributes = node.getAttributes();", "+\t\t\t\tString name = attributes.getNamedItem(\"name\").getNodeValue();", "+\t\t\t\tObject[] clazz = (Object[])classes.get(name);", "+\t\t\t\tif (clazz == null) {", "+\t\t\t\t\tmethods = new TreeMap();", "+\t\t\t\t\tclasses.put(name, new Object[]{node, methods});", "+\t\t\t\t} else {", "+\t\t\t\t\tmethods = (TreeMap)clazz[1];", "+\t\t\t\t}", "+\t\t\t\tNodeList methodList = node.getChildNodes();", "+\t\t\t\tfor (int j = 0; j < methodList.getLength(); j++) {", "+\t\t\t\t\tNode method = methodList.item(j);", "+\t\t\t\t\tif (\"method\".equals(method.getNodeName()) && getGen(method)) {", "+\t\t\t\t\t\tNamedNodeMap mthAttributes = method.getAttributes();", "+\t\t\t\t\t\tString selector = mthAttributes.getNamedItem(\"selector\").getNodeValue();", "+\t\t\t\t\t\t//static overloading instance method", "+\t\t\t\t\t\tif (methods.get(selector) == null) {", "+\t\t\t\t\t\t\tmethods.put(selector, method);", "+\t\t\t\t\t\t} ", "-\t\t\t\t\tNamedNodeMap attributes = node.getAttributes();", "-\t\t\t\t\tString name = attributes.getNamedItem(\"name\").getNodeValue();", "-\t\t\t\t\tout(\"package org.eclipse.swt.internal.cocoa;\");", "-\t\t\t\t\toutln();", "-\t\t\t\t\toutln();", "-\t\t\t\t\tout(\"public class \");", "-\t\t\t\t\tout(name);", "-\t\t\t\t\tif (name.equals(\"NSObject\")) {", "-\t\t\t\t\t\tout(\" extends id {\");", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tNode superclass = attributes.getNamedItem(\"swt_superclass\");", "-\t\t\t\t\t\tout(\" extends \");", "-\t\t\t\t\t\tif (superclass != null) {", "-\t\t\t\t\t\t\tout(superclass.getNodeValue());", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tout(\"NSObject\");", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tout(\" {\");", "-\t\t\t\t\t}", "-\t\t\t\t\toutln();", "-\t\t\t\t\toutln();", "-\t\t\t\t\tout(\"public \");", "-\t\t\t\t\tout(name);", "-\t\t\t\t\tout(\"() {\");", "-\t\t\t\t\toutln();", "-\t\t\t\t\tout(\"\\tsuper();\");", "-\t\t\t\t\toutln();", "-\t\t\t\t\tout(\"}\");", "-\t\t\t\t\toutln();", "-\t\t\t\t\toutln();", "-\t\t\t\t\tout(\"public \");", "-\t\t\t\t\tout(name);", "-\t\t\t\t\tout(\"(int id) {\");", "-\t\t\t\t\toutln();", "-\t\t\t\t\tout(\"\\tsuper(id);\");", "-\t\t\t\t\toutln();", "-\t\t\t\t\tout(\"}\");", "-\t\t\t\t\toutln();", "-\t\t\t\t\toutln();", "-\t\t\t\t\tNodeList methods = node.getChildNodes();", "-\t\t\t\t\tfor (int j = 0; j < methods.getLength(); j++) {", "-\t\t\t\t\t\tNode method = methods.item(j);", "-\t\t\t\t\t\tif (\"method\".equals(method.getNodeName())) {", "-\t\t\t\t\t\t\tif (getGen(method)) {", "-\t\t\t\t\t\t\t\tNamedNodeMap mthAttributes = method.getAttributes();", "-\t\t\t\t\t\t\t\tString sel = mthAttributes.getNamedItem(\"selector\").getNodeValue();", "-\t\t\t\t\t\t\t\tout(\"public \");", "-\t\t\t\t\t\t\t\tboolean isStatic = mthAttributes.getNamedItem(\"class_method\") != null; ", "-\t\t\t\t\t\t\t\tif (isStatic) out(\"static \");", "-\t\t\t\t\t\t\t\tNode returnNode = getReturnNode(method.getChildNodes());", "-\t\t\t\t\t\t\t\tif (getType(returnNode).equals(\"void\")) returnNode = null;", "-\t\t\t\t\t\t\t\tString returnType = \"\";", "-\t\t\t\t\t\t\t\tif (returnNode != null) {", "-\t\t\t\t\t\t\t\t\tNode replace = returnNode.getAttributes().getNamedItem(\"swt_replace_return\");", "-\t\t\t\t\t\t\t\t\tif (replace != null) {", "-\t\t\t\t\t\t\t\t\t\tout(returnType = replace.getNodeValue());", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tout(returnType = getJavaType(returnNode));", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tout(\" \");", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tout(\"void \");", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tString methodName = sel;", "-\t\t\t\t\t\t\t\tif (isUnique(method, methods)) {", "-\t\t\t\t\t\t\t\t\tint index = methodName.indexOf(\":\");", "-\t\t\t\t\t\t\t\t\tif (index != -1) methodName = methodName.substring(0, index);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tmethodName = methodName.replaceAll(\":\", \"_\");", "-\t\t\t\t\t\t\t\t\tif (isStatic) methodName = \"static_\" + methodName;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tout(methodName);", "-\t\t\t\t\t\t\t\tout(\"(\");", "-\t\t\t\t\t\t\t\tNodeList params = method.getChildNodes();", "-\t\t\t\t\t\t\t\tboolean first = true;", "-\t\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "-\t\t\t\t\t\t\t\t\tNode param = params.item(k);", "-\t\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "-\t\t\t\t\t\t\t\t\t\tNamedNodeMap paramAttributes = param.getAttributes();", "-\t\t\t\t\t\t\t\t\t\tif (!first) out(\", \");", "-\t\t\t\t\t\t\t\t\t\tout(getJavaType(param));", "-\t\t\t\t\t\t\t\t\t\tfirst = false;", "-\t\t\t\t\t\t\t\t\t\tout(\" \");", "-\t\t\t\t\t\t\t\t\t\tString paramName = paramAttributes.getNamedItem(\"name\").getNodeValue();", "-\t\t\t\t\t\t\t\t\t\tif (paramName.length() == 0) paramName = \"arg\" + paramAttributes.getNamedItem(\"index\").getNodeValue();", "-\t\t\t\t\t\t\t\t\t\tif (paramName.equals(\"boolean\")) paramName = \"b\";", "-\t\t\t\t\t\t\t\t\t\tout(paramName);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tout(\") {\");", "-\t\t\t\t\t\t\t\toutln();", "-\t\t\t\t\t\t\t\tif (returnNode != null && isStruct(returnNode)) {", "-\t\t\t\t\t\t\t\t\tString type = getJavaType(returnNode);", "-\t\t\t\t\t\t\t\t\tout(\"\\t\");", "-\t\t\t\t\t\t\t\t\tout(type);", "-\t\t\t\t\t\t\t\t\tout(\" result = new \");", "-\t\t\t\t\t\t\t\t\tout(type);", "-\t\t\t\t\t\t\t\t\tout(\"();\");", "-\t\t\t\t\t\t\t\t\toutln();", "-\t\t\t\t\t\t\t\t\tout(\"\\tOS.objc_msgSend_stret(result, \");", "-\t\t\t\t\t\t\t\t} else if (returnNode != null && isFloatingPoint(returnNode)) {", "-\t\t\t\t\t\t\t\t\tString type = getJavaType(returnNode);", "-\t\t\t\t\t\t\t\t\tout(\"\\treturn \");", "-\t\t\t\t\t\t\t\t\tif (type.equals(\"float\")) out(\"(float)\");", "-\t\t\t\t\t\t\t\t\tout(\"OS.objc_msgSend_fpret(\");", "-\t\t\t\t\t\t\t\t} else if (returnNode != null && isObject(returnNode)) {", "-\t\t\t\t\t\t\t\t\tout(\"\\tint result = OS.objc_msgSend(\");", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tif (returnNode != null) {", "-\t\t\t\t\t\t\t\t\t\tout(\"\\treturn \");", "-\t\t\t\t\t\t\t\t\t\tString type = getJavaType(returnNode);", "-\t\t\t\t\t\t\t\t\t\tif (!(type.equals(\"int\") || type.equals(\"boolean\"))) {", "-\t\t\t\t\t\t\t\t\t\t\tout(\"(\");", "-\t\t\t\t\t\t\t\t\t\t\tout(type);", "-\t\t\t\t\t\t\t\t\t\t\tout(\")\");", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tout(\"\\t\");", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tout(\"OS.objc_msgSend(\");", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (isStatic) {", "-\t\t\t\t\t\t\t\t\tout(\"OS.class_\");", "-\t\t\t\t\t\t\t\t\tout(name);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tout(\"this.id\");", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tout(\", OS.\");", "-\t\t\t\t\t\t\t\tout(getSelConst(sel));", "-\t\t\t\t\t\t\t\tfirst = false;", "-\t\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "-\t\t\t\t\t\t\t\t\tNode param = params.item(k);", "-\t\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "-\t\t\t\t\t\t\t\t\t\tNamedNodeMap paramAttributes = param.getAttributes();", "-\t\t\t\t\t\t\t\t\t\tif (!first) out(\", \");", "-\t\t\t\t\t\t\t\t\t\tfirst = false;", "-\t\t\t\t\t\t\t\t\t\tString paramName = paramAttributes.getNamedItem(\"name\").getNodeValue();", "-\t\t\t\t\t\t\t\t\t\tif (paramName.length() == 0) paramName = \"arg\" + paramAttributes.getNamedItem(\"index\").getNodeValue();", "-\t\t\t\t\t\t\t\t\t\tif (paramName.equals(\"boolean\")) paramName = \"b\";", "-\t\t\t\t\t\t\t\t\t\tif (isObject(param)) {", "-\t\t\t\t\t\t\t\t\t\t\tout(paramName);", "-\t\t\t\t\t\t\t\t\t\t\tout(\" != null ? \");", "-\t\t\t\t\t\t\t\t\t\t\tout(paramName);", "-\t\t\t\t\t\t\t\t\t\t\tout(\".id : 0\");", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tout(paramName);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tout(\")\");", "-\t\t\t\t\t\t\t\tif (returnNode != null && isBoolean(returnNode)) {", "-\t\t\t\t\t\t\t\t\tout(\" != 0\");", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tout(\";\");", "-\t\t\t\t\t\t\t\toutln();", "-\t\t\t\t\t\t\t\tif (returnNode != null && isObject(returnNode)) {", "-\t\t\t\t\t\t\t\t\tif (!isStatic && returnType.equals(name)) {", "-\t\t\t\t\t\t\t\t\t\tout(\"\\treturn result == this.id ? this : (result != 0 ? new \");", "-\t\t\t\t\t\t\t\t\t\tout(returnType);", "-\t\t\t\t\t\t\t\t\t\tout(\"(result) : null);\");", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tout(\"\\treturn result != 0 ? new \");", "-\t\t\t\t\t\t\t\t\t\tout(returnType);", "-\t\t\t\t\t\t\t\t\t\tout(\"(result) : null;\");", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\toutln();", "-\t\t\t\t\t\t\t\t} else if (returnNode != null && isStruct(returnNode)) {", "-\t\t\t\t\t\t\t\t\tout(\"\\treturn result;\");", "-\t\t\t\t\t\t\t\t\toutln();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tout(\"}\");", "-\t\t\t\t\t\t\t\toutln();", "-\t\t\t\t\t\t\t\toutln();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}\t\t\t\t\t", "-\t\t\t\t\t}\t\t\t\t", "-\t\t\t\t\tout(\"}\");", "-\t\t\t\t\toutln();", "-\t\t\t\t\t", "-\t\t\t\t\tString fileName = outputDir + mainClassName.substring(0, mainClassName.lastIndexOf('.') + 1).replace('.', '/') + name + \".java\";", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tout.flush();", "-\t\t\t\t\t\tif (out.size() > 0) output(out.toByteArray(), fileName);", "-\t\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\t\tSystem.out.println(\"Problem\");", "-\t\t\t\t\t\te.printStackTrace(System.out);", "-\t\t\t\t\t}", "-\t\t\t\t\tout = null;", "+\t}", "+\tMetaData metaData = new MetaData(mainClassName);\t", "+\tSet classNames = classes.keySet();", "+\tfor (Iterator iterator = classNames.iterator(); iterator.hasNext();) {", "+\t\tByteArrayOutputStream out = new ByteArrayOutputStream();", "+\t\tthis.out = new PrintStream(out);", "+", "+\t\tString className = (String) iterator.next();", "+\t\tObject[] clazz = (Object[])classes.get(className);", "+\t\tNode node = (Node)clazz[0];", "+\t\tTreeMap methods = (TreeMap)clazz[1];", "+\t\tNamedNodeMap attributes = node.getAttributes();", "+\t\tString data = metaData.getMetaData(\"swt_copyright\", null);", "+\t\tif (data != null && data.length() != 0) {", "+\t\t\tout(fixDelimiter(data));", "+\t\t}", "+\t\tout(\"package \");", "+\t\tString packageName = getPackageName(mainClassName);", "+\t\tout(packageName);", "+\t\tout(\";\");", "+\t\toutln();", "+\t\toutln();", "+\t\tout(\"public class \");", "+\t\tout(className);", "+\t\tif (className.equals(\"NSObject\")) {", "+\t\t\tout(\" extends id {\");", "+\t\t} else {", "+\t\t\tNode superclass = attributes.getNamedItem(\"swt_superclass\");", "+\t\t\tout(\" extends \");", "+\t\t\tif (superclass != null) {", "+\t\t\t\tout(superclass.getNodeValue());", "+\t\t\t} else {", "+\t\t\t\tout(\"NSObject\");", "+\t\t\t}", "+\t\t\tout(\" {\");", "+\t\t}", "+\t\toutln();", "+\t\toutln();", "+\t\tout(\"public \");", "+\t\tout(className);", "+\t\tout(\"() {\");", "+\t\toutln();", "+\t\tout(\"\\tsuper();\");", "+\t\toutln();", "+\t\tout(\"}\");", "+\t\toutln();", "+\t\toutln();", "+\t\tout(\"public \");", "+\t\tout(className);", "+\t\tout(\"(int id) {\");", "+\t\toutln();", "+\t\tout(\"\\tsuper(id);\");", "+\t\toutln();", "+\t\tout(\"}\");", "+\t\toutln();", "+\t\toutln();", "+\t\t", "+\t\tgenerateMethods(className, methods);", "+\t\t", "+\t\tout(\"}\");", "+\t\toutln();", "+\t\t", "+\t\tString fileName = outputDir + packageName.replace('.', '/') + \"/\" + className + \".java\";", "+\t\ttry {", "+\t\t\tout.flush();", "+\t\t\tif (out.size() > 0) output(out.toByteArray(), fileName);", "+\t\t} catch (Exception e) {", "+\t\t\tSystem.out.println(\"Problem\");", "+\t\t\te.printStackTrace(System.out);", "+\t\t}", "+\t\tout = null;"]}], "num": 31529}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8f231dff571bd4cc9e47adfd203cc403", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e262c0f3d71c960c7a013eee64d81d6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "7742fa8997652dbfdc64a471dfaf1c221b9bf26e", "commitAfterChange": "7d75e7ceefc7de5bbd8f0f302b0814668b4f3922", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 86, "signatureBeforeChange": "  void onVerify(Event event)", "signatureAfterChange": "  void onTextVerify(Event event)", "diff": ["-", "-void onVerify(Event event) {", "-\tif (ignoreVerify) return;", "-\tevent.doit = false;", "-\tint fieldName = fieldNames[currentField];", "-\tint start = fieldIndices[currentField].x;", "-\tint end = fieldIndices[currentField].y;", "-\tint length = end - start;", "-\tString newText = event.text;", "-\tif (fieldName == Calendar.AM_PM) {", "-\t\tString[] ampm = formatSymbols.getAmPmStrings();", "-\t\tif (newText.equalsIgnoreCase(ampm[Calendar.AM].substring(0, 1)) || newText.equalsIgnoreCase(ampm[Calendar.AM])) {", "-\t\t\tsetTextField(fieldName, Calendar.AM, true, false);", "-\t\t} else if (newText.equalsIgnoreCase(ampm[Calendar.PM].substring(0, 1)) || newText.equalsIgnoreCase(ampm[Calendar.PM])) {", "-\t\t\tsetTextField(fieldName, Calendar.PM, true, false);", "-\t\t}", "-\t\treturn;", "-\t}", "-\tif (characterCount > 0) {", "-\t\ttry {", "-\t\t\tInteger.parseInt(newText);", "-\t\t} catch (NumberFormatException ex) {", "-\t\t\treturn;", "-\t\t}", "-\t\tString value = text.getText(start, end - 1);", "-\t\tint s = value.lastIndexOf(' ');", "-\t\tif (s != -1) value = value.substring(s + 1);", "-\t\tnewText = \"\" + value + newText;", "-\t}", "-\tint newTextLength = newText.length();", "-\tboolean first = characterCount == 0;", "-\tcharacterCount = (newTextLength < length) ? newTextLength : 0;", "-\tint max = calendar.getActualMaximum(fieldName);", "-\tint min = calendar.getActualMinimum(fieldName);", "-\tint newValue = unformattedIntValue(fieldName, newText, characterCount == 0, max);", "-\tif (newValue == -1) {", "-\t\tcharacterCount = 0;", "-\t\treturn;", "-\t}", "-\tif (first && newValue == 0 && length > 1) {", "-\t\tsetTextField(fieldName, newValue, false, false);", "-\t} else if (min <= newValue && newValue <= max) {", "-\t\tsetTextField(fieldName, newValue, characterCount == 0, characterCount == 0);", "-\t\tif (newTextLength >= length) {", "-\t\t\tnewText = newText.substring(newTextLength - length + 1);", "-\t\t\tnewValue = unformattedIntValue(fieldName, newText, characterCount == 0, max);", "-\t\t\tif (newValue != -1) {", "-\t\t\t\tcharacterCount = length - 1;", "-\t\t\t\tif (min <= newValue && newValue <= max) {", "-\t\t\t\t\tsetTextField(fieldName, newValue, characterCount == 0, true);", "-\t\t\t\t}", "+", "+void onTextVerify(Event event) {", "+\tif (ignoreVerify) return;", "+\tevent.doit = false;", "+\tint fieldName = fieldNames[currentField];", "+\tint start = fieldIndices[currentField].x;", "+\tint end = fieldIndices[currentField].y;", "+\tint length = end - start;", "+\tString newText = event.text;", "+\tif (fieldName == Calendar.AM_PM) {", "+\t\tString[] ampm = formatSymbols.getAmPmStrings();", "+\t\tif (newText.equalsIgnoreCase(ampm[Calendar.AM].substring(0, 1)) || newText.equalsIgnoreCase(ampm[Calendar.AM])) {", "+\t\t\tsetTextField(fieldName, Calendar.AM, true, false);", "+\t\t} else if (newText.equalsIgnoreCase(ampm[Calendar.PM].substring(0, 1)) || newText.equalsIgnoreCase(ampm[Calendar.PM])) {", "+\t\t\tsetTextField(fieldName, Calendar.PM, true, false);", "+\t\t}", "+\t\treturn;", "+\t}", "+\tif (characterCount > 0) {", "+\t\ttry {", "+\t\t\tInteger.parseInt(newText);", "+\t\t} catch (NumberFormatException ex) {", "+\t\t\treturn;", "+\t\t}", "+\t\tString value = text.getText(start, end - 1);", "+\t\tint s = value.lastIndexOf(' ');", "+\t\tif (s != -1) value = value.substring(s + 1);", "+\t\tnewText = \"\" + value + newText;", "+\t}", "+\tint newTextLength = newText.length();", "+\tboolean first = characterCount == 0;", "+\tcharacterCount = (newTextLength < length) ? newTextLength : 0;", "+\tint max = calendar.getActualMaximum(fieldName);", "+\tint min = calendar.getActualMinimum(fieldName);", "+\tint newValue = unformattedIntValue(fieldName, newText, characterCount == 0, max);", "+\tif (newValue == -1) {", "+\t\tcharacterCount = 0;", "+\t\treturn;", "+\t}", "+\tif (first && newValue == 0 && length > 1) {", "+\t\tsetTextField(fieldName, newValue, false, false);", "+\t} else if (min <= newValue && newValue <= max) {", "+\t\tsetTextField(fieldName, newValue, characterCount == 0, characterCount == 0);", "+\t} else {", "+\t\tif (newTextLength >= length) {", "+\t\t\tnewText = newText.substring(newTextLength - length + 1);", "+\t\t\tnewValue = unformattedIntValue(fieldName, newText, characterCount == 0, max);", "+\t\t\tif (newValue != -1) {", "+\t\t\t\tcharacterCount = length - 1;", "+\t\t\t\tif (min <= newValue && newValue <= max) {", "+\t\t\t\t\tsetTextField(fieldName, newValue, characterCount == 0, true);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc3ffa18138d714cdac524cc9373a891", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "927bee3c0babae659ca291b20dd1146357b6edc3", "commitAfterChange": "1f877493a0233d9a91b99a868c482a5ee0e404c2", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 85, "signatureBeforeChange": "  void onVerify(Event event)", "signatureAfterChange": "  void onTextVerify(Event event)", "diff": ["-", "-void onVerify(Event event) {", "-\tif (ignoreVerify) return;", "-\tevent.doit = false;", "-\tint fieldName = fieldNames[currentField];", "-\tint start = fieldIndices[currentField].x;", "-\tint end = fieldIndices[currentField].y;", "-\tint length = end - start;", "-\tString newText = event.text;", "-\tif (fieldName == Calendar.AM_PM) {", "-\t\tString[] ampm = formatSymbols.getAmPmStrings();", "-\t\tif (newText.equalsIgnoreCase(ampm[Calendar.AM].substring(0, 1)) || newText.equalsIgnoreCase(ampm[Calendar.AM])) {", "-\t\t\tsetTextField(fieldName, Calendar.AM, true, false);", "-\t\t} else if (newText.equalsIgnoreCase(ampm[Calendar.PM].substring(0, 1)) || newText.equalsIgnoreCase(ampm[Calendar.PM])) {", "-\t\t\tsetTextField(fieldName, Calendar.PM, true, false);", "-\t\treturn;", "-\t}", "-\tif (characterCount > 0) {", "-\t\ttry {", "-\t\t\tInteger.parseInt(newText);", "-\t\t} catch (NumberFormatException ex) {", "-\t\t\treturn;", "-\t\t}", "-\t\tString value = text.getText(start, end - 1);", "-\t\tint s = value.lastIndexOf(' ');", "-\t\tif (s != -1) value = value.substring(s + 1);", "-\t\tnewText = \"\" + value + newText;", "-\t}", "-\tint newTextLength = newText.length();", "-\tboolean first = characterCount == 0;", "-\tcharacterCount = (newTextLength < length) ? newTextLength : 0;", "-\tint max = calendar.getActualMaximum(fieldName);", "-\tint min = calendar.getActualMinimum(fieldName);", "-\tint newValue = unformattedIntValue(fieldName, newText, characterCount == 0, max);", "-\tif (newValue == -1) {", "-\t\tcharacterCount = 0;", "-\t\treturn;", "-\t}", "-\tif (first && newValue == 0 && length > 1) {", "-\t\tsetTextField(fieldName, newValue, false, false);", "-\t} else if (min <= newValue && newValue <= max) {", "-\t\tsetTextField(fieldName, newValue, characterCount == 0, characterCount == 0);", "-\t} else {", "-\t\tif (newTextLength >= length) {", "-\t\t\tnewText = newText.substring(newTextLength - length + 1);", "-\t\t\tnewValue = unformattedIntValue(fieldName, newText, characterCount == 0, max);", "-\t\t\tif (newValue != -1) {", "-\t\t\t\tcharacterCount = length - 1;", "-\t\t\t\tif (min <= newValue && newValue <= max) {", "-\t\t\t\t\tsetTextField(fieldName, newValue, characterCount == 0, true);", "-\t\t\t\t}", "-\t\t\t}", "+", "+void onTextVerify(Event event) {", "+\tif (ignoreVerify) return;", "+\tevent.doit = false;", "+\tint fieldName = fieldNames[currentField];", "+\tint start = fieldIndices[currentField].x;", "+\tint end = fieldIndices[currentField].y;", "+\tint length = end - start;", "+\tString newText = event.text;", "+\tif (fieldName == Calendar.AM_PM) {", "+\t\tString[] ampm = formatSymbols.getAmPmStrings();", "+\t\tif (newText.equalsIgnoreCase(ampm[Calendar.AM].substring(0, 1)) || newText.equalsIgnoreCase(ampm[Calendar.AM])) {", "+\t\t\tsetTextField(fieldName, Calendar.AM, true, false);", "+\t\t} else if (newText.equalsIgnoreCase(ampm[Calendar.PM].substring(0, 1)) || newText.equalsIgnoreCase(ampm[Calendar.PM])) {", "+\t\t\tsetTextField(fieldName, Calendar.PM, true, false);", "+\t\t}", "+\t\treturn;", "+\t}", "+\tif (characterCount > 0) {", "+\t\ttry {", "+\t\t\tInteger.parseInt(newText);", "+\t\t} catch (NumberFormatException ex) {", "+\t\t\treturn;", "+\t\t}", "+\t\tString value = text.getText(start, end - 1);", "+\t\tint s = value.lastIndexOf(' ');", "+\t\tif (s != -1) value = value.substring(s + 1);", "+\t\tnewText = \"\" + value + newText;", "+\t}", "+\tint newTextLength = newText.length();", "+\tboolean first = characterCount == 0;", "+\tcharacterCount = (newTextLength < length) ? newTextLength : 0;", "+\tint max = calendar.getActualMaximum(fieldName);", "+\tint min = calendar.getActualMinimum(fieldName);", "+\tint newValue = unformattedIntValue(fieldName, newText, characterCount == 0, max);", "+\tif (newValue == -1) {", "+\t\tcharacterCount = 0;", "+\t\treturn;", "+\t}", "+\tif (first && newValue == 0 && length > 1) {", "+\t\tsetTextField(fieldName, newValue, false, false);", "+\t} else if (min <= newValue && newValue <= max) {", "+\t\tsetTextField(fieldName, newValue, characterCount == 0, characterCount == 0);", "+\t} else {", "+\t\tif (newTextLength >= length) {", "+\t\t\tnewText = newText.substring(newTextLength - length + 1);", "+\t\t\tnewValue = unformattedIntValue(fieldName, newText, characterCount == 0, max);", "+\t\t\tif (newValue != -1) {", "+\t\t\t\tcharacterCount = length - 1;", "+\t\t\t\tif (min <= newValue && newValue <= max) {", "+\t\t\t\t\tsetTextField(fieldName, newValue, characterCount == 0, true);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+}"]}], "num": 60656}
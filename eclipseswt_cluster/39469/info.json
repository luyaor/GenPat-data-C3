{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1ecccb31d5423588b01516772c2822d8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfecf337063a667ba61728424c4e1dbd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "b2127d548b8d5b1e3d705cfaa832c876d9e6f685", "commitAfterChange": "22c78994f0ec6a28835def6220a4b518252d37e2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["-\t\t\t\t\t\t\trange.location = layoutManager.glyphIndexForCharacterAtIndex(Math.max(lineStart, start));", "-\t\t\t\t\t\t\trange.length = layoutManager.glyphIndexForCharacterAtIndex(Math.min(lineEnd, end) + 1) - range.location;", "+\t\t\t\t\t\t\trange.location = Math.max(lineStart, start);", "+\t\t\t\t\t\t\trange.length = Math.min(lineEnd, end) + 1 - range.location;", "+\t\t\t\t\t\t\t\tint /*long*/ pRectCount = OS.malloc(C.PTR_SIZEOF);", "+\t\t\t\t\t\t\t\tint /*long*/ pArray = layoutManager.rectArrayForCharacterRange(range, range, textContainer, pRectCount);", "+\t\t\t\t\t\t\t\tint /*long*/ [] rectCount = new int /*long*/ [1];", "+\t\t\t\t\t\t\t\tOS.memmove(rectCount, pRectCount, C.PTR_SIZEOF);", "+\t\t\t\t\t\t\t\tOS.free(pRectCount);", "+\t\t\t\t\t\t\t\tNSRect rect = new NSRect();", "-\t\t\t\t\t\t\t\tNSRect rect = layoutManager.boundingRectForGlyphRange(range, textContainer);", "-\t\t\t\t\t\t\t\tfloat /*double*/ underlineX = pt.x + rect.x;", "-\t\t\t\t\t\t\t\tfloat /*double*/ underlineY = pt.y + rect.y + rect.height - baseline;", "-\t\t\t\t\t\t\t\tNSBezierPath path = NSBezierPath.bezierPath();", "-\t\t\t\t\t\t\t\tswitch (style.underlineStyle) {", "-\t\t\t\t\t\t\t\tcase SWT.UNDERLINE_ERROR: {", "-\t\t\t\t\t\t\t\t\tpath.setLineWidth(2f);", "-\t\t\t\t\t\t\t\t\tpath.setLineCapStyle(OS.NSRoundLineCapStyle);", "-\t\t\t\t\t\t\t\t\tpath.setLineJoinStyle(OS.NSRoundLineJoinStyle);", "-\t\t\t\t\t\t\t\t\tpath.setLineDash(new float /*double*/ []{1, 3f}, 2, 0);", "-\t\t\t\t\t\t\t\t\tpoint.x = underlineX;", "-\t\t\t\t\t\t\t\t\tpoint.y = underlineY + 0.5f;", "-\t\t\t\t\t\t\t\t\tpath.moveToPoint(point);", "-\t\t\t\t\t\t\t\t\tpoint.x = underlineX + rect.width;", "-\t\t\t\t\t\t\t\t\tpoint.y = underlineY + 0.5f;", "-\t\t\t\t\t\t\t\t\tpath.lineToPoint(point);", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcase SWT.UNDERLINE_SQUIGGLE: {", "-\t\t\t\t\t\t\t\t\tgc.handle.setShouldAntialias(false);", "-\t\t\t\t\t\t\t\t\tpath.setLineWidth(1.0f);", "-\t\t\t\t\t\t\t\t\tpath.setLineCapStyle(OS.NSButtLineCapStyle);", "-\t\t\t\t\t\t\t\t\tpath.setLineJoinStyle(OS.NSMiterLineJoinStyle);", "-\t\t\t\t\t\t\t\t\tfloat /*double*/ lineBottom = pt.y + rect.y + rect.height;", "-\t\t\t\t\t\t\t\t\tfloat squigglyThickness = 1;", "-\t\t\t\t\t\t\t\t\tfloat squigglyHeight = 2 * squigglyThickness;", "-\t\t\t\t\t\t\t\t\tfloat /*double*/ squigglyY = Math.min(underlineY - squigglyHeight / 2, lineBottom - squigglyHeight - 1);", "-\t\t\t\t\t\t\t\t\tfloat[] points = computePolyline((int)underlineX, (int)squigglyY, (int)(underlineX + rect.width), (int)(squigglyY + squigglyHeight));", "-\t\t\t\t\t\t\t\t\tpoint.x = points[0] + 0.5f;", "-\t\t\t\t\t\t\t\t\tpoint.y = points[1] + 0.5f;", "-\t\t\t\t\t\t\t\t\tpath.moveToPoint(point);", "-\t\t\t\t\t\t\t\t\tfor (int p = 2; p < points.length; p+=2) {", "-\t\t\t\t\t\t\t\t\t\tpoint.x = points[p] + 0.5f;", "-\t\t\t\t\t\t\t\t\t\tpoint.y = points[p+1] + 0.5f;", "-\t\t\t\t\t\t\t\t\t\tpath.lineToPoint(point);", "+\t\t\t\t\t\t\t\tfor (int k = 0; k < rectCount[0]; k++, pArray += NSRect.sizeof) {", "+\t\t\t\t\t\t\t\t\tOS.memmove(rect, pArray, NSRect.sizeof);", "+\t\t\t\t\t\t\t\t\tfloat /*double*/ underlineX = pt.x + rect.x;", "+\t\t\t\t\t\t\t\t\tfloat /*double*/ underlineY = pt.y + rect.y + rect.height - baseline;", "+\t\t\t\t\t\t\t\t\tNSBezierPath path = NSBezierPath.bezierPath();", "+\t\t\t\t\t\t\t\t\tswitch (style.underlineStyle) {", "+\t\t\t\t\t\t\t\t\t\tcase SWT.UNDERLINE_ERROR: {", "+\t\t\t\t\t\t\t\t\t\t\tpath.setLineWidth(2f);", "+\t\t\t\t\t\t\t\t\t\t\tpath.setLineCapStyle(OS.NSRoundLineCapStyle);", "+\t\t\t\t\t\t\t\t\t\t\tpath.setLineJoinStyle(OS.NSRoundLineJoinStyle);", "+\t\t\t\t\t\t\t\t\t\t\tpath.setLineDash(new float /*double*/ []{1, 3f}, 2, 0);", "+\t\t\t\t\t\t\t\t\t\t\tpoint.x = underlineX;", "+\t\t\t\t\t\t\t\t\t\t\tpoint.y = underlineY + 0.5f;", "+\t\t\t\t\t\t\t\t\t\t\tpath.moveToPoint(point);", "+\t\t\t\t\t\t\t\t\t\t\tpoint.x = underlineX + rect.width;", "+\t\t\t\t\t\t\t\t\t\t\tpoint.y = underlineY + 0.5f;", "+\t\t\t\t\t\t\t\t\t\t\tpath.lineToPoint(point);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tcase SWT.UNDERLINE_SQUIGGLE: {", "+\t\t\t\t\t\t\t\t\t\t\tgc.handle.setShouldAntialias(false);", "+\t\t\t\t\t\t\t\t\t\t\tpath.setLineWidth(1.0f);", "+\t\t\t\t\t\t\t\t\t\t\tpath.setLineCapStyle(OS.NSButtLineCapStyle);", "+\t\t\t\t\t\t\t\t\t\t\tpath.setLineJoinStyle(OS.NSMiterLineJoinStyle);", "+\t\t\t\t\t\t\t\t\t\t\tfloat /*double*/ lineBottom = pt.y + rect.y + rect.height;", "+\t\t\t\t\t\t\t\t\t\t\tfloat squigglyThickness = 1;", "+\t\t\t\t\t\t\t\t\t\t\tfloat squigglyHeight = 2 * squigglyThickness;", "+\t\t\t\t\t\t\t\t\t\t\tfloat /*double*/ squigglyY = Math.min(underlineY - squigglyHeight / 2, lineBottom - squigglyHeight - 1);", "+\t\t\t\t\t\t\t\t\t\t\tfloat[] points = computePolyline((int)underlineX, (int)squigglyY, (int)(underlineX + rect.width), (int)(squigglyY + squigglyHeight));", "+\t\t\t\t\t\t\t\t\t\t\tpoint.x = points[0] + 0.5f;", "+\t\t\t\t\t\t\t\t\t\t\tpoint.y = points[1] + 0.5f;", "+\t\t\t\t\t\t\t\t\t\t\tpath.moveToPoint(point);", "+\t\t\t\t\t\t\t\t\t\t\tfor (int p = 2; p < points.length; p+=2) {", "+\t\t\t\t\t\t\t\t\t\t\t\tpoint.x = points[p] + 0.5f;", "+\t\t\t\t\t\t\t\t\t\t\t\tpoint.y = points[p+1] + 0.5f;", "+\t\t\t\t\t\t\t\t\t\t\t\tpath.lineToPoint(point);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tpath.stroke();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tpath.stroke();", "-\t\t\t\t\t\t\trange.location = layoutManager.glyphIndexForCharacterAtIndex(Math.max(lineStart, start));", "-\t\t\t\t\t\t\trange.length = layoutManager.glyphIndexForCharacterAtIndex(Math.min(lineEnd, end) + 1) - range.location;", "+\t\t\t\t\t\t\trange.location = Math.max(lineStart, start);", "+\t\t\t\t\t\t\trange.length = Math.min(lineEnd, end) + 1 - range.location;", "+\t\t\t\t\t\t\t\tint /*long*/ pRectCount = OS.malloc(C.PTR_SIZEOF);", "+\t\t\t\t\t\t\t\tint /*long*/ pArray = layoutManager.rectArrayForCharacterRange(range, range, textContainer, pRectCount);", "+\t\t\t\t\t\t\t\tint /*long*/ [] rectCount = new int /*long*/ [1];", "+\t\t\t\t\t\t\t\tOS.memmove(rectCount, pRectCount, C.PTR_SIZEOF);", "+\t\t\t\t\t\t\t\tOS.free(pRectCount);", "+\t\t\t\t\t\t\t\tNSRect rect = new NSRect();", "-\t\t\t\t\t\t\t\tNSRect rect = layoutManager.boundingRectForGlyphRange(range, textContainer);", "-\t\t\t\t\t\t\t\trect.x += pt.x + 0.5f;", "-\t\t\t\t\t\t\t\trect.y += pt.y + 0.5f;", "-\t\t\t\t\t\t\t\trect.width -= 0.5f;", "-\t\t\t\t\t\t\t\trect.height -= 0.5f;", "-\t\t\t\t\t\t\t\tcase SWT.BORDER_SOLID:\tbreak;", "-\t\t\t\t\t\t\t\tcase SWT.BORDER_DASH: dashes = width != 0 ? GC.LINE_DASH : GC.LINE_DASH_ZERO; break;", "-\t\t\t\t\t\t\t\tcase SWT.BORDER_DOT: dashes = width != 0 ? GC.LINE_DOT : GC.LINE_DOT_ZERO; break;", "+\t\t\t\t\t\t\t\t\tcase SWT.BORDER_SOLID:\tbreak;", "+\t\t\t\t\t\t\t\t\tcase SWT.BORDER_DASH: dashes = width != 0 ? GC.LINE_DASH : GC.LINE_DASH_ZERO; break;", "+\t\t\t\t\t\t\t\t\tcase SWT.BORDER_DOT: dashes = width != 0 ? GC.LINE_DOT : GC.LINE_DOT_ZERO; break;", "-\t\t\t\t\t\t\t\tNSBezierPath path = NSBezierPath.bezierPath();", "-\t\t\t\t\t\t\t\tpath.setLineDash(lengths, lengths != null ? lengths.length : 0, 0);", "-\t\t\t\t\t\t\t\tpath.appendBezierPathWithRect(rect);", "-\t\t\t\t\t\t\t\tpath.stroke();", "+\t\t\t\t\t\t\t\tfor (int k = 0; k < rectCount[0]; k++, pArray += NSRect.sizeof) {", "+\t\t\t\t\t\t\t\t\tOS.memmove(rect, pArray, NSRect.sizeof);", "+\t\t\t\t\t\t\t\t\trect.x += pt.x + 0.5f;", "+\t\t\t\t\t\t\t\t\trect.y += pt.y + 0.5f;", "+\t\t\t\t\t\t\t\t\trect.width -= 0.5f;", "+\t\t\t\t\t\t\t\t\trect.height -= 0.5f;", "+\t\t\t\t\t\t\t\t\tNSBezierPath path = NSBezierPath.bezierPath();", "+\t\t\t\t\t\t\t\t\tpath.setLineDash(lengths, lengths != null ? lengths.length : 0, 0);", "+\t\t\t\t\t\t\t\t\tpath.appendBezierPathWithRect(rect);", "+\t\t\t\t\t\t\t\t\tpath.stroke();", "+\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "389a30c22488328ed7ddec12733e3d2a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "f5a8e8f2be872aa0f00468cbc5f2b2457a130aec", "commitAfterChange": "bbd54157efbc0546e5afb0c37a5e8c6948a88206", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["+\tint length = translateOffset(text.length());", "+\tif (length == 0 && flags == 0) return;", "+\tgc.handle.saveGraphicsState();", "+\t\tNSPoint point = new NSPoint();", "+\t\tfor (int j = 0; j < styles.length; j++) {", "+\t\t\tStyleItem run = styles[j];", "+\t\t\tTextStyle style = run.style;", "+\t\t\tif (style == null) continue;", "+\t\t\tboolean drawUnderline = style.underline && style.underlineStyle != SWT.UNDERLINE_SINGLE && style.underlineStyle != SWT.UNDERLINE_DOUBLE;", "+\t\t\tdrawUnderline = drawUnderline && (j + 1 == styles.length || !style.isAdherentUnderline(styles[j + 1].style)); ", "+\t\t\tboolean drawBorder = style.borderStyle != SWT.NONE;", "+\t\t\tdrawBorder = drawBorder && (j + 1 == styles.length || !style.isAdherentBorder(styles[j + 1].style)); ", "+\t\t\tif (!drawUnderline && !drawBorder) continue;", "+\t\t\tint end = j + 1 < styles.length ? translateOffset(styles[j + 1].start - 1) : length;", "+\t\t\tfor (int i = 0; i < lineOffsets.length - 1; i++) {", "+\t\t\t\tint lineStart = untranslateOffset(lineOffsets[i]);", "+\t\t\t\tint lineEnd = untranslateOffset(lineOffsets[i + 1] - 1);", "+\t\t\t\tif (drawUnderline) {", "+\t\t\t\t\tint start = run.start;", "+\t\t\t\t\tfor (int k = j; k > 0 && style.isAdherentUnderline(styles[k - 1].style); k--) {", "+\t\t\t\t\t\tstart = styles[k - 1].start;", "+\t\t\t\t\t}", "+\t\t\t\t\tstart = translateOffset(start);", "+\t\t\t\t\tif (!(start > lineEnd || end < lineStart)) {", "+\t\t\t\t\t\trange.location = layoutManager.glyphIndexForCharacterAtIndex(Math.max(lineStart, start));", "+\t\t\t\t\t\trange.length = layoutManager.glyphIndexForCharacterAtIndex(Math.min(lineEnd, end) + 1) - range.location;", "+\t\t\t\t\t\tif (range.length > 0) {", "+\t\t\t\t\t\t\tgc.handle.saveGraphicsState();", "+\t\t\t\t\t\t\tNSRect rect = layoutManager.boundingRectForGlyphRange(range, textContainer);", "+\t\t\t\t\t\t\tfloat baseline = layoutManager.typesetter().baselineOffsetInLayoutManager(layoutManager, lineStart);", "+\t\t\t\t\t\t\tfloat underlineX = pt.x + rect.x;", "+\t\t\t\t\t\t\tfloat underlineY = pt.y + rect.y + rect.height - baseline;", "+\t\t\t\t\t\t\tfloat[] color = null;", "+\t\t\t\t\t\t\tif (style.underlineColor != null) color = style.underlineColor.handle;", "+\t\t\t\t\t\t\tif (color == null && style.foreground != null) color = style.foreground.handle;", "+\t\t\t\t\t\t\tif (color != null) {", "+\t\t\t\t\t\t\t\tNSColor.colorWithDeviceRed(color[0], color[1], color[2], color[3]).setStroke();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tNSBezierPath path = NSBezierPath.bezierPath();", "+\t\t\t\t\t\t\tswitch (style.underlineStyle) {", "+\t\t\t\t\t\t\t\tcase SWT.UNDERLINE_ERROR: {", "+\t\t\t\t\t\t\t\t\tpath.setLineWidth(2f);", "+\t\t\t\t\t\t\t\t\tpath.setLineCapStyle(OS.NSRoundLineCapStyle);", "+\t\t\t\t\t\t\t\t\tpath.setLineJoinStyle(OS.NSRoundLineJoinStyle);", "+\t\t\t\t\t\t\t\t\tpath.setLineDash(new float[]{1, 3f}, 2, 0);", "+\t\t\t\t\t\t\t\t\tpoint.x = underlineX;", "+\t\t\t\t\t\t\t\t\tpoint.y = underlineY + 0.5f;", "+\t\t\t\t\t\t\t\t\tpath.moveToPoint(point);", "+\t\t\t\t\t\t\t\t\tpoint.x = underlineX + rect.width;", "+\t\t\t\t\t\t\t\t\tpoint.y = underlineY + 0.5f;", "+\t\t\t\t\t\t\t\t\tpath.lineToPoint(point);", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcase SWT.UNDERLINE_SQUIGGLE: {", "+\t\t\t\t\t\t\t\t\tgc.handle.setShouldAntialias(false);", "+\t\t\t\t\t\t\t\t\tpath.setLineWidth(1.0f);", "+\t\t\t\t\t\t\t\t\tpath.setLineCapStyle(OS.NSButtLineCapStyle);", "+\t\t\t\t\t\t\t\t\tpath.setLineJoinStyle(OS.NSMiterLineJoinStyle);", "+\t\t\t\t\t\t\t\t\tfloat lineBottom = pt.y + rect.y + rect.height;", "+\t\t\t\t\t\t\t\t\tfloat squigglyThickness = 1;", "+\t\t\t\t\t\t\t\t\tfloat squigglyHeight = 2 * squigglyThickness;", "+\t\t\t\t\t\t\t\t\tfloat squigglyY = Math.min(underlineY - squigglyHeight / 2, lineBottom - squigglyHeight - 1);", "+\t\t\t\t\t\t\t\t\tfloat[] points = computePolyline((int)underlineX, (int)squigglyY, (int)(underlineX + rect.width), (int)(squigglyY + squigglyHeight));", "+\t\t\t\t\t\t\t\t\tpoint.x = points[0] + 0.5f;", "+\t\t\t\t\t\t\t\t\tpoint.y = points[1] + 0.5f;", "+\t\t\t\t\t\t\t\t\tpath.moveToPoint(point);", "+\t\t\t\t\t\t\t\t\tfor (int p = 2; p < points.length; p+=2) {", "+\t\t\t\t\t\t\t\t\t\tpoint.x = points[p] + 0.5f;", "+\t\t\t\t\t\t\t\t\t\tpoint.y = points[p+1] + 0.5f;", "+\t\t\t\t\t\t\t\t\t\tpath.lineToPoint(point);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tpath.stroke();", "+\t\t\t\t\t\t\tgc.handle.restoreGraphicsState();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (drawBorder) {", "+\t\t\t\t\tint start = run.start;", "+\t\t\t\t\tfor (int k = j; k > 0 && style.isAdherentBorder(styles[k - 1].style); k--) {", "+\t\t\t\t\t\tstart = styles[k - 1].start;", "+\t\t\t\t\t}", "+\t\t\t\t\tstart = translateOffset(start);", "+\t\t\t\t\tif (!(start > lineEnd || end < lineStart)) {", "+\t\t\t\t\t\trange.location = layoutManager.glyphIndexForCharacterAtIndex(Math.max(lineStart, start));", "+\t\t\t\t\t\trange.length = layoutManager.glyphIndexForCharacterAtIndex(Math.min(lineEnd, end) + 1) - range.location;", "+\t\t\t\t\t\tif (range.length > 0) {", "+\t\t\t\t\t\t\tgc.handle.saveGraphicsState();", "+\t\t\t\t\t\t\tNSRect rect = layoutManager.boundingRectForGlyphRange(range, textContainer);", "+\t\t\t\t\t\t\trect.x += pt.x + 0.5f;", "+\t\t\t\t\t\t\trect.y += pt.y + 0.5f;", "+\t\t\t\t\t\t\tfloat[] color = null;", "+\t\t\t\t\t\t\tif (style.borderColor != null) color = style.borderColor.handle;", "+\t\t\t\t\t\t\tif (color == null && style.foreground != null) color = style.foreground.handle;", "+\t\t\t\t\t\t\tif (color != null) {", "+\t\t\t\t\t\t\t\tNSColor.colorWithDeviceRed(color[0], color[1], color[2], color[3]).setStroke();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tint width = 1;", "+\t\t\t\t\t\t\tfloat[] dashes = null;", "+\t\t\t\t\t\t\tswitch (style.borderStyle) {", "+\t\t\t\t\t\t\t\tcase SWT.BORDER_SOLID:\tbreak;", "+\t\t\t\t\t\t\t\tcase SWT.BORDER_DASH: dashes = width != 0 ? GC.LINE_DASH : GC.LINE_DASH_ZERO; break;", "+\t\t\t\t\t\t\t\tcase SWT.BORDER_DOT: dashes = width != 0 ? GC.LINE_DOT : GC.LINE_DOT_ZERO; break;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tNSBezierPath path = NSBezierPath.bezierPath();", "+\t\t\t\t\t\t\tpath.setLineDash(dashes, dashes != null ? dashes.length : 0, 0);", "+\t\t\t\t\t\t\tpath.appendBezierPathWithRect(rect);", "+\t\t\t\t\t\t\tpath.stroke();", "+\t\t\t\t\t\t\tgc.handle.restoreGraphicsState();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t}", "+\tgc.handle.restoreGraphicsState();"]}], "num": 39469}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5b30349a7cd4c1039c7f006d1bc39909", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0a01b889aa5c8b945ad2f520897abfc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "28fa68d6ba14a61b0a5ff4a38499eb3d2c0ae70f", "commitAfterChange": "ab04bfe3c82ede49bd463efb217e07084fb7d820", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 102, "signatureBeforeChange": "  int kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData)", "diff": ["-\tif (accessible != null) {", "-\t\treturn accessible.internal_kEventAccessibleGetAllAttributeNames (nextHandler, theEvent, userData);", "+\tint code = OS.eventNotHandledErr;", "+\tString [] attributes = getAxAttributes ();", "+\tif (attributes != null) {", "+\t\tOS.CallNextEventHandler (nextHandler, theEvent);", "+\t\tnextHandler = 0;", "+\t\tint [] arrayRef = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeNames, OS.typeCFMutableArrayRef, null, 4, null, arrayRef);", "+\t\tint attributesArrayRef = arrayRef [0];", "+\t\tint length = OS.CFArrayGetCount (attributesArrayRef);", "+\t\tString[] osAttributes = new String [length];", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tint stringRef = OS.CFArrayGetValueAtIndex (attributesArrayRef, i);", "+\t\t\tint strLength = OS.CFStringGetLength (stringRef);", "+\t\t\tchar [] buffer = new char [strLength];", "+\t\t\tCFRange range = new CFRange ();", "+\t\t\trange.length = strLength;", "+\t\t\tOS.CFStringGetCharacters (stringRef, range, buffer);", "+\t\t\tosAttributes [i] = new String (buffer);", "+\t\t}", "+\t\tfor (int i = 0; i < attributes.length; i++) {", "+\t\t\tif (!contains (osAttributes, attributes [i])) {", "+\t\t\t\tString string = attributes [i];", "+\t\t\t\tchar [] buffer = new char [string.length ()];", "+\t\t\t\tstring.getChars (0, buffer.length, buffer, 0);", "+\t\t\t\tint stringRef = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\tOS.CFArrayAppendValue (attributesArrayRef, stringRef);", "+\t\t\t\tOS.CFRelease (stringRef);", "+\t\t\t}", "+\t\t}", "+\t\tcode = OS.noErr;", "-\treturn OS.eventNotHandledErr;", "+\tif (accessible != null) {", "+\t\tcode = accessible.internal_kEventAccessibleGetAllAttributeNames (nextHandler, theEvent, userData);", "+\t}", "+\treturn code;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c13fe6b483cbabf6c1f973397c54d289", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "28fa68d6ba14a61b0a5ff4a38499eb3d2c0ae70f", "commitAfterChange": "ab04bfe3c82ede49bd463efb217e07084fb7d820", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 33, "signatureBeforeChange": "  int kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData)", "diff": ["-\tint code = OS.CallNextEventHandler (nextHandler, theEvent);", "-\tint stringArrayRef = 0;", "-\tif (code != OS.noErr) {", "-\t\tint [] arrayRef = new int[1];", "+\tint code = OS.eventNotHandledErr;", "+\tString [] attributes = getAxAttributes ();", "+\tif (attributes != null) {", "+\t\tOS.CallNextEventHandler (nextHandler, theEvent);", "+\t\tnextHandler = 0;", "+\t\tint [] arrayRef = new int [1];", "-\t\tstringArrayRef = arrayRef[0];", "+\t\tint attributesArrayRef = arrayRef [0];", "+\t\tint length = OS.CFArrayGetCount (attributesArrayRef);", "+\t\tString[] osAttributes = new String [length];", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tint stringRef = OS.CFArrayGetValueAtIndex (attributesArrayRef, i);", "+\t\t\tint strLength = OS.CFStringGetLength (stringRef);", "+\t\t\tchar [] buffer = new char [strLength];", "+\t\t\tCFRange range = new CFRange ();", "+\t\t\trange.length = strLength;", "+\t\t\tOS.CFStringGetCharacters (stringRef, range, buffer);", "+\t\t\tosAttributes [i] = new String (buffer);", "+\t\t}", "+\t\tfor (int i = 0; i < attributes.length; i++) {", "+\t\t\tif (!contains (osAttributes, attributes [i])) {", "+\t\t\t\tString string = attributes [i];", "+\t\t\t\tchar [] buffer = new char [string.length ()];", "+\t\t\t\tstring.getChars (0, buffer.length, buffer, 0);", "+\t\t\t\tint stringRef = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\tOS.CFArrayAppendValue (attributesArrayRef, stringRef);", "+\t\t\t\tOS.CFRelease (stringRef);", "+\t\t\t}", "+\t\t}", "+\t\tcode = OS.noErr;", "-\tif (stringArrayRef == 0) {", "-\t\tstringArrayRef = OS.CFArrayCreateMutable (OS.kCFAllocatorDefault, 0, 0);", "+\tif (parent.accessible != null) {", "+\t\tcode = parent.accessible.internal_kEventAccessibleGetAllAttributeNames (nextHandler, theEvent, userData);", "-\tString string = OS.kAXValueAttribute;", "-\tchar [] buffer = new char [string.length ()];", "-\tstring.getChars (0, buffer.length, buffer, 0);", "-\tint stringRef = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-\tOS.CFArrayAppendValue(stringArrayRef, stringRef);", "-\tOS.CFRelease(stringRef);", "-\treturn OS.noErr;", "+\treturn code;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c7a33ec009bf43e9430631878a6f52b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "14fbe017d1e3dc78020213280156fbd51d492d0a", "commitAfterChange": "e204c746a54241ff7faf790f527aebbdadf8a989", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r int loadFontSet(int xDisplay, FontData fd)", "signatureAfterChange": "\r \r String getXlfds(int fontSet)", "diff": ["-}\r", "-int loadFontSet(int xDisplay, FontData fd) {\r", "-\t/* Use the character encoding for the default locale */\r", "-\tbyte[] buffer = Converter.wcsToMbcs(null, fd.getXlfd(), true);\r", "-\tint[] missing_charset = new int[1];\r", "-\tint[] missing_charset_count = new int[1];\r", "-\tint[] def_string = new int[1];\r", "-\treturn OS.XCreateFontSet(xDisplay, buffer, missing_charset, missing_charset_count, def_string);\r", "-}\r", "+\r", "+String getXlfds(int fontSet) {\r", "+\tif (fontSet == 0) return \"\";\r", "+\tint[] fontStructPtr = new int[1];\r", "+\tint[] fontNamePtr = new int[1];\r", "+\tXFontStruct fontStruct = new XFontStruct();  \r", "+\tint nFonts = OS.XFontsOfFontSet(fontSet, fontStructPtr, fontNamePtr);\r", "+\tint [] fontStructs = new int[nFonts];\r", "+\tOS.memmove(fontStructs,fontStructPtr[0], nFonts * 4);\r", "+\tStringBuffer stringBuffer = new StringBuffer();\r", "+\tfor (int i = 0; i < nFonts; i++) { // Go through each fontStruct in the font set.\r", "+\t\tOS.memmove(fontStruct,fontStructs[i],20 * 4);\r", "+\t\tint propPtr = fontStruct.properties;\r", "+\t\tfor (int j = 0; j < fontStruct.n_properties; j++) {\r", "+\t\t\t// Reef through properties looking for XAFONT\r", "+\t\t\tint[] prop = new int[2];\r", "+\t\t\tOS.memmove(prop, propPtr, 8);\r", "+\t\t\tif (prop[0] == OS.XA_FONT) {\r", "+\t\t\t\t/* Found it, prop[1] points to the string */\r", "+\t\t\t\tint ptr = OS.XmGetAtomName(device.xDisplay, prop[1]);\r", "+\t\t\t\tint length = OS.strlen(ptr);\r", "+\t\t\t\tbyte[] nameBuf = new byte[length];\r", "+\t\t\t\tOS.memmove(nameBuf, ptr, length);\r", "+\t\t\t\tif (stringBuffer.length() != 0) stringBuffer.append(','); \r", "+\t\t\t\tstringBuffer.append(new String(Converter.mbcsToWcs(null, nameBuf)).toLowerCase());\r", "+\t\t\t\tOS.XFree(ptr);\r", "+\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t\tpropPtr += 8;\r", "+\t\t}\r", "+\treturn stringBuffer.toString();\r"]}], "num": 15946}
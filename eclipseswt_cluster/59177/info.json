{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6e9ce2457878f537f2135fa708565279", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e92c8c72a34a76bd0fc7573079af121", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TextTransfer.java", "commitBeforeChange": "74553fa6850361f786837718de64643b391519f8", "commitAfterChange": "bf33a068cd8d34feb66b3cb1cbaacdbe09b72620", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-\tif (!isSupportedType(transferData) || transferData.pIDataObject == 0) {", "-\t\ttransferData.result = COM.E_FAIL;", "-\t\treturn null;", "-\t}", "+\tif (!isSupportedType(transferData) || transferData.pIDataObject == 0) return null;", "-\t", "-", "-\t\t", "-\tif (transferData.result != COM.S_OK) {", "-\t\treturn null;", "-\t}", "-\t", "+\tif (transferData.result != COM.S_OK) return null;", "-\t/* Ensure byteCount is a multiple of 2 bytes on UNICODE platforms */", "-\tint size = COM.GlobalSize(hMem) / TCHAR.sizeof * TCHAR.sizeof;", "-\tTCHAR buffer = new TCHAR(0, size / TCHAR.sizeof);", "-\tint ptr = COM.GlobalLock(hMem);", "-\tCOM.MoveMemory(buffer, ptr, size);", "-\tCOM.GlobalUnlock(hMem);\t", "-\tCOM.GlobalFree(hMem);", "-\treturn buffer.toString(0, buffer.strlen());", "+\ttry {", "+\t\tswitch (transferData.type) {", "+\t\t\tcase CF_UNICODETEXTID: {", "+\t\t\t\t/* Ensure byteCount is a multiple of 2 bytes on UNICODE platforms */", "+\t\t\t\tint size = COM.GlobalSize(hMem) / TCHAR.sizeof * TCHAR.sizeof;", "+\t\t\t\tif (size == 0) return null;", "+\t\t\t\tTCHAR buffer = new TCHAR(0, size / TCHAR.sizeof);", "+\t\t\t\tint ptr = COM.GlobalLock(hMem);", "+\t\t\t\tif (ptr == 0) return null;", "+\t\t\t\ttry {", "+\t\t\t\t\tCOM.MoveMemory(buffer, ptr, size);", "+\t\t\t\t\treturn buffer.toString(0, buffer.strlen());", "+\t\t\t\t} finally {", "+\t\t\t\t\tCOM.GlobalUnlock(hMem);\t", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcase CF_TEXTID: {", "+\t\t\t\tint lpMultiByteStr = COM.GlobalLock(hMem);", "+\t\t\t\tif (lpMultiByteStr == 0) return null;", "+\t\t\t\ttry {", "+\t\t\t\t\tint cchWideChar = COM.MultiByteToWideChar (CodePage, COM.MB_PRECOMPOSED, lpMultiByteStr, -1, null, 0);", "+\t\t\t\t\tif (cchWideChar == 0) return null;", "+\t\t\t\t\tchar[] lpWideCharStr = new char [cchWideChar - 1];", "+\t\t\t\t\tCOM.MultiByteToWideChar (CodePage, COM.MB_PRECOMPOSED, lpMultiByteStr, -1, lpWideCharStr, lpWideCharStr.length);", "+\t\t\t\t\treturn new String(lpWideCharStr);", "+\t\t\t\t} finally {", "+\t\t\t\t\tCOM.GlobalUnlock(hMem);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t} finally {", "+\t\tCOM.GlobalFree(hMem);", "+\t}", "+\treturn null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c7ca9f3992343663a953b8ca258e3b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/URLTransfer.java", "commitBeforeChange": "10cff956b5a7baa336ed7e4f79deb8729cdad298", "commitAfterChange": "4a54739762437bd8066c9b7d36c4c3d14493b18a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-\t\tint /*long*/ lpMultiByteStr = OS.GlobalLock(hMem);", "-\t\tif (lpMultiByteStr == 0) return null;", "-\t\ttry {", "-\t\t\tint codePage = OS.GetACP();", "-\t\t\tint cchWideChar  = OS.MultiByteToWideChar (codePage, OS.MB_PRECOMPOSED, lpMultiByteStr, -1, null, 0);", "-\t\t\tif (cchWideChar == 0) return null;", "-\t\t\tchar[] lpWideCharStr = new char [cchWideChar - 1];", "-\t\t\tOS.MultiByteToWideChar (codePage, OS.MB_PRECOMPOSED, lpMultiByteStr, -1, lpWideCharStr, lpWideCharStr.length);", "-\t\t\treturn new String(lpWideCharStr);", "-\t\t} finally {", "-\t\t\tOS.GlobalUnlock(hMem);", "+\t\tif (transferData.type == CFSTR_INETURLIDW) {", "+\t\t\t/* Ensure byteCount is a multiple of 2 bytes */", "+\t\t\tint size = OS.GlobalSize(hMem) / 2 * 2;", "+\t\t\tif (size == 0) return null;", "+\t\t\tchar[] chars = new char[size/2];", "+\t\t\tint /*long*/ ptr = OS.GlobalLock(hMem);", "+\t\t\tif (ptr == 0) return null;", "+\t\t\ttry {", "+\t\t\t\tOS.MoveMemory(chars, ptr, size);", "+\t\t\t\tint length = chars.length;", "+\t\t\t\tfor (int i=0; i<chars.length; i++) {", "+\t\t\t\t\tif (chars [i] == '\\0') {", "+\t\t\t\t\t\tlength = i;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\treturn new String (chars, 0, length);", "+\t\t\t} finally {", "+\t\t\t\tOS.GlobalUnlock(hMem);\t", "+\t\t\t}", "+\t\t} else if (transferData.type == CFSTR_INETURLID) {", "+\t\t\tint /*long*/ lpMultiByteStr = OS.GlobalLock(hMem);", "+\t\t\tif (lpMultiByteStr == 0) return null;", "+\t\t\ttry {", "+\t\t\t\tint codePage = OS.GetACP();", "+\t\t\t\tint cchWideChar  = OS.MultiByteToWideChar (codePage, OS.MB_PRECOMPOSED, lpMultiByteStr, -1, null, 0);", "+\t\t\t\tif (cchWideChar == 0) return null;", "+\t\t\t\tchar[] lpWideCharStr = new char [cchWideChar - 1];", "+\t\t\t\tOS.MultiByteToWideChar (codePage, OS.MB_PRECOMPOSED, lpMultiByteStr, -1, lpWideCharStr, lpWideCharStr.length);", "+\t\t\t\treturn new String(lpWideCharStr);", "+\t\t\t} finally {", "+\t\t\t\tOS.GlobalUnlock(hMem);", "+\t\t\t}", "+\treturn null;"]}], "num": 59177}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a3dcff465a2098e4af0f1a4b7d0bcdcd", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b269cd9dbb6b951a9120f3ff02c3ab9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_List.java", "commitBeforeChange": "9e93d007401972731d2812b598cdc4e478c9b17c", "commitAfterChange": "9a65f33f478599955ffa3d6f8f3da0aa10fd6118", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  public void test_setSelection$I()", "signatureAfterChange": "  public void test_setSelection$I()", "diff": ["-\tif (fCheckSWTPolicy) {", "-\t\tlist.removeAll();", "-\t\t", "-\t\tlist.setSelection(new int [0]);", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "+\tlist.removeAll();", "+\t", "+\tlist.setSelection(new int [0]);", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), -1);", "-\t\ttry {", "-\t\t\tlist.setSelection((int[]) null);", "-\t\t\tfail(\"No exception thrown\");", "-\t\t} catch (IllegalArgumentException e) {", "-\t\t}", "-\t\t", "-\t\tlist.setSelection(new int [] {0});", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "-", "-\t\tlist.setSelection(new int [] {-1});", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "-", "-\t\tlist.setSelection(new int [] {0, 0});", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "-\t\t", "-\t\tlist.setSelection(new int [] {-1, 0});", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "-\t\t", "-\t\tlist.setSelection(new int [] {0, -1});", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "+\ttry {", "+\t\tlist.setSelection((int[]) null);", "+\t\tfail(\"No exception thrown\");", "+\t} catch (IllegalArgumentException e) {", "+\t", "+\tlist.setSelection(new int [] {0});", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), -1);", "+", "+\tlist.setSelection(new int [] {-1});", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), -1);", "+", "+\tlist.setSelection(new int [] {0, 0});", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), -1);", "+\t", "+\tlist.setSelection(new int [] {-1, 0});", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), -1);", "+\t", "+\tlist.setSelection(new int [] {0, -1});", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), -1);", "-\tif (fCheckSWTPolicy) {", "-\t\tlist.removeAll();", "-\t\t", "-\t\tlist.setSelection(new int [0]);", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "+\tlist.removeAll();", "+\t", "+\tlist.setSelection(new int [0]);", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), -1);", "-\t\ttry {", "-\t\t\tlist.setSelection((int[]) null);", "-\t\t\tfail(\"No exception thrown\");", "-\t\t} catch (IllegalArgumentException e) {", "-\t\t}", "-\t\t", "-\t\tlist.setSelection(new int [] {0});", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "-", "-\t\tlist.setSelection(new int [] {-1});", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "-", "-\t\tlist.setSelection(new int [] {0, 0});", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "-\t\t", "-\t\tlist.setSelection(new int [] {-1, 0});", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "-\t\t", "-\t\tlist.setSelection(new int [] {0, -1});", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), -1);", "+\ttry {", "+\t\tlist.setSelection((int[]) null);", "+\t\tfail(\"No exception thrown\");", "+\t} catch (IllegalArgumentException e) {", "+\t", "+\tlist.setSelection(new int [] {0});", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), -1);", "+", "+\tlist.setSelection(new int [] {-1});", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), -1);", "+", "+\tlist.setSelection(new int [] {0, 0});", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), -1);", "+\t", "+\tlist.setSelection(new int [] {-1, 0});", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), -1);", "+\t", "+\tlist.setSelection(new int [] {0, -1});", "+\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertEquals(list.getFocusIndex(), -1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90b98cfffc8a142aea799a5cd750d4f7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_List.java", "commitBeforeChange": "69ca4def95e26b4f7985d8aa70882f0b37698d59", "commitAfterChange": "c7ffe68125d78bc1bb1c15b6e270edf7c3020f35", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  public void test_setSelection$I()", "signatureAfterChange": "  public void test_setSelection$I()", "diff": ["-\tif (fCheckSWTPolicy) {", "-\t\tassertEquals(\"MULTI: setSelection(new int [0]) getFocusIndex()\", list.getFocusIndex(), -1);", "-\t}", "-\tassertEquals(\"MULTI: setSelection(new int [] {number}) getFocusIndex()\", list.getFocusIndex(), 2);", "-\tassertEquals(\"MULTI: setSelection(new int [] {1, 0}) getFocusIndex()\", list.getFocusIndex(), 1);", "-\tassertEquals(\"MULTI: setSelection(new int [] {-1, number}) getFocusIndex()\", list.getFocusIndex(), 1);", "-\tif (fCheckSWTPolicy) {", "-\t\tassertEquals(\"MULTI: setSelection(new int [] {-1, 0}) getFocusIndex()\", list.getFocusIndex(), number - 1);", "-\t}", "+// bug - wierd case - should probably fix:\tassertEquals(\"MULTI: setSelection(new int [] {-1, 0}) getFocusIndex()\", list.getFocusIndex(), 0);", "+\tlist.setSelection(new int [] {0, 1, 2, 3, 5});", "+\tassertEquals(\"MULTI: setSelection(new int [] {0, 1, 2, 3, 5})\", list.getSelectionIndices(), new int [] {0, 1, 2, 3, 5});", "+", "-\tassertEquals(\"MULTI: setSelection(indices) getFocusIndex()\", list.getFocusIndex(), indices[0]);", "-\tassertEquals(\"MULTI: setSelection(new int [] {number, number}) getFocusIndex()\", list.getFocusIndex(), 0);", "-\tassertEquals(\"MULTI: setSelection(new int [] {0, number, 1}) getFocusIndex()\", list.getFocusIndex(), 0);", "-\tassertEquals(\"MULTI: setSelection(new int [] {number - 1, 0, number - 2}) getFocusIndex()\", list.getFocusIndex(), number - 1);", "+\t", "-\tif (fCheckSWTPolicy) {", "-\t\tassertEquals(\"SINGLE: setSelection(new int [0]) getFocusIndex()\", list.getFocusIndex(), -1);", "-\t}", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number}) getFocusIndex()\", list.getFocusIndex(), 2);", "-\tassertEquals(\"SINGLE: setSelection(new int [] {1, 0})\", list.getSelectionIndices(), new int[] {1});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {1, 0}) getFocusIndex()\", list.getFocusIndex(), 1);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {1, 0})\", list.getSelectionIndices(), new int[] {});", "+", "+\tlist.setSelection(new int [] {0, 1, 2, 3, 5});", "+\tassertEquals(\"SINGLE: setSelection(new int [] {0, 1, 2, 3, 5})\", list.getSelectionIndices(), new int [] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {-1, number}) getFocusIndex()\", list.getFocusIndex(), 1);", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number})\", list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number}) getFocusIndex()\", list.getFocusIndex(), number - 1);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[] {0});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {-1, 0}) getFocusIndex()\", list.getFocusIndex(), 0);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(indices)\", list.getSelectionIndices(), new int[] {indices[0]});", "-\tassertEquals(\"SINGLE: setSelection(indices) getFocusIndex()\", list.getFocusIndex(), indices[0]);", "+\tassertEquals(\"SINGLE: setSelection(indices)\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number, number}) getFocusIndex()\", list.getFocusIndex(), 0);", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number - 1})\", list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number - 1}) getFocusIndex()\", list.getFocusIndex(), number - 1);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number - 1})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {0, number, 1})\", list.getSelectionIndices(), new int[] {0});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {0, number, 1}) getFocusIndex()\", list.getFocusIndex(), 0);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {0, number, 1})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, 0, number - 2})\", list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, 0, number - 2}) getFocusIndex()\", list.getFocusIndex(), number - 1);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, 0, number - 2})\", list.getSelectionIndices(), new int[] {});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdea1ed8da5de2e70c7335288e19cb40", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_List.java", "commitBeforeChange": "69ca4def95e26b4f7985d8aa70882f0b37698d59", "commitAfterChange": "c7ffe68125d78bc1bb1c15b6e270edf7c3020f35", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "  public void test_setSelectionII()", "signatureAfterChange": "  public void test_setSelectionII()", "diff": ["-\tlist.setSelection(1, 2);", "-\tassertEquals(list.getSelectionIndices(), new int[] {2});", "-\tassertEquals(list.getFocusIndex(), 2);", "-\t", "-\tlist.setSelection(-3, -2);", "-\tassertEquals(list.getSelectionIndices(), new int[] {2});", "-\tassertEquals(list.getFocusIndex(), 2);", "-\t", "-\tlist.setSelection(0, 1);", "-\tassertEquals(list.getSelectionIndices(), new int[] {1});", "-\tassertEquals(list.getFocusIndex(), 1);", "-\t", "-\tlist.setSelection(-2, -1);", "-\tassertEquals(list.getSelectionIndices(), new int[] {1});", "-\tassertEquals(list.getFocusIndex(), 1);", "-\t", "-\tlist.setSelection(number - 2, number - 1);", "-\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(list.getFocusIndex(), number - 1);", "-\t", "-\tlist.setSelection(number - 1, number);", "-\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(list.getFocusIndex(), number - 1);", "-\t", "-\tlist.setSelection(-1, 0);", "-\tassertEquals(list.getSelectionIndices(), new int[] {0});", "-\tassertEquals(list.getFocusIndex(), 0);", "-\t", "-\tlist.setSelection(number, number + 1);", "-\tassertEquals(list.getSelectionIndices(), new int[] {0});", "-\tassertEquals(list.getFocusIndex(), 0);", "-\t", "+\tlist.setSelection(1, 1);", "+\tassertEquals(list.getSelectionIndices(), new int[] {1});", "+\tassertEquals(list.getFocusIndex(), 1);", "+\t", "+\tlist.setSelection(4, 4);", "+\tassertEquals(list.getSelectionIndices(), new int[] {4});", "+\tassertEquals(list.getFocusIndex(), 4);", "+\t", "+\tlist.setSelection(number - 1, number - 1);", "+\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertEquals(list.getFocusIndex(), number - 1);", "+\t", "+\tlist.setSelection(number, number);", "+\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\t", "+\tlist.setSelection(-3, -2);", "+\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\t", "+\tlist.setSelection(0, 1);", "+\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\t", "+\tlist.setSelection(-2, -1);", "+\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\t", "+\tlist.setSelection(number - 2, number - 1);", "+\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\t", "+\tlist.setSelection(number - 1, number);", "+\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\t", "+\tlist.setSelection(-1, 0);", "+\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\t", "+\tlist.setSelection(number, number + 1);", "+\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\t", "-\tassertEquals(list.getSelectionIndices(), new int[] {0});", "-\tassertEquals(list.getFocusIndex(), 0);", "+\tassertEquals(list.getSelectionIndices(), new int[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(list.getFocusIndex(), number - 1);", "-", "-\tif (fCheckSWTPolicy) {", "-\t\tlist.removeAll();", "-", "-\t\tlist.setSelection(-2, -1);", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), 0);", "-\t\t", "-\t\tlist.setSelection(-1, 0);", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), 0);", "-\t\t", "-\t\tlist.setSelection(0, 1);", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), 0);", "-\t\t", "-\t\tlist.setSelection(1, 0);", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), 0);", "-\t\t", "-\t\tlist.setSelection(0, -1);", "-\t\tassertEquals(list.getSelectionIndices(), new int[0]);", "-\t\tassertEquals(list.getFocusIndex(), 0);", "-\t}", "+\tassertEquals(list.getSelectionIndices(), new int[] {});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed08a2ff9b60ebe21e53540d92aa3d63", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Table.java", "commitBeforeChange": "69ca4def95e26b4f7985d8aa70882f0b37698d59", "commitAfterChange": "c7ffe68125d78bc1bb1c15b6e270edf7c3020f35", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "  public void test_selectII()", "signatureAfterChange": "  public void test_selectII()", "diff": ["-", "-\ttable.setSelection(0);", "-\t\t", "-\tif (fCheckSWTPolicy) {", "-\t\ttable.select(4, 10);", "-\t\tassertEquals(new int[] {4}, table.getSelectionIndices());", "-\t\ttable.setSelection(4, 10);", "-\t\tassertEquals(new int[] {4}, table.getSelectionIndices()); //for SINGLE setSelection and select are the same", "-", "-\t\ttable.select(5, number - 1);", "-\t\tassertEquals(new int[] {5}, table.getSelectionIndices());", "-\t\ttable.setSelection(5, number - 1);", "-\t\tassertEquals(new int[] {5}, table.getSelectionIndices()); //for SINGLE setSelection and select are the same", "-", "-\t\ttable.select(0, 7);", "-\t\tassertEquals(new int[] {0}, table.getSelectionIndices());", "-\t\ttable.setSelection(0, 7);", "-\t\tassertEquals(new int[] {0}, table.getSelectionIndices()); //for SINGLE setSelection and select are the same", "-", "-\t\ttable.select(9, 5);", "-\t\tassertEquals(new int[] {7}, table.getSelectionIndices());", "-\t\ttable.setSelection(9, 5);", "-\t\tassertEquals(new int[] {}, table.getSelectionIndices()); //for SINGLE setSelection and select are the same", "-\t} // ?? in this case maybe the sel. should be cleared", "-\t", "-\tmakeCleanEnvironment(true);", "-\t", "-\tif (fCheckSWTPolicy) {", "-\t\ttable.select(-100, 1000);", "-\t\tassertEquals(1, table.getSelectionCount());", "-\t\tassertEquals(new int[] {number - 1}, table.getSelectionIndices());", "-\t}", "-\ttable.deselectAll();", "-\tassertEquals(0, table.getSelectionCount());", "-\ttable.select(0, 1000);", "-\tassertEquals(1, table.getSelectionCount());", "-\tif (fCheckSWTPolicy)", "-\t\tassertEquals(new int[] {number - 1}, table.getSelectionIndices());", "-\ttable.deselectAll();", "-\ttable.select(0, number - 1);", "-\tassertEquals(1, table.getSelectionCount());", "-\tif (fCheckSWTPolicy)", "-\t\tassertEquals(new int[] {number - 1}, table.getSelectionIndices());", "-\ttable.deselectAll();", "+", "+\tassertEquals(0, table.getSelectionIndex());", "-\ttable.deselectAll();", "-\ttable.select(number - 1, number);", "-\tassertEquals(1, table.getSelectionCount());", "-\tassertEquals(new int[] {number - 1}, table.getSelectionIndices());", "+", "+\ttable.select(4, 4);", "+\tassertEquals(new int[] {4}, table.getSelectionIndices());", "+", "+\ttable.select(10, 10);", "+\tassertEquals(new int[] {10}, table.getSelectionIndices());", "+", "+\ttable.select(number-1, number-1);", "+\tassertEquals(new int[] {number-1}, table.getSelectionIndices());", "+", "-\tassertEquals(0, table.getSelectionCount());", "-\ttable.deselectAll();", "-\t", "-\tmakeCleanEnvironment(true);", "-\tfor (int i = 0; i < number; i++)", "-\t\titems[i] = new TableItem(table, 0);", "-\ttable.select(-100, 1000);", "-\tif (fCheckSWTPolicy) {", "-\t\tassertEquals(1, table.getSelectionCount());", "-\t\tassertEquals(new int[] {number - 1}, table.getSelectionIndices());", "-\t}", "-\ttable.deselectAll();", "-\tassertEquals(0, table.getSelectionCount());", "-\ttable.select(1000, 0);", "-\tassertEquals(0, table.getSelectionCount());", "+\ttable.select(0, number-1);", "-\ttable.deselectAll();", "-\ttable.select(number - 1, 0);", "-\tif (fCheckSWTPolicy)", "-\t\tassertEquals(0, table.getSelectionCount());", "-\ttable.deselectAll();", "-\ttable.select(0, 0);", "-\tassertEquals(1, table.getSelectionCount());", "-\tassertEquals(new int[] {0}, table.getSelectionIndices());", "-\ttable.deselectAll();", "+", "+\ttable.select(-1, number);", "+\tassertEquals(new int[] {}, table.getSelectionIndices());", "+", "+\ttable.select(4, 5);", "+\tassertEquals(new int[] {}, table.getSelectionIndices());", "+", "+\ttable.select(5, 4);", "+\tassertEquals(new int[] {}, table.getSelectionIndices());", "+", "-\tif (fCheckSWTPolicy) {", "-\t\tassertEquals(0, table.getSelectionCount());", "-\t\tassertEquals(new int[] {}, table.getSelectionIndices());", "-\t}", "-\ttable.deselectAll();", "-\ttable.select(number, number);", "-\tif (fCheckSWTPolicy) {", "-\t\tassertEquals(0, table.getSelectionCount());", "-\t\tassertEquals(new int[] {}, table.getSelectionIndices());", "-\t}", "-\ttable.deselectAll();", "+\tassertEquals(new int[] {}, table.getSelectionIndices());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b21b58726f341352b6b67e410ccae4b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_List.java", "commitBeforeChange": "34b48a1450d691429218250a2c0b9f1d585dff6c", "commitAfterChange": "6c48129efab113803ef6d6a35457b5eb7eea82a5", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "  public void test_setSelectionII()", "signatureAfterChange": "  public void test_setSelectionII()", "diff": ["-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(list.getSelectionIndices(), new int[] {0});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {0});", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[] {0});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {0});", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[0]);", "+\tassertArrayEquals(list.getSelectionIndices(), new int[0]);", "-\tassertEquals(list.getSelectionIndices(), new int[] {0});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {0});", "-\tassertEquals(list.getSelectionIndices(), new int[] {1});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {1});", "-\tassertEquals(list.getSelectionIndices(), new int[] {4});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {4});", "-\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});", "-\tassertEquals(list.getSelectionIndices(), new int[] {number - 1});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(list.getSelectionIndices(), new int[] {});", "+\tassertArrayEquals(list.getSelectionIndices(), new int[] {});"]}], "num": 34660}
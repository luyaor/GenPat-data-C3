{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "906fd14bdb3e0fb7afa5543dcd5be9ba", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "151209f7fdc769ec203bc8a5509ce04a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "c63ca636edfbea4cd55ccc07da414186be375ce0", "commitAfterChange": "e38d4aec3f79c42ea6666a7a37c026187a8aa6ea", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 123, "signatureBeforeChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "diff": ["+\t}", "+\tif (backgroundImage != null) {", "+\t\tGC gc = null;", "+\t\tint paintDC = 0;", "+\t\tPAINTSTRUCT ps = new PAINTSTRUCT ();", "+\t\tif (hooks (SWT.Paint)) {", "+\t\t\tGCData data = new GCData ();", "+\t\t\tdata.ps = ps;", "+\t\t\tdata.hwnd = handle;", "+\t\t\tgc = GC.win32_new (this, data);", "+\t\t\tpaintDC = gc.handle;", "+\t\t} else {", "+\t\t\tpaintDC = OS.BeginPaint (handle, ps);", "+\t\t}", "+", "+\t\t//TODO - only double buffer the damage", "+//\t\tint x = ps.left, y = ps.top;", "+//\t\tint width = ps.right - ps.left;", "+//\t\tint height = ps.bottom - ps.top;", "+\t\tRECT rect = new RECT ();", "+\t\tOS.GetClientRect (handle, rect);", "+\t\tint x = rect.left, y = rect.top;", "+\t\tint width = rect.right - rect.left;", "+\t\tint height = rect.bottom - rect.top;", "+", "+\t\tint hDC = OS.CreateCompatibleDC (paintDC);", "+\t\tint hBitmap = OS.CreateCompatibleBitmap (paintDC, width, height);", "+\t\tint hOldBitmap = OS.SelectObject (hDC, hBitmap);", "+\t\tfillBackground (hDC, backgroundImage, rect);", "+\t\tint code = callWindowProc (handle, OS.WM_PAINT, hDC, 0);", "+\t\tOS.BitBlt (paintDC, x, y, width, height, hDC, 0, 0, OS.SRCCOPY);", "+\t\tOS.SelectObject (hDC, hOldBitmap);", "+\t\tOS.DeleteObject (hBitmap);", "+\t\tOS.DeleteObject (hDC);", "+\t\tif (hooks (SWT.Paint)) {", "+\t\t\tEvent event = new Event ();", "+\t\t\tevent.gc = gc;", "+\t\t\tevent.x = ps.left;", "+\t\t\tevent.y = ps.top;", "+\t\t\tevent.width = ps.right - ps.left;", "+\t\t\tevent.height = ps.bottom - ps.top;", "+\t\t\tsendEvent (SWT.Paint, event);", "+\t\t\t// widget could be disposed at this point", "+\t\t\tevent.gc = null;", "+\t\t\tgc.dispose ();", "+\t\t} else {", "+\t\t\tOS.EndPaint (handle, ps);", "+\t\t}", "+\t\treturn new LRESULT (code);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d80b54b718a28941efc743473531c1c9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "737b13eee8956d6fb70b0471ffb40fd8709bf274", "commitAfterChange": "c829ad7e77596aa2946c6bebe8a5dd77a29caf43", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "signatureAfterChange": "  public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "diff": ["+", "+\t/* ", "+\t* Draw the background of styles. There is no API to set a background attribute", "+\t* in an ATSU style.", "+\t*/", "+\tRectangle rect = null;", "+\tRegion clipping = null, region = null;", "+\tfor (int j = 0; j < styles.length; j++) {", "+\t\tStyleItem run = styles[j];", "+\t\tif (run.style == null || run.style.background == null) continue;", "+\t\tOS.CGContextSetFillColor(gc.handle, run.style.background.handle);", "+\t\tif (clipping == null) {", "+\t\t\tregion = new Region();", "+\t\t\tclipping = new Region();", "+\t\t\tgc.getClipping(clipping);", "+\t\t\trect = clipping.getBounds();", "+\t\t}", "+\t\tint start = run.start;", "+\t\tint end = j + 1 < styles.length ? styles[j + 1].start - 1 : length;", "+\t\tfor (int i=0, lineStart=0, lineY = 0; i<breaks.length; i++) {", "+\t\t\tint lineBreak = breaks[i];", "+\t\t\tint lineEnd = lineBreak - 1;", "+\t\t\tif (!(start > lineEnd || end < lineStart)) {", "+\t\t\t\tint highStart = Math.max(lineStart, start);", "+\t\t\t\tint highEnd = Math.min(lineEnd, end);", "+\t\t\t\tint highLen = skipHardBreak(highEnd) - highStart + 1;", "+\t\t\t\tif (highLen > 0) {", "+\t\t\t\t\tOS.ATSUGetTextHighlight(layout, lineX[i], lineY, highStart, highLen, region.handle);", "+\t\t\t\t\tOS.OffsetRgn(region.handle, (short)0, (short)(lineY + lineAscent[i]));", "+\t\t\t\t\tOS.OffsetRgn(region.handle, (short)x, (short)y);", "+\t\t\t\t\tregion.intersect(clipping);", "+\t\t\t\t\tgc.setClipping(region);", "+\t\t\t\t\tgc.fillRectangle(rect);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (lineEnd > end) break;", "+\t\t\tlineY += lineHeight[i];", "+\t\t\tlineStart = lineBreak;", "+\t\t}", "+\t}", "+\tif (clipping != null) {", "+\t\tOS.CGContextRestoreGState(gc.handle);", "+\t\tOS.CGContextSaveGState(gc.handle);", "+\t\tclipping.dispose();", "+\t\tregion.dispose();", "+\t}", "+"]}], "num": 44693}
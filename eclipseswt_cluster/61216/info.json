{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2121e67f0a440c6694d2a7e52fddebb8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc011b14e9865684749af0e88aeb2d61", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "ddcc940c6ea8c0ef46cce8c3fd6eb2724417989a", "commitAfterChange": "9235085653f7600cdbdbab5c29cabffa32bf07f8", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " void computeRuns (GC gc)", "signatureAfterChange": " void computeRuns (GC gc)", "diff": ["-\tif (srcHdc != 0) OS.DeleteDC(srcHdc);", "-\tif (gc == null) device.internal_dispose_GC(hDC, null);", "+\t\t\tif (lineRunCount == 1 && i == allRuns.length - 1) {", "+\t\t\t\tTEXTMETRIC lptm = OS.IsUnicode ? (TEXTMETRIC)new TEXTMETRICW() : new TEXTMETRICA();", "+\t\t\t\tOS.SelectObject(srcHdc, getItemFont(run));", "+\t\t\t\tOS.GetTextMetrics(srcHdc, lptm);", "+\t\t\t\trun.height = lptm.tmHeight;", "+\t\t\t\tlineHeight = run.height + lineSpacing;", "+\t\t\t}", "+\tif (srcHdc != 0) OS.DeleteDC(srcHdc);", "+\tif (gc == null) device.internal_dispose_GC(hDC, null);\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5ecddd08864fe22b07109d97e40eb0e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Group.java", "commitBeforeChange": "915780e93536b69764c4dbeedaf055ff446243b3", "commitAfterChange": "53a72a1e26ee8b5bafe3e8ea17f31ca574a7582b", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+\tint textInset = 0;", "+\tif (length > 0) {", "+\t\t/* In the (rare) case where the text is wider than the client area,", "+\t\t * allow room for one average character to the right of the text.", "+\t\t */", "+\t\tTEXTMETRIC tm = OS.IsUnicode ? (TEXTMETRIC) new TEXTMETRICW () : new TEXTMETRICA ();", "+\t\tOS.GetTextMetrics (hDC, tm);", "+\t\ttextInset = tm.tmAveCharWidth;", "+\t}", "-\twidth = Math.max (trim.width, rect.right - rect.left + 6);", "+\twidth = Math.max (trim.width, rect.right - rect.left + INSET * 2 + textInset);", "+\tint border = getBorderWidth ();", "+\twidth += border * 2; height += border * 2;"]}], "num": 61216}
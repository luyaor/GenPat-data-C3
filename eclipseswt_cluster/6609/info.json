{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "421043ba1918b136c09b33bb13643626", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e21ddb02be259ba4cc942781ca7ad689", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Path.java", "commitBeforeChange": "bbaac398aa7c332bcc1c6e9a83fff323052d1d50", "commitAfterChange": "285453da18f62dadae94373334adf3e82d58cc3f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public boolean contains(float x, float y, GC gc, boolean outline)", "signatureAfterChange": " public boolean contains(float x, float y, GC gc, boolean outline)", "diff": ["-\t\t//\tgc.checkGC(GC.LINE_CAP | GC.LINE_JOIN | GC.LINE_STYLE | GC.LINE_WIDTH);", "-\t\t//TODO outline", "-\t\tNSPoint point = new NSPoint();", "-\t\tpoint.x = x;", "-\t\tpoint.y = y;", "-\t\treturn handle.containsPoint(point);", "+\t\t//TODO - see windows", "+\t\tif (outline) {", "+\t\t\tint /*long*/ pixel = OS.malloc(4);", "+\t\t\tif (pixel == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\tint[] buffer = new int[]{0xFFFFFFFF};", "+\t\t\tOS.memmove(pixel, buffer, 4);", "+\t\t\tint /*long*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "+\t\t\tint /*long*/ context = OS.CGBitmapContextCreate(pixel, 1, 1, 8, 4, colorspace, OS.kCGImageAlphaNoneSkipFirst);", "+\t\t\tOS.CGColorSpaceRelease(colorspace);", "+\t\t\tif (context == 0) {", "+\t\t\t\tOS.free(pixel);", "+\t\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t}", "+\t\t\tGCData data = gc.data;", "+\t\t\tint capStyle = 0;", "+\t\t\tswitch (data.lineCap) {", "+\t\t\t\tcase SWT.CAP_ROUND: capStyle = OS.kCGLineCapRound; break;", "+\t\t\t\tcase SWT.CAP_FLAT: capStyle = OS.kCGLineCapButt; break;", "+\t\t\t\tcase SWT.CAP_SQUARE: capStyle = OS.kCGLineCapSquare; break;", "+\t\t\t}", "+\t\t\tOS.CGContextSetLineCap(context, capStyle);", "+\t\t\tint joinStyle = 0;", "+\t\t\tswitch (data.lineJoin) {", "+\t\t\t\tcase SWT.JOIN_MITER: joinStyle = OS.kCGLineJoinMiter; break;", "+\t\t\t\tcase SWT.JOIN_ROUND: joinStyle = OS.kCGLineJoinRound; break;", "+\t\t\t\tcase SWT.JOIN_BEVEL: joinStyle = OS.kCGLineJoinBevel; break;", "+\t\t\t}", "+\t\t\tOS.CGContextSetLineJoin(context, joinStyle);", "+\t\t\tOS.CGContextSetLineWidth(context, data.lineWidth);", "+\t\t\tOS.CGContextTranslateCTM(context, -x + 0.5f, -y + 0.5f);", "+\t\t\tint /*long*/ path = GC.createCGPathRef(handle);", "+\t\t\tOS.CGContextAddPath(context, path);", "+\t\t\tOS.CGPathRelease(path);", "+\t\t\tOS.CGContextStrokePath(context);", "+\t\t\tOS.CGContextRelease(context);", "+\t\t\tOS.memmove(buffer, pixel, 4);", "+\t\t\tOS.malloc(pixel);\t", "+\t\t\treturn buffer[0] != 0xFFFFFFFF;\t\t\t", "+\t\t} else {", "+\t\t\tNSPoint point = new NSPoint();", "+\t\t\tpoint.x = x;", "+\t\t\tpoint.y = y;", "+\t\t\treturn handle.containsPoint(point);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3e7e8e14c4ef705392770980736582c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f77b713da589c0f23980e28b6a2dad546ca09c3b", "commitAfterChange": "1034efdda128f80759c28bd972b3a2faf7fa970a", "methodNumberBeforeChange": 288, "methodNumberAfterChange": 288, "signatureBeforeChange": "  LRESULT WM_TABLET_FLICK (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_TABLET_FLICK (int wParam, int lParam)", "diff": ["-\treturn wmTabletFlick (handle, wParam, lParam);", "+\tif (!hooks (SWT.Gesture) && !filters (SWT.Gesture)) return null;", "+\tEvent event = new Event ();", "+\tFLICK_DATA fData = new FLICK_DATA ();", "+\tint /*long*/ [] source = new int /*long*/ [1];", "+\tsource[0] = wParam;", "+\tOS.MoveMemory (fData, source, OS.FLICK_DATA_sizeof ());", "+\tFLICK_POINT fPoint = new FLICK_POINT ();", "+\tsource [0] = lParam;", "+\tOS.MoveMemory (fPoint, source, OS.FLICK_POINT_sizeof ());", "+\t", "+\t/* The iFlickDirection field is defined as a 3-bit value in the FLICK_DATA structure */", "+\tswitch (fData.iFlickDirection & 0x7) {", "+\t\tcase OS.FLICKDIRECTION_RIGHT:", "+\t\t\tevent.xDirection = 1;", "+\t\t\tevent.yDirection = 0;", "+\t\t\tbreak;", "+\t\tcase OS.FLICKDIRECTION_UPRIGHT:", "+\t\t\tevent.xDirection = 1;", "+\t\t\tevent.yDirection = -1;", "+\t\t\tbreak;", "+\t\tcase OS.FLICKDIRECTION_UP:", "+\t\t\tevent.xDirection = 0;", "+\t\t\tevent.yDirection = -1;", "+\t\t\tbreak;", "+\t\tcase OS.FLICKDIRECTION_UPLEFT:", "+\t\t\tevent.xDirection = -1;", "+\t\t\tevent.yDirection = -1;", "+\t\t\tbreak;", "+\t\tcase OS.FLICKDIRECTION_LEFT:", "+\t\t\tevent.xDirection = -1;", "+\t\t\tevent.yDirection = 0;", "+\t\t\tbreak;", "+\t\tcase OS.FLICKDIRECTION_DOWNLEFT:", "+\t\t\tevent.xDirection = -1;", "+\t\t\tevent.yDirection = 1;", "+\t\t\tbreak;", "+\t\tcase OS.FLICKDIRECTION_DOWN:", "+\t\t\tevent.xDirection = 0;", "+\t\t\tevent.yDirection = 1;", "+\t\t\tbreak;", "+\t\tcase OS.FLICKDIRECTION_DOWNRIGHT:", "+\t\t\tevent.xDirection = 1;", "+\t\t\tevent.yDirection = 1;", "+\t\t\tbreak;", "+\t}", "+\t", "+\tevent.x = fPoint.x;", "+\tevent.y = fPoint.y;", "+\tevent.type = SWT.Gesture;", "+\tevent.detail = SWT.GESTURE_SWIPE;", "+\tsetInputState (event, SWT.Gesture);", "+\tsendEvent (SWT.Gesture, event);", "+\treturn event.doit ? null : LRESULT.ONE;"]}], "num": 6609}
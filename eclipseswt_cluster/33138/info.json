{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c0b8d06b15b1ced66a351750ec9fa39a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c739145a6b3d59a7717a91a677b73739", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r int [] layout (int nWidth, int nHeight, boolean resize)", "signatureAfterChange": "\r int [] layout (int nWidth, int nHeight, boolean resize)", "diff": ["-int [] layout (int nWidth, int nHeight, boolean resize) {\r", "+}\r", "+int [] layout (int nWidth, int nHeight, boolean resize) {\r", "+\tif ((style & SWT.VERTICAL) != 0) {\r", "+\t\treturn layoutVertical (nWidth, nHeight, resize);\r", "+\t} else {\r", "+\t\treturn layoutHorizontal (nWidth, nHeight, resize);\r", "+\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5079435e26bf8ba82689d2cd20a8613f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "077fe3776dc25b4cf61ed243848fcd241c8ef494", "commitAfterChange": "c72fdbd7fafc18281b7b514fcf1db452a8bdfc80", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 50, "signatureBeforeChange": " public void setMaximized (boolean maximized)", "signatureAfterChange": " public void setMaximized (boolean maximized)", "diff": ["-\tswFlags = maximized ? OS.SW_SHOWMAXIMIZED : OS.SW_RESTORE;", "-\tif (OS.IsWinCE) {", "-\t\t/*", "-\t\t* Note: WinCE does not support SW_SHOWMAXIMIZED and SW_RESTORE. The", "-\t\t* workaround is to resize the window to fit the parent client area.", "-\t\t*/", "-\t\tif (maximized) {", "-\t\t\tRECT rect = new RECT ();", "-\t\t\tOS.SystemParametersInfo (OS.SPI_GETWORKAREA, 0, rect, 0);", "-\t\t\tint width = rect.right - rect.left, height = rect.bottom - rect.top;", "-\t\t\tif (OS.IsPPC) {", "-\t\t\t\t/* Leave space for the menu bar */", "-\t\t\t\tif (menuBar != null) {", "-\t\t\t\t\tint hwndCB = menuBar.hwndCB;", "-\t\t\t\t\tRECT rectCB = new RECT ();", "-\t\t\t\t\tOS.GetWindowRect (hwndCB, rectCB);", "-\t\t\t\t\theight -= rectCB.bottom - rectCB.top;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tint flags = OS.SWP_NOZORDER | OS.SWP_DRAWFRAME | OS.SWP_NOACTIVATE;", "-\t\t\tSetWindowPos (handle, 0, rect.left, rect.top, width, height, flags);\t", "-\t\t}", "-\t} else {", "-\t\tif (!OS.IsWindowVisible (handle)) return;", "-\t\tif (maximized == OS.IsZoomed (handle)) return;", "-\t\tOS.ShowWindow (handle, swFlags);", "-\t\tOS.UpdateWindow (handle);", "-\t}", "+\tDisplay.lpStartupInfo = null;", "+\t_setMaximized (maximized);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cf111f0003624929bf18d99189666b0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleAutomation.java", "commitBeforeChange": "22bc05eaf9c493c6def1696f8ddd7e758b4f9f70", "commitAfterChange": "5697dfc7d0dd9b5b488c7047b208e76212de6ab2", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": "\r public boolean setProperty(int dispIdMember, Variant rgvarg)", "signatureAfterChange": "\r public boolean setProperty(int dispIdMember, Variant rgvarg)", "diff": ["-\r", "-\t// get the IDispatch interface for the control\r", "-\tif (objIDispatch == null) return false;\r", "-\r", "-\t// create Dispparams structure with input parameters\r", "-\tDISPPARAMS pDispParams = new DISPPARAMS();\r", "-\tpDispParams.cArgs = 1;\r", "-\tpDispParams.rgvarg = OS.GlobalAlloc(COM.GMEM_FIXED | COM.GMEM_ZEROINIT, Variant.sizeof);\r", "-\trgvarg.getData(pDispParams.rgvarg);\r", "-\t\r", "-\t// add in information for named args\r", "-\tpDispParams.cNamedArgs = 1;\r", "-\tpDispParams.rgdispidNamedArgs = OS.GlobalAlloc(COM.GMEM_FIXED | COM.GMEM_ZEROINIT, 4);\r", "-\tCOM.MoveMemory(pDispParams.rgdispidNamedArgs, new int[] {COM.DISPID_PROPERTYPUT}, 4);\r", "-\r", "-\tint pVarResultAddress = OS.GlobalAlloc(OS.GMEM_FIXED | OS.GMEM_ZEROINIT, Variant.sizeof);\r", "-\tEXCEPINFO excepInfo = new EXCEPINFO();\r", "-\tint[] pArgErr = new int[1];\r", "+\tVariant[] rgvarg2 = new Variant[] {rgvarg};\r", "+\tint[] rgdispidNamedArgs = new int[] {COM.DISPID_PROPERTYPUT};\r", "-\tint rc = objIDispatch.Invoke(dispIdMember, new GUID(), COM.LOCALE_USER_DEFAULT, dwFlags, pDispParams, pVarResultAddress, excepInfo, pArgErr);\r", "-\r", "-\t// free the result\r", "-\tCOM.VariantClear(pVarResultAddress);\r", "-\tOS.GlobalFree(pVarResultAddress);\r", "-\t\r", "-\t// free the Dispparams resources\r", "-\tOS.GlobalFree(pDispParams.rgdispidNamedArgs);\r", "-\tCOM.VariantClear(pDispParams.rgvarg);\r", "-\tOS.GlobalFree(pDispParams.rgvarg);\r", "-\t\r", "-\t// save error string and cleanup EXCEPINFO\r", "-\tmanageExcepinfo(rc, excepInfo);\r", "-\t\t\r", "-\treturn (rc == COM.S_OK);\r", "-\r", "+\tVariant pVarResult = new Variant();\r", "+\tint result = invoke(dispIdMember, dwFlags, rgvarg2, rgdispidNamedArgs, pVarResult);\r", "+\treturn (result == COM.S_OK);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31edb8bc815455699235c7db5c6e0ff6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "08ed4d34906d3cb004511badd9a3286f04d40b7a", "commitAfterChange": "3587c6fb9068182d41169c6c886f0d5faa0219e6", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public Rectangle getBounds ()", "signatureAfterChange": " public Rectangle getBounds ()", "diff": ["-\tint ctree = parent.handle;\r", "-\t/* NB: Different from gtk_ctree_is_visible() */\r", "-\tif (!OS.gtk_ctree_is_viewable(ctree, handle)) return new Rectangle(0,0,0,0);\r", "-\r", "-\t/* Vertical */\r", "-\tint row_index = 0;\r", "-\tint work = OS.GTK_CLIST_ROW_LIST(ctree);\r", "-\twhile ((work!=0) && (work!=handle)) {\r", "-\t\twork = OS.GTK_CTREE_NODE_NEXT(work);\r", "-\t\trow_index++;\r", "-\t}\r", "-\t\r", "-\tint border = OS.gtk_container_get_border_width(ctree);\r", "-\t// observe the weird row spacing rule\r", "-\tint y = OS.ROW_TOP_YPIXEL(ctree, row_index) + Tree.CELL_SPACING;\r", "-\tint height = parent.getItemHeight();\r", "-\r", "-\t/* Horizontal */\t\r", "-\tint row_ptr = OS.GTK_CTREE_ROW(ctree, handle);\r", "-\tGtkCTreeRow row = new GtkCTreeRow();\r", "-\tOS.memmove(row, OS.g_list_nth_data (handle, 0), GtkCTreeRow.sizeof);\r", "-\tint x = OS.GTK_CLIST_HOFFSET(ctree) + OS.GTK_CTREE_TREE_INDENT (ctree) * row.level;\r", "-\tif (image != null) {\r", "-\t\tint[] w = new int[1], h = new int[1];\r", "- \t\tOS.gdk_drawable_get_size(image.pixmap, w, h);\r", "- \t\tx += w[0]; \r", "-\t}\t\r", "-\tint width = OS.GTK_CLIST_WINDOW_WIDTH(ctree) - x; // No hoffset!\r", "-\t\r", "-\treturn new Rectangle (x, y, width, parent.getItemHeight());\r", "+\tGdkRectangle rect = new GdkRectangle();\r", "+\tOS.gtk_tree_view_get_cell_area(parent.handle, handle, parent.columnHandle, rect);\r", "+\treturn new Rectangle (rect.x, rect.y, rect.width, rect.height);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "223361151968a5004855c6cab3fd1594", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "4b7ac62e4c7abc2bdb8c97e1ee5fae6064a184d8", "commitAfterChange": "49a0d281d71c7b0b4f050c8585ea47184b029cc7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 8, "signatureBeforeChange": "  int kEventTextInputPosToOffset (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventTextInputPosToOffset (int nextHandler, int theEvent, int userData)", "diff": ["-\tif (!hooks (SWT.ImeComposition)) return OS.eventNotHandledErr;", "-\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "-\tint sizeof = org.eclipse.swt.internal.carbon.Point.sizeof;", "-\tOS.GetEventParameter (theEvent, OS.kEventParamTextInputSendCurrentPoint, OS.typeQDPoint, null, sizeof, null, pt);", "-\torg.eclipse.swt.graphics.Point point = toControl (pt.h, pt.v);", "-\tEvent event = new Event ();", "-\tevent.detail = SWT.COMPOSITION_HITTEST;", "-\tevent.x = point.x;", "-\tevent.y = point.y;", "-\tsendEvent (SWT.ImeComposition, event);", "-\tOS.SetEventParameter (theEvent, OS.kEventParamTextInputReplyTextOffset, OS.typeLongInteger, 4, new int [] {event.index * 2});", "-\tOS.SetEventParameter (theEvent, OS.kEventParamTextInputReplyRegionClass, OS.typeLongInteger, 4, new int [] {event.hitTest});", "-\tOS.SetEventParameter (theEvent, OS.kEventParamTextInputReplyLeadingEdge, OS.typeBoolean, 4, new boolean [] {event.trailing == 0});", "-\treturn OS.noErr;", "+\tif (ime != null) {", "+\t\tint result = ime.kEventTextInputPosToOffset (nextHandler, theEvent, userData);", "+\t\tif (result != OS.eventNotHandledErr) return result;", "+\t}", "+\treturn super.kEventTextInputPosToOffset (nextHandler, theEvent, userData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d0dd2c545d93d84f1f15626d1fe13d7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "1cafb9b13b36075eb1d31bd71ad3febbf37de5b5", "commitAfterChange": "4b7ac62e4c7abc2bdb8c97e1ee5fae6064a184d8", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["-\tif (isInlineIMEEnabled ()) {", "-\t\tint /*long*/ hIMC = OS.ImmGetContext (handle);", "-\t\tif (hIMC != 0) {", "-\t\t\tif (OS.ImmGetOpenStatus (hIMC)) {", "-\t\t\t\tint length = OS.ImmGetCompositionString (hIMC, OS.GCS_COMPSTR, null, 0);", "-\t\t\t\tif (length > 0) {", "-\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\tevent.detail = SWT.COMPOSITION_HITTEST;", "-\t\t\t\t\tevent.x = OS.GET_X_LPARAM (lParam); ", "-\t\t\t\t\tevent.y = OS.GET_Y_LPARAM (lParam);", "-\t\t\t\t\tsendEvent (SWT.ImeComposition, event);", "-\t\t\t\t\tif (event.hitTest == SWT.HITTEST_INSIDE_COMPOSITION) {", "-\t\t\t\t\t\tint /*long*/ imeWnd = OS.ImmGetDefaultIMEWnd (handle);", "-\t\t\t\t\t\tint offset = event.index + event.trailing;", "-\t\t\t\t\t\tint trailing = event.trailing > 0 ? 1 : 2;", "-\t\t\t\t\t\tint /*long*/ param = OS.MAKEWPARAM (OS.MAKEWORD (OS.IMEMOUSE_LDOWN, trailing), offset);", "-\t\t\t\t\t\tOS.SendMessage (imeWnd, WM_MSIME_MOUSE, param, hIMC);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tOS.ImmNotifyIME (hIMC, OS.NI_COMPOSITIONSTR, OS.CPS_COMPLETE, 0);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tOS.ImmReleaseContext (handle, hIMC);", "-\t\t}", "+\tif (ime != null) {", "+\t\tLRESULT result = ime.WM_LBUTTONDOWN (wParam, lParam);", "+\t\tif (result != null) return result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b08e3b7a2f9fdb31c8ce7303de0195cb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "21db765cd71e211ed7a422832ea159585ff971e3", "commitAfterChange": "cfc1e42b8ee7293ce68f0fd9dcd0e1b2cb8bb08a", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " void setBounds (int x, int y, int width, int height)", "signatureAfterChange": " void setBounds (int x, int y, int width, int height)", "diff": ["-\tif (MacUtil.USE_FRAME) {", "-\t\tCGRect rect= new CGRect();", "-\t\tOS.HIViewGetFrame(handle, rect);", "-\t\tif (rect.x != x || rect.y != y || rect.width != width || rect.height != height) {", "-\t\t\tOS.HIViewSetFrame(handle, rect);", "-\t\t}", "-\t} else {", "-\t\tRect bounds= new Rect();", "-\t\tRect pbounds= new Rect();", "-\t\tOS.GetControlBounds(handle, bounds);", "-\t\tOS.GetControlBounds(parent.handle, pbounds);", "-\t\t\t", "-\t\tboolean sameOrigin = (bounds.left-pbounds.left) == x && (bounds.top-pbounds.top) == y;", "-\t\tboolean sameExtent = (bounds.right-bounds.left) == width && (bounds.bottom-bounds.top) == height;", "-\t\tif (!sameOrigin || !sameExtent){", "-\t\t\tshort left = (short)(pbounds.left+x);", "-\t\t\tshort top = (short)(pbounds.top +y);", "-\t\t\tOS.SetRect(bounds, left, top, (short)(left + width), (short)(top + height));", "-\t\t\tOS.SetControlBounds(handle, bounds);", "-\t\t}", "-\t}", "+\tRect bounds= new Rect();", "+\tOS.SetRect(bounds, (short)x, (short)y, (short)(x+width), (short)(y+height));", "+\tOS.SetControlBounds(handle, bounds);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d5ca3d7500afbaca844b9d61d7fca2f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "ce92898e77608bf804c80f5b62e889fe568db6fc", "commitAfterChange": "bc4d3581c33a4dad038becb29f77136e2bbc5f2e", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  void fillBackground (int hDC, Image image, RECT rect)", "signatureAfterChange": "  void fillImageBackground (int hDC, Control control, RECT rect)", "diff": ["-", "-void fillBackground (int hDC, Image image, RECT rect) {", "-\tControl control = findImageControl (image);", "-\tif (control != null) {", "-\t\tint hwnd = control.handle;", "-\t\tint hBitmap = image.handle;", "-\t\tRECT rect2 = new RECT ();", "-\t\tOS.GetClientRect (handle, rect2);", "-\t\tOS.MapWindowPoints (handle, hwnd, rect2, 2);", "-\t\tint hBrush = findBrush (hBitmap, OS.BS_PATTERN);", "-\t\tPOINT lpPoint = new POINT ();", "-\t\tOS.GetWindowOrgEx (hDC, lpPoint);", "-\t\tOS.SetBrushOrgEx (hDC, -rect2.left - lpPoint.x, -rect2.top - lpPoint.y, lpPoint);", "-\t\tint hOldBrush = OS.SelectObject (hDC, hBrush);", "-\t\tOS.PatBlt (hDC, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top, OS.PATCOPY);", "-\t\tOS.SetBrushOrgEx (hDC, lpPoint.x, lpPoint.y, null);", "-\t\tOS.SelectObject (hDC, hOldBrush);", "-\t}", "+void fillImageBackground (int hDC, Control control, RECT rect) {", "+\tif (control != null) {", "+\t\tImage image = control.backgroundImage;", "+\t\tif (image != null) {", "+\t\t\tcontrol.drawImageBackground (hDC, handle, image.handle, rect);", "+\t\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9d8c2ee83e182d57cefe923d949da14", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "336b48f0e24bfd875ba417243e386132aec752ef", "commitAfterChange": "dc566e87e485fe5f0487a25503163ad99c82fd7c", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "  LRESULT WM_NCPAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_NCPAINT (int wParam, int lParam)", "diff": ["-\tint result = callWindowProc (handle, OS.WM_NCPAINT, wParam, lParam);", "+\tLRESULT result = super.WM_NCPAINT (wParam, lParam);", "+\tif (result != null) return result;", "-\t\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "-\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_EXSTYLE);", "-\t\t\tif ((bits & OS.WS_EX_CLIENTEDGE) != 0) {", "-\t\t\t\tint hDC = OS.GetWindowDC (handle);", "-\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\tOS.GetWindowRect (handle, rect);", "-\t\t\t\trect.right -= rect.left;", "-\t\t\t\trect.bottom -= rect.top;", "-\t\t\t\trect.left = rect.top = 0;", "-\t\t\t\tint border = OS.GetSystemMetrics (OS.SM_CXEDGE);", "-\t\t\t\tOS.ExcludeClipRect (hDC, border, border, rect.right - border, rect.bottom - border);", "-\t\t\t\tint hTheme = OS.OpenThemeData (handle, EDIT);", "-\t\t\t\tOS.DrawThemeBackground (hTheme, hDC, OS.EP_EDITTEXT, OS.ETS_NORMAL, rect, null);", "-\t\t\t\tOS.CloseThemeData (handle);", "-\t\t\t\tOS.ReleaseDC (handle, hDC);", "-\t\t\t}", "-\t\t}", "+\t\tresult = wmNCPaint (handle, wParam, lParam);", "-\treturn new LRESULT (result);", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cdcce12cf8aa86493ed70e9a9107dd6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "4b7ac62e4c7abc2bdb8c97e1ee5fae6064a184d8", "commitAfterChange": "49a0d281d71c7b0b4f050c8585ea47184b029cc7", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "  int kEventTextInputOffsetToPos (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventTextInputOffsetToPos (int nextHandler, int theEvent, int userData)", "diff": ["-\tif (!hooks (SWT.ImeComposition)) return OS.eventNotHandledErr;", "-\tif (caret == null) return OS.eventNotHandledErr;", "-\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "-\tint sizeof = org.eclipse.swt.internal.carbon.Point.sizeof;", "-\torg.eclipse.swt.graphics.Point point = toDisplay (caret.x, caret.y + caret.height);", "-\tpt.h = (short)point.x;", "-\tpt.v = (short)point.y;", "-\tOS.SetEventParameter (theEvent, OS.kEventParamTextInputReplyPoint, OS.typeQDPoint, sizeof, pt);", "-\treturn OS.noErr;", "+\tif (ime != null) {", "+\t\tint result = ime.kEventTextInputOffsetToPos (nextHandler, theEvent, userData);", "+\t\tif (result != OS.eventNotHandledErr) return result;", "+\t}", "+\treturn super.kEventTextInputOffsetToPos (nextHandler, theEvent, userData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4beadffac22d864600212f378f848026", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "e21dc3e8d9404691f47a902e1ebca004f3e6a297", "commitAfterChange": "c0bbc0f9cf88b5b8d59017caeb02b86f4d185b36", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": " void shape (final int hdc, final StyleItem run)", "signatureAfterChange": " void shape (final int hdc, final StyleItem run)", "diff": ["-\t\t\tObject object = new Object () {", "-\t\t\t\tpublic int EnumFontFamExProc(int lpelfe, int lpntme, int FontType, int lParam) {", "+\t\t\tclass EnumFontFamEx {", "+\t\t\t\tint EnumFontFamExProc(int lpelfe, int lpntme, int FontType, int lParam) {", "+\t\t\tEnumFontFamEx object = new EnumFontFamEx();", "+\t\t\t/* Avoid compiler warnings */", "+\t\t\tif (false) object.EnumFontFamExProc(0, 0, 0, 0);"]}], "num": 33138}
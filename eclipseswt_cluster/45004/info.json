{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "97e93ec353125be45b63d8389da8e89c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a45aa5779fa7842dbfef0485e6fdff2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/gtk/org/eclipse/swt/printing/PrintDialog.java", "commitBeforeChange": "bfa7fdee9c085608d5d05880678feb74b663edf6", "commitAfterChange": "56d7296ca97caab4d55a03fef16b1386812f14a1", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public PrinterData open()", "signatureAfterChange": " public PrinterData open()", "diff": ["-\t\tif (printerData.name != null) {", "-\t\t\tbyte [] nameBytes = Converter.wcsToMbcs (null, printerData.name, true);", "+\t\tString printerName = printerData.name;", "+\t\tif (printerName == null && printerData.printToFile) {", "+\t\t\t/* Find the printer name corresponding to the file backend. */", "+\t\t\tint /*long*/ printer = Printer.gtkPrinterFromPrinterData(printerData);", "+\t\t\tif (printer != 0) {", "+\t\t\t\tPrinterData data = Printer.printerDataFromGtkPrinter(printer);", "+\t\t\t\tprinterName = data.name;", "+\t\t\t\tOS.g_object_unref(printer);", "+\t\t\t}", "+\t\t}", "+\t\tif (printerName != null) {", "+\t\t\tbyte [] nameBytes = Converter.wcsToMbcs (null, printerName, true);", "-\t\tif (printerData.fileName != null) {", "-\t\t\t//TODO: Should we look at printToFile, or driver/name for \"Print to File\", or both? (see gtk bug 345590)", "-\t\t\tif (printerData.printToFile) {", "-\t\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, printerData.fileName, true);", "-\t\t\t\tOS.gtk_print_settings_set(settings, OS.GTK_PRINT_SETTINGS_OUTPUT_URI, buffer);", "+\t\tif ((printerData.printToFile || Printer.GTK_FILE_BACKEND.equals(printerData.driver)) && printerData.fileName != null) {", "+\t\t\t// TODO: GTK_FILE_BACKEND is not GTK API (see gtk bug 345590)", "+\t\t\tbyte [] uri = Printer.uriFromFilename(printerData.fileName);", "+\t\t\tif (uri != null) {", "+\t\t\t\tOS.gtk_print_settings_set(settings, OS.GTK_PRINT_SETTINGS_OUTPUT_URI, uri);", "-\t\t\tif (printerData.driver != null && printerData.name != null) {", "-\t\t\t\tif (printerData.driver.equals(\"GtkPrintBackendFile\") && printerData.name.equals(\"Print to File\")) { //$NON-NLS-1$ //$NON-NLS-2$", "-\t\t\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, printerData.fileName, true);", "-\t\t\t\t\tOS.gtk_print_settings_set(settings, OS.GTK_PRINT_SETTINGS_OUTPUT_URI, buffer);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (printerData.printToFile) {", "-\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, \"Print to File\", true); //$NON-NLS-1$", "-\t\t\tOS.gtk_print_settings_set_printer(settings, buffer);", "-\t\t\t\tdata.printToFile = data.name.equals(\"Print to File\"); //$NON-NLS-1$", "+\t\t\t\tdata.printToFile = Printer.GTK_FILE_BACKEND.equals(data.driver); // TODO: GTK_FILE_BACKEND is not GTK API (see gtk bug 345590)"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "022f368a196b0ace95dc0e30dd744445", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "6ef57fc0e6f6427596d6abd342b6a7b03248370d", "commitAfterChange": "9cf20db2863a33762a4a7c547242d28c6ec2ffdf", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 101, "signatureBeforeChange": "\r void doBidiMouseLocationChange(int x, int y, boolean select)", "signatureAfterChange": "\r int doMouseWordSelect(int x, int newCaretOffset, int line)", "diff": ["- */\r", "-void doBidiMouseLocationChange(int x, int y, boolean select) {\r", "-\tint line = (y + verticalScrollOffset) / lineHeight;\r", "-\tint lineCount = content.getLineCount();\r", "-\t\r", "-\tif (line > lineCount - 1) {\r", "-\t\tline = lineCount - 1;\r", "-\t}\t\r", "-\t// allow caret to be placed below first line only if receiver is \r", "-\t// not in single line mode. fixes 4820.\r", "-\tif (line == 0 || (isSingleLine() == false && line > 0)) {\r", "-\t\tint newCaretOffset = getBidiOffsetAtMouseLocation(x, line);\t\r", "-\t\tif (x >= 0 || \r", "-\t\t\tcontent.getLineAtOffset(newCaretOffset) != content.getLineAtOffset(caretOffset)) {\r", "-\t\t\t// Only change the caret offset when the mouse is within \r", "-\t\t\t// the left client area border or on a different line. \r", "-\t\t\t// Otherwise the autoscroll selection may be reset. \r", "-\t\t\t// Fixes 1GKM3XS\r", "-\t\t\tcaretOffset = newCaretOffset;\r", "-\t\t\tcaretLine = line;\r", "-\t\t\tif (select) {\r", "-\t\t\t\tdoMouseSelection();\r", "-\t\t\t}\r", "-\t\t\tsetBidiCaretLocation(null);\r", "-\t\t\tsetBidiKeyboardLanguage();\r", "-\t\t}\r", "-\t\tif (select == false) {\r", "-\t\t\tclearSelection(true);\r", "-\t\t}\r", "+ */\r", "+int doMouseWordSelect(int x, int newCaretOffset, int line) {\r", "+\tint wordOffset;\r", "+\r", "+\t// flip selection anchor based on word selection direction from \r", "+\t// base double click. Always do this here (and don't rely on doAutoScroll)\r", "+\t// because auto scroll only does not cover all possible mouse selections\r", "+\t// (e.g., mouse x < 0 && mouse y > caret line y)\r", "+ \tif (newCaretOffset < selectionAnchor && selectionAnchor == selection.x) {\r", "+\t\tselectionAnchor = doubleClickSelection.y;\r", "+\t}\r", "+\telse\r", "+\tif (newCaretOffset > selectionAnchor && selectionAnchor == selection.y) {\r", "+\t\tselectionAnchor = doubleClickSelection.x;\r", "+\t}\r", "+\tif (x >= 0 && x < getClientArea().width) {\r", "+\t\t// find the previous/next word\r", "+\t\tif (caretOffset == selection.x) {\r", "+\t\t\twordOffset = getWordStart(newCaretOffset);\r", "+\t\t}\r", "+\t\telse {\r", "+\t\t\twordOffset = getWordEndNoSpaces(newCaretOffset);\r", "+\t\t}\r", "+\t\t// mouse word select only on same line mouse cursor is on\r", "+\t\tif (content.getLineAtOffset(wordOffset) == line) {\r", "+\t\t\tnewCaretOffset = wordOffset;\r", "+\t\t}\r", "+\t}\r", "+\treturn newCaretOffset;\r"]}], "num": 45004}
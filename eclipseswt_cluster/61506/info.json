{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8b834deb3552232c7e78e5f5c0faea86", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "14c12b9c36be845f8c338e3e2b26cb75", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "commitAfterChange": "bbeab947327689cb203638e742e58f555e6c1b64", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 56, "signatureBeforeChange": " boolean setItemBounds()", "signatureAfterChange": " void onMenu(Event event)", "diff": ["- */", "-boolean setItemBounds() {", "-\tboolean changed = false;", "-\tif (isDisposed()) return changed;", "-\tRectangle area = super.getClientArea();", "-\txClient = area.x + borderLeft + marginWidth;", "-\tif (onBottom) {", "-\t\tyClient = area.y + borderTop + marginHeight; ", "-\t\tyClient = area.y + borderTop + tabHeight + 1 + marginHeight; ", "-\t\t// +1 is for the line at the bottom of the tabs", "-\t", "-\tif (area.width <= 0 || area.height <= 0 || items.length == 0) return changed;", "-\t", "-\tint[] widths = new int[items.length];", "-\tGC gc = new GC(this);", "-\tfor (int i = 0; i < items.length; i++) {", "-\t\twidths[i] = items[i].preferredWidth(gc);", "-\t}", "-\tgc.dispose();", "-", "-\tint oldAverageWidth = 0;", "-\tint averageWidth = (area.width - borderLeft - borderRight) / items.length;", "-\twhile (averageWidth > oldAverageWidth) {", "-\t\tint width = area.width - borderLeft - borderRight;", "-\t\tint count = items.length;", "-\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\tif (widths[i] < averageWidth) {", "-\t\t\t\twidth -= widths[i];", "-\t\t\t\tcount--;", "+}", "+void onMenu(Event event) {", "+\tif (single && selectedIndex != -1) {", "+\t\tfinal CTabFolderEvent e = new CTabFolderEvent(CTabFolder.this);", "+\t\te.widget = this;", "+\t\te.time = event.time;", "+\t\tRectangle rect = items[selectedIndex].getBounds();", "+\t\trect.y += onBottom ? -HIGHLIGHT_HEADER : HIGHLIGHT_HEADER;", "+\t\te.rect = rect;", "+\t\tif (listListeners.length == 0) {", "+\t\t\tshowList(e.rect, SWT.LEFT);", "+\t\t} else {", "+\t\t\tfor (int j = 0; j < listListeners.length; j++) {", "+\t\t\t\tlistListeners[j].showList(e);", "-\t\toldAverageWidth = averageWidth;", "-\t\tif (count > 0) {", "-\t\t\taverageWidth = width / count;", "-\t\t}", "-\taverageWidth = Math.max(averageWidth, MIN_TAB_WIDTH * tabHeight);", "-\tfor (int i = 0; i < items.length; i++) {", "-\t\tif (widths[i] > averageWidth) {", "-\t\t\twidths[i] = averageWidth;", "-\t\t}", "-\t}", "-\t", "-\tint totalWidth = 0;", "-\tfor (int i = 0; i < items.length; i++) { ", "-\t\tCTabItem tab = items[i];", "-\t\tif (tab.height != tabHeight || tab.width != widths[i]) changed = true;", "-\t\ttab.height = tabHeight;", "-\t\ttab.width = widths[i];", "-\t\ttotalWidth += widths[i];", "-\t}", "-\t", "-\tint areaWidth = area.x + area.width - borderRight;", "-\tif (totalWidth <= areaWidth) {", "-\t\ttopTabIndex = 0;", "-\t} ", "-\tif (setItemLocation()) changed = true;", "-\t", "-\t// Is there a gap after last item showing", "-\tif (correctLastItem()) changed = true;", "-\treturn changed;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41b43be5af5a9f7a5eafcc1eadfc09d4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "667671ba86e941a67f9a32fff49b72cd98dd7b45", "commitAfterChange": "adba51fd7df111f97fa2ca10d76f397d176f08d1", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": " boolean setItemSize()", "signatureAfterChange": " boolean setItemSize()", "diff": ["-\tint tabAreaWidth = size.x - borderLeft - borderRight - minRect.width - maxRect.width - chevronRect.width;", "+\t\t", "+\t\t\tint totalWidth = 0;", "+\t\t\tint tabAreaWidth = size.x - borderLeft - borderRight - minRect.width - maxRect.width;", "-\t\t\tint averageWidth = tabAreaWidth / count;", "-\t\t\tint oldAverageWidth = 0;", "-\t\t\twhile (averageWidth > oldAverageWidth) {", "-\t\t\t\tint width = tabAreaWidth;", "-\t\t\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\t\t\tif (widths[i] < averageWidth) {", "-\t\t\t\t\t\twidth -= widths[i];", "-\t\t\t\t\t\tcount--;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\toldAverageWidth = averageWidth;", "-\t\t\t\tif (count > 0) {", "-\t\t\t\t\taverageWidth = width / count;", "-\t\t\t\t}", "+\t\t\tfor (int i = 0 ; i < count; i++) {", "+\t\t\t\ttotalWidth += widths[i];", "-\t\t\taverageWidth = Math.max(averageWidth, MIN_TAB_WIDTH * tabHeight);", "-\t\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\t\tif (widths[i] > averageWidth) {", "-\t\t\t\t\twidths[i] = averageWidth;", "+\t\t\tif (totalWidth > tabAreaWidth) {", "+\t\t\t\t// try to compress items", "+\t\t\t\tint minWidth = MIN_TAB_WIDTH * tabHeight;", "+\t\t\t\ttotalWidth = 0;", "+\t\t\t\tint large = 0;", "+\t\t\t\tfor (int i = 0 ; i < count; i++) {", "+\t\t\t\t\ttotalWidth += Math.min(widths[i], minWidth);", "+\t\t\t\t\tif (widths[i] > minWidth) large++;", "+\t\t\t\t}", "+\t\t\t\tif (totalWidth >= tabAreaWidth) {", "+\t\t\t\t\t// maximum compression required", "+\t\t\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\t\t\twidths[i] = Math.min(widths[i], minWidth);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\t// determine compression for each item", "+\t\t\t\t\tint extra = (tabAreaWidth - totalWidth)/large;", "+\t\t\t\t\twhile (true) {", "+\t\t\t\t\t\ttotalWidth = 0;", "+\t\t\t\t\t\tlarge = 0;", "+\t\t\t\t\t\tfor (int i = 0 ; i < count; i++) {", "+\t\t\t\t\t\t\ttotalWidth += Math.min(widths[i], minWidth + extra);", "+\t\t\t\t\t\t\tif (widths[i] > minWidth + extra) large++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (totalWidth >= tabAreaWidth) {", "+\t\t\t\t\t\t\textra--;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (large == 0 ||tabAreaWidth - totalWidth < large) break;", "+\t\t\t\t\t\textra++;", "+\t\t\t\t\t}", "+\t\t\t\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\t\t\t\twidths[i] = Math.min(widths[i], minWidth + extra);", "+\t\t\t\t\t}\t", "+\tint tabAreaWidth = size.x - borderLeft - borderRight - minRect.width - maxRect.width - chevronRect.width;"]}], "num": 61506}
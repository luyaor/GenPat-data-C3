{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94ab7502e77f40cd9f746d3f4a6bc090", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5908d8844d748524d8a490c30ad945df", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Caret.java", "commitBeforeChange": "b300d06e8a006b6b8e628424d8002d7091bea18d", "commitAfterChange": "a0cb6b14f3221651351e12702cd357982811b42b", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  boolean drawCaret ()", "signatureAfterChange": "  boolean drawCaret ()", "diff": ["-\tif (!parent.isDrawing (parent.handle)) return false;", "-\tint nWidth = width, nHeight = height;", "-\tif (image != null) {", "-\t\tRectangle rect = image.getBounds ();", "-\t\tnHeight = rect.height;", "-\t}", "-\tif (nWidth <= 0) nWidth = 1;", "+\tif (!parent.isDrawing (parentHandle)) return false;", "+\tint nWidth = width, nHeight = height;", "+\tif (nWidth <= 0) nWidth = 1;", "-\tOS.SetRect(rect, (short) left, (short) top, (short) (left + nWidth), (short) (top + nHeight));", "-\tRGBColor color = new RGBColor ();", "-\tcolor.red = (short) 0xFFFF;", "-\tcolor.green = (short) 0xFFFF;", "-\tcolor.blue = (short) 0xFFFF;", "-\tOS.RGBBackColor (color);", "-\tOS.InvertRect (rect);\t", "+\tif (image == null) {", "+\t\tOS.SetRect(rect, (short) left, (short) top, (short) (left + nWidth), (short) (top + nHeight));", "+\t\tRGBColor color = new RGBColor ();", "+\t\tcolor.red = (short) 0xFFFF;", "+\t\tcolor.green = (short) 0xFFFF;", "+\t\tcolor.blue = (short) 0xFFFF;", "+\t\tOS.RGBBackColor (color);", "+\t\tOS.InvertRect (rect);", "+\t} else {", "+\t\tint imageHandle = image.handle;", "+\t\tnWidth = OS.CGImageGetWidth (imageHandle);", "+\t\tnHeight = OS.CGImageGetHeight (imageHandle);", "+\t\tint bpl = OS.CGImageGetBytesPerRow (imageHandle);", "+\t\tRect bounds = new Rect ();", "+\t\tbounds.right = (short) nWidth;", "+\t\tbounds.bottom = (short) nHeight;", "+\t\tRect portRect = new Rect ();", "+\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, portRect);", "+\t\tleft += portRect.left;", "+\t\ttop += portRect.top;\t\t", "+\t\tOS.SetRect(rect, (short) left, (short) top, (short) (left + nWidth), (short) (top + nHeight));", "+\t\tint [] gWorld = new int [1];", "+\t\tOS.NewGWorldFromPtr (gWorld, OS.k32ARGBPixelFormat, bounds, 0, 0, 0, image.data, bpl);", "+\t\tint [] curPort = new int [1];", "+\t\tint [] curGWorld = new int [1];", "+\t\tOS.GetGWorld (curPort, curGWorld);\t", "+\t\tOS.SetGWorld (gWorld [0], curGWorld [0]);", "+\t\tint portBitMap = OS.GetPortBitMapForCopyBits (port);", "+\t\tint gworldBitMap = OS.GetPortBitMapForCopyBits (gWorld [0]);", "+\t\tOS.OffsetRgn(visibleRgn, portRect.left, portRect.top);", "+\t\tOS.CopyBits (gworldBitMap, portBitMap, bounds, rect, (short) OS.notSrcXor, visibleRgn);", "+\t\tOS.OffsetRgn(visibleRgn, (short) -portRect.left, (short) -portRect.top);", "+\t\tOS.SetGWorld (curPort [0], curGWorld [0]);", "+\t\tOS.DisposeGWorld (gWorld [0]);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7d7be7e9fc6110ced1c62cd2eef6cf7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "a2121a3b36fd9f479b5853f961011d3d772dea1a", "commitAfterChange": "180b63adf3a86ec0ec05574f5a95cc8803880a19", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " void sendIMKeyEvent (int type, XKeyEvent xEvent, byte [] mbcs, char [] chars)", "signatureAfterChange": " boolean sendIMKeyEvent (int type, XKeyEvent xEvent, int textHandle)", "diff": ["+}", "+boolean sendIMKeyEvent (int type, XKeyEvent xEvent, int textHandle) {", "+\tif (length == 0) return true;", "-}", "-void sendIMKeyEvent (int type, XKeyEvent xEvent, byte [] mbcs, char [] chars) {", "-\tint index = 0;", "+\tchar [] chars = Converter.mbcsToWcs (null, buffer);", "+\tint index = 0, count = 0;", "-\t\tif (chars [index] == 0) break;", "+\t\tif (chars [index] == 0) {", "+\t\t\tchars [count] = 0;", "+\t\t\tbreak;", "+\t\t}", "-\t\tpostEvent (type, event);", "+\t\tsendEvent (type, event);", "+\t\tif (event.doit) chars [count++] = chars [index];", "+\tif (count == 0) return false;", "+\tif (textHandle != 0) {", "+\t\t/*", "+\t\t* Bug in Motif. On Solaris and Linux, XmImMbLookupString() clears", "+\t\t* the characters from the IME. This causes the characters to be", "+\t\t* stolen from the text widget. The fix is to detect that the IME", "+\t\t* has been cleared and use XmTextInsert() to insert the stolen", "+\t\t* characters. This problem does not happen on AIX.", "+\t\t*/", "+\t\tbyte [] testBuffer = new byte [5];", "+\t\tint testLength = OS.XmImMbLookupString (textHandle, xEvent, testBuffer, testBuffer.length, unused, unused);", "+\t\tif (testLength == 0 || index != count) {", "+\t\t\tint [] start = new int [1], end = new int [1];", "+\t\t\tOS.XmTextGetSelectionPosition (textHandle, start, end);", "+\t\t\tif (start [0] == end [0]) {", "+\t\t\t\tstart [0] = end [0] = OS.XmTextGetInsertionPosition (textHandle);", "+\t\t\t}", "+\t\t\tboolean warnings = display.getWarnings ();", "+\t\t\tdisplay.setWarnings (false);", "+\t\t\tif (index != count) {", "+\t\t\t\tbuffer = Converter.wcsToMbcs (getCodePage (), chars, true);", "+\t\t\t}", "+\t\t\tOS.XmTextReplace (textHandle, start [0], end [0], buffer);", "+\t\t\tint position = start [0] + count;", "+\t\t\tOS.XmTextSetInsertionPosition (textHandle, position);", "+\t\t\tdisplay.setWarnings (warnings);", "+\t\t}", "+\t\treturn false;", "+\t}", "+\treturn true;"]}], "num": 4554}
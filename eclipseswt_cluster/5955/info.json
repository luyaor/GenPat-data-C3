{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "776fa190ada18169d3bfacb6de985690", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5e526c409aa6a4142ef150d024ff67b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "cc500238418d38b85dc837cf8469541ca5f69f28", "commitAfterChange": "5381f36cd2ee3ebae345f390df5e1c6d63d37a50", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 121, "signatureBeforeChange": "\r public boolean traverse (int traversal)", "signatureAfterChange": "\r \r boolean traverse (Event event)", "diff": ["+\r", "+boolean traverse (Event event) {\r", "+\t/*\r", "+\t* It is possible (but unlikely), that application\r", "+\t* code could have disposed the widget in the traverse\r", "+\t* event.  If this happens, return true to stop further\r", "+\t* event processing.\r", "+\t*/\t\r", "+\tsendEvent (SWT.Traverse, event);\r", "+\tif (isDisposed ()) return false;\r", "+\tif (!event.doit) return false;\r", "+\tswitch (event.detail) {\r", "+\t\tcase SWT.TRAVERSE_NONE:\t\t\t\treturn true;\r", "+\t\tcase SWT.TRAVERSE_ESCAPE:\t\t\treturn traverseEscape ();\r", "+\t\tcase SWT.TRAVERSE_RETURN:\t\t\treturn traverseReturn ();\r", "+\t\tcase SWT.TRAVERSE_TAB_NEXT:\t\t\treturn traverseGroup (true);\r", "+\t\tcase SWT.TRAVERSE_TAB_PREVIOUS:\t\treturn traverseGroup (false);\r", "+\t\tcase SWT.TRAVERSE_ARROW_NEXT:\t\treturn traverseItem (true);\r", "+\t\tcase SWT.TRAVERSE_ARROW_PREVIOUS:\treturn traverseItem (false);\r", "+\t\tcase SWT.TRAVERSE_MNEMONIC:\t\t\treturn traverseMnemonic (event.character);\t\r", "+\t\tcase SWT.TRAVERSE_PAGE_NEXT:\t\treturn traversePage (true);\r", "+\t\tcase SWT.TRAVERSE_PAGE_PREVIOUS:\treturn traversePage (false);\r", "+\t}\r", "-\tswitch (traversal) {\r", "-\t\tcase SWT.TRAVERSE_ESCAPE:\t\t\treturn traverseEscape ();\r", "-\t\tcase SWT.TRAVERSE_RETURN:\t\t\treturn traverseReturn ();\r", "-\t\tcase SWT.TRAVERSE_TAB_NEXT:\t\t\treturn traverseGroup (true);\r", "-\t\tcase SWT.TRAVERSE_TAB_PREVIOUS:\t\treturn traverseGroup (false);\r", "-\t\tcase SWT.TRAVERSE_ARROW_NEXT:\t\treturn traverseItem (true);\r", "-\t\tcase SWT.TRAVERSE_ARROW_PREVIOUS:\treturn traverseItem (false);\r", "-//\t\tcase SWT.TRAVERSE_MNEMONIC:\t\t\treturn traverseMnemonic (key);\t\r", "-\t\tcase SWT.TRAVERSE_PAGE_NEXT:\t\treturn traversePage (true);\r", "-\t\tcase SWT.TRAVERSE_PAGE_PREVIOUS:\treturn traversePage (false);\r", "-\t}\r", "-\treturn false;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "30ff39f7e49236c764ff79dcf474c25b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "d583df28ef4521b9f2420fbe05835676e837d84f", "commitAfterChange": "94e68629e2b5131cc8ba557c59631c2dea710775", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 136, "signatureBeforeChange": "\r boolean translateTraversal (int key, XKeyEvent xEvent)", "signatureAfterChange": "\r boolean translateTraversal (int key, XKeyEvent xEvent)", "diff": ["+\tint code = traversalCode (key, xEvent);\r", "-\t\tcase OS.XK_Cancel:\r", "+\t\tcase OS.XK_Cancel: {\r", "-\t\tcase OS.XK_Return:\r", "+\t\t}\r", "+\t\tcase OS.XK_Return: {\r", "-\t\tcase OS.XK_Tab:\r", "-\t\t\tdetail = SWT.TRAVERSE_TAB_PREVIOUS;\r", "+\t\t}\r", "+\t\tcase OS.XK_Tab: {\r", "-\t\t\tif (next && ((xEvent.state & OS.ControlMask) != 0)) return false;\r", "-\t\t\tif (next) detail = SWT.TRAVERSE_TAB_NEXT;\r", "+\t\t\t/*\r", "+\t\t\t* NOTE: This code emulates a bug/feature on Windows where\r", "+\t\t\t* the default is that that Shift+Tab and Ctrl+Tab traverses\r", "+\t\t\t* instead of going to the widget.  StyledText currently\r", "+\t\t\t* relies on this behavior.\r", "+\t\t\t*/\r", "+\t\t\tswitch (xEvent.state) {\r", "+\t\t\t\tcase OS.ControlMask:\r", "+\t\t\t\tcase OS.ShiftMask:\r", "+\t\t\t\t\tcode |= SWT.TRAVERSE_TAB_PREVIOUS | SWT.TRAVERSE_TAB_NEXT;\r", "+\t\t\t}\r", "+\t\t\tdetail = next ? SWT.TRAVERSE_TAB_NEXT : SWT.TRAVERSE_TAB_PREVIOUS;\r", "+\t\t}\r", "-\t\t\tdetail = SWT.TRAVERSE_ARROW_PREVIOUS;\r", "-\t\t\tbreak;\r", "-\t\tcase OS.XK_Right:\r", "-\t\t\tdetail = SWT.TRAVERSE_ARROW_NEXT;\r", "+\t\tcase OS.XK_Right: {\r", "+\t\t\tboolean next = key == OS.XK_Down || key == OS.XK_Right;\r", "+\t\t\tdetail = next ? SWT.TRAVERSE_ARROW_NEXT : SWT.TRAVERSE_ARROW_PREVIOUS;\r", "+\t\t}\r", "-\t\tcase OS.XK_Page_Down:\r", "+\t\tcase OS.XK_Page_Down: {\r", "+\t\t}\r", "-\tboolean doit = (detail & traversalCode ()) != 0;\r", "-\t/*\r", "-\t* NOTE:  The native widgets handle tab and arrow key traversal\r", "-\t* so it is not necessary to traverse these keys.  A canvas widget\r", "-\t* has no native traversal by definition so it is necessary to\r", "-\t* traverse all keys.\r", "-\t*/\r", "-\tint flags = SWT.TRAVERSE_RETURN | SWT.TRAVERSE_ESCAPE | SWT.TRAVERSE_PAGE_NEXT | SWT.TRAVERSE_PAGE_PREVIOUS;\r", "-\tif ((detail & flags) == 0 && (state & CANVAS) == 0) return false;\r", "-\tevent.doit = doit;\r", "+\tevent.doit = (code & detail) != 0;\r"]}], "num": 5955}
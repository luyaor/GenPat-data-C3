{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2be735b6177fe922057448afa77d834c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "64e013f331f9affa68dd7269619ca293", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "e5701ee69f29ea7e436f667b5695fa38eb06a765", "commitAfterChange": "6040e393a0d98e6d0aa706602ab89337138d787f", "methodNumberBeforeChange": 297, "methodNumberAfterChange": 297, "signatureBeforeChange": " public void setAlignment(int alignment)", "signatureAfterChange": " void setAlignment()", "diff": ["+void setAlignment() {", "+\tif ((getStyle() & SWT.SINGLE) == 0) return;", "+\tint alignment = renderer.getLineAlignment(0, this.alignment);", "+\tint newAlignmentMargin = 0;", "+\tif (alignment != SWT.LEFT) {", "+\t\trenderer.calculate(0, 1);", "+\t\tint width = renderer.getWidth() - alignmentMargin;", "+\t\tnewAlignmentMargin = clientAreaWidth - width;", "+\t\tif (newAlignmentMargin < 0) newAlignmentMargin = 0;", "+\t\tif (alignment == SWT.CENTER) newAlignmentMargin /= 2;", "+\t}", "+\tif (alignmentMargin != newAlignmentMargin) {", "+\t\tleftMargin -= alignmentMargin;", "+\t\tleftMargin += newAlignmentMargin;", "+\t\talignmentMargin = newAlignmentMargin;", "+\t\tresetCache(0, 1);", "+\t\tsetCaretLocation();", "+\t\tsuper.redraw();", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac17446b6fccc1feb0d8b807842a4909", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "4b1109db58ecb9bb9b1b51bb55e420f663b89727", "commitAfterChange": "a38cdec12de35954521831ad0e8e78895c25ed1c", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  int _getOffset (int offset, int movement, boolean forward)", "signatureAfterChange": "  int _getOffset (int offset, int movement, boolean forward)", "diff": ["+\tlength = translateOffset(length);", "-\t\t\tif (forward) {", "-\t\t\t\toffset++;", "-\t\t\t} else {", "-\t\t\t\toffset--;", "-\t\t\t}", "-\t\t\treturn Math.max(0, Math.min(length, untranslateOffset(offset)));", "+\t\t\tboolean invalid = false;", "+\t\t\tdo {", "+\t\t\t\tint newOffset = offset;", "+\t\t\t\tif (forward) {", "+\t\t\t\t\tif (newOffset < length) newOffset++;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (newOffset > 0) newOffset--;", "+\t\t\t\t}", "+\t\t\t\tif (newOffset == offset) break;", "+\t\t\t\toffset = newOffset;", "+\t\t\t\tinvalid = false;", "+\t\t\t\tif (invalidOffsets != null) {", "+\t\t\t\t\tfor (int i = 0; i < invalidOffsets.length; i++) {", "+\t\t\t\t\t\tif (offset == invalidOffsets[i]) {", "+\t\t\t\t\t\t\tinvalid = true;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} while (invalid);", "+\t\t\treturn untranslateOffset(offset);", "-\t\tdefault:", "-\t\t\tbreak;", "-\treturn -1;", "+\treturn untranslateOffset(offset);"]}], "num": 37286}
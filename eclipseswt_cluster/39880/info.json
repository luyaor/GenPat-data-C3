{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4e5c7e887447d91acb724647fe501667", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5da847d26d391eab7618bcac1d6695b8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 7, "signatureBeforeChange": " int processMouseMove (MacMouseEvent mmEvent)", "signatureAfterChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "diff": ["+int kEventMouseDown (int nextHandler, int theEvent, int userData) {", "+\tint result = super.kEventMouseDown (nextHandler, theEvent, userData);", "+\tif (result == OS.noErr) return result;", "+\tRect rect = new Rect ();", "+\tOS.GetControlBounds (handle, rect);", "+\tint startX = rect.left;", "+\tint startY = rect.top;\t\t\t", "+\tint width = rect.right - rect.left;", "+\tint height = rect.bottom - rect.top;", "+\tOS.GetControlBounds (parent.handle, rect);", "+\tevent.x = startX -= rect.left;", "+\tevent.y = startY -= rect.top;", "+\tevent.width = width;", "+\tevent.height = height;", "-}", "-int processMouseMove (MacMouseEvent mmEvent) {", "-\tsuper.processMouseMove (mmEvent);", "+\tupdate ();", "+\tif (!event.doit) return result;", "-\tgetDisplay().setCursor((style & SWT.VERTICAL) != 0 ? H_ARROW : V_ARROW);", "-", "-\tif (!dragging || (mmEvent.getButton() != 1)) return 0;", "-\tPoint mp= MacUtil.toControl(parent.handle, mmEvent.getWhere());", "-", "-\tMacRect bounds= new MacRect();", "-\tOS.GetControlBounds(handle, bounds.getData());", "-\tint width = bounds.getWidth(), height = bounds.getHeight();", "+\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "+\tOS.GetEventParameter (theEvent, OS.kEventParamMouseLocation, OS.typeQDPoint, null, pt.sizeof, null, pt);", "+\tint window = OS.GetControlOwner (handle);", "+\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\tint offsetX = pt.h - rect.left;", "+\tint offsetY = pt.v - rect.top;", "+\tOS.GetControlBounds (handle, rect);", "+\toffsetX -= rect.left;", "+\toffsetY -= rect.top;", "-\tMacRect parentBounds= new MacRect();", "-\tOS.GetControlBounds(parent.handle, parentBounds.getData());", "-", "-\tint x = bounds.getX()-parentBounds.getX(), y = bounds.getY()-parentBounds.getY();", "-", "-\tint newX = lastX, newY = lastY;", "-\tif ((style & SWT.VERTICAL) != 0) {", "-\t\tnewX = Math.min (Math.max (0, x + (mp.x - startX)), parentBounds.getWidth() - width);", "-\t} else {", "-\t\tnewY = Math.min (Math.max (0, y + (mp.y - startY)), parentBounds.getHeight() - height);", "-\t}", "-\tif (newX == lastX && newY == lastY) return 0;", "-\tdrawBand (lastX, lastY, width, height);", "-\tEvent event = new Event ();", "-\tevent.detail = SWT.DRAG;", "-\t//event.time = xEvent.time;", "-\tevent.x = newX;  event.y = newY;", "-\tevent.width = width;  event.height = height;", "-\tsendEvent (SWT.Selection, event);", "-\tif (event.doit) {", "-\t\tlastX = event.x;  lastY = event.y;", "-\t\tdrawBand (lastX, lastY, width, height);", "-\t}", "-\treturn 0;", "-}", "+\tint port = OS.GetWindowPort (window);", "+\tint [] outModifiers = new int [1];", "+\tshort [] outResult = new short [1];", "+\torg.eclipse.swt.internal.carbon.Point outPt = new org.eclipse.swt.internal.carbon.Point ();", "+\twhile (outResult [0] != OS.kMouseTrackingMouseUp) {", "+\t\tOS.TrackMouseLocationWithOptions (port, 0, OS.kEventDurationForever, outPt, outModifiers, outResult);", "+\t\tswitch (outResult [0]) {", "+\t\t\tcase OS.kMouseTrackingMouseDown:", "+\t\t\tcase OS.kMouseTrackingMouseUp:", "+\t\t\tcase OS.kMouseTrackingMouseDragged: {", "+\t\t\t\tOS.GetControlBounds (parent.handle, rect);", "+\t\t\t\tint x = outPt.h - rect.left;", "+\t\t\t\tint y = outPt.v - rect.top;\t\t\t\t", "+\t\t\t\tint newX = startX, newY = startY;", "+\t\t\t\tif ((style & SWT.VERTICAL) != 0) {", "+\t\t\t\t\tint clientWidth = rect.right - rect.left;", "+\t\t\t\t\tnewX = Math.min (Math.max (0, x - offsetX), clientWidth - width);", "+\t\t\t\t} else {", "+\t\t\t\t\tint clientHeight = rect.bottom - rect.top;", "+\t\t\t\t\tnewY = Math.min (Math.max (0, y - offsetY), clientHeight - height);", "+\t\t\t\t}", "+\t\t\t\tevent = new Event ();", "+\t\t\t\tevent.x = newX;", "+\t\t\t\tevent.y = newY;", "+\t\t\t\tevent.width = width;", "+\t\t\t\tevent.height = height;", "+\t\t\t\tevent.detail = 0; //outResult [0] == OS.kMouseTrackingMouseDragged ? SWT.DRAG : 0;", "+\t\t\t\tsendEvent (SWT.Selection, event);", "+\t\t\t\tif (event.doit) setBounds (newX, newY, width, height);", "+\t\t\t\tupdate ();", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tdefault:", "+\t\t\t\toutResult [0] = OS.kMouseTrackingMouseUp;", "+\t\t\t\tbreak;", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e476a0c1da8caff5fb2759ca11fd2deb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "81a33fbed3eb272c93a82c3f5eae3c1f2166f25e", "commitAfterChange": "1bffcc668dddef37395056cc439e6737b02c5e67", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public Image (Device device, String filename)", "signatureAfterChange": " public Image (Device device, String filename)", "diff": ["+\t\t\tint transparentColor = -1;", "+\t\t\tint width = Gdip.Image_GetWidth(bitmap);", "+\t\t\tint height = Gdip.Image_GetHeight(bitmap);", "+\t\t\t\tthis.type = SWT.ICON;", "-\t\t\t\tthis.type = SWT.ICON;", "-\t\t\t\tif (this.handle == 0) {", "-\t\t\t\t\tGdip.Bitmap_delete(bitmap);", "-\t\t\t\t\tSWT.error(SWT.ERROR_INVALID_IMAGE);", "-\t\t\t\t}", "-\t\t\t\tint color = Gdip.Color_new(0);", "-\t\t\t\tif (color == 0) {", "-\t\t\t\t\tGdip.Bitmap_delete(bitmap);", "-\t\t\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\t\t}", "-\t\t\t\tint[] hBitmap = new int[1];", "-\t\t\t\tGdip.Bitmap_GetHBITMAP(bitmap, color, hBitmap);", "-\t\t\t\tthis.handle = hBitmap[0];", "-\t\t\t\tif (this.handle == 0) {", "-\t\t\t\t\tGdip.Bitmap_delete(bitmap);", "-\t\t\t\t\tGdip.Color_delete(color);", "-\t\t\t\t\tSWT.error(SWT.ERROR_INVALID_IMAGE);", "-\t\t\t\t}", "-\t\t\t\t\t\tif (lockedBitmapData == 0) {", "-\t\t\t\t\t\t\tGdip.Bitmap_delete(bitmap);", "-\t\t\t\t\t\t\tGdip.Color_delete(color);", "-\t\t\t\t\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (lockedBitmapData == 0) break;", "-\t\t\t\t\t\tint width = bitmapData.Width;", "-\t\t\t\t\t\tint height = bitmapData.Height;", "+\t\t\t\t\t\tthis.handle = createDIB(width, height, 32);", "-\t\t\t\t\t\tif (palette == 0) {", "-\t\t\t\t\t\t\tGdip.Bitmap_delete(bitmap);", "-\t\t\t\t\t\t\tGdip.Color_delete(color);", "-\t\t\t\t\t\t\tSWT.error(SWT.ERROR_NO_HANDLES); ", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (palette == 0) break;", "-\t\t\t\t\t\tif ((colorPalette.Flags & Gdip.PaletteFlagsHasAlpha) != 0) { ", "-\t\t\t\t\t\t\tint[] entries = new int[colorPalette.Count];", "-\t\t\t\t\t\t\tOS.MoveMemory(entries, palette + 8, entries.length * 4);", "-\t\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++) {", "-\t\t\t\t\t\t\t\tif (((entries[i] >> 24) & 0xFF) == 0) {", "-\t\t\t\t\t\t\t\t\ttransparentPixel = i;", "+\t\t\t\t\t\tint[] entries = new int[colorPalette.Count];", "+\t\t\t\t\t\tOS.MoveMemory(entries, palette + 8, entries.length * 4);", "+\t\t\t\t\t\tOS.HeapFree(hHeap, 0, palette);", "+\t\t\t\t\t\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER();", "+\t\t\t\t\t\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;", "+\t\t\t\t\t\tbmiHeader.biWidth = width;", "+\t\t\t\t\t\tbmiHeader.biHeight = -height;", "+\t\t\t\t\t\tbmiHeader.biPlanes = 1;", "+\t\t\t\t\t\tbmiHeader.biBitCount = (short)8;", "+\t\t\t\t\t\tbmiHeader.biCompression = OS.BI_RGB;", "+\t\t\t\t\t\tbyte[] bmi = new byte[BITMAPINFOHEADER.sizeof + colorPalette.Count * 4];", "+\t\t\t\t\t\tOS.MoveMemory(bmi, bmiHeader, BITMAPINFOHEADER.sizeof);\t\t\t\t\t", "+\t\t\t\t\t\tint offset = BITMAPINFOHEADER.sizeof;", "+\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++) {", "+\t\t\t\t\t\t\tif (((entries[i] >> 24) & 0xFF) == 0 && (colorPalette.Flags & Gdip.PaletteFlagsHasAlpha) != 0) {", "+\t\t\t\t\t\t\t\ttransparentPixel = i;", "+\t\t\t\t\t\t\t\ttransparentColor = entries[i] & 0xFFFFFF;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tbmi[offset] = (byte)((entries[i] & 0xFF) >> 0);", "+\t\t\t\t\t\t\tbmi[offset + 1] = (byte)((entries[i] & 0xFF00) >> 8);", "+\t\t\t\t\t\t\tbmi[offset + 2] = (byte)((entries[i] & 0xFF0000) >> 16);", "+\t\t\t\t\t\t\tbmi[offset + 3] = 0;", "+\t\t\t\t\t\t\toffset += 4;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint[] pBits = new int[1];", "+\t\t\t\t\t\tthis.handle = OS.CreateDIBSection(0, bmi, OS.DIB_RGB_COLORS, pBits, 0, 0);\t\t\t\t\t\t", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Gdip.PixelFormat16bppGrayScale:", "+\t\t\t\t\tcase Gdip.PixelFormat16bppRGB555:", "+\t\t\t\t\tcase Gdip.PixelFormat16bppRGB565:", "+\t\t\t\t\t\tthis.handle = createDIB(width, height, 16);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Gdip.PixelFormat24bppRGB:", "+\t\t\t\t\t\tthis.handle = createDIB(width, height, 24);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tthis.handle = createDIB(width, height, 32);", "+\t\t\t\t}", "+\t\t\t\tif (handle != 0) {", "+\t\t\t\t\tint hDC = device.internal_new_GC(null);", "+\t\t\t\t\tint srcHDC = OS.CreateCompatibleDC(hDC);", "+\t\t\t\t\tint oldSrcBitmap = OS.SelectObject(srcHDC, handle);", "+\t\t\t\t\tint graphics = Gdip.Graphics_new(srcHDC);", "+\t\t\t\t\tif (graphics != 0) {\t\t\t\t\t\t", "+\t\t\t\t\t\tif (transparentColor != -1) {", "+\t\t\t\t\t\t\tint color = Gdip.Color_new(transparentColor | 0xFF000000);", "+\t\t\t\t\t\t\tif (color != 0) {", "+\t\t\t\t\t\t\t\tint brush = Gdip.SolidBrush_new(color);", "+\t\t\t\t\t\t\t\tif (brush != 0) {", "+\t\t\t\t\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, 0, 0, width, height);", "+\t\t\t\t\t\t\t\t\tGdip.SolidBrush_delete(brush);", "+\t\t\t\t\t\t\t\tGdip.Color_delete(color);", "-\t\t\t\t\t\tOS.HeapFree(hHeap, 0, palette);", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}\t\t\t", "-\t\t\t\tGdip.Color_delete(color);", "+\t\t\t\t\t\tRect rect = new Rect();", "+\t\t\t\t\t\trect.Width = width;", "+\t\t\t\t\t\trect.Height = height;", "+\t\t\t\t\t\tGdip.Graphics_DrawImage(graphics, bitmap, rect, 0, 0, width, height, Gdip.UnitPixel, 0, 0, 0);", "+\t\t\t\t\t\tGdip.Graphics_delete(graphics);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.SelectObject(srcHDC, oldSrcBitmap);", "+\t\t\t\t\tOS.DeleteDC(srcHDC);", "+\t\t\t\t\tdevice.internal_dispose_GC(hDC, null);", "+\t\t\t\t}", "-\t\t\tgdiPlus = true;", "+\t\t\tif (handle == 0) SWT.error(SWT.ERROR_NO_HANDLES);"]}], "num": 39880}
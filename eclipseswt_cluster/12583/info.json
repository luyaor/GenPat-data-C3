{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71ec4f8ea46907d15479573564c71e3f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b7b2dd75fea529988d99a1b984b4c0e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "89dd18f56416766e9f25e99fa93a3cfdf736ff7e", "commitAfterChange": "0333c3cd6e1227d0185cdb60c13b053083d72b21", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void javaToNative(Object object, TransferData transferData)", "signatureAfterChange": " public void javaToNative(Object object, TransferData transferData)", "diff": ["-\tif (object == null || !(object instanceof String[])) return;", "-\t// build a byte array from data", "+\ttransferData.result = -1;", "+\tif (object == null || !(object instanceof String[]) || !isSupportedType(transferData)) return;", "-\t", "-\t// create a string separated by \"new lines\" to represent list of files", "-\tString nativeFormat = \"\";", "-\tfor (int i = 0, length = files.length; i < length; i++){", "-\t\tnativeFormat += \"file:\"+files[i]+\"\\r\";", "+\tif (files.length == 0) return;\t\t", "+", "+\tif (transferData.type == URILISTID) {", "+\t\t// create a string separated by \"new lines\" to represent list of files", "+\t\tStringBuffer sb = new StringBuffer();", "+\t\tfor (int i = 0, length = files.length; i < length; i++){", "+\t\t\tsb.append(URILIST_PREFIX);", "+\t\t\tsb.append(files[i]);", "+\t\t\tsb.append(URILIST_SEPARATOR);", "+\t\t}", "+\t\tString str = sb.toString();", "+\t\tchar[] chars = new char[str.length()];", "+\t\tstr.getChars (0, chars.length, chars, 0);", "+\t\tbyte[] buffer = new byte[chars.length * 2];", "+\t\tOS.memcpy(buffer, chars, buffer.length);", "+\t\ttransferData.data = new byte[1][];", "+\t\ttransferData.data[0] = buffer;", "+\t\ttransferData.result = 0;", "-\tbyte[] buffer = Converter.wcsToMbcs(null, nativeFormat, true);", "-\t// pass byte array on to super to convert to native", "-\tsuper.javaToNative(buffer, transferData);", "+\tif (transferData.type == HFSID) {", "+\t\tbyte[][] data = new byte[files.length][];", "+\t\tfor (int i = 0; i < data.length; i++) {", "+\t\t\tFile file = new File(files[i]);", "+\t\t\tboolean isDirectory = file.isDirectory();", "+\t\t\tString fileName = files[i];", "+\t\t\tchar [] chars = new char [fileName.length ()];", "+\t\t\tfileName.getChars (0, chars.length, chars, 0);", "+\t\t\tint cfstring = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, chars, chars.length);", "+\t\t\tif (cfstring == 0) return;", "+\t\t\ttry {", "+\t\t\t\tint url = OS.CFURLCreateWithFileSystemPath(OS.kCFAllocatorDefault, cfstring, OS.kCFURLPOSIXPathStyle, isDirectory);", "+\t\t\t\tif (url == 0) return;", "+\t\t\t\ttry {", "+\t\t\t\t\tbyte[] fsRef = new byte[80];", "+\t\t\t\t\tif (!OS.CFURLGetFSRef(url, fsRef)) return;", "+\t\t\t\t\tbyte[] fsSpec = new byte[70];", "+\t\t\t\t\tif (OS.FSGetCatalogInfo(fsRef, 0, null, null, fsSpec, null) != OS.noErr) return;", "+\t\t\t\t\tbyte[] hfsflavor = new byte[10 + fsSpec.length];", "+\t\t\t\t\t//OS.FpGetFInfo();", "+\t\t\t\t\tSystem.arraycopy(fsSpec, 0, hfsflavor, 10, fsSpec.length);", "+\t\t\t\t\tdata[i] = hfsflavor;", "+\t\t\t\t} finally {", "+\t\t\t\t\tOS.CFRelease(url);", "+\t\t\t\t}", "+\t\t\t} finally {", "+\t\t\t\tOS.CFRelease(cfstring);", "+\t\t\t}", "+\t\t}", "+\t\ttransferData.data = data;", "+\t\ttransferData.result = 0;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31092702ab10a2fd47ff7c61d5ea1d95", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "64effad0f66392d90fe436b2cdfb9750628edbf7", "commitAfterChange": "80a49f89c5a8052f1a382214fc771eca7a097cd6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void javaToNative(Object object, TransferData transferData)", "signatureAfterChange": " public void javaToNative(Object object, TransferData transferData)", "diff": ["-\tif (transferData.type == URILISTID) {", "-\t\t// create a string separated by \"new lines\" to represent list of files", "-\t\tStringBuffer sb = new StringBuffer();", "-\t\tfor (int i = 0, length = files.length; i < length; i++){", "-\t\t\tsb.append(URILIST_PREFIX);", "-\t\t\tsb.append(files[i]);", "-\t\t\tsb.append(URILIST_SEPARATOR);", "-\t\t}", "-\t\tString str = sb.toString();", "-\t\tchar[] chars = new char[str.length()];", "-\t\tstr.getChars (0, chars.length, chars, 0);", "-\t\tbyte[] buffer = new byte[chars.length * 2];", "-\t\tOS.memcpy(buffer, chars, buffer.length);", "-\t\ttransferData.data = new byte[1][];", "-\t\ttransferData.data[0] = buffer;", "-\t\ttransferData.result = 0;", "-\t}", "-\tif (transferData.type == HFSID) {", "-\t\tbyte[][] data = new byte[files.length][];", "-\t\tfor (int i = 0; i < data.length; i++) {", "-\t\t\tFile file = new File(files[i]);", "-\t\t\tboolean isDirectory = file.isDirectory();", "-\t\t\tString fileName = files[i];", "-\t\t\tchar [] chars = new char [fileName.length ()];", "-\t\t\tfileName.getChars (0, chars.length, chars, 0);", "-\t\t\tint cfstring = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, chars, chars.length);", "-\t\t\tif (cfstring == 0) return;", "+\tbyte[][] data = new byte[files.length][];", "+\tfor (int i = 0; i < data.length; i++) {", "+\t\tFile file = new File(files[i]);", "+\t\tboolean isDirectory = file.isDirectory();", "+\t\tString fileName = files[i];", "+\t\tchar [] chars = new char [fileName.length ()];", "+\t\tfileName.getChars (0, chars.length, chars, 0);", "+\t\tint cfstring = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, chars, chars.length);", "+\t\tif (cfstring == 0) return;", "+\t\ttry {", "+\t\t\tint url = OS.CFURLCreateWithFileSystemPath(OS.kCFAllocatorDefault, cfstring, OS.kCFURLPOSIXPathStyle, isDirectory);", "+\t\t\tif (url == 0) return;", "-\t\t\t\tint url = OS.CFURLCreateWithFileSystemPath(OS.kCFAllocatorDefault, cfstring, OS.kCFURLPOSIXPathStyle, isDirectory);", "-\t\t\t\tif (url == 0) return;", "-\t\t\t\ttry {", "+\t\t\t\tif (transferData.type == HFSID) {", "-\t\t\t\t} finally {", "-\t\t\t\t\tOS.CFRelease(url);", "+\t\t\t\t}", "+\t\t\t\tif (transferData.type == FURLID) {", "+\t\t\t\t\tint encoding = OS.CFStringGetSystemEncoding();", "+\t\t\t\t\tint theData = OS.CFURLCreateData(OS.kCFAllocatorDefault, url, encoding, true);", "+\t\t\t\t\tif (theData == 0) return;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tint length = OS.CFDataGetLength(theData);", "+\t\t\t\t\t\tbyte[] buffer = new byte[length];", "+\t\t\t\t\t\tCFRange range = new CFRange();", "+\t\t\t\t\t\trange.length = length;", "+\t\t\t\t\t\tOS.CFDataGetBytes(theData, range, buffer);", "+\t\t\t\t\t\tdata[i] = buffer;", "+\t\t\t\t\t} finally {", "+\t\t\t\t\t\tOS.CFRelease(theData);", "+\t\t\t\t\t}", "-\t\t\t\tOS.CFRelease(cfstring);", "+\t\t\t\tOS.CFRelease(url);", "+\t\t} finally {", "+\t\t\tOS.CFRelease(cfstring);", "-\t\ttransferData.data = data;", "-\t\ttransferData.result = 0;", "+\ttransferData.data = data;", "+\ttransferData.result = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4732eb8b9b159f1584e6a07ac6284b53", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/FileTransfer.java", "commitBeforeChange": "6b0a245288556e7224d3c56682401ca81ba95245", "commitAfterChange": "4dbd09dcd54c5e8b8416ccbe2fdfacc6901be61f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void javaToNative(Object object, TransferData transferData)", "signatureAfterChange": " public void javaToNative(Object object, TransferData transferData)", "diff": ["-\ttransferData.result = -1;", "-\tbyte[][] data = new byte[files.length][];", "-\tfor (int i = 0; i < data.length; i++) {", "-\t\tFile file = new File(files[i]);", "-\t\tboolean isDirectory = file.isDirectory();", "+\tint length = files.length;", "+\tNSMutableArray array = NSMutableArray.arrayWithCapacity(length);", "+\tfor (int i = 0; i < length; i++) {", "-\t\tchar [] chars = new char [fileName.length ()];", "-\t\tfileName.getChars (0, chars.length, chars, 0);", "-\t\tint cfstring = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, chars, chars.length);", "-\t\tif (cfstring == 0) return;", "-\t\ttry {", "-\t\t\tint url = OS.CFURLCreateWithFileSystemPath(OS.kCFAllocatorDefault, cfstring, OS.kCFURLPOSIXPathStyle, isDirectory);", "-\t\t\tif (url == 0) return;", "-\t\t\ttry {", "-\t\t\t\tif (transferData.type == HFSID) {", "-\t\t\t\t\tbyte[] fsRef = new byte[80];", "-\t\t\t\t\tif (!OS.CFURLGetFSRef(url, fsRef)) return;", "-\t\t\t\t\tbyte[] fsSpec = new byte[70];", "-\t\t\t\t\tif (OS.FSGetCatalogInfo(fsRef, 0, null, null, fsSpec, null) != OS.noErr) return;", "-\t\t\t\t\tbyte[] hfsflavor = new byte[10 + fsSpec.length];", "-\t\t\t\t\tbyte[] finfo = new byte[16];", "-\t\t\t\t\tOS.FSpGetFInfo(fsSpec, finfo);", "-\t\t\t\t\tSystem.arraycopy(finfo, 0, hfsflavor, 0, 10);", "-\t\t\t\t\tSystem.arraycopy(fsSpec, 0, hfsflavor, 10, fsSpec.length);", "-\t\t\t\t\tdata[i] = hfsflavor;", "-\t\t\t\t}", "-\t\t\t\tif (transferData.type == FURLID) {", "-\t\t\t\t\tint encoding = OS.CFStringGetSystemEncoding();", "-\t\t\t\t\tint theData = OS.CFURLCreateData(OS.kCFAllocatorDefault, url, encoding, true);", "-\t\t\t\t\tif (theData == 0) return;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tint length = OS.CFDataGetLength(theData);", "-\t\t\t\t\t\tbyte[] buffer = new byte[length];", "-\t\t\t\t\t\tCFRange range = new CFRange();", "-\t\t\t\t\t\trange.length = length;", "-\t\t\t\t\t\tOS.CFDataGetBytes(theData, range, buffer);", "-\t\t\t\t\t\tdata[i] = buffer;", "-\t\t\t\t\t} finally {", "-\t\t\t\t\t\tOS.CFRelease(theData);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} finally {", "-\t\t\t\tOS.CFRelease(url);", "-\t\t\t}", "-\t\t} finally {", "-\t\t\tOS.CFRelease(cfstring);", "-\t\t}", "+\t\tNSString string = NSString.stringWith(fileName);", "+\t\tarray.addObject(string);", "-\ttransferData.data = data;", "-\ttransferData.result = 0;", "+\ttransferData.data = array;"]}], "num": 12583}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4edb305d44ee797c5681cf2b0d4209e3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ad30c719683d4d11a6b2399e72f949b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "5e2d580858138f39b04450d3d7462f70f593b33d", "commitAfterChange": "6086ff1582180c7237da261fc82386df3aa300ca", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  void update ()", "signatureAfterChange": "  void update ()", "diff": ["+\t", "+\t/*", "+\t* Bug in Windows.  When a menu item has a check and a string", "+\t* that includes a label and accelerator text but does not have", "+\t* a bitmap, when the string is the longest string in the menu,", "+\t* the label and accelerator text overlap.  The fix is to use", "+\t* SetMenuItemInfo() to indicate that the item has a bitmap", "+\t* and then answer the width of the widest bitmap in the menu", "+\t* from WM_MEASURECHILD.", "+\t*/\t", "+\tif (hasImage && hasCheck) {", "+\t\tMENUITEMINFO info = new MENUITEMINFO ();", "+\t\tinfo.cbSize = MENUITEMINFO.sizeof;", "+\t\tinfo.fMask = OS.MIIM_BITMAP;", "+\t\tinfo.hbmpItem = OS.HBMMENU_CALLBACK;", "+\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\tMenuItem item = items [i];", "+\t\t\tif ((item.style & (SWT.CHECK | SWT.RADIO)) != 0) {", "+\t\t\t\tOS.SetMenuItemInfo (handle, item.id, false, info);", "+\t\t\t}", "+\t\t}", "+\t}", "+", "+\t/* Update the menu to hide or show the space for bitmaps */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1049ff9fc37f4b395b7500bc66e88fa1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "823cc6c2771fef0325da5857f1a25b2b047efde4", "commitAfterChange": "acd21e0605604e65519caa05a651b424c54e8bba", "methodNumberBeforeChange": 297, "methodNumberAfterChange": 297, "signatureBeforeChange": " \tint get_groupPosition(int pGroupLevel, int pSimilarItemsInGroup, int pPositionInGroup)", "signatureAfterChange": " \tint get_groupPosition(int pGroupLevel, int pSimilarItemsInGroup, int pPositionInGroup)", "diff": ["-\t\t//collect all children with the same role, if none, then 0 (for N/A)", "+\t\t//count all children with the same role, if none, then 0 (for N/A)", "+\t\t//find this control's 1-based index in the same-type children of the parent (0 for N/A)", "-\t\tCOM.MoveMemory(pSimilarItemsInGroup, new int [] { similarItemsInGroup }, 4);", "-\t\t//find this guy's 1-based index in the children of the parent (0 for N/A)", "+\t\tif (control instanceof Button && ((control.getStyle() & SWT.RADIO) != 0)) {", "+\t\t\t/* We currently only determine position and count for radio buttons. */", "+\t\t\tControl [] children = control.getParent().getChildren();", "+\t\t\tpositionInGroup = 1;", "+\t\t\tsimilarItemsInGroup = 1;", "+\t\t\tfor (int i = 0; i < children.length; i++) {", "+\t\t\t\tControl child = children[i];", "+\t\t\t\tif (child instanceof Button && ((child.getStyle() & SWT.RADIO) != 0)) {", "+\t\t\t\t\tif (child == control) positionInGroup = similarItemsInGroup;", "+\t\t\t\t\telse similarItemsInGroup++;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tCOM.MoveMemory(pSimilarItemsInGroup, new int [] { similarItemsInGroup }, 4);"]}], "num": 48993}
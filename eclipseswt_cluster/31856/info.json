{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "49ceeb085dd6ad76154f7c60ac820d65", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57508c8014118d25b36448b778108f8d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/addressbook/AddressBook.java", "commitBeforeChange": "a1b8e263bdc5de05e234702103468991c758144f", "commitAfterChange": "aedecefc76a9dffeb42563cbe0d758ba66e1f0ea", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " private void sort(int column)", "signatureAfterChange": " private void sort(int column)", "diff": ["-\tfor (int i = 0; i < data.length; i++) {", "-\t\titems[i].setText(data[i]);", "+\tif (lastSortColumn != column) {", "+\t\tfor (int i = 0; i < data.length; i++) {", "+\t\t\titems[i].setText(data[i]);", "+\t\t}", "+\t\tlastSortColumn = column;", "+\t} else {", "+\t\t// reverse order if the current column is selected again", "+\t\tint j = data.length -1;", "+\t\tfor (int i = 0; i < data.length; i++) {", "+\t\t\titems[i].setText(data[j--]);", "+\t\t}", "+\t\tlastSortColumn = -1;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "805b1f7db76d672dc081f004b9f13e08", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/graphics/ImageData.java", "commitBeforeChange": "4b05a6b5c8e464f92c6a2b8e61d075e3c7a84736", "commitAfterChange": "ae8b554eec17eb75bd6084a04c4176f4948c58d7", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "\r static final void blit(int op,\r \tbyte[] srcData, int srcDepth, int srcStride, int srcOrder,\r \tint srcX, int srcY, int srcWidth, int srcHeight,\r \tbyte[] srcReds, byte[] srcGreens, byte[] srcBlues,\r \tint alphaMode, byte[] alphaData, int alphaStride,\r \tbyte[] destData, int destDepth, int destStride, int destOrder,\r \tint destX, int destY, int destWidth, int destHeight,\r \tbyte[] destReds, byte[] destGreens, byte[] destBlues,\r \tboolean flipX, boolean flipY)", "signatureAfterChange": "\r static final void blit(int op,\r \tbyte[] srcData, int srcDepth, int srcStride, int srcOrder,\r \tint srcX, int srcY, int srcWidth, int srcHeight,\r \tbyte[] srcReds, byte[] srcGreens, byte[] srcBlues,\r \tint alphaMode, byte[] alphaData, int alphaStride,\r \tbyte[] destData, int destDepth, int destStride, int destOrder,\r \tint destX, int destY, int destWidth, int destHeight,\r \tbyte[] destReds, byte[] destGreens, byte[] destBlues,\r \tboolean flipX, boolean flipY)", "diff": ["+\t\t\t/*** If palettes have not been supplied, supply a suitable mapping ***/\r", "+\t\t\t} else if ((srcReds == null) || (destReds == null)) {\r", "+\t\t\t\tif (srcDepth <= destDepth) {\r", "+\t\t\t\t\tpaletteMapping = oneToOneMapping;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tpaletteMapping = new byte[1 << srcDepth];\r", "+\t\t\t\t\tint mask = (0xff << destDepth) >>> 8;\r", "+\t\t\t\t\tfor (int i = 0; i < paletteMapping.length; ++i) paletteMapping[i] = (byte)(i & mask);\r", "+\t\t\t\t}\r"]}], "num": 31856}
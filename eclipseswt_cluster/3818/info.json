{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "abf3edd0ee4379226a4bf3f899f86bc5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7d79c83cc4280e4ef42ab95fc29b561", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet151.java", "commitBeforeChange": "fb5b460d0cd1322d5dade6f3cc57c1e1f7f85066", "commitAfterChange": "71a079a82aecf22804fbd623b6b9ddb2a35a45b5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static void main (String [] args)", "signatureAfterChange": "  public static void main (String [] args)", "diff": ["-\tfinal Display display = new Display ();", "-\tShell shell = new Shell (display);", "+\tfinal Display display = new Display();", "+\tShell shell = new Shell(display);", "-\tfinal Random random = new Random();", "-\tthread = new Thread() {", "+\tThread thread = new Thread() {", "+\t\t\tRandom random = new Random();", "-\t\t\t\t// add 1000 random numbers to a sorted array", "-\t\t\t\tfor (int j = 0; j < 1000; j++) {", "-\t\t\t\t\tint next  = random.nextInt();", "-\t\t\t\t\tint[] newItems = new int[values.length + 1];", "-\t\t\t\t\tint index = 0;", "-\t\t\t\t\tfor (int i = 0; i < values.length; i++) {", "-\t\t\t\t\t\tif (values[i] > next) break;", "-\t\t\t\t\t\tindex++;", "-\t\t\t\t\t}", "-\t\t\t\t\tSystem.arraycopy(values, 0, newItems, 0, index);", "-\t\t\t\t\tnewItems[index] = next;", "-\t\t\t\t\tSystem.arraycopy(values, index, newItems, index+1, values.length-index);", "-\t\t\t\t\tvalues = newItems;", "+\t\t\t\tfinal int[] newValues = new int[1000];", "+\t\t\t\tfor (int i = 0; i < newValues.length; i++) {", "+\t\t\t\t\tnewValues[i] = random.nextInt();", "+\t\t\t\tArrays.sort(newValues);", "-\t\t\t\t\t\ttable.setItemCount(values.length);", "+\t\t\t\t\t\tif (values == null) {", "+\t\t\t\t\t\t\ttable.setItemCount(1000);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tvalues = newValues;", "-\t\t\t\t\t\t// bug 69398 on Windows", "-\t\t\t\t\t\ttable.redraw();", "-\tshell.open ();", "-\twhile (!shell.isDisposed ()) {", "-\t\tif (!display.readAndDispatch ()) display.sleep ();", "+\tshell.open();", "+\twhile (!shell.isDisposed() || thread.isAlive()) {", "+\t\tif (!display.readAndDispatch()) display.sleep();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f36664e6d469db0b5eb8b4ab17d8c826", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "ca61b834d1fe41e9ab22bc5da0c47a0e76e3922e", "commitAfterChange": "cd36ba0081113965df6d101260814c54e1600a54", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 13, "signatureBeforeChange": "  int gtk_mnemonic_activate (int widget, int arg1)", "signatureAfterChange": "  boolean mnemonicMatch (char key)", "diff": ["-int gtk_mnemonic_activate (int widget, int arg1) {", "-\tint result = super.gtk_mnemonic_activate (widget, arg1);", "-\tif (result == 1) return 1;", "-\tComposite control = this.parent;", "-\twhile (control != null) {", "-\t\tControl [] children = control._getChildren ();", "-\t\tint index = 0;", "-\t\twhile (index < children.length) {", "-\t\t\tif (children [index] == this) break;", "-\t\t\tindex++;", "-\t\t}", "-\t\tindex++;", "-\t\tif (index < children.length) {", "-\t\t\tif (children [index].setFocus ()) return 1;", "-\t\t}", "-\t\tcontrol = control.parent;", "-\t}", "-\treturn 1;", "-}", "+", "+boolean mnemonicMatch (char key) {", "+\tif (labelHandle == 0) return false;", "+\treturn mnemonicMatch (labelHandle, key);", "+}"]}], "num": 3818}
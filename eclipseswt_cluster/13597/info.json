{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b504db1f13d3e671ba5538ef7bcab24b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b73effa99b09e9a5ffc08e6ded83eb2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "ca61b834d1fe41e9ab22bc5da0c47a0e76e3922e", "commitAfterChange": "cd36ba0081113965df6d101260814c54e1600a54", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 97, "signatureBeforeChange": "  void setKeyState (Event event, GdkEventKey keyEvent)", "signatureAfterChange": "  boolean setKeyState (Event event, GdkEventKey keyEvent)", "diff": ["-void setKeyState (Event event, GdkEventKey keyEvent) {", "-\tif (keyEvent.length <= 1) {", "-\t\tevent.keyCode = Display.translateKey (keyEvent.keyval);", "-\t\tswitch (keyEvent.keyval) {", "-\t\t\tcase OS.GDK_BackSpace:\t\tevent.character = '\\b'; break;", "-\t\t\tcase OS.GDK_Linefeed:\t\tevent.character = '\\n'; break;", "-\t\t\tcase OS.GDK_KP_Enter:", "-\t\t\tcase OS.GDK_Return: \t\tevent.character = '\\r'; break;", "-\t\t\tcase OS.GDK_Delete:\t\tevent.character = 0x7F; break;", "-\t\t\tcase OS.GDK_Cancel:", "-\t\t\tcase OS.GDK_Escape:\t\tevent.character = 0x1B; break;", "-\t\t\tcase OS.GDK_Tab:", "-\t\t\tcase OS.GDK_ISO_Left_Tab: \tevent.character = '\\t'; break;", "-//\t\t\tcase OS.GDK_Clear:\t\t\tevent.character = 0xB; break;", "-//\t\t\tcase OS.GDK_Pause:\t\t\tevent.character = 0x13; break;", "-//\t\t\tcase OS.GDK_Scroll_Lock:\tevent.character = 0x14; break;", "-\t\t\tdefault: {", "-\t\t\t\tif (event.keyCode == 0) {", "-\t\t\t\t\tint [] keyval = new int [1], effective_group= new int [1], level = new int [1], consumed_modifiers = new int [1];", "-\t\t\t\t\tif (OS.gdk_keymap_translate_keyboard_state(OS.gdk_keymap_get_default (), keyEvent.hardware_keycode, 0, keyEvent.group, keyval, effective_group, level, consumed_modifiers)) {", "-\t\t\t\t\t\tevent.keyCode = OS.gdk_keyval_to_unicode (keyval [0]);", "-\t\t\t\t\t}", "-\t\t\t\t\tint key = keyEvent.keyval;", "-\t\t\t\t\tif ((keyEvent.state & OS.GDK_CONTROL_MASK) != 0 && (0 <= key && key <= 0x7F)) {", "-\t\t\t\t\t\tif ('a'  <= key && key <= 'z') key -= 'a' - 'A';", "-\t\t\t\t\t\tif (64 <= key && key <= 95) key -= 64;", "-\t\t\t\t\t\tevent.character = (char) key;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tevent.character = (char) OS.gdk_keyval_to_unicode (key);", "-\t\t\t\t\t}", "+boolean setKeyState (Event event, GdkEventKey keyEvent) {", "+\tif (keyEvent.length > 1) return false;", "+\tboolean isNull = false;", "+\tevent.keyCode = Display.translateKey (keyEvent.keyval);", "+\tswitch (keyEvent.keyval) {", "+\t\tcase OS.GDK_BackSpace:\t\tevent.character = '\\b'; break;", "+\t\tcase OS.GDK_Linefeed:\t\tevent.character = '\\n'; break;", "+\t\tcase OS.GDK_KP_Enter:", "+\t\tcase OS.GDK_Return: \t\tevent.character = '\\r'; break;", "+\t\tcase OS.GDK_Delete:\t\tevent.character = 0x7F; break;", "+\t\tcase OS.GDK_Cancel:", "+\t\tcase OS.GDK_Escape:\t\tevent.character = 0x1B; break;", "+\t\tcase OS.GDK_Tab:", "+\t\tcase OS.GDK_ISO_Left_Tab: \tevent.character = '\\t'; break;", "+\t\tdefault: {", "+\t\t\tif (event.keyCode == 0) {", "+\t\t\t\tint [] keyval = new int [1], effective_group= new int [1], level = new int [1], consumed_modifiers = new int [1];", "+\t\t\t\tif (OS.gdk_keymap_translate_keyboard_state(OS.gdk_keymap_get_default (), keyEvent.hardware_keycode, 0, keyEvent.group, keyval, effective_group, level, consumed_modifiers)) {", "+\t\t\t\t\tevent.keyCode = OS.gdk_keyval_to_unicode (keyval [0]);", "+\t\t\t\t}", "+\t\t\t\tint key = keyEvent.keyval;", "+\t\t\t\tif ((keyEvent.state & OS.GDK_CONTROL_MASK) != 0 && (0 <= key && key <= 0x7F)) {", "+\t\t\t\t\tif ('a'  <= key && key <= 'z') key -= 'a' - 'A';", "+\t\t\t\t\tif (64 <= key && key <= 95) key -= 64;", "+\t\t\t\t\tevent.character = (char) key;", "+\t\t\t\t\tisNull = keyEvent.keyval == '@' && key == 0;", "+\t\t\t\t} else {", "+\t\t\t\t\tevent.character = (char) OS.gdk_keyval_to_unicode (key);", "-\tsetInputState (event, keyEvent.state);", "+\tif (event.keyCode == 0 && event.character == 0) {", "+\t\tif (!isNull) return false;", "+\t}", "+\treturn setInputState (event, keyEvent.state);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3336c19bebd7b4d41864f3a4214b55d3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "2c188166c8edeeffa96cf155df849af797217517", "commitAfterChange": "1600566572476d9a59d55b12b53edda457f44a52", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": "  void setKeyState(Event event, PhKeyEvent_t ke)", "signatureAfterChange": "  boolean setKeyState (Event event, int type, PhKeyEvent_t ke)", "diff": ["-", "-void setKeyState(Event event, PhKeyEvent_t ke) {", "-\t/*", "-\t* Fetuare in Photon.  The key_sym value is not valid when Ctrl", "-\t* or Alt is pressed. The fix is to detect this case and try to", "-\t* use the key_cap value.", "-\t*/", "-\tint key = 0;", "-\tif ((ke.key_flags & OS.Pk_KF_Sym_Valid) != 0) {", "-\t\t key = ke.key_sym;", "-\t} else if ((ke.key_flags & OS.Pk_KF_Cap_Valid) != 0) {", "-\t\tif ((ke.key_flags & (OS.Pk_KF_Key_Down | OS.Pk_KF_Key_Repeat)) != 0) {", "-\t\t\tkey = ke.key_cap;", "-\t\t\tif ((ke.key_mods & OS.Pk_KM_Ctrl) != 0) {", "-\t\t\t\tif ('a'  <= key && key <= 'z') key -= 'a' - 'A';", "-\t\t\t\tif (64 <= key && key <= 95) key -= 64;", "-\t\t\t}", "-\t\t}", "-\t}", "-\tevent.keyCode = Display.translateKey (key);", "-\tswitch (key) {", "-\t\tcase OS.Pk_BackSpace:\tevent.character = '\\b'; break;", "-\t\tcase OS.Pk_Linefeed:\tevent.character = '\\n'; break;", "-\t\tcase OS.Pk_Return: \tevent.character = '\\r'; break;", "-\t\tcase OS.Pk_Delete:\t\tevent.character = 0x7F; break;", "-\t\tcase OS.Pk_Cancel:", "-\t\tcase OS.Pk_Escape:\t\tevent.character = 0x1B; break;", "-\t\tcase OS.Pk_KP_Tab:", "-\t\tcase OS.Pk_Tab: \t\tevent.character = '\\t'; break;", "-\t\t/* These keys have no mapping in SWT yet */", "-\t\tcase OS.Pk_Clear:", "-\t\tcase OS.Pk_Pause:", "-\t\tcase OS.Pk_Print:", "-\t\tcase OS.Pk_Menu:", "-\t\tcase OS.Pk_Hyper_L:", "-\t\tcase OS.Pk_Hyper_R:", "-\t\tcase OS.Pk_Caps_Lock:", "-\t\tcase OS.Pk_Num_Lock:", "-\t\tcase OS.Pk_Scroll_Lock:\tbreak;", "-\t\tdefault:", "-\t\t\tif (event.keyCode == 0 && key != 0) {", "-\t\t\t\tevent.character = (char) key;", "-\t\t\t\tif ((ke.key_flags & OS.Pk_KF_Cap_Valid) != 0) {", "-\t\t\t\t\tevent.keyCode = ke.key_cap;", "-\t\t\t\t}", "-\t\t\t}", "-\t}", "-\tsetInputState(event, ke.key_mods, ke.button_state);", "-\tswitch (event.type) {", "+boolean setKeyState (Event event, int type, PhKeyEvent_t ke) {", "+\tboolean isNull = false;", "+\t/*", "+\t* Fetuare in Photon.  The key_sym value is not valid when Ctrl", "+\t* or Alt is pressed. The fix is to detect this case and try to", "+\t* use the key_cap value.", "+\t*/", "+\tint key = 0;", "+\tif ((ke.key_flags & OS.Pk_KF_Sym_Valid) != 0) {", "+\t\tevent.keyCode = Display.translateKey (key = ke.key_sym);", "+\t} else if ((ke.key_flags & OS.Pk_KF_Cap_Valid) != 0) {", "+\t\tevent.keyCode = Display.translateKey (key = ke.key_cap);", "+\t}", "+\tswitch (key) {", "+\t\tcase OS.Pk_BackSpace:\t\tevent.character = '\\b'; break;", "+\t\tcase OS.Pk_Linefeed:\t\tevent.character = '\\n'; break;", "+\t\tcase OS.Pk_KP_Enter:", "+\t\tcase OS.Pk_Return: \t\tevent.character = '\\r'; break;", "+\t\tcase OS.Pk_Delete:\t\tevent.character = 0x7F; break;", "+\t\tcase OS.Pk_Cancel:", "+\t\tcase OS.Pk_Escape:\t\tevent.character = 0x1B; break;", "+\t\tcase OS.Pk_KP_Tab:", "+\t\tcase OS.Pk_Tab: \tevent.character = '\\t'; break;", "+\t\t/* These keys have no mapping in SWT yet */", "+\t\tcase OS.Pk_Break:", "+\t\tcase OS.Pk_Clear:", "+\t\tcase OS.Pk_Pause:", "+\t\tcase OS.Pk_Print:", "+\t\tcase OS.Pk_Menu:", "+\t\tcase OS.Pk_Help:", "+\t\tcase OS.Pk_Hyper_L:", "+\t\tcase OS.Pk_Hyper_R:", "+\t\tcase OS.Pk_Caps_Lock:", "+\t\tcase OS.Pk_Num_Lock:", "+\t\tcase OS.Pk_Scroll_Lock:\tbreak;", "+\t\tdefault: {", "+\t\t\tif (event.keyCode == 0) {", "+\t\t\t\tif ((ke.key_flags & OS.Pk_KF_Cap_Valid) != 0) {", "+\t\t\t\t\tevent.keyCode = ke.key_cap;", "+\t\t\t\t}", "+\t\t\t\tif ((ke.key_mods & (OS.Pk_KM_Alt | OS.Pk_KM_Ctrl)) != 0) {", "+\t\t\t\t\tif ((ke.key_mods & OS.Pk_KM_Ctrl) != 0) {", "+\t\t\t\t\t\tisNull = key == '@';", "+\t\t\t\t\t\tif ('a' <= key && key <= 'z') key -= 'a' - 'A';", "+\t\t\t\t\t\tif (64 <= key && key <= 95) key -= 64;", "+\t\t\t\t\t\tevent.character = (char) key;", "+\t\t\t\t\t\tisNull &= key == 0;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tevent.character = (char) key;\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tbyte [] buffer = new byte [6];", "+\t\t\t\t\tint length = OS.PhKeyToMb (buffer, ke);", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\tchar [] unicode = Converter.mbcsToWcs (null, buffer);", "+\t\t\t\t\t\tif (unicode.length > 0) event.character = unicode [0];", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (event.keyCode == 0 && event.character == 0) {", "+\t\tif (!isNull) return false;", "+\t}", "+\treturn setInputState (event, type, ke.key_mods, ke.button_state);", "+}"]}], "num": 13597}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f28c8cb9042cfe38a1154d59f59eb172", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "321ead5383790111ece499c027e02f67", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 13, "signatureBeforeChange": " public Rectangle getBounds(int index)", "signatureAfterChange": " public Rectangle getBounds (int columnIndex)", "diff": ["- */", "-public Rectangle getBounds(int index) {", "-\tcheckWidget();", "-\tTable parent = getParent ();", "+}", "+public Rectangle getBounds (int columnIndex) {", "+\tcheckWidget ();", "-\tRectangle itemBounds;", "-\tRectangle columnBounds;", "-\tRectangle checkboxBounds;", "-\tTableColumn column;", "-\tint itemIndex = parent.indexOf(this);", "-\tint itemHeight = parent.getItemHeight();", "-\tint gridLineWidth = parent.getLinesVisible() ? parent.getGridLineWidth() : 0;", "-\tint itemYPos;", "+\tTableColumn[] columns = parent.columns;", "+\tint columnCount = columns.length;", "+\tint validColumnCount = Math.max (1, columnCount);", "+\tif (!(0 <= columnIndex && columnIndex < validColumnCount)) {", "+\t\treturn new Rectangle (0, 0, 0, 0);", "+\t}", "+\t/*", "+\t * If there are no columns then this is the bounds of the receiver's content.", "+\t */", "+\tif (columnCount == 0) {", "+\t\tint width = getContentWidth (0);", "+\t\treturn new Rectangle (", "+\t\t\tgetContentX (0),", "+\t\t\tparent.getItemY (this),", "+\t\t\twidth,", "+\t\t\tparent.itemHeight - 1);", "+\t}", "-\tif (itemIndex == -1 || index < 0 || index >= parent.internalGetColumnCount()) {", "-\t\titemBounds = new Rectangle(0, 0, 0, 0);", "+\tTableColumn column = columns [columnIndex];", "+\tif (columnIndex == 0) {", "+\t\t/* ", "+\t\t * For column 0 this is bounds from the beginning of the content to the", "+\t\t * end of the column.", "+\t\t */", "+\t\tint x = getContentX (0);", "+\t\tint offset = x - column.getX ();", "+\t\tint width = Math.max (0, column.width - offset);\t\t/* max is for columns with small widths */", "+\t\treturn new Rectangle (x, parent.getItemY (this), width, parent.itemHeight - 1);", "-\telse {", "-\t\tcolumn = parent.internalGetColumn(index);", "-\t\tcolumnBounds = column.getBounds();", "-\t\titemYPos = columnBounds.y + itemHeight * itemIndex;", "-\t\titemBounds = new Rectangle(", "-\t\t\tcolumnBounds.x, itemYPos, ", "-\t\t\tcolumnBounds.width - gridLineWidth, itemHeight - gridLineWidth);", "-\t\tif (index == TableColumn.FIRST) {", "-\t\t\tif (isCheckable() == true) {", "-\t\t\t\tcheckboxBounds = getCheckboxBounds();", "-\t\t\t\titemBounds.x = checkboxBounds.x + checkboxBounds.width + CHECKBOX_PADDING;\t// add checkbox start, width and space behind checkbox", "-\t\t\t\titemBounds.width -= itemBounds.x;", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tint imageIndent = getImageIndentPixel();", "-\t\t\t\titemBounds.x += imageIndent;", "-\t\t\t\titemBounds.width -= imageIndent;", "-\t\t\t}", "-\t\t}", "-\t}", "-\treturn itemBounds;", "+\t/*", "+\t * For columns > 0 this is the bounds of the table cell.", "+\t */", "+\treturn new Rectangle (column.getX (), parent.getItemY (this), column.width, parent.itemHeight - 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0386dffc7fa93362d76701e8a63845ce", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 7, "signatureBeforeChange": " static TableColumn createFillColumn(Table parent)", "signatureAfterChange": " void computeDisplayText (GC gc)", "diff": ["+void computeDisplayText (GC gc) {", "+\tint availableWidth = width - 2 * parent.getHeaderPadding (); ", "+\tif (image != null) {", "+\t\tavailableWidth -= image.getBounds ().width;", "+\t\tavailableWidth -= Table.MARGIN_IMAGE;", "+\t}", "+\tString text = this.text;", "+\tint textWidth = gc.textExtent (text).x;", "+\tif (textWidth <= availableWidth) {", "+\t\tdisplayText = text;", "+\t\treturn;", "+\t}", "- */", "-static TableColumn createFillColumn(Table parent) {", "-\tTableColumn fillColumn = new TableColumn(parent);", "+\t/* Ellipsis will be needed, so subtract their width from the available text width */", "+\tint ellipsisWidth = gc.textExtent (Table.ELLIPSIS).x;", "+\tavailableWidth -= ellipsisWidth;", "+\tif (availableWidth <= 0) {", "+\t\tdisplayText = Table.ELLIPSIS;", "+\t\treturn;", "+\t}", "-\tfillColumn.setIndex(FILL);", "-\treturn fillColumn;", "+\t/* Make initial guess. */", "+\tint index = availableWidth / gc.getFontMetrics ().getAverageCharWidth ();", "+\ttextWidth = gc.textExtent (text.substring (0, index)).x;", "+", "+\t/* Initial guess is correct. */", "+\tif (availableWidth == textWidth) {", "+\t\tdisplayText = text.substring (0, index) + Table.ELLIPSIS;", "+\t\treturn;", "+\t}", "+", "+\t/* Initial guess is too high, so reduce until fit is found. */", "+\tif (availableWidth < textWidth) {", "+\t\tdo {", "+\t\t\tindex--;", "+\t\t\tif (index < 0) {", "+\t\t\t\tdisplayText = Table.ELLIPSIS;", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\ttext = text.substring (0, index);", "+\t\t\ttextWidth = gc.textExtent (text).x;", "+\t\t} while (availableWidth < textWidth);", "+\t\tdisplayText = text + Table.ELLIPSIS;", "+\t\treturn;", "+\t}", "+\t", "+\t/* Initial guess is too low, so increase until overrun is found. */", "+\twhile (textWidth < availableWidth) {", "+\t\tindex++;", "+\t\ttextWidth = gc.textExtent (text.substring (0, index)).x;", "+\t}", "+\tdisplayText = text.substring (0, index - 1) + Table.ELLIPSIS;"]}], "num": 47588}
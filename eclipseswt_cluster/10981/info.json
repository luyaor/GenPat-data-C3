{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17990f55b7bd9f23010c4e6b4b63c436", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7c36c08150770987b407a914853bfcd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "9e9b22bcbb72aef5b3bb15c7ddbde8006ef6a7c8", "commitAfterChange": "2e3cc3f2343444e38d6648881ff7de0ee9aea010", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " void computeRuns (GC gc)", "signatureAfterChange": " void computeRuns (GC gc)", "diff": ["-\tint lineWidth = 0, lineStart = 0, lineCount = 1;", "+\tint lineWidth = indent, lineStart = 0, lineCount = 1;", "-\t\t\tOS.ScriptGetLogicalWidths(run.analysis, run.length, run.glyphCount, run.advances, run.clusters, run.visAttrs, piDx);", "+\t\t\tif (run.style != null && run.style.metrics != null) {", "+\t\t\t\tpiDx[0] = run.width;", "+\t\t\t} else {", "+\t\t\t\tOS.ScriptGetLogicalWidths(run.analysis, run.length, run.glyphCount, run.advances, run.clusters, run.visAttrs, piDx);", "+\t\t\t}", "-\t\t\tlineWidth = 0;", "+\t\t\tlineWidth = run.softBreak ?  0 : indent;", "-\t\t\tStyleItem lastRun = runs[line][lineRunCount - 1];", "-\t\t\truns[line] = reorder(runs[line]);", "-\t\t\tthis.lineWidth[line] = lineWidth;", "-\t\t\tlineWidth = 0;", "-\t\t\tif (wrapWidth != -1) {", "-\t\t\t\tswitch (alignment) {", "-\t\t\t\t\tcase SWT.CENTER: lineWidth = (wrapWidth - this.lineWidth[line]) / 2; break;", "-\t\t\t\t\tcase SWT.RIGHT: lineWidth = wrapWidth - this.lineWidth[line]; break;", "+\t\t\t", "+\t\t\tif (justify && wrapWidth != -1 && run.softBreak && lineWidth > 0) {", "+\t\t\t\tif (line == 0) {", "+\t\t\t\t\tlineWidth += indent;", "+\t\t\t\t} else {", "+\t\t\t\t\tStyleItem[] previousLine = runs[line - 1];", "+\t\t\t\t\tStyleItem previousRun = previousLine[previousLine.length - 1];", "+\t\t\t\t\tif (previousRun.lineBreak && !previousRun.softBreak) {", "+\t\t\t\t\t\tlineWidth += indent;", "+\t\t\t\t\t}", "+\t\t\t\tint hHeap = OS.GetProcessHeap();", "+\t\t\t\tint newLineWidth = 0;", "+\t\t\t\tfor (int j = 0; j < runs[line].length; j++) {", "+\t\t\t\t\tStyleItem item = runs[line][j];", "+\t\t\t\t\tint iDx = item.width * wrapWidth / lineWidth;", "+\t\t\t\t\tif (iDx != item.width) {", "+\t\t\t\t\t\titem.justify = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, item.glyphCount * 4);", "+\t\t\t\t\t\tOS.ScriptJustify(item.visAttrs, item.advances, item.glyphCount, iDx - item.width, 2, item.justify);", "+\t\t\t\t\t\titem.width = iDx;", "+\t\t\t\t\t}", "+\t\t\t\t\tnewLineWidth += item.width; ", "+\t\t\t\t}", "+\t\t\t\tlineWidth = newLineWidth;", "+\t\t\tthis.lineWidth[line] = lineWidth;", "+\t\t\t", "+\t\t\truns[line] = reorder(runs[line]);", "+\t\t\tStyleItem lastRun = runs[line][lineRunCount - 1];", "+\t\t\tif (run.softBreak && run != lastRun) {", "+\t\t\t\trun.softBreak = run.lineBreak = false;", "+\t\t\t\tlastRun.softBreak = lastRun.lineBreak = true;", "+\t\t\t}", "+\t\t\t", "+\t\t\tlineWidth = getLineIndent(line);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a54c1131d7124118a3d86b10ee780bc0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "0577307d31e48dc29b7c4e1d4dd5a260c1ff63d8", "commitAfterChange": "c589b83339477b9cd24d205bdab1caf2f61e909e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " void computeRuns (GC gc)", "signatureAfterChange": " void computeRuns (GC gc)", "diff": ["-\tint lineWidth = 0, lineStart = 0, lineCount = 1;", "+\tint lineWidth = indent, lineStart = 0, lineCount = 1;", "-\t\t\tOS.ScriptGetLogicalWidths(run.analysis, run.length, run.glyphCount, run.advances, run.clusters, run.visAttrs, piDx);", "+\t\t\tif (run.style != null && run.style.metrics != null) {", "+\t\t\t\tpiDx[0] = run.width;", "+\t\t\t} else {", "+\t\t\t\tOS.ScriptGetLogicalWidths(run.analysis, run.length, run.glyphCount, run.advances, run.clusters, run.visAttrs, piDx);", "+\t\t\t}", "-\t\t\tlineWidth = 0;", "+\t\t\tlineWidth = run.softBreak ?  0 : indent;", "-\t\t\tStyleItem lastRun = runs[line][lineRunCount - 1];", "-\t\t\truns[line] = reorder(runs[line]);", "-\t\t\tthis.lineWidth[line] = lineWidth;", "-\t\t\tlineWidth = 0;", "-\t\t\tif (wrapWidth != -1) {", "-\t\t\t\tswitch (alignment) {", "-\t\t\t\t\tcase SWT.CENTER: lineWidth = (wrapWidth - this.lineWidth[line]) / 2; break;", "-\t\t\t\t\tcase SWT.RIGHT: lineWidth = wrapWidth - this.lineWidth[line]; break;", "+\t\t\t", "+\t\t\t/* Justify Line */", "+\t\t\tif (justify && wrapWidth != -1 && run.softBreak && lineWidth > 0) {", "+\t\t\t\t//lineWidth += getLineIndent(line);//should not ", "+\t\t\t\tif (line == 0) {", "+\t\t\t\t\tlineWidth += indent;", "+\t\t\t\t} else {", "+\t\t\t\t\tStyleItem[] previousLine = runs[line - 1];", "+\t\t\t\t\tStyleItem previousRun = previousLine[previousLine.length - 1];", "+\t\t\t\t\tif (previousRun.lineBreak && !previousRun.softBreak) {", "+\t\t\t\t\t\tlineWidth += indent;", "+\t\t\t\t\t}", "+\t\t\t\tint hHeap = OS.GetProcessHeap();", "+\t\t\t\tint newLineWidth = 0;", "+\t\t\t\tfor (int j = 0; j < runs[line].length; j++) {", "+\t\t\t\t\tStyleItem item = runs[line][j];", "+\t\t\t\t\tint iDx = item.width * wrapWidth / lineWidth;", "+\t\t\t\t\tif (iDx != item.width) {", "+\t\t\t\t\t\titem.justify = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, item.glyphCount * 4);", "+\t\t\t\t\t\tOS.ScriptJustify(item.visAttrs, item.advances, item.glyphCount, iDx - item.width, 2, item.justify);", "+\t\t\t\t\t\titem.width = iDx;", "+\t\t\t\t\t}", "+\t\t\t\t\tnewLineWidth += item.width; ", "+\t\t\t\t}", "+\t\t\t\tlineWidth = newLineWidth;", "+\t\t\tthis.lineWidth[line] = lineWidth;", "+\t\t\t", "+\t\t\t/* Reorder the line */", "+\t\t\truns[line] = reorder(runs[line]);", "+\t\t\tStyleItem lastRun = runs[line][lineRunCount - 1];", "+\t\t\tif (run.softBreak && run != lastRun) {", "+\t\t\t\trun.softBreak = run.lineBreak = false;", "+\t\t\t\tlastRun.softBreak = lastRun.lineBreak = true;", "+\t\t\t}", "+\t\t\t", "+\t\t\t/* Save the x position for each run in the line */", "+\t\t\tlineWidth = getLineIndent(line);\t\t\t", "+\t\t\t"]}], "num": 10981}
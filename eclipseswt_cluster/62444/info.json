{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "04bb42c0d42b27d1e7b91cb4e2a5b7ff", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "023d24fa03d6a3730753d96c31aedfa5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "fe9cf8b69b05605c0699efe7aea722d3e2396198", "commitAfterChange": "a76fbcdb2bea80d2aa22d622558bd4081d9e971a", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void setText (String string)", "signatureAfterChange": " public void setText (String string)", "diff": ["+\ttext = string;", "-\tint i=0, j=0;", "-\tchar mnemonic=0;", "-\twhile (i < text.length) {", "-\t\tif ((text [j++] = text [i++]) == Mnemonic) {", "-\t\t\tif (i == text.length) {continue;}", "-\t\t\tif (text [i] == Mnemonic) {i++; continue;}", "-\t\t\tif (mnemonic == 0) mnemonic = text [i];", "-\t\t\tj--;", "-\t\t}", "-\t}", "-\twhile (j < text.length) text [j++] = 0;", "+\tchar mnemonic = fixMnemonic (text);", "-\tint ptr = OS.malloc (buffer.length);", "-\tOS.memmove (ptr, buffer, buffer.length);", "+\tint ptr1 = OS.malloc (buffer.length);", "+\tOS.memmove (ptr1, buffer, buffer.length);", "-\t\tOS.Pt_ARG_TEXT_STRING, ptr, 0,", "+\t\tOS.Pt_ARG_TEXT_STRING, ptr1, 0,", "-\tOS.free (ptr);", "+\tOS.free (ptr1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e09de9503f6d82b84bd48a906a10cda8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "fe9cf8b69b05605c0699efe7aea722d3e2396198", "commitAfterChange": "a76fbcdb2bea80d2aa22d622558bd4081d9e971a", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void setText (String string)", "signatureAfterChange": " public void setText (String string)", "diff": ["-\tchar [] unicode = new char [string.length ()];", "-\tstring.getChars (0, unicode.length, unicode, 0);", "-\tint i=0, j=0;", "-\tchar mnemonic=0;", "-\twhile (i < unicode.length) {", "-\t\tif ((unicode [j++] = unicode [i++]) == Mnemonic) {", "-\t\t\tif (i == unicode.length) {continue;}", "-\t\t\tif (unicode [i] == Mnemonic) {i++; continue;}", "-\t\t\tif (mnemonic == 0) mnemonic = unicode [i];", "-\t\t\tj--;", "-\t\t}", "-\t}", "-\twhile (j < unicode.length) unicode [j++] = 0;", "+\tchar [] text = new char [string.length ()];", "+\tstring.getChars (0, text.length, text, 0);", "+\tchar mnemonic = fixMnemonic (text);", "-\t\tif (mnemonic != '\\0') string = new String (unicode);", "-\t\tstring = display.wrapText (string, font, width);", "+\t\tstring = display.wrapText (new String (text), font, width);", "-\t\tbuffer = Converter.wcsToMbcs (null, unicode, true);", "+\t\tbuffer = Converter.wcsToMbcs (null, text, true);", "-\tint ptr = OS.malloc (buffer.length);", "-\tOS.memmove (ptr, buffer, buffer.length);", "+\tint ptr1 = OS.malloc (buffer.length);", "+\tOS.memmove (ptr1, buffer, buffer.length);", "-\t\tOS.Pt_ARG_TEXT_STRING, ptr, 0,", "+\t\tOS.Pt_ARG_TEXT_STRING, ptr1, 0,", "-\tOS.free (ptr);", "+\tOS.free (ptr1);"]}], "num": 62444}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1c0b8393c364ab0672588e7650ad94fd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed924fa57a572e0770a5fa1e943f38ed", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "de57119d4c2e8cc6936a64281ecb9753509b7457", "commitAfterChange": "66765d120ac73f3ebfa5089726061e6ce4afe259", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": " public String getText (int start, int end)", "signatureAfterChange": " public String getText (int start, int end)", "diff": ["-\tString text = getText ();", "-\tint length = text.length ();", "-\tif (length <= end) error (SWT.ERROR_INVALID_RANGE);", "-\t/*", "-\t* NOTE: The current implementation uses substring ()", "-\t* which can reference a potentially large character", "-\t* array.", "-\t*/", "-\treturn text.substring (start, end + 1);", "+\tint address;", "+\tif ((style & SWT.SINGLE) != 0) {", "+\t\taddress = OS.gtk_editable_get_chars (handle, start, end + 1);", "+\t} else {", "+\t\tbyte [] startIter =  new byte [ITER_SIZEOF];", "+\t\tbyte [] endIter =  new byte [ITER_SIZEOF];", "+\t\tOS.gtk_text_buffer_get_iter_at_offset (bufferHandle, startIter, start);", "+\t\tOS.gtk_text_buffer_get_iter_at_offset (bufferHandle, endIter, end + 1);", "+\t\taddress = OS.gtk_text_buffer_get_text (bufferHandle, startIter, endIter, true);", "+\t}", "+\tif (address == 0) return \"\";", "+\tint length = OS.strlen (address);", "+\tbyte [] buffer = new byte [length];", "+\tOS.memmove (buffer, address, length);", "+\tOS.g_free (address);", "+\treturn new String (Converter.mbcsToWcs (null, buffer));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ced54e55bbf701de24af4929b8259b3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "08ed4d34906d3cb004511badd9a3286f04d40b7a", "commitAfterChange": "3587c6fb9068182d41169c6c886f0d5faa0219e6", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 18, "signatureBeforeChange": " public TreeItem[] getSelection ()", "signatureAfterChange": " public TreeItem[] getSelection ()", "diff": ["-\tint selection = OS.GTK_CLIST_SELECTION (handle);", "-\tif (selection == 0) return new TreeItem [0];", "-\tint length = OS.g_list_length (selection);", "-\tTreeItem [] result = new TreeItem [length];", "-\tfor (int i=0; i<length; i++) {", "-\t\tint node = OS.g_list_nth_data (selection, i);", "-\t\tint index = OS.gtk_ctree_node_get_row_data (handle, node) - 1;", "-\t\tresult [i] = items [index];", "+\tTreeItem[] answer;", "+\tif ((style & SWT.MULTI) != 0) {", "+\t\t/*", "+\t\t * Multi-selection case", "+\t\t */", "+\t\tselSize = 0;", "+\t\tselIndices = new int[items.length];", "+\t\tint selection = OS.gtk_tree_view_get_selection(handle);", "+\t\tOS.gtk_tree_selection_selected_foreach(selection, getDisplay().selectionIterProc, handle);", "+\t\tanswer = new TreeItem[selSize];", "+\t\tfor (int i=0; i<selSize; i++) answer[i] = items[selIndices[i]];", "+\t} else {", "+\t\t/*", "+\t\t * Single-selection case", "+\t\t */", "+\t\tint iter = OS.g_malloc(OS.GtkTreeIter_sizeof());", "+\t\tint selection = OS.gtk_tree_view_get_selection(handle);", "+\t\tboolean hasSelection = OS.gtk_tree_selection_get_selected(selection, null, iter);", "+\t\tif (hasSelection) {", "+\t\t\tint[] index = new int[1];", "+\t\t\tOS.gtk_tree_model_get(modelHandle, iter, 4, index, -1);", "+\t\t\tanswer = new TreeItem[1];", "+\t\t\tanswer[0] = items[index[0]];", "+\t\t} else {", "+\t\t\tanswer = new TreeItem[0];", "+\t\t}", "+\t\tOS.g_free(iter);", "-\treturn result;", "+\treturn answer;"]}], "num": 43490}
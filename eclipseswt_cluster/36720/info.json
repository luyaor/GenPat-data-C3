{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9a12796790645f19b76ce934e0dfa38b", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "354ff600d856b47c9ec4fe1b9b1a025c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "f6897dc51677bc8983438d20d42a8be57e2f89ea", "commitAfterChange": "027efea8497c499c5a154aa88f5be4f3d2c3ef88", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  int EnumFontFamProc (int lpelfe, int lpntme, int FontType, int lParam)", "signatureAfterChange": "  int EnumFontFamProc (int lpelfe, int lpntme, int FontType, int lParam)", "diff": ["+\t\t\tint[] newPixels = new int[newLogFonts.length];", "+\t\t\tSystem.arraycopy (pixels, 0, newPixels, 0, nFonts);", "+\t\t\tpixels = newPixels;", "-\t\tlogFonts [nFonts++] = logFont;", "+\t\tlogFonts [nFonts] = logFont;", "+\t\tif (logFont.lfHeight > 0) {", "+\t\t\t/*", "+\t\t\t * Feature in Windows. If the lfHeight of the LOGFONT structure", "+\t\t\t * is positive, the lfHeight measures the height of the entire", "+\t\t\t * cell, including internal leading, in logical units. Since the", "+\t\t\t * height of a font in points does not include the internal leading,", "+\t\t\t * we must subtract the internal leading, which requires a TEXTMETRIC,", "+\t\t\t * which in turn requires font creation.", "+\t\t\t */", "+\t\t\tOS.MoveMemory(metrics, lpntme, TEXTMETRIC.sizeof);", "+\t\t\tpixels[nFonts] = logFont.lfHeight - metrics.tmInternalLeading;", "+\t\t} else {", "+\t\t\tpixels[nFonts] = -logFont.lfHeight;", "+\t\t}", "+\t\tnFonts++;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97dc51f646f9fee034a4fc9d3ad2593a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "b2a57ac5aeda1a37b1c7d7c906ff837c3c7313d8", "commitAfterChange": "f3828846066629968a44d377ba246bddf80a917b", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 48, "signatureBeforeChange": "\r \t\r \tint get_accChildCount(int pcountChildren)", "signatureAfterChange": "\r \t\r \tint get_accChildCount(int pcountChildren)", "diff": ["-\t\tif (accessibleControlListeners.size() == 0) {\r", "-\t\t\treturn iaccessible.get_accChildCount(pcountChildren);\r", "+\t\tif (iaccessible == null) return COM.CO_E_OBJNOTCONNECTED;\r", "+\r", "+\t\t/* Get the default child count from the OS. */\r", "+\t\tint osChildCount = 0;\r", "+\t\tint code = iaccessible.get_accChildCount(pcountChildren);\r", "+\t\tif (accessibleControlListeners.size() == 0) return code;\r", "+\t\tif (code == COM.S_OK) {\r", "+\t\t\tint[] pChildCount = new int[1];\r", "+\t\t\tCOM.MoveMemory(pChildCount, pcountChildren, 4);\r", "+\t\t\tosChildCount = pChildCount[0];\r", "+\t\tevent.childID = ACC.CHILDID_SELF;\r", "+\t\tevent.detail = osChildCount;\r"]}], "num": 36720}
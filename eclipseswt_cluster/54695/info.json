{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d9c1a6dc6fc977294e74b4ca81a33953", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "411bc97890ded28157dbafef332d51b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 49, "signatureBeforeChange": " int processMouseDown (MacMouseEvent mmEvent)", "signatureAfterChange": "  void updateText ()", "diff": ["-}", "-int processMouseDown (MacMouseEvent mmEvent) {", "-\tDisplay display = getDisplay ();", "-//\tShell shell = parent.getShell ();", "-\tdisplay.hideToolTip ();", "-\t", "-\t/* AW", "-\tXButtonEvent xEvent = new XButtonEvent ();", "-\tOS.memmove (xEvent, callData, XButtonEvent.sizeof);", "-\t*/", "-\tif (mmEvent.getButton() == 1) {", "-\t\tif (!set && (style & SWT.RADIO) == 0) {", "-\t\t\tsetDrawPressed (!set);", "-\t\t}", "-\t}", "-\t", "-\t/*", "-\t* Forward the mouse event to the parent.", "-\t* This is necessary so that mouse listeners", "-\t* in the parent will be called, despite the", "-\t* fact that the event did not really occur", "-\t* in X in the parent.  This is done to be", "-\t* compatible with Windows.", "-\t*/", "-\t/* AW", "-\tint [] argList = {OS.XmNx, 0, OS.XmNy, 0};", "-\tOS.XtGetValues (handle, argList, argList.length / 2);", "-\txEvent.window = OS.XtWindow (parent.handle);", "-\txEvent.x += argList [1];  xEvent.y += argList [3];", "-\tOS.memmove (callData, xEvent, XButtonEvent.sizeof);", "-\t*/", "-\tparent.processMouseDown (mmEvent);", "-\t/*", "-\t* It is possible that the shell may be", "-\t* disposed at this point.  If this happens", "-\t* don't send the activate and deactivate", "-\t* events.", "-\t*/\t", "-//\tif (!shell.isDisposed()) {", "-//\t\tshell.setActiveControl (parent);", "-//\t}", "-\treturn 0;", "-}", "+", "+void updateText () {", "+\tif (labelCIcon != 0) destroyCIcon (labelCIcon);", "+\tlabelCIcon = 0;", "+\tControlButtonContentInfo inContent = new ControlButtonContentInfo ();", "+\tif (text.length () > 0) {", "+\t\tchar [] buffer = new char [text.length ()];", "+\t\ttext.getChars (0, buffer.length, buffer, 0);", "+\t\tint i=0, j=0;", "+\t\twhile (i < buffer.length) {", "+\t\t\tif ((buffer [j++] = buffer [i++]) == Mnemonic) {", "+\t\t\t\tif (i == buffer.length) {continue;}", "+\t\t\t\tif (buffer [i] == Mnemonic) {i++; continue;}", "+\t\t\t\tj--;", "+\t\t\t}", "+\t\tFont font = parent.getFont ();", "+\t\tGC gc = new GC (parent);", "+\t\tPoint size = gc.stringExtent (text);", "+\t\tgc.dispose ();", "+\t\tDisplay display = getDisplay ();", "+\t\tImage image = new Image (display, size.x, size.y);", "+\t\tgc = new GC (image);", "+\t\tgc.setFont (font);", "+\t\tgc.drawString (text, 0, 0);", "+\t\tgc.dispose ();", "+\t\tImageData data = image.getImageData ();", "+\t\tdata.transparentPixel = 0xFFFFFFFF;", "+\t\timage.dispose ();", "+\t\timage = new Image (display, data, data.getTransparencyMask());", "+\t\tlabelCIcon = createCIcon (image);", "+\t\timage.dispose ();", "+\t\tinContent.contentType = (short) OS.kControlContentCIconHandle;", "+\t\tinContent.iconRef = labelCIcon;", "+\tOS.SetBevelButtonContentInfo (labelHandle, inContent);\t", "+\tredrawWidget (labelHandle);", "+\tPoint size = computeSize ();", "+\tsetSize (size.x, size.y, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af89860596aa9f89ed6d6bc80e5eb07b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 143, "signatureBeforeChange": "\r int processMouseDown (int callData)", "signatureAfterChange": "\r int XButtonPress (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processMouseDown (int callData) {\r", "-\tDisplay display = getDisplay ();\r", "-\tShell shell = getShell ();\r", "-\tdisplay.hideToolTip ();\r", "-\tXButtonEvent xEvent = new XButtonEvent ();\r", "-\tOS.memmove (xEvent, callData, XButtonEvent.sizeof);\r", "-\tsendMouseEvent (SWT.MouseDown, xEvent.button, xEvent);\r", "-\tif (xEvent.button == 2 && hooks (SWT.DragDetect)) {\r", "-\t\tpostEvent (SWT.DragDetect);\r", "-\t}\r", "-\tif (xEvent.button == 3 && menu != null) {\r", "-\t\tsetFocus ();\r", "-//\t\tmenu.setLocation (xEvent.x_root, xEvent.y_root);\r", "-\t\tmenu.setVisible (true);\r", "-\t}\r", "-\tint clickTime = display.getDoubleClickTime ();\r", "-\tint lastTime = display.lastTime, eventTime = xEvent.time;\r", "-\tint lastButton = display.lastButton, eventButton = xEvent.button;\r", "-\tif (lastButton == eventButton && lastTime != 0 && Math.abs (lastTime - eventTime) <= clickTime) {\r", "-\t\tsendMouseEvent (SWT.MouseDoubleClick, eventButton, xEvent);\r", "-\t}\r", "-\tdisplay.lastTime = eventTime == 0 ? 1 : eventTime;\r", "-\tdisplay.lastButton = eventButton;\r", "-\t\r", "-\t/*\r", "-\t* It is possible that the shell may be\r", "-\t* disposed at this point.  If this happens\r", "-\t* don't send the activate and deactivate\r", "-\t* events.\r", "-\t*/\t\r", "-\tif (!shell.isDisposed ()) {\r", "-\t\tshell.setActiveControl (this);\r", "-\t}\r", "-\treturn 0;\r", "-}\r", "+int XButtonPress (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tDisplay display = getDisplay ();\r", "+\tShell shell = getShell ();\r", "+\tdisplay.hideToolTip ();\r", "+\tXButtonEvent xEvent = new XButtonEvent ();\r", "+\tOS.memmove (xEvent, call_data, XButtonEvent.sizeof);\r", "+\tsendMouseEvent (SWT.MouseDown, xEvent.button, xEvent);\r", "+\tif (xEvent.button == 2 && hooks (SWT.DragDetect)) {\r", "+\t\tpostEvent (SWT.DragDetect);\r", "+\t}\r", "+\tif (xEvent.button == 3 && menu != null) {\r", "+\t\tsetFocus ();\r", "+//\t\tmenu.setLocation (xEvent.x_root, xEvent.y_root);\r", "+\t\tmenu.setVisible (true);\r", "+\t}\r", "+\tint clickTime = display.getDoubleClickTime ();\r", "+\tint lastTime = display.lastTime, eventTime = xEvent.time;\r", "+\tint lastButton = display.lastButton, eventButton = xEvent.button;\r", "+\tif (lastButton == eventButton && lastTime != 0 && Math.abs (lastTime - eventTime) <= clickTime) {\r", "+\t\tsendMouseEvent (SWT.MouseDoubleClick, eventButton, xEvent);\r", "+\t}\r", "+\tdisplay.lastTime = eventTime == 0 ? 1 : eventTime;\r", "+\tdisplay.lastButton = eventButton;\r", "+\t\r", "+\t/*\r", "+\t* It is possible that the shell may be\r", "+\t* disposed at this point.  If this happens\r", "+\t* don't send the activate and deactivate\r", "+\t* events.\r", "+\t*/\t\r", "+\tif (!shell.isDisposed ()) {\r", "+\t\tshell.setActiveControl (this);\r", "+\t}\r", "+\treturn 0;\r", "+}\r"]}], "num": 54695}
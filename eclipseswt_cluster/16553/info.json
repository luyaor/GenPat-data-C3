{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ed0e894b3424ab5caa2296bf5422dbca", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c63468935ccff218ad4a8850428316b4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "09f6d18cc5e2837c50c709dcd8bf3f7347cf409a", "commitAfterChange": "baf3ed865f39b991591bba6f2bf2a1931cf6633c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public FontData[] getFontList (String faceName, boolean scalable)", "signatureAfterChange": " public FontData[] getFontList (String faceName, boolean scalable)", "diff": ["-public FontData[] getFontList (String faceName, boolean scalable) {\t", "+public FontData[] getFontList (String faceName, boolean scalable) {", "-\t//NOT DONE - scalable", "-\tint nFds = 0;", "-\tFontData[] fds = new FontData[4];", "-", "-\tint[] font = new int[1];", "-\tshort[] fontFamily = new short[1];", "+\tif (!scalable) return new FontData[0];", "-\tshort[] size = new short[1];", "-\tbyte[] buffer = new byte[256];", "-\tint familyIter = OS.NewPtr(16 * 4);", "-\tint fontIter = OS.NewPtr(16 * 4);", "-\tOS.FMCreateFontFamilyIterator(0, 0, 0, familyIter);", "-\twhile (OS.FMGetNextFontFamily(familyIter, fontFamily) != OS.kFMIterationCompleted) {", "-\t\tOS.FMGetFontFamilyName(fontFamily[0], buffer);", "-\t\tint length = buffer[0] & 0xFF;", "-\t\tchar[] chars = new char[length];", "-\t\tfor (int i=0; i<length; i++) {", "-\t\t\tchars[i]= (char)buffer[i+1];", "-\t\t}", "-\t\tString name = new String(chars);", "+\tshort[] family = new short[1];", "+\tint[] fontCount = new int[1];", "+\tint[] actualLength = new int[1];", "+\tOS.ATSUGetFontIDs(null, 0, fontCount);", "+\tint[] fontIDs = new int[fontCount[0]];", "+\tOS.ATSUGetFontIDs(fontIDs, fontIDs.length, fontCount);", "+\tFontData[] fds = new FontData[fontCount[0]];", "+\tfor (int i=0; i<fds.length; i++) {", "+\t\tint fontID = fontIDs[i];", "+\t\tOS.ATSUFindFontName(fontID, OS.kFontFamilyName, OS.kFontNoPlatformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, 0, null, actualLength, null);", "+\t\tbyte[] buffer = new byte[actualLength[0]];", "+\t\tOS.ATSUFindFontName(fontID, OS.kFontFamilyName, OS.kFontNoPlatformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, buffer.length, buffer, actualLength, null);", "+\t\tString name = new String(buffer);", "-\t\t\tOS.FMCreateFontFamilyInstanceIterator(fontFamily[0], fontIter);", "-\t\t\twhile (OS.FMGetNextFontFamilyInstance(fontIter, font, style, size) != OS.kFMIterationCompleted) {", "-\t\t\t\tint s = SWT.NORMAL;", "-\t\t\t\tif ((style[0] & OS.italic) != 0) s |= SWT.ITALIC;", "-\t\t\t\tif ((style[0] & OS.bold) != 0) s |= SWT.BOLD;", "-\t\t\t\tFontData data = new FontData(name, s, size[0]);", "-\t\t\t\tif (nFds == fds.length) {", "-\t\t\t\t\tFontData[] newFds = new FontData[fds.length + 4];", "-\t\t\t\t\tSystem.arraycopy(fds, 0, newFds, 0, nFds);", "-\t\t\t\t\tfds = newFds;", "-\t\t\t\t}", "-\t\t\t\tfds[nFds++] = data;", "-\t\t\t}", "-\t\t\tOS.FMDisposeFontFamilyInstanceIterator(fontIter);", "+\t\t\tOS.FMGetFontFamilyInstanceFromFont(fontID, family, style);", "+\t\t\tint s = SWT.NORMAL;", "+\t\t\tif ((style[0] & OS.italic) != 0) s |= SWT.ITALIC;", "+\t\t\tif ((style[0] & OS.bold) != 0) s |= SWT.BOLD;", "+\t\t\tFontData data = new FontData(name, 0, s);", "+\t\t\tfds[i] = data;", "-\tOS.FMDisposeFontFamilyIterator(familyIter);", "-\tOS.DisposePtr(familyIter);", "-\tOS.DisposePtr(fontIter);", "-\t", "-\tif (nFds == fds.length) return fds;", "-\tFontData[] result = new FontData[nFds];", "-\tSystem.arraycopy(fds, 0, result, 0, nFds);", "-\treturn result;", "+\treturn fds;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "230a3f0a71559d8774a3715623d54165", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "1acd89a2d1e085725362a748b0102b8318356ef1", "commitAfterChange": "600117323003db9ea522ed0baf12ee909172c3dc", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "signatureAfterChange": "  void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "diff": ["-\t\t/*", "-\t\t* Feature in Windows.  AlphaBlend() alters the alpha", "-\t\t* channel if the destination is a 32 bit depth bitmap.", "-\t\t* The fix is to draw to a temporary 24 bit depth bitmap", "-\t\t* first and then draw the temporary bitmap.", "-\t\t*/", "-\t\tboolean fixAlpha = false;", "-\t\tint dstBitmap = OS.GetCurrentObject(handle, OS.OBJ_BITMAP);", "-\t\tif (dstBitmap != 0) {", "-\t\t\tBITMAP dstBM = new BITMAP();", "-\t\t\tOS.GetObject(dstBitmap, BITMAP.sizeof, dstBM);", "-\t\t\tfixAlpha = dstBM.bmPlanes * dstBM.bmBitsPixel == 32;", "-\t\t}", "-\t\tint dstDib = 0, oldDstBitmap = 0, dstHdc = handle, dstX = destX, dstY = destY;", "-\t\tif (fixAlpha) {", "-\t\t\tdstDib = Image.createDIB(destWidth, destHeight, 24);", "-\t\t\tif (dstDib == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\tdstHdc = OS.CreateCompatibleDC(handle);", "-\t\t\toldDstBitmap = OS.SelectObject(dstHdc, dstDib);", "-\t\t\tOS.BitBlt(dstHdc, 0, 0, destWidth, destHeight, handle, destX, destY, OS.SRCCOPY);", "-\t\t\tdstX = dstY = 0;", "-\t\t}", "-\t\t\tOS.AlphaBlend(dstHdc, dstX, dstY, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, blend);", "+\t\t\tOS.AlphaBlend(handle, destX, destY, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, blend);", "-\t\t\t\t\tsrcData[sp+0] = (byte)((srcData[sp+0] & 0xff) * alpha / 255);", "-\t\t\t\t\tsrcData[sp+1] = (byte)((srcData[sp+1] & 0xff) * alpha / 255);", "-\t\t\t\t\tsrcData[sp+2] = (byte)((srcData[sp+2] & 0xff) * alpha / 255);", "+\t\t\t\t\tint r = ((srcData[sp + 0] & 0xFF) * alpha) + 128;", "+\t\t\t\t\tr = (r + (r >> 8)) >> 8;", "+\t\t\t\t\tint g = ((srcData[sp + 1] & 0xFF) * alpha) + 128;", "+\t\t\t\t\tg = (g + (g >> 8)) >> 8;", "+\t\t\t\t\tint b = ((srcData[sp + 2] & 0xFF) * alpha) + 128;", "+\t\t\t\t\tb = (b + (b >> 8)) >> 8;\t\t\t\t\t\t\t\t", "+\t\t\t\t\tsrcData[sp+0] = (byte)r;", "+\t\t\t\t\tsrcData[sp+1] = (byte)g;", "+\t\t\t\t\tsrcData[sp+2] = (byte)b;", "-\t\t\tOS.AlphaBlend(dstHdc, dstX, dstY, destWidth, destHeight, memHdc, 0, 0, srcWidth, srcHeight, blend);", "+\t\t\tOS.AlphaBlend(handle, destX, destY, destWidth, destHeight, memHdc, 0, 0, srcWidth, srcHeight, blend);", "-\t\t}", "-\t\tif (fixAlpha) {", "-\t\t\tOS.BitBlt(handle, destX, destY, destWidth, destHeight, dstHdc, 0, 0, OS.SRCCOPY);", "-\t\t\tOS.SelectObject(dstHdc, oldDstBitmap);", "-\t\t\tOS.DeleteDC(dstHdc);", "-\t\t\tOS.DeleteObject(dstDib);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b1177c21fae94aa999d2a98f0d251695", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "dfd4650fd75100a5a002cab81ff3277b16862845", "commitAfterChange": "d01fac9d213e0fa304edfed85d0f0844e9d59792", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 41, "signatureBeforeChange": " public void fillGradientRectangle(int x, int y, int width, int height, boolean vertical)", "signatureAfterChange": " public void fillGradientRectangle(int x, int y, int width, int height, boolean vertical)", "diff": ["-\tint fromColor = OS.GetTextColor(handle);", "-\tif (fromColor == OS.CLR_INVALID) {", "-\t\tfromColor = OS.GetSysColor(OS.COLOR_WINDOWTEXT);", "-\t}", "-\tint toColor = OS.GetBkColor(handle);", "-\tif (toColor == OS.CLR_INVALID) {", "-\t\ttoColor = OS.GetSysColor(OS.COLOR_WINDOW);", "-\t}", "+", "+\tRGB backgroundRGB, foregroundRGB;", "+\tbackgroundRGB = getBackground().getRGB();", "+\tforegroundRGB = getForeground().getRGB();", "+", "+\tRGB fromRGB, toRGB;", "+\tfromRGB = foregroundRGB;", "+\ttoRGB   = backgroundRGB;", "+", "-\t\tfinal int t = fromColor;", "-\t\tfromColor = toColor;", "-\t\ttoColor = t;", "+\t\tfromRGB = backgroundRGB;", "+\t\ttoRGB   = foregroundRGB;", "-\tint rop2 = 0;", "-\tif (OS.IsWinCE) {", "-\t\trop2 = OS.SetROP2(handle, OS.R2_COPYPEN);", "-\t\tOS.SetROP2(handle, rop2);", "-\t} else {", "-\t\trop2 = OS.GetROP2(handle);", "-\t}", "-\tfinal RGB fromRGB = new RGB(fromColor & 0xff, (fromColor >>> 8) & 0xff, (fromColor >>> 16) & 0xff);", "-\tfinal RGB toRGB = new RGB(toColor & 0xff, (toColor >>> 8) & 0xff, (toColor >>> 16) & 0xff);\t", "-\tif (fromRGB.red == toRGB.red && fromRGB.green == toRGB.green && fromRGB.blue == toRGB.blue) {", "-\t\tif (data.gdipGraphics != 0) { ", "-\t\t\tinitGdip(false, true);", "-\t\t\tGdip.Graphics_FillRectangle(data.gdipGraphics, data.gdipBrush, x, y, width, height);", "-\t\t} else {", "-\t\t\tint dwRop = rop2 == OS.R2_XORPEN ? OS.PATINVERT : OS.PATCOPY;", "-\t\t\tOS.PatBlt(handle, x, y, width, height, dwRop);", "-\t\t}", "+\tif (fromRGB.equals(toRGB)) {", "+\t\tfillRectangle(x, y, width, height);", "-\t\tinitGdip(false, true);", "+\t\tinitGdip();", "-\t\tint rgb = ((fromColor >> 16) & 0xFF) | (fromColor & 0xFF00) | ((fromColor & 0xFF) << 16);", "+\t\tint rgb = ((fromRGB.red & 0xFF) << 16) | ((fromRGB.green & 0xFF) << 8) | (fromRGB.blue & 0xFF);", "-\t\trgb = ((toColor >> 16) & 0xFF) | (toColor & 0xFF00) | ((toColor & 0xFF) << 16);", "+\t\trgb = ((toRGB.red & 0xFF) << 16) | ((toRGB.green & 0xFF) << 8) | (toRGB.blue & 0xFF);", "+\tint rop2 = 0;", "+\tif (OS.IsWinCE) {", "+\t\trop2 = OS.SetROP2(handle, OS.R2_COPYPEN);", "+\t\tOS.SetROP2(handle, rop2);", "+\t} else {", "+\t\trop2 = OS.GetROP2(handle);", "+\t}"]}], "num": 16553}
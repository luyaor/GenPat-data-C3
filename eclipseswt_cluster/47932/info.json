{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fccf8391c76fbf517966c64306fe18e2", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a8e154478f8dddb3cf5fbb059ec9b8b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGeneratorAppUI.java", "commitBeforeChange": "538267cb94137fcc12876cd1d12be54cf7685c40", "commitAfterChange": "e66b3ab5b69ccfced123b97aa21b24b29ad00f29", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  void createClassesPanel(Composite panel)", "signatureAfterChange": "  void createClassesPanel(Composite panel)", "diff": ["+\tcolumn = new TableColumn(classesLt, SWT.NONE, CLASS_FLAGS_COLUMN);", "+\tcolumn.setText(\"Flags\");", "+\t", "+\tclassTextEditor = new TableEditor(classesLt);", "+\tclassTextEditor.grabHorizontal = true;", "+\tclassEditorTx = new Text(classesLt, SWT.SINGLE);", "+\tclassTextEditor.setEditor(classEditorTx);", "+\tListener classTextListener = new Listener() {", "+\t\tpublic void handleEvent(Event e) {", "+\t\t\tclassEditorTx.setVisible(false);", "+\t\t\tTableItem item = classTextEditor.getItem();", "+\t\t\tif (item == null) return;", "+\t\t\tint column = classTextEditor.getColumn();", "+\t\t\tClassData classData = (ClassData)item.getData();", "+\t\t\tif (column == CLASS_EXCLUDE_COLUMN) {", "+\t\t\t\tString text = classEditorTx.getText();", "+\t\t\t\tclassData.setExclude(text);", "+\t\t\t\titem.setText(column, classData.getExclude());", "+\t\t\t\tMetaData metaData = app.getMetaData();", "+\t\t\t\tmetaData.setMetaData(classData.getClazz(), classData);", "+\t\t\t\tclassesLt.getColumn(column).pack();", "+\t\t\t}", "+\t\t}", "+\t};", "+\tclassEditorTx.addListener(SWT.DefaultSelection, classTextListener);", "+\tclassEditorTx.addListener(SWT.FocusOut, classTextListener);", "+\t", "+\tclassListEditor = new TableEditor(classesLt);", "+\tclassEditorLt = new List(classesLt, SWT.MULTI | SWT.BORDER);", "+\tclassEditorLt.setItems(ClassData.getAllFlags());", "+\tPoint size = classEditorLt.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\tclassListEditor.minimumWidth = size.x;", "+\tclassListEditor.minimumHeight = size.y;", "+\tclassListEditor.setEditor(classEditorLt);", "+\tListener classesListListener = new Listener() {", "+\t\tpublic void handleEvent(Event e) {", "+\t\t\tclassEditorLt.setVisible(false);", "+\t\t\tTableItem item = classListEditor.getItem();", "+\t\t\tif (item == null) return;", "+\t\t\tint column = classListEditor.getColumn();", "+\t\t\tClassData classData = (ClassData)item.getData();", "+\t\t\tif (column == CLASS_FLAGS_COLUMN) {", "+\t\t\t\tString[] flags = classEditorLt.getSelection();", "+\t\t\t\tclassData.setFlags(flags);", "+\t\t\t\titem.setText(column, getFlagsString(classData.getFlags()));", "+\t\t\t\titem.setChecked(classData.isGenerate());", "+\t\t\t\tMetaData metaData = app.getMetaData();", "+\t\t\t\tmetaData.setMetaData(classData.getClazz(), classData);", "+\t\t\t\tclassesLt.getColumn(column).pack();", "+\t\t\t}", "+\t\t}", "+\t};", "+\tclassEditorLt.addListener(SWT.DefaultSelection, classesListListener);", "+\tclassEditorLt.addListener(SWT.FocusOut, classesListListener);", "+", "+\tclassesLt.addListener(SWT.MouseDown, new Listener() {", "+\t\tpublic void handleEvent(Event e) {", "+\t\t\tif (e.button != 1) return;", "+\t\t\tPoint pt = new Point(e.x, e.y);", "+\t\t\tTableItem item = classesLt.getItem(pt);", "+\t\t\tif (item == null) return;", "+\t\t\tint column = -1;", "+\t\t\tfor (int i = 0; i < classesLt.getColumnCount(); i++) {", "+\t\t\t\tif (item.getBounds(i).contains(pt)) {", "+\t\t\t\t\tcolumn = i;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}\t\t\t\t", "+\t\t\t}", "+\t\t\tif (column == -1) return;", "+\t\t\tClassData data = (ClassData)item.getData();", "+\t\t\tif (column == CLASS_EXCLUDE_COLUMN) {", "+\t\t\t\tclassTextEditor.setColumn(column);", "+\t\t\t\tclassTextEditor.setItem(item);", "+\t\t\t\tclassEditorTx.setText(data.getExclude());", "+\t\t\t\tclassEditorTx.selectAll();", "+\t\t\t\tclassEditorTx.setVisible(true);", "+\t\t\t\tclassEditorTx.setFocus();", "+\t\t\t} else if (column == CLASS_FLAGS_COLUMN) {", "+\t\t\t\tif (classesLt.getClientArea().contains(pt.x, pt.y + classEditorLt.getSize().y)) {", "+\t\t\t\t\tclassListEditor.verticalAlignment = SWT.TOP;", "+\t\t\t\t} else {", "+\t\t\t\t\tclassListEditor.verticalAlignment = SWT.BOTTOM;", "+\t\t\t\t}", "+\t\t\t\tclassListEditor.setColumn(column);", "+\t\t\t\tclassListEditor.setItem(item);", "+\t\t\t\tclassEditorLt.setSelection(data.getFlags());", "+\t\t\t\tclassEditorLt.setVisible(true);", "+\t\t\t\tclassEditorLt.setFocus();", "+\t\t\t}", "+\t\t}", "+\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "415a3b27ca77147e57fc3bbc8ec46231", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/Tab.java", "commitBeforeChange": "2cc7d30698448c6df09a70c69839e5a3830f9bc0", "commitAfterChange": "ca8346412189df48223ba59c33b21708729a1c0e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": " \tvoid createChildGroup ()", "signatureAfterChange": " \tvoid createChildGroup()", "diff": ["-\tvoid createChildGroup () {", "-\t\tchildGroup = new Group (controlGroup, SWT.NONE);", "-\t\tchildGroup.setText (LayoutExample.getResourceString(\"Children\"));", "-\t\tGridLayout layout = new GridLayout ();", "-\t\tlayout.numColumns = 3;", "-\t\tchildGroup.setLayout (layout);", "-\t\tGridData data = new GridData (GridData.FILL_BOTH);", "-\t\tdata.horizontalSpan = 2;", "-\t\tchildGroup.setLayoutData (data); ", "-\t\tcreateChildWidgets ();", "+\tvoid createChildGroup() {", "+\t\tchildGroup = new Group(controlGroup, SWT.NONE);", "+\t\tchildGroup.setText(LayoutExample.getResourceString(\"Children\"));", "+\t\tchildGroup.setLayout(new GridLayout());", "+\t\tchildGroup.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true, 2, 1)); ", "+", "+\t\tToolBar toolBar = new ToolBar(childGroup, SWT.FLAT);\t", "+\t\ttoolBar.setLayoutData(new GridData(SWT.CENTER, SWT.CENTER, false, false));", "+\t\tadd = new ToolItem(toolBar, SWT.DROP_DOWN);", "+\t\tadd.setText(LayoutExample.getResourceString(\"Add\"));\t", "+\t\tnew ToolItem(toolBar,SWT.SEPARATOR);", "+", "+\t\tdelete = new ToolItem(toolBar, SWT.PUSH);", "+\t\tdelete.setText(LayoutExample.getResourceString(\"Delete\"));", "+\t\tdelete.addSelectionListener(new SelectionAdapter() {", "+\t\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\t\tresetEditors();", "+\t\t\t\tint [] selected = table.getSelectionIndices();", "+\t\t\t\ttable.remove (selected);", "+\t\t\t\t/* Refresh the control indices of the table */", "+\t\t\t\tfor(int i = 0; i < table.getItemCount(); i++) {", "+\t\t\t\t\tTableItem item = table.getItem(i);", "+\t\t\t\t\titem.setText (0, item.getText(0));", "+\t\t\t\t}", "+\t\t\t\trefreshLayoutComposite();", "+\t\t\t\tlayoutComposite.layout(true);", "+\t\t\t\tlayoutGroup.layout(true);", "+\t\t\t}", "+\t\t});", "+\t\t", "+\t\tnew ToolItem(toolBar,SWT.SEPARATOR);", "+\t\tclear = new ToolItem(toolBar, SWT.PUSH);", "+\t\tclear.setText(LayoutExample.getResourceString(\"Clear\"));", "+\t\tclear.addSelectionListener(new SelectionAdapter() {", "+\t\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\t\tresetEditors();", "+\t\t\t\tchildren = layoutComposite.getChildren();", "+\t\t\t\tfor(int i = 0; i < children.length; i++) {", "+\t\t\t\t\tchildren[i].dispose();", "+\t\t\t\t}", "+\t\t\t\ttable.removeAll();", "+\t\t\t\tdata.clear();", "+\t\t\t\tchildren = new Control[0];", "+\t\t\t\tlayoutGroup.layout(true);", "+\t\t\t}", "+\t\t});", "+\t\ttoolBar.pack();", "+\t\t", "+\t\tnew ToolItem(toolBar,SWT.SEPARATOR);", "+\t\tcode = new ToolItem(toolBar, SWT.PUSH);", "+\t\tcode.setText(LayoutExample.getResourceString (\"Generate_Code\"));", "+\t\tcode.addSelectionListener(new SelectionAdapter() {", "+\t\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\t\tfinal Shell shell = new Shell();\t", "+\t\t\t\tshell.setText(LayoutExample.getResourceString(\"Generated_Code\"));", "+\t\t\t\tshell.setLayout(new FillLayout());", "+\t\t\t\tfinal Text text = new Text(shell, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL);", "+\t\t\t\tString layoutCode = generateCode().toString ();", "+\t\t\t\tif(layoutCode.length() == 0) return;", "+\t\t\t\ttext.setText(layoutCode);", "+\t\t\t\t", "+\t\t\t\tMenu bar = new Menu(shell, SWT.BAR);", "+\t\t\t\tshell.setMenuBar(bar);", "+\t\t\t\tMenuItem editItem = new MenuItem(bar, SWT.CASCADE);", "+\t\t\t\teditItem.setText(LayoutExample.getResourceString(\"Edit\"));", "+\t\t\t\tMenu menu = new Menu(bar);", "+\t\t\t\tMenuItem select = new MenuItem(menu, SWT.PUSH);", "+\t\t\t\tselect.setText(LayoutExample.getResourceString(\"Select_All\"));", "+\t\t\t\tselect.setAccelerator(SWT.MOD1 + 'A');", "+\t\t\t\tselect.addSelectionListener(new SelectionAdapter() {", "+\t\t\t\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\t\t\t\ttext.selectAll();", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t\tMenuItem copy = new MenuItem(menu, SWT.PUSH);", "+\t\t\t\tcopy.setText(LayoutExample.getResourceString(\"Copy\"));", "+\t\t\t\tcopy.setAccelerator(SWT.MOD1 + 'C');", "+\t\t\t\tcopy.addSelectionListener(new SelectionAdapter() {", "+\t\t\t\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\t\t\t\ttext.copy();", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t\tMenuItem exit = new MenuItem(menu, SWT.PUSH);", "+\t\t\t\texit.setText(LayoutExample.getResourceString(\"Exit\"));", "+\t\t\t\texit.addSelectionListener(new SelectionAdapter() {", "+\t\t\t\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\t\t\t\tshell.close();", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t\teditItem.setMenu(menu);", "+\t\t\t\t", "+\t\t\t\tshell.pack();", "+\t\t\t\tshell.setSize(400, 500);", "+\t\t\t\tshell.open();", "+\t\t\t\tDisplay display = shell.getDisplay();", "+\t\t\t\twhile(!shell.isDisposed())", "+\t\t\t\t\tif(!display.readAndDispatch()) display.sleep();", "+\t\t\t}", "+\t\t});", "+\t", "+\t\tcreateChildWidgets();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a8ec7afa3e9317d77a305f4c1a2b167", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGeneratorUI.java", "commitBeforeChange": "8ed739aeb6bdf363f7b0e5c8d1e2c8f2b47241eb", "commitAfterChange": "37dd049635a9e27d1a8ac8a9fdb6deee1a837896", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  \tpublic void open()", "signatureAfterChange": " \t \tpublic void open()", "diff": ["-", "-\t\tshell.setLayout(new GridLayout(1, false));", "+\t\tshell.setLayout(new GridLayout(2, false));", "-\t\tnodesColumn.setWidth(300);", "+\t\tString[] extraAttributes = gen.getExtraAttributes();", "+\t\tfor (int i = 0; i < extraAttributes.length; i++) {", "+\t\t\tTreeColumn column = new TreeColumn(nodesTree, SWT.NONE);", "+\t\t\tcolumn.setText(extraAttributes[i]);", "+\t\t}", "+\t\t", "+\t\tnodesTree.addListener(SWT.Selection, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\tif (event.detail != SWT.CHECK) return;", "+\t\t\t\tTreeItem item = (TreeItem)event.item;", "+\t\t\t\tif (item == null) return;", "+\t\t\t\tboolean checked = item.getChecked();", "+                checkItems(item, checked);", "+                checkPath(item.getParentItem(), checked, false);", "+\t\t\t}", "+\t\t});", "+\t\t", "+\t\tnodesTree.addListener(SWT.MouseDown, new Listener() {", "+\t\t\tpublic void handleEvent(final Event e) {", "+\t\t\t\te.display.asyncExec (new Runnable () {", "+\t\t\t\t\tpublic void run () {", "+\t\t\t\t\t\tif (nodesTree.isDisposed ()) return;", "+\t\t\t\t\t\tif (e.button != 1) return;", "+\t\t\t\t\t\tPoint pt = new Point(e.x, e.y);", "+\t\t\t\t\t\tTreeItem item = nodesTree.getItem(pt);", "+\t\t\t\t\t\tif (item == null) return;", "+\t\t\t\t\t\tint column = -1;", "+\t\t\t\t\t\tfor (int i = 0; i < nodesTree.getColumnCount(); i++) {", "+\t\t\t\t\t\t\tif (item.getBounds(i).contains(pt)) {", "+\t\t\t\t\t\t\t\tcolumn = i;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (column == -1) return;", "+\t\t\t\t\t\tif (!nodesTree.getColumn(column).getText().startsWith(\"swt_\")) return;", "+\t\t\t\t\t\tfinal TreeEditor editor = new TreeEditor(nodesTree);", "+\t\t\t\t\t\teditor.grabHorizontal = true;", "+\t\t\t\t\t\tfinal Text editorTx = new Text(nodesTree, SWT.SINGLE);", "+\t\t\t\t\t\tListener memberTextListener = new Listener() {", "+\t\t\t\t\t\t\tpublic void handleEvent(Event e) {", "+\t\t\t\t\t\t\t\tif (e.type == SWT.Traverse) {", "+\t\t\t\t\t\t\t\t\tswitch (e.detail) {", "+\t\t\t\t\t\t\t\t\t\tcase SWT.TRAVERSE_ESCAPE:", "+\t\t\t\t\t\t\t\t\t\t\teditor.setItem(null);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\teditorTx.setVisible(false);", "+\t\t\t\t\t\t\t\tTreeItem item = editor.getItem();", "+\t\t\t\t\t\t\t\tif (item == null) return;", "+\t\t\t\t\t\t\t\tint column = editor.getColumn();", "+\t\t\t\t\t\t\t\titem.setText(column, editorTx.getText());", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t};", "+\t\t\t\t\t\teditorTx.addListener(SWT.DefaultSelection, memberTextListener);", "+\t\t\t\t\t\teditorTx.addListener(SWT.FocusOut, memberTextListener);", "+\t\t\t\t\t\teditorTx.addListener(SWT.Traverse, memberTextListener);", "+\t\t\t\t\t\teditor.setEditor(editorTx);", "+\t\t\t\t\t\teditor.setColumn(column);", "+\t\t\t\t\t\teditor.setItem(item);", "+\t\t\t\t\t\teditorTx.setText(item.getText(column));", "+\t\t\t\t\t\teditorTx.selectAll();", "+\t\t\t\t\t\teditorTx.setVisible(true);", "+\t\t\t\t\t\teditorTx.setFocus();", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t}", "+\t\t});", "+\t\t", "+\t\tComposite panel = new Composite(parent, SWT.NONE);", "+\t\tpanel.setLayout(new GridLayout(1, true));", "+\t\t", "+\t\tButton generate = new Button(panel, SWT.PUSH);", "+\t\tgenerate.setText(\"Generate\");", "+\t\tgenerate.addListener(SWT.Selection, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\tTreeItem[] items = nodesTree.getItems();", "+\t\t\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\t\t\tTreeItem item = items[i];", "+\t\t\t\t\tDocument document = buildExtrasDocument(item);", "+\t\t\t\t\tif (document != null) {", "+\t\t\t\t\t\tgen.saveExtraAttributes((String)item.getData(), document);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t});", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47888b840bf67f73c8d5007dc159081a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tvoid cacheLineData(StyledTextContent printerContent)", "signatureAfterChange": " \tvoid cacheLineData(StyledText styledText)", "diff": ["-\tvoid cacheLineData(StyledTextContent printerContent) {\t", "-\t\tfor (int i = 0; i < printerContent.getLineCount(); i++) {", "-\t\t\tint lineOffset = printerContent.getOffsetAtLine(i);", "-\t\t\tString line = printerContent.getLine(i);", "-\t", "-\t\t\tif (printOptions.printLineBackground) {", "-\t\t\t\tcacheLineBackground(lineOffset, line);", "-\t\t\t}", "-\t\t\tif (printOptions.printTextBackground ||", "-\t\t\t\tprintOptions.printTextForeground ||", "-\t\t\t\tprintOptions.printTextFontStyle) {", "-\t\t\t\tcacheLineStyle(lineOffset, line);", "-\t\t\t}", "-\t\t\tif (parent.isBidi()) {", "-\t\t\t\tcacheBidiSegments(lineOffset, line);", "+\tvoid cacheLineData(StyledText styledText) {", "+\t\tStyledTextRenderer renderer = styledText.renderer;", "+\t\trenderer.copyInto(printerRenderer);", "+\t\tfontData = styledText.getFont().getFontData()[0];", "+\t\ttabLength = styledText.tabLength;", "+\t\tint lineCount = printerRenderer.lineCount;", "+\t\tif (styledText.isListening(LineGetBackground) || (styledText.isBidi() && styledText.isListening(LineGetSegments)) || styledText.isListening(LineGetStyle)) {", "+\t\t\tStyledTextContent content = printerRenderer.content;", "+\t\t\tfor (int i = 0; i < lineCount; i++) {", "+\t\t\t\tString line = content.getLine(i);", "+\t\t\t\tint lineOffset = content.getOffsetAtLine(i);", "+\t\t\t\tStyledTextEvent event = styledText.getLineBackgroundData(lineOffset, line);", "+\t\t\t\tif (event != null && event.lineBackground != null) {", "+\t\t\t\t\tprinterRenderer.setLineBackground(i, 1, event.lineBackground);", "+\t\t\t\t}", "+\t\t\t\tif (styledText.isBidi()) {", "+\t\t\t\t\tint[] segments = styledText.getBidiSegments(lineOffset, line);", "+\t\t\t\t\tprinterRenderer.setLineSegments(i, 1, segments);", "+\t\t\t\t}\t\t\t", "+\t\t\t\tevent = styledText.getLineStyleData(lineOffset, line);", "+\t\t\t\tif (event != null) {", "+\t\t\t\t\tprinterRenderer.setLineIndent(i, 1, event.indent);", "+\t\t\t\t\tprinterRenderer.setLineAlignment(i, 1, event.alignment);", "+\t\t\t\t\tprinterRenderer.setLineJustify(i, 1, event.justify);", "+\t\t\t\t\tprinterRenderer.setLineBullet(i, 1, event.bullet);", "+\t\t\t\t\tprinterRenderer.setStyleRanges(event.ranges, event.styles);", "+\t\t\t\t}", "-\t}", "+\t\tPoint screenDPI = styledText.getDisplay().getDPI();", "+\t\tPoint printerDPI = printer.getDPI();", "+\t\tresources = new Hashtable ();", "+\t\tfor (int i = 0; i < lineCount; i++) {", "+\t\t\tColor color = printerRenderer.getLineBackground(i, null);", "+\t\t\tif (color != null) {", "+\t\t\t\tif (printOptions.printLineBackground) {", "+\t\t\t\t\tColor printerColor = (Color)resources.get(color);", "+\t\t\t\t\tif (printerColor == null) {", "+\t\t\t\t\t\tprinterColor = new Color (printer, color.getRGB());", "+\t\t\t\t\t\tresources.put(color, printerColor); ", "+\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t\tprinterRenderer.setLineBackground(i, 1, printerColor);", "+\t\t\t\t} else {", "+\t\t\t\t\tprinterRenderer.setLineBackground(i, 1, null);", "+\t\t\t}", "+\t\t\tint indent = printerRenderer.getLineIndent(i, 0);", "+\t\t\tif (indent != 0) {", "+\t\t\t\tprinterRenderer.setLineIndent(i, 1, indent * printerDPI.x / screenDPI.x);", "+\t\t\t}", "+\t\tStyleRange[] styles = printerRenderer.styles;", "+\t\tfor (int i = 0; i < printerRenderer.styleCount; i++) {", "+\t\t\tStyleRange style = styles[i];", "+\t\t\tFont font = style.font;", "+\t\t\tif (style.font != null) {", "+\t\t\t\tFont printerFont = (Font)resources.get(font);", "+\t\t\t\tif (printerFont == null) {", "+\t\t\t\t\tprinterFont = new Font (printer, font.getFontData());", "+\t\t\t\t\tresources.put(font, printerFont);\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\tstyle.font = printerFont;", "+\t\t\t}", "+\t\t\tColor color = style.foreground;", "+\t\t\tif (color != null) {", "+\t\t\t\tColor printerColor = (Color)resources.get(color);", "+\t\t\t\tif (printOptions.printTextForeground) {", "+\t\t\t\t\tif (printerColor == null) {", "+\t\t\t\t\t\tprinterColor = new Color (printer, color.getRGB());", "+\t\t\t\t\t\tresources.put(color, printerColor); ", "+\t\t\t\t\t}", "+\t\t\t\t\tstyle.foreground = printerColor;", "+\t\t\t\t} else {", "+\t\t\t\t\tstyle.foreground = null;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcolor = style.background;", "+\t\t\tif (color != null) {", "+\t\t\t\tColor printerColor = (Color)resources.get(color);", "+\t\t\t\tif (printOptions.printTextBackground) {", "+\t\t\t\t\tif (printerColor == null) {", "+\t\t\t\t\t\tprinterColor = new Color (printer, color.getRGB());", "+\t\t\t\t\t\tresources.put(color, printerColor); ", "+\t\t\t\t\t}", "+\t\t\t\t\tstyle.background = printerColor;", "+\t\t\t\t} else {", "+\t\t\t\t\tstyle.background = null;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (!printOptions.printTextFontStyle) {", "+\t\t\t\tstyle.fontStyle = SWT.NORMAL;", "+\t\t\t}", "+\t\t\tstyle.rise = style.rise * printerDPI.y / screenDPI.y;", "+\t\t\tGlyphMetrics metrics = style.metrics;", "+\t\t\tif (metrics != null) {", "+\t\t\t\tmetrics.ascent = metrics.ascent * printerDPI.y / screenDPI.y;", "+\t\t\t\tmetrics.descent = metrics.descent * printerDPI.y / screenDPI.y;", "+\t\t\t\tmetrics.width = metrics.width * printerDPI.x / screenDPI.x;", "+\t\t\t}", "+\t\t}", "+\t\tlineSpacing = styledText.lineSpacing * printerDPI.y / screenDPI.y;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f36a5a5a9fb914d7e4eae61e53f7b572", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/dnd/DNDExample.java", "commitBeforeChange": "73710d9f09ebcac462a9041bda5cf1073ef9e063", "commitAfterChange": "7fbb9d1596162f9ad75a1391db3ebadea0726a58", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 16, "signatureBeforeChange": " private GridLayout createGridLayout(int cols)", "signatureAfterChange": "  private void createDropOperations(Composite parent)", "diff": ["-}", "-private GridLayout createGridLayout(int cols) {", "-\tGridLayout layout = new GridLayout();", "-\tlayout.numColumns = cols;", "-\tlayout.marginHeight = layout.marginWidth = 0;", "-\treturn layout;", "-}", "+", "+private void createDropOperations(Composite parent) {", "+\tparent.setLayout(new RowLayout(SWT.VERTICAL));", "+\tfinal Button moveButton = new Button(parent, SWT.CHECK);", "+\tmoveButton.setText(\"DND.DROP_MOVE\");", "+\tmoveButton.setSelection(true);", "+\tdropOperation = DND.DROP_MOVE;", "+\tmoveButton.addSelectionListener(new SelectionAdapter() {", "+\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\tButton b = (Button)e.widget;", "+\t\t\tif (b.getSelection()) {", "+\t\t\t\tdropOperation |= DND.DROP_MOVE;\t\t\t", "+\t\t\t} else {", "+\t\t\t\tdropOperation = dropOperation & ~DND.DROP_MOVE;", "+\t\t\t\tif (dropOperation == 0) {", "+\t\t\t\t\tdropOperation = DND.DROP_MOVE;", "+\t\t\t\t\tmoveButton.setSelection(true);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (dropEnabled) {", "+\t\t\t\tcreateDropTarget();", "+\t\t\t}", "+\t\t}", "+\t});", "+\t", "+", "+\tButton b = new Button(parent, SWT.CHECK);", "+\tb.setText(\"DND.DROP_COPY\");", "+\tb.addSelectionListener(new SelectionAdapter() {", "+\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\tButton b = (Button)e.widget;", "+\t\t\tif (b.getSelection()) {", "+\t\t\t\tdropOperation |= DND.DROP_COPY;\t\t\t", "+\t\t\t} else {", "+\t\t\t\tdropOperation = dropOperation & ~DND.DROP_COPY;", "+\t\t\t\tif (dropOperation == 0) {", "+\t\t\t\t\tdropOperation = DND.DROP_MOVE;", "+\t\t\t\t\tmoveButton.setSelection(true);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (dropEnabled) {", "+\t\t\t\tcreateDropTarget();", "+\t\t\t}", "+\t\t}", "+\t});", "+", "+\tb = new Button(parent, SWT.CHECK);", "+\tb.setText(\"DND.DROP_LINK\");", "+\tb.addSelectionListener(new SelectionAdapter() {", "+\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\tButton b = (Button)e.widget;", "+\t\t\tif (b.getSelection()) {", "+\t\t\t\tdropOperation |= DND.DROP_LINK;\t\t\t", "+\t\t\t} else {", "+\t\t\t\tdropOperation = dropOperation & ~DND.DROP_LINK;", "+\t\t\t\tif (dropOperation == 0) {", "+\t\t\t\t\tdropOperation = DND.DROP_MOVE;", "+\t\t\t\t\tmoveButton.setSelection(true);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (dropEnabled) {", "+\t\t\t\tcreateDropTarget();", "+\t\t\t}", "+\t\t}", "+\t});", "+\t", "+\tb = new Button(parent, SWT.CHECK);", "+\tb.setText(\"DND.DROP_DEFAULT\");", "+\tdefaultParent = new Composite(parent, SWT.NONE);", "+\tb.addSelectionListener(new SelectionAdapter() {", "+\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\tButton b = (Button)e.widget;", "+\t\t\tif (b.getSelection()) {", "+\t\t\t\tdropOperation |= DND.DROP_DEFAULT;", "+\t\t\t\tdefaultParent.setVisible(true);\t\t\t", "+\t\t\t} else {", "+\t\t\t\tdropOperation = dropOperation & ~DND.DROP_DEFAULT;", "+\t\t\t\tdefaultParent.setVisible(false);", "+\t\t\t}", "+\t\t\tif (dropEnabled) {", "+\t\t\t\tcreateDropTarget();", "+\t\t\t}", "+\t\t}", "+\t});", "+\t", "+\tdefaultParent.setVisible(false);", "+\tGridLayout layout = new GridLayout();", "+\tlayout.marginWidth = 20;", "+\tdefaultParent.setLayout(layout);", "+\tLabel label = new Label(defaultParent, SWT.NONE);", "+\tlabel.setText(\"Value for default operation is:\");", "+\tb = new Button(defaultParent, SWT.RADIO);", "+\tb.setText(\"DND.DROP_MOVE\");", "+\tb.addSelectionListener(new SelectionAdapter() {", "+\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\tButton b = (Button)e.widget;", "+\t\t\tif (b.getSelection()) {", "+\t\t\t\tdropDefaultOperation = DND.DROP_MOVE;", "+\t\t\t}", "+\t\t}", "+\t});", "+\t", "+\tb = new Button(defaultParent, SWT.RADIO);", "+\tb.setText(\"DND.DROP_COPY\");", "+\tb.addSelectionListener(new SelectionAdapter() {", "+\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\tButton b = (Button)e.widget;", "+\t\t\tif (b.getSelection()) {", "+\t\t\t\tdropDefaultOperation = DND.DROP_COPY;", "+\t\t\t}", "+\t\t}", "+\t});", "+", "+\tb = new Button(defaultParent, SWT.RADIO);", "+\tb.setText(\"DND.DROP_LINK\");", "+\tb.addSelectionListener(new SelectionAdapter() {", "+\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\tButton b = (Button)e.widget;", "+\t\t\tif (b.getSelection()) {", "+\t\t\t\tdropDefaultOperation = DND.DROP_LINK;", "+\t\t\t}", "+\t\t}", "+\t});", "+\t", "+\tb = new Button(defaultParent, SWT.RADIO);", "+\tb.setText(\"DND.DROP_NONE\");", "+\tb.setSelection(true);", "+\tb.addSelectionListener(new SelectionAdapter() {", "+\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\tButton b = (Button)e.widget;", "+\t\t\tif (b.getSelection()) {", "+\t\t\t\tdropDefaultOperation = DND.DROP_NONE;", "+\t\t\t}", "+\t\t}", "+\t});", "+}"]}], "num": 47932}
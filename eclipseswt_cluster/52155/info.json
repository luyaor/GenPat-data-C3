{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "015d02afa9b3d4a8bf5535a7c51cab4e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05249f51cf1b8ab6a20ba0ff4279f9bb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "21db765cd71e211ed7a422832ea159585ff971e3", "commitAfterChange": "cfc1e42b8ee7293ce68f0fd9dcd0e1b2cb8bb08a", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 92, "signatureBeforeChange": " \t\t \tprivate int handleMouseEvent(int nextHandler, int eRefHandle, int eventKind, int whichWindow)", "signatureAfterChange": " \t\t \tprivate int handleMouseEvent(int nextHandler, int eRefHandle, int eventKind, int whichWindow)", "diff": ["-\t\tif (MacUtil.HIVIEW)", "-\t\t\treturn OS.eventNotHandledErr;", "-\t\t", "-\t\tshort part= 0;", "+\t\t// retrieve window and window part from event", "-\t\t\t\twhichWindow= OS.GetControlOwner(fTrackedControl);", "+\t\t\t\t// in tracking mode: get window from control", "+\t\t\t\tint ww= OS.GetControlOwner(fTrackedControl);", "+\t\t\t\tint[] w= new int[1];", "+\t\t\t\tint rc= OS.GetEventParameter(eRefHandle, OS.kEventParamWindowRef, OS.typeWindowRef, null, 4, null, w);", "+\t\t\t\tif (rc == OS.noErr)", "+\t\t\t\t\twhichWindow= w[0];", "+\t\t\t\tif (whichWindow != ww)", "+\t\t\t\t\tSystem.out.println(\"Display.handleMouseEvent:  oops\");", "-\t\t\t\tpart= OS.FindWindow(where, w);", "+\t\t\t\tOS.FindWindow(where, w);", "+\t\t\t\tif (whichWindow == 0) {", "+\t\t\t\t\t// try to retrieve window from event", "+\t\t\t\t\tint rc= OS.GetEventParameter(eRefHandle, OS.kEventParamWindowRef, OS.typeWindowRef, null, 4, null, w);", "+\t\t\t\t\tif (rc == OS.noErr)", "+\t\t\t\t\t\twhichWindow= w[0];", "+\t\t\t\t\telse {", "+\t\t\t\t\t\t// the event is a MouseMoved event:", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t} else {", "-\t\t\tpart= OS.FindWindow(where, new int[1]);", "-\t\t", "-\t\tif (whichWindow == 0 && eventKind == OS.kEventMouseDown) {", "-\t\t\tint[] wHandle= new int[1];", "-\t\t\tint rc= OS.GetEventParameter(eRefHandle, OS.kEventParamWindowRef, OS.typeWindowRef, null, wHandle.length*4, null, wHandle);", "-\t\t\tif (rc == OS.noErr)", "-\t\t\t\twhichWindow= wHandle[0];", "-\t\t}", "-\t\t", "+\t\t\t\t", "-\t\t\t//System.out.println(\"Display.handleMouseEvent:  whichWindow == 0\");", "+\t\t\t// give up", "-\t\t\tOS.QDGlobalToLocalPoint(OS.GetWindowPort(whichWindow), where);\t\t\t", "-\t\t\tint cntrl= MacUtil.findControlUnderMouse(where, whichWindow, null);", "+\t\t\tint cntrl= MacUtil.findControlUnderMouse(whichWindow, me, null);", "-\t\t\t\treturn OS.eventNotHandledErr;", "+\t\t\t\tbreak;", "-\t\t", "-\t\t\tif (part == OS.inContent || (MacUtil.HIVIEW && part == OS.inStructure))", "-\t\t\t\tif (false && MacUtil.HIVIEW) {", "-\t\t\t\t\treturn OS.eventNotHandledErr;", "-\t\t\t\t} else {", "-\t\t\t\t\tif (!handleContentClick(me, whichWindow))", "-\t\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t}", "-", "-\t\t\tbreak;", "+\t\t\t\t\t\t\t", "+\t\t\treturn handleContentClick(me, whichWindow);", "-\t\t\tOS.QDGlobalToLocalPoint(OS.GetWindowPort(whichWindow), where);\t\t\t", "-\t\t\tint whichControl= MacUtil.findControlUnderMouse(where, whichWindow, null);", "+\t\t\tint whichControl= MacUtil.findControlUnderMouse(whichWindow, me, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "179dc04a7093f069d29026356ad92c09", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "af9f857dda29d2ee1989cc89928edc6e0958ebc8", "commitAfterChange": "4b24af5ef710affbf05bf5fb1df78e69400546d5", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "  \tprivate int handleWindowCallback(int nextHandler, int eRefHandle, int whichWindow)", "signatureAfterChange": "  \tprivate int handleWindowCallback(int nextHandler, int eRefHandle, int whichWindow)", "diff": ["+\t\tint eventClass= OS.GetEventClass(eRefHandle);", "-\t\tswitch (eventKind) {", "-\t\tcase OS.kEventWindowActivated:", "-\t\t\twindowProc(whichWindow, SWT.FocusIn, new Boolean(true));", "-\t\t\treturn OS.kNoErr;", "-\t\tcase OS.kEventWindowDeactivated:", "-\t\t\twindowProc(whichWindow, SWT.FocusIn, new Boolean(false));", "-\t\t\treturn OS.kNoErr;", "-\t\tcase OS.kEventWindowBoundsChanged:", "-\t\t\tint[] attr= new int[1];", "-\t\t\tOS.GetEventParameter(eRefHandle, OS.kEventParamAttributes, OS.typeUInt32, null, null, attr);\t", "-\t\t\twindowProc(whichWindow, SWT.Resize, new Integer(attr[0]));", "-\t\t\treturn OS.kNoErr;", "-\t\tcase OS.kEventWindowClose:", "-\t\t\twindowProc(whichWindow, SWT.Dispose, null);", "-\t\t\treturn OS.kNoErr;", "-\t\tcase OS.kEventWindowDrawContent:", "-\t\t\tif (toolTipWindowHandle == whichWindow) {", "-\t\t\t\tprocessPaintToolTip(whichWindow);", "+\t\t", "+\t\tswitch (eventClass) {", "+\t\t\t", "+\t\tcase OS.kEventClassMouse:", "+\t\t\treturn handleMouseCallback(nextHandler, eRefHandle);", "+\t\t\t", "+\t\tcase OS.kEventClassWindow:", "+\t\t\tswitch (eventKind) {", "+\t\t\tcase OS.kEventWindowActivated:", "+\t\t\t\tfActiveWindow= whichWindow;", "+\t\t\t\twindowProc(whichWindow, SWT.FocusIn, new Boolean(true));", "-\t\t\t} else {", "-\t\t\t\tupdateWindow2(whichWindow);", "+\t\t\tcase OS.kEventWindowDeactivated:", "+\t\t\t\tfActiveWindow= 0;", "+\t\t\t\twindowProc(whichWindow, SWT.FocusIn, new Boolean(false));", "+\t\t\tcase OS.kEventWindowBoundsChanged:", "+\t\t\t\tint[] attr= new int[1];", "+\t\t\t\tOS.GetEventParameter(eRefHandle, OS.kEventParamAttributes, OS.typeUInt32, null, null, attr);\t", "+\t\t\t\twindowProc(whichWindow, SWT.Resize, new Integer(attr[0]));", "+\t\t\t\treturn OS.kNoErr;", "+\t\t\tcase OS.kEventWindowClose:", "+\t\t\t\twindowProc(whichWindow, SWT.Dispose, null);", "+\t\t\t\treturn OS.kNoErr;", "+\t\t\tcase OS.kEventWindowDrawContent:", "+\t\t\t\tif (toolTipWindowHandle == whichWindow) {", "+\t\t\t\t\tprocessPaintToolTip(whichWindow);", "+\t\t\t\t\treturn OS.kNoErr;", "+\t\t\t\t} else {", "+\t\t\t\t\tupdateWindow2(whichWindow);", "+\t\t\t\t\treturn OS.kNoErr;", "+\t\t\t\t}", "+\t\t\t\t//break;", "+\t\t\tdefault:", "+\t\t\t\tSystem.out.println(\"handleWindowCallback: kEventClassWindow kind:\" + eventKind);", "+\t\t\t\tbreak;", "-\t\t\t//break;", "+\t\t\tbreak;", "+\t\t\t", "-\t\t\tSystem.out.println(\"handleWindowCallback: \" + eventKind);", "+\t\t\tSystem.out.println(\"handleWindowCallback: unexpected event class: \" + MacUtil.toString(eventClass));"]}], "num": 52155}
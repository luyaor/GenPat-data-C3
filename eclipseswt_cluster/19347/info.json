{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "293cffe5b7828b9b0be1ae219eea0099", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46c839fa8a8db047e203d837c14ab0fd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "ea7476519b9e21c42e4d4550669901e532bedcab", "commitAfterChange": "76b33e0e494479a9009365afe16385a154f070b7", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 94, "signatureBeforeChange": " void doPageDown(boolean select, int height)", "signatureAfterChange": " void doPageDown(boolean select, int height)", "diff": ["-\t}", "-\tPoint point = getCaret().getLocation();", "-\tint lineCount = content.getLineCount();", "-\t//int index = getBottomIndex();", "-\tint clientAreaHeight = getClientArea().height;", "-\tint index = getLineIndex(clientAreaHeight);", "-\tint y = 0;", "-\tif (index > 0) {", "-\t\tint linePixel = getLinePixel(index);", "-\t\tint lineHeight = lineCache.getLineHeight(index);", "-\t\ty = Math.max(0, linePixel + lineHeight - clientAreaHeight);", "-\t}", "-\twhile (index < lineCount - 1) {", "-\t\tint paragraphHeight = lineCache.getLineHeight(index);", "-\t\tif (y + paragraphHeight > height) {", "-\t\t\tif (wordWrap) {", "-\t\t\t\tString line = content.getLine(index);", "-\t\t\t\tint lineOffset = content.getOffsetAtLine(index);", "-\t\t\t\tTextLayout layout = renderer.getTextLayout(line, lineOffset);", "-\t\t\t\tint count = layout.getLineCount();", "-\t\t\t\trenderer.disposeTextLayout(layout);", "-\t\t\t} else {", "-\t\t\t\ty = height;", "+\t}\t", "+\tint oldColumnX = columnX;", "+\tint oldHScrollOffset = horizontalScrollOffset;", "+\tif (isFixedLineHeight()) {", "+\t\tint lineCount = content.getLineCount();", "+\t\tint caretLine = getCaretLine();", "+\t\tif (caretLine < lineCount - 1) {", "+\t\t\tint lines = height / lineHeight;", "+\t\t\tint scrollLines = Math.min(lineCount - caretLine - 1, lines);", "+\t\t\t// ensure that scrollLines never gets negative and at leat one ", "+\t\t\t// line is scrolled. fixes bug 5602.", "+\t\t\tscrollLines = Math.max(1, scrollLines);", "+\t\t\tcaretLine += scrollLines;", "+\t\t\t//caretOffset = getOffsetAtMouseLocation(columnX, caretLine); ", "+\t\t\tcaretOffset = getOffsetAtPoint(columnX, getLinePixel(caretLine));", "+\t\t\tif (select) {", "+\t\t\t\tdoSelection(ST.COLUMN_NEXT);", "-\t\t\tbreak;", "+\t\t\t// scroll one page down or to the bottom", "+\t\t\tint verticalMaximum = lineCount * getVerticalIncrement();", "+\t\t\tint pageSize = getClientArea().height;", "+\t\t\tint scrollOffset = verticalScrollOffset + scrollLines * getVerticalIncrement();", "+\t\t\tif (scrollOffset + pageSize > verticalMaximum) {", "+\t\t\t\tscrollOffset = verticalMaximum - pageSize;", "+\t\t\t}", "+\t\t\tif (scrollOffset > verticalScrollOffset) {", "+\t\t\t\tsetVerticalScrollOffset(scrollOffset, true);", "+\t\t\t}", "-\t\ty += paragraphHeight;", "-\t\tindex++;", "-\t}", "-\tif (y == 0) return;", "-\tsetVerticalScrollOffset(verticalScrollOffset + y, true);", "-\tcaretOffset = getOffsetAtPoint(point.x, point.y + 1);", "-\tsetCaretLocation();", "+\t} else {", "+\t\tint oldVScrollOffset = verticalScrollOffset;", "+\t\tint caretY = getCaret().getLocation().y;", "+\t\tboolean scroll = getLineIndex(getClientArea().height) != content.getLineCount() - 1;", "+\t\tif (scroll) {", "+\t\t\tsetVerticalScrollOffset(verticalScrollOffset + height, true);", "+\t\t\tclaimBottomFreeSpace();", "+\t\t}", "+\t\tcaretY += height - (verticalScrollOffset - oldVScrollOffset);", "+\t\tcaretOffset = getOffsetAtPoint(columnX, caretY);", "+\t\tsetCaretLocation();", "+\t\tif (select) {", "+\t\t\tdoSelection(ST.COLUMN_NEXT);", "+\t\t}", "+\t}\t", "+\tshowCaret();", "+\tint hScrollChange = oldHScrollOffset - horizontalScrollOffset;", "+\tcolumnX = oldColumnX + hScrollChange;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "658e01bd080a687462cb32c021f110ff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "b16a097ce1f227d4fd237cb6f8c0ba950eb50b9e", "commitAfterChange": "ad9e4c7cb4e85f9de20630936ecc2b154a562c71", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 66, "signatureBeforeChange": "  int itemNotificationProc (int browser, int id, int message)", "signatureAfterChange": "  int itemNotificationProc (int browser, int id, int message)", "diff": ["-\tint index = id - 1;", "-\tif (!(0 <= index && index < items.length)) return OS.noErr;", "-\tTreeItem item = items [index];", "+\tif (!(0 < id && id <= items.length)) return OS.noErr;", "-\t\t\t\tevent.item = item;", "+\t\t\t\tevent.item = _getItem (id, true);", "-\t\t\tevent.item = item;", "+\t\t\tevent.item = _getItem (id, true);", "-", "-\t\t\t\t\t* Bug in the Macintosh.  When the DataBroswer selection flags includes", "+\t\t\t\t\t* Bug in the Macintosh.  When the DataBrowser selection flags includes", "-\t\t\t\t  * two items are selected when SetDataBrowserSelectedItems() is called", "-\t\t\t\t  * with kDataBrowserItemsAssign to assign a new seletion despite the fact", "+\t\t\t\t\t* two items are selected when SetDataBrowserSelectedItems() is called", "+\t\t\t\t\t* with kDataBrowserItemsAssign to assign a new seletion despite the fact", "-\t\t\t\t\tevent.item = item;", "+\t\t\t\t\tevent.item = _getItem (id, true);", "+\t\t\tTreeItem item = _getItem (id, true);", "+\t\t\tint [] ids = item.childIds;", "+\t\t\tif (ids != null) {", "+\t\t\t\tfor (int i=0; i<item.itemCount; i++) {", "+\t\t\t\t\tint childId = ids [i];", "+\t\t\t\t\tif (childId != 0) {", "+\t\t\t\t\t\tif (childId > items.length || items [childId - 1] == null) ids [i] = 0;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\tsetScrollWidth ();", "+\t\t\tsetScrollWidth (true);", "+\t\t\tTreeItem item = _getItem (id, true);", "-\t\t\tint count = 0;", "-\t\t\tfor (int i=0; i<items.length; i++) {", "-\t\t\t\tif (items [i] != null && items [i].parentItem == item) count++;", "+\t\t\tint newIdCount = 0;", "+\t\t\tfor (int i=0; i<item.itemCount; i++) {", "+\t\t\t\tif (item.childIds [i] == 0) newIdCount++;", "-\t\t\tTreeItem [] newItems = new TreeItem [count];", "-\t\t\tint [] ids = new int [count];", "-\t\t\tfor (int i=0; i<items.length; i++) {", "-\t\t\t\tif (items [i] != null && items [i].parentItem == item) {", "-\t\t\t\t\tids [items [i].index] = items [i].id;", "-\t\t\t\t\tnewItems [items [i].index] = items [i];", "+\t\t\tif (newIdCount > 0) {", "+\t\t\t\tint [] newIds = _getIds (newIdCount);", "+\t\t\t\tint index = 0;", "+\t\t\t\tfor (int i=0; i<item.itemCount; i++) {", "+\t\t\t\t\tif (item.childIds [i] == 0) item.childIds [i] = newIds [index++];   ", "-\t\t\tOS.AddDataBrowserItems (handle, id, ids.length, ids, OS.kDataBrowserItemNoProperty);", "-\t\t\tvisibleCount += ids.length;", "-\t\t\tsetScrollWidth (newItems, false);", "+\t\t\tOS.AddDataBrowserItems (handle, id, item.itemCount, item.childIds, OS.kDataBrowserItemNoProperty);", "+\t\t\tvisibleCount += item.itemCount;", "+\t\t\tsetScrollWidth (false);"]}], "num": 19347}
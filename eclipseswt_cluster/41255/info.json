{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "22084e5d3c1aab83d6c2e0513bd2396c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65e03fa4e45c273d29c53a7042a2aaf9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "b254513b5fa1f9602e91ee9bc5ce7dfb2142807f", "commitAfterChange": "8f8824f7cb88c37bf497e6791ee76080a97b10d1", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  void menuWillOpen(int id, int sel, int menu)", "signatureAfterChange": "  void menuWillOpen(int id, int sel, int menu)", "diff": ["-\tfor (int i=0; i<items.length; i++) {", "+\tfloat /*double*/ width = 0;", "+\tNSAttributedString[] strs = new NSAttributedString[itemCount];", "+\tfor (int i=0; i<itemCount; i++) {", "-\t\tif (item != null)  item.updateAccelerator (true);", "+\t\tNSMenuItem nsItem = item.nsItem;", "+\t\tstrs[i] = nsItem.attributedTitle();", "+\t\tNSImage nsImage = nsItem.image();", "+\t\tfloat /*double*/ w = GAP;", "+\t\tif (strs[i] != null) {", "+\t\t\tw += strs[i].size().width;", "+\t\t}", "+\t\tif (nsImage != null) {", "+\t\t\tw += (nsImage.size().width + GAP);", "+\t\t}", "+\t\tif (strs[i] != null) width = Math.max(width, w);", "+\t}", "+\tfor (int i=0; i<itemCount; i++) {", "+\t\tMenuItem item = items [i];", "+\t\tif (item.accelerator != 0 || strs[i] == null || (style & SWT.BAR) != 0 || (item.style & SWT.CASCADE) != 0) continue;", "+\t\tint accelIndex = item.text.indexOf ('\\t');", "+\t\tif (accelIndex != -1) {", "+\t\t\tString accelText = item.text.substring (accelIndex);", "+\t\t\tint length = accelText.length ();", "+\t\t\tif (length > 1) {", "+\t\t\t\tNSMenuItem nsItem = item.nsItem;", "+\t\t\t\tNSImage nsImage = nsItem.image();", "+\t\t\t\tfloat /*double*/ tab = width;", "+\t\t\t\tif (nsImage != null) {", "+\t\t\t\t\ttab -= (nsImage.size().width + GAP);", "+\t\t\t\t}", "+\t\t\t\tNSMutableAttributedString str = new NSMutableAttributedString(strs[i].mutableCopy());", "+\t\t\t\t", "+\t\t\t\t/* Append accelerator text */", "+\t\t\t\tNSString label = (NSString) new NSString().alloc();", "+\t\t\t\tlabel = label.initWithString(accelText);", "+\t\t\t\tNSMutableDictionary dict = ((NSMutableDictionary)new NSMutableDictionary().alloc()).initWithCapacity(1);", "+\t\t\t\tdict.setObject (NSFont.menuBarFontOfSize(0), OS.NSFontAttributeName);", "+\t\t\t\tNSAttributedString attribStr = ((NSAttributedString) new NSAttributedString ().alloc ()).initWithString (label, dict);", "+\t\t\t\tdict.release();", "+\t\t\t\tlabel.release();", "+\t\t\t\tstr.appendAttributedString(attribStr);", "+\t\t\t\tattribStr.release();", "+\t\t\t\t", "+\t\t\t\t/* Align accelerator text */", "+\t\t\t\tNSRange range = new NSRange();", "+\t\t\t\trange.length = str.length();", "+\t\t\t\tNSMutableParagraphStyle paragraphStyle = (NSMutableParagraphStyle)new NSMutableParagraphStyle ().alloc ().init ();", "+\t\t\t\tparagraphStyle.setTabStops(NSArray.array());", "+\t\t\t\tNSTextTab stop = (NSTextTab)new NSTextTab().alloc();", "+\t\t\t\tstop = stop.initWithType(OS.NSLeftTabStopType, tab);", "+\t\t\t\tparagraphStyle.addTabStop(stop);", "+\t\t\t\tstop.release();", "+\t\t\t\tstr.addAttribute(OS.NSParagraphStyleAttributeName, paragraphStyle, range);", "+\t\t\t\tparagraphStyle.release ();", "+\t\t\t\t", "+\t\t\t\tnsItem.setAttributedTitle(str);", "+\t\t\t\tstr.release();", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "889a534856d63f2d3efa3fa1cb174375", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "db5070f4a4104c5e47a8cd2bdd5b5f06b11fcd6f", "commitAfterChange": "ed00985c99474f1ccbc7dee6f3b569d40159cdfc", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void pack ()", "signatureAfterChange": " public void pack ()", "diff": ["-\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "-\t\theaderWidth += Table.HEADER_EXTRA;", "-\t}", "+\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) headerWidth += Table.HEADER_EXTRA;", "-\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, OS.LVSCW_AUTOSIZE);", "-\tint columnWidth = OS.SendMessage (hwnd, OS.LVM_GETCOLUMNWIDTH, index, 0);", "-\tif (index == 0) {", "-\t\t/*", "-\t\t* Bug in Windows.  When LVM_SETCOLUMNWIDTH is used with LVSCW_AUTOSIZE", "-\t\t* where each item has I_IMAGECALLBACK but there are no images in the", "-\t\t* table, the size computed by LVM_SETCOLUMNWIDTH is too small for the", "-\t\t* first column, causing long items to be clipped with '...'.  The fix", "-\t\t* is to increase the column width by a small amount.", "-\t\t*/", "-\t\tif (parent.imageList == null) columnWidth += 2;", "-\t\t/*", "-\t\t* Bug in Windows.  When LVM_SETCOLUMNWIDTH is used with LVSCW_AUTOSIZE", "-\t\t* for a table with a state image list, the column is width does not", "-\t\t* include space for the state icon.  The fix is to increase the column", "-\t\t* width by the width of the image list.", "-\t\t*/", "-\t\tif ((parent.style & SWT.CHECK) != 0) {", "-\t\t\tint hStateList = OS.SendMessage (hwnd, OS.LVM_GETIMAGELIST, OS.LVSIL_STATE, 0);", "-\t\t\tif (hStateList != 0) {", "-\t\t\t\tint [] cx = new int [1], cy = new int [1];", "-\t\t\t\tOS.ImageList_GetIconSize (hStateList, cx, cy);", "-\t\t\t\tcolumnWidth += cx [0];", "+\tint columnWidth = 0;", "+\tif (parent.hooks (SWT.MeasureItem)) {", "+\t\tRECT headerRect = new RECT ();", "+\t\tint hwndHeader = OS.SendMessage (hwnd, OS.LVM_GETHEADER, 0, 0);", "+\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, index, headerRect);", "+\t\tint hDC = OS.GetDC (hwnd);", "+\t\tint oldFont = 0, newFont = OS.SendMessage (hwnd, OS.WM_GETFONT, 0, 0);", "+\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "+\t\tint count = OS.SendMessage (hwnd, OS.LVM_GETITEMCOUNT, 0, 0);", "+\t\tfor (int i=0; i<count; i++) {", "+\t\t\tTableItem item = parent.items [i];", "+\t\t\tif (item != null) {", "+\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [index] : -1;", "+\t\t\t\tif (hFont == -1) hFont = item.font;", "+\t\t\t\tif (hFont != -1) hFont = OS.SelectObject (hDC, hFont);", "+\t\t\t\tRECT itemRect = item.getBounds (i, index, true, true, false, false, hDC);", "+\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "+\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "+\t\t\t\tGCData data = new GCData ();", "+\t\t\t\tdata.device = display;", "+\t\t\t\tdata.hFont = hFont;", "+\t\t\t\tGC gc = GC.win32_new (hDC, data);", "+\t\t\t\tEvent event = new Event ();", "+\t\t\t\tevent.item = item;", "+\t\t\t\tevent.gc = gc;", "+\t\t\t\tevent.index = index;", "+\t\t\t\tevent.x = itemRect.left;", "+\t\t\t\tevent.y = itemRect.top;", "+\t\t\t\tevent.width = itemRect.right - itemRect.left;", "+\t\t\t\tevent.height = itemRect.bottom - itemRect.top;", "+\t\t\t\tparent.sendEvent (SWT.MeasureItem, event);", "+\t\t\t\tif (!parent.ignoreItemHeight) {", "+\t\t\t\t\tif (event.height > parent.getItemHeight ()) {", "+\t\t\t\t\t\tparent.setItemHeight (event.height);", "+\t\t\t\t\t}", "+\t\t\t\t\tparent.ignoreItemHeight = true;", "+\t\t\t\t}", "+\t\t\t\tevent.gc = null;", "+\t\t\t\tgc.dispose ();", "+\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "+\t\t\t\tif (isDisposed () || parent.isDisposed ()) break;", "+\t\t\t\tcolumnWidth = Math.max (columnWidth, event.x + event.width - headerRect.left);", "+\t\t\t}", "+\t\t}", "+\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "+\t\tOS.ReleaseDC (hwnd, hDC);", "+\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, columnWidth);", "+\t} else {", "+\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, OS.LVSCW_AUTOSIZE);", "+\t\tcolumnWidth = OS.SendMessage (hwnd, OS.LVM_GETCOLUMNWIDTH, index, 0);", "+\t\tif (index == 0) {", "+\t\t\t/*", "+\t\t\t* Bug in Windows.  When LVM_SETCOLUMNWIDTH is used with LVSCW_AUTOSIZE", "+\t\t\t* where each item has I_IMAGECALLBACK but there are no images in the", "+\t\t\t* table, the size computed by LVM_SETCOLUMNWIDTH is too small for the", "+\t\t\t* first column, causing long items to be clipped with '...'.  The fix", "+\t\t\t* is to increase the column width by a small amount.", "+\t\t\t*/", "+\t\t\tif (parent.imageList == null) columnWidth += 2;", "+\t\t\t/*", "+\t\t\t* Bug in Windows.  When LVM_SETCOLUMNWIDTH is used with LVSCW_AUTOSIZE", "+\t\t\t* for a table with a state image list, the column is width does not", "+\t\t\t* include space for the state icon.  The fix is to increase the column", "+\t\t\t* width by the width of the image list.", "+\t\t\t*/", "+\t\t\tif ((parent.style & SWT.CHECK) != 0) {", "+\t\t\t\tint hStateList = OS.SendMessage (hwnd, OS.LVM_GETIMAGELIST, OS.LVSIL_STATE, 0);", "+\t\t\t\tif (hStateList != 0) {", "+\t\t\t\t\tint [] cx = new int [1], cy = new int [1];", "+\t\t\t\t\tOS.ImageList_GetIconSize (hStateList, cx, cy);", "+\t\t\t\t\tcolumnWidth += cx [0];", "+\t\t\t\t}"]}], "num": 41255}
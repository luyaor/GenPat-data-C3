{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "55d456763bc51f891db96da0b822b200", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be5c09b8f37da473cfb00a83226bd56c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet220.java", "commitBeforeChange": "1bd926e9ca7f8cdd3cdd764933d6b42a0ca3ec9d", "commitAfterChange": "180ffe57f7c13068cf75ac5d47d4ed051a608d35", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t \t public static void main(String [] args)", "signatureAfterChange": "\t \t public static void main(String [] args)", "diff": ["-\tfinal Image image = display.getSystemImage(SWT.ICON_INFORMATION);", "-\tshell.setText(\"Images on the right side of the TreeItem\");", "-\tshell.setLayout(new FillLayout ());", "-\tTree tree = new Tree(shell, SWT.MULTI | SWT.FULL_SELECTION);", "-\ttree.setHeaderVisible(true);", "-\ttree.setLinesVisible(true);\t\t\t", "-\tint columnCount = 4;", "-\tfor(int i = 0; i < columnCount; i++) {", "-\t\tTreeColumn column = new TreeColumn(tree, SWT.NONE);", "-\t\tcolumn.setText(\"Column \" + i);\t", "+\tshell.setBounds(10, 10, 350, 200);", "+\tImage xImage = new Image (display, 16, 16);", "+\tGC gc = new GC(xImage);", "+\tgc.setForeground(display.getSystemColor(SWT.COLOR_RED));", "+\tgc.drawLine(1, 1, 14, 14);", "+\tgc.drawLine(1, 14, 14, 1);", "+\tgc.drawOval(2, 2, 11, 11);", "+\tgc.dispose();", "+\tfinal int IMAGE_MARGIN = 2;", "+\tfinal Tree tree = new Tree(shell, SWT.CHECK);", "+\ttree.setBounds(10, 10, 300, 150);", "+\tTreeItem item = new TreeItem(tree, SWT.NONE);", "+\titem.setText(\"root item\");", "+\tfor (int i = 0; i < 4; i++) {", "+\t\tTreeItem newItem = new TreeItem(item, SWT.NONE);", "+\t\tnewItem.setText(\"descendent \" + i);", "+\t\tif (i % 2 == 0) newItem.setData(xImage);", "+\t\titem.setExpanded(true);", "+\t\titem = newItem;", "-\tint itemCount = 3;", "-\tfor (int i=0; i<itemCount; i++) {", "-\t\tTreeItem item1 = new TreeItem(tree, SWT.NONE);", "-\t\titem1.setText(\"item \"+i);", "-\t\tfor (int c=1; c < columnCount; c++) {", "-\t\t\titem1.setText(c, \"item [\"+i+\"-\"+c+\"]\");", "-\t\t}", "-\t\tfor (int j=0; j<itemCount; j++) {", "-\t\t\tTreeItem item2 = new TreeItem(item1, SWT.NONE);", "-\t\t\titem2.setText(\"item [\"+i+\" \"+j+\"]\");", "-\t\t\tfor (int c=1; c<columnCount; c++) {", "-\t\t\t\titem2.setText(c, \"item [\"+i+\" \"+j+\"-\"+c+\"]\");", "-\t\t\t}", "-\t\t\tfor (int k=0; k<itemCount; k++) {", "-\t\t\t\tTreeItem item3 = new TreeItem(item2, SWT.NONE);", "-\t\t\t\titem3.setText(\"item [\"+i+\" \"+j+\" \"+k+\"]\");", "-\t\t\t\tfor (int c=1; c<columnCount; c++) {", "-\t\t\t\t\titem3.setText(c, \"item [\"+i+\" \"+j+\" \"+k+\"-\"+c+\"]\");", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "-\t/*", "-\t * NOTE: MeasureItem, PaintItem and EraseItem are called repeatedly.", "-\t * Therefore, it is critical for performance that these methods be", "-\t * as efficient as possible.", "-\t */", "-\tListener paintListener = new Listener() {", "-\t\tpublic void handleEvent(Event event) {\t\t\t", "-\t\t\tswitch(event.type) {", "-\t\t\t\tcase SWT.MeasureItem: {", "-\t\t\t\t\tRectangle rect = image.getBounds();", "-\t\t\t\t\tevent.width += rect.width;", "-\t\t\t\t\tevent.height = Math.max(event.height, rect.height + 2);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase SWT.PaintItem: {", "-\t\t\t\t\tint x = event.x + event.width;", "-\t\t\t\t\tRectangle rect = image.getBounds();", "-\t\t\t\t\tint offset = Math.max(0, (event.height - rect.height) / 2);", "-\t\t\t\t\tevent.gc.drawImage(image, x, event.y + offset);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t};\t\t", "-\ttree.addListener(SWT.MeasureItem, paintListener);", "-\ttree.addListener(SWT.PaintItem, paintListener);\t\t", "-\tfor(int i = 0; i < columnCount; i++) {", "-\t\ttree.getColumn(i).pack();", "-\t}\t", "-\tshell.setSize(500, 200);", "+\t/*", "+\t * NOTE: MeasureItem and PaintItem are called repeatedly.  Therefore it is", "+\t * critical for performance that these methods be as efficient as possible.", "+\t */", "+\ttree.addListener(SWT.MeasureItem, new Listener() {", "+\t\tpublic void handleEvent(Event event) {", "+\t\t\tTreeItem item = (TreeItem)event.item;", "+\t\t\tImage trailingImage = (Image)item.getData();", "+\t\t\tif (trailingImage != null) {", "+\t\t\t\tevent.width += trailingImage.getBounds().width + IMAGE_MARGIN;", "+\t\t\t}", "+\t\t}", "+\t});", "+\ttree.addListener(SWT.PaintItem, new Listener() {", "+\t\tpublic void handleEvent(Event event) {", "+\t\t\tTreeItem item = (TreeItem)event.item;", "+\t\t\tImage trailingImage = (Image)item.getData();", "+\t\t\tif (trailingImage != null) {", "+\t\t\t\tint x = event.x + event.width + IMAGE_MARGIN;", "+\t\t\t\tint itemHeight = tree.getItemHeight();", "+\t\t\t\tint imageHeight = trailingImage.getBounds().height;", "+\t\t\t\tint y = event.y + (itemHeight - imageHeight) / 2;", "+\t\t\t\tevent.gc.drawImage(trailingImage, x, y);", "+\t\t\t}", "+\t\t}", "+\t});", "+", "-\twhile(!shell.isDisposed ()) {", "-\t\tif(!display.readAndDispatch()) display.sleep();", "+\twhile (!shell.isDisposed()) {", "+\t\tif (!display.readAndDispatch()) display.sleep();", "-\tif(image != null) image.dispose();", "+\txImage.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c07e42010a1e68b21478587cd938cc9d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "982cd53e0d78db18706bf0846ac669e298de32e2", "commitAfterChange": "165673b92d78dcd017af081458f5cae6d2eb17c6", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 66, "signatureBeforeChange": "  void OnSelectedItemChanged (int args)", "signatureAfterChange": "  void OnSelectedItemChanged (int args)", "diff": ["-\t} \t", "-    int treeType = OS.Object_GetType (handle);", "-    int propertyName = createDotNetString (\"IsSelectionChangeActive\", false);", "-    int property = OS.Type_GetProperty (treeType, propertyName, OS.BindingFlags_Instance | OS.BindingFlags_NonPublic);", "-    OS.GCHandle_Free (treeType);", "-    OS.GCHandle_Free (propertyName);", "-    OS.PropertyInfo_SetValueBoolean (property, handle, true, 0);", "+\t}", "+    setIsSelectionActiveProperty (true);", "-    \tfor (int i = 0; i < selectedItemCount; i++) {", "-    \t\tif (newItemRef == 0 || !OS.Object_Equals (newItemRef, selectedItems [i].handle)) {", "-    \t\t\tOS.TreeViewItem_IsSelected (selectedItems [i].handle, false);", "-    \t\t}", "-    \t}", "-    \tif (newItem != null) {", "-    \t\tOS.TreeViewItem_IsSelected (newItem.handle, true);", "-    \t\tselectedItems = new TreeItem [] { newItem };", "-    \t\tselectedItemCount = 1;", "-    \t} else {", "-    \t\tselectedItems = new TreeItem [0];", "-    \t\tselectedItemCount = 0;", "-    \t}", "+    \tdeselectAll ();", "+    \tif (newItem != null) OS.TreeViewItem_IsSelected (newItem.handle, true);", "-    \t\t\tinsertSelectedItem (newItem, selectedItemCount);", "+    \t    \tif (newItem != null) OS.TreeViewItem_IsSelected (newItem.handle, true);", "+    \t    \tanchor = newItem;", "-    \t\t\tinsertSelectedItems (anchor, newItem);", "-    \t\t}", "-    \t\tfor (int i = 0; i < selectedItemCount; i++) {", "-    \t\t\tOS.TreeViewItem_IsSelected (selectedItems[i].handle, true);", "+    \t\t\tint zero = OS.gcnew_Point (0, 0);", "+    \t\t\tint point = OS.UIElement_TranslatePoint (anchor.handle, zero, newItem.handle);", "+    \t\t\tOS.GCHandle_Free (zero);", "+    \t\t    boolean down = OS.Point_Y (point) < 0;", "+    \t\t    OS.GCHandle_Free (point);", "+    \t\t    TreeItem from = down ? anchor : newItem;", "+    \t\t    TreeItem to = down ? newItem : anchor;", "+    \t\t    int items = OS.ItemsControl_Items (handle);", "+    \t\t    int itemCount = OS.ItemCollection_Count (items);", "+    \t\t    boolean[] selecting = new boolean[] {false};", "+    \t\t    for (int i = 0; i < itemCount; i++) {", "+\t\t\t\t\tint item = OS.ItemCollection_GetItemAt(items, i);", "+\t\t\t\t\tfixSelection (item, from, to, selecting);", "+\t\t\t\t\tOS.GCHandle_Free (item);", "+\t\t\t\t}", "+    \t\t    OS.GCHandle_Free (items);", "-    \t\tif (newItem != null) {", "-    \t\t\tboolean selected = false;", "-    \t\t\tfor (int i = 0; i < selectedItemCount; i++) {", "-    \t\t\t\tif (selectedItems [i] == newItem) {", "-    \t\t\t\t\tselected = true;", "-    \t\t\t\t\tbreak;", "-    \t\t\t\t}", "-    \t\t\t}", "-    \t\t\tif (!selected) {", "-    \t\t\t\tinsertSelectedItem (newItem, selectedItemCount);", "-    \t\t\t\tOS.TreeViewItem_IsSelected (newItem.handle, true);", "-    \t\t\t} else {", "-    \t\t\t\tremoveSelectedItem (newItem);", "-    \t\t\t\tOS.TreeViewItem_IsSelected (newItem.handle, false);", "-    \t\t\t}", "-    \t\t} else {", "-    \t\t\tif (anchor != null) removeSelectedItem (anchor);", "+\t\t\tif (unselect != null) {", "+    \t\t\tOS.TreeViewItem_IsSelected (unselect.handle, false);", "+    \t\t\tunselect = null;", "-    \t\tint oldItemRef = OS.RoutedPropertyChangedEventArgs_OldValue (args);", "-    \t\tif (oldItemRef != 0) {", "-    \t\t\tfor (int i = 0; i < selectedItemCount; i++) {", "-    \t\t\t\tif (OS.Object_Equals (oldItemRef, selectedItems [i].handle)) {", "-    \t\t\t\t\tOS.TreeViewItem_IsSelected (oldItemRef, true);", "-    \t\t\t\t\tbreak;", "-    \t\t\t\t}", "-    \t\t\t}", "-    \t\t\tOS.GCHandle_Free (oldItemRef);", "+    \t\tif (reselect != null) {", "+    \t\t\tOS.TreeViewItem_IsSelected (reselect.handle, true);", "+    \t\t\treselect = null;", "+    \t\tanchor = newItem;", "-\tOS.PropertyInfo_SetValueBoolean (property, handle, false, 0);", "-\tOS.GCHandle_Free (property);", "+    setIsSelectionActiveProperty (false);", "+}"]}], "num": 1291}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fcb921731196886f20618f4e1df741f7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4bcb94a9aaa71cfa12c9e38586095c18", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "4edc576de20a88abac088ae701d29ce3e54ede4f", "commitAfterChange": "c2ec875b36ecf39df432358c14d183b7d7f45fe0", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["-//\tint width = OS.CGImageGetWidth(handle);", "-//\tint height = OS.CGImageGetHeight(handle);", "-//\tint bpr = OS.CGImageGetBytesPerRow(handle);", "-//\tint bpp = OS.CGImageGetBitsPerPixel(handle);\t", "-//\tint dataSize = height * bpr;", "-//\tbyte[] srcData = new byte[dataSize];", "-//\tOS.memmove(srcData, data, dataSize);", "-//\t", "-//\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "-//\tImageData data = new ImageData(width, height, bpp, palette);", "-//\tdata.data = srcData;", "-//\tdata.bytesPerLine = bpr;", "-//", "-//\tdata.transparentPixel = transparentPixel;", "-//\tif (transparentPixel == -1 && type == SWT.ICON) {", "-//\t\t/* Get the icon mask data */", "-//\t\tint maskPad = 2;", "-//\t\tint maskBpl = (((width + 7) / 8) + (maskPad - 1)) / maskPad * maskPad;", "-//\t\tbyte[] maskData = new byte[height * maskBpl];", "-//\t\tint offset = 0, maskOffset = 0;", "-//\t\tfor (int y = 0; y<height; y++) {", "-//\t\t\tfor (int x = 0; x<width; x++) {", "-//\t\t\t\tif (srcData[offset] != 0) {", "-//\t\t\t\t\tmaskData[maskOffset + (x >> 3)] |= (1 << (7 - (x & 0x7)));", "-//\t\t\t\t} else {", "-//\t\t\t\t\tmaskData[maskOffset + (x >> 3)] &= ~(1 << (7 - (x & 0x7)));", "-//\t\t\t\t}", "-//\t\t\t\toffset += 4;", "-//\t\t\t}", "-//\t\t\tmaskOffset += maskBpl;", "-//\t\t}", "-//\t\tdata.maskData = maskData;", "-//\t\tdata.maskPad = maskPad;", "-//\t}", "-//\tfor (int i = 0; i < srcData.length; i+= 4) {", "-//\t\tsrcData[i] = 0;", "-//\t}", "-//\tdata.alpha = alpha;", "-//\tif (alpha == -1 && alphaData != null) {", "-//\t\tdata.alphaData = new byte[alphaData.length];", "-//\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);", "-//\t}", "-//\treturn data;", "-\treturn null;", "+\tNSSize size = handle.size();", "+\tint width = (int)size.width;", "+\tint height = (int)size.height;", "+\tNSBitmapImageRep imageRep = this.imageRep;", "+\tint bpr = imageRep.bytesPerRow();", "+\tint bpp = imageRep.bitsPerPixel();", "+\tint dataSize = height * bpr;", "+\tbyte[] srcData = new byte[dataSize];", "+\tOS.memmove(srcData, imageRep.bitmapData(), dataSize);", "+\t", "+\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "+\tImageData data = new ImageData(width, height, bpp, palette);", "+\tdata.data = srcData;", "+\tdata.bytesPerLine = bpr;", "+", "+\tdata.transparentPixel = transparentPixel;", "+\tif (transparentPixel == -1 && type == SWT.ICON) {", "+\t\t/* Get the icon mask data */", "+\t\tint maskPad = 2;", "+\t\tint maskBpl = (((width + 7) / 8) + (maskPad - 1)) / maskPad * maskPad;", "+\t\tbyte[] maskData = new byte[height * maskBpl];", "+\t\tint offset = 0, maskOffset = 0;", "+\t\tfor (int y = 0; y<height; y++) {", "+\t\t\tfor (int x = 0; x<width; x++) {", "+\t\t\t\tif (srcData[offset] != 0) {", "+\t\t\t\t\tmaskData[maskOffset + (x >> 3)] |= (1 << (7 - (x & 0x7)));", "+\t\t\t\t} else {", "+\t\t\t\t\tmaskData[maskOffset + (x >> 3)] &= ~(1 << (7 - (x & 0x7)));", "+\t\t\t\t}", "+\t\t\t\toffset += 4;", "+\t\t\t}", "+\t\t\tmaskOffset += maskBpl;", "+\t\t}", "+\t\tdata.maskData = maskData;", "+\t\tdata.maskPad = maskPad;", "+\t}", "+\tfor (int i = 0; i < srcData.length; i+= 4) {", "+\t\tsrcData[i] = 0;", "+\t}", "+\tdata.alpha = alpha;", "+\tif (alpha == -1 && alphaData != null) {", "+\t\tdata.alphaData = new byte[alphaData.length];", "+\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);", "+\t}", "+\treturn data;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8722db46dc8e93cb320c191d5dfbf6b2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "9deefd18be8de01a672cfca15620a560b1ae5f22", "commitAfterChange": "d67b8caceb3f10df6a8e238427498db262144133", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["+ */", "+public ImageData getImageData() {", "+\tif (isDisposed()) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);", "+", "+\tint[] w = new int[1], h = new int[1];", "+ \tOS.gdk_drawable_get_size(pixmap, w, h);", "+ \tint width = w[0], height = h[0]; \t", "+\tint pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB(), false, 8, width, height);", "+\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint colormap = OS.gdk_colormap_get_system();", "+\tOS.gdk_pixbuf_get_from_drawable(pixbuf, pixmap, colormap, 0, 0, 0, 0, width, height);", "+\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "+\tint pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "+\tbyte[] srcData = new byte[stride * height];", "+\tOS.memmove(srcData, pixels, srcData.length);", "+\tOS.g_object_unref(pixbuf);", "+", "+\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "+\tImageData data = new ImageData(width, height, 24, palette);", "+\tdata.data = srcData;", "+\tdata.bytesPerLine = stride;", "+", "+\tif (transparentPixel == -1 && type == SWT.ICON && mask != 0) {", "+\t\t/* Get the icon mask data */", "+\t\tint gdkImagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);", "+\t\tif (gdkImagePtr == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tGdkImage gdkImage = new GdkImage(gdkImagePtr);", "+\t\tbyte[] maskData = new byte[gdkImage.bpl * height];", "+\t\tOS.memmove(maskData, gdkImage.mem, maskData.length);", "+\t\tOS.g_object_unref(gdkImagePtr);", "+", "+\t\tdata.maskPad = 4;", "+\t\tdata.maskData = maskData;", "+\t\t/* Bit swap the mask data if necessary */", "+\t\tif (gdkImage.byte_order == OS.GDK_LSB_FIRST) {", "+\t\t\tfor (int i = 0; i < maskData.length; i++) {", "+\t\t\t\tbyte b = maskData[i];", "+\t\t\t\tmaskData[i] = (byte)(((b & 0x01) << 7) | ((b & 0x02) << 5) | ", "+\t\t\t\t\t((b & 0x04) << 3) |\t((b & 0x08) << 1) | ((b & 0x10) >> 1) | ", "+\t\t\t\t\t((b & 0x20) >> 3) |\t((b & 0x40) >> 5) | ((b & 0x80) >> 7));", "+\t\t\t}", "+\t\t}", "+\t}", "+\tdata.transparentPixel = transparentPixel;", "+\tdata.alpha = alpha;", "+\tif (alpha == -1 && alphaData != null) {", "+\t\tdata.alphaData = new byte[alphaData.length];", "+\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);", "+\t}", "+\treturn data;", "+}", "- */", "-public ImageData getImageData() {", "-\treturn new Pixbuffer(this).getImageData();", "-}"]}], "num": 46955}
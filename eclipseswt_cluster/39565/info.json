{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1120a860f63e4e5f414e2661c4b772d4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09cf79fae6ee0cc127cbc75e63875ed1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/NativesGenerator.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public void generate(Method method)", "signatureAfterChange": "  public void generate(JNIMethod method)", "diff": ["-public void generate(Method method) {", "-\tMethodData methodData = getMetaData().getMetaData(method);", "-\tif (methodData.getFlag(FLAG_NO_GEN)) return;", "-\tClass returnType = method.getReturnType();", "-\tClass[] paramTypes = method.getParameterTypes();", "-\tString function = getFunctionName(method);", "-\t", "-\tif (!(returnType == Void.TYPE || returnType.isPrimitive() || isSystemClass(returnType) || returnType == String.class)) {", "+public void generate(JNIMethod method) {", "+\tif (method.getFlag(FLAG_NO_GEN)) return;", "+\tJNIType returnType = method.getReturnType(), returnType64 = method.getReturnType64();\t", "+\tif (!(returnType.isType(\"void\") || returnType.isPrimitive() || isSystemClass(returnType) || returnType.isType(\"java.lang.String\"))) {", "-\t", "-\tgenerateSourceStart(function);", "+\tJNIParameter[] params = method.getParameters();", "+\tString function = getFunctionName(method), function64 = getFunctionName(method, method.getParameterTypes64());\t", "+\tgenerateSourceStart(function, function64);", "+\tboolean sameFunction = function.equals(function64);", "+\tif (!sameFunction) {", "+\t\toutput(\"#ifndef \");", "+\t\toutput(JNI64);", "+\t\toutputln();", "+\t}", "-\t\tgenerateFunctionPrototype(method, function, paramTypes, returnType, true);", "+\t\tgenerateFunctionPrototype(method, function, params, returnType, returnType64, true);", "-\tgenerateFunctionPrototype(method, function, paramTypes, returnType, false);", "-\tgenerateFunctionBody(method, methodData, function, paramTypes, returnType);", "+\tgenerateFunctionPrototype(method, function, params, returnType, returnType64, !sameFunction);", "+\tif (!function.equals(function64)) {", "+\t\toutputln();", "+\t\toutputln(\"#else\");", "+\t\tif (isCPP) {", "+\t\t\toutput(\"extern \\\"C\\\" \");", "+\t\t\tgenerateFunctionPrototype(method, function64, params, returnType, returnType64, true);", "+\t\t\toutputln(\";\");", "+\t\t}", "+\t\tgenerateFunctionPrototype(method, function64, params, returnType, returnType64, !sameFunction);", "+\t\toutputln();", "+\t\toutputln(\"#endif\");", "+\t}", "+\tgenerateFunctionBody(method, function, function64, params, returnType, returnType64);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09287cb065089a0968f5f670d52d3c9f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/NativesGenerator.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 22, "signatureBeforeChange": "  void generateFunctionBody(Method method, MethodData methodData, String function, Class[] paramTypes, Class returnType)", "signatureAfterChange": "  void generateFunctionBody(JNIMethod method, String function, String function64, JNIParameter[] params, JNIType returnType, JNIType returnType64)", "diff": ["-void generateFunctionBody(Method method, MethodData methodData, String function, Class[] paramTypes, Class returnType) {", "+void generateFunctionBody(JNIMethod method, String function, String function64, JNIParameter[] params, JNIType returnType, JNIType returnType64) {", "-\tboolean isMemove = (name.equals(\"memmove\") || name.equals(\"MoveMemory\")) && paramTypes.length == 2 && returnType == Void.TYPE;", "+\tboolean isMemove = (name.equals(\"memmove\") || name.equals(\"MoveMemory\")) && params.length == 2 && returnType.isType(\"void\");", "-\t\tgenerateMemmove(method, function, paramTypes);", "+\t\tgenerateMemmove(method, function, function64, params);", "-\t\tboolean needsReturn = generateLocalVars(method, paramTypes, returnType);", "-\t\tgenerateEnterMacro(method, function);", "-\t\tboolean genFailTag = generateGetters(method, paramTypes);", "-\t\tif (methodData.getFlag(FLAG_DYNAMIC)) {", "-\t\t\tgenerateDynamicFunctionCall(method, methodData, paramTypes, returnType, needsReturn);", "+\t\tboolean needsReturn = generateLocalVars(method, params, returnType, returnType64);", "+\t\tgenerateEnterExitMacro(method, function, function64, true);", "+\t\tboolean genFailTag = generateGetters(method, params);", "+\t\tif (method.getFlag(FLAG_DYNAMIC)) {", "+\t\t\tgenerateDynamicFunctionCall(method, params, returnType, returnType64, needsReturn);", "-\t\t\tgenerateFunctionCall(method, methodData, paramTypes, returnType, needsReturn);", "+\t\t\tgenerateFunctionCall(method, params, returnType, returnType64, needsReturn);", "-\t\tgenerateSetters(method, paramTypes);", "-\t\tgenerateExitMacro(method, function);", "+\t\tgenerateSetters(method, params);", "+\t\tgenerateEnterExitMacro(method, function, function64, false);"]}], "num": 39565}
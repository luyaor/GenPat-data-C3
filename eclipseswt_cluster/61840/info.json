{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "23174491752142bafa3e0762c7064128", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbe22d9adbabb3cf23ef1c96f570304d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java", "commitBeforeChange": "14847fc50ac21dbfae0a2bd75c455ca661cd2bd0", "commitAfterChange": "db1f6bc7e04f75d6fd9d429b8b4d02d4787e43d9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public void test_getPixelsIII$BI()", "signatureAfterChange": "  public void test_getPixelsIII$BI()", "diff": ["-\twarnUnimpl(\"Test test_getPixelsIII$BI not written\");", "+\tbyte value;", "+\tfinal int SIZE = 20; ", "+\tfinal int GET_WIDTH = 10;", "+\tfinal int OFFSET = 10;", "+\tbyte[] pixelData = new byte[SIZE];", "+", "+\t// test 1 bit", "+\timageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 1, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));", "+\timageData.getPixels(0, 1, GET_WIDTH, pixelData, OFFSET);", "+\tfor (int i = 0; i < pixelData.length; i ++) {", "+\t\tassertEquals(\":a:\", 0, pixelData[i]);", "+\t}", "+", "+\tbyte[] values = new byte[]{0x1, 0x1, 0x1, 0x1, 0x1};", "+\timageData.setPixels(0, 1, values.length, values, 0);", "+\timageData.getPixels(0, 1, GET_WIDTH, pixelData, OFFSET);", "+\tfor (int i = 0; i < pixelData.length; i++) {", "+\t\tif (i < OFFSET) {", "+\t\t\tassertEquals(\":b:\", 0, pixelData[i]);", "+\t\t} else if (i < OFFSET + values.length) {", "+\t\t\tassertEquals(\":c:\", (byte) values[i-OFFSET], pixelData[i]);", "+\t\t} else if (i < OFFSET+GET_WIDTH) {", "+\t\t\tassertEquals(\":d:\", 0, pixelData[i]);", "+\t\t}", "+\t}", "+", "+\t// test 2 bit", "+\timageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 2, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));", "+\timageData.getPixels(0, 1, GET_WIDTH, pixelData, OFFSET);", "+\tfor (int i = 0; i < pixelData.length; i ++) {", "+\t\tassertEquals(\":e:\", 0, pixelData[i]);", "+\t}", "+", "+\tvalues = new byte[]{0x1, 0x2, 0x3, 0x2, 0x1};", "+\timageData.setPixels(0, 1, values.length, values, 0);", "+\timageData.getPixels(0, 1, GET_WIDTH, pixelData, OFFSET);", "+\tfor (int i = 0; i < pixelData.length; i++) {", "+\t\tif (i < OFFSET) {", "+\t\t\tassertEquals(\":f:\", 0, pixelData[i]);", "+\t\t} else if (i < OFFSET + values.length) {", "+\t\t\tassertEquals(\":g:\", (byte) values[i-OFFSET], pixelData[i]);\t", "+\t\t} else if (i < OFFSET+GET_WIDTH) {", "+\t\t\tassertEquals(\":h:\", 0, pixelData[i]);", "+\t\t}", "+\t}", "+", "+\t// test 4 bit", "+\timageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 4, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));", "+\timageData.getPixels(0, 1, GET_WIDTH, pixelData, OFFSET);", "+\tfor (int i = 0; i < pixelData.length; i ++) {", "+\t\tassertEquals(\":i:\", 0, pixelData[i]);", "+\t}", "+", "+\tvalues = new byte[]{0x1, 0x2, 0x3, 0x4, 0xF};", "+\timageData.setPixels(0, 1, values.length, values, 0);", "+\timageData.getPixels(0, 1, GET_WIDTH, pixelData, OFFSET);", "+\tfor (int i = 0; i < pixelData.length; i++) {", "+\t\tif (i < OFFSET) {", "+\t\t\tassertEquals(\":j:\", 0, pixelData[i]);", "+\t\t} else if (i < OFFSET + values.length) {", "+\t\t\tassertEquals(\":k:\", (byte) values[i-OFFSET], pixelData[i]);\t", "+\t\t} else if (i < OFFSET+GET_WIDTH) {", "+\t\t\tassertEquals(\":l:\", 0, pixelData[i]);", "+\t\t}", "+\t}", "+", "+\t// test 8 bit", "+\timageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 8, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));", "+\timageData.getPixels(0, 1, GET_WIDTH, pixelData, OFFSET);", "+\tfor (int i = 0; i < pixelData.length; i ++) {", "+\t\tassertEquals(\":m:\", 0, pixelData[i]);", "+\t}", "+", "+\tvalues = new byte[]{0x1, 0x2, 0x3, 0xF, (byte)0xFF};", "+\timageData.setPixels(0, 1, values.length, values, 0);", "+\timageData.getPixels(0, 1, GET_WIDTH, pixelData, OFFSET);", "+\tfor (int i = 0; i < pixelData.length; i++) {", "+\t\tif (i < OFFSET) {", "+\t\t\tassertEquals(\":n:\", 0, pixelData[i]);", "+\t\t} else if (i < OFFSET + values.length) {", "+\t\t\tassertEquals(\":o:\", (byte) values[i-OFFSET], pixelData[i]);\t", "+\t\t} else if (i < OFFSET+GET_WIDTH) {", "+\t\t\tassertEquals(\":p:\", 0, pixelData[i]);", "+\t\t}", "+\t}", "+\t", "+\t// exception cases", "+\ttry {", "+\t\timageData.getPixels(0, 1, GET_WIDTH*GET_WIDTH, pixelData, OFFSET);", "+\t\tfail(\"No exception thrown for getWidth out of bounds\");", "+\t} catch (IndexOutOfBoundsException e) {", "+\t}", "+\ttry {", "+\t\timageData.getPixels(0, 1, GET_WIDTH, (byte[]) null, OFFSET);", "+\t\tfail(\"No exception thrown for pixels == null\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for pixels == null\", SWT.ERROR_NULL_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.getPixels(-1, 1, GET_WIDTH, pixelData, OFFSET);", "+\t\tfail(\"No exception thrown for x out of bounds\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for x out of bounds\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.getPixels(IMAGE_DIMENSION, 1, GET_WIDTH, pixelData, OFFSET);", "+\t\tfail(\"No exception thrown for x out of bounds\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for x out of bounds\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.getPixels(0, -1, GET_WIDTH, pixelData, OFFSET);", "+\t\tfail(\"No exception thrown for y out of bounds\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for y out of bounds\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.getPixels(0, IMAGE_DIMENSION, GET_WIDTH, pixelData, OFFSET);", "+\t\tfail(\"No exception thrown for y out of bounds\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for y out of bounds\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.getPixels(0, 1, -1, pixelData, OFFSET);", "+\t\tfail(\"No exception thrown for getWidth < 0\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for getWidth < 0\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}", "+\timageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 32, new PaletteData(0xFF0000, 0xFF00, 0xFF));\t", "+\ttry {", "+\t\timageData.getPixels(0, 1, GET_WIDTH, pixelData, OFFSET);", "+\t\tfail(\"No exception thrown for invalid depth\");", "+\t} catch (SWTException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for invalid depth\", SWT.ERROR_UNSUPPORTED_DEPTH, e);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4301bebb314f4ce4105ca10ce5e5a792", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java", "commitBeforeChange": "14847fc50ac21dbfae0a2bd75c455ca661cd2bd0", "commitAfterChange": "db1f6bc7e04f75d6fd9d429b8b4d02d4787e43d9", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  public void test_setPixelsIII$II()", "signatureAfterChange": "  public void test_setPixelsIII$II()", "diff": ["-\twarnUnimpl(\"Test test_setPixelsIII$II not written\");", "+\tint value;", "+\tfinal int SIZE = 20; ", "+\tfinal int OFFSET = 1;", "+\tint[] pixelData = new int[SIZE];", "+", "+\t// test 1 bit", "+\timageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 1, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));", "+\tint[] values = new int[]{0x1, 0x1, 0x1, 0x1, 0x1};", "+\timageData.setPixels(0, 1, values.length - OFFSET, values, OFFSET);", "+\timageData.getPixels(0, 1, IMAGE_DIMENSION, pixelData, 0);", "+\tfor (int i = 0; i < pixelData.length; i++) {", "+\t\tif (i + OFFSET < values.length) {", "+\t\t\tassertEquals(\":a:\", values[i + OFFSET], pixelData[i]);", "+\t\t} else {", "+\t\t\tassertEquals(\":b:\", 0, pixelData[i]);", "+\t\t}", "+\t}", "+", "+\t// test 2 bit", "+\timageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 2, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));", "+\tvalues = new int[]{0x1, 0x2, 0x3, 0x2, 0x1};", "+\timageData.setPixels(0, 1, values.length - OFFSET, values, OFFSET);", "+\timageData.getPixels(0, 1, IMAGE_DIMENSION, pixelData, 0);", "+\tfor (int i = 0; i < pixelData.length; i++) {", "+\t\tif (i + OFFSET < values.length) {", "+\t\t\tassertEquals(\":c:\", values[i + OFFSET], pixelData[i]);", "+\t\t} else {", "+\t\t\tassertEquals(\":d:\", 0, pixelData[i]);", "+\t\t}", "+\t}", "+", "+\t// test 4 bit", "+\timageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 4, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));", "+\tvalues = new int[]{0x1, 0x2, 0x3, 0x4, 0xF};", "+\timageData.setPixels(0, 1, values.length - OFFSET, values, OFFSET);", "+\timageData.getPixels(0, 1, IMAGE_DIMENSION, pixelData, 0);", "+\tfor (int i = 0; i < pixelData.length; i++) {", "+\t\tif (i + OFFSET < values.length) {", "+\t\t\tassertEquals(\":e:\", values[i + OFFSET], pixelData[i]);", "+\t\t} else {", "+\t\t\tassertEquals(\":f:\", 0, pixelData[i]);", "+\t\t}", "+\t}", "+", "+\t// test 8 bit", "+\timageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 8, new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)}));", "+\tvalues = new int[]{0x1, 0x2, 0x3, 0xF, 0xFF};", "+\timageData.setPixels(0, 1, values.length - OFFSET, values, OFFSET);", "+\timageData.getPixels(0, 1, IMAGE_DIMENSION, pixelData, 0);", "+\tfor (int i = 0; i < pixelData.length; i++) {", "+\t\tif (i + OFFSET < values.length) {", "+\t\t\tassertEquals(\":g:\", values[i + OFFSET], pixelData[i]);", "+\t\t} else {", "+\t\t\tassertEquals(\":h:\", 0, pixelData[i]);", "+\t\t}", "+\t}", "+", "+\t// test 16 bit", "+\timageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 16, new PaletteData(0xF800, 0x7E0, 0x1F));", "+\tvalues = new int[]{0, 0x2, 0xF, 0xFF, 0xFFAA};", "+\timageData.setPixels(0, 1, values.length - OFFSET, values, OFFSET);", "+\timageData.getPixels(0, 1, IMAGE_DIMENSION, pixelData, 0);", "+\tfor (int i = 0; i < pixelData.length; i++) {", "+\t\tif (i + OFFSET < values.length) {", "+\t\t\tassertEquals(\":i:\", values[i + OFFSET], pixelData[i]);", "+\t\t} else {", "+\t\t\tassertEquals(\":j:\", 0, pixelData[i]);", "+\t\t}", "+\t}", "+", "+\t// test 24 bit", "+\timageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 24, new PaletteData(0xFF0000, 0xFF00, 0xFF));", "+\tvalues = new int[]{0, 0xFF, 0xFFAA, 0xFF00AA};", "+\timageData.setPixels(0, 1, values.length - OFFSET, values, OFFSET);", "+\timageData.getPixels(0, 1, IMAGE_DIMENSION, pixelData, 0);", "+\tfor (int i = 0; i < pixelData.length; i++) {", "+\t\tif (i + OFFSET < values.length) {", "+\t\t\tassertEquals(\":k:\", values[i + OFFSET], pixelData[i]);", "+\t\t} else {", "+\t\t\tassertEquals(\":l:\", 0, pixelData[i]);", "+\t\t}", "+\t}", "+", "+\t// test 32 bit", "+\timageData = new ImageData(IMAGE_DIMENSION, IMAGE_DIMENSION, 32, new PaletteData(0xFF000000, 0xFF00, 0xFF));", "+\tvalues = new int[]{0, 0xFF, 0xFFAA, 0xFF00AA00};", "+\timageData.setPixels(0, 1, values.length - OFFSET, values, OFFSET);", "+\timageData.getPixels(0, 1, IMAGE_DIMENSION, pixelData, 0);", "+\tfor (int i = 0; i < pixelData.length; i++) {", "+\t\tif (i + OFFSET < values.length) {", "+\t\t\tassertEquals(\":m:\", values[i + OFFSET], pixelData[i]);", "+\t\t} else {", "+\t\t\tassertEquals(\":n:\", 0, pixelData[i]);", "+\t\t}", "+\t}", "+", "+\t// exception cases", "+\ttry {", "+\t\timageData.setPixels(0, 1, IMAGE_DIMENSION*IMAGE_DIMENSION, pixelData, OFFSET);", "+\t\tfail(\"No exception thrown for putWidth out of bounds\");", "+\t} catch (IndexOutOfBoundsException e) {", "+\t}", "+\ttry {", "+\t\timageData.setPixels(0, 1, IMAGE_DIMENSION, (int[]) null, OFFSET);", "+\t\tfail(\"No exception thrown for pixels == null\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for pixels == null\", SWT.ERROR_NULL_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.setPixels(-1, 1, IMAGE_DIMENSION, pixelData, OFFSET);", "+\t\tfail(\"No exception thrown for x out of bounds\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for x out of bounds\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.setPixels(IMAGE_DIMENSION, 1, IMAGE_DIMENSION, pixelData, OFFSET);", "+\t\tfail(\"No exception thrown for x out of bounds\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for x out of bounds\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.setPixels(0, -1, IMAGE_DIMENSION, pixelData, OFFSET);", "+\t\tfail(\"No exception thrown for y out of bounds\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for y out of bounds\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.setPixels(0, IMAGE_DIMENSION, IMAGE_DIMENSION, pixelData, OFFSET);", "+\t\tfail(\"No exception thrown for y out of bounds\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for y out of bounds\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}", "+\ttry {", "+\t\timageData.setPixels(0, 1, -1, pixelData, OFFSET);", "+\t\tfail(\"No exception thrown for putWidth < 0\");", "+\t} catch (IllegalArgumentException e) {", "+\t\tassertEquals(\"Incorrect exception thrown for putWidth < 0\", SWT.ERROR_INVALID_ARGUMENT, e);", "+\t}"]}], "num": 61840}
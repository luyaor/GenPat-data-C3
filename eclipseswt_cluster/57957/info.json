{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c7ff722a0a4c5f3e230fd12702d297a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa7166a39484fcf5e79224e070d64e48", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 359, "methodNumberAfterChange": 360, "signatureBeforeChange": " \tint get_table(int ppTable)", "signatureAfterChange": " \tint get_table(int ppTable)", "diff": ["-\t\tif (accessible != null) {", "-\t\t\taccessible.AddRef();", "-\t\t\tsetPtrVARIANT(ppTable, COM.VT_DISPATCH, accessible.getAddress());", "+\t\tif (accessible == null) {", "+\t\t\t// TODO: This is not supposed to return S_FALSE. How do we fail gracefully? SWT exception?", "+\t\t\tCOM.MoveMemory(ppTable, new int /*long*/[] { 0 }, OS.PTR_SIZEOF);", "+\t\t\treturn COM.S_FALSE;", "+\t\taccessible.AddRef();", "+\t\tCOM.MoveMemory(ppTable, new int /*long*/[] { accessible.getAddress() }, OS.PTR_SIZEOF);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cbdb4d60ad842a9c8e3ebfb5ee1bb06", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 332, "methodNumberAfterChange": 333, "signatureBeforeChange": " \tint get_caption(int ppAccessible)", "signatureAfterChange": " \tint get_caption(int ppAccessible)", "diff": ["-\t\tif (accessible != null) {", "-\t\t\taccessible.AddRef();", "-\t\t\tsetPtrVARIANT(ppAccessible, COM.VT_DISPATCH, accessible.getAddress());", "+\t\tif (accessible == null) {", "+\t\t\tCOM.MoveMemory(ppAccessible, new int /*long*/[] { 0 }, OS.PTR_SIZEOF);", "+\t\t\treturn COM.S_FALSE;", "+\t\taccessible.AddRef();", "+\t\tCOM.MoveMemory(ppAccessible, new int /*long*/[] { accessible.getAddress() }, OS.PTR_SIZEOF);", "-\t\t// TODO: @retval S_FALSE if there is nothing to return, [out] value is NULL"]}], "num": 57957}
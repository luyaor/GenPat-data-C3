{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42c145512aa26fef6ca5fd6bf80081ed", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47e31944b3aefbf2a529ff641155a42c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "4782372115ecc2c5d5fcd4afc2822f4541a873b7", "commitAfterChange": "9524f8f97224b1a886d71621a713f7ad07d4c65a", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": "  public boolean setText (String html)", "signatureAfterChange": "  public boolean setText (String html)", "diff": ["-\t/*", "-\t * Convert the String containing HTML to an array of", "-\t * bytes with UTF-8 data.", "-\t */", "+\t/* convert the String containing HTML to an array of bytes with UTF-8 data */", "-\t * Feature of XULRunner.  Setting the browser's content from a stream does not", "-\t * fire a DOM \"unload\" event for the previous page, which is the event that", "-\t * is used to unhook registered DOM listeners.  As a workaround, unhook them", "-\t * now before setting the new page content.  ", "+\t * First detect if the nsIWebBrowserStream interface is available, since this interface is frozen.", "+\t * However, this may fail because this interface was only introduced as of mozilla 1.8; if this", "+\t * interface is not found then use the pre-1.8 approach of utilizing nsIDocShell instead. ", "-\tif (IsXULRunner) unhookDOMListeners ();", "-", "-\tint rc = XPCOM.NS_GetServiceManager (result);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-", "-\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\tresult[0] = 0;", "-\trc = serviceManager.GetService (XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\tserviceManager.Release ();", "-", "-\tnsIIOService ioService = new nsIIOService (result[0]);", "-\tresult[0] = 0;", "-\t/*", "-\t* Note.  Mozilla ignores LINK tags used to load CSS stylesheets", "-\t* when the URI protocol for the nsInputStreamChannel", "-\t* is about:blank.  The fix is to specify the file protocol.", "-\t*/", "-\tbyte[] aString = MozillaDelegate.wcsToMbcs (null, URI_FROMMEMORY, false);", "-\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);", "-\trc = ioService.NewURI (aSpec, null, 0, result);", "-\tXPCOM.nsEmbedCString_delete (aSpec);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\tioService.Release ();", "-\t", "-\tnsIURI uri = new nsIURI (result[0]);", "-\tresult[0] = 0;", "-", "-\t/* aContentType */", "-\tbyte[] contentTypeBuffer = MozillaDelegate.wcsToMbcs (null, \"text/html\", true); // $NON-NLS-1$", "-\tint /*long*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);", "-", "-\t/*", "-\t * First try to use nsIWebBrowserStream to set the text into the Browser, since this", "-\t * interface is frozen.  However, this may fail because this interface was only introduced", "-\t * as of mozilla 1.8; if this interface is not found then use the pre-1.8 approach of", "-\t * utilizing nsIDocShell instead. ", "-\t */", "-\tresult[0] = 0;", "-\trc = webBrowser.QueryInterface (nsIWebBrowserStream.NS_IWEBBROWSERSTREAM_IID, result);", "+\tint rc = webBrowser.QueryInterface (nsIWebBrowserStream.NS_IWEBBROWSERSTREAM_IID, result);", "-\t\tnsIWebBrowserStream stream = new nsIWebBrowserStream (result[0]);", "-\t\trc = stream.OpenStream (uri.getAddress (), aContentType);", "+\t\tnew nsISupports (result[0]).Release ();", "+\t\tresult[0] = 0;", "+", "+\t\t/*", "+\t\t* Feature of nsIWebBrowserStream.  Setting the browser's content directly through", "+\t\t* its nsIWebBrowserStream does not cause a page change to occur, and therefore the", "+\t\t* events that typically signal a page change are not fired.  To make this behave", "+\t\t* as expected, navigate to about:blank first, and then set the html content once", "+\t\t* the page has loaded.", "+\t\t*/", "+", "+\t\t/*", "+\t\t* If the htmlBytes field is non-null then the about:blank page is already being", "+\t\t* loaded, so no Navigate is required.  Just set the html that is to be shown.", "+\t\t*/", "+\t\tboolean blankLoading = htmlBytes != null;", "+\t\thtmlBytes = data;", "+\t\tif (blankLoading) return true;", "+", "+\t\t/* navigate to about:blank */", "+\t\trc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);", "-\t\tint /*long*/ ptr = C.malloc (data.length);", "-\t\tXPCOM.memmove (ptr, data, data.length);", "-\t\tint pageSize = 8192;", "-\t\tint pageCount = data.length / pageSize + 1;", "-\t\tint /*long*/ current = ptr;", "-\t\tfor (int i = 0; i < pageCount; i++) {", "-\t\t\tint length = i == pageCount - 1 ? data.length % pageSize : pageSize;", "-\t\t\tif (length > 0) {", "-\t\t\t\trc = stream.AppendToStream (current, length);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t}", "-\t\t\tcurrent += pageSize;", "-\t\t}", "-\t\trc = stream.CloseStream ();", "+\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\tnsIWebNavigation webNavigation = new nsIWebNavigation (result[0]);", "+\t\tresult[0] = 0;", "+\t    char[] uri = new char[ABOUT_BLANK.length () + 1];", "+\t    ABOUT_BLANK.getChars (0, ABOUT_BLANK.length (), uri, 0);", "+\t\trc = webNavigation.LoadURI (uri, nsIWebNavigation.LOAD_FLAGS_NONE, 0, 0, 0);", "-\t\tC.free (ptr);", "-\t\tstream.Release ();", "+\t\twebNavigation.Release ();", "+\t\tresult[0] = 0;", "+", "+\t\tbyte[] contentTypeBuffer = MozillaDelegate.wcsToMbcs (null, \"text/html\", true); // $NON-NLS-1$", "+\t\tint /*long*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);", "+\t\tbyte[] contentCharsetBuffer = MozillaDelegate.wcsToMbcs (null, \"UTF-8\", true);\t//$NON-NLS-1$", "+\t\tint /*long*/ aContentCharset = XPCOM.nsEmbedCString_new (contentCharsetBuffer, contentCharsetBuffer.length);", "+", "+\t\trc = XPCOM.NS_GetServiceManager (result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\t\tresult[0] = 0;", "+\t\trc = serviceManager.GetService (XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\tserviceManager.Release ();", "+", "+\t\tnsIIOService ioService = new nsIIOService (result[0]);", "+\t\tresult[0] = 0;", "+\t\t/*", "+\t\t* Note.  Mozilla ignores LINK tags used to load CSS stylesheets", "+\t\t* when the URI protocol for the nsInputStreamChannel", "+\t\t* is about:blank.  The fix is to specify the file protocol.", "+\t\t*/", "+\t\tbyte[] aString = MozillaDelegate.wcsToMbcs (null, URI_FROMMEMORY, false);", "+\t\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);", "+\t\trc = ioService.NewURI (aSpec, null, 0, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\tXPCOM.nsEmbedCString_delete (aSpec);", "+\t\tioService.Release ();", "+\t\t", "+\t\tnsIURI uri = new nsIURI (result[0]);", "+\t\tresult[0] = 0;", "+", "-\t\trc = interfaceRequestor.GetInterface (nsIDocShell.NS_IDOCSHELL_IID, result);\t\t\t\t", "+\t\trc = interfaceRequestor.GetInterface (nsIDocShell.NS_IDOCSHELL_IID, result);", "+\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\tbyte[] contentCharsetBuffer = MozillaDelegate.wcsToMbcs (null, \"UTF-8\", true);\t//$NON-NLS-1$", "-\t\tint /*long*/ aContentCharset = XPCOM.nsEmbedCString_new (contentCharsetBuffer, contentCharsetBuffer.length);", "-\t\trc = docShell.LoadStream(inputStream.getAddress (), uri.getAddress (), aContentType,  aContentCharset, 0);", "+\t\trc = docShell.LoadStream (inputStream.getAddress (), uri.getAddress (), aContentType,  aContentCharset, 0);", "-\t\tXPCOM.nsEmbedCString_delete (aContentCharset);", "+\t\turi.Release ();", "+\t\tXPCOM.nsEmbedCString_delete (aContentCharset);", "+\t\tXPCOM.nsEmbedCString_delete (aContentType);", "-\tXPCOM.nsEmbedCString_delete (aContentType);", "-\turi.Release ();", "-", "-\t/*", "-\t * Feature of XULRunner.  Setting the browser's content from a stream does not", "-\t * lead to nsIWebProgressListener.OnStateChange being called with STATE_TRANSFERRING,", "-\t * which is the event that is used to hook DOM listeners, so hook them here.", "-\t */", "-\tif (IsXULRunner) hookDOMListeners ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e190853c8614c26e81489c6bd1e477a3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "44b3178ffce3d19c1b2c77898fcf07c89beddda5", "commitAfterChange": "f51b769b025a9b25c5d56c48323852378a03a4ba", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": "  public boolean setText (String html)", "signatureAfterChange": "  public boolean setText (String html)", "diff": ["-\tbyte[] contentTypeBuffer = MozillaDelegate.wcsToMbcs (null, \"text/html\", true); // $NON-NLS-1$", "-\tint /*long*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);", "-\tbyte[] contentCharsetBuffer = MozillaDelegate.wcsToMbcs (null, \"UTF-8\", true);\t//$NON-NLS-1$", "-\tint /*long*/ aContentCharset = XPCOM.nsEmbedCString_new (contentCharsetBuffer, contentCharsetBuffer.length);", "-", "-\tint rc = XPCOM.NS_GetServiceManager (result);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\tint rc = webBrowser.QueryInterface (nsIWebBrowserStream.NS_IWEBBROWSERSTREAM_IID, result);", "+\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t/*", "+\t\t* Setting mozilla's content through nsIWebBrowserStream does not cause a page", "+\t\t* load to occur, so the events that usually accompany a page change are not", "+\t\t* fired.  To make this behave as expected, navigate to about:blank first and", "+\t\t* then set the html content once the page has loaded.", "+\t\t*/", "+\t\tnew nsISupports (result[0]).Release ();", "+\t\tresult[0] = 0;", "-\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\tresult[0] = 0;", "-\trc = serviceManager.GetService (XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\tserviceManager.Release ();", "+\t\t/*", "+\t\t* If htmlBytes is not null then the about:blank page is already being loaded,", "+\t\t* so no Navigate is required.  Just set the html that is to be shown.", "+\t\t*/", "+\t\tboolean blankLoading = htmlBytes != null;", "+\t\thtmlBytes = data;", "+\t\tif (blankLoading) return true;", "-\tnsIIOService ioService = new nsIIOService (result[0]);", "-\tresult[0] = 0;", "-\t/*", "-\t* Note.  Mozilla ignores LINK tags used to load CSS stylesheets", "-\t* when the URI protocol for the nsInputStreamChannel", "-\t* is about:blank.  The fix is to specify the file protocol.", "-\t*/", "-\tbyte[] aString = MozillaDelegate.wcsToMbcs (null, URI_FROMMEMORY, false);", "-\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);", "-\trc = ioService.NewURI (aSpec, null, 0, result);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\tXPCOM.nsEmbedCString_delete (aSpec);", "-\tioService.Release ();", "-", "-\tnsIURI uri = new nsIURI (result[0]);", "-\tresult[0] = 0;", "-", "-\trc = webBrowser.QueryInterface (nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result);", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\tnsIInterfaceRequestor interfaceRequestor = new nsIInterfaceRequestor (result[0]);", "-\tresult[0] = 0;", "-", "-\t/*", "-\t* Feature in Mozilla. LoadStream invokes the nsIInputStream argument", "-\t* through a different thread.  The callback mechanism must attach ", "-\t* a non java thread to the JVM otherwise the nsIInputStream Read and", "-\t* Close methods never get called.", "-\t*/", "-\tInputStream inputStream = new InputStream (data);", "-\tinputStream.AddRef ();", "-", "-\trc = interfaceRequestor.GetInterface (nsIDocShell_1_9.NS_IDOCSHELL_IID, result);", "-\tif (rc == XPCOM.NS_OK) {", "+\t\t/* navigate to about:blank */", "+\t\trc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tnsIDocShell_1_9 docShell = new nsIDocShell_1_9 (result[0]);", "+\t\tnsIWebNavigation webNavigation = new nsIWebNavigation (result[0]);", "+\t\tresult[0] = 0;", "+\t    char[] uri = new char[ABOUT_BLANK.length () + 1];", "+\t    ABOUT_BLANK.getChars (0, ABOUT_BLANK.length (), uri, 0);", "+\t\trc = webNavigation.LoadURI (uri, nsIWebNavigation.LOAD_FLAGS_NONE, 0, 0, 0);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\twebNavigation.Release ();", "+\t} else {", "+\t\tbyte[] contentCharsetBuffer = MozillaDelegate.wcsToMbcs (null, \"UTF-8\", true);\t//$NON-NLS-1$", "+\t\tint /*long*/ aContentCharset = XPCOM.nsEmbedCString_new (contentCharsetBuffer, contentCharsetBuffer.length);", "+\t\tbyte[] contentTypeBuffer = MozillaDelegate.wcsToMbcs (null, \"text/html\", true); // $NON-NLS-1$", "+\t\tint /*long*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);", "+", "+\t\trc = XPCOM.NS_GetServiceManager (result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\t\tresult[0] = 0;", "+\t\trc = serviceManager.GetService (XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\tserviceManager.Release ();", "+", "+\t\tnsIIOService ioService = new nsIIOService (result[0]);", "+\t\tresult[0] = 0;", "+\t\t/*", "+\t\t* Note.  Mozilla ignores LINK tags used to load CSS stylesheets", "+\t\t* when the URI protocol for the nsInputStreamChannel", "+\t\t* is about:blank.  The fix is to specify the file protocol.", "+\t\t*/", "+\t\tbyte[] aString = MozillaDelegate.wcsToMbcs (null, URI_FROMMEMORY, false);", "+\t\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);", "+\t\trc = ioService.NewURI (aSpec, null, 0, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\tXPCOM.nsEmbedCString_delete (aSpec);", "+\t\tioService.Release ();", "+", "+\t\tnsIURI uri = new nsIURI (result[0]);", "+\t\tresult[0] = 0;", "+", "+\t\trc = webBrowser.QueryInterface (nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\tnsIInterfaceRequestor interfaceRequestor = new nsIInterfaceRequestor (result[0]);", "+\t\tresult[0] = 0;", "+", "+\t\t/*", "+\t\t* Feature in Mozilla. LoadStream invokes the nsIInputStream argument", "+\t\t* through a different thread.  The callback mechanism must attach ", "+\t\t* a non java thread to the JVM otherwise the nsIInputStream Read and", "+\t\t* Close methods never get called.", "+\t\t*/", "+\t\tInputStream inputStream = new InputStream (data);", "+\t\tinputStream.AddRef ();", "+", "+\t\trc = interfaceRequestor.GetInterface (nsIDocShell.NS_IDOCSHELL_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\tnsIDocShell docShell = new nsIDocShell (result[0]);", "+\t\tresult[0] = 0;", "-\t} else {", "-\t\tresult[0] = 0;", "-\t\trc = interfaceRequestor.GetInterface (nsIDocShell_1_8.NS_IDOCSHELL_IID, result);", "-\t\tif (rc == XPCOM.NS_OK) {\t", "-\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\t\tnsIDocShell_1_8 docShell = new nsIDocShell_1_8 (result[0]);", "-\t\t\trc = docShell.LoadStream (inputStream.getAddress (), uri.getAddress (), aContentType,  aContentCharset, 0);", "-\t\t\tdocShell.Release ();", "-\t\t} else {", "-\t\t\tresult[0] = 0;", "-\t\t\trc = interfaceRequestor.GetInterface (nsIDocShell.NS_IDOCSHELL_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\t\tnsIDocShell docShell = new nsIDocShell (result[0]);", "-\t\t\trc = docShell.LoadStream (inputStream.getAddress (), uri.getAddress (), aContentType,  aContentCharset, 0);", "-\t\t\tdocShell.Release ();", "-\t\t}", "-\t}", "-\tif (rc != XPCOM.NS_OK) error (rc);", "-\tresult[0] = 0;", "-\tinputStream.Release ();", "-\tinterfaceRequestor.Release ();", "-\turi.Release ();", "-\tXPCOM.nsEmbedCString_delete (aContentCharset);", "-\tXPCOM.nsEmbedCString_delete (aContentType);", "+\t\tinputStream.Release ();", "+\t\tinterfaceRequestor.Release ();", "+\t\turi.Release ();", "+\t\tXPCOM.nsEmbedCString_delete (aContentType);", "+\t\tXPCOM.nsEmbedCString_delete (aContentCharset);", "+\t}"]}], "num": 59161}
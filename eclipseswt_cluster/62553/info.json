{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27da4fa8dbf6d213566a79161e8fc14b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02a82e4bb97ed78a5b8eddae4aff6edf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "b638755c097e5d77bb4590b992f7e713c53b1a96", "commitAfterChange": "51301b8f9ff2918efccde41738fee4413b347deb", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void computeRuns()", "signatureAfterChange": "  void computeRuns()", "diff": ["-\tif (textLength != 0) {", "-\t\tchar[] chars = new char[textLength + 1];", "-\t\ttext.getChars(0, textLength, chars, 1);", "-\t\tchars[0] = ZWS;", "-\t\tint breakCount = 1;", "-\t\tfor (int i = 0; i < chars.length; i++) {", "-\t\t\tchar c = chars[i];", "-\t\t\tif (c == '\\n' || c == '\\r') {", "-\t\t\t\tbreakCount++;", "-\t\t\t}", "+\tchar[] chars = new char[textLength + 1];", "+\ttext.getChars(0, textLength, chars, 1);", "+\tchars[0] = ZWS;", "+\tint breakCount = 1;", "+\tfor (int i = 0; i < chars.length; i++) {", "+\t\tchar c = chars[i];", "+\t\tif (c == '\\n' || c == '\\r') {", "+\t\t\tbreakCount++;", "-\t\thardBreaks = new int [breakCount];", "-\t\tbreakCount = 0;", "-\t\tfor (int i = 0; i < chars.length; i++) {", "-\t\t\tchar c = chars[i];", "-\t\t\tif (c == '\\n' || c == '\\r') {", "-\t\t\t\tchars[i] = ZWS;", "-\t\t\t\thardBreaks[breakCount++] = i;", "-\t\t\t}", "-\t\t}", "-\t\thardBreaks[breakCount] = translateOffset(textLength);", "-\t\tint newTextPtr = OS.NewPtr(chars.length * 2);", "-\t\tOS.memcpy(newTextPtr, chars, chars.length * 2);", "-\t\tOS.ATSUSetTextPointerLocation(layout, newTextPtr, 0, chars.length, chars.length);", "-\t\tOS.ATSUSetTransientFontMatching(layout, true);", "-\t\tif (textPtr != 0) OS.DisposePtr(textPtr);", "-\t\ttextPtr = newTextPtr;", "-\t}\t", "-\tint[] buffer = new int[1];", "-\tint length = translateOffset(textLength);", "-\tif (textLength != 0) {", "-\t\tfor (int i = 0; i < styles.length - 1; i++) {", "-\t\t\tStyleItem run = styles[i];", "-\t\t\trun.createStyle(font);", "-\t\t\tint start = translateOffset(run.start);", "-\t\t\tint runLength = translateOffset(styles[i + 1].start) - start;", "-\t\t\tOS.ATSUSetRunStyle(layout, run.atsuStyle, start, runLength);", "-\t\t}", "-\t\tif (indent >= 0) {", "-\t\t\tint ptr = OS.NewPtr(4);", "-\t\t\tbuffer[0] = OS.Long2Fix(indent);", "-\t\t\tOS.memcpy(ptr, buffer, 4);", "-\t\t\tint[] tags = new int[]{OS.kATSUImposeWidthTag};", "-\t\t\tint[] sizes = new int[]{4};", "-\t\t\tint[] values = new int[]{ptr};", "-\t\t\tOS.ATSUCreateStyle(buffer);", "-\t\t\tindentStyle = buffer[0];", "-\t\t\tOS.ATSUSetAttributes(indentStyle, tags.length, tags, sizes, values);", "-\t\t\tOS.DisposePtr(ptr);", "-\t\t\tOS.ATSUSetRunStyle(layout, indentStyle, 0, 1);", "-\t\t\tfor (int i = 0; i < hardBreaks.length-1; i++) {", "-\t\t\t\tint offset = hardBreaks[i];", "-\t\t\t\tOS.ATSUSetRunStyle(layout, indentStyle, offset, 1);", "-\t\t\t}", "-\t\t}", "-\t\tOS.ATSUGetLayoutControl(layout, OS.kATSULineWidthTag, 4, buffer, null);", "-\t\tint wrapWidth = buffer[0];", "-\t\tfor (int i=0, start=0; i<hardBreaks.length; i++) {", "-\t\t\tint hardBreak = hardBreaks[i];", "-\t\t\tbuffer[0] = 0;", "-\t\t\tif (wrapWidth != 0) OS.ATSUBatchBreakLines(layout, start, hardBreak - start, wrapWidth, buffer);", "-\t\t\tOS.ATSUSetSoftLineBreak(layout, hardBreak);", "-\t\t\tstart = hardBreak;", "-\t\t}", "-\t\tOS.ATSUGetSoftLineBreaks(layout, 0, OS.kATSUToTextEnd, 0, null, buffer);", "-\t\tint count = buffer[0];", "-\t\tbreaks = new int[count];", "-\t\tOS.ATSUGetSoftLineBreaks(layout, 0, OS.kATSUToTextEnd, count, breaks, null);", "-\t} else {", "-\t\tbreaks = new int[1];", "+\thardBreaks = new int [breakCount];", "+\tbreakCount = 0;", "+\tfor (int i = 0; i < chars.length; i++) {", "+\t\tchar c = chars[i];", "+\t\tif (c == '\\n' || c == '\\r') {", "+\t\t\tchars[i] = ZWS;", "+\t\t\thardBreaks[breakCount++] = i;", "+\t\t}", "+\t}", "+\thardBreaks[breakCount] = translateOffset(textLength);", "+\tint newTextPtr = OS.NewPtr(chars.length * 2);", "+\tOS.memcpy(newTextPtr, chars, chars.length * 2);", "+\tOS.ATSUSetTextPointerLocation(layout, newTextPtr, 0, chars.length, chars.length);", "+\tOS.ATSUSetTransientFontMatching(layout, true);", "+\tif (textPtr != 0) OS.DisposePtr(textPtr);", "+\ttextPtr = newTextPtr;", "+", "+\tint[] buffer = new int[1];", "+\tfor (int i = 0; i < styles.length - 1; i++) {", "+\t\tStyleItem run = styles[i];", "+\t\trun.createStyle(font);", "+\t\t//set the defaut font in the ZWS when text is empty fixes text metrics", "+\t\tint start = textLength != 0 ? translateOffset(run.start) : 0;", "+\t\tint runLength = translateOffset(styles[i + 1].start) - start;", "+\t\tOS.ATSUSetRunStyle(layout, run.atsuStyle, start, runLength);", "+\t}", "+\tint ptr = OS.NewPtr(4);", "+\tbuffer[0] = OS.Long2Fix(indent);", "+\tOS.memcpy(ptr, buffer, 4);", "+\tint[] tags = new int[]{OS.kATSUImposeWidthTag};", "+\tint[] sizes = new int[]{4};", "+\tint[] values = new int[]{ptr};", "+\tOS.ATSUCreateStyle(buffer);", "+\tindentStyle = buffer[0];", "+\tOS.ATSUSetAttributes(indentStyle, tags.length, tags, sizes, values);", "+\tOS.DisposePtr(ptr);", "+\tOS.ATSUSetRunStyle(layout, indentStyle, 0, 1);", "+\tfor (int i = 0; i < hardBreaks.length-1; i++) {", "+\t\tint offset = hardBreaks[i];", "+\t\tOS.ATSUSetRunStyle(layout, indentStyle, offset, 1);", "+\t}", "+\tOS.ATSUGetLayoutControl(layout, OS.kATSULineWidthTag, 4, buffer, null);", "+\tint wrapWidth = buffer[0];", "+\tfor (int i=0, start=0; i<hardBreaks.length; i++) {", "+\t\tint hardBreak = hardBreaks[i];", "+\t\tbuffer[0] = 0;", "+\t\tif (wrapWidth != 0) OS.ATSUBatchBreakLines(layout, start, hardBreak - start, wrapWidth, buffer);", "+\t\tOS.ATSUSetSoftLineBreak(layout, hardBreak);", "+\t\tstart = hardBreak;", "+\t}", "+\tOS.ATSUGetSoftLineBreaks(layout, 0, OS.kATSUToTextEnd, 0, null, buffer);", "+\tint count = buffer[0];", "+\tbreaks = new int[count];", "+\tOS.ATSUGetSoftLineBreaks(layout, 0, OS.kATSUToTextEnd, count, breaks, null);", "-\tif (length != 0) {", "-\t\tATSTrapezoid trapezoid = new ATSTrapezoid();", "-\t\tfor (int i=0, start=0; i<lineCount; i++) {", "-\t\t\tif (ascent != -1) {", "-\t\t\t\tint ptr = OS.NewPtr(4);", "-\t\t\t\tbuffer[0] = OS.kATSUseLineHeight;", "-\t\t\t\tOS.memcpy(ptr, buffer, 4);", "-\t\t\t\tint[] tags = new int[]{OS.kATSULineAscentTag};", "-\t\t\t\tint[] sizes = new int[]{4};", "-\t\t\t\tint[] values = new int[]{ptr};", "-\t\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "-\t\t\t\tOS.ATSUGetLineControl(layout, start, OS.kATSULineAscentTag, 4, buffer, null);", "-\t\t\t\tbuffer[0] = OS.Long2Fix(Math.max(ascent, OS.Fix2Long(buffer[0])));", "-\t\t\t\tOS.memcpy(ptr, buffer, 4);", "-\t\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "-\t\t\t\tOS.DisposePtr(ptr);", "-\t\t\t}", "-\t\t\tif (descent != -1) {", "-\t\t\t\tint ptr = OS.NewPtr(4);", "-\t\t\t\tbuffer[0] = OS.kATSUseLineHeight;", "-\t\t\t\tOS.memcpy(ptr, buffer, 4);", "-\t\t\t\tint[] tags = new int[]{OS.kATSULineDescentTag};", "-\t\t\t\tint[] sizes = new int[]{4};", "-\t\t\t\tint[] values = new int[]{ptr};", "-\t\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "-\t\t\t\tOS.ATSUGetLineControl(layout, start, OS.kATSULineDescentTag, 4, buffer, null);", "-\t\t\t\tbuffer[0] = OS.Long2Fix(Math.max(descent, OS.Fix2Long(buffer[0])));", "-\t\t\t\tOS.memcpy(ptr, buffer, 4);", "-\t\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "-\t\t\t\tOS.DisposePtr(ptr);", "-\t\t\t}", "-\t\t\tint lineBreak = breaks[i];", "-\t\t\tint lineLength = lineBreak - start;", "-\t\t\tOS.ATSUGetGlyphBounds(layout, 0, 0, start, lineLength, (short)OS.kATSUseDeviceOrigins, 1, trapezoid, null);", "-\t\t\tlineX[i] = OS.Fix2Long(trapezoid.lowerLeft_x);", "-\t\t\tlineAscent[i] = -OS.Fix2Long(trapezoid.upperRight_y);", "-\t\t\tif (lineLength != 0) {", "-\t\t\t\tlineWidth[i] = OS.Fix2Long(trapezoid.upperRight_x) - OS.Fix2Long(trapezoid.upperLeft_x);", "-\t\t\t}", "-\t\t\tlineHeight[i] = OS.Fix2Long(trapezoid.lowerRight_y) + lineAscent[i] + spacing;", "-\t\t\tstart = lineBreak;", "+\tATSTrapezoid trapezoid = new ATSTrapezoid();", "+\tfor (int i=0, start=0; i<lineCount; i++) {", "+\t\tif (ascent != -1) {", "+\t\t\tptr = OS.NewPtr(4);", "+\t\t\tbuffer[0] = OS.kATSUseLineHeight;", "+\t\t\tOS.memcpy(ptr, buffer, 4);", "+\t\t\ttags = new int[]{OS.kATSULineAscentTag};", "+\t\t\tsizes = new int[]{4};", "+\t\t\tvalues = new int[]{ptr};", "+\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "+\t\t\tOS.ATSUGetLineControl(layout, start, OS.kATSULineAscentTag, 4, buffer, null);", "+\t\t\tbuffer[0] = OS.Long2Fix(Math.max(ascent, OS.Fix2Long(buffer[0])));", "+\t\t\tOS.memcpy(ptr, buffer, 4);", "+\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "+\t\t\tOS.DisposePtr(ptr);", "+\t\tif (descent != -1) {", "+\t\t\tptr = OS.NewPtr(4);", "+\t\t\tbuffer[0] = OS.kATSUseLineHeight;", "+\t\t\tOS.memcpy(ptr, buffer, 4);", "+\t\t\ttags = new int[]{OS.kATSULineDescentTag};", "+\t\t\tsizes = new int[]{4};", "+\t\t\tvalues = new int[]{ptr};", "+\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "+\t\t\tOS.ATSUGetLineControl(layout, start, OS.kATSULineDescentTag, 4, buffer, null);", "+\t\t\tbuffer[0] = OS.Long2Fix(Math.max(descent, OS.Fix2Long(buffer[0])));", "+\t\t\tOS.memcpy(ptr, buffer, 4);", "+\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "+\t\t\tOS.DisposePtr(ptr);", "+\t\t}", "+\t\tint lineBreak = breaks[i];", "+\t\tint lineLength = lineBreak - start;", "+\t\tOS.ATSUGetGlyphBounds(layout, 0, 0, start, lineLength, (short)OS.kATSUseDeviceOrigins, 1, trapezoid, null);", "+\t\tlineX[i] = OS.Fix2Long(trapezoid.lowerLeft_x);", "+\t\tlineAscent[i] = -OS.Fix2Long(trapezoid.upperRight_y);", "+\t\tif (lineLength != 0) {", "+\t\t\tlineWidth[i] = OS.Fix2Long(trapezoid.upperRight_x) - OS.Fix2Long(trapezoid.upperLeft_x);", "+\t\t}", "+\t\tlineHeight[i] = OS.Fix2Long(trapezoid.lowerRight_y) + lineAscent[i] + spacing;", "+\t\tstart = lineBreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e2c497c4f68c0acc71800c8ef30160b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "c6e5d71f5dee25c0fb8140fb735ceef0c2a1b122", "commitAfterChange": "e3c616f9231b29034092c983276e8473a94f5d9d", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void computeRuns()", "signatureAfterChange": "  void computeRuns()", "diff": ["-\tint length = text.length();", "-\tif (length != 0) {", "+\tint textLength = text.length();", "+\tif (textLength != 0) {", "+\t\tchar[] chars = new char[textLength + 1];", "+\t\ttext.getChars(0, textLength, chars, 1);", "+\t\tchars[0] = ZWS;", "+\t\tint breakCount = 0;", "+\t\tfor (int i = 0; i < chars.length; i++) {", "+\t\t\tchar c = chars[i];", "+\t\t\tif (c == '\\n' || c == '\\r') {", "+\t\t\t\tbreakCount++;", "+\t\t\t}", "+\t\t}", "+\t\thardBreaks = new int [breakCount];", "+\t\tbreakCount = 0;", "+\t\tfor (int i = 0; i < chars.length; i++) {", "+\t\t\tchar c = chars[i];", "+\t\t\tif (c == '\\n' || c == '\\r') {", "+\t\t\t\tchars[i] = ZWS;", "+\t\t\t\thardBreaks[breakCount++] = i;", "+\t\t\t}", "+\t\t}", "+\t\tint newTextPtr = OS.NewPtr(chars.length * 2);", "+\t\tOS.memcpy(newTextPtr, chars, chars.length * 2);", "+\t\tOS.ATSUSetTextPointerLocation(layout, newTextPtr, 0, chars.length, chars.length);", "+\t\tOS.ATSUSetTransientFontMatching(layout, true);", "+\t\tif (textPtr != 0) OS.DisposePtr(textPtr);", "+\t\ttextPtr = newTextPtr;", "+\t}\t", "+\tint[] buffer = new int[1];", "+\tint length = translateOffset(text.length());", "+\tif (textLength != 0) {", "-\t\t\tint runLength = styles[i + 1].start - run.start;", "-\t\t\tOS.ATSUSetRunStyle(layout, run.atsuStyle, run.start, runLength);", "+\t\t\tint start = translateOffset(run.start);", "+\t\t\tint runLength = translateOffset(styles[i + 1].start) - start;", "+\t\t\tOS.ATSUSetRunStyle(layout, run.atsuStyle, start, runLength);", "-\t\tint[] buffer = new int[1];", "-\t\tif (ascent != -1) {", "-\t\t\tOS.ATSUGetLayoutControl(layout, OS.kATSULineAscentTag, 4, buffer, null);", "+\t\tif (indent >= 0) {", "-\t\t\tbuffer[0] = OS.Long2Fix(Math.max(ascent, OS.Fix2Long(buffer[0])));", "+\t\t\tbuffer[0] = OS.Long2Fix(indent);", "-\t\t\tint[] tags = new int[]{OS.kATSULineAscentTag};", "+\t\t\tint[] tags = new int[]{OS.kATSUImposeWidthTag};", "-\t\t\tOS.ATSUSetLineControls(layout, 0, tags.length, tags, sizes, values);", "+\t\t\tOS.ATSUCreateStyle(buffer);", "+\t\t\tindentStyle = buffer[0];", "+\t\t\tOS.ATSUSetAttributes(indentStyle, tags.length, tags, sizes, values);", "-\t\t}", "-\t\tif (descent != -1) {", "-\t\t\tOS.ATSUGetLayoutControl(layout, OS.kATSULineDescentTag, 4, buffer, null);", "-\t\t\tint ptr = OS.NewPtr(4);", "-\t\t\tbuffer[0] = OS.Long2Fix(Math.max(descent, OS.Fix2Long(buffer[0])));", "-\t\t\tOS.memcpy(ptr, buffer, 4);", "-\t\t\tint[] tags = new int[]{OS.kATSULineDescentTag};", "-\t\t\tint[] sizes = new int[]{4};", "-\t\t\tint[] values = new int[]{ptr};", "-\t\t\tOS.ATSUSetLineControls(layout, 0, tags.length, tags, sizes, values);", "-\t\t\tOS.DisposePtr(ptr);", "+\t\t\tOS.ATSUSetRunStyle(layout, indentStyle, 0, 1);", "+\t\t\tfor (int i = 0; i < hardBreaks.length; i++) {", "+\t\t\t\tint offset = hardBreaks[i];", "+\t\t\t\tOS.ATSUSetRunStyle(layout, indentStyle, offset, 1);", "+\t\t\t}", "-\t\tint wrapWidth = OS.Fix2Long(buffer[0]);", "-\t\tint width = wrapWidth == 0 ? 0x7fff : wrapWidth;", "-\t\tOS.ATSUBatchBreakLines(layout, 0, OS.kATSUToTextEnd, OS.Long2Fix(width), buffer);", "-\t\tint count = Math.max(0, buffer[0]);", "-\t\tbreaks = new int[count + 1];", "-\t\tOS.ATSUGetSoftLineBreaks(layout, 0, OS.kATSUToTextEnd, count, breaks, buffer);", "-\t\tbreaks[count] = length;", "+\t\tint wrapWidth = buffer[0];", "+\t\tfor (int i=0, start=0; i<hardBreaks.length+1; i++) {", "+\t\t\tint hardBreak = i == hardBreaks.length ? length : hardBreaks[i];", "+\t\t\tbuffer[0] = 0;", "+\t\t\tif (wrapWidth != 0) OS.ATSUBatchBreakLines(layout, start, hardBreak - start, wrapWidth, buffer);", "+\t\t\tOS.ATSUSetSoftLineBreak(layout, hardBreak);", "+\t\t\tstart = hardBreak;", "+\t\t}", "+\t\tOS.ATSUGetSoftLineBreaks(layout, 0, OS.kATSUToTextEnd, 0, null, buffer);", "+\t\tint count = buffer[0];", "+\t\tbreaks = new int[count];", "+\t\tOS.ATSUGetSoftLineBreaks(layout, 0, OS.kATSUToTextEnd, count, breaks, null);", "+\t\t\tif (ascent != -1) {", "+\t\t\t\tint ptr = OS.NewPtr(4);", "+\t\t\t\tbuffer[0] = OS.kATSUseLineHeight;", "+\t\t\t\tOS.memcpy(ptr, buffer, 4);", "+\t\t\t\tint[] tags = new int[]{OS.kATSULineAscentTag};", "+\t\t\t\tint[] sizes = new int[]{4};", "+\t\t\t\tint[] values = new int[]{ptr};", "+\t\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "+\t\t\t\tOS.ATSUGetLineControl(layout, start, OS.kATSULineAscentTag, 4, buffer, null);", "+\t\t\t\tbuffer[0] = OS.Long2Fix(Math.max(ascent, OS.Fix2Long(buffer[0])));", "+\t\t\t\tOS.memcpy(ptr, buffer, 4);", "+\t\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "+\t\t\t\tOS.DisposePtr(ptr);", "+\t\t\t}", "+\t\t\tif (descent != -1) {", "+\t\t\t\tint ptr = OS.NewPtr(4);", "+\t\t\t\tbuffer[0] = OS.kATSUseLineHeight;", "+\t\t\t\tOS.memcpy(ptr, buffer, 4);", "+\t\t\t\tint[] tags = new int[]{OS.kATSULineDescentTag};", "+\t\t\t\tint[] sizes = new int[]{4};", "+\t\t\t\tint[] values = new int[]{ptr};", "+\t\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "+\t\t\t\tOS.ATSUGetLineControl(layout, start, OS.kATSULineDescentTag, 4, buffer, null);", "+\t\t\t\tbuffer[0] = OS.Long2Fix(Math.max(descent, OS.Fix2Long(buffer[0])));", "+\t\t\t\tOS.memcpy(ptr, buffer, 4);", "+\t\t\t\tOS.ATSUSetLineControls(layout, start, tags.length, tags, sizes, values);", "+\t\t\t\tOS.DisposePtr(ptr);", "+\t\t\t}", "-\t\t\tint lineLength = skipHardBreak(lineBreak) - start;", "-\t\t\tOS.ATSUGetGlyphBounds(layout, 0, 0, start, lineLength == 0 ? 1 : lineLength, (short)OS.kATSUseDeviceOrigins, 1, trapezoid, null);", "+\t\t\tint lineLength = lineBreak - start;", "+\t\t\tOS.ATSUGetGlyphBounds(layout, 0, 0, start, lineLength, (short)OS.kATSUseDeviceOrigins, 1, trapezoid, null);", "-\t\t\tlineHeight[i] = OS.Fix2Long(trapezoid.lowerRight_y) + lineAscent[i];", "+\t\t\tlineHeight[i] = OS.Fix2Long(trapezoid.lowerRight_y) + lineAscent[i] + spacing;"]}], "num": 62553}
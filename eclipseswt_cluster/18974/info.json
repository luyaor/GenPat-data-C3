{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c8cbbd921a43ac576e74c5eef0ab6710", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a790000fa7758007920a7886c0a8aefa", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/carbon/org/eclipse/swt/printing/PrintDialog.java", "commitBeforeChange": "8f175c0902b6952b9ad454b26d734bc7107ccafe", "commitAfterChange": "389adb00dc3aaa9a8f5a87ca149390abf76b86aa", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public PrinterData open()", "signatureAfterChange": " public PrinterData open()", "diff": ["-\t\t\t\tOS.PMSessionPageSetupDialog(printSession, pageFormat, accepted);\t", "-\t\t\t\tif (accepted[0]) {\t\t", "-\t\t\t\t\tOS.PMSessionPrintDialog(printSession, printSettings, pageFormat, accepted);", "-\t\t\t\t\tif (accepted[0]) {", "-\t\t\t\t\t\tshort[] destType = new short[1];", "-\t\t\t\t\t\tOS.PMSessionGetDestinationType(printSession, printSettings, destType);", "-\t\t\t\t\t\tString name = Printer.getCurrentPrinterName(printSession);", "-\t\t\t\t\t\tString driver = Printer.DRIVER;", "-\t\t\t\t\t\tswitch (destType[0]) {", "-\t\t\t\t\t\t\tcase OS.kPMDestinationFax: driver = Printer.FAX_DRIVER; break;", "-\t\t\t\t\t\t\tcase OS.kPMDestinationFile: driver = Printer.FILE_DRIVER; break;", "-\t\t\t\t\t\t\tcase OS.kPMDestinationPreview: driver = Printer.PREVIEW_DRIVER; break;", "-\t\t\t\t\t\t\tcase OS.kPMDestinationPrinter: driver = Printer.PRINTER_DRIVER; break;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tPrinterData data = new PrinterData(driver, name);", "-\t\t\t\t\t\tif (destType[0] == OS.kPMDestinationFile) {", "-\t\t\t\t\t\t\tdata.printToFile = true;", "-\t\t\t\t\t\t\tOS.PMSessionCopyDestinationLocation(printSession, printSettings, buffer);", "-\t\t\t\t\t\t\tint fileName = OS.CFURLCopyFileSystemPath(buffer[0],OS.kCFURLPOSIXPathStyle);", "-\t\t\t\t\t\t\tOS.CFRelease(buffer[0]);", "-\t\t\t\t\t\t\tdata.fileName = Printer.getString(fileName);", "-\t\t\t\t\t\t\tOS.CFRelease(fileName);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tOS.PMGetCopies(printSettings, buffer);", "-\t\t\t\t\t\tdata.copyCount = buffer[0];\t\t\t\t\t\t", "-\t\t\t\t\t\tOS.PMGetFirstPage(printSettings, buffer);", "-\t\t\t\t\t\tdata.startPage = buffer[0];", "-\t\t\t\t\t\tOS.PMGetLastPage(printSettings, buffer);", "-\t\t\t\t\t\tdata.endPage = buffer[0];", "-\t\t\t\t\t\tOS.PMGetPageRange(printSettings, null, buffer);", "-\t\t\t\t\t\tif (data.startPage == 1 && data.endPage == OS.kPMPrintAllPages) {", "-\t\t\t\t\t\t\tdata.scope = PrinterData.ALL_PAGES;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean[] collate = new boolean[1];", "-\t\t\t\t\t\tOS.PMGetCollate(printSettings, collate);", "-\t\t\t\t\t\tdata.collate = collate[0];", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t/* Serialize settings */", "-\t\t\t\t\t\tint[] flatSettings = new int[1];", "-\t\t\t\t\t\tOS.PMFlattenPrintSettings(printSettings, flatSettings);", "-\t\t\t\t\t\tint[] flatFormat = new int[1];", "-\t\t\t\t\t\tOS.PMFlattenPageFormat(pageFormat, flatFormat);", "-\t\t\t\t\t\tint settingsLength = OS.GetHandleSize (flatSettings[0]);", "-\t\t\t\t\t\tint formatLength = OS.GetHandleSize (flatFormat[0]);", "-\t\t\t\t\t\tbyte[] otherData = data.otherData = new byte[settingsLength + formatLength + 8];", "-\t\t\t\t\t\tint offset = 0;", "-\t\t\t\t\t\toffset = Printer.packData(flatSettings[0], otherData, offset);", "-\t\t\t\t\t\toffset = Printer.packData(flatFormat[0], otherData, offset);", "-\t\t\t\t\t\tOS.DisposeHandle(flatSettings[0]);", "-\t\t\t\t\t\tOS.DisposeHandle(flatFormat[0]);", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tscope = data.scope;", "-\t\t\t\t\t\tstartPage = data.startPage;", "-\t\t\t\t\t\tendPage = data.endPage;", "-\t\t\t\t\t\tprintToFile = data.printToFile;", "-\t\t\t\t\t\treturn data;", "+\t\t\t\tif (OS.VERSION >= 0x1050) {", "+\t\t\t\t\tint printDialogOptions = OS.kPMShowDefaultInlineItems | OS.kPMShowPageAttributesPDE;", "+\t\t\t\t\tOS.PMShowPrintDialogWithOptions(printSession, printSettings, pageFormat, printDialogOptions, accepted);", "+\t\t\t\t} else {", "+\t\t\t\t\tOS.PMSessionPageSetupDialog(printSession, pageFormat, accepted);\t", "+\t\t\t\t\tif (accepted[0]) OS.PMSessionPrintDialog(printSession, printSettings, pageFormat, accepted);", "+\t\t\t\t}", "+\t\t\t\tif (accepted[0]) {", "+\t\t\t\t\tshort[] destType = new short[1];", "+\t\t\t\t\tOS.PMSessionGetDestinationType(printSession, printSettings, destType);", "+\t\t\t\t\tString name = Printer.getCurrentPrinterName(printSession);", "+\t\t\t\t\tString driver = Printer.DRIVER;", "+\t\t\t\t\tswitch (destType[0]) {", "+\t\t\t\t\t\tcase OS.kPMDestinationFax: driver = Printer.FAX_DRIVER; break;", "+\t\t\t\t\t\tcase OS.kPMDestinationFile: driver = Printer.FILE_DRIVER; break;", "+\t\t\t\t\t\tcase OS.kPMDestinationPreview: driver = Printer.PREVIEW_DRIVER; break;", "+\t\t\t\t\t\tcase OS.kPMDestinationPrinter: driver = Printer.PRINTER_DRIVER; break;", "+\t\t\t\t\tPrinterData data = new PrinterData(driver, name);", "+\t\t\t\t\tif (destType[0] == OS.kPMDestinationFile) {", "+\t\t\t\t\t\tdata.printToFile = true;", "+\t\t\t\t\t\tOS.PMSessionCopyDestinationLocation(printSession, printSettings, buffer);", "+\t\t\t\t\t\tint fileName = OS.CFURLCopyFileSystemPath(buffer[0],OS.kCFURLPOSIXPathStyle);", "+\t\t\t\t\t\tOS.CFRelease(buffer[0]);", "+\t\t\t\t\t\tdata.fileName = Printer.getString(fileName);", "+\t\t\t\t\t\tOS.CFRelease(fileName);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.PMGetCopies(printSettings, buffer);", "+\t\t\t\t\tdata.copyCount = buffer[0];\t\t\t\t\t\t", "+\t\t\t\t\tOS.PMGetFirstPage(printSettings, buffer);", "+\t\t\t\t\tdata.startPage = buffer[0];", "+\t\t\t\t\tOS.PMGetLastPage(printSettings, buffer);", "+\t\t\t\t\tdata.endPage = buffer[0];", "+\t\t\t\t\tOS.PMGetPageRange(printSettings, null, buffer);", "+\t\t\t\t\tif (data.startPage == 1 && data.endPage == OS.kPMPrintAllPages) {", "+\t\t\t\t\t\tdata.scope = PrinterData.ALL_PAGES;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "+\t\t\t\t\t}", "+\t\t\t\t\tboolean[] collate = new boolean[1];", "+\t\t\t\t\tOS.PMGetCollate(printSettings, collate);", "+\t\t\t\t\tdata.collate = collate[0];", "+\t\t\t\t\t", "+\t\t\t\t\t/* Serialize settings */", "+\t\t\t\t\tint[] flatSettings = new int[1];", "+\t\t\t\t\tOS.PMFlattenPrintSettings(printSettings, flatSettings);", "+\t\t\t\t\tint[] flatFormat = new int[1];", "+\t\t\t\t\tOS.PMFlattenPageFormat(pageFormat, flatFormat);", "+\t\t\t\t\tint settingsLength = OS.GetHandleSize (flatSettings[0]);", "+\t\t\t\t\tint formatLength = OS.GetHandleSize (flatFormat[0]);", "+\t\t\t\t\tbyte[] otherData = data.otherData = new byte[settingsLength + formatLength + 8];", "+\t\t\t\t\tint offset = 0;", "+\t\t\t\t\toffset = Printer.packData(flatSettings[0], otherData, offset);", "+\t\t\t\t\toffset = Printer.packData(flatFormat[0], otherData, offset);", "+\t\t\t\t\tOS.DisposeHandle(flatSettings[0]);", "+\t\t\t\t\tOS.DisposeHandle(flatFormat[0]);", "+\t\t\t\t\t", "+\t\t\t\t\tscope = data.scope;", "+\t\t\t\t\tstartPage = data.startPage;", "+\t\t\t\t\tendPage = data.endPage;", "+\t\t\t\t\tprintToFile = data.printToFile;", "+\t\t\t\t\treturn data;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70292e6bcaa9a4c7e9714be33eb0f1c1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/cocoa/org/eclipse/swt/printing/PrintDialog.java", "commitBeforeChange": "f4abd83d57d77245094f225bf96065fc437b4479", "commitAfterChange": "8ab0cb1a59e576205e88d233b12556089108ede1", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public PrinterData open()", "signatureAfterChange": " public PrinterData open()", "diff": ["+\tPrinterData data = null;", "-\tNSPrintInfo printInfo =(NSPrintInfo)new NSPrintInfo().alloc();", "-\tprintInfo.initWithDictionary(null);", "-\tpanel.runModalWithPrintInfo(printInfo);", "+\tNSPrintInfo printInfo = new NSPrintInfo(NSPrintInfo.sharedPrintInfo().copy().id);", "+\tNSDictionary dict = printInfo.dictionary();\t", "+\tif (printToFile) {", "+\t\tdict.setValue_forKey_(new NSString(OS.NSPrintSaveJob()), new NSString(OS.NSPrintJobDisposition()));", "+\t}", "+\t//TODO - setting range not work. why?", "+\tdict.setValue_forKey_(NSNumber.numberWithBool(scope == PrinterData.ALL_PAGES), new NSString(OS.NSPrintAllPages()));", "+\tif (scope == PrinterData.PAGE_RANGE) {", "+\t\tdict.setValue_forKey_(NSNumber.numberWithInt(startPage), new NSString(OS.NSPrintFirstPage()));", "+\t\tdict.setValue_forKey_(NSNumber.numberWithInt(endPage), new NSString(OS.NSPrintLastPage()));", "+\t}", "+\t//TODO open page layout panel either as a separate dialog or as a accessory view", "+\tif (panel.runModalWithPrintInfo(printInfo) != OS.NSCancelButton) {", "+\t\tNSPrinter printer = printInfo.printer();", "+\t\tNSString str = printer.name();", "+\t\tchar[] buffer = new char[str.length()];", "+\t\tstr.getCharacters_(buffer);", "+\t\tdata = new PrinterData(Printer.DRIVER, new String(buffer));", "+\t\tdata.printToFile = printInfo.jobDisposition().isEqual(new NSString(OS.NSPrintSaveJob()));", "+\t\tif (data.printToFile) {", "+\t\t\tNSString filename = new NSString(dict.objectForKey(new NSString(OS.NSPrintSavePath())).id);", "+\t\t\tdata.fileName = filename.getString();", "+\t\t}", "+\t\tdata.scope = new NSNumber(dict.objectForKey(new NSString(OS.NSPrintAllPages())).id).intValue() != 0 ? PrinterData.ALL_PAGES : PrinterData.PAGE_RANGE;", "+\t\tif (data.scope == PrinterData.PAGE_RANGE) {", "+\t\t\tdata.startPage = new NSNumber(dict.objectForKey(new NSString(OS.NSPrintFirstPage())).id).intValue();", "+\t\t\tdata.endPage = new NSNumber(dict.objectForKey(new NSString(OS.NSPrintLastPage())).id).intValue();", "+\t\t}", "+\t\tdata.collate = new NSNumber(dict.objectForKey(new NSString(OS.NSPrintMustCollate())).id).intValue() != 0;", "+\t\tdata.copyCount = new NSNumber(dict.objectForKey(new NSString(OS.NSPrintCopies())).id).intValue();", "+\t\tNSData nsData = NSKeyedArchiver.archivedDataWithRootObject(printInfo);", "+\t\tdata.otherData = new byte[nsData.length()];", "+\t\tOS.memmove(data.otherData, nsData.bytes(), data.otherData.length);", "+", "+\t\tprintToFile = data.printToFile;", "+\t\tscope = data.scope;", "+\t\tstartPage = data.startPage;", "+\t\tendPage = data.endPage;", "+\t}", "-//\tint[] buffer = new int[1];", "-//\tif (OS.PMCreateSession(buffer) == OS.noErr) {", "-//\t\tint printSession = buffer[0];", "-//\t\tif (OS.PMCreatePrintSettings(buffer) == OS.noErr) {", "-//\t\t\tint printSettings = buffer[0];", "-//\t\t\tOS.PMSessionDefaultPrintSettings(printSession, printSettings);", "-//\t\t\tif (OS.PMCreatePageFormat(buffer) == OS.noErr) {", "-//\t\t\t\tint pageFormat = buffer[0];", "-//\t\t\t\tOS.PMSessionDefaultPageFormat(printSession, pageFormat);", "-//\t\t\t\tOS.PMSessionSetDestination(printSession, printSettings, (short) (printToFile ? OS.kPMDestinationFile : OS.kPMDestinationPrinter), 0, 0);", "-//\t\t\t\tif (scope == PrinterData.PAGE_RANGE) {", "-//\t\t\t\t\tOS.PMSetFirstPage(printSettings, startPage, false);", "-//\t\t\t\t\tOS.PMSetLastPage(printSettings, endPage, false);", "-//\t\t\t\t\tOS.PMSetPageRange(printSettings, startPage, endPage);", "-//\t\t\t\t} else {", "-//\t\t\t\t\tOS.PMSetPageRange(printSettings, 1, OS.kPMPrintAllPages);", "-//\t\t\t\t}", "-//\t\t\t\tboolean[] accepted = new boolean [1];", "-//\t\t\t\tOS.PMSessionPageSetupDialog(printSession, pageFormat, accepted);\t", "-//\t\t\t\tif (accepted[0]) {\t\t", "-//\t\t\t\t\tOS.PMSessionPrintDialog(printSession, printSettings, pageFormat, accepted);", "-//\t\t\t\t\tif (accepted[0]) {", "-//\t\t\t\t\t\tshort[] destType = new short[1];", "-//\t\t\t\t\t\tOS.PMSessionGetDestinationType(printSession, printSettings, destType);", "-//\t\t\t\t\t\tString name = Printer.getCurrentPrinterName(printSession);", "-//\t\t\t\t\t\tString driver = Printer.DRIVER;", "-//\t\t\t\t\t\tswitch (destType[0]) {", "-//\t\t\t\t\t\t\tcase OS.kPMDestinationFax: driver = Printer.FAX_DRIVER; break;", "-//\t\t\t\t\t\t\tcase OS.kPMDestinationFile: driver = Printer.FILE_DRIVER; break;", "-//\t\t\t\t\t\t\tcase OS.kPMDestinationPreview: driver = Printer.PREVIEW_DRIVER; break;", "-//\t\t\t\t\t\t\tcase OS.kPMDestinationPrinter: driver = Printer.PRINTER_DRIVER; break;", "-//\t\t\t\t\t\t}", "-//\t\t\t\t\t\tPrinterData data = new PrinterData(driver, name);", "-//\t\t\t\t\t\tif (destType[0] == OS.kPMDestinationFile) {", "-//\t\t\t\t\t\t\tdata.printToFile = true;", "-//\t\t\t\t\t\t\tOS.PMSessionCopyDestinationLocation(printSession, printSettings, buffer);", "-//\t\t\t\t\t\t\tint fileName = OS.CFURLCopyFileSystemPath(buffer[0],OS.kCFURLPOSIXPathStyle);", "-//\t\t\t\t\t\t\tOS.CFRelease(buffer[0]);", "-//\t\t\t\t\t\t\tdata.fileName = Printer.getString(fileName);", "-//\t\t\t\t\t\t\tOS.CFRelease(fileName);", "-//\t\t\t\t\t\t}", "-//\t\t\t\t\t\tOS.PMGetCopies(printSettings, buffer);", "-//\t\t\t\t\t\tdata.copyCount = buffer[0];\t\t\t\t\t\t", "-//\t\t\t\t\t\tOS.PMGetFirstPage(printSettings, buffer);", "-//\t\t\t\t\t\tdata.startPage = buffer[0];", "-//\t\t\t\t\t\tOS.PMGetLastPage(printSettings, buffer);", "-//\t\t\t\t\t\tdata.endPage = buffer[0];", "-//\t\t\t\t\t\tOS.PMGetPageRange(printSettings, null, buffer);", "-//\t\t\t\t\t\tif (data.startPage == 1 && data.endPage == OS.kPMPrintAllPages) {", "-//\t\t\t\t\t\t\tdata.scope = PrinterData.ALL_PAGES;", "-//\t\t\t\t\t\t} else {", "-//\t\t\t\t\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "-//\t\t\t\t\t\t}", "-//\t\t\t\t\t\tboolean[] collate = new boolean[1];", "-//\t\t\t\t\t\tOS.PMGetCollate(printSettings, collate);", "-//\t\t\t\t\t\tdata.collate = collate[0];", "-//\t\t\t\t\t\t", "-//\t\t\t\t\t\t/* Serialize settings */", "-//\t\t\t\t\t\tint[] flatSettings = new int[1];", "-//\t\t\t\t\t\tOS.PMFlattenPrintSettings(printSettings, flatSettings);", "-//\t\t\t\t\t\tint[] flatFormat = new int[1];", "-//\t\t\t\t\t\tOS.PMFlattenPageFormat(pageFormat, flatFormat);", "-//\t\t\t\t\t\tint settingsLength = OS.GetHandleSize (flatSettings[0]);", "-//\t\t\t\t\t\tint formatLength = OS.GetHandleSize (flatFormat[0]);", "-//\t\t\t\t\t\tbyte[] otherData = data.otherData = new byte[settingsLength + formatLength + 8];", "-//\t\t\t\t\t\tint offset = 0;", "-//\t\t\t\t\t\toffset = Printer.packData(flatSettings[0], otherData, offset);", "-//\t\t\t\t\t\toffset = Printer.packData(flatFormat[0], otherData, offset);", "-//\t\t\t\t\t\tOS.DisposeHandle(flatSettings[0]);", "-//\t\t\t\t\t\tOS.DisposeHandle(flatFormat[0]);", "-//\t\t\t\t\t\t", "-//\t\t\t\t\t\tscope = data.scope;", "-//\t\t\t\t\t\tstartPage = data.startPage;", "-//\t\t\t\t\t\tendPage = data.endPage;", "-//\t\t\t\t\t\tprintToFile = data.printToFile;", "-//\t\t\t\t\t\treturn data;", "-//\t\t\t\t\t}", "-//\t\t\t\t}", "-//\t\t\t\tOS.PMRelease(pageFormat);", "-//\t\t\t}", "-//\t\t\tOS.PMRelease(printSettings);", "-//\t\t}", "-//\t\tOS.PMRelease(printSession);", "-//\t}", "-\treturn null;", "+\treturn data;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "df8f243bbb2a07b35c97c5274a28924f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/cocoa/org/eclipse/swt/printing/PrintDialog.java", "commitBeforeChange": "0a50d92817a0ec852579e15a962a04552ba58310", "commitAfterChange": "5f8c70f9663ba812b07371317d526ce083d22a28", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public PrinterData open()", "signatureAfterChange": " public PrinterData open()", "diff": ["-\tint[] buffer = new int[1];", "-\tif (OS.PMCreateSession(buffer) == OS.noErr) {", "-\t\tint printSession = buffer[0];", "-\t\tif (OS.PMCreatePrintSettings(buffer) == OS.noErr) {", "-\t\t\tint printSettings = buffer[0];", "-\t\t\tOS.PMSessionDefaultPrintSettings(printSession, printSettings);", "-\t\t\tif (OS.PMCreatePageFormat(buffer) == OS.noErr) {", "-\t\t\t\tint pageFormat = buffer[0];", "-\t\t\t\tOS.PMSessionDefaultPageFormat(printSession, pageFormat);", "-\t\t\t\tOS.PMSessionSetDestination(printSession, printSettings, (short) (printToFile ? OS.kPMDestinationFile : OS.kPMDestinationPrinter), 0, 0);", "-\t\t\t\tif (scope == PrinterData.PAGE_RANGE) {", "-\t\t\t\t\tOS.PMSetFirstPage(printSettings, startPage, false);", "-\t\t\t\t\tOS.PMSetLastPage(printSettings, endPage, false);", "-\t\t\t\t\tOS.PMSetPageRange(printSettings, startPage, endPage);", "-\t\t\t\t} else {", "-\t\t\t\t\tOS.PMSetPageRange(printSettings, 1, OS.kPMPrintAllPages);", "-\t\t\t\t}", "-\t\t\t\tboolean[] accepted = new boolean [1];", "-\t\t\t\tOS.PMSessionPageSetupDialog(printSession, pageFormat, accepted);\t", "-\t\t\t\tif (accepted[0]) {\t\t", "-\t\t\t\t\tOS.PMSessionPrintDialog(printSession, printSettings, pageFormat, accepted);", "-\t\t\t\t\tif (accepted[0]) {", "-\t\t\t\t\t\tshort[] destType = new short[1];", "-\t\t\t\t\t\tOS.PMSessionGetDestinationType(printSession, printSettings, destType);", "-\t\t\t\t\t\tString name = Printer.getCurrentPrinterName(printSession);", "-\t\t\t\t\t\tString driver = Printer.DRIVER;", "-\t\t\t\t\t\tswitch (destType[0]) {", "-\t\t\t\t\t\t\tcase OS.kPMDestinationFax: driver = Printer.FAX_DRIVER; break;", "-\t\t\t\t\t\t\tcase OS.kPMDestinationFile: driver = Printer.FILE_DRIVER; break;", "-\t\t\t\t\t\t\tcase OS.kPMDestinationPreview: driver = Printer.PREVIEW_DRIVER; break;", "-\t\t\t\t\t\t\tcase OS.kPMDestinationPrinter: driver = Printer.PRINTER_DRIVER; break;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tPrinterData data = new PrinterData(driver, name);", "-\t\t\t\t\t\tif (destType[0] == OS.kPMDestinationFile) {", "-\t\t\t\t\t\t\tdata.printToFile = true;", "-\t\t\t\t\t\t\tOS.PMSessionCopyDestinationLocation(printSession, printSettings, buffer);", "-\t\t\t\t\t\t\tint fileName = OS.CFURLCopyFileSystemPath(buffer[0],OS.kCFURLPOSIXPathStyle);", "-\t\t\t\t\t\t\tOS.CFRelease(buffer[0]);", "-\t\t\t\t\t\t\tdata.fileName = Printer.getString(fileName);", "-\t\t\t\t\t\t\tOS.CFRelease(fileName);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tOS.PMGetCopies(printSettings, buffer);", "-\t\t\t\t\t\tdata.copyCount = buffer[0];\t\t\t\t\t\t", "-\t\t\t\t\t\tOS.PMGetFirstPage(printSettings, buffer);", "-\t\t\t\t\t\tdata.startPage = buffer[0];", "-\t\t\t\t\t\tOS.PMGetLastPage(printSettings, buffer);", "-\t\t\t\t\t\tdata.endPage = buffer[0];", "-\t\t\t\t\t\tOS.PMGetPageRange(printSettings, null, buffer);", "-\t\t\t\t\t\tif (data.startPage == 1 && data.endPage == OS.kPMPrintAllPages) {", "-\t\t\t\t\t\t\tdata.scope = PrinterData.ALL_PAGES;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean[] collate = new boolean[1];", "-\t\t\t\t\t\tOS.PMGetCollate(printSettings, collate);", "-\t\t\t\t\t\tdata.collate = collate[0];", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t/* Serialize settings */", "-\t\t\t\t\t\tint[] flatSettings = new int[1];", "-\t\t\t\t\t\tOS.PMFlattenPrintSettings(printSettings, flatSettings);", "-\t\t\t\t\t\tint[] flatFormat = new int[1];", "-\t\t\t\t\t\tOS.PMFlattenPageFormat(pageFormat, flatFormat);", "-\t\t\t\t\t\tint settingsLength = OS.GetHandleSize (flatSettings[0]);", "-\t\t\t\t\t\tint formatLength = OS.GetHandleSize (flatFormat[0]);", "-\t\t\t\t\t\tbyte[] otherData = data.otherData = new byte[settingsLength + formatLength + 8];", "-\t\t\t\t\t\tint offset = 0;", "-\t\t\t\t\t\toffset = Printer.packData(flatSettings[0], otherData, offset);", "-\t\t\t\t\t\toffset = Printer.packData(flatFormat[0], otherData, offset);", "-\t\t\t\t\t\tOS.DisposeHandle(flatSettings[0]);", "-\t\t\t\t\t\tOS.DisposeHandle(flatFormat[0]);", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tscope = data.scope;", "-\t\t\t\t\t\tstartPage = data.startPage;", "-\t\t\t\t\t\tendPage = data.endPage;", "-\t\t\t\t\t\tprintToFile = data.printToFile;", "-\t\t\t\t\t\treturn data;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tOS.PMRelease(pageFormat);", "-\t\t\t}", "-\t\t\tOS.PMRelease(printSettings);", "-\t\t}", "-\t\tOS.PMRelease(printSession);", "-\t}", "+\tNSPrintPanel panel = NSPrintPanel.printPanel();", "+\tNSPrintInfo printInfo =(NSPrintInfo)new NSPrintInfo().alloc();", "+\tprintInfo.initWithDictionary(null);", "+\tpanel.runModalWithPrintInfo(printInfo);", "+\tprintInfo.release();", "+//\tint[] buffer = new int[1];", "+//\tif (OS.PMCreateSession(buffer) == OS.noErr) {", "+//\t\tint printSession = buffer[0];", "+//\t\tif (OS.PMCreatePrintSettings(buffer) == OS.noErr) {", "+//\t\t\tint printSettings = buffer[0];", "+//\t\t\tOS.PMSessionDefaultPrintSettings(printSession, printSettings);", "+//\t\t\tif (OS.PMCreatePageFormat(buffer) == OS.noErr) {", "+//\t\t\t\tint pageFormat = buffer[0];", "+//\t\t\t\tOS.PMSessionDefaultPageFormat(printSession, pageFormat);", "+//\t\t\t\tOS.PMSessionSetDestination(printSession, printSettings, (short) (printToFile ? OS.kPMDestinationFile : OS.kPMDestinationPrinter), 0, 0);", "+//\t\t\t\tif (scope == PrinterData.PAGE_RANGE) {", "+//\t\t\t\t\tOS.PMSetFirstPage(printSettings, startPage, false);", "+//\t\t\t\t\tOS.PMSetLastPage(printSettings, endPage, false);", "+//\t\t\t\t\tOS.PMSetPageRange(printSettings, startPage, endPage);", "+//\t\t\t\t} else {", "+//\t\t\t\t\tOS.PMSetPageRange(printSettings, 1, OS.kPMPrintAllPages);", "+//\t\t\t\t}", "+//\t\t\t\tboolean[] accepted = new boolean [1];", "+//\t\t\t\tOS.PMSessionPageSetupDialog(printSession, pageFormat, accepted);\t", "+//\t\t\t\tif (accepted[0]) {\t\t", "+//\t\t\t\t\tOS.PMSessionPrintDialog(printSession, printSettings, pageFormat, accepted);", "+//\t\t\t\t\tif (accepted[0]) {", "+//\t\t\t\t\t\tshort[] destType = new short[1];", "+//\t\t\t\t\t\tOS.PMSessionGetDestinationType(printSession, printSettings, destType);", "+//\t\t\t\t\t\tString name = Printer.getCurrentPrinterName(printSession);", "+//\t\t\t\t\t\tString driver = Printer.DRIVER;", "+//\t\t\t\t\t\tswitch (destType[0]) {", "+//\t\t\t\t\t\t\tcase OS.kPMDestinationFax: driver = Printer.FAX_DRIVER; break;", "+//\t\t\t\t\t\t\tcase OS.kPMDestinationFile: driver = Printer.FILE_DRIVER; break;", "+//\t\t\t\t\t\t\tcase OS.kPMDestinationPreview: driver = Printer.PREVIEW_DRIVER; break;", "+//\t\t\t\t\t\t\tcase OS.kPMDestinationPrinter: driver = Printer.PRINTER_DRIVER; break;", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t\tPrinterData data = new PrinterData(driver, name);", "+//\t\t\t\t\t\tif (destType[0] == OS.kPMDestinationFile) {", "+//\t\t\t\t\t\t\tdata.printToFile = true;", "+//\t\t\t\t\t\t\tOS.PMSessionCopyDestinationLocation(printSession, printSettings, buffer);", "+//\t\t\t\t\t\t\tint fileName = OS.CFURLCopyFileSystemPath(buffer[0],OS.kCFURLPOSIXPathStyle);", "+//\t\t\t\t\t\t\tOS.CFRelease(buffer[0]);", "+//\t\t\t\t\t\t\tdata.fileName = Printer.getString(fileName);", "+//\t\t\t\t\t\t\tOS.CFRelease(fileName);", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t\tOS.PMGetCopies(printSettings, buffer);", "+//\t\t\t\t\t\tdata.copyCount = buffer[0];\t\t\t\t\t\t", "+//\t\t\t\t\t\tOS.PMGetFirstPage(printSettings, buffer);", "+//\t\t\t\t\t\tdata.startPage = buffer[0];", "+//\t\t\t\t\t\tOS.PMGetLastPage(printSettings, buffer);", "+//\t\t\t\t\t\tdata.endPage = buffer[0];", "+//\t\t\t\t\t\tOS.PMGetPageRange(printSettings, null, buffer);", "+//\t\t\t\t\t\tif (data.startPage == 1 && data.endPage == OS.kPMPrintAllPages) {", "+//\t\t\t\t\t\t\tdata.scope = PrinterData.ALL_PAGES;", "+//\t\t\t\t\t\t} else {", "+//\t\t\t\t\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t\tboolean[] collate = new boolean[1];", "+//\t\t\t\t\t\tOS.PMGetCollate(printSettings, collate);", "+//\t\t\t\t\t\tdata.collate = collate[0];", "+//\t\t\t\t\t\t", "+//\t\t\t\t\t\t/* Serialize settings */", "+//\t\t\t\t\t\tint[] flatSettings = new int[1];", "+//\t\t\t\t\t\tOS.PMFlattenPrintSettings(printSettings, flatSettings);", "+//\t\t\t\t\t\tint[] flatFormat = new int[1];", "+//\t\t\t\t\t\tOS.PMFlattenPageFormat(pageFormat, flatFormat);", "+//\t\t\t\t\t\tint settingsLength = OS.GetHandleSize (flatSettings[0]);", "+//\t\t\t\t\t\tint formatLength = OS.GetHandleSize (flatFormat[0]);", "+//\t\t\t\t\t\tbyte[] otherData = data.otherData = new byte[settingsLength + formatLength + 8];", "+//\t\t\t\t\t\tint offset = 0;", "+//\t\t\t\t\t\toffset = Printer.packData(flatSettings[0], otherData, offset);", "+//\t\t\t\t\t\toffset = Printer.packData(flatFormat[0], otherData, offset);", "+//\t\t\t\t\t\tOS.DisposeHandle(flatSettings[0]);", "+//\t\t\t\t\t\tOS.DisposeHandle(flatFormat[0]);", "+//\t\t\t\t\t\t", "+//\t\t\t\t\t\tscope = data.scope;", "+//\t\t\t\t\t\tstartPage = data.startPage;", "+//\t\t\t\t\t\tendPage = data.endPage;", "+//\t\t\t\t\t\tprintToFile = data.printToFile;", "+//\t\t\t\t\t\treturn data;", "+//\t\t\t\t\t}", "+//\t\t\t\t}", "+//\t\t\t\tOS.PMRelease(pageFormat);", "+//\t\t\t}", "+//\t\t\tOS.PMRelease(printSettings);", "+//\t\t}", "+//\t\tOS.PMRelease(printSession);", "+//\t}"]}], "num": 18974}
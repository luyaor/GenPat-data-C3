{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2df63e6ff5d703dec00541dba42b517e", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ad9925011079a463356542accaef029", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 60, "signatureBeforeChange": "\r \r int processSetFocus (int callData)", "signatureAfterChange": "\r int XFocusChange (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-\r", "-int processSetFocus (int callData) {\r", "-\tXFocusChangeEvent xEvent = new XFocusChangeEvent ();\r", "-\tOS.memmove (xEvent, callData, XFocusChangeEvent.sizeof);\r", "-\tint handle = OS.XtWindowToWidget (xEvent.display, xEvent.window);\r", "-\tif (handle != shellHandle) return super.processSetFocus (callData);\r", "-\tif (xEvent.mode != OS.NotifyNormal) return 0;\r", "-\tswitch (xEvent.detail) {\r", "-\t\tcase OS.NotifyNonlinear:\r", "-\t\tcase OS.NotifyNonlinearVirtual: {\r", "-\t\t\tswitch (xEvent.type) {\r", "-\t\t\t\tcase OS.FocusIn: \r", "-\t\t\t\t\tpostEvent (SWT.Activate);\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase OS.FocusOut:\r", "-\t\t\t\t\tpostEvent (SWT.Deactivate);\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\treturn 0;\r", "+int XFocusChange (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tXFocusChangeEvent xEvent = new XFocusChangeEvent ();\r", "+\tOS.memmove (xEvent, call_data, XFocusChangeEvent.sizeof);\r", "+\tint handle = OS.XtWindowToWidget (xEvent.display, xEvent.window);\r", "+\tif (handle != shellHandle) return super.XFocusChange (w, client_data, call_data, continue_to_dispatch);\r", "+\tif (xEvent.mode != OS.NotifyNormal) return 0;\r", "+\tswitch (xEvent.detail) {\r", "+\t\tcase OS.NotifyNonlinear:\r", "+\t\tcase OS.NotifyNonlinearVirtual: {\r", "+\t\t\tswitch (xEvent.type) {\r", "+\t\t\t\tcase OS.FocusIn: \r", "+\t\t\t\t\tpostEvent (SWT.Activate);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase OS.FocusOut:\r", "+\t\t\t\t\tpostEvent (SWT.Deactivate);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8d9aea2b8e29a70e6a9516871e4a0d56", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r \r int processPaint (int callData)", "signatureAfterChange": "\r int XExposure (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-\r", "-int processPaint (int callData) {\r", "-\tboolean isFocus = caret != null && caret.isFocusCaret ();\r", "-\tif (isFocus) caret.killFocus ();\r", "-\tint result = super.processPaint (callData);\r", "-\tif (isFocus) caret.setFocus ();\r", "-\treturn result;\r", "-}\r", "+int XExposure (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tboolean isFocus = caret != null && caret.isFocusCaret ();\r", "+\tif (isFocus) caret.killFocus ();\r", "+\tint result = super.XExposure (w, client_data, call_data, continue_to_dispatch);\r", "+\tif (isFocus) caret.setFocus ();\r", "+\treturn result;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87d273b02a001a65330bd15d638271b9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 53, "signatureBeforeChange": "\r int processKeyDown (int callData)", "signatureAfterChange": "\r int XKeyPress (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-int processKeyDown (int callData) {\r", "-\tXKeyEvent xEvent = new XKeyEvent ();\r", "-\tOS.memmove (xEvent, callData, XKeyEvent.sizeof);\r", "-\tint [] keysym = new int [1];\r", "-\tOS.XLookupString (xEvent, null, 0, keysym, null);\r", "-\tkeysym [0] &= 0xFFFF;\r", "-\tswitch (keysym [0]) {\r", "-\t\tcase OS.XK_space:\r", "-\t\t\tclick (false, xEvent);\r", "-\t\t\tbreak;\r", "-\t\tcase OS.XK_KP_Enter:\r", "-\t\tcase OS.XK_Return:\r", "-\t\t\tclick (true, xEvent);\r", "-\t\t\tbreak;\r", "-\t}\r", "-\t/*\r", "-\t* Forward the key event to the parent.\r", "-\t* This is necessary so that key listeners\r", "-\t* in the parent will be called, despite the\r", "-\t* fact that the event did not really occur\r", "-\t* in X in the parent.  This is done to be\r", "-\t* compatible with Windows.\r", "-\t*/\r", "-\txEvent.window = OS.XtWindow (parent.handle);\r", "-//\tOS.memmove (callData, xEvent, XKeyEvent.sizeof);\r", "-\tparent.processKeyDown (callData);\r", "-\treturn 0;\r", "+int XKeyPress (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tXKeyEvent xEvent = new XKeyEvent ();\r", "+\tOS.memmove (xEvent, call_data, XKeyEvent.sizeof);\r", "+\tint [] keysym = new int [1];\r", "+\tOS.XLookupString (xEvent, null, 0, keysym, null);\r", "+\tkeysym [0] &= 0xFFFF;\r", "+\tswitch (keysym [0]) {\r", "+\t\tcase OS.XK_space:\r", "+\t\t\tclick (false, xEvent);\r", "+\t\t\tbreak;\r", "+\t\tcase OS.XK_KP_Enter:\r", "+\t\tcase OS.XK_Return:\r", "+\t\t\tclick (true, xEvent);\r", "+\t\t\tbreak;\r", "+\t}\r", "+\t/*\r", "+\t* Forward the key event to the parent.\r", "+\t* This is necessary so that key listeners\r", "+\t* in the parent will be called, despite the\r", "+\t* fact that the event did not really occur\r", "+\t* in X in the parent.  This is done to be\r", "+\t* compatible with Windows.\r", "+\t*/\r", "+\txEvent.window = OS.XtWindow (parent.handle);\r", "+//\tOS.memmove (callData, xEvent, XKeyEvent.sizeof);\r", "+\tparent.XKeyPress (w, client_data, call_data, continue_to_dispatch);\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57066bc17d54404f065a4dca1f1c3fdc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 54, "signatureBeforeChange": "\r int processKeyUp (int callData)", "signatureAfterChange": "\r int XKeyRelease (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-int processKeyUp (int callData) {\r", "-\tXKeyEvent xEvent = new XKeyEvent ();\r", "-\tOS.memmove (xEvent, callData, XKeyEvent.sizeof);\r", "-\r", "-\t/*\r", "-\t* Forward the key event to the parent.\r", "-\t* This is necessary so that key listeners\r", "-\t* in the parent will be called, despite the\r", "-\t* fact that the event did not really occur\r", "-\t* in X in the parent.  This is done to be\r", "-\t* compatible with Windows.\r", "-\t*/\r", "-\txEvent.window = OS.XtWindow (parent.handle);\r", "-//\tOS.memmove (callData, xEvent, XKeyEvent.sizeof);\r", "-\tparent.processKeyUp (callData);\r", "-\treturn 0;\r", "+}\r", "+int XKeyRelease (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tXKeyEvent xEvent = new XKeyEvent ();\r", "+\tOS.memmove (xEvent, call_data, XKeyEvent.sizeof);\r", "+\r", "+\t/*\r", "+\t* Forward the key event to the parent.\r", "+\t* This is necessary so that key listeners\r", "+\t* in the parent will be called, despite the\r", "+\t* fact that the event did not really occur\r", "+\t* in X in the parent.  This is done to be\r", "+\t* compatible with Windows.\r", "+\t*/\r", "+\txEvent.window = OS.XtWindow (parent.handle);\r", "+//\tOS.memmove (callData, xEvent, XKeyEvent.sizeof);\r", "+\tparent.XKeyRelease (w, client_data, call_data, continue_to_dispatch);\r", "+\treturn 0;\r", "+}\r"]}], "num": 35080}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3802fa077b4d1b742d7ac7bbdf58b602", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3109ec437e973aa83c8d599db36a926", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "a397adb9835229656215e95243704829dfcbbeb5", "commitAfterChange": "def775014633899bdd73c908cbbdd1bf2fa7d5be", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": "\t  \tint atkComponent_get_extents (int x, int y, int width, int height, int coord_type)", "signatureAfterChange": "\t  \tint atkComponent_get_extents (int x, int y, int width, int height, int coord_type)", "diff": ["-\t\tif (accessible.getControlListeners ().length != 0) {", "-\t\t\tAccessibleControlListener[] listeners = accessible.getControlListeners ();", "-\t\t\tAccessibleControlEvent event = new AccessibleControlEvent (this);", "-\t\t\tevent.childID = id;", "-\t\t\tevent.x = event.y = event.width = event.height = -1;", "-\t\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\t\tlisteners [i].getLocation (event);", "-\t\t\t}", "-\t\t\tif (event.x != -1 && event.y != -1 && event.width != -1 && event.height != -1) { ", "-\t\t\t\tif (coord_type == ATK.ATK_XY_WINDOW) {", "-\t\t\t\t\t// translate display -> control ", "-\t\t\t\t\tint gtkAccessibleHandle = OS.GTK_ACCESSIBLE (handle);", "-\t\t\t\t\tGtkAccessible gtkAccessible = new GtkAccessible ();", "-\t\t\t\t\tOS.memmove (gtkAccessible, gtkAccessibleHandle);", "-\t\t\t\t\tint topLevel = OS.gtk_widget_get_toplevel (gtkAccessible.widget);", "-\t\t\t\t\tint window = OS.GTK_WIDGET_WINDOW (topLevel);", "-\t\t\t\t\tint[] topWindowX = new int [1], topWindowY = new int [1];", "-\t\t\t\t\tOS.gdk_window_get_origin (window, topWindowX, topWindowY);", "-\t\t\t\t\tevent.x -= topWindowX [0];", "-\t\t\t\t\tevent.y -= topWindowY [0];", "-\t\t\t\t}", "-\t\t\t\tOS.memmove (x, new int[] {event.x}, 4);", "-\t\t\t\tOS.memmove (y, new int[] {event.y}, 4);", "-\t\t\t\tOS.memmove (width, new int[] {event.width}, 4);", "-\t\t\t\tOS.memmove (height, new int[] {event.height}, 4);", "-\t\t\t\treturn 0;", "-\t\t\t}", "-\t\t}", "+\t\tint parentResult = 0;", "-\t\t\tint superType = OS.g_type_class_peek (parentType);", "+\t\t\tint superType = OS.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (handle));", "-\t\t\t\treturn OS.call (componentIface.get_extents, x, y, width, height, coord_type);", "+\t\t\t\tparentResult = OS.call (componentIface.get_extents, x, y, width, height, coord_type);", "+\t\tAccessibleControlListener[] listeners = accessible.getControlListeners ();", "+\t\tif (listeners.length == 0) return parentResult;", "+\t\t", "+\t\tint[] parentX = new int [1], parentY = new int [1];", "+\t\tint[] parentWidth = new int [1], parentHeight = new int [1];", "+\t\tOS.memmove (parentX, x, 4);", "+\t\tOS.memmove (parentY, y, 4);", "+\t\tOS.memmove (parentWidth, width, 4);", "+\t\tOS.memmove (parentHeight, height, 4);", "+\t\tAccessibleControlEvent event = new AccessibleControlEvent (this);", "+\t\tevent.childID = id;", "+\t\tevent.x = parentX [0]; event.y = parentY [0];", "+\t\tevent.width = parentWidth [0]; event.height = parentHeight [0];", "+\t\tif (coord_type == ATK.ATK_XY_WINDOW) {", "+\t\t\t// translate control -> display, for filling in the event to be dispatched", "+\t\t\tint gtkAccessibleHandle = OS.GTK_ACCESSIBLE (handle);", "+\t\t\tGtkAccessible gtkAccessible = new GtkAccessible ();", "+\t\t\tOS.memmove (gtkAccessible, gtkAccessibleHandle);", "+\t\t\tint topLevel = OS.gtk_widget_get_toplevel (gtkAccessible.widget);", "+\t\t\tint window = OS.GTK_WIDGET_WINDOW (topLevel);\t\t\t\t", "+\t\t\tint[] topWindowX = new int [1], topWindowY = new int [1];", "+\t\t\tOS.gdk_window_get_origin (window, topWindowX, topWindowY);", "+\t\t\tevent.x += topWindowX [0];", "+\t\t\tevent.y += topWindowY [0]; ", "+\t\t}", "+\t\tfor (int i = 0; i < listeners.length; i++) {", "+\t\t\tlisteners [i].getLocation (event);", "+\t\t}", "+\t\tif (coord_type == ATK.ATK_XY_WINDOW) {", "+\t\t\t// translate display -> control, for answering to the OS ", "+\t\t\tint gtkAccessibleHandle = OS.GTK_ACCESSIBLE (handle);", "+\t\t\tGtkAccessible gtkAccessible = new GtkAccessible ();", "+\t\t\tOS.memmove (gtkAccessible, gtkAccessibleHandle);", "+\t\t\tint topLevel = OS.gtk_widget_get_toplevel (gtkAccessible.widget);", "+\t\t\tint window = OS.GTK_WIDGET_WINDOW (topLevel);", "+\t\t\tint[] topWindowX = new int [1], topWindowY = new int [1];", "+\t\t\tOS.gdk_window_get_origin (window, topWindowX, topWindowY);", "+\t\t\tevent.x -= topWindowX [0];", "+\t\t\tevent.y -= topWindowY [0];", "+\t\t}", "+\t\tOS.memmove (x, new int[] {event.x}, 4);", "+\t\tOS.memmove (y, new int[] {event.y}, 4);", "+\t\tOS.memmove (width, new int[] {event.width}, 4);", "+\t\tOS.memmove (height, new int[] {event.height}, 4);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1de1ebda5e60b6219156818d586e3b78", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "a397adb9835229656215e95243704829dfcbbeb5", "commitAfterChange": "def775014633899bdd73c908cbbdd1bf2fa7d5be", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 5, "signatureBeforeChange": "  \tint atkComponent_get_position (int x, int y, int coord_type)", "signatureAfterChange": "  \tint atkComponent_get_position (int x, int y, int coord_type)", "diff": ["-\t\tif (accessible.getControlListeners ().length != 0) {", "-\t\t\tAccessibleControlListener[] listeners = accessible.getControlListeners ();", "-\t\t\tAccessibleControlEvent event = new AccessibleControlEvent (this);", "-\t\t\tevent.childID = id;", "-\t\t\tevent.x = event.y = -1;", "-\t\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\t\tlisteners [i].getLocation (event);", "-\t\t\t}", "-\t\t\tif (event.x != -1 && event.y != -1) { ", "-\t\t\t\tif (coord_type == ATK.ATK_XY_WINDOW) {", "-\t\t\t\t\t// translate display -> control ", "-\t\t\t\t\tint gtkAccessibleHandle = OS.GTK_ACCESSIBLE (handle);", "-\t\t\t\t\tGtkAccessible gtkAccessible = new GtkAccessible ();", "-\t\t\t\t\tOS.memmove (gtkAccessible, gtkAccessibleHandle);", "-\t\t\t\t\tint topLevel = OS.gtk_widget_get_toplevel (gtkAccessible.widget);", "-\t\t\t\t\tint window = OS.GTK_WIDGET_WINDOW (topLevel);", "-\t\t\t\t\tint[] topWindowX = new int [1], topWindowY = new int [1];", "-\t\t\t\t\tOS.gdk_window_get_origin (window, topWindowX, topWindowY);", "-\t\t\t\t\tevent.x -= topWindowX [0];", "-\t\t\t\t\tevent.y -= topWindowY [0];", "-\t\t\t\t}", "-\t\t\t\tOS.memmove (x, new int[] {event.x}, 4);", "-\t\t\t\tOS.memmove (y, new int[] {event.y}, 4);", "-\t\t\t\treturn 0;", "-\t\t\t}", "-\t\t}", "+\t\tint parentResult = 0;", "-\t\t\tint superType = OS.g_type_class_peek (parentType);", "+\t\t\tint superType = OS.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (handle));", "-\t\t\tif (componentIface.get_position != 0) {", "-\t\t\t\treturn OS.call (componentIface.get_position, handle, x, y, coord_type);", "+\t\t\tif (componentIface.get_extents != 0) {", "+\t\t\t\tparentResult = OS.call (componentIface.get_position, x, y, coord_type);", "+\t\tAccessibleControlListener[] listeners = accessible.getControlListeners ();", "+\t\tif (listeners.length == 0) return parentResult;", "+\t\t", "+\t\tint[] parentX = new int [1], parentY = new int [1];", "+\t\tOS.memmove (parentX, x, 4);", "+\t\tOS.memmove (parentY, y, 4);", "+\t\tAccessibleControlEvent event = new AccessibleControlEvent (this);", "+\t\tevent.childID = id;", "+\t\tevent.x = parentX [0]; event.y = parentY [0];", "+\t\tif (coord_type == ATK.ATK_XY_WINDOW) {", "+\t\t\t// translate control -> display, for filling in the event to be dispatched", "+\t\t\tint gtkAccessibleHandle = OS.GTK_ACCESSIBLE (handle);", "+\t\t\tGtkAccessible gtkAccessible = new GtkAccessible ();", "+\t\t\tOS.memmove (gtkAccessible, gtkAccessibleHandle);", "+\t\t\tint topLevel = OS.gtk_widget_get_toplevel (gtkAccessible.widget);", "+\t\t\tint window = OS.GTK_WIDGET_WINDOW (topLevel);\t\t\t\t", "+\t\t\tint[] topWindowX = new int [1], topWindowY = new int [1];", "+\t\t\tOS.gdk_window_get_origin (window, topWindowX, topWindowY);", "+\t\t\tevent.x += topWindowX [0];", "+\t\t\tevent.y += topWindowY [0]; ", "+\t\t}", "+\t\tfor (int i = 0; i < listeners.length; i++) {", "+\t\t\tlisteners [i].getLocation (event);", "+\t\t}", "+\t\tif (coord_type == ATK.ATK_XY_WINDOW) {", "+\t\t\t// translate display -> control, for answering to the OS ", "+\t\t\tint gtkAccessibleHandle = OS.GTK_ACCESSIBLE (handle);", "+\t\t\tGtkAccessible gtkAccessible = new GtkAccessible ();", "+\t\t\tOS.memmove (gtkAccessible, gtkAccessibleHandle);", "+\t\t\tint topLevel = OS.gtk_widget_get_toplevel (gtkAccessible.widget);", "+\t\t\tint window = OS.GTK_WIDGET_WINDOW (topLevel);", "+\t\t\tint[] topWindowX = new int [1], topWindowY = new int [1];", "+\t\t\tOS.gdk_window_get_origin (window, topWindowX, topWindowY);", "+\t\t\tevent.x -= topWindowX [0];", "+\t\t\tevent.y -= topWindowY [0];", "+\t\t}", "+\t\tOS.memmove (x, new int[] {event.x}, 4);", "+\t\tOS.memmove (y, new int[] {event.y}, 4);"]}], "num": 57002}
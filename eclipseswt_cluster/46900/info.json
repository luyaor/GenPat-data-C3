{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a1df25c1ab70a253fa964af26f4e1e48", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e67f1b4c0600e167027a2b79cfc49cf0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "61f50052042e8e5211eed2203f3ae39ad0765025", "commitAfterChange": "6207053cbabec2bceac5c0fcadb16091fc8a4c80", "methodNumberBeforeChange": 212, "methodNumberAfterChange": 212, "signatureBeforeChange": "  void setInitialBounds ()", "signatureAfterChange": "  void setInitialBounds ()", "diff": ["+\t\tGtkAllocation allocation = new GtkAllocation();", "-\t\t\tOS.GTK_WIDGET_SET_X (topHandle, parent.getClientWidth ());", "+\t\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "+\t\t\t\tallocation.x = parent.getClientWidth ();", "+\t\t\t} else {", "+\t\t\t\tOS.GTK_WIDGET_SET_X (topHandle, parent.getClientWidth ());", "+\t\t\t}", "-\t\t\tOS.GTK_WIDGET_SET_X (topHandle, 0);", "+\t\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "+\t\t\t\tallocation.x = 0;", "+\t\t\t} else {", "+\t\t\t\tOS.GTK_WIDGET_SET_X (topHandle, 0);", "+\t\t\t}", "-\t\tOS.GTK_WIDGET_SET_Y (topHandle, 0);", "+\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "+\t\t\tallocation.y = 0;", "+\t\t\tOS.gtk_widget_set_allocation(topHandle, allocation);", "+\t\t} else {", "+\t\t\tOS.GTK_WIDGET_SET_Y (topHandle, 0);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1ad6e829ed0510fed586160227c9bc6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ScrollBar.java", "commitBeforeChange": "165a14baa4f28638048d0b616f73e1b86413e4a2", "commitAfterChange": "195c35fb4aaf6777b97d64fa53ba79208d6d54ee", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public Rectangle getThumbBounds ()", "signatureAfterChange": " public Rectangle getThumbBounds ()", "diff": ["+\tGtkAllocation allocation = new GtkAllocation ();", "-\t\tx = OS.GTK_WIDGET_X (handle);", "+\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "+\t\t\tOS.gtk_widget_get_allocation(handle, allocation);", "+\t\t\tx = allocation.x;", "+\t\t\twidth = allocation.width;", "+\t\t} else {", "+\t\t\tx = OS.GTK_WIDGET_X (handle);", "+\t\t\twidth = OS.GTK_WIDGET_WIDTH (handle);", "+\t\t}", "-\t\twidth = OS.GTK_WIDGET_WIDTH (handle);", "-\t\ty = OS.GTK_WIDGET_Y (handle);", "+\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "+\t\t\tOS.gtk_widget_get_allocation(handle, allocation);", "+\t\t\ty = allocation.y;", "+\t\t\theight = allocation.height;", "+\t\t} else {", "+\t\t\ty = OS.GTK_WIDGET_Y (handle);", "+\t\t\theight = OS.GTK_WIDGET_HEIGHT (handle);", "+\t\t}", "-\t\theight = OS.GTK_WIDGET_HEIGHT (handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "524494f1eb4f2311783357a8966893fe", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "9cc72cd00c181250b1f51b95a0528a6b993c1ed9", "commitAfterChange": "1c6100db3e7e2869dd9939a388c01ffe02266ae6", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  int gtk_clicked (int widget)", "signatureAfterChange": "  int gtk_clicked (int widget)", "diff": ["+\t\t\tint /*long*/ topHandle = topHandle();", "+\t\t\t\tcase OS.GDK_KEY_RELEASE: //Fall Through..", "-\t\t\t\t\tdouble [] x_win = new double [1];", "-\t\t\t\t\tdouble [] y_win = new double [1];", "-\t\t\t\t\tOS.gdk_event_get_coords (eventPtr, x_win, y_win);", "-\t\t\t\t\tint x = OS.GTK_WIDGET_X (arrowHandle) - OS.GTK_WIDGET_X (handle);", "-\t\t\t\t\tint width = OS.GTK_WIDGET_WIDTH (arrowHandle);", "-\t\t\t\t\tif ((((parent.style & SWT.RIGHT_TO_LEFT) == 0) && x <= (int)x_win [0])", "-\t\t\t\t\t\t|| (((parent.style & SWT.RIGHT_TO_LEFT) != 0) && (int)x_win [0] <= x + width)) {", "+\t\t\t\t\tboolean isArrow = false;", "+\t\t\t\t\tif (OS.GTK_VERSION < OS.VERSION (2, 6, 0)) {", "+\t\t\t\t\t\tdouble [] x_win = new double [1];", "+\t\t\t\t\t\tdouble [] y_win = new double [1];", "+\t\t\t\t\t\tOS.gdk_event_get_coords (eventPtr, x_win, y_win);", "+\t\t\t\t\t\tint x = OS.GTK_WIDGET_X (arrowHandle) - OS.GTK_WIDGET_X (handle);", "+\t\t\t\t\t\tint width = OS.GTK_WIDGET_WIDTH (arrowHandle);", "+\t\t\t\t\t\tif ((((parent.style & SWT.RIGHT_TO_LEFT) == 0) && x <= (int)x_win [0])", "+\t\t\t\t\t\t\t\t|| (((parent.style & SWT.RIGHT_TO_LEFT) != 0) && (int)x_win [0] <= x + width)) {", "+\t\t\t\t\t\t\tisArrow = true;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t} else if (widget == arrowHandle) {", "+\t\t\t\t\t\tisArrow = true;", "+\t\t\t\t\t\ttopHandle = widget;", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t * Feature in GTK. ArrowButton stays in toggled state if there is no popup menu.", "+\t\t\t\t\t\t * It is required to set back the state of arrow to normal state after it is clicked.", "+\t\t\t\t\t\t */", "+\t\t\t\t\t\tOS.g_signal_handlers_block_matched (widget, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CLICKED);", "+\t\t\t\t\t\tOS.gtk_toggle_button_set_active(widget, false);", "+\t\t\t\t\t\tOS.g_signal_handlers_unblock_matched (widget, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CLICKED);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (isArrow) {", "-\t\t\t\t\t\tint /*long*/ topHandle = topHandle ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "930205c45561e73dc698b3b105651da0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "230e8f81908de6014195879647987df8a8397c51", "commitAfterChange": "9ac8c0e88f5229b03595c61718c99be09abe7fd3", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "\r public TreeItem [] getSelection ()", "signatureAfterChange": "\r public TreeItem [] getSelection ()", "diff": ["+\tTreeItem [] guess = new TreeItem [8];\r", "-\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) != 0) count++;\r", "+\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) != 0) {\r", "+\t\t\t\tif (count < guess.length) guess [count] = item;\r", "+\t\t\t\tcount++;\r", "+\t\t\t}\r", "+\tOS.SetWindowLong (handle, OS.GWL_WNDPROC, oldProc);\r", "+\tif (count == 0) return new TreeItem [0];\r", "+\tif (count == guess.length) return guess;\r", "-\tif (count != 0) {\r", "-\t\tint index = 0;\r", "-\t\tfor (int i=0; i<items.length; i++) {\r", "-\t\t\tTreeItem item = items [i];\r", "-\t\t\tif (item != null) {\r", "-\t\t\t\ttvItem.hItem = item.handle;\r", "-\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);\r", "-\t\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) != 0) {\r", "-\t\t\t\t\tresult [index++] = item;\r", "-\t\t\t\t}\r", "+\tif (count < guess.length) {\r", "+\t\tSystem.arraycopy (guess, 0, result, 0, count);\r", "+\t\treturn result;\r", "+\t}\r", "+\tOS.SetWindowLong (handle, OS.GWL_WNDPROC, TreeProc);\r", "+\tint index = 0;\r", "+\tfor (int i=0; i<items.length; i++) {\r", "+\t\tTreeItem item = items [i];\r", "+\t\tif (item != null) {\r", "+\t\t\ttvItem.hItem = item.handle;\r", "+\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);\r", "+\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) != 0) {\r", "+\t\t\t\tresult [index++] = item;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ac9cfd0b050b367190a82119e3a98fe", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "058843ec5debf78b5e1461b60991c47cc05c23d3", "commitAfterChange": "e91638284e681c28532a38f51bdfcbbeea2d1f41", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 97, "signatureBeforeChange": " \t \tstatic void windowPoint (AccessibleObject object, int [] x, int [] y)", "signatureAfterChange": " \t \tstatic void windowPoint (AccessibleObject object, int [] x, int [] y)", "diff": ["-\t\tGtkAccessible gtkAccessible = new GtkAccessible ();", "-\t\tATK.memmove (gtkAccessible, object.handle);", "-\t\twhile (gtkAccessible.widget == 0 && object.parent != null) {", "-\t\t\tobject = object.parent;", "+\t\tlong /*int*/ widget;", "+\t\tif (OS.GTK_VERSION >= OS.VERSION(2, 22, 0)) {", "+\t\t\twidget = OS.gtk_accessible_get_widget(object.handle);", "+\t\t} else {", "+\t\t\tGtkAccessible gtkAccessible = new GtkAccessible ();", "+\t\t\twidget = gtkAccessible.widget;", "-\t\tif (gtkAccessible.widget == 0) return;", "-\t\tlong /*int*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);", "+\t\twhile (widget == 0 && object.parent != null) {", "+\t\t\tobject = object.parent;", "+\t\t\tif (OS.GTK_VERSION >= OS.VERSION(2, 22, 0)) {", "+\t\t\t\twidget = OS.gtk_accessible_get_widget(object.handle);", "+\t\t\t} else {", "+\t\t\t\tGtkAccessible gtkAccessible = new GtkAccessible ();", "+\t\t\t\tATK.memmove (gtkAccessible, object.handle);", "+\t\t\t\twidget = gtkAccessible.widget;", "+\t\t\t}", "+\t\t}", "+\t\tif (widget == 0) return;", "+\t\tlong /*int*/ topLevel = ATK.gtk_widget_get_toplevel (widget);"]}], "num": 46900}
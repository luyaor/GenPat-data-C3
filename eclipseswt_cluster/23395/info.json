{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7ee4426c4b62aa2991c628705c4e0b16", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bab050b35a6c22ee0256384c7017d7d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "e19b8929298db4194771a475b4b9ef56a8238374", "commitAfterChange": "ca0c5209be7fe694c5578ad160491b05c77a1894", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void drawRectangles ()", "signatureAfterChange": " void drawRectangles ()", "diff": ["-\tfor (int i = 0; i < rectShapes.length; i++) {", "+\tRectangle bounds = this.bounds;", "+\tif (bounds == null) return;", "+\tint children = OS.Panel_Children (canvasHandle);", "+\tOS.UIElementCollection_Clear (children);", "+\tif (parent != null) {", "+\t\tRectangle rect = parent.getClientArea ();", "+\t\trect.intersect (bounds);", "+\t\tbounds = rect;", "+\t\tPoint pt = display.map (parent, null, bounds.x, bounds.y);", "+\t\tOS.Popup_HorizontalOffset (handle, pt.x);", "+\t\tOS.Popup_VerticalOffset (handle, pt.y);", "+\t} else {", "+\t\tOS.Popup_HorizontalOffset (handle, bounds.x);", "+\t\tOS.Popup_VerticalOffset (handle, bounds.y);", "+\t}", "+\tOS.FrameworkElement_Width (handle, bounds.width);", "+\tOS.FrameworkElement_Height (handle, bounds.height);", "+\tint stroke, brush;", "+\tif (stippled) {", "+\t\tstroke = 3;", "+\t\tint pixelFormat = OS.PixelFormats_BlackWhite ();", "+\t\tbyte [] buffer = {-86, 0, 85, 0, -86, 0, 85, 0, -86, 0, 85, 0, -86, 0, 85, 0};", "+\t\tint image = OS.BitmapSource_Create (8, 8, 96, 96, pixelFormat, 0, buffer, buffer.length, 2);\t", "+\t\tOS.GCHandle_Free (pixelFormat);", "+\t\tbrush = OS.gcnew_ImageBrush (image);", "+\t\tOS.TileBrush_TileMode (brush, OS.TileMode_Tile);", "+\t\tOS.TileBrush_Stretch (brush, OS.Stretch_Fill);", "+\t\tOS.TileBrush_ViewportUnits (brush, OS.BrushMappingMode_Absolute);", "+\t\tint rect = OS.gcnew_Rect (0, 0, OS.BitmapSource_PixelWidth(image), OS.BitmapSource_PixelHeight(image));", "+\t\tOS.TileBrush_Viewport (brush, rect);", "+\t\tOS.GCHandle_Free (rect);", "+\t\tOS.GCHandle_Free (image);", "+\t} else {", "+\t\tstroke = 1;", "+\t\tbrush = OS.Brushes_Black ();", "+\t}", "+\tfor (int i = 0; i < rectangles.length; i++) {", "+\t\tint child = OS.gcnew_Rectangle ();", "+\t\tOS.UIElementCollection_Add (children, child);", "+\t\tOS.Shape_StrokeThickness (child, stroke);", "+\t\tOS.Shape_Stroke (child, brush);", "-\t\tint child = rectShapes [i];", "-\t\tOS.Canvas_SetLeft (child, rect.x);", "-\t\tOS.Canvas_SetTop (child, rect.y);", "+\t\tOS.Canvas_SetLeft (child, rect.x - bounds.x);", "+\t\tOS.Canvas_SetTop (child, rect.y - bounds.y);", "+\t\tOS.GCHandle_Free (child);", "+\tOS.GCHandle_Free (brush);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83b2383470ce7aa73c74521d2f773176", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "61543d447b16e5575c1e9c4cbc37aca5973d8e40", "commitAfterChange": "163cf0f05b0fcf27a13be2a0d956931bc7a0cf48", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 118, "signatureBeforeChange": "   void setBackground ()", "signatureAfterChange": "   void setBackground ()", "diff": ["-\tif (backgroundImage != null) {", "-\t\tint imageHandle = backgroundImage.handle;", "-\t\tbrush = OS.gcnew_ImageBrush (imageHandle);", "-\t\tOS.TileBrush_TileMode (brush, OS.TileMode_Tile);", "-\t\tOS.TileBrush_Stretch (brush, OS.Stretch_Fill);", "-\t\tOS.TileBrush_ViewportUnits (brush, OS.BrushMappingMode_Absolute);", "-\t\tint rect = OS.gcnew_Rect (0, 0, OS.BitmapSource_PixelWidth (imageHandle), OS.BitmapSource_PixelHeight (imageHandle));", "-\t\tOS.TileBrush_Viewport (brush, rect);", "-\t\tOS.GCHandle_Free (rect);", "-\t} else {", "-\t\t//TODO verify parent backgroundMode", "-\t\tint color = background;", "-\t\tif (color == 0) {", "-\t\t\tcolor = defaultBackground ();", "-\t\t\tif ((state & THEME_BACKGROUND) != 0) {", "-\t\t\t\tControl themeControl = findThemeControl ();", "-\t\t\t\tif (themeControl != null) {", "-\t\t\t\t\tif (color != 0) {", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* Feature in WPF. If the control does not have a background", "-\t\t\t\t\t\t* brush it does not receive input events.", "-\t\t\t\t\t\t* The fix is to set a transparent background.  ", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tcolor = OS.Colors_Transparent;", "+\tif ((state & PARENT_BACKGROUND) == 0) {", "+\t\tif (backgroundImage != null) {", "+\t\t\tint imageHandle = backgroundImage.handle;", "+\t\t\tbrush = OS.gcnew_ImageBrush (imageHandle);", "+\t\t\tOS.TileBrush_TileMode (brush, OS.TileMode_Tile);", "+\t\t\tOS.TileBrush_Stretch (brush, OS.Stretch_Fill);", "+\t\t\tOS.TileBrush_ViewportUnits (brush, OS.BrushMappingMode_Absolute);", "+\t\t\tint rect = OS.gcnew_Rect (0, 0, OS.BitmapSource_PixelWidth (imageHandle), OS.BitmapSource_PixelHeight (imageHandle));", "+\t\t\tOS.TileBrush_Viewport (brush, rect);", "+\t\t\tOS.GCHandle_Free (rect);", "+\t\t} else {", "+\t\t\tint color = background;", "+\t\t\tif (color == 0) {", "+\t\t\t\tcolor = defaultBackground ();", "+\t\t\t\tif ((state & THEME_BACKGROUND) != 0) {", "+\t\t\t\t\tControl themeControl = findThemeControl ();", "+\t\t\t\t\tif (themeControl != null) {", "+\t\t\t\t\t\tif (color != 0) {", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t* Feature in WPF. If the control does not have a background", "+\t\t\t\t\t\t\t* brush it does not receive input events.", "+\t\t\t\t\t\t\t* The fix is to set a transparent background.  ", "+\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\tcolor = OS.Colors_Transparent;", "+\t\t\t\t\t\t}", "-\t\t}", "-\t\tif (color != 0) {", "-\t\t\tbrush = OS.gcnew_SolidColorBrush (color);", "+\t\t\tif (color != 0) {", "+\t\t\t\tbrush = OS.gcnew_SolidColorBrush (color);", "+\t\t\t}"]}], "num": 23395}
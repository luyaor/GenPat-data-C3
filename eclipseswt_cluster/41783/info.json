{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a9209f39debe43753b8acf058a564730", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "56fe22dbc9c67be0fca81ae3bfef8733", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "9261515ec8255f5a441ba43146e123e19181d535", "commitAfterChange": "a1fedece41e31e9553bf3e514c2a2564f31a9dec", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 38, "signatureBeforeChange": "  void popupCalendarEvent (Event event)", "signatureAfterChange": "  void releaseWidget ()", "diff": ["-", "-void popupCalendarEvent (Event event) {", "-\tswitch (event.type) {", "-\t\tcase SWT.Dispose:", "-\t\t\tif (popupShell != null && !popupShell.isDisposed () && !isDisposed() && getShell () != popupShell.getParent ()) {", "-\t\t\t\tint year = popupCalendar.getYear ();", "-\t\t\t\tint month = popupCalendar.getMonth ();", "-\t\t\t\tint day = popupCalendar.getDay ();", "-\t\t\t\tpopupShell = null;", "-\t\t\t\tpopupCalendar = null;", "-\t\t\t\tcreatePopupShell (year, month, day);", "-\t\t\t}", "-\t\tcase SWT.FocusIn: {", "-\t\t\thandleFocus (SWT.FocusIn);", "-\t\t}", "-\t\tcase SWT.MouseUp: {", "-\t\t\tif (event.button != 1) return;", "-\t\t\t/*", "-\t\t\t* The drop-down should stay visible when the year/month ", "-\t\t\t* is changed.", "-\t\t\t*/", "-\t\t\tif (popupCalendar.monthChanged) {", "-\t\t\t\tpopupCalendar.monthChanged = false;", "-\t\t\t} else {", "-\t\t\t\tdropDownCalendar (false);", "-\t\t\t}", "-\t\t}", "-\t\tcase SWT.Selection: {", "-\t\t\tint year = popupCalendar.getYear ();", "-\t\t\tint month = popupCalendar.getMonth ();", "-\t\t\tint day = popupCalendar.getDay ();", "-\t\t\tsetDate(year, month, day);", "-\t\t\tEvent e = new Event ();", "-\t\t\te.time = event.time;", "-\t\t\te.stateMask = event.stateMask;", "-\t\t\te.doit = event.doit;", "-\t\t\tnotifyListeners (SWT.Selection, e);", "-\t\t\tevent.doit = e.doit;", "-\t\t}", "-\t\tcase SWT.Traverse: {", "-\t\t\tswitch (event.detail) {", "-\t\t\t\tcase SWT.TRAVERSE_RETURN:", "-\t\t\t\tcase SWT.TRAVERSE_ESCAPE:", "-\t\t\t\tcase SWT.TRAVERSE_ARROW_PREVIOUS:", "-\t\t\t\tcase SWT.TRAVERSE_ARROW_NEXT:", "-\t\t\t\t\tevent.doit = false;", "-\t\t\t\tcase SWT.TRAVERSE_TAB_NEXT:", "-\t\t\t\tcase SWT.TRAVERSE_TAB_PREVIOUS:", "-\t\t\t\t\tevent.doit = text.traverse(event.detail);", "-\t\t\t\t\tevent.detail = SWT.TRAVERSE_NONE;", "-\t\t\t\t\tif (event.doit) dropDownCalendar (false);", "-\t\t\t\t\treturn;", "-\t\t\t\tcase SWT.TRAVERSE_PAGE_NEXT:", "-\t\t\t\tcase SWT.TRAVERSE_PAGE_PREVIOUS:", "-\t\t\t\t\treturn;", "-\t\t\tEvent e = new Event ();", "-\t\t\te.time = event.time;", "-\t\t\te.detail = event.detail;", "-\t\t\te.doit = event.doit;", "-\t\t\te.character = event.character;", "-\t\t\te.keyCode = event.keyCode;", "-\t\t\tnotifyListeners (SWT.Traverse, e);", "-\t\t\tevent.doit = e.doit;", "-\t\t\tevent.detail = e.detail;", "-\t\t\tbreak;", "-\t\t}", "-\t\tcase SWT.KeyUp: {\t\t", "-\t\t\tEvent e = new Event ();", "-\t\t\te.time = event.time;", "-\t\t\te.character = event.character;", "-\t\t\te.keyCode = event.keyCode;", "-\t\t\te.stateMask = event.stateMask;", "-\t\t\tnotifyListeners (SWT.KeyUp, e);", "-\t\t\tbreak;", "-\t\t}", "-\t\tcase SWT.KeyDown: {", "-\t\t\tif (event.character == SWT.ESC) {", "-\t\t\t\t/* Escape key cancels popupCalendar and reverts date */", "-\t\t\t\tpopupCalendar.setDate (savedYear, savedMonth, savedDay);", "-\t\t\t\tsetDate(savedYear, savedMonth, savedDay);", "-\t\t\t\tdropDownCalendar (false);", "-\t\t\t}", "-\t\t\tif (event.keyCode == SWT.CR || (event.stateMask & SWT.ALT) != 0 && (event.keyCode == SWT.ARROW_UP || event.keyCode == SWT.ARROW_DOWN)) {", "-\t\t\t\t/* Return, Alt+Down, and Alt+Up cancel popupCalendar and select date. */", "-\t\t\t\tdropDownCalendar (false);", "-\t\t\t}", "-\t\t\t/* At this point the widget may have been disposed.", "-\t\t\t * If so, do not continue. */", "-\t\t\tif (isDisposed ()) break;", "-\t\t\tEvent e = new Event();", "-\t\t\te.time = event.time;", "-\t\t\te.character = event.character;", "-\t\t\te.keyCode = event.keyCode;", "-\t\t\te.stateMask = event.stateMask;", "-\t\t\tnotifyListeners(SWT.KeyDown, e);", "+", "+void releaseWidget () {", "+\tsuper.releaseWidget();", "+\t//TODO: need to do anything here?"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ff6e8f751cbb4ad155c094a0522a3fb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CCombo.java", "commitBeforeChange": "c8cd76bf69b37764761763f0da8d767bfba5394b", "commitAfterChange": "f234a135829d52ec2f9610fac66b6f2480cb8cd9", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "\r void listEvent (Event event)", "signatureAfterChange": "\r void listEvent (Event event)", "diff": ["+\t\tcase SWT.FocusIn: {\r", "+\t\t\tif (hasFocus) return;\r", "+\t\t\thasFocus = true;\r", "+\t\t\tif (getEditable ()) text.selectAll ();\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\tnotifyListeners(SWT.FocusIn, e);\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\tcase SWT.FocusOut: {\r", "+\t\t\tControl focusControl = getDisplay ().getFocusControl();\r", "+\t\t\tif (focusControl == text || focusControl == arrow) return;\r", "+\t\t\thasFocus = false;\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\tnotifyListeners(SWT.FocusOut, e);\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\tnotifyListeners(SWT.DefaultSelection, e);\r", "-\t\t\te.x = event.x;\r", "-\t\t\te.y = event.y;\r", "-\t\t\te.width = event.width;\r", "-\t\t\te.height = event.height;\r", "-\t\t\te.detail = event.detail;\r", "+\t\t\te.stateMask = event.stateMask;\r", "+\t\t}\r", "+\t\tcase SWT.Traverse: {\r", "+\t\t\tswitch (event.detail) {\r", "+\t\t\t\tcase SWT.TRAVERSE_TAB_NEXT:\r", "+\t\t\t\tcase SWT.TRAVERSE_RETURN:\r", "+\t\t\t\tcase SWT.TRAVERSE_ESCAPE:\r", "+\t\t\t\tcase SWT.TRAVERSE_ARROW_PREVIOUS:\r", "+\t\t\t\tcase SWT.TRAVERSE_ARROW_NEXT:\r", "+\t\t\t\t\tevent.doit = false;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\te.detail = event.detail;\r", "+\t\t\te.doit = event.doit;\r", "+\t\t\te.keyCode = event.keyCode;\r", "+\t\t\tnotifyListeners(SWT.Traverse, e);\r", "+\t\t\tevent.doit = e.doit;\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\tcase SWT.KeyUp: {\t\t\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\te.character = event.character;\r", "+\t\t\te.keyCode = event.keyCode;\r", "+\t\t\te.stateMask = event.stateMask;\r", "+\t\t\tnotifyListeners(SWT.KeyUp, e);\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\tcase SWT.KeyDown: {\r", "+\t\t\tif (event.character == SWT.ESC) { \r", "+\t\t\t\t// escape key cancels popup list\r", "+\t\t\t\tdropDown (false);\r", "+\t\t\t}\r", "+\t\t\tif (event.character == SWT.CR || event.character == '\\t') {\r", "+\t\t\t\t// Enter and Tab cause default selection\r", "+\t\t\t\tdropDown (false);\r", "+\t\t\t\tEvent e = new Event();\r", "+\t\t\t\te.time = event.time;\r", "+\t\t\t\te.stateMask = event.stateMask;\r", "+\t\t\t\tnotifyListeners(SWT.DefaultSelection, e);\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\te.character = event.character;\r", "+\t\t\te.keyCode = event.keyCode;\r", "+\t\t\te.stateMask = event.stateMask;\r", "+\t\t\tnotifyListeners(SWT.KeyDown, e);\r", "+\t\t\tbreak;\r", "+\t\t\t\r"]}], "num": 41783}
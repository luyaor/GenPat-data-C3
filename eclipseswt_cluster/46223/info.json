{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2ce9ceee7efa2b797fc16abc80e63f5e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fca3f948482fba50576e6d5c47418e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/mozilla/org/eclipse/swt/browser/PromptService.java", "commitBeforeChange": "a16f313ea6cb0658e34acf939cf06b403aadb8ef", "commitAfterChange": "cbae8bf201e38c7f39b3218f4cf033056ae14ab4", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  public int Prompt(int parent, int dialogTitle, int text, int value, int checkMsg, int checkValue, int _retval)", "signatureAfterChange": "  public int Prompt(int parent, int dialogTitle, int text, int value, int checkMsg, int checkValue, int _retval)", "diff": ["-\treturn XPCOM.NS_ERROR_NOT_IMPLEMENTED;", "+\tBrowser browser = getBrowser(parent);", "+\tString titleLabel = null, textLabel, checkLabel = null;", "+\tString[] valueLabel = new String[1];", "+\tchar[] dest;", "+\tint length;", "+\tif (dialogTitle != 0) {", "+\t\tlength = XPCOM.strlen_PRUnichar(dialogTitle);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, dialogTitle, length * 2);", "+\t\ttitleLabel = new String(dest);", "+\t} else {", "+\t\ttitleLabel = SWT.getMessage(\"SWT_Prompt\"); //$NON-NLS-1$", "+\t}", "+\t", "+\tlength = XPCOM.strlen_PRUnichar(text);", "+\tdest = new char[length];", "+\tXPCOM.memmove(dest, text, length * 2);", "+\ttextLabel = new String(dest);", "+\t", "+\tint /*long*/[] valueAddr = new int /*long*/[1];", "+\tXPCOM.memmove(valueAddr, value, OS.PTR_SIZEOF);", "+\tif (valueAddr[0] != 0) {", "+\t\tlength = XPCOM.strlen_PRUnichar(valueAddr[0]);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, valueAddr[0], length * 2);", "+\t\tvalueLabel[0] = new String(dest);\t\t", "+\t}", "+\t", "+\tif (checkMsg != 0) {", "+\t\tlength = XPCOM.strlen_PRUnichar(checkMsg);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, checkMsg, length * 2);", "+\t\tcheckLabel = new String(dest);", "+\t}", "+\t", "+\tPromptDialog dialog = new PromptDialog(browser.getShell());", "+\tint[] check = new int[1], result = new int[1];", "+\tif (checkValue != 0) XPCOM.memmove(check, (int)/*64*/checkValue, 4);", "+\tdialog.prompt(titleLabel, textLabel, checkLabel, valueLabel, check, result);", "+", "+\tXPCOM.memmove(_retval, result, 4);", "+\tif (result[0] == 1) {", "+\t\t/* ", "+\t\t* User selected OK. User name and password are returned as PRUnichar values. Any default", "+\t\t* value that we override must be freed using the nsIMemory service.", "+\t\t*/", "+\t\tint cnt, size;", "+\t\tint /*long*/ ptr;", "+\t\tchar[] buffer;", "+\t\tint /*long*/[] result2 = new int /*long*/[1];", "+\t\tif (valueLabel[0] != null) {", "+\t\t\tcnt = valueLabel[0].length();", "+\t\t\tbuffer = new char[cnt + 1];", "+\t\t\tvalueLabel[0].getChars(0, cnt, buffer, 0);", "+\t\t\tsize = buffer.length * 2;", "+\t\t\tptr = XPCOM.PR_Malloc(size);", "+\t\t\tXPCOM.memmove(ptr, buffer, size);", "+\t\t\tXPCOM.memmove(value, new int /*long*/[] {ptr}, OS.PTR_SIZEOF);", "+", "+\t\t\tif (valueAddr[0] != 0) {", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result2);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result2[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);", "+\t\t\t", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result2[0]);", "+\t\t\t\tresult2[0] = 0;", "+\t\t\t\tbyte[] tmp = XPCOM.NS_MEMORY_CONTRACTID.getBytes();", "+\t\t\t\tbyte[] aContractID = new byte[tmp.length + 1];", "+\t\t\t\tSystem.arraycopy(tmp, 0, aContractID, 0, tmp.length);", "+\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIMemory.NS_IMEMORY_IID, result2);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\t\tserviceManager.Release();", "+\t\t\t\t", "+\t\t\t\tnsIMemory memory = new nsIMemory(result2[0]);", "+\t\t\t\tresult2[0] = 0;", "+\t\t\t\tmemory.Free(valueAddr[0]);", "+\t\t\t\tmemory.Release();", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (checkValue != 0) XPCOM.memmove(checkValue, check, 4);", "+\treturn XPCOM.NS_OK;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51c9af6fa263435dbd33dd1330139312", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/PromptService.java", "commitBeforeChange": "23b1f17449f7fabd46149ee4d56a5963cbaca06d", "commitAfterChange": "1d399ea087a2c9ee392ac32ac638462866e4803b", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  public int Prompt(int parent, int dialogTitle, int text, int value, int checkMsg, int checkValue, int _retval)", "signatureAfterChange": "  public int Prompt(int parent, int dialogTitle, int text, int value, int checkMsg, int checkValue, int _retval)", "diff": ["-\treturn XPCOM.NS_ERROR_NOT_IMPLEMENTED;", "+\tBrowser browser = getBrowser(parent);", "+\tString titleLabel = null, textLabel, checkLabel = null;", "+\tString[] valueLabel = new String[1];", "+\tchar[] dest;", "+\tint length;", "+\tif (dialogTitle != 0) {", "+\t\tlength = XPCOM.strlen_PRUnichar(dialogTitle);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, dialogTitle, length * 2);", "+\t\ttitleLabel = new String(dest);", "+\t}", "+\t", "+\tlength = XPCOM.strlen_PRUnichar(text);", "+\tdest = new char[length];", "+\tXPCOM.memmove(dest, text, length * 2);", "+\ttextLabel = new String(dest);", "+\t", "+\tint [] valueAddr = new int [1];", "+\tXPCOM.memmove(valueAddr, value, 4);", "+\tif (valueAddr[0] != 0) {", "+\t\tlength = XPCOM.strlen_PRUnichar(valueAddr[0]);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, valueAddr[0], length * 2);", "+\t\tvalueLabel[0] = new String(dest);\t\t", "+\t}", "+\t", "+\tif (checkMsg != 0) {", "+\t\tlength = XPCOM.strlen_PRUnichar(checkMsg);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove(dest, checkMsg, length * 2);", "+\t\tcheckLabel = new String(dest);", "+\t}", "+\t", "+\tPromptDialog dialog = new PromptDialog(browser.getShell());", "+\tint[] check = new int[1], result = new int[1];", "+\tif (checkValue != 0) XPCOM.memmove(check, checkValue, 4);", "+\tdialog.prompt(titleLabel, textLabel, checkLabel, valueLabel, check, result);", "+", "+\tXPCOM.memmove(_retval, result, 4);", "+\tif (result[0] == 1) {", "+\t\t/* ", "+\t\t* User selected OK. User name and password are returned as PRUnichar values. Any default", "+\t\t* value that we override must be freed using the nsIMemory service.", "+\t\t*/", "+\t\tint cnt, size;", "+\t\tint ptr;", "+\t\tchar[] buffer;", "+\t\tint [] result2 = new int [1];", "+\t\tif (valueLabel[0] != null) {", "+\t\t\tcnt = valueLabel[0].length();", "+\t\t\tbuffer = new char[cnt + 1];", "+\t\t\tvalueLabel[0].getChars(0, cnt, buffer, 0);", "+\t\t\tsize = buffer.length * 2;", "+\t\t\tptr = XPCOM.PR_Malloc(size);", "+\t\t\tXPCOM.memmove(ptr, buffer, size);", "+\t\t\tXPCOM.memmove(value, new int [] {ptr}, 4);", "+", "+\t\t\tif (valueAddr[0] != 0) {", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager(result2);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result2[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);", "+\t\t\t", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result2[0]);", "+\t\t\t\tresult2[0] = 0;", "+\t\t\t\tbyte[] tmp = XPCOM.NS_MEMORY_CONTRACTID.getBytes();", "+\t\t\t\tbyte[] aContractID = new byte[tmp.length + 1];", "+\t\t\t\tSystem.arraycopy(tmp, 0, aContractID, 0, tmp.length);", "+\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIMemory.NS_IMEMORY_IID, result2);", "+\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error(rc);", "+\t\t\t\tif (result2[0] == 0) SWT.error(XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\t\tserviceManager.Release();", "+\t\t\t\t", "+\t\t\t\tnsIMemory memory = new nsIMemory(result2[0]);", "+\t\t\t\tresult2[0] = 0;", "+\t\t\t\tmemory.Free(valueAddr[0]);", "+\t\t\t\tmemory.Release();", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (checkValue != 0) XPCOM.memmove(checkValue, check, 4);", "+\treturn XPCOM.NS_OK;"]}], "num": 46223}
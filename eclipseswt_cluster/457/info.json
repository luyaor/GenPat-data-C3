{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0ffd4f7dedea3b07509e8725a84c7de1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4453dc077043413537a90412bc2da826", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/DragSource.java", "commitBeforeChange": "b796db7a88d068fbce3590cf91dcc3e9c7f9c320", "commitAfterChange": "37c57c08e60a278244a46818f49a47ece9a0e524", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  void drag(Event dragEvent)", "signatureAfterChange": "  void drag(Event dragEvent)", "diff": ["-void drag(Event dragEvent) {", "-//\tDNDEvent event = new DNDEvent();", "-//\tevent.widget = this;", "-//\tevent.x = dragEvent.x;", "-//\tevent.y = dragEvent.y;", "-//\tevent.time = dragEvent.time;", "-//\tevent.doit = true;", "-//\tnotifyListeners(DND.DragStart, event);", "-//\tif (!event.doit || transferAgents == null || transferAgents.length == 0) return;", "-//\t", "-//\tint[] theDrag = new int[1];", "-//\tif (OS.NewDrag(theDrag) != OS.noErr) {", "-//\t\tevent = new DNDEvent();", "-//\t\tevent.widget = this;", "-//\t\tevent.time = (int)System.currentTimeMillis();", "-//\t\tevent.doit = false;", "-//\t\tevent.detail = DND.DROP_NONE; ", "-//\t\tnotifyListeners(DND.DragEnd, event);", "-//\t\treturn;", "-//\t}", "-//\t", "-//\tPoint pt = new Point();", "-//\tOS.GetGlobalMouse (pt);", "-//", "-//\tfor (int i = 0; i < transferAgents.length; i++) {", "-//\t\tTransfer transfer = transferAgents[i];", "-//\t\tif (transfer != null) {", "-//\t\t\tint[] types = transfer.getTypeIds();", "-//\t\t\tif (transfer instanceof FileTransfer) {", "-//\t\t\t\tTransferData transferData = new TransferData();", "-//\t\t\t\ttransferData.type = types[0];", "-//\t\t\t\tDNDEvent event2 = new DNDEvent();", "-//\t\t\t\tevent2.widget = this;", "-//\t\t\t\tevent2.time = (int)System.currentTimeMillis(); ", "-//\t\t\t\tevent2.dataType = transferData; ", "-//\t\t\t\tnotifyListeners(DND.DragSetData, event2);", "-//\t\t\t\tif (event2.data != null) {", "-//\t\t\t\t\tfor (int j = 0; j < types.length; j++) {", "-//\t\t\t\t\t\ttransferData.type = types[j];", "-//\t\t\t\t\t\ttransfer.javaToNative(event2.data, transferData);", "-//\t\t\t\t\t\tif (transferData.result == OS.noErr) {", "-//\t\t\t\t\t\t\tfor (int k = 0; k < transferData.data.length; k++) {", "-//\t\t\t\t\t\t\t\tbyte[] datum = transferData.data[k];", "-//\t\t\t\t\t\t\t\tOS.AddDragItemFlavor(theDrag[0], 1 + k, types[j], datum, datum.length, 0);", "-//\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t}", "-//\t\t\t\t\t}", "-//\t\t\t\t}", "-//\t\t\t} else {", "-//\t\t\t\tfor (int j = 0; j < types.length; j++) {", "-//\t\t\t\t\tOS.AddDragItemFlavor(theDrag[0], 1, types[j], null, 0, 0);\t", "-//\t\t\t\t}\t", "-//\t\t\t}", "-//\t\t}", "-//\t}", "-//\t", "-//\tOS.SetDragSendProc(theDrag[0], DragSendDataProc.getAddress(), control.handle);", "-//\t", "-//\tint theRegion = 0;", "-//\tImage newImage = null;", "-//\ttry {\t", "-//\t\ttheRegion = OS.NewRgn();", "-//\t\tOS.SetRectRgn(theRegion, (short)(pt.h), (short)(pt.v), (short)(pt.h+20), (short)(pt.v+20));", "-//\t\t", "-//\t\tint operations = opToOsOp(getStyle());", "-//\t\t//set operations twice - local and not local", "-//\t\tOS.SetDragAllowableActions(theDrag[0], operations, true);", "-//\t\tOS.SetDragAllowableActions(theDrag[0], operations, false);", "-//\t\t", "-//\t\tImage image = event.image;", "-//\t\tif (image != null) {", "-//\t\t\tCGPoint imageOffsetPt = new CGPoint();", "-//\t\t\timageOffsetPt.x = 0;", "-//\t\t\timageOffsetPt.y = 0;", "-//\t\t\t/*", "-//\t\t\t* Bug in the Macintosh.  For  some reason, it seems that SetDragImageWithCGImage() ", "-//\t\t\t* expects an image with the alpha, otherwise the image does not draw.  The fix is", "-//\t\t\t* to make sure that the image has an alpha by creating a new image with alpha", "-//\t\t\t* when necessary.", "-//\t\t\t*/", "-//\t\t\tif (OS.CGImageGetAlphaInfo(image.handle) == OS.kCGImageAlphaNoneSkipFirst) {", "-//\t\t\t\tImageData data = image.getImageData();", "-//\t\t\t\tdata.alpha = 0xFF;", "-//\t\t\t\tnewImage = new Image(image.getDevice(), data);", "-//\t\t\t\timage = newImage;", "-//\t\t\t}", "-//\t\t\tOS.SetDragImageWithCGImage(theDrag[0], image.handle, imageOffsetPt, 0);", "-//\t\t}", "-//\t\tEventRecord theEvent = new EventRecord();", "-//\t\ttheEvent.message = OS.kEventMouseMoved;", "-//\t\ttheEvent.modifiers = (short)OS.GetCurrentEventKeyModifiers();", "-//\t\ttheEvent.what = (short)OS.osEvt;", "-//\t\ttheEvent.where_h = pt.h;", "-//\t\ttheEvent.where_v = pt.v;\t", "-//\t\tint result = OS.TrackDrag(theDrag[0], theEvent, theRegion);", "-//\t\tint operation = DND.DROP_NONE;", "-//\t\tif (result == OS.noErr) { ", "-//\t\t\tint[] outAction = new int[1];", "-//\t\t\tOS.GetDragDropAction(theDrag[0], outAction);", "-//\t\t\toperation = osOpToOp(outAction[0]);", "-//\t\t}\t", "-//\t\tevent = new DNDEvent();", "-//\t\tevent.widget = this;", "-//\t\tevent.time = (int)System.currentTimeMillis();", "-//\t\tevent.doit = result == OS.noErr;", "-//\t\tevent.detail = operation; ", "-//\t\tnotifyListeners(DND.DragEnd, event);", "-//\t} finally {\t", "-//\t\tif (theRegion != 0) OS.DisposeRgn(theRegion);", "-//\t\tif (newImage != null) newImage.dispose();", "-//\t}", "-//\tOS.DisposeDrag(theDrag[0]);", "+void drag(Event dragEvent) {", "+\tDNDEvent event = new DNDEvent();", "+\tevent.widget = this;", "+\tevent.x = dragEvent.x;", "+\tevent.y = dragEvent.y;", "+\tevent.time = dragEvent.time;", "+\tevent.doit = true;", "+\tnotifyListeners(DND.DragStart, event);", "+\tif (!event.doit || transferAgents == null || transferAgents.length == 0) return;", "+\t", "+\tNSPasteboard dragBoard = NSPasteboard.pasteboardWithName(OS.NSDragPboard);", "+\tNSMutableArray nativeTypeArray = NSMutableArray.arrayWithCapacity(10);", "+\t", "+\tfor (int i = 0; i < transferAgents.length; i++) {", "+\t\tTransfer transfer = transferAgents[i];", "+\t\tif (transfer != null) {", "+\t\t\tString[] typeNames = transfer.getTypeNames();", "+", "+\t\t\tfor (int j = 0; j < typeNames.length; j++) {", "+\t\t\t\tnativeTypeArray.addObject(NSString.stringWith(typeNames[j]));", "+\t\t\t}\t", "+\t\t}\t\t", "+\t}", "+", "+\tif (nativeTypeArray != null)", "+\t\tdragBoard.declareTypes(nativeTypeArray, dragSourceDelegate);", "+", "+\t// Start the drag here from the Control's view.", "+\tNSEvent currEvent = NSApplication.sharedApplication().currentEvent();", "+\tNSPoint pt = currEvent.locationInWindow();", "+\tNSPoint viewPt = control.view.convertPoint_fromView_(pt, null);", "+", "+\t// Save off the drag operations -- AppKit will call back to us to request them during the drag.", "+\tdragOperations = opToOsOp(getStyle());", "+\t", "+\t// Get the image for the drag. The drag should happen from the middle of the image.", "+\tNSImage dragImage = null;", "+\tImage newImage = null;", "+\ttry {\t", "+\t\tImage image = event.image;", "+\t\t", "+\t\t// If no image was provided, just create a trivial image. dragImage requires a non-null image.", "+\t\tif (image == null) {", "+\t\t\tnewImage = new Image(Display.getCurrent(), 1, 1);", "+\t\t\timage = newImage;", "+\t\t}", "+", "+\t\tdragImage = image.handle;", "+", "+\t\tNSSize imageSize = dragImage.size();", "+\t\tviewPt.x -= (imageSize.width / 2);", "+\t\tviewPt.y -= (imageSize.height / 2);", "+\t\t", "+\t\t// The third argument to dragImage is ignored as of 10.4.", "+\t\tNSSize ignored = new NSSize();", "+\t\tignored.width = 0;", "+\t\tignored.height = 0;", "+\t\t", "+\t\tdragStarted = false;", "+\t\tcontrol.view.dragImage(dragImage, viewPt, ignored, NSApplication.sharedApplication().currentEvent(), dragBoard, dragSourceDelegate, true);", "+", "+\t\t// If we actually dragged, dragStarted will be set to true in dragImage:beganAt:", "+\t\t// If not, send a DragEnd indicating nothing happened.", "+\t\tif (!dragStarted) {", "+\t\t\tSystem.out.println(\"Drag failed\");", "+\t\t\tevent = new DNDEvent();", "+\t\t\tevent.widget = this;", "+\t\t\tevent.time = (int)System.currentTimeMillis();", "+\t\t\tevent.doit = false;", "+\t\t\tevent.detail = DND.DROP_NONE; ", "+\t\t\tnotifyListeners(DND.DragEnd, event);", "+\t\t}", "+\t} finally {\t", "+\t\tif (newImage != null) newImage.dispose();", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "862d84889b6fbf47b59a3d6724005cad", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/DragSource.java", "commitBeforeChange": "6b0a245288556e7224d3c56682401ca81ba95245", "commitAfterChange": "4dbd09dcd54c5e8b8416ccbe2fdfacc6901be61f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": "  void drag(Event dragEvent)", "signatureAfterChange": "  void drag(Event dragEvent)", "diff": ["-\tDNDEvent event = new DNDEvent();", "-\tevent.widget = this;", "-\tevent.x = dragEvent.x;", "-\tevent.y = dragEvent.y;", "-\tevent.time = dragEvent.time;", "-\tevent.doit = true;", "-\tnotifyListeners(DND.DragStart, event);", "-\tif (!event.doit || transferAgents == null || transferAgents.length == 0) return;", "-\t", "-\tint[] theDrag = new int[1];", "-\tif (OS.NewDrag(theDrag) != OS.noErr) {", "-\t\tevent = new DNDEvent();", "-\t\tevent.widget = this;", "-\t\tevent.time = (int)System.currentTimeMillis();", "-\t\tevent.doit = false;", "-\t\tevent.detail = DND.DROP_NONE; ", "-\t\tnotifyListeners(DND.DragEnd, event);", "-\t\treturn;", "-\t}", "-\t", "-\tPoint pt = new Point();", "-\tOS.GetGlobalMouse (pt);", "-", "-\tfor (int i = 0; i < transferAgents.length; i++) {", "-\t\tTransfer transfer = transferAgents[i];", "-\t\tif (transfer != null) {", "-\t\t\tint[] types = transfer.getTypeIds();", "-\t\t\tif (transfer instanceof FileTransfer) {", "-\t\t\t\tTransferData transferData = new TransferData();", "-\t\t\t\ttransferData.type = types[0];", "-\t\t\t\tDNDEvent event2 = new DNDEvent();", "-\t\t\t\tevent2.widget = this;", "-\t\t\t\tevent2.time = (int)System.currentTimeMillis(); ", "-\t\t\t\tevent2.dataType = transferData; ", "-\t\t\t\tnotifyListeners(DND.DragSetData, event2);", "-\t\t\t\tif (event2.data != null) {", "-\t\t\t\t\tfor (int j = 0; j < types.length; j++) {", "-\t\t\t\t\t\ttransferData.type = types[j];", "-\t\t\t\t\t\ttransfer.javaToNative(event2.data, transferData);", "-\t\t\t\t\t\tif (transferData.result == OS.noErr) {", "-\t\t\t\t\t\t\tfor (int k = 0; k < transferData.data.length; k++) {", "-\t\t\t\t\t\t\t\tbyte[] datum = transferData.data[k];", "-\t\t\t\t\t\t\t\tOS.AddDragItemFlavor(theDrag[0], 1 + k, types[j], datum, datum.length, 0);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tfor (int j = 0; j < types.length; j++) {", "-\t\t\t\t\tOS.AddDragItemFlavor(theDrag[0], 1, types[j], null, 0, 0);\t", "-\t\t\t\t}\t", "-\t\t\t}", "-\t\t}", "-\t}", "-\t", "-\tOS.SetDragSendProc(theDrag[0], DragSendDataProc.getAddress(), control.handle);", "-\t", "-\tint theRegion = 0;", "-\tImage newImage = null;", "-\ttry {\t", "-\t\ttheRegion = OS.NewRgn();", "-\t\tOS.SetRectRgn(theRegion, (short)(pt.h), (short)(pt.v), (short)(pt.h+20), (short)(pt.v+20));", "-\t\t", "-\t\tint operations = opToOsOp(getStyle());", "-\t\t//set operations twice - local and not local", "-\t\tOS.SetDragAllowableActions(theDrag[0], operations, true);", "-\t\tOS.SetDragAllowableActions(theDrag[0], operations, false);", "-\t\t", "-\t\tImage image = event.image;", "-\t\tif (image != null) {", "-\t\t\tCGPoint imageOffsetPt = new CGPoint();", "-\t\t\timageOffsetPt.x = 0;", "-\t\t\timageOffsetPt.y = 0;", "-\t\t\t/*", "-\t\t\t* Bug in the Macintosh.  For  some reason, it seems that SetDragImageWithCGImage() ", "-\t\t\t* expects an image with the alpha, otherwise the image does not draw.  The fix is", "-\t\t\t* to make sure that the image has an alpha by creating a new image with alpha", "-\t\t\t* when necessary.", "-\t\t\t*/", "-\t\t\tif (OS.CGImageGetAlphaInfo(image.handle) == OS.kCGImageAlphaNoneSkipFirst) {", "-\t\t\t\tImageData data = image.getImageData();", "-\t\t\t\tdata.alpha = 0xFF;", "-\t\t\t\tnewImage = new Image(image.getDevice(), data);", "-\t\t\t\timage = newImage;", "-\t\t\t}", "-\t\t\tOS.SetDragImageWithCGImage(theDrag[0], image.handle, imageOffsetPt, 0);", "-\t\t}", "-\t\tEventRecord theEvent = new EventRecord();", "-\t\ttheEvent.message = OS.kEventMouseMoved;", "-\t\ttheEvent.modifiers = (short)OS.GetCurrentEventKeyModifiers();", "-\t\ttheEvent.what = (short)OS.osEvt;", "-\t\ttheEvent.where_h = pt.h;", "-\t\ttheEvent.where_v = pt.v;\t", "-\t\tint result = OS.TrackDrag(theDrag[0], theEvent, theRegion);", "-\t\tint operation = DND.DROP_NONE;", "-\t\tif (result == OS.noErr) { ", "-\t\t\tint[] outAction = new int[1];", "-\t\t\tOS.GetDragDropAction(theDrag[0], outAction);", "-\t\t\toperation = osOpToOp(outAction[0]);", "-\t\t}\t", "-\t\tevent = new DNDEvent();", "-\t\tevent.widget = this;", "-\t\tevent.time = (int)System.currentTimeMillis();", "-\t\tevent.doit = result == OS.noErr;", "-\t\tevent.detail = operation; ", "-\t\tnotifyListeners(DND.DragEnd, event);", "-\t} finally {\t", "-\t\tif (theRegion != 0) OS.DisposeRgn(theRegion);", "-\t\tif (newImage != null) newImage.dispose();", "-\t}", "-\tOS.DisposeDrag(theDrag[0]);", "+//\tDNDEvent event = new DNDEvent();", "+//\tevent.widget = this;", "+//\tevent.x = dragEvent.x;", "+//\tevent.y = dragEvent.y;", "+//\tevent.time = dragEvent.time;", "+//\tevent.doit = true;", "+//\tnotifyListeners(DND.DragStart, event);", "+//\tif (!event.doit || transferAgents == null || transferAgents.length == 0) return;", "+//\t", "+//\tint[] theDrag = new int[1];", "+//\tif (OS.NewDrag(theDrag) != OS.noErr) {", "+//\t\tevent = new DNDEvent();", "+//\t\tevent.widget = this;", "+//\t\tevent.time = (int)System.currentTimeMillis();", "+//\t\tevent.doit = false;", "+//\t\tevent.detail = DND.DROP_NONE; ", "+//\t\tnotifyListeners(DND.DragEnd, event);", "+//\t\treturn;", "+//\t}", "+//\t", "+//\tPoint pt = new Point();", "+//\tOS.GetGlobalMouse (pt);", "+//", "+//\tfor (int i = 0; i < transferAgents.length; i++) {", "+//\t\tTransfer transfer = transferAgents[i];", "+//\t\tif (transfer != null) {", "+//\t\t\tint[] types = transfer.getTypeIds();", "+//\t\t\tif (transfer instanceof FileTransfer) {", "+//\t\t\t\tTransferData transferData = new TransferData();", "+//\t\t\t\ttransferData.type = types[0];", "+//\t\t\t\tDNDEvent event2 = new DNDEvent();", "+//\t\t\t\tevent2.widget = this;", "+//\t\t\t\tevent2.time = (int)System.currentTimeMillis(); ", "+//\t\t\t\tevent2.dataType = transferData; ", "+//\t\t\t\tnotifyListeners(DND.DragSetData, event2);", "+//\t\t\t\tif (event2.data != null) {", "+//\t\t\t\t\tfor (int j = 0; j < types.length; j++) {", "+//\t\t\t\t\t\ttransferData.type = types[j];", "+//\t\t\t\t\t\ttransfer.javaToNative(event2.data, transferData);", "+//\t\t\t\t\t\tif (transferData.result == OS.noErr) {", "+//\t\t\t\t\t\t\tfor (int k = 0; k < transferData.data.length; k++) {", "+//\t\t\t\t\t\t\t\tbyte[] datum = transferData.data[k];", "+//\t\t\t\t\t\t\t\tOS.AddDragItemFlavor(theDrag[0], 1 + k, types[j], datum, datum.length, 0);", "+//\t\t\t\t\t\t\t}", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t}", "+//\t\t\t\t}", "+//\t\t\t} else {", "+//\t\t\t\tfor (int j = 0; j < types.length; j++) {", "+//\t\t\t\t\tOS.AddDragItemFlavor(theDrag[0], 1, types[j], null, 0, 0);\t", "+//\t\t\t\t}\t", "+//\t\t\t}", "+//\t\t}", "+//\t}", "+//\t", "+//\tOS.SetDragSendProc(theDrag[0], DragSendDataProc.getAddress(), control.handle);", "+//\t", "+//\tint theRegion = 0;", "+//\tImage newImage = null;", "+//\ttry {\t", "+//\t\ttheRegion = OS.NewRgn();", "+//\t\tOS.SetRectRgn(theRegion, (short)(pt.h), (short)(pt.v), (short)(pt.h+20), (short)(pt.v+20));", "+//\t\t", "+//\t\tint operations = opToOsOp(getStyle());", "+//\t\t//set operations twice - local and not local", "+//\t\tOS.SetDragAllowableActions(theDrag[0], operations, true);", "+//\t\tOS.SetDragAllowableActions(theDrag[0], operations, false);", "+//\t\t", "+//\t\tImage image = event.image;", "+//\t\tif (image != null) {", "+//\t\t\tCGPoint imageOffsetPt = new CGPoint();", "+//\t\t\timageOffsetPt.x = 0;", "+//\t\t\timageOffsetPt.y = 0;", "+//\t\t\t/*", "+//\t\t\t* Bug in the Macintosh.  For  some reason, it seems that SetDragImageWithCGImage() ", "+//\t\t\t* expects an image with the alpha, otherwise the image does not draw.  The fix is", "+//\t\t\t* to make sure that the image has an alpha by creating a new image with alpha", "+//\t\t\t* when necessary.", "+//\t\t\t*/", "+//\t\t\tif (OS.CGImageGetAlphaInfo(image.handle) == OS.kCGImageAlphaNoneSkipFirst) {", "+//\t\t\t\tImageData data = image.getImageData();", "+//\t\t\t\tdata.alpha = 0xFF;", "+//\t\t\t\tnewImage = new Image(image.getDevice(), data);", "+//\t\t\t\timage = newImage;", "+//\t\t\t}", "+//\t\t\tOS.SetDragImageWithCGImage(theDrag[0], image.handle, imageOffsetPt, 0);", "+//\t\t}", "+//\t\tEventRecord theEvent = new EventRecord();", "+//\t\ttheEvent.message = OS.kEventMouseMoved;", "+//\t\ttheEvent.modifiers = (short)OS.GetCurrentEventKeyModifiers();", "+//\t\ttheEvent.what = (short)OS.osEvt;", "+//\t\ttheEvent.where_h = pt.h;", "+//\t\ttheEvent.where_v = pt.v;\t", "+//\t\tint result = OS.TrackDrag(theDrag[0], theEvent, theRegion);", "+//\t\tint operation = DND.DROP_NONE;", "+//\t\tif (result == OS.noErr) { ", "+//\t\t\tint[] outAction = new int[1];", "+//\t\t\tOS.GetDragDropAction(theDrag[0], outAction);", "+//\t\t\toperation = osOpToOp(outAction[0]);", "+//\t\t}\t", "+//\t\tevent = new DNDEvent();", "+//\t\tevent.widget = this;", "+//\t\tevent.time = (int)System.currentTimeMillis();", "+//\t\tevent.doit = result == OS.noErr;", "+//\t\tevent.detail = operation; ", "+//\t\tnotifyListeners(DND.DragEnd, event);", "+//\t} finally {\t", "+//\t\tif (theRegion != 0) OS.DisposeRgn(theRegion);", "+//\t\tif (newImage != null) newImage.dispose();", "+//\t}", "+//\tOS.DisposeDrag(theDrag[0]);"]}], "num": 457}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9bd31f8954f0cc86bb34c242603f8b03", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86626ee2af78d4d24d2f7a5794e199f1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "17d5bcbf142c35cae2dbd838d742b3d14d3d4742", "commitAfterChange": "87acbd6a077adb5322492cfda574017291005ec0", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "  void drawBorder(GC gc, int x, int y, GdkColor selectionColor)", "signatureAfterChange": "  void drawBorder(GC gc, int x, int y, GdkColor selectionColor)", "diff": ["-\t\tif (style != null && style.borderStyle != SWT.NONE) {", "-\t\t\tint byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, styles[i].start) - ptr);", "-\t\t\tint byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, styles[i+1].start) - ptr);", "-\t\t\tint[] ranges = new int[]{byteStart, byteEnd};", "-\t\t\tint /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);", "-\t\t\tif (rgn != 0) {", "-\t\t\t\tint[] nRects = new int[1];", "-\t\t\t\tint /*long*/[] rects = new int /*long*/[1];", "-\t\t\t\tOS.gdk_region_get_rectangles(rgn, rects, nRects);", "-\t\t\t\tGdkRectangle rect = new GdkRectangle();", "+\t\tif (style == null) continue;", "+\t\tboolean drawUnderline = false;", "+\t\tif (style.underline && style.underlineColor != null && OS.GTK_VERSION < OS.VERSION(2, 6, 0)) drawUnderline = true;", "+\t\tif (style.underline && style.underlineStyle == SWT.UNDERLINE_ERROR && OS.GTK_VERSION < OS.VERSION(2, 4, 0)) drawUnderline = true;", "+\t\tboolean drawStrikeout = false;", "+\t\tif (style.strikeout && style.strikeoutColor != null && OS.GTK_VERSION < OS.VERSION(2, 6, 0)) drawStrikeout = true;", "+\t\tboolean drawBorder = style.borderStyle != SWT.NONE;", "+\t\tif (!drawUnderline && !drawBorder && !drawStrikeout) continue;", "+", "+\t\tint byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, styles[i].start) - ptr);", "+\t\tint byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, styles[i+1].start) - ptr);", "+\t\tint[] ranges = new int[]{byteStart, byteEnd};", "+\t\tint /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);", "+\t\tif (rgn != 0) {", "+\t\t\tint[] nRects = new int[1];", "+\t\t\tint /*long*/[] rects = new int /*long*/[1];", "+\t\t\tOS.gdk_region_get_rectangles(rgn, rects, nRects);", "+\t\t\tGdkRectangle rect = new GdkRectangle();", "+\t\t\tif (drawBorder) {", "-\t\t\t\tif (rects[0] != 0) OS.g_free(rects[0]);", "-\t\t\t\tOS.gdk_region_destroy(rgn);", "+\t\t\tif (drawUnderline) {", "+\t\t\t\tGdkColor color = selectionColor;", "+\t\t\t\tif (color == null && style.underlineColor != null) color = style.underlineColor.handle;", "+\t\t\t\tif (color == null) color = data.foreground;", "+\t\t\t\tOS.gdk_gc_set_foreground(gdkGC, color);", "+\t\t\t\tint underlineThickness = 1;", "+\t\t\t\tOS.gdk_gc_set_line_attributes(gdkGC, underlineThickness, OS.GDK_LINE_SOLID, OS.GDK_CAP_BUTT, OS.GDK_JOIN_MITER);", "+\t\t\t\tfor (int j=0; j<nRects[0]; j++) {", "+\t\t\t\t\tOS.memmove(rect, rects[0] + (j * GdkRectangle.sizeof), GdkRectangle.sizeof);", "+\t\t\t\t\tint offset = getOffset(rect.x - x, rect.y - y, null);", "+\t\t\t\t\tint lineIndex = getLineIndex(offset);", "+\t\t\t\t\tFontMetrics metrics = getLineMetrics(lineIndex);", "+\t\t\t\t\tint underlineY = rect.y + metrics.ascent + 1 - style.rise;", "+\t\t\t\t\tswitch (style.underlineStyle) {", "+\t\t\t\t\t\tcase SWT.UNDERLINE_ERROR: {", "+\t\t\t\t\t\t\tint squigglyThickness = 1;", "+\t\t\t\t\t\t\tint squigglyHeight = 2 * squigglyThickness;", "+\t\t\t\t\t\t\tint squigglyY = Math.min(underlineY, rect.y + rect.height - squigglyHeight - 1);", "+\t\t\t\t\t\t\tint[] points = computePolyline(rect.x, squigglyY, rect.x + rect.width, squigglyY + squigglyHeight);", "+\t\t\t\t\t\t\tOS.gdk_draw_lines(data.drawable, gdkGC, points, points.length / 2);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tcase SWT.UNDERLINE_DOUBLE:", "+\t\t\t\t\t\t\tOS.gdk_draw_line(data.drawable, gdkGC, rect.x, underlineY + underlineThickness * 2, rect.x + rect.width, underlineY + underlineThickness * 2);", "+\t\t\t\t\t\t\t//FALLTHROUGH", "+\t\t\t\t\t\tcase SWT.UNDERLINE_SINGLE:", "+\t\t\t\t\t\t\tOS.gdk_draw_line(data.drawable, gdkGC, rect.x, underlineY, rect.x + rect.width, underlineY);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (drawStrikeout) {", "+\t\t\t\tGdkColor color = selectionColor;", "+\t\t\t\tif (color == null && style.strikeoutColor != null) color = style.strikeoutColor.handle;", "+\t\t\t\tif (color == null) color = data.foreground;", "+\t\t\t\tOS.gdk_gc_set_foreground(gdkGC, color);", "+\t\t\t\tint strikeoutThickness = 1;", "+\t\t\t\tOS.gdk_gc_set_line_attributes(gdkGC, strikeoutThickness, OS.GDK_LINE_SOLID, OS.GDK_CAP_BUTT, OS.GDK_JOIN_MITER);", "+\t\t\t\tfor (int j=0; j<nRects[0]; j++) {", "+\t\t\t\t\tOS.memmove(rect, rects[0] + (j * GdkRectangle.sizeof), GdkRectangle.sizeof);", "+\t\t\t\t\tint strikeoutY = rect.y + rect.height / 2;", "+\t\t\t\t\tOS.gdk_draw_line(data.drawable, gdkGC, rect.x, strikeoutY, rect.x + rect.width - 1, strikeoutY);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (rects[0] != 0) OS.g_free(rects[0]);", "+\t\t\tOS.gdk_region_destroy(rgn);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52de4f8bb0153441e1d99745c4375fd3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ce2f35c3f6b1d0b5778f68f011b1d8668d3c5c72", "commitAfterChange": "00bee382096a1807d86474fed7c933116a37eeb8", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 125, "signatureBeforeChange": "\r void doSelectionLineEnd()", "signatureAfterChange": "\r StyleRange[] getSelectionLineStyles(StyleRange[] styles)", "diff": ["- */\r", "-void doSelectionLineEnd() {\r", "-\tint line = content.getLineAtOffset(caretOffset);\r", "-\tint lineOffset = content.getOffsetAtLine(line);\r", "-\t\t\r", "-\tif (selection.x == lineOffset && line < content.getLineCount() - 1) {\r", "-\t\tline++;\r", "-\t\tcaretOffset = content.getOffsetAtLine(line);\r", "-\t\tshowCaret();\r", "-\t}\r", "-\telse {\r", "-\t\tdoLineEnd();\r", "-\t}\r", "-}\r", "+ */\r", "+StyleRange[] getSelectionLineStyles(StyleRange[] styles) {\r", "+\tint selectionStart = selection.x;\r", "+\tint selectionEnd = selection.y;\r", "+\tVector newStyles = new Vector(styles.length);\t\r", "+\tStyleRange selectionStyle = null;\r", "+\tColor foreground = getSelectionForeground();\r", "+\tColor background = getSelectionBackground();\r", "+\r\r", "+\t// potential optimization: ignore styles if there is no bold style and the entire line is selected\r", "+\tfor (int i = 0; i < styles.length; i++) {\r", "+\t\tStyleRange style = styles[i];\r", "+\t\tint styleEnd = style.start + style.length;\r", "+\t\t\r", "+\t\tif (styleEnd <= selectionStart) {\r", "+\t\t\tnewStyles.addElement(style);\r", "+\t\t}\r", "+\t\telse // style overlaps selection start? (i.e., starts before selection start, ends after selection start\r", "+\t\tif (style.start < selectionStart && styleEnd > selectionStart) {\r", "+\t\t\tStyleRange newStyle = (StyleRange) style.clone();\r", "+\t\t\tnewStyle.length -= styleEnd - selectionStart;\r", "+\t\t\tnewStyles.addElement(newStyle);\r", "+\t\t\t// create new selection style with same font style starting at selection start ending at style end\r", "+\t\t\tselectionStyle = new StyleRange(selectionStart, styleEnd - selectionStart, foreground, background, newStyle.fontStyle);\r", "+\t\t\tnewStyles.addElement(selectionStyle);\r", "+\t\t\t// if style extends beyond selection a new style is returned for the unselected part of the style\r", "+\t\t\tnewStyle = setSelectionStyleEnd(selectionStyle, style);\r", "+\t\t\tif (newStyle != null) {\r", "+\t\t\t\tnewStyles.addElement(newStyle);\t\t\t\t\t\r", "+\t\t\t}\t\t\t\t\r", "+\t\t}\r", "+\t\telse // style starts within selection?\r", "+\t\tif (style.start >= selectionStart && style.start < selectionEnd) {\r", "+\t\t\tStyleRange newStyle;\r", "+\t\t\tint selectionStyleEnd;\r", "+\t\t\t// no selection style created yet?\r", "+\t\t\tif (selectionStyle == null) {\r", "+\t\t\t\t// create selection style with regular font style, starting at selection start, ending at style start\r", "+\t\t\t\tselectionStyle = new StyleRange(selectionStart, style.start - selectionStart, foreground, background);\r", "+\t\t\t\tnewStyles.addElement(selectionStyle);\r", "+\t\t\t\tif (style.start == selectionStart) {\r", "+\t\t\t\t\tselectionStyle.fontStyle = style.fontStyle;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tselectionStyleEnd = selectionStyle.start + selectionStyle.length;\r", "+\t\t\t// gap between current selection style end and style start?\r", "+\t\t\tif (style.start > selectionStyleEnd && selectionStyle.fontStyle != SWT.NORMAL) {\r", "+\t\t\t\t// create selection style with regular font style, starting at selection style end, ending at style start\r", "+\t\t\t\tselectionStyle = new StyleRange(selectionStyleEnd, style.start - selectionStyleEnd, foreground, background);\r", "+\t\t\t\tnewStyles.addElement(selectionStyle);\r", "+\t\t\t}\r", "+\t\t\tif (selectionStyle.fontStyle != style.fontStyle) {\r", "+\t\t\t\t// selection style end = style start\r", "+\t\t\t\tselectionStyle.length = style.start - selectionStyle.start;\r", "+\t\t\t\t// create selection style with style font style, starting at style start, ending at style end\r", "+\t\t\t\tselectionStyle = new StyleRange(style.start, style.length, foreground, background, style.fontStyle);\r", "+\t\t\t\tnewStyles.addElement(selectionStyle);\r", "+\t\t\t}\r", "+\t\t\telse {\r", "+\t\t\t\t// selection style end = style end\r", "+\t\t\t\tselectionStyle.length = styleEnd - selectionStyle.start;\r", "+\t\t\t}\r", "+\t\t\t// if style extends beyond selection a new style is returned for the unselected part of the style\r", "+\t\t\tnewStyle = setSelectionStyleEnd(selectionStyle, style);\r", "+\t\t\tif (newStyle != null) {\r", "+\t\t\t\tnewStyles.addElement(newStyle);\t\t\t\t\t\r", "+\t\t\t}\t\t\t\t\r", "+\t\t}\r", "+\t\telse {\r", "+\t\t\t// no selection style created yet?\r", "+\t\t\tif (selectionStyle == null) {\r", "+\t\t\t\t// create selection style with regular font style, starting at selection start, ending at selection end\r", "+\t\t\t\tselectionStyle = new StyleRange(selectionStart, selectionEnd - selectionStart, foreground, background);\r", "+\t\t\t\tnewStyles.addElement(selectionStyle);\r", "+\t\t\t}\r", "+\t\t\telse // does the current selection style end before the selection end?\r", "+\t\t\tif (selectionStyle.start + selectionStyle.length < selectionEnd) {\r", "+\t\t\t\tif (selectionStyle.fontStyle != SWT.NORMAL) {\r", "+\t\t\t\t\tint selectionStyleEnd = selectionStyle.start + selectionStyle.length;\r", "+\t\t\t\t\t// create selection style with regular font style, starting at selection style end, ending at selection end\r", "+\t\t\t\t\tselectionStyle = new StyleRange(selectionStyleEnd, selectionEnd - selectionStyleEnd, foreground, background);\r", "+\t\t\t\t\tnewStyles.addElement(selectionStyle);\r", "+\t\t\t\t}\r", "+\t\t\t\telse {\r", "+\t\t\t\t\tselectionStyle.length = selectionEnd - selectionStyle.start;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tnewStyles.addElement(style);\r", "+\t\t}\r", "+\t}\r", "+\tif (selectionStyle == null) {\r", "+\t\t// create selection style with regular font style, starting at selection start, ending at selection end\r", "+\t\tselectionStyle = new StyleRange(selectionStart, selectionEnd - selectionStart, foreground, background);\r", "+\t\tnewStyles.addElement(selectionStyle);\r", "+\t}\r", "+\telse // does the current selection style end before the selection end?\r", "+\tif (selectionStyle.start + selectionStyle.length < selectionEnd) {\r", "+\t\tif (selectionStyle.fontStyle != SWT.NORMAL) {\r", "+\t\t\tint selectionStyleEnd = selectionStyle.start + selectionStyle.length;\r", "+\t\t\t// create selection style with regular font style, starting at selection style end, ending at selection end\r", "+\t\t\tselectionStyle = new StyleRange(selectionStyleEnd, selectionEnd - selectionStyleEnd, foreground, background);\r", "+\t\t\tnewStyles.addElement(selectionStyle);\r", "+\t\t}\r", "+\t\telse {\r", "+\t\t\tselectionStyle.length = selectionEnd - selectionStyle.start;\r", "+\t\t}\r", "+\t}\r", "+\tstyles = new StyleRange[newStyles.size()];\r", "+\tnewStyles.copyInto(styles);\r", "+\treturn styles;\r", "+}\r"]}], "num": 43909}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3f3100c76c0926013595c4a34205372a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d724209a60e59212b1a089559100ce9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 375, "methodNumberAfterChange": 376, "signatureBeforeChange": " \tint scrollSubstringTo(int startIndex, int endIndex, int scrollType)", "signatureAfterChange": " \tint scrollSubstringTo(int startIndex, int endIndex, int scrollType)", "diff": ["-\t\tevent.type = scrollType;", "+\t\tswitch (scrollType) {", "+\t\t\tcase COM.IA2_SCROLL_TYPE_TOP_LEFT: event.type = ACC.SCROLL_TYPE_TOP_LEFT; break;", "+\t\t\tcase COM.IA2_SCROLL_TYPE_BOTTOM_RIGHT: event.type = ACC.SCROLL_TYPE_BOTTOM_RIGHT; break;", "+\t\t\tcase COM.IA2_SCROLL_TYPE_TOP_EDGE: event.type = ACC.SCROLL_TYPE_TOP_EDGE; break;", "+\t\t\tcase COM.IA2_SCROLL_TYPE_BOTTOM_EDGE: event.type = ACC.SCROLL_TYPE_BOTTOM_EDGE; break;", "+\t\t\tcase COM.IA2_SCROLL_TYPE_LEFT_EDGE: event.type = ACC.SCROLL_TYPE_LEFT_EDGE; break;", "+\t\t\tcase COM.IA2_SCROLL_TYPE_RIGHT_EDGE: event.type = ACC.SCROLL_TYPE_RIGHT_EDGE; break;", "+\t\t\tcase COM.IA2_SCROLL_TYPE_ANYWHERE: event.type = ACC.SCROLL_TYPE_ANYWHERE; break;", "+\t\t}", "+\t\tif (event.result != ACC.OK) return COM.E_INVALIDARG;", "-\t\t// TODO: @retval E_INVALIDARG if bad [in] passed"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ed4bfa58742104c92def72e17e18f30", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 369, "methodNumberAfterChange": 370, "signatureBeforeChange": " \tint get_textAfterOffset(int offset, int boundaryType, int pStartOffset, int pEndOffset, int pbstrText)", "signatureAfterChange": " \tint get_textAfterOffset(int offset, int boundaryType, int pStartOffset, int pEndOffset, int pbstrText)", "diff": ["-\t\tevent.offset = offset;", "-\t\tevent.type = boundaryType;", "-\t\t// TODO: need to implement - use getTextRange", "-//\t\tfor (int i = 0; i < accessibleTextExtendedListeners.size(); i++) {", "-//\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) accessibleTextExtendedListeners.elementAt(i);", "-//\t\t\tlistener.getTextAfterOffset(event);", "-//\t\t}", "+\t\tevent.start = offset;", "+\t\tevent.end = offset;", "+\t\tevent.count = 1;", "+\t\tswitch (boundaryType) {", "+\t\t\tcase COM.IA2_TEXT_BOUNDARY_CHAR: event.type = ACC.TEXT_BOUNDARY_CHAR; break;", "+\t\t\tcase COM.IA2_TEXT_BOUNDARY_WORD: event.type = ACC.TEXT_BOUNDARY_WORD; break;", "+\t\t\tcase COM.IA2_TEXT_BOUNDARY_SENTENCE: event.type = ACC.TEXT_BOUNDARY_SENTENCE; break;", "+\t\t\tcase COM.IA2_TEXT_BOUNDARY_PARAGRAPH: event.type = ACC.TEXT_BOUNDARY_PARAGRAPH; break;", "+\t\t\tcase COM.IA2_TEXT_BOUNDARY_LINE: event.type = ACC.TEXT_BOUNDARY_LINE; break;", "+\t\t\tdefault: return COM.E_INVALIDARG;", "+\t\t}", "+\t\tfor (int i = 0; i < accessibleTextExtendedListeners.size(); i++) {", "+\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) accessibleTextExtendedListeners.elementAt(i);", "+\t\t\tlistener.getText(event);", "+\t\t}", "-\t\tif (event.result == null || event.result.length() == 0) return COM.S_FALSE; // TODO: is S_FALSE ok here?", "+\t\tif (event.result == null) return COM.S_FALSE;", "-\t\t// TODO: @retval S_FALSE if the requested boundary type is not implemented, such as@retval E_INVALIDARG if bad [in] passed, [out] values are 0s and NULL respectively"]}], "num": 57205}
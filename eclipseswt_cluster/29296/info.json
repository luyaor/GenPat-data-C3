{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9b6f5fa83551e40584a93fd2206e38c", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b69e9f1c3dd3e5846aba1ce52d88a55", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "22c78994f0ec6a28835def6220a4b518252d37e2", "commitAfterChange": "cbdd91157986b85a261cf2dcb490e1e504e3a9d3", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["-\t\t\tOS.SetTimer (hwndMessage, SETTINGS_ID, SETTINGS_DELAY, 0);", "-\t\t\tbreak;", "+\t\t\tsendSettings = true;", "+\t\t\t//FALL THROUGH", "+\t\t\t/*", "+\t\t\t* Bug in Windows.  When high contrast is cleared using", "+\t\t\t* the key sequence, Alt + Left Shift + Print Screen, the", "+\t\t\t* system parameter is set to false, but WM_SETTINGCHANGE", "+\t\t\t* is not sent with SPI_SETHIGHCONTRAST.  The fix is to", "+\t\t\t* detect the change when any WM_SETTINGCHANGE message", "+\t\t\t* is sent.", "+\t\t\t*/", "+\t\t\tif (lastHighContrast != getHighContrast ()) {", "+\t\t\t\tsendSettings = true;", "+\t\t\t\tlastHighContrast = getHighContrast ();", "+\t\t\t}", "-\t\t\t\tOS.SetTimer (hwndMessage, SETTINGS_ID, SETTINGS_DELAY, 0);", "-\t\t\t\tbreak;", "+\t\t\t\tsendSettings = true;", "-\t\t\t\tcase OS.SPI_SETHIGHCONTRAST:", "-\t\t\t\t\tOS.SetTimer (hwndMessage, SETTINGS_ID, SETTINGS_DELAY, 0);", "+\t\t\t\tcase OS.SPI_SETHIGHCONTRAST: {", "+\t\t\t\t\tsendSettings = true;", "+\t\t\t\t\tlastHighContrast = getHighContrast ();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t/* Set the initial timer or push the time out period forward */", "+\t\t\tif (sendSettings) {", "+\t\t\t\tOS.SetTimer (hwndMessage, SETTINGS_ID, SETTINGS_DELAY, 0);", "+\t\t\t\tsendSettings = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2a5264c995219b94e299a1ed6afcc63", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "fcad395d7da1b4363faafa06975ec35422a8ea3a", "commitAfterChange": "d7427cebf50028bab5e6b28bb9e84910376870e1", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  void createItem (TreeItem item, int hParent, int hInsertAfter, int hItem)", "signatureAfterChange": "  void createItem (TreeItem item, int hParent, int hInsertAfter, int hItem)", "diff": ["+\t\t/*", "+\t\t* Bug in Windows.  When a new item is added while Windows", "+\t\t* is requesting data a tree item using TVN_GETDISPINFO,", "+\t\t* outstanding damage for items that are below the new item", "+\t\t* is not scrolled.  The fix is to explicitly damage the", "+\t\t* new area.", "+\t\t*/", "+\t\tif ((style & SWT.VIRTUAL) != 0) {", "+\t\t\tif (currentItem != null) {", "+\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\trect.left = hNewItem;", "+\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 0, rect) != 0) {", "+\t\t\t\t\tRECT damageRect = new RECT ();", "+\t\t\t\t\tboolean damaged = OS.GetUpdateRect (handle, damageRect, true);", "+\t\t\t\t\tif (damaged && damageRect.top < rect.bottom) {", "+\t\t\t\t\t\tif (OS.IsWinCE) {", "+\t\t\t\t\t\t\tOS.OffsetRect (damageRect, 0, rect.bottom - rect.top);", "+\t\t\t\t\t\t\tOS.InvalidateRect (handle, damageRect, true);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint rgn = OS.CreateRectRgn (0, 0, 0, 0);", "+\t\t\t\t\t\t\tint result = OS.GetUpdateRgn (handle, rgn, true);", "+\t\t\t\t\t\t\tif (result != OS.NULLREGION) {", "+\t\t\t\t\t\t\t\tOS.OffsetRgn (rgn, 0, rect.bottom - rect.top);", "+\t\t\t\t\t\t\t\tOS.InvalidateRgn (handle, rgn, true);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tOS.DeleteObject (rgn);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 29296}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2596198c29ba11396e7107f5fd38702", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c0ac2c1239c1436397c30b998edc66b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "98c6f69fa8161c32de538e355728bb324ae2b917", "commitAfterChange": "2e45d5416828f3b0bb52adac29f41e56427dcb88", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 37, "signatureBeforeChange": "  int getVisibleRegion (int control, boolean clipChildren)", "signatureAfterChange": "  int getVisibleRegion (int control, boolean clipChildren)", "diff": ["-\tint childRgn = OS.NewRgn (), tempRgn = OS.NewRgn ();", "-\tint window = OS.GetControlOwner (control);", "-\tint port = OS.GetWindowPort (window);", "-\tOS.GetPortVisibleRegion (port, visibleRgn);", "-\tshort [] count = new short [1];", "-\tint [] outControl = new int [1];", "-\tint tempControl = control, lastControl = 0;", "-\twhile (tempControl != 0) {", "-\t\tOS.GetControlRegion (tempControl, (short) OS.kControlStructureMetaPart, tempRgn);", "-\t\tOS.SectRgn (tempRgn, visibleRgn, visibleRgn);", "-\t\tif (OS.EmptyRgn (visibleRgn)) break;", "-\t\tif (clipChildren || tempControl != control) {", "-\t\t\tOS.CountSubControls (tempControl, count);", "-\t\t\tfor (int i = 0; i < count [0]; i++) {", "-\t\t\t\tOS.GetIndexedSubControl (tempControl, (short)(i + 1), outControl);", "-\t\t\t\tint child = outControl [0];", "-\t\t\t\tif (child == lastControl) break;", "-\t\t\t\tif (!OS.IsControlVisible (child)) continue;", "-\t\t\t\tOS.GetControlRegion (child, (short) OS.kControlStructureMetaPart, tempRgn);", "-\t\t\t\tOS.UnionRgn (tempRgn, childRgn, childRgn);", "-\t\t\t}", "-\t\t}", "-\t\tlastControl = tempControl;", "-\t\tOS.GetSuperControl (tempControl, outControl);", "-\t\ttempControl = outControl [0];", "-\t}", "-\tOS.DiffRgn (visibleRgn, childRgn, visibleRgn);", "-\tOS.DisposeRgn (childRgn);", "-\tOS.DisposeRgn (tempRgn);", "+\tcalculateVisibleRegion (control, visibleRgn, clipChildren);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41f7ae7415d8a7627ba10ebfabc5c9b2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "40cdf2a9aca64c3d5be03c7e511afd690ece84ea", "commitAfterChange": "a4b7aa3a6538ae186e20f13ca84baaf05474bec5", "methodNumberBeforeChange": 141, "methodNumberAfterChange": 141, "signatureBeforeChange": " int getOffsetAtPoint(int x, int y)", "signatureAfterChange": " int getOffsetAtPoint(int x, int y)", "diff": ["+int getOffsetAtPoint(int x, int y) {", "+\tint lineIndex = getLineIndex(y);", "+\ty -= getLinePixel(lineIndex);", "+\treturn getOffsetAtPoint(x, y, lineIndex);", "+}", "-int getOffsetAtPoint(int x, int y) {", "-\tint lineIndex = getLineIndex(y);", "-\tint lineOffset = content.getOffsetAtLine(lineIndex);", "-\ty -= getLinePixel(lineIndex);", "-\tint[] trailing = new int[1];", "-\tif (wordWrap) {", "-\t\t//TODO", "-\t}", "-\t", "-\tadvancing = false;", "-\t\tint lineInParagraph = layout.getLineIndex(offsetInLine);", "-\t\tint lineLength;", "-\t\tif (lineInParagraph + 1 == layout.getLineCount()) {", "-\t\t\tlineLength = layout.getLineOffsets()[lineInParagraph + 1];", "-\t\t} else {", "-\t\t\tlineLength = Math.max(0, layout.getLineOffsets()[lineInParagraph + 1] - 1);", "-\t\t}", "-\t\tif (offsetInLine + trailing[0] >= lineLength) {", "-\t\t\toffsetInLine = lineLength;", "-\t\t\tadvancing = true;", "-\t\t\tadvancing  = (level ^ trailingLevel) != 0;", "-\treturn offsetInLine + lineOffset;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd594382f7192cb61c9d0f3c6ac96710", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "804455db63c1f777cb23a6398e266d8e119db046", "commitAfterChange": "52513dcd5c2d02d7eb8e5bba1338741a100370e2", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "\r \r int processArm(int info)", "signatureAfterChange": "\r \r int processArm(int info)", "diff": ["-\tif (menu != null) {\r", "-\t\tint menuHandle = menu.handle;\r", "-\t\tif (!OS.PtWidgetIsRealized (menuHandle)) {\r", "-\t\t\tif ((parent.style & SWT.BAR) == 0) {\r", "-\t\t\t\tint [] args = {OS.Pt_ARG_MENU_FLAGS, OS.Pt_MENU_CHILD, OS.Pt_MENU_CHILD};\r", "-\t\t\t\tOS.PtSetResources (menuHandle, args.length / 3, args);\r", "-\t\t\t}\r", "-\t\t\tOS.PtReParentWidget (menuHandle, handle);\r", "-\t\t\t\r", "-\t\t\t/*\r", "-\t\t\t* Bug in Photon. PtPositionMenu does not position the menu\r", "-\t\t\t* properly when the menu is a direct child a menu bar item.\r", "-\t\t\t* The fix is to position the menu ourselfs.\r", "-\t\t\t*/\r", "-\t\t\tif ((parent.style & SWT.BAR) != 0) {\r", "-\t\t\t\tPhPoint_t pt = new PhPoint_t ();\r", "-\t\t\t\tshort [] x = new short [1], y = new short [1];\r", "-\t\t\t\tOS.PtGetAbsPosition (handle, x, y);\r", "-\t\t\t\tpt.x = x [0];\r", "-\t\t\t\tpt.y = y [0];\r", "-\t\t\t\tint [] args = {OS.Pt_ARG_HEIGHT, 0, 0};\r", "-\t\t\t\tOS.PtGetResources (handle, args.length / 3, args);\r", "-\t\t\t\tpt.y += args [1];\r", "-\t\t\t\tint ptr = OS.malloc (PhPoint_t.sizeof);\r", "-\t\t\t\tOS.memmove (ptr, pt, PhPoint_t.sizeof);\r", "-\t\t\t\targs = new int [] {OS.Pt_ARG_POS, ptr, 0};\r", "-\t\t\t\tOS.PtSetResources (menuHandle, args.length / 3, args);\r", "-\t\t\t\tOS.free (ptr);\r", "-\t\t\t} else {\r", "-\t\t\t\tOS.PtPositionMenu (menuHandle, null);\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\tmenu.sendEvent (SWT.Show);\r", "-\t\t\tOS.PtRealizeWidget (menuHandle);\r", "-\t\t}\r", "-\t}\r", "+\tpostEvent (SWT.Arm);\r", "+\tshowMenu ();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a43fb14871b70dbdd96fae1578243fb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "044fd90b6f02270ce85cc919371a3e049679ef13", "commitAfterChange": "3b7c754a64f4896cc12aead5bba291fc54708bf4", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 40, "signatureBeforeChange": " public void setVisible (boolean visible)", "signatureAfterChange": " public void setVisible (boolean visible)", "diff": ["-\t\tdisplay.runDeferredEvents ();", "-\t\tsendEvent (SWT.Show);", "-\t\tif (getItemCount () != 0) {", "-\t\t\tint xDisplay = OS.XtDisplay (handle);", "-\t\t\tif (xDisplay == 0) return;", "-\t\t\tint xWindow = OS.XDefaultRootWindow (xDisplay);", "-\t\t\tif (xWindow == 0) return;", "-\t\t\tint [] rootX = new int [1], rootY = new int [1], unused = new int [1], mask = new int [1];", "-\t\t\tif (OS.XQueryPointer (xDisplay, xWindow, unused, unused, rootX, rootY, unused, unused, mask) == 0) {", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tif (!hasLocation) {", "-\t\t\t\t/*", "-\t\t\t\t* Bug in Motif.  For some reason, when a menu is popped up", "-\t\t\t\t* under the mouse, the menu will not highlight until the", "-\t\t\t\t* mouse exits and then enters the menu again.  The fix is", "-\t\t\t\t* to pop the menu up outside the current mouse position", "-\t\t\t\t* causing highlighting to work properly when the user", "-\t\t\t\t* waits for the menu to appear.", "-\t\t\t\t*/", "-\t\t\t\trootX[0] += 1;  rootY[0] += 1;", "-\t\t\t\tint [] argList = {OS.XmNx, rootX [0], OS.XmNy, rootY [0]};", "-\t\t\t\tOS.XtSetValues (handle, argList, argList.length / 2);", "-\t\t\t}", "-\t\t\t/*", "-\t\t\t* Feature in Motif.  If an X grab is active, then", "-\t\t\t* the menu pops us but issues and error message an", "-\t\t\t* fails to grab the pointer.  The fix is to ensure", "-\t\t\t* that no grab is active before showing the menu.", "-\t\t\t*/", "-\t\t\tOS.XUngrabPointer (xDisplay, OS.CurrentTime);", "-\t\t\tOS.XtManageChild (handle);", "-\t\t\t/*", "-\t\t\t* Feature in Motif.  There is no API to force the menu", "-\t\t\t* to accept keyboard traversal when popped up using", "-\t\t\t* XtManageChild.  The fix is to call undocumented API", "-\t\t\t* to do this.", "-\t\t\t*/", "-\t\t\tint flags = OS.Button1Mask | OS.Button2Mask | OS.Button3Mask;", "-\t\t\tif ((mask [0] & flags) == 0) OS._XmSetMenuTraversal (handle, true);", "-\t\t} else {", "-\t\t\tsendEvent (SWT.Hide);", "-\t\t}", "+\t\tdisplay.addPopup (this);", "-\t\tOS.XtUnmanageChild (handle);", "+\t\tdisplay.removePopup (this);", "+\t\t_setVisible (false);"]}], "num": 61182}
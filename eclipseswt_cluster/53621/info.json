{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "431599550d026da052c62938e93e1d3b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3db702991a2a05426b6ee19d52982dc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/StructsGenerator.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  void generateGetFields(Class clazz)", "signatureAfterChange": "  void generateGetFields(JNIClass clazz)", "diff": ["-void generateGetFields(Class clazz) {", "-\tClass superclazz = clazz.getSuperclass();", "-\tString clazzName = getClassName(clazz);", "-\tString superName = getClassName(superclazz);", "-\tif (superclazz != Object.class) {", "+void generateGetFields(JNIClass clazz) {", "+\tJNIClass superclazz = clazz.getSuperclass();", "+\tString clazzName = clazz.getSimpleName();", "+\tString superName = superclazz.getSimpleName();", "+\tif (!superclazz.getName().equals(\"java.lang.Object\")) {", "-\tField[] fields = clazz.getDeclaredFields();", "+\tJNIField[] fields = clazz.getDeclaredFields();", "-\t\tField field = fields[i];", "+\t\tJNIField field = fields[i];", "-\t\tFieldData fieldData = getMetaData().getMetaData(field);", "-\t\tString exclude = fieldData.getExclude();", "+\t\tString exclude = field.getExclude();", "-\t\tboolean noWinCE = fieldData.getFlag(FLAG_NO_WINCE);", "+\t\tboolean noWinCE = field.getFlag(FLAG_NO_WINCE);", "-\t\tClass type = field.getType();", "-\t\tString typeName = getClassName(type);", "-\t\tString accessor = fieldData.getAccessor();", "+\t\tJNIType type = field.getType(), type64 = field.getType64();", "+\t\tString typeName = type.getSimpleName();", "+\t\tString accessor = field.getAccessor();", "-\t\t\toutput(fieldData.getCast());", "+\t\t\toutput(field.getCast());", "-\t\t\toutput(getTypeSignature1(field.getType()));", "+\t\t\toutput(type.getTypeSignature1(!type.equals(type64)));", "-\t\t\toutput(getClassName(field.getDeclaringClass()));", "+\t\t\toutput(field.getDeclaringClass().getSimpleName());", "-\t\t\tClass componentType = type.getComponentType();", "+\t\t\tJNIType componentType = type.getComponentType(), componentType64 = type64.getComponentType();", "-\t\t\t\toutput(getTypeSignature2(field.getType()));", "+\t\t\t\toutput(type.getTypeSignature2(!type.equals(type64)));", "-\t\t\t\toutput(getTypeSignature2(field.getType()));", "+\t\t\t\toutput(type.getTypeSignature2(!type.equals(type64)));", "-\t\t\t\toutput(getClassName(field.getDeclaringClass()));", "+\t\t\t\toutput(field.getDeclaringClass().getSimpleName());", "-\t\t\t\toutput(getTypeSignature1(componentType));", "+\t\t\t\toutput(componentType.getTypeSignature1(!componentType.equals(componentType64)));", "-\t\t\t\tint byteCount = getByteCount(componentType);", "-\t\t\t\tif (byteCount > 1) {", "-\t\t\t\t\toutput(\" / \");", "-\t\t\t\t\toutput(String.valueOf(byteCount));", "+\t\t\t\tif (!componentType.isType(\"byte\")) {", "+\t\t\t\t\toutput(\" / sizeof(\");", "+\t\t\t\t\toutput(componentType.getTypeSignature2(!componentType.equals(componentType64)));", "+\t\t\t\t\toutput(\")\");", "-\t\t\t\toutput(getTypeSignature4(type));\t\t\t\t", "+\t\t\t\toutput(type.getTypeSignature4(!type.equals(type64), false));\t\t\t\t", "-\t\t\toutput(getClassName(field.getDeclaringClass()));", "+\t\t\toutput(field.getDeclaringClass().getSimpleName());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "514521461c27fe30b0e078e2b4c11983", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/StructsGenerator.java", "commitBeforeChange": "dc99d9bb9843280e22befd705fd4e0f15ba22ec9", "commitAfterChange": "da66ed50e7f2fec0e5faf4b617a73367a0acde7d", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void generateSetFields(Class clazz)", "signatureAfterChange": "  void generateSetFields(JNIClass clazz)", "diff": ["-void generateSetFields(Class clazz) {", "-\tClass superclazz = clazz.getSuperclass();", "-\tString clazzName = getClassName(clazz);", "-\tString superName = getClassName(superclazz);", "-\tif (superclazz != Object.class) {", "+void generateSetFields(JNIClass clazz) {", "+\tJNIClass superclazz = clazz.getSuperclass();", "+\tString clazzName = clazz.getSimpleName();", "+\tString superName = superclazz.getSimpleName();", "+\tif (!superclazz.getName().equals(\"java.lang.Object\")) {", "-\tField[] fields = clazz.getDeclaredFields();", "+\tJNIField[] fields = clazz.getDeclaredFields();", "-\t\tField field = fields[i];", "+\t\tJNIField field = fields[i];", "-\t\tFieldData fieldData = getMetaData().getMetaData(field);", "-\t\tString exclude = fieldData.getExclude();", "+\t\tString exclude = field.getExclude();", "-\t\tboolean noWinCE = fieldData.getFlag(FLAG_NO_WINCE);", "+\t\tboolean noWinCE = field.getFlag(FLAG_NO_WINCE);", "-\t\tClass type = field.getType();", "-\t\tString typeName = getClassName(type);", "-\t\tString accessor = fieldData.getAccessor();", "+\t\tJNIType type = field.getType(), type64 = field.getType64();", "+\t\tString typeName = type.getSimpleName();", "+\t\tString accessor = field.getAccessor();", "-\t\t\toutput(getTypeSignature1(field.getType()));", "+\t\t\toutput(type.getTypeSignature1(!type.equals(type64)));", "-\t\t\toutput(getClassName(field.getDeclaringClass()));", "+\t\t\toutput(field.getDeclaringClass().getSimpleName());", "-\t\t\toutput(getTypeSignature2(field.getType()));", "+\t\t\toutput(type.getTypeSignature2(!type.equals(type64)));", "-\t\t\tClass componentType = type.getComponentType();", "+\t\t\tJNIType componentType = type.getComponentType(), componentType64 = type64.getComponentType();", "-\t\t\t\toutput(getTypeSignature2(field.getType()));", "+\t\t\t\toutput(type.getTypeSignature2(!type.equals(type64)));", "-\t\t\t\toutput(getTypeSignature2(field.getType()));", "+\t\t\t\toutput(type.getTypeSignature2(!type.equals(type64)));", "-\t\t\t\toutput(getClassName(field.getDeclaringClass()));", "+\t\t\t\toutput(field.getDeclaringClass().getSimpleName());", "-\t\t\t\toutput(getTypeSignature1(componentType));", "+\t\t\t\toutput(componentType.getTypeSignature1(!componentType.equals(componentType64)));", "-\t\t\t\tint byteCount = getByteCount(componentType);", "-\t\t\t\tif (byteCount > 1) {", "-\t\t\t\t\toutput(\" / \");", "-\t\t\t\t\toutput(String.valueOf(byteCount));", "+\t\t\t\tif (!componentType.isType(\"byte\")) {", "+\t\t\t\t\toutput(\" / sizeof(\");", "+\t\t\t\t\toutput(componentType.getTypeSignature2(!componentType.equals(componentType64)));", "+\t\t\t\t\toutput(\")\");", "-\t\t\t\toutput(getTypeSignature4(type));\t\t\t\t", "+\t\t\t\toutput(type.getTypeSignature4(!type.equals(type64), false));\t\t\t\t", "-\t\t\toutput(getClassName(field.getDeclaringClass()));", "+\t\t\toutput(field.getDeclaringClass().getSimpleName());"]}], "num": 53621}
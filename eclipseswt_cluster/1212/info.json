{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0f6710a81dfc4dc083746e3c9ca32c8", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "08a2d9ece8c858c09546e696c23298d9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleClientSite.java", "commitBeforeChange": "deab298e3f8d4709a521587df51ebc6851da7b92", "commitAfterChange": "21e538be1341032af9956d667ab9b6dd4385e4d9", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "\r public int doVerb(int verb)", "signatureAfterChange": "\r public int doVerb(int verb)", "diff": ["+\t// Not all OLE clients (for example PowerPoint) can be set into the running state in the constructor.\r", "+\t// The fix is to ensure that the client is in the running state before invoking any verb on it.\r", "+\tif (state == STATE_NONE) {\r", "+\t\tif (COM.OleRun(objIUnknown.getAddress()) == OLE.S_OK) state = STATE_RUNNING;\r", "+\t}\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25e5eea25096adeb75a33053889474d5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "1b18e11944e41664a365c77ce94fb2710b61e555", "commitAfterChange": "faaf962699fce0033b23b7367efc2b2325ceb06d", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": " public void setEnabled (boolean enabled)", "signatureAfterChange": " public void setEnabled (boolean enabled)", "diff": ["+\t\t/*", "+\t\t* Feature in Windows.  For some reason, when the menu item", "+\t\t* is a separator, GetMenuItemInfo() always indicates that", "+\t\t* the item is not enabled.  The fix is to track the enabled", "+\t\t* state for separators.", "+\t\t*/", "+\t\tif ((style & SWT.SEPARATOR) != 0) {", "+\t\t\tif (enabled) {", "+\t\t\t\tstate &= ~DISABLED;", "+\t\t\t} else {", "+\t\t\t\tstate |= DISABLED;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcad16184ace3f06fd9defb1a930ef57", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "e43d95e19139605b33300fc4ad84d20c5a9dadf6", "commitAfterChange": "9ae99bb8ee9e4f7eee0bf271619d8ab8e3e8d403", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["+\t\t/*", "+\t\t* Feature in GTK. By default, read only combo boxes ", "+\t\t* process the RETURN key rather than allowing the ", "+\t\t* default button to process the key. The fix is to", "+\t\t* clear the GTK_RECEIVES_DEFAULT flag.", "+\t\t*/", "+\t\tif ((style & SWT.READ_ONLY) != 0 && buttonHandle != 0) {", "+\t\t\tOS.GTK_WIDGET_UNSET_FLAGS (buttonHandle, OS.GTK_RECEIVES_DEFAULT);", "+\t\t}"]}], "num": 1212}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "170197e053502653e7ee8fd546f01905", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "55256a9ef8c904d036c5587cf4da2628", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tstatic int atkSelection_ref_selection (int atkObject, int index)", "signatureAfterChange": "  \tstatic int atkSelection_ref_selection (int atkObject, int index)", "diff": ["-\t\tif (object == null) return 0;", "-\t\tif (ATK.g_type_is_a (object.parentType, ATK_SELECTION_TYPE)) {", "-\t\t\tint /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_SELECTION_GET_IFACE (object.handle));", "-\t\t\tAtkSelectionIface selectionIface = new AtkSelectionIface ();", "-\t\t\tATK.memmove (selectionIface, superType);", "-\t\t\tif (selectionIface.ref_selection != 0) {", "-\t\t\t\tparentResult = ATK.call (selectionIface.ref_selection, object.handle, index);", "+\t\tAtkSelectionIface iface = getSelectionIface (atkObject);", "+\t\tif (iface != null && iface.ref_selection != 0) {", "+\t\t\tparentResult = ATK.call (iface.ref_selection, atkObject, index);", "+\t\t}", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleControlListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {\t", "+\t\t\t\tAccessibleControlEvent event = new AccessibleControlEvent (object.accessible);", "+\t\t\t\tevent.childID = object.id;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener)listeners.elementAt (i);", "+\t\t\t\t\tlistener.getSelection (event);", "+\t\t\t\t} ", "+\t\t\t\tAccessibleObject accObj = object.getChildByID (event.childID);", "+\t\t\t\tif (accObj != null) {", "+\t\t\t\t\tif (parentResult > 0) OS.g_object_unref (parentResult);", "+\t\t\t\t\tOS.g_object_ref (accObj.handle);\t", "+\t\t\t\t\treturn accObj.handle;", "+\t\t\t\t}", "-\t\tAccessibleControlListener[] listeners = object.getControlListeners ();", "-\t\tif (listeners.length == 0) return parentResult;", "-\t\t\t", "-\t\tAccessibleControlEvent event = new AccessibleControlEvent (object.accessible);", "-\t\tevent.childID = object.id;", "-\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\tlisteners [i].getSelection (event);", "-\t\t} ", "-\t\tAccessibleObject accObj = object.getChildByID (event.childID);", "-\t\tif (accObj != null) {", "-\t\t\tif (parentResult > 0) OS.g_object_unref (parentResult);", "-\t\t\tOS.g_object_ref (accObj.handle);\t", "-\t\t\treturn accObj.handle;", "+\t\treturn parentResult;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44e5eaeaa638fc380a04b1627faf3902", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tstatic int atkSelection_is_child_selected (int atkObject, int index)", "signatureAfterChange": " \t \tstatic int atkSelection_is_child_selected (int atkObject, int index)", "diff": ["-", "+\t", "-\t\tif (object == null) return 0;", "-\t\tif (ATK.g_type_is_a (object.parentType, ATK_SELECTION_TYPE)) {", "-\t\t\tint /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_SELECTION_GET_IFACE (object.handle));", "-\t\t\tAtkSelectionIface selectionIface = new AtkSelectionIface ();", "-\t\t\tATK.memmove (selectionIface, superType);", "-\t\t\tif (selectionIface.is_child_selected != 0) {", "-\t\t\t\tparentResult = ATK.call (selectionIface.is_child_selected, object.handle, index);", "+\t\tAtkSelectionIface iface = getSelectionIface (atkObject);", "+\t\tif (iface != null && iface.is_child_selected != 0) {", "+\t\t\tparentResult = ATK.call (iface.is_child_selected, atkObject, index);", "+\t\t}", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleControlListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {\t", "+\t\t\t\tAccessibleControlEvent event = new AccessibleControlEvent (object.accessible);", "+\t\t\t\tevent.childID = object.id;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener)listeners.elementAt (i);", "+\t\t\t\t\tlistener.getSelection (event);", "+\t\t\t\t}", "+\t\t\t\tAccessibleObject accessibleObject = object.getChildByID (event.childID);", "+\t\t\t\tif (accessibleObject != null) { ", "+\t\t\t\t\treturn accessibleObject.index == index ? 1 : 0;", "+\t\t\t\t}", "-\t\t}", "-\t\tAccessibleControlListener[] listeners = object.getControlListeners ();", "-\t\tif (listeners.length == 0) return parentResult;", "-\t\t\t", "-\t\tAccessibleControlEvent event = new AccessibleControlEvent (object.accessible);", "-\t\tevent.childID = object.id;", "-\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\tlisteners [i].getSelection (event);", "-\t\t}", "-\t\tAccessibleObject accessibleObject = object.getChildByID (event.childID);", "-\t\tif (accessibleObject != null) { ", "-\t\t\treturn accessibleObject.index == index ? 1 : 0;"]}], "num": 9218}
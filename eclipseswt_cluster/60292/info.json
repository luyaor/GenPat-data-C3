{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd1708979ee5ecd6f244bcb5a482aa56", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f81067c5aff0632e40695d77ace7097f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ColorDialog.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public RGB open()", "signatureAfterChange": "  public RGB open()", "diff": ["- */", "-public RGB open() {", "-\tMacPoint mp= new MacPoint();", "-\tOS.GetGlobalMouse(mp.getData());", "-\t", "-\tboolean[] success= new boolean[1];", "-\tif (OS.PickColor(fColor, mp.getData(), MacUtil.Str255(title), success) == OS.kNoErr) {", "-\t\tif (success[0]) {", "-\t\t\tif (rgb == null)", "-\t\t\t\trgb= new RGB(0, 0, 0);", "-\t\t\trgb.red=\t(fColor[0] >> 8) & 0xff;", "-\t\t\trgb.green=\t(fColor[1] >> 8) & 0xff;", "-\t\t\trgb.blue=\t(fColor[2] >> 8) & 0xff;", "-\t\t} else", "-\t\t\trgb= null;", "-\t} else", "-\t\trgb= null;", "-\t", "+public RGB open() {\t", "+\tColorPickerInfo info = new ColorPickerInfo ();", "+\tif (rgb != null) {", "+\t\tinfo.red = (short)(rgb.red * 257);", "+\t\tinfo.green = (short)(rgb.green * 257);", "+\t\tinfo.blue = (short)(rgb.blue * 257);", "+\t} else {", "+\t\tinfo.red = (short)(255 * 257);", "+\t\tinfo.green = (short)(255 * 257);", "+\t\tinfo.blue = (short)(255 * 257);\t\t", "+\t}", "+\tinfo.flags = OS.kColorPickerDialogIsMoveable | OS.kColorPickerDialogIsModal;", "+\t// NEEDS WORK - shouldn't be at mouse location", "+\tinfo.placeWhere = (short)OS.kAtSpecifiedOrigin;", "+\torg.eclipse.swt.internal.carbon.Point mp = new org.eclipse.swt.internal.carbon.Point ();", "+\tOS.GetGlobalMouse (mp);", "+\tinfo.v = mp.v;", "+\tinfo.h = mp.h;", "+\tif (title != null) {", "+\t\t// NEEDS WORK - no title displayed\t\t", "+\t\tinfo.prompt = new byte[256];", "+\t\tint length = title.length();", "+\t\tif (length > 255) length = 255;", "+\t\tinfo.prompt [0] = (byte)length;", "+\t\tfor (int i=0; i<length; i++) {", "+\t\t\tinfo.prompt [i+1] = (byte)title.charAt (i);", "+\t\t}", "+\t}", "+\trgb = null;", "+\tif (OS.PickColor (info) == OS.noErr && info.newColorChosen) {", "+\t\tint red = (info.red >> 8) & 0xFF;", "+\t\tint green = (info.green >> 8) & 0xFF;", "+\t\tint blue =\t(info.blue >> 8) & 0xFF;", "+\t\trgb = new RGB(red, green, blue);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b7b72518fcc2d523681a990ab58c083", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextPrinter.java", "commitBeforeChange": "e872f3b0e0111042ce6a533a050560e79352267f", "commitAfterChange": "c84e821e0cb8d959aa96acae0e6a916c98e9d912", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \t\t\t\tpublic void run()", "signatureAfterChange": "\r \t\r \tpublic void run()", "diff": ["+\t\r", "+\tpublic void run() {\r", "-\t\t\tstyledText.getDisplay().syncExec(new Runnable() {\r", "-\t\t\t\tpublic void run() {\r", "-\t\t\t\t\ttabSize = styledText.getTabs();\r", "-\t\t\t\t}\r", "+\t\t\t/* Create a printer GC and print the RTF to it. */\r", "+\t\t\tend = rtf.length();\r", "+\t\t\tindex = 0;\r", "+\t\t\twordBuffer = new StringBuffer();\r", "+\t\t\twhile (index < end) {\r", "+\t\t\t\tchar c = rtf.charAt(index);\r", "+\t\t\t\tindex++;\r", "+\t\t\t\tswitch (c) {\r", "+\t\t\t\t\tcase '\\\\':\r", "+\t\t\t\t\t\tprintWordBuffer();\r", "+\t\t\t\t\t\tparseControlWord();\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase '{':\r", "+\t\t\t\t\t\tprintWordBuffer();\r", "+\t\t\t\t\t\tsaveState();\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase '}':\r", "+\t\t\t\t\t\tprintWordBuffer();\r", "+\t\t\t\t\t\trestoreState();\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase 0x0a:\r", "+\t\t\t\t\tcase 0x0d:\r", "+\t\t\t\t\t\tprintWordBuffer();\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\tparseChar(c);\r", "+\t\t\t\t}\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ecec8595e12396aa5c9fbf12dc1318b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "ee1541799783b7a2d49deac3fcb18abcfaa6358c", "commitAfterChange": "613ef52a512ea94b5664ef2017085c02bc3c04da", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 139, "signatureBeforeChange": " public void setEnabled (boolean enabled)", "signatureAfterChange": " public void setEnabled (boolean enabled)", "diff": ["+\tif (enabled) {", "+\t\tif (enableWindow != 0) {", "+\t\t\tOS.gdk_window_destroy (enableWindow);", "+\t\t\tenableWindow = 0;", "+\t\t}", "+\t} else {", "+\t\tOS.gtk_widget_realize (handle);", "+\t\tint /*long*/ parentHandle = parent.parentingHandle ();", "+\t\tint /*long*/ window = OS.GTK_WIDGET_WINDOW (parentHandle);", "+\t\tRectangle rect = getBounds ();", "+\t\tGdkWindowAttr attributes = new GdkWindowAttr ();", "+\t\tattributes.x = rect.x;", "+\t\tattributes.y = rect.y;", "+\t\tattributes.width = rect.width;", "+\t\tattributes.height = rect.height;", "+\t\tattributes.event_mask = (0xFFFFFFFF & ~OS.ExposureMask);", "+\t\tattributes.wclass = OS.GDK_INPUT_ONLY;", "+\t\tattributes.window_type = OS.GDK_WINDOW_CHILD;", "+\t\tenableWindow = OS.gdk_window_new (window, attributes, OS.GDK_WA_X | OS.GDK_WA_Y);", "+\t\tif (enableWindow != 0) {", "+\t\t\tOS.gdk_window_set_user_data (enableWindow, parentHandle);", "+\t\t\tif (!OS.GDK_WINDOWING_X11 ()) {", "+\t\t\t\tOS.gdk_window_raise (enableWindow);", "+\t\t\t} else {", "+\t\t\t\tint /*long*/ topHandle = topHandle ();", "+\t\t\t\tint /*long*/ topWindow = OS.GTK_WIDGET_WINDOW (topHandle);\t\t\t", "+\t\t\t\tint /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (topWindow);", "+\t\t\t\tint /*long*/ xWindow = OS.gdk_x11_drawable_get_xid (enableWindow);", "+\t\t\t\tint xScreen = OS.XDefaultScreen (xDisplay);", "+\t\t\t\tint flags = OS.CWStackMode | OS.CWSibling;\t\t\t", "+\t\t\t\tXWindowChanges changes = new XWindowChanges ();", "+\t\t\t\tchanges.sibling = OS.gdk_x11_drawable_get_xid (topWindow);", "+\t\t\t\tchanges.stack_mode = OS.Above;", "+\t\t\t\tOS.XReconfigureWMWindow (xDisplay, xWindow, xScreen, flags, changes);", "+\t\t\t}", "+\t\t\tOS.gdk_window_show (enableWindow);", "+\t\t}", "+\t}"]}], "num": 60292}
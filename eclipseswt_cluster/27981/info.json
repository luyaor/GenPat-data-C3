{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "de48fc63b02475c6b6fded14a26faece", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0acded4bcfa0f1af93611f11ded716cd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/Check64CompilationParticipant.java", "commitBeforeChange": "6adfd78cd198a1f4e0227710478cb624215e271f", "commitAfterChange": "119d2054e46c7c9fa2c38ce708457009e9d387b8", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": "  void createProblems(IJavaProject project, String root) throws CoreException", "signatureAfterChange": "  void createProblems(IJavaProject project, String root) throws CoreException", "diff": ["+", "-\t\tString projPath = proj.getLocation().toPortableString();", "-\t\t\t\tpath = path.replaceAll(buildDir, \"/\");", "-\t\t\t\tif (path.startsWith(projPath)) {", "-\t\t\t\t\tpath = path.substring(projPath.length());", "-\t\t\t\t}", "-\t\t\t\tIResource resource = proj.findMember(new Path(path));", "-\t\t\t\tboolean hasProblems = false;", "-\t\t\t\tIMarker[] markers = resource.findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, true, IResource.DEPTH_INFINITE);", "-\t\t\t\tfor (int m = 0; m < markers.length; m++) {", "-\t\t\t\t\tIMarker marker = markers[m];", "-\t\t\t\t\tif (SOURCE_ID.equals(marker.getAttribute(IMarker.SOURCE_ID))) {", "-\t\t\t\t\t\tmarker.delete();", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tObject severity = marker.getAttribute(IMarker.SEVERITY);", "-\t\t\t\t\t\thasProblems |= severity != null && ((Integer)severity).intValue() == IMarker.SEVERITY_ERROR;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (!hasProblems) {", "+\t\t\t\tIResource resource = getResourceWithoutErrors(proj, path, true);", "+\t\t\t\tif (resource != null) {", "-\t\t\t\t\t\t\t\tString message = \"[32/64] \" + ((Element)node.getElementsByTagName(\"message\").item(0)).getAttribute(\"value\");", "-\t\t\t\t\t\t\t\tIMarker marker = resource.createMarker(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER);", "-\t\t\t\t\t\t\t\tint severity = IMarker.SEVERITY_ERROR;", "-\t\t\t\t\t\t\t\tmarker.setAttributes(", "-\t\t\t\t\t\t\t\t\tnew String[] {IMarker.MESSAGE, IMarker.SEVERITY, IMarker.CHAR_START, IMarker.CHAR_END, IMarker.SOURCE_ID},", "-\t\t\t\t\t\t\t\t\tnew Object[] {message, new Integer(severity), new Integer(start), new Integer(end), SOURCE_ID});", "+\t\t\t\t\t\t\t\tString message = ((Element)node.getElementsByTagName(\"message\").item(0)).getAttribute(\"value\");", "+\t\t\t\t\t\t\t\tcreateProblem(resource, message, start, end);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c08089fa75b0e7ef04418ed3584e61a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/Check64CompilationParticipant.java", "commitBeforeChange": "e9f7cb66c5064542dfb452f0fb70088c0628ea74", "commitAfterChange": "0e2401ad2734bf1872067c127ae6b51635876794", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  public void buildFinished(IJavaProject project)", "signatureAfterChange": "  public void buildFinished(IJavaProject project)", "diff": ["-", "-public void buildFinished(IJavaProject project) {", "-\ttry {", "-\t\tif (sources == null) return;", "-//\t\tlong time = System.currentTimeMillis();", "-\t\tIProject proj = project.getProject();", "-\t\tboolean hasProblems = false;", "-\t\tIMarker[] markers = proj.findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, true, IResource.DEPTH_INFINITE);", "-\t\tfor (int i = 0; i < markers.length; i++) {", "-\t\t\tIMarker marker = markers[i];", "-\t\t\tif (SOURCE_ID.equals(marker.getAttribute(IMarker.SOURCE_ID))) {", "-\t\t\t\tmarker.delete();", "-\t\t\t} else {", "-\t\t\t\tObject severity = marker.getAttribute(IMarker.SEVERITY);", "-\t\t\t\thasProblems |= severity != null && ((Integer)severity).intValue() == IMarker.SEVERITY_ERROR;", "-\t\t\t}", "-\t\t}", "-\t\tif (hasProblems) return;", "-\t\tif (!getEnabled()) return;", "-\t\tString root = proj.getLocation().toPortableString() + buildDir;", "-\t\tString log = root + \"/log.xml\"; ", "-//\t\t\t\"-d\", \"none\",", "-\t\t\t\"-log\", log,", "-\t\tPrintWriter writer = new PrintWriter(new ByteArrayOutputStream());", "-\t\tInputStream is = new BufferedInputStream(new FileInputStream(log));", "-\t\tproj.findMember(new Path(buildDir)).refreshLocal(IResource.DEPTH_INFINITE, null);\t\t", "-\t\t\t\t\t\t\t\t\t\tcreateProblemFor(resource, start, end, message);", "+", "+public void buildFinished(IJavaProject project) {", "+\ttry {", "+\t\tif (sources == null) return;", "+//\t\tlong time = System.currentTimeMillis();", "+\t\tboolean hasProblems = false;", "+\t\tIMarker[] markers = project.getProject().findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, true, IResource.DEPTH_INFINITE);", "+\t\tfor (int i = 0; i < markers.length; i++) {", "+\t\t\tIMarker marker = markers[i];", "+\t\t\tif (SOURCE_ID.equals(marker.getAttribute(IMarker.SOURCE_ID))) {", "+\t\t\t\tmarker.delete();", "+\t\t\t} else {", "+\t\t\t\tObject severity = marker.getAttribute(IMarker.SEVERITY);", "+\t\t\t\thasProblems |= severity != null && ((Integer)severity).intValue() == IMarker.SEVERITY_ERROR;", "+\t\t\t}", "+\t\t}", "+\t\tif (hasProblems) return;", "+\t\tif (!getEnabled()) return;", "+\t\tString root = project.getProject().getLocation().toPortableString() + buildDir;", "+\t\tbuild(project, root);\t\t", "+\t\tcreateProblems(project, root);"]}], "num": 27981}
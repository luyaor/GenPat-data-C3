{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96436366bc611dd59591f0bfd6dec7d8", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6fdd6dcd956a27a8407601679bf5e2b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/GridData.java", "commitBeforeChange": "7d09c530224c03e34e03b50eef5df0380de95e0a", "commitAfterChange": "65919b6cd706bbbd92f968a23144cff20fe8001b", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  Point computeSize (Control control, boolean flushCache)", "signatureAfterChange": "  void computeSize (Control control, int wHint, int hHint, boolean flushCache)", "diff": ["-Point computeSize (Control control, boolean flushCache) {", "-\tif (cacheWidth != -1 && cacheHeight != -1) {", "-\t\treturn new Point (cacheWidth, cacheHeight);", "-\t}", "-\tfor (int i = 0; i < cacheIndex + 1; i++) {", "-\t\tif (cache [i][0] == widthHint && cache [i][1] == heightHint) {", "-\t\t\tcacheWidth = cache [i][2];", "-\t\t\tcacheHeight = cache [i][3];", "-\t\t\treturn new Point (cacheWidth, cacheHeight);", "+void computeSize (Control control, int wHint, int hHint, boolean flushCache) {", "+\tif (cacheWidth != -1 && cacheHeight != -1) return;", "+\tif (wHint == this.widthHint && hHint == this.heightHint) {", "+\t\tif (defaultWidth == -1 || defaultHeight == -1) {", "+\t\t\tPoint size =  control.computeSize (wHint, hHint, flushCache);", "+\t\t\tdefaultWhint = wHint;", "+\t\t\tdefaultHhint = hHint;", "+\t\t\tdefaultWidth = size.x;", "+\t\t\tdefaultHeight = size.y;", "+\t\tcacheWidth = defaultWidth;", "+\t\tcacheHeight = defaultHeight;", "+\t\treturn;", "-\tPoint size =  control.computeSize (widthHint, heightHint, flushCache);", "-\tif (cacheIndex < cache.length - 1) cacheIndex++;", "-\tcache [cacheIndex][0] = widthHint;", "-\tcache [cacheIndex][1] = heightHint;", "-\tcacheWidth = cache [cacheIndex][2] = size.x;", "-\tcacheHeight = cache [cacheIndex][3] = size.y;", "-\treturn size;", "+\tif (currentWidth == -1 || currentHeight == -1 || wHint != currentWhint || hHint != currentHhint) {", "+\t\tPoint size =  control.computeSize (wHint, hHint, flushCache);", "+\t\tcurrentWhint = wHint;", "+\t\tcurrentHhint = hHint;", "+\t\tcurrentWidth = size.x;", "+\t\tcurrentHeight = size.y;", "+\t}", "+\tcacheWidth = currentWidth;", "+\tcacheHeight = currentHeight;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "806460e2352964c07897bfe4ab558d84", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 87, "signatureBeforeChange": " boolean redrawParentItem(SelectableItem item)", "signatureAfterChange": " void updateColumnWidth (TreeColumn column, int width)", "diff": ["-boolean redrawParentItem(SelectableItem item) {", "-\tTreeItem parentItem = ((TreeItem) item).getParentItem();", "-\tTreeItem parentItem2; ", "-\tboolean redraw = false;", "-", "-\t// determine if only the hierarchy icon needs to be redrawn", "-\tif (parentItem != null) {", "-\t\tparentItem2 = parentItem.getParentItem();", "-\t\tif ((parentItem2 == null || parentItem2.getExpanded() == true) && parentItem.getChildren().size() < 2) {", "-\t\t\tredraw = true;", "-\t// redraw is only neccessary when the receiver is not currently\t", "-\t// expanding 'item' or a parent item or if the parent item is expanded ", "-\t// or if the hierarchy icon of the parent item needs to be redrawn", "-\tif (isExpandingItem(item) == false && parentItem == null || parentItem.getExpanded() == true || redraw == true) {", "-\t\tredraw = true;", "-\telse {", "-\t\tredraw = false;", "-\treturn redraw;", "+void updateColumnWidth (TreeColumn column, int width) {", "+\tint oldWidth = column.getWidth();", "+\tcolumn.width = width;", "+\tRectangle bounds = getClientArea();", "+\tScrollBar hBar = getHorizontalBar();", "+\tTreeColumn lastColumn = columns[columns.length - 1]; ", "+\thBar.setMaximum(lastColumn.getX () + lastColumn.width);", "+\thBar.setThumb(bounds.width);", "+\tint x = column.getX();", "+\tredraw(x, 0, bounds.width - x, bounds.height, true);", "+}"]}], "num": 5508}
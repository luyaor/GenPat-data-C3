{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e1460cf6c135a40dd7bf4fb6d9041786", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c2a9b897e186b2fd715c40eb7f97ceb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "a3a1752d4cca52a10819bc086957df9ad04a0a87", "commitAfterChange": "9effcc166dfa61e54b0f9bb76b17f1175f53b69b", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  int gtk_clicked (int widget)", "signatureAfterChange": "  int gtk_clicked (int widget)", "diff": ["-\t\t\t\t\t\tGtkAllocation handleAllocation = new GtkAllocation ();", "-\t\t\t\t\t\tGtkAllocation arrowHandleAllocation = new GtkAllocation ();", "-\t\t\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "-\t\t\t\t\t\t\tOS.gtk_widget_get_allocation(arrowHandle, arrowHandleAllocation);", "-\t\t\t\t\t\t\tOS.gtk_widget_get_allocation(handle, handleAllocation);", "-\t\t\t\t\t\t\tx = arrowHandleAllocation.x - handleAllocation.x;", "-\t\t\t\t\t\t\twidth = arrowHandleAllocation.width;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tx = OS.GTK_WIDGET_X (arrowHandle) - OS.GTK_WIDGET_X (handle);", "-\t\t\t\t\t\t\twidth = OS.GTK_WIDGET_WIDTH (arrowHandle);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "+\t\t\t\t\t\tGtkAllocation allocation = new GtkAllocation ();", "+\t\t\t\t\t\tgtk_widget_get_allocation (arrowHandle, allocation);", "+\t\t\t\t\t\tx = allocation.x;", "+\t\t\t\t\t\twidth = allocation.width;", "+\t\t\t\t\t\tgtk_widget_get_allocation (handle, allocation);", "+\t\t\t\t\t\tx -= allocation.x;", "-\t\t\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 18, 0)) {", "-\t\t\t\t\t\t\tOS.gtk_widget_get_allocation(topHandle, allocation);", "-\t\t\t\t\t\t\tevent.x = allocation.x;", "-\t\t\t\t\t\t\tif ((parent.style & SWT.MIRRORED) != 0) event.x = parent.getClientWidth () - allocation.width - event.x;", "-\t\t\t\t\t\t\tevent.y = allocation.y + allocation.height;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tevent.x = OS.GTK_WIDGET_X (topHandle);", "-\t\t\t\t\t\t\tif ((parent.style & SWT.MIRRORED) != 0) event.x = parent.getClientWidth () - OS.GTK_WIDGET_WIDTH (topHandle) - event.x;", "-\t\t\t\t\t\t\tevent.y = OS.GTK_WIDGET_Y (topHandle) + OS.GTK_WIDGET_HEIGHT (topHandle);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\t", "+\t\t\t\t\t\tgtk_widget_get_allocation (topHandle, allocation);", "+\t\t\t\t\t\tevent.x = allocation.x;", "+\t\t\t\t\t\tif ((parent.style & SWT.MIRRORED) != 0) event.x = parent.getClientWidth () - allocation.width - event.x;", "+\t\t\t\t\t\tevent.y = allocation.y + allocation.height;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "25888a439694fe460a6975591f15a6b5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ExpandBar.java", "commitBeforeChange": "bd61e9373da7273cd410271556ae244e7083bc6f", "commitAfterChange": "9d60ac884ad5436b1284ebea3463d0bfa1b3d278", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 33, "signatureBeforeChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_PAINT (int wParam, int lParam)", "diff": ["-\t\tif ((ps.right - ps.left) != 0 && (ps.bottom - ps.top) != 0) {", "-\t\t\tint hTheme = 0;", "-\t\t\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "-\t\t\t\thTheme = OS.OpenThemeData (handle, EXPLORERBAR); ", "-\t\t\t}", "-\t\t\tRECT clipRect = new RECT ();", "-\t\t\tOS.SetRect (clipRect, ps.left, ps.top, ps.right, ps.bottom);", "-\t\t\tif (hTheme != 0) {", "-\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\tOS.GetClientRect (handle, rect);", "-\t\t\t\tOS.DrawThemeBackground (hTheme, gc.handle, OS.EBP_HEADERBACKGROUND, 0, rect, clipRect);\t\t\t\t", "-\t\t\t} else {", "-\t\t\t\tdrawBackground (gc.handle);", "-\t\t\t}", "-\t\t\tboolean drawFocus = false;", "-\t\t\tif (handle == OS.GetFocus ()) {", "-\t\t\t\tint uiState = OS.SendMessage (handle, OS.WM_QUERYUISTATE, 0, 0);", "-\t\t\t\tdrawFocus = (uiState & OS.UISF_HIDEFOCUS) == 0;", "-\t\t\t}", "-\t\t\tfor (int i = 0; i < itemCount; i++) {", "-\t\t\t\tExpandItem item = items[i];", "-\t\t\t\titem.drawItem (gc, hTheme, clipRect, i == focusIndex && drawFocus);\t\t", "-\t\t\t}", "-\t\t\tif (hTheme != 0) OS.CloseThemeData (hTheme);", "+\t\tint width = ps.right - ps.left;", "+\t\tint height = ps.bottom - ps.top;", "+\t\tif (width != 0 && height != 0) {", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.SetRect (rect, ps.left, ps.top, ps.right, ps.bottom);", "+\t\t\tdrawWidget (gc, rect);", "-\t\t\t\tevent.x = clipRect.left;", "-\t\t\t\tevent.y = clipRect.top;", "-\t\t\t\tevent.width = clipRect.right - clipRect.left;", "-\t\t\t\tevent.height = clipRect.bottom - clipRect.top;", "+\t\t\t\tevent.x = rect.left;", "+\t\t\t\tevent.y = rect.top;", "+\t\t\t\tevent.width = width;", "+\t\t\t\tevent.height = height;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "207d50593bfc5c3391af31d633c91dc4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/DisplayRenderer.java", "commitBeforeChange": "3d9a745937224b38cf406ad93b5005f8ff95bd1b", "commitAfterChange": "1cb1a83b374d003844ef54f22d246c9e3e7d60bd", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void drawLineSelectionBackground(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi)", "signatureAfterChange": " protected void drawLineBreakSelection(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi)", "diff": ["-protected void drawLineSelectionBackground(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi) {", "+protected void drawLineBreakSelection(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi) {", "-\tLineCache lineCache = parent.internalGetLineCache();", "-\tStyledTextContent content = getContent();", "-\tint selectionBackgroundWidth = -1;", "-\tint selectionLength = selectionEnd - selectionStart;", "-\tboolean wordWrap = parent.internalGetWordWrap();", "-\tboolean isRightOriented = (parent.getStyle() & SWT.MIRRORED) != 0;", "-\tif (selectionEnd == selectionStart || selectionEnd < 0 || selectionStart > lineLength) {", "+\tif (selectionEnd == selectionStart || selectionEnd < 0 || selectionStart > lineLength || selectionEnd <= lineLength) {", "-\t\tpaintX = parent.getBidiTextPosition(line, selectionStart, bidi);", "+\t\tpaintX = bidi.getTextWidth();", "+\t\t// handle empty line case", "+\t\tif (paintX == 0) {", "+\t\t\tpaintX = StyledText.XINSET;", "+\t\t}", "-\t\tpaintX = getTextPosition(line, lineOffset, selectionStart, filterLineStyles(styles), gc);", "-\t}", "-\t// selection extends past end of line?", "-\tif (selectionEnd > lineLength) {", "-\t\tif ((parent.getStyle() & SWT.FULL_SELECTION) != 0) {", "-\t\t\t// use the greater of the client area width and the content ", "-\t\t\t// width. fixes 1G8IYRD", "-\t\t\tselectionBackgroundWidth = Math.max(getClientArea().width, lineCache.getWidth());", "-\t\t}", "-\t\telse {", "-\t\t\tselectionLength = lineLength - selectionStart;", "-\t\t}", "+\t\tpaintX = getTextPosition(line, lineOffset, lineLength, filterLineStyles(styles), gc);", "-\tif (selectionBackgroundWidth == -1) {", "+\tif ((parent.getStyle() & SWT.FULL_SELECTION) != 0) {", "+\t\tLineCache lineCache = parent.internalGetLineCache();", "+\t\t// use the greater of the client area width and the content ", "+\t\t// width. fixes 1G8IYRD", "+\t\tint selectionBackgroundWidth = Math.max(getClientArea().width, lineCache.getWidth());", "+\t\tgc.fillRectangle(paintX - horizontalScrollOffset + leftMargin, paintY, selectionBackgroundWidth, lineHeight);", "+\t}", "+\telse {", "-", "-\t\tif (wordWrap) {", "+\t\tif (parent.internalGetWordWrap()) {", "+\t\t\tStyledTextContent content = getContent();", "-\t\t\t// offset of this line?\t\t\t", "+\t\t\t// offset of this line?", "-\t\tif (bidi != null) {", "-\t\t\tselectionBackgroundWidth = parent.getBidiTextPosition(line, selectionStart + selectionLength, bidi) - paintX;", "-\t\t}", "-\t\telse {", "-\t\t\tselectionBackgroundWidth = getTextWidth(line, lineOffset, selectionStart, selectionLength, styles, paintX, gc);", "-\t\t}", "-\t\tif (selectionBackgroundWidth < 0) {", "-\t\t\t// width can be negative when in R2L bidi segment", "-\t\t\tpaintX += selectionBackgroundWidth;", "-\t\t\tselectionBackgroundWidth *= -1;", "-\t\t}", "-\t\tif (selectionEnd > lineLength && isWrappedLine == false) {", "-\t\t\tselectionEnd = selectionStart + selectionLength;", "-\t\t\t// if the selection extends past this line, render an additional ", "-\t\t\t// whitespace background at the end of the line to represent the ", "-\t\t\t// selected line break", "-\t\t\tif (bidi != null && selectionEnd > 0 && (bidi.isRightToLeft(selectionEnd - 1) || (isRightOriented && bidi.isRightToLeft(selectionEnd - 1) == false))) {", "-\t\t\t\tint lineEndX = bidi.getTextWidth();", "-\t\t\t\tgc.fillRectangle(lineEndX - horizontalScrollOffset + leftMargin, paintY, lineEndSpaceWidth, lineHeight);", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tselectionBackgroundWidth += lineEndSpaceWidth;", "-\t\t\t}", "+\t\tif (isWrappedLine == false) {", "+\t\t\t// render the line break selection", "+\t\t\tgc.fillRectangle(paintX - horizontalScrollOffset + leftMargin, paintY, lineEndSpaceWidth, lineHeight);", "-\t// handle empty line case", "-\tif (bidi != null && paintX == 0) {", "-\t\tpaintX = StyledText.XINSET;\t", "-\t}", "-\t// fill the background first since expanded tabs are not ", "-\t// drawn as spaces. tabs just move the draw position. ", "-\tgc.fillRectangle(paintX - horizontalScrollOffset + leftMargin, paintY, selectionBackgroundWidth, lineHeight);"]}], "num": 16433}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f0b9c3b590b1c1e80f45b7e10e788849", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f474f16c6dff8334b49e544f99849a9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "b214f03587a380d65144d1468f8b9d961d9ef75a", "commitAfterChange": "7ca694dfa956acb1df3610138ed4d7a3be85276f", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 65, "signatureBeforeChange": "  int imHandle ()", "signatureAfterChange": "  boolean translateTraversal (GdkEventKey keyEvent)", "diff": ["-int imHandle () {", "-\treturn 0;", "-}", "+boolean translateTraversal (GdkEventKey keyEvent) {", "+\tint key = keyEvent.keyval;", "+\tswitch (key) {", "+\t\tcase OS.GDK_KP_Enter:", "+\t\tcase OS.GDK_Return: {", "+\t\t\tint imHandle;", "+\t\t\tif ((style & SWT.SINGLE) != 0) {", "+\t\t\t\timHandle = OS.GTK_ENTRY_IM_CONTEXT (handle);", "+\t\t\t} else {", "+\t\t\t\timHandle = OS.GTK_TEXTVIEW_IM_CONTEXT (handle);", "+\t\t\t}\t\t\t", "+\t\t\tif (imHandle != 0) {", "+\t\t\t\tint [] preeditString = new int [1];", "+\t\t\t\tOS.gtk_im_context_get_preedit_string (imHandle, preeditString, null, null);", "+\t\t\t\tif (preeditString [0] != 0) {", "+\t\t\t\t\tint lenght = OS.strlen (preeditString [0]);", "+\t\t\t\t\tOS.g_free (preeditString [0]);", "+\t\t\t\t\tif (lenght != 0) return false;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\treturn super.translateTraversal (keyEvent);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc15c8c843966ed2f102a6b164cd950e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "a45e2f0f4688ba8750d124e41802861dc3176c91", "commitAfterChange": "26e521309364bb658cf1c93d5815f7e3f172acfd", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " void calculateTopIndex()", "signatureAfterChange": " void calculateTopIndex()", "diff": ["-\tint oldTopIndex = topIndex;", "-\t", "-\tRectangle clientArea = getClientArea();", "-\ttopIndex = getLineIndex(clientArea.y);", "-\tint linePixel = getLinePixel(topIndex);", "-\tif (linePixel < 0) {", "-\t\tint lineCount = content.getLineCount();", "-\t\tif (topIndex < lineCount - 1) {", "-\t\t\tint bottom = getLinePixel(topIndex + 1);", "-\t\t\tbottom = lineCache.getLineHeight(topIndex + 1);", "-\t\t\tif (clientArea.height >= bottom) {", "-\t\t\t\ttopIndex++;", "+\tint oldTopIndex = topIndex;\t", "+\tif (isFixedLineHeight()) {", "+\t\tint verticalIncrement = getVerticalIncrement();", "+\t\tif (verticalIncrement == 0) {", "+\t\t\treturn;", "+\t\t}", "+\t\ttopIndex = Compatibility.ceil(verticalScrollOffset, verticalIncrement);", "+\t\t// Set top index to partially visible top line if no line is fully ", "+\t\t// visible but at least some of the widget client area is visible.", "+\t\t// Fixes bug 15088.", "+\t\tif (topIndex > 0) {", "+\t\t\tint clientAreaHeight = getClientArea().height;", "+\t\t\tif (clientAreaHeight > 0) {", "+\t\t\t\tint bottomPixel = verticalScrollOffset + clientAreaHeight;", "+\t\t\t\tint fullLineTopPixel = topIndex * verticalIncrement;", "+\t\t\t\tint fullLineVisibleHeight = bottomPixel - fullLineTopPixel;", "+\t\t\t\t// set top index to partially visible line if no line fully fits in ", "+\t\t\t\t// client area or if space is available but not used (the latter should", "+\t\t\t\t// never happen because we use claimBottomFreeSpace)", "+\t\t\t\tif (fullLineVisibleHeight < verticalIncrement) {", "+\t\t\t\t\ttopIndex--;", "+\t\t\t\t}", "+\t\t\t} else if (topIndex >= content.getLineCount()) {", "+\t\t\t\ttopIndex = content.getLineCount() - 1;", "-\t} ", "-", "-//\tint verticalIncrement = getVerticalIncrement();", "-//\tif (verticalIncrement == 0) {", "-//\t\treturn;", "-//\t}", "-//\ttopIndex = Compatibility.ceil(verticalScrollOffset, verticalIncrement);", "-//\t// Set top index to partially visible top line if no line is fully ", "-//\t// visible but at least some of the widget client area is visible.", "-//\t// Fixes bug 15088.", "-//\tif (topIndex > 0) {", "-//\t\tint clientAreaHeight = getClientArea().height;", "-//\t\tif (clientAreaHeight > 0) {", "-//\t\t\tint bottomPixel = verticalScrollOffset + clientAreaHeight;", "-//\t\t\tint fullLineTopPixel = topIndex * verticalIncrement;", "-//\t\t\tint fullLineVisibleHeight = bottomPixel - fullLineTopPixel;", "-//\t\t\t// set top index to partially visible line if no line fully fits in ", "-//\t\t\t// client area or if space is available but not used (the latter should", "-//\t\t\t// never happen because we use claimBottomFreeSpace)", "-//\t\t\tif (fullLineVisibleHeight < verticalIncrement) {", "-//\t\t\t\ttopIndex--;", "-//\t\t\t}", "-//\t\t} else if (topIndex >= content.getLineCount()) {", "-//\t\t\ttopIndex = content.getLineCount() - 1;", "-//\t\t}", "-//\t}", "-\t", "+\t} else {", "+\t\tRectangle clientArea = getClientArea();", "+\t\ttopIndex = getLineIndex(clientArea.y);", "+\t\tint linePixel = getLinePixel(topIndex);", "+\t\tif (linePixel < 0) {", "+\t\t\tint lineCount = content.getLineCount();", "+\t\t\tif (topIndex < lineCount - 1) {", "+\t\t\t\tint bottom = getLinePixel(topIndex + 1);", "+\t\t\t\tbottom = lineCache.getLineHeight(topIndex + 1);", "+\t\t\t\tif (clientArea.height >= bottom) {", "+\t\t\t\t\ttopIndex++;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} ", "+\t}\t", "-\t\tif (isFixedLineHeight()) {", "-\t\t\tsetHorizontalScrollBar();", "-\t\t} else {", "-\t\t\tsetScrollBars();", "-\t\t}", "+\t\tsetScrollBars(false);"]}], "num": 40832}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f42053d9339951150555442824625a94", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b59e4ab69e646db16060fec61653509", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "5871e13caeb2a816554e4ce245c51d420702c1ce", "commitAfterChange": "021c9ffb1f03bab865a8755698d6a0a3d739b6cc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create(Composite parent, int style)", "signatureAfterChange": "  public void create(Composite parent, int style)", "diff": ["-\t\t\t\t\t\t * IE feature.  Some events that swt relies on are not sent when", "-\t\t\t\t\t\t * a page is refreshed as opposed to being navigated to.  The", "-\t\t\t\t\t\t * workaround is to use DownloadComplete as an indication that a", "-\t\t\t\t\t\t * refresh has completed.   ", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (!isRefresh) break;", "-\t\t\t\t\t\tisRefresh = false;", "-", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* NavigateComplete is not received for refreshes, so re-hook", "-\t\t\t\t\t\t* BrowserFunctions here. ", "+\t\t\t\t\t\t* IE feature.  Some events that swt relies on are not sent when", "+\t\t\t\t\t\t* a page is refreshed (as opposed to being navigated to).  The", "+\t\t\t\t\t\t* workaround is to use DownloadComplete as an opportunity to", "+\t\t\t\t\t\t* do this work.   ", "+", "+\t\t\t\t\t\tif (!isRefresh) break;", "+\t\t\t\t\t\tisRefresh = false;", "+", "-\t\t\t\t\t\t * DocumentComplete is not received for refreshes, but clients may rely", "-\t\t\t\t\t\t * on this event for tasks like hooking javascript listeners, so send the", "-\t\t\t\t\t\t * event here.", "-\t\t\t\t\t\t */", "+\t\t\t\t\t\t* DocumentComplete is not received for refreshes, but clients may rely", "+\t\t\t\t\t\t* on this event for tasks like hooking javascript listeners, so send the", "+\t\t\t\t\t\t* event here.", "+\t\t\t\t\t\t*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a627f72e54865676b67292f3ebaa35a5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "2b489aa5c5c7a18540a0f09d7b72f3a6244070d2", "commitAfterChange": "589dae5887719a2cc80e0bc07401736da4493b31", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public boolean create(Composite parent, int style)", "signatureAfterChange": "  public boolean create(Composite parent, int style)", "diff": ["+\t\t\t\t\t\tisRefresh = false; /* refreshes do not come through here */", "+", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase DownloadComplete: {", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t * IE feature.  Some events that swt relies on are not sent when", "+\t\t\t\t\t\t * a page is refreshed as opposed to being navigated to.  The", "+\t\t\t\t\t\t * workaround is to use DownloadComplete as an indication that a", "+\t\t\t\t\t\t * refresh has completed.   ", "+\t\t\t\t\t\t */", "+\t\t\t\t\t\tif (!isRefresh) break;", "+\t\t\t\t\t\tisRefresh = false;", "+", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t* NavigateComplete is not received for refreshes, so re-hook", "+\t\t\t\t\t\t* BrowserFunctions here. ", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tEnumeration elements = functions.elements ();", "+\t\t\t\t\t\twhile (elements.hasMoreElements ()) {", "+\t\t\t\t\t\t\tBrowserFunction function = (BrowserFunction)elements.nextElement ();", "+\t\t\t\t\t\t\texecute (function.functionString);", "+\t\t\t\t\t\t}", "+", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t * DocumentComplete is not received for refreshes, but clients may rely", "+\t\t\t\t\t\t * on this event for tasks like hooking javascript listeners, so send the", "+\t\t\t\t\t\t * event here.", "+\t\t\t\t\t\t */", "+\t\t\t\t\t\tProgressEvent progressEvent = new ProgressEvent(browser);", "+\t\t\t\t\t\tprogressEvent.display = browser.getDisplay();", "+\t\t\t\t\t\tprogressEvent.widget = browser;", "+\t\t\t\t\t\tfor (int i = 0; i < progressListeners.length; i++) {", "+\t\t\t\t\t\t\tprogressListeners[i].completed(progressEvent);", "+\t\t\t\t\t\t}\t\t\t\t\t\t", "+", "+\tsite.addEventListener(DownloadComplete, oleListener);"]}], "num": 34880}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90a070140860b16112813f904e93d1d2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f84a07841699c7adb9f100d4991910dc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "3be1894e65751f8fdace6da3d386ac8c0f271b36", "commitAfterChange": "8ec8763ff69792db587ad01343e591e017ba32d8", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tif (attributeName.equals (OS.kAXValueAttribute) || attributeName.equals (OS.kAXTitleAttribute)) {", "-\t\t\tString text = getText ();", "-\t\t\tbuffer = new char [text.length ()];", "-\t\t\ttext.getChars (0, buffer.length, buffer, 0);", "+\t\tif (attributeName.equals (OS.kAXValueAttribute)) {", "+\t\t\tbuffer = getText(0, -1);", "+\t\t\t}", "+\t\t}", "+\t\tif (attributeName.equals (OS.kAXNumberOfCharactersAttribute)) {", "+\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeSInt32, 4, new int [] {getCharCount()});", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t\tif (attributeName.equals (OS.kAXSelectedTextAttribute)) {", "+\t\t\tPoint sel = getSelection ();", "+\t\t\tbuffer = getText(sel.x, sel.y);", "+\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "+\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\treturn OS.noErr;", "+\t\t\t}", "+\t\t}", "+\t\tif (attributeName.equals (OS.kAXSelectedTextRangeAttribute)) {", "+\t\t\tPoint sel = getSelection ();", "+\t\t\trange = new CFRange();", "+\t\t\trange.location = sel.x;", "+\t\t\trange.length = sel.y - sel.x;", "+\t\t\tint valueRef = OS.AXValueCreate(OS.kAXValueCFRangeType, range);", "+\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFTypeRef, 4, new int [] {valueRef});", "+\t\t\tOS.CFRelease(valueRef);", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t\tif (attributeName.equals (OS.kAXStringForRangeParameterizedAttribute)) {", "+\t\t\tint valueRef [] = new int [1];", "+\t\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeParameter, OS.typeCFTypeRef, null, 4, null, valueRef);", "+\t\t\tif (status == OS.noErr) {", "+\t\t\t\trange = new CFRange();", "+\t\t\t\tboolean ok = OS.AXValueGetValue(valueRef[0], OS.kAXValueCFRangeType, range);", "+\t\t\t\tif (ok) {", "+\t\t\t\t\tbuffer = getText (range.location, range.location + range.length);", "+\t\t\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "+\t\t\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d1104f562655700cccfb4b7e78aa3ec", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "271bf8e8631934dbdf092a7f5d74accd534157b3", "commitAfterChange": "267efeba946291455291f7e37b5a9adb5c1006b4", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventAccessibleGetNamedAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tString roleText = OS.kAXGroupRole;", "-\t\tbuffer = new char [roleText.length ()];", "-\t\troleText.getChars (0, buffer.length, buffer, 0);", "-\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-\t\tif (attributeName.equals (OS.kAXRoleAttribute)) {", "-\t\t\tif (stringRef [0] != 0) {", "-\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "-\t\t\t\tOS.CFRelease(stringRef [0]);", "-\t\t\t\treturn OS.noErr;", "+\t\tString roleText = ((style & SWT.PUSH) != 0) ? OS.kAXButtonRole", "+\t\t\t\t: ((style & SWT.RADIO) != 0) ? OS.kAXRadioButtonRole", "+\t\t\t\t: ((style & SWT.CHECK) != 0) ? OS.kAXCheckBoxRole", "+\t\t\t\t: ((style & SWT.DROP_DOWN) != 0) ? OS.kAXMenuButtonRole", "+\t\t\t\t: null; // SEPARATOR", "+\t\tif (roleText != null) {", "+\t\t\tbuffer = new char [roleText.length ()];", "+\t\t\troleText.getChars (0, buffer.length, buffer, 0);", "+\t\t\tstringRef [0] = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\tif (attributeName.equals (OS.kAXRoleAttribute)) {", "+\t\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, stringRef);", "+\t\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (attributeName.equals (OS.kAXRoleDescriptionAttribute)) {", "+\t\t\t\tif (stringRef [0] != 0) {", "+\t\t\t\t\tint stringRef2 = OS.HICopyAccessibilityRoleDescription (stringRef [0], 0);", "+\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef2});", "+\t\t\t\t\tOS.CFRelease(stringRef [0]);", "+\t\t\t\t\tOS.CFRelease(stringRef2);", "+\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t}", "-\t\tif (attributeName.equals (OS.kAXRoleDescriptionAttribute)) {", "-\t\t\tif (stringRef [0] != 0) {", "-\t\t\t\tint stringRef2 = OS.HICopyAccessibilityRoleDescription (stringRef [0], 0);", "-\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef2});", "-\t\t\t\tOS.CFRelease(stringRef [0]);", "-\t\t\t\tOS.CFRelease(stringRef2);", "-\t\t\t\treturn OS.noErr;", "-\t\t\t}", "+\t}", "+\tif (attributeName.equals (OS.kAXTitleAttribute) || attributeName.equals (OS.kAXDescriptionAttribute)) {", "+\t\tString tooltip = getToolTipText();", "+\t\tif (tooltip != null && getText().equals(\"\")) {", "+\t\t\t//TODO: TEMPORARY CODE: return the tooltip for an icon-only tool item (should send getName to the app)", "+\t\t\tbuffer = new char [tooltip.length ()];", "+\t\t\ttooltip.getChars (0, buffer.length, buffer, 0);", "+\t\t\tint ref = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {ref});", "+\t\t\tOS.CFRelease(ref);", "+\t\t\treturn OS.noErr;", "+\t\t\t// END TEMPORARY CODE"]}], "num": 5541}
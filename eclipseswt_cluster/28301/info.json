{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "313f7c6d8acd3e4dc08f8b67dc938e23", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9c010dbe3ae7b568b7d2951b143abf0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Cursor.java", "commitBeforeChange": "a874d09ce1b9202d361140d1809b43597a568a0c", "commitAfterChange": "d0069d7ed7376b10efa426e883f2b4851a6c7c22", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  long createCursor(byte[] sourceData, byte[] maskData, int width, int height, int hotspotX, int hotspotY, boolean reverse)", "signatureAfterChange": "  long createCursor(byte[] sourceData, byte[] maskData, int width, int height, int hotspotX, int hotspotY, boolean reverse)", "diff": ["+\tif (OS.GTK_VERSION >= OS.VERSION(3, 0, 0)) {", "+\t\tfor (int i = 0; i < sourceData.length; i++) {", "+\t\t\tbyte s = sourceData[i];", "+\t\t\tsourceData[i] = (byte)(((s & 0x80) >> 7) |", "+\t\t\t\t((s & 0x40) >> 5) |", "+\t\t\t\t((s & 0x20) >> 3) |", "+\t\t\t\t((s & 0x10) >> 1) |", "+\t\t\t\t((s & 0x08) << 1) |", "+\t\t\t\t((s & 0x04) << 3) |", "+\t\t\t\t((s & 0x02) << 5) |", "+\t\t\t\t((s & 0x01) << 7));", "+\t\t\tsourceData[i] = (byte) ~sourceData[i];", "+\t\t}", "+\t\tfor (int i = 0; i < maskData.length; i++) {", "+\t\t\tbyte s = maskData[i];", "+\t\t\tmaskData[i] = (byte)(((s & 0x80) >> 7) |", "+\t\t\t\t((s & 0x40) >> 5) |", "+\t\t\t\t((s & 0x20) >> 3) |", "+\t\t\t\t((s & 0x10) >> 1) |", "+\t\t\t\t((s & 0x08) << 1) |", "+\t\t\t\t((s & 0x04) << 3) |", "+\t\t\t\t((s & 0x02) << 5) |", "+\t\t\t\t((s & 0x01) << 7));", "+\t\t\tmaskData[i] = (byte) ~maskData[i];", "+\t\t}", "+\t\tPaletteData palette = new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)});", "+\t\tImageData source = new ImageData(width, height, 1, palette, 1, sourceData);", "+\t\tImageData mask = new ImageData(width, height, 1, palette, 1, maskData);", "+\t\tbyte[] data = new byte[source.width * source.height * 4];", "+\t\tfor (int y = 0; y < source.height; y++) {", "+\t\t\tint offset = y * source.width * 4;", "+\t\t\tfor (int x = 0; x < source.width; x++) {", "+\t\t\t\tint pixel = source.getPixel(x, y);", "+\t\t\t\tint maskPixel = mask.getPixel(x, y);", "+\t\t\t\tif (pixel == 0 && maskPixel == 0) {", "+\t\t\t\t\t// BLACK", "+\t\t\t\t\tdata[offset+3] = (byte)0xFF;", "+\t\t\t\t} else if (pixel == 0 && maskPixel == 1) {", "+\t\t\t\t\t// WHITE - cursor color", "+\t\t\t\t\tdata[offset] = data[offset + 1] = data[offset + 2] = data[offset + 3] = (byte)0xFF;", "+\t\t\t\t} else if (pixel == 1 && maskPixel == 0) {", "+\t\t\t\t\t// SCREEN", "+\t\t\t\t} else {", "+\t\t\t\t\t/* no support */", "+\t\t\t\t\t// REVERSE SCREEN -> SCREEN", "+\t\t\t\t}", "+\t\t\t\toffset += 4;", "+\t\t\t}", "+\t\t}", "+\t\tlong /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, width, height);", "+\t\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "+\t\tlong /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "+\t\tOS.memmove(pixels, data, stride * height);", "+\t\tlong /*int*/ cursor = OS.gdk_cursor_new_from_pixbuf(OS.gdk_display_get_default(), pixbuf, hotspotX, hotspotY);", "+\t\tOS.g_object_unref(pixbuf);", "+\t\treturn cursor;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bff4ca9d1987414cb9c06a5df467da4e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Cursor.java", "commitBeforeChange": "95d4565f745af57180cf5681e3ac70077cc7e816", "commitAfterChange": "7ac469e20b5a52d321e3f3042fd720e66ba8fada", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Cursor (Device device, ImageData source, ImageData mask, int hotspotX, int hotspotY)", "signatureAfterChange": " public Cursor (Device device, ImageData source, ImageData mask, int hotspotX, int hotspotY)", "diff": ["-//\t/* Swap the bits if necessary */", "-//\tbyte[] sourceData = new byte[source.data.length];", "-//\tbyte[] maskData = new byte[mask.data.length];", "-//\t/* Swap the bits in each byte */", "-//\tbyte[] data = source.data;", "-//\tfor (int i = 0; i < data.length; i++) {", "-//\t\tbyte s = data[i];", "-//\t\tsourceData[i] = (byte)(((s & 0x80) >> 7) |", "-//\t\t\t((s & 0x40) >> 5) |", "-//\t\t\t((s & 0x20) >> 3) |", "-//\t\t\t((s & 0x10) >> 1) |", "-//\t\t\t((s & 0x08) << 1) |", "-//\t\t\t((s & 0x04) << 3) |", "-//\t\t\t((s & 0x02) << 5) |", "-//\t\t\t((s & 0x01) << 7));", "-//\t\tsourceData[i] = (byte) ~sourceData[i];", "-//\t}", "-//\tdata = mask.data;", "-//\tfor (int i = 0; i < data.length; i++) {", "-//\t\tbyte s = data[i];", "-//\t\tmaskData[i] = (byte)(((s & 0x80) >> 7) |", "-//\t\t\t((s & 0x40) >> 5) |", "-//\t\t\t((s & 0x20) >> 3) |", "-//\t\t\t((s & 0x10) >> 1) |", "-//\t\t\t((s & 0x08) << 1) |", "-//\t\t\t((s & 0x04) << 3) |", "-//\t\t\t((s & 0x02) << 5) |", "-//\t\t\t((s & 0x01) << 7));", "-//\t\tmaskData[i] = (byte) ~maskData[i];", "-//\t}", "-//\tint xDisplay = device.xDisplay;", "-//\tint drawable = OS.XDefaultRootWindow(xDisplay);", "-//\tint sourcePixmap = OS.XCreateBitmapFromData(xDisplay, drawable, sourceData, source.width, source.height);", "-//\tint maskPixmap = OS.XCreateBitmapFromData(xDisplay, drawable, maskData, source.width, source.height);", "-//\t/* Get the colors */", "-//\tint screenNum = OS.XDefaultScreen(xDisplay);", "-//\tXColor foreground = new XColor();", "-//\tforeground.pixel = OS.XBlackPixel(xDisplay, screenNum);", "-//\tforeground.red = foreground.green = foreground.blue = 0;", "-//\tXColor background = new XColor();", "-//\tbackground.pixel = OS.XWhitePixel(xDisplay, screenNum);", "-//\tbackground.red = background.green = background.blue = (short)0xFFFF;", "-//\t/* Create the cursor */", "-//\thandle = OS.XCreatePixmapCursor(xDisplay, maskPixmap, sourcePixmap, foreground, background, hotspotX, hotspotY);", "-//\t/* Dispose the pixmaps */", "-//\tOS.XFreePixmap(xDisplay, sourcePixmap);", "-//\tOS.XFreePixmap(xDisplay, maskPixmap);", "-", "-\thandle= CURSOR1;", "+\t", "+\tint w= Math.min(16, source.width);", "+\tint h= Math.min(16, source.height);", "+\t", "+\tshort[] data= new short[16];", "+\tshort[] msk= new short[16];", "+\t", "+\tfor (int y= 0; y < h; y++) {", "+\t\tshort d= 0;", "+\t\tshort m= 0;", "+\t\tfor (int x= 0; x < w; x++) {", "+\t\t\tint bit= 1 >> x;", "+\t\t\tif (source.getPixel(x, y) != 0)", "+\t\t\t\td |= bit;", "+\t\t\tif (mask.getPixel(x, y) != 0)", "+\t\t\t\tm |= bit;", "+\t\t}", "+\t\tdata[y]= d;", "+\t\tmsk[y]= m;", "+\t}", "+\t", "+\tOS.NewCursor((short) hotspotX, (short)hotspotY, data, msk);"]}], "num": 28301}
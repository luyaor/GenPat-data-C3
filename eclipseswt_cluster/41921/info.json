{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "707dbe4e973bc809abdbc67acc949f61", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e27bab397616899f7d4d39e3f5af2311", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "6077b9f7e079a907c32af4a59e2301b36d545deb", "commitAfterChange": "e8a835d302f94a49f676779cb3b99adb326071bb", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  \tint atkObject_ref_state_set  ()", "signatureAfterChange": "  \tint atkObject_ref_state_set  ()", "diff": ["-\t\t\tint set = OS.atk_state_set_new ();", "+\t\t\tint set = ATK.atk_state_set_new ();", "-\t\t\t\tif ((state & ACC.STATE_BUSY) != 0) OS.atk_state_set_add_state (set, OS.ATK_STATE_BUSY);", "-\t\t\t\tif ((state & ACC.STATE_CHECKED) != 0) OS.atk_state_set_add_state (set, OS.ATK_STATE_CHECKED);", "-\t\t\t\tif ((state & ACC.STATE_EXPANDED) != 0) OS.atk_state_set_add_state (set, OS.ATK_STATE_EXPANDED);", "-\t\t\t\tif ((state & ACC.STATE_FOCUSABLE) != 0) OS.atk_state_set_add_state (set, OS.ATK_STATE_FOCUSABLE);", "-\t\t\t\tif ((state & ACC.STATE_FOCUSED) != 0) OS.atk_state_set_add_state (set, OS.ATK_STATE_FOCUSED);", "-\t\t\t\tif ((state & ACC.STATE_HOTTRACKED) != 0) OS.atk_state_set_add_state (set, OS.ATK_STATE_ARMED); ;", "-\t\t\t\tif ((state & ACC.STATE_INVISIBLE) == 0) OS.atk_state_set_add_state (set, OS.ATK_STATE_VISIBLE);", "-\t\t\t\tif ((state & ACC.STATE_MULTISELECTABLE) != 0) OS.atk_state_set_add_state (set, OS.ATK_STATE_MULTISELECTABLE);", "-\t\t\t\tif ((state & ACC.STATE_OFFSCREEN) == 0) OS.atk_state_set_add_state (set, OS.ATK_STATE_SHOWING);\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\tif ((state & ACC.STATE_PRESSED) != 0) OS.atk_state_set_add_state (set, OS.ATK_STATE_PRESSED);", "-\t\t\t\tif ((state & ACC.STATE_READONLY) == 0) OS.atk_state_set_add_state (set, OS.ATK_STATE_EDITABLE);", "-\t\t\t\tif ((state & ACC.STATE_SELECTABLE) != 0) OS.atk_state_set_add_state (set, OS.ATK_STATE_SELECTABLE);", "-\t\t\t\tif ((state & ACC.STATE_SELECTED) != 0) OS.atk_state_set_add_state (set, OS.ATK_STATE_SELECTED);", "-\t\t\t\tif ((state & ACC.STATE_SIZEABLE) != 0) OS.atk_state_set_add_state (set, OS.ATK_STATE_RESIZABLE);", "+\t\t\t\tif ((state & ACC.STATE_BUSY) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_BUSY);", "+\t\t\t\tif ((state & ACC.STATE_CHECKED) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_CHECKED);", "+\t\t\t\tif ((state & ACC.STATE_EXPANDED) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_EXPANDED);", "+\t\t\t\tif ((state & ACC.STATE_FOCUSABLE) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_FOCUSABLE);", "+\t\t\t\tif ((state & ACC.STATE_FOCUSED) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_FOCUSED);", "+\t\t\t\tif ((state & ACC.STATE_HOTTRACKED) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_ARMED); ;", "+\t\t\t\tif ((state & ACC.STATE_INVISIBLE) == 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_VISIBLE);", "+\t\t\t\tif ((state & ACC.STATE_MULTISELECTABLE) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_MULTISELECTABLE);", "+\t\t\t\tif ((state & ACC.STATE_OFFSCREEN) == 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_SHOWING);\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\t\tif ((state & ACC.STATE_PRESSED) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_PRESSED);", "+\t\t\t\tif ((state & ACC.STATE_READONLY) == 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_EDITABLE);", "+\t\t\t\tif ((state & ACC.STATE_SELECTABLE) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_SELECTABLE);", "+\t\t\t\tif ((state & ACC.STATE_SELECTED) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_SELECTED);", "+\t\t\t\tif ((state & ACC.STATE_SIZEABLE) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_RESIZABLE);", "-\t\tOS.memmove (objectClass, superType);", "+\t\tATK.memmove (objectClass, superType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5e4fa1db89bd90262004ff208acc5d6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "8876e6d492a2f5404dad013c1e9b990deabd9d1f", "commitAfterChange": "e035b05d2d4596f4d188bcb320a38d62c37de2e2", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": " \t \tvoid sendEvent(int event, Object eventData)", "signatureAfterChange": " \t \tvoid sendEvent(int event, Object eventData)", "diff": ["-\t\t\tcase ACC.EVENT_STATE_CHANGED:", "-\t\t\t\t//TODO needs the state that changed", "-//\t\t\t\tOS.g_signal_emit_by_name (handle, ATK.state_change, );", "+\t\t\tcase ACC.EVENT_STATE_CHANGED: {", "+\t\t\t\tif (!(eventData instanceof int[])) break;", "+\t\t\t\tint[] array = (int[])eventData;", "+\t\t\t\tint state =  array[0];", "+\t\t\t\tint value = array[1];", "+\t\t\t\tint atkState = -1;", "+\t\t\t\tswitch (state) {", "+\t\t\t\t\tcase ACC.STATE_SELECTED: atkState = ATK.ATK_STATE_SELECTED; break;", "+\t\t\t\t\tcase ACC.STATE_SELECTABLE: atkState = ATK.ATK_STATE_SELECTABLE; break;", "+\t\t\t\t\tcase ACC.STATE_MULTISELECTABLE: atkState = ATK.ATK_STATE_MULTISELECTABLE; break;", "+\t\t\t\t\tcase ACC.STATE_FOCUSED: atkState = ATK.ATK_STATE_FOCUSED; break;", "+\t\t\t\t\tcase ACC.STATE_FOCUSABLE: atkState = ATK.ATK_STATE_FOCUSABLE; break;", "+\t\t\t\t\tcase ACC.STATE_PRESSED: atkState = ATK.ATK_STATE_PRESSED; break;", "+\t\t\t\t\tcase ACC.STATE_CHECKED: atkState = ATK.ATK_STATE_CHECKED; break;", "+\t\t\t\t\tcase ACC.STATE_EXPANDED: atkState = ATK.ATK_STATE_EXPANDED; break;", "+\t\t\t\t\tcase ACC.STATE_COLLAPSED: atkState = ATK.ATK_STATE_EXPANDED; break;", "+\t\t\t\t\tcase ACC.STATE_HOTTRACKED: atkState = ATK.ATK_STATE_ARMED; break;", "+\t\t\t\t\tcase ACC.STATE_BUSY: atkState = ATK.ATK_STATE_BUSY; break;", "+\t\t\t\t\tcase ACC.STATE_READONLY: atkState = ATK.ATK_STATE_EDITABLE; break;", "+\t\t\t\t\tcase ACC.STATE_INVISIBLE: atkState = ATK.ATK_STATE_VISIBLE; break;", "+\t\t\t\t\tcase ACC.STATE_OFFSCREEN: atkState = ATK.ATK_STATE_SHOWING; break;", "+\t\t\t\t\tcase ACC.STATE_SIZEABLE: atkState = ATK.ATK_STATE_RESIZABLE; break;", "+\t\t\t\t\tcase ACC.STATE_LINKED: break;", "+\t\t\t\t\tcase ACC.STATE_DISABLED: atkState = ATK.ATK_STATE_ENABLED; break;", "+\t\t\t\t\tcase ACC.STATE_ACTIVE: atkState = ATK.ATK_STATE_ACTIVE; break;", "+\t\t\t\t\tcase ACC.STATE_SINGLELINE: atkState = ATK.ATK_STATE_SINGLE_LINE; break;", "+\t\t\t\t\tcase ACC.STATE_MULTILINE: atkState = ATK.ATK_STATE_MULTI_LINE; break;", "+\t\t\t\t\tcase ACC.STATE_REQUIRED: atkState = ATK.ATK_STATE_REQUIRED; break;", "+\t\t\t\t\tcase ACC.STATE_INVALID_ENTRY: atkState = ATK.ATK_STATE_INVALID_ENTRY; break;", "+\t\t\t\t\tcase ACC.STATE_SUPPORTS_AUTOCOMPLETION: atkState = ATK.ATK_STATE_SUPPORTS_AUTOCOMPLETION; break;", "+\t\t\t\t}", "+\t\t\t\tif (atkState == -1) break;", "+\t\t\t\tATK.atk_object_notify_state_change(handle, atkState, value != 0);", "-\t\t\tcase ACC.EVENT_LOCATION_CHANGED:", "-\t\t\t\t//TODO needs the new bounds", "-//\t\t\t\tOS.g_signal_emit_by_name (handle, ATK.bounds_changed);", "+\t\t\t}", "+\t\t\tcase ACC.EVENT_LOCATION_CHANGED: {", "+\t\t\t\tVector listeners = accessible.accessibleControlListeners;", "+\t\t\t\tint length = listeners.size();", "+\t\t\t\tGdkRectangle rect = new GdkRectangle();", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tAccessibleControlEvent e = new AccessibleControlEvent (accessible);", "+\t\t\t\t\te.childID = id;", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener)listeners.elementAt (i);", "+\t\t\t\t\t\tlistener.getLocation (e);", "+\t\t\t\t\t}", "+\t\t\t\t\trect.x = e.x;", "+\t\t\t\t\trect.y = e.y;", "+\t\t\t\t\trect.width = e.width;", "+\t\t\t\t\trect.height = e.height;", "+\t\t\t\t}", "+\t\t\t\tOS.g_signal_emit_by_name (handle, ATK.bounds_changed, rect);", "+\t\t\t}", "-\t\t\tcase ACC.EVENT_TEXT_COLUMN_CHANGED:", "-\t\t\t\t//TODO needs the new position of the caret", "-\t\t\t\tOS.g_signal_emit_by_name (handle, ATK.text_caret_moved);", "+\t\t\tcase ACC.EVENT_TEXT_COLUMN_CHANGED: {", "+\t\t\t\tint offset = 0;", "+\t\t\t\tVector listeners = accessible.accessibleTextExtendedListeners;", "+\t\t\t\tint length = listeners.size();", "+\t\t\t\tAccessibleTextEvent e = new AccessibleTextEvent (accessible);", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tAccessibleTextListener listener = (AccessibleTextListener) listeners.elementAt(i);", "+\t\t\t\t\t\tlistener.getCaretOffset (e);", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tlisteners = accessible.accessibleTextListeners;", "+\t\t\t\t\tlength = listeners.size();", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\te.childID = id;", "+\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\tAccessibleTextListener listener = (AccessibleTextListener) listeners.elementAt(i);", "+\t\t\t\t\t\t\tlistener.getCaretOffset (e);\t", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\toffset = e.offset;", "+\t\t\t\tOS.g_signal_emit_by_name (handle, ATK.text_caret_moved, offset);", "+\t\t\t}"]}], "num": 41921}
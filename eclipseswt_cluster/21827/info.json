{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e18a59b88dc9fa3db7b65c74c5e787a0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f5383bf4a3ffc99b61e0300eda2d9cf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "f705f1e76286c6f3660ecf53b6864bbd63d66494", "commitAfterChange": "0197907d68007347a84613b33a3d149ba32c4fc3", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": "  int findScrollViewer(int current, int scrollViewerType)", "signatureAfterChange": "  int findScrollViewer(int current, int scrollViewerType)", "diff": ["-\tint template = OS.Control_Template (handle);", "-\tint scrollViewerName = createDotNetString (SCROLLVIEWER_PART_NAME, false);", "-\tint scrollViewer = OS.FrameworkTemplate_FindName (template, scrollViewerName, handle);", "-\tOS.GCHandle_Free (scrollViewerName);", "-\tOS.GCHandle_Free (template);", "-\treturn scrollViewer;", "+\tif (columnCount != 0) {", "+\t\tint template = OS.Control_Template (handle);", "+\t\tint scrollViewerName = createDotNetString (SCROLLVIEWER_PART_NAME, false);", "+\t\tint scrollViewer = OS.FrameworkTemplate_FindName (template, scrollViewerName, handle);", "+\t\tOS.GCHandle_Free (scrollViewerName);", "+\t\tOS.GCHandle_Free (template);", "+\t\treturn scrollViewer;", "+\t}", "+\treturn super.findScrollViewer (current, scrollViewerType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5be1c034c4667633f5f40043b2568a5e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "ff915b6fd2c7ce8700ffd3b748d1d9aa6cfbed47", "commitAfterChange": "3876ff531add8d32f9c402f543007eba72ce70f3", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": " @Override Point getWindowOrigin ()", "signatureAfterChange": " @Override Point getWindowOrigin ()", "diff": ["-\t/*", "-\t * Need to overide this since the handle attribute will not be intialized", "-\t * if the shell is not made visible. So need to get the location from the shell handle", "-\t * getLocation() method in shell will provide us the location of the control", "-\t */", "-", "-\treturn getLocation();", "+\tif (!mapped) {", "+\t\t/*", "+\t\t * Special case: The handle attributes are not initialized until the", "+\t\t * shell is made visible, so gdk_window_get_origin () will return {0, 0}.", "+\t\t * ", "+\t\t * Once the shell is realized, gtk_window_get_position () includes", "+\t\t * window trims etc. from the window manager. That's why getLocation ()", "+\t\t * is not safe to use after the shell has been made visible.", "+\t\t */", "+\t\treturn getLocation ();", "+\t}", "+\treturn super.getWindowOrigin( );"]}], "num": 21827}
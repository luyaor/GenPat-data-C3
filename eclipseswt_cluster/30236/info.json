{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d18862b7da9644ec55251d38d2e7c577", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53bd7258bac23195697232d724bc7d6d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "3e806aca26e00cc7bfbc0bb182894c626f82ccdf", "commitAfterChange": "71be94684464e606ecb9453ac7eedc432c247f69", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 10, "signatureBeforeChange": "  void setBounds(int x, int y, int width, int height, int flags)", "signatureAfterChange": "  LRESULT WM_WINDOWPOSCHANGED (int wParam, int lParam)", "diff": ["-void setBounds(int x, int y, int width, int height, int flags) {", "-\t/*", "-\t* Bug in Windows.  When a window with style WS_EX_LAYOUTRTL", "-\t* that contains a caret is resized, Windows does not move the", "-\t* caret in relation to the mirrored origin in the top right.", "-\t* The fix is to save and restore the caret.", "-\t*/", "-\tboolean isFocus = (style & SWT.RIGHT_TO_LEFT) != 0 && caret != null && caret.isFocusCaret ();", "-\tif (isFocus) caret.killFocus ();", "-\tsuper.setBounds (x, y, width, height, flags);", "-\tif (isFocus) caret.setFocus ();", "-}", "+LRESULT WM_WINDOWPOSCHANGED (int wParam, int lParam) {", "+\tLRESULT result  = super.WM_WINDOWPOSCHANGED (wParam, lParam);", "+\tif (result != null) return result;", "+\t/*", "+\t* Bug in Windows.  When a window with style WS_EX_LAYOUTRTL", "+\t* that contains a caret is resized, Windows does not move the", "+\t* caret in relation to the mirrored origin in the top right.", "+\t* The fix is to hide the caret in WM_WINDOWPOSCHANGING and", "+\t* show the caret in WM_WINDOWPOSCHANGED.", "+\t*/", "+\tboolean isFocus = (style & SWT.RIGHT_TO_LEFT) != 0 && caret != null && caret.isFocusCaret ();", "+\tif (isFocus) caret.setFocus ();", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "382159cc44dc08ac4876acc2c636bbac", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "cd0ca0631b90c962a2787b997b2aec4dcd48b7f6", "commitAfterChange": "e293cd5ca9ec202629c2ce24590166a853a347b7", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": "\r \r LRESULT WM_ERASEBKGND (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_SETREDRAW (int wParam, int lParam)", "diff": ["-LRESULT WM_ERASEBKGND (int wParam, int lParam) {\r", "-\t/*\r", "-\t* Feature in Windows.  For some reason, Windows\r", "-\t* does not fully erase the area that the cool bar\r", "-\t* occupies when the size of the cool bar grows.\r", "-\t* The fix is to erase the cool bar background.\r", "-\t*/\r", "-\tdrawBackground (wParam);\r", "-\treturn null;\r", "-}\r", "+LRESULT WM_SETREDRAW (int wParam, int lParam) {\r", "+\tLRESULT result = super.WM_SETREDRAW (wParam, lParam);\r", "+\tif (result != null) return result;\r", "+\t/*\r", "+\t* Feature in Windows.  When redraw is turned off, the rebar\r", "+\t* control does not call the default window proc.  This means\r", "+\t* that the rebar will redraw and children of the rebar will\r", "+\t* also redraw.  The fix is to call both the rebar window proc\r", "+\t* and the default window proc.\r", "+\t*/\r", "+\tint code = callWindowProc (OS.WM_SETREDRAW, wParam, lParam);\r", "+\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, wParam, lParam);\r", "+\treturn new LRESULT (code);\r", "+}\r"]}], "num": 30236}
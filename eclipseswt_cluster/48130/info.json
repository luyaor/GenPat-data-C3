{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "180ad54eb0098fbf03b2ee12aaa7415e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e3be924a9cdc17470f79afb6f2488b9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "966068aaa7215bc84ab090be34f0ec9f9cebb06c", "commitAfterChange": "c599c5b678cf64680c86543b4f7a10205d3638e9", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public Rectangle computeTrim (int x, int y, int width, int height)", "signatureAfterChange": "  public Rectangle computeTrim (int x, int y, int width, int height)", "diff": ["+\tif ((style & SWT.SEARCH) != 0) {", "+\t\tint [] left = new int [1], right = new int [1];", "+\t\tint [] outAttributes = new int [1];", "+\t\tOS.HISearchFieldGetAttributes (handle, outAttributes);", "+\t\tif ((outAttributes [0] & OS.kHISearchFieldAttributesSearchIcon) != 0) {", "+\t\t\tOS.GetThemeMetric (OS.kThemeMetricRoundTextFieldContentInsetWithIconLeft, left);", "+\t\t} else {", "+\t\t\tOS.GetThemeMetric (OS.kThemeMetricRoundTextFieldContentInsetLeft, left);\t\t\t", "+\t\t}", "+\t\tif ((outAttributes [0] & OS.kHISearchFieldAttributesCancel) != 0) {", "+\t\t\tOS.GetThemeMetric (OS.kThemeMetricRoundTextFieldContentInsetWithIconRight, right);", "+\t\t} else {", "+\t\t\tOS.GetThemeMetric (OS.kThemeMetricRoundTextFieldContentInsetRight, right);\t\t\t", "+\t\t}", "+\t\twidth += left [0] + right [0];", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7e2fcfb404e85752b16dce4ed012e85", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public void dispose ()", "signatureAfterChange": " public void dispose ()", "diff": ["+ */", "-\tif (handle != 0) OS.XmFontListFree (handle);\r", "+\tif (handle == 0) return;", "+\tif (device.isDisposed()) return;\r", "+\tif (handle == device.systemFont) return;\r", "+\t\r", "+\t/* Free the fonts associated with the font list */\r", "+\tint [] buffer = new int [1];\r", "+\tint xDisplay = device.xDisplay;\r", "+\tif (OS.XmFontListInitFontContext (buffer, handle)) {\r", "+\t\tint context = buffer [0];\r", "+\t\tint fontListEntry;\r", "+\t\twhile ((fontListEntry = OS.XmFontListNextEntry (context)) != 0) {\r", "+\t\t\tint fontPtr = OS.XmFontListEntryGetFont (fontListEntry, buffer);\r", "+\t\t\tif (buffer [0] == OS.XmFONT_IS_FONT) {\r", "+\t\t\t\tOS.XFreeFont(xDisplay, fontPtr);\r", "+\t\t\t} else {\r", "+\t\t\t\tOS.XFreeFontSet(xDisplay, fontPtr);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tOS.XmFontListFreeFontContext (context);\r", "+\t}\t\r", "+\t\r", "+\t/* Free the font list */", "+\tOS.XmFontListFree (handle);", "+\tdevice = null;\r"]}], "num": 48130}
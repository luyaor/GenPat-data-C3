{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "135265154f437f1f1df406290f1bb601", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f5572e17410d27062fb5e0078b08b5b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Path.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public void quadTo(float cx, float cy, float x, float y)", "signatureAfterChange": " public void quadTo(float cx, float cy, float x, float y)", "diff": ["-\tNSPoint pt = new NSPoint();", "-\tpt.x = x;", "-\tpt.y = y;", "-\tNSPoint ct = new NSPoint();", "-\tct.x = cx;", "-\tct.y = cy;", "-\thandle.curveToPoint(pt, ct, ct);", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tNSPoint pt = new NSPoint();", "+\t\tpt.x = x;", "+\t\tpt.y = y;", "+\t\tNSPoint ct = new NSPoint();", "+\t\tct.x = cx;", "+\t\tct.y = cy;", "+\t\thandle.curveToPoint(pt, ct, ct);", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9477e78697b48da31413c8bfc379928", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Path.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void lineTo(float x, float y)", "signatureAfterChange": " public void lineTo(float x, float y)", "diff": ["-\tNSPoint pt = new NSPoint();", "-\tpt.x = x;", "-\tpt.y = y;", "-\thandle.lineToPoint(pt);", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tNSPoint pt = new NSPoint();", "+\t\tpt.x = x;", "+\t\tpt.y = y;", "+\t\thandle.lineToPoint(pt);", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6599d62b5e97b045c93f23cb755eb4dd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Path.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public PathData getPathData()", "signatureAfterChange": " public PathData getPathData()", "diff": ["-\tint count = (int)/*64*/handle.elementCount();", "-\tint pointCount = 0, typeCount = 0;", "-\tbyte[] types = new byte[count];", "-\tfloat[] pointArray = new float[count * 6];", "-\tint /*long*/ points = OS.malloc(3 * NSPoint.sizeof);", "-\tif (points == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tNSPoint pt = new NSPoint();", "-\tfor (int i = 0; i < count; i++) {", "-\t\tint element = (int)/*64*/handle.elementAtIndex(i, points);", "-\t\tswitch (element) {", "-\t\t\tcase OS.NSMoveToBezierPathElement:", "-\t\t\t\ttypes[typeCount++] = SWT.PATH_MOVE_TO;", "-\t\t\t\tOS.memmove(pt, points, NSPoint.sizeof);", "-\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "-\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "-\t\t\t\tbreak;", "-\t\t\tcase OS.NSLineToBezierPathElement:", "-\t\t\t\ttypes[typeCount++] = SWT.PATH_LINE_TO;", "-\t\t\t\tOS.memmove(pt, points, NSPoint.sizeof);", "-\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "-\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "-\t\t\t\tbreak;", "-\t\t\tcase OS.NSCurveToBezierPathElement:", "-\t\t\t\ttypes[typeCount++] = SWT.PATH_CUBIC_TO;", "-\t\t\t\tOS.memmove(pt, points, NSPoint.sizeof);", "-\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "-\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "-\t\t\t\tOS.memmove(pt, points + NSPoint.sizeof, NSPoint.sizeof);", "-\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "-\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "-\t\t\t\tOS.memmove(pt, points + NSPoint.sizeof + NSPoint.sizeof, NSPoint.sizeof);", "-\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "-\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "-\t\t\t\tbreak;", "-\t\t\tcase OS.NSClosePathBezierPathElement:", "-\t\t\t\ttypes[typeCount++] = SWT.PATH_CLOSE;", "-\t\t\t\tbreak;", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tint count = (int)/*64*/handle.elementCount();", "+\t\tint pointCount = 0, typeCount = 0;", "+\t\tbyte[] types = new byte[count];", "+\t\tfloat[] pointArray = new float[count * 6];", "+\t\tint /*long*/ points = OS.malloc(3 * NSPoint.sizeof);", "+\t\tif (points == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tNSPoint pt = new NSPoint();", "+\t\tfor (int i = 0; i < count; i++) {", "+\t\t\tint element = (int)/*64*/handle.elementAtIndex(i, points);", "+\t\t\tswitch (element) {", "+\t\t\t\tcase OS.NSMoveToBezierPathElement:", "+\t\t\t\t\ttypes[typeCount++] = SWT.PATH_MOVE_TO;", "+\t\t\t\t\tOS.memmove(pt, points, NSPoint.sizeof);", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase OS.NSLineToBezierPathElement:", "+\t\t\t\t\ttypes[typeCount++] = SWT.PATH_LINE_TO;", "+\t\t\t\t\tOS.memmove(pt, points, NSPoint.sizeof);", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase OS.NSCurveToBezierPathElement:", "+\t\t\t\t\ttypes[typeCount++] = SWT.PATH_CUBIC_TO;", "+\t\t\t\t\tOS.memmove(pt, points, NSPoint.sizeof);", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "+\t\t\t\t\tOS.memmove(pt, points + NSPoint.sizeof, NSPoint.sizeof);", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "+\t\t\t\t\tOS.memmove(pt, points + NSPoint.sizeof + NSPoint.sizeof, NSPoint.sizeof);", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.x;", "+\t\t\t\t\tpointArray[pointCount++] = (int)pt.y;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase OS.NSClosePathBezierPathElement:", "+\t\t\t\t\ttypes[typeCount++] = SWT.PATH_CLOSE;", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\tOS.free(points);", "+\t\tif (pointCount != pointArray.length) {", "+\t\t\tfloat[] temp = new float[pointCount];", "+\t\t\tSystem.arraycopy(pointArray, 0, temp, 0, pointCount);", "+\t\t\tpointArray = temp;", "+\t\t}", "+\t\tPathData data = new PathData();", "+\t\tdata.types = types;", "+\t\tdata.points = pointArray;", "+\t\treturn data;", "+\t} finally {", "+\t\tif (pool != null)  pool.release();", "-\tOS.free(points);", "-\tif (pointCount != pointArray.length) {", "-\t\tfloat[] temp = new float[pointCount];", "-\t\tSystem.arraycopy(pointArray, 0, temp, 0, pointCount);", "-\t\tpointArray = temp;", "-\t}", "-\tPathData data = new PathData();", "-\tdata.types = types;", "-\tdata.points = pointArray;", "-\treturn data;"]}], "num": 51487}
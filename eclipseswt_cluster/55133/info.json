{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b00f4557dbc66c334d8e263b444fd372", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24049452f9f268335e6ee63f3fc1649a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "cd8ecb8a69ace1495a67c3b9bfd25402d9344085", "commitAfterChange": "f8eebc4a59a9df233459e3a90fd2ee42161294e2", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public FontMetrics getFontMetrics()", "signatureAfterChange": " public FontMetrics getFontMetrics()", "diff": ["-\t\t\t\t/* Reef through properties looking for XAFONT */", "+\t\t\t\t/* Look through properties for XAFONT */", "-\t\t\t\t\tStringBuffer stringBuffer = new StringBuffer();", "-\t\t\t\t\tint strPtr = ptr;", "-\t\t\t\t\tbyte[] c = new byte[1];", "-\t\t\t\t\tOS.memmove(c, strPtr, 1);", "-\t\t\t\t\twhile (c[0] != 0) {", "-\t\t\t\t\t\tstringBuffer.append((char)c[0]);", "-\t\t\t\t\t\tstrPtr++;", "-\t\t\t\t\t\tOS.memmove(c, strPtr, 1);", "+\t\t\t\t\tint length = OS.strlen(ptr);", "+\t\t\t\t\tbyte[] nameBuf = new byte[length];", "+\t\t\t\t\tOS.memmove(nameBuf, ptr, length);", "+\t\t\t\t\tOS.XFree(ptr);", "+\t\t\t\t\tString xlfd = new String(Converter.mbcsToWcs(null, nameBuf)).toLowerCase();", "+\t\t\t\t\tint avg = 0;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tavg = FontData.motif_new(xlfd).averageWidth / 10;", "+\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\t// leave avg unchanged so that it will be computed below", "-\t\t\t\t\tString xlfd = stringBuffer.toString().toLowerCase();", "-\t\t\t\t\tint avg = FontData.motif_new(xlfd).averageWidth / 10;", "-\t\t\t\t\tOS.XtFree(ptr);", "-\t\t\t\t\t/* Reef through properties looking for XAFONT */", "+\t\t\t\t\t/* Look through properties for XAFONT */", "-\t\t\t\t\t\tStringBuffer stringBuffer = new StringBuffer();", "-\t\t\t\t\t\tint strPtr = ptr;", "-\t\t\t\t\t\tbyte[] c = new byte[1];", "-\t\t\t\t\t\tOS.memmove(c, strPtr, 1);", "-\t\t\t\t\t\twhile (c[0] != 0) {", "-\t\t\t\t\t\t\tstringBuffer.append((char)c[0]);", "-\t\t\t\t\t\t\tstrPtr++;", "-\t\t\t\t\t\t\tOS.memmove(c, strPtr, 1);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tString xlfd = stringBuffer.toString().toLowerCase();", "-\t\t\t\t\t\tint avg = FontData.motif_new(xlfd).averageWidth / 10;", "+\t\t\t\t\t\tint length = OS.strlen(ptr);", "+\t\t\t\t\t\tbyte[] nameBuf = new byte[length];", "+\t\t\t\t\t\tOS.memmove(nameBuf, ptr, length);", "+\t\t\t\t\t\tString xlfd = new String(Converter.mbcsToWcs(null, nameBuf)).toLowerCase();", "+\t\t\t\t\t\tint avg = 0;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\tavg = FontData.motif_new(xlfd).averageWidth / 10;", "+\t\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t * Some font servers, for example, xfstt, do not pass", "+\t\t\t\t\t\t\t * reasonable font properties to the client, so we", "+\t\t\t\t\t\t\t * cannot construct a FontData for these. Use the font", "+\t\t\t\t\t\t\t * name instead.", "+\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\tint[] fontName = new int[1];", "+\t\t\t\t\t\t\tOS.memmove(fontName, fontNamePtr [0] + (i * 4), 4);", "+\t\t\t\t\t\t\tptr = fontName[0];", "+\t\t\t\t\t\t\tif (ptr != 0 ) {", "+\t\t\t\t\t\t\t\tlength = OS.strlen(ptr);", "+\t\t\t\t\t\t\t\tnameBuf = new byte[length];", "+\t\t\t\t\t\t\t\tOS.memmove(nameBuf, ptr, length);", "+\t\t\t\t\t\t\t\txlfd = new String(Converter.mbcsToWcs(null, nameBuf)).toLowerCase();", "+\t\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\t\tavg = FontData.motif_new(xlfd).averageWidth / 10;", "+\t\t\t\t\t\t\t\t} catch (Exception ex) {", "+\t\t\t\t\t\t\t\t\t// leave avg unchanged (0) so that it will be computed below", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b684c35e9804a8abb316d515864e0df", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "b9002aa9a9dbc05b10ffa6d8c8f26124c9100a3b", "commitAfterChange": "dab04b59098116bd0aa6cb8ca76ce653fc22e7c8", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": " public FontMetrics getFontMetrics()", "signatureAfterChange": " public FontMetrics getFontMetrics()", "diff": ["-\t\t\t\t\t\t */", "-\t\t\t\t\t\tint sum = 0, count = 0;", "-\t\t\t\t\t\tint cols = fontStruct.max_char_or_byte2 - fontStruct.min_char_or_byte2 + 1;", "-\t\t\t\t\t\tint perCharPtr = fontStruct.per_char;", "-\t\t\t\t\t\tXCharStruct struct = new XCharStruct();", "-\t\t\t\t\t\tfor (int index = 0; index < cols; index++) {", "-\t\t\t\t\t\t\tOS.memmove(struct, perCharPtr + (index * XCharStruct.sizeof), XCharStruct.sizeof);", "-\t\t\t\t\t\t\tint w = struct.width;", "-\t\t\t\t\t\t\tif (w != 0) {", "-\t\t\t\t\t\t\t\tsum += w;", "-\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t */\t\t\t\t\t\t", "+\t\t\t\t\t\tint perCharPtr = fontStruct.per_char;\t", "+\t\t\t\t\t\tif (perCharPtr == 0) {", "+\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t * If perCharPtr is 0 then all glyphs in the font have", "+\t\t\t\t\t\t\t * the same width as the font's maximum width.  So no", "+\t\t\t\t\t\t\t * averaging is required.", "+\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\t averageCharWidth = fontStruct.max_bounds_width;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tint sum = 0, count = 0;", "+\t\t\t\t\t\t\tint cols = fontStruct.max_char_or_byte2 - fontStruct.min_char_or_byte2 + 1;", "+\t\t\t\t\t\t\tXCharStruct struct = new XCharStruct();", "+\t\t\t\t\t\t\tfor (int index = 0; index < cols; index++) {", "+\t\t\t\t\t\t\t\tOS.memmove(struct, perCharPtr + (index * XCharStruct.sizeof), XCharStruct.sizeof);", "+\t\t\t\t\t\t\t\tint w = struct.width;", "+\t\t\t\t\t\t\t\tif (w != 0) {", "+\t\t\t\t\t\t\t\t\tsum += w;", "+\t\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\taverageCharWidth += sum / count;", "-\t\t\t\t\t\taverageCharWidth += sum / count;", "-\t\t\t\t\t\t\tint sum = 0, count = 0;", "-\t\t\t\t\t\t\tint cols = fontStruct.max_char_or_byte2 - fontStruct.min_char_or_byte2 + 1;", "-\t\t\t\t\t\t\tXCharStruct struct = new XCharStruct();", "-\t\t\t\t\t\t\tfor (int index = 0; index < cols; index++) {", "-\t\t\t\t\t\t\t\tOS.memmove(struct, perCharPtr + (index * XCharStruct.sizeof), XCharStruct.sizeof);", "-\t\t\t\t\t\t\t\tint w = struct.width;", "-\t\t\t\t\t\t\t\tif (w != 0) {", "-\t\t\t\t\t\t\t\t\tsum += w;", "-\t\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\tif (perCharPtr == 0) {", "+\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t * If perCharPtr is 0 then all glyphs in the font have", "+\t\t\t\t\t\t\t\t * the same width as the font's maximum width.  So no", "+\t\t\t\t\t\t\t\t * averaging is required.", "+\t\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\t\t averageCharWidth = fontStruct.max_bounds_width;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tint sum = 0, count = 0;", "+\t\t\t\t\t\t\t\tint cols = fontStruct.max_char_or_byte2 - fontStruct.min_char_or_byte2 + 1;", "+\t\t\t\t\t\t\t\tXCharStruct struct = new XCharStruct();", "+\t\t\t\t\t\t\t\tfor (int index = 0; index < cols; index++) {", "+\t\t\t\t\t\t\t\t\tOS.memmove(struct, perCharPtr + (index * XCharStruct.sizeof), XCharStruct.sizeof);", "+\t\t\t\t\t\t\t\t\tint w = struct.width;", "+\t\t\t\t\t\t\t\t\tif (w != 0) {", "+\t\t\t\t\t\t\t\t\t\tsum += w;", "+\t\t\t\t\t\t\t\t\t\tcount++;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\taverageCharWidth += sum / count;", "-\t\t\t\t\t\t\taverageCharWidth += sum / count;"]}], "num": 55133}
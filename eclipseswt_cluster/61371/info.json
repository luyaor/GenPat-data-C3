{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d652a89fffbf92a6f1d1c4d9e7a69bb6", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ced8f8b2be49845a2e03a94d1bd3e6a1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/accessibility/ControlsWithAccessibleNamesExample.java", "commitBeforeChange": "b50dd73d058b5cf406183f7ba788701fc2769bb2", "commitAfterChange": "02ecc9fac6a8fdc56fdf1cad3657e9c3a80838ea", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t\t \tpublic static void main(String[] args)", "signatureAfterChange": " \t\t \tpublic static void main(String[] args)", "diff": ["-\t\tshell.setLayout(new GridLayout(2, true));", "+\t\tshell.setLayout(new GridLayout(4, true));", "+\t\tnew Label(shell, SWT.NONE).setText(\"Use Platform Name\");", "+\t\tnew Label(shell, SWT.NONE).setText(\"Override Platform Name\");", "+//\t\tText text, overrideText;", "+\t\ttext = new Text(shell, SWT.SINGLE | SWT.BORDER);", "+\t\ttext.setText(\"Contents of single-line Text\");", "+\t\t", "+\t\toverrideText = new Text(shell, SWT.SINGLE | SWT.BORDER);", "+\t\toverrideText.setText(\"Contents of single-line Text\");", "+\t\toverrideText.setData(\"name\", \"Text\");", "+\t\toverrideText.getAccessible().addAccessibleListener(overrideAccessibleAdapter);", "+\t\t", "+//\t\tText multiLineText, overrideMultiLineText;", "+\t\tmultiLineText = new Text(shell, SWT.MULTI | SWT.BORDER);", "+\t\tmultiLineText.setText(\"Contents of multi-line Text\\nLine 2\\nLine 3\\nLine 4\");", "+\t\t", "+\t\toverrideMultiLineText = new Text(shell, SWT.MULTI | SWT.BORDER);", "+\t\toverrideMultiLineText.setText(\"Contents of multi-line Text\\nLine 2\\nLine 3\\nLine 4\");", "+\t\toverrideMultiLineText.setData(\"name\", \"MultiLineText\");", "+\t\toverrideMultiLineText.getAccessible().addAccessibleListener(overrideAccessibleAdapter);", "+", "-\t\t", "-//\t\tText text, overrideText;", "-\t\ttext = new Text(shell, SWT.SINGLE | SWT.BORDER);", "-\t\ttext.setText(\"Contents of Text\");", "-\t\t", "-\t\toverrideText = new Text(shell, SWT.SINGLE | SWT.BORDER);", "-\t\toverrideText.setText(\"Contents of Text\");", "-\t\toverrideText.setData(\"name\", \"Text\");", "-\t\toverrideText.getAccessible().addAccessibleListener(overrideAccessibleAdapter);", "-\t\t// Note: currently, MSAA does not support coolbar", "+\t\t/* Set a caret into the canvas so that it will take focus. */", "-\t\tcaret.setSize(2, 10);", "+\t\tcaret.setBounds(15, 25, 2, 20);", "+\t\t\t\te.doit = true;", "+\t\t\t\te.doit = true;", "+\t\t/* Set a caret into the canvas so that it will take focus. */", "-\t\tcaret.setSize(2, 10);", "+\t\tcaret.setBounds(15, 25, 2, 20);", "+\t\t\t\te.doit = true;", "+\t\t\t\te.doit = true;", "-\t\t\titemText.setText(\"\\nText for TabItem \" + i + \"\\n\\n\\n\");", "+\t\t\titemText.setText(\"\\nText for TabItem \" + i + \"\\n\\n\");", "-\t\t\titemText.setText(\"\\nText for TabItem \" + i + \"\\n\\n\\n\");", "+\t\t\titemText.setText(\"\\nText for TabItem \" + i + \"\\n\\n\");", "-\t\t\titemText.setText(\"\\nText for CTabItem \" + i + \"\\n\\n\\n\");", "+\t\t\titemText.setText(\"\\nText for CTabItem \" + i + \"\\n\\n\");", "-\t\t\titemText.setText(\"\\nText for CTabItem \" + i + \"\\n\\n\\n\");", "+\t\t\titemText.setText(\"\\nText for CTabItem \" + i + \"\\n\\n\");", "-\t\tstyledText.setText(\"Contents of StyledText\");", "+\t\tstyledText.setText(\"Contents of single-line StyledText\");", "-\t\toverrideStyledText.setText(\"Contents of StyledText\");", "+\t\toverrideStyledText.setText(\"Contents of single-line StyledText\");", "+\t", "+//\t\tStyledText multiLineStyledText, overrideMultiLineStyledText;", "+\t\tmultiLineStyledText = new StyledText(shell, SWT.MULTI | SWT.BORDER);", "+\t\tmultiLineStyledText.setText(\"Contents of multi-line StyledText\\nLine 2\\nLine 3\\nLine 4\");", "+\t\t", "+\t\toverrideMultiLineStyledText = new StyledText(shell, SWT.MULTI | SWT.BORDER);", "+\t\toverrideMultiLineStyledText.setText(\"Contents of multi-line StyledText\\nLine 2\\nLine 3\\nLine 4\");", "+\t\toverrideMultiLineStyledText.setData(\"name\", \"MultiLineStyledText\");", "+\t\toverrideMultiLineStyledText.getAccessible().addAccessibleListener(overrideAccessibleAdapter);", "-\t\tprogressBar = new ProgressBar(shell, SWT.NONE);", "-\t\tprogressBar.setSelection(50);", "-\t\tprogressBar.setToolTipText(\"ProgressBar ToolTip\");", "-", "-\t\toverrideProgressBar = new ProgressBar(shell, SWT.NONE);", "-\t\toverrideProgressBar.setSelection(50);", "-\t\toverrideProgressBar.setToolTipText(\"ProgressBar ToolTip\");", "-\t\toverrideProgressBar.setData(\"name\", \"ProgressBar\");", "-\t\toverrideProgressBar.getAccessible().addAccessibleListener(overrideAccessibleAdapter);", "+\t\tif (!SWT.getPlatform().equals(\"cocoa\")) {", "+\t\t\tprogressBar = new ProgressBar(shell, SWT.NONE);", "+\t\t\tprogressBar.setSelection(50);", "+\t\t\tprogressBar.setToolTipText(\"ProgressBar ToolTip\");", "+\t", "+\t\t\toverrideProgressBar = new ProgressBar(shell, SWT.NONE);", "+\t\t\toverrideProgressBar.setSelection(50);", "+\t\t\toverrideProgressBar.setToolTipText(\"ProgressBar ToolTip\");", "+\t\t\toverrideProgressBar.setData(\"name\", \"ProgressBar\");", "+\t\t\toverrideProgressBar.getAccessible().addAccessibleListener(overrideAccessibleAdapter);", "+\t\t}", "+//\t\tLink link, overrideLink;", "+\t\tlink = new Link(shell, SWT.NONE);", "+\t\tlink.setText(\"<a>This is a link</a>\");", "+\t\tlink.setToolTipText(\"Link ToolTip\");", "+", "+\t\toverrideLink = new Link(shell, SWT.NONE);", "+\t\toverrideLink.setText(\"<a>This is a link</a>\");", "+\t\toverrideLink.setToolTipText(\"Link ToolTip\");", "+\t\toverrideLink.setData(\"name\", \"Link\");", "+\t\toverrideLink.getAccessible().addAccessibleListener(overrideAccessibleAdapter);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9550ed46cc4846e7f8d9a301bd3d719c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Link.java", "commitBeforeChange": "111f07e445c6fbc435cd4eff0e9eb3a65f3082dc", "commitAfterChange": "c01029f869b4bfb2ed8f6ef83d44c2a1a442a495", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tint width, height;", "-\t//TODO wrapping, wHint", "-\tint borderStyle = hasBorder() ? OS.NSBezelBorder : OS.NSNoBorder;", "-\tNSSize borderSize = NSScrollView.frameSizeForContentSize(new NSSize(), false, false, borderStyle);", "-\tNSTextView widget = (NSTextView)view;", "-\tNSSize size = widget.textStorage().size();", "-\twidth = (int)(size.width + borderSize.width);", "-\theight = (int)(size.height + borderSize.height);", "+", "+\tint width = 0, height = 0;", "+\tNSLayoutManager layoutManager = (NSLayoutManager)new NSLayoutManager ().alloc ().init ();", "+\tNSTextContainer textContainer = (NSTextContainer)new NSTextContainer ().alloc ();", "+\tNSSize size = new NSSize ();", "+\tsize.width = size.height = Float.MAX_VALUE;", "+\tif (wHint != SWT.DEFAULT) size.width = wHint;", "+\tif (hHint != SWT.DEFAULT) size.height = hHint;", "+\ttextContainer.initWithContainerSize (size);", "+\ttextContainer.setLineFragmentPadding(2);", "+\tlayoutManager.addTextContainer (textContainer);", "+", "+\tNSTextStorage textStorage = (NSTextStorage)new NSTextStorage ().alloc ().init ();", "+\ttextStorage.setAttributedString (((NSTextView)view).textStorage ());", "+\tlayoutManager.setTextStorage (textStorage);", "+\tlayoutManager.glyphRangeForTextContainer (textContainer);", "+", "+\tNSRect rect = layoutManager.usedRectForTextContainer (textContainer);", "+\twidth = layoutManager.numberOfGlyphs () == 0 ? DEFAULT_WIDTH : (int)Math.ceil (rect.width);", "+\theight = (int)Math.ceil (rect.height);", "+\ttextStorage.release ();", "+\ttextContainer.release ();", "+\tlayoutManager.release ();", "+", "+\tif (width <= 0) width = DEFAULT_WIDTH;", "+\tif (height <= 0) height = DEFAULT_HEIGHT;", "-\tint border = getBorderWidth ();", "-\twidth += border * 2;", "-\theight += border * 2;", "-\t// TODO is this true?  if so, can this rounding be turned off?", "-\t/*", "-\t * Bug in Cocoa.  NSTextStorage.size() seems to return a width", "-\t * value that is rounded down, because its result is never", "-\t * fractional.  The workaround is to increment width by 1", "-\t * to ensure that it is wide enough to show the full text.  ", "-\t */", "-\twidth += 1;", "+\t// Accommodate any border.", "+\tsize.width = width;", "+\tsize.height = height;", "+\tint border = hasBorder() ? OS.NSBezelBorder : OS.NSNoBorder;", "+\tsize = NSScrollView.frameSizeForContentSize(size, false, false, border);", "+\twidth = (int)size.width;", "+\theight = (int)size.height;", "+", "+\tif (!hasBorder()) {", "+\t\twidth += 2;", "+\t\theight += 2;", "+\t}"]}], "num": 61371}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cc2d8be259d52afd70f1a490ade8de6a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47414181fc20aa5277fa4878914487df", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " void doDispose()", "signatureAfterChange": " void dispose (boolean notifyParent)", "diff": ["-}", "-void doDispose() {", "-\tdataLabels = null;", "-\ttrimmedLabels = null;", "-\tselectionExtent = null;", "-\tcellForeground = cellBackground = null;", "-\tcellFont = null;", "-\ttextWidths = null;", "-\tsuper.doDispose();", "-}", "+void dispose (boolean notifyParent) {", "+\tif (isDisposed ()) return;", "+\tif (notifyParent) parent.destroyItem (this);", "+\tsuper.dispose ();\t/* super is intentional here */", "+\tbackground = foreground = null;", "+\tcellBackgrounds = cellForegrounds = null;", "+\tfont = null;", "+\tcellFonts = null;", "+\timages = null;", "+\ttexts = displayTexts = null;", "+\ttextWidths = fontHeights = null;", "+\tparent = null;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe59192a9735f9429785e2ef6de19fa5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/DragSource.java", "commitBeforeChange": "6bd6730e32669fbb2a0c33215b3d8035dce857ef", "commitAfterChange": "37ab1e4e2102278481686b7e60e6dfb0a4bf0c90", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  private void drag(Event dragEvent)", "signatureAfterChange": "  private void drag(Event dragEvent)", "diff": ["-\tint imagelist = 0;", "+\tImageList imagelist = null;", "-\t\timagelist = createImageList(image);", "-\t\tif (imagelist != 0) {", "-\t\t\ttopControl = control.getShell();", "-\t\t\tOS.ImageList_BeginDrag(imagelist, 0, 0, 0);", "-\t\t\tPoint location = topControl.getLocation();", "-            /*", "-            * Feature in Windows. When ImageList_DragEnter() is called,", "-            * it takes a snapshot of the screen  If a drag is started", "-            * when another window is in front, then the snapshot will", "-            * contain part of the other window, causing pixel corruption.", "-            * The fix is to force all paints to be delivered before", "-            * calling ImageList_DragEnter().", "-            */", "-\t\t\tif (OS.IsWinCE) {", "-\t\t\t\tOS.UpdateWindow (topControl.handle);", "-\t\t\t} else {", "-\t\t\t\tint flags = OS.RDW_UPDATENOW | OS.RDW_ALLCHILDREN;", "-\t\t\t\tOS.RedrawWindow (topControl.handle, null, 0, flags);", "-\t\t\t}", "-\t\t\tOS.ImageList_DragEnter(topControl.handle, dragEvent.x - location.x, dragEvent.y - location.y);", "+\t\timagelist = new ImageList(SWT.NONE);", "+\t\timagelist.add(image);", "+\t\ttopControl = control.getShell();", "+\t\tOS.ImageList_BeginDrag(imagelist.getHandle(), 0, 0, 0);", "+\t\tPoint location = topControl.getLocation();", "+        /*", "+        * Feature in Windows. When ImageList_DragEnter() is called,", "+        * it takes a snapshot of the screen  If a drag is started", "+        * when another window is in front, then the snapshot will", "+        * contain part of the other window, causing pixel corruption.", "+        * The fix is to force all paints to be delivered before", "+        * calling ImageList_DragEnter().", "+        */", "+\t\tif (OS.IsWinCE) {", "+\t\t\tOS.UpdateWindow (topControl.handle);", "+\t\t} else {", "+\t\t\tint flags = OS.RDW_UPDATENOW | OS.RDW_ALLCHILDREN;", "+\t\t\tOS.RedrawWindow (topControl.handle, null, 0, flags);", "+\t\tOS.ImageList_DragEnter(topControl.handle, dragEvent.x - location.x, dragEvent.y - location.y);", "-\tif (imagelist != 0) {", "+\tif (imagelist != null) {", "-\t\tOS.ImageList_Destroy(imagelist);", "-\t\timagelist = 0;", "+\t\timagelist.dispose();", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be137b80110d1b7e20828a6277a32f75", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/DragSource.java", "commitBeforeChange": "e08f800693309e460da190158bbcae1574737d4f", "commitAfterChange": "d67f514a36c61dfce6733179838c719bdb9a4b2a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " private void drag()", "signatureAfterChange": " private void drag()", "diff": ["-\tif (display.xEvent.type != OS.ButtonPress) return;", "+\tXButtonEvent xEvent = new XButtonEvent();", "+\tOS.memmove(xEvent, display.xEvent, XButtonEvent.sizeof);", "+\tif (xEvent.type != OS.ButtonPress) return;", "-\tevent.time = display.xEvent.pad2;", "+\tevent.time = xEvent.time;", "-\t\tint time = display.xEvent.pad2; // corresponds to time field in XButtonEvent\t", "+\t\tint time = xEvent.time;", "-\tint time = display.xEvent.pad2; // corresponds to time field in XButtonEvent", "+\tint time = xEvent.time;"]}], "num": 3278}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5d9cdeef11f6b72e7064fc4bf21e5c43", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95cf61202440e3bacb3b5a1ad38dfefd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "97620fe3667502da9f174b22a0db4534a8d8f70b", "commitAfterChange": "a3c8e8904451b6db108629003e63438cb42170e1", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["-\t\tint width = this.width;", "-\t\tint height = this.height;", "-\t\tint stride = Cairo.cairo_format_stride_for_width(Cairo.CAIRO_FORMAT_ARGB32, width);", "-\t\tbyte[] srcData = new byte[stride * height];", "+\t\tint format = Cairo.cairo_image_surface_get_format(surface);", "+\t\tint width = Cairo.cairo_image_surface_get_width(surface);", "+\t\tint height = Cairo.cairo_image_surface_get_height(surface);", "+\t\tint stride = Cairo.cairo_image_surface_get_stride(surface);", "+\t\tint /*long*/ surfaceData = Cairo.cairo_image_surface_get_data(surface);", "+\t\tboolean hasAlpha = format == Cairo.CAIRO_FORMAT_ARGB32;", "-\t\tOS.memmove(srcData, this.surfaceData, srcData.length);", "+\t\tbyte[] srcData = new byte[stride * height];", "+\t\tOS.memmove(srcData, surfaceData, srcData.length);", "-\t\tfor (int y = 0, offset = 0; y < height; y++) {", "-\t\t\tfor (int x = 0; x < width; x++, offset += 4) {", "-\t\t\t\tint a = srcData[offset + oa] & 0xFF;", "-\t\t\t\tint r = srcData[offset + or] & 0xFF;", "-\t\t\t\tint g = srcData[offset + og] & 0xFF;", "-\t\t\t\tint b = srcData[offset + ob] & 0xFF;", "-\t\t\t\tsrcData[offset + 0] = (byte)a;", "-\t\t\t\tif (a != 0) {", "-\t\t\t\t\tsrcData[offset + 1] = (byte)(((r) / (float)a) * 0xFF);", "-\t\t\t\t\tsrcData[offset + 2] = (byte)(((g) / (float)a) * 0xFF);", "-\t\t\t\t\tsrcData[offset + 3] = (byte)(((b) / (float)a) * 0xFF);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\t/*", "-\t\t* TODO is it impossible to retrieve the RGB values when alpha is zero? If this is true", "-\t\t* then this code is necessary because the transparent pixel needs the RGB values to work. ", "-\t\t*/", "-\t\tif (transparentPixel != -1) {", "+\t\tif (hasAlpha) {", "-\t\t\tfor (int y = 0, offset = 3, alphaOffset = 0; y < height; y++) {", "+\t\t\tfor (int y = 0, offset = 0, alphaOffset = 0; y < height; y++) {", "-\t\t\t\t\talphaData[alphaOffset++] = srcData[offset];", "+\t\t\t\t\tint a = srcData[offset + oa] & 0xFF;", "+\t\t\t\t\tint r = srcData[offset + or] & 0xFF;", "+\t\t\t\t\tint g = srcData[offset + og] & 0xFF;", "+\t\t\t\t\tint b = srcData[offset + ob] & 0xFF;", "+\t\t\t\t\tsrcData[offset + 0] = 0;", "+\t\t\t\t\talphaData[alphaOffset++] = (byte)a;", "+\t\t\t\t\tif (a != 0) {", "+\t\t\t\t\t\t//TODO write this without floating point math", "+\t\t\t\t\t\tsrcData[offset + 1] = (byte)(((r) / (float)a) * 0xFF);", "+\t\t\t\t\t\tsrcData[offset + 2] = (byte)(((g) / (float)a) * 0xFF);", "+\t\t\t\t\t\tsrcData[offset + 3] = (byte)(((b) / (float)a) * 0xFF);", "+\t\t\t\t\t}", "-\t\t}", "-\t\t", "-\t\tfor (int i = 0; i < srcData.length; i+= 4) {", "-\t\t\tsrcData[i] = 0;", "+\t\t} else {", "+\t\t\tfor (int y = 0, offset = 0; y < height; y++) {", "+\t\t\t\tfor (int x = 0; x < width; x++, offset += 4) {", "+\t\t\t\t\tbyte r = srcData[offset + or];", "+\t\t\t\t\tbyte g = srcData[offset + og];", "+\t\t\t\t\tbyte b = srcData[offset + ob];", "+\t\t\t\t\tsrcData[offset + 0] = 0;", "+\t\t\t\t\tsrcData[offset + 1] = r;", "+\t\t\t\t\tsrcData[offset + 2] = g;", "+\t\t\t\t\tsrcData[offset + 3] = b;", "+\t\t\t\t}", "+\t\t\t}", "-\t}", "-\tdata.alpha = alpha;", "-\tif (alpha == -1 && alphaData != null) {", "-\t\tdata.alphaData = new byte[alphaData.length];", "-\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);", "+\t\tdata.alpha = alpha;", "+\t\tif (alpha == -1 && alphaData != null) {", "+\t\t\tdata.alphaData = new byte[alphaData.length];", "+\t\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6e4ec0bfde4aa81b776bf8c4b4ce34b1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/TabFolder.java", "commitBeforeChange": "7f6898e7f25aa3abfc9d050db6890b8da8096e1f", "commitAfterChange": "a3530e14bf1a9d7cac50d2cca9f924bc03d518fd", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public Rectangle getClientArea ()", "signatureAfterChange": "  public Rectangle getClientArea ()", "diff": ["-\tif (!OS.PtWidgetIsRealized (handle)) OS.PtExtentWidgetFamily (handle);", "-\t/* Check for versions >= 6.2.1 */", "-\tif (OS.QNX_MAJOR > 6 || (OS.QNX_MAJOR == 6 && (OS.QNX_MINOR > 2 || (OS.QNX_MINOR == 2 && OS.QNX_MICRO >= 1)))) {", "-\t\tPhRect_t rect = new PhRect_t();", "-\t\tOS.PtCalcCanvas (handle, rect);", "-\t\treturn new Rectangle (rect.ul_x, rect.ul_y, rect.lr_x - rect.ul_x + 1, rect.lr_y - rect.ul_y + 1);", "-\t}", "+\tif (OS.PtWidgetIsRealized(handle) == false) OS.PtExtentWidgetFamily(handle);", "+\t", "+\tint args[] = {OS.Pt_ARG_MARGIN_RIGHT, 0, 0,", "+\t\t\t\t  OS.Pt_ARG_MARGIN_BOTTOM, 0, 0,};", "+\t", "+\tOS.PtGetResources (handle, args.length / 3, args);", "+\tPhArea_t parentArea = new PhArea_t();", "+\t", "+\tOS.PtWidgetArea(handle, parentArea);", "+\tint deltaX = area.pos_x - parentArea.pos_x; ", "+    int deltaY = area.pos_y - parentArea.pos_y;", "+    ", "+    area.size_w = (short) (parentArea.size_w - ( deltaX + args[1]));", "+    area.size_h = (short) (parentArea.size_h - ( deltaY + args [4]));", "+    "]}], "num": 36491}
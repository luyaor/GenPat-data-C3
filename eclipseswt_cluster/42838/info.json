{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd4c101bc38a5b436c7bca4c68f32c7d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a32285f6576798776a2b4389c35b90c0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r void init (Device device, FontData fd)", "signatureAfterChange": "\r void init (Device device, FontData fd)", "diff": ["-\tbyte[] buffer = Converter.wcsToMbcs(null, fd.getXlfd(), true);\r", "-\tboolean warnings = device.getWarnings();\r", "-\tdevice.setWarnings(false);\r", "-\tint fontListEntry = OS.XmFontListEntryLoad(device.xDisplay, buffer, 0, OS.XmFONTLIST_DEFAULT_TAG);\r", "-\tdevice.setWarnings(warnings);\r", "+\tint xDisplay = device.xDisplay;\r", "+\tint fontStruct = loadFont(xDisplay, fd);\r", "+\tif (fontStruct == 0) {\r", "+\t\t/*\r", "+\t\t* If the desired font can not be loaded, the XLFD fields are wildcard\r", "+\t\t* in order to preserve the font style and height. If there is no\r", "+\t\t* font with the desired style and height, the slant, weight and points\r", "+\t\t* are wildcard in that order, until a font can be loaded.\r", "+\t\t*/\r", "+\t\tFontData newFD = new FontData();\r", "+\t\tnewFD.slant = fd.slant;\r", "+\t\tnewFD.weight = fd.weight;\r", "+\t\tnewFD.points = fd.points;\r", "+\t\tnewFD.characterSetName = fd.characterSetName;\r", "+\t\tif (newFD.characterSetName == null) {\r", "+\t\t\tnewFD.characterSetName = device.characterSetName;\r", "+\t\t}\r", "+\t\tnewFD.characterSetRegistry = fd.characterSetRegistry;\r", "+\t\tif (newFD.characterSetRegistry == null) {\r", "+\t\t\tnewFD.characterSetRegistry = device.characterSetRegistry;\r", "+\t\t}\r", "+\t\tfontStruct = matchFont(xDisplay, newFD);\r", "+\r", "+\t\t/* Failed to load any font. Use the system font. */\r", "+\t\tif (fontStruct == 0) {\r", "+\t\t\thandle = device.systemFont;\r", "+\t\t\tif (handle != 0) return;\r", "+\t\t}\r", "+\t}\r", "+\tif (fontStruct == 0) SWT.error(SWT.ERROR_NO_HANDLES);\r", "+\tint fontListEntry = OS.XmFontListEntryCreate(OS.XmFONTLIST_DEFAULT_TAG, OS.XmFONT_IS_FONT, fontStruct);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edee5cb62326eb6831a96d3a8265d8ea", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "d07e719160ad9b5428874b3929f88d189e7c89ac", "commitAfterChange": "c834e343fe7b1e9703499118bb4656485bc6fc8e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r void init (Device device, FontData fd)", "signatureAfterChange": "\r void init (Device device, FontData fd)", "diff": ["-\tint fontStruct = loadFont(xDisplay, fd);\r", "-\tif (fontStruct == 0) {\r", "+\tint fontListEntry;\r", "+//\tint fontStruct = loadFont(xDisplay, fd);\r", "+//\tif (fontStruct == 0) {\r", "+//\t\t/*\r", "+//\t\t* If the desired font can not be loaded, the XLFD fields are wildcard\r", "+//\t\t* in order to preserve the font style and height. If there is no\r", "+//\t\t* font with the desired style and height, the slant, weight and points\r", "+//\t\t* are wildcard in that order, until a font can be loaded.\r", "+//\t\t*/\r", "+//\t\tFontData newFD = new FontData();\r", "+//\t\tnewFD.slant = fd.slant;\r", "+//\t\tnewFD.weight = fd.weight;\r", "+//\t\tnewFD.points = fd.points;\r", "+//\t\tnewFD.characterSetName = fd.characterSetName;\r", "+//\t\tif (newFD.characterSetName == null) {\r", "+//\t\t\tnewFD.characterSetName = device.characterSetName;\r", "+//\t\t}\r", "+//\t\tnewFD.characterSetRegistry = fd.characterSetRegistry;\r", "+//\t\tif (newFD.characterSetRegistry == null) {\r", "+//\t\t\tnewFD.characterSetRegistry = device.characterSetRegistry;\r", "+//\t\t}\r", "+//\t\tfontStruct = matchFont(xDisplay, newFD, false);\r", "+//\r", "+//\t\t/* Failed to load any font. Use the system font. */\r", "+//\t\tif (fontStruct == 0) {\r", "+//\t\t\thandle = device.systemFont;\r", "+//\t\t\tif (handle != 0) return;\r", "+//\t\t}\r", "+//\t}\r", "+//\tfontListEntry = OS.XmFontListEntryCreate(OS.XmFONTLIST_DEFAULT_TAG, OS.XmFONT_IS_FONT, fontStruct);\r", "+\tLocale locale = fd.locale;\r", "+\tif (locale != null) {\r", "+\t\tString lang = locale.getLanguage();\r", "+\t\tString country = locale.getCountry();\r", "+\t\tString variant = locale.getVariant();\r", "+\t\tString osLocale =  lang;\r", "+\t\tif (country != null && country.length() > 0) osLocale += \"_\" + country;\r", "+\t\tif (variant != null && variant.length() > 0) osLocale += \".\" + variant;\r", "+\t\tint length = osLocale.length();\r", "+\t\tbyte [] buffer = new byte[length + 1];\r", "+\t\tfor (int i=0; i<length; i++) {\r", "+\t\t\tbuffer[i] = (byte)osLocale.charAt(i);\r", "+\t\t}\r", "+\t\tOS.setlocale (OS.LC_CTYPE, buffer);\r", "+\t}\t\t\r", "+\tint fontSet = loadFontSet(xDisplay, fd);\r", "+\tif (fontSet == 0) {\r", "-\t\tfontStruct = matchFont(xDisplay, newFD);\r", "-\r", "-\t\t/* Failed to load any font. Use the system font. */\r", "-\t\tif (fontStruct == 0) {\r", "-\t\t\thandle = device.systemFont;\r", "-\t\t\tif (handle != 0) return;\r", "-\t\t}\r", "+\t\tfontSet = matchFont(xDisplay, newFD, true);\r", "-\tif (fontStruct == 0) SWT.error(SWT.ERROR_NO_HANDLES);\r", "-\tint fontListEntry = OS.XmFontListEntryCreate(OS.XmFONTLIST_DEFAULT_TAG, OS.XmFONT_IS_FONT, fontStruct);\r", "+\tif (locale != null) OS.setlocale (OS.LC_CTYPE, new byte [0]);\r", "+\t\r", "+\t/* Failed to load any font. Use the system font. */\r", "+\tif (fontSet == 0) {\r", "+\t\thandle = device.systemFont;\r", "+\t\tif (handle != 0) return;\r", "+\t}\r", "+\tfontListEntry = OS.XmFontListEntryCreate(OS.XmFONTLIST_DEFAULT_TAG, OS.XmFONT_IS_FONTSET, fontSet);\r"]}], "num": 42838}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b4ec87aeaf3a8bd8f9b24aae2f007a4", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "971a2d676fa5e4c92e853943a9c58947", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "e88cf66eab8e757845b504326c59a00194dc2c7e", "commitAfterChange": "129fbfa6925dd2ecc036f96c29029ce6e8775018", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  void init(String name, float height, int style, String nsName)", "signatureAfterChange": "  void init(String name, float height, int style, String nsName)", "diff": ["-\t\tnsName = name;", "-\t\tif ((style & SWT.BOLD) != 0) nsName += \" Bold\";", "-\t\tif ((style & SWT.ITALIC) != 0) nsName += \" Italic\";", "-\t\thandle = NSFont.fontWithName(NSString.stringWith(nsName), size);", "+\t\tint traits = 0;", "+\t\tif ((style & SWT.ITALIC) != 0) traits |= OS.NSItalicFontMask;", "+\t\tint weight = 5;", "+\t\tif ((style & SWT.BOLD) != 0) weight = 9;", "+\t\tNSString family = NSString.stringWith(name);", "+\t\tNSFontManager manager = NSFontManager.sharedFontManager();", "+\t\thandle = manager.fontWithFamily(family, traits, weight, size);", "-\t\t\tnsName = name;", "-\t\t\tif ((style & SWT.BOLD) != 0) nsName += \" Bold\";", "-\t\t\thandle = NSFont.fontWithName(NSString.stringWith(nsName), size);", "+\t\t\ttraits &= ~OS.NSItalicFontMask;", "+\t\t\thandle = manager.fontWithFamily(family, traits, weight, size);", "-\t\t\tnsName = name;", "-\t\t\thandle = NSFont.fontWithName(NSString.stringWith(nsName), size);", "+\t\t\tweight = 5;", "+\t\t\thandle = manager.fontWithFamily(family, traits, weight, size);", "+\t\t}", "+\t\tif (handle == null) {", "+\t\t\thandle = NSFont.systemFontOfSize(size);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8ec9d71e9d37e71db87aad382093e81", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "ce92898e77608bf804c80f5b62e889fe568db6fc", "commitAfterChange": "bc4d3581c33a4dad038becb29f77136e2bbc5f2e", "methodNumberBeforeChange": 258, "methodNumberAfterChange": 262, "signatureBeforeChange": "  LRESULT wmColorChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmColorChild (int wParam, int lParam)", "diff": ["-\tControl control = null;", "-\tif (backgroundImage != null) {", "-\t\tif ((state & TRANSPARENT) != 0) {", "-\t\t\tcontrol = findImageControl (backgroundImage);", "-\t\t}", "-\t}", "-\tif (foreground == -1 && background == -1 && control == null) {", "-\t\tif ((state & TRANSPARENT) != 0) {", "+\tControl control = findBackgroundControl ();", "+\tif (control == null) {", "+\t\tif ((state & THEME_BACKGROUND) != 0) {", "+\t\t\t\tif (control != null) {", "+\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\t\t\tOS.SetTextColor (wParam, getForegroundPixel ());", "+\t\t\t\t\tOS.SetBkColor (wParam, getBackgroundPixel ());", "+\t\t\t\t\tfillThemeBackground (wParam, control, rect);", "+\t\t\t\t\tOS.SetBkMode (wParam, OS.TRANSPARENT);", "+\t\t\t\t\treturn new LRESULT (OS.GetStockObject (OS.NULL_BRUSH));", "+\t\t\t\t}", "-\t\tif (control == null) return null;", "+\t\tif (foreground == -1) return null;", "-\tint forePixel = foreground, backPixel = background;", "-\tif (forePixel == -1) forePixel = defaultForeground ();", "-\tif (backPixel == -1) backPixel = defaultBackground ();", "+\tif (control == null) control = this;", "+\tint forePixel = control.getForegroundPixel ();", "+\tint backPixel = control.getBackgroundPixel ();", "-\tif (control != null) {", "+\tif (control.backgroundImage != null) {", "-\t\tif (backgroundImage != null) {", "-\t\t\tint hwnd = control.handle;", "-\t\t\tint hBitmap = backgroundImage.handle;", "-\t\t\tOS.MapWindowPoints (handle, hwnd, rect, 2);", "-\t\t\tPOINT lpPoint = new POINT ();", "-\t\t\tOS.GetWindowOrgEx (wParam, lpPoint);", "-\t\t\tOS.SetBrushOrgEx (wParam, -rect.left - lpPoint.x, -rect.top - lpPoint.y, lpPoint);", "-\t\t\tint hBrush = findBrush (hBitmap, OS.BS_PATTERN);", "-\t\t\tif ((state & DRAW_BACKGROUND) != 0) {", "-\t\t\t\tint hOldBrush = OS.SelectObject (wParam, hBrush);", "-\t\t\t\tOS.MapWindowPoints (hwnd, handle, rect, 2);", "-\t\t\t\tOS.PatBlt (wParam, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top, OS.PATCOPY);", "-\t\t\t\tOS.SelectObject (wParam, hOldBrush);", "-\t\t\t}", "-\t\t\tOS.SetBkMode (wParam, OS.TRANSPARENT);", "-\t\t\treturn new LRESULT (hBrush);", "-\t\t} else {", "-\t\t\tfillBackground (wParam, control, rect);", "-\t\t\tOS.SetBkMode (wParam, OS.TRANSPARENT);", "-\t\t\treturn new LRESULT (OS.GetStockObject (OS.NULL_BRUSH));", "+\t\tint hwnd = control.handle;", "+\t\tint hBitmap = control.backgroundImage.handle;", "+\t\tOS.MapWindowPoints (handle, hwnd, rect, 2);", "+\t\tPOINT lpPoint = new POINT ();", "+\t\tOS.GetWindowOrgEx (wParam, lpPoint);", "+\t\tOS.SetBrushOrgEx (wParam, -rect.left - lpPoint.x, -rect.top - lpPoint.y, lpPoint);", "+\t\tint hBrush = findBrush (hBitmap, OS.BS_PATTERN);", "+\t\tif ((state & DRAW_BACKGROUND) != 0) {", "+\t\t\tint hOldBrush = OS.SelectObject (wParam, hBrush);", "+\t\t\tOS.MapWindowPoints (hwnd, handle, rect, 2);", "+\t\t\tOS.PatBlt (wParam, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top, OS.PATCOPY);", "+\t\t\tOS.SelectObject (wParam, hOldBrush);", "+\t\tOS.SetBkMode (wParam, OS.TRANSPARENT);", "+\t\treturn new LRESULT (hBrush);"]}], "num": 54122}
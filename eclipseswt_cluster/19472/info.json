{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bb52ca32525c3355a70e3c84c5da69f4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16430e168ecfd8ee8d00e5917ee96fc0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "6fd5aa9d1be49611cff9b718e864fb6c8bf80663", "commitAfterChange": "6242701c8cb8d3abdee5517ccc0e3b78fafed05c", "methodNumberBeforeChange": 161, "methodNumberAfterChange": 161, "signatureBeforeChange": "  boolean translateTraversal (int key, int theEvent, boolean [] consume)", "signatureAfterChange": "  boolean translateTraversal (int key, NSEvent theEvent, boolean [] consume)", "diff": ["-boolean translateTraversal (int key, int theEvent, boolean [] consume) {", "+boolean translateTraversal (int key, NSEvent theEvent, boolean [] consume) {", "-//\t\t\tint [] modifiers = new int [1];", "-//\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "-//\t\t\tboolean next = (modifiers [0] & OS.shiftKey) == 0;", "-//\t\t\tdetail = next ? SWT.TRAVERSE_TAB_NEXT : SWT.TRAVERSE_TAB_PREVIOUS;", "+\t\t\tint modifiers = display.lastModifiers;", "+\t\t\tboolean next = (modifiers & OS.NSShiftKeyMask) == 0;", "+\t\t\tdetail = next ? SWT.TRAVERSE_TAB_NEXT : SWT.TRAVERSE_TAB_PREVIOUS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "104c2f865931dac53057d94d1bcd08c6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "df49cfdf126dfdb38eb5cd7648578202e13235a1", "commitAfterChange": "90a827f3180211b552d26c7e33216832cd4451a2", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  void saveFocus ()", "signatureAfterChange": "  void saveFocus ()", "diff": ["-//\tint window = OS.GetControlOwner (handle);", "-//\tControl control = display.getFocusControl (window, false);", "-//\tif (control != null && control != this && this == control.menuShell ()) {", "-//\t\tsetSavedFocus (control);", "-//\t}", "+\tControl control = display.getFocusControl ();", "+\tif (control != null && control != this && this == control.menuShell ()) {", "+\t\tsetSavedFocus (control);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec6364cd3019b8f9167bc7f3a6610289", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "350f976a03a5b2d274f09a2fee2918329c57e200", "commitAfterChange": "a5b154a3b2f2335f7bd2e2bd8cd0dfb1184f568a", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  public String[] getExtraAttributeNames(Node node)", "signatureAfterChange": "  public String[] getExtraAttributeNames(Node node)", "diff": ["+\t} else if (name.equals(\"function\")) {", "+\t\tNamedNodeMap attribs = node.getAttributes();", "+\t\tif (attribs != null && attribs.getNamedItem(\"variadic\") != null) {", "+\t\t\treturn new String[]{\"swt_variadic_count\",\"swt_variadic_java_types\"};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbed239eb7a317a4a94c26ffe7a3347f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Scrollable.java", "commitBeforeChange": "3afccba317ef5a48f0c5c3206970a888361c9a60", "commitAfterChange": "e673374008bc8492ce479b48d45e2e49230f3206", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " void setScrollbarVisible (int barHandle, boolean visible)", "signatureAfterChange": " void setScrollbarVisible (ScrollBar bar, boolean visible)", "diff": ["-void setScrollbarVisible (int barHandle, boolean visible) {", "+void setScrollbarVisible (ScrollBar bar, boolean visible) {", "+\tint barHandle = bar.handle;", "+\tboolean managed = OS.XtIsManaged (barHandle);", "+\tif (managed == visible) return;", "+", "+\tbar.sendEvent (visible ? SWT.Show : SWT.Hide);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f80c6b33f17902c3a638ea69bf3062c8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "e6fd36b834853dbd7a2f4ea5d3f6a3490b642f43", "commitAfterChange": "68774e9fa7ffb588d4e87074e9abdf86ba978259", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  LRESULT CDDS_ITEMPREPAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT CDDS_ITEMPREPAINT (int wParam, int lParam)", "diff": ["+\t\ttextColor = -1;", "+\t\t\tint newTextClr = OS.GetTextColor (hDC);", "+\t\t\t\t\tif (!selected) {", "+\t\t\t\t\t\ttextColor = clrText = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (selected) textColor = clrText = newTextClr;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "682c32efa99c37cfb44a1f30ba5d9bf3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "ea897abc3bbdebe63455758f5526d5ba34bed848", "commitAfterChange": "528213c92aecc4d5a81122fe05b4330346ed3e47", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 114, "signatureBeforeChange": "  void windowSendEvent (long id, long sel, long event)", "signatureAfterChange": "  void windowSendEvent (long id, long sel, long event)", "diff": ["-\t\t\tif (nsEvent.keyCode() == 53 /* ESC */ && menuBar != null && !menuBar.isDisposed()) {", "-\t\t\t\tif (menuBar.nsMenu.performKeyEquivalent(nsEvent)) {", "-\t\t\t\t\treturn;", "+\t\t\tif (nsEvent.keyCode() == 53 /* ESC */) {", "+\t\t\t\tif (menuBar != null && !menuBar.isDisposed()) {", "+\t\t\t\t\tif (menuBar.nsMenu.performKeyEquivalent(nsEvent)) {", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t} else if (display.appMenuBar != null && !display.appMenuBar.isDisposed()) {", "+\t\t\t\t\tif (display.appMenuBar.nsMenu.performKeyEquivalent(nsEvent)) {", "+\t\t\t\t\t\treturn;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d32b5ad41b59ab14f1dc692e018e09be", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "3d49220c008438fa7a1e78924469122fc1ea3cbe", "commitAfterChange": "e7613587b2c5b474d68f0eb17e38585b8b989c06", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  int gtk_focus_out_event (int widget, int event)", "signatureAfterChange": "  int gtk_focus_out_event (int widget, int event)", "diff": ["+\t/*", "+\t* Feature in GTK. The GTK combo box popup under some window managers is ", "+\t* implemented as a GTK_MENU. When it pops up, it causes the combo box shell to", "+\t* lose focus and no focus in is received for the menu. As a result, no active shell", "+\t* is set while the pop up is present. The fix is to check the current grab handle", "+\t* and see if it is a GTK_MENU. If it is, we set the ignoreActivate flag on Display", "+\t* and leave the current active shell in place. When the menu pops down, the focus in", "+\t* event received by the shell will be ignored.", "+\t*/", "+\tdisplay.ignoreActivate = false;", "+\tint grabHandle = OS.gtk_grab_get_current ();", "+\tif (grabHandle != 0) {", "+\t\tif (OS.G_OBJECT_TYPE(grabHandle) == OS.GTK_TYPE_MENU()) display.ignoreActivate = true;", "+\t\treturn 0;", "+\t}"]}], "num": 19472}
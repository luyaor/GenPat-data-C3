{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4505995a4e98f3a6c4c8a5814e57fd33", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "31f005963b411c2f13ff20f34490a579", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "4987194d8bce616de61408593d5536fbd929aa51", "commitAfterChange": "9e31c4848da674b924950acb4bf386a247c0b202", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": " public void setRedraw (boolean redraw)", "signatureAfterChange": " public void setRedraw (boolean redraw)", "diff": ["-\t * This code is intentionally commented.", "-\t *", "-\t * visible.", "-\t *", "-\t * There is no fix at this time.", "+\t * visible.  The fix is to track the visibility state while", "+\t * drawing is turned off and restore it when drawing is", "+\t * turned back on.", "-//\tif (drawCount == 0) {", "-//\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-//\t\tif ((bits & OS.WS_VISIBLE) == 0) return;", "-//\t}", "-\t", "+\tif (drawCount == 0) {", "+\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\tif ((bits & OS.WS_VISIBLE) == 0) state |= HIDDEN;", "+\t}", "-\t\t\tif (OS.IsWinCE) {", "-\t\t\t\tOS.InvalidateRect (handle, null, true);", "+\t\t\tif ((state & HIDDEN) != 0) {", "+\t\t\t\tstate &= ~HIDDEN;", "+\t\t\t\tOS.ShowWindow (handle, OS.SW_HIDE);", "-\t\t\t\tint flags = OS.RDW_ERASE | OS.RDW_FRAME | OS.RDW_INVALIDATE | OS.RDW_ALLCHILDREN;", "-\t\t\t\tOS.RedrawWindow (handle, null, 0, flags);", "+\t\t\t\tif (OS.IsWinCE) {", "+\t\t\t\t\tOS.InvalidateRect (handle, null, true);", "+\t\t\t\t} else {", "+\t\t\t\t\tint flags = OS.RDW_ERASE | OS.RDW_FRAME | OS.RDW_INVALIDATE | OS.RDW_ALLCHILDREN;", "+\t\t\t\t\tOS.RedrawWindow (handle, null, 0, flags);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fdf9f2d7db7e354ab1d1511614cc071", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "a38cdec12de35954521831ad0e8e78895c25ed1c", "commitAfterChange": "fa7c76641c503cd76fa7003bec8ccf78fc6288cd", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": "  void printWidget (int hwnd, GC gc)", "signatureAfterChange": "  void printWidget (int hwnd, int hdc, GC gc)", "diff": ["-void printWidget (int /*long*/ hwnd, GC gc) {", "-\tOS.PrintWindow (hwnd, gc.handle, 0);", "+void printWidget (int /*long*/ hwnd, int /*long*/ hdc, GC gc) {", "+\t/*", "+\t* Bug in Windows.  For some reason, PrintWindow()", "+\t* returns success but does nothing when it is called", "+\t* on a printer.  The fix is to just go directly to", "+\t* WM_PRINT in this case.", "+\t*/", "+\tboolean success = false;", "+\tif (!(OS.GetDeviceCaps(gc.handle, OS.TECHNOLOGY) == OS.DT_RASPRINTER)) {", "+\t\tsuccess = OS.PrintWindow (hwnd, hdc, 0);", "+\t}", "+\t", "+\t/*", "+\t* Bug in Windows.  For some reason, PrintWindow() fails", "+\t* when it is called on a push button.  The fix is to", "+\t* detect the failure and use WM_PRINT instead.  Note", "+\t* that WM_PRINT cannot be used all the time because it", "+\t* fails for browser controls when the browser has focus.", "+\t*/", "+\tif (!success) {", "+\t\tint flags = OS.PRF_CLIENT | OS.PRF_NONCLIENT | OS.PRF_ERASEBKGND | OS.PRF_CHILDREN;", "+\t\tOS.SendMessage (hwnd, OS.WM_PRINT, hdc, flags);", "+\t}"]}], "num": 28757}
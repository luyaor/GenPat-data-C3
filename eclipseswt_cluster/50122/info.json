{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ace7c70df8dff9b322f9f09ba1b23476", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "80fb7dd73ce92075ddf1ed3c184320ed", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "4ef51dfe2ffecc59d5fe9c7cb2f4cd3516b4c0b2", "commitAfterChange": "b582abcbb5af9e9e8a0d429cf605c4541967d6dc", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "diff": ["-\t}", "-\t/*", "-\t* Feature in the Macintosh.  Some controls call TrackControl() or", "-\t* HandleControlClick() to track the mouse.  Unfortunately, mouse move", "-\t* events and the mouse up events are consumed.  The fix is to call the", "-\t* default handler and send a fake mouse up when tracking is finished.", "-\t* ", "-\t* NOTE: No mouse move events are sent while tracking.  There is no", "-\t* fix for this at this time.", "-\t*/", "-\tdisplay.grabControl = null;", "-\tdisplay.runDeferredEvents ();", "-\ttracking = false;", "-\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "-\tif (tracking) {", "-\t\tif (OS.HIVIEW) {", "-\t\t\tpartCode = 0;", "-\t\t\tif (text.length () > 0 && labelHandle != 0) {", "-\t\t\t\tredrawWidget (labelHandle, false);", "-\t\t\t}", "-\t\t\tif (image != null && iconHandle != 0) {", "-\t\t\t\tOS.SetControlData (iconHandle, OS.kControlEntireControl, OS.kControlIconTransformTag, 2, new short [] {(short) 0});", "-\t\t\t\tredrawWidget (iconHandle, false);", "-\t\t\t}", "-\t\t}", "-\t\torg.eclipse.swt.internal.carbon.Point outPt = new org.eclipse.swt.internal.carbon.Point ();", "-\t\tOS.GetGlobalMouse (outPt);", "-\t\tRect rect = new Rect ();", "-\t\tint window = OS.GetControlOwner (handle);", "-\t\tint x, y;", "-\t\tif (OS.HIVIEW) {", "-\t\t\tCGPoint pt = new CGPoint ();", "-\t\t\tpt.x = outPt.h;", "-\t\t\tpt.y = outPt.v;", "-\t\t\tOS.HIViewConvertPoint (pt, 0, parent.handle);", "-\t\t\tx = (int) pt.x;", "-\t\t\ty = (int) pt.y;", "-\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowStructureRgn, rect);", "-\t\t} else {", "-\t\t\tOS.GetControlBounds (parent.handle, rect);", "-\t\t\tx = outPt.h - rect.left;", "-\t\t\ty = outPt.v - rect.top;", "-\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "-\t\t}", "-\t\tx -= rect.left;", "-\t\ty -=  rect.top;", "-\t\tshort [] button = new short [1];", "-\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button);", "-\t\tint chord = OS.GetCurrentEventButtonState ();", "-\t\tint modifiers = OS.GetCurrentEventKeyModifiers ();", "-\t\tparent.sendMouseEvent (SWT.MouseUp, button [0], display.clickCount, true, chord, (short)x, (short)y, modifiers);", "-\t}", "-\ttracking = false;", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "226df735df64bdefbde693dcb59938f0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Slider.java", "commitBeforeChange": "4ef51dfe2ffecc59d5fe9c7cb2f4cd3516b4c0b2", "commitAfterChange": "b582abcbb5af9e9e8a0d429cf605c4541967d6dc", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 13, "signatureBeforeChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "diff": ["-", "-\t/*", "-\t* Feature in the Macintosh.  Some controls call TrackControl() or", "-\t* HandleControlClick() to track the mouse.  Unfortunately, mouse move", "-\t* events and the mouse up events are consumed.  The fix is to call the", "-\t* default handler and send a fake mouse up when tracking is finished.", "-\t* ", "-\t* NOTE: No mouse move events are sent while tracking.  There is no", "-\t* fix for this at this time.", "-\t*/", "-\tdisplay.grabControl = null;", "-\tdisplay.runDeferredEvents ();", "-\tdragging = tracking = false;", "+\tdragging = false;", "-\tif (tracking) {", "-\t\torg.eclipse.swt.internal.carbon.Point outPt = new org.eclipse.swt.internal.carbon.Point ();", "-\t\tOS.GetGlobalMouse (outPt);", "-\t\tRect rect = new Rect ();", "-\t\tint window = OS.GetControlOwner (handle);", "-\t\tint x, y;", "-\t\tif (OS.HIVIEW) {", "-\t\t\tCGPoint pt = new CGPoint ();", "-\t\t\tpt.x = outPt.h;", "-\t\t\tpt.y = outPt.v;", "-\t\t\tOS.HIViewConvertPoint (pt, 0, handle);", "-\t\t\tx = (int) pt.x;", "-\t\t\ty = (int) pt.y;", "-\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowStructureRgn, rect);", "-\t\t} else {", "-\t\t\tOS.GetControlBounds (handle, rect);", "-\t\t\tx = outPt.h - rect.left;", "-\t\t\ty = outPt.v - rect.top;", "-\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "-\t\t}", "-\t\tx -= rect.left;", "-\t\ty -=  rect.top;", "-\t\tshort [] button = new short [1];", "-\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button);", "-\t\tint chord = OS.GetCurrentEventButtonState ();", "-\t\tint modifiers = OS.GetCurrentEventKeyModifiers ();", "-\t\tsendMouseEvent (SWT.MouseUp, button [0], display.clickCount, true, chord, (short)x, (short)y, modifiers);", "-\t}", "-\ttracking = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "deb0d43aa09f5dcb978d9e76ab5bfcd0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "9cc053d556a94aaf25144992ddf0abdf8398b3f4", "commitAfterChange": "981f2e38ad5b71e9d71d5276dfd16a4ea80c1666", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 92, "signatureBeforeChange": "\t  int kEventControlTrack (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "\t  int kEventControlTrack (int nextHandler, int theEvent, int userData)", "diff": ["-\tint result = super.kEventControlTrack (nextHandler, theEvent, userData);", "-\tif (result == OS.noErr) return result;", "-\t* Feature in the Macintosh.  Some controls call TrackControl() to track", "-\t* the mouse.  Unfortunately, mouse move events and the mouse up events are", "-\t* consumed.  The fix is to call the default handler and send a fake mouse up", "-\t* when tracking is finished if the mouse event was consumed.", "-\t* ", "-\t* NOTE: No mouse move events are sent while tracking.  There is no", "-\t* fix for this at this time.", "+\t* Feature in the Macintosh.  The default handler of kEventControlTrack", "+\t* calls TrackControl() which consumes key and mouse events until the", "+\t* tracking is canceled.  The fix is to send those events from the", "+\t* action proc of the widget by diffing the mouse and modifier keys", "+\t* state.", "-\tdisplay.grabControl = null;", "-\tint oldChord = OS.GetCurrentEventButtonState ();", "-\tresult = OS.CallNextEventHandler (nextHandler, theEvent);", "-\tint newChord = OS.GetCurrentEventButtonState ();", "-\tif (newChord != oldChord) {", "-\t\tint [] masks = {OS.kEventClassMouse, OS.kEventMouseUp};", "-\t\tint mouseUpEvent = OS.AcquireFirstMatchingEventInQueue (OS.GetCurrentEventQueue (), masks.length, masks, OS.kEventQueueOptionsNone);", "-\t\tif (mouseUpEvent != 0) {", "-\t\t\tOS.ReleaseEvent (mouseUpEvent);", "-\t\t} else {", "-\t\t\torg.eclipse.swt.internal.carbon.Point outPt = new org.eclipse.swt.internal.carbon.Point ();", "-\t\t\tOS.GetGlobalMouse (outPt);", "-\t\t\tRect rect = new Rect ();", "-\t\t\tint window = OS.GetControlOwner (handle);", "-\t\t\tint x, y;", "-\t\t\tif (OS.HIVIEW) {", "-\t\t\t\tCGPoint pt = new CGPoint ();", "-\t\t\t\tpt.x = outPt.h;", "-\t\t\t\tpt.y = outPt.v;", "-\t\t\t\tOS.HIViewConvertPoint (pt, 0, handle);", "-\t\t\t\tx = (int) pt.x;", "-\t\t\t\ty = (int) pt.y;", "-\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowStructureRgn, rect);", "-\t\t\t} else {", "-\t\t\t\tOS.GetControlBounds (handle, rect);", "-\t\t\t\tx = outPt.h - rect.left;", "-\t\t\t\ty = outPt.v - rect.top;", "-\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "-\t\t\t}", "-\t\t\tx -= rect.left;", "-\t\t\ty -=  rect.top;", "-\t\t\tshort [] button = new short [1];", "-\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button);", "-\t\t\tint modifiers = OS.GetCurrentEventKeyModifiers ();", "-\t\t\tsendMouseEvent (SWT.MouseUp, button [0], display.clickCount, false, newChord, (short)x, (short)y, modifiers);", "-\t\t}", "-\t}", "+\tdisplay.lastState = OS.GetCurrentEventButtonState ();", "+\tdisplay.lastModifiers = OS.GetCurrentEventKeyModifiers ();", "+\tdisplay.grabControl = this;", "+\tint result = super.kEventControlTrack (nextHandler, theEvent, userData);", "+\tdisplay.grabControl = null;", "+\tsendTrackEvents ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c1848abb5100e9bea59722b9c105889", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "4ef51dfe2ffecc59d5fe9c7cb2f4cd3516b4c0b2", "commitAfterChange": "b582abcbb5af9e9e8a0d429cf605c4541967d6dc", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "diff": ["-\t/*", "-\t* Feature in the Macintosh.  Some controls call TrackControl() or", "-\t* HandleControlClick() to track the mouse.  Unfortunately, mouse move", "-\t* events and the mouse up events are consumed.  The fix is to call the", "-\t* default handler and send a fake mouse up when tracking is finished.", "-\t* ", "-\t* NOTE: No mouse move events are sent while tracking.  There is no", "-\t* fix for this at this time.", "-\t*/", "-\tif (wasExpanded) {", "-\t\torg.eclipse.swt.internal.carbon.Point outPt = new org.eclipse.swt.internal.carbon.Point ();", "-\t\tOS.GetGlobalMouse (outPt);", "-\t\tRect rect = new Rect ();", "-\t\tint window = OS.GetControlOwner (handle);", "-\t\tint x, y;", "-\t\tif (OS.HIVIEW) {", "-\t\t\tCGPoint pt = new CGPoint ();", "-\t\t\tpt.x = outPt.h;", "-\t\t\tpt.y = outPt.v;", "-\t\t\tOS.HIViewConvertPoint (pt, 0, handle);", "-\t\t\tx = (int) pt.x;", "-\t\t\ty = (int) pt.y;", "-\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowStructureRgn, rect);", "-\t\t} else {", "-\t\t\tOS.GetControlBounds (handle, rect);", "-\t\t\tx = outPt.h - rect.left;", "-\t\t\ty = outPt.v - rect.top;", "-\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "-\t\t}", "-\t\tx -= rect.left;", "-\t\ty -=  rect.top;", "-\t\tshort [] button = new short [1];", "-\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button);", "-\t\tint chord = OS.GetCurrentEventButtonState ();", "-\t\tint modifiers = OS.GetCurrentEventKeyModifiers ();", "-\t\tsendMouseEvent (SWT.MouseUp, button [0], display.clickCount, true, chord, (short)x, (short)y, modifiers);", "-\t}"]}], "num": 50122}
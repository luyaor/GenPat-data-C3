{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e229d585d043e9e32a469e52d01d540f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fd8a02866103c44655a9c8eaead191b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "4a12d1d6eea88c5ee824f832639afbd434b4c67f", "commitAfterChange": "cb6c1213faecee5a06dc536c9d7727408f52370a", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": "  String toolTipText (NMTTDISPINFO hdr)", "signatureAfterChange": "  String toolTipText (NMTTDISPINFO hdr)", "diff": ["-\t\tint pos = OS.GetMessagePos ();", "-\t\tPOINT pt = new POINT();", "-\t\tpt.x = (short) (pos & 0xFFFF);", "-\t\tpt.y = (short) (pos >> 16);", "-\t\tOS.ScreenToClient (handle, pt);", "-\t\tTVHITTESTINFO lpht = new TVHITTESTINFO ();", "-\t\tlpht.x = pt.x;", "-\t\tlpht.y = pt.y;", "-\t\tOS.SendMessage (handle, OS.TVM_HITTEST, 0, lpht);", "-\t\tif (lpht.hItem != 0) {", "-\t\t\tint hDC = OS.GetDC (handle);", "-\t\t\tint oldFont = 0, newFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "-\t\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "-\t\t\tRECT rect = new RECT ();", "-\t\t\tOS.GetClientRect (hwndParent, rect);", "-\t\t\tOS.MapWindowPoints (hwndParent, handle, rect, 2);", "-\t\t\tTreeItem item = _getItem (lpht.hItem);", "-\t\t\tString text = null;", "-\t\t\tint index = 0, count = Math.max (1, OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0));", "-\t\t\tint [] order = new int [count];", "-\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETORDERARRAY, count, order);", "-\t\t\twhile (index < count) {", "-\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [order [index]] : -1;", "-\t\t\t\tif (hFont == -1) hFont = item.font;", "-\t\t\t\tif (hFont != -1) hFont = OS.SelectObject (hDC, hFont);", "-\t\t\t\tRECT cellRect = item.getBounds (order [index], true, false, true, false, true, hDC);", "-\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "-\t\t\t\tif (cellRect.left > rect.right) break;", "-\t\t\t\tcellRect.right = Math.min (cellRect.right, rect.right);", "-\t\t\t\tif (OS.PtInRect (cellRect, pt)) {", "-\t\t\t\t\tRECT textRect = item.getBounds (order [index], true, false, false, false, false, hDC);", "-\t\t\t\t\tif (textRect.right > cellRect.right) {", "-\t\t\t\t\t\tif (order [index] == 0) {", "-\t\t\t\t\t\t\ttext = item.text;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tString[] strings = item.strings;", "-\t\t\t\t\t\t\tif (strings != null) text = strings [order [index]];", "+\t\tif (toolTipText != null) return \"\";", "+\t\tif (!hooks (SWT.MeasureItem) && !hooks (SWT.EraseItem) && !hooks (SWT.PaintItem)) {", "+\t\t\tint pos = OS.GetMessagePos ();", "+\t\t\tPOINT pt = new POINT();", "+\t\t\tpt.x = (short) (pos & 0xFFFF);", "+\t\t\tpt.y = (short) (pos >> 16);", "+\t\t\tOS.ScreenToClient (handle, pt);", "+\t\t\tTVHITTESTINFO lpht = new TVHITTESTINFO ();", "+\t\t\tlpht.x = pt.x;", "+\t\t\tlpht.y = pt.y;", "+\t\t\tOS.SendMessage (handle, OS.TVM_HITTEST, 0, lpht);", "+\t\t\tif (lpht.hItem != 0) {", "+\t\t\t\tint hDC = OS.GetDC (handle);", "+\t\t\t\tint oldFont = 0, newFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "+\t\t\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "+\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\tOS.GetClientRect (hwndParent, rect);", "+\t\t\t\tOS.MapWindowPoints (hwndParent, handle, rect, 2);", "+\t\t\t\tTreeItem item = _getItem (lpht.hItem);", "+\t\t\t\tString text = null;", "+\t\t\t\tint index = 0, count = Math.max (1, OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0));", "+\t\t\t\tint [] order = new int [count];", "+\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETORDERARRAY, count, order);", "+\t\t\t\twhile (index < count) {", "+\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [order [index]] : -1;", "+\t\t\t\t\tif (hFont == -1) hFont = item.font;", "+\t\t\t\t\tif (hFont != -1) hFont = OS.SelectObject (hDC, hFont);", "+\t\t\t\t\tRECT cellRect = item.getBounds (order [index], true, false, true, false, true, hDC);", "+\t\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "+\t\t\t\t\tif (cellRect.left > rect.right) break;", "+\t\t\t\t\tcellRect.right = Math.min (cellRect.right, rect.right);", "+\t\t\t\t\tif (OS.PtInRect (cellRect, pt)) {", "+\t\t\t\t\t\tRECT textRect = item.getBounds (order [index], true, false, false, false, false, hDC);", "+\t\t\t\t\t\tif (textRect.right > cellRect.right) {", "+\t\t\t\t\t\t\tif (order [index] == 0) {", "+\t\t\t\t\t\t\t\ttext = item.text;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tString[] strings = item.strings;", "+\t\t\t\t\t\t\t\tif (strings != null) text = strings [order [index]];", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\tbreak;", "+\t\t\t\t\tindex++;", "-\t\t\t\tindex++;", "+\t\t\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "+\t\t\t\tOS.ReleaseDC (handle, hDC);", "+\t\t\t\tif (text != null) return text;", "-\t\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "-\t\t\tOS.ReleaseDC (handle, hDC);", "-\t\t\tif (text != null) return text;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3f6538062d361e4bca3ad8e312f87ba1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "d60307042554a2ad80509163fd1d15e5566b488d", "commitAfterChange": "501cddef55d98c472a410dbb933c0adba1cf9644", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 28, "signatureBeforeChange": "  void destroyItem (TreeColumn column)", "signatureAfterChange": "  void destroyItem (TreeColumn column)", "diff": ["-\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-\t\tbits &= ~OS.TVS_NOHSCROLL;", "-\t\tOS.SetWindowLong (handle, OS.GWL_STYLE, bits);", "-\t\tOS.InvalidateRect (handle, null, true);", "+\t\tscrollWidth = 0;", "+\t\tif (!hooks (SWT.MeasureItem) && !hooks (SWT.EraseItem) && !hooks (SWT.PaintItem)) {", "+\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\t\tbits &= ~OS.TVS_NOHSCROLL;", "+\t\t\tOS.SetWindowLong (handle, OS.GWL_STYLE, bits);", "+\t\t\tOS.InvalidateRect (handle, null, true);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0d9b8590b6470fd0bda20efbc3a3d1b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "5712f0ff091861c715a3f41d4afa78f50d98e31c", "commitAfterChange": "db5070f4a4104c5e47a8cd2bdd5b5f06b11fcd6f", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 94, "signatureBeforeChange": "  void setTableEmpty ()", "signatureAfterChange": "  void setTableEmpty ()", "diff": ["-\tif ((style & SWT.VIRTUAL) == 0) customDraw = false;", "+\tif ((style & SWT.VIRTUAL) == 0) {", "+\t\tif (!hooks (SWT.MeasureItem) && !hooks (SWT.EraseItem) && !hooks (SWT.PaintItem)) {", "+\t\t\tcustomDraw = false;", "+\t\t}", "+\t}", "+\tignoreItemHeight = false;"]}], "num": 16789}
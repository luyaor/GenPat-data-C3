{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b0b5993c2ad6c242502e4de1099a308c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b9e4d9771b209f7064fb2c25cd2f111", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "afd1a95e7721581f00839d502a73cac24f908daf", "commitAfterChange": "dfc9c2c27083a19c0dc0cbc4bc9dda0223b753d5", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " void drawTabArea(Event event)", "signatureAfterChange": " void drawTabArea(Event event)", "diff": ["-\t// Fill in the empty spaces to the right and left of the tabs", "-\tif (single) {", "-\t\tint[] shapeLeft = null;", "-\t\tint[] shapeRight = null;", "-\t\tif (onBottom) { // single with tabs on bototm", "-\t\t\t//left side", "-\t\t\tshapeLeft = new int[BOTTOM_LEFT_CORNER.length+6];", "-\t\t\tint index = 0;", "-\t\t\tint width2 = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "-\t\t\tshapeLeft[index++] = x;", "-\t\t\tshapeLeft[index++] = y;", "-\t\t\tfor (int i = 0; i < BOTTOM_LEFT_CORNER.length/2; i++) {", "-\t\t\t\tshapeLeft[index++] = x+BOTTOM_LEFT_CORNER[2*i];", "-\t\t\t\tshapeLeft[index++] = y+height+1+BOTTOM_LEFT_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeLeft[index++] = x+width2;", "-\t\t\tshapeLeft[index++] = y+height+1;", "-\t\t\tshapeLeft[index++] = x+width2;", "-\t\t\tshapeLeft[index++] = y;", "-\t\t\t//right side", "-\t\t\tint x2 = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "-\t\t\twidth2 = size.x - borderRight - x2;", "-\t\t\tif (borderLeft == 0) width2 += 1;", "-\t\t\tshapeRight = new int[BOTTOM_RIGHT_CORNER.length+6];", "-\t\t\tindex = 0;", "-\t\t\tshapeRight[index++] = x2;", "-\t\t\tshapeRight[index++] = y;", "-\t\t\tshapeRight[index++] = x2;", "-\t\t\tshapeRight[index++] = y+height+1;", "-\t\t\tfor (int i = 0; i < BOTTOM_RIGHT_CORNER.length/2; i++) {", "-\t\t\t\tshapeRight[index++] = x2+width2+BOTTOM_RIGHT_CORNER[2*i];", "-\t\t\t\tshapeRight[index++] = y+height+1+BOTTOM_RIGHT_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeRight[index++] = x2+width2;", "-\t\t\tshapeRight[index++] = y;", "-\t\t} else { // single with tabs on top", "-\t\t\t//left side", "-\t\t\tshapeLeft = new int[TOP_LEFT_CORNER.length+6];", "-\t\t\tint index = 0;", "-\t\t\tint width2 = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "-\t\t\tshapeLeft[index++] = x;", "-\t\t\tshapeLeft[index++] = y+height+1;", "-\t\t\tfor (int i = 0; i < TOP_LEFT_CORNER.length/2; i++) {", "-\t\t\t\tshapeLeft[index++] = x+TOP_LEFT_CORNER[2*i];", "-\t\t\t\tshapeLeft[index++] = y+TOP_LEFT_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeLeft[index++] = x+width2;", "-\t\t\tshapeLeft[index++] = y;", "-\t\t\tshapeLeft[index++] = x+width2;", "-\t\t\tshapeLeft[index++] = y+height+1;", "-\t\t\t//right side", "-\t\t\tint x2 = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "-\t\t\twidth2 = size.x - borderRight - x2;", "-\t\t\tif (borderLeft == 0) width2 += 1;", "-\t\t\tshapeRight = new int[TOP_RIGHT_CORNER.length+6];", "-\t\t\tindex = 0;", "-\t\t\tshapeRight[index++] = x2;", "-\t\t\tshapeRight[index++] = y+height+1;", "-\t\t\tshapeRight[index++] = x2;", "-\t\t\tshapeRight[index++] = y;", "-\t\t\tfor (int i = 0; i < TOP_RIGHT_CORNER.length/2; i++) {", "-\t\t\t\tshapeRight[index++] = x2+width2+TOP_RIGHT_CORNER[2*i];", "-\t\t\t\tshapeRight[index++] = y+TOP_RIGHT_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeRight[index++] = x2+width2;", "-\t\t\tshapeRight[index++] = y+height+1;", "+\t// Draw Tab Header", "+\tif (onBottom) {", "+\t\tshape = new int[BOTTOM_LEFT_CORNER.length + BOTTOM_RIGHT_CORNER.length + 4];", "+\t\tint index = 0;", "+\t\tshape[index++] = x;", "+\t\tshape[index++] = y-HIGHLIGHT_HEADER-1;", "+\t\tfor (int i = 0; i < BOTTOM_LEFT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+BOTTOM_LEFT_CORNER[2*i];", "+\t\t\tshape[index++] = y+height+BOTTOM_LEFT_CORNER[2*i+1];", "+\t\t\tif (borderLeft == 0) shape[index-1] += 1;", "-\t\tdrawBackground(gc, shapeLeft, false);", "-\t\tdrawBackground(gc, shapeRight, false);", "-\t} else { // SWT.MULTI", "-\t\t// Fill in the empty space to the right of the last tab", "-\t\tCTabItem lastItem = items[items.length -1];", "-\t\tint edge = lastItem.x+lastItem.width;", "-\t\tif (edge < size.x) {", "-\t\t\tshape = null;", "-\t\t\tif (onBottom) {", "-\t\t\t\tshape = new int[BOTTOM_RIGHT_CORNER.length+6];", "-\t\t\t\tint index = 0;", "-\t\t\t\tshape[index++] = edge;", "-\t\t\t\tshape[index++] = size.y - borderBottom - tabHeight - 1;", "-\t\t\t\tshape[index++] = edge;", "-\t\t\t\tshape[index++] = size.y - borderBottom;", "-\t\t\t\tfor (int i = 0; i < BOTTOM_RIGHT_CORNER.length/2; i++) {", "-\t\t\t\t\tshape[index++] = size.x- borderRight + 1+BOTTOM_RIGHT_CORNER[2*i];", "-\t\t\t\t\tshape[index++] = size.y - borderBottom + BOTTOM_RIGHT_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tshape[index++] = size.x - borderRight + 1;", "-\t\t\t\tshape[index++] = size.y - borderBottom - tabHeight - 1;", "-\t\t\t} else {", "-\t\t\t\tshape = new int[TOP_RIGHT_CORNER.length+6];", "-\t\t\t\tint index = 0;", "-\t\t\t\tshape[index++] = edge;", "-\t\t\t\tshape[index++] = borderTop + tabHeight + 1;", "-\t\t\t\tshape[index++] = edge;", "-\t\t\t\tshape[index++] = borderTop;", "-\t\t\t\tfor (int i = 0; i < TOP_RIGHT_CORNER.length/2; i++) {", "-\t\t\t\t\tshape[index++] = size.x - borderRight + 1+TOP_RIGHT_CORNER[2*i];", "-\t\t\t\t\tshape[index++] = borderTop+TOP_RIGHT_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tshape[index++] = size.x - borderRight + 1;", "-\t\t\t\tshape[index++] = borderTop + tabHeight + 1;", "-\t\t\t}", "-\t\t\tdrawBackground(gc, shape, false);", "+\t\tfor (int i = 0; i < BOTTOM_RIGHT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+width+BOTTOM_RIGHT_CORNER[2*i];", "+\t\t\tshape[index++] = y+height+BOTTOM_RIGHT_CORNER[2*i+1];", "+\t\t\tif (borderLeft == 0) shape[index-1] += 1;", "+\t\tshape[index++] = x+width;", "+\t\tshape[index++] = y-HIGHLIGHT_HEADER-1;", "+\t} else {", "+\t\tshape = new int[TOP_LEFT_CORNER.length + TOP_RIGHT_CORNER.length + 4];", "+\t\tint index = 0;", "+\t\tshape[index++] = x;", "+\t\tshape[index++] = y+height+HIGHLIGHT_HEADER+1;", "+\t\tfor (int i = 0; i < TOP_LEFT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+TOP_LEFT_CORNER[2*i];", "+\t\t\tshape[index++] = y+TOP_LEFT_CORNER[2*i+1];", "+\t\t}", "+\t\tfor (int i = 0; i < TOP_RIGHT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+width+TOP_RIGHT_CORNER[2*i];", "+\t\t\tshape[index++] = y+TOP_RIGHT_CORNER[2*i+1];", "+\t\t}", "+\t\tshape[index++] = x+width;", "+\t\tshape[index++] = y+height+HIGHLIGHT_HEADER+1;", "+\t}", "+\t// Fill in background", "+\tdrawBackground(gc, shape, false);", "+\t// Fill in parent background for non-rectangular shape", "+\tRegion r = new Region();", "+\tr.add(new Rectangle(x, y, width + 1, height + 1));", "+\tr.subtract(shape);", "+\tgc.setBackground(getParent().getBackground());", "+\tfillRegion(gc, r);", "+\tr.dispose();", "+\t// Draw border line", "+\tif (borderLeft > 0) {", "+\t\tRGB inside = getBackground().getRGB();", "+\t\tif (bgImage != null || (gradientColors != null && gradientColors.length > 1)) inside = null;", "+\t\tRGB outside = getParent().getBackground().getRGB();", "+\t\tantialias(shape, borderColor.getRGB(), inside, outside, gc);", "+\t\tgc.setForeground(borderColor);", "+\t\tgc.drawPolyline(shape);", "-\t}", "+\t}\t", "-\t\tint x2 = borderLeft;", "-\t\tint y2 = onBottom ? size.y - borderBottom - tabHeight - HIGHLIGHT_HEADER : borderTop + tabHeight + 1;", "-\t\tint width2 = size.x - borderLeft - borderRight;", "-\t\tint height2 = HIGHLIGHT_HEADER - 1;", "-\t\tgc.setBackground(getBackground());", "-\t\tgc.fillRectangle(x2, y2, width2, height2);", "-\t\tx2 = borderLeft;", "-\t\ty2 = (onBottom) ? size.y - borderBottom - tabHeight - 1 : borderTop + tabHeight;", "+\t\tint x1 = borderLeft;", "+\t\tint y1 = (onBottom) ? size.y - borderBottom - tabHeight - 1 : borderTop + tabHeight;", "+\t\tint x2 = size.x - borderRight;", "-\t\tgc.drawLine(x2, y2, x2 + width2, y2);", "+\t\tgc.drawLine(x1, y1, x2, y1);", "+\t// Draw Buttons", "-\t// draw insertion mark", "+\t// Draw insertion mark", "-", "-\t\t", "-\t// draw outside border area", "-\tif (onBottom) {", "-\t\tshape = new int[BOTTOM_LEFT_CORNER.length + BOTTOM_RIGHT_CORNER.length + 4];", "-\t\tint index = 0;", "-\t\tshape[index++] = x;", "-\t\tshape[index++] = y;", "-\t\tfor (int i = 0; i < BOTTOM_LEFT_CORNER.length/2; i++) {", "-\t\t\tshape[index++] = x+BOTTOM_LEFT_CORNER[2*i];", "-\t\t\tshape[index++] = y+height+BOTTOM_LEFT_CORNER[2*i+1];", "-\t\t\tif (borderLeft == 0) shape[index-1] += 1;", "-\t\t}", "-\t\tfor (int i = 0; i < BOTTOM_RIGHT_CORNER.length/2; i++) {", "-\t\t\tshape[index++] = x+width+BOTTOM_RIGHT_CORNER[2*i];", "-\t\t\tshape[index++] = y+height+BOTTOM_RIGHT_CORNER[2*i+1];", "-\t\t\tif (borderLeft == 0) shape[index-1] += 1;", "-\t\t}", "-\t\tshape[index++] = x+width;", "-\t\tshape[index++] = y-1;", "-\t} else {", "-\t\tshape = new int[TOP_LEFT_CORNER.length + TOP_RIGHT_CORNER.length + 4];", "-\t\tint index = 0;", "-\t\tshape[index++] = x;", "-\t\tshape[index++] = y+height+1;", "-\t\tfor (int i = 0; i < TOP_LEFT_CORNER.length/2; i++) {", "-\t\t\tshape[index++] = x+TOP_LEFT_CORNER[2*i];", "-\t\t\tshape[index++] = y+TOP_LEFT_CORNER[2*i+1];", "-\t\t}", "-\t\tfor (int i = 0; i < TOP_RIGHT_CORNER.length/2; i++) {", "-\t\t\tshape[index++] = x+width+TOP_RIGHT_CORNER[2*i];", "-\t\t\tshape[index++] = y+TOP_RIGHT_CORNER[2*i+1];", "-\t\t}", "-\t\tshape[index++] = x+width;", "-\t\tshape[index++] = y+height+1;", "-\t}", "-\t// fill in space outside border line with parent background", "-\tRegion r = new Region();", "-\tr.add(new Rectangle(x, y, width + 1, height + 1));", "-\tr.subtract(shape);", "-\tgc.setBackground(getParent().getBackground());", "-\tfillRegion(gc, r);", "-\tr.dispose();", "-\t", "-\t// draw border line", "-\tif (borderLeft > 0) {", "-\t\tRGB inside = getBackground().getRGB();", "-\t\tif (bgImage != null || (gradientColors != null && gradientColors.length > 1 && !gradientVertical)) inside = null;", "-\t\tRGB outside = getParent().getBackground().getRGB();", "-\t\tantialias(shape, borderColor.getRGB(), inside, outside, gc);", "-\t\tgc.setForeground(borderColor);", "-\t\tgc.drawPolyline(shape);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baee588481429f0e85a979a401084170", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "afd1a95e7721581f00839d502a73cac24f908daf", "commitAfterChange": "dfc9c2c27083a19c0dc0cbc4bc9dda0223b753d5", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " void drawTabArea(Event event)", "signatureAfterChange": " void drawTabArea(Event event)", "diff": ["-\t// Fill in the empty spaces to the right and left of the tabs", "-\tif (single) {", "-\t\tint[] shapeLeft = null;", "-\t\tint[] shapeRight = null;", "-\t\tif (onBottom) { // single with tabs on bototm", "-\t\t\t//left side", "-\t\t\tshapeLeft = new int[BOTTOM_LEFT_CORNER.length+6];", "-\t\t\tint index = 0;", "-\t\t\tint width2 = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "-\t\t\tshapeLeft[index++] = x;", "-\t\t\tshapeLeft[index++] = y;", "-\t\t\tfor (int i = 0; i < BOTTOM_LEFT_CORNER.length/2; i++) {", "-\t\t\t\tshapeLeft[index++] = x+BOTTOM_LEFT_CORNER[2*i];", "-\t\t\t\tshapeLeft[index++] = y+height+1+BOTTOM_LEFT_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeLeft[index++] = x+width2;", "-\t\t\tshapeLeft[index++] = y+height+1;", "-\t\t\tshapeLeft[index++] = x+width2;", "-\t\t\tshapeLeft[index++] = y;", "-\t\t\t//right side", "-\t\t\tint x2 = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "-\t\t\twidth2 = size.x - borderRight - x2;", "-\t\t\tif (borderLeft == 0) width2 += 1;", "-\t\t\tshapeRight = new int[BOTTOM_RIGHT_CORNER.length+6];", "-\t\t\tindex = 0;", "-\t\t\tshapeRight[index++] = x2;", "-\t\t\tshapeRight[index++] = y;", "-\t\t\tshapeRight[index++] = x2;", "-\t\t\tshapeRight[index++] = y+height+1;", "-\t\t\tfor (int i = 0; i < BOTTOM_RIGHT_CORNER.length/2; i++) {", "-\t\t\t\tshapeRight[index++] = x2+width2+BOTTOM_RIGHT_CORNER[2*i];", "-\t\t\t\tshapeRight[index++] = y+height+1+BOTTOM_RIGHT_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeRight[index++] = x2+width2;", "-\t\t\tshapeRight[index++] = y;", "-\t\t} else { // single with tabs on top", "-\t\t\t//left side", "-\t\t\tshapeLeft = new int[TOP_LEFT_CORNER.length+6];", "-\t\t\tint index = 0;", "-\t\t\tint width2 = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "-\t\t\tshapeLeft[index++] = x;", "-\t\t\tshapeLeft[index++] = y+height+1;", "-\t\t\tfor (int i = 0; i < TOP_LEFT_CORNER.length/2; i++) {", "-\t\t\t\tshapeLeft[index++] = x+TOP_LEFT_CORNER[2*i];", "-\t\t\t\tshapeLeft[index++] = y+TOP_LEFT_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeLeft[index++] = x+width2;", "-\t\t\tshapeLeft[index++] = y;", "-\t\t\tshapeLeft[index++] = x+width2;", "-\t\t\tshapeLeft[index++] = y+height+1;", "-\t\t\t//right side", "-\t\t\tint x2 = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "-\t\t\twidth2 = size.x - borderRight - x2;", "-\t\t\tif (borderLeft == 0) width2 += 1;", "-\t\t\tshapeRight = new int[TOP_RIGHT_CORNER.length+6];", "-\t\t\tindex = 0;", "-\t\t\tshapeRight[index++] = x2;", "-\t\t\tshapeRight[index++] = y+height+1;", "-\t\t\tshapeRight[index++] = x2;", "-\t\t\tshapeRight[index++] = y;", "-\t\t\tfor (int i = 0; i < TOP_RIGHT_CORNER.length/2; i++) {", "-\t\t\t\tshapeRight[index++] = x2+width2+TOP_RIGHT_CORNER[2*i];", "-\t\t\t\tshapeRight[index++] = y+TOP_RIGHT_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeRight[index++] = x2+width2;", "-\t\t\tshapeRight[index++] = y+height+1;", "+\t// Draw Tab Header", "+\tif (onBottom) {", "+\t\tshape = new int[BOTTOM_LEFT_CORNER.length + BOTTOM_RIGHT_CORNER.length + 4];", "+\t\tint index = 0;", "+\t\tshape[index++] = x;", "+\t\tshape[index++] = y-HIGHLIGHT_HEADER-1;", "+\t\tfor (int i = 0; i < BOTTOM_LEFT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+BOTTOM_LEFT_CORNER[2*i];", "+\t\t\tshape[index++] = y+height+BOTTOM_LEFT_CORNER[2*i+1];", "+\t\t\tif (borderLeft == 0) shape[index-1] += 1;", "-\t\tdrawBackground(gc, shapeLeft, false);", "-\t\tdrawBackground(gc, shapeRight, false);", "-\t} else { // SWT.MULTI", "-\t\t// Fill in the empty space to the right of the last tab", "-\t\tCTabItem2 lastItem = items[items.length -1];", "-\t\tint edge = lastItem.x+lastItem.width;", "-\t\tif (edge < size.x) {", "-\t\t\tshape = null;", "-\t\t\tif (onBottom) {", "-\t\t\t\tshape = new int[BOTTOM_RIGHT_CORNER.length+6];", "-\t\t\t\tint index = 0;", "-\t\t\t\tshape[index++] = edge;", "-\t\t\t\tshape[index++] = size.y - borderBottom - tabHeight - 1;", "-\t\t\t\tshape[index++] = edge;", "-\t\t\t\tshape[index++] = size.y - borderBottom;", "-\t\t\t\tfor (int i = 0; i < BOTTOM_RIGHT_CORNER.length/2; i++) {", "-\t\t\t\t\tshape[index++] = size.x- borderRight + 1+BOTTOM_RIGHT_CORNER[2*i];", "-\t\t\t\t\tshape[index++] = size.y - borderBottom + BOTTOM_RIGHT_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tshape[index++] = size.x - borderRight + 1;", "-\t\t\t\tshape[index++] = size.y - borderBottom - tabHeight - 1;", "-\t\t\t} else {", "-\t\t\t\tshape = new int[TOP_RIGHT_CORNER.length+6];", "-\t\t\t\tint index = 0;", "-\t\t\t\tshape[index++] = edge;", "-\t\t\t\tshape[index++] = borderTop + tabHeight + 1;", "-\t\t\t\tshape[index++] = edge;", "-\t\t\t\tshape[index++] = borderTop;", "-\t\t\t\tfor (int i = 0; i < TOP_RIGHT_CORNER.length/2; i++) {", "-\t\t\t\t\tshape[index++] = size.x - borderRight + 1+TOP_RIGHT_CORNER[2*i];", "-\t\t\t\t\tshape[index++] = borderTop+TOP_RIGHT_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tshape[index++] = size.x - borderRight + 1;", "-\t\t\t\tshape[index++] = borderTop + tabHeight + 1;", "-\t\t\t}", "-\t\t\tdrawBackground(gc, shape, false);", "+\t\tfor (int i = 0; i < BOTTOM_RIGHT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+width+BOTTOM_RIGHT_CORNER[2*i];", "+\t\t\tshape[index++] = y+height+BOTTOM_RIGHT_CORNER[2*i+1];", "+\t\t\tif (borderLeft == 0) shape[index-1] += 1;", "+\t\tshape[index++] = x+width;", "+\t\tshape[index++] = y-HIGHLIGHT_HEADER-1;", "+\t} else {", "+\t\tshape = new int[TOP_LEFT_CORNER.length + TOP_RIGHT_CORNER.length + 4];", "+\t\tint index = 0;", "+\t\tshape[index++] = x;", "+\t\tshape[index++] = y+height+HIGHLIGHT_HEADER+1;", "+\t\tfor (int i = 0; i < TOP_LEFT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+TOP_LEFT_CORNER[2*i];", "+\t\t\tshape[index++] = y+TOP_LEFT_CORNER[2*i+1];", "+\t\t}", "+\t\tfor (int i = 0; i < TOP_RIGHT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+width+TOP_RIGHT_CORNER[2*i];", "+\t\t\tshape[index++] = y+TOP_RIGHT_CORNER[2*i+1];", "+\t\t}", "+\t\tshape[index++] = x+width;", "+\t\tshape[index++] = y+height+HIGHLIGHT_HEADER+1;", "+\t}", "+\t// Fill in background", "+\tdrawBackground(gc, shape, false);", "+\t// Fill in parent background for non-rectangular shape", "+\tRegion r = new Region();", "+\tr.add(new Rectangle(x, y, width + 1, height + 1));", "+\tr.subtract(shape);", "+\tgc.setBackground(getParent().getBackground());", "+\tfillRegion(gc, r);", "+\tr.dispose();", "+\t// Draw border line", "+\tif (borderLeft > 0) {", "+\t\tRGB inside = getBackground().getRGB();", "+\t\tif (bgImage != null || (gradientColors != null && gradientColors.length > 1)) inside = null;", "+\t\tRGB outside = getParent().getBackground().getRGB();", "+\t\tantialias(shape, borderColor.getRGB(), inside, outside, gc);", "+\t\tgc.setForeground(borderColor);", "+\t\tgc.drawPolyline(shape);", "-\t}", "+\t}\t", "-\t\tint x2 = borderLeft;", "-\t\tint y2 = onBottom ? size.y - borderBottom - tabHeight - HIGHLIGHT_HEADER : borderTop + tabHeight + 1;", "-\t\tint width2 = size.x - borderLeft - borderRight;", "-\t\tint height2 = HIGHLIGHT_HEADER - 1;", "-\t\tgc.setBackground(getBackground());", "-\t\tgc.fillRectangle(x2, y2, width2, height2);", "-\t\tx2 = borderLeft;", "-\t\ty2 = (onBottom) ? size.y - borderBottom - tabHeight - 1 : borderTop + tabHeight;", "+\t\tint x1 = borderLeft;", "+\t\tint y1 = (onBottom) ? size.y - borderBottom - tabHeight - 1 : borderTop + tabHeight;", "+\t\tint x2 = size.x - borderRight;", "-\t\tgc.drawLine(x2, y2, x2 + width2, y2);", "+\t\tgc.drawLine(x1, y1, x2, y1);", "+\t// Draw Buttons", "-\t// draw insertion mark", "+\t// Draw insertion mark", "-", "-\t\t", "-\t// draw outside border area", "-\tif (onBottom) {", "-\t\tshape = new int[BOTTOM_LEFT_CORNER.length + BOTTOM_RIGHT_CORNER.length + 4];", "-\t\tint index = 0;", "-\t\tshape[index++] = x;", "-\t\tshape[index++] = y;", "-\t\tfor (int i = 0; i < BOTTOM_LEFT_CORNER.length/2; i++) {", "-\t\t\tshape[index++] = x+BOTTOM_LEFT_CORNER[2*i];", "-\t\t\tshape[index++] = y+height+BOTTOM_LEFT_CORNER[2*i+1];", "-\t\t\tif (borderLeft == 0) shape[index-1] += 1;", "-\t\t}", "-\t\tfor (int i = 0; i < BOTTOM_RIGHT_CORNER.length/2; i++) {", "-\t\t\tshape[index++] = x+width+BOTTOM_RIGHT_CORNER[2*i];", "-\t\t\tshape[index++] = y+height+BOTTOM_RIGHT_CORNER[2*i+1];", "-\t\t\tif (borderLeft == 0) shape[index-1] += 1;", "-\t\t}", "-\t\tshape[index++] = x+width;", "-\t\tshape[index++] = y-1;", "-\t} else {", "-\t\tshape = new int[TOP_LEFT_CORNER.length + TOP_RIGHT_CORNER.length + 4];", "-\t\tint index = 0;", "-\t\tshape[index++] = x;", "-\t\tshape[index++] = y+height+1;", "-\t\tfor (int i = 0; i < TOP_LEFT_CORNER.length/2; i++) {", "-\t\t\tshape[index++] = x+TOP_LEFT_CORNER[2*i];", "-\t\t\tshape[index++] = y+TOP_LEFT_CORNER[2*i+1];", "-\t\t}", "-\t\tfor (int i = 0; i < TOP_RIGHT_CORNER.length/2; i++) {", "-\t\t\tshape[index++] = x+width+TOP_RIGHT_CORNER[2*i];", "-\t\t\tshape[index++] = y+TOP_RIGHT_CORNER[2*i+1];", "-\t\t}", "-\t\tshape[index++] = x+width;", "-\t\tshape[index++] = y+height+1;", "-\t}", "-\t// fill in space outside border line with parent background", "-\tRegion r = new Region();", "-\tr.add(new Rectangle(x, y, width + 1, height + 1));", "-\tr.subtract(shape);", "-\tgc.setBackground(getParent().getBackground());", "-\tfillRegion(gc, r);", "-\tr.dispose();", "-\t", "-\t// draw border line", "-\tif (borderLeft > 0) {", "-\t\tRGB inside = getBackground().getRGB();", "-\t\tif (bgImage != null || (gradientColors != null && gradientColors.length > 1 && !gradientVertical)) inside = null;", "-\t\tRGB outside = getParent().getBackground().getRGB();", "-\t\tantialias(shape, borderColor.getRGB(), inside, outside, gc);", "-\t\tgc.setForeground(borderColor);", "-\t\tgc.drawPolyline(shape);", "-\t}"]}], "num": 39806}
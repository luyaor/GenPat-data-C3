{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "05a7dfd77e9aa5917bb26fd85ddc5610", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba60f903cdce2e117754f8f76ae7025b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "eb0dd46e7194a9f7d813095a5dca290fae54babc", "commitAfterChange": "8174cf2444655210718c9dde4ae430f251492a85", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t/*\r", "-\t * Feature in Photon - The preferred width calculated by\r", "-\t * PtWidgetPreferredSize is the current width.\r", "-\t */", "-\tPhDim_t dim = new PhDim_t();\r", "-\tif (!OS.PtWidgetIsRealized (handle)) OS.PtExtentWidget (handle);\r", "-\tOS.PtWidgetPreferredSize(handle, dim);\r", "-\tint width = 0, height = dim.h;\r", "-\tint [] args = new int [] {\r", "-\t\tOS.Pt_ARG_LIST_ITEM_COUNT, 0, 0,\r", "-\t\tOS.Pt_ARG_ITEMS, 0, 0,\r", "-\t\tOS.Pt_ARG_LIST_FONT, 0, 0,\r", "-\t};\r", "+\tint [] args = new int [] {OS.Pt_ARG_WIDTH, 0, 0, OS.Pt_ARG_HEIGHT, 0, 0};\r", "-\tPhRect_t rect = new PhRect_t();\r", "-\tint font = args [7];\r", "-\tint [] buffer = new int [1];\r", "-\tfor (int i = 0; i < args [1]; i++) {\r", "-\t\tOS.memmove (buffer, args [4] + (i * 4), 4);\r", "-\t\tint str = buffer [0];\r", "-\t\tint length = OS.strlen (str);\r", "-\t\tif (length > 0) {\r", "-\t\t\tOS.PfExtentText(rect, null, font, str, length);\r", "-\t\t\twidth = Math.max(width, rect.lr_x - rect.ul_x + 1);\r", "-\t\t}\r", "-\t}\r", "-\trect = new PhRect_t ();\r", "-\tPhArea_t area = new PhArea_t ();\r", "-\trect.lr_x = (short) (width + 1);\r", "-\tOS.PtSetAreaFromWidgetCanvas (handle, rect, area);\r", "-\twidth = area.size_w;\r", "+\tint resizeFlags = OS.Pt_RESIZE_X_ALWAYS | OS.Pt_RESIZE_Y_ALWAYS;\r", "+\tOS.PtSetResource (handle, OS.Pt_ARG_RESIZE_FLAGS, resizeFlags, OS.Pt_RESIZE_XY_BITS);\r", "+\tif (!OS.PtWidgetIsRealized (handle)) OS.PtExtentWidgetFamily (handle);\r", "+\tPhDim_t dim = new PhDim_t ();\r", "+\tOS.PtWidgetPreferredSize (handle, dim);\r", "+\tint width = dim.w, height = dim.h;\r", "+\tOS.PtSetResource (handle, OS.Pt_ARG_RESIZE_FLAGS, 0, OS.Pt_RESIZE_XY_BITS);\r", "+\tOS.PtSetResources (handle, args.length / 3, args);\r", "+\t\t\t", "-\t\trect = new PhRect_t ();\r", "-\t\tarea = new PhArea_t ();\r", "+\t\tPhRect_t rect = new PhRect_t ();\r", "+\t\tPhArea_t area = new PhArea_t ();\r", "-\t\t\tif ((scroll = getVerticalBar()) != null)\r", "-\t\t\t\twidth += scroll.getSize().x;\r", "+\t\t\tif ((scroll = getVerticalBar()) != null) width += scroll.getSize ().x;\r", "-\t\t\tif ((scroll = getHorizontalBar()) != null)\r", "-\t\t\t\theight += scroll.getSize().y;\r", "+\t\t\tif ((scroll = getHorizontalBar()) != null) height += scroll.getSize ().y;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2b36a7a3c1cfa8378583ebe38f92e85", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 89, "signatureBeforeChange": " void calculateWidestScrolledItem(int topIndexDifference)", "signatureAfterChange": " void updateVerticalBar()", "diff": ["- */", "-void calculateWidestScrolledItem(int topIndexDifference) {", "-\tint visibleItemCount = getItemCountTruncated(getClientArea());\t", "-\tint newMaximumItemWidth = getContentWidth();", "-\tint topIndex = getTopIndex();", "-\tint stopIndex = topIndex;", "-", "-\tif (topIndexDifference < 0) {\t\t\t\t\t\t\t\t// scrolled up?", "-\t\tif (Math.abs(topIndexDifference) > visibleItemCount) {\t// scrolled down more than one page (via quick thumb dragging)?", "-\t\t\ttopIndexDifference = visibleItemCount * -1;", "-\t\t}", "-\t\tfor (int i = stopIndex - topIndexDifference; i >= stopIndex; i--) {\t// check item width from old top index up to new one", "-\t\t\tnewMaximumItemWidth = Math.max(newMaximumItemWidth, getContentWidth(i));", "-\t\t}", "-\t}", "-\telse", "-\tif (topIndexDifference > 0) {\t\t\t\t\t\t\t\t// scrolled down?", "-\t\tif (topIndexDifference > visibleItemCount) {\t\t\t// scrolled down more than one page (via quick thumb dragging)?", "-\t\t\ttopIndexDifference = visibleItemCount;", "-\t\t}", "-\t\tstopIndex += visibleItemCount;\t\t", "-\t\tfor (int i = stopIndex - topIndexDifference; i < stopIndex; i++) {", "-\t\t\tnewMaximumItemWidth = Math.max(newMaximumItemWidth, getContentWidth(i));", "-\t\t}", "-\t}", "-\tsetContentWidth(newMaximumItemWidth);", "-}", "+}", "+void updateVerticalBar() {", "+\tScrollBar vBar = getVerticalBar();", "+\tint maximum = Math.max(1,availableItems.length);", "+\tif (maximum == vBar.getMaximum()) return;", "+\tvBar.setMaximum(maximum);", "+\tint thumb = Math.min(maximum, getClientArea().height / itemHeight);", "+\tvBar.setThumb(thumb);", "+\t/* reclaim any space now left on the bottom */", "+\tif (maximum < topIndex + thumb) {", "+\t\ttopIndex = maximum - thumb;", "+\t\tvBar.setSelection(topIndex);", "+\t\tredraw();", "+\t}", "+}"]}], "num": 45676}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c3c195cde6d779f514489883568d1f5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8171601e54fcc0bb7e6c34d6f8a60cc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "caa512aad37dedd16ed84b5d8b521cfb5fd78adc", "commitAfterChange": "30a9563f38681ae614bc8194165e01d676d62b8c", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 110, "signatureBeforeChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["-\t\t/*", "-\t\t * Feature of XULRunner.  Activation and deactivation of the GRE must be", "-\t\t * performed by the embedder on non-Windows platforms.  Listen for focus", "-\t\t * events on the page being loaded so that activate and deactivate handling", "-\t\t * can be done as needed.", "-\t\t */", "-\t\tif (IsXULRunner) {", "-\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\tint rc = webBrowser.GetContentDOMWindow (result);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t", "-\t\t\tnsIDOMWindow window = new nsIDOMWindow (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\trc = window.QueryInterface (nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t", "-\t\t\tnsIDOMEventTarget target = new nsIDOMEventTarget (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tnsEmbedString string = new nsEmbedString (XPCOM.DOMEVENT_FOCUS);", "-\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tstring.dispose ();", "-\t\t\tstring = new nsEmbedString (XPCOM.DOMEVENT_UNLOAD);", "-\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tstring.dispose ();", "-\t\t\ttarget.Release ();", "-", "-\t\t\t/* Listeners must be hooked in pages contained in frames */", "-\t\t\trc = window.GetFrames (result);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\t\tnsIDOMWindowCollection frames = new nsIDOMWindowCollection (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tint[] frameCount = new int[1];", "-\t\t\trc = frames.GetLength (frameCount); /* PRUint32 */", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tint count = frameCount[0];", "-", "-\t\t\tif (count > 0) {", "-\t\t\t\tfor (int i = 0; i < count; i++) {", "-\t\t\t\t\trc = frames.Item (i, result);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t", "-\t\t\t\t\tnsIDOMWindow frame = new nsIDOMWindow (result[0]);", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\trc = frame.QueryInterface (nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\t\t\t\tframe.Release ();", "-\t", "-\t\t\t\t\ttarget = new nsIDOMEventTarget (result[0]);", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\tstring = new nsEmbedString (XPCOM.DOMEVENT_FOCUS);", "-\t\t\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tstring.dispose ();", "-\t\t\t\t\tstring = new nsEmbedString (XPCOM.DOMEVENT_UNLOAD);", "-\t\t\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tstring.dispose ();", "-\t\t\t\t\ttarget.Release ();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tframes.Release ();", "-\t\t\twindow.Release ();", "-\t\t}", "+\t\thookDOMListeners ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c26e13fdb94fe0d2040a3565c75c9f0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "54aed4fbd5df18a764a007813a3707f09efb92d5", "commitAfterChange": "4508514c485affa97e5c71dcb79f80de914f7288", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 110, "signatureBeforeChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["-\t\t * If htmlBytes is not null then there is html from a previous setText() call", "-\t\t * waiting to be set into the about:blank page once it has completed loading. ", "-\t\t */", "-\t\tif (htmlBytes != null) {", "-\t\t\tnsIRequest req = new nsIRequest (aRequest);", "-\t\t\tint /*long*/ name = XPCOM.nsEmbedCString_new ();", "-\t\t\trc = req.GetName (name);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tint length = XPCOM.nsEmbedCString_Length (name);", "-\t\t\tint /*long*/ buffer = XPCOM.nsEmbedCString_get (name);", "-\t\t\tbyte[] dest = new byte[length];", "-\t\t\tXPCOM.memmove (dest, buffer, length);", "-\t\t\tXPCOM.nsEmbedCString_delete (name);", "-\t\t\tString url = new String (dest);", "-", "-\t\t\tif (url.startsWith (ABOUT_BLANK)) {", "-\t\t\t\t/*", "-\t\t\t\t * Setting the browser's content with nsIWebBrowserStream invalidates the ", "-\t\t\t\t * DOM listeners that were hooked on it (about:blank), so remove them and", "-\t\t\t\t * add new ones after the content has been set.", "-\t\t\t\t */", "-\t\t\t\tunhookDOMListeners ();", "-", "-\t\t\t\trc = XPCOM.NS_GetServiceManager (result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = serviceManager.GetService (XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\tserviceManager.Release ();", "-", "-\t\t\t\tnsIIOService ioService = new nsIIOService (result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\t/*", "-\t\t\t\t* Note.  Mozilla ignores LINK tags used to load CSS stylesheets", "-\t\t\t\t* when the URI protocol for the nsInputStreamChannel", "-\t\t\t\t* is about:blank.  The fix is to specify the file protocol.", "-\t\t\t\t*/", "-\t\t\t\tbyte[] aString = MozillaDelegate.wcsToMbcs (null, URI_FROMMEMORY, false);", "-\t\t\t\tint /*long*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);", "-\t\t\t\trc = ioService.NewURI (aSpec, null, 0, result);", "-\t\t\t\tXPCOM.nsEmbedCString_delete (aSpec);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\tioService.Release ();", "-", "-\t\t\t\tnsIURI uri = new nsIURI (result[0]);", "-\t\t\t\tresult[0] = 0;", "-", "-\t\t\t\trc = webBrowser.QueryInterface (nsIWebBrowserStream.NS_IWEBBROWSERSTREAM_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\tnsIWebBrowserStream stream = new nsIWebBrowserStream (result[0]);", "-\t\t\t\tresult[0] = 0;", "-", "-\t\t\t\tbyte[] contentTypeBuffer = MozillaDelegate.wcsToMbcs (null, \"text/html\", true); // $NON-NLS-1$", "-\t\t\t\tint /*long*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);", "-", "-\t\t\t\trc = stream.OpenStream (uri.getAddress (), aContentType);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tint /*long*/ ptr = C.malloc (htmlBytes.length);", "-\t\t\t\tXPCOM.memmove (ptr, htmlBytes, htmlBytes.length);", "-\t\t\t\tint pageSize = 8192;", "-\t\t\t\tint pageCount = htmlBytes.length / pageSize + 1;", "-\t\t\t\tint /*long*/ current = ptr;", "-\t\t\t\tfor (int i = 0; i < pageCount; i++) {", "-\t\t\t\t\tlength = i == pageCount - 1 ? htmlBytes.length % pageSize : pageSize;", "-\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\trc = stream.AppendToStream (current, length);", "-\t\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\t}", "-\t\t\t\t\tcurrent += pageSize;", "-\t\t\t\t}", "-\t\t\t\trc = stream.CloseStream ();", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-", "-\t\t\t\tC.free (ptr);", "-\t\t\t\tXPCOM.nsEmbedCString_delete (aContentType);", "-\t\t\t\tstream.Release ();", "-\t\t\t\turi.Release ();", "-\t\t\t\thtmlBytes = null;", "-\t\t\t\thookDOMListeners ();", "-\t\t\t}", "-\t\t}", "-", "-\t\t/*"]}], "num": 21586}
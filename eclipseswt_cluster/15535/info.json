{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5837a54843d53f16a7d5728726dc233", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cca30ae269b0ddf98ff7792084019607", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/ClipboardProxy.java", "commitBeforeChange": "a23347b0f61594cc11dfc269d3641f4c34fbdc88", "commitAfterChange": "effac1e46c22741d9e3c8e7bcdf198ca545ece88", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  int[] getAvailableTypes(int clipboardType)", "signatureAfterChange": "  int[] getAvailableTypes(int clipboardType)", "diff": ["-\tint target = clipboardType == DND.CLIPBOARD ? atomAtom : targetsAtom;", "+\tint target = targetsAtom;", "+\t}", "+\tif (done && selectionValue == null) {", "+\t\tdone = false;", "+\t\ttarget = motifClipboardAtom;", "+\t\tOS.XtGetSelectionValue(shellHandle, selection, target, XtSelectionCallbackCallback.getAddress(), 0, OS.CurrentTime);", "+\t\tif (!done) {", "+\t\t\tint xtContext = OS.XtDisplayToApplicationContext(xDisplay);", "+\t\t\tint selectionTimeout = OS.XtAppGetSelectionTimeout(xtContext);", "+\t\t\twait(selectionTimeout);", "+\t\t\t", "+\t\t}", "+\t}", "+\tif (done && selectionValue == null) {", "+\t\tdone = false;", "+\t\ttarget = atomAtom;", "+\t\tOS.XtGetSelectionValue(shellHandle, selection, target, XtSelectionCallbackCallback.getAddress(), 0, OS.CurrentTime);", "+\t\tif (!done) {", "+\t\t\tint xtContext = OS.XtDisplayToApplicationContext(xDisplay);", "+\t\t\tint selectionTimeout = OS.XtAppGetSelectionTimeout(xtContext);", "+\t\t\twait(selectionTimeout);", "+\t\t\t", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57a6f499ae735f6066b8f6cf8864d857", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "58b7b0307cfee84d4b3234d19ea30ad4035bb400", "commitAfterChange": "06e64c4ed8226db4e6e80308cce3b22a12cb51fe", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r void destroyDisplay ()", "signatureAfterChange": "\r void destroyDisplay ()", "diff": ["+\t/* \r", "+\t* Bug in Motif. For some reason, XtAppCreateShell will GPF if called\r", "+\t* after a display has been closed. The fix is to destroy the XmDisplay\r", "+\t* associated with it.\r", "+\t* \r", "+\t* int xContext = OS.XtCreateApplicationContext();\r", "+\t* int xDisplay = OS.XtOpenDisplay(xContext, null, null, null,  null, 0,  new int[1], null);\r", "+\t* OS.XtAppCreateShell(null, null, OS.topLevelShellWidgetClass(), xDisplay, null, 0);   \r", "+\t* OS.XtDestroyApplicationContext(xContext);\r", "+\t* xContext = OS.XtCreateApplicationContext();\r", "+\t* xDisplay = OS.XtOpenDisplay(xContext, null, null, null,  null, 0,  new int[1], null);\r", "+\t* OS.XtAppCreateShell(null, null, OS.topLevelShellWidgetClass(), xDisplay, null, 0);   \r", "+\t* OS.XtDestroyApplicationContext(xContext);\r", "+\t*/\r", "+\tOS.XtDestroyWidget (OS.XmGetXmDisplay (xDisplay));\r", "+\r", "-\tDisplayDisposed = true;\r"]}], "num": 15535}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4792ea450cfe8ef12b5bce812133d10b", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4a72f17becfcd8c81a5a374e5ef1437", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet352.java", "commitBeforeChange": "dcc0e2e76a96518f2bd60f127e49f8a4bd5ba452", "commitAfterChange": "64349bf9cd19222d7f7bef44cb4d0e244ca7ed8f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic static void main(String [] args)", "signatureAfterChange": " \t \tpublic static void main (String [] args)", "diff": ["-", "-\tpublic static void main(String [] args) {", "-\t\tDisplay display = new Display();", "-\t\tShell shell = new Shell(display);", "-\t\twhile (!shell.isDisposed()) {", "-\t\t\tif (!display.readAndDispatch()) display.sleep();", "-\t\tdisplay.dispose();", "+\t", "+\tpublic static void main (String [] args) {", "+\t\tfinal Display display = new Display ();", "+\t\tfinal Shell shell = new Shell (display);", "+\t\tshell.setLayout(new FillLayout(SWT.HORIZONTAL));", "+\t\tshell.setText (\"Touch demonstration\");", "+\t\t", "+\t\tTouchListener tl = new TouchListener() {", "+\t\t\tpublic void touch(TouchEvent e) {", "+\t\t\t\t", "+\t\t\t\tTouch touches[] = e.touches;", "+", "+\t\t\t\tfor (int i = 0; i < touches.length; i++) {", "+\t\t\t\t\tTouch currTouch = touches[i];", "+", "+\t\t\t\t\tif ((currTouch.state & (SWT.TOUCHSTATE_UP)) != 0) {", "+\t\t\t\t\t\ttouchLocations.remove(currTouch.id);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tCircleInfo info = touchLocations.get(currTouch.id);", "+\t\t\t\t\t\tPoint newPoint = Display.getCurrent().map(null, (Control)e.widget, new Point((int)currTouch.x, (int)currTouch.y));", "+", "+\t\t\t\t\t\tif (info == null) {", "+\t\t\t\t\t\t\tinfo = new CircleInfo(newPoint, display.getSystemColor((colorIndex + 2) % PAINTABLE_COLORS));", "+\t\t\t\t\t\t\tcolorIndex++;", "+\t\t\t\t\t\t}", "+", "+\t\t\t\t\t\tinfo.center = newPoint;", "+\t\t\t\t\t\ttouchLocations.put(currTouch.id, info);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\tControl c = (Control)e.widget;", "+\t\t\t\tc.redraw();", "+\t\t\t}", "+", "+\t\t};", "+", "+\t\tPaintListener pl = new PaintListener() {", "+\t\t\tpublic void paintControl(PaintEvent e) {", "+\t\t\t\tIterator<Map.Entry<Long, CircleInfo>> iter = touchLocations.entrySet().iterator();", "+\t\t\t\twhile (iter.hasNext()) {", "+\t\t\t\t\tCircleInfo ci = iter.next().getValue();", "+\t\t\t\t\te.gc.setBackground(ci.color);", "+\t\t\t\t\te.gc.fillOval(ci.center.x - CIRCLE_RADIUS, ci.center.y - CIRCLE_RADIUS, CIRCLE_RADIUS * 2, CIRCLE_RADIUS * 2);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t};", "+\t\t", "+\t\tCanvas c = new Canvas(shell, SWT.NONE);", "+\t\tc.setTouchEventsEnabled(true);", "+\t\tc.setSize(800, 800);", "+\t\tc.addTouchListener(tl);", "+\t\tc.addPaintListener(pl);", "+", "+\t\tshell.setSize (800, 800);", "+\t\tshell.open ();", "+\t\twhile (!shell.isDisposed ()) {", "+\t\t\tif (!display.readAndDispatch ()) display.sleep ();", "+\t\t}", "+\t\tdisplay.dispose ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "146d47916e20b1ffe3da964261df2e9b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet51.java", "commitBeforeChange": "df6c9943808b7d2db2d255f473822e899df784cd", "commitAfterChange": "51a851b43d5a5b67f153def5a601fa54671236bd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static void main (String [] args)", "signatureAfterChange": "  public static void main(String [] args)", "diff": ["-public static void main (String [] args) {", "-\tDisplay display = new Display ();", "-\tShell shell = new Shell (display);", "-\tTable table = new Table (shell, SWT.BORDER | SWT.MULTI);", "-\ttable.setSize (200, 200);", "-\tfor (int i=0; i<128; i++) {", "-\t\tTableItem item = new TableItem (table, SWT.NONE);", "-\t\titem.setText (\"Item \" + i);", "+public static void main(String [] args) {", "+\tDisplay display = new Display();", "+\tShell shell = new Shell(display);", "+\tshell.setBounds(10,10,300,300);", "+\tshell.setLayout(new GridLayout(2,true));", "+\tfinal Table table = new Table(shell, SWT.NONE);", "+\tGridData data = new GridData(GridData.FILL_BOTH);", "+\tdata.horizontalSpan = 2;", "+\ttable.setLayoutData(data);", "+\tfor (int i = 0; i < 99; i++) {", "+\t\tnew TableItem(table, SWT.NONE).setText(\"item \" + i);", "-\ttable.setTopIndex (95);", "-\tshell.pack ();", "-\tshell.open ();", "-\twhile (!shell.isDisposed ()) {", "-\t\tif (!display.readAndDispatch ()) display.sleep ();", "+\tButton upButton = new Button(shell, SWT.PUSH);", "+\tupButton.setText(\"Scroll up one page\");", "+\tupButton.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));", "+\tupButton.addListener(SWT.Selection, new Listener() {", "+\t\tpublic void handleEvent(Event event) {", "+\t\t\tint height = table.getClientArea().height;", "+\t\t\tint visibleItemCount = height / table.getItemHeight();", "+\t\t\tint topIndex = table.getTopIndex();", "+\t\t\tint newTopIndex = Math.max(0, topIndex - visibleItemCount);", "+\t\t\tif (topIndex != newTopIndex) {", "+\t\t\t\ttable.setTopIndex(newTopIndex);", "+\t\t\t}", "+\t\t}", "+\t});", "+\tButton downButton = new Button(shell, SWT.PUSH);", "+\tdownButton.setText(\"Scroll down one page\");", "+\tdownButton.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));", "+\tdownButton.addListener(SWT.Selection, new Listener() {", "+\t\tpublic void handleEvent(Event event) {", "+\t\t\tint height = table.getClientArea().height;", "+\t\t\tint visibleItemCount = height / table.getItemHeight();", "+\t\t\tint topIndex = table.getTopIndex();", "+\t\t\tint newTopIndex = Math.min(table.getItemCount(), topIndex + visibleItemCount);", "+\t\t\tif (topIndex != newTopIndex) {", "+\t\t\t\ttable.setTopIndex(newTopIndex);", "+\t\t\t}", "+\t\t}", "+\t});", "+\tshell.open();", "+\twhile (!shell.isDisposed()) {", "+\t\tif (!display.readAndDispatch()) display.sleep();", "-\tdisplay.dispose ();", "+\tdisplay.dispose();"]}], "num": 60924}
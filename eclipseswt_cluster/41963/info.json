{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59320af08efce7e59f71ddb8808894d3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2fe7b879e50e16a6ebbd7a5e483f21c4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r public CTabFolder(Composite parent, int style)", "signatureAfterChange": "\r public CTabFolder(Composite parent, int style)", "diff": ["-\tColor foreground = getForeground();\r", "+\tscrollBar.setBackground(background);\r", "-\tinitScrollButtons(foreground, background);\r", "+\tcloseBar.setBackground(background);\r", "-\tinitCloseButton(foreground, background);\r", "+\tinactiveCloseBar.setBackground(background);\r", "-\tinitInactiveCloseButton(foreground, background);\r", "-\ttip = new Shell (getShell(), SWT.NONE);\r", "-\ttip.setLayout(new FillLayout());\r", "+\ttip = new Shell (getShell(), SWT.ON_TOP);\r", "+\tGridLayout layout = new GridLayout();\r", "+\tlayout.marginWidth = layout.marginHeight = 1;\r", "+\ttip.setLayout(layout);\r", "+\tlabel.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));\r", "+\t\r", "+\ttip.setBackground(label.getBackground());\r", "+\t\r", "+\t\t\tif (tip.isDisposed()) return;\r", "+\t\t\tif (tip.isDisposed()) return;\r", "-\t\t\t\t\tpt.y = (onBottom) ? pt.y - 26 : pt.y + 26;\r", "-\t\t\t\t\tpt = toDisplay(pt);\r", "-\t\t\t\t\ttip.setLocation(pt);\r", "+\t\t\t\t\t\r", "-\t\t\t\t\tlabel.setText(tooltip);  \r", "+\t\t\t\t\tlabel.setText(tooltip);\r", "+\r", "+\t\t\t\t\tpt.y += 16;\r", "+\t\t\t\t\tpt = toDisplay(pt);\r", "+\t\t\t\t\t/*\r", "+\t\t\t\t\t* Ensure that the tooltip is on the screen.\r", "+\t\t\t\t\t*/\r", "+\t\t\t\t\tDisplay display = tip.getDisplay();\r", "+\t\t\t\t\tRectangle rect = display.getBounds();\r", "+\t\t\t\t\tPoint size = tip.getSize();\r", "+\t\t\t\t\tpt.x = Math.max (0, Math.min (pt.x, rect.width - size.x));\r", "+\t\t\t\t\tpt.y = Math.max (0, Math.min (pt.y, rect.height - size.y));\r", "+\t\t\t\t\ttip.setLocation(pt);\r", "+\t\t\t\t\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1b7f1952ea5abfa7bed6fa48b2ff914", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "ea0345c3a53f5f855ec326cfec4508279407a40a", "commitAfterChange": "0215664973954ec1e7f14d34d79815e704ff9294", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 48, "signatureBeforeChange": "\r \t\tpublic void mouseHover(MouseEvent e)", "signatureAfterChange": "\r \r private void onMouseHover(Event event)", "diff": ["-\t\t}\r", "-\t\tpublic void mouseHover(MouseEvent e) {\r", "-\t\t\tif (tip.isDisposed()) return;\r", "-\t\t\tPoint pt = new Point (e.x, e.y);\r", "-\t\t\tCTabItem item = getItem(pt);\r", "-\t\t\tif (item != null) {\r", "-\t\t\t\tString tooltip = item.getToolTipText();\r", "-\t\t\t\tif (tooltip != null) {\r", "-\t\t\t\t\t\r", "-\t\t\t\t\tLabel label = (Label) (tip.getChildren() [0]);\r", "-\t\t\t\t\tlabel.setText(tooltip);\r", "-\t\t\t\t\ttip.pack();\r", "-\r", "-\t\t\t\t\tpt.y += 16;\r", "-\t\t\t\t\tpt = toDisplay(pt);\r", "-\t\t\t\t\t/*\r", "-\t\t\t\t\t* Ensure that the tooltip is on the screen.\r", "-\t\t\t\t\t*/\r", "-\t\t\t\t\tDisplay display = tip.getDisplay();\r", "-\t\t\t\t\tRectangle rect = display.getBounds();\r", "-\t\t\t\t\tPoint size = tip.getSize();\r", "-\t\t\t\t\tpt.x = Math.max (0, Math.min (pt.x, rect.width - size.x));\r", "-\t\t\t\t\tpt.y = Math.max (0, Math.min (pt.y, rect.height - size.y));\r", "-\t\t\t\t\ttip.setLocation(pt);\r", "-\t\t\t\t\t\r", "-\t\t\t\t\ttip.setVisible(true);\r", "-\t\t\t\t\treturn;\r", "-\t\t\t\t}\r", "-\r", "-\t\t\ttip.setVisible(false);\r", "+\r", "+private void onMouseHover(Event event) {\r", "+\tif (tip.isDisposed()) return;\r", "+\tPoint pt = new Point (event.x, event.y);\r", "+\tCTabItem item = getItem(pt);\r", "+\tif (item != null) {\r", "+\t\tString tooltip = item.getToolTipText();\r", "+\t\tif (tooltip != null) {\t\t\t\r", "+\t\t\tLabel label = (Label) (tip.getChildren() [0]);\r", "+\t\t\tlabel.setText(tooltip);\r", "+\t\t\ttip.pack();\r", "+\t\t\tpt.y += 16;\r", "+\t\t\tpt = toDisplay(pt);\r", "+\t\t\t/*\r", "+\t\t\t* Ensure that the tooltip is on the screen.\r", "+\t\t\t*/\r", "+\t\t\tDisplay display = tip.getDisplay();\r", "+\t\t\tRectangle rect = display.getBounds();\r", "+\t\t\tPoint size = tip.getSize();\r", "+\t\t\tpt.x = Math.max (0, Math.min (pt.x, rect.width - size.x));\r", "+\t\t\tpt.y = Math.max (0, Math.min (pt.y, rect.height - size.y));\r", "+\t\t\ttip.setLocation(pt);\r", "+\t\t\t\t\r", "+\t\t\ttip.setVisible(true);\r", "+\t\t\treturn;\r", "+\t\t}\r", "+\t}\r", "+\r", "+\ttip.setVisible(false);\r", "+}\r"]}], "num": 41963}
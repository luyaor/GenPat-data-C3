{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d57e4d1dba94976b3bd892513043d647", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c884f87e6540491fb8dbc41f37ddf4e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "b72bc1d2aeff462f0ad0e8ecfa6bc39ebd385109", "commitAfterChange": "976e43084e6451bfa01e2552d9934253d1c13468", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": " public Point textExtent(String string, int flags)", "signatureAfterChange": " public Point textExtent(String string, int flags)", "diff": ["-\t\tNSAttributedString str = createString(string, flags, false);", "-\t\tNSSize size = str.size();", "-\t\tstr.release();", "-\t\treturn new Point((int)size.width, (int)size.height);", "+\t\tint length = string.length();", "+\t\tFont font = data.font;", "+\t\tint /*long*/ fontID = font.handle.id;", "+\t\tif (length == 0) {", "+\t\t\treturn new Point(0, (int)(0.5f + OS.CTFontGetAscent(fontID)) + (int)(0.5f + OS.CTFontGetDescent(fontID) + OS.CTFontGetLeading(fontID)));", "+\t\t}", "+\t\tchar[] chars = new char[length];", "+\t\tstring.getChars(0, length, chars, 0);", "+\t\tif ((flags & SWT.DRAW_MNEMONIC) != 0 || (flags & SWT.DRAW_TAB) == 0) {", "+\t\t\tint i=0, j=0;", "+\t\t\twhile (i < chars.length) {", "+\t\t\t\tchar c = chars [j++] = chars [i++];", "+\t\t\t\tswitch (c) {", "+\t\t\t\t\tcase '\\t': {", "+\t\t\t\t\t\tif ((flags & SWT.DRAW_TAB) == 0) j--;", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t\tcase '&': {", "+\t\t\t\t\t\tif ((flags & SWT.DRAW_MNEMONIC) != 0) {", "+\t\t\t\t\t\t\tif (i == chars.length) {continue;}", "+\t\t\t\t\t\t\tif (chars [i] == '&') {i++; continue;}", "+\t\t\t\t\t\t\tj--;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tlength = j;", "+\t\t}", "+\t\tint /*long*/ dict = OS.CFDictionaryCreateMutable(0, 1, OS.kCFTypeDictionaryKeyCallBacks(), OS.kCFTypeDictionaryValueCallBacks());", "+\t\tOS.CFDictionaryAddValue(dict, OS.kCTFontAttributeName(), font.handle.id);", "+\t\tint /*long*/ str = OS.CFStringCreateWithCharacters(0, chars, length);", "+\t\tint /*long*/ attrStr = OS.CFAttributedStringCreate(0, str, dict);", "+\t\tOS.CFRelease(dict);", "+\t\tOS.CFRelease(str);", "+\t\tfloat /*double*/ [] ascent = new float /*double*/ [1];", "+\t\tfloat /*double*/ [] descent = new float /*double*/ [1];", "+\t\tfloat /*double*/ [] leading = new float /*double*/ [1];", "+\t\tdouble width = 0, height = 0;", "+\t\tif ((flags & SWT.DRAW_DELIMITER) != 0) {", "+\t\t\tfloat /*double*/ fontAscent = OS.CTFontGetAscent(fontID);", "+\t\t\tfloat /*double*/ fontDescent = OS.CTFontGetDescent(fontID);", "+\t\t\tfloat /*double*/ fontLeading = OS.CTFontGetLeading(fontID);", "+\t\t\tint /*long*/ typesetter = OS.CTTypesetterCreateWithAttributedString(attrStr);", "+\t\t\tint end = 0;", "+\t\t\tCFRange range = new CFRange();", "+\t\t\twhile (end < length) {", "+\t\t\t\tchar c = chars[end++];", "+\t\t\t\tswitch (c) {", "+\t\t\t\t\tcase '\\r':", "+\t\t\t\t\tcase '\\n': {", "+\t\t\t\t\t\trange.length = end - range.location - 1;", "+\t\t\t\t\t\tif (c == '\\r' && end != chars.length && chars[end] == '\\n') end++;", "+\t\t\t\t\t\tif (range.length > 0) {", "+\t\t\t\t\t\t\tint /*long*/ line = OS.CTTypesetterCreateLine(typesetter, range);", "+\t\t\t\t\t\t\twidth = Math.max(width, OS.CTLineGetTypographicBounds(line, ascent, descent, leading));", "+\t\t\t\t\t\t\theight += ascent[0] + descent[0] + leading[0];", "+\t\t\t\t\t\t\tOS.CFRelease(line);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\theight += fontAscent + fontDescent + fontLeading;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\trange.location = end;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (range.location != end) {", "+\t\t\t\trange.length = end - range.location;", "+\t\t\t\tint /*long*/ line = OS.CTTypesetterCreateLine(typesetter, range);", "+\t\t\t\twidth = Math.max(width, OS.CTLineGetTypographicBounds(line, ascent, descent, leading));", "+\t\t\t\theight += ascent[0] + descent[0] + leading[0];", "+\t\t\t\tOS.CFRelease(line);", "+\t\t\t} else {", "+\t\t\t\theight += fontAscent + fontDescent + fontLeading;", "+\t\t\t}", "+\t\t\tOS.CFRelease(typesetter);", "+\t\t} else {", "+\t\t\tint /*long*/ line = OS.CTLineCreateWithAttributedString(attrStr);", "+\t\t\twidth = OS.CTLineGetTypographicBounds(line, ascent, descent, leading);", "+\t\t\theight = ascent[0] + descent[0] + leading[0];", "+\t\t\tOS.CFRelease(line);", "+\t\t}", "+\t\tOS.CFRelease(attrStr);", "+\t\treturn new Point((int)Math.ceil(width), (int)Math.ceil(height));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9bd9908b4782e049459e0bb24cea646", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "c52a498d1686cfc621ac513da35a69d8c16a84ba", "commitAfterChange": "d0cfa98c33dae187ddb28fd1d4be338006975a20", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 105, "signatureBeforeChange": " public Point textExtent(String string, int flags)", "signatureAfterChange": " public Point textExtent(String string, int flags)", "diff": ["-\t\tFont font = data.font;", "-\t\tint /*long*/ fontID = font.handle.id;", "-\t\tif (length == 0) {", "-\t\t\treturn new Point(0, (int)(0.5f + OS.CTFontGetAscent(fontID)) + (int)(0.5f + OS.CTFontGetDescent(fontID) + OS.CTFontGetLeading(fontID)));", "-\t\t}", "-\t\tchar[] chars = new char[length];", "-\t\tstring.getChars(0, length, chars, 0);", "-\t\tif ((flags & SWT.DRAW_MNEMONIC) != 0 || (flags & SWT.DRAW_TAB) == 0) {", "-\t\t\tint i=0, j=0;", "-\t\t\twhile (i < chars.length) {", "-\t\t\t\tchar c = chars [j++] = chars [i++];", "-\t\t\t\tswitch (c) {", "-\t\t\t\t\tcase '\\t': {", "-\t\t\t\t\t\tif ((flags & SWT.DRAW_TAB) == 0) j--;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tcase '&': {", "-\t\t\t\t\t\tif ((flags & SWT.DRAW_MNEMONIC) != 0) {", "-\t\t\t\t\t\t\tif (i == chars.length) {continue;}", "-\t\t\t\t\t\t\tif (chars [i] == '&') {i++; continue;}", "-\t\t\t\t\t\t\tj--;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tlength = j;", "-\t\t}", "-\t\tint /*long*/ dict = OS.CFDictionaryCreateMutable(0, 1, OS.kCFTypeDictionaryKeyCallBacks(), OS.kCFTypeDictionaryValueCallBacks());", "-\t\tOS.CFDictionaryAddValue(dict, OS.kCTFontAttributeName(), font.handle.id);", "-\t\tint /*long*/ paragraphStyle = (data.style & SWT.RIGHT_TO_LEFT) != 0 ? device.paragraphStyleRTL : device.paragraphStyleLTR;", "-\t\tOS.CFDictionaryAddValue(dict, OS.kCTParagraphStyleAttributeName(), paragraphStyle);", "-\t\tint /*long*/ str = OS.CFStringCreateWithCharacters(0, chars, length);", "-\t\tint /*long*/ attrStr = OS.CFAttributedStringCreate(0, str, dict);", "-\t\tOS.CFRelease(dict);", "-\t\tOS.CFRelease(str);", "-\t\tfloat /*double*/ [] ascent = new float /*double*/ [1];", "-\t\tfloat /*double*/ [] descent = new float /*double*/ [1];", "-\t\tfloat /*double*/ [] leading = new float /*double*/ [1];", "-\t\tdouble width = 0, height = 0;", "-\t\tif ((flags & SWT.DRAW_DELIMITER) != 0) {", "-\t\t\tfloat /*double*/ fontAscent = OS.CTFontGetAscent(fontID);", "-\t\t\tfloat /*double*/ fontDescent = OS.CTFontGetDescent(fontID);", "-\t\t\tfloat /*double*/ fontLeading = OS.CTFontGetLeading(fontID);", "-\t\t\tint /*long*/ typesetter = OS.CTTypesetterCreateWithAttributedString(attrStr);", "-\t\t\tint end = 0;", "-\t\t\tCFRange range = new CFRange();", "-\t\t\twhile (end < length) {", "-\t\t\t\tchar c = chars[end++];", "-\t\t\t\tswitch (c) {", "-\t\t\t\t\tcase '\\r':", "-\t\t\t\t\tcase '\\n': {", "-\t\t\t\t\t\trange.length = end - range.location - 1;", "-\t\t\t\t\t\tif (c == '\\r' && end != chars.length && chars[end] == '\\n') end++;", "-\t\t\t\t\t\tif (range.length > 0) {", "-\t\t\t\t\t\t\tint /*long*/ line = OS.CTTypesetterCreateLine(typesetter, range);", "-\t\t\t\t\t\t\twidth = Math.max(width, OS.CTLineGetTypographicBounds(line, ascent, descent, leading));", "-\t\t\t\t\t\t\theight += ascent[0] + descent[0] + leading[0];", "-\t\t\t\t\t\t\tOS.CFRelease(line);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\theight += fontAscent + fontDescent + fontLeading;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\trange.location = end;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (range.location != end) {", "-\t\t\t\trange.length = end - range.location;", "-\t\t\t\tint /*long*/ line = OS.CTTypesetterCreateLine(typesetter, range);", "-\t\t\t\twidth = Math.max(width, OS.CTLineGetTypographicBounds(line, ascent, descent, leading));", "-\t\t\t\theight += ascent[0] + descent[0] + leading[0];", "-\t\t\t\tOS.CFRelease(line);", "-\t\t\t} else {", "-\t\t\t\theight += fontAscent + fontDescent + fontLeading;", "-\t\t\t}", "-\t\t\tOS.CFRelease(typesetter);", "-\t\t} else {", "-\t\t\tint /*long*/ line = OS.CTLineCreateWithAttributedString(attrStr);", "-\t\t\twidth = OS.CTLineGetTypographicBounds(line, ascent, descent, leading);", "-\t\t\theight = ascent[0] + descent[0] + leading[0];", "-\t\t\tOS.CFRelease(line);", "-\t\t}", "-\t\tOS.CFRelease(attrStr);", "-\t\treturn new Point((int)Math.ceil(width), (int)Math.ceil(height));", "+\t\tif (data.textStorage == null) createLayout();", "+\t\tNSAttributedString attribStr = createString(length == 0 ? \" \" : string, flags, true); //$NON-NLS-1$", "+\t\tdata.textStorage.setAttributedString(attribStr);", "+\t\tattribStr.release();", "+\t\tdata.layoutManager.glyphRangeForTextContainer(data.textContainer);", "+\t\tNSRect rect = data.layoutManager.usedRectForTextContainer(data.textContainer);", "+\t\treturn new Point(length == 0 ? 0 : (int)Math.ceil(rect.width), (int)Math.ceil(rect.height));"]}], "num": 6514}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e34187a262fe9e0fb0cf196420e2cc37", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78e279be61c4f5736d240d313ded1b2b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "26aa979781f0037710304353201abd8b6f8f299c", "commitAfterChange": "f19b0105ae672d2b363d1f662e3dcd851e30b426", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Image(Device device, Image srcImage, int flag)", "signatureAfterChange": " public Image(Device device, Image srcImage, int flag)", "diff": ["-\t\t\tint imageHandle = srcImage.handle;\r", "-\t\t\tif (imageHandle != 0) {\r", "-\t\t\t\timageHandle = OS.PiDuplicateImage (imageHandle, 0);\r", "-\t\t\t\tif (imageHandle == 0) SWT.error(SWT.ERROR_NO_HANDLES);\r", "+\t\t\tint srcHandle = srcImage.handle;\r", "+\t\t\tint newHandle = OS.PiDuplicateImage (srcHandle, 0);\r", "+\t\t\tif (newHandle == 0) SWT.error(SWT.ERROR_NO_HANDLES);\r", "+\t\t\tif (flag == SWT.IMAGE_COPY) {\r", "+\t\t\t\t/*\r", "+\t\t\t\t* Bug in Photon.  The image returned by PiDuplicateImage might\r", "+\t\t\t\t* have the same mask_bm/alpha as the original image.  The fix\r", "+\t\t\t\t* is to detect this case and copy mask_bm/alpha if necessary.\r", "+\t\t\t\t*/\r", "-\t\t\t\tif (flag == SWT.IMAGE_COPY) {\r", "-\t\t\t\t\t/*\r", "-\t\t\t\t\t * Bug in Photon - The image returned by PiDuplicateImage\r", "-\t\t\t\t\t * has the same mask_bm as the original image.\r", "-\t\t\t\t\t */\r", "-\t\t\t\t\tOS.memmove (phImage, imageHandle, PhImage_t.sizeof);\r", "-\t\t\t\t\tif (phImage.mask_bm != 0) {\r", "-\t\t\t\t\t\tint length = phImage.mask_bpl * phImage.size_h;\r", "-\t\t\t\t\t\tint ptr = OS.malloc (length);\r", "-\t\t\t\t\t\tOS.memmove(ptr, phImage.mask_bm, length);\r", "-\t\t\t\t\t\tphImage.mask_bm = ptr;\r", "-\t\t\t\t\t\tOS.memmove (imageHandle, phImage, PhImage_t.sizeof);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\t/*\r", "-\t\t\t\t\t * Bug in Photon - The image returned by PiDuplicateImage\r", "-\t\t\t\t\t * has the same alpha as the original image.\r", "-\t\t\t\t\t */\r", "-\t\t\t\t\tif (phImage.alpha != 0) {\r", "-\t\t\t\t\t\tPgAlpha_t alpha = new PgAlpha_t();\r", "-\t\t\t\t\t\tOS.memmove(alpha, phImage.alpha, PgAlpha_t.sizeof);\r", "-\t\t\t\t\t\tif (alpha.src_alpha_map_map != 0) {\r", "-\t\t\t\t\t\t\tint length = alpha.src_alpha_map_dim_w * alpha.src_alpha_map_dim_h;\r", "-\t\t\t\t\t\t\tint ptr = OS.malloc(length);\r", "-\t\t\t\t\t\t\tOS.memmove(ptr, alpha.src_alpha_map_map, length);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tint ptr = OS.malloc(PgAlpha_t.sizeof);\r", "-\t\t\t\t\t\tOS.memmove(ptr, alpha, PgAlpha_t.sizeof);\r", "-\t\t\t\t\t\tphImage.alpha = ptr;\r", "-\t\t\t\t\t\tOS.memmove (imageHandle, phImage, PhImage_t.sizeof);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\ttransparentPixel = srcImage.transparentPixel;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tOS.PhMakeGhostBitmap(imageHandle);\r", "-\t\t\t\t\tOS.memmove (phImage, imageHandle, PhImage_t.sizeof);\r", "-\t\t\t\t\tphImage.mask_bm = phImage.ghost_bitmap;\r", "-\t\t\t\t\tphImage.mask_bpl = phImage.ghost_bpl;\r", "-\t\t\t\t\tphImage.ghost_bitmap = 0;\r", "-\t\t\t\t\tphImage.ghost_bpl = 0;\r", "-\t\t\t\t\tphImage.alpha = 0;\r", "-\t\t\t\t\tOS.memmove (imageHandle, phImage, PhImage_t.sizeof);\r", "+\t\t\t\tOS.memmove (phImage, srcHandle, PhImage_t.sizeof);\r", "+\t\t\t\tPhImage_t newPhImage = new PhImage_t();\r", "+\t\t\t\tOS.memmove(newPhImage, newHandle, PhImage_t.sizeof);\r", "+\t\t\t\tif (newPhImage.mask_bm != 0 && phImage.mask_bm == newPhImage.mask_bm) {\r", "+\t\t\t\t\tint length = newPhImage.mask_bpl * newPhImage.size_h;\r", "+\t\t\t\t\tint ptr = OS.malloc(length);\r", "+\t\t\t\t\tOS.memmove(ptr, newPhImage.mask_bm, length);\r", "+\t\t\t\t\tnewPhImage.mask_bm = ptr;\r", "+\t\t\t\tif (newPhImage.alpha != 0 && phImage.alpha == newPhImage.alpha) {\r", "+\t\t\t\t\tPgAlpha_t alpha = new PgAlpha_t();\r", "+\t\t\t\t\tOS.memmove(alpha, phImage.alpha, PgAlpha_t.sizeof);\r", "+\t\t\t\t\tif (alpha.src_alpha_map_map != 0) {\r", "+\t\t\t\t\t\tint length = alpha.src_alpha_map_bpl * alpha.src_alpha_map_dim_h;\r", "+\t\t\t\t\t\tint ptr = OS.malloc(length);\r", "+\t\t\t\t\t\tOS.memmove(ptr, alpha.src_alpha_map_map, length);\r", "+\t\t\t\t\t\talpha.src_alpha_map_map = ptr;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tint ptr = OS.malloc(PgAlpha_t.sizeof);\r", "+\t\t\t\t\tOS.memmove(ptr, alpha, PgAlpha_t.sizeof);\r", "+\t\t\t\t\tnewPhImage.alpha = ptr;\r", "+\t\t\t\t}\r", "+\t\t\t\tOS.memmove(newHandle, newPhImage, PhImage_t.sizeof);\r", "+\t\t\t\ttransparentPixel = srcImage.transparentPixel;\r", "+\t\t\t} else {\r", "+\t\t\t\tPhImage_t phImage = new PhImage_t();\r", "+\t\t\t\tOS.PhMakeGhostBitmap(newHandle);\r", "+\t\t\t\tOS.memmove (phImage, newHandle, PhImage_t.sizeof);\r", "+\t\t\t\tphImage.mask_bm = phImage.ghost_bitmap;\r", "+\t\t\t\tphImage.mask_bpl = phImage.ghost_bpl;\r", "+\t\t\t\tphImage.ghost_bitmap = 0;\r", "+\t\t\t\tphImage.ghost_bpl = 0;\r", "+\t\t\t\tphImage.alpha = 0;\r", "+\t\t\t\tOS.memmove (newHandle, phImage, PhImage_t.sizeof);\r", "-\t\t\thandle = imageHandle;\r", "+\t\t\thandle = newHandle;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e917585fd0e648ad2b56e38b92c4fa89", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "26aa979781f0037710304353201abd8b6f8f299c", "commitAfterChange": "f19b0105ae672d2b363d1f662e3dcd851e30b426", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r int copyPhImage(int image)", "signatureAfterChange": "\r \r int copyPhImage(int image)", "diff": ["-\tint imageHandle = OS.PiDuplicateImage (image, 0);\r", "-\t/* Bug in Photon - The image returned by PiDuplicateImage\r", "-\thas the same mask_bm as the original image.\r", "+\tint newImage = OS.PiDuplicateImage (image, 0);\r", "+\r", "+\t/*\r", "+\t* Bug in Photon.  The image returned by PiDuplicateImage might\r", "+\t* have the same mask_bm/alpha as the original image.  The fix\r", "+\t* is to detect this case and copy mask_bm/alpha if necessary.\r", "-\tOS.memmove (phImage, imageHandle, PhImage_t.sizeof);\r", "-\tif (phImage.mask_bm != 0) {\r", "-\t\tint length = phImage.mask_bpl * phImage.size_h;\r", "-\t\tint ptr = OS.malloc (length);\r", "-\t\tOS.memmove(ptr, phImage.mask_bm, length);\r", "-\t\tphImage.mask_bm = ptr;\r", "-\t\tOS.memmove (imageHandle, phImage, PhImage_t.sizeof);\r", "+\tOS.memmove (phImage, image, PhImage_t.sizeof);\r", "+\tPhImage_t newPhImage = new PhImage_t();\r", "+\tOS.memmove(newPhImage, newImage, PhImage_t.sizeof);\r", "+\tif (newPhImage.mask_bm != 0 && phImage.mask_bm == newPhImage.mask_bm) {\r", "+\t\tint length = newPhImage.mask_bpl * newPhImage.size_h;\r", "+\t\tint ptr = OS.malloc(length);\r", "+\t\tOS.memmove(ptr, newPhImage.mask_bm, length);\r", "+\t\tnewPhImage.mask_bm = ptr;\r", "-\treturn imageHandle;\r", "+\tif (newPhImage.alpha != 0 && phImage.alpha == newPhImage.alpha) {\r", "+\t\tPgAlpha_t alpha = new PgAlpha_t();\r", "+\t\tOS.memmove(alpha, phImage.alpha, PgAlpha_t.sizeof);\r", "+\t\tif (alpha.src_alpha_map_map != 0) {\r", "+\t\t\tint length = alpha.src_alpha_map_bpl * alpha.src_alpha_map_dim_h;\r", "+\t\t\tint ptr = OS.malloc(length);\r", "+\t\t\tOS.memmove(ptr, alpha.src_alpha_map_map, length);\r", "+\t\t\talpha.src_alpha_map_map = ptr;\r", "+\t\t}\r", "+\t\tint ptr = OS.malloc(PgAlpha_t.sizeof);\r", "+\t\tOS.memmove(ptr, alpha, PgAlpha_t.sizeof);\r", "+\t\tnewPhImage.alpha = ptr;\r", "+\t}\r", "+\tOS.memmove(newImage, newPhImage, PhImage_t.sizeof);\r", "+\treturn newImage;\r"]}], "num": 32235}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9b583d4437b48be38328f7df37fc4f0", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a9292927410289c349556bb8feca854", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "60fd7d34184e36f3c0c95545640292c474b0384c", "commitAfterChange": "9fb31e5c6c7c3b8c8adec23d6fb2312227818988", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  int [] createGdipImage()", "signatureAfterChange": "  int [] createGdipImage()", "diff": ["-\t\t\t\tif (bm.bmBitsPixel != 32) {", "-\t\t\t\t\tfor (int y = 0, dp = 0; y < imgHeight; ++y) {", "-\t\t\t\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "-\t\t\t\t\t\t\t\tif (OS.GetPixel(srcHdc, x, y) != 0) {", "-\t\t\t\t\t\t\t\t\tsrcData[dp + 3] = (byte)0;", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tsrcData[dp + 3] = (byte)0xFF;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tdp += 4;", "+\t\t\t\tfor (int y = 0, dp = 3; y < imgHeight; ++y) {", "+\t\t\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "+\t\t\t\t\t\tif (srcData[dp] == 0) {", "+\t\t\t\t\t\t\tif (OS.GetPixel(srcHdc, x, y) != 0) {", "+\t\t\t\t\t\t\t\tsrcData[dp] = (byte)0;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tsrcData[dp] = (byte)0xFF;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tdp += 4;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9fa363add8602da13433d9b744a44f4c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "375edd619736a12125743add1cb6aee356e13ee3", "commitAfterChange": "a5498b089603f126c1710d6fb85e4926dbafe68b", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  int [] createGdipImage()", "signatureAfterChange": "  int [] createGdipImage()", "diff": ["-\t\t\tif (imgWidth > imgHeight) {", "+\t\t\t/*", "+\t\t\t* Bug in GDI+.  Bitmap_new() segments fault if the image width", "+\t\t\t* is greater than the image height.", "+\t\t\t* ", "+\t\t\t* Note that it also fails to generated an appropriate alpha", "+\t\t\t* channel when the icon depth is 32.", "+\t\t\t*/", "+\t\t\tif (imgWidth > imgHeight || bm.bmBitsPixel == 32) {", "-\t\t\t\tfor (int y = 0, dp = 0; y < imgHeight; ++y) {", "-\t\t\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "-\t\t\t\t\t\tif (OS.GetPixel(srcHdc, x, y) != 0) {", "-\t\t\t\t\t\t\tsrcData[dp + 3] = (byte)0;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tsrcData[dp + 3] = (byte)0xFF;", "+\t\t\t\tif (bm.bmBitsPixel != 32) {", "+\t\t\t\t\tfor (int y = 0, dp = 0; y < imgHeight; ++y) {", "+\t\t\t\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "+\t\t\t\t\t\t\t\tif (OS.GetPixel(srcHdc, x, y) != 0) {", "+\t\t\t\t\t\t\t\t\tsrcData[dp + 3] = (byte)0;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tsrcData[dp + 3] = (byte)0xFF;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tdp += 4;", "-\t\t\t\t\t\tdp += 4;"]}], "num": 6432}
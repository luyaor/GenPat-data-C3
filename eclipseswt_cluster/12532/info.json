{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7027a3e7843e86e05b737ed1694a4086", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e66f7e90a179f3563dd81831a1d27171", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ColorDialog.java", "commitBeforeChange": "d81992ac3e894363b9e0990d7b4e1bfc6b231914", "commitAfterChange": "0edff76e3e3201d3f5843887fe8abb802322fd4f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public RGB open ()", "signatureAfterChange": " public RGB open ()", "diff": ["+\t\t\trgba.alpha = 1;", "-\t\tOS.gtk_color_chooser_set_use_alpha (handle, false);", "-", "-\t\tlong /*int*/ colors = OS.g_malloc(GdkColor.sizeof * rgbs.length);", "-\t\tfor (int i=0; i<rgbs.length; i++) {", "-\t\t\tRGB rgb = rgbs[i];", "-\t\t\tif (rgb != null) {", "-\t\t\t\tcolor.red = (short)((rgb.red & 0xFF) | ((rgb.red & 0xFF) << 8));", "-\t\t\t\tcolor.green = (short)((rgb.green & 0xFF) | ((rgb.green & 0xFF) << 8));", "-\t\t\t\tcolor.blue = (short)((rgb.blue & 0xFF) | ((rgb.blue & 0xFF) << 8));", "-\t\t\t\tOS.memmove (colors + i * GdkColor.sizeof, color, GdkColor.sizeof);", "+\t\tif (OS.GTK_VERSION >= OS.VERSION (3, 4, 0)) {", "+\t\t\tint colorsPerRow = 9;", "+\t\t\tlong /*int*/ gdkRGBAS = OS.g_malloc(GdkRGBA.sizeof * rgbs.length);", "+\t\t\tfor (int i=0; i<rgbs.length; i++) {", "+\t\t\t\tRGB rgbS = rgbs[i];", "+\t\t\t\tif (rgbS != null) {", "+\t\t\t\t\trgba.red = (double) rgbS.red / 255;", "+\t\t\t\t\trgba.green = (double) rgbS.green / 255;", "+\t\t\t\t\trgba.blue = (double) rgbS.blue / 255;", "+\t\t\t\t\tOS.memmove (gdkRGBAS + i * GdkRGBA.sizeof, rgba, GdkRGBA.sizeof);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.gtk_color_chooser_add_palette(handle, OS.GTK_ORIENTATION_HORIZONTAL, colorsPerRow,", "+\t\t\t\t\trgbs.length, gdkRGBAS);", "+\t\t\tOS.gtk_color_chooser_set_rgba (handle, rgba);", "+", "+", "+\t\t\tif (OS.gtk_color_chooser_get_use_alpha(handle)) {", "+\t\t\t\tOS.gtk_color_chooser_set_use_alpha (handle, false);", "+\t\t\t}", "+\t\t\tOS.g_free (gdkRGBAS);", "+\t\t} else {", "+\t\t\tlong /*int*/ gdkColors = OS.g_malloc(GdkColor.sizeof * rgbs.length);", "+\t\t\tfor (int i=0; i<rgbs.length; i++) {", "+\t\t\t\tRGB rgb = rgbs[i];", "+\t\t\t\tif (rgb != null) {", "+\t\t\t\t\tcolor.red = (short)((rgb.red & 0xFF) | ((rgb.red & 0xFF) << 8));", "+\t\t\t\t\tcolor.green = (short)((rgb.green & 0xFF) | ((rgb.green & 0xFF) << 8));", "+\t\t\t\t\tcolor.blue = (short)((rgb.blue & 0xFF) | ((rgb.blue & 0xFF) << 8));", "+\t\t\t\t\tOS.memmove (gdkColors + i * GdkColor.sizeof, color, GdkColor.sizeof);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tlong /*int*/ strPtr = OS.gtk_color_selection_palette_to_string(gdkColors, rgbs.length);", "+\t\t\tint length = OS.strlen (strPtr);", "+", "+\t\t\tbuffer = new byte [length];", "+\t\t\tOS.memmove (buffer, strPtr, length);", "+\t\t\tString paletteString = new String (Converter.mbcsToWcs (null, buffer));", "+\t\t\tbuffer = Converter.wcsToMbcs (null, paletteString, true);", "+\t\t\tOS.g_free (gdkColors);", "+\t\t\tlong /*int*/ settings = OS.gtk_settings_get_default ();", "+\t\t\tif (settings != 0) {", "+\t\t\t\tOS.gtk_settings_set_string_property(settings, OS.gtk_color_palette, buffer, Converter.wcsToMbcs (null, \"gtk_color_selection_palette_to_string\", true));", "+", "-\t\tlong /*int*/ strPtr = OS.gtk_color_selection_palette_to_string(colors, rgbs.length);", "-\t\tint length = OS.strlen (strPtr);", "-\t\tbuffer = new byte [length];", "-\t\tOS.memmove (buffer, strPtr, length);", "-\t\tString paletteString = new String (Converter.mbcsToWcs (null, buffer));", "-\t\tbuffer = Converter.wcsToMbcs (null, paletteString, true);", "-\t\tOS.g_free (colors);", "-\t\tlong /*int*/ settings = OS.gtk_settings_get_default ();", "-\t\tif (settings != 0) {", "-\t\t\tOS.gtk_settings_set_string_property(settings, OS.gtk_color_palette, buffer, Converter.wcsToMbcs (null, \"gtk_color_selection_palette_to_string\", true));", "-\t\t}", "+", "-", "+", "+\t\t\tlong /*int*/ settings = OS.gtk_settings_get_default ();", "+\t\t\tif (settings != 0) {", "+", "+\t\t\t\tlong /*int*/ [] ptr = new long /*int*/ [1];", "+\t\t\t\tOS.g_object_get (settings, OS.gtk_color_palette, ptr, 0);", "+\t\t\t\tif (ptr [0] != 0) {", "+\t\t\t\t\tint length = OS.strlen (ptr [0]);", "+\t\t\t\t\tbuffer = new byte [length];", "+\t\t\t\t\tOS.memmove (buffer, ptr [0], length);", "+\t\t\t\t\tOS.g_free (ptr [0]);", "+\t\t\t\t\tString [] gdkColorStrings = null;", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\tString gtk_color_palette = new String(Converter.mbcsToWcs (null, buffer));", "+\t\t\t\t\t\tgdkColorStrings = splitString(gtk_color_palette, ':');", "+\t\t\t\t\t\tlength = gdkColorStrings.length;", "+\t\t\t\t\t}", "+\t\t\t\t\trgbs = new RGB [length];", "+\t\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\t\tString colorString = gdkColorStrings[i];", "+\t\t\t\t\t\tbuffer = Converter.wcsToMbcs (null, colorString, true);", "+\t\t\t\t\t\tOS.gdk_color_parse(buffer, color);", "+\t\t\t\t\t\tint redI = (color.red >> 8) & 0xFF;", "+\t\t\t\t\t\tint greenI = (color.green >> 8) & 0xFF;", "+\t\t\t\t\t\tint blueI = (color.blue >> 8) & 0xFF;", "+\t\t\t\t\t\trgbs [i] = new RGB (redI, greenI, blueI);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\tlong /*int*/ settings = OS.gtk_settings_get_default ();", "-\tif (settings != 0) {", "-\t\tlong /*int*/ [] ptr = new long /*int*/ [1];", "-\t\tOS.g_object_get (settings, OS.gtk_color_palette, ptr, 0);", "-\t\tif (ptr [0] != 0) {", "-\t\t\tint length = OS.strlen (ptr [0]);", "-\t\t\tbuffer = new byte [length];", "-\t\t\tOS.memmove (buffer, ptr [0], length);", "-\t\t\tOS.g_free (ptr [0]);", "-\t\t\tString [] gdkColorStrings = null;", "-\t\t\tif (length > 0) {", "-\t\t\t\tString gtk_color_palette = new String(Converter.mbcsToWcs (null, buffer));", "-\t\t\t\tgdkColorStrings = splitString(gtk_color_palette, ':');", "-\t\t\t\tlength = gdkColorStrings.length;", "-\t\t\t}", "-\t\t\trgbs = new RGB [length];", "-\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\tString colorString = gdkColorStrings[i];", "-\t\t\t\tbuffer = Converter.wcsToMbcs (null, colorString, true);", "-\t\t\t\tOS.gdk_color_parse(buffer, color);", "-\t\t\t\tint red = (color.red >> 8) & 0xFF;", "-\t\t\t\tint green = (color.green >> 8) & 0xFF;", "-\t\t\t\tint blue = (color.blue >> 8) & 0xFF;", "-\t\t\t\trgbs [i] = new RGB (red, green, blue);", "-\t\t\t}", "-\t\t}", "-\t}", "+", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b997bf85afcfd3f6fc345dc369ef0ae9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ColorDialog.java", "commitBeforeChange": "e42c3e44904fd7e5ccbad39e2ba440dcb5cf8eba", "commitAfterChange": "7fc64542adf6b6fd095c79d02a839c04648673dd", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public RGB open ()", "signatureAfterChange": " public RGB open ()", "diff": ["-\t\tStringBuffer sb = new StringBuffer();", "+\t\tint /*long*/ colors = OS.g_malloc(GdkColor.sizeof * rgbs.length);", "-\t\t\t\tsb.append(\"#\"); // $NON_NLS1$", "-\t\t\t\tsb.append(String.format(\"%02x\", new Integer[] {new Integer(rgb.red & 0xFF)}));", "-\t\t\t\tsb.append(String.format(\"%02x\", new Integer[] {new Integer(rgb.green & 0xFF)}));", "-\t\t\t\tsb.append(String.format(\"%02x\", new Integer[] {new Integer(rgb.blue & 0xFF)}));", "-\t\t\t\tif (i<rgbs.length-1) sb.append(\":\"); // $NON_NLS1$", "+\t\t\t\tcolor.red = (short)((rgb.red & 0xFF) | ((rgb.red & 0xFF) << 8));", "+\t\t\t\tcolor.green = (short)((rgb.green & 0xFF) | ((rgb.green & 0xFF) << 8));", "+\t\t\t\tcolor.blue = (short)((rgb.blue & 0xFF) | ((rgb.blue & 0xFF) << 8));", "+\t\t\t\tOS.memmove (colors + i * GdkColor.sizeof, color, GdkColor.sizeof);", "+\t\tint /*long*/ strPtr = OS.gtk_color_selection_palette_to_string(colors, rgbs.length);", "+\t\tint length = OS.strlen (strPtr);", "+\t\tbuffer = new byte [length];", "+\t\tOS.memmove (buffer, strPtr, length);", "+\t\tString paletteString = new String (Converter.mbcsToWcs (null, buffer));", "+\t\tbuffer = Converter.wcsToMbcs (null, paletteString, true);", "+\t\tOS.g_free (colors);", "-\t\t\tSystem.out.println(\"Setting color palette to: \" + sb.toString());", "-\t\t\tbuffer = Converter.wcsToMbcs (null, sb.toString(), true);", "-\t\t", "-\t\tint /*long*/ settings = OS.gtk_settings_get_default ();", "-\t\tif (settings != 0) {", "-\t\t\tint /*long*/ [] gcp_buffer = new int /*long*/ [1];", "-\t\t\tOS.g_object_get (settings, OS.gtk_color_palette, gcp_buffer, 0);", "-\t\t\tif (gcp_buffer [0] != 0) {", "-\t\t\t\tint /*long*/ paletteString = gcp_buffer [0];", "-\t\t\t\tint length = OS.strlen (paletteString);", "-\t\t\t\tbuffer = new byte [length + 1];", "-\t\t\t\tOS.memmove (buffer, paletteString, length);", "-\t\t\t\t// TODO: free or not?", "-\t\t\t\t//OS.g_free (paletteString);", "-\t\t\t\tString [] gdkColorString = new String(buffer).split(\":\");", "-\t\t\t\trgbs = new RGB [gdkColorString.length];", "-\t\t\t\tfor (int i=0; i<gdkColorString.length; i++) {", "-\t\t\t\t\tString colorString = gdkColorString[i];", "-\t\t\t\t\tbuffer = Converter.wcsToMbcs (null, colorString, true);", "-\t\t\t\t\tOS.gdk_color_parse(buffer, color);", "-\t\t\t\t\tred = (color.red >> 8) & 0xFF;", "-\t\t\t\t\tgreen = (color.green >> 8) & 0xFF;", "-\t\t\t\t\tblue = (color.blue >> 8) & 0xFF;", "-\t\t\t\t\trgbs [i] = new RGB (red, green, blue);", "-\t\t\t\t}", "+\t}", "+\tint /*long*/ settings = OS.gtk_settings_get_default ();", "+\tif (settings != 0) {", "+\t\tint /*long*/ [] ptr = new int /*long*/ [1];", "+\t\tOS.g_object_get (settings, OS.gtk_color_palette, ptr, 0);", "+\t\tif (ptr [0] != 0) {", "+\t\t\tint length = OS.strlen (ptr [0]);", "+\t\t\tbuffer = new byte [length];", "+\t\t\tOS.memmove (buffer, ptr [0], length);", "+\t\t\tOS.g_free (ptr [0]);", "+\t\t\tString [] gdkColorStrings = new String(Converter.mbcsToWcs (null, buffer)).split(\":\");", "+\t\t\tlength = length == 0 ? 0 : gdkColorStrings.length;", "+\t\t\trgbs = new RGB [length];", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tString colorString = gdkColorStrings[i];", "+\t\t\t\tbuffer = Converter.wcsToMbcs (null, colorString, true);", "+\t\t\t\tOS.gdk_color_parse(buffer, color);", "+\t\t\t\tint red = (color.red >> 8) & 0xFF;", "+\t\t\t\tint green = (color.green >> 8) & 0xFF;", "+\t\t\t\tint blue = (color.blue >> 8) & 0xFF;", "+\t\t\t\trgbs [i] = new RGB (red, green, blue);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a0811b17f4f2dd383627e978084b29e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ColorDialog.java", "commitBeforeChange": "0baf41d40f3dd8716522c72f50e1eb2c9697bedd", "commitAfterChange": "4cf183f94d4d4d275955b891045c44c32b075e0a", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " public RGB open ()", "signatureAfterChange": " public RGB open ()", "diff": ["+\tif (rgbs != null) {", "+\t\tint /*long*/ colors = OS.g_malloc(GdkColor.sizeof * rgbs.length);", "+\t\tfor (int i=0; i<rgbs.length; i++) {", "+\t\t\tRGB rgb = rgbs[i];", "+\t\t\tif (rgb != null) {", "+\t\t\t\tcolor.red = (short)((rgb.red & 0xFF) | ((rgb.red & 0xFF) << 8));", "+\t\t\t\tcolor.green = (short)((rgb.green & 0xFF) | ((rgb.green & 0xFF) << 8));", "+\t\t\t\tcolor.blue = (short)((rgb.blue & 0xFF) | ((rgb.blue & 0xFF) << 8));", "+\t\t\t\tOS.memmove (colors + i * GdkColor.sizeof, color, GdkColor.sizeof);", "+\t\t\t}", "+\t\t}", "+\t\tint /*long*/ strPtr = OS.gtk_color_selection_palette_to_string(colors, rgbs.length);", "+\t\tint length = OS.strlen (strPtr);", "+\t\tbuffer = new byte [length];", "+\t\tOS.memmove (buffer, strPtr, length);", "+\t\tString paletteString = new String (Converter.mbcsToWcs (null, buffer));", "+\t\tbuffer = Converter.wcsToMbcs (null, paletteString, true);", "+\t\tOS.g_free (colors);", "+\t\tint /*long*/ settings = OS.gtk_settings_get_default ();", "+\t\tif (settings != 0) {", "+\t\t\tOS.gtk_settings_set_string_property(settings, OS.gtk_color_palette, buffer, Converter.wcsToMbcs (null, \"gtk_color_selection_palette_to_string\", true));", "+\t\t}", "+\t}", "+\tint /*long*/ settings = OS.gtk_settings_get_default ();", "+\tif (settings != 0) {", "+\t\tint /*long*/ [] ptr = new int /*long*/ [1];", "+\t\tOS.g_object_get (settings, OS.gtk_color_palette, ptr, 0);", "+\t\tif (ptr [0] != 0) {", "+\t\t\tint length = OS.strlen (ptr [0]);", "+\t\t\tbuffer = new byte [length];", "+\t\t\tOS.memmove (buffer, ptr [0], length);", "+\t\t\tOS.g_free (ptr [0]);", "+\t\t\tString [] gdkColorStrings = new String(Converter.mbcsToWcs (null, buffer)).split(\":\");", "+\t\t\tlength = length == 0 ? 0 : gdkColorStrings.length;", "+\t\t\trgbs = new RGB [length];", "+\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\tString colorString = gdkColorStrings[i];", "+\t\t\t\tbuffer = Converter.wcsToMbcs (null, colorString, true);", "+\t\t\t\tOS.gdk_color_parse(buffer, color);", "+\t\t\t\tint red = (color.red >> 8) & 0xFF;", "+\t\t\t\tint green = (color.green >> 8) & 0xFF;", "+\t\t\t\tint blue = (color.blue >> 8) & 0xFF;", "+\t\t\t\trgbs [i] = new RGB (red, green, blue);", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0261c11f530d36cea9142d6466e9338", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ColorDialog.java", "commitBeforeChange": "e48fdc7814a30e28e57b66aebebdc3a46aff9d16", "commitAfterChange": "e42c3e44904fd7e5ccbad39e2ba440dcb5cf8eba", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": " public RGB open ()", "signatureAfterChange": " public RGB open ()", "diff": ["+\tif (rgbs != null) {", "+\t\tStringBuffer sb = new StringBuffer();", "+\t\tfor (int i=0; i<rgbs.length; i++) {", "+\t\t\tRGB rgb = rgbs[i];", "+\t\t\tif (rgb != null) {", "+\t\t\t\tsb.append(\"#\"); // $NON_NLS1$", "+\t\t\t\tsb.append(String.format(\"%02x\", new Integer[] {new Integer(rgb.red & 0xFF)}));", "+\t\t\t\tsb.append(String.format(\"%02x\", new Integer[] {new Integer(rgb.green & 0xFF)}));", "+\t\t\t\tsb.append(String.format(\"%02x\", new Integer[] {new Integer(rgb.blue & 0xFF)}));", "+\t\t\t\tif (i<rgbs.length-1) sb.append(\":\"); // $NON_NLS1$", "+\t\t\t}", "+\t\t}", "+\t\tint /*long*/ settings = OS.gtk_settings_get_default ();", "+\t\tif (settings != 0) {", "+\t\t\tSystem.out.println(\"Setting color palette to: \" + sb.toString());", "+\t\t\tbuffer = Converter.wcsToMbcs (null, sb.toString(), true);", "+\t\t\tOS.gtk_settings_set_string_property(settings, OS.gtk_color_palette, buffer, Converter.wcsToMbcs (null, \"gtk_color_selection_palette_to_string\", true));", "+\t\t}", "+\t}", "+\t\t", "+\t\tint /*long*/ settings = OS.gtk_settings_get_default ();", "+\t\tif (settings != 0) {", "+\t\t\tint /*long*/ [] gcp_buffer = new int /*long*/ [1];", "+\t\t\tOS.g_object_get (settings, OS.gtk_color_palette, gcp_buffer, 0);", "+\t\t\tif (gcp_buffer [0] != 0) {", "+\t\t\t\tint /*long*/ paletteString = gcp_buffer [0];", "+\t\t\t\tint length = OS.strlen (paletteString);", "+\t\t\t\tbuffer = new byte [length + 1];", "+\t\t\t\tOS.memmove (buffer, paletteString, length);", "+\t\t\t\t// TODO: free or not?", "+\t\t\t\t//OS.g_free (paletteString);", "+\t\t\t\tString [] gdkColorString = new String(buffer).split(\":\");", "+\t\t\t\trgbs = new RGB [gdkColorString.length];", "+\t\t\t\tfor (int i=0; i<gdkColorString.length; i++) {", "+\t\t\t\t\tString colorString = gdkColorString[i];", "+\t\t\t\t\tbuffer = Converter.wcsToMbcs (null, colorString, true);", "+\t\t\t\t\tOS.gdk_color_parse(buffer, color);", "+\t\t\t\t\tred = (color.red >> 8) & 0xFF;", "+\t\t\t\t\tgreen = (color.green >> 8) & 0xFF;", "+\t\t\t\t\tblue = (color.blue >> 8) & 0xFF;", "+\t\t\t\t\trgbs [i] = new RGB (red, green, blue);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}], "num": 12532}
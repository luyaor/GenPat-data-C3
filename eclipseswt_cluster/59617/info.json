{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1651762609cdf5d85c11e41b0c335193", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bba3916555f579ce03f09e607cff357d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/photon/org/eclipse/swt/program/Program.java", "commitBeforeChange": "8d68e19f4bda6e001e1363ed67c9cd15d0532283", "commitAfterChange": "1a364da4bc56e39627bed4944a7f24a0f474b234", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r public static Program findProgram (String extension)", "signatureAfterChange": "\r public static Program findProgram (String extension)", "diff": ["+\tString[][] table = loadAssociationTable ();\r", "+\tif (table == null) return null;\r", "+\tfor (int i = 0; i < table.length; i++) {\r", "+\t\tString[] entry = table [i];\r", "+\t\tif (entry == null) break;\r", "+\t\tString [] exts = expandExtensions (entry [0]);\r", "+\t\tfor (int j = 0; j < exts.length; j++) {\r", "+\t\t\tString ext = exts[j];\r", "+\t\t\tif (ext == null) break;\r", "+\t\t\tif (ext.endsWith (extension)) {\r", "+\t\t\t\tProgram program = new Program ();\r", "+\t\t\t\tprogram.extension = ext;\r", "+\t\t\t\tprogram.command = entry [1];\r", "+\t\t\t\tint index;\r", "+\t\t\t\tString name = entry [1];\r", "+\t\t\t\tif ((index = name.indexOf(' ')) != -1) {\r", "+\t\t\t\t\tname = name.substring (0, index);\r", "+\t\t\t\t}\r", "+\t\t\t\tprogram.name = name;\r", "+\t\t\t\treturn program;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dddb57afdfe7d81e23910860ebd7fa7e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/photon/org/eclipse/swt/program/Program.java", "commitBeforeChange": "8d68e19f4bda6e001e1363ed67c9cd15d0532283", "commitAfterChange": "1a364da4bc56e39627bed4944a7f24a0f474b234", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public static String [] getExtensions ()", "signatureAfterChange": "\r public static String [] getExtensions ()", "diff": ["-\treturn new String[0];\r", "+\tString[][] table = loadAssociationTable ();\r", "+\tif (table == null) return new String [0];\r", "+\tint count = 0;\r", "+\tString[] extensions = new String [50];\r", "+\tfor (int i = 0; i < table.length; i++) {", "+\t\tString[] entry = table [i];\r", "+\t\tif (entry == null) break;", "+\t\tString [] exts = expandExtensions (entry [0]);\r", "+\t\tfor (int j = 0; j < exts.length; j++) {", "+\t\t\tString ext = exts[j];", "+\t\t\tif (ext == null) break;", "+\t\t\tif (count == extensions.length) {\r", "+\t\t\t\tString [] newExtensions = new String [count + 50];\r", "+\t\t\t\tSystem.arraycopy (extensions, 0, newExtensions, 0, count);\r", "+\t\t\t\textensions = newExtensions;\r", "+\t\t\t}\r", "+\t\t\textensions[count++] = ext;", "+\t\t}\r", "+\t}\r", "+\tif (count != extensions.length) {\r", "+\t\tString [] newExtensions = new String [count];\r", "+\t\tSystem.arraycopy (extensions, 0, newExtensions, 0, count);\r", "+\t\textensions = newExtensions;\r", "+\t}\r", "+\treturn extensions;\r"]}], "num": 59617}
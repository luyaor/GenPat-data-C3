{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29b7ddb91a345c7e884b57cf2dc3047b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4a72f17becfcd8c81a5a374e5ef1437", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet352.java", "commitBeforeChange": "dcc0e2e76a96518f2bd60f127e49f8a4bd5ba452", "commitAfterChange": "64349bf9cd19222d7f7bef44cb4d0e244ca7ed8f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic static void main(String [] args)", "signatureAfterChange": " \t \tpublic static void main (String [] args)", "diff": ["-", "-\tpublic static void main(String [] args) {", "-\t\tDisplay display = new Display();", "-\t\tShell shell = new Shell(display);", "-\t\twhile (!shell.isDisposed()) {", "-\t\t\tif (!display.readAndDispatch()) display.sleep();", "-\t\tdisplay.dispose();", "+\t", "+\tpublic static void main (String [] args) {", "+\t\tfinal Display display = new Display ();", "+\t\tfinal Shell shell = new Shell (display);", "+\t\tshell.setLayout(new FillLayout(SWT.HORIZONTAL));", "+\t\tshell.setText (\"Touch demonstration\");", "+\t\t", "+\t\tTouchListener tl = new TouchListener() {", "+\t\t\tpublic void touch(TouchEvent e) {", "+\t\t\t\t", "+\t\t\t\tTouch touches[] = e.touches;", "+", "+\t\t\t\tfor (int i = 0; i < touches.length; i++) {", "+\t\t\t\t\tTouch currTouch = touches[i];", "+", "+\t\t\t\t\tif ((currTouch.state & (SWT.TOUCHSTATE_UP)) != 0) {", "+\t\t\t\t\t\ttouchLocations.remove(currTouch.id);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tCircleInfo info = touchLocations.get(currTouch.id);", "+\t\t\t\t\t\tPoint newPoint = Display.getCurrent().map(null, (Control)e.widget, new Point((int)currTouch.x, (int)currTouch.y));", "+", "+\t\t\t\t\t\tif (info == null) {", "+\t\t\t\t\t\t\tinfo = new CircleInfo(newPoint, display.getSystemColor((colorIndex + 2) % PAINTABLE_COLORS));", "+\t\t\t\t\t\t\tcolorIndex++;", "+\t\t\t\t\t\t}", "+", "+\t\t\t\t\t\tinfo.center = newPoint;", "+\t\t\t\t\t\ttouchLocations.put(currTouch.id, info);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\tControl c = (Control)e.widget;", "+\t\t\t\tc.redraw();", "+\t\t\t}", "+", "+\t\t};", "+", "+\t\tPaintListener pl = new PaintListener() {", "+\t\t\tpublic void paintControl(PaintEvent e) {", "+\t\t\t\tIterator<Map.Entry<Long, CircleInfo>> iter = touchLocations.entrySet().iterator();", "+\t\t\t\twhile (iter.hasNext()) {", "+\t\t\t\t\tCircleInfo ci = iter.next().getValue();", "+\t\t\t\t\te.gc.setBackground(ci.color);", "+\t\t\t\t\te.gc.fillOval(ci.center.x - CIRCLE_RADIUS, ci.center.y - CIRCLE_RADIUS, CIRCLE_RADIUS * 2, CIRCLE_RADIUS * 2);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t};", "+\t\t", "+\t\tCanvas c = new Canvas(shell, SWT.NONE);", "+\t\tc.setTouchEventsEnabled(true);", "+\t\tc.setSize(800, 800);", "+\t\tc.addTouchListener(tl);", "+\t\tc.addPaintListener(pl);", "+", "+\t\tshell.setSize (800, 800);", "+\t\tshell.open ();", "+\t\twhile (!shell.isDisposed ()) {", "+\t\t\tif (!display.readAndDispatch ()) display.sleep ();", "+\t\t}", "+\t\tdisplay.dispose ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a81bba94202748752306f4abbf745f19", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet353.java", "commitBeforeChange": "3bbaf9a8dc2ba8cdccf18eb8d70da4b923ade329", "commitAfterChange": "c59b97dacab2962be63d87127b336c1a2c6077f0", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tpublic static void main(String [] args)", "signatureAfterChange": "  \tpublic static void main(String [] args)", "diff": ["+", "-\t\tShell shell = new Shell(display);", "+\t\tfinal Shell shell = new Shell(display);", "+", "+\t\tGestureListener gl = new GestureListener() {", "+\t\t\tpublic void gesture(GestureEvent ge) {", "+\t\t\t\tif (ge.detail == SWT.GESTURE_BEGIN) {", "+\t\t\t\t\tcurrentRotation = rotation;", "+\t\t\t\t\tcurrentMagnification = magnification;", "+\t\t\t\t}", "+", "+\t\t\t\tif (ge.detail == SWT.GESTURE_ROTATE) {", "+\t\t\t\t\trotation = currentRotation - ge.rotation;", "+\t\t\t\t\tshell.redraw();", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif (ge.detail == SWT.GESTURE_MAGNIFY) {", "+\t\t\t\t\tmagnification = (float) (currentMagnification * ge.magnification);", "+\t\t\t\t\tshell.redraw();", "+\t\t\t\t}", "+", "+\t\t\t\tif (ge.detail == SWT.GESTURE_SWIPE) {", "+\t\t\t\t\t// xDirection and yDirection indicate direction for GESTURE_SWIPE.", "+\t\t\t\t\t// For this example, just move in that direction to demonstrate it's working.", "+\t\t\t\t\torigin.x += ge.xDirection * 50;", "+\t\t\t\t\torigin.y += ge.yDirection * 50;", "+\t\t\t\t\tshell.redraw();", "+\t\t\t\t}", "+", "+\t\t\t\tif (ge.detail == SWT.GESTURE_PAN) {", "+\t\t\t\t\torigin.x += ge.xDirection;", "+\t\t\t\t\torigin.y += ge.yDirection;", "+\t\t\t\t\tshell.redraw();", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\tif (ge.detail == SWT.GESTURE_END) {", "+\t\t\t\t\t", "+\t\t\t\t}\t\t", "+\t\t\t}", "+\t\t};", "+", "+\t\tPaintListener pl = new PaintListener() {", "+\t\t\tpublic void paintControl(PaintEvent e) {", "+\t\t\t\tTransform t = new Transform(Display.getCurrent());", "+\t\t\t\tt.translate(origin.x, origin.y);", "+\t\t\t\tt.translate(size.x / 2, size.y / 2);", "+\t\t\t\tt.rotate((float) rotation);", "+\t\t\t\tt.translate(-size.x / 2, -size.y / 2);", "+\t\t\t\tt.translate(-origin.x, -origin.y);", "+\t\t\t\te.gc.setAntialias(SWT.ON);", "+\t\t\t\te.gc.setTransform(t);", "+\t\t\t\t", "+\t\t\t\t// Because of bug 253670, drawRectangle is incorrect when the rotation is near 45, 135, 225 or 315 degrees.", "+\t\t\t\t// Uncomment this next line and adjust the bitfield for your platform. See GC#DRAW_OFFSET.", "+\t\t\t\t//e.gc.getGCData().state |= 1 << 9;", "+\t\t\t\t", "+\t\t\t\te.gc.drawRectangle(origin.x, origin.y, (int)(size.x * magnification), (int)(size.y * magnification));", "+\t\t\t\tt.dispose();", "+\t\t\t}", "+\t\t};", "+\t\t", "+\t\tshell.addPaintListener(pl);", "+\t\tshell.addGestureListener(gl);", "+\t\tshell.setSize(400, 400);", "+\t\tsize = new Point(50, 50);", "+\t\torigin = new Point((shell.getSize().x - size.x) / 2, (shell.getSize().y - size.y) / 2);", "+\t\tshell.open();", "+"]}], "num": 63228}
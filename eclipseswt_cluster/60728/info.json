{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e2615a7b624af9802943354d831296c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b69526daf34509a44df40439da128d80", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "865e3942831d3760ee7191d48e9ab4f68e79460e", "commitAfterChange": "aad8ecbff6b21f1c3be77176ac706b610032dcc6", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public int getOffset(int x, int y, int[] trailing)", "signatureAfterChange": " public int getOffset(int x, int y, int[] trailing)", "diff": ["+\t", "+\t/*", "+\t* Feature in GTK.  pango_layout_xy_to_index() returns the ", "+\t* logical end/start offset of a line when the coordinates are outside ", "+\t* the line bounds. In SWT the correct behavior is to return the closest ", "+\t* visual offset. The fix is to clamp the coordinates inside the  ", "+\t* line bounds.", "+\t*/", "+\tint /*long*/ iter = OS.pango_layout_get_iter(layout);", "+\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tPangoRectangle rect = new PangoRectangle();", "+\tdo {", "+\t\tOS.pango_layout_iter_get_line_extents(iter, null, rect);", "+\t\trect.y = OS.PANGO_PIXELS(rect.y);", "+\t\trect.height = OS.PANGO_PIXELS(rect.height);", "+\t\tif (rect.y <= y && y < rect.y + rect.height) {", "+\t\t\trect.x = OS.PANGO_PIXELS(rect.x);", "+\t\t\trect.width = OS.PANGO_PIXELS(rect.width);", "+\t\t\tif (x >= rect.x + rect.width) x = rect.x + rect.width - 1;", "+\t\t\tif (x < rect.x) x = rect.x;", "+\t\t\tbreak;", "+\t\t}", "+\t} while (OS.pango_layout_iter_next_line(iter));", "+\tOS.pango_layout_iter_free(iter);", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9697d9c92940544b05a8ed04f871d587", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/motif/org/eclipse/swt/printing/Printer.java", "commitBeforeChange": "e98339cc7fb1c72d59ae0703dfdb477f6c4de9c5", "commitAfterChange": "697358ce3235fa7c9f7df6b81c2eaac5ddca47d9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r \r protected void init()", "signatureAfterChange": "  protected void init()", "diff": ["-\r", "-protected void init() {\r", "-\tsuper.init();\r", "-\t\r", "-\t/* Create the printContext for the printer */\r", "-\t/* Use the character encoding for the default locale */\r", "-\tbyte[] name = Converter.wcsToMbcs(null, data.name, true);\r", "-\tprintContext = OS.XpCreateContext(xDisplay, name);\r", "-\tif (printContext == OS.None) {\r", "-\t\t/* can't create print context */\r", "-\t\t//OS.XCloseDisplay(xDisplay);\r", "-\t\tSWT.error(SWT.ERROR_NO_HANDLES);\r", "-\t}\r", "-\r", "-\t/* Set the printContext into the display */\r", "-\tOS.XpSetContext(xDisplay, printContext); \r", "-\r", "-\t/* Get the printer's screen */\r", "-\txScreen = OS.XpGetScreenOfContext(xDisplay, printContext);\r", "-\t\r", "-\t/* Initialize Motif */\r", "-\tint widgetClass = OS.TopLevelShellWidgetClass();\r", "-\tint shellHandle = OS.XtAppCreateShell(null, null, widgetClass, xDisplay, null, 0);\r", "-\tOS.XtDestroyWidget(shellHandle);\r", "-\t\r", "-\t/* Initialize the default font */\r", "-\t/* Use the character encoding for the default locale */\r", "-\tbyte [] buffer = Converter.wcsToMbcs(null, \"-*-courier-medium-r-*-*-*-120-*-*-*-*-*-*\", true);\r", "-\tint fontListEntry = OS.XmFontListEntryLoad(xDisplay, buffer, OS.XmFONT_IS_FONTSET, OS.XmFONTLIST_DEFAULT_TAG);\r", "-\tif (fontListEntry == 0) SWT.error(SWT.ERROR_NO_HANDLES);\r", "-\tint defaultFontList = OS.XmFontListAppendEntry(0, fontListEntry);\r", "-\tOS.XmFontListEntryFree(new int[]{fontListEntry});\r", "-\tdefaultFont = Font.motif_new(this, defaultFontList);\r", "-}\r", "+", "+protected void init() {", "+\tsuper.init();", "+\t", "+\t/* Use the character encoding for the default locale */", "+\tbyte[] buffer = Converter.wcsToMbcs(null, data.name, true);", "+", "+\t/*", "+\t * Bug in Xp. If the printer name is not valid, Xp will", "+\t * cause a segmentation fault. The fix is to check if the", "+\t * printer name is valid before calling XpCreateContext().\r\t */", "+\tint[] count = new int[1];", "+\tint plist = OS.XpGetPrinterList(xDisplay, buffer, count);", "+\tif (plist != 0) OS.XpFreePrinterList(plist);", "+\tif (count[0] == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+", "+\t/* Create the printContext for the printer */", "+\tprintContext = OS.XpCreateContext(xDisplay, buffer);", "+", "+\t/* Set the printContext into the display */", "+\tOS.XpSetContext(xDisplay, printContext);", "+", "+\t/* Get the printer's screen */", "+\txScreen = OS.XpGetScreenOfContext(xDisplay, printContext);", "+\tif (xScreen == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+", "+\t/* Initialize the xDrawable */", "+\tXRectangle rect = new XRectangle();", "+\tshort[] width = new short[1];", "+\tshort[] height = new short[1];", "+\tOS.XpGetPageDimensions(xDisplay, printContext, width, height, rect);", "+\txDrawable = OS.XCreateWindow(xDisplay, OS.XRootWindowOfScreen(xScreen), ", "+\t\t0, 0, rect.width, rect.height, 0,", "+\t\tOS.CopyFromParent, OS.CopyFromParent, OS.CopyFromParent, 0, 0);", "+\tif (xDrawable == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+", "+\t/* Initialize the default font */", "+\t/* Use the character encoding for the default locale */", "+\tPoint dpi = getDPI();", "+\tbuffer = Converter.wcsToMbcs(null, \"-*-courier-medium-r-*-*-*-120-\"+dpi.x+\"-\"+dpi.y+\"-*-*-iso8859-1\", true);", "+\tint fontListEntry = OS.XmFontListEntryLoad(xDisplay, buffer, OS.XmFONT_IS_FONTSET, OS.XmFONTLIST_DEFAULT_TAG);", "+\tif (fontListEntry == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint defaultFontList = OS.XmFontListAppendEntry(0, fontListEntry);", "+\tOS.XmFontListEntryFree(new int[]{fontListEntry});", "+\tdefaultFont = Font.motif_new(this, defaultFontList);", "+}"]}], "num": 60728}
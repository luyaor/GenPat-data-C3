{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b37e616a859f719ede66bbbd4a41313a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e478ae463df204c690a63bc2d2fa11cd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/TreeDropTargetEffect.java", "commitBeforeChange": "8200799fd4fc9f26a937f37e60a9ef54396d4890", "commitAfterChange": "ce281cb196b10adcbca7d0a8e66ab94ce171eb76", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void dragOver(DropTargetEvent event)", "signatureAfterChange": " \tpublic void dragOver(DropTargetEvent event)", "diff": ["-\t\tTree tree = (Tree) control;", "-\t\tTreeItem item = (TreeItem)getItem(tree, event.x, event.y);", "-\t\tif ((effect & DND.FEEDBACK_EXPAND) == 0) {", "-\t\t\texpandBeginTime = 0;", "-\t\t\texpandItem = null;", "-\t\t} else {", "-\t\t\tif (item != null && item.equals(expandItem) && expandBeginTime != 0) {", "-\t\t\t\tif (System.currentTimeMillis() >= expandBeginTime) {", "-\t\t\t\t\tif (item.getItemCount() > 0 && !item.getExpanded()) {", "-\t\t\t\t\t\tEvent e = new Event();", "-\t\t\t\t\t\te.x = event.x;", "-\t\t\t\t\t\te.y = event.y;", "-\t\t\t\t\t\te.item = item;", "-\t\t\t\t\t\te.time = (int) System.currentTimeMillis();", "-\t\t\t\t\t\ttree.notifyListeners(SWT.Expand, e);", "-\t\t\t\t\t\tif (item.isDisposed()) return;", "-\t\t\t\t\t\titem.setExpanded(true);", "-\t\t\t\t\t}", "-\t\t\t\t\texpandBeginTime = 0;", "-\t\t\t\t\texpandItem = null;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\texpandBeginTime = System.currentTimeMillis() + EXPAND_HYSTERESIS;", "-\t\t\t\texpandItem = item;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tif ((effect & DND.FEEDBACK_SCROLL) == 0) {", "-\t\t\tscrollBeginTime = 0;", "-\t\t\tscrollItem = null;", "-\t\t} else {", "-\t\t\tif (item != null && item.equals(scrollItem)  && scrollBeginTime != 0) {", "-\t\t\t\tif (System.currentTimeMillis() >= scrollBeginTime) {", "-\t\t\t\t\tRectangle area = tree.getClientArea();", "-\t\t\t\t\tint headerHeight = tree.getHeaderHeight();", "-\t\t\t\t\tint itemHeight= tree.getItemHeight();", "-\t\t\t\t\tPoint pt = new Point(event.x, event.y);", "-\t\t\t\t\tpt = tree.getDisplay().map(null, tree, pt);", "-\t\t\t\t\tTreeItem nextItem = null;", "-\t\t\t\t\tif (pt.y < area.y + headerHeight + 2 * itemHeight) {", "-\t\t\t\t\t\tnextItem = previousItem(tree, item);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (pt.y > area.y + area.height - 2 * itemHeight) {", "-\t\t\t\t\t\tnextItem = nextItem(tree, item);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (nextItem != null) tree.showItem(nextItem);", "-\t\t\t\t\tscrollBeginTime = 0;", "-\t\t\t\t\tscrollItem = null;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tscrollBeginTime = System.currentTimeMillis() + SCROLL_HYSTERESIS;", "-\t\t\t\tscrollItem = item;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tif ((effect & DND.FEEDBACK_INSERT_AFTER) != 0 ||", "-\t\t\t(effect & DND.FEEDBACK_INSERT_BEFORE) != 0) {", "-\t\t\tif (currentItem != item || ", "-\t\t\t\t ((effect & DND.FEEDBACK_INSERT_AFTER) != (currentEffect & DND.FEEDBACK_INSERT_AFTER)) ||", "-\t\t\t\t ((effect & DND.FEEDBACK_INSERT_BEFORE) != (currentEffect & DND.FEEDBACK_INSERT_BEFORE))) { ", "-\t\t\t\tsetInsertMark(tree, item, (effect & DND.FEEDBACK_INSERT_BEFORE) != 0);", "-\t\t\t\tcurrentEffect = effect;", "-\t\t\t\tcurrentItem = item;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tsetInsertMark(tree, null, false);", "-\t\t}", "-\t\t// save current effect for selection feedback", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d63eaf5be3869a5288c20a7097211ce9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/TreeDragUnderEffect.java", "commitBeforeChange": "bcbb67364ca132ab020802341c67102fbef2e499", "commitAfterChange": "78f0c776d53220a44bdf02b852c9a928a5d226ab", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 8, "signatureBeforeChange": " void show(int effect, int x, int y)", "signatureAfterChange": " void show(int effect, int x, int y)", "diff": ["-void show(int effect, int x, int y) {", "-\teffect = checkEffect(effect);", "-\tTreeItem item = findItem(x, y);", "-\tif (item == null) effect = DND.FEEDBACK_NONE;", "-\tif (currentEffect == DND.FEEDBACK_NONE && effect != DND.FEEDBACK_NONE) {", "-\t\ttree.addPaintListener(paintListener);", "-\tscrollHover(effect, item, x, y);", "-\texpandHover(effect, item, x, y);", "-\tsetDragUnderEffect(effect, item);", "-\tif (currentEffect != DND.FEEDBACK_NONE && effect == DND.FEEDBACK_NONE) {", "-\t\ttree.removePaintListener(paintListener);", "-\t}", "-\tcurrentEffect = effect;", "+void show(int effect, int x, int y) {", "+\teffect = checkEffect(effect);", "+\tTreeItem item = (TreeItem)getItem(x,y);", "+\t} else {", "+\t\tif (item != null && item.equals(expandItem) && expandBeginTime != 0) {", "+\t\t\tif (System.currentTimeMillis() >= expandBeginTime) {", "+\t\t\t\tif (item.getItemCount() > 0 && !item.getExpanded()) {", "+\t\t\t\t\tEvent event = new Event();", "+\t\t\t\t\tevent.x = x;", "+\t\t\t\t\tevent.y = y;", "+\t\t\t\t\tevent.item = item;", "+\t\t\t\t\tevent.time = (int) System.currentTimeMillis();", "+\t\t\t\t\ttree.notifyListeners(SWT.Expand, event);", "+\t\t\t\t\tif (item.isDisposed()) return;", "+\t\t\t\t\titem.setExpanded(true);", "+\t\t\t\t}", "+\t\t\t\texpandBeginTime = 0;", "+\t\t\t\texpandItem = null;", "+\t\t\t}", "+\t\t} else {", "+\t\t\texpandBeginTime = System.currentTimeMillis() + EXPAND_HYSTERESIS;", "+\t\t\texpandItem = item;", "+\t", "+\tif ((effect & DND.FEEDBACK_SCROLL) == 0) {", "+\t\tscrollBeginTime = 0;", "+\t\tscrollItem = null;", "+\t} else {", "+\t\tif (item != null && item.equals(scrollItem)  && scrollBeginTime != 0) {", "+\t\t\tif (System.currentTimeMillis() >= scrollBeginTime) {", "+\t\t\t\tRectangle area = tree.getClientArea();", "+\t\t\t\tint headerHeight = tree.getHeaderHeight();", "+\t\t\t\tint itemHeight= tree.getItemHeight();", "+\t\t\t\tPoint pt = new Point(x, y);", "+\t\t\t\tpt = tree.getDisplay().map(null, tree, pt);", "+\t\t\t\tTreeItem nextItem = null;", "+\t\t\t\tif (pt.y < area.y + headerHeight + 2 * itemHeight) {", "+\t\t\t\t\tnextItem = previousItem(item);", "+\t\t\t\t}", "+\t\t\t\tif (pt.y > area.y + area.height - 2 * itemHeight) {", "+\t\t\t\t\tnextItem = nextItem(item);", "+\t\t\t\t}", "+\t\t\t\tif (nextItem != null) tree.showItem(nextItem);", "+\t\t\t\tscrollBeginTime = 0;", "+\t\t\t\tscrollItem = null;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tscrollBeginTime = System.currentTimeMillis() + SCROLL_HYSTERESIS;", "+\t\t\tscrollItem = item;", "+\t\t}", "+\t}", "+\t", "+\tif ((effect & DND.FEEDBACK_SELECT) != 0) {", "+\t\tif (currentItem != item || (currentEffect & DND.FEEDBACK_SELECT) == 0) { ", "+\t\t\tsetDropSelection(item); ", "+\t\t\tcurrentEffect = effect;", "+\t\t\tcurrentItem = item;", "+\t\t}", "+\t} else {", "+\t\tsetDropSelection(null);", "+\t}", "+\t", "+\tif ((effect & DND.FEEDBACK_INSERT_AFTER) != 0 ||", "+\t\t(effect & DND.FEEDBACK_INSERT_BEFORE) != 0) {", "+\t\tif (currentItem != item || ", "+\t\t\t ((effect & DND.FEEDBACK_INSERT_AFTER) != (currentEffect & DND.FEEDBACK_INSERT_AFTER)) ||", "+\t\t\t ((effect & DND.FEEDBACK_INSERT_BEFORE) != (currentEffect & DND.FEEDBACK_INSERT_BEFORE))) { ", "+\t\t\tsetInsertMark(item, (effect & DND.FEEDBACK_INSERT_BEFORE) != 0);", "+\t\t\tcurrentEffect = effect;", "+\t\t\tcurrentItem = item;", "+\t\t}", "+\t} else {", "+\t\tsetInsertMark(null, false);", "+\t}"]}], "num": 3085}
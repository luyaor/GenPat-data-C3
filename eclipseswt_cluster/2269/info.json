{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fecf5914ef3d699534d1034e4f1f6f54", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98e87a4dd1516db3975f8fbc2a408700", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/StyledTextDragAndDropEffect.java", "commitBeforeChange": "da4eee939f801fe4f36e8cd18d1cf4f567d81569", "commitAfterChange": "e0056e8d9b6271102f057983d4c696ec0f6bf90d", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " void showDropTargetEffect(int effect, int x, int y)", "signatureAfterChange": " void showDropTargetEffect(int effect, int x, int y)", "diff": ["-\t\tif (scrollX != -1 && scrollY != -1 && scrollBeginTime != 0 &&", "-\t\t\t(pt.x >= scrollX && pt.x <= (scrollX + SCROLL_TOLERANCE) ||", "-\t\t\t pt.y >= scrollY && pt.y <= (scrollY + SCROLL_TOLERANCE))) {", "-\t\t\tif (System.currentTimeMillis() >= scrollBeginTime) {", "-\t\t\t\tRectangle area = text.getClientArea();", "-\t\t\t\tRectangle bounds = text.getTextBounds(0, 0);", "-\t\t\t\tint charWidth = bounds.width;", "-\t\t\t\tif (pt.x < area.x + 2*charWidth) {", "-\t\t\t\t\tint leftPixel = text.getHorizontalPixel();", "-\t\t\t\t\ttext.setHorizontalPixel(leftPixel - charWidth);", "-\t\t\t\t\tif (text.getHorizontalPixel() != leftPixel) {", "-\t\t\t\t\t\ttext.redraw();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (pt.x > area.width - 2*charWidth) {", "-\t\t\t\t\tint leftPixel = text.getHorizontalPixel();", "-\t\t\t\t\ttext.setHorizontalPixel(leftPixel + charWidth);", "-\t\t\t\t\tif (text.getHorizontalPixel() != leftPixel) {", "-\t\t\t\t\t\ttext.redraw();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tint lineHeight = bounds.height;", "-\t\t\t\tif (pt.y < area.y + lineHeight) {", "-\t\t\t\t\tint topPixel = text.getTopPixel();", "-\t\t\t\t\ttext.setTopPixel(topPixel - lineHeight);", "-\t\t\t\t\tif (text.getTopPixel() != topPixel) {", "-\t\t\t\t\t\ttext.redraw();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (pt.y > area.height - lineHeight) {", "-\t\t\t\t\tint topPixel = text.getTopPixel();", "-\t\t\t\t\ttext.setTopPixel(topPixel + lineHeight);", "-\t\t\t\t\tif (text.getTopPixel() != topPixel) {", "-\t\t\t\t\t\ttext.redraw();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tscrollBeginTime = 0;", "-\t\t\t\tscrollX = scrollY = -1;", "-\t\t\t}", "+\t\tif (text.getCharCount() == 0) {", "+\t\t\tscrollBeginTime = 0;", "+\t\t\tscrollX = scrollY = -1;", "-\t\t\tscrollBeginTime = System.currentTimeMillis() + SCROLL_HYSTERESIS;", "-\t\t\tscrollX = pt.x;", "-\t\t\tscrollY = pt.y;", "+\t\t\tif (scrollX != -1 && scrollY != -1 && scrollBeginTime != 0 &&", "+\t\t\t\t(pt.x >= scrollX && pt.x <= (scrollX + SCROLL_TOLERANCE) ||", "+\t\t\t\t pt.y >= scrollY && pt.y <= (scrollY + SCROLL_TOLERANCE))) {", "+\t\t\t\tif (System.currentTimeMillis() >= scrollBeginTime) {", "+\t\t\t\t\tRectangle area = text.getClientArea();", "+\t\t\t\t\tRectangle bounds = text.getTextBounds(0, 0);", "+\t\t\t\t\tint charWidth = bounds.width;", "+\t\t\t\t\tif (pt.x < area.x + 2*charWidth) {", "+\t\t\t\t\t\tint leftPixel = text.getHorizontalPixel();", "+\t\t\t\t\t\ttext.setHorizontalPixel(leftPixel - charWidth);", "+\t\t\t\t\t\tif (text.getHorizontalPixel() != leftPixel) {", "+\t\t\t\t\t\t\ttext.redraw();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (pt.x > area.width - 2*charWidth) {", "+\t\t\t\t\t\tint leftPixel = text.getHorizontalPixel();", "+\t\t\t\t\t\ttext.setHorizontalPixel(leftPixel + charWidth);", "+\t\t\t\t\t\tif (text.getHorizontalPixel() != leftPixel) {", "+\t\t\t\t\t\t\ttext.redraw();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tint lineHeight = bounds.height;", "+\t\t\t\t\tif (pt.y < area.y + lineHeight) {", "+\t\t\t\t\t\tint topPixel = text.getTopPixel();", "+\t\t\t\t\t\ttext.setTopPixel(topPixel - lineHeight);", "+\t\t\t\t\t\tif (text.getTopPixel() != topPixel) {", "+\t\t\t\t\t\t\ttext.redraw();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (pt.y > area.height - lineHeight) {", "+\t\t\t\t\t\tint topPixel = text.getTopPixel();", "+\t\t\t\t\t\ttext.setTopPixel(topPixel + lineHeight);", "+\t\t\t\t\t\tif (text.getTopPixel() != topPixel) {", "+\t\t\t\t\t\t\ttext.redraw();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tscrollBeginTime = 0;", "+\t\t\t\t\tscrollX = scrollY = -1;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tscrollBeginTime = System.currentTimeMillis() + SCROLL_HYSTERESIS;", "+\t\t\t\tscrollX = pt.x;", "+\t\t\t\tscrollY = pt.y;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e46f58f8b254266f4df43a0121cae48", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/StyledTextDragAndDropEffect.java", "commitBeforeChange": "e0056e8d9b6271102f057983d4c696ec0f6bf90d", "commitAfterChange": "4ae1c6ebacc851ad7c99e6c5d8a7ba40548a8eab", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " void showDropTargetEffect(int effect, int x, int y)", "signatureAfterChange": " void showDropTargetEffect(int effect, int x, int y)", "diff": ["-\t\tif (scrollX != -1 && scrollY != -1 && scrollBeginTime != 0 &&", "-\t\t\t(pt.x >= scrollX && pt.x <= (scrollX + SCROLL_TOLERANCE) ||", "-\t\t\t pt.y >= scrollY && pt.y <= (scrollY + SCROLL_TOLERANCE))) {", "-\t\t\tif (System.currentTimeMillis() >= scrollBeginTime) {", "-\t\t\t\tRectangle area = text.getClientArea();", "-\t\t\t\tRectangle bounds = text.getTextBounds(0, 0);", "-\t\t\t\tint charWidth = bounds.width;", "-\t\t\t\tif (pt.x < area.x + 2*charWidth) {", "-\t\t\t\t\tint leftPixel = text.getHorizontalPixel();", "-\t\t\t\t\ttext.setHorizontalPixel(leftPixel - charWidth);", "-\t\t\t\t\tif (text.getHorizontalPixel() != leftPixel) {", "-\t\t\t\t\t\ttext.redraw();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (pt.x > area.width - 2*charWidth) {", "-\t\t\t\t\tint leftPixel = text.getHorizontalPixel();", "-\t\t\t\t\ttext.setHorizontalPixel(leftPixel + charWidth);", "-\t\t\t\t\tif (text.getHorizontalPixel() != leftPixel) {", "-\t\t\t\t\t\ttext.redraw();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tint lineHeight = bounds.height;", "-\t\t\t\tif (pt.y < area.y + lineHeight) {", "-\t\t\t\t\tint topPixel = text.getTopPixel();", "-\t\t\t\t\ttext.setTopPixel(topPixel - lineHeight);", "-\t\t\t\t\tif (text.getTopPixel() != topPixel) {", "-\t\t\t\t\t\ttext.redraw();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (pt.y > area.height - lineHeight) {", "-\t\t\t\t\tint topPixel = text.getTopPixel();", "-\t\t\t\t\ttext.setTopPixel(topPixel + lineHeight);", "-\t\t\t\t\tif (text.getTopPixel() != topPixel) {", "-\t\t\t\t\t\ttext.redraw();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tscrollBeginTime = 0;", "-\t\t\t\tscrollX = scrollY = -1;", "-\t\t\t}", "+\t\tif (text.getCharCount() == 0) {", "+\t\t\tscrollBeginTime = 0;", "+\t\t\tscrollX = scrollY = -1;", "-\t\t\tscrollBeginTime = System.currentTimeMillis() + SCROLL_HYSTERESIS;", "-\t\t\tscrollX = pt.x;", "-\t\t\tscrollY = pt.y;", "+\t\t\tif (scrollX != -1 && scrollY != -1 && scrollBeginTime != 0 &&", "+\t\t\t\t(pt.x >= scrollX && pt.x <= (scrollX + SCROLL_TOLERANCE) ||", "+\t\t\t\t pt.y >= scrollY && pt.y <= (scrollY + SCROLL_TOLERANCE))) {", "+\t\t\t\tif (System.currentTimeMillis() >= scrollBeginTime) {", "+\t\t\t\t\tRectangle area = text.getClientArea();", "+\t\t\t\t\tRectangle bounds = text.getTextBounds(0, 0);", "+\t\t\t\t\tint charWidth = bounds.width;", "+\t\t\t\t\tif (pt.x < area.x + 2*charWidth) {", "+\t\t\t\t\t\tint leftPixel = text.getHorizontalPixel();", "+\t\t\t\t\t\ttext.setHorizontalPixel(leftPixel - charWidth);", "+\t\t\t\t\t\tif (text.getHorizontalPixel() != leftPixel) {", "+\t\t\t\t\t\t\ttext.redraw();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (pt.x > area.width - 2*charWidth) {", "+\t\t\t\t\t\tint leftPixel = text.getHorizontalPixel();", "+\t\t\t\t\t\ttext.setHorizontalPixel(leftPixel + charWidth);", "+\t\t\t\t\t\tif (text.getHorizontalPixel() != leftPixel) {", "+\t\t\t\t\t\t\ttext.redraw();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tint lineHeight = bounds.height;", "+\t\t\t\t\tif (pt.y < area.y + lineHeight) {", "+\t\t\t\t\t\tint topPixel = text.getTopPixel();", "+\t\t\t\t\t\ttext.setTopPixel(topPixel - lineHeight);", "+\t\t\t\t\t\tif (text.getTopPixel() != topPixel) {", "+\t\t\t\t\t\t\ttext.redraw();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (pt.y > area.height - lineHeight) {", "+\t\t\t\t\t\tint topPixel = text.getTopPixel();", "+\t\t\t\t\t\ttext.setTopPixel(topPixel + lineHeight);", "+\t\t\t\t\t\tif (text.getTopPixel() != topPixel) {", "+\t\t\t\t\t\t\ttext.redraw();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tscrollBeginTime = 0;", "+\t\t\t\t\tscrollX = scrollY = -1;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tscrollBeginTime = System.currentTimeMillis() + SCROLL_HYSTERESIS;", "+\t\t\t\tscrollX = pt.x;", "+\t\t\t\tscrollY = pt.y;", "+\t\t\t}"]}], "num": 2269}
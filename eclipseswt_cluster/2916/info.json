{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dfa6607ef8d49f09d5ae9f824b27e22b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9694b33aa80ceb0d9b5b3444a543df5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "123ea21435945c9585ede55bef80d1e5c5621abd", "commitAfterChange": "b59a3e04a8eea70e9204d3afc2137130836bb135", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 70, "signatureBeforeChange": "  LRESULT WM_UNDO (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_UNDO (int wParam, int lParam)", "diff": ["-\tString newText = verifyText (oldText, start [0], end [0]);", "+\tString newText = verifyText (oldText, start [0], end [0], null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92dae0517c7c24b7f1c7465206522ac7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "efc7ad733bf3ea3108bed9dc1e46386e0c57dec4", "commitAfterChange": "15127f30a6eb343395557fa6e0e964a69ad06132", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": "  void initFactories (nsIServiceManager serviceManager, nsIComponentManager componentManager, boolean isXULRunner)", "signatureAfterChange": "  void initFactories (nsIServiceManager serviceManager, nsIComponentManager componentManager, boolean isXULRunner)", "diff": ["-\tPromptService2Factory factory = new PromptService2Factory ();", "-\tfactory.AddRef ();", "-", "+\tPromptService2Factory factory = new PromptService2Factory ();", "+\tfactory.AddRef ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bddbb023664a2b1dd0c01838c44d688a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "eee00daf67e9f4ca1006a6ea91ebe30bbc14e6d5", "commitAfterChange": "19a3e64d24b0b2bd638819a1a09f94db25eb25be", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " public boolean forceFocus ()", "signatureAfterChange": " public boolean forceFocus ()", "diff": ["-\tint focusHandle = focusHandle ();", "-\tint window = OS.GetControlOwner (focusHandle);", "+\t/*", "+\t* Feature in the Macintosh.  SetKeyboardFocus() sends kEventControlSetFocusPart", "+\t* with the part code equal to kControlFocusNoPart to the control that is about", "+\t* to lose focus and then sends kEventControlSetFocusPart with part code equal", "+\t* to kControlFocusNextPart to this control (the one that is about to get focus).", "+\t* If the control does not accept focus because of the full keyboard access mode,", "+\t* kEventControlSetFocusPart is sent again to the control in focus causing multiple", "+\t* focus events to happen.  The fix is to ignore focus events and issue them only", "+\t* if the focus control changed.", "+\t*/", "+\tint focusHandle = focusHandle ();", "+\tint window = OS.GetControlOwner (focusHandle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f288aa9756c9fcdca3f39376a7d79abb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleType.java", "commitBeforeChange": "6077b9f7e079a907c32af4a59e2301b36d545deb", "commitAfterChange": "e8a835d302f94a49f676779cb3b99adb326071bb", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tprivate AccessibleType ()", "signatureAfterChange": " \t \tprivate AccessibleType ()", "diff": ["-\t\t// add Component interface", "-\t\tGInterfaceInfo interfaceInfo = new GInterfaceInfo ();", "-\t\tinitComponentIfaceCB = new Callback (this, \"initComponentIfaceCB\", 1);", "-\t\tinterfaceInfo.interface_init = initComponentIfaceCB.getAddress ();", "-\t\tcomponentIfaceDefinition = OS.g_malloc (GInterfaceInfo.sizeof);", "-\t\tOS.memmove (componentIfaceDefinition, interfaceInfo, GInterfaceInfo.sizeof);", "-\t\tOS.g_type_add_interface_static (handle, ATK_COMPONENT_TYPE, componentIfaceDefinition);", "-\t\tinterfaceInfo = new GInterfaceInfo ();", "+\t\tGInterfaceInfo interfaceInfo = new GInterfaceInfo ();", "+\t\t// add Component interface", "+\t\tinterfaceInfo = new GInterfaceInfo ();", "+\t\tinitComponentIfaceCB = new Callback (this, \"initComponentIfaceCB\", 1);", "+\t\tinterfaceInfo.interface_init = initComponentIfaceCB.getAddress ();", "+\t\tcomponentIfaceDefinition = OS.g_malloc (GInterfaceInfo.sizeof);", "+\t\tOS.memmove (componentIfaceDefinition, interfaceInfo, GInterfaceInfo.sizeof);", "+\t\tOS.g_type_add_interface_static (handle, ATK_COMPONENT_TYPE, componentIfaceDefinition);"]}], "num": 2916}
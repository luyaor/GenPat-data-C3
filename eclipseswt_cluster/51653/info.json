{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "46bd5840725d5436661a12d944eb46cb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6412d9236f16933e52ad9a961728fd16", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "e38f7ba08e4cd9896dddbc5916c5187c2e1b63eb", "commitAfterChange": "7349d1b65ee9a9edeeac8e2e96a33b2c8d655b80", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t \tint getFocusedAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \t \tint getFocusedAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tint code = OS.CallNextEventHandler (nextHandler, theEvent);", "-\t\tboolean osFocusedAttribute = false;", "-\t\tint [] booleanRef = new int [1];", "-\t\tif (code == OS.noErr) {", "-\t\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFBooleanRef, null, 4, null, booleanRef);", "-\t\t\tif (status == OS.noErr) {", "-\t\t\t\tosFocusedAttribute = booleanRef [0] != 0;", "-\t\t\t}", "-\t\t}", "+\t\tint osChildID = getChildIDFromEvent(theEvent);", "-\t\tevent.childID = getChildIDFromEvent(theEvent);", "+\t\tevent.childID = ACC.CHILDID_MULTIPLE; // set to impossible value to test if app resets", "+\t\tevent.accessible = null;", "-\t\treturn OS.noErr;", "+\t\tif (event.accessible != null) {", "+\t\t\tif (OS.CFEqual(event.accessible.axuielementref, osChildID)) {", "+\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeBoolean, 4, new boolean [] {true});", "+\t\t\t\treturn OS.noErr;", "+\t\t\t}", "+\t\t}", "+\t\tif (event.childID == ACC.CHILDID_NONE) {", "+\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeBoolean, 4, new boolean [] {false});", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t\tif (event.childID != ACC.CHILDID_MULTIPLE) {", "+\t\t\tboolean hasFocus = OS.CFEqual(childIDToOs(event.childID), osChildID); // This will test for CHILDID_SELF also.", "+\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeBoolean, 4, new boolean [] {hasFocus});", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t\t// TODO: If the app does not implement getFocus, return the native focus", "+//\t\tif (OS.CFEqual(axuielementref, osChildID)) {", "+//\t\t\tboolean hasFocus = control.isFocusControl();", "+//\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeBoolean, 4, new boolean [] {hasFocus});", "+//\t\t\treturn OS.noErr;", "+//\t\t}", "+\t\treturn OS.CallNextEventHandler (nextHandler, theEvent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cf1cbfc6677b1dbeef5b5cd43fbd1e6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "d788682177c71b9f6710f57221096232e9be5c17", "commitAfterChange": "da2976a0ad22d6b8fe6461f90d599d2dc4f8dfe5", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t \tint getFocusedAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \t \tint getFocusedAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tint osChildID = getChildIDFromEvent(theEvent);", "+\t\tint[] osChildID = new int[1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamAccessibleObject, OS.typeCFTypeRef, null, 4, null, osChildID);", "-\t\tevent.childID = ACC.CHILDID_MULTIPLE; // set to impossible value to test if app resets", "+\t\tevent.childID = ACC.CHILDID_MULTIPLE; // set to invalid value, to test if the application sets it in getFocus()", "+", "+\t\t/* The application can optionally answer an accessible. */", "-\t\t\tif (OS.CFEqual(event.accessible.axuielementref, osChildID)) {", "-\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeBoolean, 4, new boolean [] {true});", "-\t\t\t\treturn OS.noErr;", "-\t\t\t}", "+\t\t\tboolean hasFocus = OS.CFEqual(event.accessible.axuielementref, osChildID[0]);", "+\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeBoolean, 4, new boolean [] {hasFocus});", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t\t", "+\t\t/* Or the application can answer a valid child ID, including CHILDID_SELF and CHILDID_NONE. */", "+\t\tif (event.childID == ACC.CHILDID_SELF) {", "+\t\t\tboolean hasFocus = OS.CFEqual(axuielementref, osChildID[0]);", "+\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeBoolean, 4, new boolean [] {hasFocus});", "+\t\t\treturn OS.noErr;", "-\t\t\tboolean hasFocus = OS.CFEqual(childIDToOs(event.childID), osChildID); // This will test for CHILDID_SELF also.", "+\t\t\t/* Other valid childID. */", "+\t\t\tint childID = osToChildID(osChildID[0]);", "+\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeBoolean, 4, new boolean [] {event.childID == childID});", "+\t\t\treturn OS.noErr;", "+\t\t}", "+", "+\t\t/* Invalid childID means that application did not implement getFocus, so return the native focus. */", "+\t\tif (OS.CFEqual(axuielementref, osChildID[0])) {", "+\t\t\tboolean hasFocus =  control.isFocusControl();", "-\t\t// TODO: If the app does not implement getFocus, return the native focus", "-//\t\tif (OS.CFEqual(axuielementref, osChildID)) {", "-//\t\t\tboolean hasFocus = control.isFocusControl();", "-//\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeBoolean, 4, new boolean [] {hasFocus});", "-//\t\t\treturn OS.noErr;", "-//\t\t}"]}], "num": 51653}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8cb328b03d273a707f97385c2115be89", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f72da091798ddee296a6ca3ec967a68e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/TextTransfer.java", "commitBeforeChange": "6b0a245288556e7224d3c56682401ca81ba95245", "commitAfterChange": "4dbd09dcd54c5e8b8416ccbe2fdfacc6901be61f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-\tif (transferData.data.length == 0 || transferData.data[0].length == 0) return null;", "-\tbyte[] buffer = transferData.data[0];", "-\tswitch (transferData.type) {", "-\t\tcase TEXTID: {", "-\t\t\tint encoding = OS.CFStringGetSystemEncoding();", "-\t\t\tint cfstring = OS.CFStringCreateWithBytes(OS.kCFAllocatorDefault, buffer, buffer.length, encoding, true);", "-\t\t\tif (cfstring == 0) return null;", "-\t\t\ttry {", "-\t\t\t\tint length = OS.CFStringGetLength(cfstring);", "-\t\t\t\tif (length == 0) return null;", "-\t\t\t\tchar[] chars = new char[length];", "-\t\t\t\tCFRange range = new CFRange();", "-\t\t\t\trange.length = length;", "-\t\t\t\tOS.CFStringGetCharacters(cfstring, range, chars);", "-\t\t\t\treturn new String(chars);", "-\t\t\t} finally {", "-\t\t\t\tOS.CFRelease(cfstring);", "-\t\t\t}", "-\t\t}", "-\t\tcase UTEXTID: {", "-\t\t\tchar[] chars = new char[(buffer.length + 1) / 2];", "-\t\t\tOS.memmove(chars, buffer, buffer.length);", "-\t\t\treturn new String(chars);", "-\t\t}", "-\t}", "-\treturn null;", "+\tNSString string = (NSString) transferData.data;", "+\tchar[] chars = new char[string.length()];", "+\tstring.getCharacters_(chars);", "+\treturn new String(chars);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06778943e1ae9892f4951684d9c42acb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "364ae706089766a8dc4b724eef63613a541bd3cb", "commitAfterChange": "5aebd96e6e03d77d1ec1be3bdce35459d0a39900", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["-\tint /*long*/ foregroundBrush = 0;", "+\tint /*long*/ gdipForeground = 0;", "-\t\tforegroundBrush = gc.getFgBrush();", "+\t\tgdipForeground = gc.getFgBrush();", "-\tint /*long*/ selBrush = 0, selPen = 0, selBrushFg = 0, gdipFont = 0, lastHFont = 0;", "+\tint /*long*/ gdipSelBackground = 0, gdipSelForeground = 0, gdipFont = 0, lastHFont = 0;", "+\tint /*long*/ selBackground = 0;", "+\tint selForeground = 0;", "-\t\t\tselBrush = createGdipBrush(selectionBackground, alpha);", "-\t\t\tselBrushFg = createGdipBrush(selectionForeground, alpha);", "-\t\t\tselPen = Gdip.Pen_new(selBrushFg, 1);", "+\t\t\tgdipSelBackground = createGdipBrush(selectionBackground, alpha);", "+\t\t\tgdipSelForeground = createGdipBrush(selectionForeground, alpha);", "-\t\t\tselBrush = OS.CreateSolidBrush(selectionBackground.handle);", "-\t\t\tselPen = OS.CreatePen(OS.PS_SOLID, 1, selectionForeground.handle);", "+\t\t\tselBackground = OS.CreateSolidBrush(selectionBackground.handle);", "+\t\t\tselForeground = selectionForeground.handle;", "-\t\t\t\t\tGdip.Graphics_FillRectangle(gdipGraphics, selBrush, drawX + lineWidth[line], drawY, width, lineHeight);", "+\t\t\t\t\tGdip.Graphics_FillRectangle(gdipGraphics, gdipSelBackground, drawX + lineWidth[line], drawY, width, lineHeight);", "-\t\t\t\t\tOS.SelectObject(hdc, selBrush);", "+\t\t\t\t\tOS.SelectObject(hdc, selBackground);", "-\t\t\t\t\t\tdrawRunBackgroundGDIP(run, gdipGraphics, rect, selectionStart, selectionEnd, alpha, selBrush, hasSelection);", "+\t\t\t\t\t\tdrawRunBackgroundGDIP(run, gdipGraphics, rect, selectionStart, selectionEnd, alpha, gdipSelBackground, hasSelection);", "-\t\t\t\t\t\tdrawRunBackground(run, hdc, rect, selectionStart, selectionEnd, selBrush, hasSelection);", "+\t\t\t\t\t\tdrawRunBackground(run, hdc, rect, selectionStart, selectionEnd, selBackground, hasSelection);", "-\t\t\t\t\t\tpRect = drawRunTextGDIP(gdipGraphics, run, rect, gdipFont, baseline, foregroundBrush, selBrushFg, selectionStart, selectionEnd, alpha);", "-\t\t\t\t\t\tunderlineClip = drawUnderlineGDIP(gdipGraphics, x, drawY + baseline, lineUnderlinePos, drawY + lineHeight, lineRuns, i, foregroundBrush, selBrushFg, underlineClip, pRect, selectionStart, selectionEnd, alpha);", "-\t\t\t\t\t\tstrikeoutClip = drawStrikeoutGDIP(gdipGraphics, x, drawY + baseline, lineRuns, i, foregroundBrush, selBrushFg, strikeoutClip, pRect, selectionStart, selectionEnd, alpha);", "-\t\t\t\t\t\tborderClip = drawBorderGDIP(gdipGraphics, x, drawY, lineHeight, lineRuns, i, foregroundBrush, selBrushFg, borderClip, pRect, selectionStart, selectionEnd, alpha);", "+\t\t\t\t\t\tpRect = drawRunTextGDIP(gdipGraphics, run, rect, gdipFont, baseline, gdipForeground, gdipSelForeground, selectionStart, selectionEnd, alpha);", "+\t\t\t\t\t\tunderlineClip = drawUnderlineGDIP(gdipGraphics, x, drawY + baseline, lineUnderlinePos, drawY + lineHeight, lineRuns, i, gdipForeground, gdipSelForeground, underlineClip, pRect, selectionStart, selectionEnd, alpha);", "+\t\t\t\t\t\tstrikeoutClip = drawStrikeoutGDIP(gdipGraphics, x, drawY + baseline, lineRuns, i, gdipForeground, gdipSelForeground, strikeoutClip, pRect, selectionStart, selectionEnd, alpha);", "+\t\t\t\t\t\tborderClip = drawBorderGDIP(gdipGraphics, x, drawY, lineHeight, lineRuns, i, gdipForeground, gdipSelForeground, borderClip, pRect, selectionStart, selectionEnd, alpha);", "-\t\t\t\t\t\tint /*long*/ selForeground = selectionForeground != null ? selectionForeground.handle : 0;", "-\t\t\t\t\t\tborderClip = drawBorder(hdc, x, drawY, lineHeight, lineRuns, i,foreground, selForeground, borderClip, pRect,  selectionStart, selectionEnd);", "+\t\t\t\t\t\tborderClip = drawBorder(hdc, x, drawY, lineHeight, lineRuns, i, foreground, selForeground, borderClip, pRect,  selectionStart, selectionEnd);", "-\tif (gdip) {", "-\t\tif (selBrush != 0) Gdip.SolidBrush_delete(selBrush);", "-\t\tif (selBrushFg != 0) Gdip.SolidBrush_delete(selBrushFg);", "-\t\tif (selPen != 0) Gdip.Pen_delete(selPen);", "-\t\tif (gdipFont != 0) Gdip.Font_delete(gdipFont);", "-\t} else {", "-\t\tOS.RestoreDC(hdc, state);", "-\t\tif (gdipGraphics != 0) Gdip.Graphics_ReleaseHDC(gdipGraphics, hdc);", "-\t\tif (selBrush != 0) OS.DeleteObject (selBrush);", "-\t\tif (selPen != 0) OS.DeleteObject (selPen);", "-\t}", "+\tif (gdipSelBackground != 0) Gdip.SolidBrush_delete(gdipSelBackground);", "+\tif (gdipSelForeground != 0) Gdip.SolidBrush_delete(gdipSelForeground);", "+\tif (gdipFont != 0) Gdip.Font_delete(gdipFont);", "+\tif (state != 0)\tOS.RestoreDC(hdc, state);", "+\tif (selBackground != 0) OS.DeleteObject (selBackground);"]}], "num": 36571}
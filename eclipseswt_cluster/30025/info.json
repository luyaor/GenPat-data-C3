{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "649748689ceee0a2aefd343444663546", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0db4c8cef9d1d01862c3e433f963d3b4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/PromptService2.java", "commitBeforeChange": "0076669af24fd6f5044c2622cda9b590486dcdde", "commitAfterChange": "50b2cd054f21b925ff814cc8eff2f043b76757ba", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 36, "signatureBeforeChange": "  Browser getBrowser (int aDOMWindow)", "signatureAfterChange": "  Browser getBrowser (int aDOMWindow)", "diff": ["-", "-\tint /*long*/[] result = new int /*long*/[1];", "-\tint rc = XPCOM.NS_GetServiceManager (result);", "-\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "-\t", "-\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\tresult[0] = 0;", "-\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_WINDOWWATCHER_CONTRACTID, true);", "-\trc = serviceManager.GetServiceByContractID (aContractID, nsIWindowWatcher.NS_IWINDOWWATCHER_IID, result);", "-\tif (rc != XPCOM.NS_OK) Mozilla.error(rc);", "-\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);\t\t", "-\tserviceManager.Release ();", "-\t", "-\tnsIWindowWatcher windowWatcher = new nsIWindowWatcher (result[0]);", "-\tresult[0] = 0;", "-\t/* the chrome will only be answered for the top-level nsIDOMWindow */", "-\trc = window.GetTop (result);", "-\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "-\taDOMWindow = result[0];", "-\tresult[0] = 0;", "-\trc = windowWatcher.GetChromeForWindow (aDOMWindow, result);", "-\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);\t\t", "-\twindowWatcher.Release ();\t", "-\t", "-\tnsIWebBrowserChrome webBrowserChrome = new nsIWebBrowserChrome (result[0]);", "-\tresult[0] = 0;", "-\trc = webBrowserChrome.QueryInterface (nsIEmbeddingSiteWindow.NS_IEMBEDDINGSITEWINDOW_IID, result);", "-\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);\t\t", "-\twebBrowserChrome.Release ();", "-\t", "-\tnsIEmbeddingSiteWindow embeddingSiteWindow = new nsIEmbeddingSiteWindow (result[0]);", "-\tresult[0] = 0;", "-\trc = embeddingSiteWindow.GetSiteWindow (result);", "-\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);\t\t", "-\tembeddingSiteWindow.Release ();", "-\t", "-\treturn Mozilla.findBrowser (result[0]); ", "+\treturn Mozilla.findBrowser (window);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b5e967147be69e54aa59ed219531e02", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "7b1329ce4559c314d7caaf6d49255a2e36ae8db9", "commitAfterChange": "24fd6f27ac88e7d1cba0fa9d22650617bd958c27", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 2, "signatureBeforeChange": "  int callJava (int functionId, int tokenVariant, int args, int returnPtr)", "signatureAfterChange": " static int callJava (int functionId, int tokenVariant, int argsVariant, int returnPtr)", "diff": ["+/* this is the BrowserFunction entry point when the detected XULRunner version is < 4 */", "+static int callJava (int functionId, int /*long*/ tokenVariant, int /*long*/ argsVariant, int /*long*/ returnPtr) {", "+\tint /*long*/ resultVariant = invokeFunction (functionId, tokenVariant, argsVariant);", "+\tC.memmove (returnPtr, new int /*long*/[] {resultVariant}, C.PTR_SIZEOF);", "+\treturn XPCOM.NS_OK;", "+}", "-", "-int callJava (int functionId, int /*long*/ tokenVariant, int /*long*/ args, int /*long*/ returnPtr) {", "-\tObject key = new Integer (functionId);", "-\tBrowserFunction function = (BrowserFunction)Mozilla.AllFunctions.get (key);", "-\tObject returnValue = null;", "-", "-\tif (function != null) {", "-\t\ttry {", "-\t\t\tshort[] type = new short[1]; /* PRUint16 */", "-\t\t\tnsIVariant variant = new nsIVariant (tokenVariant);", "-\t\t\tint rc = variant.GetDataType (type);", "-\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\tObject temp = convertToJava (variant, type[0]);", "-\t\t\ttype[0] = 0;", "-\t\t\tif (temp instanceof String) {", "-\t\t\t\tString token = (String)temp;", "-\t\t\t\tif (token.equals (function.token)) {", "-\t\t\t\t\tvariant = new nsIVariant (args);", "-\t\t\t\t\trc = variant.GetDataType (type);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\t\t\ttemp = convertToJava (variant, type[0]);", "-\t\t\t\t\tif (temp instanceof Object[]) {", "-\t\t\t\t\t\tObject[] arguments = (Object[])temp;", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\treturnValue = function.function (arguments);", "-\t\t\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\t\t\t/* exception during function invocation */", "-\t\t\t\t\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (IllegalArgumentException e) {", "-\t\t\t/* invalid argument value type */", "-\t\t\tif (function.isEvaluate) {", "-\t\t\t\t/* notify the evaluate function so that a java exception can be thrown */", "-\t\t\t\tfunction.function (new String[] {WebBrowser.CreateErrorString (new SWTException (SWT.ERROR_INVALID_RETURN_VALUE).getLocalizedMessage ())});", "-\t\t\t}", "-\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());", "-\t\t}", "-\t}", "-", "-\tint /*long*/[] result = new int /*long*/[1];", "-\tint rc = XPCOM.NS_GetComponentManager (result);", "-\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "-\tnsIComponentManager componentManager = new nsIComponentManager (result[0]);", "-\tresult[0] = 0;", "-\tnsIVariant variant;", "-\ttry {", "-\t\tvariant = convertToJS (returnValue, componentManager);", "-\t} catch (SWTException e) {", "-\t\t/* invalid return value type */", "-\t\tvariant = convertToJS (WebBrowser.CreateErrorString (e.getLocalizedMessage ()), componentManager);", "-\t}", "-\tcomponentManager.Release ();", "-\tC.memmove (returnPtr, new int /*long*/[] {variant.getAddress ()}, C.PTR_SIZEOF);", "-", "-\treturn XPCOM.NS_OK;", "-}"]}], "num": 30025}
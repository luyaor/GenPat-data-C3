{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9212d0c1f7c5cdc9e01b24116f1774b3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eea969d9f81427101adb849828ab3d3a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 19, "signatureBeforeChange": " Point drawVerticalItemConnector(GC gc, Point position)", "signatureAfterChange": " int getContentX (int columnIndex)", "diff": ["- */", "-Point drawVerticalItemConnector(GC gc, Point position) {", "-\tTree parent = getParent();", "-\tTreeItem parentItem = getParentItem();\t", "-\tRectangle indicatorRectangle = parent.getHierarchyIndicatorRect();", "-\tint itemHeight = parent.getItemHeight();", "-\tint itemHeightDiv2 = itemHeight / 2 + itemHeight % 2;", "-\tint indicatorHeightDiv2 = indicatorRectangle.height / 2 + indicatorRectangle.height % 2;", "-\tint lineX = position.x + indicatorRectangle.width / 2;", "-\tint lineStartY = position.y - itemHeightDiv2;\t", "-\tint lineEndY = position.y + itemHeightDiv2 - itemHeight % 2;", "-\tTreeItem predecessor;", "-\tboolean isFirstChild = false;", "-", "-\tif (isRoot() == true) {", "-\t\tif (getIndex() == 0) {", "-\t\t\treturn position;\t\t\t\t\t\t\t\t\t// first root, don't draw vertical line", "-\telse\t", "-\tif (getIndex() == 0) {\t\t\t\t\t\t\t\t\t\t// if item is first child", "-\t\tlineStartY += itemHeightDiv2;", "-\t\tisFirstChild = true;", "-\tpredecessor = getPredecessor();", "-\tif (predecessor != null && predecessor.isLeaf() == false) {", "-\t\tlineStartY += indicatorHeightDiv2;\t\t\t\t\t\t// leave space for the hierarchy image", "-\t}", "-\tif (isLeaf() == false) {", "-\t\tlineEndY -= indicatorHeightDiv2;", "-\t}", "-\tgc.drawLine(lineX, lineStartY, lineX, lineEndY);", "-\t\tparentItem.drawVerticalItemConnector(gc, position.y, isFirstChild);", "-\treturn position;", "+int getContentX (int columnIndex) {", "+\tif (columnIndex > 0) {", "+\t\tTreeColumn column = parent.getColumn (columnIndex);", "+\t\tint contentX = column.getX () + MARGIN_TEXT;", "+\t\tif ((column.style & SWT.LEFT) != 0) return contentX;", "+\t\t", "+\t\tint contentWidth = internalGetTextWidth (columnIndex);", "+\t\tImage image = internalGetImage (columnIndex);", "+\t\tif (image != null) {", "+\t\t\tcontentWidth += Tree.MARGIN_IMAGE + image.getBounds ().width;", "+\t\t}", "+\t\tif ((column.style & SWT.RIGHT) != 0) {", "+\t\t\tint padding = parent.getCellPadding ();", "+\t\t\tcontentX = Math.max (contentX, column.getX () + column.getWidth () - padding - contentWidth);\t", "+\t\t} else {\t/* SWT.CENTER */", "+\t\t\tcontentX = Math.max (contentX, column.getX () + (column.getWidth () - contentWidth) / 2);", "+\t\t}", "+\t\treturn contentX;", "+\t}", "+\t/* column 0 */", "+\tif ((parent.style & SWT.CHECK) != 0) {", "+\t\tRectangle checkBounds = getCheckboxBounds ();", "+\t\treturn checkBounds.x + checkBounds.width + Tree.MARGIN_IMAGE;", "+\t}", "+\treturn getHconnectorEndpoints ()[1].x + Tree.MARGIN_IMAGE;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8149c67dfd2cd1466b74adeffa23d61a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 14, "signatureBeforeChange": " void expandAncestors ()", "signatureAfterChange": " Point drawVerticalItemConnector(GC gc, Point position)", "diff": ["-void expandAncestors () {", "-\tif (parentItem != null) parentItem.expandAncestors ();", "-\tsetExpanded (true);", "+ */", "+Point drawVerticalItemConnector(GC gc, Point position) {", "+\tTree2 parent = getParent();", "+\tTreeItem2 parentItem = getParentItem();\t", "+\tRectangle indicatorRectangle = parent.getHierarchyIndicatorRect();", "+\tint itemHeight = parent.getItemHeight();", "+\tint itemHeightDiv2 = itemHeight / 2 + itemHeight % 2;", "+\tint indicatorHeightDiv2 = indicatorRectangle.height / 2 + indicatorRectangle.height % 2;", "+\tint lineX = position.x + indicatorRectangle.width / 2;", "+\tint lineStartY = position.y - itemHeightDiv2;\t", "+\tint lineEndY = position.y + itemHeightDiv2 - itemHeight % 2;", "+\tTreeItem2 predecessor;", "+\tboolean isFirstChild = false;", "+", "+\tif (isRoot() == true) {", "+\t\tif (getIndex() == 0) {", "+\t\t\treturn position;\t\t\t\t\t\t\t\t\t// first root, don't draw vertical line", "+\t\t}", "+\t}", "+\telse\t", "+\tif (getIndex() == 0) {\t\t\t\t\t\t\t\t\t\t// if item is first child", "+\t\tlineStartY += itemHeightDiv2;", "+\t\tisFirstChild = true;", "+\t}", "+\tpredecessor = getPredecessor();", "+\tif (predecessor != null && predecessor.isLeaf() == false) {", "+\t\tlineStartY += indicatorHeightDiv2;\t\t\t\t\t\t// leave space for the hierarchy image", "+\t}", "+\tif (isLeaf() == false) {", "+\t\tlineEndY -= indicatorHeightDiv2;", "+\t}", "+\tgc.drawLine(lineX, lineStartY, lineX, lineEndY);", "+\tif (parentItem != null) {", "+\t\tparentItem.drawVerticalItemConnector(gc, position.y, isFirstChild);", "+\t}", "+\treturn position;", "+}"]}], "num": 53823}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6811d41e39ef5437c01b5c54b8365584", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "071f151c54e8544908fed4566a9f714c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 42, "signatureBeforeChange": " int processFocusIn ()", "signatureAfterChange": "  int kEventRawKeyDown (int nextHandler, int theEvent, int userData)", "diff": ["+", "+int kEventRawKeyDown (int nextHandler, int theEvent, int userData) {", "+\t/*", "+\t* Bug in the Macintosh.  When the default handler calls TXNKeyDown()", "+\t* for a single line TXN Object, it does not check for the return key", "+\t* or the default button.  The result is that a garbage character (the", "+\t* CR) is entered into the TXN Object.  The fix is to temporarily take", "+\t* focus away from the TXN Object, call the default handler to process", "+\t* the return key and reset the focus.", "+\t*/", "+\tif ((style & SWT.SINGLE) != 0) {", "+\t\tint [] keyCode = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "+\t\tswitch (keyCode [0]) {", "+\t\t\tcase 36: //CR KEY", "+\t\t\t\tOS.TXNFocus (txnObject, false);", "+\t\t\t\tint result = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\t\tOS.TXNFocus (txnObject, true);", "+\t\t\t\treturn result;", "+\t\t}", "+\t}", "+\treturn super.kEventRawKeyDown (nextHandler, theEvent, userData);", "+}", "-int processFocusIn () {", "-\tsuper.processFocusIn ();", "-\t// widget could be disposed at this point", "-\tif (handle == 0) return 0;", "-\tif ((style & SWT.READ_ONLY) != 0) return 0;", "-\t", "-\tdrawFrame(null);", "-\tOS.TXNFocus(fTX, true);", "-\t", "-\tif ((style & SWT.MULTI) != 0) return 0;", "-    /* AW", "-\tint [] argList = {OS.XmNcursorPositionVisible, 1};", "-\tOS.XtSetValues (handle, argList, argList.length / 2);", "-    */", "-\treturn 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9164c180cdd5ca179133c2f60d4625f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 26, "signatureBeforeChange": " void click (boolean dropDown, MacMouseEvent mmEvent)", "signatureAfterChange": "  int kEventControlHit (int nextHandler, int theEvent, int userData)", "diff": ["-}", "-void click (boolean dropDown, MacMouseEvent mmEvent) {", "-\tif ((style & SWT.RADIO) != 0) {", "-\t\tselectRadio ();", "-\t} else {", "-\t\tif ((style & SWT.CHECK) != 0) setSelection(!set);\t\t\t", "-\t}", "-\tEvent event = new Event ();", "-\tif ((style & SWT.DROP_DOWN) != 0) {", "-\t\tif (dropDown) event.detail = SWT.ARROW;", "-\t}", "-\tif (mmEvent != null) {", "-\t\t// AW setInputState (event, mEvent);", "-\t\tevent.stateMask= mmEvent.getState();", "-\t}", "-\tpostEvent (SWT.Selection, event);", "-}", "+", "+int kEventControlHit (int nextHandler, int theEvent, int userData) {", "+\tint result = super.kEventControlHit (nextHandler, theEvent, userData);", "+\tif (result == OS.noErr) return result;", "+\tEvent event = new Event ();", "+\tif ((style & SWT.RADIO) != 0) {", "+\t\tif ((parent.getStyle () & SWT.NO_RADIO_GROUP) == 0) {", "+\t\t\tselectRadio ();", "+\t\t}", "+\t}", "+\tif ((style & SWT.CHECK) != 0) setSelection (!getSelection ());", "+\tif ((style & SWT.DROP_DOWN) != 0) {", "+\t\tint [] theControl = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamDirectObject, OS.typeControlRef, null, 4, null, theControl);", "+\t\tif (theControl [0] == arrowHandle) event.detail = SWT.ARROW;", "+\t}", "+\tpostEvent (SWT.Selection, event);", "+\treturn OS.eventNotHandledErr;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5dd1c605bf13bddd6df9a4108bc1b213", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/TabFolder.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 18, "signatureBeforeChange": "  private void handleSelectionChange(int newValue)", "signatureAfterChange": "  int kEventControlHit (int nextHandler, int theEvent, int userData)", "diff": ["+", "+int kEventControlHit (int nextHandler, int theEvent, int userData) {", "+\tint result = super.kEventControlHit (nextHandler, theEvent, userData);", "+\tif (result == OS.noErr) return result;", "+\tint index = OS.GetControl32BitValue (handle) - 1;", "+\tint count = OS.GetControl32BitMaximum (handle);", "+\tfor (int i = 0; i < count; i++) {", "+\t\tif (i != index) {", "+\t\t\tControl control = items [i].control;", "+\t\t\tif (control != null && !control.isDisposed ())", "+\t\t\t\tcontrol.setVisible (false);", "+\tTabItem item = null;", "+\tif (index != -1) item = items [index];", "+\tif (item != null) {", "+\t\tControl control = item.control;", "+\t\tif (control != null && !control.isDisposed ()) {", "+\t\t\tcontrol.setBounds (getClientArea ());", "+\t\t\tcontrol.setVisible (true);", "+\tEvent event = new Event ();", "+\tevent.item = item;", "+\tpostEvent (SWT.Selection, event);", "+\tredraw ();", "+\treturn OS.eventNotHandledErr;", "-", "-private void handleSelectionChange(int newValue)  {", "-", "-\tTabItem item = null;", "-\tint index= oldValue;", "-", "-\tif (index != -1) item = items [index];", "-\tif (item != null) {", "-\t\tControl control = item.control;", "-\t\tif (control != null && !control.isDisposed ()) {", "-\t\t\tcontrol.setVisible (false);", "-\t\t}", "-\t}", "-\t\t", "-\tindex= newValue;", "-\tif (index != -1) item = items [index];", "-\tif (item != null) {", "-\t\tControl control = item.control;", "-\t\tif (control != null && !control.isDisposed ()) {", "-\t\t\tcontrol.setBounds (getClientArea ());", "-\t\t\tcontrol.setVisible (true);", "-\t\t}", "-\t}", "-\t", "-\tEvent event = new Event ();", "-\tevent.item = item;", "-\tpostEvent (SWT.Selection, event);", "-}"]}], "num": 7354}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb1af401668a6c6a408995999df23820", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e372e7be99f44a66d1f910429449e6e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "70ae3ce48de4113f883a77944d126e137c7d7451", "commitAfterChange": "6b597d345be8fb75c19a7f46b82c7685b2bbe38a", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "  boolean setScrollWidth (TableItem item, boolean force)", "signatureAfterChange": "  boolean setScrollWidth (TableItem item, boolean force)", "diff": ["+\t/*", "+\t* NOTE: It is much faster to measure the strings and compute the", "+\t* width of the scroll bar in non-virtual table rather than using", "+\t* LVM_SETCOUMNWIDTH with LVSCW_AUTOSIZE.", "+\t*/", "-\t\tif ((style & SWT.VIRTUAL) != 0) {", "-\t\t\tint newWidth = 0;", "-\t\t\tcount = OS.SendMessage (handle, OS.LVM_GETITEMCOUNT, 0, 0);", "-\t\t\tint index = 0;", "-\t\t\twhile (index < count) {", "-\t\t\t\tString string = null;", "-\t\t\t\tif (item != null) {", "-\t\t\t\t\tstring = item.text;", "-\t\t\t\t} else {", "-\t\t\t\t\tif (items [index] != null) string = items [index].text;", "-\t\t\t\t}", "-\t\t\t\tif (string != null && string.length () != 0) {", "-\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, true);", "-\t\t\t\t\tnewWidth = Math.max (newWidth, OS.SendMessage (handle, OS.LVM_GETSTRINGWIDTH, 0, buffer));", "-\t\t\t\t}", "-\t\t\t\tif (item != null) break;", "-\t\t\t\tindex++;", "+\t\tint newWidth = 0;", "+\t\tcount = OS.SendMessage (handle, OS.LVM_GETITEMCOUNT, 0, 0);", "+\t\tint index = 0;", "+\t\twhile (index < count) {", "+\t\t\tString string = null;", "+\t\t\tif (item != null) {", "+\t\t\t\tstring = item.text;", "+\t\t\t} else {", "+\t\t\t\tif (items [index] != null) string = items [index].text;", "-\t\t\tint hStateList = OS.SendMessage (handle, OS.LVM_GETIMAGELIST, OS.LVSIL_STATE, 0);", "-\t\t\tif (hStateList != 0) {", "-\t\t\t\tint [] cx = new int [1], cy = new int [1];", "-\t\t\t\tOS.ImageList_GetIconSize (hStateList, cx, cy);", "-\t\t\t\tnewWidth += cx [0] + 4;", "+\t\t\tif (string != null && string.length () != 0) {", "+\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, true);", "+\t\t\t\tnewWidth = Math.max (newWidth, OS.SendMessage (handle, OS.LVM_GETSTRINGWIDTH, 0, buffer));", "-\t\t\tint hImageList = OS.SendMessage (handle, OS.LVM_GETIMAGELIST, OS.LVSIL_SMALL, 0);", "-\t\t\tif (hImageList != 0) {", "-\t\t\t\tint [] cx = new int [1], cy = new int [1];", "-\t\t\t\tOS.ImageList_GetIconSize (hImageList, cx, cy);", "-\t\t\t\tnewWidth += cx [0];", "-\t\t\t}", "-\t\t\tnewWidth += 8;", "-\t\t\tint oldWidth = OS.SendMessage (handle, OS.LVM_GETCOLUMNWIDTH, 0, 0);", "-\t\t\tif (newWidth > oldWidth) {", "-\t\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, newWidth);", "-\t\t\t\treturn true;", "-\t\t\t}", "-\t\t} else {", "-\t\t\t/*", "-\t\t\t* Bug in Windows.  When the table has no icons, the width that is", "-\t\t\t* computed by LVM_SETCOLUMNWIDTH with LVSCW_AUTOSIZE is too small,", "-\t\t\t* causing the long items to be truncated with '...'.  The fix is", "-\t\t\t* to increase the size by a small amount.", "-\t\t\t*/", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, OS.LVSCW_AUTOSIZE);", "-\t\t\tif (imageList == null) {", "-\t\t\t\tint width = OS.SendMessage (handle, OS.LVM_GETCOLUMNWIDTH, 0, 0);", "-\t\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, width + 2);", "-\t\t\t}", "+\t\t\tif (item != null) break;", "+\t\t\tindex++;", "+\t\t}", "+\t\tint hStateList = OS.SendMessage (handle, OS.LVM_GETIMAGELIST, OS.LVSIL_STATE, 0);", "+\t\tif (hStateList != 0) {", "+\t\t\tint [] cx = new int [1], cy = new int [1];", "+\t\t\tOS.ImageList_GetIconSize (hStateList, cx, cy);", "+\t\t\tnewWidth += cx [0] + 4;", "+\t\t}", "+\t\tint hImageList = OS.SendMessage (handle, OS.LVM_GETIMAGELIST, OS.LVSIL_SMALL, 0);", "+\t\tif (hImageList != 0) {", "+\t\t\tint [] cx = new int [1], cy = new int [1];", "+\t\t\tOS.ImageList_GetIconSize (hImageList, cx, cy);", "+\t\t\tnewWidth += cx [0];", "+\t\t}", "+\t\tnewWidth += 8;", "+\t\tint oldWidth = OS.SendMessage (handle, OS.LVM_GETCOLUMNWIDTH, 0, 0);", "+\t\tif (newWidth > oldWidth) {", "+\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, newWidth);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65f1d057ecb503f5d7df23d326a54002", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "7e81b84a2c12e711d885a4cd4a47a7eab239d8f4", "commitAfterChange": "edcf7c0e3595e65e30021cf83de1448eadf495c1", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void setText (String string)", "signatureAfterChange": " public void setText (String string)", "diff": ["-\tint newBits = OS.GetWindowLong (handle, OS.GWL_STYLE), oldBits = newBits;", "-\tnewBits &= ~(OS.SS_BITMAP | OS.SS_ICON | OS.SS_REALSIZEIMAGE | OS.SS_CENTERIMAGE);", "-\tif ((style & SWT.LEFT) != 0 && (style & SWT.WRAP) == 0) newBits |= OS.SS_LEFTNOWORDWRAP;", "+\tint oldBits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\tint newBits = oldBits & ~OS.SS_OWNERDRAW;", "+\tif ((style & SWT.LEFT) != 0 && (style & SWT.WRAP) == 0) {", "+\t\tnewBits |= OS.SS_LEFTNOWORDWRAP;", "+\t}", "-\tif (newBits != oldBits) {", "-\t\t/*", "-\t\t* Bug in Windows.  When the style of a label is SS_BITMAP", "-\t\t* or SS_ICON, the label does not remember the font that is", "-\t\t* set in WM_SETFONT.  The fix is to remember the font and", "-\t\t* return the font in WM_GETFONT and to reset the font when", "-\t\t* the style is changed from SS_BITMAP or SS_ICON to a style", "-\t\t* that displays text.", "-\t\t*/", "-\t\tint hFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "+\tif (oldBits != newBits) {", "-\t\tif (hFont != 0) OS.SendMessage (handle, OS.WM_SETFONT, hFont, 0);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3750f4b92884477153c9dcf98caf80f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "9cc72cd00c181250b1f51b95a0528a6b993c1ed9", "commitAfterChange": "1c6100db3e7e2869dd9939a388c01ffe02266ae6", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 42, "signatureBeforeChange": "  boolean setFocus ()", "signatureAfterChange": "  boolean setFocus ()", "diff": ["-\tif ((style & SWT.SEPARATOR) != 0) return false;", "-\tif (!OS.gtk_widget_get_child_visible (handle)) return false;", "-\tOS.GTK_WIDGET_SET_FLAGS (handle, OS.GTK_CAN_FOCUS);", "-\tOS.gtk_widget_grab_focus (handle);", "-\t// widget could be disposed at this point", "-\tif (isDisposed ()) return false;", "-\tboolean result = OS.gtk_widget_is_focus (handle);", "-\tif (!result) OS.GTK_WIDGET_UNSET_FLAGS (handle, OS.GTK_CAN_FOCUS);", "-\treturn result;", "+\treturn OS.gtk_widget_child_focus (handle, OS.GTK_DIR_TAB_FORWARD);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da8b9ccbafd02f53229c408a966fdc4c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "f5a0d3582f75308849543d0ff0517400d5971efe", "commitAfterChange": "6a8f64aba74c6fc7a655a14fc7ca54a1aef70af2", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": "  void setBackgroundImage (int hBitmap)", "signatureAfterChange": "  void setBackgroundImage (int hBitmap)", "diff": ["-\tif (hBitmap != 0) {", "-\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "-\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "-\t\t}", "-\t} else {", "-\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "-\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, bits);", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33312e075aeb26808408843dd117ffeb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "22ebc0bfda7d51c576a69d9ad65b1367c74fe002", "commitAfterChange": "b024555b7be59ed9c69f2568310cc99cd0b6720a", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 43, "signatureBeforeChange": "  LRESULT WM_KEYDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_KEYDOWN (int wParam, int lParam)", "diff": ["-\t\tcase OS.VK_SPACE:", "-\t\t\tint index = OS.SendMessage (handle, OS.TB_GETHOTITEM, 0, 0);", "-\t\t\tif (index != -1) {", "-\t\t\t\tTBBUTTON lpButton = new TBBUTTON ();", "-\t\t\t\tint code = OS.SendMessage (handle, OS.TB_GETBUTTON, index, lpButton);", "-\t\t\t\tif (code != 0) {", "-\t\t\t\t\titems [lpButton.idCommand].click (false);", "-\t\t\t\t\treturn LRESULT.ZERO;", "-\t\t\t\t}", "-\t\t\t}", "+\t\tcase OS.VK_SPACE:\t", "+\t\t\t/*", "+\t\t\t* Ensure that the window proc does not process VK_SPACE", "+\t\t\t* so that it can be handled in WM_CHAR.  This allows the", "+\t\t\t* application the opportunity to cancel the operation.", "+\t\t\t*/", "+\t\t\treturn LRESULT.ZERO;"]}], "num": 22202}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8abcb2d3e8c88f532e0b79e3b74e8ead", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdfaca0a459ae9f41f0b243322bc6477", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "09a3785768d503bf2c57574a8260c2d0c49427ff", "commitAfterChange": "8ea955c0021efe1fefcd6e18a8935618900c3325", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  void computeRuns ()", "signatureAfterChange": "  void computeRuns ()", "diff": ["-\t\t} else {", "-\t\t\tif (wrapWidth != -1 && lineWidth + run.width > wrapWidth) {", "-\t\t\t\tint start = 0;", "-\t\t\t\tchar[] chars = new char[run.length];", "-\t\t\t\ttext.getChars(run.start, run.start + run.length, chars, 0);", "-\t\t\t\tint width = 0, maxWidth = wrapWidth - lineWidth;", "-\t\t\t\tchar[] buffer = new char[1];", "+\t\t}", "+\t\tif (wrapWidth != -1 && lineWidth + run.width > wrapWidth) {", "+\t\t\tint start = 0;", "+\t\t\tchar[] chars = new char[run.length];", "+\t\t\ttext.getChars(run.start, run.start + run.length, chars, 0);", "+\t\t\tint width = 0, maxWidth = wrapWidth - lineWidth;", "+\t\t\tchar[] buffer = new char[1];", "+\t\t\tbuffer[0] = chars[start];", "+\t\t\tint charWidth = stringWidth(run, buffer);", "+\t\t\twhile (width + charWidth < maxWidth) {", "+\t\t\t\twidth += charWidth;", "+\t\t\t\tstart++;", "-\t\t\t\tint charWidth = stringWidth(run, buffer);", "-\t\t\t\twhile (width + charWidth < maxWidth) {", "-\t\t\t\t\twidth += charWidth;", "-\t\t\t\t\tstart++;", "-\t\t\t\t\tbuffer[0] = chars[start];", "-\t\t\t\t\tcharWidth =\tstringWidth(run, buffer);", "+\t\t\t\tcharWidth =\tstringWidth(run, buffer);", "+\t\t\t}", "+\t\t\tint firstStart = start;", "+\t\t\tint firstIndice = i;\t\t\t", "+\t\t\twhile (i >= lineStart) {", "+\t\t\t\tchars = new char[run.length];", "+\t\t\t\ttext.getChars(run.start, run.start + run.length, chars, 0);", "+\t\t\t\twhile(start >= 0) {", "+\t\t\t\t\tif (Compatibility.isSpaceChar(chars[start]) || Compatibility.isWhitespace(chars[start])) break;", "+\t\t\t\t\tstart--;", "-\t\t\t\tint firstStart = start;", "-\t\t\t\tint firstIndice = i;", "-\t\t\t\t", "-\t\t\t\twhile (i >= lineStart) {", "-\t\t\t\t\tchars = new char[run.length];", "-\t\t\t\t\ttext.getChars(run.start, run.start + run.length, chars, 0);", "-\t\t\t\t\twhile(start >= 0) {", "-\t\t\t\t\t\tif (Compatibility.isSpaceChar(chars[start]) || Compatibility.isWhitespace(chars[start])) break;", "-\t\t\t\t\t\tstart--;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (start >= 0 || i == lineStart) break;", "-\t\t\t\t\trun = allRuns[--i];", "-\t\t\t\t\tstart = run.length - 1;", "-\t\t\t\t}", "-\t\t\t\tif (start == 0 && i != lineStart) {", "-\t\t\t\t\trun = allRuns[--i];", "-\t\t\t\t}", "-\t\t\t\tif (start <= 0 && i == lineStart) {", "-\t\t\t\t\ti = firstIndice; ", "-\t\t\t\t\trun = allRuns[i];", "-\t\t\t\t\tstart = Math.max(1, firstStart);", "-\t\t\t\t\tchars = new char[run.length];", "-\t\t\t\t\ttext.getChars(run.start, run.start + run.length, chars, 0);", "-\t\t\t\t\twhile (start < run.length) {", "-\t\t\t\t\t\tif (!Compatibility.isWhitespace(chars[start])) break;", "-\t\t\t\t\t\tstart++;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (0 < start && start < run.length) {", "-\t\t\t\t\tStyleItem newRun = new StyleItem();", "-\t\t\t\t\tnewRun.start = run.start + start;", "-\t\t\t\t\tnewRun.length = run.length - start;", "-\t\t\t\t\tnewRun.style = run.style;", "-\t\t\t\t\trun.length = start;", "-\t\t\t\t\tplace (run);", "-\t\t\t\t\tplace (newRun);", "-\t\t\t\t\tStyleItem[] newAllRuns = new StyleItem[allRuns.length + 1];", "-\t\t\t\t\tSystem.arraycopy(allRuns, 0, newAllRuns, 0, i + 1);", "-\t\t\t\t\tSystem.arraycopy(allRuns, i + 1, newAllRuns, i + 2, allRuns.length - i - 1);", "-\t\t\t\t\tallRuns = newAllRuns;", "-\t\t\t\t\tallRuns[i + 1] = newRun;", "-\t\t\t\t}", "-\t\t\t\tif (i != allRuns.length - 2) {", "-\t\t\t\t\trun.softBreak = run.lineBreak = true;", "-\t\t\t\t}", "+\t\t\t\tif (start >= 0 || i == lineStart) break;", "+\t\t\t\trun = allRuns[--i];", "+\t\t\t\tstart = run.length - 1;", "+\t\t\t}", "+\t\t\tif (start == 0 && i != lineStart) {", "+\t\t\t\trun = allRuns[--i];", "+\t\t\t} else if (start <= 0 && i == lineStart) {", "+\t\t\t\ti = firstIndice; ", "+\t\t\t\trun = allRuns[i];", "+\t\t\t\tstart = Math.max(1, firstStart);", "+\t\t\t}", "+\t\t\tchars = new char[run.length];", "+\t\t\ttext.getChars(run.start, run.start + run.length, chars, 0);", "+\t\t\twhile (start < run.length) {", "+\t\t\t\tif (!Compatibility.isWhitespace(chars[start])) break;", "+\t\t\t\tstart++;", "+\t\t\t}", "+\t\t\tif (0 < start && start < run.length) {", "+\t\t\t\tStyleItem newRun = new StyleItem();", "+\t\t\t\tnewRun.start = run.start + start;", "+\t\t\t\tnewRun.length = run.length - start;", "+\t\t\t\tnewRun.style = run.style;", "+\t\t\t\trun.length = start;", "+\t\t\t\tplace (run);", "+\t\t\t\tplace (newRun);", "+\t\t\t\tStyleItem[] newAllRuns = new StyleItem[allRuns.length + 1];", "+\t\t\t\tSystem.arraycopy(allRuns, 0, newAllRuns, 0, i + 1);", "+\t\t\t\tSystem.arraycopy(allRuns, i + 1, newAllRuns, i + 2, allRuns.length - i - 1);", "+\t\t\t\tallRuns = newAllRuns;", "+\t\t\t\tallRuns[i + 1] = newRun;", "+\t\t\t}", "+\t\t\tif (i != allRuns.length - 2) {", "+\t\t\t\trun.softBreak = run.lineBreak = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83a7200864970e19354e366e43d19b8a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/textlayout/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "8ea955c0021efe1fefcd6e18a8935618900c3325", "commitAfterChange": "219762a1164039e2363870e587712a1160143e8c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void computeRuns (GC gc)", "signatureAfterChange": "  void computeRuns (GC gc)", "diff": ["-\t\t} else {", "-\t\t\tif (wrapWidth != -1 && lineWidth + run.width > wrapWidth) {", "-\t\t\t\tint start = 0;", "-\t\t\t\tgc.setFont(getItemFont(run));", "-\t\t\t\tchar[] chars = new char[run.length];", "+\t\t}", "+\t\tif (wrapWidth != -1 && lineWidth + run.width > wrapWidth) {", "+\t\t\tint start = 0;", "+\t\t\tgc.setFont(getItemFont(run));", "+\t\t\tchar[] chars = new char[run.length];", "+\t\t\ttext.getChars(run.start, run.start + run.length, chars, 0);", "+\t\t\tint width = 0, maxWidth = wrapWidth - lineWidth;", "+\t\t\tint charWidth = gc.stringExtent(String.valueOf(chars[start])).x;", "+\t\t\twhile (width + charWidth < maxWidth) {", "+\t\t\t\twidth += charWidth;", "+\t\t\t\tstart++;", "+\t\t\t\tcharWidth =\tgc.stringExtent(String.valueOf(chars[start])).x;", "+\t\t\t}", "+\t\t\tint firstStart = start;", "+\t\t\tint firstIndice = i;\t\t\t", "+\t\t\twhile (i >= lineStart) {", "+\t\t\t\tchars = new char[run.length];", "-\t\t\t\tint width = 0, maxWidth = wrapWidth - lineWidth;", "-\t\t\t\tint charWidth = gc.stringExtent(String.valueOf(chars[start])).x;", "-\t\t\t\twhile (width + charWidth < maxWidth) {", "-\t\t\t\t\twidth += charWidth;", "-\t\t\t\t\tstart++;", "-\t\t\t\t\tcharWidth =\tgc.stringExtent(String.valueOf(chars[start])).x;", "+\t\t\t\twhile(start >= 0) {", "+\t\t\t\t\tif (Compatibility.isSpaceChar(chars[start]) || Compatibility.isWhitespace(chars[start])) break;", "+\t\t\t\t\tstart--;", "-\t\t\t\tint firstStart = start;", "-\t\t\t\tint firstIndice = i;", "-\t\t\t\t", "-\t\t\t\twhile (i >= lineStart) {", "-\t\t\t\t\tchars = new char[run.length];", "-\t\t\t\t\ttext.getChars(run.start, run.start + run.length, chars, 0);", "-\t\t\t\t\twhile(start >= 0) {", "-\t\t\t\t\t\tif (Compatibility.isSpaceChar(chars[start]) || Compatibility.isWhitespace(chars[start])) break;", "-\t\t\t\t\t\tstart--;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (start >= 0 || i == lineStart) break;", "-\t\t\t\t\trun = allRuns[--i];", "-\t\t\t\t\tstart = run.length - 1;", "-\t\t\t\t}", "-\t\t\t\tif (start == 0 && i != lineStart) {", "-\t\t\t\t\trun = allRuns[--i];", "-\t\t\t\t}", "-\t\t\t\tif (start <= 0 && i == lineStart) {", "-\t\t\t\t\ti = firstIndice; ", "-\t\t\t\t\trun = allRuns[i];", "-\t\t\t\t\tstart = Math.max(1, firstStart);", "-\t\t\t\t\tchars = new char[run.length];", "-\t\t\t\t\ttext.getChars(run.start, run.start + run.length, chars, 0);", "-\t\t\t\t\twhile (start < run.length) {", "-\t\t\t\t\t\tif (!Compatibility.isWhitespace(chars[start])) break;", "-\t\t\t\t\t\tstart++;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (0 < start && start < run.length) {", "-\t\t\t\t\tStyleItem newRun = new StyleItem();", "-\t\t\t\t\tnewRun.start = run.start + start;", "-\t\t\t\t\tnewRun.length = run.length - start;", "-\t\t\t\t\tnewRun.style = run.style;", "-\t\t\t\t\trun.length = start;", "-\t\t\t\t\tgc.setFont(getItemFont(run));", "-\t\t\t\t\tplace (gc, run);", "-\t\t\t\t\tplace (gc, newRun);", "-\t\t\t\t\tStyleItem[] newAllRuns = new StyleItem[allRuns.length + 1];", "-\t\t\t\t\tSystem.arraycopy(allRuns, 0, newAllRuns, 0, i + 1);", "-\t\t\t\t\tSystem.arraycopy(allRuns, i + 1, newAllRuns, i + 2, allRuns.length - i - 1);", "-\t\t\t\t\tallRuns = newAllRuns;", "-\t\t\t\t\tallRuns[i + 1] = newRun;", "-\t\t\t\t}", "-\t\t\t\tif (i != allRuns.length - 2) {", "-\t\t\t\t\trun.softBreak = run.lineBreak = true;", "-\t\t\t\t}", "+\t\t\t\tif (start >= 0 || i == lineStart) break;", "+\t\t\t\trun = allRuns[--i];", "+\t\t\t\tstart = run.length - 1;", "+\t\t\t}", "+\t\t\tif (start == 0 && i != lineStart) {", "+\t\t\t\trun = allRuns[--i];", "+\t\t\t} else if (start <= 0 && i == lineStart) {", "+\t\t\t\ti = firstIndice; ", "+\t\t\t\trun = allRuns[i];", "+\t\t\t\tstart = Math.max(1, firstStart);", "+\t\t\t}", "+\t\t\tchars = new char[run.length];", "+\t\t\ttext.getChars(run.start, run.start + run.length, chars, 0);", "+\t\t\twhile (start < run.length) {", "+\t\t\t\tif (!Compatibility.isWhitespace(chars[start])) break;", "+\t\t\t\tstart++;", "+\t\t\t}", "+\t\t\tif (0 < start && start < run.length) {", "+\t\t\t\tStyleItem newRun = new StyleItem();", "+\t\t\t\tnewRun.start = run.start + start;", "+\t\t\t\tnewRun.length = run.length - start;", "+\t\t\t\tnewRun.style = run.style;", "+\t\t\t\trun.length = start;", "+\t\t\t\tgc.setFont(getItemFont(run));", "+\t\t\t\tplace (gc, run);", "+\t\t\t\tplace (gc, newRun);", "+\t\t\t\tStyleItem[] newAllRuns = new StyleItem[allRuns.length + 1];", "+\t\t\t\tSystem.arraycopy(allRuns, 0, newAllRuns, 0, i + 1);", "+\t\t\t\tSystem.arraycopy(allRuns, i + 1, newAllRuns, i + 2, allRuns.length - i - 1);", "+\t\t\t\tallRuns = newAllRuns;", "+\t\t\t\tallRuns[i + 1] = newRun;", "+\t\t\t}", "+\t\t\tif (i != allRuns.length - 2) {", "+\t\t\t\trun.softBreak = run.lineBreak = true;"]}], "num": 3546}
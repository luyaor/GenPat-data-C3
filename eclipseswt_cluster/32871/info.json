{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "47a9f54a14085c3913c6c06467817572", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeba7d1174d89b3d49cf878c61bdeda1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/gtk/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "6827e7561886a98908d3b58e22819238a237e195", "commitAfterChange": "cef5bd1a247a5c315d365f197b72d292f04814a2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\t\tserviceManager.Release();", "-\t\t", "+", "-\t\t", "+", "+\t\t/*", "+\t\t * As a result of not using profiles, the user's locale defaults", "+\t\t * to en_us, which is not the correct value for users in other", "+\t\t * locales.  The fix for this is to set mozilla's locale preference", "+\t\t * value according to the user's current locale.", "+\t\t */", "+\t\tbuffer = XPCOM.NS_PREFSERVICE_CONTRACTID.getBytes();", "+\t\taContractID = new byte[buffer.length + 1];", "+\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "+\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIPrefService.NS_IPREFSERVICE_IID, result);", "+\t\tserviceManager.Release();", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+", "+\t\tnsIPrefService prefService = new nsIPrefService(result[0]);", "+\t\tresult[0] = 0;", "+\t\tbuffer = new byte[1];", "+\t\trc = prefService.GetBranch(buffer, result);\t/* empty buffer denotes root preference level */", "+\t\tprefService.Release();", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+", "+\t\tnsIPrefBranch prefBranch = new nsIPrefBranch(result[0]);", "+\t\tresult[0] = 0;", "+\t\tbuffer = Converter.wcsToMbcs(null, PREFERENCE_LANGUAGES, true);", "+\t\trc = prefBranch.GetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+", "+\t\t/* get Mozilla's current locale preference value */", "+\t\tnsIPrefLocalizedString localizedString = new nsIPrefLocalizedString(result[0]);", "+\t\tresult[0] = 0;", "+\t\trc = localizedString.ToString(result);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\t\tint length = XPCOM.strlen_PRUnichar(result[0]);", "+\t\tchar[] dest = new char[length];", "+\t\tXPCOM.memmove(dest, result[0], length * 2);", "+\t\tString prefLocales = new String(dest) + TOKENIZER_LOCALE;", "+", "+\t\t/*", "+\t\t * construct the new locale preference value by prepending the", "+\t\t * user's current locale and language to the original value ", "+\t\t */", "+\t\tLocale locale = java.util.Locale.getDefault();", "+\t\tString language = locale.getLanguage();", "+\t\tString country = locale.getCountry();", "+\t\tStringBuffer stringBuffer = new StringBuffer (language);", "+\t\tstringBuffer.append(SEPARATOR_LOCALE);", "+\t\tstringBuffer.append(country.toLowerCase());", "+\t\tstringBuffer.append(TOKENIZER_LOCALE);", "+\t\tstringBuffer.append(language);", "+\t\tstringBuffer.append(TOKENIZER_LOCALE);", "+\t\tString newLocales = stringBuffer.toString();", "+\t\tStringTokenizer tokenzier = new StringTokenizer(prefLocales, TOKENIZER_LOCALE);", "+\t\twhile (tokenzier.hasMoreTokens()) {", "+\t\t\tString token = (tokenzier.nextToken() + TOKENIZER_LOCALE).trim();", "+\t\t\t/* ensure that duplicate locale values are not added */", "+\t\t\tif (newLocales.indexOf(token) == -1) {", "+\t\t\t\tstringBuffer.append(token);", "+\t\t\t}", "+\t\t}", "+\t\tnewLocales = stringBuffer.toString();", "+\t\tif (!newLocales.equals(prefLocales)) {", "+\t\t\t/* write the new value */", "+\t\t\tnewLocales = newLocales.substring(0, newLocales.length() - TOKENIZER_LOCALE.length ()); /* remove trailing tokenizer */", "+\t\t\tlength = newLocales.length();", "+\t\t\tchar[] charBuffer = new char[length + 1];", "+\t\t\tnewLocales.getChars(0, length, charBuffer, 0);", "+\t\t\tlocalizedString.SetDataWithLength(length, charBuffer);", "+\t\t\trc = prefBranch.SetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress());", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t}", "+\t\tlocalizedString.Release();", "+\t\tprefBranch.Release();", "+", "-\t\t", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf656113e4ee25863f630c176caffa84", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "cef5bd1a247a5c315d365f197b72d292f04814a2", "commitAfterChange": "e9b2c7ca6d5c8b50d4092f6d6556d9deb2f156bf", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["+\t\t/*", "+\t\t * As a result of not using profiles, the user's locale defaults", "+\t\t * to en_us, which is not the correct value for users in other", "+\t\t * locales.  The fix for this is to set mozilla's locale preference", "+\t\t * value according to the user's current locale.", "+\t\t */", "+\t\tbuffer = XPCOM.NS_PREFSERVICE_CONTRACTID.getBytes();", "+\t\taContractID = new byte[buffer.length + 1];", "+\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "+\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIPrefService.NS_IPREFSERVICE_IID, result);", "+\t\tserviceManager.Release();", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+", "+\t\tnsIPrefService prefService = new nsIPrefService(result[0]);", "+\t\tresult[0] = 0;", "+\t\tbuffer = new byte[1];", "+\t\trc = prefService.GetBranch(buffer, result);\t/* empty buffer denotes root preference level */", "+\t\tprefService.Release();", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+", "+\t\tnsIPrefBranch prefBranch = new nsIPrefBranch(result[0]);", "+\t\tresult[0] = 0;", "+\t\tbuffer = Converter.wcsToMbcs(null, PREFERENCE_LANGUAGES, true);", "+\t\trc = prefBranch.GetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+", "+\t\t/* get Mozilla's current locale preference value */", "+\t\tnsIPrefLocalizedString localizedString = new nsIPrefLocalizedString(result[0]);", "+\t\tresult[0] = 0;", "+\t\trc = localizedString.ToString(result);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\t\tint length = XPCOM.strlen_PRUnichar(result[0]);", "+\t\tchar[] dest = new char[length];", "+\t\tXPCOM.memmove(dest, result[0], length * 2);", "+\t\tString prefLocales = new String(dest) + TOKENIZER_LOCALE;", "+", "+\t\t/*", "+\t\t * construct the new locale preference value by prepending the", "+\t\t * user's current locale and language to the original value ", "+\t\t */", "+\t\tLocale locale = java.util.Locale.getDefault();", "+\t\tString language = locale.getLanguage();", "+\t\tString country = locale.getCountry();", "+\t\tStringBuffer stringBuffer = new StringBuffer (language);", "+\t\tstringBuffer.append(SEPARATOR_LOCALE);", "+\t\tstringBuffer.append(country.toLowerCase());", "+\t\tstringBuffer.append(TOKENIZER_LOCALE);", "+\t\tstringBuffer.append(language);", "+\t\tstringBuffer.append(TOKENIZER_LOCALE);", "+\t\tString newLocales = stringBuffer.toString();", "+\t\tStringTokenizer tokenzier = new StringTokenizer(prefLocales, TOKENIZER_LOCALE);", "+\t\twhile (tokenzier.hasMoreTokens()) {", "+\t\t\tString token = (tokenzier.nextToken() + TOKENIZER_LOCALE).trim();", "+\t\t\t/* ensure that duplicate locale values are not added */", "+\t\t\tif (newLocales.indexOf(token) == -1) {", "+\t\t\t\tstringBuffer.append(token);", "+\t\t\t}", "+\t\t}", "+\t\tnewLocales = stringBuffer.toString();", "+\t\tif (!newLocales.equals(prefLocales)) {", "+\t\t\t/* write the new value */", "+\t\t\tnewLocales = newLocales.substring(0, newLocales.length() - TOKENIZER_LOCALE.length ()); /* remove trailing tokenizer */", "+\t\t\tlength = newLocales.length();", "+\t\t\tchar[] charBuffer = new char[length + 1];", "+\t\t\tnewLocales.getChars(0, length, charBuffer, 0);", "+\t\t\tlocalizedString.SetDataWithLength(length, charBuffer);", "+\t\t\trc = prefBranch.SetComplexValue(buffer, nsIPrefLocalizedString.NS_IPREFLOCALIZEDSTRING_IID, localizedString.getAddress());", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t}", "+\t\tlocalizedString.Release();", "+\t\tprefBranch.Release();", "+"]}], "num": 32871}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a0ee161945b490a3724929b3e775a7e9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50ebcaae748b8871ce126382f26743e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "f99ef2fd3e299eaae5b095e6b27fba9b7bccb0bc", "commitAfterChange": "5f701df943c9d6be0ccfe4e4e53db25d9291eba8", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "  void generateSends()", "signatureAfterChange": "  void generateSends()", "diff": ["-\tTreeSet set = new TreeSet();", "+\tTreeMap set = new TreeMap();", "+\tTreeMap set64 = new TreeMap();", "-\t\t\tif (\"class\".equals(node.getNodeName())) {", "-\t\t\t\tif (getGen(node)) {", "-\t\t\t\t\tNodeList methods = node.getChildNodes();", "-\t\t\t\t\tfor (int j = 0; j < methods.getLength(); j++) {", "-\t\t\t\t\t\tNode method = methods.item(j);", "-\t\t\t\t\t\tif (\"method\".equals(method.getNodeName())) {", "-\t\t\t\t\t\t\tif (getGen(method)) {", "-\t\t\t\t\t\t\t\tString code = buildSend(method, false, false);", "-\t\t\t\t\t\t\t\tString code64 = buildSend(method, false, true);", "-\t\t\t\t\t\t\t\tset.add(code64);", "-\t\t\t\t\t\t\t\tset.add(code);", "-\t\t\t\t\t\t\t}", "+\t\t\tif (\"class\".equals(node.getNodeName()) && getGen(node)) {", "+\t\t\t\tNodeList methods = node.getChildNodes();", "+\t\t\t\tfor (int j = 0; j < methods.getLength(); j++) {", "+\t\t\t\t\tNode method = methods.item(j);", "+\t\t\t\t\tif (\"method\".equals(method.getNodeName()) && getGen(method)) {", "+\t\t\t\t\t\tString code = buildSend(method, false, false);", "+\t\t\t\t\t\tString code64 = buildSend(method, false, true);", "+\t\t\t\t\t\tif (set.get(code) == null) {", "+\t\t\t\t\t\t\tset.put(code, method);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (set64.get(code64) == null) {", "+\t\t\t\t\t\t\tset64.put(code64, method);", "-\tout(\"//TODO - trim unused 64 bit calls\");", "-\tfor (Iterator iterator = set.iterator(); iterator.hasNext();) {", "+\tTreeMap tagsSet = new TreeMap();", "+\tfor (Iterator iterator = set.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = (String)iterator.next();", "+\t\tNode method = (Node)set.get(key);", "+\t\tString tagCode = buildSend(method, false, true);", "+\t\tif (set64.get(tagCode) != null) {", "+\t\t\ttagsSet.put(key, method);", "+\t\t\titerator.remove();", "+\t\t\tset64.remove(tagCode);", "+\t\t}", "+\t}", "+\tTreeSet all = new TreeSet();", "+\tfor (Iterator iterator = tagsSet.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = (String) iterator.next();", "+\t\tNode method = (Node)tagsSet.get(key);", "+\t\tall.add(buildSend(method, true, false));", "+\t}", "+\tfor (Iterator iterator = set.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = (String) iterator.next();", "+\t\tall.add(key);", "+\t}", "+\tfor (Iterator iterator = set64.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = (String) iterator.next();", "+\t\tall.add(key);", "+\t}", "+\tfor (Iterator iterator = all.iterator(); iterator.hasNext();) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c7a42be7b875fe9b7ff41a271e9c0d4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_TableItem.java", "commitBeforeChange": "80dfb437e1cf72ae8fdf50da1fe73b0a6cf99eed", "commitAfterChange": "5f54319c118c62a8385f5e04df3f5c1e943c1812", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  public void test_setForegroundILorg_eclipse_swt_graphics_Color()", "signatureAfterChange": "  public void test_setForegroundILorg_eclipse_swt_graphics_Color()", "diff": ["-\twarnUnimpl(\"Test test_setForegroundILorg_eclipse_swt_graphics_Color not written\");", "+\tDisplay display = tableItem.getDisplay();", "+\tColor red = display.getSystemColor(SWT.COLOR_RED);", "+\tColor blue = display.getSystemColor(SWT.COLOR_BLUE);", "+\t", "+\t// no columns", "+\tassertEquals(table.getForeground(), tableItem.getForeground(0));", "+\tassertEquals(tableItem.getForeground(), tableItem.getForeground(0));", "+\ttableItem.setForeground(0, red);", "+\tassertEquals(red, tableItem.getForeground(0));", "+\t", "+\t// index beyond range - no error", "+\ttableItem.setForeground(10, red);", "+\tassertEquals(tableItem.getForeground(), tableItem.getForeground(10));", "+\t", "+\t// with columns", "+\tTableColumn column1 = new TableColumn(table, SWT.LEFT);", "+\tTableColumn column2 = new TableColumn(table, SWT.LEFT);", "+\t", "+\t// index beyond range - no error", "+\ttableItem.setForeground(10, red);", "+\tassertEquals(tableItem.getForeground(), tableItem.getForeground(10));", "+\t", "+\ttableItem.setForeground(0, red);", "+\tassertEquals(red, tableItem.getForeground(0));", "+\ttableItem.setForeground(0, null);", "+\tassertEquals(table.getForeground(),tableItem.getForeground(0));", "+", "+\ttableItem.setForeground(0, blue);", "+\ttableItem.setForeground(red);", "+\tassertEquals(blue, tableItem.getForeground(0));", "+\t", "+\ttableItem.setForeground(0, null);", "+\tassertEquals(red, tableItem.getForeground(0));", "+\t", "+\ttableItem.setForeground(null);", "+\tassertEquals(table.getForeground(),tableItem.getForeground(0));", "+\t", "+\ttry { ", "+\t\tColor color = new Color(display, 255, 0, 0);", "+\t\tcolor.dispose();", "+\t\ttableItem.setForeground(color);", "+\t\tfail(\"No exception thrown for color disposed\");\t\t", "+\t} catch (IllegalArgumentException e) {", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76783aa1026eadc3b892e5ba5cf563ad", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_TableItem.java", "commitBeforeChange": "80dfb437e1cf72ae8fdf50da1fe73b0a6cf99eed", "commitAfterChange": "5f54319c118c62a8385f5e04df3f5c1e943c1812", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  public void test_setBackgroundILorg_eclipse_swt_graphics_Color()", "signatureAfterChange": "  public void test_setBackgroundILorg_eclipse_swt_graphics_Color()", "diff": ["-\twarnUnimpl(\"Test test_setBackgroundILorg_eclipse_swt_graphics_Color not written\");", "+\tDisplay display = tableItem.getDisplay();", "+\tColor red = display.getSystemColor(SWT.COLOR_RED);", "+\tColor blue = display.getSystemColor(SWT.COLOR_BLUE);", "+\t", "+\t// no columns", "+\tassertEquals(table.getBackground(), tableItem.getBackground(0));", "+\tassertEquals(tableItem.getBackground(), tableItem.getBackground(0));", "+\ttableItem.setBackground(0, red);", "+\tassertEquals(red, tableItem.getBackground(0));", "+\t", "+\t// index beyond range - no error", "+\ttableItem.setBackground(10, red);", "+\tassertEquals(tableItem.getBackground(), tableItem.getBackground(10));", "+\t", "+\t// with columns", "+\tTableColumn column1 = new TableColumn(table, SWT.LEFT);", "+\tTableColumn column2 = new TableColumn(table, SWT.LEFT);", "+\t", "+\t// index beyond range - no error", "+\ttableItem.setBackground(10, red);", "+\tassertEquals(tableItem.getBackground(), tableItem.getBackground(10));", "+\t", "+\ttableItem.setBackground(0, red);", "+\tassertEquals(red, tableItem.getBackground(0));", "+\ttableItem.setBackground(0, null);", "+\tassertEquals(table.getBackground(),tableItem.getBackground(0));", "+", "+\ttableItem.setBackground(0, blue);", "+\ttableItem.setBackground(red);", "+\tassertEquals(blue, tableItem.getBackground(0));", "+\t", "+\ttableItem.setBackground(0, null);", "+\tassertEquals(red, tableItem.getBackground(0));", "+\t", "+\ttableItem.setBackground(null);", "+\tassertEquals(table.getBackground(),tableItem.getBackground(0));", "+\t", "+\ttry { ", "+\t\tColor color = new Color(display, 255, 0, 0);", "+\t\tcolor.dispose();", "+\t\ttableItem.setBackground(color);", "+\t\tfail(\"No exception thrown for color disposed\");\t\t", "+\t} catch (IllegalArgumentException e) {", "+\t}"]}], "num": 36913}
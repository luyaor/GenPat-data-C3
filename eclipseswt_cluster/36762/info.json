{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a053d66f176e8ece9b0d76db4235610d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "009cd5a40a0f1ac03d9bcb7ddf3cfb78", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "9cc72cd00c181250b1f51b95a0528a6b993c1ed9", "commitAfterChange": "1c6100db3e7e2869dd9939a388c01ffe02266ae6", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 51, "signatureBeforeChange": " public void setText (String string)", "signatureAfterChange": " public void setText (String string)", "diff": ["-\tif ((style & SWT.SEPARATOR) != 0) return;", "+\tif (((style & SWT.SEPARATOR) != 0) || text.equals(string)) return;", "-\tif (labelHandle == 0) return;", "-\tOS.gtk_label_set_text_with_mnemonic (labelHandle, buffer);", "-\tif (string.length () != 0) {", "-\t\tOS.gtk_widget_show (labelHandle);", "+\tif ((style & SWT.DROP_DOWN) != 0 && OS.GTK_VERSION < OS.VERSION (2, 6, 0)) {", "+\t\tOS.gtk_label_set_text_with_mnemonic (labelHandle, buffer);", "+\t\tif (string.length () != 0) {", "+\t\t\tOS.gtk_widget_show (labelHandle);", "+\t\t} else {", "+\t\t\tOS.gtk_widget_hide (labelHandle);", "+\t\t}", "+\t}", "+\tOS.gtk_tool_button_set_label (handle, buffer);", "+\t/*", "+\t * Feature in GTK. Toolitems with only image appear larger", "+\t * than the preferred size. The fix is to set the style as", "+\t * TOOLBAR_BOTH_HORIZ. If any of the child toolItem is set", "+\t * text, then the style shall be set back to default.", "+\t */", "+\tif (string.length() != 0) {", "+\t\thasText = true;", "+\t\tif ((parent.style & SWT.RIGHT) == 0) OS.gtk_toolbar_set_style (parent.handle, OS.GTK_TOOLBAR_BOTH);", "-\t\tOS.gtk_widget_hide (labelHandle);", "+\t\t/*", "+\t\t * If the toolbar has any item containing text, then the style", "+\t\t * should be TOOLBAR_BOTH. Otherwise, it should be set back to", "+\t\t * BOTH_HORIZ in order to prevent the larger size consumed by item.", "+\t\t */", "+\t\thasText = false;", "+\t\tToolItem[] items = parent._getItems();", "+\t\tboolean hasTextItems = false;", "+\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\tToolItem item = items[i];", "+\t\t\tif (item != null) hasTextItems |= item.hasText;", "+\t\t}", "+\t\tif (!hasTextItems) OS.gtk_toolbar_set_style (parent.handle, OS.GTK_TOOLBAR_BOTH_HORIZ);", "+\t}", "+\tif ((style & SWT.DROP_DOWN) != 0) {", "+\t\tproxyMenuItem = 0;", "+\t\tproxyMenuItem = OS.gtk_tool_item_retrieve_proxy_menu_item (handle);", "+\t\tOS.g_signal_connect(proxyMenuItem, OS.activate, ToolBar.menuItemSelectedFunc.getAddress(), handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7507cc9ee7ef2e86b5cefcecbb4ff05e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 46, "signatureBeforeChange": "\r \r int processMouseUp (int callData)", "signatureAfterChange": "\r int processMouseUp (int callData)", "diff": ["-int processMouseUp (int callData) {\r", "-\tgetDisplay ().hideToolTip();\t\r", "-\r", "-\t/**\r", "-\t* Bug in Motif. The activate callback is unreliable on \r", "-\t* drawn buttons. Rather than relying on it to generate\r", "-\t* selection events, use the mouseUp event.\r", "-\tint [] argList = {OS.XmNwidth, 0, OS.XmNheight, 0};\r", "-\tif (xEvent.x >= 0 && xEvent.y >= 0 && xEvent.x <= argList[1] && xEvent.y <= argList[3]) {\r", "-\t\tprocessSelection(0);\r", "-\t}\r", "-\tsetDrawPressed(set);\t\r", "+int processMouseUp (int callData) {\r", "+\tDisplay display = getDisplay ();\r", "+\tdisplay.hideToolTip(); \r", "+\tXButtonEvent xEvent = new XButtonEvent ();\r", "+\tOS.memmove (xEvent, callData, XButtonEvent.sizeof);\r", "+\tif (xEvent.button == 1) {\r", "+\t\tint [] argList = {OS.XmNwidth, 0, OS.XmNheight, 0};\r", "+\t\tOS.XtGetValues (handle, argList, argList.length / 2);\r", "+\t\tint width = argList [1], height = argList [3];\r", "+\t\tif (0 <= xEvent.x && xEvent.x < width && 0 <= xEvent.y && xEvent.y < height) {\r", "+\t\t\tif ((style & SWT.RADIO) != 0) {\r", "+\t\t\t\tselectRadio ();\r", "+\t\t\t} else {\r", "+\t\t\t\tif ((style & SWT.CHECK) != 0) setSelection(!set);\t\t\t\r", "+\t\t\t}\r", "+\t\t\tEvent event = new Event ();\r", "+\t\t\tif ((style & SWT.DROP_DOWN) != 0) {\r", "+\t\t\t\tif (xEvent.x > width - 12) event.detail = SWT.ARROW;\r", "+\t\t\t}\r", "+\t\t\tpostEvent (SWT.Selection, event);\r", "+\t\t}\r", "+\t\tsetDrawPressed(set);\r", "+\t}\r", "+\t/*\r", "+\t* Forward the mouse event to the parent.\r", "+\t* This is necessary so that mouse listeners\r", "+\t* in the parent will be called, despite the\r", "+\t* fact that the event did not really occur\r", "+\t* in X in the parent.  This is done to be\r", "+\t* compatible with Windows.\r", "+\t*/\r", "+\tint [] argList = {OS.XmNx, 0, OS.XmNy, 0};\r", "+\tOS.XtGetValues (handle, argList, argList.length / 2);\r", "+\txEvent.window = OS.XtWindow (parent.handle);\r", "+\txEvent.x += argList [1];  xEvent.y += argList [3];\r", "+\tOS.memmove (callData, xEvent, XButtonEvent.sizeof);\r", "+\tparent.processMouseUp (callData);\r", "+\r", "+\treturn 0;\r", "+}\r"]}], "num": 36762}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5cb654aa27c51c2bf6f4b51037ba6805", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a99fc6c509eec2b19a845b3c0973099", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "3f8101474c4f9d64a69b780f9a29957977994c1c", "commitAfterChange": "ec9593cc82c5a72b6479eac5f3bdaf617409cb43", "methodNumberBeforeChange": 146, "methodNumberAfterChange": 148, "signatureBeforeChange": "  LRESULT wmNotify (NMHDR hdr, int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotify (NMHDR hdr, int wParam, int lParam)", "diff": ["+\tint /*long*/ hwndToolTip = OS.SendMessage (handle, OS.LVM_GETTOOLTIPS, 0, 0);", "+\tif (hdr.hwndFrom == hwndToolTip) {", "+\t\tLRESULT result = wmNotifyToolTip (hdr, wParam, lParam);", "+\t\tif (result != null) return result;", "+\t}", "-\t\t/*", "-\t\t* Feature in Windows.  On NT, the automatically created", "-\t\t* header control is created as a UNICODE window, not an", "-\t\t* ANSI window despite the fact that the parent is created", "-\t\t* as an ANSI window.  This means that it sends UNICODE", "-\t\t* notification messages to the parent window on NT for", "-\t\t* no good reason.  The data and size in the NMHEADER and", "-\t\t* HDITEM structs is identical between the platforms so no", "-\t\t* different message is actually necessary.  Despite this,", "-\t\t* Windows sends different messages.  The fix is to look", "-\t\t* for both messages, despite the platform.  This works", "-\t\t* because only one will be sent on either platform, never", "-\t\t* both.", "-\t\t*/", "-\t\tswitch (hdr.code) {", "-\t\t\tcase OS.HDN_BEGINTRACKW:", "-\t\t\tcase OS.HDN_BEGINTRACKA:", "-\t\t\tcase OS.HDN_DIVIDERDBLCLICKW:", "-\t\t\tcase OS.HDN_DIVIDERDBLCLICKA: {", "-\t\t\t\tif (columnCount == 0) return LRESULT.ONE;", "-\t\t\t\tNMHEADER phdn = new NMHEADER ();", "-\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "-\t\t\t\tTableColumn column = columns [phdn.iItem];", "-\t\t\t\tif (column != null && !column.getResizable ()) {", "-\t\t\t\t\treturn LRESULT.ONE;", "-\t\t\t\t}", "-\t\t\t\tignoreColumnMove = true;", "-\t\t\t\tswitch (hdr.code) {", "-\t\t\t\t\tcase OS.HDN_DIVIDERDBLCLICKW:", "-\t\t\t\t\tcase OS.HDN_DIVIDERDBLCLICKA:", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* Bug in Windows.  When the first column of a table does not", "-\t\t\t\t\t\t* have an image and the user double clicks on the divider,", "-\t\t\t\t\t\t* Windows packs the column but does not take into account", "-\t\t\t\t\t\t* the empty space left for the image.  The fix is to measure", "-\t\t\t\t\t\t* each items ourselves rather than letting Windows do it.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tboolean fixPack = phdn.iItem == 0 && !firstColumnImage;", "-\t\t\t\t\t\tif (column != null && (fixPack || hooks (SWT.MeasureItem))) {", "-\t\t\t\t\t\t\tcolumn.pack ();", "-\t\t\t\t\t\t\treturn LRESULT.ONE;", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.NM_RELEASEDCAPTURE: {", "-\t\t\t\tif (!ignoreColumnMove) {", "-\t\t\t\t\tfor (int i=0; i<columnCount; i++) {", "-\t\t\t\t\t\tTableColumn column = columns [i];", "-\t\t\t\t\t\tcolumn.updateToolTip (i);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tignoreColumnMove = false;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.HDN_BEGINDRAG: {", "-\t\t\t\tif (ignoreColumnMove) return LRESULT.ONE;", "-\t\t\t\tint bits = (int)/*64*/OS.SendMessage (handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0);", "-\t\t\t\tif ((bits & OS.LVS_EX_HEADERDRAGDROP) == 0) break; ", "-\t\t\t\tif (columnCount == 0) return LRESULT.ONE;", "-\t\t\t\tNMHEADER phdn = new NMHEADER ();", "-\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "-\t\t\t\tif (phdn.iItem != -1) {", "-\t\t\t\t\tTableColumn column = columns [phdn.iItem];", "-\t\t\t\t\tif (column != null && !column.getMoveable ()) {", "-\t\t\t\t\t\tignoreColumnMove = true;", "-\t\t\t\t\t\treturn LRESULT.ONE;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.HDN_ENDDRAG: {", "-\t\t\t\tint bits = (int)/*64*/OS.SendMessage (handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0);", "-\t\t\t\tif ((bits & OS.LVS_EX_HEADERDRAGDROP) == 0) break;", "-\t\t\t\tNMHEADER phdn = new NMHEADER ();", "-\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "-\t\t\t\tif (phdn.iItem != -1 && phdn.pitem != 0) {", "-\t\t\t\t\tHDITEM pitem = new HDITEM ();", "-\t\t\t\t\tOS.MoveMemory (pitem, phdn.pitem, HDITEM.sizeof);", "-\t\t\t\t\tif ((pitem.mask & OS.HDI_ORDER) != 0 && pitem.iOrder != -1) {", "-\t\t\t\t\t\tif (columnCount == 0) break;", "-\t\t\t\t\t\tint [] order = new int [columnCount];", "-\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_GETCOLUMNORDERARRAY, columnCount, order);", "-\t\t\t\t\t\tint index = 0;", "-\t\t\t\t\t\twhile (index < order.length) {", "-\t\t\t\t\t\t \tif (order [index] == phdn.iItem) break;", "-\t\t\t\t\t\t\tindex++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (index == order.length) index = 0;", "-\t\t\t\t\t\tif (index == pitem.iOrder) break;", "-\t\t\t\t\t\tint start = Math.min (index, pitem.iOrder);", "-\t\t\t\t\t\tint end = Math.max (index, pitem.iOrder);", "-\t\t\t\t\t\tignoreColumnMove = false;", "-\t\t\t\t\t\tfor (int i=start; i<=end; i++) {", "-\t\t\t\t\t\t\tTableColumn column = columns [order [i]];", "-\t\t\t\t\t\t\tif (!column.isDisposed ()) {", "-\t\t\t\t\t\t\t\tcolumn.postEvent (SWT.Move);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.HDN_ITEMCHANGEDW:", "-\t\t\tcase OS.HDN_ITEMCHANGEDA: {", "-\t\t\t\t/*", "-\t\t\t\t* Bug in Windows.  When a table has the LVS_EX_GRIDLINES extended", "-\t\t\t\t* style and the user drags any column over the first column in the", "-\t\t\t\t* table, making the size become zero, when the user drags a column", "-\t\t\t\t* such that the size of the first column becomes non-zero, the grid", "-\t\t\t\t* lines are not redrawn.  The fix is to detect the case and force", "-\t\t\t\t* a redraw of the first column.", "-\t\t\t\t*/", "-\t\t\t\tint width = (int)/*64*/OS.SendMessage (handle, OS.LVM_GETCOLUMNWIDTH, 0, 0);", "-\t\t\t\tif (lastWidth == 0 && width > 0) {", "-\t\t\t\t\tint bits = (int)/*64*/OS.SendMessage (handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0);", "-\t\t\t\t\tif ((bits & OS.LVS_EX_GRIDLINES) != 0) {", "-\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\tOS.GetClientRect (handle, rect);", "-\t\t\t\t\t\trect.right = rect.left + width;", "-\t\t\t\t\t\tOS.InvalidateRect (handle, rect, true);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tlastWidth = width;", "-\t\t\t\tif (!ignoreColumnResize) {", "-\t\t\t\t\tNMHEADER phdn = new NMHEADER ();", "-\t\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "-\t\t\t\t\tif (phdn.pitem != 0) {", "-\t\t\t\t\t\tHDITEM pitem = new HDITEM ();", "-\t\t\t\t\t\tOS.MoveMemory (pitem, phdn.pitem, HDITEM.sizeof);", "-\t\t\t\t\t\tif ((pitem.mask & OS.HDI_WIDTH) != 0) {", "-\t\t\t\t\t\t\tTableColumn column = columns [phdn.iItem];", "-\t\t\t\t\t\t\tif (column != null) {", "-\t\t\t\t\t\t\t\tcolumn.updateToolTip (phdn.iItem);", "-\t\t\t\t\t\t\t\tcolumn.sendEvent (SWT.Resize);", "-\t\t\t\t\t\t\t\tif (isDisposed ()) return LRESULT.ZERO;", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t* It is possible (but unlikely), that application", "-\t\t\t\t\t\t\t\t* code could have disposed the column in the move", "-\t\t\t\t\t\t\t\t* event.  If this happens, process the move event", "-\t\t\t\t\t\t\t\t* for those columns that have not been destroyed.", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\tTableColumn [] newColumns = new TableColumn [columnCount];", "-\t\t\t\t\t\t\t\tSystem.arraycopy (columns, 0, newColumns, 0, columnCount);", "-\t\t\t\t\t\t\t\tint [] order = new int [columnCount];", "-\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_GETCOLUMNORDERARRAY, columnCount, order);", "-\t\t\t\t\t\t\t\tboolean moved = false;", "-\t\t\t\t\t\t\t\tfor (int i=0; i<columnCount; i++) {", "-\t\t\t\t\t\t\t\t\tTableColumn nextColumn = newColumns [order [i]];", "-\t\t\t\t\t\t\t\t\tif (moved && !nextColumn.isDisposed ()) {", "-\t\t\t\t\t\t\t\t\t\tnextColumn.updateToolTip (order [i]);", "-\t\t\t\t\t\t\t\t\t\tnextColumn.sendEvent (SWT.Move);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tif (nextColumn == column) moved = true;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.HDN_ITEMDBLCLICKW:", "-\t\t\tcase OS.HDN_ITEMDBLCLICKA: {", "-\t\t\t\tNMHEADER phdn = new NMHEADER ();", "-\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "-\t\t\t\tTableColumn column = columns [phdn.iItem];", "-\t\t\t\tif (column != null) {", "-\t\t\t\t\tcolumn.postEvent (SWT.DefaultSelection);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "+\t\tLRESULT result = wmNotifyHeader (hdr, wParam, lParam);", "+\t\tif (result != null) return result;", "-\tLRESULT result = super.wmNotify (hdr, wParam, lParam);", "-\tif (result != null) return result;", "-\tswitch (hdr.code) {", "-\t\tcase OS.TTN_GETDISPINFOA:", "-\t\tcase OS.TTN_GETDISPINFOW: {", "-\t\t\ttipRequested = true;", "-\t\t\tint /*long*/ code = callWindowProc (handle, OS.WM_NOTIFY, wParam, lParam);", "-\t\t\ttipRequested = false;", "-\t\t\treturn new LRESULT (code);", "-\t\t}", "-\t}", "-\treturn result;", "+\treturn super.wmNotify (hdr, wParam, lParam);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd475ca321d6f549d8044e8fc752ed55", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "1cafb9b13b36075eb1d31bd71ad3febbf37de5b5", "commitAfterChange": "4b7ac62e4c7abc2bdb8c97e1ee5fae6064a184d8", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  LRESULT WM_IME_COMPOSITION (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_IME_COMPOSITION (int wParam, int lParam)", "diff": ["-\tLRESULT result = super.WM_IME_COMPOSITION (wParam, lParam);", "-\tif (isInlineIMEEnabled ()) {", "-\t\tint /*long*/ hIMC = OS.ImmGetContext (handle);", "-\t\tif (hIMC != 0) {", "-\t\t\tTCHAR buffer = null;", "-\t\t\tif ((lParam & OS.GCS_RESULTSTR) != 0) {", "-\t\t\t\tint length = OS.ImmGetCompositionString (hIMC, OS.GCS_RESULTSTR, null, 0);", "-\t\t\t\tif (length > 0) {", "-\t\t\t\t\tbuffer = new TCHAR (getCodePage (), length / TCHAR.sizeof);", "-\t\t\t\t\tOS.ImmGetCompositionString (hIMC, OS.GCS_RESULTSTR, buffer, length);", "-\t\t\t\t\tString text = buffer.toString (); ", "-\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\tevent.detail = SWT.COMPOSITION_CHANGED;", "-\t\t\t\t\tevent.text = text;", "-\t\t\t\t\tevent.count = text.length ();", "-\t\t\t\t\tsendEvent (SWT.ImeComposition, event);", "-\t\t\t\t\tif (event.doit) {", "-\t\t\t\t\t\tDisplay display = this.display;", "-\t\t\t\t\t\tdisplay.lastKey = 0;", "-\t\t\t\t\t\tdisplay.lastVirtual = display.lastNull = display.lastDead = false;", "-\t\t\t\t\t\tlength = text.length ();", "-\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\tchar c = text.charAt (i);", "-\t\t\t\t\t\t\tdisplay.lastAscii = c;", "-\t\t\t\t\t\t\tevent = new Event ();", "-\t\t\t\t\t\t\tevent.character = c;", "-\t\t\t\t\t\t\tsendEvent (SWT.KeyDown, event);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif ((lParam & OS.GCS_COMPSTR) == 0) return LRESULT.ONE;", "-\t\t\t}", "-\t\t\t", "-\t\t\tbuffer = null;", "-\t\t\tint index = 0;", "-\t\t\tint [] ranges = null;", "-\t\t\tTextStyle [] styles = null;", "-\t\t\tint /*long*/ layout = OS.GetKeyboardLayout (0);", "-\t\t\tshort langID = (short)OS.LOWORD (layout);", "-\t\t\tif ((lParam & OS.GCS_COMPSTR) != 0) {", "-\t\t\t\tint length = OS.ImmGetCompositionString (hIMC, OS.GCS_COMPSTR, null, 0);", "-\t\t\t\tif (length > 0) {", "-\t\t\t\t\tbuffer = new TCHAR (getCodePage (), length / TCHAR.sizeof);", "-\t\t\t\t\tOS.ImmGetCompositionString (hIMC, OS.GCS_COMPSTR, buffer, length);", "-\t\t\t\t\tif ((lParam & OS.GCS_CURSORPOS) != 0) {", "-\t\t\t\t\t\tindex = OS.ImmGetCompositionString (hIMC, OS.GCS_CURSORPOS, null, 0);", "-\t\t\t\t\t}", "-\t\t\t\t\tint [] clauses = null;", "-\t\t\t\t\tif ((lParam & OS.GCS_COMPCLAUSE) != 0) {", "-\t\t\t\t\t\tlength = OS.ImmGetCompositionStringW (hIMC, OS.GCS_COMPCLAUSE, (int [])null, 0);", "-\t\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\t\tclauses = new int [length / 4];", "-\t\t\t\t\t\t\tOS.ImmGetCompositionStringW (hIMC, OS.GCS_COMPCLAUSE, clauses, length);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif ((lParam & OS.GCS_COMPATTR) != 0 && clauses != null) {", "-\t\t\t\t\t\tlength = OS.ImmGetCompositionStringA (hIMC, OS.GCS_COMPATTR, (byte [])null, 0);", "-\t\t\t\t\t\tif (length > 0) {", "-\t\t\t\t\t\t\tbyte [] attrs = new byte [length];", "-\t\t\t\t\t\t\tOS.ImmGetCompositionStringA (hIMC, OS.GCS_COMPATTR, attrs, length);", "-\t\t\t\t\t\t\tlength = clauses.length - 1;", "-\t\t\t\t\t\t\tranges = new int [length * 2];", "-\t\t\t\t\t\t\tstyles = new TextStyle [length];", "-\t\t\t\t\t\t\tTF_DISPLAYATTRIBUTE attr = null; ", "-\t\t\t\t\t\t\tTextStyle style = null;", "-\t\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\t\t\t\tranges [i * 2] = clauses [i];", "-\t\t\t\t\t\t\t\tranges [i * 2 + 1] = clauses [i + 1] - clauses [i];", "-\t\t\t\t\t\t\t\tstyles [i] = style = new TextStyle ();", "-\t\t\t\t\t\t\t\tattr = getDisplayAttribute (langID, attrs [clauses [i]]);", "-\t\t\t\t\t\t\t\tif (attr != null) {", "-\t\t\t\t\t\t\t\t\tswitch (attr.crText.type) {", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.foreground = Color.win32_new (display, attr.crText.cr);", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "-\t\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crText.cr);", "-\t\t\t\t\t\t\t\t\t\t\tstyle.foreground = Color.win32_new (display, colorRef);", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tswitch (attr.crBk.type) {", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.background = Color.win32_new (display, attr.crBk.cr);", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "-\t\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crBk.cr);", "-\t\t\t\t\t\t\t\t\t\t\tstyle.background = Color.win32_new (display, colorRef);", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tswitch (attr.crLine.type) {", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_COLORREF:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.underlineColor = Color.win32_new (display, attr.crLine.cr);", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_CT_SYSCOLOR:", "-\t\t\t\t\t\t\t\t\t\t\tint colorRef = OS.GetSysColor (attr.crLine.cr);", "-\t\t\t\t\t\t\t\t\t\t\tstyle.underlineColor = Color.win32_new (display, colorRef);", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tstyle.underline = attr.lsStyle != OS.TF_LS_NONE;", "-\t\t\t\t\t\t\t\t\tswitch (attr.lsStyle) {", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_SQUIGGLE:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = SWT.UNDERLINE_ERROR;", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_DASH:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = UNDERLINE_IME_DASH; ", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_DOT:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = UNDERLINE_IME_DOT;", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tcase OS.TF_LS_SOLID:", "-\t\t\t\t\t\t\t\t\t\t\tstyle.underlineStyle = attr.fBoldLine ? UNDERLINE_IME_THICK : SWT.UNDERLINE_SINGLE;", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tOS.ImmReleaseContext (handle, hIMC);", "-\t\t\t}", "-\t\t\tString text = buffer != null ? buffer.toString () : \"\";", "-\t\t\tEvent event = new Event ();", "-\t\t\tevent.detail = SWT.COMPOSITION_CHANGED;", "-\t\t\tevent.text = text;", "-\t\t\tevent.index = index;", "-\t\t\tevent.count = 0;", "-\t\t\tevent.ranges = ranges;", "-\t\t\tevent.styles = styles;", "-\t\t\tevent.wideCaret = OS.PRIMARYLANGID (langID) == OS.LANG_KOREAN; ", "-\t\t\tsendEvent (SWT.ImeComposition, event);", "-\t\t}", "-\t\treturn LRESULT.ONE;", "-\t} else {", "-\t\t/*", "-\t\t* Bug in Windows.  On Korean Windows XP, the IME window", "-\t\t* for the Korean Input System (MS-IME 2002) always opens ", "-\t\t* in the top left corner of the screen, despite the fact", "-\t\t* that ImmSetCompositionWindow() was called to position", "-\t\t* the IME when focus is gained.  The fix is to position", "-\t\t* the IME on every WM_IME_COMPOSITION message.", "-\t\t*/", "-\t\tif (!OS.IsWinCE && OS.WIN32_VERSION == OS.VERSION (5, 1)) {", "-\t\t\tif (OS.IsDBLocale) {", "-\t\t\t\tshort langID = OS.GetSystemDefaultUILanguage ();", "-\t\t\t\tshort primaryLang = OS.PRIMARYLANGID (langID);", "-\t\t\t\tif (primaryLang == OS.LANG_KOREAN) {", "-\t\t\t\t\tif (caret != null && caret.isFocusCaret ()) {", "-\t\t\t\t\t\tPOINT ptCurrentPos = new POINT ();", "-\t\t\t\t\t\tif (OS.GetCaretPos (ptCurrentPos)) {", "-\t\t\t\t\t\t\tCOMPOSITIONFORM lpCompForm = new COMPOSITIONFORM ();", "-\t\t\t\t\t\t\tlpCompForm.dwStyle = OS.CFS_POINT;", "-\t\t\t\t\t\t\tlpCompForm.x = ptCurrentPos.x;", "-\t\t\t\t\t\t\tlpCompForm.y = ptCurrentPos.y;", "-\t\t\t\t\t\t\tint /*long*/ hIMC = OS.ImmGetContext (handle);", "-\t\t\t\t\t\t\tOS.ImmSetCompositionWindow (hIMC, lpCompForm);", "-\t\t\t\t\t\t\tOS.ImmReleaseContext (handle, hIMC);", "-\t\t\t\t\t\t}", "+\tif (ime != null) {", "+\t\tLRESULT result = ime.WM_IME_COMPOSITION (wParam, lParam);", "+\t\tif (result != null) return result;", "+\t}", "+\t", "+\t/*", "+\t* Bug in Windows.  On Korean Windows XP, the IME window", "+\t* for the Korean Input System (MS-IME 2002) always opens ", "+\t* in the top left corner of the screen, despite the fact", "+\t* that ImmSetCompositionWindow() was called to position", "+\t* the IME when focus is gained.  The fix is to position", "+\t* the IME on every WM_IME_COMPOSITION message.", "+\t*/", "+\tif (!OS.IsWinCE && OS.WIN32_VERSION == OS.VERSION (5, 1)) {", "+\t\tif (OS.IsDBLocale) {", "+\t\t\tshort langID = OS.GetSystemDefaultUILanguage ();", "+\t\t\tshort primaryLang = OS.PRIMARYLANGID (langID);", "+\t\t\tif (primaryLang == OS.LANG_KOREAN) {", "+\t\t\t\tif (caret != null && caret.isFocusCaret ()) {", "+\t\t\t\t\tPOINT ptCurrentPos = new POINT ();", "+\t\t\t\t\tif (OS.GetCaretPos (ptCurrentPos)) {", "+\t\t\t\t\t\tCOMPOSITIONFORM lpCompForm = new COMPOSITIONFORM ();", "+\t\t\t\t\t\tlpCompForm.dwStyle = OS.CFS_POINT;", "+\t\t\t\t\t\tlpCompForm.x = ptCurrentPos.x;", "+\t\t\t\t\t\tlpCompForm.y = ptCurrentPos.y;", "+\t\t\t\t\t\tint /*long*/ hIMC = OS.ImmGetContext (handle);", "+\t\t\t\t\t\tOS.ImmSetCompositionWindow (hIMC, lpCompForm);", "+\t\t\t\t\t\tOS.ImmReleaseContext (handle, hIMC);", "-\treturn result;", "+\treturn super.WM_IME_COMPOSITION (wParam, lParam);"]}], "num": 12592}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "303a0e10707a538e95cb9dd12443969c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8568a9a143ba5fed833b63d7b2dd3417", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "4262e30557c8354760b26b45d13a939a0506a334", "commitAfterChange": "d76fb41b9e70dedc7a332a519d4398be52fba882", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 119, "signatureBeforeChange": "\r StyledTextEvent getLineStyleData(int lineOffset, String line)", "signatureAfterChange": "\r StyledTextEvent getLineStyleData(int lineOffset, String line)", "diff": ["-\t\t\t\t// automatically apply the style to the entire ligature.  Note that\r", "-\t\t\t\t// there is no need to deal with segments when checking for the ligatures.\r", "-\t\t\t\tStyledTextBidi bidi = new StyledTextBidi(gc, tabWidth, line, null, null, new int[] {0, line.length()});\r", "+\t\t\t\t// automatically apply the style to the entire ligature.\r", "+\t\t\t\t// Since ligatures can't extend over multiple lines (they aren't \r", "+\t\t\t\t// ligatures if they are separated by a line delimiter) we can ignore\r", "+\t\t\t\t// style starts or ends that are not on the current line.\r", "+\t\t\t\t// Note that there is no need to deal with segments when checking for\r", "+\t\t\t\t// the ligatures.\r", "+\t\t\t\tint lineLength = line.length();\r", "+\t\t\t\tStyledTextBidi bidi = new StyledTextBidi(gc, tabWidth, line, null, null, new int[] {0, lineLength});\r", "+\t\t\t\t\tStyleRange newRange = null;\r", "-\t\t\t\t\tint startLigature = bidi.getLigatureStartOffset(relativeStart);\r", "-\t\t\t\t\tif (startLigature != relativeStart) {\r", "-\t\t\t\t\t\trange.start = range.start - (relativeStart - startLigature);\r", "-\t\t\t\t\t\trange.length = range.length + (relativeStart - startLigature);\r", "+\t\t\t\t\tif (relativeStart >= 0) {\r", "+\t\t\t\t\t\tint startLigature = bidi.getLigatureStartOffset(relativeStart);\r", "+\t\t\t\t\t\tif (startLigature != relativeStart) {\r", "+\t\t\t\t\t\t\tnewRange = (StyleRange) range.clone();\r", "+\t\t\t\t\t\t\trange = event.styles[i] = newRange;\r", "+\t\t\t\t\t\t\trange.start = range.start - (relativeStart - startLigature);\r", "+\t\t\t\t\t\t\trange.length = range.length + (relativeStart - startLigature);\r", "+\t\t\t\t\t\t}\r", "-\t\t\t\t\tint endLigature = bidi.getLigatureEndOffset(relativeEnd);\r", "-\t\t\t\t\tif (endLigature != relativeEnd) {\r", "-\t\t\t\t\t\trange.length = range.length + (endLigature - relativeEnd);\r", "+\t\t\t\t\tif (relativeEnd < lineLength) {\r", "+\t\t\t\t\t\tint endLigature = bidi.getLigatureEndOffset(relativeEnd);\r", "+\t\t\t\t\t\tif (endLigature != relativeEnd) {\r", "+\t\t\t\t\t\t\tif (newRange == null) {\r", "+\t\t\t\t\t\t\t\tnewRange = (StyleRange) range.clone();\r", "+\t\t\t\t\t\t\t\trange = event.styles[i] = newRange;\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\trange.length = range.length + (endLigature - relativeEnd);\r", "+\t\t\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5c34a9775fe5258b4bb85d0cff162ae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "7626ff31966ce4808bcae79f4d61b2fe12aacf96", "commitAfterChange": "13a025bd51afcbc91969bc9e2cc641b3f36fec4c", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static int getDesktop(final Display display)", "signatureAfterChange": " static int getDesktop(final Display display)", "diff": ["-\t\t\t\t\tif (gnomeIconTheme.value != 0) GNOME.g_object_unref(gnomeIconTheme.value);", "+\t\t\t\t\tif (gnomeIconTheme.value != 0) OS.g_object_unref(gnomeIconTheme.value);", "-\t\t\t/* Check for libgnomevfs-2 version 2.4 */", "-\t\t\tbyte[] buffer = Converter.wcsToMbcs(null, \"libgnomevfs-2.so.0\", true);", "-\t\t\tint /*long*/ libgnomevfs = OS.dlopen(buffer, OS.RTLD_LAZY);", "-\t\t\tif (libgnomevfs != 0) {", "-\t\t\t\tbuffer = Converter.wcsToMbcs(null, \"gnome_vfs_url_show\", true);", "-\t\t\t\tint /*long*/ gnome_vfs_url_show = OS.dlsym(libgnomevfs, buffer);", "-\t\t\t\tif (gnome_vfs_url_show != 0) {", "-\t\t\t\t\tdesktop = DESKTOP_GNOME_24;", "+\t\t\t/* Check for the existence of libgio libraries */", "+\t\t\tbyte[] buffer = Converter.wcsToMbcs(null, \"libgio-2.0.so.0\", true);", "+\t\t\tint /*long*/ libgio = OS.dlopen(buffer, OS.RTLD_LAZY);", "+\t\t\tif (libgio != 0) {", "+\t\t\t\tbuffer = Converter.wcsToMbcs(null, \"g_app_info_launch_default_for_uri\", true);", "+\t\t\t\tint /*long*/ g_app_info_launch_default_for_uri = OS.dlsym(libgio, buffer);", "+\t\t\t\tif (g_app_info_launch_default_for_uri != 0) {", "+\t\t\t\t\tdesktop = DESKTOP_GIO;", "-\t\t\t\tOS.dlclose(libgnomevfs);", "+\t\t\t\tOS.dlclose(libgio);", "+\t\t\t} else {", "+\t\t\t\t/* Check for libgnomevfs-2 version 2.4 */", "+\t\t\t\tbuffer = Converter.wcsToMbcs(null, \"libgnomevfs-2.so.0\", true);", "+\t\t\t\tint /*long*/ libgnomevfs = OS.dlopen(buffer, OS.RTLD_LAZY);", "+\t\t\t\tif (libgnomevfs != 0) {", "+\t\t\t\t\tbuffer = Converter.wcsToMbcs(null, \"gnome_vfs_url_show\", true);", "+\t\t\t\t\tint /*long*/ gnome_vfs_url_show = OS.dlsym(libgnomevfs, buffer);", "+\t\t\t\t\tif (gnome_vfs_url_show != 0) {", "+\t\t\t\t\t\tdesktop = DESKTOP_GNOME_24;", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.dlclose(libgnomevfs);", "+\t\t\t\t}"]}], "num": 34376}
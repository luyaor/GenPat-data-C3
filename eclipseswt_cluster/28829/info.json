{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "034b37bec34ba14d115279822d2a4101", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bb96457cb00e8e4dc449cab9a84dbc8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 40, "signatureBeforeChange": "  \tvoid handleMenu(int menuResult)", "signatureAfterChange": "  public void setVisible (boolean visible)", "diff": ["+\tDisplay display = getDisplay ();", "+\tif (visible) {", "+\t\tdisplay.addPopup (this);", "+\t} else {", "+\t\tdisplay.removePopup (this);", "+\t\t_setVisible (false);", "-", "-\tvoid handleMenu(int menuResult) {", "-\t\tint index= OS.LoWord(menuResult)-1;\t", "-\t\tif (index >= 0 && index < getItemCount()) {", "-\t\t\tMenuItem item= getItem(index);", "-\t\t\tif (item != null)", "-\t\t\t\titem.handleMenuSelect();", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd34f54270c7ff2603fa39176b098a59", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "24ab5f53f55697aac60b1a606db74900dd8353b8", "commitAfterChange": "1da9191ea29d071286b6aab808485631fbe84e75", "methodNumberBeforeChange": 77, "methodNumberAfterChange": 77, "signatureBeforeChange": "\r private void showToolTip (int x, int y)", "signatureAfterChange": "\r private void showToolTip (int x, int y)", "diff": ["-\t\t\tLabel label = (Label) (tip.getChildren() [0]);\r", "-\t\t\tlabel.setText(tooltip);\r", "-\t\t\tColor foreground = display.getSystemColor (SWT.COLOR_INFO_FOREGROUND);\r", "-\t\t\tColor background = display.getSystemColor (SWT.COLOR_INFO_BACKGROUND);\r", "-\t\t\tlabel.setForeground (foreground);\r", "-\t\t\tlabel.setBackground (background);\r", "-\t\t\ttip.setBackground(background);\r", "+\t\t\tlabel.setForeground (display.getSystemColor (SWT.COLOR_INFO_FOREGROUND));\r", "+\t\t\tlabel.setBackground (display.getSystemColor (SWT.COLOR_INFO_BACKGROUND));\r", "+\t\t\tlabel.setText(tooltip);\r", "+\t\t\tPoint labelSize = label.computeSize(SWT.DEFAULT, SWT.DEFAULT);\r", "+\t\t\tlabelSize.x += 2; labelSize.y += 2;\r", "+\t\t\tlabel.setSize(labelSize);\r", "-\t\t\tPoint size = tip.getSize();\r", "-\t\t\tpt.x = Math.max (0, Math.min (pt.x, rect.width - size.x));\r", "-\t\t\tpt.y = Math.max (0, Math.min (pt.y, rect.height - size.y));\r", "+\t\t\tPoint tipSize = tip.getSize();\r", "+\t\t\tpt.x = Math.max (0, Math.min (pt.x, rect.width - tipSize.x));\r", "+\t\t\tpt.y = Math.max (0, Math.min (pt.y, rect.height - tipSize.y));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fbcaab9a2a27c3187d7d6f505f2b725", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "600b89ee6ff510b2a64fa922689dfd227ef54277", "commitAfterChange": "2b534ce2a81715fb909f4a246680577d6b4de34c", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": "  void updateSystemUIMode ()", "signatureAfterChange": "  void updateSystemUIMode ()", "diff": ["-\tboolean isActive = false;", "-\tShell activeShell = display.getActiveShell ();", "-\tShell current = this;", "-\twhile (current != null) {", "-\t\tif (current.equals (activeShell)) {", "-\t\t\tisActive = true;", "-\t\t\tbreak;", "+\tif (fullScreen) {", "+\t\tint mode = OS.kUIModeAllHidden;", "+\t\tif (menuBar != null) {", "+\t\t\tmode = OS.kUIModeContentHidden;", "-\t\tcurrent = (Shell) current.parent;", "+\t\tOS.SetSystemUIMode (mode, 0);", "+\t\twindow.setFrame(fullScreenFrame, true);", "+\t} else {", "+\t\tOS.SetSystemUIMode (OS.kUIModeNormal, 0);", "-\tif (!isActive) return;", "-//\tif (fullScreen) {", "-//\t\tint mode = OS.kUIModeAllHidden;", "-//\t\tif (menuBar != null) {", "-//\t\t\tmode = OS.kUIModeContentHidden;", "-//\t\t}", "-//\t\tOS.SetSystemUIMode (mode, 0);", "-//\t} else {", "-//\t\tOS.SetSystemUIMode (OS.kUIModeNormal, 0);", "-//\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "669046271522ba3fdc7895a1463e78e6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolItem.java", "commitBeforeChange": "af35bb868ce7a4db640d728af68bfb767fa4e09f", "commitAfterChange": "a1b6110a7c4d57ed7e255ff1bd265349917f369d", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r \r public void setSize (int width, int height)", "signatureAfterChange": "\r \r public void setSize (int width, int height)", "diff": ["+\trbBand.fMask = OS.RBBIM_HEADERSIZE;\r", "+\tOS.SendMessage (hwnd, OS.RB_GETBANDINFO, index, rbBand);\r", "-\trbBand.cx = width;\r", "-\trbBand.cyChild = height;\r", "-\tPoint preferred = getPreferredSize();\r", "-\tif (preferred != null) {\r", "-\t\trbBand.cyMinChild = rbBand.cyMaxChild = preferred.y;\r", "-\t} else {\r", "-\t\trbBand.cyMinChild = rbBand.cyMaxChild = height;\r", "-\t}\r", "-\tOS.SendMessage (hwnd, OS.RB_SETBANDINFO, index, rbBand);\t\r", "+\trbBand.cx = Math.max (width, rbBand.cxHeader);\r", "+\trbBand.cyChild = Math.max (MINIMUM_CHILD_HEIGHT, height);\r", "+\trbBand.cyMinChild = rbBand.cyMaxChild = rbBand.cyChild;\r", "+\tOS.SendMessage (hwnd, OS.RB_SETBANDINFO, index, rbBand);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "61f8d3874b2ba4650c48a428a6834e4b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": " int computeColumnIntersect (int x, int startColumn)", "signatureAfterChange": " void calculateWidestExpandingItem(TreeItem2 item)", "diff": ["+ */", "+void calculateWidestExpandingItem(TreeItem2 item) {", "+\tint itemIndex = item.getVisibleIndex();", "+\tint newMaximumItemWidth = getContentWidth();", "+\tint stopIndex = itemIndex + item.getVisibleItemCount();", "+", "+\tfor (int i = itemIndex + 1; i <= stopIndex; i++) {", "+\t\tnewMaximumItemWidth = Math.max(newMaximumItemWidth, getContentWidth(i));", "+\t}", "+\tsetContentWidth(newMaximumItemWidth);", "+}", "-int computeColumnIntersect (int x, int startColumn) {", "-\tint numColumns = getColumnCount ();", "-\tfor (int i = startColumn; i < numColumns; i++) {", "-\t\tint endX = columns[i].getX () + columns[i].width;", "-\t\tif (x <= endX) return i;", "-\t}", "-\treturn -1;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e9cb1ed3dc3625bcaa69ba7b760fe1bd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "c1973b46db8cd4469e0142b9dab4e550763edba9", "commitAfterChange": "ae4beeffe7337cf7e444061dd64504cdf7c4d90d", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": " public boolean dragDetect (int button, int stateMask, int x, int y)", "signatureAfterChange": "  public boolean dragDetect (Event event)", "diff": ["+public boolean dragDetect (Event event) {", "+\tcheckWidget ();", "+\tif (event == null) error (SWT.ERROR_NULL_ARGUMENT);", "+\treturn dragDetect (event.button, event.count, event.stateMask, event.x, event.y);", "+}", "-\tif (button != 1) return false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ebf5f5ffe32510f6182c8709bf5cef7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "9e0ab3fc82f1e213430da5e447aa46210f561ba0", "commitAfterChange": "90711383384705dfabec4c2b0f9d83af7b9b405f", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "\r public void showItem (TableItem item)", "signatureAfterChange": "\r \r void showItem (int index)", "diff": ["+void showItem (int index) {\r", "+\t/*\r", "+\t* Bug in Windows.  For some reason, when there is insufficient space\r", "+\t* to show an item, LVM_ENSUREVISIBLE causes blank lines to be\r", "+\t* inserted at the top of the widget.  A call to LVM_GETTOPINDEX will\r", "+\t* return a negative number (this is an impossible result).  The fix \r", "+\t* is to use LVM_GETCOUNTPERPAGE to detect the case when the number \r", "+\t* of visible items is zero and use LVM_ENSUREVISIBLE with the fPartialOK\r", "+\t* flag to scroll the table.\r", "+\t*/\r", "+\tif (OS.SendMessage (handle, OS.LVM_GETCOUNTPERPAGE, 0, 0) <= 0) {\r", "+\t\t/*\r", "+\t\t* Bug in Windows.  For some reason, LVM_ENSUREVISIBLE can\r", "+\t\t* scroll one item more or one item less when there is not\r", "+\t\t* enough space to show a single table item.  The fix is\r", "+\t\t* to detect the case and call LVM_ENSUREVISIBLE again with\r", "+\t\t* the same arguments.  It seems that once LVM_ENSUREVISIBLE\r", "+\t\t* has scrolled into the general area, it is able to scroll\r", "+\t\t* to the exact item.\r", "+\t\t*/\r", "+\t\tOS.SendMessage (handle, OS.LVM_ENSUREVISIBLE, index, 1);\r", "+\t\tif (index != OS.SendMessage (handle, OS.LVM_GETTOPINDEX, 0, 0)) {\r", "+\t\t\tOS.SendMessage (handle, OS.LVM_ENSUREVISIBLE, index, 1);\r", "+\t\t}\t\t\r", "+\t} else {\r", "+\t\tOS.SendMessage (handle, OS.LVM_ENSUREVISIBLE, index, 0);\r", "+\t}\r", "+}\r", "-\t/*\r", "-\t* Bug in Windows.  For some reason, when there is insufficient space\r", "-\t* to show an item, LVM_ENSUREVISIBLE causes blank lines to be\r", "-\t* inserted at the top of the widget.  A call to LVM_GETTOPINDEX will\r", "-\t* return a negative number (this is an impossible result).  The fix is to\r", "-\t* detect this case and fail to show the selection.\r", "-\t*/\r", "-\tif (OS.SendMessage (handle, OS.LVM_GETCOUNTPERPAGE, 0, 0) <= 0)  return;\r", "-\tif (index != -1) {\r", "-\t\tOS.SendMessage (handle, OS.LVM_ENSUREVISIBLE, index, 0);\r", "-\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8e6ca78b0291e073a89408ee182dea94", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "87e1d7f705b3b4e8c8265bdffd9f083c32e5ca37", "commitAfterChange": "ab58235df3d0e4a502cf41cb498d5201eb66d16a", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 12, "signatureBeforeChange": "  int kEventTextInputUnicodeForKeyEvent (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  void hookEvents ()", "diff": ["+void hookEvents () {", "+\tsuper.hookEvents ();", "+\tint clockProc = display.clockProc;", "+\tint [] mask = new int [] {", "+\t\tOS.kEventClassClockView, OS.kEventClockDateOrTimeChanged,", "+\t};", "+\tint controlTarget = OS.GetControlEventTarget (handle);", "+\tOS.InstallEventHandler (controlTarget, clockProc, mask.length / 2, mask, handle, null);", "+}", "-", "-int kEventTextInputUnicodeForKeyEvent (int nextHandler, int theEvent, int userData) {", "-\tint result = super.kEventTextInputUnicodeForKeyEvent (nextHandler, theEvent, userData);", "-\tif (result == OS.noErr) return result;", "-\tsendSelectionEvent ();", "-\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fceb007c48cbeca633d7bb90a97f6e88", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "e2e7896b3cf0e9c97f6038a8e9fe8cfb357377bf", "commitAfterChange": "d2e697ac12d333462fab7aa686c0fbe95379eed0", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 64, "signatureBeforeChange": "  int getDelimiterCount (String string, char delimiter)", "signatureAfterChange": " public void showSelection ()", "diff": ["-", "-int getDelimiterCount (String string, char delimiter) {", "-\tint count=0, index = -1;", "-\twhile ((index = string.indexOf (delimiter, index) + 1) != 0) {", "-\t\tcount++;", "-\t}", "-\treturn count;\t\t\t", "+\tif ((style & SWT.SINGLE) != 0) return;", "+\tint mark = OS.gtk_text_buffer_get_selection_bound (bufferHandle);", "+\tOS.gtk_text_view_scroll_mark_onscreen (handle, mark);", "+\tmark = OS.gtk_text_buffer_get_insert (bufferHandle);", "+\tOS.gtk_text_view_scroll_mark_onscreen (handle, mark);"]}], "num": 28829}
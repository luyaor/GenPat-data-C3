{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab7d7a2a0358aa79a90c078b8cdb98d5", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e78481b68bc1ca9036216ce7409b47a7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/TableDragSourceEffect.java", "commitBeforeChange": "bcac6ad70ee319247deb043444a858ffd48b487d", "commitAfterChange": "aa3c6d8a75ecd3aa62e9b9ee7768d59f601718ad", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tImage getDragSourceImage(DragSourceEvent event)", "signatureAfterChange": " \t \tImage getDragSourceImage(DragSourceEvent event)", "diff": ["-\t\tdragSourceImage = null;\t\t", "-\t\t", "+\t\tdragSourceImage = null;", "+", "-\t\t", "-\t\tif (OS.GTK3) return null;", "-\t\t\tlong /*int*/ pixmap = OS.gtk_tree_view_create_row_drag_icon(handle, path);", "-\t\t\tdragSourceImage =  Image.gtk_new(display, SWT.ICON, pixmap, 0);", "+\t\t\tlong /*int*/ icon = OS.gtk_tree_view_create_row_drag_icon (handle, path);", "+\t\t\tdragSourceImage =  Image.gtk_new (display, SWT.ICON, icon, 0);", "-\t\t\tlong /*int*/ [] pixmaps = new long /*int*/ [count];", "+\t\t\tlong /*int*/ [] icons = new long /*int*/ [count];", "-\t\t\t\tpixmaps[i] = OS.gtk_tree_view_create_row_drag_icon(handle, path);", "-\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION(2, 24, 0)) {", "-\t\t\t\t\tOS.gdk_pixmap_get_size(pixmaps[i], w, h);", "+\t\t\t\ticons[i] = OS.gtk_tree_view_create_row_drag_icon(handle, path);", "+\t\t\t\tif (OS.GTK3) {", "+\t\t\t\t\tw[0] = Cairo.cairo_xlib_surface_get_width(icons[i]);", "+\t\t\t\t\th[0] = Cairo.cairo_xlib_surface_get_height(icons[i]);", "+\t\t\t\t} else if (OS.GTK_VERSION >= OS.VERSION(2, 24, 0)) {", "+\t\t\t\t\tOS.gdk_pixmap_get_size(icons[i], w, h);", "-\t\t\t\t\tOS.gdk_drawable_get_size(pixmaps[i], w, h);", "+\t\t\t\t\tOS.gdk_drawable_get_size(icons[i], w, h);", "-\t\t\tlong /*int*/ source = OS.gdk_pixmap_new(OS.gdk_get_default_root_window(), width, height, -1);", "-\t\t\tlong /*int*/ gcSource = OS.gdk_gc_new(source);", "-\t\t\tlong /*int*/ mask = OS.gdk_pixmap_new(OS.gdk_get_default_root_window(), width, height, 1);", "-\t\t\tlong /*int*/ gcMask = OS.gdk_gc_new(mask);", "-\t\t\tGdkColor color = new GdkColor();", "-\t\t\tcolor.pixel = 0;", "-\t\t\tOS.gdk_gc_set_foreground(gcMask, color);", "-\t\t\tOS.gdk_draw_rectangle(mask, gcMask, 1, 0, 0, width, height);", "-\t\t\tcolor.pixel = 1;", "-\t\t\tOS.gdk_gc_set_foreground(gcMask, color);", "-\t\t\tfor (int i=0; i<count; i++) {", "-\t\t\t\tOS.gdk_draw_drawable(source, gcSource, pixmaps[i], 0, 0, 0, yy[i] - yy[0], -1, -1);", "-\t\t\t\tOS.gdk_draw_rectangle(mask, gcMask, 1, 0, yy[i] - yy[0], width, hh[i]);", "-\t\t\t\tOS.g_object_unref(pixmaps[i]);", "+\t\t\tif (OS.GTK3) {", "+\t\t\t\tlong /*int*/ surface = Cairo.cairo_image_surface_create(Cairo.CAIRO_FORMAT_ARGB32, width, height);", "+\t\t\t\tif (surface == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tlong /*int*/ cairo = Cairo.cairo_create(surface);", "+\t\t\t\tif (cairo == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tCairo.cairo_set_operator(cairo, Cairo.CAIRO_OPERATOR_SOURCE);", "+\t\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\t\tCairo.cairo_set_source_surface (cairo, icons[i], 2, yy[i] - yy[0] + 2);", "+\t\t\t\t\tCairo.cairo_rectangle(cairo, 0, yy[i] - yy[0], width, hh[i]);", "+\t\t\t\t\tCairo.cairo_fill(cairo);", "+\t\t\t\t\tCairo.cairo_surface_destroy(icons[i]);", "+\t\t\t\t}", "+\t\t\t\tCairo.cairo_destroy(cairo);", "+\t\t\t\tdragSourceImage =  Image.gtk_new (display, SWT.ICON, surface, 0);", "+\t\t\t} else {", "+\t\t\t\tlong /*int*/ source = OS.gdk_pixmap_new(OS.gdk_get_default_root_window(), width, height, -1);", "+\t\t\t\tlong /*int*/ gcSource = OS.gdk_gc_new(source);", "+\t\t\t\tlong /*int*/ mask = OS.gdk_pixmap_new(OS.gdk_get_default_root_window(), width, height, 1);", "+\t\t\t\tlong /*int*/ gcMask = OS.gdk_gc_new(mask);", "+\t\t\t\tGdkColor color = new GdkColor();", "+\t\t\t\tcolor.pixel = 0;", "+\t\t\t\tOS.gdk_gc_set_foreground(gcMask, color);", "+\t\t\t\tOS.gdk_draw_rectangle(mask, gcMask, 1, 0, 0, width, height);", "+\t\t\t\tcolor.pixel = 1;", "+\t\t\t\tOS.gdk_gc_set_foreground(gcMask, color);", "+\t\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\t\tOS.gdk_draw_drawable(source, gcSource, icons[i], 0, 0, 0, yy[i] - yy[0], -1, -1);", "+\t\t\t\t\tOS.gdk_draw_rectangle(mask, gcMask, 1, 0, yy[i] - yy[0], width, hh[i]);", "+\t\t\t\t\tOS.g_object_unref(icons[i]);", "+\t\t\t\t}", "+\t\t\t\tOS.g_object_unref(gcSource);", "+\t\t\t\tOS.g_object_unref(gcMask);", "+\t\t\t\tdragSourceImage  = Image.gtk_new(display, SWT.ICON, source, mask);", "-\t\t\tOS.g_object_unref(gcSource);", "-\t\t\tOS.g_object_unref(gcMask);", "-\t\t\tdragSourceImage  = Image.gtk_new(display, SWT.ICON, source, mask);", "-\t\t", "-}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b8b9d1beacb632b6997d390be7be254", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/TreeDragSourceEffect.java", "commitBeforeChange": "bcac6ad70ee319247deb043444a858ffd48b487d", "commitAfterChange": "aa3c6d8a75ecd3aa62e9b9ee7768d59f601718ad", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  \tImage getDragSourceImage(DragSourceEvent event)", "signatureAfterChange": "  \tImage getDragSourceImage(DragSourceEvent event)", "diff": ["-\t\tdragSourceImage = null;\t\t", "-\t\t", "+\t\tdragSourceImage = null;", "+", "-\t\t", "-\t\tif (OS.GTK3) return null;", "-\t\t", "+", "-\t\t* Bug in GTK.  gtk_tree_selection_get_selected_rows() segmentation faults", "-\t\t* in versions smaller than 2.2.4 if the model is NULL.  The fix is", "-\t\t* to give a valid pointer instead.", "-\t\t*/", "+\t\t * Bug in GTK.  gtk_tree_selection_get_selected_rows() segmentation faults", "+\t\t * in versions smaller than 2.2.4 if the model is NULL.  The fix is", "+\t\t * to give a valid pointer instead.", "+\t\t */", "-\t\t\tlong /*int*/ pixmap = OS.gtk_tree_view_create_row_drag_icon(handle, path);", "-\t\t\tdragSourceImage =  Image.gtk_new(display, SWT.ICON, pixmap, 0);", "+\t\t\tlong /*int*/ icon = OS.gtk_tree_view_create_row_drag_icon (handle, path);", "+\t\t\tdragSourceImage =  Image.gtk_new (display, SWT.ICON, icon, 0);", "-\t\t\tlong /*int*/ [] pixmaps = new long /*int*/ [count];", "+\t\t\tlong /*int*/ [] icons = new long /*int*/ [count];", "-\t\t\t\tpixmaps[i] = OS.gtk_tree_view_create_row_drag_icon(handle, path);", "-\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION(2, 24, 0)) {", "-\t\t\t\t\tOS.gdk_pixmap_get_size(pixmaps[i], w, h);", "+\t\t\t\ticons[i] = OS.gtk_tree_view_create_row_drag_icon(handle, path);", "+\t\t\t\tif (OS.GTK3) {", "+\t\t\t\t\tw[0] = Cairo.cairo_xlib_surface_get_width(icons[i]);", "+\t\t\t\t\th[0] = Cairo.cairo_xlib_surface_get_height(icons[i]);", "+\t\t\t\t} else if (OS.GTK_VERSION >= OS.VERSION(2, 24, 0)) {", "+\t\t\t\t\tOS.gdk_pixmap_get_size(icons[i], w, h);", "-\t\t\t\t\tOS.gdk_drawable_get_size(pixmaps[i], w, h);", "+\t\t\t\t\tOS.gdk_drawable_get_size(icons[i], w, h);", "-\t\t\tlong /*int*/ source = OS.gdk_pixmap_new(OS.gdk_get_default_root_window(), width, height, -1);", "-\t\t\tlong /*int*/ gcSource = OS.gdk_gc_new(source);", "-\t\t\tlong /*int*/ mask = OS.gdk_pixmap_new(OS.gdk_get_default_root_window(), width, height, 1);", "-\t\t\tlong /*int*/ gcMask = OS.gdk_gc_new(mask);", "-\t\t\tGdkColor color = new GdkColor();", "-\t\t\tcolor.pixel = 0;", "-\t\t\tOS.gdk_gc_set_foreground(gcMask, color);", "-\t\t\tOS.gdk_draw_rectangle(mask, gcMask, 1, 0, 0, width, height);", "-\t\t\tcolor.pixel = 1;", "-\t\t\tOS.gdk_gc_set_foreground(gcMask, color);", "-\t\t\tfor (int i=0; i<count; i++) {", "-\t\t\t\tOS.gdk_draw_drawable(source, gcSource, pixmaps[i], 0, 0, 0, yy[i] - yy[0], -1, -1);", "-\t\t\t\tOS.gdk_draw_rectangle(mask, gcMask, 1, 0, yy[i] - yy[0], width, hh[i]);", "-\t\t\t\tOS.g_object_unref(pixmaps[i]);", "+\t\t\tif (OS.GTK3) {", "+\t\t\t\tlong /*int*/ surface = Cairo.cairo_image_surface_create(Cairo.CAIRO_FORMAT_ARGB32, width, height);", "+\t\t\t\tif (surface == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tlong /*int*/ cairo = Cairo.cairo_create(surface);", "+\t\t\t\tif (cairo == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tCairo.cairo_set_operator(cairo, Cairo.CAIRO_OPERATOR_SOURCE);", "+\t\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\t\tCairo.cairo_set_source_surface (cairo, icons[i], 2, yy[i] - yy[0] + 2);", "+\t\t\t\t\tCairo.cairo_rectangle(cairo, 0, yy[i] - yy[0], width, hh[i]);", "+\t\t\t\t\tCairo.cairo_fill(cairo);", "+\t\t\t\t\tCairo.cairo_surface_destroy(icons[i]);", "+\t\t\t\t}", "+\t\t\t\tCairo.cairo_destroy(cairo);", "+\t\t\t\tdragSourceImage =  Image.gtk_new (display, SWT.ICON, surface, 0);", "+\t\t\t} else {", "+\t\t\t\tlong /*int*/ source = OS.gdk_pixmap_new(OS.gdk_get_default_root_window(), width, height, -1);", "+\t\t\t\tlong /*int*/ gcSource = OS.gdk_gc_new(source);", "+\t\t\t\tlong /*int*/ mask = OS.gdk_pixmap_new(OS.gdk_get_default_root_window(), width, height, 1);", "+\t\t\t\tlong /*int*/ gcMask = OS.gdk_gc_new(mask);", "+\t\t\t\tGdkColor color = new GdkColor();", "+\t\t\t\tcolor.pixel = 0;", "+\t\t\t\tOS.gdk_gc_set_foreground(gcMask, color);", "+\t\t\t\tOS.gdk_draw_rectangle(mask, gcMask, 1, 0, 0, width, height);", "+\t\t\t\tcolor.pixel = 1;", "+\t\t\t\tOS.gdk_gc_set_foreground(gcMask, color);", "+\t\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\t\tOS.gdk_draw_drawable(source, gcSource, icons[i], 0, 0, 0, yy[i] - yy[0], -1, -1);", "+\t\t\t\t\tOS.gdk_draw_rectangle(mask, gcMask, 1, 0, yy[i] - yy[0], width, hh[i]);", "+\t\t\t\t\tOS.g_object_unref(icons[i]);", "+\t\t\t\t}", "+\t\t\t\tOS.g_object_unref(gcSource);", "+\t\t\t\tOS.g_object_unref(gcMask);", "+\t\t\t\tdragSourceImage  = Image.gtk_new(display, SWT.ICON, source, mask);", "-\t\t\tOS.g_object_unref(gcSource);", "-\t\t\tOS.g_object_unref(gcMask);", "-\t\t\tdragSourceImage  = Image.gtk_new(display, SWT.ICON, source, mask);", "-\t\t"]}], "num": 59018}
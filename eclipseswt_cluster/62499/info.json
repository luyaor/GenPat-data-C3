{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "049a04c8fabe133ace0f48f8dc900e4b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97ba2ddefa6af49e73acf67886179575", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "d820b37300fd1d750a00c8339cc179561d90308c", "commitAfterChange": "421dd20c72ea4483b5a69aeba70ea8a605a9a6d3", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 80, "signatureBeforeChange": "  public void setItemCount (int count)", "signatureAfterChange": "  public void setItemCount (int count)", "diff": ["-\tsetRedraw (false);", "+\tboolean isVirtual = (style & SWT.VIRTUAL) != 0;", "+\tif (!isVirtual) setRedraw (false);", "-\tfor (int i = itemCount; i<count; i++) {", "-\t\titems [i] = new TableItem (this, SWT.NONE);", "+\tif (isVirtual) {", "+\t\tint iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());", "+\t\tif (iter == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tfor (int i=itemCount; i<count; i++) {", "+\t\t\tOS.gtk_list_store_append (modelHandle, iter);", "+\t\t}", "+\t\tOS.g_free (iter);", "+\t\titemCount = count;", "+\t} else {", "+\t\tfor (int i=itemCount; i<count; i++) {", "+\t\t\titems [i] = new TableItem (this, SWT.NONE, i, true);", "+\t\t}", "-\tsetRedraw (true);", "+\tif (!isVirtual) setRedraw (true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7aea7629eb95980f3a6bfeaa08e0435", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "1c6a4189f07d97e9405f58322637972f78a68429", "commitAfterChange": "a11744334121c31b812d90d1d6c723eac3d03dc2", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "\r public void removeAll ()", "signatureAfterChange": "\r public void removeAll ()", "diff": ["-\tint count = OS.SendMessage (handle, OS.LVM_GETITEMCOUNT, 0, 0);\r", "+\tint hwndHeader =  OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);\r", "+\tint columnCount = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);\r", "+\tif (columnCount == 1 && columns [0] == null) columnCount = 0;\r", "+\tint itemCount = OS.SendMessage (handle, OS.LVM_GETITEMCOUNT, 0, 0);\r", "-\t* of items in a table (>1000), it is much faster to\r", "-\t* delete each item with LVM_DELETEITEM rather than\r", "-\t* using LVM_DELETEALLITEMS.  The fix is to delete the\r", "-\t* items, one by one.\r", "+\t* of columns and items in a table (>1000) where each\r", "+\t* of the subitems in the table has a string, it is much\r", "+\t* faster to delete each item with LVM_DELETEITEM rather\r", "+\t* than using LVM_DELETEALLITEMS.  The fix is to detect\r", "+\t* this case and delete the items, one by one.\r", "-\t*/\r", "-\tboolean redraw = drawCount == 0 && OS.IsWindowVisible (handle);\r", "-\tif (redraw) OS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r", "-\tint index = count - 1;\r", "-\twhile (index >= 0) {\r", "+\t*/\t\r", "+\tif (columnCount > 1) {\r", "+\t\tboolean redraw = drawCount == 0 && OS.IsWindowVisible (handle);\r", "+\t\tif (redraw) OS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\tint index = itemCount - 1;\r", "+\t\twhile (index >= 0) {\r", "+\t\t\tignoreSelect = true;\r", "+\t\t\tint code = OS.SendMessage (handle, OS.LVM_DELETEITEM, index, 0);\r", "+\t\t\tignoreSelect = false;\r", "+\t\t\tif (code == 0) break;\r", "+\t\t\t\r", "+\t\t\t// BUG - disposed callback could remove an item\r", "+\t\t\titems [index].releaseResources ();\r", "+\t\t\t--index;\r", "+\t\t}\r", "+\t\tif (redraw) {\r", "+\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);\r", "+\t\t\t/*\r", "+\t\t\t* This code is intentionally commented.  The window proc\r", "+\t\t\t* for the table implements WM_SETREDRAW to invalidate\r", "+\t\t\t* and erase the table so it is not necessary to do this\r", "+\t\t\t* again.\r", "+\t\t\t*/\r", "+//\t\t\tint flags = OS.RDW_ERASE | OS.RDW_FRAME | OS.RDW_INVALIDATE;\r", "+//\t\t\tOS.RedrawWindow (handle, null, 0, flags);\r", "+\t\t}\r", "+\t\tif (index != -1) error (SWT.ERROR_ITEM_NOT_REMOVED);\r", "+\t} else {\r", "-\t\tint code = OS.SendMessage (handle, OS.LVM_DELETEITEM, index, 0);\r", "+\t\tint code = OS.SendMessage (handle, OS.LVM_DELETEALLITEMS, 0, 0);\r", "-\t\tif (code == 0) break;\r", "-\t\t\r", "-\t\t// BUG - disposed callback could remove an item\r", "-\t\titems [index].releaseResources ();\r", "-\t\t--index;\r", "+\t\tif (code == 0) error (SWT.ERROR_ITEM_NOT_REMOVED);\r", "+\t\tfor (int i=0; i<itemCount; i++) {\r", "+\t\t\tTableItem item = items [i];\r", "+\t\t\tif (!item.isDisposed ()) item.releaseWidget ();\r", "+\t\t}\r", "-\tif (redraw) {\r", "-\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);\r", "-\t\t/*\r", "-\t\t* This code is intentionally commented.  The window proc\r", "-\t\t* for the table implements WM_SETREDRAW to invalidate\r", "-\t\t* and erase the table so it is not necessary to do this\r", "-\t\t* again.\r", "-\t\t*/\r", "-//\t\tint flags = OS.RDW_ERASE | OS.RDW_FRAME | OS.RDW_INVALIDATE;\r", "-//\t\tOS.RedrawWindow (handle, null, 0, flags);\r", "-\t}\r", "-\tif (index != -1) error (SWT.ERROR_ITEM_NOT_REMOVED);\r", "-\t\r", "-\t/*\r", "-\t* This code is intentionally commmented.  This is\r", "-\t* the correct code, assuming that the problem with\r", "-\t* LVM_DELETEALLITEMS did not occur.\r", "-\t*/\r", "-//\tignoreSelect = true;\r", "-//\tint code = OS.SendMessage (handle, OS.LVM_DELETEALLITEMS, 0, 0);\r", "-//\tignoreSelect = false;\r", "-//\tif (code == 0) error (SWT.ERROR_ITEM_NOT_REMOVED);\r", "-//\tfor (int i=0; i<count; i++) {\r", "-//\t\tTableItem item = items [i];\r", "-//\t\tif (!item.isDisposed ()) item.releaseWidget ();\r", "-//\t}\r", "-\t\tint hwndHeader =  OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);\r", "-\t\tint columnCount = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);\r", "-\t\tif (columnCount == 1 && columns [0] == null) columnCount = 0;\r"]}], "num": 62499}
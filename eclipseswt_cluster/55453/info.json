{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "944a895abe049f2fd07e605d2741185a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb0f3d8d59084037ec32a0362f2c0901", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "bacad3a175bb18224de7727549cb25e4799e3e8e", "commitAfterChange": "5d8a957e9aa0e637d531abd59800df08cb6a2cc3", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " public Point map (Control from, Control to, int x, int y)", "signatureAfterChange": " public Point map (Control from, Control to, int x, int y)", "diff": ["-\tif (from != null && from.isDisposed()) error (SWT.ERROR_INVALID_ARGUMENT);", "-\tif (to != null && to.isDisposed()) error (SWT.ERROR_INVALID_ARGUMENT);", "+\tif (from != null && from.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);", "+\tif (to != null && to.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);", "-\tint point = OS.gcnew_Point (x, y);", "-\tif (from != null && OS.FrameworkElement_IsLoaded(from.handle)) {", "-\t\tint result = OS.Visual_PointToScreen (from.handle, point);", "+\tif (from != null && to != null) {", "+\t\tint point = OS.gcnew_Point (x, y);", "+\t\tint newPoint = OS.UIElement_TranslatePoint(from.topHandle (), point, to.topHandle ());", "+\t\tPoint result = new Point ((int)OS.Point_X (newPoint), (int)OS.Point_Y (newPoint));", "-\t\tpoint = result;", "+\t\tOS.GCHandle_Free (newPoint);", "+\t\treturn result;", "+\t} else {", "+\t\tif (from == null) {", "+\t\t\tShell shell = to.getShell ();", "+\t\t\tPoint shellLocation = shell.getLocation ();", "+\t\t\tint point = OS.gcnew_Point (x - shellLocation.x, y - shellLocation.y);", "+\t\t\tOS.UIElement_UpdateLayout (to.topHandle ());", "+\t\t\tint newPoint = OS.UIElement_TranslatePoint (shell.shellHandle, point, to.topHandle ());", "+\t\t\tPoint result = new Point ((int)OS.Point_X (newPoint), (int)OS.Point_Y (newPoint));", "+\t\t\tOS.GCHandle_Free (point);", "+\t\t\tOS.GCHandle_Free (newPoint);", "+\t\t\treturn result;", "+\t\t} else {", "+\t\t\tShell shell = from.getShell ();", "+\t\t\tPoint shellLocation = shell.getLocation ();", "+\t\t\tint point = OS.gcnew_Point (x, y);", "+\t\t\tOS.UIElement_UpdateLayout (from.topHandle ());", "+\t\t\tint newPoint = OS.UIElement_TranslatePoint (from.topHandle (), point, shell.shellHandle);", "+\t\t\tPoint result = new Point ((int)OS.Point_X (newPoint) + shellLocation.x, (int)OS.Point_Y (newPoint) + shellLocation.y);", "+\t\t\tOS.GCHandle_Free (point);", "+\t\t\tOS.GCHandle_Free (newPoint);", "+\t\t\treturn result;", "+\t\t}", "-\tif (to != null && OS.FrameworkElement_IsLoaded(to.handle)) {", "-\t\tint result = OS.Visual_PointFromScreen (to.handle, point);", "-\t\tOS.GCHandle_Free (point);", "-\t\tpoint = result;", "-\t}", "-\tPoint result = new Point ((int)OS.Point_X (point), (int)OS.Point_Y (point));", "-\tOS.GCHandle_Free (point);", "-\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0386dffc7fa93362d76701e8a63845ce", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 7, "signatureBeforeChange": " static TableColumn createFillColumn(Table parent)", "signatureAfterChange": " void computeDisplayText (GC gc)", "diff": ["+void computeDisplayText (GC gc) {", "+\tint availableWidth = width - 2 * parent.getHeaderPadding (); ", "+\tif (image != null) {", "+\t\tavailableWidth -= image.getBounds ().width;", "+\t\tavailableWidth -= Table.MARGIN_IMAGE;", "+\t}", "+\tString text = this.text;", "+\tint textWidth = gc.textExtent (text).x;", "+\tif (textWidth <= availableWidth) {", "+\t\tdisplayText = text;", "+\t\treturn;", "+\t}", "- */", "-static TableColumn createFillColumn(Table parent) {", "-\tTableColumn fillColumn = new TableColumn(parent);", "+\t/* Ellipsis will be needed, so subtract their width from the available text width */", "+\tint ellipsisWidth = gc.textExtent (Table.ELLIPSIS).x;", "+\tavailableWidth -= ellipsisWidth;", "+\tif (availableWidth <= 0) {", "+\t\tdisplayText = Table.ELLIPSIS;", "+\t\treturn;", "+\t}", "-\tfillColumn.setIndex(FILL);", "-\treturn fillColumn;", "+\t/* Make initial guess. */", "+\tint index = availableWidth / gc.getFontMetrics ().getAverageCharWidth ();", "+\ttextWidth = gc.textExtent (text.substring (0, index)).x;", "+", "+\t/* Initial guess is correct. */", "+\tif (availableWidth == textWidth) {", "+\t\tdisplayText = text.substring (0, index) + Table.ELLIPSIS;", "+\t\treturn;", "+\t}", "+", "+\t/* Initial guess is too high, so reduce until fit is found. */", "+\tif (availableWidth < textWidth) {", "+\t\tdo {", "+\t\t\tindex--;", "+\t\t\tif (index < 0) {", "+\t\t\t\tdisplayText = Table.ELLIPSIS;", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\ttext = text.substring (0, index);", "+\t\t\ttextWidth = gc.textExtent (text).x;", "+\t\t} while (availableWidth < textWidth);", "+\t\tdisplayText = text + Table.ELLIPSIS;", "+\t\treturn;", "+\t}", "+\t", "+\t/* Initial guess is too low, so increase until overrun is found. */", "+\twhile (textWidth < availableWidth) {", "+\t\tindex++;", "+\t\ttextWidth = gc.textExtent (text.substring (0, index)).x;", "+\t}", "+\tdisplayText = text.substring (0, index - 1) + Table.ELLIPSIS;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "859c0b1082f6c65ae2ec02f9868f4b4c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/internal/image/PNGFileFormat.java", "commitBeforeChange": "89e325d639b942b9eb1dc19ad3bc15c25ad6b4a7", "commitAfterChange": "9d04a458194ac328f7e1e4857284755cf4b68cc0", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " void unloadIntoByteStream(ImageLoader loader)", "signatureAfterChange": " void unloadIntoByteStream(ImageLoader loader)", "diff": ["-\t/* We do not currently support writing png. */", "-\tSWT.error(SWT.ERROR_UNSUPPORTED_FORMAT);", "-\ttry {", "-\t\t/* PNG only supports single image (use MNG for multi-image). */", "-\t\tImageData imageData = loader.data[0];", "-\t", "-\t\t/* Step 1: Write PNG signature. */", "-\t\twriteSignature();", "-\t\t", "-\t\t/* Step 2: Write IHDR chunk. */", "-\t\tint width = imageData.width;", "-\t\tint height = imageData.height;", "-\t\tPaletteData palette = imageData.palette;", "-\t\tbyte colorType = PngIhdrChunk.COLOR_TYPE_RGB;", "-\t\tbyte bitDepth = 8;", "-\t\tif (!palette.isDirect) {", "-\t\t\tcolorType = PngIhdrChunk.COLOR_TYPE_PALETTE;", "-\t\t\tbitDepth = (byte) Math.min(imageData.depth, 8);", "-\t\t}", "-\t\tif (imageData.getTransparencyType() == SWT.TRANSPARENCY_ALPHA) {", "-\t\t\tcolorType = PngIhdrChunk.COLOR_TYPE_RGB_WITH_ALPHA;", "-\t\t}", "-\t\tbyte compressionMethod = 0; // must be zero", "-\t\tbyte filterMethod = 0; // must be zero", "-\t\tbyte interlaceMethod = PngIhdrChunk.INTERLACE_METHOD_NONE;", "-\t\toutputStream.write(new PngIhdrChunk(width, height, bitDepth, colorType, compressionMethod, filterMethod, interlaceMethod).getReference());", "-\t\t", "-\t\t/* Step 3: Write PLTE (palette) chunk, if any. */", "-\t\tif (!palette.isDirect) {", "-\t\t\toutputStream.write(new PngPlteChunk(palette).getReference());", "-\t\t}", "-\t\t", "-\t\t/* Step 4: Write tRNS (transparency) chunk, if any. */", "-\t\tif (imageData.transparentPixel != -1) {", "-\t\t\tRGB transparentRGB = palette.getRGB(imageData.transparentPixel);", "-\t\t\toutputStream.write(new PngTrnsChunk(transparentRGB).getReference());", "-\t\t}", "-\t\t", "-\t\t/* Step 5: Write IDAT chunk. */", "-\t\tcompress(imageData);", "-\t\toutputStream.write(new PngIdatChunk(headerByte1, headerByte2, data, adler).getReference());", "-\t\t", "-\t\t/* Step 6: Write IEND chunk. */", "-\t\toutputStream.write(new PngIendChunk().getReference());", "-\t} catch (IOException e) {", "-\t\tSWT.error(SWT.ERROR_IO, e);", "-\t}", "-}", "+\tPngEncoder encoder = new PngEncoder(loader);", "+\tencoder.encode(outputStream);"]}], "num": 55453}
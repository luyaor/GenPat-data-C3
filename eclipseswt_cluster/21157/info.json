{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "65350950af535fc2b81fbb7230525c74", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd35bdd833ce8a0f8902aa0e0717e9e5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "baf25e3c2c8b76a3f6345cf103dddf73acb0d2ff", "commitAfterChange": "6eb03009b1d7bf6be6efb26fdaf84b920a2d3e28", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  int gtk_key_press_event (int widget, int event)", "signatureAfterChange": "  int gtk_key_press_event (int widget, int event)", "diff": ["+\tGdkEventKey gdkEvent = new GdkEventKey ();", "+\tOS.memmove (gdkEvent, event, GdkEventKey.sizeof);", "+\tif (gdkEvent.time == lastEventTime) return 0;", "+\tlastEventTime = gdkEvent.time;", "-\t\tOS.g_signal_handlers_block_matched (imHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, handle);", "+\t\tint id = OS.g_signal_lookup (OS.commit, OS.gtk_im_context_get_type ());", "+\t\tint mask =  OS.G_SIGNAL_MATCH_DATA | OS.G_SIGNAL_MATCH_ID;", "+\t\tOS.g_signal_handlers_block_matched (imHandle, mask, id, 0, 0, 0, handle);", "-\t\tOS.g_signal_handlers_unblock_matched (imHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, handle);", "+\t\tOS.g_signal_handlers_unblock_matched (imHandle, mask, id, 0, 0, 0, handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eedbf5f371931c25a05628dbbc959257", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 249, "signatureBeforeChange": " \tint QueryInterface(int iid, int ppvObject)", "signatureAfterChange": " \tint QueryInterface(COMObject comObject, int iid, int ppvObject)", "diff": ["-\tint QueryInterface(int /*long*/ iid, int /*long*/ ppvObject) {", "-\t\tif (iaccessible == null) return COM.CO_E_OBJNOTCONNECTED;", "+\tint QueryInterface(COMObject comObject, int /*long*/ iid, int /*long*/ ppvObject) {", "-\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessible.getAddress()}, OS.PTR_SIZEOF);", "+\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { comObject.getAddress() }, OS.PTR_SIZEOF);", "-\t\tif (COM.IsEqualGUID(guid, COM.IIDIDispatch)) {", "-\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessible.getAddress()}, OS.PTR_SIZEOF);", "-\t\t\tAddRef();", "-\t\t\treturn COM.S_OK;", "-\t\t}", "-", "-\t\tif (COM.IsEqualGUID(guid, COM.IIDIAccessible)) {", "-\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessible.getAddress()}, OS.PTR_SIZEOF);", "+\t\tif (COM.IsEqualGUID(guid, COM.IIDIDispatch) || COM.IsEqualGUID(guid, COM.IIDIAccessible)) {", "+\t\t\tif (objIAccessible == null) createIAccessible();", "+\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessible.getAddress() }, OS.PTR_SIZEOF);", "-\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIEnumVARIANT.getAddress()}, OS.PTR_SIZEOF);", "+\t\t\tif (objIEnumVARIANT == null) createIEnumVARIANT();", "+\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIEnumVARIANT.getAddress() }, OS.PTR_SIZEOF);", "+\t\t", "+\t\tif (COM.IsEqualGUID(guid, COM.IIDIServiceProvider)) {", "+\t\t\tif (objIServiceProvider == null) createIServiceProvider();", "+\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIServiceProvider.getAddress() }, OS.PTR_SIZEOF);", "+\t\t\tAddRef();", "+\t\t\treturn COM.S_OK;", "+\t\t}", "-\t\tint /*long*/[] ppv = new int /*long*/[1];", "-\t\tint result = iaccessible.QueryInterface(guid, ppv);", "-\t\tCOM.MoveMemory(ppvObject, ppv, OS.PTR_SIZEOF);", "-\t\treturn result;", "+\t\tint code = queryAccessible2Interfaces(guid, ppvObject);", "+\t\tif (code == COM.S_OK) {", "+\t\t\treturn COM.S_OK;", "+\t\t}", "+", "+\t\tif (iaccessible != null) {", "+\t\t\t/* Forward any other GUIDs to the OS proxy. */", "+\t\t\tint /*long*/[] ppv = new int /*long*/[1];", "+\t\t\tcode = iaccessible.QueryInterface(guid, ppv);", "+\t\t\tCOM.MoveMemory(ppvObject, ppv, OS.PTR_SIZEOF);", "+\t\t\treturn code;", "+\t\t}", "+\t\t", "+\t\treturn COM.E_NOINTERFACE;"]}], "num": 21157}
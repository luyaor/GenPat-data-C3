{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c2bb689862ed5ecae29e023f04b69c57", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21f1756768196727787cdb83c271c808", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "147d1615f621339f30d0227193f0b040907c9480", "commitAfterChange": "4f94a8e41c5f58fd8cc31f50891f992413c14d7f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void setContents(Object[] data, Transfer[] dataTypes)", "signatureAfterChange": " public void setContents(Object[] data, Transfer[] dataTypes)", "diff": ["-\tif (xDisplay == 0)", "-\t\tDND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);", "+\tif (xDisplay == 0) DND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);", "-\tif (xWindow == 0)", "-\t\tDND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);", "-\t\t", "+\tif (xWindow == 0) DND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);\t", "-\tint retries = 0;", "-\tint status = OS.XmClipboardStartCopy(xDisplay, xWindow, 0, OS.XtLastTimestampProcessed(xDisplay), shellHandle, 0, item_id);", "-\twhile ( status == OS.XmClipboardLocked && retries < MAX_RETRIES) {", "-\t\tretries ++;", "-\t\tstatus = OS.XmClipboardStartCopy(xDisplay, xWindow, 0, OS.XtLastTimestampProcessed(xDisplay), shellHandle, 0, item_id);", "-\t};", "-\tif (status != OS.XmClipboardSuccess)", "+\tif (OS.XmClipboardStartCopy(xDisplay, xWindow, 0, OS.XtLastTimestampProcessed(xDisplay), shellHandle, 0, item_id) != OS.XmClipboardSuccess){", "-\t", "-\t// copy data directly over to System clipboard (not deferred)", "-\tfor (int i = 0; i < dataTypes.length; i++) {", "-\t\tint[] ids = dataTypes[i].getTypeIds();", "-\t\tString[] names = dataTypes[i].getTypeNames();", "-\t\tfor (int j = 0; j < names.length; j++) {", "-\t\t\tTransferData transferData = new TransferData();", "-\t\t\t/* Use the character encoding for the default locale */", "-\t\t\ttransferData.type = ids[j];", "-\t\t\tdataTypes[i].javaToNative(data[i], transferData);", "-\t\t\tstatus = OS.XmClipboardFail;", "-\t\t\tif (transferData.result == 1) {", "-\t\t\t\tif (transferData.format == 8){", "+\t}", "+\ttry {", "+\t\t// copy data directly over to System clipboard (not deferred)", "+\t\tfor (int i = 0; i < dataTypes.length; i++) {", "+\t\t\tint[] ids = dataTypes[i].getTypeIds();", "+\t\t\tString[] names = dataTypes[i].getTypeNames();", "+\t\t\tfor (int j = 0; j < names.length; j++) {", "+\t\t\t\tTransferData transferData = new TransferData();", "+\t\t\t\ttransferData.type = ids[j];", "+\t\t\t\tdataTypes[i].javaToNative(data[i], transferData);", "+\t\t\t\tif (transferData.result != 1) DND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);", "+\t\t\t\ttry {", "+\t\t\t\t\tif (transferData.format != 8) DND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);", "-\t\t\t\t\tstatus = OS.XmClipboardCopy(xDisplay, xWindow, item_id[0], bName, buffer, transferData.length, 0, null);", "+\t\t\t\t\tif (OS.XmClipboardCopy(xDisplay, xWindow, item_id[0], bName, buffer, transferData.length, 0, null) != OS.XmClipboardSuccess) {", "+\t\t\t\t\t\tDND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);", "+\t\t\t\t\t}", "+\t\t\t\t} finally {", "+\t\t\t\t\tOS.XtFree(transferData.pValue);", "-\t\t\t// Clean up allocated memory", "-\t\t\tif (transferData.pValue != 0) {", "-\t\t\t\tOS.XtFree(transferData.pValue);", "-\t\t\t}", "+\t} finally {", "+\t\t// close clipboard  for setting", "+\t\tOS.XmClipboardEndCopy(xDisplay, xWindow, item_id[0]);", "-\t", "-\t// close clipboard  for setting", "-\tOS.XmClipboardEndCopy(xDisplay, xWindow, item_id[0]);", "-\t", "-\tif (status != OS.XmClipboardSuccess)", "-\t\tDND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);", "-\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d0a4692a5e8ac0bdafa5563f1632361", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "00ed21c8f8c77f61853a45cda676574d76d69e41", "commitAfterChange": "8e00f3751d53017bb47fe8df7b2fb0596267f9cb", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 15, "signatureBeforeChange": " public void setContents(Object[] data, Transfer[] dataTypes, int clipboards)", "signatureAfterChange": " public void setContents(Object[] data, Transfer[] dataTypes, int clipboards)", "diff": ["-\tif ((clipboards & DND.CLIPBOARD) == 0) return;", "-\tint xDisplay = OS.XtDisplay (shellHandle);", "-\tif (xDisplay == 0) DND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);", "-\tint xWindow = OS.XtWindow (shellHandle);", "-\tif (xWindow == 0) DND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);\t", "-\t// Open clipboard for setting", "-\tint[] item_id = new int[1];\t\t\t", "-\tif (OS.XmClipboardStartCopy(xDisplay, xWindow, 0, OS.XtLastTimestampProcessed(xDisplay), shellHandle, 0, item_id) != OS.XmClipboardSuccess){", "+\tif ((clipboards & DND.CLIPBOARD) != 0) {", "+\t\tClipboardData = data;", "+\t\tClipboardDataTypes = dataTypes;", "+\t\t_setContents(data, dataTypes, clipboardAtom);", "+\t\tactiveClipboard = this;", "+\t}", "+\tif ((clipboards & DND.SELECTION_CLIPBOARD) != 0) {", "+\t\tPrimaryClipboardData = data;", "+\t\tPrimaryClipboardDataTypes = dataTypes;", "+\t\t_setContents(data, dataTypes, primaryAtom);", "+\t\tactivePrimaryClipboard = this;", "+\t}", "+}", "-\ttry {", "-\t\t// copy data directly over to System clipboard (not deferred)", "-\t\tfor (int i = 0; i < dataTypes.length; i++) {", "-\t\t\tint[] ids = dataTypes[i].getTypeIds();", "-\t\t\tString[] names = dataTypes[i].getTypeNames();", "-\t\t\tfor (int j = 0; j < names.length; j++) {", "-\t\t\t\tTransferData transferData = new TransferData();", "-\t\t\t\ttransferData.type = ids[j];", "-\t\t\t\tdataTypes[i].javaToNative(data[i], transferData);", "-\t\t\t\tif (transferData.result != 1) DND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);", "-\t\t\t\ttry {", "-\t\t\t\t\tif (transferData.format != 8) DND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);", "-\t\t\t\t\tbyte[] buffer = new byte[transferData.length];", "-\t\t\t\t\tOS.memmove(buffer, transferData.pValue, transferData.length);", "-\t\t\t\t\tbyte[] bName = Converter.wcsToMbcs(null, names[j], true);", "-\t\t\t\t\tif (OS.XmClipboardCopy(xDisplay, xWindow, item_id[0], bName, buffer, transferData.length, 0, null) != OS.XmClipboardSuccess) {", "-\t\t\t\t\t\tDND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);", "-\t\t\t\t\t}", "-\t\t\t\t} finally {", "-\t\t\t\t\tOS.XtFree(transferData.pValue);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t} finally {", "-\t\t// close clipboard  for setting", "-\t\tOS.XmClipboardEndCopy(xDisplay, xWindow, item_id[0]);", "-\t}"]}], "num": 55440}
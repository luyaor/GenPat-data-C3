{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "553e7a8744d37bad1dbebcf10cfbc6a0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fca249d4e58b30685ddf2e144120b00d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "761d4c67b620dd7a9276cb5e97a48f876548dd5b", "commitAfterChange": "a2a25b887ac737c108dd8bcffec5e11a0093e092", "methodNumberBeforeChange": 54, "methodNumberAfterChange": 55, "signatureBeforeChange": "  public void setVisible (boolean visible)", "signatureAfterChange": "  public void setVisible (boolean visible)", "diff": ["-\t\tOS.Window_Show (shellHandle);", "+\t\tif ((style & SWT.ON_TOP) != 0) {", "+\t\t\tOS.Popup_IsOpen (shellHandle, visible);", "+\t\t} else {", "+\t\t\tOS.Window_Show (shellHandle);", "+\t\t}", "-\t\tif (!closing) OS.Window_Hide (shellHandle);", "+\t\tif (!closing) {", "+\t\t\tif ((style & SWT.ON_TOP) != 0) {", "+\t\t\t\tOS.Popup_IsOpen (shellHandle, visible);", "+\t\t\t} else {\t\t\t\t", "+\t\t\t\tOS.Window_Hide (shellHandle);", "+\t\t\t}", "+\t\t}", "+//\tif (drawCount != 0) {", "+//\t\tif (((state & HIDDEN) == 0) == visible) return;", "+//\t} else {", "+//\t\tif (visible == OS.IsWindowVisible (handle)) return;", "+//\t}", "+//\t", "+//\t/*", "+//\t* Feature in Windows.  When ShowWindow() is called used to hide", "+//\t* a window, Windows attempts to give focus to the parent. If the", "+//\t* parent is disabled by EnableWindow(), focus is assigned to", "+//\t* another windows on the desktop.  This means that if you hide", "+//\t* a modal window before the parent is enabled, the parent will", "+//\t* not come to the front.  The fix is to change the modal state", "+//\t* before hiding or showing a window so that this does not occur.", "+//\t*/", "+//\tint mask = SWT.PRIMARY_MODAL | SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL;", "+//\tif ((style & mask) != 0) {", "+//\t\tif (visible) {", "+//\t\t\tdisplay.setModalShell (this);", "+//\t\t\tControl control = display._getFocusControl ();", "+//\t\t\tif (control != null && !control.isActive ()) {", "+//\t\t\t\tbringToTop ();", "+//\t\t\t\tif (isDisposed ()) return;", "+//\t\t\t}", "+//\t\t\tint hwndShell = OS.GetActiveWindow ();", "+//\t\t\tif (hwndShell == 0) {", "+//\t\t\t\tif (parent != null) hwndShell = parent.handle;", "+//\t\t\t}", "+//\t\t\tif (hwndShell != 0) {", "+//\t\t\t\tOS.SendMessage (hwndShell, OS.WM_CANCELMODE, 0, 0);", "+//\t\t\t}", "+//\t\t\tOS.ReleaseCapture ();", "+//\t\t} else {", "+//\t\t\tdisplay.clearModal (this);", "+//\t\t}", "+//\t} else {", "+//\t\tupdateModal ();", "+//\t}", "+//\t", "+//\t/*", "+//\t* Bug in Windows.  Calling ShowOwnedPopups() to hide the", "+//\t* child windows of a hidden window causes the application", "+//\t* to be deactivated.  The fix is to call ShowOwnedPopups()", "+//\t* to hide children before hiding the parent.", "+//\t*/", "+//\tif (showWithParent && !visible) {", "+//\t\tif (!OS.IsWinCE) OS.ShowOwnedPopups (handle, false);", "+//\t}", "+//\tsuper.setVisible (visible);", "+//\tif (isDisposed ()) return;", "+//\tif (showWithParent == visible) return;", "+//\tshowWithParent = visible;", "+//\tif (visible) {", "+//\t\tif (!OS.IsWinCE) OS.ShowOwnedPopups (handle, true);", "+//\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9cd6e6ac4cb83fb021d0cf2ffcfcd807", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TrayItem.java", "commitBeforeChange": "41b211239dcc60a51b5a132c5f6db397730ad928", "commitAfterChange": "dc662d9de06efde9d22036b6c0e5348eb9db4cec", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["+\t/*", "+\t* Feature in Windows.  When the user clicks on the tray", "+\t* icon, another application may be the foreground window.", "+\t* This means that the event loop is not running and can", "+\t* cause problems.  For example, if a menu is shown, when", "+\t* the user clicks outside of the menu to cancel it, the", "+\t* menu is not hidden until an event is processed.  If", "+\t* another application is the foreground window, then the", "+\t* menu is not hidden.  The fix is to force the tray icon", "+\t* message window to the foreground when sending an event.", "+\t*/", "-\t\t\tpostEvent (SWT.Selection);", "+\t\t\tif (hooks (SWT.Selection)) {", "+\t\t\t\tOS.SetForegroundWindow (hwnd);", "+\t\t\t\tpostEvent (SWT.Selection);", "+\t\t\t}", "-\t\t\tpostEvent (SWT.DefaultSelection);", "+\t\t\tif (hooks (SWT.DefaultSelection)) {", "+\t\t\t\tOS.SetForegroundWindow (hwnd);", "+\t\t\t\tpostEvent (SWT.DefaultSelection);", "+\t\t\t}", "-\t\t\t/*", "-\t\t\t* Feature in Windows.  When the user clicks outside of the", "-\t\t\t* menu to cancel it, the menu is not hidden until an event", "-\t\t\t* is processed.  If another application is the foreground", "-\t\t\t* window, then the menu is not hidden.  The fix is to force", "-\t\t\t* the tray icon message window to the foreground.", "-\t\t\t*/", "-\t\t\tOS.SetForegroundWindow (hwnd);", "-\t\t\tsendEvent (SWT.MenuDetect);", "-\t\t\t// widget could be disposed at this point", "-\t\t\tif (isDisposed()) return 0;", "+\t\t\tif (hooks (SWT.MenuDetect)) {", "+\t\t\t\tOS.SetForegroundWindow (hwnd);", "+\t\t\t\tsendEvent (SWT.MenuDetect);", "+\t\t\t\t// widget could be disposed at this point", "+\t\t\t\tif (isDisposed()) return 0;", "+\t\t\t}"]}], "num": 56282}
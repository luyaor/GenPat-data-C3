{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e629920ee166dada4f68a3938bcdfbfd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0a29eae458077e371403fbcbb794c2f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "259ec5fb53ced9294d0c95637b0120980998eb7d", "commitAfterChange": "2a6e0c9b702b0b502452265cc844e28c66b4245c", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+\t\t", "+\t\t/*", "+\t\t * Attempting to create an NSComboBox with a height > 27 spews a", "+\t\t * very long warning message to stdout and draws the combo incorrectly.", "+\t\t * Limit height to frame height when combo has multiline text.", "+\t\t */", "+\t\tNSString nsStr = widget.stringValue();", "+\t\tif (nsStr != null ){", "+\t\t\tString str = nsStr.getString();", "+\t\t\tif (str != null && (str.indexOf('\\n') >= 0 || str.indexOf('\\r') >= 0)){", "+\t\t\t\tint frameHeight = (int) view.frame().height;", "+\t\t\t\tif (frameHeight > 0){", "+\t\t\t\t\theight = frameHeight;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d56e823eda340b9e1b8d8f2c77a3eb0d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "259ec5fb53ced9294d0c95637b0120980998eb7d", "commitAfterChange": "2a6e0c9b702b0b502452265cc844e28c66b4245c", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "  void setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "signatureAfterChange": "  void setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "diff": ["-\t * often draws the combo incorrectly.  The workaround is to limit", "-\t * the height of editable Combos to the height that is required", "-\t * to display their text.", "+\t * often draws the combo incorrectly.", "+\t * The workaround is to limit the height of editable Combos to the", "+\t * height that is required to display their text. For multiline text,", "+\t * limit the height to frame height.", "-\t\tNSSize size = widget.cell ().cellSize ();", "-\t\theight = Math.min (height, (int)Math.ceil (size.height));", "+\t\tint hLimit = 0;", "+\t\tNSString nsStr = widget.stringValue();", "+\t\tif (nsStr != null ){", "+\t\t\tString str = nsStr.getString();", "+\t\t\tif (str != null && (str.indexOf('\\n') >= 0 || str.indexOf('\\r') >= 0)) {", "+\t\t\t\tint frameHeight = (int) view.frame().height;", "+\t\t\t\tif (frameHeight > 0) {", "+\t\t\t\t\thLimit = frameHeight;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (hLimit == 0) {", "+\t\t\tNSSize size = widget.cell ().cellSize ();", "+\t\t\thLimit = (int)Math.ceil (size.height);", "+\t\t}", "+\t\theight = Math.min (height, hLimit);"]}], "num": 20005}
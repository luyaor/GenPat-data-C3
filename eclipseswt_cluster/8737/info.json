{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2450309a604062bd9f1cbcf2c9657511", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96f89b9242f88a7d66d8cff8615a7e09", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "12145948a337f8260ea5a3544e7ee9d4678a6ab8", "commitAfterChange": "7f57a0f4b37b94ba73598e3a604be9f733e83a82", "methodNumberBeforeChange": 324, "methodNumberAfterChange": 324, "signatureBeforeChange": " \tint setAttributes(int startOffset, int endOffset, int pbstrAttributes)", "signatureAfterChange": " \tint setAttributes(int startOffset, int endOffset, int pbstrAttributes)", "diff": ["-\t\t\tString [] attributes = new String [0];", "-\t\t\tString [] rawAttributes = string.split(\";\");", "-\t\t\tfor (int i = 0; i < rawAttributes.length; i++) {", "-\t\t\t\tString attribute[] = rawAttributes[i].split(\":\");", "-\t\t\t\tif (attribute[0].equals(\"text-position\")) {", "-\t\t\t\t\tif (attribute[1].equals(\"super\")) style.rise = points / 2;", "-\t\t\t\t\telse if (attribute[1].equals(\"sub\")) style.rise = - points / 2;", "-\t\t\t\t} else if (attribute[0].equals(\"text-underline-type\")) {", "+\t\t\tString [] attributes = new String [0];", "+\t\t\tint begin = 0;", "+\t\t\tint end = string.indexOf(';');", "+\t\t\twhile (end != -1 && end + 1 <= string.length()) {", "+\t\t\t\tString keyValue = string.substring(begin, end).trim();", "+\t\t\t\tint colonIndex = keyValue.indexOf(':');", "+\t\t\t\tif (colonIndex != -1 && colonIndex + 1 < keyValue.length()) {", "+\t\t\t\t\tString [] newAttributes = new String [attributes.length + 2];", "+\t\t\t\t\tSystem.arraycopy (attributes, 0, newAttributes, 0, attributes.length);", "+\t\t\t\t\tnewAttributes[attributes.length] = keyValue.substring(0, colonIndex).trim();", "+\t\t\t\t\tnewAttributes[attributes.length + 1] = keyValue.substring(colonIndex + 1).trim();", "+\t\t\t\t\tattributes = newAttributes;", "+\t\t\t\t}", "+\t\t\t\tbegin = end + 1;", "+\t\t\t\tend = string.indexOf(';', begin);", "+\t\t\t}", "+\t\t\tfor (int i = 0; i+1 < attributes.length; i+=2) {", "+\t\t\t\tString key = attributes[i];", "+\t\t\t\tString value = attributes[i+1];", "+\t\t\t\tif (key.equals(\"text-position\")) {", "+\t\t\t\t\tif (value.equals(\"super\")) style.rise = points / 2;", "+\t\t\t\t\telse if (value.equals(\"sub\")) style.rise = - points / 2;", "+\t\t\t\t} else if (key.equals(\"text-underline-type\")) {", "-\t\t\t\t\tif (attribute[1].equals(\"double\")) style.underlineStyle = SWT.UNDERLINE_DOUBLE;", "-\t\t\t\t\telse if (attribute[1].equals(\"single\")) {", "+\t\t\t\t\tif (value.equals(\"double\")) style.underlineStyle = SWT.UNDERLINE_DOUBLE;", "+\t\t\t\t\telse if (value.equals(\"single\")) {", "-\t\t\t\t} else if (attribute[0].equals(\"text-underline-style\") && attribute[1].equals(\"wave\")) {", "+\t\t\t\t} else if (key.equals(\"text-underline-style\") && value.equals(\"wave\")) {", "-\t\t\t\t} else if (attribute[0].equals(\"invalid\") && attribute[1].equals(\"true\")) {", "+\t\t\t\t} else if (key.equals(\"invalid\") && value.equals(\"true\")) {", "-\t\t\t\t} else if (attribute[0].equals(\"text-line-through-type\")) {", "-\t\t\t\t\tif (attribute[1].equals(\"single\")) style.strikeout = true;", "-\t\t\t\t} else if (attribute[0].equals(\"font-family\")) {", "+\t\t\t\t} else if (key.equals(\"text-line-through-type\")) {", "+\t\t\t\t\tif (value.equals(\"single\")) style.strikeout = true;", "+\t\t\t\t} else if (key.equals(\"font-family\")) {", "-\t\t\t\t\tfontData.setName(attribute[1]);", "-\t\t\t\t} else if (attribute[0].equals(\"font-size\")) {", "+\t\t\t\t\tfontData.setName(value);", "+\t\t\t\t} else if (key.equals(\"font-size\")) {", "-\t\t\t\t\t\tpoints = Integer.parseInt(attribute[1].replace(\"pt\", \"\"));", "+\t\t\t\t\t\tString pts = value.endsWith(\"pt\") ? value.substring(0, value.length() - 2) : value;", "+\t\t\t\t\t\tpoints = Integer.parseInt(pts);", "-\t\t\t\t} else if (attribute[0].equals(\"font-style\")) {", "-\t\t\t\t\tif (attribute[1].equals(\"italic\")) {", "+\t\t\t\t} else if (key.equals(\"font-style\")) {", "+\t\t\t\t\tif (value.equals(\"italic\")) {", "-\t\t\t\t} else if (attribute[0].equals(\"font-weight\")) {", "-\t\t\t\t\tif (attribute[1].equals(\"bold\")) {", "+\t\t\t\t} else if (key.equals(\"font-weight\")) {", "+\t\t\t\t\tif (value.equals(\"bold\")) {", "-\t\t\t\t\t\t\tint weight = Integer.parseInt(attribute[1]);", "+\t\t\t\t\t\t\tint weight = Integer.parseInt(value);", "-\t\t\t\t} else if (attribute[0].equals(\"color\")) {", "-\t\t\t\t\tstyle.foreground = colorFromString(attribute[1]);", "-\t\t\t\t} else if (attribute[0].equals(\"background-color\")) {", "-\t\t\t\t\tstyle.background = colorFromString(attribute[1]);", "+\t\t\t\t} else if (key.equals(\"color\")) {", "+\t\t\t\t\tstyle.foreground = colorFromString(value);", "+\t\t\t\t} else if (key.equals(\"background-color\")) {", "+\t\t\t\t\tstyle.background = colorFromString(value);", "-\t\t\t\t/* Pass every attribute through, in case an application wants", "-\t\t\t\t * to implement a feature in more detail than TextStyle.", "-\t\t\t\t */", "-\t\t\t\tString [] newAttributes = new String [attributes.length + 2];", "-\t\t\t\tSystem.arraycopy (attributes, 0, newAttributes, 0, attributes.length);", "-\t\t\t\tnewAttributes[attributes.length] = attribute[0];", "-\t\t\t\tnewAttributes[attributes.length + 1] = attribute[1];", "-\t\t\t\tattributes = newAttributes;", "-\t\t\tif (fontData != null) {", "-\t\t\t\tstyle.font = new Font(control.getDisplay(), fontData);", "+\t\t\tif (attributes.length > 0) {", "+\t\t\t\tevent.attributes = attributes;", "+\t\t\t\tif (fontData != null) {", "+\t\t\t\t\tstyle.font = new Font(control.getDisplay(), fontData);", "+\t\t\t\t}", "+\t\t\t\tif (!style.equals(new TextStyle())) event.textStyle = style;", "-\t\t\tevent.textStyle = style;", "-\t\t\tif (attributes.length > 0) event.attributes = attributes;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b13dc3d609ab9c92d9c00d905ee5f16e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "fb0ed33d9069b9fd0107f7de2f81037302ea46d7", "commitAfterChange": "84fc2c9805b2d2c52f9b3b56022cf3cd83acd074", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 38, "signatureBeforeChange": "\r \r boolean setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "signatureAfterChange": "\r \r boolean setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "diff": ["-\tint [] args = {OS.Pt_ARG_WINDOW_RENDER_FLAGS, 0, 0};\r", "-\tOS.PtGetResources (shellHandle, args.length / 3, args);\r", "-\tint flags = args [1];\r", "-\tint [] left = new int [1], top = new int [1];\r", "-\tint [] right = new int [1], bottom = new int [1];\r", "-\tOS.PtFrameSize (flags, 0, left, top, right, bottom);\r", "-\tPhArea_t area = new PhArea_t ();\r", "-\tOS.PtWidgetArea (shellHandle, area);\r", "-\tint frameWidth = area.size_w + left [0] + right [0];\r", "-\tint frameHeight = area.size_h + top [0] + bottom [0];\r", "-\tif (!move) {\r", "-\t\tx = area.pos_x;\r", "-\t\ty = area.pos_y;\r", "+\t\r", "+\tboolean caretVisible = caret != null && caret.isVisible ();\r", "+\tif (caretVisible) caret.hideCaret ();\r", "+\t\r", "+\tif (resize) {\r", "+\t\t/* Get the trimings */\r", "+\t\tint [] args = {OS.Pt_ARG_WINDOW_RENDER_FLAGS, 0, 0};\r", "+\t\tOS.PtGetResources (shellHandle, args.length / 3, args);\r", "+\t\tint flags = args [1];\r", "+\t\tint [] left = new int [1], top = new int [1];\r", "+\t\tint [] right = new int [1], bottom = new int [1];\r", "+\t\tOS.PtFrameSize (flags, 0, left, top, right, bottom);\r", "+\t\twidth = Math.max (width - left [0] - right [0], 0);\r", "+\t\theight = Math.max (height - top [0] - bottom [0], 0);\r", "-\tif (!resize) {\r", "-\t\twidth = frameWidth;\r", "-\t\theight = frameHeight;\r", "+\t\r", "+\tPhArea_t oldArea = new PhArea_t ();\r", "+\tOS.PtWidgetArea (shellHandle, oldArea);\r", "+\t\r", "+\tif (move && resize) {\r", "+\t\tPhArea_t area = new PhArea_t ();\r", "+\t\tarea.pos_x = (short) x;\r", "+\t\tarea.pos_y = (short) y;\r", "+\t\tarea.size_w = (short) width;\r", "+\t\tarea.size_h = (short) height;\r", "+\t\tint ptr = OS.malloc (PhArea_t.sizeof);\r", "+\t\tOS.memmove (ptr, area, PhArea_t.sizeof);\r", "+\t\tOS.PtSetResource (shellHandle, OS.Pt_ARG_AREA, ptr, 0);\r", "+\t\tOS.free (ptr);\r", "+\t} else {\r", "+\t\tif (move) {\r", "+\t\t\tPhPoint_t pt = new PhPoint_t ();\r", "+\t\t\tpt.x = (short) x;\r", "+\t\t\tpt.y = (short) y;\r", "+\t\t\tint ptr = OS.malloc (PhPoint_t.sizeof);\r", "+\t\t\tOS.memmove (ptr, pt, PhPoint_t.sizeof);\r", "+\t\t\tOS.PtSetResource (shellHandle, OS.Pt_ARG_POS, ptr, 0);\r", "+\t\t\tOS.free (ptr);\r", "+\t\t} else if (resize) {\r", "+\t\t\tint [] args = {\r", "+\t\t\t\tOS.Pt_ARG_WIDTH, width, 0,\r", "+\t\t\t\tOS.Pt_ARG_HEIGHT, height, 0,\r", "+\t\t\t};\r", "+\t\t\tOS.PtSetResources (shellHandle, args.length / 3, args);\r", "+\t\t}\r", "-\tboolean sameOrigin = x == area.pos_x && y == area.pos_y;\r", "-\tboolean sameExtent = width == frameWidth && height == frameHeight;\r", "-\tarea.pos_x = (short) x;\r", "-\tarea.pos_y = (short) y;\r", "-\tarea.size_w = (short) (Math.max (width - left [0] - right [0], 0));\r", "-\tarea.size_h = (short) (Math.max (height - top [0] - bottom [0], 0));\r", "-\tint ptr = OS.malloc (PhArea_t.sizeof);\r", "-\tOS.memmove (ptr, area, PhArea_t.sizeof);\r", "-\tOS.PtSetResource (shellHandle, OS.Pt_ARG_AREA, ptr, 0);\r", "-\tOS.free (ptr);\r", "+\r", "+\t\tPhArea_t newArea = new PhArea_t ();\r", "+\t\tOS.PtWidgetArea (shellHandle, newArea);\r", "+\t\tboolean sameOrigin = oldArea.pos_x == newArea.pos_x && oldArea.pos_y == newArea.pos_y;\r", "+\t\tboolean sameExtent = oldArea.size_w == newArea.size_w && oldArea.size_h == newArea.size_h;\r", "-\t\t\tresizeBounds (width, height);\r", "+\t\t\tresizeBounds (newArea.size_w, newArea.size_h);\r", "+\t\t\tif (layout != null) layout (false);\r", "-\treturn !sameOrigin || !sameExtent;\r", "-}\r", "+\t\r", "+\tif (caretVisible) caret.showCaret ();\r", "+\t\r", "+\treturn move || resize;\r"]}], "num": 8737}
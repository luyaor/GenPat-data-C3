{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "613c202557b38707a770b8fc05c30115", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7aa67c5d047977a4506ee8cfbef9c6db", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/internal/image/JPEGDecoder.java", "commitBeforeChange": "55e3eb70655b5f0f01b24eadacf20a9e1167ef52", "commitAfterChange": "6a714c0fa388c6b03ac7663475ff4fa71064f562", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 123, "signatureBeforeChange": " \t static ImageData[] loadFromByteStream(InputStream inputStream)", "signatureAfterChange": " \t static ImageData[] loadFromByteStream(InputStream inputStream, ImageLoader loader)", "diff": ["-static ImageData[] loadFromByteStream(InputStream inputStream) {", "+static ImageData[] loadFromByteStream(InputStream inputStream, ImageLoader loader) {", "+\tcinfo.buffered_image = cinfo.progressive_mode && loader.hasListeners();", "-\twhile (cinfo.output_scanline < cinfo.output_height) {", "-\t\tint offset = row_stride * cinfo.output_scanline;", "-\t\tjpeg_read_scanlines(cinfo, buffer, 1);", "-\t\tSystem.arraycopy(buffer[0], 0, data, offset, row_stride);", "+\tif (cinfo.buffered_image) {", "+\t\tboolean done;", "+\t\tdo {", "+\t\t\tint incrementCount = cinfo.input_scan_number - 1;", "+\t\t\tjpeg_start_output(cinfo, cinfo.input_scan_number);", "+\t\t\twhile (cinfo.output_scanline < cinfo.output_height) {", "+\t\t\t\tint offset = row_stride * cinfo.output_scanline;", "+\t\t\t\tjpeg_read_scanlines(cinfo, buffer, 1);", "+\t\t\t\tSystem.arraycopy(buffer[0], 0, data, offset, row_stride);", "+\t\t\t}", "+\t\t\tjpeg_finish_output(cinfo);", "+\t\t\tImageData imageData = ImageData.internal_new(", "+\t\t\t\tcinfo.output_width, cinfo.output_height, palette.isDirect ? 24 : 8, palette, scanlinePad, data,", "+\t\t\t\t0, null, null, -1, -1, SWT.IMAGE_JPEG, 0, 0, 0, 0);", "+\t\t\tloader.notifyListeners(new ImageLoaderEvent(loader, imageData, incrementCount, done = jpeg_input_complete(cinfo)));", "+\t\t\tbyte[] newData = new byte[data.length];", "+\t\t\tif (done) System.arraycopy(data, 0, newData, 0, data.length);", "+\t\t\tdata = newData;", "+\t\t} while (!done);", "+\t} else {", "+\t\twhile (cinfo.output_scanline < cinfo.output_height) {", "+\t\t\tint offset = row_stride * cinfo.output_scanline;", "+\t\t\tjpeg_read_scanlines(cinfo, buffer, 1);", "+\t\t\tSystem.arraycopy(buffer[0], 0, data, offset, row_stride);", "+\t\t}", "-\t\t\tcinfo.output_width,", "-\t\t\tcinfo.output_height, ", "-\t\t\tpalette.isDirect ? 24 : 8,", "-\t\t\tpalette,", "-\t\t\tscanlinePad,", "-\t\t\tdata,", "-\t\t\t0,", "-\t\t\tnull,", "-\t\t\tnull,", "-\t\t\t-1,", "-\t\t\t-1,", "-\t\t\tSWT.IMAGE_JPEG,", "-\t\t\t0,", "-\t\t\t0,", "-\t\t\t0,", "-\t\t\t0);", "+\t\tcinfo.output_width, cinfo.output_height, palette.isDirect ? 24 : 8, palette, scanlinePad, data,", "+\t\t0, null, null, -1, -1, SWT.IMAGE_JPEG, 0, 0, 0, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cd943ef22e2d0e611405fd097a4ddc2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Slider.java", "commitBeforeChange": "80655505c378a6c724f27ab9fd5e89b9aec1adc6", "commitAfterChange": "c3babe73736dabc765cb0e6ff100cd524ced3529", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "diff": ["+", "-\tdragging = false;", "+\t/*", "+\t* Feature in the Macintosh.  Some controls call TrackControl() or", "+\t* HandleControlClick() to track the mouse.  Unfortunately, mouse move", "+\t* events and the mouse up events are consumed.  The fix is to call the", "+\t* default handler and send a fake mouse up when tracking is finished.", "+\t* ", "+\t* NOTE: No mouse move events are sent while tracking.  There is no", "+\t* fix for this at this time.", "+\t*/", "+\tdisplay.grabControl = null;", "+\tdisplay.runDeferredEvents ();", "+\tdragging = tracking = false;", "+\tif (tracking) {", "+\t\torg.eclipse.swt.internal.carbon.Point outPt = new org.eclipse.swt.internal.carbon.Point ();", "+\t\tOS.GetGlobalMouse (outPt);", "+\t\tRect rect = new Rect ();", "+\t\tint window = OS.GetControlOwner (handle);", "+\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\t\tint x = outPt.h - rect.left;", "+\t\tint y = outPt.v - rect.top;", "+\t\tOS.GetControlBounds (parent.handle, rect);", "+\t\tx -= rect.left;", "+\t\ty -=  rect.top;", "+\t\tshort [] button = new short [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button);", "+\t\tint chord = OS.GetCurrentEventButtonState ();", "+\t\tint modifiers = OS.GetCurrentEventKeyModifiers ();", "+\t\tsendMouseEvent (SWT.MouseUp, button [0], chord, (short)x, (short)y, modifiers, true);", "+\t}", "+\ttracking = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "875020b61aba09ae163b543af182fe1c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "6ac2130b77ef909fa41238333a6cbd8f016cd61b", "commitAfterChange": "88d91fdf95b443a3b7481cc8983f4e320a82d831", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "diff": ["+\t/*", "+\t* Feature in the Macintosh.  Some controls call TrackControl() or", "+\t* HandleControlClick() to track the mouse.  Unfortunately, mouse move", "+\t* events and the mouse up events are consumed.  The fix is to call the", "+\t* default handler and send a fake mouse up when tracking is finished.", "+\t* ", "+\t* NOTE: No mouse move events are sent while tracking.  There is no", "+\t* fix for this at this time.", "+\t*/", "+\tif (wasExpanded) {", "+\t\torg.eclipse.swt.internal.carbon.Point outPt = new org.eclipse.swt.internal.carbon.Point ();", "+\t\tOS.GetGlobalMouse (outPt);", "+\t\tRect rect = new Rect ();", "+\t\tint window = OS.GetControlOwner (handle);", "+\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\t\tint x = outPt.h - rect.left;", "+\t\tint y = outPt.v - rect.top;", "+\t\tOS.GetControlBounds (handle, rect);", "+\t\tx -= rect.left;", "+\t\ty -=  rect.top;", "+\t\tshort [] button = new short [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button);", "+\t\tint chord = OS.GetCurrentEventButtonState ();", "+\t\tint modifiers = OS.GetCurrentEventKeyModifiers ();", "+\t\tsendMouseEvent (SWT.MouseUp, button [0], chord, (short)x, (short)y, modifiers, false);", "+\t}"]}], "num": 28385}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d92bd54b6623d72a2016b96a79cd734f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d39368823469f39738c48f448613a774", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "6f0750b9f79e4e41a1736b026a1dddaa973a1066", "commitAfterChange": "a66c70976fc9f2576a52a82c07e33a082fdba4f2", "methodNumberBeforeChange": 134, "methodNumberAfterChange": 134, "signatureBeforeChange": "  void showItem (long path, boolean scroll)", "signatureAfterChange": "  void showItem (long path, boolean scroll)", "diff": ["-\t\tOS.gtk_widget_realize (handle);", "+\t\tOS.gtk_widget_realize (handle);", "-\t\tGdkRectangle visibleRect = new GdkRectangle ();", "-\t\tOS.gtk_tree_view_get_visible_rect (handle, visibleRect);", "-\t\t\tif (ty[0] < visibleRect.y || ty[0] + cellRect.height > visibleRect.y + visibleRect.height) {", "+\t\t\tGdkRectangle visibleRect = new GdkRectangle ();", "+\t\t\tOS.gtk_tree_view_get_visible_rect (handle, visibleRect);", "+\t\t\tif (ty [0] < visibleRect.y || ty [0] + cellRect.height > visibleRect.y + visibleRect.height) {", "-\t\t\t/*", "-\t\t\t* This code intentionally commented.", "-\t\t\t* Bug in GTK.  According to the documentation, gtk_tree_view_scroll_to_cell", "-\t\t\t* should scroll the minimum amount to show the cell if use_align is false.", "-\t\t\t* However, what actually happens is the cell is scrolled to the top.", "-\t\t\t* The fix is to determine the new location and use gtk_tree_view_scroll_to_point.", "-\t\t\t* If the widget is a pinhead, calling gtk_tree_view_scroll_to_point", "-\t\t\t* will have no effect. Therefore, it is still neccessary to", "-\t\t\t* call gtk_tree_view_scroll_to_cell.", "-\t\t\t*/", "-\t\t\t//\tOS.gtk_tree_view_scroll_to_cell (handle, path, 0, depth != 1, 0.5f, 0.0f);", "-\t\t\tif (depth != 1) {", "-\t\t\t\tOS.gtk_tree_view_scroll_to_cell (handle, path, 0, true, 0.5f, 0.0f);", "-\t\t\t} else {", "-\t\t\t\tif (ty[0] < visibleRect.y ) {", "-\t\t\t\t\tOS.gtk_tree_view_scroll_to_point (handle, -1, ty[0]);", "-\t\t\t\t} else {", "-\t\t\t\t\tint height = Math.min (visibleRect.height, cellRect.height);", "-\t\t\t\t\tif (ty[0] + height > visibleRect.y + visibleRect.height) {", "-\t\t\t\t\t\tOS.gtk_tree_view_scroll_to_point (handle, -1, ty[0] + cellRect.height - visibleRect.height);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tOS.gtk_tree_view_scroll_to_cell (handle, path, 0, depth != 1, 0.5f, 0.0f);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c50078355bc2632e541be4e4073c9f8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "6de5d128065bf1d280a4f3338b044f38646dc566", "commitAfterChange": "f8ef3cf7f50531eb98cb5b6c6b6b74b2ed865cbd", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  void hookDOMListeners(OleAutomation webBrowser, final boolean isTop)", "signatureAfterChange": "  void hookDOMListeners(OleAutomation webBrowser, final boolean isTop)", "diff": ["-\t/*", "-\t* DOM listeners are only applicable when HTML content is shown.", "-\t* HTML documents always answer the Type property, so failure to get", "-\t* this value indicates that some other content type is being shown.", "-\t*/", "-\tint[] rgdispid = webBrowser.getIDsOfNames(new String[] { PROPERTY_TYPE });", "-\tif (rgdispid == null) {", "-\t\treturn;", "-\t}", "+\tint[] rgdispid = webBrowser.getIDsOfNames(new String[] { PROPERTY_DOCUMENT });", "-\tVariant\tpVarResult = webBrowser.getProperty(dispIdMember);", "-\tif (pVarResult == null || pVarResult.getType() != COM.VT_BSTR) {", "-\t\tif (pVarResult != null) pVarResult.dispose ();", "-\t\treturn;", "-\t}", "-\tString type = pVarResult.getString();", "-\tpVarResult.dispose();", "-\tif (!type.equals(HTML_DOCUMENT)) return;", "-", "-\trgdispid = webBrowser.getIDsOfNames(new String[] { PROPERTY_DOCUMENT });", "-\tdispIdMember = rgdispid[0];", "-\tpVarResult = webBrowser.getProperty(dispIdMember);", "+\tVariant pVarResult = webBrowser.getProperty(dispIdMember);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10a32eb31ce159ccccbaefcd11f83d48", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "6c60a1c454119ad6b472aeb4263a0a445c965587", "commitAfterChange": "1d50514fe095156d3ff099c9fc9895bec81d60ae", "methodNumberBeforeChange": 136, "methodNumberAfterChange": 136, "signatureBeforeChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["-\t\t\t}", "-\t\t}", "-\t\t/*", "-\t\t* Bug in Windows.  When a tree item that has an image", "-\t\t* with alpha is expanded or collapsed, the area where", "-\t\t* the image is drawn is not erased before it is drawn.", "-\t\t* This means that the image gets darker each time.", "-\t\t* The fix is to redraw the item.", "-\t\t*/", "-\t\tif (!OS.IsWinCE && OS.COMCTL32_MAJOR >= 6) {", "-\t\t\tif (lpht.hItem != 0) {", "-\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-\t\t\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "-\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\trect.left = lpht.hItem;", "-\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 0, rect);", "-\t\t\t\t\tOS.InvalidateRect (handle, rect, true);", "-\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dfd2df7828ea5ebbb600b13ad61ea55", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "be7a6b56ec36f2937282f99ce8f6d3a09d752bb5", "commitAfterChange": "388089e4bec9dc7b9e91ccd2ec44faabbba9290c", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public Rectangle computeTrim (int x, int y, int width, int height)", "signatureAfterChange": "  public Rectangle computeTrim (int x, int y, int width, int height)", "diff": ["-\tif (!OS.HIVIEW) {", "-\t\tint ptr = OS.NewPtr (Rect.sizeof);", "-\t\tOS.TXNGetTXNObjectControls (txnObject, 1, new int [] {OS.kTXNMarginsTag}, new int [] {ptr});", "-\t\tRect rect = new Rect ();", "-\t\tOS.memcpy (rect, ptr, Rect.sizeof);", "-\t\tOS.DisposePtr (ptr);", "-\t\twidth += rect.left + rect.right;", "-\t\theight += rect.top + rect.bottom;", "-\t}"]}], "num": 8842}
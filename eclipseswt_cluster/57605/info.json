{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1f1423cdb31b95769cef72e4161e4af9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ecd5ee06bc64aa195a349eb68577f9f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "a3247c7e7b23c52073082a72a1939d362b1ea6d3", "commitAfterChange": "98f6a4cda4858960d6b89ee6189380d98a36b82d", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  \tint atkObject_ref_state_set  ()", "signatureAfterChange": "  \tint atkObject_ref_state_set ()", "diff": ["-\tint atkObject_ref_state_set  () {", "-\t\tif (accessible.getControlListeners ().length != 0) {", "-\t\t\tint set = ATK.atk_state_set_new ();", "-\t\t\tAccessibleControlListener[] listeners = accessible.getControlListeners ();", "-\t\t\tAccessibleControlEvent event = new AccessibleControlEvent (this);", "-\t\t\tevent.childID = id;", "-\t\t\tevent.detail = -1;", "-\t\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\t\tlisteners [i].getState (event);", "-\t\t\t} ", "-\t\t\tif (event.detail != -1) {", "-\t\t\t\t//\tConvert from win32 state values to atk state values", "-\t\t\t\tint state = event.detail;", "-\t\t\t\tif ((state & ACC.STATE_BUSY) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_BUSY);", "-\t\t\t\tif ((state & ACC.STATE_CHECKED) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_CHECKED);", "-\t\t\t\tif ((state & ACC.STATE_EXPANDED) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_EXPANDED);", "-\t\t\t\tif ((state & ACC.STATE_FOCUSABLE) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_FOCUSABLE);", "-\t\t\t\tif ((state & ACC.STATE_FOCUSED) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_FOCUSED);", "-\t\t\t\tif ((state & ACC.STATE_HOTTRACKED) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_ARMED); ;", "-\t\t\t\tif ((state & ACC.STATE_INVISIBLE) == 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_VISIBLE);", "-\t\t\t\tif ((state & ACC.STATE_MULTISELECTABLE) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_MULTISELECTABLE);", "-\t\t\t\tif ((state & ACC.STATE_OFFSCREEN) == 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_SHOWING);\t\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\tif ((state & ACC.STATE_PRESSED) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_PRESSED);", "-\t\t\t\tif ((state & ACC.STATE_READONLY) == 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_EDITABLE);", "-\t\t\t\tif ((state & ACC.STATE_SELECTABLE) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_SELECTABLE);", "-\t\t\t\tif ((state & ACC.STATE_SELECTED) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_SELECTED);", "-\t\t\t\tif ((state & ACC.STATE_SIZEABLE) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_RESIZABLE);", "-\t\t\t\t// Note: STATE_COLLAPSED and STATE_NORMAL have no ATK equivalents", "-\t\t\t\treturn set;", "-\t\t\t}\t", "-\t\t}", "+\tint atkObject_ref_state_set () {", "+\t\tint parentResult = 0;", "-\t\tif (objectClass.ref_state_set == 0) return 0;", "-\t\treturn ATK.call (objectClass.ref_state_set, handle);", "+\t\tif (objectClass.ref_state_set != 0) { ", "+\t\t\tparentResult = ATK.call (objectClass.ref_state_set, handle);", "+\t\t}", "+\t\tAccessibleControlListener[] listeners = accessible.getControlListeners ();", "+\t\tif (listeners.length == 0) return parentResult;", "+", "+\t\tint set = parentResult;", "+\t\tAccessibleControlEvent event = new AccessibleControlEvent (this);", "+\t\tevent.childID = id;", "+\t\tevent.detail = -1;", "+\t\tfor (int i = 0; i < listeners.length; i++) {", "+\t\t\tlisteners [i].getState (event);", "+\t\t} ", "+\t\tif (event.detail != -1) {", "+\t\t\t//\tConvert from win32 state values to atk state values", "+\t\t\tint state = event.detail;", "+\t\t\tif ((state & ACC.STATE_BUSY) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_BUSY);", "+\t\t\tif ((state & ACC.STATE_CHECKED) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_CHECKED);", "+\t\t\tif ((state & ACC.STATE_EXPANDED) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_EXPANDED);", "+\t\t\tif ((state & ACC.STATE_FOCUSABLE) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_FOCUSABLE);", "+\t\t\tif ((state & ACC.STATE_FOCUSED) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_FOCUSED);", "+\t\t\tif ((state & ACC.STATE_HOTTRACKED) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_ARMED); ;", "+\t\t\tif ((state & ACC.STATE_INVISIBLE) == 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_VISIBLE);", "+\t\t\tif ((state & ACC.STATE_MULTISELECTABLE) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_MULTISELECTABLE);", "+\t\t\tif ((state & ACC.STATE_OFFSCREEN) == 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_SHOWING);\t\t\t\t\t\t\t\t\t\t\t\t", "+\t\t\tif ((state & ACC.STATE_PRESSED) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_PRESSED);", "+\t\t\tif ((state & ACC.STATE_READONLY) == 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_EDITABLE);", "+\t\t\tif ((state & ACC.STATE_SELECTABLE) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_SELECTABLE);", "+\t\t\tif ((state & ACC.STATE_SELECTED) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_SELECTED);", "+\t\t\tif ((state & ACC.STATE_SIZEABLE) != 0) ATK.atk_state_set_add_state (set, ATK.ATK_STATE_RESIZABLE);", "+\t\t\t// Note: STATE_COLLAPSED and STATE_NORMAL have no ATK equivalents", "+\t\t}", "+\t\treturn set;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3af6ceb52eaa21a1893d92e704e8b7d7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "a397adb9835229656215e95243704829dfcbbeb5", "commitAfterChange": "def775014633899bdd73c908cbbdd1bf2fa7d5be", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": "\t  \tint atkObject_get_n_children ()", "signatureAfterChange": "\t  \tint atkObject_get_n_children ()", "diff": ["-\t\tif (accessible.getControlListeners ().length != 0) {", "-\t\t\tAccessibleControlListener[] listeners = accessible.getControlListeners ();", "-\t\t\tAccessibleControlEvent event = new AccessibleControlEvent (this);", "-\t\t\tevent.childID = id;", "-\t\t\tevent.detail = -1;", "-\t\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\t\tlisteners [i].getChildCount (event);", "-\t\t\t} ", "-\t\t\tif (event.detail != -1) return event.detail;", "-\t\t}", "+\t\tint parentResult = 0;", "-\t\tif (objectClass.get_n_children == 0) return 0;", "-\t\treturn OS.call (objectClass.get_n_children, handle);", "+\t\tif (objectClass.get_n_children != 0) { ", "+\t\t\tparentResult = OS.call (objectClass.get_n_children, handle);", "+\t\t}", "+\t\tAccessibleControlListener[] listeners = accessible.getControlListeners ();", "+\t\tif (listeners.length == 0) return parentResult;", "+\t\t\t", "+\t\tAccessibleControlEvent event = new AccessibleControlEvent (this);", "+\t\tevent.childID = id;", "+\t\tevent.detail = parentResult;", "+\t\tfor (int i = 0; i < listeners.length; i++) {", "+\t\t\tlisteners [i].getChildCount (event);", "+\t\t} ", "+\t\treturn event.detail;"]}], "num": 57605}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ae1f79d678ef80cd6f3b808821748e9d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c9889a6241b60ab79162e1c035193c7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "89dd18f56416766e9f25e99fa93a3cfdf736ff7e", "commitAfterChange": "0333c3cd6e1227d0185cdb60c13b053083d72b21", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object getContents(Transfer transfer)", "signatureAfterChange": " public Object getContents(Transfer transfer)", "diff": ["-\t\t", "-\tint[] scrapHandle = new int[1];", "-\tOS.GetCurrentScrap(scrapHandle);", "-\tint scrap= scrapHandle[0];", "-\t\t", "-\t// Does Clipboard have data in required format?", "+\t", "+\tint[] scrap = new int[1];", "+\tif (OS.GetCurrentScrap(scrap) != OS.noErr) return null;", "-\tfor (int i= 0; i < typeIds.length; i++) {", "+\tint[] size = new int[1];\t", "+\t// get data from system clipboard", "+\tfor (int i=0; i<typeIds.length; i++) {", "-\t\tint[] size = new int[1];", "-\t\tif (OS.GetScrapFlavorSize(scrap, type, size) == OS.noErr) {", "-\t\t\tif (size[0] > 0) {", "+\t\tsize[0] = 0;", "+\t\tif (OS.GetScrapFlavorSize(scrap[0], type, size) == OS.noErr && size[0] > 0) {", "+\t\t\tbyte[] buffer = new byte[size[0]];", "+\t\t\tif (OS.GetScrapFlavorData(scrap[0], type, size, buffer) == OS.noErr) {", "-\t\t\t\ttdata.data = new byte[size[0]];", "-\t\t\t\tOS.GetScrapFlavorData(scrap, type, size, tdata.data);", "+\t\t\t\ttdata.data = new byte[1][];", "+\t\t\t\ttdata.data[0] = buffer;", "-\t}\t\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "151cfb1845a9ea835cac7a1f96260d25", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "89dd18f56416766e9f25e99fa93a3cfdf736ff7e", "commitAfterChange": "0333c3cd6e1227d0185cdb60c13b053083d72b21", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public void setContents(Object[] data, Transfer[] dataTypes)", "signatureAfterChange": " public void setContents(Object[] data, Transfer[] dataTypes)", "diff": ["-\t", "-\tOS.ClearCurrentScrap();", "-\tint[] scrapHandle = new int[1];", "-\tOS.GetCurrentScrap(scrapHandle);", "-\tint scrap = scrapHandle[0];", "+\tif (OS.ClearCurrentScrap() != OS.noErr) {", "+\t\tDND.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t}", "+\tint[] scrap = new int[1];", "+\tif (OS.GetCurrentScrap(scrap) != OS.noErr) {", "+\t\tDND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);", "+\t}", "-\tfor (int i= 0; i < dataTypes.length; i++) {", "-\t\tint[] ids = dataTypes[i].getTypeIds();", "-\t\tfor (int j= 0; j < ids.length; j++) {", "+\tfor (int i=0; i<dataTypes.length; i++) {", "+\t\tint[] typeIds = dataTypes[i].getTypeIds();", "+\t\tfor (int j=0; j<typeIds.length; j++) {", "-\t\t\ttransferData.type = ids[j];", "-\t\t\tdataTypes[i].javaToNative(data[i], transferData);", "-\t\t\tif (transferData.result != OS.noErr)", "+\t\t\ttransferData.type = typeIds[j];", "+\t\t\tdataTypes[i].javaToNative(data[i], transferData); ", "+\t\t\tif (transferData.result != OS.noErr) {", "-\t\t\tif (OS.PutScrapFlavor(scrap, transferData.type, 0, transferData.data.length, transferData.data) != OS.noErr){", "+\t\t\t}", "+\t\t\t//Drag and Drop can handle multiple items in one transfer but the", "+\t\t\t//Clipboard can not.", "+\t\t\tbyte[] datum = transferData.data[0];", "+\t\t\tif (OS.PutScrapFlavor(scrap[0], transferData.type, 0, datum.length, datum) != OS.noErr){"]}], "num": 11265}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6aba616fcbe40f30b78d554aca97f225", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "06c68ac826e8b209336c3bf31dd159e8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "b36f97e8a58715f907c2ff4f1fa2768aeeedb4d3", "commitAfterChange": "47c737ebfb92a90218e4490fc6b9c7b2ae60d200", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 103, "signatureBeforeChange": "  LRESULT WM_ERASEBKGND (int wParam, int lParam)", "signatureAfterChange": "  int windowProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["+", "+int windowProc (int hwnd, int msg, int wParam, int lParam) {", "+\tif (handle == 0) return 0;", "+\tif (hwnd != handle) {", "+\t\tint hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "+\t\tif (hwnd == hwndHeader) {", "+\t\t\tswitch (msg) {", "+\t\t\t\tcase OS.WM_NOTIFY: {", "+\t\t\t\t\tNMHDR hdr = new NMHDR ();", "+\t\t\t\t\tOS.MoveMemory (hdr, lParam, NMHDR.sizeof);", "+\t\t\t\t\tswitch (hdr.code) {", "+\t\t\t\t\t\tcase OS.TTN_SHOW:", "+\t\t\t\t\t\tcase OS.TTN_POP: ", "+\t\t\t\t\t\tcase OS.TTN_GETDISPINFOA:", "+\t\t\t\t\t\tcase OS.TTN_GETDISPINFOW:", "+\t\t\t\t\t\t\treturn OS.SendMessage (handle, msg, wParam, lParam);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn callWindowProc (hwnd, msg, wParam, lParam);", "+\t\t}", "+\t}", "+\treturn super.windowProc (hwnd, msg, wParam, lParam);", "-", "-LRESULT WM_ERASEBKGND (int wParam, int lParam) {", "-\tLRESULT result = super.WM_ERASEBKGND (wParam, lParam);", "-\tif (result != null) return result;", "-\t/*", "-\t* This code is intentionally commented.  When a table contains", "-\t* images that are not in the first column, the work around causes", "-\t* pixel corruption.", "-\t*/", "-//\tif (!OS.IsWindowEnabled (handle)) return result;", "-//\t/*", "-//\t* Feature in Windows.  When WM_ERASEBKGND is called,", "-//\t* it clears the damaged area by filling it with the", "-//\t* background color.  During WM_PAINT, when the table", "-//\t* items are drawn, the background for each item is", "-//\t* also drawn, causing flashing.  The fix is to adjust", "-//\t* the damage by subtracting the bounds of each visible", "-//\t* table item.", "-//\t*/", "-//\tint itemCount = getItemCount ();", "-//\tif (itemCount == 0) return result;", "-//\tGCData data = new GCData();", "-//\tdata.device = display;", "-//\tGC gc = GC.win32_new (wParam, data);", "-//\tRegion region = new Region (display);", "-//\tgc.getClipping (region);", "-//\tint columnCount = Math.max (1, getColumnCount ());", "-//\tRectangle clientArea = getClientArea ();", "-//\tint i = getTopIndex ();", "-//\tint bottomIndex = i + OS.SendMessage (handle, OS.LVM_GETCOUNTPERPAGE, 0, 0);", "-//\tbottomIndex = Math.min (itemCount, bottomIndex);", "-//\twhile (i < bottomIndex) {", "-//\t\tint j = 0;", "-//\t\twhile (j < columnCount) {", "-//\t\t\tif (j != 0 || (!isSelected (i) && i != getFocusIndex ())) {", "-//\t\t\t\tRECT rect = new RECT ();", "-//\t\t\t\trect.top = j;", "-//\t\t\t\trect.left = OS.LVIR_LABEL;", "-//\t\t\t\tOS.SendMessage (handle, OS. LVM_GETSUBITEMRECT, i, rect);", "-//\t\t\t\tint width = Math.max (0, rect.right - rect.left);", "-//\t\t\t\tint height = Math.max (0, rect.bottom - rect.top);", "-//\t\t\t\tRectangle rect2 = new Rectangle (rect.left, rect.top, width, height);", "-//\t\t\t\tif (!rect2.intersects (clientArea)) break;", "-//\t\t\t\tregion.subtract (rect2);", "-//\t\t\t}", "-//\t\t\tj++;", "-//\t\t}", "-//\t\ti++;", "-//\t}", "-//\tgc.setClipping (region);", "-//\tdrawBackground (wParam);", "-//\tgc.setClipping ((Region) null);", "-//\tregion.dispose ();", "-//\tgc.dispose ();", "-//\treturn LRESULT.ONE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d0f4e4c965de6cb5aebc7c32f61e628", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ddffafae4e896b2e9ec78e332a5997a3daf99c21", "commitAfterChange": "627bed0d1b682a0f533dde99c53beac29b1f066b", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 83, "signatureBeforeChange": "  LRESULT WM_ERASEBKGND (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_ERASEBKGND (int wParam, int lParam)", "diff": ["-\tif (!OS.IsWindowEnabled (handle)) return result;", "-\t* Feature in Windows.  When WM_ERASEBKGND is called,", "-\t* it clears the damaged area by filling it with the", "-\t* background color.  During WM_PAINT, when the table", "-\t* items are drawn, the background for each item is", "-\t* also drawn, causing flashing.  The fix is to adjust", "-\t* the damage by subtracting the bounds of each visible", "-\t* table item.", "+\t* This code is intentionally commented.  When a table contains", "+\t* images that are not in the first column, the work around causes", "+\t* pixel corruption.", "-\tint itemCount = getItemCount ();", "-\tif (itemCount == 0) return result;", "-\tGCData data = new GCData();", "-\tdata.device = display;", "-\tGC gc = GC.win32_new (wParam, data);", "-\tRegion region = new Region (display);", "-\tgc.getClipping (region);", "-\tint columnCount = Math.max (1, getColumnCount ());", "-\tRectangle clientArea = getClientArea ();", "-\tint i = getTopIndex ();", "-\tint bottomIndex = i + OS.SendMessage (handle, OS.LVM_GETCOUNTPERPAGE, 0, 0);", "-\tbottomIndex = Math.min (itemCount, bottomIndex);", "-\twhile (i < bottomIndex) {", "-\t\tint j = 0;", "-\t\twhile (j < columnCount) {", "-\t\t\tif (j != 0 || (!isSelected (i) && i != getFocusIndex ())) {", "-\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\trect.top = j;", "-\t\t\t\trect.left = OS.LVIR_LABEL;", "-\t\t\t\tOS.SendMessage (handle, OS. LVM_GETSUBITEMRECT, i, rect);", "-\t\t\t\tint width = Math.max (0, rect.right - rect.left);", "-\t\t\t\tint height = Math.max (0, rect.bottom - rect.top);", "-\t\t\t\tRectangle rect2 = new Rectangle (rect.left, rect.top, width, height);", "-\t\t\t\tif (!rect2.intersects (clientArea)) break;", "-\t\t\t\tregion.subtract (rect2);", "-\t\t\t}", "-\t\t\tj++;", "-\t\t}", "-\t\ti++;", "-\t}", "-\tgc.setClipping (region);", "-\tdrawBackground (wParam);", "-\tgc.setClipping ((Region) null);", "-\tregion.dispose ();", "-\tgc.dispose ();", "-\treturn LRESULT.ONE;", "+//\tif (!OS.IsWindowEnabled (handle)) return result;", "+//\t/*", "+//\t* Feature in Windows.  When WM_ERASEBKGND is called,", "+//\t* it clears the damaged area by filling it with the", "+//\t* background color.  During WM_PAINT, when the table", "+//\t* items are drawn, the background for each item is", "+//\t* also drawn, causing flashing.  The fix is to adjust", "+//\t* the damage by subtracting the bounds of each visible", "+//\t* table item.", "+//\t*/", "+//\tint itemCount = getItemCount ();", "+//\tif (itemCount == 0) return result;", "+//\tGCData data = new GCData();", "+//\tdata.device = display;", "+//\tGC gc = GC.win32_new (wParam, data);", "+//\tRegion region = new Region (display);", "+//\tgc.getClipping (region);", "+//\tint columnCount = Math.max (1, getColumnCount ());", "+//\tRectangle clientArea = getClientArea ();", "+//\tint i = getTopIndex ();", "+//\tint bottomIndex = i + OS.SendMessage (handle, OS.LVM_GETCOUNTPERPAGE, 0, 0);", "+//\tbottomIndex = Math.min (itemCount, bottomIndex);", "+//\twhile (i < bottomIndex) {", "+//\t\tint j = 0;", "+//\t\twhile (j < columnCount) {", "+//\t\t\tif (j != 0 || (!isSelected (i) && i != getFocusIndex ())) {", "+//\t\t\t\tRECT rect = new RECT ();", "+//\t\t\t\trect.top = j;", "+//\t\t\t\trect.left = OS.LVIR_LABEL;", "+//\t\t\t\tOS.SendMessage (handle, OS. LVM_GETSUBITEMRECT, i, rect);", "+//\t\t\t\tint width = Math.max (0, rect.right - rect.left);", "+//\t\t\t\tint height = Math.max (0, rect.bottom - rect.top);", "+//\t\t\t\tRectangle rect2 = new Rectangle (rect.left, rect.top, width, height);", "+//\t\t\t\tif (!rect2.intersects (clientArea)) break;", "+//\t\t\t\tregion.subtract (rect2);", "+//\t\t\t}", "+//\t\t\tj++;", "+//\t\t}", "+//\t\ti++;", "+//\t}", "+//\tgc.setClipping (region);", "+//\tdrawBackground (wParam);", "+//\tgc.setClipping ((Region) null);", "+//\tregion.dispose ();", "+//\tgc.dispose ();", "+//\treturn LRESULT.ONE;", "+\treturn result;"]}], "num": 4845}
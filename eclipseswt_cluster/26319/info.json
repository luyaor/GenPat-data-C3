{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "195f0547397d13bd51c45ea9f8122716", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "051db1b1333330b581583d3043bdb470", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Spinner.java", "commitBeforeChange": "ca2cb9608e1b5eee3fb0b74d18b7bf7a8ebb9e2e", "commitAfterChange": "7cd374fc3f9828efeba3ff4d6e4ac7d324366311", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void cut ()", "signatureAfterChange": " public void cut ()", "diff": ["+\tint textHandle = OS.PtWidgetChildBack (handle);", "+\tif (textHandle != 0) {", "+\t\tint [] start = new int [1], end = new int [1];", "+\t\tint length = OS.PtTextGetSelection (handle, start, end);", "+\t\tif (length <= 0) return;", "+\t\tint [] args = {OS.Pt_ARG_TEXT_STRING, 0, 0};", "+\t\tOS.PtGetResources (textHandle, args.length / 3, args);", "+\t\tbyte[] buffer = new byte[length + 1];", "+\t\tOS.memmove (buffer, args [1] + start [0], length);", "+\t\tint ig = OS.PhInputGroup (0);", "+\t\tOS.PhClipboardCopyString((short)ig, buffer);", "+\t\tbuffer = new byte[0];", "+\t\tOS.PtTextModifyText (textHandle, start [0], end [0], start [0], buffer, buffer.length);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be7d2bee3fae30c2d6529787492315fd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "556485b9b423754e2cf7ef43c3659942e02e8a73", "commitAfterChange": "11d912639acc7f554fd25be9dcf7fad00a7b7665", "methodNumberBeforeChange": 47, "methodNumberAfterChange": 47, "signatureBeforeChange": " public Control getCursorControl ()", "signatureAfterChange": " public Control getCursorControl ()", "diff": ["-\tint /*long*/ window = OS.gdk_window_at_pointer (x,y);", "-\tif (window == 0) return null;", "+\tint /*long*/ handle = 0;", "-\tOS.gdk_window_get_user_data (window, user_data);", "-\tint /*long*/ handle = user_data [0];", "+\tint /*long*/ window = OS.gdk_window_at_pointer (x,y);", "+\tif (window != 0) {", "+\t\tOS.gdk_window_get_user_data (window, user_data);", "+\t\thandle = user_data [0];", "+\t} else {", "+\t\t/*", "+\t\t* Feature in GTK. gdk_window_at_pointer() will not return a window ", "+\t\t* if the pointer is over a foreign embedded window. The fix is to use", "+\t\t* XQueryPointer to find the containing GDK window.", "+\t\t*/", "+\t\tif (!OS.GDK_WINDOWING_X11 ()) return null;", "+\t\tOS.gdk_error_trap_push ();", "+\t\tint [] unused = new int [1], buffer = new int [1];", "+\t\tint xWindow, xParent = OS.XDefaultRootWindow (xDisplay);", "+\t\tdo {", "+\t\t\tif (OS.XQueryPointer (xDisplay, xParent, unused, buffer, unused, unused, unused, unused, unused) == 0) {", "+\t\t\t\tOS.gdk_error_trap_pop ();", "+\t\t\t\treturn null;", "+\t\t\t}", "+\t\t\tif ((xWindow = buffer [0]) != 0) {", "+\t\t\t\txParent = xWindow;", "+\t\t\t\tint /*long*/ gdkWindow = OS.gdk_window_lookup (xWindow);", "+\t\t\t\tif (gdkWindow != 0)\t{", "+\t\t\t\t\tOS.gdk_window_get_user_data (gdkWindow, user_data);", "+\t\t\t\t\tif (user_data[0] != 0) handle = user_data[0];\t", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} while (xWindow != 0);", "+\t\tOS.gdk_error_trap_pop ();", "+\t}"]}], "num": 26319}
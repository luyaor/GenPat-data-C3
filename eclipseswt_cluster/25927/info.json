{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "872e8c909cd80d15bfea9523b4d2bf7b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f04aaed279ce6d0703f91d856c5bce8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ce2f35c3f6b1d0b5778f68f011b1d8668d3c5c72", "commitAfterChange": "00bee382096a1807d86474fed7c933116a37eeb8", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 191, "signatureBeforeChange": "\r public void redrawRange(int start, int length, boolean clearBackground)", "signatureAfterChange": "\r public void redrawRange(int start, int length, boolean clearBackground)", "diff": ["-public void redrawRange(int start, int length, boolean clearBackground) {\r", "-\tint lineHeight = getLineHeight();\r", "-\tint end = start + length;\r", "-\tint firstLine = content.getLineAtOffset(start);\r", "-\tint lastLine = content.getLineAtOffset(end);\r", "-\tint redrawX;\r", "-\tint redrawY;\r", "-\tint firstLineOffset;\r", "-\tint offsetInFirstLine;\r", "-\tint partialBottomIndex = getPartialBottomIndex();\r", "-\tint partialTopIndex = verticalScrollOffset / lineHeight;\r", "-\tString line;\r", "-\tGC gc = null;\r", "-\t// do nothing if redraw range is completely invisible\t\r", "-\tif (firstLine > partialBottomIndex || lastLine < partialTopIndex) {\r", "-\t\treturn;\r", "-\t}\r", "-\tif (clearBackground == false) {\r", "-\t\tgc = new GC(this);\r", "-\t}\r", "-\t// only redraw visible lines\r", "-\tif (partialTopIndex > firstLine) {\r", "-\t\tfirstLine = partialTopIndex;\r", "-\t\tfirstLineOffset = start = content.getOffsetAtLine(firstLine);\r", "-\t\toffsetInFirstLine = 0;\r", "-\t}\r", "-\telse {\r", "-\t\tfirstLineOffset = content.getOffsetAtLine(firstLine);\r", "-\t\toffsetInFirstLine = start - firstLineOffset;\r", "-\t}\r", "-\tif (partialBottomIndex + 1 < lastLine) {\r", "-\t\tlastLine = partialBottomIndex + 1;\t// + 1 to redraw whole bottom line, including line break\r", "-\t\tend = content.getOffsetAtLine(lastLine);\r", "-\t}\r", "-\t// redraw first line\r", "-\tline = content.getLine(firstLine);\r", "-\t// calculate redraw start location\r", "-\tredrawX = getXAtOffset(line, firstLine, offsetInFirstLine);\r", "-\tredrawY = firstLine * lineHeight - verticalScrollOffset;\t\t\r", "-\t\tredrawStopX = getXAtOffset(line, firstLine, end - firstLineOffset);\r", "-\tdraw(redrawX, redrawY, redrawStopX - redrawX, lineHeight, gc, clearBackground);\r", "-\tfirstLine++;\t\t// first line has been redrawn.\r", "-\r", "-\t// redraw last line if more than line needs redrawing \r", "-\t\tint offsetInLastLine = end - content.getOffsetAtLine(lastLine);\t\r", "-\t\t\tdraw(0, redrawY, redrawStopX, lineHeight, gc, clearBackground);\r", "-\t\tlastLine--;\t\t\t// last line has been redrawn.\r", "-\t}\r", "-\t// redraw entire center lines if redraw range includes more than two lines\r", "-\tif (lastLine >= firstLine) {\r", "-\t\tint redrawStopY = (lastLine + 1) * lineHeight - verticalScrollOffset;\t\t\r", "-\t\tredrawY = firstLine * lineHeight - verticalScrollOffset;\t\t\t\t\r", "-\t\tdraw(0, redrawY, clientArea.width, redrawStopY - redrawY, gc, clearBackground);\r", "-\t}\r", "-\tif (gc != null) {\r", "-\t\tgc.dispose();\r", "+public void redrawRange(int start, int length, boolean clearBackground) {\r", "+\tcheckWidget();\r", "+\tinternalRedrawRange(start, length, clearBackground);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdbf999ad8c242c8093eb0b1b77f8399", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "7860723211e8cc6ba8707f4d02beb62cf87da3ef", "commitAfterChange": "dfc28760d49abde0469544c6fd59329f9c08c067", "methodNumberBeforeChange": 271, "methodNumberAfterChange": 276, "signatureBeforeChange": "\r public void setStyleRange(StyleRange range)", "signatureAfterChange": "\r public void setStyleRange(StyleRange range)", "diff": ["-\tboolean redrawFirstLine = false;\r", "-\tboolean redrawLastLine = false;\r", "-\t\t// the first and last line needs to be redrawn completely if the \r", "-\t\t// font style is changing from SWT.NORMAL to something else or \r", "-\t\t// vice versa. fixes 1G7M5WE.\r", "-\t\tint rangeEnd = range.start + range.length;\r", "-\t\tint firstLine = content.getLineAtOffset(range.start);\r", "-\t\tint lastLine = content.getLineAtOffset(rangeEnd);\r", "-\t\tint firstLineOffset = content.getOffsetAtLine(firstLine);\r", "-\t\tif (isStyleChanging(range, range.start, Math.min(rangeEnd, firstLineOffset + content.getLine(firstLine).length()))) {\r", "-\t\t\tredrawFirstLine = true;\r", "-\t\t}\t\t\t\t\r", "-\t\tif (lastLine != firstLine) {\r", "-\t\t\tint lastLineOffset = content.getOffsetAtLine(lastLine);\r", "-\t\t\tif (isStyleChanging(range, lastLineOffset, rangeEnd)) {\r", "-\t\t\t\tredrawLastLine = true;\r", "-\t\t\t}\t\t\t\t\r", "-\t\t}\r", "-\t}\r", "-\tif (isBidi()) {\r", "-\t\tredrawFirstLine = true;\r", "-\t\tredrawLastLine = true;\r", "-\t}\r", "-\tdefaultLineStyler.setStyleRange(range);\r", "-\tif (range != null) {\r", "+\t\tboolean redrawFirstLine = false;\r", "+\t\tboolean redrawLastLine = false;\r", "-\t\r", "-\t\t// reset all lines affected by the style change but let the redraw\r", "-\t\t// recalculate only those that are visible.\r", "-\t\tlineCache.reset(firstLine, lastLine - firstLine + 1, true);\r", "-\t\tinternalRedrawRange(range.start, range.length, true);\r", "-\t\tif (redrawFirstLine) {\r", "-\t\t\t// redraw starting at the style change start offset since\r", "-\t\t\t// single line text changes, followed by style changes will\r", "-\t\t\t// flash otherwise\r", "+\r", "+\t\t// if the style is not visible, there is no need to redraw\r", "+\t\tboolean redrawLines = isAreaVisible(firstLine, lastLine);\r", "+\r", "+\t\tif (!redrawLines) {\r", "+\t\t\tdefaultLineStyler.setStyleRange(range);\r", "+\t\t\tlineCache.reset(firstLine, lastLine - firstLine + 1, true);\r", "+\t\t} else {\r", "+\t\t\t// the first and last line needs to be redrawn completely if the \r", "+\t\t\t// font style is changing from SWT.NORMAL to something else or \r", "+\t\t\t// vice versa. fixes 1G7M5WE.\r", "-\t\t\tString firstLineText = content.getLine(firstLine);\r", "-\t\t\tint redrawX = getXAtOffset(firstLineText, firstLine, range.start - firstLineOffset);\r", "-\t\t\tint redrawY = firstLine * lineHeight - verticalScrollOffset;\r", "-\t\t\tsuper.redraw(\r", "-\t\t\t\tredrawX + leftMargin, redrawY + topMargin, \r", "-\t\t\t\tgetClientArea().width, lineHeight, true);\r", "+\t\t\tint lastLineOffset = content.getOffsetAtLine(lastLine);\r", "+\t\t\tif (isBidi()) {\r", "+\t\t\t\tredrawFirstLine = true;\r", "+\t\t\t\tredrawLastLine = true;\r", "+\t\t\t} else {\r", "+\t\t\t\tredrawFirstLine = isRedrawFirstLine(new StyleRange[] {range}, firstLine, firstLineOffset);\r", "+\t\t\t\tif (lastLine != firstLine) {\r", "+\t\t\t\t\tredrawLastLine = isRedrawLastLine(new StyleRange[] {range}, lastLine, lastLineOffset);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tdefaultLineStyler.setStyleRange(range);\r", "+\t\t\t// reset all lines affected by the style change but let the redraw\r", "+\t\t\t// recalculate only those that are visible.\r", "+\t\t\tlineCache.reset(firstLine, lastLine - firstLine + 1, true);\r", "+\t\t\tinternalRedrawRange(range.start, range.length, true);\r", "+\t\t\tif (redrawFirstLine) {\r", "+\t\t\t\tredrawLine(firstLine, range.start - firstLineOffset);\r", "+\t\t\t}\r", "+\t\t\tif (redrawLastLine) {\r", "+\t\t\t\tredrawLine(lastLine, 0);\r", "+\t\t\t}\r", "-\t\tif (redrawLastLine) {\r", "-\t\t\t// redraw the whole line if the font style changed on the last line\t\r", "-\t\t\tint redrawY = lastLine * lineHeight - verticalScrollOffset;\r", "-\t\t\tsuper.redraw(\r", "-\t\t\t\tleftMargin, redrawY + topMargin, \r", "-\t\t\t\tgetClientArea().width, lineHeight, true);\r", "-\t\t}\r", "-\t}\r", "-\telse {\r", "-\t\t// reset all lines but let the redraw recalculate only those that \r", "-\t\t// are visible.\r", "+\t} else {\r", "+\t\t// clearing all styles\r", "+\t\tdefaultLineStyler.setStyleRange(range);\r", "+\t\r"]}], "num": 25927}
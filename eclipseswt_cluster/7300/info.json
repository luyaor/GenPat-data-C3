{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cf98fb917a3740a6c473adf7723a301a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66aa2b26811e275ff009d4f0848fed89", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "92c0429938b5315756c2b79bf85400cb1d8ff0de", "commitAfterChange": "2c3825fcb700a103615c6286323cb92f0a465eb5", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": "  int OnStateChange(int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange(int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["-\t\tif (html != null) {", "-\t\t\t/* Convert the String containing HTML to an array of", "-\t\t\t * bytes with UTF-8 data.", "-\t\t\t */", "-\t\t\tbyte[] data = null;", "-\t\t\ttry {", "-\t\t\t\tdata = html.getBytes(\"UTF-8\"); //$NON-NLS-1$", "-\t\t\t} catch (UnsupportedEncodingException e) {", "-\t\t\t}", "-\t\t\thtml = null;", "-\t\t\tif (data != null) {", "-\t\t\t\t/* render HTML in memory */", "-\t\t\t\tString contentType = \"text/html\"; //$NON-NLS-1$", "-\t\t\t\t", "-\t\t\t\tInputStream inputStream = new InputStream(data);", "-\t\t\t\tinputStream.AddRef();", "-\t", "-\t\t\t\tint[] result = new int[1];", "-\t\t\t\tint rc = webBrowser.QueryInterface(nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\t", "-\t\t\t\tnsIInterfaceRequestor interfaceRequestor = new nsIInterfaceRequestor(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = interfaceRequestor.GetInterface(nsIContentViewerContainer.NS_ICONTENTVIEWERCONTAINER_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\t\t\tinterfaceRequestor.Release();", "-\t\t", "-\t\t\t\tnsIContentViewerContainer contentViewerContainer = new nsIContentViewerContainer(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t", "-\t\t\t\trc = XPCOM.NS_GetServiceManager(result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\t", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = serviceManager.GetService(XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "-\t\t", "-\t\t\t\tnsIIOService ioService = new nsIIOService(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\t/*", "-\t\t\t\t* Note.  Mozilla ignores LINK tags used to load CSS stylesheets", "-\t\t\t\t* when the URI protocol for the nsInputStreamChannel", "-\t\t\t\t* is about:blank.  The fix is to specify the file protocol.", "-\t\t\t\t*/", "-\t\t\t\tbyte[] aString = \"file:\".getBytes(); //$NON-NLS-1$", "-\t\t\t\tint aSpec = XPCOM.nsEmbedCString_new(aString, aString.length);", "-\t\t\t\trc = ioService.NewURI(aSpec, null, 0, result);", "-\t\t\t\tXPCOM.nsEmbedCString_delete(aSpec);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\t\tioService.Release();", "-\t\t", "-\t\t\t\tnsIURI uri = new nsIURI(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = XPCOM.NS_GetComponentManager(result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t", "-\t\t\t\tnsIComponentManager componentManager = new nsIComponentManager(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = componentManager.CreateInstance(XPCOM.NS_LOADGROUP_CID, 0, nsILoadGroup.NS_ILOADGROUP_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\t\tnsILoadGroup loadGroup = new nsILoadGroup(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = componentManager.CreateInstance(XPCOM.NS_INPUTSTREAMCHANNEL_CID, 0, nsIInputStreamChannel.NS_IINPUTSTREAMCHANNEL_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t", "-\t\t\t\tnsIInputStreamChannel inputStreamChannel = new nsIInputStreamChannel(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tcomponentManager.Release();\t", "-\t\t\t\t", "-\t\t\t\trc = inputStreamChannel.SetURI(uri.getAddress());", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\trc = inputStreamChannel.SetContentStream(inputStream.getAddress());", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tbyte[] buffer = contentType.getBytes();", "-\t\t\t\tbyte[] contentTypeBuffer = new byte[buffer.length + 1];", "-\t\t\t\tSystem.arraycopy(buffer, 0, contentTypeBuffer, 0, buffer.length);", "-\t\t\t\tint aContentType = XPCOM.nsEmbedCString_new(contentTypeBuffer, contentTypeBuffer.length);", "-\t\t\t\trc = inputStreamChannel.SetContentType(aContentType);", "-\t\t\t\tXPCOM.nsEmbedCString_delete(aContentType);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tbyte[] contentCharsetBuffer = \"UTF-8\".getBytes(); //$NON-NLS-1$", "-\t\t\t\tint aContentCharset = XPCOM.nsEmbedCString_new(contentCharsetBuffer, contentCharsetBuffer.length);", "-\t\t\t\trc = inputStreamChannel.SetContentCharset(aContentCharset);", "-\t\t\t\tXPCOM.nsEmbedCString_delete(aContentCharset);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\trc = inputStreamChannel.SetLoadGroup(loadGroup.getAddress());", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t", "-\t\t\t\tbuffer = XPCOM.NS_CATEGORYMANAGER_CONTRACTID.getBytes();", "-\t\t\t\tbyte[] aContractID = new byte[buffer.length + 1];", "-\t\t\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "-\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsICategoryManager.NS_ICATEGORYMANAGER_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "-\t\t", "-\t\t\t\tnsICategoryManager categoryManager = new nsICategoryManager(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tbuffer = \"Gecko-Content-Viewers\".getBytes(); //$NON-NLS-1$", "-\t\t\t\tbyte[] aCategory = new byte[buffer.length + 1];", "-\t\t\t\tSystem.arraycopy(buffer, 0, aCategory, 0, buffer.length);", "-\t\t\t\trc = categoryManager.GetCategoryEntry(aCategory, contentTypeBuffer, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\t\tcategoryManager.Release();", "-\t\t", "-\t\t\t\tint length = XPCOM.strlen(result[0]);", "-\t\t\t\taContractID = new byte[length + 1];", "-\t\t\t\tXPCOM.memmove(aContractID, result[0], length);", "-\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIDocumentLoaderFactory.NS_IDOCUMENTLOADERFACTORY_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t", "-\t\t", "-\t\t\t\tnsIDocumentLoaderFactory documentLoaderFactory = new nsIDocumentLoaderFactory(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tbuffer = \"view\".getBytes(); //$NON-NLS-1$", "-\t\t\t\tbyte[] aCommand = new byte[buffer.length + 1];", "-\t\t\t\tSystem.arraycopy(buffer, 0, aCommand, 0, buffer.length);", "-\t\t\t\tint[] aDocListenerResult = new int[1];", "-\t\t\t\trc = documentLoaderFactory.CreateInstance(aCommand, inputStreamChannel.getAddress(), loadGroup.getAddress(),", "-\t\t\t\t\t\tcontentTypeBuffer, contentViewerContainer.getAddress(), 0, aDocListenerResult, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (aDocListenerResult[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\t\tdocumentLoaderFactory.Release();", "-\t\t", "-\t\t\t\tnsIContentViewer contentViewer = new nsIContentViewer(result[0]);", "-\t\t\t\tnsIStreamListener streamListener = new nsIStreamListener(aDocListenerResult[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = contentViewer.SetContainer(contentViewerContainer.getAddress());", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\trc = contentViewerContainer.Embed(contentViewer.getAddress(), aCommand, 0);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tcontentViewer.Release();", "-\t\t", "-\t\t\t\trc = inputStreamChannel.QueryInterface(nsIRequest.NS_IREQUEST_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t", "-\t\t\t\tnsIRequest request = new nsIRequest(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = streamListener.OnStartRequest(request.getAddress(), 0);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t", "-\t\t\t\t/* append */", "-\t\t\t\trc = streamListener.OnDataAvailable(request.getAddress(), 0, inputStream.getAddress(), 0, data.length);", "-\t\t\t\t", "-\t\t\t\t/*", "-\t\t\t\t* Note.   Mozilla returns a NS_ERROR_HTMLPARSER_UNRESOLVEDDTD if the given content", "-\t\t\t\t* cannot be rendered as HTML.  Silently ignore this error. ", "-\t\t\t\t*/", "-\t\t\t\tif (rc != XPCOM.NS_ERROR_HTMLPARSER_UNRESOLVEDDTD && rc != XPCOM.NS_OK) error(rc);", "-\t\t", "-\t\t\t\t/* close */", "-\t\t\t\trc = streamListener.OnStopRequest(request.getAddress(), 0, XPCOM.NS_OK);", "-\t\t\t\tif (rc != XPCOM.NS_ERROR_HTMLPARSER_UNRESOLVEDDTD && rc != XPCOM.NS_OK) error(rc);", "-\t\t", "-\t\t\t\trequest.Release();", "-\t\t\t\tstreamListener.Release();", "-\t\t\t\tserviceManager.Release();", "-\t\t\t\tinputStreamChannel.Release();", "-\t\t\t\tloadGroup.Release();", "-\t\t\t\turi.Release();", "-\t\t\t\tcontentViewerContainer.Release();", "-\t\t\t\tinputStream.Release();", "-\t\t\t}", "-\t\t}", "-"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6a807548f23bc192e0a5d1b9a1cacfee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/gtk/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "79e00f2ac248796c568c596a901dfc32bfa767fe", "commitAfterChange": "92c0429938b5315756c2b79bf85400cb1d8ff0de", "methodNumberBeforeChange": 115, "methodNumberAfterChange": 115, "signatureBeforeChange": "  int OnStateChange(int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange(int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["-\t\tif (html != null) {", "-\t\t\t/* Convert the String containing HTML to an array of", "-\t\t\t * bytes with UTF-8 data.", "-\t\t\t */", "-\t\t\tbyte[] data = null;", "-\t\t\ttry {", "-\t\t\t\tdata = html.getBytes(\"UTF-8\"); //$NON-NLS-1$", "-\t\t\t} catch (UnsupportedEncodingException e) {", "-\t\t\t}", "-\t\t\thtml = null;", "-\t\t\tif (data != null) {", "-\t\t\t\t/* render HTML in memory */", "-\t\t\t\tString contentType = \"text/html\"; //$NON-NLS-1$", "-\t\t\t\t", "-\t\t\t\tInputStream inputStream = new InputStream(data);", "-\t\t\t\tinputStream.AddRef();", "-\t", "-\t\t\t\tint[] result = new int[1];", "-\t\t\t\tint rc = webBrowser.QueryInterface(nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\t", "-\t\t\t\tnsIInterfaceRequestor interfaceRequestor = new nsIInterfaceRequestor(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = interfaceRequestor.GetInterface(nsIContentViewerContainer.NS_ICONTENTVIEWERCONTAINER_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\t\t\tinterfaceRequestor.Release();", "-\t\t", "-\t\t\t\tnsIContentViewerContainer contentViewerContainer = new nsIContentViewerContainer(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t", "-\t\t\t\trc = XPCOM.NS_GetServiceManager(result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\t", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = serviceManager.GetService(XPCOM.NS_IOSERVICE_CID, nsIIOService.NS_IIOSERVICE_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "-\t\t", "-\t\t\t\tnsIIOService ioService = new nsIIOService(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\t/*", "-\t\t\t\t* Note.  Mozilla ignores LINK tags used to load CSS stylesheets", "-\t\t\t\t* when the URI protocol for the nsInputStreamChannel", "-\t\t\t\t* is about:blank.  The fix is to specify the file protocol.", "-\t\t\t\t*/", "-\t\t\t\tbyte[] aString = \"file:\".getBytes(); //$NON-NLS-1$", "-\t\t\t\tint aSpec = XPCOM.nsEmbedCString_new(aString, aString.length);", "-\t\t\t\trc = ioService.NewURI(aSpec, null, 0, result);", "-\t\t\t\tXPCOM.nsEmbedCString_delete(aSpec);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\t\tioService.Release();", "-\t\t", "-\t\t\t\tnsIURI uri = new nsIURI(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = XPCOM.NS_GetComponentManager(result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t", "-\t\t\t\tnsIComponentManager componentManager = new nsIComponentManager(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = componentManager.CreateInstance(XPCOM.NS_LOADGROUP_CID, 0, nsILoadGroup.NS_ILOADGROUP_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\t\tnsILoadGroup loadGroup = new nsILoadGroup(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = componentManager.CreateInstance(XPCOM.NS_INPUTSTREAMCHANNEL_CID, 0, nsIInputStreamChannel.NS_IINPUTSTREAMCHANNEL_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t", "-\t\t\t\tnsIInputStreamChannel inputStreamChannel = new nsIInputStreamChannel(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tcomponentManager.Release();\t", "-\t\t\t\t", "-\t\t\t\trc = inputStreamChannel.SetURI(uri.getAddress());", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\trc = inputStreamChannel.SetContentStream(inputStream.getAddress());", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tbyte[] buffer = contentType.getBytes();", "-\t\t\t\tbyte[] contentTypeBuffer = new byte[buffer.length + 1];", "-\t\t\t\tSystem.arraycopy(buffer, 0, contentTypeBuffer, 0, buffer.length);", "-\t\t\t\tint aContentType = XPCOM.nsEmbedCString_new(contentTypeBuffer, contentTypeBuffer.length);", "-\t\t\t\trc = inputStreamChannel.SetContentType(aContentType);", "-\t\t\t\tXPCOM.nsEmbedCString_delete(aContentType);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tbyte[] contentCharsetBuffer = \"UTF-8\".getBytes(); //$NON-NLS-1$", "-\t\t\t\tint aContentCharset = XPCOM.nsEmbedCString_new(contentCharsetBuffer, contentCharsetBuffer.length);", "-\t\t\t\trc = inputStreamChannel.SetContentCharset(aContentCharset);", "-\t\t\t\tXPCOM.nsEmbedCString_delete(aContentCharset);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\trc = inputStreamChannel.SetLoadGroup(loadGroup.getAddress());", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t", "-\t\t\t\tbuffer = XPCOM.NS_CATEGORYMANAGER_CONTRACTID.getBytes();", "-\t\t\t\tbyte[] aContractID = new byte[buffer.length + 1];", "-\t\t\t\tSystem.arraycopy(buffer, 0, aContractID, 0, buffer.length);", "-\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsICategoryManager.NS_ICATEGORYMANAGER_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "-\t\t", "-\t\t\t\tnsICategoryManager categoryManager = new nsICategoryManager(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tbuffer = \"Gecko-Content-Viewers\".getBytes(); //$NON-NLS-1$", "-\t\t\t\tbyte[] aCategory = new byte[buffer.length + 1];", "-\t\t\t\tSystem.arraycopy(buffer, 0, aCategory, 0, buffer.length);", "-\t\t\t\trc = categoryManager.GetCategoryEntry(aCategory, contentTypeBuffer, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\t\tcategoryManager.Release();", "-\t\t", "-\t\t\t\tint length = XPCOM.strlen(result[0]);", "-\t\t\t\taContractID = new byte[length + 1];", "-\t\t\t\tXPCOM.memmove(aContractID, result[0], length);", "-\t\t\t\trc = serviceManager.GetServiceByContractID(aContractID, nsIDocumentLoaderFactory.NS_IDOCUMENTLOADERFACTORY_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t", "-\t\t", "-\t\t\t\tnsIDocumentLoaderFactory documentLoaderFactory = new nsIDocumentLoaderFactory(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tbuffer = \"view\".getBytes(); //$NON-NLS-1$", "-\t\t\t\tbyte[] aCommand = new byte[buffer.length + 1];", "-\t\t\t\tSystem.arraycopy(buffer, 0, aCommand, 0, buffer.length);", "-\t\t\t\tint[] aDocListenerResult = new int[1];", "-\t\t\t\trc = documentLoaderFactory.CreateInstance(aCommand, inputStreamChannel.getAddress(), loadGroup.getAddress(),", "-\t\t\t\t\t\tcontentTypeBuffer, contentViewerContainer.getAddress(), 0, aDocListenerResult, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (aDocListenerResult[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t\t\tdocumentLoaderFactory.Release();", "-\t\t", "-\t\t\t\tnsIContentViewer contentViewer = new nsIContentViewer(result[0]);", "-\t\t\t\tnsIStreamListener streamListener = new nsIStreamListener(aDocListenerResult[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = contentViewer.SetContainer(contentViewerContainer.getAddress());", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\trc = contentViewerContainer.Embed(contentViewer.getAddress(), aCommand, 0);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tcontentViewer.Release();", "-\t\t", "-\t\t\t\trc = inputStreamChannel.QueryInterface(nsIRequest.NS_IREQUEST_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\t\t", "-\t\t\t\tnsIRequest request = new nsIRequest(result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = streamListener.OnStartRequest(request.getAddress(), 0);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\t\t", "-\t\t\t\t/* append */", "-\t\t\t\trc = streamListener.OnDataAvailable(request.getAddress(), 0, inputStream.getAddress(), 0, data.length);", "-\t\t\t\t", "-\t\t\t\t/*", "-\t\t\t\t* Note.   Mozilla returns a NS_ERROR_HTMLPARSER_UNRESOLVEDDTD if the given content", "-\t\t\t\t* cannot be rendered as HTML.  Silently ignore this error. ", "-\t\t\t\t*/", "-\t\t\t\tif (rc != XPCOM.NS_ERROR_HTMLPARSER_UNRESOLVEDDTD && rc != XPCOM.NS_OK) error(rc);", "-\t\t", "-\t\t\t\t/* close */", "-\t\t\t\trc = streamListener.OnStopRequest(request.getAddress(), 0, XPCOM.NS_OK);", "-\t\t\t\tif (rc != XPCOM.NS_ERROR_HTMLPARSER_UNRESOLVEDDTD && rc != XPCOM.NS_OK) error(rc);", "-\t\t", "-\t\t\t\trequest.Release();", "-\t\t\t\tstreamListener.Release();", "-\t\t\t\tserviceManager.Release();", "-\t\t\t\tinputStreamChannel.Release();", "-\t\t\t\tloadGroup.Release();", "-\t\t\t\turi.Release();", "-\t\t\t\tcontentViewerContainer.Release();", "-\t\t\t\tinputStream.Release();", "-\t\t\t}", "-\t\t}", "-"]}], "num": 7300}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cfc83dccf6accc1196608dbc323e7556", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7fdb8b8e6c484c42fea8fea257a0cd38", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 11, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["+", "-\tstate |= HIDDEN;", "-\tDisplay display= getDisplay();", "-\tint menuHandle[]= new int[1];", "-\tif (OS.CreateNewMenu(display.nextMenuId(), 0, menuHandle) == OS.kNoErr)", "-\t\thandle= menuHandle[0];", "-\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\tOS.RetainMenu(handle);", "-\tint[] mask = new int[] {", "-\t\tOS.kEventClassMenu, OS.kEventMenuOpening,", "-\t\tOS.kEventClassMenu, OS.kEventMenuClosed", "-\t};", "-\t//OS.InstallEventHandler(OS.GetMenuEventTarget(handle), display.fMenuProc, mask.length / 2, mask, handle, null);", "-\tOS.InstallEventHandler(OS.GetMenuEventTarget(handle), display.fMenuProc, mask, handle);", "+\tDisplay display = getDisplay ();", "+\tint menuProc = display.menuProc;", "+\tdisplay.addMenu (this);", "+\tint outMenuRef [] = new int [1];", "+\tOS.CreateNewMenu (id, 0, outMenuRef);", "+\tif (outMenuRef [0] == 0) {", "+\t\tdisplay.removeMenu (this);", "+\t\terror (SWT.ERROR_NO_HANDLES);", "+\t}", "+\thandle = outMenuRef [0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ef18656797632fc1514d828b22882e4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/TextTransfer.java", "commitBeforeChange": "a51a5c56cd66a0306adaaed3bd6b70f9e1c1a47f", "commitAfterChange": "a4935bc66ce08e7d2fe2bd7381ba534ed932f1ac", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void javaToNative (Object object, TransferData transferData)", "signatureAfterChange": " public void javaToNative (Object object, TransferData transferData)", "diff": ["+\t", "-\t\tcase UTF8ID: {", "+\t\tcase UTF8ID: ", "+\t\tcase UT16ID: {", "+\t\t\tint encoding = transferData.type == UTF8ID ? OS.kCFStringEncodingUTF8 : OS.kCFStringEncodingUnicode;", "-\t\t\t\tint numChars = OS.CFStringGetBytes(cfstring, range, OS.kCFStringEncodingUTF8, (byte)'?', true, null, 0, size);", "+\t\t\t\tint numChars = OS.CFStringGetBytes(cfstring, range, encoding, (byte)'?', true, null, 0, size);", "-\t\t\t\tnumChars = OS.CFStringGetBytes(cfstring, range, OS.kCFStringEncodingUTF8, (byte)'?', true, buffer, size [0], size);", "+\t\t\t\tnumChars = OS.CFStringGetBytes(cfstring, range, encoding, (byte)'?', true, buffer, size [0], size);", "-\t\t\ttransferData.data = new byte[1][];", "-\t\t\ttransferData.data[0] = buffer;", "-\t\t\ttransferData.result = OS.noErr;", "-\t\t\tbreak;", "-\t\t}", "-\t\tcase UT16ID: {", "-\t\t\tbyte[] buffer = new byte[chars.length * 2];", "-\t\t\tOS.memmove(buffer, chars, buffer.length);"]}], "num": 51929}
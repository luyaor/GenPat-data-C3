{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f25b97e411e75db5e757a77070ad7546", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6404d02eff3998ac77583368836065e3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "e58cf6554e3358e3a82c5cf71e8614e5ec2b587a", "commitAfterChange": "7252c074be7d5fd8626b7fe92856d52e0eef4b48", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": " public boolean post(Event event)", "signatureAfterChange": " public boolean post(Event event)", "diff": ["-\t\t\t\t\tif (vKey == -1) return false;", "+\t\t\t\t}", "+", "+\t\t\t\t/**", "+\t\t\t\t * Feature in Quartz. If the character doesn't map to any valid key, add the Unicode value to the", "+\t\t\t\t * event as a string and post it via key 0.  That will override the keyCode and arrive unmodified in the host app.", "+\t\t\t\t */", "+\t\t\t\tboolean postUnicode = false;", "+\t\t\t\t", "+\t\t\t\tif (vKey == -1) {", "+\t\t\t\t\tvKey = 0;", "+\t\t\t\t\tpostUnicode = true;", "-\t\t\t\treturn OS.CGPostKeyboardEvent((short)0, vKey, type == SWT.KeyDown) == 0;", "+\t\t\t\tint /*long*/ eventRef = OS.CGEventCreateKeyboardEvent(0, vKey, type == SWT.KeyDown);", "+\t\t\t\tif (eventRef != 0) {", "+\t\t\t\t\tif (postUnicode) {", "+\t\t\t\t\t\tchar eventString[] = new char[1];", "+\t\t\t\t\t\teventString[0] = event.character;", "+\t\t\t\t\t\tOS.CGEventKeyboardSetUnicodeString(eventRef, eventString.length, eventString);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.CGEventPost(OS.kCGSessionEventTap, eventRef);", "+\t\t\t\t\tOS.CFRelease(eventRef);", "+\t\t\t\t\treturn true;", "+\t\t\t\t} else {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}", "+\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3dd6075507b2afe321418074541cfc8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "00abb15daf28143fe5dd55e2c1d009d190e4289f", "commitAfterChange": "e3526c0838b6ad7f762ec63857a9bf144378c359", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 89, "signatureBeforeChange": "  void setToolTipText (int widget, String string)", "signatureAfterChange": "  void setToolTipText (int widget, String string)", "diff": ["-\tif (OS.GTK_VERSION >= OS.VERSION (2, 2, 1)) { ", "+\tif (OS.GTK_VERSION >= OS.VERSION (2, 2, 1)) {", "-\tOS.gtk_tooltips_set_tip (tooltipsHandle, widget, buffer, null);", "-\t* fix is force the new tooltip active.", "+\t* fix is force the new tooltip to be active.", "-\tif ((OS.GTK_WIDGET_FLAGS (widget) & OS.GTK_REALIZED) == 0) return;", "-\tif ((OS.GTK_WIDGET_FLAGS (widget) & OS.GTK_VISIBLE) == 0) return;", "-\tint[] x = new int [1], y = new int [1];", "-\tint /*long*/ window = OS.gdk_window_at_pointer (x, y);", "-\tif (window != 0) {", "-\t\tint /*long*/ [] user_data = new int /*long*/ [1];", "-\t\tOS.gdk_window_get_user_data (window, user_data);", "-\t\tif (widget == user_data [0]) {", "-\t\t\tint /*long*/ data = OS.gtk_tooltips_data_get (widget);", "-\t\t\tOS.GTK_TOOLTIPS_SET_ACTIVE (tooltipsHandle, data);", "-\t\t\tOS.gtk_tooltips_set_tip (tooltipsHandle, widget, buffer, null);", "+\tboolean set = true;", "+\tif (tipWindow != 0) {", "+\t\tif ((OS.GTK_WIDGET_FLAGS (widget) & (OS.GTK_REALIZED | OS.GTK_VISIBLE)) != 0) {", "+\t\t\tint [] x = new int [1], y = new int [1];", "+\t\t\tint /*long*/ window = OS.gdk_window_at_pointer (x, y);", "+\t\t\tif (window != 0) {", "+\t\t\t\tint /*long*/ [] user_data = new int /*long*/ [1];", "+\t\t\t\tOS.gdk_window_get_user_data (window, user_data);", "+\t\t\t\tif (widget == user_data [0]) {", "+\t\t\t\t\t/* ", "+\t\t\t\t\t* Feature in GTK.  Calling gtk_tooltips_set_tip() positions and", "+\t\t\t\t\t* shows the tooltip.  If the tooltip is already visible, moving", "+\t\t\t\t\t* it to a new location in the size_allocate signal causes flashing.", "+\t\t\t\t\t* The fix is to hide the tip window in the size_request signal", "+\t\t\t\t\t* and before the new tooltip is forced to be active. ", "+\t\t\t\t\t*/", "+\t\t\t\t\tset = false;", "+\t\t\t\t\tint handler_id = OS.g_signal_connect (tipWindow, OS.size_request, display.sizeRequestProc, shellHandle);", "+\t\t\t\t\tOS.gtk_tooltips_set_tip (tooltipsHandle, widget, buffer, null);", "+\t\t\t\t\tOS.gtk_widget_hide (tipWindow);", "+\t\t\t\t\tint /*long*/ data = OS.gtk_tooltips_data_get (widget);", "+\t\t\t\t\tOS.GTK_TOOLTIPS_SET_ACTIVE (tooltipsHandle, data);", "+\t\t\t\t\tOS.gtk_tooltips_set_tip (tooltipsHandle, widget, buffer, null);", "+\t\t\t\t\tif (handler_id != 0) OS.g_signal_handler_disconnect (tipWindow, handler_id);", "+\t\t\t\t}", "+\t\t\t}", "+\tif (set) OS.gtk_tooltips_set_tip (tooltipsHandle, widget, buffer, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd35bdd833ce8a0f8902aa0e0717e9e5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "baf25e3c2c8b76a3f6345cf103dddf73acb0d2ff", "commitAfterChange": "6eb03009b1d7bf6be6efb26fdaf84b920a2d3e28", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  int gtk_key_press_event (int widget, int event)", "signatureAfterChange": "  int gtk_key_press_event (int widget, int event)", "diff": ["+\tGdkEventKey gdkEvent = new GdkEventKey ();", "+\tOS.memmove (gdkEvent, event, GdkEventKey.sizeof);", "+\tif (gdkEvent.time == lastEventTime) return 0;", "+\tlastEventTime = gdkEvent.time;", "-\t\tOS.g_signal_handlers_block_matched (imHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, handle);", "+\t\tint id = OS.g_signal_lookup (OS.commit, OS.gtk_im_context_get_type ());", "+\t\tint mask =  OS.G_SIGNAL_MATCH_DATA | OS.G_SIGNAL_MATCH_ID;", "+\t\tOS.g_signal_handlers_block_matched (imHandle, mask, id, 0, 0, 0, handle);", "-\t\tOS.g_signal_handlers_unblock_matched (imHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, handle);", "+\t\tOS.g_signal_handlers_unblock_matched (imHandle, mask, id, 0, 0, 0, handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eedbf5f371931c25a05628dbbc959257", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 249, "signatureBeforeChange": " \tint QueryInterface(int iid, int ppvObject)", "signatureAfterChange": " \tint QueryInterface(COMObject comObject, int iid, int ppvObject)", "diff": ["-\tint QueryInterface(int /*long*/ iid, int /*long*/ ppvObject) {", "-\t\tif (iaccessible == null) return COM.CO_E_OBJNOTCONNECTED;", "+\tint QueryInterface(COMObject comObject, int /*long*/ iid, int /*long*/ ppvObject) {", "-\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessible.getAddress()}, OS.PTR_SIZEOF);", "+\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { comObject.getAddress() }, OS.PTR_SIZEOF);", "-\t\tif (COM.IsEqualGUID(guid, COM.IIDIDispatch)) {", "-\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessible.getAddress()}, OS.PTR_SIZEOF);", "-\t\t\tAddRef();", "-\t\t\treturn COM.S_OK;", "-\t\t}", "-", "-\t\tif (COM.IsEqualGUID(guid, COM.IIDIAccessible)) {", "-\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessible.getAddress()}, OS.PTR_SIZEOF);", "+\t\tif (COM.IsEqualGUID(guid, COM.IIDIDispatch) || COM.IsEqualGUID(guid, COM.IIDIAccessible)) {", "+\t\t\tif (objIAccessible == null) createIAccessible();", "+\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIAccessible.getAddress() }, OS.PTR_SIZEOF);", "-\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIEnumVARIANT.getAddress()}, OS.PTR_SIZEOF);", "+\t\t\tif (objIEnumVARIANT == null) createIEnumVARIANT();", "+\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIEnumVARIANT.getAddress() }, OS.PTR_SIZEOF);", "+\t\t", "+\t\tif (COM.IsEqualGUID(guid, COM.IIDIServiceProvider)) {", "+\t\t\tif (objIServiceProvider == null) createIServiceProvider();", "+\t\t\tCOM.MoveMemory(ppvObject, new int /*long*/[] { objIServiceProvider.getAddress() }, OS.PTR_SIZEOF);", "+\t\t\tAddRef();", "+\t\t\treturn COM.S_OK;", "+\t\t}", "-\t\tint /*long*/[] ppv = new int /*long*/[1];", "-\t\tint result = iaccessible.QueryInterface(guid, ppv);", "-\t\tCOM.MoveMemory(ppvObject, ppv, OS.PTR_SIZEOF);", "-\t\treturn result;", "+\t\tint code = queryAccessible2Interfaces(guid, ppvObject);", "+\t\tif (code == COM.S_OK) {", "+\t\t\treturn COM.S_OK;", "+\t\t}", "+", "+\t\tif (iaccessible != null) {", "+\t\t\t/* Forward any other GUIDs to the OS proxy. */", "+\t\t\tint /*long*/[] ppv = new int /*long*/[1];", "+\t\t\tcode = iaccessible.QueryInterface(guid, ppv);", "+\t\t\tCOM.MoveMemory(ppvObject, ppv, OS.PTR_SIZEOF);", "+\t\t\treturn code;", "+\t\t}", "+\t\t", "+\t\treturn COM.E_NOINTERFACE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "864f08da1e2ae9883280c742ece8fa36", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "b29a02fb6db599e79a7210a72b71b3a80e787e43", "commitAfterChange": "e48bf6e899c5ec31f19a95da48a58e6b58329d91", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": " public void setSelection (TreeItem [] items)", "signatureAfterChange": " public void setSelection (TreeItem [] items)", "diff": ["-\tfor (int i = 0; i < items.length; i++) {", "-\t\tif (items[i].isDisposed ()) break;", "-\t\tOS.gtk_tree_selection_select_iter (selection, items[i].handle);", "+\tint i = 0;", "+\tboolean first = true;", "+\twhile (i < items.length) {", "+\t\tTreeItem item = items [i];", "+\t\tif (item == null) continue;", "+\t\tif (item.isDisposed ()) break;", "+\t\tif (first) {", "+\t\t\tint path = OS.gtk_tree_model_get_path (modelHandle, item.handle);", "+\t\t\tshowItem (path);", "+\t\t\tOS.gtk_tree_view_set_cursor (handle, path, 0, false);", "+\t\t\tOS.gtk_tree_path_free (path);", "+\t\t\tfirst = false;", "+\t\t}", "+\t\tOS.gtk_tree_selection_select_iter (selection, item.handle);", "+\t\ti++;", "-\tif (items.length > 0 && items [0] != null) showItem (items [0]);", "+\tif (i < items.length) error (SWT.ERROR_INVALID_ARGUMENT);"]}], "num": 28701}
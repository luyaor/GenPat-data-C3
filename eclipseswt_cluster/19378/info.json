{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "989e1be014757d79e62cae2f6da71d0a", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe752229bbf9ac99618921f220d64be7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "2b4ed847bbf411d7d476068dc7608bc2d22aa974", "commitAfterChange": "e43d2e72dc7e8d603e11a72a3ea37d9aec7b8121", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["+\t\t/*", "+\t\t * Try to load the various profile libraries until one is found that loads successfully:", "+\t\t * - mozilla14profile/mozilla14profile-gcc should succeed for mozilla 1.4 - 1.6", "+\t\t * - mozilla17profile/mozilla17profile-gcc should succeed for mozilla 1.7.x and firefox", "+\t\t */", "+\t\ttry {", "+\t\t\tLibrary.loadLibrary (\"swt-mozilla14profile\"); //$NON-NLS-1$", "+\t\t\tusingProfile = true;", "+\t\t} catch (UnsatisfiedLinkError e1) {", "+\t\t\ttry {", "+\t\t\t\tLibrary.loadLibrary (\"swt-mozilla17profile\"); //$NON-NLS-1$", "+\t\t\t\tusingProfile = true;", "+\t\t\t} catch (UnsatisfiedLinkError e2) {", "+\t\t\t\ttry {", "+\t\t\t\t\tLibrary.loadLibrary (\"swt-mozilla14profile-gcc3\"); //$NON-NLS-1$", "+\t\t\t\t\tusingProfile = true;", "+\t\t\t\t} catch (UnsatisfiedLinkError e3) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tLibrary.loadLibrary (\"swt-mozilla17profile-gcc3\"); //$NON-NLS-1$", "+\t\t\t\t\t\tusingProfile = true;", "+\t\t\t\t\t} catch (UnsatisfiedLinkError e4) {", "+\t\t\t\t\t\t/* ", "+\t\t\t\t\t\t* fail silently, the Browser will still work without profile support", "+\t\t\t\t\t\t* but will abort any attempts to navigate to HTTPS pages", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+", "-\t\tnsEmbedString path = new nsEmbedString(mozillaPath);", "-\t\tint rc = XPCOM.NS_NewLocalFile(path.getAddress(), true, retVal);", "-\t\tpath.dispose();", "+\t\tnsEmbedString pathString = new nsEmbedString(mozillaPath);", "+\t\tint rc = XPCOM.NS_NewLocalFile(pathString.getAddress(), true, retVal);", "+\t\tpathString.dispose();", "+\t\t/* specify the user profile directory */", "+\t\tif (usingProfile) {", "+\t\t\tbuffer = Converter.wcsToMbcs(null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true);", "+\t\t\trc = serviceManager.GetServiceByContractID(buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+", "+\t\t\tnsIDirectoryService directoryService = new nsIDirectoryService(result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\trc = directoryService.QueryInterface(nsIProperties.NS_IPROPERTIES_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\t\t\tdirectoryService.Release();", "+", "+\t\t\tnsIProperties properties = new nsIProperties(result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tbuffer = Converter.wcsToMbcs(null, XPCOM.NS_APP_APPLICATION_REGISTRY_DIR, true);", "+\t\t\trc = properties.Get(buffer, nsIFile.NS_IFILE_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\t\t\tproperties.Release();", "+", "+\t\t\tnsIFile profileDir = new nsIFile(result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tint /*long*/ path = XPCOM.nsEmbedCString_new();", "+\t\t\trc = profileDir.GetNativePath(path);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tprofileDir.Release(); //", "+", "+\t\t\tint length = XPCOM.nsEmbedCString_Length(path);", "+\t\t\tptr = XPCOM.nsEmbedCString_get(path);", "+\t\t\tbuffer = new byte [length];", "+\t\t\tXPCOM.memmove(buffer, ptr, length);", "+\t\t\tXPCOM.nsEmbedCString_delete(path);", "+\t\t\tString string = new String(Converter.mbcsToWcs(null, buffer)) + PROFILE_DIR; ", "+\t\t\tpathString = new nsEmbedString(string);", "+\t\t\trc = XPCOM.NS_NewLocalFile(pathString.getAddress(), true, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_ERROR_NULL_POINTER);", "+\t\t\tpathString.dispose(); //", "+", "+\t\t\tprofileDir = new nsIFile(result[0]);", "+\t\t\tresult[0] = 0;", "+", "+\t\t\trc = XPCOM.NS_NewProfileDirServiceProvider(true, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+", "+\t\t\tfinal int /*long*/ dirServiceProvider = result[0];", "+\t\t\tresult[0] = 0;", "+\t\t\trc = XPCOM.ProfileDirServiceProvider_Register(dirServiceProvider);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\trc = XPCOM.ProfileDirServiceProvider_SetProfileDir(dirServiceProvider, profileDir.getAddress());", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+", "+\t\t\tgetDisplay().addListener(SWT.Dispose, new Listener() {", "+\t\t\t\tpublic void handleEvent(Event e) {", "+\t\t\t\t\tXPCOM.ProfileDirServiceProvider_Shutdown(dirServiceProvider);", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+", "-\t\t * As a result of not using profiles, the user's locale and charset default", "-\t\t * to en_us and iso-8859-1, which are not the correct values for users in", "-\t\t * other locales.  The fix for this is to set mozilla's locale and charset", "+\t\t * As a result of using a common profile (or none at all), the user cannot specify", "+\t\t * their locale and charset.  The fix for this is to set mozilla's locale and charset"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d96fd82bfd049dcac39eacf50259af6c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/gtk/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "7f8aca4cba8b9e924966119fe0633e7144896cb4", "commitAfterChange": "2b4ed847bbf411d7d476068dc7608bc2d22aa974", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["+\t\t/*", "+\t\t * Try to load the various profile libraries until one is found that loads successfully:", "+\t\t * - mozilla14profile/mozilla14profile-gcc should succeed for mozilla 1.4 - 1.6", "+\t\t * - mozilla17profile/mozilla17profile-gcc should succeed for mozilla 1.7.x and firefox", "+\t\t */", "+\t\ttry {", "+\t\t\tLibrary.loadLibrary (\"swt-mozilla14profile\"); //$NON-NLS-1$", "+\t\t\tusingProfile = true;", "+\t\t} catch (UnsatisfiedLinkError e1) {", "+\t\t\ttry {", "+\t\t\t\tLibrary.loadLibrary (\"swt-mozilla17profile\"); //$NON-NLS-1$", "+\t\t\t\tusingProfile = true;", "+\t\t\t} catch (UnsatisfiedLinkError e2) {", "+\t\t\t\ttry {", "+\t\t\t\t\tLibrary.loadLibrary (\"swt-mozilla14profile-gcc3\"); //$NON-NLS-1$", "+\t\t\t\t\tusingProfile = true;", "+\t\t\t\t} catch (UnsatisfiedLinkError e3) {", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tLibrary.loadLibrary (\"swt-mozilla17profile-gcc3\"); //$NON-NLS-1$", "+\t\t\t\t\t\tusingProfile = true;", "+\t\t\t\t\t} catch (UnsatisfiedLinkError e4) {", "+\t\t\t\t\t\t/* ", "+\t\t\t\t\t\t* fail silently, the Browser will still work without profile support", "+\t\t\t\t\t\t* but will abort any attempts to navigate to HTTPS pages", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+", "-\t\tnsEmbedString path = new nsEmbedString(mozillaPath);", "-\t\tint rc = XPCOM.NS_NewLocalFile(path.getAddress(), true, retVal);", "-\t\tpath.dispose();", "+\t\tnsEmbedString pathString = new nsEmbedString(mozillaPath);", "+\t\tint rc = XPCOM.NS_NewLocalFile(pathString.getAddress(), true, retVal);", "+\t\tpathString.dispose();", "+\t\t/* specify the user profile directory */", "+\t\tif (usingProfile) {", "+\t\t\tbuffer = Converter.wcsToMbcs(null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true);", "+\t\t\trc = serviceManager.GetServiceByContractID(buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+", "+\t\t\tnsIDirectoryService directoryService = new nsIDirectoryService(result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\trc = directoryService.QueryInterface(nsIProperties.NS_IPROPERTIES_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\t\t\tdirectoryService.Release();", "+", "+\t\t\tnsIProperties properties = new nsIProperties(result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tbuffer = Converter.wcsToMbcs(null, XPCOM.NS_APP_APPLICATION_REGISTRY_DIR, true);", "+\t\t\trc = properties.Get(buffer, nsIFile.NS_IFILE_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\t\t\tproperties.Release();", "+", "+\t\t\tnsIFile profileDir = new nsIFile(result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tint /*long*/ path = XPCOM.nsEmbedCString_new();", "+\t\t\trc = profileDir.GetNativePath(path);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tprofileDir.Release(); //", "+", "+\t\t\tint length = XPCOM.nsEmbedCString_Length(path);", "+\t\t\tptr = XPCOM.nsEmbedCString_get(path);", "+\t\t\tbuffer = new byte [length];", "+\t\t\tXPCOM.memmove(buffer, ptr, length);", "+\t\t\tXPCOM.nsEmbedCString_delete(path);", "+\t\t\tString string = new String(Converter.mbcsToWcs(null, buffer)) + PROFILE_DIR; ", "+\t\t\tpathString = new nsEmbedString(string);", "+\t\t\trc = XPCOM.NS_NewLocalFile(pathString.getAddress(), true, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_ERROR_NULL_POINTER);", "+\t\t\tpathString.dispose(); //", "+", "+\t\t\tprofileDir = new nsIFile(result[0]);", "+\t\t\tresult[0] = 0;", "+", "+\t\t\trc = XPCOM.NS_NewProfileDirServiceProvider(true, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+", "+\t\t\tfinal int /*long*/ dirServiceProvider = result[0];", "+\t\t\tresult[0] = 0;", "+\t\t\trc = XPCOM.ProfileDirServiceProvider_Register(dirServiceProvider);", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\t\trc = XPCOM.ProfileDirServiceProvider_SetProfileDir(dirServiceProvider, profileDir.getAddress());", "+\t\t\tif (rc != XPCOM.NS_OK) error(rc);", "+", "+\t\t\tgetDisplay().addListener(SWT.Dispose, new Listener() {", "+\t\t\t\tpublic void handleEvent(Event e) {", "+\t\t\t\t\tXPCOM.ProfileDirServiceProvider_Shutdown(dirServiceProvider);", "+\t\t\t\t}", "+\t\t\t});", "+\t\t}", "+", "-\t\t * As a result of not using profiles, the user's locale and charset default", "-\t\t * to en_us and iso-8859-1, which are not the correct values for users in", "-\t\t * other locales.  The fix for this is to set mozilla's locale and charset", "+\t\t * As a result of using a common profile (or none at all), the user cannot specify", "+\t\t * their locale and charset.  The fix for this is to set mozilla's locale and charset"]}], "num": 19378}
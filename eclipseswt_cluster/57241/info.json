{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "35426d3436303b7d26610e824971a76c", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46733853ffb68990846ba923e4d50106", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "613386a136aed7f7be85acd46a7cab744bbae94d", "commitAfterChange": "e144c0287be1ac0d08cd8310d65398d20b566a1f", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r void initStyleCombo(FontExtStyles fontExtStyles)", "signatureAfterChange": "\r void initStyleCombo ()", "diff": ["- */\r", "-void initStyleCombo(FontExtStyles fontExtStyles) {\r", "-\tCombo styleCombo = getStyleCombo();\r", "-\tString previousStyle = styleCombo.getText();\r", "-\tstyleCombo.removeAll();\r", "-\tEnumeration styleEnum = fontExtStyles.getStyles(getExtStyleCombo().getText()).elements();\r", "-\twhile (styleEnum.hasMoreElements())\r", "-\t\tstyleCombo.add((String)styleEnum.nextElement());\r", "-\r", "-\tint selectionIndex = styleCombo.indexOf(previousStyle);\r", "-\tif (selectionIndex == -1)\r", "-\t\tselectionIndex = styleCombo.indexOf(DEFAULT_STYLE);\r", "-\tif (selectionIndex == -1)\t// last resort\r", "-\t\tselectionIndex = 0;\r", "-\r", "-\tstyleCombo.select(selectionIndex);\r", "+ */\r", "+void initStyleCombo () {\r", "+\tString oldSelect = fontStyleCombo.getText ();\r", "+\tfontStyleCombo.removeAll ();\r", "+\t\r", "+\tString characterSet = charSetCombo.getText ();\r", "+\tString faceName = faceNameCombo.getText ();\r", "+\tString extStyle = extStyleCombo.getText ();\r", "+\tint size = DEFAULT_SIZE;\r", "+\ttry {\r", "+\t\tsize = Integer.valueOf (fontSizeCombo.getText ()).intValue ();\r", "+\t} catch (NumberFormatException e) {\r", "+\t\t/*\r", "+\t\t * This block is purposely left empty since a default\r", "+\t\t * value is already specified above.\r", "+\t\t */\r", "+\t}\r", "+\tHashtable styles = getStyles (characterSet, faceName, extStyle, size);\r", "+\tif (styles == null) return;\r", "+\tsetItemsSorted (fontStyleCombo, styles);\r", "+\t\r", "+\tint selectIndex = fontStyleCombo.indexOf (oldSelect);\r", "+\tif (selectIndex == -1) {\r", "+\t\tselectIndex = fontStyleCombo.indexOf (String.valueOf (DEFAULT_STYLE));\r", "+\t}\r", "+\tselectIndex = Math.max (0, selectIndex);\r", "+\tfontStyleCombo.select (selectIndex);\r", "+\tfontStyleCombo.setData (new Integer (selectIndex));\r", "+\tfontStyleCombo.select (Math.max (0, selectIndex));\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f2ddb0a8489b8ab4a49f048f33c5dde4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "613386a136aed7f7be85acd46a7cab744bbae94d", "commitAfterChange": "e144c0287be1ac0d08cd8310d65398d20b566a1f", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 22, "signatureBeforeChange": "\r void initSizeCombo(FontExtStyles fontExtStyles)", "signatureAfterChange": "\r void initSizeCombo ()", "diff": ["- */\r", "-void initSizeCombo(FontExtStyles fontExtStyles) {\r", "-\tCombo sizeCombo = getSizeCombo();\r", "-\tString previousSize = sizeCombo.getText();\r", "-\tsizeCombo.removeAll();\r", "-\r", "-\tint selectionIndex = -1;\r", "-\r", "-\tif (fontExtStyles.isScalable()) {\r", "-\t\tsizeCombo.setItems(SCALABLE_SIZES);\r", "-\t\tselectionIndex = sizeCombo.indexOf(String.valueOf(DEFAULT_SIZE));\r", "-\t}\r", "-\telse {\r", "-\t\tVector sizes = fontExtStyles.getSizes(getExtStyleCombo().getText());\r", "-\t\tfor (int i = 0; i < sizes.size(); i++) {\r", "-\t\t\tInteger size = (Integer) sizes.elementAt(i);\r", "-\t\t\tsizeCombo.add(size.toString());\r", "-\t\t\t// select the largest height if there's no font\r", "-\t\t\t// size that is at least as high as SelectionSize\r", "-\t\t\tif (size.intValue() >= DEFAULT_SIZE && selectionIndex == -1)\r", "-\t\t\t\tselectionIndex = i;\r", "-\t\t}\r", "-\t}\r", "-\r", "-\tint indexOfPreviousSelection = sizeCombo.indexOf(previousSize);\r", "-\tif (indexOfPreviousSelection != -1)\r", "-\t\tselectionIndex = indexOfPreviousSelection;\r", "-\r", "-\tif (selectionIndex == -1)\t// last resort case, should not happen\r", "-\t\tselectionIndex = sizeCombo.getItemCount() - 1;\t\t\t\r", "-\r", "-\tsizeCombo.select(selectionIndex);\t\r", "-}\r", "+ */\r", "+void initSizeCombo () {\r", "+\tString oldSelect = fontSizeCombo.getText ();\r", "+\tfontSizeCombo.removeAll ();\r", "+\t\r", "+\tString characterSet = charSetCombo.getText ();\r", "+\tString faceName = faceNameCombo.getText ();\r", "+\tString extStyle = extStyleCombo.getText ();\r", "+\tHashtable sizes = getSizes (characterSet, faceName, extStyle);\r", "+\tif (sizes == null) return;\r", "+\tif (sizes.get (SCALABLE_KEY) == null) {\r", "+\t\t/*\r", "+\t\t * Font is not scalable so just present the provided sizes.\r", "+\t\t */\r", "+\t\tsetSizeItemsSorted (sizes.keys ());\r", "+\t} else {\r", "+\t\t/*\r", "+\t\t * Font is scalable so present the provided sizes and scalable\r", "+\t\t * sizes for selection.\r", "+\t\t */\r", "+\t\tVector allSizes = new Vector ();\r", "+\t\t/*\r", "+\t\t * Add the scalable sizes.\r", "+\t\t */\r", "+\t\tfor (int i = 0; i < SCALABLE_SIZES.length; i++) {\r", "+\t\t\tallSizes.addElement (new Integer (SCALABLE_SIZES [i]));\r", "+\t\t}\r", "+\t\t/*\r", "+\t\t * Add the provided sizes.\r", "+\t\t */\r", "+\t\tEnumeration providedSizes = sizes.keys ();\r", "+\t\twhile (providedSizes.hasMoreElements ()) {\r", "+\t\t\tInteger size = (Integer) providedSizes.nextElement ();\r", "+\t\t\tif (!size.equals (SCALABLE_KEY) && !allSizes.contains (size)) {\r", "+\t\t\t\tallSizes.addElement (size);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tsetSizeItemsSorted (allSizes.elements ());\r", "+\t}\r", "+\t\r", "+\tint selectIndex = fontSizeCombo.indexOf (oldSelect);\r", "+\tif (selectIndex == -1) {\r", "+\t\tselectIndex = fontSizeCombo.indexOf (String.valueOf (DEFAULT_SIZE));\r", "+\t}\r", "+\tselectIndex = Math.max (0, selectIndex);\r", "+\tfontSizeCombo.select (selectIndex);\r", "+\tfontSizeCombo.setData (new Integer (selectIndex));\r", "+\tinitStyleCombo ();\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d41bebcf699f9712eb520c1b58e9feee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "613386a136aed7f7be85acd46a7cab744bbae94d", "commitAfterChange": "e144c0287be1ac0d08cd8310d65398d20b566a1f", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r FontData getSelectionFontData()", "signatureAfterChange": "\r FontData getSelectionFontData ()", "diff": ["-FontData getSelectionFontData() {\r", "-\tString fontSize = getSizeCombo().getText();\r", "-\tString style = getStyleCombo().getText();\r", "-\tString extStyle = getExtStyleCombo().getText();\r", "-\tint styleBits = SWT.NULL;\r", "-\tInteger fontSizeInt = null;\r", "-\tFontData fontData;\r", "-\r", "-\tif (style.indexOf(FontExtStyles.BOLD) != -1) {\r", "-\t\tstyleBits |= SWT.BOLD;\r", "-\t}\r", "-\tif (style.indexOf(FontExtStyles.ITALIC) != -1) {\r", "-\t\tstyleBits |= SWT.ITALIC;\r", "-\t}\r", "+FontData getSelectionFontData () {\r", "+\tString charSetName = charSetCombo.getText ();\r", "+\tString faceName = faceNameCombo.getText ();\r", "+\tString extStyle = extStyleCombo.getText ();\r", "+\tint size = DEFAULT_SIZE;\r", "-\t\tfontSizeInt = Integer.valueOf(fontSize);\r", "+\t\tsize = Integer.valueOf (fontSizeCombo.getText ()).intValue ();\r", "+\t} catch (NumberFormatException e) {\r", "+\t\t/*\r", "+\t\t * This block is purposely left empty since a default\r", "+\t\t * value is already specified above.\r", "+\t\t */\r", "-\tcatch (NumberFormatException exception) {}\r", "-\tif (fontSizeInt != null) {\r", "-\t\tfontData = new FontData(\r", "-\t\t\tgetSelectedFaceName(),\r", "-\t\t\tfontSizeInt.intValue(),\r", "-\t\t\tstyleBits);\r", "+\tString style = fontStyleCombo.getText ();\r", "+\tFontData result = getFontData (charSetName, faceName, extStyle, size, style);\r", "+\r", "+\tif (result == null) {\r", "+\t\t/*\r", "+\t\t* One or more of the dialog's widgets contain custom typed values.\r", "+\t\t* Create a FontData that mirrors these values so that the Font created\r", "+\t\t* below will try to find the best match.\r", "+\t\t*/\r", "+\t\tresult = new FontData ();\r", "+\t\tresult.characterSetRegistry = charSetName;\r", "+\t\tresult.setName(faceName);\r", "+\t\tresult.addStyle = extStyle;\r", "+\t\tresult.weight = style;\r", "-\telse {\r", "-\t\tfontData = new FontData();\r", "-\t\tfontData.setName(getSelectedFaceName());\r", "-\t\tfontData.setStyle(styleBits);\r", "-\t}\r", "-\tif (extStyle.length() > 0) {\r", "-\t\tfontData.addStyle = extStyle;\r", "-\t}\r", "-\tfontData.characterSetRegistry = getSelectedCharSet();\r", "-\tfontData.foundry = getSelectedFoundry();\r", "-\treturn fontData;\r", "+\tresult.setHeight (size);\r", "+\treturn result;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62bdc5eba8e308223d3bb7fb053b5fcd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "e1128c0d5e9e7b8b4e65a3a4aaf19424d2b37dc9", "commitAfterChange": "2ad35a79e1da2fe8318bbce6af2fdb11b9910104", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " void initSizeCombo ()", "signatureAfterChange": " void initSizeCombo ()", "diff": ["-\tif (sizes == null) return;\r", "-\tif (sizes.get (SCALABLE_KEY) == null) {\r", "-\t\t/*\r", "-\t\t * Font is not scalable so just present the provided sizes.\r", "-\t\t */\r", "-\t\tsetSizeItemsSorted (sizes.keys ());\r", "-\t} else {\r", "-\t\t/*\r", "-\t\t * Font is scalable so present the provided sizes and scalable\r", "-\t\t * sizes for selection.\r", "-\t\t */\r", "-\t\tVector allSizes = new Vector ();\r", "-\t\t/*\r", "-\t\t * Add the scalable sizes.\r", "-\t\t */\r", "-\t\tfor (int i = 0; i < SCALABLE_SIZES.length; i++) {\r", "-\t\t\tallSizes.addElement (Integer.valueOf (SCALABLE_SIZES [i]));\r", "-\t\t}\r", "-\t\t/*\r", "-\t\t * Add the provided sizes.\r", "-\t\t */\r", "-\t\tEnumeration providedSizes = sizes.keys ();\r", "-\t\twhile (providedSizes.hasMoreElements ()) {\r", "-\t\t\tInteger size = (Integer) providedSizes.nextElement ();\r", "-\t\t\tif (!size.equals (SCALABLE_KEY) && !allSizes.contains (size)) {\r", "-\t\t\t\tallSizes.addElement (size);\r", "+\tif (sizes != null) {\r", "+\t\tif (sizes.get (SCALABLE_KEY) == null) {\r", "+\t\t\t/*\r", "+\t\t\t * Font is not scalable so just present the provided sizes.\r", "+\t\t\t */\r", "+\t\t\tsetSizeItemsSorted (sizes.keys ());\r", "+\t\t} else {\r", "+\t\t\t/*\r", "+\t\t\t * Font is scalable so present the provided sizes and scalable\r", "+\t\t\t * sizes for selection.\r", "+\t\t\t */\r", "+\t\t\tVector allSizes = new Vector ();\r", "+\t\t\t/*\r", "+\t\t\t * Add the scalable sizes.\r", "+\t\t\t */\r", "+\t\t\tfor (int i = 0; i < SCALABLE_SIZES.length; i++) {\r", "+\t\t\t\tallSizes.addElement (Integer.valueOf (SCALABLE_SIZES [i]));\r", "+\t\t\t/*\r", "+\t\t\t * Add the provided sizes.\r", "+\t\t\t */\r", "+\t\t\tEnumeration providedSizes = sizes.keys ();\r", "+\t\t\twhile (providedSizes.hasMoreElements ()) {\r", "+\t\t\t\tInteger size = (Integer) providedSizes.nextElement ();\r", "+\t\t\t\tif (!size.equals (SCALABLE_KEY) && !allSizes.contains (size)) {\r", "+\t\t\t\t\tallSizes.addElement (size);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tsetSizeItemsSorted (allSizes.elements ());\r", "-\t\tsetSizeItemsSorted (allSizes.elements ());\r"]}], "num": 57241}
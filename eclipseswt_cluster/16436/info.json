{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0116a70172fe3067206ae3d68b4d7249", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a2cae986c390262a820c861347ba1659", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TabFolder.java", "commitBeforeChange": "63b1a2d36990c1f8e8816e7709fc0b09bed89050", "commitAfterChange": "7a26d49f7fcf65bf8625393f1af4a67b482a7c35", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \r void layoutCurrent()", "signatureAfterChange": "\r \r boolean setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "diff": ["-\r", "-void layoutCurrent() {\r", "-\tint index=getSelectionIndex();\r", "-\tif (index==-1) return;\r", "-\tControl control = items[index].control;\r", "-\tif (control==null) return;\r", "-\tif (control.isDisposed()) return;\r", "-\tcontrol.setBounds(getClientArea());\r", "+boolean setBounds (int x, int y, int width, int height, boolean move, boolean resize) {\r", "+\tboolean changed = super.setBounds (x, y, width, height, move, resize);\r", "+\tif (changed && resize) {\r", "+\t\tint index = getSelectionIndex ();\r", "+\t\tif (index != -1) {\r", "+\t\t\tTabItem item = items [index];\r", "+\t\t\tControl control = item.control;\r", "+\t\t\tif (control != null && !control.isDisposed ()) {\r", "+\t\t\t\tcontrol.setBounds (getClientArea ());\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\treturn changed;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4a1693c7648162361b17e35c92d7010", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "464ae518b2b80f3ac0591357965d95bb99367e4e", "commitAfterChange": "4674a8fef234abb8e185ac0b8bce479e515c8a1a", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 106, "signatureBeforeChange": " public void setBounds (Rectangle rect)", "signatureAfterChange": "  int setBounds (int x, int y, int width, int height, boolean move, boolean resize, boolean events)", "diff": ["+", "+int setBounds (int x, int y, int width, int height, boolean move, boolean resize, boolean events) {", "+\treturn setBounds (topHandle (), x, y, width, height, move, resize, events);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a383228e2ea3fb16eb95fc24202769e9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/TabFolder.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 21, "signatureBeforeChange": " void handleResize(int hndl, MacRect bounds)", "signatureAfterChange": "  int setBounds (int c, int x, int y, int width, int height, boolean move, boolean resize, boolean events)", "diff": ["+int setBounds (int c, int x, int y, int width, int height, boolean move, boolean resize, boolean events) {", "+\tint result = super.setBounds(c, x, y, width, height, move, resize, events);", "+\tif ((result & RESIZED) != 0) {", "+\t\tint index = OS.GetControl32BitValue (handle) - 1;", "+\t\tif (index != -1) {", "+\t\t\tTabItem item = items [index];", "+\t\t\tControl control = item.control;", "+\t\t\tif (control != null && !control.isDisposed ()) {", "+\t\t\t\tcontrol.setBounds (getClientArea ());", "+\t\t\t}", "+\t\t}", "+\t}", "+\treturn result;", "+}", "- */", "-void handleResize(int hndl, MacRect bounds) {", "-", "-\tbounds.inset(MARGIN, 0, MARGIN, MARGIN);", "-\tsuper.handleResize(hndl, bounds);", "-\t", "-\tif (handle != 0) {", "-\t\tint selectedIndex= OS.GetControl32BitValue(handle)-1;", "-\t\tif (selectedIndex != -1) {", "-\t\t\tControl control = items[selectedIndex].getControl();", "-\t\t\tif (control != null && !control.isDisposed()) {", "-\t\t\t\tcontrol.setBounds(getClientArea());", "-\t\t\t}", "-\t\t}", "-\t}", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52d7cecbc4167ec54bdacaff7ff07719", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Scrollable.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": " \tvoid handleResize(int handle, MacRect bounds)", "signatureAfterChange": "  int setBounds (int control, int x, int y, int width, int height, boolean move, boolean resize, boolean events)", "diff": ["+", "+int setBounds (int control, int x, int y, int width, int height, boolean move, boolean resize, boolean events) {", "+\tint result = super.setBounds(control, x, y, width, height, move, resize, false);", "+\tif ((result & MOVED) != 0) {", "+\t\tif (events) sendEvent (SWT.Move);", "+\tif ((result & RESIZED) != 0) {", "+\t\tif (control == scrolledHandle) layoutControl ();", "+\t\tif (events) sendEvent (SWT.Resize);", "+\t}", "+\treturn result;", "-\t */", "-\tvoid handleResize(int handle, MacRect bounds) {", "-\t\tsuper.handleResize(handle, bounds);", "-\t\trelayout123();", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "88d2cbd6fe72b267ad711f6860c44db7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT PI/cocoa/org/eclipse/swt/internal/cocoa/NSBitmapImageRep.java", "commitBeforeChange": "00d9a929233cc0e4c7aa22a7ff5b7562dd581371", "commitAfterChange": "82a169db2ad1731cac41b8c9102e1999ac7a1ef7", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void getBitmapDataPlanes(int data)", "signatureAfterChange": "  public NSBitmapImageRep initWithBitmapDataPlanes(int planes, int width, int height, int bps, int spp, boolean alpha, boolean isPlanar, NSString colorSpaceName, int rBytes, int pBits)", "diff": ["-", "-public void getBitmapDataPlanes(int data) {", "-\tOS.objc_msgSend(this.id, OS.sel_getBitmapDataPlanes_1, data);", "-}", "+public NSBitmapImageRep initWithBitmapDataPlanes(int planes, int width, int height, int bps, int spp, boolean alpha, boolean isPlanar, NSString colorSpaceName, int rBytes, int pBits) {", "+\tint result = OS.objc_msgSend(this.id, OS.sel_initWithBitmapDataPlanes_pixelsWide_pixelsHigh_bitsPerSample_samplesPerPixel_hasAlpha_isPlanar_colorSpaceName_bytesPerRow_bitsPerPixel_, planes, width, height, bps, spp, alpha, isPlanar, colorSpaceName != null ? colorSpaceName.id : 0, rBytes, pBits);", "+\treturn result == this.id ? this : (result != 0 ? new NSBitmapImageRep(result) : null);"]}], "num": 16436}
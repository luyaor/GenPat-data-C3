{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68d88a072b0b9d6f2c600ca75c5cb663", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9c9b0c26afaaeb803617148add8d7ec8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 48, "signatureBeforeChange": " void headerMouseMove(Event event)", "signatureAfterChange": " void headerOnMouseMove (Event event)", "diff": ["+}", "+void headerOnMouseMove (Event event) {", "+\tif (resizeColumn == null) {", "+\t\t/* not currently resizing a column */", "+\t\tfor (int i = 0; i < columns.length; i++) {", "+\t\t\tTableColumn column = columns [i]; ", "+\t\t\tint x = column.getX () + column.width;", "+\t\t\tif (Math.abs (x - event.x) <= TOLLERANCE_COLUMNRESIZE) {", "+\t\t\t\tif (column.resizable) {", "+\t\t\t\t\tsetCursor (display.getSystemCursor (SWT.CURSOR_SIZEWE));", "+\t\t\t\t} else {", "+\t\t\t\t\tsetCursor (null);", "+\t\t\t\t}", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t}", "+\t\tsetCursor (null);", "+\t", "+\t/* currently resizing a column */", "+\t", "+\t/* don't allow the resize x to move left of the column's x position */", "+\tif (event.x <= resizeColumn.getX ()) return;", "+", "+\t/* redraw the resizing line at its new location */", "+\tGC gc = new GC (this);", "+\tint lineHeight = getClientArea ().height;", "+\tredraw (resizeColumnX - 1, 0, 1, lineHeight, false);", "+\tresizeColumnX = event.x;", "+\tgc.drawLine (resizeColumnX - 1, 0, resizeColumnX - 1, lineHeight);", "+\tgc.dispose ();", "+\t", "+}", "- */", "-void headerMouseMove(Event event) {", "-\tif (isColumnResizeStarted() == false) {\t\t\t\t// only check whether cursor is in resize", "-\t\tsetColumnResizeCursor(isColumnResize(event));\t// area if no resize operation is in progress", "-\t}", "-\telse ", "-\tif (event.x >= getResizeColumn().getBounds().x) {", "-\t\tdrawColumnResizeLine(event.x);", "-\t\tupdate();\t\t\t\t\t\t\t\t\t\t// looks better if resize line is drawn immediately", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d86571d6f99a8992923a1e82f9dff2c5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d6b025633a28920ae40301a1b987f0b923d26e74", "commitAfterChange": "6e89f26f4d6cf8c990840a7f12e701138a427091", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  \tprivate void focus(boolean clip)", "signatureAfterChange": "  \tprivate boolean focus(boolean doClip, MacRect bounds)", "diff": ["-\tprivate void focus(boolean clip) {", "-\t", "+\tprivate boolean focus(boolean doClip, MacRect bounds) {", "+\t\t", "+\t\tif (fIsFocused && !fPendingClip) {", "+\t\t\treturn true;", "+\t\t}", "+", "-\t\tfOffsetX= 0;", "-\t\tfOffsetY= 0;", "+\t\tif (!doClip)", "+\t\t\treturn true;", "+\t\t", "+\t\tfOffsetX= fOffsetY= 0;", "+", "+\t\t// set origin of port using drawable bounds", "+\t\tif (data.controlHandle != 0) {", "+\t\t\tOS.GetControlBounds(data.controlHandle, fRect.getData());", "+\t\t\tfOffsetX= (short)fRect.getX();", "+\t\t\tfOffsetY= (short)fRect.getY();", "+\t\t\tOS.SetOrigin((short)-fOffsetX, (short)-fOffsetY);", "+\t\t}", "+\t\t// save clip region ", "+\t\tOS.GetClip(fSaveClip);", "+\t\t", "+\t\t// calculate new clip based on the controls bound and GC clipping region", "+\t\tif (data.controlHandle != 0) {", "+\t\t\t", "+\t\t\tint result= OS.NewRgn();", "+\t\t\tMacUtil.getVisibleRegion(data.controlHandle, result, true);", "+\t\t\tOS.OffsetRgn(result, (short)-fRect.getX(), (short)-fRect.getY());", "+", "+\t\t\t// clip against damage ", "+\t\t\tif (fDamageRgn != 0) {", "+\t\t\t\tint dRgn= OS.NewRgn();", "+\t\t\t\tOS.CopyRgn(fDamageRgn, dRgn);", "+\t\t\t\tOS.OffsetRgn(dRgn, (short)-fRect.getX(), (short)-fRect.getY());", "+\t\t\t\tOS.SectRgn(result, dRgn, result);", "+\t\t\t}", "+\t\t\t", "+\t\t\t// clip against GC clipping region", "+\t\t\tif (data.clipRgn != 0) {", "+\t\t\t\tOS.SectRgn(result, data.clipRgn, result);", "+\t\t\t}", "+\t\t\t\t", "+\t\t\tOS.SetClip(result);", "+\t\t\tif (bounds != null)", "+\t\t\t\tOS.GetRegionBounds(result, bounds.getData());", "+\t\t\tOS.DisposeRgn(result);", "+\t\t\t", "+\t\t} else {", "+\t\t\t// clip against GC clipping region", "+\t\t\tif (data.clipRgn != 0) {", "+\t\t\t\tOS.SetClip(data.clipRgn);", "+\t\t\t\tif (bounds != null)", "+\t\t\t\t\tOS.GetRegionBounds(data.clipRgn, bounds.getData());", "+\t\t\t} else {", "+\t\t\t\tif (bounds != null)", "+\t\t\t\t\tbounds.set(0, 0, 0x8fff, 0x8fff);", "+\t\t\t}", "+\t\t}", "+\t\tfPendingClip= false;", "+\t\t", "+\t\treturn true;", "+\t}", "-", "-\t\tif (clip) {", "-\t\t\t// set origin of port using drawable bounds", "-\t\t\tif (data.controlHandle != 0) {", "-\t\t\t\tOS.GetControlBounds(data.controlHandle, fRect.getData());", "-\t\t\t\tfOffsetX= (short)fRect.getX();", "-\t\t\t\tfOffsetY= (short)fRect.getY();", "-\t\t\t\tOS.SetOrigin((short)-fOffsetX, (short)-fOffsetY);", "-\t\t\t}", "-\t\t\t// save clip region ", "-\t\t\tOS.GetClip(fSaveClip);", "-\t\t\t", "-\t\t\t// calculate new clip based on the controls bound and GC clipping region", "-\t\t\tif (data.controlHandle != 0) {", "-\t\t\t\tif (fClipCache == 0) {", "-\t\t\t\t\tfClipCache= OS.NewRgn();", "-\t\t\t\t\tMacUtil.getVisibleRegion(data.controlHandle, fClipCache, true);", "-\t\t\t\t\tOS.OffsetRgn(fClipCache, (short)-fRect.getX(), (short)-fRect.getY());", "-\t\t\t\t}", "-\t\t\t\tif (data.clipRgn != 0) {", "-\t\t\t\t\tint rgn= OS.NewRgn();", "-\t\t\t\t\tOS.SectRgn(fClipCache, data.clipRgn, rgn);", "-\t\t\t\t\tOS.SetClip(rgn);", "-\t\t\t\t\tOS.DisposeRgn(rgn);", "-\t\t\t\t} else ", "-\t\t\t\t\tOS.SetClip(fClipCache);", "-\t\t\t\t// caching doesn't work yet", "-\t\t\t\tOS.DisposeRgn(fClipCache);", "-\t\t\t\tfClipCache= 0;", "-\t\t\t} else {", "-\t\t\t\tif (data.clipRgn != 0)", "-\t\t\t\t\tOS.SetClip(data.clipRgn);", "-\t\t\t}", "-\t\t}", "-\t}"]}], "num": 24059}
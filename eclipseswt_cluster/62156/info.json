{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4b54c2dafeb1eded2d35e4ad346a9702", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "541612c4b49e4d08a543d244e06bd32b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "8de1ac9db91bb43b6bd0099ed55c1ebbf15558ad", "commitAfterChange": "79e7c4fe0f14367c5662ef7afc7953cfdeeb5a08", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 20, "signatureBeforeChange": "  void init(ImageData image)", "signatureAfterChange": "  void init(ImageData image)", "diff": ["+", "+\tif (handle != null) handle.release();", "+", "+\thandle = (NSImage)new NSImage().alloc();", "+\tNSSize size = new NSSize();", "+\tsize.width = width;", "+\tsize.height = height;", "+\thandle = handle.initWithSize(size);", "-\tPaletteData palette = image.palette;", "-\tif (!(((image.depth == 1 || image.depth == 2 || image.depth == 4 || image.depth == 8) && !palette.isDirect) ||", "-\t\t\t((image.depth == 8) || (image.depth == 16 || image.depth == 24 || image.depth == 32) && palette.isDirect)))", "+", "+\tNSBitmapImageRep rep = createRepresentaion(image);", "+\thandle.addRepresentation(rep);", "+\trep.release();", "+\thandle.setCacheMode(OS.NSImageCacheNever);", "+}", "-\t", "-\tint dataSize = width * height * 4;", "-\t", "-\tint bpr = width * 4;", "-\t\t\timage.data, image.depth, image.bytesPerLine, image.getByteOrder(), 0, 0, width, height, palette.redMask, palette.greenMask, palette.blueMask,", "-\t\t\tbuffer, 32, bpr, ImageData.MSB_FIRST, 0, 0, width, height, 0xFF0000, 0xFF00, 0xFF,", "-\t\t\timage.data, image.depth, image.bytesPerLine, image.getByteOrder(), 0, 0, width, height, srcReds, srcGreens, srcBlues,", "-\t\t\tbuffer, 32, bpr, ImageData.MSB_FIRST, 0, 0, width, height, 0xFF0000, 0xFF00, 0xFF,", "-\tint transparency = image.getTransparencyType();", "-\tif (transparency == SWT.TRANSPARENCY_MASK || image.transparentPixel != -1) {", "-\t\tthis.type = image.transparentPixel != -1 ? SWT.BITMAP : SWT.ICON;", "-\t\tif (image.transparentPixel != -1) {", "-\t\t\t\tRGB rgb = palette.getRGB(image.transparentPixel);", "-\t\t\t\tif (image.transparentPixel < rgbs.length) {", "-\t\t\t\t\tRGB rgb = rgbs[image.transparentPixel];", "-\t\tImageData maskImage = image.getTransparencyMask();", "-\t\tfor (int y = 0; y<height; y++) {", "-\t\t\tfor (int x = 0; x<width; x++) {", "-\t\tif (image.alpha != -1) {", "-\t\t\tthis.alpha = image.alpha;", "-\t\t} else if (image.alphaData != null) {", "-\t\t\tthis.alphaData = new byte[image.alphaData.length];", "-\t\t\tSystem.arraycopy(image.alphaData, 0, this.alphaData, 0, alphaData.length);", "-\t\t\tfor (int y = 0; y<height; y++) {", "-\t\t\t\tfor (int x = 0; x<width; x++) {", "-\t", "-\tif (handle != null) handle.release();", "-\t", "-\thandle = (NSImage)new NSImage().alloc();", "-\tNSSize size = new NSSize();", "-\tsize.width = width;", "-\tsize.height = height;", "-\thandle = handle.initWithSize(size);", "-\tNSBitmapImageRep rep = (NSBitmapImageRep)new NSBitmapImageRep().alloc();", "-\trep = rep.initWithBitmapDataPlanes(0, width, height, 8, hasAlpha ? 4 : 3, hasAlpha, false, OS.NSDeviceRGBColorSpace, OS.NSAlphaFirstBitmapFormat | OS.NSAlphaNonpremultipliedBitmapFormat, bpr, 32);", "-\tOS.memmove(rep.bitmapData(), buffer, dataSize);\t", "-\thandle.addRepresentation(rep);", "-\trep.release();", "-\thandle.setCacheMode(OS.NSImageCacheNever);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8262597c0f27beea0224488922ecb24f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Image(Device device, Image srcImage, int flag)", "signatureAfterChange": " public Image(Device device, Image srcImage, int flag)", "diff": ["-\tdevice = this.device;", "-\tthis.type = srcImage.type;", "-\t/* Get source image size */", "-\tNSSize size = srcImage.handle.size();", "- \tint width = (int)size.width;", "- \tint height = (int)size.height;", "- \tNSBitmapImageRep srcRep = srcImage.imageRep;", "- \tint /*long*/ bpr = srcRep.bytesPerRow();", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tdevice = this.device;", "+\t\tthis.type = srcImage.type;", "+\t\t/* Get source image size */", "+\t\tNSSize size = srcImage.handle.size();", "+\t\tint width = (int)size.width;", "+\t\tint height = (int)size.height;", "+\t\tNSBitmapImageRep srcRep = srcImage.imageRep;", "+\t\tint /*long*/ bpr = srcRep.bytesPerRow();", "-\t/* Copy transparent pixel and alpha data when necessary */", "-\ttransparentPixel = srcImage.transparentPixel;", "-\talpha = srcImage.alpha;", "-\tif (srcImage.alphaData != null) {", "-\t\talphaData = new byte[srcImage.alphaData.length];", "-\t\tSystem.arraycopy(srcImage.alphaData, 0, alphaData, 0, alphaData.length);", "-\t}", "+\t\t/* Copy transparent pixel and alpha data when necessary */", "+\t\ttransparentPixel = srcImage.transparentPixel;", "+\t\talpha = srcImage.alpha;", "+\t\tif (srcImage.alphaData != null) {", "+\t\t\talphaData = new byte[srcImage.alphaData.length];", "+\t\t\tSystem.arraycopy(srcImage.alphaData, 0, alphaData, 0, alphaData.length);", "+\t\t}", "-\t/* Create the image */", "-\thandle = (NSImage)new NSImage().alloc();", "-\thandle = handle.initWithSize(size);", "-\tNSBitmapImageRep rep = imageRep = (NSBitmapImageRep)new NSBitmapImageRep().alloc();", "-\trep = rep.initWithBitmapDataPlanes(0, width, height, srcRep.bitsPerSample(), srcRep.samplesPerPixel(), srcRep.samplesPerPixel() == 4, srcRep.isPlanar(), OS.NSDeviceRGBColorSpace, OS.NSAlphaFirstBitmapFormat | OS.NSAlphaNonpremultipliedBitmapFormat, srcRep.bytesPerRow(), srcRep.bitsPerPixel());", "-\thandle.addRepresentation(rep);", "-\t", "-\tint /*long*/ data = rep.bitmapData();", "-\tOS.memmove(data, srcImage.imageRep.bitmapData(), width * height * 4);", "-\tif (flag != SWT.IMAGE_COPY) {", "-\t\t", "-\t\t/* Apply transformation */", "-\t\tswitch (flag) {", "+\t\t/* Create the image */", "+\t\thandle = (NSImage)new NSImage().alloc();", "+\t\thandle = handle.initWithSize(size);", "+\t\tNSBitmapImageRep rep = imageRep = (NSBitmapImageRep)new NSBitmapImageRep().alloc();", "+\t\trep = rep.initWithBitmapDataPlanes(0, width, height, srcRep.bitsPerSample(), srcRep.samplesPerPixel(), srcRep.samplesPerPixel() == 4, srcRep.isPlanar(), OS.NSDeviceRGBColorSpace, OS.NSAlphaFirstBitmapFormat | OS.NSAlphaNonpremultipliedBitmapFormat, srcRep.bytesPerRow(), srcRep.bitsPerPixel());", "+\t\thandle.addRepresentation(rep);", "+", "+\t\tint /*long*/ data = rep.bitmapData();", "+\t\tOS.memmove(data, srcImage.imageRep.bitmapData(), width * height * 4);", "+\t\tif (flag != SWT.IMAGE_COPY) {", "+", "+\t\t\t/* Apply transformation */", "+\t\t\tswitch (flag) {", "+\t\t\t}", "+\t\tinit();", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "-\tinit();"]}], "num": 62156}
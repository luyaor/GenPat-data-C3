{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e3fec5c04378ca6d27a0bced999ef23a", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92d48be8d17fb79d8b3aa13c8be8ca0c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "da070c767dca330968a0bc3730f4f7fa6e63ddea", "commitAfterChange": "e68f6dd7961c12937e9660a6a57b980c17ed895a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " void presetChooserDialog ()", "signatureAfterChange": " void presetChooserDialog ()", "diff": ["-\t\t\t\tOS.gtk_file_chooser_set_current_folder (handle, buffer);", "+\t\t\t\t/*", "+\t\t\t\t * in GTK version 2.10, gtk_file_chooser_set_current_folder requires path", "+\t\t\t\t * to be true canonical path. So using realpath to convert the path to ", "+\t\t\t\t * true canonical path.", "+\t\t\t\t */", "+\t\t\t\tif (OS.IsAIX) {", "+\t\t\t\t\tbyte [] outputBuffer = new byte [PATH_MAX];", "+\t\t\t\t\tlong /*int*/ ptr = OS.realpath (buffer, outputBuffer);", "+\t\t\t\t\tif (ptr != 0) {", "+\t\t\t\t\t\tOS.gtk_file_chooser_set_current_folder (handle, ptr);", "+\t\t\t\t\t}", "+\t\t\t\t\t/* We are not doing free here because realpath returns the address of outputBuffer", "+\t\t\t\t\t * which is created in this code and we let the garbage collector to take care of this", "+\t\t\t\t\t */", "+\t\t\t\t} else {", "+\t\t\t\t\tlong /*int*/ ptr = OS.realpath (buffer, null);", "+\t\t\t\t\tif (ptr != 0) {", "+\t\t\t\t\t\tOS.gtk_file_chooser_set_current_folder (handle, ptr);", "+\t\t\t\t\t\tOS.g_free (ptr);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t\tif (fileName.length() > 0) {", "-\t\t\t\tOS.gtk_file_chooser_set_filename (handle, buffer);", "+\t\t\t/*", "+\t\t\t * in GTK version 2.10, gtk_file_chooser_set_current_folder requires path", "+\t\t\t * to be true canonical path. So using realpath to convert the path to ", "+\t\t\t * true canonical path.", "+\t\t\t */", "+\t\t\tif (OS.IsAIX) {", "+\t\t\t\tbyte [] outputBuffer = new byte [PATH_MAX];", "+\t\t\t\tlong /*int*/ ptr = OS.realpath (buffer, outputBuffer);", "+\t\t\t\tif (ptr != 0) {", "+\t\t\t\t\tif (fileName.length() > 0) {", "+\t\t\t\t\t\tOS.gtk_file_chooser_set_filename (handle, ptr);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tOS.gtk_file_chooser_set_current_folder (handle, ptr);", "+\t\t\t\t\t}", "+\t\t\t\t\t/* We are not doing free here because realpath returns the address of outputBuffer", "+\t\t\t\t\t * which is created in this code and we let the garbage collector to take care of this", "+\t\t\t\t\t */", "+\t\t\t\t}", "-\t\t\t\tOS.gtk_file_chooser_set_current_folder (handle, buffer);", "+\t\t\t\tlong /*int*/ ptr = OS.realpath (buffer, null);", "+\t\t\t\tif (ptr != 0) {", "+\t\t\t\t\tif (fileName.length() > 0) {", "+\t\t\t\t\t\tOS.gtk_file_chooser_set_filename (handle, ptr);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tOS.gtk_file_chooser_set_current_folder (handle, ptr);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.g_free (ptr);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d1f49ccd978564d7b569a59d0249e64", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "20a78c3f41cf33cd567a5e2c6f2e5b079601072a", "commitAfterChange": "9b2499a100ea32cbdcab7c6c87e6d1adf71751d5", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " public void setEnabled (boolean enabled)", "signatureAfterChange": " public void setEnabled (boolean enabled)", "diff": ["-\tif (enabled) {", "-\t\t/*", "-\t\t* Bug in GTK.  GtkButton requires an enter notify before it", "-\t\t* allows the button to be pressed, but events are dropped when", "-\t\t* widgets are insensitive.  The fix is to hide and show the", "-\t\t* button if the pointer is within its bounds.", "-\t\t*/", "-\t\tint [] x = new int [1], y = new int [1];", "-\t\tgdk_window_get_device_position (parent.paintWindow (), x, y, null);", "-\t\tif (getBounds ().contains (x [0], y [0])) {", "-\t\t\tOS.gtk_widget_hide (handle);", "-\t\t\tOS.gtk_widget_show (handle);", "-\t\t}", "-\t} else {", "-\t\t/*", "-\t\t* Bug in GTK. Starting with 2.14, if a button is disabled ", "-\t\t* through on a button press, the field which keeps track ", "-\t\t* whether the pointer is currently in the button is never updated.", "-\t\t* As a result, when it is re-enabled it automatically enters", "-\t\t* a PRELIGHT state. The fix is to set a NORMAL state.", "-\t\t* ", "-\t\t* Note that on GTK 3 this code causes the item to be re-enabled.", "-\t\t*/", "-\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 14, 0) && !OS.GTK3) {", "-\t\t\tOS.gtk_widget_set_state (topHandle, OS.GTK_STATE_NORMAL);", "+", "+\tif (!OS.GTK3) {", "+\t\tif (enabled) {", "+\t\t\t/*", "+\t\t\t* Bug in GTK (see Eclipse bug 82169). GtkButton requires an enter notify before it", "+\t\t\t* allows the button to be pressed, but events are dropped when", "+\t\t\t* widgets are insensitive.  The fix is to hide and show the", "+\t\t\t* button if the pointer is within its bounds.", "+\t\t\t*/", "+\t\t\tint [] x = new int [1], y = new int [1];", "+\t\t\tgdk_window_get_device_position (parent.paintWindow (), x, y, null);", "+\t\t\tif (getBounds ().contains (x [0], y [0])) {", "+\t\t\t\tOS.gtk_widget_hide (handle);", "+\t\t\t\tOS.gtk_widget_show (handle);", "+\t\t\t}", "+\t\t} else {", "+\t\t\t/*", "+\t\t\t* Bug in GTK. Starting with 2.14, if a button is disabled", "+\t\t\t* through on a button press, the field which keeps track", "+\t\t\t* whether the pointer is currently in the button is never updated.", "+\t\t\t* As a result, when it is re-enabled it automatically enters", "+\t\t\t* a PRELIGHT state. The fix is to set a NORMAL state.", "+\t\t\t*/", "+\t\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 14, 0)) {", "+\t\t\t\tOS.gtk_widget_set_state (topHandle, OS.GTK_STATE_NORMAL);", "+\t\t\t}"]}], "num": 5485}
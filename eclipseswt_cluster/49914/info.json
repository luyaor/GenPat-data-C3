{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aafe35f3de7665b2f499bfd0455a7ff8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1644a3d12aac9108cd217f617bbdf7f3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "9e4aa4f79d8d08d57d797296be9d3269723e755b", "commitAfterChange": "c7a37ce473beb9045c99b97900ef561257b98af2", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 28, "signatureBeforeChange": "  \tpublic id internal_accessibilityActionDescription(NSString action, int childID)", "signatureAfterChange": " \t \tpublic id internal_accessibilityActionDescription(NSString action, int childID)", "diff": ["-\tpublic id internal_accessibilityActionDescription(NSString action, int childID) {", "-\t\t// TODO No action support for now.", "-\t\treturn NSString.string();", "+\t", "+\tpublic id internal_accessibilityActionDescription(NSString action, int childID) {", "+\t\tNSString returnValue = NSString.string();", "+\t\tString actionName = action.getString();", "+\t\tif (accessibleActionListeners.size() > 0) {", "+\t\t\tAccessibleActionEvent event = new AccessibleActionEvent(this);", "+\t\t\tfor (int i = 0; i < accessibleActionListeners.size(); i++) {", "+\t\t\t\tAccessibleActionListener listener = (AccessibleActionListener) accessibleActionListeners.elementAt(i);", "+\t\t\t\tlistener.getActionCount(event);", "+\t\t\t}", "+\t\t\tint index = -1;", "+\t\t\tfor (int i = 0; i < event.count; i++) {", "+\t\t\t\tevent.index = i;", "+\t\t\t\tfor (int j = 0; j < accessibleActionListeners.size(); j++) {", "+\t\t\t\t\tAccessibleActionListener listener = (AccessibleActionListener) accessibleActionListeners.elementAt(j);", "+\t\t\t\t\tlistener.getName(event);", "+\t\t\t\t}", "+\t\t\t\tif (actionName.equals(event.result)) {", "+\t\t\t\t\tindex = i;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (index != -1) {", "+\t\t\t\tevent.index = index;", "+\t\t\t\tevent.result = null;", "+\t\t\t\tfor (int i = 0; i < accessibleActionListeners.size(); i++) {", "+\t\t\t\t\tAccessibleActionListener listener = (AccessibleActionListener) accessibleActionListeners.elementAt(i);", "+\t\t\t\t\tlistener.getDescription(event);", "+\t\t\t\t}", "+\t\t\t\tif (event.result != null) returnValue = NSString.stringWith(event.result);", "+\t\t\t}", "+\t\t} ", "+\t\treturn returnValue;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "66cfa77155763d5fd17fc7552d0e95ae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGeneratorUI.java", "commitBeforeChange": "f33c93a3b6199f2d2878231f007f05c03517addf", "commitAfterChange": "6be7a535ba88fce3aa3fabbf2e7ed19a03e18cd3", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t \tint getColumnFor(String attribute)", "signatureAfterChange": " \t \tvoid selectChild(TreeItem item)", "diff": ["+\t", "+\tvoid selectChild(TreeItem item) {", "+\t\tattribTable.removeAll();", "+\t\tif (!(item.getData() instanceof Node)) return;", "+\t\tNode node = (Node)item.getData();", "+\t\tNamedNodeMap attributes = node.getAttributes();", "+\t\tString[] extraAttribs = gen.getExtraAttributeNames(node);", "+\t\tfor (int i = 0; i < extraAttribs.length; i++) {", "+\t\t\tTableItem attribItem = new TableItem(attribTable, SWT.NONE);", "+\t\t\tattribItem.setText(extraAttribs[i]);", "+\t\t\tattribItem.setData(node);", "+\t\t\tattribItem.setForeground(display.getSystemColor(SWT.COLOR_BLUE));", "+\t\t\tNode attrib = attributes.getNamedItem(extraAttribs[i]);", "+\t\t\tif (attrib != null) {", "+\t\t\t\tattribItem.setText(1, attrib.getNodeValue());", "+\t\t\t}", "+\t\t\t", "+\t\t}", "+\t\tcheckItem(node, item);", "+\t\tfor (int i = 0, length = attributes.getLength(); i < length; i++) {", "+\t\t\tNode attrib = attributes.item(i);", "+\t\t\tString attribName = attrib.getNodeName();", "+\t\t\tif (attribName.startsWith(\"swt_\")) continue;", "+\t\t\tTableItem attribItem = new TableItem(attribTable, SWT.NONE);", "+\t\t\tattribItem.setText(attribName);", "+\t\t\tattribItem.setText(1, attrib.getNodeValue());", "+\t\t}", "+\t\tattribTable.getColumn(0).pack();", "+\t\tattribTable.getColumn(1).setWidth(500);", "-\t", "-\tint getColumnFor(String attribute) {", "-\t\tTreeColumn[] columns = nodesTree.getColumns();", "-\t\tfor (int i = 0; i < columns.length; i++) {", "-\t\t\tif (columns[i].getText().equals(attribute)) return i;", "-\t\t}", "-\t\tTreeColumn column = new TreeColumn(nodesTree, SWT.NONE);", "-\t\tcolumn.setText(attribute);", "-\t\treturn columns.length;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6417bfdd69674e35e4ac9908f54067b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "9c7d16bb18d3860d95141caf8c4f01bb13563f7e", "commitAfterChange": "be5aa41634cde1e04ae4d0c10fd398906519cd0c", "methodNumberBeforeChange": 272, "methodNumberAfterChange": 285, "signatureBeforeChange": " \tint put_accValue(int varChild, int szValue)", "signatureAfterChange": " \tint put_accValue(int varChild, int szValue)", "diff": ["-\t\t/* MSAA: this method is typically only used for edit controls. */", "+\t\t/* MSAA: this method is supported for some UI elements (usually edit controls). */", "+\t\tVARIANT v = getVARIANT(varChild);", "+\t\tif (v.vt != COM.VT_I4) return COM.E_INVALIDARG;", "-\t\tif (iaccessible != null) {", "-\t\t\t/* Currently, we don't expose this as API. Forward to the proxy. */", "+\t\tif (v.lVal == COM.CHILDID_SELF && accessibleEditableTextListeners.size() > 0) {", "+\t\t\t/*", "+\t\t\t * If the object supports AccessibleEditableTextListener.replaceText,", "+\t\t\t * then give the object a chance to handle this event.", "+\t\t\t */", "+\t\t\tAccessibleEditableTextEvent event = new AccessibleEditableTextEvent(this);", "+\t\t\tevent.start = 0;", "+\t\t\tevent.end = getCharacterCount();", "+\t\t\tif (event.end >= 0) {", "+\t\t\t\tint size = COM.SysStringByteLen(szValue);", "+\t\t\t\tchar [] buffer = new char [(size + 1) / 2];", "+\t\t\t\tOS.MoveMemory (buffer, szValue, size);", "+\t\t\t\tevent.string = new String (buffer);", "+\t\t\t\tfor (int i = 0; i < accessibleEditableTextListeners.size(); i++) {", "+\t\t\t\t\tAccessibleEditableTextListener listener = (AccessibleEditableTextListener) accessibleEditableTextListeners.elementAt(i);", "+\t\t\t\t\tlistener.replaceText(event);", "+\t\t\t\t}", "+\t\t\t\tif (event.result != null && event.result.equals(ACC.OK)) code = COM.S_OK;", "+\t\t\t\tif (DEBUG) print(this + \".IAccessible::put_accValue(\" + v.lVal + \", \\\"\" + event.string + \"\\\") returning \" + hresult(code));", "+\t\t\t}", "+\t\t}", "+\t\tif (code != COM.S_OK && iaccessible != null) {", "+\t\t\t/* If the object did not handle the event, then forward to the proxy. */", "+\t\t\tif (DEBUG) print(this + \".IAccessible::put_accValue(\" + v.lVal + \") returning \" + hresult(code) + \" from proxy\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a5633e04ffdd7c0da6094e5fcc916b06", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "9e4aa4f79d8d08d57d797296be9d3269723e755b", "commitAfterChange": "c7a37ce473beb9045c99b97900ef561257b98af2", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 38, "signatureBeforeChange": "  \tpublic void internal_accessibilityPerformAction(NSString action, int childID)", "signatureAfterChange": "  \tpublic boolean internal_accessibilityPerformAction(NSString action, int childID)", "diff": ["-\tpublic void internal_accessibilityPerformAction(NSString action, int childID) {", "-\t\t// TODO Auto-generated method stub", "-\t\t// No action support for now.", "+\tpublic boolean internal_accessibilityPerformAction(NSString action, int childID) {", "+\t\tString actionName = action.getString();", "+\t\tif (accessibleActionListeners.size() > 0) {", "+\t\t\tAccessibleActionEvent event = new AccessibleActionEvent(this);", "+\t\t\tfor (int i = 0; i < accessibleActionListeners.size(); i++) {", "+\t\t\t\tAccessibleActionListener listener = (AccessibleActionListener) accessibleActionListeners.elementAt(i);", "+\t\t\t\tlistener.getActionCount(event);", "+\t\t\t}", "+\t\t\tint index = -1;", "+\t\t\tfor (int i = 0; i < event.count; i++) {", "+\t\t\t\tevent.index = i;", "+\t\t\t\tfor (int j = 0; j < accessibleActionListeners.size(); j++) {", "+\t\t\t\t\tAccessibleActionListener listener = (AccessibleActionListener) accessibleActionListeners.elementAt(j);", "+\t\t\t\t\tlistener.getName(event);", "+\t\t\t\t}", "+\t\t\t\tif (actionName.equals(event.result)) {", "+\t\t\t\t\tindex = i;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (index != -1) {", "+\t\t\t\tevent.index = index;", "+\t\t\t\tevent.result = null;", "+\t\t\t\tfor (int i = 0; i < accessibleActionListeners.size(); i++) {", "+\t\t\t\t\tAccessibleActionListener listener = (AccessibleActionListener) accessibleActionListeners.elementAt(i);", "+\t\t\t\t\tlistener.doAction(event);", "+\t\t\t\t}", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t} ", "+\t\treturn false;", "+\t}"]}], "num": 49914}
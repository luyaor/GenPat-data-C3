{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a57f52c57170f067b6b254441e6bb7b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8689e038a4647f0fcfb32937ccdd8295", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 100, "signatureBeforeChange": " \t\t\t \tprivate boolean handleContentClick(MacEvent me, int whichWindow)", "signatureAfterChange": "  void updateMenuBar (Shell shell)", "diff": ["+", "+void updateMenuBar (Shell shell) {", "+\tif (shell == null) shell = getActiveShell ();", "+\tboolean modal = false;", "+\tint mask = SWT.PRIMARY_MODAL | SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL;", "+\twhile (shell != null) {", "+\t\tif (shell.menuBar != null) break;", "+\t\tif ((shell.style & mask) != 0) modal = true;", "+\t\tshell = (Shell) shell.parent;", "+\t* Feature in the Macintosh.  For some reason, when a modal shell", "+\t* is active, DisableMenuItem() when called with zero (indicating", "+\t* that the entire menu is to be disabled) will not disable the", "+\t* current menu bar.  The fix is to disable each individual menu", "+\t* item.", "+\tif (menuBar != null) {", "+\t\tMenuItem [] items = menuBar.getItems ();", "+\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\tif (items [i].getEnabled ()) items [i]._setEnabled (true);", "+\t\t}", "+\t}", "+\tsetMenuBar (shell != null ? shell.menuBar : null);", "+\tif (menuBar != null && modal) {", "+\t\tint theMenu = menuBar.handle;", "+\t\tMenuItem [] items = menuBar.getItems ();", "+\t\tfor (int i=0; i<items.length; i++) items [i]._setEnabled (false);", "+\t}", "-\t\t\t", "-\tprivate boolean handleContentClick(MacEvent me, int whichWindow) {", "-\t", "-\t\tMacPoint where= me.getWhere();", "-\t\tMacPoint globalPos= me.getWhere();", "-\t\t\t\t", "-\t\tOS.QDGlobalToLocalPoint(OS.GetWindowPort(whichWindow), where.getData());", "-\t\t", "-\t\tshort[] cpart= new short[1];\t\t", "-\t\tint whichControl= 0;", "-\t\tif (MacUtil.HIVIEW) {", "-\t\t\tint[] ov= new int[1];", "-\t\t\tint root= OS.HIViewGetRoot(whichWindow);", "-\t\t\tOS.HIViewGetViewForMouseEvent(root, me.getEventRef(), ov);", "-\t\t\twhichControl= ov[0];", "-\t\t} else {", "-\t\t\twhichControl= MacUtil.findControlUnderMouse(where, whichWindow, cpart);\t\t\t\t", "-\t\t}", "-\t\t", "-\t\t// focus change", "-\t\tsetMacFocusHandle(whichWindow, whichControl);", "-\t\t\t\t\t\t\t\t", "-\t\tif (whichControl != 0) {", "-\t\t", "-\t\t\t// deal with the context menu", "-\t\t\tWidget wc= WidgetTable.get(whichControl);", "-\t\t\tif (wc instanceof Control) {", "-\t\t\t\tMenu cm= ((Control)wc).getMenu();\t// is a context menu installed?", "-\t\t\t\tif (cm != null && me.isShowContextualMenuClick()) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tfInContextMenu= true;", "-\t\t\t\t\t\t// AW: not ready for primetime", "-\t\t\t\t\t\t// OS.ContextualMenuSelect(cm.handle, globalPos.getData(), new short[1], new short[1]);", "-\t\t\t\t\t\tOS.PopUpMenuSelect(cm.handle, (short)globalPos.getY(), (short)globalPos.getX(), (short)1);", "-\t\t\t\t\t} finally {", "-\t\t\t\t\t\tfInContextMenu= false;", "-\t\t\t\t\t}", "-\t\t\t\t\treturn false;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\tif (MacUtil.HIVIEW) {", "-\t\t\t\tOS.HIViewClick(whichControl, me.getEventRef());", "-\t\t\t\treturn false;", "-\t\t\t}", "-\t\t", "-\t\t\tswitch (cpart[0]) {", "-\t\t\tcase 0:", "-\t\t\t\tbreak;", "-", "-\t\t\tcase 111:\t// User pane", "-\t\t\t\tfTrackedControl= whichControl;\t// starts mouse tracking", "-\t\t\t\twindowProc(whichControl, SWT.MouseDown, new MacMouseEvent(me));", "-\t\t\t\tbreak;", "-", "-\t\t\tcase 112:\t// User pane", "-\t\t\t\twindowProc(whichControl, SWT.MouseDown, new MacMouseEvent(me));", "-\t\t\t\tbreak;", "-\t\t\t\t", "-\t\t\tdefault:", "-\t\t\t\twindowProc(whichControl, SWT.MouseDown, new MacMouseEvent(me));", "-\t\t\t\t", "-\t\t\t\tif (MacUtil.HIVIEW) {", "-\t\t\t\t\t// AW: Jaguar:", "-\t\t\t\t\tOS.HIViewClick(whichControl, me.getEventRef());", "-\t\t\t\t} else {", "-\t\t\t\t\tint cpart2= OS.HandleControlClick(whichControl, where.getData(), me.getModifiers(), -1);", "-\t\t\t\t\tif (cpart2 != 0) {", "-\t\t\t\t\t\twindowProc(whichControl, SWT.Selection, new MacControlEvent(whichControl, cpart2, false));", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\treturn false;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "144ace51d21c45070ba09e36067fef1a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 93, "signatureBeforeChange": " \t \tprivate int handleMouseCallback(int nextHandler, int eRefHandle, int whichWindow)", "signatureAfterChange": " \t\t \tprivate int handleMouseEvent(int nextHandler, int eRefHandle, int eventKind, int whichWindow)", "diff": ["-\t", "-\tprivate int handleMouseCallback(int nextHandler, int eRefHandle, int whichWindow) {", "-\t\tint eventClass= OS.GetEventClass(eRefHandle);", "-\t\tif (eventClass != OS.kEventClassMouse) {", "-\t\t\tSystem.out.println(\"handleMouseCallback: unexpected event class: \" + MacUtil.toString(eventClass));", "+\tprivate int handleMouseEvent(int nextHandler, int eRefHandle, int eventKind, int whichWindow) {", "+\t\t", "+\t\tif (MacUtil.HIVIEW)", "-\t\t}", "-\t\t\t\t", "-\t\tint eventKind= OS.GetEventKind(eRefHandle);", "-", "-\t\tif (eventKind == OS.kEventMouseDown) {", "+\t\t", "+\t\tif (eventKind == OS.kEventMouseDown)", "-\t\t}", "-\t\torg.eclipse.swt.internal.carbon.Point where= me.getWhere();", "-\t\tlastGlobalMouseXPos= where.h;", "-\t\tlastGlobalMouseYPos= where.v;", "+\t\tMacPoint where= me.getWhere();", "-\t\t// retrieve window and window part from event", "+\t\tshort part= 0;", "-\t\t\t\t// in tracking mode: get window from control", "-\t\t\t\tOS.FindWindow(where, w);", "+\t\t\t\tpart= OS.FindWindow(where.getData(), w);", "-\t\t\t\tif (whichWindow == 0) {", "-\t\t\t\t\t// try to retrieve window from event", "-\t\t\t\t\tint rc= OS.GetEventParameter(eRefHandle, OS.kEventParamWindowRef, OS.typeWindowRef, null, 4, null, w);", "-\t\t\t\t\tif (rc == OS.noErr)", "-\t\t\t\t\t\twhichWindow= w[0];", "-\t\t\t\t\telse {", "-\t\t\t\t\t\t// the event is a MouseMoved event:", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t} else {", "+\t\t\tpart= OS.FindWindow(where.getData(), new int[1]);", "-\t\t\t\t", "+\t\t", "+\t\tif (whichWindow == 0 && eventKind == OS.kEventMouseDown) {", "+\t\t\tint[] wHandle= new int[1];", "+\t\t\tint rc= OS.GetEventParameter(eRefHandle, OS.kEventParamWindowRef, OS.typeWindowRef, null, null, wHandle);", "+\t\t\tif (rc == OS.kNoErr)", "+\t\t\t\twhichWindow= wHandle[0];", "+\t\t}", "+\t\t", "-\t\t\t// give up", "+\t\t\t//System.out.println(\"Display.handleMouseEvent:  whichWindow == 0\");", "-\t\t// determine control under mouse", "-\t\tshort[] cpart= new short[1];\t\t", "-\t\tint whichControl= MacUtil.findControlUnderMouse(whichWindow, me, cpart);\t\t\t\t", "-\t\tWidget widget= WidgetTable.get(whichControl);", "-\t\t", "-\t\tMacMouseEvent mme= fLastMouseEvent = new MacMouseEvent(me);", "-\t\t", "-\t\tcase OS.kEventMouseDown:\t\t\t", "-\t\t\t", "-\t\t\tShell shell= null;", "-\t\t\tWidget w= findWidget(whichWindow);", "-\t\t\tif (w instanceof Shell)", "-\t\t\t\tshell= (Shell) w;", "-\t\t\t\t", "-\t\t\t// first click in window -> activation", "-\t\t\tif (!OS.IsWindowActive(whichWindow)) {", "-\t\t\t\tif (shell != null && (shell.getStyle() & SWT.ON_TOP) == 0) {", "-\t\t\t\t\t// let the default handler activate the window", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\t// whatever we do, we hide the tooltip", "-\t\t\thideToolTip();", "-", "-\t\t\t// focus handling", "-\t\t\tif (shell != null && (shell.getStyle() & SWT.ON_TOP) == 0)", "-\t\t\t\tsetMacFocusHandle(whichWindow, whichControl);", "-\t\t\t\t\t\t\t\t\t", "-\t\t\tif (whichControl != 0) {", "-\t\t\t", "-\t\t\t\t// deal with the context menu", "-\t\t\t\tif (widget instanceof Control) {", "-\t\t\t\t\tMenu cm= ((Control)widget).getMenu();\t// is a context menu installed?", "-\t\t\t\t\tif (cm != null && me.isShowContextualMenuClick()) {", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tfInContextMenu= true;", "-\t\t\t\t\t\t\t// AW todo: not ready for primetime (see InitContextualMenus in createDisplay)", "-\t\t\t\t\t\t\t// OS.ContextualMenuSelect(cm.handle, globalPos.getData(), new short[1], new short[1]);", "-\t\t\t\t\t\t\torg.eclipse.swt.internal.carbon.Point pos= me.getWhere();", "-\t\t\t\t\t\t\tOS.PopUpMenuSelect(cm.handle, pos.v, pos.h, (short)1);", "-\t\t\t\t\t\t} finally {", "-\t\t\t\t\t\t\tfInContextMenu= false;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\tif (cpart[0] == 111) { \t// a user pane", "-\t\t\t\t\tif (!(widget instanceof Text)) ", "-\t\t\t\t\t\tfTrackedControl= whichControl;\t// starts mouse tracking", "-\t\t\t\t\twindowProc(whichControl, SWT.MouseDown, mme);", "-\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t} else {", "-\t\t\t\t\twindowProc(whichControl, SWT.MouseDown, mme);", "-\t\t\t\t}", "+\t\tcase OS.kEventMouseWheelMoved:", "+\t\t\tOS.QDGlobalToLocalPoint(OS.GetWindowPort(whichWindow), where.getData());\t\t\t", "+\t\t\tint cntrl= MacUtil.findControlUnderMouse(where, whichWindow, null);", "+\t\t\tWidget ww= findWidget(cntrl);", "+\t\t\tif (ww instanceof Composite) {", "+\t\t\t\tComposite s= (Composite) ww;", "+\t\t\t\tScrollBar sb= s.getVerticalBar();", "+\t\t\t\tif (sb != null)", "+\t\t\t\t\treturn sb.processWheel(eRefHandle);", "+\t\tcase OS.kEventMouseDown:", "+\t\t\t\t\t", "+\t\t\tif (!OS.IsWindowActive(whichWindow)) {", "+\t\t\t\t// let the default handler activate the window", "+\t\t\t\treturn OS.eventNotHandledErr;", "+\t\t\t}", "+\t\t", "+\t\t\thideToolTip ();", "+\t\t", "+\t\t\tif (part == OS.inContent || (MacUtil.HIVIEW && part == OS.inStructure))", "+\t\t\t\tif (false && MacUtil.HIVIEW) {", "+\t\t\t\t\treturn OS.eventNotHandledErr;", "+\t\t\t\t} else {", "+\t\t\t\t\tif (!handleContentClick(me, whichWindow))", "+\t\t\t\t\t\treturn OS.kNoErr;", "+\t\t\t\t}", "+", "+\t\t\tbreak;", "+\t\t", "-\t\t\tif (fTrackedControl != 0) {\t// continue mouse tracking", "-\t\t\t\twindowProc(fTrackedControl, SWT.MouseMove, mme);", "-\t\t\t\treturn OS.noErr;", "+\t\t\tif (fTrackedControl != 0) {", "+\t\t\t\twindowProc(fTrackedControl, SWT.MouseMove, new MacMouseEvent(me));", "+\t\t\t\treturn OS.kNoErr;", "-\t\t\t\twindowProc(fTrackedControl, SWT.MouseUp, mme);", "-\t\t\t\tfTrackedControl= 0;\t\t// continue mouse tracking", "-\t\t\t\treturn OS.noErr;", "+\t\t\t\twindowProc(fTrackedControl, SWT.MouseUp, new MacMouseEvent(me));", "+\t\t\t\tfTrackedControl= 0;", "+\t\t\t\treturn OS.kNoErr;", "-\t\t\t\t\t", "+\t\t\t", "+\t\t\tOS.QDGlobalToLocalPoint(OS.GetWindowPort(whichWindow), where.getData());\t\t\t", "+\t\t\tint whichControl= MacUtil.findControlUnderMouse(where, whichWindow, null);", "+\t\t", "-\t\t\t\t\twindowProc(fCurrentControl, SWT.MouseExit, mme);", "+\t\t\t\t\twindowProc(fCurrentControl, SWT.MouseExit, new MacMouseEvent(me));", "-\t\t\t\tif (widget instanceof Control) {", "-\t\t\t\t\tControl c= (Control) widget;", "+\t\t\t\tWidget w= findWidget(fCurrentControl);", "+\t\t\t\tif (w instanceof Control) {", "+\t\t\t\t\tControl c= (Control) w;", "-\t\t\t\twindowProc(fCurrentControl, SWT.MouseMove, mme);", "+\t\t\t\twindowProc(fCurrentControl, SWT.MouseMove, new MacMouseEvent(me));", "-\t\t\t\t\twindowProc(fCurrentControl, SWT.MouseEnter, mme);", "+\t\t\t\t\twindowProc(fCurrentControl, SWT.MouseEnter, new MacMouseEvent(me));", "-\t\t\t\treturn OS.noErr;", "-\t\t\t\t", "+\t\t\t\treturn OS.kNoErr;\t\t\t", "-\t\t\t\t\twindowProc(fCurrentControl, SWT.MouseMove, mme);", "-\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\twindowProc(fCurrentControl, SWT.MouseMove, new MacMouseEvent(me));", "+\t\t\t\t\treturn OS.kNoErr;", "-\t\t\t}", "-\t\t\tbreak;", "-\t\t\t", "-\t\tcase OS.kEventMouseWheelMoved:", "-\t\t\tif (widget instanceof Composite) {", "-\t\t\t\tScrollBar sb= ((Composite) widget).getVerticalBar();", "-\t\t\t\tif (sb != null)", "-\t\t\t\t\treturn sb.processWheel(eRefHandle);"]}], "num": 37432}
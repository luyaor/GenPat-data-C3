{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3070003a316959f97fb1bc1fb993ba42", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7532fc1fcb5c64f61ccf9cca4716c761", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CCombo.java", "commitBeforeChange": "2fc1f354460a9a2ef884760f620de832af7d79ad", "commitAfterChange": "3b2dd0f57a4f597ff1b48b6c5a40c5fccca65d5a", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 34, "signatureBeforeChange": "  void initAccessible()", "signatureAfterChange": "  void initAccessible()", "diff": ["-\tgetAccessible().addAccessibleListener(new AccessibleAdapter() {", "+\tAccessibleAdapter accessibleAdapter = new AccessibleAdapter() {", "+\t\tpublic void getName(AccessibleEvent e) {", "+\t\t\tString name = null;", "+\t\t\tLabel label = getAssociatedLabel ();", "+\t\t\tif (label != null) {", "+\t\t\t\tname = stripMnemonic(label.getText());", "+\t\t\t}", "+\t\t\te.result = name;", "+\t\t}", "+\t\tpublic void getKeyboardShortcut(AccessibleEvent e) {", "+\t\t\tString shortcut = null;", "+\t\t\tLabel label = getAssociatedLabel ();", "+\t\t\tif (label != null) {", "+\t\t\t\tString text = label.getText();", "+\t\t\t\tif (text != null) {", "+\t\t\t\t\tchar mnemonic = getMnemonic(text);", "+\t\t\t\t\tif (mnemonic != '\\0') {", "+\t\t\t\t\t\tshortcut = \"Alt+\"+mnemonic; //$NON-NLS-1$", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\te.result = shortcut;", "+\t\t}", "-\t});", "+\t};", "+\tgetAccessible().addAccessibleListener(accessibleAdapter);", "+\ttext.getAccessible().addAccessibleListener(accessibleAdapter);", "+\tlist.getAccessible().addAccessibleListener(accessibleAdapter);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d362de97c736fd4a842449571ff0e79c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/DOMWriter.java", "commitBeforeChange": "8e60f95dac937ad9c76d635072d286ee207431e9", "commitAfterChange": "2504db569c9668eae7d07b1ef2b7904b888918ca", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r\t\r\tpublic void print(Node node, int level)", "signatureAfterChange": " \t \tpublic void print(Node node, int level)", "diff": ["-/*******************************************************************************\r * Copyright (c) 2008 IBM Corporation and others.\r * All rights reserved. This program and the accompanying materials\r * are made available under the terms of the Eclipse Public License v1.0\r * which accompanies this distribution, and is available at\r * http://www.eclipse.org/legal/epl-v10.html\r *\r * Contributors:\r *     IBM Corporation - initial API and implementation\r *******************************************************************************/\rpackage org.eclipse.swt.tools.internal;\r\rimport java.io.PrintStream;\rimport java.util.Arrays;\rimport java.util.Comparator;\r\rimport org.w3c.dom.Attr;\rimport org.w3c.dom.Document;\rimport org.w3c.dom.NamedNodeMap;\rimport org.w3c.dom.Node;\rimport org.w3c.dom.NodeList;\r\rpublic class DOMWriter {\r\r\tstatic String ENCONDING = \"UTF8\";\r\tPrintStream out;\r\tString[] attributeFilter;\r\tString nodeFilter;\r\r\tpublic DOMWriter(PrintStream out) {\r\t\tthis.out = new PrintStream(out);\r\t}\r\r\tString nodeName(Node node) {\r\t\t// TODO use getLocalName()?\r\t\treturn node.getNodeName();\r\t}\r\t\r\tboolean filter(Attr attr) {\r\t\tif (attributeFilter == null) return false;\r\t\tString name = attr.getNodeName();\r\t\tfor (int i = 0; i < attributeFilter.length; i++) {\r\t\t\tif (name.matches(attributeFilter[i])) return false;\r\t\t}\r\t\treturn true;\r\t}\r\t\r\tvoid print(String str) {\r\t\tout.print(str);\r\t}\r\tvoid println() {\r\t\tout.println();\r\t}\r\r\tpublic void print(Node node) {\r\t\tprint(node, 0);\r\t}\r\t\r\tpublic void print(Node node, int level) {\r\t\tif (node == null)\r\t\t\treturn;\r\t\tint type = node.getNodeType();\r\t\tswitch (type) {\r\t\t\tcase Node.DOCUMENT_NODE: {\r\t\t\t\tprint(\"<?xml version=\\\"1.0\\\" encoding=\\\"\");\r\t\t\t\tprint(ENCONDING);\r\t\t\t\tprint(\"\\\"?>\");\r\t\t\t\tprintln();\r\t\t\t\tprint(((Document) node).getDocumentElement());\r\t\t\t\tbreak;\r\t\t\t}\r\t\t\tcase Node.ELEMENT_NODE: {\r\t\t\t\tAttr attrs[] = sort(node.getAttributes());\r\t\t\t\tString name = nodeName(node);\r\t\t\t\tboolean isArg = name.equals(\"arg\");\r\t\t\t\tboolean gen = isArg || name.equals(\"retval\");\r\t\t\t\tfor (int i = 0; i < attrs.length && !gen; i++) {\r\t\t\t\t\tAttr attr = attrs[i];\r\t\t\t\t\tif (nodeName(attr).startsWith(nodeFilter)) gen = true;\r\t\t\t\t}\r\t\t\t\tif (!gen) break;\r\t\t\t\tfor (int i = 0; i < level; i++) print(\"\\t\");\r\t\t\t\tprint(\"<\");\r\t\t\t\tprint(name);\r\t\t\t\tfor (int i = 0; i < attrs.length; i++) {\r\t\t\t\t\tAttr attr = attrs[i];\r\t\t\t\t\tif (isArg && \"name\".equals(attr.getNodeName())) continue;\r\t\t\t\t\tif (filter(attr)) continue;\r\t\t\t\t\tprint(\" \");\r\t\t\t\t\tprint(nodeName(attr));\r\t\t\t\t\tprint(\"=\\\"\");\r\t\t\t\t\tprint(normalize(attr.getNodeValue()));\r\t\t\t\t\tprint(\"\\\"\");\r\t\t\t\t}\r\t\t\t\tprint(\">\");\r\t\t\t\tNodeList children = node.getChildNodes();\r\t\t\t\tint count = 0;\r\t\t\t\tif (children != null) {\r\t\t\t\t\tint len = children.getLength();\r\t\t\t\t\tfor (int i = 0; i < len; i++) {\r\t\t\t\t\t\tif (children.item(i).getNodeType() == Node.ELEMENT_NODE) count++;\r\t\t\t\t\t}\r\t\t\t\t\tif (count > 0) println();\r\t\t\t\t\tfor (int i = 0; i < len; i++) {\r\t\t\t\t\t\tprint(children.item(i), level + 1);\r\t\t\t\t\t}\r\t\t\t\t\tif (count > 0) {\r\t\t\t\t\t\tfor (int i = 0; i < level; i++) print(\"\\t\");\r\t\t\t\t\t}\r\t\t\t\t}\r\t\t\t\tprint(\"</\");\r\t\t\t\tprint(nodeName(node));\r\t\t\t\tprint(\">\");\r\t\t\t\tprintln();\r\t\t\t\tbreak;\r\t\t\t}\r\t\t}\r\t\tout.flush();\r\t}\r\r\tAttr[] sort(NamedNodeMap attrs) {\r\t\tif (attrs == null)\r\t\t\treturn new Attr[0];\r\t\tAttr result[] = new Attr[attrs.getLength()];\r\t\tfor (int i = 0; i < result.length; i++) {\r\t\t\tresult[i] = (Attr) attrs.item(i);\r\t\t}\r\t\tArrays.sort(result, new Comparator() {\r\t\t\tpublic int compare(Object arg0, Object arg1) {\r\t\t\t\treturn nodeName((Node) arg0).compareTo(nodeName((Node) arg1));\r\t\t\t}\r\t\t});\r\t\treturn result;\r\t}\r\r\tString normalize(String s) {\r\t\tif (s == null) return \"\";\r\t\tStringBuffer str = new StringBuffer();\r\t\tfor (int i = 0, length = s.length(); i < length; i++) {\r\t\t\tchar ch = s.charAt(i);\r\t\t\tswitch (ch) {\r\t\t\t\tcase '\"': str.append(\"\\\"\"); break;\r\t\t\t\tcase '\\r':\r\t\t\t\tcase '\\n':\r\t\t\t\t\t// FALL THROUGH\r\t\t\t\tdefault: str.append(ch);\r\t\t\t}\r\t\t}\r\t\treturn str.toString();\r\t}\r\t\r\tpublic void setNodeFilter(String filter) {\r\t\t\r\t\tnodeFilter = filter;\r\t}\r\t\r\tpublic void setAttributeFilter(String[] filter) {\r\t\tattributeFilter = filter;\r\t}\r}", "\\ No newline at end of file", "+\t", "+\tpublic void print(Node node, int level) {", "+\t\tif (node == null)", "+\t\t\treturn;", "+\t\tint type = node.getNodeType();", "+\t\tswitch (type) {", "+\t\t\tcase Node.DOCUMENT_NODE: {", "+\t\t\t\tprint(\"<?xml version=\\\"1.0\\\" encoding=\\\"\");", "+\t\t\t\tprint(ENCONDING);", "+\t\t\t\tprint(\"\\\"?>\");", "+\t\t\t\tprintln();", "+\t\t\t\tprint(((Document) node).getDocumentElement());", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase Node.ELEMENT_NODE: {", "+\t\t\t\tAttr attrs[] = sort(node.getAttributes());", "+\t\t\t\tString name = nodeName(node);", "+\t\t\t\tboolean isArg = name.equals(\"arg\");", "+\t\t\t\tboolean gen = isArg || name.equals(\"retval\");", "+\t\t\t\tfor (int i = 0; i < attrs.length && !gen; i++) {", "+\t\t\t\t\tAttr attr = attrs[i];", "+\t\t\t\t\tif (nodeName(attr).startsWith(nodeFilter)) gen = true;", "+\t\t\t\t}", "+\t\t\t\tif (!gen) break;", "+\t\t\t\tfor (int i = 0; i < level; i++) print(\"\\t\");", "+\t\t\t\tprint(\"<\");", "+\t\t\t\tprint(name);", "+\t\t\t\tfor (int i = 0; i < attrs.length; i++) {", "+\t\t\t\t\tAttr attr = attrs[i];", "+\t\t\t\t\tif (isArg && \"name\".equals(attr.getNodeName())) continue;", "+\t\t\t\t\tif (filter(attr)) continue;", "+\t\t\t\t\tprint(\" \");", "+\t\t\t\t\tprint(nodeName(attr));", "+\t\t\t\t\tprint(\"=\\\"\");", "+\t\t\t\t\tprint(normalize(attr.getNodeValue()));", "+\t\t\t\t\tprint(\"\\\"\");", "+\t\t\t\t}", "+\t\t\t\tprint(\">\");", "+\t\t\t\tNodeList children = node.getChildNodes();", "+\t\t\t\tif (children != null) {", "+\t\t\t\t\tint len = children.getLength();", "+\t\t\t\t\tArrayList nodes = new ArrayList();", "+\t\t\t\t\tfor (int i = 0; i < len; i++) {", "+\t\t\t\t\t\tNode child = children.item(i);", "+\t\t\t\t\t\tif (child.getNodeType() == Node.ELEMENT_NODE) nodes.add(child);", "+\t\t\t\t\t}", "+\t\t\t\t\tint count = nodes.size();", "+\t\t\t\t\tCollections.sort(nodes, new Comparator() {", "+\t\t\t\t\t\tpublic int compare(Object arg0, Object arg1) {", "+\t\t\t\t\t\t\tNode a = (Node)arg0;", "+\t\t\t\t\t\t\tNode b = (Node)arg1;", "+\t\t\t\t\t\t\tString nameA = a.getNodeName();", "+\t\t\t\t\t\t\tString nameB = b.getNodeName();", "+\t\t\t\t\t\t\tif (\"arg\".equals(nameA)) {", "+\t\t\t\t\t\t\t\treturn 0;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tint result = nameA.compareTo(nameB);", "+\t\t\t\t\t\t\t\tif (result == 0) {", "+\t\t\t\t\t\t\t\t\tNode idA = getIDAttribute(a);", "+\t\t\t\t\t\t\t\t\tNode idB = getIDAttribute(b);", "+\t\t\t\t\t\t\t\t\tif (idA == null || idB == null) return 0;", "+\t\t\t\t\t\t\t\t\treturn idA.getNodeValue().compareTo(idB.getNodeValue());", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\treturn result;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t});", "+\t\t\t\t\tif (count > 0) println();", "+\t\t\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\t\t\tprint((Node)nodes.get(i), level + 1);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (count > 0) {", "+\t\t\t\t\t\tfor (int i = 0; i < level; i++) print(\"\\t\");", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tprint(\"</\");", "+\t\t\t\tprint(nodeName(node));", "+\t\t\t\tprint(\">\");", "+\t\t\t\tprintln();", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\tout.flush();", "+\t}"]}], "num": 46592}
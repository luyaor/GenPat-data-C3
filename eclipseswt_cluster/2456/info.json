{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab6769bfbd1dbdbbfd24e7eae07066d6", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96f89b9242f88a7d66d8cff8615a7e09", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "12145948a337f8260ea5a3544e7ee9d4678a6ab8", "commitAfterChange": "7f57a0f4b37b94ba73598e3a604be9f733e83a82", "methodNumberBeforeChange": 324, "methodNumberAfterChange": 324, "signatureBeforeChange": " \tint setAttributes(int startOffset, int endOffset, int pbstrAttributes)", "signatureAfterChange": " \tint setAttributes(int startOffset, int endOffset, int pbstrAttributes)", "diff": ["-\t\t\tString [] attributes = new String [0];", "-\t\t\tString [] rawAttributes = string.split(\";\");", "-\t\t\tfor (int i = 0; i < rawAttributes.length; i++) {", "-\t\t\t\tString attribute[] = rawAttributes[i].split(\":\");", "-\t\t\t\tif (attribute[0].equals(\"text-position\")) {", "-\t\t\t\t\tif (attribute[1].equals(\"super\")) style.rise = points / 2;", "-\t\t\t\t\telse if (attribute[1].equals(\"sub\")) style.rise = - points / 2;", "-\t\t\t\t} else if (attribute[0].equals(\"text-underline-type\")) {", "+\t\t\tString [] attributes = new String [0];", "+\t\t\tint begin = 0;", "+\t\t\tint end = string.indexOf(';');", "+\t\t\twhile (end != -1 && end + 1 <= string.length()) {", "+\t\t\t\tString keyValue = string.substring(begin, end).trim();", "+\t\t\t\tint colonIndex = keyValue.indexOf(':');", "+\t\t\t\tif (colonIndex != -1 && colonIndex + 1 < keyValue.length()) {", "+\t\t\t\t\tString [] newAttributes = new String [attributes.length + 2];", "+\t\t\t\t\tSystem.arraycopy (attributes, 0, newAttributes, 0, attributes.length);", "+\t\t\t\t\tnewAttributes[attributes.length] = keyValue.substring(0, colonIndex).trim();", "+\t\t\t\t\tnewAttributes[attributes.length + 1] = keyValue.substring(colonIndex + 1).trim();", "+\t\t\t\t\tattributes = newAttributes;", "+\t\t\t\t}", "+\t\t\t\tbegin = end + 1;", "+\t\t\t\tend = string.indexOf(';', begin);", "+\t\t\t}", "+\t\t\tfor (int i = 0; i+1 < attributes.length; i+=2) {", "+\t\t\t\tString key = attributes[i];", "+\t\t\t\tString value = attributes[i+1];", "+\t\t\t\tif (key.equals(\"text-position\")) {", "+\t\t\t\t\tif (value.equals(\"super\")) style.rise = points / 2;", "+\t\t\t\t\telse if (value.equals(\"sub\")) style.rise = - points / 2;", "+\t\t\t\t} else if (key.equals(\"text-underline-type\")) {", "-\t\t\t\t\tif (attribute[1].equals(\"double\")) style.underlineStyle = SWT.UNDERLINE_DOUBLE;", "-\t\t\t\t\telse if (attribute[1].equals(\"single\")) {", "+\t\t\t\t\tif (value.equals(\"double\")) style.underlineStyle = SWT.UNDERLINE_DOUBLE;", "+\t\t\t\t\telse if (value.equals(\"single\")) {", "-\t\t\t\t} else if (attribute[0].equals(\"text-underline-style\") && attribute[1].equals(\"wave\")) {", "+\t\t\t\t} else if (key.equals(\"text-underline-style\") && value.equals(\"wave\")) {", "-\t\t\t\t} else if (attribute[0].equals(\"invalid\") && attribute[1].equals(\"true\")) {", "+\t\t\t\t} else if (key.equals(\"invalid\") && value.equals(\"true\")) {", "-\t\t\t\t} else if (attribute[0].equals(\"text-line-through-type\")) {", "-\t\t\t\t\tif (attribute[1].equals(\"single\")) style.strikeout = true;", "-\t\t\t\t} else if (attribute[0].equals(\"font-family\")) {", "+\t\t\t\t} else if (key.equals(\"text-line-through-type\")) {", "+\t\t\t\t\tif (value.equals(\"single\")) style.strikeout = true;", "+\t\t\t\t} else if (key.equals(\"font-family\")) {", "-\t\t\t\t\tfontData.setName(attribute[1]);", "-\t\t\t\t} else if (attribute[0].equals(\"font-size\")) {", "+\t\t\t\t\tfontData.setName(value);", "+\t\t\t\t} else if (key.equals(\"font-size\")) {", "-\t\t\t\t\t\tpoints = Integer.parseInt(attribute[1].replace(\"pt\", \"\"));", "+\t\t\t\t\t\tString pts = value.endsWith(\"pt\") ? value.substring(0, value.length() - 2) : value;", "+\t\t\t\t\t\tpoints = Integer.parseInt(pts);", "-\t\t\t\t} else if (attribute[0].equals(\"font-style\")) {", "-\t\t\t\t\tif (attribute[1].equals(\"italic\")) {", "+\t\t\t\t} else if (key.equals(\"font-style\")) {", "+\t\t\t\t\tif (value.equals(\"italic\")) {", "-\t\t\t\t} else if (attribute[0].equals(\"font-weight\")) {", "-\t\t\t\t\tif (attribute[1].equals(\"bold\")) {", "+\t\t\t\t} else if (key.equals(\"font-weight\")) {", "+\t\t\t\t\tif (value.equals(\"bold\")) {", "-\t\t\t\t\t\t\tint weight = Integer.parseInt(attribute[1]);", "+\t\t\t\t\t\t\tint weight = Integer.parseInt(value);", "-\t\t\t\t} else if (attribute[0].equals(\"color\")) {", "-\t\t\t\t\tstyle.foreground = colorFromString(attribute[1]);", "-\t\t\t\t} else if (attribute[0].equals(\"background-color\")) {", "-\t\t\t\t\tstyle.background = colorFromString(attribute[1]);", "+\t\t\t\t} else if (key.equals(\"color\")) {", "+\t\t\t\t\tstyle.foreground = colorFromString(value);", "+\t\t\t\t} else if (key.equals(\"background-color\")) {", "+\t\t\t\t\tstyle.background = colorFromString(value);", "-\t\t\t\t/* Pass every attribute through, in case an application wants", "-\t\t\t\t * to implement a feature in more detail than TextStyle.", "-\t\t\t\t */", "-\t\t\t\tString [] newAttributes = new String [attributes.length + 2];", "-\t\t\t\tSystem.arraycopy (attributes, 0, newAttributes, 0, attributes.length);", "-\t\t\t\tnewAttributes[attributes.length] = attribute[0];", "-\t\t\t\tnewAttributes[attributes.length + 1] = attribute[1];", "-\t\t\t\tattributes = newAttributes;", "-\t\t\tif (fontData != null) {", "-\t\t\t\tstyle.font = new Font(control.getDisplay(), fontData);", "+\t\t\tif (attributes.length > 0) {", "+\t\t\t\tevent.attributes = attributes;", "+\t\t\t\tif (fontData != null) {", "+\t\t\t\t\tstyle.font = new Font(control.getDisplay(), fontData);", "+\t\t\t\t}", "+\t\t\t\tif (!style.equals(new TextStyle())) event.textStyle = style;", "-\t\t\tevent.textStyle = style;", "-\t\t\tif (attributes.length > 0) event.attributes = attributes;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "47888b840bf67f73c8d5007dc159081a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tvoid cacheLineData(StyledTextContent printerContent)", "signatureAfterChange": " \tvoid cacheLineData(StyledText styledText)", "diff": ["-\tvoid cacheLineData(StyledTextContent printerContent) {\t", "-\t\tfor (int i = 0; i < printerContent.getLineCount(); i++) {", "-\t\t\tint lineOffset = printerContent.getOffsetAtLine(i);", "-\t\t\tString line = printerContent.getLine(i);", "-\t", "-\t\t\tif (printOptions.printLineBackground) {", "-\t\t\t\tcacheLineBackground(lineOffset, line);", "-\t\t\t}", "-\t\t\tif (printOptions.printTextBackground ||", "-\t\t\t\tprintOptions.printTextForeground ||", "-\t\t\t\tprintOptions.printTextFontStyle) {", "-\t\t\t\tcacheLineStyle(lineOffset, line);", "-\t\t\t}", "-\t\t\tif (parent.isBidi()) {", "-\t\t\t\tcacheBidiSegments(lineOffset, line);", "+\tvoid cacheLineData(StyledText styledText) {", "+\t\tStyledTextRenderer renderer = styledText.renderer;", "+\t\trenderer.copyInto(printerRenderer);", "+\t\tfontData = styledText.getFont().getFontData()[0];", "+\t\ttabLength = styledText.tabLength;", "+\t\tint lineCount = printerRenderer.lineCount;", "+\t\tif (styledText.isListening(LineGetBackground) || (styledText.isBidi() && styledText.isListening(LineGetSegments)) || styledText.isListening(LineGetStyle)) {", "+\t\t\tStyledTextContent content = printerRenderer.content;", "+\t\t\tfor (int i = 0; i < lineCount; i++) {", "+\t\t\t\tString line = content.getLine(i);", "+\t\t\t\tint lineOffset = content.getOffsetAtLine(i);", "+\t\t\t\tStyledTextEvent event = styledText.getLineBackgroundData(lineOffset, line);", "+\t\t\t\tif (event != null && event.lineBackground != null) {", "+\t\t\t\t\tprinterRenderer.setLineBackground(i, 1, event.lineBackground);", "+\t\t\t\t}", "+\t\t\t\tif (styledText.isBidi()) {", "+\t\t\t\t\tint[] segments = styledText.getBidiSegments(lineOffset, line);", "+\t\t\t\t\tprinterRenderer.setLineSegments(i, 1, segments);", "+\t\t\t\t}\t\t\t", "+\t\t\t\tevent = styledText.getLineStyleData(lineOffset, line);", "+\t\t\t\tif (event != null) {", "+\t\t\t\t\tprinterRenderer.setLineIndent(i, 1, event.indent);", "+\t\t\t\t\tprinterRenderer.setLineAlignment(i, 1, event.alignment);", "+\t\t\t\t\tprinterRenderer.setLineJustify(i, 1, event.justify);", "+\t\t\t\t\tprinterRenderer.setLineBullet(i, 1, event.bullet);", "+\t\t\t\t\tprinterRenderer.setStyleRanges(event.ranges, event.styles);", "+\t\t\t\t}", "-\t}", "+\t\tPoint screenDPI = styledText.getDisplay().getDPI();", "+\t\tPoint printerDPI = printer.getDPI();", "+\t\tresources = new Hashtable ();", "+\t\tfor (int i = 0; i < lineCount; i++) {", "+\t\t\tColor color = printerRenderer.getLineBackground(i, null);", "+\t\t\tif (color != null) {", "+\t\t\t\tif (printOptions.printLineBackground) {", "+\t\t\t\t\tColor printerColor = (Color)resources.get(color);", "+\t\t\t\t\tif (printerColor == null) {", "+\t\t\t\t\t\tprinterColor = new Color (printer, color.getRGB());", "+\t\t\t\t\t\tresources.put(color, printerColor); ", "+\t\t\t\t\t}\t\t\t\t", "+\t\t\t\t\tprinterRenderer.setLineBackground(i, 1, printerColor);", "+\t\t\t\t} else {", "+\t\t\t\t\tprinterRenderer.setLineBackground(i, 1, null);", "+\t\t\t}", "+\t\t\tint indent = printerRenderer.getLineIndent(i, 0);", "+\t\t\tif (indent != 0) {", "+\t\t\t\tprinterRenderer.setLineIndent(i, 1, indent * printerDPI.x / screenDPI.x);", "+\t\t\t}", "+\t\tStyleRange[] styles = printerRenderer.styles;", "+\t\tfor (int i = 0; i < printerRenderer.styleCount; i++) {", "+\t\t\tStyleRange style = styles[i];", "+\t\t\tFont font = style.font;", "+\t\t\tif (style.font != null) {", "+\t\t\t\tFont printerFont = (Font)resources.get(font);", "+\t\t\t\tif (printerFont == null) {", "+\t\t\t\t\tprinterFont = new Font (printer, font.getFontData());", "+\t\t\t\t\tresources.put(font, printerFont);\t\t\t\t\t", "+\t\t\t\t}", "+\t\t\t\tstyle.font = printerFont;", "+\t\t\t}", "+\t\t\tColor color = style.foreground;", "+\t\t\tif (color != null) {", "+\t\t\t\tColor printerColor = (Color)resources.get(color);", "+\t\t\t\tif (printOptions.printTextForeground) {", "+\t\t\t\t\tif (printerColor == null) {", "+\t\t\t\t\t\tprinterColor = new Color (printer, color.getRGB());", "+\t\t\t\t\t\tresources.put(color, printerColor); ", "+\t\t\t\t\t}", "+\t\t\t\t\tstyle.foreground = printerColor;", "+\t\t\t\t} else {", "+\t\t\t\t\tstyle.foreground = null;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tcolor = style.background;", "+\t\t\tif (color != null) {", "+\t\t\t\tColor printerColor = (Color)resources.get(color);", "+\t\t\t\tif (printOptions.printTextBackground) {", "+\t\t\t\t\tif (printerColor == null) {", "+\t\t\t\t\t\tprinterColor = new Color (printer, color.getRGB());", "+\t\t\t\t\t\tresources.put(color, printerColor); ", "+\t\t\t\t\t}", "+\t\t\t\t\tstyle.background = printerColor;", "+\t\t\t\t} else {", "+\t\t\t\t\tstyle.background = null;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (!printOptions.printTextFontStyle) {", "+\t\t\t\tstyle.fontStyle = SWT.NORMAL;", "+\t\t\t}", "+\t\t\tstyle.rise = style.rise * printerDPI.y / screenDPI.y;", "+\t\t\tGlyphMetrics metrics = style.metrics;", "+\t\t\tif (metrics != null) {", "+\t\t\t\tmetrics.ascent = metrics.ascent * printerDPI.y / screenDPI.y;", "+\t\t\t\tmetrics.descent = metrics.descent * printerDPI.y / screenDPI.y;", "+\t\t\t\tmetrics.width = metrics.width * printerDPI.x / screenDPI.x;", "+\t\t\t}", "+\t\t}", "+\t\tlineSpacing = styledText.lineSpacing * printerDPI.y / screenDPI.y;"]}], "num": 2456}
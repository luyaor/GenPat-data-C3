{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6713b0ede0c360b5d5573627742eafa9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3b4734920f6668a1b074d3b168ab0115", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "d8955edbe9f5c9464b222d0331748137a5a534b7", "commitAfterChange": "b533c1ac7667bcd66286ef15cde6bafc62a4cf97", "methodNumberBeforeChange": 117, "methodNumberAfterChange": 117, "signatureBeforeChange": "  @Override public boolean execute (String script)", "signatureAfterChange": "  @Override public boolean execute (String script)", "diff": ["-\tif (!IsPre_1_9) {", "+\tif (MozillaVersion.CheckVersion (MozillaVersion.VERSION_XR1_9)) {", "-\t\tboolean isXULRunner190x = false;", "-\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIScriptSecurityManager.NS_ISCRIPTSECURITYMANAGER_24_IID, result);", "-\t\tif (!(rc == XPCOM.NS_OK && result[0] != 0)) {", "-\t\t\tresult[0] = 0;", "-\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIScriptSecurityManager.NS_ISCRIPTSECURITYMANAGER_10_IID, result);", "-\t\t\tif (!(rc == XPCOM.NS_OK && result[0] != 0)) {", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIScriptSecurityManager.NS_ISCRIPTSECURITYMANAGER_191_IID, result);", "-\t\t\t\tif (!(rc == XPCOM.NS_OK && result[0] != 0)) {", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIScriptSecurityManager.NS_ISCRIPTSECURITYMANAGER_IID, result);", "-\t\t\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "-\t\t\t\t\t\tisXULRunner190x = true;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\trc = serviceManager.GetServiceByContractID (aContractID, IIDStore.GetIID (nsIScriptSecurityManager.class), result);", "-\t\t\t\trc = webBrowser.QueryInterface (nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result);", "+\t\t\t\trc = webBrowser.QueryInterface (IIDStore.GetIID (nsIInterfaceRequestor.class), result);", "-\t\t\t\trc = interfaceRequestor.GetInterface (XPCOM.NS_ISCRIPTGLOBALOBJECT_24_IID, result);", "-\t\t\t\tif (!(rc == XPCOM.NS_OK && result[0] != 0)) {", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\trc = interfaceRequestor.GetInterface (XPCOM.NS_ISCRIPTGLOBALOBJECT_10_IID, result);", "-\t\t\t\t\tif (!(rc == XPCOM.NS_OK && result[0] != 0)) {", "-\t\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\t\trc = interfaceRequestor.GetInterface (XPCOM.NS_ISCRIPTGLOBALOBJECT_1_9_2_IID, result);", "-\t\t\t\t\t\tif (!(rc == XPCOM.NS_OK && result[0] != 0)) {", "-\t\t\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\t\t\trc = interfaceRequestor.GetInterface (XPCOM.NS_ISCRIPTGLOBALOBJECT_1_9_IID, result);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t\trc = interfaceRequestor.GetInterface (IIDStore.GetIID (nsIScriptGlobalObject.class), result);", "-\t\t\t\t\tif (IsPre_24) {", "-\t\t\t\t\t\trc = (int/*64*/)XPCOM.nsIScriptGlobalObject_EnsureScriptEnvironment (scriptGlobalObject, 2); /* nsIProgrammingLanguage.JAVASCRIPT */", "-\t\t\t\t\t} else {", "+\t\t\t\t\tif (MozillaVersion.CheckVersion (MozillaVersion.VERSION_XR24)) { /* >= 24.x */", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\trc = (int/*64*/)XPCOM.nsIScriptGlobalObject_EnsureScriptEnvironment (scriptGlobalObject, 2); /* nsIProgrammingLanguage.JAVASCRIPT */", "-\t\t\t\t\t\tif (IsPre_24) {", "-\t\t\t\t\t\t\tscriptContext = XPCOM.nsIScriptGlobalObject_GetScriptContext (scriptGlobalObject, 2); /* nsIProgrammingLanguage.JAVASCRIPT */", "-\t\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (MozillaVersion.CheckVersion (MozillaVersion.VERSION_XR24)) { /* >= 24.x */", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tscriptContext = XPCOM.nsIScriptGlobalObject_GetScriptContext (scriptGlobalObject, 2); /* nsIProgrammingLanguage.JAVASCRIPT */", "-\t\t\t\t\t\t\trc = supports.QueryInterface (XPCOM.NS_ISCRIPTCONTEXT_24_IID, result);", "-\t\t\t\t\t\t\tif (!(rc == XPCOM.NS_OK && result[0] != 0)) {", "-\t\t\t\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\t\t\t\trc = supports.QueryInterface (XPCOM.NS_ISCRIPTCONTEXT_10_IID, result);", "-\t\t\t\t\t\t\t\tif (!(rc == XPCOM.NS_OK && result[0] != 0)) {", "-\t\t\t\t\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\t\t\t\t\trc = supports.QueryInterface (XPCOM.NS_ISCRIPTCONTEXT_1_9_2_IID, result);", "-\t\t\t\t\t\t\t\t\tif (!(rc == XPCOM.NS_OK && result[0] != 0)) {", "-\t\t\t\t\t\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\t\t\t\t\t\trc = supports.QueryInterface (XPCOM.NS_ISCRIPTCONTEXT_1_9_IID, result);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-", "+\t\t\t\t\t\t\trc = supports.QueryInterface (IIDStore.GetIID (nsIScriptContext.class), result);", "-\t\t\t\t\t\t\t\tif (IsPre_24) {", "-\t\t\t\t\t\t\t\t\tjsContext = XPCOM.nsIScriptContext_GetNativeContext (scriptContext);", "-\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (MozillaVersion.CheckVersion (MozillaVersion.VERSION_XR24)) { /* >= 24.x */", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tjsContext = XPCOM.nsIScriptContext_GetNativeContext (scriptContext);", "-\t\t\t\t\t\t\t\t\tif (IsPre_24) {", "-\t\t\t\t\t\t\t\t\t\tglobalJSObject = XPCOM.JS_GetGlobalObject (jsLibPath, jsContext);", "-\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tif (MozillaVersion.CheckVersion (MozillaVersion.VERSION_XR24)) { /* >= 24.x */", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tglobalJSObject = XPCOM.JS_GetGlobalObject (jsLibPath, jsContext);", "-\t\t\t\t\t\t\t\t\t\tif (IsPre_24) {", "-\t\t\t\t\t\t\t\t\t\t\taContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_CONTEXTSTACK_CONTRACTID, true);", "-\t\t\t\t\t\t\t\t\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIJSContextStack.NS_IJSCONTEXTSTACK_IID, result);", "-\t\t\t\t\t\t\t\t\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "-\t\t\t\t\t\t\t\t\t\t\t\tnsIJSContextStack stack = new nsIJSContextStack (result[0]);", "-\t\t\t\t\t\t\t\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\t\t\t\t\t\t\t\trc = stack.Push (jsContext);", "-\t\t\t\t\t\t\t\t\t\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tstack.Release ();", "-\t\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tboolean success;", "-\t\t\t\t\t\t\t\t\t\t\t\t\tif (isXULRunner190x) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess = XPCOM.JS_EvaluateUCScriptForPrincipals (jsLibPath, jsContext, globalJSObject, principals, scriptChars, length, urlbytes, 0, result) != 0;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess = XPCOM.JS_EvaluateUCScriptForPrincipals191 (jsLibPath, jsContext, globalJSObject, principals, scriptChars, length, urlbytes, 0, 0) != 0;", "-\t\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\t\t\t\t\t\t\t\t\trc = stack.Pop (result);", "-\t\t\t\t\t\t\t\t\t\t\t\t\tstack.Release ();", "-\t\t\t\t\t\t\t\t\t\t\t\t\t// should principals be Release()d too?", "-\t\t\t\t\t\t\t\t\t\t\t\t\tnew nsISupports (scriptGlobalObject).Release ();", "-\t\t\t\t\t\t\t\t\t\t\t\t\tprincipal.Release ();", "-\t\t\t\t\t\t\t\t\t\t\t\t\tserviceManager.Release ();", "-\t\t\t\t\t\t\t\t\t\t\t\t\treturn success;", "-\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tif (MozillaVersion.CheckVersion (MozillaVersion.VERSION_XR24)) { /* >= 24.x */", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t/* 1.9.x - 10.x */", "+\t\t\t\t\t\t\t\t\t\taContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_CONTEXTSTACK_CONTRACTID, true);", "+\t\t\t\t\t\t\t\t\t\trc = serviceManager.GetServiceByContractID (aContractID, IIDStore.GetIID (nsIJSContextStack.class), result);", "+\t\t\t\t\t\t\t\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) {", "+\t\t\t\t\t\t\t\t\t\t\tnsIJSContextStack stack = new nsIJSContextStack (result[0]);", "+\t\t\t\t\t\t\t\t\t\t\tresult[0] = 0;", "+\t\t\t\t\t\t\t\t\t\t\trc = stack.Push (jsContext);", "+\t\t\t\t\t\t\t\t\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\t\t\t\t\t\t\t\t\tstack.Release ();", "+\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\tboolean success;", "+\t\t\t\t\t\t\t\t\t\t\t\tif (MozillaVersion.CheckVersion (MozillaVersion.VERSION_XR1_9, true)) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess = XPCOM.JS_EvaluateUCScriptForPrincipals (jsLibPath, jsContext, globalJSObject, principals, scriptChars, length, urlbytes, 0, result) != 0;", "+\t\t\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tsuccess = XPCOM.JS_EvaluateUCScriptForPrincipals191 (jsLibPath, jsContext, globalJSObject, principals, scriptChars, length, urlbytes, 0, 0) != 0;", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t\tresult[0] = 0;", "+\t\t\t\t\t\t\t\t\t\t\t\trc = stack.Pop (result);", "+\t\t\t\t\t\t\t\t\t\t\t\tstack.Release ();", "+\t\t\t\t\t\t\t\t\t\t\t\t// should principals be Release()d too?", "+\t\t\t\t\t\t\t\t\t\t\t\tnew nsISupports (scriptGlobalObject).Release ();", "+\t\t\t\t\t\t\t\t\t\t\t\tprincipal.Release ();", "+\t\t\t\t\t\t\t\t\t\t\t\tserviceManager.Release ();", "+\t\t\t\t\t\t\t\t\t\t\t\treturn success;", "+\t\t\t\t\t\t\t\t\t\t\t}", "-\tint rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_24_IID, result);", "-\tif (rc != XPCOM.NS_OK) {", "-\t\trc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);", "-\t}", "+\tint rc = webBrowser.QueryInterface (IIDStore.GetIID (nsIWebNavigation.class), result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9361862262a2d0bd61eca801c229ea4b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "48b98e2320e6e86a6887f8923af23f6b65cabf55", "commitAfterChange": "d08804766f47b158c36407c33bd830982dde16ec", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\t\tLocationProvider = new AppFileLocProvider (mozillaPath);", "+\t\t\tString profilePath = delegate.getProfilePath ();", "+\t\t\tLocationProvider = new AppFileLocProvider (mozillaPath, profilePath, IsXULRunner);", "-\t\t\t/* extract external.xpt to temp */", "-\t\t\tString tempPath = System.getProperty (\"java.io.tmpdir\"); //$NON-NLS-1$", "-\t\t\tFile componentsDir = new File (tempPath, \"eclipse/mozillaComponents\"); //$NON-NLS-1$", "+\t\t\t/* extract external.xpt to the profile's components directory */", "+\t\t\tFile componentsDir = new File (profilePath, AppFileLocProvider.COMPONENTS_DIR);", "-\t\t\t}", "-\t\t\tif (componentsDir.exists () && componentsDir.isDirectory ()) {", "-\t\t\t\tLocationProvider.setComponentsPath (componentsDir.getAbsolutePath ());", "-\t\t/* compute the profile directory and set it on the AppFileLocProvider */", "-\t\tif (LocationProvider != null) {", "-\t\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true);", "-\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tif (result[0] == 0) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t\t}", "+\t\t/* notify observers of a new profile directory being used */", "-\t\t\tnsIDirectoryService directoryService = new nsIDirectoryService (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\trc = directoryService.QueryInterface (nsIProperties.NS_IPROPERTIES_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tif (result[0] == 0) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t\t}", "-\t\t\tdirectoryService.Release ();", "-", "-\t\t\tnsIProperties properties = new nsIProperties (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_APP_APPLICATION_REGISTRY_DIR, true);", "-\t\t\trc = properties.Get (buffer, nsIFile.NS_IFILE_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tif (result[0] == 0) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t\t}", "-\t\t\tproperties.Release ();", "-", "-\t\t\tnsIFile profileDir = new nsIFile (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tint /*long*/ path = XPCOM.nsEmbedCString_new ();", "-\t\t\trc = profileDir.GetNativePath (path);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tint length = XPCOM.nsEmbedCString_Length (path);", "-\t\t\tint /*long*/ ptr = XPCOM.nsEmbedCString_get (path);", "-\t\t\tbuffer = new byte [length];", "-\t\t\tXPCOM.memmove (buffer, ptr, length);", "-\t\t\tString profilePath = new String (MozillaDelegate.mbcsToWcs (null, buffer)) + PROFILE_DIR;", "-\t\t\tLocationProvider.setProfilePath (profilePath);", "-\t\t\tLocationProvider.isXULRunner = IsXULRunner;", "-\t\t\tXPCOM.nsEmbedCString_delete (path);", "-\t\t\tprofileDir.Release ();", "-", "-\t\t\t/* notify observers of a new profile directory being used */", "-\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "-\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tif (result[0] == 0) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "-\t\t\t}", "-", "-\t\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_DO_CHANGE, true);", "-\t\t\tlength = STARTUP.length ();", "-\t\t\tchar[] chars = new char [length + 1];", "-\t\t\tSTARTUP.getChars (0, length, chars, 0);", "-\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_AFTER_CHANGE, true);", "-\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "-\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\tbrowser.dispose ();", "-\t\t\t\terror (rc);", "-\t\t\t}", "-\t\t\tobserverService.Release ();", "-", "-\t        if (IsXULRunner) {", "-\t\t\t\tint size = XPCOM.nsDynamicFunctionLoad_sizeof ();", "-\t\t\t\t/* alloc memory for two structs, the second is empty to signify the end of the list */", "-\t\t\t\tptr = C.malloc (size * 2);", "-\t\t\t\tC.memset (ptr, 0, size * 2);", "-\t\t\t\tnsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();", "-\t\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_NotifyProfile\", true); //$NON-NLS-1$", "-\t\t\t\tfunctionLoad.functionName = C.malloc (bytes.length);", "-\t\t\t\tC.memmove (functionLoad.functionName, bytes, bytes.length);", "-\t\t\t\tfunctionLoad.function = C.malloc (C.PTR_SIZEOF);", "-\t\t\t\tC.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);", "-\t\t\t\tXPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());", "-\t\t\t\tXPCOM.XPCOMGlueLoadXULFunctions (ptr);", "-\t\t\t\tC.memmove (result, functionLoad.function, C.PTR_SIZEOF);", "-\t\t\t\tint /*long*/ functionPtr = result[0];", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tC.free (functionLoad.function);", "-\t\t\t\tC.free (functionLoad.functionName);", "-\t\t\t\tC.free (ptr);", "-\t\t\t\t/* functionPtr == 0 for xulrunner < 1.9 */", "-\t\t\t\tif (functionPtr != 0) {", "-\t\t\t\t\trc = XPCOM.Call (functionPtr);", "-\t            \tif (rc != XPCOM.NS_OK) {", "-\t            \t\tbrowser.dispose ();", "-\t            \t\terror (rc);", "-\t            \t}", "-\t\t\t\t}", "-\t        }", "+\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "+\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (rc);", "+\t\tif (result[0] == 0) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (XPCOM.NS_NOINTERFACE);", "+\t\t}", "+", "+\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "+\t\tresult[0] = 0;", "+\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_DO_CHANGE, true);", "+\t\tint length = STARTUP.length ();", "+\t\tchar[] chars = new char [length + 1];", "+\t\tSTARTUP.getChars (0, length, chars, 0);", "+\t\trc = observerService.NotifyObservers (0, buffer, chars);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (rc);", "+\t\t}", "+\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_AFTER_CHANGE, true);", "+\t\trc = observerService.NotifyObservers (0, buffer, chars);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (rc);", "+\t\t}", "+\t\tobserverService.Release ();", "+", "+        if (IsXULRunner) {", "+\t\t\tint size = XPCOM.nsDynamicFunctionLoad_sizeof ();", "+\t\t\t/* alloc memory for two structs, the second is empty to signify the end of the list */", "+\t\t\tint /*long*/ ptr = C.malloc (size * 2);", "+\t\t\tC.memset (ptr, 0, size * 2);", "+\t\t\tnsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();", "+\t\t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, \"XRE_NotifyProfile\", true); //$NON-NLS-1$", "+\t\t\tfunctionLoad.functionName = C.malloc (bytes.length);", "+\t\t\tC.memmove (functionLoad.functionName, bytes, bytes.length);", "+\t\t\tfunctionLoad.function = C.malloc (C.PTR_SIZEOF);", "+\t\t\tC.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);", "+\t\t\tXPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());", "+\t\t\tXPCOM.XPCOMGlueLoadXULFunctions (ptr);", "+\t\t\tC.memmove (result, functionLoad.function, C.PTR_SIZEOF);", "+\t\t\tint /*long*/ functionPtr = result[0];", "+\t\t\tresult[0] = 0;", "+\t\t\tC.free (functionLoad.function);", "+\t\t\tC.free (functionLoad.functionName);", "+\t\t\tC.free (ptr);", "+\t\t\t/* functionPtr == 0 for xulrunner < 1.9 */", "+\t\t\tif (functionPtr != 0) {", "+\t\t\t\trc = XPCOM.Call (functionPtr);", "+            \tif (rc != XPCOM.NS_OK) {", "+            \t\tbrowser.dispose ();", "+            \t\terror (rc);", "+            \t}", "+\t\t\t}", "+        }", "-\t\tbyte[] buffer = new byte[1];", "+\t\tbuffer = new byte[1];", "-\t\t\tint length = XPCOM.strlen_PRUnichar (result[0]);", "+\t\t\tlength = XPCOM.strlen_PRUnichar (result[0]);", "-\t\t\tint length = newLocales.length ();", "+\t\t\tlength = newLocales.length ();", "-\t\t\tint length = XPCOM.strlen_PRUnichar (result[0]);", "+\t\t\tlength = XPCOM.strlen_PRUnichar (result[0]);", "-\t\t\tint length = newCharset.length ();", "+\t\t\tlength = newCharset.length ();", "-\t\t\tint length = proxyHost.length ();", "+\t\t\tlength = proxyHost.length ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "907df55469b2a5522f8355c8ea2c61d4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "844c3cba85108b0943332ca208e3882c23f3abd9", "commitAfterChange": "c1cfa6ebfb6b2c3c2b2ce9dd49a958a24883f0cd", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["+", "-\t\tboolean initLoaded = false;", "-\t\tboolean isXULRunner = false;", "+\t\tLoadLibraries ();", "-\t\tString greInitialized = System.getProperty (GRE_INITIALIZED);", "-\t\tif (TRUE.equals (greInitialized)) {", "-\t\t\t/* ", "-\t\t\t * Another browser has already initialized xulrunner in this process,", "-\t\t\t * so just bind to it instead of trying to initialize a new one.", "-\t\t\t */", "-\t\t\tInitialized = true;", "-\t\t}", "-", "-\t\tString mozillaPath = System.getProperty (XULRUNNER_PATH);", "-\t\t/*", "-\t\t* Browser clients that ship XULRunner in a plug-in must have an opportunity ", "-\t\t* to set the org.eclipse.swt.browser.XULRunnerPath system property to point", "-\t\t* at their XULRunner before the first Mozilla-based Browser is created.  To", "-\t\t* facilitate this, reflection is used to reference non-existent class", "-\t\t* org.eclipse.swt.browser.XULRunnerInitializer the first time a Mozilla-", "-\t\t* based Browser is created.   A client wishing to use this hook can do so", "-\t\t* by creating a fragment of org.eclipse.swt that implements this class and", "-\t\t* sets the system property in its static initializer.", "-\t\t*/", "-\t\tif (mozillaPath == null) {", "-\t\t\ttry {", "-\t\t\t\tClass.forName (\"org.eclipse.swt.browser.XULRunnerInitializer\"); //$NON-NLS-1$", "-\t\t\t\tmozillaPath = System.getProperty (XULRUNNER_PATH);", "-\t\t\t} catch (ClassNotFoundException e) {", "-\t\t\t\t/* no fragment is providing this class, which is the typical case */", "-\t\t\t}", "-\t\t}", "-", "-\t\tif (mozillaPath == null) {", "-\t\t\ttry {", "-\t\t\t\tString libName = delegate.getSWTInitLibraryName ();", "-\t\t\t\tLibrary.loadLibrary (libName);", "-\t\t\t\tinitLoaded = true;", "-\t\t\t} catch (UnsatisfiedLinkError e) {", "-\t\t\t\t/* ", "-\t\t\t\t* If this library failed to load then do not attempt to detect a", "-\t\t\t\t* xulrunner to use.  The Browser may still be usable if MOZILLA_FIVE_HOME", "-\t\t\t\t* points at a GRE. ", "-\t\t\t\t*/", "-\t\t\t}", "-\t\t} else {", "-\t\t\t/* ensure that client-supplied path is using correct separators */", "-\t\t\tif (SEPARATOR_OS == '/') {", "-\t\t\t\tmozillaPath = mozillaPath.replace ('\\\\', SEPARATOR_OS);", "-\t\t\t} else {", "-\t\t\t\tmozillaPath = mozillaPath.replace ('/', SEPARATOR_OS);", "-\t\t\t}", "-", "-\t\t\tmozillaPath += SEPARATOR_OS + MozillaDelegate.getLibraryName ();", "-\t\t\tisXULRunner = true;", "-\t\t}", "-", "-\t\tif (initLoaded) {", "-\t\t\t/* attempt to discover a XULRunner to use as the GRE */", "-\t\t\tmozillaPath = initDiscoverXULRunner ();", "-\t\t\tisXULRunner = mozillaPath.length () > 0;", "-", "-\t\t\t/*", "-\t\t\t * Test whether the detected XULRunner can be used as the GRE before loading swt's", "-\t\t\t * XULRunner library.  If it cannot be used then fall back to attempting to use", "-\t\t\t * the GRE pointed to by MOZILLA_FIVE_HOME.", "-\t\t\t * ", "-\t\t\t * One case where this will fail is attempting to use a 64-bit xulrunner while swt", "-\t\t\t * is running in 32-bit mode, or vice versa.", "-\t\t\t */", "-\t\t\tif (isXULRunner) {", "-\t\t\t\tbyte[] path = MozillaDelegate.wcsToMbcs (null, mozillaPath, true);", "-\t\t\t\tint rc = XPCOMInit.XPCOMGlueStartup (path);", "-\t\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\t\tmozillaPath = mozillaPath.substring (0, mozillaPath.lastIndexOf (SEPARATOR_OS));", "-\t\t\t\t\tif (Device.DEBUG) System.out.println (\"cannot use detected XULRunner: \" + mozillaPath); //$NON-NLS-1$", "-", "-\t\t\t\t\t/* attempt to XPCOMGlueStartup the GRE pointed at by MOZILLA_FIVE_HOME */", "-\t\t\t\t\tint /*long*/ ptr = C.getenv (MozillaDelegate.wcsToMbcs (null, XPCOM.MOZILLA_FIVE_HOME, true));", "-\t\t\t\t\tif (ptr == 0) {", "-\t\t\t\t\t\tisXULRunner = false;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tint length = C.strlen (ptr);", "-\t\t\t\t\t\tbyte[] buffer = new byte[length];", "-\t\t\t\t\t\tC.memmove (buffer, ptr, length);", "-\t\t\t\t\t\tmozillaPath = new String (MozillaDelegate.mbcsToWcs (null, buffer));", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * Attempting to XPCOMGlueStartup a mozilla-based GRE != xulrunner can", "-\t\t\t\t\t\t * crash, so don't attempt unless the GRE appears to be xulrunner.", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (mozillaPath.indexOf(\"xulrunner\") == -1) { //$NON-NLS-1$", "-\t\t\t\t\t\t\tisXULRunner = false;\t", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tmozillaPath += SEPARATOR_OS + MozillaDelegate.getLibraryName ();", "-\t\t\t\t\t\t\tpath = MozillaDelegate.wcsToMbcs (null, mozillaPath, true);", "-\t\t\t\t\t\t\trc = XPCOMInit.XPCOMGlueStartup (path);", "-\t\t\t\t\t\t\tif (rc == XPCOM.NS_OK) {", "-\t\t\t\t\t\t\t\t/* ensure that client-supplied path is using correct separators */", "-\t\t\t\t\t\t\t\tif (SEPARATOR_OS == '/') {", "-\t\t\t\t\t\t\t\t\tmozillaPath = mozillaPath.replace ('\\\\', SEPARATOR_OS);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tmozillaPath = mozillaPath.replace ('/', SEPARATOR_OS);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tisXULRunner = false;", "-\t\t\t\t\t\t\t\tmozillaPath = mozillaPath.substring (0, mozillaPath.lastIndexOf (SEPARATOR_OS));", "-\t\t\t\t\t\t\t\tif (Device.DEBUG) System.out.println (\"failed to start as XULRunner: \" + mozillaPath); //$NON-NLS-1$", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} ", "-\t\t\t\t}", "-\t\t\t\tif (isXULRunner) {", "-\t\t\t\t\tXPCOMInitWasGlued = true;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-", "-\t\tif (isXULRunner) {", "+\t\tif (IsXULRunner) {", "-\t\t\tmozillaPath = initXULRunner (mozillaPath);", "+\t\t\tMozillaPath = initXULRunner (MozillaPath);", "-\t\t\t\tString errorString = (mozillaPath != null && mozillaPath.length () > 0) ?", "-\t\t\t\t\t\" [Failed to use detected XULRunner: \" + mozillaPath + \"]\" :", "+\t\t\t\tString errorString = (MozillaPath != null && MozillaPath.length () > 0) ?", "+\t\t\t\t\t\" [Failed to use detected XULRunner: \" + MozillaPath + \"]\" :", "-\t\t\tmozillaPath = initMozilla (mozillaPath);", "+\t\t\tMozillaPath = initMozilla (MozillaPath);", "-\t\t\tLocationProvider = new AppFileLocProvider (mozillaPath, profilePath, isXULRunner);", "+\t\t\tLocationProvider = new AppFileLocProvider (MozillaPath, profilePath, IsXULRunner);", "-\t\t\tinitXPCOM (mozillaPath, isXULRunner);", "+\t\t\tinitXPCOM (MozillaPath, IsXULRunner);", "-\t\tif (isXULRunner) initJavaXPCOM (mozillaPath);", "+\t\tif (IsXULRunner) initJavaXPCOM (MozillaPath);", "-\t\tinitProfile (serviceManager, isXULRunner);", "+\t\tinitProfile (serviceManager, IsXULRunner);", "-\t\t\tinitFactories (serviceManager, componentManager, isXULRunner);", "+\t\t\tinitFactories (serviceManager, componentManager, IsXULRunner);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b6916a4d731988e4e8b72a038fc27c7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/ViewForm.java", "commitBeforeChange": "8fd543c924826dfc972ef6a8022268f1984aa82b", "commitAfterChange": "a6b48034db4656132c943ef122f732c8fe096a59", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public Point computeSize(int wHint, int hHint, boolean changed)", "signatureAfterChange": " void onResize()", "diff": ["-public Point computeSize(int wHint, int hHint, boolean changed) {", "-\tcheckWidget();", "-\t// size of title bar area", "-\tPoint leftSize = new Point(0, 0);", "-\tif (topLeft != null) {", "-\t\tleftSize = topLeft.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t}", "-\tPoint centerSize = new Point(0, 0);", "-\tif (topCenter != null) {", "-\t\t centerSize = topCenter.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t}", "-\tPoint rightSize = new Point(0, 0);", "-\tif (topRight != null) {", "-\t\t rightSize = topRight.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t}", "-\tPoint size = new Point(0, 0);", "-\t// calculate width of title bar", "-\tif (separateTopCenter ||", "-\t    (wHint != SWT.DEFAULT &&  leftSize.x + centerSize.x + rightSize.x > wHint)) {", "-\t\tsize.x = leftSize.x + rightSize.x;", "-\t\tif (leftSize.x > 0 && rightSize.x > 0) size.x += horizontalSpacing;", "-\t\tsize.x = Math.max(centerSize.x, size.x);", "-\t\tsize.y = Math.max(leftSize.y, rightSize.y);", "-\t\tif (topCenter != null){", "-\t\t\tsize.y += centerSize.y;", "-\t\t\tif (topLeft != null ||topRight != null)size.y += verticalSpacing;", "-\t\t}\t", "-\t} else {", "-\t\tsize.x = leftSize.x + centerSize.x + rightSize.x;", "-\t\tint count = -1;", "-\t\tif (leftSize.x > 0) count++;", "-\t\tif (centerSize.x > 0) count++;", "-\t\tif (rightSize.x > 0) count++;", "-\t\tif (count > 0) size.x += count * horizontalSpacing;", "-\t\tsize.y = Math.max(leftSize.y, Math.max(centerSize.y, rightSize.y));", "-\t}", "-\t", "-\tif (content != null) {", "-\t\tif (topLeft != null || topRight != null || topCenter != null) size.y += 1; // allow space for a vertical separator", "-\t\tPoint contentSize = new Point(0, 0);", "-\t\tcontentSize = content.computeSize(SWT.DEFAULT, SWT.DEFAULT); ", "-\t\tsize.x = Math.max (size.x, contentSize.x);", "-\t\tsize.y += contentSize.y;", "-\t\tif (size.y > contentSize.y) size.y += verticalSpacing;", "-\t}", "-\t", "-\tsize.x += 2*marginWidth;", "-\tsize.y += 2*marginHeight;", "-\t", "-\tif (wHint != SWT.DEFAULT) size.x  = wHint;", "-\tif (hHint != SWT.DEFAULT) size.y = hHint;", "-\t", "-\tRectangle trim = computeTrim(0, 0, size.x, size.y);", "-\treturn new Point (trim.width, trim.height);", "-}", "+\tPoint size = getSize();", "+\tif (oldSize == null || oldSize.x == 0 || oldSize.y == 0) {", "+\t\tif (oldSize.x < size.x) {", "+\t\t\twidth = size.x - oldSize.x + borderRight + highlight;", "+\t\t} else if (oldSize.x > size.x) {", "+\t\tredraw(size.x - width, 0, width, size.y, false);", "+\t\tif (oldSize.y < size.y) {", "+\t\t\theight = size.y - oldSize.y + borderBottom + highlight;\t\t", "+\t\tif (oldSize.y > size.y) {", "+\t\tredraw(0, size.y - height, size.x, height, false);", "+\toldSize = size;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d79da46e3cc0aa577d2a1237e4ab4f2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "d569a8e4e3f708a454ad8d2b1a32242d0ad822fd", "commitAfterChange": "80def70afe4125adafe1eb350e7d5315beb976e6", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public static Program findProgram (String extension)", "signatureAfterChange": " public static Program findProgram (String extension)", "diff": ["-\tif (extension.charAt(0) != '.') extension = \".\" + extension;", "-\tNSAutoreleasePool pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "-\ttry {", "-\t\tNSWorkspace workspace = NSWorkspace.sharedWorkspace();", "-\t\tint /*long*/ appName = OS.malloc(C.PTR_SIZEOF);", "-\t\tint /*long*/ type = OS.malloc(C.PTR_SIZEOF);", "-\t\tNSString temp = new NSString(OS.NSTemporaryDirectory());", "-\t\tNSString fileName = NSString.stringWith(\"swt\" + System.currentTimeMillis() + extension);", "-\t\tNSString fullPath = temp.stringByAppendingPathComponent(fileName);", "-\t\tNSFileManager fileManager = NSFileManager.defaultManager();", "-\t\tfileManager.createFileAtPath(fullPath, null, null);", "-\t\tif (!workspace.getInfoForFile(fullPath, appName, type)) return null;", "-\t\tfileManager.removeItemAtPath(fullPath, 0);", "-\t\tint /*long*/ [] buffer = new int /*long*/[1];", "-\t\tint /*long*/ [] buffer2 = new int /*long*/[1];", "-\t\tOS.memmove(buffer, appName, C.PTR_SIZEOF);", "-\t\tOS.memmove(buffer2, type, C.PTR_SIZEOF);", "-\t\tOS.free(appName);", "-\t\tOS.free(type);", "-\t\tif (buffer [0] != 0) {", "-\t\t\tNSString appPath = new NSString(buffer[0]);", "-\t\t\tNSString appType = new NSString(buffer2[0]);", "-\t\t\tNSBundle bundle = NSBundle.bundleWithPath(appPath);", "-\t\t\tif (bundle != null) {", "-\t\t\t\tNSString textEditId = NSString.stringWith(\"com.apple.TextEdit\");", "-\t\t\t\tNSString bundleId = NSString.stringWith(\"CFBundleIdentifier\");", "-\t\t\t\tNSDictionary infoDictionary = bundle.infoDictionary();", "-\t\t\t\tboolean textEdit = textEditId.isEqual(infoDictionary.objectForKey(bundleId));", "-\t\t\t\tif (!textEdit) return getProgram(bundle);", "-\t\t\t\t// if text edit, make sure we're really one of the extensions that", "-\t\t\t\t// text edit says it can handle.", "-\t\t\t\tNSString CFBundleDocumentTypes = NSString.stringWith(\"CFBundleDocumentTypes\");", "-\t\t\t\tNSString CFBundleTypeExtensions = NSString.stringWith(\"CFBundleTypeExtensions\");", "-\t\t\t\tid id = infoDictionary.objectForKey(CFBundleDocumentTypes);", "-\t\t\t\tif (id != null) {", "-\t\t\t\t\tNSDictionary documentTypes = new NSDictionary(id.id);", "-\t\t\t\t\tNSEnumerator documentTypesEnumerator = documentTypes.objectEnumerator();", "-\t\t\t\t\twhile ((id = documentTypesEnumerator.nextObject()) != null) {", "-\t\t\t\t\t\tNSDictionary documentType = new NSDictionary(id.id);", "-\t\t\t\t\t\tNSDictionary supportedExtensions = new NSDictionary(documentType.objectForKey(CFBundleTypeExtensions));", "-\t\t\t\t\t\tif (supportedExtensions != null) {", "-\t\t\t\t\t\t\tNSEnumerator supportedExtensionsEnumerator = supportedExtensions.objectEnumerator();", "-\t\t\t\t\t\t\tif (supportedExtensionsEnumerator != null) {", "-\t\t\t\t\t\t\t\tid ext = null;", "-\t\t\t\t\t\t\t\twhile((ext = supportedExtensionsEnumerator.nextObject()) != null) {", "-\t\t\t\t\t\t\t\t\tNSString strExt = new NSString(ext);", "-\t\t\t\t\t\t\t\t\tif (appType.isEqual(strExt)) return getProgram (bundle);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\tProgram program = null;", "+\tchar[] chars;", "+\tif (extension.charAt (0) != '.') {", "+\t\tchars = new char[extension.length()];", "+\t\textension.getChars(0, chars.length, chars, 0);", "+\t} else {", "+\t\tchars = new char[extension.length() - 1];", "+\t\textension.getChars(1, extension.length(), chars, 0);\t\t", "+\t}", "+\tNSString ext = NSString.stringWithCharacters(chars, chars.length);", "+\tif (ext != null) {", "+\t\tbyte[] fsRef = new byte[80];", "+\t\tif (OS.LSGetApplicationForInfo(OS.kLSUnknownType, OS.kLSUnknownCreator, ext.id, OS.kLSRolesAll, fsRef, null) == OS.noErr) {", "+\t\t\tint /*long*/ url = OS.CFURLCreateFromFSRef(OS.kCFAllocatorDefault(), fsRef);", "+\t\t\tif (url != 0) {", "+\t\t\t\tNSString bundlePath = new NSURL(url).path();", "+\t\t\t\tNSBundle bundle = NSBundle.bundleWithPath(bundlePath);", "+\t\t\t\tprogram = getProgram(bundle);", "+\t\t\t\tOS.CFRelease(url);", "-\t\treturn null;", "-\t} finally {", "-\t\tpool.release();", "+\treturn program;"]}], "num": 3535}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d364d3c32161eed042eebdcd2446f446", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9210e5e858e1f6d78b67fa5fda072198", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "3b0f621c65909d88d57dcb3517eafeb717bf8adf", "commitAfterChange": "42a346927a113e8a87d02326584023043992e4a2", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": "  LRESULT WM_SETCURSOR (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_SETCURSOR (int wParam, int lParam)", "diff": ["-\t\t\t\tif (OS.GetCursorPos (pt)) {", "-\t\t\t\t\tOS.ScreenToClient (handle, pt);", "-\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\tOS.GetClientRect (handle, rect);", "-\t\t\t\t\tif (OS.PtInRect (rect, pt)) {", "-\t\t\t\t\t\tOS.SetCursor (cursor.handle);", "-\t\t\t\t\t\tswitch (msg) {", "-\t\t\t\t\t\t\tcase OS.WM_LBUTTONDOWN:", "-\t\t\t\t\t\t\tcase OS.WM_RBUTTONDOWN:", "-\t\t\t\t\t\t\tcase OS.WM_MBUTTONDOWN:", "-\t\t\t\t\t\t\tcase OS.WM_XBUTTONDOWN:", "-\t\t\t\t\t\t\t\tOS.MessageBeep (OS.MB_OK);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\treturn LRESULT.ONE;", "+\t\t\t\tint pos = OS.GetMessagePos ();", "+\t\t\t\tpt.x = (short) (pos & 0xFFFF);", "+\t\t\t\tpt.y = (short) (pos >> 16);", "+\t\t\t\tOS.ScreenToClient (handle, pt);", "+\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\t\tif (OS.PtInRect (rect, pt)) {", "+\t\t\t\t\tOS.SetCursor (cursor.handle);", "+\t\t\t\t\tswitch (msg) {", "+\t\t\t\t\t\tcase OS.WM_LBUTTONDOWN:", "+\t\t\t\t\t\tcase OS.WM_RBUTTONDOWN:", "+\t\t\t\t\t\tcase OS.WM_MBUTTONDOWN:", "+\t\t\t\t\t\tcase OS.WM_XBUTTONDOWN:", "+\t\t\t\t\t\t\tOS.MessageBeep (OS.MB_OK);", "+\t\t\t\t\treturn LRESULT.ONE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b37bf7998734f890f5e8bdf4921f6171", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "f512a1c18cede51efc08a4723c1f52693141c1bd", "commitAfterChange": "3759191e09fba6c3d3573e58fce6f7627bdc0ffa", "methodNumberBeforeChange": 145, "methodNumberAfterChange": 145, "signatureBeforeChange": "  LRESULT wmNotifyChild (NMHDR hdr, int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (NMHDR hdr, int wParam, int lParam)", "diff": ["-\t\t\tif (hooks (SWT.DefaultSelection)) return LRESULT.ONE;", "+\t\t\t/*", "+\t\t\t* When the user double clicks on a tree item", "+\t\t\t* or a line beside the item, the window proc", "+\t\t\t* for the tree collapses or expland the branch.", "+\t\t\t* When application code associates an action", "+\t\t\t* with double clicking, then the tree expand", "+\t\t\t* is unexpected and unwanted.  The fix is to", "+\t\t\t* avoid the operation by testing to see whether", "+\t\t\t* the mouse was inside a tree item.", "+\t\t\t*/", "+\t\t\tif (hooks (SWT.DefaultSelection)) {", "+\t\t\t\tPOINT pt = new POINT ();", "+\t\t\t\tint pos = OS.GetMessagePos ();", "+\t\t\t\tpt.x = (short) (pos & 0xFFFF);", "+\t\t\t\tpt.y = (short) (pos >> 16);", "+\t\t\t\tOS.ScreenToClient (handle, pt);", "+\t\t\t\tTVHITTESTINFO lpht = new TVHITTESTINFO ();", "+\t\t\t\tlpht.x = pt.x;", "+\t\t\t\tlpht.y = pt.y;", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_HITTEST, 0, lpht);", "+\t\t\t\tif (lpht.hItem != 0 && (lpht.flags & OS.TVHT_ONITEM) != 0) {", "+\t\t\t\t\treturn LRESULT.ONE;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e46d2a36deaefc65d866b909496838b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "3e0761174be0fece9e72ba33278fba6a309d93c2", "commitAfterChange": "cf16d9c5894426fff41434c80f15d96ea4812bee", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "  LRESULT WM_SYSCOMMAND (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_SYSCOMMAND (int wParam, int lParam)", "diff": ["-\t* NOTE:  The default window proc activates the next top-level", "-\t* window in the Z order while ShowWindow () with SW_SHOWMINIMIZED", "-\t* does not.  There is no fix for this at this time.", "+\t* NOTE:  The default window proc activates the next", "+\t* top-level window in the Z-order while ShowWindow()", "+\t* with SW_SHOWMINIMIZED does not.  There is no fix for", "+\t* this at this time.", "-\tint cmd = wParam & 0xFFF0;", "-\tswitch (cmd) {", "-\t\tcase OS.SC_MINIMIZE:", "-\t\t\tlong memory = Runtime.getRuntime ().totalMemory ();", "-\t\t\tif (memory >= 32 * 1024 * 1024) {", "-\t\t\t\tOS.ShowWindow (handle, OS.SW_SHOWMINIMIZED);", "-\t\t\t\treturn LRESULT.ZERO;", "-\t\t\t}", "+\tif (OS.IsWinNT) {", "+\t\tint cmd = wParam & 0xFFF0;", "+\t\tswitch (cmd) {", "+\t\t\tcase OS.SC_MINIMIZE:", "+\t\t\t\tlong memory = Runtime.getRuntime ().totalMemory ();", "+\t\t\t\tif (memory >= 32 * 1024 * 1024) {", "+\t\t\t\t\tOS.ShowWindow (handle, OS.SW_SHOWMINIMIZED);", "+\t\t\t\t\treturn LRESULT.ZERO;", "+\t\t\t\t}", "+\t\t}"]}], "num": 20283}
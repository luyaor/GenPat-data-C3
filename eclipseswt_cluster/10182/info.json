{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "626f07003ecb5e1cb90f0efc0f427eaa", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ad134af76236108e0a6b53c628d3cc4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TableDragUnderEffect.java", "commitBeforeChange": "63402932f4d7a2fe6eda19dc05c2a513ed8a0519", "commitAfterChange": "da97dbe5133d08e305a00a80c45d4dd608fb5936", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " void show(int effect, int x, int y)", "signatureAfterChange": " public void show(int effect, int x, int y)", "diff": ["-void show(int effect, int x, int y) {", "-\tTableItem item = findItem(x, y);", "-\tif (item == null) effect = DND.FEEDBACK_NONE;", "-\tif (currentEffect == DND.FEEDBACK_NONE && effect != DND.FEEDBACK_NONE) {", "-\t\tselection = table.getSelectionIndices();", "-\t\ttable.deselectAll();", "-\t}", "-\tscrollHover(effect, item, x, y);", "-\tsetDragUnderEffect(effect, item);", "-\tif (currentEffect != DND.FEEDBACK_NONE && effect == DND.FEEDBACK_NONE) {", "-\t\ttable.select(selection);", "-\t\tselection = new int[0];", "-\t}", "-\tcurrentEffect = effect;", "+public void show(int effect, int x, int y) {", "+\teffect = checkEffect(effect);", "+\tint handle = table.handle;", "+\tLVHITTESTINFO pinfo = new LVHITTESTINFO();", "+\tpinfo.x = coordinates.x;", "+\tpinfo.y = coordinates.y;", "+\tOS.SendMessage(handle, OS.LVM_HITTEST, 0, pinfo);\t", "+\t\tscrollIndex = -1;", "+\t} else {", "+\t\tif (pinfo.iItem != -1 && scrollIndex == pinfo.iItem && scrollBeginTime != 0) {", "+\t\t\tif (System.currentTimeMillis() >= scrollBeginTime) {", "+\t\t\t\tint top = Math.max (0, OS.SendMessage (handle, OS.LVM_GETTOPINDEX, 0, 0));", "+\t\t\t\tint count = OS.SendMessage (handle, OS.LVM_GETITEMCOUNT, 0, 0);", "+\t\t\t\tint index = (scrollIndex - 1 < top) ? Math.max(0, scrollIndex - 1) : Math.min(count - 1, scrollIndex + 1);", "+\t\t\t\tOS.SendMessage (handle, OS.LVM_ENSUREVISIBLE, index, 0);", "+\t\t\t\tscrollBeginTime = 0;", "+\t\t\t\tscrollIndex = -1;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tscrollBeginTime = System.currentTimeMillis() + SCROLL_HYSTERESIS;", "+\t\t\tscrollIndex = pinfo.iItem;", "+\tLVITEM lvItem = new LVITEM ();", "+\tlvItem.stateMask = OS.LVIS_DROPHILITED;", "+\tOS.SendMessage (handle, OS.LVM_SETITEMSTATE, -1, lvItem);", "+\tif (pinfo.iItem != -1 && (effect & DND.FEEDBACK_SELECT) != 0) {", "+\t\tlvItem.state = OS.LVIS_DROPHILITED;", "+\t\tOS.SendMessage (handle, OS.LVM_SETITEMSTATE, pinfo.iItem, lvItem);", "+// Insert mark only supported on Windows XP with manifest", "+//\tif (OS.COMCTL32_MAJOR >= 6) {", "+//\t\tif ((effect & DND.FEEDBACK_INSERT_BEFORE) != 0 || (effect & DND.FEEDBACK_INSERT_AFTER) != 0) {", "+//\t\t\tLVINSERTMARK lvinsertmark = new LVINSERTMARK();", "+//\t\t\tlvinsertmark.cbSize = LVINSERTMARK.sizeof;", "+//\t\t\tlvinsertmark.dwFlags = (effect & DND.FEEDBACK_INSERT_BEFORE) != 0 ? 0 : OS.LVIM_AFTER;", "+//\t\t\tlvinsertmark.iItem = pinfo.iItem == -1 ? 0 : pinfo.iItem;", "+//\t\t\tint hItem = pinfo.iItem;", "+//\t\t\tOS.SendMessage (handle, OS.LVM_SETINSERTMARK, 0, lvinsertmark);", "+//\t\t} else {", "+//\t\t\tOS.SendMessage (handle, OS.LVM_SETINSERTMARK, 0, 0);", "+//\t\t}", "+//\t}", "+\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58faf5cca83cac51b3103289a4b66852", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TreeDragUnderEffect.java", "commitBeforeChange": "63402932f4d7a2fe6eda19dc05c2a513ed8a0519", "commitAfterChange": "da97dbe5133d08e305a00a80c45d4dd608fb5936", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " void show(int effect, int x, int y)", "signatureAfterChange": "  void show(int effect, int x, int y)", "diff": ["-void show(int effect, int x, int y) {", "-\teffect = checkEffect(effect);", "-\tTreeItem item = findItem(x, y);", "-\tif (item == null) effect = DND.FEEDBACK_NONE;", "-\tif (currentEffect == DND.FEEDBACK_NONE && effect != DND.FEEDBACK_NONE) {", "-\t\tselection = tree.getSelection();", "-\t\ttree.deselectAll();", "-\t}", "-\tscrollHover(effect, item, x, y);", "-\texpandHover(effect, item, x, y);", "-\tsetDragUnderEffect(effect, item);", "-\tif (currentEffect != DND.FEEDBACK_NONE && effect == DND.FEEDBACK_NONE) {", "-\t\tfor (int i = 0; i < selection.length; i++) {", "-\t\t\tTVITEM tvItem = new TVITEM ();", "-\t\t\ttvItem.mask = OS.TVIF_STATE;", "-\t\t\ttvItem.state = OS.TVIS_SELECTED;", "-\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;", "-\t\t\ttvItem.hItem = selection[i].handle;", "-\t\t\tOS.SendMessage (tree.handle, OS.TVM_SETITEM, 0, tvItem);", "-\t\t}", "-\t\tselection = new TreeItem[0];", "-\t}", "-\tcurrentEffect = effect;", "-}", "+", "+void show(int effect, int x, int y) {", "+\teffect = checkEffect(effect);", "+\tint handle = tree.handle;", "+\tTVHITTESTINFO lpht = new TVHITTESTINFO ();", "+\tlpht.x = coordinates.x;", "+\tlpht.y = coordinates.y;", "+\tOS.SendMessage (handle, OS.TVM_HITTEST, 0, lpht);", "+\tint hItem = lpht.hItem;", "+\t\tscrollIndex = -1;", "+\t} else {", "+\t\tif (hItem != -1 && scrollIndex == hItem && scrollBeginTime != 0) {", "+\t\t\tif (System.currentTimeMillis() >= scrollBeginTime) {", "+\t\t\t\tint topItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_FIRSTVISIBLE, 0);", "+\t\t\t\tint nextItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, hItem == topItem ? OS.TVGN_PREVIOUSVISIBLE : OS.TVGN_NEXTVISIBLE, hItem);", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_ENSUREVISIBLE, 0, nextItem);", "+\t\t\t\tscrollBeginTime = 0;", "+\t\t\t\tscrollIndex = -1;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tscrollBeginTime = System.currentTimeMillis() + SCROLL_HYSTERESIS;", "+\t\t\tscrollIndex = hItem;", "+\t\texpandIndex = -1;", "+\t} else {", "+\t\tif (hItem != -1 && expandIndex == hItem && expandBeginTime != 0) {", "+\t\t\tif (System.currentTimeMillis() >= expandBeginTime) {", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_EXPAND, OS.TVE_EXPAND, hItem);", "+\t\t\t\texpandBeginTime = 0;", "+\t\t\t\texpandIndex = -1;", "+\t\t\t}", "+\t\t} else {", "+\t\t\texpandBeginTime = System.currentTimeMillis() + EXPAND_HYSTERESIS;", "+\t\t\texpandIndex = hItem;", "+\tif (dropIndex != -1 && (dropIndex != hItem || (effect & DND.FEEDBACK_SELECT) == 0)) {", "+\t\tTVITEM tvItem = new TVITEM ();", "+\t\ttvItem.hItem = dropIndex;", "+\t\ttvItem.mask = OS.TVIF_STATE;", "+\t\ttvItem.stateMask = OS.TVIS_DROPHILITED;", "+\t\ttvItem.state = 0;", "+\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);", "+\t\tdropIndex = -1;", "+\t}", "+\tif (hItem != -1 && hItem != dropIndex && (effect & DND.FEEDBACK_SELECT) != 0) {", "+\t\tTVITEM tvItem = new TVITEM ();", "+\t\ttvItem.hItem = hItem;", "+\t\ttvItem.mask = OS.TVIF_STATE;", "+\t\ttvItem.stateMask = OS.TVIS_DROPHILITED;", "+\t\ttvItem.state = OS.TVIS_DROPHILITED;", "+\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);", "+\t\tdropIndex = hItem;", "+\t}", "+\tif ((effect & DND.FEEDBACK_INSERT_BEFORE) != 0 || (effect & DND.FEEDBACK_INSERT_AFTER) != 0) {", "+\t\tboolean before = (effect & DND.FEEDBACK_INSERT_BEFORE) != 0;", "+\t\tOS.SendMessage (handle, OS.TVM_SETINSERTMARK, (before) ? 0 : 1, hItem);", "+\t} else {", "+\t\tOS.SendMessage (handle, OS.TVM_SETINSERTMARK, 0, 0);", "+\t}", "+\treturn;"]}], "num": 10182}
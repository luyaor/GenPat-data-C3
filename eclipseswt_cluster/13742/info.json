{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5c2f69bb1544aba1a0e7180a23ddb704", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ea2f27ac057b41e1bc220e140d51497", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/org/eclipse/swt/examples/fileviewer/FileViewer.java", "commitBeforeChange": "d4c7da99373f8f0ef2ecf3082d69b8331929a5f1", "commitAfterChange": "e7fb43dbb2484659429530f9cab714cb6e3de9f3", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "\r \tprivate void dropTargetHandleDrop(DropTargetEvent event, File targetFile)", "signatureAfterChange": "\r \tprivate void dropTargetHandleDrop(DropTargetEvent event, File targetFile)", "diff": ["+\t\t// Copy each file\r", "+\t\tVector /* of File */ processedFiles = new Vector();\r", "-\t\r", "-\t\t\t// Copy each file\r", "-\t\t\tif (! copyFileStructure(source, dest)) {\r", "-\t\t\t\tevent.detail = DND.DROP_NONE; // forbid the source from deleting files on us\r", "-\t\t\t\tMessageBox box = new MessageBox(shell, SWT.ICON_ERROR | SWT.OK);\r", "-\t\t\t\tbox.setText(getResourceString(\"dialog.FailedCopy.title\"));\r", "-\t\t\t\tbox.setMessage(getResourceString(\"dialog.FailedCopy.description\",\r", "-\t\t\t\t\tnew Object[] { source, dest }));\r", "-\t\t\t\tbox.open();\r", "-\t\t\t\tbreak;\r", "+\t\t\tif (source.equals(dest)) continue; // ignore if in same location\r", "+\r", "+\t\t\tfor (;;) {\r", "+\t\t\t\tif (copyFileStructure(source, dest)) {\r", "+\t\t\t\t\tprocessedFiles.add(source);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tif (event.detail == DND.DROP_MOVE && (!isDragging)) {\r", "+\t\t\t\t\t\t// It is not possible to notify an external drag source that a drop\r", "+\t\t\t\t\t\t// operation was only partially successful.  This is particularly a\r", "+\t\t\t\t\t\t// problem for DROP_MOVE operations since unless the source gets\r", "+\t\t\t\t\t\t// DROP_NONE, it will delete the original data including bits that\r", "+\t\t\t\t\t\t// may not have been transferred successfully.\r", "+\t\t\t\t\t\tMessageBox box = new MessageBox(shell, SWT.ICON_ERROR | SWT.RETRY | SWT.CANCEL);\r", "+\t\t\t\t\t\tbox.setText(getResourceString(\"dialog.FailedCopy.title\"));\r", "+\t\t\t\t\t\tbox.setMessage(getResourceString(\"dialog.FailedCopy.description\",\r", "+\t\t\t\t\t\t\tnew Object[] { source }));\r", "+\t\t\t\t\t\tint button = box.open();\r", "+\t\t\t\t\t\tif (button == SWT.CANCEL) {\r", "+\t\t\t\t\t\t\ti = sourceNames.length;\r", "+\t\t\t\t\t\t\tevent.detail = DND.DROP_NONE;\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t// We can recover gracefully from errors if the drag source belongs\r", "+\t\t\t\t\t\t// to this application since it will look at processedDropFiles.\r", "+\t\t\t\t\t\tMessageBox box = new MessageBox(shell, SWT.ICON_ERROR | SWT.ABORT | SWT.RETRY | SWT.IGNORE);\r", "+\t\t\t\t\t\tbox.setText(getResourceString(\"dialog.FailedCopy.title\"));\r", "+\t\t\t\t\t\tbox.setMessage(getResourceString(\"dialog.FailedCopy.description\",\r", "+\t\t\t\t\t\t\tnew Object[] { source }));\r", "+\t\t\t\t\t\tint button = box.open();\r", "+\t\t\t\t\t\tif (button == SWT.ABORT) i = sourceNames.length;\r", "+\t\t\t\t\t\tif (button != SWT.RETRY) break;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t}\r", "+\t\tif (isDragging) {\r", "+\t\t\t// Remember exactly which files we processed\r", "+\t\t\tprocessedDropFiles = ((File[]) processedFiles.toArray(new File[processedFiles.size()]));\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c44a250f3c2493148182b476280e6741", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/fileviewer/FileViewer.java", "commitBeforeChange": "d4c7da99373f8f0ef2ecf3082d69b8331929a5f1", "commitAfterChange": "e7fb43dbb2484659429530f9cab714cb6e3de9f3", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": "\r \tprivate void dropTargetHandleDrop(DropTargetEvent event, File targetFile)", "signatureAfterChange": "\r \tprivate void dropTargetHandleDrop(DropTargetEvent event, File targetFile)", "diff": ["+\t\t// Copy each file\r", "+\t\tVector /* of File */ processedFiles = new Vector();\r", "-\t\r", "-\t\t\t// Copy each file\r", "-\t\t\tif (! copyFileStructure(source, dest)) {\r", "-\t\t\t\tevent.detail = DND.DROP_NONE; // forbid the source from deleting files on us\r", "-\t\t\t\tMessageBox box = new MessageBox(shell, SWT.ICON_ERROR | SWT.OK);\r", "-\t\t\t\tbox.setText(getResourceString(\"dialog.FailedCopy.title\"));\r", "-\t\t\t\tbox.setMessage(getResourceString(\"dialog.FailedCopy.description\",\r", "-\t\t\t\t\tnew Object[] { source, dest }));\r", "-\t\t\t\tbox.open();\r", "-\t\t\t\tbreak;\r", "+\t\t\tif (source.equals(dest)) continue; // ignore if in same location\r", "+\r", "+\t\t\tfor (;;) {\r", "+\t\t\t\tif (copyFileStructure(source, dest)) {\r", "+\t\t\t\t\tprocessedFiles.add(source);\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tif (event.detail == DND.DROP_MOVE && (!isDragging)) {\r", "+\t\t\t\t\t\t// It is not possible to notify an external drag source that a drop\r", "+\t\t\t\t\t\t// operation was only partially successful.  This is particularly a\r", "+\t\t\t\t\t\t// problem for DROP_MOVE operations since unless the source gets\r", "+\t\t\t\t\t\t// DROP_NONE, it will delete the original data including bits that\r", "+\t\t\t\t\t\t// may not have been transferred successfully.\r", "+\t\t\t\t\t\tMessageBox box = new MessageBox(shell, SWT.ICON_ERROR | SWT.RETRY | SWT.CANCEL);\r", "+\t\t\t\t\t\tbox.setText(getResourceString(\"dialog.FailedCopy.title\"));\r", "+\t\t\t\t\t\tbox.setMessage(getResourceString(\"dialog.FailedCopy.description\",\r", "+\t\t\t\t\t\t\tnew Object[] { source }));\r", "+\t\t\t\t\t\tint button = box.open();\r", "+\t\t\t\t\t\tif (button == SWT.CANCEL) {\r", "+\t\t\t\t\t\t\ti = sourceNames.length;\r", "+\t\t\t\t\t\t\tevent.detail = DND.DROP_NONE;\r", "+\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t// We can recover gracefully from errors if the drag source belongs\r", "+\t\t\t\t\t\t// to this application since it will look at processedDropFiles.\r", "+\t\t\t\t\t\tMessageBox box = new MessageBox(shell, SWT.ICON_ERROR | SWT.ABORT | SWT.RETRY | SWT.IGNORE);\r", "+\t\t\t\t\t\tbox.setText(getResourceString(\"dialog.FailedCopy.title\"));\r", "+\t\t\t\t\t\tbox.setMessage(getResourceString(\"dialog.FailedCopy.description\",\r", "+\t\t\t\t\t\t\tnew Object[] { source }));\r", "+\t\t\t\t\t\tint button = box.open();\r", "+\t\t\t\t\t\tif (button == SWT.ABORT) i = sourceNames.length;\r", "+\t\t\t\t\t\tif (button != SWT.RETRY) break;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\t\t}\r", "+\t\tif (isDragging) {\r", "+\t\t\t// Remember exactly which files we processed\r", "+\t\t\tprocessedDropFiles = ((File[]) processedFiles.toArray(new File[processedFiles.size()]));\r"]}], "num": 13742}
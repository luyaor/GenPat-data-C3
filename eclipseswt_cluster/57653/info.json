{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6873a777489df09378194e9666450a88", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90b98cfffc8a142aea799a5cd750d4f7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_List.java", "commitBeforeChange": "69ca4def95e26b4f7985d8aa70882f0b37698d59", "commitAfterChange": "c7ffe68125d78bc1bb1c15b6e270edf7c3020f35", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  public void test_setSelection$I()", "signatureAfterChange": "  public void test_setSelection$I()", "diff": ["-\tif (fCheckSWTPolicy) {", "-\t\tassertEquals(\"MULTI: setSelection(new int [0]) getFocusIndex()\", list.getFocusIndex(), -1);", "-\t}", "-\tassertEquals(\"MULTI: setSelection(new int [] {number}) getFocusIndex()\", list.getFocusIndex(), 2);", "-\tassertEquals(\"MULTI: setSelection(new int [] {1, 0}) getFocusIndex()\", list.getFocusIndex(), 1);", "-\tassertEquals(\"MULTI: setSelection(new int [] {-1, number}) getFocusIndex()\", list.getFocusIndex(), 1);", "-\tif (fCheckSWTPolicy) {", "-\t\tassertEquals(\"MULTI: setSelection(new int [] {-1, 0}) getFocusIndex()\", list.getFocusIndex(), number - 1);", "-\t}", "+// bug - wierd case - should probably fix:\tassertEquals(\"MULTI: setSelection(new int [] {-1, 0}) getFocusIndex()\", list.getFocusIndex(), 0);", "+\tlist.setSelection(new int [] {0, 1, 2, 3, 5});", "+\tassertEquals(\"MULTI: setSelection(new int [] {0, 1, 2, 3, 5})\", list.getSelectionIndices(), new int [] {0, 1, 2, 3, 5});", "+", "-\tassertEquals(\"MULTI: setSelection(indices) getFocusIndex()\", list.getFocusIndex(), indices[0]);", "-\tassertEquals(\"MULTI: setSelection(new int [] {number, number}) getFocusIndex()\", list.getFocusIndex(), 0);", "-\tassertEquals(\"MULTI: setSelection(new int [] {0, number, 1}) getFocusIndex()\", list.getFocusIndex(), 0);", "-\tassertEquals(\"MULTI: setSelection(new int [] {number - 1, 0, number - 2}) getFocusIndex()\", list.getFocusIndex(), number - 1);", "+\t", "-\tif (fCheckSWTPolicy) {", "-\t\tassertEquals(\"SINGLE: setSelection(new int [0]) getFocusIndex()\", list.getFocusIndex(), -1);", "-\t}", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number}) getFocusIndex()\", list.getFocusIndex(), 2);", "-\tassertEquals(\"SINGLE: setSelection(new int [] {1, 0})\", list.getSelectionIndices(), new int[] {1});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {1, 0}) getFocusIndex()\", list.getFocusIndex(), 1);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {1, 0})\", list.getSelectionIndices(), new int[] {});", "+", "+\tlist.setSelection(new int [] {0, 1, 2, 3, 5});", "+\tassertEquals(\"SINGLE: setSelection(new int [] {0, 1, 2, 3, 5})\", list.getSelectionIndices(), new int [] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {-1, number}) getFocusIndex()\", list.getFocusIndex(), 1);", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number})\", list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number}) getFocusIndex()\", list.getFocusIndex(), number - 1);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[] {0});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {-1, 0}) getFocusIndex()\", list.getFocusIndex(), 0);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {-1, 0})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(indices)\", list.getSelectionIndices(), new int[] {indices[0]});", "-\tassertEquals(\"SINGLE: setSelection(indices) getFocusIndex()\", list.getFocusIndex(), indices[0]);", "+\tassertEquals(\"SINGLE: setSelection(indices)\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number, number}) getFocusIndex()\", list.getFocusIndex(), 0);", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number - 1})\", list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number - 1}) getFocusIndex()\", list.getFocusIndex(), number - 1);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, number - 1})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {0, number, 1})\", list.getSelectionIndices(), new int[] {0});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {0, number, 1}) getFocusIndex()\", list.getFocusIndex(), 0);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {0, number, 1})\", list.getSelectionIndices(), new int[] {});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, 0, number - 2})\", list.getSelectionIndices(), new int[] {number - 1});", "-\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, 0, number - 2}) getFocusIndex()\", list.getFocusIndex(), number - 1);", "+\tassertEquals(\"SINGLE: setSelection(new int [] {number - 1, 0, number - 2})\", list.getSelectionIndices(), new int[] {});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "073a1637bd3c3d340dee7b19f746d640", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Table.java", "commitBeforeChange": "60e663aa8c39b991d85726c47c8d238279b12f59", "commitAfterChange": "517f6485c2e361c323310fea69335d678ad98328", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  public void test_removeII()", "signatureAfterChange": "  public void test_removeII()", "diff": ["-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(-number, number + 100);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t}", "+\ttry {", "+\t\ttable.remove(-number, number + 100);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "-\t//should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(2, 100);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t} ", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t\tassertEquals(new TableItem[] {items[0], items[1]}, table.getItems());", "-\t}", "+\ttry {", "+\t\ttable.remove(2, 100);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "+\tassertEquals(items, table.getItems());", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(2, number);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t\tassertEquals(new TableItem[] {items[0], items[1]}, table.getItems());", "-\t}", "+\ttry {", "+\t\ttable.remove(2, number);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "+\tassertEquals(items, table.getItems());", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(-20, -10);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t} ", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t\tassertEquals(items, table.getItems());", "-\t}", "+\ttry {", "+\t\ttable.remove(-20, -10);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "+\tassertEquals(items, table.getItems());", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(20, 40);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t\tassertEquals(items, table.getItems());", "-\t}", "+\ttry {", "+\t\ttable.remove(20, 40);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "+\tassertEquals(items, table.getItems());", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttable.remove(200, 40);", "-\t\tassertEquals(items, table.getItems());", "-\t}", "+\ttable.remove(200, 40);", "+\tassertEquals(items, table.getItems());", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(-10, 2);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t}", "+\ttry {", "+\t\ttable.remove(-10, 2);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(1, 200);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t\tassertEquals(1, table.getItemCount());", "-\t\tassertEquals(new TableItem[] {items[3]}, table.getItems());", "-\t}", "+\ttry {", "+\t\ttable.remove(1, 200);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "+\tassertEquals(number - 3, table.getItemCount());", "+\tassertEquals(new TableItem[] {items[3], items[4]}, table.getItems());", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(number, number);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t}", "+\ttry {", "+\t\ttable.remove(number, number);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "-\t// should not cause a null pointer exception, bounds checks for table not implemented yet", "-\tif (fCheckOutOfRangeBehaviour) {", "-\t\ttry {", "-\t\t\ttable.remove(number, number + 100);", "-\t\t\tfail(\"No exception thrown for illegal index range\");", "-\t\t}", "-\t\tcatch (IllegalArgumentException e) {", "-\t\t}", "-\t}", "+\ttry {", "+\t\ttable.remove(number, number + 100);", "+\t\tfail(\"No exception thrown for illegal index range\");", "+\t} catch (IllegalArgumentException e) {}", "-"]}], "num": 57653}
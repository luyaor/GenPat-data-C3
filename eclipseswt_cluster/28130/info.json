{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc85927412506e7f82d38ca7104f964b", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c376bcbfab74250cbdfba788f0110a9e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/gtk/org/eclipse/swt/browser/WebKit.java", "commitBeforeChange": "8614680ae78fee56d42eb3d94f28a75f18d340b5", "commitAfterChange": "9f7ccea14bb1fb11d1071f5e85bfb64c67f560bd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  static int JSDOMEventProc (int window, int event, int user_data)", "signatureAfterChange": "  static int JSDOMEventProc (int arg0, int event, int user_data)", "diff": ["-static int /*long*/ JSDOMEventProc (int /*long*/ window, int /*long*/ event, int /*long*/ user_data) {", "-\tLONG webViewHandle = (LONG)WindowMappings.get (new LONG (window));", "+static int /*long*/ JSDOMEventProc (int /*long*/ arg0, int /*long*/ event, int /*long*/ user_data) {", "+\tif (OS.GTK_IS_SCROLLED_WINDOW (arg0)) {", "+\t\t/*", "+\t\t * Stop the propagation of events that are not consumed by WebKit, before", "+\t\t * they reach the parent embedder.  These events have already been received.", "+\t\t */", "+\t\treturn user_data;", "+\t}", "+", "+\tif (OS.G_TYPE_CHECK_INSTANCE_TYPE (arg0, WebViewType)) {", "+\t\t/*", "+\t\t* Only consider using GDK events to create SWT events to send if JS is disabled", "+\t\t* in one or more WebKit instances (indicates that this instance may not be", "+\t\t* receiving events from the DOM).  This check is done up-front for performance.", "+\t\t*/", "+\t\tif (DisabledJSCount > 0) {", "+\t\t\tfinal Browser browser = FindBrowser (arg0);", "+\t\t\tif (browser != null && !((WebKit)browser.webBrowser).jsEnabled) {", "+\t\t\t\t/* this instance does need to use the GDK event to create an SWT event to send */", "+\t\t\t\tOS.gtk_widget_event (browser.handle, event);", "+\t\t\t\tswitch (OS.GDK_EVENT_TYPE (event)) {", "+\t\t\t\t\tcase OS.GDK_KEY_PRESS: ", "+\t\t\t\t\t\tif (browser.isFocusControl ()) {", "+\t\t\t\t\t\t\tfinal GdkEventKey gdkEvent = new GdkEventKey ();", "+\t\t\t\t\t\t\tOS.memmove (gdkEvent, event, GdkEventKey.sizeof);", "+\t\t\t\t\t\t\tif ((gdkEvent.keyval == OS.GDK_ISO_Left_Tab || gdkEvent.keyval == OS.GDK_Tab) && (gdkEvent.state & (OS.GDK_CONTROL_MASK | OS.GDK_MOD1_MASK)) == 0) {", "+\t\t\t\t\t\t\t\tbrowser.getDisplay ().asyncExec (new Runnable () {", "+\t\t\t\t\t\t\t\t\tpublic void run () {", "+\t\t\t\t\t\t\t\t\t\tif (browser.isDisposed ()) return;", "+\t\t\t\t\t\t\t\t\t\tif (browser.getDisplay ().getFocusControl () == null) {", "+\t\t\t\t\t\t\t\t\t\t\tint traversal = (gdkEvent.state & OS.GDK_SHIFT_MASK) != 0 ? SWT.TRAVERSE_TAB_PREVIOUS : SWT.TRAVERSE_TAB_NEXT;", "+\t\t\t\t\t\t\t\t\t\t\tbrowser.traverse (traversal);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t});", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\treturn 0;", "+\t}", "+", "+\tLONG webViewHandle = (LONG)WindowMappings.get (new LONG (arg0));", "-\treturn webkit.handleEvent (event, (int)user_data) ? 0 : 1;", "+\treturn webkit.handleDOMEvent (event, (int)user_data) ? 0 : STOP_PROPOGATE;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbb35ed0fd709ec966939fc0b6745807", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/gtk/org/eclipse/swt/browser/WebKit.java", "commitBeforeChange": "03e9337cff914952fb1035dfe434f96ff4fbfbb4", "commitAfterChange": "a7026b1b456498a95fd3935ab7b613f4c353caa4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  static int JSDOMEventProc (int arg0, int event, int user_data)", "signatureAfterChange": "  static int JSDOMEventProc (int arg0, int event, int user_data)", "diff": ["-\t\t\t\tOS.gtk_widget_event (browser.handle, event);", "-\t\t\t\t\tcase OS.GDK_KEY_PRESS: ", "+\t\t\t\t\tcase OS.GDK_KEY_PRESS: {", "-\t\t\t\t\t\t\tif ((gdkEvent.keyval == OS.GDK_ISO_Left_Tab || gdkEvent.keyval == OS.GDK_Tab) && (gdkEvent.state & (OS.GDK_CONTROL_MASK | OS.GDK_MOD1_MASK)) == 0) {", "-\t\t\t\t\t\t\t\tbrowser.getDisplay ().asyncExec (new Runnable () {", "-\t\t\t\t\t\t\t\t\tpublic void run () {", "-\t\t\t\t\t\t\t\t\t\tif (browser.isDisposed ()) return;", "-\t\t\t\t\t\t\t\t\t\tif (browser.getDisplay ().getFocusControl () == null) {", "-\t\t\t\t\t\t\t\t\t\t\tint traversal = (gdkEvent.state & OS.GDK_SHIFT_MASK) != 0 ? SWT.TRAVERSE_TAB_PREVIOUS : SWT.TRAVERSE_TAB_NEXT;", "-\t\t\t\t\t\t\t\t\t\t\tbrowser.traverse (traversal);", "-\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tswitch (gdkEvent.keyval) {", "+\t\t\t\t\t\t\t\tcase OS.GDK_ISO_Left_Tab:", "+\t\t\t\t\t\t\t\tcase OS.GDK_Tab: {", "+\t\t\t\t\t\t\t\t\tif ((gdkEvent.state & (OS.GDK_CONTROL_MASK | OS.GDK_MOD1_MASK)) == 0) {", "+\t\t\t\t\t\t\t\t\t\tbrowser.getDisplay ().asyncExec (new Runnable () {", "+\t\t\t\t\t\t\t\t\t\t\tpublic void run () {", "+\t\t\t\t\t\t\t\t\t\t\t\tif (browser.isDisposed ()) return;", "+\t\t\t\t\t\t\t\t\t\t\t\tif (browser.getDisplay ().getFocusControl () == null) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\tint traversal = (gdkEvent.state & OS.GDK_SHIFT_MASK) != 0 ? SWT.TRAVERSE_TAB_PREVIOUS : SWT.TRAVERSE_TAB_NEXT;", "+\t\t\t\t\t\t\t\t\t\t\t\t\tbrowser.traverse (traversal);", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t});", "-\t\t\t\t\t\t\t\t});", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tcase OS.GDK_Escape: {", "+\t\t\t\t\t\t\t\t\tEvent keyEvent = new Event ();", "+\t\t\t\t\t\t\t\t\tkeyEvent.widget = browser;", "+\t\t\t\t\t\t\t\t\tkeyEvent.type = SWT.KeyDown;", "+\t\t\t\t\t\t\t\t\tkeyEvent.keyCode = keyEvent.character = SWT.ESC;", "+\t\t\t\t\t\t\t\t\tif ((gdkEvent.state & OS.GDK_MOD1_MASK) != 0) keyEvent.stateMask |= SWT.ALT;", "+\t\t\t\t\t\t\t\t\tif ((gdkEvent.state & OS.GDK_SHIFT_MASK) != 0) keyEvent.stateMask |= SWT.SHIFT;", "+\t\t\t\t\t\t\t\t\tif ((gdkEvent.state & OS.GDK_CONTROL_MASK) != 0) keyEvent.stateMask |= SWT.CONTROL;", "+\t\t\t\t\t\t\t\t\t((WebKit)browser.webBrowser).sendKeyEvent (keyEvent);", "+\t\t\t\t\t\t\t\t\treturn 1;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\tOS.gtk_widget_event (browser.handle, event);"]}], "num": 28130}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fba310f0c4a5d671b1f4d0e828cdb37d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e7d0ea37070a043a0982600700079712", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 81, "methodNumberAfterChange": 84, "signatureBeforeChange": " int processSetFocus (Object callData)", "signatureAfterChange": " \t void sendFocusEvent (boolean focusIn)", "diff": ["-}", "-int processSetFocus (Object callData) {", "-\t/*", "-\t* Ignore focus change events when the window getting or losing", "-\t* focus is a menu.  Because XmGetFocusWidget() does not answer", "-\t* the menu shell (it answers the menu parent), it is necessary", "-\t* to use XGetInputFocus() to get the real X focus window.", "-\t*/", "-    /* AW", "-\tint xDisplay = xEvent.display;", "-\tif (xDisplay == 0) return 0;", "-\tint [] unused = new int [1], xWindow = new int [1];", "-\tOS.XGetInputFocus (xDisplay, xWindow, unused);", "-\tif (xWindow [0] != 0) {", "-\t\tint widget = OS.XtWindowToWidget (xDisplay, xWindow [0]);", "-\t\tif (widget != 0 && OS.XtClass (widget) == OS.XmMenuShellWidgetClass ()) return 0;", "-\t}", "-    */", "-\t/* Process the focus change for the widget */", "-\tShell shell = getShell ();", "-\tBoolean b = (Boolean) callData;", "-\tif (b.booleanValue ()) {", "-\t", "-\t\tprocessFocusIn ();", "-\t\t// widget could be disposed at this point", "-\t\t/*", "-\t\t* It is possible that the shell may be", "-\t\t* disposed at this point.  If this happens", "-\t\t* don't send the activate and deactivate", "-\t\t* events.", "-\t\t*/", "-\t\tif (!shell.isDisposed ()) {", "-\t\t\tshell.setActiveControl (this);", "-\t\t}", "-\t} else {", "-\t\tDisplay display = getDisplay ();", "-\t\tprocessFocusOut ();", "-\t\t// widget could be disposed at this point", "-\t\t/*", "-\t\t * It is possible that the shell may be", "-\t\t * disposed at this point.  If this happens", "-\t\t * don't send the activate and deactivate", "-\t\t * events.", "-\t\t */", "-\t\tif (!shell.isDisposed ()) {", "-\t\t\tControl control = display.getFocusControl ();", "-\t\t\tif (control == null || shell != control.getShell () ) {", "-\t\t\t\tshell.setActiveControl (null);", "-\t\t\t}", "-\t\t}", "-\treturn 0;", "+\t", "+void sendFocusEvent (boolean focusIn) {", "+\tShell shell = getShell ();", "+\tif (focusIn) {", "+\t\tsendEvent (SWT.FocusIn);", "+\t} else {", "+\t\tsendEvent (SWT.FocusOut);", "+\t}", "+\t", "+\t/*", "+\t* It is possible that the shell may be", "+\t* disposed at this point.  If this happens", "+\t* don't send the activate and deactivate", "+\t* events.", "+\t*/", "+\tif (focusIn) {", "+\t\tif (!shell.isDisposed ()) {", "+\t\t\tshell.setActiveControl (this);", "+\t} else {", "+\t\tif (!shell.isDisposed ()) {", "+\t\t\tDisplay display = shell.getDisplay ();", "+\t\t\tControl control = display.getFocusControl ();", "+\t\t\tif (control == null || shell != control.getShell () ) {", "+\t\t\t\tshell.setActiveControl (null);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdcdccbc1cb6d54a543b7c13ac872136", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 77, "signatureBeforeChange": "\r int processSetFocus (int callData)", "signatureAfterChange": "\r int processSetFocus (int callData)", "diff": ["-\t/* Ignore focus changes caused by grabbing and ungrabing. */\r", "+\t/* Ignore focus changes caused by grabbing and ungrabing */\r", "-\t/* Only process focus callbacks between windows. */\r", "+\t/* Only process focus callbacks between windows */\r", "-\t/* Process the focus change for the widget. */\r", "-\tif (xEvent.type == OS.FocusIn) {\r", "-\t\tint result = processFocusIn ();\r", "-\t\tint index = 0;\r", "-\t\tShell shell = getShell ();\r", "-\t\tControl [] focusIn = getPath ();\r", "-\t\tControl lastFocus = shell.lastFocus;\r", "-\t\tif (lastFocus != null) {\r", "-\t\t\tif (!lastFocus.isDisposed ()) {\r", "-\t\t\t\tControl [] focusOut = lastFocus.getPath ();\r", "-\t\t\t\tint length = Math.min (focusIn.length, focusOut.length);\r", "-\t\t\t\twhile (index < length) {\r", "-\t\t\t\t\tif (focusIn [index] != focusOut [index]) break;\r", "-\t\t\t\t\tindex++;\r", "+\t/* Process the focus change for the widget */\r", "+\tswitch (xEvent.type) {\r", "+\t\tcase OS.FocusIn: {\r", "+\t\t\tprocessFocusIn ();\r", "+\t\t\t// widget could be disposed at this point\r", "+\t\t\tif (handle == 0) return 0;\r", "+\t\t\tint index = 0;\r", "+\t\t\tShell shell = getShell ();\r", "+\t\t\tControl [] focusIn = getPath ();\r", "+\t\t\tControl lastFocus = shell.lastFocus;\r", "+\t\t\tif (lastFocus != null) {\r", "+\t\t\t\tif (!lastFocus.isDisposed ()) {\r", "+\t\t\t\t\tControl [] focusOut = lastFocus.getPath ();\r", "+\t\t\t\t\tint length = Math.min (focusIn.length, focusOut.length);\r", "+\t\t\t\t\twhile (index < length) {\r", "+\t\t\t\t\t\tif (focusIn [index] != focusOut [index]) break;\r", "+\t\t\t\t\t\tindex++;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t\tfor (int i=focusOut.length-1; i>=index; --i) {\r", "+\t\t\t\t\t\tfocusOut [i].sendEvent (SWT.Deactivate);\r", "+\t\t\t\t\t}\r", "-\t\t\t\tfor (int i=focusOut.length-1; i>=index; --i) {\r", "+\t\t\t\tshell.lastFocus = null;\r", "+\t\t\t}\r", "+\t\t\tfor (int i=focusIn.length-1; i>=index; --i) {\r", "+\t\t\t\tfocusIn [i].sendEvent (SWT.Activate);\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\tcase OS.FocusOut: {\r", "+\t\t\tprocessFocusOut ();\r", "+\t\t\t// widget could be disposed at this point\r", "+\t\t\tif (handle == 0) return 0;\r", "+\t\t\tShell shell = getShell ();\r", "+\t\t\tshell.lastFocus = this;\r", "+\t\t\tDisplay display = getDisplay ();\r", "+\t\t\tControl focusControl = display.getFocusControl ();\r", "+\t\t\tif (focusControl == null || shell != focusControl.getShell ()) {\r", "+\t\t\t\tControl [] focusOut = getPath ();\r", "+\t\t\t\tfor (int i=focusOut.length-1; i>=0; --i) {\r", "+\t\t\t\tshell.lastFocus = null;\r", "-\t\t\tshell.lastFocus = null;\r", "+\t\t\tbreak;\r", "-\t\tfor (int i=focusIn.length-1; i>=index; --i) {\r", "-\t\t\tfocusIn [i].sendEvent (SWT.Activate);\r", "-\t\t}\r", "-\t\treturn result;\r", "-\t}\r", "-\tif (xEvent.type == OS.FocusOut) {\r", "-\t\tint result = processFocusOut ();\r", "-\t\tShell shell = getShell ();\r", "-\t\tshell.lastFocus = this;\r", "-\t\tDisplay display = getDisplay ();\r", "-\t\tControl focusControl = display.getFocusControl ();\r", "-\t\tif (focusControl == null || shell != focusControl.getShell ()) {\r", "-\t\t\tControl [] focusOut = getPath ();\r", "-\t\t\tfor (int i=focusOut.length-1; i>=0; --i) {\r", "-\t\t\t\tfocusOut [i].sendEvent (SWT.Deactivate);\r", "-\t\t\t}\r", "-\t\t\tshell.lastFocus = null;\r", "-\t\t}\r", "-\t\treturn result;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "abc60ac1c94e33520fa471b54935bd91", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "72f73318c5711896c5365f8b95372300980c5b89", "commitAfterChange": "b7ed75a0ec108f50d94e56dde8af895828f9f6a6", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "\r int processSetFocus (int callData)", "signatureAfterChange": "\r int processSetFocus (int callData)", "diff": ["+\t\t\tShell shell = getShell ();\r", "-\t\t\tif (handle == 0) return 0;\r", "-\t\t\tint index = 0;\r", "-\t\t\tShell shell = getShell ();\r", "-\t\t\tControl [] focusIn = getPath ();\r", "-\t\t\tControl lastFocus = shell.lastFocus;\r", "-\t\t\tif (lastFocus != null) {\r", "-\t\t\t\tif (!lastFocus.isDisposed ()) {\r", "-\t\t\t\t\tControl [] focusOut = lastFocus.getPath ();\r", "-\t\t\t\t\tint length = Math.min (focusIn.length, focusOut.length);\r", "-\t\t\t\t\twhile (index < length) {\r", "-\t\t\t\t\t\tif (focusIn [index] != focusOut [index]) break;\r", "-\t\t\t\t\t\tindex++;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t\tfor (int i=focusOut.length-1; i>=index; --i) {\r", "-\t\t\t\t\t\tfocusOut [i].sendEvent (SWT.Deactivate);\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\tshell.lastFocus = null;\r", "-\t\t\t}\r", "-\t\t\tfor (int i=focusIn.length-1; i>=index; --i) {\r", "-\t\t\t\tfocusIn [i].sendEvent (SWT.Activate);\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* It is possible that the shell may be\r", "+\t\t\t* disposed at this point.  If this happens\r", "+\t\t\t* don't send the activate and deactivate\r", "+\t\t\t* events.\r", "+\t\t\t*/\t\r", "+\t\t\tif (!shell.isDisposed ()) {\r", "+\t\t\t\tshell.setActiveControl (this);\r", "+\t\t\tShell shell = getShell ();\r", "+\t\t\tDisplay display = getDisplay ();\r", "+\t\t\t\r", "-\t\t\tif (handle == 0) return 0;\r", "-\t\t\tShell shell = getShell ();\r", "-\t\t\tshell.lastFocus = this;\r", "-\t\t\tDisplay display = getDisplay ();\r", "-\t\t\tControl focusControl = display.getFocusControl ();\r", "-\t\t\tif (focusControl == null || shell != focusControl.getShell ()) {\r", "-\t\t\t\tControl [] focusOut = getPath ();\r", "-\t\t\t\tfor (int i=focusOut.length-1; i>=0; --i) {\r", "-\t\t\t\t\tfocusOut [i].sendEvent (SWT.Deactivate);\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* It is possible that the shell may be\r", "+\t\t\t* disposed at this point.  If this happens\r", "+\t\t\t* don't send the activate and deactivate\r", "+\t\t\t* events.\r", "+\t\t\t*/\r", "+\t\t\tif (!shell.isDisposed ()) {\r", "+\t\t\t\tControl control = display.getFocusControl ();\r", "+\t\t\t\tif (control == null || shell != control.getShell () ) {\r", "+\t\t\t\t\tshell.setActiveControl (null);\r", "-\t\t\t\tshell.lastFocus = null;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "157938a98964d2ee7092735cdaaac382", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 147, "signatureBeforeChange": "\r int processSetFocus (int callData)", "signatureAfterChange": "\r int XFocusChange (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processSetFocus (int callData) {\r", "-\r", "-\t/* Get the focus change event */\r", "-\tXFocusChangeEvent xEvent = new XFocusChangeEvent ();\r", "-\tOS.memmove (xEvent, callData, XFocusChangeEvent.sizeof);\r", "-\r", "-\t/* Ignore focus changes caused by grabbing and ungrabing */\r", "-\tif (xEvent.mode != OS.NotifyNormal) return 0;\r", "-\r", "-\t/* Only process focus callbacks between windows */\r", "-\tif (xEvent.detail != OS.NotifyAncestor &&\r", "-\t\txEvent.detail != OS.NotifyInferior &&\r", "-\t\txEvent.detail != OS.NotifyNonlinear) return 0;\r", "-\r", "-\t/*\r", "-\t* Ignore focus change events when the window getting or losing\r", "-\t* focus is a menu.  Because XmGetFocusWidget() does not answer\r", "-\t* the menu shell (it answers the menu parent), it is necessary\r", "-\t* to use XGetInputFocus() to get the real X focus window.\r", "-\t*/\r", "-\tint xDisplay = xEvent.display;\r", "-\tif (xDisplay == 0) return 0;\r", "-\tint [] unused = new int [1], xWindow = new int [1];\r", "-\tOS.XGetInputFocus (xDisplay, xWindow, unused);\r", "-\tif (xWindow [0] != 0) {\r", "-\t\tint widget = OS.XtWindowToWidget (xDisplay, xWindow [0]);\r", "-\t\tif (widget != 0 && OS.XtClass (widget) == OS.XmMenuShellWidgetClass ()) return 0;\r", "-\t}\r", "-\t\r", "-\t/* Process the focus change for the widget */\r", "-\tswitch (xEvent.type) {\r", "-\t\tcase OS.FocusIn: {\r", "-\t\t\tShell shell = getShell ();\r", "-\t\t\tprocessFocusIn ();\r", "-\t\t\t// widget could be disposed at this point\r", "-\t\t\t\r", "-\t\t\t/*\r", "-\t\t\t* It is possible that the shell may be\r", "-\t\t\t* disposed at this point.  If this happens\r", "-\t\t\t* don't send the activate and deactivate\r", "-\t\t\t* events.\r", "-\t\t\t*/\t\r", "-\t\t\tif (!shell.isDisposed ()) {\r", "-\t\t\t\tshell.setActiveControl (this);\r", "-\t\t\t}\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t\tcase OS.FocusOut: {\r", "-\t\t\tShell shell = getShell ();\r", "-\t\t\tDisplay display = getDisplay ();\r", "-\t\t\t\r", "-\t\t\tprocessFocusOut ();\r", "-\t\t\t// widget could be disposed at this point\r", "-\t\t\t\r", "-\t\t\t/*\r", "-\t\t\t* It is possible that the shell may be\r", "-\t\t\t* disposed at this point.  If this happens\r", "-\t\t\t* don't send the activate and deactivate\r", "-\t\t\t* events.\r", "-\t\t\t*/\r", "-\t\t\tif (!shell.isDisposed ()) {\r", "-\t\t\t\tControl control = display.getFocusControl ();\r", "-\t\t\t\tif (control == null || shell != control.getShell () ) {\r", "-\t\t\t\t\tshell.setActiveControl (null);\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t}\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XFocusChange (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\r", "+\t/* Get the focus change event */\r", "+\tXFocusChangeEvent xEvent = new XFocusChangeEvent ();\r", "+\tOS.memmove (xEvent, call_data, XFocusChangeEvent.sizeof);\r", "+\r", "+\t/* Ignore focus changes caused by grabbing and ungrabing */\r", "+\tif (xEvent.mode != OS.NotifyNormal) return 0;\r", "+\r", "+\t/* Only process focus callbacks between windows */\r", "+\tif (xEvent.detail != OS.NotifyAncestor &&\r", "+\t\txEvent.detail != OS.NotifyInferior &&\r", "+\t\txEvent.detail != OS.NotifyNonlinear) return 0;\r", "+\r", "+\t/*\r", "+\t* Ignore focus change events when the window getting or losing\r", "+\t* focus is a menu.  Because XmGetFocusWidget() does not answer\r", "+\t* the menu shell (it answers the menu parent), it is necessary\r", "+\t* to use XGetInputFocus() to get the real X focus window.\r", "+\t*/\r", "+\tint xDisplay = xEvent.display;\r", "+\tif (xDisplay == 0) return 0;\r", "+\tint [] unused = new int [1], xWindow = new int [1];\r", "+\tOS.XGetInputFocus (xDisplay, xWindow, unused);\r", "+\tif (xWindow [0] != 0) {\r", "+\t\tint widget = OS.XtWindowToWidget (xDisplay, xWindow [0]);\r", "+\t\tif (widget != 0 && OS.XtClass (widget) == OS.XmMenuShellWidgetClass ()) return 0;\r", "+\t}\r", "+\t\r", "+\t/* Process the focus change for the widget */\r", "+\tswitch (xEvent.type) {\r", "+\t\tcase OS.FocusIn: {\r", "+\t\t\tShell shell = getShell ();\r", "+\t\t\tprocessFocusIn ();\r", "+\t\t\t// widget could be disposed at this point\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* It is possible that the shell may be\r", "+\t\t\t* disposed at this point.  If this happens\r", "+\t\t\t* don't send the activate and deactivate\r", "+\t\t\t* events.\r", "+\t\t\t*/\t\r", "+\t\t\tif (!shell.isDisposed ()) {\r", "+\t\t\t\tshell.setActiveControl (this);\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\tcase OS.FocusOut: {\r", "+\t\t\tShell shell = getShell ();\r", "+\t\t\tDisplay display = getDisplay ();\r", "+\t\t\t\r", "+\t\t\tprocessFocusOut ();\r", "+\t\t\t// widget could be disposed at this point\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* It is possible that the shell may be\r", "+\t\t\t* disposed at this point.  If this happens\r", "+\t\t\t* don't send the activate and deactivate\r", "+\t\t\t* events.\r", "+\t\t\t*/\r", "+\t\t\tif (!shell.isDisposed ()) {\r", "+\t\t\t\tControl control = display.getFocusControl ();\r", "+\t\t\t\tif (control == null || shell != control.getShell () ) {\r", "+\t\t\t\t\tshell.setActiveControl (null);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t}\r", "+\treturn 0;\r", "+}\r"]}], "num": 2952}
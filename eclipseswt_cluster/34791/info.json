{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3df07a66040cae6d1f0159400e1aba35", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "935a451fdf64bcc57211acb0d10db200", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "4631a5a5553c2a27a1c80b2611f4f0cea8081a20", "commitAfterChange": "21eb151f1a668a710645fe690cf473d0b86ddaf0", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public Rectangle getBounds(int start, int end)", "signatureAfterChange": " public Rectangle getBounds(int start, int end)", "diff": ["-\tif (OS.GTK_VERSION >= OS.VERSION(3, 0, 0)) {", "-\t\tcairo_rectangle_int_t rect = new cairo_rectangle_int_t();", "-\t\t/* ", "-\t\t* Bug in Pango. The region returned by gdk_pango_layout_get_clip_region()", "-\t\t* includes areas from lines outside of the requested range.  The fix", "-\t\t* is to subtract these areas from the clip region.", "-\t\t*/", "-\t\tPangoRectangle pangoRect = new PangoRectangle();", "-\t\tlong /*int*/ iter = OS.pango_layout_get_iter(layout);", "-\t\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tlong /*int*/ linesRegion = Cairo.cairo_region_create ();", "-\t\tif (linesRegion == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tint lineEnd = 0;", "-\t\tdo {", "-\t\t\tOS.pango_layout_iter_get_line_extents(iter, null, pangoRect);", "-\t\t\tif (OS.pango_layout_iter_next_line(iter)) {", "-\t\t\t\tlineEnd = OS.pango_layout_iter_get_index(iter) - 1;", "-\t\t\t} else {", "-\t\t\t\tlineEnd = strlen;", "-\t\t\t}", "-\t\t\tif (byteStart > lineEnd) continue;", "-\t\t\trect.x = OS.PANGO_PIXELS(pangoRect.x);", "-\t\t\trect.y = OS.PANGO_PIXELS(pangoRect.y);", "-\t\t\trect.width = OS.PANGO_PIXELS(pangoRect.width);", "-\t\t\trect.height = OS.PANGO_PIXELS(pangoRect.height);", "-\t\t\tCairo.cairo_region_union_rectangle (linesRegion, rect);", "-\t\t} while (lineEnd + 1 <= byteEnd);", "-\t\tCairo.cairo_region_intersect (clipRegion, linesRegion);", "-\t\tCairo.cairo_region_destroy (linesRegion);", "-\t\tOS.pango_layout_iter_free(iter);", "-\t\t", "-\t\tCairo.cairo_region_get_extents (clipRegion, rect);", "-\t\tCairo.cairo_region_destroy (clipRegion);", "-\t\tif (OS.pango_context_get_base_dir(context) == OS.PANGO_DIRECTION_RTL) {", "-\t\t\trect.x = width() - rect.x - rect.width;", "+\tGdkRectangle rect = new GdkRectangle();", "+\t", "+\t/* ", "+\t* Bug in Pango. The region returned by gdk_pango_layout_get_clip_region()", "+\t* includes areas from lines outside of the requested range.  The fix", "+\t* is to subtract these areas from the clip region.", "+\t*/", "+\tPangoRectangle pangoRect = new PangoRectangle();", "+\tlong /*int*/ iter = OS.pango_layout_get_iter(layout);", "+\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tlong /*int*/ linesRegion = OS.gdk_region_new();", "+\tif (linesRegion == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint lineEnd = 0;", "+\tdo {", "+\t\tOS.pango_layout_iter_get_line_extents(iter, null, pangoRect);", "+\t\tif (OS.pango_layout_iter_next_line(iter)) {", "+\t\t\tlineEnd = OS.pango_layout_iter_get_index(iter) - 1;", "+\t\t} else {", "+\t\t\tlineEnd = strlen;", "-\t\trect.x += Math.min (indent, wrapIndent);", "-\t\treturn new Rectangle(rect.x, rect.y, rect.width, rect.height);", "-\t} else {", "-\t\tGdkRectangle rect = new GdkRectangle();", "-\t\t/* ", "-\t\t* Bug in Pango. The region returned by gdk_pango_layout_get_clip_region()", "-\t\t* includes areas from lines outside of the requested range.  The fix", "-\t\t* is to subtract these areas from the clip region.", "-\t\t*/", "-\t\tPangoRectangle pangoRect = new PangoRectangle();", "-\t\tlong /*int*/ iter = OS.pango_layout_get_iter(layout);", "-\t\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tlong /*int*/ linesRegion = OS.gdk_region_new ();", "-\t\tif (linesRegion == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tint lineEnd = 0;", "-\t\tdo {", "-\t\t\tOS.pango_layout_iter_get_line_extents(iter, null, pangoRect);", "-\t\t\tif (OS.pango_layout_iter_next_line(iter)) {", "-\t\t\t\tlineEnd = OS.pango_layout_iter_get_index(iter) - 1;", "-\t\t\t} else {", "-\t\t\t\tlineEnd = strlen;", "-\t\t\t}", "-\t\t\tif (byteStart > lineEnd) continue;", "-\t\t\trect.x = OS.PANGO_PIXELS(pangoRect.x);", "-\t\t\trect.y = OS.PANGO_PIXELS(pangoRect.y);", "-\t\t\trect.width = OS.PANGO_PIXELS(pangoRect.width);", "-\t\t\trect.height = OS.PANGO_PIXELS(pangoRect.height);", "-\t\t\tOS.gdk_region_union_with_rect(linesRegion, rect);", "-\t\t} while (lineEnd + 1 <= byteEnd);", "-\t\tOS.gdk_region_intersect (clipRegion, linesRegion);", "-\t\tOS.gdk_region_destroy (linesRegion);", "-\t\tOS.pango_layout_iter_free(iter);", "-\t\t", "-\t\tOS.gdk_region_get_clipbox(clipRegion, rect);", "-\t\tOS.gdk_region_destroy (clipRegion);", "-\t\tif (OS.pango_context_get_base_dir(context) == OS.PANGO_DIRECTION_RTL) {", "-\t\t\trect.x = width() - rect.x - rect.width;", "-\t\t}", "-\t\trect.x += Math.min (indent, wrapIndent);", "-\t\treturn new Rectangle(rect.x, rect.y, rect.width, rect.height);", "+\t\tif (byteStart > lineEnd) continue;", "+\t\trect.x = OS.PANGO_PIXELS(pangoRect.x);", "+\t\trect.y = OS.PANGO_PIXELS(pangoRect.y);", "+\t\trect.width = OS.PANGO_PIXELS(pangoRect.width);", "+\t\trect.height = OS.PANGO_PIXELS(pangoRect.height);", "+\t\tOS.gdk_region_union_with_rect(linesRegion, rect);", "+\t} while (lineEnd + 1 <= byteEnd);", "+\tOS.gdk_region_intersect(clipRegion, linesRegion);", "+\tOS.gdk_region_destroy(linesRegion);", "+\tOS.pango_layout_iter_free(iter);", "+\t", "+\tOS.gdk_region_get_clipbox(clipRegion, rect);", "+\tOS.gdk_region_destroy(clipRegion);", "+\tif (OS.pango_context_get_base_dir(context) == OS.PANGO_DIRECTION_RTL) {", "+\t\trect.x = width() - rect.x - rect.width;", "-", "+\trect.x += Math.min (indent, wrapIndent);", "+\treturn new Rectangle(rect.x, rect.y, rect.width, rect.height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01f85d32edbe14fd557b6f5e013f1122", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "df55805e4a74ab0fc8f545a1792d755c95a4e419", "commitAfterChange": "b178ded274cefa13fff8fc6fb8115ee14a844dc8", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public Rectangle getBounds(int start, int end)", "signatureAfterChange": " public Rectangle getBounds(int start, int end)", "diff": ["-\tGdkRectangle rect = new GdkRectangle();", "-\t", "-\t/* ", "-\t* Bug in Pango. The region returned by gdk_pango_layout_get_clip_region()", "-\t* includes areas from lines outside of the requested range.  The fix", "-\t* is to subtract these areas from the clip region.", "-\t*/", "-\tPangoRectangle pangoRect = new PangoRectangle();", "-\tlong /*int*/ iter = OS.pango_layout_get_iter(layout);", "-\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tlong /*int*/ linesRegion = OS.gdk_region_new();", "-\tif (linesRegion == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tint lineEnd = 0;", "-\tdo {", "-\t\tOS.pango_layout_iter_get_line_extents(iter, null, pangoRect);", "-\t\tif (OS.pango_layout_iter_next_line(iter)) {", "-\t\t\tlineEnd = OS.pango_layout_iter_get_index(iter) - 1;", "-\t\t} else {", "-\t\t\tlineEnd = strlen;", "+\tif (OS.GTK_VERSION >= OS.VERSION(3, 0, 0)) {", "+\t\tcairo_rectangle_int_t rect = new cairo_rectangle_int_t();", "+\t\t/* ", "+\t\t* Bug in Pango. The region returned by gdk_pango_layout_get_clip_region()", "+\t\t* includes areas from lines outside of the requested range.  The fix", "+\t\t* is to subtract these areas from the clip region.", "+\t\t*/", "+\t\tPangoRectangle pangoRect = new PangoRectangle();", "+\t\tlong /*int*/ iter = OS.pango_layout_get_iter(layout);", "+\t\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tlong /*int*/ linesRegion = Cairo.cairo_region_create ();", "+\t\tif (linesRegion == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tint lineEnd = 0;", "+\t\tdo {", "+\t\t\tOS.pango_layout_iter_get_line_extents(iter, null, pangoRect);", "+\t\t\tif (OS.pango_layout_iter_next_line(iter)) {", "+\t\t\t\tlineEnd = OS.pango_layout_iter_get_index(iter) - 1;", "+\t\t\t} else {", "+\t\t\t\tlineEnd = strlen;", "+\t\t\t}", "+\t\t\tif (byteStart > lineEnd) continue;", "+\t\t\trect.x = OS.PANGO_PIXELS(pangoRect.x);", "+\t\t\trect.y = OS.PANGO_PIXELS(pangoRect.y);", "+\t\t\trect.width = OS.PANGO_PIXELS(pangoRect.width);", "+\t\t\trect.height = OS.PANGO_PIXELS(pangoRect.height);", "+\t\t\tCairo.cairo_region_union_rectangle (linesRegion, rect);", "+\t\t} while (lineEnd + 1 <= byteEnd);", "+\t\tCairo.cairo_region_intersect (clipRegion, linesRegion);", "+\t\tCairo.cairo_region_destroy (linesRegion);", "+\t\tOS.pango_layout_iter_free(iter);", "+\t\t", "+\t\tCairo.cairo_region_get_extents (clipRegion, rect);", "+\t\tCairo.cairo_region_destroy (clipRegion);", "+\t\tif (OS.pango_context_get_base_dir(context) == OS.PANGO_DIRECTION_RTL) {", "+\t\t\trect.x = width() - rect.x - rect.width;", "-\t\tif (byteStart > lineEnd) continue;", "-\t\trect.x = OS.PANGO_PIXELS(pangoRect.x);", "-\t\trect.y = OS.PANGO_PIXELS(pangoRect.y);", "-\t\trect.width = OS.PANGO_PIXELS(pangoRect.width);", "-\t\trect.height = OS.PANGO_PIXELS(pangoRect.height);", "-\t\tOS.gdk_region_union_with_rect(linesRegion, rect);", "-\t} while (lineEnd + 1 <= byteEnd);", "-\tOS.gdk_region_intersect(clipRegion, linesRegion);", "-\tOS.gdk_region_destroy(linesRegion);", "-\tOS.pango_layout_iter_free(iter);", "-\t", "-\tOS.gdk_region_get_clipbox(clipRegion, rect);", "-\tOS.gdk_region_destroy(clipRegion);", "-\tif (OS.pango_context_get_base_dir(context) == OS.PANGO_DIRECTION_RTL) {", "-\t\trect.x = width() - rect.x - rect.width;", "+\t\trect.x += Math.min (indent, wrapIndent);", "+\t\treturn new Rectangle(rect.x, rect.y, rect.width, rect.height);", "+\t} else {", "+\t\tGdkRectangle rect = new GdkRectangle();", "+\t\t/* ", "+\t\t* Bug in Pango. The region returned by gdk_pango_layout_get_clip_region()", "+\t\t* includes areas from lines outside of the requested range.  The fix", "+\t\t* is to subtract these areas from the clip region.", "+\t\t*/", "+\t\tPangoRectangle pangoRect = new PangoRectangle();", "+\t\tlong /*int*/ iter = OS.pango_layout_get_iter(layout);", "+\t\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tlong /*int*/ linesRegion = OS.gdk_region_new ();", "+\t\tif (linesRegion == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tint lineEnd = 0;", "+\t\tdo {", "+\t\t\tOS.pango_layout_iter_get_line_extents(iter, null, pangoRect);", "+\t\t\tif (OS.pango_layout_iter_next_line(iter)) {", "+\t\t\t\tlineEnd = OS.pango_layout_iter_get_index(iter) - 1;", "+\t\t\t} else {", "+\t\t\t\tlineEnd = strlen;", "+\t\t\t}", "+\t\t\tif (byteStart > lineEnd) continue;", "+\t\t\trect.x = OS.PANGO_PIXELS(pangoRect.x);", "+\t\t\trect.y = OS.PANGO_PIXELS(pangoRect.y);", "+\t\t\trect.width = OS.PANGO_PIXELS(pangoRect.width);", "+\t\t\trect.height = OS.PANGO_PIXELS(pangoRect.height);", "+\t\t\tOS.gdk_region_union_with_rect(linesRegion, rect);", "+\t\t} while (lineEnd + 1 <= byteEnd);", "+\t\tOS.gdk_region_intersect (clipRegion, linesRegion);", "+\t\tOS.gdk_region_destroy (linesRegion);", "+\t\tOS.pango_layout_iter_free(iter);", "+\t\t", "+\t\tOS.gdk_region_get_clipbox(clipRegion, rect);", "+\t\tOS.gdk_region_destroy (clipRegion);", "+\t\tif (OS.pango_context_get_base_dir(context) == OS.PANGO_DIRECTION_RTL) {", "+\t\t\trect.x = width() - rect.x - rect.width;", "+\t\t}", "+\t\trect.x += Math.min (indent, wrapIndent);", "+\t\treturn new Rectangle(rect.x, rect.y, rect.width, rect.height);", "-\trect.x += Math.min (indent, wrapIndent);", "-\treturn new Rectangle(rect.x, rect.y, rect.width, rect.height);", "+"]}], "num": 34791}
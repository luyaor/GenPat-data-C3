{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9963c4ac5d3f5e88ba1f90e167462f64", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcef9fe533ab72e1ed5f4c0cd26daf39", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "79096269bec9be1584da7b8d31d5fe9573da995d", "commitAfterChange": "6509ef8bfeb70fc2d3b31e1b10ac7b68ca1e7295", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 88, "signatureBeforeChange": " boolean setItemLocation()", "signatureAfterChange": " boolean setItemLocation()", "diff": ["-\t\tint defaultX = size.x + 10; // off screen", "+\t\tint defaultX = getDisplay().getBounds().width + 10; // off screen", "+\t\t\tCTabItem item = items[i];", "-\t\t\t\tCTabItem item = items[selectedIndex];", "+\t\t\t\tfirstIndex = selectedIndex;", "+\t\t\t\titem.showing = true;", "-\t\t\t\titems[i].x = defaultX;", "+\t\t\t\titem.x = defaultX;", "+\t\t\t\titem.showing = false;", "-\t\tint x = -1;", "-\t\tfor (int i = firstIndex - 1; i >= 0; i--) { ", "-\t\t\t// if the first visible tab is not the first tab", "-\t\t\tCTabItem item = items[i];", "-\t\t\tx -= item.width; ", "-\t\t\t// layout tab items from right to left thus making them invisible", "-\t\t\titem.x = x;", "-\t\t\titem.y = y;", "-\t\t\titem.closeRect.x = item.x + item.width - BUTTON_SIZE - CTabItem.RIGHT_MARGIN;", "-\t\t\titem.closeRect.y = onBottom ? size.y - borderBottom - tabHeight + (tabHeight - BUTTON_SIZE)/2 : borderTop + (tabHeight - BUTTON_SIZE)/2;", "-\t\t}", "-\t\t", "-\t\tx = 0;", "-\t\tfor (int i = firstIndex; i < items.length; i++) {", "-\t\t\t// continue laying out remaining, visible items left to right ", "-\t\t\tCTabItem item = items[i];", "-\t\t\tif (item.x != x || item.y != y) changed = true;", "-\t\t\titem.x = x;", "-\t\t\titem.y = y;", "-\t\t\tif (i == selectedIndex) {", "-\t\t\t\tint edge = Math.min(item.x + item.width, rightItemEdge);", "-\t\t\t\titem.closeRect.x = edge - CTabItem.RIGHT_MARGIN - BUTTON_SIZE;", "+\t\tint maxWidth = rightItemEdge - borderLeft;", "+\t\tint width = 0;", "+\t\tfor (int i = 0; i < priority.length; i++) {", "+\t\t\tCTabItem item = items[priority[i]];", "+\t\t\tif (width > maxWidth) {", "+\t\t\t\titem.showing = false;", "-\t\t\t\titem.closeRect.x = item.x + item.width - CTabItem.RIGHT_MARGIN - BUTTON_SIZE;", "+\t\t\t\twidth += item.width;", "+\t\t\t\titem.showing = i == 0 || width <= maxWidth;", "+\t\t\t\tif (!simple && priority[i] == selectedIndex) width += curveWidth - 2*curveIndent;", "-\t\t\titem.closeRect.y = onBottom ? size.y - borderBottom - tabHeight + (tabHeight - BUTTON_SIZE)/2: borderTop + (tabHeight - BUTTON_SIZE)/2;", "-\t\t\tx = x + item.width;", "-\t\t\tif (!simple && i == selectedIndex) x += curveWidth - 2*curveIndent;", "+\t\t}", "+\t\tint x = 0;", "+\t\tint defaultX = getDisplay().getBounds().width + 10; // off screen", "+\t\tfirstIndex = items.length - 1;", "+\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\tCTabItem item = items[i];", "+\t\t\tif (!item.showing) {", "+\t\t\t\tif (item.x != defaultX) changed = true;", "+\t\t\t\titem.x = defaultX;", "+\t\t\t} else {", "+\t\t\t\tfirstIndex = Math.min(firstIndex, i);", "+\t\t\t\tif (item.x != x || item.y != y) changed = true;", "+\t\t\t\titem.x = x;", "+\t\t\t\titem.y = y;", "+\t\t\t\tif (i == selectedIndex) {", "+\t\t\t\t\tint edge = Math.min(item.x + item.width, rightItemEdge);", "+\t\t\t\t\titem.closeRect.x = edge - CTabItem.RIGHT_MARGIN - BUTTON_SIZE;", "+\t\t\t\t} else {", "+\t\t\t\t\titem.closeRect.x = item.x + item.width - CTabItem.RIGHT_MARGIN - BUTTON_SIZE;", "+\t\t\t\t}", "+\t\t\t\titem.closeRect.y = onBottom ? size.y - borderBottom - tabHeight + (tabHeight - BUTTON_SIZE)/2: borderTop + (tabHeight - BUTTON_SIZE)/2;", "+\t\t\t\tx = x + item.width;", "+\t\t\t\tif (!simple && i == selectedIndex) x += curveWidth - 2*curveIndent;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "59caf08931f2aa326a1935449293d39c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "fb708aa88544f8882b0e977aedacf69c07c840ce", "commitAfterChange": "b5382ff64d0b46150aeba7fc4f0579a270771fa7", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 62, "signatureBeforeChange": " void makeAvailable (TreeItem item)", "signatureAfterChange": " void makeAvailable (TreeItem item)", "diff": ["-\tTreeItem parentItem = item.parentItem;", "-\tint parentAvailableIndex = parentItem.availableIndex;", "-\tTreeItem[] parentAvailableDescendents = parentItem.computeAvailableDescendents ();", "-\tTreeItem[] newAvailableItems = new TreeItem [availableItems.length + 1];", "+\tint parentItemCount = item.parentItem.items.length; ", "+\tint index = 0;", "+\tif (parentItemCount == 1) {\t\t/* this is the only child of parentItem */", "+\t\tindex = item.parentItem.availableIndex + 1;", "+\t} else {", "+\t\t/* determine this item's index in its parent */", "+\t\tint itemIndex = 0;", "+\t\tTreeItem[] items = item.parentItem.items;", "+\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\tif (items [i] == item) {", "+\t\t\t\titemIndex = i;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\tif (itemIndex != parentItemCount - 1) {\t/* this is not the last child */", "+\t\t\tindex = items [itemIndex + 1].availableIndex;", "+\t\t} else {\t/* this is the last child */", "+\t\t\tTreeItem previousItem = items [itemIndex - 1];", "+\t\t\tindex = previousItem.availableIndex + previousItem.computeAvailableDescendentCount ();", "+\t\t}", "+\t}", "-\tSystem.arraycopy (availableItems, 0, newAvailableItems, 0, parentAvailableIndex);", "-\tSystem.arraycopy (parentAvailableDescendents, 0, newAvailableItems, parentAvailableIndex, parentAvailableDescendents.length);", "-\tint startIndex = parentAvailableIndex + parentAvailableDescendents.length - 1;", "-\tSystem.arraycopy (", "-\t\t\tavailableItems,", "-\t\t\tstartIndex,", "-\t\t\tnewAvailableItems,", "-\t\t\tparentAvailableIndex + parentAvailableDescendents.length,", "-\t\t\tavailableItems.length - startIndex);", "+\tTreeItem[] itemsToInsert = item.computeAvailableDescendents ();", "+\tTreeItem[] newAvailableItems = new TreeItem [availableItems.length + itemsToInsert.length];", "+\tSystem.arraycopy (availableItems, 0, newAvailableItems, 0, index);", "+\tSystem.arraycopy (itemsToInsert, 0, newAvailableItems, index, itemsToInsert.length);", "+\tSystem.arraycopy (availableItems, index, newAvailableItems, index + itemsToInsert.length, availableItems.length - index);", "-\tfor (int i = parentAvailableIndex; i < availableItems.length; i++) {", "+\tfor (int i = index; i < availableItems.length; i++) {", "-\tRectangle bounds = item.getBounds ();", "-\tint rightX = bounds.x + bounds.width;", "+\tint rightX = 0;", "+\tfor (int i = 0; i < itemsToInsert.length; i++) {", "+\t\tRectangle bounds = itemsToInsert [i].getBounds ();", "+\t\trightX = Math.max (rightX, bounds.x + bounds.width);", "+\t}"]}], "num": 38355}
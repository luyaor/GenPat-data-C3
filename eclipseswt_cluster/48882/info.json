{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c348af1d9c436c6227e86dfee51997b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da6c40034e03b1302451d9954d4c1296", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "d70097b3723123dbd8abcf6b34b2f106be849ad8", "commitAfterChange": "b6666a5139ca22ba429077362792bdaf8b234877", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 27, "signatureBeforeChange": "  ImageData gio_getImageData()", "signatureAfterChange": "  ImageData gio_getImageData()", "diff": ["-\ttry {", "-\t\tint /*long*/ icon_theme =OS.gtk_icon_theme_get_default();", "-\t\tbyte[] icon = Converter.wcsToMbcs (null, iconPath, true);", "-\t\tint /*long*/ gicon = OS.g_icon_new_for_string(icon, null);", "+\tint /*long*/ icon_theme =OS.gtk_icon_theme_get_default();", "+\tbyte[] icon = Converter.wcsToMbcs (null, iconPath, true);", "+\tint /*long*/ gicon = OS.g_icon_new_for_string(icon, null);", "+\tif (gicon != 0) {", "-\t\tint /*long*/ pixbuf = OS.gtk_icon_info_load_icon(gicon_info, null);\t\t", "-\t\tif (pixbuf != 0) {", "-\t\t\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "-\t\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "-\t\t\tint height = OS.gdk_pixbuf_get_height(pixbuf);", "-\t\t\tint width = OS.gdk_pixbuf_get_width(pixbuf);", "-\t\t\tboolean hasAlpha = OS.gdk_pixbuf_get_has_alpha(pixbuf);", "-\t\t\tbyte[] srcData = new byte[stride * height];", "-\t\t\tOS.memmove(srcData, pixels, srcData.length);", "-\t\t\tOS.g_object_unref(pixbuf);", "-\t\t\t", "-\t\t\tif (hasAlpha) {", "-\t\t\t\tPaletteData palette = new PaletteData(0xFF000000, 0xFF0000, 0xFF00);", "-\t\t\t\tdata = new ImageData(width, height, 32, palette, 4, srcData);", "-\t\t\t\tdata.bytesPerLine = stride;", "-\t\t\t\tint s = 3, a = 0;", "-\t\t\t\tbyte[] alphaData = new byte[width*height];", "-\t\t\t\tfor (int y=0; y<height; y++) {", "-\t\t\t\t\tfor (int x=0; x<width; x++) {", "-\t\t\t\t\t\talphaData[a++] = srcData[s];", "-\t\t\t\t\t\tsrcData[s] = 0;", "-\t\t\t\t\t\ts+=4;", "+\t\tif (gicon_info != 0) {", "+\t\t\tint /*long*/ pixbuf = OS.gtk_icon_info_load_icon(gicon_info, null);\t\t", "+\t\t\tif (pixbuf != 0) {", "+\t\t\t\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "+\t\t\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "+\t\t\t\tint height = OS.gdk_pixbuf_get_height(pixbuf);", "+\t\t\t\tint width = OS.gdk_pixbuf_get_width(pixbuf);", "+\t\t\t\tboolean hasAlpha = OS.gdk_pixbuf_get_has_alpha(pixbuf);", "+\t\t\t\tbyte[] srcData = new byte[stride * height];", "+\t\t\t\tOS.memmove(srcData, pixels, srcData.length);", "+\t\t\t\tOS.g_object_unref(pixbuf);", "+\t\t\t\tif (hasAlpha) {", "+\t\t\t\t\tPaletteData palette = new PaletteData(0xFF000000, 0xFF0000, 0xFF00);", "+\t\t\t\t\tdata = new ImageData(width, height, 32, palette, 4, srcData);", "+\t\t\t\t\tdata.bytesPerLine = stride;", "+\t\t\t\t\tint s = 3, a = 0;", "+\t\t\t\t\tbyte[] alphaData = new byte[width*height];", "+\t\t\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\t\t\t\talphaData[a++] = srcData[s];", "+\t\t\t\t\t\t\tsrcData[s] = 0;", "+\t\t\t\t\t\t\ts+=4;", "+\t\t\t\t\t\t}", "+\t\t\t\t\tdata.alphaData = alphaData;", "+\t\t\t\t} else {", "+\t\t\t\t\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "+\t\t\t\t\tdata = new ImageData(width, height, 24, palette, 4, srcData);", "+\t\t\t\t\tdata.bytesPerLine = stride;", "-\t\t\t\tdata.alphaData = alphaData;", "-\t\t\t} else {", "-\t\t\t\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "-\t\t\t\tdata = new ImageData(width, height, 24, palette, 4, srcData);", "-\t\t\t\tdata.bytesPerLine = stride;", "+\t\t\tOS.gtk_icon_info_free(gicon_info);", "-\t} catch (Exception e) {}", "+\t\tOS.g_object_unref(gicon);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "848f8659f4647f6312bfe2d636fb2061", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public ImageData getImageData ()", "signatureAfterChange": " public ImageData getImageData ()", "diff": ["-\tNSWorkspace workspace = NSWorkspace.sharedWorkspace();", "-\tNSString fullPath;", "-\tif (this.fullPath != null) {", "-\t\tfullPath = NSString.stringWith(this.fullPath);", "-\t} else {", "-\t\tfullPath = workspace.fullPathForApplication(NSString.stringWith(name));", "-\t}", "-\tif (fullPath != null) {", "-\t\tNSImage nsImage = workspace.iconForFile(fullPath);", "-\t\tif (nsImage != null) {", "-\t\t\tNSSize size = new NSSize();", "-\t\t\tsize.width = size.height = 16;", "-\t\t\tnsImage.setSize(size);", "-\t\t\tNSBitmapImageRep imageRep = null;", "-\t\t\tNSImageRep rep = nsImage.bestRepresentationForDevice(null);", "-\t\t\tif (rep.isKindOfClass(OS.class_NSBitmapImageRep)) { ", "-\t\t\t\timageRep = new NSBitmapImageRep(rep.id);", "-\t\t\t}", "-\t\t\tif (imageRep != null) {", "-\t\t\t\tint width = (int)/*64*/imageRep.pixelsWide();", "-\t\t\t\tint height = (int)/*64*/imageRep.pixelsHigh();", "-\t\t\t\tint bpr = (int)/*64*/imageRep.bytesPerRow();", "-\t\t\t\tint bpp = (int)/*64*/imageRep.bitsPerPixel();", "-\t\t\t\tint dataSize = height * bpr;", "-\t\t\t\tbyte[] srcData = new byte[dataSize];", "-\t\t\t\tOS.memmove(srcData, imageRep.bitmapData(), dataSize);", "-\t\t\t\t//TODO check color info", "-\t\t\t\tPaletteData palette = new PaletteData(0xFF000000, 0xFF0000, 0xFF00);", "-\t\t\t\tImageData data = new ImageData(width, height, bpp, palette, 4, srcData);", "-\t\t\t\tdata.bytesPerLine = bpr;", "-\t\t\t\tdata.alphaData = new byte[width * height];", "-\t\t\t\tfor (int i = 3, o = 0; i < srcData.length; i+= 4, o++) {", "-\t\t\t\t\tdata.alphaData[o] = srcData[i];", "+\tNSAutoreleasePool pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tNSWorkspace workspace = NSWorkspace.sharedWorkspace();", "+\t\tNSString fullPath;", "+\t\tif (this.fullPath != null) {", "+\t\t\tfullPath = NSString.stringWith(this.fullPath);", "+\t\t} else {", "+\t\t\tfullPath = workspace.fullPathForApplication(NSString.stringWith(name));", "+\t\t}", "+\t\tif (fullPath != null) {", "+\t\t\tNSImage nsImage = workspace.iconForFile(fullPath);", "+\t\t\tif (nsImage != null) {", "+\t\t\t\tNSSize size = new NSSize();", "+\t\t\t\tsize.width = size.height = 16;", "+\t\t\t\tnsImage.setSize(size);", "+\t\t\t\tNSBitmapImageRep imageRep = null;", "+\t\t\t\tNSImageRep rep = nsImage.bestRepresentationForDevice(null);", "+\t\t\t\tif (rep.isKindOfClass(OS.class_NSBitmapImageRep)) { ", "+\t\t\t\t\timageRep = new NSBitmapImageRep(rep.id);", "-\t\t\t\treturn data;", "+\t\t\t\tif (imageRep != null) {", "+\t\t\t\t\tint width = (int)/*64*/imageRep.pixelsWide();", "+\t\t\t\t\tint height = (int)/*64*/imageRep.pixelsHigh();", "+\t\t\t\t\tint bpr = (int)/*64*/imageRep.bytesPerRow();", "+\t\t\t\t\tint bpp = (int)/*64*/imageRep.bitsPerPixel();", "+\t\t\t\t\tint dataSize = height * bpr;", "+\t\t\t\t\tbyte[] srcData = new byte[dataSize];", "+\t\t\t\t\tOS.memmove(srcData, imageRep.bitmapData(), dataSize);", "+\t\t\t\t\t//TODO check color info", "+\t\t\t\t\tPaletteData palette = new PaletteData(0xFF000000, 0xFF0000, 0xFF00);", "+\t\t\t\t\tImageData data = new ImageData(width, height, bpp, palette, 4, srcData);", "+\t\t\t\t\tdata.bytesPerLine = bpr;", "+\t\t\t\t\tdata.alphaData = new byte[width * height];", "+\t\t\t\t\tfor (int i = 3, o = 0; i < srcData.length; i+= 4, o++) {", "+\t\t\t\t\t\tdata.alphaData[o] = srcData[i];", "+\t\t\t\t\t}", "+\t\t\t\t\treturn data;", "+\t\t\t\t}", "+\t\treturn null;", "+\t} finally {", "+\t\tpool.release();", "-\treturn null;"]}], "num": 48882}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f8c8b968105e5a144bc384508dcbf0a7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cef5fbf7471c9fc570e4b9af860542c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "9213cc7759276dfbb4dc068628f524b49e86b501", "commitAfterChange": "68636a56d8d850b4f73d1c0b16c1b71a8e851ba7", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\t\tint columnWidth = 0;", "-\t\t\tGC gc = new GC (this);", "-\t\t\tfor (int i=0; i<items.length; i++) {", "-\t\t\t\tTreeItem item = items [i];", "-\t\t\t\tif (item != null && item.parentItem == null) {", "-\t\t\t\t\tcolumnWidth = Math.max (columnWidth, items [i].calculateWidth (0, gc));", "-\t\t\t\t}", "+\t\t\tint levelIndent = DISCLOSURE_COLUMN_LEVEL_INDENT;", "+\t\t\tif (OS.VERSION >= 0x1040) {", "+\t\t\t\tfloat [] metric = new float [1];", "+\t\t\t\tOS.DataBrowserGetMetric (handle, OS.kDataBrowserMetricDisclosureColumnPerDepthGap, null, metric);", "+\t\t\t\tlevelIndent = (int) metric [0];", "+\t\t\tGC gc = new GC (this);", "+\t\t\twidth = calculateWidth (childIds, gc, true, 0, levelIndent);", "-\t\t\twidth += columnWidth + getInsetWidth (column_id, true);", "+\t\t\twidth += getInsetWidth (column_id, true);", "-\t\theight = getItemCount () * getItemHeight () + getHeaderHeight();", "+\t\theight = visibleCount * getItemHeight () + getHeaderHeight();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d0b5a830058a35d1fa05b45b19fd329", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "7626dd6837c79b3d44c889ada194bd6cf6fefbaf", "commitAfterChange": "f490c340b8fb06c8878d22853dfd8ecb77079ee9", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 16, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-//\t\t\tint levelIndent = DISCLOSURE_COLUMN_LEVEL_INDENT;", "-//\t\t\tif (OS.VERSION >= 0x1040) {", "-//\t\t\t\tfloat [] metric = new float [1];", "-//\t\t\t\tOS.DataBrowserGetMetric (handle, OS.kDataBrowserMetricDisclosureColumnPerDepthGap, null, metric);", "-//\t\t\t\tlevelIndent = (int) metric [0];", "-//\t\t\t}", "-//\t\t\tGC gc = new GC (this);", "-//\t\t\twidth = calculateWidth (childIds, gc, true, 0, levelIndent);", "-//\t\t\tgc.dispose ();", "-//\t\t\twidth += getInsetWidth (column_id, true);", "+\t\t\tGC gc = new GC (this);", "+\t\t\twidth = calculateWidth (items, 0, gc, true);", "+\t\t\tgc.dispose ();"]}], "num": 3070}
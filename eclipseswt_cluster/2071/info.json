{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb09bab549cb3ecac3f711bd5958323d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9772aa75b9081bb6fd30a89ba1da307c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "28611873c812080da03092456ee7cc4c93ef80a3", "commitAfterChange": "e657e76e5131e900496ccd41899277450879646c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 21, "signatureBeforeChange": " \t\t\tpublic int windowProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int transparentProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["-\t\tObject windowProc = new Object () {", "-\t\t\tpublic int windowProc (int hwnd, int msg, int wParam, int lParam) {", "-\t\t\t\tswitch (msg) {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* We typically do not want to answer that the transparent window is", "-\t\t\t\t\t* transparent to hits since doing so negates the effect of having it", "-\t\t\t\t\t* to grab events.  However, clients of the tracker should not be aware", "-\t\t\t\t\t* of this transparent window.  Therefore if there is a hit query", "-\t\t\t\t\t* performed as a result of client code then answer that the transparent", "-\t\t\t\t\t* window is transparent to hits so that its existence will not impact", "-\t\t\t\t\t* the client.", "-\t\t\t\t\t*/", "-\t\t\t\t\tcase OS.WM_NCHITTEST:", "-\t\t\t\t\t\tif (inEvent) return OS.HTTRANSPARENT;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.WM_SETCURSOR:", "-\t\t\t\t\t\tif (clientCursor != 0) {", "-\t\t\t\t\t\t\tOS.SetCursor (clientCursor);", "-\t\t\t\t\t\t\treturn 1;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (resizeCursor != 0) {", "-\t\t\t\t\t\t\tOS.SetCursor (resizeCursor);", "-\t\t\t\t\t\t\treturn 1;", "-\t\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn OS.CallWindowProc (oldProc, hwnd, msg, wParam, lParam);", "-\t\t\t}", "+", "+int transparentProc (int hwnd, int msg, int wParam, int lParam) {", "+\tswitch (msg) {", "+\t\t/*", "+\t\t* We typically do not want to answer that the transparent window is", "+\t\t* transparent to hits since doing so negates the effect of having it", "+\t\t* to grab events.  However, clients of the tracker should not be aware", "+\t\t* of this transparent window.  Therefore if there is a hit query", "+\t\t* performed as a result of client code then answer that the transparent", "+\t\t* window is transparent to hits so that its existence will not impact", "+\t\t* the client.", "+\t\t*/", "+\t\tcase OS.WM_NCHITTEST:", "+\t\t\tif (inEvent) return OS.HTTRANSPARENT;", "+\t\t\tbreak;", "+\t\tcase OS.WM_SETCURSOR:", "+\t\t\tif (clientCursor != 0) {", "+\t\t\t\tOS.SetCursor (clientCursor);", "+\t\t\t\treturn 1;", "+\t\t\t}", "+\t\t\tif (resizeCursor != 0) {", "+\t\t\t\tOS.SetCursor (resizeCursor);", "+\t\t\t\treturn 1;", "+\t\t\t}", "+\t}", "+\treturn OS.CallWindowProc (oldProc, hwnd, msg, wParam, lParam);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee6c65181e16f576e699934d6759abca", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "108b9dd38cc7c1124205fb1899f8aad5ad317989", "commitAfterChange": "5014eebfedd0f623cdc5c8c21ddc6fda2b771129", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "  int gtk_changed (int widget)", "signatureAfterChange": "  int gtk_changed (int widget)", "diff": ["-\tif (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {", "-\t\tif (widget == handle) {", "-\t\t\tif (entryHandle == 0) {", "-\t\t\t\tsendEvent(SWT.Modify);", "-\t\t\t\tif (isDisposed ()) return 0;", "-\t\t\t}", "-\t\t\t/*", "-\t\t\t* Feature in GTK.  GTK emits a changed signal whenever", "-\t\t\t* the contents of a combo box are altered by typing or", "-\t\t\t* by selecting an item in the list, but the event should", "-\t\t\t* only be sent when the list is selected. The fix is to", "-\t\t\t* only send out a selection event when there is a selected", "-\t\t\t* item. ", "-\t\t\t* ", "-\t\t\t* NOTE: This code relies on GTK clearing the selected", "-\t\t\t* item and not matching the item as the user types.", "-\t\t\t*/", "-\t\t\tint index = OS.gtk_combo_box_get_active (handle);", "-\t\t\tif (index != -1) sendSelectionEvent (SWT.Selection);", "-\t\t\tindexSelected = -1;", "-\t\t\treturn 0;", "+\tif (widget == handle) {", "+\t\tif (entryHandle == 0) {", "+\t\t\tsendEvent(SWT.Modify);", "+\t\t\tif (isDisposed ()) return 0;", "-\t} else {", "-\t\tif (!ignoreSelect) {", "-\t\t\tint /*long*/ ptr = OS.gtk_entry_get_text (entryHandle);", "-\t\t\tint length = OS.strlen (ptr);", "-\t\t\tbyte [] buffer = new byte [length];", "-\t\t\tOS.memmove (buffer, ptr, length);", "-\t\t\tString text = new String (Converter.mbcsToWcs (null, buffer));", "-\t\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\t\tif (items [i].equals (text)) {", "-\t\t\t\t\tsendSelectionEvent (SWT.Selection);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\t/*", "+\t\t* Feature in GTK.  GTK emits a changed signal whenever", "+\t\t* the contents of a combo box are altered by typing or", "+\t\t* by selecting an item in the list, but the event should", "+\t\t* only be sent when the list is selected. The fix is to", "+\t\t* only send out a selection event when there is a selected", "+\t\t* item. ", "+\t\t* ", "+\t\t* NOTE: This code relies on GTK clearing the selected", "+\t\t* item and not matching the item as the user types.", "+\t\t*/", "+\t\tint index = OS.gtk_combo_box_get_active (handle);", "+\t\tif (index != -1) sendSelectionEvent (SWT.Selection);", "+\t\tindexSelected = -1;", "+\t\treturn 0;"]}], "num": 2071}
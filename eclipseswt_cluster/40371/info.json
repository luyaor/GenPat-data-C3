{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6340750a0db18e8d5fae31496c02aac9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4293b43462dc0ceffde1479eebb25f62", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "4ac09027c9f7f4d02320c8e33ce03768c7aca3e6", "commitAfterChange": "6fbc2de9040893804e21b633e2de9a88dfb463d2", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": " public boolean loadFont (String path)", "signatureAfterChange": " public boolean loadFont (String path)", "diff": ["-\tint index = path.lastIndexOf (\"/\");", "-\tif (index != -1) path = path.substring (0, index);", "-\tint [] ndirs = new int [1];", "-\tint dirs = OS.XGetFontPath (xDisplay, ndirs);", "-\tint [] ptr = new int [1];", "-\tfor (int i = 0; i < ndirs [0]; i++) {", "-\t\tOS.memmove (ptr, dirs + (i * 4), 4);", "-\t\tint length = OS.strlen (ptr [0]);", "-\t\tbyte [] buffer = new byte [length];", "-\t\tOS.memmove (buffer, ptr [0], length);", "-\t\tif (Converter.mbcsToWcs (null, buffer).equals (path)) {", "-\t\t\tOS.XFreeFontPath (dirs);", "-\t\t\treturn true;", "-\t\t}", "-\t}", "-\tint newDirs = OS.XtMalloc ((ndirs [0] + 1) * 4);", "-\tint[] dirsBuffer = new int [ndirs [0] + 1];", "-\tOS.memmove (dirsBuffer, dirs, ndirs [0] * 4);", "-\tbyte[] buffer = Converter.wcsToMbcs (null, path, true);", "-\tint pathPtr = OS.XtMalloc (buffer.length);", "-\tOS.memmove (pathPtr, buffer, buffer.length);", "-\tdirsBuffer [dirsBuffer.length - 1] = pathPtr;", "-\tOS.memmove (newDirs, dirsBuffer, dirsBuffer.length * 4);", "-\tOS.XSetFontPath (xDisplay, newDirs, dirsBuffer.length);", "-\tOS.XFreeFontPath (dirs);", "-\tOS.XFree (newDirs);", "-\tOS.XFree (pathPtr);", "-\treturn true;", "+//\tint index = path.lastIndexOf (\"/\");", "+//\tif (index != -1) path = path.substring (0, index);", "+//\tint [] ndirs = new int [1];", "+//\tint dirs = OS.XGetFontPath (xDisplay, ndirs);", "+//\tint [] ptr = new int [1];", "+//\tfor (int i = 0; i < ndirs [0]; i++) {", "+//\t\tOS.memmove (ptr, dirs + (i * 4), 4);", "+//\t\tint length = OS.strlen (ptr [0]);", "+//\t\tbyte [] buffer = new byte [length];", "+//\t\tOS.memmove (buffer, ptr [0], length);", "+//\t\tif (Converter.mbcsToWcs (null, buffer).equals (path)) {", "+//\t\t\tOS.XFreeFontPath (dirs);", "+//\t\t\treturn true;", "+//\t\t}", "+//\t}", "+//\tint newDirs = OS.XtMalloc ((ndirs [0] + 1) * 4);", "+//\tint[] dirsBuffer = new int [ndirs [0] + 1];", "+//\tOS.memmove (dirsBuffer, dirs, ndirs [0] * 4);", "+//\tbyte[] buffer = Converter.wcsToMbcs (null, path, true);", "+//\tint pathPtr = OS.XtMalloc (buffer.length);", "+//\tOS.memmove (pathPtr, buffer, buffer.length);", "+//\tdirsBuffer [dirsBuffer.length - 1] = pathPtr;", "+//\tOS.memmove (newDirs, dirsBuffer, dirsBuffer.length * 4);", "+//\tOS.XSetFontPath (xDisplay, newDirs, dirsBuffer.length);", "+//\tOS.XFreeFontPath (dirs);", "+//\tOS.XFree (newDirs);", "+//\tOS.XFree (pathPtr);", "+//\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e8ed4d1fc6bd5c204d38a0d89f1af41", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "48512dc20e32e369917d3e1ccfb92109c9724e7e", "commitAfterChange": "1942f64e0b774317e0a8e6ec44902bb736bb7790", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public FontData [] getFontList (String faceName, boolean scalable)", "signatureAfterChange": " public FontData[] getFontList (String faceName, boolean scalable)", "diff": ["-public FontData [] getFontList (String faceName, boolean scalable) {\t", "+public FontData[] getFontList (String faceName, boolean scalable) {\t", "-\tString xlfd;", "-\tif (faceName == null) {", "-\t\txlfd = \"-*\";", "-\t} else {", "-\t\tint dashIndex = faceName.indexOf('-');", "-\t\tif (dashIndex < 0) {", "-\t\t\txlfd = \"-*-\" + faceName + \"-*\";", "-\t\t} else {", "-\t\t\txlfd = \"-\" + faceName + \"-*\";", "-\t\t}", "-\t}", "-\t/* Use the character encoding for the default locale */", "-\tbyte [] buffer1 = Converter.wcsToMbcs (null, xlfd, true);", "-\tint [] ret = new int [1];", "-\tint listPtr = OS.XListFonts (buffer1, 65535, ret);", "-\tint ptr = listPtr;", "-\tint [] intBuf = new int [1];", "-\tFontData [] fd = new FontData [ret [0]];", "-\tint fdIndex = 0;", "-\tfor (int i = 0; i < ret [0]; i++) {", "-\t\tOS.memmove (intBuf, ptr, 4);", "-\t\tint charPtr = intBuf [0];", "-\t\tint length = OS.strlen (charPtr);", "-\t\tbyte [] buffer2 = new byte [length];", "-\t\tOS.memmove (buffer2, charPtr, length);", "-\t\t/* Use the character encoding for the default locale */", "-\t\tchar [] chars = Converter.mbcsToWcs (null, buffer2);", "-\t\tFontData data = FontData.gtk_new (new String (chars));", "-\t\tboolean isScalable = data.averageWidth == 0 && data.pixels == 0 && data.points == 0;", "-\t\tif (isScalable == scalable) {", "-\t\t\tfd [fdIndex++] = data;", "-\t\t}", "-\t\tptr += 4;", "-\t}", "-\t// FIXME, leaking font list", "-//\tOS.XFreeFontNames (listPtr);", "-\tif (fdIndex == ret [0]) return fd;", "-\tFontData [] result = new FontData [fdIndex];", "-\tSystem.arraycopy (fd, 0, result, 0, fdIndex);", "-\treturn result;", "+\t", "+\t/* Temporary code.", "+\t * For now, we know that on Pango at least three font families are guaranteed", "+\t * to be present: Sans, Serif, and Monspace.", "+\t */", "+\tif (scalable) return getScalableFontList(faceName);", "+\treturn getNonScalableFontList(faceName);", "+}"]}], "num": 40371}
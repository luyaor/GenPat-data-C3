{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d9120a0e2e306b1335518066171edb4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ec2e797761b6f044b0b1c4d07e39272", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "7b1329ce4559c314d7caaf6d49255a2e36ae8db9", "commitAfterChange": "24fd6f27ac88e7d1cba0fa9d22650617bd958c27", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": "  static Object convertToJava(int jsVal)", "signatureAfterChange": "  static int invokeFunction (int functionId, int tokenVariant, int args)", "diff": ["-static Object convertToJava(int /*long*/ jsVal) {", "-\t/*", "-typedef uint8 JSValueType;", "-#define JSVAL_TYPE_DOUBLE            ((uint8)0x00)", "-#define JSVAL_TYPE_INT32             ((uint8)0x01)", "-#define JSVAL_TYPE_UNDEFINED         ((uint8)0x02)", "-#define JSVAL_TYPE_BOOLEAN           ((uint8)0x03)", "-#define JSVAL_TYPE_MAGIC             ((uint8)0x04)", "-#define JSVAL_TYPE_STRING            ((uint8)0x05)", "-#define JSVAL_TYPE_NULL              ((uint8)0x06)", "-#define JSVAL_TYPE_OBJECT            ((uint8)0x07)", "-#define JSVAL_TYPE_UNKNOWN           ((uint8)0x20)", "-#define JSVAL_TYPE_NONFUNOBJ         ((uint8)0x57)", "-#define JSVAL_TYPE_FUNOBJ            ((uint8)0x67)", "-#define JSVAL_TYPE_STRORNULL         ((uint8)0x77)", "-#define JSVAL_TYPE_OBJORNULL         ((uint8)0x78)", "-#define JSVAL_TYPE_BOXED             ((uint8)0x79)", "-#define JSVAL_TYPE_UNINITIALIZED     ((uint8)0x7d)", "-jsval_layout PRIVATE_PTR_TO_JSVAL_IMPL(void *ptr)", "-\t*/", "-\t", "+", "+static int /*long*/ invokeFunction (int functionId, int /*long*/ tokenVariant, int /*long*/ args) {", "+\tObject key = new Integer (functionId);", "+\tBrowserFunction function = (BrowserFunction)Mozilla.AllFunctions.get (key);", "+\tObject returnValue = null;", "+", "+\tif (function != null) {", "+\t\ttry {", "+\t\t\tshort[] type = new short[1]; /* PRUint16 */", "+\t\t\tnsIVariant variant = new nsIVariant (tokenVariant);", "+\t\t\tint rc = variant.GetDataType (type);", "+\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\tObject temp = convertToJava (variant, type[0]);", "+\t\t\ttype[0] = 0;", "+\t\t\tif (temp instanceof String) {", "+\t\t\t\tString token = (String)temp;", "+\t\t\t\tif (token.equals (function.token)) {", "+\t\t\t\t\tvariant = new nsIVariant (args);", "+\t\t\t\t\trc = variant.GetDataType (type);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\t\t\ttemp = convertToJava (variant, type[0]);", "+\t\t\t\t\tif (temp instanceof Object[]) {", "+\t\t\t\t\t\tObject[] arguments = (Object[])temp;", "+\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\treturnValue = function.function (arguments);", "+\t\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\t\t/* exception during function invocation */", "+\t\t\t\t\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t\t/* invalid argument value type */", "+\t\t\tif (function.isEvaluate) {", "+\t\t\t\t/* notify the evaluate function so that a java exception can be thrown */", "+\t\t\t\tfunction.function (new String[] {WebBrowser.CreateErrorString (new SWTException (SWT.ERROR_INVALID_RETURN_VALUE).getLocalizedMessage ())});", "+\t\t\t}", "+\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());", "+\t\t}", "+\t}", "+", "+\tint /*long*/[] result = new int /*long*/[1];", "+\tint rc = XPCOM.NS_GetComponentManager (result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+\tnsIComponentManager componentManager = new nsIComponentManager (result[0]);", "+\tresult[0] = 0;", "+\tnsIVariant variant;", "+\ttry {", "+\t\tvariant = convertToJS (returnValue, componentManager);", "+\t} catch (SWTException e) {", "+\t\t/* invalid return value type */", "+\t\tvariant = convertToJS (WebBrowser.CreateErrorString (e.getLocalizedMessage ()), componentManager);", "+\t}", "+\tcomponentManager.Release ();", "+", "+\treturn variant.getAddress ();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8b5e967147be69e54aa59ed219531e02", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "7b1329ce4559c314d7caaf6d49255a2e36ae8db9", "commitAfterChange": "24fd6f27ac88e7d1cba0fa9d22650617bd958c27", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 2, "signatureBeforeChange": "  int callJava (int functionId, int tokenVariant, int args, int returnPtr)", "signatureAfterChange": " static int callJava (int functionId, int tokenVariant, int argsVariant, int returnPtr)", "diff": ["+/* this is the BrowserFunction entry point when the detected XULRunner version is < 4 */", "+static int callJava (int functionId, int /*long*/ tokenVariant, int /*long*/ argsVariant, int /*long*/ returnPtr) {", "+\tint /*long*/ resultVariant = invokeFunction (functionId, tokenVariant, argsVariant);", "+\tC.memmove (returnPtr, new int /*long*/[] {resultVariant}, C.PTR_SIZEOF);", "+\treturn XPCOM.NS_OK;", "+}", "-", "-int callJava (int functionId, int /*long*/ tokenVariant, int /*long*/ args, int /*long*/ returnPtr) {", "-\tObject key = new Integer (functionId);", "-\tBrowserFunction function = (BrowserFunction)Mozilla.AllFunctions.get (key);", "-\tObject returnValue = null;", "-", "-\tif (function != null) {", "-\t\ttry {", "-\t\t\tshort[] type = new short[1]; /* PRUint16 */", "-\t\t\tnsIVariant variant = new nsIVariant (tokenVariant);", "-\t\t\tint rc = variant.GetDataType (type);", "-\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\tObject temp = convertToJava (variant, type[0]);", "-\t\t\ttype[0] = 0;", "-\t\t\tif (temp instanceof String) {", "-\t\t\t\tString token = (String)temp;", "-\t\t\t\tif (token.equals (function.token)) {", "-\t\t\t\t\tvariant = new nsIVariant (args);", "-\t\t\t\t\trc = variant.GetDataType (type);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\t\t\ttemp = convertToJava (variant, type[0]);", "-\t\t\t\t\tif (temp instanceof Object[]) {", "-\t\t\t\t\t\tObject[] arguments = (Object[])temp;", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\treturnValue = function.function (arguments);", "-\t\t\t\t\t\t} catch (Exception e) {", "-\t\t\t\t\t\t\t/* exception during function invocation */", "-\t\t\t\t\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} catch (IllegalArgumentException e) {", "-\t\t\t/* invalid argument value type */", "-\t\t\tif (function.isEvaluate) {", "-\t\t\t\t/* notify the evaluate function so that a java exception can be thrown */", "-\t\t\t\tfunction.function (new String[] {WebBrowser.CreateErrorString (new SWTException (SWT.ERROR_INVALID_RETURN_VALUE).getLocalizedMessage ())});", "-\t\t\t}", "-\t\t\treturnValue = WebBrowser.CreateErrorString (e.getLocalizedMessage ());", "-\t\t}", "-\t}", "-", "-\tint /*long*/[] result = new int /*long*/[1];", "-\tint rc = XPCOM.NS_GetComponentManager (result);", "-\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "-\tnsIComponentManager componentManager = new nsIComponentManager (result[0]);", "-\tresult[0] = 0;", "-\tnsIVariant variant;", "-\ttry {", "-\t\tvariant = convertToJS (returnValue, componentManager);", "-\t} catch (SWTException e) {", "-\t\t/* invalid return value type */", "-\t\tvariant = convertToJS (WebBrowser.CreateErrorString (e.getLocalizedMessage ()), componentManager);", "-\t}", "-\tcomponentManager.Release ();", "-\tC.memmove (returnPtr, new int /*long*/[] {variant.getAddress ()}, C.PTR_SIZEOF);", "-", "-\treturn XPCOM.NS_OK;", "-}"]}], "num": 55800}
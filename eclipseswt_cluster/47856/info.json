{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2a0b6be1615fb1e42100a7bda849dd33", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d4babc0b9de633f9953a683452bfd93", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "41f8d7adece06452508f7ef9680fa45b7d048dcb", "commitAfterChange": "8dcc501b4e10eb90295a0386fef9c48120f354cf", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r \r void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "signatureAfterChange": "\r \r void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "diff": ["-\t* Bug in WinCE.  StretchBlt does not correctly stretch when the\r", "-\t* source and destination HDCs are the same.  The workaround is to\r", "+\t* Bug in WinCE and Win98.  StretchBlt does not correctly stretch when\r", "+\t* the source and destination HDCs are the same.  The workaround is to\r", "-\t* Note that StretchBlt correctly compresses the image when the\r", "+\t* Note that on WinCE StretchBlt correctly compresses the image when the\r", "-\tif (OS.IsWinCE && (destWidth > srcWidth || destHeight > srcHeight)) {\r", "+\tif ((OS.IsWinCE && (destWidth > srcWidth || destHeight > srcHeight)) || (!OS.IsWinNT && !OS.IsWinCE)) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "27fc3faf98a4920690abd52ed6b4de10", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "a66bb9f02c6027fb784d7bb5f0fe1eb781c47d5c", "commitAfterChange": "697ec77b530d7279923dde47e57c1da432e0b57b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "signatureAfterChange": "  void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "diff": ["-\tif (OS.IsWinNT && OS.WIN32_VERSION >= OS.VERSION(4, 10)) {", "+\tboolean alphaBlendSupport = OS.IsWinNT && OS.WIN32_VERSION >= OS.VERSION(4, 10);", "+\tboolean isPrinter = OS.GetDeviceCaps(handle, OS.TECHNOLOGY) == OS.DT_RASPRINTER;", "+\tif (alphaBlendSupport && isPrinter) {", "+\t\tint caps = OS.GetDeviceCaps(handle, OS.SHADEBLENDCAPS);", "+\t\tif (caps != 0) {", "+\t\t\tif (srcImage.alpha != -1) {", "+\t\t\t\talphaBlendSupport = (caps & OS.SB_CONST_ALPHA) != 0;", "+\t\t\t} else {", "+\t\t\t\talphaBlendSupport = (caps & OS.SB_PIXEL_ALPHA) != 0;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (alphaBlendSupport) {", "+\t* ", "+\t* Note that this also fails when drawing to a printer.", "-\tif ((OS.IsWinCE && (destWidth > srcWidth || destHeight > srcHeight)) || (!OS.IsWinNT && !OS.IsWinCE)) {", "+\tif (isPrinter || (OS.IsWinCE && (destWidth > srcWidth || destHeight > srcHeight)) || (!OS.IsWinNT && !OS.IsWinCE)) {"]}], "num": 47856}
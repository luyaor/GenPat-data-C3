{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71e9d499d0e5286d6cdb69619296d4e6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fcef72f0f0e2ef63eea2747458145206", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "14acf66200121a713a0828213eeef6950c2ed676", "commitAfterChange": "be221eadc26e3227dfbd800a5da1dcd53d17c8ee", "methodNumberBeforeChange": 263, "methodNumberAfterChange": 263, "signatureBeforeChange": "  LRESULT WM_MENUSELECT (long wParam, long lParam)", "signatureAfterChange": "  LRESULT WM_MENUSELECT (long wParam, long lParam)", "diff": ["+\tOS.KillTimer (this.handle, Menu.ID_TOOLTIP_TIMER);", "+\tif (activeMenu != null)", "+\t\tactiveMenu.hideCurrentToolTip ();", "-\t\t\t\tif (newMenu != null) item = newMenu.cascade;", "+\t\t\t\tif (newMenu != null) {", "+\t\t\t\t\titem = newMenu.cascade;", "+\t\t\t\t\tactiveMenu = newMenu;", "+\t\t\t\t\tactiveMenu.selectedMenuItem = newMenu.cascade;", "+\t\t\t\t\tOS.SetTimer (this.handle, Menu.ID_TOOLTIP_TIMER, OS.TTM_GETDELAYTIME, 0);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tactiveMenu = (newMenu == null) ? menu : newMenu;", "+\t\t\tif (item != null && activeMenu != null) {", "+\t\t\t\tactiveMenu.selectedMenuItem = item;", "+\t\t\t\tOS.SetTimer (this.handle, Menu.ID_TOOLTIP_TIMER, OS.TTM_GETDELAYTIME, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "194efbe29c958a0591e2029dc69fcf18", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "661422432394351e3f7c8246c62533b4985dd33e", "commitAfterChange": "a60dcbe23c6c9a34e8c5f7c1961c3b95bba5018f", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "diff": ["+\t\t\t\t/*", "+\t\t\t\t* Bug in Windows.  When a table has the LVS_EX_GRIDLINES extended", "+\t\t\t\t* style and the user drags any column over the first column in the", "+\t\t\t\t* table, making the size become zero, when the user drags a column", "+\t\t\t\t* such that the size of the first column becomes non-zero, the grid", "+\t\t\t\t* lines are not redrawn.  The fix is to detect the case and force", "+\t\t\t\t* a redraw of the first column.", "+\t\t\t\t*/", "+\t\t\t\tint width = OS.SendMessage (handle, OS.LVM_GETCOLUMNWIDTH, 0, 0);", "+\t\t\t\tif (lastWidth == 0 && width > 0) {", "+\t\t\t\t\tint bits = OS.SendMessage (handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0);", "+\t\t\t\t\tif ((bits & OS.LVS_EX_GRIDLINES) != 0) {", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\t\t\t\trect.right = rect.left + width;", "+\t\t\t\t\t\tOS.InvalidateRect (handle, rect, true);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tlastWidth = width;", "-\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\t\t\tcolumn.sendEvent (SWT.Resize, event);", "+\t\t\t\t\t\t\tcolumn.sendEvent (SWT.Resize);", "-\t\t\t\t\t\t\t\t\tnewColumns [i].sendEvent (SWT.Move, event);", "+\t\t\t\t\t\t\t\t\tnewColumns [i].sendEvent (SWT.Move);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b37ea06ffd20f9ee18464f4219624717", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "3e1590e936827e2b0791736a26af73f675e625e6", "commitAfterChange": "4e33ab6a6b184887de2c99db0f551ffeb18ad0f6", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+\tif ((style & SWT.READ_ONLY) == 0) flags |= OS.DT_EDITCONTROL;", "-\tTEXTMETRIC tm = OS.IsUnicode ? (TEXTMETRIC) new TEXTMETRICW () : new TEXTMETRICA ();", "-\tOS.GetTextMetrics (hDC, tm);", "-\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "-\tOS.ReleaseDC (handle, hDC);", "-\twidth += OS.GetSystemMetrics (OS.SM_CXVSCROLL) + (tm.tmInternalLeading + border) * 2;", "+\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\tTEXTMETRIC tm = OS.IsUnicode ? (TEXTMETRIC) new TEXTMETRICW () : new TEXTMETRICA ();", "+\t\tOS.GetTextMetrics (hDC, tm);", "+\t\twidth += tm.tmInternalLeading * 2;", "+\t} else {", "+\t\tint hwndText = OS.GetDlgItem (handle, CBID_EDIT);", "+\t\tif (hwndText != 0) {", "+\t\t\tint margins = OS.SendMessage (hwndText, OS.EM_GETMARGINS, 0, 0);", "+\t\t\tint marginWidth = (margins & 0xFFFF) + ((margins >> 16) & 0xFFFF);", "+\t\t\twidth += marginWidth + 3;", "+\t\t}", "+\t}", "+\twidth += OS.GetSystemMetrics (OS.SM_CXVSCROLL) + border * 2;", "+\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "+\tOS.ReleaseDC (handle, hDC);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d3b9d067b41174d04ace79620f50e96", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "221110a7aad28344b4f9f22b1f6605ef072c3371", "commitAfterChange": "d05580e4c422bafa00cde82dd6220c7f18658c59", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 113, "signatureBeforeChange": "  void checkBackground ()", "signatureAfterChange": "  void setBackground ()", "diff": ["-void checkBackground () {", "-\tShell shell = getShell ();", "-\tComposite control = parent;", "-\tdo {", "-\t\tint mode = control.backgroundMode;", "-\t\tif (mode != 0) {", "-\t\t\tupdateBackgroundMode (mode);", "-\t\t\treturn;", "-\t\t}", "-\t\tif (control == shell) break;", "-\t\tcontrol = control.parent;", "-\t} while (control != null);", "-}", "+void setBackground () {", "+\tShell shell = getShell ();", "+\tif (this == shell) return;", "+\tComposite composite = parent;", "+\tdo {", "+\t\tint mode = composite.backgroundMode;", "+\t\tif (mode != 0) {", "+\t\t\tif (mode == SWT.INHERIT_DEFAULT) {", "+\t\t\t\tControl control = this;", "+\t\t\t\tdo {", "+\t\t\t\t\tif ((control.state & THEME_BACKGROUND) == 0) return;", "+\t\t\t\t\tcontrol = control.parent;", "+\t\t\t\t} while (control != composite);", "+\t\t\t}", "+\t\t\tstate |= PARENT_BACKGROUND;", "+\t\t\tControl control = findBackgroundControl ();", "+\t\t\tif (control == null) return;", "+\t\t\tif (control.backgroundImage != null) {", "+\t\t\t\tshell.releaseBrushes ();", "+\t\t\t\tupdateBackgroundImage ();\t\t", "+\t\t\t} else {", "+\t\t\t\tupdateBackgroundColor ();", "+\t\t\t}", "+\t\t\treturn;", "+\t\t}", "+\t\tif (composite == shell) break;", "+\t\tcomposite = composite.parent;", "+\t} while (true);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "113b662f5fa523b06649b0f3b8e64040", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "3fb77eb28b6507f7c80d01b4a4527155bb1cb497", "commitAfterChange": "5034a1b3ba3067c143389378efcfa15775eb9041", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 34, "signatureBeforeChange": " public int indexOf (MenuItem item)", "signatureAfterChange": " public int indexOf (MenuItem item)", "diff": ["-\tfor (int i = 0; i < itemCount; i++) {", "-\t\tif (items[i] == item) return i;", "+\tif (item == null) error (SWT.ERROR_NULL_ARGUMENT);", "+\tif (item.isDisposed()) error (SWT.ERROR_INVALID_ARGUMENT);", "+\tint index = -1;", "+\tif ((style & SWT.DROP_DOWN) != 0) {", "+\t\tindex = OS.CompositeCollection_IndexOf (handle, item.handle);", "+\t} else {", "+\t\tint items = OS.ItemsControl_Items (handle);", "+\t\tindex = OS.ItemCollection_IndexOf (items, item.handle);", "+\t\tOS.GCHandle_Free (items);", "-\treturn -1;", "+\treturn index;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48d2eb25096adcee143a6ca717d8bcd5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "7fccff985de1680cda4442339540104bad5d36a7", "commitAfterChange": "c25065768a620986e779f5bcf9bb953d36bdd77b", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": "  void printWidget (int hwnd, int hdc, GC gc)", "signatureAfterChange": "  void printWidget (int hwnd, int hdc, GC gc)", "diff": ["-\t\t\tOS.DefWindowProc (hwnd, OS.WM_SETREDRAW, 0, 0);", "+\t\t\tif ((bits & OS.WS_VISIBLE) != 0) {", "+\t\t\t\tOS.DefWindowProc (hwnd, OS.WM_SETREDRAW, 0, 0);", "+\t\t\t}", "+\t\t\tif ((bits & OS.WS_VISIBLE) != 0) {", "+\t\t\t\tOS.DefWindowProc (hwnd, OS.WM_SETREDRAW, 1, 0);", "+\t\t\t}", "+\t\t}", "+\t\tif ((bits & OS.WS_VISIBLE) == 0) {", "+\t\tif ((bits & OS.WS_VISIBLE) == 0) {", "+\t\t\tOS.DefWindowProc (hwnd, OS.WM_SETREDRAW, 0, 0);", "+\t\t}", "+\t\t\tif ((bits & OS.WS_VISIBLE) != 0) {", "+\t\t\t\tOS.DefWindowProc (hwnd, OS.WM_SETREDRAW, 0, 0);", "+\t\t\t}", "-\t\t\tif ((bits & OS.WS_VISIBLE) == 0) {", "-\t\t\t\tOS.DefWindowProc (hwnd, OS.WM_SETREDRAW, 0, 0);", "+\t\t\tif ((bits & OS.WS_VISIBLE) != 0) {", "+\t\t\t\tOS.DefWindowProc (hwnd, OS.WM_SETREDRAW, 1, 0);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "644aa82e7e9c3f81609cd7a9e229c668", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "5cc8edd08f6e6b95dad0c8fa8106f1fa83830fce", "commitAfterChange": "1216e74b895a4f8e4407e39be3f20d126c4af156", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 70, "signatureBeforeChange": "  void OnSelectedItemChanged (int args)", "signatureAfterChange": "  void OnSelectedItemChanged (int args)", "diff": ["+        default:", "+\t\t\tfor (int i = 0; i < selectedItemCount; i++) {", "+\t\t\t\tif (newItemRef == 0 || !OS.Object_Equals (newItemRef, selectedItems [i].handle)) {", "+\t\t\t\t\tOS.TreeViewItem_IsSelected (selectedItems [i].handle, false);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (newItem != null) {", "+\t\t\t\tOS.TreeViewItem_IsSelected (newItem.handle, true);", "+\t\t\t\tselectedItems = new TreeItem [] { newItem };", "+\t\t\t\tselectedItemCount = 1;", "+\t\t\t} else {", "+\t\t\t\tselectedItems = new TreeItem [0];", "+\t\t\t\tselectedItemCount = 0;", "+\t\t\t}", "+\t\t\tanchor = newItem;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33ca18492010cb080d7d24643ab49a16", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "04a9d68dce671f65c7fab8cd71dbec7b6bb2ded4", "commitAfterChange": "3e6618f3ba5be99ae8a936a2febd7e104dd1deaa", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Text (Composite parent, int style)", "signatureAfterChange": " public Text (Composite parent, int style)", "diff": ["+\tif (OS.GTK_VERSION >= OS.VERSION (2, 16, 0)) {", "+\t\tif ((style & SWT.SEARCH) != 0) {", "+\t\t\t/*", "+\t\t\t * Ensure that SWT.ICON_CANCEL and ICON_SEARCH are set.", "+\t\t\t * NOTE: ICON_CANCEL has the same value as H_SCROLL and", "+\t\t\t * ICON_SEARCH has the same value as V_SCROLL so it is", "+\t\t\t * necessary to first clear these bits to avoid a scroll", "+\t\t\t * bar and then reset the bit using the original style", "+\t\t\t * supplied by the programmer.", "+\t\t\t */", "+\t\t\tif ((style & SWT.ICON_CANCEL) != 0) {", "+\t\t\t\tthis.style |= SWT.ICON_CANCEL;", "+\t\t\t\tOS.gtk_entry_set_icon_from_stock (handle, OS.GTK_ENTRY_ICON_SECONDARY, OS.GTK_STOCK_CANCEL);", "+\t\t\t}", "+\t\t\tif ((style & SWT.ICON_SEARCH) != 0) {", "+\t\t\t\tthis.style |= SWT.ICON_SEARCH;", "+\t\t\t\tOS.gtk_entry_set_icon_from_stock (handle, OS.GTK_ENTRY_ICON_PRIMARY, OS.GTK_STOCK_FIND);", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "392b0332a47320907f32803489527230", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "8549b1db39ac8fd4bb7564c61e5b9a04b5efde6f", "commitAfterChange": "2b3120470b46968368044df3f94129d586bc41d5", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void pack ()", "signatureAfterChange": " public void pack ()", "diff": ["-\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, OS.LVSCW_AUTOSIZE);", "-\tint columnWidth = OS.SendMessage (hwnd, OS.LVM_GETCOLUMNWIDTH, index, 0);", "-\tif (headerWidth > columnWidth) {", "+\tif ((parent.style & SWT.VIRTUAL) != 0) {", "+\t\t}\t\t", "+\t} else {", "+\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, OS.LVSCW_AUTOSIZE);", "+\t\tint columnWidth = OS.SendMessage (hwnd, OS.LVM_GETCOLUMNWIDTH, index, 0);", "+\t\t/*", "+\t\t* Bug in Windows.  When LVM_SETCOLUMNWIDTH is used with LVSCW_AUTOSIZE", "+\t\t* where each item has I_IMAGECALLBACK but there are no images in the", "+\t\t* table, the size computed by LVM_SETCOLUMNWIDTH is to small for the", "+\t\t* first column, causing long items to be clipped with '...'.  The fix", "+\t\t* is to increase the value by a small amount. ", "+\t\t*/", "+\t\tif (index == 0 && parent.imageList == null) columnWidth += 2;", "+\t\tif (headerWidth > columnWidth) {", "+\t\t\tif (image == null) {", "+\t\t\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, OS.LVSCW_AUTOSIZE_USEHEADER);", "+\t\t\t} else {", "+\t\t\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, headerWidth);", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (index == 0) {", "+\t\t\t\tOS.SendMessage (hwnd, OS.LVM_SETCOLUMNWIDTH, index, columnWidth);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a94b130e9d2598f5240d8ff0418fddb9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "f2f4dd506eea76a132736579a3bfc08133df01f5", "commitAfterChange": "ee03521325ddbdca252c8e728369c2d3c88672ed", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["+", "+\t\t\t/* Bug in Windows. When the expandos are visible (or in process of fading away)", "+\t\t\t * and the tree control is hidden the animation timer does not stop calling the ", "+\t\t\t * window proc till the tree is visible again. This can cause performance problems", "+\t\t\t * specially in cases there the application has several tree controls in this state.", "+\t\t\t * The fix is to detect a timer that repeats itself several times when the control", "+\t\t\t * is not visible and stop it. The timer is stopped by sending a fake mouse move event.", "+\t\t\t * ", "+\t\t\t * Note: Just killing the timer could cause some internal clean up task related to the ", "+\t\t\t * animation not to run.", "+\t\t\t */", "+\t\t\tint /*long*/ bits = OS.SendMessage (handle, OS.TVM_GETEXTENDEDSTYLE, 0, 0);", "+\t\t\tif ((bits & OS.TVS_EX_FADEINOUTEXPANDOS) != 0) {", "+\t\t\t\tif (!OS.IsWindowVisible (hwnd)) {", "+\t\t\t\t\tif (lastTimerID == wParam) {", "+\t\t\t\t\t\tlastTimerCount++;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tlastTimerCount = 0;", "+\t\t\t\t\t}", "+\t\t\t\t\tlastTimerID = wParam;", "+\t\t\t\t\tif (lastTimerCount >= TIMER_MAX_COUNT) {", "+\t\t\t\t\t\tOS.CallWindowProc (TreeProc, handle, OS.WM_MOUSEMOVE, 0, 0);", "+\t\t\t\t\t\tlastTimerID = -1;", "+\t\t\t\t\t\tlastTimerCount = 0;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tlastTimerID = -1;", "+\t\t\t\t\tlastTimerCount = 0;", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ad796d836af13d0d2ffa154da889c66", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "ccb7c0bef9eed9b41f5a232c69e9847cf920ac30", "commitAfterChange": "af2089a085f1429ade013714800b546a3efdb24f", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "  void setWindowVisible (boolean visible, boolean key)", "signatureAfterChange": "  void setWindowVisible (boolean visible, boolean key)", "diff": ["-\t\t// If the parent window is miniaturized, the window will be shown", "-\t\t// when its parent is shown.", "-\t\tboolean parentMinimized = parent != null && ((Shell)parent).window.isMiniaturized();", "-\t\tif (!parentMinimized) {", "-\t\t\tif (key) {", "-\t\t\t\tmakeKeyAndOrderFront ();", "-\t\t\t} else {", "-\t\t\t\twindow.orderFront (null);", "+\t\tif ((style & (SWT.SHEET)) != 0) {", "+\t\t\tNSApplication application = NSApplication.sharedApplication();", "+\t\t\tapplication.beginSheet(window, ((Shell)parent).window, null, 0, 0);", "+\t\t\tif (OS.VERSION <= 0x1060 && window.respondsToSelector(OS.sel__setNeedsToUseHeartBeatWindow_)) {", "+\t\t\t\tOS.objc_msgSend(window.id, OS.sel__setNeedsToUseHeartBeatWindow_, 0);", "+\t\t\t}", "+\t\t} else {", "+\t\t\t// If the parent window is miniaturized, the window will be shown", "+\t\t\t// when its parent is shown.", "+\t\t\tboolean parentMinimized = parent != null && ((Shell)parent).window.isMiniaturized();", "+\t\t\tif (!parentMinimized) {", "+\t\t\t\tif (key) {", "+\t\t\t\t\tmakeKeyAndOrderFront ();", "+\t\t\t\t} else {", "+\t\t\t\t\twindow.orderFront (null);", "+\t\t\t\t}", "-\t\twindow.orderOut (null);", "+\t\tif ((style & (SWT.SHEET)) != 0) {", "+\t\t\tNSApplication application = NSApplication.sharedApplication();", "+\t\t\tapplication.endSheet(window, 0);", "+\t\t} else {", "+\t\t\twindow.orderOut (null);", "+\t\t}"]}], "num": 55231}
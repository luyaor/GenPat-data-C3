{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3dde75c4ffc46a0bc2843b86dafe3570", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4a72f17becfcd8c81a5a374e5ef1437", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet352.java", "commitBeforeChange": "dcc0e2e76a96518f2bd60f127e49f8a4bd5ba452", "commitAfterChange": "64349bf9cd19222d7f7bef44cb4d0e244ca7ed8f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 1, "signatureBeforeChange": "  \tpublic static void main(String [] args)", "signatureAfterChange": " \t \tpublic static void main (String [] args)", "diff": ["-", "-\tpublic static void main(String [] args) {", "-\t\tDisplay display = new Display();", "-\t\tShell shell = new Shell(display);", "-\t\twhile (!shell.isDisposed()) {", "-\t\t\tif (!display.readAndDispatch()) display.sleep();", "-\t\tdisplay.dispose();", "+\t", "+\tpublic static void main (String [] args) {", "+\t\tfinal Display display = new Display ();", "+\t\tfinal Shell shell = new Shell (display);", "+\t\tshell.setLayout(new FillLayout(SWT.HORIZONTAL));", "+\t\tshell.setText (\"Touch demonstration\");", "+\t\t", "+\t\tTouchListener tl = new TouchListener() {", "+\t\t\tpublic void touch(TouchEvent e) {", "+\t\t\t\t", "+\t\t\t\tTouch touches[] = e.touches;", "+", "+\t\t\t\tfor (int i = 0; i < touches.length; i++) {", "+\t\t\t\t\tTouch currTouch = touches[i];", "+", "+\t\t\t\t\tif ((currTouch.state & (SWT.TOUCHSTATE_UP)) != 0) {", "+\t\t\t\t\t\ttouchLocations.remove(currTouch.id);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tCircleInfo info = touchLocations.get(currTouch.id);", "+\t\t\t\t\t\tPoint newPoint = Display.getCurrent().map(null, (Control)e.widget, new Point((int)currTouch.x, (int)currTouch.y));", "+", "+\t\t\t\t\t\tif (info == null) {", "+\t\t\t\t\t\t\tinfo = new CircleInfo(newPoint, display.getSystemColor((colorIndex + 2) % PAINTABLE_COLORS));", "+\t\t\t\t\t\t\tcolorIndex++;", "+\t\t\t\t\t\t}", "+", "+\t\t\t\t\t\tinfo.center = newPoint;", "+\t\t\t\t\t\ttouchLocations.put(currTouch.id, info);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+", "+\t\t\t\tControl c = (Control)e.widget;", "+\t\t\t\tc.redraw();", "+\t\t\t}", "+", "+\t\t};", "+", "+\t\tPaintListener pl = new PaintListener() {", "+\t\t\tpublic void paintControl(PaintEvent e) {", "+\t\t\t\tIterator<Map.Entry<Long, CircleInfo>> iter = touchLocations.entrySet().iterator();", "+\t\t\t\twhile (iter.hasNext()) {", "+\t\t\t\t\tCircleInfo ci = iter.next().getValue();", "+\t\t\t\t\te.gc.setBackground(ci.color);", "+\t\t\t\t\te.gc.fillOval(ci.center.x - CIRCLE_RADIUS, ci.center.y - CIRCLE_RADIUS, CIRCLE_RADIUS * 2, CIRCLE_RADIUS * 2);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t};", "+\t\t", "+\t\tCanvas c = new Canvas(shell, SWT.NONE);", "+\t\tc.setTouchEventsEnabled(true);", "+\t\tc.setSize(800, 800);", "+\t\tc.addTouchListener(tl);", "+\t\tc.addPaintListener(pl);", "+", "+\t\tshell.setSize (800, 800);", "+\t\tshell.open ();", "+\t\twhile (!shell.isDisposed ()) {", "+\t\t\tif (!display.readAndDispatch ()) display.sleep ();", "+\t\t}", "+\t\tdisplay.dispose ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50da20013f8a1ce2c913fe617583090c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/controlexample/Tab.java", "commitBeforeChange": "399156490d22f3d1f71663eed297e579ef25b0fc", "commitAfterChange": "a1f55a007486ea929f61bc360225ffb5df8913db", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 38, "signatureBeforeChange": " \tvoid createListenerSelectionDialog ()", "signatureAfterChange": " \tvoid createListenerSelectionDialog ()", "diff": ["-\t\tdata.verticalSpan = 2;", "+\t\tdata.verticalSpan = 3;", "-\t\tfor (int i = 0; i < EVENT_NAMES.length; i++) {", "+\t\tfor (int i = 0; i < EVENT_INFO.length; i++) {", "-\t\t\titem.setText ((String)EVENT_NAMES[i][0]);", "+\t\t\titem.setText (EVENT_INFO[i].name);", "-\t\t\titem.setChecked (eventsFilter[EVENT_NAMES.length + i]);", "+\t\t\titem.setChecked (eventsFilter[EVENT_INFO.length + i]);", "-\t\t\t\tfor (int i = 0; i < EVENT_NAMES.length; i++) {", "+\t\t\t\tfor (int i = 0; i < EVENT_INFO.length; i++) {", "-\t\t\t\t\titems[EVENT_NAMES.length + i].setChecked(true);", "+\t\t\t\t\titems[EVENT_INFO.length + i].setChecked(true);", "-\t\tdeselectAll.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_BEGINNING));", "+\t\tdeselectAll.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL));", "-\t\t\t\tfor (int i = 0; i < EVENT_NAMES.length; i++) {", "+\t\t\t\tfor (int i = 0; i < EVENT_INFO.length; i++) {", "-\t\t\t\t\titems[EVENT_NAMES.length + i].setChecked(false);", "+\t\t\t\t\titems[EVENT_INFO.length + i].setChecked(false);", "+\t\tfinal Button editEvent = new Button (dialog, SWT.PUSH);", "+\t\teditEvent.setText (ControlExample.getResourceString (\"Edit_Event\"));", "+\t\teditEvent.setLayoutData(new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_BEGINNING));", "+\t\teditEvent.addSelectionListener (new SelectionAdapter() {", "+\t\t\tpublic void widgetSelected (SelectionEvent e) {", "+\t\t\t\tPoint pt = editEvent.getLocation();", "+\t\t\t\tpt = e.display.map(editEvent, null, pt);", "+\t\t\t\tint index = table.getSelectionIndex();", "+\t\t\t\tif (getExampleWidgets().length > 0 && index != -1) {", "+\t\t\t\t\tcreateEditEventDialog(dialog, pt.x, pt.y, index);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t});", "+\t\teditEvent.setEnabled(false);", "+\t\ttable.addSelectionListener(new SelectionAdapter() {", "+\t\t\tpublic void widgetSelected(SelectionEvent e) {", "+\t\t\t\tint fields = 0;", "+\t\t\t\tint index = table.getSelectionIndex();", "+\t\t\t\tif (index != -1 && index < EVENT_INFO.length) {  // TODO: Allow custom widgets to specify event info", "+\t\t\t\t\tfields = (EVENT_INFO[index].settableFields);", "+\t\t\t\t}", "+\t\t\t\teditEvent.setEnabled(fields != 0);", "+\t\t\t}", "+\t\t\tpublic void widgetDefaultSelected(SelectionEvent e) {", "+\t\t\t\tif (editEvent.getEnabled()) {", "+\t\t\t\t\tPoint pt = editEvent.getLocation();", "+\t\t\t\t\tpt = e.display.map(editEvent, null, pt);", "+\t\t\t\t\tint index = table.getSelectionIndex();", "+\t\t\t\t\tif (getExampleWidgets().length > 0 && index != -1 && index < EVENT_INFO.length) {", "+\t\t\t\t\t\tcreateEditEventDialog(dialog, pt.x, pt.y, index);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t});", "+", "-\t\t\t\tfor (int i = 0; i < EVENT_NAMES.length; i++) {", "+\t\t\t\tfor (int i = 0; i < EVENT_INFO.length; i++) {", "-\t\t\t\t\teventsFilter[EVENT_NAMES.length + i] = items[EVENT_NAMES.length + i].getChecked();", "+\t\t\t\t\teventsFilter[EVENT_INFO.length + i] = items[EVENT_INFO.length + i].getChecked();", "-\t\t * If the preferred size of the dialog is too tall for the screen,", "+\t\t * If the preferred size of the dialog is too tall for the display,", "-\t\tPoint size = dialog.getSize();", "-\t\tRectangle bounds = display.getBounds();", "-\t\tif (size.y > bounds.height) {", "-\t\t\tdialog.setSize(size.x, bounds.height);", "+\t\tRectangle bounds = dialog.getBounds();", "+\t\tRectangle trim = dialog.computeTrim(0, 0, 0, 0);", "+\t\tRectangle clientArea = display.getClientArea();", "+\t\tif (bounds.height > clientArea.height) {", "+\t\t\tdialog.setSize(bounds.width, clientArea.height - trim.height);", "+\t\tdialog.setLocation(bounds.x, 0);"]}], "num": 56246}
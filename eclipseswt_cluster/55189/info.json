{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "818b4c0e53d73466c783c35a6a405558", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be99398e257cee05dc85c4fb4151d214", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/cocoa/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "4edc576de20a88abac088ae701d29ce3e54ede4f", "commitAfterChange": "c2ec875b36ecf39df432358c14d183b7d7f45fe0", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 9, "signatureBeforeChange": " int handleCallback(int selector, int arg0, int arg1, int arg2, int arg3)", "signatureAfterChange": "  static int browserProc(int id, int sel, int arg0, int arg1, int arg2, int arg3, int arg4)", "diff": ["+", "+static int browserProc(int id, int sel, int arg0, int arg1, int arg2, int arg3, int arg4) {", "+\tint jniRef = OS.objc_msgSend(id, OS.sel_tag);", "+\tif (jniRef == 0 || jniRef == -1) return 0;", "+\tSafari widget = (Safari)OS.JNIGetObject(jniRef);", "+\tif (widget == null) return 0;", "+\tif (sel == OS.sel_webView_1resource_1willSendRequest_1redirectResponse_1fromDataSource_1) {", "+\t\treturn widget.webView_resource_willSendRequest_redirectResponse_fromDataSource(arg0, arg1, arg2, arg3, arg4);", "+\t} else if (sel == OS.sel_webView_1decidePolicyForMIMEType_1request_1frame_1decisionListener_1) {", "+\t\twidget.webView_decidePolicyForMIMEType_request_frame_decisionListener(arg0, arg1, arg2, arg3, arg4);", "+\t} else if (sel == OS.sel_webView_1decidePolicyForNavigationAction_1request_1frame_1decisionListener_1) {", "+\t\twidget.webView_decidePolicyForNavigationAction_request_frame_decisionListener(arg0, arg1, arg2, arg3, arg4);", "+\t} else if (sel == OS.sel_webView_1decidePolicyForNewWindowAction_1request_1newFrameName_1decisionListener_1) {", "+\t\twidget.webView_decidePolicyForNewWindowAction_request_newFrameName_decisionListener(arg0, arg1, arg2, arg3, arg4);", "+\t}", "+\treturn 0;", "-/* Here we dispatch all WebView upcalls. */", "-int handleCallback(int selector, int arg0, int arg1, int arg2, int arg3) {", "-\tint ret = 0;", "-\t// for meaning of selector see WebKitDelegate methods in webkit.c", "-\tswitch (selector) {", "-\t\tcase 1: didFailProvisionalLoadWithError(arg0, arg1); break;", "-\t\tcase 2: didFinishLoadForFrame(arg0); break;", "-\t\tcase 3: didReceiveTitle(arg0, arg1); break;", "-\t\tcase 4: didStartProvisionalLoadForFrame(arg0); break;", "-\t\tcase 5: didFinishLoadingFromDataSource(arg0, arg1); break;", "-\t\tcase 6: didFailLoadingWithError(arg0, arg1, arg2); break;", "-\t\tcase 7: ret = identifierForInitialRequest(arg0, arg1); break;", "-\t\tcase 8: ret = willSendRequest(arg0, arg1, arg2, arg3); break;", "-\t\tcase 9: handleNotification(arg0); break;", "-\t\tcase 10: didCommitLoadForFrame(arg0); break;", "-\t\tcase 11: ret = createWebViewWithRequest(arg0); break;", "-\t\tcase 12: webViewShow(arg0); break;", "-\t\tcase 13: setFrame(arg0); break;", "-\t\tcase 14: webViewClose(); break;", "-\t\tcase 15: ret = contextMenuItemsForElement(arg0, arg1); break;", "-\t\tcase 16: setStatusBarVisible(arg0); break;", "-\t\tcase 17: setResizable(arg0); break;", "-\t\tcase 18: setToolbarsVisible(arg0); break;", "-\t\tcase 19: decidePolicyForMIMEType(arg0, arg1, arg2, arg3); break;", "-\t\tcase 20: decidePolicyForNavigationAction(arg0, arg1, arg2, arg3); break;", "-\t\tcase 21: decidePolicyForNewWindowAction(arg0, arg1, arg2, arg3); break;", "-\t\tcase 22: unableToImplementPolicyWithError(arg0, arg1); break;", "-\t\tcase 23: setStatusText(arg0); break;", "-\t\tcase 24: webViewFocus(); break;", "-\t\tcase 25: webViewUnfocus(); break;", "-\t\tcase 26: runJavaScriptAlertPanelWithMessage(arg0); break;", "-\t\tcase 27: ret = runJavaScriptConfirmPanelWithMessage(arg0); break;", "-\t\tcase 28: runOpenPanelForFileButtonWithResultListener(arg0); break;", "-\t\tcase 29: decideDestinationWithSuggestedFilename(arg0, arg1); break;", "-\t\tcase 30: mouseDidMoveOverElement(arg0, arg1); break;", "-\t}", "-\treturn ret;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fbb279c54a16004fafc9fe35c62d97d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "0d3ab0dd68f06eed1e33d0df1b8088d830dafa7e", "commitAfterChange": "e51fde288f9c9af4081edb19e92c78e75b16a23c", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": " public boolean post(Event event)", "signatureAfterChange": " public boolean post(Event event)", "diff": ["-", "-\t\t// TODO: Not sure if these calls have any effect on event posting.", "-\t\tif (!eventSourceDelaySet) {", "-\t\t\tOS.CGSetLocalEventsSuppressionInterval(0.0);", "-\t        OS.CGEnableEventStateCombining(1);", "-\t        OS.CGSetLocalEventsFilterDuringSuppressionState(OS.kCGEventFilterMaskPermitLocalKeyboardEvents | OS.kCGEventFilterMaskPermitLocalMouseEvents | OS.kCGEventFilterMaskPermitSystemDefinedEvents, OS.kCGEventSuppressionStateSuppressionInterval);", "-\t        OS.CGSetLocalEventsFilterDuringSuppressionState(OS.kCGEventFilterMaskPermitLocalKeyboardEvents | OS.kCGEventFilterMaskPermitLocalMouseEvents | OS.kCGEventFilterMaskPermitSystemDefinedEvents, OS.kCGEventSuppressionStateRemoteMouseDrag);", "-\t\t\teventSourceDelaySet = true;", "-\t\t}", "+\t\tint /*long*/ eventRef = 0;", "+\t\tint /*long*/ eventSource = OS.CGEventSourceCreate(OS.kCGEventSourceStateHIDSystemState);", "+\t\tif (eventSource == 0) return false;", "-\t\t\t\tif (vKey == -1) return false;", "-\t\t\t\tint /*long*/ eventRef = OS.CGEventCreateKeyboardEvent(0, vKey, type == SWT.KeyDown);", "-\t\t\t\tOS.CGEventPost(0, eventRef);", "-\t\t\t\treturn true;", "+\t\t\t\tif (vKey != -1) {", "+\t\t\t\t\teventRef = OS.CGEventCreateKeyboardEvent(eventSource, vKey, type == SWT.KeyDown);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "-\t\t\t\tint chord = OS.GetCurrentButtonState ();", "-\t\t\t\t\treturn OS.CGPostMouseEvent (mouseCursorPosition, true, 5, (chord & 0x1) != 0, (chord & 0x2) != 0, (chord & 0x4) != 0, (chord & 0x8) != 0, (chord & 0x10) != 0) == 0;", "+\t\t\t\t\teventRef = OS.CGEventCreateMouseEvent(eventSource, OS.kCGEventMouseMoved, mouseCursorPosition, 0);", "-\t\t\t\t\tint button = event.button;", "-\t\t\t\t\tif (button < 1 || button > 5) return false;", "-\t\t\t\t\tboolean button1 = false, button2 = false, button3 = false, button4 = false, button5 = false;", "-\t \t\t\t\tswitch (button) {", "-\t\t\t\t\t\tcase 1: {", "-\t\t\t\t\t\t\tbutton1 = type == SWT.MouseDown;", "-\t\t\t\t\t\t\tbutton2 = (chord & 0x4) != 0;", "-\t\t\t\t\t\t\tbutton3 = (chord & 0x2) != 0;", "-\t\t\t\t\t\t\tbutton4 = (chord & 0x8) != 0;", "-\t\t\t\t\t\t\tbutton5 = (chord & 0x10) != 0;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcase 2: {", "-\t\t\t\t\t\t\tbutton1 = (chord & 0x1) != 0;", "-\t\t\t\t\t\t\tbutton2 = type == SWT.MouseDown;", "-\t\t\t\t\t\t\tbutton3 = (chord & 0x2) != 0;", "-\t\t\t\t\t\t\tbutton4 = (chord & 0x8) != 0;", "-\t\t\t\t\t\t\tbutton5 = (chord & 0x10) != 0;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcase 3: {", "-\t\t\t\t\t\t\tbutton1 = (chord & 0x1) != 0;", "-\t\t\t\t\t\t\tbutton2 = (chord & 0x4) != 0;", "-\t\t\t\t\t\t\tbutton3 = type == SWT.MouseDown;", "-\t\t\t\t\t\t\tbutton4 = (chord & 0x8) != 0;", "-\t\t\t\t\t\t\tbutton5 = (chord & 0x10) != 0;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcase 4: {", "-\t\t\t\t\t\t\tbutton1 = (chord & 0x1) != 0;", "-\t\t\t\t\t\t\tbutton2 = (chord & 0x4) != 0;", "-\t\t\t\t\t\t\tbutton3 = (chord & 0x2) != 0;", "-\t\t\t\t\t\t\tbutton4 = type == SWT.MouseDown;", "-\t\t\t\t\t\t\tbutton5 = (chord & 0x10) != 0;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcase 5: {", "-\t\t\t\t\t\t\tbutton1 = (chord & 0x1) != 0;", "-\t\t\t\t\t\t\tbutton2 = (chord & 0x4) != 0;", "-\t\t\t\t\t\t\tbutton3 = (chord & 0x2) != 0;", "-\t\t\t\t\t\t\tbutton4 = (chord & 0x8) != 0;", "-\t\t\t\t\t\t\tbutton5 = type == SWT.MouseDown;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t \t\t\t\t", "-\t\t\t\t\treturn OS.CGPostMouseEvent (mouseCursorPosition, true, 5, button1, button3, button2, button4, button5) == 0;", "+\t \t\t\t\tint eventType = 0;", "+\t \t\t\t\tint button = event.button;", "+\t \t\t\t\tswitch (button) {", "+\t \t\t\t\tcase 1:", "+\t \t\t\t\t\teventType = (event.type == SWT.MouseDown ? OS.kCGEventLeftMouseDown : OS.kCGEventLeftMouseUp);", "+\t \t\t\t\t\tbreak;", "+\t \t\t\t\tcase 2:", "+\t \t\t\t\t\teventType = (event.type == SWT.MouseDown ? OS.kCGEventRightMouseDown : OS.kCGEventRightMouseUp);", "+\t \t\t\t\t\tbreak;", "+\t \t\t\t\tdefault:", "+\t \t\t\t\t\teventType = (event.type == SWT.MouseDown ? OS.kCGEventOtherMouseDown : OS.kCGEventOtherMouseUp);", "+\t \t\t\t\t\tbreak;", "+\t \t\t\t\t}", "+", "+\t \t\t\t\t// SWT buttons are 1-based; CG buttons are 0 based.", "+\t \t\t\t\tbutton -= 1;", "+\t\t\t\t\teventRef = OS.CGEventCreateMouseEvent(eventSource, eventType, mouseCursorPosition, button);", "+\t\t\t\tbreak;", "-\t\t\t\treturn OS.CGPostScrollWheelEvent(1, event.count) == 0;", "+\t\t\t\t// CG does not support scrolling a page at a time. Technically that is a page up/down, but not a scroll-wheel event. ", "+\t\t\t\teventRef = OS.CGEventCreateScrollWheelEvent(eventSource, OS.kCGScrollEventUnitLine, 1, event.count);", "+\t\t\t\tbreak;", "-\t\treturn false;", "+\t\t", "+\t\tboolean returnValue = false;", "+\t\t", "+\t\tif (eventRef != 0) {", "+\t\t\tOS.CGEventPost(0, eventRef);", "+\t\t\tOS.CFRelease(eventRef);", "+\t\t\treturnValue = true;", "+\t\t}", "+\t\t", "+\t\tif (eventSource != 0) OS.CFRelease(eventSource);\t\t", "+\t\treturn returnValue;"]}], "num": 55189}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2c8a92215f7e78dedafc30a3ebffa0f", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5073e2f3beca0986aa211f1384d10612", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "22ebc0bfda7d51c576a69d9ad65b1367c74fe002", "commitAfterChange": "b024555b7be59ed9c69f2568310cc99cd0b6720a", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 90, "signatureBeforeChange": "  LRESULT WM_KEYDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_KEYDOWN (int wParam, int lParam)", "diff": ["-\tif ((style & SWT.CHECK) != 0 && wParam == OS.VK_SPACE) {", "-\t\tint index = OS.SendMessage (handle, OS.LVM_GETNEXTITEM, -1, OS.LVNI_FOCUSED);", "-\t\tif (index != -1) {", "-\t\t\tTableItem item = _getItem (index);", "-\t\t\titem.setChecked (!item.getChecked (), true);", "-\t\t\tif (!OS.IsWinCE) {", "-\t\t\t\tOS.NotifyWinEvent (OS.EVENT_OBJECT_FOCUS, handle, OS.OBJID_CLIENT, index + 1);", "-\t\t\t}", "-\t\t}", "+\tswitch (wParam) {", "+\t\tcase OS.VK_SPACE:", "+\t\t\t/*", "+\t\t\t* Ensure that the window proc does not process VK_SPACE", "+\t\t\t* so that it can be handled in WM_CHAR.  This allows the", "+\t\t\t* application to cancel an operation that is normally", "+\t\t\t* performed in WM_KEYDOWN from WM_CHAR.", "+\t\t\t*/", "+\t\t\treturn LRESULT.ZERO;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d9f2c83d95cfde01a7248552fd95bc4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "22ebc0bfda7d51c576a69d9ad65b1367c74fe002", "commitAfterChange": "b024555b7be59ed9c69f2568310cc99cd0b6720a", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": "  LRESULT WM_CHAR (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_CHAR (int wParam, int lParam)", "diff": ["+\t\tcase ' ':", "+\t\t\tif ((style & SWT.CHECK) != 0) {", "+\t\t\t\tint index = OS.SendMessage (handle, OS.LVM_GETNEXTITEM, -1, OS.LVNI_FOCUSED);", "+\t\t\t\tif (index != -1) {", "+\t\t\t\t\tTableItem item = _getItem (index);", "+\t\t\t\t\titem.setChecked (!item.getChecked (), true);", "+\t\t\t\t\tif (!OS.IsWinCE) {", "+\t\t\t\t\t\tOS.NotifyWinEvent (OS.EVENT_OBJECT_FOCUS, handle, OS.OBJID_CLIENT, index + 1);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t/*", "+\t\t\t* NOTE: Call the window proc with WM_KEYDOWN rather than WM_CHAR", "+\t\t\t* so that the key that was ignored during WM_KEYDOWN is processed.", "+\t\t\t* This allows the application to cancel an operation that is normally", "+\t\t\t* performed in WM_KEYDOWN from WM_CHAR.", "+\t\t\t*/", "+\t\t\tint code = callWindowProc (handle, OS.WM_KEYDOWN, wParam, lParam);", "+\t\t\treturn new LRESULT (code);"]}], "num": 11339}
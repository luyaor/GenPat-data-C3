{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b75fb671440a1c8f6b10c0bf41fd57e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8722db46dc8e93cb320c191d5dfbf6b2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "9deefd18be8de01a672cfca15620a560b1ae5f22", "commitAfterChange": "d67b8caceb3f10df6a8e238427498db262144133", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["+ */", "+public ImageData getImageData() {", "+\tif (isDisposed()) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);", "+", "+\tint[] w = new int[1], h = new int[1];", "+ \tOS.gdk_drawable_get_size(pixmap, w, h);", "+ \tint width = w[0], height = h[0]; \t", "+\tint pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB(), false, 8, width, height);", "+\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint colormap = OS.gdk_colormap_get_system();", "+\tOS.gdk_pixbuf_get_from_drawable(pixbuf, pixmap, colormap, 0, 0, 0, 0, width, height);", "+\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "+\tint pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "+\tbyte[] srcData = new byte[stride * height];", "+\tOS.memmove(srcData, pixels, srcData.length);", "+\tOS.g_object_unref(pixbuf);", "+", "+\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "+\tImageData data = new ImageData(width, height, 24, palette);", "+\tdata.data = srcData;", "+\tdata.bytesPerLine = stride;", "+", "+\tif (transparentPixel == -1 && type == SWT.ICON && mask != 0) {", "+\t\t/* Get the icon mask data */", "+\t\tint gdkImagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);", "+\t\tif (gdkImagePtr == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tGdkImage gdkImage = new GdkImage(gdkImagePtr);", "+\t\tbyte[] maskData = new byte[gdkImage.bpl * height];", "+\t\tOS.memmove(maskData, gdkImage.mem, maskData.length);", "+\t\tOS.g_object_unref(gdkImagePtr);", "+", "+\t\tdata.maskPad = 4;", "+\t\tdata.maskData = maskData;", "+\t\t/* Bit swap the mask data if necessary */", "+\t\tif (gdkImage.byte_order == OS.GDK_LSB_FIRST) {", "+\t\t\tfor (int i = 0; i < maskData.length; i++) {", "+\t\t\t\tbyte b = maskData[i];", "+\t\t\t\tmaskData[i] = (byte)(((b & 0x01) << 7) | ((b & 0x02) << 5) | ", "+\t\t\t\t\t((b & 0x04) << 3) |\t((b & 0x08) << 1) | ((b & 0x10) >> 1) | ", "+\t\t\t\t\t((b & 0x20) >> 3) |\t((b & 0x40) >> 5) | ((b & 0x80) >> 7));", "+\t\t\t}", "+\t\t}", "+\t}", "+\tdata.transparentPixel = transparentPixel;", "+\tdata.alpha = alpha;", "+\tif (alpha == -1 && alphaData != null) {", "+\t\tdata.alphaData = new byte[alphaData.length];", "+\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);", "+\t}", "+\treturn data;", "+}", "- */", "-public ImageData getImageData() {", "-\treturn new Pixbuffer(this).getImageData();", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a07fd4a2c99bb48b1734f22f053edb92", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "e976aba9ba2e21fa3483cd6339f93ee2113c9043", "commitAfterChange": "f2fe2b40efad97e775adadc99e7322e56dac4334", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void _setImages (Image [] images)", "signatureAfterChange": "  void _setImages (Image [] images)", "diff": ["+\t\tint /*long*/ colormap = OS.gdk_colormap_get_system ();", "-\t\t\tImage icon = images [i];", "+\t\t\tImage image = images [i];", "-\t\t\tOS.gdk_drawable_get_size (icon.pixmap, w, h);", "-\t\t\tint width = w [0], height = h [0]; \t", "-\t\t\tboolean hasMask = icon.mask != 0;", "-\t\t\tint /*long*/ pixbuf = OS.gdk_pixbuf_new (OS.GDK_COLORSPACE_RGB, hasMask, 8, width, height);", "-\t\t\tif (pixbuf == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "-\t\t\tint /*long*/ colormap = OS.gdk_colormap_get_system ();", "-\t\t\tOS.gdk_pixbuf_get_from_drawable (pixbuf, icon.pixmap, colormap, 0, 0, 0, 0, width, height);", "+\t\t\tOS.gdk_drawable_get_size (image.pixmap, w, h);", "+\t\t\tint /*long*/ pixbuf;", "+\t\t\tboolean hasMask = image.mask != 0;", "-\t\t\t\tint /*long*/ gdkMaskImagePtr = OS.gdk_drawable_get_image (icon.mask, 0, 0, width, height);", "+\t\t\t\tpixbuf = OS.gdk_pixbuf_new (OS.GDK_COLORSPACE_RGB, true, 8, w [0], h [0]);", "+\t\t\t\tif (pixbuf == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tOS.gdk_pixbuf_get_from_drawable (pixbuf, image.pixmap, colormap, 0, 0, 0, 0, w [0], h [0]);\t\t\t\t", "+\t\t\t\tint /*long*/ gdkMaskImagePtr = OS.gdk_drawable_get_image (image.mask, 0, 0, w [0], h [0]);", "-\t\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\t\tfor (int y = 0; y < h [0]; y++) {", "-\t\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\t\tfor (int x = 0; x < w [0]; x++) {", "+\t\t\t} else {", "+\t\t\t\tImageData data = image.getImageData ();", "+\t\t\t\tboolean hasAlpha = data.getTransparencyType () == SWT.TRANSPARENCY_ALPHA;", "+\t\t\t\tpixbuf = OS.gdk_pixbuf_new (OS.GDK_COLORSPACE_RGB, hasAlpha, 8, w [0], h [0]);", "+\t\t\t\tif (pixbuf == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tOS.gdk_pixbuf_get_from_drawable (pixbuf, image.pixmap, colormap, 0, 0, 0, 0, w [0], h [0]);", "+\t\t\t\tif (hasAlpha) {", "+\t\t\t\t\tbyte [] alpha = data.alphaData;", "+\t\t\t\t\tint stride = OS.gdk_pixbuf_get_rowstride (pixbuf);", "+\t\t\t\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);", "+\t\t\t\t\tbyte [] line = new byte [stride];", "+\t\t\t\t\tfor (int y = 0; y < h [0]; y++) {", "+\t\t\t\t\t\tint /*long*/ offset = pixels + (y * stride);", "+\t\t\t\t\t\tOS.memmove (line, offset, stride);", "+\t\t\t\t\t\tfor (int x = 0; x < w [0]; x++) {", "+\t\t\t\t\t\t\tline [x*4+3] = alpha [y*w [0]+x];", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.memmove (offset, line, stride);", "+\t\t\t\t\t}", "+\t\t\t\t}\t\t\t\t"]}], "num": 26625}
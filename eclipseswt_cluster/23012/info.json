{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "129f7045bc4a41a536931830446245cc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "768c40f0420c5f47af8520f4b39be535", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "ac414216d06e13c352ce417d8169a235a33178a0", "commitAfterChange": "3d05d3e9ee0496402e563d4d730019cdd0eede82", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  void drawLines(boolean advance, int graphics, int x, int y, StyleItem run, int color, boolean selection)", "signatureAfterChange": "  void drawLines(boolean advance, int graphics, int x, int y, StyleItem run, int color, boolean selection, RECT clipRect, int alpha)", "diff": ["-void drawLines(boolean advance, int /*long*/ graphics, int x, int y, StyleItem run, int /*long*/ color, boolean selection) {", "-\tif (run.style == null) return;", "-\tif (!run.style.underline && !run.style.strikeout) return;", "+void drawLines(boolean advance, int /*long*/ graphics, int x, int y, StyleItem run, int /*long*/ color, boolean selection, RECT clipRect, int alpha) {", "+\tTextStyle style = run.style;", "+\tif (style == null) return;", "+\tif (!style.underline && !style.strikeout) return;", "-\t\tif (run.style.underline) {", "-\t\t\tif (!selection && run.style.underlineColor != null) {", "-\t\t\t\tint c = run.style.underlineColor.handle;", "-\t\t\t\tint argb = (0xFF << 24) | ((c >> 16) & 0xFF) | (c & 0xFF00) | ((c & 0xFF) << 16);", "+\t\tif (style.underline) {", "+\t\t\tif (!selection && style.underlineColor != null) {", "+\t\t\t\tint fg = style.underlineColor.handle;", "+\t\t\t\tint argb = ((alpha & 0xFF) << 24) | ((fg >> 16) & 0xFF) | (fg & 0xFF00) | ((fg & 0xFF) << 16);", "-\t\t\tGdip.Graphics_FillRectangle(graphics, brush, x, underlineY, run.width, run.underlineThickness);", "+\t\t\tswitch (style.underlineStyle) {", "+\t\t\t\tcase SWT.UNDERLINE_ERROR:", "+\t\t\t\tcase SWT.UNDERLINE_IME_INPUT:", "+\t\t\t\t\tint squigglyThickness = 1;", "+\t\t\t\t\tint squigglyHeight = 2 * squigglyThickness;", "+\t\t\t\t\tint squigglyY = Math.min(underlineY, y + run.ascent + run.descent - squigglyHeight - 1);", "+\t\t\t\t\tint[] points = computePolyline(x, squigglyY, x + run.width, squigglyY + squigglyHeight);", "+\t\t\t\t\tint /*long*/ pen = Gdip.Pen_new(brush, squigglyThickness);", "+\t\t\t\t\tGdip.Graphics_DrawLines(graphics, pen, points, points.length / 2);", "+\t\t\t\t\tGdip.Pen_delete(pen);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase SWT.UNDERLINE_IME_TARGET_CONVERTED:", "+\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, x - run.underlineThickness, underlineY, run.width, run.underlineThickness * 2);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase SWT.UNDERLINE_IME_CONVERTED:", "+\t\t\t\tcase SWT.UNDERLINE_SINGLE:", "+\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, x, underlineY, run.width, run.underlineThickness);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase SWT.UNDERLINE_DOUBLE:", "+\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, x, underlineY, run.width, run.underlineThickness);", "+\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, x, underlineY + run.underlineThickness * 2, run.width, run.underlineThickness);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "-\t\tif (run.style.strikeout) {", "-\t\t\tif (!selection && run.style.strikeoutColor != null) {", "-\t\t\t\tint c = run.style.strikeoutColor.handle;", "-\t\t\t\tint argb = (0xFF << 24) | ((c >> 16) & 0xFF) | (c & 0xFF00) | ((c & 0xFF) << 16);", "+\t\tif (style.strikeout) {", "+\t\t\tif (!selection && style.strikeoutColor != null) {", "+\t\t\t\tint fg = style.strikeoutColor.handle;", "+\t\t\t\tint argb = ((alpha & 0xFF) << 24) | ((fg >> 16) & 0xFF) | (fg & 0xFF00) | ((fg & 0xFF) << 16);", "-\t\tif (run.style.underline) {", "-\t\t\tif (!selection && run.style.underlineColor != null) {", "-\t\t\t\tcolorRefUnderline = run.style.underlineColor.handle;", "+\t\tif (style.underline) {", "+\t\t\tif (!selection && style.underlineColor != null) {", "+\t\t\t\tcolorRefUnderline = style.underlineColor.handle;", "-\t\t\tbrushUnderline = OS.CreateSolidBrush(colorRefUnderline);", "-\t\t\tOS.SetRect(rect, x, underlineY, x + run.width, underlineY + run.underlineThickness);", "-\t\t\tOS.FillRect(graphics, rect, brushUnderline);", "+\t\t\tswitch (style.underlineStyle) {", "+\t\t\t\tcase SWT.UNDERLINE_ERROR:", "+\t\t\t\tcase SWT.UNDERLINE_IME_INPUT:", "+\t\t\t\t\tint squigglyThickness = 1;", "+\t\t\t\t\tint squigglyHeight = 2 * squigglyThickness;", "+\t\t\t\t\tint squigglyY = Math.min(underlineY, y + run.ascent + run.descent - squigglyHeight - 1);", "+\t\t\t\t\tint state = 0;", "+\t\t\t\t\tif (clipRect != null) {", "+\t\t\t\t\t\tstate = OS.SaveDC(graphics);", "+\t\t\t\t\t\tOS.IntersectClipRect(graphics, clipRect.left, clipRect.top, clipRect.right, clipRect.bottom);", "+\t\t\t\t\t}", "+\t\t\t\t\tint[] points = computePolyline(x, squigglyY, x + run.width, squigglyY + squigglyHeight);", "+\t\t\t\t\tint /*long*/ pen = OS.CreatePen(OS.PS_SOLID, squigglyThickness, colorRefUnderline);", "+\t\t\t\t\tint /*long*/ oldPen = OS.SelectObject(graphics, pen);", "+\t\t\t\t\tOS.Polyline(graphics, points, points.length / 2);", "+\t\t\t\t\tint length = points.length;", "+\t\t\t\t\tif (length >= 2 && squigglyThickness <= 1) {", "+\t\t\t\t\t\tOS.SetPixel (graphics, points[length - 2], points[length - 1], colorRefUnderline);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (state != 0) OS.RestoreDC(graphics, state);", "+\t\t\t\t\tOS.SelectObject(graphics, oldPen);", "+\t\t\t\t\tOS.DeleteObject(pen);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase SWT.UNDERLINE_IME_TARGET_CONVERTED:", "+\t\t\t\t\tbrushUnderline = OS.CreateSolidBrush(colorRefUnderline);", "+\t\t\t\t\tOS.SetRect(rect, x, underlineY - run.underlineThickness, x + run.width, underlineY + run.underlineThickness);", "+\t\t\t\t\tif (clipRect != null) {", "+\t\t\t\t\t\trect.left = Math.max(rect.left, clipRect.left);", "+\t\t\t\t\t\trect.right = Math.min(rect.right, clipRect.right);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.FillRect(graphics, rect, brushUnderline);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase SWT.UNDERLINE_IME_CONVERTED:", "+\t\t\t\tcase SWT.UNDERLINE_SINGLE:", "+\t\t\t\t\tbrushUnderline = OS.CreateSolidBrush(colorRefUnderline);", "+\t\t\t\t\tOS.SetRect(rect, x, underlineY, x + run.width, underlineY + run.underlineThickness);", "+\t\t\t\t\tif (clipRect != null) {", "+\t\t\t\t\t\trect.left = Math.max(rect.left, clipRect.left);", "+\t\t\t\t\t\trect.right = Math.min(rect.right, clipRect.right);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.FillRect(graphics, rect, brushUnderline);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase SWT.UNDERLINE_DOUBLE:", "+\t\t\t\t\tbrushUnderline = OS.CreateSolidBrush(colorRefUnderline);", "+\t\t\t\t\tOS.SetRect(rect, x, underlineY, x + run.width, underlineY + run.underlineThickness);", "+\t\t\t\t\tif (clipRect != null) {", "+\t\t\t\t\t\trect.left = Math.max(rect.left, clipRect.left);", "+\t\t\t\t\t\trect.right = Math.min(rect.right, clipRect.right);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.FillRect(graphics, rect, brushUnderline);", "+\t\t\t\t\tOS.SetRect(rect, x, underlineY + run.underlineThickness * 2, x + run.width, underlineY + run.underlineThickness * 3);", "+\t\t\t\t\tif (clipRect != null) {", "+\t\t\t\t\t\trect.left = Math.max(rect.left, clipRect.left);", "+\t\t\t\t\t\trect.right = Math.min(rect.right, clipRect.right);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.FillRect(graphics, rect, brushUnderline);", "+\t\t\t\t\tbreak;", "+\t\t\t}", "-\t\tif (run.style.strikeout) {", "-\t\t\tif (!selection && run.style.strikeoutColor != null) {", "-\t\t\t\tcolorRefStrikeout = run.style.strikeoutColor.handle;", "+\t\tif (style.strikeout) {", "+\t\t\tif (!selection && style.strikeoutColor != null) {", "+\t\t\t\tcolorRefStrikeout = style.strikeoutColor.handle;", "+\t\t\tif (clipRect != null) {", "+\t\t\t\trect.left = Math.max(rect.left, clipRect.left);", "+\t\t\t\trect.right = Math.min(rect.right, clipRect.right);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6fbe91417e5906adfbfc9dd0bfb4950", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "07e2a59a9f95423dd94e93f17c1d85884434abf2", "commitAfterChange": "ca108add451dfd07e852d9d3d51e498bcd07be26", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  void drawLines(boolean advance, int graphics, int linex, int y, StyleItem[] line, int index, int color, RECT clipRect, int alpha)", "signatureAfterChange": "  void drawLines(boolean advance, int graphics, int x, int lineBaseline, int lineUnderlinePos, int lineBottom, StyleItem[] line, int index, int color, RECT clipRect, int alpha)", "diff": ["-void drawLines(boolean advance, int /*long*/ graphics, int linex, int y, StyleItem[] line, int index, int /*long*/ color, RECT clipRect, int alpha) {", "+void drawLines(boolean advance, int /*long*/ graphics, int x, int lineBaseline, int lineUnderlinePos, int lineBottom, StyleItem[] line, int index, int /*long*/ color, RECT clipRect, int alpha) {", "-\tint x = linex + run.x;", "-\tint underlineY = y + run.ascent - run.underlinePos;", "-\tint strikeoutY = y + run.ascent - run.strikeoutPos;", "+\tint runX = x + run.x;", "+\tint underlineY = lineBaseline - lineUnderlinePos;", "+\tint strikeoutY = lineBaseline - run.strikeoutPos;", "-\t\t\t\t\tint squigglyY = Math.min(underlineY, y + run.ascent + run.descent - squigglyHeight - 1);", "-\t\t\t\t\tint squigglyX = x;", "+\t\t\t\t\tint squigglyY = Math.min(underlineY - squigglyHeight / 2, lineBottom - squigglyHeight - 1);", "+\t\t\t\t\tint squigglyX = runX;", "-\t\t\t\t\t\tsquigglyX = linex + line[i - 1].x;", "+\t\t\t\t\t\tsquigglyX = x + line[i - 1].x;", "-\t\t\t\t\t\tgdipRect.X = x;", "-\t\t\t\t\t\tgdipRect.Y = y;", "-\t\t\t\t\t\tgdipRect.Width = run.width;", "-\t\t\t\t\t\tgdipRect.Height = run.ascent + run.descent;", "+\t\t\t\t\t\tgdipRect.X = runX;", "+\t\t\t\t\t\tgdipRect.Y = squigglyY;", "+\t\t\t\t\t\tgdipRect.Width = run.width + 1;", "+\t\t\t\t\t\tgdipRect.Height = squigglyY + squigglyHeight + 1;", "-\t\t\t\t\tint[] points = computePolyline(squigglyX, squigglyY, x + run.width, squigglyY + squigglyHeight);", "+\t\t\t\t\tint[] points = computePolyline(squigglyX, squigglyY, runX + run.width, squigglyY + squigglyHeight);", "-\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, x, underlineY, run.width, run.underlineThickness);", "+\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, runX, underlineY, run.width, run.underlineThickness);", "-\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, x, underlineY, run.width, run.underlineThickness);", "-\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, x, underlineY + run.underlineThickness * 2, run.width, run.underlineThickness);", "+\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, runX, underlineY, run.width, run.underlineThickness);", "+\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, runX, underlineY + run.underlineThickness * 2, run.width, run.underlineThickness);", "-\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, x - run.underlineThickness, underlineY, run.width, run.underlineThickness * 2);", "+\t\t\t\t\tGdip.Graphics_FillRectangle(graphics, brush, runX - run.underlineThickness, underlineY, run.width, run.underlineThickness * 2);", "-\t\t\t\t\tGdip.Graphics_DrawLine(graphics, pen, x, underlineY, x + run.width, underlineY);", "+\t\t\t\t\tGdip.Graphics_DrawLine(graphics, pen, runX, underlineY, runX + run.width, underlineY);", "-\t\t\tGdip.Graphics_FillRectangle(graphics, brush, x, strikeoutY, run.width, run.strikeoutThickness);", "+\t\t\tGdip.Graphics_FillRectangle(graphics, brush, runX, strikeoutY, run.width, run.strikeoutThickness);", "-\t\t\t\t\tint squigglyY = Math.min(underlineY, y + run.ascent + run.descent - squigglyHeight - 1);", "-\t\t\t\t\tint squigglyX = x;", "+\t\t\t\t\tint squigglyY = Math.min(underlineY - squigglyHeight / 2, lineBottom - squigglyHeight - 1);", "+\t\t\t\t\tint squigglyX = runX;", "-\t\t\t\t\t\tsquigglyX = linex + line[i - 1].x;", "+\t\t\t\t\t\tsquigglyX = x + line[i - 1].x;", "-\t\t\t\t\t\tOS.IntersectClipRect(graphics, x, y, x + run.width, y + run.ascent + run.descent);", "+\t\t\t\t\t\tOS.IntersectClipRect(graphics, runX, squigglyY, runX + run.width + 1, squigglyY + squigglyHeight + 1);", "-\t\t\t\t\tint[] points = computePolyline(squigglyX, squigglyY, x + run.width, squigglyY + squigglyHeight);", "+\t\t\t\t\tint[] points = computePolyline(squigglyX, squigglyY, runX + run.width, squigglyY + squigglyHeight);", "-\t\t\t\t\tOS.SetRect(rect, x, underlineY, x + run.width, underlineY + run.underlineThickness);", "+\t\t\t\t\tOS.SetRect(rect, runX, underlineY, runX + run.width, underlineY + run.underlineThickness);", "-\t\t\t\t\tOS.SetRect(rect, x, underlineY, x + run.width, underlineY + run.underlineThickness);", "+\t\t\t\t\tOS.SetRect(rect, runX, underlineY, runX + run.width, underlineY + run.underlineThickness);", "-\t\t\t\t\tOS.SetRect(rect, x, underlineY + run.underlineThickness * 2, x + run.width, underlineY + run.underlineThickness * 3);", "+\t\t\t\t\tOS.SetRect(rect, runX, underlineY + run.underlineThickness * 2, runX + run.width, underlineY + run.underlineThickness * 3);", "-\t\t\t\t\tOS.SetRect(rect, x, underlineY - run.underlineThickness, x + run.width, underlineY + run.underlineThickness);", "+\t\t\t\t\tOS.SetRect(rect, runX, underlineY - run.underlineThickness, runX + run.width, underlineY + run.underlineThickness);", "-\t\t\t\t\tunderlineY = y + run.ascent + run.descent;", "+\t\t\t\t\tunderlineY = lineBaseline + run.descent;", "-\t\t\t\t\tOS.SetRect(rect, x, underlineY, x + run.width, underlineY + run.underlineThickness);", "+\t\t\t\t\tOS.SetRect(rect, runX, underlineY, runX + run.width, underlineY + run.underlineThickness);", "-\t\t\tOS.SetRect(rect, x, strikeoutY, x + run.width, strikeoutY + run.strikeoutThickness);", "+\t\t\tOS.SetRect(rect, runX, strikeoutY, runX + run.width, strikeoutY + run.strikeoutThickness);"]}], "num": 23012}
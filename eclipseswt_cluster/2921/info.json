{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a7f2dbe447750f2d2463e5ed532ee5e", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c1ce6b2310bc51d66cb45097ef999f0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "19051ffe4fd662e4376e9ef3523424e6764f8cc9", "commitAfterChange": "fec0d691465789ed5f8cc6a20256c17056f52d4b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["-\tif (handle == 0) {", "-\t\tint type = OS.GTK_WINDOW_TOPLEVEL;", "-\t\tif ((style & SWT.ON_TOP) != 0) type = OS.GTK_WINDOW_POPUP;", "-\t\tshellHandle = OS.gtk_window_new (type);", "-\t} else {", "-\t\tshellHandle = OS.gtk_plug_new (handle);", "-\t}", "-\tif (shellHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\tif (parent != null) {", "-\t\tOS.gtk_window_set_transient_for (shellHandle, parent.topHandle ());", "-\t\tOS.gtk_window_set_destroy_with_parent (shellHandle, true);", "-\t\tif (!isUndecorated ()) {", "-\t\t\tOS.gtk_window_set_type_hint (shellHandle, OS.GDK_WINDOW_TYPE_HINT_DIALOG);", "+\tif (shellHandle == 0) {", "+\t\tif (handle == 0) {", "+\t\t\tint type = OS.GTK_WINDOW_TOPLEVEL;", "+\t\t\tif ((style & SWT.ON_TOP) != 0) type = OS.GTK_WINDOW_POPUP;", "+\t\t\tshellHandle = OS.gtk_window_new (type);", "+\t\t} else {", "+\t\t\tshellHandle = OS.gtk_plug_new (handle);", "-\t}", "-\t/*", "-\t* Feature in GTK.  The window size must be set when the window", "-\t* is created or it will not be allowed to be resized smaller that the", "-\t* initial size by the user.  The fix is to set the size to zero.", "-\t*/", "-\tif ((style & SWT.RESIZE) != 0) {", "-\t\tOS.gtk_widget_set_size_request (shellHandle, 0, 0);", "-\t\tOS.gtk_window_set_resizable (shellHandle, true);", "+\t\tif (shellHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tif (parent != null) {", "+\t\t\tOS.gtk_window_set_transient_for (shellHandle, parent.topHandle ());", "+\t\t\tOS.gtk_window_set_destroy_with_parent (shellHandle, true);", "+\t\t\tif (!isUndecorated ()) {", "+\t\t\t\tOS.gtk_window_set_type_hint (shellHandle, OS.GDK_WINDOW_TYPE_HINT_DIALOG);", "+\t\t\t}", "+\t\t}", "+\t\t/*", "+\t\t* Feature in GTK.  The window size must be set when the window", "+\t\t* is created or it will not be allowed to be resized smaller that the", "+\t\t* initial size by the user.  The fix is to set the size to zero.", "+\t\t*/", "+\t\tif ((style & SWT.RESIZE) != 0) {", "+\t\t\tOS.gtk_widget_set_size_request (shellHandle, 0, 0);", "+\t\t\tOS.gtk_window_set_resizable (shellHandle, true);", "+\t\t} else {", "+\t\t\tOS.gtk_window_set_resizable (shellHandle, false);", "+\t\t}", "+\t\tvboxHandle = OS.gtk_vbox_new (false, 0);", "+\t\tif (vboxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tcreateHandle (index, false, true);", "+\t\tOS.gtk_container_add (vboxHandle, scrolledHandle);", "+\t\tOS.gtk_box_set_child_packing (vboxHandle, scrolledHandle, true, true, 0, OS.GTK_PACK_END);", "-\t\tOS.gtk_window_set_resizable (shellHandle, false);", "+\t\tvboxHandle = OS.gtk_bin_get_child (shellHandle);", "+\t\tif (vboxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tint children = OS.gtk_container_get_children (vboxHandle);", "+\t\tif (OS.g_list_length (children) > 0) {", "+\t\t\tscrolledHandle = OS.g_list_data (children);", "+\t\t}", "+\t\tOS.g_list_free (children);", "+\t\tif (scrolledHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\thandle = OS.gtk_bin_get_child (scrolledHandle);", "+\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\tvboxHandle = OS.gtk_vbox_new (false, 0);", "-\tif (vboxHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\tcreateHandle (index, false, true);", "-\tOS.gtk_container_add (vboxHandle, scrolledHandle);", "-\tOS.gtk_box_set_child_packing (vboxHandle, scrolledHandle, true, true, 0, OS.GTK_PACK_END);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f11ec1963d9b5fd021e55d3327ba827", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "551af07bcc7e435cadf577ab2e664cc30e8d96e0", "commitAfterChange": "e12940014f68c1ee82f550394172982af1b858e7", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 35, "signatureBeforeChange": "  void hookEvents()", "signatureAfterChange": "  void hookEvents()", "diff": ["-\t//TODO", "-//\tif (textHandle != 0) {", "-//\t\thandler = OS.gcnew_TextChangedEventHandler (jniRef, \"HandleTextChanged\");", "-//\t\tOS.TextBoxBase_TextChanged (textHandle, handler);", "-//\t\tOS.GCHandle_Free (handler);", "-//\t}", "+\tif (textHandle != 0) {", "+\t\thandler = OS.gcnew_TextCompositionEventHandler (jniRef, \"HandlePreviewTextInput\");", "+\t\tif (handler == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.UIElement_PreviewTextInput (textHandle, handler);", "+\t\tOS.GCHandle_Free (handler);", "+\t\thandler = OS.gcnew_ExecutedRoutedEventHandler (jniRef, \"HandlePreviewExecutedRoutedEvent\");", "+\t\tif (handler == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.CommandManager_AddPreviewExecutedHandler (textHandle, handler);", "+\t\tOS.GCHandle_Free (handler);", "+\t\thandler = OS.gcnew_TextChangedEventHandler (jniRef, \"HandleTextChanged\");", "+\t\tif (handler == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.TextBoxBase_TextChanged (textHandle, handler);", "+\t\tOS.GCHandle_Free (handler);", "+\t}"]}], "num": 2921}
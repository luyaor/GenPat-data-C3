{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0c16f0a08009784d0cf97a167cd9fea7", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d29247e4f4543253988a0da1564527eb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "81769f86af686a9108c70f5eccca90f204a41cef", "commitAfterChange": "2409e4895346facaeea6eeef6414188a3d1e2f65", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["-\tImageData data;", "+", "-\t\tdata = new ImageData(width, height, 32, palette, 4, srcData);", "+\t\tImageData data = new ImageData(width, height, 32, palette, 4, srcData);", "-\t} else {", "-\t\tint[] w = new int[1], h = new int[1];", "-\t \tOS.gdk_drawable_get_size(pixmap, w, h);", "-\t \tint width = w[0], height = h[0]; \t", "-\t \tint /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);", "-\t\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tint /*long*/ colormap = OS.gdk_colormap_get_system();", "-\t\tOS.gdk_pixbuf_get_from_drawable(pixbuf, pixmap, colormap, 0, 0, 0, 0, width, height);", "-\t\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "-\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "-\t\tbyte[] srcData = new byte[stride * height];", "-\t\tOS.memmove(srcData, pixels, srcData.length);", "-\t\tOS.g_object_unref(pixbuf);", "-\t", "-\t\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "-\t\tdata = new ImageData(width, height, 24, palette, 4, srcData);", "-\t\tdata.bytesPerLine = stride;", "-\t", "-\t\tif (transparentPixel == -1 && type == SWT.ICON && mask != 0) {", "-\t\t\t/* Get the icon mask data */", "-\t\t\tint /*long*/ gdkImagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);", "-\t\t\tif (gdkImagePtr == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\t\tGdkImage gdkImage = new GdkImage();", "-\t\t\tOS.memmove(gdkImage, gdkImagePtr);", "-\t\t\tbyte[] maskData = new byte[gdkImage.bpl * gdkImage.height];", "-\t\t\tOS.memmove(maskData, gdkImage.mem, maskData.length);", "-\t\t\tOS.g_object_unref(gdkImagePtr);", "-\t\t\tint maskPad;", "-\t\t\tfor (maskPad = 1; maskPad < 128; maskPad++) {", "-\t\t\t\tint bpl = (((width + 7) / 8) + (maskPad - 1)) / maskPad * maskPad;", "-\t\t\t\tif (gdkImage.bpl == bpl) break;", "-\t\t\t}", "-\t\t\t/* Make mask scanline pad equals to 2 */", "-\t\t\tdata.maskPad = 2;", "-\t\t\tmaskData = ImageData.convertPad(maskData, width, height, 1, maskPad, data.maskPad);", "-\t\t\t/* Bit swap the mask data if necessary */", "-\t\t\tif (gdkImage.byte_order == OS.GDK_LSB_FIRST) {", "-\t\t\t\tfor (int i = 0; i < maskData.length; i++) {", "-\t\t\t\t\tbyte b = maskData[i];", "-\t\t\t\t\tmaskData[i] = (byte)(((b & 0x01) << 7) | ((b & 0x02) << 5) | ", "-\t\t\t\t\t\t((b & 0x04) << 3) |\t((b & 0x08) << 1) | ((b & 0x10) >> 1) | ", "-\t\t\t\t\t\t((b & 0x20) >> 3) |\t((b & 0x40) >> 5) | ((b & 0x80) >> 7));", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tdata.maskData = maskData;", "+\t\treturn data;", "+\t}", "+\tint[] w = new int[1], h = new int[1];", "+ \tOS.gdk_drawable_get_size(pixmap, w, h);", "+ \tint width = w[0], height = h[0]; \t", "+ \tint /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);", "+\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint /*long*/ colormap = OS.gdk_colormap_get_system();", "+\tOS.gdk_pixbuf_get_from_drawable(pixbuf, pixmap, colormap, 0, 0, 0, 0, width, height);", "+\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "+\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "+\tbyte[] srcData = new byte[stride * height];", "+\tOS.memmove(srcData, pixels, srcData.length);", "+\tOS.g_object_unref(pixbuf);", "+", "+\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "+\tImageData data = new ImageData(width, height, 24, palette, 4, srcData);", "+\tdata.bytesPerLine = stride;", "+", "+\tif (transparentPixel == -1 && type == SWT.ICON && mask != 0) {", "+\t\t/* Get the icon mask data */", "+\t\tint /*long*/ gdkImagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);", "+\t\tif (gdkImagePtr == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tGdkImage gdkImage = new GdkImage();", "+\t\tOS.memmove(gdkImage, gdkImagePtr);", "+\t\tbyte[] maskData = new byte[gdkImage.bpl * gdkImage.height];", "+\t\tOS.memmove(maskData, gdkImage.mem, maskData.length);", "+\t\tOS.g_object_unref(gdkImagePtr);", "+\t\tint maskPad;", "+\t\tfor (maskPad = 1; maskPad < 128; maskPad++) {", "+\t\t\tint bpl = (((width + 7) / 8) + (maskPad - 1)) / maskPad * maskPad;", "+\t\t\tif (gdkImage.bpl == bpl) break;", "-\t\tdata.transparentPixel = transparentPixel;", "-\t\tdata.alpha = alpha;", "-\t\tif (alpha == -1 && alphaData != null) {", "-\t\t\tdata.alphaData = new byte[alphaData.length];", "-\t\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);", "+\t\t/* Make mask scanline pad equals to 2 */", "+\t\tdata.maskPad = 2;", "+\t\tmaskData = ImageData.convertPad(maskData, width, height, 1, maskPad, data.maskPad);", "+\t\t/* Bit swap the mask data if necessary */", "+\t\tif (gdkImage.byte_order == OS.GDK_LSB_FIRST) {", "+\t\t\tfor (int i = 0; i < maskData.length; i++) {", "+\t\t\t\tbyte b = maskData[i];", "+\t\t\t\tmaskData[i] = (byte)(((b & 0x01) << 7) | ((b & 0x02) << 5) | ", "+\t\t\t\t\t((b & 0x04) << 3) |\t((b & 0x08) << 1) | ((b & 0x10) >> 1) | ", "+\t\t\t\t\t((b & 0x20) >> 3) |\t((b & 0x40) >> 5) | ((b & 0x80) >> 7));", "+\t\t\t}", "+\t\tdata.maskData = maskData;", "+\t}", "+\tdata.transparentPixel = transparentPixel;", "+\tdata.alpha = alpha;", "+\tif (alpha == -1 && alphaData != null) {", "+\t\tdata.alphaData = new byte[alphaData.length];", "+\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34984e323b9f4fbca2a94f97f66d792d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "d089b2cf79ce87d2a82f677ea1a4ce5a5ba9d4a4", "commitAfterChange": "78b034106c080360cc188a981bb53f8356762fbe", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["-", "-\tint[] w = new int[1], h = new int[1];", "- \tOS.gdk_drawable_get_size(pixmap, w, h);", "- \tint width = w[0], height = h[0]; \t", "- \tint /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);", "-\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tint /*long*/ colormap = OS.gdk_colormap_get_system();", "-\tOS.gdk_pixbuf_get_from_drawable(pixbuf, pixmap, colormap, 0, 0, 0, 0, width, height);", "-\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "-\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "-\tbyte[] srcData = new byte[stride * height];", "-\tOS.memmove(srcData, pixels, srcData.length);", "-\tOS.g_object_unref(pixbuf);", "-", "-\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "-\tImageData data = new ImageData(width, height, 24, palette, 4, srcData);", "-\tdata.bytesPerLine = stride;", "-", "-\tif (transparentPixel == -1 && type == SWT.ICON && mask != 0) {", "-\t\t/* Get the icon mask data */", "-\t\tint /*long*/ gdkImagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);", "-\t\tif (gdkImagePtr == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tGdkImage gdkImage = new GdkImage();", "-\t\tOS.memmove(gdkImage, gdkImagePtr);", "-\t\tbyte[] maskData = new byte[gdkImage.bpl * gdkImage.height];", "-\t\tOS.memmove(maskData, gdkImage.mem, maskData.length);", "-\t\tOS.g_object_unref(gdkImagePtr);", "-\t\tint maskPad;", "-\t\tfor (maskPad = 1; maskPad < 128; maskPad++) {", "-\t\t\tint bpl = (((width + 7) / 8) + (maskPad - 1)) / maskPad * maskPad;", "-\t\t\tif (gdkImage.bpl == bpl) break;", "+\tImageData data;", "+\tif (OS.USE_CAIRO_SURFACE) {", "+\t\tint width = this.width;", "+\t\tint height = this.height;", "+\t\tint stride = Cairo.cairo_format_stride_for_width(Cairo.CAIRO_FORMAT_ARGB32, width);", "+\t\tbyte[] srcData = new byte[stride * height];", "+\t\tint /*long*/ ptr = OS.malloc(4);", "+\t\tOS.memmove(ptr, new int[]{1}, 4);", "+\t\tOS.memmove(srcData, ptr, 1);", "+\t\tOS.free(ptr);", "+\t\tint oa, or, og, ob;", "+\t\tboolean bigendian = srcData[0] == 0;", "+\t\tif (bigendian) {", "+\t\t\toa = 0; or = 1; og = 2; ob = 3;", "+\t\t} else {", "+\t\t\toa = 3; or = 2; og = 1; ob = 0;", "-\t\t/* Make mask scanline pad equals to 2 */", "-\t\tdata.maskPad = 2;", "-\t\tmaskData = ImageData.convertPad(maskData, width, height, 1, maskPad, data.maskPad);", "-\t\t/* Bit swap the mask data if necessary */", "-\t\tif (gdkImage.byte_order == OS.GDK_LSB_FIRST) {", "-\t\t\tfor (int i = 0; i < maskData.length; i++) {", "-\t\t\t\tbyte b = maskData[i];", "-\t\t\t\tmaskData[i] = (byte)(((b & 0x01) << 7) | ((b & 0x02) << 5) | ", "-\t\t\t\t\t((b & 0x04) << 3) |\t((b & 0x08) << 1) | ((b & 0x10) >> 1) | ", "-\t\t\t\t\t((b & 0x20) >> 3) |\t((b & 0x40) >> 5) | ((b & 0x80) >> 7));", "+\t\tOS.memmove(srcData, this.surfaceData, srcData.length);", "+\t\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "+\t\tdata = new ImageData(width, height, 32, palette, 4, srcData);", "+\t\tint offset = 0;", "+\t\tfor (int y = 0; y < height; y++) {", "+\t\t\tfor (int x = 0; x < width; x++, offset += 4) {", "+\t\t\t\tint a = srcData[offset + oa] & 0xFF;", "+\t\t\t\tint r = srcData[offset + or] & 0xFF;", "+\t\t\t\tint g = srcData[offset + og] & 0xFF;", "+\t\t\t\tint b = srcData[offset + ob] & 0xFF;", "+\t\t\t\tsrcData[offset + 3] = (byte)a;", "+\t\t\t\tif (a != 0) {", "+\t\t\t\t\tsrcData[offset + 2] = (byte)(((r) / (float)a) * 0xFF);", "+\t\t\t\t\tsrcData[offset + 1] = (byte)(((g) / (float)a) * 0xFF);", "+\t\t\t\t\tsrcData[offset + 0] = (byte)(((b) / (float)a) * 0xFF);", "+\t\t\t\t}", "-\t\tdata.maskData = maskData;", "+\t} else {", "+\t\tint[] w = new int[1], h = new int[1];", "+\t \tOS.gdk_drawable_get_size(pixmap, w, h);", "+\t \tint width = w[0], height = h[0]; \t", "+\t \tint /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);", "+\t\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tint /*long*/ colormap = OS.gdk_colormap_get_system();", "+\t\tOS.gdk_pixbuf_get_from_drawable(pixbuf, pixmap, colormap, 0, 0, 0, 0, width, height);", "+\t\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "+\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "+\t\tbyte[] srcData = new byte[stride * height];", "+\t\tOS.memmove(srcData, pixels, srcData.length);", "+\t\tOS.g_object_unref(pixbuf);", "+\t", "+\t\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "+\t\tdata = new ImageData(width, height, 24, palette, 4, srcData);", "+\t\tdata.bytesPerLine = stride;", "+\t", "+\t\tif (transparentPixel == -1 && type == SWT.ICON && mask != 0) {", "+\t\t\t/* Get the icon mask data */", "+\t\t\tint /*long*/ gdkImagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);", "+\t\t\tif (gdkImagePtr == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\tGdkImage gdkImage = new GdkImage();", "+\t\t\tOS.memmove(gdkImage, gdkImagePtr);", "+\t\t\tbyte[] maskData = new byte[gdkImage.bpl * gdkImage.height];", "+\t\t\tOS.memmove(maskData, gdkImage.mem, maskData.length);", "+\t\t\tOS.g_object_unref(gdkImagePtr);", "+\t\t\tint maskPad;", "+\t\t\tfor (maskPad = 1; maskPad < 128; maskPad++) {", "+\t\t\t\tint bpl = (((width + 7) / 8) + (maskPad - 1)) / maskPad * maskPad;", "+\t\t\t\tif (gdkImage.bpl == bpl) break;", "+\t\t\t}", "+\t\t\t/* Make mask scanline pad equals to 2 */", "+\t\t\tdata.maskPad = 2;", "+\t\t\tmaskData = ImageData.convertPad(maskData, width, height, 1, maskPad, data.maskPad);", "+\t\t\t/* Bit swap the mask data if necessary */", "+\t\t\tif (gdkImage.byte_order == OS.GDK_LSB_FIRST) {", "+\t\t\t\tfor (int i = 0; i < maskData.length; i++) {", "+\t\t\t\t\tbyte b = maskData[i];", "+\t\t\t\t\tmaskData[i] = (byte)(((b & 0x01) << 7) | ((b & 0x02) << 5) | ", "+\t\t\t\t\t\t((b & 0x04) << 3) |\t((b & 0x08) << 1) | ((b & 0x10) >> 1) | ", "+\t\t\t\t\t\t((b & 0x20) >> 3) |\t((b & 0x40) >> 5) | ((b & 0x80) >> 7));", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tdata.maskData = maskData;", "+\t\t}"]}], "num": 14632}
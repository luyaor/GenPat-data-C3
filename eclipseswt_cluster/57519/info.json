{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "53b587a2e5867dade066ea53f6734010", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8904403990fa21a27cda58a7be4f6b93", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "b70eece9fa211b52cf66a04a6e755c2252498108", "commitAfterChange": "b87ca47e323c90369c28285f7daf0d6d4b2db3c2", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "\r public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["- */", "-public Point computeSize (int wHint, int hHint, boolean changed) {", "-\tcheckWidget();", "-\tint count, width, height;", "-\tboolean singleLine = (getStyle() & SWT.SINGLE) != 0;", "-\t", "-\tif (singleLine) {", "-\t\tcount = 1;", "-\t} else {", "-\t\tcount = content.getLineCount();", "-\t}", "-\tif (wHint != SWT.DEFAULT) {", "-\t\twidth = wHint;", "-\t} ", "-\telse {", "-\t\twidth = DEFAULT_WIDTH;", "-\t}", "-", "-\tif (wordWrap) {", "-\t\tif (((WrappedContent) content).getVisualLineCount() != 0) {", "-\t\t\t// lines have already been wrapped to a specific width.", "-\t\t\t// use existing line count. fixes bug 9191", "-\t\t\tif (wHint == SWT.DEFAULT) {", "-\t\t\t\twidth = lineCache.getWidth();", "-\t\t\t} else {", "-\t\t\t\t((WrappedContent) content).wrapLines(width);", "-\t\t\t  \t// caret may be on a different line after a rewrap", "-\t\t  \t\tsetCaretLocation();", "-\t\t\t}\t", "-\t\t\tif (singleLine == false) {", "-\t\t\t\tcount = content.getLineCount();", "-\t\t\t}", "-\t\t}", "-\t\telse {", "-\t\t\tif (singleLine == false) {", "-\t\t\t\t((WrappedContent) content).wrapLines(width);", "-\t\t\t  \t// caret may be on a different line after a rewrap", "-\t\t  \t\tsetCaretLocation();", "-\t\t\t\tcount = content.getLineCount();", "-\t\t\t}", "-\t\t}", "-\t}", "-\telse if (wHint == SWT.DEFAULT) {", "-\t\t// Only calculate what can actually be displayed.", "-\t\t// Do this because measuring each text line is a ", "-\t\t// time-consuming process.", "-\t\tint visibleCount = Math.min (count, getDisplay().getBounds().height / lineHeight);", "-\t\tlineCache.calculate(0, visibleCount);", "-\t\twidth = lineCache.getWidth() + leftMargin + rightMargin;", "-\t}", "-\tif (hHint != SWT.DEFAULT) {", "-\t\theight = hHint;", "-\t} ", "-\telse {", "-\t\theight = count * lineHeight + topMargin + bottomMargin;", "-\t}", "-\t// Use default values if no text is defined.", "-\tif (width == 0) {", "-\t\twidth = DEFAULT_WIDTH;", "-\t}", "-\tif (height == 0) {", "-\t\tif (singleLine) {", "-\t\t\theight = lineHeight;", "-\t\t}", "-\t\telse {", "-\t\t\theight = DEFAULT_HEIGHT;", "-\t\t}", "-\t}", "-\tRectangle rect = computeTrim(0, 0, width, height);", "-\treturn new Point (rect.width, rect.height);", "-}", "+ */\r", "+public Point computeSize (int wHint, int hHint, boolean changed) {\r", "+\tcheckWidget();\r", "+\tint count, width, height;\r", "+\tboolean singleLine = (getStyle() & SWT.SINGLE) != 0;\r", "+\t\r", "+\tif (singleLine) {\r", "+\t\tcount = 1;\r", "+\t} else {\r", "+\t\tcount = content.getLineCount();\r", "+\t}\r", "+\tif (wHint != SWT.DEFAULT) {\r", "+\t\twidth = wHint;\r", "+\t} \r", "+\telse {\r", "+\t\twidth = DEFAULT_WIDTH;\r", "+\t}\r", "+\tif (wHint == SWT.DEFAULT) {\r", "+\t\tLineCache computeLineCache = lineCache;\r", "+\t\tif (wordWrap) {\r", "+\t\t\t// set non-wrapping content width calculator. Ensures ideal line width \r", "+\t\t\t// that does not required wrapping. Fixes bug 31195.\r", "+\t\t\tcomputeLineCache = new ContentWidthCache(this, logicalContent);\r", "+\t\t\tif (singleLine == false) {\r", "+\t\t\t\tcount = logicalContent.getLineCount();\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t// Only calculate what can actually be displayed.\r", "+\t\t// Do this because measuring each text line is a \r", "+\t\t// time-consuming process.\r", "+\t\tint visibleCount = Math.min (count, getDisplay().getBounds().height / lineHeight);\r", "+\t\tcomputeLineCache.calculate(0, visibleCount);\r", "+\t\twidth = computeLineCache.getWidth() + leftMargin + rightMargin;\r", "+\t}\r", "+\telse\r", "+\tif (wordWrap && singleLine == false) {\r", "+\t\t// calculate to wrap to width hint. Fixes bug 20377. \r", "+\t\t// don't wrap live content. Fixes bug 38344.\r", "+\t\tWrappedContent wrappedContent = new WrappedContent(renderer, logicalContent);\r", "+\t\twrappedContent.wrapLines(width);\r", "+\t\tcount = wrappedContent.getLineCount();\r", "+\t}\r", "+\tif (hHint != SWT.DEFAULT) {\r", "+\t\theight = hHint;\r", "+\t} \r", "+\telse {\r", "+\t\theight = count * lineHeight + topMargin + bottomMargin;\r", "+\t}\r", "+\t// Use default values if no text is defined.\r", "+\tif (width == 0) {\r", "+\t\twidth = DEFAULT_WIDTH;\r", "+\t}\r", "+\tif (height == 0) {\r", "+\t\tif (singleLine) {\r", "+\t\t\theight = lineHeight;\r", "+\t\t}\r", "+\t\telse {\r", "+\t\t\theight = DEFAULT_HEIGHT;\r", "+\t\t}\r", "+\t}\r", "+\tRectangle rect = computeTrim(0, 0, width, height);\r", "+\treturn new Point (rect.width, rect.height);\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d16bb52fada8c374a8131e58ef38ed9e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextDropTargetEffect.java", "commitBeforeChange": "d786dbacf836ad2de3f0df80c16f6245c829bc74", "commitAfterChange": "4a3bc808f901fc912cb07ed81b640170056cb41c", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void dragOver(DropTargetEvent event)", "signatureAfterChange": " \tpublic void dragOver(DropTargetEvent event)", "diff": ["-\t\t\t\t\t\tRectangle bounds = text.getTextBounds(0, 0);", "-\t\t\t\t\t\tint charWidth = bounds.width;", "+\t\t\t\t\t\tGC gc = new GC(text);", "+\t\t\t\t\t\tFontMetrics fm = gc.getFontMetrics();", "+\t\t\t\t\t\tgc.dispose();", "+\t\t\t\t\t\tint charWidth = fm.getAverageCharWidth();", "-\t\t\t\t\t\t\tif (text.getHorizontalPixel() != leftPixel) {", "-\t\t\t\t\t\t\t\ttext.redraw();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (text.getHorizontalPixel() != leftPixel) {", "-\t\t\t\t\t\t\t\ttext.redraw();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tint lineHeight = bounds.height;", "+\t\t\t\t\t\tint lineHeight = text.getLineHeight();", "-\t\t\t\t\t\t\tif (text.getTopPixel() != topPixel) {", "-\t\t\t\t\t\t\t\ttext.redraw();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (text.getTopPixel() != topPixel) {", "-\t\t\t\t\t\t\t\ttext.redraw();", "-\t\t\t\t\t\t\t}"]}], "num": 57519}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a6ffac804064bfeaa788fdb0f57e2ce4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c07e42010a1e68b21478587cd938cc9d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "982cd53e0d78db18706bf0846ac669e298de32e2", "commitAfterChange": "165673b92d78dcd017af081458f5cae6d2eb17c6", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 66, "signatureBeforeChange": "  void OnSelectedItemChanged (int args)", "signatureAfterChange": "  void OnSelectedItemChanged (int args)", "diff": ["-\t} \t", "-    int treeType = OS.Object_GetType (handle);", "-    int propertyName = createDotNetString (\"IsSelectionChangeActive\", false);", "-    int property = OS.Type_GetProperty (treeType, propertyName, OS.BindingFlags_Instance | OS.BindingFlags_NonPublic);", "-    OS.GCHandle_Free (treeType);", "-    OS.GCHandle_Free (propertyName);", "-    OS.PropertyInfo_SetValueBoolean (property, handle, true, 0);", "+\t}", "+    setIsSelectionActiveProperty (true);", "-    \tfor (int i = 0; i < selectedItemCount; i++) {", "-    \t\tif (newItemRef == 0 || !OS.Object_Equals (newItemRef, selectedItems [i].handle)) {", "-    \t\t\tOS.TreeViewItem_IsSelected (selectedItems [i].handle, false);", "-    \t\t}", "-    \t}", "-    \tif (newItem != null) {", "-    \t\tOS.TreeViewItem_IsSelected (newItem.handle, true);", "-    \t\tselectedItems = new TreeItem [] { newItem };", "-    \t\tselectedItemCount = 1;", "-    \t} else {", "-    \t\tselectedItems = new TreeItem [0];", "-    \t\tselectedItemCount = 0;", "-    \t}", "+    \tdeselectAll ();", "+    \tif (newItem != null) OS.TreeViewItem_IsSelected (newItem.handle, true);", "-    \t\t\tinsertSelectedItem (newItem, selectedItemCount);", "+    \t    \tif (newItem != null) OS.TreeViewItem_IsSelected (newItem.handle, true);", "+    \t    \tanchor = newItem;", "-    \t\t\tinsertSelectedItems (anchor, newItem);", "-    \t\t}", "-    \t\tfor (int i = 0; i < selectedItemCount; i++) {", "-    \t\t\tOS.TreeViewItem_IsSelected (selectedItems[i].handle, true);", "+    \t\t\tint zero = OS.gcnew_Point (0, 0);", "+    \t\t\tint point = OS.UIElement_TranslatePoint (anchor.handle, zero, newItem.handle);", "+    \t\t\tOS.GCHandle_Free (zero);", "+    \t\t    boolean down = OS.Point_Y (point) < 0;", "+    \t\t    OS.GCHandle_Free (point);", "+    \t\t    TreeItem from = down ? anchor : newItem;", "+    \t\t    TreeItem to = down ? newItem : anchor;", "+    \t\t    int items = OS.ItemsControl_Items (handle);", "+    \t\t    int itemCount = OS.ItemCollection_Count (items);", "+    \t\t    boolean[] selecting = new boolean[] {false};", "+    \t\t    for (int i = 0; i < itemCount; i++) {", "+\t\t\t\t\tint item = OS.ItemCollection_GetItemAt(items, i);", "+\t\t\t\t\tfixSelection (item, from, to, selecting);", "+\t\t\t\t\tOS.GCHandle_Free (item);", "+\t\t\t\t}", "+    \t\t    OS.GCHandle_Free (items);", "-    \t\tif (newItem != null) {", "-    \t\t\tboolean selected = false;", "-    \t\t\tfor (int i = 0; i < selectedItemCount; i++) {", "-    \t\t\t\tif (selectedItems [i] == newItem) {", "-    \t\t\t\t\tselected = true;", "-    \t\t\t\t\tbreak;", "-    \t\t\t\t}", "-    \t\t\t}", "-    \t\t\tif (!selected) {", "-    \t\t\t\tinsertSelectedItem (newItem, selectedItemCount);", "-    \t\t\t\tOS.TreeViewItem_IsSelected (newItem.handle, true);", "-    \t\t\t} else {", "-    \t\t\t\tremoveSelectedItem (newItem);", "-    \t\t\t\tOS.TreeViewItem_IsSelected (newItem.handle, false);", "-    \t\t\t}", "-    \t\t} else {", "-    \t\t\tif (anchor != null) removeSelectedItem (anchor);", "+\t\t\tif (unselect != null) {", "+    \t\t\tOS.TreeViewItem_IsSelected (unselect.handle, false);", "+    \t\t\tunselect = null;", "-    \t\tint oldItemRef = OS.RoutedPropertyChangedEventArgs_OldValue (args);", "-    \t\tif (oldItemRef != 0) {", "-    \t\t\tfor (int i = 0; i < selectedItemCount; i++) {", "-    \t\t\t\tif (OS.Object_Equals (oldItemRef, selectedItems [i].handle)) {", "-    \t\t\t\t\tOS.TreeViewItem_IsSelected (oldItemRef, true);", "-    \t\t\t\t\tbreak;", "-    \t\t\t\t}", "-    \t\t\t}", "-    \t\t\tOS.GCHandle_Free (oldItemRef);", "+    \t\tif (reselect != null) {", "+    \t\t\tOS.TreeViewItem_IsSelected (reselect.handle, true);", "+    \t\t\treselect = null;", "+    \t\tanchor = newItem;", "-\tOS.PropertyInfo_SetValueBoolean (property, handle, false, 0);", "-\tOS.GCHandle_Free (property);", "+    setIsSelectionActiveProperty (false);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eb9c2fd866e1c4b0a4bb20d9849d36c9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "82177eb745bdc23324198cfa8598d74fb42e9dba", "commitAfterChange": "c9b39df8386e47fe6871296e2025968aedb573fa", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 67, "signatureBeforeChange": "  void OnSelectedItemChanged (int args)", "signatureAfterChange": "  void OnSelectedItemChanged (int args)", "diff": ["-    int mask = OS.ModifierKeys_Control | OS.ModifierKeys_Shift;", "-    int modifiers = OS.Keyboard_Modifiers ();", "-    switch (modifiers & mask) {", "-        case OS.ModifierKeys_Shift:", "-            deselectAll ();", "-            if (anchor == null || anchor == newItem) {", "-            \tinsertSelectedItem (newItem, selectedItemCount);", "-            } else {", "-                insertSelectedItems (anchor, newItem);", "-            }", "-            for (int i = 0; i < selectedItemCount; i++) {", "-\t\t\t\tOS.TreeViewItem_IsSelected (selectedItems[i].handle, true);", "-\t\t\t}", "-            break;", "-        case OS.ModifierKeys_Control:", "-        \tif (newItem != null) {", "-        \t\tboolean selected = false;", "-        \t\tfor (int i = 0; i < selectedItemCount; i++) {", "-        \t\t\tif (selectedItems [i] == newItem) {", "-        \t\t\t\tselected = true;", "-        \t\t\t\tbreak;", "-        \t\t\t}", "-        \t\t}", "-        \t\tif (!selected) {", "-\t        \t\tinsertSelectedItem (newItem, selectedItemCount);", "-\t        \t\tOS.TreeViewItem_IsSelected (newItem.handle, true);", "-        \t\t} else {", "-        \t\t\tremoveSelectedItem (newItem);", "-        \t\t\tOS.TreeViewItem_IsSelected (newItem.handle, false);", "-        \t\t}", "-        \t} else {", "-        \t\tif (anchor != null) removeSelectedItem (anchor);", "-        \t}", "-        \tint oldItemRef = OS.RoutedPropertyChangedEventArgs_OldValue (args);", "-        \tif (oldItemRef != 0) {", "-        \t\tfor (int i = 0; i < selectedItemCount; i++) {", "-        \t\t\tif (OS.Object_Equals (oldItemRef, selectedItems [i].handle)) {", "-        \t\t\t\tOS.TreeViewItem_IsSelected (oldItemRef, true);", "-        \t\t\t\tbreak;", "-        \t\t\t}", "-        \t\t}", "-        \t\tOS.GCHandle_Free (oldItemRef);", "-        \t}", "-            break;", "-        default:", "-\t\t\tfor (int i = 0; i < selectedItemCount; i++) {", "-\t\t\t\tif (newItemRef == 0 || !OS.Object_Equals (newItemRef, selectedItems [i].handle)) {", "-\t\t\t\t\tOS.TreeViewItem_IsSelected (selectedItems [i].handle, false);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (newItem != null) {", "-\t\t\t\tOS.TreeViewItem_IsSelected (newItem.handle, true);", "-\t\t\t\tselectedItems = new TreeItem [] { newItem };", "-\t\t\t\tselectedItemCount = 1;", "-\t\t\t} else {", "-\t\t\t\tselectedItems = new TreeItem [0];", "-\t\t\t\tselectedItemCount = 0;", "-\t\t\t}", "-\t\t\tanchor = newItem;", "-    }", "+    if (!shiftDown && !ctrlDown) {", "+    \tfor (int i = 0; i < selectedItemCount; i++) {", "+    \t\tif (newItemRef == 0 || !OS.Object_Equals (newItemRef, selectedItems [i].handle)) {", "+    \t\t\tOS.TreeViewItem_IsSelected (selectedItems [i].handle, false);", "+    \t\t}", "+    \t}", "+    \tif (newItem != null) {", "+    \t\tOS.TreeViewItem_IsSelected (newItem.handle, true);", "+    \t\tselectedItems = new TreeItem [] { newItem };", "+    \t\tselectedItemCount = 1;", "+    \t} else {", "+    \t\tselectedItems = new TreeItem [0];", "+    \t\tselectedItemCount = 0;", "+    \t}", "+    \tanchor = newItem;", "+    } else {", "+    \tif (shiftDown) {", "+    \t\tdeselectAll ();", "+    \t\tif (anchor == null || anchor == newItem) {", "+    \t\t\tinsertSelectedItem (newItem, selectedItemCount);", "+    \t\t} else {", "+    \t\t\tinsertSelectedItems (anchor, newItem);", "+    \t\t}", "+    \t\tfor (int i = 0; i < selectedItemCount; i++) {", "+    \t\t\tOS.TreeViewItem_IsSelected (selectedItems[i].handle, true);", "+    \t\t}", "+    \t} else {", "+    \t\tif (newItem != null) {", "+    \t\t\tboolean selected = false;", "+    \t\t\tfor (int i = 0; i < selectedItemCount; i++) {", "+    \t\t\t\tif (selectedItems [i] == newItem) {", "+    \t\t\t\t\tselected = true;", "+    \t\t\t\t\tbreak;", "+    \t\t\t\t}", "+    \t\t\t}", "+    \t\t\tif (!selected) {", "+    \t\t\t\tinsertSelectedItem (newItem, selectedItemCount);", "+    \t\t\t\tOS.TreeViewItem_IsSelected (newItem.handle, true);", "+    \t\t\t} else {", "+    \t\t\t\tremoveSelectedItem (newItem);", "+    \t\t\t\tOS.TreeViewItem_IsSelected (newItem.handle, false);", "+    \t\t\t}", "+    \t\t} else {", "+    \t\t\tif (anchor != null) removeSelectedItem (anchor);", "+    \t\t}", "+    \t\tint oldItemRef = OS.RoutedPropertyChangedEventArgs_OldValue (args);", "+    \t\tif (oldItemRef != 0) {", "+    \t\t\tfor (int i = 0; i < selectedItemCount; i++) {", "+    \t\t\t\tif (OS.Object_Equals (oldItemRef, selectedItems [i].handle)) {", "+    \t\t\t\t\tOS.TreeViewItem_IsSelected (oldItemRef, true);", "+    \t\t\t\t\tbreak;", "+    \t\t\t\t}", "+    \t\t\t}", "+    \t\t\tOS.GCHandle_Free (oldItemRef);", "+    \t\t}", "+    \t}", "+    } "]}], "num": 25776}
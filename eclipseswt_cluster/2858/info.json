{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c2117bd960015feb21b64c739647e1a1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc98fd4843b56d9897f647925058b4f7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "2c8787f90b3c8a7312f4b411ab7ee4586da3407f", "commitAfterChange": "a0c1f03fb4ceb2772afc376ff5167fd9d3ca7414", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  void drawBorder(GC gc, int x, int y, GdkColor selectionColor)", "signatureAfterChange": "  void drawBorder(GC gc, int x, int y, GdkColor selectionColor)", "diff": ["-\tif (cairo != 0 && OS.GTK_VERSION >= OS.VERSION(2, 8, 0)) {", "+\tif (cairo != 0) {", "-\t\t\t\tif (cairo != 0 && OS.GTK_VERSION >= OS.VERSION(2, 8, 0)) {", "+\t\t\t\tif (cairo != 0) {", "-\t\t", "-\t\tboolean drawUnderline = false;", "-\t\tif (style.underline && style.underlineColor != null) drawUnderline = true;", "-\t\tif (style.underline && (style.underlineStyle == SWT.UNDERLINE_ERROR || style.underlineStyle == SWT.UNDERLINE_SQUIGGLE)&& OS.GTK_VERSION < OS.VERSION(2, 4, 0)) drawUnderline = true;", "-\t\tif (drawUnderline && !style.isAdherentUnderline(styles[i+1].style)) {", "-\t\t\tint start = styles[i].start;", "-\t\t\tfor (int j = i; j > 0 && style.isAdherentUnderline(styles[j-1].style); j--) {", "-\t\t\t\tstart = styles[j - 1].start;", "-\t\t\t}", "-\t\t\tstart = translateOffset(start);", "-\t\t\tint end = translateOffset(styles[i+1].start - 1);", "-\t\t\tint byteStart = (int)/*64*/(OS.g_utf16_offset_to_pointer(ptr, start) - ptr);", "-\t\t\tint byteEnd = (int)/*64*/(OS.g_utf16_offset_to_pointer(ptr, end + 1) - ptr);", "-\t\t\tint[] ranges = new int[]{byteStart, byteEnd};", "-\t\t\tint /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);", "-\t\t\tif (rgn != 0) {", "-\t\t\t\tint[] nRects = new int[1];", "-\t\t\t\tint /*long*/[] rects = new int /*long*/[1];", "-\t\t\t\tOS.gdk_region_get_rectangles(rgn, rects, nRects);", "-\t\t\t\tGdkRectangle rect = new GdkRectangle();", "-\t\t\t\tGdkColor color = null;", "-\t\t\t\tif (color == null && style.underlineColor != null) color = style.underlineColor.handle;", "-\t\t\t\tif (color == null && selectionColor != null) color = selectionColor;", "-\t\t\t\tif (color == null && style.foreground != null) color = style.foreground.handle;", "-\t\t\t\tif (color == null) color = data.foreground;", "-\t\t\t\tif (cairo != 0 && OS.GTK_VERSION >= OS.VERSION(2, 8, 0)) {", "-\t\t\t\t\tCairo.cairo_set_source_rgba(cairo, (color.red & 0xFFFF) / (float)0xFFFF, (color.green & 0xFFFF) / (float)0xFFFF, (color.blue & 0xFFFF) / (float)0xFFFF, data.alpha / (float)0xFF);", "-\t\t\t\t} else {", "-\t\t\t\t\tif (gcValues == null) {", "-\t\t\t\t\t\tgcValues = new GdkGCValues();", "-\t\t\t\t\t\tOS.gdk_gc_get_values(gdkGC, gcValues);", "-\t\t\t\t\t}", "-\t\t\t\t\tOS.gdk_gc_set_foreground(gdkGC, color);", "-\t\t\t\t}", "-\t\t\t\tint underlinePosition = -1;", "-\t\t\t\tint underlineThickness = 1;", "-\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION(2, 6, 0)) {", "-\t\t\t\t\tFont font = style.font;", "-\t\t\t\t\tif (font == null) font = this.font;", "-\t\t\t\t\tif (font == null) font = device.systemFont;", "-\t\t\t\t\tint /*long*/ lang = OS.pango_context_get_language(context);", "-\t\t\t\t\tint /*long*/ metrics = OS.pango_context_get_metrics(context, font.handle, lang);", "-\t\t\t\t\tunderlinePosition = OS.PANGO_PIXELS(OS.pango_font_metrics_get_underline_position(metrics));", "-\t\t\t\t\tunderlineThickness = OS.PANGO_PIXELS(OS.pango_font_metrics_get_underline_thickness(metrics));", "-\t\t\t\t\tOS.pango_font_metrics_unref(metrics);", "-\t\t\t\t}", "-\t\t\t\tfor (int j=0; j<nRects[0]; j++) {", "-\t\t\t\t\tOS.memmove(rect, rects[0] + (j * GdkRectangle.sizeof), GdkRectangle.sizeof);", "-\t\t\t\t\tint offset = getOffset(rect.x - x, rect.y - y, null);", "-\t\t\t\t\tint lineIndex = getLineIndex(offset);", "-\t\t\t\t\tFontMetrics metrics = getLineMetrics(lineIndex);", "-\t\t\t\t\tint underlineY = rect.y + metrics.ascent - underlinePosition - style.rise;", "-\t\t\t\t\tswitch (style.underlineStyle) {", "-\t\t\t\t\t\tcase SWT.UNDERLINE_SQUIGGLE:", "-\t\t\t\t\t\tcase SWT.UNDERLINE_ERROR: {", "-\t\t\t\t\t\t\tint squigglyThickness = underlineThickness;", "-\t\t\t\t\t\t\tint squigglyHeight = 2 * squigglyThickness;", "-\t\t\t\t\t\t\tint squigglyY = Math.min(underlineY, rect.y + rect.height - squigglyHeight - 1);", "-\t\t\t\t\t\t\tint[] points = computePolyline(rect.x, squigglyY, rect.x + rect.width, squigglyY + squigglyHeight);", "-\t\t\t\t\t\t\tif (cairo != 0 && OS.GTK_VERSION >= OS.VERSION(2, 8, 0)) {", "-\t\t\t\t\t\t\t\tCairo.cairo_set_line_width(cairo, squigglyThickness);", "-\t\t\t\t\t\t\t\tCairo.cairo_set_line_cap(cairo, Cairo.CAIRO_LINE_CAP_BUTT);", "-\t\t\t\t\t\t\t\tCairo.cairo_set_line_join(cairo, Cairo.CAIRO_LINE_JOIN_MITER);", "-\t\t\t\t\t\t\t\tif (points.length > 0) {", "-\t\t\t\t\t\t\t\t\tdouble xOffset = 0.5, yOffset = 0.5; ", "-\t\t\t\t\t\t\t\t\tCairo.cairo_move_to(cairo, points[0] + xOffset, points[1] + yOffset);", "-\t\t\t\t\t\t\t\t\tfor (int k = 2; k < points.length; k += 2) {", "-\t\t\t\t\t\t\t\t\t\tCairo.cairo_line_to(cairo, points[k] + xOffset, points[k + 1] + yOffset);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tCairo.cairo_stroke(cairo);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t} else {\t", "-\t\t\t\t\t\t\t\tOS.gdk_gc_set_line_attributes(gdkGC, squigglyThickness, OS.GDK_LINE_SOLID, OS.GDK_CAP_BUTT, OS.GDK_JOIN_MITER);", "-\t\t\t\t\t\t\t\tOS.gdk_draw_lines(data.drawable, gdkGC, points, points.length / 2);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcase SWT.UNDERLINE_DOUBLE:", "-\t\t\t\t\t\t\tif (cairo != 0 && OS.GTK_VERSION >= OS.VERSION(2, 8, 0)) {", "-\t\t\t\t\t\t\t\tCairo.cairo_rectangle(cairo, rect.x, underlineY + underlineThickness * 2, rect.width, underlineThickness);", "-\t\t\t\t\t\t\t\tCairo.cairo_fill(cairo);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tOS.gdk_draw_rectangle(data.drawable, gdkGC, 1, rect.x, underlineY + underlineThickness * 2, rect.width, underlineThickness);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t//FALLTHROUGH", "-\t\t\t\t\t\tcase SWT.UNDERLINE_LINK:", "-\t\t\t\t\t\tcase SWT.UNDERLINE_SINGLE:", "-\t\t\t\t\t\t\tif (cairo != 0 && OS.GTK_VERSION >= OS.VERSION(2, 8, 0)) {", "-\t\t\t\t\t\t\t\tCairo.cairo_rectangle(cairo, rect.x, underlineY, rect.width, underlineThickness);", "-\t\t\t\t\t\t\t\tCairo.cairo_fill(cairo);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tOS.gdk_draw_rectangle(data.drawable, gdkGC, 1, rect.x, underlineY, rect.width, underlineThickness);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (rects[0] != 0) OS.g_free(rects[0]);", "-\t\t\t\tOS.gdk_region_destroy(rgn);", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tboolean drawStrikeout = false;", "-\t\tif (style.strikeout && style.strikeoutColor != null) drawStrikeout = true;", "-\t\tif (drawStrikeout && !style.isAdherentStrikeout(styles[i+1].style)) {", "-\t\t\tint start = styles[i].start;", "-\t\t\tfor (int j = i; j > 0 && style.isAdherentStrikeout(styles[j-1].style); j--) {", "-\t\t\t\tstart = styles[j - 1].start;", "-\t\t\t}", "-\t\t\tstart = translateOffset(start);", "-\t\t\tint end = translateOffset(styles[i+1].start - 1);", "-\t\t\tint byteStart = (int)/*64*/(OS.g_utf16_offset_to_pointer(ptr, start) - ptr);", "-\t\t\tint byteEnd = (int)/*64*/(OS.g_utf16_offset_to_pointer(ptr, end + 1) - ptr);", "-\t\t\tint[] ranges = new int[]{byteStart, byteEnd};", "-\t\t\tint /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);", "-\t\t\tif (rgn != 0) {", "-\t\t\t\tint[] nRects = new int[1];", "-\t\t\t\tint /*long*/[] rects = new int /*long*/[1];", "-\t\t\t\tOS.gdk_region_get_rectangles(rgn, rects, nRects);", "-\t\t\t\tGdkRectangle rect = new GdkRectangle();", "-\t\t\t\tGdkColor color = null;", "-\t\t\t\tif (color == null && style.strikeoutColor != null) color = style.strikeoutColor.handle;", "-\t\t\t\tif (color == null && selectionColor != null) color = selectionColor;", "-\t\t\t\tif (color == null && style.foreground != null) color = style.foreground.handle;", "-\t\t\t\tif (color == null) color = data.foreground;", "-\t\t\t\tif (cairo != 0 && OS.GTK_VERSION >= OS.VERSION(2, 8, 0)) {", "-\t\t\t\t\tCairo.cairo_set_source_rgba(cairo, (color.red & 0xFFFF) / (float)0xFFFF, (color.green & 0xFFFF) / (float)0xFFFF, (color.blue & 0xFFFF) / (float)0xFFFF, data.alpha / (float)0xFF);", "-\t\t\t\t} else {", "-\t\t\t\t\tif (gcValues == null) {", "-\t\t\t\t\t\tgcValues = new GdkGCValues();", "-\t\t\t\t\t\tOS.gdk_gc_get_values(gdkGC, gcValues);", "-\t\t\t\t\t}", "-\t\t\t\t\tOS.gdk_gc_set_foreground(gdkGC, color);", "-\t\t\t\t}", "-\t\t\t\tint strikeoutPosition = -1;", "-\t\t\t\tint strikeoutThickness = 1;", "-\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION(2, 6, 0)) {", "-\t\t\t\t\tFont font = style.font;", "-\t\t\t\t\tif (font == null) font = this.font;", "-\t\t\t\t\tif (font == null) font = device.systemFont;", "-\t\t\t\t\tint /*long*/ lang = OS.pango_context_get_language(context);", "-\t\t\t\t\tint /*long*/ metrics = OS.pango_context_get_metrics(context, font.handle, lang);", "-\t\t\t\t\tstrikeoutPosition = OS.PANGO_PIXELS(OS.pango_font_metrics_get_strikethrough_position(metrics));", "-\t\t\t\t\tstrikeoutThickness = OS.PANGO_PIXELS(OS.pango_font_metrics_get_strikethrough_thickness(metrics));", "-\t\t\t\t\tOS.pango_font_metrics_unref(metrics);", "-\t\t\t\t}", "-\t\t\t\tfor (int j=0; j<nRects[0]; j++) {", "-\t\t\t\t\tOS.memmove(rect, rects[0] + (j * GdkRectangle.sizeof), GdkRectangle.sizeof);", "-\t\t\t\t\tint strikeoutY = rect.y + rect.height / 2 - style.rise;", "-\t\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION(2, 6, 0)) {", "-\t\t\t\t\t\tint offset = getOffset(rect.x - x, rect.y - y, null);", "-\t\t\t\t\t\tint lineIndex = getLineIndex(offset);", "-\t\t\t\t\t\tFontMetrics metrics = getLineMetrics(lineIndex);", "-\t\t\t\t\t\tstrikeoutY = rect.y + metrics.ascent - strikeoutPosition - style.rise;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (cairo != 0 && OS.GTK_VERSION >= OS.VERSION(2, 8, 0)) {", "-\t\t\t\t\t\tCairo.cairo_rectangle(cairo, rect.x, strikeoutY, rect.width, strikeoutThickness);", "-\t\t\t\t\t\tCairo.cairo_fill(cairo);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tOS.gdk_draw_rectangle(data.drawable, gdkGC, 1, rect.x, strikeoutY, rect.width, strikeoutThickness);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tif (rects[0] != 0) OS.g_free(rects[0]);", "-\t\t\t\tOS.gdk_region_destroy(rgn);", "-\t\t\t}", "-\t\t}", "-\tif (cairo != 0 && OS.GTK_VERSION >= OS.VERSION(2, 8, 0)) {", "+\tif (cairo != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "096c2ef58d3123228dbd2682ed525d4f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "3f8101474c4f9d64a69b780f9a29957977994c1c", "commitAfterChange": "ec9593cc82c5a72b6479eac5f3bdaf617409cb43", "methodNumberBeforeChange": 151, "methodNumberAfterChange": 155, "signatureBeforeChange": "  LRESULT wmNotify (NMHDR hdr, int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotify (NMHDR hdr, int wParam, int lParam)", "diff": ["-\tif (hdr.hwndFrom == itemToolTipHandle && hwndHeader != 0) {", "-\t\tif (!OS.IsWinCE) {", "-\t\t\tswitch (hdr.code) {", "-\t\t\t\tcase OS.TTN_POP: {", "-\t\t\t\t\tif (display.isXMouseActive ()) {", "-\t\t\t\t\t\tShell shell = getShell ();", "-\t\t\t\t\t\tshell.lockToolTipControl = null;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase OS.TTN_SHOW: {", "-\t\t\t\t\tif (display.isXMouseActive ()) {", "-\t\t\t\t\t\tShell shell = getShell ();", "-\t\t\t\t\t\tshell.lockToolTipControl = this;", "-\t\t\t\t\t}", "-\t\t\t\t\tint pos = OS.GetMessagePos ();", "-\t\t\t\t\tPOINT pt = new POINT();", "-\t\t\t\t\tOS.POINTSTOPOINT (pt, pos);", "-\t\t\t\t\tOS.ScreenToClient (handle, pt);", "-\t\t\t\t\tTVHITTESTINFO lpht = new TVHITTESTINFO ();", "-\t\t\t\t\tlpht.x = pt.x;", "-\t\t\t\t\tlpht.y = pt.y;", "-\t\t\t\t\tOS.SendMessage (handle, OS.TVM_HITTEST, 0, lpht);", "-\t\t\t\t\tif (lpht.hItem != 0) {", "-\t\t\t\t\t\tint /*long*/ hDC = OS.GetDC (handle);", "-\t\t\t\t\t\tint /*long*/ oldFont = 0, newFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "-\t\t\t\t\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "-\t\t\t\t\t\tLRESULT result = null;", "-\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\tOS.GetClientRect (hwndParent, rect);", "-\t\t\t\t\t\tOS.MapWindowPoints (hwndParent, handle, rect, 2);", "-\t\t\t\t\t\tTreeItem item = _getItem (lpht.hItem);", "-\t\t\t\t\t\tint index = 0, count = Math.max (1, (int)/*64*/OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0));", "-\t\t\t\t\t\tint [] order = new int [count];", "-\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETORDERARRAY, count, order);", "-\t\t\t\t\t\twhile (index < count) {", "-\t\t\t\t\t\t\tint /*long*/ hFont = item.fontHandle (order [index]);", "-\t\t\t\t\t\t\tif (hFont != -1) hFont = OS.SelectObject (hDC, hFont);", "-\t\t\t\t\t\t\tRECT cellRect = item.getBounds (order [index], true, false, true, false, true, hDC);", "-\t\t\t\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "-\t\t\t\t\t\t\tif (cellRect.left > rect.right) break;", "-\t\t\t\t\t\t\tcellRect.right = Math.min (cellRect.right, rect.right);", "-\t\t\t\t\t\t\tif (OS.PtInRect (cellRect, pt)) {", "-\t\t\t\t\t\t\t\tRECT textRect = item.getBounds (order [index], true, false, false, false, false, hDC);", "-\t\t\t\t\t\t\t\tif (textRect.right > cellRect.right) {", "-\t\t\t\t\t\t\t\t\tOS.MapWindowPoints (handle, 0, textRect, 2);", "-\t\t\t\t\t\t\t\t\tint flags = OS.SWP_NOACTIVATE | OS.SWP_NOSIZE | OS.SWP_NOZORDER;", "-\t\t\t\t\t\t\t\t\tSetWindowPos (itemToolTipHandle, 0, textRect.left, textRect.top, 0, 0, flags);", "-\t\t\t\t\t\t\t\t\tresult = LRESULT.ONE;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tindex++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "-\t\t\t\t\t\tOS.ReleaseDC (handle, hDC);", "-\t\t\t\t\t\tif (result != null) return result;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\tif (hdr.hwndFrom == itemToolTipHandle) {", "+\t\tLRESULT result = wmNotifyToolTip (hdr, wParam, lParam);", "+\t\tif (result != null) return result;", "-\t\t/*", "-\t\t* Feature in Windows.  On NT, the automatically created", "-\t\t* header control is created as a UNICODE window, not an", "-\t\t* ANSI window despite the fact that the parent is created", "-\t\t* as an ANSI window.  This means that it sends UNICODE", "-\t\t* notification messages to the parent window on NT for", "-\t\t* no good reason.  The data and size in the NMHEADER and", "-\t\t* HDITEM structs is identical between the platforms so no", "-\t\t* different message is actually necessary.  Despite this,", "-\t\t* Windows sends different messages.  The fix is to look", "-\t\t* for both messages, despite the platform.  This works", "-\t\t* because only one will be sent on either platform, never", "-\t\t* both.", "-\t\t*/", "-\t\tswitch (hdr.code) {", "-\t\t\tcase OS.HDN_BEGINTRACKW:", "-\t\t\tcase OS.HDN_BEGINTRACKA:", "-\t\t\tcase OS.HDN_DIVIDERDBLCLICKW:", "-\t\t\tcase OS.HDN_DIVIDERDBLCLICKA: {", "-\t\t\t\tNMHEADER phdn = new NMHEADER ();", "-\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "-\t\t\t\tTreeColumn column = columns [phdn.iItem];", "-\t\t\t\tif (column != null && !column.getResizable ()) {", "-\t\t\t\t\treturn LRESULT.ONE;", "-\t\t\t\t}", "-\t\t\t\tignoreColumnMove = true;", "-\t\t\t\tswitch (hdr.code) {", "-\t\t\t\t\tcase OS.HDN_DIVIDERDBLCLICKW:", "-\t\t\t\t\tcase OS.HDN_DIVIDERDBLCLICKA:", "-\t\t\t\t\t\tif (column != null) column.pack ();", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.NM_RELEASEDCAPTURE: {", "-\t\t\t\tif (!ignoreColumnMove) {", "-\t\t\t\t\tint count = (int)/*64*/OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "-\t\t\t\t\tfor (int i=0; i<count; i++) {", "-\t\t\t\t\t\tTreeColumn column = columns [i];", "-\t\t\t\t\t\tcolumn.updateToolTip (i);", "-\t\t\t\t\t}", "-\t\t\t\t\tupdateImageList ();", "-\t\t\t\t}", "-\t\t\t\tignoreColumnMove = false;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.HDN_BEGINDRAG: {", "-\t\t\t\tif (ignoreColumnMove) return LRESULT.ONE;", "-\t\t\t\tNMHEADER phdn = new NMHEADER ();", "-\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "-\t\t\t\tif (phdn.iItem != -1) {", "-\t\t\t\t\tTreeColumn column = columns [phdn.iItem];", "-\t\t\t\t\tif (column != null && !column.getMoveable ()) {", "-\t\t\t\t\t\tignoreColumnMove = true;", "-\t\t\t\t\t\treturn LRESULT.ONE;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.HDN_ENDDRAG: {", "-\t\t\t\tNMHEADER phdn = new NMHEADER ();", "-\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "-\t\t\t\tif (phdn.iItem != -1 && phdn.pitem != 0) {", "-\t\t\t\t\tHDITEM pitem = new HDITEM ();", "-\t\t\t\t\tOS.MoveMemory (pitem, phdn.pitem, HDITEM.sizeof);", "-\t\t\t\t\tif ((pitem.mask & OS.HDI_ORDER) != 0 && pitem.iOrder != -1) {", "-\t\t\t\t\t\tint count = (int)/*64*/OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "-\t\t\t\t\t\tint [] order = new int [count];", "-\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETORDERARRAY, count, order);", "-\t\t\t\t\t\tint index = 0;", "-\t\t\t\t\t\twhile (index < order.length) {", "-\t\t\t\t\t\t \tif (order [index] == phdn.iItem) break;", "-\t\t\t\t\t\t\tindex++;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (index == order.length) index = 0;", "-\t\t\t\t\t\tif (index == pitem.iOrder) break;", "-\t\t\t\t\t\tint start = Math.min (index, pitem.iOrder);", "-\t\t\t\t\t\tint end = Math.max (index, pitem.iOrder);", "-\t\t\t\t\t\tRECT rect = new RECT (), headerRect = new RECT ();", "-\t\t\t\t\t\tOS.GetClientRect (handle, rect);", "-\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, order [start], headerRect);", "-\t\t\t\t\t\trect.left = Math.max (rect.left, headerRect.left);", "-\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, order [end], headerRect);", "-\t\t\t\t\t\trect.right = Math.min (rect.right, headerRect.right);", "-\t\t\t\t\t\tOS.InvalidateRect (handle, rect, true);", "-\t\t\t\t\t\tignoreColumnMove = false;", "-\t\t\t\t\t\tfor (int i=start; i<=end; i++) {", "-\t\t\t\t\t\t\tTreeColumn column = columns [order [i]];", "-\t\t\t\t\t\t\tif (!column.isDisposed ()) {", "-\t\t\t\t\t\t\t\tcolumn.postEvent (SWT.Move);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.HDN_ITEMCHANGINGW:", "-\t\t\tcase OS.HDN_ITEMCHANGINGA: {", "-\t\t\t\tNMHEADER phdn = new NMHEADER ();", "-\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "-\t\t\t\tif (phdn.pitem != 0) {", "-\t\t\t\t\tHDITEM newItem = new HDITEM ();", "-\t\t\t\t\tOS.MoveMemory (newItem, phdn.pitem, HDITEM.sizeof);", "-\t\t\t\t\tif ((newItem.mask & OS.HDI_WIDTH) != 0) {", "-\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\tOS.GetClientRect (handle, rect);", "-\t\t\t\t\t\tHDITEM oldItem = new HDITEM ();", "-\t\t\t\t\t\toldItem.mask = OS.HDI_WIDTH;", "-\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, phdn.iItem, oldItem);", "-\t\t\t\t\t\tint deltaX = newItem.cxy - oldItem.cxy;", "-\t\t\t\t\t\tRECT headerRect = new RECT ();", "-\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, phdn.iItem, headerRect);", "-\t\t\t\t\t\tint gridWidth = linesVisible ? GRID_WIDTH : 0;", "-\t\t\t\t\t\trect.left = headerRect.right - gridWidth;", "-\t\t\t\t\t\tint newX = rect.left + deltaX;", "-\t\t\t\t\t\trect.right = Math.max (rect.right, rect.left + Math.abs (deltaX));", "-\t\t\t\t\t\tif (explorerTheme || (findImageControl () != null || hooks (SWT.EraseItem) || hooks (SWT.PaintItem))) {", "-\t\t\t\t\t\t\tOS.InvalidateRect (handle, rect, true);", "-\t\t\t\t\t\t\tOS.OffsetRect (rect, deltaX, 0);", "-\t\t\t\t\t\t\tOS.InvalidateRect (handle, rect, true);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tint flags = OS.SW_INVALIDATE | OS.SW_ERASE;", "-\t\t\t\t\t\t\tOS.ScrollWindowEx (handle, deltaX, 0, rect, null, 0, null, flags);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (OS.SendMessage (hwndHeader, OS.HDM_ORDERTOINDEX, phdn.iItem, 0) != 0) {", "-\t\t\t\t\t\t\trect.left = headerRect.left;", "-\t\t\t\t\t\t\trect.right = newX;", "-\t\t\t\t\t\t\tOS.InvalidateRect (handle, rect, true);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tsetScrollWidth ();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.HDN_ITEMCHANGEDW:", "-\t\t\tcase OS.HDN_ITEMCHANGEDA: {", "-\t\t\t\tNMHEADER phdn = new NMHEADER ();", "-\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "-\t\t\t\tif (phdn.pitem != 0) {", "-\t\t\t\t\tHDITEM pitem = new HDITEM ();", "-\t\t\t\t\tOS.MoveMemory (pitem, phdn.pitem, HDITEM.sizeof);", "-\t\t\t\t\tif ((pitem.mask & OS.HDI_WIDTH) != 0) {", "-\t\t\t\t\t\tif (ignoreColumnMove) {", "-\t\t\t\t\t\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "-\t\t\t\t\t\t\t\tint flags = OS.RDW_UPDATENOW | OS.RDW_ALLCHILDREN;", "-\t\t\t\t\t\t\t\tOS.RedrawWindow (handle, null, 0, flags);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tif ((style & SWT.DOUBLE_BUFFERED) == 0) {", "-\t\t\t\t\t\t\t\t\tint oldStyle = style;", "-\t\t\t\t\t\t\t\t\tstyle |= SWT.DOUBLE_BUFFERED;", "-\t\t\t\t\t\t\t\t\tOS.UpdateWindow (handle);", "-\t\t\t\t\t\t\t\t\tstyle = oldStyle;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tTreeColumn column = columns [phdn.iItem];", "-\t\t\t\t\t\tif (column != null) {", "-\t\t\t\t\t\t\tcolumn.updateToolTip (phdn.iItem);", "-\t\t\t\t\t\t\tcolumn.sendEvent (SWT.Resize);", "-\t\t\t\t\t\t\tif (isDisposed ()) return LRESULT.ZERO;\t", "-\t\t\t\t\t\t\tint count = (int)/*64*/OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "-\t\t\t\t\t\t\tTreeColumn [] newColumns = new TreeColumn [count];", "-\t\t\t\t\t\t\tSystem.arraycopy (columns, 0, newColumns, 0, count);", "-\t\t\t\t\t\t\tint [] order = new int [count];", "-\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETORDERARRAY, count, order);", "-\t\t\t\t\t\t\tboolean moved = false;", "-\t\t\t\t\t\t\tfor (int i=0; i<count; i++) {", "-\t\t\t\t\t\t\t\tTreeColumn nextColumn = newColumns [order [i]];", "-\t\t\t\t\t\t\t\tif (moved && !nextColumn.isDisposed ()) {", "-\t\t\t\t\t\t\t\t\tnextColumn.updateToolTip (order [i]);", "-\t\t\t\t\t\t\t\t\tnextColumn.sendEvent (SWT.Move);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (nextColumn == column) moved = true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tsetScrollWidth ();", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.HDN_ITEMCLICKW:", "-\t\t\tcase OS.HDN_ITEMCLICKA: {", "-\t\t\t\tNMHEADER phdn = new NMHEADER ();", "-\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "-\t\t\t\tTreeColumn column = columns [phdn.iItem];", "-\t\t\t\tif (column != null) {", "-\t\t\t\t\tcolumn.postEvent (SWT.Selection);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.HDN_ITEMDBLCLICKW:      ", "-\t\t\tcase OS.HDN_ITEMDBLCLICKA: {", "-\t\t\t\tNMHEADER phdn = new NMHEADER ();", "-\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "-\t\t\t\tTreeColumn column = columns [phdn.iItem];", "-\t\t\t\tif (column != null) {", "-\t\t\t\t\tcolumn.postEvent (SWT.DefaultSelection);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "+\t\tLRESULT result = wmNotifyHeader (hdr, wParam, lParam);", "+\t\tif (result != null) return result;"]}], "num": 2858}
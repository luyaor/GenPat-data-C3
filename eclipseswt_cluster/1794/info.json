{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f712b37b541c1b58b1fac22fd943bec9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b90496639248323eb5f6211e772890f1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 54, "signatureBeforeChange": " void initialize()", "signatureAfterChange": " static void initImages (final Display display)", "diff": ["+}", "+static void initImages (final Display display) {", "+\tPaletteData checkMarkPalette = new PaletteData (\t", "+\t\tnew RGB[] {new RGB (0, 0, 0), new RGB (252, 3, 251)});", "+\tbyte[] checkbox = new byte[] {0, 0, 127, -64, 127, -64, 127, -64, 127, -64, 127, -64, 127, -64, 127, -64, 127, -64, 127, -64, 0, 0};", "+\tImageData checkmark = new ImageData (7, 7, 1, checkMarkPalette, 1, new byte[] {-4, -8, 112, 34, 6, -114, -34});", "+\tcheckmark.transparentPixel = 1;", "+\tif (display.getData (ID_CHECKMARK) == null) {", "+\t\tdisplay.setData (ID_CHECKMARK, new Image (display, checkmark));", "+\t}", "+\t", "+\tif (display.getData (ID_UNCHECKED) == null) {", "+\t\tPaletteData uncheckedPalette = new PaletteData (\t", "+\t\t\tnew RGB[] {new RGB (128, 128, 128), new RGB (255, 255, 255)});", "+\t\tImageData unchecked = new ImageData (11, 11, 1, uncheckedPalette, 2, checkbox);", "+\t\tdisplay.setData (ID_UNCHECKED, new Image (display, unchecked));", "+\t}", "+\t", "+\tif (display.getData (ID_GRAYUNCHECKED) == null) {", "+\t\tPaletteData grayUncheckedPalette = new PaletteData (\t", "+\t\t\tnew RGB[] {new RGB (128, 128, 128), new RGB (192, 192, 192)});", "+\t\tImageData grayUnchecked = new ImageData (11, 11, 1, grayUncheckedPalette, 2, checkbox);", "+\t\tdisplay.setData (ID_GRAYUNCHECKED, new Image (display, grayUnchecked));", "+\t}", "+", "+\tdisplay.disposeExec (new Runnable () {", "+\t\tpublic void run() {", "+\t\t\tImage unchecked = (Image) display.getData (ID_UNCHECKED);", "+\t\t\tif (unchecked != null) unchecked.dispose ();", "+\t\t\tImage grayUnchecked = (Image) display.getData (ID_GRAYUNCHECKED);", "+\t\t\tif (grayUnchecked != null) grayUnchecked.dispose ();", "+\t\t\tImage checkmark = (Image) display.getData (ID_CHECKMARK);", "+\t\t\tif (checkmark != null) checkmark.dispose ();", "+", "+\t\t\tdisplay.setData (ID_UNCHECKED, null);", "+\t\t\tdisplay.setData (ID_GRAYUNCHECKED, null);", "+\t\t\tdisplay.setData (ID_CHECKMARK, null);", "+\t\t}", "+\t});", "+}", "- */", "-void initialize() {", "-\tcolumns = new Vector();", "-\tsetItemVector(new Vector());", "-\tGC gc = new GC(this);", "-\tPoint extent = gc.stringExtent(\"String\");", "-\tfontHeight = extent.y;", "-\tgc.dispose();", "-\ttableHeader = new Header(this);", "-\ttableHeader.setVisible(false);\t\t\t\t\t// SWT table header is invisible by default, too", "-\tfillColumn = TableColumn.createFillColumn(this);", "-\tsetColumnPosition(fillColumn);", "-\tdefaultColumn = TableColumn.createDefaultColumn(this);\t// Create the default column. Fix for 1FUSJY5\t", "-\tsuper.initialize();", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdd8a4e1b5f374a872bf46f270e4a072", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java", "commitBeforeChange": "fe260d54c4731861d4b67096b0a0278dfb8bbb94", "commitAfterChange": "4102fdcf3ccacda6c1d64a2cea030a4503d7a339", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void test_ConstructorIIILorg_eclipse_swt_graphics_PaletteDataI$B()", "signatureAfterChange": "  public void test_ConstructorIIILorg_eclipse_swt_graphics_PaletteDataI$B()", "diff": ["+\tbyte[] validData = new byte[] {0, 0x4f, 0x4f, 0};", "+\t", "-\t\tnew ImageData(-1, 1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {});", "+\t\tnew ImageData(-1, 1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, validData);", "-\t\tnew ImageData(1, -1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {});", "+\t\tnew ImageData(1, -1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, validData);", "-\t\tnew ImageData(1, 1, 1, null, 0, new byte[] {});", "+\t\tnew ImageData(1, 1, 1, null, 0, validData);", "-\t\tnew ImageData(1, 1, 3, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {});", "+\t\tnew ImageData(1, 1, 1, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {});", "+\t\tfail(\"No exception thrown for data array too small\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\ttry {", "+\t\tnew ImageData(1, 1, 16, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {0x4f});", "+\t\tfail(\"No exception thrown for data array too small\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\ttry {", "+\t\tnew ImageData(1, 1, 32, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {0x4f, 0x4f});", "+\t\tfail(\"No exception thrown for data array too small\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\ttry {", "+\t\tnew ImageData(2, 2, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {0x4f, 0x4f, 0x4f});", "+\t\tfail(\"No exception thrown for data array too small\");", "+\t} catch (IllegalArgumentException e) {", "+\t}", "+", "+\ttry {", "+\t\tnew ImageData(1, 1, 3, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, validData);", "+\t// verify all valid depths", "-\t\tnew ImageData(1, 1, validDepths[i], new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, new byte[] {});", "+\t\tnew ImageData(1, 1, validDepths[i], new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 1, validData);", "-\t// illegal argument, data is null", "+\t// verify no divide by zero exception if scanlinePad == 0", "-\t\tnew ImageData(1, 1, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 4, null);", "-\t\tfail(\"No exception thrown for null data\");", "-\t} catch (IllegalArgumentException e) {", "-\t}", "-\t", "-\t// divide by zero exception if scanlinePad == 0", "-\ttry {", "-\t\tnew ImageData(1, 1, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 0, new byte[] {});", "+\t\tnew ImageData(1, 1, 8, new PaletteData(new RGB[] {new RGB(0, 0, 0)}), 0, validData);"]}], "num": 1794}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "59da870a3e8a003364b6e7b69d4f38dc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2b8090b3f8393e93bc118d4c9d4f606e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "70b3c05a26d1ba0b79fb3867745857a6ef7b0bdd", "commitAfterChange": "79a568b5fdc1ca6bf2c553d9a3775288be090ca1", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tPoint size = computeNativeSize (handle, wHint, hHint, changed);", "+\tPoint size;", "+\tboolean wrap = labelHandle != 0 && (style & SWT.WRAP) != 0 && (OS.GTK_WIDGET_FLAGS (labelHandle) & OS.GTK_VISIBLE) != 0;", "+\tif (wrap) {", "+\t\tint borderWidth = OS.gtk_container_get_border_width (handle);", "+\t\tint[] focusWidth = new int[1];", "+\t\tOS.gtk_widget_style_get (handle, OS.focus_line_width, focusWidth, 0);", "+\t\tint[] focusPadding = new int[1];", "+\t\tOS.gtk_widget_style_get (handle, OS.focus_padding, focusPadding, 0);", "+\t\tint trimWidth = 2 * (borderWidth + focusWidth [0] + focusPadding [0]), trimHeight = trimWidth;", "+\t\tint indicatorHeight = 0;", "+\t\tif ((style & (SWT.CHECK | SWT.RADIO)) != 0) {", "+\t\t\tint[] indicatorSize = new int[1];", "+\t\t\tOS.gtk_widget_style_get (handle, OS.indicator_size, indicatorSize, 0);", "+\t\t\tint[] indicatorSpacing = new int[1];", "+\t\t\tOS.gtk_widget_style_get (handle, OS.indicator_spacing, indicatorSpacing, 0);", "+\t\t\tindicatorHeight = indicatorSize [0] + 2 * indicatorSpacing [0];", "+\t\t\ttrimWidth += indicatorHeight + indicatorSpacing [0];", "+\t\t} else {", "+\t\t\tint /*long*/ style = OS.gtk_widget_get_style (handle);", "+\t\t\ttrimWidth += OS.gtk_style_get_xthickness (style) * 2;", "+\t\t\ttrimHeight += OS.gtk_style_get_ythickness (style) * 2;", "+\t\t\tGtkBorder innerBorder = getBorder (OS.inner_border, handle, INNER_BORDER);", "+\t\t\ttrimWidth += innerBorder.left + innerBorder.right;", "+\t\t\ttrimHeight += innerBorder.top + innerBorder.bottom;", "+\t\t\tif ((OS.GTK_WIDGET_FLAGS (handle) & OS.GTK_CAN_DEFAULT) != 0) {", "+\t\t\t\tGtkBorder defaultBorder = getBorder (OS.default_border, handle, DEFAULT_BORDER);", "+\t\t\t\ttrimWidth += defaultBorder.left + defaultBorder.right;", "+\t\t\t\ttrimHeight += defaultBorder.top + defaultBorder.bottom;", "+\t\t\t}", "+\t\t}", "+\t\tint imageWidth = 0, imageHeight = 0;", "+\t\tif (OS.GTK_WIDGET_VISIBLE (imageHandle)) {", "+\t\t\tGtkRequisition requisition = new GtkRequisition ();", "+\t\t\tOS.gtk_widget_size_request (imageHandle, requisition);", "+\t\t\timageWidth = requisition.width;", "+\t\t\timageHeight = requisition.height;", "+\t\t\tint [] spacing = new int [1];", "+\t\t\tOS.g_object_get (boxHandle, OS.spacing, spacing, 0);", "+\t\t\timageWidth += spacing [0];", "+\t\t}", "+\t\tint /*long*/ labelLayout = OS.gtk_label_get_layout (labelHandle);", "+\t\tint pangoWidth = OS.pango_layout_get_width (labelLayout);", "+\t\tif (wHint != SWT.DEFAULT) {", "+\t\t\tOS.pango_layout_set_width (labelLayout, Math.max (1, (wHint - imageWidth - trimWidth)) * OS.PANGO_SCALE);", "+\t\t} else {", "+\t\t\tOS.pango_layout_set_width (labelLayout, -1);", "+\t\t}", "+\t\tint [] w = new int [1], h = new int [1];", "+\t\tOS.pango_layout_get_size (labelLayout, w, h);", "+\t\tOS.pango_layout_set_width (labelLayout, pangoWidth);", "+\t\tsize = new Point(0, 0);", "+\t\tsize.x += wHint == SWT.DEFAULT ? OS.PANGO_PIXELS(w [0]) + imageWidth + trimWidth : wHint;", "+\t\tsize.y += hHint == SWT.DEFAULT ? Math.max(Math.max(imageHeight, indicatorHeight), OS.PANGO_PIXELS(h [0])) + trimHeight : hHint;", "+\t} else {", "+\t\tsize = computeNativeSize (handle, wHint, hHint, changed);", "+\t}", "-\t\t\tint /*long*/ [] buffer = new int /*long*/ [1];", "-\t\t\tGtkBorder border = new GtkBorder ();", "-\t\t\tOS.gtk_widget_style_get (handle, OS.default_border, buffer, 0);", "-\t\t\tif (buffer[0] != 0) {", "-\t\t\t\tOS.memmove (border, buffer[0], GtkBorder.sizeof);", "-\t\t\t} else {", "-\t\t\t\t/* Use the GTK+ default value of 1 for each. */", "-\t\t\t\tborder.left = border.right = border.top = border.bottom = 1;", "-\t\t\t}", "+\t\t\tGtkBorder border = getBorder (OS.default_border, handle, DEFAULT_BORDER);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41b7a28c0db0e7677968b7c8b1c1f7cb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "bcbab027b782a219051696a27ecb1edbc29136c2", "commitAfterChange": "e7b19311f8b1c1c9ab3f1840b1542b88b76728a7", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tboolean fixWrap = labelHandle != 0 && (style & SWT.WRAP) != 0;", "-\tif (fixWrap || frameHandle != 0) forceResize ();", "-\tint [] labelWidth = new int [1], labelHeight = new int [1];", "-\tif (fixWrap) {", "-\t\tOS.gtk_widget_get_size_request (labelHandle, labelWidth, labelHeight);", "-\t\tOS.gtk_widget_set_size_request (labelHandle, wHint, hHint);", "-\t}\t", "-\tif (frameHandle != 0) {", "-\t\tint [] reqWidth = new int [1], reqHeight = new int [1];", "-\t\tOS.gtk_widget_get_size_request (handle, reqWidth, reqHeight);", "-\t\tOS.gtk_widget_set_size_request (handle, wHint, hHint);", "-\t\tsize = computeNativeSize (frameHandle, -1, -1, changed);", "-\t\tOS.gtk_widget_set_size_request (handle, reqWidth [0], reqHeight [0]);", "-\t} else {", "-\t\tsize = computeNativeSize (handle, wHint, hHint, changed);", "-\t}", "+\t/* ", "+\t* Feature in GTK. GTK has a predetermined maximum width for wrapping text. ", "+\t* The fix is to use pango layout directly instead of the label size request ", "+\t* to calculate its preferred size.", "+\t*/", "+\tboolean fixWrap = labelHandle != 0 && (style & SWT.WRAP) != 0 && (OS.GTK_WIDGET_FLAGS (labelHandle) & OS.GTK_VISIBLE) != 0;", "-\t\tOS.gtk_widget_set_size_request (labelHandle, labelWidth [0], labelHeight [0]);", "+\t\tint /*long*/ labelLayout = OS.gtk_label_get_layout (labelHandle);", "+\t\tint pangoWidth = OS.pango_layout_get_width (labelLayout);", "+\t\tif (wHint != SWT.DEFAULT) {", "+\t\t\tOS.pango_layout_set_width (labelLayout, wHint * OS.PANGO_SCALE);", "+\t\t} else {", "+\t\t\tOS.pango_layout_set_width (labelLayout, -1);", "+\t\t}", "+\t\tint [] w = new int [1], h = new int [1];", "+\t\tOS.pango_layout_get_size (labelLayout, w, h);", "+\t\tOS.pango_layout_set_width (labelLayout, pangoWidth);", "+\t\tif (frameHandle != 0) {", "+\t\t\tint [] labelWidth = new int [1], labelHeight = new int [1];", "+\t\t\tOS.gtk_widget_get_size_request (labelHandle, labelWidth, labelHeight);", "+\t\t\tOS.gtk_widget_set_size_request (labelHandle, 1, 1);", "+\t\t\tsize = computeNativeSize (frameHandle, -1, -1, changed);", "+\t\t\tOS.gtk_widget_set_size_request (labelHandle, labelWidth [0], labelHeight [0]);", "+\t\t\tsize.x = size.x - 1;", "+\t\t\tsize.y = size.y - 1;", "+\t\t} else { ", "+\t\t\tsize = new Point (0,0);", "+\t\t}", "+\t\tsize.x += wHint == SWT.DEFAULT ? OS.PANGO_PIXELS(w [0]) : wHint;", "+\t\tsize.y += hHint == SWT.DEFAULT ? OS.PANGO_PIXELS(h [0]) : hHint;", "+\t} else {", "+\t\tif (frameHandle != 0) {", "+\t\t\tint [] reqWidth = new int [1], reqHeight = new int [1];", "+\t\t\tOS.gtk_widget_get_size_request (handle, reqWidth, reqHeight);", "+\t\t\tOS.gtk_widget_set_size_request (handle, wHint, hHint);", "+\t\t\tsize = computeNativeSize (frameHandle, -1, -1, changed);", "+\t\t\tOS.gtk_widget_set_size_request (handle, reqWidth [0], reqHeight [0]);", "+\t\t} else {", "+\t\t\tsize = computeNativeSize (handle, wHint, hHint, changed);", "+\t\t}"]}], "num": 57500}
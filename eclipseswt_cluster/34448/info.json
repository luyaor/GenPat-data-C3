{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db34cf964c4ec6c15b0006d90e33ee0b", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28a4edc9840bcea8fe097d45b9fa6d60", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "2f862f00166fcf6199c86ef2db5918eea6feae6a", "commitAfterChange": "8619e947eac7fa56991129fea0c5b3d12c3121b0", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  public Rectangle computeTrim (int x, int y, int width, int height)", "signatureAfterChange": "  public Rectangle computeTrim (int x, int y, int width, int height)", "diff": ["-\t\tif ((style & SWT.BORDER) != 0) {", "-\t\t\tPoint thickness = getThickness (handle);", "-\t\t\txborder += thickness.x;", "-\t\t\tyborder += thickness.y;", "+\t\tif (OS.GTK3) {", "+\t\t\tGtkBorder tmp = new GtkBorder();", "+\t\t\tlong /*int*/ context = OS.gtk_widget_get_style_context (handle);", "+\t\t\tOS.gtk_style_context_get_padding (context, OS.GTK_STATE_FLAG_NORMAL, tmp);", "+\t\t\ttrim.x -= tmp.left;", "+\t\t\ttrim.y -= tmp.top;", "+\t\t\ttrim.width += tmp.left + tmp.right;", "+\t\t\ttrim.height += tmp.top + tmp.bottom;", "+\t\t\tif ((style & SWT.BORDER) != 0) {", "+\t\t\t\tOS.gtk_style_context_get_border (context, OS.GTK_STATE_FLAG_NORMAL, tmp);", "+\t\t\t\ttrim.x -= tmp.left;", "+\t\t\t\ttrim.y -= tmp.top;", "+\t\t\t\ttrim.width += tmp.left + tmp.right;", "+\t\t\t\ttrim.height += tmp.top + tmp.bottom;", "+\t\t\t}", "+\t\t\tGdkRectangle icon_area = new GdkRectangle();", "+\t\t\tOS.gtk_entry_get_icon_area(handle, OS.GTK_ENTRY_ICON_PRIMARY, icon_area);", "+\t\t\ttrim.x -= icon_area.width;", "+\t\t\ttrim.width += icon_area.width;", "+\t\t\tOS.gtk_entry_get_icon_area(handle, OS.GTK_ENTRY_ICON_SECONDARY, icon_area);", "+\t\t\ttrim.width += icon_area.width;", "+\t\t} else {", "+\t\t\tif ((style & SWT.BORDER) != 0) {", "+\t\t\t\tPoint thickness = getThickness (handle);", "+\t\t\t\txborder += thickness.x;", "+\t\t\t\tyborder += thickness.y;", "+\t\t\t}", "+\t\t\tGtkBorder innerBorder = Display.getEntryInnerBorder (handle);", "+\t\t\ttrim.x -= innerBorder.left;", "+\t\t\ttrim.y -= innerBorder.top;", "+\t\t\ttrim.width += innerBorder.left + innerBorder.right;", "+\t\t\ttrim.height += innerBorder.top + innerBorder.bottom;", "-\t\tGtkBorder innerBorder = Display.getEntryInnerBorder (handle);", "-\t\ttrim.x -= innerBorder.left;", "-\t\ttrim.y -= innerBorder.top;", "-\t\ttrim.width += innerBorder.left + innerBorder.right;", "-\t\ttrim.height += innerBorder.top + innerBorder.bottom;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e46e107f9e4c3639e9fd843059fef8c3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  void drawFocus (int control, boolean hasFocus, boolean hasBorder, float[] background, Rect inset)", "signatureAfterChange": "  void drawFocus (int control, int context, boolean hasFocus, boolean hasBorder, float[] background, Rect inset)", "diff": ["-void drawFocus (int control, boolean hasFocus, boolean hasBorder, float[] background, Rect inset) {", "-\tdrawBackground (control, background);", "-\tRect rect = new Rect ();", "-\tOS.GetControlBounds (control, rect);", "-\trect.left += inset.left;", "-\trect.top += inset.top;", "-\trect.right -= inset.right;", "-\trect.bottom -= inset.bottom;", "-\tint state;", "-\tif (OS.IsControlEnabled (control)) {", "-\t\tstate = OS.IsControlActive (control) ? OS.kThemeStateActive : OS.kThemeStateInactive;", "+void drawFocus (int control, int context, boolean hasFocus, boolean hasBorder, float[] background, Rect inset) {", "+\tdrawBackground (control, context, background);", "+\tif (OS.HIVIEW) {", "+\t\tCGRect rect = new CGRect ();", "+\t\tOS.HIViewGetBounds (control, rect);", "+\t\trect.x += inset.left;", "+\t\trect.y += inset.top;", "+\t\trect.width -= inset.right + inset.left;", "+\t\trect.height -= inset.bottom + inset.top;", "+\t\tint state;", "+\t\tif (OS.IsControlEnabled (control)) {", "+\t\t\tstate = OS.IsControlActive (control) ? OS.kThemeStateActive : OS.kThemeStateInactive;", "+\t\t} else {", "+\t\t\tstate = OS.IsControlActive (control) ? OS.kThemeStateUnavailable : OS.kThemeStateUnavailableInactive;", "+\t\t}", "+\t\tif (hasBorder) {", "+\t\t\tHIThemeFrameDrawInfo info = new HIThemeFrameDrawInfo ();", "+\t\t\tinfo.state = state;", "+\t\t\tinfo.kind = OS.kHIThemeFrameTextFieldSquare;", "+\t\t\tinfo.isFocused = hasFocus;", "+\t\t\tOS.HIThemeDrawFrame (rect, info, context, OS.kHIThemeOrientationNormal);", "+\t\t} else {", "+\t\t\tOS.HIThemeDrawFocusRect (rect, hasFocus, context, OS.kHIThemeOrientationNormal);", "+\t\t}", "-\t\tstate = OS.IsControlActive (control) ? OS.kThemeStateUnavailable : OS.kThemeStateUnavailableInactive;", "-\t}", "-\tif (hasFocus) {", "-\t\tif (hasBorder) OS.DrawThemeEditTextFrame (rect, state);", "-\t\tOS.DrawThemeFocusRect (rect, true);", "-\t} else {", "-\t\t/*", "-\t\t* This code is intentionaly commented.", "-\t\t*  ", "-\t\t* NOTE: the focus ring is erased by drawBackground() above. ", "-\t\t*/", "-//\t\tOS.DrawThemeFocusRect (rect, false);", "-\t\tif (hasBorder) OS.DrawThemeEditTextFrame (rect, state);", "+\t\tRect rect = new Rect ();", "+\t\tOS.GetControlBounds (control, rect);", "+\t\trect.left += inset.left;", "+\t\trect.top += inset.top;", "+\t\trect.right -= inset.right;", "+\t\trect.bottom -= inset.bottom;", "+\t\tint state;", "+\t\tif (OS.IsControlEnabled (control)) {", "+\t\t\tstate = OS.IsControlActive (control) ? OS.kThemeStateActive : OS.kThemeStateInactive;", "+\t\t} else {", "+\t\t\tstate = OS.IsControlActive (control) ? OS.kThemeStateUnavailable : OS.kThemeStateUnavailableInactive;", "+\t\t}", "+\t\tif (hasFocus) {", "+\t\t\tif (hasBorder) OS.DrawThemeEditTextFrame (rect, state);", "+\t\t\tOS.DrawThemeFocusRect (rect, true);", "+\t\t} else {", "+\t\t\t/*", "+\t\t\t* This code is intentionaly commented.", "+\t\t\t*  ", "+\t\t\t* NOTE: the focus ring is erased by drawBackground() above. ", "+\t\t\t*/", "+\t//\t\tOS.DrawThemeFocusRect (rect, false);", "+\t\t\tif (hasBorder) OS.DrawThemeEditTextFrame (rect, state);", "+\t\t}"]}], "num": 34448}
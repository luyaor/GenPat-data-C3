{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f8d32da2d73cee88ce47f4b677e6363", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62eabf534ad5a4be726a33d5353c6c26", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java", "commitBeforeChange": "64e9a4662d5ee1366bb01b063ce64ecaba503377", "commitAfterChange": "7683ad9d7558bf01ab5bf83132a2368b5303306f", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": " \tString dataHexDump(String lineDelimiter)", "signatureAfterChange": " \tString dataHexDump(String lineDelimiter)", "diff": ["-\t\treturn new String(dump);", "+\t\tString result = \"\";", "+\t\ttry {", "+\t\t\tresult = new String(dump);", "+\t\t} catch (OutOfMemoryError e) {", "+\t\t\t/* Too much data to display in the text widget - truncate at 4M. */", "+\t\t\tresult = new String(dump, 0, 4 * 1024 * 1024) + \"\\n ...data dump truncated at 4M...\";", "+\t\t}", "+\t\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e852929adf966ea5b45ce0157e7273e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/gtk/org/eclipse/swt/browser/WebKit.java", "commitBeforeChange": "aca4917418214d96ac9b7a43bec740f7e4be9d3a", "commitAfterChange": "9016fc6598a59f4dfa82d3b23dcc770ade756add", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  public boolean setUrl (String url, String postData, String[] headers)", "signatureAfterChange": "  public boolean setUrl (String url, String postData, String[] headers)", "diff": ["+", "-\t* WebKit attempts to open the exact url string that is given to it, and", "-\t* will not infer an http protocol if it's not specified.  Detect the case", "-\t* of a non-local file and prepend the http:// protocol if it's needed.   ", "+\t* WebKitGTK attempts to open the exact url string that is passed to it and", "+\t* will not infer a protocol if it's not specified.  Detect the case of an", "+\t* invalid URL string and try to fix it by prepending an appropriate protocol.", "-\tif (url.charAt (0) != SEPARATOR_FILE) {", "-\t\t/* not a local file */", "+\ttry {", "+\t\tnew URL(url);", "+\t} catch (MalformedURLException e) {", "+\t\tString testUrl = null;", "+\t\tif (url.charAt (0) == SEPARATOR_FILE) {", "+\t\t\t/* appears to be a local file */", "+\t\t\ttestUrl = PROTOCOL_FILE + url; ", "+\t\t} else {", "+\t\t\ttestUrl = PROTOCOL_HTTP + url;", "+\t\t}", "-\t\t\tnew URL(url);", "-\t\t} catch (MalformedURLException e) {", "-\t\t\turl = PROTOCOL_HTTP + url;", "+\t\t\tnew URL (testUrl);", "+\t\t\turl = testUrl;\t\t/* adding the protocol made the url valid */", "+\t\t} catch (MalformedURLException e2) {", "+\t\t\t/* adding the protocol did not make the url valid, so do nothing */"]}], "num": 60991}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c630c26356a8b0d0e17886abf2d1d8da", "detectedBy": ["DIFF_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "52ed4b99797ce159aafc7d2a603906ae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 10, "signatureBeforeChange": "\t  \tstatic int atkComponent_get_extents (int atkObject, int x, int y, int width, int height, int coord_type)", "signatureAfterChange": "  \tstatic int atkComponent_get_extents (int atkObject, int x, int y, int width, int height, int coord_type)", "diff": ["-\t\tif (object == null) return 0;", "-\t\tif (ATK.g_type_is_a (object.parentType, ATK_COMPONENT_TYPE)) {", "-\t\t\tint /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));", "-\t\t\tAtkComponentIface componentIface = new AtkComponentIface ();", "-\t\t\tATK.memmove (componentIface, superType);", "-\t\t\tif (componentIface.get_extents != 0) {", "-\t\t\t\tATK.call (componentIface.get_extents, object.handle, x, y, width, height, coord_type);", "+\t\tAtkComponentIface iface = getComponentIface (atkObject);", "+\t\tif (iface != null && iface.get_extents != 0) {", "+\t\t\tATK.call (iface.get_extents, atkObject, x, y, width, height, coord_type);", "+\t\t}", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleControlListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tint[] parentX = new int [1], parentY = new int [1];", "+\t\t\t\tint[] parentWidth = new int [1], parentHeight = new int [1];", "+\t\t\t\tOS.memmove (parentX, x, 4);", "+\t\t\t\tOS.memmove (parentY, y, 4);", "+\t\t\t\tOS.memmove (parentWidth, width, 4);", "+\t\t\t\tOS.memmove (parentHeight, height, 4);", "+\t\t\t\tAccessibleControlEvent event = new AccessibleControlEvent (object.accessible);", "+\t\t\t\tevent.childID = object.id;", "+\t\t\t\tevent.x = parentX [0]; event.y = parentY [0];", "+\t\t\t\tevent.width = parentWidth [0]; event.height = parentHeight [0];", "+\t\t\t\tif (coord_type == ATK.ATK_XY_WINDOW) {", "+\t\t\t\t\t/* translate control -> display, for filling in event to be dispatched */", "+\t\t\t\t\tint /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (atkObject);", "+\t\t\t\t\tGtkAccessible gtkAccessible = new GtkAccessible ();", "+\t\t\t\t\tATK.memmove (gtkAccessible, gtkAccessibleHandle);", "+\t\t\t\t\tint /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);", "+\t\t\t\t\tint /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);\t\t\t\t", "+\t\t\t\t\tint[] topWindowX = new int [1], topWindowY = new int [1];", "+\t\t\t\t\tOS.gdk_window_get_origin (window, topWindowX, topWindowY);", "+\t\t\t\t\tevent.x += topWindowX [0];", "+\t\t\t\t\tevent.y += topWindowY [0]; ", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener)listeners.elementAt (i);", "+\t\t\t\t\tlistener.getLocation (event);", "+\t\t\t\t}", "+\t\t\t\tif (coord_type == ATK.ATK_XY_WINDOW) {", "+\t\t\t\t\t/* translate display -> control, for answering to the OS */ ", "+\t\t\t\t\tint /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (atkObject);", "+\t\t\t\t\tGtkAccessible gtkAccessible = new GtkAccessible ();", "+\t\t\t\t\tATK.memmove (gtkAccessible, gtkAccessibleHandle);", "+\t\t\t\t\tint /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);", "+\t\t\t\t\tint /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);", "+\t\t\t\t\tint[] topWindowX = new int [1], topWindowY = new int [1];", "+\t\t\t\t\tOS.gdk_window_get_origin (window, topWindowX, topWindowY);", "+\t\t\t\t\tevent.x -= topWindowX [0];", "+\t\t\t\t\tevent.y -= topWindowY [0];", "+\t\t\t\t}", "+\t\t\t\tOS.memmove (x, new int[] {event.x}, 4);", "+\t\t\t\tOS.memmove (y, new int[] {event.y}, 4);", "+\t\t\t\tOS.memmove (width, new int[] {event.width}, 4);", "+\t\t\t\tOS.memmove (height, new int[] {event.height}, 4);", "-\t\tAccessibleControlListener[] listeners = object.getControlListeners ();", "-\t\tif (listeners.length == 0) return 0;", "-\t\t", "-\t\tint[] parentX = new int [1], parentY = new int [1];", "-\t\tint[] parentWidth = new int [1], parentHeight = new int [1];", "-\t\tOS.memmove (parentX, x, 4);", "-\t\tOS.memmove (parentY, y, 4);", "-\t\tOS.memmove (parentWidth, width, 4);", "-\t\tOS.memmove (parentHeight, height, 4);", "-\t\tAccessibleControlEvent event = new AccessibleControlEvent (object.accessible);", "-\t\tevent.childID = object.id;", "-\t\tevent.x = parentX [0]; event.y = parentY [0];", "-\t\tevent.width = parentWidth [0]; event.height = parentHeight [0];", "-\t\tif (coord_type == ATK.ATK_XY_WINDOW) {", "-\t\t\t/* translate control -> display, for filling in event to be dispatched */", "-\t\t\tint /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);", "-\t\t\tGtkAccessible gtkAccessible = new GtkAccessible ();", "-\t\t\tATK.memmove (gtkAccessible, gtkAccessibleHandle);", "-\t\t\tint /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);", "-\t\t\tint /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);\t\t\t\t", "-\t\t\tint[] topWindowX = new int [1], topWindowY = new int [1];", "-\t\t\tOS.gdk_window_get_origin (window, topWindowX, topWindowY);", "-\t\t\tevent.x += topWindowX [0];", "-\t\t\tevent.y += topWindowY [0]; ", "-\t\t}", "-\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\tlisteners [i].getLocation (event);", "-\t\t}", "-\t\tif (coord_type == ATK.ATK_XY_WINDOW) {", "-\t\t\t/* translate display -> control, for answering to the OS */ ", "-\t\t\tint /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);", "-\t\t\tGtkAccessible gtkAccessible = new GtkAccessible ();", "-\t\t\tATK.memmove (gtkAccessible, gtkAccessibleHandle);", "-\t\t\tint /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);", "-\t\t\tint /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);", "-\t\t\tint[] topWindowX = new int [1], topWindowY = new int [1];", "-\t\t\tOS.gdk_window_get_origin (window, topWindowX, topWindowY);", "-\t\t\tevent.x -= topWindowX [0];", "-\t\t\tevent.y -= topWindowY [0];", "-\t\t}", "-\t\tOS.memmove (x, new int[] {event.x}, 4);", "-\t\tOS.memmove (y, new int[] {event.y}, 4);", "-\t\tOS.memmove (width, new int[] {event.width}, 4);", "-\t\tOS.memmove (height, new int[] {event.height}, 4);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0e254e63eabb2471fb063bc403e2b27", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 11, "signatureBeforeChange": "  \tstatic int atkComponent_get_position (int atkObject, int x, int y, int coord_type)", "signatureAfterChange": "  \tstatic int atkComponent_get_position (int atkObject, int x, int y, int coord_type)", "diff": ["-\t\tif (object == null) return 0;", "-\t\tif (ATK.g_type_is_a (object.parentType, ATK_COMPONENT_TYPE)) {", "-\t\t\tint /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));", "-\t\t\tAtkComponentIface componentIface = new AtkComponentIface ();", "-\t\t\tATK.memmove (componentIface, superType);", "-\t\t\tif (componentIface.get_extents != 0) {", "-\t\t\t\tATK.call (componentIface.get_position, object.handle, x, y, coord_type);", "+\t\tAtkComponentIface iface = getComponentIface (atkObject);", "+\t\tif (iface != null && iface.get_position != 0) {", "+\t\t\tATK.call (iface.get_position, atkObject, x, y, coord_type);", "+\t\t}", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleControlListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tint[] parentX = new int [1], parentY = new int [1];", "+\t\t\t\tOS.memmove (parentX, x, 4);", "+\t\t\t\tOS.memmove (parentY, y, 4);", "+\t\t\t\tAccessibleControlEvent event = new AccessibleControlEvent (object.accessible);", "+\t\t\t\tevent.childID = object.id;", "+\t\t\t\tevent.x = parentX [0]; event.y = parentY [0];", "+\t\t\t\tif (coord_type == ATK.ATK_XY_WINDOW) {", "+\t\t\t\t\t/* translate control -> display, for filling in event to be dispatched */", "+\t\t\t\t\tint /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (atkObject);", "+\t\t\t\t\tGtkAccessible gtkAccessible = new GtkAccessible ();", "+\t\t\t\t\tATK.memmove (gtkAccessible, gtkAccessibleHandle);", "+\t\t\t\t\tint /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);", "+\t\t\t\t\tint /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);\t\t\t\t", "+\t\t\t\t\tint[] topWindowX = new int [1], topWindowY = new int [1];", "+\t\t\t\t\tOS.gdk_window_get_origin (window, topWindowX, topWindowY);", "+\t\t\t\t\tevent.x += topWindowX [0];", "+\t\t\t\t\tevent.y += topWindowY [0]; ", "+\t\t\t\t}", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener)listeners.elementAt (i);", "+\t\t\t\t\tlistener.getLocation (event);", "+\t\t\t\t}", "+\t\t\t\tif (coord_type == ATK.ATK_XY_WINDOW) {", "+\t\t\t\t\t/* translate display -> control, for answering to the OS */ ", "+\t\t\t\t\tint /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (atkObject);", "+\t\t\t\t\tGtkAccessible gtkAccessible = new GtkAccessible ();", "+\t\t\t\t\tATK.memmove (gtkAccessible, gtkAccessibleHandle);", "+\t\t\t\t\tint /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);", "+\t\t\t\t\tint /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);", "+\t\t\t\t\tint[] topWindowX = new int [1], topWindowY = new int [1];", "+\t\t\t\t\tOS.gdk_window_get_origin (window, topWindowX, topWindowY);", "+\t\t\t\t\tevent.x -= topWindowX [0];", "+\t\t\t\t\tevent.y -= topWindowY [0];", "+\t\t\t\t}", "+\t\t\t\tOS.memmove (x, new int[] {event.x}, 4);", "+\t\t\t\tOS.memmove (y, new int[] {event.y}, 4);", "-\t\tAccessibleControlListener[] listeners = object.getControlListeners ();", "-\t\tif (listeners.length == 0) return 0;", "-\t\t", "-\t\tint[] parentX = new int [1], parentY = new int [1];", "-\t\tOS.memmove (parentX, x, 4);", "-\t\tOS.memmove (parentY, y, 4);", "-\t\tAccessibleControlEvent event = new AccessibleControlEvent (object.accessible);", "-\t\tevent.childID = object.id;", "-\t\tevent.x = parentX [0]; event.y = parentY [0];", "-\t\tif (coord_type == ATK.ATK_XY_WINDOW) {", "-\t\t\t/* translate control -> display, for filling in event to be dispatched */", "-\t\t\tint /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);", "-\t\t\tGtkAccessible gtkAccessible = new GtkAccessible ();", "-\t\t\tATK.memmove (gtkAccessible, gtkAccessibleHandle);", "-\t\t\tint /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);", "-\t\t\tint /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);\t\t\t\t", "-\t\t\tint[] topWindowX = new int [1], topWindowY = new int [1];", "-\t\t\tOS.gdk_window_get_origin (window, topWindowX, topWindowY);", "-\t\t\tevent.x += topWindowX [0];", "-\t\t\tevent.y += topWindowY [0]; ", "-\t\t}", "-\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\tlisteners [i].getLocation (event);", "-\t\t}", "-\t\tif (coord_type == ATK.ATK_XY_WINDOW) {", "-\t\t\t/* translate display -> control, for answering to the OS */ ", "-\t\t\tint /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);", "-\t\t\tGtkAccessible gtkAccessible = new GtkAccessible ();", "-\t\t\tATK.memmove (gtkAccessible, gtkAccessibleHandle);", "-\t\t\tint /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);", "-\t\t\tint /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);", "-\t\t\tint[] topWindowX = new int [1], topWindowY = new int [1];", "-\t\t\tOS.gdk_window_get_origin (window, topWindowX, topWindowY);", "-\t\t\tevent.x -= topWindowX [0];", "-\t\t\tevent.y -= topWindowY [0];", "-\t\t}", "-\t\tOS.memmove (x, new int[] {event.x}, 4);", "-\t\tOS.memmove (y, new int[] {event.y}, 4);"]}], "num": 35418}
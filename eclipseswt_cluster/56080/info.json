{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d18aec251dfd6c00bd3e41948c621bd9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb485a69f659fe1083cc14f113de1cfa", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "28a7c9c62e09a440ce11f9081715d3867677550b", "commitAfterChange": "02960b509253479f2f1ee3befa7be0744f3ecf2f", "methodNumberBeforeChange": 169, "methodNumberAfterChange": 169, "signatureBeforeChange": "  LRESULT wmNotifyChild (NMHDR hdr, int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (NMHDR hdr, int wParam, int lParam)", "diff": ["-\t\t\t* When an item is being deleted from a virtual table, do not", "-\t\t\t* allow the application to provide data for a new item that", "-\t\t\t* becomes visible until the item has been removed from the", "-\t\t\t* items array.  Because arbitrary application code can run", "-\t\t\t* during the callback, the items array might be accessed", "-\t\t\t* in an inconsistent state.  Rather than answering the data", "-\t\t\t* right away, queue a redraw for later.", "+\t\t\t* Feature in Windows. On Vista, the list view expects the item array ", "+\t\t\t* to be up to date when a LVM_DELETEITEM message is being processed.", "+\t\t\t*  ", "+\t\t\t* Also, when the table is virtual, do not allow the application to ", "+\t\t\t* provide data for a new item that becomes visible until the item has", "+\t\t\t* been removed from the items array.  Because arbitrary application", "+\t\t\t* code can run during the callback, the items array might be accessed ", "+\t\t\t* in an inconsistent state.", "+\t\t\t*   ", "+\t\t\t* On both cases, Rather than answering the data right away, queue a ", "+\t\t\t* redraw for later.", "-\t\t\tif ((style & SWT.VIRTUAL) != 0 && !item.cached) {", "-\t\t\t\tif (ignoreShrink) {", "-\t\t\t\t\tOS.SendMessage (handle, OS.LVM_REDRAWITEMS, plvfi.iItem, plvfi.iItem);", "+\t\t\tif (ignoreShrink) {", "+\t\t\t\t/*", "+\t\t\t\t* Feature in Windows Vista and newer. Using LVM_REDRAWITEMS causes LVN_GETDISPINFO", "+\t\t\t\t* to be sent before the method returns. For this reason, LVM_REDRAWITEMS", "+\t\t\t\t* can never be used from a LVN_GETDISPINFO handler. The fix is to ", "+\t\t\t\t* InvalidateRect() passing the bounds for the entire item.", "+\t\t\t\t*/", "+\t\t\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\trect.left = OS.LVIR_BOUNDS;", "+\t\t\t\t\tignoreCustomDraw = true;", "+\t\t\t\t\tint /*long*/ code = OS.SendMessage (handle, OS. LVM_GETITEMRECT, plvfi.iItem, rect);", "+\t\t\t\t\tignoreCustomDraw = false;", "+\t\t\t\t\tif (code != 0) OS.InvalidateRect (handle, rect, true);", "+\t\t\t\t} else {", "+\t\t\t\t\tif ((style & SWT.VIRTUAL) != 0 && !item.cached) {", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_REDRAWITEMS, plvfi.iItem, plvfi.iItem);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "282b84a20c11de87a9409515301561dc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Group.java", "commitBeforeChange": "080b55c089b6da213622973bb9a887999c3981a8", "commitAfterChange": "e4c9aeb111236ba133197a761c1ece6393dd4ea5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public Rectangle computeTrim (int x, int y, int width, int height)", "signatureAfterChange": "  public Rectangle computeTrim (int x, int y, int width, int height)", "diff": ["-\tRect bounds = new Rect ();", "-\tOS.GetControlBounds (handle, bounds);", "+\tRect bounds, oldBounds = new Rect ();", "+\tOS.GetControlBounds (handle, oldBounds);", "+\tboolean fixBounds = (oldBounds.right - oldBounds.left) < 100 || (oldBounds.bottom - oldBounds.top) < 100;", "+\tif (fixBounds) {", "+\t\tbounds = new Rect ();", "+\t\tbounds.right = bounds.bottom = 100;", "+\t\tOS.SetControlBounds (handle, bounds);", "+\t} else {", "+\t\tbounds = oldBounds;", "+\t}", "+\tif (fixBounds) OS.SetControlBounds (handle, oldBounds);"]}], "num": 56080}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0290cacbecb7da8859ffd62ef2f23a7f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "484197845641252f9f0558842cae50f9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Display.java", "commitBeforeChange": "3ace99cc2cbeca175428eabbe777b2fc353f5d7d", "commitAfterChange": "38b0d2b8f58957af87b01bf2967bf37e853d55b0", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 48, "signatureBeforeChange": "  public void test_postLorg_eclipse_swt_widgets_Event()", "signatureAfterChange": "  public void test_postLorg_eclipse_swt_widgets_Event()", "diff": ["-\twarnUnimpl(\"Test test_postLorg_eclipse_swt_widgets_Event not written\");", "+\tboolean success;", "+\tfinal boolean verifiedEvent[] = new boolean[5];", "+\t", "+\tfinal int KEYUP = 0;", "+\tfinal int KEYDOWN = 1;", "+\tfinal int MOUSEUP = 2;", "+\tfinal int MOUSEDOWN = 3;", "+\tfinal int MOUSEMOVE = 4;", "+\tfinal int CHARACTER = ' '; \t// space character works both in bidi language and western", "+\t", "+\tDisplay display = new Display();", "+\ttry {", "+\t\ttry {", "+\t\t\tdisplay.post(null);", "+\t\t\tfail(\"No exception thrown for post with null argument\");", "+\t\t} catch (IllegalArgumentException e) {", "+\t\t\tassertEquals(\"Incorrect exception thrown for post with null argument\", SWT.ERROR_NULL_ARGUMENT, e);", "+\t\t}", "+\t\t", "+\t\tShell shell = new Shell(display, SWT.NO_TRIM);", "+\t\tshell.setBounds(display.getBounds());", "+\t\tshell.open();", "+\t\t", "+\t\tshell.addKeyListener(new KeyListener() {", "+\t\t\tpublic void keyPressed(KeyEvent e) {", "+\t\t\t\tif (e.character == CHARACTER)", "+\t\t\t\t\tverifiedEvent[KEYDOWN] = true;", "+\t\t\t}", "+\t\t\t", "+\t\t\tpublic void keyReleased(KeyEvent e) {", "+\t\t\t\tif (e.keyCode == SWT.F5)", "+\t\t\t\t\tverifiedEvent[KEYUP] = true;", "+\t\t\t}", "+\t\t});", "+\t\tshell.addMouseListener(new MouseListener() {", "+\t\t\tpublic void mouseDoubleClick(MouseEvent e) {", "+\t\t\t\tfail(\"Unsupported mouse double-click event was received\");", "+\t\t\t}", "+\t\t\tpublic void mouseDown(MouseEvent e) {", "+\t\t\t\tif (e.button == 1)", "+\t\t\t\t\tverifiedEvent[MOUSEDOWN] = true;", "+\t\t\t}", "+\t\t\tpublic void mouseUp(MouseEvent e) {", "+\t\t\t\tif (e.button == 1)", "+\t\t\t\t\tverifiedEvent[MOUSEUP] = true;", "+\t\t\t}", "+\t\t});", "+\t\tshell.addMouseMoveListener(new MouseMoveListener() {", "+\t\t\tpublic void mouseMove(MouseEvent e) {", "+\t\t\t\tverifiedEvent[MOUSEMOVE] = true;", "+\t\t\t}", "+\t\t});", "+\t\t", "+\t\tEvent event;", "+\t\t", "+\t\t// Test key events (down/up)", "+\t\tevent = new Event();", "+\t\tevent.type = SWT.KeyDown;", "+\t\tevent.character = (char) -1;  \t// bogus character", "+\t\tassertFalse(display.post(event));", "+\t\tevent.character = CHARACTER;", "+\t\tshell.setFocus();", "+\t\tassertTrue(display.post(event));", "+\t\tevent.type = SWT.KeyUp;", "+\t\tshell.setFocus();", "+\t\tassertTrue(display.post(event));", "+\t\t", "+\t\tevent = new Event();", "+\t\tevent.type = SWT.KeyUp;", "+\t\tevent.character = (char) -1;  \t// bogus character", "+\t\tevent.keyCode = -1;  \t\t\t// bogus keyCode", "+\t\tassertFalse(display.post(event));", "+", "+\t\tevent.type = SWT.KeyDown;", "+\t\tevent.keyCode = SWT.F5;", "+\t\tshell.setFocus();", "+\t\tassertTrue(display.post(event));", "+\t\tevent.type = SWT.KeyUp;", "+\t\tshell.setFocus();", "+\t\tassertTrue(display.post(event));", "+\t\t", "+\t\t// Test mouse events (down/up/move)", "+\t\tevent = new Event();", "+\t\tevent.type = SWT.MouseDown;", "+\t\tassertFalse(display.post(event));  // missing button", "+\t\tevent.button = 1;", "+\t\tshell.setFocus();", "+\t\tassertTrue(display.post(event));", "+\t\t", "+\t\tevent = new Event();", "+\t\tevent.type = SWT.MouseUp;", "+\t\tassertFalse(display.post(event));  // missing button", "+\t\tevent.button = 1;", "+\t\tshell.setFocus();", "+\t\tassertTrue(display.post(event));", "+\t\t", "+\t\tevent = new Event();", "+\t\tevent.type = SWT.MouseMove;", "+\t\tevent.x = 50;", "+\t\tevent.y = 100;", "+\t\tshell.setFocus();", "+\t\tassertTrue(display.post(event));", "+\t\t", "+\t\t// Test unsupported event", "+\t\tevent = new Event();", "+\t\tevent.type = SWT.MouseDoubleClick;", "+\t\tassertFalse(display.post(event));", "+\t\t", "+\t\t// Verify expected events were posted", "+\t\twhile (display.readAndDispatch()) {}", "+\t\tshell.dispose();", "+\t\t", "+\t\tassertTrue(\"posted KeyDown event not received\", verifiedEvent[KEYDOWN]);", "+\t\tassertTrue(\"posted KeyUp event not received\", verifiedEvent[KEYUP]);", "+\t\tassertTrue(\"posted MouseDown event not received\", verifiedEvent[MOUSEDOWN]);", "+\t\tassertTrue(\"posted MouseUp event not received\", verifiedEvent[MOUSEUP]);", "+\t\tassertTrue(\"posted MouseMove event not received\", verifiedEvent[MOUSEMOVE]);", "+\t} finally {", "+\t\tdisplay.dispose();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d406754a9e35a7064d77afe962dd8c4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Display.java", "commitBeforeChange": "dd8aef2683dda960d7112d7410537e5bf2e40a39", "commitAfterChange": "8428842fae44c291890953b218c998cfa656cb68", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "  public void test_postLorg_eclipse_swt_widgets_Event()", "signatureAfterChange": "  public void test_postLorg_eclipse_swt_widgets_Event()", "diff": ["-\tboolean success;", "-\tfinal boolean verifiedEvent[] = new boolean[5];", "-\t", "-\tfinal int KEYUP = 0;", "-\tfinal int KEYDOWN = 1;", "-\tfinal int MOUSEUP = 2;", "-\tfinal int MOUSEDOWN = 3;", "-\tfinal int MOUSEMOVE = 4;", "-\tfinal int CHARACTER = ' '; \t// space character works both in bidi language and western", "-\t\t", "-\t\tshell.addKeyListener(new KeyListener() {", "-\t\t\tpublic void keyPressed(KeyEvent e) {", "-\t\t\t\tif (e.character == CHARACTER)", "-\t\t\t\t\tverifiedEvent[KEYDOWN] = true;", "-\t\t\t}", "-\t\t\t", "-\t\t\tpublic void keyReleased(KeyEvent e) {", "-\t\t\t\tif (e.keyCode == KEYCODE)", "-\t\t\t\t\tverifiedEvent[KEYUP] = true;", "-\t\t\t}", "-\t\t});", "-\t\tshell.addMouseListener(new MouseListener() {", "-\t\t\tpublic void mouseDoubleClick(MouseEvent e) {", "-\t\t\t\tfail(\"Unsupported mouse double-click event was received\");", "-\t\t\t}", "-\t\t\tpublic void mouseDown(MouseEvent e) {", "-\t\t\t\tif (e.button == 1)", "-\t\t\t\t\tverifiedEvent[MOUSEDOWN] = true;", "-\t\t\t}", "-\t\t\tpublic void mouseUp(MouseEvent e) {", "-\t\t\t\tif (e.button == 1)", "-\t\t\t\t\tverifiedEvent[MOUSEUP] = true;", "-\t\t\t}", "-\t\t});", "-\t\tshell.addMouseMoveListener(new MouseMoveListener() {", "-\t\t\tpublic void mouseMove(MouseEvent e) {", "-\t\t\t\tverifiedEvent[MOUSEMOVE] = true;", "-\t\t\t}", "-\t\t});", "-\t\t", "+", "-\t\tevent.character = CHARACTER;", "-\t\tshell.setFocus();", "-\t\tassertTrue(display.post(event));", "-\t\tevent.type = SWT.KeyUp;", "-\t\tshell.setFocus();", "-\t\tassertTrue(display.post(event));", "+\t\t// don't test KeyDown/KeyUp with a character to avoid sending to ", "+\t\t// random window if test shell looses focus", "+\t\tevent.type = SWT.MouseMove;", "+\t\tevent.x = 0;", "+\t\tevent.y = 0;", "+\t\tshell.setFocus();", "+\t\tassertTrue(display.post(event));", "+\t\t", "+\t\tevent = new Event();", "-\t\tevent = new Event();", "-\t\tevent.type = SWT.MouseMove;", "-\t\tevent.x = 50;", "-\t\tevent.y = 100;", "-\t\tshell.setFocus();", "-\t\tassertTrue(display.post(event));", "-\t\t", "-\t\t// Verify expected events were posted", "-\t\twhile (display.readAndDispatch()) {}", "-\t\tassertTrue(\"posted KeyDown event not received\", verifiedEvent[KEYDOWN]);", "-\t\tassertTrue(\"posted KeyUp event not received\", verifiedEvent[KEYUP]);", "-\t\tassertTrue(\"posted MouseDown event not received\", verifiedEvent[MOUSEDOWN]);", "-\t\tassertTrue(\"posted MouseUp event not received\", verifiedEvent[MOUSEUP]);", "-\t\tassertTrue(\"posted MouseMove event not received\", verifiedEvent[MOUSEMOVE]);", "+\t\t// can't verify that the events were actually sent to a listener.", "+\t\t// the test shell won't receive any events if it has lost focus, ", "+\t\t// e.g., due to user intervention or another process popping up ", "+\t\t// a window. "]}], "num": 53527}
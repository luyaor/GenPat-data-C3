{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db9adbd10d092b87ed8fc3e85ef3a7b2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a139fcbda8b8390d03f0587a96bffd7f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "cac4f06ba8ca575a25f4a01e50aa7b21e562d185", "commitAfterChange": "ec42f9bd66229d612fa4f45c504eec5090a63adf", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 119, "signatureBeforeChange": "\r StyledTextEvent getLineStyleData(int lineOffset, String line)", "signatureAfterChange": "\r StyledTextEvent getLineStyleData(int lineOffset, String line)", "diff": ["-// code for 4846 \t\t\r", "-/*\t\telse\r", "+\t\telse\r", "-\t\t\t\t// check for ligatures that are partially styled, if one is found\r", "-\t\t\t\t// automatically apply the style to the entire ligature\r", "+\t\t\t\t// Check for ligatures that are partially styled, if one is found\r", "+\t\t\t\t// automatically apply the style to the entire ligature.  Note that\r", "+\t\t\t\t// there is no need to deal with segments when checking for the ligatures.\r", "+\t\t\t\tStyledTextBidi bidi = new StyledTextBidi(gc, tabWidth, line, null, null, new int[] {0, line.length()});\r", "-\t\t\t\t\tStyledTextBidi bidi = new StyledTextBidi(gc, tabWidth, line, null, null, new int[] {0});\r", "-*/\t\treturn event;\r", "+\t\treturn event;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fdaa617224ac673dfd05bb3aaf09ff91", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextRenderer2.java", "commitBeforeChange": "166233a02615ac1e2681ccfd00cba112f3ec895b", "commitAfterChange": "630a3feebb5502f50c8ae9bf88292efd98dc911c", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " int drawLine(String line, int lineIndex, int paintX, int paintY, GC gc, Color widgetBackground, Color widgetForeground, boolean clearBackground)", "signatureAfterChange": " int drawLine(String line, int lineIndex, int paintX, int paintY, GC gc, Color widgetBackground, Color widgetForeground, boolean clearBackground)", "diff": ["-\t\t\ty += lineBounds.height;", "+\t\t\ty += lineBounds.height + layout.getSpacing();", "-\t\tColor selectionFk = styledText.getSelectionForeground();", "-\t\tColor selectionBk = styledText.getSelectionBackground();", "-\t\tlayout.draw(gc, paintX, paintY, start, end - 1, selectionFk, selectionBk);", "+\t\tColor selectionFg = styledText.getSelectionForeground();", "+\t\tColor selectionBg = styledText.getSelectionBackground();", "+\t\tlayout.draw(gc, paintX, paintY, start, end - 1, selectionFg, selectionBg);", "+\t", "+\t//place the objects", "+\tevent = styledText.sendLineEvent(StyledText2.LineGetStyle, lineOffset, line);", "+\tif (event != null && event.styles != null) {", "+\t\tStyleRange[] styles = event.styles;", "+\t\tfor (int i = 0; i < styles.length; i++) {", "+\t\t\tStyleRange range = styles[i];", "+\t\t\tint start = range.start;", "+\t\t\tif (lineOffset <= start && start < lineOffset + lineLength) {", "+\t\t\t\tEmbeddedObject object = range.object;", "+\t\t\t\t if (object != null) {", "+\t\t\t\t\t int offset = start - lineOffset;", "+\t\t\t\t\t Point point = layout.getLocation(offset, false);", "+\t\t\t\t\t FontMetrics metrics = layout.getLineMetrics(layout.getLineIndex(offset));", "+\t\t\t\t\t range.object.draw(gc, point.x + paintX, point.y + paintY, metrics.getAscent(), metrics.getDescent());", "+\t\t\t\t }", "+\t\t\t}", "+\t\t}", "+\t}", "+\t"]}], "num": 2670}
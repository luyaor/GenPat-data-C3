{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c1c945c1d6c58e370841babf687fb7fb", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba1f860a57c21612b0a71510d48aaa0c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "d4eb14ad4f7b1074d4935c2b9211f94b2750616d", "commitAfterChange": "7d562ae8941ad5655a314eac8dd19e3b2aaef50c", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "\r \r LRESULT WM_NOTIFY (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_NOTIFY (int wParam, int lParam)", "diff": ["-\tNMHDR hdr = new NMHDR ();\r", "-\tOS.MoveMemory (hdr, lParam, NMHDR.sizeof);\r", "-\tswitch (hdr.code) {\r", "-\t\tcase OS.TTN_GETDISPINFO:\r", "-\t\t\tNMTTDISPINFO lpnmtdi = new NMTTDISPINFO ();\r", "-\t\t\tOS.MoveMemory (lpnmtdi, lParam, NMTTDISPINFO.sizeof);\r", "-\t\t\tString string = toolTipText (lpnmtdi);\r", "-\t\t\tif (string != null && string.length () != 0) {\r", "-\t\t\t\tstring = Display.withCrLf (string);\r", "-\t\t\t\t/* Use the character encoding for the default locale */\r", "-\t\t\t\tbyte [] buffer = Converter.wcsToMbcs (0, string, true);\r", "-\t\t\t\tgetShell ().setToolTipText (lpnmtdi, buffer);\r", "-\t\t\t\tOS.MoveMemory (lParam, lpnmtdi, NMTTDISPINFO.sizeof);\r", "-\t\t\t}\r", "-\t\t\treturn LRESULT.ZERO;\r", "+\tif (!OS.IsWinCE) {\r", "+\t\tNMHDR hdr = new NMHDR ();\r", "+\t\tOS.MoveMemory (hdr, lParam, NMHDR.sizeof);\r", "+\t\tswitch (hdr.code) {\r", "+\t\t\tcase OS.TTN_GETDISPINFOA:\r", "+\t\t\tcase OS.TTN_GETDISPINFOW:\r", "+\t\t\t\tNMTTDISPINFO lpnmtdi = new NMTTDISPINFO ();\r", "+\t\t\t\tOS.MoveMemory (lpnmtdi, lParam, NMTTDISPINFO.sizeof);\r", "+\t\t\t\tString string = toolTipText (lpnmtdi);\r", "+\t\t\t\tif (string != null && string.length () != 0) {\r", "+\t\t\t\t\tstring = Display.withCrLf (string);\r", "+\t\t\t\t\t/* Use the character encoding for the default locale */\r", "+\t\t\t\t\tTCHAR buffer = new TCHAR (0, string, true);\r", "+\t\t\t\t\tgetShell ().setToolTipText (lpnmtdi, buffer);\r", "+\t\t\t\t\tOS.MoveMemory (lParam, lpnmtdi, NMTTDISPINFO.sizeof);\r", "+\t\t\t\t}\r", "+\t\t\t\treturn LRESULT.ZERO;\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad6e5c11d95d0ac2086650d1eb8f3a3d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "7113c44fdd7b68a22e89e4ebe9af39b69d8e49ab", "commitAfterChange": "ded6c6d7fa362a18c704ed98b6dbc33978bc2331", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "\r \r LRESULT WM_NOTIFY (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_NOTIFY (int wParam, int lParam)", "diff": ["-\t\t\tcase OS.TTN_GETDISPINFOA: {\r", "-\t\t\t\tNMTTDISPINFO lpnmtdi = new NMTTDISPINFO ();\r", "-\t\t\t\tOS.MoveMemoryA (lpnmtdi, lParam, NMTTDISPINFO.sizeofA);\r", "-\t\t\t\tString string = toolTipText (lpnmtdi);\r", "-\t\t\t\tif (string != null && string.length () != 0) {\r", "-\t\t\t\t\tShell shell = getShell ();\r", "-\t\t\t\t\tstring = Display.withCrLf (string);\r", "-\t\t\t\t\tint length = string.length ();\r", "-\t\t\t\t\tchar [] chars = new char [length];\r", "-\t\t\t\t\tstring.getChars (0, length, chars, 0);\r", "-\t\t\t\t\tbyte [] bytes = new byte [chars.length * 2 + 1];\r", "-\t\t\t\t\tOS.WideCharToMultiByte (OS.CP_ACP, 0, chars, chars.length, bytes, bytes.length, null, null);\r", "-\t\t\t\t\tshell.setToolTipText (lpnmtdi, bytes);\r", "-\t\t\t\t\tOS.MoveMemoryA (lParam, lpnmtdi, NMTTDISPINFO.sizeofA);\r", "-\t\t\t\t\treturn LRESULT.ZERO;\r", "-\t\t\t\t}\r", "-\t\t\t\tbreak;\r", "-\t\t\t}\r", "+\t\t\tcase OS.TTN_GETDISPINFOA:\r", "-\t\t\t\tOS.MoveMemoryW (lpnmtdi, lParam, NMTTDISPINFO.sizeofW);\r", "+\t\t\t\tif (hdr.code == OS.TTN_GETDISPINFOA) {\r", "+\t\t\t\t\tOS.MoveMemoryA (lpnmtdi, lParam, NMTTDISPINFO.sizeofA);\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tOS.MoveMemoryW (lpnmtdi, lParam, NMTTDISPINFO.sizeofW);\r", "+\t\t\t\t}\r", "-\t\t\t\tif (string != null && string.length () != 0) {\r", "+\t\t\t\tif (string != null) {\r", "-\t\t\t\t\tchar [] buffer = new char [length + 1];\r", "-\t\t\t\t\tstring.getChars (0, length, buffer, 0);\r", "-\t\t\t\t\tshell.setToolTipText (lpnmtdi, buffer);\r", "-\t\t\t\t\tOS.MoveMemoryW (lParam, lpnmtdi, NMTTDISPINFO.sizeofW);\r", "+\t\t\t\t\tchar [] chars = new char [length + 1];\r", "+\t\t\t\t\tstring.getChars (0, length, chars, 0);\t\r", "+\t\t\t\t\tif (hdr.code == OS.TTN_GETDISPINFOA) {\r", "+\t\t\t\t\t\tbyte [] bytes = new byte [chars.length * 2];\r", "+\t\t\t\t\t\tOS.WideCharToMultiByte (OS.CP_ACP, 0, chars, chars.length, bytes, bytes.length, null, null);\r", "+\t\t\t\t\t\tshell.setToolTipText (lpnmtdi, bytes);\r", "+\t\t\t\t\t\tOS.MoveMemoryA (lParam, lpnmtdi, NMTTDISPINFO.sizeofA);\r", "+\t\t\t\t\t} else {\r", "+\t\t\t\t\t\tshell.setToolTipText (lpnmtdi, chars);\r", "+\t\t\t\t\t\tOS.MoveMemoryW (lParam, lpnmtdi, NMTTDISPINFO.sizeofW);\r", "+\t\t\t\t\t}\r"]}], "num": 57331}
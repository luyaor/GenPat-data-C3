{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e9e95958cc98f441ac21b2ce18158ed9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13382557181bac1ce00db2c9026b867b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/cocoa/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "4edc576de20a88abac088ae701d29ce3e54ede4f", "commitAfterChange": "c2ec875b36ecf39df432358c14d183b7d7f45fe0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 6, "signatureBeforeChange": "  int handleCallback(int nextHandler, int theEvent)", "signatureAfterChange": "  static int browserProc(int id, int sel, int arg0, int arg1)", "diff": ["+", "+static int browserProc(int id, int sel, int arg0, int arg1) {", "+\tif (sel == OS.sel_setTag_1) {", "+\t\tOS.object_setInstanceVariable(id, \"tag\", arg0);", "+\t\treturn 0;", "+\t}", "+\tint jniRef = OS.objc_msgSend(id, OS.sel_tag);", "+\tif (jniRef == 0 || jniRef == -1) return 0;", "+\tSafari widget = (Safari)OS.JNIGetObject(jniRef);", "+\tif (widget == null) return 0;", "+\tif (sel == OS.sel_webView_1didFinishLoadForFrame_1) {", "+\t\twidget.webView_didFinishLoadForFrame(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1didStartProvisionalLoadForFrame_1) {", "+\t\twidget.webView_didStartProvisionalLoadForFrame(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1didCommitLoadForFrame_1) {", "+\t\twidget.webView_didCommitLoadForFrame(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1setFrame_1) {", "+\t\twidget.webView_setFrame(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1createWebViewWithRequest_1) {", "+\t\treturn widget.webView_createWebViewWithRequest(arg0, arg1);\t\t", "+\t} else if (sel == OS.sel_webView_1setStatusBarVisible_1) {", "+\t\twidget.webView_setStatusBarVisible(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1setResizable_1) {", "+\t\twidget.webView_setResizable(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1setStatusText_1) {", "+\t\twidget.webView_setStatusText(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1setToolbarsVisible_1) {", "+\t\twidget.webView_setToolbarsVisible(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1runJavaScriptAlertPanelWithMessage_1) {", "+\t\twidget.webView_runJavaScriptAlertPanelWithMessage(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1runJavaScriptConfirmPanelWithMessage_1) {", "+\t\treturn widget.webView_runJavaScriptConfirmPanelWithMessage(arg0, arg1);", "+\t} else if (sel == OS.sel_webView_1runOpenPanelForFileButtonWithResultListener_1) {", "+\t\twidget.webView_runOpenPanelForFileButtonWithResultListener(arg0, arg1);", "+\t} else if (sel == OS.sel_download_1decideDestinationWithSuggestedFilename_1) {", "+\t\twidget.download_decideDestinationWithSuggestedFilename(arg0, arg1);", "+\t} ", "+\treturn 0;", "+}", "-int handleCallback(int nextHandler, int theEvent) {", "-\tint eventKind = OS.GetEventKind(theEvent);", "-\tswitch (OS.GetEventClass(theEvent)) {", "-\t\tcase OS.kEventClassControl:", "-\t\t\tswitch (eventKind) {", "-\t\t\t\tcase OS.kEventControlSetCursor: {", "-\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t}", "-\t\t\t\tcase OS.kEventControlDraw: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t * Bug on Safari. The web view cannot be obscured by other views above it.", "-\t\t\t\t\t * This problem is specified in the apple documentation for HiWebViewCreate.", "-\t\t\t\t\t * The workaround is to don't draw the web view when it is not visible.", "-\t\t\t\t\t */", "-\t\t\t\t\tif (!browser.isVisible ()) return OS.noErr;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase OS.kEventControlOwningWindowChanged: {", "-\t\t\t\t\t/* Reparent the web view handler */", "-\t\t\t\t\tint window = OS.GetControlOwner(browser.handle);", "-\t\t\t\t\tint[] contentView = new int[1];", "-\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(window), OS.kHIViewWindowContentID(), contentView);", "-\t\t\t\t\tOS.HIViewAddSubview(contentView[0], webViewHandle);", "-\t\t\t\t\t", "-\t\t\t\t\t/* Reset the kEventWindowBoundsChanged handler */", "-\t\t\t\t\tOS.RemoveEventHandler(windowBoundsHandler);", "-\t\t\t\t\tint[] mask2 = new int[] {", "-\t\t\t\t\t\tOS.kEventClassWindow, OS.kEventWindowBoundsChanged,", "-\t\t\t\t\t};", "-\t\t\t\t\tint[] outRef = new int[1];", "-\t\t\t\t\tOS.InstallEventHandler(OS.GetWindowEventTarget(window), Callback3.getAddress(), mask2.length / 2, mask2, browser.handle, outRef);", "-\t\t\t\t\twindowBoundsHandler = outRef[0];", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase OS.kEventControlBoundsChanged:", "-\t\t\t\tcase OS.kEventControlVisibilityChanged: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t * Bug on Safari. The web view cannot be obscured by other views above it.", "-\t\t\t\t\t * This problem is specified in the apple documentation for HiWebViewCreate.", "-\t\t\t\t\t * The workaround is to hook kEventControlVisibilityChanged on the browser", "-\t\t\t\t\t * and move the browser out of the screen when hidden and restore its bounds", "-\t\t\t\t\t * when shown.", "-\t\t\t\t\t */", "-\t\t\t\t\tCGRect bounds = new CGRect();", "-\t\t\t\t\tif (!browser.isVisible()) {", "-\t\t\t\t\t\tbounds.x = bounds.y = -MIN_SIZE;", "-\t\t\t\t\t\tbounds.width = bounds.height = MIN_SIZE;", "-\t\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tOS.HIViewGetBounds(browser.handle, bounds);", "-\t\t\t\t\t\tint[] contentView = new int[1];", "-\t\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(browser.handle)), OS.kHIViewWindowContentID(), contentView);", "-\t\t\t\t\t\tOS.HIViewConvertRect(bounds, browser.handle, contentView[0]);", "-\t\t\t\t\t\t/* ", "-\t\t\t\t\t\t* Bug in Safari.  For some reason, the web view will display incorrectly or", "-\t\t\t\t\t\t* blank depending on its contents, if its size is set to a value smaller than", "-\t\t\t\t\t\t* MIN_SIZE. It will not display properly even after the size is made larger.", "-\t\t\t\t\t\t* The fix is to avoid setting sizes smaller than MIN_SIZE. ", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif (bounds.width <= MIN_SIZE) bounds.width = MIN_SIZE;", "-\t\t\t\t\t\tif (bounds.height <= MIN_SIZE) bounds.height = MIN_SIZE;", "-\t\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\tcase OS.kEventClassWindow:", "-\t\t\tswitch (eventKind) {", "-\t\t\t\tcase OS.kEventWindowBoundsChanged:", "-\t\t\t\t\t/*", "-\t\t\t\t\t * Bug on Safari. Resizing the height of a Shell containing a Browser at", "-\t\t\t\t\t * a fixed location causes the Browser to redraw at a wrong location.", "-\t\t\t\t\t * The web view is a HIView container that internally hosts", "-\t\t\t\t\t * a Cocoa NSView that uses a coordinates system with the origin at the", "-\t\t\t\t\t * bottom left corner of a window instead of the coordinates system used", "-\t\t\t\t\t * in Carbon that starts at the top left corner. The workaround is to", "-\t\t\t\t\t * reposition the web view every time the Shell of the Browser is resized.", "-\t\t\t\t\t * ", "-\t\t\t\t\t * Note the size should not be updated if the browser is hidden.", "-\t\t\t\t\t */", "-\t\t\t\t\tif (browser.isVisible()) {", "-\t\t\t\t\t\tCGRect oldBounds = new CGRect();", "-\t\t\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamOriginalBounds, OS.typeHIRect, null, CGRect.sizeof, null, oldBounds);", "-\t\t\t\t\t\tCGRect bounds = new CGRect();", "-\t\t\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamCurrentBounds, OS.typeHIRect, null, CGRect.sizeof, null, bounds);", "-\t\t\t\t\t\tif (oldBounds.height == bounds.height) break;", "-\t\t\t\t\t\tOS.HIViewGetBounds(browser.handle, bounds);", "-\t\t\t\t\t\tint[] contentView = new int[1];", "-\t\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(browser.handle)), OS.kHIViewWindowContentID(), contentView);", "-\t\t\t\t\t\tOS.HIViewConvertRect(bounds, browser.handle, contentView[0]);", "-\t\t\t\t\t\t/* ", "-\t\t\t\t\t\t* Bug in Safari.  For some reason, the web view will display incorrectly or", "-\t\t\t\t\t\t* blank depending on its contents, if its size is set to a value smaller than", "-\t\t\t\t\t\t* MIN_SIZE. It will not display properly even after the size is made larger.", "-\t\t\t\t\t\t* The fix is to avoid setting sizes smaller than MIN_SIZE. ", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif (bounds.width <= MIN_SIZE) bounds.width = MIN_SIZE;", "-\t\t\t\t\t\tif (bounds.height <= MIN_SIZE) bounds.height = MIN_SIZE;", "-\t\t\t\t\t\tbounds.x++;", "-\t\t\t\t\t\t/* Note that the bounds needs to change */", "-\t\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\t\tbounds.x--;", "-\t\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\t}", "-\t\t\t}", "-\t\tcase OS.kEventClassKeyboard:", "-\t\t\tswitch (eventKind) {", "-\t\t\t\tcase OS.kEventRawKeyDown: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug in Safari. The WebView blocks the propagation of certain Carbon events", "-\t\t\t\t\t* such as kEventRawKeyDown. On the Mac, Carbon events propagate from the", "-\t\t\t\t\t* Focus Target Handler to the Control Target Handler, Window Target and finally", "-\t\t\t\t\t* the Application Target Handler. It is assumed that WebView hooks its events", "-\t\t\t\t\t* on the Window Target and does not pass kEventRawKeyDown to the next handler.", "-\t\t\t\t\t* Since kEventRawKeyDown events never make it to the Application Target Handler,", "-\t\t\t\t\t* the Application Target Handler never gets to emit kEventTextInputUnicodeForKeyEvent", "-\t\t\t\t\t* used by SWT to send a SWT.KeyDown event.", "-\t\t\t\t\t* The workaround is to hook kEventRawKeyDown on the Control Target Handler which gets", "-\t\t\t\t\t* called before the WebView hook on the Window Target Handler. Then, forward this event", "-\t\t\t\t\t* directly to the Application Target Handler. Note that if in certain conditions Safari", "-\t\t\t\t\t* does not block the kEventRawKeyDown, then multiple kEventTextInputUnicodeForKeyEvent", "-\t\t\t\t\t* events might be generated as a result of this workaround.", "-\t\t\t\t\t*/", "-\t\t\t\t\t//TEMPORARY CODE", "-//\t\t\t\t\tdoit = false;", "-//\t\t\t\t\tOS.SendEventToEventTarget(theEvent, OS.GetApplicationEventTarget());", "-//\t\t\t\t\tif (!doit) return OS.noErr;", "-", "-\t\t\t\t\tint[] length = new int[1];", "-\t\t\t\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 4, length, (char[])null);", "-\t\t\t\t\tif (status == OS.noErr && length[0] != 0) {", "-\t\t\t\t\t\tint[] modifiers = new int[1];", "-\t\t\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "-\t\t\t\t\t\tchar[] chars = new char[1];", "-\t\t\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 2, null, chars);", "-\t\t\t\t\t\tif ((modifiers[0] & OS.cmdKey) != 0) {", "-\t\t\t\t\t\t\tswitch (chars[0]) {", "-\t\t\t\t\t\t\t\tcase 'v': {", "-\t\t\t\t\t\t\t\t\tint webView = Cocoa.HIWebViewGetWebView (webViewHandle);", "-\t\t\t\t\t\t\t\t\tCocoa.objc_msgSend (webView, Cocoa.S_paste);", "-\t\t\t\t\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcase 'c': {", "-\t\t\t\t\t\t\t\t\tint webView = Cocoa.HIWebViewGetWebView (webViewHandle);", "-\t\t\t\t\t\t\t\t\tCocoa.objc_msgSend (webView, Cocoa.S_copy);", "-\t\t\t\t\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcase 'x': {", "-\t\t\t\t\t\t\t\t\tint webView = Cocoa.HIWebViewGetWebView (webViewHandle);", "-\t\t\t\t\t\t\t\t\tCocoa.objc_msgSend (webView, Cocoa.S_cut);", "-\t\t\t\t\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\tcase OS.kEventClassTextInput:", "-\t\t\tswitch (eventKind) {", "-\t\t\t\tcase OS.kEventTextInputUnicodeForKeyEvent: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Note.  This event is received from the Window Target therefore after it was received", "-\t\t\t\t\t* by the Focus Target. The SWT.KeyDown event is sent by SWT on the Focus Target. If it", "-\t\t\t\t\t* is received here, then the SWT.KeyDown doit flag must have been left to the value", "-\t\t\t\t\t* true.  For package visibility reasons we cannot access the doit flag directly.", "-\t\t\t\t\t* ", "-\t\t\t\t\t* Sequence of events when the user presses a key down", "-\t\t\t\t\t* ", "-\t\t\t\t\t* .Control Target - kEventRawKeyDown", "-\t\t\t\t\t* \t.forward to ApplicationEventTarget", "-\t\t\t\t\t* \t\t.Focus Target kEventTextInputUnicodeForKeyEvent - SWT emits SWT.KeyDown - ", "-\t\t\t\t\t* \t\t\tblocks further propagation if doit false. Browser does not know directly about", "-\t\t\t\t\t* \t\t\tthe doit flag value.", "-\t\t\t\t\t* \t\t\t.Window Target kEventTextInputUnicodeForKeyEvent - if received, Browser knows ", "-\t\t\t\t\t* \t\t\tSWT.KeyDown is not blocked and event should be sent to WebKit", "-\t\t\t\t\t*  Return from Control Target - kEventRawKeyDown: let the event go to WebKit if doit true ", "-\t\t\t\t\t*  (eventNotHandledErr) or stop it (noErr).", "-\t\t\t\t\t*/", "-\t\t\t\t\t//TEMPORARY CODE", "-//\t\t\t\t\tdoit = true;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t}", "-\treturn OS.eventNotHandledErr;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65fbcaf447d1bdd6542d5fea4a165a75", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 48, "signatureBeforeChange": " int processPaint (Object callData)", "signatureAfterChange": "  void updateArrow ()", "diff": ["-}", "-int processPaint (Object callData) {", "-", "-\tif ((style & SWT.SEPARATOR) != 0 && control != null)", "-\t\treturn 0;", "-\t\t", "-\tMacRect bounds= new MacRect();", "-\tOS.GetControlBounds(handle, bounds.getData());", "-\tbounds.setLocation(0, 0);", "-\t", "-\tint width= bounds.getWidth();", "-\tint height= bounds.getHeight();", "-\t", "-\tfinal Display display = getDisplay ();", "-", "-\tDrawable drawable= new Drawable() {", "-\t\tpublic int internal_new_GC (GCData data) {", "-\t\t\tdata.device = display;", "-\t\t\tdata.foreground = parent.getForegroundPixel();", "-\t\t\tdata.background = parent.getBackgroundPixel();", "-\t\t\tdata.font = parent.font.handle;", "-\t\t\tdata.controlHandle = handle;", "-\t\t\treturn OS.GetWindowPort(OS.GetControlOwner(handle));", "-\t\t}", "-\t\tpublic void internal_dispose_GC (int xGC, GCData data) {", "-\t\t}", "-\t};", "-\t", "-\tboolean hasCursor= hasCursor ();", "-", "-\tGC gc= new GC(drawable);", "-\t", "-\tMacControlEvent me= (MacControlEvent) callData;", "-\tRectangle r= gc.carbon_focus(me.getDamageRegionHandle());", "-\tif (!r.isEmpty()) {", "-\t\t", "-\t\t// erase background", "-\t\tgc.fillRectangle(0, 0, width, height);", "-\t\t", "-\t\tif ((style & SWT.SEPARATOR) != 0) {", "-\t\t", "-\t\t\tOS.DrawThemeSeparator(bounds.getData(), OS.kThemeStateActive);", "-\t\t\t", "-\t\t\t\t\t", "-\t\t\tif ((parent.style & SWT.FLAT) != 0 && set) {", "-\t\t\t\tgc.setBackground(Color.carbon_new(display, 0xE0E0E0, false));", "-\t\t\t\tgc.fillRoundRectangle(1, 1, width-2, height-2, 8, 8);", "-\t\t\t\tgc.setForeground(display.getSystemColor(SWT.COLOR_GRAY));", "-\t\t\t\tgc.drawRoundRectangle(1, 1, width-3, height-3, 8, 8);", "-\t\t\t}", "-\t\t", "-\t\t\tImage currentImage = image;", "-\t\t\tboolean enabled = getEnabled();", "-\t\t", "-\t\t\tshort[] newInfo= new short[3];", "-\t\t\t\t\t", "-\t\t\tnewInfo[1]= set ? OS.kThemeButtonOn : OS.kThemeButtonOff;", "-\t\t\t", "-\t\t\tif ((parent.style & SWT.FLAT) != 0) {", "-\t\t\t\t", "-\t\t\t\tif (hasCursor && enabled) {", "-\t\t\t\t\tif (OS.StillDown())", "-\t\t\t\t\t\tnewInfo[0]= OS.kThemeStatePressed;", "-\t\t\t\t\telse", "-\t\t\t\t\t\tnewInfo[0]= OS.kThemeStateActive;", "-\t\t\t\t} else", "-\t\t\t\t\tnewInfo= null;", "-\t\t\t\t", "-\t\t\t\t/* Determine if hot image should be used */", "-\t\t\t\tif (enabled && hasCursor && hotImage != null) {", "-\t\t\t\t\tcurrentImage = hotImage;", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tnewInfo[0]= (hasCursor && OS.StillDown()) ? OS.kThemeStatePressed : OS.kThemeStateActive;", "-\t\t\t}", "-\t", "-\t\t\tif (newInfo != null) {", "-\t\t\t\tMacRect b= new MacRect(1, 1, width-2, height-2);", "-\t\t\t\tOS.DrawThemeButton(b.getData(), OS.kThemeSmallBevelButton, newInfo, fPrevInfo, 0, 0, 0);", "-\t\t\t}", "-\t\t\tfPrevInfo= newInfo;", "-\t\t\t\t", "-\t\t\tif (enabled) {", "-\t\t\t\tgc.setForeground (parent.getForeground());", "-\t\t\t} else {", "-\t\t\t\tcurrentImage = disabledImage;", "-\t\t\t\tif (currentImage == null && image != null) {", "-\t\t\t\t\tcurrentImage = new Image (display, image, SWT.IMAGE_DISABLE);", "-\t\t\t\t}", "-\t\t\t\tColor disabledColor = display.getSystemColor (SWT.COLOR_WIDGET_NORMAL_SHADOW);", "-\t\t\t\tgc.setForeground (disabledColor);", "-\t\t\t}", "-\t\t\t", "-\t\t\tint textX = 0, textY = 0, textWidth = 0, textHeight = 0;", "-\t\t\tif (text.length() > 0) {", "-\t\t\t\tint flags = SWT.DRAW_DELIMITER | SWT.DRAW_TAB | SWT.DRAW_MNEMONIC;", "-\t\t\t\tPoint textExtent = gc.textExtent (text, flags);", "-\t\t\t\ttextWidth = textExtent.x;", "-\t\t\t\ttextHeight = textExtent.y;", "-\t\t\t}\t", "-\t\t\tint imageX = 0, imageY = 0, imageWidth = 0, imageHeight = 0;", "-\t\t\tif (currentImage != null) {", "-\t\t\t\ttry { // AW FIXME", "-\t\t\t\t\tRectangle imageBounds = currentImage.getBounds ();", "-\t\t\t\t\timageWidth = imageBounds.width;", "-\t\t\t\t\timageHeight = imageBounds.height;", "-\t\t\t\t} catch (SWTError e) {", "-\t\t\t\t\tSystem.out.println(\"ToolItem.processPaint: error in image.getBounds: \" + e);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\tint spacing = 0;", "-\t\t\tif (textWidth != 0 && imageWidth != 0) spacing = 2;", "-\t\t\tif ((parent.style & SWT.RIGHT) != 0) {", "-\t\t\t\timageX = (width - imageWidth - textWidth - spacing) / 2;", "-\t\t\t\timageY = (height - imageHeight) / 2;", "-\t\t\t\ttextX = spacing + imageX + imageWidth;", "-\t\t\t\ttextY = (height - textHeight) / 2;", "-\t\t\t} else {\t\t", "-\t\t\t\timageX = (width - imageWidth) / 2;", "-\t\t\t\timageY = (height - imageHeight - textHeight - spacing) / 2;", "-\t\t\t\ttextX = (width - textWidth) / 2;", "-\t\t\t\ttextY = spacing + imageY + imageHeight;", "-\t\t\t}", "-\t\t\t", "-\t\t\tif ((style & SWT.DROP_DOWN) != 0) {", "-\t\t\t\ttextX -= 6;  imageX -=6;", "-\t\t\t}", "-\t\t\tif (textWidth > 0) {", "-\t\t\t\tint flags = SWT.DRAW_DELIMITER | SWT.DRAW_TAB | SWT.DRAW_MNEMONIC | SWT.DRAW_TRANSPARENT;", "-\t\t\t\tgc.drawText(text, textX, textY, flags);", "-\t\t\t}", "-\t\t\tif (imageWidth > 0)", "-\t\t\t\tgc.drawImage(currentImage, imageX, imageY);", "-\t\t\t\t", "-\t\t\tif ((style & SWT.DROP_DOWN) != 0) {", "-\t\t\t\tint startX = width - 12, startY = (height - 2) / 2;", "-\t\t\t\tint [] arrow = {startX, startY, startX + 3, startY + 3, startX + 6, startY};", "-\t\t\t\tgc.setBackground (gc.getForeground ());", "-\t\t\t\tgc.fillPolygon (arrow);", "-\t\t\t\tgc.drawPolygon (arrow);", "-\t\t\t}", "-\t\t\tif (!enabled && disabledImage == null) {", "-\t\t\t\tif (currentImage != null) currentImage.dispose ();", "-\t\t\t}", "-\tgc.carbon_unfocus();", "+", "+void updateArrow () {", "+\tif (arrowCIcon != 0) destroyCIcon (arrowCIcon);", "+\tarrowCIcon = 0;", "+\tDisplay display = getDisplay ();", "+\tImage image = new Image (display, 6, 4);", "+\tGC gc = new GC (image);", "+\tint startX = 0, startY = 0;", "+\tint [] arrow = {startX, startY, startX + 3, startY + 3, startX + 6, startY};", "+\tgc.setBackground (parent.getForeground ());", "+\tgc.fillPolygon (arrow);", "+\tgc.drawPolygon (arrow);", "-\t", "-\treturn 0;", "+\tImageData data = image.getImageData ();", "+\tdata.transparentPixel = 0xFFFFFFFF;", "+\timage.dispose ();", "+\timage = new Image (getDisplay (), data, data.getTransparencyMask());", "+\tarrowCIcon = createCIcon (image);", "+\timage.dispose ();", "+\tControlButtonContentInfo inContent = new ControlButtonContentInfo ();", "+\tinContent.contentType = (short) OS.kControlContentCIconHandle;", "+\tinContent.iconRef = arrowCIcon;", "+\tOS.SetBevelButtonContentInfo (arrowHandle, inContent);\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "daff360bb34a8a69224c0965c566bda8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "a2fb28aada03076e456f5d04cff320b4b64690b6", "commitAfterChange": "8bdc7452496d997678c005f282bcd2cc736b0512", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  void initializeSystemResources ()", "signatureAfterChange": "  void initializeSystemResources ()", "diff": ["-\tGtkStyle style = new GtkStyle();", "-\tOS.memmove (style, OS.gtk_widget_get_style (shellHandle));\t", "-\tGtkStyle tooltipStyle = new GtkStyle();", "-\tOS.memmove (tooltipStyle, OS.gtk_widget_get_style (tooltipShellHandle));", "+\tint style = OS.gtk_widget_get_style (shellHandle);\t", "+\tint tooltipStyle = OS.gtk_widget_get_style (tooltipShellHandle);", "-\tdefaultFont = OS.pango_font_description_copy (style.font_desc);", "+\tdefaultFont = OS.pango_font_description_copy (OS.gtk_style_get_font_desc (style));", "-\tgdkColor.pixel = style.black_pixel;", "-\tgdkColor.red   = style.black_red;", "-\tgdkColor.green = style.black_green;", "-\tgdkColor.blue  = style.black_blue;", "+\tOS.gtk_style_get_black (style, gdkColor);", "-\tgdkColor.pixel = style.dark0_pixel;", "-\tgdkColor.red   = style.dark0_red;", "-\tgdkColor.green = style.dark0_green;", "-\tgdkColor.blue  = style.dark0_blue;", "+\tOS.gtk_style_get_dark (style, 0, gdkColor);", "-\tgdkColor.pixel = style.bg0_pixel;", "-\tgdkColor.red   = style.bg0_red;", "-\tgdkColor.green = style.bg0_green;", "-\tgdkColor.blue  = style.bg0_blue;", "+\tOS.gtk_style_get_bg (style, 0, gdkColor);", "-\tgdkColor.pixel = style.light0_pixel;", "-\tgdkColor.red   = style.light0_red;", "-\tgdkColor.green = style.light0_green;", "-\tgdkColor.blue  = style.light0_blue;", "+\tOS.gtk_style_get_light (style, 0, gdkColor);", "-\tgdkColor.pixel = style.fg0_pixel;", "-\tgdkColor.red   = style.fg0_red;", "-\tgdkColor.green = style.fg0_green;", "-\tgdkColor.blue  = style.fg0_blue;", "+\tOS.gtk_style_get_fg (style, 0, gdkColor);", "-\tgdkColor.pixel = style.bg0_pixel;", "-\tgdkColor.red   = style.bg0_red;", "-\tgdkColor.green = style.bg0_green;", "-\tgdkColor.blue  = style.bg0_blue;", "+\tOS.gtk_style_get_bg (style, 0, gdkColor);", "-\tgdkColor.pixel = style.text0_pixel;", "-\tgdkColor.red   = style.text0_red;", "-\tgdkColor.green = style.text0_green;", "-\tgdkColor.blue  = style.text0_blue;", "+\tOS.gtk_style_get_text (style, 0, gdkColor);", "-\tgdkColor.pixel = style.base0_pixel;", "-\tgdkColor.red   = style.base0_red;", "-\tgdkColor.green = style.base0_green;", "-\tgdkColor.blue  = style.base0_blue;", "+\tOS.gtk_style_get_base (style, 0, gdkColor);", "-\tgdkColor.pixel = style.text0_pixel;", "-\tgdkColor.red   = style.text0_red;", "-\tgdkColor.green = style.text0_green;", "-\tgdkColor.blue  = style.text0_blue;", "+\tOS.gtk_style_get_text (style, 0, gdkColor);", "-\tgdkColor.pixel = style.base0_pixel;", "-\tgdkColor.red   = style.base0_red;", "-\tgdkColor.green = style.base0_green;", "-\tgdkColor.blue  = style.base0_blue;", "+\tOS.gtk_style_get_base (style, 0, gdkColor);", "-\tgdkColor.pixel = style.text3_pixel;", "-\tgdkColor.red   = style.text3_red;", "-\tgdkColor.green = style.text3_green;", "-\tgdkColor.blue  = style.text3_blue;", "+\tOS.gtk_style_get_text (style, 3, gdkColor);", "-\tgdkColor.pixel = style.base3_pixel;", "-\tgdkColor.red   = style.base3_red;", "-\tgdkColor.green = style.base3_green;", "-\tgdkColor.blue  = style.base3_blue;", "+\tOS.gtk_style_get_base (style, 3, gdkColor);", "-\tgdkColor.pixel = tooltipStyle.fg0_pixel;", "-\tgdkColor.red   = tooltipStyle.fg0_red;", "-\tgdkColor.green = tooltipStyle.fg0_green;", "-\tgdkColor.blue  = tooltipStyle.fg0_blue;", "+\tOS.gtk_style_get_fg (tooltipStyle, 0, gdkColor);", "-\tgdkColor.pixel = tooltipStyle.bg0_pixel;", "-\tgdkColor.red   = tooltipStyle.bg0_red;", "-\tgdkColor.green = tooltipStyle.bg0_green;", "-\tgdkColor.blue  = tooltipStyle.bg0_blue;", "+\tOS.gtk_style_get_bg (tooltipStyle, 0, gdkColor);", "-\tgdkColor.pixel = style.bg3_pixel;", "-\tgdkColor.red   = style.bg3_red;", "-\tgdkColor.green = style.bg3_green;", "-\tgdkColor.blue  = style.bg3_blue;", "+\tOS.gtk_style_get_bg (style, 3, gdkColor);", "-\tgdkColor.pixel = style.fg3_pixel;", "-\tgdkColor.red   = style.fg3_red;", "-\tgdkColor.green = style.fg3_green;", "-\tgdkColor.blue  = style.fg3_blue;", "+\tOS.gtk_style_get_fg (style, 3, gdkColor);", "-\tgdkColor.pixel = style.light3_pixel;", "-\tgdkColor.red   = style.light3_red;", "-\tgdkColor.green = style.light3_green;", "-\tgdkColor.blue  = style.light3_blue;", "+\tOS.gtk_style_get_light (style, 3, gdkColor);", "-\tgdkColor.pixel = style.bg4_pixel;", "-\tgdkColor.red   = style.bg4_red;", "-\tgdkColor.green = style.bg4_green;", "-\tgdkColor.blue  = style.bg4_blue;", "+\tOS.gtk_style_get_bg (style, 4, gdkColor);", "-\tgdkColor.pixel = style.fg4_pixel;", "-\tgdkColor.red   = style.fg4_red;", "-\tgdkColor.green = style.fg4_green;", "-\tgdkColor.blue  = style.fg4_blue;", "+\tOS.gtk_style_get_fg (style, 4, gdkColor);", "-\tgdkColor.pixel = style.light4_pixel;", "-\tgdkColor.red   = style.light4_red;", "-\tgdkColor.green = style.light4_green;", "-\tgdkColor.blue  = style.light4_blue;", "+\tOS.gtk_style_get_light (style, 4, gdkColor);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d7694f8e092170df36cc36e9c4ce841", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "021c9ffb1f03bab865a8755698d6a0a3d739b6cc", "commitAfterChange": "a22dc50286ff5b97c74cd0b12653f08fe95a1ee7", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 71, "signatureBeforeChange": " void onMouse(Event event)", "signatureAfterChange": " void onMouse(Event event)", "diff": ["+\tif( isDisposed() ) {", "+\t\treturn;", "+\t}", "-\t\t\tif (minImageState != SWT.NONE) {", "-\t\t\t\tminImageState = SWT.NONE;", "-\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "-\t\t\t}", "-\t\t\tif (maxImageState != SWT.NONE) {", "-\t\t\t\tmaxImageState = SWT.NONE;", "-\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "-\t\t\t}", "-\t\t\tif (chevronImageState != SWT.NONE) {", "-\t\t\t\tchevronImageState = SWT.NONE;", "-\t\t\t\tredraw(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height, false);", "-\t\t\t}", "+\t\tcase SWT.MouseHover:", "+\t\t\tif (hoverTb && hoverRect.contains(x, y) && !hovering) {", "+\t\t\t\thovering = true;", "+\t\t\t\tupdateItems();", "+\t\t\t\thoverTimerRunning = true;", "+\t\t\t\tevent.display.timerExec(2000, new Runnable() {", "+\t\t\t\t\tpublic void run() {", "+\t\t\t\t\t\tif (isDisposed()) return;", "+\t\t\t\t\t\tif (hovering) {", "+\t\t\t\t\t\t\tDisplay display = getDisplay();", "+\t\t\t\t\t\t\tControl c = display.getCursorControl();", "+\t\t\t\t\t\t\tboolean reschedule = false;", "+\t\t\t\t\t\t\tif (c != null) {", "+\t\t\t\t\t\t\t\tfor (int i = 0; i < controls.length; i++) {", "+\t\t\t\t\t\t\t\t\tControl temp = c;", "+\t\t\t\t\t\t\t\t\tdo {", "+\t\t\t\t\t\t\t\t\t\tif (temp.equals(controls[i])) {", "+\t\t\t\t\t\t\t\t\t\t\treschedule = true;", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\ttemp = temp.getParent();", "+\t\t\t\t\t\t\t\t\t\t\tif (temp == null || temp.equals(CTabFolder.this)) break;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t} while (!reschedule);", "+\t\t\t\t\t\t\t\t\tif (reschedule) break;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (reschedule && hoverTimerRunning) {", "+\t\t\t\t\t\t\t\tdisplay.timerExec(2000, this);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\thovering = false;", "+\t\t\t\t\t\t\t\tupdateItems();", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t});", "+\t\t\t\treturn;", "+\t\t\t}", "-\t\t\tif (minRect.contains(x, y)) {", "-\t\t\t\tminImageState = SWT.SELECTED;", "-\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "-\t\t\t\tupdate();", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tif (maxRect.contains(x, y)) {", "-\t\t\t\tmaxImageState = SWT.SELECTED;", "-\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "-\t\t\t\tupdate();", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tif (chevronRect.contains(x, y)) {", "-\t\t\t\tif (chevronImageState != SWT.HOT) {", "-\t\t\t\t\tchevronImageState = SWT.HOT;", "-\t\t\t\t} else {", "-\t\t\t\t\tchevronImageState = SWT.SELECTED;", "-\t\t\t\t}", "-\t\t\t\tredraw(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height, false);", "-\t\t\t\tupdate();", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tboolean close = false, minimize = false, maximize = false, chevron = false;", "-\t\t\tif (minRect.contains(x, y)) {", "-\t\t\t\tminimize = true;", "-\t\t\t\tif (minImageState != SWT.SELECTED && minImageState != SWT.HOT) {", "-\t\t\t\t\tminImageState = SWT.HOT;", "-\t\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (maxRect.contains(x, y)) {", "-\t\t\t\tmaximize = true;", "-\t\t\t\tif (maxImageState != SWT.SELECTED && maxImageState != SWT.HOT) {", "-\t\t\t\t\tmaxImageState = SWT.HOT;", "-\t\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (chevronRect.contains(x, y)) {", "-\t\t\t\tchevron = true;", "-\t\t\t\tif (chevronImageState != SWT.SELECTED && chevronImageState != SWT.HOT) {", "-\t\t\t\t\tchevronImageState = SWT.HOT;", "-\t\t\t\t\tredraw(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height, false);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (minImageState != SWT.NONE && !minimize) {", "-\t\t\t\tminImageState = SWT.NONE;", "-\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "-\t\t\t}", "-\t\t\tif (maxImageState != SWT.NONE && !maximize) {", "-\t\t\t\tmaxImageState = SWT.NONE;", "-\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "-\t\t\t}", "-\t\t\tif (chevronImageState != SWT.NONE && !chevron) {", "-\t\t\t\tchevronImageState = SWT.NONE;", "-\t\t\t\tredraw(chevronRect.x, chevronRect.y, chevronRect.width, chevronRect.height, false);", "-\t\t\t}", "+\t\t\tboolean close = false;", "-\t\t\tif (chevronRect.contains(x, y)) {", "-\t\t\t\tboolean selected = chevronImageState == SWT.SELECTED;", "-\t\t\t\tif (!selected) return;", "-\t\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "-\t\t\t\te.widget = this;", "-\t\t\t\te.time = event.time;", "-\t\t\t\te.x = chevronRect.x;", "-\t\t\t\te.y = chevronRect.y;", "-\t\t\t\te.width = chevronRect.width;", "-\t\t\t\te.height = chevronRect.height;", "-\t\t\t\te.doit = true;", "-\t\t\t\tfor (int i = 0; i < folderListeners.length; i++) {", "-\t\t\t\t\tfolderListeners[i].showList(e);", "-\t\t\t\t}", "-\t\t\t\tif (e.doit && !isDisposed()) {", "-\t\t\t\t\tshowList(chevronRect);", "-\t\t\t\t}", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tif (minRect.contains(x, y)) {", "-\t\t\t\tboolean selected = minImageState == SWT.SELECTED;", "-\t\t\t\tminImageState = SWT.HOT;", "-\t\t\t\tredraw(minRect.x, minRect.y, minRect.width, minRect.height, false);", "-\t\t\t\tif (!selected) return;", "-\t\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "-\t\t\t\te.widget = this;", "-\t\t\t\te.time = event.time;", "-\t\t\t\tfor (int i = 0; i < folderListeners.length; i++) {", "-\t\t\t\t\tif (minimized) {", "-\t\t\t\t\t\tfolderListeners[i].restore(e);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tfolderListeners[i].minimize(e);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn;", "-\t\t\t}", "-\t\t\tif (maxRect.contains(x, y)) {", "-\t\t\t\tboolean selected = maxImageState == SWT.SELECTED;", "-\t\t\t\tmaxImageState = SWT.HOT;", "-\t\t\t\tredraw(maxRect.x, maxRect.y, maxRect.width, maxRect.height, false);", "-\t\t\t\tif (!selected) return;", "-\t\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "-\t\t\t\te.widget = this;", "-\t\t\t\te.time = event.time;", "-\t\t\t\tfor (int i = 0; i < folderListeners.length; i++) {", "-\t\t\t\t\tif (maximized) {", "-\t\t\t\t\t\tfolderListeners[i].restore(e);", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tfolderListeners[i].maximize(e);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn;", "-\t\t\t}"]}], "num": 47219}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4d4c7aa87c42b08f3dde1e28418af4bc", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d7a776ce77fe8f8561096b61078f878", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabItem.java", "commitBeforeChange": "c420da5cf118e1d31483bddb27f4ae761bc50622", "commitAfterChange": "46028f74aa93a4e2ad670b1ef1ee4791bd1bd728", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " void drawSelected(GC gc )", "signatureAfterChange": " void drawSelected(GC gc )", "diff": ["-\t", "+\t\t", "-\tint extra = parent.simple ? 0 : CTabFolder.CURVE_WIDTH/2 + 4; // +4 to avoid overlapping with text in next tab", "-\tint rightTabEdge = parent.getRightItemEdge();", "+\tint rightEdge = Math.min (x+width, parent.getRightItemEdge());", "-\t\t\tshape[index++] = x + width - extra + right[2*i];", "+\t\t\tshape[index++] = parent.simple ? rightEdge + right[2*i] : rightEdge - CTabFolder.CURVE_WIDTH/2 - CTabFolder.CURVE_INDENT + right[2*i];", "-\t\tshape[index++] = Math.min(x + width + extra, rightTabEdge);", "+\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "-\t\tshape[index++] = Math.max(x + width + extra, rightTabEdge);", "+\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "-\t\tint temp = 0;", "-\t\tfor (int i = 0; i < shape.length/2; i++) {", "-\t\t\tif (shape[2*i] > rightTabEdge) {", "-\t\t\t\tif (temp == 0 && i > 0) {", "-\t\t\t\t\ttemp = shape[2*i-1];", "-\t\t\t\t} else {", "-\t\t\t\t\ttemp = y - 1;", "-\t\t\t\t}", "-\t\t\t\tshape[2*i] = rightTabEdge;", "-\t\t\t\tshape[2*i+1] = temp;", "-\t\t\t}", "-\t\t}", "-\t\t\tshape[index++] = x + width - extra + right[2*i];", "+\t\t\tshape[index++] = parent.simple ? rightEdge + right[2*i] : rightEdge - CTabFolder.CURVE_WIDTH/2 - CTabFolder.CURVE_INDENT + right[2*i];", "-\t\tshape[index++] = Math.min (x + width + extra, rightTabEdge);", "+\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "-\t\tshape[index++] = Math.max (x + width + extra, rightTabEdge);", "+\t\tshape[index++] = parent.simple ? rightEdge : rightEdge + CTabFolder.CURVE_INDENT;", "-\t\tint temp = 0;", "-\t\tfor (int i = 0; i < shape.length/2; i++) {", "-\t\t\tif (shape[2*i] > rightTabEdge) {", "-\t\t\t\tif (temp == 0 && i > 0) {", "-\t\t\t\t\ttemp = shape[2*i-1];", "-\t\t\t\t} else {", "-\t\t\t\t\ttemp = y + height + 1;", "-\t\t\t\t}", "-\t\t\t\tshape[2*i] = rightTabEdge;", "-\t\t\t\tshape[2*i+1] = temp;", "-\t\t\t}", "-\t\t}", "-\t", "-\tif ( x < rightTabEdge) {", "-\t\t// Limit drawing area of tab", "-\t\tRegion r = new Region();", "-\t\tr.subtract(r); //clear", "-\t\tRegion clipping = new Region();", "-\t\tgc.getClipping(clipping);", "-\t\tr.add(clipping);", "-\t\tr.intersect(new Rectangle(x, y, Math.min(width, rightTabEdge-x), height));", "-\t\tgc.setClipping(r);", "-\t", "-\t\t// draw Image", "-\t\tint xDraw = x + LEFT_MARGIN;", "-\t\tImage image = getImage();", "-\t\tif (image != null) {", "-\t\t\tRectangle imageBounds = image.getBounds();", "+", "+\t// draw Image", "+\tint xDraw = x + LEFT_MARGIN;", "+\tImage image = getImage();", "+\tif (image != null) {", "+\t\tRectangle imageBounds = image.getBounds();", "+\t\t// only draw image if it won't overlap with close button", "+\t\tint maxImageWidth = rightEdge - xDraw - RIGHT_MARGIN;", "+\t\tif (!parent.simple) maxImageWidth -= CTabFolder.CURVE_INDENT;", "+\t\tif (closeRect.width > 0) maxImageWidth -= closeRect.width + INTERNAL_SPACING;", "+\t\tif (closeRect.width == 0 || imageBounds.width < maxImageWidth) {", "-\t\t", "-\t\t// draw Text", "-\t\tint textWidth = x + width - xDraw - RIGHT_MARGIN;", "-\t\tif (closeRect.width > 0) textWidth -= closeRect.width + INTERNAL_SPACING;", "+\t}", "+\t", "+\t// draw Text", "+\tint textWidth = rightEdge - xDraw - RIGHT_MARGIN;", "+\tif (!parent.simple) textWidth -= CTabFolder.CURVE_INDENT;", "+\tif (closeRect.width > 0) textWidth -= closeRect.width + INTERNAL_SPACING;", "+\tif (textWidth > 0) {", "-\t\tif (parent.showClose || showClose) drawClose(gc);", "-\t\t", "-\t\t", "-\t\tgc.setClipping(clipping);", "-\t\tr.dispose();", "-\t\tclipping.dispose();", "+\tif (parent.showClose || showClose) drawClose(gc);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "97d92b8ebdd25507ad1f1b0e743d167e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 67, "methodNumberAfterChange": 49, "signatureBeforeChange": " \t \tint sendKeyEvent(int type, MacEvent mEvent, Event event)", "signatureAfterChange": "  boolean sendKeyEvent (int type, Event event)", "diff": ["+", "+boolean sendKeyEvent (int type, Event event) {", "+\tif (!super.sendKeyEvent (type, event)) {", "+\t\treturn false;", "+\t}", "+\tif (type != SWT.KeyDown) return true;", "+\tif (event.character == 0) return true;", "+\tif ((style & SWT.READ_ONLY) != 0) return false;", "+\tString oldText = \"\";", "+\tint charCount = getCharCount ();", "+\tPoint selection = getSelection ();", "+\tint start = selection.x, end = selection.y;", "+\tswitch (event.character) {", "+\t\tcase SWT.BS:", "+\t\t\tif (start == end) {", "+\t\t\t\tif (start == 0) return true;", "+\t\t\t\tstart = Math.max (0, start - 1);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase SWT.DEL:", "+\t\t\tif (start == end) {", "+\t\t\t\tif (start == charCount) return true;", "+\t\t\t\tend = Math.min (end + 1, charCount);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase SWT.CR:", "+\t\t\tif ((style & SWT.SINGLE) != 0) {", "+\t\t\t\tpostEvent (SWT.DefaultSelection);", "+\t\t\t\treturn true;", "+\t\t\t}", "+\t\t\toldText = DELIMITER;", "+\t\t\tbreak;", "+\t\tdefault:", "+\t\t\tif (event.character != '\\t' && event.character < 0x20) return true;", "+\t\t\toldText = new String (new char [] {event.character});", "+\t}", "+\tString newText = verifyText (oldText, start, end);", "+\tif (newText == null) return false;", "+\tif (charCount - (end - start) + newText.length () > textLimit) {", "+\t\treturn false;", "+\t}", "+\tif (newText != oldText) setTXNText (start, end, newText);", "+\t/*", "+\t* Post the modify event so that the character will be inserted", "+\t* into the widget when the modify event is delivered.  Normally,", "+\t* modify events are sent but it is safe to post the event here", "+\t* because this method is called from the event loop.", "+\t*/", "+\tpostEvent (SWT.Modify);", "+\treturn newText == oldText;", "+}", "-\t", "-\tint sendKeyEvent(int type, MacEvent mEvent, Event event) {", "-\t", "-\t\tint status= OS.kNoErr;\t// we handled the event", "-\t\t", "-\t\tif ((mEvent.getModifiers() & OS.cmdKey) != 0) {", "-\t\t\tint kind= mEvent.getKind();", "-\t\t\tint code= mEvent.getKeyCode();", "-\t\t\tswitch (code) {", "-\t\t\tcase 0:", "-\t\t\t\tif (kind == OS.kEventRawKeyDown)", "-\t\t\t\t\tselectAll();", "-\t\t\t\treturn status;", "-\t\t\tcase 7:", "-\t\t\t\tif (kind == OS.kEventRawKeyDown)", "-\t\t\t\t\tcut();", "-\t\t\t\treturn status;", "-\t\t\tcase 8:", "-\t\t\t\tif (kind == OS.kEventRawKeyDown)", "-\t\t\t\t\tcopy();", "-\t\t\t\treturn status;", "-\t\t\tcase 9:", "-\t\t\t\tif (kind == OS.kEventRawKeyDown || kind == OS.kEventRawKeyRepeat)", "-\t\t\t\t\tpaste();", "-\t\t\t\treturn status;", "-\t\t\tdefault:", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\tint eRefHandle= mEvent.getEventRef();", "-\t\tint nextHandler= mEvent.getNextHandler();", "-\t\tif (hooks (SWT.Verify)) {", "-", "-\t\t\t// extract characters from event", "-\t\t\tString unicode= mEvent.getText();", "-\t\t\tString text= unicode != null ? unicode : \"\";", "-\t\t\tString original= new String(text);", "-\t\t\t", "-\t\t\t// send verify event", "-\t\t\tint[] start= new int[1], end= new int[1];", "-\t\t\tOS.TXNGetSelection(fTX, start, end);", "-\t\t\t", "-\t\t\tif (text.length() == 1) {", "-\t\t\t\tswitch (text.charAt(0)) {", "-\t\t\t\tcase 0x08:", "-\t\t\t\t\tif (start[0] == end[0]) {", "-\t\t\t\t\t\tif (start[0] == 0)", "-\t\t\t\t\t\t\treturn status;", "-\t\t\t\t\t\tif (start[0] > 0)", "-\t\t\t\t\t\t\tstart[0]--;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\tString string= verifyText(original, start[0], end[0], event);", "-\t\t\tif (string == null)", "-\t\t\t\treturn status;\t// ignore event", "-\t\t\t\t", "-\t\t\tint l= string.length();", "-\t\t\tchar[] newChars= new char[l];", "-\t\t\tstring.getChars(0, l, newChars, 0);\t\t", "-\t\t\tif (true) {", "-\t\t\t\tOS.SetEventParameter(eRefHandle, OS.kEventParamTextInputSendText, OS.typeUnicodeText, newChars);", "-\t\t\t\tstatus= OS.CallNextEventHandler(nextHandler, eRefHandle);", "-\t\t\t} else {", "-\t\t\t\tOS.TXNSetSelection(fTX, start[0], end[0]);", "-\t\t\t\tOS.TXNSetData(fTX, newChars, OS.kTXNUseCurrentSelection, OS.kTXNUseCurrentSelection);", "-\t\t\t\tOS.TXNSetSelection(fTX, start[0], start[0]+newChars.length);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tstatus= OS.CallNextEventHandler(nextHandler, eRefHandle);", "-\t\t}", "-\t\t\t\t", "-\t\tsendEvent (SWT.Modify);", "-\t\t", "-\t\treturn status;", "-\t}"]}], "num": 61416}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66ec7320d1090b93408026edccfdb63d", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ad6f56ed41b2ddcc1bd4c9bd61a48ab6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "a5bbcc9ae65fa9d7a3e22ab191833c598750c1ee", "commitAfterChange": "006a22b19bc233a04968c9b45ed95b5fd4f1a22c", "methodNumberBeforeChange": 73, "methodNumberAfterChange": 73, "signatureBeforeChange": " int XStructureNotify (int w, int client_data, int call_data, int continue_to_dispatch)", "signatureAfterChange": " int XStructureNotify (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-\t\t\tif (reparented) return 0;", "-\t\t\tshort [] root_x = new short [1], root_y = new short [1];", "-\t\t\tOS.XtTranslateCoords (shellHandle, (short) 0, (short) 0, root_x, root_y);", "-\t\t\tint [] argList = {OS.XmNwidth, 0, OS.XmNheight, 0};", "-\t\t\tOS.XtGetValues (shellHandle, argList, argList.length / 2);\t", "-\t\t\txEvent.x = root_x [0];  xEvent.y = root_y [0];", "-\t\t\txEvent.width = argList [1];  xEvent.height = argList [3];", "+\t\t\tadjustTrim ();", "-\t\t\t// FALL THROUGH", "+\t\t\tbreak;", "-\t\t\tif (!reparented) return 0;", "-\t\t\tconfigured = false;", "-\t\t\tif (oldX != xEvent.x || oldY != xEvent.y) sendEvent (SWT.Move);", "-\t\t\tif (oldWidth != xEvent.width || oldHeight != xEvent.height) {", "+\t\t\tint [] root_x = new int [1], root_y = new int [1], child = new int [1];", "+\t\t\tOS.XTranslateCoordinates (xEvent.display, xEvent.window, OS.XDefaultRootWindow (xEvent.display), 0, 0, root_x, root_y, child);", "+\t\t\tif (!moved || oldX != root_x [0] || oldY != root_y [0]) {", "+\t\t\t\tmoved = true;", "+\t\t\t\toldX = root_x [0];", "+\t\t\t\toldY = root_y [0];", "+\t\t\t\tsendEvent (SWT.Move);", "+\t\t\t}", "+\t\t\tif (!resized || oldWidth != xEvent.width || oldHeight != xEvent.height) {", "-\t\t\t\tif (display.resizeCount == 0) {", "-\t\t\t\t\tsendEvent (SWT.Resize);", "-\t\t\t\t\tif (layout != null) layout (false);", "-\t\t\t\t}", "+\t\t\t\tif (display.resizeCount == 0) {", "+\t\t\t\t\tresized = true;", "+\t\t\t\t\toldWidth = xEvent.width;", "+\t\t\t\t\toldHeight = xEvent.height;", "+\t\t\t\t\tsendEvent (SWT.Resize);", "+\t\t\t\t\tif (layout != null) layout.layout (this, false);", "+\t\t\t\t}", "-\t\t\tif (xEvent.x != 0) oldX = xEvent.x;", "-\t\t\tif (xEvent.y != 0) oldY = xEvent.y;", "-\t\t\toldWidth = xEvent.width;", "-\t\t\toldHeight = xEvent.height;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "05249f51cf1b8ab6a20ba0ff4279f9bb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "21db765cd71e211ed7a422832ea159585ff971e3", "commitAfterChange": "cfc1e42b8ee7293ce68f0fd9dcd0e1b2cb8bb08a", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 92, "signatureBeforeChange": " \t\t \tprivate int handleMouseEvent(int nextHandler, int eRefHandle, int eventKind, int whichWindow)", "signatureAfterChange": " \t\t \tprivate int handleMouseEvent(int nextHandler, int eRefHandle, int eventKind, int whichWindow)", "diff": ["-\t\tif (MacUtil.HIVIEW)", "-\t\t\treturn OS.eventNotHandledErr;", "-\t\t", "-\t\tshort part= 0;", "+\t\t// retrieve window and window part from event", "-\t\t\t\twhichWindow= OS.GetControlOwner(fTrackedControl);", "+\t\t\t\t// in tracking mode: get window from control", "+\t\t\t\tint ww= OS.GetControlOwner(fTrackedControl);", "+\t\t\t\tint[] w= new int[1];", "+\t\t\t\tint rc= OS.GetEventParameter(eRefHandle, OS.kEventParamWindowRef, OS.typeWindowRef, null, 4, null, w);", "+\t\t\t\tif (rc == OS.noErr)", "+\t\t\t\t\twhichWindow= w[0];", "+\t\t\t\tif (whichWindow != ww)", "+\t\t\t\t\tSystem.out.println(\"Display.handleMouseEvent:  oops\");", "-\t\t\t\tpart= OS.FindWindow(where, w);", "+\t\t\t\tOS.FindWindow(where, w);", "+\t\t\t\tif (whichWindow == 0) {", "+\t\t\t\t\t// try to retrieve window from event", "+\t\t\t\t\tint rc= OS.GetEventParameter(eRefHandle, OS.kEventParamWindowRef, OS.typeWindowRef, null, 4, null, w);", "+\t\t\t\t\tif (rc == OS.noErr)", "+\t\t\t\t\t\twhichWindow= w[0];", "+\t\t\t\t\telse {", "+\t\t\t\t\t\t// the event is a MouseMoved event:", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\t} else {", "-\t\t\tpart= OS.FindWindow(where, new int[1]);", "-\t\t", "-\t\tif (whichWindow == 0 && eventKind == OS.kEventMouseDown) {", "-\t\t\tint[] wHandle= new int[1];", "-\t\t\tint rc= OS.GetEventParameter(eRefHandle, OS.kEventParamWindowRef, OS.typeWindowRef, null, wHandle.length*4, null, wHandle);", "-\t\t\tif (rc == OS.noErr)", "-\t\t\t\twhichWindow= wHandle[0];", "-\t\t}", "-\t\t", "+\t\t\t\t", "-\t\t\t//System.out.println(\"Display.handleMouseEvent:  whichWindow == 0\");", "+\t\t\t// give up", "-\t\t\tOS.QDGlobalToLocalPoint(OS.GetWindowPort(whichWindow), where);\t\t\t", "-\t\t\tint cntrl= MacUtil.findControlUnderMouse(where, whichWindow, null);", "+\t\t\tint cntrl= MacUtil.findControlUnderMouse(whichWindow, me, null);", "-\t\t\t\treturn OS.eventNotHandledErr;", "+\t\t\t\tbreak;", "-\t\t", "-\t\t\tif (part == OS.inContent || (MacUtil.HIVIEW && part == OS.inStructure))", "-\t\t\t\tif (false && MacUtil.HIVIEW) {", "-\t\t\t\t\treturn OS.eventNotHandledErr;", "-\t\t\t\t} else {", "-\t\t\t\t\tif (!handleContentClick(me, whichWindow))", "-\t\t\t\t\t\treturn OS.noErr;", "-\t\t\t\t}", "-", "-\t\t\tbreak;", "+\t\t\t\t\t\t\t", "+\t\t\treturn handleContentClick(me, whichWindow);", "-\t\t\tOS.QDGlobalToLocalPoint(OS.GetWindowPort(whichWindow), where);\t\t\t", "-\t\t\tint whichControl= MacUtil.findControlUnderMouse(where, whichWindow, null);", "+\t\t\tint whichControl= MacUtil.findControlUnderMouse(whichWindow, me, null);"]}], "num": 8022}
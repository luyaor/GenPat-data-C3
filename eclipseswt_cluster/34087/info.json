{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c49fad907bd113dce909749e27657366", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cd09783ed5e9f79f523ce093668a144", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/wpf/org/eclipse/swt/program/Program.java", "commitBeforeChange": "25e0a88282a8f52572829023c99494b77782afb9", "commitAfterChange": "4492e7490e450a65a8ceed26e7c2cb00d8b99b49", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  static Program getProgram (String key)", "signatureAfterChange": "  static Program getProgram (int key)", "diff": ["-static Program getProgram (String key) {", "+static Program getProgram (int key) {", "+\tint classesRoot = OS.Registry_ClassesRoot ();", "+\tint registryKey = OS.RegistryKey_OpenSubKey (classesRoot, key);", "+\tOS.GCHandle_Free (classesRoot);", "-\tString name = getKeyValue (key, false);", "-\tif (name == null || name.length () == 0) {", "-\t\tname = key;", "-\t}", "-", "+\tint name = getKeyValue (registryKey, false);", "+\tString programName = createJavaString (name == 0 ? key : name);", "+\tOS.GCHandle_Free (name);", "-\tString DEFAULT_COMMAND = \"\\\\shell\"; //$NON-NLS-1$", "-\tString defaultCommand = getKeyValue (key + DEFAULT_COMMAND, true);", "-\tif (defaultCommand == null || defaultCommand.length() == 0) defaultCommand = \"open\"; //$NON-NLS-1$", "-\tString COMMAND = \"\\\\shell\\\\\" + defaultCommand + \"\\\\command\"; //$NON-NLS-1$", "-\tString command = getKeyValue (key + COMMAND, true);", "-\tif (command == null || command.length () == 0) return null;", "-", "-\t/* Icon */", "-\tString DEFAULT_ICON = \"\\\\DefaultIcon\"; //$NON-NLS-1$", "-\tString iconName = getKeyValue (key + DEFAULT_ICON, true);", "-\tif (iconName == null) iconName = \"\"; //$NON-NLS-1$", "-", "+\tint shellCommand = createDotNetString (\"shell\");", "+\tint shellKey = OS.RegistryKey_OpenSubKey (registryKey, shellCommand);", "+\tOS.GCHandle_Free (shellCommand);", "+\tint command = 0;", "+\tif (shellKey != 0) {", "+\t\tcommand = getKeyValue (shellKey, true);", "+\t\tif (command == 0) {", "+\t\t\tint openCommand = createDotNetString (\"open\");", "+\t\t\tint openKey = OS.RegistryKey_OpenSubKey (shellKey, openCommand);", "+\t\t\tif (openKey != 0) {", "+\t\t\t\tint commandCommand = createDotNetString (\"command\");", "+\t\t\t\tint commandKey = OS.RegistryKey_OpenSubKey (openKey, commandCommand);", "+\t\t\t\tif (commandKey != 0) {", "+\t\t\t\t\tcommand = getKeyValue (commandKey, true);", "+\t\t\t\t\tOS.GCHandle_Free (commandKey);\t\t\t", "+\t\t\t\t}", "+\t\t\t\tOS.GCHandle_Free (commandCommand);", "+\t\t\t\tOS.GCHandle_Free (openKey);", "+\t\t\t}", "+\t\t\tOS.GCHandle_Free (openCommand);", "+\t\t}", "+\t}", "+\tOS.GCHandle_Free (shellKey);", "+\tint iconName = 0;", "+\tif (command != 0) {", "+\t\tint defaultIconCommand = createDotNetString (\"DefaultIcon\");", "+\t\tint defaultIconKey = OS.RegistryKey_OpenSubKey (registryKey, defaultIconCommand);", "+\t\tif (defaultIconKey != 0) {", "+\t\t\ticonName = getKeyValue (defaultIconKey, true);", "+\t\t\tOS.GCHandle_Free (defaultIconKey);", "+\t\t}", "+\t\tOS.GCHandle_Free (defaultIconCommand);", "+\t}", "+\tOS.GCHandle_Free (registryKey);", "+\tif (command == 0) return null;", "-\tprogram.name = name;", "-\tprogram.command = command;", "-\tprogram.iconName = iconName;", "+\tprogram.name = programName;", "+\tprogram.command = createJavaString (command);", "+\tOS.GCHandle_Free (command);", "+\tprogram.iconName = iconName != 0 ? createJavaString (iconName) : \"\";", "+\tOS.GCHandle_Free (iconName);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02fc529ac2724b5f8871dd8fe9a986a2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "e7fb43dbb2484659429530f9cab714cb6e3de9f3", "commitAfterChange": "d69b8bce251422ebdcfdac8edd7d2bcf938dfebd", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "\r \r static int getDesktop ()", "signatureAfterChange": " static int getDesktop( Display display )", "diff": ["-\r", "-static int getDesktop () {\r", "-\tFile root = new File (\"/proc\");\r", "-\tif (!root.exists () || !root.isDirectory ()) return DESKTOP_UNKNOWN;\r", "-\tFile [] procDirs = root.listFiles ();\r", "-\tfor (int i=0; i<procDirs.length; i++) {\r", "-\t\tString directory = procDirs [i].getAbsolutePath ();\r", "-\t\tFile file = new File (directory + \"/stat\");\r", "-\t\tif (file.exists ()) {\r", "-\t\t\tString procName = getProcName (file);\r", "-\t\t\tif (procName.indexOf (\"gnome\") >= 0) {\r", "-\t\t\t\treturn gnome_init() ? DESKTOP_GNOME : DESKTOP_UNKNOWN;\t\t\r", "-\t\t\t}\r", "-\t\t\tif (procName.indexOf (\"kdeinit\") >= 0) {\r", "-\t\t\t\treturn kde_init () ? DESKTOP_KDE : DESKTOP_UNKNOWN;\r", "-\t\t\t}\t\r", "-\t\t}\r", "-\t}\r", "-\treturn DESKTOP_UNKNOWN;\r", "-}\r", "+/* Determine the desktop for the given display. */", "+static int getDesktop( Display display ) {", "+\tif (display == null) return DESKTOP_UNKNOWN;", "+\t", "+\t// If the desktop type for this display is already known, return it.", "+\tInteger desktopValue = (Integer) display.getData( desktopData );", "+\tif (desktopValue != null) {", "+\t\treturn desktopValue.intValue();", "+\t}", "+\t", "+\t// Obtain the atoms for the various window manager signature properties.", "+\tint desktop = DESKTOP_UNKNOWN;", "+\tint xDisplay = display.xDisplay;", "+\tbyte[] gnomeName = Converter.wcsToMbcs (null, \"GNOME_NAME_SERVER\", true);", "+\tbyte[] cdeName   = Converter.wcsToMbcs (null, \"DTWM_IS_RUNNING\", true);", "+\tbyte[] kdeName   = Converter.wcsToMbcs (null, \"KWIN_RUNNING\", true);", "+\tint gnome = OS.XInternAtom( xDisplay, gnomeName, true );", "+\tint cde   = OS.XInternAtom( xDisplay, cdeName, true );", "+\tint kde   = OS.XInternAtom( xDisplay, kdeName, true );", "+\t", "+\t// Get the list of properties on the root window.", "+\tint   rootWindow = OS.XDefaultRootWindow( xDisplay );", "+\tint[] numProp = new int[1];", "+\tint   propList = OS.XListProperties( xDisplay, rootWindow, numProp );", "+\tif (propList == 0) return DESKTOP_UNKNOWN;", "+\tint[] property = new int[ numProp[0] ];", "+\tOS.memmove( property, propList, (property.length * 4) );", "+\tOS.XFree( propList );", "+\t", "+\t// A given WM (desktop) is active if the property exists on the root window.", "+\tfor (int index = 0; desktop == DESKTOP_UNKNOWN && index < property.length; index++) {", "+\t\tif (property[ index ] == OS.None) continue; // do not match atoms that do not exist", "+\t\tif (property[ index ] == gnome) {", "+\t\t\tif (gnome_init()) desktop = DESKTOP_GNOME;\t\t", "+\t\t}", "+\t\tif (property[ index ] == cde) {", "+\t\t\tif (cde_init( display )) desktop = DESKTOP_CDE;", "+\t\t}\t", "+\t\tif (property[ index ] == kde) {", "+\t\t\tif (kde_init()) desktop = DESKTOP_KDE;", "+\t\t}\t", "+\t}", "+\t", "+\t// Save the desktop type on the display itself.", "+\tdisplay.setData( desktopData, new Integer(desktop) );", "+\treturn desktop;", "+}"]}], "num": 34087}
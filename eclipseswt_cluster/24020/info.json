{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8ab0ebc1c34e0dbf3b4a5be117d4b239", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6526ad9595f8fe5ba9044c47d92ec52", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "81d15e3de64198e8365dcac773a7af3598424660", "commitAfterChange": "1e8ec5162da128616f5ac9793d199b9f944ca01d", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  void computeRuns()", "signatureAfterChange": "  void computeRuns()", "diff": ["-\tint textLength = text.length();", "+\tString segmentsText = getSegmentsText();", "+\tint textLength = segmentsText.length();", "-\ttext.getChars(0, textLength, chars, 1);", "+\tsegmentsText.getChars(0, textLength, chars, 1);", "-\thardBreaks[breakCount] = translateOffset(textLength);", "+\tint offsetCount = 0;", "+\tfor (int i = 0; i < chars.length; i++) {", "+\t\tchar c = chars[i];", "+\t\tif (c == LTR_MARK || c == RTL_MARK || c == ZWS) {", "+\t\t\toffsetCount++;", "+\t\t}", "+\t}", "+\tinvalidOffsets = new int[offsetCount];", "+\toffsetCount = 0;", "+\tfor (int i = 0; i < chars.length; i++) {", "+\t\tchar c = chars[i];", "+\t\tif (c == LTR_MARK || c == RTL_MARK || c == ZWS) {", "+\t\t\tinvalidOffsets[offsetCount++] = i;", "+\t\t}", "+\t}", "+", "+\thardBreaks[breakCount] = chars.length;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e432bbb7b8c573f6d2d0a9013d6f697", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "1e9a9b9a2f3b0161323b03292062cd8133cbbcb8", "commitAfterChange": "dec9fd8ce799a13104a343c8b185b7ed15925f00", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void computeRuns ()", "signatureAfterChange": "  void computeRuns ()", "diff": ["-\tif ((ascent != -1  || descent != -1) && segmentsText.length() > 0) {", "+\tchar[] chars = null;", "+\tint segementsLength = segmentsText.length();", "+\tif ((ascent != -1  || descent != -1) && segementsLength > 0) {", "-\t\tchar[] chars = new char[segmentsText.length() + lineCount];", "+\t\tchars = new char[segementsLength + lineCount * 2];", "-\t\t\tattribute.start_index = bytePos + (count * 3);", "-\t\t\tattribute.end_index = bytePos+ 3 + (count * 3);", "+\t\t\tattribute.start_index = bytePos + (count * (3 + 3));", "+\t\t\tattribute.end_index = bytePos+ 3 + 3 + (count * (3 + 3));", "-\t\t\tchars[pos + count] = OBJECT_REPLACEMENT_CHARACTER;", "-\t\t\tsegmentsText.getChars(oldPos, pos, chars,  oldPos + count);", "+\t\t\tchars[pos + count * 2] = ZWS;", "+\t\t\tchars[pos + count * 2 + 1] = ZWNBS;", "+\t\t\tsegmentsText.getChars(oldPos, pos, chars,  oldPos + count * 2);", "-\t\tsegmentsText.getChars(oldPos, segmentsText.length(), chars,  oldPos + count);", "+\t\tsegmentsText.getChars(oldPos, segementsLength, chars,  oldPos + count * 2);", "-\t}\t", "+\t} else {", "+\t\tchars = new char[segementsLength];", "+\t\tsegmentsText.getChars(0, segementsLength, chars, 0);", "+\t}", "+\tint offsetCount = 0;", "+\tfor (int i = 0; i < chars.length; i++) {", "+\t\tchar c = chars[i];", "+\t\tif (c == LTR_MARK || c == RTL_MARK || c == ZWNBS || c == ZWS) {", "+\t\t\toffsetCount++;", "+\t\t}", "+\t}", "+\tinvalidOffsets = new int[offsetCount];", "+\toffsetCount = 0;", "+\tfor (int i = 0; i < chars.length; i++) {", "+\t\tchar c = chars[i];", "+\t\tif (c == LTR_MARK || c == RTL_MARK || c == ZWNBS || c == ZWS) {", "+\t\t\tinvalidOffsets[offsetCount++] = i;", "+\t\t}", "+\t}"]}], "num": 24020}
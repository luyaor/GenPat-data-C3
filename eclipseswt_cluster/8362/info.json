{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68c43ea3a6cb3bb05fd9d05cb4bbb275", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6a16f9c31045b4be348bd9e3c60e670", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 50, "signatureBeforeChange": "  \tprivate boolean focus(boolean doClip, MacRect bounds)", "signatureAfterChange": "  void setCGClipping ()", "diff": ["+", "+void setCGClipping () {", "+\tif (data.control == 0) {", "+\t\tOS.CGContextScaleCTM(handle, 1, -1);", "+\t\tif (data.clipRgn != 0) {", "+\t\t\tOS.ClipCGContextToRegion(handle, new Rect(), data.clipRgn);", "+\t\t} else {", "+\t\t\tint rgn = OS.NewRgn();", "+\t\t\tOS.SetRectRgn(rgn, (short)-32768, (short)-32768, (short)32767, (short)32767);", "+\t\t\tOS.ClipCGContextToRegion(handle, new Rect(), rgn);", "+\t\t\tOS.DisposeRgn(rgn);", "+\t\t}", "+\t\tOS.CGContextScaleCTM(handle, 1, -1);", "+\t\treturn;", "+\t}", "+\tint window = OS.GetControlOwner(data.control);", "+\tint port = OS.GetWindowPort(window);", "+\tRect rect = new Rect();", "+\tOS.GetControlBounds(data.control, rect);", "+\tRect portRect = new Rect();", "+\tOS.GetPortBounds(port, portRect);", "+\tint portHeight = portRect.bottom - portRect.top;", "+\tOS.CGContextTranslateCTM(handle, -rect.left, portHeight - rect.top);", "+\tOS.CGContextScaleCTM(handle, 1, -1);", "+\tif (data.clipRgn != 0) { ", "+\t\tint rgn = OS.NewRgn();", "+\t\tOS.CopyRgn(data.clipRgn, rgn);", "+\t\tOS.OffsetRgn(rgn, rect.left, rect.top);", "+\t\tOS.SectRgn(data.visibleRgn, rgn, rgn);", "+\t\tOS.ClipCGContextToRegion(handle, portRect, rgn);", "+\t\tOS.DisposeRgn(rgn);", "+\t} else {", "+\t\tOS.ClipCGContextToRegion(handle, portRect, data.visibleRgn);", "+\t}", "+\tOS.CGContextScaleCTM(handle, 1, -1);", "+\tOS.CGContextTranslateCTM(handle, rect.left, -portHeight + rect.top);", "+}", "-", "-\tprivate boolean focus(boolean doClip, MacRect bounds) {", "-\t\t", "-\t\tif (fIsFocused && !fPendingClip) {", "-\t\t\treturn true;", "-\t\t}", "-", "-\t\t// save global state", "-\t\tOS.GetGWorld(fSavePort, fSaveGWorld);\t\t", "-\t\tOS.SetGWorld(handle, fSaveGWorld[0]);", "-\t\t", "-\t\tif (!doClip)", "-\t\t\treturn true;", "-\t\t", "-\t\tint dx= 0, dy= 0;", "-", "-\t\t// set origin of port using drawable bounds", "-\t\tif (data.controlHandle != 0) {", "-\t\t\tOS.GetControlBounds(data.controlHandle, fRect.getData());", "-\t\t\tdx= fRect.getX();", "-\t\t\tdy= fRect.getY();", "-\t\t\tOS.SetOrigin((short)-dx, (short)-dy);", "-\t\t\tMacPoint p= new MacPoint(-dx, -dy);", "-\t\t\tOS.QDSetPatternOrigin(p.getData());", "-\t\t}", "-\t\t// save clip region", "-\t\tOS.GetClip(fSaveClip);", "-\t\t", "-\t\t// calculate new clip based on the controls bound and GC clipping region", "-\t\tif (data.controlHandle != 0) {", "-\t\t\t", "-\t\t\tint result= OS.NewRgn();", "-\t\t\tMacUtil.getVisibleRegion(data.controlHandle, result, true);", "-\t\t\tOS.OffsetRgn(result, (short)-dx, (short)-dy);", "-", "-\t\t\t// clip against damage ", "-\t\t\tif (fDamageRgn != 0) {", "-\t\t\t\tint dRgn= OS.NewRgn();", "-\t\t\t\tOS.CopyRgn(fDamageRgn, dRgn);", "-\t\t\t\tOS.OffsetRgn(dRgn, (short)-dx, (short)-dy);", "-\t\t\t\tOS.SectRgn(result, dRgn, result);", "-\t\t\t}", "-\t\t\t", "-\t\t\t// clip against GC clipping region", "-\t\t\tif (data.clipRgn != 0) {", "-\t\t\t\tOS.SectRgn(result, data.clipRgn, result);", "-\t\t\t}", "-\t\t\t\t", "-\t\t\tOS.SetClip(result);", "-\t\t\tif (bounds != null)", "-\t\t\t\tOS.GetRegionBounds(result, bounds.getData());", "-\t\t\tOS.DisposeRgn(result);", "-\t\t\t", "-\t\t} else {", "-\t\t\t// clip against GC clipping region", "-\t\t\tif (data.clipRgn != 0) {", "-\t\t\t\tOS.SetClip(data.clipRgn);", "-\t\t\t\tif (bounds != null)", "-\t\t\t\t\tOS.GetRegionBounds(data.clipRgn, bounds.getData());", "-\t\t\t} else {", "-\t\t\t\tif (bounds != null)", "-\t\t\t\t\tbounds.set(0, 0, 0x8fff, 0x8fff);", "-\t\t\t}", "-\t\t}", "-\t\tfPendingClip= false;", "-\t\t", "-\t\treturn true;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f1021c190d02ca4ac6d8b823a66e23a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TreeColumn.java", "commitBeforeChange": "d60307042554a2ad80509163fd1d15e5566b488d", "commitAfterChange": "501cddef55d98c472a410dbb933c0adba1cf9644", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void pack ()", "signatureAfterChange": " public void pack ()", "diff": ["-\tint hwnd = parent.handle;", "+\tint hwnd = parent.handle, hwndHeader = parent.hwndHeader;", "+\tRECT headerRect = new RECT ();", "+\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, index, headerRect);", "-\tint cp = parent.getCodePage ();\t\t", "-\tRECT rect = new RECT ();", "-\tint flags = OS.DT_CALCRECT | OS.DT_NOPREFIX;", "-\t\t\tint hFont = -1;", "-\t\t\tif (item.cellFont != null) hFont = item.cellFont [index];", "+\t\t\tint hFont = item.cellFont != null ? item.cellFont [index] : -1;", "-\t\t\tif (index == 0) {", "-\t\t\t\tif ((parent.style & SWT.VIRTUAL) == 0 && !item.cached && !parent.painted) {", "-\t\t\t\t\ttvItem.mask = OS.TVIF_HANDLE | OS.TVIF_TEXT;", "-\t\t\t\t\ttvItem.pszText = OS.LPSTR_TEXTCALLBACK;", "-\t\t\t\t\tOS.SendMessage (hwnd, OS.TVM_SETITEM, 0, tvItem);", "-\t\t\t\t\ttvItem.mask = OS.TVIF_PARAM;", "-\t\t\t\t}", "-\t\t\t\trect.left = item.handle;", "-\t\t\t\tif (OS.SendMessage (hwnd, OS.TVM_GETITEMRECT, 1, rect) != 0) {", "-\t\t\t\t\tcolumnWidth = Math.max (columnWidth, rect.right);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tint imageWidth = 0, textWidth = 0;", "-\t\t\t\tImage image = item.images != null ? item.images [index] : null;", "-\t\t\t\tif (image != null) {", "-\t\t\t\t\tRectangle bounds = image.getBounds ();", "-\t\t\t\t\timageWidth = bounds.width;", "-\t\t\t\t}", "-\t\t\t\tString string = item.strings != null ? item.strings [index] : null;", "-\t\t\t\tif (string != null) {", "-\t\t\t\t\tTCHAR buffer = new TCHAR (cp, string, false);", "-\t\t\t\t\tif (hFont != -1) hFont = OS.SelectObject (hDC, hFont);", "-\t\t\t\t\tOS.DrawText (hDC, buffer, buffer.length (), rect, flags);", "-\t\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "-\t\t\t\t\ttextWidth = rect.right - rect.left;", "-\t\t\t\t}", "-\t\t\t\tcolumnWidth = Math.max (columnWidth, imageWidth + textWidth + Tree.INSET * 3);", "+\t\t\tif (hFont != -1) hFont = OS.SelectObject (hDC, hFont);", "+\t\t\tRECT itemRect = item.getBounds (index, true, true, false, false, false, hDC);", "+\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "+\t\t\tif (parent.hooks (SWT.MeasureItem)) {", "+\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "+\t\t\t\tGCData data = new GCData ();", "+\t\t\t\tdata.device = display;", "+\t\t\t\tdata.hFont = hFont;", "+\t\t\t\tGC gc = GC.win32_new (hDC, data);", "+\t\t\t\tEvent event = new Event ();", "+\t\t\t\tevent.item = item;", "+\t\t\t\tevent.gc = gc;", "+\t\t\t\tevent.index = index;", "+\t\t\t\tevent.x = itemRect.left;", "+\t\t\t\tevent.y = itemRect.top;", "+\t\t\t\tevent.width = itemRect.right - itemRect.left;", "+\t\t\t\tevent.height = itemRect.bottom - itemRect.top;", "+\t\t\t\tparent.sendEvent (SWT.MeasureItem, event);", "+\t\t\t\tevent.gc = null;", "+\t\t\t\tgc.dispose ();", "+\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "+\t\t\t\tif (isDisposed () || parent.isDisposed ()) break;", "+\t\t\t\t//itemRect.left = event.x;", "+\t\t\t\titemRect.right = event.x + event.width;", "+\t\t\tcolumnWidth = Math.max (columnWidth, itemRect.right - headerRect.left);", "-\tTCHAR buffer = new TCHAR (cp, text, false);", "+\tRECT rect = new RECT ();", "+\tint flags = OS.DT_CALCRECT | OS.DT_NOPREFIX;", "+\tTCHAR buffer = new TCHAR (parent.getCodePage (), text, false);", "-\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "-\t\theaderWidth += Tree.HEADER_EXTRA;", "-\t}", "+\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) headerWidth += Tree.HEADER_EXTRA;", "-\t\tint margin = 0, hwndHeader = parent.hwndHeader;", "+\t\tint margin = 0;"]}], "num": 8362}
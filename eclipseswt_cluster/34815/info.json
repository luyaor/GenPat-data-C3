{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e551b1ef6e93e4676606649b88364ba", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5eecad7515644404cec2df6ef2009286", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/gtk/org/eclipse/swt/browser/MozillaDelegate.java", "commitBeforeChange": "8a021d89105adb15defec05f4bb294256be0d2ff", "commitAfterChange": "41acd10ceebece3466a430c500d8003c98a28198", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  int getHandle ()", "signatureAfterChange": "  int getHandle ()", "diff": ["-\tif (eventCallback == null) {", "-\t\teventCallback = new Callback (getClass (), \"eventProc\", 3); //$NON-NLS-1$", "-\t\teventProc = eventCallback.getAddress ();", "-\t\tif (eventProc == 0) {", "-\t\t\tbrowser.dispose ();", "-\t\t\tMozilla.error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\t}", "-\t}", "-", "-\tint /*long*/ embedHandle = OS.gtk_hbox_new (false, 0);", "+\tembedHandle = OS.gtk_hbox_new (false, 0);", "-\t", "-\t/*", "-\t* Feature in Mozilla.  GtkEvents such as key down, key pressed may be consumed", "-\t* by Mozilla and never be received by the parent embedder.  The workaround", "-\t* is to find the top Mozilla gtk widget that receives all the Mozilla GtkEvents,", "-\t* i.e. the first child of the parent embedder. Then hook event callbacks and", "-\t* forward the event to the parent embedder before Mozilla received and consumed", "-\t* them.", "-\t*/", "-\tint /*long*/ list = OS.gtk_container_get_children (embedHandle);", "-\tif (list != 0) {", "-\t\tmozillaHandle = OS.g_list_data (list);", "-\t\tOS.g_list_free (list);", "-\t\t", "-\t\tif (mozillaHandle != 0) {\t\t\t", "-\t\t\tbrowser.getDisplay ().setData (ADD_WIDGET_KEY, new Object[] {new LONG (mozillaHandle), browser});", "-", "-\t\t\t/* Note. Callback to get events before Mozilla receives and consumes them. */", "-\t\t\tOS.g_signal_connect (mozillaHandle, OS.event, eventProc, 0);", "-\t\t\t", "-\t\t\t/* ", "-\t\t\t* Note.  Callback to get the events not consumed by Mozilla - and to block ", "-\t\t\t* them so that they don't get propagated to the parent handle twice.  ", "-\t\t\t* This hook is set after Mozilla and is therefore called after Mozilla's ", "-\t\t\t* handler because GTK dispatches events in their order of registration.", "-\t\t\t*/", "-\t\t\tOS.g_signal_connect (mozillaHandle, OS.key_press_event, eventProc, STOP_PROPOGATE);", "-\t\t\tOS.g_signal_connect (mozillaHandle, OS.key_release_event, eventProc, STOP_PROPOGATE);", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec8e2ed18bd8e23a21914c6564ee6bc5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/gtk/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "7b82040614a2bb52781f98435605d3c6f3c53a53", "commitAfterChange": "349efdd4b372c1f72709a73ea4250518e6edd2db", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["+\tif (eventCallback == null) {", "+\t\teventCallback = new Callback(Browser.class, \"eventProc\", 3);", "+\t\teventProc = eventCallback.getAddress();", "+\t\tif (eventProc == 0) error(SWT.ERROR_NO_MORE_CALLBACKS);", "+\t}", "+", "+\t/*", "+\t* Feature in Mozilla.  GtkEvents such as key down, key pressed may be consumed", "+\t* by Mozilla and never be received by the parent embedder.  The workaround", "+\t* is to find the top Mozilla gtk widget that receives all the Mozilla GtkEvents,", "+\t* i.e. the first child of the parent embedder. Then hook event callbacks and", "+\t* forward the event to the parent embedder before Mozilla received and consumed", "+\t* them.", "+\t*/", "+\tint /*long*/ list = OS.gtk_container_get_children(embedHandle);", "+\tif (list != 0) {", "+\t\tmozillaHandle = OS.g_list_data(list);", "+\t\tOS.g_list_free(list);", "+\t\t", "+\t\tif (mozillaHandle != 0) {\t\t\t", "+\t\t\tgetDisplay().setData(ADD_WIDGET_KEY, new Object[] {new Integer(mozillaHandle), this});", "+", "+\t\t\t/* Note. Callback to get events before Mozilla receives and consumes them. */", "+\t\t\tOS.g_signal_connect (mozillaHandle, OS.event, eventProc, 1);", "+\t\t\t", "+\t\t\t/* ", "+\t\t\t* Note.  Callback to get the events not consumed by Mozilla - and to block ", "+\t\t\t* them so that they don't get propagated to the parent handle twice.  ", "+\t\t\t* This hook is set after Mozilla and is therefore called after Mozilla's ", "+\t\t\t* handler because GTK dispatches the event in the order of registration.", "+\t\t\t*/", "+\t\t\tOS.g_signal_connect (mozillaHandle, OS.key_press_event, eventProc, 2);", "+\t\t}", "+\t}", "+\t", "-\t\t\t\tcase SWT.Dispose: onDispose(); break;", "+\t\t\t\tcase SWT.Dispose: onDispose(event.display); break;", "+}"]}], "num": 34815}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2b74f7c7eccf0d2da14a4faa9c2d2d38", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4fc0dba83e57134adc35d1ebb6c8551", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "d4eb14ad4f7b1074d4935c2b9211f94b2750616d", "commitAfterChange": "7d562ae8941ad5655a314eac8dd19e3b2aaef50c", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "\r \r void createItem (MenuItem item, int index)", "signatureAfterChange": "\r \r void createItem (MenuItem item, int index)", "diff": ["-\tint count = OS.GetMenuItemCount (handle);\r", "+\tint count = GetMenuItemCount (handle);\r", "-\t/*\r", "-\t* Bug in Windows.  For some reason, when InsertMenuItem ()\r", "-\t* is used to insert an item without text, it is not possible\r", "-\t* to use SetMenuItemInfo () to set the text at a later time.\r", "-\t* The fix is to insert the item with an empty string.\r", "-\t*/\r", "-\tint hHeap = OS.GetProcessHeap ();\r", "-\tint pszText = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, 1);\r", "-\tMENUITEMINFO info = new MENUITEMINFO ();\r", "-\tinfo.cbSize = MENUITEMINFO.sizeof;\r", "-\tinfo.fMask = OS.MIIM_ID | OS.MIIM_TYPE;\r", "-\tinfo.wID = item.id;\r", "-\tinfo.fType = item.widgetStyle ();\r", "-\tinfo.dwTypeData = pszText;\r", "-\tboolean success = OS.InsertMenuItem (handle, index, true, info);\r", "-\tif (pszText != 0) OS.HeapFree (hHeap, 0, pszText);\r", "+\tboolean success = false;\r", "+\tif (OS.IsWinCE) {\r", "+\t\tint flags = OS.MF_BYPOSITION;\r", "+\t\tif ((style & SWT.SEPARATOR) != 0) flags |= OS.MF_SEPARATOR;\r", "+\t\tsuccess = OS.InsertMenu (handle, index, flags, item.id, null); \r", "+\t} else {\r", "+\t\t/*\r", "+\t\t* Bug in Windows.  For some reason, when InsertMenuItem ()\r", "+\t\t* is used to insert an item without text, it is not possible\r", "+\t\t* to use SetMenuItemInfo () to set the text at a later time.\r", "+\t\t* The fix is to insert the item with an empty string.\r", "+\t\t*/\r", "+\t\tint hHeap = OS.GetProcessHeap ();\r", "+\t\tint pszText = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, TCHAR.sizeof);\r", "+\t\tMENUITEMINFO info = new MENUITEMINFO ();\r", "+\t\tinfo.cbSize = MENUITEMINFO.sizeof;\r", "+\t\tinfo.fMask = OS.MIIM_ID | OS.MIIM_TYPE;\r", "+\t\tinfo.wID = item.id;\r", "+\t\tinfo.fType = item.widgetStyle ();\r", "+\t\tinfo.dwTypeData = pszText;\r", "+\t\tsuccess = OS.InsertMenuItem (handle, index, true, info);\r", "+\t\tif (pszText != 0) OS.HeapFree (hHeap, 0, pszText);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da434b3f4464889b7836af405d9e01e9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "08627b8f2edae89ba88b83322a63b53be6640d9c", "commitAfterChange": "4eaa6e52c68deb9b1675aded171ec8dd4df1c383", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r public void setMenuBar (Menu menu)", "signatureAfterChange": "\r public void setMenuBar (Menu menu)", "diff": ["-\t\t\tboolean res = OS.SHCreateMenuBar (mbi);\r", "+\t\t\tboolean success = OS.SHCreateMenuBar (mbi);\r", "-\t\t\t/* Get ToolBar */\r", "-\t\t\tif (hwndCB != 0) hwndTB = OS.GetWindow (hwndCB, OS.GW_CHILD);\r", "+\t\t\t/* get toolbar */\r", "+\t\t\tif (success && hwndCB != 0) hwndTB = OS.GetWindow (hwndCB, OS.GW_CHILD);\r", "+\t\t\t\t\r", "+\t\t\t\tint cch = 128;\r", "+\t\t\t\tint hHeap = OS.GetProcessHeap ();\r", "+\t\t\t\tint byteCount = cch * TCHAR.sizeof;\r", "+\t\t\t\tint pszText = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, byteCount);\r", "+\t\t\t\tMENUITEMINFO mii = new MENUITEMINFO ();\r", "+\t\t\t\tmii.cbSize = MENUITEMINFO.sizeof;\r", "+\t\t\t\tmii.fMask = OS.MIIM_STATE | OS.MIIM_TYPE;\r", "+\t\t\t\tmii.dwTypeData = pszText;\r", "+\r", "-\t\t\t\t\t\t/* set text */\r", "-\t\t\t\t\t\tString string = item.getText();\r", "-\t\t\t\t\t\tint hHeap = OS.GetProcessHeap ();\r", "-\t\t\t\t\t\tTCHAR buffer = new TCHAR (0, string, true);\r", "-\t\t\t\t\t\tint byteCount = buffer.length () * TCHAR.sizeof;\r", "-\t\t\t\t\t\tint pszText = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, byteCount);\r", "-\t\t\t\t\t\tOS.MoveMemory (pszText, buffer, byteCount);\r", "+\t\t\t\t\t\t/* set text and state info */\r", "+\t\t\t\t\t\tMenu parent = item.parent;\r", "+\t\t\t\t\t\tint id = item.id;\r", "+\t\t\t\t\t\tint hMenu = parent.handle;\r", "+\t\t\t\t\t\t\t\t\t\t\t\t\r", "+\t\t\t\t\t\tmii.cch = cch;\r", "+\t\t\t\t\t\tsuccess = OS.GetMenuItemInfo (hMenu, i, true, mii);\r", "+\t\t\t\t\t\tif (!success) error (SWT.ERROR_INVALID_ARGUMENT);\r", "+\t\t\t\t\t\tboolean enabled = (mii.fState & (OS.MFS_DISABLED | OS.MFS_GRAYED)) == 0;\r", "+\t\t\t\t\t\tif (!enabled) {\r", "+\t\t\t\t\t\t\tinfo.dwMask |= OS.TBIF_STATE;\r", "+\t\t\t\t\t\t\tinfo.fsStyle = 0;\r", "+\t\t\t\t\t\t}\t\t\t\t\t\t\r", "-\t\t\t\t\t\tif (pszText != 0) OS.HeapFree (hHeap, 0, pszText);\r", "-\r", "-\t\t\t\t\t\t/* set state */\r", "-\t\t\t\t\t\tif (!item.isEnabled()) {\r", "-\t\t\t\t\t\t\tint fsState = 0;\r", "-\t\t\t\t\t\t\tOS.SendMessage (hwndTB, OS.TB_SETSTATE, item.id, fsState);\r", "-\t\t\t\t\t\t}\r", "+\t\t\t\tif (pszText != 0) OS.HeapFree (hHeap, 0, pszText);\r"]}], "num": 59583}
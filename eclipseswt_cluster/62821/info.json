{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "eb275dd6478e8ec1f4ac9e71020bac0f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac25602a2f0310f7de407dfc122e2cbd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "536a3067a0d520c981d7210614769b62674b0849", "commitAfterChange": "1839e6271defc2990d8b1fe9c3cca72d2e7f3199", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public void setContents(Object[] data, Transfer[] transferAgents)", "signatureAfterChange": "\r public void setContents(Object[] data, Transfer[] dataTypes)", "diff": ["-public void setContents(Object[] data, Transfer[] transferAgents){\r", "+public void setContents(Object[] data, Transfer[] dataTypes){\r", "-\tif (data == null) {\r", "-\t\tDND.error(SWT.ERROR_NOT_IMPLEMENTED);\r", "-\t}\r", "-\tif (transferAgents == null || data.length != transferAgents.length) {\r", "+\tif (data == null || dataTypes == null || data.length != dataTypes.length) {\r", "-\tfor (int i = 0; i < transferAgents.length; i++) {\r", "-\t\tString[] names = transferAgents[i].getTypeNames();\r", "+\tfor (int i = 0; i < dataTypes.length; i++) {\r", "+\t\tint[] ids = dataTypes[i].getTypeIds();\r", "+\t\tString[] names = dataTypes[i].getTypeNames();\r", "-\t\t\r", "-\t\t\tbyte[] bName = Converter.wcsToMbcs (null, names[j], false);\r", "-\t\t\ttransferData.type    = OS.XmInternAtom (xDisplay, bName, false);\r", "-\t\t\ttransferAgents[i].javaToNative(data[i], transferData);\r", "+\t\t\ttransferData.type = ids[j];\r", "+\t\t\tdataTypes[i].javaToNative(data[i], transferData);\r", "-\t\t\tif (transferData.result == 1 && transferData.format == 8){\r", "-\t\t\t\tbyte[] buffer = new byte[transferData.length];\r", "-\t\t\t\tOS.memmove(buffer, transferData.pValue, transferData.length);\r", "-\t\t\t\tstatus = OS.XmClipboardCopy(xDisplay, xWindow, item_id[0], bName, buffer, transferData.length, 0, null);\r", "+\t\t\tif (transferData.result == 1) {\r", "+\t\t\t\tif (transferData.format == 8){\r", "+\t\t\t\t\tbyte[] buffer = new byte[transferData.length];\r", "+\t\t\t\t\tOS.memmove(buffer, transferData.pValue, transferData.length);\r", "+\t\t\t\t\tbyte[] bName = Converter.wcsToMbcs(null, names[j], true);\r", "+\t\t\t\t\tstatus = OS.XmClipboardCopy(xDisplay, xWindow, item_id[0], bName, buffer, transferData.length, 0, null);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7848a185036cafd5dc4ad852d65b5445", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "13c9e3869b0e39928c07f59c6669533020de611a", "commitAfterChange": "5a18b227e248dbcd7e352f9c9d08f49d1696ab1c", "methodNumberBeforeChange": 88, "methodNumberAfterChange": 88, "signatureBeforeChange": " boolean setItemSize()", "signatureAfterChange": " boolean setItemSize()", "diff": ["-\tint[] widths = new int[items.length];", "-\twidths = new int[items.length];", "+\tif (items.length == 0) return changed;", "+", "+\tint[] widths;", "-\tfor (int i = 0; i < items.length; i++) {", "-\t\twidths[i] = items[i].preferredWidth(gc, i == selectedIndex, false);", "-\t}\t", "-\tif (items.length > 0) {", "-\t\tint totalWidth = 0;", "-\t\tint tabAreaWidth = size.x - borderLeft - borderRight - 3;", "-\t\tif (showMin) tabAreaWidth -= BUTTON_SIZE;", "-\t\tif (showMax) tabAreaWidth -= BUTTON_SIZE;", "-\t\tif (topRightAlignment == SWT.RIGHT && topRight != null) {", "-\t\t\tPoint rightSize = topRight.computeSize(SWT.DEFAULT, SWT.DEFAULT, false);", "-\t\t\ttabAreaWidth -= rightSize.x + 3;", "+\tint tabAreaWidth = size.x - borderLeft - borderRight - 3;", "+\tif (showMin) tabAreaWidth -= BUTTON_SIZE;", "+\tif (showMax) tabAreaWidth -= BUTTON_SIZE;", "+\tif (topRightAlignment == SWT.RIGHT && topRight != null) {", "+\t\tPoint rightSize = topRight.computeSize(SWT.DEFAULT, SWT.DEFAULT, false);", "+\t\ttabAreaWidth -= rightSize.x + 3;", "+\t}", "+\tif (!simple) tabAreaWidth -= curveWidth - 2*curveIndent;", "+\ttabAreaWidth = Math.max(0, tabAreaWidth);", "+\t", "+\t// First, try the minimum tab size at full compression.", "+\tint minWidth = 0;", "+\tint[] minWidths = new int[items.length];\t", "+\tfor (int i = 0; i < minWidths.length; i++) {", "+\t\tminWidths[i] = items[i].preferredWidth(gc, i == selectedIndex, true);", "+\t\tminWidth += minWidths[i];", "+\t}", "+\tif (minWidth > tabAreaWidth) {", "+\t\t// full compression required and a chevron", "+\t\tshowChevron = items.length > 1;", "+\t\tif (showChevron) tabAreaWidth -= 3*BUTTON_SIZE/2;", "+\t\twidths = minWidths;", "+\t\tint index = selectedIndex != -1 ? selectedIndex : 0;", "+\t\tif (tabAreaWidth < widths[index]) {", "+\t\t\twidths[index] = Math.max(0, tabAreaWidth);", "-\t\tif (!simple) tabAreaWidth -= curveWidth - 2*curveIndent;", "-\t\ttabAreaWidth = Math.max(0, tabAreaWidth);", "-\t\tint count = items.length;", "-\t\tfor (int i = 0 ; i < count; i++) {", "-\t\t\ttotalWidth += widths[i];", "+\t} else {", "+\t\tint maxWidth = 0;", "+\t\tint[] maxWidths = new int[items.length];", "+\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\tmaxWidths[i] = items[i].preferredWidth(gc, i == selectedIndex, false);", "+\t\t\tmaxWidth += maxWidths[i];", "-\t\tif (totalWidth > tabAreaWidth) {", "-\t\t\t// try maximum compression size", "-\t\t\ttotalWidth = 0;", "-\t\t\tint[] minWidths = new int[items.length];", "-\t\t\tfor (int i = 0 ; i < count; i++) {", "-\t\t\t\tminWidths[i] = items[i].preferredWidth(gc, i == selectedIndex, true);", "-\t\t\t\ttotalWidth += minWidths[i];", "+\t\tif (maxWidth <= tabAreaWidth) {", "+\t\t\t// no compression required", "+\t\t\twidths = maxWidths;", "+\t\t} else {", "+\t\t\t// determine compression for each item", "+\t\t\tint extra = (tabAreaWidth - minWidth) / items.length;", "+\t\t\twhile (true) {", "+\t\t\t\tint large = 0, totalWidth = 0;", "+\t\t\t\tfor (int i = 0 ; i < items.length; i++) {", "+\t\t\t\t\tif (maxWidths[i] > minWidths[i] + extra) {", "+\t\t\t\t\t\ttotalWidth += minWidths[i] + extra;", "+\t\t\t\t\t\tlarge++;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\ttotalWidth += maxWidths[i];", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (totalWidth >= tabAreaWidth) {", "+\t\t\t\t\textra--;", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tif (large == 0 || tabAreaWidth - totalWidth < large) break;", "+\t\t\t\textra++;", "-\t\t\tif (totalWidth > tabAreaWidth) {", "-\t\t\t\t//  maximum compression required and a chevron", "-\t\t\t\tshowChevron = items.length > 1;", "-\t\t\t\tif (showChevron) tabAreaWidth -= 3*BUTTON_SIZE/2;", "-\t\t\t\twidths = minWidths;", "-\t\t\t\tint index = selectedIndex != -1 ? selectedIndex : 0;", "-\t\t\t\tif (tabAreaWidth < widths[index]) {", "-\t\t\t\t\twidths[index] = Math.max(0, tabAreaWidth);", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\t// determine compression for each item", "-\t\t\t\tint extra = (tabAreaWidth - totalWidth) / items.length;", "-\t\t\t\tint large = 0;", "-\t\t\t\twhile (true) {", "-\t\t\t\t\ttotalWidth = 0;", "-\t\t\t\t\tlarge = 0;", "-\t\t\t\t\tfor (int i = 0 ; i < count; i++) {", "-\t\t\t\t\t\tif (widths[i] > minWidths[i] + extra) {", "- \t\t\t\t\t\t\ttotalWidth += minWidths[i] + extra;", "-\t\t\t\t\t\t\tlarge++;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\ttotalWidth += widths[i];", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (totalWidth >= tabAreaWidth) {", "-\t\t\t\t\t\textra--;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (large == 0 ||tabAreaWidth - totalWidth < large) break;", "-\t\t\t\t\textra++;", "-\t\t\t\t}", "-\t\t\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\t\t\twidths[i] = Math.min(widths[i], minWidths[i] + extra);", "-\t\t\t\t}\t", "+\t\t\twidths = new int[items.length];", "+\t\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\t\twidths[i] = Math.min(maxWidths[i], minWidths[i] + extra);", "-\t", "+\tgc.dispose();", "+", "-\tgc.dispose();"]}], "num": 62821}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c737a4380ae125e5d8dc4767f45e9d68", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "40ab2a9158c4b34aedec4c90a26c1379", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["-\tint /*long*/ cairo = data.cairo;", "+\tlong /*int*/ cairo = data.cairo;", "-\t\tint /*long*/[] attrs = new int /*long*/[1];", "+\t\tlong /*int*/[] attrs = new long /*int*/[1];", "-\t\tint /*long*/ ptr = OS.pango_layout_get_text(layout);", "-\t\tint /*long*/ iter = OS.pango_layout_get_iter(layout);", "+\t\tlong /*int*/ ptr = OS.pango_layout_get_text(layout);", "+\t\tlong /*int*/ iter = OS.pango_layout_get_iter(layout);", "-\t\t\t\tint /*long*/ ptr = OS.pango_layout_get_text(layout);", "+\t\t\t\tlong /*int*/ ptr = OS.pango_layout_get_text(layout);", "-\t\t\tint /*long*/ ptr = OS.pango_layout_get_text(layout);", "+\t\t\tlong /*int*/ ptr = OS.pango_layout_get_text(layout);", "-\t\t\t\tint /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);", "+\t\t\t\tlong /*int*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f2d4726d486010e4362474b14f76be0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ColorDialog.java", "commitBeforeChange": "fe0ebc5087a885bb876f5273be443716ad862e78", "commitAfterChange": "cca6fa301c44053938f49fd91649a58044002d08", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public RGB open ()", "signatureAfterChange": "\r public RGB open ()", "diff": ["-\tint hwndOwner = 0;\r", "-\tif (parent != null) hwndOwner = parent.handle;\r", "+\tint hwndOwner = parent.handle;\r", "-\t/* Open the dialog */\r", "-\tint hHeap = OS.GetProcessHeap ();\r", "-\tint lpCustColors = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, 16 * 4);\r", "+\t/* Allocate the Custom Colors */\r", "+\tDisplay display = parent.getDisplay ();\r", "+\tif (display.lpCustColors == 0) {\r", "+\t\tint hHeap = OS.GetProcessHeap ();\r", "+\t\tdisplay.lpCustColors = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, 16 * 4);\r", "+\t}\r", "+\t\r", "+\t/* Open the dialog */\t\r", "-\tlpcc.lpCustColors = lpCustColors;\r", "+\tlpcc.lpCustColors = display.lpCustColors;\r", "-\t/* Free the OS memory */\r", "-\tif (lpCustColors != 0) OS.HeapFree (hHeap, 0, lpCustColors);\r", "+\t/* Free the Custom Colors */\r", "+\t/*\r", "+\t* This code is intentionally commented.  Currently,\r", "+\t* there is exactly one set of custom colors per display.\r", "+\t* The memory associated with these colors is released\r", "+\t* when the display is disposed.\r", "+\t*/\r", "+//\tif (lpCustColors != 0) OS.HeapFree (hHeap, 0, lpCustColors);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baca1b8448ff5c4efc1472220cfde990", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["-\tint /*long*/ hdc = gc.handle;", "+\tlong /*int*/ hdc = gc.handle;", "-\tint /*long*/ gdipGraphics = data.gdipGraphics;", "+\tlong /*int*/ gdipGraphics = data.gdipGraphics;", "-\tint /*long*/ gdipForeground = 0;", "-\tint /*long*/ gdipLinkColor = 0;", "+\tlong /*int*/ gdipForeground = 0;", "+\tlong /*int*/ gdipLinkColor = 0;", "-\tint /*long*/ gdipSelBackground = 0, gdipSelForeground = 0, gdipFont = 0, lastHFont = 0;", "-\tint /*long*/ selBackground = 0;", "+\tlong /*int*/ gdipSelBackground = 0, gdipSelForeground = 0, gdipFont = 0, lastHFont = 0;", "+\tlong /*int*/ selBackground = 0;", "-\t\t\t\t\t\tint /*long*/ hFont = getItemFont(run);", "+\t\t\t\t\t\tlong /*int*/ hFont = getItemFont(run);", "-\t\t\t\t\t\t\tint /*long*/ oldFont = OS.SelectObject(hdc, hFont);", "+\t\t\t\t\t\t\tlong /*int*/ oldFont = OS.SelectObject(hdc, hFont);", "-\t\t\t\t\t\tint /*long*/ gdipFg = gdipForeground;", "+\t\t\t\t\t\tlong /*int*/ gdipFg = gdipForeground;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63a240c1d6c3950fcf976a1b78d9fa8b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public FontData open ()", "signatureAfterChange": " public FontData open ()", "diff": ["-\tint /*long*/ hwndOwner = parent.handle;", "-\tint /*long*/ hwndParent = parent.handle;", "+\tlong /*int*/ hwndOwner = parent.handle;", "+\tlong /*int*/ hwndParent = parent.handle;", "-\tint /*long*/ hHeap = OS.GetProcessHeap ();", "+\tlong /*int*/ hHeap = OS.GetProcessHeap ();", "-\tint /*long*/ lpLogFont = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, LOGFONT.sizeof);", "+\tlong /*int*/ lpLogFont = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, LOGFONT.sizeof);", "-\t\tint /*long*/ hDC = OS.GetDC (0);", "+\t\tlong /*int*/ hDC = OS.GetDC (0);", "-\t\tint /*long*/ hDC = OS.GetDC(0);", "+\t\tlong /*int*/ hDC = OS.GetDC(0);", "-\t\t\tint /*long*/ hFont = OS.CreateFontIndirect(logFont);", "-\t\t\tint /*long*/ oldFont = OS.SelectObject(hDC, hFont);", "+\t\t\tlong /*int*/ hFont = OS.CreateFontIndirect(logFont);", "+\t\t\tlong /*int*/ oldFont = OS.SelectObject(hDC, hFont);"]}], "num": 38113}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ab2c71af3aac12dfe8759c1b37263937", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53cac5adb01749152403a048fbbd5ac0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "d91e4b5ecfdff8b11aa847ae6afe5f72b8c3b795", "commitAfterChange": "65a88b2ecdae53a2eb10eb4e1bec2fff604f4b33", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r private int dragProcCallback(int widget, int client_data, int call_data)", "signatureAfterChange": "\r private int dragProcCallback(int widget, int client_data, int call_data)", "diff": ["-\tevent.operations = osOpToOp(callbackData.operations);\r", "+\tint allowedOperations = osOpToOp(callbackData.operations);\r", "+\tevent.operations = allowedOperations;\r", "-\tevent.detail  = osOpToOp(callbackData.operation);\r", "-\r", "+\t\r", "-\t\t\t\tdragOverHeartbeat = new Runnable() {\r", "-\t\t\t\t\tpublic void run() {\r", "-\t\t\t\t\t\tif (control.isDisposed() || dragOverStart == 0) return;\r", "-\t\t\t\t\t\tlong time = System.currentTimeMillis();\r", "-\t\t\t\t\t\tint delay = DRAGOVER_HYSTERESIS;\r", "-\t\t\t\t\t\tif (time >= dragOverStart) {\r", "-\t\t\t\t\t\t\tif (selectedDataType == null) {\r", "-\t\t\t\t\t\t\t\tselectedDataType = dragOverEvent.dataTypes[0];\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tDNDEvent event = new DNDEvent();\r", "-\t\t\t\t\t\t\tevent.widget = control;\r", "-\t\t\t\t\t\t\tevent.time = (int)time;\r", "-\t\t\t\t\t\t\tevent.x = dragOverEvent.x;\r", "-\t\t\t\t\t\t\tevent.y = dragOverEvent.y;\r", "-\t\t\t\t\t\t\tevent.dataTypes  = dragOverEvent.dataTypes;\r", "-\t\t\t\t\t\t\tevent.feedback = DND.FEEDBACK_SELECT;\r", "-\t\t\t\t\t\t\tevent.operations = dragOverEvent.operations;\r", "-\t\t\t\t\t\t\tevent.dataType  = selectedDataType;\r", "-\t\t\t\t\t\t\tevent.detail  = dragOverEvent.detail;\r", "-\t\t\t\t\t\t\tnotifyListeners(DND.DragOver, event);\r", "-\t\t\t\t\t\t\teffect.show(event.feedback, event.x, event.y);\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tdelay = (int)(dragOverStart - time);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tcontrol.getDisplay().timerExec(delay, dragOverHeartbeat);\r", "+\t\t\t\tevent.detail = osOpToOp(callbackData.operation);\r", "+\t\t\t\tif ((getStyle() & DND.DROP_DEFAULT) != 0) {\r", "+\t\t\t\t\tint xDisplay = getDisplay().xDisplay;\r", "+\t\t\t\t\tint xWindow = OS.XDefaultRootWindow (xDisplay);\r", "+\t\t\t\t\tint [] unused = new int [1];\r", "+\t\t\t\t\tint[] mask_return = new int[1];\r", "+\t\t\t\t\tOS.XQueryPointer (xDisplay, xWindow, unused, unused, unused, unused, unused, unused, mask_return);\r", "+\t\t\t\t\tint mask = mask_return[0];\r", "+\t\t\t\t\tif ((mask & OS.ShiftMask) == 0 && (mask & OS.ControlMask) == 0) {\r", "+\t\t\t\t\t\tevent.detail = DND.DROP_DEFAULT;\r", "-\t\t\t\t};\r", "+\t\t\t\t}\r", "-\t\t\t\t\r", "-\t\t\t\tdragOverHeartbeat.run();\r", "-\t\t\t\r", "+\t\t\t\tevent.detail = lastOperation;\r", "+\t\t\t\tevent.detail = osOpToOp(callbackData.operation);\r", "+\t\t\t\tif ((getStyle() & DND.DROP_DEFAULT) != 0) {\r", "+\t\t\t\t\tint xDisplay = getDisplay().xDisplay;\r", "+\t\t\t\t\tint xWindow = OS.XDefaultRootWindow (xDisplay);\r", "+\t\t\t\t\tint [] unused = new int [1];\r", "+\t\t\t\t\tint[] mask_return = new int[1];\r", "+\t\t\t\t\tOS.XQueryPointer (xDisplay, xWindow, unused, unused, unused, unused, unused, unused, mask_return);\r", "+\t\t\t\t\tint mask = mask_return[0];\r", "+\t\t\t\t\tif ((mask & OS.ShiftMask) == 0 && (mask & OS.ControlMask) == 0) {\r", "+\t\t\t\t\t\tevent.detail = DND.DROP_DEFAULT;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\tif (event.detail == DND.DROP_DEFAULT) {\r", "+\t\tevent.detail = DND.DROP_MOVE;\r", "+\t}\r", "-\tint lastOperation = DND.DROP_NONE;\r", "-\tif (selectedDataType != null && ((event.detail & osOpToOp(callbackData.operations)) == event.detail)) {\r", "+\tlastOperation = DND.DROP_NONE;\r", "+\tif (selectedDataType != null && (event.detail & allowedOperations) != 0) {\r", "-\t\r", "-\r", "+\t\r", "+\tif (dragOverHeartbeat == null) {\r", "+\t\tdragOverHeartbeat = new Runnable() {\r", "+\t\t\t\t\tpublic void run() {\r", "+\t\t\t\t\t\tif (control.isDisposed() || dragOverStart == 0) return;\r", "+\t\t\t\t\t\tlong time = System.currentTimeMillis();\r", "+\t\t\t\t\t\tint delay = DRAGOVER_HYSTERESIS;\r", "+\t\t\t\t\t\tif (time >= dragOverStart) {\r", "+\t\t\t\t\t\t\tif (selectedDataType == null) {\r", "+\t\t\t\t\t\t\t\tselectedDataType = dragOverEvent.dataTypes[0];\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tDNDEvent event = new DNDEvent();\r", "+\t\t\t\t\t\t\tevent.widget = control;\r", "+\t\t\t\t\t\t\tevent.time = (int)time;\r", "+\t\t\t\t\t\t\tevent.x = dragOverEvent.x;\r", "+\t\t\t\t\t\t\tevent.y = dragOverEvent.y;\r", "+\t\t\t\t\t\t\tevent.dataTypes  = dragOverEvent.dataTypes;\r", "+\t\t\t\t\t\t\tevent.feedback = DND.FEEDBACK_SELECT;\r", "+\t\t\t\t\t\t\tint allowedOperations = dragOverEvent.operations;\r", "+\t\t\t\t\t\t\tevent.operations = allowedOperations;\r", "+\t\t\t\t\t\t\tevent.dataType  = selectedDataType;\r", "+\t\t\t\t\t\t\tevent.detail  = lastOperation;\r", "+\t\t\t\t\t\t\tnotifyListeners(DND.DragOver, event);\r", "+\t\t\t\t\t\t\teffect.show(event.feedback, event.x, event.y);\r", "+\t\t\t\t\t\t\tselectedDataType = null;\r", "+\t\t\t\t\t\t\tfor (int i = 0; i < dataTypes.length; i++) {\r", "+\t\t\t\t\t\t\t\tif (dataTypes[i].equals(event.dataType)) {\r", "+\t\t\t\t\t\t\t\t\tselectedDataType = event.dataType;\r", "+\t\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tlastOperation = DND.DROP_NONE;\r", "+\t\t\t\t\t\t\tif (selectedDataType != null && ((event.detail & allowedOperations) == event.detail)) {\r", "+\t\t\t\t\t\t\t\tlastOperation = event.detail;\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tdelay = (int)(dragOverStart - time);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tcontrol.getDisplay().timerExec(delay, dragOverHeartbeat);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t};\r", "+\t\t\t\tdragOverHeartbeat.run();\r", "+\t}\r", "+\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc9e3d9494444eb18e60ba5a03badb2a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "f6abf83ae0c88087bb20795446e5861999c785df", "commitAfterChange": "08ad5fbcf2dcc5dad41e05624d651c29c70219ce", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 107, "signatureBeforeChange": "  void printWidget (int hwnd, int hdc, GC gc)", "signatureAfterChange": "  void printWidget (int hwnd, int hdc, GC gc)", "diff": ["+\t\t/*", "+\t\t* Bug in Windows.  When PrintWindow() will only draw that", "+\t\t* portion of a control that is not obscured by the shell.", "+\t\t* The fix is temporarily reparent the window to the desktop,", "+\t\t* call PrintWindow() then reparent the window back.", "+\t\t*/", "+\t\tint /*long*/ hwndParent = OS.GetParent (hwnd);", "+\t\tint /*long*/ hwndShell = hwndParent;", "+\t\twhile (OS.GetParent (hwndShell) != 0) {", "+\t\t\tif (OS.GetWindow (hwndShell, OS.GW_OWNER) != 0) break;", "+\t\t\thwndShell = OS.GetParent (hwndShell);", "+\t\t}", "+\t\tRECT rect1 = new RECT ();", "+\t\tOS.GetWindowRect (hwnd, rect1);", "+\t\tRECT rect2 = new RECT ();", "+\t\tOS.GetWindowRect (hwndShell, rect2);", "+\t\tOS.IntersectRect (rect2, rect1, rect2);", "+\t\tboolean fixPrintWindow = !OS.EqualRect (rect2, rect1);", "+\t\tint bits = OS.GetWindowLong (hwnd, OS.GWL_STYLE);", "+\t\tif (fixPrintWindow) {", "+\t\t\tint x = OS.GetSystemMetrics (OS.SM_XVIRTUALSCREEN);", "+\t\t\tint y = OS.GetSystemMetrics (OS.SM_YVIRTUALSCREEN);\t", "+\t\t\tint width = OS.GetSystemMetrics (OS.SM_CXVIRTUALSCREEN);", "+\t\t\tint height = OS.GetSystemMetrics (OS.SM_CYVIRTUALSCREEN);", "+\t\t\tint flags = OS.SWP_NOSIZE | OS.SWP_NOZORDER | OS.SWP_NOACTIVATE | OS.SWP_DRAWFRAME;", "+\t\t\tOS.DefWindowProc (hwnd, OS.WM_SETREDRAW, 0, 0);", "+\t\t\tSetWindowPos (hwnd, 0, x + width, y + height, 0, 0, flags);", "+\t\t\tOS.SetParent (hwnd, 0);", "+\t\t\tOS.DefWindowProc (hwnd, OS.WM_SETREDRAW, 1, 0);", "+\t\t}", "+\t\tif (fixPrintWindow) {", "+\t\t\tOS.SetParent (hwnd, hwndParent);", "+\t\t\tOS.MapWindowPoints (0, hwndParent, rect1, 2);", "+\t\t\tint flags = OS.SWP_NOSIZE | OS.SWP_NOZORDER | OS.SWP_NOACTIVATE | OS.SWP_DRAWFRAME;", "+\t\t\tSetWindowPos (hwnd, 0, rect1.left, rect1.top, rect1.right - rect1.left, rect1.bottom - rect1.top, flags);", "+\t\t\tif ((bits & OS.WS_VISIBLE) == 0) {", "+\t\t\t\tOS.DefWindowProc (hwnd, OS.WM_SETREDRAW, 0, 0);", "+\t\t\t}", "+\t\t}"]}], "num": 62176}
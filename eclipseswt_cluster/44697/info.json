{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ac56456058617c876da1f90e61e0770", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8320f2b08fc3689520bf1b61dcab05b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "1a606235eed4952b3f545771da3e4f6926e0b3ab", "commitAfterChange": "424c56c2c1a48fb26944920ea07e5617b7104efb", "methodNumberBeforeChange": 171, "methodNumberAfterChange": 171, "signatureBeforeChange": "  Control findControl (boolean checkTrim, NSView[] hitView)", "signatureAfterChange": "  Control findControl (boolean checkTrim, NSView[] hitView)", "diff": ["+\tint /*long*/ hitWindowNumber = 0;", "-\t\tint /*long*/ hitWindowNumber = NSWindow.windowNumberAtPoint(screenLocation, 0);", "-\t\tNSWindow window = application.windowWithWindowNumber(hitWindowNumber);", "-\t\tif (window != null) {", "-\t\t\tNSView contentView = window.contentView();", "-\t\t\tif (contentView != null) contentView = contentView.superview();", "-\t\t\tif (contentView != null) {", "-\t\t\t\tNSPoint location = window.convertScreenToBase(screenLocation);", "-\t\t\t\tview = contentView.hitTest (location);", "-\t\t\t\tif (view == null && !checkTrim) {", "-\t\t\t\t\tview = contentView;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "+\t\thitWindowNumber = NSWindow.windowNumberAtPoint(screenLocation, 0);", "-\t\t// Use NSWindowList instead of [NSApplication orderedWindows] because orderedWindows", "-\t\t// skips NSPanels. See bug 321614.", "-\t\tint /*long*/ outCount[] = new int /*long*/ [1];", "-\t\tOS.NSCountWindows(outCount);", "-\t\tint /*long*/ windowIDs[] = new int /*long*/ [(int)outCount[0]];", "-\t\tOS.NSWindowList(outCount[0], windowIDs);", "+\t\tint /*long*/ outWindow[] = new int /*long*/ [1];", "+\t\tOS.FindWindow ((int /*long*/)screenLocation.x, (int /*long*/)(getPrimaryFrame().height - screenLocation.y), outWindow);", "-\t\tfor (int i = 0, count = windowIDs.length; i < count && view == null; i++) {", "-\t\t\tNSWindow window = application.windowWithWindowNumber(windowIDs[i]);", "-\t\t\t// NSWindowList returns all window numbers for all processes. If the window ", "-\t\t\t// number passed to windowWithWindowNumber returns nil the window doesn't belong to", "-\t\t\t// this process.", "-\t\t\tif (window != null) {", "-\t\t\t\tNSView contentView = window.contentView();", "-\t\t\t\tif (contentView != null) contentView = contentView.superview();", "-\t\t\t\t// TODO: This line is technically wrong -- NSPointInRect doesn't account for transparent parts of the window's", "-\t\t\t\t// structure region.", "-\t\t\t\tif (contentView != null && OS.NSPointInRect(screenLocation, window.frame())) {", "-\t\t\t\t\tNSPoint location = window.convertScreenToBase(screenLocation);", "-\t\t\t\t\tview = contentView.hitTest (location);", "-\t\t\t\t\tif (view == null && !checkTrim) {", "-\t\t\t\t\t\tview = contentView;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "- \t\t\t}", "+\t\tif (outWindow[0] != 0) {", "+\t\t\thitWindowNumber = OS.HIWindowGetCGWindowID(outWindow[0]);", "+\t\t}", "+\t}", "+\t", "+\tNSWindow window = application.windowWithWindowNumber(hitWindowNumber);", "+\tif (window != null) {", "+\t\tNSView contentView = window.contentView();", "+\t\tif (contentView != null) contentView = contentView.superview();", "+\t\tif (contentView != null) {", "+\t\t\tNSPoint location = window.convertScreenToBase(screenLocation);", "+\t\t\tview = contentView.hitTest (location);", "+\t\t\tif (view == null && !checkTrim) {", "+\t\t\t\tview = contentView;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "86914c178c80120102799fe5cb693de2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/TabFolder.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 24, "signatureBeforeChange": " int processSelection (Object callData)", "signatureAfterChange": "  int processSelection (Object callData)", "diff": ["-int processSelection (Object callData) {", "-\tint newIndex= OS.GetControl32BitValue(handle)-1;", "-\tfor (int i= 0; i < items.length; i++) {", "-\t\tif (i != newIndex && items[i] != null) {", "-\t\t\tControl control = items[i].control;", "-\t\t\tif (control != null && !control.isDisposed ())", "-\t\t\t\tcontrol.setVisible (false);", "-\t\t}", "-\t}", "-\tTabItem item = null;", "-\tif (newIndex != -1) item = items [newIndex];", "-\tif (item != null) {", "-\t\tControl control = item.control;", "-\t\tif (control != null && !control.isDisposed ()) {", "-\t\t\tcontrol.setBounds (getClientArea ());", "-\t\t\tcontrol.setVisible (true);", "-\t\t}", "-\t}", "-\tEvent event = new Event ();", "-\tevent.item = item;", "-\tpostEvent (SWT.Selection, event);", "-\tredraw();", "-\treturn OS.noErr;", "-}", "+int processSelection (Object callData) {", "+\tMacControlEvent macEvent= (MacControlEvent) callData;", "+\tif (!macEvent.isMouseDown())", "+\t\thandleSelectionChange(macEvent.getPartCode()-1);", "+\telse", "+\t\toldValue= OS.GetControl32BitValue(handle)-1;", "+\treturn 0;", "+}"]}], "num": 44697}
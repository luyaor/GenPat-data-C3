{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2c7b5745aa5b9ac5f98367d5012c85ef", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c6a853d0e9415a63732485e29162836b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "cd0ca0631b90c962a2787b997b2aec4dcd48b7f6", "commitAfterChange": "e293cd5ca9ec202629c2ce24590166a853a347b7", "methodNumberBeforeChange": 164, "methodNumberAfterChange": 164, "signatureBeforeChange": "\r \r LRESULT WM_KEYUP (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_KEYUP (int wParam, int lParam)", "diff": ["-\t* accented key.  On Windows 95 and NT, a call to ToAscii(), clears the\r", "+\t* accented key.  On Windows 95 and NT, a call to ToAscii (), clears the\r", "-\t* high bit of the value returned by MapVirtualKey().  A further problem\r", "+\t* high bit of the value returned by MapVirtualKey ().  A further problem\r", "+\t* \r", "+\t* NOTE: This code is avoiding a call to ToAscii ().\r", "+\t}\r", "+\t\r", "+\t/*\r", "+\t* Bug in Windows.  When the accent key is generated on an international\r", "+\t* keyboard using Ctrl+Alt or the special key, MapVirtualKey () does not\r", "+\t* have the high bit set indicating that this is an accent key stroke.\r", "+\t* The fix is to iterate through all known accent, mapping them back to\r", "+\t* their corresponding virtual key and key state.  If the virtual key\r", "+\t* and key state match the current key, then this is an accent that has\r", "+\t* been generated using an international keyboard and calling ToAscii ()\r", "+\t* will clear the accent state.\r", "+\t* \r", "+\t* NOTE: This code is avoiding a call to ToAscii ().\r", "+\t*/\r", "+\tif (!OS.IsWinCE) {\r", "+\t\tfor (int i=0; i<ACCENTS.length; i++) {\r", "+\t\t\tint value = OS.VkKeyScan (ACCENTS [i]);\r", "+\t\t\tif ((value & 0xFF) == wParam && (value & 0x600) == 0x600) {\r", "+\t\t\t\treturn null;\r", "+\t\t\t}\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "63889a1a528767057b10038b29e10741", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "7bad0bad28605270ac5de79b690834a778c371f2", "commitAfterChange": "1cde07f37683aadb8b521425b967428284f85342", "methodNumberBeforeChange": 163, "methodNumberAfterChange": 163, "signatureBeforeChange": "\r \r LRESULT WM_KEYDOWN (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_KEYDOWN (int wParam, int lParam)", "diff": ["+\t* \r", "+\t* NOTE: This code is avoiding a call to ToAscii ().\r", "+\t}\r", "+\t\r", "+\t/*\r", "+\t* Bug in Windows.  When the accent key is generated on an international\r", "+\t* keyboard using Ctrl+Alt or the special key, MapVirtualKey () does not\r", "+\t* have the high bit set indicating that this is an accent key stroke.\r", "+\t* The fix is to iterate through all known accent, mapping them back to\r", "+\t* their corresponding virtual key and key state.  If the virtual key\r", "+\t* and key state match the current key, then this is an accent that has\r", "+\t* been generated using an international keyboard and calling ToAscii ()\r", "+\t* will clear the accent state.\r", "+\t* \r", "+\t* NOTE: This code is avoiding a call to ToAscii ().\r", "+\t*/\r", "+\tfor (int i=0; i<ACCENTS.length; i++) {", "+\t\tint value = OS.VkKeyScan (ACCENTS [i]);\r", "+\t\tif ((value & 0xFF) == wParam && (value & 0x600) == 0x600) {\r", "+\t\t\treturn null;\r", "+\t\t}\r"]}], "num": 1341}
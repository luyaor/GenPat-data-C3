{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "490f90298e70d4b6b33e8019f4611e94", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9901229dc8a3e3b8861fe94a3f9a8c9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "f09fa17598b171271add9842e034e13ff6ff6c75", "commitAfterChange": "9b6f622a04ffc6428b9bddee8e107bf304da0051", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void copyArea(int srcX, int srcY, int width, int height, int destX, int destY, boolean paint)", "signatureAfterChange": " public void copyArea(int srcX, int srcY, int width, int height, int destX, int destY, boolean paint)", "diff": ["-\t//TODO fix for USE_CAIRO", "-\tif (data.image == null && paint) OS.gdk_gc_set_exposures(handle, true);", "-\tOS.gdk_draw_drawable(drawable, handle, drawable, srcX, srcY, destX, destY, width, height);", "+\tif (OS.USE_CAIRO) {", "+\t\tif (data.image != null) {", "+\t\t\tCairo.cairo_set_source_surface(handle, data.image.surface, deltaX, deltaY);", "+\t\t\tCairo.cairo_rectangle(handle, destX, destY, width, height);", "+\t\t\tCairo.cairo_set_operator(handle, Cairo.CAIRO_OPERATOR_SOURCE);", "+\t\t\tCairo.cairo_fill(handle);", "+\t\t} else if (drawable != 0) {", "+\t\t\tCairo.cairo_save(handle);", "+\t\t\tCairo.cairo_rectangle(handle, destX, destY, width, height);", "+\t\t\tCairo.cairo_clip(handle);", "+\t\t\tCairo.cairo_translate(handle, deltaX, deltaY);", "+\t\t\tCairo.cairo_set_operator(handle, Cairo.CAIRO_OPERATOR_SOURCE);", "+\t\t\tCairo.cairo_push_group(handle);", "+\t\t\tOS.gdk_cairo_set_source_window(handle, drawable, 0, 0);", "+\t\t\tCairo.cairo_paint(handle);", "+\t\t\tCairo.cairo_pop_group_to_source(handle);", "+\t\t\tCairo.cairo_rectangle(handle, destX - deltaX, destY - deltaY, width, height);", "+\t\t\tCairo.cairo_clip(handle);", "+\t\t\tCairo.cairo_paint(handle);", "+\t\t\tCairo.cairo_restore(handle);", "+\t\t\tif (paint) {", "+\t\t\t\tint /*long*/ visibleRegion = OS.gdk_drawable_get_visible_region (drawable);", "+\t\t\t\tGdkRectangle srcRect = new GdkRectangle ();", "+\t\t\t\tsrcRect.x = srcX;", "+\t\t\t\tsrcRect.y = srcY;", "+\t\t\t\tsrcRect.width = width;", "+\t\t\t\tsrcRect.height = height;", "+\t\t\t\tint /*long*/ copyRegion = OS.gdk_region_rectangle (srcRect);", "+\t\t\t\tOS.gdk_region_intersect(copyRegion, visibleRegion);", "+\t\t\t\tint /*long*/ invalidateRegion = OS.gdk_region_rectangle (srcRect);\t", "+\t\t\t\tOS.gdk_region_subtract (invalidateRegion, visibleRegion);", "+\t\t\t\tOS.gdk_region_offset (invalidateRegion, deltaX, deltaY);", "+\t\t\t\tOS.gdk_window_invalidate_region(drawable, invalidateRegion, false);", "+\t\t\t\tOS.gdk_region_destroy (visibleRegion);", "+\t\t\t\tOS.gdk_region_destroy (copyRegion);", "+\t\t\t\tOS.gdk_region_destroy (invalidateRegion);", "+\t\t\t}", "+\t\t}", "+\t} else {", "+\t\tif (data.image == null && paint) OS.gdk_gc_set_exposures(handle, true);", "+\t\tOS.gdk_draw_drawable(drawable, handle, drawable, srcX, srcY, destX, destY, width, height);", "+\t}", "-\t\tOS.gdk_gc_set_exposures(handle, false);", "+\t\tif (!OS.USE_CAIRO) OS.gdk_gc_set_exposures(handle, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdc3df688d0aea07fbff4ea225cdf8f7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "282b9b6af8b479272175bca6f47c01c481707c5e", "commitAfterChange": "f251d3c2f248ab6b3e9e49fbef6c116097cbdf4f", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\t\t// TODO: get the height of the current font", "-\t\t\theight = 20;", "-\t\t\t// TODO: max with the height of the up/down buttons", "-\t\t\tint upDownHeight = 24;", "-\t\t\theight = Math.max (height, upDownHeight);", "+\t\t\t// Determine the height of the current font.", "+\t\t\tint [] currentPort = new int [1];", "+\t\t\tshort themeFont = (short) defaultThemeFont ();", "+\t\t\tif (font != null) {", "+\t\t\t\tthemeFont = OS.kThemeCurrentPortFont;", "+\t\t\t\tOS.GetPort (currentPort);", "+\t\t\t\tOS.SetPortWindowPort (OS.GetControlOwner (handle));", "+\t\t\t\tOS.TextFont (font.id);", "+\t\t\t\tOS.TextFace (font.style);", "+\t\t\t\tOS.TextSize (font.size);", "+\t\t\t}", "+\t\t\tFontInfo info = new FontInfo ();", "+\t\t\tOS.GetFontInfo (info);", "+\t\t\theight = info.ascent + info.descent;", "-\t\t\t// TODO: determine the stringWidth of date or time string in current font (take code from GC)", "-\t\t\tString string = \"00/00/0000\"; // TODO: these strings should be locale-specific", "-\t\t\tif ((style & SWT.TIME) != 0) string = \"00:00:00 AM\";", "-\t\t\tGC gc = new GC(this);", "-\t\t\twidth = gc.stringExtent(string).x;", "-\t\t\tgc.dispose();", "-\t\t\t// TODO: max with the height of the up/down buttons (maybe plus some margin?)", "-\t\t\tint upDownWidth = 20;", "-\t\t\twidth += upDownWidth + 5; // MARGIN", "+\t\t\t// Max with the height of the up/down buttons.", "+\t\t\tint [] metric = new int [1];", "+\t\t\tOS.GetThemeMetric (OS.kThemeMetricLittleArrowsHeight, metric);", "+\t\t\theight = Math.max (height, metric [0]);", "+\t\t\t", "+\t\t\t// Determine the width of the date or time string in the current font.", "+\t\t\t// TODO: All of these strings need to be locale-specific", "+\t\t\tString string = (style & SWT.SHORT) != 0 ? \"00/0000\" : \"00/00/0000\";", "+\t\t\tif ((style & SWT.TIME) != 0) string = (style & SWT.SHORT) != 0 ? \"00:00 AM\" : \"00:00:00 AM\";", "+\t\t\t", "+\t\t\tchar [] buffer = new char [string.length ()];", "+\t\t\tstring.getChars (0, buffer.length, buffer, 0);", "+\t\t\tint ptr = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\torg.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\tif (ptr != 0) {", "+\t\t\t\tOS.GetThemeTextDimensions (ptr, themeFont, OS.kThemeStateActive, false, ioBounds, null);", "+\t\t\t\twidth = Math.max (width, ioBounds.h);", "+\t\t\t\theight = Math.max (height, ioBounds.v);", "+\t\t\t\tOS.CFRelease (ptr);", "+\t\t\t}", "+\t\t\tif (font != null) {", "+\t\t\t\tOS.SetPort (currentPort [0]);", "+\t\t\t}", "+\t\t\t", "+\t\t\t// Add the width of the up/down buttons.", "+\t\t\tOS.GetThemeMetric (OS.kThemeMetricLittleArrowsWidth, metric);", "+\t\t\twidth += metric [0];", "+\t\t\t", "+\t\t\t// Add the margin between the text and the buttons.", "+\t\t\tOS.GetThemeMetric (OS.kThemeMetricEditTextWhitespace, metric);", "+\t\t\twidth += metric [0] * 4;"]}], "num": 15903}
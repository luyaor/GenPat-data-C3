{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a2d39ecfca020430a5991b98174b4ad6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "484be2fbf3197e6b03b0b4d328c6b98d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "b055badbc52eef874ac04ced06c796aebe178c51", "commitAfterChange": "efd2b19e6f0f74c27009a05b4ddce186552ea417", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 76, "signatureBeforeChange": "  boolean dragDetect (int x, int y)", "signatureAfterChange": "  boolean dragDetect (int x, int y, boolean filter, boolean [] consume)", "diff": ["-boolean dragDetect (int x, int y) {", "-\treturn hooks (SWT.DragDetect);", "+boolean dragDetect (int x, int y, boolean filter, boolean [] consume) {", "+\tboolean quit = false, dragging = false;", "+\twhile (!quit) {", "+\t\tint /*long*/ eventPtr = 0;", "+\t\twhile (true) {", "+\t\t\teventPtr = OS.gdk_event_get ();", "+\t\t\tif (eventPtr != 0) {", "+\t\t\t\tbreak;", "+\t\t\t} else {", "+\t\t\t\ttry {Thread.sleep(50);} catch (Exception ex) {}", "+\t\t\t}", "+\t\t}", "+\t\tswitch (OS.GDK_EVENT_TYPE (eventPtr)) {", "+\t\t\tcase OS.GDK_MOTION_NOTIFY: {", "+\t\t\t\tGdkEventMotion gdkMotionEvent = new GdkEventMotion ();", "+\t\t\t\tOS.memmove (gdkMotionEvent, eventPtr, GdkEventMotion.sizeof);", "+\t\t\t\tif ((gdkMotionEvent.state & OS.GDK_BUTTON1_MASK) != 0) {", "+\t\t\t\t\tif (OS.gtk_drag_check_threshold (handle, x, y, (int) gdkMotionEvent.x, (int) gdkMotionEvent.y)) {", "+\t\t\t\t\t\tdragging = true;", "+\t\t\t\t\t\tquit = true;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tquit = true;", "+\t\t\t\t}", "+\t\t\t\tint [] newX = new int [1], newY = new int [1];", "+\t\t\t\tOS.gdk_window_get_pointer (gdkMotionEvent.window, newX, newY, null);", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.GDK_BUTTON_RELEASE: {", "+\t\t\t\tOS.gdk_event_put (eventPtr);", "+\t\t\t\tquit = true;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.GDK_KEY_PRESS:", "+\t\t\tcase OS.GDK_KEY_RELEASE: {", "+\t\t\t\tGdkEventKey gdkEvent = new GdkEventKey ();", "+\t\t\t\tOS.memmove (gdkEvent, eventPtr, GdkEventKey.sizeof);", "+\t\t\t\tif (gdkEvent.keyval == OS.GDK_Escape) quit = true;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.GDK_BUTTON_PRESS:", "+\t\t\tcase OS.GDK_2BUTTON_PRESS:", "+\t\t\tcase OS.GDK_3BUTTON_PRESS:", "+\t\t\t\tquit = true;", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tOS.gtk_main_do_event (eventPtr);", "+\t\t}", "+\t\tOS.gdk_event_free (eventPtr);", "+\t}", "+\treturn dragging;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b879e0ae337f66f0b81531cb7873ac5c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "fa71edc6cab350f1ca43d43c16e3d7bdcd14791d", "commitAfterChange": "a15d8c98d6d59bf299a4a1a7f87cc85b966e1e2e", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 61, "signatureBeforeChange": "\r \r int setGC()", "signatureAfterChange": "\r \r int setGC()", "diff": ["-\tif (data.image != null) return OS.PmMemStart(handle);\r", "-\telse if (data.rid == OS.Ph_DEV_RID || data.widget != 0) return OS.PgSetGC(handle);\r", "-\telse return 0;\r", "+\tint result = 0;\r", "+\tif (data.image != null) result = OS.PmMemStart(handle);\r", "+\telse if (data.rid == OS.Ph_DEV_RID || data.widget != 0) result = OS.PgSetGC(handle);\r", "+\telse return result;\r", "+\t\r", "+\tif (dirtyBits != 0) {\r", "+\t\tif ((dirtyBits & DIRTY_BACKGROUND) != 0) {\r", "+\t\t\tOS.PgSetFillColor(data.background);\r", "+\t\t}\r", "+\t\tif ((dirtyBits & DIRTY_FOREGROUND) != 0) {\r", "+\t\t\tint foreColor = data.foreground;\r", "+\t\t\tOS.PgSetStrokeColor(foreColor);\r", "+\t\t\tOS.PgSetTextColor(foreColor);\r", "+\t\t}\r", "+\t\tif ((dirtyBits & DIRTY_FONT) != 0) {\r", "+\t\t\tOS.PgSetFont(data.font);\r", "+\t\t}\r", "+\t\tif ((dirtyBits & DIRTY_CLIPPING) != 0) {\r", "+\t\t\tOS.PgSetMultiClip(data.clipRectsCount, data.clipRects);\r", "+\t\t}\r", "+\t\tif ((dirtyBits & DIRTY_LINESTYLE) != 0) {\r", "+\t\t\tbyte[] dashList = null;\r", "+\t\t\tswitch (data.lineStyle) {\r", "+\t\t\t\tcase SWT.LINE_SOLID: dashList = DashList[0]; break;\r", "+\t\t\t\tcase SWT.LINE_DASH:\tdashList = DashList[1]; break;\r", "+\t\t\t\tcase SWT.LINE_DOT: dashList = DashList[2]; break;\r", "+\t\t\t\tcase SWT.LINE_DASHDOT: dashList = DashList[3]; break;\r", "+\t\t\t\tcase SWT.LINE_DASHDOTDOT: dashList = DashList[4]; break;\r", "+\t\t\t}\r", "+\t\t\tOS.PgSetStrokeDash(dashList, dashList.length, 0x10000);\r", "+\t\t}\r", "+\t\tif ((dirtyBits & DIRTY_LINEWIDTH) != 0) {\r", "+\t\t\tOS.PgSetStrokeWidth(data.lineWidth);\r", "+\t\t}\r", "+\t\tif ((dirtyBits & DIRTY_XORMODE) != 0) {\r", "+\t\t\tif (data.xorMode) OS.PgSetDrawMode(OS.Pg_DRAWMODE_XOR);\r", "+\t\t\telse OS.PgSetDrawMode(OS.Pg_DRAWMODE_OPAQUE);\r", "+\t\t}\r", "+\t\tdirtyBits = 0;\r", "+\t}\r", "+\treturn result;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "179bf644170f43326175869868046d42", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 44, "signatureBeforeChange": " public int internal_new_GC (GCData data)", "signatureAfterChange": "  public int internal_new_GC (GCData data)", "diff": ["- */", "+", "-    /* AW", "-\tif (!OS.XtIsRealized (handle)) {", "-\t\tShell shell = getShell ();", "-\t\tshell.realizeWidget ();", "+\tint [] buffer = new int [1];", "+\tint context = 0, paintRgn = 0, visibleRgn = 0;", "+\tif (data.paintEvent != 0) {", "+\t\tint theEvent = data.paintEvent;", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamCGContextRef, OS.typeCGContextRef, null, 4, null, buffer);", "+\t\tcontext = buffer [0];\t", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamRgnHandle, OS.typeQDRgnHandle, null, 4, null, buffer);", "+\t\tvisibleRgn = paintRgn = buffer [0];", "-\tint xDisplay = OS.XtDisplay (handle);", "-\tif (xDisplay == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tint xWindow = OS.XtWindow (handle);", "-\tif (xWindow == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tint xGC = OS.XCreateGC (xDisplay, xWindow, 0, null);", "-\tif (xGC == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tOS.XSetGraphicsExposures (xDisplay, xGC, false);", "-\tint [] argList = {OS.XmNforeground, 0, OS.XmNbackground, 0, OS.XmNcolormap, 0};", "-\tOS.XtGetValues (handle, argList, argList.length / 2);", "-\t*/", "+\tif (context == 0) {", "+\t\tint window = OS.GetControlOwner (handle);", "+\t\tint port = OS.GetWindowPort (window);", "+\t\tOS.CreateCGContextForPort (port, buffer);", "+\t\tcontext = buffer [0];", "+\t\tif (context != 0) {", "+\t\t\tRect rect = new Rect ();", "+\t\t\tOS.GetControlBounds (handle, rect);", "+\t\t\tRect portRect = new Rect ();", "+\t\t\tOS.GetPortBounds (port, portRect);", "+\t\t\tvisibleRgn = getVisibleRegion (handle);", "+\t\t\tif (paintRgn != 0) OS.SectRgn (paintRgn, visibleRgn, visibleRgn);", "+\t\t\tOS.ClipCGContextToRegion (context, portRect, visibleRgn);", "+\t\t\tint portHeight = portRect.bottom - portRect.top;", "+\t\t\tOS.CGContextScaleCTM (context, 1, -1);", "+\t\t\tOS.CGContextTranslateCTM (context, rect.left, -portHeight + rect.top);", "+\t\t}", "+\t}", "+\tif (context == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "-\t\tdata.device = getDisplay ();", "-\t\tdata.foreground = getForegroundPixel();", "-\t\tdata.background = getBackgroundPixel();", "-\t\tdata.font = font.handle;", "-\t\tdata.controlHandle = handle;", "-\t}", "-", "-\tint wHandle= 0;", "-\tif (MacUtil.USE_FRAME) {", "-\t\tShell shell= getShell();", "-\t\tif (shell != null)", "-\t\t\twHandle= shell.shellHandle;", "+\t\tDisplay display = getDisplay ();", "+\t\tdata.device = display;", "+\t\tdata.foreground = foreground != null ? foreground : display.getSystemColor (SWT.COLOR_BLACK).handle;", "+\t\tdata.background = background != null ? background : display.getSystemColor (SWT.COLOR_WHITE).handle;", "+\t\tdata.font = font != null ? font : defaultFont ();", "+\t\tdata.visibleRgn = visibleRgn;", "+\t\tdata.control = handle;", "-\t\twHandle= OS.GetControlOwner(handle);", "+\t\tif (visibleRgn != paintRgn) OS.DisposeRgn (visibleRgn);", "-\tint xGC= OS.GetWindowPort(wHandle);", "-\tif (xGC == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\t", "-    return xGC;", "+\treturn context;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "627bd6cdec3d1e0c247bf691dbd43de8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "dff12c6acd8909ca8291683b0755a76e3389df80", "commitAfterChange": "be6f344f6c5c168c19ca2e69a5af59ce3b851963", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": "  int kEventMouseWheelMoved (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventMouseWheelMoved (int nextHandler, int theEvent, int userData)", "diff": ["+\t", "+\t/*", "+\t* Bug in the Macintosh.  Mouse Wheel events are still processed when the", "+\t* window is not enabled due to a modal dialog.  The fix is to not let the", "+\t* default handlers run when window is modal disabled.", "+\t*/", "+\tint window = OS.GetControlOwner (handle);", "+\tif (OS.HIWindowIsDocumentModalTarget (window, null)) {", "+\t\treturn OS.noErr;", "+\t}\t", "+\tint[] event = new int[1];", "+\tOS.CreateEvent (0, OS.kEventClassWindow, OS.kEventWindowGetClickModality, 0.0, 0, event);", "+\tif (event [0] != 0) {", "+\t\tshort [] part = new short [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamWindowPartCode, OS.typeWindowPartCode, null, 2, null, part);", "+\t\tint [] modifiers = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, modifiers.length * 4, null, modifiers);", "+\t\tOS.SetEventParameter (event [0], OS.kEventParamDirectObject, OS.typeWindowRef, 4, new int[]{window});", "+\t\tOS.SetEventParameter (event [0], OS.kEventParamWindowPartCode, OS.typeWindowPartCode, 2, part);", "+\t\tOS.SetEventParameter (event [0], OS.kEventParamKeyModifiers, OS.typeUInt32, 4, modifiers);", "+\t\tOS.SetEventParameter (event [0], OS.kEventParamEventRef, OS.typeEventRef, 4, new int[]{theEvent});", "+\t\tOS.SendEventToEventTarget (event [0], OS.GetApplicationEventTarget ());", "+\t\tint [] clickResult = new int [1];", "+\t\tOS.GetEventParameter (event [0], OS.kEventParamModalClickResult, OS.typeModalClickResult, null, modifiers.length * 4, null, clickResult);", "+\t\tOS.ReleaseEvent (event [0]);", "+\t\tif ((clickResult [0] & OS.kHIModalClickIsModal) != 0) {", "+\t\t\tif ((clickResult [0] & OS.kHIModalClickAllowEvent) == 0) {", "+\t\t\t\treturn OS.noErr;", "+\t\t\t}", "+\t\t}", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e19902ac5abfc6282ae915cef626faaf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "5d5d6c8770a1d46c82c940b44d6a2e4884862a10", "commitAfterChange": "28aa455ae3ab9d2b8c756bcae7568a88b06cc8eb", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["+\t\t\tif ((data.style & SWT.MIRRORED) != 0) {", "+\t\t\t\tCairo.cairo_save(cairo);", "+\t\t\t\tint[] width = new int[1], height = new int[1];", "+\t\t\t\tOS.pango_layout_get_size(layout, width, height);", "+\t\t\t\tCairo.cairo_scale(cairo, -1f,  1);", "+\t\t\t\tCairo.cairo_translate(cairo, -2 * x - OS.PANGO_PIXELS(width[0]), 0);", "+\t\t\t}", "+\t\t\tif ((data.style & SWT.MIRRORED) != 0) {", "+\t\t\t    Cairo.cairo_restore(cairo);", "+\t\t\t}", "+\t\t\t\tif ((data.style & SWT.MIRRORED) != 0) {", "+\t\t\t\t\tCairo.cairo_save(cairo);", "+\t\t\t\t\tint[] width = new int[1], height = new int[1];", "+\t\t\t\t\tOS.pango_layout_get_size(layout, width, height);", "+\t\t\t\t\tCairo.cairo_scale(cairo, -1f,  1);", "+\t\t\t\t\tCairo.cairo_translate(cairo, -2 * x - OS.PANGO_PIXELS(width[0]), 0);", "+\t\t\t\t}", "+\t\t\t\tif ((data.style & SWT.MIRRORED) != 0) {", "+\t\t\t\t\tCairo.cairo_restore(cairo);", "+\t\t\t\t}", "+\t\t\t\tif ((data.style & SWT.MIRRORED) != 0) {", "+\t\t\t\t\tCairo.cairo_save(cairo);", "+\t\t\t\t\tint[] width = new int[1], height = new int[1];", "+\t\t\t\t\tOS.pango_layout_get_size(layout, width, height);", "+\t\t\t\t\tCairo.cairo_scale(cairo, -1f,  1);", "+\t\t\t\t\tCairo.cairo_translate(cairo, -2 * x - OS.PANGO_PIXELS(width[0]), 0);", "+\t\t\t\t}", "+\t\t\t\tif ((data.style & SWT.MIRRORED) != 0) {", "+\t\t\t\t\tCairo.cairo_restore(cairo);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68f628b7420e4b38ae4fd70f82294cc8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 55, "signatureBeforeChange": " int processKeyDown (Object callData)", "signatureAfterChange": "  int kEventControlDraw (int nextHandler, int theEvent, int userData)", "diff": ["-}", "-int processKeyDown (Object callData) {", "-\tMacEvent macEvent = (MacEvent) callData;", "-\tif (translateTraversal (macEvent))", "-\t\treturn OS.kNoErr;", "-\t// widget could be disposed at this point", "-\tif (isDisposed ()) return 0;", "-\treturn sendKeyEvent (SWT.KeyDown, macEvent);", "-}", "+", "+int kEventControlDraw (int nextHandler, int theEvent, int userData) {", "+\tint result = super.kEventControlDraw (nextHandler, theEvent, userData);", "+\tint [] theControl = new int [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamDirectObject, OS.typeControlRef, null, 4, null, theControl);", "+\tif (theControl [0] != handle) return result;", "+\tif (!hooks (SWT.Paint) && !filters (SWT.Paint)) return result;", "+", "+\t/* Retrieve the damage region */", "+\tint [] region = new int [1];\t", "+\tOS.GetEventParameter (theEvent, OS.kEventParamRgnHandle, OS.typeQDRgnHandle, null, 4, null, region);", "+\tRect bounds = new Rect ();", "+\tOS.GetRegionBounds (region [0], bounds);", "+\tRect rect = new Rect ();", "+\tOS.GetControlBounds (handle, rect);", "+\tif (!OS.SectRect (rect, bounds, bounds)) return result;", "+\tOS.OffsetRect (bounds, (short) -rect.left, (short) -rect.top);", "+", "+\tGCData data = new GCData ();", "+\tdata.paintEvent = theEvent;", "+\tGC gc = GC.carbon_new (this, data);", "+\t", "+\t/* Send the paint event */", "+\tEvent event = new Event ();", "+\tevent.gc = gc;", "+\tevent.x = bounds.left;", "+\tevent.y = bounds.top;", "+\tevent.width = bounds.right - bounds.left;", "+\tevent.height = bounds.bottom - bounds.top;", "+//\tgc.setClipping (Region.carbon_new (region [0]));", "+\tsendEvent (SWT.Paint, event);", "+\tevent.gc = null;", "+\tgc.dispose ();", "+", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa114682f54756c00e7b9f603a456b9d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "2e101cd05354a2b8b2c5bd7ff2ea32310e5732d7", "commitAfterChange": "3d14fe31ddd39bccba6a2856fcd2adc1154c62d5", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\tOS.HIViewAddSubview(handle, webViewHandle);", "-\tOS.HIViewSetVisible(webViewHandle, true);", "-\t\t\t", "+\t/*", "+\t* Bug in Safari. The WebView must be added after the top window is visible", "+\t* or it eats mouse events from the top window. A second issue is that the WebView ", "+\t* does not receive mouse and key events when it is added to a visible top window. ", "+\t* It is assumed that Safari hooks its own event listener when the top window ", "+\t* emits the kEventWindowShown event. The workaround to the first problem is to add", "+\t* the WebView to the HIView after the top window is visible. The workaround to the second", "+\t* problem is to send a fake kEventWindowShown event to the top window after the WebView", "+\t* has been added to the HIView (after the top window is visible) to give Safari a chance", "+\t* to hook events.", "+\t*/", "+\tif (getShell().isVisible()) {", "+\t\tadded = true;", "+\t\tOS.HIViewAddSubview(handle, webViewHandle);", "+\t\tOS.HIViewSetVisible(webViewHandle, true);", "+\t\t", "+\t\tint[] showEvent = new int[1];", "+\t\tOS.CreateEvent(0, OS.kEventClassWindow, OS.kEventWindowShown, 0.0, OS.kEventAttributeUserEvent, showEvent);", "+\t\tOS.SetEventParameter(showEvent[0], OS.kEventParamDirectObject, OS.typeWindowRef, 4, new int[] {OS.GetControlOwner(handle)});", "+\t\tOS.SendEventToEventTarget(showEvent[0], OS.GetWindowEventTarget(OS.GetControlOwner(handle)));", "+\t\tif (showEvent[0] != 0) OS.ReleaseEvent(showEvent[0]);", "+\t}", "+", "+\t\t\t\t\tif (!added && e.widget == getShell()) {", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t* Bug in Safari. The WebView must be added after the top window is visible", "+\t\t\t\t\t\t* or it eats mouse events from the top window. A second issue is that the WebView ", "+\t\t\t\t\t\t* does not receive mouse and key events when it is added to a visible top window. ", "+\t\t\t\t\t\t* It is assumed that Safari hooks its own event listener when the top window ", "+\t\t\t\t\t\t* emits the kEventWindowShown event. The workaround to the first problem is to add", "+\t\t\t\t\t\t* the WebView to the HIView after the top window is visible. The workaround to the second", "+\t\t\t\t\t\t* problem is to send a fake kEventWindowShown event to the top window after the WebView", "+\t\t\t\t\t\t* has been added to the HIView (after the top window is visible) to give Safari a chance", "+\t\t\t\t\t\t* to hook events.", "+\t\t\t\t\t\t* ", "+\t\t\t\t\t\t* Note. SWT.Show is sent before the Shell is actually visible. The workaround is to", "+\t\t\t\t\t\t* add the WebView to the HiView from an asyncExec, after this notification has returned and", "+\t\t\t\t\t\t* made the Shell visible.", "+\t\t\t\t\t\t* Note. Because the Shell is already visible when WebView is added to the HiView and the real", "+\t\t\t\t\t\t* kEventWindowShow event has therefore been sent already, we need to send a fake kEventWindowShown", "+\t\t\t\t\t\t* event so that Safari can hook its events.", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tfinal Shell shell = getShell();", "+\t\t\t\t\t\tgetDisplay().asyncExec(new Runnable() { ", "+\t\t\t\t\t\t\tpublic void run() {", "+\t\t\t\t\t\t\t\tif (isDisposed() || shell.isDisposed()) return;", "+\t\t\t\t\t\t\t\tif (added || !shell.isVisible()) return;", "+\t\t\t\t\t\t\t\tadded = true;", "+\t\t\t\t\t\t\t\tOS.HIViewAddSubview(handle, webViewHandle);", "+\t\t\t\t\t\t\t\tOS.HIViewSetVisible(webViewHandle, true);", "+", "+\t\t\t\t\t\t\t\tint[] showEvent = new int[1];", "+\t\t\t\t\t\t\t\tOS.CreateEvent(0, OS.kEventClassWindow, OS.kEventWindowShown, 0.0, OS.kEventAttributeUserEvent, showEvent);", "+\t\t\t\t\t\t\t\tOS.SetEventParameter(showEvent[0], OS.kEventParamDirectObject, OS.typeWindowRef, 4, new int[] {OS.GetControlOwner(handle)});", "+\t\t\t\t\t\t\t\tOS.SendEventToEventTarget(showEvent[0], OS.GetWindowEventTarget(OS.GetControlOwner(handle)));", "+\t\t\t\t\t\t\t\tif (showEvent[0] != 0) OS.ReleaseEvent(showEvent[0]);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t});", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "74184794bdf7ac8e642dccb8bd86efec", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "811bdeccc1df1329eadad9688114f47a526dc8ab", "commitAfterChange": "3d4fc78948c5be186415043f009f2521a6863797", "methodNumberBeforeChange": 60, "methodNumberAfterChange": 60, "signatureBeforeChange": "\r \r int getClipping(int widget, int topWidget, boolean clipChildren, boolean clipSiblings)", "signatureAfterChange": "\r \r int getClipping(int widget, int topWidget, boolean clipChildren, boolean clipSiblings)", "diff": ["-\t\t\t\r", "+\r", "+\tPhRect_t rect = new PhRect_t ();\r", "+\tint args [] = {OS.Pt_ARG_FLAGS, 0, 0, OS.Pt_ARG_BASIC_FLAGS, 0, 0};\r", "+\t\r", "+\t\t\t\targs [1] = args [4] = 0;\r", "+\t\t\t\tOS.PtGetResources(temp_widget, args.length / 3, args);\r", "+\t\t\t\tif ((args [1] & OS.Pt_HIGHLIGHTED) != 0) {\r", "+\t\t\t\t\tint basic_flags = args [4];\r", "+\t\t\t\t\tOS.memmove(rect, tile, PhRect_t.sizeof);\r", "+\t\t\t\t\tif ((basic_flags & OS.Pt_TOP_ETCH) != 0) rect.ul_y++;\r", "+\t\t\t\t\tif ((basic_flags & OS.Pt_BOTTOM_ETCH) != 0) rect.lr_y--;\r", "+\t\t\t\t\tif ((basic_flags & OS.Pt_RIGHT_ETCH) != 0) rect.ul_x++;\r", "+\t\t\t\t\tif ((basic_flags & OS.Pt_LEFT_ETCH) != 0) rect.lr_x--;\r", "+\t\t\t\t\tOS.memmove(tile, rect, PhRect_t.sizeof);\r", "+\t\t\t\t}\r", "+\t\t\t\targs [1] = args [4] = 0;\r", "+\t\t\t\tOS.PtGetResources(temp_widget, args.length / 3, args);\r", "+\t\t\t\tif ((args [1] & OS.Pt_HIGHLIGHTED) != 0) {\r", "+\t\t\t\t\tint basic_flags = args [4];\r", "+\t\t\t\t\tOS.memmove(rect, tile, PhRect_t.sizeof);\r", "+\t\t\t\t\tif ((basic_flags & OS.Pt_TOP_ETCH) != 0) rect.ul_y++;\r", "+\t\t\t\t\tif ((basic_flags & OS.Pt_BOTTOM_ETCH) != 0) rect.lr_y--;\r", "+\t\t\t\t\tif ((basic_flags & OS.Pt_RIGHT_ETCH) != 0) rect.ul_x++;\r", "+\t\t\t\t\tif ((basic_flags & OS.Pt_LEFT_ETCH) != 0) rect.lr_x--;\r", "+\t\t\t\t\tOS.memmove(tile, rect, PhRect_t.sizeof);\r", "+\t\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d181a0cae502cd29a24e4749f0dc30ee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "b149d88166b2cf2323cb01c5c46c557ea0de46df", "commitAfterChange": "fb8c665b3d34ea54d7e61fa52a3d1d177488e6a4", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public Rectangle getBounds ()", "signatureAfterChange": " public Rectangle getBounds ()", "diff": ["+\t", "+\tboolean isExpander = OS.gtk_tree_model_iter_n_children (parent.modelHandle, handle) > 0;", "+\tboolean isExpanded = OS.gtk_tree_view_row_expanded (parentHandle, path);", "+\tOS.gtk_tree_view_column_cell_set_cell_data (column, parent.modelHandle, handle, isExpander, isExpanded);", "+\tint [] x = new int [1], width = new int [1];", "+\tOS.gtk_cell_renderer_get_size (parent.textRenderer, parentHandle, null, null, null, width, null);", "+\trect.width = width [0];", "+\tint [] buffer = new int [1];", "+\tif (OS.gtk_tree_view_get_expander_column (parentHandle) == column) {", "+\t\tOS.gtk_widget_style_get (parentHandle, OS.expander_size, buffer, 0);", "+\t\trect.x += buffer [0] + TreeItem.EXPANDER_EXTRA_PADDING;", "+\t}", "+\tOS.gtk_widget_style_get (parentHandle, OS.horizontal_separator, buffer, 0);", "+\tint horizontalSeparator = buffer[0];", "+\trect.x += horizontalSeparator;", "+\tif (OS.gtk_major_version () * 100 + OS.gtk_minor_version () * 10 + OS.gtk_micro_version () >= 213) {", "+\t\tOS.gtk_tree_view_column_cell_get_position (column, parent.textRenderer, x, null);", "+\t\trect.x += x [0];", "+\t} else {", "+\t\tif ((parent.style & SWT.CHECK) != 0) {", "+\t\t\tOS.gtk_cell_renderer_get_size (parent.checkRenderer, parentHandle, null, null, null, width, null);", "+\t\t\trect.x += width [0] + horizontalSeparator;", "+\t\t}", "+\t\tOS.gtk_cell_renderer_get_size (parent.pixbufRenderer, parentHandle, null, null, null, width, null);", "+\t\trect.x += width [0] + horizontalSeparator;", "+\t}", "+\tint border = parent.getBorderWidth ();", "+\trect.x += border;", "+\trect.y += border;", "+\t"]}], "num": 2056}
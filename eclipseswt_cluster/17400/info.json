{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7f787e5d1eaff283ecfd69584c0e2739", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71236c9ede3ba648e96e18fb78fd4bc3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "08ed4d34906d3cb004511badd9a3286f04d40b7a", "commitAfterChange": "3587c6fb9068182d41169c6c886f0d5faa0219e6", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 16, "signatureBeforeChange": "  TreeItem [] getItems (int node)", "signatureAfterChange": "  TreeItem [] getItems (int parent)", "diff": ["-TreeItem [] getItems (int node) {", "-\tint depth = 1;", "-\tif (node != 0) {", "-\t\tint data = OS.g_list_nth_data (node, 0);", "-\t\tGtkCTreeRow row = new GtkCTreeRow ();", "-\t\tOS.memmove (row, data, GtkCTreeRow.sizeof);", "-\t\tdepth = row.level + 1;", "+TreeItem [] getItems (int parent) {", "+\tint len = getItemCount(parent);", "+\tTreeItem[] answer = new TreeItem [len];", "+\tif (len==0) return answer;", "+\tint currentIter = OS.g_malloc(OS.GtkTreeIter_sizeof());", "+\tif (!OS.gtk_tree_model_iter_children(modelHandle, currentIter, parent)) return answer;", "+\tfor (int i=0; i<len; i++) {", "+\t\tint[] index = new int[1];", "+\t\tOS.gtk_tree_model_get(modelHandle, currentIter, 4, index, -1);", "+\t\tanswer[i] = items[index[0]];", "+\t\tOS.gtk_tree_model_iter_next(modelHandle, currentIter);", "-\tCount = 0;", "-\tCallback GtkCTreeCountItems = new Callback (this, \"GtkCTreeCountItems\", 3);", "-\tint address0 = GtkCTreeCountItems.getAddress ();", "-\tOS.gtk_ctree_post_recursive_to_depth (handle, node, depth, address0, node);", "-\tGtkCTreeCountItems.dispose ();", "-\tItems = new TreeItem [Count];", "-\tCount = 0;", "-\tCallback GtkCTreeGetItems = new Callback (this, \"GtkCTreeGetItems\", 3);", "-\tint address1 = GtkCTreeGetItems.getAddress ();", "-\tOS.gtk_ctree_post_recursive_to_depth (handle, node, depth, address1, node);", "-\tGtkCTreeGetItems.dispose ();", "-\tTreeItem [] result = Items;", "-\tItems = null;", "-\treturn result;", "+\tOS.g_free(currentIter);", "+\treturn answer;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2378f535a24b343f22141f8d7c48935c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/coolbar/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "20b0eb441aada9604976583a80e3bdef4aa3362d", "commitAfterChange": "7a19591ebf7fe6141ff36a49f3e5c931d7f1c3df", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": " public void setWrapIndices (int[] data)", "signatureAfterChange": " public void setWrapIndices (int[] indices)", "diff": ["-public void setWrapIndices (int[] data) {", "+public void setWrapIndices (int[] indices) {", "-\tif (data == null) data = new int[0];", "-\tfor (int i=0; i<data.length; i++) {", "-\t\tif (data[i] < 0 || data[i] >= originalItems.length) error (SWT.ERROR_INVALID_ARGUMENT);\t", "-\t}\t", "-\tif (items.length == 0) return;", "-", "-\tCoolItem[] allItems = getItems();", "-\titems = new CoolItem[0][];", "-\tCoolItem[][] newItems;", "-\tCoolItem[] row;", "-\tint itemIndex = 0;", "-\tfor (int i = 0; i <= data.length; i++) {", "-\t\tint nextWrap = (i < data.length) ? data[i] : allItems.length;", "-\t\tif (nextWrap != 0) {", "-\t\t\trow = new CoolItem[nextWrap - itemIndex];", "-\t\t\tSystem.arraycopy(allItems, itemIndex, row, 0, row.length); ", "-\t\t\titemIndex += row.length;", "-\t\t\tnewItems = new CoolItem[items.length + 1][];", "-\t\t\tSystem.arraycopy(items, 0, newItems, 0, items.length);", "-\t\t\tnewItems[items.length] = row;", "-\t\t\titems = newItems;", "+\tif (indices == null) indices = new int[0];", "+\tint count = originalItems.length;", "+\tfor (int i=0; i<indices.length; i++) {", "+\t\tif (indices[i] < 0 || indices[i] >= count) {", "+\t\t\terror (SWT.ERROR_INVALID_ARGUMENT);", "+\t\t}", "+\t}", "+\tfor (int i=0; i<originalItems.length; i++) {", "+\t\toriginalItems[i].wrap = false;", "+\t}", "+\tfor (int i=0; i<indices.length; i++) {", "+\t\tint index = indices[i];", "+\t\tfor (int row = 0; row < items.length; row++) {", "+\t\t\tif (items[row].length > index) {", "+\t\t\t\titems[row][index].wrap = true;", "+\t\t\t\tbreak;", "+\t\t\t} else {", "+\t\t\t\tindex -= items[row].length;", "+\t\t\t}"]}], "num": 17400}
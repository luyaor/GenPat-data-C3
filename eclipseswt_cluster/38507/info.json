{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f5ae9431193c262b1b16581209d0c714", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d25ea89880e2ff46388d811ff9e09d57", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "a98eb2d6a83b6b63d61b42e51f7f149a33b7fbac", "commitAfterChange": "395692675e255578e24bb51eb09e1b4119931dff", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\tIsXULRunner = false;", "+\t\tboolean IsXULRunner = false;", "-\t\tPromptServiceFactory factory = new PromptServiceFactory ();", "+\t\tPromptService2Factory factory = new PromptService2Factory ();", "+\t\t/*", "+\t\t* This Download factory will be used if the GRE version is < 1.8.", "+\t\t* If the GRE version is 1.8.x then the Download factory that is registered later for", "+\t\t*   contract \"Transfer\" will be used.", "+\t\t* If the GRE version is >= 1.9 then no Download factory is registered because this", "+\t\t*   functionality is provided by the GRE.", "+\t\t*/", "-", "-\t\tDownloadFactory_1_8 downloadFactory_1_8 = new DownloadFactory_1_8 ();", "-\t\tdownloadFactory_1_8.AddRef ();", "-\t\taContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_TRANSFER_CONTRACTID, true);", "-\t\taClassName = MozillaDelegate.wcsToMbcs (null, \"Transfer\", true); //$NON-NLS-1$", "-\t\trc = componentRegistrar.RegisterFactory (XPCOM.NS_DOWNLOAD_CID, aClassName, aContractID, downloadFactory_1_8.getAddress ());", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (rc);", "-\t\t}", "-\t\tdownloadFactory_1_8.Release ();", "-\t\tIs_1_8 = IsXULRunner;", "-\tcomponentManager.Release ();", "-\tif (!Is_1_8) {", "+\tif (!PerformedVersionCheck) {", "+\t\tPerformedVersionCheck = true;", "+", "-\t\t* Check for the availability of the 1.8 implementation of nsIDocShell to determine", "-\t\t* if the GRE's version is >= 1.8. ", "+\t\t* Check for the availability of the pre-1.8 implementation of nsIDocShell", "+\t\t* to determine if the GRE's version is < 1.8.", "-\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (XPCOM.NS_ERROR_FAILURE);", "+\t\t}", "+\t\tif (result[0] == 0) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\t}", "-\t\trc = interfaceRequestor.GetInterface (nsIDocShell_1_8.NS_IDOCSHELL_IID, result);", "+\t\trc = interfaceRequestor.GetInterface (nsIDocShell.NS_IDOCSHELL_IID, result);", "-\t\t\tIs_1_8 = true;", "+\t\t\tIsPre_1_8 = true;", "+\t\t}", "+\t\tresult[0] = 0;", "+", "+\t\t/*", "+\t\t* A Download factory for contract \"Transfer\" must be registered iff the GRE's version is 1.8.x.", "+\t\t*   Check for the availability of the 1.8 implementation of nsIDocShell to determine if the", "+\t\t*   GRE's version is 1.8.x.", "+\t\t* If the GRE version is < 1.8 then the previously-registered Download factory for contract", "+\t\t*   \"Download\" will be used.", "+\t\t* If the GRE version is >= 1.9 then no Download factory is registered because this", "+\t\t*   functionality is provided by the GRE.", "+\t\t*/", "+\t\tif (!IsPre_1_8) {", "+\t\t\trc = interfaceRequestor.GetInterface (nsIDocShell_1_8.NS_IDOCSHELL_IID, result);", "+\t\t\tif (rc == XPCOM.NS_OK && result[0] != 0) { /* 1.8 */", "+\t\t\t\tnew nsISupports (result[0]).Release ();", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\trc = componentManager.QueryInterface (nsIComponentRegistrar.NS_ICOMPONENTREGISTRAR_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\t\tbrowser.dispose ();", "+\t\t\t\t\terror (rc);", "+\t\t\t\t}", "+\t\t\t\tif (result[0] == 0) {", "+\t\t\t\t\tbrowser.dispose ();", "+\t\t\t\t\terror (XPCOM.NS_NOINTERFACE);", "+\t\t\t\t}", "+", "+\t\t\t\tnsIComponentRegistrar componentRegistrar = new nsIComponentRegistrar (result[0]);", "+\t\t\t\tDownloadFactory_1_8 downloadFactory_1_8 = new DownloadFactory_1_8 ();", "+\t\t\t\tdownloadFactory_1_8.AddRef ();", "+\t\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_TRANSFER_CONTRACTID, true);", "+\t\t\t\tbyte[] aClassName = MozillaDelegate.wcsToMbcs (null, \"Transfer\", true); //$NON-NLS-1$", "+\t\t\t\trc = componentRegistrar.RegisterFactory (XPCOM.NS_DOWNLOAD_CID, aClassName, aContractID, downloadFactory_1_8.getAddress ());", "+\t\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\t\tbrowser.dispose ();", "+\t\t\t\t\terror (rc);", "+\t\t\t\t}", "+\t\t\t\tdownloadFactory_1_8.Release ();", "+\t\t\t\tcomponentRegistrar.Release ();", "+\t\t\t}", "+\tcomponentManager.Release ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa5687a6aaed997e6c5cba7d370da0f9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "bba1c08ab23ad4b8fbfe85635db041a3505b8374", "commitAfterChange": "24ab3478e87ac1d36c28e1080e0b1351f8af27b9", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\tString greInitialized = System.getProperty (GRE_INITIALIZED); ", "-\t\tif (\"true\".equals (greInitialized)) { //$NON-NLS-1$", "+\t\tString greInitialized = System.getProperty (GRE_INITIALIZED);", "+\t\tif (TRUE.equals (greInitialized)) {", "+\t\t/*", "+\t\t * Check for the property indicating that factories have already been registered,", "+\t\t * in which case this browser should not overwrite them with its own.", "+\t\t */", "+\t\tboolean factoriesRegistered = false;", "+\t\tString propertyString = System.getProperty (FACTORIES_REGISTERED);", "+\t\tif (TRUE.equals (propertyString)) {", "+\t\t\tfactoriesRegistered = true;", "+\t\t}", "+", "-\t\tinitWindowCreator (serviceManager);", "+\t\tif (!factoriesRegistered) {", "+\t\t\tinitWindowCreator (serviceManager);", "+\t\t}", "-\t\t/* init our various factories that mozilla can invoke as needed */ ", "-\t\tinitFactories (serviceManager, componentManager, isXULRunner);", "+\t\t/* init our various factories that mozilla can invoke as needed */", "+\t\tif (!factoriesRegistered) {", "+\t\t\tinitFactories (serviceManager, componentManager, isXULRunner);", "+\t\t}", "-\t\tHelperAppLauncherDialogFactory dialogFactory = new HelperAppLauncherDialogFactory ();", "-\t\tdialogFactory.AddRef ();", "-\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_HELPERAPPLAUNCHERDIALOG_CONTRACTID, true);", "-\t\tbyte[] aClassName = MozillaDelegate.wcsToMbcs (null, \"swtHelperAppLauncherDialog\", true); //$NON-NLS-1$", "-\t\trc = componentRegistrar.RegisterFactory (XPCOM.NS_HELPERAPPLAUNCHERDIALOG_CID, aClassName, aContractID, dialogFactory.getAddress ());", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (rc);", "+\t\t/*", "+\t\t * Check for the property indicating that factories have already been registered,", "+\t\t * in which case this browser should not overwrite them with its own.", "+\t\t */", "+\t\tboolean factoriesRegistered = false;", "+\t\tString propertyString = System.getProperty (FACTORIES_REGISTERED);", "+\t\tif (TRUE.equals (propertyString)) {", "+\t\t\tfactoriesRegistered = true;", "-\t\tdialogFactory.Release ();", "+", "+\t\tif (!factoriesRegistered) {", "+\t\t\tHelperAppLauncherDialogFactory dialogFactory = new HelperAppLauncherDialogFactory ();", "+\t\t\tdialogFactory.AddRef ();", "+\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_HELPERAPPLAUNCHERDIALOG_CONTRACTID, true);", "+\t\t\tbyte[] aClassName = MozillaDelegate.wcsToMbcs (null, \"swtHelperAppLauncherDialog\", true); //$NON-NLS-1$", "+\t\t\trc = componentRegistrar.RegisterFactory (XPCOM.NS_HELPERAPPLAUNCHERDIALOG_CID, aClassName, aContractID, dialogFactory.getAddress ());", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (rc);", "+\t\t\t}", "+\t\t\tdialogFactory.Release ();", "+\t\t}", "-\t\t\t\tDownloadFactory_1_8 downloadFactory_1_8 = new DownloadFactory_1_8 ();", "-\t\t\t\tdownloadFactory_1_8.AddRef ();", "-\t\t\t\taContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_TRANSFER_CONTRACTID, true);", "-\t\t\t\taClassName = MozillaDelegate.wcsToMbcs (null, \"swtTransfer\", true); //$NON-NLS-1$", "-\t\t\t\trc = componentRegistrar.RegisterFactory (XPCOM.NS_DOWNLOAD_CID, aClassName, aContractID, downloadFactory_1_8.getAddress ());", "-\t\t\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\t\t\tbrowser.dispose ();", "-\t\t\t\t\terror (rc);", "+\t\t\t\tif (!factoriesRegistered) {", "+\t\t\t\t\tDownloadFactory_1_8 downloadFactory_1_8 = new DownloadFactory_1_8 ();", "+\t\t\t\t\tdownloadFactory_1_8.AddRef ();", "+\t\t\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_TRANSFER_CONTRACTID, true);", "+\t\t\t\t\tbyte[] aClassName = MozillaDelegate.wcsToMbcs (null, \"swtTransfer\", true); //$NON-NLS-1$", "+\t\t\t\t\trc = componentRegistrar.RegisterFactory (XPCOM.NS_DOWNLOAD_CID, aClassName, aContractID, downloadFactory_1_8.getAddress ());", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\t\t\tbrowser.dispose ();", "+\t\t\t\t\t\terror (rc);", "+\t\t\t\t\t}", "+\t\t\t\t\tdownloadFactory_1_8.Release ();", "-\t\t\t\tdownloadFactory_1_8.Release ();", "+", "+\t\tSystem.setProperty (FACTORIES_REGISTERED, TRUE);"]}], "num": 38507}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9d93f3f188d817c7d28a802d69a70ff9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa07264c8313cf0508f95c33aa18604f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "c30bd947feb52161807fd25370a7065b3a9545f6", "commitAfterChange": "9c5a547f972eeac99f5c9b2f97f45ea3811ef6e7", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 115, "signatureBeforeChange": " void showToolTip (int x, int y)", "signatureAfterChange": "  void _setToolTipText (int x, int y)", "diff": ["+void _setToolTipText (int x, int y) {", "+\tString oldTip = getToolTipText();", "+\tString newTip = _getToolTip(x, y);", "+\tif (newTip == null || !newTip.equals(oldTip)) {", "+\t\tsetToolTipText(newTip);", "-void showToolTip (int x, int y) {", "-\tString tooltip = _getToolTip(x, y);", "-\tif (tooltip == null) return;", "-\tif (toolTipShell == null) {", "-\t\ttoolTipShell = new Shell (getShell(), SWT.ON_TOP | SWT.TOOL);", "-\t\ttoolTipLabel = new Label (toolTipShell, SWT.CENTER);", "-\t\ttoolTipShell.getAccessible().addAccessibleListener(new AccessibleAdapter() {", "-\t\t\tpublic void getName(AccessibleEvent e) {", "-\t\t\t\te.result = toolTipLabel.getText();", "-\t\t\t}", "-\t\t});", "-\t\ttoolTipShell.getAccessible().addAccessibleControlListener(new AccessibleControlAdapter() {", "-\t\t\tpublic void getRole(AccessibleControlEvent e) {", "-\t\t\t\te.detail = ACC.ROLE_TOOLTIP;", "-\t\t\t}", "-\t\t});", "-\t\tDisplay display = toolTipShell.getDisplay();", "-\t\ttoolTipLabel.setForeground (display.getSystemColor (SWT.COLOR_INFO_FOREGROUND));", "-\t\ttoolTipLabel.setBackground (display.getSystemColor (SWT.COLOR_INFO_BACKGROUND));", "-\t\tfor (int i = 0; i < toolTipEvents.length; i++) {", "-\t\t\taddListener(toolTipEvents[i], toolTipListener);", "-\t\t}", "-\t}", "-\tif (updateToolTip(x, y)) {", "-\t\ttoolTipShell.setVisible(true);", "-\t} else {", "-\t\thideToolTip();", "-\t}", "-\t", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c39d49add39ea2017eb61f3e3908d92a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "commitAfterChange": "bbeab947327689cb203638e742e58f555e6c1b64", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 108, "signatureBeforeChange": " void resetTabSize(boolean checkHeight)", "signatureAfterChange": " boolean updateToolTip (int x, int y, Label label)", "diff": ["-}", "-void resetTabSize(boolean checkHeight){", "-\tint oldHeight = tabHeight;", "-\tif (!fixedTabHeight && checkHeight) {", "-\t\tif (topRight != null) tempHeight = Math.max(tempHeight, topRight.computeSize(SWT.DEFAULT, SWT.DEFAULT).y);", "-\t\t", "-\tif (tabHeight != oldHeight){", "-\t\toldSize = null;", "-\t\tnotifyListeners(SWT.Resize, new Event());", "-\t\tsetItemBounds();", "-\t\tredraw();", "+boolean updateToolTip (int x, int y, Label label) {", "+\tCTabItem item = getItem(new Point (x, y));", "+\tif (item == null) return false;", "+\tString tooltip = item.getToolTipText();", "+\tif (tooltip == null) return false;", "+\tif (tooltip.equals(label.getText())) return true;", "+\t", "+\tShell tip = label.getShell();", "+\tlabel.setText(tooltip);", "+\tPoint labelSize = label.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\tlabelSize.x += 2; labelSize.y += 2;", "+\tlabel.setSize(labelSize);", "+\ttip.pack();", "+\t/*", "+\t * On some platforms, there is a minimum size for a shell  ", "+\t * which may be greater than the label size.", "+\t * To avoid having the background of the tip shell showing", "+\t * around the label, force the label to fill the entire client area.", "+\t */", "+\tRectangle area = tip.getClientArea();", "+\tlabel.setSize(area.width, area.height);", "+\t/*", "+\t * Position the tooltip and ensure that it is not located off", "+\t * the screen.", "+\t */", "+\tPoint cursorLocation = getDisplay().getCursorLocation();", "+\t// Assuming cursor is 21x21 because this is the size of", "+\t// the arrow cursor on Windows ", "+\tint cursorHeight = 21; ", "+\tPoint size = tip.getSize();", "+\tRectangle rect = tip.getMonitor().getBounds();", "+\tPoint pt = new Point(cursorLocation.x, cursorLocation.y + cursorHeight + 2);", "+\tpt.x = Math.max(pt.x, rect.x);", "+\tif (pt.x + size.x > rect.x + rect.width) pt.x = rect.x + rect.width - size.x;", "+\tif (pt.y + size.y > rect.y + rect.height) {", "+\t\tpt.y = cursorLocation.y - 2 - size.y;", "+\t}", "+\ttip.setLocation(pt);", "+\treturn true;"]}], "num": 52397}
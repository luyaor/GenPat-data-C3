{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ea13d19b57bbdd3927b304a288e3876", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a45e15675a45ded7fddc0ea7e46e32e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "726968a24a410100379c1fac10f24f5b50dd1935", "commitAfterChange": "619a5f67ffa764e20badd65688c430544e8dec67", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  int[] createGdipImage()", "signatureAfterChange": "  int[] createGdipImage()", "diff": ["-\t\tcase SWT.ICON: return new int[]{Gdip.Bitmap_new(handle), 0};", "+\t\tcase SWT.ICON: {", "+\t\t\t/*", "+\t\t\t* Bug in GDI+. Creating a new GDI+ Bitmap from a HICON segment faults", "+\t\t\t* when the icon width is bigger than the icon height.  The fix is to", "+\t\t\t* detect this and create a PixelFormat32bppARGB image instead.", "+\t\t\t*/", "+\t\t\tICONINFO iconInfo = new ICONINFO();", "+\t\t\tif (OS.IsWinCE) {", "+\t\t\t\tGetIconInfo(this, iconInfo);", "+\t\t\t} else {", "+\t\t\t\tOS.GetIconInfo(handle, iconInfo);", "+\t\t\t}", "+\t\t\tint hBitmap = iconInfo.hbmColor;", "+\t\t\tif (hBitmap == 0) hBitmap = iconInfo.hbmMask;", "+\t\t\tBITMAP bm = new BITMAP();", "+\t\t\tOS.GetObject(hBitmap, BITMAP.sizeof, bm);", "+\t\t\tint imgWidth = bm.bmWidth;", "+\t\t\tint imgHeight = hBitmap == iconInfo.hbmMask ? bm.bmHeight / 2 : bm.bmHeight;", "+\t\t\tint img = 0, pixels = 0;", "+\t\t\tif (imgWidth > imgHeight) {", "+\t\t\t\tint hDC = device.internal_new_GC(null);", "+\t\t\t\tint srcHdc = OS.CreateCompatibleDC(hDC);", "+\t\t\t\tint oldSrcBitmap = OS.SelectObject(srcHdc, hBitmap);", "+\t\t\t\tint memHdc = OS.CreateCompatibleDC(hDC);", "+\t\t\t\tint memDib = createDIB(imgWidth, imgHeight, 32);", "+\t\t\t\tif (memDib == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tint oldMemBitmap = OS.SelectObject(memHdc, memDib);\t", "+\t\t\t\tBITMAP dibBM = new BITMAP();", "+\t\t\t\tOS.GetObject(memDib, BITMAP.sizeof, dibBM);", "+\t\t\t \tOS.BitBlt(memHdc, 0, 0, imgWidth, imgHeight, srcHdc, 0, hBitmap == iconInfo.hbmMask ? imgHeight : 0, OS.SRCCOPY);", "+\t\t\t\tOS.SelectObject(memHdc, oldMemBitmap);", "+\t\t\t\tOS.DeleteObject(memHdc);", "+\t\t\t \tbyte[] srcData = new byte[dibBM.bmWidthBytes * dibBM.bmHeight];", "+\t\t\t\tOS.MoveMemory(srcData, dibBM.bmBits, srcData.length);", "+\t\t\t\tOS.DeleteObject(memDib);", "+\t\t\t\tOS.SelectObject(srcHdc, iconInfo.hbmMask);", "+\t\t\t\tfor (int y = 0, dp = 0; y < imgHeight; ++y) {", "+\t\t\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "+\t\t\t\t\t\tif (OS.GetPixel(srcHdc, x, y) != 0) {", "+\t\t\t\t\t\t\tsrcData[dp + 3] = (byte)0;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tsrcData[dp + 3] = (byte)0xFF;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tdp += 4;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tOS.SelectObject(srcHdc, oldSrcBitmap);", "+\t\t\t\tOS.DeleteObject(srcHdc);", "+\t\t\t\tdevice.internal_dispose_GC(hDC, null);", "+\t\t\t\tint hHeap = OS.GetProcessHeap();", "+\t\t\t\tpixels = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, srcData.length);", "+\t\t\t\tOS.MoveMemory(pixels, srcData, srcData.length);", "+\t\t\t\timg = Gdip.Bitmap_new(imgWidth, imgHeight, dibBM.bmWidthBytes, Gdip.PixelFormat32bppARGB, pixels);", "+\t\t\t} else {", "+\t\t\t\timg = Gdip.Bitmap_new(handle);", "+\t\t\t}", "+\t\t\tif (iconInfo.hbmColor == 0) OS.DeleteObject(iconInfo.hbmColor);", "+\t\t\tif (iconInfo.hbmMask == 0) OS.DeleteObject(iconInfo.hbmMask);", "+\t\t\treturn new int[]{img, pixels};", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3cface36971f18624f78ec4530f1eada", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "62e797223f6c6aa3b4feac4a904182e94088a92c", "commitAfterChange": "1c70972bfbe39a9f87e858e5e97e923ee244c636", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": "  void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "signatureAfterChange": "  void drawBitmapAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, BITMAP bm, int imgWidth, int imgHeight)", "diff": ["+\t}", "+", "+\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION(4, 10)) {", "+\t\tBLENDFUNCTION blend = new BLENDFUNCTION();", "+\t\tblend.BlendOp = OS.AC_SRC_OVER;", "+\t\tint srcHdc = OS.CreateCompatibleDC(handle);", "+\t\tint oldSrcBitmap = OS.SelectObject(srcHdc, srcImage.handle);", "+\t\tif (srcImage.alpha != -1) {", "+\t\t\tblend.SourceConstantAlpha = (byte)srcImage.alpha;", "+\t\t\tOS.AlphaBlend(handle, destX, destY, destWidth, destHeight, srcHdc, srcX, srcY, srcWidth, srcHeight, blend);", "+\t\t} else {", "+\t\t\tint memDib = Image.createDIB(srcWidth, srcHeight, 32);", "+\t\t\tif (memDib == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\tint memHdc = OS.CreateCompatibleDC(handle);", "+\t\t\tint oldMemBitmap = OS.SelectObject(memHdc, memDib);", "+\t\t\tBITMAP dibBM = new BITMAP();", "+\t\t\tOS.GetObject(memDib, BITMAP.sizeof, dibBM);", "+\t\t\tOS.BitBlt(memHdc, 0, 0, srcWidth, srcHeight, srcHdc, srcX, srcY, OS.SRCCOPY);", "+\t\t\tbyte[] srcData = new byte[dibBM.bmWidthBytes * dibBM.bmHeight];", "+\t\t\tOS.MoveMemory(srcData, dibBM.bmBits, srcData.length);", "+\t\t\tfinal int apinc = imgWidth - srcWidth;", "+\t\t\tint ap = srcY * imgWidth + srcX, sp = 0;", "+\t\t\tbyte[] alphaData = srcImage.alphaData;", "+\t\t\tfor (int y = 0; y < srcHeight; ++y) {", "+\t\t\t\tfor (int x = 0; x < srcWidth; ++x) {", "+\t\t\t\t\tint alpha = alphaData[ap++];", "+\t\t\t\t\tsrcData[sp+3] = (byte)alpha;", "+\t\t\t\t\tsrcData[sp+2] = (byte)((srcData[sp+2] & 0xff) * alpha / 255);", "+\t\t\t\t\tsrcData[sp+1] = (byte)((srcData[sp+1] & 0xff) * alpha / 255);", "+\t\t\t\t\tsrcData[sp+0] = (byte)((srcData[sp+0] & 0xff) * alpha / 255);", "+\t\t\t\t\tsp += 4;", "+\t\t\t\t}", "+\t\t\t\tap += apinc;", "+\t\t\t}", "+\t\t\tOS.MoveMemory(dibBM.bmBits, srcData, srcData.length);", "+\t\t\tblend.SourceConstantAlpha = (byte)0xff;", "+\t\t\tblend.AlphaFormat = OS.AC_SRC_ALPHA;", "+\t\t\tOS.AlphaBlend(handle, destX, destY, destWidth, destHeight, memHdc, 0, 0, srcWidth, srcHeight, blend);", "+\t\t\tOS.SelectObject(memHdc, oldMemBitmap);", "+\t\t\tOS.DeleteDC(memHdc);", "+\t\t\tOS.DeleteObject(memDib);", "+\t\t}", "+\t\tOS.SelectObject(srcHdc, oldSrcBitmap);", "+\t\tOS.DeleteDC(srcHdc);"]}], "num": 32982}
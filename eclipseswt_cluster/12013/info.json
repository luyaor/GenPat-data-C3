{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "490c825ccc726f4e1a00fbbb06ad1b28", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d9f2c83d95cfde01a7248552fd95bc4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "22ebc0bfda7d51c576a69d9ad65b1367c74fe002", "commitAfterChange": "b024555b7be59ed9c69f2568310cc99cd0b6720a", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": "  LRESULT WM_CHAR (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_CHAR (int wParam, int lParam)", "diff": ["+\t\tcase ' ':", "+\t\t\tif ((style & SWT.CHECK) != 0) {", "+\t\t\t\tint index = OS.SendMessage (handle, OS.LVM_GETNEXTITEM, -1, OS.LVNI_FOCUSED);", "+\t\t\t\tif (index != -1) {", "+\t\t\t\t\tTableItem item = _getItem (index);", "+\t\t\t\t\titem.setChecked (!item.getChecked (), true);", "+\t\t\t\t\tif (!OS.IsWinCE) {", "+\t\t\t\t\t\tOS.NotifyWinEvent (OS.EVENT_OBJECT_FOCUS, handle, OS.OBJID_CLIENT, index + 1);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t/*", "+\t\t\t* NOTE: Call the window proc with WM_KEYDOWN rather than WM_CHAR", "+\t\t\t* so that the key that was ignored during WM_KEYDOWN is processed.", "+\t\t\t* This allows the application to cancel an operation that is normally", "+\t\t\t* performed in WM_KEYDOWN from WM_CHAR.", "+\t\t\t*/", "+\t\t\tint code = callWindowProc (handle, OS.WM_KEYDOWN, wParam, lParam);", "+\t\t\treturn new LRESULT (code);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d8bef4760275cb16dbf7ca663f45fc9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "38e14978feed859fa6428af4d14fcc467662d294", "commitAfterChange": "5d8726bcb8a72d394af3ce603770c8bf01b35d5d", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "  LRESULT WM_LBUTTONDBLCLK (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDBLCLK (int wParam, int lParam)", "diff": ["+\tmouseDown = true;", "+", "-\tOS.SendMessage (handle, OS.LVM_HITTEST, 0, pinfo);", "+\tint index = OS.SendMessage (handle, OS.LVM_HITTEST, 0, pinfo);", "+\t", "+\t/* Look for check/uncheck */", "+\tif ((style & SWT.CHECK) != 0) {", "+\t\t/*", "+\t\t* Note that when the table has LVS_EX_FULLROWSELECT and the", "+\t\t* user clicks anywhere on a row except on the check box, all", "+\t\t* of the bits are set.  The hit test flags are LVHT_ONITEM.", "+\t\t* This means that a bit test for LVHT_ONITEMSTATEICON is not", "+\t\t* the correct way to determine that the user has selected", "+\t\t* the check box, equality is needed.", "+\t\t*/", "+\t\tif (index != -1 && pinfo.flags == OS.LVHT_ONITEMSTATEICON) {", "+\t\t\tTableItem item = _getItem (index);", "+\t\t\titem.setChecked (!item.getChecked (), true);", "+\t\t\tif (!OS.IsWinCE) {", "+\t\t\t\tOS.NotifyWinEvent (OS.EVENT_OBJECT_FOCUS, handle, OS.OBJID_CLIENT, index + 1);", "+\t\t\t}", "+\t\t}\t", "+\t}"]}], "num": 12013}
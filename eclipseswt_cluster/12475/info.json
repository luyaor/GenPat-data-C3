{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd38b7b7eeec2718c8e07a3688d16b00", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "96d3317e02c8cbeeef73fdd9ba073b12", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ScrollBar.java", "commitBeforeChange": "171c9294b9c67722190bcd1c1da73095280a1581", "commitAfterChange": "5c1ba31762f8b5de0b7490a6651b883396dccc2f", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  boolean SetScrollInfo (int hwnd, int flags, SCROLLINFO info, boolean fRedraw)", "signatureAfterChange": "  boolean SetScrollInfo (int hwnd, int flags, SCROLLINFO info, boolean fRedraw)", "diff": ["-\tif ((state & (DISABLED | HIDDEN)) != 0) fRedraw = false;", "-\tboolean result = OS.SetScrollInfo (hwnd, flags, info, fRedraw);", "-\t", "-\t/*", "-\t* Bug in Windows.  For some reason, when the widget", "-\t* is a standard scroll bar, and SetScrollInfo() is", "-\t* called with SIF_RANGE or SIF_PAGE, the widget is", "-\t* incorrectly made visible so that the next time the", "-\t* parent is resized (or another scroll bar operation", "-\t* is performed), the scroll bar draws.  The fix is", "-\t* to hide the scroll bar (again) when already hidden.", "-\t*/", "-\tif ((state & HIDDEN) != 0) {", "+\tboolean both = false;", "+\tboolean visible = getVisible ();", "+\tif (!visible) {", "-\t\t\tboolean both = bar != null && !bar.getVisible ();", "+\t\t\tboth = bar != null && !bar.getVisible ();", "+\t\t}", "+\t}", "+\tif (!visible || (state & DISABLED) != 0) fRedraw = false;", "+\tboolean result = OS.SetScrollInfo (hwnd, flags, info, fRedraw);", "+\t/*", "+\t* Bug in Windows.  For some reason, when the widget", "+\t* is a standard scroll bar, and SetScrollInfo() is", "+\t* called with SIF_RANGE or SIF_PAGE, the widget is", "+\t* incorrectly made visible so that the next time the", "+\t* parent is resized (or another scroll bar operation", "+\t* is performed), the scroll bar draws.  The fix is", "+\t* to hide the scroll bar (again) when already hidden.", "+\t*/", "+\tif (!visible) {", "+\t\t/*", "+\t\t* This line is intentionally commented.  Currently", "+\t\t* always show scrollbar as being enabled and visible.", "+\t\t*/", "+//\t\tif (OS.IsWinCE) error (SWT.ERROR_NOT_IMPLEMENTED);", "+\t\tif (!OS.IsWinCE) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b3fd8546b77f3e2ad7433ee68d08a11", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ScrollBar.java", "commitBeforeChange": "ad2dde1402b1115b448536b63b41d017dbeb9654", "commitAfterChange": "babb3355b2fc359bb510974128be9cf62b0893b2", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  boolean SetScrollInfo (int hwnd, int flags, SCROLLINFO info, boolean fRedraw)", "signatureAfterChange": "  boolean SetScrollInfo (int hwnd, int flags, SCROLLINFO info, boolean fRedraw)", "diff": ["-\tif ((state & (DISABLED | HIDDEN)) != 0) fRedraw = false;", "-\tboolean result = OS.SetScrollInfo (hwnd, flags, info, fRedraw);", "-\t", "-\t/*", "-\t* Bug in Windows.  For some reason, when the widget", "-\t* is a standard scroll bar, and SetScrollInfo() is", "-\t* called with SIF_RANGE or SIF_PAGE, the widget is", "-\t* incorrectly made visible so that the next time the", "-\t* parent is resized (or another scroll bar operation", "-\t* is performed), the scroll bar draws.  The fix is", "-\t* to hide the scroll bar (again) when already hidden.", "-\t*/", "-\tif ((state & HIDDEN) != 0) {", "+\tboolean both = false;", "+\tboolean isVisible = (state & HIDDEN) == 0;", "+\tboolean isEnabled = (state & DISABLED) == 0;", "+\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION(4, 10)) {", "+\t\tSCROLLBARINFO psbi = new SCROLLBARINFO ();", "+\t\tpsbi.cbSize = SCROLLBARINFO.sizeof;", "+\t\tint idObject = (style & SWT.VERTICAL) != 0 ? OS.OBJID_VSCROLL : OS.OBJID_HSCROLL;", "+\t\tOS.GetScrollBarInfo (hwndScrollBar (), idObject, psbi);", "+\t\tisVisible = (psbi.rgstate [0] & OS.STATE_SYSTEM_INVISIBLE) == 0;", "+\t\tisEnabled = (psbi.rgstate [0] & OS.STATE_SYSTEM_UNAVAILABLE) == 0;", "+\t}", "+\tif (!isVisible) {", "-\t\t\tboolean both = bar != null && !bar.getVisible ();", "+\t\t\tboth = bar != null && !bar.getVisible ();", "+\t\t}", "+\t}", "+\tif (!isVisible || !isEnabled) fRedraw = false;", "+\tboolean result = OS.SetScrollInfo (hwnd, flags, info, fRedraw);", "+\t/*", "+\t* Bug in Windows.  For some reason, when the widget", "+\t* is a standard scroll bar, and SetScrollInfo() is", "+\t* called with SIF_RANGE or SIF_PAGE, the widget is", "+\t* incorrectly made visible so that the next time the", "+\t* parent is resized (or another scroll bar operation", "+\t* is performed), the scroll bar draws.  The fix is", "+\t* to hide the scroll bar (again) when already hidden.", "+\t*/", "+\tif (!isVisible) {", "+\t\t/*", "+\t\t* This line is intentionally commented.  Currently", "+\t\t* always show scrollbar as being enabled and visible.", "+\t\t*/", "+//\t\tif (OS.IsWinCE) error (SWT.ERROR_NOT_IMPLEMENTED);", "+\t\tif (!OS.IsWinCE) {", "-\tif ((state & DISABLED) != 0) {", "+\tif (!isEnabled) {"]}], "num": 12475}
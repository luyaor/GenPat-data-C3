{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d66935c4094bc19ae24eda716a71ceb8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78d04050ebb8f380f162823266673f9e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/HTMLTransfer.java", "commitBeforeChange": "a9bcfea463127dd8a6c52ce4af29eac7df4a241d", "commitAfterChange": "c5308d73c1e46a1db4edf39db94dfada1b6e65dc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-\tif (size <= 0) return null;\t\t\t", "-\tchar[] chars = new char [size/2];", "-\tOS.memmove (chars, transferData.pValue, size);", "-\tString string = new String (chars);", "+\tif (size <= 0) return null;", "+\tchar[] bom = new char[1]; // look for a Byte Order Mark", "+\tif (size > 1) OS.memmove (bom, transferData.pValue, 2);", "+\tString string;", "+\tif (bom[0] == '\\ufeff' || bom[0] == '\\ufffe') {", "+\t\t// utf16", "+\t\tchar[] chars = new char [size/2];", "+\t\tOS.memmove (chars, transferData.pValue, size);", "+\t\tstring = new String (chars);", "+\t} else {", "+\t\tbyte[] utf8 = new byte[size];", "+\t\tOS.memmove(utf8, transferData.pValue, size);", "+\t\t// convert utf8 byte array to a unicode string", "+\t\tchar [] unicode = org.eclipse.swt.internal.Converter.mbcsToWcs (null, utf8);", "+\t\tstring = new String (unicode);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46fd833e7f7419f90a6d68332939cadd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "2703b6b4917ee70e34e69f6beabdf6e17c0e648e", "commitAfterChange": "0e0eae7504b067875076ee5d9af4693ac4a9b250", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["+\t\tint /*long*/ bitmapData = imageRep.bitmapData();", "+\t\tint /*long*/ bitmapFormat = imageRep.bitmapFormat();", "-", "-\t\tOS.memmove(srcData, imageRep.bitmapData(), dataSize);", "-", "-\t\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "-\t\tImageData data = new ImageData((int)/*64*/width, (int)/*64*/height, (int)/*64*/bpp, palette, 4, srcData);", "+\t\tOS.memmove(srcData, bitmapData, dataSize);", "+\t\t", "+\t\tPaletteData palette;", "+\t\tif (bpp == 32 && (bitmapFormat & OS.NSAlphaFirstBitmapFormat) == 0) {", "+\t\t\tpalette = new PaletteData(0xFF000000, 0xFF0000, 0xFF00);", "+\t\t} else {", "+\t\t\tpalette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "+\t\t}", "+\t\tImageData data = new ImageData((int)/*64*/width, (int)/*64*/height, (int)/*64*/bpp, palette, 1, srcData);", "-", "-\t\tdata.transparentPixel = transparentPixel;", "-\t\tif (transparentPixel == -1 && type == SWT.ICON) {", "-\t\t\t/* Get the icon mask data */", "-\t\t\tint maskPad = 2;", "-\t\t\tint /*long*/ maskBpl = (((width + 7) / 8) + (maskPad - 1)) / maskPad * maskPad;", "-\t\t\tbyte[] maskData = new byte[(int)/*64*/(height * maskBpl)];", "-\t\t\tint offset = 0, maskOffset = 0;", "-\t\t\tfor (int y = 0; y<height; y++) {", "-\t\t\t\tfor (int x = 0; x<width; x++) {", "-\t\t\t\t\tif (srcData[offset] != 0) {", "-\t\t\t\t\t\tmaskData[maskOffset + (x >> 3)] |= (1 << (7 - (x & 0x7)));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tmaskData[maskOffset + (x >> 3)] &= ~(1 << (7 - (x & 0x7)));", "-\t\t\t\t\t}", "-\t\t\t\t\toffset += 4;", "-\t\t\t\t}", "-\t\t\t\tmaskOffset += maskBpl;", "+\t\tif (imageRep.hasAlpha() && transparentPixel == -1 && alpha == -1 && alphaData == null) {", "+\t\t\tbyte[] alphaData = new byte[(int)/*64*/(width * height)];", "+\t\t\tint offset = (bitmapFormat & OS.NSAlphaFirstBitmapFormat) != 0 ? 0 : 3, a = 0;", "+\t\t\tfor (int i = offset; i < srcData.length; i+= 4) {", "+\t\t\t\talphaData[a++] = srcData[i];", "-\t\t\tdata.maskData = maskData;", "-\t\t\tdata.maskPad = maskPad;", "+\t\t\tdata.alphaData = alphaData;", "+\t\t} else {", "+\t\t\tdata.transparentPixel = transparentPixel;", "+\t\t\tif (transparentPixel == -1 && type == SWT.ICON) {", "+\t\t\t\t/* Get the icon mask data */", "+\t\t\t\tint maskPad = 2;", "+\t\t\t\tint /*long*/ maskBpl = (((width + 7) / 8) + (maskPad - 1)) / maskPad * maskPad;", "+\t\t\t\tbyte[] maskData = new byte[(int)/*64*/(height * maskBpl)];", "+\t\t\t\tint offset = 0, maskOffset = 0;", "+\t\t\t\tfor (int y = 0; y<height; y++) {", "+\t\t\t\t\tfor (int x = 0; x<width; x++) {", "+\t\t\t\t\t\tif (srcData[offset] != 0) {", "+\t\t\t\t\t\t\tmaskData[maskOffset + (x >> 3)] |= (1 << (7 - (x & 0x7)));", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tmaskData[maskOffset + (x >> 3)] &= ~(1 << (7 - (x & 0x7)));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\toffset += 4;", "+\t\t\t\t\t}", "+\t\t\t\t\tmaskOffset += maskBpl;", "+\t\t\t\t}", "+\t\t\t\tdata.maskData = maskData;", "+\t\t\t\tdata.maskPad = maskPad;", "+\t\t\t}", "+\t\t\tdata.alpha = alpha;", "+\t\t\tif (alpha == -1 && alphaData != null) {", "+\t\t\t\tdata.alphaData = new byte[alphaData.length];", "+\t\t\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);", "+\t\t\t}", "-\t\tfor (int i = 0; i < srcData.length; i+= 4) {", "-\t\t\tsrcData[i] = 0;", "-\t\t}", "-\t\tdata.alpha = alpha;", "-\t\tif (alpha == -1 && alphaData != null) {", "-\t\t\tdata.alphaData = new byte[alphaData.length];", "-\t\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);", "+\t\tif (bpp == 32) {", "+\t\t\tint offset = (bitmapFormat & OS.NSAlphaFirstBitmapFormat) != 0 ? 0 : 3;", "+\t\t\tfor (int i = offset; i < srcData.length; i+= 4) {", "+\t\t\t\tsrcData[i] = 0;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c1fb953c67460f7334ad46f3b8578e14", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/TabFolder.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 6, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": "  void createHandle ()", "diff": ["+", "+void createHandle () {", "+\tint [] outControl = new int [1];", "+\tint window = OS.GetControlOwner (parent.handle);", "+\tOS.CreateTabsControl (window, new Rect (), (short)OS.kControlTabSizeLarge, (short)OS.kControlTabDirectionNorth, (short) 0, 0, outControl);", "+\tif (outControl [0] == 0) error (SWT.ERROR_NO_HANDLES);", "+\thandle = outControl [0];", "-void createHandle (int index) {", "-\tstate |= HANDLE;", "-\tstate &= ~CANVAS;", "-\t\t", "-\thandle= MacUtil.newControl(parent.handle, OS.kControlTabSmallProc);", "-\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3039885feec22c783c26425a3b5ee100", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "9bae3043b8c03528811ea12dd167ee4b0dbee04f", "commitAfterChange": "d5daa8f36f1cf3782d0b78f004964f7faa681453", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " \t\t \tprivate int handleMouseEvent(int nextHandler, int eRefHandle, int eventKind, int whichWindow)", "signatureAfterChange": " \t\t \tprivate int handleMouseEvent(int nextHandler, int eRefHandle, int eventKind, int whichWindow)", "diff": ["+\t\tif (whichWindow == 0 && eventKind == OS.kEventMouseDown) {", "+\t\t\tint[] wHandle= new int[1];", "+\t\t\tint rc= OS.GetEventParameter(eRefHandle, OS.kEventParamWindowRef, OS.typeWindowRef, null, null, wHandle);", "+\t\t\tif (rc == OS.kNoErr)", "+\t\t\t\twhichWindow= wHandle[0];", "+\t\t}", "+\t\t", "+\t\t", "+\t\tcase OS.kEventMouseWheelMoved:", "+\t\t\tOS.QDGlobalToLocalPoint(OS.GetWindowPort(whichWindow), where.getData());\t\t\t", "+\t\t\tint cntrl= MacUtil.findControlUnderMouse(where, whichWindow, null);", "+\t\t\tWidget ww= findWidget(cntrl);", "+\t\t\tif (ww instanceof Composite) {", "+\t\t\t\tComposite s= (Composite) ww;", "+\t\t\t\tScrollBar sb= s.getVerticalBar();", "+\t\t\t\tif (sb != null)", "+\t\t\t\t\treturn sb.processWheel(eRefHandle);", "+\t\t\t}", "+\t\t\tbreak;", "-\t\t\tfTrackedControl= 0;", "-\t\t", "+\t\t\tfTrackedControl= 0;\t\t\t", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd025150f3978bcb807f7dfef31360cf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ee155d593cfda428fc88139d1e8da486bb5a73cf", "commitAfterChange": "59b2491032a801ab7176764808e4a778061c6b28", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " void addColumn (TreeColumn column)", "signatureAfterChange": " void addColumn (TreeColumn column)", "diff": ["+\t}", "+\t/*", "+\t * The length of displayTexts always matches the parent's column count, unless this", "+\t * count is zero, in which case displayTexts is null.  ", "+\t */", "+\tString[] newDisplayTexts = new String [columnCount];", "+\tif (columnCount > 1) {", "+\t\tSystem.arraycopy (displayTexts, 0, newDisplayTexts, 0, index);", "+\t\tSystem.arraycopy (displayTexts, index, newDisplayTexts, index + 1, columnCount - index - 1);", "+\t}", "+\tdisplayTexts = newDisplayTexts;", "+\tif (columnCount == 1) {", "+\t\tGC gc = new GC (parent);", "+\t\tcomputeDisplayText (0, gc);", "+\t\ttextWidths [0] = gc.textExtent (getDisplayText (0)).x;", "+\t\tgc.dispose ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94d1eaa493d282425a2fe40f50c8a439", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/TextTransfer.java", "commitBeforeChange": "67976c6abaf5a07314770e0734a67e21100216a3", "commitAfterChange": "8e7bdacd1dbbc7e29ab695539fe4d98a2a8aee35", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void javaToNative (Object object, TransferData transferData)", "signatureAfterChange": " public void javaToNative (Object object, TransferData transferData)", "diff": ["-\tsuper.javaToNative(buffer, transferData);", "+\tif  (transferData.type ==  TYPEID1) { // COMPOUND_TEXT", "+\t\tint[] encoding = new int[1];", "+\t\tint[] format = new int[1];", "+\t\tint[] ctext = new int[1];", "+\t\tint[] length = new int[1];", "+\t\tboolean result = OS.gdk_utf8_to_compound_text(buffer, encoding, format, ctext, length);", "+\t\tif (!result) {", "+\t\t\ttransferData.result = 0;", "+\t\t} else {", "+\t\t\ttransferData.type = encoding[0];", "+\t\t\ttransferData.format = format[0];", "+\t\t\ttransferData.length = length[0];", "+\t\t\ttransferData.pValue = ctext[0];", "+\t\t\ttransferData.result = 1;", "+\t\t}", "+\t} else {", "+\t\tsuper.javaToNative(buffer, transferData);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "288eb392ffbea946d6212028c69cc0d3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  int callFocusEventHandler (int nextHandler, int theEvent)", "signatureAfterChange": "  int callFocusEventHandler (int nextHandler, int theEvent)", "diff": ["+\tif (OS.HIVIEW) {", "+\t\tshort [] part = new short [1];", "+\t\tif (txnObject == 0) {", "+\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamControlPart, OS.typeControlPartCode, null, 2, null, part);", "+\t\t\tif (part [0] == OS.kControlFocusNoPart) {", "+\t\t\t\tselection = new ControlEditTextSelectionRec ();", "+\t\t\t\tOS.GetControlData (handle, (short) OS.kControlEntireControl, OS.kControlEditTextSelectionTag, 4, selection, null);", "+\t\t\t}", "+\t\t}", "+\t\tint result = super.callFocusEventHandler (nextHandler, theEvent);", "+\t\tif (txnObject == 0) {", "+\t\t\tif (part [0] != OS.kControlFocusNoPart && selection != null) {", "+\t\t\t\tOS.SetControlData (handle, (short) OS.kControlEntireControl, OS.kControlEditTextSelectionTag, 4, selection);", "+\t\t\t\tselection = null;", "+\t\t\t}", "+\t\t}", "+\t\treturn result;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "817c831cc3a9cc54f9ae5d42ed5b38b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ScrollBar.java", "commitBeforeChange": "c727147cfc912981c3a3385133f2828fe1d74e9b", "commitAfterChange": "a215b82e21c4662f93a9c3b2b1fa9b09bb89fa3f", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": " public Rectangle getThumbTrackBounds ()", "signatureAfterChange": " public Rectangle getThumbTrackBounds ()", "diff": ["-\tboolean hasA = OS.GTK_RANGE_HAS_STEPPER_A (handle);", "-\tboolean hasB = OS.GTK_RANGE_HAS_STEPPER_B (handle);", "-\tboolean hasC = OS.GTK_RANGE_HAS_STEPPER_C (handle);", "-\tboolean hasD = OS.GTK_RANGE_HAS_STEPPER_D (handle);", "+\tint[] has_stepper = new int[1];", "+\tOS.gtk_widget_style_get (handle, OS.has_backward_stepper, has_stepper, 0);", "+\tboolean hasA = has_stepper[0] != 0;", "+\tOS.gtk_widget_style_get (handle, OS.has_secondary_backward_stepper, has_stepper, 0);", "+\tboolean hasB = has_stepper[0] != 0;", "+\tOS.gtk_widget_style_get (handle, OS.has_forward_stepper, has_stepper, 0);", "+\tboolean hasC = has_stepper[0] != 0;", "+\tOS.gtk_widget_style_get (handle, OS.has_secondary_forward_stepper, has_stepper, 0);", "+\tboolean hasD = has_stepper[0] != 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf7deeef1354d31ad980f7c408b2a4a2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "8c0cfc19eca4f241c34603eca33803e9daafabd5", "commitAfterChange": "ad0b4f3d2956c80326dfb03508ef2a05c83adcca", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " void setKeyState (Event event, XKeyEvent xEvent)", "signatureAfterChange": " void setKeyState (Event event, XKeyEvent xEvent)", "diff": ["-\t\t* Feature in MOTIF. For some reason, XLookupString() fails ", "-\t\t* to translate both the keysym and the character when the", "-\t\t* control key is down.  For example, Ctrl+2 has the correct", "-\t\t* keysym value (50) but no character value, while Ctrl+/ has", "-\t\t* the keysym value (2F) but an invalid character value", "-\t\t* (1F).  It seems that Motif is applying the algorithm to", "-\t\t* convert a character to a control character for characters", "-\t\t* that are not valid control characters.  The fix is to test", "-\t\t* for 7-bit ASCII keysym values that fall outside of the", "-\t\t* the valid control character range and use the keysym value", "-\t\t* as the character, not the incorrect value that XLookupString()", "-\t\t* returns.  Even though lower case values are not strictly", "-\t\t* valid control characters, they are included in the range.", "-\t\t* ", "-\t\t* Some other cases include Ctrl+3..Ctr+8, Ctrl+[.", "-\t\t*/", "-\t\tif ((xEvent.state & OS.ControlMask) != 0) {", "-\t\t\tint key = keysym [0];", "-\t\t\tif (0 <= key && key <= 0x7F) {", "-\t\t\t\tif ('a' <= key && key <= 'z') {", "-\t\t\t\t\tkey -= 'a' - 'A';", "-\t\t\t\t}", "-\t\t\t\tif (!(64 <= key && key <= 95)) {", "-\t\t\t\t\tbuffer [0] = (byte) key;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\t/*", "-\t\t* and Shift+F12 are not translated correctly by XLookupString.", "+\t\t* and Shift+F12 are not translated correctly by XLookupString().", "+\t\t* Feature in MOTIF. For some reason, XLookupString() fails ", "+\t\t* to translate both the keysym and the character when the", "+\t\t* control key is down.  For example, Ctrl+2 has the correct", "+\t\t* keysym value (50) but no character value, while Ctrl+/ has", "+\t\t* the keysym value (2F) but an invalid character value", "+\t\t* (1F).  It seems that Motif is applying the algorithm to", "+\t\t* convert a character to a control character for characters", "+\t\t* that are not valid control characters.  The fix is to test", "+\t\t* for 7-bit ASCII keysym values that fall outside of the", "+\t\t* the valid control character range and use the keysym value", "+\t\t* as the character, not the incorrect value that XLookupString()", "+\t\t* returns.  Even though lower case values are not strictly", "+\t\t* valid control characters, they are included in the range.", "+\t\t* ", "+\t\t* Some other cases include Ctrl+3..Ctr+8, Ctrl+[.", "+\t\t*/", "+\t\tint key = keysym [0];", "+\t\tif ((xEvent.state & OS.ControlMask) != 0 && (0 <= key && key <= 0x7F)) {", "+\t\t\tif ('a' <= key && key <= 'z') key -= 'a' - 'A';", "+\t\t\tif (!(64 <= key && key <= 95)) buffer [0] = (byte) key;", "+\t\t}", "+\t\t", "+\t\t/*", "+\t\tif (event.keyCode == 0) {", "+\t\t\tbyte [] buffer1 = new byte [5];", "+\t\t\tint [] keysym1 = new int [1];", "+\t\t\tint oldState = xEvent.state;", "+\t\t\txEvent.state = 0;", "+\t\t\tOS.XLookupString (xEvent, buffer1, buffer1.length, keysym1, null);", "+\t\t\txEvent.state = oldState;", "+\t\t\tif (buffer1 [0] != 0) {", "+\t\t\t\tchar [] result = Converter.mbcsToWcs (null, buffer1);", "+\t\t\t\tif (result.length != 0) event.keyCode = result [0];", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a33871a41769992e09289b62c8a219d5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "046b2b1ccf3f21ac6303aceb562ded417737fefc", "commitAfterChange": "b00764edfb26d776b9fe9f82005b87f9053f74be", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": " \t \tint getInsertionPointLineNumberAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \t \tint getStringForRangeAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\tint getInsertionPointLineNumberAttribute (int nextHandler, int theEvent, int userData) {", "-\t\tAccessibleTextEvent event = new AccessibleTextEvent(this);", "-\t\tevent.childID = getChildIDFromEvent(theEvent);", "-\t\tevent.offset = -1;", "-\t\tfor (int i = 0; i < accessibleTextListeners.size(); i++) {", "-\t\t\tAccessibleTextListener listener = (AccessibleTextListener) accessibleTextListeners.elementAt(i);", "-\t\t\tlistener.getCaretOffset(event);", "-\t\t}", "-\t\tif (event.offset != -1) {", "-\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeSInt32, 4, new int [] {event.offset});", "-\t\t\treturn OS.noErr;", "+\tint getStringForRangeAttribute (int nextHandler, int theEvent, int userData) {", "+\t\tint valueRef [] = new int [1];", "+\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeParameter, OS.typeCFTypeRef, null, 4, null, valueRef);", "+\t\tif (status == OS.noErr) {", "+\t\t\tCFRange range = new CFRange();", "+\t\t\tboolean ok = OS.AXValueGetValue(valueRef[0], OS.kAXValueCFRangeType, range);", "+\t\t\tif (ok) {", "+\t\t\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "+\t\t\t\tevent.childID = getChildIDFromEvent(theEvent);", "+\t\t\t\tevent.result = null;", "+\t\t\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\t\t\tlistener.getValue(event);", "+\t\t\t\t}", "+\t\t\t\tString appValue = event.result;", "+\t\t\t\tif (appValue != null) {", "+\t\t\t\t\tint stringRef = stringToStringRef (appValue.substring(range.location, range.location + range.length));", "+\t\t\t\t\tif (stringRef != 0) {", "+\t\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef});", "+\t\t\t\t\t\tOS.CFRelease(stringRef);", "+\t\t\t\t\t\treturn OS.noErr;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19c7833fee9d7078994dc5ab3d953bbe", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "07eff1b74b49b8400fef10ab67f94111fd65d9d4", "commitAfterChange": "d0747d3dabdb1fd1c574f88ba055d17eeb8cb4e0", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "  int kEventTextInputUnicodeForKeyEvent (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventTextInputUnicodeForKeyEvent (int nextHandler, int theEvent, int userData)", "diff": ["+\tint [] keyboardEvent = new int [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamTextInputSendKeyboardEvent, OS.typeEventRef, null, keyboardEvent.length * 4, null, keyboardEvent);", "+\tint [] keyCode = new int [1];", "+\tOS.GetEventParameter (keyboardEvent [0], OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "+\tswitch (keyCode [0]) {", "+\t\tcase 36: { /* Return */", "+\t\t\tpostEvent (SWT.DefaultSelection);", "+\t\t\tbreak;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "272430dc245b45b5dd0f9f2d71456283", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "e6f7b585199d6ba44254014a4c1731f439c2cf11", "commitAfterChange": "c422792f476daef88e3a0eb93a50d34c1718ea55", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 113, "signatureBeforeChange": "  void setKeyState (Event event, int theEvent)", "signatureAfterChange": "  void setKeyState (Event event, int theEvent)", "diff": ["-\t\t\tbyte [] charCode = new byte [1];", "-\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyMacCharCodes, OS.typeChar, null, charCode.length, null, charCode);", "-\t\t\tevent.character = (char) charCode [0];", "+\t\t\tint [] length = new int [1];", "+\t\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 4, length, (char[])null);", "+\t\t\tif (status == OS.noErr && length [0] > 0) {", "+\t\t\t\tchar [] chars = new char [1];", "+\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 2, null, chars);", "+\t\t\t\tevent.character = chars [0];", "+\t\t\t} else {", "+\t\t\t\tbyte [] charCode = new byte [1];", "+\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyMacCharCodes, OS.typeChar, null, charCode.length, null, charCode);", "+\t\t\t\tevent.character = (char) charCode [0];", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe3faecff928cdcbfc1d8f0be2f153c5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "c830ba87659f66da0a8654b6fd6e8eaf78f224a3", "commitAfterChange": "4482f07e9114cadcaa151462c4425652dbe37722", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 100, "signatureBeforeChange": "  boolean sendKeyEvent (int type, int theEvent)", "signatureAfterChange": "  boolean sendKeyEvent (int type, int theEvent)", "diff": ["+\t\tint [] chord = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseChord, OS.typeUInt32, null, 4, null, chord);", "+\t\tint [] modifiers = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "-\t\t\tevent.type = type;", "-\t\t\tsetInputState(event, theEvent);", "+\t\t\tsetInputState (event, type, chord [0], modifiers [0]);", "-\t\tevent.type = type;", "-\t\tif (!setKeyState (event, theEvent)) return true;", "+\t\tif (!setKeyState (event, type, theEvent)) return true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b01cae9c3dba4f719aa98b504bd6d92", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "  int kEventControlDraw (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventControlDraw (int nextHandler, int theEvent, int userData)", "diff": ["-\tif (getDrawCount (theControl [0]) > 0) return OS.noErr;", "-\tint visibleRgn = getVisibleRegion (theControl [0], true);", "-\tOS.SectRgn(region [0], visibleRgn, visibleRgn);", "-\tif (!OS.EmptyRgn (visibleRgn)) {", "-\t\tint [] port = new int [1];", "-\t\tOS.GetPort (port);", "-\t\tOS.LockPortBits (port [0]);", "-//\t\tOS.QDSetDirtyRegion (port, visibleRgn);", "-\t\tint oldClip = OS.NewRgn ();", "-\t\tOS.GetClip (oldClip);", "-\t\tOS.SetClip (visibleRgn);", "-\t\tdrawBackground (theControl [0]);", "+\tif (OS.HIVIEW) {", "+\t\tint[] context = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamCGContextRef, OS.typeCGContextRef, null, 4, null, context);", "+\t\tint visibleRgn = region [0];", "+\t\tdrawBackground (theControl [0], context [0]);", "-\t\tdrawWidget (theControl [0], region [0], visibleRgn, theEvent);", "-\t\tOS.SetClip (oldClip);", "-\t\tOS.DisposeRgn (oldClip);", "-\t\tOS.UnlockPortBits (port [0]);", "+\t\tdrawWidget (theControl [0], context [0], region [0], visibleRgn, theEvent);", "+\t} else {", "+\t\tif (getDrawCount (theControl [0]) > 0) return OS.noErr;", "+\t\tint visibleRgn = getVisibleRegion (theControl [0], true);", "+\t\tOS.SectRgn(region [0], visibleRgn, visibleRgn);", "+\t\tif (!OS.EmptyRgn (visibleRgn)) {", "+\t\t\tint [] port = new int [1];", "+\t\t\tOS.GetPort (port);", "+\t\t\tOS.LockPortBits (port [0]);", "+//\t\t\tOS.QDSetDirtyRegion (port, visibleRgn);", "+\t\t\tint oldClip = OS.NewRgn ();", "+\t\t\tOS.GetClip (oldClip);", "+\t\t\tOS.SetClip (visibleRgn);", "+\t\t\tdrawBackground (theControl [0], 0);", "+\t\t\tcallPaintEventHandler (theControl [0], region [0], visibleRgn, theEvent, nextHandler);", "+\t\t\tdrawWidget (theControl [0], 0, region [0], visibleRgn, theEvent);", "+\t\t\tOS.SetClip (oldClip);", "+\t\t\tOS.DisposeRgn (oldClip);", "+\t\t\tOS.UnlockPortBits (port [0]);", "+\t\t}", "+\t\tOS.DisposeRgn (visibleRgn);", "-\tOS.DisposeRgn (visibleRgn);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee5030b8bf8f881551e68f77f65f0f09", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 102, "signatureBeforeChange": " public int windowProc (int handle, int clientData, int callData)", "signatureAfterChange": "  int windowProc (int nextHandler, int theEvent, int userData)", "diff": ["-}", "-public int windowProc (int handle, int clientData, int callData) {", "-\tWidget widget = WidgetTable.get (handle);", "-\tif (widget == null) return 0;", "-\treturn widget.processResize (new Integer(callData));", "-}", "+int windowProc (int nextHandler, int theEvent, int userData) {", "+\tWidget widget = WidgetTable.get (userData);", "+\tif (widget == null) {", "+\t\tint [] theWindow = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamDirectObject, OS.typeWindowRef, null, 4, null, theWindow);", "+\t\tint [] theRoot = new int [1];", "+\t\tOS.GetRootControl (theWindow [0], theRoot);", "+\t\twidget = WidgetTable.get (theRoot [0]);", "+\t}", "+\tif (widget != null)  return widget.windowProc (nextHandler, theEvent, userData); ", "+\treturn OS.eventNotHandledErr;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71b3548319b0dcaf12e0bc5528af7947", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "aa5a69fe81e993c5bb9fcff4c9a425715ad470cd", "commitAfterChange": "bf9b442200602eaa6f44a276dfab033f09afe62d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public Rectangle getBounds (int index)", "signatureAfterChange": " public Rectangle getBounds (int index)", "diff": ["-\tGdkRectangle rect = new GdkRectangle ();", "+\tGdkRectangle rect = new GdkRectangle ();", "+\t", "+\tif (index == 0 && (parent.style & SWT.CHECK) != 0) {", "+\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 1, 3)) {", "+\t\t\tint [] x = new int [1], w = new int [1];", "+\t\t\tOS.gtk_tree_view_column_cell_get_position (column, parent.checkRenderer, x, w);", "+\t\t\trect.x += x [0] + w [0];", "+\t\t\trect.width -= x [0] + w [0];", "+\t\t} else {", "+\t\t\tint [] w = new int [1];", "+\t\t\tOS.gtk_cell_renderer_get_size (parent.checkRenderer, parentHandle, null, null, null, w, null);", "+\t\t\tint [] buffer = new int [1];", "+\t\t\tOS.gtk_widget_style_get (parentHandle, OS.horizontal_separator, buffer, 0);", "+\t\t\trect.x += w [0]  + buffer [0];", "+\t\t\trect.width -= w [0]  + buffer [0];", "+\t\t}", "+\t}", "+\t", "-\tif (index == 0 && (parent.style & SWT.CHECK) != 0) {", "-\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 1, 3)) {", "-\t\t\tint [] x = new int [1], w = new int [1];", "-\t\t\tOS.gtk_tree_view_column_cell_get_position (column, parent.checkRenderer, x, w);", "-\t\t\trect.x += x [0] + w [0];", "-\t\t\trect.width -= x [0] + w [0];", "-\t\t}", "-\t}", "+", "-\treturn new Rectangle (rect.x + border, rect.y + headerHeight, rect.width + 1, rect.height + 1);", "+\treturn new Rectangle (rect.x + border, rect.y + (headerHeight == 0 ?  border : headerHeight), rect.width + 1, rect.height + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "de506d1d4bc5cecb75e45fbd8de77315", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "0ec16a191637037ae868aa23c8c55cf2d8a64f40", "commitAfterChange": "d78a1f304fc5886faf978adcf843b66da4334afd", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public int getFocusIndex ()", "signatureAfterChange": " public int getFocusIndex ()", "diff": ["-\treturn OS.GTK_CLIST_FOCUS_ROW (handle);", "+\tint [] path = new int [1];", "+\tOS.gtk_tree_view_get_cursor (handle, path, null);", "+\tif (path [0] == 0) return -1;", "+\tint indices = OS.gtk_tree_path_get_indices (path [0]);", "+\tint [] index = new int []{-1};", "+\tif (indices != 0) OS.memmove (index, indices, 4);", "+\tOS.gtk_tree_path_free (path [0]);", "+\treturn index [0];", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fd22c70dda804a1d56708cfedf808152", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "bd469e488bef6f88459d9c0535159f8167416d1f", "commitAfterChange": "0f22a30a5b82bfeb0c093bba732059285a8fbaba", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 97, "signatureBeforeChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "diff": ["+\tshort [] button = new short [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button);", "+\t\t\tdisplay.dragButton = button [0];", "+\t\t\tint [] chord = new int [1];", "+\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseChord, OS.typeUInt32, null, 4, null, chord);", "+\t\t\tdisplay.dragState = chord [0];", "+\t\t\tint [] modifiers = new int [1];", "+\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "+\t\t\tdisplay.dragModifiers = modifiers [0];", "-\tshort [] button = new short [1];", "-\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0c56401c312f760448c278de96f3c84", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "e6f7b585199d6ba44254014a4c1731f439c2cf11", "commitAfterChange": "c422792f476daef88e3a0eb93a50d34c1718ea55", "methodNumberBeforeChange": 98, "methodNumberAfterChange": 99, "signatureBeforeChange": "  boolean sendKeyEvent (int type, int theEvent)", "signatureAfterChange": "  boolean sendKeyEvent (int type, int theEvent)", "diff": ["-\tEvent event = new Event ();", "-\tevent.type = type;", "-\tsetKeyState (event, theEvent);", "-\treturn sendKeyEvent (type, event);", "+\tint [] length = new int [1];", "+\tint status = OS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 4, length, (char[])null);", "+\tif (status == OS.noErr && length [0] > 2) {", "+\t\tchar [] chars = new char [length [0] / 2];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, chars.length * 2, null, chars);", "+\t\tfor (int i = 0; i < chars.length; i++) {", "+\t\t\tEvent event = new Event ();", "+\t\t\tevent.type = type;", "+\t\t\tevent.character = chars [i];", "+\t\t\tsetInputState(event, theEvent);", "+\t\t\tsendKeyEvent (type, event);", "+\t\t}", "+\t\treturn true;", "+\t} else {", "+\t\tEvent event = new Event ();", "+\t\tevent.type = type;", "+\t\tsetKeyState (event, theEvent);", "+\t\treturn sendKeyEvent (type, event);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da10e8b741e8fbc77fbcaf205b9c65e2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "087391432c358a97aa293253d3f96865b2753451", "commitAfterChange": "3f92c6f0fc3dca30dca82dabb4b8ec80f538abd5", "methodNumberBeforeChange": 104, "methodNumberAfterChange": 104, "signatureBeforeChange": "  int mouseProc (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int mouseProc (int nextHandler, int theEvent, int userData)", "diff": ["+\t\tcase OS.kEventMouseDown:", "+\t\t\tshort [] buttonData = new short [1];", "+\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, buttonData);", "+\t\t\tint [] clickCountData = new int [1];", "+\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamClickCount, OS.typeUInt32, null, 4, null, clickCountData);", "+\t\t\tclickCount = clickCountButton == buttonData [0] ? clickCountData [0] : 1;", "+\t\t\tclickCountButton = buttonData [0];", "+\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "399937d157494fc632fc1c4002eefe05", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "6c4a2c166738e67832efca98869d4a51c06db92b", "commitAfterChange": "84d56fe220646f29848300da6bc168504ddc3a77", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 24, "signatureBeforeChange": " public int getHeaderHeight ()", "signatureAfterChange": " public int getHeaderHeight ()", "diff": ["-\tif ( !OS.GTK_CLIST_SHOW_TITLES (handle) ) return 0;", "-\tOS.gtk_widget_size_request(handle, new GtkRequisition());", "-\treturn OS.GTK_CLIST_COLUMN_TITLE_AREA_HEIGHT(handle);", "+\tif ( !OS.gtk_tree_view_get_headers_visible(handle) ) return 0;", "+\tOS.gtk_widget_realize(handle);", "+\tint fixedWindow = OS.GTK_WIDGET_WINDOW (fixedHandle);", "+\tint binWindow = OS.gtk_tree_view_get_bin_window(handle);", "+\tint[] binY = new int[1];", "+\tOS.gdk_window_get_origin(binWindow, null, binY);", "+\tint[] fixedY = new int[1];", "+\tOS.gdk_window_get_origin(fixedWindow, null, fixedY);", "+\treturn binY[0]-fixedY[0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69df93be9adad4cfbbfe6169b5708bbe", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 44, "signatureBeforeChange": "\r void initializeDisplay ()", "signatureAfterChange": "\r void initializeDisplay ()", "diff": ["-\tsleepCallback = new Callback (this, \"sleepProc\", 2);\r", "-\tsleepProc = sleepCallback.getAddress ();\r", "-\tif (sleepProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);\r", "-\r", "+\twakeCallback = new Callback (this, \"wakeProc\", 3);", "+\twakeProc = wakeCallback.getAddress ();", "+\tif (wakeProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t", "+\t/* Create and install the pipe used to wake up from sleep */", "+\tint [] filedes = new int [2];", "+\tif (OS.pipe (filedes) != 0) error (SWT.ERROR_NO_HANDLES);", "+\tread_fd = filedes [0];  write_fd = filedes [1];", "+\tint xtAppContext = OS.XtDisplayToApplicationContext (xDisplay);", "+\tinputID = OS.XtAppAddInput (xtAppContext, read_fd, OS.XtInputReadMask, wakeProc, 0);", "+\t\r", "+\t\tOS.XmNenableThinThickness, 1,\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bcd93a3c56bb95c187f42d50283c5a25", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "c3e877f8f7f86d0622d844511bee89e75388f2a5", "commitAfterChange": "57bc9da816b78e8225c369df2233b6334cde29f9", "methodNumberBeforeChange": 93, "methodNumberAfterChange": 93, "signatureBeforeChange": "  void setItemCount (TreeItem parentItem, int count)", "signatureAfterChange": "  void setItemCount (TreeItem parentItem, int count)", "diff": ["-\tint[] ids = parentItem == null ? childIds : parentItem.childIds;", "+\tint [] ids = parentItem == null ? childIds : parentItem.childIds;", "+\t\tint [] removeIds = new int [itemCount - count];", "+\t\tint removeCount = 0;", "-\t\t\t\t\t\tif (OS.RemoveDataBrowserItems (handle, OS.kDataBrowserNoItem, 1, new int [] {id}, 0) != OS.noErr) {", "-\t\t\t\t\t\t\terror (SWT.ERROR_ITEM_NOT_REMOVED);", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tremoveIds [removeIds.length - removeCount] = id;", "+\t\t\t\t\t\tremoveCount++;", "+\t\tif (removeCount != 0 && removeCount != removeIds.length) {", "+\t\t\tint [] tmp = new int [removeCount];", "+\t\t\tSystem.arraycopy(removeIds, removeIds.length - removeCount, tmp, 0, removeCount);", "+\t\t\tremoveIds = tmp;", "+\t\t}", "+\t\tif (removeCount != 0 && OS.RemoveDataBrowserItems (handle, OS.kDataBrowserNoItem, removeCount, removeIds, 0) != OS.noErr) {", "+\t\t\terror (SWT.ERROR_ITEM_NOT_REMOVED);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "103a8935d2565ca0143b82a7773d88c7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "c830ba87659f66da0a8654b6fd6e8eaf78f224a3", "commitAfterChange": "4482f07e9114cadcaa151462c4425652dbe37722", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 115, "signatureBeforeChange": "  boolean setKeyState (Event event, int theEvent)", "signatureAfterChange": "  boolean setKeyState (Event event, int type, int theEvent)", "diff": ["-boolean setKeyState (Event event, int theEvent) {", "+boolean setKeyState (Event event, int type, int theEvent) {", "-\treturn setInputState (event, theEvent);", "+\tint [] chord = new int [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamMouseChord, OS.typeUInt32, null, 4, null, chord);", "+\tint [] modifiers = new int [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "+\treturn setInputState (event, type, chord [0], modifiers [0]);"]}], "num": 53658}
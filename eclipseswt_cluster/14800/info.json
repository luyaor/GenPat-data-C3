{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "16c929087f570773e1c6983cb61eff96", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "881765bff9f2e676c2fa1dfcfd2dff61", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "ec0aa33aacfbef8d812c3cb436af52990fcf99c4", "commitAfterChange": "a137c5853ab0ae7afcd3da9d3d83b4bdd3098087", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 129, "signatureBeforeChange": " public void update()", "signatureAfterChange": " public void update()", "diff": ["+\t/*", "+\t* Feature in Windows.  When an application does not remove", "+\t* events from the event queue for some time, Windows assumes", "+\t* the application is not responding and no longer sends paint", "+\t* events to the application.  The fix is to detect that the", "+\t* application is not responding and call PeekMessage() with", "+\t* PM_REMOVE to tell Windows that the application is ready", "+\t* to dispatch events.  Note that the message does not have", "+\t* to be found or dispatched in order to wake Windows up.", "+\t* ", "+\t* NOTE: This allows other cross thread messages to be delivered,", "+\t* most notably WM_ACTIVATE.", "+\t*/\t", "+\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (4, 10)) {", "+\t\tif (OS.IsHungAppWindow (hwndMessage)) {", "+\t\t\tMSG msg = new MSG ();", "+\t\t\tint flags = OS.PM_REMOVE | OS.PM_NOYIELD;", "+\t\t\tOS.PeekMessage (msg, hwndMessage, SWT_NULL, SWT_NULL, flags);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1cff4b08c59e109e067463138bc080a2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "c839d5daedccbcd6f6eb7787d9475744709a184b", "commitAfterChange": "df770484cf971bd1ec66ac250146e0aa48f0618e", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void open ()", "signatureAfterChange": " public void open ()", "diff": ["-\t* bar does not get updated until a new icon is set into the", "-\t* window or the window text is changed.  The fix is to call", "-\t* PeekMessage() with the flag PM_NOREMOVE to touch the event", "-\t* queue but not dispatch events.", "+\t* bar does not get updated.  The fix is to call PeekMessage()", "+\t* with the flag PM_NOREMOVE and PM_QS_SENDMESSAGE to respond", "+\t* to a cross thread WM_GETICON.", "+\t* ", "+\t* NOTE: This allows other cross thread messages to be delivered,", "+\t* most notably WM_ACTIVATE.", "-\tOS.PeekMessage (msg, 0, 0, 0, OS.PM_NOREMOVE | OS.PM_NOYIELD);", "+\tint flags = OS.PM_NOREMOVE | OS.PM_NOYIELD | OS.PM_QS_SENDMESSAGE;", "+\tOS.PeekMessage (msg, 0, 0, 0, flags);"]}], "num": 14800}
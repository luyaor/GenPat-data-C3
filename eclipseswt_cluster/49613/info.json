{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "995203c296b11a976e95456a62679566", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a6dc38faab763d0b879f302382d378af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "7dc0ed76c00a73244d89c00fb91aa296e1c8bb9a", "commitAfterChange": "283346df972bf05bab552efd3c4080f6b823b0e2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  void _setImage (Image image)", "signatureAfterChange": "  void _setImage (Image image)", "diff": ["-\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "-\t\tOS.SendMessage (handle, OS.BCM_SETIMAGELIST, 0, 0);", "+\tif (OS.COMCTL32_MAJOR >= 6) {", "-\t\t\timageList.add (image);", "+\t\t\timageList.add (image); //PBS_NORMAL", "+\t\t\t/*", "+\t\t\t* Bug in Windows.  When BCM_SETIMAGELIST is used to assign", "+\t\t\t* an image list with each of the button states, and the button", "+\t\t\t* has the style BS_CHECKBOX or BS_RADIOBUTTON, when the user", "+\t\t\t* drags the mouse in and out of the button when the state is", "+\t\t\t* set, the button draws using a blank image.  The fix is to", "+\t\t\t* set the complete image list only when the button is disabled.", "+\t\t\t*/", "+\t\t\tif (!OS.IsWindowEnabled (handle)) {", "+\t\t\t\timageList.add (image); //PBS_HOT", "+\t\t\t\timageList.add (image); //PBS_PRESSED", "+\t\t\t\tif (disabledImage != null) disabledImage.dispose ();", "+\t\t\t\tdisabledImage = new Image (display, image, SWT.IMAGE_DISABLE);", "+\t\t\t\timageList.add (disabledImage); //PBS_DISABLED", "+\t\t\t\timageList.add (image); //PBS_DEFAULTED", "+\t\t\t\timageList.add (image); //PBS_STYLUSHOT", "+\t\t\t}", "-\t\t\tif ((style & SWT.LEFT) != 0) buttonImageList.uAlign = OS.BUTTON_IMAGELIST_ALIGN_LEFT;", "-\t\t\tif ((style & SWT.CENTER) != 0) buttonImageList.uAlign = OS.BUTTON_IMAGELIST_ALIGN_CENTER;", "-\t\t\tif ((style & SWT.RIGHT) != 0) buttonImageList.uAlign = OS.BUTTON_IMAGELIST_ALIGN_RIGHT;", "-\t\t\tTCHAR buffer = new TCHAR (getCodePage (), \"\", true);", "-\t\t\tOS.SetWindowText (handle, buffer);", "+\t\t\tint oldBits = OS.GetWindowLong (handle, OS.GWL_STYLE), newBits = oldBits;", "+\t\t\tnewBits &= ~(OS.BS_LEFT | OS.BS_CENTER | OS.BS_RIGHT);", "+\t\t\tif ((style & SWT.LEFT) != 0) newBits |= OS.BS_LEFT;", "+\t\t\tif ((style & SWT.CENTER) != 0) newBits |= OS.BS_CENTER;", "+\t\t\tif ((style & SWT.RIGHT) != 0) newBits |= OS.BS_RIGHT;", "+\t\t\tif (text.length () == 0) {", "+\t\t\t\tif ((style & SWT.LEFT) != 0) buttonImageList.uAlign = OS.BUTTON_IMAGELIST_ALIGN_LEFT;", "+\t\t\t\tif ((style & SWT.CENTER) != 0) buttonImageList.uAlign = OS.BUTTON_IMAGELIST_ALIGN_CENTER;", "+\t\t\t\tif ((style & SWT.RIGHT) != 0) buttonImageList.uAlign = OS.BUTTON_IMAGELIST_ALIGN_RIGHT;", "+\t\t\t} else {", "+\t\t\t\tbuttonImageList.uAlign = OS.BUTTON_IMAGELIST_ALIGN_LEFT;", "+\t\t\t\tbuttonImageList.margin_left = computeLeftMargin ();", "+\t\t\t\tbuttonImageList.margin_right = MARGIN;", "+\t\t\t\tnewBits &= ~(OS.BS_CENTER | OS.BS_RIGHT);", "+\t\t\t\tnewBits |= OS.BS_LEFT;", "+\t\t\t}", "+\t\t\tif (newBits != oldBits) {", "+\t\t\t\tOS.SetWindowLong (handle, OS.GWL_STYLE, newBits);", "+\t\t\t\tOS.InvalidateRect (handle, null, true);", "+\t\t\t}", "-\t\t\tTCHAR buffer = new TCHAR (getCodePage (), text, true);", "-\t\t\tOS.SetWindowText (handle, buffer);", "-\t\t\t", "-\t\tint newBits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-\t\tint oldBits = newBits;", "+\t\tint newBits = OS.GetWindowLong (handle, OS.GWL_STYLE), oldBits = newBits;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb1952ddb77ea7183b8adb462ed1ee3d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "bd469e488bef6f88459d9c0535159f8167416d1f", "commitAfterChange": "0f22a30a5b82bfeb0c093bba732059285a8fbaba", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": " Event dragDetect (Event event)", "signatureAfterChange": " public boolean dragDetect (int button, int stateMask, int x, int y)", "diff": ["-//TODO - Javadoc", "-/*public*/ Event dragDetect (Event event) {", "+public boolean dragDetect (int button, int stateMask, int x, int y) {", "-\tif (event == null) error (SWT.ERROR_NULL_ARGUMENT);", "-\tif (!dragDetect (handle, event.x, event.y, false, null, null)) return null;", "-\tEvent dragEvent = new Event ();", "-\tdragEvent.button = event.button;", "-\tdragEvent.x = event.x;", "-\tdragEvent.y = event.y;", "-\tdragEvent.stateMask = event.stateMask;", "-\treturn dragEvent;", "+\tif (button != 1) return false;", "+\tif (!dragDetect (handle, x, y, false, null, null)) {", "+\t\t/*", "+\t\t* Feature in Windows.  DragDetect() captures the mouse", "+\t\t* and tracks its movement until the user releases the", "+\t\t* left mouse button, presses the ESC key, or moves the", "+\t\t* mouse outside the drag rectangle.  If the user moves", "+\t\t* the mouse outside of the drag rectangle, DragDetect()", "+\t\t* returns true and a drag and drop operation can be", "+\t\t* started.  When the left mouse button is released or", "+\t\t* the ESC key is pressed, these events are consumed by", "+\t\t* DragDetect() so that application code that matches", "+\t\t* mouse down/up pairs or looks for the ESC key will not", "+\t\t* function properly.  The fix is to send the missing", "+\t\t* events when the drag has not started.", "+\t\t* ", "+\t\t* NOTE: For now, don't send a fake WM_KEYDOWN/WM_KEYUP", "+\t\t* events for the ESC key.  This would require computing", "+\t\t* wParam (the key) and lParam (the repeat count, scan code,", "+\t\t* extended-key flag, context code, previous key-state flag,", "+\t\t* and transition-state flag) which is non-trivial.", "+\t\t*/", "+\t\tif (button == 1 && OS.GetKeyState (OS.VK_ESCAPE) >= 0) {", "+\t\t\tint wParam = 0;", "+\t\t\tif ((stateMask & SWT.CTRL) != 0) wParam |= OS.MK_CONTROL;", "+\t\t\tif ((stateMask & SWT.SHIFT) != 0) wParam |= OS.MK_SHIFT;", "+\t\t\tif ((stateMask & SWT.ALT) != 0) wParam |= OS.MK_ALT;", "+\t\t\tif ((stateMask & SWT.BUTTON1) != 0) wParam |= OS.MK_LBUTTON;", "+\t\t\tif ((stateMask & SWT.BUTTON2) != 0) wParam |= OS.MK_MBUTTON;", "+\t\t\tif ((stateMask & SWT.BUTTON3) != 0) wParam |= OS.MK_RBUTTON;", "+\t\t\tif ((stateMask & SWT.BUTTON4) != 0) wParam |= OS.MK_XBUTTON1;", "+\t\t\tif ((stateMask & SWT.BUTTON5) != 0) wParam |= OS.MK_XBUTTON2;", "+\t\t\tint lParam = (x & 0xFFFF) | ((y << 16) & 0xFFFF0000);", "+\t\t\tOS.SendMessage (handle, OS.WM_LBUTTONUP, wParam, lParam);", "+\t\t}", "+\t\treturn false;", "+\t}", "+\treturn sendDragEvent (button, stateMask, x, y);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9694dc52ba0ba3553598e589b2736f38", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 47, "signatureBeforeChange": "\r \r int processPaint (int callData)", "signatureAfterChange": "\r int processPaint (int callData)", "diff": ["+}\r", "-\t\r", "-\tint [] argList = {OS.XmNcolormap, 0, OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNmarginWidth, 0, OS.XmNmarginHeight, 0};\r", "+\tint [] argList = {\r", "+\t\tOS.XmNcolormap, 0,\r", "+\t\tOS.XmNwidth, 0,\r", "+\t\tOS.XmNheight, 0,\r", "+\t};\r", "-\tint x = 0, y = 0, width = argList [3], height = argList [5], marginWidth = argList [7],  marginHeight = argList [9];\r", "+\tint width = argList [3], height = argList [5];\r", "+\tImage currentImage = image;\r", "+\tboolean enabled = getEnabled();\r", "+\r", "+\tif ((parent.style & SWT.FLAT) != 0) {\r", "+\t\tDisplay display = getDisplay ();\r", "+\t\tboolean hasCursor = hasCursor ();\r", "+\t\t\r", "+\t\t/* Set the shadow thickness */\r", "+\t\tint thickness = 0;\r", "+\t\tif (set || (hasCursor && enabled)) {\r", "+\t\t\tthickness = Math.min (2, display.buttonShadowThickness);\r", "+\t\t}\r", "+\t\targList = new int [] {OS.XmNshadowThickness, thickness};\r", "+\t\tOS.XtSetValues (handle, argList, argList.length / 2);\r", "+\t\t\r", "+\t\t/* Determine if hot image should be used */\r", "+\t\tif (enabled && hasCursor && hotImage != null) {\r", "+\t\t\tcurrentImage = hotImage;\r", "+\t\t}\r", "+\t}\r", "+\r", "-\tImage currentImage = drawHotImage ? hotImage : image;\r", "-\tif (!getEnabled()) {\r", "+\tif (!enabled) {\r", "-\t\tColor disabledColor = display.getSystemColor(SWT.COLOR_WIDGET_NORMAL_SHADOW);\r", "-\t\tgc.setForeground(disabledColor);\r", "+\t\tColor disabledColor = display.getSystemColor (SWT.COLOR_WIDGET_NORMAL_SHADOW);\r", "+\t\tgc.setForeground (disabledColor);\r", "-\tif (text != null && text.length() > 0) {\r", "-\t\tPoint textExtent = gc.textExtent(text);\r", "+\tif (text.length () != 0) {\r", "+\t\tPoint textExtent = gc.textExtent (text);\r", "-\t\tRectangle imageBounds = currentImage.getBounds();\r", "+\t\tRectangle imageBounds = currentImage.getBounds ();\r", "-\tif ((parent.style & SWT.RIGHT) > 0) {\r", "-\t\timageX = x + ((width - imageWidth - textWidth - marginWidth) / 2) + 1;\r", "-\t\timageY = y + ((height - imageHeight) / 2);\r", "-\t\ttextX = imageX + imageWidth + marginWidth;\r", "-\t\ttextY = y + ((height - textHeight) / 2);\r", "+\tint spacing = 0;\r", "+\tif (textWidth != 0 && imageWidth != 0) spacing = 2;\r", "+\tif ((parent.style & SWT.RIGHT) != 0) {\r", "+\t\timageX = (width - imageWidth - textWidth - spacing) / 2;\r", "+\t\timageY = (height - imageHeight) / 2;\r", "+\t\ttextX = spacing + imageX + imageWidth;\r", "+\t\ttextY = (height - textHeight) / 2;\r", "-\t\timageX = x + ((width - imageWidth) / 2) + 1;\r", "-\t\timageY = y + ((height - imageHeight - textHeight - marginHeight) / 2) + 1;\r", "-\t\ttextX = x + ((width - textWidth) / 2) + 2;\r", "-\t\ttextY = imageY + imageHeight + marginHeight;\r", "+\t\timageX = (width - imageWidth) / 2;\r", "+\t\timageY = (height - imageHeight - textHeight - spacing) / 2;\r", "+\t\ttextX = (width - textWidth) / 2;\r", "+\t\ttextY = spacing + imageY + imageHeight;\r", "+\tif ((style & SWT.DROP_DOWN) != 0) {\r", "+\t\ttextX -= 6;  imageX -=6;\r", "+\t}\r", "-\r", "+\tif ((style & SWT.DROP_DOWN) != 0) {\r", "+\t\tint startX = width - 12, startY = (height - 2) / 2;\r", "+\t\tint [] arrow = {startX, startY, startX + 3, startY + 3, startX + 6, startY};\r", "+\t\tgc.setBackground (parent.getForeground ());\r", "+\t\tgc.fillPolygon (arrow);\r", "+\t\tgc.drawPolygon (arrow);\r", "+\t}\r", "-\tif (!getEnabled() && disabledImage == null) {\r", "+\tif (!enabled && disabledImage == null) {\r"]}], "num": 49613}
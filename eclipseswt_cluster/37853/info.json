{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6b31b8c21c12ff3b7d3dc45f31a32a10", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "391c370adabf96d33b9264320eb8f2ae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "commitAfterChange": "bbeab947327689cb203638e742e58f555e6c1b64", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 82, "signatureBeforeChange": " private boolean setItemLocation()", "signatureAfterChange": " boolean setItemLocation()", "diff": ["-}", "-private boolean setItemLocation() {", "-\tif (items.length == 0) return false;", "-\tRectangle area = super.getClientArea();", "-\tint x = area.x;", "-\tint y = area.y + borderTop;", "-\tif (onBottom) y = Math.max(0, area.y + area.height - borderBottom - tabHeight);", "-\tboolean changed = false;", "-\tfor (int i = topTabIndex - 1; i>=0; i--) { ", "-\t\t// if the first visible tab is not the first tab", "-\t\tCTabItem tab = items[i];", "-\t\tx -= tab.width; ", "-\t\tif (!changed && (tab.x != x || tab.y != y) ) changed = true;", "-\t\t// layout tab items from right to left thus making them invisible", "-\t\ttab.x = x;", "-\t\ttab.y = y;", "-\t}", "-\t", "-\tx = area.x + borderLeft;", "-\tfor (int i = topTabIndex; i < items.length; i++) {", "-\t\t// continue laying out remaining, visible items left to right ", "-\t\tCTabItem tab = items[i];", "-\t\ttab.x = x;", "-\t\ttab.y = y;", "-\t\tx = x + tab.width;", "-\t}", "-\tsetButtonBounds();", "-\treturn changed;", "-}", "+}", "+boolean setItemLocation() {", "+\tif (items.length == 0) return false;", "+\tPoint size = getSize();", "+\tint y = onBottom ? Math.max(borderBottom, size.y - borderBottom - tabHeight) : borderTop;", "+\tboolean changed = false;", "+\tif (single) {", "+\t\tint defaultX = size.x + 10; // off screen", "+\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\tif (items[i].x != defaultX) changed = true;", "+\t\t\titems[i].x = defaultX; \t", "+\t\t}", "+\t\tif (selectedIndex > -1) {", "+\t\t\tCTabItem item = items[selectedIndex];", "+\t\t\tint oldX = item.x, oldY = item.y;", "+\t\t\tint tabWidth = size.x - borderLeft - borderRight - minRect.width - maxRect.width - chevronRect.width;", "+\t\t\tint indent = Math.max(0, (tabWidth-item.width)/2);", "+\t\t\titem.x = borderLeft + indent; ", "+\t\t\titem.y = y;", "+\t\t\tif (showClose || item.showClose) {", "+\t\t\t\titem.closeRect.x = item.x + item.width - BUTTON_SIZE - CTabItem.RIGHT_MARGIN - 8;", "+\t\t\t\titem.closeRect.y = onBottom ? y : y + CTabItem.TOP_MARGIN;", "+\t\t\t}", "+\t\t\tif (item.x != oldX || item.y != oldY) changed = true;", "+\t\t}", "+\t\tint x = -1;", "+\t\tfor (int i = topTabIndex - 1; i >= 0; i--) { ", "+\t\t\t// if the first visible tab is not the first tab", "+\t\t\tCTabItem item = items[i];", "+\t\t\tx -= item.width; ", "+\t\t\tif (!changed && (item.x != x || item.y != y) ) changed = true;", "+\t\t\t// layout tab items from right to left thus making them invisible", "+\t\t\titem.x = x;", "+\t\t\titem.y = y;", "+\t\t\titem.closeRect.x = item.x + item.width - BUTTON_SIZE - CTabItem.RIGHT_MARGIN;", "+\t\t\tif (i == selectedIndex) item.closeRect.x -= 8;", "+\t\t\titem.closeRect.y = onBottom ? y : y + CTabItem.TOP_MARGIN;", "+\t\t}", "+\t\t", "+\t\tx = borderLeft <= 1 ? 0 : HIGHLIGHT_MARGIN;", "+\t\tfor (int i = topTabIndex; i < items.length; i++) {", "+\t\t\t// continue laying out remaining, visible items left to right ", "+\t\t\tCTabItem item = items[i];", "+\t\t\titem.x = x;", "+\t\t\titem.y = y;", "+\t\t\titem.closeRect.x = item.x + item.width - BUTTON_SIZE - CTabItem.RIGHT_MARGIN;", "+\t\t\tif (i == selectedIndex) item.closeRect.x -= 8;", "+\t\t\titem.closeRect.y = onBottom ? y : y + CTabItem.TOP_MARGIN;", "+\t\t\tx = x + item.width;", "+\t\t}", "+", "+\t\tint rightEdge = getRightItemEdge();", "+\t\tif (rightEdge > 0) {", "+\t\t\tCTabItem item = items[items.length - 1];", "+\t\t\tif (item.x + item.width < rightEdge) {", "+\t\t\t\tsetLastItem(items.length - 1);", "+\t\t\t\tchanged = true;", "+\t\t\t}", "+\t\t}", "+", "+\t}", "+\treturn changed;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1afe86c8b3422d3c94c95da203914e8d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "8848a0fd117061e467d06956f0abd85274a9ca0b", "commitAfterChange": "9da2fac94d15a6c7551e1557116a24207f321bd6", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \r void createHandle ()", "signatureAfterChange": "\r \r void createHandle ()", "diff": ["+\tif (handle != 0) return;\r", "-\t\t\tmbi.nToolBarId = ID_PPCBAR;\r", "+\t\t\tmbi.nToolBarId = ID_PPC;\r", "+\t\t\treturn;\r", "+\t\t}\r", "+\t\t/*\r", "+\t\t* Note in WinCE SmartPhone.  The SoftBar contains only 2 items.\r", "+\t\t* An item can either be a menu or a button. \r", "+\t\t* SWT.BAR: creates a SoftBar with 2 menus\r", "+\t\t* SWT.BAR | SWT.BUTTON1: creates a SoftBar with 1 button\r", "+\t\t*    for button1, and a menu for button2\r", "+\t\t* SWT.BAR | SWT.BUTTON1 | SWT.BUTTON2: creates a SoftBar with\r", "+\t\t*    2 buttons\r", "+\t\t*/\r", "+\t\tif (OS.IsSP) {\r", "+\t\t\t/* Determine type of menubar */\r", "+\t\t\tint nToolBarId;\r", "+\t\t\tif ((style & SWT.BUTTON1) != 0) {\r", "+\t\t\t\tnToolBarId = ((style & SWT.BUTTON2) != 0) ? ID_SPBB : ID_SPBM;\r", "+\t\t\t} else {\r", "+\t\t\t\tnToolBarId = ((style & SWT.BUTTON2) != 0) ? ID_SPMB : ID_SPMM;\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\t/* Create SHMENUBAR */\r", "+\t\t\tSHMENUBARINFO mbi = new SHMENUBARINFO ();\r", "+\t\t\tmbi.cbSize = mbi.sizeof;\r", "+\t\t\tmbi.hwndParent = parent.handle;\r", "+\t\t\tmbi.dwFlags = OS.SHCMBF_HIDDEN;\r", "+\t\t\tmbi.nToolBarId = nToolBarId; /* as defined in .rc file */\r", "+\t\t\tmbi.hInstRes = OS.GetLibraryHandle ();\r", "+\t\t\tif (!OS.SHCreateMenuBar (mbi)) error (SWT.ERROR_NO_HANDLES);\r", "+\t\t\thwndCB = mbi.hwndMB;\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* Feature on WinCE SmartPhone.  The SHCMBF_HIDDEN flag causes the\r", "+\t\t\t* SHMENUBAR to not be drawn. However the keyboard events still go\r", "+\t\t\t* through it.  The workaround is to also hide the SHMENUBAR with\r", "+\t\t\t* ShowWindow ().\r", "+\t\t\t*/\r", "+\t\t\tOS.ShowWindow (hwndCB, OS.SW_HIDE);\r", "+\t\t\t\r", "+\t\t\tTBBUTTONINFO info = new TBBUTTONINFO ();\r", "+\t\t\tinfo.cbSize = TBBUTTONINFO.sizeof;\r", "+\t\t\tinfo.dwMask = OS.TBIF_COMMAND;\r", "+\t\t\tMenuItem item;\r", "+\t\t\t\r", "+\t\t\t/* Set first item */\r", "+\t\t\tif (nToolBarId == ID_SPMM || nToolBarId == ID_SPMB) {\r", "+\t\t\t\tint hMenu = OS.SendMessage (hwndCB, OS.SHCMBM_GETSUBMENU, 0, ID_SPSOFTKEY0);\r", "+\t\t\t\t/* Remove the item from the resource file */\r", "+\t\t\t\tOS.RemoveMenu (hMenu, 0, OS.MF_BYPOSITION);\r", "+\t\t\t\tMenu menu = new Menu (parent, SWT.DROP_DOWN, hMenu);\r", "+\t\t\t\titem = new MenuItem (this, menu, SWT.CASCADE, 0);\r", "+\t\t\t} else {\r", "+\t\t\t\titem = new MenuItem (this, null, SWT.PUSH, 0);\r", "+\t\t\t}\r", "+\t\t\tinfo.idCommand = id0 = item.id;\r", "+\t\t\tOS.SendMessage (hwndCB, OS.TB_SETBUTTONINFO, ID_SPSOFTKEY0, info);\t\r", "+\r", "+\t\t\t/* Set second item */\r", "+\t\t\tif (nToolBarId == ID_SPMM || nToolBarId == ID_SPBM) {\r", "+\t\t\t\tint hMenu = OS.SendMessage (hwndCB, OS.SHCMBM_GETSUBMENU, 0, ID_SPSOFTKEY1);\r", "+\t\t\t\tOS.RemoveMenu (hMenu, 0, OS.MF_BYPOSITION);\r", "+\t\t\t\tMenu menu = new Menu (parent, SWT.DROP_DOWN, hMenu);\r", "+\t\t\t\titem = new MenuItem (this, menu, SWT.CASCADE, 1);\r", "+\t\t\t} else {\r", "+\t\t\t\titem = new MenuItem (this, null, SWT.PUSH, 1);\r", "+\t\t\t}\r", "+\t\t\tinfo.idCommand = id1 = item.id;\r", "+\t\t\tOS.SendMessage (hwndCB, OS.TB_SETBUTTONINFO, ID_SPSOFTKEY1, info);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58faf5cca83cac51b3103289a4b66852", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TreeDragUnderEffect.java", "commitBeforeChange": "63402932f4d7a2fe6eda19dc05c2a513ed8a0519", "commitAfterChange": "da97dbe5133d08e305a00a80c45d4dd608fb5936", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " void show(int effect, int x, int y)", "signatureAfterChange": "  void show(int effect, int x, int y)", "diff": ["-void show(int effect, int x, int y) {", "-\teffect = checkEffect(effect);", "-\tTreeItem item = findItem(x, y);", "-\tif (item == null) effect = DND.FEEDBACK_NONE;", "-\tif (currentEffect == DND.FEEDBACK_NONE && effect != DND.FEEDBACK_NONE) {", "-\t\tselection = tree.getSelection();", "-\t\ttree.deselectAll();", "-\t}", "-\tscrollHover(effect, item, x, y);", "-\texpandHover(effect, item, x, y);", "-\tsetDragUnderEffect(effect, item);", "-\tif (currentEffect != DND.FEEDBACK_NONE && effect == DND.FEEDBACK_NONE) {", "-\t\tfor (int i = 0; i < selection.length; i++) {", "-\t\t\tTVITEM tvItem = new TVITEM ();", "-\t\t\ttvItem.mask = OS.TVIF_STATE;", "-\t\t\ttvItem.state = OS.TVIS_SELECTED;", "-\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;", "-\t\t\ttvItem.hItem = selection[i].handle;", "-\t\t\tOS.SendMessage (tree.handle, OS.TVM_SETITEM, 0, tvItem);", "-\t\t}", "-\t\tselection = new TreeItem[0];", "-\t}", "-\tcurrentEffect = effect;", "-}", "+", "+void show(int effect, int x, int y) {", "+\teffect = checkEffect(effect);", "+\tint handle = tree.handle;", "+\tTVHITTESTINFO lpht = new TVHITTESTINFO ();", "+\tlpht.x = coordinates.x;", "+\tlpht.y = coordinates.y;", "+\tOS.SendMessage (handle, OS.TVM_HITTEST, 0, lpht);", "+\tint hItem = lpht.hItem;", "+\t\tscrollIndex = -1;", "+\t} else {", "+\t\tif (hItem != -1 && scrollIndex == hItem && scrollBeginTime != 0) {", "+\t\t\tif (System.currentTimeMillis() >= scrollBeginTime) {", "+\t\t\t\tint topItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_FIRSTVISIBLE, 0);", "+\t\t\t\tint nextItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, hItem == topItem ? OS.TVGN_PREVIOUSVISIBLE : OS.TVGN_NEXTVISIBLE, hItem);", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_ENSUREVISIBLE, 0, nextItem);", "+\t\t\t\tscrollBeginTime = 0;", "+\t\t\t\tscrollIndex = -1;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tscrollBeginTime = System.currentTimeMillis() + SCROLL_HYSTERESIS;", "+\t\t\tscrollIndex = hItem;", "+\t\texpandIndex = -1;", "+\t} else {", "+\t\tif (hItem != -1 && expandIndex == hItem && expandBeginTime != 0) {", "+\t\t\tif (System.currentTimeMillis() >= expandBeginTime) {", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_EXPAND, OS.TVE_EXPAND, hItem);", "+\t\t\t\texpandBeginTime = 0;", "+\t\t\t\texpandIndex = -1;", "+\t\t\t}", "+\t\t} else {", "+\t\t\texpandBeginTime = System.currentTimeMillis() + EXPAND_HYSTERESIS;", "+\t\t\texpandIndex = hItem;", "+\tif (dropIndex != -1 && (dropIndex != hItem || (effect & DND.FEEDBACK_SELECT) == 0)) {", "+\t\tTVITEM tvItem = new TVITEM ();", "+\t\ttvItem.hItem = dropIndex;", "+\t\ttvItem.mask = OS.TVIF_STATE;", "+\t\ttvItem.stateMask = OS.TVIS_DROPHILITED;", "+\t\ttvItem.state = 0;", "+\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);", "+\t\tdropIndex = -1;", "+\t}", "+\tif (hItem != -1 && hItem != dropIndex && (effect & DND.FEEDBACK_SELECT) != 0) {", "+\t\tTVITEM tvItem = new TVITEM ();", "+\t\ttvItem.hItem = hItem;", "+\t\ttvItem.mask = OS.TVIF_STATE;", "+\t\ttvItem.stateMask = OS.TVIS_DROPHILITED;", "+\t\ttvItem.state = OS.TVIS_DROPHILITED;", "+\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);", "+\t\tdropIndex = hItem;", "+\t}", "+\tif ((effect & DND.FEEDBACK_INSERT_BEFORE) != 0 || (effect & DND.FEEDBACK_INSERT_AFTER) != 0) {", "+\t\tboolean before = (effect & DND.FEEDBACK_INSERT_BEFORE) != 0;", "+\t\tOS.SendMessage (handle, OS.TVM_SETINSERTMARK, (before) ? 0 : 1, hItem);", "+\t} else {", "+\t\tOS.SendMessage (handle, OS.TVM_SETINSERTMARK, 0, 0);", "+\t}", "+\treturn;"]}], "num": 37853}
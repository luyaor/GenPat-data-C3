{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72c55ddb22e2da42c76fd22e771d19d2", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dd5f5606d6f0bceedeed3876c109457b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "4b1109db58ecb9bb9b1b51bb55e420f663b89727", "commitAfterChange": "a38cdec12de35954521831ad0e8e78895c25ed1c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public Rectangle getBounds(int start, int end)", "signatureAfterChange": " public Rectangle getBounds(int start, int end)", "diff": ["-\t\trange.location = layoutManager.glyphIndexForCharacterAtIndex(start);", "-\t\trange.length = layoutManager.glyphIndexForCharacterAtIndex(end + 1) - range.location;", "-\t\tNSRect rect = layoutManager.boundingRectForGlyphRange(range, textContainer);", "-\t\treturn new Rectangle((int)rect.x, (int)rect.y, (int)Math.ceil(rect.width), (int)Math.ceil(rect.height));", "+\t\trange.location = start;", "+\t\trange.length = end - start + 1;", "+\t\tint /*long*/ pRectCount = OS.malloc(C.PTR_SIZEOF);", "+\t\tint /*long*/ pArray = layoutManager.rectArrayForCharacterRange(range, range, textContainer, pRectCount);", "+\t\tint /*long*/ [] rectCount = new int /*long*/ [1];", "+\t\tOS.memmove(rectCount, pRectCount, C.PTR_SIZEOF);", "+\t\tOS.free(pRectCount);", "+\t\tNSRect rect = new NSRect();", "+\t\tint left = 0x7FFFFFFF, right = 0;", "+\t\tint top = 0x7FFFFFFF, bottom = 0;", "+\t\tfor (int i = 0; i < rectCount[0]; i++, pArray += NSRect.sizeof) {", "+\t\t\tOS.memmove(rect, pArray, NSRect.sizeof);", "+\t\t\tleft = Math.min(left, (int)rect.x);", "+\t\t\tright = Math.max(right, (int)Math.ceil(rect.x + rect.width));", "+\t\t\ttop = Math.min(top, (int)rect.y);", "+\t\t\tbottom = Math.max(bottom, (int)Math.ceil(rect.y + rect.height));", "+\t\t}", "+\t\treturn new Rectangle(left, top, right - left, bottom - top);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dfecf337063a667ba61728424c4e1dbd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "b2127d548b8d5b1e3d705cfaa832c876d9e6f685", "commitAfterChange": "22c78994f0ec6a28835def6220a4b518252d37e2", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["-\t\t\t\t\t\t\trange.location = layoutManager.glyphIndexForCharacterAtIndex(Math.max(lineStart, start));", "-\t\t\t\t\t\t\trange.length = layoutManager.glyphIndexForCharacterAtIndex(Math.min(lineEnd, end) + 1) - range.location;", "+\t\t\t\t\t\t\trange.location = Math.max(lineStart, start);", "+\t\t\t\t\t\t\trange.length = Math.min(lineEnd, end) + 1 - range.location;", "+\t\t\t\t\t\t\t\tint /*long*/ pRectCount = OS.malloc(C.PTR_SIZEOF);", "+\t\t\t\t\t\t\t\tint /*long*/ pArray = layoutManager.rectArrayForCharacterRange(range, range, textContainer, pRectCount);", "+\t\t\t\t\t\t\t\tint /*long*/ [] rectCount = new int /*long*/ [1];", "+\t\t\t\t\t\t\t\tOS.memmove(rectCount, pRectCount, C.PTR_SIZEOF);", "+\t\t\t\t\t\t\t\tOS.free(pRectCount);", "+\t\t\t\t\t\t\t\tNSRect rect = new NSRect();", "-\t\t\t\t\t\t\t\tNSRect rect = layoutManager.boundingRectForGlyphRange(range, textContainer);", "-\t\t\t\t\t\t\t\tfloat /*double*/ underlineX = pt.x + rect.x;", "-\t\t\t\t\t\t\t\tfloat /*double*/ underlineY = pt.y + rect.y + rect.height - baseline;", "-\t\t\t\t\t\t\t\tNSBezierPath path = NSBezierPath.bezierPath();", "-\t\t\t\t\t\t\t\tswitch (style.underlineStyle) {", "-\t\t\t\t\t\t\t\tcase SWT.UNDERLINE_ERROR: {", "-\t\t\t\t\t\t\t\t\tpath.setLineWidth(2f);", "-\t\t\t\t\t\t\t\t\tpath.setLineCapStyle(OS.NSRoundLineCapStyle);", "-\t\t\t\t\t\t\t\t\tpath.setLineJoinStyle(OS.NSRoundLineJoinStyle);", "-\t\t\t\t\t\t\t\t\tpath.setLineDash(new float /*double*/ []{1, 3f}, 2, 0);", "-\t\t\t\t\t\t\t\t\tpoint.x = underlineX;", "-\t\t\t\t\t\t\t\t\tpoint.y = underlineY + 0.5f;", "-\t\t\t\t\t\t\t\t\tpath.moveToPoint(point);", "-\t\t\t\t\t\t\t\t\tpoint.x = underlineX + rect.width;", "-\t\t\t\t\t\t\t\t\tpoint.y = underlineY + 0.5f;", "-\t\t\t\t\t\t\t\t\tpath.lineToPoint(point);", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tcase SWT.UNDERLINE_SQUIGGLE: {", "-\t\t\t\t\t\t\t\t\tgc.handle.setShouldAntialias(false);", "-\t\t\t\t\t\t\t\t\tpath.setLineWidth(1.0f);", "-\t\t\t\t\t\t\t\t\tpath.setLineCapStyle(OS.NSButtLineCapStyle);", "-\t\t\t\t\t\t\t\t\tpath.setLineJoinStyle(OS.NSMiterLineJoinStyle);", "-\t\t\t\t\t\t\t\t\tfloat /*double*/ lineBottom = pt.y + rect.y + rect.height;", "-\t\t\t\t\t\t\t\t\tfloat squigglyThickness = 1;", "-\t\t\t\t\t\t\t\t\tfloat squigglyHeight = 2 * squigglyThickness;", "-\t\t\t\t\t\t\t\t\tfloat /*double*/ squigglyY = Math.min(underlineY - squigglyHeight / 2, lineBottom - squigglyHeight - 1);", "-\t\t\t\t\t\t\t\t\tfloat[] points = computePolyline((int)underlineX, (int)squigglyY, (int)(underlineX + rect.width), (int)(squigglyY + squigglyHeight));", "-\t\t\t\t\t\t\t\t\tpoint.x = points[0] + 0.5f;", "-\t\t\t\t\t\t\t\t\tpoint.y = points[1] + 0.5f;", "-\t\t\t\t\t\t\t\t\tpath.moveToPoint(point);", "-\t\t\t\t\t\t\t\t\tfor (int p = 2; p < points.length; p+=2) {", "-\t\t\t\t\t\t\t\t\t\tpoint.x = points[p] + 0.5f;", "-\t\t\t\t\t\t\t\t\t\tpoint.y = points[p+1] + 0.5f;", "-\t\t\t\t\t\t\t\t\t\tpath.lineToPoint(point);", "+\t\t\t\t\t\t\t\tfor (int k = 0; k < rectCount[0]; k++, pArray += NSRect.sizeof) {", "+\t\t\t\t\t\t\t\t\tOS.memmove(rect, pArray, NSRect.sizeof);", "+\t\t\t\t\t\t\t\t\tfloat /*double*/ underlineX = pt.x + rect.x;", "+\t\t\t\t\t\t\t\t\tfloat /*double*/ underlineY = pt.y + rect.y + rect.height - baseline;", "+\t\t\t\t\t\t\t\t\tNSBezierPath path = NSBezierPath.bezierPath();", "+\t\t\t\t\t\t\t\t\tswitch (style.underlineStyle) {", "+\t\t\t\t\t\t\t\t\t\tcase SWT.UNDERLINE_ERROR: {", "+\t\t\t\t\t\t\t\t\t\t\tpath.setLineWidth(2f);", "+\t\t\t\t\t\t\t\t\t\t\tpath.setLineCapStyle(OS.NSRoundLineCapStyle);", "+\t\t\t\t\t\t\t\t\t\t\tpath.setLineJoinStyle(OS.NSRoundLineJoinStyle);", "+\t\t\t\t\t\t\t\t\t\t\tpath.setLineDash(new float /*double*/ []{1, 3f}, 2, 0);", "+\t\t\t\t\t\t\t\t\t\t\tpoint.x = underlineX;", "+\t\t\t\t\t\t\t\t\t\t\tpoint.y = underlineY + 0.5f;", "+\t\t\t\t\t\t\t\t\t\t\tpath.moveToPoint(point);", "+\t\t\t\t\t\t\t\t\t\t\tpoint.x = underlineX + rect.width;", "+\t\t\t\t\t\t\t\t\t\t\tpoint.y = underlineY + 0.5f;", "+\t\t\t\t\t\t\t\t\t\t\tpath.lineToPoint(point);", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\tcase SWT.UNDERLINE_SQUIGGLE: {", "+\t\t\t\t\t\t\t\t\t\t\tgc.handle.setShouldAntialias(false);", "+\t\t\t\t\t\t\t\t\t\t\tpath.setLineWidth(1.0f);", "+\t\t\t\t\t\t\t\t\t\t\tpath.setLineCapStyle(OS.NSButtLineCapStyle);", "+\t\t\t\t\t\t\t\t\t\t\tpath.setLineJoinStyle(OS.NSMiterLineJoinStyle);", "+\t\t\t\t\t\t\t\t\t\t\tfloat /*double*/ lineBottom = pt.y + rect.y + rect.height;", "+\t\t\t\t\t\t\t\t\t\t\tfloat squigglyThickness = 1;", "+\t\t\t\t\t\t\t\t\t\t\tfloat squigglyHeight = 2 * squigglyThickness;", "+\t\t\t\t\t\t\t\t\t\t\tfloat /*double*/ squigglyY = Math.min(underlineY - squigglyHeight / 2, lineBottom - squigglyHeight - 1);", "+\t\t\t\t\t\t\t\t\t\t\tfloat[] points = computePolyline((int)underlineX, (int)squigglyY, (int)(underlineX + rect.width), (int)(squigglyY + squigglyHeight));", "+\t\t\t\t\t\t\t\t\t\t\tpoint.x = points[0] + 0.5f;", "+\t\t\t\t\t\t\t\t\t\t\tpoint.y = points[1] + 0.5f;", "+\t\t\t\t\t\t\t\t\t\t\tpath.moveToPoint(point);", "+\t\t\t\t\t\t\t\t\t\t\tfor (int p = 2; p < points.length; p+=2) {", "+\t\t\t\t\t\t\t\t\t\t\t\tpoint.x = points[p] + 0.5f;", "+\t\t\t\t\t\t\t\t\t\t\t\tpoint.y = points[p+1] + 0.5f;", "+\t\t\t\t\t\t\t\t\t\t\t\tpath.lineToPoint(point);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t\tpath.stroke();", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tpath.stroke();", "-\t\t\t\t\t\t\trange.location = layoutManager.glyphIndexForCharacterAtIndex(Math.max(lineStart, start));", "-\t\t\t\t\t\t\trange.length = layoutManager.glyphIndexForCharacterAtIndex(Math.min(lineEnd, end) + 1) - range.location;", "+\t\t\t\t\t\t\trange.location = Math.max(lineStart, start);", "+\t\t\t\t\t\t\trange.length = Math.min(lineEnd, end) + 1 - range.location;", "+\t\t\t\t\t\t\t\tint /*long*/ pRectCount = OS.malloc(C.PTR_SIZEOF);", "+\t\t\t\t\t\t\t\tint /*long*/ pArray = layoutManager.rectArrayForCharacterRange(range, range, textContainer, pRectCount);", "+\t\t\t\t\t\t\t\tint /*long*/ [] rectCount = new int /*long*/ [1];", "+\t\t\t\t\t\t\t\tOS.memmove(rectCount, pRectCount, C.PTR_SIZEOF);", "+\t\t\t\t\t\t\t\tOS.free(pRectCount);", "+\t\t\t\t\t\t\t\tNSRect rect = new NSRect();", "-\t\t\t\t\t\t\t\tNSRect rect = layoutManager.boundingRectForGlyphRange(range, textContainer);", "-\t\t\t\t\t\t\t\trect.x += pt.x + 0.5f;", "-\t\t\t\t\t\t\t\trect.y += pt.y + 0.5f;", "-\t\t\t\t\t\t\t\trect.width -= 0.5f;", "-\t\t\t\t\t\t\t\trect.height -= 0.5f;", "-\t\t\t\t\t\t\t\tcase SWT.BORDER_SOLID:\tbreak;", "-\t\t\t\t\t\t\t\tcase SWT.BORDER_DASH: dashes = width != 0 ? GC.LINE_DASH : GC.LINE_DASH_ZERO; break;", "-\t\t\t\t\t\t\t\tcase SWT.BORDER_DOT: dashes = width != 0 ? GC.LINE_DOT : GC.LINE_DOT_ZERO; break;", "+\t\t\t\t\t\t\t\t\tcase SWT.BORDER_SOLID:\tbreak;", "+\t\t\t\t\t\t\t\t\tcase SWT.BORDER_DASH: dashes = width != 0 ? GC.LINE_DASH : GC.LINE_DASH_ZERO; break;", "+\t\t\t\t\t\t\t\t\tcase SWT.BORDER_DOT: dashes = width != 0 ? GC.LINE_DOT : GC.LINE_DOT_ZERO; break;", "-\t\t\t\t\t\t\t\tNSBezierPath path = NSBezierPath.bezierPath();", "-\t\t\t\t\t\t\t\tpath.setLineDash(lengths, lengths != null ? lengths.length : 0, 0);", "-\t\t\t\t\t\t\t\tpath.appendBezierPathWithRect(rect);", "-\t\t\t\t\t\t\t\tpath.stroke();", "+\t\t\t\t\t\t\t\tfor (int k = 0; k < rectCount[0]; k++, pArray += NSRect.sizeof) {", "+\t\t\t\t\t\t\t\t\tOS.memmove(rect, pArray, NSRect.sizeof);", "+\t\t\t\t\t\t\t\t\trect.x += pt.x + 0.5f;", "+\t\t\t\t\t\t\t\t\trect.y += pt.y + 0.5f;", "+\t\t\t\t\t\t\t\t\trect.width -= 0.5f;", "+\t\t\t\t\t\t\t\t\trect.height -= 0.5f;", "+\t\t\t\t\t\t\t\t\tNSBezierPath path = NSBezierPath.bezierPath();", "+\t\t\t\t\t\t\t\t\tpath.setLineDash(lengths, lengths != null ? lengths.length : 0, 0);", "+\t\t\t\t\t\t\t\t\tpath.appendBezierPathWithRect(rect);", "+\t\t\t\t\t\t\t\t\tpath.stroke();", "+\t\t\t\t\t\t\t\t}"]}], "num": 33793}
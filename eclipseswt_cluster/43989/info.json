{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "256f6b5f59f1c6bd6c332d962dec1262", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b064a7f52fdd4585bd5740f80f35ef1e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextRenderer.java", "commitBeforeChange": "8302dcae845b1fe69dae77b303345ce4bebc2e77", "commitAfterChange": "cd2b53b4a9279ed54f58046e25d52b26e8ff215a", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": " TextLayout getTextLayout(int lineIndex, int orientation, int width, int lineSpacing)", "signatureAfterChange": " TextLayout getTextLayout(int lineIndex, int orientation, int width, int lineSpacing)", "diff": ["-\tif (event != null) {", "-\t\tif (styledText.compositionStart != -1 && styledText.compositionLength > 0) {", "-\t\t\tint compositionLine = styledText.getContent().getLineAtOffset(styledText.compositionStart);", "+\tif (styledText != null && imeRanges != null && imeStyles != null) {", "+\t\tint compositionStart = styledText.compositionStart;", "+\t\tint compositionLength = styledText.compositionLength;", "+\t\tif (compositionStart != -1 && compositionLength > 0) {", "+\t\t\tint compositionLine = content.getLineAtOffset(compositionStart);", "-\t\t\t\tStyleRange[] imeStyles = getStyleRanges(styledText.compositionStart, styledText.compositionLength, false);", "-\t\t\t\tint[] imeRanges = getRanges(styledText.compositionStart, styledText.compositionLength);", "-\t\t\t\tif (imeStyles != null && imeRanges != null) {", "-\t\t\t\t\tfor (int i = 0; i < imeStyles.length; i++) {", "-\t\t\t\t\t\tint start = imeRanges[i*2] - lineOffset;", "-\t\t\t\t\t\tlayout.setStyle(imeStyles[i], start, start + imeRanges[i*2+1] - 1);", "+\t\t\t\tfor (int i = 0; i < imeStyles.length; i++) {", "+\t\t\t\t\tint start = imeRanges[i*2] + compositionStart - lineOffset;", "+\t\t\t\t\tint end = start + imeRanges[i*2+1] - 1;", "+\t\t\t\t\tTextStyle imeStyle = imeStyles[i], userStyle;", "+\t\t\t\t\tfor (int j = start; j <= end; j++) {", "+\t\t\t\t\t\tuserStyle = layout.getStyle(j);", "+\t\t\t\t\t\tif (userStyle == null && j > 0) userStyle = layout.getStyle(j - 1);", "+\t\t\t\t\t\tif (userStyle == null && j + 1 < length) userStyle = layout.getStyle(j + 1);", "+\t\t\t\t\t\tif (userStyle == null) {", "+\t\t\t\t\t\t\tlayout.setStyle(imeStyle, j, j);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tTextStyle newStyle = new TextStyle(imeStyle);", "+\t\t\t\t\t\t\tif (newStyle.font == null) newStyle.font = userStyle.font;", "+\t\t\t\t\t\t\tif (newStyle.foreground == null) newStyle.foreground = userStyle.foreground;", "+\t\t\t\t\t\t\tif (newStyle.background == null) newStyle.background = userStyle.background;", "+\t\t\t\t\t\t\tlayout.setStyle(newStyle, j, j);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ecd5f3ffbfc34a613584741d42667bfe", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/texteditor/TextEditor.java", "commitBeforeChange": "e26934ac680ad70439130b120695448c0a630d25", "commitAfterChange": "95842c4b8acd967ae07a3fa166a616e528ae2f66", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 76, "signatureBeforeChange": " void handleCutCopy()", "signatureAfterChange": "  \tvoid disposeRanges(StyleRange[] ranges)", "diff": ["- */", "-void handleCutCopy() {", "-\t// Save the cut/copied style info so that during paste we will maintain", "-\t// the style information.  Cut/copied text is put in the clipboard in", "-\t// RTF format, but is not pasted in RTF format.  The other way to ", "-\t// handle the pasting of styles would be to access the Clipboard directly and ", "-\t// parse the RTF text.", "-\tcachedStyles = new Vector();", "-\tPoint sel = text.getSelectionRange();", "-\tint startX = sel.x;", "-\tfor (int i=sel.x; i<=sel.x+sel.y-1; i++) {", "-\t\tStyleRange style = text.getStyleRangeAtOffset(i);", "-\t\tif (style != null) {", "-\t\t\tstyle.start = style.start - startX;", "-\t\t\tif (!cachedStyles.isEmpty()) {", "-\t\t\t\tStyleRange lastStyle = (StyleRange)cachedStyles.lastElement();", "-\t\t\t\tif (lastStyle.similarTo(style) && lastStyle.start + lastStyle.length == style.start) {", "-\t\t\t\t\tlastStyle.length++;", "-\t\t\t\t} else {", "-\t\t\t\t\tcachedStyles.addElement(style);", "-\t\t\t\t}", "-\t\t\t\tcachedStyles.addElement(style);", "-}", "+", "+\tvoid disposeRanges(StyleRange[] ranges) {", "+\t\tStyleRange[] styles = styledText.getStyleRanges(0, styledText.getCharCount(), false);", "+\t\tfor (int i = 0; i < ranges.length; i++) {", "+\t\t\tStyleRange style = ranges[i];", "+\t\t\tboolean disposeFg = true, disposeBg = true, disposeStrike= true, disposeUnder= true, disposeBorder = true, disposeFont = true;", "+", "+\t\t\tfor (int j = 0; j < styles.length; j++) {", "+\t\t\t\tStyleRange s = styles[j];", "+\t\t\t\tif (disposeFont && style.font == s.font) disposeFont = false;", "+\t\t\t\tif (disposeFg && style.foreground == s.foreground) disposeFg = false;", "+\t\t\t\tif (disposeBg && style.background == s.background) disposeBg = false;", "+\t\t\t\tif (disposeStrike && style.strikeoutColor == s.strikeoutColor) disposeStrike = false;", "+\t\t\t\tif (disposeUnder && style.underlineColor == s.underlineColor) disposeUnder = false;", "+\t\t\t\tif (disposeBorder && style.borderColor == s.borderColor) disposeBorder =  false;", "+\t\t\t}", "+\t\t\tif (disposeFont && style.font != textFont && style.font != null)  style.font.dispose();", "+\t\t\tif (disposeFg && style.foreground != textForeground && style.foreground != null) style.foreground.dispose();", "+\t\t\tif (disposeBg && style.background != textBackground && style.background != null) style.background.dispose();", "+\t\t\tif (disposeStrike && style.strikeoutColor != strikeoutColor && style.strikeoutColor != null) style.strikeoutColor.dispose();", "+\t\t\tif (disposeUnder && style.underlineColor != underlineColor && style.underlineColor != null) style.underlineColor.dispose();", "+\t\t\tif (disposeBorder && style.borderColor != borderColor && style.borderColor != null) style.borderColor.dispose();", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f20336d3832bf51c2ccc725c40794c4f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "3528d69528935ee011372f88f680cf1c0de0fa7c", "commitAfterChange": "41106e1ba0e2dbb7b2de869492aef659f8aab194", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["+\tfor (int i = 0; i < styles.length - 1; i++) {", "+\t\tStyleItem run = styles[i];", "+\t\tTextStyle style = run.style;", "+\t\tif (style == null) continue;", "+\t\tif (style.borderStyle != SWT.NONE && (i + 1 >= styles.length || !style.isAdherentBorder(styles[i + 1].style))) {", "+\t\t\tint start = run.start;", "+\t\t\tint end = styles[i + 1].start - 1;", "+\t\t\tfor (int j = i; j > 0 && style.isAdherentBorder(styles[j - 1].style); j--) {", "+\t\t\t\tstart = styles[j - 1].start;", "+\t\t\t}", "+\t\t\tColor color = style.borderColor;", "+\t\t\tif (color == null) color = style.foreground;", "+\t\t\tif (color == null) color = gc.getForeground();", "+\t\t\tint brush = OS.gcnew_SolidColorBrush(color.handle);", "+\t\t\tint pen = OS.gcnew_Pen(brush, 1);", "+\t\t\tOS.GCHandle_Free(brush);", "+\t\t\tint dashStyle = 0;", "+\t\t\tswitch (style.borderStyle) {", "+\t\t\t\tcase SWT.BORDER_SOLID:", "+\t\t\t\t\tdashStyle = OS.DashStyles_Solid(); break;", "+\t\t\t\tcase SWT.BORDER_DOT:", "+\t\t\t\t\tdashStyle = OS.DashStyles_Dot(); break;", "+\t\t\t\tcase SWT.BORDER_DASH:", "+\t\t\t\t\tdashStyle = OS.DashStyles_Dash(); break;", "+\t\t\t}", "+\t\t\tOS.Pen_DashStyle(pen, dashStyle);", "+\t\t\tif (dashStyle != 0) OS.GCHandle_Free(dashStyle);", "+\t\t\tint lineY = y;", "+\t\t\tlineStart = lineEnd = 0;", "+\t\t\tfor (int j = 0; j < lines.length; j++) {", "+\t\t\t\tint lineLength = OS.TextLine_Length(lines[j]);", "+\t\t\t\tlineStart = lineEnd;", "+\t\t\t\tlineEnd = lineStart + lineLength;", "+\t\t\t\tif (start < lineEnd) {", "+\t\t\t\t\tif (end < lineStart) break;", "+\t\t\t\t\tint rangeStart = Math.max(start, lineStart);", "+\t\t\t\t\tint rangLength = Math.min(end, lineEnd) - rangeStart + 1;", "+\t\t\t\t\tint rects = OS.TextLine_GetTextBounds(lines[j], rangeStart, rangLength);\t", "+\t\t\t\t\tif (rects != 0) {", "+\t\t\t\t\t\tint enumerator = OS.TextBoundsCollection_GetEnumerator(rects);", "+\t\t\t\t\t\twhile (OS.IEnumerator_MoveNext(enumerator)) {", "+\t\t\t\t\t\t\tint bounds = OS.TextBoundsCollection_Current(enumerator);", "+\t\t\t\t\t\t\tint textRect = OS.TextBounds_Rectangle(bounds);", "+\t\t\t\t\t\t\tOS.Rect_Y(textRect, OS.Rect_Y(textRect) + lineY);", "+\t\t\t\t\t\t\tOS.Rect_X(textRect, OS.Rect_X(textRect) + x);", "+\t\t\t\t\t\t\tOS.Rect_Width(textRect, OS.Rect_Width(textRect) - 1);", "+\t\t\t\t\t\t\tOS.Rect_Height(textRect, OS.Rect_Height(textRect) - 1);", "+\t\t\t\t\t\t\tOS.DrawingContext_DrawRectangle(drawingContext, 0, pen, textRect);", "+\t\t\t\t\t\t\tOS.GCHandle_Free(textRect);", "+\t\t\t\t\t\t\tOS.GCHandle_Free(bounds);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.GCHandle_Free(enumerator);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.GCHandle_Free(rects);", "+\t\t\t\t}", "+\t\t\t\tint lineHeight = (int)OS.TextLine_Height(lines[j]);", "+\t\t\t\tif (ascent != -1 && descent != -1) lineHeight = Math.max(lineHeight, ascent + descent);", "+\t\t\t\tlineY += lineHeight + lineSpacing;", "+\t\t\t}", "+\t\t\tOS.GCHandle_Free(pen);", "+\t\t} ", "+\t}", "+\t"]}], "num": 43989}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "72a6f161eb010765eb66aa6ea39dddd9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5053dc889e196d88d9b56e3fe66fc5ed", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_TreeItem.java", "commitBeforeChange": "8986a6517505e7539f6927fcd4f86a8a9d453cd8", "commitAfterChange": "1b66399dbbf2051dfb4cf848c776cda64c551d38", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 15, "signatureBeforeChange": "  public void test_getBoundsI()", "signatureAfterChange": " public void test_getBoundsI()", "diff": ["-", "-public void test_getBoundsI() {", "-\ttreeItem.setText(\"hello\");", "-\tassertTrue(\":1d:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0);", "-\tassertTrue(\":1e:\", bounds2.x > 0 && bounds2.height > 0);", "-\tassertTrue(\":1f:\", bounds2.width < bounds.width);", "-\tassertTrue(\":1g:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0);", "-\tassertTrue(\":1h:\", bounds2.x > 0 && bounds2.height > 0);", "-//\tassertTrue(\":1i:\", bounds2.width > bounds.width); // once an image is added the space for it is always there", "-\ttreeItem.setText(\"hello\");", "-\tassertTrue(\":1j:\", bounds2.x > 0 && bounds2.height > 0);", "-\tassertTrue(\":1k:\", bounds2.width > bounds.width);", "-\t", "-\t", "-\ttreeItem2.setText(\"hello\");", "-\tassertTrue(\":2d:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0);", "-\tassertTrue(\":2e:\", bounds2.x > 0 && bounds2.height > 0);", "-\tassertTrue(\":2f:\", bounds2.width < bounds.width);", "-\tassertTrue(\":2g:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0);", "-\tassertTrue(\":2h:\", bounds2.x > 0 && bounds2.height > 0);", "-\t//assertTrue(\":2i:\", bounds2.width < bounds.width);  // once an image is added the space for it is always there", "-\ttreeItem2.setText(\"hello\");", "-\tassertTrue(\":2j:\", bounds2.x > 0 && bounds2.height > 0);", "-\tassertTrue(\":2k:\", bounds2.width > bounds.width);", "-\t// with columns", "-\t", "-\t", "-\tbounds = treeItem.getBounds(0);", "-\tassertTrue(\":3e:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "-\tbounds = treeItem.getBounds(1);", "-\tassertTrue(\":3f:\", bounds.x >= 100 && bounds.height > 0 && bounds.width == 0);", "-\t", "-\tcolumn1.setWidth(200);", "-\tbounds = treeItem.getBounds(0);", "-\tassertTrue(\":3g:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "-\tbounds = treeItem.getBounds(1);", "-\tassertTrue(\":3h:\", bounds.x >= 100 && bounds.height > 0 && bounds.width == 200);", "-\t", "-\ttreeItem.setText(new String[] {\"hello\", \"world\"});", "-\tassertTrue(\":3j:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "-\tassertTrue(\":3k:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "-\tassertTrue(\":3l:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "-\tassertTrue(\":3m:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "-\tassertTrue(\":3n:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "-\tassertTrue(\":3o:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "-\tassertTrue(\":3p:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "-\ttreeItem.setText(new String[] {\"hello\", \"world\"});", "-\ttreeItem.setImage(new Image[] {null, null});", "-\tassertTrue(\":3q:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "-\tassertTrue(\":3r:\", bounds.x > 0 && bounds.height > 0 && bounds.width  == 200);", "-\ttreeItem.setText(\"hello\");", "-\tassertTrue(\":3s:\", bounds.x > 0 && bounds.height > 0 && bounds.width  == 0);", "-\t", "-\ttree2.dispose();", "-\ttree2 = new Tree(shell, SWT.CHECK);", "-\ttreeItem2 = new TreeItem(tree2, SWT.NONE);", "-\tcolumn0 = new TreeColumn(tree2, SWT.LEFT);", "-\tcolumn1 = new TreeColumn(tree2, SWT.CENTER);", "-\tassertTrue(\":4e:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "-\tassertTrue(\":4f:\", bounds.x >= 100 && bounds.height > 0 && bounds.width == 0);", "-\tassertTrue(\":4g:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "-\tassertTrue(\":4h:\", bounds.x >= 100 && bounds.height > 0 && bounds.width == 200);", "-\ttreeItem2.setText(new String[] {\"hello\", \"world\"});", "-\tassertTrue(\":4i:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "-\tassertTrue(\":4j:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "-\tassertTrue(\":4k:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "-\tassertTrue(\":4l:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "-\tassertTrue(\":4m:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "-\tassertTrue(\":4n:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "-\tassertTrue(\":4o:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "-\tassertTrue(\":4p:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "-\ttreeItem2.setText(new String[] {\"hello\", \"world\"});", "-\ttreeItem2.setImage(new Image[] {null, null});", "-\tassertTrue(\":4q:\", bounds.x > 0 && bounds.height > 0 && bounds.width > 0 && bounds.width < 100);", "-\tassertTrue(\":4r:\", bounds.x >= 100 && bounds.height > 0 && bounds.width  == 200);", "-\ttreeItem2.setText(\"hello\");", "-\tcolumn = new TreeColumn(tree2, SWT.RIGHT);", "-\tassertTrue(\":3s:\", bounds.x > 0 && bounds.height > 0 && bounds.width  == 0);", "+public void test_getBoundsI() {", "+\ttest_getBoundsIA();", "+\ttest_getBoundsIB();", "+\ttest_getBoundsIC();", "+\ttest_getBoundsID();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "37342d732d24ae9fd46b13d7e4c54944", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "e21499d8e0ce99464817c01247ac2cfe606f7af1", "commitAfterChange": "24ee51cda626767793aae59eaf8489a458a84622", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\tsuper(parent, style &~ SWT.BORDER);", "-\tinfo = Browser.DOCHOSTUIFLAG_THEME;", "-\tif ((style & SWT.BORDER) == 0) info |= Browser.DOCHOSTUIFLAG_NO3DOUTERBORDER;", "-\tframe = new OleFrame(this, SWT.NONE);", "-", "-\t/*", "-\t* Registry entry HKEY_CLASSES_ROOT\\Shell.Explorer\\CLSID indicates which version of", "-\t* Shell.Explorer to use by default.  We usually want to use this value because it", "-\t* typically points at the newest one that is available.  However it is possible for", "-\t* this registry entry to be changed by another application to point at some other", "-\t* Shell.Explorer version.", "-\t*", "-\t* The Browser depends on the Shell.Explorer version being at least Shell.Explorer.2.", "-\t* If it is detected in the registry to be Shell.Explorer.1 then change the progId that", "-\t* will be embedded to explicitly specify Shell.Explorer.2.", "-\t*/", "-\tString progId = \"Shell.Explorer\";\t//$NON-NLS-1$", "-\tTCHAR key = new TCHAR (0, \"Shell.Explorer\\\\CLSID\", true);\t//$NON-NLS-1$", "-\tint [] phkResult = new int [1];", "-\tif (OS.RegOpenKeyEx (OS.HKEY_CLASSES_ROOT, key, 0, OS.KEY_READ, phkResult) == 0) {", "-\t\tint [] lpcbData = new int [1];", "-\t\tint result = OS.RegQueryValueEx (phkResult [0], null, 0, null, (TCHAR) null, lpcbData);", "-\t\tif (result == 0) {", "-\t\t\tTCHAR lpData = new TCHAR (0, lpcbData [0] / TCHAR.sizeof);", "-\t\t\tresult = OS.RegQueryValueEx (phkResult [0], null, 0, null, lpData, lpcbData);", "-\t\t\tif (result == 0) {", "-\t\t\t\tString clsid = lpData.toString (0, lpData.strlen ());", "-\t\t\t\tif (clsid.equals (CLSID_SHELLEXPLORER1)) {", "-\t\t\t\t\t/* Shell.Explorer.1 is the default, ensure that Shell.Explorer.2 is available */", "-\t\t\t\t\tkey = new TCHAR (0, \"Shell.Explorer.2\", true);\t//$NON-NLS-1$", "-\t\t\t\t\tint [] phkResult2 = new int [1];", "-\t\t\t\t\tif (OS.RegOpenKeyEx (OS.HKEY_CLASSES_ROOT, key, 0, OS.KEY_READ, phkResult2) == 0) {", "-\t\t\t\t\t\t/* specify that Shell.Explorer.2 is to be used */", "-\t\t\t\t\t\tOS.RegCloseKey (phkResult2 [0]);", "-\t\t\t\t\t\tprogId = \"Shell.Explorer.2\";\t//$NON-NLS-1$", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "+\tsuper (parent, checkStyle (style));", "+\tString className = null;", "+\tif ((style & SWT.NONE /*MOZILLA*/) != 0) {", "+\t\tclassName = \"org.eclipse.swt.browser.Mozilla\";", "+\t} else {", "+\t\tString platform = SWT.getPlatform();", "+\t\tif (\"win32\".equals(platform)) {", "+\t\t\tclassName = \"org.eclipse.swt.browser.IE\";", "+\t\t} else if (\"motif\".equals(platform)) {", "+\t\t\tclassName = \"org.eclipse.swt.browser.Mozilla\";", "+\t\t} else if (\"gtk\".equals(platform)) {", "+\t\t\tclassName = \"org.eclipse.swt.browser.Mozilla\";", "+\t\t} else if (\"carbon\".equals(platform)) {", "+\t\t\tclassName = \"org.eclipse.swt.browser.Safari\";", "+\t\t} else if (\"photon\".equals(platform)) {", "+\t\t\tclassName = \"org.eclipse.swt.browser.Voyager\";", "+\t\t} else {", "+\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "-\t\tOS.RegCloseKey (phkResult [0]);", "+", "-\t\tsite = new WebSite(frame, SWT.NONE, progId); //$NON-NLS-1$", "-\t} catch (SWTException e) {", "-\t\tdispose();", "-\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tClass clazz = Class.forName(className);", "+\t\twebBrowser = (WebBrowser)clazz.newInstance();", "+\t} catch (ClassNotFoundException e) {", "+\t} catch (IllegalAccessException e) {", "+\t} catch (InstantiationException e) {", "-\t", "-\tsite.doVerb(OLE.OLEIVERB_INPLACEACTIVATE);", "-\tauto = new OleAutomation(site);", "+\tif (webBrowser == null) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tListener listener = new Listener() {", "-\t\tpublic void handleEvent(Event e) {", "-\t\t\tswitch (e.type) {", "-\t\t\t\tcase SWT.Dispose: {", "-\t\t\t\t\t/* make this handler run after other dispose listeners */", "-\t\t\t\t\tif (ignoreDispose) {", "-\t\t\t\t\t\tignoreDispose = false;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tignoreDispose = true;", "-\t\t\t\t\tnotifyListeners (e.type, e);", "-\t\t\t\t\te.type = SWT.NONE;", "-\t\t\t\t\tif (auto != null) auto.dispose();", "-\t\t\t\t\tauto = null;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase SWT.Resize: {", "-\t\t\t\t\tframe.setBounds(getClientArea());", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase SWT.KeyDown:", "-\t\t\t\tcase SWT.KeyUp: {", "-\t\t\t\t\tnotifyListeners(e.type, e);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t};", "-\taddListener(SWT.Dispose, listener);", "-\taddListener(SWT.Resize, listener);", "-\tsite.addListener(SWT.KeyDown, listener);", "-\tsite.addListener(SWT.KeyUp, listener);", "-\t", "-\tOleListener oleListener = new OleListener() {", "-\t\tpublic void handleEvent(OleEvent event) {", "-\t\t\tif (auto == null) return;\t\t/* receiver was disposed, callback is asynchronous */", "-\t\t\tswitch (event.type) {", "-\t\t\t\tcase BeforeNavigate2: {", "-\t\t\t\t\tVariant varResult = event.arguments[1];", "-\t\t\t\t\tString url = varResult.getString();", "-\t\t\t\t\tLocationEvent newEvent = new LocationEvent(Browser.this);", "-\t\t\t\t\tnewEvent.display = getDisplay();", "-\t\t\t\t\tnewEvent.widget = Browser.this;", "-\t\t\t\t\tnewEvent.location = url;", "-\t\t\t\t\tnewEvent.doit = true;", "-\t\t\t\t\tfor (int i = 0; i < locationListeners.length; i++) {", "-\t\t\t\t\t\tlocationListeners[i].changing(newEvent);", "-\t\t\t\t\t}", "-\t\t\t\t\tVariant cancel = event.arguments[6];", "-\t\t\t\t\tif (cancel != null) {", "-\t\t\t\t\t\tint pCancel = cancel.getByRef();", "-\t\t\t\t\t\tCOM.MoveMemory(pCancel, new short[]{newEvent.doit ? COM.VARIANT_FALSE : COM.VARIANT_TRUE}, 2);", "-\t\t\t\t   }\t\t\t\t\t", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase CommandStateChange: {", "-\t\t\t\t\tboolean enabled = false;", "-\t\t\t\t\tVariant varResult = event.arguments[0];", "-\t\t\t\t\tint command = varResult.getInt();", "-\t\t\t\t\tvarResult = event.arguments[1];", "-\t\t\t\t\tenabled = varResult.getBoolean();", "-\t\t\t\t\tswitch (command) {", "-\t\t\t\t\t\tcase CSC_NAVIGATEBACK : back = enabled; break;", "-\t\t\t\t\t\tcase CSC_NAVIGATEFORWARD : forward = enabled; break;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase DocumentComplete: {", "-\t\t\t\t\tVariant varResult = event.arguments[0];", "-\t\t\t\t\tIDispatch dispatch = varResult.getDispatch();", "+\twebBrowser.setBrowser(this);", "+\twebBrowser.create(parent, style);", "+}", "-\t\t\t\t\tvarResult = event.arguments[1];", "-\t\t\t\t\tString url = varResult.getString();", "-\t\t\t\t\tif (html != null && url.equals(ABOUT_BLANK)) {", "-\t\t\t\t\t\tRunnable runnable = new Runnable () {", "-\t\t\t\t\t\t\tpublic void run() {", "-\t\t\t\t\t\t\t\tif (isDisposed() || html == null) return;", "-\t\t\t\t\t\t\t\tint charCount = html.length();", "-\t\t\t\t\t\t\t\tchar[] chars = new char[charCount];", "-\t\t\t\t\t\t\t\thtml.getChars(0, charCount, chars, 0);", "-\t\t\t\t\t\t\t\thtml = null;", "-\t\t\t\t\t\t\t\tint byteCount = OS.WideCharToMultiByte(OS.CP_UTF8, 0, chars, charCount, null, 0, null, null);", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t* Note. Internet Explorer appears to treat the data loaded with ", "-\t\t\t\t\t\t\t\t* nsIPersistStreamInit.Load as if it were encoded using the default", "-\t\t\t\t\t\t\t\t* local charset.  There does not seem to be an API to set the", "-\t\t\t\t\t\t\t\t* desired charset explicitely in this case.  The fix is to", "-\t\t\t\t\t\t\t\t* prepend the UTF-8 Byte Order Mark signature to the data.", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\tbyte[] UTF8BOM = {(byte)0xEF, (byte)0xBB, (byte)0xBF};", "-\t\t\t\t\t\t\t\tint\thGlobal = OS.GlobalAlloc(OS.GMEM_FIXED | OS.GMEM_ZEROINIT, UTF8BOM.length + byteCount);", "-\t\t\t\t\t\t\t\tif (hGlobal != 0) {", "-\t\t\t\t\t\t\t\t\tOS.MoveMemory(hGlobal, UTF8BOM, UTF8BOM.length);", "-\t\t\t\t\t\t\t\t\tOS.WideCharToMultiByte(OS.CP_UTF8, 0, chars, charCount, hGlobal + UTF8BOM.length, byteCount, null, null);\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\tint[] ppstm = new int[1];", "-\t\t\t\t\t\t\t\t\t/* ", "-\t\t\t\t\t\t\t\t\t* Note.  CreateStreamOnHGlobal is called with the flag fDeleteOnRelease.", "-\t\t\t\t\t\t\t\t\t* If the call succeeds the buffer hGlobal is freed automatically", "-\t\t\t\t\t\t\t\t\t* when the IStream object is released. If the call fails, free the buffer", "-\t\t\t\t\t\t\t\t\t* hGlobal.", "-\t\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\t\tif (OS.CreateStreamOnHGlobal(hGlobal, true, ppstm) == OS.S_OK) {", "-\t\t\t\t\t\t\t\t\t\tint[] rgdispid = auto.getIDsOfNames(new String[] {\"Document\"}); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\tVariant pVarResult = auto.getProperty(rgdispid[0]);", "-\t\t\t\t\t\t\t\t\t\tIDispatch dispatchDocument = pVarResult.getDispatch();", "-\t\t\t\t\t\t\t\t\t\tint[] ppvObject = new int[1];", "-\t\t\t\t\t\t\t\t\t\tint result = dispatchDocument.QueryInterface(COM.IIDIPersistStreamInit, ppvObject);", "-\t\t\t\t\t\t\t\t\t\tif (result == OS.S_OK) {", "-\t\t\t\t\t\t\t\t\t\t\tIPersistStreamInit persistStreamInit = new IPersistStreamInit(ppvObject[0]);", "-\t\t\t\t\t\t\t\t\t\t\tif (persistStreamInit.InitNew() == OS.S_OK) {", "-\t\t\t\t\t\t\t\t\t\t\t\tpersistStreamInit.Load(ppstm[0]);", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\tpersistStreamInit.Release();", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\tpVarResult.dispose();", "-\t\t\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t\t\t* This code is intentionally commented.  The IDispatch obtained from a Variant", "-\t\t\t\t\t\t\t\t\t\t* did not increase the reference count for the enclosed interface.", "-\t\t\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\t\t\t//dispatchDocument.Release();", "-\t\t\t\t\t\t\t\t\t\tIUnknown stream = new IUnknown(ppstm[0]);", "-\t\t\t\t\t\t\t\t\t\tstream.Release();", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tOS.GlobalFree(hGlobal);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t};", "-\t\t\t\t\t\tif (delaySetText) {", "-\t\t\t\t\t\t\tdelaySetText = false;", "-\t\t\t\t\t\t\tgetDisplay().asyncExec(runnable);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\trunnable.run();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tVariant variant = new Variant(auto);", "-\t\t\t\t\t\tIDispatch top = variant.getDispatch();", "-\t\t\t\t\t\tLocationEvent locationEvent = new LocationEvent(Browser.this);", "-\t\t\t\t\t\tlocationEvent.display = getDisplay();", "-\t\t\t\t\t\tlocationEvent.widget = Browser.this;", "-\t\t\t\t\t\tlocationEvent.location = url;", "-\t\t\t\t\t\tlocationEvent.top = top.getAddress() == dispatch.getAddress();", "-\t\t\t\t\t\tfor (int i = 0; i < locationListeners.length; i++) {", "-\t\t\t\t\t\t\tlocationListeners[i].changed(locationEvent);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (isDisposed()) return;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * This code is intentionally commented.  A Variant constructed from an", "-\t\t\t\t\t\t * OleAutomation object does not increase its reference count.  The IDispatch", "-\t\t\t\t\t\t * obtained from this Variant did not increase the reference count for the", "-\t\t\t\t\t\t * OleAutomation instance either. ", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\t//top.Release();", "-\t\t\t\t\t\t//variant.dispose();", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t * Note.  The completion of the page loading is detected as", "-\t\t\t\t\t\t * described in the MSDN article \"Determine when a page is", "-\t\t\t\t\t\t * done loading in WebBrowser Control\". ", "-\t\t\t\t\t\t */", "-\t\t\t\t\t\tif (globalDispatch != 0 && dispatch.getAddress() == globalDispatch) {", "-\t\t\t\t\t\t\t/* final document complete */", "-\t\t\t\t\t\t\tglobalDispatch = 0;", "-\t\t\t\t\t\t\tProgressEvent progressEvent = new ProgressEvent(Browser.this);", "-\t\t\t\t\t\t\tprogressEvent.display = getDisplay();", "-\t\t\t\t\t\t\tprogressEvent.widget = Browser.this;", "-\t\t\t\t\t\t\tfor (int i = 0; i < progressListeners.length; i++) {", "-\t\t\t\t\t\t\t\tprogressListeners[i].completed(progressEvent);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t", "-\t\t\t\t\t/*", "-\t\t\t\t\t* This code is intentionally commented.  This IDispatch was received", "-\t\t\t\t\t* as an argument from the OleEvent and it will be disposed along with", "-\t\t\t\t\t* the other arguments.  ", "-\t\t\t\t\t*/", "-\t\t\t\t\t//dispatch.Release();", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase NavigateComplete2: {", "-\t\t\t\t\tVariant varResult = event.arguments[0];", "-\t\t\t\t\tIDispatch dispatch = varResult.getDispatch();", "-\t\t\t\t\tif (globalDispatch == 0) globalDispatch = dispatch.getAddress();", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase NewWindow2: {", "-\t\t\t\t\tVariant cancel = event.arguments[1];", "-\t\t\t\t\tint pCancel = cancel.getByRef();", "-\t\t\t\t\tWindowEvent newEvent = new WindowEvent(Browser.this);", "-\t\t\t\t\tnewEvent.display = getDisplay();", "-\t\t\t\t\tnewEvent.widget = Browser.this;", "-\t\t\t\t\tnewEvent.required = false;", "-\t\t\t\t\tfor (int i = 0; i < openWindowListeners.length; i++) {", "-\t\t\t\t\t\topenWindowListeners[i].open(newEvent);", "-\t\t\t\t\t}", "-\t\t\t\t\tBrowser browser = newEvent.browser;", "-\t\t\t\t\tboolean doit = browser != null && !browser.isDisposed();", "-\t\t\t\t\tif (doit) {", "-\t\t\t\t\t\tVariant variant = new Variant(browser.auto);", "-\t\t\t\t\t\tIDispatch iDispatch = variant.getDispatch();", "-\t\t\t\t\t\tVariant ppDisp = event.arguments[0];", "-\t\t\t\t\t\tint byref = ppDisp.getByRef();", "-\t\t\t\t\t\tif (byref != 0) COM.MoveMemory(byref, new int[] {iDispatch.getAddress()}, 4);", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* This code is intentionally commented.  A Variant constructed from an", "-\t\t\t\t\t\t* OleAutomation object does not increase its reference count.  The IDispatch", "-\t\t\t\t\t\t* obtained from this Variant did not increase the reference count for the", "-\t\t\t\t\t\t* OleAutomation instance either. ", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\t//variant.dispose();", "-\t\t\t\t\t\t//iDispatch.Release();", "-\t\t\t\t\t}", "-\t\t\t\t\tif (newEvent.required) {", "-\t\t\t\t\t\tCOM.MoveMemory(pCancel, new short[]{doit ? COM.VARIANT_FALSE : COM.VARIANT_TRUE}, 2);", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase OnMenuBar: {", "-\t\t\t\t\tVariant arg0 = event.arguments[0];", "-\t\t\t\t\tmenuBar = arg0.getBoolean();", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase OnStatusBar: {", "-\t\t\t\t\tVariant arg0 = event.arguments[0];", "-\t\t\t\t\tstatusBar = arg0.getBoolean();", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase OnToolBar: {", "-\t\t\t\t\tVariant arg0 = event.arguments[0];", "-\t\t\t\t\ttoolBar = arg0.getBoolean();", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Feature in Internet Explorer.  OnToolBar FALSE is emitted ", "-\t\t\t\t\t* when both tool bar, address bar and menu bar must not be visible.", "-\t\t\t\t\t* OnToolBar TRUE is emitted when either of tool bar, address bar", "-\t\t\t\t\t* or menu bar is visible.", "-\t\t\t\t\t*/", "-\t\t\t\t\tif (!toolBar) {", "-\t\t\t\t\t\taddressBar = false;", "-\t\t\t\t\t\tmenuBar = false;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase OnVisible: {", "-\t\t\t\t\tVariant arg1 = event.arguments[0];", "-\t\t\t\t\tboolean visible = arg1.getBoolean();", "-\t\t\t\t\tWindowEvent newEvent = new WindowEvent(Browser.this);", "-\t\t\t\t\tnewEvent.display = getDisplay();", "-\t\t\t\t\tnewEvent.widget = Browser.this;", "-\t\t\t\t\tif (visible) {", "-\t\t\t\t\t\tif (addressBar) {", "-\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t* Bug in Internet Explorer.  There is no distinct notification for", "-\t\t\t\t\t\t\t* the address bar.  If neither address, menu or tool bars are visible,", "-\t\t\t\t\t\t\t* OnToolBar FALSE is emitted. For some reason, querying the value of", "-\t\t\t\t\t\t\t* AddressBar in this case returns true even though it should not be", "-\t\t\t\t\t\t\t* set visible.  The workaround is to only query the value of AddressBar", "-\t\t\t\t\t\t\t* when OnToolBar FALSE has not been emitted.", "-\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\tint[] rgdispid = auto.getIDsOfNames(new String[] { \"AddressBar\" }); //$NON-NLS-1$", "-\t\t\t\t\t\t\tVariant pVarResult = auto.getProperty(rgdispid[0]);", "-\t\t\t\t\t\t\tif (pVarResult != null && pVarResult.getType() == OLE.VT_BOOL) addressBar = pVarResult.getBoolean();", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tnewEvent.addressBar = addressBar;", "-\t\t\t\t\t\tnewEvent.menuBar = menuBar;", "-\t\t\t\t\t\tnewEvent.statusBar = statusBar;", "-\t\t\t\t\t\tnewEvent.toolBar = toolBar;", "-\t\t\t\t\t\tnewEvent.location = location;", "-\t\t\t\t\t\tnewEvent.size = size;", "-\t\t\t\t\t\tfor (int i = 0; i < visibilityWindowListeners.length; i++) {", "-\t\t\t\t\t\t\tvisibilityWindowListeners[i].show(newEvent);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tlocation = null;", "-\t\t\t\t\t\tsize = null;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tfor (int i = 0; i < visibilityWindowListeners.length; i++) {", "-\t\t\t\t\t\t\tvisibilityWindowListeners[i].hide(newEvent);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ProgressChange: {", "-\t\t\t\t\tVariant arg1 = event.arguments[0];", "-\t\t\t\t\tint nProgress = arg1.getType() != OLE.VT_I4 ? 0 : arg1.getInt(); // may be -1", "-\t\t\t\t\tVariant arg2 = event.arguments[1];", "-\t\t\t\t\tint nProgressMax = arg2.getType() != OLE.VT_I4 ? 0 : arg2.getInt();", "-\t\t\t\t\tProgressEvent newEvent = new ProgressEvent(Browser.this);", "-\t\t\t\t\tnewEvent.display = getDisplay();", "-\t\t\t\t\tnewEvent.widget = Browser.this;", "-\t\t\t\t\tnewEvent.current = nProgress;", "-\t\t\t\t\tnewEvent.total = nProgressMax;", "-\t\t\t\t\tif (nProgress != -1) {", "-\t\t\t\t\t\tfor (int i = 0; i < progressListeners.length; i++) {", "-\t\t\t\t\t\t\tprogressListeners[i].changed(newEvent);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase StatusTextChange: {", "-\t\t\t\t\tVariant arg1 = event.arguments[0];", "-\t\t\t\t\tif (arg1.getType() == OLE.VT_BSTR) {", "-\t\t\t\t\t\tString text = arg1.getString();", "-\t\t\t\t\t\tStatusTextEvent newEvent = new StatusTextEvent(Browser.this);", "-\t\t\t\t\t\tnewEvent.display = getDisplay();", "-\t\t\t\t\t\tnewEvent.widget = Browser.this;", "-\t\t\t\t\t\tnewEvent.text = text;", "-\t\t\t\t\t\tfor (int i = 0; i < statusTextListeners.length; i++) {", "-\t\t\t\t\t\t\tstatusTextListeners[i].changed(newEvent);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase TitleChange: {", "-\t\t\t\t\tVariant arg1 = event.arguments[0];", "-\t\t\t\t\tif (arg1.getType() == OLE.VT_BSTR) {", "-\t\t\t\t\t\tString title = arg1.getString();", "-\t\t\t\t\t\tTitleEvent newEvent = new TitleEvent(Browser.this);", "-\t\t\t\t\t\tnewEvent.display = getDisplay();", "-\t\t\t\t\t\tnewEvent.widget = Browser.this;", "-\t\t\t\t\t\tnewEvent.title = title;", "-\t\t\t\t\t\tfor (int i = 0; i < titleListeners.length; i++) {", "-\t\t\t\t\t\t\ttitleListeners[i].changed(newEvent);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase WindowClosing: {", "-\t\t\t\t\tWindowEvent newEvent = new WindowEvent(Browser.this);", "-\t\t\t\t\tnewEvent.display = getDisplay();", "-\t\t\t\t\tnewEvent.widget = Browser.this;", "-\t\t\t\t\tfor (int i = 0; i < closeWindowListeners.length; i++) {", "-\t\t\t\t\t\tcloseWindowListeners[i].close(newEvent);", "-\t\t\t\t\t}", "-\t\t\t\t\tVariant cancel = event.arguments[1];", "-\t\t\t\t\tint pCancel = cancel.getByRef();", "-\t\t\t\t\tVariant arg1 = event.arguments[0];", "-\t\t\t\t\tboolean isChildWindow = arg1.getBoolean();", "-\t\t\t\t\tCOM.MoveMemory(pCancel, new short[]{isChildWindow ? COM.VARIANT_FALSE : COM.VARIANT_TRUE}, 2);", "-\t\t\t\t\tdispose();", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase WindowSetHeight: {", "-\t\t\t\t\tif (size == null) size = new Point(0, 0);", "-\t\t\t\t\tVariant arg1 = event.arguments[0];", "-\t\t\t\t\tsize.y = arg1.getInt();", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase WindowSetLeft: {", "-\t\t\t\t\tif (location == null) location = new Point(0, 0);", "-\t\t\t\t\tVariant arg1 = event.arguments[0];", "-\t\t\t\t\tlocation.x = arg1.getInt();", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase WindowSetTop: {", "-\t\t\t\t\tif (location == null) location = new Point(0, 0);", "-\t\t\t\t\tVariant arg1 = event.arguments[0];", "-\t\t\t\t\tlocation.y = arg1.getInt();", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase WindowSetWidth: {", "-\t\t\t\t\tif (size == null) size = new Point(0, 0);", "-\t\t\t\t\tVariant arg1 = event.arguments[0];", "-\t\t\t\t\tsize.x = arg1.getInt();", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}\t\t\t", "-\t\t\t/*", "-\t\t\t* Dispose all arguments passed in the OleEvent.  This must be", "-\t\t\t* done to properly release any IDispatch reference that was", "-\t\t\t* automatically addRef'ed when constructing the OleEvent.  ", "-\t\t\t*/", "-\t\t\tVariant[] arguments = event.arguments;", "-\t\t\tfor (int i = 0; i < arguments.length; i++) arguments[i].dispose();", "-\t\t}", "-\t};", "-\tsite.addEventListener(BeforeNavigate2, oleListener);", "-\tsite.addEventListener(CommandStateChange, oleListener);", "-\tsite.addEventListener(DocumentComplete, oleListener);", "-\tsite.addEventListener(NavigateComplete2, oleListener);", "-\tsite.addEventListener(NewWindow2, oleListener);", "-\tsite.addEventListener(OnMenuBar, oleListener);", "-\tsite.addEventListener(OnStatusBar, oleListener);", "-\tsite.addEventListener(OnToolBar, oleListener);", "-\tsite.addEventListener(OnVisible, oleListener);", "-\tsite.addEventListener(ProgressChange, oleListener);", "-\tsite.addEventListener(StatusTextChange, oleListener);", "-\tsite.addEventListener(TitleChange, oleListener);", "-\tsite.addEventListener(WindowClosing, oleListener);", "-\tsite.addEventListener(WindowSetHeight, oleListener);", "-\tsite.addEventListener(WindowSetLeft, oleListener);", "-\tsite.addEventListener(WindowSetTop, oleListener);", "-\tsite.addEventListener(WindowSetWidth, oleListener);", "-\t", "-\tVariant variant = new Variant(true);", "-\tauto.setProperty(RegisterAsBrowser, variant);", "-\tvariant.dispose();", "-\t", "-\tvariant = new Variant(false);", "-\tint[] rgdispid = auto.getIDsOfNames(new String[] {\"RegisterAsDropTarget\"}); //$NON-NLS-1$", "-\tif (rgdispid != null) auto.setProperty(rgdispid[0], variant);", "-\tvariant.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8310c985dd4e0649752ea0aa37dbbaad", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "187ea656e7718232fbbad1117283cd1f27ee85cc", "commitAfterChange": "edcfa2b9454cf2ea4b6dac430c1d7266bf2aed9f", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 137, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\t\tcase OS.CDDS_PREPAINT: {", "-\t\t\t\t\tif (OS.IsWindowVisible (handle)) {", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* Bug in Windows.  When the table has the extended style", "-\t\t\t\t\t\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "-\t\t\t\t\t\t* CLR_NONE to make the table transparent, Windows fills", "-\t\t\t\t\t\t* a black rectangle around any column that contains an", "-\t\t\t\t\t\t* image.  The fix is clear LVS_EX_FULLROWSELECT during", "-\t\t\t\t\t\t* custom draw.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "-\t\t\t\t\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) == OS.CLR_NONE) {", "-\t\t\t\t\t\t\t\tOS.UpdateWindow (handle);", "-\t\t\t\t\t\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "-\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "-\t\t\t\t\t\t\t\tOS.ValidateRect (handle, null);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "-\t\t\t\t\t\t\tControl control = findBackgroundControl ();", "-\t\t\t\t\t\t\tif (control != null && control.backgroundImage != null) {", "-\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "-\t\t\t\t\t\t\t\tfillImageBackground (nmcd.hdc, control, rect);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) == OS.CLR_NONE) {", "-\t\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "-\t\t\t\t\t\t\t\t\tif (control == null) control = this;", "-\t\t\t\t\t\t\t\t\tfillBackground (nmcd.hdc, control.getBackgroundPixel (), rect);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\treturn new LRESULT (OS.CDRF_NOTIFYITEMDRAW | OS.CDRF_NOTIFYPOSTPAINT);", "-\t\t\t\t}", "-\t\t\t\tcase OS.CDDS_POSTPAINT: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug in Windows.  When the table has the extended style", "-\t\t\t\t\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "-\t\t\t\t\t* CLR_NONE to make the table transparent, Windows fills", "-\t\t\t\t\t* a black rectangle around any column that contains an", "-\t\t\t\t\t* image.  The fix is clear LVS_EX_FULLROWSELECT during", "-\t\t\t\t\t* custom draw.", "-\t\t\t\t\t*/", "-\t\t\t\t\tif (OS.IsWindowVisible (handle) && (style & SWT.FULL_SELECTION) != 0) {", "-\t\t\t\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) == OS.CLR_NONE) {", "-\t\t\t\t\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "-\t\t\t\t\t\t\tif (OS.IsWinCE) {", "-\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\t\t\tboolean damaged = OS.GetUpdateRect (handle, rect, true);", "-\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, bits);", "-\t\t\t\t\t\t\t\tOS.ValidateRect (handle, null);", "-\t\t\t\t\t\t\t\tif (damaged) OS.InvalidateRect (handle, rect, true);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tint rgn = OS.CreateRectRgn (0, 0, 0, 0);", "-\t\t\t\t\t\t\t\tint result = OS.GetUpdateRgn (handle, rgn, true);", "-\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, bits);", "-\t\t\t\t\t\t\t\tOS.ValidateRect (handle, null);", "-\t\t\t\t\t\t\t\tif (result != OS.NULLREGION) OS.InvalidateRgn (handle, rgn, true);", "-\t\t\t\t\t\t\t\tOS.DeleteObject (rgn);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase OS.CDDS_ITEMPREPAINT: {", "-\t\t\t\t\treturn new LRESULT (OS.CDRF_NOTIFYSUBITEMDRAW | OS.CDRF_NOTIFYPOSTPAINT);", "-\t\t\t\t}", "-\t\t\t\tcase OS.CDDS_SUBITEMPREPAINT: {", "-\t\t\t\t\tint hDC = nmcd.hdc;", "-\t\t\t\t\tTableItem item = _getItem (nmcd.dwItemSpec);", "-\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [nmcd.iSubItem] : -1;", "-\t\t\t\t\tif (hFont == -1) hFont = item.font;", "-\t\t\t\t\tint clrText = item.cellForeground != null ? item.cellForeground [nmcd.iSubItem] : -1;", "-\t\t\t\t\tif (clrText == -1) clrText = item.foreground;", "-\t\t\t\t\tint clrTextBk = item.cellBackground != null ? item.cellBackground [nmcd.iSubItem] : -1;", "-\t\t\t\t\tif (clrTextBk == -1) clrTextBk = item.background;", "-\t\t\t\t\tif (OS.IsWindowVisible (handle) && hooks (SWT.MeasureItem)) {", "-\t\t\t\t\t\tRECT itemRect = item.getBounds (nmcd.dwItemSpec, nmcd.iSubItem, true, true, false, false, hDC);", "-\t\t\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "-\t\t\t\t\t\tGCData data = new GCData ();", "-\t\t\t\t\t\tdata.device = display;", "-\t\t\t\t\t\tdata.hFont = hFont;", "-\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "-\t\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\t\tevent.item = item;", "-\t\t\t\t\t\tevent.gc = gc;", "-\t\t\t\t\t\tevent.index = nmcd.iSubItem;", "-\t\t\t\t\t\tevent.x = itemRect.left;", "-\t\t\t\t\t\tevent.y = itemRect.top;", "-\t\t\t\t\t\tevent.width = itemRect.right - itemRect.left;", "-\t\t\t\t\t\tevent.height = itemRect.bottom - itemRect.top;", "-\t\t\t\t\t\tsendEvent (SWT.MeasureItem, event);", "-\t\t\t\t\t\tevent.gc = null;", "-\t\t\t\t\t\tgc.dispose ();", "-\t\t\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "-\t\t\t\t\t\tif (isDisposed () || item.isDisposed ()) break;", "-\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "-\t\t\t\t\t\tif (count == 1 && columns [0] == null) {", "-\t\t\t\t\t\t\tint width = OS.SendMessage (handle, OS.LVM_GETCOLUMNWIDTH, 0, 0);", "-\t\t\t\t\t\t\tif (event.x + event.width > width) {", "-\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, event.x + event.width);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!ignoreItemHeight) {", "-\t\t\t\t\t\t\tif (event.height > getItemHeight ()) setItemHeight (event.height);", "-\t\t\t\t\t\t\tignoreItemHeight = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tignoreDraw = false;", "-\t\t\t\t\tboolean ignoreDrawSelected = false;", "-\t\t\t\t\tif (OS.IsWindowVisible (handle) && hooks (SWT.EraseItem)) {", "-\t\t\t\t\t\tRECT cellRect = item.getBounds (nmcd.dwItemSpec, nmcd.iSubItem, true, true, true, true, hDC);", "-\t\t\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* Bug in Windows.  For some reason, CDIS_SELECTED always set,", "-\t\t\t\t\t\t* even for items that are not selected.  The fix is to get", "-\t\t\t\t\t\t* the selection state from the item.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tLVITEM lvItem = new LVITEM ();", "-\t\t\t\t\t\tlvItem.mask = OS.LVIF_STATE;", "-\t\t\t\t\t\tlvItem.stateMask = OS.LVIS_SELECTED;", "-\t\t\t\t\t\tlvItem.iItem = nmcd.dwItemSpec;", "-\t\t\t\t\t\tint result = OS.SendMessage (handle, OS.LVM_GETITEM, 0, lvItem);", "-\t\t\t\t\t\tboolean selected = (result != 0 && (lvItem.state & OS.LVIS_SELECTED) != 0);", "-\t\t\t\t\t\tGCData data = new GCData ();", "-\t\t\t\t\t\tdata.device = display;", "-\t\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "-\t\t\t\t\t\t\tif (selected && (nmcd.iSubItem == 0 || (style & SWT.FULL_SELECTION) != 0)) {", "-\t\t\t\t\t\t\t\tdata.foreground = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "-\t\t\t\t\t\t\t\tdata.background = OS.GetSysColor (OS.COLOR_HIGHLIGHT);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tdata.foreground = clrText != -1 ? clrText : OS.GetTextColor (hDC);", "-\t\t\t\t\t\t\t\tdata.background = clrTextBk != -1 ? clrTextBk : OS.GetBkColor (hDC);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tdata.hPen = OS.CreatePen (OS.PS_SOLID, 0, data.foreground);", "-\t\t\t\t\t\t\tdata.hBrush = OS.CreateSolidBrush (data.background);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tdata.hFont = hFont;", "-\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "-\t\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\t\tevent.item = item;", "-\t\t\t\t\t\tevent.gc = gc;", "-\t\t\t\t\t\tevent.index = nmcd.iSubItem;", "-\t\t\t\t\t\tif (selected) event.detail |= SWT.SELECTED;", "-\t\t\t\t\t\tif ((nmcd.uItemState & OS.CDIS_FOCUS) != 0) event.detail |= SWT.FOCUSED;", "-\t\t\t\t\t\tevent.x = cellRect.left;", "-\t\t\t\t\t\tevent.y = cellRect.top;", "-\t\t\t\t\t\tevent.width = cellRect.right - cellRect.left;", "-\t\t\t\t\t\tevent.height = cellRect.bottom - cellRect.top;", "-\t\t\t\t\t\tdrawBackground (hDC, cellRect);", "-\t\t\t\t\t\tgc.setClipping (event.x, event.y, event.width, event.height);", "-\t\t\t\t\t\tsendEvent (SWT.EraseItem, event);", "-\t\t\t\t\t\tevent.gc = null;", "-\t\t\t\t\t\t//int newClrText = OS.GetTextColor (hDC);", "-\t\t\t\t\t\t//int newClrTextBk = OS.GetBkColor (hDC);", "-\t\t\t\t\t\tgc.dispose ();", "-\t\t\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "-\t\t\t\t\t\tif (isDisposed () || item.isDisposed ()) break;", "-\t\t\t\t\t\tif (selected) {", "-\t\t\t\t\t\t\tif ((event.detail & SWT.SELECTED) == 0) {", "-\t\t\t\t\t\t\t\tignoreDrawSelected = true;", "-\t\t\t\t\t\t\t\tif (nmcd.iSubItem == 0 || (style & SWT.FULL_SELECTION) != 0) {", "-\t\t\t\t\t\t\t\t\tclrText = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "-\t\t\t\t\t\t\t\t\t//clrText = newClrText;", "-\t\t\t\t\t\t\t\t\t//clrTextBk = newClrTextBk;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tnmcd.uItemState &= ~OS.CDIS_SELECTED;", "-\t\t\t\t\t\t\t\tOS.MoveMemory (lParam, nmcd, NMLVCUSTOMDRAW.sizeof);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tif ((event.detail & SWT.SELECTED) != 0) {", "-\t\t\t\t\t\t\t\tif (nmcd.iSubItem == 0 || (style & SWT.FULL_SELECTION) != 0) {", "-\t\t\t\t\t\t\t\t\tclrText = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "-\t\t\t\t\t\t\t\t\tclrTextBk = OS.GetSysColor (OS.COLOR_HIGHLIGHT);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tnmcd.uItemState |= OS.CDIS_SELECTED;", "-\t\t\t\t\t\t\t\tOS.MoveMemory (lParam, nmcd, NMLVCUSTOMDRAW.sizeof);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tignoreDraw = !event.doit;", "-\t\t\t\t\t\tif (ignoreDraw) {", "-\t\t\t\t\t\t\tRECT itemRect = item.getBounds (nmcd.dwItemSpec, nmcd.iSubItem, true, true, false);", "-\t\t\t\t\t\t\tOS.SaveDC (hDC);", "-\t\t\t\t\t\t\tOS.SelectClipRgn (hDC, 0);", "-\t\t\t\t\t\t\tOS.ExcludeClipRect (hDC, itemRect.left, itemRect.top, itemRect.right, itemRect.bottom);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug in Windows.  When the table has the extended style", "-\t\t\t\t\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "-\t\t\t\t\t* CLR_NONE to make the table transparent, Windows draws", "-\t\t\t\t\t* a black rectangle around any column that contains an", "-\t\t\t\t\t* image.  The fix is emulate LVS_EX_FULLROWSELECT by", "-\t\t\t\t\t* drawing the selection.", "-\t\t\t\t\t*/", "-\t\t\t\t\tif (OS.IsWindowVisible (handle) && (style & SWT.FULL_SELECTION) != 0 && !ignoreDrawSelected) {", "-\t\t\t\t\t\tint bits = OS.SendMessage (handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0);", "-\t\t\t\t\t\tif ((bits & OS.LVS_EX_FULLROWSELECT) == 0) {", "-\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t* Bug in Windows.  For some reason, CDIS_SELECTED always set,", "-\t\t\t\t\t\t\t* even for items that are not selected.  The fix is to get", "-\t\t\t\t\t\t\t* the selection state from the item.", "-\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\tLVITEM lvItem = new LVITEM ();", "-\t\t\t\t\t\t\tlvItem.mask = OS.LVIF_STATE;", "-\t\t\t\t\t\t\tlvItem.stateMask = OS.LVIS_SELECTED;", "-\t\t\t\t\t\t\tlvItem.iItem = nmcd.dwItemSpec;", "-\t\t\t\t\t\t\tint result = OS.SendMessage (handle, OS.LVM_GETITEM, 0, lvItem);", "-\t\t\t\t\t\t\tif ((result != 0 && (lvItem.state & OS.LVIS_SELECTED) != 0)) {", "-\t\t\t\t\t\t\t\tif (OS.GetFocus () == handle) {", "-\t\t\t\t\t\t\t\t\tclrText = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "-\t\t\t\t\t\t\t\t\tclrTextBk = OS.GetSysColor (OS.COLOR_HIGHLIGHT);", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tif ((style & SWT.HIDE_SELECTION) == 0) {", "-\t\t\t\t\t\t\t\t\t\tclrTextBk = OS.GetSysColor (OS.COLOR_3DFACE);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (clrTextBk != -1 && nmcd.iSubItem == 0) {", "-\t\t\t\t\t\t\t\t\tRECT itemRect = new RECT ();", "-\t\t\t\t\t\t\t\t\titemRect.left = OS.LVIR_SELECTBOUNDS;", "-\t\t\t\t\t\t\t\t\tif (OS.SendMessage (handle, OS. LVM_GETITEMRECT, nmcd.dwItemSpec, itemRect) != 0) {", "-\t\t\t\t\t\t\t\t\t\tRECT headerRect = new RECT ();", "-\t\t\t\t\t\t\t\t\t\tif (OS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, 0, headerRect) != 0) {", "-\t\t\t\t\t\t\t\t\t\t\titemRect.left = itemRect.right;", "-\t\t\t\t\t\t\t\t\t\t\titemRect.right = headerRect.right;", "-\t\t\t\t\t\t\t\t\t\t\tfillBackground (hDC, clrTextBk, itemRect);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Feature in Windows.  When the font is set for one cell in a table,", "-\t\t\t\t\t* Windows does not reset the font for the next cell.  As a result,", "-\t\t\t\t\t* all subsequent cells are drawn using the new font.  The fix is to", "-\t\t\t\t\t* reset the font to the default.", "-\t\t\t\t\t* ", "-\t\t\t\t\t* NOTE: This does not happen for foreground and background.", "-\t\t\t\t\t*/", "-\t\t\t\t\tif (hFont == -1 && clrText == -1 && clrTextBk == -1) {", "-\t\t\t\t\t\tif (item.cellForeground == null && item.cellBackground == null && item.cellFont == null) {", "-\t\t\t\t\t\t\tif (OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0) == 1) {", "-\t\t\t\t\t\t\t\tif (ignoreDraw || hooks (SWT.EraseItem) || hooks (SWT.PaintItem)) {", "-\t\t\t\t\t\t\t\t\treturn new LRESULT (OS.CDRF_NOTIFYPOSTPAINT);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (hFont == -1) hFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "-\t\t\t\t\tOS.SelectObject (hDC, hFont);", "-\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "-\t\t\t\t\t\tnmcd.clrText = clrText == -1 ? getForegroundPixel () : clrText;", "-\t\t\t\t\t\tif (clrTextBk == -1) {", "-\t\t\t\t\t\t\tControl control = findBackgroundControl ();", "-\t\t\t\t\t\t\tif (control == null) control = this;", "-\t\t\t\t\t\t\tif (control.backgroundImage == null && !hooks (SWT.EraseItem)) {", "-\t\t\t\t\t\t\t\tnmcd.clrTextBk = control.getBackgroundPixel ();", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tnmcd.clrTextBk = clrTextBk;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tOS.MoveMemory (lParam, nmcd, NMLVCUSTOMDRAW.sizeof);", "-\t\t\t\t\t}", "-\t\t\t\t\tif (ignoreDraw || hooks (SWT.EraseItem) || hooks (SWT.PaintItem)) {", "-\t\t\t\t\t\treturn new LRESULT (OS.CDRF_NEWFONT | OS.CDRF_NOTIFYPOSTPAINT);", "-\t\t\t\t\t}", "-\t\t\t\t\treturn new LRESULT (OS.CDRF_NEWFONT);", "-\t\t\t\t}", "-\t\t\t\tcase OS.CDDS_SUBITEMPOSTPAINT: {", "-\t\t\t\t\tint hDC = nmcd.hdc;", "-\t\t\t\t\tif (ignoreDraw) OS.RestoreDC (hDC, -1);", "-\t\t\t\t\tif (OS.IsWindowVisible (handle) && hooks (SWT.PaintItem)) {", "-\t\t\t\t\t\tTableItem item = _getItem (nmcd.dwItemSpec);", "-\t\t\t\t\t\tRECT itemRect = item.getBounds (nmcd.dwItemSpec, nmcd.iSubItem, true, true, false, false, hDC);", "-\t\t\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "-\t\t\t\t\t\tGCData data = new GCData ();", "-\t\t\t\t\t\tdata.device = display;", "-\t\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [nmcd.iSubItem] : -1;", "-\t\t\t\t\t\tif (hFont == -1) hFont = item.font;", "-\t\t\t\t\t\tdata.hFont = hFont;", "-\t\t\t\t\t\t/*", "-\t\t\t\t\t\t* Bug in Windows.  For some reason, CDIS_SELECTED always set,", "-\t\t\t\t\t\t* even for items that are not selected.  The fix is to get", "-\t\t\t\t\t\t* the selection state from the item.", "-\t\t\t\t\t\t*/", "-\t\t\t\t\t\tLVITEM lvItem = new LVITEM ();", "-\t\t\t\t\t\tlvItem.mask = OS.LVIF_STATE;", "-\t\t\t\t\t\tlvItem.stateMask = OS.LVIS_SELECTED;", "-\t\t\t\t\t\tlvItem.iItem = nmcd.dwItemSpec;", "-\t\t\t\t\t\tint result = OS.SendMessage (handle, OS.LVM_GETITEM, 0, lvItem);", "-\t\t\t\t\t\tboolean selected = result != 0 && (lvItem.state & OS.LVIS_SELECTED) != 0;", "-\t\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "-\t\t\t\t\t\t\tif (selected && (nmcd.iSubItem == 0 || (style & SWT.FULL_SELECTION) != 0)) {", "-\t\t\t\t\t\t\t\tdata.foreground = OS.GetSysColor (OS.COLOR_HIGHLIGHTTEXT);", "-\t\t\t\t\t\t\t\tdata.background = OS.GetSysColor (OS.COLOR_HIGHLIGHT);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tint clrText = item.cellForeground != null ? item.cellForeground [nmcd.iSubItem] : -1;", "-\t\t\t\t\t\t\t\tif (clrText == -1) clrText = item.foreground;", "-\t\t\t\t\t\t\t\tint clrTextBk = item.cellBackground != null ? item.cellBackground [nmcd.iSubItem] : -1;", "-\t\t\t\t\t\t\t\tif (clrTextBk == -1) clrTextBk = item.background;", "-\t\t\t\t\t\t\t\tdata.foreground = clrText != -1 ? clrText : OS.GetTextColor (hDC);", "-\t\t\t\t\t\t\t\tdata.background = clrTextBk != -1 ? clrTextBk : OS.GetBkColor (hDC);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tdata.hPen = OS.CreatePen (OS.PS_SOLID, 0, data.foreground);", "-\t\t\t\t\t\t\tdata.hBrush = OS.CreateSolidBrush (data.background);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "-\t\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\t\tevent.item = item;", "-\t\t\t\t\t\tevent.gc = gc;", "-\t\t\t\t\t\tevent.index = nmcd.iSubItem;", "-\t\t\t\t\t\tif (selected) event.detail |= SWT.SELECTED;", "-\t\t\t\t\t\tif ((nmcd.uItemState & OS.CDIS_FOCUS) != 0) event.detail |= SWT.FOCUSED;", "-\t\t\t\t\t\tevent.x = itemRect.left;", "-\t\t\t\t\t\tevent.y = itemRect.top;", "-\t\t\t\t\t\tevent.width = itemRect.right - itemRect.left;", "-\t\t\t\t\t\tevent.height = itemRect.bottom - itemRect.top;", "-\t\t\t\t\t\tRECT cellRect = item.getBounds (nmcd.dwItemSpec, nmcd.iSubItem, true, true, true, true, hDC);", "-\t\t\t\t\t\tint cellWidth = cellRect.right - cellRect.left;", "-\t\t\t\t\t\tint cellHeight = cellRect.bottom - cellRect.top;", "-\t\t\t\t\t\tgc.setClipping (cellRect.left, cellRect.top, cellWidth, cellHeight);", "-\t\t\t\t\t\tsendEvent (SWT.PaintItem, event);", "-\t\t\t\t\t\tevent.gc = null;", "-\t\t\t\t\t\tgc.dispose ();", "-\t\t\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "-\t\t\t\t\t\tif (isDisposed () || item.isDisposed ()) break;", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "+\t\t\t\tcase OS.CDDS_ITEMPREPAINT: return CDDS_ITEMPREPAINT (wParam, lParam);", "+\t\t\t\tcase OS.CDDS_POSTPAINT: return CDDS_POSTPAINT (wParam, lParam);", "+\t\t\t\tcase OS.CDDS_PREPAINT: return CDDS_PREPAINT (wParam, lParam);", "+\t\t\t\tcase OS.CDDS_SUBITEMPOSTPAINT: return CDDS_SUBITEMPOSTPAINT (wParam, lParam);", "+\t\t\t\tcase OS.CDDS_SUBITEMPREPAINT: return CDDS_SUBITEMPREPAINT (wParam, lParam);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a84207e509442536e5a9c165c022a29a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "a87a0403ac3b9edf077183bd0f22ecbd0e7e4a59", "commitAfterChange": "ce5bc5ccb4b7e34346accfd668928ba52a6f7a27", "methodNumberBeforeChange": 184, "methodNumberAfterChange": 187, "signatureBeforeChange": "  int HandleEvent (int event)", "signatureAfterChange": "  int HandleEvent (int event)", "diff": ["-", "-int HandleEvent (int /*long*/ event) {", "-", "+", "+int HandleEvent (int /*long*/ event) {", "+\tif (!IsPre_2) {", "+\t\treturn HandleEvent_2(event);", "+\t} else {", "+\t\treturn HandleEvent_1_9(event);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "840eb66804315ee2bc048b096688fcff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/JNI Generation/org/eclipse/swt/tools/internal/JNIGeneratorAppUI.java", "commitBeforeChange": "89d88139f9e2cae0710fade32dcb1296489cc848", "commitAfterChange": "a5c47e65b59ca8e74887d733cd9f95e86a436d1a", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public void open ()", "signatureAfterChange": "  public void open ()", "diff": ["-\t};", "+\t};\t", "+\tcreateMainClassPanel(panel, updateMainClassListener);", "+\tcreateOutputDirPanel(panel, updateMainClassListener);", "+\tcreateClassesPanel(panel);", "+\tcreateMembersPanel(panel);", "+\tcreateParametersPanel(panel);", "+\tcreateActionButtons(shell);", "+", "+\tPoint preferredSize = shell.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\tshell.setSize(shell.getSize().x, preferredSize.y);", "+\t((GridData)classesLt.getLayoutData()).heightHint = -1;", "+\t((GridData)membersLt.getLayoutData()).heightHint = -1;", "+\t((GridData)paramsLt.getLayoutData()).heightHint = -1;", "+\tupdateMainClass();", "+\tupdateClasses();", "+\tupdateMembers();", "+\tupdateParameters();", "+}", "-\t", "-\tmainClassCb.addListener(SWT.Selection, updateMainClassListener);", "-\tmainClassCb.addListener(SWT.DefaultSelection, updateMainClassListener);", "-\t", "-\toutputDirCb.addListener(SWT.Selection, updateMainClassListener);", "-\toutputDirCb.addListener(SWT.DefaultSelection, updateMainClassListener);", "-\t", "-\t", "-\tmemberEditorTx.addListener(SWT.FocusOut, new Listener() {", "-\t});", "-\tmemberEditorLt.addListener(SWT.FocusOut, new Listener() {", "-\t});", "-", "-\tparamEditorTx.addListener(SWT.FocusOut, new Listener() {", "-\t});", "-\tparamEditorLt.addListener(SWT.FocusOut, new Listener() {", "-\t});", "-\t", "-\tButton action;", "-\t\t", "-\tComposite actionsPanel = new Composite(shell, SWT.NONE);", "-\tdata = new GridData(GridData.FILL_VERTICAL);", "-\t", "-\taction = new Button(actionsPanel, SWT.PUSH);", "-\taction.setText(\"Generate All\");", "-\tdata = new GridData(GridData.FILL_HORIZONTAL);", "-\taction.setLayoutData(data);", "-\taction.addListener(SWT.Selection, new Listener() {", "-\taction = new Button(actionsPanel, SWT.PUSH);", "-\taction.setText(\"Generate Structs Header\");", "-\tdata = new GridData(GridData.FILL_HORIZONTAL);", "-\taction.setLayoutData(data);", "-\taction.addListener(SWT.Selection, new Listener() {", "-\t", "-\taction = new Button(actionsPanel, SWT.PUSH);", "-\taction.setText(\"Generate Structs\");", "-\tdata = new GridData(GridData.FILL_HORIZONTAL);", "-\taction.setLayoutData(data);", "-\taction.addListener(SWT.Selection, new Listener() {", "-", "-\taction = new Button(actionsPanel, SWT.PUSH);", "-\taction.setText(\"Generate Natives\");", "-\tdata = new GridData(GridData.FILL_HORIZONTAL);", "-\taction.setLayoutData(data);", "-\taction.addListener(SWT.Selection, new Listener() {", "-", "-\taction = new Button(actionsPanel, SWT.PUSH);", "-\taction.setText(\"Generate Constants\");", "-\tdata = new GridData(GridData.FILL_HORIZONTAL);", "-\taction.setLayoutData(data);", "-\taction.addListener(SWT.Selection, new Listener() {", "-\t});", "-\t", "-\taction = new Button(actionsPanel, SWT.PUSH);", "-\taction.setText(\"Generate Sizeof\");", "-\tdata = new GridData(GridData.FILL_HORIZONTAL);", "-\taction.setLayoutData(data);", "-\taction.addListener(SWT.Selection, new Listener() {", "-", "-\taction = new Button(actionsPanel, SWT.PUSH);", "-\taction.setText(\"Generate Meta Data\");", "-\tdata = new GridData(GridData.FILL_HORIZONTAL);", "-\taction.setLayoutData(data);", "-\taction.addListener(SWT.Selection, new Listener() {", "-\t", "-\tPoint preferredSize = shell.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\tshell.setSize(shell.getSize().x, preferredSize.y);", "-\t((GridData)classesLt.getLayoutData()).heightHint = -1;", "-\t((GridData)membersLt.getLayoutData()).heightHint = -1;", "-\t((GridData)paramsLt.getLayoutData()).heightHint = -1;", "-\t", "-\tupdateMainClass();", "-\tupdateClasses();", "-\tupdateMembers();", "-\tupdateParameters();"]}], "num": 33253}
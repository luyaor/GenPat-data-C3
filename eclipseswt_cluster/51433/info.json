{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d7943d97fe37ccd7edf57721b56f8f9", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71645c8ad6370a597ec07db53ddbfb94", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/mozilla/org/eclipse/swt/browser/HelperAppLauncherDialog.java", "commitBeforeChange": "a6131ac9e2d912fd79a498410994704f80907b17", "commitAfterChange": "e758c60c4fb72428ae282ccc25e3e75b0adf65c4", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  public int PromptForSaveToFile(int arg0, int arg1, int arg2, int arg3, int arg4)", "signatureAfterChange": "  public int PromptForSaveToFile (int arg0, int arg1, int arg2, int arg3, int arg4)", "diff": ["-public int /*long*/ PromptForSaveToFile(int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3, int /*long*/ arg4) {", "+public int /*long*/ PromptForSaveToFile (int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3, int /*long*/ arg4) {", "-\tnsISupports support = new nsISupports(arg0);", "+\tnsISupports support = new nsISupports (arg0);", "-\tint rc = support.QueryInterface(nsIHelperAppLauncher_1_8.NS_IHELPERAPPLAUNCHER_IID, result);", "+\tint rc = support.QueryInterface (nsIHelperAppLauncher_1_8.NS_IHELPERAPPLAUNCHER_IID, result);", "-\t\tnsISupports supports = new nsISupports(result[0]);", "-\t\tsupports.Release();", "+\t\tnsISupports supports = new nsISupports (result[0]);", "+\t\tsupports.Release ();", "-\t\trc = support.QueryInterface(nsIHelperAppLauncher.NS_IHELPERAPPLAUNCHER_IID, result);", "+\t\trc = support.QueryInterface (nsIHelperAppLauncher.NS_IHELPERAPPLAUNCHER_IID, result);", "-\t\t\tnsISupports supports = new nsISupports(result[0]);", "-\t\t\tsupports.Release();", "+\t\t\tnsISupports supports = new nsISupports (result[0]);", "+\t\t\tsupports.Release ();", "-\tint length = XPCOM.strlen_PRUnichar(aDefaultFile);", "+\tint length = XPCOM.strlen_PRUnichar (aDefaultFile);", "-\tXPCOM.memmove(dest, aDefaultFile, length * 2);", "-\tString defaultFile = new String(dest);", "+\tXPCOM.memmove (dest, aDefaultFile, length * 2);", "+\tString defaultFile = new String (dest);", "-\tlength = XPCOM.strlen_PRUnichar(aSuggestedFileExtension);", "+\tlength = XPCOM.strlen_PRUnichar (aSuggestedFileExtension);", "-\tXPCOM.memmove(dest, aSuggestedFileExtension, length * 2);", "-\tString suggestedFileExtension = new String(dest);", "+\tXPCOM.memmove (dest, aSuggestedFileExtension, length * 2);", "+\tString suggestedFileExtension = new String (dest);", "-\tShell shell = new Shell();", "-\tFileDialog fileDialog = new FileDialog(shell, SWT.SAVE);", "-\tfileDialog.setFileName(defaultFile);", "-\tfileDialog.setFilterExtensions(new String[] {suggestedFileExtension});", "-\tString name = fileDialog.open();", "-\tshell.close();", "+\tShell shell = new Shell ();", "+\tFileDialog fileDialog = new FileDialog (shell, SWT.SAVE);", "+\tfileDialog.setFileName (defaultFile);", "+\tfileDialog.setFilterExtensions (new String[] {suggestedFileExtension});", "+\tString name = fileDialog.open ();", "+\tshell.close ();", "-\t\t\t\tnsIHelperAppLauncher_1_8 launcher = new nsIHelperAppLauncher_1_8(arg0);", "-\t\t\t\trc = launcher.Cancel(XPCOM.NS_BINDING_ABORTED);", "+\t\t\t\tnsIHelperAppLauncher_1_8 launcher = new nsIHelperAppLauncher_1_8 (arg0);", "+\t\t\t\trc = launcher.Cancel (XPCOM.NS_BINDING_ABORTED);", "-\t\t\t\tnsIHelperAppLauncher launcher = new nsIHelperAppLauncher(arg0);", "-\t\t\t\trc = launcher.Cancel();", "+\t\t\t\tnsIHelperAppLauncher launcher = new nsIHelperAppLauncher (arg0);", "+\t\t\t\trc = launcher.Cancel ();", "-\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error(rc);", "+\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\tnsEmbedString path = new nsEmbedString(name);", "-\trc = XPCOM.NS_NewLocalFile(path.getAddress(), true, result);", "-\tpath.dispose();", "-\tif (rc != XPCOM.NS_OK) Mozilla.error(rc);", "-\tif (result[0] == 0) Mozilla.error(XPCOM.NS_ERROR_NULL_POINTER);", "+\tnsEmbedString path = new nsEmbedString (name);", "+\trc = XPCOM.NS_NewLocalFile (path.getAddress (), true, result);", "+\tpath.dispose ();", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NULL_POINTER);", "-\tXPCOM.memmove(_retval, result, OS.PTR_SIZEOF);\t", "+\tXPCOM.memmove (_retval, result, C.PTR_SIZEOF);\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e436ce769400c783363bdf569cad8ed4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/PromptService2.java", "commitBeforeChange": "8093e4de11a4b3e09a48b5b00387350ee1d8feab", "commitAfterChange": "13c317ac82402adf05ac5fa6773736f7f5a76841", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": "  int PromptUsernameAndPassword (int aParent, int aDialogTitle, int aText, int aUsername, int aPassword, int aCheckMsg, int aCheckState, int _retval)", "signatureAfterChange": "  int PromptUsernameAndPassword (int aParent, int aDialogTitle, int aText, int aUsername, int aPassword, int aCheckMsg, int aCheckState, int _retval)", "diff": ["-\tString titleLabel, textLabel, checkLabel = null;", "-\tString[] userLabel = new String[1], passLabel = new String[1];", "-\tchar[] dest;", "-\tint length;", "-\tif (aDialogTitle != 0) {", "-\t\tlength = XPCOM.strlen_PRUnichar (aDialogTitle);", "-\t\tdest = new char[length];", "-\t\tXPCOM.memmove (dest, aDialogTitle, length * 2);", "-\t\ttitleLabel = new String (dest);", "-\t} else {", "-\t\ttitleLabel = SWT.getMessage (\"SWT_Authentication_Required\");\t//$NON-NLS-1$", "-\t}", "-\t", "-\tlength = XPCOM.strlen_PRUnichar (aText);", "-\tdest = new char[length];", "-\tXPCOM.memmove (dest, aText, length * 2);", "-\ttextLabel = new String (dest);", "-\t", "-\tint /*long*/[] userAddr = new int /*long*/[1];", "-\tXPCOM.memmove (userAddr, aUsername, C.PTR_SIZEOF);", "-\tif (userAddr[0] != 0) {", "-\t\tlength = XPCOM.strlen_PRUnichar (userAddr[0]);", "-\t\tdest = new char[length];", "-\t\tXPCOM.memmove (dest, userAddr[0], length * 2);", "-\t\tuserLabel[0] = new String (dest);\t\t", "-\t}", "-\t", "-\tint /*long*/[] passAddr = new int /*long*/[1];", "-\tXPCOM.memmove (passAddr, aPassword, C.PTR_SIZEOF);", "-\tif (passAddr[0] != 0) {", "-\t\tlength = XPCOM.strlen_PRUnichar (passAddr[0]);", "-\t\tdest = new char[length];", "-\t\tXPCOM.memmove (dest, passAddr[0], length * 2);", "-\t\tpassLabel[0] = new String (dest);\t\t", "-\t}", "-\t", "-\tif (aCheckMsg != 0) {", "-\t\tlength = XPCOM.strlen_PRUnichar (aCheckMsg);", "-\t\tif (length > 0) {", "-\t\t\tdest = new char[length];", "-\t\t\tXPCOM.memmove (dest, aCheckMsg, length * 2);", "-\t\t\tcheckLabel = new String (dest);", "+\tString user = null, password = null;", "+", "+\tif (browser != null) {", "+\t\tMozilla mozilla = (Mozilla)browser.webBrowser;", "+\t\t/*", "+\t\t * Do not invoke the listeners if this challenge has been failed too many", "+\t\t * times because a listener is likely giving incorrect credentials repeatedly", "+\t\t * and will do so indefinitely.", "+\t\t */", "+\t\tif (mozilla.authCount++ < 3) {", "+\t\t\tfor (int i = 0; i < mozilla.authenticationListeners.length; i++) {", "+\t\t\t\tAuthenticationEvent event = new AuthenticationEvent (browser);", "+\t\t\t\tevent.location = mozilla.lastNavigateURL;", "+\t\t\t\tmozilla.authenticationListeners[i].authenticate (event);", "+\t\t\t\tif (!event.doit) {", "+\t\t\t\t\tXPCOM.memmove (_retval, new int[] {0}, 4);\t/* PRBool */", "+\t\t\t\t\treturn XPCOM.NS_OK;", "+\t\t\t\t}", "+\t\t\t\tif (event.user != null && event.password != null) {", "+\t\t\t\t\tuser = event.user;", "+\t\t\t\t\tpassword = event.password;", "+\t\t\t\t\tXPCOM.memmove (_retval, new int[] {1}, 4);\t/* PRBool */", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t}", "-\tShell shell = browser == null ? new Shell () : browser.getShell ();", "-\tPromptDialog dialog = new PromptDialog (shell);", "-\tint[] check = new int[1], result = new int[1];", "-\tif (aCheckState != 0) XPCOM.memmove (check, aCheckState, 4);\t/* PRBool */", "-\tdialog.promptUsernameAndPassword (titleLabel, textLabel, checkLabel, userLabel, passLabel, check, result);", "+\tif (user == null) {", "+\t\t/* no listener handled the challenge, so show an authentication dialog */", "-\tXPCOM.memmove (_retval, result, 4);\t/* PRBool */", "-\tif (result[0] == 1) {", "+\t\tString titleLabel, textLabel, checkLabel = null;", "+\t\tString[] userLabel = new String[1], passLabel = new String[1];", "+\t\tchar[] dest;", "+\t\tint length;", "+\t\tif (aDialogTitle != 0) {", "+\t\t\tlength = XPCOM.strlen_PRUnichar (aDialogTitle);", "+\t\t\tdest = new char[length];", "+\t\t\tXPCOM.memmove (dest, aDialogTitle, length * 2);", "+\t\t\ttitleLabel = new String (dest);", "+\t\t} else {", "+\t\t\ttitleLabel = SWT.getMessage (\"SWT_Authentication_Required\");\t//$NON-NLS-1$", "+\t\t}", "+\t\t", "+\t\tlength = XPCOM.strlen_PRUnichar (aText);", "+\t\tdest = new char[length];", "+\t\tXPCOM.memmove (dest, aText, length * 2);", "+\t\ttextLabel = new String (dest);", "+", "+\t\tint /*long*/[] userAddr = new int /*long*/[1];", "+\t\tXPCOM.memmove (userAddr, aUsername, C.PTR_SIZEOF);", "+\t\tif (userAddr[0] != 0) {", "+\t\t\tlength = XPCOM.strlen_PRUnichar (userAddr[0]);", "+\t\t\tdest = new char[length];", "+\t\t\tXPCOM.memmove (dest, userAddr[0], length * 2);", "+\t\t\tuserLabel[0] = new String (dest);\t\t", "+\t\t}", "+", "+\t\tint /*long*/[] passAddr = new int /*long*/[1];", "+\t\tXPCOM.memmove (passAddr, aPassword, C.PTR_SIZEOF);", "+\t\tif (passAddr[0] != 0) {", "+\t\t\tlength = XPCOM.strlen_PRUnichar (passAddr[0]);", "+\t\t\tdest = new char[length];", "+\t\t\tXPCOM.memmove (dest, passAddr[0], length * 2);", "+\t\t\tpassLabel[0] = new String (dest);\t\t", "+\t\t}", "+\t\t", "+\t\tif (aCheckMsg != 0) {", "+\t\t\tlength = XPCOM.strlen_PRUnichar (aCheckMsg);", "+\t\t\tif (length > 0) {", "+\t\t\t\tdest = new char[length];", "+\t\t\t\tXPCOM.memmove (dest, aCheckMsg, length * 2);", "+\t\t\t\tcheckLabel = new String (dest);", "+\t\t\t}", "+\t\t}", "+\t", "+\t\tShell shell = browser == null ? new Shell () : browser.getShell ();", "+\t\tPromptDialog dialog = new PromptDialog (shell);", "+\t\tint[] check = new int[1], result = new int[1];", "+\t\tif (aCheckState != 0) XPCOM.memmove (check, aCheckState, 4);\t/* PRBool */", "+\t\tdialog.promptUsernameAndPassword (titleLabel, textLabel, checkLabel, userLabel, passLabel, check, result);", "+\t", "+\t\tXPCOM.memmove (_retval, result, 4);\t/* PRBool */", "+\t\tif (result[0] == 1) {", "+\t\t\t/* User selected OK */", "+\t\t\tuser = userLabel[0];", "+\t\t\tpassword = passLabel[0];", "+\t\t}", "+\t\tif (aCheckState != 0) XPCOM.memmove (aCheckState, check, 4); /* PRBool */", "+\t}", "+", "+\tif (user != null) {", "-\t\t* User selected OK. User name and password are returned as PRUnichar values. Any default", "+\t\t* User name and password are returned as PRUnichar values. Any default", "-\t\tint cnt, size;", "-\t\tint /*long*/ ptr;", "-\t\tchar[] buffer;", "-\t\tint /*long*/[] result2 = new int /*long*/[1];", "-\t\tif (userLabel[0] != null) {", "-\t\t\tcnt = userLabel[0].length ();", "-\t\t\tbuffer = new char[cnt + 1];", "-\t\t\tuserLabel[0].getChars (0, cnt, buffer, 0);", "-\t\t\tsize = buffer.length * 2;", "-\t\t\tptr = C.malloc (size);", "-\t\t\tXPCOM.memmove (ptr, buffer, size);", "-\t\t\tXPCOM.memmove (aUsername, new int /*long*/[] {ptr}, C.PTR_SIZEOF);", "+\t\tint /*long*/[] userAddr = new int /*long*/[1];", "+\t\tXPCOM.memmove (userAddr, aUsername, C.PTR_SIZEOF);", "+\t\tint /*long*/[] passAddr = new int /*long*/[1];", "+\t\tXPCOM.memmove (passAddr, aPassword, C.PTR_SIZEOF);", "-\t\t\tif (userAddr[0] != 0) {", "-\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result2);", "-\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "-\t\t\t\tif (result2[0] == 0) SWT.error (XPCOM.NS_NOINTERFACE);", "-\t\t\t", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result2[0]);", "-\t\t\t\tresult2[0] = 0;", "-\t\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "-\t\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result2);", "-\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "-\t\t\t\tif (result[0] == 0) SWT.error (XPCOM.NS_NOINTERFACE);\t\t", "-\t\t\t\tserviceManager.Release ();", "-\t\t\t\t", "-\t\t\t\tnsIMemory memory = new nsIMemory (result2[0]);", "-\t\t\t\tresult2[0] = 0;", "-\t\t\t\tmemory.Free (userAddr[0]);", "-\t\t\t\tmemory.Release ();", "-\t\t\t}", "-\t\t}", "-\t\tif (passLabel[0] != null) {", "-\t\t\tcnt = passLabel[0].length ();", "-\t\t\tbuffer = new char[cnt + 1];", "-\t\t\tpassLabel[0].getChars (0, cnt, buffer, 0);", "-\t\t\tsize = buffer.length * 2;", "-\t\t\tptr = C.malloc (size);", "-\t\t\tXPCOM.memmove (ptr, buffer, size);", "-\t\t\tXPCOM.memmove (aPassword, new int /*long*/[] {ptr}, C.PTR_SIZEOF);", "-\t\t\t", "-\t\t\tif (passAddr[0] != 0) {", "-\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result2);", "-\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "-\t\t\t\tif (result2[0] == 0) SWT.error (XPCOM.NS_NOINTERFACE);", "+\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\tint rc = XPCOM.NS_GetServiceManager (result);", "+\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\t\tif (result[0] == 0) SWT.error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result2[0]);", "-\t\t\t\tresult2[0] = 0;", "-\t\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "-\t\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result2);", "-\t\t\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "-\t\t\t\tif (result2[0] == 0) SWT.error (XPCOM.NS_NOINTERFACE);\t\t", "-\t\t\t\tserviceManager.Release ();", "+\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\t\tresult[0] = 0;", "+\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) SWT.error (rc);", "+\t\tif (result[0] == 0) SWT.error (XPCOM.NS_NOINTERFACE);\t\t", "+\t\tserviceManager.Release ();", "-\t\t\t\tnsIMemory memory = new nsIMemory (result2[0]);", "-\t\t\t\tresult2[0] = 0;", "-\t\t\t\tmemory.Free (passAddr[0]);", "-\t\t\t\tmemory.Release ();", "-\t\t\t}", "-\t\t}", "+\t\tnsIMemory memory = new nsIMemory (result[0]);", "+\t\tresult[0] = 0;", "+\t\tif (userAddr[0] != 0) memory.Free (userAddr[0]);", "+\t\tif (passAddr[0] != 0) memory.Free (passAddr[0]);", "+\t\tmemory.Release ();", "+", "+\t\t/* write the name and password values */", "+", "+\t\tint cnt = user.length ();", "+\t\tchar[] buffer = new char[cnt + 1];", "+\t\tuser.getChars (0, cnt, buffer, 0);", "+\t\tint size = buffer.length * 2;", "+\t\tint /*long*/ ptr = C.malloc (size);", "+\t\tXPCOM.memmove (ptr, buffer, size);", "+\t\tXPCOM.memmove (aUsername, new int /*long*/[] {ptr}, C.PTR_SIZEOF);", "+", "+\t\tcnt = password.length ();", "+\t\tbuffer = new char[cnt + 1];", "+\t\tpassword.getChars (0, cnt, buffer, 0);", "+\t\tsize = buffer.length * 2;", "+\t\tptr = C.malloc (size);", "+\t\tXPCOM.memmove (ptr, buffer, size);", "+\t\tXPCOM.memmove (aPassword, new int /*long*/[] {ptr}, C.PTR_SIZEOF);", "-\tif (aCheckState != 0) XPCOM.memmove (aCheckState, check, 4); /* PRBool */", "+"]}], "num": 51433}
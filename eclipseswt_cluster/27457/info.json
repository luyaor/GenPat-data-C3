{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2d09b9168ad26732c1f0df3128558371", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab46343a7409207bc6fc07893a2688c2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "1c2608c7c122163422caeb08f25117765f51b74b", "commitAfterChange": "6fdc774817846762c54a0f265f61b4cf3ae1e534", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["+\t\t\t\t\t\tnewEvent.display = getDisplay();", "+\t\t\t\t\t\tnewEvent.widget = Browser.this;", "+\t\t\t\tcase NewWindow2 : {", "+\t\t\t\t\tNewWindowEvent newEvent = new NewWindowEvent(Browser.this);", "+\t\t\t\t\tnewEvent.display = getDisplay();", "+\t\t\t\t\tnewEvent.widget = Browser.this;", "+\t\t\t\t\tfor (int i = 0; i < newWindowListeners.length; i++)", "+\t\t\t\t\t\tnewWindowListeners[i].newWindow(newEvent);", "+\t\t\t\t\tBrowser browser = newEvent.browser;", "+\t\t\t\t\tboolean doit = browser != null && !browser.isDisposed();", "+\t\t\t\t\tif (doit) {", "+\t\t\t\t\t\tVariant variant = new Variant(browser.auto);", "+\t\t\t\t\t\tIDispatch iDispatch = variant.getDispatch();", "+\t\t\t\t\t\tvariant.dispose();", "+\t\t\t\t\t\tVariant ppDisp = event.arguments[0];", "+\t\t\t\t\t\tint byref = ppDisp.getByRef();", "+\t\t\t\t\t\tif (byref != 0) COM.MoveMemory(byref, new int[] {iDispatch.getAddress()}, 4);", "+\t\t\t\t\t\tiDispatch.Release();", "+\t\t\t\t\t}", "+\t\t\t\t\tVariant cancel = event.arguments[1];", "+\t\t\t\t\tint pCancel = cancel.getByRef();", "+\t\t\t\t\tCOM.MoveMemory(pCancel, new short[]{doit ? COM.VARIANT_FALSE : COM.VARIANT_TRUE}, 2);", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tcase OnVisible : {", "+\t\t\t\t\tVariant arg1 = event.arguments[0];", "+\t\t\t\t\tboolean visible = arg1.getBoolean();", "+\t\t\t\t\tVisibilityEvent newEvent = new VisibilityEvent(Browser.this);", "+\t\t\t\t\tnewEvent.display = getDisplay();", "+\t\t\t\t\tnewEvent.widget = Browser.this;", "+\t\t\t\t\tif (visible) {", "+\t\t\t\t\t\tfor (int i = 0; i < visibilityListeners.length; i++)", "+\t\t\t\t\t\t\tvisibilityListeners[i].show(newEvent);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tfor (int i = 0; i < visibilityListeners.length; i++)", "+\t\t\t\t\t\t\tvisibilityListeners[i].hide(newEvent);", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\t\tnewEvent.display = getDisplay();", "+\t\t\t\t\tnewEvent.widget = Browser.this;", "+\t\t\t\t\t\tnewEvent.display = getDisplay();", "+\t\t\t\t\t\tnewEvent.widget = Browser.this;", "+\tsite.addEventListener(NewWindow2, listener);", "+\tsite.addEventListener(OnVisible, listener);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38d41ee24e7dc13158767a2be3a2925d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "c553c5dad3521887e286914e7d1312236384e990", "commitAfterChange": "d9acb193934b0049b862cb39fedb7d8d85ef0846", "methodNumberBeforeChange": 137, "methodNumberAfterChange": 137, "signatureBeforeChange": "  void updateOrientation ()", "signatureAfterChange": "  void updateOrientation ()", "diff": ["+\tif (imageList != null) {", "+\t\tPoint size = imageList.getImageSize ();", "+\t\tdisplay.releaseImageList (imageList);", "+\t\timageList = display.getImageList (style & SWT.RIGHT_TO_LEFT, size.x, size.y);", "+\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\tTreeItem item = items[i];", "+\t\t\tif (item != null) {", "+\t\t\t\tImage image = item.image;", "+\t\t\t\tif (image != null) {", "+\t\t\t\t\tint index = imageList.indexOf (image);", "+\t\t\t\t\tif (index == -1) imageList.add (image);\t", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tint /*long*/ hImageList = imageList.getHandle ();", "+\t\tOS.SendMessage (handle, OS.TVM_SETIMAGELIST, OS.TVSIL_NORMAL, hImageList);", "+\t}", "+\tif (hwndHeader != 0) {", "+\t\tif (headerImageList != null) {", "+\t\t\tPoint size = headerImageList.getImageSize ();", "+\t\t\tdisplay.releaseImageList (headerImageList);", "+\t\t\theaderImageList = display.getImageList (style & SWT.RIGHT_TO_LEFT, size.x, size.y);\t", "+\t\t\tif (columns != null) {", "+\t\t\t\tfor (int i = 0; i < columns.length; i++) {", "+\t\t\t\t\tTreeColumn column = columns[i];", "+\t\t\t\t\tif (column != null) {", "+\t\t\t\t\t\tImage image = column.image;", "+\t\t\t\t\t\tif (image != null) {", "+\t\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "+\t\t\t\t\t\t\thdItem.mask = OS.HDI_FORMAT;", "+\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, i, hdItem);", "+\t\t\t\t\t\t\tif ((hdItem.fmt & OS.HDF_IMAGE)!= 0) {      ", "+\t\t\t\t\t\t\t\tint index = headerImageList.indexOf (image);", "+\t\t\t\t\t\t\t\tif (index == -1) index = headerImageList.add (image);\t", "+\t\t\t\t\t\t\t\thdItem.mask = OS.HDI_IMAGE;", "+\t\t\t\t\t\t\t\thdItem.iImage = index;", "+\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_SETITEM, i, hdItem);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}\t", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tint /*long*/ hImageListHeader = headerImageList.getHandle ();", "+\t\t\tOS.SendMessage (hwndHeader, OS.HDM_SETIMAGELIST, 0, hImageListHeader);", "+\t\t}\t", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c3e69793ac866e848ca19daba4463a8d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "56d7296ca97caab4d55a03fef16b1386812f14a1", "commitAfterChange": "0a8649d4c4b3f13145067478ae1f23acfb944b65", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create(Composite parent, int style)", "signatureAfterChange": "  public void create(Composite parent, int style)", "diff": ["-\t", "+", "+\tif (!Initialized) {", "+\t\tInitialized = true;", "+\t\tint version = 0;", "+\t\tString versionProperty = System.getProperty(PROPERTY_IEVERSION);", "+\t\tif (versionProperty != null) {", "+\t\t\tif (versionProperty.equalsIgnoreCase(VALUE_DEFAULT)) {", "+\t\t\t\tversion = -1;", "+\t\t\t} else {", "+\t\t\t\ttry {", "+\t\t\t\t\tversion = Integer.valueOf(versionProperty).intValue();", "+\t\t\t\t} catch (NumberFormatException e) {", "+\t\t\t\t\t/* ", "+\t\t\t\t\t * An invalid value was specified for the IEVersion java property.  Ignore it", "+\t\t\t\t\t * and continue with the usual steps for determining the version to specify.", "+\t\t\t\t\t */", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (version == 0) {", "+\t\t\tif (IEVersion != 0) {", "+\t\t\t\tversion = IEVersion * 1000;", "+\t\t\t} else {", "+\t\t\t\tversion = DEFAULT_IE_VERSION;", "+\t\t\t}", "+\t\t}", "+", "+\t\tif (version != -1) {", "+\t\t\tint /*long*/[] key = new int /*long*/[1];", "+\t\t\tfinal TCHAR subkey = new TCHAR(0, \"Software\\\\Microsoft\\\\Internet Explorer\\\\Main\\\\FeatureControl\\\\FEATURE_BROWSER_EMULATION\", true);\t//$NON-NLS-1$", "+\t\t\tif (OS.RegCreateKeyEx(OS.HKEY_CURRENT_USER, subkey, 0, null, OS.REG_OPTION_VOLATILE, OS.KEY_WRITE | OS.KEY_QUERY_VALUE, 0, key, null) == 0) {", "+\t\t\t\tTCHAR lpszFile = new TCHAR(0, OS.MAX_PATH);", "+\t\t\t\tOS.GetModuleFileName(0, lpszFile, lpszFile.length());", "+\t\t\t\tString path = lpszFile.toString(0, lpszFile.strlen());", "+\t\t\t\tint index = path.lastIndexOf(SEPARATOR_OS);", "+\t\t\t\tString executable = index != -1 ? path.substring(index + 1) : path;", "+\t\t\t\tfinal TCHAR lpValueName = new TCHAR(0, executable, true);", "+\t\t\t\tif (OS.RegQueryValueEx(key[0], lpValueName, 0, null, (int[])null, null) == OS.ERROR_FILE_NOT_FOUND) {", "+\t\t\t\t\tif (OS.RegSetValueEx(key[0], lpValueName, 0, OS.REG_DWORD, new int[] {version}, 4) == 0) {", "+\t\t\t\t\t\tparent.getDisplay().addListener(SWT.Dispose, new Listener() {\t\t\t", "+\t\t\t\t\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\t\t\t\t\tint /*long*/[] key = new int /*long*/[1];", "+\t\t\t\t\t\t\t\tif (OS.RegOpenKeyEx(OS.HKEY_CURRENT_USER, subkey, 0, OS.KEY_WRITE, key) == 0) {", "+\t\t\t\t\t\t\t\t\tOS.RegDeleteValue(key[0], lpValueName);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t});", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tOS.RegCloseKey(key[0]);", "+\t\t\t}", "+\t\t}", "+\t}", "+"]}], "num": 27457}
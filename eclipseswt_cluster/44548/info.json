{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ace182c1254d8e22fc9d580a2483cf26", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46cae9e54e4f925b70b1609a1adc9589", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "f4bb8ef7d86d4b06d34d232ac624ae216be4183a", "commitAfterChange": "358e077459326bfde3a675b949aa20349d21bc3d", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 113, "signatureBeforeChange": "  void onTextKeyDown(Event event)", "signatureAfterChange": "  @Override long gtk_key_press_event (long widget, long event)", "diff": ["-void onTextKeyDown(Event event) {", "-\tif ((style & SWT.DROP_DOWN) != 0 && (event.stateMask & SWT.ALT) != 0 && (event.keyCode == SWT.ARROW_UP || event.keyCode == SWT.ARROW_DOWN)) {", "-\t\tboolean dropped = isDropped ();", "-\t\tif (!dropped) {", "-\t\t\tpopupCalendar.calendarDisplayed = true;", "-\t\t\tsetFocus ();", "-\t\t}", "-\t\tdropDownCalendar(!dropped);", "-\t\treturn;", "-\tint fieldName;", "-\tswitch (event.keyCode) {", "-\t\tcase SWT.ARROW_RIGHT:", "-\t\tcase SWT.KEYPAD_DIVIDE:", "-\t\t\t/* A right arrow or a valid separator navigates to the field on the right, with wraping */", "-\t\t\tselectField((currentField + 1) % fieldCount);", "-\t\t\tsendEvent(SWT.Traverse);", "-\t\t\tbreak;", "-\t\tcase SWT.ARROW_LEFT:", "-\t\t\t/* Navigate to the field on the left, with wrapping */", "-\t\t\tint index = currentField - 1;", "-\t\t\tselectField(index < 0 ? fieldCount - 1 : index);", "-\t\t\tsendEvent(SWT.Traverse);", "-\t\t\tbreak;", "-\t\tcase SWT.ARROW_UP:", "-\t\tcase SWT.KEYPAD_ADD:", "-\t\t\t/* Set the value of the current field to value + 1, with wrapping */", "-\t\t\tcommitCurrentField();", "-\t\t\tincrementField(+1);", "-\t\t\tbreak;", "-\t\tcase SWT.ARROW_DOWN:", "-\t\tcase SWT.KEYPAD_SUBTRACT:", "-\t\t\t/* Set the value of the current field to value - 1, with wrapping */", "-\t\t\tcommitCurrentField();", "-\t\t\tincrementField(-1);", "-\t\t\tbreak;", "-\t\tcase SWT.HOME:", "-\t\t\t/* Set the value of the current field to its minimum */", "-\t\t\tfieldName = fieldNames[currentField];", "-\t\t\tsetTextField(fieldName, calendar.getActualMinimum(fieldName), true, true);", "-\t\t\tbreak;", "-\t\tcase SWT.END:", "-\t\t\t/* Set the value of the current field to its maximum */", "-\t\t\tfieldName = fieldNames[currentField];", "-\t\t\tsetTextField(fieldName, calendar.getActualMaximum(fieldName), true, true);", "-\t\t\tbreak;", "-\t\tdefault:", "-\t\t\tswitch (event.character) {", "-\t\t\t\tcase '/':", "-\t\t\t\tcase ':':", "-\t\t\t\tcase '-':", "-\t\t\t\tcase '.':", "-\t\t\t\t\t/* A valid separator navigates to the field on the right, with wraping */", "-\t\t\t\t\tselectField((currentField + 1) % fieldCount);", "-\t\t\t\t\tsendEvent(SWT.Traverse);", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase SWT.CR:", "-\t\t\t\t\t/* Enter causes default selection */", "-\t\t\t\t\tpostEvent (SWT.DefaultSelection);", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t}", "-}", "+", "+@Override", "+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {", "+\tint fieldName;", "+\tif (!isReadOnly () && (isTime () || isDate ())) {", "+\t\tGdkEventKey keyEvent = new GdkEventKey ();", "+\t\tOS.memmove (keyEvent, event, GdkEventKey.sizeof);", "+\t\tint key = keyEvent.keyval;", "+\t\tswitch (key) {", "+\t\t\tcase OS.GDK_Up:", "+\t\t\tcase OS.GDK_KP_Up:", "+\t\t\t\t\tincrementField (+1);", "+\t\t\t\t\tcommitCurrentField ();", "+\t\t\t\tbreak;", "+\t\t\tcase OS.GDK_Down:", "+\t\t\tcase OS.GDK_KP_Down:", "+\t\t\t\t\tincrementField (-1);", "+\t\t\t\t\tcommitCurrentField ();", "+\t\t\t\tbreak;", "+\t\t\tcase OS.GDK_Right:", "+\t\t\tcase OS.GDK_KP_Right:", "+\t\t\t\tselectField ((currentField + 1) % fieldCount);", "+\t\t\t\tsendEvent (SWT.Traverse);", "+\t\t\t\tbreak;", "+\t\t\tcase OS.GDK_Left:", "+\t\t\tcase OS.GDK_KP_Left:", "+\t\t\t\tint index = currentField - 1;", "+\t\t\t\tselectField (index < 0 ? fieldCount - 1 : index);", "+\t\t\t\tsendEvent (SWT.Traverse);", "+\t\t\t\tbreak;", "+\t\t\tcase OS.GDK_Home:", "+\t\t\tcase OS.GDK_KP_Home:", "+\t\t\t\t/* Set the value of the current field to its minimum */", "+\t\t\t\tfieldName = fieldNames[currentField];", "+\t\t\t\tsetTextField (fieldName, calendar.getActualMinimum (fieldName), true, true);", "+\t\t\t\tbreak;", "+\t\t\tcase OS.GDK_End:", "+\t\t\tcase OS.GDK_KP_End:", "+\t\t\t\t/* Set the value of the current field to its maximum */", "+\t\t\t\tfieldName = fieldNames[currentField];", "+\t\t\t\tsetTextField (fieldName, calendar.getActualMaximum (fieldName), true, true);", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tonNumberKeyInput (key);", "+\t\t}", "+\t}", "+\treturn 1;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1fe11184a014229e77c3c5f871505347", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "de1ef9e5dd8e2f657b19ac5e5eaa6cbf2017d8bb", "commitAfterChange": "bcac6ad70ee319247deb043444a858ffd48b487d", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "  void onTextKeyDown(Event event)", "signatureAfterChange": "  long gtk_key_press_event (long widget, long event)", "diff": ["-", "-void onTextKeyDown(Event event) {", "-\tif ((style & SWT.DROP_DOWN) != 0 && (event.stateMask & SWT.ALT) != 0 && (event.keyCode == SWT.ARROW_UP || event.keyCode == SWT.ARROW_DOWN)) {", "-\t\tboolean dropped = isDropped ();", "-\t\tif (!dropped) {", "-\t\t\tpopupCalendar.calendarDisplayed = true;", "-\t\t\tsetFocus ();", "-\t\t}", "-\t\tdropDownCalendar(!dropped);", "-\t\treturn;", "-\t}", "-\tint fieldName;", "-\tswitch (event.keyCode) {", "-\t\tcase SWT.ARROW_RIGHT:", "-\t\tcase SWT.KEYPAD_DIVIDE:", "-\t\t\t/* A right arrow or a valid separator navigates to the field on the right, with wraping */", "-\t\t\tselectField((currentField + 1) % fieldCount);", "-\t\t\tsendEvent(SWT.Traverse);", "-\t\t\tbreak;", "-\t\tcase SWT.ARROW_LEFT:", "-\t\t\t/* Navigate to the field on the left, with wrapping */", "-\t\t\tint index = currentField - 1;", "-\t\t\tselectField(index < 0 ? fieldCount - 1 : index);", "-\t\t\tsendEvent(SWT.Traverse);", "-\t\t\tbreak;", "-\t\tcase SWT.ARROW_UP:", "-\t\tcase SWT.KEYPAD_ADD:", "-\t\t\t/* Set the value of the current field to value + 1, with wrapping */", "-\t\t\tcommitCurrentField();", "-\t\t\tincrementField(+1);", "-\t\t\tbreak;", "-\t\tcase SWT.ARROW_DOWN:", "-\t\tcase SWT.KEYPAD_SUBTRACT:", "-\t\t\t/* Set the value of the current field to value - 1, with wrapping */", "-\t\t\tcommitCurrentField();", "-\t\t\tincrementField(-1);", "-\t\t\tbreak;", "-\t\tcase SWT.HOME:", "-\t\t\t/* Set the value of the current field to its minimum */", "-\t\t\tfieldName = fieldNames[currentField];", "-\t\t\tsetTextField(fieldName, calendar.getActualMinimum(fieldName), true, true);", "-\t\t\tbreak;", "-\t\tcase SWT.END:", "-\t\t\t/* Set the value of the current field to its maximum */", "-\t\t\tfieldName = fieldNames[currentField];", "-\t\t\tsetTextField(fieldName, calendar.getActualMaximum(fieldName), true, true);", "-\t\t\tbreak;", "-\t\tdefault:", "-\t\t\tswitch (event.character) {", "-\t\t\t\tcase '/':", "-\t\t\t\tcase ':':", "-\t\t\t\tcase '-':", "-\t\t\t\tcase '.':", "-\t\t\t\t\t/* A valid separator navigates to the field on the right, with wraping */", "-\t\t\t\t\tselectField((currentField + 1) % fieldCount);", "-\t\t\t\t\tsendEvent(SWT.Traverse);", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase SWT.CR:", "-\t\t\t\t\t/* Enter causes default selection */", "-\t\t\t\t\tpostEvent (SWT.DefaultSelection);", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t}", "-}", "+", "+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {", "+\tlong /*int*/ result = super.gtk_key_press_event (widget, event);", "+\tint fieldName;", "+\tif ((style & SWT.READ_ONLY) == 0 && (style & SWT.CALENDAR) == 0) {", "+\t\tGdkEventKey keyEvent = new GdkEventKey ();", "+\t\tOS.memmove (keyEvent, event, GdkEventKey.sizeof);", "+\t\tint key = keyEvent.keyval;", "+\t\tswitch (key) {", "+\t\t\tcase OS.GDK_Up:", "+\t\t\t\t/* As drop_down  cannot be hooked to gtk_output, it is hooked to gtk_key_press. ", "+\t\t\t\t   Only drop_down option should be hooked to keys, thus spinner is not called twice", "+\t\t\t\t   on key_press and on gtk_output*/", "+\t\t\t\tif((style & SWT.DROP_DOWN) != 0) {", "+\t\t\t\t\tincrementField(+1);", "+\t\t\t\t\tcommitCurrentField();", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase OS.GDK_Down:", "+\t\t\t\t/* As drop_down  cannot be hooked to gtk_output, it is hooked to gtk_key_press. ", "+\t\t\t\t   Only drop_down should be hooked to keys, thus when spinner is used up is not called twice", "+\t\t\t\t   on key_press and on gtk_output*/", "+\t\t\t\tif((style & SWT.DROP_DOWN) != 0) {", "+\t\t\t\t\tincrementField(-1);", "+\t\t\t\t\tcommitCurrentField();", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\tcase OS.GDK_Right:", "+\t\t\t\tselectField((currentField + 1) % fieldCount);", "+\t\t\t\tsendEvent(SWT.Traverse);", "+\t\t\t\tbreak;", "+\t\t\tcase OS.GDK_Left:", "+\t\t\t\tint index = currentField - 1;", "+\t\t\t\tselectField(index < 0 ? fieldCount - 1 : index);", "+\t\t\t\tsendEvent(SWT.Traverse);", "+\t\t\t\tbreak;", "+\t\t\tcase OS.GDK_Home:", "+\t\t\t\t/* Set the value of the current field to its minimum */", "+\t\t\t\tfieldName = fieldNames[currentField];", "+\t\t\t\tsetTextField(fieldName, calendar.getActualMinimum(fieldName), true, true);", "+\t\t\t\tbreak;", "+\t\t\tcase OS.GDK_End:", "+\t\t\t\t/* Set the value of the current field to its maximum */", "+\t\t\t\tfieldName = fieldNames[currentField];", "+\t\t\t\tsetTextField(fieldName, calendar.getActualMaximum(fieldName), true, true);", "+\t\t\t\tbreak;", "+\t\t\tdefault:", "+\t\t\t\tif (!onTextVerify(key))", "+\t\t\t\t\treturn 1;", "+\t\t\t\t\t", "+\t\t}", "+\t}\t", "+\treturn result;", "+}"]}], "num": 44548}
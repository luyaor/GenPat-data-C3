{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "95fab97158480409e083f4f22b3dae2a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c84ae4ebfcea578b3267d0affaad22d3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "ed30b41a9f49fdd9292a9997223e42cf5d5f4c63", "commitAfterChange": "3f829157e84e6f42e86ed587cb5458d2e969dac6", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 67, "signatureBeforeChange": " void manageChildren ()", "signatureAfterChange": " void manageChildren ()", "diff": ["-\t/*", "-\t* Feature in Motif.  When a widget is managed and an", "-\t* ancestor in the widget hierarchy has focus, Motif", "-\t* assigns focus to another widget in the shell.  This", "-\t* happens because Motif does not expect a non-leaf", "-\t* widget to have the focus.  The fix is to save the", "-\t* current value of XmNtraversalOn, set the new value", "-\t* to false, then manage the widget and restore the", "-\t* value.  This relies on the fact that Motif will", "-\t* not reassign focus when the new widget is not", "-\t* traversable.", "-\t* ", "-\t* NOTE: This code currently does not work when a", "-\t* sibling will take focus.", "-\t*/", "-\tint topHandle = topHandle ();", "-\tint [] argList1 = {OS.XmNtraversalOn, 0};", "-\tOS.XtGetValues (topHandle, argList1, argList1.length / 2);", "-\tif (argList1 [1] != 0) {", "-\t\tint [] argList2 = {OS.XmNtraversalOn, 0};", "-\t\tOS.XtSetValues (topHandle, argList2, argList2.length / 2);", "-\t}", "-\tif (argList1 [1] != 0) {", "-\t\tOS.XtSetValues (topHandle, argList1, argList1.length / 2);", "-\t}", "-\toverrideTranslations ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3254d8d39c6fee34961622791bc2a09", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "71383ddf70997eb356fc8596e615d7524d8c3273", "commitAfterChange": "a6baca0c93ee7535e1500c50336143cc4b7239f0", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 34, "signatureBeforeChange": "\r \r LRESULT WM_CHAR (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_GETDLGCODE (int wParam, int lParam)", "diff": ["+LRESULT WM_GETDLGCODE (int wParam, int lParam) {\r", "+\tLRESULT result = super.WM_GETDLGCODE (wParam, lParam);\r", "+\t/*\r", "+\t* Return DLGC_BUTTON so that mnemonics will be\r", "+\t* processed without needing to press the ALT key\r", "+\t* when the widget has focus.\r", "+\t*/\r", "+\tif (result != null) return result;\r", "+\treturn new LRESULT (OS.DLGC_BUTTON);\r", "+}\r", "-\r", "-LRESULT WM_CHAR (int wParam, int lParam) {\r", "-\tLRESULT result = super.WM_CHAR (wParam, lParam);\r", "-\tif (result != null) return result;\r", "-\tint [] id = new int [1];\r", "-\tif (OS.SendMessage (handle, OS.TB_MAPACCELERATOR, wParam, id) != 0) {\r", "-\t\tint index = OS.SendMessage (handle, OS.TB_COMMANDTOINDEX, id [0], 0);\r", "-\t\tif (index != -1) {\r", "-\t\t\tOS.SendMessage (handle, OS.TB_SETHOTITEM, index, 0);\r", "-\t\t\titems [id [0]].click (false);\r", "-\t\t\treturn LRESULT.ZERO;\r", "-\t\t}\r", "-\t}\r", "-\treturn result;\r"]}], "num": 44146}
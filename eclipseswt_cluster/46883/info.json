{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45fbb2e2738cba7d1191626b3f868160", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d711a56f9395c708b9e9fc7068b33b4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "732e95305dc1c5a5bb68b4750b592951f4db4383", "commitAfterChange": "4f80632d3c9f0f3b61f05a10f8211568274c96c0", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "\r void setKeyState (Event event, XKeyEvent xEvent)", "signatureAfterChange": "\r void setKeyState (Event event, XKeyEvent xEvent)", "diff": ["-\t\t* for 7-bit ASCII keysym, ignoring the valid control character\r", "-\t\t* range, and use the keysym value as the character.\r", "+\t\t* for 7-bit ASCII keysym values that fall outside of the\r", "+\t\t* the valid control character range and use the keysym value\r", "+\t\t* as the character, not the incorrect value that XLookupString()\r", "+\t\t* returns.  Even though lower case values are not strictly\r", "+\t\t* valid control characters, they are included in the range.\r", "-\t\t\tif (0 <= keysym [0] && keysym [0] <= 0x7F) {\r", "-\t\t\t\tif (!(64 <= keysym [0] && keysym [0] <= 95)) {\r", "-\t\t\t\t\tbuffer [0] = (byte) keysym [0];\r", "+\t\t\tint key = keysym [0];\r", "+\t\t\tif (0 <= key && key <= 0x7F) {\r", "+\t\t\t\tif ('a' <= key && key <= 'z') {\r", "+\t\t\t\t\tkey -= 'a' - 'A';\r", "+\t\t\t\t}\r", "+\t\t\t\tif (!(64 <= key && key <= 95)) {\r", "+\t\t\t\t\tbuffer [0] = (byte) key;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73095aa0bd8febaed8a57665f1a8b1c0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "0d80efe32817c2ef97e0f512adc1d82ff755eb3a", "commitAfterChange": "a854bd55744bda8f116fd9fe464ec0f994871e53", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "\r void setKeyState (Event event, XKeyEvent xEvent)", "signatureAfterChange": "\r void setKeyState (Event event, XKeyEvent xEvent)", "diff": ["+\t\t\r", "+\t\t\r", "+\t\t/*\r", "+\t\t* Feature in MOTIF. For some reason, XLookupString() fails \r", "+\t\t* to translate both the keysym and the character when the\r", "+\t\t* control key is down.  For example, Ctrl+2 has the correct\r", "+\t\t* keysym value (50) but no character value, while Ctrl+/ has\r", "+\t\t* the keysym value (2F) but an invalid character value\r", "+\t\t* (1F).  It seems that Motif is applying the algorithm to\r", "+\t\t* convert a character to a control character for characters\r", "+\t\t* that are not valid control characters.  The fix is to test\r", "+\t\t* for 7-bit ASCII keysym, ignoring the valid control character\r", "+\t\t* range, and use the keysym value as the character.\r", "+\t\t* \r", "+\t\t* Some other cases include Ctrl+3..Ctr+8, Ctrl+[.\r", "+\t\t*/\r", "+\t\tif ((xEvent.state & OS.ControlMask) != 0) {\r", "+\t\t\tif (0 <= keysym [0] && keysym [0] <= 0x7F) {\r", "+\t\t\t\tif (!(64 <= keysym [0] && keysym [0] <= 95)) {\r", "+\t\t\t\t\tbuffer [0] = (byte) keysym [0];\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\t\r", "+\t\t/* Fill in the event keyCode or character */\r"]}], "num": 46883}
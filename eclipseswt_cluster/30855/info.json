{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70cef58e34b11e20e47ae34262ca68b6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "083786e7f34d42533f5bfcef3b3d169a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "83784a0bd43bf551a0a4fb21e5409eeadecd384d", "commitAfterChange": "9a54c1aa04b815cd59a20141bb2dcedb14acb097", "methodNumberBeforeChange": 179, "methodNumberAfterChange": 185, "signatureBeforeChange": "  int NotifyCertProblem (int socketInfo, int status, int targetSite, int _suppressError)", "signatureAfterChange": "  int NotifyCertProblem (int socketInfo, int status, int targetSite, int _suppressError)", "diff": ["-\t\t\tif (!url.equals (lastNavigateURL)) return;\t/* user has navigated elsewhere */", "-", "-\t\t\tString message = Compatibility.getMessage (\"SWT_InvalidCert_Message\", new String[] {urlPort}); //$NON-NLS-1$", "-\t\t\tif (new PromptDialog (browser.getShell ()).invalidCert (browser, message, finalProblems, cert)) {", "-\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\t", "-\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_CERTOVERRIDE_CONTRACTID, true);", "-\t\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsICertOverrideService.NS_ICERTOVERRIDESERVICE_IID, result);", "-\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\tserviceManager.Release ();", "-\t\t", "-\t\t\t\tnsICertOverrideService overrideService = new nsICertOverrideService (result[0]);", "-\t\t\t\tresult[0] = 0;", "-\t\t\t\tbyte[] hostBytes = MozillaDelegate.wcsToMbcs (null, host, false);", "-\t\t\t\tint /*long*/ hostString = XPCOM.nsEmbedCString_new (hostBytes, hostBytes.length);", "-\t\t\t\trc = overrideService.RememberValidityOverride (hostString, port, cert.getAddress (), finalFlags, 1);", "-\t\t\t\tbrowser.setUrl (url);", "-\t\t\t\tXPCOM.nsEmbedCString_delete (hostString);", "-\t\t\t\toverrideService.Release ();", "+\t\t\tif (url.equals (lastNavigateURL)) {", "+\t\t\t\tString message = Compatibility.getMessage (\"SWT_InvalidCert_Message\", new String[] {urlPort}); //$NON-NLS-1$", "+\t\t\t\tif (new PromptDialog (browser.getShell ()).invalidCert (browser, message, finalProblems, cert)) {", "+\t\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\t\t", "+\t\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\t\t\t\t\tresult[0] = 0;", "+\t\t\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_CERTOVERRIDE_CONTRACTID, true);", "+\t\t\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsICertOverrideService.NS_ICERTOVERRIDESERVICE_IID, result);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\t\t\t\tserviceManager.Release ();", "+\t\t\t", "+\t\t\t\t\tnsICertOverrideService overrideService = new nsICertOverrideService (result[0]);", "+\t\t\t\t\tresult[0] = 0;", "+\t\t\t\t\tbyte[] hostBytes = MozillaDelegate.wcsToMbcs (null, host, false);", "+\t\t\t\t\tint /*long*/ hostString = XPCOM.nsEmbedCString_new (hostBytes, hostBytes.length);", "+\t\t\t\t\trc = overrideService.RememberValidityOverride (hostString, port, cert.getAddress (), finalFlags, 1);", "+\t\t\t\t\tnavigate (badCertRequest);", "+\t\t\t\t\tXPCOM.nsEmbedCString_delete (hostString);", "+\t\t\t\t\toverrideService.Release ();", "+\t\t\t\t}", "+\t\t\tnew nsISupports (badCertRequest).Release ();", "+\t\t\tbadCertRequest = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cfd58027c4aafee4a0f710d6da438c89", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "2c8a13d0df1694740c0af6220e23682b3ddd10de", "commitAfterChange": "056762a1d7c74e75bfac132d1e756819b6f3b39e", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": "  public boolean setUrl (String url)", "signatureAfterChange": "  public boolean setUrl (String url, String postData, String[] headers)", "diff": ["-public boolean setUrl (String url) {", "+public boolean setUrl (String url, String postData, String[] headers) {", "+\tresult[0] = 0;", "-\trc = webNavigation.LoadURI (uri, nsIWebNavigation.LOAD_FLAGS_NONE, 0, 0, 0);", "+", "+    nsIMIMEInputStream postDataStream = null;", "+    InputStream dataStream = null;", "+\tif (postData != null) {", "+    \trc = XPCOM.NS_GetComponentManager (result);", "+    \tif (rc != XPCOM.NS_OK) error (rc);", "+    \tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+    \tnsIComponentManager componentManager = new nsIComponentManager (result[0]);", "+    \tresult[0] = 0;", "+    \tbyte[] contractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MIMEINPUTSTREAM_CONTRACTID, true);", "+    \trc = componentManager.CreateInstanceByContractID (contractID, 0, nsIMIMEInputStream.NS_IMIMEINPUTSTREAM_IID, result);", "+    \tcomponentManager.Release();", "+", "+    \tif (rc == XPCOM.NS_OK && result[0] != 0) { /* nsIMIMEInputStream is not in mozilla 1.4 */", "+    \t\tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, postData, false);", "+    \t\tdataStream = new InputStream (bytes);", "+    \t\tdataStream.AddRef ();", "+    \t\tpostDataStream = new nsIMIMEInputStream (result[0]);", "+    \t\trc = postDataStream.SetData (dataStream.getAddress ());", "+    \t\tif (rc != XPCOM.NS_OK) error (rc);", "+    \t\trc = postDataStream.SetAddContentLength (1);", "+    \t\tif (rc != XPCOM.NS_OK) error (rc);", "+    \t\tbyte[] name = MozillaDelegate.wcsToMbcs (null, HEADER_CONTENTTYPE, true);", "+    \t\tbyte[] value = MozillaDelegate.wcsToMbcs (null, MIMETYPE_FORMURLENCODED, true);", "+    \t\trc = postDataStream.AddHeader (name, value);", "+    \t\tif (rc != XPCOM.NS_OK) error (rc);", "+    \t}", "+    \tresult[0] = 0;", "+\t}", "+", "+    InputStream headersStream = null;", "+    if (headers != null) {", "+\t\tStringBuffer buffer = new StringBuffer ();", "+\t\tfor (int i = 0; i < headers.length; i++) {", "+\t\t\tString current = headers[i];", "+\t\t\tint sep = current.indexOf (':');", "+\t\t\tif (sep != -1) {", "+\t\t\t\tString key = current.substring (0, sep).trim ();", "+\t\t\t\tString value = current.substring (sep + 1).trim ();", "+\t\t\t\tif (key.length () > 0 && value.length () > 0) {", "+\t\t\t\t\tbuffer.append (key);", "+\t\t\t\t\tbuffer.append (':');", "+\t\t\t\t\tbuffer.append (value);", "+\t\t\t\t\tbuffer.append (\"\\r\\n\");", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+    \tbyte[] bytes = MozillaDelegate.wcsToMbcs (null, buffer.toString (), true);", "+    \theadersStream = new InputStream (bytes);", "+    \theadersStream.AddRef ();", "+    }", "+", "+\trc = webNavigation.LoadURI (", "+\t\turi,", "+\t\tnsIWebNavigation.LOAD_FLAGS_NONE,", "+\t\t0,", "+\t\tpostDataStream == null ? 0 : postDataStream.getAddress (),", "+\t\theadersStream == null ? 0 : headersStream.getAddress ());", "+\tif (dataStream != null) dataStream.Release ();", "+\tif (headersStream != null) headersStream.Release ();"]}], "num": 30855}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1dacb50ac3154fed305671985e2b1a19", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d5568e543e4f118ff075cf7d7798a756", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void copy ()", "signatureAfterChange": "  public void copy ()", "diff": ["- */", "+", "-\tselectionToClipboard();", "-}", "+\tint [] str = new int [1];", "+\tshort start, end;", "+\t\t// NEEDS WORK - getting whole text, not just selection", "+\t\tint index = OS.GetControlValue (handle);", "+\t\tif (OS.CopyMenuItemTextAsCFString(menuHandle, (short)index, str) != OS.noErr) return;", "+\t\tstart = 0; end = (short)OS.CFStringGetLength (str [0]);", "+\t\tif (start >= end) {", "+\t\t\tOS.CFRelease (str [0]);", "+\t\t\treturn;", "+\t\t}", "+\t\tshort [] s = new short [2];", "+\t\tOS.GetControlData (handle, (short)OS.kHIComboBoxEditTextPart, OS.kControlEditTextSelectionTag, 4, s, null);", "+\t\tif (s [0] >= s [1]) return;", "+\t\tstart = s [0]; end = s [1];", "+\t\tif (OS.GetControlData (handle, (short)OS.kHIComboBoxEditTextPart, OS.kControlEditTextCFStringTag, 4, str, null) != OS.noErr) return;", "+\t}", "+\tCFRange range = new CFRange ();", "+\trange.location = start;", "+\trange.length = end - start;", "+\tint encoding = OS.CFStringGetSystemEncoding ();", "+\tint [] size = new int [1];", "+\tOS.CFStringGetBytes (str [0], range, encoding, (byte)'?', true, null, 0, size);", "+\tbyte [] buffer = new byte [size [0]];", "+\tOS.CFStringGetBytes (str [0], range, encoding, (byte)'?', true, buffer, size [0], size);", "+\tOS.CFRelease (str [0]);", "+\t", "+\tOS.ClearCurrentScrap();", "+\tint[] scrap = new int [1];", "+\tOS.GetCurrentScrap (scrap);", "+\tOS.PutScrapFlavor(scrap [0], OS.kScrapFlavorTypeText, 0, buffer.length, buffer);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "03700e9aec8a5c8d1a5a3be961d74603", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void cut ()", "signatureAfterChange": "  public void cut ()", "diff": ["- */", "+", "-\tselectionToClipboard();", "-\t_replaceTextSelection(\"\");", "-}", "+\tint [] str = new int [1];", "+\tshort start, end;", "+\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\t// NEEDS WORK - getting whole text, not just selection", "+\t\tint index = OS.GetControlValue (handle);", "+\t\tif (OS.CopyMenuItemTextAsCFString(menuHandle, (short)index, str) != OS.noErr) return;", "+\t\tstart = 0; end = (short)OS.CFStringGetLength (str [0]);", "+\t\tif (start >= end) {", "+\t\t\tOS.CFRelease (str [0]);", "+\t\t\treturn;", "+\t\t}", "+\t} else {", "+\t\tshort [] s = new short [2];", "+\t\tOS.GetControlData (handle, (short)OS.kHIComboBoxEditTextPart, OS.kControlEditTextSelectionTag, 4, s, null);", "+\t\tif (s [0] >= s [1]) return;", "+\t\tstart = s [0]; end = s [1];", "+\t\tif (OS.GetControlData (handle, (short)OS.kHIComboBoxEditTextPart, OS.kControlEditTextCFStringTag, 4, str, null) != OS.noErr) return;", "+\tCFRange range = new CFRange ();", "+\trange.location = start;", "+\trange.length = end - start;", "+\tint encoding = OS.CFStringGetSystemEncoding ();", "+\tint [] size = new int [1];", "+\tOS.CFStringGetBytes (str [0], range, encoding, (byte)'?', true, null, 0, size);", "+\tbyte [] buffer = new byte [size [0]];", "+\tOS.CFStringGetBytes (str [0], range, encoding, (byte)'?', true, buffer, size [0], size);", "+", "+\tOS.ClearCurrentScrap();", "+\tint[] scrap = new int [1];", "+\tOS.GetCurrentScrap (scrap);", "+\tOS.PutScrapFlavor (scrap [0], OS.kScrapFlavorTypeText, 0, buffer.length, buffer);", "+\t", "+\t// delete selection", "+\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\t// NEEDS WORK", "+\t} else {", "+\t\tbyte [] newBuffer;", "+\t\trange.location = 0;", "+\t\trange.length = start;", "+\t\tsize = new int [1];", "+\t\tOS.CFStringGetBytes (str [0], range, encoding, (byte)'?', true, null, 0, size);", "+\t\tbyte [] preBuffer = new byte [size [0]];", "+\t\tOS.CFStringGetBytes(str [0], range, encoding, (byte)'?', true, preBuffer, size [0], size);", "+\t\trange.location = end;", "+\t\trange.length = OS.CFStringGetLength (str [0]) - end;", "+\t\tsize = new int [1];", "+\t\tOS.CFStringGetBytes (str [0], range, encoding, (byte)'?', true, null, 0, size);", "+\t\tbyte [] postBuffer = new byte [size [0]];", "+\t\tOS.CFStringGetBytes (str [0], range, encoding, (byte)'?', true, postBuffer, size [0], size);", "+\t\tnewBuffer = new byte [preBuffer.length + postBuffer.length];", "+\t\tSystem.arraycopy(preBuffer, 0, newBuffer, 0, preBuffer.length);", "+\t\tSystem.arraycopy(postBuffer, 0, newBuffer, preBuffer.length, postBuffer.length);", "+\t\tint ptr = OS.CFStringCreateWithBytes (OS.kCFAllocatorDefault, newBuffer, newBuffer.length, encoding, true);", "+\t\tOS.SetControlData (handle, OS.kHIComboBoxEditTextPart, OS.kControlEditTextCFStringTag, 4, new int[] {ptr});", "+\t\tOS.CFRelease (ptr);", "+\t}", "+\t", "+\tOS.CFRelease (str [0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf1c5dc4c592630d43ace2c021aa6442", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 29, "signatureBeforeChange": " public void paste ()", "signatureAfterChange": " \t\t public void paste ()", "diff": ["- */", "+\t\t", "-\tif (menuHandle == 0) {", "-\t\tClipboard clipboard= new Clipboard(getDisplay());", "-\t\tTextTransfer textTransfer= TextTransfer.getInstance();", "-\t\tString clipBoard= (String)clipboard.getContents(textTransfer);", "-\t\tclipboard.dispose();", "-\t\t_replaceTextSelection(clipBoard);", "+\tint[] scrap = new int [1];", "+\tOS.GetCurrentScrap (scrap);", "+\tint [] size = new int [1];", "+\tif (OS.GetScrapFlavorSize (scrap [0], OS.kScrapFlavorTypeText, size) != OS.noErr || size [0] == 0) return;", "+\tbyte [] buffer = new byte[size [0]];", "+\tif (OS.GetScrapFlavorData (scrap [0], OS.kScrapFlavorTypeText, size, buffer) != OS.noErr) return;", "+\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\tString string = new String (buffer); //??", "+\t\tint index = indexOf (string);", "+\t\tif (index != -1) select(index);", "+\t} else {", "+\t\tbyte [] newBuffer;", "+\t\tint encoding = OS.CFStringGetSystemEncoding ();", "+\t\tint[] ptrOld = new int [1];", "+\t\tif (OS.GetControlData (handle, (short)OS.kHIComboBoxEditTextPart, OS.kControlEditTextCFStringTag, 4, ptrOld, null) == OS.noErr) {", "+\t\t\tshort [] s = new short [2];", "+\t\t\tOS.GetControlData (handle, (short)OS.kHIComboBoxEditTextPart, OS.kControlEditTextSelectionTag, 4, s, null);", "+\t\t\tCFRange range = new CFRange ();", "+\t\t\trange.location = 0;", "+\t\t\trange.length = s [0];", "+\t\t\tsize = new int [1];", "+\t\t\tOS.CFStringGetBytes (ptrOld [0], range, encoding, (byte)'?', true, null, 0, size);", "+\t\t\tbyte [] preBuffer = new byte [size [0]];", "+\t\t\tOS.CFStringGetBytes(ptrOld [0], range, encoding, (byte)'?', true, preBuffer, size [0], size);", "+\t\t\trange.location = s [1];", "+\t\t\trange.length = OS.CFStringGetLength (ptrOld [0]) - s [1];", "+\t\t\tsize = new int [1];", "+\t\t\tOS.CFStringGetBytes (ptrOld [0], range, encoding, (byte)'?', true, null, 0, size);", "+\t\t\tbyte [] postBuffer = new byte [size [0]];", "+\t\t\tOS.CFStringGetBytes(ptrOld [0], range, encoding, (byte)'?', true, postBuffer, size [0], size);", "+\t\t\tnewBuffer = new byte [preBuffer.length + buffer.length + postBuffer.length];", "+\t\t\tSystem.arraycopy(preBuffer, 0, newBuffer, 0, preBuffer.length);", "+\t\t\tSystem.arraycopy(buffer, 0, newBuffer, preBuffer.length, buffer.length);", "+\t\t\tSystem.arraycopy(postBuffer, 0, newBuffer, preBuffer.length + buffer.length, postBuffer.length);", "+\t\t\tOS.CFRelease (ptrOld [0]);", "+\t\t} else {", "+\t\t\tnewBuffer = buffer;", "+\t\t}", "+\t\tint ptr = OS.CFStringCreateWithBytes (OS.kCFAllocatorDefault, newBuffer, newBuffer.length, encoding, true);", "+\t\tOS.SetControlData (handle, OS.kHIComboBoxEditTextPart, OS.kControlEditTextCFStringTag, 4, new int[] {ptr});", "+\t\tOS.CFRelease (ptr);"]}], "num": 21786}
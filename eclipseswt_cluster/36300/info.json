{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6cd74ae3782bdacd6c5484bfab0ebc6f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4135be00a9ebf79fcc46a18919c41af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "03027a31c0afeb7417020be3236f5f6dcb1a04f0", "commitAfterChange": "9355cf7d15370368d311f8805b38484ac393e2c1", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 13, "signatureBeforeChange": " public boolean open ()", "signatureAfterChange": " public boolean open ()", "diff": ["+\tif (rectangles == null) return false;", "+\t", "+\t// if exactly one of UP/DOWN is specified as a style then set the cursor", "+\t// orientation accordingly (the same is done for LEFT/RIGHT styles below)", "+\tint vStyle = style & (SWT.UP | SWT.DOWN);", "+\tif (vStyle == SWT.UP || vStyle == SWT.DOWN) {", "+\t\tcursorOrientation |= vStyle;", "+\t}", "+\tint hStyle = style & (SWT.LEFT | SWT.RIGHT);", "+\tif (hStyle == SWT.LEFT || hStyle == SWT.RIGHT) {", "+\t\tcursorOrientation |= hStyle;", "+\t}", "-\t\t\t\t\tfor (int i=0; i<rectangles.length; i++) {", "-\t\t\t\t\t\trectangles [i].x += newX [0] - oldX [0];", "-\t\t\t\t\t\trectangles [i].y += newY [0] - oldY [0];", "+\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\tevent.x = newX [0];", "+\t\t\t\t\tevent.y = newY [0];", "+\t\t\t\t\tif ((style & SWT.RESIZE) != 0) {", "+\t\t\t\t\t\tresizeRectangles (newX [0] - oldX [0], newY [0] - oldY [0]);", "+\t\t\t\t\t\tsendEvent (SWT.Resize, event);", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t * The following is intentionally commented.  Since gtk does not currently", "+\t\t\t\t\t\t * support pointer warping, the resize cursor cannot be adjusted.  If this", "+\t\t\t\t\t\t * capability is added in the future then the following should be uncommented,", "+\t\t\t\t\t\t * and the #adjustResizeCursor method can be copied from another platform.", "+\t\t\t\t\t\t */", "+//\t\t\t\t\t\tPoint cursorPos = adjustResizeCursor ();", "+//\t\t\t\t\t\tnewX [0] = cursorPos.x; newY [0] = cursorPos.y;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tmoveRectangles (newX [0] - oldX [0], newY [0] - oldY [0]);", "+\t\t\t\t\t\tsendEvent (SWT.Move, event);", "-\t\t\t\t\tEvent event = new Event();", "-\t\t\t\t\tevent.x = newX[0];", "-\t\t\t\t\tevent.y = newY[0];", "-\t\t\t\t\tsendEvent (SWT.Move,event);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9d1862eb827e5cee99e1d5b2f79a3fb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "0279ac89ad933bec67322b956321e83b2a1ac93a", "commitAfterChange": "dbc3f579c8454ac59e01ac2d56752eda0d58b6cd", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "  static int checkStyle (int style)", "signatureAfterChange": "  static int checkStyle (Composite parent, int style, boolean internal)", "diff": ["-static int checkStyle (int style) {", "+static int checkStyle (Composite parent, int style, boolean internal) {", "-\treturn style & ~(SWT.H_SCROLL | SWT.V_SCROLL);", "+\tint newStyle = style & ~(SWT.H_SCROLL | SWT.V_SCROLL);", "+\t", "+\t/*", "+\t * Only internal clients can create an NSToolbar-based ToolBar.", "+\t */", "+\tif (!internal && (newStyle & SWT.SMOOTH) != 0) {", "+\t\tnewStyle &= ~SWT.SMOOTH;", "+\t}", "+\t", "+\t/*", "+\t * A unified toolbar can only be parented to a Shell, and", "+\t * there can only be one unified toolbar per shell. If neither of these", "+\t * conditions hold, turn off the SMOOTH flag.", "+\t */", "+\tif ((style & SWT.SMOOTH) != 0) {", "+\t\tif (parent instanceof Shell) {", "+\t\t\tShell s = (Shell)parent;", "+\t\t\tif (s.window.toolbar() != null) newStyle &= ~SWT.SMOOTH;", "+\t\t} else {", "+\t\t\tnewStyle &= ~SWT.SMOOTH;", "+\t\t}", "+\t}", "+\t", "+\t/*", "+\t * Unified toolbar only supports a horizontal layout, and doesn't wrap.", "+\t */", "+\tif ((newStyle & SWT.SMOOTH) != 0) {", "+\t\tnewStyle &= ~(SWT.VERTICAL | SWT.WRAP); ", "+\t\tnewStyle |= SWT.HORIZONTAL;", "+\t}", "+\t", "+\treturn newStyle;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "265c4d5db71b5a0d79256772560d699c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "0073562a14ca6d918c9fcaca498a6e957da8a673", "commitAfterChange": "77892ab4398d4200690dd45ab1bd14f928f3edb9", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 57, "signatureBeforeChange": "\r int titleHeight ()", "signatureAfterChange": "\r int trimHeight ()", "diff": ["-int titleHeight () {\r", "-\tint hasTitle = style & (SWT.MIN | SWT.MAX | SWT.TITLE | SWT.MENU);\r", "-\tif (hasTitle != 0) return display.titleHeight;\r", "+\t\tif (hasResize) {\r", "+\t\t\treturn display.topTitleResizeHeight + display.bottomTitleResizeHeight;\r", "+\t\t}\r", "+\t\tif (hasBorder) {\r", "+\t\t\treturn display.topTitleBorderHeight + display.bottomTitleBorderHeight;\r", "+\t\t}\r", "+\t\treturn display.topTitleHeight + display.bottomTitleHeight;\r", "+\tif (hasResize) {\r", "+\t\treturn display.topResizeHeight + display.bottomResizeHeight;\r", "+\t}\r", "+\tif (hasBorder) {\r", "+\t\treturn display.topBorderHeight + display.bottomBorderHeight;\r", "+\t}\r", "+\treturn 0;\r", "+}\r"]}], "num": 36300}
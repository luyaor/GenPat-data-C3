{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b3b4f5d12b1e05d074b1f707282272a5", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11d69e732b3e4c6e3c6e384d7e6882ba", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "\r public void setSelection (TreeItem [] items)", "signatureAfterChange": "\r public void setSelection (TreeItem [] items)", "diff": ["-\t/* Select/deselect the first item */\t\r", "+\t/* Select/deselect the first item */\r", "+\tint hOldItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);\r", "-\t\tint hOldItem = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);\r", "+\t\t/*\r", "+\t\t* Feature in Windows.  When the old and new focused item\r", "+\t\t* are the same, Windows does not check to make sure that\r", "+\t\t* the item is actually selected, not just focused.  The\r", "+\t\t* fix is to force the item to draw selected by setting\r", "+\t\t* the state mask.\r", "+\t\t*/\r", "+\t\tif (hOldItem == hNewItem) {\r", "+\t\t\tTVITEM tvItem = new TVITEM ();\r", "+\t\t\ttvItem.mask = OS.TVIF_STATE;\r", "+\t\t\ttvItem.state = OS.TVIS_SELECTED;\r", "+\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;\r", "+\t\t\ttvItem.hItem = hNewItem;\r", "+\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);\r", "+\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d8bef4760275cb16dbf7ca663f45fc9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "38e14978feed859fa6428af4d14fcc467662d294", "commitAfterChange": "5d8726bcb8a72d394af3ce603770c8bf01b35d5d", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "  LRESULT WM_LBUTTONDBLCLK (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDBLCLK (int wParam, int lParam)", "diff": ["+\tmouseDown = true;", "+", "-\tOS.SendMessage (handle, OS.LVM_HITTEST, 0, pinfo);", "+\tint index = OS.SendMessage (handle, OS.LVM_HITTEST, 0, pinfo);", "+\t", "+\t/* Look for check/uncheck */", "+\tif ((style & SWT.CHECK) != 0) {", "+\t\t/*", "+\t\t* Note that when the table has LVS_EX_FULLROWSELECT and the", "+\t\t* user clicks anywhere on a row except on the check box, all", "+\t\t* of the bits are set.  The hit test flags are LVHT_ONITEM.", "+\t\t* This means that a bit test for LVHT_ONITEMSTATEICON is not", "+\t\t* the correct way to determine that the user has selected", "+\t\t* the check box, equality is needed.", "+\t\t*/", "+\t\tif (index != -1 && pinfo.flags == OS.LVHT_ONITEMSTATEICON) {", "+\t\t\tTableItem item = _getItem (index);", "+\t\t\titem.setChecked (!item.getChecked (), true);", "+\t\t\tif (!OS.IsWinCE) {", "+\t\t\t\tOS.NotifyWinEvent (OS.EVENT_OBJECT_FOCUS, handle, OS.OBJID_CLIENT, index + 1);", "+\t\t\t}", "+\t\t}\t", "+\t}"]}], "num": 40289}
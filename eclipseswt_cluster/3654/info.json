{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "000e25185cad65d8d12364a4105d3e96", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a7c02a1d7aa442a17b3eac452a5c2deb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/photon/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "c0e47047fb12b4ad6c1cd291125c302ee4573df0", "commitAfterChange": "772f59dfc148ceb100936d7357b9a0b9d85ab236", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 18, "signatureBeforeChange": "  int Pt_CB_WEB_DATA_REQ(int info)", "signatureAfterChange": "  int Pt_CB_WEB_DATA_REQ(int info)", "diff": ["-\t\t\tdata = text;", "+\t\t\t/*", "+\t\t\t* Feature on Photon. The PtSetResource() call for PtWebClient data imposes", "+\t\t\t* a limit on the size of the text buffer being passed. The workaround is", "+\t\t\t* to break the text into 1KB chunks.", "+\t\t\t*/", "+\t\t\tif (text.length() - textOffset > 1024) {", "+\t\t\t\tdata = text.substring(textOffset, textOffset + 1024);", "+\t\t\t\ttextOffset += 1024;", "+\t\t\t} else {", "+\t\t\t\tdata = text.substring(textOffset);", "+\t\t\t}", "-\tif (data != null ) {", "+\tif (data != null) {", "-\tif( clientData.data != 0 ) OS.free(clientData.data);", "+\tif (clientData.data != 0) OS.free(clientData.data);", "+\treturn OS.Pt_CONTINUE;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a899d2fb05ccc86f7c25cf67c17c192", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "f5a0d3582f75308849543d0ff0517400d5971efe", "commitAfterChange": "6a8f64aba74c6fc7a655a14fc7ca54a1aef70af2", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void _addListener (int eventType, Listener listener)", "signatureAfterChange": "  void _addListener (int eventType, Listener listener)", "diff": ["-\t\t\tif (hwndHeader == 0) {", "-\t\t\t\tcreateParent ();", "-\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-\t\t\t\tbits |= OS.TVS_NOHSCROLL;", "-\t\t\t\tOS.SetWindowLong (handle, OS.GWL_STYLE, bits);", "+\t\t\tif (hwndHeader == 0) createParent ();", "+\t\t\tint oldBits = OS.GetWindowLong (handle, OS.GWL_STYLE), newBits = oldBits;", "+\t\t\t/*", "+\t\t\t* Feature in Windows.  When the tree has the style", "+\t\t\t* TVS_FULLROWSELECT, the background color for the", "+\t\t\t* entire row is filled when an item is painted,", "+\t\t\t* drawing on top of any custom drawing.  The fix", "+\t\t\t* is to clear TVS_FULLROWSELECT.", "+\t\t\t*/", "+\t\t\tif ((style & SWT.FULL_SELECTION) != 0) newBits &= ~OS.TVS_FULLROWSELECT;", "+\t\t\tnewBits |= OS.TVS_NOHSCROLL;", "+\t\t\tif (newBits != oldBits) {", "+\t\t\t\tOS.SetWindowLong (handle, OS.GWL_STYLE, newBits);", "+\t\t\t\tOS.InvalidateRect (handle, null, true);"]}], "num": 3654}
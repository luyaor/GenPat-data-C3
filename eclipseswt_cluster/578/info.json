{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c3411e7dbb26ef8229336149801c76a6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "22f9e167fe7f342942e2919548740115", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "e3d907d6678e7fdda004ed7738717629aea97ed2", "commitAfterChange": "7bb044e5c9466f1fefdeb85ae3faca48de0e8d34", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void drawString (String string, int x, int y, boolean isTransparent)", "signatureAfterChange": " public void drawString (String string, int x, int y, boolean isTransparent)", "diff": ["-\t\tPointF pt = new PointF();", "-\t\tint /*long*/ format = Gdip.StringFormat_Clone(Gdip.StringFormat_GenericTypographic());", "-\t\tint formatFlags = Gdip.StringFormat_GetFormatFlags(format) | Gdip.StringFormatFlagsMeasureTrailingSpaces;", "-\t\tif ((data.style & SWT.MIRRORED) != 0) formatFlags |= Gdip.StringFormatFlagsDirectionRightToLeft;", "-\t\tGdip.StringFormat_SetFormatFlags(format, formatFlags);", "-\t\tif (!isTransparent) {", "-\t\t\tRectF bounds = new RectF();", "-\t\t\tGdip.Graphics_MeasureString(gdipGraphics, buffer, length, data.gdipFont, pt, format, bounds);", "-\t\t\tGdip.Graphics_FillRectangle(gdipGraphics, data.gdipBrush, x, y, Math.round(bounds.Width), Math.round(bounds.Height));", "+\t\tint nGlyphs = (length * 3 / 2) + 16;", "+\t\tGCP_RESULTS result = new GCP_RESULTS();", "+\t\tresult.lStructSize = GCP_RESULTS.sizeof;", "+\t\tresult.nGlyphs = nGlyphs;", "+\t\tint /*long*/ hHeap = OS.GetProcessHeap();", "+\t\tint /*long*/ lpDx = result.lpDx = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, nGlyphs * 4);", "+\t\tint /*long*/ lpGlyphs = result.lpGlyphs = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, nGlyphs * 2);", "+\t\tint dwFlags = OS.GCP_GLYPHSHAPE | OS.GCP_REORDER | OS.GCP_LIGATE;", "+\t\tint /*long*/ hdc = Gdip.Graphics_GetHDC(gdipGraphics);", "+\t\tif ((data.style & SWT.MIRRORED) != 0) OS.SetLayout(hdc, OS.GetLayout(hdc) | OS.LAYOUT_RTL);", "+\t\tOS.GetCharacterPlacementW(hdc, buffer, length, 0, result, dwFlags);", "+\t\tif ((data.style & SWT.MIRRORED) != 0) OS.SetLayout(hdc, OS.GetLayout(hdc) & ~OS.LAYOUT_RTL);", "+\t\tTEXTMETRIC lptm = OS.IsUnicode ? (TEXTMETRIC)new TEXTMETRICW() : new TEXTMETRICA();", "+\t\tOS.GetTextMetrics(hdc, lptm);", "+\t\tGdip.Graphics_ReleaseHDC(gdipGraphics, hdc);", "+\t\tnGlyphs = result.nGlyphs;", "+\t\tint drawX = x, drawY = y + lptm.tmAscent;", "+\t\tint[] dx = new int[nGlyphs];", "+\t\tOS.MoveMemory(dx, result.lpDx, nGlyphs * 4);", "+\t\tfloat[] points = new float[dx.length * 2];", "+\t\tfor (int i = 0, j = 0; i < dx.length; i++) {", "+\t\t\tpoints[j++] = drawX;", "+\t\t\tpoints[j++] = drawY;", "+\t\t\tdrawX += dx[i];", "+\t\t}", "+\t\tRectF bounds = null;", "+\t\tif (!isTransparent || (data.style & SWT.MIRRORED) != 0) {", "+\t\t\tbounds = new RectF();", "+\t\t\tGdip.Graphics_MeasureDriverString(gdipGraphics, lpGlyphs, nGlyphs, data.gdipFont, points, 0, 0, bounds);", "+\t\t\tif (!isTransparent) {", "+\t\t\t\tGdip.Graphics_FillRectangle(gdipGraphics, data.gdipBrush, x, y, Math.round(bounds.Width), Math.round(bounds.Height));", "+\t\t\t}", "-\t\t\t\t\tGdip.LinearGradientBrush_TranslateTransform(brush, - 2 * x, 0, Gdip.MatrixOrderPrepend);\t", "+\t\t\t\t\tGdip.LinearGradientBrush_TranslateTransform(brush, - 2 * x - bounds.Width, 0, Gdip.MatrixOrderPrepend);\t", "-\t\t\t\t\tGdip.TextureBrush_TranslateTransform(brush, - 2 * x, 0, Gdip.MatrixOrderPrepend);\t", "+\t\t\t\t\tGdip.TextureBrush_TranslateTransform(brush, - 2 * x - bounds.Width, 0, Gdip.MatrixOrderPrepend);\t", "-\t\t\tGdip.Graphics_TranslateTransform(gdipGraphics, - 2 * x, 0, Gdip.MatrixOrderPrepend);\t\t \t\t \t\t ", "+\t\t\tGdip.Graphics_TranslateTransform(gdipGraphics, - 2 * x - bounds.Width, 0, Gdip.MatrixOrderPrepend);\t\t \t\t \t\t ", "-\t\tpt.X = x;", "-\t\tpt.Y = y;", "-\t\tGdip.Graphics_DrawString(gdipGraphics, buffer, length, data.gdipFont, pt, format, brush);", "+\t\tGdip.Graphics_DrawDriverString(gdipGraphics, lpGlyphs, result.nGlyphs, data.gdipFont, brush, points, 0, 0);", "-\t\tGdip.StringFormat_delete(format);", "+\t\tOS.HeapFree(hHeap, 0, lpGlyphs);", "+\t\tOS.HeapFree(hHeap, 0, lpDx);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73b847c2ac14d0ab65896e9f74d38724", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "e3d907d6678e7fdda004ed7738717629aea97ed2", "commitAfterChange": "7bb044e5c9466f1fefdeb85ae3faca48de0e8d34", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": " public Point stringExtent(String string)", "signatureAfterChange": " public Point stringExtent(String string)", "diff": ["-\tif (data.gdipGraphics != 0) {", "-\t\tPointF pt = new PointF();", "+\tint /*long*/ gdipGraphics = data.gdipGraphics;", "+\tif (gdipGraphics != 0) {", "-\t\tint /*long*/ format = Gdip.StringFormat_Clone(Gdip.StringFormat_GenericTypographic());", "-\t\tint formatFlags = Gdip.StringFormat_GetFormatFlags(format) | Gdip.StringFormatFlagsMeasureTrailingSpaces;", "-\t\tif ((data.style & SWT.MIRRORED) != 0) formatFlags |= Gdip.StringFormatFlagsDirectionRightToLeft;", "-\t\tGdip.StringFormat_SetFormatFlags(format, formatFlags);", "-\t\tGdip.Graphics_MeasureString(data.gdipGraphics, buffer, buffer.length, data.gdipFont, pt, format, bounds);", "-\t\tGdip.StringFormat_delete(format);", "+\t\tint nGlyphs = (length * 3 / 2) + 16;", "+\t\tGCP_RESULTS result = new GCP_RESULTS();", "+\t\tresult.lStructSize = GCP_RESULTS.sizeof;", "+\t\tresult.nGlyphs = nGlyphs;", "+\t\tint /*long*/ hHeap = OS.GetProcessHeap();", "+\t\tint /*long*/ lpDx = result.lpDx = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, nGlyphs * 4);", "+\t\tint /*long*/ lpGlyphs = result.lpGlyphs = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, nGlyphs * 2);", "+\t\tint dwFlags = OS.GCP_GLYPHSHAPE | OS.GCP_REORDER | OS.GCP_LIGATE;", "+\t\tint /*long*/ hdc = Gdip.Graphics_GetHDC(gdipGraphics);", "+\t\tif ((data.style & SWT.MIRRORED) != 0) OS.SetLayout(hdc, OS.GetLayout(hdc) | OS.LAYOUT_RTL);", "+\t\tOS.GetCharacterPlacementW(hdc, buffer, length, 0, result, dwFlags);", "+\t\tif ((data.style & SWT.MIRRORED) != 0) OS.SetLayout(hdc, OS.GetLayout(hdc) & ~OS.LAYOUT_RTL);", "+\t\tGdip.Graphics_ReleaseHDC(gdipGraphics, hdc);", "+\t\tint drawX = 0;", "+\t\tint[] dx = new int[result.nGlyphs];", "+\t\tOS.MoveMemory(dx, lpDx, result.nGlyphs * 4);\t", "+\t\tfloat[] points = new float[dx.length * 2];", "+\t\tfor (int i = 0, j = 0; i < dx.length; i++, j += 2) {", "+\t\t\tpoints[j] = drawX;", "+\t\t\tdrawX += dx[i];", "+\t\t}", "+\t\tGdip.Graphics_MeasureDriverString(gdipGraphics, lpGlyphs, result.nGlyphs, data.gdipFont, points, 0, 0, bounds);", "+\t\tOS.HeapFree(hHeap, 0, lpGlyphs);", "+\t\tOS.HeapFree(hHeap, 0, lpDx);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2773a45d25ea70641c82cbc709971964", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 5, "signatureBeforeChange": " public FontData open ()", "signatureAfterChange": " \t public FontData open ()", "diff": ["- */", "-\tshell = new Shell (getParent (), getStyle () | SWT.TITLE | SWT.BORDER | SWT.APPLICATION_MODAL);", "-\tcreateChildren ();", "-\tinstallListeners ();\t", "-\t", "-\tinitializeWidgets ();", "-\tsetFontData (null);", "-\topenDialog ();", "-\tDisplay display = shell.getDisplay ();", "-\twhile (!shell.isDisposed ()) {", "+\tFontSelectionQDStyle qdStyle = new FontSelectionQDStyle();", "+\tqdStyle.version = OS.kFontSelectionQDStyleVersionZero;", "+\t// NEEDS WORK - color not supported in native dialog for Carbon", "+\tif (rgb != null) {", "+\t\tqdStyle.hasColor = true;", "+\t\tqdStyle.color_red = (short)(rgb.red * 257);", "+\t\tqdStyle.color_green = (short)(rgb.green * 257);", "+\t\tqdStyle.color_blue = (short)(rgb.blue * 257);", "+\t}", "+\tif (fontData != null) {", "+\t\tString familyName = fontData.name;", "+\t\tbyte [] buffer = new byte [256];", "+\t\tint length = familyName.length();", "+\t\tif (length > 255) length = 255;", "+\t\tbuffer [0] = (byte)length;", "+\t\tfor (int i=0; i<length; i++) {", "+\t\t\tbuffer [i+1] = (byte) familyName.charAt(i);", "+\t\t}", "+\t\tint id = OS.FMGetFontFamilyFromName (buffer);", "+\t\tif (id == OS.kInvalidFontFamily) id = OS.GetAppFont();", "+\t\tqdStyle.instance_fontFamily = (short)id;", "+\t\tint style = fontData.style;", "+\t\tint fontStyle = OS.normal;", "+\t\tif ((style & SWT.BOLD) != 0) fontStyle |= OS.bold;", "+\t\tif ((style & SWT.ITALIC) != 0) fontStyle |= OS.italic;", "+\t\tqdStyle.instance_fontStyle = (short)fontStyle;", "+\t\tqdStyle.size = (short)fontData.height;", "+\t}", "+\tint ptr = OS.NewPtr(FontSelectionQDStyle.sizeof);", "+\tOS.memcpy (ptr, qdStyle, FontSelectionQDStyle.sizeof);", "+\tOS.SetFontInfoForSelection(OS.kFontSelectionQDType, 1, ptr, 0);", "+\tOS.DisposePtr (ptr);", "+\tint[] mask = new int[] {", "+\t\tOS.kEventClassFont, OS.kEventFontSelection,", "+\t\tOS.kEventClassFont, OS.kEventFontPanelClosed,", "+\t};", "+\tCallback fontPanelCallback = new Callback (this, \"fontProc\", 3);", "+\tint appTarget = OS.GetApplicationEventTarget ();", "+\tint [] outRef = new int [1];", "+\tOS.InstallEventHandler (appTarget, fontPanelCallback.getAddress(), mask.length / 2, mask, 0, outRef);", "+\tfontData = null;", "+\trgb = null;", "+\topen = true;", "+\tOS.FPShowHideFontPanel ();\t", "+\tDisplay display = parent.getDisplay ();", "+\twhile (!parent.isDisposed() && open) {", "-\t}", "-\t", "-\tFontData result = null;", "-\tif (okSelected) result = getFontData ();", "-\tif (sampleFont != null) sampleFont.dispose ();", "-\treturn result;", "+\t};", "+\tOS.RemoveEventHandler (outRef [0]);", "+\tfontPanelCallback.dispose ();", "+\treturn fontData;"]}], "num": 578}
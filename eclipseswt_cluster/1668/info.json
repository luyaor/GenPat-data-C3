{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8777e2f7adeb46737aee194cf205ddb0", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a0311547142a33a774e46922f836f28", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "a99d0f7512ef64a51e058b97dfb32c83f03879ac", "commitAfterChange": "844c3cba85108b0943332ca208e3882c23f3abd9", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 49, "signatureBeforeChange": "  void updateOrientation ()", "signatureAfterChange": "  void updateOrientation ()", "diff": ["-\t\tdisplay.releaseToolImageList (imageList);", "-\t\timageList = display.getImageListToolBar (style & SWT.RIGHT_TO_LEFT, size.x, size.y);", "-\t\tint /*long*/ hImageList = imageList.getHandle ();", "-\t\tOS.SendMessage (handle, OS.TB_SETIMAGELIST, 0, hImageList);", "-\t}\t", "-\tif (hotImageList != null) {", "-\t\tPoint size = hotImageList.getImageSize ();", "-\t\tdisplay.releaseToolHotImageList (hotImageList);", "-\t\thotImageList = display.getImageListToolBarHot (style & SWT.RIGHT_TO_LEFT, size.x, size.y);", "-\t\tint /*long*/ hHotImageList  = hotImageList.getHandle ();", "-\t\tOS.SendMessage (handle, OS.TB_SETHOTIMAGELIST, 0, hHotImageList);", "-\t}\t", "-\tif (disabledImageList != null) {", "-\t\tPoint size = disabledImageList.getImageSize ();", "-\t\tdisplay.releaseToolDisabledImageList (disabledImageList);", "-\t\tdisabledImageList = display.getImageListToolBarDisabled (style & SWT.RIGHT_TO_LEFT, size.x, size.y);\t", "-\t\tint /*long*/ hDisImageList  = disabledImageList.getHandle ();", "-\t\tOS.SendMessage (handle, OS.TB_SETDISABLEDIMAGELIST, 0, hDisImageList);", "-\t}", "-\tif (imageList != null) {", "-\t\tfor (int i = 0; i < items.length; i++) {", "-\t\t\tToolItem item = items[i];", "-\t\t\tif (item != null) {", "-\t\t\t\tImage image = item.image;", "-\t\t\t\tif (image != null) {", "-\t\t\t\t\tTBBUTTONINFO info = new TBBUTTONINFO ();", "-\t\t\t\t\tinfo.cbSize = TBBUTTONINFO.sizeof;", "-\t\t\t\t\tinfo.dwMask = OS.TBIF_IMAGE;", "-\t\t\t\t\tboolean enabled = getEnabled () && item.getEnabled ();", "-\t\t\t\t\tImage disabled = item.disabledImage;", "-\t\t\t\t\tif (item.disabledImage == null) {", "-\t\t\t\t\t\tif (item.disabledImage2 != null) item.disabledImage2.dispose ();", "-\t\t\t\t\t\titem.disabledImage2 = null;", "-\t\t\t\t\t\tdisabled = image;", "-\t\t\t\t\t\tif (!enabled) {", "-\t\t\t\t\t\t\tdisabled = item.disabledImage2 = new Image (display, image, SWT.IMAGE_DISABLE);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug in Windows.  When a tool item with the style", "-\t\t\t\t\t* BTNS_CHECK or BTNS_CHECKGROUP is selected and then", "-\t\t\t\t\t* disabled, the item does not draw using the disabled", "-\t\t\t\t\t* image.  The fix is to assign the disabled image in", "-\t\t\t\t\t* all image lists.", "-\t\t\t\t\t*/", "-\t\t\t\t\tImage image2 = image, hot = item.hotImage;", "-\t\t\t\t\tif ((item.style & (SWT.CHECK | SWT.RADIO)) != 0) {", "-\t\t\t\t\t\tif (!enabled) image2 = hot = disabled;", "-\t\t\t\t\t}", "-\t\t\t\t\tinfo.iImage = imageList.add (image2);", "-\t\t\t\t\tdisabledImageList.add (disabled);", "-\t\t\t\t\thotImageList.add (hot != null ? hot : image2);", "-\t\t\t\t\tOS.SendMessage (handle, OS.TB_SETBUTTONINFO, item.id, info);", "-\t\t\t\t}", "+\t\tImageList newImageList = display.getImageListToolBar (style & SWT.RIGHT_TO_LEFT, size.x, size.y);", "+\t\tImageList newHotImageList = display.getImageListToolBarHot (style & SWT.RIGHT_TO_LEFT, size.x, size.y);", "+\t\tImageList newDisabledImageList = display.getImageListToolBarDisabled (style & SWT.RIGHT_TO_LEFT, size.x, size.y);\t", "+\t\tTBBUTTONINFO info = new TBBUTTONINFO ();", "+\t\tinfo.cbSize = TBBUTTONINFO.sizeof;", "+\t\tinfo.dwMask = OS.TBIF_IMAGE;", "+\t\tint count = (int)/*64*/OS.SendMessage (handle, OS.TB_BUTTONCOUNT, 0, 0);", "+\t\tfor (int i=0; i<count; i++) {", "+\t\t\tToolItem item = items [i];", "+\t\t\tif ((item.style & SWT.SEPARATOR) != 0) continue;", "+\t\t\tif (item.image == null) continue;", "+\t\t\tOS.SendMessage (handle, OS.TB_GETBUTTONINFO, item.id, info);", "+\t\t\tif (info.iImage != OS.I_IMAGENONE) {", "+\t\t\t\tImage image = imageList.get(info.iImage);", "+\t\t\t\tImage hot = hotImageList.get(info.iImage);", "+\t\t\t\tImage disabled = disabledImageList.get(info.iImage);", "+\t\t\t\timageList.put(info.iImage, null);", "+\t\t\t\thotImageList.put(info.iImage, null);", "+\t\t\t\tdisabledImageList.put(info.iImage, null);", "+\t\t\t\tinfo.iImage = newImageList.add(image);", "+\t\t\t\tnewHotImageList.add(hot);", "+\t\t\t\tnewDisabledImageList.add(disabled);", "+\t\t\t\tOS.SendMessage (handle, OS.TB_SETBUTTONINFO, item.id, info);", "+\t\tdisplay.releaseToolImageList (imageList);", "+\t\tdisplay.releaseToolHotImageList (hotImageList);", "+\t\tdisplay.releaseToolDisabledImageList (disabledImageList);", "+\t\tOS.SendMessage (handle, OS.TB_SETIMAGELIST, 0, newImageList.getHandle ());", "+\t\tOS.SendMessage (handle, OS.TB_SETHOTIMAGELIST, 0, newHotImageList.getHandle ());", "+\t\tOS.SendMessage (handle, OS.TB_SETDISABLEDIMAGELIST, 0, newDisabledImageList.getHandle ());", "+\t\timageList = newImageList;", "+\t\thotImageList = newHotImageList;", "+\t\tdisabledImageList = newDisabledImageList;", "+\t\tOS.InvalidateRect (handle, null, true);", "- }", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6bc672a9d79f0acdec36a7a5c8242ef8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/carbon/org/eclipse/swt/program/Program.java", "commitBeforeChange": "14581ca5a7841e362a4bb6a68c76d00675c70760", "commitAfterChange": "2882bbd7423650466596733b7f7109e5d58042c8", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 5, "signatureBeforeChange": " public boolean execute (String fileName)", "signatureAfterChange": " public boolean execute (String fileName)", "diff": ["-\t", "-\t/* Parse the command into its individual arguments. */", "-\tString[] args = parseCommand(command);", "-\tint fileArg = -1;", "-\tint index;", "-\tfor (index = 0; index < args.length; index++) {", "-\t\tint j = args[index].indexOf(\"%f\");", "-\t\tif (j != -1) {", "-\t\t\tString value = args[index];", "-\t\t\tfileArg = index;", "-\t\t\targs[index] = value.substring(0, j) + fileName + value.substring(j + 2);", "+\tint rc = -1;", "+\tchar[] chars = new char[fileName.length()];", "+\tfileName.getChars(0, chars.length, chars, 0);", "+\tint arg = OS.CFStringCreateWithCharacters(0, chars, chars.length);", "+\tif (arg != 0) {", "+\t\tint url = OS.CFURLCreateWithFileSystemPath(OS.kCFAllocatorDefault, arg, OS.kCFURLPOSIXPathStyle, false);", "+\t\tif (url != 0) {", "+\t\t\tbyte[] itemRef = new byte[80];", "+\t\t\tif (OS.CFURLGetFSRef(url, itemRef)) {", "+\t\t\t\tint fsRefPtr = OS.NewPtr(fsRef.length);", "+\t\t\t\tif (fsRefPtr != 0) {", "+\t\t\t\t\tOS.memcpy(fsRefPtr, fsRef, fsRef.length);", "+\t\t\t\t\tLSApplicationParameters params = new LSApplicationParameters();", "+\t\t\t\t\tparams.version = 0;", "+\t\t\t\t\tparams.flags = 0;", "+\t\t\t\t\tparams.application = fsRefPtr;", "+\t\t\t\t\trc = OS.LSOpenItemsWithRole(itemRef, 1, OS.kLSRolesAll, 0, params, null, 0);", "+\t\t\t\t\tOS.DisposePtr(fsRefPtr);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.CFRelease(url);", "+\t\tOS.CFRelease(arg);", "+\treturn rc == OS.noErr;", "+}", "-\t/* If a file name was given but the command did not have \"%f\" */", "-\tif ((fileName.length() > 0) && (fileArg < 0)) {", "-\t\tString[] newArgs = new String[args.length + 1];", "-\t\tfor (index = 0; index < args.length; index++) newArgs[index] = args[index];", "-\t\tnewArgs[args.length] = fileName;", "-\t\targs = newArgs;", "-\t/* Execute the command. */", "-\ttry {", "-\t\tCompatibility.exec(args);", "-\t} catch (IOException e) {", "-\t\treturn false;", "-\t}", "-\treturn true;"]}], "num": 1668}
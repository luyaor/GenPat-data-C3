{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd210d3725fb8e8358a1025eeb84280d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1f6d3704314cdded4e393dd272793009", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "600117323003db9ea522ed0baf12ee909172c3dc", "commitAfterChange": "c44dd21c1a1b0072edf7d53333363f735a817f14", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight)", "signatureAfterChange": " void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight)", "diff": ["-\tif (srcWidth != destWidth || srcHeight != destHeight) {", "-\t\tint /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, srcWidth, srcHeight);", "-\t\tif (pixbuf != 0) {", "-\t\t\tint /*long*/ colormap = OS.gdk_colormap_get_system();", "-\t\t\tOS.gdk_pixbuf_get_from_drawable(pixbuf, colorPixmap, colormap, srcX, srcY, 0, 0, srcWidth, srcHeight);", "-\t\t\tint /*long*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, srcWidth, srcHeight);", "-\t\t\tif (maskPixbuf != 0) {", "-\t\t\t\tOS.gdk_pixbuf_get_from_drawable(maskPixbuf, maskPixmap, 0, srcX, srcY, 0, 0, srcWidth, srcHeight);", "-\t\t\t\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "-\t\t\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "-\t\t\t\tbyte[] line = new byte[stride];", "-\t\t\t\tint maskStride = OS.gdk_pixbuf_get_rowstride(maskPixbuf);", "-\t\t\t\tint /*long*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);", "-\t\t\t\tbyte[] maskLine = new byte[maskStride];", "-\t\t\t\tfor (int y=0; y<srcHeight; y++) {", "-\t\t\t\t\tint /*long*/ offset = pixels + (y * stride);", "-\t\t\t\t\tOS.memmove(line, offset, stride);", "-\t\t\t\t\tint /*long*/ maskOffset = maskPixels + (y * maskStride);", "-\t\t\t\t\tOS.memmove(maskLine, maskOffset, maskStride);", "-\t\t\t\t\tfor (int x=0; x<srcWidth; x++) {", "-\t\t\t\t\t\tif (maskLine[x * 3] == 0) {", "-\t\t\t\t\t\t\tline[x*4+3] = 0;", "+\tif (device.useXRender) {", "+\t\tdrawImageXRender(srcImage, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, simple, imgWidth, imgHeight, maskPixmap, OS.PictStandardA1);", "+\t} else {", "+\t\tif (srcWidth != destWidth || srcHeight != destHeight) {", "+\t\t\tint /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, srcWidth, srcHeight);", "+\t\t\tif (pixbuf != 0) {", "+\t\t\t\tint /*long*/ colormap = OS.gdk_colormap_get_system();", "+\t\t\t\tOS.gdk_pixbuf_get_from_drawable(pixbuf, colorPixmap, colormap, srcX, srcY, 0, 0, srcWidth, srcHeight);", "+\t\t\t\tint /*long*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, srcWidth, srcHeight);", "+\t\t\t\tif (maskPixbuf != 0) {", "+\t\t\t\t\tOS.gdk_pixbuf_get_from_drawable(maskPixbuf, maskPixmap, 0, srcX, srcY, 0, 0, srcWidth, srcHeight);", "+\t\t\t\t\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "+\t\t\t\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "+\t\t\t\t\tbyte[] line = new byte[stride];", "+\t\t\t\t\tint maskStride = OS.gdk_pixbuf_get_rowstride(maskPixbuf);", "+\t\t\t\t\tint /*long*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);", "+\t\t\t\t\tbyte[] maskLine = new byte[maskStride];", "+\t\t\t\t\tfor (int y=0; y<srcHeight; y++) {", "+\t\t\t\t\t\tint /*long*/ offset = pixels + (y * stride);", "+\t\t\t\t\t\tOS.memmove(line, offset, stride);", "+\t\t\t\t\t\tint /*long*/ maskOffset = maskPixels + (y * maskStride);", "+\t\t\t\t\t\tOS.memmove(maskLine, maskOffset, maskStride);", "+\t\t\t\t\t\tfor (int x=0; x<srcWidth; x++) {", "+\t\t\t\t\t\t\tif (maskLine[x * 3] == 0) {", "+\t\t\t\t\t\t\t\tline[x*4+3] = 0;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.memmove(offset, line, stride);", "-\t\t\t\t\tOS.memmove(offset, line, stride);", "+\t\t\t\t\tOS.g_object_unref(maskPixbuf);", "+\t\t\t\t\tint /*long*/ scaledPixbuf = OS.gdk_pixbuf_scale_simple(pixbuf, destWidth, destHeight, OS.GDK_INTERP_BILINEAR);", "+\t\t\t\t\tif (scaledPixbuf != 0) {", "+\t\t\t\t\t\tint /*long*/[] colorBuffer = new int /*long*/[1];", "+\t\t\t\t\t\tint /*long*/[] maskBuffer = new int /*long*/[1];", "+\t\t\t\t\t\tOS.gdk_pixbuf_render_pixmap_and_mask(scaledPixbuf, colorBuffer, maskBuffer, 128);", "+\t\t\t\t\t\tcolorPixmap = colorBuffer[0];", "+\t\t\t\t\t\tmaskPixmap = maskBuffer[0];", "+\t\t\t\t\t\tOS.g_object_unref(scaledPixbuf);", "+\t\t\t\t\t}", "-\t\t\t\tOS.g_object_unref(maskPixbuf);", "-\t\t\t\tint /*long*/ scaledPixbuf = OS.gdk_pixbuf_scale_simple(pixbuf, destWidth, destHeight, OS.GDK_INTERP_BILINEAR);", "-\t\t\t\tif (scaledPixbuf != 0) {", "-\t\t\t\t\tint /*long*/[] colorBuffer = new int /*long*/[1];", "-\t\t\t\t\tint /*long*/[] maskBuffer = new int /*long*/[1];", "-\t\t\t\t\tOS.gdk_pixbuf_render_pixmap_and_mask(scaledPixbuf, colorBuffer, maskBuffer, 128);", "-\t\t\t\t\tcolorPixmap = colorBuffer[0];", "-\t\t\t\t\tmaskPixmap = maskBuffer[0];", "-\t\t\t\t\tOS.g_object_unref(scaledPixbuf);", "-\t\t\t\t}", "+\t\t\t\tOS.g_object_unref(pixbuf);", "-\t\t\tOS.g_object_unref(pixbuf);", "+\t\t\tsrcX = 0;", "+\t\t\tsrcY = 0;", "+\t\t\tsrcWidth = destWidth;", "+\t\t\tsrcHeight = destHeight;", "-\t\tsrcX = 0;", "-\t\tsrcY = 0;", "-\t\tsrcWidth = destWidth;", "-\t\tsrcHeight = destHeight;", "-\t}", "-", "-\t/* Merge clipping with mask if necessary */", "-\tif (data.clipRgn != 0)\t {", "-\t\tint newWidth =  srcX + srcWidth;", "-\t\tint newHeight = srcY + srcHeight;", "-\t\tint bytesPerLine = (newWidth + 7) / 8;", "-\t\tbyte[] maskData = new byte[bytesPerLine * newHeight];", "-\t\tint /*long*/ mask = OS.gdk_bitmap_create_from_data(0, maskData, newWidth, newHeight);", "-\t\tif (mask != 0) {", "-\t\t\tint /*long*/ gc = OS.gdk_gc_new(mask);", "-\t\t\tOS.gdk_region_offset(data.clipRgn, -destX + srcX, -destY + srcY);", "-\t\t\tOS.gdk_gc_set_clip_region(gc, data.clipRgn);", "-\t\t\tOS.gdk_region_offset(data.clipRgn, destX - srcX, destY - srcY);", "-\t\t\tGdkColor color = new GdkColor();", "-\t\t\tcolor.pixel = 1;", "-\t\t\tOS.gdk_gc_set_foreground(gc, color);", "-\t\t\tOS.gdk_draw_rectangle(mask, gc, 1, 0, 0, newWidth, newHeight);", "-\t\t\tOS.gdk_gc_set_function(gc, OS.GDK_AND);", "-\t\t\tOS.gdk_draw_drawable(mask, gc, maskPixmap, 0, 0, 0, 0, newWidth, newHeight);", "-\t\t\tOS.g_object_unref(gc);", "-\t\t\tif (maskPixmap != 0 && srcImage.mask != maskPixmap) OS.g_object_unref(maskPixmap);", "-\t\t\tmaskPixmap = mask;", "+\t", "+\t\t/* Merge clipping with mask if necessary */", "+\t\tif (data.clipRgn != 0)\t {", "+\t\t\tint newWidth =  srcX + srcWidth;", "+\t\t\tint newHeight = srcY + srcHeight;", "+\t\t\tint bytesPerLine = (newWidth + 7) / 8;", "+\t\t\tbyte[] maskData = new byte[bytesPerLine * newHeight];", "+\t\t\tint /*long*/ mask = OS.gdk_bitmap_create_from_data(0, maskData, newWidth, newHeight);", "+\t\t\tif (mask != 0) {", "+\t\t\t\tint /*long*/ gc = OS.gdk_gc_new(mask);", "+\t\t\t\tOS.gdk_region_offset(data.clipRgn, -destX + srcX, -destY + srcY);", "+\t\t\t\tOS.gdk_gc_set_clip_region(gc, data.clipRgn);", "+\t\t\t\tOS.gdk_region_offset(data.clipRgn, destX - srcX, destY - srcY);", "+\t\t\t\tGdkColor color = new GdkColor();", "+\t\t\t\tcolor.pixel = 1;", "+\t\t\t\tOS.gdk_gc_set_foreground(gc, color);", "+\t\t\t\tOS.gdk_draw_rectangle(mask, gc, 1, 0, 0, newWidth, newHeight);", "+\t\t\t\tOS.gdk_gc_set_function(gc, OS.GDK_AND);", "+\t\t\t\tOS.gdk_draw_drawable(mask, gc, maskPixmap, 0, 0, 0, 0, newWidth, newHeight);", "+\t\t\t\tOS.g_object_unref(gc);", "+\t\t\t\tif (maskPixmap != 0 && srcImage.mask != maskPixmap) OS.g_object_unref(maskPixmap);", "+\t\t\t\tmaskPixmap = mask;", "+\t\t\t}", "+\t", "+\t\t/* Blit cliping the mask */", "+\t\tGdkGCValues values = new GdkGCValues();", "+\t\tOS.gdk_gc_get_values(handle, values);", "+\t\tOS.gdk_gc_set_clip_mask(handle, maskPixmap);", "+\t\tOS.gdk_gc_set_clip_origin(handle, destX - srcX, destY - srcY);", "+\t\tOS.gdk_draw_drawable(drawable, handle, colorPixmap, srcX, srcY, destX, destY, srcWidth, srcHeight);", "+\t\tOS.gdk_gc_set_values(handle, values, OS.GDK_GC_CLIP_MASK | OS.GDK_GC_CLIP_X_ORIGIN | OS.GDK_GC_CLIP_Y_ORIGIN);", "+\t\tif (data.clipRgn != 0) OS.gdk_gc_set_clip_region(handle, data.clipRgn);", "-", "-\t/* Blit cliping the mask */", "-\tGdkGCValues values = new GdkGCValues();", "-\tOS.gdk_gc_get_values(handle, values);", "-\tOS.gdk_gc_set_clip_mask(handle, maskPixmap);", "-\tOS.gdk_gc_set_clip_origin(handle, destX - srcX, destY - srcY);", "-\tOS.gdk_draw_drawable(drawable, handle, colorPixmap, srcX, srcY, destX, destY, srcWidth, srcHeight);", "-\tOS.gdk_gc_set_values(handle, values, OS.GDK_GC_CLIP_MASK | OS.GDK_GC_CLIP_X_ORIGIN | OS.GDK_GC_CLIP_Y_ORIGIN);", "-\tif (data.clipRgn != 0) OS.gdk_gc_set_clip_region(handle, data.clipRgn);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ed8c3f689b70f78da7d04cdf5ec820b2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "1acd89a2d1e085725362a748b0102b8318356ef1", "commitAfterChange": "600117323003db9ea522ed0baf12ee909172c3dc", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight, int depth)", "signatureAfterChange": " void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight, int depth)", "diff": ["-\tint colorPixmap = 0, maskPixmap = 0;", "-\tint foreground = 0x00000000;", "-\tif (simple || (srcWidth == destWidth && srcHeight == destHeight)) {", "-\t\tcolorPixmap = srcImage.pixmap;", "-\t\tmaskPixmap = srcImage.mask;", "-\t} else {", "-\t\t/* Stretch the color and mask*/", "-\t\tint xImagePtr = scalePixmap(xDisplay, srcImage.pixmap, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "-\t\tif (xImagePtr != 0) {", "-\t\t\tint xMaskPtr = scalePixmap(xDisplay, srcImage.mask, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "-\t\t\tif (xMaskPtr != 0) {", "-\t\t\t\t/* Create color scaled pixmaps */", "-\t\t\t\tcolorPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, depth);", "-\t\t\t\tint tempGC = OS.XCreateGC(xDisplay, colorPixmap, 0, null);", "-\t\t\t\tOS.XPutImage(xDisplay, colorPixmap, tempGC, xImagePtr, 0, 0, 0, 0, destWidth, destHeight);", "-\t\t\t\tOS.XFreeGC(xDisplay, tempGC);", "-\t\t", "-\t\t\t\t/* Create mask scaled pixmaps */", "-\t\t\t\tmaskPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, 1);", "-\t\t\t\ttempGC = OS.XCreateGC(xDisplay, maskPixmap, 0, null);", "-\t\t\t\tOS.XPutImage(xDisplay, maskPixmap, tempGC, xMaskPtr, 0, 0, 0, 0, destWidth, destHeight);", "-\t\t\t\tOS.XFreeGC(xDisplay, tempGC);", "-\t\t\t\tOS.XDestroyImage(xMaskPtr);", "+\tif (device.useXRender) {", "+\t\tdrawImageXRender(srcImage, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, simple, imgWidth, imgHeight, srcImage.mask, OS.PictStandardA1);", "+\t} else {", "+\t\tint colorPixmap = 0, maskPixmap = 0;", "+\t\tint foreground = 0x00000000;", "+\t\tif (simple || (srcWidth == destWidth && srcHeight == destHeight)) {", "+\t\t\tcolorPixmap = srcImage.pixmap;", "+\t\t\tmaskPixmap = srcImage.mask;", "+\t\t} else {", "+\t\t\t/* Stretch the color and mask*/", "+\t\t\tint xImagePtr = scalePixmap(xDisplay, srcImage.pixmap, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "+\t\t\tif (xImagePtr != 0) {", "+\t\t\t\tint xMaskPtr = scalePixmap(xDisplay, srcImage.mask, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false, false);", "+\t\t\t\tif (xMaskPtr != 0) {", "+\t\t\t\t\t/* Create color scaled pixmaps */", "+\t\t\t\t\tcolorPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, depth);", "+\t\t\t\t\tint tempGC = OS.XCreateGC(xDisplay, colorPixmap, 0, null);", "+\t\t\t\t\tOS.XPutImage(xDisplay, colorPixmap, tempGC, xImagePtr, 0, 0, 0, 0, destWidth, destHeight);", "+\t\t\t\t\tOS.XFreeGC(xDisplay, tempGC);", "+\t\t\t", "+\t\t\t\t\t/* Create mask scaled pixmaps */", "+\t\t\t\t\tmaskPixmap = OS.XCreatePixmap(xDisplay, xDrawable, destWidth, destHeight, 1);", "+\t\t\t\t\ttempGC = OS.XCreateGC(xDisplay, maskPixmap, 0, null);", "+\t\t\t\t\tOS.XPutImage(xDisplay, maskPixmap, tempGC, xMaskPtr, 0, 0, 0, 0, destWidth, destHeight);", "+\t\t\t\t\tOS.XFreeGC(xDisplay, tempGC);", "+\t", "+\t\t\t\t\tOS.XDestroyImage(xMaskPtr);", "+\t\t\t\t}", "+\t\t\t\tOS.XDestroyImage(xImagePtr);", "-\t\t\tOS.XDestroyImage(xImagePtr);", "+\t\t\t", "+\t\t\t/* Change the source rectangle */", "+\t\t\tsrcX = srcY = 0;", "+\t\t\tsrcWidth = destWidth;", "+\t\t\tsrcHeight = destHeight;", "+\t", "+\t\t\tforeground = ~foreground;", "-\t\t/* Change the source rectangle */", "-\t\tsrcX = srcY = 0;", "-\t\tsrcWidth = destWidth;", "-\t\tsrcHeight = destHeight;", "+\t\t/* Do the blts */", "+\t\tif (colorPixmap != 0 && maskPixmap != 0) {", "+\t\t\tXGCValues values = new XGCValues();", "+\t\t\tOS.XGetGCValues(xDisplay, handle, OS.GCForeground | OS. GCBackground | OS.GCFunction, values);", "+\t\t\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "+\t\t\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "+\t\t\tOS.XSetForeground(xDisplay, handle, foreground);", "+\t\t\tOS.XSetBackground(xDisplay, handle, ~foreground);", "+\t\t\tOS.XSetFunction(xDisplay, handle, OS.GXand);", "+\t\t\tOS.XCopyPlane(xDisplay, maskPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY, 1);", "+\t\t\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "+\t\t\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "+\t\t\tOS.XSetForeground(xDisplay, handle, values.foreground);", "+\t\t\tOS.XSetBackground(xDisplay, handle, values.background);", "+\t\t\tOS.XSetFunction(xDisplay, handle, values.function);", "+\t\t}", "-\t\tforeground = ~foreground;", "-\t}", "-\t", "-\t/* Do the blts */", "-\tif (colorPixmap != 0 && maskPixmap != 0) {", "-\t\tXGCValues values = new XGCValues();", "-\t\tOS.XGetGCValues(xDisplay, handle, OS.GCForeground | OS. GCBackground | OS.GCFunction, values);", "-\t\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "-\t\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "-\t\tOS.XSetForeground(xDisplay, handle, foreground);", "-\t\tOS.XSetBackground(xDisplay, handle, ~foreground);", "-\t\tOS.XSetFunction(xDisplay, handle, OS.GXand);", "-\t\tOS.XCopyPlane(xDisplay, maskPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY, 1);", "-\t\tOS.XSetFunction(xDisplay, handle, OS.GXxor);", "-\t\tOS.XCopyArea(xDisplay, colorPixmap, xDrawable, handle, srcX, srcY, srcWidth, srcHeight, destX, destY);", "-\t\tOS.XSetForeground(xDisplay, handle, values.foreground);", "-\t\tOS.XSetBackground(xDisplay, handle, values.background);", "-\t\tOS.XSetFunction(xDisplay, handle, values.function);", "+\t\t/* Destroy scaled pixmaps */", "+\t\tif (colorPixmap != 0 && srcImage.pixmap != colorPixmap) OS.XFreePixmap(xDisplay, colorPixmap);", "+\t\tif (maskPixmap != 0 && srcImage.mask != maskPixmap) OS.XFreePixmap(xDisplay, maskPixmap);", "-\t/* Destroy scaled pixmaps */", "-\tif (colorPixmap != 0 && srcImage.pixmap != colorPixmap) OS.XFreePixmap(xDisplay, colorPixmap);", "-\tif (maskPixmap != 0 && srcImage.mask != maskPixmap) OS.XFreePixmap(xDisplay, maskPixmap);", "+}"]}], "num": 35037}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1658165d1ebadb6f5ea24e42ac8e35d6", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98ecf69f8777a36fe8160fd1de0ba824", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "5e356c18b07e7f5af1a6b17c096783ad43ee7650", "commitAfterChange": "bec9de216652a0f1829bdec4dfa5d60c81e5e090", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 24, "signatureBeforeChange": " private static String[] parseCommand( String cmd )", "signatureAfterChange": "  static String[] parseCommand(String cmd)", "diff": ["-// Private method for parsing a command line into its arguments.", "-private static String[] parseCommand( String cmd ) {", "-\tVector args = new Vector();", "-\tint sIndex = 0;", "-\tint eIndex;", "-\twhile (sIndex < cmd.length()) {", "-\t\t// Trim initial white space of argument.", "-\t\twhile (sIndex < cmd.length() && Compatibility.isWhitespace( cmd.charAt(sIndex) )) {", "-\t\t\tsIndex++;", "-\t\t}", "-\t\tif (sIndex < cmd.length()) {", "-\t\t\t// If the command is a quoted string", "-\t\t\tif (cmd.charAt(sIndex) == '\"' || cmd.charAt(sIndex) == '\\''){", "-\t\t\t\t// Find the terminating quote (or end of line).", "-\t\t\t\t// This code currently does not handle escaped characters (e.g., \" a\\\"b\").", "-\t\t\t\teIndex = sIndex + 1;", "-\t\t\t\twhile (eIndex < cmd.length() && cmd.charAt(eIndex) != cmd.charAt(sIndex)) {", "-\t\t\t\t\teIndex++;", "-\t\t\t\t}", "-\t\t\t\tif (eIndex >= cmd.length()) { // the terminating quote was not found", "-\t\t\t\t\t// Add the argument as is with only one initial quote.", "-\t\t\t\t\targs.addElement( cmd.substring( sIndex, eIndex ) );", "-\t\t\t\t}", "-\t\t\t\t// else add the argument, trimming off the quotes.", "-\t\t\t\telse {", "-\t\t\t\t\targs.addElement( cmd.substring( sIndex+1, eIndex ) );", "-\t\t\t\t}", "-\t\t\t\tsIndex = eIndex + 1;", "-\t\t\t}", "-\t\t\t", "-\t\t\t// else use white space for the delimiters.", "-\t\t\telse {", "-\t\t\t\teIndex = sIndex;", "-\t\t\t\twhile (eIndex < cmd.length() && !Compatibility.isWhitespace( cmd.charAt(eIndex) )) {", "-\t\t\t\t\teIndex++;", "-\t\t\t\t}", "-\t\t\t\targs.addElement( cmd.substring( sIndex, eIndex ) );", "-\t\t\t\tsIndex = eIndex + 1;", "-\t\t\t}", "-\t\t}", "-\t", "-\tString[] strings = new String[ args.size() ];", "-\tfor (int index =0; index < args.size(); index++) {", "-\t\tstrings[ index ] = (String) args.elementAt( index );", "-\t}", "-\treturn strings;", "+", "+static String[] parseCommand(String cmd) {", "+\tVector args = new Vector();", "+\tint sIndex = 0;", "+\tint eIndex;", "+\twhile (sIndex < cmd.length()) {", "+\t\t/* Trim initial white space of argument. */", "+\t\twhile (sIndex < cmd.length() && Compatibility.isWhitespace(cmd.charAt(sIndex))) sIndex++;", "+\t\tif (sIndex < cmd.length()) {", "+\t\t\t/* If the command is a quoted string */", "+\t\t\tif (cmd.charAt(sIndex) == '\"' || cmd.charAt(sIndex) == '\\''){", "+\t\t\t\t/* Find the terminating quote (or end of line).", "+\t\t\t\t * This code currently does not handle escaped characters (e.g., \" a\\\"b\").", "+\t\t\t\t */", "+\t\t\t\teIndex = sIndex + 1;", "+\t\t\t\twhile (eIndex < cmd.length() && cmd.charAt(eIndex) != cmd.charAt(sIndex)) eIndex++;", "+\t\t\t\tif (eIndex >= cmd.length()) { ", "+\t\t\t\t\t/* The terminating quote was not found", "+\t\t\t\t\t * Add the argument as is with only one initial quote.", "+\t\t\t\t\t */", "+\t\t\t\t\targs.addElement(cmd.substring(sIndex, eIndex));", "+\t\t\t\t} else {", "+\t\t\t\t\t/* Add the argument, trimming off the quotes. */", "+\t\t\t\t\targs.addElement(cmd.substring(sIndex + 1, eIndex));", "+\t\t\t\t}", "+\t\t\t\tsIndex = eIndex + 1;", "+\t\t\t}", "+\t\t\telse {", "+\t\t\t\t/* Use white space for the delimiters. */", "+\t\t\t\teIndex = sIndex;", "+\t\t\t\twhile (eIndex < cmd.length() && !Compatibility.isWhitespace(cmd.charAt(eIndex))) eIndex++;", "+\t\t\t\targs.addElement(cmd.substring(sIndex, eIndex));", "+\t\t\t\tsIndex = eIndex + 1;", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+\tString[] strings = new String[args.size()];", "+\tfor (int index =0; index < args.size(); index++) {", "+\t\tstrings[index] = (String)args.elementAt(index);", "+\t}", "+\treturn strings;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44d3f0582d6a452018910ae9f434d210", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "fddcf2f032850d3eb6550c44c0aeb80fc19a12d0", "commitAfterChange": "3ae6372c58eb26df700867f6c185ea003b6c1de1", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 14, "signatureBeforeChange": " private static String[] parseCommand(String cmd)", "signatureAfterChange": "  static String[] parseCommand(String cmd)", "diff": ["-// Private method for parsing a command line into its arguments.", "-private static String[] parseCommand(String cmd) {", "-\tVector args = new Vector();", "-\tint sIndex = 0;", "-\tint eIndex;", "-\twhile (sIndex < cmd.length()) {", "-\t\t// Trim initial white space of argument.", "-\t\twhile (sIndex < cmd.length() && Compatibility.isWhitespace(cmd.charAt(sIndex))) {", "-\t\t\tsIndex++;", "-\t\t}", "-\t\tif (sIndex < cmd.length()) {", "-\t\t\t// If the command is a quoted string", "-\t\t\tif (cmd.charAt(sIndex) == '\"' || cmd.charAt(sIndex) == '\\'') {", "-\t\t\t\t// Find the terminating quote (or end of line).", "-\t\t\t\t// This code currently does not handle escaped characters (e.g., \" a\\\"b\").", "-\t\t\t\teIndex = sIndex + 1;", "-\t\t\t\twhile (eIndex < cmd.length() && cmd.charAt(eIndex) != cmd.charAt(sIndex)) {", "-\t\t\t\t\teIndex++;", "-\t\t\t\t}", "-\t\t\t\tif (eIndex >= cmd.length()) { // the terminating quote was not found", "-\t\t\t\t\t// Add the argument as is with only one initial quote.", "-\t\t\t\t\targs.addElement(cmd.substring(sIndex, eIndex));", "-\t\t\t\t}", "-\t\t\t\t// else add the argument, trimming off the quotes.", "-\t\t\t\telse {", "-\t\t\t\t\targs.addElement(cmd.substring( sIndex+1, eIndex));", "-\t\t\t\t}", "-\t\t\t\tsIndex = eIndex + 1;", "-\t\t\t}", "-\t\t\t", "-\t\t\t// else use white space for the delimiters.", "-\t\t\telse {", "-\t\t\t\teIndex = sIndex;", "-\t\t\t\twhile (eIndex < cmd.length() && !Compatibility.isWhitespace(cmd.charAt(eIndex))) {", "-\t\t\t\t\teIndex++;", "-\t\t\t\t}", "-\t\t\t\targs.addElement(cmd.substring(sIndex, eIndex));", "-\t\t\t\tsIndex = eIndex + 1;", "-\t\t\t}", "-\t\t}", "-\t", "-\tString[] strings = new String[args.size()];", "-\tfor (int index =0; index < args.size(); index++) {", "-\t\tstrings[index] = (String)args.elementAt(index);", "-\t}", "-\treturn strings;", "+", "+static String[] parseCommand(String cmd) {", "+\tVector args = new Vector();", "+\tint sIndex = 0;", "+\tint eIndex;", "+\twhile (sIndex < cmd.length()) {", "+\t\t/* Trim initial white space of argument. */", "+\t\twhile (sIndex < cmd.length() && Compatibility.isWhitespace(cmd.charAt(sIndex))) {", "+\t\t\tsIndex++;", "+\t\t}", "+\t\tif (sIndex < cmd.length()) {", "+\t\t\t/* If the command is a quoted string */", "+\t\t\tif (cmd.charAt(sIndex) == '\"' || cmd.charAt(sIndex) == '\\'') {", "+\t\t\t\t/* Find the terminating quote (or end of line).", "+\t\t\t\t * This code currently does not handle escaped characters (e.g., \" a\\\"b\").", "+\t\t\t\t */", "+\t\t\t\teIndex = sIndex + 1;", "+\t\t\t\twhile (eIndex < cmd.length() && cmd.charAt(eIndex) != cmd.charAt(sIndex)) eIndex++;", "+\t\t\t\tif (eIndex >= cmd.length()) { ", "+\t\t\t\t\t/* The terminating quote was not found", "+\t\t\t\t\t * Add the argument as is with only one initial quote.", "+\t\t\t\t\t */", "+\t\t\t\t\targs.addElement(cmd.substring(sIndex, eIndex));", "+\t\t\t\t}", "+\t\t\t\telse {", "+\t\t\t\t\t/* Add the argument, trimming off the quotes. */", "+\t\t\t\t\targs.addElement(cmd.substring(sIndex+1, eIndex));", "+\t\t\t\t}", "+\t\t\t\tsIndex = eIndex + 1;", "+\t\t\t}\t\t\t", "+\t\t\telse {", "+\t\t\t\t/* Use white space for the delimiters. */", "+\t\t\t\teIndex = sIndex;", "+\t\t\t\twhile (eIndex < cmd.length() && !Compatibility.isWhitespace(cmd.charAt(eIndex))) eIndex++;", "+\t\t\t\targs.addElement(cmd.substring(sIndex, eIndex));", "+\t\t\t\tsIndex = eIndex + 1;", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+\tString[] strings = new String[args.size()];", "+\tfor (int index =0; index < args.size(); index++) {", "+\t\tstrings[index] = (String)args.elementAt(index);", "+\t}", "+\treturn strings;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2aaebffe47602a8ccab8e7afccc32490", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "dbb652fe193019d96be9d6af80af3f6e1918e181", "commitAfterChange": "a9865ce41544b9634fe7b5cf08a114ae91a2faeb", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 10, "signatureBeforeChange": "  static String[] parseCommand(String cmd)", "signatureAfterChange": "  static String[] parseCommand(String cmd)", "diff": ["+", "+static String[] parseCommand(String cmd) {", "+\tVector args = new Vector();", "+\tint sIndex = 0;", "+\tint eIndex;", "+\twhile (sIndex < cmd.length()) {", "+\t\t/* Trim initial white space of argument. */", "+\t\twhile (sIndex < cmd.length() && Compatibility.isWhitespace(cmd.charAt(sIndex))) {", "+\t\t\tsIndex++;", "+\t\t}", "+\t\tif (sIndex < cmd.length()) {", "+\t\t\t/* If the command is a quoted string */", "+\t\t\tif (cmd.charAt(sIndex) == '\"' || cmd.charAt(sIndex) == '\\'') {", "+\t\t\t\t/* Find the terminating quote (or end of line).", "+\t\t\t\t * This code currently does not handle escaped characters (e.g., \" a\\\"b\").", "+\t\t\t\t */", "+\t\t\t\teIndex = sIndex + 1;", "+\t\t\t\twhile (eIndex < cmd.length() && cmd.charAt(eIndex) != cmd.charAt(sIndex)) eIndex++;", "+\t\t\t\tif (eIndex >= cmd.length()) { ", "+\t\t\t\t\t/* The terminating quote was not found", "+\t\t\t\t\t * Add the argument as is with only one initial quote.", "+\t\t\t\t\t */", "+\t\t\t\t\targs.addElement(cmd.substring(sIndex, eIndex));", "+\t\t\t\t} else {", "+\t\t\t\t\t/* Add the argument, trimming off the quotes. */", "+\t\t\t\t\targs.addElement(cmd.substring(sIndex + 1, eIndex));", "+\t\t\t\t}", "+\t\t\t\tsIndex = eIndex + 1;", "+\t\t\t}", "+\t\t\telse {", "+\t\t\t\t/* Use white space for the delimiters. */", "+\t\t\t\teIndex = sIndex;", "+\t\t\t\twhile (eIndex < cmd.length() && !Compatibility.isWhitespace(cmd.charAt(eIndex))) eIndex++;", "+\t\t\t\targs.addElement(cmd.substring(sIndex, eIndex));", "+\t\t\t\tsIndex = eIndex + 1;", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+\tString[] strings = new String[args.size()];", "+\tfor (int index =0; index < args.size(); index++) {", "+\t\tstrings[index] = (String)args.elementAt(index);", "+\t}", "+\treturn strings;", "+}", "-static String[] parseCommand(String cmd) {", "-\tVector args = new Vector();", "-\tint sIndex = 0;", "-\tint eIndex;", "-\twhile (sIndex < cmd.length()) {", "-\t\t/* Trim initial white space of argument. */", "-\t\twhile (sIndex < cmd.length() && Compatibility.isWhitespace(cmd.charAt(sIndex))) sIndex++;", "-\t\tif (sIndex < cmd.length()) {", "-\t\t\t/* If the command is a quoted string */", "-\t\t\tif (cmd.charAt(sIndex) == '\"' || cmd.charAt(sIndex) == '\\''){", "-\t\t\t\t/* Find the terminating quote (or end of line).", "-\t\t\t\t * This code currently does not handle escaped characters (e.g., \" a\\\"b\").", "-\t\t\t\t */", "-\t\t\t\teIndex = sIndex + 1;", "-\t\t\t\twhile (eIndex < cmd.length() && cmd.charAt(eIndex) != cmd.charAt(sIndex)) eIndex++;", "-\t\t\t\tif (eIndex >= cmd.length()) { ", "-\t\t\t\t\t/* The terminating quote was not found", "-\t\t\t\t\t * Add the argument as is with only one initial quote.", "-\t\t\t\t\t */", "-\t\t\t\t\targs.addElement(cmd.substring(sIndex, eIndex));", "-\t\t\t\t} else {", "-\t\t\t\t\t/* Add the argument, trimming off the quotes. */", "-\t\t\t\t\targs.addElement(cmd.substring(sIndex + 1, eIndex));", "-\t\t\t\t}", "-\t\t\t\tsIndex = eIndex + 1;", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\t/* Use white space for the delimiters. */", "-\t\t\t\teIndex = sIndex;", "-\t\t\t\twhile (eIndex < cmd.length() && !Compatibility.isWhitespace(cmd.charAt(eIndex))) eIndex++;", "-\t\t\t\targs.addElement(cmd.substring(sIndex, eIndex));", "-\t\t\t\tsIndex = eIndex + 1;", "-\t\t\t}", "-\t\t}", "-\t}", "-\t", "-\tString[] strings = new String[args.size()];", "-\tfor (int index =0; index < args.size(); index++) {", "-\t\tstrings[index] = (String)args.elementAt(index);", "-\t}", "-\treturn strings;", "-}"]}], "num": 41779}
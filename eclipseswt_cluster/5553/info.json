{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4093add4b9b5ad68256d66a11aaeff46", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "956f43f0ada202bedde3743f7b8e1d9b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "3f8101474c4f9d64a69b780f9a29957977994c1c", "commitAfterChange": "ec9593cc82c5a72b6479eac5f3bdaf617409cb43", "methodNumberBeforeChange": 140, "methodNumberAfterChange": 144, "signatureBeforeChange": "  LRESULT WM_MOUSEMOVE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_MOUSEMOVE (int wParam, int lParam)", "diff": ["-\tif (itemToolTipHandle != 0 && hwndHeader != 0) {", "+\tif (itemToolTipHandle != 0) {", "-\t\t\tTVHITTESTINFO lpht = new TVHITTESTINFO ();", "-\t\t\tlpht.x = OS.GET_X_LPARAM (lParam);", "-\t\t\tlpht.y = OS.GET_Y_LPARAM (lParam);", "-\t\t\tOS.SendMessage (handle, OS.TVM_HITTEST, 0, lpht);", "-\t\t\tif (lpht.hItem != 0) {", "-\t\t\t\tint /*long*/ hDC = OS.GetDC (handle);", "-\t\t\t\tint /*long*/ oldFont = 0, newFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "-\t\t\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "-\t\t\t\tPOINT pt = new POINT();", "-\t\t\t\tpt.x = lpht.x;", "-\t\t\t\tpt.y = lpht.y;", "-\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\tOS.GetClientRect (hwndParent, rect);", "-\t\t\t\tOS.MapWindowPoints (hwndParent, handle, rect, 2);", "-\t\t\t\tTreeItem item = _getItem (lpht.hItem);", "-\t\t\t\tint index = 0, count = Math.max (1, (int)/*64*/OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0));", "-\t\t\t\tint [] order = new int [count];", "-\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETORDERARRAY, count, order);", "-\t\t\t\twhile (index < count) {", "-\t\t\t\t\tint /*long*/ hFont = item.fontHandle (order [index]);", "-\t\t\t\t\tif (hFont != -1) hFont = OS.SelectObject (hDC, hFont);", "-\t\t\t\t\tRECT cellRect = item.getBounds (order [index], true, false, true, false, true, hDC);", "-\t\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "-\t\t\t\t\tif (cellRect.left > rect.right) break;", "-\t\t\t\t\tcellRect.right = Math.min (cellRect.right, rect.right);", "-\t\t\t\t\tif (OS.PtInRect (cellRect, pt)) {", "-\t\t\t\t\t\tRECT textRect = item.getBounds (order [index], true, false, false, false, false, hDC);", "-\t\t\t\t\t\tif (textRect.right > cellRect.right) {", "-\t\t\t\t\t\t\tTOOLINFO lpti = new TOOLINFO ();", "-\t\t\t\t\t\t\tlpti.cbSize = TOOLINFO.sizeof;", "-\t\t\t\t\t\t\tlpti.hwnd = handle;", "-\t\t\t\t\t\t\tlpti.uId = handle;", "-\t\t\t\t\t\t\tlpti.uFlags = OS.TTF_SUBCLASS | OS.TTF_TRANSPARENT;", "-\t\t\t\t\t\t\tlpti.left = cellRect.left;", "-\t\t\t\t\t\t\tlpti.top = cellRect.top;", "-\t\t\t\t\t\t\tlpti.right = cellRect.right;", "-\t\t\t\t\t\t\tlpti.bottom = cellRect.bottom;", "-\t\t\t\t\t\t\tOS.SendMessage (itemToolTipHandle, OS.TTM_NEWTOOLRECT, 0, lpti);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tindex++;", "-\t\t\t\t}", "-\t\t\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "-\t\t\t\tOS.ReleaseDC (handle, hDC);", "+\t\t\tint x = OS.GET_X_LPARAM (lParam);", "+\t\t\tint y = OS.GET_Y_LPARAM (lParam);", "+\t\t\tint [] index = new int [1];", "+\t\t\tTreeItem [] item = new TreeItem [1];", "+\t\t\tRECT [] cellRect = new RECT [1], itemRect = new RECT [1];", "+\t\t\tif (findCell (x, y, item, index, cellRect, itemRect)) {", "+\t\t\t\tTOOLINFO lpti = new TOOLINFO ();", "+\t\t\t\tlpti.cbSize = TOOLINFO.sizeof;", "+\t\t\t\tlpti.hwnd = handle;", "+\t\t\t\tlpti.uId = handle;", "+\t\t\t\tlpti.uFlags = OS.TTF_SUBCLASS | OS.TTF_TRANSPARENT;", "+\t\t\t\tlpti.left = cellRect [0].left;", "+\t\t\t\tlpti.top = cellRect [0].top;", "+\t\t\t\tlpti.right = cellRect [0].right;", "+\t\t\t\tlpti.bottom = cellRect [0].bottom;", "+\t\t\t\tOS.SendMessage (itemToolTipHandle, OS.TTM_NEWTOOLRECT, 0, lpti);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fd8a02866103c44655a9c8eaead191b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "4a12d1d6eea88c5ee824f832639afbd434b4c67f", "commitAfterChange": "cb6c1213faecee5a06dc536c9d7727408f52370a", "methodNumberBeforeChange": 113, "methodNumberAfterChange": 113, "signatureBeforeChange": "  String toolTipText (NMTTDISPINFO hdr)", "signatureAfterChange": "  String toolTipText (NMTTDISPINFO hdr)", "diff": ["-\t\tint pos = OS.GetMessagePos ();", "-\t\tPOINT pt = new POINT();", "-\t\tpt.x = (short) (pos & 0xFFFF);", "-\t\tpt.y = (short) (pos >> 16);", "-\t\tOS.ScreenToClient (handle, pt);", "-\t\tTVHITTESTINFO lpht = new TVHITTESTINFO ();", "-\t\tlpht.x = pt.x;", "-\t\tlpht.y = pt.y;", "-\t\tOS.SendMessage (handle, OS.TVM_HITTEST, 0, lpht);", "-\t\tif (lpht.hItem != 0) {", "-\t\t\tint hDC = OS.GetDC (handle);", "-\t\t\tint oldFont = 0, newFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "-\t\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "-\t\t\tRECT rect = new RECT ();", "-\t\t\tOS.GetClientRect (hwndParent, rect);", "-\t\t\tOS.MapWindowPoints (hwndParent, handle, rect, 2);", "-\t\t\tTreeItem item = _getItem (lpht.hItem);", "-\t\t\tString text = null;", "-\t\t\tint index = 0, count = Math.max (1, OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0));", "-\t\t\tint [] order = new int [count];", "-\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETORDERARRAY, count, order);", "-\t\t\twhile (index < count) {", "-\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [order [index]] : -1;", "-\t\t\t\tif (hFont == -1) hFont = item.font;", "-\t\t\t\tif (hFont != -1) hFont = OS.SelectObject (hDC, hFont);", "-\t\t\t\tRECT cellRect = item.getBounds (order [index], true, false, true, false, true, hDC);", "-\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "-\t\t\t\tif (cellRect.left > rect.right) break;", "-\t\t\t\tcellRect.right = Math.min (cellRect.right, rect.right);", "-\t\t\t\tif (OS.PtInRect (cellRect, pt)) {", "-\t\t\t\t\tRECT textRect = item.getBounds (order [index], true, false, false, false, false, hDC);", "-\t\t\t\t\tif (textRect.right > cellRect.right) {", "-\t\t\t\t\t\tif (order [index] == 0) {", "-\t\t\t\t\t\t\ttext = item.text;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tString[] strings = item.strings;", "-\t\t\t\t\t\t\tif (strings != null) text = strings [order [index]];", "+\t\tif (toolTipText != null) return \"\";", "+\t\tif (!hooks (SWT.MeasureItem) && !hooks (SWT.EraseItem) && !hooks (SWT.PaintItem)) {", "+\t\t\tint pos = OS.GetMessagePos ();", "+\t\t\tPOINT pt = new POINT();", "+\t\t\tpt.x = (short) (pos & 0xFFFF);", "+\t\t\tpt.y = (short) (pos >> 16);", "+\t\t\tOS.ScreenToClient (handle, pt);", "+\t\t\tTVHITTESTINFO lpht = new TVHITTESTINFO ();", "+\t\t\tlpht.x = pt.x;", "+\t\t\tlpht.y = pt.y;", "+\t\t\tOS.SendMessage (handle, OS.TVM_HITTEST, 0, lpht);", "+\t\t\tif (lpht.hItem != 0) {", "+\t\t\t\tint hDC = OS.GetDC (handle);", "+\t\t\t\tint oldFont = 0, newFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "+\t\t\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "+\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\tOS.GetClientRect (hwndParent, rect);", "+\t\t\t\tOS.MapWindowPoints (hwndParent, handle, rect, 2);", "+\t\t\t\tTreeItem item = _getItem (lpht.hItem);", "+\t\t\t\tString text = null;", "+\t\t\t\tint index = 0, count = Math.max (1, OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0));", "+\t\t\t\tint [] order = new int [count];", "+\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETORDERARRAY, count, order);", "+\t\t\t\twhile (index < count) {", "+\t\t\t\t\tint hFont = item.cellFont != null ? item.cellFont [order [index]] : -1;", "+\t\t\t\t\tif (hFont == -1) hFont = item.font;", "+\t\t\t\t\tif (hFont != -1) hFont = OS.SelectObject (hDC, hFont);", "+\t\t\t\t\tRECT cellRect = item.getBounds (order [index], true, false, true, false, true, hDC);", "+\t\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "+\t\t\t\t\tif (cellRect.left > rect.right) break;", "+\t\t\t\t\tcellRect.right = Math.min (cellRect.right, rect.right);", "+\t\t\t\t\tif (OS.PtInRect (cellRect, pt)) {", "+\t\t\t\t\t\tRECT textRect = item.getBounds (order [index], true, false, false, false, false, hDC);", "+\t\t\t\t\t\tif (textRect.right > cellRect.right) {", "+\t\t\t\t\t\t\tif (order [index] == 0) {", "+\t\t\t\t\t\t\t\ttext = item.text;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tString[] strings = item.strings;", "+\t\t\t\t\t\t\t\tif (strings != null) text = strings [order [index]];", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "-\t\t\t\t\tbreak;", "+\t\t\t\t\tindex++;", "-\t\t\t\tindex++;", "+\t\t\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "+\t\t\t\tOS.ReleaseDC (handle, hDC);", "+\t\t\t\tif (text != null) return text;", "-\t\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "-\t\t\tOS.ReleaseDC (handle, hDC);", "-\t\t\tif (text != null) return text;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5608d5c7c2a1b295ce1ceca2c732834c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "3f8101474c4f9d64a69b780f9a29957977994c1c", "commitAfterChange": "ec9593cc82c5a72b6479eac5f3bdaf617409cb43", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 125, "signatureBeforeChange": "  String toolTipText (NMTTDISPINFO hdr)", "signatureAfterChange": "  String toolTipText (NMTTDISPINFO hdr)", "diff": ["-\tif (itemToolTipHandle == hdr.hwndFrom && hwndHeader != 0) {", "+\tif (itemToolTipHandle == hdr.hwndFrom) {", "-\t\tif (!hooks (SWT.EraseItem) && !hooks (SWT.PaintItem)) {", "-\t\t\tint pos = OS.GetMessagePos ();", "-\t\t\tPOINT pt = new POINT();", "-\t\t\tOS.POINTSTOPOINT (pt, pos);", "-\t\t\tOS.ScreenToClient (handle, pt);", "-\t\t\tTVHITTESTINFO lpht = new TVHITTESTINFO ();", "-\t\t\tlpht.x = pt.x;", "-\t\t\tlpht.y = pt.y;", "-\t\t\tOS.SendMessage (handle, OS.TVM_HITTEST, 0, lpht);", "-\t\t\tif (lpht.hItem != 0) {", "-\t\t\t\tint /*long*/ hDC = OS.GetDC (handle);", "-\t\t\t\tint /*long*/ oldFont = 0, newFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "-\t\t\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "-\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\tOS.GetClientRect (hwndParent, rect);", "-\t\t\t\tOS.MapWindowPoints (hwndParent, handle, rect, 2);", "-\t\t\t\tTreeItem item = _getItem (lpht.hItem);", "-\t\t\t\tString text = null;", "-\t\t\t\tint index = 0, count = Math.max (1, (int)/*64*/OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0));", "-\t\t\t\tint [] order = new int [count];", "-\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETORDERARRAY, count, order);", "-\t\t\t\twhile (index < count) {", "-\t\t\t\t\tint /*long*/ hFont = item.fontHandle (order [index]);", "-\t\t\t\t\tif (hFont != -1) hFont = OS.SelectObject (hDC, hFont);", "-\t\t\t\t\tRECT cellRect = item.getBounds (order [index], true, false, true, false, true, hDC);", "-\t\t\t\t\tif (hFont != -1) OS.SelectObject (hDC, hFont);", "-\t\t\t\t\tif (cellRect.left > rect.right) break;", "-\t\t\t\t\tcellRect.right = Math.min (cellRect.right, rect.right);", "-\t\t\t\t\tif (OS.PtInRect (cellRect, pt)) {", "-\t\t\t\t\t\tRECT textRect = item.getBounds (order [index], true, false, false, false, false, hDC);", "-\t\t\t\t\t\tif (textRect.right > cellRect.right) {", "-\t\t\t\t\t\t\tif (order [index] == 0) {", "-\t\t\t\t\t\t\t\ttext = item.text;", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tString[] strings = item.strings;", "-\t\t\t\t\t\t\t\tif (strings != null) text = strings [order [index]];", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t\tindex++;", "-\t\t\t\t}", "-\t\t\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "-\t\t\t\tOS.ReleaseDC (handle, hDC);", "-\t\t\t\tif (text != null) return text;", "+\t\tint pos = OS.GetMessagePos ();", "+\t\tPOINT pt = new POINT();", "+\t\tOS.POINTSTOPOINT (pt, pos);", "+\t\tOS.ScreenToClient (handle, pt);", "+\t\tint [] index = new int [1];", "+\t\tTreeItem [] item = new TreeItem [1];", "+\t\tRECT [] cellRect = new RECT [1], itemRect = new RECT [1];", "+\t\tif (findCell (pt.x, pt.y, item, index, cellRect, itemRect)) {", "+\t\t\tString text = null;", "+\t\t\tif (index [0] == 0) {", "+\t\t\t\ttext = item [0].text;", "+\t\t\t} else {", "+\t\t\t\tString[] strings = item [0].strings;", "+\t\t\t\tif (strings != null) text = strings [index [0]];", "+\t\t\t//TEMPORARY CODE", "+\t\t\tif (hooks (SWT.MeasureItem) || hooks (SWT.EraseItem) || hooks (SWT.PaintItem)) {", "+\t\t\t\ttext = \" \";", "+\t\t\t}", "+\t\t\tif (text != null) return text;"]}], "num": 5553}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ba089c987624a3ec20495a64873ac484", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d7cbb802232e6ff2f020845fc4d4ed3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "094d741e56b6f436da51b017270886d4b72c6a8d", "commitAfterChange": "bd6625b33ee8355959ac2791f092e41f5e4be559", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 35, "signatureBeforeChange": " \tpublic void removeRelation(int type, Accessible target)", "signatureAfterChange": " \tpublic void removeRelation(int type, Accessible target)", "diff": ["-\t\tfor (int i = relations.size() - 1; i >= 0; i--) {", "-\t\t\tRelation relation = (Relation)relations.elementAt(i);", "-\t\t\tif (relation.type == type && relation.target == target) {", "-\t\t\t\trelations.remove(i);", "-\t\t\t\tif (accessibleObject != null) {", "-\t\t\t\t\taccessibleObject.removeRelation(relation.type, relation.target);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "+\t\tRelation relation = new Relation(type, target);", "+\t\tint index = relations.indexOf(relation);", "+\t\tif (index == -1) return;", "+\t\trelations.remove(index);", "+\t\tif (accessibleObject != null) accessibleObject.removeRelation(type, target);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f87b805f22728d466c77aa3fc61a9228", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "bb1bd4ba21003c40cbce37f8f5fa1bad4b03f29e", "commitAfterChange": "9884e28d2a23e68683382feeabc8668cb58c5f54", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r void setItemOrder (int [] itemOrder)", "signatureAfterChange": "\r void setItemOrder (int [] itemOrder)", "diff": ["+ */\r", "+void setItemOrder (int [] itemOrder) {\r", "+\tif (itemOrder == null) error (SWT.ERROR_NULL_ARGUMENT);\r", "+\tint itemCount = OS.SendMessage (handle, OS.RB_GETBANDCOUNT, 0, 0);\r", "+\tif (itemOrder.length != itemCount) error (SWT.ERROR_INVALID_ARGUMENT);\r", "+\t\r", "+\t/* Ensure that itemOrder does not contain any duplicates. */\r", "+\tboolean [] set = new boolean [itemCount];\r", "+\tfor (int i=0; i<itemOrder.length; i++) {\r", "+\t\tint index = itemOrder [i];\r", "+\t\tif (index < 0 || index >= itemCount) error (SWT.ERROR_INVALID_RANGE);\r", "+\t\tif (set [index]) error (SWT.ERROR_INVALID_ARGUMENT);\r", "+\t\tset [index] = true;\r", "+\t}\r", "+\t\r", "+\tfor (int i=0; i<itemOrder.length; i++) {\r", "+\t\tint id = originalItems [itemOrder [i]].id;\r", "+\t\tint index = OS.SendMessage (handle, OS.RB_IDTOINDEX, id, 0);\r", "+\t\tOS.SendMessage (handle, OS.RB_MOVEBAND, index, i);\r", "+\t}\r", "+}\r", "- */\r", "-void setItemOrder (int [] itemOrder) {\r", "-\tif (itemOrder == null) error (SWT.ERROR_NULL_ARGUMENT);\r", "-\tint itemCount = OS.SendMessage (handle, OS.RB_GETBANDCOUNT, 0, 0);\r", "-\tif (itemOrder.length != itemCount) error (SWT.ERROR_INVALID_ARGUMENT);\r", "-\t\r", "-\t/* Ensure that itemOrder does not contain any duplicates. */\r", "-\tboolean [] set = new boolean [itemCount];\r", "-\tfor (int i = 0; i < set.length; i++) set [i] = false;\r", "-\tfor (int i = 0; i < itemOrder.length; i++) {\r", "-\t\tif (itemOrder [i] < 0 || itemOrder [i] >= itemCount) error (SWT.ERROR_INVALID_ARGUMENT);\r", "-\t\tif (set [itemOrder [i]]) error (SWT.ERROR_INVALID_ARGUMENT);\r", "-\t\tset [itemOrder [i]] = true;\r", "-\t}\r", "-\t\r", "-\tfor (int i = 0; i < itemOrder.length; i++) {\r", "-\t\tint id = originalItems [itemOrder [i]].id;\r", "-\t\tint currentIndex = OS.SendMessage (handle, OS.RB_IDTOINDEX, id, 0);\r", "-\t\tOS.SendMessage (handle, OS.RB_MOVEBAND, currentIndex, i);\r", "-\t}\r", "-}\r"]}], "num": 24833}
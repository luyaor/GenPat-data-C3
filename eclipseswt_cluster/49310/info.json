{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "838d7ef064ceddf776c454952c118c22", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5703167c5fe9e34f545576287ba29aa5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "35be8ad5696880189b8973d12da83e42dd6fc194", "commitAfterChange": "3d12b10107474c7c107aa5097ed6447519f113dc", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  int handleCallback(int nextHandler, int theEvent)", "signatureAfterChange": "  int handleCallback(int nextHandler, int theEvent)", "diff": ["+\t\tcase OS.kEventControlDraw: {", "+\t\t\t/*", "+\t\t\t* Bug on Safari. The web view cannot be obscured by other views above it.", "+\t\t\t* This problem is specified in the apple documentation for HiWebViewCreate.", "+\t\t\t* The workaround is to don't draw the web view when it is not visible.", "+\t\t\t*/", "+\t\t\tif (!isVisible ()) return OS.noErr;", "+\t\t\tbreak;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eee494f1f87dbbf407d51c5d2c5eca8e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "1711d408501eb7d603d6126d194b1a87f7bd6a21", "commitAfterChange": "a23418dc321574901b1ff2db4f3a38cd66b96b76", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": "  int kEventUnicodeKeyPressed (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventUnicodeKeyPressed (int nextHandler, int theEvent, int userData)", "diff": ["+\t\t\t/*", "+\t\t\t* Bug in the Macintosh (Leopard).  When focus is changed to another control", "+\t\t\t* when an arrow key is pressed inside of kEventUnicodeKeyPressed, when ", "+\t\t\t* the window that contains the text control is disposed, it crashes.", "+\t\t\t* The fix is to avoid calling the default handler when focus changes.", "+\t\t\t*/", "+\t\t\tcase 125: /* Down */", "+\t\t\tcase 126: { /* Up*/", "+\t\t\t\tif (!hasFocus ()) return OS.noErr;", "+\t\t\t}"]}], "num": 49310}
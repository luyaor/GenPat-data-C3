{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b698c5099f034e258db31f81821330e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9dca839dbdafcc703695c0a0e33ce125", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "commitAfterChange": "bbeab947327689cb203638e742e58f555e6c1b64", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 104, "signatureBeforeChange": " private void showToolTip (int x, int y)", "signatureAfterChange": " void showToolTip (int x, int y)", "diff": ["+void showToolTip (int x, int y) {", "+\tfinal Shell tip = new Shell (getShell(), SWT.ON_TOP);", "+\tfinal Label label = new Label (tip, SWT.CENTER);", "+\tDisplay display = tip.getDisplay();", "+\tlabel.setForeground (display.getSystemColor (SWT.COLOR_INFO_FOREGROUND));", "+\tlabel.setBackground (display.getSystemColor (SWT.COLOR_INFO_BACKGROUND));", "+\t", "+\tif (!updateToolTip(x, y, label)) {", "+\t\ttip.dispose();", "+\t\treturn;", "+\tfinal int [] events = new int[] {SWT.MouseExit, SWT.MouseHover, SWT.MouseMove};", "+\tfinal Listener[] listener = new Listener[1];", "+\tlistener[0] = new Listener() {", "+\t\tpublic void handleEvent(Event event) {", "+\t\t\tswitch (event.type) {", "+\t\t\t\tcase SWT.MouseHover:", "+\t\t\t\tcase SWT.MouseMove:", "+\t\t\t\t\tif (updateToolTip(event.x, event.y, label)) break;", "+\t\t\t\t\t// FALL THROUGH", "+\t\t\t\tcase SWT.MouseExit:", "+\t\t\t\t\tfor (int i = 0; i < events.length; i++) {", "+\t\t\t\t\t\tremoveListener(events[i], listener[0]);", "+\t\t\t\t\t}", "+\t\t\t\t\ttip.dispose();", "+\t\t\t\t\ttipShowing = false;", "+\t\t\t\t\tbreak;", "+\t};", "+\tfor (int i = 0; i < events.length; i++) {", "+\t\taddListener(events[i], listener[0]);", "+\ttipShowing = true;", "+\ttip.setVisible(true);", "-}", "-private void showToolTip (int x, int y) {", "-\tCTabItem item = getItem(new Point (x, y));", "-\tif (item != null) {", "-\t\tif (item == toolTipItem) return;", "-\t\ttoolTipItem = item;", "-\t\tString tooltip = item.getToolTipText();", "-\t\tif (tooltip != null) {\t\t\t", "-\t\t\tDisplay display = tip.getDisplay();", "-\t\t\tlabel.setForeground (display.getSystemColor (SWT.COLOR_INFO_FOREGROUND));", "-\t\t\tlabel.setBackground (display.getSystemColor (SWT.COLOR_INFO_BACKGROUND));", "-\t\t\tlabel.setText(tooltip);", "-\t\t\tPoint labelSize = label.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\t\tlabelSize.x += 2; labelSize.y += 2;", "-\t\t\tlabel.setSize(labelSize);", "-\t\t\ttip.pack();", "-\t\t\t/*", "-\t\t\t * On some platforms, there is a minimum size for a shell  ", "-\t\t\t * which may be greater than the label size.", "-\t\t\t * To avoid having the background of the tip shell showing", "-\t\t\t * around the label, force the label to fill the entire client area.", "-\t\t\t */", "-\t\t\tRectangle area = tip.getClientArea();", "-\t\t\tlabel.setSize(area.width, area.height);", "-\t\t\t/*", "-\t\t\t * Position the tooltip and ensure that it is not located off", "-\t\t\t * the screen.", "-\t\t\t */", "-\t\t\tPoint pt = new Point(item.x + item.width / 4, item.y + item.height + 2);", "-\t\t\tpt = toDisplay(pt);", "-\t\t\tRectangle rect = display.getBounds();", "-\t\t\tPoint tipSize = tip.getSize();", "-\t\t\tpt.x = Math.max (0, Math.min (pt.x, rect.width - tipSize.x));", "-\t\t\tpt.y = Math.max (0, Math.min (pt.y, rect.height - tipSize.y));", "-\t\t\ttip.setLocation(pt);", "-\t\t\ttip.setVisible(true);", "-\t\t\treturn;", "-\t\t}", "-\t", "-\ttoolTipItem = null;", "-\tif (tip != null && !tip.isDisposed() && tip.isVisible()) tip.setVisible(false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "62f895bd3920c47a25267fd7ec2659b8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "6f2458ace0a6f47ce0de64336c1150a04c7a0893", "commitAfterChange": "306bec7607b19121918a808335b7ecf61e93fdf9", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 114, "signatureBeforeChange": " void showToolTip (int x, int y)", "signatureAfterChange": " void showToolTip (int x, int y)", "diff": ["+}", "-\tfinal Shell tip = new Shell (getShell(), SWT.ON_TOP);", "-\tfinal Label label = new Label (tip, SWT.CENTER);", "-\tDisplay display = tip.getDisplay();", "-\tlabel.setForeground (display.getSystemColor (SWT.COLOR_INFO_FOREGROUND));", "-\tlabel.setBackground (display.getSystemColor (SWT.COLOR_INFO_BACKGROUND));", "-\t", "-\tif (!updateToolTip(x, y, label)) {", "-\t\ttip.dispose();", "-\t\treturn;", "-\t}", "-\t", "-\tfinal int [] events = new int[] {SWT.MouseExit, SWT.MouseHover, SWT.MouseMove, SWT.MouseDown, SWT.DragDetect};", "-\tfinal Listener[] listener = new Listener[1];", "-\tlistener[0] = new Listener() {", "-\t\tpublic void handleEvent(Event event) {", "-\t\t\tswitch (event.type) {", "-\t\t\t\tcase SWT.MouseHover:", "-\t\t\t\tcase SWT.MouseMove:", "-\t\t\t\t\tif (updateToolTip(event.x, event.y, label)) break;", "-\t\t\t\t\t// FALL THROUGH", "-\t\t\t\tcase SWT.MouseExit:", "-\t\t\t\tcase SWT.MouseDown:", "-\t\t\t\tcase SWT.DragDetect:", "-\t\t\t\t\tfor (int i = 0; i < events.length; i++) {", "-\t\t\t\t\t\tremoveListener(events[i], listener[0]);", "-\t\t\t\t\t}", "-\t\t\t\t\ttip.dispose();", "-\t\t\t\t\ttipShowing = false;", "-\t\t\t\t\tbreak;", "-\t\t\t}", "+\tif (toolTipShell == null) {", "+\t\ttoolTipShell = new Shell (getShell(), SWT.ON_TOP);", "+\t\ttoolTipLabel = new Label (toolTipShell, SWT.CENTER);", "+\t\tDisplay display = toolTipShell.getDisplay();", "+\t\ttoolTipLabel.setForeground (display.getSystemColor (SWT.COLOR_INFO_FOREGROUND));", "+\t\ttoolTipLabel.setBackground (display.getSystemColor (SWT.COLOR_INFO_BACKGROUND));", "+\t\tfor (int i = 0; i < toolTipEvents.length; i++) {", "+\t\t\taddListener(toolTipEvents[i], toolTipListener);", "-\t};", "-\tfor (int i = 0; i < events.length; i++) {", "-\t\taddListener(events[i], listener[0]);", "-\ttipShowing = true;", "-\ttip.setVisible(true);", "+\tif (updateToolTip(x, y)) {", "+\t\ttoolTipShell.setVisible(true);", "+\t} else {", "+\t\thideToolTip();", "+\t}", "+\t"]}], "num": 38248}
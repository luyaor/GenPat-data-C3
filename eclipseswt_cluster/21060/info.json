{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27be4d29e322f515ac5800d66d331d68", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5141a5518e86a650600cf5a54598d7ce", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "80da648e54c5996231a82e37f7ddac42a9763361", "commitAfterChange": "123ea21435945c9585ede55bef80d1e5c5621abd", "methodNumberBeforeChange": 216, "methodNumberAfterChange": 216, "signatureBeforeChange": "  LRESULT WM_SYSCOMMAND (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_SYSCOMMAND (int wParam, int lParam)", "diff": ["-\t\t\tif (hooks (SWT.KeyDown) || hooks (SWT.KeyUp)) {", "+\t\t\t/*", "+\t\t\t* When lParam is zero, one of F10, Shift+F10, Ctrl+F10 or", "+\t\t\t* Ctrl+Shift+F10 was pressed.  If there is no menu bar and", "+\t\t\t* the focus control is interested in keystrokes, give the", "+\t\t\t* key to the focus control.  Normally, F10 with no menu bar", "+\t\t\t* moves focus to the System menu but this can be achieved", "+\t\t\t* using Alt+Space.  To allow the application to see F10,", "+\t\t\t* avoid running the default window proc.", "+\t\t\t* ", "+\t\t\t* NOTE:  When F10 is pressed, WM_SYSCOMMAND is sent to the", "+\t\t\t* shell, not the focus control.  This is undocumented Windows", "+\t\t\t* behavior.", "+\t\t\t*/", "+\t\t\tif (lParam == 0) {", "-\t\t\t\tif (menu != null) {", "-\t\t\t\t\tchar key = mbcsToWcs (lParam);", "-\t\t\t\t\tif (key != 0) {", "-\t\t\t\t\t\tkey = Character.toUpperCase (key);", "-\t\t\t\t\t\tMenuItem [] items = menu.getItems ();", "-\t\t\t\t\t\tfor (int i=0; i<items.length; i++) {", "-\t\t\t\t\t\t\tMenuItem item = items [i];", "-\t\t\t\t\t\t\tString text = item.getText ();", "-\t\t\t\t\t\t\tchar mnemonic = findMnemonic (text);", "-\t\t\t\t\t\t\tif (text.length () > 0 && mnemonic == 0) {", "-\t\t\t\t\t\t\t\tchar ch = text.charAt (0);", "-\t\t\t\t\t\t\t\tif (Character.toUpperCase (ch) == key) {", "-\t\t\t\t\t\t\t\t\tdisplay.mnemonicKeyHit = false;", "-\t\t\t\t\t\t\t\t\treturn LRESULT.ZERO;", "+\t\t\t\tif (menu == null) {", "+\t\t\t\t\tControl control = display.getFocusControl ();", "+\t\t\t\t\tif (control != null) {", "+\t\t\t\t\t\tif (control.hooks (SWT.KeyDown) || control.hooks (SWT.KeyUp)) {", "+\t\t\t\t\t\t\tdisplay.mnemonicKeyHit = false;", "+\t\t\t\t\t\t\treturn LRESULT.ZERO;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\t/*", "+\t\t\t\t* When lParam is not zero, Alt+<key> was pressed.  If the", "+\t\t\t\t* application is interested in keystrokes and there is a", "+\t\t\t\t* menu bar, check to see whether the key that was pressed", "+\t\t\t\t* matches a mnemonic on the menu bar.  Normally, Windows", "+\t\t\t\t* matches the first character of a menu item as well as", "+\t\t\t\t* matching the mnemonic character.  To allow the application", "+\t\t\t\t* to see the keystrokes in this case, avoid running the default", "+\t\t\t\t* window proc.", "+\t\t\t\t*/", "+\t\t\t\tif (hooks (SWT.KeyDown) || hooks (SWT.KeyUp)) {", "+\t\t\t\t\tDecorations shell = menuShell ();", "+\t\t\t\t\tMenu menu = shell.getMenuBar ();", "+\t\t\t\t\tif (menu != null) {", "+\t\t\t\t\t\tchar key = mbcsToWcs (lParam);", "+\t\t\t\t\t\tif (key != 0) {", "+\t\t\t\t\t\t\tkey = Character.toUpperCase (key);", "+\t\t\t\t\t\t\tMenuItem [] items = menu.getItems ();", "+\t\t\t\t\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\t\t\t\t\tMenuItem item = items [i];", "+\t\t\t\t\t\t\t\tString text = item.getText ();", "+\t\t\t\t\t\t\t\tchar mnemonic = findMnemonic (text);", "+\t\t\t\t\t\t\t\tif (text.length () > 0 && mnemonic == 0) {", "+\t\t\t\t\t\t\t\t\tchar ch = text.charAt (0);", "+\t\t\t\t\t\t\t\t\tif (Character.toUpperCase (ch) == key) {", "+\t\t\t\t\t\t\t\t\t\tdisplay.mnemonicKeyHit = false;", "+\t\t\t\t\t\t\t\t\t\treturn LRESULT.ZERO;", "+\t\t\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c1346dab0bdf505ac4ef4712b0dc552", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "af987d79bbefe760ecc0750e83d73e53f065fb22", "commitAfterChange": "71ff02553cf1ff4616b285d77414ec9fa8eafec3", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 219, "signatureBeforeChange": "  LRESULT WM_SYSCOMMAND (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_SYSCOMMAND (int wParam, int lParam)", "diff": ["+\t\t\t\t* ", "+\t\t\t\t* NOTE: When the user types Alt+Space, the System menu is", "+\t\t\t\t* activated.  In this case the application should not see", "+\t\t\t\t* the keystroke.", "-\t\t\t\t\tDecorations shell = menuShell ();", "-\t\t\t\t\tMenu menu = shell.getMenuBar ();", "-\t\t\t\t\tif (menu != null) {", "-\t\t\t\t\t\tchar key = mbcsToWcs (lParam);", "-\t\t\t\t\t\tif (key != 0) {", "-\t\t\t\t\t\t\tkey = Character.toUpperCase (key);", "-\t\t\t\t\t\t\tMenuItem [] items = menu.getItems ();", "-\t\t\t\t\t\t\tfor (int i=0; i<items.length; i++) {", "-\t\t\t\t\t\t\t\tMenuItem item = items [i];", "-\t\t\t\t\t\t\t\tString text = item.getText ();", "-\t\t\t\t\t\t\t\tchar mnemonic = findMnemonic (text);", "-\t\t\t\t\t\t\t\tif (text.length () > 0 && mnemonic == 0) {", "-\t\t\t\t\t\t\t\t\tchar ch = text.charAt (0);", "-\t\t\t\t\t\t\t\t\tif (Character.toUpperCase (ch) == key) {", "-\t\t\t\t\t\t\t\t\t\tdisplay.mnemonicKeyHit = false;", "-\t\t\t\t\t\t\t\t\t\treturn LRESULT.ZERO;", "+\t\t\t\t\tif (lParam != ' ') {", "+\t\t\t\t\t\tDecorations shell = menuShell ();", "+\t\t\t\t\t\tMenu menu = shell.getMenuBar ();", "+\t\t\t\t\t\tif (menu != null) {", "+\t\t\t\t\t\t\tchar key = mbcsToWcs (lParam);", "+\t\t\t\t\t\t\tif (key != 0) {", "+\t\t\t\t\t\t\t\tkey = Character.toUpperCase (key);", "+\t\t\t\t\t\t\t\tMenuItem [] items = menu.getItems ();", "+\t\t\t\t\t\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\t\t\t\t\t\tMenuItem item = items [i];", "+\t\t\t\t\t\t\t\t\tString text = item.getText ();", "+\t\t\t\t\t\t\t\t\tchar mnemonic = findMnemonic (text);", "+\t\t\t\t\t\t\t\t\tif (text.length () > 0 && mnemonic == 0) {", "+\t\t\t\t\t\t\t\t\t\tchar ch = text.charAt (0);", "+\t\t\t\t\t\t\t\t\t\tif (Character.toUpperCase (ch) == key) {", "+\t\t\t\t\t\t\t\t\t\t\tdisplay.mnemonicKeyHit = false;", "+\t\t\t\t\t\t\t\t\t\t\treturn LRESULT.ZERO;", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tdisplay.mnemonicKeyHit = false;"]}], "num": 21060}
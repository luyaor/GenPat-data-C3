{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "622e9f10c991407fa3e4cc48cbbab0f3", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b2765de98cad9ac105dc4e575cbd288c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "5d38390584adf79405cd86a4c28992ccdbd567df", "commitAfterChange": "b0a0bcf30f09c2ffbb2137bd933ec7f8ce62d60c", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tXtWidgetGeometry result = new XtWidgetGeometry ();", "-\tresult.request_mode = OS.CWWidth | OS.CWHeight;", "-\tint [] argList2 = {OS.XmNrecomputeSize, 1};", "-\tOS.XtSetValues(handle, argList2, argList2.length / 2);", "-\tOS.XtQueryGeometry (handle, null, result);", "-\tint [] argList3 = {OS.XmNrecomputeSize, 0};", "-\tOS.XtSetValues(handle, argList3, argList3.length / 2);", "-\twidth += result.width;", "-\theight += result.height;", "+\tint [] argList = {OS.XmNlabelType, 0};", "+\tOS.XtGetValues (handle, argList, argList.length / 2);", "+\tint labelType = argList [1];", "+\tif (labelType == OS.XmSTRING && (style & SWT.WRAP) != 0) {", "+\t\t/* If we are wrapping text, calculate the height based on wHint. */", "+\t\tint [] argList2 = {", "+\t\t\tOS.XmNmarginTop, 0,     /* 1 */", "+\t\t\tOS.XmNmarginBottom, 0,  /* 3 */", "+\t\t\tOS.XmNmarginHeight, 0,  /* 5 */", "+\t\t\tOS.XmNmarginWidth, 0,   /* 7 */", "+\t\t\tOS.XmNmarginLeft, 0,    /* 9 */", "+\t\t\tOS.XmNmarginRight, 0,   /* 11 */", "+\t\t\tOS.XmNspacing, 0, /* 13 */", "+\t\t\tOS.XmNdefaultButtonShadowThickness, 0, /* 15 */", "+\t\t};", "+\t\tOS.XtGetValues (handle, argList2, argList2.length / 2);", "+\t\tint trimWidth = (argList2 [7] * 2) + argList2 [9] + argList2 [11] + argList2 [13] + 2 * border + 2 * argList2[15];", "+\t\tString string = text;", "+\t\tif (wHint != SWT.DEFAULT) {", "+\t\t\tstring = display.wrapText (string, font, wHint - trimWidth);", "+\t\t}", "+\t\tGC gc = new GC (this);", "+\t\tPoint extent = gc.textExtent (string);", "+\t\tgc.dispose ();", "+\t\theight = extent.y + argList2 [1] + argList2 [3] + (argList2 [5] * 2) + (border * 2);", "+\t\tif (wHint == SWT.DEFAULT) {", "+\t\t\twidth = extent.x + trimWidth;", "+\t\t}", "+\t} else {", "+\t\tXtWidgetGeometry result = new XtWidgetGeometry ();", "+\t\tresult.request_mode = OS.CWWidth | OS.CWHeight;", "+\t\tint [] argList2 = {OS.XmNrecomputeSize, 1};", "+\t\tOS.XtSetValues(handle, argList2, argList2.length / 2);", "+\t\tOS.XtQueryGeometry (handle, null, result);", "+\t\tint [] argList3 = {OS.XmNrecomputeSize, 0};", "+\t\tOS.XtSetValues(handle, argList3, argList3.length / 2);", "+\t\twidth += result.width;", "+\t\theight += result.height;", "+\t}", "-\tint [] argList = {OS.XmNlabelType, 0};", "-\tOS.XtGetValues (handle, argList, argList.length / 2);", "-\tif (argList [1] == OS.XmSTRING) {", "+\tif (labelType == OS.XmSTRING) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a7cac56126fda874a8d143833fce5b8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r public void setText (String string)", "signatureAfterChange": "\r public void setText (String string)", "diff": ["-*/\r", "+ */\r", "-\tchar [] text = new char [string.length ()];\r", "-\tstring.getChars (0, text.length, text, 0);\r", "+\ttext = string;\r", "+\t\r", "+\t/* Strip out mnemonic marker symbols, and remember the mnemonic. */\r", "+\tchar [] unicode = new char [string.length ()];\r", "+\tstring.getChars (0, unicode.length, unicode, 0);\r", "-\twhile (i < text.length) {\r", "-\t\tif ((text [j++] = text [i++]) == Mnemonic) {\r", "-\t\t\tif (i == text.length) {continue;}\r", "-\t\t\tif (text [i] == Mnemonic) {i++; continue;}\r", "-\t\t\tif (mnemonic == 0) mnemonic = text [i];\r", "+\twhile (i < unicode.length) {\r", "+\t\tif ((unicode [j++] = unicode [i++]) == Mnemonic) {\r", "+\t\t\tif (i == unicode.length) {continue;}\r", "+\t\t\tif (unicode [i] == Mnemonic) {i++; continue;}\r", "+\t\t\tif (mnemonic == 0) mnemonic = unicode [i];\r", "-\twhile (j < text.length) text [j++] = 0;\r", "-\tbyte [] buffer = Converter.wcsToMbcs (null, text, true);\r", "+\twhile (j < unicode.length) unicode [j++] = 0;\r", "+\t\r", "+\t/* Wrap the text if necessary, and convert to mbcs. */\r", "+\tbyte [] buffer;\r", "+\tif ((style & SWT.WRAP) != 0) {\r", "+\t\tint [] argList = {\r", "+\t\t\tOS.XmNfontList, 0,     /* 1 */\r", "+\t\t\tOS.XmNwidth, 0,        /* 3 */\r", "+\t\t\tOS.XmNmarginLeft, 0,   /* 5 */\r", "+\t\t\tOS.XmNmarginRight, 0,  /* 7 */\r", "+\t\t\tOS.XmNborderWidth, 0,  /* 9 */\r", "+\t\t\tOS.XmNmarginWidth, 0,  /* 11 */\r", "+\t\t};\r", "+\t\tOS.XtGetValues (handle, argList, argList.length / 2);\r", "+\t\tint width = argList [3] - argList [5] - argList [7] - argList [9] * 2 - argList [11] * 2;\r", "+\t\tDisplay display = getDisplay ();\r", "+\t\tif (mnemonic != 0) string = new String(unicode);\r", "+\t\tstring = display.wrapText (string, argList [1], width);\r", "+\t\tbuffer = Converter.wcsToMbcs (null, string, true);\r", "+\t} else {\r", "+\t\tbuffer = Converter.wcsToMbcs (null, unicode, true);\r", "+\t}\r", "+\t\r", "-\tif (xmString == 0) error (SWT.ERROR_CANNOT_SET_TEXT);\r", "+\tif (xmString == 0) error (SWT.ERROR_CANNOT_SET_TEXT);", "+\tif (mnemonic == 0) mnemonic = OS.XK_VoidSymbol;\r", "-}\r"]}], "num": 60491}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3838ec6be237929950bccc91b406b32b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a287b58765030b1415032481ca5a90c8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "91999dea023f538a28afe60645e6dff08a1085a9", "commitAfterChange": "d2c1767eb08a28bfa31c8e2d549b4275c725bd40", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "  char [] getEditText (int start, int end)", "signatureAfterChange": "  char [] getEditText ()", "diff": ["+char [] getEditText () {", "+\tint [] ptr = new int [1];", "+\tint [] actualSize = new int [1];", "+\tint result = OS.GetControlData (handle, (short)OS.kControlEntireControl, OS.kControlEditTextCFStringTag, 4, ptr, actualSize);", "+\tif (result != OS.noErr) return new char [0];", "+\tint length = OS.CFStringGetLength (ptr [0]);", "+\tCFRange range = new CFRange ();", "+\trange.length = length;", "+\tchar [] buffer = new char [range.length];", "+\tif (hiddenText != null) {", "+\t\thiddenText.getChars (0, range.length, buffer, 0);", "+\t} else {", "+\t\tOS.CFStringGetCharacters (ptr [0], range, buffer);", "+\t}", "+\tOS.CFRelease (ptr [0]);", "+\treturn buffer;", "+}", "-\tif (end == -1) {", "-\t\trange.length = Math.max (0, length - start);", "-\t} else {", "-\t\tend = Math.min (Math.max (0, end), length - 1);", "-\t\trange.length = Math.max (0, end - start + 1);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac225c961ca6542787d14e43ce1a4016", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/DisplayRenderer.java", "commitBeforeChange": "5544ce1d748561f71c4f1d1997c431f82e5c4c86", "commitAfterChange": "24e0049851c0d0a09cb9f25e5892d112e2936fed", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " protected void drawLineBreakSelection(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi)", "signatureAfterChange": " protected void drawLineBreakSelection(String line, int lineOffset, int paintX, int paintY, GC gc)", "diff": ["-protected void drawLineBreakSelection(String line, int lineOffset, StyleRange[] styles, int paintY, GC gc, StyledTextBidi bidi) {", "+protected void drawLineBreakSelection(String line, int lineOffset, int paintX, int paintY, GC gc) {", "-\tint paintX;", "-\tint horizontalScrollOffset = parent.internalGetHorizontalPixel();", "-\tint leftMargin = getLeftMargin();", "-\tif (bidi != null) {", "-\t\tpaintX = bidi.getTextWidth();", "-\t\t// handle empty line case", "-\t\tif (paintX == 0) {", "-\t\t\tpaintX = StyledText.XINSET;", "-\t\t}", "-\t}", "-\telse {", "-\t\tpaintX = getTextPosition(line, lineOffset, lineLength, filterLineStyles(styles), gc);", "-\t}", "+\t", "-\t\tLineCache lineCache = parent.internalGetLineCache();", "-\t\t// use the greater of the client area width and the content ", "-\t\t// width. fixes 1G8IYRD", "-\t\tint selectionBackgroundWidth = Math.max(getClientArea().width, lineCache.getWidth());", "-\t\tgc.fillRectangle(paintX - horizontalScrollOffset + leftMargin, paintY, selectionBackgroundWidth, lineHeight);", "-\t}", "-\telse {", "+\t\tgc.fillRectangle(paintX, paintY, getClientArea().width - paintX, lineHeight);", "+\t} else {", "-\t\t\tgc.fillRectangle(paintX - horizontalScrollOffset + leftMargin, paintY, lineEndSpaceWidth, lineHeight);", "+\t\t\tgc.fillRectangle(paintX, paintY, lineEndSpaceWidth, lineHeight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4985ee99abb96cf0ff7a99051ed3eefd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "b8f9d45a80c733a8f5884af87c95e68f3463aaa7", "commitAfterChange": "e2ae18014fd9c71ab4dc0b52900b77c1d3a0f5b7", "methodNumberBeforeChange": 253, "methodNumberAfterChange": 254, "signatureBeforeChange": "\r void showOffset(int offset)", "signatureAfterChange": "\r void showOffset(int offset)", "diff": ["-\tint clientAreaWidth = getClientArea().width;\r", "-\tint verticalIncrement = getVerticalIncrement();\r", "-\tint horizontalIncrement = clientAreaWidth / 4;\r", "-\tif (xAtOffset < 0) {\r", "-\t\t// always make 1/4 of a page visible\r", "-\t\txAtOffset = Math.max(horizontalScrollOffset * -1, xAtOffset - horizontalIncrement);\t\r", "-\t\tscrollHorizontalBar(xAtOffset);\r", "-\t}\r", "-\telse \r", "-\tif (xAtOffset > clientAreaWidth) {\r", "-\t\t// always make 1/4 of a page visible\r", "-\t\txAtOffset = Math.min(contentWidth.getWidth() - horizontalScrollOffset, xAtOffset + horizontalIncrement);\r", "-\t\tscrollHorizontalBar(xAtOffset - clientAreaWidth);\r", "-\t}\r", "-\tif (line < topIndex) {\r", "-\t\tsetVerticalScrollOffset(line * verticalIncrement, true);\r", "-\t}\r", "-\telse\r", "-\tif (line > getBottomIndex()) {\r", "-\t\tsetVerticalScrollOffset((line - getBottomIndex()) * verticalIncrement + verticalScrollOffset, true);\r", "-\t}\r", "+\tshowLocation(xAtOffset, line);\t\r"]}], "num": 44525}
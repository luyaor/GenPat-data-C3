{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b9d590bf4798d7db8d3fdca7e3404269", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "829b987b4b91b602bab65aa97894e7cc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "3d16bdf9400649d9f4f0fff0831768ba6c38fdea", "commitAfterChange": "70ee706a89f93c19e2b71b9fd101577af18a1f87", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 57, "signatureBeforeChange": " public Image getSystemImage (int style)", "signatureAfterChange": " public Image getSystemImage (int style)", "diff": ["+\tint mask = 0;", "+\t\t\t\terrorMask = createMask (errorImage);", "+\t\t\tmask = errorMask;", "+\t\t\t\tinfoMask = createMask (infoImage);", "+\t\t\tmask = infoMask;", "+\t\t\t\tquestionMask = createMask (questionImage);", "+\t\t\tmask = questionMask;", "+\t\t\t\twarningMask = createMask (warningImage);", "+\t\t\tmask = warningMask;", "+\t\t\t\tworkingMask = createMask (workingImage);", "+\t\t\tmask = workingMask;", "-\tif (image == OS.XmUNSPECIFIED_PIXMAP) error (SWT.ERROR_NO_HANDLES);", "-\tImage temp = Image.motif_new (this, SWT.ICON, image, 0);", "-\tImageData data = temp.getImageData ();", "-\ttemp.dispose ();", "-\tdata.transparentPixel = data.palette.getPixel (new RGB (255,255,255));", "-\treturn new Image (this, data);", "+\treturn Image.motif_new (this, SWT.ICON, image, mask);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbe53f2e4d22108554ac22422b22da73", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolBar.java", "commitBeforeChange": "ed1c238f5a90c715845161c91b31d4b1ab96340b", "commitAfterChange": "bcca31454b9302731fd14aa50436025950657f5a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\tboolean redraw = drawCount == 0 && OS.IsWindowVisible (handle);\r", "-\t\tif (redraw) {\r", "-\t\t\tOS.UpdateWindow (handle);\t\r", "-\t\t\tif (COMCTL32_MAJOR < 6) {\r", "-\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r", "-\t\t\t} else if (drawCount > 0) {\r", "+\t\tboolean redraw = false;\r", "+\t\tif (OS.IsWindowVisible (handle)) {\r", "+\t\t\tif (COMCTL32_MAJOR >= 6) {\r", "+\t\t\t\tredraw = true;\r", "+\t\t\t\tOS.UpdateWindow (handle);\r", "-\t\t\t}\t\r", "-\t\t} else {\r", "-\t\t\t/*\r", "-\t\t\t* Feature in Windows.  In version 6.00 of COMCTL32.DLL,\r", "-\t\t\t* the rebar control uses WM_SETREDRAW as a flag to stop\r", "-\t\t\t* layout of the items.  This is a problem because we rely\r", "-\t\t\t* on the rebar to position the items to the determine the\r", "-\t\t\t* preferred height.  The fix is to temporarily turn redraw\r", "-\t\t\t* back on using WM_SETREDRAW so the control will layuout,\r", "-\t\t\t* then turn it off using the DefaultWindowProc () so that\r", "-\t\t\t* nothing will draw and then turn it back on.\r", "-\t\t\t*/\r", "-\t\t\tif (drawCount > 0 && COMCTL32_MAJOR >= 6) {\t\r", "-\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);\r", "-\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\t} else {\r", "+\t\t\t\tredraw = drawCount == 0;\r", "+\t\t\t\tif (redraw) {\r", "+\t\t\t\t\tOS.UpdateWindow (handle);\r", "+\t\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r", "+\t\t\t\t}\r", "-\t\t}\r", "+\t\t}\t\r", "-\t\t\tif (COMCTL32_MAJOR < 6) {\r", "+\t\t\tif (COMCTL32_MAJOR >= 6) {\r", "+\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);\r", "+\t\t\t} else {\r", "-\t\t\t} else if (drawCount > 0) {\r", "-\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);\r", "-\t\t\t}\t\r", "-\t\t\tOS.ValidateRect (handle, null);\t\t\t\r", "-\t\t} else {\r", "-\t\t\t/* Feature in Windows.  Turn redraw back on. */\r", "-\t\t\tif (drawCount > 0 && COMCTL32_MAJOR >= 6) {\r", "-\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);\r", "-\t\t\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bdb357f871b16cec49b0022617c9c3e6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ce92898e77608bf804c80f5b62e889fe568db6fc", "commitAfterChange": "bc4d3581c33a4dad038becb29f77136e2bbc5f2e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 69, "signatureBeforeChange": "  void _setBackgroundImage (Image image)", "signatureAfterChange": "  void setBackgroundImage (int hBitmap)", "diff": ["-void _setBackgroundImage (Image image) {", "-\tsuper._setBackgroundImage (image);", "-\tint pixel = OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0);", "-\tif (image != null) {", "-\t\tif (pixel != OS.CLR_NONE) {", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETBKCOLOR, 0, OS.CLR_NONE);", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETTEXTBKCOLOR, 0, OS.CLR_NONE);", "-\t\t}", "-\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "-\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "-\t\t}", "-\t} else {", "-\t\tif (pixel == OS.CLR_NONE) {", "-\t\t\tpixel = background != -1 ? background : defaultBackground ();", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETBKCOLOR, 0, pixel);", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETTEXTBKCOLOR, 0, pixel);", "-\t\t\tif ((style & SWT.CHECK) != 0) fixCheckboxImageListColor (true);", "-\t\t}", "-\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "-\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, bits);", "-\t\t}", "-\t}", "-\t/*", "-\t* Feature in Windows.  When the background color is", "-\t* changed, the table does not redraw until the next", "-\t* WM_PAINT.  The fix is to force a redraw.", "-\t*/", "-\tOS.InvalidateRect (handle, null, true);", "-}", "+void setBackgroundImage (int hBitmap) {", "+\tif (hBitmap != 0) {", "+\t\tOS.SendMessage (handle, OS.LVM_SETBKCOLOR, 0, OS.CLR_NONE);", "+\t\tOS.SendMessage (handle, OS.LVM_SETTEXTBKCOLOR, 0, OS.CLR_NONE);", "+\t\t/*", "+\t\t* Feature in Windows.  When the background color is changed,", "+\t\t* the table does not redraw until the next WM_PAINT.  The fix", "+\t\t* is to force a redraw.", "+\t\t*/", "+\t\tOS.InvalidateRect (handle, null, true);", "+\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "+\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "+\t\t}", "+\t} else {", "+\t\tControl control = findBackgroundControl ();", "+\t\tif (control == null) control = this;", "+\t\tif (control.backgroundImage == null) {", "+\t\t\tsetBackgroundPixel (control.getBackgroundPixel ());", "+\t\t}", "+\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "+\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, bits);", "+\t\t}", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a56bd17835120a4dd5d32a6203b95423", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "222c99bbebba9ab406a0910e7665c9a35629b288", "commitAfterChange": "a44223adfcd4e06bb8c8891ca5fa698e5d0b0ad8", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 53, "signatureBeforeChange": "  void updateCheckState (boolean notify)", "signatureAfterChange": "  void updateCheck ()", "diff": ["-void updateCheckState (boolean notify) {", "-\tif ((parent.style & SWT.CHECK) == 0) return;", "-\tif (checkState != 0) OS.GCHandle_Free (checkState);", "-\tif (checked) {", "-\t\tcheckState = grayed ? OS.gcnew_IntPtr (2) : OS.gcnew_IntPtr (1);", "-\t} else {", "-\t\tcheckState = OS.gcnew_IntPtr (0);", "-\t}", "-\tif (notify) {", "-\t\tint row = OS.ContentControl_Content (handle);", "-\t\tOS.SWTRow_NotifyPropertyChanged (row, Table.CHECK_NOTIFY);", "-\t\tOS.GCHandle_Free (row);", "+void updateCheck () {", "+\tif ((parent.style & SWT.CHECK) == 0) return;", "+\tint checkBox = findPart (0, Table.CHECKBOX_PART_NAME);", "+\tif (checkBox != 0) {", "+\t\tparent.ignoreSelection = true;", "+\t\tif (!grayed) {", "+\t\t\tOS.ToggleButton_IsChecked (checkBox, checked);", "+\t\t} else {", "+\t\t\tif (checked) ", "+\t\t\t\tOS.ToggleButton_IsCheckedNullSetter (checkBox);", "+\t\t}", "+\t\tparent.ignoreSelection = false;", "+\t\tOS.GCHandle_Free (checkBox);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c9116326e02b8b3130a03440dc34c6b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/src/org/eclipse/swt/tools/builders/Check64CompilationParticipant.java", "commitBeforeChange": "910ea35086f5d124dc6ca7d63b61fb183d8e3374", "commitAfterChange": "0715da087d8a4170e422b40440e776332692ae12", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void replace(char[] source)", "signatureAfterChange": "  boolean replace(char[] source)", "diff": ["-void replace(char[] source) {", "-\tif (CharOperation.indexOf(INT_LONG, source, true, 0) != -1 || CharOperation.indexOf(INT_LONG_ARRAY, source, true, 0) != -1 ||", "-\t\tCharOperation.indexOf(FLOAT_DOUBLE, source, true, 0) != -1 || CharOperation.indexOf(FLOAT_DOUBLE_ARRAY, source, true, 0) != -1) {", "-\t\treplace(source, INT_LONG, LONG_INT);", "-\t\treplace(source, INT_LONG_ARRAY, LONG_INT_ARRAY);", "-\t\treplace(source, FLOAT_DOUBLE, DOUBLE_FLOAT);", "-\t\treplace(source, FLOAT_DOUBLE_ARRAY, DOUBLE_FLOAT_ARRAY);", "-\t} else {", "-\t\treplace(source, LONG_INT, INT_LONG);", "-\t\treplace(source, LONG_INT_ARRAY, INT_LONG_ARRAY);", "-\t\treplace(source, DOUBLE_FLOAT, FLOAT_DOUBLE);", "-\t\treplace(source, DOUBLE_FLOAT_ARRAY, FLOAT_DOUBLE_ARRAY);", "+boolean replace(char[] source) {", "+\tboolean changed = false;", "+\tchanged |= replace(source, INT_LONG, LONG_INT);", "+\tchanged |= replace(source, INT_LONG_ARRAY, LONG_INT_ARRAY);", "+\tchanged |= replace(source, FLOAT_DOUBLE, DOUBLE_FLOAT);", "+\tchanged |= replace(source, FLOAT_DOUBLE_ARRAY, DOUBLE_FLOAT_ARRAY);", "+\tif (!changed) {", "+\t\tchanged |= replace(source, LONG_INT, INT_LONG);", "+\t\tchanged |= replace(source, LONG_INT_ARRAY, INT_LONG_ARRAY);", "+\t\tchanged |= replace(source, DOUBLE_FLOAT, FLOAT_DOUBLE);", "+\t\tchanged |= replace(source, DOUBLE_FLOAT_ARRAY, FLOAT_DOUBLE_ARRAY);", "+\treturn changed;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "312bef183425f3d6d0244664b6cd7cc2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "222c99bbebba9ab406a0910e7665c9a35629b288", "commitAfterChange": "a44223adfcd4e06bb8c8891ca5fa698e5d0b0ad8", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 65, "signatureBeforeChange": "  void updateCheckState (boolean notify)", "signatureAfterChange": "  void updateCheck ()", "diff": ["-void updateCheckState (boolean notify) {", "-\tif ((parent.style & SWT.CHECK) == 0) return;", "-\tif (checkState != 0) OS.GCHandle_Free (checkState);", "-\tif (checked) {", "-\t\tcheckState = grayed ? OS.gcnew_IntPtr (2) : OS.gcnew_IntPtr (1);", "-\t} else {", "-\t\tcheckState = OS.gcnew_IntPtr (0);", "-\t}", "-\tif (notify) {", "-\t\tint row;", "-\t\tif (parent.columnCount != 0) {", "-\t\t\tint header = OS.HeaderedItemsControl_Header (handle);", "-\t\t\trow = OS.GridViewRowPresenter_Content (header);", "-\t\t\tOS.GCHandle_Free (header);", "-\t\t\trow = OS.HeaderedItemsControl_Header (handle);", "-\t\tparent.ignoreSelection = true;", "-\t\tOS.SWTRow_NotifyPropertyChanged (row, Table.CHECK_NOTIFY);", "-\t\tparent.ignoreSelection = false;", "-\t\tOS.GCHandle_Free (row);", "+void updateCheck () {", "+\tif ((parent.style & SWT.CHECK) == 0) return;", "+\tint checkBox = findPart (0, Tree.CHECKBOX_PART_NAME);", "+\tif (checkBox != 0) {", "+\t\tparent.ignoreSelection = true;", "+\t\tif (!grayed) {", "+\t\t\tOS.ToggleButton_IsChecked (checkBox, checked);", "+\t\t} else {", "+\t\t\tif (checked) ", "+\t\t\t\tOS.ToggleButton_IsCheckedNullSetter (checkBox);", "+\t\t}", "+\t\tparent.ignoreSelection = false;", "+\t\tOS.GCHandle_Free (checkBox);", "+\t}", "+}"]}], "num": 49154}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4f0ab67de63d746390508c9f6a6b97eb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d9dcaf2ff6e23202f2275f844df8fa6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static int getDesktop(final Display display)", "signatureAfterChange": " static int getDesktop(final Display display)", "diff": ["-\tint /*long*/ xDisplay = display.xDisplay;", "-\tint /*long*/ rootWindow = OS.XDefaultRootWindow(xDisplay);", "+\tlong /*int*/ xDisplay = display.xDisplay;", "+\tlong /*int*/ rootWindow = OS.XDefaultRootWindow(xDisplay);", "-\tint /*long*/ propList = OS.XListProperties(xDisplay, rootWindow, numProp);", "-\tint /*long*/ [] property = new int /*long*/ [numProp[0]];", "+\tlong /*int*/ propList = OS.XListProperties(xDisplay, rootWindow, numProp);", "+\tlong /*int*/ [] property = new long /*int*/ [numProp[0]];", "-\t\tint /*long*/ gnome = OS.XInternAtom(xDisplay, gnomeName, true);", "+\t\tlong /*int*/ gnome = OS.XInternAtom(xDisplay, gnomeName, true);", "-\t\t\tint /*long*/ icon_theme = GNOME.gnome_icon_theme_new();", "+\t\t\tlong /*int*/ icon_theme = GNOME.gnome_icon_theme_new();", "-\t\t\tint /*long*/ libgnomevfs = OS.dlopen(buffer, OS.RTLD_LAZY);", "+\t\t\tlong /*int*/ libgnomevfs = OS.dlopen(buffer, OS.RTLD_LAZY);", "-\t\t\t\tint /*long*/ gnome_vfs_url_show = OS.dlsym(libgnomevfs, buffer);", "+\t\t\t\tlong /*int*/ gnome_vfs_url_show = OS.dlsym(libgnomevfs, buffer);", "-\t\tint /*long*/ cde = OS.XInternAtom(xDisplay, cdeName, true);", "+\t\tlong /*int*/ cde = OS.XInternAtom(xDisplay, cdeName, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0655edecad2cc2f72261ff5145326fb4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  RectF drawText(int gdipGraphics, char[] buffer, int start, int length, int x, int y, int flags, int mnemonicIndex, TEXTMETRIC lptm, boolean draw)", "signatureAfterChange": "  RectF drawText(long gdipGraphics, char[] buffer, int start, int length, int x, int y, int flags, int mnemonicIndex, TEXTMETRIC lptm, boolean draw)", "diff": ["-RectF drawText(int /*long*/ gdipGraphics, char[] buffer, int start, int length, int x, int y, int flags, int mnemonicIndex, TEXTMETRIC lptm, boolean draw) {", "+RectF drawText(long /*int*/ gdipGraphics, char[] buffer, int start, int length, int x, int y, int flags, int mnemonicIndex, TEXTMETRIC lptm, boolean draw) {", "-\tint /*long*/ hHeap = OS.GetProcessHeap();", "-\tint /*long*/ lpDx = result.lpDx = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, nGlyphs * 4);", "-\tint /*long*/ lpGlyphs = result.lpGlyphs = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, nGlyphs * 2);", "-\tint /*long*/ lpOrder = 0;", "+\tlong /*int*/ hHeap = OS.GetProcessHeap();", "+\tlong /*int*/ lpDx = result.lpDx = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, nGlyphs * 4);", "+\tlong /*int*/ lpGlyphs = result.lpGlyphs = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, nGlyphs * 2);", "+\tlong /*int*/ lpOrder = 0;", "-\tint /*long*/ hdc = Gdip.Graphics_GetHDC(gdipGraphics);", "-\tint /*long*/ hFont = data.hGDIFont;", "+\tlong /*int*/ hdc = Gdip.Graphics_GetHDC(gdipGraphics);", "+\tlong /*int*/ hFont = data.hGDIFont;", "-\tint /*long*/ oldFont = 0;", "+\tlong /*int*/ oldFont = 0;", "-\t\tint /*long*/ brush = getFgBrush();", "+\t\tlong /*int*/ brush = getFgBrush();", "-\t\t\tint /*long*/ pen = Gdip.Pen_new(brush, 1);", "+\t\t\tlong /*int*/ pen = Gdip.Pen_new(brush, 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b19f955bebf172d12a23abfdb6d70cda", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "bc8036435837353efa5da8c19b6a3003dbb86045", "commitAfterChange": "5721cfd149c1026b4c21848f64c2b57027ac8c7e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void drawWidget (int id, NSGraphicsContext context, NSRect rect)", "signatureAfterChange": "  void drawWidget (long id, NSGraphicsContext context, NSRect rect)", "diff": ["-void drawWidget (int /*long*/ id, NSGraphicsContext context, NSRect rect) {", "+void drawWidget (long /*int*/ id, NSGraphicsContext context, NSRect rect) {", "-\t\tint /*long*/ ctx = context.graphicsPort();", "+\t\tlong /*int*/ ctx = context.graphicsPort();", "-\t\t \tint /*long*/ data = rep.bitmapData();", "-\t\t\tint /*long*/ format = rep.bitmapFormat();", "-\t\t \tint /*long*/ bpr = rep.bytesPerRow();", "+\t\t \tlong /*int*/ data = rep.bitmapData();", "+\t\t\tlong /*int*/ format = rep.bitmapFormat();", "+\t\t \tlong /*int*/ bpr = rep.bytesPerRow();", "-\t\t \tint /*long*/ provider = OS.CGDataProviderCreateWithData(0, data, bpr * (int)size.height, 0);", "-\t\t\tint /*long*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "-\t\t\tint /*long*/ cgImage = OS.CGImageCreate((int)size.width, (int)size.height, rep.bitsPerSample(), rep.bitsPerPixel(), bpr, colorspace, alphaInfo, provider, 0, true, 0);", "+\t\t \tlong /*int*/ provider = OS.CGDataProviderCreateWithData(0, data, bpr * (int)size.height, 0);", "+\t\t\tlong /*int*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "+\t\t\tlong /*int*/ cgImage = OS.CGImageCreate((int)size.width, (int)size.height, rep.bitsPerSample(), rep.bitsPerPixel(), bpr, colorspace, alphaInfo, provider, 0, true, 0);", "-\t\t\tint /*long*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "+\t\t\tlong /*int*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "-\t\t\tOS.CGContextSetFillColor(ctx, new float /*double*/ [] {1, 1, 1, 1});", "+\t\t\tOS.CGContextSetFillColor(ctx, new double /*float*/ [] {1, 1, 1, 1});"]}], "num": 14156}
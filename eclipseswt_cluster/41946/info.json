{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "511de3292fd4bd800d1cf8e1dede6d62", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4edf99cb5900af95cb2514dcfc548c34", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "039b48a39f4743c6ab82f1863366a1f66153cff5", "commitAfterChange": "282b9b6af8b479272175bca6f47c01c481707c5e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+", "+\t\t\tTCHAR buffer = new TCHAR (getCodePage (), 128);", "-\t\t\tTEXTMETRIC tm = OS.IsUnicode ? (TEXTMETRIC) new TEXTMETRICW () : new TEXTMETRICA ();", "-\t\t\tOS.GetTextMetrics (hDC, tm);", "-\t\t\theight = tm.tmHeight;", "-\t\t\tint upDownHeight = OS.GetSystemMetrics (OS.SM_CYVSCROLL);", "-\t\t\theight = Math.max (height, upDownHeight);", "-\t\t\tString string = \"00/00/0000\"; // TODO: take locale and format into account", "-\t\t\tif ((style & SWT.TIME) != 0) string = \"00:00:00 AM\";", "-\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "-\t\t\tOS.DrawText (hDC, buffer, buffer.length (), rect, flags);", "-\t\t\twidth = rect.right - rect.left;", "+\t\t\tSYSTEMTIME systime = new SYSTEMTIME ();", "+\t\t\tif ((style & SWT.DATE) != 0) {", "+\t\t\t\t/* Determine the widest/tallest year string. */", "+\t\t\t\tsystime.wMonth = 1;", "+\t\t\t\tsystime.wDay = 1;", "+\t\t\t\tint widest = 0, secondWidest = 0, thirdWidest = 0;", "+\t\t\t\tfor (int i = 0; i <= MAX_DIGIT; i++) {", "+\t\t\t\t\tsystime.wYear = (short) (2000 + i); // year 2000 + i is guaranteed to exist", "+\t\t\t\t\tint size = OS.GetDateFormat(OS.LOCALE_USER_DEFAULT, OS.DATE_SHORTDATE, systime, null, buffer, buffer.length ());", "+\t\t\t\t\tif (size == 0) {", "+\t\t\t\t\t\tbuffer = new TCHAR (getCodePage (), size);", "+\t\t\t\t\t\tOS.GetDateFormat(OS.LOCALE_USER_DEFAULT, OS.DATE_SHORTDATE, systime, null, buffer, buffer.length ());", "+\t\t\t\t\t}", "+\t\t\t\t\trect.left = rect.top = rect.right = rect.bottom = 0;", "+\t\t\t\t\tOS.DrawText (hDC, buffer, size, rect, flags);", "+\t\t\t\t\tif (rect.right - rect.left >= width) {", "+\t\t\t\t\t\twidth = rect.right - rect.left;", "+\t\t\t\t\t\tthirdWidest = secondWidest;", "+\t\t\t\t\t\tsecondWidest = widest;", "+\t\t\t\t\t\twidest = i;", "+\t\t\t\t\t}", "+\t\t\t\t\theight = Math.max(height, rect.bottom - rect.top);", "+\t\t\t\t}", "+\t\t\t\tif (widest > 1) widest = widest * 1000 + widest * 100 + widest * 10 + widest;", "+\t\t\t\telse if (secondWidest > 1) widest = secondWidest * 1000 + widest * 100 + widest * 10 + widest;", "+\t\t\t\telse widest = thirdWidest * 1000 + widest * 100 + widest * 10 + widest;", "+\t\t\t\tsystime.wYear = (short) widest;", "+", "+\t\t\t\t/* Determine the widest/tallest month name string. */", "+\t\t\t\twidth = widest = 0;", "+\t\t\t\tfor (short i = 0; i < MONTH_NAMES.length; i++) {", "+\t\t\t\t\tint name = MONTH_NAMES [i];", "+\t\t\t\t\tint size = OS.GetLocaleInfo (OS.LOCALE_USER_DEFAULT, name, buffer, buffer.length ());", "+\t\t\t\t\tif (size == 0) {", "+\t\t\t\t\t\tbuffer = new TCHAR (getCodePage (), size);", "+\t\t\t\t\t\tOS.GetLocaleInfo (OS.LOCALE_USER_DEFAULT, name, buffer, buffer.length ());", "+\t\t\t\t\t}", "+\t\t\t\t\trect.left = rect.top = rect.right = rect.bottom = 0;", "+\t\t\t\t\tOS.DrawText (hDC, buffer, size, rect, flags);", "+\t\t\t\t\tif (rect.right - rect.left > width) {", "+\t\t\t\t\t\twidth = rect.right - rect.left;", "+\t\t\t\t\t\twidest = i;", "+\t\t\t\t\t}", "+\t\t\t\t\theight = Math.max(height, rect.bottom - rect.top);", "+\t\t\t\t}", "+\t\t\t\tsystime.wMonth = (short) (widest + 1);", "+", "+\t\t\t\t/* Determine the widest/tallest date string in the widest month of the widest year. */", "+\t\t\t\tint dwFlags = ((style & SWT.MEDIUM) != 0) ? OS.DATE_SHORTDATE : ((style & SWT.SHORT) != 0) ? OS.DATE_YEARMONTH : OS.DATE_LONGDATE;", "+\t\t\t\twidth = 0;", "+\t\t\t\tfor (short i = 1; i <= MAX_DAY; i++) {", "+\t\t\t\t\tsystime.wDay = i;", "+\t\t\t\t\tint size = OS.GetDateFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "+\t\t\t\t\tif (size == 0) {", "+\t\t\t\t\t\tbuffer = new TCHAR (getCodePage (), size);", "+\t\t\t\t\t\tOS.GetDateFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "+\t\t\t\t\t}", "+\t\t\t\t\trect.left = rect.top = rect.right = rect.bottom = 0;", "+\t\t\t\t\tOS.DrawText (hDC, buffer, size, rect, flags);", "+\t\t\t\t\twidth = Math.max(width, rect.right - rect.left);", "+\t\t\t\t\theight = Math.max(height, rect.bottom - rect.top);", "+\t\t\t\t\tif ((style & SWT.SHORT) != 0) break;", "+\t\t\t\t}", "+\t\t\t} else if ((style & SWT.TIME) != 0) {", "+\t\t\t\t/* Determine the widest/tallest hour string. This code allows for the possibility of ligatures. */", "+\t\t\t\tint dwFlags = ((style & SWT.SHORT) != 0) ? OS.TIME_NOSECONDS : 0;", "+\t\t\t\tshort widest = 0;", "+\t\t\t\tint max = is24HourTime () ? MAX_24HOUR : MAX_12HOUR;", "+\t\t\t\tfor (short i = 0; i < max; i++) {", "+\t\t\t\t\tsystime.wHour = i;", "+\t\t\t\t\tint size = OS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "+\t\t\t\t\tif (size == 0) {", "+\t\t\t\t\t\tbuffer = new TCHAR (getCodePage (), size);", "+\t\t\t\t\t\tOS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "+\t\t\t\t\t}", "+\t\t\t\t\trect.left = rect.top = rect.right = rect.bottom = 0;", "+\t\t\t\t\tOS.DrawText (hDC, buffer, size, rect, flags);", "+\t\t\t\t\tif (rect.right - rect.left > width) {", "+\t\t\t\t\t\twidth = rect.right - rect.left;", "+\t\t\t\t\t\twidest = i;", "+\t\t\t\t\t}", "+\t\t\t\t\theight = Math.max(height, rect.bottom - rect.top);", "+\t\t\t\t}", "+\t\t\t\tsystime.wHour = widest;", "+", "+\t\t\t\t/* Determine the widest/tallest minute and second string. */", "+\t\t\t\twidth = widest = 0;", "+\t\t\t\tfor (short i = 0; i < MAX_MINUTE; i++) {", "+\t\t\t\t\tsystime.wMinute = i;", "+\t\t\t\t\tint size = OS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "+\t\t\t\t\tif (size == 0) {", "+\t\t\t\t\t\tbuffer = new TCHAR (getCodePage (), size);", "+\t\t\t\t\t\tOS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "+\t\t\t\t\t}", "+\t\t\t\t\trect.left = rect.top = rect.right = rect.bottom = 0;", "+\t\t\t\t\tOS.DrawText (hDC, buffer, size, rect, flags);", "+\t\t\t\t\tif (rect.right - rect.left > width) {", "+\t\t\t\t\t\twidth = rect.right - rect.left;", "+\t\t\t\t\t\twidest = i;", "+\t\t\t\t\t}", "+\t\t\t\t\theight = Math.max(height, rect.bottom - rect.top);", "+\t\t\t\t}", "+\t\t\t\tsystime.wMinute = widest;", "+\t\t\t\tsystime.wSecond = widest;", "+", "+\t\t\t\t/* Determine the widest/tallest time string for the widest hour, widest minute, and if applicable, widest second. */", "+\t\t\t\tint size = OS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "+\t\t\t\tif (size == 0) {", "+\t\t\t\t\tbuffer = new TCHAR (getCodePage (), size);", "+\t\t\t\t\tOS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "+\t\t\t\t}", "+\t\t\t\trect.left = rect.top = rect.right = rect.bottom = 0;", "+\t\t\t\tOS.DrawText (hDC, buffer, size, rect, flags);", "+\t\t\t\twidth = rect.right - rect.left;", "+\t\t\t\theight = Math.max(height, rect.bottom - rect.top);", "+\t\t\t}", "+\t\t\tint upDownHeight = OS.GetSystemMetrics (OS.SM_CYVSCROLL);", "+\t\t\theight = Math.max (height, upDownHeight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78a30628e86cdd48420c04f60cb8ba01", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "4e8fb426aa55775d1635a190ce7e40e2c95849d3", "commitAfterChange": "14c0e189aa7c20d8fa715eac9bc3917ccf42ea31", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\t\tTCHAR buffer = new TCHAR (getCodePage (), 128);", "-\t\t\tint /*long*/ newFont, oldFont = 0;", "-\t\t\tint /*long*/ hDC = OS.GetDC (handle);", "-\t\t\tnewFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "-\t\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "-\t\t\tRECT rect = new RECT ();", "-\t\t\tint flags = OS.DT_CALCRECT | OS.DT_EDITCONTROL | OS.DT_NOPREFIX;", "-\t\t\tSYSTEMTIME systime = new SYSTEMTIME ();", "-\t\t\tif ((style & SWT.DATE) != 0) {", "-\t\t\t\t/* Determine the widest/tallest year string. */", "-\t\t\t\tsystime.wMonth = 1;", "-\t\t\t\tsystime.wDay = 1;", "-\t\t\t\tint widest = 0, secondWidest = 0, thirdWidest = 0;", "-\t\t\t\tfor (int i = 0; i <= MAX_DIGIT; i++) {", "-\t\t\t\t\tsystime.wYear = (short) (2000 + i); // year 2000 + i is guaranteed to exist", "-\t\t\t\t\tint size = OS.GetDateFormat(OS.LOCALE_USER_DEFAULT, OS.DATE_SHORTDATE, systime, null, buffer, buffer.length ());", "-\t\t\t\t\tif (size == 0) {", "-\t\t\t\t\t\tbuffer = new TCHAR (getCodePage (), size);", "-\t\t\t\t\t\tOS.GetDateFormat(OS.LOCALE_USER_DEFAULT, OS.DATE_SHORTDATE, systime, null, buffer, buffer.length ());", "+\t\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\t\t/* Vista and later: use DTM_GETIDEALSIZE. */", "+\t\t\t\tSIZE size = new SIZE ();", "+\t\t\t\tOS.SendMessage(handle, OS.DTM_GETIDEALSIZE, 0, size);", "+\t\t\t\twidth = size.cx;", "+\t\t\t\theight = size.cy;", "+\t\t\t} else {", "+\t\t\t\tint /*long*/ newFont, oldFont = 0;", "+\t\t\t\tint /*long*/ hDC = OS.GetDC (handle);", "+\t\t\t\tnewFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "+\t\t\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "+\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\tif ((style & SWT.DATE) != 0) {", "+\t\t\t\t\tint dwFlags = 0;", "+\t\t\t\t\tTCHAR lpFormat = null;", "+\t\t\t\t\tif ((style & SWT.SHORT) != 0) {", "+\t\t\t\t\t\tlpFormat = new TCHAR (0, getCustomShortDateFormat(), true);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tdwFlags = (style & SWT.MEDIUM) != 0 ? OS.DATE_SHORTDATE : OS.DATE_LONGDATE;", "-\t\t\t\t\trect.left = rect.top = rect.right = rect.bottom = 0;", "-\t\t\t\t\tOS.DrawText (hDC, buffer, size, rect, flags);", "-\t\t\t\t\tif (rect.right - rect.left >= width) {", "-\t\t\t\t\t\twidth = rect.right - rect.left;", "-\t\t\t\t\t\tthirdWidest = secondWidest;", "-\t\t\t\t\t\tsecondWidest = widest;", "-\t\t\t\t\t\twidest = i;", "+\t\t\t\t\tint size = OS.GetDateFormat(OS.LOCALE_USER_DEFAULT, dwFlags, null, lpFormat, null, 0);", "+\t\t\t\t\tif (size > 0) {", "+\t\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), size);", "+\t\t\t\t\t\tOS.GetDateFormat(OS.LOCALE_USER_DEFAULT, dwFlags, null, lpFormat, buffer, buffer.length ());", "+\t\t\t\t\t\tOS.DrawText (hDC, buffer, size, rect, OS.DT_CALCRECT | OS.DT_EDITCONTROL);", "-\t\t\t\t\theight = Math.max(height, rect.bottom - rect.top);", "+\t\t\t\t} else if ((style & SWT.TIME) != 0) {", "+\t\t\t\t\tint dwFlags = 0;", "+\t\t\t\t\tTCHAR lpFormat = null;", "+\t\t\t\t\tif ((style & SWT.SHORT) != 0) {", "+\t\t\t\t\t\tdwFlags = OS.TIME_NOSECONDS;", "+\t\t\t\t\t\tlpFormat = new TCHAR (0, getCustomShortTimeFormat(), true);", "+\t\t\t\t\t}", "+\t\t\t\t\tint size = OS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, null, lpFormat, null, 0);", "+\t\t\t\t\tif (size > 0) {", "+\t\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), size);", "+\t\t\t\t\t\tOS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, null, lpFormat, buffer, buffer.length ());", "+\t\t\t\t\t\tOS.DrawText (hDC, buffer, size, rect, OS.DT_CALCRECT | OS.DT_EDITCONTROL);", "+\t\t\t\t\t}", "-\t\t\t\tif (widest > 1) widest = widest * 1000 + widest * 100 + widest * 10 + widest;", "-\t\t\t\telse if (secondWidest > 1) widest = secondWidest * 1000 + widest * 100 + widest * 10 + widest;", "-\t\t\t\telse widest = thirdWidest * 1000 + widest * 100 + widest * 10 + widest;", "-\t\t\t\tsystime.wYear = (short) widest;", "-", "-\t\t\t\t/* Determine the widest/tallest month name string. */", "-\t\t\t\twidth = widest = 0;", "-\t\t\t\tfor (short i = 0; i < MONTH_NAMES.length; i++) {", "-\t\t\t\t\tint name = MONTH_NAMES [i];", "-\t\t\t\t\tint size = OS.GetLocaleInfo (OS.LOCALE_USER_DEFAULT, name, buffer, buffer.length ());", "-\t\t\t\t\tif (size == 0) {", "-\t\t\t\t\t\tbuffer = new TCHAR (getCodePage (), size);", "-\t\t\t\t\t\tOS.GetLocaleInfo (OS.LOCALE_USER_DEFAULT, name, buffer, buffer.length ());", "-\t\t\t\t\t}", "-\t\t\t\t\trect.left = rect.top = rect.right = rect.bottom = 0;", "-\t\t\t\t\tOS.DrawText (hDC, buffer, size, rect, flags);", "-\t\t\t\t\tif (rect.right - rect.left > width) {", "-\t\t\t\t\t\twidth = rect.right - rect.left;", "-\t\t\t\t\t\twidest = i;", "-\t\t\t\t\t}", "-\t\t\t\t\theight = Math.max(height, rect.bottom - rect.top);", "-\t\t\t\t}", "-\t\t\t\tsystime.wMonth = (short) (widest + 1);", "-", "-\t\t\t\t/* Determine the widest/tallest date string in the widest month of the widest year. */", "-\t\t\t\tint dwFlags = ((style & SWT.MEDIUM) != 0) ? OS.DATE_SHORTDATE : ((style & SWT.SHORT) != 0) ? OS.DATE_YEARMONTH : OS.DATE_LONGDATE;", "-\t\t\t\twidth = 0;", "-\t\t\t\tfor (short i = 1; i <= MAX_DAY; i++) {", "-\t\t\t\t\tsystime.wDay = i;", "-\t\t\t\t\tint size = OS.GetDateFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "-\t\t\t\t\tif (size == 0) {", "-\t\t\t\t\t\tbuffer = new TCHAR (getCodePage (), size);", "-\t\t\t\t\t\tOS.GetDateFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "-\t\t\t\t\t}", "-\t\t\t\t\trect.left = rect.top = rect.right = rect.bottom = 0;", "-\t\t\t\t\tOS.DrawText (hDC, buffer, size, rect, flags);", "-\t\t\t\t\twidth = Math.max(width, rect.right - rect.left);", "-\t\t\t\t\theight = Math.max(height, rect.bottom - rect.top);", "-\t\t\t\t\tif ((style & SWT.SHORT) != 0) break;", "-\t\t\t\t}", "-\t\t\t} else if ((style & SWT.TIME) != 0) {", "-\t\t\t\t/* Determine the widest/tallest hour string. This code allows for the possibility of ligatures. */", "-\t\t\t\tint dwFlags = ((style & SWT.SHORT) != 0) ? OS.TIME_NOSECONDS : 0;", "-\t\t\t\tshort widest = 0;", "-\t\t\t\tint max = is24HourTime () ? MAX_24HOUR : MAX_12HOUR;", "-\t\t\t\tfor (short i = 0; i < max; i++) {", "-\t\t\t\t\tsystime.wHour = i;", "-\t\t\t\t\tint size = OS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "-\t\t\t\t\tif (size == 0) {", "-\t\t\t\t\t\tbuffer = new TCHAR (getCodePage (), size);", "-\t\t\t\t\t\tOS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "-\t\t\t\t\t}", "-\t\t\t\t\trect.left = rect.top = rect.right = rect.bottom = 0;", "-\t\t\t\t\tOS.DrawText (hDC, buffer, size, rect, flags);", "-\t\t\t\t\tif (rect.right - rect.left > width) {", "-\t\t\t\t\t\twidth = rect.right - rect.left;", "-\t\t\t\t\t\twidest = i;", "-\t\t\t\t\t}", "-\t\t\t\t\theight = Math.max(height, rect.bottom - rect.top);", "-\t\t\t\t}", "-\t\t\t\tsystime.wHour = widest;", "-", "-\t\t\t\t/* Determine the widest/tallest minute and second string. */", "-\t\t\t\twidth = widest = 0;", "-\t\t\t\tfor (short i = 0; i < MAX_MINUTE; i++) {", "-\t\t\t\t\tsystime.wMinute = i;", "-\t\t\t\t\tint size = OS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "-\t\t\t\t\tif (size == 0) {", "-\t\t\t\t\t\tbuffer = new TCHAR (getCodePage (), size);", "-\t\t\t\t\t\tOS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "-\t\t\t\t\t}", "-\t\t\t\t\trect.left = rect.top = rect.right = rect.bottom = 0;", "-\t\t\t\t\tOS.DrawText (hDC, buffer, size, rect, flags);", "-\t\t\t\t\tif (rect.right - rect.left > width) {", "-\t\t\t\t\t\twidth = rect.right - rect.left;", "-\t\t\t\t\t\twidest = i;", "-\t\t\t\t\t}", "-\t\t\t\t\theight = Math.max(height, rect.bottom - rect.top);", "-\t\t\t\t}", "-\t\t\t\tsystime.wMinute = widest;", "-\t\t\t\tsystime.wSecond = widest;", "-", "-\t\t\t\t/* Determine the widest/tallest time string for the widest hour, widest minute, and if applicable, widest second. */", "-\t\t\t\tint size = OS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "-\t\t\t\tif (size == 0) {", "-\t\t\t\t\tbuffer = new TCHAR (getCodePage (), size);", "-\t\t\t\t\tOS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "-\t\t\t\t}", "-\t\t\t\trect.left = rect.top = rect.right = rect.bottom = 0;", "-\t\t\t\tOS.DrawText (hDC, buffer, size, rect, flags);", "-\t\t\t\theight = Math.max(height, rect.bottom - rect.top);", "+\t\t\t\theight = rect.bottom - rect.top;", "+\t\t\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "+\t\t\t\tOS.ReleaseDC (handle, hDC);", "+\t\t\t\tint upDownWidth = OS.GetSystemMetrics (OS.SM_CXVSCROLL);", "+\t\t\t\twidth += upDownWidth + MARGIN;", "-\t\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "-\t\t\tOS.ReleaseDC (handle, hDC);", "-\t\t\tint upDownWidth = OS.GetSystemMetrics (OS.SM_CXVSCROLL);", "-\t\t\t\t// TODO: On Vista, can send DTM_GETDATETIMEPICKERINFO to ask the Edit control what its margins are", "+\t\t\t\t// TODO: Can maybe use DTM_GETDATETIMEPICKERINFO for this", "-\t\t\t\tif ((style & SWT.DROP_DOWN) != 0) upDownWidth += 16;", "-\t\t\twidth += upDownWidth + MARGIN;"]}], "num": 41946}
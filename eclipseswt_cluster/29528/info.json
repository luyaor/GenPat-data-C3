{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "68b81dd03401105a5dda0b13b80e6b8d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e4ac68f3779cbf3f511189f322a0dee5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CCombo.java", "commitBeforeChange": "c8cd76bf69b37764761763f0da8d767bfba5394b", "commitAfterChange": "f234a135829d52ec2f9610fac66b6f2480cb8cd9", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "\r void textEvent (Event event)", "signatureAfterChange": "\r void textEvent (Event event)", "diff": ["+\t\tcase SWT.FocusIn: {\r", "+\t\t\tif (hasFocus) return;\r", "+\t\t\thasFocus = true;\r", "+\t\t\tif (getEditable ()) text.selectAll ();\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\tnotifyListeners(SWT.FocusIn, e);\r", "+\t\t\tbreak;\r", "+\t\t}\r", "+\t\tcase SWT.FocusOut: {\r", "+\t\t\tControl focusControl = getDisplay ().getFocusControl();\r", "+\t\t\tif (focusControl == list || focusControl == arrow) return;\r", "+\t\t\thasFocus = false;\r", "+\t\t\tEvent e = new Event();\r", "+\t\t\te.time = event.time;\r", "+\t\t\tnotifyListeners(SWT.FocusOut, e);\r", "+\t\t\tbreak;\r", "+\t\t}\r", "-\t\t\t\treturn;\r", "+\t\t\t}\r", "+\t\t\tif (event.character == SWT.CR || event.character == '\\t') {\r", "+\t\t\t\tdropDown (false);\r", "+\t\t\t\tEvent e = new Event();\r", "+\t\t\t\te.time = event.time;\r", "+\t\t\t\te.stateMask = event.stateMask;\r", "+\t\t\t\tnotifyListeners(SWT.DefaultSelection, e);\r", "+\t\t\t\t\te.stateMask = event.stateMask;\r", "-\t\t\t// Further work : Need to add support for incremental search in pop up list as characters typed in text widget\r", "+\t\t\t// Further work : Need to add support for incremental search in \r", "+\t\t\t// pop up list as characters typed in text widget\r", "-\t\t\t\tcase SWT.TRAVERSE_RETURN:\r", "-\t\t\t\t\t// allow \"return\" and \"tab\" to have their usual effect\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\tcase SWT.TRAVERSE_ESCAPE:\r", "-\t\t\t\t\t// escape key is used to close the list so\r", "-\t\t\t\t\t// do not use it for traversal\r", "-\t\t\t\t\tevent.doit = false;\r", "-\t\t\t\t\tbreak;\r", "-\t\t\t\t\t// arrow keys are used to manipulate the list contents so\r", "+\t\t\t\t\t// The tab key causes default selection and\r", "+\t\t\t\t\t// the arrow keys are used to manipulate the list contents so\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a97f3c16f64e7f56cf029674129131b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CCombo.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 50, "signatureBeforeChange": "\r void textEvent (Event event)", "signatureAfterChange": "\r void textEvent (Event event)", "diff": ["+}\r", "-\t\tcase SWT.FocusIn: {\r", "-\t\t\tif (getEditable ()) text.selectAll ();\r", "-\t\t\tEvent e = new Event();\r", "-\t\t\te.time = event.time;\r", "-\t\t\tnotifyListeners(SWT.FocusIn, e);\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t\tcase SWT.FocusOut: {\r", "-\t\t\tDisplay display = getDisplay ();\r", "-\t\t\tControl focusControl = display.getFocusControl ();\r", "-\t\t\tif (isDropped ()) {\r", "-\t\t\t\tControl cursorControl = display.getCursorControl ();\r", "-\t\t\t\tif (cursorControl != list) dropDown (false);\r", "-\t\t\t\tif (focusControl != text) dropDown (false);\r", "-\t\t\t}\r", "-\t\t\tif (focusControl == list) return;\r", "-\t\t\tEvent e = new Event();\r", "-\t\t\te.time = event.time;\r", "-\t\t\tnotifyListeners(SWT.FocusOut, e);\r", "-\t\t\tbreak;\r", "-\t\t}\r", "-\t\t\tif (event.detail == SWT.TRAVERSE_ARROW_PREVIOUS || event.detail == SWT.TRAVERSE_ARROW_NEXT) {\r", "-\t\t\t\tevent.doit = false;\r", "+\t\t\tswitch (event.detail) {\r", "+\t\t\t\tcase SWT.TRAVERSE_RETURN:\r", "+\t\t\t\tcase SWT.TRAVERSE_TAB_NEXT:\r", "+\t\t\t\t\t// allow \"return\" and \"tab\" to have their usual effect\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase SWT.TRAVERSE_ESCAPE:\r", "+\t\t\t\t\t// escape key is used to close the list so\r", "+\t\t\t\t\t// do not use it for traversal\r", "+\t\t\t\t\tevent.doit = false;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase SWT.TRAVERSE_ARROW_PREVIOUS:\r", "+\t\t\t\tcase SWT.TRAVERSE_ARROW_NEXT:\r", "+\t\t\t\t\t// arrow keys are used to manipulate the list contents so\r", "+\t\t\t\t\t// do not use them for traversal.\r", "+\t\t\t\t\tevent.doit = false;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\r"]}], "num": 29528}
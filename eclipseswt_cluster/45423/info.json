{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b009e468d738ae8dba096db7a0630c99", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50ebcaae748b8871ce126382f26743e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "f99ef2fd3e299eaae5b095e6b27fba9b7bccb0bc", "commitAfterChange": "5f701df943c9d6be0ccfe4e4e53db25d9291eba8", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 48, "signatureBeforeChange": "  void generateSends()", "signatureAfterChange": "  void generateSends()", "diff": ["-\tTreeSet set = new TreeSet();", "+\tTreeMap set = new TreeMap();", "+\tTreeMap set64 = new TreeMap();", "-\t\t\tif (\"class\".equals(node.getNodeName())) {", "-\t\t\t\tif (getGen(node)) {", "-\t\t\t\t\tNodeList methods = node.getChildNodes();", "-\t\t\t\t\tfor (int j = 0; j < methods.getLength(); j++) {", "-\t\t\t\t\t\tNode method = methods.item(j);", "-\t\t\t\t\t\tif (\"method\".equals(method.getNodeName())) {", "-\t\t\t\t\t\t\tif (getGen(method)) {", "-\t\t\t\t\t\t\t\tString code = buildSend(method, false, false);", "-\t\t\t\t\t\t\t\tString code64 = buildSend(method, false, true);", "-\t\t\t\t\t\t\t\tset.add(code64);", "-\t\t\t\t\t\t\t\tset.add(code);", "-\t\t\t\t\t\t\t}", "+\t\t\tif (\"class\".equals(node.getNodeName()) && getGen(node)) {", "+\t\t\t\tNodeList methods = node.getChildNodes();", "+\t\t\t\tfor (int j = 0; j < methods.getLength(); j++) {", "+\t\t\t\t\tNode method = methods.item(j);", "+\t\t\t\t\tif (\"method\".equals(method.getNodeName()) && getGen(method)) {", "+\t\t\t\t\t\tString code = buildSend(method, false, false);", "+\t\t\t\t\t\tString code64 = buildSend(method, false, true);", "+\t\t\t\t\t\tif (set.get(code) == null) {", "+\t\t\t\t\t\t\tset.put(code, method);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (set64.get(code64) == null) {", "+\t\t\t\t\t\t\tset64.put(code64, method);", "-\tout(\"//TODO - trim unused 64 bit calls\");", "-\tfor (Iterator iterator = set.iterator(); iterator.hasNext();) {", "+\tTreeMap tagsSet = new TreeMap();", "+\tfor (Iterator iterator = set.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = (String)iterator.next();", "+\t\tNode method = (Node)set.get(key);", "+\t\tString tagCode = buildSend(method, false, true);", "+\t\tif (set64.get(tagCode) != null) {", "+\t\t\ttagsSet.put(key, method);", "+\t\t\titerator.remove();", "+\t\t\tset64.remove(tagCode);", "+\t\t}", "+\t}", "+\tTreeSet all = new TreeSet();", "+\tfor (Iterator iterator = tagsSet.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = (String) iterator.next();", "+\t\tNode method = (Node)tagsSet.get(key);", "+\t\tall.add(buildSend(method, true, false));", "+\t}", "+\tfor (Iterator iterator = set.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = (String) iterator.next();", "+\t\tall.add(key);", "+\t}", "+\tfor (Iterator iterator = set64.keySet().iterator(); iterator.hasNext();) {", "+\t\tString key = (String) iterator.next();", "+\t\tall.add(key);", "+\t}", "+\tfor (Iterator iterator = all.iterator(); iterator.hasNext();) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c4bb9c6ed97fc22e03e6c6766ccab903", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "82f22e2e03e4d70c9aa26448e8c8735454530ca2", "commitAfterChange": "e614ab59651b8801df1cfd335df3edd886371bea", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 3, "signatureBeforeChange": "  void generateClasses()", "signatureAfterChange": "  void generateClasses()", "diff": ["+\tMetaData metaData = new MetaData(mainClassName);", "+\t", "-\t\t\t\tNamedNodeMap attributes = node.getAttributes();", "-\t\t\t\tNode gen = attributes.getNamedItem(\"swt_gen\");", "-\t\t\t\tif (gen != null && gen.getNodeValue().equals(\"mixed\")) {", "+\t\t\t\tif (getGen(node)) {", "+\t\t\t\t\tByteArrayOutputStream out = new ByteArrayOutputStream();", "+\t\t\t\t\tthis.out = new PrintStream(out);", "+\t\t\t\t\tString data = metaData.getMetaData(\"swt_copyright\", null);", "+\t\t\t\t\tif (data != null && data.length() != 0) {", "+\t\t\t\t\t\tout(fixDelimiter(data));", "+\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t\tNamedNodeMap attributes = node.getAttributes();", "-\t\t\t\t\tif (outputDir != null) {", "-//\t\t\t\t\t\tFileOutputStream  is = new FileOutputStream(outputDir + \"/\" + name + \".java\");", "-\t\t\t\t\t\tout = new PrintStream(new ByteArrayOutputStream());", "-\t\t\t\t\t}", "-\t\t\t\t\t\tout(\" extends NSObject {\");", "+\t\t\t\t\t\tNode superclass = attributes.getNamedItem(\"swt_superclass\");", "+\t\t\t\t\t\tout(\" extends \");", "+\t\t\t\t\t\tif (superclass != null) {", "+\t\t\t\t\t\t\tout(superclass.getNodeValue());", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tout(\"NSObject\");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tout(\" {\");", "-\t\t\t\t\t\t\tString sel = method.getAttributes().getNamedItem(\"selector\").getNodeValue();", "-\t\t\t\t\t\t\tout(\"public \");", "-\t\t\t\t\t\t\tboolean isStatic = method.getAttributes().getNamedItem(\"class_method\") != null; ", "-\t\t\t\t\t\t\tif (isStatic) out(\"static \");", "-\t\t\t\t\t\t\tNode returnNode = getReturnNode(method.getChildNodes());", "-\t\t\t\t\t\t\tif (getType(returnNode).equals(\"void\")) returnNode = null;", "-\t\t\t\t\t\t\tif (returnNode != null) {", "-\t\t\t\t\t\t\t\tout(getJavaType(returnNode));", "-\t\t\t\t\t\t\t\tout(\" \");", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tout(\"void \");", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tString methodName = sel;", "-\t\t\t\t\t\t\tif (isUnique(method, methods)) {", "-\t\t\t\t\t\t\t\tint index = methodName.indexOf(\":\");", "-\t\t\t\t\t\t\t\tif (index != -1) methodName = methodName.substring(0, index);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tmethodName = methodName.replaceAll(\":\", \"_\");", "-\t\t\t\t\t\t\t\tif (isStatic) methodName = \"static_\" + methodName;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tout(methodName);", "-\t\t\t\t\t\t\tout(\"(\");", "-\t\t\t\t\t\t\tNodeList params = method.getChildNodes();", "-\t\t\t\t\t\t\tboolean first = true;", "-\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "-\t\t\t\t\t\t\t\tNode param = params.item(k);", "-\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "-\t\t\t\t\t\t\t\t\tNamedNodeMap paramAttributes = param.getAttributes();", "-\t\t\t\t\t\t\t\t\tif (!first) out(\", \");", "-\t\t\t\t\t\t\t\t\tout(getJavaType(param));", "-\t\t\t\t\t\t\t\t\tfirst = false;", "-\t\t\t\t\t\t\t\t\tout(\" \");", "-\t\t\t\t\t\t\t\t\tString paramName = paramAttributes.getNamedItem(\"name\").getNodeValue();", "-\t\t\t\t\t\t\t\t\tif (paramName.equals(\"boolean\")) paramName = \"b\";", "-\t\t\t\t\t\t\t\t\tout(paramName);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tout(\") {\");", "-\t\t\t\t\t\t\toutln();", "-\t\t\t\t\t\t\tif (returnNode != null && isStruct(returnNode)) {", "-\t\t\t\t\t\t\t\tString type = getJavaType(returnNode);", "-\t\t\t\t\t\t\t\tout(\"\\t\");", "-\t\t\t\t\t\t\t\tout(type);", "-\t\t\t\t\t\t\t\tout(\" result = new \");", "-\t\t\t\t\t\t\t\tout(type);", "-\t\t\t\t\t\t\t\tout(\"();\");", "-\t\t\t\t\t\t\t\toutln();", "-\t\t\t\t\t\t\t\tout(\"\\tOS.objc_msgSend_stret(result, \");", "-\t\t\t\t\t\t\t} else if (returnNode != null && isFloatingPoint(returnNode)) {", "-\t\t\t\t\t\t\t\tString type = getJavaType(returnNode);", "-\t\t\t\t\t\t\t\tout(\"\\treturn \");", "-\t\t\t\t\t\t\t\tif (type.equals(\"float\")) out(\"(float)\");", "-\t\t\t\t\t\t\t\tout(\"OS.objc_msgSend_fpret(\");", "-\t\t\t\t\t\t\t} else if (returnNode != null && isObject(returnNode)) {", "-\t\t\t\t\t\t\t\tout(\"\\tint result = OS.objc_msgSend(\");", "-\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tif (getGen(method)) {", "+\t\t\t\t\t\t\t\tNamedNodeMap mthAttributes = method.getAttributes();", "+\t\t\t\t\t\t\t\tString sel = mthAttributes.getNamedItem(\"selector\").getNodeValue();", "+\t\t\t\t\t\t\t\tout(\"public \");", "+\t\t\t\t\t\t\t\tboolean isStatic = mthAttributes.getNamedItem(\"class_method\") != null; ", "+\t\t\t\t\t\t\t\tif (isStatic) out(\"static \");", "+\t\t\t\t\t\t\t\tNode returnNode = getReturnNode(method.getChildNodes());", "+\t\t\t\t\t\t\t\tif (getType(returnNode).equals(\"void\")) returnNode = null;", "+\t\t\t\t\t\t\t\tString returnType = \"\";", "-\t\t\t\t\t\t\t\t\tout(\"\\treturn \");", "-\t\t\t\t\t\t\t\t\tString type = getJavaType(returnNode);", "-\t\t\t\t\t\t\t\t\tif (!(type.equals(\"int\") || type.equals(\"boolean\"))) {", "-\t\t\t\t\t\t\t\t\t\tout(\"(\");", "-\t\t\t\t\t\t\t\t\t\tout(type);", "-\t\t\t\t\t\t\t\t\t\tout(\")\");", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tout(\"\\t\");", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tout(\"OS.objc_msgSend(\");", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (isStatic) {", "-\t\t\t\t\t\t\t\tout(\"OS.class_\");", "-\t\t\t\t\t\t\t\tout(name);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tout(\"this.id\");", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tout(\", OS.\");", "-\t\t\t\t\t\t\tout(getSelConst(sel));", "-\t\t\t\t\t\t\tfirst = false;", "-\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "-\t\t\t\t\t\t\t\tNode param = params.item(k);", "-\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "-\t\t\t\t\t\t\t\t\tNamedNodeMap paramAttributes = param.getAttributes();", "-\t\t\t\t\t\t\t\t\tif (!first) out(\", \");", "-\t\t\t\t\t\t\t\t\tfirst = false;", "-\t\t\t\t\t\t\t\t\tString paramName = paramAttributes.getNamedItem(\"name\").getNodeValue();", "-\t\t\t\t\t\t\t\t\tif (paramName.equals(\"boolean\")) paramName = \"b\";", "-\t\t\t\t\t\t\t\t\tif (isObject(param)) {", "-\t\t\t\t\t\t\t\t\t\tout(paramName);", "-\t\t\t\t\t\t\t\t\t\tout(\" != null ? \");", "-\t\t\t\t\t\t\t\t\t\tout(paramName);", "-\t\t\t\t\t\t\t\t\t\tout(\".id : 0\");", "+\t\t\t\t\t\t\t\t\tNode replace = returnNode.getAttributes().getNamedItem(\"swt_replace_return\");", "+\t\t\t\t\t\t\t\t\tif (replace != null) {", "+\t\t\t\t\t\t\t\t\t\tout(returnType = replace.getNodeValue());", "+\t\t\t\t\t\t\t\t\t\tout(returnType = getJavaType(returnNode));", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tout(\" \");", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tout(\"void \");", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tString methodName = sel;", "+\t\t\t\t\t\t\t\tif (isUnique(method, methods)) {", "+\t\t\t\t\t\t\t\t\tint index = methodName.indexOf(\":\");", "+\t\t\t\t\t\t\t\t\tif (index != -1) methodName = methodName.substring(0, index);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tmethodName = methodName.replaceAll(\":\", \"_\");", "+\t\t\t\t\t\t\t\t\tif (isStatic) methodName = \"static_\" + methodName;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tout(methodName);", "+\t\t\t\t\t\t\t\tout(\"(\");", "+\t\t\t\t\t\t\t\tNodeList params = method.getChildNodes();", "+\t\t\t\t\t\t\t\tboolean first = true;", "+\t\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "+\t\t\t\t\t\t\t\t\tNode param = params.item(k);", "+\t\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "+\t\t\t\t\t\t\t\t\t\tNamedNodeMap paramAttributes = param.getAttributes();", "+\t\t\t\t\t\t\t\t\t\tif (!first) out(\", \");", "+\t\t\t\t\t\t\t\t\t\tout(getJavaType(param));", "+\t\t\t\t\t\t\t\t\t\tfirst = false;", "+\t\t\t\t\t\t\t\t\t\tout(\" \");", "+\t\t\t\t\t\t\t\t\t\tString paramName = paramAttributes.getNamedItem(\"name\").getNodeValue();", "+\t\t\t\t\t\t\t\t\t\tif (paramName.length() == 0) paramName = \"arg\" + paramAttributes.getNamedItem(\"index\").getNodeValue();", "+\t\t\t\t\t\t\t\t\t\tif (paramName.equals(\"boolean\")) paramName = \"b\";", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tout(\")\");", "-\t\t\t\t\t\t\tif (returnNode != null && isBoolean(returnNode)) {", "-\t\t\t\t\t\t\t\tout(\" != 0\");", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tout(\";\");", "-\t\t\t\t\t\t\toutln();", "-\t\t\t\t\t\t\tif (returnNode != null && isObject(returnNode)) {", "-\t\t\t\t\t\t\t\tif (!isStatic && getJavaType(returnNode).equals(name)) {", "-\t\t\t\t\t\t\t\t\tout(\"\\treturn result == this.id ? this : (result != 0 ? new \");", "-\t\t\t\t\t\t\t\t\tout(getJavaType(returnNode));", "-\t\t\t\t\t\t\t\t\tout(\"(result) : null);\");", "+\t\t\t\t\t\t\t\tout(\") {\");", "+\t\t\t\t\t\t\t\toutln();", "+\t\t\t\t\t\t\t\tif (returnNode != null && isStruct(returnNode)) {", "+\t\t\t\t\t\t\t\t\tString type = getJavaType(returnNode);", "+\t\t\t\t\t\t\t\t\tout(\"\\t\");", "+\t\t\t\t\t\t\t\t\tout(type);", "+\t\t\t\t\t\t\t\t\tout(\" result = new \");", "+\t\t\t\t\t\t\t\t\tout(type);", "+\t\t\t\t\t\t\t\t\tout(\"();\");", "+\t\t\t\t\t\t\t\t\toutln();", "+\t\t\t\t\t\t\t\t\tout(\"\\tOS.objc_msgSend_stret(result, \");", "+\t\t\t\t\t\t\t\t} else if (returnNode != null && isFloatingPoint(returnNode)) {", "+\t\t\t\t\t\t\t\t\tString type = getJavaType(returnNode);", "+\t\t\t\t\t\t\t\t\tout(\"\\treturn \");", "+\t\t\t\t\t\t\t\t\tif (type.equals(\"float\")) out(\"(float)\");", "+\t\t\t\t\t\t\t\t\tout(\"OS.objc_msgSend_fpret(\");", "+\t\t\t\t\t\t\t\t} else if (returnNode != null && isObject(returnNode)) {", "+\t\t\t\t\t\t\t\t\tout(\"\\tint result = OS.objc_msgSend(\");", "-\t\t\t\t\t\t\t\t\tout(\"\\treturn result != 0 ? new \");", "-\t\t\t\t\t\t\t\t\tout(getJavaType(returnNode));", "-\t\t\t\t\t\t\t\t\tout(\"(result) : null;\");", "+\t\t\t\t\t\t\t\t\tif (returnNode != null) {", "+\t\t\t\t\t\t\t\t\t\tout(\"\\treturn \");", "+\t\t\t\t\t\t\t\t\t\tString type = getJavaType(returnNode);", "+\t\t\t\t\t\t\t\t\t\tif (!(type.equals(\"int\") || type.equals(\"boolean\"))) {", "+\t\t\t\t\t\t\t\t\t\t\tout(\"(\");", "+\t\t\t\t\t\t\t\t\t\t\tout(type);", "+\t\t\t\t\t\t\t\t\t\t\tout(\")\");", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tout(\"\\t\");", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tout(\"OS.objc_msgSend(\");", "+\t\t\t\t\t\t\t\tif (isStatic) {", "+\t\t\t\t\t\t\t\t\tout(\"OS.class_\");", "+\t\t\t\t\t\t\t\t\tout(name);", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tout(\"this.id\");", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tout(\", OS.\");", "+\t\t\t\t\t\t\t\tout(getSelConst(sel));", "+\t\t\t\t\t\t\t\tfirst = false;", "+\t\t\t\t\t\t\t\tfor (int k = 0; k < params.getLength(); k++) {", "+\t\t\t\t\t\t\t\t\tNode param = params.item(k);", "+\t\t\t\t\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "+\t\t\t\t\t\t\t\t\t\tNamedNodeMap paramAttributes = param.getAttributes();", "+\t\t\t\t\t\t\t\t\t\tif (!first) out(\", \");", "+\t\t\t\t\t\t\t\t\t\tfirst = false;", "+\t\t\t\t\t\t\t\t\t\tString paramName = paramAttributes.getNamedItem(\"name\").getNodeValue();", "+\t\t\t\t\t\t\t\t\t\tif (paramName.length() == 0) paramName = \"arg\" + paramAttributes.getNamedItem(\"index\").getNodeValue();", "+\t\t\t\t\t\t\t\t\t\tif (paramName.equals(\"boolean\")) paramName = \"b\";", "+\t\t\t\t\t\t\t\t\t\tif (isObject(param)) {", "+\t\t\t\t\t\t\t\t\t\t\tout(paramName);", "+\t\t\t\t\t\t\t\t\t\t\tout(\" != null ? \");", "+\t\t\t\t\t\t\t\t\t\t\tout(paramName);", "+\t\t\t\t\t\t\t\t\t\t\tout(\".id : 0\");", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tout(paramName);", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tout(\")\");", "+\t\t\t\t\t\t\t\tif (returnNode != null && isBoolean(returnNode)) {", "+\t\t\t\t\t\t\t\t\tout(\" != 0\");", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tout(\";\");", "-\t\t\t\t\t\t\t} else if (returnNode != null && isStruct(returnNode)) {", "-\t\t\t\t\t\t\t\tout(\"\\treturn result;\");", "+\t\t\t\t\t\t\t\tif (returnNode != null && isObject(returnNode)) {", "+\t\t\t\t\t\t\t\t\tif (!isStatic && returnType.equals(name)) {", "+\t\t\t\t\t\t\t\t\t\tout(\"\\treturn result == this.id ? this : (result != 0 ? new \");", "+\t\t\t\t\t\t\t\t\t\tout(returnType);", "+\t\t\t\t\t\t\t\t\t\tout(\"(result) : null);\");", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tout(\"\\treturn result != 0 ? new \");", "+\t\t\t\t\t\t\t\t\t\tout(returnType);", "+\t\t\t\t\t\t\t\t\t\tout(\"(result) : null;\");", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\toutln();", "+\t\t\t\t\t\t\t\t} else if (returnNode != null && isStruct(returnNode)) {", "+\t\t\t\t\t\t\t\t\tout(\"\\treturn result;\");", "+\t\t\t\t\t\t\t\t\toutln();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tout(\"}\");", "+\t\t\t\t\t\t\t\toutln();", "-\t\t\t\t\t\t\tout(\"}\");", "-\t\t\t\t\t\t\toutln();", "-\t\t\t\t\t\t\toutln();", "-\t\t\t\t\tif (outputDir != null) {", "-\t\t\t\t\t\tout.close();", "-\t\t\t\t\t\tout = null;", "+\t\t\t\t\t", "+\t\t\t\t\tString fileName = outputDir + mainClassName.substring(0, mainClassName.lastIndexOf('.') + 1).replace('.', '/') + name + \".java\";", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tout.flush();", "+\t\t\t\t\t\tif (out.size() > 0) output(out.toByteArray(), fileName);", "+\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\tSystem.out.println(\"Problem\");", "+\t\t\t\t\t\te.printStackTrace(System.out);", "+\t\t\t\t\tout = null;"]}], "num": 45423}
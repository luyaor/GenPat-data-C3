{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7983403c2d2efe66277fbb42c003958c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "442c6113fc1eb05d7003b30cffd1f961", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "df55805e4a74ab0fc8f545a1792d755c95a4e419", "commitAfterChange": "b178ded274cefa13fff8fc6fb8115ee14a844dc8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void copyArea(int srcX, int srcY, int width, int height, int destX, int destY, boolean paint)", "signatureAfterChange": " public void copyArea(int srcX, int srcY, int width, int height, int destX, int destY, boolean paint)", "diff": ["-\t\t\t\tGdkRectangle srcRect = new GdkRectangle ();", "-\t\t\t\tsrcRect.x = srcX;", "-\t\t\t\tsrcRect.y = srcY;", "-\t\t\t\tsrcRect.width = width;", "-\t\t\t\tsrcRect.height = height;", "-\t\t\t\tlong /*int*/ copyRegion = OS.gdk_region_rectangle (srcRect);", "-\t\t\t\tOS.gdk_region_intersect(copyRegion, visibleRegion);", "-\t\t\t\tlong /*int*/ invalidateRegion = OS.gdk_region_rectangle (srcRect);\t", "-\t\t\t\tOS.gdk_region_subtract (invalidateRegion, visibleRegion);", "-\t\t\t\tOS.gdk_region_offset (invalidateRegion, deltaX, deltaY);", "-\t\t\t\tOS.gdk_window_invalidate_region(drawable, invalidateRegion, false);", "-\t\t\t\tOS.gdk_region_destroy (visibleRegion);", "-\t\t\t\tOS.gdk_region_destroy (copyRegion);", "-\t\t\t\tOS.gdk_region_destroy (invalidateRegion);", "+\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION(3, 0, 0)) {", "+\t\t\t\t\tcairo_rectangle_int_t srcRect = new cairo_rectangle_int_t ();", "+\t\t\t\t\tsrcRect.x = srcX;", "+\t\t\t\t\tsrcRect.y = srcY;", "+\t\t\t\t\tsrcRect.width = width;", "+\t\t\t\t\tsrcRect.height = height;", "+\t\t\t\t\tlong /*int*/ copyRegion = Cairo.cairo_region_create_rectangle (srcRect);", "+\t\t\t\t\tCairo.cairo_region_intersect (copyRegion, visibleRegion);", "+\t\t\t\t\tlong /*int*/ invalidateRegion = Cairo.cairo_region_create_rectangle (srcRect);", "+\t\t\t\t\tCairo.cairo_region_subtract (invalidateRegion, visibleRegion);", "+\t\t\t\t\tCairo.cairo_region_translate (invalidateRegion, deltaX, deltaY);", "+\t\t\t\t\tOS.gdk_window_invalidate_region(drawable, invalidateRegion, false);", "+\t\t\t\t\tCairo.cairo_region_destroy (visibleRegion);", "+\t\t\t\t\tCairo.cairo_region_destroy (copyRegion);", "+\t\t\t\t\tCairo.cairo_region_destroy (invalidateRegion);", "+\t\t\t\t} else {", "+\t\t\t\t\tGdkRectangle srcRect = new GdkRectangle ();", "+\t\t\t\t\tsrcRect.x = srcX;", "+\t\t\t\t\tsrcRect.y = srcY;", "+\t\t\t\t\tsrcRect.width = width;", "+\t\t\t\t\tsrcRect.height = height;", "+\t\t\t\t\tlong /*int*/ copyRegion = OS.gdk_region_rectangle (srcRect);", "+\t\t\t\t\tOS.gdk_region_intersect (copyRegion, visibleRegion);", "+\t\t\t\t\tlong /*int*/ invalidateRegion = OS.gdk_region_rectangle (srcRect);", "+\t\t\t\t\tOS.gdk_region_subtract (invalidateRegion, visibleRegion);", "+\t\t\t\t\tOS.gdk_region_offset (invalidateRegion, deltaX, deltaY);", "+\t\t\t\t\tOS.gdk_window_invalidate_region(drawable, invalidateRegion, false);", "+\t\t\t\t\tOS.gdk_region_destroy (visibleRegion);", "+\t\t\t\t\tOS.gdk_region_destroy (copyRegion);", "+\t\t\t\t\tOS.gdk_region_destroy (invalidateRegion);", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "266a52037c8cbfa9c82adb367034df32", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Shell.java", "commitBeforeChange": "a81a2af33f76afc777dc2a821ad7e85370bea06d", "commitAfterChange": "61a23c6bad00d757114d1634ae3a1348f07fbfd3", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  public void test_setActive()", "signatureAfterChange": "  public void test_setActive()", "diff": ["+\t/* Create shell2 and make it active. */", "+\tShell shell2 = new Shell();", "+\tshell2.open();", "+\t", "+\t/* Test setActive for visible shell. */", "-\tassertTrue(\":a:\", shell.getDisplay().getActiveShell() == shell);", "+\tassertTrue(\"visible shell was not made active\", shell.getDisplay().getActiveShell() == shell);", "+\t", "+\t/* Test setActive for visible dialog shell. */", "+\tshell2.setActive();", "+\ttestShell.setVisible(true);", "+\ttestShell.setActive();", "+\tassertTrue(\"visible dialog shell was not made active\", testShell.getDisplay().getActiveShell() == testShell);", "+\t", "+\t/* Test setActive for non-visible shell. */", "+\tshell2.setActive();", "+\tshell.setVisible(false);", "+\tshell.setActive();", "+\tassertTrue(\"non-visible shell was made active\", shell.getDisplay().getActiveShell() != shell);", "+", "+\t/* Test setActive for non-visible dialog shell. */", "+\tshell2.setActive();", "+\ttestShell.setVisible(false);", "+\ttestShell.setActive();", "+\tassertTrue(\"non-visible dialog shell was made active\", testShell.getDisplay().getActiveShell() != testShell);", "+\t", "+\tshell2.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ccf85334189e0af82002028946a49b0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/gtk/org/eclipse/swt/browser/WebKit.java", "commitBeforeChange": "8614680ae78fee56d42eb3d94f28a75f18d340b5", "commitAfterChange": "9f7ccea14bb1fb11d1071f5e85bfb64c67f560bd", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 22, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-    scrolledWindow = OS.gtk_scrolled_window_new (0, 0);", "-    OS.gtk_scrolled_window_set_policy (scrolledWindow, OS.GTK_POLICY_AUTOMATIC, OS.GTK_POLICY_AUTOMATIC);", "-    webView = WebKitGTK.webkit_web_view_new ();", "-    webViewData = C.malloc (C.PTR_SIZEOF);", "-    C.memmove (webViewData, new int /*long*/[] {webView}, C.PTR_SIZEOF);", "-    OS.gtk_container_add (scrolledWindow, webView);", "-    OS.gtk_container_add (browser.handle, scrolledWindow);", "-    OS.gtk_widget_show (scrolledWindow);", "+\tscrolledWindow = OS.gtk_scrolled_window_new (0, 0);", "+\tOS.gtk_scrolled_window_set_policy (scrolledWindow, OS.GTK_POLICY_AUTOMATIC, OS.GTK_POLICY_AUTOMATIC);", "+\twebView = WebKitGTK.webkit_web_view_new ();", "+\twebViewData = C.malloc (C.PTR_SIZEOF);", "+\tC.memmove (webViewData, new int /*long*/[] {webView}, C.PTR_SIZEOF);", "+\tOS.gtk_container_add (scrolledWindow, webView);", "+\tOS.gtk_container_add (browser.handle, scrolledWindow);", "+\tOS.gtk_widget_show (scrolledWindow);", "-    OS.g_signal_connect (webView, WebKitGTK.notify_load_status, Proc3.getAddress (), NOTIFY_LOAD_STATUS);", "-    OS.g_signal_connect (webView, WebKitGTK.notify_progress, Proc3.getAddress (), NOTIFY_PROGRESS);", "-    OS.g_signal_connect (webView, WebKitGTK.notify_title, Proc3.getAddress (), NOTIFY_TITLE);", "-    OS.g_signal_connect (webView, WebKitGTK.populate_popup, Proc3.getAddress (), POPULATE_POPUP);", "-    OS.g_signal_connect (webView, WebKitGTK.resource_request_starting, Proc6.getAddress (), RESOURCE_REQUEST_STARTING);", "-    OS.g_signal_connect (webView, WebKitGTK.status_bar_text_changed, Proc3.getAddress (), STATUS_BAR_TEXT_CHANGED);", "-    OS.g_signal_connect (webView, WebKitGTK.web_view_ready, Proc2.getAddress (), WEB_VIEW_READY);", "-    OS.g_signal_connect (webView, WebKitGTK.window_object_cleared, Proc5.getAddress (), WINDOW_OBJECT_CLEARED);", "+\tOS.g_signal_connect (webView, WebKitGTK.notify_load_status, Proc3.getAddress (), NOTIFY_LOAD_STATUS);", "+\tOS.g_signal_connect (webView, WebKitGTK.notify_progress, Proc3.getAddress (), NOTIFY_PROGRESS);", "+\tOS.g_signal_connect (webView, WebKitGTK.notify_title, Proc3.getAddress (), NOTIFY_TITLE);", "+\tOS.g_signal_connect (webView, WebKitGTK.populate_popup, Proc3.getAddress (), POPULATE_POPUP);", "+\tOS.g_signal_connect (webView, WebKitGTK.resource_request_starting, Proc6.getAddress (), RESOURCE_REQUEST_STARTING);", "+\tOS.g_signal_connect (webView, WebKitGTK.status_bar_text_changed, Proc3.getAddress (), STATUS_BAR_TEXT_CHANGED);", "+\tOS.g_signal_connect (webView, WebKitGTK.web_view_ready, Proc2.getAddress (), WEB_VIEW_READY);", "+\tOS.g_signal_connect (webView, WebKitGTK.window_object_cleared, Proc5.getAddress (), WINDOW_OBJECT_CLEARED);", "-\tOS.g_signal_connect (scrolledWindow, OS.event, Proc3.getAddress (), 0);", "+\tOS.g_signal_connect (webView, OS.button_press_event, JSDOMEventProc.getAddress (), 0);", "+\tOS.g_signal_connect (webView, OS.button_release_event, JSDOMEventProc.getAddress (), 0);", "+\tOS.g_signal_connect (webView, OS.key_press_event, JSDOMEventProc.getAddress (), 0);", "+\tOS.g_signal_connect (webView, OS.key_release_event, JSDOMEventProc.getAddress (), 0);", "+\tOS.g_signal_connect (webView, OS.scroll_event, JSDOMEventProc.getAddress (), 0);", "+\tOS.g_signal_connect (webView, OS.motion_notify_event, JSDOMEventProc.getAddress (), 0);", "+", "-\tOS.g_signal_connect (scrolledWindow, OS.button_press_event, Proc3.getAddress (), STOP_PROPOGATE);", "-\tOS.g_signal_connect (scrolledWindow, OS.button_release_event, Proc3.getAddress (), STOP_PROPOGATE);", "-\tOS.g_signal_connect (scrolledWindow, OS.key_press_event, Proc3.getAddress (), STOP_PROPOGATE);", "-\tOS.g_signal_connect (scrolledWindow, OS.key_release_event, Proc3.getAddress (), STOP_PROPOGATE);", "-\tOS.g_signal_connect (scrolledWindow, OS.scroll_event, Proc3.getAddress (), STOP_PROPOGATE);", "-\tOS.g_signal_connect (scrolledWindow, OS.motion_notify_event, Proc3.getAddress (), STOP_PROPOGATE);", "+\tOS.g_signal_connect (scrolledWindow, OS.button_press_event, JSDOMEventProc.getAddress (), STOP_PROPOGATE);", "+\tOS.g_signal_connect (scrolledWindow, OS.button_release_event, JSDOMEventProc.getAddress (), STOP_PROPOGATE);", "+\tOS.g_signal_connect (scrolledWindow, OS.key_press_event, JSDOMEventProc.getAddress (), STOP_PROPOGATE);", "+\tOS.g_signal_connect (scrolledWindow, OS.key_release_event, JSDOMEventProc.getAddress (), STOP_PROPOGATE);", "+\tOS.g_signal_connect (scrolledWindow, OS.scroll_event, JSDOMEventProc.getAddress (), STOP_PROPOGATE);", "+\tOS.g_signal_connect (scrolledWindow, OS.motion_notify_event, JSDOMEventProc.getAddress (), STOP_PROPOGATE);", "-    int /*long*/ settings = WebKitGTK.webkit_web_view_get_settings (webView);", "-    OS.g_object_set (settings, WebKitGTK.javascript_can_open_windows_automatically, 1, 0);", "-    OS.g_object_set (settings, WebKitGTK.enable_universal_access_from_file_uris, 1, 0);", "-    byte[] bytes = Converter.wcsToMbcs (null, \"UTF-8\", true); // $NON-NLS-1$", "-    OS.g_object_set (settings, WebKitGTK.default_encoding, bytes, 0);", "+\tint /*long*/ settings = WebKitGTK.webkit_web_view_get_settings (webView);", "+\tOS.g_object_set (settings, WebKitGTK.javascript_can_open_windows_automatically, 1, 0);", "+\tOS.g_object_set (settings, WebKitGTK.enable_universal_access_from_file_uris, 1, 0);", "+\tbyte[] bytes = Converter.wcsToMbcs (null, \"UTF-8\", true); // $NON-NLS-1$", "+\tOS.g_object_set (settings, WebKitGTK.default_encoding, bytes, 0);", "-    Listener listener = new Listener () {", "+\tListener listener = new Listener () {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eeb76a4eaa59a28effcbb88899252bcc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "83bc342b5fc11dbb9c15fc9887a8665981477197", "commitAfterChange": "e44d652075f7ac732c62cc5aa3d24c42dc8233dd", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\torg.eclipse.swt.internal.carbon.Point bounds = new org.eclipse.swt.internal.carbon.Point ();", "-\t\t// NEEDS work - only works for default font", "-\t\tshort [] baseLine = new short [1];", "-\t\tif (OS.GetThemeTextDimensions (ptr [0], (short)OS.kThemeSystemFont, OS.kThemeStateActive, false, bounds, baseLine) == OS.noErr) {", "-\t\t\twidth = Math.max (width, bounds.h);", "-\t\t\theight = Math.max (height, bounds.v);", "+\t\torg.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point ();", "+\t\tif (font == null) {", "+\t\t\tOS.GetThemeTextDimensions (ptr [0], (short)OS.kThemeSystemFont, OS.kThemeStateActive, false, ioBounds, null);", "+\t\t} else {", "+\t\t\tint [] currentPort = new int [1];", "+\t\t\tOS.GetPort (currentPort);", "+\t\t\tOS.SetPortWindowPort (OS.GetControlOwner (handle));", "+\t\t\tOS.TextFont (font.id);", "+\t\t\tOS.TextFace (font.style);", "+\t\t\tOS.TextSize (font.size);", "+\t\t\tOS.GetThemeTextDimensions (ptr [0], (short) OS.kThemeCurrentPortFont, OS.kThemeStateActive, false, ioBounds, null);", "+\t\t\tOS.SetPort (currentPort [0]);", "+\t\twidth = Math.max (width, ioBounds.h);", "+\t\theight = Math.max (height, ioBounds.v);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbae0719cb192ecee1084fe88f61e145", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleFactory.java", "commitBeforeChange": "1600566572476d9a59d55b12b53edda457f44a52", "commitAfterChange": "9b8efc09a689dca8137a73eb726757d83f71f8ea", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  \tprivate AccessibleFactory (int widgetType)", "signatureAfterChange": "  \tprivate AccessibleFactory (int widgetType)", "diff": ["-\t\tbyte[] factoryName = new byte [FACTORY_TYPE.length + widgetTypeNameLength];", "-\t\tSystem.arraycopy (FACTORY_TYPE, 0, factoryName, 0, FACTORY_TYPE.length);", "-\t\tSystem.arraycopy (buffer, 0, factoryName, FACTORY_TYPE.length, widgetTypeNameLength);", "+\t\tbyte[] factoryName = new byte [FACTORY_TYPENAME.length + widgetTypeNameLength];", "+\t\tSystem.arraycopy (FACTORY_TYPENAME, 0, factoryName, 0, FACTORY_TYPENAME.length);", "+\t\tSystem.arraycopy (buffer, 0, factoryName, FACTORY_TYPENAME.length, widgetTypeNameLength);", "-\t\t\tint parentType = ATK.atk_object_factory_get_accessible_type (previousFactory);", "-\t\t\tint swtFactory = createFactory (factoryName);", "-\t\t\tif (parentType == 0) {", "-\t\t\t\tparentType = ATK.g_type_from_name (Converter.wcsToMbcs (null, DEFAULT_PARENTTYPE, true));", "-\t\t\t}", "+\t\t\tobjectParentType = ATK.atk_object_factory_get_accessible_type (previousFactory);", "+\t\t\tif (objectParentType == 0) objectParentType = DefaultParentType;", "+\t\t\tint factoryParentType = ATK.g_type_from_name (FACTORY_PARENTTYPENAME);", "+\t\t\tgTypeInfo_base_init_factory  = new Callback (this, \"gTypeInfo_base_init_factory\", 1);", "+\t\t\tGTypeInfo typeInfo = new GTypeInfo ();", "+\t\t\ttypeInfo.base_init = gTypeInfo_base_init_factory.getAddress ();", "+\t\t\ttypeInfo.class_size = ATK.AtkObjectFactoryClass_sizeof ();", "+\t\t\ttypeInfo.instance_size = ATK.AtkObjectFactory_sizeof ();", "+\t\t\thandle = OS.g_malloc (GTypeInfo.sizeof); ", "+\t\t\tATK.memmove (handle, typeInfo, GTypeInfo.sizeof); ", "+\t\t\tint swtFactory = ATK.g_type_register_static (factoryParentType, factoryName, handle, 0);", "-\t\t\taccessibleType = new AccessibleType (newTypeName, parentType);", "+\t\t\tobjectType = defineType (newTypeName, objectParentType);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5840a5b1b6d3ff99ef77e854f8e00ad9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "3a4151df7f890efbc61e9a01d33c3ead4c2645d9", "commitAfterChange": "c762252cf769015e8f116caa1f2d177bbf731286", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "\r \r LRESULT WM_WINDOWPOSCHANGING (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_WINDOWPOSCHANGING (int wParam, int lParam)", "diff": ["-\t* Bug in Windows.  When a flat tool bar is wrapped,\r", "-\t* Windows draws a horizontal separator between the\r", "-\t* rows.  The tool bar does not draw the first or\r", "-\t* the last two pixels of this separator.  When the\r", "-\t* toolbar is resized to be bigger, only the new\r", "-\t* area is drawn and the last two pixels, which are\r", "-\t* blank are drawn over by separator.  This leaves\r", "-\t* garbage on the screen.  The fix is to damage the\r", "-\t* pixels.\r", "+\t* Feature in Windows.  When a tool bar that contains\r", "+\t* separators is wrapped, under certain circumstances,\r", "+\t* Windows redraws the entire tool bar unnecessarily\r", "+\t* when resized no item is moves.  Whether the entire\r", "+\t* toolbar is damaged or not seems to depend on the\r", "+\t* size of the tool bar and the position of the separators.\r", "+\t* The fix is to ensure that the newly exposed areas are\r", "+\t* always damaged, and avoid the redraw when no tool item\r", "+\t* moves.\r", "+\tint oldHeight = oldRect.bottom - oldRect.top;\r", "+\tint newHeight = newRect.bottom - newRect.top;\r", "+\t\t/*\r", "+\t\t* Bug in Windows.  When a flat tool bar is wrapped,\r", "+\t\t* Windows draws a horizontal separator between the\r", "+\t\t* rows.  The tool bar does not draw the first or\r", "+\t\t* the last two pixels of this separator.  When the\r", "+\t\t* toolbar is resized to be bigger, only the new\r", "+\t\t* area is drawn and the last two pixels, which are\r", "+\t\t* blank are drawn over by separator.  This leaves\r", "+\t\t* garbage on the screen.  The fix is to damage the\r", "+\t\t* pixels.\r", "+\t\t*/\r", "-\t\trect.left = oldWidth - 2;\r", "-\t\trect.right = oldWidth;\r", "-\t\trect.bottom = newRect.bottom - newRect.top;\r", "+\t\tOS.SetRect (rect, oldWidth - 2, 0, oldWidth, newHeight);\r", "+\t\tOS.SetRect (rect, oldRect.right, newRect.top, newRect.right, newRect.bottom);\r", "+\t\tOS.InvalidateRect (handle, rect, true);\r", "+\t}\r", "+\tif (newHeight > oldHeight) {\r", "+\t\tRECT rect = new RECT ();\r", "+\t\tOS.SetRect (rect, newRect.left, oldRect.bottom, newRect.right, newRect.bottom);\r", "+\t\tOS.InvalidateRect (handle, rect, true);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9b5b1ff02e4217a4f5d84e94a672c5c9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/win32/org/eclipse/swt/program/Program.java", "commitBeforeChange": "8b72b564b9ff2fcb6bceccc2bf17e820d59ce6f9", "commitAfterChange": "4c435280edb60cfbc77445e11e94b7b62760dd4a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static Program findProgram (String extension)", "signatureAfterChange": " public static Program findProgram (String extension)", "diff": ["-\tint [] phkResult = new int [1];", "-\tif (OS.RegOpenKeyEx (OS.HKEY_CLASSES_ROOT, key, 0, OS.KEY_READ, phkResult) != 0) {", "-\t\treturn null;", "-\t}", "-\tint [] lpcbData = new int [1];", "-\tint result = OS.RegQueryValueEx (phkResult [0], null, 0, null, (TCHAR) null, lpcbData);", "-\tif (result == 0) {", "-\t\tTCHAR lpData = new TCHAR (0, lpcbData [0] / TCHAR.sizeof);", "-\t\tresult = OS.RegQueryValueEx (phkResult [0], null, 0, null, lpData, lpcbData);", "-\t\tif (result == 0) program = getProgram (lpData.toString (0, lpData.strlen ()));", "+\tif (OS.IsWinCE) {", "+\t\tint [] phkResult = new int [1];", "+\t\tif (OS.RegOpenKeyEx (OS.HKEY_CLASSES_ROOT, key, 0, OS.KEY_READ, phkResult) != 0) {", "+\t\t\treturn null;", "+\t\t}", "+\t\tint [] lpcbData = new int [1];", "+\t\tint result = OS.RegQueryValueEx (phkResult [0], null, 0, null, (TCHAR) null, lpcbData);", "+\t\tif (result == 0) {", "+\t\t\tTCHAR lpData = new TCHAR (0, lpcbData [0] / TCHAR.sizeof);", "+\t\t\tresult = OS.RegQueryValueEx (phkResult [0], null, 0, null, lpData, lpcbData);", "+\t\t\tif (result == 0) program = getProgram (lpData.toString (0, lpData.strlen ()));", "+\t\t}", "+\t\tOS.RegCloseKey (phkResult [0]);", "+\t} else {", "+\t\tString command = assocQueryString (OS.ASSOCSTR_COMMAND, key, true);", "+\t\tif (command != null) {", "+\t\t\tString name = null;", "+\t\t\tif (name == null) name = assocQueryString (OS.ASSOCSTR_FRIENDLYDOCNAME, key, false);", "+\t\t\tif (name == null) name = assocQueryString (OS.ASSOCSTR_FRIENDLYAPPNAME, key, false);", "+\t\t\tif (name == null) name = \"\";", "+\t\t\tString iconName = assocQueryString (OS.ASSOCSTR_DEFAULTICON, key, true);", "+\t\t\tif (iconName == null) iconName = \"\";", "+\t\t\tprogram = new Program ();", "+\t\t\tprogram.name = name;", "+\t\t\tprogram.command = command;", "+\t\t\tprogram.iconName = iconName;", "+\t\t}", "-\tOS.RegCloseKey (phkResult [0]);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35473eb198cbb427393a9643f78cb17a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "07c18674150755bcdf3b70b1ef50f32c44cf7e50", "commitAfterChange": "99e4edefe372e2c463379777ecf1fc5a600cb35b", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void scroll (int destX, int destY, int x, int y, int width, int height, boolean all)", "signatureAfterChange": " public void scroll (int destX, int destY, int x, int y, int width, int height, boolean all)", "diff": ["-\t\t\tOS.gdk_window_scroll (window, deltaX, deltaY);", "+//\t\t\tOS.gdk_window_scroll (window, deltaX, deltaY);", "+\t\t\tlong /*int*/ cairo = OS.gdk_cairo_create(window);", "+\t\t\tCairo.cairo_rectangle(cairo, destX, destY, width, height);", "+\t\t\tCairo.cairo_clip(cairo);", "+\t\t\tCairo.cairo_translate(cairo, deltaX, deltaY);", "+\t\t\tCairo.cairo_set_operator(cairo, Cairo.CAIRO_OPERATOR_SOURCE);", "+\t\t\tCairo.cairo_push_group(cairo);", "+\t\t\tOS.gdk_cairo_set_source_window(cairo, window, 0, 0);", "+\t\t\tCairo.cairo_paint(cairo);", "+\t\t\tCairo.cairo_pop_group_to_source(cairo);", "+\t\t\tCairo.cairo_rectangle(cairo, destX - deltaX, destY - deltaY, width, height);", "+\t\t\tCairo.cairo_clip(cairo);", "+\t\t\tCairo.cairo_paint(cairo);", "+\t\t\tCairo.cairo_destroy(cairo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "57892bf19e24a268ef694b0b94b35382", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleFactory.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  \tstatic int initTextIfaceCB (int iface)", "signatureAfterChange": "  \tstatic int initTextIfaceCB (int iface)", "diff": ["-\t\tAtkTextIface textInterface = new AtkTextIface ();", "-\t\tATK.memmove (textInterface, iface);", "-\t\ttextInterface.get_caret_offset = AtkTextCB_get_caret_offset.getAddress ();", "-\t\ttextInterface.get_character_at_offset = AtkTextCB_get_character_at_offset.getAddress ();", "-\t\ttextInterface.get_character_count = AtkTextCB_get_character_count.getAddress ();", "-\t\ttextInterface.get_n_selections = AtkTextCB_get_n_selections.getAddress ();", "-\t\ttextInterface.get_selection = AtkTextCB_get_selection.getAddress ();", "-\t\ttextInterface.get_text = AtkTextCB_get_text.getAddress ();", "-\t\ttextInterface.get_text_after_offset = AtkTextCB_get_text_after_offset.getAddress ();", "-\t\ttextInterface.get_text_at_offset = AtkTextCB_get_text_at_offset.getAddress ();", "-\t\ttextInterface.get_text_before_offset = AtkTextCB_get_text_before_offset.getAddress ();", "-\t\tATK.memmove (iface, textInterface);", "+\t\tAtkTextIface inter = new AtkTextIface ();", "+\t\tATK.memmove (inter, iface);", "+\t\tinter.get_range_extents = AtkTextCB_get_range_extents.getAddress ();", "+\t\tinter.get_character_extents = AtkTextCB_get_character_extents.getAddress ();", "+\t\tinter.get_run_attributes= AtkTextCB_get_run_attributes.getAddress ();", "+\t\tinter.get_offset_at_point = AtkTextCB_get_offset_at_point.getAddress ();", "+\t\tinter.add_selection = AtkTextCB_add_selection.getAddress ();", "+\t\tinter.remove_selection = AtkTextCB_remove_selection.getAddress ();", "+\t\tinter.set_selection = AtkTextCB_set_selection.getAddress ();", "+\t\tinter.get_caret_offset = AtkTextCB_get_caret_offset.getAddress ();", "+\t\tinter.set_caret_offset = AtkTextCB_set_caret_offset.getAddress ();", "+\t\tinter.get_character_at_offset = AtkTextCB_get_character_at_offset.getAddress ();", "+\t\tinter.get_character_count = AtkTextCB_get_character_count.getAddress ();", "+\t\tinter.get_n_selections = AtkTextCB_get_n_selections.getAddress ();", "+\t\tinter.get_selection = AtkTextCB_get_selection.getAddress ();", "+\t\tinter.get_text = AtkTextCB_get_text.getAddress ();", "+\t\tinter.get_text_after_offset = AtkTextCB_get_text_after_offset.getAddress ();", "+\t\tinter.get_text_at_offset = AtkTextCB_get_text_at_offset.getAddress ();", "+\t\tinter.get_text_before_offset = AtkTextCB_get_text_before_offset.getAddress ();", "+\t\tinter.get_bounded_ranges = AtkTextCB_get_bounded_ranges.getAddress ();", "+\t\tATK.memmove (iface, inter);", "+\t\treturn 0;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2461d1db408ea953a0444a5af3565bcb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "5b4363330acbbd4eecdd36d4c211071a9e9ed361", "commitAfterChange": "7b1329ce4559c314d7caaf6d49255a2e36ae8db9", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 62, "signatureBeforeChange": "  int QueryInterface (int riid, int ppvObject)", "signatureAfterChange": "  int QueryInterface (int riid, int ppvObject)", "diff": ["+\t\tSystem.out.println(\"QI'd for nsISupports\");", "+\t\tSystem.out.println(\"QI'd for nsIClassInfo\");", "+\t\tSystem.out.println(\"QI'd for nsISecurityCheckedComponent\");", "+\t\tSystem.out.println(\"QI'd for EXTERNAL_IID\");", "+\tif (!Mozilla.IsPre_4) {", "+\t\tnsID NS_ISCRIPT_OBJECT_OWNER_IID = new nsID(\"8f6bca7e-ce42-11d1-b724-00600891d8c9\");", "+\t\tif (guid.Equals(NS_ISCRIPT_OBJECT_OWNER_IID)) {", "+\t\t\tSystem.out.println(\"QI'd for NS_ISCRIPT_OBJECT_OWNER\");", "+\t\t\tXPCOM.memmove (ppvObject, new int /*long*/[] {scriptObjectOwner.getAddress ()}, C.PTR_SIZEOF);", "+\t\t\tAddRef();", "+\t\t\treturn XPCOM.NS_OK;", "+\t\t}", "+\t}", "+\t", "+//\tnsID NS_ASDF_IID = new nsID(\"3eedba38-8d22-41e1-817a-0e43e165b664\");", "+//\tif (guid.Equals (NS_ASDF_IID)) {", "+//\t\tSystem.out.println(\"QI'd for nsIScriptObjectPrincipal\");", "+//\t\tXPCOM.memmove (ppvObject, new int /*long*/[] {external.getAddress ()}, C.PTR_SIZEOF);", "+//\t\tAddRef();", "+//\t\treturn XPCOM.NS_OK;", "+//\t}", "+", "+//\tif (!Mozilla.IsPre_4) {", "+//\t\tnsID nsIXPCScriptable_IID = new nsID(\"a40ce52e-2d8c-400f-9af2-f8784a656070\");", "+//\t\tif (guid.Equals (nsIXPCScriptable_IID)) {", "+//\t\t\tSystem.out.println(\"QI'd for nsIXPCScriptable_IID\");", "+//\t\t\tXPCOM.memmove (ppvObject, new int /*long*/[] {xpcScriptable.getAddress ()}, C.PTR_SIZEOF);", "+//\t\t\tAddRef();", "+//\t\t\treturn XPCOM.NS_OK;", "+//\t\t}", "+//\t}", "+\t", "+\tSystem.out.println(\"no answer for: \" + guid.toString());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19ae3854bf017301475c0521c4749016", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "de1ef9e5dd8e2f657b19ac5e5eaa6cbf2017d8bb", "commitAfterChange": "bcac6ad70ee319247deb043444a858ffd48b487d", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 38, "signatureBeforeChange": "  void hookEvents ()", "signatureAfterChange": "  void hookEvents ()", "diff": ["-", "+\t} else { // FOR SPINNER", "+\t\tint eventMask =\tOS.GDK_POINTER_MOTION_MASK | OS.GDK_BUTTON_PRESS_MASK | OS.GDK_BUTTON_RELEASE_MASK;", "+\t\tOS.gtk_widget_add_events (handle, eventMask);", "+\t\tif ((style & SWT.DROP_DOWN) == 0 ) { ", "+\t\t\tOS.g_signal_connect_closure (handle, OS.output, display.closures [OUTPUT], true);", "+\t\t\tOS.g_signal_connect_closure (handle, OS.focus_in_event, display.closures [FOCUS_IN_EVENT], true);", "+\t\t}", "+\t\tif (OS.G_OBJECT_TYPE (handle) == OS.GTK_TYPE_MENU ()) {", "+\t\t\tOS.g_signal_connect_closure(handle, OS.selection_done, display.closures[SELECTION_DONE], true);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94c25eae97c1eb5090401a1173c131c5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "a85637b0f04c02a186f7eb1cbfb42a7898cff198", "commitAfterChange": "90e799a2f3caddd9fbb9bb038bc1d613744694a8", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " \tvoid printLine(int paintX, int paintY, GC gc, Color foreground, Color background, TextLayout layout)", "signatureAfterChange": " \tvoid printLine(int x, int y, GC gc, Color foreground, Color background, TextLayout layout, TextLayout printLayout, int index)", "diff": ["-\tvoid printLine(int paintX, int paintY, GC gc, Color foreground, Color background, TextLayout layout) {", "+\tvoid printLine(int x, int y, GC gc, Color foreground, Color background, TextLayout layout, TextLayout printLayout, int index) {", "-\t\t\tgc.fillRectangle(paintX, paintY, rect.width, rect.height);", "+\t\t\tgc.fillRectangle(x, y, rect.width, rect.height);", "+\t\tif (printOptions.printLineNumbers) {", "+\t\t\tFontMetrics metrics = layout.getLineMetrics(0);", "+\t\t\tprintLayout.setAscent(metrics.getAscent() + metrics.getDescent());", "+\t\t\tprintLayout.setDescent(metrics.getDescent());", "+\t\t\tprintLayout.setText(String.valueOf(index));", "+\t\t\tint paintX = x - printMargin - printLayout.getBounds().width;", "+\t\t\tprintLayout.draw(gc, paintX, y);", "+\t\t\tprintLayout.setAscent(-1);", "+\t\t\tprintLayout.setDescent(-1);", "+\t\t}", "-\t\tlayout.draw(gc, paintX, paintY);", "+\t\tlayout.draw(gc, x, y);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b35113e1d628f3b6028fbe88a39de885", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "1905ff1040b424a8c02ed162c7f70027fb9cc2a1", "commitAfterChange": "8020477095f7384b8e5f566a5db9fc33a8794ffd", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public void scroll (int destX, int destY, int x, int y, int width, int height, boolean all)", "signatureAfterChange": " public void scroll (int destX, int destY, int x, int y, int width, int height, boolean all)", "diff": ["-\t\t\tOS.gdk_window_scroll (window, deltaX, deltaY);", "-//\t\t\tlong /*int*/ cairo = OS.gdk_cairo_create(window);", "-//\t\t\tCairo.cairo_rectangle(cairo, destX, destY, width, height);", "-//\t\t\tCairo.cairo_clip(cairo);", "-//\t\t\tCairo.cairo_translate(cairo, deltaX, deltaY);", "-//\t\t\tCairo.cairo_set_operator(cairo, Cairo.CAIRO_OPERATOR_SOURCE);", "-//\t\t\tCairo.cairo_push_group(cairo);", "-//\t\t\tOS.gdk_cairo_set_source_window(cairo, window, 0, 0);", "-//\t\t\tCairo.cairo_paint(cairo);", "-//\t\t\tCairo.cairo_pop_group_to_source(cairo);", "-//\t\t\tCairo.cairo_rectangle(cairo, destX - deltaX, destY - deltaY, width, height);", "-//\t\t\tCairo.cairo_clip(cairo);", "-//\t\t\tCairo.cairo_paint(cairo);", "-//\t\t\tCairo.cairo_destroy(cairo);", "+\t\t\tlong /*int*/ cairo = OS.gdk_cairo_create(window);", "+\t\t\tif (Cairo.cairo_version() < Cairo.CAIRO_VERSION_ENCODE(1, 12, 0)) {", "+\t\t\t\tOS.gdk_cairo_set_source_window(cairo, window, 0, 0);", "+\t\t\t} else {", "+\t\t\t\tCairo.cairo_push_group(cairo);", "+\t\t\t\tOS.gdk_cairo_set_source_window(cairo, window, 0, 0);", "+\t\t\t\tCairo.cairo_paint(cairo);", "+\t\t\t\tCairo.cairo_pop_group_to_source(cairo);", "+\t\t\t}", "+\t\t\tdouble[] matrix = {1, 0, 0, 1, -deltaX, -deltaY};", "+\t\t\tCairo.cairo_pattern_set_matrix(Cairo.cairo_get_source(cairo), matrix);", "+\t\t\tCairo.cairo_rectangle(cairo, copyRect.x + deltaX, copyRect.y + deltaY, copyRect.width, copyRect.height);", "+\t\t\tCairo.cairo_clip(cairo);", "+\t\t\tCairo.cairo_paint(cairo);", "+\t\t\tCairo.cairo_destroy(cairo);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a06c1ff5b9c9d14e78347b084007051a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "dbb652fe193019d96be9d6af80af3f6e1918e181", "commitAfterChange": "a9865ce41544b9634fe7b5cf08a114ae91a2faeb", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "  static String kde_getMimeTypeCommand(String mimeType)", "signatureAfterChange": "  static Program kde_getProgram(Display display, String mimeType)", "diff": ["+", "+static Program kde_getProgram(Display display, String mimeType) {", "+\tProgram program = null;", "+\t/* Use the character encoding for the default locale */", "+\tbyte[] buffer = Converter.wcsToMbcs(null, mimeType, true);", "+\tint /*long*/ mimeTypeName = KDE.QString_new(buffer);", "+\tint /*long*/ serviceList = KDE.KMimeType_offers(mimeTypeName);", "+\tif (serviceList != 0) {", "+\t\tKDE.KServiceList_delete(serviceList);", "+\t\tprogram = new Program();", "+\t\tprogram.display = display;", "+\t\tprogram.name = mimeType;", "+\t\tprogram.command = \"KRun::runURL(url,mimeType)\";", "+\t\tint /*long*/ kMimeType = KDE.KMimeType_mimeType(mimeTypeName);", "+\t\tif (kMimeType != 0) {", "+\t\t\tint /*long*/ mimeIcon = KDE.KMimeType_icon(kMimeType, 0, false);", "+\t\t\tint /*long*/ loader = KDE.KGlobal_iconLoader();", "+\t\t\tint /*long*/ path = KDE.KIconLoader_iconPath(loader, mimeIcon, KDE.KICON_SMALL, true);", "+\t\t\tprogram.iconPath = kde_convertQStringAndFree(path);", "+\t\t\tKDE.QString_delete(mimeIcon);", "+\t\t\tKDE.KMimeType_delete(kMimeType);", "+\t\t}", "+\t\t", "+\t}", "+\tKDE.QString_delete(mimeTypeName);", "+\treturn program;", "-", "-static String kde_getMimeTypeCommand(String mimeType) {", "-\t/* Use the character encoding for the default locale */", "-\tbyte[] buffer = Converter.wcsToMbcs(null, mimeType, true);", "-\tint qMimeType = KDE.QString_new(buffer);", "-\tint serviceList = KDE.KMimeType_offers(qMimeType);", "-\tKDE.QString_delete(qMimeType);", "-\tif (serviceList == 0) return null;", "-\tKDE.KServiceList_delete(serviceList);", "-\treturn \"KRun::runURL(url,mimeType)\";"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6710cd8e5dd16d2b6c8a4a42cc7c1111", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TreeDragAndDropEffect.java", "commitBeforeChange": "05d38a410364e498a6aee8f9d16f948f2485a728", "commitAfterChange": "9b3777ac363c793d1cb46f33f1fe142affed7cf5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void showDropTargetEffect(int effect, int x, int y)", "signatureAfterChange": "  void showDropTargetEffect(int effect, int x, int y)", "diff": ["+", "+\t\t\t\tOS.ImageList_DragShowNolock(false);", "+\t\t\t\ttree.update();", "+\t\t\t\tOS.ImageList_DragShowNolock(true);", "+\t\t\t\tOS.ImageList_DragShowNolock(false);", "+\t\t\t\ttree.update();", "+\t\t\t\tOS.ImageList_DragShowNolock(true);", "+\t\tOS.ImageList_DragShowNolock(false);", "+\t\ttree.update();", "+\t\tOS.ImageList_DragShowNolock(true);", "+\t\tOS.ImageList_DragShowNolock(false);", "+\t\ttree.update();", "+\t\tOS.ImageList_DragShowNolock(true);", "+\t\t\tOS.ImageList_DragShowNolock(false);", "+\t\t\ttree.update();", "+\t\t\tOS.ImageList_DragShowNolock(true);", "-\t\tif (clearInsert) tree.setInsertMark(null, false);", "+\t\tif (clearInsert) {", "+\t\t\tOS.ImageList_DragShowNolock(false);", "+\t\t\ttree.setInsertMark(null, false);", "+\t\t\ttree.update();", "+\t\t\tOS.ImageList_DragShowNolock(true);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d13d1261599353440b1cf984c7834d87", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/TableDragAndDropEffect.java", "commitBeforeChange": "05d38a410364e498a6aee8f9d16f948f2485a728", "commitAfterChange": "9b3777ac363c793d1cb46f33f1fe142affed7cf5", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void showDropTargetEffect(int effect, int x, int y)", "signatureAfterChange": "  void showDropTargetEffect(int effect, int x, int y)", "diff": ["+", "+\t\t\t\tOS.ImageList_DragShowNolock(false);", "+\t\t\t\ttable.update();", "+\t\t\t\tOS.ImageList_DragShowNolock(true);", "-\tLVITEM lvItem = new LVITEM ();", "-\tlvItem.stateMask = OS.LVIS_DROPHILITED;", "-\tOS.SendMessage (handle, OS.LVM_SETITEMSTATE, -1, lvItem);", "+\t", "-\t\tlvItem.state = OS.LVIS_DROPHILITED;", "-\t\tOS.SendMessage (handle, OS.LVM_SETITEMSTATE, pinfo.iItem, lvItem);", "+\t\tTableItem item = table.getItem(pinfo.iItem);", "+\t\tif (dropHighlight != item) {", "+\t\t\tLVITEM lvItem = new LVITEM();", "+\t\t\tlvItem.stateMask = OS.LVIS_DROPHILITED;", "+\t\t\tOS.ImageList_DragShowNolock(false);", "+\t\t\tOS.SendMessage(handle, OS.LVM_SETITEMSTATE, -1, lvItem);\t\t", "+\t\t\tlvItem.state = OS.LVIS_DROPHILITED;", "+\t\t\tOS.SendMessage(handle, OS.LVM_SETITEMSTATE, pinfo.iItem, lvItem);", "+\t\t\ttable.update();", "+\t\t\tOS.ImageList_DragShowNolock(true);", "+\t\t\tdropHighlight = item;", "+\t\t}", "+\t} else {", "+\t\tif (dropHighlight != null) {", "+\t\t\tLVITEM lvItem = new LVITEM ();", "+\t\t\tlvItem.stateMask = OS.LVIS_DROPHILITED;", "+\t\t\tOS.ImageList_DragShowNolock(false);", "+\t\t\tOS.SendMessage(handle, OS.LVM_SETITEMSTATE, -1, lvItem);\t\t", "+\t\t\ttable.update();", "+\t\t\tOS.ImageList_DragShowNolock(true);", "+\t\t\tdropHighlight = null;", "+\t\t}", "+"]}], "num": 31608}
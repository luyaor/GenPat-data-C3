{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bd23e93cd66361ae821ddaddcfe072a5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e0d6ccd66c3a169899cdd253cd07280", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "71e082670a2e587e99ba9f0683312b9a404c65b8", "commitAfterChange": "2c2409b91eac452fa03efa9c9e69da66618d6519", "methodNumberBeforeChange": 85, "methodNumberAfterChange": 85, "signatureBeforeChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["-\t* Feature in Windows.  When a tree item is", "-\t* reselected, Windows does not issue a WM_NOTIFY.", "-\t* This is inconsistent with the list widget and", "-\t* other widgets in Windows.  The fix is to detect", "-\t* the case when an item is reselected and issue", "-\t* the notification.  The first part of this work", "-\t* around is to ensure that the user has selected", "-\t* an item.", "+\t* In a multi-select tree, if the user is collapsing a subtree that", "+\t* contains selected items, clear the selection from these items and", "+\t* issue a selection event.  Only items that are selected and visible", "+\t* are cleared.  This code also runs in the case when no item is selected.", "-\tif (lpht.hItem == 0 || (lpht.flags & OS.TVHT_ONITEM) == 0) {", "+\tif (lpht.hItem == 0 || (lpht.flags & OS.TVHT_ONITEMBUTTON) != 0) {", "-\t\t/*", "-\t\t* In a multi-select tree, if the user is collapsing a subtree that", "-\t\t* contains selected items, clear the selection from these items and", "-\t\t* issue a selection event.  Only items that are selected and visible", "-\t\t* are cleared.", "-\t\t*/", "-\t\tif ((style & SWT.MULTI) != 0) {", "-\t\t\tif (lpht.hItem != 0 && (lpht.flags & OS.TVHT_ONITEMBUTTON) != 0) {", "-\t\t\t\tint hSelection = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "-\t\t\t\tif (hSelection != 0) {", "-\t\t\t\t\tTVITEM tvItem = new TVITEM ();", "-\t\t\t\t\ttvItem.mask = OS.TVIF_STATE | OS.TVIF_PARAM;", "-\t\t\t\t\ttvItem.hItem = lpht.hItem;", "-\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "-\t\t\t\t\tif ((tvItem.state & OS.TVIS_EXPANDED) != 0) {", "-\t\t\t\t\t\tfixSelection = true;", "-\t\t\t\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;", "-\t\t\t\t\t\tint hParent = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_PARENT, lpht.hItem);", "-\t\t\t\t\t\tint hLast = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, lpht.hItem);", "-\t\t\t\t\t\tint hNext = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, lpht.hItem);", "-\t\t\t\t\t\twhile (hNext != 0 && hNext != hLast) {", "-\t\t\t\t\t\t\ttvItem.hItem = hNext;", "-\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "-\t\t\t\t\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) != 0) deselected = true;", "-\t\t\t\t\t\t\ttvItem.state = 0;", "-\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);", "-\t\t\t\t\t\t\tif ((hNext = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, hNext)) == 0) break;", "-\t\t\t\t\t\t\tif (hParent == OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_PARENT, hNext)) break;", "-\t\t\t\t\t\t}", "+\t\tif (lpht.hItem != 0 && (style & SWT.MULTI) != 0) {", "+\t\t\tint hSelection = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CARET, 0);", "+\t\t\tif (hSelection != 0) {", "+\t\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\t\ttvItem.mask = OS.TVIF_STATE | OS.TVIF_PARAM;", "+\t\t\t\ttvItem.hItem = lpht.hItem;", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "+\t\t\t\tif ((tvItem.state & OS.TVIS_EXPANDED) != 0) {", "+\t\t\t\t\tfixSelection = true;", "+\t\t\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;", "+\t\t\t\t\tint hParent = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_PARENT, lpht.hItem);", "+\t\t\t\t\tint hLast = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_LASTVISIBLE, lpht.hItem);", "+\t\t\t\t\tint hNext = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, lpht.hItem);", "+\t\t\t\t\twhile (hNext != 0 && hNext != hLast) {", "+\t\t\t\t\t\ttvItem.hItem = hNext;", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEM, 0, tvItem);", "+\t\t\t\t\t\tif ((tvItem.state & OS.TVIS_SELECTED) != 0) deselected = true;", "+\t\t\t\t\t\ttvItem.state = 0;", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);", "+\t\t\t\t\t\tif ((hNext = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXTVISIBLE, hNext)) == 0) break;", "+\t\t\t\t\t\tif (hParent == OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_PARENT, hNext)) break;", "+\t/*", "+\t* Determine whether the full line should be selected.", "+\t* Note that mouse selection for a tree with columns", "+\t* does not currently use TVS_FULLROWSELECT to do the", "+\t* selection because it does not draw properly.", "+\t*/", "+\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "+\t\t\tOS.SendMessage (handle, OS.TVM_SELECTITEM, OS.TVGN_CARET, lpht.hItem);", "+\t\t}", "+\t}", "-\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect1);", "-\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, rect2);", "+\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\t\t\tint fItemRect = (bits & OS.TVS_FULLROWSELECT) != 0 ? 0 : 1;", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, fItemRect, rect1);", "+\t\t\t\tOS.SendMessage (handle, OS.TVM_GETITEMRECT, fItemRect, rect2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab40020c50473ba001bc3b49ba326e6a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "f5a0d3582f75308849543d0ff0517400d5971efe", "commitAfterChange": "6a8f64aba74c6fc7a655a14fc7ca54a1aef70af2", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "  void setBackgroundTransparent (boolean transparent)", "signatureAfterChange": "  void setBackgroundTransparent (boolean transparent)", "diff": ["+\t/*", "+\t* Bug in Windows.  When the table has the extended style", "+\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "+\t* CLR_NONE to make the table transparent, Windows draws", "+\t* a black rectangle around the first column.  The fix is", "+\t* to set and clear LVS_EX_FULLROWSELECT.", "+\t*/", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETBKCOLOR, 0, OS.CLR_NONE);", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETTEXTBKCOLOR, 0, OS.CLR_NONE);", "+\t\t\tOS.SendMessage (handle, OS.LVM_SETBKCOLOR, 0, OS.CLR_NONE);", "+\t\t\tOS.SendMessage (handle, OS.LVM_SETTEXTBKCOLOR, 0, OS.CLR_NONE);", "+\t\t\t", "+\t\t\t/* Clear LVS_EX_FULLROWSELECT */", "+\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "+\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "+\t\t\t}", "+\t\t\t", "+\t\t\t/* Set LVS_EX_FULLROWSELECT */", "+\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\tif (!hooks (SWT.EraseItem) && !hooks (SWT.PaintItem)) {", "+\t\t\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "+\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, bits);", "+\t\t\t\t}", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a30caff82bef28a25478d4962f93181", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "966068aaa7215bc84ab090be34f0ec9f9cebb06c", "commitAfterChange": "c599c5b678cf64680c86543b4f7a10205d3638e9", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\t\tif ((style & SWT.MULTI) != 0 || ((style & SWT.BORDER) == 0)) {", "+\t\tif ((style & SWT.MULTI) != 0 || (style & (SWT.BORDER | SWT.SEARCH)) == 0) {", "-\t\t\tint window = OS.GetControlOwner (parent.handle);", "-\t\t\tOS.CreateEditUnicodeTextControl (window, null, 0, (style & SWT.PASSWORD) != 0, null, outControl);", "+\t\t\tif ((style & SWT.SEARCH) != 0) {", "+\t\t\t\tint attributes = (style & SWT.CANCEL) != 0 ? OS.kHISearchFieldAttributesCancel : 0;", "+\t\t\t\tOS.HISearchFieldCreate (null, attributes, 0, 0, outControl);", "+\t\t\t} else {", "+\t\t\t\tint window = OS.GetControlOwner (parent.handle);", "+\t\t\t\tOS.CreateEditUnicodeTextControl (window, null, 0, (style & SWT.PASSWORD) != 0, null, outControl);", "+\t\t\t}", "+\t\t\t}", "+\t\t\tif ((style & SWT.SEARCH) != 0) {", "+\t\t\t\tif (OS.HIVIEW) {", "+\t\t\t\t\tOS.HIViewSetVisible (handle, true);", "+\t\t\t\t} else {", "+\t\t\t\t\tOS.SetControlVisibility (handle, true, false);", "+\t\t\t\t}"]}], "num": 61083}
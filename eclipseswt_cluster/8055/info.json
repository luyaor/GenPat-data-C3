{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "37ac01bf09698be62c8cefb164bcc75c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8de91f5d49fd1cb407706d10adf43f85", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "5e2d580858138f39b04450d3d7462f70f593b33d", "commitAfterChange": "6086ff1582180c7237da261fc82386df3aa300ca", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  LRESULT wmMeasureChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmMeasureChild (int wParam, int lParam)", "diff": ["+\tint width = 0, height = 0;", "+\t\tRectangle rect = image.getBounds ();", "+\t\twidth = rect.width;", "+\t\theight = rect.height;", "+\t} else {", "+\t\t/*", "+\t\t* Bug in Windows.  When a menu item has a check and a string", "+\t\t* that includes a label and accelerator text but does not have", "+\t\t* a bitmap, when the string is the longest string in the menu,", "+\t\t* the label and accelerator text overlap.  The fix is to use", "+\t\t* SetMenuItemInfo() to indicate that the item has a bitmap", "+\t\t* and then answer the width of the widest bitmap in the menu", "+\t\t* from WM_MEASURECHILD.", "+\t\t*/", "+\t\tif ((style & (SWT.CHECK | SWT.RADIO)) != 0) {", "+\t\t\tMenuItem [] items = parent.getItems ();", "+\t\t\tfor (int i=0; i<items.length; i++) {", "+\t\t\t\tMenuItem item = items [i];", "+\t\t\t\tif (item.image != null) {", "+\t\t\t\t\tRectangle rect = item.image.getBounds ();", "+\t\t\t\t\twidth = Math.max (width, rect.width); ", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (width != 0 || height != 0) {", "-\t\tRectangle rect = image.getBounds ();", "-\t\tstruct.itemWidth = rect.width + (OS.IsWin95 ? 4 : 2);", "-\t\tstruct.itemHeight = rect.height + 4;", "+\t\tstruct.itemWidth = width + (OS.IsWin95 ? 4 : 2);", "+\t\tstruct.itemHeight = height + 4;", "+\t\tOS.MoveMemory (lParam, struct, MEASUREITEMSTRUCT.sizeof);", "-\tOS.MoveMemory (lParam, struct, MEASUREITEMSTRUCT.sizeof);\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0bc0203f4c420899100fd9bed5a9d486", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon2/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "636645cd71825a27e2f84e61e7bf769366dad642", "commitAfterChange": "1ddb2e7c3fc0d32ea2fcd254616fd28253c4cd77", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  public void pack ()", "signatureAfterChange": "  public void pack ()", "diff": ["-\t//NOT DONE", "-\tOS.SetDataBrowserTableViewNamedColumnWidth (parent.handle, id, (short)60);", "+\tGC gc = new GC (parent);", "+\tint width = 0;", "+\tint index = parent.indexOf (this);", "+\tfor (int i=0; i<parent.itemCount; i++) {", "+\t\tTableItem item = parent.items [i];", "+\t\tImage image = item.getImage (index);", "+\t\tString text = item.getText (index);", "+\t\tint itemWidth = 0;", "+\t\tif (image != null) itemWidth = image.getBounds ().width + 2;", "+\t\tif (text != null && text.length () > 0) itemWidth += gc.stringExtent (text).x;", "+\t\twidth = Math.max (width, itemWidth);", "+\t}", "+\tgc.dispose ();", "+\twidth += EXTRA_WIDTH;", "+\tOS.SetDataBrowserTableViewNamedColumnWidth (parent.handle, id, (short) width);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0a862cd7e8d2633bdd98caaff1cbb7e6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/TreeColumn.java", "commitBeforeChange": "e31d17ab01c6499c992488bb2508d677cae42d4c", "commitAfterChange": "96ead799b163f69c971718d08e432a475bbcdbbc", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void pack ()", "signatureAfterChange": " public void pack ()", "diff": ["-//\tGC gc = new GC (parent);", "-//\tint width = gc.stringExtent (text).x;", "-\t//TODO extra header", "-//\tint index = parent.indexOf (this);", "-//\twidth = Math.max (width, calculateWidth (parent.childIds, index, gc, width));", "-//", "-//\tgc.dispose ();", "-//\tsetWidth (width + parent.getInsetWidth (id, true));", "-\t//TODO this only takes care of the header", "-\tnsColumn.sizeToFit();", "+\tGC gc = new GC (parent);", "+\tint width = gc.stringExtent (text).x;", "+\t//TODO header extra", "+\tint index = parent.indexOf (this);", "+\tfor (int i=0; i<parent.itemCount; i++) {", "+\t\tTreeItem item = parent.items [i];", "+\t\tif (item != null && item.cached) {", "+\t\t\twidth = Math.max (width, item.calculateWidth (index, gc, true));", "+\t\t}", "+\t}", "+\tgc.dispose ();", "+\tsetWidth (width + parent.getInsetWidth ());"]}], "num": 8055}
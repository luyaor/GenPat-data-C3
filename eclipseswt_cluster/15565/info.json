{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "771580e5b5f516b05728734b260240c5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c67211f6e3e4582bd413c0bab2bed0fe", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "076d7e6631759f044ff06ad2f1c1fe3f1cb2f340", "commitAfterChange": "4edc576de20a88abac088ae701d29ce3e54ede4f", "methodNumberBeforeChange": 144, "methodNumberAfterChange": 144, "signatureBeforeChange": "  LRESULT WM_VSCROLL (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_VSCROLL (int wParam, int lParam)", "diff": ["+\t\t/*", "+\t\t* Feature in Windows.  On Vista only, it is faster to", "+\t\t* compute and answer the data for the visible columns", "+\t\t* of a table when scrolling, rather than just return", "+\t\t* the data for each column when asked.", "+\t\t*/", "+\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\tRECT headerRect = new RECT (), rect = new RECT ();", "+\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\tboolean [] visible = new boolean [columnCount];", "+\t\t\tfor (int i=0; i<columnCount; i++) {", "+\t\t\t\tvisible [i] = true;", "+\t\t\t\tif (OS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, i, headerRect) != 0) {", "+\t\t\t\t\tOS.MapWindowPoints (hwndHeader, handle, headerRect, 2);", "+\t\t\t\t\tvisible [i] = OS.IntersectRect(headerRect, rect, headerRect);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tdisplay.hwndParent = OS.GetParent (handle);", "+\t\t\t\tdisplay.columnVisible = visible;", "+\t\t\t\tOS.UpdateWindow (handle);", "+\t\t\t} finally {", "+\t\t\t\tdisplay.columnVisible = null;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "33a1d327e26da32d3a626c5fd3f0039b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "bb717d59b79c0a782a38ba12420d934c86085f62", "commitAfterChange": "5dc510036d3f589b77ab51681b222b8b9e1a0c26", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": " public void setSelection (TreeItem [] items)", "signatureAfterChange": " public void setSelection (TreeItem [] items)", "diff": ["-//\tint length = items.length;", "-//\tif (length == 0 || ((style & SWT.SINGLE) != 0 && length > 1)) return;", "-//\tint count = 0;", "-//\tint[] ids = new int [length];", "-//\tfor (int i=0; i<length; i++) {", "-//\t\tif (items [i] != null) {", "-//\t\t\tif (items [i].isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);", "-//\t\t\tids [count++] = items [i].id;", "-//\t\t\tshowItem (items [i], false);", "-//\t\t}", "-//\t}", "-//\tignoreSelect = true;", "-//\t/*", "-//\t* Bug in the Macintosh.  When the DataBroswer selection flags includes", "-//\t* both kDataBrowserNeverEmptySelectionSet and kDataBrowserSelectOnlyOne,", "-//    * two items are selected when SetDataBrowserSelectedItems() is called", "-//    * with kDataBrowserItemsAssign to assign a new seletion despite the fact", "-//\t* that kDataBrowserSelectOnlyOne was specified.  The fix is to save and", "-//\t* restore kDataBrowserNeverEmptySelectionSet around each call to", "-//\t* SetDataBrowserSelectedItems().", "-//\t*/", "-//\tint [] selectionFlags = null;", "-//\tif ((style & SWT.SINGLE) != 0) {", "-//\t\tselectionFlags = new int [1];", "-//\t\tOS.GetDataBrowserSelectionFlags (handle, selectionFlags);", "-//\t\tOS.SetDataBrowserSelectionFlags (handle, selectionFlags [0] & ~OS.kDataBrowserNeverEmptySelectionSet);", "-//\t}", "-//\tOS.SetDataBrowserSelectedItems (handle, count, ids, OS.kDataBrowserItemsAssign);", "-//\tif ((style & SWT.SINGLE) != 0) {", "-//\t\tOS.SetDataBrowserSelectionFlags (handle, selectionFlags [0]);", "-//\t}", "-//\tignoreSelect = false;", "-//\tif (length > 0) {", "-//\t\tint index = -1;", "-//\t\tfor (int i=0; i<items.length; i++) {", "-//\t\t\tif (items [i] != null) {", "-//\t\t\t\tindex = i;", "-//\t\t\t\tbreak;", "-//\t\t\t}", "-//\t\t}", "-//\t\tif (index != -1) showItem (items [index], true);", "-//\t}", "+\tint length = items.length;", "+\tif (length == 0 || ((style & SWT.SINGLE) != 0 && length > 1)) return;", "+\tNSOutlineView outlineView = (NSOutlineView) view;", "+\tNSMutableIndexSet rows = (NSMutableIndexSet) new NSMutableIndexSet ().alloc ().init ();", "+\trows.autorelease ();", "+\tfor (int i=0; i<length; i++) {", "+\t\tif (items [i] != null) {", "+\t\t\tif (items [i].isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);", "+\t\t\tTreeItem item = items [i];", "+\t\t\tshowItem (items [i], false);", "+\t\t\tint row = outlineView.rowForItem (item.handle);", "+\t\t\trows.addIndex (row);", "+\t\t}", "+\t}", "+\tignoreSelect = true;", "+\toutlineView.selectRowIndexes (rows, false);", "+\tignoreSelect = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "21569fcd0d154361173e9352886a296f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "076d7e6631759f044ff06ad2f1c1fe3f1cb2f340", "commitAfterChange": "4edc576de20a88abac088ae701d29ce3e54ede4f", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 143, "signatureBeforeChange": "  LRESULT WM_HSCROLL (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_HSCROLL (int wParam, int lParam)", "diff": ["+\t\t/*", "+\t\t* Feature in Windows.  On Vista only, it is faster to", "+\t\t* compute and answer the data for the visible columns", "+\t\t* of a table when scrolling, rather than just return", "+\t\t* the data for each column when asked.", "+\t\t*/", "+\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\tRECT headerRect = new RECT (), rect = new RECT ();", "+\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\tboolean [] visible = new boolean [columnCount];", "+\t\t\tfor (int i=0; i<columnCount; i++) {", "+\t\t\t\tvisible [i] = true;", "+\t\t\t\tif (OS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, i, headerRect) != 0) {", "+\t\t\t\t\tOS.MapWindowPoints (hwndHeader, handle, headerRect, 2);", "+\t\t\t\t\tvisible [i] = OS.IntersectRect(headerRect, rect, headerRect);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\ttry {", "+\t\t\t\tdisplay.hwndParent = OS.GetParent (handle);", "+\t\t\t\tdisplay.columnVisible = visible;", "+\t\t\t\tOS.UpdateWindow (handle);", "+\t\t\t} finally {", "+\t\t\t\tdisplay.columnVisible = null;", "+\t\t\t}", "+\t\t}"]}], "num": 15565}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a339809dc2214a05669e709772589ebd", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3f065a7158bf4198fc32a6d4a776b7d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TabFolder.java", "commitBeforeChange": "ab3a0e2212badb4230b4950583046c2765ca9b1b", "commitAfterChange": "7a333f8cd621c7ce81ccebdf86504138fdd1f158", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-//\tint width = OS.GTK_WIDGET_WIDTH (fixedHandle);\r", "-//\tint height = OS.GTK_WIDGET_HEIGHT (fixedHandle);\r", "-//\tOS.gtk_widget_set_size_request (handle, wHint, hHint);\r", "-//\tGtkRequisition requisition = new GtkRequisition ();\r", "-//\tOS.gtk_widget_size_request (handle, requisition);\r", "-//\tOS.gtk_widget_set_size_request (handle, width, height);\r", "-//\twidth = wHint == SWT.DEFAULT ? requisition.width : wHint;\r", "-//\theight = hHint == SWT.DEFAULT ? requisition.height : hHint;\r", "-//\tPoint size;\r", "-//\tif (layout != null) {\r", "-//\t\tsize = layout.computeSize (this, wHint, hHint, changed);\r", "-//\t} else {\r", "-//\t\tsize = minimumSize ();\r", "-//\t}\r", "-//\tif (size.x == 0) size.x = DEFAULT_WIDTH;\r", "-//\tif (size.y == 0) size.y = DEFAULT_HEIGHT;\r", "-//\tif (wHint != SWT.DEFAULT) size.x = wHint;\r", "-//\tif (hHint != SWT.DEFAULT) size.y = hHint;\r", "-//\twidth = Math.max (width, size.x);\r", "-//\theight = Math.max (height, size.y);\r", "-////\tRectangle trim = computeTrim (0, 0, width, height);\r", "-////\twidth = trim.width;  height = trim.height;\r", "-//\treturn new Point (width, height);\r", "-\treturn new Point (300, 300);\r", "+\tint width = OS.GTK_WIDGET_WIDTH (fixedHandle);\r", "+\tint height = OS.GTK_WIDGET_HEIGHT (fixedHandle);\r", "+\tOS.gtk_widget_set_size_request (handle, wHint, hHint);\r", "+\tGtkRequisition requisition = new GtkRequisition ();\r", "+\tboolean scrollable = OS.gtk_notebook_get_scrollable (handle);\r", "+\tOS.gtk_notebook_set_scrollable (handle, false);\r", "+\tOS.gtk_widget_size_request (handle, requisition);\r", "+\tOS.gtk_notebook_set_scrollable (handle, scrollable);\r", "+\tOS.gtk_widget_set_size_request (handle, width, height);\r", "+\twidth = wHint == SWT.DEFAULT ? requisition.width : wHint;\r", "+\theight = hHint == SWT.DEFAULT ? requisition.height : hHint;\r", "+\tPoint size;\r", "+\tif (layout != null) {\r", "+\t\tsize = layout.computeSize (this, wHint, hHint, changed);\r", "+\t} else {\r", "+\t\tsize = minimumSize ();\r", "+\t}\r", "+\tif (size.x == 0) size.x = DEFAULT_WIDTH;\r", "+\tif (size.y == 0) size.y = DEFAULT_HEIGHT;\r", "+\tif (wHint != SWT.DEFAULT) size.x = wHint;\r", "+\tif (hHint != SWT.DEFAULT) size.y = hHint;\r", "+\twidth = Math.max (width, size.x);\r", "+\theight = Math.max (height, size.y);\r", "+\treturn new Point (width, height);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69112dcdbe3b5a4a610339945bb0d1c3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "2187afd862fdea9fa726467ee2a9f03d0bb090e9", "commitAfterChange": "0866604db67e7f00aae199d153bb1013a37b107f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tint width = 64, height = 64;", "-\tif ((style & SWT.CALENDAR) != 0) {", "-\t\tRECT rect = new RECT ();", "-\t\tOS.SendMessage(handle, OS.MCM_GETMINREQRECT, 0, rect);", "-\t\twidth = rect.right;", "-\t\theight = rect.bottom;", "+\tint width = 0, height = 0;", "+\tif (wHint == SWT.DEFAULT || hHint == SWT.DEFAULT) {", "+\t\tif ((style & SWT.CALENDAR) != 0) {", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.SendMessage(handle, OS.MCM_GETMINREQRECT, 0, rect);", "+\t\t\twidth = rect.right;", "+\t\t\theight = rect.bottom;", "+\t\t} else {", "+\t\t\tint newFont, oldFont = 0;", "+\t\t\tint hDC = OS.GetDC (handle);", "+\t\t\tnewFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "+\t\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "+\t\t\tTEXTMETRIC tm = OS.IsUnicode ? (TEXTMETRIC) new TEXTMETRICW () : new TEXTMETRICA ();", "+\t\t\tOS.GetTextMetrics (hDC, tm);", "+\t\t\theight = tm.tmHeight;", "+\t\t\tint upDownHeight = OS.GetSystemMetrics (OS.SM_CYVSCROLL);", "+\t\t\theight = Math.max (height, upDownHeight);", "+\t\t\tString string = \"00/00/0000\";", "+\t\t\tif ((style & SWT.TIME) != 0) string = \"00:00:00 PM\";", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "+\t\t\tint flags = OS.DT_CALCRECT | OS.DT_EDITCONTROL | OS.DT_NOPREFIX;", "+\t\t\tOS.DrawText (hDC, buffer, buffer.length (), rect, flags);", "+\t\t\twidth = rect.right - rect.left;", "+\t\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "+\t\t\tOS.ReleaseDC (handle, hDC);", "+\t\t\tint upDownWidth = OS.GetSystemMetrics (OS.SM_CXVSCROLL);", "+\t\t\twidth += upDownWidth + MARGIN;", "+\t\t\t// TODO: On Vista, can send DTM_GETDATETIMEPICKERINFO to ask the Edit control what its margins are", "+\t\t}", "+\tif (width == 0) width = DEFAULT_WIDTH;", "+\tif (height == 0) height = DEFAULT_HEIGHT;", "+\tif (wHint != SWT.DEFAULT) width = wHint;", "+\tif (hHint != SWT.DEFAULT) height = hHint;", "+\tint border = getBorderWidth ();", "+\twidth += border * 2; height += border * 2;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83508718e45c0c67f37b1c28ddb15ad4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "4cde7dce4a62a12afca75bf893246ddd59f51b9e", "commitAfterChange": "cd01d8c794d2ee57cc20eae684610126923df1d8", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  void setBounds (int x, int y, int width, int height, int flags)", "signatureAfterChange": "  void setBounds (int x, int y, int width, int height, int flags)", "diff": ["-\t}\t", "+\t}", "+\t", "+\t/*", "+\t* Bug in Windows. If the client area height is smaller than ", "+\t* the font height, then the multi-line text widget does not", "+\t* update the formatting rectangle when resized. The fix is to", "+\t* detect this case and explicitly set the formatting rectangle.", "+\t*/", "+\tif ((flags & OS.SWP_NOSIZE) == 0) {", "+\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\tif ((bits & OS.ES_MULTILINE) != 0) {", "+\t\t\tint /*long*/ newFont, oldFont = 0;", "+\t\t\tint /*long*/ hDC = OS.GetDC (handle);", "+\t\t\tnewFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "+\t\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "+\t\t\tTEXTMETRIC tm = OS.IsUnicode ? (TEXTMETRIC) new TEXTMETRICW () : new TEXTMETRICA ();", "+\t\t\tOS.GetTextMetrics (hDC, tm);", "+\t\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "+\t\t\tOS.ReleaseDC (handle, hDC);", "+\t\t\tRECT rect = new RECT();", "+\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\tif ((rect.bottom - rect.top) < tm.tmHeight) {", "+\t\t\t\tint /*long*/ margins = OS.SendMessage (handle, OS.EM_GETMARGINS, 0, 0);", "+\t\t\t\trect.left += OS.LOWORD (margins);", "+\t\t\t\trect.right -= OS.HIWORD (margins);", "+\t\t\t\trect.top = 0;", "+\t\t\t\trect.bottom = tm.tmHeight;", "+\t\t\t\tOS.SendMessage (handle, OS.EM_SETRECT, 0, rect);", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 26533}
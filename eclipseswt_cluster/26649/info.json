{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2f05ec98b49cd97a565ba487c73b244a", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78d4b33c2a49b6a7d12fbb9ce8100a43", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "13c7ba94b389ac7c444b6a0c4c21ecac48b2f8f4", "commitAfterChange": "27c0efa85174869eed1eeedefcfdd6ce7fa3b42e", "methodNumberBeforeChange": 361, "methodNumberAfterChange": 362, "signatureBeforeChange": " \tint get_attributes(int offset, int pStartOffset, int pEndOffset, int pbstrTextAttributes)", "signatureAfterChange": " \tint get_attributes(int offset, int pStartOffset, int pEndOffset, int pbstrTextAttributes)", "diff": ["+\t\tString textAttributes = \"\";", "+\t\tTextStyle style = event.textStyle;", "+\t\tif (style != null) {", "+\t\t\tif (style.rise != 0) {", "+\t\t\t\ttextAttributes += \"text-position:\";", "+\t\t\t\tif (style.rise > 0) textAttributes += \"super\";", "+\t\t\t\telse textAttributes += \"sub\";", "+\t\t\t}", "+\t\t\tif (style.underline) {", "+\t\t\t\ttextAttributes += \"text-underline-type:\";", "+\t\t\t\tswitch (style.underlineStyle) {", "+\t\t\t\t\tcase SWT.UNDERLINE_SINGLE: textAttributes += \"single;\"; break;", "+\t\t\t\t\tcase SWT.UNDERLINE_DOUBLE: textAttributes += \"double;\"; break;", "+\t\t\t\t\tcase SWT.UNDERLINE_SQUIGGLE: textAttributes += \"single;text-underline-style:wave;\"; break;", "+\t\t\t\t\tcase SWT.UNDERLINE_ERROR: textAttributes += \"single;text-underline-style:wave;invalid:true;\"; break;", "+\t\t\t\t\tdefault: textAttributes += \"none;\"; break;", "+\t\t\t\t}", "+\t\t\t\t// TODO: style.underlineColor is not currently part of the IA2 spec. If provided, it would be \"text-underline-color:rgb(n,n,n);\"", "+\t\t\t}", "+\t\t\tif (style.strikeout) {", "+\t\t\t\ttextAttributes += \"text-line-through-type:single\";", "+\t\t\t\t// TODO: style.strikeoutColor is not currently part of the IA2 spec. If provided, it would be \"text-line-through-color:rgb(n,n,n);\"", "+\t\t\t}", "+\t\t\tFont font = style.font;", "+\t\t\tif (font != null && !font.isDisposed()) {", "+\t\t\t\tFontData fontData = font.getFontData()[0];", "+\t\t\t\ttextAttributes += \"font-family:\" + fontData.getName() + \";\";", "+\t\t\t\ttextAttributes += \"font-size:\" + fontData.getHeight() + \"pt;\";", "+\t\t\t\ttextAttributes += \"font-style:\" + (fontData.data.lfItalic != 0 ? \"italic\" : \"normal\") + \";\";", "+\t\t\t\ttextAttributes += \"font-weight:\" + fontData.data.lfWeight + \";\";", "+\t\t\t}", "+\t\t\tColor color = style.foreground;", "+\t\t\tif (color != null && !color.isDisposed()) {", "+\t\t\t\ttextAttributes += \"color:rgb(\" + color.getRed() + \",\" + color.getGreen() + \",\" + color.getBlue() + \");\";", "+\t\t\t}", "+\t\t\tcolor = style.background;", "+\t\t\tif (color != null && !color.isDisposed()) {", "+\t\t\t\ttextAttributes += \"background-color:rgb(\" + color.getRed() + \",\" + color.getGreen() + \",\" + color.getBlue() + \");\";", "+\t\t\t}", "+\t\t}", "+\t\tif (event.attributes != null) textAttributes += event.attributes;", "+\t\tif (DEBUG) print(\"IAccessibleText::get_attributes(\" + offset + \") returning start = \" + event.start + \", end = \" + event.end + \", attributes = \" + textAttributes);", "-\t\tString textAttributes = \"\";", "-\t\t// TODO: Construct text attributes string from event data", "-\t\tif (textAttributes.length() == 0) return COM.S_FALSE; // TODO: is S_FALSE ok here?", "+\t\tif (textAttributes.length() == 0) return COM.S_FALSE;", "-\t\t// TODO: @retval S_FALSE if there is nothing to return, [out] values are 0s and NULL respectively@retval E_INVALIDARG if bad [in] passed, [out] values are 0s and NULL respectively"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "038a5460c604d0398233699fcb6f0606", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "3e7cd17b0f25301421344ef85e8eac75a5a11cf2", "commitAfterChange": "c3c7ae82584ac896878f0641f2f98ef29a465675", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  void handleDOMEvent (OleEvent e)", "signatureAfterChange": "  void handleDOMEvent (OleEvent e)", "diff": ["+\t\tboolean consume = false;", "+\t\tOleAutomation document = null;", "+\t\tOleAutomation htmlWindow2 = null;", "+\t\tOleAutomation htmlEvent = null;", "+\t\t/* get IHTMLDocument2 */", "+\t\trgdispid = auto.getIDsOfNames (new String[] {\"Document\"}); //$NON-NLS-1$", "+\t\tpVarResult = auto.getProperty (rgdispid[0]);", "+\t\tif (pVarResult == null || pVarResult.getType() == COM.VT_EMPTY) {", "+\t\t\tif (pVarResult != null) pVarResult.dispose ();", "+\t\t} else {", "+\t\t\tdocument = pVarResult.getAutomation ();", "+\t\t\tpVarResult.dispose ();", "+\t\t\t/* get IHTMLWindow2 */", "+\t\t\trgdispid = document.getIDsOfNames (new String[] {\"parentWindow\"}); //$NON-NLS-1$", "+\t\t\tpVarResult = document.getProperty (rgdispid[0]);", "+\t\t\tif (pVarResult == null || pVarResult.getType () == COM.VT_EMPTY) {", "+\t\t\t\tif (pVarResult != null) pVarResult.dispose ();", "+\t\t\t} else {", "+\t\t\t\thtmlWindow2 = pVarResult.getAutomation ();", "+\t\t\t\tpVarResult.dispose ();", "+\t\t\t\t/* get IHTMLEventObj */", "+\t\t\t\trgdispid = htmlWindow2.getIDsOfNames (new String[] {\"event\"}); //$NON-NLS-1$", "+\t\t\t\tpVarResult = htmlWindow2.getProperty (rgdispid[0]);", "+\t\t\t\tif (pVarResult == null || pVarResult.getType () == COM.VT_EMPTY) {", "+\t\t\t\t\tif (pVarResult != null) pVarResult.dispose ();", "+\t\t\t\t} else {", "+\t\t\t\t\thtmlEvent = pVarResult.getAutomation ();", "+\t\t\t\t\tpVarResult.dispose ();", "+\t\t\t\t\t/* check event's returnValue property */", "+\t\t\t\t\trgdispid = htmlEvent.getIDsOfNames (new String[] {\"returnValue\"}); //$NON-NLS-1$", "+\t\t\t\t\tpVarResult = htmlEvent.getProperty (rgdispid[0]);", "+\t\t\t\t\tconsume = pVarResult != null && pVarResult.getType () == OLE.VT_BOOL && !pVarResult.getBoolean ();", "+\t\t\t\t\tpVarResult.dispose ();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tif (htmlEvent != null) htmlEvent.dispose ();", "+\t\tif (htmlWindow2 != null) htmlWindow2.dispose ();", "+\t\tif (document != null) document.dispose ();", "+", "-\t\tint flags = OS.PM_NOREMOVE | OS.PM_NOYIELD;", "+\t\tint flags = OS.PM_NOYIELD | (consume ? OS.PM_REMOVE : OS.PM_NOREMOVE);", "+\t\t\tevent.dispose();", "+\t\t\treturn;", "+\t\t}", "+", "+\t\tif (consume) {", "+\t\t\t/* ", "+\t\t\t * an event should not be sent if another listener has vetoed the", "+\t\t\t * KeyDown (this is for non-character cases like arrow keys, etc.)", "+\t\t\t */", "-\t\t* keypress events are not received for Enter, Delete and Tab, so", "-\t\t* KeyDown events are sent for them here.  Set the KeyDown event's", "-\t\t* character field and IE's lastCharCode field for these keys so", "-\t\t* that the Browser's key events are consistent with other controls.", "+\t\t* keypress events are not received for Backspace, Enter, Delete and", "+\t\t* Tab, so KeyDown events are sent for them here.  Set the KeyDown", "+\t\t* event's character field and IE's lastCharCode field for these keys", "+\t\t* so that the Browser's key events are consistent with other controls.", "+\t\t\tcase SWT.BS: lastCharCode = keyEvent.character = SWT.BS; break;"]}], "num": 26649}
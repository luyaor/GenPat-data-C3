{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "11b4e59ce61666ebfd8cee166f8e4a26", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec2ea8a820991fede966156b0c64a382", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "c6e5d71f5dee25c0fb8140fb735ceef0c2a1b122", "commitAfterChange": "e3c616f9231b29034092c983276e8473a94f5d9d", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 49, "signatureBeforeChange": " public void setText (String text)", "signatureAfterChange": " public void setText (String text)", "diff": ["-\tint length = text.length();", "-\tif (length != 0) {", "-\t\t/*", "-\t\t* Bug in the Macintosh.  ATSUI does not break the last line", "-\t\t* if it is empty. The fix is to add an extra line. ", "-\t\t*/", "-\t\tchar c = text.charAt(length - 1);", "-\t\tif (c == '\\n') length++;", "-\t\tchar[] chars = new char[length];", "-\t\ttext.getChars(0, text.length(), chars, 0);", "-\t\tif (c == '\\n') chars [length - 1] = '\\n';", "-\t\ttextPtr = OS.NewPtr(length * 2);", "-\t\tOS.memcpy(textPtr, chars, length * 2);", "-\t\tOS.ATSUSetTextPointerLocation(layout, textPtr, 0, length, length);", "-\t\tOS.ATSUSetTransientFontMatching(layout, true);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44253d48b473fea5e5ee2c61e2d82da1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "f428c4a2986fde1b4a4fc29a3f0cfb32a0967d42", "commitAfterChange": "b6f3e62de0eabd760aa0ef40883db2f2b3051dc5", "methodNumberBeforeChange": 84, "methodNumberAfterChange": 84, "signatureBeforeChange": "  public boolean execute (String script)", "signatureAfterChange": "  public boolean execute (String script)", "diff": ["-\t/* ", "-\t * Since the script is flattened to a single line (possibly containing", "-\t * \\n and/or \\r characters), a line comment ('//') results in all", "-\t * subsequent content being interpreted as comment text.  To work around", "-\t * this, pre-process the script to remove all line comments. ", "-\t */", "-\tString LINE_COMMENT = \"//\"; //$NON-NLS-1$", "-\tint index = script.indexOf (LINE_COMMENT);", "-\twhile (index != -1) {", "-\t\tint endIndex1 = script.indexOf ('\\r', index);", "-\t\tint endIndex2 = script.indexOf ('\\n', index);", "-\t\tint endIndex = script.length ();", "-\t\tif (endIndex1 != -1) endIndex = endIndex1;", "-\t\tif (endIndex2 != -1) endIndex = Math.min (endIndex, endIndex2);", "-\t\tscript = script.substring (0, index) + script.substring (endIndex);", "-\t\tindex = script.indexOf (LINE_COMMENT, index);", "-\t}", "-"]}], "num": 44547}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3318227fb6c1432434f95587617d8457", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bdcdc34176392e97820825bcae41097", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Tree.java", "commitBeforeChange": "8fde8fcbb781a32691eb37121e23a20db53e1ea6", "commitAfterChange": "9780776c5c4d623ed8c4e9ba64b74a19e324a8b3", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  public void test_setSelection$Lorg_eclipse_swt_widgets_TreeItem()", "signatureAfterChange": "  public void test_setSelection$Lorg_eclipse_swt_widgets_TreeItem()", "diff": ["-\tTreeItem[] itemsToBeSelected = {items[5], items[16], items[19]};", "-\ttree.setSelection(itemsToBeSelected);", "-\tTreeItem[] selItems = tree.getSelection();", "-\tint selLength = selItems.length;", "-\tassertTrue(\":len:\" + String.valueOf(selLength), selLength == itemsToBeSelected.length);", "-\tfor (int i = 0; i < itemsToBeSelected.length; i++) {", "-\t\tboolean found = false;", "-\t\tfor (int j = 0; j < selLength; j++) {", "-\t\t\tif (itemsToBeSelected[i] == selItems[i]) {", "-\t\t\t\tfound = true;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\tif (!found) fail (\"tree item not selected, index: \" + i);", "-\t}", "+", "+\tassertEquals(new TreeItem[] {}, tree.getSelection());", "+", "+\ttree.setSelection(new TreeItem[] {items[5], items[16], items[19]});", "+\tassertEquals(new TreeItem[] {items[5], items[16], items[19]}, tree.getSelection());", "+", "+\ttree.setSelection(items);", "+\tassertEquals(items, tree.getSelection());", "+\t", "-\tassertEquals(\":b:\", items, tree.getSelection());", "+\tassertEquals(tree.getItems(), tree.getSelection());", "+\t", "-\tassertEquals(\":c:\", new TreeItem[] {}, tree.getSelection());", "+\tassertEquals(new TreeItem[] {}, tree.getSelection());", "+\tassertEquals(0, tree.getSelectionCount());", "+\t", "-\ttree.removeAll();", "-\t", "-\tmakeCleanEnvironment(false);", "-\t", "-\tnumber = 5;", "-\titems = new TreeItem[number];", "-\tfor (int i = 0; i < number; i++)", "-\t\titems[i] = new TreeItem(tree, 0);", "-\ttry {", "-\t\ttree.setSelection((TreeItem[]) null);", "-\t\tfail(\"No exception thrown for items == null\");", "-\t}", "-\tcatch (IllegalArgumentException e) {", "-\t}", "-\tassertEquals(0, tree.getSelectionCount());", "-\t", "-\tmakeCleanEnvironment(false);", "-\t", "-\titems = new TreeItem[number];", "-\tfor (int i = 0; i < number; i++)", "-\t\titems[i] = new TreeItem(tree, 0);", "-\ttree.setSelection(new TreeItem[]{});", "-\tassertEquals(0, tree.getSelectionCount());", "-", "+\ttree.setSelection(new TreeItem[]{items[10]});", "+\tassertEquals(new TreeItem[] {items[10]}, tree.getSelection());", "+\t", "+\ttree.setSelection(new TreeItem[]{items[number-1]});", "+\tassertEquals(new TreeItem[] {items[number-1]}, tree.getSelection());", "+\t", "+\ttree.setSelection(new TreeItem[]{items[2]});", "+\tassertEquals(new TreeItem[] {items[2]}, tree.getSelection());", "+\t", "+\ttree.setSelection(new TreeItem[]{items[10], items[number-1], items[2]});", "+\tassertEquals(new TreeItem[] {items[2], items[10], items[number - 1]}, tree.getSelection());", "+\t", "-\tassertSame(\":b:\", new TreeItem[]{items[0], items[2], items[3]}, tree.getSelection());\t", "+\tassertSame(new TreeItem[]{items[0], items[2], items[3]}, tree.getSelection());\t", "-\tassertSame(\":c:\", new TreeItem[]{items[1], items[2], items[3]}, tree.getSelection());\t", "+\tassertSame(new TreeItem[]{items[1], items[2], items[3]}, tree.getSelection());\t", "-\tassertSame(\":d:\", new TreeItem[]{items[0], items[1], items[4]}, tree.getSelection());\t", "+\tassertSame(new TreeItem[]{items[0], items[1], items[4]}, tree.getSelection());\t", "-\tassertSame(\":e:\", new TreeItem[]{items[0], items[4]}, tree.getSelection());\t", "+\tassertSame(new TreeItem[]{items[0], items[4]}, tree.getSelection());\t", "-\tassertSame(\":f:\", new TreeItem[]{items[2], items[3], items[4]}, tree.getSelection());\t", "+\tassertSame(new TreeItem[]{items[2], items[3], items[4]}, tree.getSelection());\t", "-\tassertEquals(\":g:\", new TreeItem[]{items[4]}, tree.getSelection());\t", "-", "-\ttree.setSelection(new TreeItem[]{items[4]});", "-\tassertEquals(\":h:\", new TreeItem[]{items[4]}, tree.getSelection());\t", "-", "-\tmakeCleanEnvironment(false);", "-\t", "-\titems = new TreeItem[number];", "-\tfor (int i = 0; i < number; i++)", "-\t\titems[i] = new TreeItem(tree, 0);", "+\tassertEquals(new TreeItem[]{items[4]}, tree.getSelection());\t", "-\tassertEquals(\":a:\", new TreeItem[] {items[0]}, tree.getSelection());", "+\tassertEquals(new TreeItem[] {items[0]}, tree.getSelection());", "-\tassertEquals(\":b:\", new TreeItem[] {items[3]}, tree.getSelection());\t", "+\tassertEquals(new TreeItem[] {items[3]}, tree.getSelection());\t", "-\tassertEquals(\":c:\", new TreeItem[] {items[4]}, tree.getSelection());", "+\tassertEquals(new TreeItem[] {items[4]}, tree.getSelection());", "-\tassertEquals(\":d:\", new TreeItem[] {items[2]}, tree.getSelection());\t", "+\tassertEquals(new TreeItem[] {items[2]}, tree.getSelection());\t", "-\tassertEquals(\":e:\", new TreeItem[] {items[1]}, tree.getSelection());", "+\tassertEquals(new TreeItem[] {items[1]}, tree.getSelection());", "+\ttree.removeAll();", "+\ttree.setSelection(new TreeItem[] {});", "+\tassertEquals(new TreeItem[] {}, tree.getSelection());", "+\t", "+", "-\tnumber = 15;", "+", "+\ttree.setSelection(new TreeItem[] {items[5], items[16], items[19]});", "+\tassertEquals(new TreeItem[] {}, tree.getSelection());", "+", "+\ttree.setSelection(items);", "+\tassertEquals(new TreeItem[] {}, tree.getSelection());", "+\t", "+\ttree.setSelection(tree.getItems());", "+\tassertEquals(new TreeItem[] {}, tree.getSelection());", "+\t", "+\ttree.setSelection(new TreeItem[] {});", "+\tassertEquals(new TreeItem[] {}, tree.getSelection());", "+\tassertEquals(0, tree.getSelectionCount());", "+\t", "+\ttry {", "+\t\ttree.setSelection((TreeItem[]) null);", "+\t\tfail(\"No exception thrown for items == null\");", "+\t} ", "+\tcatch (IllegalArgumentException e) {", "+\t}", "-\ttree.setSelection(items);", "-\tassertEquals(new TreeItem[] {}, tree.getSelection());", "-", "-\tmakeCleanEnvironment(true); //single-selection tree", "-\t\t", "-\tnumber = 5;", "-\titems = new TreeItem[number];", "-\tfor (int i = 0; i < number; i++)", "-\t\titems[i] = new TreeItem(tree, 0);", "-\ttry {", "-\t\ttree.setSelection((TreeItem[]) null);", "-\t\tfail(\"No exception thrown for items == null\");", "-\t}", "-\tcatch (IllegalArgumentException e) {", "-\t}", "-\tassertEquals(0, tree.getSelectionCount());", "-", "-\tmakeCleanEnvironment(true); // single-selection tree", "-\t", "-\tnumber = 5;", "-\titems = new TreeItem[number];", "-\tfor (int i = 0; i < number; i++)", "-\t\titems[i] = new TreeItem(tree, 0);", "-", "-\ttree.setSelection(new TreeItem[]{});", "-\tassertEquals(0, tree.getSelectionCount());", "-", "-\tassertEquals(\":b:\", new TreeItem[]{}, tree.getSelection());\t", "+\tassertSame(new TreeItem[]{}, tree.getSelection());\t", "-\tassertEquals(\":c:\", new TreeItem[]{}, tree.getSelection());\t", "+\tassertSame(new TreeItem[]{}, tree.getSelection());\t", "-\tassertEquals(\":d:\", new TreeItem[]{}, tree.getSelection());\t", "+\tassertSame(new TreeItem[]{}, tree.getSelection());\t", "-\tassertEquals(\":e:\", new TreeItem[]{}, tree.getSelection());", "+\tassertSame(new TreeItem[]{}, tree.getSelection());\t", "-\tassertEquals(\":f:\", new TreeItem[]{}, tree.getSelection());\t", "+\tassertSame(new TreeItem[]{}, tree.getSelection());\t", "-\tassertEquals(\":g:\", new TreeItem[]{}, tree.getSelection());\t", "-", "-\ttree.setSelection(new TreeItem[]{items[4]});", "-\tassertEquals(\":h:\", new TreeItem[]{items[4]}, tree.getSelection());\t", "+\tassertEquals(new TreeItem[]{}, tree.getSelection());\t", "-\tassertEquals(\":a:\", new TreeItem[] {items[0]}, tree.getSelection());", "+\tassertEquals(new TreeItem[] {items[0]}, tree.getSelection());", "-\tassertEquals(\":b:\", new TreeItem[] {items[3]}, tree.getSelection());\t", "+\tassertEquals(new TreeItem[] {items[3]}, tree.getSelection());\t", "-\tassertEquals(\":c:\", new TreeItem[] {items[4]}, tree.getSelection());", "+\tassertEquals(new TreeItem[] {items[4]}, tree.getSelection());", "-\tassertEquals(\":d:\", new TreeItem[] {items[2]}, tree.getSelection());\t", "+\tassertEquals(new TreeItem[] {items[2]}, tree.getSelection());\t", "-\tassertEquals(\":e:\", new TreeItem[] {items[1]}, tree.getSelection());\t", "+\tassertEquals(new TreeItem[] {items[1]}, tree.getSelection());", "+\t", "+\ttree.removeAll();", "+\ttree.setSelection(new TreeItem[] {});", "+\tassertEquals(new TreeItem[] {}, tree.getSelection());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d7b34e21cc887c63534f655629339487", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Tree.java", "commitBeforeChange": "34b48a1450d691429218250a2c0b9f1d585dff6c", "commitAfterChange": "6c48129efab113803ef6d6a35457b5eb7eea82a5", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 33, "signatureBeforeChange": "  public void test_setSelection$Lorg_eclipse_swt_widgets_TreeItem()", "signatureAfterChange": "  public void test_setSelection$Lorg_eclipse_swt_widgets_TreeItem()", "diff": ["-\tassertEquals(new TreeItem[] {}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {}, tree.getSelection());", "-\tassertEquals(new TreeItem[] {}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {}, tree.getSelection());", "-\tassertEquals(new TreeItem[] {items[10]}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {items[10]}, tree.getSelection());", "-\tassertEquals(new TreeItem[] {items[number-1]}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {items[number-1]}, tree.getSelection());", "-\tassertEquals(new TreeItem[] {items[2]}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {items[2]}, tree.getSelection());", "-\tassertEquals(new TreeItem[]{items[4]}, tree.getSelection());\t", "+\tassertArrayEquals(new TreeItem[]{items[4]}, tree.getSelection());\t", "-\tassertEquals(new TreeItem[] {items[0]}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {items[0]}, tree.getSelection());", "-\tassertEquals(new TreeItem[] {items[3]}, tree.getSelection());\t", "+\tassertArrayEquals(new TreeItem[] {items[3]}, tree.getSelection());\t", "-\tassertEquals(new TreeItem[] {items[4]}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {items[4]}, tree.getSelection());", "-\tassertEquals(new TreeItem[] {items[2]}, tree.getSelection());\t", "+\tassertArrayEquals(new TreeItem[] {items[2]}, tree.getSelection());\t", "-\tassertEquals(new TreeItem[] {items[1]}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {items[1]}, tree.getSelection());", "-\tassertEquals(new TreeItem[] {}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {}, tree.getSelection());", "-\tassertEquals(new TreeItem[] {}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {}, tree.getSelection());", "-\tassertEquals(new TreeItem[] {}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {}, tree.getSelection());", "-\tassertEquals(new TreeItem[] {}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {}, tree.getSelection());", "-\tassertEquals(new TreeItem[] {}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {}, tree.getSelection());", "-\tassertEquals(new TreeItem[] {}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {}, tree.getSelection());", "-\tassertEquals(new TreeItem[] {items[10]}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {items[10]}, tree.getSelection());", "-\tassertEquals(new TreeItem[] {items[number-1]}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {items[number-1]}, tree.getSelection());", "-\tassertEquals(new TreeItem[] {items[2]}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {items[2]}, tree.getSelection());", "-\tassertEquals(new TreeItem[] {}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {}, tree.getSelection());", "-\tassertEquals(new TreeItem[]{}, tree.getSelection());\t", "+\tassertArrayEquals(new TreeItem[]{}, tree.getSelection());\t", "-\tassertEquals(new TreeItem[]{}, tree.getSelection());\t", "+\tassertArrayEquals(new TreeItem[]{}, tree.getSelection());\t", "-\tassertEquals(new TreeItem[]{}, tree.getSelection());\t", "+\tassertArrayEquals(new TreeItem[]{}, tree.getSelection());\t", "-\tassertEquals(new TreeItem[]{}, tree.getSelection());\t", "+\tassertArrayEquals(new TreeItem[]{}, tree.getSelection());\t", "-\tassertEquals(new TreeItem[]{}, tree.getSelection());\t", "+\tassertArrayEquals(new TreeItem[]{}, tree.getSelection());\t", "-\tassertEquals(new TreeItem[]{}, tree.getSelection());\t", "+\tassertArrayEquals(new TreeItem[]{}, tree.getSelection());\t", "-\tassertEquals(new TreeItem[] {items[0]}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {items[0]}, tree.getSelection());", "-\tassertEquals(new TreeItem[] {items[3]}, tree.getSelection());\t", "+\tassertArrayEquals(new TreeItem[] {items[3]}, tree.getSelection());\t", "-\tassertEquals(new TreeItem[] {items[4]}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {items[4]}, tree.getSelection());", "-\tassertEquals(new TreeItem[] {items[2]}, tree.getSelection());\t", "+\tassertArrayEquals(new TreeItem[] {items[2]}, tree.getSelection());\t", "-\tassertEquals(new TreeItem[] {items[1]}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {items[1]}, tree.getSelection());", "-\tassertEquals(new TreeItem[] {}, tree.getSelection());", "+\tassertArrayEquals(new TreeItem[] {}, tree.getSelection());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e41d88909fb6267fd55bacc6df749ab", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_widgets_Text.java", "commitBeforeChange": "91999dea023f538a28afe60645e6dff08a1085a9", "commitAfterChange": "d2c1767eb08a28bfa31c8e2d549b4275c725bd40", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": "  public void test_getTextII()", "signatureAfterChange": "  public void test_getTextII()", "diff": ["+\tassertEquals(\"\", text.getText());", "+\tassertEquals(\"\", text.getText(-4,-4));", "+\tassertEquals(\"\", text.getText(-4,-2));", "+\tassertEquals(\"\", text.getText(-2,-1));", "+\tassertEquals(\"\", text.getText(-1,-1));", "+\tassertEquals(\"\", text.getText(-1,0));", "+\tassertEquals(\"\", text.getText(0,0));", "+\tassertEquals(\"\", text.getText(0,1));", "+\tassertEquals(\"\", text.getText(10,20));", "+\t", "+\ttext.setText(\"a\");", "+\tassertEquals(\"\", text.getText(-4,-4));", "+\tassertEquals(\"\", text.getText(-4,-2));", "+\tassertEquals(\"\", text.getText(-2,-1));", "+\tassertEquals(\"\", text.getText(-1,-1));", "+\tassertEquals(\"a\", text.getText(-1,0));", "+\tassertEquals(\"a\", text.getText(0,0));", "+\tassertEquals(\"a\", text.getText(0,1));", "+\tassertEquals(\"\", text.getText(10,20));", "+\t", "+\ttext.setText(\"01234567890\");", "+\tassertEquals(\"345\", text.getText(3, 5));", "+\tassertEquals(\"012\", text.getText(-1, 2));", "+\tassertEquals(\"34567890\", text.getText(3, 100));", "+\tassertEquals(\"\", text.getText(5, 3));", "+\tassertEquals(\"0\", text.getText(10,20));", "+\t", "+\ttext.setText(\"\");", "+\ttext.setEchoChar('*');", "+\t", "+\tassertEquals(\"\", text.getText());", "+\tassertEquals(\"\", text.getText(-4,-4));", "+\tassertEquals(\"\", text.getText(-4,-2));", "+\tassertEquals(\"\", text.getText(-2,-1));", "+\tassertEquals(\"\", text.getText(-1,-1));", "+\tassertEquals(\"\", text.getText(-1,0));", "+\tassertEquals(\"\", text.getText(0,0));", "+\tassertEquals(\"\", text.getText(0,1));", "+\tassertEquals(\"\", text.getText(10,20));", "+\t", "+\ttext.setText(\"a\");", "+\tassertEquals(\"\", text.getText(-4,-4));", "+\tassertEquals(\"\", text.getText(-4,-2));", "+\tassertEquals(\"\", text.getText(-2,-1));", "+\tassertEquals(\"\", text.getText(-1,-1));", "+\tassertEquals(\"a\", text.getText(-1,0));", "+\tassertEquals(\"a\", text.getText(0,0));", "+\tassertEquals(\"a\", text.getText(0,1));", "+\tassertEquals(\"\", text.getText(10,20));", "+\t", "+\ttext.setText(\"01234567890\");", "+\tassertEquals(\"345\", text.getText(3, 5));", "+\tassertEquals(\"012\", text.getText(-1, 2));", "+\tassertEquals(\"34567890\", text.getText(3, 100));", "+\tassertEquals(\"\", text.getText(5, 3));", "+\tassertEquals(\"0\", text.getText(10,20));", "+\t", "+\t// tests a SINGLE line text editor", "+\tmakeCleanEnvironment(true);", "+\tassertEquals(\"\", text.getText());", "+\tassertEquals(\"\", text.getText(-4,-4));", "+\tassertEquals(\"\", text.getText(-4,-2));", "+\tassertEquals(\"\", text.getText(-2,-1));", "+\tassertEquals(\"\", text.getText(-1,-1));", "+\tassertEquals(\"\", text.getText(-1,0));", "+\tassertEquals(\"\", text.getText(0,0));", "+\tassertEquals(\"\", text.getText(0,1));", "+\tassertEquals(\"\", text.getText(10,20));", "+\t", "+\ttext.setText(\"a\");", "+\tassertEquals(\"\", text.getText(-4,-4));", "+\tassertEquals(\"\", text.getText(-4,-2));", "+\tassertEquals(\"\", text.getText(-2,-1));", "+\tassertEquals(\"\", text.getText(-1,-1));", "+\tassertEquals(\"a\", text.getText(-1,0));", "+\tassertEquals(\"a\", text.getText(0,0));", "+\tassertEquals(\"a\", text.getText(0,1));", "+\tassertEquals(\"\", text.getText(10,20));", "+\t", "+\ttext.setText(\"01234567890\");", "+\tassertEquals(\"345\", text.getText(3, 5));", "+\tassertEquals(\"012\", text.getText(-1, 2));", "+\tassertEquals(\"34567890\", text.getText(3, 100));", "+\tassertEquals(\"\", text.getText(5, 3));", "+\tassertEquals(\"0\", text.getText(10,20));", "+\t", "+\ttext.setText(\"\");", "+\ttext.setEchoChar('*');", "+\t", "+\tassertEquals(\"\", text.getText());", "+\tassertEquals(\"\", text.getText(-4,-4));", "+\tassertEquals(\"\", text.getText(-4,-2));", "+\tassertEquals(\"\", text.getText(-2,-1));", "+\tassertEquals(\"\", text.getText(-1,-1));", "+\tassertEquals(\"\", text.getText(-1,0));", "+\tassertEquals(\"\", text.getText(0,0));", "+\tassertEquals(\"\", text.getText(0,1));", "+\tassertEquals(\"\", text.getText(10,20));", "+\t", "+\ttext.setText(\"a\");", "+\tassertEquals(\"\", text.getText(-4,-4));", "+\tassertEquals(\"\", text.getText(-4,-2));", "+\tassertEquals(\"\", text.getText(-2,-1));", "+\tassertEquals(\"\", text.getText(-1,-1));", "+\tassertEquals(\"a\", text.getText(-1,0));", "+\tassertEquals(\"a\", text.getText(0,0));", "+\tassertEquals(\"a\", text.getText(0,1));", "+\tassertEquals(\"\", text.getText(10,20));", "+\t", "+\ttext.setText(\"01234567890\");", "+\tassertEquals(\"345\", text.getText(3, 5));", "+\tassertEquals(\"012\", text.getText(-1, 2));", "+\tassertEquals(\"34567890\", text.getText(3, 100));", "+\tassertEquals(\"\", text.getText(5, 3));", "+\tassertEquals(\"0\", text.getText(10,20));", "+\t", "+\t// tests a SINGLE line text editor", "+\tmakeCleanEnvironment(true, true);"]}], "num": 44252}
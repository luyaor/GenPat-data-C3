{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "39ba61ffefd9d713c40e1f315577c171", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6af8d72b57888fefdf173d76fe1d1b6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "ec0fd72dfafa3580c8b3685a082cc525b5e48635", "commitAfterChange": "800f37e4ba6af1142a8f20dd9d1fe1dd5f3a77b9", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tint atkText_get_text_before_offset (int offset, int boundary_type, int start_offset, int end_offset)", "signatureAfterChange": "  \tint atkText_get_text_before_offset (int offset, int boundary_type, int start_offset, int end_offset)", "diff": ["-\t\t//\tTODO according to new gnome doc this determined text wrong", "-\t\tString text = getText ();", "-\t\tif (text != null) {", "-\t\t\tint startBounds = offset;", "-\t\t\tString beforeText = text.substring (0, offset);", "-\t\t\tswitch (boundary_type) {", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_CHAR: {", "-\t\t\t\t\tif (beforeText.length () > 0) startBounds--;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_START:", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_END: {", "-\t\t\t\t\tstartBounds = beforeText.lastIndexOf ('\\n') + 1; // TODO use platform line delimiter?", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_START:", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_END: {", "-\t\t\t\t\t// TODO ask the client for eligible separators?", "-\t\t\t\t\tint separatorIndex = 0;", "-\t\t\t\t\tseparatorIndex = Math.max (separatorIndex, beforeText.lastIndexOf ('.') + 1);", "-\t\t\t\t\tseparatorIndex = Math.max (separatorIndex, beforeText.lastIndexOf ('?') + 1);", "-\t\t\t\t\tseparatorIndex = Math.max (separatorIndex, beforeText.lastIndexOf ('!') + 1);", "-\t\t\t\t\tstartBounds = separatorIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_START:", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_END: {", "-\t\t\t\t\t// TODO ask the client for eligible separators?", "-\t\t\t\t\tint separatorIndex = 0;", "-\t\t\t\t\tseparatorIndex = Math.max (separatorIndex, beforeText.lastIndexOf (' ') + 1);", "-\t\t\t\t\tseparatorIndex = Math.max (separatorIndex, beforeText.lastIndexOf ('\\n') + 1);", "-\t\t\t\t\tstartBounds = separatorIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tOS.memmove (start_offset, new int[] {startBounds}, 4);", "-\t\t\tOS.memmove (end_offset, new int[] {offset}, 4);", "-//\t\t\ttext = text.substring (start_offset, end_offset);", "-\t\t\tbyte[] bytes = Converter.wcsToMbcs (null, text, true);", "-//\t\t\tTODO gnopernicus bug? freeing previous string can cause gp", "-//\t\t\tif (textPtr != -1) OS.g_free (textPtr);", "-\t\t\ttextPtr = OS.g_malloc (bytes.length);", "-\t\t\tOS.memmove (textPtr, bytes, bytes.length);", "-\t\t\treturn textPtr;", "-\t\t} ", "+\t\t// TODO"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5f83a6ad5e22e0f80d5c64ca30393b20", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "ec0fd72dfafa3580c8b3685a082cc525b5e48635", "commitAfterChange": "800f37e4ba6af1142a8f20dd9d1fe1dd5f3a77b9", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  \tint atkText_get_text_at_offset (int offset, int boundary_type, int start_offset, int end_offset)", "signatureAfterChange": "  \tint atkText_get_text_at_offset (int offset, int boundary_type, int start_offset, int end_offset)", "diff": ["-\t\t// TODO according to new gnome doc this determined text wrong", "-\t\tString text = getText ();", "-\t\tif (text != null) {", "-\t\t\tint startBounds = offset;", "-\t\t\tString beforeText = text.substring (0, offset);", "-\t\t\tint endBounds = offset;", "-\t\t\tString afterText = text.substring (offset);", "-\t\t\tswitch (boundary_type) {", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_CHAR: {", "-\t\t\t\t\tif (afterText.length () > 0) endBounds++;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_START:", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_LINE_END: {", "-\t\t\t\t\tstartBounds = beforeText.lastIndexOf ('\\n') + 1; // TODO use platform line delimiter?", "-\t\t\t\t\tint newlineIndex = afterText.indexOf ('\\n');\t//TODO use platform line delimiter?", "-\t\t\t\t\tif (newlineIndex == -1) newlineIndex = afterText.length ();", "-\t\t\t\t\tendBounds += newlineIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_START:", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_SENTENCE_END: {", "-\t\t\t\t\t// TODO ask the client for eligible separators?", "-\t\t\t\t\tint separatorIndex = 0;", "-\t\t\t\t\tseparatorIndex = Math.max (separatorIndex, beforeText.lastIndexOf ('.') + 1);", "-\t\t\t\t\tseparatorIndex = Math.max (separatorIndex, beforeText.lastIndexOf ('?') + 1);", "-\t\t\t\t\tseparatorIndex = Math.max (separatorIndex, beforeText.lastIndexOf ('!') + 1);", "-\t\t\t\t\tstartBounds = separatorIndex;", "-\t\t\t\t\tseparatorIndex = afterText.length ();", "-\t\t\t\t\tint periodIndex = afterText.indexOf ('.');", "-\t\t\t\t\tif (periodIndex != -1) separatorIndex = Math.min (separatorIndex, periodIndex + 1);", "-\t\t\t\t\tint questionIndex = afterText.indexOf ('?');", "-\t\t\t\t\tif (questionIndex != -1) separatorIndex = Math.min (separatorIndex, questionIndex + 1);", "-\t\t\t\t\tint exclaimationIndex = afterText.indexOf ('!');", "-\t\t\t\t\tif (exclaimationIndex != -1) separatorIndex = Math.min (separatorIndex, exclaimationIndex + 1);", "-\t\t\t\t\tendBounds += separatorIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_START:", "-\t\t\t\tcase ATK.ATK_TEXT_BOUNDARY_WORD_END: {", "-\t\t\t\t\t// TODO ask the client for eligible separators?", "-\t\t\t\t\tint separatorIndex = 0;", "-\t\t\t\t\tseparatorIndex = Math.max (separatorIndex, beforeText.lastIndexOf (' ') + 1);", "-\t\t\t\t\tseparatorIndex = Math.max (separatorIndex, beforeText.lastIndexOf ('\\n') + 1);", "-\t\t\t\t\tstartBounds = separatorIndex;", "-\t\t\t\t\tseparatorIndex = afterText.length ();", "-\t\t\t\t\tint spaceIndex = afterText.indexOf (' ');", "-\t\t\t\t\tif (spaceIndex != -1) separatorIndex = Math.min (separatorIndex, spaceIndex);", "-\t\t\t\t\tint newlineIndex = afterText.indexOf ('\\n');", "-\t\t\t\t\tif (newlineIndex != -1) separatorIndex = Math.min (separatorIndex, newlineIndex);", "-\t\t\t\t\tendBounds += separatorIndex;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tOS.memmove (start_offset, new int[] {startBounds}, 4);", "-\t\t\tOS.memmove (end_offset, new int[] {endBounds}, 4);", "-\t\t\ttext = text.substring (startBounds, endBounds);", "-\t\t\tbyte[] bytes = Converter.wcsToMbcs (null, text, true);", "-//\t\t\tTODO gnopernicus bug? freeing previous string can cause gp", "-//\t\t\tif (textPtr != -1) OS.g_free (textPtr);", "-\t\t\ttextPtr = OS.g_malloc (bytes.length);", "-\t\t\tOS.memmove (textPtr, bytes, bytes.length);", "-\t\t\treturn textPtr;", "-\t\t} ", "+\t\t// TODO"]}], "num": 14874}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1b1edc844de3d7b86d4e34ee982ac1c2", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be5c09b8f37da473cfb00a83226bd56c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet220.java", "commitBeforeChange": "1bd926e9ca7f8cdd3cdd764933d6b42a0ca3ec9d", "commitAfterChange": "180ffe57f7c13068cf75ac5d47d4ed051a608d35", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\t \t public static void main(String [] args)", "signatureAfterChange": "\t \t public static void main(String [] args)", "diff": ["-\tfinal Image image = display.getSystemImage(SWT.ICON_INFORMATION);", "-\tshell.setText(\"Images on the right side of the TreeItem\");", "-\tshell.setLayout(new FillLayout ());", "-\tTree tree = new Tree(shell, SWT.MULTI | SWT.FULL_SELECTION);", "-\ttree.setHeaderVisible(true);", "-\ttree.setLinesVisible(true);\t\t\t", "-\tint columnCount = 4;", "-\tfor(int i = 0; i < columnCount; i++) {", "-\t\tTreeColumn column = new TreeColumn(tree, SWT.NONE);", "-\t\tcolumn.setText(\"Column \" + i);\t", "+\tshell.setBounds(10, 10, 350, 200);", "+\tImage xImage = new Image (display, 16, 16);", "+\tGC gc = new GC(xImage);", "+\tgc.setForeground(display.getSystemColor(SWT.COLOR_RED));", "+\tgc.drawLine(1, 1, 14, 14);", "+\tgc.drawLine(1, 14, 14, 1);", "+\tgc.drawOval(2, 2, 11, 11);", "+\tgc.dispose();", "+\tfinal int IMAGE_MARGIN = 2;", "+\tfinal Tree tree = new Tree(shell, SWT.CHECK);", "+\ttree.setBounds(10, 10, 300, 150);", "+\tTreeItem item = new TreeItem(tree, SWT.NONE);", "+\titem.setText(\"root item\");", "+\tfor (int i = 0; i < 4; i++) {", "+\t\tTreeItem newItem = new TreeItem(item, SWT.NONE);", "+\t\tnewItem.setText(\"descendent \" + i);", "+\t\tif (i % 2 == 0) newItem.setData(xImage);", "+\t\titem.setExpanded(true);", "+\t\titem = newItem;", "-\tint itemCount = 3;", "-\tfor (int i=0; i<itemCount; i++) {", "-\t\tTreeItem item1 = new TreeItem(tree, SWT.NONE);", "-\t\titem1.setText(\"item \"+i);", "-\t\tfor (int c=1; c < columnCount; c++) {", "-\t\t\titem1.setText(c, \"item [\"+i+\"-\"+c+\"]\");", "-\t\t}", "-\t\tfor (int j=0; j<itemCount; j++) {", "-\t\t\tTreeItem item2 = new TreeItem(item1, SWT.NONE);", "-\t\t\titem2.setText(\"item [\"+i+\" \"+j+\"]\");", "-\t\t\tfor (int c=1; c<columnCount; c++) {", "-\t\t\t\titem2.setText(c, \"item [\"+i+\" \"+j+\"-\"+c+\"]\");", "-\t\t\t}", "-\t\t\tfor (int k=0; k<itemCount; k++) {", "-\t\t\t\tTreeItem item3 = new TreeItem(item2, SWT.NONE);", "-\t\t\t\titem3.setText(\"item [\"+i+\" \"+j+\" \"+k+\"]\");", "-\t\t\t\tfor (int c=1; c<columnCount; c++) {", "-\t\t\t\t\titem3.setText(c, \"item [\"+i+\" \"+j+\" \"+k+\"-\"+c+\"]\");", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "-\t/*", "-\t * NOTE: MeasureItem, PaintItem and EraseItem are called repeatedly.", "-\t * Therefore, it is critical for performance that these methods be", "-\t * as efficient as possible.", "-\t */", "-\tListener paintListener = new Listener() {", "-\t\tpublic void handleEvent(Event event) {\t\t\t", "-\t\t\tswitch(event.type) {", "-\t\t\t\tcase SWT.MeasureItem: {", "-\t\t\t\t\tRectangle rect = image.getBounds();", "-\t\t\t\t\tevent.width += rect.width;", "-\t\t\t\t\tevent.height = Math.max(event.height, rect.height + 2);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase SWT.PaintItem: {", "-\t\t\t\t\tint x = event.x + event.width;", "-\t\t\t\t\tRectangle rect = image.getBounds();", "-\t\t\t\t\tint offset = Math.max(0, (event.height - rect.height) / 2);", "-\t\t\t\t\tevent.gc.drawImage(image, x, event.y + offset);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t};\t\t", "-\ttree.addListener(SWT.MeasureItem, paintListener);", "-\ttree.addListener(SWT.PaintItem, paintListener);\t\t", "-\tfor(int i = 0; i < columnCount; i++) {", "-\t\ttree.getColumn(i).pack();", "-\t}\t", "-\tshell.setSize(500, 200);", "+\t/*", "+\t * NOTE: MeasureItem and PaintItem are called repeatedly.  Therefore it is", "+\t * critical for performance that these methods be as efficient as possible.", "+\t */", "+\ttree.addListener(SWT.MeasureItem, new Listener() {", "+\t\tpublic void handleEvent(Event event) {", "+\t\t\tTreeItem item = (TreeItem)event.item;", "+\t\t\tImage trailingImage = (Image)item.getData();", "+\t\t\tif (trailingImage != null) {", "+\t\t\t\tevent.width += trailingImage.getBounds().width + IMAGE_MARGIN;", "+\t\t\t}", "+\t\t}", "+\t});", "+\ttree.addListener(SWT.PaintItem, new Listener() {", "+\t\tpublic void handleEvent(Event event) {", "+\t\t\tTreeItem item = (TreeItem)event.item;", "+\t\t\tImage trailingImage = (Image)item.getData();", "+\t\t\tif (trailingImage != null) {", "+\t\t\t\tint x = event.x + event.width + IMAGE_MARGIN;", "+\t\t\t\tint itemHeight = tree.getItemHeight();", "+\t\t\t\tint imageHeight = trailingImage.getBounds().height;", "+\t\t\t\tint y = event.y + (itemHeight - imageHeight) / 2;", "+\t\t\t\tevent.gc.drawImage(trailingImage, x, y);", "+\t\t\t}", "+\t\t}", "+\t});", "+", "-\twhile(!shell.isDisposed ()) {", "-\t\tif(!display.readAndDispatch()) display.sleep();", "+\twhile (!shell.isDisposed()) {", "+\t\tif (!display.readAndDispatch()) display.sleep();", "-\tif(image != null) image.dispose();", "+\txImage.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0de69c42812d2eb5a52376de4b4b8c6d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet231.java", "commitBeforeChange": "3cce67e8530c055470017a7865433fd1018df6a7", "commitAfterChange": "e65ed25668cb10eb16fda0f9d78af20d466d897c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public static void main(String [] args)", "signatureAfterChange": " \t public static void main(String [] args)", "diff": ["+\tfinal int COLUMN_COUNT = 4;", "+\tfinal int ITEM_COUNT = 8;", "+\tfinal int TEXT_MARGIN = 3;", "-\tShell shell = new Shell (display);", "-\tshell.setText(\"Multiple lines in a TableItem\");", "-\tshell.setLayout (new FillLayout());", "-\tfinal Table table = new Table(shell, SWT.MULTI | SWT.FULL_SELECTION);", "+\tShell shell = new Shell(display);", "+\tfinal Table table = new Table(shell, SWT.FULL_SELECTION);", "-\tint columnCount = 4;", "-\tfor (int i=0; i<columnCount; i++) {", "-\t\tTableColumn column = new TableColumn(table, SWT.NONE);", "-\t\tcolumn.setText(\"Column \" + i);\t", "+\tfor (int i = 0; i < COLUMN_COUNT; i++) {", "+\t\tnew TableColumn(table, SWT.NONE);", "-\tint itemCount = 8;", "-\tfor(int i = 0; i < itemCount; i++) {", "+\tfor (int i = 0; i < ITEM_COUNT; i++) {", "-\t\titem.setText(new String[] {\"item \"+i+\" a\", \"item \"+i+\" b\", \"item \"+i+\" c\", \"item \"+i+\" d\"});", "-\t}\t", "+\t\tfor (int j = 0; j < COLUMN_COUNT; j++) {", "+\t\t\tString string = \"item \" + i + \" col \" + j;", "+\t\t\tif ((i + j) % 3 == 1) {", "+\t\t\t\tstring +=\"\\nnew line1\";", "+\t\t\t}", "+\t\t\tif ((i + j) % 3 == 2) {", "+\t\t\t\tstring +=\"\\nnew line1\\nnew line2\";", "+\t\t\t}", "+\t\t\titem.setText(j, string);", "+\t\t}", "+\t}", "+", "-\tListener paintListener = new Listener() {", "+\ttable.addListener(SWT.MeasureItem, new Listener() {", "-\t\t\tswitch(event.type) {\t\t", "-\t\t\t\tcase SWT.MeasureItem: {", "-\t\t\t\t\tTableItem item = (TableItem)event.item;", "-\t\t\t\t\tString text = getText(item, event.index);", "-\t\t\t\t\tPoint size = event.gc.textExtent(text);", "-\t\t\t\t\tevent.width = size.x;", "-\t\t\t\t\tevent.height = Math.max(event.height, size.y);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase SWT.PaintItem: {", "-\t\t\t\t\tTableItem item = (TableItem)event.item;", "-\t\t\t\t\tString text = getText(item, event.index);", "-\t\t\t\t\tPoint size = event.gc.textExtent(text);\t\t\t\t\t", "-\t\t\t\t\tint offset2 = event.index == 0 ? Math.max(0, (event.height - size.y) / 2) : 0;", "-\t\t\t\t\tevent.gc.drawText(text, event.x, event.y + offset2, true);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase SWT.EraseItem: {\t", "-\t\t\t\t\tevent.detail &= ~SWT.FOREGROUND;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tTableItem item = (TableItem)event.item;", "+\t\t\tString text = item.getText(event.index);", "+\t\t\tPoint size = event.gc.textExtent(text);", "+\t\t\tevent.width = size.x + 2 * TEXT_MARGIN;", "+\t\t\tevent.height = Math.max(event.height, size.y + TEXT_MARGIN);", "-\t\tString getText(TableItem item, int column) {", "-\t\t\tString text = item.getText(column);", "-\t\t\tif (column != 0) {", "-\t\t\t\tint index = table.indexOf(item);", "-\t\t\t\tif ((index+column) % 3 == 1){", "-\t\t\t\t\ttext +=\"\\nnew line\";", "-\t\t\t\t}", "-\t\t\t\tif ((index+column) % 3 == 2) {", "-\t\t\t\t\ttext +=\"\\nnew line\\nnew line\";", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\treturn text;", "+\t});", "+\ttable.addListener(SWT.EraseItem, new Listener() {", "+\t\tpublic void handleEvent(Event event) {", "+\t\t\tevent.detail &= ~SWT.FOREGROUND;", "-\t};", "-\ttable.addListener(SWT.MeasureItem, paintListener);", "-\ttable.addListener(SWT.PaintItem, paintListener);", "-\ttable.addListener(SWT.EraseItem, paintListener);", "-\tfor (int i = 0; i < columnCount; i++) {", "+\t});", "+\ttable.addListener(SWT.PaintItem, new Listener() {", "+\t\tpublic void handleEvent(Event event) {", "+\t\t\tTableItem item = (TableItem)event.item;", "+\t\t\tString text = item.getText(event.index);", "+\t\t\t/* center column 1 vertically */", "+\t\t\tint yOffset = 0;", "+\t\t\tif (event.index == 1) {", "+\t\t\t\tPoint size = event.gc.textExtent(text);", "+\t\t\t\tyOffset = Math.max(0, (event.height - size.y) / 2);", "+\t\t\t}", "+\t\t\tevent.gc.drawText(text, event.x + TEXT_MARGIN, event.y + yOffset, true);", "+\t\t}", "+\t});", "+", "+\tfor (int i = 0; i < COLUMN_COUNT; i++) {", "+\ttable.pack();", "-\twhile(!shell.isDisposed()) {", "-\t\tif(!display.readAndDispatch()) display.sleep();", "+\twhile (!shell.isDisposed()) {", "+\t\tif (!display.readAndDispatch()) display.sleep();"]}], "num": 56458}
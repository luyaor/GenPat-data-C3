{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "38bf699f23d983d4cbb432f3be3448e9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6ba21e4cfa6aca90b5a9db3a701ea17", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ExpandItem.java", "commitBeforeChange": "a4c38a5499b7661171c9c6cec483dfebcf3bc42a", "commitAfterChange": "1ee514cc8d886c604d7d6e917a08ac85ceecbd64", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  private void drawChevron (int hDC, RECT rect)", "signatureAfterChange": "  private void drawChevron (int hDC, RECT rect)", "diff": ["-\t\tOS.MoveToEx (hDC, rect.left, rect.bottom, 0);", "-\t\tOS.LineTo (hDC, rect.left, rect.top);", "-\t\tOS.LineTo (hDC, rect.right, rect.top);", "+\t\tint [] points1 = {", "+\t\t\t\trect.left, rect.bottom,", "+\t\t\t\trect.left, rect.top,", "+\t\t\t\trect.right, rect.top};", "+\t\tOS.Polyline (hDC, points1, points1.length / 2);", "-\t\tOS.LineTo (hDC, rect.right, rect.bottom);", "-\t\tOS.LineTo (hDC, rect.left, rect.bottom);", "+\t\tint [] points2 = {", "+\t\t\t\trect.right, rect.top,", "+\t\t\t\trect.right, rect.bottom,", "+\t\t\t\trect.left, rect.bottom};", "+\t\tOS.Polyline (hDC, points2, points2.length / 2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eda1d82bcfc81b83ed594c360bc49c0f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ExpandItem.java", "commitBeforeChange": "a4c38a5499b7661171c9c6cec483dfebcf3bc42a", "commitAfterChange": "1ee514cc8d886c604d7d6e917a08ac85ceecbd64", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  void drawItem (GC gc, int hTheme, RECT clipRect, boolean drawFocus)", "signatureAfterChange": "  void drawItem (GC gc, int hTheme, RECT clipRect, boolean drawFocus)", "diff": ["-\t\t\tif (OS.SystemParametersInfo (OS.SPI_GETNONCLIENTMETRICS, 0, info, 0)) {", "-\t\t\t\tLOGFONT logFont = OS.IsUnicode ? (LOGFONT) ((NONCLIENTMETRICSW)info).lfCaptionFont : ((NONCLIENTMETRICSA)info).lfCaptionFont;", "-\t\t\t\thFont = OS.CreateFontIndirect (logFont);", "-\t\t\t\toldFont = OS.SelectObject (hDC, hFont);", "+\t\t\tif (!OS.IsWinCE) {", "+\t\t\t\tif (OS.SystemParametersInfo (OS.SPI_GETNONCLIENTMETRICS, 0, info, 0)) {", "+\t\t\t\t\tLOGFONT logFont = OS.IsUnicode ? (LOGFONT) ((NONCLIENTMETRICSW)info).lfCaptionFont : ((NONCLIENTMETRICSA)info).lfCaptionFont;", "+\t\t\t\t\thFont = OS.CreateFontIndirect (logFont);", "+\t\t\t\t\toldFont = OS.SelectObject (hDC, hFont);", "+\t\t\t\t}", "-\t\t\tOS.MoveToEx (hDC, x, y + headerHeight, 0);\t\t\t", "-\t\t\tOS.LineTo (hDC, x, y + headerHeight + height);", "-\t\t\tOS.LineTo (hDC, x + width - 1, y + headerHeight + height);", "-\t\t\tOS.LineTo (hDC, x + width - 1, y + headerHeight - 1);", "+\t\t\tint [] points = {", "+\t\t\t\t\tx, y + headerHeight, ", "+\t\t\t\t\tx, y + headerHeight + height, ", "+\t\t\t\t\tx + width - 1, y + headerHeight + height, ", "+\t\t\t\t\tx + width - 1, y + headerHeight - 1};", "+\t\t\tOS.Polyline (hDC, points, points.length / 2);"]}], "num": 24086}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ca3194794d92db8b6eb21135395fb826", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e16eeeb8a6e7b8c0fd2e163a493a4e9e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "1da7e46ba972577e1130737ac65587e286329111", "commitAfterChange": "9b5a11c3e5885ebf39634af29467f32493457d20", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 4, "signatureBeforeChange": "  int textCellDataProc (int tree_column, int cell, int tree_model, int iter, int data)", "signatureAfterChange": "  int cellDataProc (int tree_column, int cell, int tree_model, int iter, int data)", "diff": ["+", "+int /*long*/ cellDataProc (int /*long*/ tree_column, int /*long*/ cell, int /*long*/ tree_model, int /*long*/ iter, int /*long*/ data) {", "+\tif (cell == ignoreCell) return 0;", "+\tint /*long*/ path = OS.gtk_tree_model_get_path (tree_model, iter);", "+\tint [] buffer = new int [1];", "+\tOS.memmove (buffer, OS.gtk_tree_path_get_indices (path), 4);", "+\tint index = buffer [0];", "+\tTableItem item = _getItem (index);", "+\tOS.gtk_tree_path_free (path);", "+\tif (item != null) OS.g_object_set_qdata (cell, Display.SWT_OBJECT_INDEX2, item.handle);", "+\tboolean isPixbuf = OS.GTK_IS_CELL_RENDERER_PIXBUF (cell);", "+\tif (!(isPixbuf || OS.GTK_IS_CELL_RENDERER_TEXT (cell))) return 0;", "+\tint modelIndex = -1;", "+\tboolean customDraw = false;", "+\tif (columnCount == 0) {", "+\t\tmodelIndex = Table.FIRST_COLUMN;", "+\t\tcustomDraw = firstCustomDraw;", "+\t} else {", "+\t\tTableColumn column = (TableColumn) display.getWidget (tree_column);", "+\t\tif (column != null) {", "+\t\t\tmodelIndex = column.modelIndex;", "+\t\t\tcustomDraw = column.customDraw;", "+\t\t}", "+\t}", "+\tif (modelIndex == -1) return 0;", "+\tboolean setData = false;", "+\tif ((style & SWT.VIRTUAL) != 0) {", "+\t\t/*", "+\t\t* Feature in GTK.  On GTK before 2.4, fixed_height_mode is not", "+\t\t* supported, and the tree asks for the data of all items.  The", "+\t\t* fix is to only provide the data if the row is visible.", "+\t\t*/", "+\t\tif (OS.GTK_VERSION < OS.VERSION (2, 3, 2)) {", "+\t\t\tOS.gtk_widget_realize (handle);", "+\t\t\tGdkRectangle visible = new GdkRectangle ();", "+\t\t\tOS.gtk_tree_view_get_visible_rect (handle, visible);", "+\t\t\tGdkRectangle area = new GdkRectangle ();", "+\t\t\tpath = OS.gtk_tree_model_get_path (tree_model, iter);", "+\t\t\tOS.gtk_tree_view_get_cell_area (handle, path, tree_column, area);", "+\t\t\tOS.gtk_tree_path_free (path);", "+\t\t\tif (area.y + area.height < 0 || area.y + visible.y > visible.y + visible.height) {", "+\t\t\t\t/* Give an image from the image list to make sure the row has", "+\t\t\t\t* the correct height.", "+\t\t\t\t*/", "+\t\t\t\tif (imageList != null && imageList.pixbufs.length > 0) {", "+\t\t\t\t\tOS.g_object_set (cell, OS.pixbuf, imageList.pixbufs [0], 0);", "+\t\t\t\t}", "+\t\t\t\treturn 0;", "+\t\t\t}", "+\t\t}", "+\t\tif (!item.cached) {", "+\t\t\tlastIndexOf = index;", "+\t\t\tsetData = checkData (item);", "+\t\t}", "+\t}", "+\tif (setData) {", "+\t\tbuffer [0] = 0;", "+\t\tif (isPixbuf) {", "+\t\t\tOS.gtk_tree_model_get (tree_model, iter, modelIndex + CELL_PIXBUF, buffer, -1);", "+\t\t\tOS.g_object_set (cell, OS.pixbuf, buffer [0], 0);", "+\t\t} else {", "+\t\t\tOS.gtk_tree_model_get (tree_model, iter, modelIndex + CELL_TEXT, buffer, -1); ", "+\t\t\tif (buffer [0] != 0) {", "+\t\t\t\tOS.g_object_set (cell, OS.text, buffer [0], 0);", "+\t\t\t\tOS.g_free (buffer [0]);", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (customDraw) {", "+\t\t/*", "+\t\t* Bug on GTK. Gtk renders the background on top of the checkbox and pixbuf.", "+\t\t* This only happens in version 2.2.1 and earlier. The fix is not to set the background.   ", "+\t\t*/", "+\t\tif (OS.GTK_VERSION > OS.VERSION (2, 2, 1)) {", "+\t\t\tbuffer [0] = 0;", "+\t\t\tOS.gtk_tree_model_get (tree_model, iter, modelIndex + CELL_BACKGROUND, buffer, -1);", "+\t\t\tif (buffer [0] != 0) {", "+\t\t\t\tOS.g_object_set (cell, OS.cell_background_gdk, buffer [0], 0);", "+\t\t\t}", "+\t\t}", "+\t\tif (!isPixbuf) {", "+\t\t\tbuffer [0] = 0;", "+\t\t\tOS.gtk_tree_model_get (tree_model, iter, modelIndex + CELL_FOREGROUND, buffer, -1);", "+\t\t\tif (buffer [0] != 0) {", "+\t\t\t\tOS.g_object_set (cell, OS.foreground_gdk, buffer [0], 0);", "+\t\t\t}", "+\t\t\tbuffer [0] = 0;", "+\t\t\tOS.gtk_tree_model_get (tree_model, iter, modelIndex + CELL_FONT, buffer, -1);", "+\t\t\tif (buffer [0] != 0) {", "+\t\t\t\tOS.g_object_set (cell, OS.font_desc, buffer [0], 0);", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (setData) {", "+\t\tignoreCell = cell;", "+\t\tsetScrollWidth (tree_column, iter);", "+\t\tignoreCell = 0;", "+\t}", "+\treturn 0;", "-", "-int /*long*/ textCellDataProc (int /*long*/ tree_column, int /*long*/ cell, int /*long*/ tree_model, int /*long*/ iter, int /*long*/ data) {", "-\tif (cell == ignoreTextCell) return 0;", "-\tint modelIndex = -1;", "-\tboolean customDraw = false;", "-\tif (columnCount == 0) {", "-\t\tmodelIndex = Table.FIRST_COLUMN;", "-\t\tcustomDraw = firstCustomDraw;", "-\t} else {", "-\t\tfor (int i = 0; i < columns.length; i++) {", "-\t\t\tif (columns [i] != null && columns [i].handle == tree_column) {", "-\t\t\t\tmodelIndex = columns [i].modelIndex;", "-\t\t\t\tcustomDraw = columns [i].customDraw;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (modelIndex == -1) return 0;", "-\tboolean setData = false;", "-\tif ((style & SWT.VIRTUAL) != 0) {", "-\t\tint /*long*/ path = OS.gtk_tree_model_get_path (tree_model, iter);", "-\t\t/*", "-\t\t* Feature in GTK.  On GTK before 2.4, fixed_height_mode is not", "-\t\t* supported, and the tree asks for the data of all items.  The", "-\t\t* fix is to only provide the data if the row is visible.", "-\t\t*/", "-\t\tif (OS.GTK_VERSION < OS.VERSION (2, 3, 2)) {", "-\t\t\tOS.gtk_widget_realize (handle);", "-\t\t\tGdkRectangle visible = new GdkRectangle ();", "-\t\t\tOS.gtk_tree_view_get_visible_rect (handle, visible);", "-\t\t\tGdkRectangle area = new GdkRectangle ();", "-\t\t\tOS.gtk_tree_view_get_cell_area (handle, path, tree_column, area);", "-\t\t\tif (area.y + area.height < 0 || area.y + visible.y > visible.y + visible.height ) {", "-\t\t\t\tOS.gtk_tree_path_free (path);", "-\t\t\t\treturn 0;", "-\t\t\t}", "-\t\t}", "-\t\tint [] index = new int [1];", "-\t\tOS.memmove (index, OS.gtk_tree_path_get_indices (path), 4);", "-\t\tTableItem item = _getItem (index [0]);", "-\t\tif (!item.cached) {", "-\t\t\tlastIndexOf = index [0];", "-\t\t\tsetData = checkData (item);", "-\t\t}", "-\t\tOS.gtk_tree_path_free (path);", "-\t}", "-\tint /*long*/ [] ptr = new int /*long*/ [1];", "-\tif (setData) {", "-\t\tOS.gtk_tree_model_get (tree_model, iter, modelIndex + CELL_TEXT, ptr, -1); ", "-\t\tif (ptr [0] != 0) {", "-\t\t\tOS.g_object_set(cell, OS.text, ptr[0], 0);", "-\t\t\tOS.g_free (ptr[0]);", "-\t\t}", "-\t\tptr = new int /*long*/ [1];", "-\t}", "-\tif (customDraw) {", "-\t\tOS.gtk_tree_model_get (tree_model, iter, modelIndex + CELL_FOREGROUND, ptr, -1);", "-\t\tif (ptr [0] != 0) {", "-\t\t\tOS.g_object_set(cell, OS.foreground_gdk, ptr[0], 0);", "-\t\t}", "-\t\t/*", "-\t\t * Bug on GTK. Gtk renders the background of the text renderer on top of the pixbuf renderer.", "-\t\t * This only happens in version 2.2.1 and earlier. The fix is not to set the background.   ", "-\t\t */", "-\t\tif (OS.GTK_VERSION > OS.VERSION (2, 2, 1)) {", "-\t\t\tptr = new int /*long*/ [1];", "-\t\t\tOS.gtk_tree_model_get (tree_model, iter, modelIndex + CELL_BACKGROUND, ptr, -1);", "-\t\t\tif (ptr [0] != 0) {", "-\t\t\t\tOS.g_object_set(cell, OS.background_gdk, ptr[0], 0);", "-\t\t\t}", "-\t\t}", "-\t\tptr = new int /*long*/ [1];", "-\t\tOS.gtk_tree_model_get (tree_model, iter, modelIndex + CELL_FONT, ptr, -1);", "-\t\tif (ptr [0] != 0) {", "-\t\t\tOS.g_object_set(cell, OS.font_desc, ptr[0], 0);", "-\t\t}", "-\t}", "-\tif (setData) {", "-\t\tignoreTextCell = cell;", "-\t\tsetScrollWidth (tree_column, iter);", "-\t\tignoreTextCell = 0;", "-\t}", "-\treturn 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e0e783a98f58b9344e36c9d8e9a4258", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "1da7e46ba972577e1130737ac65587e286329111", "commitAfterChange": "9b5a11c3e5885ebf39634af29467f32493457d20", "methodNumberBeforeChange": 107, "methodNumberAfterChange": 6, "signatureBeforeChange": "  int textCellDataProc (int tree_column, int cell, int tree_model, int iter, int data)", "signatureAfterChange": "  int cellDataProc (int tree_column, int cell, int tree_model, int iter, int data)", "diff": ["+", "+int /*long*/ cellDataProc (int /*long*/ tree_column, int /*long*/ cell, int /*long*/ tree_model, int /*long*/ iter, int /*long*/ data) {", "+\tif (cell == ignoreCell) return 0;", "+\tTreeItem item = _getItem (iter);", "+\tif (item != null) OS.g_object_set_qdata (cell, Display.SWT_OBJECT_INDEX2, item.handle);", "+\tboolean isPixbuf = OS.GTK_IS_CELL_RENDERER_PIXBUF (cell);", "+\tif (!(isPixbuf || OS.GTK_IS_CELL_RENDERER_TEXT (cell))) return 0;", "+\tint modelIndex = -1;", "+\tboolean customDraw = false;", "+\tif (columnCount == 0) {", "+\t\tmodelIndex = Tree.FIRST_COLUMN;", "+\t\tcustomDraw = firstCustomDraw;", "+\t} else {", "+\t\tTreeColumn column = (TreeColumn) display.getWidget (tree_column);", "+\t\tif (column != null) {", "+\t\t\tmodelIndex = column.modelIndex;", "+\t\t\tcustomDraw = column.customDraw;", "+\t\t}", "+\t}", "+\tif (modelIndex == -1) return 0;", "+\tboolean setData = false;", "+\tif ((style & SWT.VIRTUAL) != 0) {", "+\t\t/*", "+\t\t* Feature in GTK.  On GTK before 2.4, fixed_height_mode is not", "+\t\t* supported, and the tree asks for the data of all items.  The", "+\t\t* fix is to only provide the data if the row is visible.", "+\t\t*/", "+\t\tif (OS.GTK_VERSION < OS.VERSION (2, 3, 2)) {", "+\t\t\tint /*long*/ path = OS.gtk_tree_model_get_path (tree_model, iter);", "+\t\t\tOS.gtk_widget_realize (handle);", "+\t\t\tGdkRectangle visible = new GdkRectangle ();", "+\t\t\tOS.gtk_tree_view_get_visible_rect (handle, visible);", "+\t\t\tGdkRectangle area = new GdkRectangle ();", "+\t\t\tOS.gtk_tree_view_get_cell_area (handle, path, tree_column, area);", "+\t\t\tOS.gtk_tree_path_free (path);\t\t\t", "+\t\t\tif (area.y + area.height < 0 || area.y + visible.y > visible.y + visible.height ) {", "+\t\t\t\treturn 0;", "+\t\t\t}", "+\t\t}", "+\t\tif (!item.cached) {", "+\t\t\t//lastIndexOf = index [0];", "+\t\t\tsetData = checkData (item);", "+\t\t}", "+\t}", "+\tint /*long*/ [] ptr = new int /*long*/ [1];", "+\tif (setData) {", "+\t\tif (isPixbuf) {", "+\t\t\tptr [0] = 0;", "+\t\t\tOS.gtk_tree_model_get (tree_model, iter, modelIndex + CELL_PIXBUF, ptr, -1);", "+\t\t\tOS.g_object_set (cell, OS.pixbuf, ptr[0], 0);", "+\t\t} else {", "+\t\t\tptr [0] = 0;", "+\t\t\tOS.gtk_tree_model_get (tree_model, iter, modelIndex + CELL_TEXT, ptr, -1); ", "+\t\t\tif (ptr [0] != 0) {", "+\t\t\t\tOS.g_object_set (cell, OS.text, ptr[0], 0);", "+\t\t\t\tOS.g_free (ptr[0]);", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (customDraw) {", "+\t\t/*", "+\t\t * Bug on GTK. Gtk renders the background on top of the checkbox and pixbuf.", "+\t\t * This only happens in version 2.2.1 and earlier. The fix is not to set the background.   ", "+\t\t */", "+\t\tif (OS.GTK_VERSION > OS.VERSION (2, 2, 1)) {", "+\t\t\tptr [0] = 0;", "+\t\t\tOS.gtk_tree_model_get (tree_model, iter, modelIndex + CELL_BACKGROUND, ptr, -1);", "+\t\t\tif (ptr [0] != 0) {", "+\t\t\t\tOS.g_object_set (cell, OS.cell_background_gdk, ptr[0], 0);", "+\t\t\t}", "+\t\t}", "+\t\tif (!isPixbuf) {", "+\t\t\tptr [0] = 0;", "+\t\t\tOS.gtk_tree_model_get (tree_model, iter, modelIndex + CELL_FOREGROUND, ptr, -1);", "+\t\t\tif (ptr [0] != 0) {", "+\t\t\t\tOS.g_object_set (cell, OS.foreground_gdk, ptr[0], 0);", "+\t\t\t}", "+\t\t\tptr [0] = 0;", "+\t\t\tOS.gtk_tree_model_get (tree_model, iter, modelIndex + CELL_FONT, ptr, -1);", "+\t\t\tif (ptr [0] != 0) {", "+\t\t\t\tOS.g_object_set (cell, OS.font_desc, ptr[0], 0);", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (setData) {", "+\t\tignoreCell = cell;", "+\t\tsetScrollWidth (tree_column, iter);", "+\t\tignoreCell = 0;", "+\t}", "+\treturn 0;", "-", "-int /*long*/ textCellDataProc (int /*long*/ tree_column, int /*long*/ cell, int /*long*/ tree_model, int /*long*/ iter, int /*long*/ data) {", "-\tif (cell == ignoreTextCell) return 0;", "-\tint modelIndex = -1;", "-\tboolean customDraw = false;", "-\tif (columnCount == 0) {", "-\t\tmodelIndex = Tree.FIRST_COLUMN;", "-\t\tcustomDraw = firstCustomDraw;", "-\t} else {", "-\t\tfor (int i = 0; i < columns.length; i++) {", "-\t\t\tif (columns [i] != null && columns [i].handle == tree_column) {", "-\t\t\t\tmodelIndex = columns [i].modelIndex;", "-\t\t\t\tcustomDraw = columns [i].customDraw;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (modelIndex == -1) return 0;", "-\tboolean setData = false;", "-\tif ((style & SWT.VIRTUAL) != 0) {", "-\t\t/*", "-\t\t* Feature in GTK.  On GTK before 2.4, fixed_height_mode is not", "-\t\t* supported, and the tree asks for the data of all items.  The", "-\t\t* fix is to only provide the data if the row is visible.", "-\t\t*/", "-\t\tif (OS.GTK_VERSION < OS.VERSION (2, 3, 2)) {", "-\t\t\tint /*long*/ path = OS.gtk_tree_model_get_path (tree_model, iter);", "-\t\t\tOS.gtk_widget_realize (handle);", "-\t\t\tGdkRectangle visible = new GdkRectangle ();", "-\t\t\tOS.gtk_tree_view_get_visible_rect (handle, visible);", "-\t\t\tGdkRectangle area = new GdkRectangle ();", "-\t\t\tOS.gtk_tree_view_get_cell_area (handle, path, tree_column, area);", "-\t\t\tOS.gtk_tree_path_free (path);\t\t\t", "-\t\t\tif (area.y + area.height < 0 || area.y + visible.y > visible.y + visible.height ) {", "-\t\t\t\treturn 0;", "-\t\t\t}", "-\t\t}", "-\t\tTreeItem item = _getItem (iter);", "-\t\tif (!item.cached) {", "-\t\t\t//lastIndexOf = index [0];", "-\t\t\tsetData = checkData (item);", "-\t\t}", "-\t}", "-\tint /*long*/ [] ptr = new int /*long*/ [1];", "-\tif (setData) {", "-\t\tOS.gtk_tree_model_get (tree_model, iter, modelIndex + CELL_TEXT, ptr, -1); ", "-\t\tif (ptr [0] != 0) {", "-\t\t\tOS.g_object_set(cell, OS.text, ptr[0], 0);", "-\t\t\tOS.g_free (ptr[0]);", "-\t\t}", "-\t\tptr = new int /*long*/ [1];", "-\t}", "-\tif (customDraw) {", "-\t\tOS.gtk_tree_model_get (tree_model, iter, modelIndex + CELL_FOREGROUND, ptr, -1);", "-\t\tif (ptr [0] != 0) {", "-\t\t\tOS.g_object_set(cell, OS.foreground_gdk, ptr[0], 0);", "-\t\t}", "-\t\t/*", "-\t\t * Bug on GTK. Gtk renders the background of the text renderer on top of the pixbuf renderer.", "-\t\t * This only happens in version 2.2.1 and earlier. The fix is not to set the background.   ", "-\t\t */", "-\t\tif (OS.GTK_VERSION > OS.VERSION (2, 2, 1)) {", "-\t\t\tptr = new int /*long*/ [1];", "-\t\t\tOS.gtk_tree_model_get (tree_model, iter, modelIndex + CELL_BACKGROUND, ptr, -1);", "-\t\t\tif (ptr [0] != 0) {", "-\t\t\t\tOS.g_object_set(cell, OS.background_gdk, ptr[0], 0);", "-\t\t\t}", "-\t\t}", "-\t\tptr = new int /*long*/ [1];", "-\t\tOS.gtk_tree_model_get (tree_model, iter, modelIndex + CELL_FONT, ptr, -1);", "-\t\tif (ptr [0] != 0) {", "-\t\t\tOS.g_object_set(cell, OS.font_desc, ptr[0], 0);", "-\t\t}", "-\t}", "-\tif (setData) {", "-\t\tignoreTextCell = cell;", "-\t\tsetScrollWidth (tree_column, iter);", "-\t\tignoreTextCell = 0;", "-\t}", "-\treturn 0;"]}], "num": 55413}
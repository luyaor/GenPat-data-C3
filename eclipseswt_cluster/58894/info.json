{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "df0117e6e383b0c9451ddbb7ae6af131", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6f8702e03affe3046cb85edfb4b2885f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "272967205f3824ec29456112026262c64ae69dfa", "commitAfterChange": "fc62fa389f9358a82d98c59fbeba910f7ca8c593", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 76, "signatureBeforeChange": "  LRESULT WM_IME_CHAR (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmIMEChar (int hwnd, int wParam, int lParam)", "diff": ["-", "-LRESULT WM_IME_CHAR (int wParam, int lParam) {", "-", "-\t/* Process a DBCS character */", "-\tDisplay display = this.display;", "-\tdisplay.lastKey = 0;", "-\tdisplay.lastAscii = wParam;", "-\tdisplay.lastVirtual = display.lastNull = display.lastDead = false;", "-\tif (!sendKeyEvent (SWT.KeyDown, OS.WM_IME_CHAR, wParam, lParam)) {", "-\t\treturn LRESULT.ZERO;", "-\t}", "-", "-\t/*", "-\t* Feature in Windows.  The Windows text widget uses", "-\t* two 2 WM_CHAR's to process a DBCS key instead of", "-\t* using WM_IME_CHAR.  The fix is to allow the text", "-\t* widget to get the WM_CHAR's but ignore sending", "-\t* them to the application.", "-\t*/", "-\tignoreCharacter = true;", "-\tint result = callWindowProc (OS.WM_IME_CHAR, wParam, lParam);", "-\tMSG msg = new MSG ();", "-\tint flags = OS.PM_REMOVE | OS.PM_NOYIELD | OS.PM_QS_INPUT | OS.PM_QS_POSTMESSAGE;", "-\twhile (OS.PeekMessage (msg, handle, OS.WM_CHAR, OS.WM_CHAR, flags)) {", "-\t\tOS.TranslateMessage (msg);", "-\t\tOS.DispatchMessage (msg);", "-\t}", "-\tignoreCharacter = false;", "-\t", "-\tsendKeyEvent (SWT.KeyUp, OS.WM_IME_CHAR, wParam, lParam);", "-\t// widget could be disposed at this point", "-\tdisplay.lastKey = display.lastAscii = 0;", "-\treturn new LRESULT (result);", "+LRESULT wmIMEChar (int hwnd, int wParam, int lParam) {", "+", "+\t/* Process a DBCS character */", "+\tDisplay display = this.display;", "+\tdisplay.lastKey = 0;", "+\tdisplay.lastAscii = wParam;", "+\tdisplay.lastVirtual = display.lastNull = display.lastDead = false;", "+\tif (!sendKeyEvent (SWT.KeyDown, OS.WM_IME_CHAR, wParam, lParam)) {", "+\t\treturn LRESULT.ZERO;", "+\t}", "+", "+\t/*", "+\t* Feature in Windows.  The Windows text widget uses", "+\t* two 2 WM_CHAR's to process a DBCS key instead of", "+\t* using WM_IME_CHAR.  The fix is to allow the text", "+\t* widget to get the WM_CHAR's but ignore sending", "+\t* them to the application.", "+\t*/", "+\tignoreCharacter = true;", "+\tint result = callWindowProc (hwnd, OS.WM_IME_CHAR, wParam, lParam);", "+\tMSG msg = new MSG ();", "+\tint flags = OS.PM_REMOVE | OS.PM_NOYIELD | OS.PM_QS_INPUT | OS.PM_QS_POSTMESSAGE;", "+\twhile (OS.PeekMessage (msg, hwnd, OS.WM_CHAR, OS.WM_CHAR, flags)) {", "+\t\tOS.TranslateMessage (msg);", "+\t\tOS.DispatchMessage (msg);", "+\t}", "+\tignoreCharacter = false;", "+\t", "+\tsendKeyEvent (SWT.KeyUp, OS.WM_IME_CHAR, wParam, lParam);", "+\t// widget could be disposed at this point", "+\tdisplay.lastKey = display.lastAscii = 0;", "+\treturn new LRESULT (result);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38af45897175fc8d491f7d458cf89820", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "f699db6750189f737837a9f6195bd87512c2c588", "commitAfterChange": "ece89cfb21571317fb6c86186d3424edb03c00a2", "methodNumberBeforeChange": 119, "methodNumberAfterChange": 120, "signatureBeforeChange": "  int windowProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int windowProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["-\t\tint hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "-\t\tif (hwnd == hwndHeader) {", "-\t\t\tswitch (msg) {", "-\t\t\t\t/* This code is intentionally commented */", "-//\t\t\t\tcase OS.WM_CONTEXTMENU: {", "-//\t\t\t\t\tLRESULT result = wmContextMenu (hwnd, wParam, lParam);", "-//\t\t\t\t\tif (result != null) return result.value;", "-//\t\t\t\t\tbreak;", "-//\t\t\t\t}", "-\t\t\t\tcase OS.WM_CAPTURECHANGED: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug in Windows.  When the capture changes during a", "-\t\t\t\t\t* header drag, Windows does not redraw the header item", "-\t\t\t\t\t* such that the header remains pressed.  For example,", "-\t\t\t\t\t* when focus is assigned to a push button, the mouse is", "-\t\t\t\t\t* pressed (but not released), then the SPACE key is", "-\t\t\t\t\t* pressed to activate the button, the capture changes,", "-\t\t\t\t\t* the header not notified and NM_RELEASEDCAPTURE is not", "-\t\t\t\t\t* sent.  The fix is to redraw the header when the capture", "-\t\t\t\t\t* changes to another control.", "-\t\t\t\t\t* ", "-\t\t\t\t\t* This does not happen on XP.", "-\t\t\t\t\t*/", "-\t\t\t\t\tif (OS.COMCTL32_MAJOR < 6) {", "-\t\t\t\t\t\tif (lParam != 0 && lParam != hwndHeader) {", "-\t\t\t\t\t\t\tOS.InvalidateRect (hwndHeader, null, true);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase OS.WM_MOUSELEAVE: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug in Windows.  On XP, when a tooltip is hidden", "-\t\t\t\t\t* due to a time out or mouse press, the tooltip", "-\t\t\t\t\t* remains active although no longer visible and", "-\t\t\t\t\t* won't show again until another tooltip becomes", "-\t\t\t\t\t* active.  The fix is to reset the tooltip bounds.", "-\t\t\t\t\t*/", "-\t\t\t\t\tif (OS.COMCTL32_MAJOR >= 6) updateHeaderToolTips ();", "-\t\t\t\t\tupdateHeaderToolTips ();", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase OS.WM_NOTIFY: {", "-\t\t\t\t\tNMHDR hdr = new NMHDR ();", "-\t\t\t\t\tOS.MoveMemory (hdr, lParam, NMHDR.sizeof);", "-\t\t\t\t\tswitch (hdr.code) {", "-\t\t\t\t\t\tcase OS.TTN_SHOW:", "-\t\t\t\t\t\tcase OS.TTN_POP: ", "-\t\t\t\t\t\tcase OS.TTN_GETDISPINFOA:", "-\t\t\t\t\t\tcase OS.TTN_GETDISPINFOW:", "-\t\t\t\t\t\t\treturn OS.SendMessage (handle, msg, wParam, lParam);", "+\t\tswitch (msg) {", "+\t\t\t/* This code is intentionally commented */", "+//\t\t\tcase OS.WM_CONTEXTMENU: {", "+//\t\t\t\tLRESULT result = wmContextMenu (hwnd, wParam, lParam);", "+//\t\t\t\tif (result != null) return result.value;", "+//\t\t\t\tbreak;", "+//\t\t\t}", "+\t\t\tcase OS.WM_CAPTURECHANGED: {", "+\t\t\t\t/*", "+\t\t\t\t* Bug in Windows.  When the capture changes during a", "+\t\t\t\t* header drag, Windows does not redraw the header item", "+\t\t\t\t* such that the header remains pressed.  For example,", "+\t\t\t\t* when focus is assigned to a push button, the mouse is", "+\t\t\t\t* pressed (but not released), then the SPACE key is", "+\t\t\t\t* pressed to activate the button, the capture changes,", "+\t\t\t\t* the header not notified and NM_RELEASEDCAPTURE is not", "+\t\t\t\t* sent.  The fix is to redraw the header when the capture", "+\t\t\t\t* changes to another control.", "+\t\t\t\t* ", "+\t\t\t\t* This does not happen on XP.", "+\t\t\t\t*/", "+\t\t\t\tif (OS.COMCTL32_MAJOR < 6) {", "+\t\t\t\t\tif (lParam != 0) {", "+\t\t\t\t\t\tint hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "+\t\t\t\t\t\tif (lParam != hwndHeader) OS.InvalidateRect (hwndHeader, null, true);", "+\t\t\t\tbreak;", "-\t\t\treturn callWindowProc (hwnd, msg, wParam, lParam);", "+\t\t\tcase OS.WM_MOUSELEAVE: {", "+\t\t\t\t/*", "+\t\t\t\t* Bug in Windows.  On XP, when a tooltip is hidden", "+\t\t\t\t* due to a time out or mouse press, the tooltip", "+\t\t\t\t* remains active although no longer visible and", "+\t\t\t\t* won't show again until another tooltip becomes", "+\t\t\t\t* active.  The fix is to reset the tooltip bounds.", "+\t\t\t\t*/", "+\t\t\t\tif (OS.COMCTL32_MAJOR >= 6) updateHeaderToolTips ();", "+\t\t\t\tupdateHeaderToolTips ();", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.WM_NOTIFY: {", "+\t\t\t\tNMHDR hdr = new NMHDR ();", "+\t\t\t\tOS.MoveMemory (hdr, lParam, NMHDR.sizeof);", "+\t\t\t\tswitch (hdr.code) {", "+\t\t\t\t\tcase OS.TTN_SHOW:", "+\t\t\t\t\tcase OS.TTN_POP: ", "+\t\t\t\t\tcase OS.TTN_GETDISPINFOA:", "+\t\t\t\t\tcase OS.TTN_GETDISPINFOW:", "+\t\t\t\t\t\treturn OS.SendMessage (handle, msg, wParam, lParam);", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\treturn callWindowProc (hwnd, msg, wParam, lParam);"]}], "num": 58894}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34e28ef9f764d7921b6f5f5233530ad4", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9389073740f47c2e0a0d7bf2e901577c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java", "commitBeforeChange": "14847fc50ac21dbfae0a2bd75c455ca661cd2bd0", "commitAfterChange": "db1f6bc7e04f75d6fd9d429b8b4d02d4787e43d9", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  public void test_scaledToII()", "signatureAfterChange": "  public void test_scaledToII()", "diff": ["-\twarnUnimpl(\"Test test_scaledToII not written\");", "+\tfinal int imageDimension = 8;", "+\tRGB[] rgbs = new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)};", "+\tbyte[] pixelData = new byte[(imageDimension*imageDimension) / 8];", "+\t", "+\tpixelData[0] = 0x4F;", "+\timageData = new ImageData(imageDimension, imageDimension, 1, new PaletteData(rgbs), 1, pixelData);", "+", "+\tImageData scaledImageData = imageData.scaledTo(-imageDimension, -imageDimension);", "+\tbyte[] scaledPixelData = new byte[imageDimension];", "+\tscaledImageData.getPixels(0, imageDimension - 1, scaledPixelData.length, scaledPixelData, 0);\t", "+\tbyte[] expectedPixelData = new byte[] {0x1, 0x1, 0x1, 0x1, 0, 0, 0x1, 0};", "+\tassertEquals(\":a:\", expectedPixelData, scaledPixelData);", "+", "+\tscaledImageData = imageData.scaledTo(imageDimension * 10, imageDimension);", "+\tscaledPixelData = new byte[imageDimension * 10];", "+\tscaledImageData.getPixels(0, 0, scaledPixelData.length, scaledPixelData, 0);\t", "+\tassertEquals(\":b:\", 0, scaledPixelData[0]);", "+\tassertEquals(\":c:\", 0, scaledPixelData[1]);", "+", "+\tscaledImageData = imageData.scaledTo(imageDimension, imageDimension * 10);", "+\tscaledPixelData = new byte[imageDimension];", "+\tscaledImageData.getPixels(0, 0, scaledPixelData.length, scaledPixelData, 0);\t", "+\texpectedPixelData = new byte[] {0, 0x1, 0, 0, 0x1, 0x1, 0x1, 0x1};", "+\tassertEquals(\":d:\", expectedPixelData, scaledPixelData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8af9e7afb4c37dd06b329ab994e4153b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java", "commitBeforeChange": "c8c3b0d56ac96eed1deeae3cbebb069fecdd4ef9", "commitAfterChange": "db54bb9c515ce97cb7d05101b9fa91b631d7bee5", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public void test_clone()", "signatureAfterChange": "  public void test_clone()", "diff": ["-\twarnUnimpl(\"Test test_clone not written\");", "+\tInputStream stream = null;", "+\ttry {", "+\t\tstream = SwtTestCase.class.getResourceAsStream(SwtTestCase.imageFilenames[0] + \".\" + SwtTestCase.imageFormats[0]);", "+\t\tImageLoader loader = new ImageLoader();", "+\t\tImageData data1 = loader.load(stream)[0];", "+\t\tImageData data2 = (ImageData) data1.clone();", "+\t\t// imageData does not implement an equals(Object) method", "+\t\tassertEquals(\":a:\", data1.alpha, data2.alpha);", "+\t\tassertEquals(\":b:\", data1.alphaData, data2.alphaData);", "+\t\tassertEquals(\":c:\", data1.bytesPerLine, data2.bytesPerLine);", "+\t\tassertEquals(\":d:\", data1.data, data2.data);", "+\t\tassertEquals(\":e:\", data1.delayTime, data2.delayTime);", "+\t\tassertEquals(\":f:\", data1.depth, data2.depth);", "+\t\tassertEquals(\":g:\", data1.disposalMethod, data2.disposalMethod);", "+\t\tassertEquals(\":h:\", data1.height, data2.height);", "+\t\tassertEquals(\":i:\", data1.maskData, data2.maskData);", "+\t\tassertEquals(\":j:\", data1.maskPad, data2.maskPad);", "+\t\tassertEquals(\":k:\", data1.palette, data2.palette);", "+\t\tassertEquals(\":l:\", data1.scanlinePad, data2.scanlinePad);", "+\t\tassertEquals(\":m:\", data1.transparentPixel, data2.transparentPixel);", "+\t\tassertEquals(\":n:\", data1.type, data2.type);", "+\t\tassertEquals(\":o:\", data1.width, data2.width);", "+\t\tassertEquals(\":p:\", data1.x, data2.x);", "+\t\tassertEquals(\":q:\", data1.y, data2.y);", "+\t} finally {", "+\t\ttry {", "+\t\t\tstream.close();", "+\t\t} catch (Exception e) {", "+\t\t}", "+\t}"]}], "num": 37014}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f7bf7128d9d5ffc0f3052bd395e6f754", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5868914f7a970185e97c4093b38a7ec", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tNSSize size = handle.size();", "+\t\tint width = (int)size.width;", "+\t\tint height = (int)size.height;", "+\t\tNSBitmapImageRep imageRep = this.imageRep;", "+\t\tint /*long*/ bpr = imageRep.bytesPerRow();", "+\t\tint /*long*/ bpp = imageRep.bitsPerPixel();", "+\t\tint /*long*/ dataSize = height * bpr;", "+\t\tbyte[] srcData = new byte[(int)/*64*/dataSize];", "+\t\tOS.memmove(srcData, imageRep.bitmapData(), dataSize);", "-\tNSSize size = handle.size();", "-\tint width = (int)size.width;", "-\tint height = (int)size.height;", "-\tNSBitmapImageRep imageRep = this.imageRep;", "-\tint /*long*/ bpr = imageRep.bytesPerRow();", "-\tint /*long*/ bpp = imageRep.bitsPerPixel();", "-\tint /*long*/ dataSize = height * bpr;", "-\tbyte[] srcData = new byte[(int)/*64*/dataSize];", "-\tOS.memmove(srcData, imageRep.bitmapData(), dataSize);", "-\t", "-\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "-\tImageData data = new ImageData(width, height, (int)/*64*/bpp, palette, 4, srcData);", "-\tdata.bytesPerLine = (int)/*64*/bpr;", "+\t\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "+\t\tImageData data = new ImageData(width, height, (int)/*64*/bpp, palette, 4, srcData);", "+\t\tdata.bytesPerLine = (int)/*64*/bpr;", "-\tdata.transparentPixel = transparentPixel;", "-\tif (transparentPixel == -1 && type == SWT.ICON) {", "-\t\t/* Get the icon mask data */", "-\t\tint maskPad = 2;", "-\t\tint maskBpl = (((width + 7) / 8) + (maskPad - 1)) / maskPad * maskPad;", "-\t\tbyte[] maskData = new byte[height * maskBpl];", "-\t\tint offset = 0, maskOffset = 0;", "-\t\tfor (int y = 0; y<height; y++) {", "-\t\t\tfor (int x = 0; x<width; x++) {", "-\t\t\t\tif (srcData[offset] != 0) {", "-\t\t\t\t\tmaskData[maskOffset + (x >> 3)] |= (1 << (7 - (x & 0x7)));", "-\t\t\t\t} else {", "-\t\t\t\t\tmaskData[maskOffset + (x >> 3)] &= ~(1 << (7 - (x & 0x7)));", "+\t\tdata.transparentPixel = transparentPixel;", "+\t\tif (transparentPixel == -1 && type == SWT.ICON) {", "+\t\t\t/* Get the icon mask data */", "+\t\t\tint maskPad = 2;", "+\t\t\tint maskBpl = (((width + 7) / 8) + (maskPad - 1)) / maskPad * maskPad;", "+\t\t\tbyte[] maskData = new byte[height * maskBpl];", "+\t\t\tint offset = 0, maskOffset = 0;", "+\t\t\tfor (int y = 0; y<height; y++) {", "+\t\t\t\tfor (int x = 0; x<width; x++) {", "+\t\t\t\t\tif (srcData[offset] != 0) {", "+\t\t\t\t\t\tmaskData[maskOffset + (x >> 3)] |= (1 << (7 - (x & 0x7)));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tmaskData[maskOffset + (x >> 3)] &= ~(1 << (7 - (x & 0x7)));", "+\t\t\t\t\t}", "+\t\t\t\t\toffset += 4;", "-\t\t\t\toffset += 4;", "+\t\t\t\tmaskOffset += maskBpl;", "-\t\t\tmaskOffset += maskBpl;", "+\t\t\tdata.maskData = maskData;", "+\t\t\tdata.maskPad = maskPad;", "-\t\tdata.maskData = maskData;", "-\t\tdata.maskPad = maskPad;", "+\t\tfor (int i = 0; i < srcData.length; i+= 4) {", "+\t\t\tsrcData[i] = 0;", "+\t\t}", "+\t\tdata.alpha = alpha;", "+\t\tif (alpha == -1 && alphaData != null) {", "+\t\t\tdata.alphaData = new byte[alphaData.length];", "+\t\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);", "+\t\t}", "+\t\treturn data;", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "-\tfor (int i = 0; i < srcData.length; i+= 4) {", "-\t\tsrcData[i] = 0;", "-\t}", "-\tdata.alpha = alpha;", "-\tif (alpha == -1 && alphaData != null) {", "-\t\tdata.alphaData = new byte[alphaData.length];", "-\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);", "-\t}", "-\treturn data;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd64fa5165e85c4dee288b785c8e7d92", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Cursor.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public Cursor(Device device, int style)", "signatureAfterChange": " public Cursor(Device device, int style)", "diff": ["-\tswitch (style) {", "-\t\tcase SWT.CURSOR_HAND: \t\t\thandle = NSCursor.pointingHandCursor(); break;", "-\t\tcase SWT.CURSOR_ARROW: \t\t\thandle = NSCursor.arrowCursor(); break;", "-\t\tcase SWT.CURSOR_WAIT: \t\t\thandle = NSCursor.arrowCursor(); break;", "-\t\tcase SWT.CURSOR_CROSS:\t \t\thandle = NSCursor.crosshairCursor(); break;", "-\t\tcase SWT.CURSOR_APPSTARTING: \thandle = NSCursor.arrowCursor(); break;", "-\t\tcase SWT.CURSOR_HELP: \t\t\thandle = NSCursor.crosshairCursor(); break;", "-\t\tcase SWT.CURSOR_SIZEALL: \t\thandle = NSCursor.crosshairCursor(); break;", "-\t\tcase SWT.CURSOR_SIZENESW: \t\thandle = NSCursor.crosshairCursor(); break;", "-\t\tcase SWT.CURSOR_SIZENS:\t\t\thandle = NSCursor.resizeUpDownCursor(); break;", "-\t\tcase SWT.CURSOR_SIZENWSE: \t\thandle = NSCursor.crosshairCursor(); break;", "-\t\tcase SWT.CURSOR_SIZEWE: \t\thandle = NSCursor.resizeLeftRightCursor(); break;", "-\t\tcase SWT.CURSOR_SIZEN: \t\t\thandle = NSCursor.resizeUpCursor(); break;", "-\t\tcase SWT.CURSOR_SIZES: \t\t\thandle = NSCursor.resizeDownCursor(); break;", "-\t\tcase SWT.CURSOR_SIZEE: \t\t\thandle = NSCursor.resizeRightCursor(); break;", "-\t\tcase SWT.CURSOR_SIZEW: \t\t\thandle = NSCursor.resizeLeftCursor(); break;", "-\t\tcase SWT.CURSOR_SIZENE: \t\thandle = NSCursor.crosshairCursor(); break;", "-\t\tcase SWT.CURSOR_SIZESE: \t\thandle = NSCursor.crosshairCursor(); break;", "-\t\tcase SWT.CURSOR_SIZESW: \t\thandle = NSCursor.crosshairCursor(); break;", "-\t\tcase SWT.CURSOR_SIZENW: \t\thandle = NSCursor.crosshairCursor(); break;", "-\t\tcase SWT.CURSOR_UPARROW: \t\thandle = NSCursor.crosshairCursor(); break;", "-\t\tcase SWT.CURSOR_IBEAM: \t\t\thandle = NSCursor.IBeamCursor(); break;", "-\t\tcase SWT.CURSOR_NO: \t\t\thandle = NSCursor.crosshairCursor(); break;", "-\t\tdefault:", "-\t\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tswitch (style) {", "+\t\t\tcase SWT.CURSOR_HAND: \t\t\thandle = NSCursor.pointingHandCursor(); break;", "+\t\t\tcase SWT.CURSOR_ARROW: \t\t\thandle = NSCursor.arrowCursor(); break;", "+\t\t\tcase SWT.CURSOR_WAIT: \t\t\thandle = NSCursor.arrowCursor(); break;", "+\t\t\tcase SWT.CURSOR_CROSS:\t \t\thandle = NSCursor.crosshairCursor(); break;", "+\t\t\tcase SWT.CURSOR_APPSTARTING: \thandle = NSCursor.arrowCursor(); break;", "+\t\t\tcase SWT.CURSOR_HELP: \t\t\thandle = NSCursor.crosshairCursor(); break;", "+\t\t\tcase SWT.CURSOR_SIZEALL: \t\thandle = NSCursor.crosshairCursor(); break;", "+\t\t\tcase SWT.CURSOR_SIZENESW: \t\thandle = NSCursor.crosshairCursor(); break;", "+\t\t\tcase SWT.CURSOR_SIZENS:\t\t\thandle = NSCursor.resizeUpDownCursor(); break;", "+\t\t\tcase SWT.CURSOR_SIZENWSE: \t\thandle = NSCursor.crosshairCursor(); break;", "+\t\t\tcase SWT.CURSOR_SIZEWE: \t\thandle = NSCursor.resizeLeftRightCursor(); break;", "+\t\t\tcase SWT.CURSOR_SIZEN: \t\t\thandle = NSCursor.resizeUpCursor(); break;", "+\t\t\tcase SWT.CURSOR_SIZES: \t\t\thandle = NSCursor.resizeDownCursor(); break;", "+\t\t\tcase SWT.CURSOR_SIZEE: \t\t\thandle = NSCursor.resizeRightCursor(); break;", "+\t\t\tcase SWT.CURSOR_SIZEW: \t\t\thandle = NSCursor.resizeLeftCursor(); break;", "+\t\t\tcase SWT.CURSOR_SIZENE: \t\thandle = NSCursor.crosshairCursor(); break;", "+\t\t\tcase SWT.CURSOR_SIZESE: \t\thandle = NSCursor.crosshairCursor(); break;", "+\t\t\tcase SWT.CURSOR_SIZESW: \t\thandle = NSCursor.crosshairCursor(); break;", "+\t\t\tcase SWT.CURSOR_SIZENW: \t\thandle = NSCursor.crosshairCursor(); break;", "+\t\t\tcase SWT.CURSOR_UPARROW: \t\thandle = NSCursor.crosshairCursor(); break;", "+\t\t\tcase SWT.CURSOR_IBEAM: \t\t\thandle = NSCursor.IBeamCursor(); break;", "+\t\t\tcase SWT.CURSOR_NO: \t\t\thandle = NSCursor.crosshairCursor(); break;", "+\t\t\tdefault:", "+\t\t\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\t}", "+\t\thandle.retain();", "+\t\thandle.setOnMouseEntered(true);", "+\t\tinit();", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "-\thandle.retain();", "-\thandle.setOnMouseEntered(true);", "-\tinit();"]}], "num": 8397}
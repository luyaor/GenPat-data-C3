{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c65177d4069141ff4f6bd98a146eb117", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "122d423f4199baae1f490c47f5d441c2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Scrollable.java", "commitBeforeChange": "efad7558c82430b2a9689c82c8085bb2cfef6063", "commitAfterChange": "ad7faf2331d33c7f68735fad69a11baef3deb362", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r \r LRESULT WM_MOUSEWHEEL (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_MOUSEWHEEL (int wParam, int lParam)", "diff": ["+\t\tboolean vertical = verticalBar != null && verticalBar.getEnabled ();\r", "+\t\tboolean horizontal = horizontalBar != null && horizontalBar.getEnabled ();\r", "+\t\tint msg = (vertical) ? OS.WM_VSCROLL : (horizontal) ? OS.WM_HSCROLL : 0;\r", "+\t\tif (msg == 0) return result;\r", "+\t\tint [] value = new int [1];\r", "+\t\tOS.SystemParametersInfo (OS.SPI_GETWHEELSCROLLLINES, 0, value, 0);\r", "-\t\tint code = delta < 0 ? OS.SB_LINEDOWN : OS.SB_LINEUP;\r", "-\t\tdelta = Math.abs (delta);\r", "-\t\tif (delta < OS.WHEEL_DELTA) return result;\r", "-\t\tif (verticalBar != null) {\r", "-\t\t\tint [] value = new int [1];\r", "-   \t\t\tOS.SystemParametersInfo (OS.SPI_GETWHEELSCROLLLINES, 0, value, 0);\r", "-\t\t\tint count = value [0] * delta / OS.WHEEL_DELTA;\r", "-\t\t\tfor (int i=0; i<count; i++) {\r", "-\t\t\t\tOS.SendMessage (handle, OS.WM_VSCROLL, code, 0);\r", "-\t\t\t}\r", "-\t\t\treturn LRESULT.ZERO;\r", "+\t\tint code = 0, count = 0;\r", "+  \t\tif (value [0] == OS.WHEEL_PAGESCROLL) {\t\r", "+   \t\t\tcode = delta < 0 ? OS.SB_PAGEDOWN : OS.SB_PAGEUP;\r", "+   \t\t\tcount = 1;\r", "+  \t\t} else {\r", "+  \t\t\tcode = delta < 0 ? OS.SB_LINEDOWN : OS.SB_LINEUP;\r", "+  \t\t\tdelta = Math.abs (delta);\r", "+  \t\t\tif (delta < OS.WHEEL_DELTA) return result;\r", "+  \t\t\tif (msg == OS.WM_VSCROLL) {\r", "+  \t\t\t\tcount = value [0] * delta / OS.WHEEL_DELTA;\r", "+  \t\t\t} else {\r", "+  \t\t\t\tcount = delta / OS.WHEEL_DELTA;\r", "+  \t\t\t}\r", "+  \t\t}\r", "+\t\tfor (int i=0; i<count; i++) {\r", "+\t\t\tOS.SendMessage (handle, msg, code, 0);\r", "-\t\tif (horizontalBar != null) {\r", "-\t\t\tint count = delta / OS.WHEEL_DELTA;\r", "-\t\t\tfor (int i=0; i<count; i++) {\r", "-\t\t\t\tOS.SendMessage (handle, OS.WM_HSCROLL, code, 0);\r", "-\t\t\t}\r", "-\t\t\treturn LRESULT.ZERO;\r", "-\t\t}\r", "-\t\treturn result;\r", "+\t\treturn LRESULT.ZERO;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e3770ea46ea8d6e2d8cfafe88477b02", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Scrollable.java", "commitBeforeChange": "9fe476af057cb3b5201c454aa9ae7e069447d62b", "commitAfterChange": "d68255164459d996ac06cd65f80082bd55901ef5", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  LRESULT WM_MOUSEWHEEL (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_MOUSEWHEEL (int wParam, int lParam)", "diff": ["-\t", "-\t\tint msg = (vertical) ? OS.WM_VSCROLL : (horizontal) ? OS.WM_HSCROLL : 0;", "+\t\tint msg = vertical ? OS.WM_VSCROLL : horizontal ? OS.WM_HSCROLL : 0;", "-\t\tint code = 0;", "-  \t\tif (linesToScroll [0] == OS.WHEEL_PAGESCROLL) {\t", "-   \t\t\tcode = delta < 0 ? OS.SB_PAGEDOWN : OS.SB_PAGEUP;", "-  \t\t} else {", "-  \t\t\tcode = delta < 0 ? OS.SB_LINEDOWN : OS.SB_LINEUP;", "-  \t\t\tif (msg == OS.WM_VSCROLL) {", "-  \t\t\t\tdelta *= linesToScroll [0];", "-  \t\t\t}", "-  \t\t}", "-  \t\t/* Check if the delta and the remainder have the same direction (sign) */", "-  \t\tif ((delta ^ scrollRemainder) >= 0) delta += scrollRemainder;", "-\t\tint count = Math.abs (delta) / OS.WHEEL_DELTA;", "-\t\tfor (int i=0; i<count; i++) {", "-\t\t\tOS.SendMessage (handle, msg, code, 0);", "+\t\tboolean pageScroll = linesToScroll [0] == OS.WHEEL_PAGESCROLL;", "+\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\tScrollBar bar = vertical ? verticalBar : horizontalBar;", "+\t\t\tSCROLLINFO info = new SCROLLINFO ();", "+\t\t\tinfo.cbSize = SCROLLINFO.sizeof;", "+\t\t\tinfo.fMask = OS.SIF_POS;", "+\t\t\tOS.GetScrollInfo (handle, bar.scrollBarType (), info);", "+\t\t\tif (vertical && !pageScroll) delta *= linesToScroll [0];", "+\t\t\tint increment = pageScroll ? bar.getPageIncrement () : bar.getIncrement ();", "+\t\t\tinfo.nPos -=  increment * delta / OS.WHEEL_DELTA;", "+\t\t\tOS.SetScrollInfo (handle, bar.scrollBarType (), info, true);", "+\t\t\tOS.SendMessage (handle, msg, OS.SB_THUMBPOSITION, 0);", "+\t\t} else {", "+\t\t\tint code = 0;", "+\t  \t\tif (pageScroll) {", "+\t   \t\t\tcode = delta < 0 ? OS.SB_PAGEDOWN : OS.SB_PAGEUP;", "+\t  \t\t} else {", "+\t  \t\t\tcode = delta < 0 ? OS.SB_LINEDOWN : OS.SB_LINEUP;", "+\t  \t\t\tif (msg == OS.WM_VSCROLL) delta *= linesToScroll [0];", "+\t  \t\t}", "+\t  \t\t/* Check if the delta and the remainder have the same direction (sign) */", "+\t  \t\tif ((delta ^ scrollRemainder) >= 0) delta += scrollRemainder;", "+\t\t\tint count = Math.abs (delta) / OS.WHEEL_DELTA;", "+\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\tOS.SendMessage (handle, msg, code, 0);", "+\t\t\t}"]}], "num": 12181}
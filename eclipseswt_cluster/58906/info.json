{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f92fd0888810348d7961e7908cdd2b18", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "876cdb27f363c0c2e3024983a882bd43", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/TableDragUnderEffect.java", "commitBeforeChange": "78f0c776d53220a44bdf02b852c9a928a5d226ab", "commitAfterChange": "c032f21c78e17ec55f9e5b212dab97d2ca79c2ad", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 5, "signatureBeforeChange": " void show(int effect, int x, int y)", "signatureAfterChange": " void show(int effect, int x, int y)", "diff": ["-void show(int effect, int x, int y) {", "-\tTableItem item = findItem(x, y);", "-\tif (item == null) effect = DND.FEEDBACK_NONE;", "-\tif (currentEffect == DND.FEEDBACK_NONE && effect != DND.FEEDBACK_NONE) {", "-\t\ttable.addPaintListener(paintListener);", "-\t}", "-\tscrollHover(effect, item, x, y);", "-\tsetDragUnderEffect(effect, item);", "-\tif (currentEffect != DND.FEEDBACK_NONE && effect == DND.FEEDBACK_NONE) {", "-\t\ttable.removePaintListener(paintListener);", "-\t}", "-\tcurrentEffect = effect;", "-}", "+void show(int effect, int x, int y) {", "+\teffect = checkEffect(effect);", "+\tTableItem item = (TableItem)getItem(x,y);", "+\t", "+\t} else {", "+\t\tif (item != null && item.equals(scrollItem)  && scrollBeginTime != 0) {", "+\t\t\tif (System.currentTimeMillis() >= scrollBeginTime) {", "+\t\t\t\tRectangle area = table.getClientArea();", "+\t\t\t\tint headerHeight = table.getHeaderHeight();", "+\t\t\t\tint itemHeight= table.getItemHeight();", "+\t\t\t\tPoint pt = new Point(x, y);", "+\t\t\t\tpt = table.getDisplay().map(null, table, pt);", "+\t\t\t\tTableItem nextItem = null;", "+\t\t\t\tif (pt.y < area.y + headerHeight + 2 * itemHeight) {", "+\t\t\t\t\tint index = Math.max(0, table.indexOf(item)-1);", "+\t\t\t\t\tnextItem = table.getItem(index);", "+\t\t\t\t}", "+\t\t\t\tif (pt.y > area.y + area.height - 2 * itemHeight) {", "+\t\t\t\t\tint index = Math.min(table.getItemCount()-1, table.indexOf(item)+1);", "+\t\t\t\t\tnextItem = table.getItem(index);", "+\t\t\t\t}", "+\t\t\t\tif (nextItem != null) table.showItem(nextItem);", "+\t\t\t\tscrollBeginTime = 0;", "+\t\t\t\tscrollItem = null;", "+\t\t\t}", "+\t\t} else {", "+\t\t\tscrollBeginTime = System.currentTimeMillis() + SCROLL_HYSTERESIS;", "+\t\t\tscrollItem = item;", "+\t", "+\tif ((effect & DND.FEEDBACK_SELECT) != 0) {", "+\t\tif (currentItem != item || (currentEffect & DND.FEEDBACK_SELECT) == 0) { ", "+\t\t\tsetDropSelection(item); ", "+\t\t\tcurrentEffect = effect;", "+\t\t\tcurrentItem = item;", "+\t\t}", "+\t} else {", "+\t\tsetDropSelection(null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec63b8b05ed998d14cd249ae46dc540c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/TableDragUnderEffect.java", "commitBeforeChange": "0fa4f4d51f725c1c5ce94f9bc00d7470177eb097", "commitAfterChange": "beecd7a2552d57d125d8ad15805be74945ef3111", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 5, "signatureBeforeChange": " void show(int effect, int x, int y)", "signatureAfterChange": " void show(int effect, int x, int y)", "diff": ["-void show(int effect, int x, int y) {", "-\tTableItem item = null;", "-\tif (effect != DND.FEEDBACK_NONE) item = findItem(x, y);", "-\tif (item == null) effect = DND.FEEDBACK_NONE;", "-\tif (currentEffect != effect && currentEffect == DND.FEEDBACK_NONE) {", "-\t\tselection = table.getSelection();", "-\t}", "-\tboolean restoreSelection = currentEffect != effect && effect == DND.FEEDBACK_NONE;", "-\tsetDragUnderEffect(effect, item);", "-\tif (restoreSelection) {", "-\t\ttable.setSelection(selection);", "-\t\tselection = new TableItem[0];", "+void show(int effect, int x, int y) {", "+\teffect = checkEffect(effect);", "+\tTableItem item = (TableItem)getItem(x, y);", "+", "+\tif ((effect & DND.FEEDBACK_SCROLL) == 0) {", "+\t\tscrollBeginTime = 0;", "+\t\tscrollItem = null;", "+\t} else {", "+\t\tif (item != null && item.equals(scrollItem)  && scrollBeginTime != 0) {", "+\t\t\tif (System.currentTimeMillis() >= scrollBeginTime) {", "+\t\t\t\tRectangle area = table.getClientArea();", "+\t\t\t\tint headerHeight = table.getHeaderHeight();", "+\t\t\t\tint itemHeight= table.getItemHeight();", "+\t\t\t\tPoint pt = new Point(x, y);", "+\t\t\t\tpt = table.getDisplay().map(null, table, pt);", "+\t\t\t\tTableItem nextItem = null;", "+\t\t\t\tif (pt.y < area.y + headerHeight + 2 * itemHeight) {", "+\t\t\t\t\tint index = table.indexOf(item);", "+\t\t\t\t\tnextItem = table.getItem(Math.max(0, index-1));", "+\t\t\t\t}", "+\t\t\t\tif (pt.y > area.y + area.height - 2 * itemHeight) {", "+\t\t\t\t\tint index = table.indexOf(item);", "+\t\t\t\t\tnextItem = table.getItem(Math.min(table.getItemCount()-1, index+1));", "+\t\t\t\t}", "+\t\t\t\tif (nextItem != null) table.showItem(nextItem);", "+\t\t\t\tscrollBeginTime = 0;", "+\t\t\t\tscrollItem = null;", "+\t\t\t}", "+\t\t\tscrollBeginTime = System.currentTimeMillis() + SCROLL_HYSTERESIS;", "+\t\t\tscrollItem = item;", "+\t", "+\tif ((effect & DND.FEEDBACK_SELECT) != 0) {", "+\t\tif ((currentEffect & DND.FEEDBACK_INSERT_AFTER) != 0 ||", "+\t\t    (currentEffect & DND.FEEDBACK_INSERT_BEFORE) != 0) {", "+\t\t\tsetInsertMark(null, false);", "+\t\t\tcurrentEffect = DND.FEEDBACK_NONE;", "+\t\t\tcurrentItem = null;", "+\t\t}", "+\t\tif (currentEffect != effect || currentItem != item) { ", "+\t\t\tsetDropSelection(item); ", "+\t\t\tcurrentEffect = DND.FEEDBACK_SELECT;", "+\t\t\tcurrentItem = item;", "+\t\t}", "+\t}"]}], "num": 58906}
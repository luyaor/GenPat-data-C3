{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "804571bd9bf3d9d8e504368cc376bc86", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8411f9117c101f103a8e29e621a846a8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/WebSite.java", "commitBeforeChange": "7ea7044dce58068771791c523ae5bf28b951b0a6", "commitAfterChange": "216f5ab7fb691dae8d48f705c5a563bf2b62146e", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": "  Variant convertToJS (Object value)", "signatureAfterChange": "  Variant convertToJS (Object value)", "diff": ["+\t\t/* get IHTMLDocument2 */", "+\t\tIE browser = (IE)((Browser)getParent ().getParent ()).webBrowser;", "+\t\tOleAutomation auto = browser.auto;", "+\t\tint[] rgdispid = auto.getIDsOfNames (new String[] {\"Document\"}); //$NON-NLS-1$", "+\t\tif (rgdispid == null) return new Variant ();", "+\t\tVariant pVarResult = auto.getProperty (rgdispid[0]);", "+\t\tif (pVarResult == null) return new Variant ();", "+\t\tif (pVarResult.getType () == COM.VT_EMPTY) {", "+\t\t\tpVarResult.dispose ();", "+\t\t\treturn new Variant ();", "+\t\t}", "+\t\tOleAutomation document = pVarResult.getAutomation ();", "+\t\tpVarResult.dispose ();", "+", "+\t\t/* get IHTMLWindow2 */", "+\t\trgdispid = document.getIDsOfNames (new String[] {\"parentWindow\"}); //$NON-NLS-1$", "+\t\tif (rgdispid == null) {", "+\t\t\tdocument.dispose ();", "+\t\t\treturn new Variant ();", "+\t\t}", "+\t\tpVarResult = document.getProperty (rgdispid[0]);", "+\t\tif (pVarResult == null || pVarResult.getType () == COM.VT_EMPTY) {", "+\t\t\tif (pVarResult != null) pVarResult.dispose ();", "+\t\t\tdocument.dispose ();", "+\t\t\treturn new Variant ();\t", "+\t\t}", "+\t\tOleAutomation ihtmlWindow2 = pVarResult.getAutomation ();", "+\t\tpVarResult.dispose ();", "+\t\tdocument.dispose ();", "+", "+\t\t/* create a new JS array to be returned */", "+\t\trgdispid = ihtmlWindow2.getIDsOfNames (new String[] {\"Array\"}); //$NON-NLS-1$", "+\t\tif (rgdispid == null) {", "+\t\t\tihtmlWindow2.dispose ();", "+\t\t\treturn new Variant ();", "+\t\t}", "+\t\tVariant arrayType = ihtmlWindow2.getProperty (rgdispid[0]);", "+\t\tihtmlWindow2.dispose ();", "+\t\tIDispatch arrayTypeDispatch = arrayType.getDispatch ();", "+\t\tarrayType.dispose ();", "+", "+\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\tint rc = arrayTypeDispatch.QueryInterface (COM.IIDIDispatchEx, result);", "+\t\tif (rc != COM.S_OK) return new Variant ();", "+\t\tIDispatchEx arrayTypeDispatchEx = new IDispatchEx (result[0]);", "+\t\tresult[0] = 0;", "+\t\tint /*long*/ resultPtr = OS.GlobalAlloc (OS.GMEM_FIXED | OS.GMEM_ZEROINIT, VARIANT.sizeof);", "+\t\tDISPPARAMS params = new DISPPARAMS ();", "+\t\trc = arrayTypeDispatchEx.InvokeEx (COM.DISPID_VALUE, COM.LOCALE_USER_DEFAULT, COM.DISPATCH_CONSTRUCT, params, resultPtr, null, 0);", "+\t\tif (rc != COM.S_OK) {", "+\t\t\tOS.GlobalFree (resultPtr);", "+\t\t\treturn new Variant ();\t", "+\t\t}", "+\t\tVariant array = Variant.win32_new (resultPtr);", "+\t\tOS.GlobalFree (resultPtr);", "+", "+\t\t/* populate the array */", "-\t\tif (length > 0) {", "-\t\t\t/* get IHTMLDocument2 */", "-\t\t\tIE browser = (IE)((Browser)getParent ().getParent ()).webBrowser;", "-\t\t\tOleAutomation auto = browser.auto;", "-\t\t\tint[] rgdispid = auto.getIDsOfNames (new String[] {\"Document\"}); //$NON-NLS-1$", "-\t\t\tif (rgdispid == null) return new Variant ();", "-\t\t\tVariant pVarResult = auto.getProperty (rgdispid[0]);", "-\t\t\tif (pVarResult == null) return new Variant ();", "-\t\t\tif (pVarResult.getType () == COM.VT_EMPTY) {", "-\t\t\t\tpVarResult.dispose ();", "-\t\t\t\treturn new Variant ();", "-\t\t\t}", "-\t\t\tOleAutomation document = pVarResult.getAutomation ();", "-\t\t\tpVarResult.dispose ();", "-", "-\t\t\t/* get IHTMLWindow2 */", "-\t\t\trgdispid = document.getIDsOfNames (new String[] {\"parentWindow\"}); //$NON-NLS-1$", "-\t\t\tif (rgdispid == null) {", "-\t\t\t\tdocument.dispose ();", "-\t\t\t\treturn new Variant ();", "-\t\t\t}", "-\t\t\tpVarResult = document.getProperty (rgdispid[0]);", "-\t\t\tif (pVarResult == null || pVarResult.getType () == COM.VT_EMPTY) {", "-\t\t\t\tif (pVarResult != null) pVarResult.dispose ();", "-\t\t\t\tdocument.dispose ();", "-\t\t\t\treturn new Variant ();\t", "-\t\t\t}", "-\t\t\tOleAutomation ihtmlWindow2 = pVarResult.getAutomation ();", "-\t\t\tpVarResult.dispose ();", "-\t\t\tdocument.dispose ();", "-", "-\t\t\t/* create a new JS array to be returned */", "-\t\t\trgdispid = ihtmlWindow2.getIDsOfNames (new String[] {\"Array\"}); //$NON-NLS-1$", "-\t\t\tif (rgdispid == null) {", "-\t\t\t\tihtmlWindow2.dispose ();", "-\t\t\t\treturn new Variant ();", "-\t\t\t}", "-\t\t\tVariant arrayType = ihtmlWindow2.getProperty (rgdispid[0]);", "-\t\t\tihtmlWindow2.dispose ();", "-\t\t\tIDispatch arrayTypeDispatch = arrayType.getDispatch ();", "-\t\t\tarrayType.dispose ();", "-", "-\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\tint rc = arrayTypeDispatch.QueryInterface (COM.IIDIDispatchEx, result);", "-\t\t\tif (rc != COM.S_OK) return new Variant ();", "-\t\t\tIDispatchEx arrayTypeDispatchEx = new IDispatchEx (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tint /*long*/ resultPtr = OS.GlobalAlloc (OS.GMEM_FIXED | OS.GMEM_ZEROINIT, VARIANT.sizeof);", "-\t\t\tDISPPARAMS params = new DISPPARAMS ();", "-\t\t\trc = arrayTypeDispatchEx.InvokeEx (COM.DISPID_VALUE, COM.LOCALE_USER_DEFAULT, COM.DISPATCH_CONSTRUCT, params, resultPtr, null, 0);", "-\t\t\tif (rc != COM.S_OK) {", "-\t\t\t\tOS.GlobalFree (resultPtr);", "-\t\t\t\treturn new Variant ();\t", "-\t\t\t}", "-\t\t\tVariant array = Variant.win32_new (resultPtr);", "-\t\t\tOS.GlobalFree (resultPtr);", "-", "-\t\t\t/* populate the array */", "-\t\t\tauto = array.getAutomation ();", "-\t\t\tint[] rgdispids = auto.getIDsOfNames (new String[] {\"push\"}); //$NON-NLS-1$", "-\t\t\tif (rgdispids != null) {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tObject currentObject = arrayValue[i];", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tVariant variant = convertToJS (currentObject);", "-\t\t\t\t\t\tauto.invoke (rgdispids[0], new Variant[] {variant});", "-\t\t\t\t\t\tvariant.dispose ();", "-\t\t\t\t\t} catch (SWTException e) {", "-\t\t\t\t\t\t/* invalid return value type */", "-\t\t\t\t\t\tauto.dispose ();", "-\t\t\t\t\t\tarray.dispose ();", "-\t\t\t\t\t\tthrow e;", "-\t\t\t\t\t}", "+\t\tauto = array.getAutomation ();", "+\t\tint[] rgdispids = auto.getIDsOfNames (new String[] {\"push\"}); //$NON-NLS-1$", "+\t\tif (rgdispids != null) {", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tObject currentObject = arrayValue[i];", "+\t\t\t\ttry {", "+\t\t\t\t\tVariant variant = convertToJS (currentObject);", "+\t\t\t\t\tauto.invoke (rgdispids[0], new Variant[] {variant});", "+\t\t\t\t\tvariant.dispose ();", "+\t\t\t\t} catch (SWTException e) {", "+\t\t\t\t\t/* invalid return value type */", "+\t\t\t\t\tauto.dispose ();", "+\t\t\t\t\tarray.dispose ();", "+\t\t\t\t\tthrow e;", "-\t\t\tauto.dispose ();", "-\t\t\treturn array;", "+\t\tauto.dispose ();", "+\t\treturn array;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "01f77cf0e235fbf5070612b210e03c2a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/win32/org/eclipse/swt/printing/PrintDialog.java", "commitBeforeChange": "6b5e884c7f535b7cb8b5648a01d99cae09e194fc", "commitAfterChange": "9e2e2840ac367eab30032d03153cd028ed78aaef", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": " public PrinterData open()", "signatureAfterChange": " public PrinterData open()", "diff": ["+\tPrinterData data = null;", "-\tOS.PrintDlg(pd);", "-", "-\t/*", "-\t * If user setup info from a previous print dialog was specified,", "-\t * then restore the previous DEVMODE struct.", "-\t */", "-\tint /*long*/ lpInitData = 0;", "-\tint /*long*/ hHeap = OS.GetProcessHeap();", "-\tbyte devmodeData [] = printerData.otherData;", "-\tif (devmodeData != null && devmodeData.length != 0) {", "-\t\tlpInitData = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, devmodeData.length);", "-\t\tOS.MoveMemory(lpInitData, devmodeData, devmodeData.length);", "-\t\tif (pd.hDevMode != 0) OS.GlobalFree(pd.hDevMode);", "-\t\tpd.hDevMode = lpInitData;", "-\t}", "+\tif (OS.PrintDlg(pd)) {", "-\t/* Initialize the DEVMODE struct's fields from the printerData. */", "-\tint /*long*/ hMem = pd.hDevMode;", "-\tint /*long*/ ptr = OS.GlobalLock(hMem);", "-\tDEVMODE devmode = OS.IsUnicode ? (DEVMODE)new DEVMODEW () : new DEVMODEA ();", "-\tOS.MoveMemory(devmode, ptr, OS.IsUnicode ? OS.DEVMODEW_sizeof() : OS.DEVMODEA_sizeof());", "-\tdevmode.dmFields |= OS.DM_ORIENTATION;", "-\tdevmode.dmOrientation = printerData.orientation == PrinterData.PORTRAIT ? OS.DMORIENT_PORTRAIT : OS.DMORIENT_LANDSCAPE;", "-\tif (printerData.copyCount != 1) {", "-\t\tdevmode.dmFields |= OS.DM_COPIES;", "-\t\tdevmode.dmCopies = (short)printerData.copyCount;", "-\t}", "-\tif (printerData.collate != false) {", "-\t\tdevmode.dmFields |= OS.DM_COLLATE;", "-\t\tdevmode.dmCollate = OS.DMCOLLATE_TRUE;", "-\t}", "-\tOS.MoveMemory(ptr, devmode, OS.IsUnicode ? OS.DEVMODEW_sizeof() : OS.DEVMODEA_sizeof());", "-\tOS.GlobalUnlock(hMem);", "-", "-\tpd.Flags = OS.PD_USEDEVMODECOPIESANDCOLLATE;", "-\tif (printerData.printToFile) pd.Flags |= OS.PD_PRINTTOFILE;", "-\tswitch (printerData.scope) {", "-\t\tcase PrinterData.PAGE_RANGE: pd.Flags |= OS.PD_PAGENUMS; break;", "-\t\tcase PrinterData.SELECTION: pd.Flags |= OS.PD_SELECTION; break;", "-\t\tdefault: pd.Flags |= OS.PD_ALLPAGES;", "-\t}", "-\tpd.nMinPage = 1;", "-\tpd.nMaxPage = -1;", "-\tpd.nFromPage = (short) Math.min (0xFFFF, Math.max (1, printerData.startPage));", "-\tpd.nToPage = (short) Math.min (0xFFFF, Math.max (1, printerData.endPage));", "-", "-\tDisplay display = parent.getDisplay();", "-\tShell [] shells = display.getShells();", "-\tif ((getStyle() & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "-\t\tfor (int i=0; i<shells.length; i++) {", "-\t\t\tif (shells[i].isEnabled() && shells[i] != parent) {", "-\t\t\t\tshells[i].setEnabled(false);", "-\t\t\t} else {", "-\t\t\t\tshells[i] = null;", "-\t\t\t}", "+\t\t/*", "+\t\t * If user setup info from a previous print dialog was specified,", "+\t\t * then restore the previous DEVMODE struct.", "+\t\t */", "+\t\tint /*long*/ lpInitData = 0;", "+\t\tint /*long*/ hHeap = OS.GetProcessHeap();", "+\t\tbyte devmodeData [] = printerData.otherData;", "+\t\tif (devmodeData != null && devmodeData.length != 0) {", "+\t\t\tlpInitData = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, devmodeData.length);", "+\t\t\tOS.MoveMemory(lpInitData, devmodeData, devmodeData.length);", "+\t\t\tif (pd.hDevMode != 0) OS.GlobalFree(pd.hDevMode);", "+\t\t\tpd.hDevMode = lpInitData;", "-\t}", "-\tPrinterData data = null;", "-\tString key = \"org.eclipse.swt.internal.win32.runMessagesInIdle\"; //$NON-NLS-1$", "-\tObject oldValue = display.getData(key);", "-\tdisplay.setData(key, new Boolean(true));", "-\tboolean success = OS.PrintDlg(pd);", "-\tdisplay.setData(key, oldValue);", "-\tif ((getStyle() & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "-\t\tfor (int i=0; i<shells.length; i++) {", "-\t\t\tif (shells[i] != null && !shells[i].isDisposed ()) {", "-\t\t\t\tshells[i].setEnabled(true);", "-\t\t\t}", "-\t\t}", "-\t}", "-\t", "-\tif (success) {", "-\t\t/* Get driver and device from the DEVNAMES struct */", "-\t\thMem = pd.hDevNames;", "-\t\t/* Ensure size is a multiple of 2 bytes on UNICODE platforms */", "-\t\tint size = OS.GlobalSize(hMem) / TCHAR.sizeof * TCHAR.sizeof;", "-\t\tptr = OS.GlobalLock(hMem);", "-\t\tshort[] offsets = new short[4];", "-\t\tOS.MoveMemory(offsets, ptr, 2 * offsets.length);", "-\t\tTCHAR buffer = new TCHAR(0, size);", "-\t\tOS.MoveMemory(buffer, ptr, size);\t", "-\t\tOS.GlobalUnlock(hMem);", "-\t\tif (pd.hDevNames != 0) OS.GlobalFree(pd.hDevNames);", "-", "-\t\tint driverOffset = offsets[0];", "-\t\tint i = 0;", "-\t\twhile (driverOffset + i < size) {", "-\t\t\tif (buffer.tcharAt(driverOffset + i) == 0) break;", "-\t\t\ti++;", "-\t\t}", "-\t\tString driver = buffer.toString(driverOffset, i);", "-", "-\t\tint deviceOffset = offsets[1];", "-\t\ti = 0;", "-\t\twhile (deviceOffset + i < size) {", "-\t\t\tif (buffer.tcharAt(deviceOffset + i) == 0) break;", "-\t\t\ti++;", "-\t\t}", "-\t\tString device = buffer.toString(deviceOffset, i);\t", "-", "-\t\tint outputOffset = offsets[2];", "-\t\ti = 0;", "-\t\twhile (outputOffset + i < size) {", "-\t\t\tif (buffer.tcharAt(outputOffset + i) == 0) break;", "-\t\t\ti++;", "-\t\t}", "-\t\tString output = buffer.toString(outputOffset, i);", "-\t\t/* Create PrinterData object and set fields from PRINTDLG */", "-\t\tdata = new PrinterData(driver, device);", "-\t\tif ((pd.Flags & OS.PD_PAGENUMS) != 0) {", "-\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "-\t\t\tdata.startPage = pd.nFromPage & 0xFFFF;", "-\t\t\tdata.endPage = pd.nToPage & 0xFFFF;", "-\t\t} else if ((pd.Flags & OS.PD_SELECTION) != 0) {", "-\t\t\tdata.scope = PrinterData.SELECTION;", "-\t\t}", "-\t\tdata.printToFile = (pd.Flags & OS.PD_PRINTTOFILE) != 0;", "-\t\tif (data.printToFile) data.fileName = output;", "-\t\tdata.copyCount = pd.nCopies;", "-\t\tdata.collate = (pd.Flags & OS.PD_COLLATE) != 0;", "-", "-\t\t/* Bulk-save the printer-specific settings in the DEVMODE struct */", "-\t\thMem = pd.hDevMode;", "-\t\tsize = OS.GlobalSize(hMem);", "-\t\tptr = OS.GlobalLock(hMem);", "-\t\tdata.otherData = new byte[size];", "-\t\tOS.MoveMemory(data.otherData, ptr, size);", "-\t\tdevmode = OS.IsUnicode ? (DEVMODE)new DEVMODEW () : new DEVMODEA ();", "+\t\t/* Initialize the DEVMODE struct's fields from the printerData. */", "+\t\tint /*long*/ hMem = pd.hDevMode;", "+\t\tint /*long*/ ptr = OS.GlobalLock(hMem);", "+\t\tDEVMODE devmode = OS.IsUnicode ? (DEVMODE)new DEVMODEW () : new DEVMODEA ();", "-\t\tif ((devmode.dmFields & OS.DM_ORIENTATION) != 0) {", "-\t\t\tint dmOrientation = devmode.dmOrientation;", "-\t\t\tdata.orientation = dmOrientation == OS.DMORIENT_LANDSCAPE ? PrinterData.LANDSCAPE : PrinterData.PORTRAIT;", "+\t\tdevmode.dmFields |= OS.DM_ORIENTATION;", "+\t\tdevmode.dmOrientation = printerData.orientation == PrinterData.PORTRAIT ? OS.DMORIENT_PORTRAIT : OS.DMORIENT_LANDSCAPE;", "+\t\tif (printerData.copyCount != 1) {", "+\t\t\tdevmode.dmFields |= OS.DM_COPIES;", "+\t\t\tdevmode.dmCopies = (short)printerData.copyCount;", "+\t\tif (printerData.collate != false) {", "+\t\t\tdevmode.dmFields |= OS.DM_COLLATE;", "+\t\t\tdevmode.dmCollate = OS.DMCOLLATE_TRUE;", "+\t\t}", "+\t\tOS.MoveMemory(ptr, devmode, OS.IsUnicode ? OS.DEVMODEW_sizeof() : OS.DEVMODEA_sizeof());", "-\t\tif (pd.hDevMode != 0) OS.GlobalFree(pd.hDevMode);", "-\t\tif (lpInitData != 0) OS.HeapFree(hHeap, 0, lpInitData);", "-\t\tprinterData = data;", "+\t", "+\t\tpd.Flags = OS.PD_USEDEVMODECOPIESANDCOLLATE;", "+\t\tif (printerData.printToFile) pd.Flags |= OS.PD_PRINTTOFILE;", "+\t\tswitch (printerData.scope) {", "+\t\t\tcase PrinterData.PAGE_RANGE: pd.Flags |= OS.PD_PAGENUMS; break;", "+\t\t\tcase PrinterData.SELECTION: pd.Flags |= OS.PD_SELECTION; break;", "+\t\t\tdefault: pd.Flags |= OS.PD_ALLPAGES;", "+\t\t}", "+\t\tpd.nMinPage = 1;", "+\t\tpd.nMaxPage = -1;", "+\t\tpd.nFromPage = (short) Math.min (0xFFFF, Math.max (1, printerData.startPage));", "+\t\tpd.nToPage = (short) Math.min (0xFFFF, Math.max (1, printerData.endPage));", "+\t", "+\t\tDisplay display = parent.getDisplay();", "+\t\tShell [] shells = display.getShells();", "+\t\tif ((getStyle() & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "+\t\t\tfor (int i=0; i<shells.length; i++) {", "+\t\t\t\tif (shells[i].isEnabled() && shells[i] != parent) {", "+\t\t\t\t\tshells[i].setEnabled(false);", "+\t\t\t\t} else {", "+\t\t\t\t\tshells[i] = null;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tString key = \"org.eclipse.swt.internal.win32.runMessagesInIdle\"; //$NON-NLS-1$", "+\t\tObject oldValue = display.getData(key);", "+\t\tdisplay.setData(key, new Boolean(true));", "+\t\tboolean success = OS.PrintDlg(pd);", "+\t\tdisplay.setData(key, oldValue);", "+\t\tif ((getStyle() & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "+\t\t\tfor (int i=0; i<shells.length; i++) {", "+\t\t\t\tif (shells[i] != null && !shells[i].isDisposed ()) {", "+\t\t\t\t\tshells[i].setEnabled(true);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\tif (success) {", "+\t\t\t/* Get driver and device from the DEVNAMES struct */", "+\t\t\thMem = pd.hDevNames;", "+\t\t\t/* Ensure size is a multiple of 2 bytes on UNICODE platforms */", "+\t\t\tint size = OS.GlobalSize(hMem) / TCHAR.sizeof * TCHAR.sizeof;", "+\t\t\tptr = OS.GlobalLock(hMem);", "+\t\t\tshort[] offsets = new short[4];", "+\t\t\tOS.MoveMemory(offsets, ptr, 2 * offsets.length);", "+\t\t\tTCHAR buffer = new TCHAR(0, size);", "+\t\t\tOS.MoveMemory(buffer, ptr, size);\t", "+\t\t\tOS.GlobalUnlock(hMem);", "+\t\t\tif (pd.hDevNames != 0) OS.GlobalFree(pd.hDevNames);", "+\t", "+\t\t\tint driverOffset = offsets[0];", "+\t\t\tint i = 0;", "+\t\t\twhile (driverOffset + i < size) {", "+\t\t\t\tif (buffer.tcharAt(driverOffset + i) == 0) break;", "+\t\t\t\ti++;", "+\t\t\t}", "+\t\t\tString driver = buffer.toString(driverOffset, i);", "+\t", "+\t\t\tint deviceOffset = offsets[1];", "+\t\t\ti = 0;", "+\t\t\twhile (deviceOffset + i < size) {", "+\t\t\t\tif (buffer.tcharAt(deviceOffset + i) == 0) break;", "+\t\t\t\ti++;", "+\t\t\t}", "+\t\t\tString device = buffer.toString(deviceOffset, i);\t", "+\t", "+\t\t\tint outputOffset = offsets[2];", "+\t\t\ti = 0;", "+\t\t\twhile (outputOffset + i < size) {", "+\t\t\t\tif (buffer.tcharAt(outputOffset + i) == 0) break;", "+\t\t\t\ti++;", "+\t\t\t}", "+\t\t\tString output = buffer.toString(outputOffset, i);", "+\t\t\t", "+\t\t\t/* Create PrinterData object and set fields from PRINTDLG */", "+\t\t\tdata = new PrinterData(driver, device);", "+\t\t\tif ((pd.Flags & OS.PD_PAGENUMS) != 0) {", "+\t\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "+\t\t\t\tdata.startPage = pd.nFromPage & 0xFFFF;", "+\t\t\t\tdata.endPage = pd.nToPage & 0xFFFF;", "+\t\t\t} else if ((pd.Flags & OS.PD_SELECTION) != 0) {", "+\t\t\t\tdata.scope = PrinterData.SELECTION;", "+\t\t\t}", "+\t\t\tdata.printToFile = (pd.Flags & OS.PD_PRINTTOFILE) != 0;", "+\t\t\tif (data.printToFile) data.fileName = output;", "+\t\t\tdata.copyCount = pd.nCopies;", "+\t\t\tdata.collate = (pd.Flags & OS.PD_COLLATE) != 0;", "+\t", "+\t\t\t/* Bulk-save the printer-specific settings in the DEVMODE struct */", "+\t\t\thMem = pd.hDevMode;", "+\t\t\tsize = OS.GlobalSize(hMem);", "+\t\t\tptr = OS.GlobalLock(hMem);", "+\t\t\tdata.otherData = new byte[size];", "+\t\t\tOS.MoveMemory(data.otherData, ptr, size);", "+\t\t\tdevmode = OS.IsUnicode ? (DEVMODE)new DEVMODEW () : new DEVMODEA ();", "+\t\t\tOS.MoveMemory(devmode, ptr, OS.IsUnicode ? OS.DEVMODEW_sizeof() : OS.DEVMODEA_sizeof());", "+\t\t\tif ((devmode.dmFields & OS.DM_ORIENTATION) != 0) {", "+\t\t\t\tint dmOrientation = devmode.dmOrientation;", "+\t\t\t\tdata.orientation = dmOrientation == OS.DMORIENT_LANDSCAPE ? PrinterData.LANDSCAPE : PrinterData.PORTRAIT;", "+\t\t\t}", "+\t\t\tOS.GlobalUnlock(hMem);", "+\t\t\tif (pd.hDevMode != 0) OS.GlobalFree(pd.hDevMode);", "+\t\t\tif (lpInitData != 0) OS.HeapFree(hHeap, 0, lpInitData);", "+\t\t\tprinterData = data;", "+\t\t}"]}], "num": 8434}
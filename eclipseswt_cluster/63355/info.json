{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dd6375d5495a64de7a73859003ba1cb0", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "41a67eedb11f53b6f653f98e34a5b414", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "1dbced596fa99e8438e287af8d6415e01019d350", "commitAfterChange": "7e7c23207b059dd8f2f569032a4266c17d005c2c", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "  void updateMenuLocation (Event event)", "signatureAfterChange": "  void updateMenuLocation (Event event)", "diff": ["-\t\tOS.SendMessage (handle, OS.LB_GETITEMRECT, focusIndex, rect);", "+\t\tint /*long*/ newFont, oldFont = 0;", "+\t\tint /*long*/ hDC = OS.GetDC (handle);", "+\t\tnewFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "+\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "+\t\tint flags = OS.DT_CALCRECT | OS.DT_SINGLELINE | OS.DT_NOPREFIX;", "+\t\tint cp = getCodePage ();", "+\t\tTCHAR buffer = new TCHAR (cp, 64 + 1);", "+\t\tint length = (int)/*64*/OS.SendMessage (handle, OS.LB_GETTEXTLEN, focusIndex, 0);", "+\t\tif (length != OS.LB_ERR) {", "+\t\t\tif (length + 1 > buffer.length ()) {", "+\t\t\t\tbuffer = new TCHAR (cp, length + 1);", "+\t\t\t}", "+\t\t\tint result = (int)/*64*/OS.SendMessage (handle, OS.LB_GETTEXT, focusIndex, buffer);", "+\t\t\tif (result != OS.LB_ERR) {", "+\t\t\t\tOS.DrawText (hDC, buffer, length, rect, flags);", "+\t\t\t}", "+\t\t}", "+\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "+\t\tOS.ReleaseDC (handle, hDC);", "+\t\t", "+\t\tOS.SendMessage (handle, OS.LB_GETITEMRECT, focusIndex, rect);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbdb64523c3e5b47f0a805f6295f3f5c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "3a4151df7f890efbc61e9a01d33c3ead4c2645d9", "commitAfterChange": "c762252cf769015e8f116caa1f2d177bbf731286", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "\r \r LRESULT WM_SIZE (int wParam, int lParam)", "signatureAfterChange": "\r \r LRESULT WM_SIZE (int wParam, int lParam)", "diff": ["+\t/*\r", "+\t* Feature in Windows.  When a tool bar that contains\r", "+\t* separators is wrapped, under certain circumstances,\r", "+\t* Windows redraws the entire tool bar unnecessarily\r", "+\t* when resized no item is moves.  Whether the entire\r", "+\t* toolbar is damaged or not seems to depend on the\r", "+\t* size of the tool bar and the position of the separators.\r", "+\t* The fix is to ensure that the newly exposed areas are\r", "+\t* always damaged, and avoid the redraw when no tool item\r", "+\t* moves.\r", "+\t*/\r", "+\tRECT [] rects = null;\r", "+\tint rgn = 0, oldCount = 0;\r", "+\tboolean fixRedraw = drawCount == 0 &&\r", "+\t\t(style & SWT.WRAP) != 0 &&\r", "+\t\tOS.IsWindowVisible (handle) &&\r", "+\t\tOS.SendMessage (handle, OS.TB_GETROWS, 0, 0) != 1;\r", "+\tif (fixRedraw) {\r", "+\t\trgn = OS.CreateRectRgn (0, 0, 0, 0);\r", "+\t\tOS.GetUpdateRgn (handle, rgn, false);\r", "+\t\toldCount = OS.SendMessage (handle, OS.TB_BUTTONCOUNT, 0, 0);\r", "+\t\trects = new RECT [oldCount];\r", "+\t\tfor (int i=0; i<oldCount; i++) {\r", "+\t\t\trects [i] = new RECT ();\r", "+\t\t\tOS.SendMessage (handle, OS.TB_GETITEMRECT, i, rects [i]);\r", "+\t\t}\r", "+\t}\r", "+\t\r", "+\t\r", "+\tif (fixRedraw) {\r", "+\t\tint newCount = OS.SendMessage (handle, OS.TB_BUTTONCOUNT, 0, 0);\r", "+\t\tif (newCount == oldCount) {\r", "+\t\t\tint index = 0;\r", "+\t\t\tRECT rect = new RECT ();\r", "+\t\t\twhile (index < newCount) {\r", "+\t\t\t\tOS.SendMessage (handle, OS.TB_GETITEMRECT, index, rect);\r", "+\t\t\t\tif (!OS.EqualRect (rects [index], rect)) break;\r", "+\t\t\t\tindex++;\r", "+\t\t\t}\r", "+\t\t\tif (index == newCount) {\r", "+\t\t\t\tOS.ValidateRect (handle, null);\r", "+\t\t\t\tOS.InvalidateRgn (handle, rgn, false);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\tOS.DeleteObject (rgn);\r", "+\t}\r", "+\r"]}], "num": 63355}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e81f540fd793fa4d2da561245c9572ff", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba7b7eba42aed4c21ea72c1ffbff9065", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleType.java", "commitBeforeChange": "a73836b62f7b4598932e8c5312c4b064291c921f", "commitAfterChange": "9e104f73db7a2c845f9e17635faa75853418512a", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 24, "signatureBeforeChange": "  \tint defineType (int parentType, byte[] name)", "signatureAfterChange": " \t \tint createObject (Accessible accessible, int widget, int parentType)", "diff": ["-", "-\tint defineType (int parentType, byte[] name) {", "-\t\tOS.memmove (objectDefinition, typeInfo, GTypeInfo.sizeof); ", "-\t\tint typeHandle = OS.g_type_register_static (parentType, name, objectDefinition, 0);", "-\t\tOS.g_type_add_interface_static (typeHandle, ATK_COMPONENT_TYPE, componentIfaceDefinition);", "-\t\tOS.g_type_add_interface_static (typeHandle, ATK_ACTION_TYPE, actionIfaceDefinition);", "-\t\tOS.g_type_add_interface_static (typeHandle, ATK_SELECTION_TYPE, selectionIfaceDefinition);", "-\t\tOS.g_type_add_interface_static (typeHandle, ATK_TEXT_TYPE, textIfaceDefinition);", "-\t\treturn typeHandle;", "+\t", "+\tint createObject (Accessible accessible, int widget, int parentType) {", "+\t\tint type = handle;", "+\t\tAccessible acc = accessible;", "+\t\tif (acc == null) {", "+\t\t\t// we don't care about this control, so create it with the parent's ", "+\t\t\t// type so that its accessibility callbacks will not pass though here", "+\t\t\ttype = OS.g_type_parent (type);", "+\t\t\tint result = OS.g_object_new (type, 0);", "+\t\t\tOS.atk_object_initialize (result, widget);", "+\t\t\treturn result;", "+\t\t}", "+\t\tAccessibleObject object = new AccessibleObject (type, widget, acc, parentType);", "+\t\taccessibleObjects.put (new Integer (object.handle), object);", "+\t\tacc.accessibleObject = object;", "+\t\treturn object.handle;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee3beea5f22bd281fdb21b85fc063ac4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleType.java", "commitBeforeChange": "5ee66b4e4aa7e3b16413042c7ed830ba82d7da9c", "commitAfterChange": "1f6f99323ca5cf329c2b1438d938ca1097ff180b", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tAccessibleType (byte[] typeName, int parentType)", "signatureAfterChange": " \t \tAccessibleType (byte[] typeName, int parentType)", "diff": ["-\t\tOS.g_type_query (parentType, queryPtr);", "+\t\tATK.g_type_query (parentType, queryPtr);", "-\t\tOS.memmove (query, queryPtr, GTypeQuery.sizeof);", "+\t\tATK.memmove (query, queryPtr, GTypeQuery.sizeof);", "-\t\tOS.memmove (objectDefinition, typeInfo, GTypeInfo.sizeof); ", "-\t\thandle = OS.g_type_register_static (parentType, typeName, objectDefinition, 0);", "-\t\tOS.g_type_add_interface_static (handle, ATK_COMPONENT_TYPE, componentIfaceDefinition);", "-\t\tOS.g_type_add_interface_static (handle, ATK_ACTION_TYPE, actionIfaceDefinition);", "-\t\tOS.g_type_add_interface_static (handle, ATK_SELECTION_TYPE, selectionIfaceDefinition);", "-\t\tOS.g_type_add_interface_static (handle, ATK_TEXT_TYPE, textIfaceDefinition);", "+\t\tATK.memmove (objectDefinition, typeInfo, GTypeInfo.sizeof); ", "+\t\thandle = ATK.g_type_register_static (parentType, typeName, objectDefinition, 0);", "+\t\tATK.g_type_add_interface_static (handle, ATK_COMPONENT_TYPE, componentIfaceDefinition);", "+\t\tATK.g_type_add_interface_static (handle, ATK_ACTION_TYPE, actionIfaceDefinition);", "+\t\tATK.g_type_add_interface_static (handle, ATK_SELECTION_TYPE, selectionIfaceDefinition);", "+\t\tATK.g_type_add_interface_static (handle, ATK_TEXT_TYPE, textIfaceDefinition);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2920fdba2c440f38c251d64f9517b1dc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleType.java", "commitBeforeChange": "a73836b62f7b4598932e8c5312c4b064291c921f", "commitAfterChange": "9e104f73db7a2c845f9e17635faa75853418512a", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tAccessibleType (byte[] typeName, int parentType)", "signatureAfterChange": " \t \tprivate AccessibleType ()", "diff": ["-\tAccessibleType (byte[] typeName, int parentType) {", "+\tprivate AccessibleType () {", "-\t\tthis.parentType = parentType;", "-\t\thandle = defineType (parentType, typeName);", "-\t}", "+\t\tint parentType = OS.g_type_from_name (Converter.wcsToMbcs (null, PARENT_TYPE_NAME, true));", "+\t\tOS.memmove (objectDefinition, typeInfo, GTypeInfo.sizeof);", "+\t\tbyte[] name = Converter.wcsToMbcs (null, ACCESSIBLE_TYPE_NAME, true);", "+\t\thandle = OS.g_type_register_static (parentType, name, objectDefinition, 0);", "+\t\tOS.g_type_add_interface_static (handle, ATK_COMPONENT_TYPE, componentIfaceDefinition);", "+\t\tOS.g_type_add_interface_static (handle, ATK_ACTION_TYPE, actionIfaceDefinition);", "+\t\tOS.g_type_add_interface_static (handle, ATK_SELECTION_TYPE, selectionIfaceDefinition);", "+\t\tOS.g_type_add_interface_static (handle, ATK_TEXT_TYPE, textIfaceDefinition);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "906eafbabb0e66859263ea984e4d53ee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleFactory.java", "commitBeforeChange": "8c1742e67c1e4d288877ced18ec4003ddd91b26c", "commitAfterChange": "6cd1ca6632ac80e9ec1f495926ca79670db9ab98", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": "  \tstatic int getType (byte[] widgetTypeName, Accessible accessible, int parentType, int childId)", "signatureAfterChange": "  \tstatic int getType (byte[] widgetTypeName, Accessible accessible, int parentType, int childId)", "diff": ["-\t\tif (action) swtTypeName += \"Action\";", "-\t\tif (hypertext) swtTypeName += \"Hypertext\";", "-\t\tif (selection) swtTypeName += \"Selection\";", "-\t\tif (text) swtTypeName += \"Text\";", "+\t\tif (action) swtTypeName += \"Action\"; //$NON-NLS-1$", "+\t\tif (hypertext) swtTypeName += \"Hypertext\"; //$NON-NLS-1$", "+\t\tif (selection) swtTypeName += \"Selection\"; //$NON-NLS-1$", "+\t\tif (text) swtTypeName += \"Text\"; //$NON-NLS-1$", "-\t\t\tATK.g_type_query (parentType, queryPtr);", "+\t\t\tOS.g_type_query (parentType, queryPtr);", "-\t\t\tATK.memmove (query, queryPtr, GTypeQuery.sizeof);", "+\t\t\tOS.memmove (query, queryPtr, GTypeQuery.sizeof);", "-\t\t\tATK.memmove (ObjectIfaceDefinition, typeInfo, GTypeInfo.sizeof);", "+\t\t\tOS.memmove (ObjectIfaceDefinition, typeInfo, GTypeInfo.sizeof);", "-\t\t\ttype = ATK.g_type_register_static (parentType, nameBytes, ObjectIfaceDefinition, 0);", "-\t\t\tATK.g_type_add_interface_static (type, AccessibleObject.ATK_COMPONENT_TYPE, ComponentIfaceDefinition);", "-\t\t\tif (action) ATK.g_type_add_interface_static (type, AccessibleObject.ATK_ACTION_TYPE, ActionIfaceDefinition);", "-\t\t\tif (hypertext) ATK.g_type_add_interface_static (type, AccessibleObject.ATK_HYPERTEXT_TYPE, HypertextIfaceDefinition);", "-\t\t\tif (selection) ATK.g_type_add_interface_static (type, AccessibleObject.ATK_SELECTION_TYPE, SelectionIfaceDefinition);", "-\t\t\tif (text) ATK.g_type_add_interface_static (type, AccessibleObject.ATK_TEXT_TYPE, TextIfaceDefinition);", "+\t\t\ttype = OS.g_type_register_static (parentType, nameBytes, ObjectIfaceDefinition, 0);", "+\t\t\tOS.g_type_add_interface_static (type, AccessibleObject.ATK_COMPONENT_TYPE, ComponentIfaceDefinition);", "+\t\t\tif (action) OS.g_type_add_interface_static (type, AccessibleObject.ATK_ACTION_TYPE, ActionIfaceDefinition);", "+\t\t\tif (hypertext) OS.g_type_add_interface_static (type, AccessibleObject.ATK_HYPERTEXT_TYPE, HypertextIfaceDefinition);", "+\t\t\tif (selection) OS.g_type_add_interface_static (type, AccessibleObject.ATK_SELECTION_TYPE, SelectionIfaceDefinition);", "+\t\t\tif (text) OS.g_type_add_interface_static (type, AccessibleObject.ATK_TEXT_TYPE, TextIfaceDefinition);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0f80f4243c2a4cd43d36bc1540eb2abf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleFactory.java", "commitBeforeChange": "1600566572476d9a59d55b12b53edda457f44a52", "commitAfterChange": "9b8efc09a689dca8137a73eb726757d83f71f8ea", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " \t \tint createFactory (byte[] name)", "signatureAfterChange": " \t \tstatic int defineType (byte[] typeName, int parentType)", "diff": ["-\tint createFactory (byte[] name) {", "-\t\tint parent = ATK.g_type_from_name (Converter.wcsToMbcs (null, FACTORY_PARENTTYPE, true));", "-\t\tgTypeInfoCB_base_init  = new Callback (this, \"gTypeInfo_base_init\", 1);", "+\tstatic int defineType (byte[] typeName, int parentType) {", "+\t\tint queryPtr = OS.g_malloc (GTypeQuery.sizeof);", "+\t\tATK.g_type_query (parentType, queryPtr);", "+\t\tGTypeQuery query = new GTypeQuery ();", "+\t\tATK.memmove (query, queryPtr, GTypeQuery.sizeof);", "+\t\tOS.g_free (queryPtr);", "-\t\ttypeInfo.base_init = gTypeInfoCB_base_init.getAddress ();", "-\t\ttypeInfo.class_size = ATK.AtkObjectFactoryClass_sizeof ();", "-\t\ttypeInfo.instance_size = ATK.AtkObjectFactory_sizeof ();", "-\t\thandle = OS.g_malloc (GTypeInfo.sizeof); ", "-\t\tATK.memmove (handle, typeInfo, GTypeInfo.sizeof); ", "-\t\treturn ATK.g_type_register_static (parent, name, handle, 0);", "+\t\ttypeInfo.base_init = GTypeInfo_base_init_type.getAddress ();", "+\t\ttypeInfo.class_size = (short) query.class_size;", "+\t\ttypeInfo.instance_size = (short) query.instance_size;", "+\t\tObjectIfaceDefinition = OS.g_malloc (GTypeInfo.sizeof); ", "+\t\tATK.memmove (ObjectIfaceDefinition, typeInfo, GTypeInfo.sizeof); ", "+\t\tint result = ATK.g_type_register_static (parentType, typeName, ObjectIfaceDefinition, 0);", "+\t\tATK.g_type_add_interface_static (result, AccessibleObject.ATK_COMPONENT_TYPE, ComponentIfaceDefinition);", "+\t\tATK.g_type_add_interface_static (result, AccessibleObject.ATK_ACTION_TYPE, ActionIfaceDefinition);", "+\t\tATK.g_type_add_interface_static (result, AccessibleObject.ATK_SELECTION_TYPE, SelectionIfaceDefinition);", "+\t\tATK.g_type_add_interface_static (result, AccessibleObject.ATK_TEXT_TYPE, TextIfaceDefinition);", "+\t\treturn result;"]}], "num": 21929}
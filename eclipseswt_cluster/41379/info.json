{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dfc028bf26a88dbd29430476a9280387", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6782552fdc4b20f3734c6b5554a2254", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/TextTransfer.java", "commitBeforeChange": "67976c6abaf5a07314770e0734a67e21100216a3", "commitAfterChange": "8e7bdacd1dbbc7e29ab695539fe4d98a2a8aee35", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-\t// get byte array from super", "-\tbyte[] buffer = (byte[])super.nativeToJava(transferData);", "+\tbyte[] buffer = null;", "+\tif (transferData.type == TYPEID1) { // COMPOUND_TEXT", "+\t\tint[] list = new int[1];", "+\t\tint count = OS.gdk_text_property_to_utf8_list(transferData.type, transferData.format, transferData.pValue, transferData.length, list);", "+\t\tif (count == 0) {", "+\t\t\ttransferData.result = 0;", "+\t\t} else {", "+\t\t\tint[] ptr = new int[1];", "+\t\t\tOS.memmove(ptr, list[0], 4);", "+\t\t\tint length = OS.g_utf8_strlen(ptr[0], -1) * 8;", "+\t\t\tbuffer = new byte[length];", "+\t\t\tOS.memmove(buffer, ptr[0], length);", "+\t\t\tOS.g_strfreev(list[0]);", "+\t\t}", "+\t} else {", "+\t\tbuffer = (byte[])super.nativeToJava(transferData);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8ced54e55bbf701de24af4929b8259b3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "08ed4d34906d3cb004511badd9a3286f04d40b7a", "commitAfterChange": "3587c6fb9068182d41169c6c886f0d5faa0219e6", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 18, "signatureBeforeChange": " public TreeItem[] getSelection ()", "signatureAfterChange": " public TreeItem[] getSelection ()", "diff": ["-\tint selection = OS.GTK_CLIST_SELECTION (handle);", "-\tif (selection == 0) return new TreeItem [0];", "-\tint length = OS.g_list_length (selection);", "-\tTreeItem [] result = new TreeItem [length];", "-\tfor (int i=0; i<length; i++) {", "-\t\tint node = OS.g_list_nth_data (selection, i);", "-\t\tint index = OS.gtk_ctree_node_get_row_data (handle, node) - 1;", "-\t\tresult [i] = items [index];", "+\tTreeItem[] answer;", "+\tif ((style & SWT.MULTI) != 0) {", "+\t\t/*", "+\t\t * Multi-selection case", "+\t\t */", "+\t\tselSize = 0;", "+\t\tselIndices = new int[items.length];", "+\t\tint selection = OS.gtk_tree_view_get_selection(handle);", "+\t\tOS.gtk_tree_selection_selected_foreach(selection, getDisplay().selectionIterProc, handle);", "+\t\tanswer = new TreeItem[selSize];", "+\t\tfor (int i=0; i<selSize; i++) answer[i] = items[selIndices[i]];", "+\t} else {", "+\t\t/*", "+\t\t * Single-selection case", "+\t\t */", "+\t\tint iter = OS.g_malloc(OS.GtkTreeIter_sizeof());", "+\t\tint selection = OS.gtk_tree_view_get_selection(handle);", "+\t\tboolean hasSelection = OS.gtk_tree_selection_get_selected(selection, null, iter);", "+\t\tif (hasSelection) {", "+\t\t\tint[] index = new int[1];", "+\t\t\tOS.gtk_tree_model_get(modelHandle, iter, 4, index, -1);", "+\t\t\tanswer = new TreeItem[1];", "+\t\t\tanswer[0] = items[index[0]];", "+\t\t} else {", "+\t\t\tanswer = new TreeItem[0];", "+\t\t}", "+\t\tOS.g_free(iter);", "-\treturn result;", "+\treturn answer;"]}], "num": 41379}
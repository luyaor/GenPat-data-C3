{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e715d67a5ac03e7784e9463d5550fd27", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29e016b4f64b3a3096f1d7f60a999901", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "309b926e42fb999778d38b7626a0e6c34a82050c", "commitAfterChange": "9a323715fef210b251c1bb90f805454b92729e7f", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  int _getOffset(int offset, int movement, boolean forward)", "signatureAfterChange": "  int _getOffset(int offset, int movement, boolean forward)", "diff": ["-\tint lineStart = 0;", "-\tfor (int line=0; line<lines.length; line++) {", "-\t\tint lineLength = OS.TextLine_Length(lines[line]);", "-\t\tif (lineStart <= offset && offset < lineStart + lineLength) {", "-\t\t\tif (forward) {", "-\t\t\t\tif (offset >= lineStart + lineLength - OS.TextLine_NewlineLength(lines[line])) {", "-\t\t\t\t\treturn untranslateOffset(lineStart + lineLength); ", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tif (offset == lineStart) {", "-\t\t\t\t\tif (line == 0) return 0;", "-\t\t\t\t\tint breakLength = OS.TextLine_NewlineLength(lines[line - 1]);", "-\t\t\t\t\tif (breakLength != 0) {", "-\t\t\t\t\t\treturn untranslateOffset(offset - breakLength); ", "+\tint lineStart = 0, lineIndex;\t", "+\tfor (lineIndex=0; lineIndex<lines.length; lineIndex++) {", "+\t\tint lineLength = OS.TextLine_Length(lines[lineIndex]);", "+\t\tif (lineStart + lineLength > offset) break;", "+\t\tlineStart += lineLength;", "+\t}", "+\tint line = lines[lineIndex];", "+\tint lineLength = OS.TextLine_Length(line);", "+\tint lineBreak = OS.TextLine_NewlineLength (line);", "+\twhile (lineStart <= offset && offset <= lineStart + lineLength) {", "+\t\tint resultCharHit;", "+\t\tint characterHit = OS.gcnew_CharacterHit(offset, 0);", "+\t\tif (forward) {", "+\t\t\tresultCharHit = OS.TextLine_GetNextCaretCharacterHit(line, characterHit);", "+\t\t} else {", "+\t\t\tresultCharHit = OS.TextLine_GetPreviousCaretCharacterHit(line, characterHit);", "+\t\t}", "+\t\tint newOffset = OS.CharacterHit_FirstCharacterIndex(resultCharHit);", "+\t\tint trailing = OS.CharacterHit_TrailingLength(resultCharHit);", "+\t\tOS.GCHandle_Free(resultCharHit);", "+\t\tOS.GCHandle_Free(characterHit);", "+\t\tif (forward) {", "+\t\t\tif (newOffset + trailing >= lineStart + lineLength - lineBreak) {", "+\t\t\t\tint lineEnd = lineStart + lineLength;", "+\t\t\t\tif (trailing != 0) lineEnd -= lineBreak;", "+\t\t\t\treturn untranslateOffset(Math.min(length, lineEnd)); ", "+\t\t\t}", "+\t\t} else {", "+\t\t\tif (newOffset + trailing == lineStart) {", "+\t\t\t\tif (lineIndex == 0) return 0;", "+\t\t\t\tint lineEnd = 0;", "+\t\t\t\tif (newOffset + trailing == offset) lineEnd = OS.TextLine_NewlineLength(lines[lineIndex - 1]);", "+\t\t\t\treturn untranslateOffset(Math.max(0, newOffset + trailing - lineEnd)); ", "+\t\t\t}", "+\t\t}", "+\t\toffset = newOffset + trailing;", "+", "+\t\tswitch (movement) {", "+\t\t\tcase SWT.MOVEMENT_CLUSTER:", "+\t\t\t\treturn untranslateOffset(newOffset);", "+\t\t\tcase SWT.MOVEMENT_WORD:", "+\t\t\tcase SWT.MOVEMENT_WORD_START: {", "+\t\t\t\tif (offset > 0) {", "+\t\t\t\t\tboolean letterOrDigit = Compatibility.isLetterOrDigit(segmentsText.charAt(offset));", "+\t\t\t\t\tboolean previousLetterOrDigit = Compatibility.isLetterOrDigit(segmentsText.charAt(offset - 1));", "+\t\t\t\t\tif (letterOrDigit != previousLetterOrDigit || !letterOrDigit) {", "+\t\t\t\t\t\tif (!Compatibility.isWhitespace(segmentsText.charAt(offset))) {", "+\t\t\t\t\t\t\treturn untranslateOffset(offset);", "+\t\t\t\t\t\t}", "+\t\t\t\tbreak;", "-\t\t\tint resultCharHit;", "-\t\t\tint characterHit = OS.gcnew_CharacterHit(offset, 0);", "-\t\t\tif (forward) {", "-\t\t\t\tresultCharHit = OS.TextLine_GetNextCaretCharacterHit(lines[line], characterHit);", "-\t\t\t} else {", "-\t\t\t\tresultCharHit = OS.TextLine_GetPreviousCaretCharacterHit(lines[line], characterHit);", "+\t\t\tcase SWT.MOVEMENT_WORD_END: {", "+\t\t\t\tif (offset > 0) {", "+\t\t\t\t\tboolean isLetterOrDigit = Compatibility.isLetterOrDigit(segmentsText.charAt(offset));", "+\t\t\t\t\tboolean previousLetterOrDigit = Compatibility.isLetterOrDigit(segmentsText.charAt(offset - 1));", "+\t\t\t\t\tif (!isLetterOrDigit && previousLetterOrDigit) {", "+\t\t\t\t\t\treturn untranslateOffset(offset);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "-\t\t\tint result = OS.CharacterHit_FirstCharacterIndex(resultCharHit);", "-\t\t\tint trailing = OS.CharacterHit_TrailingLength(resultCharHit);", "-\t\t\tOS.GCHandle_Free(resultCharHit);", "-\t\t\tOS.GCHandle_Free(characterHit);", "-\t\t\treturn untranslateOffset(result + trailing);", "-\t\tlineStart += lineLength;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "203a56a9411a3443a8d6c9f5810b7b26", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "81d15e3de64198e8365dcac773a7af3598424660", "commitAfterChange": "1e8ec5162da128616f5ac9793d199b9f944ca01d", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  int _getOffset (int offset, int movement, boolean forward)", "signatureAfterChange": "  int _getOffset (int offset, int movement, boolean forward)", "diff": ["-\tint[] newOffset = new int[1];", "+\tint newOffset;", "-\t\tOS.ATSUNextCursorPosition(layout, offset, type, newOffset);", "-\t\toffset = newOffset[0];", "-\t\tnewOffset[0] = untranslateOffset(newOffset[0]);", "+\t\toffset = _getNativeOffset(offset, type, forward);", "+\t\tnewOffset = untranslateOffset(offset);", "-\t\t\twhile (newOffset[0] < length && ", "-\t\t\t\t\t(!(!Compatibility.isLetterOrDigit(text.charAt(newOffset[0])) &&", "-\t\t\t\t\tCompatibility.isLetterOrDigit(text.charAt(newOffset[0] - 1))))) {", "-\t\t\t\tOS.ATSUNextCursorPosition(layout, offset, type, newOffset);", "-\t\t\t\toffset = newOffset[0];", "-\t\t\t\tnewOffset[0] = untranslateOffset(newOffset[0]);", "+\t\t\twhile (newOffset < length && ", "+\t\t\t\t\t(!(!Compatibility.isLetterOrDigit(text.charAt(newOffset)) &&", "+\t\t\t\t\tCompatibility.isLetterOrDigit(text.charAt(newOffset - 1))))) {", "+\t\t\t\toffset = _getNativeOffset(offset, type, forward);", "+\t\t\t\tnewOffset = untranslateOffset(offset);", "-\t\t\twhile (newOffset[0] < length && ", "-\t\t\t\t\t(!(Compatibility.isLetterOrDigit(text.charAt(newOffset[0])) &&", "-\t\t\t\t\t!Compatibility.isLetterOrDigit(text.charAt(newOffset[0] - 1))))) {", "-\t\t\t\tOS.ATSUNextCursorPosition(layout, offset, type, newOffset);", "-\t\t\t\toffset = newOffset[0];", "-\t\t\t\tnewOffset[0] = untranslateOffset(newOffset[0]);", "+\t\t\twhile (newOffset < length && ", "+\t\t\t\t\t(!(Compatibility.isLetterOrDigit(text.charAt(newOffset)) &&", "+\t\t\t\t\t!Compatibility.isLetterOrDigit(text.charAt(newOffset - 1))))) {", "+\t\t\t\toffset = _getNativeOffset(offset, type, forward);", "+\t\t\t\tnewOffset = untranslateOffset(offset);", "-\t\tOS.ATSUPreviousCursorPosition(layout, offset, type, newOffset);", "-\t\toffset = newOffset[0];", "-\t\tnewOffset[0] = untranslateOffset(newOffset[0]);", "+\t\toffset = _getNativeOffset(offset, type, forward);", "+\t\tnewOffset = untranslateOffset(offset);", "-\t\t\twhile (newOffset[0] > 0 && ", "-\t\t\t\t\t(!(Compatibility.isLetterOrDigit(text.charAt(newOffset[0])) && ", "-\t\t\t\t\t!Compatibility.isLetterOrDigit(text.charAt(newOffset[0] - 1))))) {", "-\t\t\t\tOS.ATSUPreviousCursorPosition(layout, offset, type, newOffset);", "-\t\t\t\toffset = newOffset[0];", "-\t\t\t\tnewOffset[0] = untranslateOffset(newOffset[0]);", "+\t\t\twhile (newOffset > 0 && ", "+\t\t\t\t\t(!(Compatibility.isLetterOrDigit(text.charAt(newOffset)) && ", "+\t\t\t\t\t!Compatibility.isLetterOrDigit(text.charAt(newOffset - 1))))) {", "+\t\t\t\toffset = _getNativeOffset(offset, type, forward);", "+\t\t\t\tnewOffset = untranslateOffset(offset);", "-\t\t\twhile (newOffset[0] > 0 && ", "-\t\t\t\t\t(!(!Compatibility.isLetterOrDigit(text.charAt(newOffset[0])) && ", "-\t\t\t\t\tCompatibility.isLetterOrDigit(text.charAt(newOffset[0] - 1))))) {", "-\t\t\t\tOS.ATSUPreviousCursorPosition(layout, offset, type, newOffset);", "-\t\t\t\toffset = newOffset[0];", "-\t\t\t\tnewOffset[0] = untranslateOffset(newOffset[0]);", "+\t\t\twhile (newOffset > 0 && ", "+\t\t\t\t\t(!(!Compatibility.isLetterOrDigit(text.charAt(newOffset)) && ", "+\t\t\t\t\tCompatibility.isLetterOrDigit(text.charAt(newOffset - 1))))) {", "+\t\t\t\toffset = _getNativeOffset(offset, type, forward);", "+\t\t\t\tnewOffset = untranslateOffset(offset);", "-\treturn newOffset[0];", "+\treturn newOffset;", "+}"]}], "num": 59926}
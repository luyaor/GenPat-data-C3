{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a71b912a50ef99071dbbd4a8fd4781e6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd4cc0d7e9a2334a4f92f8310319011c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "8e9705d93325d1390b1c14aa0ba55b9649457ef3", "commitAfterChange": "6bc2e4ca5332d0ed9c2e86c21bb2d52348bc9673", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r \r public void setContents(Object[] data, Transfer[] dataTypes)", "signatureAfterChange": "\r \r public void setContents(Object[] data, Transfer[] dataTypes)", "diff": ["-\tif (this.data != null) {\r", "+\tif (onClipboard) {\r", "+\t}\r", "+\tif (onPrimary) {\r", "+\t\tOS.gtk_clipboard_clear(pGtkPrimary);\r", "-\tboolean result = OS.gtk_clipboard_set_with_data(pGtkClipboard, pTargetsList, entries.length, getFunc.getAddress(), clearFunc.getAddress(), 0);\r", "-\r", "+\tonPrimary = OS.gtk_clipboard_set_with_data(pGtkPrimary, pTargetsList, entries.length, getFunc.getAddress(), clearFunc.getAddress(), 0);\r", "+\tonClipboard = OS.gtk_clipboard_set_with_data(pGtkClipboard, pTargetsList, entries.length, getFunc.getAddress(), clearFunc.getAddress(), 0);\r", "+\t\r", "-\tif (!result) DND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);\r", "+\tif (!onClipboard && !onPrimary) DND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0283420db4a5effcf723d2f1af11807f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "2f3a1ca07389c9c53db62232e88be00765759300", "commitAfterChange": "f1ab5535d3d0fa4e1b6459d4151f49a39b2673cc", "methodNumberBeforeChange": 86, "methodNumberAfterChange": 86, "signatureBeforeChange": " void doAutoScroll(int direction, int distance)", "signatureAfterChange": " void doAutoScroll(int direction, int distance)", "diff": ["-\tfinal int TIMER_INTERVAL = 50;", "-\t\t\t\t\tdisplay.timerExec(TIMER_INTERVAL, this);", "+\t\t\t\t\tdisplay.timerExec(V_SCROLL_RATE, this);", "+\t\tautoScrollDirection = direction;", "+\t\tdisplay.timerExec(V_SCROLL_RATE, timer);", "-\t\t\t\t\tdisplay.timerExec(TIMER_INTERVAL, this);", "+\t\t\t\t\tdisplay.timerExec(V_SCROLL_RATE, this);", "+\t\tautoScrollDirection = direction;", "+\t\tdisplay.timerExec(V_SCROLL_RATE, timer);", "-\t\t\t\t\tdisplay.timerExec(TIMER_INTERVAL, this);", "+\t\t\t\t\tdisplay.timerExec(H_SCROLL_RATE, this);", "+\t\tautoScrollDirection = direction;", "+\t\tdisplay.timerExec(H_SCROLL_RATE, timer);", "-\t\t\t\t\tdisplay.timerExec(TIMER_INTERVAL, this);", "+\t\t\t\t\tdisplay.timerExec(H_SCROLL_RATE, this);", "-\t} \t", "-\tif (timer != null) {", "-\t\tdisplay.timerExec(TIMER_INTERVAL, timer);", "+\t\tdisplay.timerExec(H_SCROLL_RATE, timer);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "eab8bedec0c644e2551d3893b372757f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \r protected void release ()", "signatureAfterChange": "\r \r protected void release ()", "diff": ["-\t\r", "-\t/* Release the warning and error callbacks */\r", "-\txtWarningCallback.dispose (); xtWarningCallback = null;\r", "-\txtWarningProc = 0;\r", "-\txErrorCallback.dispose (); xErrorCallback = null;\r", "-\txErrorProc = 0;\r", "-\txtErrorCallback.dispose (); xtErrorCallback = null;\r", "-\txtErrorProc = 0;\r", "-\txIOErrorCallback.dispose (); xIOErrorCallback = null;\r", "-\txIOErrorProc = 0;\r", "+\t", "+\t/* Free the Xt error handler */", "+\tint xtContext = OS.XtDisplayToApplicationContext (xDisplay);", "+\tOS.XtAppSetErrorHandler (xtContext, xtErrorProc);", "+\txtErrorCallback.dispose (); xtErrorCallback = null;", "+\txtNullErrorProc = xtErrorProc = 0;", "+\t", "+\t/* Free the Xt Warning handler */", "+\tOS.XtAppSetWarningHandler (xtContext, xtWarningProc);", "+\txtWarningCallback.dispose (); xtWarningCallback = null;", "+\txtNullWarningProc = xtWarningProc = 0;", "+\t", "+\t/* Free the X IO error handler */", "+\tOS.XSetIOErrorHandler (xIOErrorProc);", "+\txIOErrorCallback.dispose (); xIOErrorCallback = null;", "+\txNullIOErrorProc = xIOErrorProc = 0;", "+\t", "+\t/* Free the X error handler */", "+\t/*", "+\t* Bug in Motif.  For some reason, when a pixmap is", "+\t* set into a button or label, despite the fact that", "+\t* the pixmap is cleared from the widget before it", "+\t* is disposed, Motif still references the pixmap", "+\t* and attempts to dispose it in XtDestroyApplicationContext().", "+\t* The fix is to install the null error handler to avoid the", "+\t* warning.", "+\t*", "+\t* NOTE: The warning callback is leaked.", "+\t*/", "+\tOS.XSetErrorHandler (xNullErrorProc);", "+//\tOS.XSetErrorHandler (xErrorProc);", "+//\txErrorCallback.dispose (); xErrorCallback = null;", "+//\txNullErrorProc = xErrorProc = 0;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f6938f11aed9946503b092b9e209c3f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "72353ac7f94b26380383764a3b22b9ce8d44a91e", "commitAfterChange": "5b05aa6f4689e570a02934dff54fc1aa76a4eafb", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 35, "signatureBeforeChange": "  int processSelection (int int0, int int1, int int2)", "signatureAfterChange": "  int processSelection (int int0, int int1, int int2)", "diff": ["-\tif ((style & SWT.SINGLE) != 0) {", "-\t\tselected = true;", "-\t\tif (mouseDown) return 0;", "-\t}", "+\tint ptr = OS.gtk_get_current_event ();", "+\tif (ptr != 0) {", "+\t\tGdkEvent gdkEvent = new GdkEvent ();", "+\t\tOS.memmove (gdkEvent, ptr, GdkEvent.sizeof);", "+\t\tOS.gdk_event_free (ptr);", "+\t\t/*", "+\t\t* Feature in GTK.  When a leaf node is double clicked, the", "+\t\t* GtkCTree issues two tree_row_select signals.  Non-leaf", "+\t\t* nodes only get one tree_row_select.  Avoid issueing", "+\t\t* a selection event for the double clicked leaf node.", "+\t\t*/ ", "+\t\tif (gdkEvent.type == OS.GDK_2BUTTON_PRESS) return 0;", "+\t}"]}], "num": 295}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2734db714451308f71c42324447288ae", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "90ec278c783b23a31186f9dd2ea48c5e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 345, "methodNumberAfterChange": 202, "signatureBeforeChange": " void handleTextChanging(TextChangingEvent event)", "signatureAfterChange": " void handleTextChanging(TextChangingEvent event)", "diff": ["-\tint firstLine;\t", "-\tint textChangeY;", "-\tboolean isMultiLineChange = event.replaceLineCount > 0 || event.newLineCount > 0;", "-\t\t\t", "-\tlastTextChangeReplaceCharCount = event.replaceCharCount;", "-\tfirstLine = content.getLineAtOffset(event.start);", "-\ttextChangeY = firstLine * lineHeight - verticalScrollOffset + topMargin;", "-\tif (isMultiLineChange) {", "-\t\tredrawMultiLineChange(textChangeY, event.newLineCount, event.replaceLineCount);", "+\tlastTextChangeReplaceCharCount = event.replaceCharCount;\t", "+\tint lineIndex = content.getLineAtOffset(event.start);", "+\tint srcY = getLinePixel(lineIndex + event.replaceLineCount + 1);", "+\tint destY = getLinePixel(lineIndex + 1) + event.newLineCount * renderer.getLineHeight();", "+\tlastLineBottom = destY;", "+\tif (destY != srcY) {", "+\t\t//TODO fails if margin != 0", "+\t\tscroll(0, destY, 0, srcY, clientAreaWidth, clientAreaHeight, true);", "-\t// notify default line styler about text change", "-\tif (defaultLineStyler != null) {", "-\t\tdefaultLineStyler.textChanging(event);", "-\t}", "+", "+\trenderer.textChanging(event);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "db6f1b5c4a9080a15e275ace4ebb67f6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "1de7fc63d1a523fc6f82771c56fef441ef8f53ff", "commitAfterChange": "9436ba8c70990a20c9c536ae28590998077447e8", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 70, "signatureBeforeChange": " public Point map (Control from, Control to, int x, int y)", "signatureAfterChange": " public Point map (Control from, Control to, int x, int y)", "diff": ["+\tint newX, newY;", "-\t\tint newPoint = OS.UIElement_TranslatePoint(from.topHandle (), point, to.topHandle ());", "-\t\tPoint result = new Point ((int)OS.Point_X (newPoint), (int)OS.Point_Y (newPoint));", "+\t\tint newPoint = OS.UIElement_TranslatePoint (from.topHandle (), point, to.topHandle ());", "+\t\tnewX = (int) (OS.Point_X (newPoint) + 0.5);", "+\t\tnewY = (int) (OS.Point_Y (newPoint) + 0.5);", "-\t\treturn result;", "-\t\t\tPoint result = new Point ((int)OS.Point_X (newPoint), (int)OS.Point_Y (newPoint));", "+\t\t\tnewX = (int) (OS.Point_X (newPoint) + 0.5);", "+\t\t\tnewY = (int) (OS.Point_Y (newPoint) + 0.5);", "-\t\t\treturn result;", "-\t\t\tPoint result = new Point ((int)OS.Point_X (newPoint) + shellLocation.x, (int)OS.Point_Y (newPoint) + shellLocation.y);", "+\t\t\tnewX = (int) (OS.Point_X (newPoint) + 0.5) + shellLocation.x;", "+\t\t\tnewY = (int) (OS.Point_Y (newPoint) + 0.5) + shellLocation.y;", "-\t\t\treturn result;", "+\treturn new Point (newX, newY);"]}], "num": 19096}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b2923e18ef619cac6e1fd6df3758d97f", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa6ec6da61dcda77d06973d363c21487", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "25a820b9c61bce768cba2e9e95ac223905930030", "commitAfterChange": "722bc94f4f7e83a70c3470a84d80e9545657ad49", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  void hookDOMListeners(OleAutomation webBrowser, final boolean isTop)", "signatureAfterChange": "  void hookDOMListeners(OleAutomation webBrowser, final boolean isTop)", "diff": ["-\tint[] rgdispid = webBrowser.getIDsOfNames(new String[] { PROPERTY_DOCUMENT });", "+\t/*", "+\t* DOM listeners are only applicable when HTML content is shown.", "+\t* HTML documents always answer the Type property, so failure to get", "+\t* this value indicates that some other content type is being shown.", "+\t*/", "+\tint[] rgdispid = webBrowser.getIDsOfNames(new String[] { PROPERTY_TYPE });", "+\tif (rgdispid == null) {", "+\t\treturn;", "+\t}", "+\tif (pVarResult == null || pVarResult.getType() != COM.VT_BSTR) {", "+\t\tif (pVarResult != null) pVarResult.dispose ();", "+\t\treturn;", "+\t}", "+\tString type = pVarResult.getString();", "+\tpVarResult.dispose();", "+\tif (!type.equals(HTML_DOCUMENT)) return;", "+", "+\trgdispid = webBrowser.getIDsOfNames(new String[] { PROPERTY_DOCUMENT });", "+\tdispIdMember = rgdispid[0];", "+\tpVarResult = webBrowser.getProperty(dispIdMember);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d07689f9704c5d51bee7d56adb664839", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "179e1e8feb58af613b2d9e2d8a1b0f959cbc3d62", "commitAfterChange": "67f57a1503dff18128d85f6be9ce1151c584d527", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void dispose ()", "signatureAfterChange": " public void dispose ()", "diff": ["+\tint index = getIndex ();", "+\tint orderIndex = getOrderIndex ();", "+", "+\t/* ", "+\t * If column 0 was disposed and if the parent has style CHECK then", "+\t * the new column 0 will change, so explicitly redraw it if it appears to", "+\t * the left of the disposed column in the column order.", "+\t */", "+\tif ((parent.style & SWT.CHECK) != 0 && index == 0) {", "+\t\tif (parent.columns.length > 0) {", "+\t\t\tTableColumn newColumn0 = parent.columns [0];", "+\t\t\tif (newColumn0.getOrderIndex () < orderIndex) {", "+\t\t\t\tparent.redraw (newColumn0.getX (), 0, newColumn0.width, parentBounds.height, false);", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3d9f2c83d95cfde01a7248552fd95bc4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "22ebc0bfda7d51c576a69d9ad65b1367c74fe002", "commitAfterChange": "b024555b7be59ed9c69f2568310cc99cd0b6720a", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 87, "signatureBeforeChange": "  LRESULT WM_CHAR (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_CHAR (int wParam, int lParam)", "diff": ["+\t\tcase ' ':", "+\t\t\tif ((style & SWT.CHECK) != 0) {", "+\t\t\t\tint index = OS.SendMessage (handle, OS.LVM_GETNEXTITEM, -1, OS.LVNI_FOCUSED);", "+\t\t\t\tif (index != -1) {", "+\t\t\t\t\tTableItem item = _getItem (index);", "+\t\t\t\t\titem.setChecked (!item.getChecked (), true);", "+\t\t\t\t\tif (!OS.IsWinCE) {", "+\t\t\t\t\t\tOS.NotifyWinEvent (OS.EVENT_OBJECT_FOCUS, handle, OS.OBJID_CLIENT, index + 1);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t/*", "+\t\t\t* NOTE: Call the window proc with WM_KEYDOWN rather than WM_CHAR", "+\t\t\t* so that the key that was ignored during WM_KEYDOWN is processed.", "+\t\t\t* This allows the application to cancel an operation that is normally", "+\t\t\t* performed in WM_KEYDOWN from WM_CHAR.", "+\t\t\t*/", "+\t\t\tint code = callWindowProc (handle, OS.WM_KEYDOWN, wParam, lParam);", "+\t\t\treturn new LRESULT (code);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5d8bef4760275cb16dbf7ca663f45fc9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "38e14978feed859fa6428af4d14fcc467662d294", "commitAfterChange": "5d8726bcb8a72d394af3ce603770c8bf01b35d5d", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "  LRESULT WM_LBUTTONDBLCLK (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDBLCLK (int wParam, int lParam)", "diff": ["+\tmouseDown = true;", "+", "-\tOS.SendMessage (handle, OS.LVM_HITTEST, 0, pinfo);", "+\tint index = OS.SendMessage (handle, OS.LVM_HITTEST, 0, pinfo);", "+\t", "+\t/* Look for check/uncheck */", "+\tif ((style & SWT.CHECK) != 0) {", "+\t\t/*", "+\t\t* Note that when the table has LVS_EX_FULLROWSELECT and the", "+\t\t* user clicks anywhere on a row except on the check box, all", "+\t\t* of the bits are set.  The hit test flags are LVHT_ONITEM.", "+\t\t* This means that a bit test for LVHT_ONITEMSTATEICON is not", "+\t\t* the correct way to determine that the user has selected", "+\t\t* the check box, equality is needed.", "+\t\t*/", "+\t\tif (index != -1 && pinfo.flags == OS.LVHT_ONITEMSTATEICON) {", "+\t\t\tTableItem item = _getItem (index);", "+\t\t\titem.setChecked (!item.getChecked (), true);", "+\t\t\tif (!OS.IsWinCE) {", "+\t\t\t\tOS.NotifyWinEvent (OS.EVENT_OBJECT_FOCUS, handle, OS.OBJID_CLIENT, index + 1);", "+\t\t\t}", "+\t\t}\t", "+\t}"]}], "num": 275}
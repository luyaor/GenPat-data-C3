{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6054fc41554ddde6873dd753b684ddd9", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "48cabd3cd7643d03d82420d3ea009d46", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "5effc044f976762677e99b14128beb4e0e04fc60", "commitAfterChange": "31b4b463392e79c0f4e147e6b2405f1815c890a5", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "\r \r public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tboolean redraw = drawCount == 0 && OS.IsWindowVisible (handle);\r", "-\tif (redraw) {\r", "-\t\tOS.UpdateWindow (handle);\r", "-\t\t/*\r", "-\t\t* This line is intentionally commented.\r", "-\t\t*/\r", "-//\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 0, 0);\r", "-\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);\r", "-\t}\r", "-\tif (redraw) {\r", "-\t\t/*\r", "-\t\t* This line is intentionally commented.\r", "-\t\t*/\r", "-//\t\tOS.SendMessage (handle, OS.WM_SETREDRAW, 1, 0);\r", "-\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);\r", "-\t\tif (OS.IsWinCE) {\r", "-\t\t\tOS.InvalidateRect (handle, null, false);\r", "-\t\t\tOS.UpdateWindow (handle);\r", "-\t\t} else {\r", "-\t\t\tint uFlags = OS.RDW_INVALIDATE | OS.RDW_UPDATENOW;\r", "-\t\t\tOS.RedrawWindow (handle, null, 0, uFlags);\r", "-\t\t}\r", "-\t}\r", "-\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fa603e917a9881ca3bfac869cc8e0ca2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "e36b8bd87f3c0cb0244bfa422034d4e8a40488f5", "commitAfterChange": "66a1a42306555d1bc99e8fa27a27656a65ca8332", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 106, "signatureBeforeChange": "  boolean setScrollWidth (TableItem item, boolean force)", "signatureAfterChange": "  boolean setScrollWidth (TableItem item, boolean force)", "diff": ["+", "-\t\t\t/*", "-\t\t\t* Feature in Windows.  When LVM_SETCOLUMNWIDTH is sent,", "-\t\t\t* Windows draws right away instead of queuing a WM_PAINT.", "-\t\t\t* This can cause recursive calls when called from paint", "-\t\t\t* or from messages that are retrieving the item data,", "-\t\t\t* such as WM_NOTIFY, causing a stack overflow.  The fix", "-\t\t\t* is to turn off redraw and queue a repaint, collapsing", "-\t\t\t* the recursive calls.", "-\t\t\t*/", "-\t\t\tboolean redraw = drawCount == 0 && OS.IsWindowVisible (handle);", "-\t\t\tif (redraw) OS.DefWindowProc (handle, OS.WM_SETREDRAW, 0, 0);", "-\t\t\tOS.SendMessage (handle, OS.LVM_SETCOLUMNWIDTH, 0, newWidth);", "-\t\t\tif (redraw) {", "-\t\t\t\tOS.DefWindowProc (handle, OS.WM_SETREDRAW, 1, 0);", "-\t\t\t\tif (OS.IsWinCE) {", "-\t\t\t\t\tint /*long*/ hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);\t", "-\t\t\t\t\tif (hwndHeader != 0) OS.InvalidateRect (hwndHeader, null, true);", "-\t\t\t\t\tOS.InvalidateRect (handle, null, true);", "-\t\t\t\t} else {", "-\t\t\t\t\tint flags = OS.RDW_ERASE | OS.RDW_FRAME | OS.RDW_INVALIDATE | OS.RDW_ALLCHILDREN;", "-\t\t\t\t\tOS.RedrawWindow (handle, null, 0, flags);", "-\t\t\t\t}", "-\t\t\t}", "+\t\t\tsetScrollWidth (newWidth);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b76bd7407d2abd825a18a7a38f874154", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "616faf05f2a514ae7f7583f4e4ca3f89f0f62d2b", "commitAfterChange": "3ec43f59725e5a292e734c2cffa19b065c1aeca8", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " public void setMaximized (boolean maximized)", "signatureAfterChange": " public void setMaximized (boolean maximized)", "diff": ["-\t\t* PocketPC windows typically don't have a caption when they are", "-\t\t* maximized. They usually have one when they are not occupying all the", "-\t\t* space. We implement this behavior by default - it can be overriden by", "-\t\t* setting SWT.TITLE or SWT.NO_TRIM.", "-\t\t\tif ((style & SWT.TITLE) == 0) {", "-\t\t\t\t/* Remove caption when maximized */", "-\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-\t\t\t\tbits &= ~OS.WS_CAPTION;", "-\t\t\t\tOS.SetWindowLong (handle, OS.GWL_STYLE, bits);", "-\t\t\t}", "-\t\t} else {", "-\t\t\tif ((style & SWT.NO_TRIM) == 0) {", "-\t\t\t\t/* Insert caption when no longer maximized */", "-\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-\t\t\t\tbits |= OS.WS_CAPTION;", "-\t\t\t\tOS.SetWindowLong (handle, OS.GWL_STYLE, bits);", "-\t\t\t\tint flags = OS.SWP_NOMOVE | OS.SWP_NOSIZE | OS.SWP_NOZORDER | OS.SWP_DRAWFRAME;", "-\t\t\t\tSetWindowPos (handle, 0, 0, 0, 0, 0, flags);", "-\t\t\t}"]}], "num": 52204}
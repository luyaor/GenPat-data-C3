{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "03ba674275b6b78807a21e8cb699d916", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3df1083e8521943a6e9f36a0ae8f8e69", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "8841c5caa3b3a55d6ebb2d5b6185e82da15c6e24", "commitAfterChange": "6325d1928c5c2081ee30ae8228f5edad1e98ca0b", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " public void setMaximized (boolean maximized)", "signatureAfterChange": " public void setMaximized (boolean maximized)", "diff": ["-\tint[] type = new int[1], format = new int[1], nitems = new int[1], bytes_after = new int[1], atomsPtr = new int[1];", "-\tOS.XGetWindowProperty (xDisplay, xWindow, property, 0, Integer.MAX_VALUE, false, OS.XA_ATOM, type, format, nitems, bytes_after, atomsPtr);", "-\tif (type [0] == OS.None) return;", "-\tint[] atoms = new int [nitems [0]];", "-\tOS.memmove (atoms, atomsPtr [0], nitems [0] * 4);", "-\t", "-\tif (maximized) {", "-\t\tboolean hasHmax = false;", "-\t\tboolean hasVmax = false;", "-\t\tfor (int i = 0; i < nitems [0]; i++) {", "-\t\t\tint atom = atoms [i];", "-\t\t\tif (atom == hMaxAtom) hasHmax = true;", "-\t\t\tif (atom == vMaxAtom) hasVmax = true;", "-\t\t}", "-\t\tif (!hasHmax) {", "-\t\t\tint[] temp = new int [atoms.length + 1];", "-\t\t\tSystem.arraycopy (atoms, 0, temp, 0, atoms.length);", "-\t\t\ttemp [atoms.length] = hMaxAtom;", "-\t\t\tatoms = temp;", "-\t\t}", "-\t\tif (!hasVmax) {", "-\t\t\tint[] temp = new int [atoms.length + 1];", "-\t\t\tSystem.arraycopy (atoms, 0, temp, 0, atoms.length);", "-\t\t\ttemp [atoms.length] = vMaxAtom;", "-\t\t\tatoms = temp;", "-\t\t}", "-\t} else {", "-\t\tint[] temp = new int [nitems [0]];", "-\t\tint index = 0;", "-\t\tfor (int i = 0; i < nitems [0]; i++) {", "-\t\t\tint atom = atoms [i];", "-\t\t\tif (atom != hMaxAtom && atom != vMaxAtom) {", "-\t\t\t\ttemp [index++] = atom;", "-\t\t\t}", "-\t\t}", "-\t\tatoms = new int [index];", "-\t\tSystem.arraycopy (temp, 0, atoms, 0, index);", "-\t}", "-", "-\tOS.XChangeProperty (xDisplay, xWindow, property, OS.XA_ATOM, 32, OS.PropModeReplace, atoms, atoms.length);", "+\tXClientMessageEvent xEvent = new XClientMessageEvent ();", "+\txEvent.type = OS.ClientMessage;", "+\txEvent.send_event = 1;", "+\txEvent.display = xDisplay;", "+\txEvent.window = xWindow;", "+\txEvent.message_type = property;", "+\txEvent.format = 32;", "+\txEvent.data [0] = maximized ? 1 : 0;", "+\txEvent.data [1] = hMaxAtom;", "+\txEvent.data [2] = vMaxAtom;", "+\tXWindowAttributes attributes = new XWindowAttributes ();", "+\tOS.XGetWindowAttributes (xDisplay, xWindow, attributes);", "+\tint rootWindow = OS.XRootWindowOfScreen (attributes.screen);", "+\tint event = OS.XtMalloc (XEvent.sizeof);", "+\tOS.memmove (event, xEvent, XClientMessageEvent.sizeof);", "+\tOS.XSendEvent (xDisplay, rootWindow, false, OS.SubstructureRedirectMask|OS.SubstructureNotifyMask, event);", "+\tOS.XSync (xDisplay, false);", "+\tOS.XtFree (event);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1eb61e309be50f3e9990278534d48752", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "6c4a2c166738e67832efca98869d4a51c06db92b", "commitAfterChange": "84d56fe220646f29848300da6bc168504ddc3a77", "methodNumberBeforeChange": 36, "methodNumberAfterChange": 5, "signatureBeforeChange": "  int processEvent (int eventNumber, int int0, int int1, int int2)", "signatureAfterChange": "  int _createColumnHandle(int index)", "diff": ["+int _createColumnHandle(int index) {", "+\tint columnHandle = OS.gtk_tree_view_column_new();", "+\tif (columnHandle == 0) error(SWT.ERROR_NO_HANDLES);", "+\tint renderer;", "+\trenderer = OS.gtk_cell_renderer_text_new();", "+\tif (renderer == 0) error(SWT.ERROR_NO_HANDLES);", "+\tOS.gtk_tree_view_column_pack_end(columnHandle, renderer, true);", "+\tOS.gtk_tree_view_column_add_attribute(columnHandle, renderer, \"text\", index);", "+\tOS.gtk_tree_view_column_add_attribute(columnHandle, renderer, \"foreground-gdk\", 2*MAX_COLUMNS+1);", "+\tOS.gtk_tree_view_column_add_attribute(columnHandle, renderer, \"background-gdk\", 2*MAX_COLUMNS+2);", "+\trenderer = OS.gtk_cell_renderer_pixbuf_new();", "+\tif (renderer == 0) error(SWT.ERROR_NO_HANDLES);", "+\tOS.gtk_tree_view_column_pack_end(columnHandle, renderer, false);", "+\tOS.gtk_tree_view_column_add_attribute(columnHandle, renderer, \"pixbuf\", index+MAX_COLUMNS);", "+\tif ((style & SWT.CHECK) != 0 && (index==0)) {", "+\t\trenderer = OS.gtk_cell_renderer_toggle_new();", "+\t\tif (renderer == 0) error(SWT.ERROR_NO_HANDLES);", "+\t\tOS.gtk_tree_view_column_pack_end(columnHandle, renderer, false);", "+\t\tOS.gtk_tree_view_column_add_attribute(columnHandle, renderer, \"active\", 2*MAX_COLUMNS);", "+\t\tOS.g_signal_connect(renderer, OS.toggled, getDisplay().toggleProc, columnHandle);", "+\tOS.gtk_tree_view_column_set_resizable(columnHandle, true);", "+\treturn columnHandle;", "-int processEvent (int eventNumber, int int0, int int1, int int2) {", "-\tif (eventNumber == 0) {", "-\t\tGdkEvent gdkEvent = new GdkEvent ();", "-\t\tOS.memmove (gdkEvent, int0, GdkEvent.sizeof);", "-\t\tswitch (gdkEvent.type) {", "-\t\t\tcase OS.GDK_BUTTON_PRESS:", "-\t\t\tcase OS.GDK_2BUTTON_PRESS: {", "-\t\t\t\tOS.GTK_CLIST_RESYNC_SELECTION (handle);", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.GDK_BUTTON_RELEASE: {", "-\t\t\t\t/*", "-\t\t\t\t* Feature in GTK.  When an item is reselected, GTK", "-\t\t\t\t* does not issue notification.  The fix is to detect", "-\t\t\t\t* that the mouse was released over a selected item when", "-\t\t\t\t* no selection signal was set and issue a fake selection", "-\t\t\t\t* event.", "-\t\t\t\t*/", "-\t\t\t\tif ((style & SWT.MULTI) != 0) {", "-\t\t\t\t\tif (selected) {", "-\t\t\t\t\t\tdouble[] px = new double [1], py = new double [1];", "-\t\t\t\t\t\tOS.gdk_event_get_coords (int0, px, py);", "-\t\t\t\t\t\tint x = (int) (px[0]), y = (int) (py[0]);", "-\t\t\t\t\t\tint [] row = new int [1], column = new int [1];", "-\t\t\t\t\t\tif (OS.gtk_clist_get_selection_info (handle, x, y, row, column) != 0) {", "-\t\t\t\t\t\t\tint list = OS.GTK_CLIST_SELECTION (handle);", "-\t\t\t\t\t\t\tif (list != 0) {", "-\t\t\t\t\t\t\t\tint length = OS.g_list_length (list);", "-\t\t\t\t\t\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\t\t\t\t\tif (row [0] == OS.g_list_nth_data (list, i)) {", "-\t\t\t\t\t\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\t\t\t\t\t\tevent.item = items [row [0]];", "-\t\t\t\t\t\t\t\t\t\tpostEvent (SWT.Selection, event);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tselected = false;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.GDK_FOCUS_CHANGE: {", "-\t\t\t\t/*", "-\t\t\t\t* Bug in GTK.  When an application opens a new modal top level", "-\t\t\t\t* shell from inside the \"select_row\" signal, the GtkCList does not get the", "-\t\t\t\t* mouse up and does not release grabs.  The fix is to release the grabs", "-\t\t\t\t* when focus is lost.", "-\t\t\t\t*/", "-\t\t\t\tGdkEventFocus focusEvent = new GdkEventFocus ();", "-\t\t\t\tOS.memmove (focusEvent, int0, GdkEventFocus.sizeof);", "-\t\t\t\tif (focusEvent.in == 0) {", "-\t\t\t\t\tif (OS.gtk_grab_get_current () == handle) {", "-\t\t\t\t\t\tOS.gtk_grab_remove (handle);", "-\t\t\t\t\t\tOS.gdk_pointer_ungrab (OS.GDK_CURRENT_TIME);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\treturn 1;", "-\t}", "-\treturn super.processEvent (eventNumber, int0, int1, int2);", "-}"]}], "num": 40191}
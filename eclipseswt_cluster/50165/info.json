{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "344dcbd1b8069da8e523b5c10381bd4d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f9c010dbe3ae7b568b7d2951b143abf0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Cursor.java", "commitBeforeChange": "a874d09ce1b9202d361140d1809b43597a568a0c", "commitAfterChange": "d0069d7ed7376b10efa426e883f2b4851a6c7c22", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  long createCursor(byte[] sourceData, byte[] maskData, int width, int height, int hotspotX, int hotspotY, boolean reverse)", "signatureAfterChange": "  long createCursor(byte[] sourceData, byte[] maskData, int width, int height, int hotspotX, int hotspotY, boolean reverse)", "diff": ["+\tif (OS.GTK_VERSION >= OS.VERSION(3, 0, 0)) {", "+\t\tfor (int i = 0; i < sourceData.length; i++) {", "+\t\t\tbyte s = sourceData[i];", "+\t\t\tsourceData[i] = (byte)(((s & 0x80) >> 7) |", "+\t\t\t\t((s & 0x40) >> 5) |", "+\t\t\t\t((s & 0x20) >> 3) |", "+\t\t\t\t((s & 0x10) >> 1) |", "+\t\t\t\t((s & 0x08) << 1) |", "+\t\t\t\t((s & 0x04) << 3) |", "+\t\t\t\t((s & 0x02) << 5) |", "+\t\t\t\t((s & 0x01) << 7));", "+\t\t\tsourceData[i] = (byte) ~sourceData[i];", "+\t\t}", "+\t\tfor (int i = 0; i < maskData.length; i++) {", "+\t\t\tbyte s = maskData[i];", "+\t\t\tmaskData[i] = (byte)(((s & 0x80) >> 7) |", "+\t\t\t\t((s & 0x40) >> 5) |", "+\t\t\t\t((s & 0x20) >> 3) |", "+\t\t\t\t((s & 0x10) >> 1) |", "+\t\t\t\t((s & 0x08) << 1) |", "+\t\t\t\t((s & 0x04) << 3) |", "+\t\t\t\t((s & 0x02) << 5) |", "+\t\t\t\t((s & 0x01) << 7));", "+\t\t\tmaskData[i] = (byte) ~maskData[i];", "+\t\t}", "+\t\tPaletteData palette = new PaletteData(new RGB[]{new RGB(0, 0, 0), new RGB(255, 255, 255)});", "+\t\tImageData source = new ImageData(width, height, 1, palette, 1, sourceData);", "+\t\tImageData mask = new ImageData(width, height, 1, palette, 1, maskData);", "+\t\tbyte[] data = new byte[source.width * source.height * 4];", "+\t\tfor (int y = 0; y < source.height; y++) {", "+\t\t\tint offset = y * source.width * 4;", "+\t\t\tfor (int x = 0; x < source.width; x++) {", "+\t\t\t\tint pixel = source.getPixel(x, y);", "+\t\t\t\tint maskPixel = mask.getPixel(x, y);", "+\t\t\t\tif (pixel == 0 && maskPixel == 0) {", "+\t\t\t\t\t// BLACK", "+\t\t\t\t\tdata[offset+3] = (byte)0xFF;", "+\t\t\t\t} else if (pixel == 0 && maskPixel == 1) {", "+\t\t\t\t\t// WHITE - cursor color", "+\t\t\t\t\tdata[offset] = data[offset + 1] = data[offset + 2] = data[offset + 3] = (byte)0xFF;", "+\t\t\t\t} else if (pixel == 1 && maskPixel == 0) {", "+\t\t\t\t\t// SCREEN", "+\t\t\t\t} else {", "+\t\t\t\t\t/* no support */", "+\t\t\t\t\t// REVERSE SCREEN -> SCREEN", "+\t\t\t\t}", "+\t\t\t\toffset += 4;", "+\t\t\t}", "+\t\t}", "+\t\tlong /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, width, height);", "+\t\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "+\t\tlong /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "+\t\tOS.memmove(pixels, data, stride * height);", "+\t\tlong /*int*/ cursor = OS.gdk_cursor_new_from_pixbuf(OS.gdk_display_get_default(), pixbuf, hotspotX, hotspotY);", "+\t\tOS.g_object_unref(pixbuf);", "+\t\treturn cursor;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "771577b59d10fb155447eb77492740d8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "e1ea4ea930c303d7a66cc1c333c813723dbd0917", "commitAfterChange": "07eff1b74b49b8400fef10ab67f94111fd65d9d4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  int createGdipImage()", "signatureAfterChange": "  int[] createGdipImage()", "diff": ["-int createGdipImage() {", "+int[] createGdipImage() {", "-\t\tcase SWT.BITMAP: return Gdip.Bitmap_new(handle, 0);", "-\t\tcase SWT.ICON: return Gdip.Bitmap_new(handle);", "+\t\tcase SWT.BITMAP: {", "+\t\t\tif (alpha != -1 || alphaData != null || transparentPixel != -1) {", "+\t\t\t\tBITMAP bm = new BITMAP();", "+\t\t\t\tOS.GetObject(handle, BITMAP.sizeof, bm);", "+\t\t\t\tint imgWidth = bm.bmWidth;", "+\t\t\t\tint imgHeight = bm.bmHeight;", "+\t\t\t\tint hDC = device.internal_new_GC(null);", "+\t\t\t\tint srcHdc = OS.CreateCompatibleDC(hDC);", "+\t\t\t\tint oldSrcBitmap = OS.SelectObject(srcHdc, handle);", "+\t\t\t\tint memHdc = OS.CreateCompatibleDC(hDC);", "+\t\t\t\tint memDib = createDIB(imgWidth, imgHeight, 32);", "+\t\t\t\tif (memDib == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tint oldMemBitmap = OS.SelectObject(memHdc, memDib);\t", "+\t\t\t\tBITMAP dibBM = new BITMAP();", "+\t\t\t\tOS.GetObject(memDib, BITMAP.sizeof, dibBM);", "+\t\t\t\tint sizeInBytes = dibBM.bmWidthBytes * dibBM.bmHeight;\t", "+\t\t\t \tOS.BitBlt(memHdc, 0, 0, imgWidth, imgHeight, srcHdc, 0, 0, OS.SRCCOPY);", "+\t\t\t \tbyte red = 0, green = 0, blue = 0;", "+\t\t\t \tif (transparentPixel != -1) {", "+\t\t\t\t\tif (bm.bmBitsPixel <= 8)  {", "+\t\t\t\t\t\tbyte[] color = new byte[4];", "+\t\t\t\t\t\tOS.GetDIBColorTable(srcHdc, transparentPixel, 1, color);", "+\t\t\t\t\t\tblue = color[0];", "+\t\t\t\t\t\tgreen = color[1];", "+\t\t\t\t\t\tred = color[2];", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tswitch (bm.bmBitsPixel) {", "+\t\t\t\t\t\t\tcase 16:", "+\t\t\t\t\t\t\t\tblue = (byte)((transparentPixel & 0x1F) << 3);", "+\t\t\t\t\t\t\t\tgreen = (byte)((transparentPixel & 0x3E0) >> 2);", "+\t\t\t\t\t\t\t\tred = (byte)((transparentPixel & 0x7C00) >> 7);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 24:", "+\t\t\t\t\t\t\t\tblue = (byte)((transparentPixel & 0xFF0000) >> 16);", "+\t\t\t\t\t\t\t\tgreen = (byte)((transparentPixel & 0xFF00) >> 8);", "+\t\t\t\t\t\t\t\tred = (byte)(transparentPixel & 0xFF);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase 32:", "+\t\t\t\t\t\t\t\tblue = (byte)((transparentPixel & 0xFF000000) >>> 24);", "+\t\t\t\t\t\t\t\tgreen = (byte)((transparentPixel & 0xFF0000) >> 16);", "+\t\t\t\t\t\t\t\tred = (byte)((transparentPixel & 0xFF00) >> 8);", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t \t}", "+\t\t\t\tOS.SelectObject(srcHdc, oldSrcBitmap);", "+\t\t\t\tOS.SelectObject(memHdc, oldMemBitmap);", "+\t\t\t\tOS.DeleteObject(srcHdc);", "+\t\t\t\tOS.DeleteObject(memHdc);", "+\t\t\t \tbyte[] srcData = new byte[sizeInBytes];", "+\t\t\t\tOS.MoveMemory(srcData, dibBM.bmBits, sizeInBytes);", "+\t\t\t\tOS.DeleteObject(memDib);", "+\t\t\t\tdevice.internal_dispose_GC(hDC, null);", "+\t\t\t\tif (alpha != -1) {", "+\t\t\t\t\tfor (int y = 0, dp = 0; y < imgHeight; ++y) {", "+\t\t\t\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "+\t\t\t\t\t\t\tsrcData[dp + 3] = (byte)alpha;", "+\t\t\t\t\t\t\tdp += 4;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else if (alphaData != null) {", "+\t\t\t\t\tfor (int y = 0, dp = 0, ap = 0; y < imgHeight; ++y) {", "+\t\t\t\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "+\t\t\t\t\t\t\tsrcData[dp + 3] = alphaData[ap++];", "+\t\t\t\t\t\t\tdp += 4;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t} else if (transparentPixel != -1) {", "+\t\t\t\t\tfor (int y = 0, dp = 0; y < imgHeight; ++y) {", "+\t\t\t\t\t\tfor (int x = 0; x < imgWidth; ++x) {", "+\t\t\t\t\t\t\tif (srcData[dp] == blue && srcData[dp + 1] == green && srcData[dp + 2] == red) {", "+\t\t\t\t\t\t\t\tsrcData[dp + 3] = (byte)0;", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tsrcData[dp + 3] = (byte)0xFF;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tdp += 4;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tint hHeap = OS.GetProcessHeap();", "+\t\t\t\tint pixels = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, srcData.length);", "+\t\t\t\tOS.MoveMemory(pixels, srcData, sizeInBytes);", "+\t\t\t\treturn new int[]{Gdip.Bitmap_new(imgWidth, imgHeight, dibBM.bmWidthBytes, Gdip.PixelFormat32bppARGB, pixels), pixels};", "+\t\t\t}", "+\t\t\treturn new int[]{Gdip.Bitmap_new(handle, 0), 0};", "+\t\t}", "+\t\tcase SWT.ICON: return new int[]{Gdip.Bitmap_new(handle), 0};", "-\treturn 0;", "+\treturn null;"]}], "num": 50165}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d25afe2b6e1d40d6f54ef24cd0e5b140", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ce4c6fae0ff201bc211d609203a2529", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "9e3f807fbbd6bd940cb111f4c11c72e3b56a7027", "commitAfterChange": "eea9e8bab69f49c92599549df81708cadf055d28", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t// NEEDS WORK", "-\tint width = 100, height = 21;", "+\tint width = 0, height = 0;", "+\tint [] currentPort = new int [1];", "+\tshort themeFont = (short) OS.kThemeSystemFont;", "+\tif (font != null) {", "+\t\tthemeFont = OS.kThemeCurrentPortFont;", "+\t\tOS.GetPort (currentPort);", "+\t\tOS.SetPortWindowPort (OS.GetControlOwner (handle));", "+\t\tOS.TextFont (font.id);", "+\t\tOS.TextFace (font.style);", "+\t\tOS.TextSize (font.size);", "+\t}", "+\torg.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point ();", "-\t\torg.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point ();", "-\t\tif (font == null) {", "-\t\t\tOS.GetThemeTextDimensions (ptr [0], (short)OS.kThemeSystemFont, OS.kThemeStateActive, false, ioBounds, null);", "-\t\t} else {", "-\t\t\tint [] currentPort = new int [1];", "-\t\t\tOS.GetPort (currentPort);", "-\t\t\tOS.SetPortWindowPort (OS.GetControlOwner (handle));", "-\t\t\tOS.TextFont (font.id);", "-\t\t\tOS.TextFace (font.style);", "-\t\t\tOS.TextSize (font.size);", "-\t\t\tOS.GetThemeTextDimensions (ptr [0], (short) OS.kThemeCurrentPortFont, OS.kThemeStateActive, false, ioBounds, null);", "-\t\t\tOS.SetPort (currentPort [0]);", "-\t\t}", "+\t\tOS.GetThemeTextDimensions (ptr [0], themeFont, OS.kThemeStateActive, false, ioBounds, null);", "+\tint count;", "+\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\tcount = OS.CountMenuItems (menuHandle);", "+\t} else {", "+\t\tcount = OS.HIComboBoxGetItemCount (handle);", "+\t}", "+\tfor (int i=0; i<count; i++) {", "+\t\tint result;", "+\t\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\t\tresult = OS.CopyMenuItemTextAsCFString(menuHandle, (short)(i+1), ptr);", "+\t\t} else {", "+\t\t\tresult = OS.HIComboBoxCopyTextItemAtIndex (handle, i, ptr);", "+\t\t}", "+\t\tif (result == OS.noErr) {", "+\t\t\tOS.GetThemeTextDimensions (ptr [0], themeFont, OS.kThemeStateActive, false, ioBounds, null);", "+\t\t\twidth = Math.max (width, ioBounds.h);", "+\t\t\tOS.CFRelease (ptr [0]);", "+\t\t}", "+\t}", "+\tif (font != null) {", "+\t\tOS.SetPort (currentPort [0]);", "+\t}", "+\tint [] metric = new int [1];", "+\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\tOS.GetThemeMetric (OS.kThemeMetricDisclosureButtonWidth, metric);", "+\t\twidth += metric [0];", "+\t\t//NOT DONE", "+\t\twidth += 13;", "+\t} else {", "+\t\tOS.GetThemeMetric (OS.kThemeMetricComboBoxLargeDisclosureWidth, metric);", "+\t\twidth += metric [0];", "+\t}", "+\tOS.GetThemeMetric (OS.kThemeMetricEditTextWhitespace, metric);", "+\twidth += metric [0] * 2;", "+\theight += metric [0] * 2;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cdfbec40e36c2b79705ab47e38fb0f48", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "318109a09b77020cb8d7f8d97b41b87933157e53", "commitAfterChange": "0a91b1bc8ed129ef04fc4f0a9cb0ec8e8a9db239", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " public Monitor [] getMonitors ()", "signatureAfterChange": " public Monitor [] getMonitors ()", "diff": ["-\t//TODO", "-\treturn new Monitor [] { getPrimaryMonitor() };", "+\tint screens = OS.Screen_AllScreens ();", "+\tif (screens == 0) error (SWT.ERROR_NO_HANDLES);", "+\tint screenCount = OS.ICollection_Count (screens);", "+\tMonitor [] monitors = new Monitor [screenCount];", "+\tfor (int i=0; i<screenCount; i++) {", "+\t\tint screen = OS.IList_default (screens, i);", "+\t\tint bounds = OS.Screen_Bounds (screen);", "+\t\tint workingArea = OS.Screen_WorkingArea (screen);", "+\t\tMonitor monitor = new Monitor ();", "+\t\tmonitor.x = OS.Rectangle_X (bounds); ", "+\t\tmonitor.y = OS.Rectangle_Y (bounds);", "+\t\tmonitor.width = OS.Rectangle_Width (bounds);", "+\t\tmonitor.height = OS.Rectangle_Height (bounds); ", "+\t\tmonitor.clientX = OS.Rectangle_X (workingArea);", "+\t\tmonitor.clientY = OS.Rectangle_Y (workingArea);", "+\t\tmonitor.clientWidth = OS.Rectangle_Width (workingArea);", "+\t\tmonitor.clientHeight = OS.Rectangle_Height (workingArea);", "+\t\tmonitors [i] = monitor;", "+\t\tOS.GCHandle_Free (workingArea);", "+\t\tOS.GCHandle_Free (bounds);", "+\t\tOS.GCHandle_Free (screen);", "+\t}", "+\tOS.GCHandle_Free (screens);", "+\treturn monitors;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "65f6da0a216a9ce914e4b629ae1baff0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT PI/carbon/org/eclipse/swt/internal/carbon/MacUtil.java", "commitBeforeChange": "613f3b062dee50803159db7da63b3b9bae0d658b", "commitAfterChange": "0fc698334e61438df4603fa22222287c7edecfb2", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t \tpublic static void embedControl(int controlHandle, int parentControlHandle)", "signatureAfterChange": " \tpublic static void embedControl(int controlHandle, int parentControlHandle, int pos)", "diff": ["+\t */", "+\tpublic static void embedControl(int controlHandle, int parentControlHandle, int pos) {", "+\t\t", "+\t\t// add at end", "+\t\tif (OS.EmbedControl(controlHandle, parentControlHandle) != OS.kNoErr)", "+\t\t\tSystem.out.println(\"MacUtil.embedControl: could not embed control in parent\");", "+\t\t\t", "+\t\tint n= countSubControls(parentControlHandle)-1;", "+\t\t", "+\t\tif (pos < 0 || pos > n)", "+\t\t\tpos= n;", "+\t\t", "+\t\tint[] outControl= new int[1];", "+\t\tif (REVERSE) {", "+\t\t\tfor (int i= 0; i < pos; i++) {", "+\t\t\t\tif (OS.GetIndexedSubControl(parentControlHandle, (short)(n-pos+1), outControl) == 0)", "+\t\t\t\t\tif (OS.EmbedControl(outControl[0], parentControlHandle) != OS.kNoErr)", "+\t\t\t\t\t\tSystem.out.println(\"MacUtil.embedControl: couldn't move control to end\");", "+\t\t\t}", "+\t\t\t", "+\t\t} else {", "+\t\t\tint count= n-pos;", "+\t\t\tfor (int i= 0; i < count; i++) {", "+\t\t\t\tif (OS.GetIndexedSubControl(parentControlHandle, (short)(pos+1), outControl) == 0)", "+\t\t\t\t\tif (OS.EmbedControl(outControl[0], parentControlHandle) != OS.kNoErr)", "+\t\t\t\t\t\tSystem.out.println(\"MacUtil.embedControl: couldn't move control to end\");", "+\t\t\t}", "+\t\t}", "+\t\t", "+\t\t// verify correct position", "+\t\tn++;", "+\t\tfor (int i= 0; i < n; i++) {", "+\t\t\tint index= REVERSE ? (n-i) : (i+1);", "+\t\t\tint[] outHandle= new int[1];", "+\t\t\tif (OS.GetIndexedSubControl(parentControlHandle, (short)index, outHandle) == 0) {\t// indices are 1 based", "+\t\t\t\tif (outHandle[0] == controlHandle) {", "+\t\t\t\t\tif (i != pos)", "+\t\t\t\t\t\tSystem.out.println(\"MacUtil.embedControl: creation at position nyi (is: \"+i+\" should: \"+ pos+\")\");", "+\t\t\t\t\treturn;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tSystem.out.println(\"MacUtil.embedControl: new child not found\");", "-\t\tif (REVERSE) {", "-\t\t\tint count= countSubControls(parentControlHandle);", "-\t\t\tOS.EmbedControl(controlHandle, parentControlHandle);", "-\t\t\tint[] outControl= new int[1];", "-\t\t\tfor (int i= 0; i < count; i++) {", "-\t\t\t\tif (OS.GetIndexedSubControl(parentControlHandle, (short)(1), outControl) == 0)", "-\t\t\t\t\tOS.EmbedControl(outControl[0], parentControlHandle);", "-\t\t\t\telse", "-\t\t\t\t\tthrow new SWTError();", "-\t\t\t}", "-\t\t} else {", "-\t\t\tOS.EmbedControl(controlHandle, parentControlHandle);", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24368bdfcda133793a138fcc8fb34d03", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "2703b6b4917ee70e34e69f6beabdf6e17c0e648e", "commitAfterChange": "0e0eae7504b067875076ee5d9af4693ac4a9b250", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  NSBitmapImageRep getRepresentation ()", "signatureAfterChange": "  NSBitmapImageRep getRepresentation ()", "diff": ["-\tNSImageRep rep = handle.bestRepresentationForDevice(null);", "-\tif (!rep.isKindOfClass(OS.class_NSBitmapImageRep)) {", "-\t\tSWT.error(SWT.ERROR_UNSPECIFIED);", "+\tNSBitmapImageRep rep = new NSBitmapImageRep(handle.bestRepresentationForDevice(null));", "+\tif (rep.isKindOfClass(OS.class_NSBitmapImageRep)) {", "+\t\treturn rep;", "-\treturn new NSBitmapImageRep(rep);", "+\tNSArray reps = handle.representations();", "+\tNSSize size = handle.size();", "+\tint /*long*/ count = reps.count();", "+\tNSBitmapImageRep bestRep = null;", "+\tfor (int i = 0; i < count; i++) {", "+\t\trep = new NSBitmapImageRep(reps.objectAtIndex(i));", "+\t\tif (rep.isKindOfClass(OS.class_NSBitmapImageRep)) return rep;", "+\t\tif (bestRep == null || ((int)size.width == rep.pixelsWide() && (int)size.height == rep.pixelsHigh())) {", "+\t\t\tbestRep = rep;", "+\t\t}", "+\t}", "+\tbestRep.retain();", "+\tfor (int i = 0; i < count; i++) {", "+\t\thandle.removeRepresentation(new NSImageRep(handle.representations().objectAtIndex(0)));", "+\t}", "+\thandle.addRepresentation(bestRep);", "+\tNSBitmapImageRep newRep = (NSBitmapImageRep)new NSBitmapImageRep().alloc();", "+\tnewRep = newRep.initWithData(handle.TIFFRepresentation());", "+\thandle.addRepresentation(newRep);", "+\thandle.removeRepresentation(bestRep);", "+\tbestRep.release();", "+\tnewRep.release();", "+\treturn newRep;"]}], "num": 37835}
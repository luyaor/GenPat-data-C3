{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9bab2338daae32178ec779627e7e2edb", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cb9c0db9b226dc976a6cbd0a700521f9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "4631a5a5553c2a27a1c80b2611f4f0cea8081a20", "commitAfterChange": "21eb151f1a668a710645fe690cf473d0b86ddaf0", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": "  void printWindow (boolean first, Control control, GC gc, long drawable, int depth, long window, int x, int y)", "signatureAfterChange": "  void printWindow (boolean first, Control control, GC gc, long drawable, int depth, long window, int x, int y)", "diff": ["+\tGdkRectangle rect = new GdkRectangle ();", "+\tint [] width = new int [1], height = new int [1];", "+\tgdk_window_get_size (window, width, height);", "+\trect.width = width [0];", "+\trect.height = height [0];", "+\tOS.gdk_window_begin_paint_rect (window, rect);", "-\tint [] width = new int [1], height = new int [1];", "-\tint srcX, srcY, destX, destY, destWidth, destHeight;", "-\tif (OS.GTK_VERSION >= OS.VERSION(3, 0, 0)) {", "-\t\tcairo_rectangle_int_t rect = new cairo_rectangle_int_t ();", "-\t\tgdk_window_get_size (window, width, height);", "-\t\trect.width = width [0];", "-\t\trect.height = height [0];", "-\t\tlong /*int*/ cr = Cairo.cairo_region_create_rectangle (rect);", "-\t\tOS.gdk_window_begin_paint_region(window, cr);", "-\t\tOS.gdk_window_get_internal_paint_info (window, real_drawable, x_offset, y_offset);\t", "-\t\tlong /*int*/ [] userData = new long /*int*/ [1];", "-\t\tOS.gdk_window_get_user_data (window, userData);", "-\t\tif (userData [0] != 0) {", "-\t\t\tlong /*int*/ eventPtr = OS.gdk_event_new (OS.GDK_EXPOSE);", "-\t\t\tGdkEventExpose event = new GdkEventExpose ();", "-\t\t\tevent.type = OS.GDK_EXPOSE;", "-\t\t\tevent.window = OS.g_object_ref (window);", "-\t\t\tevent.area_width = rect.width;", "-\t\t\tevent.area_height = rect.height;", "-\t\t\tevent.region = Cairo.cairo_region_create_rectangle (rect);", "-\t\t\tOS.memmove (eventPtr, event, GdkEventExpose.sizeof);", "-\t\t\tOS.gtk_widget_send_expose (userData [0], eventPtr);", "-\t\t\tOS.gdk_event_free (eventPtr);", "-\t\t}\t", "-\t} else {", "-\t\tGdkRectangle rect = new GdkRectangle ();", "-\t\tgdk_window_get_size (window, width, height);", "-\t\trect.width = width [0];", "-\t\trect.height = height [0];", "-\t\tOS.gdk_window_begin_paint_rect (window, rect);", "-\t\tOS.gdk_window_get_internal_paint_info (window, real_drawable, x_offset, y_offset);\t", "-\t\tlong /*int*/ [] userData = new long /*int*/ [1];", "-\t\tOS.gdk_window_get_user_data (window, userData);", "-\t\tif (userData [0] != 0) {", "-\t\t\tlong /*int*/ eventPtr = OS.gdk_event_new (OS.GDK_EXPOSE);", "-\t\t\tGdkEventExpose event = new GdkEventExpose ();", "-\t\t\tevent.type = OS.GDK_EXPOSE;", "-\t\t\tevent.window = OS.g_object_ref (window);", "-\t\t\tevent.area_width = rect.width;", "-\t\t\tevent.area_height = rect.height;", "-\t\t\tevent.region = OS.gdk_region_rectangle (rect);", "-\t\t\tOS.memmove (eventPtr, event, GdkEventExpose.sizeof);", "-\t\t\tOS.gtk_widget_send_expose (userData [0], eventPtr);", "-\t\t\tOS.gdk_event_free (eventPtr);", "-\t\t}", "+\tOS.gdk_window_get_internal_paint_info (window, real_drawable, x_offset, y_offset);\t", "+\tlong /*int*/ [] userData = new long /*int*/ [1];", "+\tOS.gdk_window_get_user_data (window, userData);", "+\tif (userData [0] != 0) {", "+\t\tlong /*int*/ eventPtr = OS.gdk_event_new (OS.GDK_EXPOSE);", "+\t\tGdkEventExpose event = new GdkEventExpose ();", "+\t\tevent.type = OS.GDK_EXPOSE;", "+\t\tevent.window = OS.g_object_ref (window);", "+\t\tevent.area_width = rect.width;", "+\t\tevent.area_height = rect.height;", "+\t\tevent.region = OS.gdk_region_rectangle (rect);", "+\t\tOS.memmove (eventPtr, event, GdkEventExpose.sizeof);", "+\t\tOS.gtk_widget_send_expose (userData [0], eventPtr);", "+\t\tOS.gdk_event_free (eventPtr);", "-\tsrcX = x_offset [0];", "-\tsrcY = y_offset [0];", "-\tdestX = x;", "-\tdestY = y;", "-\tdestWidth = width [0];", "-\tdestHeight = height [0];", "+\tint srcX = x_offset [0], srcY = y_offset [0];", "+\tint destX = x, destY = y, destWidth = width [0], destHeight = height [0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7da934aed89892bfcddb103b6a5def40", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 58, "methodNumberAfterChange": 59, "signatureBeforeChange": "\r \r void setGCClipping()", "signatureAfterChange": "\r \r void setGCClipping()", "diff": ["-\tint child_tile = 0;\r", "-\tint widget_tile = OS.PhGetTile(); // NOTE: PhGetTile native initializes the tile\r", "-\t\t\t\r", "-\t// Get the rectangle of all siblings in front of the widget\r", "-\tint temp_widget = topWidget;\r", "-\twhile ((temp_widget = OS.PtWidgetBrotherInFront(temp_widget)) != 0) {\r", "-\t\tif (OS.PtWidgetIsRealized(temp_widget)) {\r", "-\t\t\tint tile = OS.PhGetTile();\r", "-\t\t\tif (child_tile == 0) child_tile = tile;\t\t\t\r", "-\t\t\telse child_tile = OS.PhAddMergeTiles(tile, child_tile, null);\r", "-\t\t\tOS.PtWidgetExtent(temp_widget, tile); // NOTE: tile->rect\r", "-\t\t}\r", "-\t}\r", "-\t// Translate the siblings rectangles to the widget's coordinates\r", "-\tOS.PtWidgetCanvas(topWidget, widget_tile); // NOTE: widget_tile->rect\r", "-\tOS.PhDeTranslateTiles(child_tile, widget_tile); // NOTE: widget_tile->rect.ul\r", "-\t\t\t\r", "-\t// Get the rectangle of the widget's children\r", "-\ttemp_widget = OS.PtWidgetChildBack(widget);\r", "-\twhile (temp_widget != 0) {\r", "-\t\tif (OS.PtWidgetIsRealized(temp_widget)) {\r", "-\t\t\tint tile = OS.PhGetTile();\r", "-\t\t\tif (child_tile == 0) child_tile = tile;\t\t\t\r", "-\t\t\telse child_tile = OS.PhAddMergeTiles(tile, child_tile, null);\r", "-\t\t\tOS.PtWidgetExtent(temp_widget, tile); // NOTE: tile->rect\r", "-\t\t}\r", "-\t\ttemp_widget = OS.PtWidgetBrotherInFront(temp_widget);\r", "-\t}\r", "-\r", "-\t// Get the widget's rectangle\r", "-\tOS.PtWidgetCanvas(widget, widget_tile); // NOTE: widget_tile->rect\r", "-\tOS.PhDeTranslateTiles(widget_tile, widget_tile); // NOTE: widget_tile->rect.ul\r", "-\r", "-\t// Clip the widget's rectangle from the child/siblings rectangle's\r", "-\tint clip_rects;\r", "+\tint clip_tile = getClipping(widget, topWidget, true, true);\r", "-\tif (child_tile != 0) {\r", "-\t\tint clip_tile = OS.PhClipTilings(widget_tile, child_tile, null);\r", "-\t\tclip_rects = OS.PhTilesToRects(clip_tile, clip_rects_count);\r", "-\t\tOS.PhFreeTiles(child_tile);\r", "-\t\tOS.PhFreeTiles(clip_tile);\r", "-\t} else {\r", "-\t\tclip_rects = OS.PhTilesToRects(widget_tile, clip_rects_count);\r", "-\t\tOS.PhFreeTiles(widget_tile);\r", "-\t}\r", "+\tint clip_rects = OS.PhTilesToRects(clip_tile, clip_rects_count);\r", "+\tOS.PhFreeTiles(clip_tile);\r", "-\t// PgSetClipping sets the clipping to the full region when the count is zero\r", "+\t/* PgSetClipping sets the clipping to the full region when the count is zero */\r"]}], "num": 46935}
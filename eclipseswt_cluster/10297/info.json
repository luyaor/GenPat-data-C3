{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f352b328fbe892bcf2b5fc25adc2b8af", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e47aac44695cce90400134a3e7cb4885", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "12de0f7ac678212aa29b6056881b6834dba6f8ac", "commitAfterChange": "dcf63b805bd9f73d657e22a2eb20df591ffc4ab1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["+", "+\t\tString greInitialized = System.getProperty (GRE_INITIALIZED); ", "+\t\tif (\"true\".equals (greInitialized)) { //$NON-NLS-1$", "+\t\t\t/* ", "+\t\t\t * Another browser has already initialized xulrunner in this process,", "+\t\t\t * so just bind to it instead of trying to initialize a new one.", "+\t\t\t */", "+\t\t\tInitialized = true;", "+\t\t}", "-\t\t\tString xulrunnerInitialized = System.getProperty (XULRUNNER_INITIALIZED); ", "-\t\t\tif (\"true\".equals (xulrunnerInitialized)) {", "-\t\t\t\t/* ", "-\t\t\t\t * Another browser has already initialized xulrunner in this process,", "-\t\t\t\t * so just bind to it instead of trying to initialize a new one.", "-\t\t\t\t */", "-\t\t\t\tInitialized = true;", "-\t\t\t}", "-\t\t\t\t\t\tXPCOMInit.XPCOMGlueShutdown ();", "+\t\t\t\t\t\tGlueStartupCount++;", "+\t\t\tGlueStartupCount++;", "-\t\t\tSystem.setProperty (XULRUNNER_PATH, mozillaPath);", "-\t\t\tSystem.setProperty (XULRUNNER_INITIALIZED, \"true\"); //$NON-NLS-1$", "+\t\t\tSystem.setProperty (GRE_INITIALIZED, \"true\"); //$NON-NLS-1$", "+\t\t\tif (IsXULRunner) {", "+\t\t\t\tSystem.setProperty (XULRUNNER_PATH, mozillaPath);", "+\t\t\t}", "-", "-\t\t\tdisplay.addListener (SWT.Dispose, new Listener () {", "-\t\t\t\tpublic void handleEvent (Event event) {", "-\t\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-", "-\t\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\t\t\t\t\tresult[0] = 0;\t\t", "-\t\t\t\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "-\t\t\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\t\tserviceManager.Release ();", "-", "-\t\t\t\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_BEFORE_CHANGE, true);", "-\t\t\t\t\tint length = SHUTDOWN_PERSIST.length ();", "-\t\t\t\t\tchar[] chars = new char [length + 1];", "-\t\t\t\t\tSHUTDOWN_PERSIST.getChars (0, length, chars, 0);", "-\t\t\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tobserverService.Release ();", "-\t\t\t\t}", "-\t\t\t});", "+\tif (display.getData (DISPOSE_LISTENER_HOOKED) == null) {", "+\t\tdisplay.setData (DISPOSE_LISTENER_HOOKED, DISPOSE_LISTENER_HOOKED);", "+\t\tdisplay.addListener (SWT.Dispose, new Listener () {", "+\t\t\tpublic void handleEvent (Event event) {", "+\t\t\t\tif (BrowserCount > 0) return; /* another display is still active */", "+", "+\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\t\t\t\tresult[0] = 0;\t\t", "+\t\t\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "+\t\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\t\t\tserviceManager.Release ();", "+", "+\t\t\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_BEFORE_CHANGE, true);", "+\t\t\t\tint length = SHUTDOWN_PERSIST.length ();", "+\t\t\t\tchar[] chars = new char [length + 1];", "+\t\t\t\tSHUTDOWN_PERSIST.getChars (0, length, chars, 0);", "+\t\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tobserverService.Release ();", "+", "+\t\t\t\tif (GlueStartupCount > 0) {", "+\t\t\t\t\tXPCOM.XPCOMGlueShutdown ();", "+\t\t\t\t\tif (GlueStartupCount > 1) {", "+\t\t\t\t\t\tXPCOMInit.XPCOMGlueShutdown ();", "+\t\t\t\t\t}", "+\t\t\t\t\tGlueStartupCount = 0;", "+\t\t\t\t}", "+\t\t\t\tInitialized = false;", "+\t\t\t}", "+\t\t});", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d69e2cb51b7ae223ce122b6cba717372", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "07959d909e8636c9d0fc8d0533ebc814870527be", "commitAfterChange": "2e018166adf3de407abb1d59b1d6d286fc16acc0", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["+\t\t\tLocationProvider = new AppFileLocProvider (mozillaPath);", "+\t\t\tLocationProvider.AddRef ();", "+", "-\t\t\trc = XPCOM.NS_InitXPCOM2 (0, localFile.getAddress(), 0);", "+\t\t\trc = XPCOM.NS_InitXPCOM2 (0, localFile.getAddress(), LocationProvider.getAddress ());", "-\t\t\t", "+", "-\t\t/* compute the root profile directory */", "+\t\t/* compute the profile directory and set it on the AppFileLocProvider */", "-\t\tprofileRootDirectory = new String (MozillaDelegate.mbcsToWcs (null, buffer)) + PROFILE_DIR;", "+\t\tString profilePath = new String (MozillaDelegate.mbcsToWcs (null, buffer)) + PROFILE_DIR;", "+\t\tLocationProvider.setProfilePath (profilePath);", "+", "+\t\t/* notify observers of a new profile directory being used */", "+\t\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "+\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (rc);", "+\t\t}", "+\t\tif (result[0] == 0) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (XPCOM.NS_NOINTERFACE);", "+\t\t}", "+", "+\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "+\t\tresult[0] = 0;", "+\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_DO_CHANGE, true);", "+\t\tlength = STARTUP.length ();", "+\t\tchar[] chars = new char [length + 1];", "+\t\tSTARTUP.getChars (0, length, chars, 0);", "+\t\trc = observerService.NotifyObservers (0, buffer, chars);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (rc);", "+\t\t}", "+\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_AFTER_CHANGE, true);", "+\t\trc = observerService.NotifyObservers (0, buffer, chars);", "+\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\tbrowser.dispose ();", "+\t\t\terror (rc);", "+\t\t}", "+\t\tobserverService.Release ();", "-\trc = XPCOM.NS_GetServiceManager (result);", "-\tif (rc != XPCOM.NS_OK) {", "-\t\tbrowser.dispose ();", "-\t\terror (rc);", "-\t}", "-\tif (result[0] == 0) {", "-\t\tbrowser.dispose ();", "-\t\terror (XPCOM.NS_NOINTERFACE);", "-\t}", "-", "-\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\tresult[0] = 0;\t\t", "-\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_DIRECTORYSERVICE_CONTRACTID, true);", "-\trc = serviceManager.GetServiceByContractID (buffer, nsIDirectoryService.NS_IDIRECTORYSERVICE_IID, result);", "-\tif (rc != XPCOM.NS_OK) {", "-\t\tbrowser.dispose ();", "-\t\terror (rc);", "-\t}", "-\tif (result[0] == 0) {", "-\t\tbrowser.dispose ();", "-\t\terror (XPCOM.NS_NOINTERFACE);", "-\t}", "-", "-\tnsIDirectoryService directoryService = new nsIDirectoryService (result[0]);", "-\tresult[0] = 0;", "-\trc = directoryService.RegisterProvider(directoryServiceProviderListener.getAddress ());", "-\tif (rc != XPCOM.NS_OK) {", "-\t\tbrowser.dispose ();", "-\t\terror (rc);", "-\t}", "-\tdirectoryService.Release ();", "-", "-\tbuffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "-\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "-\tif (rc != XPCOM.NS_OK) {", "-\t\tbrowser.dispose ();", "-\t\terror (rc);", "-\t}", "-\tif (result[0] == 0) {", "-\t\tbrowser.dispose ();", "-\t\terror (XPCOM.NS_NOINTERFACE);", "-\t}", "-\tserviceManager.Release ();", "-", "-\tnsIObserverService observerService = new nsIObserverService (result[0]);", "-\tresult[0] = 0;", "-\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_DO_CHANGE, true);", "-\tint length = STARTUP.length ();", "-\tchar[] chars = new char [length + 1];", "-\tSTARTUP.getChars (0, length, chars, 0);", "-\trc = observerService.NotifyObservers (0, buffer, chars);", "-\tif (rc != XPCOM.NS_OK) {", "-\t\tbrowser.dispose ();", "-\t\terror (rc);", "-\t}", "-\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_AFTER_CHANGE, true);", "-\trc = observerService.NotifyObservers (0, buffer, chars);", "-\tif (rc != XPCOM.NS_OK) {", "-\t\tbrowser.dispose ();", "-\t\terror (rc);", "-\t}", "-\tobserverService.Release ();", "-"]}], "num": 10297}
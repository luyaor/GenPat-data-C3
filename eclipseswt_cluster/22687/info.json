{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d60402189ed5ba545ea5834a85543985", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6898c2fec84d3b9a998cd7614ff83e0f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "13797ef0d0261612a066adff160fe7551656ea55", "commitAfterChange": "6110f991e7634879dd4777a1720b5cbd3424f44a", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 129, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\t\t\tif (drawCount != 0 || !OS.IsWindowVisible (handle)) break;", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug in Windows.  When the table has the extended style", "-\t\t\t\t\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "-\t\t\t\t\t* CLR_NONE to make the table transparent, Windows fills", "-\t\t\t\t\t* a black rectangle around any column that contains an", "-\t\t\t\t\t* image.  The fix is clear LVS_EX_FULLROWSELECT during", "-\t\t\t\t\t* custom draw.", "-\t\t\t\t\t*/", "-\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "-\t\t\t\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) == OS.CLR_NONE) {", "-\t\t\t\t\t\t\tOS.UpdateWindow (handle);", "-\t\t\t\t\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "-\t\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "-\t\t\t\t\t\t\tOS.ValidateRect (handle, null);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "-\t\t\t\t\t\tControl control = findBackgroundControl ();", "-\t\t\t\t\t\tif (control != null && control.backgroundImage != null) {", "-\t\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "-\t\t\t\t\t\t\tfillImageBackground (nmcd.hdc, control, rect);", "-\t\t\t\t\t\t} else {", "+\t\t\t\t\tif (OS.IsWindowVisible (handle)) {", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t* Bug in Windows.  When the table has the extended style", "+\t\t\t\t\t\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "+\t\t\t\t\t\t* CLR_NONE to make the table transparent, Windows fills", "+\t\t\t\t\t\t* a black rectangle around any column that contains an", "+\t\t\t\t\t\t* image.  The fix is clear LVS_EX_FULLROWSELECT during", "+\t\t\t\t\t\t* custom draw.", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\t\t\tOS.UpdateWindow (handle);", "+\t\t\t\t\t\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "+\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "+\t\t\t\t\t\t\t\tOS.ValidateRect (handle, null);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (OS.IsWindowEnabled (handle)) {", "+\t\t\t\t\t\t\tControl control = findBackgroundControl ();", "+\t\t\t\t\t\t\tif (control != null && control.backgroundImage != null) {", "-\t\t\t\t\t\t\t\tif (control == null) control = this;", "-\t\t\t\t\t\t\t\tfillBackground (nmcd.hdc, control.getBackgroundPixel (), rect);", "+\t\t\t\t\t\t\t\tfillImageBackground (nmcd.hdc, control, rect);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) == OS.CLR_NONE) {", "+\t\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\t\t\t\tif (control == null) control = this;", "+\t\t\t\t\t\t\t\t\tfillBackground (nmcd.hdc, control.getBackgroundPixel (), rect);", "+\t\t\t\t\t\t\t\t}", "-\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\tif (OS.IsWindowVisible (handle) && (style & SWT.FULL_SELECTION) != 0) {", "-\t\t\t\tcase OS.CDDS_ITEMPREPAINT | OS.CDDS_SUBITEM: {", "+\t\t\t\tcase OS.CDDS_SUBITEMPREPAINT: {", "-\t\t\t\t\tif (hooks (SWT.MeasureItem)) {", "+\t\t\t\t\tif (OS.IsWindowVisible (handle) && hooks (SWT.MeasureItem)) {", "-\t\t\t\t\tif (hooks (SWT.EraseItem)) {", "+\t\t\t\t\tif (OS.IsWindowVisible (handle) && hooks (SWT.EraseItem)) {", "-\t\t\t\t\tif (!ignoreDrawSelected && (style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\tif (OS.IsWindowVisible (handle) && (style & SWT.FULL_SELECTION) != 0 && !ignoreDrawSelected) {", "-\t\t\t\tcase OS.CDDS_ITEMPOSTPAINT | OS.CDDS_SUBITEM: {", "+\t\t\t\tcase OS.CDDS_SUBITEMPOSTPAINT: {", "-\t\t\t\t\tif (hooks (SWT.PaintItem)) {", "+\t\t\t\t\tif (OS.IsWindowVisible (handle) && hooks (SWT.PaintItem)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ceb6561b0f14a1797e60d9f4ee3a92ad", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "13797ef0d0261612a066adff160fe7551656ea55", "commitAfterChange": "6110f991e7634879dd4777a1720b5cbd3424f44a", "methodNumberBeforeChange": 133, "methodNumberAfterChange": 133, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\t\t\tif (drawCount != 0 || !OS.IsWindowVisible (handle)) break;", "-\t\t\t\t\tif (linesVisible) {", "+\t\t\t\t\tif (OS.IsWindowVisible (handle) && linesVisible) {", "-\t\t\t\t\tif (nmcd.left >= nmcd.right || nmcd.top >= nmcd.bottom) break;", "-\t\t\t\t\tint hDC = nmcd.hdc;", "-\t\t\t\t\tif (linesVisible) {", "-\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "-\t\t\t\t\t\tOS.DrawEdge (hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM);", "-\t\t\t\t\t}", "+\t\t\t\t\tint hDC = nmcd.hdc;", "-\t\t\t\t\t//TODO - BUG - measure and erase sent when first column is clipped", "-\t\t\t\t\tif (hooks (SWT.MeasureItem)) {", "-\t\t\t\t\t\tRECT itemRect = item.getBounds (index, true, true, false, false, false, hDC);", "-\t\t\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "-\t\t\t\t\t\tGCData data = new GCData ();", "-\t\t\t\t\t\tdata.device = display;", "-\t\t\t\t\t\tdata.hFont = hFont;", "-\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "-\t\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\t\tevent.item = item;", "-\t\t\t\t\t\tevent.gc = gc;", "-\t\t\t\t\t\tevent.index = index;", "-\t\t\t\t\t\tevent.x = itemRect.left;", "-\t\t\t\t\t\tevent.y = itemRect.top;", "-\t\t\t\t\t\tevent.width = itemRect.right - itemRect.left;", "-\t\t\t\t\t\tevent.height = itemRect.bottom - itemRect.top;", "-\t\t\t\t\t\tsendEvent (SWT.MeasureItem, event);", "-\t\t\t\t\t\tevent.gc = null;", "-\t\t\t\t\t\tgc.dispose ();", "-\t\t\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "-\t\t\t\t\t\tif (isDisposed () || item.isDisposed ()) break;", "-\t\t\t\t\t\tif (hwndHeader != 0) {", "-\t\t\t\t\t\t\tif (count == 0) {", "-\t\t\t\t\t\t\t\tif (event.x + event.width > scrollWidth) {", "-\t\t\t\t\t\t\t\t\tsetScrollWidth (scrollWidth = event.x + event.width);", "+\t\t\t\t\tif (OS.IsWindowVisible (handle) && nmcd.left < nmcd.right && nmcd.top < nmcd.bottom) {", "+\t\t\t\t\t\tif (linesVisible) {", "+\t\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\t\tOS.DrawEdge (hDC, rect, OS.BDR_SUNKENINNER, OS.BF_BOTTOM);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t//TODO - BUG - measure and erase sent when first column is clipped", "+\t\t\t\t\t\tif (hooks (SWT.MeasureItem)) {", "+\t\t\t\t\t\t\tRECT itemRect = item.getBounds (index, true, true, false, false, false, hDC);", "+\t\t\t\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "+\t\t\t\t\t\t\tGCData data = new GCData ();", "+\t\t\t\t\t\t\tdata.device = display;", "+\t\t\t\t\t\t\tdata.hFont = hFont;", "+\t\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "+\t\t\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\t\t\tevent.item = item;", "+\t\t\t\t\t\t\tevent.gc = gc;", "+\t\t\t\t\t\t\tevent.index = index;", "+\t\t\t\t\t\t\tevent.x = itemRect.left;", "+\t\t\t\t\t\t\tevent.y = itemRect.top;", "+\t\t\t\t\t\t\tevent.width = itemRect.right - itemRect.left;", "+\t\t\t\t\t\t\tevent.height = itemRect.bottom - itemRect.top;", "+\t\t\t\t\t\t\tsendEvent (SWT.MeasureItem, event);", "+\t\t\t\t\t\t\tevent.gc = null;", "+\t\t\t\t\t\t\tgc.dispose ();", "+\t\t\t\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "+\t\t\t\t\t\t\tif (isDisposed () || item.isDisposed ()) break;", "+\t\t\t\t\t\t\tif (hwndHeader != 0) {", "+\t\t\t\t\t\t\t\tif (count == 0) {", "+\t\t\t\t\t\t\t\t\tif (event.x + event.width > scrollWidth) {", "+\t\t\t\t\t\t\t\t\t\tsetScrollWidth (scrollWidth = event.x + event.width);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tif (!ignoreItemHeight) {", "+\t\t\t\t\t\t\t\tif (event.height > getItemHeight ()) setItemHeight (event.height);", "+\t\t\t\t\t\t\t\tignoreItemHeight = true;", "+\t\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (!ignoreItemHeight) {", "-\t\t\t\t\t\t\tif (event.height > getItemHeight ()) setItemHeight (event.height);", "-\t\t\t\t\t\t\tignoreItemHeight = true;", "+\t\t\t\t\t\tignoreDraw = ignoreDrawSelected = false;", "+\t\t\t\t\t\tif (hooks (SWT.EraseItem)) {", "+\t\t\t\t\t\t\tRECT cellRect = item.getBounds (index, true, true, true, true, true, hDC);", "+\t\t\t\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "+\t\t\t\t\t\t\tGCData data = new GCData ();", "+\t\t\t\t\t\t\tdata.device = display;", "+\t\t\t\t\t\t\tdata.foreground = clrText != -1 ? clrText : OS.GetTextColor (hDC);", "+\t\t\t\t\t\t\tdata.background = clrTextBk != -1 ? clrTextBk : OS.GetBkColor (hDC);", "+\t\t\t\t\t\t\tdata.hPen = OS.CreatePen (OS.PS_SOLID, 0, data.foreground);", "+\t\t\t\t\t\t\tdata.hBrush = OS.CreateSolidBrush (data.background);", "+\t\t\t\t\t\t\tif (hFont != -1) data.hFont = hFont;", "+\t\t\t\t\t\t\tOS.SelectObject (hDC, data.hPen);", "+\t\t\t\t\t\t\tOS.SelectObject (hDC, data.hBrush);", "+\t\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "+\t\t\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\t\t\tevent.index = index;", "+\t\t\t\t\t\t\tevent.item = item;", "+\t\t\t\t\t\t\tevent.gc = gc;", "+\t\t\t\t\t\t\tif (selected) event.detail |= SWT.SELECTED;", "+\t\t\t\t\t\t\tif ((nmcd.uItemState & OS.CDIS_FOCUS) != 0) event.detail |= SWT.FOCUSED;", "+\t\t\t\t\t\t\tevent.x = cellRect.left;", "+\t\t\t\t\t\t\tevent.y = cellRect.top;", "+\t\t\t\t\t\t\tevent.width = cellRect.right - cellRect.left;", "+\t\t\t\t\t\t\tevent.height = cellRect.bottom - cellRect.top;", "+\t\t\t\t\t\t\tgc.setClipping (event.x, event.y, event.width, event.height);", "+\t\t\t\t\t\t\tsendEvent (SWT.EraseItem, event);", "+\t\t\t\t\t\t\tevent.gc = null;", "+\t\t\t\t\t\t\tgc.dispose ();", "+\t\t\t\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "+\t\t\t\t\t\t\tif (isDisposed () || item.isDisposed ()) break;", "+\t\t\t\t\t\t\tignoreDraw = !event.doit;", "+\t\t\t\t\t\t\tif (event.doit) {", "+\t\t\t\t\t\t\t\tif ((event.detail & SWT.SELECTED) != 0) {", "+\t\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t\t* Feature in Windows.  When the tree has the style", "+\t\t\t\t\t\t\t\t\t* TVS_FULLROWSELECT, the background color for the", "+\t\t\t\t\t\t\t\t\t* entire row is filled when an item is painted,", "+\t\t\t\t\t\t\t\t\t* drawing on top of any custom drawing.  The fix", "+\t\t\t\t\t\t\t\t\t* is to emulate TVS_FULLROWSELECT.", "+\t\t\t\t\t\t\t\t\t*/", "+\t\t\t\t\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\t\t\t\t\tfillBackground (hDC, OS.GetBkColor (hDC), rect);", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tRECT textRect = item.getBounds (index, true, false, false, false, true, hDC);", "+\t\t\t\t\t\t\t\t\t\tdrawBackground (hDC, textRect, OS.GetBkColor (hDC));", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tignoreDrawSelected = true;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tRECT itemRect = item.getBounds (index, true, true, false, false, false, hDC);", "+\t\t\t\t\t\t\tOS.SaveDC (hDC);", "+\t\t\t\t\t\t\tOS.SelectClipRgn (hDC, 0);", "+\t\t\t\t\t\t\t//TODO - bug in Windows selection or SWT itemRect", "+\t\t\t\t\t\t\t/*if (selected)*/ itemRect.right++;", "+\t\t\t\t\t\t\tif (linesVisible) itemRect.bottom++;", "+\t\t\t\t\t\t\tif (clipRect != null) {", "+\t\t\t\t\t\t\t\tOS.IntersectClipRect (hDC, clipRect.left, clipRect.top, clipRect.right, clipRect.bottom);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tOS.ExcludeClipRect (hDC, itemRect.left, itemRect.top, itemRect.right, itemRect.bottom);", "+\t\t\t\t\t\t\treturn new LRESULT (OS.CDRF_DODEFAULT | OS.CDRF_NOTIFYPOSTPAINT);", "-\t\t\t\t\t}", "-\t\t\t\t\tignoreDraw = ignoreDrawSelected = false;", "-\t\t\t\t\tif (hooks (SWT.EraseItem)) {", "-\t\t\t\t\t\tRECT cellRect = item.getBounds (index, true, true, true, true, true, hDC);", "-\t\t\t\t\t\tint nSavedDC = OS.SaveDC (hDC);", "-\t\t\t\t\t\tGCData data = new GCData ();", "-\t\t\t\t\t\tdata.device = display;", "-\t\t\t\t\t\tdata.foreground = clrText != -1 ? clrText : OS.GetTextColor (hDC);", "-\t\t\t\t\t\tdata.background = clrTextBk != -1 ? clrTextBk : OS.GetBkColor (hDC);", "-\t\t\t\t\t\tdata.hPen = OS.CreatePen (OS.PS_SOLID, 0, data.foreground);", "-\t\t\t\t\t\tdata.hBrush = OS.CreateSolidBrush (data.background);", "-\t\t\t\t\t\tif (hFont != -1) data.hFont = hFont;", "-\t\t\t\t\t\tOS.SelectObject (hDC, data.hPen);", "-\t\t\t\t\t\tOS.SelectObject (hDC, data.hBrush);", "-\t\t\t\t\t\tGC gc = GC.win32_new (hDC, data);", "-\t\t\t\t\t\tEvent event = new Event ();", "-\t\t\t\t\t\tevent.index = index;", "-\t\t\t\t\t\tevent.item = item;", "-\t\t\t\t\t\tevent.gc = gc;", "-\t\t\t\t\t\tif (selected) event.detail |= SWT.SELECTED;", "-\t\t\t\t\t\tif ((nmcd.uItemState & OS.CDIS_FOCUS) != 0) event.detail |= SWT.FOCUSED;", "-\t\t\t\t\t\tevent.x = cellRect.left;", "-\t\t\t\t\t\tevent.y = cellRect.top;", "-\t\t\t\t\t\tevent.width = cellRect.right - cellRect.left;", "-\t\t\t\t\t\tevent.height = cellRect.bottom - cellRect.top;", "-\t\t\t\t\t\tgc.setClipping (event.x, event.y, event.width, event.height);", "-\t\t\t\t\t\tsendEvent (SWT.EraseItem, event);", "-\t\t\t\t\t\tevent.gc = null;", "-\t\t\t\t\t\tgc.dispose ();", "-\t\t\t\t\t\tOS.RestoreDC (hDC, nSavedDC);", "-\t\t\t\t\t\tif (isDisposed () || item.isDisposed ()) break;", "-\t\t\t\t\t\tignoreDraw = !event.doit;", "-\t\t\t\t\t\tif (event.doit) {", "-\t\t\t\t\t\t\tif ((event.detail & SWT.SELECTED) != 0) {", "-\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t* Feature in Windows.  When the tree has the style", "-\t\t\t\t\t\t\t\t* TVS_FULLROWSELECT, the background color for the", "-\t\t\t\t\t\t\t\t* entire row is filled when an item is painted,", "-\t\t\t\t\t\t\t\t* drawing on top of any custom drawing.  The fix", "-\t\t\t\t\t\t\t\t* is to emulate TVS_FULLROWSELECT.", "-\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t* Feature in Windows.  When the tree has the style", "+\t\t\t\t\t\t* TVS_FULLROWSELECT, the background color for the", "+\t\t\t\t\t\t* entire row is filled when an item is painted,", "+\t\t\t\t\t\t* drawing on top of any custom drawing.  The fix", "+\t\t\t\t\t\t* is to emulate TVS_FULLROWSELECT.", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tif (selected) {", "+\t\t\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\t\t\t\t\t\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "-\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\tRECT textRect = item.getBounds (index, true, false, false, false, true, hDC);", "-\t\t\t\t\t\t\t\t\tdrawBackground (hDC, textRect, OS.GetBkColor (hDC));", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tignoreDrawSelected = true;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tRECT itemRect = item.getBounds (index, true, true, false, false, false, hDC);", "-\t\t\t\t\t\tOS.SaveDC (hDC);", "-\t\t\t\t\t\tOS.SelectClipRgn (hDC, 0);", "-\t\t\t\t\t\t//TODO - bug in Windows selection or SWT itemRect", "-\t\t\t\t\t\t/*if (selected)*/ itemRect.right++;", "-\t\t\t\t\t\tif (linesVisible) itemRect.bottom++;", "-\t\t\t\t\t\tif (clipRect != null) {", "-\t\t\t\t\t\t\tOS.IntersectClipRect (hDC, clipRect.left, clipRect.top, clipRect.right, clipRect.bottom);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tOS.ExcludeClipRect (hDC, itemRect.left, itemRect.top, itemRect.right, itemRect.bottom);", "-\t\t\t\t\t\treturn new LRESULT (OS.CDRF_DODEFAULT | OS.CDRF_NOTIFYPOSTPAINT);", "-\t\t\t\t\t}", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Feature in Windows.  When the tree has the style", "-\t\t\t\t\t* TVS_FULLROWSELECT, the background color for the", "-\t\t\t\t\t* entire row is filled when an item is painted,", "-\t\t\t\t\t* drawing on top of any custom drawing.  The fix", "-\t\t\t\t\t* is to emulate TVS_FULLROWSELECT.", "-\t\t\t\t\t*/", "-\t\t\t\t\tif (selected) {", "-\t\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "-\t\t\t\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-\t\t\t\t\t\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "-\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "-\t\t\t\t\t\t\t\tfillBackground (hDC, OS.GetBkColor (hDC), rect);", "-\t\t\t\t\t\t\tnmcd.clrText = clrText == -1 ? getForegroundPixel () : clrText;", "-\t\t\t\t\t\t\tif (!selected && clrTextBk != -1) {", "-\t\t\t\t\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-\t\t\t\t\t\t\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "-\t\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "-\t\t\t\t\t\t\t\t\tif (count != 0 && hwndHeader != 0) {", "-\t\t\t\t\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "-\t\t\t\t\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "-\t\t\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, index, hdItem);", "-\t\t\t\t\t\t\t\t\t\tnmcd.right = nmcd.left + hdItem.cxy;", "-\t\t\t\t\t\t\t\t\t\tif (OS.COMCTL32_MAJOR < 6 || !OS.IsAppThemed ()) {", "-\t\t\t\t\t\t\t\t\t\t\tRECT itemRect = new RECT ();", "-\t\t\t\t\t\t\t\t\t\t\titemRect.left = item.handle;", "-\t\t\t\t\t\t\t\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, itemRect) != 0) {", "-\t\t\t\t\t\t\t\t\t\t\t\trect.left = Math.min (itemRect.left, rect.right);", "+\t\t\t\t\t\t\tif (OS.IsWindowVisible (handle) && !selected) {", "+\t\t\t\t\t\t\t\tnmcd.clrText = clrText == -1 ? getForegroundPixel () : clrText;", "+\t\t\t\t\t\t\t\tif (clrTextBk != -1) {", "+\t\t\t\t\t\t\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\t\t\t\t\t\t\t\tif ((bits & OS.TVS_FULLROWSELECT) == 0) {", "+\t\t\t\t\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\t\t\t\t\t\t\t\tif (count != 0 && hwndHeader != 0) {", "+\t\t\t\t\t\t\t\t\t\t\tHDITEM hdItem = new HDITEM ();", "+\t\t\t\t\t\t\t\t\t\t\thdItem.mask = OS.HDI_WIDTH;", "+\t\t\t\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, index, hdItem);", "+\t\t\t\t\t\t\t\t\t\t\tnmcd.right = nmcd.left + hdItem.cxy;", "+\t\t\t\t\t\t\t\t\t\t\tif (OS.COMCTL32_MAJOR < 6 || !OS.IsAppThemed ()) {", "+\t\t\t\t\t\t\t\t\t\t\t\tRECT itemRect = new RECT ();", "+\t\t\t\t\t\t\t\t\t\t\t\titemRect.left = item.handle;", "+\t\t\t\t\t\t\t\t\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 1, itemRect) != 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\t\trect.left = Math.min (itemRect.left, rect.right);", "+\t\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t\tfillBackground (hDC, clrTextBk, rect);", "+\t\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "+\t\t\t\t\t\t\t\t\t\t\t\tfillBackground (hDC, clrTextBk, rect);", "-\t\t\t\t\t\t\t\t\t\tfillBackground (hDC, clrTextBk, rect);", "-\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\tif ((style & SWT.FULL_SELECTION) != 0) {", "-\t\t\t\t\t\t\t\t\t\t\tfillBackground (hDC, clrTextBk, rect);", "-\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tnmcd.clrTextBk = clrTextBk;", "-\t\t\t\t\t\t\t\tnmcd.clrTextBk = clrTextBk == -1 ? getBackgroundPixel () : clrTextBk;", "+\t\t\t\t\t\t\t\tOS.MoveMemory (lParam, nmcd, NMTVCUSTOMDRAW.sizeof);", "-\t\t\t\t\t\t\tOS.MoveMemory (lParam, nmcd, NMTVCUSTOMDRAW.sizeof);", "+\t\t\t\t\tif (!OS.IsWindowVisible (handle)) break;"]}], "num": 22687}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6534629093d218d217efde62df7c996d", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d861ed1ff93489d3fd27b77a44df427c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "4837f43ad626833e44d944849690be12f17d2c70", "commitAfterChange": "d33484b9dbd12f2a7ff228ba91793eb6670c1b90", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 35, "signatureBeforeChange": "\r void destroyAccelerators ()", "signatureAfterChange": "\r boolean translateAccelerator (int key, int keysym, XKeyEvent xEvent)", "diff": ["-}\r", "-void destroyAccelerators () {\r", "-\tif (!accelerators) return;\r", "-\tif (menuBar == null) return;\r", "-\tmenuBar.removeAccelerators ();\r", "-\taccelerators = false;\r", "+boolean translateAccelerator (int key, int keysym, XKeyEvent xEvent) {\r", "+\t/*\r", "+\t* Bug in Solaris.  When accelerators are set more\r", "+\t* than once in the same menu bar, the time it takes\r", "+\t* to set the accelerator increases exponentially.\r", "+\t* The fix is to implement our own accelerator table\r", "+\t* on Solaris.\r", "+\t*/\r", "+\tif (OS.IsSunOS) {\r", "+\t\tif (menuBar != null && menuBar.getEnabled ()) {\r", "+\t\t\t/* Ignore modifiers. */\r", "+\t\t\tswitch (keysym) {\r", "+\t\t\t\tcase OS.XK_Control_L:\r", "+\t\t\t\tcase OS.XK_Control_R:\r", "+\t\t\t\tcase OS.XK_Alt_L:\r", "+\t\t\t\tcase OS.XK_Alt_R:\r", "+\t\t\t\tcase OS.XK_Shift_L:\r", "+\t\t\t\tcase OS.XK_Shift_R:\r", "+\t\t\t\t\treturn false;\t\t\t\t\t\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* Bug in MOTIF.  On Solaris only, XK_F11 and XK_F12 are not\r", "+\t\t\t* translated correctly by XLookupString().  They are mapped\r", "+\t\t\t* to 0x1005FF10 and 0x1005FF11 respectively.  The fix is to\r", "+\t\t\t* look for these values explicitly and correct them.\r", "+\t\t\t*/\r", "+\t\t\tif (keysym != 0) {\r", "+\t\t\t\tswitch (keysym) {\r", "+\t\t\t\t\tcase 0x1005FF10: \r", "+\t\t\t\t\t\tkeysym = OS.XK_F11;\r", "+\t\t\t\t\t\tkey = 0;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase 0x1005FF11:\r", "+\t\t\t\t\t\tkeysym = OS.XK_F12;\r", "+\t\t\t\t\t\tkey = 0;\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t}\r", "+\t\t\t\t/*\r", "+\t\t\t\t* Bug in MOTIF.  On Solaris only, there is garbage in the\r", "+\t\t\t\t* high 16-bits for Keysyms such as XK_Down.  Since Keysyms\r", "+\t\t\t\t* must be 16-bits to fit into a Character, mask away the\r", "+\t\t\t\t* high 16-bits on all platforms.\r", "+\t\t\t\t*/\r", "+\t\t\t\tkeysym &= 0xFFFF;\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* Bug in Motif.  There are some keycodes for which \r", "+\t\t\t* XLookupString() does not translate the character.\r", "+\t\t\t* Some of examples are Shift+Tab and Ctrl+Space.\r", "+\t\t\t*/\r", "+\t\t\tswitch (keysym) {\r", "+\t\t\t\tcase OS.XK_ISO_Left_Tab: key = '\\t'; break;\r", "+\t\t\t\tcase OS.XK_space: key = ' '; break;\r", "+\t\t\t}\r", "+\t\t\t\t\r", "+\t\t\tint accelerator = Display.translateKey (keysym);\r", "+\t\t\tif (accelerator == 0) accelerator = key;\r", "+\t\t\tif ((xEvent.state & OS.Mod1Mask) != 0) accelerator |= SWT.ALT;\r", "+\t\t\tif ((xEvent.state & OS.ShiftMask) != 0) accelerator |= SWT.SHIFT;\r", "+\t\t\tif ((xEvent.state & OS.ControlMask) != 0) accelerator |= SWT.CONTROL;\r", "+\t\t\treturn menuBar.translateAccelerator (accelerator);\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13ad38ff3efcd756faa375cfa93785d2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "36baafc7a41a98ef31c891816d25888f38e0c4ac", "commitAfterChange": "35b3e5ac684cde54119d58ece02c16504e7a077c", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " boolean translateAccelerator (int key, int keysym, XKeyEvent xEvent)", "signatureAfterChange": " boolean translateAccelerator (int key, int keysym, XKeyEvent xEvent, boolean doit)", "diff": ["-boolean translateAccelerator (int key, int keysym, XKeyEvent xEvent) {", "-\t/*", "-\t* Bug in Solaris.  When accelerators are set more", "-\t* than once in the same menu bar, the time it takes", "-\t* to set the accelerator increases exponentially.", "-\t* The fix is to implement our own accelerator table", "-\t* on Solaris.", "-\t*/", "-\tif (OS.IsSunOS) {", "-\t\tif (menuBar != null && menuBar.getEnabled ()) {", "-\t\t\t/* Ignore modifiers. */", "-\t\t\tswitch (keysym) {", "-\t\t\t\tcase OS.XK_Control_L:", "-\t\t\t\tcase OS.XK_Control_R:", "-\t\t\t\tcase OS.XK_Alt_L:", "-\t\t\t\tcase OS.XK_Alt_R:", "-\t\t\t\tcase OS.XK_Shift_L:", "-\t\t\t\tcase OS.XK_Shift_R:", "-\t\t\t\t\treturn false;\t\t\t\t\t", "-\t\t\t}", "-\t\t\t", "-\t\t\t/*", "-\t\t\t* Bug in MOTIF.  On Solaris only, XK_F11 and XK_F12 are not", "-\t\t\t* translated correctly by XLookupString().  They are mapped", "-\t\t\t* to 0x1005FF10 and 0x1005FF11 respectively.  The fix is to", "-\t\t\t* look for these values explicitly and correct them.", "-\t\t\t*/", "-\t\t\tif (keysym != 0) {", "-\t\t\t\tswitch (keysym) {", "-\t\t\t\t\tcase 0x1005FF10: ", "-\t\t\t\t\t\tkeysym = OS.XK_F11;", "-\t\t\t\t\t\tkey = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase 0x1005FF11:", "-\t\t\t\t\t\tkeysym = OS.XK_F12;", "-\t\t\t\t\t\tkey = 0;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\t/*", "-\t\t\t\t* Bug in MOTIF.  On Solaris only, there is garbage in the", "-\t\t\t\t* high 16-bits for Keysyms such as XK_Down.  Since Keysyms", "-\t\t\t\t* must be 16-bits to fit into a Character, mask away the", "-\t\t\t\t* high 16-bits on all platforms.", "-\t\t\t\t*/", "-\t\t\t\tkeysym &= 0xFFFF;", "-\t\t\t}", "-\t\t\t", "-\t\t\t/*", "-\t\t\t* Bug in Motif.  There are some keycodes for which ", "-\t\t\t* XLookupString() does not translate the character.", "-\t\t\t* Some of examples are Shift+Tab and Ctrl+Space.", "-\t\t\t*/", "-\t\t\tswitch (keysym) {", "-\t\t\t\tcase OS.XK_ISO_Left_Tab: key = '\\t'; break;", "-\t\t\t\tcase OS.XK_space: key = ' '; break;", "-\t\t\t}", "-\t\t\t\t", "-\t\t\tint accelerator = Display.translateKey (keysym);", "-\t\t\tif (accelerator == 0) accelerator = key;", "-\t\t\tif (accelerator == 0) return false;", "-\t\t\tif ((xEvent.state & OS.Mod1Mask) != 0) accelerator |= SWT.ALT;", "-\t\t\tif ((xEvent.state & OS.ShiftMask) != 0) accelerator |= SWT.SHIFT;", "-\t\t\tif ((xEvent.state & OS.ControlMask) != 0) accelerator |= SWT.CONTROL;", "-\t\t\treturn menuBar.translateAccelerator (accelerator);", "-\t\t}", "+boolean translateAccelerator (int key, int keysym, XKeyEvent xEvent, boolean doit) {", "+\tif (menuBar == null || !menuBar.getEnabled ()) return false;", "+\t", "+\t/* Ignore modifiers. */", "+\tswitch (keysym) {", "+\t\tcase OS.XK_Control_L:", "+\t\tcase OS.XK_Control_R:", "+\t\tcase OS.XK_Alt_L:", "+\t\tcase OS.XK_Alt_R:", "+\t\tcase OS.XK_Shift_L:", "+\t\tcase OS.XK_Shift_R:", "+\t\t\treturn false;\t\t\t\t\t", "-\treturn false;", "+\t", "+\t/*", "+\t* Bug in MOTIF.  On Solaris only, XK_F11 and XK_F12 are not", "+\t* translated correctly by XLookupString().  They are mapped", "+\t* to 0x1005FF10 and 0x1005FF11 respectively.  The fix is to", "+\t* look for these values explicitly and correct them.", "+\t*/", "+\tif (OS.IsSunOS && keysym != 0) {", "+\t\tswitch (keysym) {", "+\t\t\tcase 0x1005FF10: ", "+\t\t\t\tkeysym = OS.XK_F11;", "+\t\t\t\tkey = 0;", "+\t\t\t\tbreak;", "+\t\t\tcase 0x1005FF11:", "+\t\t\t\tkeysym = OS.XK_F12;", "+\t\t\t\tkey = 0;", "+\t\t\t\tbreak;", "+\t\t}", "+\t\t/*", "+\t\t* Bug in MOTIF.  On Solaris only, there is garbage in the", "+\t\t* high 16-bits for Keysyms such as XK_Down.  Since Keysyms", "+\t\t* must be 16-bits to fit into a Character, mask away the", "+\t\t* high 16-bits on all platforms.", "+\t\t*/", "+\t\tkeysym &= 0xFFFF;", "+\t}", "+\t", "+\t/*", "+\t* Bug in Motif.  There are some keycodes for which ", "+\t* XLookupString() does not translate the character.", "+\t* Some examples are Shift+Tab and Ctrl+Space.", "+\t*/", "+\tswitch (keysym) {", "+\t\tcase OS.XK_ISO_Left_Tab: key = '\\t'; break;", "+\t\tcase OS.XK_space: key = ' '; break;", "+\t}", "+\t\t", "+\tint accelerator = Display.translateKey (keysym);", "+\tif (accelerator == 0) accelerator = key;", "+\tif (accelerator == 0) return false;", "+\tif ((xEvent.state & OS.Mod1Mask) != 0) accelerator |= SWT.ALT;", "+\tif ((xEvent.state & OS.ShiftMask) != 0) accelerator |= SWT.SHIFT;", "+\tif ((xEvent.state & OS.ControlMask) != 0) accelerator |= SWT.CONTROL;", "+\treturn menuBar.translateAccelerator (accelerator, doit);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93713054708be38098eb39550c45afa6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "eda2a2418c4450b2d104d71f5bf6f8ca33cebc34", "commitAfterChange": "531850a3e0806300795ef7d038564fab44c70aee", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " boolean translateAccelerator (char key, int keysym, XKeyEvent xEvent, boolean doit)", "signatureAfterChange": " boolean translateAccelerator (char key, int keysym, XKeyEvent xEvent, boolean doit)", "diff": ["-\t", "-\t/* Ignore modifiers. */", "-\tswitch (keysym) {", "-\t\tcase OS.XK_Control_L:", "-\t\tcase OS.XK_Control_R:", "-\t\tcase OS.XK_Alt_L:", "-\t\tcase OS.XK_Alt_R:", "-\t\tcase OS.XK_Shift_L:", "-\t\tcase OS.XK_Shift_R:", "-\t\t\treturn false;\t\t\t\t\t", "-\t}", "-\t", "-\t/*", "-\t* Bug in MOTIF.  On Solaris only, XK_F11 and XK_F12 are not", "-\t* translated correctly by XLookupString().  They are mapped", "-\t* to 0x1005FF10 and 0x1005FF11 respectively.  The fix is to", "-\t* look for these values explicitly and correct them.", "-\t*/", "-\tif (OS.IsSunOS && keysym != 0) {", "-\t\tswitch (keysym) {", "-\t\t\tcase 0x1005FF10: ", "-\t\t\t\tkeysym = OS.XK_F11;", "-\t\t\t\tkey = 0;", "-\t\t\t\tbreak;", "-\t\t\tcase 0x1005FF11:", "-\t\t\t\tkeysym = OS.XK_F12;", "-\t\t\t\tkey = 0;", "-\t\t\t\tbreak;", "-\t\t}", "-\t\t/*", "-\t\t* Bug in MOTIF.  On Solaris only, there is garbage in the", "-\t\t* high 16-bits for Keysyms such as XK_Down.  Since Keysyms", "-\t\t* must be 16-bits to fit into a Character, mask away the", "-\t\t* high 16-bits on all platforms.", "-\t\t*/", "-\t\tkeysym &= 0xFFFF;", "-\t}", "-\t", "-\t/*", "-\t* Bug in Motif.  There are some keycodes for which ", "-\t* XLookupString() does not translate the character.", "-\t* Some examples are Shift+Tab and Ctrl+Space.", "-\t*/", "-\tswitch (keysym) {", "-\t\tcase OS.XK_ISO_Left_Tab: key = '\\t'; break;", "-\t\tcase OS.XK_space: key = ' '; break;", "-\t}", "-\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c7d7f45713211088670c8aa1e6f46d34", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "c22f380f4d6ba162caa0465e4ecbec7c222d05f5", "commitAfterChange": "1eac86ed2f2f9e03ad22a87e2beeaeb993a03feb", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "\r void setKeyState (Event event, XKeyEvent xEvent)", "signatureAfterChange": "\r void setKeyState (Event event, XKeyEvent xEvent)", "diff": ["-\t\tif (OS.XLookupString (xEvent, buffer, buffer.length, keysym, null) == 0) {\r", "-\t\t\t/*\r", "-\t\t\t* Bug in MOTIF.  On Solaris only, XK_F11 and XK_F12 are not\r", "-\t\t\t* translated correctly by XLookupString().  They are mapped\r", "-\t\t\t* to 0x1005FF10 and 0x1005FF11 respectively.  The fix is to\r", "-\t\t\t* look for these values explicitly and correct them.\r", "-\t\t\t*/\r", "-\t\t\tif (OS.IsSunOS) {\r", "-\t\t\t\tif (keysym [0] == 0x1005FF10) keysym [0] = OS.XK_F11;\r", "-\t\t\t\tif (keysym [0] == 0x1005FF11) keysym [0] = OS.XK_F12;\r", "-\t\t\t\t/*\r", "-\t\t\t\t* Bug in MOTIF.  On Solaris only, there is garbage in the\r", "-\t\t\t\t* high 16-bits for Keysyms such as XK_Down.  Since Keysyms\r", "-\t\t\t\t* must be 16-bits to fit into a Character, mask away the\r", "-\t\t\t\t* high 16-bits on all platforms.\r", "-\t\t\t\t*/\r", "-\t\t\t\tkeysym [0] &= 0xFFFF;\r", "+\t\tint lookupLength = OS.XLookupString (xEvent, buffer, buffer.length, keysym, null);\r", "+\t\t/*\r", "+\t\t* Bug in MOTIF.  On Solaris only, XK_F11 and XK_F12 are not\r", "+\t\t* translated correctly by XLookupString().  They are mapped\r", "+\t\t* to 0x1005FF10 and 0x1005FF11 respectively.  The fix is to\r", "+\t\t* look for these values explicitly and correct them.\r", "+\t\t*/\r", "+\t\tif (OS.IsSunOS && keysym [0] != 0) {\r", "+\t\t\tswitch (keysym [0]) {\r", "+\t\t\t\tcase 0x1005FF10: \r", "+\t\t\t\t\tkeysym [0] = OS.XK_F11;\r", "+\t\t\t\t\tlookupLength = 0;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t\tcase 0x1005FF11:\r", "+\t\t\t\t\tkeysym [0] = OS.XK_F12;\r", "+\t\t\t\t\tlookupLength = 0;\r", "+\t\t\t\t\tbreak;\r", "+\t\t\t/*\r", "+\t\t\t* Bug in MOTIF.  On Solaris only, there is garbage in the\r", "+\t\t\t* high 16-bits for Keysyms such as XK_Down.  Since Keysyms\r", "+\t\t\t* must be 16-bits to fit into a Character, mask away the\r", "+\t\t\t* high 16-bits on all platforms.\r", "+\t\t\t*/\r", "+\t\t\tkeysym [0] &= 0xFFFF;\r", "+\t\t}\r", "+\t\tif (lookupLength == 0) {\r", "-\t\t\t* Handle known cases for which XLookupString fails.\r", "+\t\t\t* If translateKey () could not find a translation for the keysym\r", "+\t\t\t* then attempt some known keysyms for which we can provide the\r", "+\t\t\t* appropriate character.\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5697fae86ca0b56105429551ac8b4877", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "79227b5a49c00b963ad602edd42ff8b19e607168", "commitAfterChange": "2e59efd73e90759ed48636b0f81f17f1c8202cfa", "methodNumberBeforeChange": 97, "methodNumberAfterChange": 98, "signatureBeforeChange": "\r byte [] sendKeyEvent (int type, XKeyEvent xEvent)", "signatureAfterChange": "\r void sendKeyEvent (int type, XKeyEvent xEvent)", "diff": ["-byte [] sendKeyEvent (int type, XKeyEvent xEvent) {\r", "-\t\r", "-\t/* Look up the keysym and character(s) */\r", "-\tbyte [] buffer;\r", "-\tboolean isVirtual = false;\r", "-\tint [] keysym = new int [1];\r", "-\tif (xEvent.keycode != 0) {\r", "-\t\tbuffer = new byte [1];\r", "-\t\tisVirtual = OS.XLookupString (xEvent, buffer, buffer.length, keysym, null) == 0;\r", "-\t} else {\r", "-\t\t/*\r", "-\t\t* Bug in Motif. On Linux only, XmImMbLookupString() does not return \r", "-\t\t* XBufferOverflow as the status if the buffer is too small. The fix is\r", "-\t\t* to pass a bigger buffer.\r", "-\t\t*/\r", "-\t\tbuffer = new byte [512];\r", "-\t\tint [] status = new int [1];\r", "-\t\tint size = OS.XmImMbLookupString (handle, xEvent, buffer, buffer.length, keysym, status);\r", "-\t\tif (status [0] == OS.XBufferOverflow) {\r", "-\t\t\tbuffer = new byte [size];\r", "-\t\t\tsize = OS.XmImMbLookupString (handle, xEvent, buffer, size, keysym, status);\r", "-\t\t}\r", "-\t\tif (size == 0) return null;\r", "-\t}\r", "-\r", "-\t* Bug in MOTIF.  On Solaris only, XK_F11 and XK_F12 are not\r", "-\t* translated correctly by XLookupString().  They are mapped\r", "-\t* to 0x1005FF10 and 0x1005FF11 respectively.  The fix is to\r", "-\t* look for these values explicitly and correct them.\r", "-\tif (OS.IsSunOS) {\r", "-\t\tif ((keysym [0] == 0x1005FF10) || (keysym [0] == 0x1005FF11)) {\r", "-\t\t\tif (keysym [0] == 0x1005FF10) keysym [0] = OS.XK_F11;\r", "-\t\t\tif (keysym [0] == 0x1005FF11) keysym [0] = OS.XK_F12;\r", "-\t\t}\r", "-\t/*\r", "-\t* Bug in MOTIF.  On Solaris only, their is garbage in the\r", "-\t* high 16-bits for Keysyms such as XK_Down.  Since Keysyms\r", "-\t* must be 16-bits to fit into a Character, mask away the\r", "-\t* high 16-bits on all platforms.\r", "-\t*/\r", "-\tkeysym [0] &= 0xFFFF;\r", "-\r", "-\t\tif (isVirtual) event.keyCode = Display.translateKey (keysym [0]);\r", "-\t\tif ((xEvent.state & OS.Mod1Mask) != 0) event.stateMask |= SWT.ALT;\r", "-\t\tif ((xEvent.state & OS.ShiftMask) != 0) event.stateMask |= SWT.SHIFT;\r", "-\t\tif ((xEvent.state & OS.ControlMask) != 0) event.stateMask |= SWT.CONTROL;\r", "-\t\tif ((xEvent.state & OS.Button1Mask) != 0) event.stateMask |= SWT.BUTTON1;\r", "-\t\tif ((xEvent.state & OS.Button2Mask) != 0) event.stateMask |= SWT.BUTTON2;\r", "-\t\tif ((xEvent.state & OS.Button3Mask) != 0) event.stateMask |= SWT.BUTTON3;\r", "-\t\r", "+void sendKeyEvent (int type, XKeyEvent xEvent) {\r", "+\tEvent event = new Event ();\r", "+\tevent.time = xEvent.time;\r", "+\tsetKeyState (event, xEvent);\r", "+\tpostEvent (type, event);\r", "+}\r"]}], "num": 46520}
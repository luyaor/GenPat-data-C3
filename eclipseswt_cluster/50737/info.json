{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b5227473cdeb0b7f1276966d5beed64", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bf845ad5c26b5f14e8778675a1e8c4d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "80f137cfd2db6016880fb35b713904c3f9862024", "commitAfterChange": "3d6268b28bff93d191d7c30b9cc692bcbf536b2f", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 50, "signatureBeforeChange": "  int gtk_event_after (int widget, int gdkEvent)", "signatureAfterChange": "  int gtk_event_after (int widget, int gdkEvent)", "diff": ["+\t* ", "+\t* Feature in GTK. When the user clicks anywhere in an editable ", "+\t* combo box, a single focus event should be issued, despite the ", "+\t* fact that focus might switch between the drop down button and", "+\t* the text field. The fix is to use gtk_combo_box_set_focus_on_click ()", "+\t* to eat all focus events while focus is in the combo box. When the ", "+\t* user clicks on the drop down button focus is assigned to the text ", "+\t* field.", "+\t\t\t\t\t}", "+\t\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 6, 0)) {", "+\t\t\t\t\t\tif ((style & SWT.READ_ONLY) == 0 && widget == buttonHandle) {", "+\t\t\t\t\t\t\tOS.gtk_widget_grab_focus (entryHandle);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.GDK_FOCUS_CHANGE: {", "+\t\t\t\tif (OS.GTK_VERSION >= OS.VERSION (2, 6, 0)) {", "+\t\t\t\t\tif ((style & SWT.READ_ONLY) == 0) {", "+\t\t\t\t\t\tGdkEventFocus gdkEventFocus = new GdkEventFocus ();", "+\t\t\t\t\t\tOS.memmove (gdkEventFocus, gdkEvent, GdkEventFocus.sizeof);", "+\t\t\t\t\t\tif (gdkEventFocus.in != 0) {", "+\t\t\t\t\t\t\tOS.gtk_combo_box_set_focus_on_click (handle, false);", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tOS.gtk_combo_box_set_focus_on_click (handle, true);", "+\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f965e52211787c94d1489ee495dc414", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "1351c057d2b4cac61e57f42e319cd86b4e587d74", "commitAfterChange": "7574e2036ff99c9e9b0efd33114a637c8b9647e2", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 109, "signatureBeforeChange": "  int gtk_scroll_event (int widget, int eventPtr)", "signatureAfterChange": "  int gtk_scroll_event (int widget, int eventPtr)", "diff": ["+\t\t\tif (!sendMouseEvent (SWT.MouseWheel, 0, 3, SWT.SCROLL_LINE, true, gdkEvent.time, gdkEvent.x_root, gdkEvent.y_root, gdkEvent.state, eventPtr)) {", "+\t\t\t\treturn 1;", "+\t\t\t}", "+\t\t\tbreak;", "-\t\t\tEvent event = new Event ();", "-\t\t\tevent.detail = SWT.SCROLL_LINE;", "-\t\t\tevent.count = gdkEvent.direction == OS.GDK_SCROLL_UP ? 3 : -3;", "-\t\t\tsendEvent (SWT.MouseWheel, event);", "-\t\t\tif (!event.doit) return 1;", "+\t\t\tif (!sendMouseEvent (SWT.MouseWheel, 0, -3, SWT.SCROLL_LINE, true, gdkEvent.time, gdkEvent.x_root, gdkEvent.y_root, gdkEvent.state, eventPtr)) {", "+\t\t\t\treturn 1;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1517e75cf1777dd64352a7ee8a930f77", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "ea15a960a853001410e58a3d24c8aee2da7a0620", "commitAfterChange": "20653c6768e7a089a6fded9c39628f2ae0b74cbf", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " public boolean open ()", "signatureAfterChange": " public boolean open ()", "diff": ["-\tint hwndTransparent = 0;", "-\tif (!mouseDown) {", "+\tboolean isVista = !OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0);", "+\tif ((parent == null && isVista) || !mouseDown) {", "-\t\t\tOS.WS_EX_TRANSPARENT,", "+\t\t\tisVista ? OS.WS_EX_LAYERED | OS.WS_EX_NOACTIVATE : OS.WS_EX_TRANSPARENT,", "-\t\t\tOS.WS_POPUP | OS.WS_VISIBLE,", "+\t\t\tOS.WS_POPUP,", "+\t\tif (isVista) {", "+\t\t\tOS.SetLayeredWindowAttributes (hwndTransparent, 0xFFFFFF, (byte)0xFF, OS.LWA_COLORKEY | OS.LWA_ALPHA);", "+\t\t}", "+\t\tOS.ShowWindow (hwndTransparent, OS.SW_SHOWNOACTIVATE);", "-\t/* Tracker behaves like a Dialog with its own OS event loop. */", "-\tMSG msg = new MSG ();", "-\twhile (tracking && !cancelled) {", "-\t\tif (parent != null && parent.isDisposed ()) break;", "-\t\tOS.GetMessage (msg, 0, 0, 0);", "-\t\tOS.TranslateMessage (msg);", "-\t\tswitch (msg.message) {", "-\t\t\tcase OS.WM_LBUTTONUP:", "-\t\t\tcase OS.WM_MOUSEMOVE:", "-\t\t\t\twmMouse (msg.message, msg.wParam, msg.lParam);", "-\t\t\t\tbreak;", "-\t\t\tcase OS.WM_IME_CHAR: wmIMEChar (msg.hwnd, msg.wParam, msg.lParam); break;", "-\t\t\tcase OS.WM_CHAR: wmChar (msg.hwnd, msg.wParam, msg.lParam); break;", "-\t\t\tcase OS.WM_KEYDOWN: wmKeyDown (msg.hwnd, msg.wParam, msg.lParam); break;", "-\t\t\tcase OS.WM_KEYUP: wmKeyUp (msg.hwnd, msg.wParam, msg.lParam); break;", "-\t\t\tcase OS.WM_SYSCHAR: wmSysChar (msg.hwnd, msg.wParam, msg.lParam); break;", "-\t\t\tcase OS.WM_SYSKEYDOWN: wmSysKeyDown (msg.hwnd, msg.wParam, msg.lParam); break;", "-\t\t\tcase OS.WM_SYSKEYUP: wmSysKeyUp (msg.hwnd, msg.wParam, msg.lParam); break;", "+\ttry {", "+\t\t/* Tracker behaves like a Dialog with its own OS event loop. */", "+\t\tMSG msg = new MSG ();", "+\t\twhile (tracking && !cancelled) {", "+\t\t\tif (parent != null && parent.isDisposed ()) break;", "+\t\t\tOS.GetMessage (msg, 0, 0, 0);", "+\t\t\tOS.TranslateMessage (msg);", "+\t\t\tswitch (msg.message) {", "+\t\t\t\tcase OS.WM_LBUTTONUP:", "+\t\t\t\tcase OS.WM_MOUSEMOVE:", "+\t\t\t\t\twmMouse (msg.message, msg.wParam, msg.lParam);", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase OS.WM_IME_CHAR: wmIMEChar (msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\t\t\tcase OS.WM_CHAR: wmChar (msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\t\t\tcase OS.WM_KEYDOWN: wmKeyDown (msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\t\t\tcase OS.WM_KEYUP: wmKeyUp (msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\t\t\tcase OS.WM_SYSCHAR: wmSysChar (msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\t\t\tcase OS.WM_SYSKEYDOWN: wmSysKeyDown (msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\t\t\tcase OS.WM_SYSKEYUP: wmSysKeyUp (msg.hwnd, msg.wParam, msg.lParam); break;", "+\t\t\t}", "+\t\t\tif (OS.WM_KEYFIRST <= msg.message && msg.message <= OS.WM_KEYLAST) continue;", "+\t\t\tif (OS.WM_MOUSEFIRST <= msg.message && msg.message <= OS.WM_MOUSELAST) continue;", "+\t\t\tif (!(parent == null && isVista)) {", "+\t\t\t\tif (msg.message == OS.WM_PAINT) {", "+\t\t\t\t\tupdate ();", "+\t\t\t\t\tdrawRectangles (rectangles, stippled);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.DispatchMessage (msg);", "+\t\t\tif (!(parent == null && isVista)) {", "+\t\t\t\tif (msg.message == OS.WM_PAINT) {", "+\t\t\t\t\tdrawRectangles (rectangles, stippled);", "+\t\t\t\t}", "+\t\t\t}", "-\t\tif (OS.WM_KEYFIRST <= msg.message && msg.message <= OS.WM_KEYLAST) continue;", "-\t\tif (OS.WM_MOUSEFIRST <= msg.message && msg.message <= OS.WM_MOUSELAST) continue;", "-\t\tif (msg.message == OS.WM_PAINT) {", "+\t\tif (mouseDown) OS.ReleaseCapture ();", "+\t\tif (!isDisposed()) {", "-\t\tOS.DispatchMessage (msg);", "-\t\tif (msg.message == OS.WM_PAINT) {", "-\t\t\tdrawRectangles (rectangles, stippled);", "+\t} finally {", "+\t\t/*", "+\t\t* Cleanup: If a transparent window was created in order to capture events then", "+\t\t* destroy it and its callback object now.", "+\t\t*/", "+\t\tif (hwndTransparent != 0) {", "+\t\t\tOS.DestroyWindow (hwndTransparent);", "+\t\t\thwndTransparent = 0;", "-\t}", "-\tif (mouseDown) OS.ReleaseCapture ();", "-\tif (!isDisposed()) {", "-\t\tupdate ();", "-\t\tdrawRectangles (rectangles, stippled);", "-\t}", "-\t/*", "-\t* Cleanup: If a transparent window was created in order to capture events then", "-\t* destroy it and its callback object now.", "-\t*/", "-\tif (hwndTransparent != 0) {", "-\t\tOS.DestroyWindow (hwndTransparent);", "-\t}", "-\tif (newProc != null) {", "-\t\tnewProc.dispose ();", "-\t\toldProc = 0;", "-\t}", "-\t/*", "-\t* Cleanup: If this tracker was resizing then the last cursor that it created", "-\t* needs to be destroyed.", "-\t*/", "-\tif (resizeCursor != 0) {", "-\t\tOS.DestroyCursor (resizeCursor);", "-\t\tresizeCursor = 0;", "+\t\tif (newProc != null) {", "+\t\t\tnewProc.dispose ();", "+\t\t\toldProc = 0;", "+\t\t}", "+\t\t/*", "+\t\t* Cleanup: If this tracker was resizing then the last cursor that it created", "+\t\t* needs to be destroyed.", "+\t\t*/", "+\t\tif (resizeCursor != 0) {", "+\t\t\tOS.DestroyCursor (resizeCursor);", "+\t\t\tresizeCursor = 0;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ee51f55be0cfd9bd679927018d0722d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "68864ed7c9ad64ce59d0a80b5122e67a238d21ef", "commitAfterChange": "14d8d0d3e1117aced9ac9d0460bf8e1bf18b9d70", "methodNumberBeforeChange": 220, "methodNumberAfterChange": 220, "signatureBeforeChange": "\r void modifyContent(Event event, boolean updateCaret)", "signatureAfterChange": "\r void modifyContent(Event event, boolean updateCaret)", "diff": ["+\t\tboolean isCharacterRemove = replacedLength == 1 && event.text.length() == 0;\r", "-\t\t\r", "-\t\tif (updateCaret && isBidi()) {\r", "+\t\t\t\t\r", "+\t\tif (updateCaret && isBidi() && isCharacterRemove) {\r", "+\t\t\t// set the keyboard language to the language of the deleted character.\r", "+\t\t\t// determine direction boundary so that caret location can be updated \r", "+\t\t\t// properly.\r", "-\t\t\tStyledTextBidi bidi = new StyledTextBidi(gc, lineText, getBidiSegments(lineStartOffset, lineText));\r", "-\t\t\t\r", "-\t\t\tisDirectionBoundary = (offsetInLine > 0 && bidi.isRightToLeft(offsetInLine) != bidi.isRightToLeft(offsetInLine - 1));\r", "+\t\t\tStyledTextBidi bidi = new StyledTextBidi(gc, lineText, getBidiSegments(lineStartOffset, lineText));\t\t\t\r", "+\t\t\tif (isBackspace) {\r", "+\t\t\t\tif (offsetInLine > 0) {\r", "+\t\t\t\t\t// the line start/end does not represent a direction boundary \r", "+\t\t\t\t\t// even if the previous/next line has a different direction.\r", "+\t\t\t\t\tisDirectionBoundary = \r", "+\t\t\t\t\t\toffsetInLine < lineText.length() && \r", "+\t\t\t\t\t\t(bidi.isRightToLeft(offsetInLine) != bidi.isRightToLeft(offsetInLine - 1) || \r", "+\t\t\t\t\t\t bidi.isLocalNumber(offsetInLine) != bidi.isLocalNumber(offsetInLine - 1));\r", "+\t\t\t\t\tbidi.setKeyboardLanguage(offsetInLine - 1);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t\telse {\r", "+\t\t\t\tif (offsetInLine < lineText.length()) {\r", "+\t\t\t\t\t// the line start/end does not represent a direction boundary \r", "+\t\t\t\t\t// even if the previous/next line has a different direction.\r", "+\t\t\t\t\tisDirectionBoundary = \r", "+\t\t\t\t\t\toffsetInLine > 0 && \r", "+\t\t\t\t\t\t(bidi.isRightToLeft(offsetInLine) != bidi.isRightToLeft(offsetInLine - 1) || \r", "+\t\t\t\t\t\t bidi.isLocalNumber(offsetInLine) != bidi.isLocalNumber(offsetInLine - 1));\r", "+\t\t\t\t\tbidi.setKeyboardLanguage(offsetInLine);\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "-\t\t\t\tif (replacedLength == 1 && event.text.length() == 0) {\r", "+\t\t\t\tif (isCharacterRemove) {\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8c20b4f093190fd35b9aadb5221fe0d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "a1f7149f8a67dd08842e95288d377cd23ead83aa", "commitAfterChange": "b82b6bee783c1b3671f806906cfa127c639f7ce6", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void _addListener (int eventType, Listener listener)", "signatureAfterChange": "  void _addListener (int eventType, Listener listener)", "diff": ["+\t\t\tif (EXPLORER_THEME) {", "+\t\t\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\t\t\tnewBits &= ~OS.TVS_TRACKSELECT;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tif (EXPLORER_THEME) {", "+\t\t\t\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\t\t\t\tnewBits |= OS.TVS_HASLINES;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (EXPLORER_THEME) {", "+\t\t\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\t\t\tOS.SetWindowTheme (handle, null, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7283dcee3fe480eff5bfa652618d293b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "a6e1eaded48ebc97aa7341ed273f50c8ad8daa0b", "commitAfterChange": "4f4c47acced6715e0f6a76f259372df7c93c0a3e", "methodNumberBeforeChange": 149, "methodNumberAfterChange": 149, "signatureBeforeChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["+\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\tif (OS.GetFocus () != handle) OS.SetFocus (handle);", "+\t\t}", "+\t\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\t\tif (OS.GetFocus () != handle) OS.SetFocus (handle);", "+\t\t\t}", "+\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\tif (OS.GetFocus () != handle) OS.SetFocus (handle);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc6687eb62911b4f87fe6f89648f9225", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "9d92881b3b42b42f713c6b2022fdd425b5bdd96e", "commitAfterChange": "e9c202445b7800e816318f00aed3887885c67efd", "methodNumberBeforeChange": 219, "methodNumberAfterChange": 220, "signatureBeforeChange": " public void setEnabled (boolean enabled)", "signatureAfterChange": " public void setEnabled (boolean enabled)", "diff": ["+\t\t\tif (OS.GTK3 && OS.GTK_VERSION < OS.VERSION (3, 11, 9)) {", "+\t\t\t\tif (enterNotifyEventId > 0)", "+\t\t\t\t\tOS.g_signal_remove_emission_hook(enterNotifyEventSignalId, enterNotifyEventId);", "+\t\t\t\tenterNotifyEventId = 0;", "+", "+\t\t\t\t/*", "+\t\t\t\t * 427776: now we can remove any reference to the GdkWindow", "+\t\t\t\t * in a widget's internal hash table. this internal hash", "+\t\t\t\t * table was removed in GTK 3.11.9 so once only newer GTK is", "+\t\t\t\t * targeted, this workaround can be removed.", "+\t\t\t\t */", "+\t\t\t\tlong /*int*/ grabWidget = OS.g_object_get_qdata(enableWindow, SWT_GRAB_WIDGET);", "+\t\t\t\tif (grabWidget != 0) {", "+\t\t\t\t\tOS.g_object_set_qdata(grabWidget, GTK_POINTER_WINDOW, 0);", "+\t\t\t\t\tOS.g_object_set_qdata(enableWindow, SWT_GRAB_WIDGET, 0);", "+\t\t\t\t}", "+\t\t\t}", "+", "+\t\t\t/* 427776: we need to listen to all enter-notify-event signals to", "+\t\t\t * see if this new GdkWindow has been added to a widget's internal", "+\t\t\t * hash table, so when the GdkWindow is destroyed we can also remove", "+\t\t\t * that reference. */", "+\t\t\tif (OS.GTK3 && OS.GTK_VERSION < OS.VERSION (3, 11, 9))", "+\t\t\t\tenterNotifyEventId = OS.g_signal_add_emission_hook (enterNotifyEventSignalId, 0, enterNotifyEventFunc.getAddress (), enableWindow, 0);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00dca3800586cb0ba52eaa14fb9bf26b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGeneratorUI.java", "commitBeforeChange": "34830c5ea1d64c3a02443211fb13e925cac126f1", "commitAfterChange": "4e64580ba3040d30ac205fe496a0b9154e6fedb9", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 6, "signatureBeforeChange": " \t \tpublic void open()", "signatureAfterChange": " \t \tpublic void open()", "diff": ["+\t\t\tif (extraAttributes[i].equals(\"swt_gen\")) continue;", "-\t\t", "+", "+\t\tfinal Text editorTx = new Text(nodesTree, SWT.SINGLE);", "+\t\tfinal TreeEditor editor = new TreeEditor(nodesTree);", "+\t\teditor.grabHorizontal = true;", "+\t\teditor.setEditor(editorTx);", "+\t\tListener memberTextListener = new Listener() {", "+\t\t\tpublic void handleEvent(Event e) {", "+\t\t\t\tif (e.type == SWT.Traverse) {", "+\t\t\t\t\tswitch (e.detail) {", "+\t\t\t\t\t\tcase SWT.TRAVERSE_ESCAPE:", "+\t\t\t\t\t\t\teditor.setItem(null);", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\tdefault:", "+\t\t\t\t\t\t\treturn;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\teditorTx.setVisible(false);", "+\t\t\t\tTreeItem item = editor.getItem();", "+\t\t\t\tif (item == null) return;", "+\t\t\t\tint column = editor.getColumn();", "+\t\t\t\tString value = editorTx.getText();", "+\t\t\t\titem.setText(column, value);", "+\t\t\t\tElement node = (Element)item.getData();", "+\t\t\t\tString name = nodesTree.getColumn(column).getText();", "+\t\t\t\tif (value.length() != 0) {", "+\t\t\t\t\tnode.setAttribute(name, value);", "+\t\t\t\t} else {", "+\t\t\t\t\tnode.removeAttribute(name);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t};", "+\t\teditorTx.addListener(SWT.DefaultSelection, memberTextListener);", "+\t\teditorTx.addListener(SWT.FocusOut, memberTextListener);", "+\t\teditorTx.addListener(SWT.Traverse, memberTextListener);", "+\t\t\t\t\t\tif (!(item.getData() instanceof Element)) return;", "-\t\t\t\t\t\tfinal TreeEditor editor = new TreeEditor(nodesTree);", "-\t\t\t\t\t\teditor.grabHorizontal = true;", "-\t\t\t\t\t\tfinal Text editorTx = new Text(nodesTree, SWT.SINGLE);", "-\t\t\t\t\t\tListener memberTextListener = new Listener() {", "-\t\t\t\t\t\t\tpublic void handleEvent(Event e) {", "-\t\t\t\t\t\t\t\tif (e.type == SWT.Traverse) {", "-\t\t\t\t\t\t\t\t\tswitch (e.detail) {", "-\t\t\t\t\t\t\t\t\t\tcase SWT.TRAVERSE_ESCAPE:", "-\t\t\t\t\t\t\t\t\t\t\teditor.setItem(null);", "-\t\t\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t\t\tdefault:", "-\t\t\t\t\t\t\t\t\t\t\treturn;", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\teditorTx.setVisible(false);", "-\t\t\t\t\t\t\t\tTreeItem item = editor.getItem();", "-\t\t\t\t\t\t\t\tif (item == null) return;", "-\t\t\t\t\t\t\t\tint column = editor.getColumn();", "-\t\t\t\t\t\t\t\titem.setText(column, editorTx.getText());", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t};", "-\t\t\t\t\t\teditorTx.addListener(SWT.DefaultSelection, memberTextListener);", "-\t\t\t\t\t\teditorTx.addListener(SWT.FocusOut, memberTextListener);", "-\t\t\t\t\t\teditorTx.addListener(SWT.Traverse, memberTextListener);", "-\t\t\t\t\t\teditor.setEditor(editorTx);", "-\t\t\t\t\tTreeItem item = items[i];", "-\t\t\t\t\tDocument document = buildExtrasDocument(item);", "-\t\t\t\t\tif (document != null) {", "-\t\t\t\t\t\tgen.saveExtraAttributes((String)item.getData(), document);", "-\t\t\t\t\t}", "+\t\t\t\t\tupdateGenAttribute(items[i]);", "-\t\t\t\tgen.reloadExtraAttributes();", "+\t\t\t\tgen.generateAll();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "72cb4ce312d469e2be762ff201025c22", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "d57ce4c847d12740eaea9c78b892a134f6a3cb64", "commitAfterChange": "1d28c230c8521595a193c506a7bcba33dc702ce0", "methodNumberBeforeChange": 120, "methodNumberAfterChange": 120, "signatureBeforeChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["-\t\tsendMouseEvent (SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam);", "+\t\tif (!sendMouseEvent (SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam)) {", "+\t\t\tif (OS.GetCapture () != handle) OS.SetCapture (handle);", "+\t\t\treturn LRESULT.ZERO;", "+\t\t}", "-\t\t\tsendMouseEvent (SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam);", "+\t\t\tif (!sendMouseEvent (SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam)) {", "+\t\t\t\tif (OS.GetCapture () != handle) OS.SetCapture (handle);", "+\t\t\t\treturn LRESULT.ZERO;", "+\t\t\t}", "-\tsendMouseEvent (SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam);", "+\tif (!sendMouseEvent (SWT.MouseDown, 1, handle, OS.WM_LBUTTONDOWN, wParam, lParam)) {", "+\t\tif (OS.GetCapture () != handle) OS.SetCapture (handle);", "+\t\treturn LRESULT.ZERO;", "+\t}", "-\t\tEvent event = new Event ();", "-\t\tevent.x = (short) (lParam & 0xFFFF);", "-\t\tevent.y = (short) (lParam >> 16);", "-\t\tpostEvent (SWT.DragDetect, event);", "+\t\tsendDragEvent ((short) (lParam & 0xFFFF), (short) (lParam >> 16));"]}], "num": 50737}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d899d8558e3fbdeebc9f79107cb609f1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fc55b423f78945019a4b80279a09c48", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "d43f2bf20caf593b61daadca64c4f1b0ca2db4ab", "commitAfterChange": "f5db7b7b752b8d0f98bc5200337224a2a4a66bb0", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "  int canSetProperty (int iid, int propertyName, int _retVal)", "signatureAfterChange": "  int canSetProperty (int iid, int propertyName, int _retVal)", "diff": ["+\tint /*long*/[] result = new int /*long*/[1];", "+\tint rc = XPCOM.NS_GetServiceManager (result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\tresult[0] = 0;", "+\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);\t\t", "+\tserviceManager.Release ();", "+", "+\tnsIMemory memory = new nsIMemory (result[0]);", "+\tresult[0] = 0;", "-\tint /*long*/ ptr = C.malloc (bytes.length);", "+\tint /*long*/ ptr = memory.Alloc (bytes.length);", "+\tmemory.Release ();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e54ec798bf12f6c13d00353acadcc5a3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "d43f2bf20caf593b61daadca64c4f1b0ca2db4ab", "commitAfterChange": "f5db7b7b752b8d0f98bc5200337224a2a4a66bb0", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  int canCallMethod (int iid, int methodName, int _retVal)", "signatureAfterChange": "  int canCallMethod (int iid, int methodName, int _retVal)", "diff": ["+\tint /*long*/[] result = new int /*long*/[1];", "+\tint rc = XPCOM.NS_GetServiceManager (result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\tresult[0] = 0;", "+\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);\t\t", "+\tserviceManager.Release ();", "+", "+\tnsIMemory memory = new nsIMemory (result[0]);", "+\tresult[0] = 0;", "-\tint /*long*/ ptr = C.malloc (bytes.length);", "+\tint /*long*/ ptr = memory.Alloc (bytes.length);", "+\tmemory.Release ();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cc0ee3e01dc094de2d9d7bf207088a5c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "73fe9e8adea7be66a4dbedf58fb08cbd084dcade", "commitAfterChange": "9080b56426ba1c9487cec6c9519043946c8b5600", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 44, "signatureBeforeChange": "  Object convertToJava (nsIVariant variant, short type)", "signatureAfterChange": "  Object convertToJava (nsIVariant variant, short type)", "diff": ["+\t\t\tC.memset (iid, 0, nsID.sizeof);", "-\t\t\tint /*long*/[] ptr = new int /*long*/[1];", "-\t\t\tptr[0] = C.malloc (C.PTR_SIZEOF);", "+\t\t\tint /*long*/[] ptr = new int /*long*/[1];", "+\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\trc = XPCOM.NS_GetServiceManager (result);", "+\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\tserviceManager.Release ();", "+", "+\t\t\tnsIMemory memory = new nsIMemory (result[0]);", "+\t\t\tresult[0] = 0;", "+", "-\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\t\t\tif (ptr[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+\t\t\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\t\t\tC.free (ptr[0]);", "+\t\t\t\t\t\tmemory.Free (ptr[0]);", "+\t\t\t\t\t\tmemory.Release ();", "-\t\t\t\t\t\tC.free (ptr[0]);", "+\t\t\t\t\t\tmemory.Free (ptr[0]);", "+\t\t\t\t\t\tmemory.Release ();", "-\t\t\tC.free (ptr[0]);", "+\t\t\tmemory.Free (ptr[0]);", "+\t\t\tmemory.Release ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5085a7b34ed19bf48e2df1c8a595aff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "d43f2bf20caf593b61daadca64c4f1b0ca2db4ab", "commitAfterChange": "f5db7b7b752b8d0f98bc5200337224a2a4a66bb0", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  int canGetProperty (int iid, int propertyName, int _retVal)", "signatureAfterChange": "  int canGetProperty (int iid, int propertyName, int _retVal)", "diff": ["+\tint /*long*/[] result = new int /*long*/[1];", "+\tint rc = XPCOM.NS_GetServiceManager (result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\tresult[0] = 0;", "+\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);\t\t", "+\tserviceManager.Release ();", "+", "+\tnsIMemory memory = new nsIMemory (result[0]);", "+\tresult[0] = 0;", "-\tint /*long*/ ptr = C.malloc (bytes.length);", "+\tint /*long*/ ptr = memory.Alloc (bytes.length);", "+\tmemory.Release ();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f3008ada22935d0c6e3ebec171e9fc7a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "19051ffe4fd662e4376e9ef3523424e6764f8cc9", "commitAfterChange": "fec0d691465789ed5f8cc6a20256c17056f52d4b", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 19, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": " void createHandle (int index)", "diff": ["-\tint decorations = 0;", "-\tif ((style & SWT.NO_TRIM) == 0) {", "-\t\tif ((style & SWT.MIN) != 0) decorations |= OS.MWM_DECOR_MINIMIZE;", "-\t\tif ((style & SWT.MAX) != 0) decorations |= OS.MWM_DECOR_MAXIMIZE;", "-\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.MWM_DECOR_RESIZEH;", "-\t\tif ((style & SWT.BORDER) != 0) decorations |= OS.MWM_DECOR_BORDER;", "-\t\tif ((style & SWT.MENU) != 0) decorations |= OS.MWM_DECOR_MENU;", "-\t\tif ((style & SWT.TITLE) != 0) decorations |= OS.MWM_DECOR_TITLE;", "+\tif (shellHandle == 0) {", "+\t\tint decorations = 0;", "+\t\tif ((style & SWT.NO_TRIM) == 0) {", "+\t\t\tif ((style & SWT.MIN) != 0) decorations |= OS.MWM_DECOR_MINIMIZE;", "+\t\t\tif ((style & SWT.MAX) != 0) decorations |= OS.MWM_DECOR_MAXIMIZE;", "+\t\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.MWM_DECOR_RESIZEH;", "+\t\t\tif ((style & SWT.BORDER) != 0) decorations |= OS.MWM_DECOR_BORDER;", "+\t\t\tif ((style & SWT.MENU) != 0) decorations |= OS.MWM_DECOR_MENU;", "+\t\t\tif ((style & SWT.TITLE) != 0) decorations |= OS.MWM_DECOR_TITLE;", "+\t\t\t/*", "+\t\t\t* Feature in Motif.  Under some Window Managers (Sawmill), in order", "+\t\t\t* to get any border at all from the window manager it is necessary", "+\t\t\t* to set MWM_DECOR_BORDER.  The fix is to force these bits when any", "+\t\t\t* kind of border is requested.", "+\t\t\t*/", "+\t\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.MWM_DECOR_BORDER;", "+\t\t}", "+\t\t", "-\t\t* Feature in Motif.  Under some Window Managers (Sawmill), in order", "-\t\t* to get any border at all from the window manager it is necessary", "-\t\t* to set MWM_DECOR_BORDER.  The fix is to force these bits when any", "-\t\t* kind of border is requested.", "+\t\t* Note: Motif treats the modal values as hints to the Window Manager.", "+\t\t* For example, Enlightenment treats all modes except for SWT.MODELESS", "+\t\t* as SWT.APPLICATION_MODAL.  The Motif Window Manager honours all modes.", "-\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.MWM_DECOR_BORDER;", "-\t}", "-\t", "-\t/*", "-\t* Note: Motif treats the modal values as hints to the Window Manager.", "-\t* For example, Enlightenment treats all modes except for SWT.MODELESS", "-\t* as SWT.APPLICATION_MODAL.  The Motif Window Manager honours all modes.", "-\t*/", "-\tint inputMode = OS.MWM_INPUT_MODELESS;", "-\tif ((style & SWT.PRIMARY_MODAL) != 0) inputMode = OS.MWM_INPUT_PRIMARY_APPLICATION_MODAL;", "-\tif ((style & SWT.APPLICATION_MODAL) != 0) inputMode = OS.MWM_INPUT_FULL_APPLICATION_MODAL;", "-\tif ((style & SWT.SYSTEM_MODAL) != 0) inputMode = OS.MWM_INPUT_SYSTEM_MODAL;", "-\t", "-\t/* ", "-\t* Bug in Motif.  For some reason, if the title string", "-\t* length is not a multiple of 4, Motif occasionally", "-\t* draws garbage after the last character in the title.", "-\t* The fix is to pad the title.", "-\t*/", "-\tbyte [] buffer = {(byte)' ', 0, 0, 0};", "-\tint ptr = OS.XtMalloc (buffer.length);", "-\tOS.memmove (ptr, buffer, buffer.length);", "-\tint [] argList1 = {", "-\t\tOS.XmNmwmInputMode, inputMode,", "-\t\tOS.XmNmwmDecorations, decorations,", "-\t\tOS.XmNoverrideRedirect, (style & SWT.ON_TOP) != 0 ? 1 : 0,", "-\t\tOS.XmNtitle, ptr,", "-\t};", "-\t", "-\t/* ", "-\t* Feature in Motif.  On some Window Managers, when a top level", "-\t* shell is created with no decorations, the Window Manager does", "-\t* not reparent the window regardless of the XmNoverrideRedirect", "-\t* resource.  The fix is to treat the window as if it has been", "-\t* reparented by the Window Manager despite the fact that this", "-\t* has not really happened.", "-\t*/\t", "-\tif (isUndecorated ()) {", "-\t\treparented = true;", "-\t} ", "-\t", "-\t/*", "-\t* Feature in Motif.  When a top level shell has no parent and is", "-\t* application modal, Motif does not honour the modality.  The fix", "-\t* is to create the shell as a child of a hidden shell handle, the", "-\t* same way that XmNoverrideRedirect shells without parents are", "-\t* created.", "-\t*/", "-\tbyte [] appClass = display.appClass;", "-\tif (parent == null && (style & SWT.ON_TOP) == 0 && inputMode != OS.MWM_INPUT_FULL_APPLICATION_MODAL) {", "-\t\tint xDisplay = display.xDisplay;", "-\t\tint widgetClass = OS.applicationShellWidgetClass ();", "-\t\tshellHandle = OS.XtAppCreateShell (display.appName, appClass, widgetClass, xDisplay, argList1, argList1.length / 2);", "+\t\tint inputMode = OS.MWM_INPUT_MODELESS;", "+\t\tif ((style & SWT.PRIMARY_MODAL) != 0) inputMode = OS.MWM_INPUT_PRIMARY_APPLICATION_MODAL;", "+\t\tif ((style & SWT.APPLICATION_MODAL) != 0) inputMode = OS.MWM_INPUT_FULL_APPLICATION_MODAL;", "+\t\tif ((style & SWT.SYSTEM_MODAL) != 0) inputMode = OS.MWM_INPUT_SYSTEM_MODAL;", "+\t\t", "+\t\t/* ", "+\t\t* Bug in Motif.  For some reason, if the title string", "+\t\t* length is not a multiple of 4, Motif occasionally", "+\t\t* draws garbage after the last character in the title.", "+\t\t* The fix is to pad the title.", "+\t\t*/", "+\t\tbyte [] buffer = {(byte)' ', 0, 0, 0};", "+\t\tint ptr = OS.XtMalloc (buffer.length);", "+\t\tOS.memmove (ptr, buffer, buffer.length);", "+\t\tint [] argList1 = {", "+\t\t\tOS.XmNmwmInputMode, inputMode,", "+\t\t\tOS.XmNmwmDecorations, decorations,", "+\t\t\tOS.XmNoverrideRedirect, (style & SWT.ON_TOP) != 0 ? 1 : 0,", "+\t\t\tOS.XmNtitle, ptr,", "+\t\t};", "+\t\t", "+\t\t/* ", "+\t\t* Feature in Motif.  On some Window Managers, when a top level", "+\t\t* shell is created with no decorations, the Window Manager does", "+\t\t* not reparent the window regardless of the XmNoverrideRedirect", "+\t\t* resource.  The fix is to treat the window as if it has been", "+\t\t* reparented by the Window Manager despite the fact that this", "+\t\t* has not really happened.", "+\t\t*/\t", "+\t\tif (isUndecorated ()) {", "+\t\t\treparented = true;", "+\t\t} ", "+\t\t", "+\t\t/*", "+\t\t* Feature in Motif.  When a top level shell has no parent and is", "+\t\t* application modal, Motif does not honour the modality.  The fix", "+\t\t* is to create the shell as a child of a hidden shell handle, the", "+\t\t* same way that XmNoverrideRedirect shells without parents are", "+\t\t* created.", "+\t\t*/", "+\t\tbyte [] appClass = display.appClass;", "+\t\tif (parent == null && (style & SWT.ON_TOP) == 0 && inputMode != OS.MWM_INPUT_FULL_APPLICATION_MODAL) {", "+\t\t\tint xDisplay = display.xDisplay;", "+\t\t\tint widgetClass = OS.applicationShellWidgetClass ();", "+\t\t\tshellHandle = OS.XtAppCreateShell (display.appName, appClass, widgetClass, xDisplay, argList1, argList1.length / 2);", "+\t\t} else {", "+\t\t\tint widgetClass = OS.transientShellWidgetClass ();", "+//\t\t\tif ((style & SWT.ON_TOP) != 0) {", "+//\t\t\t\twidgetClass = OS.OverrideShellWidgetClass ();", "+//\t\t\t}", "+\t\t\tint parentHandle = display.shellHandle;", "+\t\t\tif (parent != null) parentHandle = parent.handle;", "+\t\t\tshellHandle = OS.XtCreatePopupShell (appClass, widgetClass, parentHandle, argList1, argList1.length / 2);", "+\t\t}", "+\t\tOS.XtFree (ptr);", "+\t\tif (shellHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tif (handle != 0) {", "+\t\t\tOS.XtSetMappedWhenManaged (shellHandle, false);", "+\t\t\tOS.XtRealizeWidget (shellHandle);", "+\t\t\tOS.XtSetMappedWhenManaged (shellHandle, true);", "+\t\t\tint xDisplay = display.xDisplay;", "+\t\t\tint xWindow = OS.XtWindow (shellHandle);", "+\t\t\tif (xWindow == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t/*", "+\t\t\t* NOTE:  The embedded parent handle must be realized", "+\t\t\t* before embedding and cannot be realized here because", "+\t\t\t* the handle belongs to another thread.", "+\t\t\t*/", "+\t\t\tOS.XReparentWindow (xDisplay, xWindow, handle, 0, 0);", "+\t\t\thandle = 0;", "+\t\t}", "+\t\t", "+\t\t/* Create scrolled handle */", "+\t\tcreateHandle (index, shellHandle, true);", "-\t\tint widgetClass = OS.transientShellWidgetClass ();", "-//\t\tif ((style & SWT.ON_TOP) != 0) {", "-//\t\t\twidgetClass = OS.OverrideShellWidgetClass ();", "-//\t\t}", "-\t\tint parentHandle = display.shellHandle;", "-\t\tif (parent != null) parentHandle = parent.handle;", "-\t\tshellHandle = OS.XtCreatePopupShell (appClass, widgetClass, parentHandle, argList1, argList1.length / 2);", "+\t\tint [] buffer = new int [1];", "+\t\tint [] argList = {OS.XmNchildren, 0, OS.XmNnumChildren, 0};", "+\t\tOS.XtGetValues (shellHandle, argList, argList.length / 2);", "+\t\tif (argList [3] < 1) error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.memmove (buffer, argList [1], 4);", "+\t\tscrolledHandle = buffer [0];", "+\t\tif (scrolledHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\targList [1] = argList [3] = 0;", "+\t\tOS.XtGetValues (scrolledHandle, argList, argList.length / 2);", "+\t\tif (argList [3] < 4) error (SWT.ERROR_NO_HANDLES);", "+\t\tOS.memmove (buffer, argList [1] + (argList [3] - 1) * 4, 4);", "+\t\thandle = buffer [0];", "+\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\tOS.XtFree (ptr);", "-\tif (shellHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\tif (handle != 0) {", "-\t\tOS.XtSetMappedWhenManaged (shellHandle, false);", "-\t\tOS.XtRealizeWidget (shellHandle);", "-\t\tOS.XtSetMappedWhenManaged (shellHandle, true);", "-\t\tint xDisplay = display.xDisplay;", "-\t\tint xWindow = OS.XtWindow (shellHandle);", "-\t\tif (xWindow == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\t/*", "-\t\t* NOTE:  The embedded parent handle must be realized", "-\t\t* before embedding and cannot be realized here because", "-\t\t* the handle belongs to another thread.", "-\t\t*/", "-\t\tOS.XReparentWindow (xDisplay, xWindow, handle, 0, 0);", "-\t\thandle = 0;", "-\t}", "-\t", "-\t/* Create scrolled handle */", "-\tcreateHandle (index, shellHandle, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b2d2c674d8e7b9eda122569d6fe6d68", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "d43f2bf20caf593b61daadca64c4f1b0ca2db4ab", "commitAfterChange": "f5db7b7b752b8d0f98bc5200337224a2a4a66bb0", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "  int canCreateWrapper (int iid, int _retVal)", "signatureAfterChange": "  int canCreateWrapper (int iid, int _retVal)", "diff": ["+\tint /*long*/[] result = new int /*long*/[1];", "+\tint rc = XPCOM.NS_GetServiceManager (result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\tresult[0] = 0;", "+\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);\t\t", "+\tserviceManager.Release ();", "+", "+\tnsIMemory memory = new nsIMemory (result[0]);", "+\tresult[0] = 0;", "-\tint /*long*/ ptr = C.malloc (bytes.length);", "+\tint /*long*/ ptr = memory.Alloc (bytes.length);", "+\tmemory.Release ();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cff9048a2bc3460987800480c8f0830", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "d43f2bf20caf593b61daadca64c4f1b0ca2db4ab", "commitAfterChange": "f5db7b7b752b8d0f98bc5200337224a2a4a66bb0", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  int getClassDescription (int _retValue)", "signatureAfterChange": "  int getClassDescription (int _retValue)", "diff": ["+\tint /*long*/[] result = new int /*long*/[1];", "+\tint rc = XPCOM.NS_GetServiceManager (result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\tresult[0] = 0;", "+\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);\t\t", "+\tserviceManager.Release ();", "+", "+\tnsIMemory memory = new nsIMemory (result[0]);", "+\tresult[0] = 0;", "-\tint /*long*/ ptr = C.malloc (bytes.length);", "+\tint /*long*/ ptr = memory.Alloc (bytes.length);", "+\tmemory.Release ();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "427b152d687483997ea3a6cf0edd40f2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "3a6b848c1b53a6acdc29c5142dc62bdb44ce6285", "commitAfterChange": "d43f2bf20caf593b61daadca64c4f1b0ca2db4ab", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "   int getInterfaces (int count, int array)", "signatureAfterChange": "   int getInterfaces (int count, int array)", "diff": ["-\tint /*long*/ arrayOfIIDs = C.malloc (nsID.sizeof * 2);", "-\tint /*long*/ arrayOfPtrs = C.malloc (C.PTR_SIZEOF * 2);", "-\tXPCOM.memmove (arrayOfIIDs, nsISecurityCheckedComponent.NS_ISECURITYCHECKEDCOMPONENT_IID, nsID.sizeof);", "-\tXPCOM.memmove (arrayOfPtrs, new int /*long*/[] {arrayOfIIDs}, C.PTR_SIZEOF);", "-\tXPCOM.memmove (arrayOfIIDs + nsID.sizeof, EXTERNAL_IID, nsID.sizeof);", "-\tXPCOM.memmove (arrayOfPtrs + C.PTR_SIZEOF, new int /*long*/[] {arrayOfIIDs + nsID.sizeof}, C.PTR_SIZEOF);", "-\tC.memmove (array, new int /*long*/[] {arrayOfPtrs}, C.PTR_SIZEOF);", "+\tint /*long*/[] result = new int /*long*/[1];", "+\tint rc = XPCOM.NS_GetServiceManager (result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\tresult[0] = 0;", "+\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);\t\t", "+\tserviceManager.Release ();", "+", "+\tnsIMemory memory = new nsIMemory (result[0]);", "+\tresult[0] = 0;", "+\tint /*long*/ securityCheckedComponentIID = memory.Alloc (nsID.sizeof);", "+\tXPCOM.memmove (securityCheckedComponentIID, nsISecurityCheckedComponent.NS_ISECURITYCHECKEDCOMPONENT_IID, nsID.sizeof);", "+\tint /*long*/ externalIID = memory.Alloc (nsID.sizeof);", "+\tXPCOM.memmove (externalIID, EXTERNAL_IID, nsID.sizeof);", "+\tint /*long*/ ptrArray = memory.Alloc (2 * C.PTR_SIZEOF);", "+\tC.memmove (ptrArray, new int /*long*/[] {securityCheckedComponentIID}, C.PTR_SIZEOF);", "+\tC.memmove (ptrArray + C.PTR_SIZEOF, new int /*long*/[] {externalIID}, C.PTR_SIZEOF);", "+\tC.memmove (array, new int /*long*/[] {ptrArray}, C.PTR_SIZEOF);", "+\tmemory.Release ();", "+"]}], "num": 26987}
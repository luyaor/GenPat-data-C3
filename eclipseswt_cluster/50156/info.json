{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5ceee8fa150a7d73795475330790b528", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a3c7d2fbb1dd8451698ffb595cbea6d0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "dcc83e1b1aecbb2bc960b9d6d3f7c33f19c9a54d", "commitAfterChange": "dbd82b99dbd56a8b80a9ea78d02d492f49ecfbc7", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  void createCOMInterfaces ()", "signatureAfterChange": "  void createCOMInterfaces ()", "diff": ["+", "+\tif (GetScriptableFlags24Proc != null) {", "+\t\tlong /*int*/ ppVtable = xpcScriptable.ppVtable;", "+\t\tlong /*int*/[] pVtable = new long /*int*/[1];", "+\t\tC.memmove (pVtable, ppVtable, C.PTR_SIZEOF);", "+\t\tlong /*int*/[] funcs = new long /*int*/[24];", "+\t\tC.memmove (funcs, pVtable[0], C.PTR_SIZEOF * funcs.length);", "+\t\tfuncs[4] = XPCOM.CALLBACK_GetScriptableFlags24 (GetScriptableFlags24Proc.getAddress ());", "+\t\tC.memmove (pVtable[0], funcs, C.PTR_SIZEOF * funcs.length);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8160768d6960caa38e588fd435ce938", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "800f0db681dd224b4823f551f85cc352d9839ab0", "commitAfterChange": "fc972a2dd70ea438e7d24a69180b16968356c7c2", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public void copyArea(int x, int y, int width, int height, int destX, int destY)", "signatureAfterChange": " public void copyArea(int x, int y, int width, int height, int destX, int destY)", "diff": ["-\t\t\tint child_clip = getClipping(widget, data.topWidget, true, true);\r", "+\t\t\tshort[] unused = new short[1];\r", "+\t\t\tint[] child_tiles = new int[1];\r", "+\t\t\tint child_clip = getClipping(widget, data.topWidget, true, true, child_tiles);\r", "+\t\t\t\t/*\r", "+\t\t\t\t* Determine source rectangles that should be copied considering\r", "+\t\t\t\t* the clipping region.\r", "+\t\t\t\t*/\r", "-\t\t\t\tshort[] unused = new short[1];\r", "+\t\t\t\t\r", "+\t\t\t\t/* Exclude rectangles obscured by widgets. */\r", "+\t\t\t\tdest_tiles = OS.PhClipTilings(dest_tiles, child_tiles[0], null);\r", "+\t\t\t\t\r", "+\t\t\t\t/* Copy rectangles. */\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* Damage destination rectangles that where obscured by widgets\r", "+\t\t\t* in the source rectangle.\r", "+\t\t\t*/\r", "+\t\t\tint src = OS.PhGetTile();\r", "+\t\t\tOS.memmove(src, rect, PhRect_t.sizeof);\r", "+\t\t\tint widget_damage_tiles = OS.PhIntersectTilings(src, child_tiles[0], unused);\r", "+\t\t\tOS.PhTranslateTiles(widget_damage_tiles, delta);\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* Damage the source rectangle excluding the intersecting area\r", "+\t\t\t* with the destination rectangle.\r", "+\t\t\t*/\r", "+\t\t\tint src_damage_tiles;\r", "-\t\t\t\tOS.PtDamageExtent (widget, rect);\r", "+\t\t\t\tsrc_damage_tiles = src;\r", "-\t\t\t\tint src = OS.PhGetTile();\r", "-\t\t\t\tOS.memmove(src, rect, PhRect_t.sizeof);\r", "-\t\t\t\tint damage_tile = OS.PhClipTilings(src, dest, null);\r", "-\t\t\t\tint[] damage_rects_count = new int[1];\r", "-\t\t\t\tint damage_rects = OS.PhTilesToRects(damage_tile, damage_rects_count);\r", "+\t\t\t\tsrc_damage_tiles = OS.PhClipTilings(src, dest, null);\r", "-\t\t\t\tOS.PhFreeTiles(damage_tile);\r", "-\t\t\t\tfor (int i=0; i<damage_rects_count[0]; i++) {\r", "-\t\t\t\t\tOS.memmove(rect, damage_rects + (i * PhRect_t.sizeof), PhRect_t.sizeof);\r", "-\t\t\t\t\tOS.PtDamageExtent (widget, rect);\r", "-\t\t\t\t}\r", "-\t\t\t\tOS.free(damage_rects);\r", "-\t}\r", "+\t\t\t\r", "+\t\t\t/* Merge all damage rectangles. */\r", "+\t\t\tint damage_tiles = OS.PhAddMergeTiles(src_damage_tiles, widget_damage_tiles, null);\r", "+\r", "+\t\t\t/* Exclude damage rectangles obscured by widgets. */\r", "+\t\t\tdamage_tiles = OS.PhClipTilings(damage_tiles, child_tiles[0], null);\r", "+\r", "+\t\t\tOS.PhFreeTiles (child_tiles[0]);\r", "+\r", "+\t\t\t/* Damage rectangles. */\t\t\t\r", "+\t\t\tint[] damage_rects_count = new int[1];\r", "+\t\t\tint damage_rects = OS.PhTilesToRects(damage_tiles, damage_rects_count);\r", "+\t\t\tOS.PhFreeTiles(damage_tiles);\r", "+\t\t\tfor (int i=0; i<damage_rects_count[0]; i++) {\r", "+\t\t\t\tOS.memmove(rect, damage_rects + (i * PhRect_t.sizeof), PhRect_t.sizeof);\r", "+\t\t\t\tOS.PtDamageExtent (widget, rect);\r", "+\t\t\t}\r", "+\t\t\tOS.free(damage_rects);\r", "+\t\t}\r"]}], "num": 50156}
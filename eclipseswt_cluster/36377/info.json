{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "074c660d813d95ab0635002e4cccdfd6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "217a4ced076da9bf537dabd949e2c87b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "e00bf3fc5c7ad64ff00e2eb62ffd3f015717f6a1", "commitAfterChange": "87c68b9f2a079fc5c0f07182bb7525b5bf7c88b9", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\t  public void drawFocus (int x, int y, int width, int height)", "signatureAfterChange": "\t  public void drawFocus (int x, int y, int width, int height)", "diff": ["+\tint hdc = handle, state = 0;", "+\tint gdipGraphics = data.gdipGraphics;", "+\tif (gdipGraphics != 0) {", "+\t\tint clipRgn = 0;", "+\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeNone);", "+\t\tint rgn = Gdip.Region_new();", "+\t\tif (rgn == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tGdip.Graphics_GetClip(gdipGraphics, rgn);", "+\t\tif (!Gdip.Region_IsInfinite(rgn, gdipGraphics)) {", "+\t\t\tclipRgn = Gdip.Region_GetHRGN(rgn, gdipGraphics);", "+\t\t}", "+\t\tGdip.Region_delete(rgn);", "+\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf);", "+\t\tfloat[] lpXform = null;", "+\t\tint matrix = Gdip.Matrix_new(1, 0, 0, 1, 0, 0);", "+\t\tif (matrix == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tGdip.Graphics_GetTransform(gdipGraphics, matrix);", "+\t\tif (!Gdip.Matrix_IsIdentity(matrix)) {", "+\t\t\tlpXform = new float[6];", "+\t\t\tGdip.Matrix_GetElements(matrix, lpXform);", "+\t\t}", "+\t\tGdip.Matrix_delete(matrix);", "+\t\thdc = Gdip.Graphics_GetHDC(gdipGraphics);", "+\t\tstate = OS.SaveDC(hdc);", "+\t\tif (lpXform != null) {", "+\t\t\tOS.SetGraphicsMode(hdc, OS.GM_ADVANCED);", "+\t\t\tOS.SetWorldTransform(hdc, lpXform);", "+\t\t}", "+\t\tif (clipRgn != 0) {", "+\t\t\tOS.SelectClipRgn(hdc, clipRgn);", "+\t\t\tOS.DeleteObject(clipRgn);", "+\t\t}", "+\t}", "-\tOS.DrawFocusRect(handle, rect);", "+\tOS.DrawFocusRect(hdc, rect);", "+\tif (gdipGraphics != 0) {", "+\t\tOS.RestoreDC(hdc, state);", "+\t\tGdip.Graphics_ReleaseHDC(gdipGraphics, hdc);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cbc975f481478ca4ffa4fda3c26905e4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Region.java", "commitBeforeChange": "4631a5a5553c2a27a1c80b2611f4f0cea8081a20", "commitAfterChange": "21eb151f1a668a710645fe690cf473d0b86ddaf0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 3, "signatureBeforeChange": "  static void cairo_region_intersect (long dst, long other)", "signatureAfterChange": "  static long gdk_region_polygon(int[] pointArray, int npoints, int fill_rule)", "diff": ["+static long /*int*/ gdk_region_polygon(int[] pointArray, int npoints, int fill_rule) {", "+\tif (OS.GTK_VERSION < OS.VERSION(3, 0, 0)) {", "+\t\treturn OS.gdk_region_polygon(pointArray, npoints, fill_rule);", "+\t//TODO this does not perform well and could fail if the polygon is too big", "+\tint minX = pointArray[0], maxX = minX;", "+\tint minY = pointArray[1], maxY = minY;", "+\tint count = npoints * 2;", "+\tfor (int i=2; i<count; i+=2) {", "+\t\tint x = pointArray[i], y = pointArray[i + 1];", "+\t\tif (x < minX) minX = x;", "+\t\tif (x > maxX) maxX = x;", "+\t\tif (y < minY) minY = y;", "+\t\tif (y > maxY) maxY = y;", "+\t}", "+\tlong /*int*/ surface = Cairo.cairo_image_surface_create(Cairo.CAIRO_FORMAT_A1, maxX - minX, maxY - minY);", "+\tif (surface == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tlong /*int*/ cairo = Cairo.cairo_create(surface);", "+\tif (cairo == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tCairo.cairo_move_to(cairo, pointArray[0] - minX, pointArray[1] - minY);", "+\tfor (int i=2; i<count; i+=2) {", "+\t\tCairo.cairo_line_to(cairo, pointArray[i]- minX, pointArray[i+1] - minY);", "+\t}", "+\tCairo.cairo_close_path(cairo);", "+\tCairo.cairo_set_source_rgb(cairo, 1, 1, 1);", "+\tCairo.cairo_set_fill_rule(cairo, Cairo.CAIRO_FILL_RULE_EVEN_ODD);", "+\tCairo.cairo_fill(cairo);", "+\tCairo.cairo_destroy(cairo);", "+\tlong /*int*/ polyRgn = OS.gdk_cairo_region_create_from_surface(surface);", "+\tOS.gdk_region_offset (polyRgn, minX, minY);", "+\tCairo.cairo_surface_destroy(surface);", "+\treturn polyRgn;", "-", "-static void cairo_region_intersect (long /*int*/ dst, long /*int*/ other) {", "-\tif (OS.GTK_VERSION >= OS.VERSION(3, 0, 0)) {", "-\t\tCairo.cairo_region_intersect (dst, other);", "-\t} else {", "-\t\tOS.gdk_region_intersect (dst, other);", "-\t}", "-}"]}], "num": 36377}
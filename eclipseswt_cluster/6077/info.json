{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d01e12aba0d6fd46be661a43c9aae1c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "089f3ec18255043d47a4ed5e2414429b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "c2ce437a63d3b60125a283c15cfca323c2e2ec7b", "commitAfterChange": "fdb50b5e94b2c9d3fb909c2896673e06375d4fe6", "methodNumberBeforeChange": 50, "methodNumberAfterChange": 51, "signatureBeforeChange": "  LRESULT WM_SIZE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_SIZE (int wParam, int lParam)", "diff": ["-\t\tint hwndChild = OS.GetWindow (handle, OS.GW_CHILD);", "-\t\tif (hwndChild != 0) {", "-\t\t\tint [] processID = new int [1];", "-\t\t\tint threadId = OS.GetWindowThreadProcessId (hwndChild, processID);", "-\t\t\tif (threadId != OS.GetCurrentThreadId ()) {", "-\t\t\t\tif (processID [0] == OS.GetCurrentProcessId ()) {", "-\t\t\t\t\tif (display.msgHook == 0) {", "-\t\t\t\t\t\tif (!OS.IsWinCE) {", "-\t\t\t\t\t\t\tdisplay.getMsgCallback = new Callback (display, \"getMsgProc\", 3);", "-\t\t\t\t\t\t\tdisplay.getMsgProc = display.getMsgCallback.getAddress ();", "-\t\t\t\t\t\t\tif (display.getMsgProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\t\t\t\t\t\tdisplay.msgHook = OS.SetWindowsHookEx (OS.WH_GETMESSAGE, display.getMsgProc, OS.GetLibraryHandle(), threadId);", "-\t\t\t\t\t\t\tOS.PostThreadMessage (threadId, OS.WM_NULL, 0, 0);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tint flags = OS.SWP_NOZORDER | OS.SWP_DRAWFRAME | OS.SWP_NOACTIVATE | OS.SWP_ASYNCWINDOWPOS;", "-\t\t\t\tOS.SetWindowPos (hwndChild, 0, 0, 0, lParam & 0xFFFF, lParam >> 16, flags);", "-\t\t\t}", "-\t\t}", "+\t\tresizeEmbeddedHandle (OS.GetWindow (handle, OS.GW_CHILD), lParam & 0xFFFF, lParam >> 16);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7e8f8790b3b43b982874daf168d0e65", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "147d1615f621339f30d0227193f0b040907c9480", "commitAfterChange": "4f94a8e41c5f58fd8cc31f50891f992413c14d7f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 6, "signatureBeforeChange": " public String[] getAvailableTypeNames()", "signatureAfterChange": " public String[] getAvailableTypeNames()", "diff": ["+\tbyte[][] types = _getAvailableTypes();", "+\tString[] names = new String[types.length];", "+\tfor (int i = 0; i < names.length; i++) {", "+\t\t/* Use the character encoding for the default locale */", "+\t\tnames[i] = new String(Converter.mbcsToWcs(null, types[i]));", "+\t}", "+\treturn names;", "+}", "-\tif (xDisplay == 0)", "-\t\tDND.error(SWT.ERROR_UNSPECIFIED);", "-\tif (xWindow == 0)", "-\t\tDND.error(SWT.ERROR_UNSPECIFIED);", "-\tif (OS.XmClipboardInquireCount(xDisplay, xWindow, count, max_length) != OS.XmClipboardSuccess)", "-\t\tDND.error(SWT.ERROR_UNSPECIFIED);", "-\tString[] types = new String[count[0]];", "-\t\tif (rc == OS.XmClipboardNoData){", "-\t\t\ttypes[i] = \"\";", "-\t\t\tcontinue;", "-\t\t}", "-\t\tif (rc != OS.XmClipboardSuccess)", "-\t\t\tDND.error(SWT.ERROR_UNSPECIFIED);", "-\t\tchar [] unicode = Converter.mbcsToWcs (null, buffer2);", "-\t\ttypes[i] = new String (unicode);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b313ffc70944672db39a1e17e684342", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "57e16b7b99eba5fe2e5104d125c685fb86330106", "commitAfterChange": "4100ba4ad00fb39125bdfc1a813e812b72175b67", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "\r void initializeDefaults ()", "signatureAfterChange": "\r void initializeDefaults ()", "diff": ["-\tdefaultFontList = labelFont;\r", "+\tdefaultFont = labelFont;\r", "-\t\r", "-\t/**\r", "-\t * Initialize the default font id to the first\r", "-\t * font in the default font list\r", "-\t */\r", "-\tint [] buffer = new int [1];\r", "-\tif (!OS.XmFontListInitFontContext (buffer, defaultFontList)) {\r", "-\t\treturn;\r", "-\t}\r", "-\tint context = buffer [0];\r", "-\tXFontStruct fontStruct = new XFontStruct ();\r", "-\tint [] fontStructPtr = new int [1];\r", "-\tint [] fontNamePtr = new int [1];\r", "-\t\r", "-\t/* Take the first entry from the font list */\r", "-\tint fontListEntry = OS.XmFontListNextEntry (context);\r", "-\tint fontPtr = OS.XmFontListEntryGetFont (fontListEntry, buffer);\r", "-\tif (buffer [0] == 0) { \r", "-\t\t/* FontList contains a single font */\r", "-\t\tOS.memmove (fontStruct, fontPtr, XFontStruct.sizeof);\r", "-\t\tdefaultFont = fontStruct.fid;\r", "-\t} else { \r", "-\t\t/* FontList contains a fontSet */\r", "-\t\t/* Take the first font in the font set */\r", "-\t\tint nFonts = OS.XFontsOfFontSet (fontPtr, fontStructPtr, fontNamePtr);\r", "-\t\tif (nFonts > 0) {\r", "-\t\t\tint [] fontStructs = new int [1];\r", "-\t\t\tOS.memmove (fontStructs, fontStructPtr [0], 4);\r", "-\t\t\tOS.memmove (fontStruct, fontStructs [0], XFontStruct.sizeof);\r", "-\t\t\tdefaultFont = fontStruct.fid;\r", "-\t\t}\r", "-\t}\r", "-\tOS.XmFontListFreeFontContext (context);\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "996665540fbe414ab95160a4c4ddb5af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "1265452bee8afa80211325ce57c825c332bf3b69", "commitAfterChange": "2fd6873ba6b589bfe796429ee32eb9fd672e966d", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 43, "signatureBeforeChange": " public void setImage (Image image)", "signatureAfterChange": " public void setImage (Image image)", "diff": ["-\t/*", "-\t* Feature in WinCE.  WM_SETICON and WM_GETICON set the icon", "-\t* for the window class, not the window instance.  This means", "-\t* that it is possible to set an icon into a window and then", "-\t* later free the icon, thus freeing the icon for every window.", "-\t* The fix is to avoid the API.", "-\t* ", "-\t* On WinCE PPC, icons in windows are not displayed anyways.", "-\t*/", "-\tif (OS.IsWinCE) {", "-\t\tthis.image = image;", "-\t\treturn;", "+\tthis.image = image;", "+\tsetImages (image, images);", "+}", "-\tint hImage = 0;", "-\tif (icon != null) icon.dispose ();", "-\ticon = null;", "-\t\tswitch (image.type) {", "-\t\t\tcase SWT.BITMAP:", "-\t\t\t\tImageData data = image.getImageData ();", "-\t\t\t\tImageData mask = data.getTransparencyMask ();", "-\t\t\t\ticon = new Image (display, data, mask);", "-\t\t\t\thImage = icon.handle;", "-\t\t\t\tbreak;", "-\t\t\tcase SWT.ICON:", "-\t\t\t\thImage = image.handle;", "-\t\t\t\tbreak;", "-\t\t\tdefault:", "-\t\t\t\treturn;", "-\tthis.image = image;", "-\tOS.SendMessage (handle, OS.WM_SETICON, OS.ICON_BIG, hImage);", "-\t* Bug in Windows.  When WM_SETICON is used to remove an", "-\t* icon from the window trimmings for a window with the", "-\t* extended style bits WS_EX_DLGMODALFRAME, the window", "-\t* trimmings do not redraw to hide the previous icon.", "-\t* The fix is to force a redraw.", "-\t*/", "-\t\tif (icon == null && (style & SWT.BORDER) != 0) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3997be701d0253f6726cdc816905ef8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "eca9561f00e8f6869c3f064d2cc210213e7961a5", "commitAfterChange": "7b035d7945e49f32511c350507eda7aad65fec22", "methodNumberBeforeChange": 238, "methodNumberAfterChange": 237, "signatureBeforeChange": "\r void showCaret()", "signatureAfterChange": "\r void showCaret()", "diff": ["- */\r", "-\tint line = content.getLineAtOffset(caretOffset);\r", "-\tint lineOffset = content.getOffsetAtLine(line);\r", "-\tint offsetInLine = caretOffset - lineOffset;\r", "-\tString lineText = content.getLine(line);\r", "-\tint xAtOffset = getXAtOffset(lineText, line, offsetInLine);\r", "-\tint clientAreaWidth = getClientArea().width;\r", "-\tint verticalIncrement = getVerticalIncrement();\r", "-\tint horizontalIncrement = clientAreaWidth / 4;\r", "-\tboolean scrolled = false;\t\t\r", "+\tboolean scrolled = scrollCaret();\t\t\r", "-\tif (xAtOffset < 0) {\r", "-\t\t// always make 1/4 of a page visible\r", "-\t\txAtOffset = Math.max(horizontalScrollOffset * -1, xAtOffset - horizontalIncrement);\t\r", "-\t\tscrollHorizontalBar(xAtOffset);\r", "-\t\tscrolled = true;\r", "-\t}\r", "-\telse \r", "-\tif (xAtOffset > clientAreaWidth) {\r", "-\t\t// always make 1/4 of a page visible\r", "-\t\txAtOffset = Math.min(contentWidth - horizontalScrollOffset, xAtOffset + horizontalIncrement);\r", "-\t\tscrollHorizontalBar(xAtOffset - clientAreaWidth);\r", "-\t\tscrolled = true;\r", "-\t}\r", "-\tif (line < topIndex) {\r", "-\t\tsetVerticalScrollOffset(line * verticalIncrement, true);\r", "-\t\tscrolled = true;\r", "-\t}\r", "-\telse\r", "-\tif (line > getBottomIndex()) {\r", "-\t\tsetVerticalScrollOffset((line - getBottomIndex()) * verticalIncrement + verticalScrollOffset, true);\r", "-\t\tscrolled = true;\r", "-\t}\r", "+\t}\r", "+\tif (isBidi()) {\r", "+\t\tsetBidiKeyboardLanguage();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf70b86dfc283eb3ba88c4a35858c698", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "d31e06c4079265cb2689e03fcbc52859dfee4a68", "commitAfterChange": "82177eb745bdc23324198cfa8598d74fb42e9dba", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\t/* clear the default templated foreground. */", "-\tint itemStyle = OS.gcnew_Style ();", "-\tint property = OS.Control_ForegroundProperty ();", "-\tint propertyPath = createDotNetString (\"Foreground\", false);", "-\tint binding = OS.gcnew_Binding (propertyPath);", "-\tint source = OS.gcnew_RelativeSource (OS.RelativeSourceMode_FindAncestor);", "-\tint treeViewType = OS.TreeView_typeid ();", "-\tOS.RelativeSource_AncestorType (source, treeViewType);", "-\tOS.Binding_RelativeSource (binding, source);", "-\tint setter = OS.gcnew_Setter (property, binding);", "-\tint setters = OS.Style_Setters (itemStyle);", "-\tOS.SetterBaseCollection_Add (setters, setter);", "-\tOS.FrameworkElement_Style (handle, itemStyle);", "-\tOS.GCHandle_Free (property);", "-\tOS.GCHandle_Free (propertyPath);", "-\tOS.GCHandle_Free (binding);", "-\tOS.GCHandle_Free (source);", "-\tOS.GCHandle_Free (treeViewType);", "-\tOS.GCHandle_Free (setter);", "-\tOS.GCHandle_Free (setters);", "-\tOS.GCHandle_Free (itemStyle);", "+\tfixStyle ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf11415978a199235f1763f5d00b09ce", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "be7a6b56ec36f2937282f99ce8f6d3a09d752bb5", "commitAfterChange": "388089e4bec9dc7b9e91ccd2ec44faabbba9290c", "methodNumberBeforeChange": 72, "methodNumberAfterChange": 72, "signatureBeforeChange": "  int kEventControlDraw (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventControlDraw (int nextHandler, int theEvent, int userData)", "diff": ["-\tif (OS.HIVIEW) {", "-\t\tboolean oldInPaint = display.inPaint;", "-\t\tdisplay.inPaint = true;", "-\t\tint[] context = new int [1];", "-\t\tOS.GetEventParameter (theEvent, OS.kEventParamCGContextRef, OS.typeCGContextRef, null, 4, null, context);", "-\t\tint visibleRgn = region [0];", "-\t\tdrawBackground (theControl [0], context [0]);", "-\t\tcallPaintEventHandler (theControl [0], region [0], visibleRgn, theEvent, nextHandler);", "-\t\tdrawWidget (theControl [0], context [0], region [0], visibleRgn, theEvent);", "-\t\tdisplay.inPaint = oldInPaint;", "-\t} else {", "-\t\tif (getDrawCount (theControl [0]) > 0) return OS.noErr;", "-\t\tint visibleRgn = getVisibleRegion (theControl [0], true);", "-\t\tOS.SectRgn(region [0], visibleRgn, visibleRgn);", "-\t\tif (!OS.EmptyRgn (visibleRgn)) {", "-\t\t\tint [] port = new int [1];", "-\t\t\tOS.GetPort (port);", "-\t\t\tOS.LockPortBits (port [0]);", "-//\t\t\tOS.QDSetDirtyRegion (port, visibleRgn);", "-\t\t\tint oldClip = OS.NewRgn ();", "-\t\t\tOS.GetClip (oldClip);", "-\t\t\tOS.SetClip (visibleRgn);", "-\t\t\tdrawBackground (theControl [0], 0);", "-\t\t\tcallPaintEventHandler (theControl [0], region [0], visibleRgn, theEvent, nextHandler);", "-\t\t\tdrawWidget (theControl [0], 0, region [0], visibleRgn, theEvent);", "-\t\t\tOS.SetClip (oldClip);", "-\t\t\tOS.DisposeRgn (oldClip);", "-\t\t\tOS.UnlockPortBits (port [0]);", "-\t\t}", "-\t\tOS.DisposeRgn (visibleRgn);", "-\t}", "+\tDisplay display = this.display;", "+\tboolean oldInPaint = display.inPaint;", "+\tdisplay.inPaint = true;", "+\tint[] context = new int [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamCGContextRef, OS.typeCGContextRef, null, 4, null, context);", "+\tint visibleRgn = region [0];", "+\tdrawBackground (theControl [0], context [0]);", "+\tcallPaintEventHandler (theControl [0], region [0], visibleRgn, theEvent, nextHandler);", "+\tdrawWidget (theControl [0], context [0], region [0], visibleRgn, theEvent);", "+\tdisplay.inPaint = oldInPaint;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a4667b21654a86cb436b0bcbad8e7dc6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/internal/ImageList.java", "commitBeforeChange": "846121807a2e67c6346cc340f783d83e0dcf2ab8", "commitAfterChange": "1e991076ca9e6b34673487e9bad2d8f055b18870", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public ImageList (int style)", "signatureAfterChange": "  public ImageList (int style)", "diff": ["+\tthis (style, 32, 32);", "+}", "-\thandle = OS.ImageList_Create (32, 32, flags, 16, 16);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b92d5b5d4c787ef516e1ed481897bc5f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 90, "signatureBeforeChange": " \t \tprivate int handleTooltipWindowCallback(int nextHandler, int eRefHandle, int whichWindow)", "signatureAfterChange": " \t \tprivate int handleMouseCallback(int nextHandler, int eRefHandle, int whichWindow)", "diff": ["+\tprivate int handleMouseCallback(int nextHandler, int eRefHandle, int whichWindow) {", "+\t\tint eventClass= OS.GetEventClass(eRefHandle);", "+\t\tint eventKind= OS.GetEventKind(eRefHandle);", "+\t\t", "+\t\tswitch (eventClass) {", "+\t\t\t", "+\t\tcase OS.kEventClassMouse:", "+\t\t\treturn handleMouseEvent(nextHandler, eRefHandle, eventKind, whichWindow);", "+\t\t", "+\t\tdefault:", "+\t\t\tSystem.out.println(\"handleMouseCallback: unexpected event class: \" + MacUtil.toString(eventClass));", "+\t\t\tbreak;", "+\t\t}", "+\t\treturn OS.eventNotHandledErr;", "+\t}", "-\tprivate int handleTooltipWindowCallback(int nextHandler, int eRefHandle, int whichWindow) {", "-\t\t", "-\t\tint eventClass= OS.GetEventClass(eRefHandle);", "-\t\tint eventKind= OS.GetEventKind(eRefHandle);", "-", "-\t\tif (eventClass == OS.kEventClassWindow && eventKind == OS.kEventWindowDrawContent) {", "-\t\t\tRect bounds= new Rect();", "-\t\t\tOS.GetWindowBounds(whichWindow, (short)OS.kWindowContentRgn, bounds);", "-\t\t\tint width= bounds.right - bounds.left;", "-\t\t\tint height= bounds.bottom - bounds.top;", "-\t\t\tOS.SetRect(bounds, (short)0, (short)0, (short)width, (short)height);", "-\t\t\tMacUtil.RGBBackColor(COLOR_INFO_BACKGROUND.handle);", "-\t\t\tMacUtil.RGBForeColor(COLOR_INFO_FOREGROUND.handle);", "-\t\t\tOS.EraseRect(bounds);", "-\t\t\tif (fToolTipText != null) {", "-\t\t\t\tOS.SetRect(bounds, (short)TOOLTIP_MARGIN, (short)TOOLTIP_MARGIN, (short)(width-TOOLTIP_MARGIN), (short)(height-TOOLTIP_MARGIN));", "-\t\t\t\tint sHandle= OS.CFStringCreateWithCharacters(fToolTipText);", "-\t\t\t\tOS.DrawThemeTextBox(sHandle, fHoverThemeFont, OS.kThemeStateActive, true, bounds, (short)0, 0);", "-\t\t\t\tOS.CFRelease(sHandle);", "-\t\t\t}", "-\t\t\treturn OS.noErr;", "-\t\t}", "-\t\treturn OS.eventNotHandledErr;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3072223487bcf1beff43bc51ac539205", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "64b0d3886f858ae9ed75f9caba6de9cc0ef40524", "commitAfterChange": "0e65a271847da0a71c09af43153a1e755642fadd", "methodNumberBeforeChange": 83, "methodNumberAfterChange": 84, "signatureBeforeChange": "  LRESULT wmMouseWheel (int hwnd, int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmMouseWheel (int hwnd, int wParam, int lParam)", "diff": ["-LRESULT wmMouseWheel (int /*long*/ hwnd, int /*long*/ wParam, int /*long*/ lParam) {", "-\tint [] linesToScroll = new int [1];", "-\tint detail;", "-\tOS.SystemParametersInfo (OS.SPI_GETWHEELSCROLLLINES, 0, linesToScroll, 0);", "-\tif (linesToScroll [0] == OS.WHEEL_PAGESCROLL) {", "-\t\tdetail = SWT.SCROLL_PAGE;", "-\t\tdetail = SWT.SCROLL_LINE;", "-\t\tdelta *= linesToScroll [0];", "-\t/* Check if the delta and the remainder have the same direction (sign) */", "-\tif ((delta ^ display.scrollRemainder) >= 0) delta += display.scrollRemainder;", "-\tdisplay.scrollRemainder = delta % OS.WHEEL_DELTA; ", "-\tif (!hooks (SWT.MouseWheel) && !filters (SWT.MouseWheel)) return null;", "-\tif (!sendMouseEvent (SWT.MouseWheel, 0, count, detail, true, hwnd, OS.WM_MOUSEWHEEL, wParam, lParam)) {", "-\t\treturn LRESULT.ZERO;", "-\t}", "-\treturn null;", "+", "+LRESULT wmMouseWheel (int /*long*/ hwnd, int /*long*/ wParam, int /*long*/ lParam) {", "+\treturn sendMouseWheelEvent(SWT.MouseWheel, hwnd, wParam, lParam) ? null : LRESULT.ZERO;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8fb4908f5d8ec1ec8bf634a36c4149c2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Caret.java", "commitBeforeChange": "609de1027ea2a7c3d0d1daa48c7956f1e8b6b579", "commitAfterChange": "606053bd685bca0d5cb127d4c4280db09c08af31", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " boolean drawCaret ()", "signatureAfterChange": " boolean drawCaret ()", "diff": ["-\t", "-\tint clipRgn= OS.NewRgn();", "-\tMacUtil.getVisibleRegion(parent.handle, clipRgn, true);", "-", "-\tRect bounds= new Rect();", "-\tMacUtil.getControlBounds(parent.handle, bounds);", "-\tint left = x+bounds.left;", "-\tint top = y+bounds.top;", "-\tOS.SetRect(bounds, (short)left, (short)top, (short)(left+nWidth), (short)(top+nHeight));", "-\t", "-\tint caretRgn= OS.NewRgn();", "-\tOS.RectRgn(caretRgn, bounds);", "-\tOS.SectRgn(caretRgn, clipRgn, caretRgn);", "-\t", "-\tif (!OS.EmptyRgn(caretRgn)) {", "-\t\tint[] port= new int[1];", "-\t\tOS.GetPort(port);", "-\t\tOS.SetPortWindowPort(OS.GetControlOwner(handle));\t", "-\t\tOS.InvertRgn(caretRgn);", "-\t\tOS.SetPort(port[0]);", "-\t}", "-\t", "-\tOS.DisposeRgn(clipRgn);", "-\tOS.DisposeRgn(caretRgn);", "-", "+\tGC gc= new GC(parent);", "+\tgc.setXORMode(true);", "+\tgc.fillRectangle(x, y, nWidth, nHeight);", "+\tgc.dispose();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8e2c642cb6ed4049e401f6a1fb9b87b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "751399cd435ff7ae4f611108a25dd9577f78e768", "commitAfterChange": "2aa842a0d510140da28edb5b7f888217965555a3", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": " void computeRuns (GC gc)", "signatureAfterChange": " void computeRuns (GC gc)", "diff": ["-\tStyleItem[] allRuns = itemize();", "+\tallRuns = itemize();", "-\t\t\t\t", "-\t\t\t\t\tchar[] chars = new char[run.length];", "-\t\t\t\t\ttext.getChars(run.start, run.start + run.length, chars, 0);", "-\t\t\t\t\tint hHeap = OS.GetProcessHeap();", "-\t\t\t\t\tint psla = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, SCRIPT_LOGATTR.sizeof * chars.length); ", "-\t\t\t\t\tOS.ScriptBreak(chars, chars.length, run.analysis, psla);", "+\t\t\t\t\tbreakRun(run);", "-\t\t\t\t\t\tOS.MoveMemory(logAttr, psla + (start * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof); ", "+\t\t\t\t\t\tOS.MoveMemory(logAttr, run.psla + (start * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof); ", "-\t\t\t\t\tOS.HeapFree(hHeap, 0, psla);", "-\t\t\t\t\tchar[] chars = new char[run.length];", "-\t\t\t\t\ttext.getChars(run.start, run.start + run.length, chars, 0);", "-\t\t\t\t\tint hHeap = OS.GetProcessHeap();", "-\t\t\t\t\tint psla = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, SCRIPT_LOGATTR.sizeof * chars.length);", "-\t\t\t\t\tOS.ScriptBreak(chars, chars.length, run.analysis, psla);", "+\t\t\t\t\tbreakRun(run);", "-\t\t\t\t\t\tOS.MoveMemory(logAttr, psla + (start * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof); ", "+\t\t\t\t\t\tOS.MoveMemory(logAttr, run.psla + (start * SCRIPT_LOGATTR.sizeof), SCRIPT_LOGATTR.sizeof); ", "-\t\t\t\t\tOS.HeapFree(hHeap, 0, psla);\t\t"]}], "num": 6077}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "f9f230a39b9564f9b4a6ca62b75bef34", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0d6ee6d2157eba3c7665b042a0caa297", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "ce2f35c3f6b1d0b5778f68f011b1d8668d3c5c72", "commitAfterChange": "00bee382096a1807d86474fed7c933116a37eeb8", "methodNumberBeforeChange": 159, "methodNumberAfterChange": 175, "signatureBeforeChange": "\r void handlePaint(Event event)", "signatureAfterChange": "\r void handlePaint(Event event)", "diff": ["-\tdraw(event.x, event.y, event.width, event.height, event.gc, true);\r", "+\tint startLine = (event.y + verticalScrollOffset) / lineHeight;\r", "+\tint paintYFromTopLine = (startLine - topIndex) * lineHeight;\r", "+\tint topLineOffset = topIndex * lineHeight - verticalScrollOffset;\r", "+\tint startY = paintYFromTopLine + topLineOffset;\t// adjust y position for pixel based scrolling\r", "+\tint renderHeight = event.y + event.height - startY;\r", "+\tint paintY = 0;\r", "+\tint lineCount = content.getLineCount();\r", "+\tRectangle clientArea = getClientArea();\r", "+\tColor background = getBackground();\r", "+\tColor foreground = getForeground();\r", "+\tImage lineBuffer;\r", "+\tGC lineGC;\r", "+\t\t\r", "+\t// Check if there is work to do. clientArea.width should never be 0\r", "+\t// if we receive a paint event but we never want to try and create \r", "+\t// an Image with 0 width.\r", "+\tif (clientArea.width == 0 || event.height == 0) {\t\t\r", "+\t\treturn;\r", "+\t}\r", "+\tif (isSingleLine()) {\r", "+\t\tlineCount = 1;\r", "+\t\tif (startLine > 1) {\r", "+\t\t\tstartLine = 1;\r", "+\t\t}\r", "+\t}\r", "+\tlineBuffer = new Image(getDisplay(), clientArea.width, renderHeight);\r", "+\tlineGC = new GC(lineBuffer);\r", "+\tlineGC.setFont(event.gc.getFont());\r", "+\tlineGC.setForeground(foreground);\r", "+\tlineGC.setBackground(background);\r", "+\tfor (int i = startLine; paintY < renderHeight && i < lineCount; i++, paintY += lineHeight) {\r", "+\t\tString line = content.getLine(i);\r", "+\t\tdrawLine(line, i, paintY, lineGC, background, foreground, true);\r", "+\t}\r", "+\tif (paintY < renderHeight) {\r", "+\t\tlineGC.setBackground(background);\r", "+\t\tlineGC.setForeground(background);\r", "+\t\tlineGC.fillRectangle(0, paintY, clientArea.width, renderHeight - paintY);\r", "+\t}\r", "+\tevent.gc.drawImage(lineBuffer, 0, startY);\r", "+\tlineGC.dispose();\r", "+\tlineBuffer.dispose();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "68487d9c03eb1096d6368629099ddd8a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/win32/org/eclipse/swt/dnd/HTMLTransfer.java", "commitBeforeChange": "1fa4084ed8dc080dcdc78ba5c226b5ac6e8e6469", "commitAfterChange": "4d4c8f126aa79df26892b3bdd7e8dd3fdcaa1ffb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void javaToNative (Object object, TransferData transferData)", "signatureAfterChange": " public void javaToNative (Object object, TransferData transferData)", "diff": ["-\t// HTML Format is stored as a null terminated byte array", "+\tint startHTML = HEADER.length();", "+\tint startFragment = startHTML + PREFIX.length();", "+\tint endFragment = startFragment + cchMultiByte - 1;", "+\tint endHTML = endFragment + SUFFIX.length();", "+\t", "+\tStringBuffer buffer = new StringBuffer(HEADER);", "+\tint maxLength = NUMBER.length();", "+\t//startHTML", "+\tint start = buffer.indexOf(NUMBER);", "+\tString temp = Integer.toString(startHTML);", "+\tbuffer.replace(start + maxLength-temp.length(), start + maxLength, temp);", "+\t//endHTML", "+\tstart = buffer.indexOf(NUMBER, start);", "+\ttemp = Integer.toString(endHTML);", "+\tbuffer.replace(start + maxLength-temp.length(), start + maxLength, temp);", "+\t//startFragment", "+\tstart = buffer.indexOf(NUMBER, start);", "+\ttemp = Integer.toString(startFragment);", "+\tbuffer.replace(start + maxLength-temp.length(), start + maxLength, temp);", "+\t//endFragment", "+\tstart = buffer.indexOf(NUMBER, start);", "+\ttemp = Integer.toString(endFragment);", "+\tbuffer.replace(start + maxLength-temp.length(), start + maxLength, temp);", "+\t", "+\tbuffer.append(PREFIX);", "+\tbuffer.append(string);", "+\tbuffer.append(SUFFIX);", "+\t", "+\tcount = buffer.length();", "+\tchars = new char[count + 1];", "+\tbuffer.getChars(0, count, chars, 0);", "+\tcchMultiByte = OS.WideCharToMultiByte(codePage, 0, chars, -1, null, 0, null, null);"]}], "num": 46398}
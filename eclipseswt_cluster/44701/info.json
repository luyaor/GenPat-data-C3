{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c93d0e953e7fb0beb9ab17fd460af938", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "16f4061727b41e761163fbc61b9ad75f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "8549b1db39ac8fd4bb7564c61e5b9a04b5efde6f", "commitAfterChange": "2b3120470b46968368044df3f94129d586bc41d5", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 92, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t//NOT DONE", "-//\t\tcase OS.LVN_GETDISPINFOA:", "-//\t\tcase OS.LVN_GETDISPINFOW: {", "-//\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-//\t\t\tif ((bits & OS.LVS_OWNERDATA) != 0) {", "-//\t\t\t\tNMLVDISPINFO info = new NMLVDISPINFO ();", "-//\t\t\t\tOS.MoveMemory (info, lParam, NMLVDISPINFO.sizeof);", "-//\t\t\t\tSystem.out.println (\"LVN_GETDISPINFO: \" + Integer.toHexString (info.mask));", "-//\t\t\t\tif ((info.mask & OS.LVIF_TEXT) != 0) {", "-//\t\t\t\t\tSystem.out.println (\"\\tLVIF_TEXT\");", "-//\t\t\t\t\tTableItem item = items [info.iItem];", "-//\t\t\t\t\tString string = item.text;", "-//\t\t\t\t\t//BUG - no null when overflow buffer", "-//\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, true);", "-//\t\t\t\t\tint byteCount = Math.min (buffer.length (), info.cchTextMax) * TCHAR.sizeof;", "-//\t\t\t\t\tOS.MoveMemory (info.pszText, buffer, byteCount);", "-//\t\t\t\t}", "-//\t\t\t\tif ((info.mask & OS.LVIF_IMAGE) != 0) {", "-//\t\t\t\t\tSystem.out.println (\"\\tLVIF_IMAGE\");", "-//\t\t\t\t\tTableItem item = items [info.iItem];", "-//\t\t\t\t\tif (item.image != null) info.iImage = imageIndex (item.image);", "-//\t\t\t\t}", "-//\t\t\t\tif ((info.mask & OS.LVIF_STATE) != 0) {", "-//\t\t\t\t\tSystem.out.println (\"\\tLVIF_STATE\");", "-//\t\t\t\t\tTableItem item = items [info.iItem];", "-//\t\t\t\t\tint state = 3;", "-//\t\t\t\t\t//if (item.checked) state++;", "-//\t\t\t\t\t//if (item.grayed) state +=2;", "-//\t\t\t\t\tinfo.state = state << 12;", "-//\t\t\t\t\tinfo.stateMask = OS.LVIS_STATEIMAGEMASK;", "-//\t\t\t\t}", "-//\t\t\t\tif ((info.mask & OS.LVIF_INDENT) != 0) {", "-//\t\t\t\t\tSystem.out.println (\"\\tLVIF_INDENT\");", "-//\t\t\t\t\tTableItem item = items [info.iItem];", "-//\t\t\t\t\t//info.iIndent = 1;", "-//\t\t\t\t}", "-//\t\t\t\tOS.MoveMemory (lParam, info, NMLVDISPINFO.sizeof);", "-//\t\t\t}", "-//\t\t\tbreak;", "-//\t\t}", "+\t\tcase OS.LVN_ODFINDITEMA:", "+\t\tcase OS.LVN_ODFINDITEMW: {", "+\t\t\tif ((style & SWT.VIRTUAL) != 0) {", "+\t\t\t\tNMLVFINDITEM pnmfi = new NMLVFINDITEM ();", "+\t\t\t\tOS.MoveMemory (pnmfi, lParam, NMLVFINDITEM.sizeof);", "+\t\t\t\tint index = Math.max (0, pnmfi.iStart - 1);", "+\t\t\t\treturn new LRESULT (index);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\t}", "+\t\tcase OS.LVN_GETDISPINFOA:", "+\t\tcase OS.LVN_GETDISPINFOW: {", "+\t\t\tNMLVDISPINFO plvfi = new NMLVDISPINFO ();", "+\t\t\tOS.MoveMemory (plvfi, lParam, NMLVDISPINFO.sizeof);", "+\t\t\tlastIndexOf = plvfi.iItem;", "+\t\t\tTableItem item = items [plvfi.iItem];", "+\t\t\titem.requested = true;", "+\t\t\tif ((style & SWT.VIRTUAL) != 0) {", "+\t\t\t\tEvent event = new Event ();", "+\t\t\t\tevent.item = item;", "+\t\t\t\tignoreRedraw = true;", "+\t\t\t\tsendEvent (SWT.SetData, event);", "+\t\t\t\t//widget could be disposed at this point", "+\t\t\t\tif (isDisposed ()) break;", "+\t\t\t\tignoreRedraw = false;", "+\t\t\t\tif (setScrollWidth (item, true)) redraw ();", "+\t\t\t}", "+\t\t\tif ((plvfi.mask & OS.LVIF_TEXT) != 0) {", "+\t\t\t\tString string = null;", "+\t\t\t\tif (plvfi.iSubItem == 0) {", "+\t\t\t\t\tstring = item.text;", "+\t\t\t\t} else {", "+\t\t\t\t\tString [] strings  = item.strings;", "+\t\t\t\t\tif (strings != null) string = strings [plvfi.iSubItem];", "+\t\t\t\t}", "+\t\t\t\tif (string != null) {", "+\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "+\t\t\t\t\tint byteCount = Math.min (buffer.length (), plvfi.cchTextMax - 1) * TCHAR.sizeof;", "+\t\t\t\t\tOS.MoveMemory (plvfi.pszText, buffer, byteCount);", "+\t\t\t\t\tOS.MoveMemory (plvfi.pszText + byteCount, new byte [TCHAR.sizeof], TCHAR.sizeof);", "+\t\t\t\t\tplvfi.cchTextMax = Math.min (plvfi.cchTextMax, string.length () + 1);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif ((plvfi.mask & OS.LVIF_IMAGE) != 0) {", "+\t\t\t\tImage image = null;", "+\t\t\t\tif (plvfi.iSubItem == 0) {", "+\t\t\t\t\timage = item.image;", "+\t\t\t\t} else {", "+\t\t\t\t\tImage [] images = item.images;", "+\t\t\t\t\tif (images != null) image = images [plvfi.iSubItem];", "+\t\t\t\t}", "+\t\t\t\tif (image != null) plvfi.iImage = imageIndex (image);", "+\t\t\t}", "+\t\t\tif ((plvfi.mask & OS.LVIF_STATE) != 0) {", "+\t\t\t\tif (plvfi.iSubItem == 0) {", "+\t\t\t\t\tint state = 1;", "+\t\t\t\t\tif (item.checked) state++;", "+\t\t\t\t\tif (item.grayed) state +=2;", "+\t\t\t\t\tplvfi.state = state << 12;", "+\t\t\t\t\tplvfi.stateMask = OS.LVIS_STATEIMAGEMASK;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif ((plvfi.mask & OS.LVIF_INDENT) != 0) {", "+\t\t\t\tif (plvfi.iSubItem == 0) plvfi.iIndent = item.imageIndent;", "+\t\t\t}", "+\t\t\tOS.MoveMemory (lParam, plvfi, NMLVDISPINFO.sizeof);", "+\t\t\tbreak;", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dcf221b0f5701488f41597f90de1fcd1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "e139d0ab76ea26e5296ceee7a81cdb4cd23f3694", "commitAfterChange": "bbce5172d2d0d10dab8588aa51fcb94c0df57391", "methodNumberBeforeChange": 90, "methodNumberAfterChange": 92, "signatureBeforeChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_NOTIFY (int wParam, int lParam)", "diff": ["+\t\t\tcase OS.NM_RELEASEDCAPTURE:", "+\t\t\t\tcancelMove = false;", "+\t\t\t\tbreak;", "+\t\t\tcase OS.HDN_BEGINDRAG: {", "+\t\t\t\tif (cancelMove) return LRESULT.ONE;", "+\t\t\t\tNMHEADER phdn = new NMHEADER ();", "+\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "+\t\t\t\tif (phdn.iItem == 0) {", "+\t\t\t\t\tcancelMove = true;", "+\t\t\t\t\treturn LRESULT.ONE;", "+\t\t\t\t}", "+\t\t\t\tif (phdn.iItem != -1) {", "+\t\t\t\t\tTreeColumn column = columns [phdn.iItem];", "+\t\t\t\t\tif (column != null && !column.getMoveable ()) {", "+\t\t\t\t\t\tcancelMove = true;", "+\t\t\t\t\t\treturn LRESULT.ONE;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t\tcase OS.HDN_ENDDRAG: {", "+\t\t\t\tcancelMove = false;", "+\t\t\t\tNMHEADER phdn = new NMHEADER ();", "+\t\t\t\tOS.MoveMemory (phdn, lParam, NMHEADER.sizeof);", "+\t\t\t\tif (phdn.iItem != -1 && phdn.pitem != 0) {", "+\t\t\t\t\tHDITEM pitem = new HDITEM ();", "+\t\t\t\t\tOS.MoveMemory (pitem, phdn.pitem, HDITEM.sizeof);", "+\t\t\t\t\tif ((pitem.mask & OS.HDI_ORDER) != 0 && pitem.iOrder != -1) {", "+\t\t\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "+\t\t\t\t\t\tint [] order = new int [count];", "+\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETORDERARRAY, count, order);", "+\t\t\t\t\t\tint index = 0;", "+\t\t\t\t\t\twhile (index < order.length) {", "+\t\t\t\t\t\t \tif (order [index] == phdn.iItem) break;", "+\t\t\t\t\t\t\tindex++;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tif (index == order.length) index = 0;", "+\t\t\t\t\t\tif (index == pitem.iOrder) break;", "+\t\t\t\t\t\tint start = Math.min (index, pitem.iOrder);", "+\t\t\t\t\t\tif (start == 0) return LRESULT.ONE;", "+\t\t\t\t\t\tint end = Math.max (index, pitem.iOrder);", "+\t\t\t\t\t\tRECT rect = new RECT (), itemRect = new RECT ();", "+\t\t\t\t\t\tOS.GetClientRect (handle, rect);", "+\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, order [start], itemRect);", "+\t\t\t\t\t\trect.left = Math.max (rect.left, itemRect.left);", "+\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, order [end], itemRect);", "+\t\t\t\t\t\trect.right = Math.min (rect.right, itemRect.right);", "+\t\t\t\t\t\tOS.InvalidateRect (handle, rect, true);", "+\t\t\t\t\t\tfor (int i=start; i<=end; i++) {", "+\t\t\t\t\t\t\tTreeColumn column = columns [order [i]];", "+\t\t\t\t\t\t\tif (!column.isDisposed ()) {", "+\t\t\t\t\t\t\t\tcolumn.postEvent (SWT.Move);", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbreak;", "+\t\t\t}", "-\t\t\t\t\t\tif (phdn.iItem < count - 1) {", "-\t\t\t\t\t\t\tfor (int i=phdn.iItem; i<count; i++) {", "-\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, i, itemRect);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\trect.right = itemRect.right;", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tint index = OS.SendMessage (hwndHeader, OS.HDM_ORDERTOINDEX, count - 1, 0);", "+\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEMRECT, index, itemRect);", "+\t\t\t\t\t\trect.right = itemRect.right;", "-\t\t\t\t\t\t\tfor (int i=phdn.iItem+1; i<count; i++) {", "-\t\t\t\t\t\t\t\tif (!newColumns [i].isDisposed ()) {", "-\t\t\t\t\t\t\t\t\tnewColumns [i].sendEvent (SWT.Move);", "+\t\t\t\t\t\t\tint [] order = new int [count];", "+\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETORDERARRAY, count, order);", "+\t\t\t\t\t\t\tboolean moved = false;", "+\t\t\t\t\t\t\tfor (int i=0; i<count; i++) {", "+\t\t\t\t\t\t\t\tTreeColumn nextColumn = newColumns [order [i]];", "+\t\t\t\t\t\t\t\tif (moved && !nextColumn.isDisposed ()) {", "+\t\t\t\t\t\t\t\t\tnextColumn.sendEvent (SWT.Move);", "+\t\t\t\t\t\t\t\tif (nextColumn == column) moved = true;"]}], "num": 44701}
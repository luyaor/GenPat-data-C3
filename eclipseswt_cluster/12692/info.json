{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ee90695b43251642137e1907f71bfc8b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e40ea60862527d4fc710bdfbd3b5639", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "d589019807dc8edefe4eebafacf497892e57bece", "commitAfterChange": "7ec2e420459073a76767eaf4412d2bd5b970dc99", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 21, "signatureBeforeChange": "  void createItem (TreeItem item, int hParent, int hInsertAfter)", "signatureAfterChange": "  void createItem (TreeItem item, int hParent, int hInsertAfter, int hItem)", "diff": ["-void createItem (TreeItem item, int hParent, int hInsertAfter) {", "-\tint id = lastID < items.length ? lastID : 0;", "-\twhile (id < items.length && items [id] != null) id++;", "-\tif (id == items.length) {", "-\t\t/*", "-\t\t* Grow the array faster when redraw is off or the", "-\t\t* table is not visible.  When the table is painted,", "-\t\t* the items array is resized to be smaller to reduce", "-\t\t* memory usage.", "-\t\t*/", "-\t\tint length = items.length + 4;", "-\t\tif (drawCount != 0 || !OS.IsWindowVisible (handle)) {", "-\t\t\tlength = Math.max (4, items.length * 3 / 2);", "-\t\t\tshrink = true;", "+void createItem (TreeItem item, int hParent, int hInsertAfter, int hItem) {", "+\tint id = -1;", "+\tif (item != null) {", "+\t\tid = lastID < items.length ? lastID : 0;", "+\t\twhile (id < items.length && items [id] != null) id++;", "+\t\tif (id == items.length) {", "+\t\t\t/*", "+\t\t\t* Grow the array faster when redraw is off or the", "+\t\t\t* table is not visible.  When the table is painted,", "+\t\t\t* the items array is resized to be smaller to reduce", "+\t\t\t* memory usage.", "+\t\t\t*/", "+\t\t\tint length = 0;", "+\t\t\tif (drawCount == 0 && OS.IsWindowVisible (handle)) {", "+\t\t\t\tlength = items.length + 4;", "+\t\t\t} else {", "+\t\t\t\tshrink = true;", "+\t\t\t\tlength = Math.max (4, items.length * 3 / 2);", "+\t\t\t}", "+\t\t\tTreeItem [] newItems = new TreeItem [length];", "+\t\t\tSystem.arraycopy (items, 0, newItems, 0, items.length);", "+\t\t\titems = newItems;", "-\t\tTreeItem [] newItems = new TreeItem [length + 4];", "-\t\tSystem.arraycopy (items, 0, newItems, 0, items.length);", "-\t\titems = newItems;", "+\t\tlastID = id + 1;", "-\tlastID = id + 1;", "-\tTVINSERTSTRUCT tvInsert = new TVINSERTSTRUCT ();", "-\ttvInsert.hParent = hParent;", "-\ttvInsert.hInsertAfter = hInsertAfter;", "-\ttvInsert.lParam = id;", "-\ttvInsert.pszText = OS.LPSTR_TEXTCALLBACK;", "-\ttvInsert.iImage = tvInsert.iSelectedImage = OS.I_IMAGECALLBACK;", "-\ttvInsert.mask = OS.TVIF_TEXT | OS.TVIF_IMAGE | OS.TVIF_SELECTEDIMAGE | OS.TVIF_HANDLE | OS.TVIF_PARAM;", "-\tif ((style & SWT.CHECK) != 0) {", "-\t\ttvInsert.mask = tvInsert.mask | OS.TVIF_STATE;", "-\t\ttvInsert.state = 1 << 12;", "-\t\ttvInsert.stateMask = OS.TVIS_STATEIMAGEMASK;", "+\tint hNewItem = 0;", "+\tif (hItem == 0) {", "+\t\tTVINSERTSTRUCT tvInsert = new TVINSERTSTRUCT ();", "+\t\ttvInsert.hParent = hParent;", "+\t\ttvInsert.hInsertAfter = hInsertAfter;", "+\t\ttvInsert.lParam = id;", "+\t\ttvInsert.pszText = OS.LPSTR_TEXTCALLBACK;", "+\t\ttvInsert.iImage = tvInsert.iSelectedImage = OS.I_IMAGECALLBACK;", "+\t\ttvInsert.mask = OS.TVIF_TEXT | OS.TVIF_IMAGE | OS.TVIF_SELECTEDIMAGE | OS.TVIF_HANDLE | OS.TVIF_PARAM;", "+\t\tif ((style & SWT.CHECK) != 0) {", "+\t\t\ttvInsert.mask = tvInsert.mask | OS.TVIF_STATE;", "+\t\t\ttvInsert.state = 1 << 12;", "+\t\t\ttvInsert.stateMask = OS.TVIS_STATEIMAGEMASK;", "+\t\t}", "+\t\thNewItem = OS.SendMessage (handle, OS.TVM_INSERTITEM, 0, tvInsert);", "+\t\tif (hNewItem == 0) error (SWT.ERROR_ITEM_NOT_ADDED);", "+\t\t/*", "+\t\t* This code is intentionally commented.", "+\t\t*/", "+//\t\tif (hParent != 0) {", "+//\t\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+//\t\t\tbits |= OS.TVS_LINESATROOT;", "+//\t\t\tOS.SetWindowLong (handle, OS.GWL_STYLE, bits);", "+//\t\t}", "+\t} else {", "+\t\tTVITEM tvItem = new TVITEM ();", "+\t\ttvItem.mask = OS.TVIF_HANDLE | OS.TVIF_PARAM;", "+\t\ttvItem.hItem = hNewItem = hItem;", "+\t\ttvItem.lParam = id;", "+\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);", "-\tint hItem = OS.SendMessage (handle, OS.TVM_INSERTITEM, 0, tvInsert);", "-\tif (hItem == 0) error (SWT.ERROR_ITEM_NOT_ADDED);", "-\titem.handle = hItem;", "-\titems [id] = item;", "-", "-\t/*", "-\t* This code is intentionally commented.", "-\t*/", "-//\tif (hParent != 0) {", "-//\t\tint bits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-//\t\tbits |= OS.TVS_LINESATROOT;", "-//\t\tOS.SetWindowLong (handle, OS.GWL_STYLE, bits);", "-//\t}", "-", "-\t/*", "-\t* Bug in Windows.  When a child item is added to a parent item", "-\t* that has no children outside of WM_NOTIFY with control code", "-\t* TVN_ITEMEXPANDED, the tree widget does not redraw the +/-", "-\t* indicator.  The fix is to detect the case when the first", "-\t* child is added to a visible parent item and redraw the parent.", "-\t*/", "-\tif (drawCount == 0 && OS.IsWindowVisible (handle)) {", "-\t\tint hChild = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CHILD, hParent);", "-\t\tif (hChild != 0 && OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXT, hChild) == 0) {", "-\t\t\tRECT rect = new RECT ();", "-\t\t\trect.left = hParent;", "-\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 0, rect) != 0) {", "-\t\t\t\tOS.InvalidateRect (handle, rect, true);", "+\tif (item != null) {", "+\t\titem.handle = hNewItem;", "+\t\titems [id] = item;", "+\t}", "+\tif (hItem == 0) {", "+\t\t/*", "+\t\t* Bug in Windows.  When a child item is added to a parent item", "+\t\t* that has no children outside of WM_NOTIFY with control code", "+\t\t* TVN_ITEMEXPANDED, the tree widget does not redraw the +/-", "+\t\t* indicator.  The fix is to detect the case when the first", "+\t\t* child is added to a visible parent item and redraw the parent.", "+\t\t*/", "+\t\tif (drawCount == 0 && OS.IsWindowVisible (handle)) {", "+\t\t\tint hChild = OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_CHILD, hParent);", "+\t\t\tif (hChild != 0 && OS.SendMessage (handle, OS.TVM_GETNEXTITEM, OS.TVGN_NEXT, hChild) == 0) {", "+\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\trect.left = hParent;", "+\t\t\t\tif (OS.SendMessage (handle, OS.TVM_GETITEMRECT, 0, rect) != 0) {", "+\t\t\t\t\tOS.InvalidateRect (handle, rect, true);", "+\t\t\t\t}", "+\t\tupdateScrollBar ();", "-\tupdateScrollBar ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6d8b5575951c6af4e4c3be24c7941469", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "c9f95f6f3eb8bc7902d2a56370eeabc9a80b47e3", "commitAfterChange": "9ccf2b9d3892b1c203212e9025534442c8f18653", "methodNumberBeforeChange": 144, "methodNumberAfterChange": 144, "signatureBeforeChange": "  LRESULT wmNotifyChild (NMHDR hdr, int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (NMHDR hdr, int wParam, int lParam)", "diff": ["-\t\t\t\t\t\treturn LRESULT.ONE;", "+\t\t\t\t\t\tif ((pnm.uStateOld & OS.TVIS_SELECTED) != 0) {", "+\t\t\t\t\t\t\tif ((pnm.uStateNew & OS.TVIS_SELECTED) == 0) {", "+\t\t\t\t\t\t\t\tTVITEM tvItem = new TVITEM ();", "+\t\t\t\t\t\t\t\ttvItem.mask = OS.TVIF_HANDLE | OS.TVIF_STATE;", "+\t\t\t\t\t\t\t\ttvItem.state = OS.TVIS_SELECTED;", "+\t\t\t\t\t\t\t\ttvItem.stateMask = OS.TVIS_SELECTED;", "+\t\t\t\t\t\t\t\ttvItem.hItem = pnm.hItem;", "+\t\t\t\t\t\t\t\tOS.SendMessage (handle, OS.TVM_SETITEM, 0, tvItem);", "+\t\t\t\t\t\t\t\treturn LRESULT.ONE;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "-\t\t\t\t\tif (lockSelection) return LRESULT.ONE;", "+//\t\t\t\t\tif (lockSelection) return LRESULT.ONE;", "-\t\t\t}", "+\t\t\t}\t\t\t"]}], "num": 12692}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a9ea82a7b96f024c740480a81ceb6d29", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd3eb5a78b8c49c052fecf4ddbe7dcb1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "015f9d80a2dae6e06517944243cd07e06e5c0be1", "commitAfterChange": "730e9359cb0cea1689a3ff8184424ef1991cffe7", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 118, "signatureBeforeChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["+\t\tboolean deferCompleted = false;", "+\t\t\t\t/*", "+\t\t\t\t* Browser content that is set via nsIWebBrowserStream is not parsed immediately.", "+\t\t\t\t* Since clients depend on the Completed event to know when the browser's content", "+\t\t\t\t* is available, delay the sending of this event so that the stream content will", "+\t\t\t\t* be parsed first.", "+\t\t\t\t*/", "+\t\t\t\tdeferCompleted = true;", "-\t\t\tProgressEvent event2 = new ProgressEvent (browser);", "-\t\t\tevent2.display = browser.getDisplay ();", "+\t\t\tfinal Display display = browser.getDisplay ();", "+\t\t\tfinal ProgressEvent event2 = new ProgressEvent (browser);", "+\t\t\tevent2.display = display;", "-\t\t\tfor (int i = 0; i < progressListeners.length; i++) {", "-\t\t\t\tprogressListeners[i].completed (event2);", "+\t\t\tRunnable runnable = new Runnable () {", "+\t\t\t\tpublic void run () {", "+\t\t\t\t\tif (browser.isDisposed ()) return;", "+\t\t\t\t\tfor (int i = 0; i < progressListeners.length; i++) {", "+\t\t\t\t\t\tprogressListeners[i].completed (event2);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t};", "+\t\t\tif (deferCompleted) {", "+\t\t\t\tdisplay.asyncExec (runnable);", "+\t\t\t} else {", "+\t\t\t\tdisplay.syncExec (runnable);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4cdbda897933ba7f695b8f137b8a581", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/mozilla/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "44595b6d717ea9f7b628965fa2db8bdec6c365a9", "commitAfterChange": "f3f1310a01b6d0ac9c4e505dcdca2d95783b6205", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\t\t\t\t\tif (Browser.this == getDisplay().getFocusControl()) onFocusLost();", "+\t\t\t\t\tDisplay display = event.display;", "+\t\t\t\t\tif (Browser.this == display.getFocusControl()) onFocusLost();", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t\tcase SWT.Show: {", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Feature on GTK Mozilla.  Mozilla does not show up when", "+\t\t\t\t\t* its container (a GTK fixed handle) is made visible", "+\t\t\t\t\t* after having been hidden.  The workaround is to reset", "+\t\t\t\t\t* its size after the container has been made visible. ", "+\t\t\t\t\t*/", "+\t\t\t\t\tDisplay display = event.display;", "+\t\t\t\t\tdisplay.asyncExec(new Runnable() {", "+\t\t\t\t\t\tpublic void run() {", "+\t\t\t\t\t\t\tif (Browser.this.isDisposed()) return;", "+\t\t\t\t\t\t\tonResize();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t});", "-\t\tSWT.Deactivate", "+\t\tSWT.Deactivate,", "+\t\tSWT.Show"]}], "num": 31087}
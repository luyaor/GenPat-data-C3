{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d1531f250edf823008f31a107ff7e70", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4899c38be76bea1da0a79243c4ffb393", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "commitAfterChange": "bbeab947327689cb203638e742e58f555e6c1b64", "methodNumberBeforeChange": 87, "methodNumberAfterChange": 106, "signatureBeforeChange": " private void scroll_scrollRight()", "signatureAfterChange": " boolean updateItems()", "diff": ["+boolean updateItems() {", "+\tboolean changed = false;", "+\tif (setItemSize()) changed = true;", "+\tif (setItemLocation()) changed = true;", "+\tif (setButtonBounds()) changed = true;", "+\tif (selectedIndex != -1) {", "+\t\tint top = topTabIndex;", "+\t\tshowItem(items[selectedIndex]);", "+\t\tif (top != topTabIndex) changed = true;", "+\treturn changed;", "- */", "-private void scroll_scrollRight() {", "-\tint lastIndex = getLastItem();", "-\ttopTabIndex = lastIndex + 1;", "-\tsetItemLocation();", "-\tcorrectLastItem();", "-\tredrawTabArea(-1);", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8113115e1996663da595cf114226ffb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "e06c7cee06cde407869bbcac7ab1fc8f1e44f50c", "commitAfterChange": "bf8ff308bbd619429fdfe0609e1738dfe9acc5ea", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " void addColumn (TreeColumn column)", "signatureAfterChange": " void addColumn (TreeColumn column)", "diff": ["-\t/*", "-\t * The texts, textWidths and images arrays always maintain at least one index, representing", "-\t * the automatic column that a Tree with no specified TreeColumns gets.", "-\t */", "-\t", "-\t\tImage[] newImages = new Image [columnCount];", "-\t\tSystem.arraycopy (images, 0, newImages, 0, index);", "-\t\tSystem.arraycopy (images, index, newImages, index + 1, columnCount - index - 1);", "-\t\timages = newImages;", "+\t\tif (index == 0) {", "+\t\t\ttexts [1] = text;", "+\t\t\ttext = \"\";", "+\t\t}", "+", "+\t\tif (columnCount == 2) {", "+\t\t\timages = new Image [2];", "+\t\t} else {", "+\t\t\tImage[] newImages = new Image [columnCount];", "+\t\t\tSystem.arraycopy (images, 0, newImages, 0, index);", "+\t\t\tSystem.arraycopy (images, index, newImages, index + 1, columnCount - index - 1);", "+\t\t\timages = newImages;", "+\t\t}", "+\t\tif (index == 0) {", "+\t\t\timages [1] = image;", "+\t\t\timage = null;", "+\t\t}", "+", "-\tif (columnCount == 1) {", "-\t\tGC gc = new GC (parent);", "-\t\tcomputeDisplayText (0, gc);", "-\t\ttextWidths [0] = gc.textExtent (getDisplayText (0)).x;", "-\t\tgc.dispose ();", "-\t}", "+\t}", "+", "+\tif (index == 0 && columnCount > 1) {", "+\t\t/*", "+\t\t * The new second column now has more space available to it than it did while it", "+\t\t * was the first column since it no longer has to show hierarchy decorations, so", "+\t\t * recompute its displayText.", "+\t\t */", "+\t\tGC gc = new GC (parent);", "+\t\tgc.setFont (getFont (1));", "+\t\tcomputeDisplayText (1, gc);", "+\t\tgc.dispose ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d363f9bb2934034626d59f54c791717d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "18ce373e262126236e66fff74f7d2ddc7fffb312", "commitAfterChange": "41ad2a506242e46d3b0d85d794d3bd6a732e7252", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 16, "signatureBeforeChange": " \t \tvoid addAccessibleChild(Accessible accessible)", "signatureAfterChange": " \t \tvoid checkRole(int role)", "diff": ["-\t", "-\tvoid addAccessibleChild(Accessible accessible) {", "-\t\tchildren.add(accessible);", "-\t}", "+\tvoid checkRole(int role) {", "+\t\t// A lightweight control can change its role at any time, so track", "+\t\t// the current role for the control.  If it changes, reset the attribute list.", "+\t\tif (role != currentRole) {", "+\t\t\tcurrentRole = role;", "+\t\t\t", "+\t\t\tif (attributeNames != null) {", "+\t\t\t\tattributeNames.release();", "+\t\t\t\tattributeNames = null;", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (parameterizedAttributeNames != null) {", "+\t\t\t\tparameterizedAttributeNames.release();", "+\t\t\t\tparameterizedAttributeNames = null;", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (actionNames != null) {", "+\t\t\t\tactionNames.release();", "+\t\t\t\tactionNames = null;", "+\t\t\t}", "+\t\t}", "+\t}"]}], "num": 5543}
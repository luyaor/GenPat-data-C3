{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "244e18b3cd2bcd6fa46a87070c2cb39e", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "34e0b96578ae2a87f9ea004f55f5068c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "85dbc888f07bfaa9d143d6f5e240df5b278e7940", "commitAfterChange": "058c23007c9995d9876a1701964e2ad6cf0ead10", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public void drawFocus (int x, int y, int width, int height)", "signatureAfterChange": " public void drawFocus (int x, int y, int width, int height)", "diff": ["-\twidth = (width < 0 ? -width : width) - 1;\r", "-\theight = (height < 0 ? -height : height) - 1;\r", "-\tdrawRectangle(x, y, width, height);\r", "+\tif (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);\r", "+\tint flags = OS.PtEnter(0);\r", "+\ttry {\r", "+\t\tint prevContext = setGC();\t\r", "+\t\tsetGCClipping();\r", "+\t\tif (width < 0) width -= width;\r", "+\t\tif (height < 0) height -= height;\r", "+\t\tOS.PgSetStrokeColor(0x9098F8);\r", "+\t\tOS.PgDrawIRect(x, y, x + width - 1, y + height - 1, OS.Pg_DRAW_STROKE);\r", "+\t\tOS.PgSetStrokeColor(data.foreground);\r", "+\t\tunsetGC(prevContext);\r", "+\t} finally {\r", "+\t\tif (flags >= 0) OS.PtLeave(flags);\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e37a246209b8ec1847d1106b16582ea", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "bc0159e1f232b2994f90bfab06507bbdbd612bc8", "commitAfterChange": "4bf0b224a9caf7edd2d827277068ffb2c6e7bf23", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": " void init(Device device, int width, int height)", "signatureAfterChange": " void init(Device device, int width, int height)", "diff": ["-    /* AW", "-\tint xDisplay = device.xDisplay;", "-\tint screen = OS.XDefaultScreenOfDisplay(xDisplay);", "-\tint depth = OS.XDefaultDepthOfScreen(screen);", "-\t*/", "-\tint depth= 32;", "-\t/* AW", "-\tint screenNum = OS.XDefaultScreen(xDisplay);", "-\tint drawable = OS.XDefaultRootWindow(xDisplay);", "-\tint pixmap = OS.XCreatePixmap(xDisplay, drawable, width, height, depth);", "-\t*/", "-\tint pixmap = createPixMap(width, height, depth, null, null, null, null);", "+\tint pixmap = createPixMap(width, height, device.fScreenDepth);", "-    /* AW", "-\tint xGC = OS.XCreateGC(xDisplay, drawable, 0, null);", "-\tOS.XSetForeground(xDisplay, xGC, OS.XWhitePixel(xDisplay, screenNum));", "-\tOS.XFillRectangle(xDisplay, pixmap, xGC, 0, 0, width, height);", "-\tOS.XFreeGC(xDisplay, xGC);", "-    */", "-\t// AW", "-\t/*", "-\t// FIXME: we set the pixmap to black or white in NewPixMap for now", "+    int[] offscreenGWorld= new int[1];", "+\tOS.NewGWorldFromPtr(offscreenGWorld, pixmap);", "+\tint xGC = offscreenGWorld[0];", "+\tif (xGC == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "+", "-\tMacRect mr= new MacRect();", "-\tOS.GetPixBounds(pixmap, mr.getData());", "-\tOS.EraseRect(mr.getData());", "-\tOS.FrameRect(mr.getData());", "+\tOS.EraseRect(new short[] { 0, 0, (short)width, (short)height } );", "-\t*/", "-\t// AW", "+\t", "+\tOS.DisposeGWorld(xGC);", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a81f744f39fe7e28c9a1292ea134bb3e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "03e23cf4c81d13094d1e2c6633bcf96224d8fef7", "commitAfterChange": "863121f0640947eb492912796128b0819e60eeef", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\tsuper.createHandle ();", "+\t/*", "+\t* Feature in Windows.  When the selection changes in a combo box,", "+\t* Windows draws the selection, even when the combo box does not", "+\t* have focus.  Strictly speaking, this is the correct Windows", "+\t* behavior because the combo box sets ES_NOHIDESEL on the text", "+\t* control that it creates.  Despite this, it looks strange because", "+\t* Windows also clears the selection and selects all the text when", "+\t* the combo box gets focus.  The fix is use the CBT hook to clear", "+\t* the ES_NOHIDESEL style bit when the text control is created.", "+\t*/", "+\tif (OS.IsWinCE || (style & (SWT.READ_ONLY | SWT.SIMPLE)) != 0) {", "+\t\tsuper.createHandle ();", "+\t} else {", "+\t\tint threadId = OS.GetCurrentThreadId ();", "+\t\tCallback cbtCallback = new Callback (this, \"CBTProc\", 3); //$NON-NLS-1$", "+\t\tint cbtProc = cbtCallback.getAddress ();", "+\t\tif (cbtProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tint cbtHook = OS.SetWindowsHookEx (OS.WH_CBT, cbtProc, 0, threadId);", "+\t\tsuper.createHandle ();", "+\t\tif (cbtHook != 0) OS.UnhookWindowsHookEx (cbtHook);", "+\t\tcbtCallback.dispose ();", "+\t}"]}], "num": 49922}
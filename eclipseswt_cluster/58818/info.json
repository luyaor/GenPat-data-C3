{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5a2106d940ccd795d3be99061700a7d6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa70eeebc0d912165d01c8716d363d6d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/ViewForm.java", "commitBeforeChange": "6a78943f0a75fa84ac0d133e6065f28d14a1f04e", "commitAfterChange": "beaf114c0adb88afbc3e4c5421a2b081829bd459", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " void onPaint(GC gc)", "signatureAfterChange": " void onPaint(GC gc)", "diff": ["+\tColor border = getDisplay().getSystemColor(BORDER1_COLOR);", "-\t\tif ((getStyle() & SWT.FLAT) !=0) {", "-\t\t\tgc.setForeground(borderColor1);", "-\t\t\tgc.drawRectangle(0, 0, size.x - 1, size.y - 1);", "-\t\t} else {", "-\t\t\tgc.setForeground(borderColor1);", "-\t\t\tgc.drawRectangle(0, 0, size.x - 3, size.y - 3);", "-\t\t", "-\t\t\tgc.setForeground(borderColor2);", "-\t\t\tgc.drawLine(1, size.y - 2, size.x - 1, size.y - 2);", "-\t\t\tgc.drawLine(size.x - 2, 1, size.x - 2, size.y - 1);", "-\t\t", "-\t\t\tgc.setForeground(borderColor3);", "-\t\t\tgc.drawLine(2, size.y - 1, size.x - 2, size.y - 1);", "-\t\t\tgc.drawLine(size.x - 1, 2, size.x - 1, size.y - 2);", "+\t\tgc.setForeground(border);", "+\t\tgc.drawRectangle(0, 0, size.x - 1, size.y - 1);", "+\t\tif (highlight > 0) {", "+\t\t\tint x1 = 1;", "+\t\t\tint y1 = 1;", "+\t\t\tint x2 = size.x - 1;", "+\t\t\tint y2 = size.y - 1;", "+\t\t\tint[] shape = new int[] {x1,y1, x2,y1, x2,y2, x1,y2, x1,y1+highlight,", "+\t\t\t\t\t           x1+highlight,y1+highlight, x1+highlight,y2-highlight, ", "+\t\t\t\t\t\t\t   x2-highlight,y2-highlight, x2-highlight,y1+highlight, x1,y1+highlight};", "+\t\t\tColor highlightColor = getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION);", "+\t\t\tgc.setBackground(highlightColor);", "+\t\t\tgc.fillPolygon(shape);", "-\t\tgc.setForeground(borderColor1);", "-\t\tgc.drawLine(borderLeft, separator, size.x - borderLeft - borderRight, separator);", "+\t\tgc.setForeground(border);", "+\t\tgc.drawLine(borderLeft + highlight, separator, size.x - borderLeft - borderRight - highlight, separator);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ac465c29bb197707db62bf7916adeec", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "65aaf6e9768e61429e9ffb0c0ae5577af65eba85", "commitAfterChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 15, "signatureBeforeChange": " void drawSelectionBackground(GC gc, int[] shape)", "signatureAfterChange": " void drawBackground(GC gc, int[] shape, boolean selected)", "diff": ["+void drawBackground(GC gc, int[] shape, boolean selected) {", "+\tint height = tabHeight + HIGHLIGHT_HEADER; ", "+\tint y = onBottom ? size.y - borderBottom - height : borderTop;", "+\tint x = 0;", "+\tint width = size.x;", "+\tif (borderLeft > 0) {", "+\t\tx += 1; width -= 2;", "+\t}", "+\t", "+\tRegion clipping = new Region();", "+\tgc.getClipping(clipping);", "+\tRegion region = new Region();", "+\tregion.add(shape);", "+\tgc.setClipping(region);", "+\t", "+\tColor defaultBackground = selected ? selectionBackground : getBackground();", "+\tImage image = selected ? selectionBgImage : bgImage;", "+\tColor[] colors = selected ? selectionGradientColors : gradientColors;", "+\tboolean vertical = selected ? selectionGradientVertical : gradientVertical;", "+\tint[] percents = selected ? selectionGradientPercents : gradientPercents;", "+\t", "+\tif (image != null) {", "+\t\t// draw the background image in shape", "+\t\tgc.setBackground(defaultBackground);", "+\t\tgc.fillRectangle(x, y, width, height);", "+\t\tRectangle imageRect = image.getBounds();", "+\t\tgc.drawImage(image, imageRect.x, imageRect.y, imageRect.width, imageRect.height, x, y, width, height);", "+\t} else if (colors != null) {", "+\t\t// draw gradient", "+\t\tif (colors.length == 1) {", "+\t\t\tColor background = colors[0] != null ? colors[0] : defaultBackground;", "+\t\t\tgc.setBackground(background);", "+\t\t\tgc.fillRectangle(x, y, width, height);", "+\t\t} else {", "+\t\t\tif (vertical) {", "+\t\t\t\tif (onBottom) {", "+\t\t\t\t\tint pos = 0;", "+\t\t\t\t\tif (percents[percents.length - 1] < 100) {", "+\t\t\t\t\t\tpos = percents[percents.length - 1] * height / 100;", "+\t\t\t\t\t\tgc.setBackground(defaultBackground);", "+\t\t\t\t\t\tgc.fillRectangle(x, y, width, pos);", "+\t\t\t\t\t}", "+\t\t\t\t\tColor lastColor = colors[colors.length-1];", "+\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\tfor (int i = percents.length-1; i >= 0; i--) {", "+\t\t\t\t\t\tgc.setForeground(lastColor);", "+\t\t\t\t\t\tlastColor = colors[i];", "+\t\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\t\tgc.setBackground(lastColor);", "+\t\t\t\t\t\tint gradientHeight = percents[i] * height / 100;", "+\t\t\t\t\t\tgc.fillGradientRectangle(x, y+pos, width, gradientHeight, true);", "+\t\t\t\t\t\tpos += gradientHeight;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tColor lastColor = colors[0];", "+\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\tint pos = 0;", "+\t\t\t\t\tfor (int i = 0; i < percents.length; i++) {", "+\t\t\t\t\t\tgc.setForeground(lastColor);", "+\t\t\t\t\t\tlastColor = colors[i + 1];", "+\t\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\t\tgc.setBackground(lastColor);", "+\t\t\t\t\t\tint gradientHeight = percents[i] * height / 100;", "+\t\t\t\t\t\tgc.fillGradientRectangle(x, y+pos, width, gradientHeight, true);", "+\t\t\t\t\t\tpos += gradientHeight;", "+\t\t\t\t\t}", "+\t\t\t\t\tif (pos < height) {", "+\t\t\t\t\t\tgc.setBackground(defaultBackground);", "+\t\t\t\t\t\tgc.fillRectangle(x, pos, width, height-pos);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else { //horizontal gradient", "+\t\t\t\tColor lastColor = colors[0];", "+\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\tint pos = 0;", "+\t\t\t\tfor (int i = 0; i < percents.length; ++i) {", "+\t\t\t\t\tgc.setForeground(lastColor);", "+\t\t\t\t\tlastColor = colors[i + 1];", "+\t\t\t\t\tif (lastColor == null) lastColor = defaultBackground;", "+\t\t\t\t\tgc.setBackground(lastColor);", "+\t\t\t\t\tint gradientWidth = (percents[i] * width / 100) - pos;", "+\t\t\t\t\tgc.fillGradientRectangle(x+pos, y, gradientWidth, height, false);", "+\t\t\t\t\tpos += gradientWidth;", "+\t\t\t\t}", "+\t\t\t\tif (pos < width) {", "+\t\t\t\t\tgc.setBackground(defaultBackground);", "+\t\t\t\t\tgc.fillRectangle(x+pos, y, width-pos, height);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t} else {", "+\t\t// draw a solid background using default background in shape", "+\t\tgc.setBackground(defaultBackground);", "+\t\tgc.fillRectangle(x, y, width, height);", "+\t}", "+\tgc.setClipping(clipping);", "+\tclipping.dispose();", "+\tregion.dispose();", "+}", "-void drawSelectionBackground(GC gc, int[] shape) {", "-\tint height = tabHeight + HIGHLIGHT_HEADER; ", "-\tint y = onBottom ? size.y - borderBottom - height : borderTop;", "-\tint x = 0;", "-\tint width = size.x;", "-\tif (borderLeft > 0) {", "-\t\tx += 1; width -= 2;", "-\tRegion clipping = new Region();", "-\tgc.getClipping(clipping);", "-\tRegion region = new Region();", "-\tregion.add(shape);", "-\tgc.setClipping(region);", "-\t\t", "-\tif (backgroundImage != null) {", "-\t\t// draw the background image in shape", "-\t\tgc.setBackground(selectionBackground);", "-\t\tgc.fillRectangle(x, y, width, height);", "-\t\tRectangle imageRect = backgroundImage.getBounds();", "-\t\tif (tiled) {", "-\t\t\t// tile image to fill space", "-\t\t\tint xPos = x;", "-\t\t\twhile (xPos < x+width) {", "-\t\t\t\tint yPos = y;", "-\t\t\t\twhile (yPos < y+height) {", "-\t\t\t\t\tgc.drawImage(backgroundImage, xPos, yPos);", "-\t\t\t\t\tyPos += imageRect.height;", "-\t\t\t\t}", "-\t\t\t\txPos += imageRect.width;", "-\t\t\t}", "-\t\t} else {", "-\t\t\tgc.drawImage(backgroundImage, imageRect.x, imageRect.y, imageRect.width, imageRect.height, x, y, width, height);", "-\t\t", "-\t\t}", "-\t} else if (gradientColors != null) {", "-\t\t// draw gradient", "-\t\tif (gradientColors.length == 1) {", "-\t\t\tColor background = gradientColors[0] != null ? gradientColors[0] : selectionBackground;", "-\t\t\tgc.setBackground(background);", "-\t\t\tgc.fillRectangle(x, y, width, height);", "-\t\t} else {", "-\t\t\tif (gradientVertical) {", "-\t\t\t\tif (onBottom) {", "-\t\t\t\t\tint pos = 0;", "-\t\t\t\t\tif (gradientPercents[gradientPercents.length - 1] < 100) {", "-\t\t\t\t\t\tpos = gradientPercents[gradientPercents.length - 1] * height / 100;", "-\t\t\t\t\t\tgc.setBackground(selectionBackground);", "-\t\t\t\t\t\tgc.fillRectangle(x, y, width, pos);", "-\t\t\t\t\t}", "-\t\t\t\t\tColor lastColor = gradientColors[gradientColors.length-1];", "-\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "-\t\t\t\t\tfor (int i = gradientPercents.length-1; i >= 0; i--) {", "-\t\t\t\t\t\tgc.setForeground(lastColor);", "-\t\t\t\t\t\tlastColor = gradientColors[i];", "-\t\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "-\t\t\t\t\t\tgc.setBackground(lastColor);", "-\t\t\t\t\t\tint gradientHeight = gradientPercents[i] * height / 100;", "-\t\t\t\t\t\tgc.fillGradientRectangle(x, y+pos, width, gradientHeight, true);", "-\t\t\t\t\t\tpos += gradientHeight;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\tColor lastColor = gradientColors[0];", "-\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "-\t\t\t\t\tint pos = 0;", "-\t\t\t\t\tfor (int i = 0; i < gradientPercents.length; i++) {", "-\t\t\t\t\t\tgc.setForeground(lastColor);", "-\t\t\t\t\t\tlastColor = gradientColors[i + 1];", "-\t\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "-\t\t\t\t\t\tgc.setBackground(lastColor);", "-\t\t\t\t\t\tint gradientHeight = gradientPercents[i] * height / 100;", "-\t\t\t\t\t\tgc.fillGradientRectangle(x, y+pos, width, gradientHeight, true);", "-\t\t\t\t\t\tpos += gradientHeight;", "-\t\t\t\t\t}", "-\t\t\t\t\tif (pos < height) {", "-\t\t\t\t\t\tgc.setBackground(selectionBackground);", "-\t\t\t\t\t\tgc.fillRectangle(x, pos, width, height-pos);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else { //horizontal gradient", "-\t\t\t\tColor lastColor = gradientColors[0];", "-\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "-\t\t\t\tint pos = 0;", "-\t\t\t\tfor (int i = 0; i < gradientPercents.length; ++i) {", "-\t\t\t\t\tgc.setForeground(lastColor);", "-\t\t\t\t\tlastColor = gradientColors[i + 1];", "-\t\t\t\t\tif (lastColor == null) lastColor = selectionBackground;", "-\t\t\t\t\tgc.setBackground(lastColor);", "-\t\t\t\t\tint gradientWidth = (gradientPercents[i] * width / 100) - pos;", "-\t\t\t\t\tgc.fillGradientRectangle(x+pos, y, gradientWidth, height, false);", "-\t\t\t\t\tpos += gradientWidth;", "-\t\t\t\t}", "-\t\t\t\tif (pos < width) {", "-\t\t\t\t\tgc.setBackground(selectionBackground);", "-\t\t\t\t\tgc.fillRectangle(x+pos, y, width-pos, height);", "-\t\t\t\t}", "-\t} else {", "-\t\t// draw a solid background using selectionBackground in shape", "-\t\tgc.setBackground(selectionBackground);", "-\t\tgc.fillRectangle(x, y, width, height);", "-\tgc.setClipping(clipping);", "-\tclipping.dispose();", "-\tregion.dispose();"]}], "num": 58818}
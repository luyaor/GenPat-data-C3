{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a410fe730aaaed2d9578b619f66e661", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2e2fc57a57c5354ea19dc9fbb23ae992", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 12, "signatureBeforeChange": "\r \r int processMouseDown (int callData)", "signatureAfterChange": "\r int XButtonPress (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-\r", "-int processMouseDown (int callData) {\r", "-\tsuper.processMouseDown (callData);\r", "-\tXButtonEvent xEvent = new XButtonEvent ();\r", "-\tOS.memmove (xEvent, callData, XButtonEvent.sizeof);\r", "-\tif (xEvent.button != 1) return 0;\r", "-\tstartX = xEvent.x;  startY = xEvent.y;\r", "-\tint [] argList = {OS.XmNx, 0, OS.XmNy, 0, OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "-\tOS.XtGetValues (handle, argList, argList.length / 2);\r", "-\tint border = argList [9], width = argList [5] + (border * 2), height = argList [7] + (border * 2);\r", "-\tlastX = ((short) argList [1]) - border;  lastY = ((short) argList [3]) - border;\r", "-\t/* The event must be sent because its doit flag is used. */\r", "-\tEvent event = new Event ();\r", "-\tevent.detail = SWT.DRAG;\r", "-\tevent.time = xEvent.time;\r", "-\tevent.x = lastX;  event.y = lastY;\r", "-\tevent.width = width;  event.height = height;\r", "-\t/*\r", "-\t * It is possible (but unlikely) that client code could have disposed\r", "-\t * the widget in the selection event.  If this happens end the processing\r", "-\t * of this message by returning.\r", "-\t */\r", "-\tsendEvent (SWT.Selection, event);\r", "-\tif (isDisposed ()) return 0;\r", "-\tif (event.doit) {\r", "-\t\tdragging = true;\r", "-\t\tOS.XmUpdateDisplay (handle);\r", "-\t\tdrawBand (lastX = event.x, lastY = event.y, width, height);\r", "-\t}\r", "-\treturn 0;\r", "-}\r", "+int XButtonPress (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tint result = super.XButtonPress (w, client_data, call_data, continue_to_dispatch);\r", "+\tif (result != 0) return result;\r", "+\tXButtonEvent xEvent = new XButtonEvent ();\r", "+\tOS.memmove (xEvent, call_data, XButtonEvent.sizeof);\r", "+\tif (xEvent.button != 1) return result;\r", "+\tstartX = xEvent.x;  startY = xEvent.y;\r", "+\tint [] argList = {OS.XmNx, 0, OS.XmNy, 0, OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "+\tOS.XtGetValues (handle, argList, argList.length / 2);\r", "+\tint border = argList [9], width = argList [5] + (border * 2), height = argList [7] + (border * 2);\r", "+\tlastX = ((short) argList [1]) - border;  lastY = ((short) argList [3]) - border;\r", "+\t/* The event must be sent because its doit flag is used. */\r", "+\tEvent event = new Event ();\r", "+\tevent.detail = SWT.DRAG;\r", "+\tevent.time = xEvent.time;\r", "+\tevent.x = lastX;  event.y = lastY;\r", "+\tevent.width = width;  event.height = height;\r", "+\t/*\r", "+\t * It is possible (but unlikely) that client code could have disposed\r", "+\t * the widget in the selection event.  If this happens end the processing\r", "+\t * of this message by returning.\r", "+\t */\r", "+\tsendEvent (SWT.Selection, event);\r", "+\tif (isDisposed ()) return result;\r", "+\tif (event.doit) {\r", "+\t\tdragging = true;\r", "+\t\tOS.XmUpdateDisplay (handle);\r", "+\t\tdrawBand (lastX = event.x, lastY = event.y, width, height);\r", "+\t}\r", "+\treturn result;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89a8edb7cb78963aadfdddd98aa8ec79", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 69, "signatureBeforeChange": "\r int processVerify (int callData)", "signatureAfterChange": "\r int XmNmodifyVerifyCallback (int w, int client_data, int call_data)", "diff": ["-}\r", "-int processVerify (int callData) {\r", "-\tsuper.processVerify (callData);\r", "-\tif (echoCharacter == '\\0' && !hooks (SWT.Verify) && !filters (SWT.Verify)) return 0;\r", "-\tXmTextVerifyCallbackStruct textVerify = new XmTextVerifyCallbackStruct ();\r", "-\tOS.memmove (textVerify, callData, XmTextVerifyCallbackStruct.sizeof);\r", "-\tXmTextBlockRec textBlock = new XmTextBlockRec ();\r", "-\tOS.memmove (textBlock, textVerify.text, XmTextBlockRec.sizeof);\r", "-\tbyte [] buffer = new byte [textBlock.length];\r", "-\tOS.memmove (buffer, textBlock.ptr, textBlock.length);\r", "-\tString codePage = getCodePage ();\r", "-\tString text = new String (Converter.mbcsToWcs (codePage, buffer));\r", "-\tString newText = text;\r", "-\tif (!ignoreChange) {\r", "-\t\tEvent event = new Event ();\r", "-\t\tif (textVerify.event != 0) {\r", "-\t\t\tXKeyEvent xEvent = new XKeyEvent ();\r", "-\t\t\tOS.memmove (xEvent, textVerify.event, XKeyEvent.sizeof);\r", "-\t\t\tevent.time = xEvent.time;\r", "-\t\t\tsetKeyState (event, xEvent);\r", "-\t\t}\r", "-\t\tevent.start = textVerify.startPos;\r", "-\t\tevent.end = textVerify.endPos;\r", "-\t\tevent.doit = textVerify.doit == 1;\r", "-\t\tevent.text = text;\r", "-\t\tsendEvent (SWT.Verify, event);\r", "-\t\tnewText = event.text;\r", "-\t\ttextVerify.doit = (byte) ((event.doit && newText != null) ? 1 : 0);\r", "-\t}\r", "-\tif (newText != null) {\r", "-\t\tif (echoCharacter != '\\0' && (textVerify.doit != 0)) {\r", "-\t\t\tString prefix = hiddenText.substring (0, textVerify.startPos);\r", "-\t\t\tString suffix = hiddenText.substring (textVerify.endPos, hiddenText.length ());\r", "-\t\t\thiddenText = prefix + newText + suffix;\r", "-\t\t\tchar [] charBuffer = new char [newText.length ()];\r", "-\t\t\tfor (int i=0; i<charBuffer.length; i++) {\r", "-\t\t\t\tcharBuffer [i] = echoCharacter;\r", "-\t\t\t}\r", "-\t\t\tnewText = new String (charBuffer);\r", "-\t\t}\r", "-\t\tif (newText != text) {\r", "-\t\t\tbyte [] buffer2 = Converter.wcsToMbcs (codePage, newText, true);\r", "-\t\t\tint length = buffer2.length;\r", "-\t\t\tint ptr = OS.XtMalloc (length);\r", "-\t\t\tOS.memmove (ptr, buffer2, length);\r", "-\t\t\ttextBlock.ptr = ptr;\r", "-\t\t\ttextBlock.length = buffer2.length - 1;\r", "-\t\t\tOS.memmove (textVerify.text, textBlock, XmTextBlockRec.sizeof);\r", "-\t\t}\r", "-\t}\r", "-\tOS.memmove (callData, textVerify, XmTextVerifyCallbackStruct.sizeof);\r", "-\ttextVerify = null;\r", "+}\r", "+int XmNmodifyVerifyCallback (int w, int client_data, int call_data) {\r", "+\tint result = super.XmNmodifyVerifyCallback (w, client_data, call_data);\r", "+\tif (result != 0) return result;\r", "+\tif (echoCharacter == '\\0' && !hooks (SWT.Verify) && !filters (SWT.Verify)) return result;\r", "+\tXmTextVerifyCallbackStruct textVerify = new XmTextVerifyCallbackStruct ();\r", "+\tOS.memmove (textVerify, call_data, XmTextVerifyCallbackStruct.sizeof);\r", "+\tXmTextBlockRec textBlock = new XmTextBlockRec ();\r", "+\tOS.memmove (textBlock, textVerify.text, XmTextBlockRec.sizeof);\r", "+\tbyte [] buffer = new byte [textBlock.length];\r", "+\tOS.memmove (buffer, textBlock.ptr, textBlock.length);\r", "+\tString codePage = getCodePage ();\r", "+\tString text = new String (Converter.mbcsToWcs (codePage, buffer));\r", "+\tString newText = text;\r", "+\tif (!ignoreChange) {\r", "+\t\tEvent event = new Event ();\r", "+\t\tif (textVerify.event != 0) {\r", "+\t\t\tXKeyEvent xEvent = new XKeyEvent ();\r", "+\t\t\tOS.memmove (xEvent, textVerify.event, XKeyEvent.sizeof);\r", "+\t\t\tevent.time = xEvent.time;\r", "+\t\t\tsetKeyState (event, xEvent);\r", "+\t\t}\r", "+\t\tevent.start = textVerify.startPos;\r", "+\t\tevent.end = textVerify.endPos;\r", "+\t\tevent.doit = textVerify.doit == 1;\r", "+\t\tevent.text = text;\r", "+\t\tsendEvent (SWT.Verify, event);\r", "+\t\tnewText = event.text;\r", "+\t\ttextVerify.doit = (byte) ((event.doit && newText != null) ? 1 : 0);\r", "+\t}\r", "+\tif (newText != null) {\r", "+\t\tif (echoCharacter != '\\0' && (textVerify.doit != 0)) {\r", "+\t\t\tString prefix = hiddenText.substring (0, textVerify.startPos);\r", "+\t\t\tString suffix = hiddenText.substring (textVerify.endPos, hiddenText.length ());\r", "+\t\t\thiddenText = prefix + newText + suffix;\r", "+\t\t\tchar [] charBuffer = new char [newText.length ()];\r", "+\t\t\tfor (int i=0; i<charBuffer.length; i++) {\r", "+\t\t\t\tcharBuffer [i] = echoCharacter;\r", "+\t\t\t}\r", "+\t\t\tnewText = new String (charBuffer);\r", "+\t\t}\r", "+\t\tif (newText != text) {\r", "+\t\t\tbyte [] buffer2 = Converter.wcsToMbcs (codePage, newText, true);\r", "+\t\t\tint length = buffer2.length;\r", "+\t\t\tint ptr = OS.XtMalloc (length);\r", "+\t\t\tOS.memmove (ptr, buffer2, length);\r", "+\t\t\ttextBlock.ptr = ptr;\r", "+\t\t\ttextBlock.length = buffer2.length - 1;\r", "+\t\t\tOS.memmove (textVerify.text, textBlock, XmTextBlockRec.sizeof);\r", "+\t\t}\r", "+\t}\r", "+\tOS.memmove (call_data, textVerify, XmTextVerifyCallbackStruct.sizeof);\r", "+\ttextVerify = null;\r", "+\treturn result;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9ab750f8d6bc8f3aba66b6534a485ee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 14, "signatureBeforeChange": "\r \t\r int processKeyDown (int callData)", "signatureAfterChange": "\r int XKeyPress (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-\t\r", "-int processKeyDown (int callData) {\r", "-\tsuper.processKeyDown (callData);\r", "-\tXKeyEvent xEvent = new XKeyEvent ();\r", "-\tOS.memmove (xEvent, callData, XKeyEvent.sizeof);\r", "-\tbyte [] buffer = new byte [1];\r", "-\tint [] keysym = new int [1];\r", "-\tOS.XLookupString (xEvent, buffer, buffer.length, keysym, null);\r", "-\t\r", "-\tswitch (keysym [0]) {\r", "-\t\tcase OS.XK_Left:\r", "-\t\tcase OS.XK_Right:\r", "-\t\tcase OS.XK_Up:\r", "-\t\tcase OS.XK_Down:\r", "-\t\t\tint xChange = 0, yChange = 0;\r", "-\t\t\tint stepSize = PAGE_INCREMENT;\r", "-\t\t\tif ((xEvent.state & OS.ControlMask) != 0) stepSize = INCREMENT;\r", "-\t\t\tif ((style & SWT.VERTICAL) != 0) {\r", "-\t\t\t\tif (keysym [0] == OS.XK_Up || keysym [0] == OS.XK_Down) break;\r", "-\t\t\t\txChange = keysym [0] == OS.XK_Left ? -stepSize : stepSize;\r", "-\t\t\t} else {\r", "-\t\t\t\tif (keysym [0] == OS.XK_Left || keysym [0] == OS.XK_Right) break;\r", "-\t\t\t\tyChange = keysym [0] == OS.XK_Up ? -stepSize : stepSize;\r", "-\t\t\t}\r", "-\t\t\t\r", "-\t\t\tint [] argList1 = {OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "-\t\t\tOS.XtGetValues (handle, argList1, argList1.length / 2);\r", "-\t\t\tint border = argList1 [5];\r", "-\t\t\tint width = argList1 [1] + (border * 2), height = argList1 [3] + (border * 2);\r", "-\t\t\tint [] argList2 = {OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "-\t\t\tOS.XtGetValues (parent.handle, argList2, argList2.length / 2);\r", "-\t\t\tint parentBorder = argList2 [5];\r", "-\t\t\tint parentWidth = argList2 [1] + (parentBorder * 2);\r", "-\t\t\tint parentHeight = argList2 [3] + (parentBorder * 2);\r", "-\t\t\tint newX = lastX, newY = lastY;\r", "-\t\t\tif ((style & SWT.VERTICAL) != 0) {\r", "-\t\t\t\tnewX = Math.min (Math.max (0, lastX + xChange - parentBorder - startX), parentWidth - width);\r", "-\t\t\t} else {\r", "-\t\t\t\tnewY = Math.min (Math.max (0, lastY + yChange - parentBorder - startY), parentHeight - height);\r", "-\t\t\t}\r", "-\t\t\tif (newX == lastX && newY == lastY) return 0;\r", "-\t\t\t\r", "-\t\t\t/* Ensure that the pointer image does not change */\r", "-\t\t\tint xDisplay = getDisplay().xDisplay;\r", "-\t\t\tint xWindow = OS.XtWindow (parent.handle);\r", "-\t\t\tint ptrGrabResult = OS.XGrabPointer (\r", "-\t\t\t\txDisplay,\r", "-\t\t\t\txWindow,\r", "-\t\t\t\t1,\r", "-\t\t\t\tOS.None,\r", "-\t\t\t\tOS.GrabModeAsync,\r", "-\t\t\t\tOS.GrabModeAsync,\r", "-\t\t\t\tOS.None,\r", "-\t\t\t\tcursor,\r", "-\t\t\t\tOS.CurrentTime);\r", "-\r", "-\t\t\t/* The event must be sent because its doit flag is used. */\r", "-\t\t\tEvent event = new Event ();\r", "-\t\t\tevent.time = xEvent.time;\r", "-\t\t\tevent.x = newX;  event.y = newY;\r", "-\t\t\tevent.width = width;  event.height = height;\r", "-\t\t\tsendEvent (SWT.Selection, event);\r", "-\t\t\tif (ptrGrabResult == OS.GrabSuccess) OS.XUngrabPointer (xDisplay, OS.CurrentTime);\r", "-\t\t\t\t\t\r", "-\t\t\t/*\r", "-\t\t\t * It is possible (but unlikely) that client code could have disposed\r", "-\t\t\t * the widget in the selection event.  If this happens end the processing\r", "-\t\t\t * of this message by returning.\r", "-\t\t\t */\r", "-\t\t\tif (isDisposed ()) break;\r", "-\t\t\tif (event.doit) {\r", "-\t\t\t\tlastX = event.x;  lastY = event.y;\r", "-\t\t\t\t/* Adjust the pointer position */\r", "-\t\t\t\tint cursorX = newX;  int cursorY = newY;\r", "-\t\t\t\tif ((style & SWT.VERTICAL) != 0) {\r", "-\t\t\t\t\tcursorY += height / 2;\r", "-\t\t\t\t} else {\r", "-\t\t\t\t\tcursorX += width / 2;\r", "-\t\t\t\t}\r", "-\t\t\t\tOS.XWarpPointer (xDisplay, OS.None, xWindow, 0, 0, 0, 0, cursorX, cursorY);\r", "-\t\t\t}\r", "-\t\t\tbreak;\r", "-\t}\r", "-\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XKeyPress (int w, int client_data, int call_data, int continue_to_dispatch) {\t\r", "+\tint result = super.XKeyPress (w, client_data, call_data, continue_to_dispatch);\r", "+\tif (result != 0) return result;\r", "+\tXKeyEvent xEvent = new XKeyEvent ();\r", "+\tOS.memmove (xEvent, call_data, XKeyEvent.sizeof);\r", "+\tbyte [] buffer = new byte [1];\r", "+\tint [] keysym = new int [1];\r", "+\tOS.XLookupString (xEvent, buffer, buffer.length, keysym, null);\r", "+\t\r", "+\tswitch (keysym [0]) {\r", "+\t\tcase OS.XK_Left:\r", "+\t\tcase OS.XK_Right:\r", "+\t\tcase OS.XK_Up:\r", "+\t\tcase OS.XK_Down:\r", "+\t\t\tint xChange = 0, yChange = 0;\r", "+\t\t\tint stepSize = PAGE_INCREMENT;\r", "+\t\t\tif ((xEvent.state & OS.ControlMask) != 0) stepSize = INCREMENT;\r", "+\t\t\tif ((style & SWT.VERTICAL) != 0) {\r", "+\t\t\t\tif (keysym [0] == OS.XK_Up || keysym [0] == OS.XK_Down) break;\r", "+\t\t\t\txChange = keysym [0] == OS.XK_Left ? -stepSize : stepSize;\r", "+\t\t\t} else {\r", "+\t\t\t\tif (keysym [0] == OS.XK_Left || keysym [0] == OS.XK_Right) break;\r", "+\t\t\t\tyChange = keysym [0] == OS.XK_Up ? -stepSize : stepSize;\r", "+\t\t\t}\r", "+\t\t\t\r", "+\t\t\tint [] argList1 = {OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "+\t\t\tOS.XtGetValues (handle, argList1, argList1.length / 2);\r", "+\t\t\tint border = argList1 [5];\r", "+\t\t\tint width = argList1 [1] + (border * 2), height = argList1 [3] + (border * 2);\r", "+\t\t\tint [] argList2 = {OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "+\t\t\tOS.XtGetValues (parent.handle, argList2, argList2.length / 2);\r", "+\t\t\tint parentBorder = argList2 [5];\r", "+\t\t\tint parentWidth = argList2 [1] + (parentBorder * 2);\r", "+\t\t\tint parentHeight = argList2 [3] + (parentBorder * 2);\r", "+\t\t\tint newX = lastX, newY = lastY;\r", "+\t\t\tif ((style & SWT.VERTICAL) != 0) {\r", "+\t\t\t\tnewX = Math.min (Math.max (0, lastX + xChange - parentBorder - startX), parentWidth - width);\r", "+\t\t\t} else {\r", "+\t\t\t\tnewY = Math.min (Math.max (0, lastY + yChange - parentBorder - startY), parentHeight - height);\r", "+\t\t\t}\r", "+\t\t\tif (newX == lastX && newY == lastY) return result;\r", "+\t\t\t\r", "+\t\t\t/* Ensure that the pointer image does not change */\r", "+\t\t\tint xDisplay = getDisplay().xDisplay;\r", "+\t\t\tint xWindow = OS.XtWindow (parent.handle);\r", "+\t\t\tint ptrGrabResult = OS.XGrabPointer (\r", "+\t\t\t\txDisplay,\r", "+\t\t\t\txWindow,\r", "+\t\t\t\t1,\r", "+\t\t\t\tOS.None,\r", "+\t\t\t\tOS.GrabModeAsync,\r", "+\t\t\t\tOS.GrabModeAsync,\r", "+\t\t\t\tOS.None,\r", "+\t\t\t\tcursor,\r", "+\t\t\t\tOS.CurrentTime);\r", "+\r", "+\t\t\t/* The event must be sent because its doit flag is used. */\r", "+\t\t\tEvent event = new Event ();\r", "+\t\t\tevent.time = xEvent.time;\r", "+\t\t\tevent.x = newX;  event.y = newY;\r", "+\t\t\tevent.width = width;  event.height = height;\r", "+\t\t\tsendEvent (SWT.Selection, event);\r", "+\t\t\tif (ptrGrabResult == OS.GrabSuccess) OS.XUngrabPointer (xDisplay, OS.CurrentTime);\r", "+\t\t\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t * It is possible (but unlikely) that client code could have disposed\r", "+\t\t\t * the widget in the selection event.  If this happens end the processing\r", "+\t\t\t * of this message by returning.\r", "+\t\t\t */\r", "+\t\t\tif (isDisposed ()) break;\r", "+\t\t\tif (event.doit) {\r", "+\t\t\t\tlastX = event.x;  lastY = event.y;\r", "+\t\t\t\t/* Adjust the pointer position */\r", "+\t\t\t\tint cursorX = newX;  int cursorY = newY;\r", "+\t\t\t\tif ((style & SWT.VERTICAL) != 0) {\r", "+\t\t\t\t\tcursorY += height / 2;\r", "+\t\t\t\t} else {\r", "+\t\t\t\t\tcursorX += width / 2;\r", "+\t\t\t\t}\r", "+\t\t\t\tOS.XWarpPointer (xDisplay, OS.None, xWindow, 0, 0, 0, 0, cursorX, cursorY);\r", "+\t\t\t}\r", "+\t\t\tbreak;\r", "+\t}\r", "+\r", "+\treturn result;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4f87ca72afb76b31535db40b63b1b40e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 38, "signatureBeforeChange": "\r int processPaint (int callData)", "signatureAfterChange": "\r int XExposure (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processPaint (int callData) {\r", "-\tif ((state & CANVAS) == 0) {\r", "-\t\treturn super.processPaint (callData);\r", "-\t}\r", "-\tif (!hooks (SWT.Paint) && !filters (SWT.Paint)) return 0;\r", "-\tif ((style & SWT.NO_MERGE_PAINTS) != 0) {\r", "-\t\treturn super.processPaint (callData);\r", "-\t}\r", "-\tXExposeEvent xEvent = new XExposeEvent ();\r", "-\tOS.memmove (xEvent, callData, XExposeEvent.sizeof);\r", "-\tint exposeCount = xEvent.count;\r", "-\tif (exposeCount == 0) {\r", "-\t\tif (OS.XEventsQueued (xEvent.display, OS.QueuedAfterReading) != 0) {\r", "-\t\t\tXAnyEvent xAnyEvent = new XAnyEvent ();\r", "-\t\t\tDisplay display = getDisplay ();\r", "-\t\t\tdisplay.exposeCount = display.lastExpose = 0;\r", "-\t\t\tint checkExposeProc = display.checkExposeProc;\r", "-\t\t\tOS.XCheckIfEvent (xEvent.display, xAnyEvent, checkExposeProc, xEvent.window);\r", "-\t\t\texposeCount = display.exposeCount;\r", "-\t\t\tint lastExpose = display.lastExpose;\r", "-\t\t\tif (exposeCount != 0 && lastExpose != 0) {\r", "-\t\t\t\tXExposeEvent xExposeEvent = display.xExposeEvent;\r", "-\t\t\t\tOS.memmove (xExposeEvent, lastExpose, XExposeEvent.sizeof);\r", "-\t\t\t\txExposeEvent.count = 0;\r", "-\t\t\t\tOS.memmove (lastExpose, xExposeEvent, XExposeEvent.sizeof);\r", "-\t\t\t}\r", "-\t\t}\r", "-\t}\r", "-\tif (exposeCount == 0 && damagedRegion == 0) {\r", "-\t\treturn super.processPaint (callData);\r", "-\t}\r", "-\tif (damagedRegion == 0) damagedRegion = OS.XCreateRegion ();\r", "-\tOS.XtAddExposureToRegion (callData, damagedRegion);\r", "-\tif (exposeCount != 0) return 0;\r", "-\tint xDisplay = OS.XtDisplay (handle);\r", "-\tif (xDisplay == 0) return 0;\r", "-\tEvent event = new Event ();\r", "-\tGC gc = event.gc = new GC (this);\r", "-\tRegion region = Region.motif_new (damagedRegion);\r", "-\tgc.setClipping (region);\r", "-\tXRectangle rect = new XRectangle ();\r", "-\tOS.XClipBox (damagedRegion, rect);\r", "-\tevent.x = rect.x;  event.y = rect.y;\r", "-\tevent.width = rect.width;  event.height = rect.height;\r", "-\tsendEvent (SWT.Paint, event);\r", "-\tgc.dispose ();\r", "-\tevent.gc = null;\r", "-\tOS.XDestroyRegion (damagedRegion);\r", "-\tdamagedRegion = 0;\r", "-\treturn 0;\r", "+int XExposure (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tif ((state & CANVAS) == 0) {\r", "+\t\treturn super.XExposure (w, client_data, call_data, continue_to_dispatch);\r", "+\t}\r", "+\tif (!hooks (SWT.Paint) && !filters (SWT.Paint)) return 0;\r", "+\tif ((style & SWT.NO_MERGE_PAINTS) != 0) {\r", "+\t\treturn super.XExposure (w, client_data, call_data, continue_to_dispatch);\r", "+\t}\r", "+\tXExposeEvent xEvent = new XExposeEvent ();\r", "+\tOS.memmove (xEvent, call_data, XExposeEvent.sizeof);\r", "+\tint exposeCount = xEvent.count;\r", "+\tif (exposeCount == 0) {\r", "+\t\tif (OS.XEventsQueued (xEvent.display, OS.QueuedAfterReading) != 0) {\r", "+\t\t\tXAnyEvent xAnyEvent = new XAnyEvent ();\r", "+\t\t\tDisplay display = getDisplay ();\r", "+\t\t\tdisplay.exposeCount = display.lastExpose = 0;\r", "+\t\t\tint checkExposeProc = display.checkExposeProc;\r", "+\t\t\tOS.XCheckIfEvent (xEvent.display, xAnyEvent, checkExposeProc, xEvent.window);\r", "+\t\t\texposeCount = display.exposeCount;\r", "+\t\t\tint lastExpose = display.lastExpose;\r", "+\t\t\tif (exposeCount != 0 && lastExpose != 0) {\r", "+\t\t\t\tXExposeEvent xExposeEvent = display.xExposeEvent;\r", "+\t\t\t\tOS.memmove (xExposeEvent, lastExpose, XExposeEvent.sizeof);\r", "+\t\t\t\txExposeEvent.count = 0;\r", "+\t\t\t\tOS.memmove (lastExpose, xExposeEvent, XExposeEvent.sizeof);\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\tif (exposeCount == 0 && damagedRegion == 0) {\r", "+\t\treturn super.XExposure (w, client_data, call_data, continue_to_dispatch);\r", "+\t}\r", "+\tif (damagedRegion == 0) damagedRegion = OS.XCreateRegion ();\r", "+\tOS.XtAddExposureToRegion (call_data, damagedRegion);\r", "+\tif (exposeCount != 0) return 0;\r", "+\tint xDisplay = OS.XtDisplay (handle);\r", "+\tif (xDisplay == 0) return 0;\r", "+\tEvent event = new Event ();\r", "+\tGC gc = event.gc = new GC (this);\r", "+\tRegion region = Region.motif_new (damagedRegion);\r", "+\tgc.setClipping (region);\r", "+\tXRectangle rect = new XRectangle ();\r", "+\tOS.XClipBox (damagedRegion, rect);\r", "+\tevent.x = rect.x;  event.y = rect.y;\r", "+\tevent.width = rect.width;  event.height = rect.height;\r", "+\tsendEvent (SWT.Paint, event);\r", "+\tgc.dispose ();\r", "+\tevent.gc = null;\r", "+\tOS.XDestroyRegion (damagedRegion);\r", "+\tdamagedRegion = 0;\r", "+\treturn 0;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e06b3339f653d4a2229d83d58809292f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 15, "signatureBeforeChange": "\r int processMouseMove (int callData)", "signatureAfterChange": "\r int XPointerMotion (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processMouseMove (int callData) {\r", "-\tsuper.processMouseMove (callData);\r", "-\tXMotionEvent xEvent = new XMotionEvent ();\r", "-\tOS.memmove (xEvent, callData, XMotionEvent.sizeof);\r", "-\tif (!dragging || (xEvent.state & OS.Button1Mask) == 0) return 0;\r", "-\tint [] argList1 = {OS.XmNx, 0, OS.XmNy, 0, OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "-\tOS.XtGetValues (handle, argList1, argList1.length / 2);\r", "-\tint border = argList1 [9], x = ((short) argList1 [1]) - border, y = ((short) argList1 [3]) - border;\r", "-\tint width = argList1 [5] + (border * 2), height = argList1 [7] + (border * 2);\r", "-\tint [] argList2 = {OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "-\tOS.XtGetValues (parent.handle, argList2, argList2.length / 2);\r", "-\tint parentBorder = argList2 [5];\r", "-\tint parentWidth = argList2 [1] + (parentBorder * 2);\r", "-\tint parentHeight = argList2 [3] + (parentBorder * 2);\r", "-\tint newX = lastX, newY = lastY;\r", "-\tif ((style & SWT.VERTICAL) != 0) {\r", "-\t\tnewX = Math.min (Math.max (0, xEvent.x + x - startX - parentBorder), parentWidth - width);\r", "-\t} else {\r", "-\t\tnewY = Math.min (Math.max (0, xEvent.y + y - startY - parentBorder), parentHeight - height);\r", "-\t}\r", "-\tif (newX == lastX && newY == lastY) return 0;\r", "-\tdrawBand (lastX, lastY, width, height);\r", "-\t/* The event must be sent because its doit flag is used. */\r", "-\tEvent event = new Event ();\r", "-\tevent.detail = SWT.DRAG;\r", "-\tevent.time = xEvent.time;\r", "-\tevent.x = newX;  event.y = newY;\r", "-\tevent.width = width;  event.height = height;\r", "-\t/*\r", "-\t * It is possible (but unlikely) that client code could have disposed\r", "-\t * the widget in the selection event.  If this happens end the processing\r", "-\t * of this message by returning.\r", "-\t */\r", "-\tsendEvent (SWT.Selection, event);\r", "-\tif (isDisposed ()) return 0;\r", "-\tif (event.doit) {\r", "-\t\tlastX = event.x;  lastY = event.y;\r", "-\t\tOS.XmUpdateDisplay (handle);\r", "-\t\tdrawBand (lastX, lastY, width, height);\r", "-\t}\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XPointerMotion (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tint result = super.XPointerMotion (w, client_data, call_data, continue_to_dispatch);\r", "+\tif (result != 0) return result;\r", "+\tXMotionEvent xEvent = new XMotionEvent ();\r", "+\tOS.memmove (xEvent, call_data, XMotionEvent.sizeof);\r", "+\tif (!dragging || (xEvent.state & OS.Button1Mask) == 0) return result;\r", "+\tint [] argList1 = {OS.XmNx, 0, OS.XmNy, 0, OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "+\tOS.XtGetValues (handle, argList1, argList1.length / 2);\r", "+\tint border = argList1 [9], x = ((short) argList1 [1]) - border, y = ((short) argList1 [3]) - border;\r", "+\tint width = argList1 [5] + (border * 2), height = argList1 [7] + (border * 2);\r", "+\tint [] argList2 = {OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "+\tOS.XtGetValues (parent.handle, argList2, argList2.length / 2);\r", "+\tint parentBorder = argList2 [5];\r", "+\tint parentWidth = argList2 [1] + (parentBorder * 2);\r", "+\tint parentHeight = argList2 [3] + (parentBorder * 2);\r", "+\tint newX = lastX, newY = lastY;\r", "+\tif ((style & SWT.VERTICAL) != 0) {\r", "+\t\tnewX = Math.min (Math.max (0, xEvent.x + x - startX - parentBorder), parentWidth - width);\r", "+\t} else {\r", "+\t\tnewY = Math.min (Math.max (0, xEvent.y + y - startY - parentBorder), parentHeight - height);\r", "+\t}\r", "+\tif (newX == lastX && newY == lastY) return result;\r", "+\tdrawBand (lastX, lastY, width, height);\r", "+\t/* The event must be sent because its doit flag is used. */\r", "+\tEvent event = new Event ();\r", "+\tevent.detail = SWT.DRAG;\r", "+\tevent.time = xEvent.time;\r", "+\tevent.x = newX;  event.y = newY;\r", "+\tevent.width = width;  event.height = height;\r", "+\t/*\r", "+\t * It is possible (but unlikely) that client code could have disposed\r", "+\t * the widget in the selection event.  If this happens end the processing\r", "+\t * of this message by returning.\r", "+\t */\r", "+\tsendEvent (SWT.Selection, event);\r", "+\tif (isDisposed ()) return result;\r", "+\tif (event.doit) {\r", "+\t\tlastX = event.x;  lastY = event.y;\r", "+\t\tOS.XmUpdateDisplay (handle);\r", "+\t\tdrawBand (lastX, lastY, width, height);\r", "+\t}\r", "+\treturn result;\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c9c2fe8a5c108f2dd2eab7bdf9ffcaf8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "f42c053356303e47bc6d7d2682ada8c7675ed0fc", "commitAfterChange": "e37c5d247d99282f597655a55a69f15eb55de4d4", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r int processMouseUp (int callData)", "signatureAfterChange": "\r int XButtonRelease (int w, int client_data, int call_data, int continue_to_dispatch)", "diff": ["-}\r", "-int processMouseUp (int callData) {\r", "-\tsuper.processMouseUp (callData);\r", "-\tXButtonEvent xEvent = new XButtonEvent ();\r", "-\tOS.memmove (xEvent, callData, XButtonEvent.sizeof);\r", "-\tif (xEvent.button != 1) return 0;\r", "-\tif (!dragging) return 0;\r", "-\tdragging = false;\r", "-\tint [] argList = {OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "-\tOS.XtGetValues (handle, argList, argList.length / 2);\r", "-\tint border = argList [5];\r", "-\tint width = argList [1] + (border * 2), height = argList [3] + (border * 2);\r", "-\t/* The event must be sent because its doit flag is used. */\r", "-\tEvent event = new Event ();\r", "-\tevent.time = xEvent.time;\r", "-\tevent.x = lastX;  event.y = lastY;\r", "-\tevent.width = width;  event.height = height;\r", "-\tdrawBand (lastX, lastY, width, height);\r", "-\tsendEvent (SWT.Selection, event);\r", "-\t/* widget could be disposed here */\r", "-\treturn 0;\r", "-}\r", "+}\r", "+int XButtonRelease (int w, int client_data, int call_data, int continue_to_dispatch) {\r", "+\tint result = super.XButtonRelease (w, client_data, call_data, continue_to_dispatch);\r", "+\tif (result != 0) return result;\r", "+\tXButtonEvent xEvent = new XButtonEvent ();\r", "+\tOS.memmove (xEvent, call_data, XButtonEvent.sizeof);\r", "+\tif (xEvent.button != 1) return result;\r", "+\tif (!dragging) return result;\r", "+\tdragging = false;\r", "+\tint [] argList = {OS.XmNwidth, 0, OS.XmNheight, 0, OS.XmNborderWidth, 0};\r", "+\tOS.XtGetValues (handle, argList, argList.length / 2);\r", "+\tint border = argList [5];\r", "+\tint width = argList [1] + (border * 2), height = argList [3] + (border * 2);\r", "+\t/* The event must be sent because its doit flag is used. */\r", "+\tEvent event = new Event ();\r", "+\tevent.time = xEvent.time;\r", "+\tevent.x = lastX;  event.y = lastY;\r", "+\tevent.width = width;  event.height = height;\r", "+\tdrawBand (lastX, lastY, width, height);\r", "+\tsendEvent (SWT.Selection, event);\r", "+\t/* widget could be disposed here */\r", "+\treturn result;\r", "+}\r"]}], "num": 8347}
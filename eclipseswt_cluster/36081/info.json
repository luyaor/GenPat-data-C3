{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0b9be802dfb4085e56ae16e0a4bda7d3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "13a8e23bceaf76095edf7fd24bc657b2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 7, "signatureBeforeChange": " int getAlignmentOffset(int columnIndex, int columnWidth, GC gc)", "signatureAfterChange": " void computeDisplayTexts (GC gc)", "diff": ["+}", "+void computeDisplayTexts (GC gc) {", "+\tint columnCount = parent.columns.length;", "+\tif (columnCount == 0) return;", "+\t", "+\tFont oldFont = gc.getFont ();", "+\tfor (int i = 0; i < columnCount; i++) {", "+\t\tboolean fontChanged = false;", "+\t\tFont font = getFont (i);", "+\t\tif (!font.equals (oldFont)) {", "+\t\t\tgc.setFont (font);", "+\t\t\tfontChanged = true;", "+\t\tcomputeDisplayText (i, gc);", "+\t\tif (fontChanged) gc.setFont (oldFont);", "-int getAlignmentOffset(int columnIndex, int columnWidth, GC gc) {", "-\tTable parent = getParent();", "-\tTableColumn column = parent.internalGetColumn (columnIndex);", "-\tImage image = getImage(columnIndex);\t", "-\tint alignmentOffset = 0;", "-\tint alignment = column.getAlignment();", "-\tString label  = getText(gc, column);", "-\tint imageWidth = 0;", "-\tint textWidth = gc.stringExtent (label).x;", "-\tPoint imageExtent = parent.getImageExtent();", "-\tif (((columnIndex == TableColumn.FIRST &&\t\t\t\t\t\t\t\t// always add the image width for the first column ", "- \t \t  parent.hasFirstColumnImage() == true) ||\t\t\t\t\t\t\t// if any item in the first column has an image", "-\t\t (columnIndex != TableColumn.FIRST && \t\t\t\t\t\t\t\t// add the image width if it's not the first column", "-\t\t  image != null)) &&\t\t\t\t\t\t\t\t\t\t \t\t// only when the item actually has an image", "-\t\timageExtent != null) {\t\t\t\t\t\t\t\t\t", "-\t\ttextWidth += imageExtent.x;", "-\t}", "-\tif ((alignment & SWT.RIGHT) != 0) {", "-\t\talignmentOffset = columnWidth - textWidth - imageWidth - TEXT_INDENT - TEXT_INDENT;", "-\t}", "-\tif ((alignment & SWT.CENTER) != 0) {", "-\t\talignmentOffset = ((columnWidth - textWidth) / 2) - imageWidth - TEXT_INDENT;", "-\t}", "-\tif (alignmentOffset < 0) alignmentOffset = 0;", "-\treturn alignmentOffset;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8d6df7968309d9bcb433a82bc770807", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 40, "signatureBeforeChange": "  int processResize (Object callData)", "signatureAfterChange": "  int kEventWindowHidden (int nextHandler, int theEvent, int userData)", "diff": ["+", "+int kEventWindowHidden (int nextHandler, int theEvent, int userData) {", "+\tint result = super.kEventWindowHidden (nextHandler, theEvent, userData);", "+\tif (result == OS.noErr) return result;", "+\tShell [] shells = getShells ();", "+\tfor (int i=0; i<shells.length; i++) {", "+\t\tShell shell = shells [i];", "+\t\tif (!shell.isDisposed ()) shell.setWindowVisible (false);", "+\t}", "+\treturn OS.eventNotHandledErr;", "+}", "-int processResize (Object callData) {", "-", "-\tMacRect bounds= new MacRect();", "-", "-\t// outside bounds and location", "-\tOS.GetWindowBounds(shellHandle, OS.kWindowStructureRgn, bounds.getData());", "-\tint x= bounds.getX();", "-\tint y= bounds.getY();", "-", "-\t// inside bounds and location", "-\tOS.GetWindowBounds(shellHandle, OS.kWindowContentRgn, bounds.getData());", "-\tint w= bounds.getWidth();", "-\tint h= bounds.getHeight();", "-\t\t", "-\tboolean positionChanged= (oldX != x || oldY != y);", "-\tboolean sizeChanged= (oldWidth != w || oldHeight != h);", "-", "-\tif (scrolledHandle != 0 && sizeChanged) {", "-\t\thandleResize(scrolledHandle, new MacRect(0, 0, w, h));", "-\t}", "-\t", "-\tif (positionChanged) {", "-\t\t//System.out.println(\"Shell.send: SWT.Move\");", "-\t\tsendEvent(SWT.Move);", "-\t}", "-\t", "-\tif (sizeChanged) {", "-\t\t//System.out.println(\"Shell.send: SWT.Resize\");", "-\t\tsendEvent (SWT.Resize);", "-\t\tif (layout != null)", "-\t\t\tlayout (false);", "-\t}", "-\t", "-\tif (!OS.IsWindowVisible(shellHandle))", "-\t\treturn 0;", "-", "-\t", "-\tif (x != 0) oldX = x;", "-\tif (y != 0) oldY = y;", "-\toldWidth = w;", "-\toldHeight = h;", "-", "-    /* AW", "-\tXConfigureEvent xEvent = new XConfigureEvent ();", "-\tOS.memmove (xEvent, callData, XConfigureEvent.sizeof);", "-\tswitch (xEvent.type) {", "-\t\tcase OS.ReparentNotify: {", "-\t\t\tif (reparented) return 0;", "-\t\t\treparented = true;", "-\t\t\tshort [] root_x = new short [1], root_y = new short [1];", "-\t\t\tOS.XtTranslateCoords (scrolledHandle, (short) 0, (short) 0, root_x, root_y);", "-\t\t\tint [] argList = {OS.XmNwidth, 0, OS.XmNheight, 0};", "-\t\t\tOS.XtGetValues (scrolledHandle, argList, argList.length / 2);", "-\t\t\txEvent.x = root_x [0];  xEvent.y = root_y [0];", "-\t\t\txEvent.width = argList [1];  xEvent.height = argList [3];", "-\t\t\t// fall through", "-\t\t}", "-\t\tcase OS.ConfigureNotify:", "-\t\t\tif (!reparented) return 0;", "-\t\t\tif (oldX != xEvent.x || oldY != xEvent.y) sendEvent (SWT.Move);", "-\t\t\tif (oldWidth != xEvent.width || oldHeight != xEvent.height) {", "-\t\t\t\tsendEvent (SWT.Resize);", "-\t\t\t\tif (layout != null) layout (false);", "-\t\t\t}", "-\t\t\tif (xEvent.x != 0) oldX = xEvent.x;", "-\t\t\tif (xEvent.y != 0) oldY = xEvent.y;", "-\t\t\toldWidth = xEvent.width;", "-\t\t\toldHeight = xEvent.height;", "-\t\t\treturn 0;", "-\t\tcase OS.UnmapNotify:", "-\t\t\tint [] argList = {OS.XmNmappedWhenManaged, 0};", "-\t\t\tOS.XtGetValues (shellHandle, argList, argList.length / 2);", "-\t\t\tif (argList [1] != 0) {", "-\t\t\t\tminimized = true;", "-\t\t\t\tsendEvent (SWT.Iconify);", "-\t\t\t}", "-\t\t\treturn 0;", "-\t\tcase OS.MapNotify:", "-\t\t\tif (minimized) {", "-\t\t\t\tminimized = false;", "-\t\t\t\tsendEvent (SWT.Deiconify);", "-\t\t\t}", "-\t\t\treturn 0;", "-\t}", "-    */", "-\treturn 0;", "-}"]}], "num": 36081}
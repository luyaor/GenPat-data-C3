{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bda3a178714eb3cf3d89a55b48e26bb1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "242d2e06c8e22cfbadc5d310fb302748", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "6938a0dacfb030f7e7b03dc092215adacd9a08a9", "commitAfterChange": "2f091781ca405b743f12ec57a146bdda9d7d30d0", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void copyArea(Image image, int x, int y)", "signatureAfterChange": " public void copyArea(Image image, int x, int y)", "diff": ["-\tImage srcImage = data.image;", "-\tif (srcImage != null) {", "-\t\tint srcX = x, srcY = y, destX = 0, destY = 0;", "-\t\tNSSize srcSize = srcImage.handle.size();", "-\t\tint imgHeight = (int)srcSize.height;", "-\t\tint destWidth = (int)srcSize.width - x, destHeight = (int)srcSize.height - y;", "-\t\tint srcWidth = destWidth, srcHeight = destHeight;\t\t", "-\t\tNSGraphicsContext context = NSGraphicsContext.graphicsContextWithBitmapImageRep(image.imageRep);", "-\t\tNSGraphicsContext.static_saveGraphicsState();", "-\t\tNSGraphicsContext.setCurrentContext(context);", "-\t\tNSAffineTransform transform = NSAffineTransform.transform();", "-\t\tNSSize size = image.handle.size();", "-\t\ttransform.translateXBy(0, size.height-(destHeight + 2 * destY));", "-\t\ttransform.concat();", "-\t\tNSRect srcRect = new NSRect();", "-\t\tsrcRect.x = srcX;", "-\t\tsrcRect.y = imgHeight - (srcY + srcHeight);", "-\t\tsrcRect.width = srcWidth;", "-\t\tsrcRect.height = srcHeight;", "-\t\tNSRect destRect = new NSRect();", "-\t\tdestRect.x = destX;", "-\t\tdestRect.y = destY;", "-\t\tdestRect.width = destWidth;", "-\t\tdestRect.height = destHeight;", "-\t\tsrcImage.handle.drawInRect(destRect, srcRect, OS.NSCompositeCopy, 1);", "- \t\tNSGraphicsContext.static_restoreGraphicsState();", "-\t\treturn;", "+\tNSAutoreleasePool pool = checkGC(TRANSFORM | CLIPPING);", "+\ttry {", "+\t\tif (data.image != null) {", "+\t\t\tint srcX = x, srcY = y, destX = 0, destY = 0;", "+\t\t\tNSSize srcSize = data.image.handle.size();", "+\t\t\tint imgHeight = (int)srcSize.height;", "+\t\t\tint destWidth = (int)srcSize.width - x, destHeight = (int)srcSize.height - y;", "+\t\t\tint srcWidth = destWidth, srcHeight = destHeight;\t\t", "+\t\t\tNSGraphicsContext context = NSGraphicsContext.graphicsContextWithBitmapImageRep(image.imageRep);", "+\t\t\tNSGraphicsContext.static_saveGraphicsState();", "+\t\t\tNSGraphicsContext.setCurrentContext(context);", "+\t\t\tNSAffineTransform transform = NSAffineTransform.transform();", "+\t\t\tNSSize size = image.handle.size();", "+\t\t\ttransform.translateXBy(0, size.height-(destHeight + 2 * destY));", "+\t\t\ttransform.concat();", "+\t\t\tNSRect srcRect = new NSRect();", "+\t\t\tsrcRect.x = srcX;", "+\t\t\tsrcRect.y = imgHeight - (srcY + srcHeight);", "+\t\t\tsrcRect.width = srcWidth;", "+\t\t\tsrcRect.height = srcHeight;", "+\t\t\tNSRect destRect = new NSRect();", "+\t\t\tdestRect.x = destX;", "+\t\t\tdestRect.y = destY;", "+\t\t\tdestRect.width = destWidth;", "+\t\t\tdestRect.height = destHeight;", "+\t\t\tdata.image.handle.drawInRect(destRect, srcRect, OS.NSCompositeCopy, 1);", "+\t \t\tNSGraphicsContext.static_restoreGraphicsState();", "+\t\t\treturn;", "+\t\t}", "+\t\tif (data.view != null) {", "+\t\t\t//TODO implement copyArea(Image, int int) for views", "+\t\t\treturn;", "+\t\t}", "+\t\tif (handle.isDrawingToScreen()) {", "+\t\t\tNSImage imageHandle = image.handle;", "+\t\t\tNSSize size = imageHandle.size();", "+\t\t\tCGRect rect = new CGRect();", "+\t\t\trect.origin.x = x;", "+\t\t\trect.origin.y = y;", "+\t\t\trect.size.width = size.width;", "+\t\t\trect.size.height = size.height;", "+\t\t\tint displayCount = 16;", "+\t\t\tint /*long*/ displays = OS.malloc(4 * displayCount), countPtr = OS.malloc(4);", "+\t\t\tif (OS.CGGetDisplaysWithRect(rect, displayCount, displays, countPtr) != 0) return;", "+\t\t\tint[] count = new int[1], display = new int[1];", "+\t\t\tOS.memmove(count, countPtr, OS.PTR_SIZEOF);", "+\t\t\tfor (int i = 0; i < count[0]; i++) {", "+\t\t\t\tOS.memmove(display, displays + (i * 4), 4);", "+\t\t\t\tOS.CGDisplayBounds(display[0], rect);", "+\t\t\t\tint /*long*/ address = OS.CGDisplayBaseAddress(display[0]);", "+\t\t\t\tif (address != 0) {", "+\t\t\t\t\tint /*long*/ width = OS.CGDisplayPixelsWide(display[0]);", "+\t\t\t\t\tint /*long*/ height = OS.CGDisplayPixelsHigh(display[0]);", "+\t\t\t\t\tint /*long*/ bpr = OS.CGDisplayBytesPerRow(display[0]);", "+\t\t\t\t\tint /*long*/ bpp = OS.CGDisplayBitsPerPixel(display[0]);", "+\t\t\t\t\tint /*long*/ bps = OS.CGDisplayBitsPerSample(display[0]);", "+\t\t\t\t\tint bitmapInfo = OS.kCGImageAlphaNoneSkipFirst;", "+\t\t\t\t\tswitch ((int)/*63*/bpp) {", "+\t\t\t\t\t\tcase 16: bitmapInfo |= OS.kCGBitmapByteOrder16Host; break;", "+\t\t\t\t\t\tcase 32: bitmapInfo |= OS.kCGBitmapByteOrder32Host; break;", "+\t\t\t\t\t}", "+\t\t\t\t\tint /*long*/ srcImage = 0;", "+\t\t\t\t\tif (OS.__BIG_ENDIAN__() && OS.VERSION >= 0x1040) {", "+\t\t\t\t\t\tint /*long*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "+\t\t\t\t\t\tint /*long*/ context = OS.CGBitmapContextCreate(address, width, height, bps, bpr, colorspace, bitmapInfo);", "+\t\t\t\t\t\tOS.CGColorSpaceRelease(colorspace);", "+\t\t\t\t\t\tsrcImage = OS.CGBitmapContextCreateImage(context);", "+\t\t\t\t\t\tOS.CGContextRelease(context);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint /*long*/ provider = OS.CGDataProviderCreateWithData(0, address, bpr * height, 0);", "+\t\t\t\t\t\tint /*long*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "+\t\t\t\t\t\tsrcImage = OS.CGImageCreate(width, height, bps, bpp, bpr, colorspace, bitmapInfo, provider, 0, true, 0);", "+\t\t\t\t\t\tOS.CGColorSpaceRelease(colorspace);", "+\t\t\t\t\t\tOS.CGDataProviderRelease(provider);", "+\t\t\t\t\t}", "+\t\t\t\t\tcopyArea(image, x - (int)rect.origin.x, y - (int)rect.origin.y, srcImage);", "+\t\t\t\t\tif (srcImage != 0) OS.CGImageRelease(srcImage);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.free(displays);", "+\t\t\tOS.free(countPtr);", "+\t\t}\t", "+\t} finally {", "+\t\tuncheckGC(pool);", "-\tif (data.view != null) {", "-\t\t//TODO implement copyArea(Image, int int) for views", "-\t\treturn;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a91e4c760ca74a0bb3fd6b7d25a018c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "0824c6be1a1f5c02e5a0811758feb938d6ec8c29", "commitAfterChange": "d976ddbe207f4b84af7155d1db6c5e1e64234e41", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void copyArea(Image image, int x, int y)", "signatureAfterChange": " public void copyArea(Image image, int x, int y)", "diff": ["-//\tif (data.image != null) {", "-//\t\tcopyArea(image, x, y, data.image.handle);", "-//\t} else if (data.control != 0) {", "-//\t\tint imageHandle = image.handle;", "-//\t\tint width = OS.CGImageGetWidth(imageHandle);", "-//\t\tint height = OS.CGImageGetHeight(imageHandle);", "-//\t\tint window = OS.GetControlOwner(data.control);", "-//\t\tRect srcRect = new Rect ();", "-//\t\tCGPoint pt = new CGPoint ();", "-//\t\tint[] contentView = new int[1];", "-//\t\tOS.HIViewFindByID(OS.HIViewGetRoot(window), OS.kHIViewWindowContentID(), contentView);", "-//\t\tOS.HIViewConvertPoint (pt, data.control, contentView[0]);", "-//\t\tx += (int) pt.x;", "-//\t\ty += (int) pt.y;", "-//\t\tRect inset = data.insetRect;", "-//\t\tx -= inset.left;", "-//\t\ty -= inset.top;", "-//\t\tsrcRect.left = (short)x;", "-//\t\tsrcRect.top = (short)y;", "-//\t\tsrcRect.right = (short)(x + width);", "-//\t\tsrcRect.bottom = (short)(y + height);", "-//\t\tRect destRect = new Rect();", "-//\t\tdestRect.right = (short)width;", "-//\t\tdestRect.bottom = (short)height;", "-//\t\tint bpl = width * 4;", "-//\t\tint[] gWorld = new int[1];", "-//\t\tint port = OS.GetWindowPort(window);\t\t", "-//\t\tOS.NewGWorldFromPtr(gWorld, OS.k32ARGBPixelFormat, destRect, 0, 0, 0, image.data, bpl);", "-//\t\tOS.CopyBits(OS.GetPortBitMapForCopyBits(port), OS.GetPortBitMapForCopyBits(gWorld[0]), srcRect, destRect, (short)OS.srcCopy, 0);\t\t\t", "-//\t\tOS.DisposeGWorld(gWorld [0]);", "-//\t} else if (data.window != 0) {", "-//\t\tint imageHandle = image.handle;", "-//\t\tCGRect rect = new CGRect();", "-//\t\trect.x = x;", "-//\t\trect.y = y;", "-//\t\trect.width = OS.CGImageGetWidth(imageHandle);", "-//\t\trect.height = OS.CGImageGetHeight(imageHandle);", "-//\t\tint[] displays = new int[16];", "-//\t\tint[] count = new int[1];", "-//\t\tif (OS.CGGetDisplaysWithRect(rect, displays.length, displays, count) != 0) return;", "-//\t\tfor (int i = 0; i < count[0]; i++) {", "-//\t\t\tint display = displays[i];", "-//\t\t\tint address = OS.CGDisplayBaseAddress(display);", "-//\t\t\tif (address != 0) {", "-//\t\t\t\tint width = OS.CGDisplayPixelsWide(display);", "-//\t\t\t\tint height = OS.CGDisplayPixelsHigh(display);", "-//\t\t\t\tint bpr = OS.CGDisplayBytesPerRow(display);", "-//\t\t\t\tint bpp = OS.CGDisplayBitsPerPixel(display);", "-//\t\t\t\tint bps = OS.CGDisplayBitsPerSample(display);", "-//\t\t\t\tint bitmapInfo = OS.kCGImageAlphaNoneSkipFirst;", "-//\t\t\t\tswitch (bpp) {", "-//\t\t\t\t\tcase 16: bitmapInfo |= OS.kCGBitmapByteOrder16Host; break;", "-//\t\t\t\t\tcase 32: bitmapInfo |= OS.kCGBitmapByteOrder32Host; break;", "-//\t\t\t\t}", "-//\t\t\t\tint srcImage = 0;", "-//\t\t\t\tif (OS.__BIG_ENDIAN__() && OS.VERSION >= 0x1040) {", "-//\t\t\t\t\tint context = OS.CGBitmapContextCreate(address, width, height, bps, bpr, data.device.colorspace, bitmapInfo);", "-//\t\t\t\t\tsrcImage = OS.CGBitmapContextCreateImage(context);", "-//\t\t\t\t\tOS.CGContextRelease(context);", "-//\t\t\t\t} else {", "-//\t\t\t\t\tint provider = OS.CGDataProviderCreateWithData(0, address, bpr * height, 0);", "-//\t\t\t\t\tsrcImage = OS.CGImageCreate(width, height, bps, bpp, bpr, data.device.colorspace, bitmapInfo, provider, null, true, 0);", "-//\t\t\t\t\tOS.CGDataProviderRelease(provider);", "-//\t\t\t\t}", "-//\t\t\t\tcopyArea(image, x, y, srcImage);", "-//\t\t\t\tif (srcImage != 0) OS.CGImageRelease(srcImage);", "-//\t\t\t}", "-//\t\t}", "-//\t}\t", "-}", "+\tImage srcImage = data.image;", "+\tif (srcImage != null) {", "+\t\tint srcX = x, srcY = y, destX = 0, destY = 0;", "+\t\tNSSize srcSize = srcImage.handle.size();", "+\t\tint imgHeight = (int)srcSize.height;", "+\t\tint destWidth = (int)srcSize.width - x, destHeight = (int)srcSize.height - y;", "+\t\tint srcWidth = destWidth, srcHeight = destHeight;\t\t", "+\t\tNSGraphicsContext context = NSGraphicsContext.graphicsContextWithBitmapImageRep(image.imageRep);", "+\t\tNSGraphicsContext.static_saveGraphicsState();", "+\t\tNSGraphicsContext.setCurrentContext(context);", "+\t\tNSAffineTransform transform = NSAffineTransform.transform();", "+\t\tNSSize size = image.handle.size();", "+\t\ttransform.translateXBy(0, size.height-(destHeight + 2 * destY));", "+\t\ttransform.concat();", "+\t\tNSRect srcRect = new NSRect();", "+\t\tsrcRect.x = srcX;", "+\t\tsrcRect.y = imgHeight - (srcY + srcHeight);", "+\t\tsrcRect.width = srcWidth;", "+\t\tsrcRect.height = srcHeight;", "+\t\tNSRect destRect = new NSRect();", "+\t\tdestRect.x = destX;", "+\t\tdestRect.y = destY;", "+\t\tdestRect.width = destWidth;", "+\t\tdestRect.height = destHeight;", "+\t\tsrcImage.handle.drawInRect(destRect, srcRect, OS.NSCompositeCopy, 1);", "+ \t\tNSGraphicsContext.static_restoreGraphicsState();", "+\t\treturn;", "+\t}", "+\tif (data.view != null) {", "+\t\t//TODO implement copyArea(Image, int int) for views", "+\t\treturn;", "+\t}"]}], "num": 24066}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "71d9fc49e173ae86b9810cff4d58a595", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "69fc1eb243ee24f468ac54c8770f63ef", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "b181daebd9df7df3f94c04f9f49871a9297d5975", "commitAfterChange": "e8821205e4acac4ef6d9126d8df658071d8ab9df", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 51, "signatureBeforeChange": "  boolean translateTraversal (MSG msg)", "signatureAfterChange": "  boolean translateTraversal (MSG msg)", "diff": ["-\t/*", "-\t* Feature in Windows.  For some reason, when the", "-\t* user presses tab, return or escape, Windows beeps.", "-\t* The fix is to look for these keys and not call", "-\t* the window proc.", "-\t*/", "-\t\t\t\t// FALL THROUGH", "-\t\t\tcase OS.VK_TAB:", "-\t\t\tcase OS.VK_RETURN:", "-\t\t\t\tboolean translated = super.translateTraversal (msg);", "-\t\t\t\tif (!translated) {", "-\t\t\t\t\tif (sendKeyEvent (SWT.KeyDown, msg.message, msg.wParam, msg.lParam)) {", "-\t\t\t\t\t\tif (msg.wParam == OS.VK_RETURN) {", "-\t\t\t\t\t\t\tsendEvent (SWT.DefaultSelection);", "-\t\t\t\t\t\t\t// widget could be disposed at this point", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1a1f7318b6896e65799de3110e39fc3b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "85f1fc56d7da27f427cc958ea00c02335ade970a", "commitAfterChange": "166233a02615ac1e2681ccfd00cba112f3ec895b", "methodNumberBeforeChange": 204, "methodNumberAfterChange": 203, "signatureBeforeChange": " void handleTextChanging(TextChangingEvent event)", "signatureAfterChange": " void handleTextChanging(TextChangingEvent event)", "diff": ["-\tif (isFixedLineHeight()) {", "-\t\tboolean isMultiLineChange = event.replaceLineCount > 0 || event.newLineCount > 0;\t\t\t", "-\t\tif (isMultiLineChange) {\t\t\t", "-\t\t\tint firstLine = content.getLineAtOffset(event.start);", "-\t\t\tint textChangeY = getLinePixel(firstLine);", "-\t\t\tredrawMultiLineChange(textChangeY, event.newLineCount, event.replaceLineCount);", "-\t\t}", "-\t} else {", "-\t\tint lastLine = content.getLineAtOffset(event.start) + event.replaceLineCount;", "-\t\tlastLineBottom = getLinePixel(lastLine + 1);", "-\t}", "+\tint lastLine = content.getLineAtOffset(event.start) + event.replaceLineCount;", "+\tlastLineBottom = getLinePixel(lastLine + 1);", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3ac0988add2b1768502846ce5d89cf51", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "fa5f2489bdf14a8636f01b8292ce465b8e1cfb0a", "commitAfterChange": "a5730346b2941e8fcd1f3e126cea623d204e89ab", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  int gtk_key_press_event (int widget, int event)", "signatureAfterChange": "  int gtk_key_press_event (int widget, int event)", "diff": ["-\tif (OS.GTK_VERSION < OS.VERSION (2, 2 ,0)) {", "-\t\t/*", "-\t\t* Feature in GTK 2.0.x.  When an item is default selected using", "-\t\t* the return key, GTK does not issue notification. The fix is", "-\t\t* to issue this notification when the return key is pressed.", "-\t\t*/", "-\t\tGdkEventKey keyEvent = new GdkEventKey ();", "-\t\tOS.memmove (keyEvent, event, GdkEventKey.sizeof);", "-\t\tint key = keyEvent.keyval;", "-\t\tswitch (key) {", "-\t\t\tcase OS.GDK_Return:", "-\t\t\tcase OS.GDK_KP_Enter: {", "-\t\t\t\tsendSelectionEvent (SWT.DefaultSelection);", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4c52bd8fbfb736045349a5af9ef1719", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "0f9228e37d88d68865fcb7436fdc2369b8c4269d", "commitAfterChange": "d39c0d60a7dc7a3df4f8a21ab9656d8dd2fc3dfc", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  int getMsgProc (int code, int wParam, int lParam)", "signatureAfterChange": "  int getMsgProc (int code, int wParam, int lParam)", "diff": ["-\t\t\tcase SWT_RESIZE: {", "-\t\t\t\tif (msg.hwnd == 0 && msg.wParam != 0) {", "-\t\t\t\t\tOS.PostMessage (embeddedHwnd, SWT_RESIZE, msg.wParam, msg.lParam);", "-\t\t\t\t\tmsg.message = OS.WM_NULL;", "-\t\t\t\t\tOS.MoveMemory (lParam, msg, MSG.sizeof);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7708162336aa231ee64bcec5eb6260b5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "48512dc20e32e369917d3e1ccfb92109c9724e7e", "commitAfterChange": "1942f64e0b774317e0a8e6ec44902bb736bb7790", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 24, "signatureBeforeChange": " public int getSelectionCount ()", "signatureAfterChange": " public int getSelectionCount ()", "diff": ["-\tGtkEditable widget = new GtkEditable ();", "+\t/*GtkEditable widget = new GtkEditable ();", "-\treturn  end - start;", "+\treturn  end - start;*/", "+\treturn 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "669f68ad97d986304e0890a646ebe0e4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "48512dc20e32e369917d3e1ccfb92109c9724e7e", "commitAfterChange": "1942f64e0b774317e0a8e6ec44902bb736bb7790", "methodNumberBeforeChange": 48, "methodNumberAfterChange": 47, "signatureBeforeChange": " public void setSelection (Point selection)", "signatureAfterChange": " public void setSelection (Point selection)", "diff": ["-\tif (selection == null) error (SWT.ERROR_NULL_ARGUMENT);", "-\tGtkCombo gtkCombo = new GtkCombo ();", "-\tOS.memmove (gtkCombo, handle, GtkCombo.sizeof);", "-\tint entry = gtkCombo.entry;", "-\tOS.gtk_editable_set_position (entry, selection.x);", "-\tOS.gtk_editable_select_region (entry, selection.x, selection.y);", "+\t/*if (selection == null) error (SWT.ERROR_NULL_ARGUMENT);", "+\tOS.gtk_editable_set_position (entryHandle, selection.x);", "+\tOS.gtk_editable_select_region (entryHandle, selection.x, selection.y);*/"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "614bd3fd278d12cc1c645044677e4664", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "941fe0db3dd763ccfa22752197e6c0aece974d95", "commitAfterChange": "d4d83e9bda0ef720f842c49259231cc258ca06e7", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "  LRESULT WM_ACTIVATE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_ACTIVATE (int wParam, int lParam)", "diff": ["-\t/*", "-\t* Feature in AWT.  When an AWT Window is activated,", "-\t* for some reason, it seems to forward the WM_ACTIVATE", "-\t* message to the parent.  Normally, the parent is an", "-\t* AWT Frame.  When AWT is embedded in SWT, the SWT", "-\t* shell gets the WM_ACTIVATE and assumes that it came", "-\t* from Windows.  When an SWT shell is activated it", "-\t* restores focus to the last control that had focus.", "-\t* If this control is an embedded composite, it takes", "-\t* focus from the AWT Window.  The fix is to ignore", "-\t* WM_ACTIVATE messages that come from AWT Windows.", "-\t*/", "-\tif (OS.GetParent (lParam) == handle) {", "-\t\tTCHAR buffer = new TCHAR (0, 128);", "-\t\tOS.GetClassName (lParam, buffer, buffer.length ());", "-\t\tString className = buffer.toString (0, buffer.strlen ());", "-\t\tif (className.equals (Display.AWT_WINDOW_CLASS)) {", "-\t\t\treturn LRESULT.ZERO;", "-\t\t}", "-\t}", "+//\tint threadId = OS.GetWindowThreadProcessId (lParam, null);", "+//\tif (threadId != OS.GetCurrentThreadId ()) {", "+//\t\tint [] processID = new int [1];", "+//\t\tOS.GetWindowThreadProcessId (lParam, processID);", "+//\t\tif (processID [0] == OS.GetCurrentProcessId ()) {", "+//\t\t\tTCHAR buffer = new TCHAR (0, 128);", "+//\t\t\tOS.GetClassName (lParam, buffer, buffer.length ());", "+//\t\t\tString className = buffer.toString (0, buffer.strlen ());", "+//\t\t\t/*", "+//\t\t\t* Feature in AWT.  ", "+//\t\t\t*/", "+//\t\t\tif (className.startsWith (Display.AWT_WINDOW_CLASS_PREFIX)) {", "+//\t\t\t\t//OS.ReplyMessage (0);", "+//\t\t\t}", "+//\t\t\t/*", "+//\t\t\t* Feature in AWT.  When an AWT Window is activated,", "+//\t\t\t* for some reason, it seems to forward the WM_ACTIVATE", "+//\t\t\t* message to the parent.  Normally, the parent is an", "+//\t\t\t* AWT Frame.  When AWT is embedded in SWT, the SWT", "+//\t\t\t* shell gets the WM_ACTIVATE and assumes that it came", "+//\t\t\t* from Windows.  When an SWT shell is activated it", "+//\t\t\t* restores focus to the last control that had focus.", "+//\t\t\t* If this control is an embedded composite, it takes", "+//\t\t\t* focus from the AWT Window.  The fix is to ignore", "+//\t\t\t* WM_ACTIVATE messages that come from AWT Windows.", "+//\t\t\t*/", "+//\t\t\tif (OS.GetParent (lParam) == handle) {", "+//\t\t\t\tif (className.equals (Display.AWT_WINDOW_CLASS)) {", "+//\t\t\t\t\treturn LRESULT.ZERO;", "+//\t\t\t\t}", "+//\t\t\t}", "+//\t\t}", "+//\t}"]}], "num": 11171}
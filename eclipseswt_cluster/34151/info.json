{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "dc40c4f660fd9d68b6458f222bf0532d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46fd833e7f7419f90a6d68332939cadd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "2703b6b4917ee70e34e69f6beabdf6e17c0e648e", "commitAfterChange": "0e0eae7504b067875076ee5d9af4693ac4a9b250", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["+\t\tint /*long*/ bitmapData = imageRep.bitmapData();", "+\t\tint /*long*/ bitmapFormat = imageRep.bitmapFormat();", "-", "-\t\tOS.memmove(srcData, imageRep.bitmapData(), dataSize);", "-", "-\t\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "-\t\tImageData data = new ImageData((int)/*64*/width, (int)/*64*/height, (int)/*64*/bpp, palette, 4, srcData);", "+\t\tOS.memmove(srcData, bitmapData, dataSize);", "+\t\t", "+\t\tPaletteData palette;", "+\t\tif (bpp == 32 && (bitmapFormat & OS.NSAlphaFirstBitmapFormat) == 0) {", "+\t\t\tpalette = new PaletteData(0xFF000000, 0xFF0000, 0xFF00);", "+\t\t} else {", "+\t\t\tpalette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "+\t\t}", "+\t\tImageData data = new ImageData((int)/*64*/width, (int)/*64*/height, (int)/*64*/bpp, palette, 1, srcData);", "-", "-\t\tdata.transparentPixel = transparentPixel;", "-\t\tif (transparentPixel == -1 && type == SWT.ICON) {", "-\t\t\t/* Get the icon mask data */", "-\t\t\tint maskPad = 2;", "-\t\t\tint /*long*/ maskBpl = (((width + 7) / 8) + (maskPad - 1)) / maskPad * maskPad;", "-\t\t\tbyte[] maskData = new byte[(int)/*64*/(height * maskBpl)];", "-\t\t\tint offset = 0, maskOffset = 0;", "-\t\t\tfor (int y = 0; y<height; y++) {", "-\t\t\t\tfor (int x = 0; x<width; x++) {", "-\t\t\t\t\tif (srcData[offset] != 0) {", "-\t\t\t\t\t\tmaskData[maskOffset + (x >> 3)] |= (1 << (7 - (x & 0x7)));", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tmaskData[maskOffset + (x >> 3)] &= ~(1 << (7 - (x & 0x7)));", "-\t\t\t\t\t}", "-\t\t\t\t\toffset += 4;", "-\t\t\t\t}", "-\t\t\t\tmaskOffset += maskBpl;", "+\t\tif (imageRep.hasAlpha() && transparentPixel == -1 && alpha == -1 && alphaData == null) {", "+\t\t\tbyte[] alphaData = new byte[(int)/*64*/(width * height)];", "+\t\t\tint offset = (bitmapFormat & OS.NSAlphaFirstBitmapFormat) != 0 ? 0 : 3, a = 0;", "+\t\t\tfor (int i = offset; i < srcData.length; i+= 4) {", "+\t\t\t\talphaData[a++] = srcData[i];", "-\t\t\tdata.maskData = maskData;", "-\t\t\tdata.maskPad = maskPad;", "+\t\t\tdata.alphaData = alphaData;", "+\t\t} else {", "+\t\t\tdata.transparentPixel = transparentPixel;", "+\t\t\tif (transparentPixel == -1 && type == SWT.ICON) {", "+\t\t\t\t/* Get the icon mask data */", "+\t\t\t\tint maskPad = 2;", "+\t\t\t\tint /*long*/ maskBpl = (((width + 7) / 8) + (maskPad - 1)) / maskPad * maskPad;", "+\t\t\t\tbyte[] maskData = new byte[(int)/*64*/(height * maskBpl)];", "+\t\t\t\tint offset = 0, maskOffset = 0;", "+\t\t\t\tfor (int y = 0; y<height; y++) {", "+\t\t\t\t\tfor (int x = 0; x<width; x++) {", "+\t\t\t\t\t\tif (srcData[offset] != 0) {", "+\t\t\t\t\t\t\tmaskData[maskOffset + (x >> 3)] |= (1 << (7 - (x & 0x7)));", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tmaskData[maskOffset + (x >> 3)] &= ~(1 << (7 - (x & 0x7)));", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\toffset += 4;", "+\t\t\t\t\t}", "+\t\t\t\t\tmaskOffset += maskBpl;", "+\t\t\t\t}", "+\t\t\t\tdata.maskData = maskData;", "+\t\t\t\tdata.maskPad = maskPad;", "+\t\t\t}", "+\t\t\tdata.alpha = alpha;", "+\t\t\tif (alpha == -1 && alphaData != null) {", "+\t\t\t\tdata.alphaData = new byte[alphaData.length];", "+\t\t\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);", "+\t\t\t}", "-\t\tfor (int i = 0; i < srcData.length; i+= 4) {", "-\t\t\tsrcData[i] = 0;", "-\t\t}", "-\t\tdata.alpha = alpha;", "-\t\tif (alpha == -1 && alphaData != null) {", "-\t\t\tdata.alphaData = new byte[alphaData.length];", "-\t\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);", "+\t\tif (bpp == 32) {", "+\t\t\tint offset = (bitmapFormat & OS.NSAlphaFirstBitmapFormat) != 0 ? 0 : 3;", "+\t\t\tfor (int i = offset; i < srcData.length; i+= 4) {", "+\t\t\t\tsrcData[i] = 0;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5868914f7a970185e97c4093b38a7ec", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public ImageData getImageData()", "signatureAfterChange": " public ImageData getImageData()", "diff": ["+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tNSSize size = handle.size();", "+\t\tint width = (int)size.width;", "+\t\tint height = (int)size.height;", "+\t\tNSBitmapImageRep imageRep = this.imageRep;", "+\t\tint /*long*/ bpr = imageRep.bytesPerRow();", "+\t\tint /*long*/ bpp = imageRep.bitsPerPixel();", "+\t\tint /*long*/ dataSize = height * bpr;", "+\t\tbyte[] srcData = new byte[(int)/*64*/dataSize];", "+\t\tOS.memmove(srcData, imageRep.bitmapData(), dataSize);", "-\tNSSize size = handle.size();", "-\tint width = (int)size.width;", "-\tint height = (int)size.height;", "-\tNSBitmapImageRep imageRep = this.imageRep;", "-\tint /*long*/ bpr = imageRep.bytesPerRow();", "-\tint /*long*/ bpp = imageRep.bitsPerPixel();", "-\tint /*long*/ dataSize = height * bpr;", "-\tbyte[] srcData = new byte[(int)/*64*/dataSize];", "-\tOS.memmove(srcData, imageRep.bitmapData(), dataSize);", "-\t", "-\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "-\tImageData data = new ImageData(width, height, (int)/*64*/bpp, palette, 4, srcData);", "-\tdata.bytesPerLine = (int)/*64*/bpr;", "+\t\tPaletteData palette = new PaletteData(0xFF0000, 0xFF00, 0xFF);", "+\t\tImageData data = new ImageData(width, height, (int)/*64*/bpp, palette, 4, srcData);", "+\t\tdata.bytesPerLine = (int)/*64*/bpr;", "-\tdata.transparentPixel = transparentPixel;", "-\tif (transparentPixel == -1 && type == SWT.ICON) {", "-\t\t/* Get the icon mask data */", "-\t\tint maskPad = 2;", "-\t\tint maskBpl = (((width + 7) / 8) + (maskPad - 1)) / maskPad * maskPad;", "-\t\tbyte[] maskData = new byte[height * maskBpl];", "-\t\tint offset = 0, maskOffset = 0;", "-\t\tfor (int y = 0; y<height; y++) {", "-\t\t\tfor (int x = 0; x<width; x++) {", "-\t\t\t\tif (srcData[offset] != 0) {", "-\t\t\t\t\tmaskData[maskOffset + (x >> 3)] |= (1 << (7 - (x & 0x7)));", "-\t\t\t\t} else {", "-\t\t\t\t\tmaskData[maskOffset + (x >> 3)] &= ~(1 << (7 - (x & 0x7)));", "+\t\tdata.transparentPixel = transparentPixel;", "+\t\tif (transparentPixel == -1 && type == SWT.ICON) {", "+\t\t\t/* Get the icon mask data */", "+\t\t\tint maskPad = 2;", "+\t\t\tint maskBpl = (((width + 7) / 8) + (maskPad - 1)) / maskPad * maskPad;", "+\t\t\tbyte[] maskData = new byte[height * maskBpl];", "+\t\t\tint offset = 0, maskOffset = 0;", "+\t\t\tfor (int y = 0; y<height; y++) {", "+\t\t\t\tfor (int x = 0; x<width; x++) {", "+\t\t\t\t\tif (srcData[offset] != 0) {", "+\t\t\t\t\t\tmaskData[maskOffset + (x >> 3)] |= (1 << (7 - (x & 0x7)));", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tmaskData[maskOffset + (x >> 3)] &= ~(1 << (7 - (x & 0x7)));", "+\t\t\t\t\t}", "+\t\t\t\t\toffset += 4;", "-\t\t\t\toffset += 4;", "+\t\t\t\tmaskOffset += maskBpl;", "-\t\t\tmaskOffset += maskBpl;", "+\t\t\tdata.maskData = maskData;", "+\t\t\tdata.maskPad = maskPad;", "-\t\tdata.maskData = maskData;", "-\t\tdata.maskPad = maskPad;", "+\t\tfor (int i = 0; i < srcData.length; i+= 4) {", "+\t\t\tsrcData[i] = 0;", "+\t\t}", "+\t\tdata.alpha = alpha;", "+\t\tif (alpha == -1 && alphaData != null) {", "+\t\t\tdata.alphaData = new byte[alphaData.length];", "+\t\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);", "+\t\t}", "+\t\treturn data;", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "-\tfor (int i = 0; i < srcData.length; i+= 4) {", "-\t\tsrcData[i] = 0;", "-\t}", "-\tdata.alpha = alpha;", "-\tif (alpha == -1 && alphaData != null) {", "-\t\tdata.alphaData = new byte[alphaData.length];", "-\t\tSystem.arraycopy(alphaData, 0, data.alphaData, 0, alphaData.length);", "-\t}", "-\treturn data;"]}], "num": 34151}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9c83352afa044cdb480e91df2e3b0a64", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "93208872580dddc6cc2fc857253a05dc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolBar.java", "commitBeforeChange": "48512dc20e32e369917d3e1ccfb92109c9724e7e", "commitAfterChange": "1942f64e0b774317e0a8e6ec44902bb736bb7790", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 10, "signatureBeforeChange": " boolean isMyHandle(int h)", "signatureAfterChange": "  boolean isMyHandle(int h)", "diff": ["- */", "+int parentingHandle() { return fixedHandle; } ", "-\tif (h==handle)       return true;", "-\tif (h==tempHandle)  return true;", "-\tif (h==boxHandle)       return true;", "-\treturn false;", "-}", "+\treturn super.isMyHandle(h);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29afb4499d6da89022facd8e25a170c4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "a367fc3916a2570f3fcccaa121cd9f13d3ec0a2d", "commitAfterChange": "a6b0604fa08391fbbca703d6c89f8c08569502b9", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "\r public void setText (String string)", "signatureAfterChange": "\r public void setText (String string)", "diff": ["-\t/*\r", "-\t * Strip out mnemonic marker symbols, and remember the mnemonic.\r", "-\t * Also check for lf's while we're at it, to help with Solaris bug\r", "-\t * described down below.\r", "-\t */\r", "-\tboolean hasLf = false;\r", "+\t/* Strip out mnemonic marker symbols, and remember the mnemonic. */\r", "-\t\tif (unicode [i] == '\\n') hasLf = true;\r", "-\t\tif (mnemonic != 0) string = new String(unicode);\r", "+\t\tif (mnemonic != 0) string = new String (unicode);\r", "-\t\r", "+\t\t\r", "-\t * Bug in Solaris.  If a mnemonic is defined to be a character\r", "-\t * that only appears in a string in a position that follows\r", "-\t * a newline character then Solaris GP's since it\r", "-\t * does not find an instance of the letter to underline in\r", "-\t * the first display line.  For example, a label with text\r", "-\t * \"Hello\\nthe&re\" would GP since \"r\" does not appear in \"Hello\".\r", "-\t *\r", "-\t * The fix is to remove mnemonics from labels that contain\r", "-\t * newlines, which is fine since such labels generally just act\r", "-\t * as descriptive texts anyways.\r", "-\t */ \r", "-\tif (mnemonic == 0 || hasLf) mnemonic = OS.XK_VoidSymbol;\r", "+\t* Bug in Solaris.  If a mnemonic is defined to be a character\r", "+\t* that appears in a string in a position that follows a '\\n',\r", "+\t* Solaris segment faults.  For example, a label with text\r", "+\t* \"Hello\\nthe&re\" would GP since \"r\" appears after '\\n'.\r", "+\t*\r", "+\t* The fix is to remove mnemonics from labels that contain\r", "+\t* '\\n', which is fine since such labels generally just act\r", "+\t* as descriptive texts anyways.\r", "+\t*/ \r", "+\tif (mnemonic == 0 || string.indexOf ('\\n') != -1) {\r", "+\t\tmnemonic = OS.XK_VoidSymbol;\r", "+\t}\r"]}], "num": 475}
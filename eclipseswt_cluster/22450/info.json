{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7418c6449c07bcf81f1a6acaf7368cc3", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "73a2d2d3f3c754dca0bc8ec150ca15bd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 67, "signatureBeforeChange": "  \tstatic int atkText_get_character_count (int atkObject)", "signatureAfterChange": "  \tstatic int atkText_get_character_count (int atkObject)", "diff": ["-\t\tif (object == null) return 0;", "-\t\tString text = object.getText ();", "-\t\tif (text != null) return text.length ();", "-\t\tif (ATK.g_type_is_a (object.parentType, ATK_TEXT_TYPE)) {", "-\t\t\tint /*long*/ superType = ATK.g_type_class_peek (object.parentType);", "-\t\t\tAtkTextIface textIface = new AtkTextIface ();", "-\t\t\tATK.memmove (textIface, superType);", "-\t\t\tif (textIface.get_character_count != 0) {", "-\t\t\t\treturn ATK.call (textIface.get_character_count, object.handle);", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleTextExtendedListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleTextExtendedEvent event = new AccessibleTextExtendedEvent(accessible);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getCharacterCount(event);", "+\t\t\t\t}", "+\t\t\t\treturn event.count;", "+\t\t\tString text = object.getText ();", "+\t\t\tif (text != null) return text.length ();", "+\t\t}", "+\t\tAtkTextIface iface = getTextIface (atkObject);", "+\t\tif (iface != null && iface.get_character_count != 0) {", "+\t\t\treturn ATK.call (iface.get_character_count, atkObject);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "878bdc3f2caa31bcd975c3c847d83722", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 39, "signatureBeforeChange": " \t \tAccessibleTextListener[] getTextListeners ()", "signatureAfterChange": "  \tstatic int atkTable_get_caption (int atkObject)", "diff": ["+", "+\tstatic int /*long*/ atkTable_get_caption (int /*long*/ atkObject) {", "+\t\tif (DEBUG) System.out.println (\"-->atkTable_get_caption\");", "+\t\tAccessibleObject object = getAccessibleObject (atkObject);", "+\t\tint /*long*/ parentResult = 0;", "+\t\tAtkTableIface iface = getTableIface (atkObject);", "+\t\tif (iface != null && iface.get_caption != 0) {", "+\t\t\tparentResult = ATK.call (iface.get_caption, atkObject);", "+\t\t}", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleTableListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleTableEvent event = new AccessibleTableEvent(accessible);", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleTableListener listener = (AccessibleTableListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getCaption(event);", "+\t\t\t\t}", "+\t\t\t\tAccessible result = event.accessible;", "+\t\t\t\tif (result != null) return result.accessibleObject.handle;", "+\t\t\t}", "+\t\t}", "+\t\treturn parentResult;", "+\t}", "-\t", "-\tAccessibleTextListener[] getTextListeners () {", "-\t\tif (accessible == null) return new AccessibleTextListener [0];", "-\t\tAccessibleTextListener[] result = accessible.getTextListeners (); ", "-\t\treturn result != null ? result : new AccessibleTextListener [0];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0e99620a526d0db0f2f02d9a66ec71b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 80, "signatureBeforeChange": "  \tAccessibleListener[] getAccessibleListeners ()", "signatureAfterChange": "  \tstatic int atkValue_set_current_value (int atkObject, int value)", "diff": ["-\tAccessibleListener[] getAccessibleListeners () {", "-\t\tif (accessible == null) return new AccessibleListener [0];", "-\t\tAccessibleListener[] result = accessible.getAccessibleListeners ();", "-\t\treturn result != null ? result : new AccessibleListener [0];", "+", "+\tstatic int /*long*/ atkValue_set_current_value (int /*long*/ atkObject, int /*long*/ value) {", "+\t\tif (DEBUG) System.out.println (\"-->atkValue_set_current_value\");", "+\t\tAccessibleObject object = getAccessibleObject (atkObject);", "+\t\tif (object != null) {", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tif (accessible != null) {", "+\t\t\t\tVector listeners = accessible.accessibleValueListeners;", "+\t\t\t\tint length = listeners.size();", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tAccessibleValueEvent event = new AccessibleValueEvent(accessible);", "+\t\t\t\t\tevent.value = getGValue(value);", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tAccessibleValueListener listener = (AccessibleValueListener) listeners.elementAt(i);", "+\t\t\t\t\t\tlistener.setCurrentValue(event);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn 0;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\tint /*long*/ parentResult = 0;", "+\t\tAtkValueIface iface = getValueIface (atkObject);", "+\t\tif (iface != null && iface.set_current_value != 0) {", "+\t\t\tparentResult = ATK.call (iface.set_current_value, atkObject, value);", "+\t\t}", "+\t\treturn parentResult;"]}], "num": 22450}
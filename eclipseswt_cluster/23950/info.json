{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "cadbc797e92f7f0341c615c25ab20a12", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c92a5ec00c3d4dc4e9e940783a15fe65", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "02b6cb36ad1c2dce27bd3810bc24ab9a523e494f", "commitAfterChange": "40e15e68f5fa0b6fe1e8ba9d3ffd820b3dca362f", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  int accessibilityActionNames(int id, int sel)", "signatureAfterChange": "  int accessibilityActionNames(int id, int sel)", "diff": ["-\tif (handleIsAccessible(id) && accessible != null) {", "-\t\tNSArray returnValue = accessible.internal_accessibilityActionNames(ACC.CHILDID_SELF);", "-\t\tif (returnValue != null) return returnValue.id;", "+\tint /*long*/ returnValue = super.accessibilityActionNames(id, sel);", "+\tif (handleIsAccessible(id)) {", "+\t\tif (accessible != null) {", "+\t\t\tNSArray baseArray = accessible.internal_accessibilityActionNames(ACC.CHILDID_SELF);", "+\t\t\tif (baseArray != null) returnValue = baseArray.id;", "+\t\t}", "+\t\tif (hooks(SWT.MenuDetect) || (menu != null && !menu.isDisposed())) {", "+\t\t\tNSArray baseArray = new NSArray(returnValue);", "+\t\t\tNSMutableArray ourNames = NSMutableArray.arrayWithCapacity(baseArray.count() + 1);", "+\t\t\tourNames.addObjectsFromArray(baseArray);", "+\t\t\tourNames.addObject(OS.NSAccessibilityShowMenuAction);", "+\t\t\treturnValue = ourNames.id;", "+\t\t}", "-\t", "-\treturn super.accessibilityActionNames(id, sel);", "+\treturn returnValue;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e6aa03fccbe6104a4e5f522f4e1c8ae8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "3fcd225fa2e66d3e13758e8a90c5c8fb576c874a", "commitAfterChange": "95f8ac5e2e6850065945e7f7faeea45702471c6f", "methodNumberBeforeChange": 121, "methodNumberAfterChange": 3, "signatureBeforeChange": "  void setSmallSize ()", "signatureAfterChange": "  int accessibilityAttributeValue(int id, int sel, int arg0)", "diff": ["+int /*long*/ accessibilityAttributeValue(int /*long*/ id, int /*long*/ sel, int /*long*/ arg0) {", "+\tint /*long*/ returnValue = 0;", "+\tNSString attributeName = new NSString(arg0);", "+\t", "+\t// If the check column is visible, don't report it back as a column for accessibility purposes.", "+\t// The check column is meant to appear as a part of the first column.", "+\tif (attributeName.isEqualToString (OS.NSAccessibilityColumnsAttribute) || attributeName.isEqualToString(OS.NSAccessibilityVisibleColumnsAttribute)) {", "+\t\tif ((style & SWT.CHECK) != 0) {", "+\t\t\tint /*long*/ superValue = super.accessibilityAttributeValue(id, sel, arg0);", "+\t\t\tif (superValue != 0) {", "+\t\t\t\tNSArray columns = new NSArray(superValue);", "+\t\t\t\tNSMutableArray columnsWithoutCheck = NSMutableArray.arrayWithCapacity(columns.count() - 1);", "+\t\t\t\tcolumnsWithoutCheck.addObjectsFromArray(columns);", "+\t\t\t\tcolumnsWithoutCheck.removeObjectAtIndex(0);", "+\t\t\t\treturnValue = columnsWithoutCheck.id;", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+\tif (returnValue != 0) {", "+\t\treturn returnValue;", "+\t} else {", "+\t\treturn super.accessibilityAttributeValue(id, sel, arg0);", "+\t}", "+}", "-", "-void setSmallSize () {", "-\tif (checkColumn == null) return;", "-\tcheckColumn.dataCell ().setControlSize (OS.NSSmallControlSize);", "-\tcheckColumn.setWidth (getCheckColumnWidth ());"]}], "num": 23950}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fb6707bf5adea0a6beac7ae8972d2824", "detectedBy": ["DIFF_DBSCAN", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "18c968615552c58c296514b38a033a18", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/RowLayoutTab.java", "commitBeforeChange": "2cc7d30698448c6df09a70c69839e5a3830f9bc0", "commitAfterChange": "ca8346412189df48223ba59c33b21708729a1c0e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tvoid createChildWidgets ()", "signatureAfterChange": " \tvoid createChildWidgets()", "diff": ["-\tvoid createChildWidgets () {", "+\tvoid createChildWidgets() {", "-\t\tsuper.createChildWidgets ();", "+\t\tsuper.createChildWidgets();", "-\t\t/* Add TableEditors */\t\t\t", "-\t\tcomboEditor = new TableEditor (table);", "-\t\twidthEditor = new TableEditor (table);", "-\t\theightEditor = new TableEditor (table);", "-\t\ttable.addMouseListener (new MouseAdapter () {", "+\t\t/* Add TableEditors */\t\t", "+\t\tnameEditor = new TableEditor(table);", "+\t\tcomboEditor = new TableEditor(table);", "+\t\twidthEditor = new TableEditor(table);", "+\t\theightEditor = new TableEditor(table);", "+\t\ttable.addMouseListener(new MouseAdapter() {", "-\t\t\t\tindex = table.getSelectionIndex ();", "-\t\t\t\tPoint pt = new Point (e.x, e.y);", "-                newItem = table.getItem (pt);", "-                if (newItem == null) return;", "-                TableItem oldItem = comboEditor.getItem ();", "-                if (newItem == oldItem || newItem != lastSelected) {", "+\t\t\t\tindex = table.getSelectionIndex();", "+\t\t\t\tPoint pt = new Point(e.x, e.y);", "+                newItem = table.getItem(pt);", "+                if(newItem == null) return;", "+                TableItem oldItem = comboEditor.getItem();", "+                if(newItem == oldItem || newItem != lastSelected) {", "-\t\t\t\ttable.showSelection ();", "-\t\t\t\t", "+\t\t\t\ttable.showSelection ();\t\t\t\t", "-\t\t\t\twidthText = new Text (table, SWT.SINGLE);", "-\t\t\t\twidthText.setText (((String [])data.elementAt (index)) [WIDTH_COL]);", "-\t\t\t\tcreateTextEditor (widthText, widthEditor, WIDTH_COL);", "+\t\t\t\tnameText = new Text(table, SWT.SINGLE);", "+\t\t\t\tnameText.setText(((String[])data.elementAt(index))[NAME_COL]);", "+\t\t\t\tcreateTextEditor(nameText, nameEditor, NAME_COL);", "-\t\t\t\theightText = new Text (table, SWT.SINGLE);", "-\t\t\t\theightText.setText (((String [])data.elementAt (index)) [HEIGHT_COL]);", "-\t\t\t\tcreateTextEditor (heightText, heightEditor, HEIGHT_COL);", "+\t\t\t\twidthText = new Text(table, SWT.SINGLE);", "+\t\t\t\twidthText.setText(((String[])data.elementAt(index))[WIDTH_COL]);", "+\t\t\t\tcreateTextEditor(widthText, widthEditor, WIDTH_COL);", "+\t\t\t\t", "+\t\t\t\theightText = new Text(table, SWT.SINGLE);", "+\t\t\t\theightText.setText(((String[])data.elementAt(index))[HEIGHT_COL]);", "+\t\t\t\tcreateTextEditor(heightText, heightEditor, HEIGHT_COL);", "-                for (int i=0; i<table.getColumnCount (); i++) {", "-                \tRectangle rect = newItem.getBounds (i);", "-                    if (rect.contains (pt)) {", "-                    \tswitch (i) {", "+                for(int i=0; i<table.getColumnCount(); i++) {", "+                \tRectangle rect = newItem.getBounds(i);", "+                    if(rect.contains(pt)) {", "+                    \tswitch(i) {", "+                    \t\tcase NAME_COL :", "+                    \t\t\tnameText.setFocus();", "-\t\t\t\t\t\t\t\tcombo.setFocus ();\t", "+\t\t\t\t\t\t\t\tcombo.setFocus();\t", "-\t\t\t\t\t\t\t\twidthText.setFocus ();", "+\t\t\t\t\t\t\t\twidthText.setFocus();", "-\t\t\t\t\t\t\t\theightText.setFocus ();", "+\t\t\t\t\t\t\t\theightText.setFocus();", "-\t\t\t\t\t\t\t\tresetEditors ();", "+\t\t\t\t\t\t\t\tresetEditors();", "-\t\t/* Add listener to add an element to the table */", "-\t\tadd.addSelectionListener(new SelectionAdapter () {", "-\t\t\tpublic void widgetSelected(SelectionEvent e) {", "-\t\t\t\tTableItem item = new TableItem (table, 0);", "-\t\t\t\tString [] insert = new String [] { ", "-\t\t\t\t\tString.valueOf (table.indexOf (item)),", "-\t\t\t\t\t\"Button\", \"-1\", \"-1\"};", "-\t\t\t\titem.setText (insert);", "-\t\t\t\tdata.addElement (insert);", "-\t\t\t\tresetEditors ();", "+\t\t //Add listener to add an element to the table", "+\t\tadd.addListener(SWT.Selection, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {\t\t\t\t", "+\t\t\t\tif(event.detail == SWT.ARROW) {", "+\t\t\t\t\tToolItem item = (ToolItem)event.widget;", "+\t\t\t\t\tToolBar bar = item.getParent();", "+\t\t\t\t\tDisplay display = bar.getDisplay();", "+\t\t\t\t\tShell shell = bar.getShell();", "+\t\t\t\t\tMenu menu = new Menu (shell, SWT.POP_UP);", "+\t\t\t\t\tfor(int i = 0; i < OPTIONS.length; i++) {", "+\t\t\t\t\t\tfinal MenuItem newItem = new MenuItem(menu, SWT.RADIO);", "+\t\t\t\t\t\tnewItem.setText(OPTIONS[i]);\t\t\t\t\t\t", "+\t\t\t\t\t\tnewItem.addSelectionListener (new SelectionAdapter(){", "+\t\t\t\t\t\t\tpublic void widgetSelected(SelectionEvent event) {", "+\t\t\t\t\t\t\t\tMenuItem menuItem = (MenuItem)event.widget;", "+\t\t\t\t\t\t\t\tif (menuItem.getSelection()) {", "+\t\t\t\t\t\t\t\t\tMenu menu  = menuItem.getParent();", "+\t\t\t\t\t\t\t\t\tprevSelected = menu.indexOf(menuItem);", "+\t\t\t\t\t\t\t\t\tTableItem item = new TableItem(table, SWT.NONE);", "+\t\t\t\t\t\t\t\t\tString name = menuItem.getText().toLowerCase() + String.valueOf(table.indexOf (item));", "+\t\t\t\t\t\t\t\t\tString[] insert = new String[] {name, menuItem.getText(), \"-1\", \"-1\"};", "+\t\t\t\t\t\t\t\t\titem.setText(insert);", "+\t\t\t\t\t\t\t\t\tdata.addElement(insert);", "+\t\t\t\t\t\t\t\t\tresetEditors();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t});\t\t\t\t\t\t\t", "+\t\t\t\t\t\tnewItem.setSelection(i == prevSelected);", "+\t\t\t\t\t}", "+\t\t\t\t\tPoint pt = display.map(bar, null, event.x, event.y);", "+\t\t\t\t\tmenu.setLocation(pt.x, pt.y);", "+\t\t\t\t\tmenu.setVisible(true);", "+\t\t\t\t\t", "+\t\t\t\t\twhile(menu != null && !menu.isDisposed() && menu.isVisible()) {", "+\t\t\t\t\t\tif(!display.readAndDispatch()) {", "+\t\t\t\t\t\t\tdisplay.sleep();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tmenu.dispose();", "+\t\t\t\t}else {", "+\t\t\t\t\tString selection = OPTIONS[prevSelected];", "+\t\t\t\t\tTableItem item = new TableItem(table, 0);", "+\t\t\t\t\tString name = selection.toLowerCase() + String.valueOf (table.indexOf(item));", "+\t\t\t\t\tString[] insert = new String[] {name, selection, \"-1\", \"-1\"};", "+\t\t\t\t\titem.setText(insert);", "+\t\t\t\t\tdata.addElement(insert);", "+\t\t\t\t\tresetEditors();", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5a77706d916a548621619785ed1dc1ce", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/layoutexample/FillLayoutTab.java", "commitBeforeChange": "2cc7d30698448c6df09a70c69839e5a3830f9bc0", "commitAfterChange": "ca8346412189df48223ba59c33b21708729a1c0e", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " \tvoid createChildWidgets ()", "signatureAfterChange": " \tvoid createChildWidgets()", "diff": ["-\tvoid createChildWidgets () {", "+\tvoid createChildWidgets() {", "-\t\tsuper.createChildWidgets ();", "+\t\tsuper.createChildWidgets();", "-\t\tcomboEditor = new TableEditor (table);", "-\t\ttable.addSelectionListener (new SelectionAdapter() {", "-\t\t\tpublic void widgetSelected(SelectionEvent e) {", "-\t\t\t\tresetEditors ();", "-\t\t\t\tindex = table.getSelectionIndex ();", "-\t\t\t\tif (index == -1) return;", "-\t\t\t\tTableItem oldItem = comboEditor.getItem ();", "-\t\t\t\tnewItem = table.getItem (index);", "-\t\t\t\tif (newItem == oldItem || newItem != lastSelected) {", "+\t\tcomboEditor = new TableEditor(table);", "+\t\tnameEditor = new TableEditor(table);", "+\t\ttable.addMouseListener(new MouseAdapter() {", "+\t\t\tpublic void mouseDown(MouseEvent e) {", "+\t\t\t\tresetEditors();", "+\t\t\t\tindex = table.getSelectionIndex();", "+\t\t\t\tif(index == -1) return;", "+\t\t\t\tTableItem oldItem = comboEditor.getItem();", "+\t\t\t\tnewItem = table.getItem(index);", "+\t\t\t\tif(newItem == oldItem || newItem != lastSelected) {", "-\t\t\t\ttable.showSelection ();", "+\t\t\t\ttable.showSelection();\t\t\t\t", "+\t\t\t\tcombo = new CCombo(table, SWT.READ_ONLY);\t\t\t\t", "+\t\t\t\tcreateComboEditor(combo, comboEditor);", "-\t\t\t\tcombo = new CCombo (table, SWT.READ_ONLY);", "-\t\t\t\tcreateComboEditor (combo, comboEditor);", "+\t\t\t\tnameText = new Text(table, SWT.SINGLE);", "+\t\t\t\tnameText.setText(((String[])data.elementAt(index))[NAME_COL]);", "+\t\t\t\tcreateTextEditor(nameText, nameEditor, NAME_COL);", "-\t\t});", "+\t\t});\t\t", "-\t\t", "-\t\t/* Add listener to add an element to the table */", "-\t\tadd.addSelectionListener(new SelectionAdapter () {", "-\t\t\tpublic void widgetSelected(SelectionEvent e) {", "-\t\t\t\tTableItem item = new TableItem (table, 0);", "-\t\t\t\titem.setText (0, String.valueOf (table.indexOf (item)));", "-\t\t\t\titem.setText (1, \"Button\");", "-\t\t\t\tdata.addElement (\"Button\");", "-\t\t\t\tresetEditors ();", "+\t\t// Add listener to add an element to the table", "+\t\tadd.addListener(SWT.Selection, new Listener() {", "+\t\t\tpublic void handleEvent(Event event) {\t\t\t\t", "+\t\t\t\tif(event.detail == SWT.ARROW) {", "+\t\t\t\t\tToolItem item = (ToolItem)event.widget;", "+\t\t\t\t\tToolBar bar = item.getParent();", "+\t\t\t\t\tDisplay display = bar.getDisplay();", "+\t\t\t\t\tShell shell = bar.getShell();", "+\t\t\t\t\tfinal Menu menu = new Menu(shell, SWT.POP_UP);\t\t\t\t\t", "+\t\t\t\t\tfor (int i = 0; i < OPTIONS.length; i++) {", "+\t\t\t\t\t\tfinal MenuItem newItem = new MenuItem(menu, SWT.RADIO);", "+\t\t\t\t\t\tnewItem.setText(OPTIONS[i]);\t\t\t\t\t\t", "+\t\t\t\t\t\tnewItem.addSelectionListener(new SelectionAdapter (){", "+\t\t\t\t\t\t\tpublic void widgetSelected (SelectionEvent event) {", "+\t\t\t\t\t\t\t\tMenuItem menuItem = (MenuItem)event.widget;", "+\t\t\t\t\t\t\t\tif (menuItem.getSelection()) {", "+\t\t\t\t\t\t\t\t\tMenu menu  = menuItem.getParent();", "+\t\t\t\t\t\t\t\t\tprevSelected = menu.indexOf(menuItem);", "+\t\t\t\t\t\t\t\t\tTableItem item = new TableItem (table, SWT.NONE);", "+\t\t\t\t\t\t\t\t\tString name = menuItem.getText().toLowerCase() + String.valueOf(table.getItemCount() - 1);", "+\t\t\t\t\t\t\t\t\tString[] insert = new String[] {name, menuItem.getText()};", "+\t\t\t\t\t\t\t\t\titem.setText(insert);", "+\t\t\t\t\t\t\t\t\tdata.addElement(insert);", "+\t\t\t\t\t\t\t\t\tresetEditors();", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t});\t\t\t\t\t\t\t", "+\t\t\t\t\t\tnewItem.setSelection(i == prevSelected);", "+\t\t\t\t\t}", "+\t\t\t\t\tPoint pt = display.map(bar, null, event.x, event.y);", "+\t\t\t\t\tmenu.setLocation(pt.x, pt.y);", "+\t\t\t\t\tmenu.setVisible(true);", "+\t\t\t\t\t", "+\t\t\t\t\twhile(menu != null && !menu.isDisposed() && menu.isVisible()) {", "+\t\t\t\t\t\tif(!display.readAndDispatch()) {", "+\t\t\t\t\t\t\tdisplay.sleep();", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tmenu.dispose();", "+\t\t\t\t} else {", "+\t\t\t\t\tString selection = OPTIONS[prevSelected];", "+\t\t\t\t\tTableItem item = new TableItem(table, 0);", "+\t\t\t\t\tString name = selection.toLowerCase() + String.valueOf(table.indexOf(item));", "+\t\t\t\t\tString[] insert = new String[] {name, selection }; ", "+\t\t\t\t\titem.setText(insert);", "+\t\t\t\t\tdata.addElement(insert);", "+\t\t\t\t\tresetEditors();", "+\t\t\t\t}"]}], "num": 60036}
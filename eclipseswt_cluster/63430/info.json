{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "26d5134c912104ad098184ac95b66b47", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0f0bd1970033aecb5a6dd517af97834", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "b410448b2ee30c39984d789197ecbf23e5a160a6", "commitAfterChange": "63863d93c2ee25d0b7bc77cb902dfe9620ae110e", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " public void drawText (String string, int x, int y, int flags)", "signatureAfterChange": " public void drawText (String string, int x, int y, int flags)", "diff": ["-\t\tint length = string.length();", "-\t\tchar[] buffer = new char [length];", "-\t\tstring.getChars(0, length, buffer, 0);", "-\t\tPointF pt = new PointF();", "-\t\tint /*long*/ format = Gdip.StringFormat_Clone(Gdip.StringFormat_GenericTypographic());", "-\t\tint formatFlags = Gdip.StringFormat_GetFormatFlags(format) | Gdip.StringFormatFlagsMeasureTrailingSpaces;", "-\t\tif ((data.style & SWT.MIRRORED) != 0) formatFlags |= Gdip.StringFormatFlagsDirectionRightToLeft;", "-\t\tGdip.StringFormat_SetFormatFlags(format, formatFlags);", "-\t\tfloat[] tabs = (flags & SWT.DRAW_TAB) != 0 ? new float[]{measureSpace(data.gdipFont, format) * 8} : new float[1];", "-\t\tGdip.StringFormat_SetTabStops(format, 0, tabs.length, tabs); ", "-\t\tint hotkeyPrefix = (flags & SWT.DRAW_MNEMONIC) != 0 ? Gdip.HotkeyPrefixShow : Gdip.HotkeyPrefixNone;", "-\t\tif ((flags & SWT.DRAW_MNEMONIC) != 0 && (data.uiState & OS.UISF_HIDEACCEL) != 0) hotkeyPrefix = Gdip.HotkeyPrefixHide;", "-\t\tGdip.StringFormat_SetHotkeyPrefix(format, hotkeyPrefix);", "-\t\tif ((flags & SWT.DRAW_TRANSPARENT) == 0) {", "-\t\t\tRectF bounds = new RectF();", "-\t\t\tGdip.Graphics_MeasureString(gdipGraphics, buffer, length, data.gdipFont, pt, format, bounds);", "-\t\t\tGdip.Graphics_FillRectangle(gdipGraphics, data.gdipBrush, x, y, Math.round(bounds.Width), Math.round(bounds.Height));", "-\t\t}", "-\t\tint gstate = 0;", "-\t\tint /*long*/ brush = getFgBrush();", "-\t\tif ((data.style & SWT.MIRRORED) != 0) {", "-\t\t\tswitch (Gdip.Brush_GetType(brush)) {", "-\t\t\t\tcase Gdip.BrushTypeLinearGradient:", "-\t\t\t\t\tGdip.LinearGradientBrush_ScaleTransform(brush, -1, 1, Gdip.MatrixOrderPrepend);", "-\t\t\t\t\tGdip.LinearGradientBrush_TranslateTransform(brush, - 2 * x, 0, Gdip.MatrixOrderPrepend);\t", "-\t\t\t\t\tbreak;\t\t\t", "-\t\t\t\tcase Gdip.BrushTypeTextureFill:", "-\t\t\t\t\tGdip.TextureBrush_ScaleTransform(brush, -1, 1, Gdip.MatrixOrderPrepend);", "-\t\t\t\t\tGdip.TextureBrush_TranslateTransform(brush, - 2 * x, 0, Gdip.MatrixOrderPrepend);\t", "-\t\t\t\t\tbreak;\t\t\t", "-\t\t\t}", "-\t\t\tgstate = Gdip.Graphics_Save(gdipGraphics);", "-\t\t\tGdip.Graphics_ScaleTransform(gdipGraphics, -1, 1, Gdip.MatrixOrderPrepend);", "-\t\t\tGdip.Graphics_TranslateTransform(gdipGraphics, - 2 * x, 0, Gdip.MatrixOrderPrepend);\t\t \t\t \t\t ", "-\t\t}", "-\t\tpt.X = x;", "-\t\tpt.Y = y;", "-\t\tGdip.Graphics_DrawString(gdipGraphics, buffer, length, data.gdipFont, pt, format, brush);", "-\t\tif ((data.style & SWT.MIRRORED) != 0) {", "-\t\t\tswitch (Gdip.Brush_GetType(brush)) {", "-\t\t\t\tcase Gdip.BrushTypeLinearGradient:", "-\t\t\t\t\tGdip.LinearGradientBrush_ResetTransform(brush);", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Gdip.BrushTypeTextureFill:", "-\t\t\t\t\tGdip.TextureBrush_ResetTransform(brush);", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tGdip.Graphics_Restore(gdipGraphics, gstate);", "-\t\t}", "-\t\tGdip.StringFormat_delete(format);", "+\t\tdrawText(gdipGraphics, string, x, y, flags, null);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0388f83329fdf5ef3aa3880fc2ada170", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "b410448b2ee30c39984d789197ecbf23e5a160a6", "commitAfterChange": "63863d93c2ee25d0b7bc77cb902dfe9620ae110e", "methodNumberBeforeChange": 109, "methodNumberAfterChange": 110, "signatureBeforeChange": " public Point stringExtent(String string)", "signatureAfterChange": " public Point stringExtent(String string)", "diff": ["-\t\tRectF bounds = new RectF();", "-\t\tchar[] buffer;", "-\t\tif (length != 0) {", "-\t\t\tbuffer = new char [length];", "-\t\t\tstring.getChars(0, length, buffer, 0);", "-\t\t} else {", "-\t\t\tbuffer = new char[]{' '};", "-\t\t}", "-\t\tint nGlyphs = (length * 3 / 2) + 16;", "-\t\tGCP_RESULTS result = new GCP_RESULTS();", "-\t\tresult.lStructSize = GCP_RESULTS.sizeof;", "-\t\tresult.nGlyphs = nGlyphs;", "-\t\tint /*long*/ hHeap = OS.GetProcessHeap();", "-\t\tint /*long*/ lpDx = result.lpDx = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, nGlyphs * 4);", "-\t\tint /*long*/ lpGlyphs = result.lpGlyphs = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, nGlyphs * 2);", "-\t\tint dwFlags = OS.GCP_GLYPHSHAPE | OS.GCP_REORDER | OS.GCP_LIGATE;", "-\t\tint /*long*/ hdc = Gdip.Graphics_GetHDC(gdipGraphics);", "-\t\tint /*long*/ hFont = data.hGDIFont;", "-\t\tif (hFont == 0 && data.font != null) hFont = data.font.handle;", "-\t\tint /*long*/ oldFont = 0;", "-\t\tif (hFont != 0) oldFont = OS.SelectObject(hdc, hFont);", "-\t\tif ((data.style & SWT.MIRRORED) != 0) OS.SetLayout(hdc, OS.GetLayout(hdc) | OS.LAYOUT_RTL);", "-\t\tOS.GetCharacterPlacementW(hdc, buffer, length, 0, result, dwFlags);", "-\t\tif ((data.style & SWT.MIRRORED) != 0) OS.SetLayout(hdc, OS.GetLayout(hdc) & ~OS.LAYOUT_RTL);", "-\t\tif (hFont != 0) OS.SelectObject(hdc, oldFont);", "-\t\tGdip.Graphics_ReleaseHDC(gdipGraphics, hdc);", "-\t\tint drawX = 0;", "-\t\tint[] dx = new int[result.nGlyphs];", "-\t\tOS.MoveMemory(dx, lpDx, result.nGlyphs * 4);\t", "-\t\tfloat[] points = new float[dx.length * 2];", "-\t\tfor (int i = 0, j = 0; i < dx.length; i++, j += 2) {", "-\t\t\tpoints[j] = drawX;", "-\t\t\tdrawX += dx[i];", "-\t\t}", "-\t\tGdip.Graphics_MeasureDriverString(gdipGraphics, lpGlyphs, result.nGlyphs, data.gdipFont, points, 0, 0, bounds);", "-\t\tOS.HeapFree(hHeap, 0, lpGlyphs);", "-\t\tOS.HeapFree(hHeap, 0, lpDx);", "-\t\treturn new Point(length == 0 ? 0 : Math.round(bounds.Width), Math.round(bounds.Height));", "+\t\tPoint size = new Point(0, 0);", "+\t\tdrawText(gdipGraphics, string, 0, 0, 0, size);", "+\t\treturn size;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71e816d8ca76cedbb145cf797d741e6e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "commitAfterChange": "bbeab947327689cb203638e742e58f555e6c1b64", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 62, "signatureBeforeChange": " private void onPaint(Event event)", "signatureAfterChange": " void onPaint(Event event)", "diff": ["- */", "-private void onPaint(Event event) {", "+}", "+void onPaint(Event event) {", "+\t\t// handle case where  default font changes", "-\t\tresetTabSize(true);", "-\t}", "-\tGC gc = event.gc;", "-\tRectangle rect = super.getClientArea();", "-\tif (items.length == 0) {", "-\t\tif (showBorders) {\t\t", "-\t\t\tif ((getStyle() & SWT.FLAT) != 0) {", "-\t\t\t\tgc.setForeground(borderColor1);", "-\t\t\t\tgc.drawRectangle(rect.x, rect.y, rect.x + rect.width - 1, rect.y + rect.height - 1);", "-\t\t\t} else {", "-\t\t\t\tgc.setForeground(borderColor1);", "-\t\t\t\tgc.drawRectangle(rect.x, rect.y, rect.x + rect.width - 3, rect.y + rect.height - 3);", "-\t\t\t\t\t\t", "-\t\t\t\t// fill in right and bottom edges with parent's background", "-\t\t\t\tgc.setBackground(getParent().getBackground());", "-\t\t\t\tgc.fillRectangle(rect.x + rect.width - 2, rect.y, 2, rect.height);", "-\t\t\t\tgc.fillRectangle(rect.x, rect.y + rect.height - 2, rect.width, 2);", "-\t\t\t}", "-\t\t\tgc.setForeground(getForeground());", "+\t\tif (!updateTabHeight(tabHeight, false)) {", "+\t\t\tupdateItems();", "+\t\t\tredraw();", "+\t\t\treturn;", "+\t}", "+", "+// Useful for debugging paint problems", "+//{", "+//GC gc = event.gc;", "+//Point size = getSize();\t", "+//gc.setBackground(getDisplay().getSystemColor(SWT.COLOR_GREEN));", "+//gc.fillRectangle(-10, -10, size.x + 20, size.y+20);", "+//}", "+\t", "+\tGC gc = event.gc;", "+\tif (items.length == 0) {", "+\t\tPoint size = getSize();\t", "+\t\tgc.setBackground(getParent().getBackground());", "+\t\tgc.fillRectangle(0, 0, size.x, size.y);", "-\t// redraw the Border", "-\tdrawBorder(gc);", "-\t", "-\trect.x += borderLeft;", "-\trect.y += borderTop;", "-\trect.width -= borderLeft + borderRight;", "-\trect.height -= borderTop + borderBottom;", "-\tRectangle clip = gc.getClipping ();", "-\tgc.setClipping(clip.intersection(rect));", "-\t", "-\t// Draw the unselected tabs first.", "-\tfor (int i=0; i < items.length; i++) {", "-\t\tif (i != selectedIndex && event.getBounds().intersects(items[i].getBounds())) {", "-\t\t\titems[i].onPaint(gc, false);", "-\t\t}", "-\t}", "-\t// Selected tab comes last", "-\tif (selectedIndex != -1) {", "-\t\titems[selectedIndex].onPaint(gc, true);", "-\t}", "-\t", "-\t// draw insertion mark", "-\tif (insertionIndex > -2) {", "-\t\tgc.setForeground(getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));", "-\t\tif (insertionIndex == -1) {", "-\t\t\tRectangle bounds = items[0].getBounds();", "-\t\t\tgc.drawLine(bounds.x, bounds.y, bounds.x, bounds.y + bounds.height - 1);", "-\t\t\tgc.drawLine(bounds.x - 2, bounds.y, bounds.x + 2, bounds.y);", "-\t\t\tgc.drawLine(bounds.x - 1, bounds.y + 1, bounds.x + 1, bounds.y + 1);", "-\t\t\tgc.drawLine(bounds.x - 1, bounds.y + bounds.height - 2, bounds.x + 1, bounds.y + bounds.height - 2);", "-\t\t\tgc.drawLine(bounds.x - 2, bounds.y + bounds.height - 1, bounds.x + 2, bounds.y + bounds.height - 1);", "-", "-\t\t} else {", "-\t\t\tRectangle bounds = items[insertionIndex].getBounds();", "-\t\t\tgc.drawLine(bounds.x + bounds.width, bounds.y, bounds.x + bounds.width, bounds.y + bounds.height - 1);", "-\t\t\tgc.drawLine(bounds.x + bounds.width - 2, bounds.y, bounds.x + bounds.width + 2, bounds.y);", "-\t\t\tgc.drawLine(bounds.x + bounds.width - 1, bounds.y + 1, bounds.x + bounds.width + 1, bounds.y + 1);", "-\t\t\tgc.drawLine(bounds.x + bounds.width - 1, bounds.y + bounds.height - 2, bounds.x + bounds.width + 1, bounds.y + bounds.height - 2);", "-\t\t\tgc.drawLine(bounds.x + bounds.width - 2, bounds.y + bounds.height - 1, bounds.x + bounds.width + 2, bounds.y + bounds.height - 1);", "-\t\t}", "-\t}", "+\tdrawBody(event);", "+\tdrawTabArea(event);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3a8683a6e9e1be57dedc9742ca3007a9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "b410448b2ee30c39984d789197ecbf23e5a160a6", "commitAfterChange": "63863d93c2ee25d0b7bc77cb902dfe9620ae110e", "methodNumberBeforeChange": 35, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void drawString (String string, int x, int y, boolean isTransparent)", "signatureAfterChange": " public void drawString (String string, int x, int y, boolean isTransparent)", "diff": ["-\t\tint nGlyphs = (length * 3 / 2) + 16;", "-\t\tGCP_RESULTS result = new GCP_RESULTS();", "-\t\tresult.lStructSize = GCP_RESULTS.sizeof;", "-\t\tresult.nGlyphs = nGlyphs;", "-\t\tint /*long*/ hHeap = OS.GetProcessHeap();", "-\t\tint /*long*/ lpDx = result.lpDx = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, nGlyphs * 4);", "-\t\tint /*long*/ lpGlyphs = result.lpGlyphs = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, nGlyphs * 2);", "-\t\tint dwFlags = OS.GCP_GLYPHSHAPE | OS.GCP_REORDER | OS.GCP_LIGATE;", "-\t\tint /*long*/ hdc = Gdip.Graphics_GetHDC(gdipGraphics);", "-\t\tint /*long*/ hFont = data.hGDIFont;", "-\t\tif (hFont == 0 && data.font != null) hFont = data.font.handle;", "-\t\tint /*long*/ oldFont = 0;", "-\t\tif (hFont != 0) oldFont = OS.SelectObject(hdc, hFont);", "-\t\tif ((data.style & SWT.MIRRORED) != 0) OS.SetLayout(hdc, OS.GetLayout(hdc) | OS.LAYOUT_RTL);", "-\t\tOS.GetCharacterPlacementW(hdc, buffer, length, 0, result, dwFlags);", "-\t\tif ((data.style & SWT.MIRRORED) != 0) OS.SetLayout(hdc, OS.GetLayout(hdc) & ~OS.LAYOUT_RTL);", "-\t\tTEXTMETRIC lptm = OS.IsUnicode ? (TEXTMETRIC)new TEXTMETRICW() : new TEXTMETRICA();", "-\t\tOS.GetTextMetrics(hdc, lptm);", "-\t\tif (hFont != 0) OS.SelectObject(hdc, oldFont);", "-\t\tGdip.Graphics_ReleaseHDC(gdipGraphics, hdc);", "-\t\tnGlyphs = result.nGlyphs;", "-\t\tint drawX = x, drawY = y + lptm.tmAscent;", "-\t\tint[] dx = new int[nGlyphs];", "-\t\tOS.MoveMemory(dx, result.lpDx, nGlyphs * 4);", "-\t\tfloat[] points = new float[dx.length * 2];", "-\t\tfor (int i = 0, j = 0; i < dx.length; i++) {", "-\t\t\tpoints[j++] = drawX;", "-\t\t\tpoints[j++] = drawY;", "-\t\t\tdrawX += dx[i];", "-\t\t}", "-\t\tRectF bounds = null;", "-\t\tif (!isTransparent || (data.style & SWT.MIRRORED) != 0) {", "-\t\t\tbounds = new RectF();", "-\t\t\tGdip.Graphics_MeasureDriverString(gdipGraphics, lpGlyphs, nGlyphs, data.gdipFont, points, 0, 0, bounds);", "-\t\t\tif (!isTransparent) {", "-\t\t\t\tGdip.Graphics_FillRectangle(gdipGraphics, data.gdipBrush, x, y, Math.round(bounds.Width), Math.round(bounds.Height));", "-\t\t\t}", "-\t\t}", "-\t\tint gstate = 0;", "-\t\tint /*long*/ brush = getFgBrush();", "-\t\tif ((data.style & SWT.MIRRORED) != 0) {", "-\t\t\tswitch (Gdip.Brush_GetType(brush)) {", "-\t\t\t\tcase Gdip.BrushTypeLinearGradient:", "-\t\t\t\t\tGdip.LinearGradientBrush_ScaleTransform(brush, -1, 1, Gdip.MatrixOrderPrepend);", "-\t\t\t\t\tGdip.LinearGradientBrush_TranslateTransform(brush, - 2 * x - bounds.Width, 0, Gdip.MatrixOrderPrepend);\t", "-\t\t\t\t\tbreak;\t\t\t", "-\t\t\t\tcase Gdip.BrushTypeTextureFill:", "-\t\t\t\t\tGdip.TextureBrush_ScaleTransform(brush, -1, 1, Gdip.MatrixOrderPrepend);", "-\t\t\t\t\tGdip.TextureBrush_TranslateTransform(brush, - 2 * x - bounds.Width, 0, Gdip.MatrixOrderPrepend);\t", "-\t\t\t\t\tbreak;\t\t\t", "-\t\t\t}", "-\t\t\tgstate = Gdip.Graphics_Save(gdipGraphics);", "-\t\t\tGdip.Graphics_ScaleTransform(gdipGraphics, -1, 1, Gdip.MatrixOrderPrepend);", "-\t\t\tGdip.Graphics_TranslateTransform(gdipGraphics, - 2 * x - bounds.Width, 0, Gdip.MatrixOrderPrepend);\t\t \t\t \t\t ", "-\t\t}", "-\t\tGdip.Graphics_DrawDriverString(gdipGraphics, lpGlyphs, result.nGlyphs, data.gdipFont, brush, points, 0, 0);", "-\t\tif ((data.style & SWT.MIRRORED) != 0) {", "-\t\t\tswitch (Gdip.Brush_GetType(brush)) {", "-\t\t\t\tcase Gdip.BrushTypeLinearGradient:", "-\t\t\t\t\tGdip.LinearGradientBrush_ResetTransform(brush);", "-\t\t\t\t\tbreak;", "-\t\t\t\tcase Gdip.BrushTypeTextureFill:", "-\t\t\t\t\tGdip.TextureBrush_ResetTransform(brush);", "-\t\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tGdip.Graphics_Restore(gdipGraphics, gstate);", "-\t\t}", "-\t\tOS.HeapFree(hHeap, 0, lpGlyphs);", "-\t\tOS.HeapFree(hHeap, 0, lpDx);", "+\t\tdrawText(gdipGraphics, string, x, y, isTransparent ? SWT.DRAW_TRANSPARENT : 0, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bb451fa271ec83e614ba8d0f4f94a42", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT OLE Win32/win32/org/eclipse/swt/ole/win32/OleClientSite.java", "commitBeforeChange": "dd0862c01e9b993d658b395af820f586129ec8a1", "commitAfterChange": "7f2ab38fb4043d4a5bb5f2320fea53804d91ff7f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public OleClientSite(Composite parent, int style, String progId, File file)", "signatureAfterChange": " public OleClientSite(Composite parent, int style, String progId, File file)", "diff": ["-\t\tif (COM.IsEqualGUID(appClsid, fileClsid)){", "-\t\t\t// Using the same application that created file, therefore, use default mechanism.", "-\t\t\ttempStorage = createTempStorage();", "-\t\t\t// Create ole object with storage object", "-\t\t\tint /*long*/[] address = new int /*long*/[1];", "-\t\t\tint result = COM.OleCreateFromFile(appClsid, fileName, COM.IIDIUnknown, COM.OLERENDER_DRAW, null, iOleClientSite.getAddress(), tempStorage.getAddress(), address);", "-\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t\tobjIUnknown = new IUnknown(address[0]);", "-\t\t} else {", "-\t\t\t// Not using the same application that created file, therefore, copy from original file to a new storage file", "-\t\t\tIStorage storage = null;", "-\t\t\tif (COM.StgIsStorageFile(fileName) == COM.S_OK) {", "-\t\t\t\tint /*long*/[] address = new int /*long*/[1];", "-\t\t\t\tint mode = COM.STGM_READ | COM.STGM_TRANSACTED | COM.STGM_SHARE_EXCLUSIVE;", "-\t\t\t\tint result = COM.StgOpenStorage(fileName, 0, mode, 0, 0, address); //Does an AddRef if successful", "-\t\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "-\t\t\t\tstorage = new IStorage(address[0]);", "-\t\t\t} else {", "-\t\t\t\t// Original file is not a Storage file so copy contents to a stream in a new storage file", "-\t\t\t\tint /*long*/[] address = new int /*long*/[1];", "-\t\t\t\tint mode = COM.STGM_READWRITE | COM.STGM_DIRECT | COM.STGM_SHARE_EXCLUSIVE | COM.STGM_CREATE;", "-\t\t\t\tint result = COM.StgCreateDocfile(null, mode | COM.STGM_DELETEONRELEASE, 0, address); // Increments ref count if successful", "-\t\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "-\t\t\t\tstorage = new IStorage(address[0]);", "-\t\t\t\t// Create a stream on the storage object.", "-\t\t\t\t// Word does not follow the standard and does not use \"CONTENTS\" as the name of", "-\t\t\t\t// its primary stream", "-\t\t\t\tString streamName = \"CONTENTS\"; //$NON-NLS-1$", "-\t\t\t\tGUID wordGUID = getClassID(WORDPROGID);", "-\t\t\t\tif (wordGUID != null && COM.IsEqualGUID(appClsid, wordGUID)) streamName = \"WordDocument\"; //$NON-NLS-1$", "-\t\t\t\taddress = new int /*long*/[1];", "-\t\t\t\tresult = storage.CreateStream(streamName, mode, 0, 0, address); // Increments ref count if successful", "-\t\t\t\tif (result != COM.S_OK) {", "-\t\t\t\t\tstorage.Release();", "-\t\t\t\t\tOLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "-\t\t\t\t}", "-\t\t\t\tIStream stream = new IStream(address[0]);", "-\t\t\t\ttry {", "-\t\t\t\t\t// Copy over data in file to named stream", "-\t\t\t\t\tFileInputStream fileInput = new FileInputStream(file);", "-\t\t\t\t\tint increment = 1024*4;", "-\t\t\t\t\tbyte[] buffer = new byte[increment];", "-\t\t\t\t\tint count = 0;", "-\t\t\t\t\twhile((count = fileInput.read(buffer)) > 0){", "-\t\t\t\t\t\tint /*long*/ pv = COM.CoTaskMemAlloc(count);", "-\t\t\t\t\t\tOS.MoveMemory(pv, buffer, count);", "-\t\t\t\t\t\tresult = stream.Write(pv, count, null) ;", "-\t\t\t\t\t\tCOM.CoTaskMemFree(pv);", "-\t\t\t\t\t\tif (result != COM.S_OK) {", "-\t\t\t\t\t\t\tfileInput.close();", "-\t\t\t\t\t\t\tstream.Release();", "-\t\t\t\t\t\t\tstorage.Release();", "-\t\t\t\t\t\t\tOLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tfileInput.close();", "-\t\t\t\t\tstream.Commit(COM.STGC_DEFAULT);", "-\t\t\t\t\tstream.Release();", "-\t\t\t\t} catch (IOException err) {", "-\t\t\t\t\tstream.Release();", "-\t\t\t\t\tstorage.Release();", "-\t\t\t\t\tOLE.error(OLE.ERROR_CANNOT_OPEN_FILE);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\t// Open a temporary storage object", "-\t\t\ttempStorage = createTempStorage();", "-\t\t\t// Copy over contents of file", "-\t\t\tint result = storage.CopyTo(0, null, null, tempStorage.getAddress());", "-\t\t\tstorage.Release();", "-\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_OPEN_FILE, result);", "-", "-\t\t\t// create ole client", "-\t\t\tint /*long*/[] ppv = new int /*long*/[1];", "-\t\t\tresult = COM.CoCreateInstance(appClsid, 0, COM.CLSCTX_INPROC_HANDLER | COM.CLSCTX_INPROC_SERVER, COM.IIDIUnknown, ppv);", "-\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t\tobjIUnknown = new IUnknown(ppv[0]);", "-\t\t\t// get the persistent storage of the ole client", "-\t\t\tppv = new int /*long*/[1];", "-\t\t\tresult = objIUnknown.QueryInterface(COM.IIDIPersistStorage, ppv);", "-\t\t\tif (result != COM.S_OK) OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t\tIPersistStorage iPersistStorage = new IPersistStorage(ppv[0]);", "-\t\t\t// load the contents of the file into the ole client site", "-\t\t\tresult = iPersistStorage.Load(tempStorage.getAddress());", "-\t\t\tiPersistStorage.Release();", "-\t\t\tif (result != COM.S_OK)OLE.error(OLE.ERROR_CANNOT_CREATE_OBJECT, result);", "-\t\t}", "-\t\t", "-\t\t// Init sinks", "-\t\taddObjectReferences();", "-\t\t", "-\t\tif (COM.OleRun(objIUnknown.getAddress()) == OLE.S_OK) state = STATE_RUNNING;", "-\t\t", "+\t\tOleCreate(appClsid, fileClsid, fileName, file);", "+}"]}], "num": 63430}
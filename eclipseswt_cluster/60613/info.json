{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d3036d4ecb19f1a25d8ab0b4b12cfae4", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa6ec6da61dcda77d06973d363c21487", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "25a820b9c61bce768cba2e9e95ac223905930030", "commitAfterChange": "722bc94f4f7e83a70c3470a84d80e9545657ad49", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  void hookDOMListeners(OleAutomation webBrowser, final boolean isTop)", "signatureAfterChange": "  void hookDOMListeners(OleAutomation webBrowser, final boolean isTop)", "diff": ["-\tint[] rgdispid = webBrowser.getIDsOfNames(new String[] { PROPERTY_DOCUMENT });", "+\t/*", "+\t* DOM listeners are only applicable when HTML content is shown.", "+\t* HTML documents always answer the Type property, so failure to get", "+\t* this value indicates that some other content type is being shown.", "+\t*/", "+\tint[] rgdispid = webBrowser.getIDsOfNames(new String[] { PROPERTY_TYPE });", "+\tif (rgdispid == null) {", "+\t\treturn;", "+\t}", "+\tif (pVarResult == null || pVarResult.getType() != COM.VT_BSTR) {", "+\t\tif (pVarResult != null) pVarResult.dispose ();", "+\t\treturn;", "+\t}", "+\tString type = pVarResult.getString();", "+\tpVarResult.dispose();", "+\tif (!type.equals(HTML_DOCUMENT)) return;", "+", "+\trgdispid = webBrowser.getIDsOfNames(new String[] { PROPERTY_DOCUMENT });", "+\tdispIdMember = rgdispid[0];", "+\tpVarResult = webBrowser.getProperty(dispIdMember);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7c50078355bc2632e541be4e4073c9f8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "6de5d128065bf1d280a4f3338b044f38646dc566", "commitAfterChange": "f8ef3cf7f50531eb98cb5b6c6b6b74b2ed865cbd", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 31, "signatureBeforeChange": "  void hookDOMListeners(OleAutomation webBrowser, final boolean isTop)", "signatureAfterChange": "  void hookDOMListeners(OleAutomation webBrowser, final boolean isTop)", "diff": ["-\t/*", "-\t* DOM listeners are only applicable when HTML content is shown.", "-\t* HTML documents always answer the Type property, so failure to get", "-\t* this value indicates that some other content type is being shown.", "-\t*/", "-\tint[] rgdispid = webBrowser.getIDsOfNames(new String[] { PROPERTY_TYPE });", "-\tif (rgdispid == null) {", "-\t\treturn;", "-\t}", "+\tint[] rgdispid = webBrowser.getIDsOfNames(new String[] { PROPERTY_DOCUMENT });", "-\tVariant\tpVarResult = webBrowser.getProperty(dispIdMember);", "-\tif (pVarResult == null || pVarResult.getType() != COM.VT_BSTR) {", "-\t\tif (pVarResult != null) pVarResult.dispose ();", "-\t\treturn;", "-\t}", "-\tString type = pVarResult.getString();", "-\tpVarResult.dispose();", "-\tif (!type.equals(HTML_DOCUMENT)) return;", "-", "-\trgdispid = webBrowser.getIDsOfNames(new String[] { PROPERTY_DOCUMENT });", "-\tdispIdMember = rgdispid[0];", "-\tpVarResult = webBrowser.getProperty(dispIdMember);", "+\tVariant pVarResult = webBrowser.getProperty(dispIdMember);"]}], "num": 60613}
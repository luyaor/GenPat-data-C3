{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "202fe63d75403061451f347ae8615817", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ddcd4f8fcc37e358f1aac5818885a5f1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "4fb41486046e62826d702c5ec58e6cd48232783a", "commitAfterChange": "2bfe39e1a378fbcd226e3abd4620c480c5b7037c", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " void drawBackground (GC gc, int x, int y, int width, int height)", "signatureAfterChange": " void drawBackground (GC gc, int x, int y, int width, int height)", "diff": ["-\t\tint xDisplay = OS.XtDisplay (handle);", "-\t\tif (xDisplay == 0) return;", "-\t\tint xGC = gc.handle;", "-\t\tXGCValues values = new XGCValues();", "-\t\tif (control.backgroundImage != null) {", "-\t\t\tOS.XGetGCValues (xDisplay, xGC, OS.GCFillStyle | OS.GCTile | OS.GCTileStipXOrigin | OS.GCTileStipYOrigin, values);", "-\t\t\tshort [] root_x = new short [1], root_y = new short [1];", "-\t\t\tOS.XtTranslateCoords (handle, (short) 0, (short) 0, root_x, root_y);", "-\t\t\tshort [] control_x = new short [1], control_y = new short [1];", "-\t\t\tOS.XtTranslateCoords (control.handle, (short) 0, (short) 0, control_x, control_y);", "-\t\t\tint tileX = root_x[0] - control_x[0], tileY = root_y[0] - control_y[0];", "-\t\t\tOS.XSetFillStyle (xDisplay, xGC, OS.FillTiled);", "-\t\t\tOS.XSetTSOrigin (xDisplay, xGC, -tileX, -tileY);", "-\t\t\tOS.XSetTile (xDisplay, xGC, control.backgroundImage.pixmap);", "-\t\t\tgc.fillRectangle (x, y, width, height);", "-\t\t\tOS.XSetFillStyle (xDisplay, xGC, values.fill_style);", "-\t\t\tOS.XSetTSOrigin (xDisplay, xGC, values.ts_x_origin, values.ts_y_origin);", "+\t\tGCData data = gc.getGCData ();", "+\t\tint /*long*/ cairo = data.cairo;", "+\t\tif (cairo != 0) {", "+\t\t\tCairo.cairo_save (cairo);", "+\t\t\tif (control.backgroundImage != null) {", "+\t\t\t\tshort [] root_x = new short [1], root_y = new short [1];", "+\t\t\t\tOS.XtTranslateCoords (handle, (short) 0, (short) 0, root_x, root_y);", "+\t\t\t\tshort [] control_x = new short [1], control_y = new short [1];", "+\t\t\t\tOS.XtTranslateCoords (control.handle, (short) 0, (short) 0, control_x, control_y);", "+\t\t\t\tint tileX = root_x[0] - control_x[0], tileY = root_y[0] - control_y[0];", "+\t\t\t\tCairo.cairo_translate (cairo, -tileX, -tileY);", "+\t\t\t\tx += tileX;", "+\t\t\t\ty += tileY;", "+\t\t\t\tint xDisplay = OS.XtDisplay (handle);", "+\t\t\t\tint xVisual = OS.XDefaultVisual(xDisplay, OS.XDefaultScreen(xDisplay));", "+\t\t\t\tint xDrawable = control.backgroundImage.pixmap;\t\t\t\t", "+\t\t\t\tint [] unused = new int [1];  int [] w = new int [1];  int [] h = new int [1];", "+\t\t\t \tOS.XGetGeometry (xDisplay, xDrawable, unused, unused, unused, w, h, unused, unused);", "+\t\t\t\tint /*long*/ surface = Cairo.cairo_xlib_surface_create (xDisplay, xDrawable, xVisual, w [0], h [0]);", "+\t\t\t\tif (surface == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tint /*long*/ pattern = Cairo.cairo_pattern_create_for_surface (surface);", "+\t\t\t\tif (pattern == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tCairo.cairo_pattern_set_extend (pattern, Cairo.CAIRO_EXTEND_REPEAT);", "+\t\t\t\tCairo.cairo_set_source (cairo, pattern);", "+\t\t\t\tCairo.cairo_surface_destroy (surface);", "+\t\t\t\tCairo.cairo_pattern_destroy (pattern);", "+\t\t\t} else {", "+\t\t\t\tXColor color = getXColor (control.getBackgroundPixel ());", "+\t\t\t\tCairo.cairo_set_source_rgba (cairo, (color.red & 0xFFFF) / (float)0xFFFF, (color.green & 0xFFFF) / (float)0xFFFF, (color.blue & 0xFFFF) / (float)0xFFFF, data.alpha / (float)0xFF);", "+\t\t\t}\t\t\t", "+\t\t\tCairo.cairo_rectangle (cairo, x, y, width, height);", "+\t\t\tCairo.cairo_fill (cairo);", "+\t\t\tCairo.cairo_restore (cairo);", "-\t\t\tOS.XGetGCValues (xDisplay, xGC, OS.GCBackground, values);", "-\t\t\tgc.setBackground (control.getBackground ());", "-\t\t\tgc.fillRectangle (x, y, width, height);", "-\t\t\tOS.XSetBackground (xDisplay, xGC, values.background);", "+\t\t\tint xDisplay = OS.XtDisplay (handle);", "+\t\t\tif (xDisplay == 0) return;", "+\t\t\tint xGC = gc.handle;", "+\t\t\tXGCValues values = new XGCValues();", "+\t\t\tif (control.backgroundImage != null) {", "+\t\t\t\tOS.XGetGCValues (xDisplay, xGC, OS.GCFillStyle | OS.GCTile | OS.GCTileStipXOrigin | OS.GCTileStipYOrigin, values);", "+\t\t\t\tshort [] root_x = new short [1], root_y = new short [1];", "+\t\t\t\tOS.XtTranslateCoords (handle, (short) 0, (short) 0, root_x, root_y);", "+\t\t\t\tshort [] control_x = new short [1], control_y = new short [1];", "+\t\t\t\tOS.XtTranslateCoords (control.handle, (short) 0, (short) 0, control_x, control_y);", "+\t\t\t\tint tileX = root_x[0] - control_x[0], tileY = root_y[0] - control_y[0];", "+\t\t\t\tOS.XSetFillStyle (xDisplay, xGC, OS.FillTiled);", "+\t\t\t\tOS.XSetTSOrigin (xDisplay, xGC, -tileX, -tileY);", "+\t\t\t\tOS.XSetTile (xDisplay, xGC, control.backgroundImage.pixmap);", "+\t\t\t\tOS.XFillRectangle (data.display, data.drawable, xGC, x, y, width, height);", "+\t\t\t\tOS.XSetFillStyle (xDisplay, xGC, values.fill_style);", "+\t\t\t\tOS.XSetTSOrigin (xDisplay, xGC, values.ts_x_origin, values.ts_y_origin);", "+\t\t\t} else {", "+\t\t\t\tOS.XGetGCValues (xDisplay, xGC, OS.GCForeground, values);", "+\t\t\t\tOS.XSetForeground (xDisplay, xGC, control.getBackgroundPixel ());", "+\t\t\t\tOS.XFillRectangle (data.display, data.drawable, xGC, x, y, width, height);", "+\t\t\t\tOS.XSetForeground (xDisplay, xGC, values.foreground);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c108d6766180bc53912291bf7df9b5eb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "200eb7eac44cd3abd294d522e4db6be35dbe2d1e", "commitAfterChange": "4fb41486046e62826d702c5ec58e6cd48232783a", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  void drawBackground (GC gc, int x, int y, int width, int height)", "signatureAfterChange": "  void drawBackground (GC gc, int x, int y, int width, int height)", "diff": ["-\t\tint /*long*/ gdkGC = gc.handle;", "-\t\tGdkGCValues values = new GdkGCValues ();", "-\t\tOS.gdk_gc_get_values (gdkGC, values);", "-\t\tif (control.backgroundImage != null) {", "-\t\t\tPoint pt = display.map (this, control, 0, 0);", "-\t\t\tOS.gdk_gc_set_fill (gdkGC, OS.GDK_TILED);", "-\t\t\tOS.gdk_gc_set_ts_origin (gdkGC, -pt.x, -pt.y);", "-\t\t\tOS.gdk_gc_set_tile (gdkGC, control.backgroundImage.pixmap);", "-\t\t\tgc.fillRectangle (x, y, width, height);", "-\t\t\tOS.gdk_gc_set_fill (gdkGC, values.fill);", "-\t\t\tOS.gdk_gc_set_ts_origin (gdkGC, values.ts_x_origin, values.ts_y_origin);", "+\t\tGCData data = gc.getGCData ();", "+\t\tint /*long*/ cairo = data.cairo;", "+\t\tif (cairo != 0) {", "+\t\t\tCairo.cairo_save (cairo);", "+\t\t\tif (control.backgroundImage != null) {", "+\t\t\t\tPoint pt = display.map (this, control, 0, 0);", "+\t\t\t\tCairo.cairo_translate (cairo, -pt.x, -pt.y);", "+\t\t\t\tx += pt.x;", "+\t\t\t\ty += pt.y;", "+\t\t\t\tint /*long*/ xDisplay = OS.GDK_DISPLAY ();", "+\t\t\t\tint /*long*/ xVisual = OS.gdk_x11_visual_get_xvisual (OS.gdk_visual_get_system());", "+\t\t\t\tint /*long*/ drawable = control.backgroundImage.pixmap;", "+\t\t\t\tint /*long*/ xDrawable = OS.GDK_PIXMAP_XID (drawable);\t\t\t\t", "+\t\t\t\tint [] w = new int [1], h = new int [1];", "+\t\t\t\tOS.gdk_drawable_get_size (drawable, w, h);", "+\t\t\t\tint /*long*/ surface = Cairo.cairo_xlib_surface_create (xDisplay, xDrawable, xVisual, w [0], h [0]);", "+\t\t\t\tif (surface == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tint /*long*/ pattern = Cairo.cairo_pattern_create_for_surface (surface);", "+\t\t\t\tif (pattern == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\t\tCairo.cairo_pattern_set_extend (pattern, Cairo.CAIRO_EXTEND_REPEAT);", "+\t\t\t\tCairo.cairo_set_source (cairo, pattern);", "+\t\t\t\tCairo.cairo_surface_destroy (surface);", "+\t\t\t\tCairo.cairo_pattern_destroy (pattern);", "+\t\t\t} else {", "+\t\t\t\tGdkColor color = control.getBackgroundColor ();", "+\t\t\t\tCairo.cairo_set_source_rgba (cairo, (color.red & 0xFFFF) / (float)0xFFFF, (color.green & 0xFFFF) / (float)0xFFFF, (color.blue & 0xFFFF) / (float)0xFFFF, data.alpha / (float)0xFF);", "+\t\t\t}\t\t\t", "+\t\t\tCairo.cairo_rectangle (cairo, x, y, width, height);", "+\t\t\tCairo.cairo_fill (cairo);", "+\t\t\tCairo.cairo_restore (cairo);", "-\t\t\tgc.setBackground (control.getBackground ());", "-\t\t\tgc.fillRectangle (x, y, width, height);", "-\t\t\tGdkColor color = new GdkColor ();", "-\t\t\tcolor.pixel = values.background_pixel;", "-\t\t\tOS.gdk_gc_set_background (gdkGC, color);", "+\t\t\tint /*long*/ gdkGC = gc.handle;", "+\t\t\tGdkGCValues values = new GdkGCValues ();", "+\t\t\tOS.gdk_gc_get_values (gdkGC, values);", "+\t\t\tif (control.backgroundImage != null) {", "+\t\t\t\tPoint pt = display.map (this, control, 0, 0);", "+\t\t\t\tOS.gdk_gc_set_fill (gdkGC, OS.GDK_TILED);", "+\t\t\t\tOS.gdk_gc_set_ts_origin (gdkGC, -pt.x, -pt.y);", "+\t\t\t\tOS.gdk_gc_set_tile (gdkGC, control.backgroundImage.pixmap);", "+\t\t\t\tOS.gdk_draw_rectangle (data.drawable, gdkGC, 1, x, y, width, height);", "+\t\t\t\tOS.gdk_gc_set_fill (gdkGC, values.fill);", "+\t\t\t\tOS.gdk_gc_set_ts_origin (gdkGC, values.ts_x_origin, values.ts_y_origin);", "+\t\t\t} else {", "+\t\t\t\tGdkColor color = control.getBackgroundColor ();", "+\t\t\t\tOS.gdk_gc_set_foreground (gdkGC, color);", "+\t\t\t\tOS.gdk_draw_rectangle (data.drawable, gdkGC, 1, x, y, width, height);", "+\t\t\t\tcolor.pixel = values.foreground_pixel;", "+\t\t\t\tOS.gdk_gc_set_foreground (gdkGC, color);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28d0044eebb8351507fd3496cd325d10", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "3c8cfdbbd754248da346ff43d9532ef978c8355d", "commitAfterChange": "272b7e6aa07980126e2a1fb1fbd02a4a8d5decd1", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " void drawBackground (GC gc, int x, int y, int width, int height)", "signatureAfterChange": " void drawBackground (GC gc, int x, int y, int width, int height)", "diff": ["-\tint xDisplay = OS.XtDisplay (handle);", "-\tif (xDisplay == 0) return;", "-\tint xGC = gc.handle;", "-\tXGCValues values = new XGCValues();", "-\tif (control == null) control = this;", "-\tif (control.backgroundImage != null) {", "-\t\tOS.XGetGCValues (xDisplay, xGC, OS.GCFillStyle | OS.GCTile | OS.GCTileStipXOrigin | OS.GCTileStipYOrigin, values);", "-\t\tshort [] root_x = new short [1], root_y = new short [1];", "-\t\tOS.XtTranslateCoords (handle, (short) 0, (short) 0, root_x, root_y);", "-\t\tshort [] control_x = new short [1], control_y = new short [1];", "-\t\tOS.XtTranslateCoords (control.handle, (short) 0, (short) 0, control_x, control_y);", "-\t\tint tileX = root_x[0] - control_x[0], tileY = root_y[0] - control_y[0];", "-\t\tOS.XSetFillStyle (xDisplay, xGC, OS.FillTiled);", "-\t\tOS.XSetTSOrigin (xDisplay, xGC, -tileX, -tileY);", "-\t\tOS.XSetTile (xDisplay, xGC, control.backgroundImage.pixmap);", "-\t\tgc.fillRectangle (x, y, width, height);", "-\t\tOS.XSetFillStyle (xDisplay, xGC, values.fill_style);", "-\t\tOS.XSetTSOrigin (xDisplay, xGC, values.ts_x_origin, values.ts_y_origin);", "+\tif (control != null) {", "+\t\tint xDisplay = OS.XtDisplay (handle);", "+\t\tif (xDisplay == 0) return;", "+\t\tint xGC = gc.handle;", "+\t\tXGCValues values = new XGCValues();", "+\t\tif (control.backgroundImage != null) {", "+\t\t\tOS.XGetGCValues (xDisplay, xGC, OS.GCFillStyle | OS.GCTile | OS.GCTileStipXOrigin | OS.GCTileStipYOrigin, values);", "+\t\t\tshort [] root_x = new short [1], root_y = new short [1];", "+\t\t\tOS.XtTranslateCoords (handle, (short) 0, (short) 0, root_x, root_y);", "+\t\t\tshort [] control_x = new short [1], control_y = new short [1];", "+\t\t\tOS.XtTranslateCoords (control.handle, (short) 0, (short) 0, control_x, control_y);", "+\t\t\tint tileX = root_x[0] - control_x[0], tileY = root_y[0] - control_y[0];", "+\t\t\tOS.XSetFillStyle (xDisplay, xGC, OS.FillTiled);", "+\t\t\tOS.XSetTSOrigin (xDisplay, xGC, -tileX, -tileY);", "+\t\t\tOS.XSetTile (xDisplay, xGC, control.backgroundImage.pixmap);", "+\t\t\tgc.fillRectangle (x, y, width, height);", "+\t\t\tOS.XSetFillStyle (xDisplay, xGC, values.fill_style);", "+\t\t\tOS.XSetTSOrigin (xDisplay, xGC, values.ts_x_origin, values.ts_y_origin);", "+\t\t} else {", "+\t\t\tOS.XGetGCValues (xDisplay, xGC, OS.GCBackground, values);", "+\t\t\tgc.setBackground (control.getBackground ());", "+\t\t\tgc.fillRectangle (x, y, width, height);", "+\t\t\tOS.XSetBackground (xDisplay, xGC, values.background);", "+\t\t}", "-\t\tOS.XGetGCValues (xDisplay, xGC, OS.GCBackground, values);", "-\t\tgc.setBackground (control.getBackground ());", "-\t\tOS.XSetBackground (xDisplay, xGC, values.background);"]}], "num": 1714}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "30369508256658c0f093deb7b1cc34c9", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6a16f9c31045b4be348bd9e3c60e670", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 50, "signatureBeforeChange": "  \tprivate boolean focus(boolean doClip, MacRect bounds)", "signatureAfterChange": "  void setCGClipping ()", "diff": ["+", "+void setCGClipping () {", "+\tif (data.control == 0) {", "+\t\tOS.CGContextScaleCTM(handle, 1, -1);", "+\t\tif (data.clipRgn != 0) {", "+\t\t\tOS.ClipCGContextToRegion(handle, new Rect(), data.clipRgn);", "+\t\t} else {", "+\t\t\tint rgn = OS.NewRgn();", "+\t\t\tOS.SetRectRgn(rgn, (short)-32768, (short)-32768, (short)32767, (short)32767);", "+\t\t\tOS.ClipCGContextToRegion(handle, new Rect(), rgn);", "+\t\t\tOS.DisposeRgn(rgn);", "+\t\t}", "+\t\tOS.CGContextScaleCTM(handle, 1, -1);", "+\t\treturn;", "+\t}", "+\tint window = OS.GetControlOwner(data.control);", "+\tint port = OS.GetWindowPort(window);", "+\tRect rect = new Rect();", "+\tOS.GetControlBounds(data.control, rect);", "+\tRect portRect = new Rect();", "+\tOS.GetPortBounds(port, portRect);", "+\tint portHeight = portRect.bottom - portRect.top;", "+\tOS.CGContextTranslateCTM(handle, -rect.left, portHeight - rect.top);", "+\tOS.CGContextScaleCTM(handle, 1, -1);", "+\tif (data.clipRgn != 0) { ", "+\t\tint rgn = OS.NewRgn();", "+\t\tOS.CopyRgn(data.clipRgn, rgn);", "+\t\tOS.OffsetRgn(rgn, rect.left, rect.top);", "+\t\tOS.SectRgn(data.visibleRgn, rgn, rgn);", "+\t\tOS.ClipCGContextToRegion(handle, portRect, rgn);", "+\t\tOS.DisposeRgn(rgn);", "+\t} else {", "+\t\tOS.ClipCGContextToRegion(handle, portRect, data.visibleRgn);", "+\t}", "+\tOS.CGContextScaleCTM(handle, 1, -1);", "+\tOS.CGContextTranslateCTM(handle, rect.left, -portHeight + rect.top);", "+}", "-", "-\tprivate boolean focus(boolean doClip, MacRect bounds) {", "-\t\t", "-\t\tif (fIsFocused && !fPendingClip) {", "-\t\t\treturn true;", "-\t\t}", "-", "-\t\t// save global state", "-\t\tOS.GetGWorld(fSavePort, fSaveGWorld);\t\t", "-\t\tOS.SetGWorld(handle, fSaveGWorld[0]);", "-\t\t", "-\t\tif (!doClip)", "-\t\t\treturn true;", "-\t\t", "-\t\tint dx= 0, dy= 0;", "-", "-\t\t// set origin of port using drawable bounds", "-\t\tif (data.controlHandle != 0) {", "-\t\t\tOS.GetControlBounds(data.controlHandle, fRect.getData());", "-\t\t\tdx= fRect.getX();", "-\t\t\tdy= fRect.getY();", "-\t\t\tOS.SetOrigin((short)-dx, (short)-dy);", "-\t\t\tMacPoint p= new MacPoint(-dx, -dy);", "-\t\t\tOS.QDSetPatternOrigin(p.getData());", "-\t\t}", "-\t\t// save clip region", "-\t\tOS.GetClip(fSaveClip);", "-\t\t", "-\t\t// calculate new clip based on the controls bound and GC clipping region", "-\t\tif (data.controlHandle != 0) {", "-\t\t\t", "-\t\t\tint result= OS.NewRgn();", "-\t\t\tMacUtil.getVisibleRegion(data.controlHandle, result, true);", "-\t\t\tOS.OffsetRgn(result, (short)-dx, (short)-dy);", "-", "-\t\t\t// clip against damage ", "-\t\t\tif (fDamageRgn != 0) {", "-\t\t\t\tint dRgn= OS.NewRgn();", "-\t\t\t\tOS.CopyRgn(fDamageRgn, dRgn);", "-\t\t\t\tOS.OffsetRgn(dRgn, (short)-dx, (short)-dy);", "-\t\t\t\tOS.SectRgn(result, dRgn, result);", "-\t\t\t}", "-\t\t\t", "-\t\t\t// clip against GC clipping region", "-\t\t\tif (data.clipRgn != 0) {", "-\t\t\t\tOS.SectRgn(result, data.clipRgn, result);", "-\t\t\t}", "-\t\t\t\t", "-\t\t\tOS.SetClip(result);", "-\t\t\tif (bounds != null)", "-\t\t\t\tOS.GetRegionBounds(result, bounds.getData());", "-\t\t\tOS.DisposeRgn(result);", "-\t\t\t", "-\t\t} else {", "-\t\t\t// clip against GC clipping region", "-\t\t\tif (data.clipRgn != 0) {", "-\t\t\t\tOS.SetClip(data.clipRgn);", "-\t\t\t\tif (bounds != null)", "-\t\t\t\t\tOS.GetRegionBounds(data.clipRgn, bounds.getData());", "-\t\t\t} else {", "-\t\t\t\tif (bounds != null)", "-\t\t\t\t\tbounds.set(0, 0, 0x8fff, 0x8fff);", "-\t\t\t}", "-\t\t}", "-\t\tfPendingClip= false;", "-\t\t", "-\t\treturn true;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d86571d6f99a8992923a1e82f9dff2c5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d6b025633a28920ae40301a1b987f0b923d26e74", "commitAfterChange": "6e89f26f4d6cf8c990840a7f12e701138a427091", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 65, "signatureBeforeChange": "  \tprivate void focus(boolean clip)", "signatureAfterChange": "  \tprivate boolean focus(boolean doClip, MacRect bounds)", "diff": ["-\tprivate void focus(boolean clip) {", "-\t", "+\tprivate boolean focus(boolean doClip, MacRect bounds) {", "+\t\t", "+\t\tif (fIsFocused && !fPendingClip) {", "+\t\t\treturn true;", "+\t\t}", "+", "-\t\tfOffsetX= 0;", "-\t\tfOffsetY= 0;", "+\t\tif (!doClip)", "+\t\t\treturn true;", "+\t\t", "+\t\tfOffsetX= fOffsetY= 0;", "+", "+\t\t// set origin of port using drawable bounds", "+\t\tif (data.controlHandle != 0) {", "+\t\t\tOS.GetControlBounds(data.controlHandle, fRect.getData());", "+\t\t\tfOffsetX= (short)fRect.getX();", "+\t\t\tfOffsetY= (short)fRect.getY();", "+\t\t\tOS.SetOrigin((short)-fOffsetX, (short)-fOffsetY);", "+\t\t}", "+\t\t// save clip region ", "+\t\tOS.GetClip(fSaveClip);", "+\t\t", "+\t\t// calculate new clip based on the controls bound and GC clipping region", "+\t\tif (data.controlHandle != 0) {", "+\t\t\t", "+\t\t\tint result= OS.NewRgn();", "+\t\t\tMacUtil.getVisibleRegion(data.controlHandle, result, true);", "+\t\t\tOS.OffsetRgn(result, (short)-fRect.getX(), (short)-fRect.getY());", "+", "+\t\t\t// clip against damage ", "+\t\t\tif (fDamageRgn != 0) {", "+\t\t\t\tint dRgn= OS.NewRgn();", "+\t\t\t\tOS.CopyRgn(fDamageRgn, dRgn);", "+\t\t\t\tOS.OffsetRgn(dRgn, (short)-fRect.getX(), (short)-fRect.getY());", "+\t\t\t\tOS.SectRgn(result, dRgn, result);", "+\t\t\t}", "+\t\t\t", "+\t\t\t// clip against GC clipping region", "+\t\t\tif (data.clipRgn != 0) {", "+\t\t\t\tOS.SectRgn(result, data.clipRgn, result);", "+\t\t\t}", "+\t\t\t\t", "+\t\t\tOS.SetClip(result);", "+\t\t\tif (bounds != null)", "+\t\t\t\tOS.GetRegionBounds(result, bounds.getData());", "+\t\t\tOS.DisposeRgn(result);", "+\t\t\t", "+\t\t} else {", "+\t\t\t// clip against GC clipping region", "+\t\t\tif (data.clipRgn != 0) {", "+\t\t\t\tOS.SetClip(data.clipRgn);", "+\t\t\t\tif (bounds != null)", "+\t\t\t\t\tOS.GetRegionBounds(data.clipRgn, bounds.getData());", "+\t\t\t} else {", "+\t\t\t\tif (bounds != null)", "+\t\t\t\t\tbounds.set(0, 0, 0x8fff, 0x8fff);", "+\t\t\t}", "+\t\t}", "+\t\tfPendingClip= false;", "+\t\t", "+\t\treturn true;", "+\t}", "-", "-\t\tif (clip) {", "-\t\t\t// set origin of port using drawable bounds", "-\t\t\tif (data.controlHandle != 0) {", "-\t\t\t\tOS.GetControlBounds(data.controlHandle, fRect.getData());", "-\t\t\t\tfOffsetX= (short)fRect.getX();", "-\t\t\t\tfOffsetY= (short)fRect.getY();", "-\t\t\t\tOS.SetOrigin((short)-fOffsetX, (short)-fOffsetY);", "-\t\t\t}", "-\t\t\t// save clip region ", "-\t\t\tOS.GetClip(fSaveClip);", "-\t\t\t", "-\t\t\t// calculate new clip based on the controls bound and GC clipping region", "-\t\t\tif (data.controlHandle != 0) {", "-\t\t\t\tif (fClipCache == 0) {", "-\t\t\t\t\tfClipCache= OS.NewRgn();", "-\t\t\t\t\tMacUtil.getVisibleRegion(data.controlHandle, fClipCache, true);", "-\t\t\t\t\tOS.OffsetRgn(fClipCache, (short)-fRect.getX(), (short)-fRect.getY());", "-\t\t\t\t}", "-\t\t\t\tif (data.clipRgn != 0) {", "-\t\t\t\t\tint rgn= OS.NewRgn();", "-\t\t\t\t\tOS.SectRgn(fClipCache, data.clipRgn, rgn);", "-\t\t\t\t\tOS.SetClip(rgn);", "-\t\t\t\t\tOS.DisposeRgn(rgn);", "-\t\t\t\t} else ", "-\t\t\t\t\tOS.SetClip(fClipCache);", "-\t\t\t\t// caching doesn't work yet", "-\t\t\t\tOS.DisposeRgn(fClipCache);", "-\t\t\t\tfClipCache= 0;", "-\t\t\t} else {", "-\t\t\t\tif (data.clipRgn != 0)", "-\t\t\t\t\tOS.SetClip(data.clipRgn);", "-\t\t\t}", "-\t\t}", "-\t}"]}], "num": 6700}
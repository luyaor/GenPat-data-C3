{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1a12e3005a73d8ba75cdbd78e3788cac", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baac5e766412a39d2f523143cc48dac7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "8bdc7452496d997678c005f282bcd2cc736b0512", "commitAfterChange": "1c443a30987f7f81d39bfdc3e6e4198bffa3e9a6", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void getClipping (Region region)", "signatureAfterChange": " public void getClipping (Region region)", "diff": ["-\tif (clippingRgn == 0) return;", "-\tOS.gdk_region_union(region.handle, clippingRgn);", "+\tint hRegion = region.handle;", "+\tOS.gdk_region_subtract (hRegion, hRegion);", "+\tif (clippingRgn != 0) {", "+\t\tOS.gdk_region_union(hRegion, clippingRgn);", "+\t} else {", "+\t\tint width = OS.GTK_WIDGET_WIDTH (scrolledHandle) + trimWidth ();", "+\t\tint height = OS.GTK_WIDGET_HEIGHT (scrolledHandle) + trimHeight ();", "+\t\tif (menuBar != null)  {", "+\t\t\tint barHandle = menuBar.handle;", "+\t\t\theight += OS.GTK_WIDGET_HEIGHT (barHandle);", "+\t\t}", "+\t\tGdkRectangle gdkRect = new GdkRectangle();", "+\t\tgdkRect.width = width;", "+\t\tgdkRect.height = height;", "+\t\tOS.gdk_region_union_with_rect(hRegion, gdkRect);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4312d8287983c08d7b552d6f4fba9a02", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "abd107467b5837fa0581218bc9beec69bc66414f", "commitAfterChange": "23c2bc8468cd1d7c6b5e538683fc80265d48ca63", "methodNumberBeforeChange": 200, "methodNumberAfterChange": 200, "signatureBeforeChange": " void handleTextChanged(TextChangedEvent event)", "signatureAfterChange": " void handleTextChanged(TextChangedEvent event)", "diff": ["+\tboolean directDraw;", "+\tif (isFixedLineHeight()) {", "+\t\tdirectDraw = lastTextChangeNewLineCount == 0 && lastTextChangeReplaceLineCount == 0;", "+\t} else {", "+\t\tint lastLine = content.getLineAtOffset(lastTextChangeStart) + lastTextChangeNewLineCount;", "+\t\tint newLineBottom = getLinePixel(lastLine + 1);", "+\t\tdirectDraw = lastLineBottom == newLineBottom;", "+\t\tif (!directDraw) {", "+\t\t\t//TODO use scroll() instead of redraw()", "+\t\t\tint firstLine = content.getLineAtOffset(lastTextChangeStart);", "+\t\t\tint firstLineTop = Math.max(getLinePixel(firstLine), topMargin);", "+\t\t\tRectangle clientArea = getClientArea();", "+\t\t\tsuper.redraw(clientArea.x, firstLineTop, clientArea.width, clientArea.height - firstLineTop, true);", "+\t\t}", "+\t}", "-\tif (lastTextChangeNewLineCount == 0 && lastTextChangeReplaceLineCount == 0) {", "+\tif (directDraw) {"]}], "num": 16927}
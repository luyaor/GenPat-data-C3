{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "90b9099aa59dda783a2de1afb5d9f789", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b0a01b889aa5c8b945ad2f520897abfc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "28fa68d6ba14a61b0a5ff4a38499eb3d2c0ae70f", "commitAfterChange": "ab04bfe3c82ede49bd463efb217e07084fb7d820", "methodNumberBeforeChange": 100, "methodNumberAfterChange": 102, "signatureBeforeChange": "  int kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData)", "diff": ["-\tif (accessible != null) {", "-\t\treturn accessible.internal_kEventAccessibleGetAllAttributeNames (nextHandler, theEvent, userData);", "+\tint code = OS.eventNotHandledErr;", "+\tString [] attributes = getAxAttributes ();", "+\tif (attributes != null) {", "+\t\tOS.CallNextEventHandler (nextHandler, theEvent);", "+\t\tnextHandler = 0;", "+\t\tint [] arrayRef = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamAccessibleAttributeNames, OS.typeCFMutableArrayRef, null, 4, null, arrayRef);", "+\t\tint attributesArrayRef = arrayRef [0];", "+\t\tint length = OS.CFArrayGetCount (attributesArrayRef);", "+\t\tString[] osAttributes = new String [length];", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tint stringRef = OS.CFArrayGetValueAtIndex (attributesArrayRef, i);", "+\t\t\tint strLength = OS.CFStringGetLength (stringRef);", "+\t\t\tchar [] buffer = new char [strLength];", "+\t\t\tCFRange range = new CFRange ();", "+\t\t\trange.length = strLength;", "+\t\t\tOS.CFStringGetCharacters (stringRef, range, buffer);", "+\t\t\tosAttributes [i] = new String (buffer);", "+\t\t}", "+\t\tfor (int i = 0; i < attributes.length; i++) {", "+\t\t\tif (!contains (osAttributes, attributes [i])) {", "+\t\t\t\tString string = attributes [i];", "+\t\t\t\tchar [] buffer = new char [string.length ()];", "+\t\t\t\tstring.getChars (0, buffer.length, buffer, 0);", "+\t\t\t\tint stringRef = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\tOS.CFArrayAppendValue (attributesArrayRef, stringRef);", "+\t\t\t\tOS.CFRelease (stringRef);", "+\t\t\t}", "+\t\t}", "+\t\tcode = OS.noErr;", "-\treturn OS.eventNotHandledErr;", "+\tif (accessible != null) {", "+\t\tcode = accessible.internal_kEventAccessibleGetAllAttributeNames (nextHandler, theEvent, userData);", "+\t}", "+\treturn code;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "305503a0914874a8c6030f70ce8ad623", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "6215640175ccfe897f3840a8201a886b754fe47e", "commitAfterChange": "45ceafadc60325534082e286f4aafee627d1de0d", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "    private static Hashtable gnome_getMimeInfo()", "signatureAfterChange": " private static Hashtable gnome_getMimeInfo()", "diff": ["-  ", "-\t", "-\t// Extract the mime info from the system directory.", "-\tString mimeDirectory = gnome_getDataDirectory (\"mime-info\");", "-\tgnome_getMimeInfoFromDirectory( mimeInfo, new File( mimeDirectory ) );", "-\t", "-\t// Append the mime info from the user's directory (if it exists).", "-\tString userDirectory = gnome_getHomeDirectory();", "-\tif (userDirectory != null) {", "-\t\tuserDirectory = userDirectory + File.separator + \".gnome\" + File.separator + \"mime-info\";", "-\t\tgnome_getMimeInfoFromDirectory( mimeInfo, new File( userDirectory ) );", "+\tint[] mimeData = new int[1];", "+\tint[] extensionData = new int[1];", "+\tint mimeList = GNOME.gnome_vfs_get_registered_mime_types();", "+\tint mimeElement = mimeList;", "+\twhile (mimeElement != 0) {", "+\t\tOS.memmove (mimeData, mimeElement, 4);", "+\t\tint mimePtr = mimeData[0];", "+\t\tint mimeLength = OS.strlen(mimePtr);", "+\t\tbyte[] mimeTypeBuffer = new byte[mimeLength];", "+\t\tOS.memmove(mimeTypeBuffer, mimePtr, mimeLength);", "+\t\tString mimeType = new String(Converter.mbcsToWcs(null, mimeTypeBuffer));", "+\t\tint extensionList = GNOME.gnome_vfs_mime_get_extensions_list(mimePtr);", "+\t\tif (extensionList != 0) {", "+\t\t\tVector extensions = new Vector();", "+\t\t\tint extensionElement = extensionList;", "+\t\t\twhile (extensionElement != 0) {", "+\t\t\t\tOS.memmove(extensionData, extensionElement, 4);", "+\t\t\t\tint extensionPtr = extensionData[0];", "+\t\t\t\tint extension_length = OS.strlen(extensionPtr);", "+\t\t\t\tbyte[] extensionBuffer = new byte[extension_length];", "+\t\t\t\tOS.memmove(extensionBuffer, extensionPtr, extension_length);", "+\t\t\t\tString extension = new String(Converter.mbcsToWcs(null, extensionBuffer));", "+\t\t\t\textension = '.' + extension;", "+\t\t\t\textensions.add(extension);", "+\t\t\t\textensionElement = GNOME.g_list_next(extensionElement); ", "+\t\t\t}", "+\t\t\tGNOME.gnome_vfs_mime_extensions_list_free(extensionList);", "+\t\t\tif (extensions.size() > 0) mimeInfo.put(mimeType, extensions);", "+\t\t}", "+\t\tmimeElement = GNOME.g_list_next(mimeElement);", "-", "+\tif (mimeList != 0) GNOME.gnome_vfs_mime_registered_mime_type_list_free(mimeList);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "54aa31fca0f25020afb26f669c183453", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "5ff7ac2fddf79437e7380da2c61f177a9d2b7b57", "commitAfterChange": "a11f12229032da8f3583f9824ed7436735b4c74e", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public void copyArea(Image image, int x, int y)", "signatureAfterChange": " public void copyArea(Image image, int x, int y)", "diff": ["-\t\tcopyArea(image, x, y, offscreen[0]);", "+\t\tcopyArea(image, x, y, offscreen[0], false);", "-\t\tcopyArea(image, x, y, data.image.handle);", "+\t\tcopyArea(image, x, y, data.image.handle, false);", "-//\t\tint imageHandle = image.handle;", "-//\t\tCGRect rect = new CGRect();", "-//\t\trect.x = x;", "-//\t\trect.y = y;", "-//\t\trect.width = OS.CGImageGetWidth(imageHandle);", "-//\t\trect.height = OS.CGImageGetHeight(imageHandle);", "-//\t\tint[] displays = new int[16];", "-//\t\tint[] count = new int[1];", "-//\t\tif (OS.CGGetDisplaysWithRect(rect, displays.length, displays, count) != 0) return;", "-//\t\tfor (int i = 0; i < count[0]; i++) {", "-//\t\t\tint display = displays[i];", "-//\t\t\tif (OS.CGDisplayCapture(display) == 0) {", "-//\t\t\t\tint address = OS.CGDisplayAddressForPosition (display, x, y);", "-//\t\t\t\tSystem.out.println(address);", "-//\t\t\t\tint colorspace = data.device.colorspace;", "-//\t\t\t\tint provider = OS.CGDataProviderCreateWithData(0, data, dataSize, 0);", "-//\t\t\t\tint srcImage = OS.CGImageCreate(width, height, 8, 32, bpr, colorspace, OS.kCGImageAlphaNoneSkipFirst, provider, null, false, 0);", "-//\t\t\t\tOS.CGDataProviderRelease(provider);", "-//\t\t\t\tcopyArea(image, x, y, srcImage);", "-//\t\t\t\tif (srcImage != 0) OS.CGImageRelease(srcImage);", "-//\t\t\t\tOS.CGDisplayRelease(display);", "-//\t\t\t}", "-//\t\t}", "+\t\tint imageHandle = image.handle;", "+\t\tCGRect rect = new CGRect();", "+\t\trect.x = x;", "+\t\trect.y = y;", "+\t\trect.width = OS.CGImageGetWidth(imageHandle);", "+\t\trect.height = OS.CGImageGetHeight(imageHandle);", "+\t\tint[] displays = new int[16];", "+\t\tint[] count = new int[1];", "+\t\tif (OS.CGGetDisplaysWithRect(rect, displays.length, displays, count) != 0) return;", "+\t\tfor (int i = 0; i < count[0]; i++) {", "+\t\t\tint display = displays[i];", "+\t\t\tint address = OS.CGDisplayBaseAddress(display);", "+\t\t\tif (address != 0) {", "+\t\t\t\tint width = OS.CGDisplayPixelsWide(display);", "+\t\t\t\tint height = OS.CGDisplayPixelsHigh(display);", "+\t\t\t\tint bpr = OS.CGDisplayBytesPerRow(display);", "+\t\t\t\tint bpp = OS.CGDisplayBitsPerPixel(display);", "+\t\t\t\tint bps = OS.CGDisplayBitsPerSample(display);", "+\t\t\t\tSystem.out.println(width + \" \" + height + \" \" + bpr + \" \" + bpp + \" \" + bps);", "+\t\t\t\tint provider = OS.CGDataProviderCreateWithData(0, address, bpr * height, 0);", "+\t\t\t\tint srcImage = OS.CGImageCreate(width, height, bps, bpp, bpr, data.device.colorspace, OS.kCGImageAlphaNoneSkipFirst, provider, null, false, 0);", "+\t\t\t\tOS.CGDataProviderRelease(provider);", "+\t\t\t\tcopyArea(image, x, y, srcImage, true);", "+\t\t\t\tif (srcImage != 0) OS.CGImageRelease(srcImage);", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c13fe6b483cbabf6c1f973397c54d289", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "28fa68d6ba14a61b0a5ff4a38499eb3d2c0ae70f", "commitAfterChange": "ab04bfe3c82ede49bd463efb217e07084fb7d820", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 33, "signatureBeforeChange": "  int kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventAccessibleGetAllAttributeNames (int nextHandler, int theEvent, int userData)", "diff": ["-\tint code = OS.CallNextEventHandler (nextHandler, theEvent);", "-\tint stringArrayRef = 0;", "-\tif (code != OS.noErr) {", "-\t\tint [] arrayRef = new int[1];", "+\tint code = OS.eventNotHandledErr;", "+\tString [] attributes = getAxAttributes ();", "+\tif (attributes != null) {", "+\t\tOS.CallNextEventHandler (nextHandler, theEvent);", "+\t\tnextHandler = 0;", "+\t\tint [] arrayRef = new int [1];", "-\t\tstringArrayRef = arrayRef[0];", "+\t\tint attributesArrayRef = arrayRef [0];", "+\t\tint length = OS.CFArrayGetCount (attributesArrayRef);", "+\t\tString[] osAttributes = new String [length];", "+\t\tfor (int i = 0; i < length; i++) {", "+\t\t\tint stringRef = OS.CFArrayGetValueAtIndex (attributesArrayRef, i);", "+\t\t\tint strLength = OS.CFStringGetLength (stringRef);", "+\t\t\tchar [] buffer = new char [strLength];", "+\t\t\tCFRange range = new CFRange ();", "+\t\t\trange.length = strLength;", "+\t\t\tOS.CFStringGetCharacters (stringRef, range, buffer);", "+\t\t\tosAttributes [i] = new String (buffer);", "+\t\t}", "+\t\tfor (int i = 0; i < attributes.length; i++) {", "+\t\t\tif (!contains (osAttributes, attributes [i])) {", "+\t\t\t\tString string = attributes [i];", "+\t\t\t\tchar [] buffer = new char [string.length ()];", "+\t\t\t\tstring.getChars (0, buffer.length, buffer, 0);", "+\t\t\t\tint stringRef = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\tOS.CFArrayAppendValue (attributesArrayRef, stringRef);", "+\t\t\t\tOS.CFRelease (stringRef);", "+\t\t\t}", "+\t\t}", "+\t\tcode = OS.noErr;", "-\tif (stringArrayRef == 0) {", "-\t\tstringArrayRef = OS.CFArrayCreateMutable (OS.kCFAllocatorDefault, 0, 0);", "+\tif (parent.accessible != null) {", "+\t\tcode = parent.accessible.internal_kEventAccessibleGetAllAttributeNames (nextHandler, theEvent, userData);", "-\tString string = OS.kAXValueAttribute;", "-\tchar [] buffer = new char [string.length ()];", "-\tstring.getChars (0, buffer.length, buffer, 0);", "-\tint stringRef = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-\tOS.CFArrayAppendValue(stringArrayRef, stringRef);", "-\tOS.CFRelease(stringRef);", "-\treturn OS.noErr;", "+\treturn code;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1b7b72518fcc2d523681a990ab58c083", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextPrinter.java", "commitBeforeChange": "e872f3b0e0111042ce6a533a050560e79352267f", "commitAfterChange": "c84e821e0cb8d959aa96acae0e6a916c98e9d912", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r \t\t\t\tpublic void run()", "signatureAfterChange": "\r \t\r \tpublic void run()", "diff": ["+\t\r", "+\tpublic void run() {\r", "-\t\t\tstyledText.getDisplay().syncExec(new Runnable() {\r", "-\t\t\t\tpublic void run() {\r", "-\t\t\t\t\ttabSize = styledText.getTabs();\r", "-\t\t\t\t}\r", "+\t\t\t/* Create a printer GC and print the RTF to it. */\r", "+\t\t\tend = rtf.length();\r", "+\t\t\tindex = 0;\r", "+\t\t\twordBuffer = new StringBuffer();\r", "+\t\t\twhile (index < end) {\r", "+\t\t\t\tchar c = rtf.charAt(index);\r", "+\t\t\t\tindex++;\r", "+\t\t\t\tswitch (c) {\r", "+\t\t\t\t\tcase '\\\\':\r", "+\t\t\t\t\t\tprintWordBuffer();\r", "+\t\t\t\t\t\tparseControlWord();\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase '{':\r", "+\t\t\t\t\t\tprintWordBuffer();\r", "+\t\t\t\t\t\tsaveState();\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase '}':\r", "+\t\t\t\t\t\tprintWordBuffer();\r", "+\t\t\t\t\t\trestoreState();\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tcase 0x0a:\r", "+\t\t\t\t\tcase 0x0d:\r", "+\t\t\t\t\t\tprintWordBuffer();\r", "+\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\tdefault:\r", "+\t\t\t\t\t\tparseChar(c);\r", "+\t\t\t\t}\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ecec8595e12396aa5c9fbf12dc1318b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "ee1541799783b7a2d49deac3fcb18abcfaa6358c", "commitAfterChange": "613ef52a512ea94b5664ef2017085c02bc3c04da", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 139, "signatureBeforeChange": " public void setEnabled (boolean enabled)", "signatureAfterChange": " public void setEnabled (boolean enabled)", "diff": ["+\tif (enabled) {", "+\t\tif (enableWindow != 0) {", "+\t\t\tOS.gdk_window_destroy (enableWindow);", "+\t\t\tenableWindow = 0;", "+\t\t}", "+\t} else {", "+\t\tOS.gtk_widget_realize (handle);", "+\t\tint /*long*/ parentHandle = parent.parentingHandle ();", "+\t\tint /*long*/ window = OS.GTK_WIDGET_WINDOW (parentHandle);", "+\t\tRectangle rect = getBounds ();", "+\t\tGdkWindowAttr attributes = new GdkWindowAttr ();", "+\t\tattributes.x = rect.x;", "+\t\tattributes.y = rect.y;", "+\t\tattributes.width = rect.width;", "+\t\tattributes.height = rect.height;", "+\t\tattributes.event_mask = (0xFFFFFFFF & ~OS.ExposureMask);", "+\t\tattributes.wclass = OS.GDK_INPUT_ONLY;", "+\t\tattributes.window_type = OS.GDK_WINDOW_CHILD;", "+\t\tenableWindow = OS.gdk_window_new (window, attributes, OS.GDK_WA_X | OS.GDK_WA_Y);", "+\t\tif (enableWindow != 0) {", "+\t\t\tOS.gdk_window_set_user_data (enableWindow, parentHandle);", "+\t\t\tif (!OS.GDK_WINDOWING_X11 ()) {", "+\t\t\t\tOS.gdk_window_raise (enableWindow);", "+\t\t\t} else {", "+\t\t\t\tint /*long*/ topHandle = topHandle ();", "+\t\t\t\tint /*long*/ topWindow = OS.GTK_WIDGET_WINDOW (topHandle);\t\t\t", "+\t\t\t\tint /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (topWindow);", "+\t\t\t\tint /*long*/ xWindow = OS.gdk_x11_drawable_get_xid (enableWindow);", "+\t\t\t\tint xScreen = OS.XDefaultScreen (xDisplay);", "+\t\t\t\tint flags = OS.CWStackMode | OS.CWSibling;\t\t\t", "+\t\t\t\tXWindowChanges changes = new XWindowChanges ();", "+\t\t\t\tchanges.sibling = OS.gdk_x11_drawable_get_xid (topWindow);", "+\t\t\t\tchanges.stack_mode = OS.Above;", "+\t\t\t\tOS.XReconfigureWMWindow (xDisplay, xWindow, xScreen, flags, changes);", "+\t\t\t}", "+\t\t\tOS.gdk_window_show (enableWindow);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8596f7ef7e6d1fe7cbc94bacd1009877", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Pattern.java", "commitBeforeChange": "c05f56c1b0acda6d358c754d485bebfca2e085c4", "commitAfterChange": "2703f006fbf38788b5d53d9129d34aeb73ab335e", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  int drawPatternProc (int ref, int context)", "signatureAfterChange": "  int drawPatternProc (int ref, int context)", "diff": ["+\t\tint imageWidth = OS.CGImageGetWidth(imageHandle);", "+\t\tint imageHeight = OS.CGImageGetHeight(imageHandle);", "-\t\trect.width = OS.CGImageGetWidth(imageHandle);", "-\t\trect.height = OS.CGImageGetHeight(imageHandle);", "+\t\trect.width = imageWidth;", "+\t\trect.height = imageHeight;", "-\t \tOS.CGContextTranslateCTM(context, 0, -rect.height);", "-\t\tOS.CGContextDrawImage(context, rect, imageHandle);", "+\t \tif (drawRect != null && (drawRect.x % imageWidth) + drawRect.width < imageWidth && (drawRect.y % imageHeight) + drawRect.height < imageHeight) {", "+\t \t\trect.x = drawRect.x % imageWidth;", "+\t \t\trect.y = drawRect.y % imageHeight;", "+\t \t\trect.width = drawRect.width;", "+\t \t\trect.height = drawRect.height;", "+\t \t\tif (OS.VERSION >= 0x1040) {", "+\t \t\t\timageHandle = OS.CGImageCreateWithImageInRect(imageHandle, rect);", "+\t \t\t} else {", "+\t\t \t\tint srcX = (int)drawRect.x, srcY = (int)drawRect.y;", "+\t\t \t\tint srcWidth = (int)drawRect.width, srcHeight = (int)drawRect.height;", "+\t\t \t\tint bpc = OS.CGImageGetBitsPerComponent(imageHandle);", "+\t\t\t\tint bpp = OS.CGImageGetBitsPerPixel(imageHandle);", "+\t\t\t\tint bpr = OS.CGImageGetBytesPerRow(imageHandle);", "+\t\t\t\tint colorspace = OS.CGImageGetColorSpace(imageHandle);", "+\t\t\t\tint alphaInfo = OS.CGImageGetAlphaInfo(imageHandle);", "+\t\t\t\tint data = image.data + (srcY * bpr) + srcX * 4;", "+\t\t\t\tint provider = OS.CGDataProviderCreateWithData(0, data, srcHeight * bpr, 0);", "+\t\t\t\tif (provider != 0) {", "+\t\t\t\t\timageHandle = OS.CGImageCreate(srcWidth, srcHeight, bpc, bpp, bpr, colorspace, alphaInfo, provider, null, true, 0);", "+\t\t\t\t\tOS.CGDataProviderRelease(provider);", "+\t\t\t\t}", "+\t\t\t}", "+\t \t}", "+\t \tOS.CGContextTranslateCTM(context, 0, -(rect.height + 2 * rect.y));", "+\t \tOS.CGContextDrawImage(context, rect, imageHandle);", "+\t \tif (imageHandle != 0 && imageHandle != image.handle) OS.CGImageRelease(imageHandle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4c7a33ec009bf43e9430631878a6f52b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "14fbe017d1e3dc78020213280156fbd51d492d0a", "commitAfterChange": "e204c746a54241ff7faf790f527aebbdadf8a989", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "\r int loadFontSet(int xDisplay, FontData fd)", "signatureAfterChange": "\r \r String getXlfds(int fontSet)", "diff": ["-}\r", "-int loadFontSet(int xDisplay, FontData fd) {\r", "-\t/* Use the character encoding for the default locale */\r", "-\tbyte[] buffer = Converter.wcsToMbcs(null, fd.getXlfd(), true);\r", "-\tint[] missing_charset = new int[1];\r", "-\tint[] missing_charset_count = new int[1];\r", "-\tint[] def_string = new int[1];\r", "-\treturn OS.XCreateFontSet(xDisplay, buffer, missing_charset, missing_charset_count, def_string);\r", "-}\r", "+\r", "+String getXlfds(int fontSet) {\r", "+\tif (fontSet == 0) return \"\";\r", "+\tint[] fontStructPtr = new int[1];\r", "+\tint[] fontNamePtr = new int[1];\r", "+\tXFontStruct fontStruct = new XFontStruct();  \r", "+\tint nFonts = OS.XFontsOfFontSet(fontSet, fontStructPtr, fontNamePtr);\r", "+\tint [] fontStructs = new int[nFonts];\r", "+\tOS.memmove(fontStructs,fontStructPtr[0], nFonts * 4);\r", "+\tStringBuffer stringBuffer = new StringBuffer();\r", "+\tfor (int i = 0; i < nFonts; i++) { // Go through each fontStruct in the font set.\r", "+\t\tOS.memmove(fontStruct,fontStructs[i],20 * 4);\r", "+\t\tint propPtr = fontStruct.properties;\r", "+\t\tfor (int j = 0; j < fontStruct.n_properties; j++) {\r", "+\t\t\t// Reef through properties looking for XAFONT\r", "+\t\t\tint[] prop = new int[2];\r", "+\t\t\tOS.memmove(prop, propPtr, 8);\r", "+\t\t\tif (prop[0] == OS.XA_FONT) {\r", "+\t\t\t\t/* Found it, prop[1] points to the string */\r", "+\t\t\t\tint ptr = OS.XmGetAtomName(device.xDisplay, prop[1]);\r", "+\t\t\t\tint length = OS.strlen(ptr);\r", "+\t\t\t\tbyte[] nameBuf = new byte[length];\r", "+\t\t\t\tOS.memmove(nameBuf, ptr, length);\r", "+\t\t\t\tif (stringBuffer.length() != 0) stringBuffer.append(','); \r", "+\t\t\t\tstringBuffer.append(new String(Converter.mbcsToWcs(null, nameBuf)).toLowerCase());\r", "+\t\t\t\tOS.XFree(ptr);\r", "+\t\t\t\tbreak;\r", "+\t\t\t}\r", "+\t\t\tpropPtr += 8;\r", "+\t\t}\r", "+\treturn stringBuffer.toString();\r"]}], "num": 58493}
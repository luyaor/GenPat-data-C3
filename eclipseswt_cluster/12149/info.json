{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "241709bea46a7f4e8b085f8db301ed58", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4ca2d7d567ff28b59b1e7cfadc02ca05", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "33702c0f14302d7231ea3f607b86a900e03829aa", "commitAfterChange": "d089b2cf79ce87d2a82f677ea1a4ce5a5ba9d4a4", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  void init(ImageData image)", "signatureAfterChange": "  void init(ImageData image)", "diff": ["-\tint width = image.width;", "-\tint height = image.height;", "+\tint width = this.width = image.width;", "+\tint height = this.height = image.height;", "-\tint /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);", "-\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "-\tint /*long*/ data = OS.gdk_pixbuf_get_pixels(pixbuf);", "+\tint stride, destDepth;", "+\tint /*long*/ data, pixbuf = 0;", "+\tif (OS.GTK_VERSION >= OS.VERSION(2, 22, 0)) {", "+\t\tstride = Cairo.cairo_format_stride_for_width(Cairo.CAIRO_FORMAT_ARGB32, width);", "+\t\tdata = surfaceData = OS.g_malloc(stride * height);", "+\t\tif (surfaceData == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tsurface = Cairo.cairo_image_surface_create_for_data(surfaceData, Cairo.CAIRO_FORMAT_ARGB32, width, height, stride);", "+\t\tif (surface == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tdestDepth = 32;", "+\t} else {", "+\t\tpixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);", "+\t\tif (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tstride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "+\t\tdata = OS.gdk_pixbuf_get_pixels(pixbuf);", "+\t\tdestDepth = 24;", "+\t}", "-\tif (!palette.isDirect || image.depth != 24 || stride != image.bytesPerLine || palette.redMask != 0xFF0000 || palette.greenMask != 0xFF00 || palette.blueMask != 0xFF) {", "+\tif (!palette.isDirect || image.depth != destDepth || stride != image.bytesPerLine || palette.redMask != 0xFF0000 || palette.greenMask != 0xFF00 || palette.blueMask != 0xFF) {", "-\t\t\t\tbuffer, 24, stride, ImageData.MSB_FIRST, 0, 0, width, height, 0xFF0000, 0xFF00, 0xFF,", "+\t\t\t\tbuffer, destDepth, stride, ImageData.MSB_FIRST, 0, 0, width, height, 0xFF0000, 0xFF00, 0xFF,", "-\t\t\t\tbuffer, 24, stride, ImageData.MSB_FIRST, 0, 0, width, height, 0xFF0000, 0xFF00, 0xFF,", "+\t\t\t\tbuffer, destDepth, stride, ImageData.MSB_FIRST, 0, 0, width, height, 0xFF0000, 0xFF00, 0xFF,", "-\tint /*long*/ pixmap = OS.gdk_pixmap_new (OS.GDK_ROOT_PARENT(), width, height, -1);", "-\tif (pixmap == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tint /*long*/ gdkGC = OS.gdk_gc_new(pixmap);", "-\tif (gdkGC == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "-\tOS.gdk_pixbuf_render_to_drawable(pixbuf, pixmap, gdkGC, 0, 0, 0, 0, width, height, OS.GDK_RGB_DITHER_NORMAL, 0, 0);", "-\tOS.g_object_unref(gdkGC);", "-\tOS.g_object_unref(pixbuf);", "-\t", "+\tif (OS.GTK_VERSION < OS.VERSION(2, 22, 0) ) {", "+\t\tint /*long*/ pixmap = OS.gdk_pixmap_new (OS.GDK_ROOT_PARENT(), width, height, -1);", "+\t\tif (pixmap == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tint /*long*/ gdkGC = OS.gdk_gc_new(pixmap);", "+\t\tif (gdkGC == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tOS.gdk_pixbuf_render_to_drawable(pixbuf, pixmap, gdkGC, 0, 0, 0, 0, width, height, OS.GDK_RGB_DITHER_NORMAL, 0, 0);", "+\t\tOS.g_object_unref(gdkGC);", "+\t\tOS.g_object_unref(pixbuf);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e976a3b47e1802fb2944ed8d916060b0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "9deefd18be8de01a672cfca15620a560b1ae5f22", "commitAfterChange": "d67b8caceb3f10df6a8e238427498db262144133", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 8, "signatureBeforeChange": " public void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight)", "signatureAfterChange": " public void drawImage(Image image, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight)", "diff": ["-public void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight) {", "-\t/* basic sanity checks */", "+public void drawImage(Image image, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight) {", "-\tif (srcImage == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "-\tif (srcImage.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\tif (image == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+\tif (image.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\tdrawImage(image, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, false);", "+}", "-\t/* source image properties */", "-\tif ((srcY + srcWidth > width[0]) ||", "-\t\t(srcY + srcHeight > height[0])) {", "-\t\terror(SWT.ERROR_INVALID_ARGUMENT);", "-", "-\t/* Special case:  If we don't need to scale, and there is no alpha/mask,", "-\t * then we can just blit the image inside the X server - no net traffic", "-\t */", "-\tboolean needScaling = (srcWidth != destWidth) || (srcHeight != destHeight);", "-\tboolean simple = !needScaling & (srcImage.mask == 0);", "-\t", "-\tif (simple) {", "-\t\tOS.gdk_draw_pixmap(data.drawable, handle, srcImage.pixmap,", "-\t\t\tsrcX, srcY,", "-\t\t\tdestX, destY,", "-\t\t\twidth[0], height[0]);", "-\t", "-\t", "-\t/* Fetch a local GdkPixbuf from server */", "-\tPixbuffer pixbuf = new Pixbuffer(srcImage);", "-\t", "-\t/* Scale if necessary */", "-\tif ((srcWidth != destWidth) || (srcHeight != destHeight)) {", "-\t\tdouble scale_x = (double)destWidth / (double)srcWidth;", "-\t\tdouble scale_y = (double)destHeight / (double)srcHeight;", "-\t\tdouble offset_x = - srcX * scale_x;", "-\t\tdouble offset_y = - srcY * scale_y;", "-", "-\t\tint destSizePixbuf = GDKPIXBUF.gdk_pixbuf_new (", "-\t\t\tGDKPIXBUF.GDK_COLORSPACE_RGB(),", "-\t\t\ttrue, 8, destWidth, destHeight);", "-\t\tGDKPIXBUF.gdk_pixbuf_scale(", "-\t\t\tpixbuf.handle, // src,", "-\t\t\tdestSizePixbuf,", "-\t\t\t0,", "-\t\t\t0,", "-\t\t\tdestWidth, destHeight,", "-\t\t\toffset_x, offset_y,", "-\t\t\tscale_x, scale_y,", "-\t\t\tGDKPIXBUF.GDK_INTERP_BILINEAR);", "-\t\tpixbuf.handle = destSizePixbuf;", "-\t/* Paint it */", "-\tGDKPIXBUF.gdk_pixbuf_render_to_drawable_alpha(", "-\t\t\tpixbuf.handle,", "-\t\t\tdata.drawable,", "-\t\t\t0, 0,", "-\t\t\tdestX, destY,", "-\t\t\tdestWidth, destHeight,", "-\t\t\tGDKPIXBUF.GDK_PIXBUF_ALPHA_BILEVEL, 128,", "-\t\t\tGDKPIXBUF.GDK_RGB_DITHER_NORMAL,", "-\t\t\t0, 0", "-\t\t\t);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cd135c6d607e7d7920ba0a0da155a73a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TrayItem.java", "commitBeforeChange": "600117323003db9ea522ed0baf12ee909172c3dc", "commitAfterChange": "c44dd21c1a1b0072edf7d53333363f735a817f14", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  int gtk_size_allocate (int widget, int allocation)", "signatureAfterChange": "  int gtk_size_allocate (int widget, int allocation)", "diff": ["-\t\tint xoffset = (int) Math.floor (OS.GTK_WIDGET_X (widget) + ((OS.GTK_WIDGET_WIDTH (widget) - OS.GTK_WIDGET_REQUISITION_WIDTH (widget)) * 0.5) + 0.5);", "-\t\tint yoffset = (int) Math.floor (OS.GTK_WIDGET_Y (widget) + ((OS.GTK_WIDGET_HEIGHT (widget) - OS.GTK_WIDGET_REQUISITION_HEIGHT (widget)) * 0.5) + 0.5);", "-\t\tRectangle b = image.getBounds();", "-\t\tint /*long*/ gdkImagePtr = OS.gdk_drawable_get_image (image.mask, 0, 0, b.width, b.height);", "-\t\tGdkImage gdkImage = new GdkImage();", "-\t\tOS.memmove (gdkImage, gdkImagePtr);", "-\t\tbyte[] maskData = new byte [gdkImage.bpl * gdkImage.height];", "-\t\tOS.memmove (maskData, gdkImage.mem, maskData.length);", "-\t\tOS.g_object_unref (gdkImagePtr);", "-\t\tRegion region = new Region (display);", "-\t\tfor (int y = 0; y < b.height; y++) {", "-\t\t\tfor (int x = 0; x < b.width; x++) {", "-\t\t\t\tint index = (y * gdkImage.bpl) + (x >> 3);", "-\t\t\t\tint theByte = maskData [index] & 0xFF;", "-\t\t\t\tint mask = 1 << (x & 0x7);", "-\t\t\t\tif ((theByte & mask) != 0) {", "-\t\t\t\t\tregion.add (xoffset + x, yoffset + y, 1, 1);", "+\t\tif (OS.gdk_drawable_get_depth (image.mask) == 1) {", "+\t\t\tint xoffset = (int) Math.floor (OS.GTK_WIDGET_X (widget) + ((OS.GTK_WIDGET_WIDTH (widget) - OS.GTK_WIDGET_REQUISITION_WIDTH (widget)) * 0.5) + 0.5);", "+\t\t\tint yoffset = (int) Math.floor (OS.GTK_WIDGET_Y (widget) + ((OS.GTK_WIDGET_HEIGHT (widget) - OS.GTK_WIDGET_REQUISITION_HEIGHT (widget)) * 0.5) + 0.5);", "+\t\t\tRectangle b = image.getBounds();", "+\t\t\tint /*long*/ gdkImagePtr = OS.gdk_drawable_get_image (image.mask, 0, 0, b.width, b.height);", "+\t\t\tGdkImage gdkImage = new GdkImage();", "+\t\t\tOS.memmove (gdkImage, gdkImagePtr);", "+\t\t\tbyte[] maskData = new byte [gdkImage.bpl * gdkImage.height];", "+\t\t\tOS.memmove (maskData, gdkImage.mem, maskData.length);", "+\t\t\tOS.g_object_unref (gdkImagePtr);", "+\t\t\tRegion region = new Region (display);", "+\t\t\tfor (int y = 0; y < b.height; y++) {", "+\t\t\t\tfor (int x = 0; x < b.width; x++) {", "+\t\t\t\t\tint index = (y * gdkImage.bpl) + (x >> 3);", "+\t\t\t\t\tint theByte = maskData [index] & 0xFF;", "+\t\t\t\t\tint mask = 1 << (x & 0x7);", "+\t\t\t\t\tif ((theByte & mask) != 0) {", "+\t\t\t\t\t\tregion.add (xoffset + x, yoffset + y, 1, 1);", "+\t\t\t\t\t}", "+\t\t\tOS.gtk_widget_realize (handle);", "+\t\t\tint /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);", "+\t\t\tOS.gdk_window_shape_combine_region (window, region.handle, 0, 0);", "+\t\t\tregion.dispose ();", "-\t\tOS.gtk_widget_realize (handle);", "-\t\tint /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);", "-\t\tOS.gdk_window_shape_combine_region (window, region.handle, 0, 0);", "-\t\tregion.dispose ();"]}], "num": 12149}
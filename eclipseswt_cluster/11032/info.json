{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "29c8de6a174eb65e7b8b712f27bf1dd8", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "232bfce415254dbdce1260dde0b4559a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 29, "signatureBeforeChange": "  \tint sendKeyEvent (int type, MacEvent mEvent, Event event)", "signatureAfterChange": "  int kEventRawKeyDown (int nextHandler, int theEvent, int userData)", "diff": ["+", "+int kEventRawKeyDown (int nextHandler, int theEvent, int userData) {", "+\tint result = super.kEventRawKeyDown (nextHandler, theEvent, userData);", "+\tif (result == OS.noErr) return result;", "+\t/*", "+\t* Feature in the Macintosh.  For some reason, when the user hits an", "+\t* up or down arrow to traverse the items in a Data Browser, the item", "+\t* scrolls to the left such that the white space that is normally", "+\t* visible to the right of the every item is scrolled out of view.", "+\t* The fix is to do the arrow traversal in Java and not call the", "+\t* default handler.", "+\t*/", "+\tint [] keyCode = new int [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "+\tswitch (keyCode [0]) {", "+\t\tcase 125: { /* Down */", "+\t\t\tint index = getSelectionIndex ();", "+\t\t\tsetSelection (Math.min (itemCount - 1, index + 1));", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t\tcase 126: { /* Up*/", "+\t\t\tint index = getSelectionIndex ();", "+\t\t\tsetSelection (Math.max (0, index - 1));", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t}", "+\treturn OS.eventNotHandledErr;", "+}", "-", "-\tint sendKeyEvent (int type, MacEvent mEvent, Event event) {", "-\t\t//processEvent (type, new MacEvent(eRefHandle));", "-\t\treturn OS.eventNotHandledErr;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a637abc82e6ab8c010bf8dfeecd94df7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "375107332fc5402c59bbea222825730a86b9abf8", "commitAfterChange": "44de4d90761d97390b615c1ff34478d750cc19d6", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": "  int appleEventProc (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int appleEventProc (int nextHandler, int theEvent, int userData)", "diff": ["-\tint [] aeEventID = new int [1];", "-\tif (OS.GetEventParameter (theEvent, OS.kEventParamAEEventID, OS.typeType, null, 4, null, aeEventID) == OS.noErr) {", "-\t\tif (aeEventID [0] == OS.kAEQuitApplication) {", "-\t\t\tEvent event = new Event ();", "-\t\t\tsendEvent (SWT.Close, event);", "-\t\t\tif (event.doit) {", "-\t\t\t\t/*", "-\t\t\t\t* When the application is closing, no SWT program can continue", "-\t\t\t\t* to run.  In order to avoid running code after the display has", "-\t\t\t\t* been disposed, exit from Java.", "-\t\t\t\t*/", "-\t\t\t\tdispose ();", "-\t\t\t\tSystem.exit (0);", "+\tint eventClass = OS.GetEventClass (theEvent);", "+\tint eventKind = OS.GetEventKind (theEvent);", "+\tswitch (eventClass) {", "+\t\tcase OS.kEventClassApplication: ", "+\t\t\tswitch (eventKind) {", "+\t\t\t\tcase OS.kEventAppAvailableWindowBoundsChanged: {", "+\t\t\t\t\t/* Reset the dock image in case the dock has been restarted */", "+\t\t\t\t\tif (dockImage != 0) {", "+\t\t\t\t\t\tint [] reason = new int [1];", "+\t\t\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamReason, OS.typeUInt32, null, 4, null, reason);", "+\t\t\t\t\t\tif (reason [0] == OS.kAvailBoundsChangedForDock) {", "+\t\t\t\t\t\t\tOS.SetApplicationDockTileImage (dockImage);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t\t\treturn OS.userCanceledErr;", "-\t\t}", "+\t\t\tbreak;", "+\t\tcase OS.kEventClassAppleEvent:", "+\t\t\tint [] aeEventID = new int [1];", "+\t\t\tif (OS.GetEventParameter (theEvent, OS.kEventParamAEEventID, OS.typeType, null, 4, null, aeEventID) == OS.noErr) {", "+\t\t\t\tif (aeEventID [0] == OS.kAEQuitApplication) {", "+\t\t\t\t\tEvent event = new Event ();", "+\t\t\t\t\tsendEvent (SWT.Close, event);", "+\t\t\t\t\tif (event.doit) {", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t* When the application is closing, no SWT program can continue", "+\t\t\t\t\t\t* to run.  In order to avoid running code after the display has", "+\t\t\t\t\t\t* been disposed, exit from Java.", "+\t\t\t\t\t\t*/", "+\t\t\t\t\t\tdispose ();", "+\t\t\t\t\t\tSystem.exit (0);", "+\t\t\t\t\t}", "+\t\t\t\t\treturn OS.userCanceledErr;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a81381eeb359cdd32ef72aecaa25d6af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "998df7aca1cf3202b933000a108bef42781caa0e", "commitAfterChange": "2c52adbf90a72e709a0427eea03e3ded12fab163", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground)", "diff": ["-", "+\tboolean restoreColor = false;", "+\tif (hasSelection && selectionBackground != null) {", "+\t\tint[] response = new int[1];", "+\t\tint err = OS.Gestalt(OS.gestaltSystemVersion, response);", "+\t\tif (err == OS.noErr && ((response[0] & 0xffff) >= 0x1030)) {", "+\t\t\trestoreColor = true;", "+\t\t\tint color = OS.CGColorCreate(device.colorspace, selectionBackground.handle);", "+\t\t\tsetLayoutControl(OS.kATSULineHighlightCGColorTag, color, 4);", "+\t\t\tOS.CGColorRelease(color);", "+\t\t}", "+\t}", "+\tif (restoreColor) setLayoutControl(OS.kATSULineHighlightCGColorTag, 0, 4);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "142b607a50cb0b0a53a7bb3afb046603", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "c878e19e1d71776f11d9ab1e76e433925b403c28", "commitAfterChange": "88bea82899fc1c73ee08f9a73be0ffb1e5544aa2", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  int kEventRawKeyDown (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventRawKeyDown (int nextHandler, int theEvent, int userData)", "diff": ["+\tint [] modifiers = new int [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "+\tif (modifiers [0] == OS.cmdKey) {", "+\t\tint [] keyCode = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "+\t\tswitch (keyCode [0]) {", "+\t\t\tcase 7: /* X */", "+\t\t\t\tcut ();", "+\t\t\t\treturn OS.noErr;", "+\t\t\tcase 8: /* C */", "+\t\t\t\tcopy ();", "+\t\t\t\treturn OS.noErr;", "+\t\t\tcase 9: /* V */", "+\t\t\t\tpaste ();", "+\t\t\t\treturn OS.noErr;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6858b67f517c4810c7b5b984b7ea06dc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 56, "methodNumberAfterChange": 30, "signatureBeforeChange": " \tprivate Pair getPair(String s)", "signatureAfterChange": "  int kEventRawKeyRepeat (int nextHandler, int theEvent, int userData)", "diff": ["+", "+int kEventRawKeyRepeat (int nextHandler, int theEvent, int userData) {", "+\tint result = super.kEventRawKeyRepeat (nextHandler, theEvent, userData);", "+\tif (result == OS.noErr) return result;", "+\t/*", "+\t* Feature in the Macintosh.  For some reason, when the user hits an", "+\t* up or down arrow to traverse the items in a Data Browser, the item", "+\t* scrolls to the left such that the white space that is normally", "+\t* visible to the right of the every item is scrolled out of view.", "+\t* The fix is to do the arrow traversal in Java and not call the", "+\t* default handler.", "+\t*/", "+\tint [] keyCode = new int [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "+\tswitch (keyCode [0]) {", "+\t\tcase 125: { /* Down */", "+\t\t\tint index = getSelectionIndex ();", "+\t\t\tsetSelection (Math.min (itemCount - 1, index + 1));", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t\tcase 126: { /* Up*/", "+\t\t\tint index = getSelectionIndex ();", "+\t\t\tsetSelection (Math.max (0, index - 1));", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t}", "+\treturn OS.eventNotHandledErr;", "+}", "-\t */", "-\tprivate Pair getPair(String s) {", "-\t\tIterator iter= fData.iterator();", "-\t\twhile (iter.hasNext()) {", "-\t\t\tPair p= (Pair) iter.next();", "-    \t\tif (s.equals(p.fValue))", "-    \t\t\treturn p;", "-    \t}", "-\t\treturn null;", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "921d3d9784426a4b16e4b135e6363b59", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "0fd3bc9ae79cda4a88436e0ac75a8b1fc54953f0", "commitAfterChange": "92840bf1dc9c70e7ea3cb593123b2ec10d732093", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  int kEventRawKey (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventRawKey (int nextHandler, int theEvent, int userData)", "diff": ["+\t/*", "+\t* Feature in the Macintosh.  For some reason, the default handler", "+\t* does not issue kEventTextInputUnicodeForKeyEvent when the user", "+\t* types Command+Space.  The fix is to look for this case and", "+\t* send the key from kEventRawKeyDown instead.", "+\t* ", "+\t* NOTE: This code relies on Command+Space being consumed and", "+\t* will deliver two events if this ever changes.", "+\t*/\t", "+\tif ((state & CANVAS) != 0) {", "+\t\tint [] keyCode = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyCode, OS.typeUInt32, null, keyCode.length * 4, null, keyCode);", "+\t\tif (keyCode [0] == 49 /* Space */) {", "+\t\t\tint [] modifiers = new int [1];", "+\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "+\t\t\tif (modifiers [0] == OS.cmdKey) {", "+\t\t\t\tif (!sendKeyEvent (SWT.KeyDown, theEvent)) return OS.noErr;", "+\t\t\t}", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b89c38bb6d438be04e85be0de665e31a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "c5d7cc4240fdb43b5db86ec80dd549bc69490b91", "commitAfterChange": "99d694cafa531b87692a37a5ea121c8455a1f639", "methodNumberBeforeChange": 79, "methodNumberAfterChange": 79, "signatureBeforeChange": "  int kEventMouseWheelMoved (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventMouseWheelMoved (int nextHandler, int theEvent, int userData)", "diff": ["-\tint result = super.kEventMouseWheelMoved (nextHandler, theEvent, userData);", "-\tif (result == OS.noErr) return result;", "+\tif ((state & IGNORE_WHEEL) != 0) return OS.eventNotHandledErr;", "+\tshort [] wheelAxis = new short [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamMouseWheelAxis, OS.typeMouseWheelAxis, null, 2, null, wheelAxis);", "-\tif (!sendMouseEvent (SWT.MouseWheel, (short) 0, wheelDelta [0], SWT.SCROLL_LINE, true, theEvent)) {", "-\t\treturn OS.noErr;", "+\tShell shell = getShell ();", "+\tControl control = this;", "+\twhile (control != null) {", "+\t\tif (!control.sendMouseEvent (SWT.MouseWheel, (short) 0, wheelDelta [0], SWT.SCROLL_LINE, true, theEvent)) {", "+\t\t\tbreak;", "+\t\t}", "+\t\tif (control.sendMouseWheel (wheelAxis [0], wheelDelta [0])) {", "+\t\t\tbreak;", "+\t\t}", "+\t\tif (control == this) {", "+\t\t\t/*", "+\t\t\t* Feature in the Macintosh.  For some reason, the kEventMouseWheelMoved", "+\t\t\t* event is sent twice to each application handler with the same mouse wheel", "+\t\t\t* data.  The fix is to set an ignore flag before calling the next handler ", "+\t\t\t* in the handler chain.", "+\t\t\t*/", "+\t\t\tstate |= IGNORE_WHEEL;", "+\t\t\tint result = OS.CallNextEventHandler(nextHandler, theEvent);", "+\t\t\tstate &= ~IGNORE_WHEEL;", "+\t\t\tif (result == OS.noErr) break;", "+\t\t}", "+\t\tif (control == shell) break;", "+\t\tcontrol = control.parent;", "-\treturn OS.eventNotHandledErr;", "+\treturn OS.noErr;"]}], "num": 11032}
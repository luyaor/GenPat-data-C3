{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "1458df0b57049423a0a07781ab245fea", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bae735dacb9348a83ddd461ac177e63", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/clipboard/ClipboardExample.java", "commitBeforeChange": "af2089a085f1429ade013714800b546a3efdb24f", "commitAfterChange": "9d240ff485731ca2d419e1b7c22c74065e621baa", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " void createRTFTransfer(Composite copyParent, Composite pasteParent)", "signatureAfterChange": " void createRTFTransfer(Composite copyParent, Composite pasteParent)", "diff": ["-\t\t\t\tdata = \"{\\\\rtf1{\\\\colortbl;\\\\red255\\\\green0\\\\blue0;}\\\\uc1\\\\b\\\\i \" + data + \"}\";", "-\t\t\t\tclipboard.setContents(new Object[] {data}, new Transfer[] {RTFTransfer.getInstance()});", "+\t\t\t\tStringBuffer buffer = new StringBuffer();", "+\t\t\t\tbuffer.append(\"{\\\\rtf1\\\\ansi\\\\uc1{\\\\colortbl;\\\\red255\\\\green0\\\\blue0;}\\\\uc1\\\\b\\\\i \");", "+\t\t\t\tfor (int i = 0; i < data.length(); i++) {", "+\t\t\t\t\tchar ch = data.charAt(i);", "+\t\t\t\t\tif (ch > 0xFF) {", "+\t\t\t\t\t\tbuffer.append(\"\\\\u\");", "+\t\t\t\t\t\tbuffer.append(Integer.toString((short) ch));", "+\t\t\t\t\t\tbuffer.append('?');", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tif (ch == '}' || ch == '{' || ch == '\\\\') {", "+\t\t\t\t\t\t\tbuffer.append('\\\\');", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbuffer.append(ch);", "+\t\t\t\t\t\tif (ch == '\\n') buffer.append(\"\\\\par \");", "+\t\t\t\t\t\tif (ch == '\\r' && (i - 1 == data.length() || data.charAt(i + 1) != '\\n')) {", "+\t\t\t\t\t\t\tbuffer.append(\"\\\\par \");", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tbuffer.append(\"}\");", "+\t\t\t\tclipboard.setContents(new Object[] {buffer.toString()}, new Transfer[] {RTFTransfer.getInstance()});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2df386b71352b5273da7957ee485a5c0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/carbon/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "e38f7ba08e4cd9896dddbc5916c5187c2e1b63eb", "commitAfterChange": "7349d1b65ee9a9edeeac8e2e96a33b2c8d655b80", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " \t \tint getSubroleAttribute (int nextHandler, int theEvent, int userData)", "signatureAfterChange": " \t \tint getSubroleAttribute (int nextHandler, int theEvent, int userData)", "diff": ["-\t\treturn getAttribute (nextHandler, theEvent, userData);", "-\t}", "+\t\tevent.detail = -1;", "+\t\tif (event.detail != -1) {", "+\t\t\tString appRole = roleToOs (event.detail);", "+\t\t\tint index = appRole.indexOf(':');", "+\t\t\tif (index != -1) {", "+\t\t\t\tappRole = appRole.substring(index + 1);", "+\t\t\t\tint stringRef = stringToStringRef (appRole);", "+\t\t\t\tif (stringRef != 0) {", "+\t\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamAccessibleAttributeValue, OS.typeCFStringRef, 4, new int [] {stringRef});", "+\t\t\t\t\tOS.CFRelease(stringRef);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\treturn OS.noErr;", "+\t\t}", "+\t\treturn OS.CallNextEventHandler (nextHandler, theEvent);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11dd7030bd14eab4f00066d6b5afa1d1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "24fdfd9c26f6e2472ad6e0a091d30c9851d291d5", "commitAfterChange": "b647d62c5bdcee9c1d9104cd6245d80b8fca31e7", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " void presetChooserDialog ()", "signatureAfterChange": " void presetChooserDialog ()", "diff": ["+\t\tif (fileName.equals (\"\")) {", "+\t\t\tfileName = \"Untitled\";", "+\t\t}", "-\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, fileName, true);", "+\t\t\tStringBuffer filenameWithExt = new StringBuffer();", "+\t\t\tfilenameWithExt.append (fileName);", "+\t\t\tif ((fileName.lastIndexOf (FILE_EXTENSION_SEPARATOR) == -1) &&", "+\t\t\t\t\t(filterExtensions.length != 0)) {  // Filename doesn't contain the extension and user has provided filter extensions", "+\t\t\t\tString selectedFilter = null;", "+\t\t\t\tif (this.filterIndex == -1) {", "+\t\t\t\t\tselectedFilter = filterExtensions[0];", "+\t\t\t\t} else {", "+\t\t\t\t\tselectedFilter = filterExtensions[filterIndex];", "+\t\t\t\t}", "+\t\t\t\tString extFilter = null;", "+\t\t\t\tint index = selectedFilter.indexOf (EXTENSION_SEPARATOR);", "+\t\t\t\tif (index == -1) {", "+\t\t\t\t\textFilter = selectedFilter.trim ();", "+\t\t\t\t} else {", "+\t\t\t\t\textFilter = selectedFilter.substring (0, index).trim ();", "+\t\t\t\t}", "+", "+\t\t\t\tint separatorIndex = extFilter.lastIndexOf (FILE_EXTENSION_SEPARATOR);", "+\t\t\t\tString extension = extFilter.substring (separatorIndex);", "+", "+\t\t\t\tif (!isGlobPattern (extension)) { //if the extension is of type glob pattern we should not add the extension", "+\t\t\t\t\tfilenameWithExt.append (extension);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbyte [] buffer = Converter.wcsToMbcs (null, filenameWithExt.toString (), true);"]}], "num": 53599}
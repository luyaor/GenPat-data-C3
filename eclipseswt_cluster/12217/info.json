{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b37d7b110ab1300e08f78bb42f87a13d", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "83280e4b3263918b79d6e1f3674c7fcd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "98b59845e52006919cc7fbceba0837163033848c", "commitAfterChange": "0bc6123ef86527be2e97dc69f141ed93a42a5c55", "methodNumberBeforeChange": 75, "methodNumberAfterChange": 75, "signatureBeforeChange": " public boolean post (Event event)", "signatureAfterChange": " public boolean post (Event event)", "diff": ["-\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "-\tif (event == null) error (SWT.ERROR_NULL_ARGUMENT);", "-//\tint type = event.type;", "-//\tswitch (type){", "-//\t\tcase SWT.KeyDown:", "-//\t\tcase SWT.KeyUp: {", "-//\t\t\tKEYBDINPUT inputs = new KEYBDINPUT ();", "-//\t\t\tinputs.wVk = (short) untranslateKey (event.keyCode);", "-//\t\t\tif (inputs.wVk == 0) {", "-//\t\t\t\tchar key = event.character;", "-//\t\t\t\tswitch (key) {", "-//\t\t\t\t\tcase SWT.BS: inputs.wVk = (short) OS.VK_BACK; break;", "-//\t\t\t\t\tcase SWT.CR: inputs.wVk = (short) OS.VK_RETURN; break;", "-//\t\t\t\t\tcase SWT.DEL: inputs.wVk = (short) OS.VK_DELETE; break;", "-//\t\t\t\t\tcase SWT.ESC: inputs.wVk = (short) OS.VK_ESCAPE; break;", "-//\t\t\t\t\tcase SWT.TAB: inputs.wVk = (short) OS.VK_TAB; break;", "-//\t\t\t\t\t/*", "-//\t\t\t\t\t* Since there is no LF key on the keyboard, do not attempt", "-//\t\t\t\t\t* to map LF to CR or attempt to post an LF key.", "-//\t\t\t\t\t*/", "-////\t\t\t\t\tcase SWT.LF: inputs.wVk = (short) OS.VK_RETURN; break;", "-//\t\t\t\t\tcase SWT.LF: return false;", "-//\t\t\t\t\tdefault: {", "-//\t\t\t\t\t\tif (OS.IsWinCE) {", "-//\t\t\t\t\t\t\tinputs.wVk = OS.CharUpper ((short) key);", "-//\t\t\t\t\t\t} else {", "-//\t\t\t\t\t\t\tinputs.wVk = OS.VkKeyScan ((short) wcsToMbcs (key, 0));", "-//\t\t\t\t\t\t\tif (inputs.wVk == -1) return false;", "-//\t\t\t\t\t\t\tinputs.wVk &= 0xFF;", "+\tsynchronized (Device.class) {", "+\t\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "+\t\tif (event == null) error (SWT.ERROR_NULL_ARGUMENT);", "+//\t\tint type = event.type;", "+//\t\tswitch (type){", "+//\t\t\tcase SWT.KeyDown:", "+//\t\t\tcase SWT.KeyUp: {", "+//\t\t\t\tKEYBDINPUT inputs = new KEYBDINPUT ();", "+//\t\t\t\tinputs.wVk = (short) untranslateKey (event.keyCode);", "+//\t\t\t\tif (inputs.wVk == 0) {", "+//\t\t\t\t\tchar key = event.character;", "+//\t\t\t\t\tswitch (key) {", "+//\t\t\t\t\t\tcase SWT.BS: inputs.wVk = (short) OS.VK_BACK; break;", "+//\t\t\t\t\t\tcase SWT.CR: inputs.wVk = (short) OS.VK_RETURN; break;", "+//\t\t\t\t\t\tcase SWT.DEL: inputs.wVk = (short) OS.VK_DELETE; break;", "+//\t\t\t\t\t\tcase SWT.ESC: inputs.wVk = (short) OS.VK_ESCAPE; break;", "+//\t\t\t\t\t\tcase SWT.TAB: inputs.wVk = (short) OS.VK_TAB; break;", "+//\t\t\t\t\t\t/*", "+//\t\t\t\t\t\t* Since there is no LF key on the keyboard, do not attempt", "+//\t\t\t\t\t\t* to map LF to CR or attempt to post an LF key.", "+//\t\t\t\t\t\t*/", "+//\t//\t\t\t\t\tcase SWT.LF: inputs.wVk = (short) OS.VK_RETURN; break;", "+//\t\t\t\t\t\tcase SWT.LF: return false;", "+//\t\t\t\t\t\tdefault: {", "+//\t\t\t\t\t\t\tif (OS.IsWinCE) {", "+//\t\t\t\t\t\t\t\tinputs.wVk = OS.CharUpper ((short) key);", "+//\t\t\t\t\t\t\t} else {", "+//\t\t\t\t\t\t\t\tinputs.wVk = OS.VkKeyScan ((short) wcsToMbcs (key, 0));", "+//\t\t\t\t\t\t\t\tif (inputs.wVk == -1) return false;", "+//\t\t\t\t\t\t\t\tinputs.wVk &= 0xFF;", "+//\t\t\t\t\t\t\t}", "+//\t\t\t\tinputs.dwFlags = type == SWT.KeyUp ? OS.KEYEVENTF_KEYUP : 0;", "+//\t\t\t\tint hHeap = OS.GetProcessHeap ();", "+//\t\t\t\tint pInputs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, INPUT.sizeof);", "+//\t\t\t\tOS.MoveMemory(pInputs, new int[] {OS.INPUT_KEYBOARD}, 4);", "+//\t\t\t\tOS.MoveMemory (pInputs + 4, inputs, KEYBDINPUT.sizeof);", "+//\t\t\t\tboolean result = OS.SendInput (1, pInputs, INPUT.sizeof) != 0;", "+//\t\t\t\tOS.HeapFree (hHeap, 0, pInputs);", "+//\t\t\t\treturn result;", "-//\t\t\tinputs.dwFlags = type == SWT.KeyUp ? OS.KEYEVENTF_KEYUP : 0;", "-//\t\t\tint hHeap = OS.GetProcessHeap ();", "-//\t\t\tint pInputs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, INPUT.sizeof);", "-//\t\t\tOS.MoveMemory(pInputs, new int[] {OS.INPUT_KEYBOARD}, 4);", "-//\t\t\tOS.MoveMemory (pInputs + 4, inputs, KEYBDINPUT.sizeof);", "-//\t\t\tboolean result = OS.SendInput (1, pInputs, INPUT.sizeof) != 0;", "-//\t\t\tOS.HeapFree (hHeap, 0, pInputs);", "-//\t\t\treturn result;", "-//\t\t}", "-//\t\tcase SWT.MouseDown:", "-//\t\tcase SWT.MouseMove: ", "-//\t\tcase SWT.MouseUp: {", "-//\t\t\tMOUSEINPUT inputs = new MOUSEINPUT ();", "-//\t\t\tif (type == SWT.MouseMove){", "-//\t\t\t\tinputs.dwFlags = OS.MOUSEEVENTF_MOVE | OS.MOUSEEVENTF_ABSOLUTE;", "-//\t\t\t\tinputs.dx = event.x * 65535 / (OS.GetSystemMetrics (OS.SM_CXSCREEN) - 1);", "-//\t\t\t\tinputs.dy = event.y * 65535 / (OS.GetSystemMetrics (OS.SM_CYSCREEN) - 1);", "-//\t\t\t} else {", "-//\t\t\t\tswitch (event.button) {", "-//\t\t\t\t\tcase 1: inputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_LEFTDOWN : OS.MOUSEEVENTF_LEFTUP; break;", "-//\t\t\t\t\tcase 2: inputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_MIDDLEDOWN : OS.MOUSEEVENTF_MIDDLEUP; break;", "-//\t\t\t\t\tcase 3: inputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_RIGHTDOWN : OS.MOUSEEVENTF_RIGHTUP; break;", "-//\t\t\t\t\tdefault: return false;", "+//\t\t\tcase SWT.MouseDown:", "+//\t\t\tcase SWT.MouseMove: ", "+//\t\t\tcase SWT.MouseUp: {", "+//\t\t\t\tMOUSEINPUT inputs = new MOUSEINPUT ();", "+//\t\t\t\tif (type == SWT.MouseMove){", "+//\t\t\t\t\tinputs.dwFlags = OS.MOUSEEVENTF_MOVE | OS.MOUSEEVENTF_ABSOLUTE;", "+//\t\t\t\t\tinputs.dx = event.x * 65535 / (OS.GetSystemMetrics (OS.SM_CXSCREEN) - 1);", "+//\t\t\t\t\tinputs.dy = event.y * 65535 / (OS.GetSystemMetrics (OS.SM_CYSCREEN) - 1);", "+//\t\t\t\t} else {", "+//\t\t\t\t\tswitch (event.button) {", "+//\t\t\t\t\t\tcase 1: inputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_LEFTDOWN : OS.MOUSEEVENTF_LEFTUP; break;", "+//\t\t\t\t\t\tcase 2: inputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_MIDDLEDOWN : OS.MOUSEEVENTF_MIDDLEUP; break;", "+//\t\t\t\t\t\tcase 3: inputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_RIGHTDOWN : OS.MOUSEEVENTF_RIGHTUP; break;", "+//\t\t\t\t\t\tdefault: return false;", "+//\t\t\t\t\t}", "+//\t\t\t\tint hHeap = OS.GetProcessHeap ();", "+//\t\t\t\tint pInputs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, INPUT.sizeof);", "+//\t\t\t\tOS.MoveMemory(pInputs, new int[] {OS.INPUT_MOUSE}, 4);", "+//\t\t\t\tOS.MoveMemory (pInputs + 4, inputs, MOUSEINPUT.sizeof);", "+//\t\t\t\tboolean result = OS.SendInput (1, pInputs, INPUT.sizeof) != 0;", "+//\t\t\t\tOS.HeapFree (hHeap, 0, pInputs);", "+//\t\t\t\treturn result;", "-//\t\t\tint hHeap = OS.GetProcessHeap ();", "-//\t\t\tint pInputs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, INPUT.sizeof);", "-//\t\t\tOS.MoveMemory(pInputs, new int[] {OS.INPUT_MOUSE}, 4);", "-//\t\t\tOS.MoveMemory (pInputs + 4, inputs, MOUSEINPUT.sizeof);", "-//\t\t\tboolean result = OS.SendInput (1, pInputs, INPUT.sizeof) != 0;", "-//\t\t\tOS.HeapFree (hHeap, 0, pInputs);", "-//\t\t\treturn result;", "-//\t\t}", "-//\t} ", "-\treturn false;", "+//\t\t} ", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29eaaa0a22558c6d39a7f7632873bea8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "9c473160f70ea03f9b06a110ca95335a7fd637d7", "commitAfterChange": "03f864053a819bb2c8e3afbda94c0e0bd4fb3b51", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " public boolean post (Event event)", "signatureAfterChange": " public boolean post (Event event)", "diff": ["-\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "-\tif (event == null) error (SWT.ERROR_NULL_ARGUMENT);", "-\tint type = event.type;", "-\tswitch (type){", "-\t\tcase SWT.KeyDown:", "-\t\tcase SWT.KeyUp: {", "-\t\t\tKEYBDINPUT inputs = new KEYBDINPUT ();", "-\t\t\tinputs.wVk = (short) untranslateKey (event.keyCode);", "-\t\t\tif (inputs.wVk == 0) {", "-\t\t\t\tchar key = event.character;", "-\t\t\t\tswitch (key) {", "-\t\t\t\t\tcase SWT.BS: inputs.wVk = (short) OS.VK_BACK; break;", "-\t\t\t\t\tcase SWT.CR: inputs.wVk = (short) OS.VK_RETURN; break;", "-\t\t\t\t\tcase SWT.DEL: inputs.wVk = (short) OS.VK_DELETE; break;", "-\t\t\t\t\tcase SWT.ESC: inputs.wVk = (short) OS.VK_ESCAPE; break;", "-\t\t\t\t\tcase SWT.TAB: inputs.wVk = (short) OS.VK_TAB; break;", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Since there is no LF key on the keyboard, do not attempt", "-\t\t\t\t\t* to map LF to CR or attempt to post an LF key.", "-\t\t\t\t\t*/", "-//\t\t\t\t\tcase SWT.LF: inputs.wVk = (short) OS.VK_RETURN; break;", "-\t\t\t\t\tcase SWT.LF: return false;", "-\t\t\t\t\tdefault: {", "-\t\t\t\t\t\tif (OS.IsWinCE) {", "-\t\t\t\t\t\t\tinputs.wVk = (short)/*64*/OS.CharUpper ((short) key);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tinputs.wVk = OS.VkKeyScan ((short) wcsToMbcs (key, 0));", "-\t\t\t\t\t\t\tif (inputs.wVk == -1) return false;", "-\t\t\t\t\t\t\tinputs.wVk &= 0xFF;", "+\tsynchronized (Device.class) {", "+\t\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "+\t\tif (event == null) error (SWT.ERROR_NULL_ARGUMENT);", "+\t\tint type = event.type;", "+\t\tswitch (type){", "+\t\t\tcase SWT.KeyDown:", "+\t\t\tcase SWT.KeyUp: {", "+\t\t\t\tKEYBDINPUT inputs = new KEYBDINPUT ();", "+\t\t\t\tinputs.wVk = (short) untranslateKey (event.keyCode);", "+\t\t\t\tif (inputs.wVk == 0) {", "+\t\t\t\t\tchar key = event.character;", "+\t\t\t\t\tswitch (key) {", "+\t\t\t\t\t\tcase SWT.BS: inputs.wVk = (short) OS.VK_BACK; break;", "+\t\t\t\t\t\tcase SWT.CR: inputs.wVk = (short) OS.VK_RETURN; break;", "+\t\t\t\t\t\tcase SWT.DEL: inputs.wVk = (short) OS.VK_DELETE; break;", "+\t\t\t\t\t\tcase SWT.ESC: inputs.wVk = (short) OS.VK_ESCAPE; break;", "+\t\t\t\t\t\tcase SWT.TAB: inputs.wVk = (short) OS.VK_TAB; break;", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t* Since there is no LF key on the keyboard, do not attempt", "+\t\t\t\t\t\t* to map LF to CR or attempt to post an LF key.", "+\t\t\t\t\t\t*/", "+//\t\t\t\t\t\tcase SWT.LF: inputs.wVk = (short) OS.VK_RETURN; break;", "+\t\t\t\t\t\tcase SWT.LF: return false;", "+\t\t\t\t\t\tdefault: {", "+\t\t\t\t\t\t\tif (OS.IsWinCE) {", "+\t\t\t\t\t\t\t\tinputs.wVk = (short)/*64*/OS.CharUpper ((short) key);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tinputs.wVk = OS.VkKeyScan ((short) wcsToMbcs (key, 0));", "+\t\t\t\t\t\t\t\tif (inputs.wVk == -1) return false;", "+\t\t\t\t\t\t\t\tinputs.wVk &= 0xFF;", "+\t\t\t\t\t\t\t}", "+\t\t\t\tinputs.dwFlags = type == SWT.KeyUp ? OS.KEYEVENTF_KEYUP : 0;", "+\t\t\t\tint /*long*/ hHeap = OS.GetProcessHeap ();", "+\t\t\t\tint /*long*/ pInputs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, INPUT.sizeof);", "+\t\t\t\tOS.MoveMemory(pInputs, new int[] {OS.INPUT_KEYBOARD}, 4);", "+\t\t\t\t//TODO - DWORD type of INPUT structure aligned to 8 bytes on 64 bit", "+\t\t\t\tOS.MoveMemory (pInputs + OS.PTR_SIZEOF, inputs, KEYBDINPUT.sizeof);", "+\t\t\t\tboolean result = OS.SendInput (1, pInputs, INPUT.sizeof) != 0;", "+\t\t\t\tOS.HeapFree (hHeap, 0, pInputs);", "+\t\t\t\treturn result;", "-\t\t\tinputs.dwFlags = type == SWT.KeyUp ? OS.KEYEVENTF_KEYUP : 0;", "-\t\t\tint /*long*/ hHeap = OS.GetProcessHeap ();", "-\t\t\tint /*long*/ pInputs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, INPUT.sizeof);", "-\t\t\tOS.MoveMemory(pInputs, new int[] {OS.INPUT_KEYBOARD}, 4);", "-\t\t\t//TODO - DWORD type of INPUT structure aligned to 8 bytes on 64 bit", "-\t\t\tOS.MoveMemory (pInputs + OS.PTR_SIZEOF, inputs, KEYBDINPUT.sizeof);", "-\t\t\tboolean result = OS.SendInput (1, pInputs, INPUT.sizeof) != 0;", "-\t\t\tOS.HeapFree (hHeap, 0, pInputs);", "-\t\t\treturn result;", "-\t\t}", "-\t\tcase SWT.MouseDown:", "-\t\tcase SWT.MouseMove:", "-\t\tcase SWT.MouseUp:", "-\t\tcase SWT.MouseWheel: {", "-\t\t\tMOUSEINPUT inputs = new MOUSEINPUT ();", "-\t\t\tif (type == SWT.MouseMove){", "-\t\t\t\tinputs.dwFlags = OS.MOUSEEVENTF_MOVE | OS.MOUSEEVENTF_ABSOLUTE;", "-\t\t\t\tint x= 0, y = 0, width = 0, height = 0;", "-\t\t\t\tif (OS.WIN32_VERSION >= OS.VERSION (5, 0)) {", "-\t\t\t\t\tinputs.dwFlags |= OS.MOUSEEVENTF_VIRTUALDESK;", "-\t\t\t\t\tx = OS.GetSystemMetrics (OS.SM_XVIRTUALSCREEN);", "-\t\t\t\t\ty = OS.GetSystemMetrics (OS.SM_YVIRTUALSCREEN);\t", "-\t\t\t\t\twidth = OS.GetSystemMetrics (OS.SM_CXVIRTUALSCREEN);", "-\t\t\t\t\theight = OS.GetSystemMetrics (OS.SM_CYVIRTUALSCREEN);", "-\t\t\t\t} else {", "-\t\t\t\t\twidth = OS.GetSystemMetrics (OS.SM_CXSCREEN);", "-\t\t\t\t\theight = OS.GetSystemMetrics (OS.SM_CYSCREEN);", "-\t\t\t\t}", "-\t\t\t\tinputs.dx = ((event.x - x) * 65535 + width - 2) / (width - 1);", "-\t\t\t\tinputs.dy = ((event.y - y) * 65535 + height - 2) / (height - 1);", "-\t\t\t} else {", "-\t\t\t\tif (type == SWT.MouseWheel) {", "-\t\t\t\t\tif (OS.WIN32_VERSION < OS.VERSION (5, 0)) return false;", "-\t\t\t\t\tinputs.dwFlags = OS.MOUSEEVENTF_WHEEL;", "-\t\t\t\t\tswitch (event.detail) {", "-\t\t\t\t\t\tcase SWT.SCROLL_PAGE:", "-\t\t\t\t\t\t\tinputs.mouseData = event.count * OS.WHEEL_DELTA;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase SWT.SCROLL_LINE:", "-\t\t\t\t\t\t\tint [] value = new int [1];", "-\t\t\t\t\t\t\tOS.SystemParametersInfo (OS.SPI_GETWHEELSCROLLLINES, 0, value, 0);", "-\t\t\t\t\t\t\tinputs.mouseData = event.count * OS.WHEEL_DELTA / value [0];", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault: return false;", "+\t\t\tcase SWT.MouseDown:", "+\t\t\tcase SWT.MouseMove:", "+\t\t\tcase SWT.MouseUp:", "+\t\t\tcase SWT.MouseWheel: {", "+\t\t\t\tMOUSEINPUT inputs = new MOUSEINPUT ();", "+\t\t\t\tif (type == SWT.MouseMove){", "+\t\t\t\t\tinputs.dwFlags = OS.MOUSEEVENTF_MOVE | OS.MOUSEEVENTF_ABSOLUTE;", "+\t\t\t\t\tint x= 0, y = 0, width = 0, height = 0;", "+\t\t\t\t\tif (OS.WIN32_VERSION >= OS.VERSION (5, 0)) {", "+\t\t\t\t\t\tinputs.dwFlags |= OS.MOUSEEVENTF_VIRTUALDESK;", "+\t\t\t\t\t\tx = OS.GetSystemMetrics (OS.SM_XVIRTUALSCREEN);", "+\t\t\t\t\t\ty = OS.GetSystemMetrics (OS.SM_YVIRTUALSCREEN);\t", "+\t\t\t\t\t\twidth = OS.GetSystemMetrics (OS.SM_CXVIRTUALSCREEN);", "+\t\t\t\t\t\theight = OS.GetSystemMetrics (OS.SM_CYVIRTUALSCREEN);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\twidth = OS.GetSystemMetrics (OS.SM_CXSCREEN);", "+\t\t\t\t\t\theight = OS.GetSystemMetrics (OS.SM_CYSCREEN);", "+\t\t\t\t\tinputs.dx = ((event.x - x) * 65535 + width - 2) / (width - 1);", "+\t\t\t\t\tinputs.dy = ((event.y - y) * 65535 + height - 2) / (height - 1);", "-\t\t\t\t\tswitch (event.button) {", "-\t\t\t\t\t\tcase 1: inputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_LEFTDOWN : OS.MOUSEEVENTF_LEFTUP; break;", "-\t\t\t\t\t\tcase 2: inputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_MIDDLEDOWN : OS.MOUSEEVENTF_MIDDLEUP; break;", "-\t\t\t\t\t\tcase 3: inputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_RIGHTDOWN : OS.MOUSEEVENTF_RIGHTUP; break;", "-\t\t\t\t\t\tcase 4: {", "-\t\t\t\t\t\t\tif (OS.WIN32_VERSION < OS.VERSION (5, 0)) return false;", "-\t\t\t\t\t\t\tinputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_XDOWN : OS.MOUSEEVENTF_XUP;", "-\t\t\t\t\t\t\tinputs.mouseData = OS.XBUTTON1;", "-\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\tif (type == SWT.MouseWheel) {", "+\t\t\t\t\t\tif (OS.WIN32_VERSION < OS.VERSION (5, 0)) return false;", "+\t\t\t\t\t\tinputs.dwFlags = OS.MOUSEEVENTF_WHEEL;", "+\t\t\t\t\t\tswitch (event.detail) {", "+\t\t\t\t\t\t\tcase SWT.SCROLL_PAGE:", "+\t\t\t\t\t\t\t\tinputs.mouseData = event.count * OS.WHEEL_DELTA;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase SWT.SCROLL_LINE:", "+\t\t\t\t\t\t\t\tint [] value = new int [1];", "+\t\t\t\t\t\t\t\tOS.SystemParametersInfo (OS.SPI_GETWHEELSCROLLLINES, 0, value, 0);", "+\t\t\t\t\t\t\t\tinputs.mouseData = event.count * OS.WHEEL_DELTA / value [0];", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault: return false;", "-\t\t\t\t\t\tcase 5: {", "-\t\t\t\t\t\t\tif (OS.WIN32_VERSION < OS.VERSION (5, 0)) return false;", "-\t\t\t\t\t\t\tinputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_XDOWN : OS.MOUSEEVENTF_XUP;", "-\t\t\t\t\t\t\tinputs.mouseData = OS.XBUTTON2;", "-\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tswitch (event.button) {", "+\t\t\t\t\t\t\tcase 1: inputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_LEFTDOWN : OS.MOUSEEVENTF_LEFTUP; break;", "+\t\t\t\t\t\t\tcase 2: inputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_MIDDLEDOWN : OS.MOUSEEVENTF_MIDDLEUP; break;", "+\t\t\t\t\t\t\tcase 3: inputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_RIGHTDOWN : OS.MOUSEEVENTF_RIGHTUP; break;", "+\t\t\t\t\t\t\tcase 4: {", "+\t\t\t\t\t\t\t\tif (OS.WIN32_VERSION < OS.VERSION (5, 0)) return false;", "+\t\t\t\t\t\t\t\tinputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_XDOWN : OS.MOUSEEVENTF_XUP;", "+\t\t\t\t\t\t\t\tinputs.mouseData = OS.XBUTTON1;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tcase 5: {", "+\t\t\t\t\t\t\t\tif (OS.WIN32_VERSION < OS.VERSION (5, 0)) return false;", "+\t\t\t\t\t\t\t\tinputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_XDOWN : OS.MOUSEEVENTF_XUP;", "+\t\t\t\t\t\t\t\tinputs.mouseData = OS.XBUTTON2;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tdefault: return false;", "-\t\t\t\t\t\tdefault: return false;", "+\t\t\t\tint /*long*/ hHeap = OS.GetProcessHeap ();", "+\t\t\t\tint /*long*/ pInputs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, INPUT.sizeof);", "+\t\t\t\tOS.MoveMemory(pInputs, new int[] {OS.INPUT_MOUSE}, 4);", "+\t\t\t\t//TODO - DWORD type of INPUT structure aligned to 8 bytes on 64 bit", "+\t\t\t\tOS.MoveMemory (pInputs + OS.PTR_SIZEOF, inputs, MOUSEINPUT.sizeof);", "+\t\t\t\tboolean result = OS.SendInput (1, pInputs, INPUT.sizeof) != 0;", "+\t\t\t\tOS.HeapFree (hHeap, 0, pInputs);", "+\t\t\t\treturn result;", "-\t\t\tint /*long*/ hHeap = OS.GetProcessHeap ();", "-\t\t\tint /*long*/ pInputs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, INPUT.sizeof);", "-\t\t\tOS.MoveMemory(pInputs, new int[] {OS.INPUT_MOUSE}, 4);", "-\t\t\t//TODO - DWORD type of INPUT structure aligned to 8 bytes on 64 bit", "-\t\t\tOS.MoveMemory (pInputs + OS.PTR_SIZEOF, inputs, MOUSEINPUT.sizeof);", "-\t\t\tboolean result = OS.SendInput (1, pInputs, INPUT.sizeof) != 0;", "-\t\t\tOS.HeapFree (hHeap, 0, pInputs);", "-\t\t\treturn result;", "-\t\t}", "-\t} ", "-\treturn false;", "+\t\t} ", "+\t\treturn false;", "+\t}"]}], "num": 12217}
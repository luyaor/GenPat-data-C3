{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aea9ee0f427f64cdf67d3478184c86dd", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c0483265944b19e26649d46559778ed8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "18a77004921c958d7933e6a4bf2f9879ef0cfdc3", "commitAfterChange": "235449f60e73b051bff45b523d24758455cf4aa9", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static String [] getExtensions ()", "signatureAfterChange": " public static String [] getExtensions ()", "diff": ["-\treturn new String [] {", "-\t\t// From System-Declared Uniform Type Identifiers", "-\t\t\".txt\",", "-\t\t\".rtf\",", "-\t\t\".html\",", "-\t\t\".htm\",", "-\t\t\".xml\",", "-\t\t\".c\",", "-\t\t\".m\",", "-\t\t\".cp\", \".cpp\", \".c++\", \".cc\", \".cxx\",", "-\t\t\".mm\",", "-\t\t\".h\",", "-\t\t\".hpp\",", "-\t\t\".h++\",", "-\t\t\".hxx\",", "-\t\t\".java\",", "-\t\t\".jav\",", "-\t\t\".s\",", "-\t\t\".r\",", "-\t\t\".defs\",", "-\t\t\".mig\",", "-\t\t\".exp\",", "-\t\t\".js\",", "-\t\t\".jscript\",", "-\t\t\".javascript\",", "-\t\t\".sh\",", "-\t\t\".command\",", "-\t\t\".csh\",", "-\t\t\".pl\",", "-\t\t\".pm\",", "-\t\t\".py\",", "-\t\t\".rb\",", "-\t\t\".rbw\",", "-\t\t\".php\",", "-\t\t\".php3\",", "-\t\t\".php4\",", "-\t\t\".ph3\",", "-\t\t\".ph4\",", "-\t\t\".phtml\",", "-\t\t\".jnlp\",", "-\t\t\".applescript\",", "-\t\t\".scpt\",", "-\t\t\".o\",", "-\t\t\".exe\",", "-\t\t\".dll\",", "-\t\t\".class\",", "-\t\t\".jar\",", "-\t\t\".qtz\",", "-\t\t\".gtar\",", "-\t\t\".tar\",", "-\t\t\".gz\",", "-\t\t\".gzip\",", "-\t\t\".tgz\",", "-\t\t\".hqx\",", "-\t\t\".bin\",", "-\t\t\".vcf\",", "-\t\t\".vcard\",", "-\t\t\".jpg\",", "-\t\t\".jpeg\",", "-\t\t\".jp2\",", "-\t\t\".tif\",", "-\t\t\".tiff\",", "-\t\t\".pic\",", "-\t\t\".pct\",", "-\t\t\".pict\",", "-\t\t\".pntg\",", "-\t\t\".png\",", "-\t\t\".xbm\",", "-\t\t\".qif\",", "-\t\t\".qtif\",", "-\t\t\".icns\",", "-\t\t\".mov\",", "-\t\t\".qt\",", "-\t\t\".avi\",", "-\t\t\".vfw\",", "-\t\t\".mpg\",", "-\t\t\".mpeg\",", "-\t\t\".m75\",", "-\t\t\".m15\",", "-\t\t\".mp4\",", "-\t\t\".3gp\",", "-\t\t\".3gpp\",", "-\t\t\".3g2\",", "-\t\t\".3gp2\",", "-\t\t\".mp3\",", "-\t\t\".m4a\",", "-\t\t\".m4p\",", "-\t\t\".m4b\",", "-\t\t\".au\",", "-\t\t\".ulw\",", "-\t\t\".snd\",", "-\t\t\".aifc\",", "-\t\t\".aiff\",", "-\t\t\".aif\",", "-\t\t\".caf\",", "-\t\t\".bundle\",", "-\t\t\".app\",", "-\t\t\".plugin\",", "-\t\t\".mdimporter\",", "-\t\t\".wdgt\",", "-\t\t\".cpio\",", "-\t\t\".zip\",", "-\t\t\".framework\",", "-\t\t\".rtfd\",", "-\t\t\".dfont\",", "-\t\t\".otf\",", "-\t\t\".ttf\",", "-\t\t\".ttc\",", "-\t\t\".suit\",", "-\t\t\".pfb\",", "-\t\t\".pfa\",", "-\t\t\".icc\",", "-\t\t\".icm\",", "-\t\t\".pf\",", "-\t\t\".pdf\",", "-\t\t\".ps\",", "-\t\t\".eps\",", "-\t\t\".psd\",", "-\t\t\".ai\",", "-\t\t\".gif\",", "-\t\t\".bmp\",", "-\t\t\".ico\",", "-\t\t\".doc\",", "-\t\t\".xls\",", "-\t\t\".ppt\",", "-\t\t\".wav\",", "-\t\t\".wave\",", "-\t\t\".asf\",", "-\t\t\".wm\",", "-\t\t\".wmv\",", "-\t\t\".wmp\",", "-\t\t\".wma\",", "-\t\t\".asx\",", "-\t\t\".wmx\",", "-\t\t\".wvx\",", "-\t\t\".wax\",", "-\t\t\".key\",", "-\t\t\".kth\",", "-\t\t\".tga\",", "-\t\t\".sgi\",", "-\t\t\".exr\",", "-\t\t\".fpx\",", "-\t\t\".jfx\",", "-\t\t\".efx\",", "-\t\t\".sd2\",", "-\t\t\".rm\",", "-\t\t\".ram\",", "-\t\t\".ra\",", "-\t\t\".smil\",", "-\t\t\".sit\",", "-\t\t\".sitx\",", "-\t\t// Others", "-\t\t\".plist\",", "-\t\t\".nib\",", "-\t\t\".lproj\",", "-\t\t// iChat", "-\t\t\".iPhoto\",", "-\t\t// iChat", "-\t\t\".iChat\",", "-\t\t\".chat\",", "-\t\t// acrobat reader", "-\t\t\".rmf\",", "-\t\t\".xfdf\",", "-\t\t\".fdf\",", "-\t\t// Chess", "-\t\t\".game\",", "-\t\t\".pgn\",", "-\t\t// iCal", "-\t\t\".ics\",", "-\t\t\".vcs\",", "-\t\t\".aplmodel\",", "-\t\t\".icbu\",", "-\t\t\".icalevent\",", "-\t\t\".icaltodo\",", "-\t\t// Mail", "-\t\t\".mailhold\",", "-\t\t\".mbox\",", "-\t\t\".imapmbox\",", "-\t\t\".emlx\",", "-\t\t\".mailextract\",", "-\t\t// Sherlock", "-\t\t\".sherlock\",", "-\t\t// Stickies", "-\t\t\".tpl\",", "-\t\t// System Preferences", "-\t\t\".prefPane\",", "-\t\t\".sliderSaver\",", "-\t\t\".saver\",", "-\t\t// Console", "-\t\t\".log\",", "-\t\t// Grapher", "-\t\t\".gcx\",", "-\t};", "+\tNSMutableSet supportedDocumentTypes = (NSMutableSet)NSMutableSet.set();", "+\tNSWorkspace workspace = NSWorkspace.sharedWorkspace();", "+\tNSString CFBundleDocumentTypes = NSString.stringWith(\"CFBundleDocumentTypes\");", "+\tNSString CFBundleTypeExtensions = NSString.stringWith(\"CFBundleTypeExtensions\");", "+\tNSArray array = new NSArray(OS.NSSearchPathForDirectoriesInDomains(OS.NSAllApplicationsDirectory, OS.NSAllDomainsMask, true));", "+\tint count = array.count();", "+\tfor (int i = 0; i < count; i++) {", "+\t\tNSString path = new NSString(array.objectAtIndex(i));", "+\t\tNSFileManager fileManager = NSFileManager.defaultManager();", "+\t\tNSDirectoryEnumerator enumerator = fileManager.enumeratorAtPath(path);", "+\t\tif (enumerator != null) {", "+\t\t\tid id;", "+\t\t\twhile ((id = enumerator.nextObject()) != null) {", "+\t\t\t\tenumerator.skipDescendents();", "+\t\t\t\tNSString filePath = new NSString(id.id);", "+\t\t\t\tNSString fullPath = path.stringByAppendingPathComponent(filePath);", "+\t\t\t\tif (workspace.isFilePackageAtPath(fullPath)) {", "+\t\t\t\t\tNSBundle bundle = NSBundle.bundleWithPath(fullPath);", "+\t\t\t\t\tid = bundle.infoDictionary().objectForKey(CFBundleDocumentTypes);", "+\t\t\t\t\tif (id != null) {", "+\t\t\t\t\t\tNSDictionary documentTypes = new NSDictionary(id.id);", "+\t\t\t\t\t\tNSEnumerator documentTypesEnumerator = documentTypes.objectEnumerator();", "+\t\t\t\t\t\twhile ((id = documentTypesEnumerator.nextObject()) != null) {", "+\t\t\t\t\t\t\tNSDictionary documentType = new NSDictionary(id.id);", "+\t\t\t\t\t\t\tid = documentType.objectForKey(CFBundleTypeExtensions);", "+\t\t\t\t\t\t\tif (id != null) {", "+\t\t\t\t\t\t\t\tsupportedDocumentTypes.addObjectsFromArray(new NSArray(id.id));", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t}", "+\tint i = 0;", "+\tString[] exts = new String[supportedDocumentTypes.count()];", "+\tNSEnumerator enumerator = supportedDocumentTypes.objectEnumerator();", "+\tid id;", "+\twhile ((id = enumerator.nextObject()) != null) {", "+\t\tString ext = new NSString(id.id).getString();", "+\t\tif (!ext.equals(\"*\")) exts[i++] = \".\" + ext;", "+\t}", "+\tif (i != exts.length) {", "+\t\tString[] temp = new String[i];", "+\t\tSystem.arraycopy(exts, 0, temp, 0, i);", "+\t\texts = temp;", "+\t}", "+\treturn exts;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e09e9aad3838b363f223067069dec31f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/carbon/org/eclipse/swt/program/Program.java", "commitBeforeChange": "e69ccdf91eaf47c7d23ca34831636ebd90362b25", "commitAfterChange": "7796d3ee90efb3692b32bd7c53083adde87b6e72", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static String [] getExtensions ()", "signatureAfterChange": " public static String [] getExtensions ()", "diff": ["-\treturn new String [] {", "-\t\t// From System-Declared Uniform Type Identifiers", "-\t\t\".txt\",", "-\t\t\".rtf\",", "-\t\t\".html\",", "-\t\t\".htm\",", "-\t\t\".xml\",", "-\t\t\".c\",", "-\t\t\".m\",", "-\t\t\".cp\", \".cpp\", \".c++\", \".cc\", \".cxx\",", "-\t\t\".mm\",", "-\t\t\".h\",", "-\t\t\".hpp\",", "-\t\t\".h++\",", "-\t\t\".hxx\",", "-\t\t\".java\",", "-\t\t\".jav\",", "-\t\t\".s\",", "-\t\t\".r\",", "-\t\t\".defs\",", "-\t\t\".mig\",", "-\t\t\".exp\",", "-\t\t\".js\",", "-\t\t\".jscript\",", "-\t\t\".javascript\",", "-\t\t\".sh\",", "-\t\t\".command\",", "-\t\t\".csh\",", "-\t\t\".pl\",", "-\t\t\".pm\",", "-\t\t\".py\",", "-\t\t\".rb\",", "-\t\t\".rbw\",", "-\t\t\".php\",", "-\t\t\".php3\",", "-\t\t\".php4\",", "-\t\t\".ph3\",", "-\t\t\".ph4\",", "-\t\t\".phtml\",", "-\t\t\".jnlp\",", "-\t\t\".applescript\",", "-\t\t\".scpt\",", "-\t\t\".o\",", "-\t\t\".exe\",", "-\t\t\".dll\",", "-\t\t\".class\",", "-\t\t\".jar\",", "-\t\t\".qtz\",", "-\t\t\".gtar\",", "-\t\t\".tar\",", "-\t\t\".gz\",", "-\t\t\".gzip\",", "-\t\t\".tgz\",", "-\t\t\".hqx\",", "-\t\t\".bin\",", "-\t\t\".vcf\",", "-\t\t\".vcard\",", "-\t\t\".jpg\",", "-\t\t\".jpeg\",", "-\t\t\".jp2\",", "-\t\t\".tif\",", "-\t\t\".tiff\",", "-\t\t\".pic\",", "-\t\t\".pct\",", "-\t\t\".pict\",", "-\t\t\".pntg\",", "-\t\t\".png\",", "-\t\t\".xbm\",", "-\t\t\".qif\",", "-\t\t\".qtif\",", "-\t\t\".icns\",", "-\t\t\".mov\",", "-\t\t\".qt\",", "-\t\t\".avi\",", "-\t\t\".vfw\",", "-\t\t\".mpg\",", "-\t\t\".mpeg\",", "-\t\t\".m75\",", "-\t\t\".m15\",", "-\t\t\".mp4\",", "-\t\t\".3gp\",", "-\t\t\".3gpp\",", "-\t\t\".3g2\",", "-\t\t\".3gp2\",", "-\t\t\".mp3\",", "-\t\t\".m4a\",", "-\t\t\".m4p\",", "-\t\t\".m4b\",", "-\t\t\".au\",", "-\t\t\".ulw\",", "-\t\t\".snd\",", "-\t\t\".aifc\",", "-\t\t\".aiff\",", "-\t\t\".aif\",", "-\t\t\".caf\",", "-\t\t\".bundle\",", "-\t\t\".app\",", "-\t\t\".plugin\",", "-\t\t\".mdimporter\",", "-\t\t\".wdgt\",", "-\t\t\".cpio\",", "-\t\t\".zip\",", "-\t\t\".framework\",", "-\t\t\".rtfd\",", "-\t\t\".dfont\",", "-\t\t\".otf\",", "-\t\t\".ttf\",", "-\t\t\".ttc\",", "-\t\t\".suit\",", "-\t\t\".pfb\",", "-\t\t\".pfa\",", "-\t\t\".icc\",", "-\t\t\".icm\",", "-\t\t\".pf\",", "-\t\t\".pdf\",", "-\t\t\".ps\",", "-\t\t\".eps\",", "-\t\t\".psd\",", "-\t\t\".ai\",", "-\t\t\".gif\",", "-\t\t\".bmp\",", "-\t\t\".ico\",", "-\t\t\".doc\",", "-\t\t\".xls\",", "-\t\t\".ppt\",", "-\t\t\".wav\",", "-\t\t\".wave\",", "-\t\t\".asf\",", "-\t\t\".wm\",", "-\t\t\".wmv\",", "-\t\t\".wmp\",", "-\t\t\".wma\",", "-\t\t\".asx\",", "-\t\t\".wmx\",", "-\t\t\".wvx\",", "-\t\t\".wax\",", "-\t\t\".key\",", "-\t\t\".kth\",", "-\t\t\".tga\",", "-\t\t\".sgi\",", "-\t\t\".exr\",", "-\t\t\".fpx\",", "-\t\t\".jfx\",", "-\t\t\".efx\",", "-\t\t\".sd2\",", "-\t\t\".rm\",", "-\t\t\".ram\",", "-\t\t\".ra\",", "-\t\t\".smil\",", "-\t\t\".sit\",", "-\t\t\".sitx\",", "-\t\t// Others", "-\t\t\".plist\",", "-\t\t\".nib\",", "-\t\t\".lproj\",", "-\t\t// iChat", "-\t\t\".iPhoto\",", "-\t\t// iChat", "-\t\t\".iChat\",", "-\t\t\".chat\",", "-\t\t// acrobat reader", "-\t\t\".rmf\",", "-\t\t\".xfdf\",", "-\t\t\".fdf\",", "-\t\t// Chess", "-\t\t\".game\",", "-\t\t\".pgn\",", "-\t\t// iCal", "-\t\t\".ics\",", "-\t\t\".vcs\",", "-\t\t\".aplmodel\",", "-\t\t\".icbu\",", "-\t\t\".icalevent\",", "-\t\t\".icaltodo\",", "-\t\t// Mail", "-\t\t\".mailhold\",", "-\t\t\".mbox\",", "-\t\t\".imapmbox\",", "-\t\t\".emlx\",", "-\t\t\".mailextract\",", "-\t\t// Sherlock", "-\t\t\".sherlock\",", "-\t\t// Stickies", "-\t\t\".tpl\",", "-\t\t// System Preferences", "-\t\t\".prefPane\",", "-\t\t\".sliderSaver\",", "-\t\t\".saver\",", "-\t\t// Console", "-\t\t\".log\",", "-\t\t// Grapher", "-\t\t\".gcx\",", "-\t};", "+\tfinal String CFBundleDocumentTypesStr = \"CFBundleDocumentTypes\";", "+\tchar [] chars = new char[CFBundleDocumentTypesStr.length()];", "+\tCFBundleDocumentTypesStr.getChars(0, chars.length, chars, 0);", "+\tint CFBundleDocumentTypes = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, chars.length);", "+\t", "+\tfinal String CFBundleTypeExtensionsStr = \"CFBundleTypeExtensions\";", "+\tchars = new char[CFBundleTypeExtensionsStr.length()];", "+\tCFBundleTypeExtensionsStr.getChars(0, chars.length, chars, 0);", "+\tint CFBundleTypeExtensions = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, chars.length);", "+\t", "+\tint folders = Cocoa.NSSearchPathForDirectoriesInDomains (Cocoa.NSAllApplicationsDirectory, Cocoa.NSAllDomainsMask, true);", "+\tint folderCount = OS.CFArrayGetCount(folders);", "+\tint supportedDocumentTypes = OS.CFSetCreateMutable(OS.kCFAllocatorDefault, 0, OS.kCFTypeSetCallBacks());\t", "+\tfor (int i = 0; i < folderCount; i++) {", "+\t\tint string = OS.CFArrayGetValueAtIndex(folders, i);", "+\t\tint folderUrl = OS.CFURLCreateWithFileSystemPath(OS.kCFAllocatorDefault, string, OS.kCFURLPOSIXPathStyle, true);", "+\t\tif (folderUrl != 0) {", "+\t\t\tint bundlesArray = OS.CFBundleCreateBundlesFromDirectory(OS.kCFAllocatorDefault, folderUrl, 0);", "+\t\t\tif (bundlesArray != 0) {", "+\t\t\t\tint bundleCount = OS.CFArrayGetCount(bundlesArray);", "+\t\t\t\tfor (int j = 0; j < bundleCount; j++) {", "+\t\t\t\t\tint bundleRef = OS.CFArrayGetValueAtIndex(bundlesArray, j);", "+\t\t\t\t\tif (bundleRef == 0) continue;", "+\t\t\t\t\tint documentTypes = OS.CFBundleGetValueForInfoDictionaryKey(bundleRef, CFBundleDocumentTypes);", "+\t\t\t\t\tif (documentTypes != 0) {", "+\t\t\t\t\t\tint count = OS.CFArrayGetCount(documentTypes);", "+\t\t\t\t\t\tfor (int k = 0; k < count; k++) {", "+\t\t\t\t\t\t\tint documentType = OS.CFArrayGetValueAtIndex(documentTypes, k);", "+\t\t\t\t\t\t\tif (documentType == 0) continue;", "+\t\t\t\t\t\t\tint[] value = new int[1];", "+\t\t\t\t\t\t\tif (OS.CFDictionaryGetValueIfPresent(documentType, CFBundleTypeExtensions, value)) {", "+\t\t\t\t\t\t\t\tif (value[0] != 0) {", "+\t\t\t\t\t\t\t\t\tint extCount = OS.CFArrayGetCount(value[0]);", "+\t\t\t\t\t\t\t\t\tfor (int x = 0; x < extCount; x++) {", "+\t\t\t\t\t\t\t\t\t\tint ext = OS.CFArrayGetValueAtIndex(value[0], x);", "+\t\t\t\t\t\t\t\t\t\tOS.CFSetAddValue(supportedDocumentTypes, ext);", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tOS.CFRelease(bundlesArray);", "+\t\t\t}", "+\t\t\tOS.CFRelease(folderUrl);", "+\t\t}", "+\t}", "+\tOS.CFRelease(CFBundleDocumentTypes);", "+\tOS.CFRelease(CFBundleTypeExtensions);", "+\t", "+\tint s = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, new char[]{'*'}, 1);", "+\tOS.CFSetRemoveValue(supportedDocumentTypes, s);", "+\tOS.CFRelease(s);", "+\t", "+\tint count = OS.CFSetGetCount(supportedDocumentTypes);", "+\tString[] extensions = new String[count];", "+\tint [] values = new int[count];", "+\tOS.CFSetGetValues(supportedDocumentTypes, values);", "+\tfor (int i = 0; i < count; i++) {", "+\t\tint ext = values[i];", "+\t\tint length = OS.CFStringGetLength(ext);", "+\t\tchar[] buffer = new char[length];", "+\t\tCFRange range = new CFRange();", "+\t\trange.length = length;", "+\t\tOS.CFStringGetCharacters(ext, range, buffer);", "+\t\textensions[i] = \".\" + new String(buffer);", "+\t}", "+\tOS.CFRelease(supportedDocumentTypes);", "+\treturn extensions;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e3a67c93a23bb92540fe3e731be0c5da", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/cocoa/org/eclipse/swt/program/Program.java", "commitBeforeChange": "74c0e792b346f85e2b9067f710416658485a9a3b", "commitAfterChange": "e188a1e4ca35b8a449353a5ac187e7a405693faf", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public static String [] getExtensions ()", "signatureAfterChange": " public static String [] getExtensions ()", "diff": ["-\tNSMutableSet supportedDocumentTypes = (NSMutableSet)NSMutableSet.set();", "-\tNSWorkspace workspace = NSWorkspace.sharedWorkspace();", "-\tNSString CFBundleDocumentTypes = NSString.stringWith(\"CFBundleDocumentTypes\");", "-\tNSString CFBundleTypeExtensions = NSString.stringWith(\"CFBundleTypeExtensions\");", "-\tNSArray array = new NSArray(OS.NSSearchPathForDirectoriesInDomains(OS.NSAllApplicationsDirectory, OS.NSAllDomainsMask, true));", "-\tint count = (int)/*64*/array.count();", "-\tfor (int i = 0; i < count; i++) {", "-\t\tNSString path = new NSString(array.objectAtIndex(i));", "-\t\tNSFileManager fileManager = NSFileManager.defaultManager();", "-\t\tNSDirectoryEnumerator enumerator = fileManager.enumeratorAtPath(path);", "-\t\tif (enumerator != null) {", "-\t\t\tid id;", "-\t\t\twhile ((id = enumerator.nextObject()) != null) {", "-\t\t\t\tenumerator.skipDescendents();", "-\t\t\t\tNSString filePath = new NSString(id.id);", "-\t\t\t\tNSString fullPath = path.stringByAppendingPathComponent(filePath);", "-\t\t\t\tif (workspace.isFilePackageAtPath(fullPath)) {", "-\t\t\t\t\tNSBundle bundle = NSBundle.bundleWithPath(fullPath);", "-\t\t\t\t\tid = bundle.infoDictionary().objectForKey(CFBundleDocumentTypes);", "-\t\t\t\t\tif (id != null) {", "-\t\t\t\t\t\tNSDictionary documentTypes = new NSDictionary(id.id);", "-\t\t\t\t\t\tNSEnumerator documentTypesEnumerator = documentTypes.objectEnumerator();", "-\t\t\t\t\t\twhile ((id = documentTypesEnumerator.nextObject()) != null) {", "-\t\t\t\t\t\t\tNSDictionary documentType = new NSDictionary(id.id);", "-\t\t\t\t\t\t\tid = documentType.objectForKey(CFBundleTypeExtensions);", "-\t\t\t\t\t\t\tif (id != null) {", "-\t\t\t\t\t\t\t\tsupportedDocumentTypes.addObjectsFromArray(new NSArray(id.id));", "+\tNSAutoreleasePool pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tNSMutableSet supportedDocumentTypes = (NSMutableSet)NSMutableSet.set();", "+\t\tNSWorkspace workspace = NSWorkspace.sharedWorkspace();", "+\t\tNSString CFBundleDocumentTypes = NSString.stringWith(\"CFBundleDocumentTypes\");", "+\t\tNSString CFBundleTypeExtensions = NSString.stringWith(\"CFBundleTypeExtensions\");", "+\t\tNSArray array = new NSArray(OS.NSSearchPathForDirectoriesInDomains(OS.NSAllApplicationsDirectory, OS.NSAllDomainsMask, true));", "+\t\tint count = (int)/*64*/array.count();", "+\t\tfor (int i = 0; i < count; i++) {", "+\t\t\tNSString path = new NSString(array.objectAtIndex(i));", "+\t\t\tNSFileManager fileManager = NSFileManager.defaultManager();", "+\t\t\tNSDirectoryEnumerator enumerator = fileManager.enumeratorAtPath(path);", "+\t\t\tif (enumerator != null) {", "+\t\t\t\tid id;", "+\t\t\t\twhile ((id = enumerator.nextObject()) != null) {", "+\t\t\t\t\tenumerator.skipDescendents();", "+\t\t\t\t\tNSString filePath = new NSString(id.id);", "+\t\t\t\t\tNSString fullPath = path.stringByAppendingPathComponent(filePath);", "+\t\t\t\t\tif (workspace.isFilePackageAtPath(fullPath)) {", "+\t\t\t\t\t\tNSBundle bundle = NSBundle.bundleWithPath(fullPath);", "+\t\t\t\t\t\tid = bundle.infoDictionary().objectForKey(CFBundleDocumentTypes);", "+\t\t\t\t\t\tif (id != null) {", "+\t\t\t\t\t\t\tNSDictionary documentTypes = new NSDictionary(id.id);", "+\t\t\t\t\t\t\tNSEnumerator documentTypesEnumerator = documentTypes.objectEnumerator();", "+\t\t\t\t\t\t\twhile ((id = documentTypesEnumerator.nextObject()) != null) {", "+\t\t\t\t\t\t\t\tNSDictionary documentType = new NSDictionary(id.id);", "+\t\t\t\t\t\t\t\tid = documentType.objectForKey(CFBundleTypeExtensions);", "+\t\t\t\t\t\t\t\tif (id != null) {", "+\t\t\t\t\t\t\t\t\tsupportedDocumentTypes.addObjectsFromArray(new NSArray(id.id));", "+\t\t\t\t\t\t\t\t}", "+\t\tint i = 0;", "+\t\tString[] exts = new String[(int)/*64*/supportedDocumentTypes.count()];", "+\t\tNSEnumerator enumerator = supportedDocumentTypes.objectEnumerator();", "+\t\tid id;", "+\t\twhile ((id = enumerator.nextObject()) != null) {", "+\t\t\tString ext = new NSString(id.id).getString();", "+\t\t\tif (!ext.equals(\"*\")) exts[i++] = \".\" + ext;", "+\t\t}", "+\t\tif (i != exts.length) {", "+\t\t\tString[] temp = new String[i];", "+\t\t\tSystem.arraycopy(exts, 0, temp, 0, i);", "+\t\t\texts = temp;", "+\t\t}", "+\t\treturn exts;", "+\t} finally {", "+\t\tpool.release();", "-\tint i = 0;", "-\tString[] exts = new String[(int)/*64*/supportedDocumentTypes.count()];", "-\tNSEnumerator enumerator = supportedDocumentTypes.objectEnumerator();", "-\tid id;", "-\twhile ((id = enumerator.nextObject()) != null) {", "-\t\tString ext = new NSString(id.id).getString();", "-\t\tif (!ext.equals(\"*\")) exts[i++] = \".\" + ext;", "-\t}", "-\tif (i != exts.length) {", "-\t\tString[] temp = new String[i];", "-\t\tSystem.arraycopy(exts, 0, temp, 0, i);", "-\t\texts = temp;", "-\t}", "-\treturn exts;"]}], "num": 1702}
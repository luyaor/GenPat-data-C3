{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2cfece5ca87b43027eba53a79abc53e1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "38c282d74203581443829c11ed487e8a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem2.java", "commitBeforeChange": "0bdde811530233a98417bfd51a03e863bcbbc1b6", "commitAfterChange": "6fe853b29d6dcedf69f8209e4b19fa3cf0a85a8b", "methodNumberBeforeChange": 53, "methodNumberAfterChange": 53, "signatureBeforeChange": " void paint (GC gc, TreeColumn column, boolean paintCellContent)", "signatureAfterChange": " void paint (GC gc, TreeColumn column, boolean paintCellContent)", "diff": ["-\tint y = parent.getItemY (this);", "-\tint padding = parent.getCellPadding ();", "-\tint itemHeight = parent.getItemHeight ();", "+\t/* if this cell is completely to the right of the client area then there's no need to paint it */", "+\tRectangle clientArea = parent.getClientArea ();", "+\tif (clientArea.x + clientArea.width < x) return;", "+", "+", "+\t/* if this cell is completely to the left of the client area then there's no need to paint it */", "+\tif (cellRightX < 0) return;", "+", "+\t/* restrict the clipping region to the full cell */", "+\tgc.setClipping (x, cellBounds.y, cellRightX - x, cellBounds.height);", "+\tint y = parent.getItemY (this);", "+\tint padding = parent.getCellPadding ();", "+\tint itemHeight = parent.getItemHeight ();", "+", "-\tif (background != null && !background.equals (parent.getBackground ())) {", "+\tColor background = getBackground (columnIndex);", "+\tif (background != parent.getBackground ()) {", "- ", "-\tRectangle oldClipping = gc.getClipping ();", "-\t\t", "+", "-\t\t/* while painting the cell's contents restrict the clipping region */", "-\t\tgc.setClipping (x, cellBounds.y, cellRightX - x, cellBounds.height);", "-", "-\t\t", "+", "-\t\t", "+", "-\t/* while painting the cell's contents restrict the clipping region */", "+\t/* while painting the cell's content restrict the clipping region */", "-\t\t\timageArea.x, imageArea.y,\t/* dest x, y */", "-\t\t\timageArea.width, imageArea.height);\t\t\t\t\t/* dest width, height */", "+\t\t\timageArea.x, imageArea.y,\t\t\t\t/* dest x, y */", "+\t\t\timageArea.width, imageArea.height);\t\t/* dest width, height */", "-\tif (text.length() > 0) {", "+\tif (text.length () > 0) {", "-\t\tif (font != null) {", "+\t\tFont font = getFont (columnIndex);", "+\t\tif (font != parent.getFont ()) {", "-\t\t\tif (foreground != null) {", "+\t\t\tColor foreground = getForeground (columnIndex);", "+\t\t\tif (foreground != parent.getForeground ()) {", "-\t\tgc.drawText (text, getTextX (columnIndex), y + (itemHeight - fontHeight) / 2, true);", "+\t\tgc.drawString (text, getTextX (columnIndex), y + (itemHeight - fontHeight) / 2, true);", "-\t", "-\t/* restore the original clipping */", "-\tgc.setClipping (oldClipping);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b88fe4fae4a9184539ba9febfc40715e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "3e191148ef45a3ccb2e199821e208067a679c1f3", "commitAfterChange": "1a4f56d795428ec7c06bef86ec797cfdd29fac5c", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void handleMouseEvent (OleEvent e)", "signatureAfterChange": "  void handleMouseEvent (OleEvent e)", "diff": ["-\tint[] rgdispid = event.getIDsOfNames(new String[]{ \"type\" }); //$NON-NLS-1$", "+\tint[] rgdispid = event.getIDsOfNames(new String[]{ PROPERTY_TYPE });", "-\tif (eventType.equals(\"mouseover\")) { //$NON-NLS-1$", "-\t\trgdispid = event.getIDsOfNames(new String[] { \"fromElement\" }); //$NON-NLS-1$", "+\tif (eventType.equals(EVENT_MOUSEOVER)) {", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_FROMELEMENT });", "-\tif (eventType.equals(\"mouseout\")) { //$NON-NLS-1$", "-\t\trgdispid = event.getIDsOfNames(new String[] { \"toElement\" }); //$NON-NLS-1$", "+\tif (eventType.equals(EVENT_MOUSEOUT)) {", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_TOELEMENT });", "-\trgdispid = event.getIDsOfNames(new String[] { \"clientX\" }); //$NON-NLS-1$", "+\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_CLIENTX });", "-\trgdispid = event.getIDsOfNames(new String[] { \"clientY\" }); //$NON-NLS-1$", "+\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_CLIENTY });", "-\trgdispid = event.getIDsOfNames(new String[] { \"ctrlKey\" }); //$NON-NLS-1$", "+\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_CTRLKEY });", "-\trgdispid = event.getIDsOfNames(new String[] { \"altKey\" }); //$NON-NLS-1$", "+\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_ALTKEY });", "-\trgdispid = event.getIDsOfNames(new String[] { \"shiftKey\" }); //$NON-NLS-1$", "+\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_SHIFTKEY });", "-\trgdispid = event.getIDsOfNames(new String[] { \"button\" }); //$NON-NLS-1$", "+\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_BUTTON });", "-\tif (eventType.equals(\"mousedown\")) { //$NON-NLS-1$", "+\tif (eventType.equals(EVENT_MOUSEDOWN)) {", "-\t} else if (eventType.equals(\"mouseup\") || eventType.equals(\"dragend\")) { //$NON-NLS-1$ //$NON-NLS-2$", "+\t} else if (eventType.equals(EVENT_MOUSEUP) || eventType.equals(EVENT_DRAGEND)) {", "-\t} else if (eventType.equals(\"mousewheel\")) { //$NON-NLS-1$", "+\t} else if (eventType.equals(EVENT_MOUSEWHEEL)) {", "-\t\trgdispid = event.getIDsOfNames(new String[] { \"wheelDelta\" }); //$NON-NLS-1$", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_WHEELDELTA });", "-\t} else if (eventType.equals(\"mousemove\")) { //$NON-NLS-1$", "+\t} else if (eventType.equals(EVENT_MOUSEMOVE)) {", "+\t\t/*", "+\t\t* Feature in IE.  Spurious and redundant mousemove events are often received.  The workaround", "+\t\t* is to not fire MouseMove events whose x and y values match the last MouseMove.  ", "+\t\t*/", "+\t\tif (newEvent.x == lastMouseMoveX && newEvent.y == lastMouseMoveY) return;", "-\t} else if (eventType.equals(\"mouseover\")) { //$NON-NLS-1$", "+\t\tlastMouseMoveX = newEvent.x; lastMouseMoveY = newEvent.y;", "+\t} else if (eventType.equals(EVENT_MOUSEOVER)) {", "-\t} else if (eventType.equals(\"mouseout\")) { //$NON-NLS-1$", "+\t} else if (eventType.equals(EVENT_MOUSEOUT)) {", "-\t} else if (eventType.equals(\"dragstart\")) { //$NON-NLS-1$", "+\t} else if (eventType.equals(EVENT_DRAGSTART)) {", "-\tif (eventType.equals(\"dblclick\")) { //$NON-NLS-1$", "+\tif (eventType.equals(EVENT_DOUBLECLICK)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1e37d26c733a95932412958e26bcd873", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/coolbar/org/eclipse/swt/widgets/CoolItem.java", "commitBeforeChange": "3e0fbc94829ccd56d23e0eb7edfd051721be3e19", "commitAfterChange": "e7b8e72222a611eea025379e495a9dde74bc3834", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "\r \r Image getArrowImage ()", "signatureAfterChange": "\r \r Image getArrowImage ()", "diff": ["-\t\r", "-\tif (arrowImage != null) return arrowImage;\r", "-\tint height = itemBounds.height - 10; //remove the border space\r", "-\tint width = CHEVRON_WIDTH - 7;\r", "-\t\r", "+\r", "+\tint height = Math.min (control.getSize ().y, itemBounds.height) - CHEVRON_VERTICAL_TRIM;\r", "+\tif (arrowImage != null) {\r", "+\t\tif (arrowImage.getBounds().height == height) {\r", "+\t\t\treturn arrowImage;\r", "+\t\t} else {\r", "+\t\t\tarrowImage.dispose();\r", "+\t\t\tarrowImage = null;\r", "+\t\t}\r", "+\t}\r", "+\tint width = CHEVRON_IMAGE_WIDTH; \r", "-\tColor foreground = control.getForeground ();\r", "+\tColor foreground = parent.getForeground ();\r", "-\tColor background = control.getBackground ();\r", "+\tColor background = parent.getBackground ();\r", "-\tint step = MARGIN_WIDTH / 2;\t\r", "+\tint step = 2;\t\r", "-\tstartX += 2;\r", "+\tstartX += 3;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d030048a2c032ffb45d758b6f3b098bd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/CoolItem.java", "commitBeforeChange": "af35bb868ce7a4db640d728af68bfb767fa4e09f", "commitAfterChange": "a1b6110a7c4d57ed7e255ff1bd265349917f369d", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public Point computeSize (int wHint, int hHint)", "signatureAfterChange": "\r public Point computeSize (int wHint, int hHint)", "diff": ["-\tint width = wHint, height = hHint;\r", "-\tif (wHint == SWT.DEFAULT) width = 32;\r", "-\tif (hHint == SWT.DEFAULT) height = 32;\r", "-\tRECT rect = new RECT ();\r", "-\tOS.SendMessage (hwnd, OS.RB_GETBANDBORDERS, index, rect);\r", "-\twidth += rect.left + rect.right;\r", "-\theight += rect.top + rect.bottom;\r", "-\tif (index == 0) {\r", "+\tPoint size;\r", "+\tif (control == null)  {\r", "+\t\tsize = new Point (0,0);\r", "+\t}\r", "+\telse {\r", "+\t\tsize = control.computeSize (wHint, hHint);\r", "+\t}\r", "+\tif (wHint != SWT.DEFAULT) size.x = wHint;\r", "+\tif (hHint != SWT.DEFAULT) size.y = hHint;\r", "+\tint height = Math.max (MINIMUM_CHILD_HEIGHT, size.y);\r", "+\tint width;\r", "+\tif (size.x == 0) {\r", "-\t\twidth = width - rbBand.cxHeader + 1;\r", "+\t\twidth = rbBand.cxHeader;\t\r", "+\t}\r", "+\telse {\r", "+\t\tRECT rect = new RECT ();\r", "+\t\tOS.SendMessage (hwnd, OS.RB_GETBANDBORDERS, index, rect);\r", "+\t\twidth = size.x + rect.left + rect.right;\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7072b688fdcefb1e1c7a84c743673675", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/CoolItem.java", "commitBeforeChange": "533b32a9baa75e76ca7b7877ee9b9581fe18792e", "commitAfterChange": "9fedd0db5879e16f4217a567123278513c1d3514", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\r public Point computeSize (int wHint, int hHint)", "signatureAfterChange": "\r public Point computeSize (int wHint, int hHint)", "diff": ["-\tcheckWidget();\r", "-\tif (preferredWidth > -1) return new Point(preferredWidth, preferredHeight);\r", "-\tint width = MINIMUM_WIDTH;\r", "-\tint height = DEFAULT_HEIGHT;\r", "-\tif (wHint != SWT.DEFAULT) width = wHint + MINIMUM_WIDTH + MARGIN_WIDTH; \r", "-\tif (hHint != SWT.DEFAULT) height = hHint + (2 + MARGIN_HEIGHT);\r", "+\tcheckWidget ();\r", "+\tPoint size;\r", "+\tif (control != null) {\r", "+\t\tsize = control.computeSize (wHint, hHint);\r", "+\t}\r", "+\telse {\r", "+\t\tsize = new Point (0,0);\t\r", "+\t}\r", "+\tif (wHint != SWT.DEFAULT) size.x = wHint;\r", "+\tif (hHint != SWT.DEFAULT) size.y = hHint;\r", "+\tint width = size.x + MINIMUM_WIDTH + MARGIN_WIDTH;\r", "+\tint height = Math.max (MINIMUM_CHILD_HEIGHT, size.y) + MARGIN_HEIGHT;\r"]}], "num": 2886}
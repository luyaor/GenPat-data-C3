{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "acb5ed19b053a999fcbc19f920ec91e9", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44b5212cc4db65d62402480f3a6cbd99", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "6930fdd35d9cdffd6d05c778fb4b82a2018d7fcb", "commitAfterChange": "4b4619a6b5b2cd61a37c980601ead9593d587b9d", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 95, "signatureBeforeChange": "  long windowProc (long hwnd, int msg, long wParam, long lParam)", "signatureAfterChange": "  long windowProc (long hwnd, int msg, long wParam, long lParam)", "diff": ["-\t\t\t\t\tprocessSegments = (hooks (SWT.Segments) || filters (SWT.Segments)) && !ignoreCharacter && OS.GetKeyState (OS.VK_CONTROL) >= 0 && OS.GetKeyState (OS.VK_MENU) >= 0;", "+\t\t\t\t\tprocessSegments = (hooks (SWT.Segments) || filters (SWT.Segments) || ((state & HAS_AUTO_DIRECTION) != 0)) && !ignoreCharacter && OS.GetKeyState (OS.VK_CONTROL) >= 0 && OS.GetKeyState (OS.VK_MENU) >= 0;", "-\t\t\t\t\tprocessSegments = wParam == OS.VK_DELETE && (hooks (SWT.Segments) || filters (SWT.Segments));", "+\t\t\t\t\tprocessSegments = wParam == OS.VK_DELETE && (hooks (SWT.Segments) || filters (SWT.Segments) || ((state & HAS_AUTO_DIRECTION) != 0));", "-\t\t\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments)) return 0;", "+\t\t\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments) || ((state & HAS_AUTO_DIRECTION) != 0)) return 0;", "-\t\t\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments)) return 0;", "+\t\t\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments) || ((state & HAS_AUTO_DIRECTION) != 0)) return 0;", "-\t\t\t\t\tprocessSegments = hooks (SWT.Segments) || filters (SWT.Segments);", "+\t\t\t\t\tprocessSegments = hooks (SWT.Segments) || filters (SWT.Segments) || ((state & HAS_AUTO_DIRECTION) != 0);", "-\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments)) {", "+\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments) || ((state & HAS_AUTO_DIRECTION) != 0)) {", "-\t\t\t\t\tsegments = null;", "-\t\t\t\t\tif (event != null) segments = event.segments;", "+\t\t\t\t\tsegments = event != null ? event.segments : null;", "+\t\t\t\t\tif (event.segmentsChars != null) {", "+\t\t\t\t\t\tif (event.segmentsChars[0] == RLE) {", "+\t\t\t\t\t\t\tsuper.updateTextDirection(SWT.RIGHT_TO_LEFT);", "+\t\t\t\t\t\t} else if (event.segmentsChars[0] == LRE) {", "+\t\t\t\t\t\t\tsuper.updateTextDirection(SWT.LEFT_TO_RIGHT);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\tbreak;", "-\t\t\tif (lParam != 0 && (hooks (SWT.Segments) || filters (SWT.Segments))) {", "+\t\t\tif (lParam != 0 && (hooks (SWT.Segments) || filters (SWT.Segments) || ((state & HAS_AUTO_DIRECTION) != 0))) {", "-\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments)) {", "+\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments) || ((state & HAS_AUTO_DIRECTION) != 0)) {", "-\t\t\t\t\tString [] newItems = new String [items.length - 1];", "-\t\t\t\t\tSystem.arraycopy (items, 0, newItems, 0, index);", "-\t\t\t\t\tSystem.arraycopy (items, index + 1, newItems, index, items.length - index - 1);", "-\t\t\t\t\titems = newItems;", "+\t\t\t\t\tif (items.length == 1) {", "+\t\t\t\t\t\titems = new String[0];", "+\t\t\t\t\t} else if (items.length > 1) {", "+\t\t\t\t\t\tString [] newItems = new String [items.length - 1];", "+\t\t\t\t\t\tSystem.arraycopy (items, 0, newItems, 0, index);", "+\t\t\t\t\t\tSystem.arraycopy (items, index + 1, newItems, index, items.length - index - 1);", "+\t\t\t\t\t\titems = newItems;", "+\t\t\t\t\t}", "-\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments)) {", "+\t\t\tif (hooks (SWT.Segments) || filters (SWT.Segments) || ((state & HAS_AUTO_DIRECTION) != 0)) {"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ab3ad258a0a5af131e68a3d6a6a5a19", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "c49c0b0ef4d445e010ed30c7d8ba3f6978c1390d", "commitAfterChange": "159be9a33b063e5e9bf59389af26ce714198cf06", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  int callPaintEventHandler (int control, int damageRgn, int visibleRgn, int theEvent, int nextHandler)", "signatureAfterChange": "  int callPaintEventHandler (int control, int damageRgn, int visibleRgn, int theEvent, int nextHandler)", "diff": ["-\tif (control == labelHandle && partCode != 0) {", "+\tif (control == labelHandle && (partCode != 0 || ((state & DISABLED) != 0 && OS.VERSION >= 0x1040))) {", "-\t\tinfo.state = OS.kThemeStatePressed;", "+\t\tif (partCode != 0) {", "+\t\t\tinfo.state = OS.kThemeStatePressed;", "+\t\t} else {", "+\t\t\tif (OS.IsControlActive (labelHandle)) {", "+\t\t\t\tinfo.state = (state & DISABLED) == 0 ? OS.kThemeStateActive : OS.kThemeStateUnavailable;", "+\t\t\t} else {", "+\t\t\t\tinfo.state = (state & DISABLED) == 0 ? OS.kThemeStateInactive : OS.kThemeStateUnavailableInactive;", "+\t\t\t}", "+\t\t}", "-\t\tint colorspace = OS.CGColorSpaceCreateDeviceRGB ();", "-\t\tOS.CGContextSetFillColorSpace (context [0], colorspace);", "-\t\tOS.CGColorSpaceRelease (colorspace);", "-\t\tOS.CGContextSetFillColor (context [0], parent.getForegroundColor ().handle);", "+\t\tif ((state & DISABLED) != 0 && OS.VERSION >= 0x1040) {", "+\t\t\tOS.HIThemeSetTextFill (OS.kThemeTextColorMenuItemDisabled, 0, context [0], OS.kHIThemeOrientationNormal);", "+\t\t} else {", "+\t\t\tint colorspace = OS.CGColorSpaceCreateDeviceRGB ();", "+\t\t\tOS.CGContextSetFillColorSpace (context [0], colorspace);", "+\t\t\tOS.CGColorSpaceRelease (colorspace);", "+\t\t\tOS.CGContextSetFillColor (context [0], parent.getForegroundColor ().handle);", "+\t\t}", "+\t\t\t\t} else if ((state & DISABLED) != 0) {", "+\t\t\t\t\tOS.HICreateTransformedCGImage (imageHandle, OS.kHITransformDisabled, buffer);", "+\t\t\t\t\timageHandle = buffer [0];"]}], "num": 40228}
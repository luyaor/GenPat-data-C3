{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fe0cbe1147731c47070861473ed23f23", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "850840dee616c8557c7d833f7afaa01b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "e64134ae3baf426ba8aa33bf3751db7cc6368387", "commitAfterChange": "64de8be21d4cc500c36cb666da2c84ecd5d1598a", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 5, "signatureBeforeChange": "  int callPaintEventHandler (int control, int damageRgn, int visibleRgn, int theEvent, int nextHandler)", "signatureAfterChange": " int callPaintEventHandler (int control, int damageRgn, int visibleRgn, int theEvent, int nextHandler)", "diff": ["+}", "+\tif ((style & SWT.ARROW) != 0 && OS.VERSION >= 0x1050) {", "+\t\tint [] context = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamCGContextRef, OS.typeCGContextRef, null, 4, null, context);", "+\t\tint state = display.grabControl == this ? OS.kThemeStateActive : OS.kThemeStateInactive;", "+\t\tCGRect rect = new CGRect ();", "+\t\tOS.HIViewGetBounds (handle, rect);", "+\t\tint orientation = OS.kThemeArrowRight;", "+\t\tif ((style & SWT.UP) != 0) orientation = OS.kThemeArrowUp;", "+\t\tif ((style & SWT.DOWN) != 0) orientation = OS.kThemeArrowDown;;", "+\t\tif ((style & SWT.LEFT) != 0) orientation = OS.kThemeArrowLeft;", "+\t\tHIThemePopupArrowDrawInfo info = new HIThemePopupArrowDrawInfo ();", "+\t\tinfo.state = state;", "+\t\tinfo.orientation = (short) orientation;", "+\t\tinfo.size = (short) OS.kThemeArrow9pt;", "+\t\tOS.HIThemeDrawPopupArrow (rect, info, context [0], OS.kHIThemeOrientationNormal);", "+\t\treturn OS.noErr;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7638495b8430f4427ff4babe651369cd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Cursor.java", "commitBeforeChange": "e7cf7b2b74c9415c134d931fb9d7de3de690fe26", "commitAfterChange": "687943d4f4e01ac5274875a4553b96720f0b4059", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public Cursor(Device device, int style)", "signatureAfterChange": " public Cursor(Device device, int style)", "diff": ["-\t\t\tcase SWT.CURSOR_WAIT: \t\t\thandle = NSCursor.arrowCursor(); break;", "+\t\t\tcase SWT.CURSOR_WAIT: \t\t\tbreak;", "-\t\thandle.retain();", "+\t\tif (handle == null && style == SWT.CURSOR_WAIT) {", "+\t\t\tNSImage nsImage = (NSImage)new NSImage().alloc();", "+\t\t\tNSBitmapImageRep nsImageRep = (NSBitmapImageRep)new NSBitmapImageRep().alloc();", "+\t\t\thandle = (NSCursor)new NSCursor().alloc();", "+\t\t\tint width = 16, height = 16;", "+\t\t\tNSSize size = new NSSize();", "+\t\t\tsize.width = width;", "+\t\t\tsize.height =  height;", "+\t\t\tnsImage = nsImage.initWithSize(size);", "+\t\t\tnsImageRep = nsImageRep.initWithBitmapDataPlanes(0, width, height, 8, 4, true, false, OS.NSDeviceRGBColorSpace, ", "+\t\t\t\t\tOS.NSAlphaFirstBitmapFormat | OS.NSAlphaNonpremultipliedBitmapFormat, width*4, 32);", "+\t\t\tOS.memmove(nsImageRep.bitmapData(), WAIT_SOURCE, WAIT_SOURCE.length);", "+\t\t\tnsImage.addRepresentation(nsImageRep);", "+\t\t\tNSPoint point = new NSPoint();", "+\t\t\tpoint.x = 0;", "+\t\t\tpoint.y = 0;", "+\t\t\thandle = handle.initWithImage(nsImage, point);", "+\t\t\tnsImageRep.release();", "+\t\t\tnsImage.release();", "+\t\t} else {", "+\t\t\thandle.retain();", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0df2783b4c943d0b42096673053b4f26", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": "  void drawWidget (int control, int damageRgn, int visibleRgn, int theEvent)", "signatureAfterChange": "  void drawWidget (int control, int context, int damageRgn, int visibleRgn, int theEvent)", "diff": ["-void drawWidget (int control, int damageRgn, int visibleRgn, int theEvent) {", "+void drawWidget (int control, int context, int damageRgn, int visibleRgn, int theEvent) {", "-\t\tRect rect = new Rect ();", "-\t\tOS.GetControlBounds (handle, rect);", "-\t\tif ((style & SWT.SEPARATOR) != 0 && this.control == null) {", "-\t\t\trect.top += 2;", "-\t\t\trect.bottom -= 2;", "-\t\t\tOS.DrawThemeSeparator (rect, state);", "-\t\t}", "-\t\tif ((style & SWT.DROP_DOWN) != 0) {", "-\t\t\tint height = rect.bottom - rect.top;", "-\t\t\trect.top = (short) (rect.bottom - (height / 2) - 1);", "-\t\t\trect.left = (short) (rect.right - ARROW_WIDTH);", "-\t\t\tOS.DrawThemePopupArrow (rect, (short) OS.kThemeArrowDown, (short) OS.kThemeArrow5pt, state, 0, 0);", "+\t\tif (OS.HIVIEW) {", "+\t\t\tCGRect rect = new CGRect ();", "+\t\t\tOS.HIViewGetBounds (handle, rect);", "+\t\t\tif ((style & SWT.SEPARATOR) != 0 && this.control == null) {", "+\t\t\t\trect.y += 2;", "+\t\t\t\trect.height -= 4;", "+\t\t\t\tHIThemeSeparatorDrawInfo info = new HIThemeSeparatorDrawInfo ();", "+\t\t\t\tinfo.state = state;", "+\t\t\t\tOS.HIThemeDrawSeparator (rect, info, context, OS.kHIThemeOrientationNormal);", "+\t\t\t}", "+\t\t\tif ((style & SWT.DROP_DOWN) != 0) {", "+\t\t\t\trect.y = rect.height / 2 - 1;", "+\t\t\t\trect.x = rect.width - ARROW_WIDTH;", "+\t\t\t\tHIThemePopupArrowDrawInfo info = new HIThemePopupArrowDrawInfo ();", "+\t\t\t\tinfo.state = state;", "+\t\t\t\tinfo.orientation = (short) OS.kThemeArrowDown;", "+\t\t\t\tinfo.size = (short) OS.kThemeArrow5pt;", "+\t\t\t\tOS.HIThemeDrawPopupArrow (rect, info, context, OS.kHIThemeOrientationNormal);", "+\t\t\t}\t\t\t", "+\t\t} else {", "+\t\t\tRect rect = new Rect ();", "+\t\t\tOS.GetControlBounds (handle, rect);", "+\t\t\tif ((style & SWT.SEPARATOR) != 0 && this.control == null) {", "+\t\t\t\trect.top += 2;", "+\t\t\t\trect.bottom -= 2;", "+\t\t\t\tOS.DrawThemeSeparator (rect, state);", "+\t\t\t}", "+\t\t\tif ((style & SWT.DROP_DOWN) != 0) {", "+\t\t\t\tint height = rect.bottom - rect.top;", "+\t\t\t\trect.top = (short) (rect.bottom - (height / 2) - 1);", "+\t\t\t\trect.left = (short) (rect.right - ARROW_WIDTH);", "+\t\t\t\tOS.DrawThemePopupArrow (rect, (short) OS.kThemeArrowDown, (short) OS.kThemeArrow5pt, state, 0, 0);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "23d003a601d7c9a322ac5cb7240760af", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/layout/GridLayout.java", "commitBeforeChange": "5f5d70af2a2b7b08f493fb21c45bc02a6deecc9c", "commitAfterChange": "b66e99f0077850b229d3c59791f0ef126c9c8660", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  Point layout (Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)", "signatureAfterChange": "  Point layout (Composite composite, boolean move, int x, int y, int width, int height, boolean flushCache)", "diff": ["+\t\tif (data.grabExcessHorizontalSpace && data.minimumWidth > 0) {", "+\t\t\tif (data.cacheWidth < data.minimumWidth) {", "+\t\t\t\tint trim = 0;", "+\t\t\t\tif (child instanceof Group) {", "+\t\t\t\t\tGroup g = (Group)child;", "+\t\t\t\t\ttrim = g.getSize ().x - g.getClientArea ().width;", "+\t\t\t\t} else if (child instanceof Scrollable) {", "+\t\t\t\t\tRectangle rect = ((Scrollable) child).computeTrim (0, 0, 0, 0);", "+\t\t\t\t\ttrim = rect.width;", "+\t\t\t\t} else {", "+\t\t\t\t\ttrim = child.getBorderWidth () * 2;", "+\t\t\t\t}", "+\t\t\t\tdata.cacheWidth = data.cacheHeight = SWT.DEFAULT;", "+\t\t\t\tdata.computeSize(child, Math.max (0, data.minimumWidth - trim), data.heightHint, false);", "+\t\t\t}", "+\t\t}", "+\t\tif (data.grabExcessVerticalSpace && data.minimumHeight > 0) {", "+\t\t\tdata.cacheHeight = Math.max(data.cacheHeight, data.minimumHeight);", "+\t\t}", "+\t\t\t\t\t\t\tif (data.grabExcessVerticalSpace && data.minimumHeight > 0) {", "+\t\t\t\t\t\t\t\tdata.cacheHeight = Math.max(data.cacheHeight, data.minimumHeight);", "+\t\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "780a0c19829767935a277201214a4651", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "839e7aae626325bcc120e28136132e007b50784e", "commitAfterChange": "d77e1468652c0bf6dd5b34c4530c6c4a4033fb64", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": " public void setImage (Image image)", "signatureAfterChange": " public void setImage (Image image)", "diff": ["-\tint hImage = 0, imageBits = 0, fImageType = 0;", "-\tif (image != null) {", "-\t\tif (image.isDisposed()) error(SWT.ERROR_INVALID_ARGUMENT);", "-\t\thImage = image.handle;", "-\t\tswitch (image.type) {", "-\t\t\tcase SWT.BITMAP:", "-\t\t\t\timageBits = OS.BS_BITMAP;", "-\t\t\t\tfImageType = OS.IMAGE_BITMAP;", "-\t\t\t\tbreak;", "-\t\t\tcase SWT.ICON:", "-\t\t\t\timageBits = OS.BS_ICON;", "-\t\t\t\tfImageType = OS.IMAGE_ICON;", "-\t\t\t\tbreak;", "-\t\t\tdefault:", "-\t\t\t\treturn;", "-\t\t}", "-\t}", "-\tint newBits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "-\tint oldBits = newBits;", "-\tnewBits &= ~(OS.BS_BITMAP | OS.BS_ICON);", "-\tnewBits |= imageBits;", "-\tif (newBits != oldBits) {", "-\t\tOS.SetWindowLong (handle, OS.GWL_STYLE, newBits);", "+\tif (OS.COMCTL32_MAJOR >= 6 && OS.IsAppThemed ()) {", "+\t\tOS.SendMessage (handle, OS.BCM_SETIMAGELIST, 0, 0);", "+\t\tif (imageList != null) imageList.dispose ();", "+\t\timageList = null;", "+\t\tif (image != null) {", "+\t\t\timageList = new ImageList ();", "+\t\t\timageList.add (image);", "+\t\t\tBUTTON_IMAGELIST buttonImageList = new BUTTON_IMAGELIST ();", "+\t\t\tbuttonImageList.himl = imageList.getHandle ();", "+\t\t\tif ((style & SWT.LEFT) != 0) buttonImageList.uAlign = OS.BUTTON_IMAGELIST_ALIGN_LEFT;", "+\t\t\tif ((style & SWT.CENTER) != 0) buttonImageList.uAlign = OS.BUTTON_IMAGELIST_ALIGN_CENTER;", "+\t\t\tif ((style & SWT.RIGHT) != 0) buttonImageList.uAlign = OS.BUTTON_IMAGELIST_ALIGN_RIGHT;", "+\t\t\tTCHAR buffer = new TCHAR (getCodePage (), \"\", true);", "+\t\t\tOS.SetWindowText (handle, buffer);", "+\t\t\tOS.SendMessage (handle, OS.BCM_SETIMAGELIST, 0, buttonImageList);", "+\t\t} else {", "+\t\t\tTCHAR buffer = new TCHAR (getCodePage (), text, true);", "+\t\t\tOS.SetWindowText (handle, buffer);", "+\t\t\tOS.SendMessage (handle, OS.BCM_SETIMAGELIST, 0, 0);", "+\t\t}", "+\t} else {", "+\t\tint hImage = 0, imageBits = 0, fImageType = 0;", "+\t\tif (image != null) {", "+\t\t\tif (image.isDisposed()) error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\t\thImage = image.handle;", "+\t\t\tswitch (image.type) {", "+\t\t\t\tcase SWT.BITMAP:", "+\t\t\t\t\timageBits = OS.BS_BITMAP;", "+\t\t\t\t\tfImageType = OS.IMAGE_BITMAP;", "+\t\t\t\t\tbreak;", "+\t\t\t\tcase SWT.ICON:", "+\t\t\t\t\timageBits = OS.BS_ICON;", "+\t\t\t\t\tfImageType = OS.IMAGE_ICON;", "+\t\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\tint newBits = OS.GetWindowLong (handle, OS.GWL_STYLE);", "+\t\tint oldBits = newBits;", "+\t\tnewBits &= ~(OS.BS_BITMAP | OS.BS_ICON);", "+\t\tnewBits |= imageBits;", "+\t\tif (newBits != oldBits) OS.SetWindowLong (handle, OS.GWL_STYLE, newBits);", "+\t\tOS.SendMessage (handle, OS.BM_SETIMAGE, fImageType, hImage);", "-\tOS.SendMessage (handle, OS.BM_SETIMAGE, fImageType, hImage);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24628a71d733ad5c7d2c9a0583cf79e1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 129, "methodNumberAfterChange": 131, "signatureBeforeChange": "  int setBounds (int control, int x, int y, int width, int height, boolean move, boolean resize, boolean events)", "signatureAfterChange": "  int setBounds (int control, int x, int y, int width, int height, boolean move, boolean resize, boolean events)", "diff": ["-\t/* Compute the old bounds */", "-\tRect oldBounds = new Rect ();", "-\tOS.GetControlBounds (control, oldBounds);", "-\tint [] theRoot = new int [1];", "-\tint window = OS.GetControlOwner (control);", "-\tOS.GetRootControl (window, theRoot);", "-\tint [] parentHandle = new int [1];", "-\tOS.GetSuperControl (control, parentHandle);", "-\tRect parentRect = new Rect ();", "-\tif (parentHandle [0] != theRoot [0]) {", "-\t\tOS.GetControlBounds (parentHandle [0], parentRect);", "-\t\tOS.OffsetRect (oldBounds, (short) -parentRect.left, (short) -parentRect.top);", "-\t}", "-\tRect inset = getInset ();", "-\toldBounds.left -= inset.left;", "-\toldBounds.top -= inset.top;", "-\toldBounds.right += inset.right;", "-\toldBounds.bottom += inset.bottom;", "+\tboolean sameOrigin = true, sameExtent = true;", "+\tif (OS.HIVIEW) {", "+\t\tCGRect oldBounds = new CGRect ();", "+\t\tOS.HIViewGetFrame (control, oldBounds);", "+\t\tRect inset = getInset ();", "+\t\toldBounds.x -= inset.left;", "+\t\toldBounds.y -= inset.top;", "+\t\toldBounds.width += inset.left + inset.right;", "+\t\toldBounds.height += inset.top + inset.bottom;", "+\t\tif (!move) {", "+\t\t\tx = (int) oldBounds.x;", "+\t\t\ty = (int) oldBounds.y;", "+\t\t}", "+\t\tif (!resize) {", "+\t\t\twidth = (int) oldBounds.width;", "+\t\t\theight = (int) oldBounds.height;", "+\t\t}", "+\t\tCGRect newBounds = new CGRect ();", "+\t\tnewBounds.x = x + inset.left;", "+\t\tnewBounds.y = y + inset.top;", "+\t\tnewBounds.width = width - inset.right - inset.left;", "+\t\tnewBounds.height = height - inset.bottom - inset.top;", "+\t\tsameOrigin = newBounds.x == oldBounds.x && newBounds.y == oldBounds.y;", "+\t\tsameExtent = newBounds.width == oldBounds.width && newBounds.height == oldBounds.height;", "+\t\tif (sameOrigin && sameExtent) return 0;", "+\t\tOS.HIViewSetFrame (control, newBounds);", "+\t\tinvalidateVisibleRegion (control);", "+\t} else {", "+\t\t/* Compute the old bounds */", "+\t\tRect oldBounds = new Rect ();", "+\t\tOS.GetControlBounds (control, oldBounds);", "+\t\tint [] theRoot = new int [1];", "+\t\tint window = OS.GetControlOwner (control);", "+\t\tOS.GetRootControl (window, theRoot);", "+\t\tint [] parentHandle = new int [1];", "+\t\tOS.GetSuperControl (control, parentHandle);", "+\t\tRect parentRect = new Rect ();", "+\t\tif (parentHandle [0] != theRoot [0]) {", "+\t\t\tOS.GetControlBounds (parentHandle [0], parentRect);", "+\t\t\tOS.OffsetRect (oldBounds, (short) -parentRect.left, (short) -parentRect.top);", "+\t\t}", "+\t\tRect inset = getInset ();", "+\t\toldBounds.left -= inset.left;", "+\t\toldBounds.top -= inset.top;", "+\t\toldBounds.right += inset.right;", "+\t\toldBounds.bottom += inset.bottom;", "+\t\t", "+\t\t/* Compute the new bounds */", "+\t\tif (!move) {", "+\t\t\tx = oldBounds.left;", "+\t\t\ty = oldBounds.top;", "+\t\t}", "+\t\tif (!resize) {", "+\t\t\twidth = oldBounds.right - oldBounds.left;", "+\t\t\theight = oldBounds.bottom - oldBounds.top;", "+\t\t}\t", "+\t\tRect newBounds = new Rect ();", "+\t\tnewBounds.left = (short) (parentRect.left + x + inset.left);", "+\t\tnewBounds.top = (short) (parentRect.top + y + inset.top);", "+\t\tnewBounds.right = (short) (newBounds.left + width - inset.right - inset.left);", "+\t\tnewBounds.bottom = (short) (newBounds.top + height - inset.bottom - inset.top);\t", "+\t\tif (newBounds.bottom < newBounds.top) newBounds.bottom = newBounds.top;", "+\t\tif (newBounds.right < newBounds.left) newBounds.right = newBounds.left;", "-\t/* Compute the new bounds */", "-\tif (!move) {", "-\t\tx = oldBounds.left;", "-\t\ty = oldBounds.top;", "-\t}", "-\tif (!resize) {", "-\t\twidth = oldBounds.right - oldBounds.left;", "-\t\theight = oldBounds.bottom - oldBounds.top;", "-\t}\t", "-\tRect newBounds = new Rect ();", "-\tnewBounds.left = (short) (parentRect.left + x + inset.left);", "-\tnewBounds.top = (short) (parentRect.top + y + inset.top);", "-\tnewBounds.right = (short) (newBounds.left + width - inset.right - inset.left);", "-\tnewBounds.bottom = (short) (newBounds.top + height - inset.bottom - inset.top);\t", "-\tif (newBounds.bottom < newBounds.top) newBounds.bottom = newBounds.top;", "-\tif (newBounds.right < newBounds.left) newBounds.right = newBounds.left;", "-", "-\t/* Get bounds again, since the one above is in SWT coordinates */", "-\tOS.GetControlBounds (control, oldBounds);", "+\t\t/* Get bounds again, since the one above is in SWT coordinates */", "+\t\tOS.GetControlBounds (control, oldBounds);", "+\t\t", "+\t\t/* Check if anything changed */", "+\t\tsameOrigin = newBounds.left == oldBounds.left && newBounds.top == oldBounds.top;", "+\t\tsameExtent = (newBounds.right - newBounds.left) == (oldBounds.right - oldBounds.left) && (newBounds.bottom - newBounds.top) == (oldBounds.bottom - oldBounds.top);", "+\t\tif (sameOrigin && sameExtent) return 0;", "-\t/* Check if anything changed */", "-\tboolean sameOrigin = newBounds.left == oldBounds.left && newBounds.top == oldBounds.top;", "-\tboolean sameExtent = (newBounds.right - newBounds.left) == (oldBounds.right - oldBounds.left) && (newBounds.bottom - newBounds.top) == (oldBounds.bottom - oldBounds.top);", "-\tif (sameOrigin && sameExtent) return 0;", "-", "-\t/* Apply changes and invalidate appropriate rectangles */", "-\tint tempRgn = 0;", "-\tboolean visible = OS.IsControlVisible (control);", "-\tif (visible) {", "-\t\ttempRgn = OS.NewRgn ();", "-\t\tOS.GetControlRegion (control, (short) OS.kControlStructureMetaPart, tempRgn);", "-\t\tinvalWindowRgn (window, tempRgn);", "-\t}", "-\tOS.SetControlBounds (control, newBounds);", "-\tinvalidateVisibleRegion (control);", "-\tif (visible) {", "-\t\tOS.GetControlRegion (control, (short) OS.kControlStructureMetaPart, tempRgn);", "-\t\tinvalWindowRgn (window, tempRgn);", "-\t\tOS.DisposeRgn(tempRgn);", "+\t\t/* Apply changes and invalidate appropriate rectangles */", "+\t\tint tempRgn = 0;", "+\t\tboolean visible = OS.IsControlVisible (control);", "+\t\tif (visible) {", "+\t\t\ttempRgn = OS.NewRgn ();", "+\t\t\tOS.GetControlRegion (control, (short) OS.kControlStructureMetaPart, tempRgn);", "+\t\t\tinvalWindowRgn (window, tempRgn);", "+\t\t}", "+\t\tOS.SetControlBounds (control, newBounds);", "+\t\tinvalidateVisibleRegion (control);", "+\t\tif (visible) {", "+\t\t\tOS.GetControlRegion (control, (short) OS.kControlStructureMetaPart, tempRgn);", "+\t\t\tinvalWindowRgn (window, tempRgn);", "+\t\t\tOS.DisposeRgn(tempRgn);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "724962a4caa89d4f8d02422816c8f9d3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/SashForm.java", "commitBeforeChange": "52e454d28131f1be4e3a39a7b162e4e4801aaf99", "commitAfterChange": "006ca8a67d2a140bcd3c14a581d92a63729fce5f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void onDragSash(Event event)", "signatureAfterChange": " void onDragSash(Event event)", "diff": ["-\t\tif (b1.width < DRAG_MINIMUM || b2.width < DRAG_MINIMUM) {", "-\t\t\tevent.x = b1.x + DRAG_MINIMUM;", "-\t\t\tevent.doit = false;", "-\t\t\treturn;", "+\t\tif (b1.width < DRAG_MINIMUM) {", "+\t\t\tb1.width = DRAG_MINIMUM;", "+\t\t\tb2.x = b1.x + b1.width + sashBounds.x;", "+\t\t\tb2.width = area.width - DRAG_MINIMUM - sashBounds.width;", "+\t\t\tevent.x = b1.x + b1.width;", "+\t\t}", "+\t\tif (b2.width < DRAG_MINIMUM) {", "+\t\t\tb1.width = area.width - DRAG_MINIMUM - sashBounds.width;", "+\t\t\tb2.x = b1.x + b1.width + sashBounds.x;", "+\t\t\tb2.width = DRAG_MINIMUM;", "+\t\t\tevent.x = b1.x + b1.width;", "-\t\tif (b1.height < DRAG_MINIMUM || b2.height < DRAG_MINIMUM) {", "-\t\t\tevent.y = b1.y + DRAG_MINIMUM;", "-\t\t\tevent.doit = false;", "-\t\t\treturn;", "+\t\tif (b1.height < DRAG_MINIMUM) {", "+\t\t\tb1.height = DRAG_MINIMUM;", "+\t\t\tb2.y = b1.y + b1.height + sashBounds.height;", "+\t\t\tb2.height = area.height - DRAG_MINIMUM - sashBounds.height;", "+\t\t\tevent.y = b1.y + b1.height;", "+\t\t}", "+\t\tif (b2.height < DRAG_MINIMUM) {", "+\t\t\tb1.height = area.height - DRAG_MINIMUM - sashBounds.height;", "+\t\t\tb2.y = b1.y + b1.height + sashBounds.y;", "+\t\t\tb2.height = DRAG_MINIMUM;", "+\t\t\tevent.y = b1.y + b1.height;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87eca0d2630f23bbf4d6f37f379831ef", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "725ee2b7303752eb1e64c93649e634d4cdd6219b", "commitAfterChange": "99e696b1437056772b1235cbd9b6dda7dc15b1cc", "methodNumberBeforeChange": 105, "methodNumberAfterChange": 105, "signatureBeforeChange": "  void showItem (TreeItem item, boolean scroll)", "signatureAfterChange": "  void showItem (TreeItem item, boolean scroll)", "diff": ["-\t\tint options = OS.kDataBrowserRevealWithoutSelecting | OS.kDataBrowserRevealAndCenterInView;", "+\t\tint options = OS.kDataBrowserRevealWithoutSelecting;", "+\t\t/*", "+\t\t* This code is intentionally commented, since kDataBrowserRevealAndCenterInView", "+\t\t* does not scroll the item to the center always (it seems to scroll to the", "+\t\t* end in some cases).", "+\t\t*/", "+\t\t//options |= OS.kDataBrowserRevealAndCenterInView;", "+\t\tint [] newTop = new int [1], newLeft = new int [1];", "+\t\tif (columnCount == 0) {", "+\t\t\tboolean fixScroll = false;", "+\t\t\tRect content = new Rect ();", "+\t\t\tif (OS.GetDataBrowserItemPartBounds (handle, item.id, columnId, OS.kDataBrowserPropertyContentPart, content) == OS.noErr) {", "+\t\t\t\tfixScroll = content.left < rect.x || content.left >= rect.x + rect.width;", "+\t\t\t\tif (!fixScroll) {", "+\t\t\t\t\tGC gc = new GC (this);", "+\t\t\t\t\tint contentWidth = calculateWidth (new int[]{item.id}, gc, false, 0, 0);", "+\t\t\t\t\tgc.dispose ();", "+\t\t\t\t\tfixScroll =  content.left + contentWidth > rect.x + rect.width;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (fixScroll) {", "+\t\t\t\tint leftScroll = getLeftDisclosureInset (columnId);", "+\t\t\t\tint levelIndent = DISCLOSURE_COLUMN_LEVEL_INDENT;", "+\t\t\t\tif (OS.VERSION >= 0x1040) {", "+\t\t\t\t\tfloat [] metric = new float [1];", "+\t\t\t\t\tOS.DataBrowserGetMetric (handle, OS.kDataBrowserMetricDisclosureColumnPerDepthGap, null, metric);", "+\t\t\t\t\tlevelIndent = (int) metric [0];", "+\t\t\t\t}", "+\t\t\t\tTreeItem temp = item;", "+\t\t\t\twhile (temp.parentItem != null) {", "+\t\t\t\t\tleftScroll += levelIndent;", "+\t\t\t\t\ttemp = temp.parentItem;", "+\t\t\t\t}", "+\t\t\t\tOS.GetDataBrowserScrollPosition (handle, newTop, newLeft);", "+\t\t\t\tOS.SetDataBrowserScrollPosition (handle, newTop [0], leftScroll);", "+\t\t\t}", "+\t\t}", "-\t\tint [] newTop = new int [1], newLeft = new int [1];"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28a4edc9840bcea8fe097d45b9fa6d60", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "2f862f00166fcf6199c86ef2db5918eea6feae6a", "commitAfterChange": "8619e947eac7fa56991129fea0c5b3d12c3121b0", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  public Rectangle computeTrim (int x, int y, int width, int height)", "signatureAfterChange": "  public Rectangle computeTrim (int x, int y, int width, int height)", "diff": ["-\t\tif ((style & SWT.BORDER) != 0) {", "-\t\t\tPoint thickness = getThickness (handle);", "-\t\t\txborder += thickness.x;", "-\t\t\tyborder += thickness.y;", "+\t\tif (OS.GTK3) {", "+\t\t\tGtkBorder tmp = new GtkBorder();", "+\t\t\tlong /*int*/ context = OS.gtk_widget_get_style_context (handle);", "+\t\t\tOS.gtk_style_context_get_padding (context, OS.GTK_STATE_FLAG_NORMAL, tmp);", "+\t\t\ttrim.x -= tmp.left;", "+\t\t\ttrim.y -= tmp.top;", "+\t\t\ttrim.width += tmp.left + tmp.right;", "+\t\t\ttrim.height += tmp.top + tmp.bottom;", "+\t\t\tif ((style & SWT.BORDER) != 0) {", "+\t\t\t\tOS.gtk_style_context_get_border (context, OS.GTK_STATE_FLAG_NORMAL, tmp);", "+\t\t\t\ttrim.x -= tmp.left;", "+\t\t\t\ttrim.y -= tmp.top;", "+\t\t\t\ttrim.width += tmp.left + tmp.right;", "+\t\t\t\ttrim.height += tmp.top + tmp.bottom;", "+\t\t\t}", "+\t\t\tGdkRectangle icon_area = new GdkRectangle();", "+\t\t\tOS.gtk_entry_get_icon_area(handle, OS.GTK_ENTRY_ICON_PRIMARY, icon_area);", "+\t\t\ttrim.x -= icon_area.width;", "+\t\t\ttrim.width += icon_area.width;", "+\t\t\tOS.gtk_entry_get_icon_area(handle, OS.GTK_ENTRY_ICON_SECONDARY, icon_area);", "+\t\t\ttrim.width += icon_area.width;", "+\t\t} else {", "+\t\t\tif ((style & SWT.BORDER) != 0) {", "+\t\t\t\tPoint thickness = getThickness (handle);", "+\t\t\t\txborder += thickness.x;", "+\t\t\t\tyborder += thickness.y;", "+\t\t\t}", "+\t\t\tGtkBorder innerBorder = Display.getEntryInnerBorder (handle);", "+\t\t\ttrim.x -= innerBorder.left;", "+\t\t\ttrim.y -= innerBorder.top;", "+\t\t\ttrim.width += innerBorder.left + innerBorder.right;", "+\t\t\ttrim.height += innerBorder.top + innerBorder.bottom;", "-\t\tGtkBorder innerBorder = Display.getEntryInnerBorder (handle);", "-\t\ttrim.x -= innerBorder.left;", "-\t\ttrim.y -= innerBorder.top;", "-\t\ttrim.width += innerBorder.left + innerBorder.right;", "-\t\ttrim.height += innerBorder.top + innerBorder.bottom;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4d2cda59012308ed3a9bc3c2cee829c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/TableCursor.java", "commitBeforeChange": "95a4750889ac9c2206710060effebd293c1da26a", "commitAfterChange": "8094c5620da45f5980d8d011643b26514020dd87", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  void tableMouseDown(Event event)", "signatureAfterChange": "  void tableMouseDown(Event event)", "diff": ["-\tRectangle clientRect = table.getClientArea();", "-\tint columnCount = table.getColumnCount();", "-\tint maxColumnIndex =  columnCount == 0 ? 0 : columnCount - 1;", "-\tint start = table.getTopIndex();", "-\tint end = table.getItemCount();", "-\tfor (int i = start; i < end; i++) {", "-\t\tTableItem item = table.getItem(i);", "-\t\tfor (int j = 0; j <= maxColumnIndex; j++) {", "-\t\t\tRectangle rect = item.getBounds(j);", "+\tint lineWidth = table.getLinesVisible() ? table.getGridLineWidth() : 0;", "+\tTableItem item = table.getItem(pt);", "+\tif ((table.getStyle() & SWT.FULL_SELECTION) != 0) {", "+\t\tif (item == null) return;", "+\t} else {", "+\t\tint start = item != null ? table.indexOf(item) : table.getTopIndex();", "+\t\tint end = table.getItemCount();", "+\t\tRectangle clientRect = table.getClientArea();", "+\t\tfor (int i = start; i < end; i++) {", "+\t\t\tTableItem nextItem = table.getItem(i);", "+\t\t\tRectangle rect = nextItem.getBounds(0);", "+\t\t\tif (pt.y >= rect.y && pt.y < rect.y + rect.height) {", "+\t\t\t\titem = nextItem;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\tif (item == null) return;", "+\t}", "+\tTableColumn newColumn = null;", "+\tint columnCount = table.getColumnCount();", "+\tif (columnCount > 0) {", "+\t\tfor (int i = 0; i < columnCount; i++) {", "+\t\t\tRectangle rect = item.getBounds(i);", "+\t\t\trect.width += lineWidth;", "-\t\t\t\tsetRowColumn(i, j, true);", "-\t\t\t\tsetFocus();", "-\t\t\t\treturn;", "+\t\t\t\tnewColumn = table.getColumn(i);", "+\t\t\t\tbreak;", "+\t\tif (newColumn == null) {", "+\t\t\tnewColumn = table.getColumn(0);", "+\t\t}", "+\tsetRowColumn(item, newColumn, true);", "+\tsetFocus();", "+\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ff3eefdfebd3d01610aad9a61cecfb9c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "a58eb4a81b4e5691bc9999463d2239075c5e64e3", "commitAfterChange": "5b29a12fc8f54a16ee9d51ff6a6787120cdba944", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  void createHandle ()", "signatureAfterChange": "  void createHandle ()", "diff": ["-\twidget.init();", "-\twidget.setTitle(NSString.string());", "-\t\twidget.setBoxType(OS.NSBoxSeparator);", "+\t\t/*", "+\t\t * Feature in Cocoa: Separator control decides how to orient itself", "+\t\t * based on the width and height. If height > width it orients", "+\t\t * vertically, else it orients horizontally. ", "+\t\t * Fix is to have two native controls to implement the separator label.", "+\t\t * The top control (Custom NSBox) honors the bounds set by the", "+\t\t * user and the inner one (Separator NSBox) creates the separator", "+\t\t * with the correct orientation.", "+\t\t */", "+\t\tNSRect rect = new NSRect();", "+\t\trect.width = DEFAULT_WIDTH;", "+\t\trect.height = DEFAULT_HEIGHT;", "+\t\t", "+\t\twidget.initWithFrame(rect);", "+\t\twidget.setTitle(NSString.string());", "+\t\twidget.setBorderType(OS.NSNoBorder);", "+\t\twidget.setBoxType (OS.NSBoxCustom);", "+\t\twidget.setContentViewMargins (new NSSize());", "+", "+\t\tfloat /*double*/ lineWidth = widget.borderWidth ();", "+\t\tif ((style & SWT.HORIZONTAL) != 0) {", "+\t\t\trect.height = (int)Math.ceil (lineWidth * 2);", "+\t\t\trect.y = (DEFAULT_HEIGHT / 2) - (rect.height / 2);", "+\t\t} else {", "+\t\t\trect.width = (int)Math.ceil (lineWidth * 2);", "+\t\t\trect.x = (DEFAULT_WIDTH / 2) - (rect.width / 2);", "+\t\t}", "+\t\t", "+\t\tNSBox separator = (NSBox) new SWTBox().alloc();", "+\t\tseparator.initWithFrame(rect);", "+\t\tseparator.setBoxType(OS.NSBoxSeparator);", "+\t\tif ((style & SWT.HORIZONTAL) != 0) {", "+\t\t\tseparator.setAutoresizingMask(OS.NSViewWidthSizable | OS.NSViewMinYMargin | OS.NSViewMaxYMargin);", "+\t\t} else {", "+\t\t\tseparator.setAutoresizingMask(OS.NSViewHeightSizable| OS.NSViewMinXMargin | OS.NSViewMaxXMargin);", "+\t\t}", "+\t\t", "-\t\twidget.setContentView(child);", "+\t\tseparator.setContentView(child);", "-\t} else {", "+\t\t", "+\t\twidget.addSubview(separator);", "+\t\tthis.separator = separator;", "+\t} else {\t", "+\t\twidget.init();", "+\t\twidget.setTitle(NSString.string());"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77ce6e606396ff2e11a66f99f32ea634", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Cursor.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " public Cursor (Device device, int style)", "signatureAfterChange": " public Cursor(Device device, int style)", "diff": ["-public Cursor (Device device, int style) {", "+public Cursor(Device device, int style) {", "-\t", "-\thandle = OS.kThemeArrowCursor;\t\t// the default cursor", "-\t", "-\tcase SWT.CURSOR_ARROW:", "-\t\thandle= OS.kThemeArrowCursor;", "-\t\tbreak;", "-\tcase SWT.CURSOR_WAIT:", "-\t\thandle= OS.kThemeSpinningCursor;", "-\t\tbreak;", "-\tcase SWT.CURSOR_APPSTARTING:", "-\t\thandle= OS.kThemeWatchCursor;", "-\t\tbreak;", "-\tcase SWT.CURSOR_HAND:", "-\t\thandle= OS.kThemeOpenHandCursor;", "-\t\tbreak;", "-\tcase SWT.CURSOR_CROSS:", "-\t\thandle= OS.kThemeCrossCursor;", "-\t\tbreak;", "-\tcase SWT.CURSOR_HELP: \t\t\t\tbreak;", "-\tcase SWT.CURSOR_SIZEALL: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZENESW: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZENS: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZENWSE: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZEWE: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZEN: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZES: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZEE: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZEW: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZENE: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZESE: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZESW: \t\t\tbreak;", "-\tcase SWT.CURSOR_SIZENW: \t\t\tbreak;", "-\tcase SWT.CURSOR_UPARROW: \t\t\tbreak;", "-\tcase SWT.CURSOR_IBEAM:", "-\t\thandle= OS.kThemeIBeamCursor;", "-\t\tbreak;", "-\tcase SWT.CURSOR_NO:", "-\t\tif (NO_CURSOR == 0) {", "-\t\t\tshort[] data= new short[16];", "-\t\t\tNO_CURSOR= OS.NewCursor((short) 0, (short)0, data, data);", "+\t\tcase SWT.CURSOR_HAND: \t\t\thandle = OS.kThemePointingHandCursor; break;", "+\t\tcase SWT.CURSOR_ARROW: \t\thandle = OS.kThemeArrowCursor; break;", "+\t\tcase SWT.CURSOR_WAIT: \t\t\thandle = OS.kThemeSpinningCursor; break;", "+\t\tcase SWT.CURSOR_CROSS: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_APPSTARTING: \thandle = OS.kThemeWatchCursor; break;", "+\t\tcase SWT.CURSOR_HELP: \t\t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_SIZEALL: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_SIZENESW: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_SIZENS: {", "+\t\t\torg.eclipse.swt.internal.carbon.Cursor cursor = new org.eclipse.swt.internal.carbon.Cursor();", "+\t\t\tcursor.data = SIZENS_SOURCE;", "+\t\t\tcursor.mask = SIZENS_MASK;", "+\t\t\tcursor.hotSpot_h = 7;", "+\t\t\tcursor.hotSpot_v = 7;", "+\t\t\thandle = OS.NewPtr(org.eclipse.swt.internal.carbon.Cursor.sizeof);", "+\t\t\tif (handle == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\tOS.memcpy(handle, cursor, org.eclipse.swt.internal.carbon.Cursor.sizeof);\t", "+\t \t\tbreak;", "-\t\thandle = NO_CURSOR;", "-\t\tbreak;", "-\tdefault:", "-\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);", "+\t\tcase SWT.CURSOR_SIZENWSE: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_SIZEWE: \t\thandle = OS.kThemeResizeLeftRightCursor; break;", "+\t\tcase SWT.CURSOR_SIZEN: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_SIZES: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_SIZEE: \t\thandle = OS.kThemeResizeRightCursor; break;", "+\t\tcase SWT.CURSOR_SIZEW: \t\thandle = OS.kThemeResizeLeftCursor; break;", "+\t\tcase SWT.CURSOR_SIZENE: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_SIZESE: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_SIZESW: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_SIZENW: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_UPARROW: \t\thandle = OS.kThemeCrossCursor; break;", "+\t\tcase SWT.CURSOR_IBEAM: \t\thandle = OS.kThemeIBeamCursor; break;", "+\t\tcase SWT.CURSOR_NO: \t\t\thandle = OS.kThemeNotAllowedCursor; break;", "+\t\tdefault:", "+\t\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0e5297c8566d8895660dff06938c2411", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "0279ac89ad933bec67322b956321e83b2a1ac93a", "commitAfterChange": "dbc3f579c8454ac59e01ac2d56752eda0d58b6cd", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  void drawImageWithFrameInView (int id, int sel, int image, NSRect rect, int view)", "signatureAfterChange": "  void drawImageWithFrameInView (int id, int sel, int image, NSRect rect, int view)", "diff": ["-\tcallSuper (id, sel, image, rect, view);", "+\tint /*long*/ cgContext = NSGraphicsContext.currentContext().graphicsPort();", "+\tNSCell cell = new NSCell(id);", "+\tboolean drawSelected = (parent.nsToolbar != null) && getSelection() && ((style & SWT.CHECK) != 0) && !cell.isHighlighted();", "+", "+\tif (drawSelected) {", "+\t\tNSGraphicsContext.currentContext().saveGraphicsState();", "+\t\tCGRect cgRect = new CGRect();", "+\t\tcgRect.origin.x = rect.x;", "+\t\tcgRect.origin.y = rect.y;", "+\t\tcgRect.size.width = rect.width;", "+\t\tcgRect.size.height = rect.height;", "+\t\tOS.CGContextBeginTransparencyLayerWithRect(cgContext, cgRect, 0);", "+\t}", "+", "+\tsuper.drawImageWithFrameInView(id, sel, image, rect, view);", "+", "+\tif (drawSelected) {", "+\t\tNSColor.colorWithCalibratedRed(0,0,0,.3f).setFill();", "+\t\tOS.NSRectFillUsingOperation(rect, OS.NSCompositeSourceAtop);", "+\t\tOS.CGContextEndTransparencyLayer(cgContext);", "+\t\tNSGraphicsContext.currentContext().restoreGraphicsState();", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e46e107f9e4c3639e9fd843059fef8c3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "2a454fe804b800bda7308985ff1c504f23c6c2df", "commitAfterChange": "73435a29b3d514274292dbf94b7cddcffcdcd978", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  void drawFocus (int control, boolean hasFocus, boolean hasBorder, float[] background, Rect inset)", "signatureAfterChange": "  void drawFocus (int control, int context, boolean hasFocus, boolean hasBorder, float[] background, Rect inset)", "diff": ["-void drawFocus (int control, boolean hasFocus, boolean hasBorder, float[] background, Rect inset) {", "-\tdrawBackground (control, background);", "-\tRect rect = new Rect ();", "-\tOS.GetControlBounds (control, rect);", "-\trect.left += inset.left;", "-\trect.top += inset.top;", "-\trect.right -= inset.right;", "-\trect.bottom -= inset.bottom;", "-\tint state;", "-\tif (OS.IsControlEnabled (control)) {", "-\t\tstate = OS.IsControlActive (control) ? OS.kThemeStateActive : OS.kThemeStateInactive;", "+void drawFocus (int control, int context, boolean hasFocus, boolean hasBorder, float[] background, Rect inset) {", "+\tdrawBackground (control, context, background);", "+\tif (OS.HIVIEW) {", "+\t\tCGRect rect = new CGRect ();", "+\t\tOS.HIViewGetBounds (control, rect);", "+\t\trect.x += inset.left;", "+\t\trect.y += inset.top;", "+\t\trect.width -= inset.right + inset.left;", "+\t\trect.height -= inset.bottom + inset.top;", "+\t\tint state;", "+\t\tif (OS.IsControlEnabled (control)) {", "+\t\t\tstate = OS.IsControlActive (control) ? OS.kThemeStateActive : OS.kThemeStateInactive;", "+\t\t} else {", "+\t\t\tstate = OS.IsControlActive (control) ? OS.kThemeStateUnavailable : OS.kThemeStateUnavailableInactive;", "+\t\t}", "+\t\tif (hasBorder) {", "+\t\t\tHIThemeFrameDrawInfo info = new HIThemeFrameDrawInfo ();", "+\t\t\tinfo.state = state;", "+\t\t\tinfo.kind = OS.kHIThemeFrameTextFieldSquare;", "+\t\t\tinfo.isFocused = hasFocus;", "+\t\t\tOS.HIThemeDrawFrame (rect, info, context, OS.kHIThemeOrientationNormal);", "+\t\t} else {", "+\t\t\tOS.HIThemeDrawFocusRect (rect, hasFocus, context, OS.kHIThemeOrientationNormal);", "+\t\t}", "-\t\tstate = OS.IsControlActive (control) ? OS.kThemeStateUnavailable : OS.kThemeStateUnavailableInactive;", "-\t}", "-\tif (hasFocus) {", "-\t\tif (hasBorder) OS.DrawThemeEditTextFrame (rect, state);", "-\t\tOS.DrawThemeFocusRect (rect, true);", "-\t} else {", "-\t\t/*", "-\t\t* This code is intentionaly commented.", "-\t\t*  ", "-\t\t* NOTE: the focus ring is erased by drawBackground() above. ", "-\t\t*/", "-//\t\tOS.DrawThemeFocusRect (rect, false);", "-\t\tif (hasBorder) OS.DrawThemeEditTextFrame (rect, state);", "+\t\tRect rect = new Rect ();", "+\t\tOS.GetControlBounds (control, rect);", "+\t\trect.left += inset.left;", "+\t\trect.top += inset.top;", "+\t\trect.right -= inset.right;", "+\t\trect.bottom -= inset.bottom;", "+\t\tint state;", "+\t\tif (OS.IsControlEnabled (control)) {", "+\t\t\tstate = OS.IsControlActive (control) ? OS.kThemeStateActive : OS.kThemeStateInactive;", "+\t\t} else {", "+\t\t\tstate = OS.IsControlActive (control) ? OS.kThemeStateUnavailable : OS.kThemeStateUnavailableInactive;", "+\t\t}", "+\t\tif (hasFocus) {", "+\t\t\tif (hasBorder) OS.DrawThemeEditTextFrame (rect, state);", "+\t\t\tOS.DrawThemeFocusRect (rect, true);", "+\t\t} else {", "+\t\t\t/*", "+\t\t\t* This code is intentionaly commented.", "+\t\t\t*  ", "+\t\t\t* NOTE: the focus ring is erased by drawBackground() above. ", "+\t\t\t*/", "+\t//\t\tOS.DrawThemeFocusRect (rect, false);", "+\t\t\tif (hasBorder) OS.DrawThemeEditTextFrame (rect, state);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11db327221ef8ad9d445512d2330c860", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "e5f41a05f7e47d4efb399397a97a6160f1d952e1", "commitAfterChange": "f383b0c2a90e2358bdf171b766e7e5d9d21cf2f6", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": " boolean setButtonBounds()", "signatureAfterChange": " boolean setButtonBounds()", "diff": ["-\t\t\tcase SWT.FILL:", "-\t\t\t\tint rightEdge = getRightItemEdge();", "-\t\t\t\tint lastIndex = getLastIndex();", "-\t\t\t\tif (lastIndex == -1) {", "-\t\t\t\t\ttopRightRect.x = borderLeft + 3;", "-\t\t\t\t\ttopRightRect.width = rightEdge - topRightRect.x;", "-\t\t\t\t} else {", "-\t\t\t\t\tCTabItem lastItem = items[lastIndex];", "-\t\t\t\t\tif (single) {", "-\t\t\t\t\t\t// fill size is 0 if item compressed", "-\t\t\t\t\t\tif (lastItem.x + lastItem.width >= rightEdge) {", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "+\t\t\tcase SWT.FILL: {", "+\t\t\t\tint rightEdge = size.x - borderRight - 3 - maxRect.width - minRect.width;", "+\t\t\t\tif (single) {", "+\t\t\t\t\tif (items.length == 0 || selectedIndex == -1) {", "+\t\t\t\t\t\ttopRightRect.x = borderLeft + 3;", "+\t\t\t\t\t\ttopRightRect.width = rightEdge - topRightRect.x;", "-\t\t\t\t\t\t// fill size is 0 if chevron showing", "-\t\t\t\t\t\tif (showChevron) {", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\t// fill size is 0 if item compressed", "+\t\t\t\t\t\tCTabItem item = items[selectedIndex];", "+\t\t\t\t\t\tif (item.x + item.width + 7 + 3*BUTTON_SIZE/2 >= rightEdge) break;", "+\t\t\t\t\t\ttopRightRect.x = item.x + item.width + 7 + 3*BUTTON_SIZE/2;", "+\t\t\t\t\t\ttopRightRect.width = rightEdge - topRightRect.x;", "-\t\t\t\t\ttopRightRect.x = lastItem.x + lastItem.width;", "+\t\t\t\t} else {", "+\t\t\t\t\t// fill size is 0 if chevron showing", "+\t\t\t\t\tif (showChevron) break;", "+\t\t\t\t\tCTabItem item = items[items.length - 1];", "+\t\t\t\t\ttopRightRect.x = item.x + item.width;", "-\t\t\t\tbreak;", "-\t\t\tcase SWT.RIGHT:", "-\t\t\t\tPoint topRightSize = topRight.computeSize(SWT.DEFAULT, tabHeight);", "-\t\t\t\tif (single && selectedIndex > -1) {", "-\t\t\t\t\tCTabItem item = items[selectedIndex];", "-\t\t\t\t\ttopRightRect.x = Math.min(item.x +item.width + BUTTON_SIZE, size.x - borderRight - minRect.width - maxRect.width - topRightSize.x - 3);", "-\t\t\t\t} else {", "-\t\t\t\t\ttopRightRect.x = size.x - borderRight - minRect.width - maxRect.width - topRightSize.x - 3;", "-\t\t\t\t}", "-\t\t\t\ttopRightRect.width = topRightSize.x;", "+\t\t\t\ttopRightRect.y = onBottom ? size.y - borderBottom - tabHeight: borderTop + 1;", "+\t\t\t\ttopRightRect.height = tabHeight - 1;", "-\t\t\ttopRightRect.y = onBottom ? size.y - borderBottom - tabHeight: borderTop + 1;", "-\t\t\ttopRightRect.height = tabHeight - 1;", "-\t\t\ttopRight.setBounds(topRightRect);", "+\t\t\tcase SWT.RIGHT: {", "+\t\t\t\tPoint topRightSize = topRight.computeSize(SWT.DEFAULT, tabHeight);", "+\t\t\t\tint rightEdge = size.x - borderRight - 3 - maxRect.width - minRect.width;", "+\t\t\t\ttopRightRect.x = rightEdge - topRightSize.x;", "+\t\t\t\ttopRightRect.width = topRightSize.x;", "+\t\t\t\ttopRightRect.y = onBottom ? size.y - borderBottom - tabHeight: borderTop + 1;", "+\t\t\t\ttopRightRect.height = tabHeight - 1;", "+\t\t\t}", "+\t\t}", "+\t\ttopRight.setBounds(topRightRect);", "-\t\tif (selectedIndex == -1 || items.length > 1){", "+\t\tif (selectedIndex == -1 || items.length > 1) {", "-\t\t\tchevronRect.x = getRightItemEdge();", "+\t\t\tif (selectedIndex == -1) {", "+\t\t\t\tchevronRect.x = size.x - borderRight - 3 - minRect.width - maxRect.width - topRightRect.width - chevronRect.width;", "+\t\t\t} else {", "+\t\t\t\tCTabItem item = items[selectedIndex];", "+\t\t\t\tint w = size.x - borderRight - 3 - minRect.width - maxRect.width - chevronRect.width;", "+\t\t\t\tif (topRightRect.width > 0) w -= topRightRect.width + 3;", "+\t\t\t\tchevronRect.x = Math.min(item.x + item.width + 3, w);", "+\t\t\t}"]}], "num": 38385}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d828232d3d14c3dd6e9968f81e10583f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "92d4ae12d11025ccc3bdf26d7afd6fee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "b13cb0959e0afe3c17aa178a3bca80d7d1fd22d7", "commitAfterChange": "e1ddb07c7c0cc45210739f25c19adbd93ffa639d", "methodNumberBeforeChange": 147, "methodNumberAfterChange": 148, "signatureBeforeChange": "  LRESULT WM_KEYDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_KEYDOWN (int wParam, int lParam)", "diff": ["+\t\tcase OS.VK_LEFT:", "+\t\tcase OS.VK_RIGHT:", "+\t\t\t/* ", "+\t\t\t* Bug in Windows. The behavior for the left and right keys is not", "+\t\t\t* changed if the orientation changes after the control was created.", "+\t\t\t* The fix is to replace VK_LEFT by VK_RIGHT and VK_RIGHT by VK_LEFT", "+\t\t\t* when the current orientation differs from the orientation used to ", "+\t\t\t* create the control.", "+\t\t    */", "+\t\t    boolean isRTL = (style & SWT.RIGHT_TO_LEFT) != 0;", "+\t\t    if (isRTL != createdAsRTL) {", "+\t\t\t   int code = callWindowProc (handle, OS.WM_KEYDOWN, wParam == OS.VK_RIGHT ? OS.VK_LEFT : OS.VK_RIGHT, lParam);", "+\t\t\t   return new LRESULT (code);", "+\t\t    }", "+\t\t    break;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1d221da532af8dbb16b2cf304860deb3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "e8da4c0941ed12af4482c8acb5c96a9b3eb2fae2", "commitAfterChange": "e9d005b220541e31164b56d234bb100369d5ec55", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 110, "signatureBeforeChange": "  LRESULT WM_KEYDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_KEYDOWN (int wParam, int lParam)", "diff": ["-\t\tcase OS.VK_UP:", "-\t\tcase OS.VK_DOWN:", "+\t\t\t/*", "+\t\t\t* When there are many columns in a table, scrolling performance", "+\t\t\t* can be improved by temporarily unsubclassing the window proc", "+\t\t\t* so that internal messages are dispatched directly to the table.", "+\t\t\t* If the application expects to see a paint event, the window", "+\t\t\t* proc cannot be unsubclassed or the event will not be seen.", "+\t\t\t*/", "+\t\t\tif (!hooks (SWT.Paint) && !filters (SWT.Paint)) {", "+\t\t\t\tunsubclass ();", "+\t\t\t}", "+\t\t\tint code = callWindowProc (handle, OS.WM_KEYDOWN, wParam, lParam);", "+\t\t\tresult = code == 0 ? LRESULT.ZERO : new LRESULT (code);", "+\t\t\tsubclass ();", "+\t\t\t//FALL THROUGH", "+\t\tcase OS.VK_UP:", "+\t\tcase OS.VK_DOWN:"]}], "num": 45080}
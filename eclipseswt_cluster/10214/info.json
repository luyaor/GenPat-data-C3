{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d903869bf93d8c4040721b51563dc4e2", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "02a47d239a48cd3a429f64d41ae72c4c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "ea7476519b9e21c42e4d4550669901e532bedcab", "commitAfterChange": "76b33e0e494479a9009365afe16385a154f070b7", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 61, "signatureBeforeChange": " void claimBottomFreeSpace()", "signatureAfterChange": " void claimBottomFreeSpace()", "diff": ["-\t//TODO the function can be very expensive for variable line height", "-\t//     find alternative math for this problem, disable it till there.", "-\tif (true) return;", "-\t", "-\tint newVerticalOffset = Math.max(0, content.getLineCount() * lineHeight - getClientArea().height);", "-\tif (newVerticalOffset < verticalScrollOffset) {", "-\t\t// Scroll up so that empty lines below last text line are used.", "-\t\t// Fixes 1GEYJM0", "-\t\tsetVerticalScrollOffset(newVerticalOffset, true);", "+\tif (isFixedLineHeight()) {", "+\t\tint newVerticalOffset = Math.max(0, content.getLineCount() * lineHeight - getClientArea().height);", "+\t\tif (newVerticalOffset < verticalScrollOffset) {", "+\t\t\t// Scroll up so that empty lines below last text line are used.", "+\t\t\t// Fixes 1GEYJM0", "+\t\t\tsetVerticalScrollOffset(newVerticalOffset, true);", "+\t\t}", "+\t} else {\t", "+\t\tint clientAreaHeight = getClientArea().height;", "+\t\tint bottomIndex = getLineIndex(clientAreaHeight);", "+\t\tint height = getLinePixel(bottomIndex) + lineCache.getLineHeight(bottomIndex);", "+\t\tif (clientAreaHeight > height) {", "+\t\t\theight = clientAreaHeight - height;", "+\t\t\theight = Math.min(verticalScrollOffset, height);", "+\t\t\tsetVerticalScrollOffset(verticalScrollOffset - height, true);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "389ff78e2f899be96064c5110fa00a20", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 254, "methodNumberAfterChange": 105, "signatureBeforeChange": " int getBottomIndex()", "signatureAfterChange": " int getBottomIndex()", "diff": ["-\tint lineCount = 1;", "-\t", "-\tif (lineHeight != 0) {", "-\t\t// calculate the number of lines that are fully visible", "-\t\tint partialTopLineHeight = topIndex * lineHeight - verticalScrollOffset;", "-\t\tlineCount = (getClientArea().height - partialTopLineHeight) / lineHeight;", "+\tint bottomIndex;", "+\tif (isFixedLineHeight()) {", "+\t\tint lineCount = 1;", "+\t\tint lineHeight = renderer.getLineHeight();", "+\t\tif (lineHeight != 0) {", "+\t\t\t// calculate the number of lines that are fully visible", "+\t\t\tint partialTopLineHeight = topIndex * lineHeight - getVerticalScrollOffset();", "+\t\t\tlineCount = (getClientArea().height - partialTopLineHeight) / lineHeight;", "+\t\t}", "+\t\tbottomIndex = Math.min(content.getLineCount() - 1, topIndex + Math.max(0, lineCount - 1));", "+\t} else {", "+\t\tint clientAreaHeight = getClientArea().height - bottomMargin;", "+\t\tbottomIndex = getLineIndex(clientAreaHeight);", "+\t\tif (bottomIndex > 0) {", "+\t\t\tint linePixel = getLinePixel(bottomIndex);", "+\t\t\tint lineHeight = renderer.getLineHeight(bottomIndex);", "+\t\t\tif (linePixel + lineHeight > clientAreaHeight) {", "+\t\t\t\tbottomIndex--;", "+\t\t\t}", "+\t\t}", "-\treturn Math.min(content.getLineCount() - 1, topIndex + Math.max(0, lineCount - 1));", "+\treturn bottomIndex;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b7f854da9ae94a9027937512d50f22a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText2.java", "commitBeforeChange": "ea7476519b9e21c42e4d4550669901e532bedcab", "commitAfterChange": "76b33e0e494479a9009365afe16385a154f070b7", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": " int getBottomIndex()", "signatureAfterChange": " int getBottomIndex()", "diff": ["-//\tint lineCount = 1;", "-//\tif (lineHeight != 0) {", "-//\t\t// calculate the number of lines that are fully visible", "-//\t\tint partialTopLineHeight = topIndex * lineHeight - verticalScrollOffset;", "-//\t\tlineCount = (getClientArea().height - partialTopLineHeight) / lineHeight;", "-//\t}", "-//\treturn Math.min(content.getLineCount() - 1, topIndex + Math.max(0, lineCount - 1));", "-\tint clientAreaHeight = getClientArea().height;", "-\tint bottomIndex = getLineIndex(clientAreaHeight);", "-\tif (bottomIndex > 0) {", "-\t\tint linePixel = getLinePixel(bottomIndex);", "-\t\tint lineHeight = lineCache.getLineHeight(bottomIndex);", "-\t\tif (linePixel + lineHeight > clientAreaHeight) {", "-\t\t\tbottomIndex--;", "+\tint bottomIndex;", "+\tif (isFixedLineHeight()) {", "+\t\tint lineCount = 1;", "+\t\tif (lineHeight != 0) {", "+\t\t\t// calculate the number of lines that are fully visible", "+\t\t\tint partialTopLineHeight = topIndex * lineHeight - verticalScrollOffset;", "+\t\t\tlineCount = (getClientArea().height - partialTopLineHeight) / lineHeight;", "+\t\t}", "+\t\tbottomIndex = Math.min(content.getLineCount() - 1, topIndex + Math.max(0, lineCount - 1));", "+\t} else {", "+\t\tint clientAreaHeight = getClientArea().height;", "+\t\tbottomIndex = getLineIndex(clientAreaHeight);", "+\t\tif (bottomIndex > 0) {", "+\t\t\tint linePixel = getLinePixel(bottomIndex);", "+\t\t\tint lineHeight = lineCache.getLineHeight(bottomIndex);", "+\t\t\tif (linePixel + lineHeight > clientAreaHeight) {", "+\t\t\t\tbottomIndex--;", "+\t\t\t}"]}], "num": 10214}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9b6d2c0b4bdadd8b0a1a20554a95fcad", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7e579448412706d234d5c438e770d947", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "26a9e7b84a89aa0996d14047ca8a88127c067f80", "commitAfterChange": "86b90385fedf40df43c4f9a5f9162f82e46efcb1", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public Image (Device device, String filename)", "signatureAfterChange": " public Image (Device device, String filename)", "diff": ["+\tif (filename == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+\tthis.device = device;", "+\ttry {", "+\t\tdevice.checkGDIP();", "+\t\tint length = filename.length();", "+\t\tchar[] chars = new char[length+1];", "+\t\tfilename.getChars(0, length, chars, 0);", "+\t\tint bitmap = Gdip.Bitmap_new(chars, false);", "+\t\tif (bitmap != 0) {", "+\t\t\tif (filename.toLowerCase().endsWith(\".ico\")) {", "+\t\t\t\tint[] hicon = new int[1];", "+\t\t\t\tGdip.Bitmap_GetHICON(bitmap, hicon);", "+\t\t\t\tthis.type = SWT.ICON;", "+\t\t\t\tthis.handle = hicon[0];", "+\t\t\t} else {", "+\t\t\t\tint[] hBitmap = new int[1];", "+\t\t\t\tint color = Gdip.Color_new(0);", "+\t\t\t\tif (color == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tGdip.Bitmap_GetHBITMAP(bitmap, color, hBitmap);\t\t\t", "+\t\t\t\tthis.type = SWT.BITMAP;", "+\t\t\t\tthis.handle = hBitmap[0];", "+\t\t\t\tif (handle == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\tint pixelFormat = Gdip.Image_GetPixelFormat(bitmap);", "+\t\t\t\tswitch (pixelFormat) {", "+\t\t\t\t\tcase Gdip.PixelFormat32bppARGB:", "+\t\t\t\t\t\tint lockedBitmapData = Gdip.BitmapData_new();", "+\t\t\t\t\t\tif (lockedBitmapData == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\t\t\tGdip.Bitmap_LockBits(bitmap, 0, 0, pixelFormat, lockedBitmapData);", "+\t\t\t\t\t\tBitmapData bitmapData = new BitmapData();", "+\t\t\t\t\t\tGdip.MoveMemory(bitmapData, lockedBitmapData, BitmapData.sizeof);", "+\t\t\t\t\t\tint stride = bitmapData.Stride;", "+\t\t\t\t\t\tint width = bitmapData.Width;", "+\t\t\t\t\t\tint height = bitmapData.Height;", "+\t\t\t\t\t\tint pixels = bitmapData.Scan0;", "+\t\t\t\t\t\tbyte[] line = new byte[stride];", "+\t\t \t\t \t\talphaData = new byte[width * height];", "+\t\t \t\t \t\tfor (int y = 0; y < height; y++) {", "+\t\t \t\t \t\t\tOS.MoveMemory(line, pixels + (y * stride), stride);", "+\t\t \t\t \t\t \tfor (int x = 0; x < width; x++) {", "+\t\t \t\t \t\t \t\talphaData[y*width+x] = line[x*4 + 3];", "+\t\t \t\t \t\t \t}", "+\t\t \t\t \t\t}", "+\t\t \t\t \t\tGdip.Bitmap_UnlockBits(bitmap, lockedBitmapData);", "+\t\t\t\t\t\tGdip.BitmapData_delete(lockedBitmapData);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase Gdip.PixelFormat1bppIndexed:", "+\t\t\t\t\tcase Gdip.PixelFormat4bppIndexed:", "+\t\t\t\t\tcase Gdip.PixelFormat8bppIndexed:", "+\t\t\t\t\t\tint paletteSize = Gdip.Image_GetPaletteSize(bitmap);", "+\t\t\t\t\t\tint hHeap = OS.GetProcessHeap();", "+\t\t\t\t\t\tint palette = OS.HeapAlloc(hHeap, OS.HEAP_ZERO_MEMORY, paletteSize);", "+\t\t\t\t\t\tif (palette == 0) SWT.error(SWT.ERROR_NO_HANDLES); ", "+\t\t\t\t\t\tGdip.Image_GetPalette(bitmap, palette, paletteSize);", "+\t\t\t\t\t\tColorPalette colorPalette = new ColorPalette();", "+\t\t\t\t\t\tGdip.MoveMemory(colorPalette, palette, ColorPalette.sizeof);", "+\t\t\t\t\t\tif ((colorPalette.Flags & Gdip.PaletteFlagsHasAlpha) != 0) { ", "+\t\t\t\t\t\t\tint[] entries = new int[colorPalette.Count];", "+\t\t\t\t\t\t\tOS.MoveMemory(entries, palette + 8, entries.length * 4);", "+\t\t\t\t\t\t\tfor (int i = 0; i < entries.length; i++) {", "+\t\t\t\t\t\t\t\tif (((entries[i] >> 24) & 0xFF) == 0) {", "+\t\t\t\t\t\t\t\t\ttransparentPixel = i;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.HeapFree(hHeap, 0, palette);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t}\t\t\t", "+\t\t\t\tGdip.Color_delete(color);", "+\t\t\t}", "+\t\t\tGdip.Bitmap_delete(bitmap);", "+\t\t\treturn;", "+\t\t}", "+\t} catch (SWTException e) {}", "-\tif (device.tracking) device.new_Object(this);\t", "+\tif(device.tracking) device.new_Object(this);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50ac6cab84dcf1f23611b81c8708f2f2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "47c3bad504f0710348269e73864fac9e79eba188", "commitAfterChange": "816f868d4550dcf1559628ef00a240d390b4e608", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public Image(Device device, String filename)", "signatureAfterChange": " public Image(Device device, String filename)", "diff": ["+\tif (filename == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "+\tthis.device = device;", "+\ttry {", "+\t\tint length = filename.length ();", "+\t\tchar [] chars = new char [length];", "+\t\tfilename.getChars (0, length, chars, 0);", "+\t\tbyte [] buffer = Converter.wcsToMbcs(null, chars, true);", "+\t\tint /*long*/ pixbuf = OS.gdk_pixbuf_new_from_file(buffer, null);", "+\t\tif (pixbuf != 0) {", "+\t\t\tint /*long*/ [] pixmap_return = new int /*long*/ [1];", "+\t\t\tOS.gdk_pixbuf_render_pixmap_and_mask(pixbuf, pixmap_return, null, 0);", "+\t\t\tthis.type = SWT.BITMAP;", "+\t\t\tthis.pixmap = pixmap_return[0];", "+\t\t\tif (pixmap == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\tboolean hasAlpha = OS.gdk_pixbuf_get_has_alpha(pixbuf);", "+\t\t\tif (hasAlpha) {", "+\t\t\t\tint width = OS.gdk_pixbuf_get_width(pixbuf);", "+\t\t\t\tint height = OS.gdk_pixbuf_get_height(pixbuf);", "+\t\t\t\tint stride = OS.gdk_pixbuf_get_rowstride(pixbuf);", "+\t\t\t\tint /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);", "+\t\t\t\tbyte[] line = new byte[stride];", "+\t\t\t\talphaData = new byte[width * height];", "+\t\t\t\tfor (int y = 0; y < height; y++) {", "+\t\t\t\t\tOS.memmove(line, pixels + (y * stride), stride);", "+\t\t\t\t\tfor (int x = 0; x < width; x++) {", "+\t\t\t\t\t\talphaData[y*width+x] = line[x*4 + 3];", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (device.useXRender) {", "+\t\t\t\t\tmask = OS.gdk_pixmap_new(0, width, height, 8);", "+\t\t\t\t\tif (mask == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\t\tGdkImage gdkImage = new GdkImage();", "+\t\t\t\t\tint /*long*/ imagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);", "+\t\t\t\t\tOS.memmove(gdkImage, imagePtr);", "+\t\t\t\t\tif (gdkImage.bpl == width) {", "+\t\t\t\t\t\tOS.memmove(gdkImage.mem, alphaData, alphaData.length);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tline = new byte[gdkImage.bpl];", "+\t\t\t\t\t\tfor (int y = 0; y < height; y++) {", "+\t\t\t\t\t\t\tSystem.arraycopy(alphaData, width * y, line, 0, width);", "+\t\t\t\t\t\t\tOS.memmove(gdkImage.mem + (gdkImage.bpl * y), line, gdkImage.bpl);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tint /*long*/ gc = OS.gdk_gc_new(mask);", "+\t\t\t\t\tif (gc == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t\t\tOS.gdk_draw_image(mask, gc, imagePtr, 0, 0, 0, 0, width, height);", "+\t\t\t\t\tOS.g_object_unref(imagePtr);", "+\t\t\t\t\tOS.g_object_unref(gc);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.g_object_unref (pixbuf);", "+\t\t\treturn;", "+\t\t}", "+\t} catch (SWTException e) {}"]}], "num": 45637}
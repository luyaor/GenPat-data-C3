{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "70f4b8564468ba496e7214655453c65f", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbe61ccc98e4a60e56d0f6bb27ed2d95", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "e46a4e42b9be11fdc8b9e91fa09c391a8595e5e7", "commitAfterChange": "0bbeaceec2403973574dd6a4c787fc264d387814", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "\r \r public void setSelectionBackground(Color[] colors, int[] percents)", "signatureAfterChange": "\r \r public void setSelectionBackground(Color[] colors, int[] percents)", "diff": ["+\t\tif (getDisplay().getDepth() < 15) {\r", "+\t\t\t// Don't use gradients on low color displays\r", "+\t\t\tcolors = new Color[] { colors[0] };\r", "+\t\t\tpercents = new int[] { };\r", "+\t\t}\r", "-\tif (gradientImage == null && gradientColors == null && colors == null) {\r", "-\t\tif (backgroundImage != null) {\r", "-\t\t\tbackgroundImage = null;\r", "-\t\t\tredrawTabArea(selectedIndex);\r", "-\t\t}\r", "-\t\treturn;\r", "-\t}\r", "-\tif (gradientColors != null && colors != null \r", "-\t    && gradientColors.length == colors.length) {\r", "-\t\tboolean same = false;\r", "-\t\tfor (int i = 0; i < gradientColors.length; i++) {\r", "-\t\t\tsame = (gradientColors[i] == colors[i]);\r", "-\t\t\tif (!same) break;\r", "-\t\t}\r", "-\t\tif (same) {\r", "-\t\t\tfor (int i = 0; i < gradientPercents.length; i++) {\r", "-\t\t\t\tsame = gradientPercents[i] == percents[i];\r", "+\tfinal Color background = getBackground();\r", "+\tif (backgroundImage == null) {\r", "+\t\tif ((gradientColors != null) && (colors != null) && \r", "+\t\t\t(gradientColors.length == colors.length)) {\r", "+\t\t\tboolean same = false;\r", "+\t\t\tfor (int i = 0; i < gradientColors.length; i++) {\r", "+\t\t\t\tsame = (gradientColors[i] == colors[i]) ||\r", "+\t\t\t\t\t((gradientColors[i] == null) && (colors[i] == background)) ||\r", "+\t\t\t\t\t((gradientColors[i] == background) && (colors[i] == null));\r", "-\t\t}\r", "-\t\tif (same) return;\r", "-\t}\r", "-\t\r", "-\t// Cleanup\r", "-\tif (gradientImage != null) {\r", "-\t\tgradientImage.dispose();\r", "-\t\tgradientImage = null;\r", "-\t}\r", "-\tgradientColors = null;\r", "-\tgradientPercents = null;\r", "-\tbackgroundImage = null;\r", "-\t\r", "-\t// Draw gradient onto an image\r", "-\tif (colors != null) {\r", "-\t\tColor[] colorsCopy = null;\r", "-\t\tDisplay display = getDisplay();\r", "-\t\tif (display.getDepth() < 15) {\r", "-\t\t\tcolorsCopy = new Color[]{colors[0]};\r", "-\t\t} else {\r", "-\t\t\tcolorsCopy = colors;\r", "-\t\t}\r", "-\t\t\r", "-\t\tint x = 0; int y = 0;\r", "-\t\tint width = 100; int height = 10;\r", "-\t\tImage temp = new Image(display, width, height);\r", "-\t\tGC gc = new GC(temp);\r", "-\t\tint start = 0;\r", "-\t\tint end = 0;\r", "-\t\tColor background = getBackground();\r", "-\t\tif (colorsCopy.length == 1) {\r", "-\t\t\tgc.setBackground(colorsCopy[0]);\r", "-\t\t\tgc.fillRectangle(temp.getBounds());\r", "-\t\t}\r", "-\t\tfor (int j = 0; j < colorsCopy.length - 1; j++) {\r", "-\t\t\tColor startColor = colorsCopy[j];\r", "-\t\t\tif (startColor == null) startColor = getBackground();\r", "-\t\t\tRGB rgb1 = startColor.getRGB();\r", "-\t\t\tColor endColor = colorsCopy[j+1];\r", "-\t\t\tif (endColor == null) endColor = getBackground();\r", "-\t\t\tRGB rgb2   = endColor.getRGB();\r", "-\t\t\tstart = end;\r", "-\t\t\tend = (width) * percents[j] / 100;\r", "-\t\t\tint range = Math.max(1, end - start);\r", "-\t\t\tfor (int k = 0; k < (end - start); k++) {\r", "-\t\t\t\tint r = rgb1.red + k*(rgb2.red - rgb1.red)/range;\r", "-\t\t\t\tr = (rgb2.red > rgb1.red) ? Math.min(r, rgb2.red) : Math.max(r, rgb2.red);\r", "-\t\t\t\tint g = rgb1.green + k*(rgb2.green - rgb1.green)/range;\r", "-\t\t\t\tg = (rgb2.green > rgb1.green) ? Math.min(g, rgb2.green) : Math.max(g, rgb2.green);\r", "-\t\t\t\tint b = rgb1.blue + k*(rgb2.blue - rgb1.blue)/range;\r", "-\t\t\t\tb = (rgb2.blue > rgb1.blue) ? Math.min(b, rgb2.blue) : Math.max(b, rgb2.blue);\r", "-\t\t\t\tColor color = new Color(display, r, g, b); \r", "-\t\t\t\tgc.setBackground(color);\t\t\t\t\t\r", "-\t\t\t\tgc.fillRectangle(start + k,y,1,height);\r", "-\t\t\t\tgc.setBackground(background);\r", "-\t\t\t\tcolor.dispose();\r", "+\t\t\tif (same) {\r", "+\t\t\t\tfor (int i = 0; i < gradientPercents.length; i++) {\r", "+\t\t\t\t\tsame = gradientPercents[i] == percents[i];\r", "+\t\t\t\t\tif (!same) break;\r", "+\t\t\t\t}\r", "+\t\t\tif (same) return;\r", "-\t\tgc.dispose();\r", "-\t\tgradientImage = temp;\r", "-\t\tgradientColors = colorsCopy;\r", "-\t\tgradientPercents = percents;\r", "-\t\tbackgroundImage = temp;\r", "-\t\t\r", "-\t\tColor closeBackground = colorsCopy[colorsCopy.length - 1];\r", "-\t\tif (closeBackground == null || display.getDepth() < 15){\r", "-\t\t\tcloseBackground = background;\r", "-\t\t}\r", "-\t\tcloseBar.setBackground(closeBackground);\r", "-\t\tcloseBar.setBackground(getBackground());\r", "+\t\tbackgroundImage = null;\r", "+\t// Store the new settings\r", "+\tif (colors == null) {\r", "+\t\tgradientColors = null;\r", "+\t\tgradientPercents = null;\r", "+\t\tcloseBar.setBackground(background);\r", "+\t} else {\r", "+\t\tgradientColors = new Color[colors.length];\r", "+\t\tfor (int i = 0; i < colors.length; ++i)\r", "+\t\t\tgradientColors[i] = (colors[i] != null) ? colors[i] : background;\r", "+\t\tgradientPercents = new int[percents.length];\r", "+\t\tfor (int i = 0; i < percents.length; ++i)\r", "+\t\t\tgradientPercents[i] = percents[i];\r", "+\t\tif (getDisplay().getDepth() < 15) closeBar.setBackground(background);\r", "+\t\telse closeBar.setBackground(gradientColors[gradientColors.length - 1]);\r", "+\t}\r", "+\r", "+\t// Refresh with the new settings\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1001eedd4df48b5bd985b862afbd4693", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CLabel.java", "commitBeforeChange": "e46a4e42b9be11fdc8b9e91fa09c391a8595e5e7", "commitAfterChange": "0bbeaceec2403973574dd6a4c787fc264d387814", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "\r public void setBackground(Color[] colors, int[] percents)", "signatureAfterChange": "\r public void setBackground(Color[] colors, int[] percents)", "diff": ["-public void setBackground(Color[] colors, int[] percents) {\r", "+public void setBackground(Color[] colors, int[] percents) {\t\r", "-\t\tif (percents == null || percents.length != colors.length - 1) \r", "+\t\tif (percents == null || percents.length != colors.length - 1) {\r", "+\t\t}\r", "+\t\tif (getDisplay().getDepth() < 15) {\r", "+\t\t\t// Don't use gradients on low color displays\r", "+\t\t\tcolors = new Color[] { colors[0] };\r", "+\t\t\tpercents = new int[] { };\r", "+\t\t}\r", "-\t\t\tif (percents[i] < 0 || percents[i] > 100)\r", "+\t\t\tif (percents[i] < 0 || percents[i] > 100) {\r", "-\t\t\tif (i > 0 && percents[i] < percents[i-1])\r", "+\t\t\t}\r", "+\t\t\tif (i > 0 && percents[i] < percents[i-1]) {\r", "+\t\t\t}\r", "-\tif (gradientImage == null && gradientColors == null && colors == null) {\r", "-\t\tif (backgroundImage != null) {\r", "-\t\t\tbackgroundImage = null;\r", "-\t\t\tredraw();\r", "-\t\t}\r", "-\t\treturn;\r", "-\t}\r", "-\tif (gradientColors != null && colors != null \r", "-\t    && gradientColors.length == colors.length) {\r", "-\t\tboolean same = false;\r", "-\t\tfor (int i = 0; i < gradientColors.length; i++) {\r", "-\t\t\tsame = gradientColors[i].equals(colors[i]);\r", "-\t\t\tif (!same) break;\r", "-\t\t}\r", "-\t\tif (same) {\r", "-\t\t\tfor (int i = 0; i < gradientPercents.length; i++) {\r", "-\t\t\t\tsame = gradientPercents[i] == percents[i];\r", "+\tfinal Color background = getBackground();\r", "+\tif (backgroundImage == null) {\r", "+\t\tif ((gradientColors != null) && (colors != null) && \r", "+\t\t\t(gradientColors.length == colors.length)) {\r", "+\t\t\tboolean same = false;\r", "+\t\t\tfor (int i = 0; i < gradientColors.length; i++) {\r", "+\t\t\t\tsame = (gradientColors[i] == colors[i]) ||\r", "+\t\t\t\t\t((gradientColors[i] == null) && (colors[i] == background)) ||\r", "+\t\t\t\t\t((gradientColors[i] == background) && (colors[i] == null));\r", "-\t\t}\r", "-\t\tif (same) return;\r", "-\t}\r", "-\t\r", "-\t// Cleanup\r", "-\tif (gradientImage != null) {\r", "-\t\tgradientImage.dispose();\r", "-\t}\r", "-\tgradientImage = null;\r", "-\tgradientColors = null;\r", "-\tgradientPercents = null;\r", "-\tbackgroundImage = null;\r", "-\t\r", "-\t// Draw gradient onto an image\r", "-\tif (colors != null) {\r", "-\t\tColor[] colorsCopy = null;\r", "-\t\tDisplay display = getDisplay();\r", "-\t\tif (display.getDepth() < 15) {\r", "-\t\t\tcolorsCopy = new Color[]{colors[0]};\r", "-\t\t} else {\r", "-\t\t\tcolorsCopy = colors;\r", "-\t\t}\r", "-\t\t\r", "-\t\tint x = 0; int y = 0;\r", "-\t\tint width = 100; int height = 10;\r", "-\t\tImage temp = new Image(display, width, height);\r", "-\t\tGC gc = new GC(temp);\r", "-\t\tif (colorsCopy.length == 1) {\r", "-\t\t\tgc.setBackground(colorsCopy[0]);\r", "-\t\t\tgc.fillRectangle(temp.getBounds());\r", "-\t\t}\r", "-\t\tint start = 0;\r", "-\t\tint end = 0;\r", "-\t\tfor (int j = 0; j < colorsCopy.length - 1; j++) {\r", "-\t\t\tColor startColor = colorsCopy[j];\r", "-\t\t\tif (startColor == null) startColor = getBackground();\r", "-\t\t\tRGB rgb1 = startColor.getRGB();\r", "-\t\t\tColor endColor = colorsCopy[j+1];\r", "-\t\t\tif (endColor == null) endColor = getBackground();\r", "-\t\t\tRGB rgb2   = endColor.getRGB();\r", "-\t\t\tstart = end;\r", "-\t\t\tend = (width) * percents[j] / 100;\r", "-\t\t\tint range = Math.max(1, end - start);\r", "-\t\t\tfor (int k = 0; k < (end - start); k++) {\r", "-\t\t\t\tint r = rgb1.red + k*(rgb2.red - rgb1.red)/range;\r", "-\t\t\t\tr = (rgb2.red > rgb1.red) ? Math.min(r, rgb2.red) : Math.max(r, rgb2.red);\r", "-\t\t\t\tint g = rgb1.green + k*(rgb2.green - rgb1.green)/range;\r", "-\t\t\t\tg = (rgb2.green > rgb1.green) ? Math.min(g, rgb2.green) : Math.max(g, rgb2.green);\r", "-\t\t\t\tint b = rgb1.blue + k*(rgb2.blue - rgb1.blue)/range;\r", "-\t\t\t\tb = (rgb2.blue > rgb1.blue) ? Math.min(b, rgb2.blue) : Math.max(b, rgb2.blue);\r", "-\t\t\t\tColor color = new Color(display, r, g, b); \r", "-\t\t\t\tgc.setBackground(color);\t\t\t\t\t\r", "-\t\t\t\tgc.fillRectangle(start + k,y,1,height);\r", "-\t\t\t\tgc.setBackground(getBackground());\r", "-\t\t\t\tcolor.dispose();\r", "+\t\t\tif (same) {\r", "+\t\t\t\tfor (int i = 0; i < gradientPercents.length; i++) {\r", "+\t\t\t\t\tsame = gradientPercents[i] == percents[i];\r", "+\t\t\t\t\tif (!same) break;\r", "+\t\t\t\t}\r", "+\t\t\tif (same) return;\r", "-\t\tgc.dispose();\r", "-\t\tgradientImage = temp;\r", "-\t\tgradientColors = colorsCopy;\r", "-\t\tgradientPercents = percents;\r", "-\t\tbackgroundImage = temp;\r", "+\t} else {\r", "+\t\tbackgroundImage = null;\r", "-\t\r", "+\t// Store the new settings\r", "+\tif (colors == null) {\r", "+\t\tgradientColors = null;\r", "+\t\tgradientPercents = null;\r", "+\t} else {\r", "+\t\tgradientColors = new Color[colors.length];\r", "+\t\tfor (int i = 0; i < colors.length; ++i)\r", "+\t\t\tgradientColors[i] = (colors[i] != null) ? colors[i] : background;\r", "+\t\tgradientPercents = new int[percents.length];\r", "+\t\tfor (int i = 0; i < percents.length; ++i)\r", "+\t\t\tgradientPercents[i] = percents[i];\r", "+\t}\r", "+\t// Refresh with the new settings\r"]}], "num": 10600}
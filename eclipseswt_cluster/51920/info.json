{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7fe0c963f2e7a0db237181448c43cfb6", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70626c37f687a40f7614c2cd1a7b602a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "49004903cea627f8e18ec7beb495ed69bd7515bf", "commitAfterChange": "74b446f0656f1cd959b11120c70a3b24ba9958b8", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["-\t\t\t\t\tint end = run.start + run.length - 1;", "-\t\t\t\t\tboolean fullSelection = hasSelection && selectionStart <= run.start && selectionEnd >= end;", "-\t\t\t\t\tif (fullSelection) {", "-\t\t\t\t\t\tif (gdip) {", "-\t\t\t\t\t\t\tGdip.Graphics_FillRectangle(gdipGraphics, selBrush, drawX, drawY, run.width, lineHeight);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tOS.SelectObject(hdc, selBrush);", "-\t\t\t\t\t\t\tOS.PatBlt(hdc, drawX, drawY, run.width, lineHeight, OS.PATCOPY);", "-\t\t\t\t\t\t}", "+\t\t\t\t\tOS.SetRect(rect, drawX, drawY, drawX + run.width, drawY + lineHeight);", "+\t\t\t\t\tif (gdip) {", "+\t\t\t\t\t\tdrawRunBackgroundGDIP(run, gdipGraphics, rect, selectionStart, selectionEnd, alpha, selBrush, hasSelection);", "-\t\t\t\t\t\tif (run.style != null && run.style.background != null) {", "-\t\t\t\t\t\t\tint bg = run.style.background.handle;", "-\t\t\t\t\t\t\tif (gdip) {", "-\t\t\t\t\t\t\t\tint argb = ((alpha & 0xFF) << 24) | ((bg >> 16) & 0xFF) | (bg & 0xFF00) | ((bg & 0xFF) << 16);", "-\t\t\t\t\t\t\t\tint /*long*/ color = Gdip.Color_new(argb); ", "-\t\t\t\t\t\t\t\tint /*long*/ brush = Gdip.SolidBrush_new(color);", "-\t\t\t\t\t\t\t\tGdip.Graphics_FillRectangle(gdipGraphics, brush, drawX, drawY, run.width, lineHeight);", "-\t\t\t\t\t\t\t\tGdip.Color_delete(color);", "-\t\t\t\t\t\t\t\tGdip.SolidBrush_delete(brush);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tint /*long*/ hBrush = OS.CreateSolidBrush (bg);", "-\t\t\t\t\t\t\t\tint /*long*/ oldBrush = OS.SelectObject(hdc, hBrush);", "-\t\t\t\t\t\t\t\tOS.PatBlt(hdc, drawX, drawY, run.width, lineHeight, OS.PATCOPY);", "-\t\t\t\t\t\t\t\tOS.SelectObject(hdc, oldBrush);", "-\t\t\t\t\t\t\t\tOS.DeleteObject(hBrush);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean partialSelection = hasSelection && !(selectionStart > end || run.start > selectionEnd);", "-\t\t\t\t\t\tif (partialSelection) {", "-\t\t\t\t\t\t\tint selStart = Math.max(selectionStart, run.start) - run.start;", "-\t\t\t\t\t\t\tint selEnd = Math.min(selectionEnd, end) - run.start;", "-\t\t\t\t\t\t\tint cChars = run.length;", "-\t\t\t\t\t\t\tint gGlyphs = run.glyphCount;", "-\t\t\t\t\t\t\tint[] piX = new int[1];", "-\t\t\t\t\t\t\tint /*long*/ advances = run.justify != 0 ? run.justify : run.advances;", "-\t\t\t\t\t\t\tOS.ScriptCPtoX(selStart, false, cChars, gGlyphs, run.clusters, run.visAttrs, advances, run.analysis, piX);", "-\t\t\t\t\t\t\tint runX = (orientation & SWT.RIGHT_TO_LEFT) != 0 ? run.width - piX[0] : piX[0];", "-\t\t\t\t\t\t\trect.left = drawX + runX;", "-\t\t\t\t\t\t\trect.top = drawY;", "-\t\t\t\t\t\t\tOS.ScriptCPtoX(selEnd, true, cChars, gGlyphs, run.clusters, run.visAttrs, advances, run.analysis, piX);", "-\t\t\t\t\t\t\trunX = (orientation & SWT.RIGHT_TO_LEFT) != 0 ? run.width - piX[0] : piX[0];", "-\t\t\t\t\t\t\trect.right = drawX + runX;", "-\t\t\t\t\t\t\trect.bottom = drawY + lineHeight;", "-\t\t\t\t\t\t\tif (gdip) {", "-\t\t\t\t\t\t\t\tif (rect.left > rect.right) {", "-\t\t\t\t\t\t\t\t\tint tmp = rect.left;", "-\t\t\t\t\t\t\t\t\trect.left = rect.right;", "-\t\t\t\t\t\t\t\t\trect.right = tmp;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tGdip.Graphics_FillRectangle(gdipGraphics, selBrush, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);", "-\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\tOS.SelectObject(hdc, selBrush);", "-\t\t\t\t\t\t\t\tOS.PatBlt(hdc, rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top, OS.PATCOPY);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tdrawRunBackground(run, hdc, rect, selectionStart, selectionEnd, selBrush, hasSelection);", "+\t}", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "35452c4cb407ecb9e8977c94cd1f1b92", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "65777ce3d2a96099cf20830ff9a4bd6c4c860e8f", "commitAfterChange": "ba852d737724ee92cb82b3435acad91de5d9d6c7", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw (GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["-\t\t\t\t\t\tif (run.style != null && (run.style.underline || run.style.strikeout)) {", "-\t\t\t\t\t\t\tint /*long*/ newPen = hasSelection ? selPen : Gdip.Pen_new(brush, 1);", "-\t\t\t\t\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeNone);", "-\t\t\t\t\t\t\tif (run.style.underline) {", "-\t\t\t\t\t\t\t\tint underlineY = drawY + baseline + 1 - run.style.rise;", "-\t\t\t\t\t\t\t\tGdip.Graphics_DrawLine(gdipGraphics, newPen, drawX, underlineY, drawX + run.width, underlineY);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (run.style.strikeout) {", "-\t\t\t\t\t\t\t\tint strikeoutY = drawRunY + run.leading + (run.ascent - run.style.rise) / 2;", "-\t\t\t\t\t\t\t\tGdip.Graphics_DrawLine(gdipGraphics, newPen, drawX, strikeoutY, drawX + run.width, strikeoutY);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (newPen != selPen) Gdip.Pen_delete(newPen);", "-\t\t\t\t\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tdrawLines(gdip, gdipGraphics, drawX, drawRunY, run, brush);", "-\t\t\t\t\t\t\tif (run.style != null && (run.style.underline || run.style.strikeout)) {", "-\t\t\t\t\t\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeNone);", "-\t\t\t\t\t\t\t\tif (run.style.underline) {", "-\t\t\t\t\t\t\t\t\tint underlineY = drawY + baseline + 1 - run.style.rise;", "-\t\t\t\t\t\t\t\t\tGdip.Graphics_DrawLine(gdipGraphics, selPen, rect.left, underlineY, rect.right, underlineY);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (run.style.strikeout) {", "-\t\t\t\t\t\t\t\t\tint strikeoutY = drawRunY + run.leading + (run.ascent - run.style.rise) / 2;", "-\t\t\t\t\t\t\t\t\tGdip.Graphics_DrawLine(gdipGraphics, selPen, rect.left, strikeoutY, rect.right, strikeoutY);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tGdip.Graphics_SetPixelOffsetMode(gdipGraphics, Gdip.PixelOffsetModeHalf);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tdrawLines(gdip, gdipGraphics, drawX, drawRunY, run, selBrushFg);", "-\t\t\t\t\t\tif (run.style != null && (run.style.underline || run.style.strikeout)) {", "-\t\t\t\t\t\t\tint /*long*/ newPen = hasSelection && fg == selectionForeground.handle ? selPen : OS.CreatePen(OS.PS_SOLID, 1, fg);", "-\t\t\t\t\t\t\tint /*long*/ oldPen = OS.SelectObject(hdc, newPen);", "-\t\t\t\t\t\t\tif (run.style.underline) {", "-\t\t\t\t\t\t\t\tint underlineY = drawY + baseline + 1 - run.style.rise;", "-\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, drawX, underlineY, 0);", "-\t\t\t\t\t\t\t\tOS.LineTo(hdc, drawX + run.width, underlineY);", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tif (run.style.strikeout) {", "-\t\t\t\t\t\t\t\tint strikeoutY = drawRunY + run.leading + (run.ascent - run.style.rise) / 2;", "-\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, drawX, strikeoutY, 0);", "-\t\t\t\t\t\t\t\tOS.LineTo(hdc, drawX + run.width, strikeoutY);\t", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tOS.SelectObject(hdc, oldPen);", "-\t\t\t\t\t\t\tif (!hasSelection || fg != selectionForeground.handle) OS.DeleteObject(newPen);", "-\t\t\t\t\t\t}", "+\t\t\t\t\t\tdrawLines(gdip, hdc, drawX, drawRunY, run, fg);", "-\t\t\t\t\t\t\tif (run.style != null && (run.style.underline || run.style.strikeout)) {\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\tint /*long*/ oldPen = OS.SelectObject(hdc, selPen);", "-\t\t\t\t\t\t\t\tif (run.style.underline) {", "-\t\t\t\t\t\t\t\t\tint underlineY = drawY + baseline + 1 - run.style.rise;", "-\t\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, rect.left, underlineY, 0);", "-\t\t\t\t\t\t\t\t\tOS.LineTo(hdc, rect.right, underlineY);", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tif (run.style.strikeout) {", "-\t\t\t\t\t\t\t\t\tint strikeoutY = drawRunY + run.leading + (run.ascent - run.style.rise) / 2;", "-\t\t\t\t\t\t\t\t\tOS.MoveToEx(hdc, rect.left, strikeoutY, 0);", "-\t\t\t\t\t\t\t\t\tOS.LineTo(hdc, rect.right, strikeoutY);\t", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\tOS.SelectObject(hdc, oldPen);", "-\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tdrawLines(gdip, hdc, drawX, drawRunY, run, selectionForeground.handle);", "+\t}", "+}"]}], "num": 51920}
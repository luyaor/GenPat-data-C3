{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0e3bf14ccbcc8a3011bafd9f6812929f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cafe36c7f2a03a7f15dbd2f02fe651a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "1587016128f120779b698d8ab37efa85ed9c8e7c", "commitAfterChange": "0ccce2455aaf79db752792a412e87db0472b05bc", "methodNumberBeforeChange": 177, "methodNumberAfterChange": 177, "signatureBeforeChange": "  int applicationNextEventMatchingMask (int id, int sel, int mask, int expiration, int mode, int dequeue)", "signatureAfterChange": "  int applicationNextEventMatchingMask (int id, int sel, int mask, int expiration, int mode, int dequeue)", "diff": ["+\t\t/*", "+\t\t * Feature of Cocoa.  When an NSComboBox's items list is visible it runs an event", "+\t\t * loop that will close the list in response to a processed NSApplicationDefined", "+\t\t * event.", "+\t\t *", "+\t\t * Mozilla-style Browsers are a common source of NSApplicationDefined events that", "+\t\t * will cause this to happen, which is not desirable in the context of SWT.  The", "+\t\t * workaround is to detect this case and to not return the event that would trigger", "+\t\t * this to happen.", "+\t\t */", "+\t\tif (comboPoppedUp && mozillaCount > 0 && dequeue != 0) {", "+\t\t\tNSEvent event = new NSEvent(result);", "+\t\t\tif (event.type() == OS.NSApplicationDefined) {", "+\t\t\t\treturn 0;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2a3f3ad1d6fc069c1a3d630de9d075cd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "d0d36c693c6576b09f534da7893869c71cdfad17", "commitAfterChange": "25aa012e5674a6ce6fa0827a09432e17d307ea2a", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": " boolean checkDragDetect(Event event)", "signatureAfterChange": " boolean checkDragDetect(Event event)", "diff": ["-\tif (selection.x == selection.y) return false;", "-\tint offset = getOffsetAtPoint(event.x, event.y, null, true);", "-\tif (selection.x <= offset && offset < selection.y) {", "-\t\treturn dragDetect(event);", "+\tif (blockSelection && blockXLocation != -1) {", "+\t\tRectangle rect = getBlockSelectionRectangle();", "+\t\tif (rect.contains(event.x, event.y)) {", "+\t\t\treturn dragDetect(event);", "+\t\t}", "+\t} else {", "+\t\tif (selection.x == selection.y) return false;", "+\t\tint offset = getOffsetAtPoint(event.x, event.y, null, true);", "+\t\tif (selection.x <= offset && offset < selection.y) {", "+\t\t\treturn dragDetect(event);", "+\t\t}"]}], "num": 31131}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fa84682a23d227ebed0f3bdc264e8a98", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "53cac5adb01749152403a048fbbd5ac0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "d91e4b5ecfdff8b11aa847ae6afe5f72b8c3b795", "commitAfterChange": "65a88b2ecdae53a2eb10eb4e1bec2fff604f4b33", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "\r private int dragProcCallback(int widget, int client_data, int call_data)", "signatureAfterChange": "\r private int dragProcCallback(int widget, int client_data, int call_data)", "diff": ["-\tevent.operations = osOpToOp(callbackData.operations);\r", "+\tint allowedOperations = osOpToOp(callbackData.operations);\r", "+\tevent.operations = allowedOperations;\r", "-\tevent.detail  = osOpToOp(callbackData.operation);\r", "-\r", "+\t\r", "-\t\t\t\tdragOverHeartbeat = new Runnable() {\r", "-\t\t\t\t\tpublic void run() {\r", "-\t\t\t\t\t\tif (control.isDisposed() || dragOverStart == 0) return;\r", "-\t\t\t\t\t\tlong time = System.currentTimeMillis();\r", "-\t\t\t\t\t\tint delay = DRAGOVER_HYSTERESIS;\r", "-\t\t\t\t\t\tif (time >= dragOverStart) {\r", "-\t\t\t\t\t\t\tif (selectedDataType == null) {\r", "-\t\t\t\t\t\t\t\tselectedDataType = dragOverEvent.dataTypes[0];\r", "-\t\t\t\t\t\t\t}\r", "-\t\t\t\t\t\t\tDNDEvent event = new DNDEvent();\r", "-\t\t\t\t\t\t\tevent.widget = control;\r", "-\t\t\t\t\t\t\tevent.time = (int)time;\r", "-\t\t\t\t\t\t\tevent.x = dragOverEvent.x;\r", "-\t\t\t\t\t\t\tevent.y = dragOverEvent.y;\r", "-\t\t\t\t\t\t\tevent.dataTypes  = dragOverEvent.dataTypes;\r", "-\t\t\t\t\t\t\tevent.feedback = DND.FEEDBACK_SELECT;\r", "-\t\t\t\t\t\t\tevent.operations = dragOverEvent.operations;\r", "-\t\t\t\t\t\t\tevent.dataType  = selectedDataType;\r", "-\t\t\t\t\t\t\tevent.detail  = dragOverEvent.detail;\r", "-\t\t\t\t\t\t\tnotifyListeners(DND.DragOver, event);\r", "-\t\t\t\t\t\t\teffect.show(event.feedback, event.x, event.y);\r", "-\t\t\t\t\t\t} else {\r", "-\t\t\t\t\t\t\tdelay = (int)(dragOverStart - time);\r", "-\t\t\t\t\t\t}\r", "-\t\t\t\t\t\tcontrol.getDisplay().timerExec(delay, dragOverHeartbeat);\r", "+\t\t\t\tevent.detail = osOpToOp(callbackData.operation);\r", "+\t\t\t\tif ((getStyle() & DND.DROP_DEFAULT) != 0) {\r", "+\t\t\t\t\tint xDisplay = getDisplay().xDisplay;\r", "+\t\t\t\t\tint xWindow = OS.XDefaultRootWindow (xDisplay);\r", "+\t\t\t\t\tint [] unused = new int [1];\r", "+\t\t\t\t\tint[] mask_return = new int[1];\r", "+\t\t\t\t\tOS.XQueryPointer (xDisplay, xWindow, unused, unused, unused, unused, unused, unused, mask_return);\r", "+\t\t\t\t\tint mask = mask_return[0];\r", "+\t\t\t\t\tif ((mask & OS.ShiftMask) == 0 && (mask & OS.ControlMask) == 0) {\r", "+\t\t\t\t\t\tevent.detail = DND.DROP_DEFAULT;\r", "-\t\t\t\t};\r", "+\t\t\t\t}\r", "-\t\t\t\t\r", "-\t\t\t\tdragOverHeartbeat.run();\r", "-\t\t\t\r", "+\t\t\t\tevent.detail = lastOperation;\r", "+\t\t\t\tevent.detail = osOpToOp(callbackData.operation);\r", "+\t\t\t\tif ((getStyle() & DND.DROP_DEFAULT) != 0) {\r", "+\t\t\t\t\tint xDisplay = getDisplay().xDisplay;\r", "+\t\t\t\t\tint xWindow = OS.XDefaultRootWindow (xDisplay);\r", "+\t\t\t\t\tint [] unused = new int [1];\r", "+\t\t\t\t\tint[] mask_return = new int[1];\r", "+\t\t\t\t\tOS.XQueryPointer (xDisplay, xWindow, unused, unused, unused, unused, unused, unused, mask_return);\r", "+\t\t\t\t\tint mask = mask_return[0];\r", "+\t\t\t\t\tif ((mask & OS.ShiftMask) == 0 && (mask & OS.ControlMask) == 0) {\r", "+\t\t\t\t\t\tevent.detail = DND.DROP_DEFAULT;\r", "+\t\t\t\t\t}\r", "+\t\t\t\t}\r", "+\tif (event.detail == DND.DROP_DEFAULT) {\r", "+\t\tevent.detail = DND.DROP_MOVE;\r", "+\t}\r", "-\tint lastOperation = DND.DROP_NONE;\r", "-\tif (selectedDataType != null && ((event.detail & osOpToOp(callbackData.operations)) == event.detail)) {\r", "+\tlastOperation = DND.DROP_NONE;\r", "+\tif (selectedDataType != null && (event.detail & allowedOperations) != 0) {\r", "-\t\r", "-\r", "+\t\r", "+\tif (dragOverHeartbeat == null) {\r", "+\t\tdragOverHeartbeat = new Runnable() {\r", "+\t\t\t\t\tpublic void run() {\r", "+\t\t\t\t\t\tif (control.isDisposed() || dragOverStart == 0) return;\r", "+\t\t\t\t\t\tlong time = System.currentTimeMillis();\r", "+\t\t\t\t\t\tint delay = DRAGOVER_HYSTERESIS;\r", "+\t\t\t\t\t\tif (time >= dragOverStart) {\r", "+\t\t\t\t\t\t\tif (selectedDataType == null) {\r", "+\t\t\t\t\t\t\t\tselectedDataType = dragOverEvent.dataTypes[0];\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tDNDEvent event = new DNDEvent();\r", "+\t\t\t\t\t\t\tevent.widget = control;\r", "+\t\t\t\t\t\t\tevent.time = (int)time;\r", "+\t\t\t\t\t\t\tevent.x = dragOverEvent.x;\r", "+\t\t\t\t\t\t\tevent.y = dragOverEvent.y;\r", "+\t\t\t\t\t\t\tevent.dataTypes  = dragOverEvent.dataTypes;\r", "+\t\t\t\t\t\t\tevent.feedback = DND.FEEDBACK_SELECT;\r", "+\t\t\t\t\t\t\tint allowedOperations = dragOverEvent.operations;\r", "+\t\t\t\t\t\t\tevent.operations = allowedOperations;\r", "+\t\t\t\t\t\t\tevent.dataType  = selectedDataType;\r", "+\t\t\t\t\t\t\tevent.detail  = lastOperation;\r", "+\t\t\t\t\t\t\tnotifyListeners(DND.DragOver, event);\r", "+\t\t\t\t\t\t\teffect.show(event.feedback, event.x, event.y);\r", "+\t\t\t\t\t\t\tselectedDataType = null;\r", "+\t\t\t\t\t\t\tfor (int i = 0; i < dataTypes.length; i++) {\r", "+\t\t\t\t\t\t\t\tif (dataTypes[i].equals(event.dataType)) {\r", "+\t\t\t\t\t\t\t\t\tselectedDataType = event.dataType;\r", "+\t\t\t\t\t\t\t\t\tbreak;\r", "+\t\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t\tlastOperation = DND.DROP_NONE;\r", "+\t\t\t\t\t\t\tif (selectedDataType != null && ((event.detail & allowedOperations) == event.detail)) {\r", "+\t\t\t\t\t\t\t\tlastOperation = event.detail;\r", "+\t\t\t\t\t\t\t}\r", "+\t\t\t\t\t\t} else {\r", "+\t\t\t\t\t\t\tdelay = (int)(dragOverStart - time);\r", "+\t\t\t\t\t\t}\r", "+\t\t\t\t\t\tcontrol.getDisplay().timerExec(delay, dragOverHeartbeat);\r", "+\t\t\t\t\t}\r", "+\t\t\t\t};\r", "+\t\t\t\tdragOverHeartbeat.run();\r", "+\t}\r", "+\t\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "855a29d21b230d1df32c026f5ad67ce4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "7a42cc92cd5348bbf0e0886e024fbfe78c23cc9c", "commitAfterChange": "40516ff612bb729c6404f266bc1aa1d071b16ca1", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": "  private int dragProcCallback(int widget, int client_data, int call_data)", "signatureAfterChange": "  private void dragProcCallback(int widget, int client_data, int call_data)", "diff": ["-private int dragProcCallback(int widget, int client_data, int call_data) {", "+private void dragProcCallback(int widget, int client_data, int call_data) {", "+\tif (call_data == 0) return;", "-", "-\tif (callbackData.reason == OS.XmCR_DROP_SITE_ENTER_MESSAGE){", "-\t\treleaseDropInfo();", "-\t\t", "-\t\t// get the export targets", "-\t\tint ppExportTargets = OS.XtMalloc(4);", "-\t\tint pNumExportTargets = OS.XtMalloc(4);", "-\t\tint[] args = new int[]{", "-\t\t\tOS.XmNexportTargets,          ppExportTargets,", "-\t\t\tOS.XmNnumExportTargets,       pNumExportTargets", "-\t\t};", "-", "-\t\tOS.XtGetValues(callbackData.dragContext, args, args.length / 2);", "-\t\tint[] numExportTargets = new int[1];", "-\t\tOS.memmove(numExportTargets, pNumExportTargets, 4);", "-\t\tOS.XtFree(pNumExportTargets);", "-\t\tint[] pExportTargets = new int[1];", "-\t\tOS.memmove(pExportTargets, ppExportTargets, 4);", "-\t\tOS.XtFree(ppExportTargets);", "-\t\tint[] exportTargets = new int[numExportTargets[0]];", "-\t\tOS.memmove(exportTargets, pExportTargets[0], 4*numExportTargets[0]);", "-\t\t//?OS.XtFree(pExportTargets[0]);", "-", "-\t\tfor (int i = 0, length = exportTargets.length; i < length; i++){", "-\t\t\tfor (int j = 0, length2 = transferAgents.length; j < length2; j++){", "-\t\t\t\tTransferData transferData = new TransferData();", "-\t\t\t\ttransferData.type = exportTargets[i];", "-\t\t\t\tif (transferAgents[j].isSupportedType(transferData)) {", "-\t\t\t\t\tTransferData[] newDataTypes = new TransferData[dataTypes.length + 1];", "-\t\t\t\t\tSystem.arraycopy(dataTypes, 0, newDataTypes, 0, dataTypes.length);", "-\t\t\t\t\tnewDataTypes[dataTypes.length] = transferData;", "-\t\t\t\t\tdataTypes = newDataTypes;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (dataTypes == null || dataTypes.length == 0) {", "-\t\tcallbackData.dropSiteStatus = OS.XmDROP_SITE_INVALID;", "-\t\tcallbackData.operation = opToOsOp(DND.DROP_NONE);", "-\t\tOS.memmove(call_data, callbackData, XmDragProcCallback.sizeof);", "-\t\treturn 0;", "-\t}", "+\tif (callbackData.reason == OS.XmCR_DROP_SITE_LEAVE_MESSAGE) {", "+\t\tupdateDragOverHover(0, null);", "+\t\teffect.show(DND.FEEDBACK_NONE, 0, 0);", "+\t\t", "+\t\tif (callbackData.dropSiteStatus == OS.XmDROP_SITE_INVALID) {", "+\t\t\treturn;", "+\t\t}", "-\tif (selectedDataType == null) {", "-\t\tselectedDataType = dataTypes[0];", "+\t\tDNDEvent event = new DNDEvent();", "+\t\tevent.widget = this;", "+\t\tevent.time = callbackData.timeStamp;", "+\t\tevent.detail = DND.DROP_NONE;", "+\t\ttry {", "+\t\t\tnotifyListeners(DND.DragLeave, event);", "+\t\t} catch (Throwable e) {}", "+\t\treturn;", "-\tevent.widget     = this.control;", "-\tevent.time       = callbackData.timeStamp;", "-\tshort [] root_x = new short [1];", "-\tshort [] root_y = new short [1];", "-\tOS.XtTranslateCoords (this.control.handle, (short) callbackData.x, (short) callbackData.y, root_x, root_y);", "-\tevent.x          = root_x[0];", "-\tevent.y          = root_y[0];", "-\tevent.dataTypes  = dataTypes;", "-\tevent.feedback = DND.FEEDBACK_SELECT;", "-\tint allowedOperations = osOpToOp(callbackData.operations);", "-\tevent.operations = allowedOperations;", "-\tevent.dataType  = selectedDataType;", "+\tif (!setEventData(callbackData.operations, callbackData.operation, callbackData.dragContext, callbackData.x, callbackData.y, callbackData.timeStamp, event)) {", "+\t\tcallbackData.dropSiteStatus = OS.XmDROP_SITE_INVALID;", "+\t\tcallbackData.operation = opToOsOp(DND.DROP_NONE);", "+\t\tOS.memmove(call_data, callbackData, XmDragProcCallback.sizeof);", "+\t\treturn;", "+\t}", "+\t", "+\tint allowedOperations = event.operations;", "+\tTransferData[] allowedDataTypes = new TransferData[event.dataTypes.length];", "+\tSystem.arraycopy(event.dataTypes, 0, allowedDataTypes, 0, allowedDataTypes.length);", "+\t", "+\tswitch (callbackData.reason) {", "+\t\tcase OS.XmCR_DROP_SITE_ENTER_MESSAGE :", "+\t\t\tevent.type = DND.DragEnter;", "+\t\t\tselectedDataType = null;", "+\t\t\tselectedOperation = DND.DROP_NONE;", "+\t\t\tdroppedEventData = null;", "+\t\t\tdropTransferObject = 0;", "+\t\t\tbreak;", "+\t\tcase OS.XmCR_DROP_SITE_MOTION_MESSAGE :", "+\t\t\tevent.type = DND.DragOver;", "+\t\t\tevent.dataType = selectedDataType;", "+\t\t\tevent.detail = selectedOperation;", "+\t\t\tbreak;", "+\t\tcase OS.XmCR_OPERATION_CHANGED :", "+\t\t\tevent.type = DND.DragOperationChanged;", "+\t\t\tevent.dataType = selectedDataType;", "+\t\t\tbreak;", "+\t}", "+\t", "+\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);", "-\t\tswitch (callbackData.reason) {", "-\t\t\tcase OS.XmCR_DROP_SITE_ENTER_MESSAGE :", "-\t\t\t\tevent.detail = osOpToOp(callbackData.operation);", "-\t\t\t\tif ((getStyle() & DND.DROP_DEFAULT) != 0) {", "-\t\t\t\t\tint xDisplay = getDisplay().xDisplay;", "-\t\t\t\t\tint xWindow = OS.XDefaultRootWindow (xDisplay);", "-\t\t\t\t\tint [] unused = new int [1];", "-\t\t\t\t\tint[] mask_return = new int[1];", "-\t\t\t\t\tOS.XQueryPointer (xDisplay, xWindow, unused, unused, unused, unused, unused, unused, mask_return);", "-\t\t\t\t\tint mask = mask_return[0];", "-\t\t\t\t\tif ((mask & OS.ShiftMask) == 0 && (mask & OS.ControlMask) == 0) {", "-\t\t\t\t\t\tevent.detail = DND.DROP_DEFAULT;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);", "-\t\t\t\tnotifyListeners(DND.DragEnter, event);", "-\t\t\t\teffect.show(event.feedback, event.x, event.y);", "-\t\t\t\tbreak;", "-\t\t\tcase OS.XmCR_DROP_SITE_MOTION_MESSAGE :", "-\t\t\t\tevent.detail = lastOperation;", "-\t\t\t\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);", "-\t\t\t\tnotifyListeners(DND.DragOver, event);", "-\t\t\t\teffect.show(event.feedback, event.x, event.y);", "-\t\t\t\tbreak;", "-\t\t\tcase OS.XmCR_OPERATION_CHANGED :", "-\t\t\t\tevent.detail = osOpToOp(callbackData.operation);", "-\t\t\t\tif ((getStyle() & DND.DROP_DEFAULT) != 0) {", "-\t\t\t\t\tint xDisplay = getDisplay().xDisplay;", "-\t\t\t\t\tint xWindow = OS.XDefaultRootWindow (xDisplay);", "-\t\t\t\t\tint [] unused = new int [1];", "-\t\t\t\t\tint[] mask_return = new int[1];", "-\t\t\t\t\tOS.XQueryPointer (xDisplay, xWindow, unused, unused, unused, unused, unused, unused, mask_return);", "-\t\t\t\t\tint mask = mask_return[0];", "-\t\t\t\t\tif ((mask & OS.ShiftMask) == 0 && (mask & OS.ControlMask) == 0) {", "-\t\t\t\t\t\tevent.detail = DND.DROP_DEFAULT;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tupdateDragOverHover(DRAGOVER_HYSTERESIS, event);", "-\t\t\t\tnotifyListeners(DND.DragOperationChanged, event);", "-\t\t\t\teffect.show(event.feedback, event.x, event.y);", "-\t\t\t\tbreak;", "-\t\t\tcase OS.XmCR_DROP_SITE_LEAVE_MESSAGE :", "-\t\t\t\tevent.detail  = DND.DROP_NONE;", "-\t\t\t\tupdateDragOverHover(0, null);", "-\t\t\t\tnotifyListeners(DND.DragLeave, event);", "-\t\t\t\teffect.show(DND.FEEDBACK_NONE, 0, 0);", "-\t\t\t\treturn 0;", "-\t\t}", "+\t\tnotifyListeners(event.type, event);", "-\t\treturn 0;", "+\t\treturn;", "+\t}", "+", "+\tif (event.detail == DND.DROP_DEFAULT) {", "+\t\tevent.detail = (allowedOperations & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;", "-\tif (event.detail == DND.DROP_DEFAULT) {", "-\t\tevent.detail = DND.DROP_MOVE;", "-\t}", "-\tfor (int i = 0; i < dataTypes.length; i++) {", "-\t\tif (dataTypes[i].equals(event.dataType)) {", "-\t\t\tselectedDataType = event.dataType;", "-\t\t\tbreak;", "+\tif (event.dataType != null) {", "+\t\tfor (int i = 0; i < allowedDataTypes.length; i++) {", "+\t\t\tif (allowedDataTypes[i].type == event.dataType.type) {", "+\t\t\t\tselectedDataType = event.dataType;", "+\t\t\t\tbreak;", "+\t\t\t}", "-\tlastOperation = DND.DROP_NONE;", "-\tif (selectedDataType != null && (event.detail & allowedOperations) != 0) {", "-\t\tlastOperation = event.detail;", "+", "+\tselectedOperation = DND.DROP_NONE;", "+\tif (selectedDataType != null && (allowedOperations & event.detail) != 0) {", "+\t\tselectedOperation = event.detail;", "+\t", "+\teffect.show(event.feedback, event.x, event.y);", "+", "-\tcallbackData.operation = opToOsOp(lastOperation);", "+\tcallbackData.operation = opToOsOp(selectedOperation);", "-\tif (dragOverHeartbeat == null) {", "-\t\tdragOverHeartbeat = new Runnable() {", "-\t\t\t\t\tpublic void run() {", "-\t\t\t\t\t\tif (control.isDisposed() || dragOverStart == 0) return;", "-\t\t\t\t\t\tlong time = System.currentTimeMillis();", "-\t\t\t\t\t\tint delay = DRAGOVER_HYSTERESIS;", "-\t\t\t\t\t\tif (time >= dragOverStart) {", "-\t\t\t\t\t\t\tif (selectedDataType == null) {", "-\t\t\t\t\t\t\t\tselectedDataType = dragOverEvent.dataTypes[0];", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tDNDEvent event = new DNDEvent();", "-\t\t\t\t\t\t\tevent.widget = control;", "-\t\t\t\t\t\t\tevent.time = (int)time;", "-\t\t\t\t\t\t\tevent.x = dragOverEvent.x;", "-\t\t\t\t\t\t\tevent.y = dragOverEvent.y;", "-\t\t\t\t\t\t\tevent.dataTypes  = dragOverEvent.dataTypes;", "-\t\t\t\t\t\t\tevent.feedback = DND.FEEDBACK_SELECT;", "-\t\t\t\t\t\t\tint allowedOperations = dragOverEvent.operations;", "-\t\t\t\t\t\t\tevent.operations = allowedOperations;", "-\t\t\t\t\t\t\tevent.dataType  = selectedDataType;", "-\t\t\t\t\t\t\tevent.detail  = lastOperation;", "-\t\t\t\t\t\t\tnotifyListeners(DND.DragOver, event);", "-\t\t\t\t\t\t\teffect.show(event.feedback, event.x, event.y);", "-\t\t\t\t\t\t\tselectedDataType = null;", "-\t\t\t\t\t\t\tfor (int i = 0; i < dataTypes.length; i++) {", "-\t\t\t\t\t\t\t\tif (dataTypes[i].equals(event.dataType)) {", "-\t\t\t\t\t\t\t\t\tselectedDataType = event.dataType;", "-\t\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\tlastOperation = DND.DROP_NONE;", "-\t\t\t\t\t\t\tif (selectedDataType != null && ((event.detail & allowedOperations) == event.detail)) {", "-\t\t\t\t\t\t\t\tlastOperation = event.detail;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tdelay = (int)(dragOverStart - time);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tcontrol.getDisplay().timerExec(delay, dragOverHeartbeat);", "-\t\t\t\t\t}", "-\t\t\t\t};", "-\t\t\t\tdragOverHeartbeat.run();", "+\tif (callbackData.reason == OS.XmCR_DROP_SITE_ENTER_MESSAGE) {", "+\t\tdragOverHeartbeat.run();", "-\t", "-\treturn 0;"]}], "num": 7634}
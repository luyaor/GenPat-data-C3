{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "889e1e1aecc43c936a5172fe7a69dc2f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c54d998e68a22bec06ea3267619030f0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "8e29176e328fb85abab72755c07683a13c0844d1", "commitAfterChange": "a93eff7cb02aa6fb77239dc8382348bd32f29cc8", "methodNumberBeforeChange": 63, "methodNumberAfterChange": 63, "signatureBeforeChange": "  int imageIndex (Image image, int column)", "signatureAfterChange": "  int imageIndex (Image image, int column)", "diff": ["-\t\tif (itemHeight != -1) setItemHeight (false);", "+\t\tsetItemHeight (false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "46554ee4f5cf4734377a1a62c13e174f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "6694f7adfb051ac9443f1ff982e7e8aca0da3d3c", "commitAfterChange": "608e60eecad7d4d0edcb046e3c07ac24e4f3fac1", "methodNumberBeforeChange": 298, "methodNumberAfterChange": 297, "signatureBeforeChange": " \tint get_indexInParent(int pIndexInParent)", "signatureAfterChange": " \tint get_indexInParent(int pIndexInParent)", "diff": ["-\t\tif (indexInParent == -1) {", "-\t\t\t/* The application did not implement CHILDID_CHILD_INDEX,", "-\t\t\t * so determine the index by looping through the parent's", "-\t\t\t * children looking for this Accessible. This may be slow,", "-\t\t\t * so applications are strongly encouraged to implement", "-\t\t\t * getChild for CHILDID_CHILD_INDEX.", "-\t\t\t */", "-\t\t\t// TODO", "-\t\t}\t", "+//\t\tif (indexInParent == -1) {", "+//\t\t\t/* The application did not implement CHILDID_CHILD_INDEX,", "+//\t\t\t * so determine the index by looping through the parent's", "+//\t\t\t * children looking for this Accessible. This may be slow,", "+//\t\t\t * so applications are strongly encouraged to implement", "+//\t\t\t * getChild for CHILDID_CHILD_INDEX.", "+//\t\t\t */", "+//\t\t\t// TODO", "+//\t\t\tint /*long*/ ppdispParent = OS.GlobalAlloc (OS.GMEM_FIXED | OS.GMEM_ZEROINIT, VARIANT.sizeof);", "+//\t\t\tint code = get_accParent(ppdispParent);", "+//\t\t\tif (code == COM.S_OK) {", "+//\t\t\t\tVARIANT v = getVARIANT(ppdispParent);", "+//\t\t\t\tif (v.vt == COM.VT_DISPATCH) {", "+//\t\t\t\t\tIAccessible accParent = new IAccessible(v.lVal);", "+//\t\t\t\t\tint /*long*/ pcountChildren = OS.GlobalAlloc (OS.GMEM_FIXED | OS.GMEM_ZEROINIT, 4);", "+//\t\t\t\t\tcode = accParent.get_accChildCount(pcountChildren);", "+//\t\t\t\t\tif (code == COM.S_OK) {", "+//\t\t\t\t\t\tint [] childCount = new int[1];", "+//\t\t\t\t\t\tOS.MoveMemory(childCount, pcountChildren, 4);", "+//\t\t\t\t\t\tint[] pcObtained = new int[1];", "+//\t\t\t\t\t\tint /*long*/ rgVarChildren = OS.GlobalAlloc (OS.GMEM_FIXED | OS.GMEM_ZEROINIT, VARIANT.sizeof * childCount[0]);", "+//\t\t\t\t\t\tSystem.out.println(\"Asking for AccessibleChildren\");", "+//\t\t\t\t\t\tcode = COM.AccessibleChildren(accParent.getAddress(), 0, childCount[0], rgVarChildren, pcObtained);", "+//\t\t\t\t\t\tif (code == COM.S_OK) {", "+//\t\t\t\t\t\t\tSystem.out.println(\"Got this far - now what?\");", "+//\t\t\t\t\t\t} else {", "+//\t\t\t\t\t\t\tSystem.out.println(\"AccessibleChildren failed? code=\" + code);", "+//\t\t\t\t\t\t}", "+//\t\t\t\t\t\tOS.GlobalFree(rgVarChildren);", "+//\t\t\t\t\t} else {", "+//\t\t\t\t\t\tSystem.out.println(\"get_accChildCount failed? code=\" + code);", "+//\t\t\t\t\t}", "+//\t\t\t\t\tOS.GlobalFree (pcountChildren);", "+//\t\t\t\t} else {", "+//\t\t\t\t\tSystem.out.println(\"get_accParent did not return VT_DISPATCH? It returned: \" + v.vt);", "+//\t\t\t\t}", "+//\t\t\t\tCOM.VariantClear(ppdispParent);", "+//\t\t\t\tOS.GlobalFree (ppdispParent);", "+//\t\t\t} else {", "+//\t\t\t\tSystem.out.println(\"get_accParent failed? code=\" + code);", "+//\t\t\t}", "+//\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7be0a1dfbeb11f6bde7fa908e40115b5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "aa8fe2466704a86c2347468505ba6d37d1ddecb9", "commitAfterChange": "9522aedcd06ecfbd8b304e5145c09e5b64653247", "methodNumberBeforeChange": 252, "methodNumberAfterChange": 252, "signatureBeforeChange": " boolean invokeBlockAction(int action)", "signatureAfterChange": " boolean invokeBlockAction(int action)", "diff": ["-\t\t\tclearBlockSelection(true, blockXLocation != -1);", "+\t\t\tclearBlockSelection(false, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1711b5406fe18ee46f61d5e5bde2020c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "d8412f497b9eda314dcd434f6c4eca9fa48d514e", "commitAfterChange": "113e2e23ec0a72d38b1b9f5a946e21b798f78520", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " void createItem (TreeItem item, int index)", "signatureAfterChange": " void createItem (TreeItem item, int index)", "diff": ["-\t\tif (drawCount == 0) {", "-\t\t\tgetVerticalBar ().setSelection (topIndex);", "-\t\t}", "+\t\tgetVerticalBar ().setSelection (topIndex);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7bb88297f0d02426055c73b47f8868e8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "d8412f497b9eda314dcd434f6c4eca9fa48d514e", "commitAfterChange": "113e2e23ec0a72d38b1b9f5a946e21b798f78520", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " void destroyItem (TreeItem item)", "signatureAfterChange": " void destroyItem (TreeItem item)", "diff": ["-\t\t\tif (drawCount == 0) {", "-\t\t\t\tgetVerticalBar ().setSelection (topIndex);", "-\t\t\t}", "+\t\t\tgetVerticalBar ().setSelection (topIndex);"]}], "num": 36229}
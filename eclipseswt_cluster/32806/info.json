{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c5fd86cc5c96616814cfbe9edf9d26d3", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "777269d92142b28220270692d1349e2b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet210.java", "commitBeforeChange": "013e7e505e76a1b890120d3168f823bda20c0962", "commitAfterChange": "581e2be923c73fa26ac8208dc1b808c769e30134", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public static void main (String [] args)", "signatureAfterChange": " \t public static void main (String [] args)", "diff": ["+\t\tPoint selection;", "-\t\t\tPoint selection = text1.getSelection();", "-\t\t\ttry {", "-\t\t\t\tint offset = text1.getOffsetAtLocation(new Point(e.x, e.y));", "-\t\t\t\te.doit = offset > selection.x && offset < selection.y;", "-\t\t\t} catch (IllegalArgumentException ex) {", "-\t\t\t}", "+\t\t\tselection = text1.getSelection();", "+\t\t\te.doit = selection.x != selection.y;", "-\t\t\tPoint selection = text1.getSelection();", "-\t\t\tif (selection.x != selection.y) {", "-\t\t\t\te.data = text1.getText(selection.x, selection.y-1);", "-\t\t\t}", "+\t\t\te.data = text1.getText(selection.x, selection.y-1);", "-\t\t\t\ttext1.insert(\"\");", "+\t\t\t\ttext1.replaceTextRange(selection.x, selection.y - selection.x, \"\");", "+\t\t\tselection = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a9ed65214acb641a986ce5a751411585", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "0f19f7facaa6f5437461d810cf683d633c76ff87", "commitAfterChange": "bd05df9dcb7d1652d6e5b72fffe12747a100cab4", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 102, "signatureBeforeChange": " \t LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": " \t LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\tif (ignoreResize) {", "-\t\t\t\t/*", "-\t\t\t\t* Feature in Windows.  When LVSCW_AUTOSIZE_USEHEADER is used", "-\t\t\t\t* with LVM_SETCOLUMNWIDTH to resize the last column, the last", "-\t\t\t\t* column is expanded to fill the client area.  The fix is to", "-\t\t\t\t* insert and remove a temporary last column for the duration", "-\t\t\t\t* of LVM_SETCOLUMNWIDTH.  As a result, LVN_GETDISPINFO should", "-\t\t\t\t* be ignored for the temporary column.", "-\t\t\t\t*/", "-\t\t\t\tint hwndHeader = OS.SendMessage (handle, OS.LVM_GETHEADER, 0, 0);", "-\t\t\t\tint count = OS.SendMessage (hwndHeader, OS.HDM_GETITEMCOUNT, 0, 0);", "-\t\t\t\tif (count == 1 && columns [0] == null) count = 0;", "-\t\t\t\tif (count - 1 >= plvfi.iSubItem) break;", "-\t\t\t}", "+\t\t\t/*", "+\t\t\t* Feature in Windows.  When LVSCW_AUTOSIZE_USEHEADER is used", "+\t\t\t* with LVM_SETCOLUMNWIDTH to resize the last column, the last", "+\t\t\t* column is expanded to fill the client area.  The fix is to", "+\t\t\t* insert and remove a temporary last column for the duration", "+\t\t\t* of LVM_SETCOLUMNWIDTH.  As a result, LVN_GETDISPINFO should", "+\t\t\t* be ignored for the temporary column.", "+\t\t\t*/", "+\t\t\tif (ignoreResize && (plvfi.iSubItem >= columns.length || columns [plvfi.iSubItem] == null)) break;", "+"]}], "num": 32806}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "488ea8f6dca32e8070d13d1aa438c176", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "81f24701286e23f64b7da76202100117", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/BusyIndicator.java", "commitBeforeChange": "800f37e4ba6af1142a8f20dd9d1fe1dd5f3a77b9", "commitAfterChange": "bae8b23adf7bc3b1466643065f2bbf62746953bd", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static void showWhile(Display display, Runnable runnable)", "signatureAfterChange": "  public static void showWhile(Display display, Runnable runnable)", "diff": ["-\tCursor cursor = new Cursor(display, SWT.CURSOR_WAIT);", "+\tCursor cursor = (Cursor)display.getData(BUSY_CURSOR);", "+\tif (cursor == null || cursor.isDisposed()) {", "+\t\tcursor = new Cursor(display, SWT.CURSOR_WAIT);", "+\t\tdisplay.setData(BUSY_CURSOR, cursor);", "+\t\tdisplay.addListener(SWT.Dispose, new Listener() {", "+\t\t\tpublic void handleEvent(Event e) {", "+\t\t\t\tDisplay display = e.display;", "+\t\t\t\tCursor cursor =  (Cursor)display.getData(BUSY_CURSOR);", "+\t\t\t\tif (cursor != null) {", "+\t\t\t\t\tif (!cursor.isDisposed()) cursor.dispose();", "+\t\t\t\t\tdisplay.setData(BUSY_CURSOR, null);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t});", "+\t}", "-\t\tif (cursor != null && !cursor.isDisposed()) {", "-\t\t\tcursor.dispose();", "-\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "206cd59d0e5b95854f00bb9a74e5d117", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/gtk/org/eclipse/swt/program/Program.java", "commitBeforeChange": "da766f7bc3f5471c9dd6ec80dff575faff648ae6", "commitAfterChange": "497588966a91a19233c12cd8d5de53a0e24efda2", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static int getDesktop(Display display)", "signatureAfterChange": " static int getDesktop(final Display display)", "diff": ["-static int getDesktop(Display display) {", "+static int getDesktop(final Display display) {", "+\t\t\tint /*long*/ icon_theme = GNOME.gnome_icon_theme_new();", "+\t\t\tdisplay.setData(ICON_THEME_DATA, new LONG(icon_theme));", "+\t\t\tdisplay.addListener(SWT.Dispose, new Listener() {", "+\t\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\t\tLONG gnomeIconTheme = (LONG)display.getData(ICON_THEME_DATA);", "+\t\t\t\t\tif (gnomeIconTheme == null) return;", "+\t\t\t\t\tdisplay.setData(ICON_THEME_DATA, null);", "+\t\t\t\t\t/* ", "+\t\t\t\t\t * Note.  gnome_icon_theme_new uses g_object_new to allocate the", "+\t\t\t\t\t * data it returns. Use g_object_unref to free the pointer it returns.", "+\t\t\t\t\t */", "+\t\t\t\t\tif (gnomeIconTheme.value != 0) GNOME.g_object_unref(gnomeIconTheme.value);", "+\t\t\t\t}", "+\t\t\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "784b2c4082d3476fae5b47b65e29c812", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/motif/org/eclipse/swt/program/Program.java", "commitBeforeChange": "497588966a91a19233c12cd8d5de53a0e24efda2", "commitAfterChange": "4e868ef6a0ca3dbb2765f59472200d76cfb9b2e4", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " static int getDesktop(Display display)", "signatureAfterChange": " static int getDesktop(final Display display)", "diff": ["-static int getDesktop(Display display) {", "+static int getDesktop(final Display display) {", "-\t", "+", "+\t\t\tint /*long*/ icon_theme = GNOME.gnome_icon_theme_new();", "+\t\t\tdisplay.setData(ICON_THEME_DATA, new Integer(icon_theme));", "+\t\t\tdisplay.addListener(SWT.Dispose, new Listener() {", "+\t\t\t\tpublic void handleEvent(Event event) {", "+\t\t\t\t\tInteger gnomeIconTheme = (Integer)display.getData(ICON_THEME_DATA);", "+\t\t\t\t\tif (gnomeIconTheme == null) return;", "+\t\t\t\t\tdisplay.setData(ICON_THEME_DATA, null);", "+\t\t\t\t\tint iconThemeValue = gnomeIconTheme.intValue();", "+\t\t\t\t\t/* ", "+\t\t\t\t\t * Note.  gnome_icon_theme_new uses g_object_new to allocate the", "+\t\t\t\t\t * data it returns. Use g_object_unref to free the pointer it returns.", "+\t\t\t\t\t */", "+\t\t\t\t\tif (iconThemeValue != 0) GNOME.g_object_unref(iconThemeValue);", "+\t\t\t\t}", "+\t\t\t});"]}], "num": 25581}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "893fe69324a5ba076fb55313fc38c038", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f197f2a1934cd6503ca664bd5d27429", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "e19b8929298db4194771a475b4b9ef56a8238374", "commitAfterChange": "ca0c5209be7fe694c5578ad160491b05c77a1894", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": " public boolean open ()", "signatureAfterChange": " public boolean open ()", "diff": ["-\ttracking = true;", "-\thandle = OS.gcnew_Window ();", "+\tjniRef = OS.NewGlobalRef (this);", "+\tif (jniRef == 0) error (SWT.ERROR_NO_HANDLES);", "+\thandle = OS.gcnew_Popup ();", "+\tOS.Popup_AllowsTransparency (handle, true);", "+\t", "-\tOS.ContentControl_Content (handle, canvasHandle);", "-\tif (parent != null) {", "-\t\tRectangle bounds = parent.getBounds ();//\twrong", "-\t\tOS.Window_Left (handle, bounds.x);", "-\t\tOS.Window_Top (handle, bounds.y);", "-\t\tOS.FrameworkElement_Width (handle, bounds.width);", "-\t\tOS.FrameworkElement_Height (handle, bounds.height);", "-\t} else {", "-\t\tOS.Window_Left (handle, 0);", "-\t\tOS.Window_Top (handle, 0);", "-\t\tOS.FrameworkElement_Width (handle, OS.SystemParameters_PrimaryScreenWidth ());", "-\t\tOS.FrameworkElement_Height (handle, OS.SystemParameters_PrimaryScreenHeight ());", "+\tOS.Popup_Child (handle, canvasHandle);", "+\tOS.UIElement_IsHitTestVisible (canvasHandle, false);", "+\tOS.FrameworkElement_FocusVisualStyle (canvasHandle, 0);", "+\tif (clientCursor != 0) {", "+\t\tOS.FrameworkElement_Cursor (canvasHandle, clientCursor);", "-\tOS.Window_ShowInTaskbar (handle, false);", "-\tOS.Window_AllowsTransparency (handle, true);", "-\tOS.Window_ResizeMode (handle, OS.ResizeMode_NoResize);", "-\tOS.Window_WindowStyle (handle, OS.WindowStyle_None);", "-\tif (clientCursor != 0) OS.FrameworkElement_Cursor (handle, clientCursor);", "-\tint color = OS.Colors_Black;", "-\tint brush = OS.gcnew_SolidColorBrush (color);", "-\tOS.Brush_Opacity (brush, 0.01);", "-\tOS.Control_Background (handle, brush);", "-\tOS.GCHandle_Free (brush);", "-\t", "-\tint children = OS.Panel_Children (canvasHandle);", "-\tint stroke = stippled ? 3 : 1;", "-\tbrush = stippled ? OS.Brushes_Navy() : OS.Brushes_Black();", "-\trectShapes = new int[rectangles.length];", "-\tfor (int i = 0; i < rectShapes.length; i++) {", "-\t\tint child = rectShapes [i] = OS.gcnew_Rectangle ();", "-\t\tOS.UIElementCollection_Add (children, child);", "-\t\tOS.Shape_StrokeThickness(child, stroke);", "-\t\tOS.Shape_Stroke(child, brush);", "-\t}", "-\tOS.GCHandle_Free(brush);", "+", "-\tjniRef = OS.NewGlobalRef (this);", "-\tif (jniRef == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "-\tint handler = OS.gcnew_KeyEventHandler (jniRef, \"HandleKeyDown\");", "-\tOS.UIElement_KeyDown (handle, handler);\t", "-\tOS.GCHandle_Free (handler);", "-\thandler = OS.gcnew_KeyEventHandler (jniRef, \"HandleKeyUp\");", "-\tOS.UIElement_KeyUp (handle, handler);", "-\tOS.GCHandle_Free (handler);", "-\thandler = OS.gcnew_MouseEventHandler (jniRef, \"HandleMouseMove\");", "-\tOS.UIElement_MouseMove (handle, handler);", "-\tOS.GCHandle_Free (handler);", "-\thandler = OS.gcnew_MouseButtonEventHandler (jniRef, \"HandleMouseUp\");", "-\tOS.UIElement_MouseUp (handle, handler);", "-\tOS.GCHandle_Free (handler);", "-\thandler = OS.gcnew_MouseButtonEventHandler (jniRef, \"HandleMouseDown\");", "-\tOS.UIElement_MouseDown (handle, handler);", "-\tOS.GCHandle_Free (handler);", "-\t", "-\tOS.UIElement_Focus (handle);", "-\tOS.Window_Show (handle);", "+\tOS.Popup_IsOpen (handle, true);", "+\tOS.UIElement_Focusable (canvasHandle, true);", "+\tOS.UIElement_Focus (canvasHandle);//TODO DOTED LINE", "+\tOS.UIElement_CaptureMouse (canvasHandle);", "-\t\tint point = OS.Mouse_GetPosition (handle);", "+\t\tint pointCanvas = OS.Mouse_GetPosition (canvasHandle);", "+\t\tint point = OS.Visual_PointToScreen (canvasHandle, pointCanvas);", "+\t\tOS.GCHandle_Free (pointCanvas);", "+\tint handler = OS.gcnew_KeyEventHandler (jniRef, \"HandleKeyDown\");", "+\tOS.UIElement_KeyDown (canvasHandle, handler);\t", "+\tOS.GCHandle_Free (handler);", "+\thandler = OS.gcnew_KeyEventHandler (jniRef, \"HandleKeyUp\");", "+\tOS.UIElement_KeyUp (canvasHandle, handler);", "+\tOS.GCHandle_Free (handler);", "+\thandler = OS.gcnew_MouseEventHandler (jniRef, \"HandleMouseMove\");", "+\tOS.UIElement_MouseMove (canvasHandle, handler);", "+\tOS.GCHandle_Free (handler);", "+\thandler = OS.gcnew_MouseButtonEventHandler (jniRef, \"HandleMouseUp\");", "+\tOS.UIElement_MouseUp (canvasHandle, handler);", "+\tOS.GCHandle_Free (handler);", "+\thandler = OS.gcnew_MouseButtonEventHandler (jniRef, \"HandleMouseDown\");", "+\tOS.UIElement_MouseDown (canvasHandle, handler);", "+\tOS.GCHandle_Free (handler);", "+\t", "-\tDisplay display = Display.getCurrent();", "-\twhile (tracking && !cancelled) {", "-\t\tif (!display.readAndDispatch()) {", "-\t\t\tdisplay.sleep();", "-\t\t}", "-\t}", "+\tframe = OS.gcnew_DispatcherFrame ();", "+\tOS.Dispatcher_PushFrame (frame);", "-\tfor (int i = 0; i < rectShapes.length; i++) {", "-\t\tint child = rectShapes [i];", "-\t\tOS.UIElementCollection_Remove (children, child);", "-\t\tOS.GCHandle_Free (child);", "-\t}", "-\tOS.GCHandle_Free (children);", "-\tOS.Window_Close (handle);", "+\tOS.UIElement_ReleaseMouseCapture (canvasHandle);", "+\tOS.Popup_IsOpen (handle, false);", "-\tjniRef = 0;", "+\tif (frame != 0) OS.GCHandle_Free (frame);", "-\thandle = 0; ", "-\trectShapes = null;", "-\ttracking = false;", "+\tjniRef = handle = canvasHandle = frame = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0df97982a5a3358ecc190b8e27cde2df", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "222c99bbebba9ab406a0910e7665c9a35629b288", "commitAfterChange": "a44223adfcd4e06bb8c8891ca5fa698e5d0b0ad8", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  int createCellTemplate (int index)", "signatureAfterChange": "  int createCellTemplate (int index)", "diff": ["+\tint swtStackPanelType = OS.SWTStackPanel_typeid ();", "+\tint onRenderNode = OS.gcnew_FrameworkElementFactory (swtStackPanelType);", "+\tOS.GCHandle_Free (swtStackPanelType);", "+\tint jniRefProperty = OS.SWTStackPanel_JNIRefProperty ();", "+\tOS.FrameworkElementFactory_SetValueInt (onRenderNode, jniRefProperty, jniRef);", "+\tOS.GCHandle_Free (jniRefProperty);", "+\tint stackPanelName = createDotNetString (STACKPANEL_PART_NAME, false);", "-\tint stackPanelNode = OS.gcnew_FrameworkElementFactory (stackPanelType);", "+\tint cellContentNode = OS.gcnew_FrameworkElementFactory (stackPanelType, stackPanelName);", "+\tOS.GCHandle_Free (stackPanelType);", "+\tOS.GCHandle_Free (stackPanelName);", "+\t\tOS.GCHandle_Free (checkBoxType);", "+\t\tOS.GCHandle_Free (verticalAlignmentProperty);", "+\t\tOS.GCHandle_Free (marginProperty);", "+\t\tOS.GCHandle_Free (thickness);", "-\t\tOS.FrameworkElementFactory_AppendChild (stackPanelNode, checkBoxNode);", "-\t\t//binding", "-\t\tint checkPath = createDotNetString (\"Check\", false);", "-\t\tint checkBinding = OS.gcnew_Binding (checkPath);", "-\t\tint isCheckedProperty = OS.ToggleButton_IsCheckedProperty ();", "-\t\tOS.FrameworkElementFactory_SetBinding (checkBoxNode, isCheckedProperty, checkBinding);", "-\t\tOS.GCHandle_Free (checkPath);", "-\t\tOS.GCHandle_Free (checkBinding);", "-\t\tOS.GCHandle_Free (isCheckedProperty);", "-\t\tOS.GCHandle_Free (checkBoxName);", "-\t\tOS.GCHandle_Free (thickness);", "-\t\tOS.GCHandle_Free (marginProperty);", "-\t\tOS.GCHandle_Free (verticalAlignmentProperty);", "+\t\tOS.FrameworkElementFactory_AppendChild (cellContentNode, checkBoxNode);", "+\t\tint fooProperty = OS.FrameworkElement_NameProperty();", "+\t\tOS.FrameworkElementFactory_SetValue (checkBoxNode, fooProperty, checkBoxName);", "+\t\tOS.GCHandle_Free (checkBoxName);", "+\t\tOS.GCHandle_Free (fooProperty);", "-\t\tOS.GCHandle_Free (checkBoxType);", "+\tOS.GCHandle_Free (textName);", "+\tOS.GCHandle_Free (textType);", "-\tint marginProperty = OS.FrameworkElement_MarginProperty ();", "-\tint thickness = OS.gcnew_Thickness (0, 0, 4, 0);", "-\tOS.FrameworkElementFactory_SetValue (imageNode, marginProperty, thickness);", "-\tint orientationProperty = OS.StackPanel_OrientationProperty ();", "-\tOS.FrameworkElementFactory_SetValueOrientation (stackPanelNode, orientationProperty, OS.Orientation_Horizontal);", "-\tOS.FrameworkElementFactory_AppendChild (stackPanelNode, imageNode);", "-\tOS.FrameworkElementFactory_AppendChild (stackPanelNode, textNode);", "-\tOS.FrameworkTemplate_VisualTree (template, stackPanelNode);", "-\t", "-\t//bindings", "-\tint cellConverter = OS.gcnew_SWTCellConverter ();", "-\tint textPath = createDotNetString (\"Text\", false);", "-\tint textBinding = OS.gcnew_Binding (textPath);", "-\tOS.Binding_Converter (textBinding, cellConverter);", "-\tOS.Binding_ConverterParameter (textBinding, index);", "-\tint textProperty = OS.TextBlock_TextProperty ();", "-\tOS.FrameworkElementFactory_SetBinding (textNode, textProperty, textBinding);", "-\tint imagePath = createDotNetString (\"Image\", false);", "-\tint imageBinding = OS.gcnew_Binding (imagePath);", "-\tOS.Binding_Converter (imageBinding, cellConverter);", "-\tOS.Binding_ConverterParameter (imageBinding, index);", "-\tint imageProperty = OS.Image_SourceProperty ();", "-\tOS.FrameworkElementFactory_SetBinding (imageNode, imageProperty, imageBinding);", "-\tOS.GCHandle_Free (textBinding);", "-\tOS.GCHandle_Free (textPath);", "-\tOS.GCHandle_Free (textProperty);", "-\tOS.GCHandle_Free (imageBinding);", "-\tOS.GCHandle_Free (imagePath);", "-\tOS.GCHandle_Free (imageProperty);", "-\tOS.GCHandle_Free (cellConverter);", "-\t", "-\tOS.GCHandle_Free (textName);", "+\tOS.GCHandle_Free (imageType);", "+\tint thickness = OS.gcnew_Thickness (0, 0, 4, 0);", "+\tint marginProperty = OS.FrameworkElement_MarginProperty ();", "+\tOS.FrameworkElementFactory_SetValue (imageNode, marginProperty, thickness);", "-\tOS.GCHandle_Free (stackPanelType);", "-\tOS.GCHandle_Free (imageType);", "-\tOS.GCHandle_Free (textType);", "-\tOS.GCHandle_Free (stackPanelNode);", "-\tOS.GCHandle_Free (textNode);", "-\tOS.GCHandle_Free (imageNode);", "+\tint orientationProperty = OS.StackPanel_OrientationProperty ();", "+\tOS.FrameworkElementFactory_SetValueOrientation (cellContentNode, orientationProperty, OS.Orientation_Horizontal);", "+\tOS.FrameworkElementFactory_AppendChild (cellContentNode, imageNode);", "+\tOS.GCHandle_Free (imageNode);", "+\tOS.FrameworkElementFactory_AppendChild (cellContentNode, textNode);", "+\tOS.GCHandle_Free (textNode);", "+\tOS.FrameworkElementFactory_AppendChild (onRenderNode, cellContentNode);", "+\tOS.GCHandle_Free (cellContentNode);", "+\tOS.FrameworkTemplate_VisualTree (template, onRenderNode);", "+\tOS.GCHandle_Free (onRenderNode);"]}], "num": 27578}
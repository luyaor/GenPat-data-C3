{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7b962360c0c67e59beb4ea058960ea76", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "198d5c8bb5113d73b00e4d4ba0464c08", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "8fcb69bd9ef5f3703415156d7ea495d1528c0bed", "commitAfterChange": "830f06eadee48db7328f257efefef81e6ded0f5e", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 13, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": " void createHandle (int index)", "diff": ["-\tint decorations = OS.kWindowCompositingAttribute;", "-    /* AW", "+\tint windowActivationScope= -1;", "+", "+\tint decorations = OS.kWindowCompositingAttribute | OS.kWindowStandardHandlerAttribute;", "+", "+\t/* AW", "-\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.kWindowResizableAttribute | OS.kWindowLiveResizeAttribute;", "-\t\t//if ((style & SWT.BORDER) == 0) decorations |= OS.kWindowNoShadowAttribute;", "-\t//} else {", "-\t//\tdecorations |= OS.kWindowNoShadowAttribute;", "+\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.kWindowResizableAttribute;", "-    /* AW", "-\tint inputMode = OS.MWM_INPUT_MODELESS;", "-\tif ((style & SWT.PRIMARY_MODAL) != 0) inputMode = OS.MWM_INPUT_PRIMARY_APPLICATION_MODAL;", "-\tif ((style & SWT.APPLICATION_MODAL) != 0) inputMode = OS.MWM_INPUT_FULL_APPLICATION_MODAL;", "-\tif ((style & SWT.SYSTEM_MODAL) != 0) inputMode = OS.MWM_INPUT_SYSTEM_MODAL;", "-    */", "+\t// if resizable enable 'live resize'", "+\tif ((decorations & OS.kWindowResizableAttribute) != 0)", "+\t\tdecorations |= OS.kWindowLiveResizeAttribute;", "+\t", "+\t// determine modality", "-\tbyte [] appClass = display.appClass;", "-        /* AW", "-\t\tint xDisplay = display.xDisplay;", "-\t\tint widgetClass = OS.TopLevelShellWidgetClass ();", "-\t\tshellHandle = OS.XtAppCreateShell (display.appName, appClass, widgetClass, xDisplay, argList1, argList1.length / 2);", "-        */", "-\t\tif ((style & SWT.NO_TRIM) != 0)", "-\t\t\twindowClass= OS.kHelpWindowClass;", "-\t\telse {", "+\t\tif ((style & SWT.NO_TRIM) != 0) {", "+\t\t\twindowClass= OS.kSheetWindowClass;", "+\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "+\t\t} else {", "-        /* AW", "-\t\tint widgetClass = OS.TransientShellWidgetClass ();", "-//\t\tif ((style & SWT.ON_TOP) != 0) {", "-//\t\t\twidgetClass = OS.OverrideShellWidgetClass ();", "-//\t\t}", "-        */", "-\t\t\t//System.out.println(\"Shell.createHandle: SWT.NONE\");", "-\t\t\twindowClass= OS.kHelpWindowClass;", "+\t\t\twindowClass= OS.kSheetWindowClass;", "+\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "-\t\t\t//System.out.println(\"Shell.createHandle: SWT.NO_TRIM | SWT.ON_TOP\");", "-\t\t\twindowClass= OS.kHelpWindowClass;", "+\t\t\twindowClass= OS.kSheetWindowClass;", "+\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "-\t\t\t//System.out.println(\"Shell.createHandle: SWT.NO_TRIM\");", "-\t\t\twindowClass= OS.kHelpWindowClass;", "+\t\t\twindowClass= OS.kSheetWindowClass;", "+\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "-\t\t\t//System.out.println(\"Shell.createHandle: kMovableModalWindowClass\");", "-\t\t\t//System.out.println(\"Shell.createHandle: kModalWindowClass\");", "-\t\t\t//System.out.println(\"Shell.createHandle: SWT.ON_TOP\");", "-\t\t\t//windowClass= OS.kFloatingWindowClass;", "-\t\t\twindowClass= OS.kHelpWindowClass;", "+\t\t\twindowClass= OS.kSheetWindowClass;", "+\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "-\t\t\t//System.out.println(\"Shell.createHandle: kDocumentWindowClass\");", "-\t// check whether window class supports a given decoration ", "-\tif ((decorations & OS.kWindowCloseBoxAttribute) != 0 &&", "-\t\t\twindowClass != OS.kDocumentWindowClass &&", "-\t\t\t\twindowClass != OS.kFloatingWindowClass &&", "-\t\t\t\t\twindowClass != OS.kUtilityWindowClass) {", "-\t\tdecorations&= ~OS.kWindowCloseBoxAttribute;", "-\t}", "-\tif ((decorations & OS.kWindowFullZoomAttribute) != 0 &&", "-\t\t\twindowClass != OS.kDocumentWindowClass &&", "-\t\t\t\twindowClass != OS.kFloatingWindowClass &&", "-\t\t\t\t\twindowClass != OS.kUtilityWindowClass) {", "-\t\tdecorations&= ~OS.kWindowFullZoomAttribute;", "-\t}", "-\tif ((decorations & OS.kWindowCollapseBoxAttribute) != 0 &&", "-\t\t\twindowClass != OS.kDocumentWindowClass) {", "-\t\tdecorations&= ~OS.kWindowCollapseBoxAttribute;", "-\t}", "-\tif ((decorations & OS.kWindowCollapseBoxAttribute) != 0 &&", "-\t\t\twindowClass != OS.kDocumentWindowClass &&", "-\t\t\t\twindowClass != OS.kMovableModalWindowClass &&", "-\t\t\t\t\twindowClass != OS.kFloatingWindowClass &&", "-\t\t\t\t\t\twindowClass != OS.kUtilityWindowClass &&", "-\t\t\t\t\t\t\twindowClass != OS.kSheetWindowClass) {", "-\t\tdecorations&= ~OS.kWindowCollapseBoxAttribute;", "+\t// check whether window class supports a given decoration", "+\tint allowedAttr= OS.GetAvailableWindowAttributes(windowClass);", "+\tif (decorations != (decorations & allowedAttr)) {", "+\t\tSystem.out.println(\"Shell.createHandle: some attributes are not supported\");", "+\t\tdecorations&= allowedAttr;\t", "-\tif (OS.CreateNewWindow(windowClass, decorations | OS.kWindowStandardHandlerAttribute, bounds, wHandle) == OS.noErr)", "-\t\tshellHandle= wHandle[0];", "-\telse {", "-\t\tSystem.out.println(\"Shell.createHandle: can't create window with these attributes; creating default window\");", "-\t\tif (OS.CreateNewWindow(OS.kDocumentWindowClass, OS.kWindowStandardHandlerAttribute, bounds, wHandle) == OS.noErr)", "-\t\t\tshellHandle= wHandle[0];", "-\t}", "-", "+\tint rc= OS.CreateNewWindow(windowClass, decorations, bounds, wHandle);", "+\tif (rc != OS.noErr)", "+\t\tSystem.out.println(\"Shell.createHandle: can't create window: \" + rc);", "+\tshellHandle= wHandle[0];", "+\t", "+\tif (windowActivationScope != -1)\t", "+\t\tif (OS.SetWindowActivationScope(shellHandle, windowActivationScope) != OS.noErr)", "+\t\t\tSystem.out.println(\"Shell.createHandle: can't set activation scope\");", "-", "-\t/*", "-\t* Feature in Motif.  There is no way to get the single pixel", "-\t* border surrounding a TopLevelShell or a TransientShell.", "-\t* Also, attempts to set a border on either the shell handle", "-\t* or the main window handle fail.  The fix is to set the border", "-\t* on the client area.", "-\t*/", "-    /* AW", "-\tif ((style & (SWT.NO_TRIM | SWT.BORDER | SWT.RESIZE)) == 0) {", "-\t\tint [] argList2 = {OS.XmNborderWidth, 1};", "-\t\tOS.XtSetValues (handle, argList2, argList2.length / 2);", "-\t}", "-    */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "236dcc3e68a02721f390a9554f872b11", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "0ef9617c1012a47a6d1ff1554f6abcb04cfa36ad", "commitAfterChange": "26cde76ce3c88c1f3b47c43e3bb62261f679e704", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  private int dragReceiveHandler(int theWindow, int handlerRefCon, int theDrag)", "signatureAfterChange": "  private int dragReceiveHandler(int theWindow, int handlerRefCon, int theDrag)", "diff": ["-\t//System.out.println(\"dragReceiveHandler\");", "-\teffect.show(DND.FEEDBACK_NONE, 0, 0);", "+\teffect.show(DND.FEEDBACK_NONE, 0, 0);", "-\tsetEventData(theDrag, event);", "-\t", "-\tif (event.operations == 0 || event.dataTypes == null || event.dataTypes.length == 0) {", "+\tevent.widget = this;", "+\tevent.time = (int)System.currentTimeMillis();", "+\tevent.detail = DND.DROP_NONE;", "+\ttry {", "+\t\tnotifyListeners(DND.DragLeave, event);", "+\t} catch (Throwable e) {}", "+\t\t", "+\tevent = new DNDEvent();", "+\tif (!setEventData(theDrag, event)) {", "-\tTransferData[] allowedTypes = event.dataTypes;", "+\tTransferData[] allowedDataTypes = new TransferData[event.dataTypes.length];", "+\tSystem.arraycopy(event.dataTypes, 0, allowedDataTypes, 0, event.dataTypes.length);", "-\t\tevent.dataType = null;", "+\t\tevent.dataType = null;", "-\t\tfor (int i = 0; i < allowedTypes.length; i++) {", "-\t\t\tif (allowedTypes[i].type == event.dataType.type) {", "-\t\t\t\tselectedDataType = event.dataType;", "+\t\tfor (int i = 0; i < allowedDataTypes.length; i++) {", "+\t\t\tif (allowedDataTypes[i].type == event.dataType.type) {", "+\t\t\t\tselectedDataType = allowedDataTypes[i];", "-\tif (selectedOperation != DND.DROP_NONE) {", "-\t\tTransfer transfer = null;", "-\t\tfor (int i = 0; i < transferAgents.length; i++) {", "-\t\t\ttransfer = transferAgents[i];", "-\t\t\tif (transfer.isSupportedType(selectedDataType)) break;", "-\t\t}", "-\t\tif (transfer == null) {", "-\t\t\tselectedOperation = DND.DROP_NONE;", "-\t\t} else {", "-\t\t\t//locate all the items with data of the desired type ", "-\t\t\tshort[] numItems = new short[1];", "-\t\t\tOS.CountDragItems(theDrag, numItems);", "-\t\t\tint[] itemRefs = new int[numItems[0]];", "-\t\t\tint index = -1;", "-\t\t\tfor (short i = 0; i < numItems[0]; i++) {", "-\t\t\t\tint[] theItemRef = new int[1];", "-\t\t\t\tOS.GetDragItemReferenceNumber(theDrag, (short) (i+1), theItemRef);", "-\t\t\t\tshort[] numFlavors = new short[1];", "-\t\t\t\tOS.CountDragItemFlavors(theDrag, theItemRef[0], numFlavors);", "-\t\t\t\tint[] theType = new int[1];", "-\t\t\t\tfor (int j = 0; j < numFlavors[0]; j++) {", "-\t\t\t\t\ttheType[0] = 0;", "-\t\t\t\t\tOS.GetFlavorType(theDrag, theItemRef[0], (short) (j+1), theType);", "-\t\t\t\t\tif (theType[0] == selectedDataType.type) {", "-\t\t\t\t\t\titemRefs[++index] = theItemRef[0];", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (index == -1) {", "-\t\t\t\tselectedOperation = DND.DROP_NONE;", "-\t\t\t} else {", "-\t\t\t\tbyte[][] data = new byte[0][];", "-\t\t\t\tint[] size = new int[1];", "-\t\t\t\tfor (int i = 0; i < itemRefs.length; i++) {", "-\t\t\t\t\tif (itemRefs[i] == 0) continue;", "-\t\t\t\t\tsize[0] = 0;", "-\t\t\t\t\tOS.GetFlavorDataSize(theDrag,itemRefs[i], selectedDataType.type, size);", "-\t\t\t\t\tif (size[0] > 0) {", "-\t\t\t\t\t\tbyte[] buffer = new byte[size[0]];", "-\t\t\t\t\t\tOS.GetFlavorData(theDrag, itemRefs[i], selectedDataType.type, buffer, size, 0);", "-\t\t\t\t\t\tbyte[][] newData = new byte[data.length + 1][];", "-\t\t\t\t\t\tSystem.arraycopy(data, 0, newData, 0, data.length);", "-\t\t\t\t\t\tnewData[data.length] = buffer;", "-\t\t\t\t\t\tdata = newData;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tselectedDataType.data = data;", "-\t\t\t", "-\t\t\t\tevent.dataType = selectedDataType;", "-\t\t\t\tevent.detail = selectedOperation;", "-\t\t\t\tevent.data = transfer.nativeToJava(selectedDataType);;", "-\t\t\t\ttry\t{", "-\t\t\t\t\t notifyListeners(DND.Drop, event);", "-\t\t\t\t\t selectedOperation = DND.DROP_NONE;", "-\t\t\t\t\t if ((allowedOperations & event.detail) == event.detail) {", "-\t\t\t\t\t \tselectedOperation = event.detail;", "-\t\t\t\t\t }", "-\t\t\t\t} catch (Throwable e) {", "-\t\t\t\t\tselectedOperation = DND.DROP_NONE;", "-\t\t\t\t} ", "-\t\t\t}", "+\tif (selectedOperation == DND.DROP_NONE) {", "+\t\t// this was not a successful drop", "+\t\treturn OS.dragNotAcceptedErr;", "+\t}", "+\t", "+\t// ask drag source for dropped data", "+\tbyte[][] data  = data = new byte[0][];", "+\t// locate all the items with data of the desired type ", "+\tshort[] numItems = new short[1];", "+\tOS.CountDragItems(theDrag, numItems);", "+\tfor (short i = 0; i < numItems[0]; i++) {", "+\t\tint[] theItemRef = new int[1];", "+\t\tOS.GetDragItemReferenceNumber(theDrag, (short) (i+1), theItemRef);", "+\t\tint[] size = new int[1];", "+\t\tOS.GetFlavorDataSize(theDrag, theItemRef[0], selectedDataType.type, size);", "+\t\tif (size[0] > 0) {", "+\t\t\tbyte[] buffer = new byte[size[0]];", "+\t\t\tOS.GetFlavorData(theDrag, theItemRef[0], selectedDataType.type, buffer, size, 0);", "+\t\t\tbyte[][] newData = new byte[data.length + 1][];", "+\t\t\tSystem.arraycopy(data, 0, newData, 0, data.length);", "+\t\t\tnewData[data.length] = buffer;", "+\t\t\tdata = newData;", "+\t", "+\tObject object = null;", "+\tfor (int i = 0; i < transferAgents.length; i++) {", "+\t\tTransfer transfer = transferAgents[i];", "+\t\tif (transfer.isSupportedType(selectedDataType)) {", "+\t\t\tselectedDataType.data = data;", "+\t\t\tobject = transfer.nativeToJava(selectedDataType);", "+\t\t\tbreak;", "+\t\t}", "+\t}", "+\t\t\t", "+\tevent.dataType = selectedDataType;", "+\tevent.detail = selectedOperation;", "+\tevent.data = object;", "+\ttry\t{", "+\t\tnotifyListeners(DND.Drop, event);", "+\t\tselectedOperation = DND.DROP_NONE;", "+\t\tif ((allowedOperations & event.detail) == event.detail) {", "+\t\t\tselectedOperation = event.detail;", "+\t\t}", "+\t} catch (Throwable e) {", "+\t\tselectedOperation = DND.DROP_NONE;", "+\t} ", "+", "+\tkeyOperation = -1;"]}], "num": 22366}
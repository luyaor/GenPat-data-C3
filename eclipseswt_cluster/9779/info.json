{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b32118b6fe9b42464f6b1f9447fa62f8", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bf9fe9030aa5d3ed52ba1d89f538630", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "7e75f62c2df211b7eaad64e8a4571f008aa5a6e8", "commitAfterChange": "83265ffec075c564027fb30b75cccdc93ee98c40", "methodNumberBeforeChange": 253, "methodNumberAfterChange": 253, "signatureBeforeChange": " void redrawLines(int startLine, int lineCount)", "signatureAfterChange": " void redrawLines(int startLine, int lineCount)", "diff": ["-\t// do nothing if redraw range is completely invisible\t", "+\t// do nothing if redraw range is completely invisible", "+\tint endLine = startLine + lineCount - 1;", "-\tif (startLine > partialBottomIndex || startLine + lineCount - 1 < topIndex) {", "+\tint partialTopIndex = getPartialTopIndex();", "+\tif (startLine > partialBottomIndex || endLine < partialTopIndex) {", "-\tif (startLine < topIndex) {", "-\t\tlineCount -= topIndex - startLine;", "-\t\tstartLine = topIndex;", "+\tif (startLine < partialTopIndex) {", "+\t\tstartLine = partialTopIndex;", "-\tif (startLine + lineCount - 1 > partialBottomIndex) {", "-\t\tlineCount = partialBottomIndex - startLine + 1;", "+\tif (endLine > partialBottomIndex) {", "+\t\tendLine = partialBottomIndex;;", "-\tstartLine -= topIndex;", "-\tint redrawBottom = getLinePixel(startLine + lineCount);", "+\tint redrawBottom = getLinePixel(endLine + 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76bda4e332e4e7423b275d6eedcb6c6a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "0d071739ca20d31ed231d1d4bd90df94b5e42817", "commitAfterChange": "ca2ab800288a0cff39f00b82f164bf6ac861ac7a", "methodNumberBeforeChange": 82, "methodNumberAfterChange": 82, "signatureBeforeChange": " void shape (final int hdc, final StyleItem run)", "signatureAfterChange": " void shape (final int hdc, final StyleItem run)", "diff": ["-\t\t\t* using only white spaces. The solution is to use the font fallback of the ", "-\t\t\t* previous or next run of the same script.    ", "+\t\t\t* using only white spaces. The solution is to use the font of the previous  ", "+\t\t\t* or next run of the same script.    ", "-\t\t\t\t\t\tif (pRun.fallbackFont != 0 && pRun.analysis.eScript == run.analysis.eScript) {", "+\t\t\t\t\t\tif (pRun.analysis.eScript == run.analysis.eScript) {", "+\t\t\t\t\t\t\tint /*long*/ pFont = getItemFont(pRun);", "-\t\t\t\t\t\t\tOS.GetObject(pRun.fallbackFont, LOGFONT.sizeof, logFont);", "+\t\t\t\t\t\t\tOS.GetObject(pFont, LOGFONT.sizeof, logFont);", "+\t\t\t\t\t\t\t\tOS.SelectObject(hdc, getItemFont(nRun));", "-\t\t\t\t\t\t\t\tif (nRun.fallbackFont != 0) {", "-\t\t\t\t\t\t\t\t\tLOGFONT logFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW() : new LOGFONTA();", "-\t\t\t\t\t\t\t\t\tOS.GetObject(nRun.fallbackFont, LOGFONT.sizeof, logFont);", "-\t\t\t\t\t\t\t\t\tnewFont = OS.CreateFontIndirect(logFont);", "-\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tint /*long*/ nFont = getItemFont(nRun);", "+\t\t\t\t\t\t\t\tLOGFONT logFont = OS.IsUnicode ? (LOGFONT)new LOGFONTW() : new LOGFONTA();", "+\t\t\t\t\t\t\t\tOS.GetObject(nFont, LOGFONT.sizeof, logFont);", "+\t\t\t\t\t\t\t\tnewFont = OS.CreateFontIndirect(logFont);"]}], "num": 9779}
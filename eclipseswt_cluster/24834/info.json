{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "8d146d10b6a432f62853324f51c03e71", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "942464d3517b3ff7ee2c1dc35d5af8eb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "1215228ca28cd877225ea2d6d4c5dd6eb8a8d47a", "commitAfterChange": "437b26428f10a35a326ef6b319e71308ad9cdb90", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": "  void setGCClipping()", "signatureAfterChange": "  void setGCClipping()", "diff": ["-\tint widget = data.widget;", "-\tif (rid == OS.Ph_DEV_RID) OS.PgSetRegion(rid);", "-\telse if (widget != 0) OS.PgSetRegion(OS.PtWidgetRid(widget));", "-\telse if (data.image != null) return;", "-\t", "-\t/* NOTE: PgSetRegion resets the clipping rectangle */", "-\tOS.PgSetMultiClip(data.clipRectsCount, data.clipRects);\t", "+    int widget = data.widget;", "+    if(OS.QNX_MAJOR >= 6 && OS.QNX_MINOR >= 3)", "+    {", "+        if(widget > 0)", "+        {", "+            int visibleTiles = OS.PtGetVisibleTiles(widget);", "+            if(data.clipRects != 0)", "+            {", "+                int gcClip = OS.PhRectsToTiles(data.clipRects, data.clipRectsCount);", "+                PhPoint_t pt = new PhPoint_t();", "+                PhRect_t tran_rect = new PhRect_t();", "+                OS.PtWidgetExtent(widget, tran_rect);", "+                OS.PtWidgetOffset(widget, pt);", "+                pt.x += tran_rect.ul_x;", "+                pt.y += tran_rect.ul_y;", "+                OS.PhTranslateTiles(gcClip, pt);", "+                int inter = OS.PhIntersectTilings(visibleTiles, gcClip, new short[1]);", "+                if(inter != 0)", "+                {", "+                    OS.PgSetMultiClipTiles(inter);", "+                    OS.free(inter);", "+                }", "+                OS.free(gcClip);", "+            } else", "+            {", "+                OS.PgSetMultiClipTiles(visibleTiles);", "+            }", "+            OS.free(visibleTiles);", "+        }", "+        return;", "+    }", "+    if(rid == 1)", "+        OS.PgSetRegion(rid);", "+    else", "+    if(widget != 0)", "+        OS.PgSetRegion(OS.PtWidgetRid(widget));", "+    else", "+    if(data.image != null)", "+        return;", "+    if(widget == 0)", "+        return;", "+    OS.PgSetMultiClip(data.clipRectsCount, data.clipRects);", "+    int clip_tile = getClipping(widget, data.topWidget, true, true, null);", "+    int clip_rects_count[] = new int[1];", "+    int clip_rects = OS.PhTilesToRects(clip_tile, clip_rects_count);", "+    OS.PhFreeTiles(clip_tile);", "+    if(clip_rects_count[0] == 0)", "+    {", "+        clip_rects_count[0] = 1;", "+        OS.free(clip_rects);", "+        clip_rects = OS.malloc(8);", "+        OS.memset(clip_rects, 0, 8);", "+    }", "+    OS.PgSetClipping((short)clip_rects_count[0], clip_rects);", "+    OS.free(clip_rects);", "+}", "-\tif (widget == 0 || data.paint) return;", "-\t", "-\tint clip_tile = getClipping(widget, data.topWidget, true, true, null);", "-\tint[] clip_rects_count = new int[1];", "-\tint clip_rects = OS.PhTilesToRects(clip_tile, clip_rects_count);", "-\tOS.PhFreeTiles(clip_tile);\t", "-\tif (clip_rects_count[0] == 0) {", "-\t\tclip_rects_count[0] = 1;", "-\t\tOS.free(clip_rects);", "-\t\tclip_rects = OS.malloc(PhRect_t.sizeof);", "-\t\tOS.memset(clip_rects, 0, PhRect_t.sizeof);", "-\t}", "-\tOS.PgSetClipping((short)clip_rects_count[0], clip_rects);", "-\tOS.free(clip_rects);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2dea33b91356550669ddf88f9a3ae19f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 60, "signatureBeforeChange": " public void setExpanded(boolean expand)", "signatureAfterChange": " public void setExpanded (boolean value)", "diff": ["- */", "-public void setExpanded(boolean expand) {", "-\tcheckWidget();", "-\tif (isLeaf() == false && expand == true) {", "-\t\tgetParent().expand(this, false);", "-\t}", "-\telse {", "-\t\tgetParent().collapse(this, false);", "-\t}", "-}", "+}", "+public void setExpanded (boolean value) {", "+\tcheckWidget ();", "+\tif (expanded == value) return;", "+\tif (items.length == 0) return;", "+\t// TODO the next line seems to match other platforms, test case is lazy Tree snippet", "+\tif (parent.inExpand) return;", "+\tif (value) {", "+\t\texpanded = value;", "+\t\tparent.makeDescendentsAvailable (this);", "+\t\tparent.redrawFromItemDownwards (availableIndex);", "+\t} else {", "+\t\tint oldAvailableLength = parent.availableItems.length;", "+\t\tTreeItem[] descendents = computeAvailableDescendents ();", "+\t\texpanded = value;", "+\t\tparent.makeDescendentsUnavailable (this, descendents);", "+\t\t/* move focus (and selection if SWT.SINGLE) to item if a descendent had focus */", "+\t\tTreeItem focusItem = parent.focusItem;", "+\t\tif (focusItem != null && focusItem != this && focusItem.hasAncestor (this)) {", "+\t\t\tparent.setFocusItem (this, true);", "+\t\t\tif ((style & SWT.SINGLE) != 0) {", "+\t\t\t\tparent.selectedItems = new TreeItem[] {this};", "+\t\t\t}", "+\t\t\t/* Fire an event since the selection is being changed automatically */", "+\t\t\tEvent newEvent = new Event ();", "+\t\t\tnewEvent.item = this;", "+\t\t\tparent.sendEvent (SWT.Selection, newEvent);", "+\t\t\tif (isDisposed ()) return;", "+\t\t\tparent.showItem (this);", "+\t\t}", "+\t\tparent.redrawItems(availableIndex, oldAvailableLength - 1);", "+\t}", "+}"]}], "num": 24834}
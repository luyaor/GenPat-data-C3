{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7d1bd8152542efc2e33e9e90f929a935", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d4a7f3f58a39559fb7893498f456b7e6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "8bccfcf010de68687a135a3d01ceb23d1d55e8a1", "commitAfterChange": "87a342cb87ef1107f9b1d879aca4bc8caff07353", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void setControl (Control control)", "signatureAfterChange": " public void setControl (Control control)", "diff": ["-\tControl newControl = control;", "-\tControl oldControl = this.control;", "-\tif (oldControl == newControl) return;", "-\tthis.control = newControl;", "-\tint /*long*/ parentHandle = parent.parentingHandle ();", "-\tif (oldControl != null) {", "-\t\tOS.gtk_widget_reparent (oldControl.topHandle(), parentHandle);", "-\t}", "-\tif (newControl != null) {", "-\t\tOS.gtk_widget_reparent (newControl.topHandle(), parentHandle);", "-\t\tnewControl.setBounds (getBounds ());", "-\t\tOS.gtk_widget_reparent (newControl.topHandle(), handle);", "-\t\tOS.gtk_widget_hide (separatorHandle);", "-\t} else {", "-\t\tOS.gtk_widget_show (separatorHandle);", "-\t}", "+\tif (this.control == control) return;", "+\tthis.control = control;", "+\tresizeControl ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "76e3ce89ff21853c4707102ea70363f9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "d8d3e8f612b1662e51aaeb1aba1b797cad6504c1", "commitAfterChange": "a2a2b61ca97ad1454fa39c9d961ae445a63a1a20", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "  int accessibilityAttributeValue (int id, int sel, int arg0)", "signatureAfterChange": "  boolean accessibilityIsIgnored(int id, int sel)", "diff": ["-int accessibilityAttributeValue (int /*long*/ id, int /*long*/ sel, int /*long*/ arg0) {", "-\t", "-\tNSString attributeName = new NSString(arg0);", "-\t", "-\tif (accessible != null) {", "-\t\tid returnObject = accessible.internal_accessibilityAttributeValue(attributeName, ACC.CHILDID_SELF);", "-\t\tif (returnObject != null) return returnObject.id;", "-\t}", "-\t", "-\t// Accessibility Verifier requires a subrole for windows, even though most other controls don't have a subrole.", "-\t// So, we need to override and return the right subrole here.", "-\tif (attributeName.isEqualToString (OS.NSAccessibilitySubroleAttribute)) {", "-\t\tNSString roleText = null;", "-", "-\t\tif ((style & SWT.ON_TOP) != 0)", "-\t\t\troleText = OS.NSAccessibilityFloatingWindowSubrole;", "-\t\telse", "-\t\t\troleText = OS.NSAccessibilityStandardWindowSubrole;", "-\t\t", "-\t\treturn roleText.id;", "-\t}", "-\t", "-\treturn super.accessibilityAttributeValue(id, sel, arg0);", "+boolean accessibilityIsIgnored(int /*long*/ id, int /*long*/ sel) {", "+\t// The content view of a shell is always ignored.", "+\tif (id == view.id) return true;", "+\treturn super.accessibilityIsIgnored(id, sel);"]}], "num": 27314}
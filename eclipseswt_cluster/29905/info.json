{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "db2c27c028621c0f5624e30a0120e279", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ec68633c64e757297f0f8bd00a76e0b9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "7b1329ce4559c314d7caaf6d49255a2e36ae8db9", "commitAfterChange": "24fd6f27ac88e7d1cba0fa9d22650617bd958c27", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 3, "signatureBeforeChange": "  static Object convertToJava (nsIVariant variant, short type)", "signatureAfterChange": "  static Object convertToJava (nsIVariant variant, short type)", "diff": ["+static Object convertToJava (nsIVariant variant, short type) {", "+\tswitch (type) {", "+\t\tcase nsIDataType.VTYPE_EMPTY:", "+\t\tcase nsIDataType.VTYPE_VOID:", "+\t\t\treturn null;", "+\t\tcase nsIDataType.VTYPE_EMPTY_ARRAY:", "+\t\t\treturn new Object[0];", "+\t\tcase nsIDataType.VTYPE_BOOL:", "+\t\t\tint[] boolResult = new int[1]; /*PRInt32*/", "+\t\t\tint rc = variant.GetAsBool (boolResult);", "+\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\treturn new Boolean (boolResult[0] != 0);", "+\t\tcase nsIDataType.VTYPE_INT32:", "+\t\t\tint[] intResult = new int[1]; /*PRInt32*/", "+\t\t\trc = variant.GetAsInt32 (intResult);", "+\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\treturn new Double (intResult[0]);", "+\t\tcase nsIDataType.VTYPE_DOUBLE:", "+\t\t\tint /*long*/ doubleReturn = C.malloc (8);", "+\t\t\trc = variant.GetAsDouble (doubleReturn);", "+\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\tdouble[] doubleResult = new double[1];", "+\t\t\tC.memmove (doubleResult, doubleReturn, 8);", "+\t\t\tC.free (doubleReturn);", "+\t\t\treturn new Double (doubleResult[0]);", "+\t\tcase nsIDataType.VTYPE_WSTRING_SIZE_IS:", "+\t\t\tint[] size = new int[1]; /* PRInt32 */", "+\t\t\tint /*long*/[] wString = new int /*long*/[1];", "+\t\t\trc = variant.GetAsWStringWithSize (size, wString);", "+\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\tchar[] chars = new char[size[0]];", "+\t\t\tC.memmove (chars, wString[0], size[0] * 2);", "+\t\t\treturn new String (chars);", "+\t\tcase nsIDataType.VTYPE_ARRAY:", "+\t\t\tObject[] arrayReturn = new Object[0];", "+\t\t\tint /*long*/ iid = C.malloc (nsID.sizeof);", "+\t\t\tC.memset (iid, 0, nsID.sizeof);", "+\t\t\tint[] count = new int[1]; /* PRUint32 */", "+\t\t\tshort[] currentType = new short[1];", "+\t\t\tint /*long*/[] ptr = new int /*long*/[1];", "+\t\t\trc = variant.GetAsArray (currentType, iid, count, ptr);", "+\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\tif (ptr[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NULL_POINTER);", "+\t\t\tnsID id = new nsID ();", "+\t\t\tXPCOM.memmove (id, iid, nsID.sizeof);", "+\t\t\tC.free (iid);", "+\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\trc = XPCOM.NS_GetServiceManager (result);", "+\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);\t\t", "+\t\t\tserviceManager.Release ();", "+", "+\t\t\tnsIMemory memory = new nsIMemory (result[0]);", "+\t\t\tresult[0] = 0;", "+", "+\t\t\tif (id.Equals (nsIVariant.NS_IVARIANT_IID) || id.Equals (nsIVariant.NS_IVARIANT_10_IID)) {", "+\t\t\t\tarrayReturn = new Object[count[0]];", "+\t\t\t\tfor (int i = 0; i < count[0]; i++) {", "+\t\t\t\t\tint /*long*/[] arrayPtr = new int /*long*/[1];", "+\t\t\t\t\tC.memmove (arrayPtr, ptr[0] + i * C.PTR_SIZEOF, C.PTR_SIZEOF);", "+\t\t\t\t\tnsISupports supports = new nsISupports (arrayPtr[0]);", "+\t\t\t\t\trc = supports.QueryInterface (id, result);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\t\t\t\t\tnsIVariant currentVariant = new nsIVariant (result[0]);", "+\t\t\t\t\tresult[0] = 0;", "+\t\t\t\t\tcurrentType[0] = 0;", "+\t\t\t\t\trc = currentVariant.GetDataType (currentType);", "+\t\t\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tarrayReturn[i] = convertToJava (currentVariant, currentType[0]);", "+\t\t\t\t\t\tcurrentVariant.Release ();", "+\t\t\t\t\t} catch (IllegalArgumentException e) {", "+\t\t\t\t\t\t/* invalid argument value type */", "+\t\t\t\t\t\tcurrentVariant.Release ();", "+\t\t\t\t\t\tmemory.Free (ptr[0]);", "+\t\t\t\t\t\tmemory.Release ();", "+\t\t\t\t\t\tthrow e;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tswitch (currentType[0]) {", "+\t\t\t\t\tcase nsIDataType.VTYPE_DOUBLE:", "+\t\t\t\t\t\tarrayReturn = new Object[count[0]];", "+\t\t\t\t\t\tfor (int i = 0; i < count[0]; i++) {", "+\t\t\t\t\t\t\tdouble[] doubleValue = new double[1];", "+\t\t\t\t\t\t\tC.memmove (doubleValue, ptr[0] + i * 8, 8);", "+\t\t\t\t\t\t\tarrayReturn[i] = new Double (doubleValue[0]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase nsIDataType.VTYPE_BOOL:", "+\t\t\t\t\t\tarrayReturn = new Object[count[0]];", "+\t\t\t\t\t\tfor (int i = 0; i < count[0]; i++) {", "+\t\t\t\t\t\t\tint[] boolValue = new int[1]; /* PRUInt32 */", "+\t\t\t\t\t\t\tC.memmove (boolValue, ptr[0] + i * 4, 4);", "+\t\t\t\t\t\t\tarrayReturn[i] = new Boolean (boolValue[0] != 0);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase nsIDataType.VTYPE_INT32:", "+\t\t\t\t\t\tarrayReturn = new Object[count[0]];", "+\t\t\t\t\t\tfor (int i = 0; i < count[0]; i++) {", "+\t\t\t\t\t\t\tint[] intValue = new int[1]; /* PRInt32 */", "+\t\t\t\t\t\t\tC.memmove (intValue, ptr[0] + i * 4, 4);", "+\t\t\t\t\t\t\tarrayReturn[i] = new Double (intValue[0]);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tcase nsIDataType.VTYPE_WCHAR_STR:", "+\t\t\t\t\t\tarrayReturn = new Object[count[0]];", "+\t\t\t\t\t\tfor (int i = 0; i < count[0]; i++) {", "+\t\t\t\t\t\t\tint /*long*/ currentPtr = ptr[0] + i * C.PTR_SIZEOF;", "+\t\t\t\t\t\t\tint /*long*/[] stringPtr = new int /*long*/[1];", "+\t\t\t\t\t\t\tC.memmove (stringPtr, currentPtr, C.PTR_SIZEOF);", "+\t\t\t\t\t\t\tint length = XPCOM.strlen_PRUnichar (stringPtr[0]);", "+\t\t\t\t\t\t\tchar[] dest = new char[length];", "+\t\t\t\t\t\t\tXPCOM.memmove (dest, stringPtr[0], length * 2);", "+\t\t\t\t\t\t\tarrayReturn[i] = new String (dest);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\tdefault:", "+\t\t\t\t\t\tmemory.Free (ptr[0]);", "+\t\t\t\t\t\tmemory.Release ();", "+\t\t\t\t\t\tSWT.error (SWT.ERROR_INVALID_ARGUMENT);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tmemory.Free (ptr[0]);", "+\t\t\tmemory.Release ();", "+\t\t\treturn arrayReturn;", "+\t}", "+\tSWT.error (SWT.ERROR_INVALID_ARGUMENT);", "+}", "-", "-static Object convertToJava (nsIVariant variant, short type) {", "-\tswitch (type) {", "-\t\tcase nsIDataType.VTYPE_EMPTY:", "-\t\tcase nsIDataType.VTYPE_VOID:", "-\t\t\treturn null;", "-\t\tcase nsIDataType.VTYPE_EMPTY_ARRAY:", "-\t\t\treturn new Object[0];", "-\t\tcase nsIDataType.VTYPE_BOOL:", "-\t\t\tint[] boolResult = new int[1]; /*PRInt32*/", "-\t\t\tint rc = variant.GetAsBool (boolResult);", "-\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\treturn new Boolean (boolResult[0] != 0);", "-\t\tcase nsIDataType.VTYPE_INT32:", "-\t\t\tint[] intResult = new int[1]; /*PRInt32*/", "-\t\t\trc = variant.GetAsInt32 (intResult);", "-\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\treturn new Double (intResult[0]);", "-\t\tcase nsIDataType.VTYPE_DOUBLE:", "-\t\t\tint /*long*/ doubleReturn = C.malloc (8);", "-\t\t\trc = variant.GetAsDouble (doubleReturn);", "-\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\tdouble[] doubleResult = new double[1];", "-\t\t\tC.memmove (doubleResult, doubleReturn, 8);", "-\t\t\tC.free (doubleReturn);", "-\t\t\treturn new Double (doubleResult[0]);", "-\t\tcase nsIDataType.VTYPE_WSTRING_SIZE_IS:", "-\t\t\tint[] size = new int[1]; /* PRInt32 */", "-\t\t\tint /*long*/[] wString = new int /*long*/[1];", "-\t\t\trc = variant.GetAsWStringWithSize (size, wString);", "-\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\tchar[] chars = new char[size[0]];", "-\t\t\tC.memmove (chars, wString[0], size[0] * 2);", "-\t\t\treturn new String (chars);", "-\t\tcase nsIDataType.VTYPE_ARRAY:", "-\t\t\tObject[] arrayReturn = new Object[0];", "-\t\t\tint /*long*/ iid = C.malloc (nsID.sizeof);", "-\t\t\tC.memset (iid, 0, nsID.sizeof);", "-\t\t\tint[] count = new int[1]; /* PRUint32 */", "-\t\t\tshort[] currentType = new short[1];", "-\t\t\tint /*long*/[] ptr = new int /*long*/[1];", "-\t\t\trc = variant.GetAsArray (currentType, iid, count, ptr);", "-\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\tif (ptr[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NULL_POINTER);", "-\t\t\tnsID id = new nsID ();", "-\t\t\tXPCOM.memmove (id, iid, nsID.sizeof);", "-\t\t\tC.free (iid);", "-", "-\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\trc = XPCOM.NS_GetServiceManager (result);", "-\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "-", "-\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "-\t\t\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);\t\t", "-\t\t\tserviceManager.Release ();", "-", "-\t\t\tnsIMemory memory = new nsIMemory (result[0]);", "-\t\t\tresult[0] = 0;", "-", "-\t\t\tif (id.Equals (nsIVariant.NS_IVARIANT_IID)) {", "-\t\t\t\tarrayReturn = new Object[count[0]];", "-\t\t\t\tfor (int i = 0; i < count[0]; i++) {", "-\t\t\t\t\tint /*long*/[] arrayPtr = new int /*long*/[1];", "-\t\t\t\t\tC.memmove (arrayPtr, ptr[0] + i * C.PTR_SIZEOF, C.PTR_SIZEOF);", "-\t\t\t\t\tnsISupports supports = new nsISupports (arrayPtr[0]);", "-\t\t\t\t\trc = supports.QueryInterface (nsIVariant.NS_IVARIANT_IID, result);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\t\t\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "-", "-\t\t\t\t\tnsIVariant currentVariant = new nsIVariant (result[0]);", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\tcurrentType[0] = 0;", "-\t\t\t\t\trc = currentVariant.GetDataType (currentType);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tarrayReturn[i] = convertToJava (currentVariant, currentType[0]);", "-\t\t\t\t\t\tcurrentVariant.Release ();", "-\t\t\t\t\t} catch (IllegalArgumentException e) {", "-\t\t\t\t\t\t/* invalid argument value type */", "-\t\t\t\t\t\tcurrentVariant.Release ();", "-\t\t\t\t\t\tmemory.Free (ptr[0]);", "-\t\t\t\t\t\tmemory.Release ();", "-\t\t\t\t\t\tthrow e;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t} else {", "-\t\t\t\tswitch (currentType[0]) {", "-\t\t\t\t\tcase nsIDataType.VTYPE_DOUBLE:", "-\t\t\t\t\t\tarrayReturn = new Object[count[0]];", "-\t\t\t\t\t\tfor (int i = 0; i < count[0]; i++) {", "-\t\t\t\t\t\t\tdouble[] doubleValue = new double[1];", "-\t\t\t\t\t\t\tC.memmove (doubleValue, ptr[0] + i * 8, 8);", "-\t\t\t\t\t\t\tarrayReturn[i] = new Double (doubleValue[0]);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase nsIDataType.VTYPE_BOOL:", "-\t\t\t\t\t\tarrayReturn = new Object[count[0]];", "-\t\t\t\t\t\tfor (int i = 0; i < count[0]; i++) {", "-\t\t\t\t\t\t\tint[] boolValue = new int[1]; /* PRUInt32 */", "-\t\t\t\t\t\t\tC.memmove (boolValue, ptr[0] + i * 4, 4);", "-\t\t\t\t\t\t\tarrayReturn[i] = new Boolean (boolValue[0] != 0);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase nsIDataType.VTYPE_INT32:", "-\t\t\t\t\t\tarrayReturn = new Object[count[0]];", "-\t\t\t\t\t\tfor (int i = 0; i < count[0]; i++) {", "-\t\t\t\t\t\t\tint[] intValue = new int[1]; /* PRInt32 */", "-\t\t\t\t\t\t\tC.memmove (intValue, ptr[0] + i * 4, 4);", "-\t\t\t\t\t\t\tarrayReturn[i] = new Double (intValue[0]);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase nsIDataType.VTYPE_WCHAR_STR:", "-\t\t\t\t\t\tarrayReturn = new Object[count[0]];", "-\t\t\t\t\t\tfor (int i = 0; i < count[0]; i++) {", "-\t\t\t\t\t\t\tint /*long*/ currentPtr = ptr[0] + i * C.PTR_SIZEOF;", "-\t\t\t\t\t\t\tint /*long*/[] stringPtr = new int /*long*/[1]; ", "-\t\t\t\t\t\t\tC.memmove (stringPtr, currentPtr, C.PTR_SIZEOF);", "-\t\t\t\t\t\t\tint length = XPCOM.strlen_PRUnichar (stringPtr[0]);", "-\t\t\t\t\t\t\tchar[] dest = new char[length];", "-\t\t\t\t\t\t\tXPCOM.memmove (dest, stringPtr[0], length * 2);", "-\t\t\t\t\t\t\tarrayReturn[i] = new String (dest);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tdefault:", "-\t\t\t\t\t\tmemory.Free (ptr[0]);", "-\t\t\t\t\t\tmemory.Release ();", "-\t\t\t\t\t\tSWT.error (SWT.ERROR_INVALID_ARGUMENT);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tmemory.Free (ptr[0]);", "-\t\t\tmemory.Release ();", "-\t\t\treturn arrayReturn;", "-\t}", "-\tSWT.error (SWT.ERROR_INVALID_ARGUMENT);", "-\treturn null;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ead46777846ade1d0d1538d3d6e31746", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "e9024966202f6bd2eaef5f6ebebe83ee37dcb74e", "commitAfterChange": "c7cbced32992f5cff36e25ce2932835717af3cbb", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": "  boolean drop(NSObject sender)", "signatureAfterChange": "  boolean drop(NSObject sender)", "diff": ["-\t\t} else if (type.isEqual(OS.NSURLPboardType)) {", "+\t\t} else if (type.isEqual(OS.NSURLPboardType) || type.getString().equals(\"public.url\")) {"]}], "num": 29905}
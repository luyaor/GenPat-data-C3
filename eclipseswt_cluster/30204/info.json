{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2840ca5165f8cd9a25114c077cf481c5", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ca1af3fbfc4c1a820bdf11312c87d2a1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "5303764efd8ba35e172b6219df5fadc1a0d392a8", "commitAfterChange": "f94123ee4e132f6e7e84978d91811f502d0830cb", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 28, "signatureBeforeChange": "  int filterProc (int xEvent, int gdkEvent, int data)", "signatureAfterChange": "  void fixActiveShell ()", "diff": ["-int /*long*/ filterProc (int /*long*/ xEvent, int /*long*/ gdkEvent, int /*long*/ data) {", "-\t/*", "-\t* Bug in GTK.  When a shell that has no window manager trimmings", "-\t* is given focus, GTK gets stuck in \"focus follows pointer\" mode when", "-\t* the pointer is within the shell and its parent when the shell is disposed.", "-\t* The fix is to modify the X events that cause this to happen.", "-\t*/", "-\tXFocusChangeEvent focusEvent = new XFocusChangeEvent ();", "-\tOS.memmove (focusEvent, xEvent, 4);", "-\tswitch (focusEvent.type) {", "-\t\tcase OS.FocusIn: {", "-\t\t\tOS.memmove (focusEvent, xEvent, XFocusChangeEvent.sizeof);", "-\t\t\tif (focusEvent.detail == OS.NotifyPointer) {", "-\t\t\t\tfocusEvent.detail = OS.NotifyNonlinear;", "-\t\t\t\tOS.memmove (xEvent, focusEvent, XFocusChangeEvent.sizeof);", "+void fixActiveShell () {", "+\tif (display.activeShell == this) {", "+\t\tShell shell = null;", "+\t\tif (parent != null && parent.isVisible ()) shell = parent.getShell ();", "+\t\tif (shell == null && (style & SWT.ON_TOP) != 0) {", "+\t\t\tShell [] shells = display.getShells ();", "+\t\t\tfor (int i = 0; i < shells.length; i++) {", "+\t\t\t\tif (shells [i] != null && shells [i].isVisible ()) {", "+\t\t\t\t\tshell = shells [i];", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "-\t\t\tbreak;", "-\t\tcase OS.EnterNotify: {", "-\t\t\tXCrossingEvent crossingEvent = new XCrossingEvent ();", "-\t\t\tOS.memmove (crossingEvent, xEvent, XCrossingEvent.sizeof);", "-\t\t\tif (crossingEvent.focus) {", "-\t\t\t\tcrossingEvent.focus = false;", "-\t\t\t\tOS.memmove (xEvent, crossingEvent, XCrossingEvent.sizeof);", "-\t\t\t}", "-\t\t\tbreak;", "-\t\t}", "+\t\tif (shell != null) shell.bringToTop (false);", "-\treturn 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "be806f3d51b2b7c2d1812215ff696a6a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 40, "signatureBeforeChange": " void drawText(String label, GC gc, Point position, int index)", "signatureAfterChange": " void recomputeTextWidths (GC gc)", "diff": ["- */", "-void drawText(String label, GC gc, Point position, int index) {", "-\tTable parent = getParent();", "-\tint textOffset, alignmentOffset;", "-\tif (label != null) {", "-\t\tgc.setFont(getFont(index));", "-\t\tboolean drawSelection = (index == TableColumn.FIRST || (parent.getStyle() & SWT.FULL_SELECTION) != 0) &&", "-\t\t\t((parent.style & SWT.HIDE_SELECTION) == 0 || parent.isFocusControl());", "-\t\tif (isSelected() == true && drawSelection == true) {", "-\t\t\tgc.setForeground(getSelectionForegroundColor());", "-\t\t} else {", "-\t\t\tgc.setForeground(getForeground(index));", "-\t\talignmentOffset = getAlignmentOffset (index, getBounds(index).width, gc);", "-\t\ttextOffset = (parent.getItemHeight() - parent.getFontHeight()) / 2;\t\t\t// vertically center the text", "-\t\tgc.drawString(label, position.x + alignmentOffset, position.y + textOffset, true);", "+void recomputeTextWidths (GC gc) {", "+\tint validColumnCount = Math.max (1, parent.columns.length);", "+\ttextWidths = new int [validColumnCount];", "+\tFont oldFont = gc.getFont ();", "+\tfor (int i = 0; i < textWidths.length; i++) {", "+\t\tString value = getDisplayText (i);", "+\t\tif (value != null) {", "+\t\t\tboolean fontChanged = false;", "+\t\t\tFont font = getFont (i);", "+\t\t\tif (!font.equals (oldFont)) {", "+\t\t\t\tgc.setFont (font);", "+\t\t\t\tfontChanged = true;", "+\t\t\t}", "+\t\t\ttextWidths [i] = gc.textExtent (value).x;", "+\t\t\tif (fontChanged) gc.setFont (oldFont);"]}], "num": 30204}
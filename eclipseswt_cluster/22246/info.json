{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3464ad13c4f9c15ed0b9c9c05ce8a9c1", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7a11ae8fb7ee4ec2b69d68303f8a1ac2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "a83fcf6055f867f0050aa97de300cbeb9da19a0d", "commitAfterChange": "56fb1e5d19b79846a4a91435e0ae039e4404a5a0", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  int handleCallback(int nextHandler, int theEvent)", "signatureAfterChange": "  int handleCallback(int nextHandler, int theEvent)", "diff": ["-\t\t\t\t\tbreak;", "+\t\t\t\t\t/*", "+\t\t\t\t\t* Bug in Carbon.  OSX crashes if a HICocoaView is disposed during a key event,", "+\t\t\t\t\t* presumably as a result of attempting to use it after its refcount has reached", "+\t\t\t\t\t* 0.  The workaround is to temporarily add an extra ref to the view while the", "+\t\t\t\t\t* DOM listener is handling the event, in case the Browser gets disposed in a", "+\t\t\t\t\t* callback.", "+\t\t\t\t\t*/", "+\t\t\t\t\tint webViewHandle = this.webViewHandle;", "+\t\t\t\t\tOS.CFRetain (webViewHandle);", "+\t\t\t\t\tint result = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\t\t\tOS.CFRelease (webViewHandle);", "+\t\t\t\t\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "354a28529f7339cef7e49e6304439e85", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "05d141b181e80472f5b1358deacfda122e0bb35f", "commitAfterChange": "650ccec495d5890698851b01ddee09d8411670ad", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  int handleCallback(int nextHandler, int theEvent)", "signatureAfterChange": "  int handleCallback(int nextHandler, int theEvent)", "diff": ["-\t\t\t\t\t* 0.  The workaround is to temporarily add an extra ref to the view while the", "-\t\t\t\t\t* DOM listener is handling the event, in case the Browser gets disposed in a", "-\t\t\t\t\t* callback.", "+\t\t\t\t\t* 0.  The workaround is to temporarily add an extra ref to the view and its", "+\t\t\t\t\t* ancestor while the DOM listener is handling the event, in case the", "+\t\t\t\t\t* Browser gets disposed in a callback.", "-\t\t\t\t\tint webViewHandle = this.webViewHandle;", "-\t\t\t\t\tOS.CFRetain (webViewHandle);", "+\t\t\t\t\tint handle = webViewHandle, root = OS.HIViewGetSuperview (webViewHandle);", "+\t\t\t\t\tOS.CFRetain (handle);", "+\t\t\t\t\tOS.CFRetain (root);", "-\t\t\t\t\tOS.CFRelease (webViewHandle);", "+\t\t\t\t\tOS.CFRelease (root);", "+\t\t\t\t\tOS.CFRelease (handle);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "85f3c21a7d92ab45631a6eefe122e4d1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/carbon/org/eclipse/swt/browser/MozillaDelegate.java", "commitBeforeChange": "a83fcf6055f867f0050aa97de300cbeb9da19a0d", "commitAfterChange": "56fb1e5d19b79846a4a91435e0ae039e4404a5a0", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "  static int eventProc3 (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  static int eventProc3 (int nextHandler, int theEvent, int userData)", "diff": ["-\t\tbrowser.getShell ().forceActive ();", "-\t\t((Mozilla)browser.webBrowser).Activate ();", "+\t\tswitch (OS.GetEventClass (theEvent)) {", "+\t\t\tcase OS.kEventClassMouse:", "+\t\t\t\tbrowser.getShell ().forceActive ();", "+\t\t\t\t((Mozilla)browser.webBrowser).Activate ();", "+\t\t\t\tbreak;", "+\t\t\tcase OS.kEventClassKeyboard:", "+\t\t\t\t/*", "+\t\t\t\t* Bug in Carbon.  OSX crashes if a HICocoaView is disposed during a key event,", "+\t\t\t\t* presumably as a result of attempting to use it after its refcount has reached", "+\t\t\t\t* 0.  The workaround is to temporarily add an extra ref to the view while the", "+\t\t\t\t* DOM listener is handling the event, in case the Browser gets disposed in a", "+\t\t\t\t* callback.", "+\t\t\t\t*/", "+\t\t\t\tint handle = browser.handle;", "+\t\t\t\tOS.CFRetain (handle);", "+\t\t\t\tint result = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\t\tOS.CFRelease (handle);", "+\t\t\t\treturn result;", "+\t\t}"]}], "num": 22246}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "81e651b02752ac36c226c10b2b73e24c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c60318d653cc90d9c522b268c2c8a0ef", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "0ec16a191637037ae868aa23c8c55cf2d8a64f40", "commitAfterChange": "d78a1f304fc5886faf978adcf843b66da4334afd", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": "  int processEvent (int eventNumber, int int0, int int1, int int2)", "signatureAfterChange": "  int processDefaultSelection (int int0, int int1, int int2)", "diff": ["-int processEvent (int eventNumber, int int0, int int1, int int2) {", "-\tif (eventNumber == 0) {", "-\t\tGdkEvent gdkEvent = new GdkEvent ();", "-\t\tOS.memmove (gdkEvent, int0, GdkEvent.sizeof);", "-\t\tswitch (gdkEvent.type) {", "-\t\t\tcase OS.GDK_BUTTON_PRESS:", "-\t\t\tcase OS.GDK_2BUTTON_PRESS: {", "-\t\t\t\tOS.GTK_CLIST_RESYNC_SELECTION (handle);", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.GDK_BUTTON_RELEASE: {", "-\t\t\t\t/*", "-\t\t\t\t* Feature in GTK.  When an item is reselected, GTK", "-\t\t\t\t* does not issue notification.  The fix is to detect", "-\t\t\t\t* that the mouse was released over a selected item when", "-\t\t\t\t* no selection signal was set and issue a fake selection", "-\t\t\t\t* event.", "-\t\t\t\t*/", "-\t\t\t\tif ((style & SWT.MULTI) != 0) {", "-\t\t\t\t\tif (selected) {", "-\t\t\t\t\t\tdouble[] px = new double [1], py = new double [1];", "-\t\t\t\t\t\tOS.gdk_event_get_coords (int0, px, py);", "-\t\t\t\t\t\tint x = (int) (px[0]), y = (int) (py[0]);", "-\t\t\t\t\t\tint [] row = new int [1], column = new int [1];", "-\t\t\t\t\t\tif (OS.gtk_clist_get_selection_info (handle, x, y, row, column) != 0) {", "-\t\t\t\t\t\t\tint list = OS.GTK_CLIST_SELECTION (handle);", "-\t\t\t\t\t\t\tif (list != 0) {", "-\t\t\t\t\t\t\t\tint length = OS.g_list_length (list);", "-\t\t\t\t\t\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\t\t\t\t\t\tif (row [0] == OS.g_list_nth_data (list, i)) {", "-\t\t\t\t\t\t\t\t\t\tpostEvent (SWT.Selection);", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t}", "-\t\t\t\t\tselected = false;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tcase OS.GDK_FOCUS_CHANGE: {", "-\t\t\t\t/*", "-\t\t\t\t* Bug in GTK.  When an application opens a new modal top level", "-\t\t\t\t* shell from inside the \"select_row\" signal, the GtkCList does not get the", "-\t\t\t\t* mouse up and does not release grabs.  The fix is to release the grabs", "-\t\t\t\t* when focus is lost.", "-\t\t\t\t*/", "-\t\t\t\tGdkEventFocus focusEvent = new GdkEventFocus ();", "-\t\t\t\tOS.memmove (focusEvent, int0, GdkEventFocus.sizeof);", "-\t\t\t\tif (focusEvent.in == 0) {", "-\t\t\t\t\tif (OS.gtk_grab_get_current () == handle) {", "-\t\t\t\t\t\tOS.gtk_grab_remove (handle);", "-\t\t\t\t\t\tOS.gdk_pointer_ungrab (OS.GDK_CURRENT_TIME);", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\treturn 1;", "-\t}", "-\treturn super.processEvent (eventNumber, int0, int1, int2);", "+int processDefaultSelection (int int0, int int1, int int2) {", "+\tpostEvent (SWT.DefaultSelection);", "+\treturn 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bfcad51a5f5f05b4e2b5e4c000bf2822", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/motif/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "00ed21c8f8c77f61853a45cda676574d76d69e41", "commitAfterChange": "8e00f3751d53017bb47fe8df7b2fb0596267f9cb", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public Object getContents(Transfer transfer, int clipboards)", "signatureAfterChange": " public Object getContents(Transfer transfer, int clipboards)", "diff": ["-\tif ((clipboards & DND.CLIPBOARD) == 0) return null;", "-\tint xWindow = OS.XtWindow (shellHandle);", "-\tif (xWindow == 0) return null;", "-\t", "-\t// Open clipboard for retrieval", "-\tif (OS.XmClipboardStartRetrieve(xDisplay, xWindow, OS.XtLastTimestampProcessed(xDisplay)) != OS.XmClipboardSuccess) return null;", "-\tbyte[] data = null;", "-\tbyte[] type = null;", "-\ttry {", "-\t\t// Does Clipboard have data in required format?", "-\t\tint[] length = new int[1];", "-\t\tString[] supportedTypes = transfer.getTypeNames();", "-\t\tfor (int i = 0; i < supportedTypes.length; i++) {", "-\t\t\tbyte[] bName = Converter.wcsToMbcs(null, supportedTypes[i], true);", "-\t\t\tif (OS.XmClipboardInquireLength(xDisplay, xWindow, bName, length) == OS.XmClipboardSuccess) {", "-\t\t\t\ttype = bName;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "-\t\t// Retrieve data from Clipboard", "-\t\tif (type == null) return null;", "-\t\tdata = new byte[length[0]];", "-\t\tif (OS.XmClipboardRetrieve(xDisplay, xWindow, type, data, length[0], new int[1], new int[1]) != OS.XmClipboardSuccess) {", "-\t\t\treturn null;", "-\t\t}", "-\t} finally {", "-\t\t// Close Clipboard", "-\t\tOS.XmClipboardEndRetrieve(xDisplay, xWindow);", "+\tObject result = null;", "+\tif ((clipboards & DND.CLIPBOARD) != 0) {", "+\t\t result = getContents(xDisplay, transfer, clipboardAtom);", "-\t", "-\t// Pass data to transfer agent for conversion to a Java Object", "-\t// Memory is allocated here to emulate the way Drag and Drop transfers data.", "-\tint pValue = OS.XtMalloc(data.length);", "-\tif (pValue == 0) return null;", "-\ttry {", "-\t\tOS.memmove(pValue, data, data.length);", "-\t\tTransferData transferData = new TransferData();", "-\t\ttransferData.type = OS.XmInternAtom (xDisplay, type, true);", "-\t\ttransferData.length = data.length;", "-\t\ttransferData.format = 8;", "-\t\ttransferData.pValue = pValue;", "-\t\ttransferData.result = 1;", "-\t\treturn transfer.nativeToJava(transferData);", "-\t} finally {", "-\t\t// Clean up allocated memory", "-\t\tOS.XtFree(pValue);", "+\tif (result != null) return result;", "+\tif ((clipboards & DND.SELECTION_CLIPBOARD) != 0) {", "+\t\tresult = getContents(xDisplay, transfer, primaryAtom);", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "70f4ffb812c44cf0ea2547886dcbb0ed", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "1cd4597ff41acbe176d0615f19bb04070e5842f4", "commitAfterChange": "ac8aa4ed15146cebc36dd156b93099ccf8e75814", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create(Composite parent, int style)", "signatureAfterChange": "  public void create(Composite parent, int style)", "diff": ["-\t\t\t\t\t\t\tRunnable runnable = new Runnable () {", "-\t\t\t\t\t\t\t\tpublic void run() {", "-\t\t\t\t\t\t\t\t\tif (browser.isDisposed() || html == null) return;", "-\t\t\t\t\t\t\t\t\tint charCount = html.length();", "-\t\t\t\t\t\t\t\t\tchar[] chars = new char[charCount];", "-\t\t\t\t\t\t\t\t\thtml.getChars(0, charCount, chars, 0);", "-\t\t\t\t\t\t\t\t\thtml = null;", "-\t\t\t\t\t\t\t\t\tint byteCount = OS.WideCharToMultiByte(OS.CP_UTF8, 0, chars, charCount, null, 0, null, null);", "-\t\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t\t* Note. Internet Explorer appears to treat the data loaded with ", "-\t\t\t\t\t\t\t\t\t* nsIPersistStreamInit.Load as if it were encoded using the default", "-\t\t\t\t\t\t\t\t\t* local charset.  There does not seem to be an API to set the", "-\t\t\t\t\t\t\t\t\t* desired charset explicitly in this case.  The fix is to", "-\t\t\t\t\t\t\t\t\t* prepend the UTF-8 Byte Order Mark signature to the data.", "-\t\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\t\tbyte[] UTF8BOM = {(byte)0xEF, (byte)0xBB, (byte)0xBF};", "-\t\t\t\t\t\t\t\t\tint /*long*/ hGlobal = OS.GlobalAlloc(OS.GMEM_FIXED | OS.GMEM_ZEROINIT, UTF8BOM.length + byteCount);", "-\t\t\t\t\t\t\t\t\tif (hGlobal != 0) {", "-\t\t\t\t\t\t\t\t\t\tOS.MoveMemory(hGlobal, UTF8BOM, UTF8BOM.length);", "-\t\t\t\t\t\t\t\t\t\tOS.WideCharToMultiByte(OS.CP_UTF8, 0, chars, charCount, hGlobal + UTF8BOM.length, byteCount, null, null);\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\t\tint /*long*/ [] ppstm = new int /*long*/ [1];", "-\t\t\t\t\t\t\t\t\t\t/* ", "-\t\t\t\t\t\t\t\t\t\t* Note.  CreateStreamOnHGlobal is called with the flag fDeleteOnRelease.", "-\t\t\t\t\t\t\t\t\t\t* If the call succeeds the buffer hGlobal is freed automatically", "-\t\t\t\t\t\t\t\t\t\t* when the IStream object is released. If the call fails, free the buffer", "-\t\t\t\t\t\t\t\t\t\t* hGlobal.", "-\t\t\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\t\t\tif (OS.CreateStreamOnHGlobal(hGlobal, true, ppstm) == OS.S_OK) {", "-\t\t\t\t\t\t\t\t\t\t\tint[] rgdispid = auto.getIDsOfNames(new String[] {\"Document\"}); //$NON-NLS-1$", "-\t\t\t\t\t\t\t\t\t\t\tVariant pVarResult = auto.getProperty(rgdispid[0]);", "-\t\t\t\t\t\t\t\t\t\t\tIDispatch dispatchDocument = pVarResult.getDispatch();", "-\t\t\t\t\t\t\t\t\t\t\tint /*long*/ [] ppvObject = new int /*long*/ [1];", "-\t\t\t\t\t\t\t\t\t\t\tint result = dispatchDocument.QueryInterface(COM.IIDIPersistStreamInit, ppvObject);", "-\t\t\t\t\t\t\t\t\t\t\tif (result == OS.S_OK) {", "-\t\t\t\t\t\t\t\t\t\t\t\tIPersistStreamInit persistStreamInit = new IPersistStreamInit(ppvObject[0]);", "-\t\t\t\t\t\t\t\t\t\t\t\tif (persistStreamInit.InitNew() == OS.S_OK) {", "-\t\t\t\t\t\t\t\t\t\t\t\t\tpersistStreamInit.Load(ppstm[0]);", "-\t\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\t\tpersistStreamInit.Release();", "-\t\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t\t\tpVarResult.dispose();", "-\t\t\t\t\t\t\t\t\t\t\t/*", "-\t\t\t\t\t\t\t\t\t\t\t* This code is intentionally commented.  The IDispatch obtained from a Variant", "-\t\t\t\t\t\t\t\t\t\t\t* did not increase the reference count for the enclosed interface.", "-\t\t\t\t\t\t\t\t\t\t\t*/", "-\t\t\t\t\t\t\t\t\t\t\t//dispatchDocument.Release();", "-\t\t\t\t\t\t\t\t\t\t\tIUnknown stream = new IUnknown(ppstm[0]);", "-\t\t\t\t\t\t\t\t\t\t\tstream.Release();", "-\t\t\t\t\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\t\t\t\t\tOS.GlobalFree(hGlobal);", "-\t\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t\t};", "-\t\t\t\t\t\t\t\tbrowser.getDisplay().asyncExec(runnable);", "+\t\t\t\t\t\t\t\tbrowser.getDisplay().asyncExec(new Runnable() {", "+\t\t\t\t\t\t\t\t\tpublic void run() {", "+\t\t\t\t\t\t\t\t\t\tif (browser.isDisposed() || html == null) return;", "+\t\t\t\t\t\t\t\t\t\tsetHTML(html);", "+\t\t\t\t\t\t\t\t\t\thtml = null;", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t});", "-\t\t\t\t\t\t\t\trunnable.run();", "+\t\t\t\t\t\t\t\tsetHTML(html);", "+\t\t\t\t\t\t\t\thtml = null;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1438d30b5b3fa3cc74be394bc19e71b1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextDropTargetEffect.java", "commitBeforeChange": "3aff16acfdf77e96d907ad171748ade5965df079", "commitAfterChange": "fe495be3ccb10f369847493f43f449a5b9d6432f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " \tpublic void dragOver(DropTargetEvent event)", "signatureAfterChange": " \tpublic void dragOver(DropTargetEvent event)", "diff": ["-\t\t\tStyledTextContent content = text.getContent();", "-\t\t\tint newOffset = -1;", "-\t\t\ttry {", "-\t\t\t\tnewOffset = text.getOffsetAtLocation(pt);", "-\t\t\t} catch (IllegalArgumentException ex1) {", "-\t\t\t\tint maxOffset = content.getCharCount();", "-\t\t\t\tPoint maxLocation = text.getLocationAtOffset(maxOffset);", "-\t\t\t\tif (pt.y >= maxLocation.y) {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tnewOffset = text.getOffsetAtLocation(new Point(pt.x, maxLocation.y));", "-\t\t\t\t\t} catch (IllegalArgumentException ex2) {", "-\t\t\t\t\t\tnewOffset = maxOffset;", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tint startOffset = text.getOffsetAtLocation(new Point(0, pt.y));", "-\t\t\t\t\t\tint endOffset = maxOffset;", "-\t\t\t\t\t\tint line = content.getLineAtOffset(startOffset);", "-\t\t\t\t\t\tint lineCount = content.getLineCount();", "-\t\t\t\t\t\tif (line + 1 < lineCount) {", "-\t\t\t\t\t\t\tendOffset = content.getOffsetAtLine(line + 1)  - 1;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tint lineHeight = text.getLineHeight(startOffset);", "-\t\t\t\t\t\tfor (int i = endOffset; i >= startOffset; i--) {", "-\t\t\t\t\t\t\tPoint p = text.getLocationAtOffset(i);", "-\t\t\t\t\t\t\tif (p.x < pt.x && p.y < pt.y && p.y + lineHeight > pt.y) {", "-\t\t\t\t\t\t\t\tnewOffset = i;", "-\t\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t} catch (IllegalArgumentException ex2) {", "-\t\t\t\t\t\tnewOffset = -1;", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tif (newOffset != -1 && newOffset != currentOffset) {", "-\t\t\t\t// check if offset is line delimiter", "-\t\t\t\t// see StyledText.isLineDelimiter()", "-\t\t\t\tint line = content.getLineAtOffset(newOffset);", "-\t\t\t\tint lineOffset = content.getOffsetAtLine(line);\t", "-\t\t\t\tint offsetInLine = newOffset - lineOffset;", "-\t\t\t\t// offsetInLine will be greater than line length if the line ", "-\t\t\t\t// delimiter is longer than one character and the offset is set", "-\t\t\t\t// in between parts of the line delimiter.", "-\t\t\t\tif (offsetInLine > content.getLine(line).length()) {", "-\t\t\t\t\tnewOffset = Math.max(0, newOffset - 1);", "-\t\t\t\t}", "+\t\t\tint[] trailing = new int [1];", "+\t\t\tint newOffset = text.getOffsetAtPoint(pt.x, pt.y, trailing, false);", "+\t\t\tnewOffset += trailing [0];", "+\t\t\tif (newOffset != currentOffset) {"]}], "num": 8227}
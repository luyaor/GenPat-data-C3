{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "93e90efc157b91e1447878c3a9e617dd", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2f7870ae0011fc79625e200593b249ef", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "ca767eade763644686944c870e6c041810d2d907", "commitAfterChange": "ac7f99d85cc9bbe2c6592c95fd0f0d38071c8648", "methodNumberBeforeChange": 116, "methodNumberAfterChange": 116, "signatureBeforeChange": "  void setKeyState (Event event, int theEvent)", "signatureAfterChange": "  boolean setKeyState (Event event, int theEvent)", "diff": ["-void setKeyState (Event event, int theEvent) {", "+boolean setKeyState (Event event, int theEvent) {", "+\tboolean isNull = false;", "-\t\t\tevent.keyCode = SWT.CR;", "+\t\t\tevent.keyCode = SWT.KEYPAD_CR;", "-\t\tcase 0: {", "-\t\t\tint [] length = new int [1];", "-\t\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 4, length, (char[])null);", "-\t\t\tif (status == OS.noErr && length [0] > 0) {", "-\t\t\t\tchar [] chars = new char [1];", "-\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 2, null, chars);", "-\t\t\t\tevent.character = chars [0];", "-\t\t\t} else {", "-\t\t\t\tbyte [] charCode = new byte [1];", "-\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyMacCharCodes, OS.typeChar, null, charCode.length, null, charCode);", "-\t\t\t\tevent.character = (char) charCode [0];", "+\t\tdefault: {", "+\t\t\tif (event.keyCode == 0 || (SWT.KEYPAD_TIMES <= event.keyCode && event.keyCode <= SWT.KEYPAD_CR)) {", "+\t\t\t\tint [] length = new int [1];", "+\t\t\t\tint status = OS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 4, length, (char[])null);", "+\t\t\t\tif (status == OS.noErr && length [0] != 0) {", "+\t\t\t\t\tchar [] chars = new char [1];", "+\t\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 2, null, chars);", "+\t\t\t\t\tevent.character = chars [0];", "+\t\t\t\t}", "+\t\t\t\t/*", "+\t\t\t\t* Bug in the Mactonish.  For some reason, Ctrl+Shift+'2' and Ctrl+Shift+'6'", "+\t\t\t\t* fail to give 0x0 (^@ or ASCII NUL) and 0x1e (^^).  Other control character", "+\t\t\t\t* key sequences such as ^A or even Ctrl+Shift+'-' (^_ or 0x1f) are correctly", "+\t\t\t\t* translated to control characters.  Since it is not possible to know which", "+\t\t\t\t* key combination gives '@' on an international keyboard, there is no way to", "+\t\t\t\t* test for either character and convert it to a control character (Shift+'2'", "+\t\t\t\t* gives '@' only on an English keyboard) to work around the problem.", "+\t\t\t\t*", "+\t\t\t\t* There is no fix at this time.", "+\t\t\t\t*/", "-\t\t\tif (event.character != 0) {", "+\t\t\tif (event.keyCode == 0) {", "-\t\t\t\tint result = OS.KeyTranslate (kchrPtr, (short)keyCode [0], display.kchrState);", "+\t\t\t\tint result = OS.KeyTranslate (display.kchrPtr, (short)keyCode [0], display.kchrState);", "-\tsetInputState (event, theEvent);", "+\tif (event.keyCode == 0 && event.character == 0) {", "+\t\tif (!isNull) return false;", "+\t}", "+\treturn setInputState (event, theEvent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c595c81196f31c29e4146218f1fb746f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "6690d674a484a07e4445df2a5224ec4517b7f791", "commitAfterChange": "1ba8b708320d2a0e38aa19602a51bfddb75db828", "methodNumberBeforeChange": 94, "methodNumberAfterChange": 95, "signatureBeforeChange": "  boolean sendKeyEvent (int type, int theEvent)", "signatureAfterChange": " boolean sendKeyEvent (NSEvent nsEvent, int type)", "diff": ["-boolean sendKeyEvent (int type, int theEvent) {", "-//\tint [] length = new int [1];", "-//\tint status = OS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, 4, length, (char[])null);", "-//\tif (status == OS.noErr && length [0] > 2) {", "-//\t\tint count = 0;", "-//\t\tint [] chord = new int [1];", "-//\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseChord, OS.typeUInt32, null, 4, null, chord);", "-//\t\tint [] modifiers = new int [1];", "-//\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyModifiers, OS.typeUInt32, null, 4, null, modifiers);", "-//\t\tchar [] chars = new char [length [0] / 2];", "-//\t\tOS.GetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, null, chars.length * 2, null, chars);", "-//\t\tfor (int i=0; i<chars.length; i++) {", "-//\t\t\tEvent event = new Event ();", "-//\t\t\tevent.character = chars [i];", "-//\t\t\tsetInputState (event, type, chord [0], modifiers [0]);", "-//\t\t\tif (sendKeyEvent (type, event)) chars [count++] = chars [i];", "-//\t\t}", "-//\t\tif (count == 0) return false;", "-//\t\tif (count != chars.length - 1) {", "-//\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, count * 2, chars);", "-//\t\t}", "-//\t\treturn true;", "-//\t} else {", "-//\t\tEvent event = new Event ();", "-//\t\tif (!setKeyState (event, type, theEvent)) return true;", "-//\t\treturn sendKeyEvent (type, event);", "-//\t}", "-\treturn false;", "+//TODO - missing modifier keys (see flagsChanged:)", "+boolean sendKeyEvent (NSEvent nsEvent, int type) {", "+\tif ((state & SAFARI_EVENTS_FIX) != 0) return true;", "+\tint count = 0;", "+\tNSString keys = nsEvent.characters();", "+\t//TODO - check lowercase doesn't mangle char codes", "+\tNSString keyCodes = nsEvent.charactersIgnoringModifiers().lowercaseString();", "+\tchar [] chars = new char [keys.length()];", "+\tfor (int i=0; i<keys.length(); i++) {", "+\t\tEvent event = new Event ();", "+\t\tint keyCode = Display.translateKey (keys.characterAtIndex (i) & 0xFFFF);", "+\t\tif (keyCode != 0) {", "+\t\t\tevent.keyCode = keyCode;", "+\t\t} else {", "+\t\t\tevent.character = (char) keys.characterAtIndex (i);", "+\t\t\t//TODO - get unshifted values for Shift+1", "+\t\t\tevent.keyCode = keyCodes.characterAtIndex (i);", "+\t\t}", "+\t\tsetInputState (event, nsEvent, type);", "+\t\tif (!setKeyState(event, type, nsEvent)) return false;", "+\t\tif (sendKeyEvent (type, event)) {", "+\t\t\tchars [count++] = chars [i];", "+\t\t}", "+\t}", "+//\tif (count == 0) return false;", "+\tif (count != keys.length () - 1) {", "+//\t\tOS.SetEventParameter (theEvent, OS.kEventParamKeyUnicodes, OS.typeUnicodeText, count * 2, chars);", "+\t}", "+\treturn count == keys.length ();"]}], "num": 26321}
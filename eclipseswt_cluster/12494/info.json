{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7a44efb52530a7f99ec290af113a67f1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ca77ef2976be5b6f1192f14f8b5fa1d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "953e10e0355d3dc7d5822c7f864020f36774c727", "commitAfterChange": "c3476e9f1d3f3564f30bf12aa100bab984f287da", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": " public FontData open ()", "signatureAfterChange": " public FontData open ()", "diff": ["-\tOS.FPShowHideFontPanel ();\t", "+\t/*", "+\t* Feature in the Macintosh.  The Fonts window is not modal and it cannot", "+\t* be accessed through direct API.  The fix is to figure out the Fonts", "+\t* window by checking all available windows and set its modality", "+\t* explicitily.", "+\t*/", "+\tint count = 0;", "+\tint window = OS.GetPreviousWindow (0);", "+\twhile (window != 0) {", "+\t\tcount++;", "+\t\twindow = OS.GetPreviousWindow (window);", "+\t}", "+\tint [] windows = new int [count];", "+\tboolean[] visible = new boolean [count];", "+\tcount = 0;", "+\twindow = OS.GetPreviousWindow (0);", "+\twhile (window != 0) {", "+\t\twindows [count] = window;", "+\t\tvisible [count] = OS.IsWindowVisible (window);", "+\t\tcount++;", "+\t\twindow = OS.GetPreviousWindow (window);", "+\t}", "+\tOS.FPShowHideFontPanel ();", "+\tint fontsWindow = 0;", "+\twindow = OS.GetPreviousWindow (0);", "+\twhile (window != 0 && fontsWindow == 0) {", "+\t\tif (OS.IsWindowVisible (window)) {", "+\t\t\tboolean found = false;", "+\t\t\tfor (int i = 0; i < windows.length; i++) {", "+\t\t\t\tif (windows [i] == window) {", "+\t\t\t\t\tfound = true;", "+\t\t\t\t\tif (!visible [i]) {", "+\t\t\t\t\t\tfontsWindow = window;", "+\t\t\t\t\t\tbreak;\t\t\t\t\t\t", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (!found) {", "+\t\t\t\tfontsWindow = window;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t\twindow = OS.GetPreviousWindow (window);", "+\t}", "+\tif (fontsWindow != 0) {", "+\t\tint inModalKind = OS.kWindowModalityNone;", "+\t\tif ((style & SWT.PRIMARY_MODAL) != 0) inModalKind = OS.kWindowModalityWindowModal;", "+\t\tif ((style & SWT.APPLICATION_MODAL) != 0) inModalKind = OS.kWindowModalityAppModal;", "+\t\tif ((style & SWT.SYSTEM_MODAL) != 0) inModalKind = OS.kWindowModalitySystemModal;", "+\t\tif (inModalKind != OS.kWindowModalityNone) {", "+\t\t\tint inUnavailableWindow = 0;", "+\t\t\tif (parent != null) inUnavailableWindow = OS.GetControlOwner (parent.handle);", "+\t\t\tOS.SetWindowModality (fontsWindow, inModalKind, inUnavailableWindow);", "+\t\t\tOS.SelectWindow (fontsWindow);", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f10beefc7acd2ff2091e2b33243c8aee", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 59, "signatureBeforeChange": " int topHandle ()", "signatureAfterChange": "  void setWindowVisible (boolean visible)", "diff": ["+", "+void setWindowVisible (boolean visible) {", "+\tif (OS.IsWindowVisible (shellHandle) == visible) return;\t", "+\tif (visible) {", "+\t\tif (!resized) {", "+\t\t\tsendEvent (SWT.Resize);", "+\t\t\tif (layout != null) layout.layout (this, false);", "+\t\t}", "+\t\tint inModalKind = OS.kWindowModalityNone;", "+\t\tif ((style & SWT.PRIMARY_MODAL) != 0) inModalKind = OS.kWindowModalityWindowModal;", "+\t\tif ((style & SWT.APPLICATION_MODAL) != 0) inModalKind = OS.kWindowModalityAppModal;", "+\t\tif ((style & SWT.SYSTEM_MODAL) != 0) inModalKind = OS.kWindowModalitySystemModal;", "+\t\tif (inModalKind != OS.kWindowModalityNone) {", "+\t\t\tint inUnavailableWindow = 0;", "+\t\t\tif (parent != null) inUnavailableWindow = OS.GetControlOwner (parent.handle);", "+\t\t\tOS.SetWindowModality (shellHandle, inModalKind, inUnavailableWindow);", "+\t\tOS.ShowWindow (shellHandle);", "+    \tOS.HideWindow (shellHandle);", "+\t\tsendEvent (SWT.Hide);", "+}", "-int topHandle () {", "-\treturn shellHandle;", "-}"]}], "num": 12494}
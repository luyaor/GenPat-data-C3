{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d232ad3f57d72a09843bf0c3768710c", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1400520af0e8a74c918154450fbff2f8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/TextTransfer.java", "commitBeforeChange": "89dd18f56416766e9f25e99fa93a3cfdf736ff7e", "commitAfterChange": "0333c3cd6e1227d0185cdb60c13b053083d72b21", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-\t// get byte array from super", "-\tbyte[] buffer = (byte[])super.nativeToJava(transferData);", "-\tif (buffer == null) return null;", "-\tif (transferData.type == TEXTID) {", "-\t\t// convert byte array to a string", "-\t\tint encoding = OS.CFStringGetSystemEncoding();", "-\t\tint ptr = OS.CFStringCreateWithBytes(OS.kCFAllocatorDefault, buffer, buffer.length, encoding, true);", "-\t\tint length = OS.CFStringGetLength(ptr);", "-\t\tchar[] chars = new char[length];", "-\t\tCFRange range = new CFRange();", "-\t\trange.length = length;", "-\t\tOS.CFStringGetCharacters(ptr, range, chars);", "-\t\tOS.CFRelease (ptr);", "-\t\treturn new String (chars);", "-\t}", "-\tif (transferData.type == UTEXTID) {", "-\t\tchar[] chars = new char[(transferData.data.length + 1) / 2];", "-\t\tOS.memcpy(chars, transferData.data, transferData.data.length);", "-\t\treturn new String(chars);", "+\tif (!isSupportedType(transferData) || transferData.data == null) return null;", "+\tif (transferData.data.length == 0 || transferData.data[0].length == 0) return null;", "+\tbyte[] buffer = transferData.data[0];", "+\tswitch (transferData.type) {", "+\t\tcase TEXTID: {", "+\t\t\tint encoding = OS.CFStringGetSystemEncoding();", "+\t\t\tint cfstring = OS.CFStringCreateWithBytes(OS.kCFAllocatorDefault, buffer, buffer.length, encoding, true);", "+\t\t\tif (cfstring == 0) return null;", "+\t\t\ttry {", "+\t\t\t\tint length = OS.CFStringGetLength(cfstring);", "+\t\t\t\tif (length == 0) return null;", "+\t\t\t\tchar[] chars = new char[length];", "+\t\t\t\tCFRange range = new CFRange();", "+\t\t\t\trange.length = length;", "+\t\t\t\tOS.CFStringGetCharacters(cfstring, range, chars);", "+\t\t\t\treturn new String(chars);", "+\t\t\t} finally {", "+\t\t\t\tOS.CFRelease(cfstring);", "+\t\t\t}", "+\t\t}", "+\t\tcase UTEXTID: {", "+\t\t\tchar[] chars = new char[(buffer.length + 1) / 2];", "+\t\t\tOS.memcpy(chars, buffer, buffer.length);", "+\t\t\treturn new String(chars);", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "686bfebf05bf6df0e89c9e3046fd83fb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/RTFTransfer.java", "commitBeforeChange": "89dd18f56416766e9f25e99fa93a3cfdf736ff7e", "commitAfterChange": "0333c3cd6e1227d0185cdb60c13b053083d72b21", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Object nativeToJava(TransferData transferData)", "signatureAfterChange": " public Object nativeToJava(TransferData transferData)", "diff": ["-\tbyte[] buffer = (byte[])super.nativeToJava(transferData);", "-\tif (buffer == null) return null;", "-\t// convert byte array to a string", "+\tif (!isSupportedType(transferData) || transferData.data == null) return null;", "+\tif (transferData.data.length == 0 || transferData.data[0].length == 0) return null;", "+\tbyte[] buffer = transferData.data[0];", "-\tint ptr = OS.CFStringCreateWithBytes(OS.kCFAllocatorDefault, buffer, buffer.length, encoding, true);", "-\tint length = OS.CFStringGetLength(ptr);", "-\tchar[] chars = new char[length];", "-\tCFRange range = new CFRange();", "-\trange.length = length;", "-\tOS.CFStringGetCharacters(ptr, range, chars);", "-\tOS.CFRelease (ptr);", "-\treturn new String (chars);", "+\tint cfstring = OS.CFStringCreateWithBytes(OS.kCFAllocatorDefault, buffer, buffer.length, encoding, true);", "+\tif (cfstring == 0) return null;", "+\ttry {", "+\t\tint length = OS.CFStringGetLength(cfstring);", "+\t\tif (length == 0) return null;", "+\t\tchar[] chars = new char[length];", "+\t\tCFRange range = new CFRange();", "+\t\trange.length = length;", "+\t\tOS.CFStringGetCharacters(cfstring, range, chars);", "+\t\treturn new String(chars);", "+\t} finally {", "+\t\tOS.CFRelease(cfstring);", "+\t}"]}], "num": 515}
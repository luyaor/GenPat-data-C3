{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e64e3b6f2108cb2f505e5c26ef2cd794", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3fc1e7145c68387c4f7b5c90cda6130e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextBidi.java", "commitBeforeChange": "c6f6287d8b8fdc02e78b208f87146aa3823ab38c", "commitAfterChange": "eae5c56386c6900bfd7feddaea222ffeb4fcdf2a", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "\r private Vector getDirectionRuns(int logicalStart, int length)", "signatureAfterChange": "\r private Vector getDirectionRuns(int logicalStart, int length)", "diff": ["+\t\tint bidiSegmentIndex = 0;\r", "+\t\tint bidiSegmentEnd = bidiSegments[bidiSegmentIndex + 1];\t\t\t\r", "+\r", "+\t\t// Find the bidi segment that the direction runs start in.\r", "+\t\t// There will always be at least on bidi segment (for the entire line).\r", "+\t\twhile (bidiSegmentIndex < bidiSegments.length - 2 && bidiSegmentEnd <= logicalStart) {\r", "+\t\t\tbidiSegmentIndex++;\r", "+\t\t\tbidiSegmentEnd = bidiSegments[bidiSegmentIndex + 1];\r", "+\t\t}\r", "-\t\t\twhile (segmentLogicalEnd < logicalEnd && segType == classBuffer[segmentLogicalEnd + 1]) {\r", "+\t\t\twhile (segmentLogicalEnd < logicalEnd &&\r", "+\t\t\t\t\tsegType == classBuffer[segmentLogicalEnd + 1] &&\r", "+\t\t\t\t\tsegmentLogicalEnd + 1 < bidiSegmentEnd) {\r", "+\t\t\t// The current direction run ends at a bidi segment end. Get the next bidi segment.\r", "+\t\t\tif (segmentLogicalEnd == bidiSegmentEnd && bidiSegmentIndex < bidiSegments.length - 2) {\r", "+\t\t\t\tbidiSegmentIndex++;\r", "+\t\t\t\tbidiSegmentEnd = bidiSegments[bidiSegmentIndex + 1];\r", "+\t\t\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4d060b652cfa68e11b8bce526fdfb56a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextBidi.java", "commitBeforeChange": "cf85499fdfe6a11e04579e50271ec94532d27bd8", "commitAfterChange": "7f1555a570e0630345de4a3befbd9ab7828e99f7", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": " void redrawRange(Control parent, int logicalStart, int length, int xOffset, int yOffset, int height)", "signatureAfterChange": " void redrawRange(Control parent, int logicalStart, int length, int xOffset, int yOffset, int height)", "diff": ["-", "+\t\tint endX = run.getRenderStopX();", "+\t\tint runStartOffset = run.getVisualStart();", "+\t\tint runEndOffset = run.getVisualEnd();", "-\t\tparent.redraw(xOffset + startX, yOffset, run.getRenderStopX() - startX, height, true);", "+\t\t// expand the redraw area by one character in both directions.", "+\t\t// fixes bug 40019 \t\t", "+\t\tif (runStartOffset > 0) {", "+\t\t\tstartX = renderPositions[runStartOffset - 1];", "+\t\t}", "+\t\telse {", "+\t\t\tstartX = 0;", "+\t\t}", "+\t\tif (runEndOffset < renderPositions.length - 1) {", "+\t\t\tendX = renderPositions[runEndOffset + 1] + dx[runEndOffset + 1];", "+\t\t}", "+\t\tparent.redraw(xOffset + startX, yOffset, endX - startX, height, true);"]}], "num": 1067}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bdb988305d24a7cb216073e48d1c3104", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "362fed7eeba57d5484413f9367ebf1c7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Button.java", "commitBeforeChange": "5d38390584adf79405cd86a4c28992ccdbd567df", "commitAfterChange": "b0a0bcf30f09c2ffbb2137bd933ec7f8ce62d60c", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " void _setText (String string)", "signatureAfterChange": " void _setText (String string)", "diff": ["-\tchar [] text = new char [string.length ()];", "-\tstring.getChars (0, text.length, text, 0);", "-\tint mnemonic = fixMnemonic (text);", "-\tbyte [] buffer = Converter.wcsToMbcs (getCodePage (), text, true);", "-\tint xmString = OS.XmStringParseText (", "-\t\tbuffer,", "-\t\t0,", "-\t\tOS.XmFONTLIST_DEFAULT_TAG, ", "-\t\tOS.XmCHARSET_TEXT, ", "-\t\tnull,", "-\t\t0,", "-\t\t0);\t", "+\t/* Strip out mnemonic marker symbols, and remember the mnemonic. */", "+\tchar [] unicode = new char [string.length ()];", "+\tstring.getChars (0, unicode.length, unicode, 0);", "+\tint mnemonic = fixMnemonic (unicode);", "+\t", "+\t/* Wrap the text if necessary, and convert to mbcs. */", "+\tbyte [] buffer = null;", "+\tif ((style & SWT.WRAP) != 0) {", "+\t\tint [] argList = {", "+\t\t\tOS.XmNwidth, 0,        /* 1 */", "+\t\t\tOS.XmNmarginWidth, 0,  /* 3 */", "+\t\t\tOS.XmNmarginLeft, 0,   /* 5 */", "+\t\t\tOS.XmNmarginRight, 0,  /* 7 */", "+\t\t\tOS.XmNspacing, 0,      /* 9 */", "+\t\t\tOS.XmNdefaultButtonShadowThickness, 0, /* 11 */", "+\t\t};", "+\t\tOS.XtGetValues (handle, argList, argList.length / 2);", "+\t\tint width = argList [1] - argList [3] * 2 - argList[5] - argList[7] - argList[9] - argList[11] * 2;", "+\t\tif (mnemonic != 0) string = new String (unicode);", "+\t\tstring = display.wrapText (string, font, width);", "+\t\tbuffer = Converter.wcsToMbcs (getCodePage (), string, true);", "+\t} else {", "+\t\tbuffer = Converter.wcsToMbcs (getCodePage (), unicode, true);", "+\t}", "+\t", "+\tint xmString = OS.XmStringGenerate(buffer, null, OS.XmCHARSET_TEXT, null);", "-\tif (mnemonic == 0) mnemonic = OS.XK_VoidSymbol;", "+\t\t", "+\t/*", "+\t* Bug in Solaris.  If a mnemonic is defined to be a character", "+\t* that appears in a string in a position that follows a '\\n',", "+\t* Solaris segment faults.  For example, a label with text", "+\t* \"Hello\\nthe&re\" would GP since \"r\" appears after '\\n'.", "+\t*", "+\t* The fix is to remove mnemonics from labels that contain", "+\t* '\\n', which is fine since such labels generally just act", "+\t* as descriptive texts anyways.", "+\t*/ ", "+\tif (mnemonic == 0 || string.indexOf ('\\n') != -1) {", "+\t\tmnemonic = OS.XK_VoidSymbol;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba1b159f0f10852d39b3523f4f53ca5b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "c38115ed045eb9104cfb6a81d8565801a23bc197", "commitAfterChange": "231c9b1c4c78553f2ee472392a330f6eccf9065c", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": " public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\tif (wHint != SWT.DEFAULT) width = wHint + (border * 2);", "-\t\tif (hHint != SWT.DEFAULT) height = hHint + (border * 2);", "+\t\tif (wHint != SWT.DEFAULT) width = wHint + border * 2;", "+\t\tif (hHint != SWT.DEFAULT) height = hHint + border * 2;", "-\tint [] argList = {OS.XmNlabelType, 0};", "-\tOS.XtGetValues (handle, argList, argList.length / 2);", "-\tint labelType = argList [1];", "+\tint [] argList1 = {OS.XmNlabelType, 0};", "+\tOS.XtGetValues (handle, argList1, argList1.length / 2);", "+\tint labelType = argList1 [1];", "-\t\tint [] argList4 = {", "+\t\tint [] argList2 = {", "+\t\t\tOS.XmNmarginLeft, 0,    /* 9 */", "+\t\t\tOS.XmNmarginRight, 0,   /* 11 */", "-\t\tOS.XtGetValues (handle, argList4, argList4.length / 2);", "+\t\tOS.XtGetValues (handle, argList2, argList2.length / 2);", "-\t\t\tstring = display.wrapText (string, font, wHint - argList4 [7] * 2);", "+\t\t\tstring = display.wrapText (string, font, wHint - (argList2 [7] * 2) - argList2 [9] - argList2 [11]);", "-\t\tGC gc = new GC(this);", "-\t\tPoint extent = gc.textExtent(string);", "-\t\tgc.dispose();", "-\t\theight = extent.y + argList4 [1] + argList4 [3] + argList4 [5] * 2 + border * 2;", "+\t\tGC gc = new GC (this);", "+\t\tPoint extent = gc.textExtent (string);", "+\t\tgc.dispose ();", "+\t\theight = extent.y + argList2 [1] + argList2 [3] + (argList2 [5] * 2) + (border * 2);", "-\t\t\twidth += extent.x + 2 * argList4 [7];", "+\t\t\twidth += extent.x + (argList2 [7] * 2) + argList2 [9] + argList2 [11];", "-\tif (wHint != SWT.DEFAULT) width = wHint + (border * 2);", "-\tif (hHint != SWT.DEFAULT) height = hHint + (border * 2);", "+\tif (wHint != SWT.DEFAULT) {", "+\t\tint [] argList3 = {", "+\t\t\tOS.XmNmarginWidth, 0,  /* 1 */", "+\t\t\tOS.XmNmarginLeft, 0,   /* 3 */", "+\t\t\tOS.XmNmarginRight, 0,  /* 5 */", "+\t\t};", "+\t\tOS.XtGetValues (handle, argList3, argList3.length / 2);", "+\t\twidth = wHint + (border * 2) + (argList3 [1] * 2) + argList3 [3] + argList3 [5];", "+\t}", "+\tif (hHint != SWT.DEFAULT) {", "+\t\tint [] argList4 = {", "+\t\t\tOS.XmNmarginHeight, 0,  /* 1 */", "+\t\t\tOS.XmNmarginTop, 0,     /* 3 */", "+\t\t\tOS.XmNmarginBottom, 0,  /* 5 */", "+\t\t};", "+\t\tOS.XtGetValues (handle, argList4, argList4.length / 2);", "+\t\theight = hHint + (border * 2) + (argList4 [1] * 2) + argList4 [3] + argList4 [5];", "+\t}"]}], "num": 54521}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ec2c25ccc943ae2e5b242d1c471c486f", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b9e4d9771b209f7064fb2c25cd2f111", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "afd1a95e7721581f00839d502a73cac24f908daf", "commitAfterChange": "dfc9c2c27083a19c0dc0cbc4bc9dda0223b753d5", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " void drawTabArea(Event event)", "signatureAfterChange": " void drawTabArea(Event event)", "diff": ["-\t// Fill in the empty spaces to the right and left of the tabs", "-\tif (single) {", "-\t\tint[] shapeLeft = null;", "-\t\tint[] shapeRight = null;", "-\t\tif (onBottom) { // single with tabs on bototm", "-\t\t\t//left side", "-\t\t\tshapeLeft = new int[BOTTOM_LEFT_CORNER.length+6];", "-\t\t\tint index = 0;", "-\t\t\tint width2 = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "-\t\t\tshapeLeft[index++] = x;", "-\t\t\tshapeLeft[index++] = y;", "-\t\t\tfor (int i = 0; i < BOTTOM_LEFT_CORNER.length/2; i++) {", "-\t\t\t\tshapeLeft[index++] = x+BOTTOM_LEFT_CORNER[2*i];", "-\t\t\t\tshapeLeft[index++] = y+height+1+BOTTOM_LEFT_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeLeft[index++] = x+width2;", "-\t\t\tshapeLeft[index++] = y+height+1;", "-\t\t\tshapeLeft[index++] = x+width2;", "-\t\t\tshapeLeft[index++] = y;", "-\t\t\t//right side", "-\t\t\tint x2 = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "-\t\t\twidth2 = size.x - borderRight - x2;", "-\t\t\tif (borderLeft == 0) width2 += 1;", "-\t\t\tshapeRight = new int[BOTTOM_RIGHT_CORNER.length+6];", "-\t\t\tindex = 0;", "-\t\t\tshapeRight[index++] = x2;", "-\t\t\tshapeRight[index++] = y;", "-\t\t\tshapeRight[index++] = x2;", "-\t\t\tshapeRight[index++] = y+height+1;", "-\t\t\tfor (int i = 0; i < BOTTOM_RIGHT_CORNER.length/2; i++) {", "-\t\t\t\tshapeRight[index++] = x2+width2+BOTTOM_RIGHT_CORNER[2*i];", "-\t\t\t\tshapeRight[index++] = y+height+1+BOTTOM_RIGHT_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeRight[index++] = x2+width2;", "-\t\t\tshapeRight[index++] = y;", "-\t\t} else { // single with tabs on top", "-\t\t\t//left side", "-\t\t\tshapeLeft = new int[TOP_LEFT_CORNER.length+6];", "-\t\t\tint index = 0;", "-\t\t\tint width2 = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "-\t\t\tshapeLeft[index++] = x;", "-\t\t\tshapeLeft[index++] = y+height+1;", "-\t\t\tfor (int i = 0; i < TOP_LEFT_CORNER.length/2; i++) {", "-\t\t\t\tshapeLeft[index++] = x+TOP_LEFT_CORNER[2*i];", "-\t\t\t\tshapeLeft[index++] = y+TOP_LEFT_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeLeft[index++] = x+width2;", "-\t\t\tshapeLeft[index++] = y;", "-\t\t\tshapeLeft[index++] = x+width2;", "-\t\t\tshapeLeft[index++] = y+height+1;", "-\t\t\t//right side", "-\t\t\tint x2 = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "-\t\t\twidth2 = size.x - borderRight - x2;", "-\t\t\tif (borderLeft == 0) width2 += 1;", "-\t\t\tshapeRight = new int[TOP_RIGHT_CORNER.length+6];", "-\t\t\tindex = 0;", "-\t\t\tshapeRight[index++] = x2;", "-\t\t\tshapeRight[index++] = y+height+1;", "-\t\t\tshapeRight[index++] = x2;", "-\t\t\tshapeRight[index++] = y;", "-\t\t\tfor (int i = 0; i < TOP_RIGHT_CORNER.length/2; i++) {", "-\t\t\t\tshapeRight[index++] = x2+width2+TOP_RIGHT_CORNER[2*i];", "-\t\t\t\tshapeRight[index++] = y+TOP_RIGHT_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeRight[index++] = x2+width2;", "-\t\t\tshapeRight[index++] = y+height+1;", "+\t// Draw Tab Header", "+\tif (onBottom) {", "+\t\tshape = new int[BOTTOM_LEFT_CORNER.length + BOTTOM_RIGHT_CORNER.length + 4];", "+\t\tint index = 0;", "+\t\tshape[index++] = x;", "+\t\tshape[index++] = y-HIGHLIGHT_HEADER-1;", "+\t\tfor (int i = 0; i < BOTTOM_LEFT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+BOTTOM_LEFT_CORNER[2*i];", "+\t\t\tshape[index++] = y+height+BOTTOM_LEFT_CORNER[2*i+1];", "+\t\t\tif (borderLeft == 0) shape[index-1] += 1;", "-\t\tdrawBackground(gc, shapeLeft, false);", "-\t\tdrawBackground(gc, shapeRight, false);", "-\t} else { // SWT.MULTI", "-\t\t// Fill in the empty space to the right of the last tab", "-\t\tCTabItem lastItem = items[items.length -1];", "-\t\tint edge = lastItem.x+lastItem.width;", "-\t\tif (edge < size.x) {", "-\t\t\tshape = null;", "-\t\t\tif (onBottom) {", "-\t\t\t\tshape = new int[BOTTOM_RIGHT_CORNER.length+6];", "-\t\t\t\tint index = 0;", "-\t\t\t\tshape[index++] = edge;", "-\t\t\t\tshape[index++] = size.y - borderBottom - tabHeight - 1;", "-\t\t\t\tshape[index++] = edge;", "-\t\t\t\tshape[index++] = size.y - borderBottom;", "-\t\t\t\tfor (int i = 0; i < BOTTOM_RIGHT_CORNER.length/2; i++) {", "-\t\t\t\t\tshape[index++] = size.x- borderRight + 1+BOTTOM_RIGHT_CORNER[2*i];", "-\t\t\t\t\tshape[index++] = size.y - borderBottom + BOTTOM_RIGHT_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tshape[index++] = size.x - borderRight + 1;", "-\t\t\t\tshape[index++] = size.y - borderBottom - tabHeight - 1;", "-\t\t\t} else {", "-\t\t\t\tshape = new int[TOP_RIGHT_CORNER.length+6];", "-\t\t\t\tint index = 0;", "-\t\t\t\tshape[index++] = edge;", "-\t\t\t\tshape[index++] = borderTop + tabHeight + 1;", "-\t\t\t\tshape[index++] = edge;", "-\t\t\t\tshape[index++] = borderTop;", "-\t\t\t\tfor (int i = 0; i < TOP_RIGHT_CORNER.length/2; i++) {", "-\t\t\t\t\tshape[index++] = size.x - borderRight + 1+TOP_RIGHT_CORNER[2*i];", "-\t\t\t\t\tshape[index++] = borderTop+TOP_RIGHT_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tshape[index++] = size.x - borderRight + 1;", "-\t\t\t\tshape[index++] = borderTop + tabHeight + 1;", "-\t\t\t}", "-\t\t\tdrawBackground(gc, shape, false);", "+\t\tfor (int i = 0; i < BOTTOM_RIGHT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+width+BOTTOM_RIGHT_CORNER[2*i];", "+\t\t\tshape[index++] = y+height+BOTTOM_RIGHT_CORNER[2*i+1];", "+\t\t\tif (borderLeft == 0) shape[index-1] += 1;", "+\t\tshape[index++] = x+width;", "+\t\tshape[index++] = y-HIGHLIGHT_HEADER-1;", "+\t} else {", "+\t\tshape = new int[TOP_LEFT_CORNER.length + TOP_RIGHT_CORNER.length + 4];", "+\t\tint index = 0;", "+\t\tshape[index++] = x;", "+\t\tshape[index++] = y+height+HIGHLIGHT_HEADER+1;", "+\t\tfor (int i = 0; i < TOP_LEFT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+TOP_LEFT_CORNER[2*i];", "+\t\t\tshape[index++] = y+TOP_LEFT_CORNER[2*i+1];", "+\t\t}", "+\t\tfor (int i = 0; i < TOP_RIGHT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+width+TOP_RIGHT_CORNER[2*i];", "+\t\t\tshape[index++] = y+TOP_RIGHT_CORNER[2*i+1];", "+\t\t}", "+\t\tshape[index++] = x+width;", "+\t\tshape[index++] = y+height+HIGHLIGHT_HEADER+1;", "+\t}", "+\t// Fill in background", "+\tdrawBackground(gc, shape, false);", "+\t// Fill in parent background for non-rectangular shape", "+\tRegion r = new Region();", "+\tr.add(new Rectangle(x, y, width + 1, height + 1));", "+\tr.subtract(shape);", "+\tgc.setBackground(getParent().getBackground());", "+\tfillRegion(gc, r);", "+\tr.dispose();", "+\t// Draw border line", "+\tif (borderLeft > 0) {", "+\t\tRGB inside = getBackground().getRGB();", "+\t\tif (bgImage != null || (gradientColors != null && gradientColors.length > 1)) inside = null;", "+\t\tRGB outside = getParent().getBackground().getRGB();", "+\t\tantialias(shape, borderColor.getRGB(), inside, outside, gc);", "+\t\tgc.setForeground(borderColor);", "+\t\tgc.drawPolyline(shape);", "-\t}", "+\t}\t", "-\t\tint x2 = borderLeft;", "-\t\tint y2 = onBottom ? size.y - borderBottom - tabHeight - HIGHLIGHT_HEADER : borderTop + tabHeight + 1;", "-\t\tint width2 = size.x - borderLeft - borderRight;", "-\t\tint height2 = HIGHLIGHT_HEADER - 1;", "-\t\tgc.setBackground(getBackground());", "-\t\tgc.fillRectangle(x2, y2, width2, height2);", "-\t\tx2 = borderLeft;", "-\t\ty2 = (onBottom) ? size.y - borderBottom - tabHeight - 1 : borderTop + tabHeight;", "+\t\tint x1 = borderLeft;", "+\t\tint y1 = (onBottom) ? size.y - borderBottom - tabHeight - 1 : borderTop + tabHeight;", "+\t\tint x2 = size.x - borderRight;", "-\t\tgc.drawLine(x2, y2, x2 + width2, y2);", "+\t\tgc.drawLine(x1, y1, x2, y1);", "+\t// Draw Buttons", "-\t// draw insertion mark", "+\t// Draw insertion mark", "-", "-\t\t", "-\t// draw outside border area", "-\tif (onBottom) {", "-\t\tshape = new int[BOTTOM_LEFT_CORNER.length + BOTTOM_RIGHT_CORNER.length + 4];", "-\t\tint index = 0;", "-\t\tshape[index++] = x;", "-\t\tshape[index++] = y;", "-\t\tfor (int i = 0; i < BOTTOM_LEFT_CORNER.length/2; i++) {", "-\t\t\tshape[index++] = x+BOTTOM_LEFT_CORNER[2*i];", "-\t\t\tshape[index++] = y+height+BOTTOM_LEFT_CORNER[2*i+1];", "-\t\t\tif (borderLeft == 0) shape[index-1] += 1;", "-\t\t}", "-\t\tfor (int i = 0; i < BOTTOM_RIGHT_CORNER.length/2; i++) {", "-\t\t\tshape[index++] = x+width+BOTTOM_RIGHT_CORNER[2*i];", "-\t\t\tshape[index++] = y+height+BOTTOM_RIGHT_CORNER[2*i+1];", "-\t\t\tif (borderLeft == 0) shape[index-1] += 1;", "-\t\t}", "-\t\tshape[index++] = x+width;", "-\t\tshape[index++] = y-1;", "-\t} else {", "-\t\tshape = new int[TOP_LEFT_CORNER.length + TOP_RIGHT_CORNER.length + 4];", "-\t\tint index = 0;", "-\t\tshape[index++] = x;", "-\t\tshape[index++] = y+height+1;", "-\t\tfor (int i = 0; i < TOP_LEFT_CORNER.length/2; i++) {", "-\t\t\tshape[index++] = x+TOP_LEFT_CORNER[2*i];", "-\t\t\tshape[index++] = y+TOP_LEFT_CORNER[2*i+1];", "-\t\t}", "-\t\tfor (int i = 0; i < TOP_RIGHT_CORNER.length/2; i++) {", "-\t\t\tshape[index++] = x+width+TOP_RIGHT_CORNER[2*i];", "-\t\t\tshape[index++] = y+TOP_RIGHT_CORNER[2*i+1];", "-\t\t}", "-\t\tshape[index++] = x+width;", "-\t\tshape[index++] = y+height+1;", "-\t}", "-\t// fill in space outside border line with parent background", "-\tRegion r = new Region();", "-\tr.add(new Rectangle(x, y, width + 1, height + 1));", "-\tr.subtract(shape);", "-\tgc.setBackground(getParent().getBackground());", "-\tfillRegion(gc, r);", "-\tr.dispose();", "-\t", "-\t// draw border line", "-\tif (borderLeft > 0) {", "-\t\tRGB inside = getBackground().getRGB();", "-\t\tif (bgImage != null || (gradientColors != null && gradientColors.length > 1 && !gradientVertical)) inside = null;", "-\t\tRGB outside = getParent().getBackground().getRGB();", "-\t\tantialias(shape, borderColor.getRGB(), inside, outside, gc);", "-\t\tgc.setForeground(borderColor);", "-\t\tgc.drawPolyline(shape);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "baee588481429f0e85a979a401084170", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "afd1a95e7721581f00839d502a73cac24f908daf", "commitAfterChange": "dfc9c2c27083a19c0dc0cbc4bc9dda0223b753d5", "methodNumberBeforeChange": 20, "methodNumberAfterChange": 20, "signatureBeforeChange": " void drawTabArea(Event event)", "signatureAfterChange": " void drawTabArea(Event event)", "diff": ["-\t// Fill in the empty spaces to the right and left of the tabs", "-\tif (single) {", "-\t\tint[] shapeLeft = null;", "-\t\tint[] shapeRight = null;", "-\t\tif (onBottom) { // single with tabs on bototm", "-\t\t\t//left side", "-\t\t\tshapeLeft = new int[BOTTOM_LEFT_CORNER.length+6];", "-\t\t\tint index = 0;", "-\t\t\tint width2 = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "-\t\t\tshapeLeft[index++] = x;", "-\t\t\tshapeLeft[index++] = y;", "-\t\t\tfor (int i = 0; i < BOTTOM_LEFT_CORNER.length/2; i++) {", "-\t\t\t\tshapeLeft[index++] = x+BOTTOM_LEFT_CORNER[2*i];", "-\t\t\t\tshapeLeft[index++] = y+height+1+BOTTOM_LEFT_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeLeft[index++] = x+width2;", "-\t\t\tshapeLeft[index++] = y+height+1;", "-\t\t\tshapeLeft[index++] = x+width2;", "-\t\t\tshapeLeft[index++] = y;", "-\t\t\t//right side", "-\t\t\tint x2 = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "-\t\t\twidth2 = size.x - borderRight - x2;", "-\t\t\tif (borderLeft == 0) width2 += 1;", "-\t\t\tshapeRight = new int[BOTTOM_RIGHT_CORNER.length+6];", "-\t\t\tindex = 0;", "-\t\t\tshapeRight[index++] = x2;", "-\t\t\tshapeRight[index++] = y;", "-\t\t\tshapeRight[index++] = x2;", "-\t\t\tshapeRight[index++] = y+height+1;", "-\t\t\tfor (int i = 0; i < BOTTOM_RIGHT_CORNER.length/2; i++) {", "-\t\t\t\tshapeRight[index++] = x2+width2+BOTTOM_RIGHT_CORNER[2*i];", "-\t\t\t\tshapeRight[index++] = y+height+1+BOTTOM_RIGHT_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeRight[index++] = x2+width2;", "-\t\t\tshapeRight[index++] = y;", "-\t\t} else { // single with tabs on top", "-\t\t\t//left side", "-\t\t\tshapeLeft = new int[TOP_LEFT_CORNER.length+6];", "-\t\t\tint index = 0;", "-\t\t\tint width2 = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "-\t\t\tshapeLeft[index++] = x;", "-\t\t\tshapeLeft[index++] = y+height+1;", "-\t\t\tfor (int i = 0; i < TOP_LEFT_CORNER.length/2; i++) {", "-\t\t\t\tshapeLeft[index++] = x+TOP_LEFT_CORNER[2*i];", "-\t\t\t\tshapeLeft[index++] = y+TOP_LEFT_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeLeft[index++] = x+width2;", "-\t\t\tshapeLeft[index++] = y;", "-\t\t\tshapeLeft[index++] = x+width2;", "-\t\t\tshapeLeft[index++] = y+height+1;", "-\t\t\t//right side", "-\t\t\tint x2 = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "-\t\t\twidth2 = size.x - borderRight - x2;", "-\t\t\tif (borderLeft == 0) width2 += 1;", "-\t\t\tshapeRight = new int[TOP_RIGHT_CORNER.length+6];", "-\t\t\tindex = 0;", "-\t\t\tshapeRight[index++] = x2;", "-\t\t\tshapeRight[index++] = y+height+1;", "-\t\t\tshapeRight[index++] = x2;", "-\t\t\tshapeRight[index++] = y;", "-\t\t\tfor (int i = 0; i < TOP_RIGHT_CORNER.length/2; i++) {", "-\t\t\t\tshapeRight[index++] = x2+width2+TOP_RIGHT_CORNER[2*i];", "-\t\t\t\tshapeRight[index++] = y+TOP_RIGHT_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeRight[index++] = x2+width2;", "-\t\t\tshapeRight[index++] = y+height+1;", "+\t// Draw Tab Header", "+\tif (onBottom) {", "+\t\tshape = new int[BOTTOM_LEFT_CORNER.length + BOTTOM_RIGHT_CORNER.length + 4];", "+\t\tint index = 0;", "+\t\tshape[index++] = x;", "+\t\tshape[index++] = y-HIGHLIGHT_HEADER-1;", "+\t\tfor (int i = 0; i < BOTTOM_LEFT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+BOTTOM_LEFT_CORNER[2*i];", "+\t\t\tshape[index++] = y+height+BOTTOM_LEFT_CORNER[2*i+1];", "+\t\t\tif (borderLeft == 0) shape[index-1] += 1;", "-\t\tdrawBackground(gc, shapeLeft, false);", "-\t\tdrawBackground(gc, shapeRight, false);", "-\t} else { // SWT.MULTI", "-\t\t// Fill in the empty space to the right of the last tab", "-\t\tCTabItem2 lastItem = items[items.length -1];", "-\t\tint edge = lastItem.x+lastItem.width;", "-\t\tif (edge < size.x) {", "-\t\t\tshape = null;", "-\t\t\tif (onBottom) {", "-\t\t\t\tshape = new int[BOTTOM_RIGHT_CORNER.length+6];", "-\t\t\t\tint index = 0;", "-\t\t\t\tshape[index++] = edge;", "-\t\t\t\tshape[index++] = size.y - borderBottom - tabHeight - 1;", "-\t\t\t\tshape[index++] = edge;", "-\t\t\t\tshape[index++] = size.y - borderBottom;", "-\t\t\t\tfor (int i = 0; i < BOTTOM_RIGHT_CORNER.length/2; i++) {", "-\t\t\t\t\tshape[index++] = size.x- borderRight + 1+BOTTOM_RIGHT_CORNER[2*i];", "-\t\t\t\t\tshape[index++] = size.y - borderBottom + BOTTOM_RIGHT_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tshape[index++] = size.x - borderRight + 1;", "-\t\t\t\tshape[index++] = size.y - borderBottom - tabHeight - 1;", "-\t\t\t} else {", "-\t\t\t\tshape = new int[TOP_RIGHT_CORNER.length+6];", "-\t\t\t\tint index = 0;", "-\t\t\t\tshape[index++] = edge;", "-\t\t\t\tshape[index++] = borderTop + tabHeight + 1;", "-\t\t\t\tshape[index++] = edge;", "-\t\t\t\tshape[index++] = borderTop;", "-\t\t\t\tfor (int i = 0; i < TOP_RIGHT_CORNER.length/2; i++) {", "-\t\t\t\t\tshape[index++] = size.x - borderRight + 1+TOP_RIGHT_CORNER[2*i];", "-\t\t\t\t\tshape[index++] = borderTop+TOP_RIGHT_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tshape[index++] = size.x - borderRight + 1;", "-\t\t\t\tshape[index++] = borderTop + tabHeight + 1;", "-\t\t\t}", "-\t\t\tdrawBackground(gc, shape, false);", "+\t\tfor (int i = 0; i < BOTTOM_RIGHT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+width+BOTTOM_RIGHT_CORNER[2*i];", "+\t\t\tshape[index++] = y+height+BOTTOM_RIGHT_CORNER[2*i+1];", "+\t\t\tif (borderLeft == 0) shape[index-1] += 1;", "+\t\tshape[index++] = x+width;", "+\t\tshape[index++] = y-HIGHLIGHT_HEADER-1;", "+\t} else {", "+\t\tshape = new int[TOP_LEFT_CORNER.length + TOP_RIGHT_CORNER.length + 4];", "+\t\tint index = 0;", "+\t\tshape[index++] = x;", "+\t\tshape[index++] = y+height+HIGHLIGHT_HEADER+1;", "+\t\tfor (int i = 0; i < TOP_LEFT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+TOP_LEFT_CORNER[2*i];", "+\t\t\tshape[index++] = y+TOP_LEFT_CORNER[2*i+1];", "+\t\t}", "+\t\tfor (int i = 0; i < TOP_RIGHT_CORNER.length/2; i++) {", "+\t\t\tshape[index++] = x+width+TOP_RIGHT_CORNER[2*i];", "+\t\t\tshape[index++] = y+TOP_RIGHT_CORNER[2*i+1];", "+\t\t}", "+\t\tshape[index++] = x+width;", "+\t\tshape[index++] = y+height+HIGHLIGHT_HEADER+1;", "+\t}", "+\t// Fill in background", "+\tdrawBackground(gc, shape, false);", "+\t// Fill in parent background for non-rectangular shape", "+\tRegion r = new Region();", "+\tr.add(new Rectangle(x, y, width + 1, height + 1));", "+\tr.subtract(shape);", "+\tgc.setBackground(getParent().getBackground());", "+\tfillRegion(gc, r);", "+\tr.dispose();", "+\t// Draw border line", "+\tif (borderLeft > 0) {", "+\t\tRGB inside = getBackground().getRGB();", "+\t\tif (bgImage != null || (gradientColors != null && gradientColors.length > 1)) inside = null;", "+\t\tRGB outside = getParent().getBackground().getRGB();", "+\t\tantialias(shape, borderColor.getRGB(), inside, outside, gc);", "+\t\tgc.setForeground(borderColor);", "+\t\tgc.drawPolyline(shape);", "-\t}", "+\t}\t", "-\t\tint x2 = borderLeft;", "-\t\tint y2 = onBottom ? size.y - borderBottom - tabHeight - HIGHLIGHT_HEADER : borderTop + tabHeight + 1;", "-\t\tint width2 = size.x - borderLeft - borderRight;", "-\t\tint height2 = HIGHLIGHT_HEADER - 1;", "-\t\tgc.setBackground(getBackground());", "-\t\tgc.fillRectangle(x2, y2, width2, height2);", "-\t\tx2 = borderLeft;", "-\t\ty2 = (onBottom) ? size.y - borderBottom - tabHeight - 1 : borderTop + tabHeight;", "+\t\tint x1 = borderLeft;", "+\t\tint y1 = (onBottom) ? size.y - borderBottom - tabHeight - 1 : borderTop + tabHeight;", "+\t\tint x2 = size.x - borderRight;", "-\t\tgc.drawLine(x2, y2, x2 + width2, y2);", "+\t\tgc.drawLine(x1, y1, x2, y1);", "+\t// Draw Buttons", "-\t// draw insertion mark", "+\t// Draw insertion mark", "-", "-\t\t", "-\t// draw outside border area", "-\tif (onBottom) {", "-\t\tshape = new int[BOTTOM_LEFT_CORNER.length + BOTTOM_RIGHT_CORNER.length + 4];", "-\t\tint index = 0;", "-\t\tshape[index++] = x;", "-\t\tshape[index++] = y;", "-\t\tfor (int i = 0; i < BOTTOM_LEFT_CORNER.length/2; i++) {", "-\t\t\tshape[index++] = x+BOTTOM_LEFT_CORNER[2*i];", "-\t\t\tshape[index++] = y+height+BOTTOM_LEFT_CORNER[2*i+1];", "-\t\t\tif (borderLeft == 0) shape[index-1] += 1;", "-\t\t}", "-\t\tfor (int i = 0; i < BOTTOM_RIGHT_CORNER.length/2; i++) {", "-\t\t\tshape[index++] = x+width+BOTTOM_RIGHT_CORNER[2*i];", "-\t\t\tshape[index++] = y+height+BOTTOM_RIGHT_CORNER[2*i+1];", "-\t\t\tif (borderLeft == 0) shape[index-1] += 1;", "-\t\t}", "-\t\tshape[index++] = x+width;", "-\t\tshape[index++] = y-1;", "-\t} else {", "-\t\tshape = new int[TOP_LEFT_CORNER.length + TOP_RIGHT_CORNER.length + 4];", "-\t\tint index = 0;", "-\t\tshape[index++] = x;", "-\t\tshape[index++] = y+height+1;", "-\t\tfor (int i = 0; i < TOP_LEFT_CORNER.length/2; i++) {", "-\t\t\tshape[index++] = x+TOP_LEFT_CORNER[2*i];", "-\t\t\tshape[index++] = y+TOP_LEFT_CORNER[2*i+1];", "-\t\t}", "-\t\tfor (int i = 0; i < TOP_RIGHT_CORNER.length/2; i++) {", "-\t\t\tshape[index++] = x+width+TOP_RIGHT_CORNER[2*i];", "-\t\t\tshape[index++] = y+TOP_RIGHT_CORNER[2*i+1];", "-\t\t}", "-\t\tshape[index++] = x+width;", "-\t\tshape[index++] = y+height+1;", "-\t}", "-\t// fill in space outside border line with parent background", "-\tRegion r = new Region();", "-\tr.add(new Rectangle(x, y, width + 1, height + 1));", "-\tr.subtract(shape);", "-\tgc.setBackground(getParent().getBackground());", "-\tfillRegion(gc, r);", "-\tr.dispose();", "-\t", "-\t// draw border line", "-\tif (borderLeft > 0) {", "-\t\tRGB inside = getBackground().getRGB();", "-\t\tif (bgImage != null || (gradientColors != null && gradientColors.length > 1 && !gradientVertical)) inside = null;", "-\t\tRGB outside = getParent().getBackground().getRGB();", "-\t\tantialias(shape, borderColor.getRGB(), inside, outside, gc);", "-\t\tgc.setForeground(borderColor);", "-\t\tgc.drawPolyline(shape);", "-\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78a30628e86cdd48420c04f60cb8ba01", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/DateTime.java", "commitBeforeChange": "4e8fb426aa55775d1635a190ce7e40e2c95849d3", "commitAfterChange": "14c0e189aa7c20d8fa715eac9bc3917ccf42ea31", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t\t\tTCHAR buffer = new TCHAR (getCodePage (), 128);", "-\t\t\tint /*long*/ newFont, oldFont = 0;", "-\t\t\tint /*long*/ hDC = OS.GetDC (handle);", "-\t\t\tnewFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "-\t\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "-\t\t\tRECT rect = new RECT ();", "-\t\t\tint flags = OS.DT_CALCRECT | OS.DT_EDITCONTROL | OS.DT_NOPREFIX;", "-\t\t\tSYSTEMTIME systime = new SYSTEMTIME ();", "-\t\t\tif ((style & SWT.DATE) != 0) {", "-\t\t\t\t/* Determine the widest/tallest year string. */", "-\t\t\t\tsystime.wMonth = 1;", "-\t\t\t\tsystime.wDay = 1;", "-\t\t\t\tint widest = 0, secondWidest = 0, thirdWidest = 0;", "-\t\t\t\tfor (int i = 0; i <= MAX_DIGIT; i++) {", "-\t\t\t\t\tsystime.wYear = (short) (2000 + i); // year 2000 + i is guaranteed to exist", "-\t\t\t\t\tint size = OS.GetDateFormat(OS.LOCALE_USER_DEFAULT, OS.DATE_SHORTDATE, systime, null, buffer, buffer.length ());", "-\t\t\t\t\tif (size == 0) {", "-\t\t\t\t\t\tbuffer = new TCHAR (getCodePage (), size);", "-\t\t\t\t\t\tOS.GetDateFormat(OS.LOCALE_USER_DEFAULT, OS.DATE_SHORTDATE, systime, null, buffer, buffer.length ());", "+\t\t\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\t\t/* Vista and later: use DTM_GETIDEALSIZE. */", "+\t\t\t\tSIZE size = new SIZE ();", "+\t\t\t\tOS.SendMessage(handle, OS.DTM_GETIDEALSIZE, 0, size);", "+\t\t\t\twidth = size.cx;", "+\t\t\t\theight = size.cy;", "+\t\t\t} else {", "+\t\t\t\tint /*long*/ newFont, oldFont = 0;", "+\t\t\t\tint /*long*/ hDC = OS.GetDC (handle);", "+\t\t\t\tnewFont = OS.SendMessage (handle, OS.WM_GETFONT, 0, 0);", "+\t\t\t\tif (newFont != 0) oldFont = OS.SelectObject (hDC, newFont);", "+\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\tif ((style & SWT.DATE) != 0) {", "+\t\t\t\t\tint dwFlags = 0;", "+\t\t\t\t\tTCHAR lpFormat = null;", "+\t\t\t\t\tif ((style & SWT.SHORT) != 0) {", "+\t\t\t\t\t\tlpFormat = new TCHAR (0, getCustomShortDateFormat(), true);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tdwFlags = (style & SWT.MEDIUM) != 0 ? OS.DATE_SHORTDATE : OS.DATE_LONGDATE;", "-\t\t\t\t\trect.left = rect.top = rect.right = rect.bottom = 0;", "-\t\t\t\t\tOS.DrawText (hDC, buffer, size, rect, flags);", "-\t\t\t\t\tif (rect.right - rect.left >= width) {", "-\t\t\t\t\t\twidth = rect.right - rect.left;", "-\t\t\t\t\t\tthirdWidest = secondWidest;", "-\t\t\t\t\t\tsecondWidest = widest;", "-\t\t\t\t\t\twidest = i;", "+\t\t\t\t\tint size = OS.GetDateFormat(OS.LOCALE_USER_DEFAULT, dwFlags, null, lpFormat, null, 0);", "+\t\t\t\t\tif (size > 0) {", "+\t\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), size);", "+\t\t\t\t\t\tOS.GetDateFormat(OS.LOCALE_USER_DEFAULT, dwFlags, null, lpFormat, buffer, buffer.length ());", "+\t\t\t\t\t\tOS.DrawText (hDC, buffer, size, rect, OS.DT_CALCRECT | OS.DT_EDITCONTROL);", "-\t\t\t\t\theight = Math.max(height, rect.bottom - rect.top);", "+\t\t\t\t} else if ((style & SWT.TIME) != 0) {", "+\t\t\t\t\tint dwFlags = 0;", "+\t\t\t\t\tTCHAR lpFormat = null;", "+\t\t\t\t\tif ((style & SWT.SHORT) != 0) {", "+\t\t\t\t\t\tdwFlags = OS.TIME_NOSECONDS;", "+\t\t\t\t\t\tlpFormat = new TCHAR (0, getCustomShortTimeFormat(), true);", "+\t\t\t\t\t}", "+\t\t\t\t\tint size = OS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, null, lpFormat, null, 0);", "+\t\t\t\t\tif (size > 0) {", "+\t\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), size);", "+\t\t\t\t\t\tOS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, null, lpFormat, buffer, buffer.length ());", "+\t\t\t\t\t\tOS.DrawText (hDC, buffer, size, rect, OS.DT_CALCRECT | OS.DT_EDITCONTROL);", "+\t\t\t\t\t}", "-\t\t\t\tif (widest > 1) widest = widest * 1000 + widest * 100 + widest * 10 + widest;", "-\t\t\t\telse if (secondWidest > 1) widest = secondWidest * 1000 + widest * 100 + widest * 10 + widest;", "-\t\t\t\telse widest = thirdWidest * 1000 + widest * 100 + widest * 10 + widest;", "-\t\t\t\tsystime.wYear = (short) widest;", "-", "-\t\t\t\t/* Determine the widest/tallest month name string. */", "-\t\t\t\twidth = widest = 0;", "-\t\t\t\tfor (short i = 0; i < MONTH_NAMES.length; i++) {", "-\t\t\t\t\tint name = MONTH_NAMES [i];", "-\t\t\t\t\tint size = OS.GetLocaleInfo (OS.LOCALE_USER_DEFAULT, name, buffer, buffer.length ());", "-\t\t\t\t\tif (size == 0) {", "-\t\t\t\t\t\tbuffer = new TCHAR (getCodePage (), size);", "-\t\t\t\t\t\tOS.GetLocaleInfo (OS.LOCALE_USER_DEFAULT, name, buffer, buffer.length ());", "-\t\t\t\t\t}", "-\t\t\t\t\trect.left = rect.top = rect.right = rect.bottom = 0;", "-\t\t\t\t\tOS.DrawText (hDC, buffer, size, rect, flags);", "-\t\t\t\t\tif (rect.right - rect.left > width) {", "-\t\t\t\t\t\twidth = rect.right - rect.left;", "-\t\t\t\t\t\twidest = i;", "-\t\t\t\t\t}", "-\t\t\t\t\theight = Math.max(height, rect.bottom - rect.top);", "-\t\t\t\t}", "-\t\t\t\tsystime.wMonth = (short) (widest + 1);", "-", "-\t\t\t\t/* Determine the widest/tallest date string in the widest month of the widest year. */", "-\t\t\t\tint dwFlags = ((style & SWT.MEDIUM) != 0) ? OS.DATE_SHORTDATE : ((style & SWT.SHORT) != 0) ? OS.DATE_YEARMONTH : OS.DATE_LONGDATE;", "-\t\t\t\twidth = 0;", "-\t\t\t\tfor (short i = 1; i <= MAX_DAY; i++) {", "-\t\t\t\t\tsystime.wDay = i;", "-\t\t\t\t\tint size = OS.GetDateFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "-\t\t\t\t\tif (size == 0) {", "-\t\t\t\t\t\tbuffer = new TCHAR (getCodePage (), size);", "-\t\t\t\t\t\tOS.GetDateFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "-\t\t\t\t\t}", "-\t\t\t\t\trect.left = rect.top = rect.right = rect.bottom = 0;", "-\t\t\t\t\tOS.DrawText (hDC, buffer, size, rect, flags);", "-\t\t\t\t\twidth = Math.max(width, rect.right - rect.left);", "-\t\t\t\t\theight = Math.max(height, rect.bottom - rect.top);", "-\t\t\t\t\tif ((style & SWT.SHORT) != 0) break;", "-\t\t\t\t}", "-\t\t\t} else if ((style & SWT.TIME) != 0) {", "-\t\t\t\t/* Determine the widest/tallest hour string. This code allows for the possibility of ligatures. */", "-\t\t\t\tint dwFlags = ((style & SWT.SHORT) != 0) ? OS.TIME_NOSECONDS : 0;", "-\t\t\t\tshort widest = 0;", "-\t\t\t\tint max = is24HourTime () ? MAX_24HOUR : MAX_12HOUR;", "-\t\t\t\tfor (short i = 0; i < max; i++) {", "-\t\t\t\t\tsystime.wHour = i;", "-\t\t\t\t\tint size = OS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "-\t\t\t\t\tif (size == 0) {", "-\t\t\t\t\t\tbuffer = new TCHAR (getCodePage (), size);", "-\t\t\t\t\t\tOS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "-\t\t\t\t\t}", "-\t\t\t\t\trect.left = rect.top = rect.right = rect.bottom = 0;", "-\t\t\t\t\tOS.DrawText (hDC, buffer, size, rect, flags);", "-\t\t\t\t\tif (rect.right - rect.left > width) {", "-\t\t\t\t\t\twidth = rect.right - rect.left;", "-\t\t\t\t\t\twidest = i;", "-\t\t\t\t\t}", "-\t\t\t\t\theight = Math.max(height, rect.bottom - rect.top);", "-\t\t\t\t}", "-\t\t\t\tsystime.wHour = widest;", "-", "-\t\t\t\t/* Determine the widest/tallest minute and second string. */", "-\t\t\t\twidth = widest = 0;", "-\t\t\t\tfor (short i = 0; i < MAX_MINUTE; i++) {", "-\t\t\t\t\tsystime.wMinute = i;", "-\t\t\t\t\tint size = OS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "-\t\t\t\t\tif (size == 0) {", "-\t\t\t\t\t\tbuffer = new TCHAR (getCodePage (), size);", "-\t\t\t\t\t\tOS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "-\t\t\t\t\t}", "-\t\t\t\t\trect.left = rect.top = rect.right = rect.bottom = 0;", "-\t\t\t\t\tOS.DrawText (hDC, buffer, size, rect, flags);", "-\t\t\t\t\tif (rect.right - rect.left > width) {", "-\t\t\t\t\t\twidth = rect.right - rect.left;", "-\t\t\t\t\t\twidest = i;", "-\t\t\t\t\t}", "-\t\t\t\t\theight = Math.max(height, rect.bottom - rect.top);", "-\t\t\t\t}", "-\t\t\t\tsystime.wMinute = widest;", "-\t\t\t\tsystime.wSecond = widest;", "-", "-\t\t\t\t/* Determine the widest/tallest time string for the widest hour, widest minute, and if applicable, widest second. */", "-\t\t\t\tint size = OS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "-\t\t\t\tif (size == 0) {", "-\t\t\t\t\tbuffer = new TCHAR (getCodePage (), size);", "-\t\t\t\t\tOS.GetTimeFormat(OS.LOCALE_USER_DEFAULT, dwFlags, systime, null, buffer, buffer.length ());", "-\t\t\t\t}", "-\t\t\t\trect.left = rect.top = rect.right = rect.bottom = 0;", "-\t\t\t\tOS.DrawText (hDC, buffer, size, rect, flags);", "-\t\t\t\theight = Math.max(height, rect.bottom - rect.top);", "+\t\t\t\theight = rect.bottom - rect.top;", "+\t\t\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "+\t\t\t\tOS.ReleaseDC (handle, hDC);", "+\t\t\t\tint upDownWidth = OS.GetSystemMetrics (OS.SM_CXVSCROLL);", "+\t\t\t\twidth += upDownWidth + MARGIN;", "-\t\t\tif (newFont != 0) OS.SelectObject (hDC, oldFont);", "-\t\t\tOS.ReleaseDC (handle, hDC);", "-\t\t\tint upDownWidth = OS.GetSystemMetrics (OS.SM_CXVSCROLL);", "-\t\t\t\t// TODO: On Vista, can send DTM_GETDATETIMEPICKERINFO to ask the Edit control what its margins are", "+\t\t\t\t// TODO: Can maybe use DTM_GETDATETIMEPICKERINFO for this", "-\t\t\t\tif ((style & SWT.DROP_DOWN) != 0) upDownWidth += 16;", "-\t\t\twidth += upDownWidth + MARGIN;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d11cc1d2f415a8cdea5ac5598afe229", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "65aaf6e9768e61429e9ffb0c0ae5577af65eba85", "commitAfterChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "methodNumberBeforeChange": 61, "methodNumberAfterChange": 62, "signatureBeforeChange": " void onPaint(Event event)", "signatureAfterChange": " void onPaint(Event event)", "diff": ["-\t", "-\tGC gc = event.gc;", "-\tPoint size = getSize();", "-\t", "+", "+//{", "+//GC gc = event.gc;", "+//Point size = getSize();\t", "+//}", "-\tColor parentBackground = getParent().getBackground();", "-\tColor background = getBackground();", "-\t", "+\tGC gc = event.gc;", "-\t\tgc.setBackground(parentBackground);", "+\t\tPoint size = getSize();\t", "+\t\tgc.setBackground(getParent().getBackground());", "-\t// Fill in the empty spaces to the right and left of the tabs", "-\tif (single) {", "-\t\tint[] shapeLeft = null;", "-\t\tint[] shapeRight = null;", "-\t\tif (onBottom) {", "-\t\t\tint x = Math.max(0, borderLeft - 1);", "-\t\t\tint y = size.y - borderBottom - tabHeight;", "-\t\t\tint width = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "-\t\t\tint height = tabHeight;", "-\t\t\tif (borderRight > 0) height -= 1; // fill in behind border", "-\t\t\tshapeLeft = new int[BOTTOM_LEFT_OUTSIDE_CORNER.length+6];", "-\t\t\tint index = 0;", "-\t\t\tshapeLeft[index++] = x;", "-\t\t\tshapeLeft[index++] = y;", "-\t\t\tfor (int i = 0; i < BOTTOM_LEFT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\tshapeLeft[index++] = x+BOTTOM_LEFT_OUTSIDE_CORNER[2*i];", "-\t\t\t\tshapeLeft[index++] = y+height+BOTTOM_LEFT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeLeft[index++] = x+width;", "-\t\t\tshapeLeft[index++] = y + height;", "-\t\t\tshapeLeft[index++] = x+width;", "-\t\t\tshapeLeft[index++] = y;", "-\t\t\t", "-\t\t\tx = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "-\t\t\twidth = size.x - borderRight - x;", "-\t\t\tif (borderRight > 0) width += 1; // +1 overlap with border", "-\t\t\tshapeRight = new int[BOTTOM_RIGHT_OUTSIDE_CORNER.length+6];", "-\t\t\tindex = 0;", "-\t\t\tshapeRight[index++] = x;", "-\t\t\tshapeRight[index++] = y;", "-\t\t\tshapeRight[index++] = x;", "-\t\t\tshapeRight[index++] = y+height;", "-\t\t\tfor (int i = 0; i < BOTTOM_RIGHT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\tshapeRight[index++] = x+width+BOTTOM_RIGHT_OUTSIDE_CORNER[2*i];", "-\t\t\t\tshapeRight[index++] = y+height+BOTTOM_RIGHT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeRight[index++] = x+width;", "-\t\t\tshapeRight[index++] = y;", "-\t\t} else { // tabs on top", "-\t\t\tint x = Math.max(0, borderLeft - 1);", "-\t\t\tint y = borderTop;", "-\t\t\tint width = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "-\t\t\tint height = tabHeight;", "-\t\t\tshapeLeft = new int[TOP_LEFT_OUTSIDE_CORNER.length+6];", "-\t\t\tint index = 0;", "-\t\t\tshapeLeft[index++] = x;", "-\t\t\tshapeLeft[index++] = y+height;", "-\t\t\tfor (int i = 0; i < TOP_LEFT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\tshapeLeft[index++] = x+TOP_LEFT_OUTSIDE_CORNER[2*i];", "-\t\t\t\tshapeLeft[index++] = y+TOP_LEFT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeLeft[index++] = x+width;", "-\t\t\tshapeLeft[index++] = y;", "-\t\t\tshapeLeft[index++] = x+width;", "-\t\t\tshapeLeft[index++] = y+height;", "-\t\t\t", "-\t\t\tx = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "-\t\t\twidth = size.x - borderRight - x;", "-\t\t\tif (borderRight > 0) width += 1; // +1 overlap with border", "-\t\t\tshapeRight = new int[TOP_RIGHT_OUTSIDE_CORNER.length+6];", "-\t\t\tindex = 0;", "-\t\t\tshapeRight[index++] = x;", "-\t\t\tshapeRight[index++] = y+height;", "-\t\t\tshapeRight[index++] = x;", "-\t\t\tshapeRight[index++] = y;", "-\t\t\tfor (int i = 0; i < TOP_RIGHT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\tshapeRight[index++] = x+width+TOP_RIGHT_OUTSIDE_CORNER[2*i];", "-\t\t\t\tshapeRight[index++] = y+TOP_RIGHT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t}", "-\t\t\tshapeRight[index++] = x+width;", "-\t\t\tshapeRight[index++] = y+height;", "-\t\t}", "-\t\t// Shape is non-rectangular, fill in gaps with parent colours\t", "-\t\tRegion r = new Region();", "-\t\tint x = Math.max(0, borderLeft - 1);", "-\t\tint y = onBottom ? size.y - borderBottom - tabHeight : borderTop;", "-\t\tint width = (selectedIndex == -1) ? size.x/2 : items[selectedIndex].x - x;", "-\t\tint height = tabHeight;", "-\t\tr.add(new Rectangle(x, y, width, height));", "-\t\tr.subtract(shapeLeft);", "-\t\tgc.setBackground(getParent().getBackground());", "-\t\tfillRegion(gc, r);", "-\t\tgc.setBackground(background);", "-\t\tgc.fillPolygon(shapeLeft);", "-\t\t", "-\t\tx = (selectedIndex == -1) ? x + size.x/2 : items[selectedIndex].x + items[selectedIndex].width;", "-\t\twidth = size.x - borderRight - x;", "-\t\tif (width > 0) {", "-\t\t\tif (borderRight > 0) width += 1; // +1 overlap with border", "-\t\t\tr.subtract(r); // clear region", "-\t\t\tr.add(new Rectangle(x, y, width, height));", "-\t\t\tr.subtract(shapeRight);", "-\t\t\tgc.setBackground(getParent().getBackground());", "-\t\t\tfillRegion(gc, r);", "-\t\t\tgc.setBackground(background);", "-\t\t\tgc.fillPolygon(shapeRight);", "-\t\t}", "-\t\tr.dispose();", "-\t} else {", "-\t\t// Fill in the empty space to the right of the last tab", "-\t\t// with the parent background color", "-\t\tCTabItem2 lastItem = items[items.length -1];", "-\t\tint edge = lastItem.x+lastItem.width;", "-\t\tif (edge < size.x) {", "-\t\t\tint x = edge;", "-\t\t\tint y = onBottom ? size.y - borderBottom - tabHeight - 1 : borderTop;", "-\t\t\tint width = size.x - edge - borderRight + 1;", "-\t\t\tint height = tabHeight + 1;", "-\t\t\tgc.setBackground(parentBackground);", "-\t\t\tgc.fillRectangle(x, y, width, height);", "-\t\t}", "-\t}", "-\t", "-\t// Draw the unselected tabs.", "-\tif (!single) {", "-\t\tfor (int i=0; i < items.length; i++) {", "-\t\t\tif (i != selectedIndex && event.getBounds().intersects(items[i].getBounds())) {", "-\t\t\t\titems[i].onPaint(gc, false);", "-\t\t\t}", "-\t\t}", "-\t}", "-\t", "-\t// Draw selected tab", "-\tif (selectedIndex != -1) {", "-\t\tCTabItem2 item = items[selectedIndex];", "-\t\titem.onPaint(gc, true);", "-\t} else {", "-\t\t// no selected tab - draw line across bottom of all tabs", "-\t\tint x = borderLeft;", "-\t\tint y = onBottom ? size.y - borderBottom - tabHeight - HIGHLIGHT_HEADER : borderTop + tabHeight + 1;", "-\t\tint width = size.x - borderLeft - borderRight;", "-\t\tint height = HIGHLIGHT_HEADER - 1;", "-\t\tgc.setBackground(getBackground());", "-\t\tgc.fillRectangle(x, y, width, height);", "-\t\tx = borderLeft;", "-\t\ty = (onBottom) ? size.y - borderBottom - tabHeight - 1 : borderTop + tabHeight;", "-\t\tgc.setForeground(borderColor1);", "-\t\tgc.drawLine(x, y, x + width, y);", "-\t}", "-\t", "-\tdrawChevron(gc);", "-\tdrawMinimize(gc);", "-\tdrawMaximize(gc);", "-\tdrawBorder(gc);", "-\t", "-\t// draw insertion mark", "-//\tif (insertionIndex > -2) {", "-//\t\tgc.setForeground(getDisplay().getSystemColor(SWT.COLOR_LIST_SELECTION));", "-//\t\tif (insertionIndex == -1) {", "-//\t\t\tRectangle bounds = items[0].getBounds();", "-//\t\t\tgc.drawLine(bounds.x, bounds.y, bounds.x, bounds.y + bounds.height - 1);", "-//\t\t\tgc.drawLine(bounds.x - 2, bounds.y, bounds.x + 2, bounds.y);", "-//\t\t\tgc.drawLine(bounds.x - 1, bounds.y + 1, bounds.x + 1, bounds.y + 1);", "-//\t\t\tgc.drawLine(bounds.x - 1, bounds.y + bounds.height - 2, bounds.x + 1, bounds.y + bounds.height - 2);", "-//\t\t\tgc.drawLine(bounds.x - 2, bounds.y + bounds.height - 1, bounds.x + 2, bounds.y + bounds.height - 1);", "-//", "-//\t\t} else {", "-//\t\t\tRectangle bounds = items[insertionIndex].getBounds();", "-//\t\t\tgc.drawLine(bounds.x + bounds.width, bounds.y, bounds.x + bounds.width, bounds.y + bounds.height - 1);", "-//\t\t\tgc.drawLine(bounds.x + bounds.width - 2, bounds.y, bounds.x + bounds.width + 2, bounds.y);", "-//\t\t\tgc.drawLine(bounds.x + bounds.width - 1, bounds.y + 1, bounds.x + bounds.width + 1, bounds.y + 1);", "-//\t\t\tgc.drawLine(bounds.x + bounds.width - 1, bounds.y + bounds.height - 2, bounds.x + bounds.width + 1, bounds.y + bounds.height - 2);", "-//\t\t\tgc.drawLine(bounds.x + bounds.width - 2, bounds.y + bounds.height - 1, bounds.x + bounds.width + 2, bounds.y + bounds.height - 1);", "-//\t\t}", "-//\t}", "+\tdrawBody(event);", "+\tdrawTabArea(event);"]}], "num": 25674}
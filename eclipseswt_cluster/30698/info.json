{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c65fa8db77ba39104952ac7b6cebe06", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee7ba13e63041db0e4993bb4cd0adc0d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/internal/image/FileFormat.java", "commitBeforeChange": "afaa39bdb2aab9490e8e3fdeb1deb754caa3e91b", "commitAfterChange": "68e03471d13fd16f26e5d37890119f05f1c0b292", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 4, "signatureBeforeChange": "\t public static ImageData[] load(InputStream is, ImageLoader loader)", "signatureAfterChange": "\t public static ImageData[] load(InputStream is, ImageLoader loader)", "diff": ["-\tboolean isSupported = false;\t", "-\t\t\t\tClass clazz = Class.forName(FORMAT_PACKAGE + '.' + FORMATS[i] + FORMAT_SUFFIX);", "-\t\t\t\tfileFormat = (FileFormat) clazz.newInstance();", "-\t\t\t\tif (fileFormat.isFileFormat(stream)) {", "-\t\t\t\t\tisSupported = true;", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "+\t\t\t\tfileFormat = getFileFormat (stream, FORMATS[i]);", "+\t\t\t\tif (fileFormat != null) break;", "-\tif (!isSupported) SWT.error(SWT.ERROR_UNSUPPORTED_FORMAT);", "+\tif (fileFormat == null) SWT.error(SWT.ERROR_UNSUPPORTED_FORMAT);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fbe777dcbefb99e202b3e93caae9b26d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples.launcher/src/org/eclipse/swt/examples/launcher/LauncherView.java", "commitBeforeChange": "13dc6f06b9b15226803049d379450d5c15b07f19", "commitAfterChange": "d6148e648829b2a48ef2b94c29a7d269c6e1b930", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " \tprivate void launchItem(ItemDescriptor itemDescriptor)", "signatureAfterChange": " \tprivate void launchItem(ItemDescriptor itemDescriptor)", "diff": ["-\t\t\tClass cl = Class.forName(itemDescriptor.getMainType());", "-\t\t\tDisplay display = workbenchShell.getDisplay();", "-\t\t\tObject exampleInstance = cl.newInstance();", "-\t\t\tMethod openMethod = cl.getDeclaredMethod(\"open\", new Class[] {Display.class});", "-\t\t\topenMethod.invoke(exampleInstance, new Object[] {display});", "+\t\t\tObject instance = itemDescriptor.createItemInstance();", "+\t\t\tif (instance != null) {", "+\t\t\t\tDisplay display = workbenchShell.getDisplay();", "+\t\t\t\tMethod openMethod = instance.getClass().getDeclaredMethod(\"open\", new Class[] {Display.class});", "+\t\t\t\topenMethod.invoke(instance, new Object[] {display});", "+\t\t\t}", "-\t\t} catch (ClassNotFoundException e) {", "-\t\t\tLauncherPlugin.logError(LauncherPlugin.getResourceString(\"run.error.CouldNotFindClass\"), e);"]}], "num": 30698}
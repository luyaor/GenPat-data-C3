{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c2de6c9bd073c79228582260fccaf5c", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5bab050b35a6c22ee0256384c7017d7d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "e19b8929298db4194771a475b4b9ef56a8238374", "commitAfterChange": "ca0c5209be7fe694c5578ad160491b05c77a1894", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " void drawRectangles ()", "signatureAfterChange": " void drawRectangles ()", "diff": ["-\tfor (int i = 0; i < rectShapes.length; i++) {", "+\tRectangle bounds = this.bounds;", "+\tif (bounds == null) return;", "+\tint children = OS.Panel_Children (canvasHandle);", "+\tOS.UIElementCollection_Clear (children);", "+\tif (parent != null) {", "+\t\tRectangle rect = parent.getClientArea ();", "+\t\trect.intersect (bounds);", "+\t\tbounds = rect;", "+\t\tPoint pt = display.map (parent, null, bounds.x, bounds.y);", "+\t\tOS.Popup_HorizontalOffset (handle, pt.x);", "+\t\tOS.Popup_VerticalOffset (handle, pt.y);", "+\t} else {", "+\t\tOS.Popup_HorizontalOffset (handle, bounds.x);", "+\t\tOS.Popup_VerticalOffset (handle, bounds.y);", "+\t}", "+\tOS.FrameworkElement_Width (handle, bounds.width);", "+\tOS.FrameworkElement_Height (handle, bounds.height);", "+\tint stroke, brush;", "+\tif (stippled) {", "+\t\tstroke = 3;", "+\t\tint pixelFormat = OS.PixelFormats_BlackWhite ();", "+\t\tbyte [] buffer = {-86, 0, 85, 0, -86, 0, 85, 0, -86, 0, 85, 0, -86, 0, 85, 0};", "+\t\tint image = OS.BitmapSource_Create (8, 8, 96, 96, pixelFormat, 0, buffer, buffer.length, 2);\t", "+\t\tOS.GCHandle_Free (pixelFormat);", "+\t\tbrush = OS.gcnew_ImageBrush (image);", "+\t\tOS.TileBrush_TileMode (brush, OS.TileMode_Tile);", "+\t\tOS.TileBrush_Stretch (brush, OS.Stretch_Fill);", "+\t\tOS.TileBrush_ViewportUnits (brush, OS.BrushMappingMode_Absolute);", "+\t\tint rect = OS.gcnew_Rect (0, 0, OS.BitmapSource_PixelWidth(image), OS.BitmapSource_PixelHeight(image));", "+\t\tOS.TileBrush_Viewport (brush, rect);", "+\t\tOS.GCHandle_Free (rect);", "+\t\tOS.GCHandle_Free (image);", "+\t} else {", "+\t\tstroke = 1;", "+\t\tbrush = OS.Brushes_Black ();", "+\t}", "+\tfor (int i = 0; i < rectangles.length; i++) {", "+\t\tint child = OS.gcnew_Rectangle ();", "+\t\tOS.UIElementCollection_Add (children, child);", "+\t\tOS.Shape_StrokeThickness (child, stroke);", "+\t\tOS.Shape_Stroke (child, brush);", "-\t\tint child = rectShapes [i];", "-\t\tOS.Canvas_SetLeft (child, rect.x);", "-\t\tOS.Canvas_SetTop (child, rect.y);", "+\t\tOS.Canvas_SetLeft (child, rect.x - bounds.x);", "+\t\tOS.Canvas_SetTop (child, rect.y - bounds.y);", "+\t\tOS.GCHandle_Free (child);", "+\tOS.GCHandle_Free (brush);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e8ffe77932fdd45cb5bfa895e8e591d1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tracker.java", "commitBeforeChange": "ea15a960a853001410e58a3d24c8aee2da7a0620", "commitAfterChange": "20653c6768e7a089a6fded9c39628f2ae0b74cbf", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  int transparentProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int transparentProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["+\t\t\tbreak;", "+\t\tcase OS.WM_PAINT:", "+\t\t\tif (parent == null && !OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION (6, 0)) {", "+\t\t\t\tPAINTSTRUCT ps = new PAINTSTRUCT();", "+\t\t\t\tint hDC = OS.BeginPaint (hwnd, ps);", "+\t\t\t\tint hBitmap = 0, hBrush = 0, oldBrush = 0;\t\t\t", "+\t\t\t\tint transparentBrush = OS.CreateSolidBrush(0xFFFFFF);", "+\t\t\t\toldBrush = OS.SelectObject (hDC, transparentBrush);", "+\t\t\t\tOS.PatBlt (hDC, ps.left, ps.top, ps.right - ps.left, ps.bottom - ps.top, OS.PATCOPY);", "+\t\t\t\tOS.SelectObject (hDC, oldBrush);", "+\t\t\t\tOS.DeleteObject (transparentBrush);", "+\t\t\t\tint bandWidth = 1;", "+\t\t\t\tif (stippled) {", "+\t\t\t\t\tbandWidth = 3;", "+\t\t\t\t\tbyte [] bits = {-86, 0, 85, 0, -86, 0, 85, 0, -86, 0, 85, 0, -86, 0, 85, 0};", "+\t\t\t\t\thBitmap = OS.CreateBitmap (8, 8, 1, 1, bits);", "+\t\t\t\t\thBrush = OS.CreatePatternBrush (hBitmap);", "+\t\t\t\t\toldBrush = OS.SelectObject (hDC, hBrush);", "+\t\t\t\t\tOS.SetBkColor (hDC, 0xF0F0F0);", "+\t\t\t\t} else {", "+\t\t\t\t\toldBrush = OS.SelectObject (hDC, OS.GetStockObject(OS.BLACK_BRUSH));", "+\t\t\t\t}", "+\t\t\t\tRectangle[] rects = this.rectangles;", "+\t\t\t\tfor (int i=0; i<rects.length; i++) {", "+\t\t\t\t\tRectangle rect = rects [i];", "+\t\t\t\t\tOS.PatBlt (hDC, rect.x, rect.y, rect.width, bandWidth, OS.PATCOPY);", "+\t\t\t\t\tOS.PatBlt (hDC, rect.x, rect.y + bandWidth, bandWidth, rect.height - (bandWidth * 2), OS.PATCOPY);", "+\t\t\t\t\tOS.PatBlt (hDC, rect.x + rect.width - bandWidth, rect.y + bandWidth, bandWidth, rect.height - (bandWidth * 2), OS.PATCOPY);", "+\t\t\t\t\tOS.PatBlt (hDC, rect.x, rect.y + rect.height - bandWidth, rect.width, bandWidth, OS.PATCOPY);", "+\t\t\t\t}", "+\t\t\t\tOS.SelectObject (hDC, oldBrush);", "+\t\t\t\tif (stippled) {", "+\t\t\t\t\tOS.DeleteObject (hBrush);", "+\t\t\t\t\tOS.DeleteObject (hBitmap);", "+\t\t\t\t}", "+\t\t\t\tOS.EndPaint (hwnd, ps);", "+\t\t\t\treturn 0;", "+\t\t\t}"]}], "num": 20722}
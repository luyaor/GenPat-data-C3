{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "831f72c9c9f34d83406f846fba7d6d09", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d9b562ccb5e35adc45c47fa555daa55d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/FontData.java", "commitBeforeChange": "daa2e3b2a72646e1ec016748054dc47ef1a447f2", "commitAfterChange": "bf08d579419148691d68ff3d58785f1979e00e55", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \t\r FontData(byte[] stem)", "signatureAfterChange": "\r \t\r FontData(byte[] stem)", "diff": ["+\tthis.stem = stem;\r", "+\tint fontID = OS.PfDecomposeStemToID(stem);\r", "+\tif (fontID != 0) {\r", "+\t\tint desc = OS.PfFontDescription(fontID);\r", "+\t\tint size = OS.PfFontSize(fontID);\r", "+\t\tint flags = OS.PfFontFlags(fontID);\r", "+\t\tint length = OS.strlen(desc);\r", "+\t\tbyte[] buffer = new byte[length];\r", "+\t\tOS.memmove(buffer, desc, length);\r", "+\t\tname = new String(Converter.mbcsToWcs(null, buffer));\r", "+\t\theight = size;\r", "+\t\tstyle = SWT.NORMAL;\r", "+\t\tif ((flags & OS.PF_STYLE_BOLD) != 0) style |= SWT.BOLD;\r", "+\t\tif ((flags & OS.PF_STYLE_ITALIC) != 0) style |= SWT.ITALIC;\r", "+\t\tOS.PfFreeFont(fontID);\r", "+\t\treturn;\r", "+\t}\r", "+\t/*\r", "+\t* For some reason, PfDecomposeStemToID sometimes fails to decompose\r", "+\t* a valid stem (e.g. TextFont09bi).\r", "+\t*/\r", "-\t\tname = new String(Converter.mbcsToWcs(null, info.desc)).trim();\r", "+\t\tchar[] chars = Converter.mbcsToWcs(null, info.desc);\r", "+\t\tint index = 0;\r", "+\t\twhile (index < chars.length) {\r", "+\t\t\tif (chars[index] == 0) break;\r", "+\t\t\tindex++;\r", "+\t\t}\r", "+\t\tname = new String(chars, 0, index);\r", "-\t\t* For some reason, sometimes PfQueryFontInfo does not\r", "+\t\t* For some reason, PfQueryFontInfo sometimes does not\r", "-\t\t\tString fontName = new String(Converter.mbcsToWcs(null, this.stem)).trim();\r", "+\t\t\tchars = Converter.mbcsToWcs(null, this.stem);\r", "+\t\t\tindex = 0;\r", "+\t\t\twhile (index < chars.length) {\r", "+\t\t\t\tif (chars[index] == 0) break;\r", "+\t\t\t\tindex++;\r", "+\t\t\t}\r", "+\t\t\tString fontName = new String(chars, 0, index);\r", "-\t} else {\r", "-\t\tthis.stem = stem;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d896dc487e4c1defc14b7272aef56cc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/graphics/FontData.java", "commitBeforeChange": "ff7a7565646414b3418637259a20a7e8cc0d7d33", "commitAfterChange": "625d7442af2e067cc40f25eb22b19ef7acd83ba7", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "\r \t\r FontData(byte[] stem)", "signatureAfterChange": "\r \t\r FontData(byte[] stem)", "diff": ["-\t\treturn;\r", "-\t}\r", "-\t/*\r", "-\t* For some reason, PfDecomposeStemToID sometimes fails to decompose\r", "-\t* a valid stem (e.g. TextFont09bi).\r", "-\t*/\r", "-\tFontQueryInfo info = new FontQueryInfo();\r", "-\tif (OS.PfQueryFontInfo(stem, info) == 0) {\r", "-\t\tthis.stem = info.font;\r", "-\t\tchar[] chars = Converter.mbcsToWcs(null, info.desc);\r", "-\t\tint index = 0;\r", "-\t\twhile (index < chars.length) {\r", "-\t\t\tif (chars[index] == 0) break;\r", "-\t\t\tindex++;\r", "-\t\t}\r", "-\t\tname = new String(chars, 0, index);\r", "-\t\tif ((info.style & OS.PHFONT_INFO_PLAIN) != 0) style = SWT.NORMAL;\r", "-\t\telse if ((info.style & OS.PHFONT_INFO_BOLD) != 0) style = SWT.BOLD;\r", "-\t\telse if ((info.style & OS.PHFONT_INFO_ITALIC) != 0) style = SWT.ITALIC;\r", "-\t\telse if ((info.style & OS.PHFONT_INFO_BLDITC) != 0) style = SWT.BOLD | SWT.ITALIC;\r", "-\t\telse style = SWT.NORMAL;\r", "-\t\t/*\r", "-\t\t* For some reason, PfQueryFontInfo sometimes does not\r", "-\t\t* set the size of the font.  In that case, the size is\r", "-\t\t* parsed from the stem.\r", "-\t\t*/\r", "-\t\tif (info.size != 0) {\r", "-\t\t\theight = info.size;\r", "-\t\t} else {\r", "-\t\t\tchars = Converter.mbcsToWcs(null, this.stem);\r", "-\t\t\tindex = 0;\r", "-\t\t\twhile (index < chars.length) {\r", "-\t\t\t\tif (chars[index] == 0) break;\r", "-\t\t\t\tindex++;\r", "-\t\t\t}\r", "-\t\t\tString fontName = new String(chars, 0, index);\r", "-\t\t\tint end = fontName.length();\r", "-\t\t\tfor (int i = end - 1; i >= 0; i--) {\r", "-\t\t\t\tif (Character.isDigit(fontName.charAt(i))) break;\r", "-\t\t\t\tend--;\r", "-\t\t\t}\r", "-\t\t\tint start = end;\r", "-\t\t\tfor (int i = end - 1; i >= 0; i--) {\r", "-\t\t\t\tif (!Character.isDigit(fontName.charAt(i))) break;\r", "-\t\t\t\tstart--;\r", "-\t\t\t}\r", "-\t\t\ttry {\r", "-\t\t\t\theight = Integer.parseInt(fontName.substring(start, end));\r", "-\t\t\t} catch (NumberFormatException e) {}\r", "-\t\t}\r"]}], "num": 48094}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "31fdcf4eede7c1448dc719d60ffb1b29", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "877b67bc6c7455e2623bacaaa1df37bb", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ef3348b27f4d541d10ee19a34027d5fffff6ba48", "commitAfterChange": "5546bb091907f0c70c7ee56bbc26c789d0a2340e", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  LRESULT CDDS_POSTPAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT CDDS_POSTPAINT (int wParam, int lParam)", "diff": ["-\tif (OS.IsWindowVisible (handle)) {", "-\t\t/*", "-\t\t* Bug in Windows.  When the table has the extended style", "-\t\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "-\t\t* CLR_NONE to make the table transparent, Windows fills", "-\t\t* a black rectangle around any column that contains an", "-\t\t* image.  The fix is clear LVS_EX_FULLROWSELECT during", "-\t\t* custom draw.", "-\t\t*/", "+\t/*", "+\t* Bug in Windows.  When the table has the extended style", "+\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "+\t* CLR_NONE to make the table transparent, Windows fills", "+\t* a black rectangle around any column that contains an", "+\t* image.  The fix is clear LVS_EX_FULLROWSELECT during", "+\t* custom draw.", "+\t*/", "+\tif (--customCount == 0 && OS.IsWindowVisible (handle)) {", "-\t\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "-\t\t\t\tif (OS.IsWinCE) {", "-\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\tboolean damaged = OS.GetUpdateRect (handle, rect, true);", "-\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, bits);", "-\t\t\t\t\tOS.ValidateRect (handle, null);", "-\t\t\t\t\tif (damaged) OS.InvalidateRect (handle, rect, true);", "-\t\t\t\t} else {", "-\t\t\t\t\tint rgn = OS.CreateRectRgn (0, 0, 0, 0);", "-\t\t\t\t\tint result = OS.GetUpdateRgn (handle, rgn, true);", "-\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, bits);", "-\t\t\t\t\tOS.ValidateRect (handle, null);", "-\t\t\t\t\tif (result != OS.NULLREGION) OS.InvalidateRgn (handle, rgn, true);", "-\t\t\t\t\tOS.DeleteObject (rgn);", "+\t\t\t\tint dwExStyle = OS.SendMessage (handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0);", "+\t\t\t\tif ((dwExStyle & OS.LVS_EX_FULLROWSELECT) == 0) {", "+\t\t\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "+\t\t\t\t\tif (OS.IsWinCE) {", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tboolean damaged = OS.GetUpdateRect (handle, rect, true);", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, bits);", "+\t\t\t\t\t\tOS.ValidateRect (handle, null);", "+\t\t\t\t\t\tif (damaged) OS.InvalidateRect (handle, rect, true);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint rgn = OS.CreateRectRgn (0, 0, 0, 0);", "+\t\t\t\t\t\tint result = OS.GetUpdateRgn (handle, rgn, true);", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, bits);", "+\t\t\t\t\t\tOS.ValidateRect (handle, null);", "+\t\t\t\t\t\tif (result != OS.NULLREGION) OS.InvalidateRgn (handle, rgn, true);", "+\t\t\t\t\t\tOS.DeleteObject (rgn);", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9bd827e8dde82e4b6d18be819b8e3118", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "ef3348b27f4d541d10ee19a34027d5fffff6ba48", "commitAfterChange": "5546bb091907f0c70c7ee56bbc26c789d0a2340e", "methodNumberBeforeChange": 9, "methodNumberAfterChange": 9, "signatureBeforeChange": "  LRESULT CDDS_PREPAINT (int wParam, int lParam)", "signatureAfterChange": "  LRESULT CDDS_PREPAINT (int wParam, int lParam)", "diff": ["-\tif (OS.IsWindowVisible (handle)) {", "-\t\t/*", "-\t\t* Bug in Windows.  When the table has the extended style", "-\t\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "-\t\t* CLR_NONE to make the table transparent, Windows fills", "-\t\t* a black rectangle around any column that contains an", "-\t\t* image.  The fix is clear LVS_EX_FULLROWSELECT during", "-\t\t* custom draw.", "-\t\t*/", "+\t/*", "+\t* Bug in Windows.  When the table has the extended style", "+\t* LVS_EX_FULLROWSELECT and LVM_SETBKCOLOR is used with", "+\t* CLR_NONE to make the table transparent, Windows fills", "+\t* a black rectangle around any column that contains an", "+\t* image.  The fix is clear LVS_EX_FULLROWSELECT during", "+\t* custom draw.", "+\t*/", "+\tif (customCount++ == 0 && OS.IsWindowVisible (handle)) {", "-\t\t\t\tOS.UpdateWindow (handle);", "-\t\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "-\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "-\t\t\t\tOS.ValidateRect (handle, null);", "+\t\t\t\tint dwExStyle = OS.SendMessage (handle, OS.LVM_GETEXTENDEDLISTVIEWSTYLE, 0, 0);", "+\t\t\t\tif ((dwExStyle & OS.LVS_EX_FULLROWSELECT) != 0) {", "+\t\t\t\t\tint bits = OS.LVS_EX_FULLROWSELECT;", "+\t\t\t\t\tif (OS.IsWinCE) {", "+\t\t\t\t\t\tRECT rect = new RECT ();", "+\t\t\t\t\t\tboolean damaged = OS.GetUpdateRect (handle, rect, true);", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "+\t\t\t\t\t\tOS.ValidateRect (handle, null);", "+\t\t\t\t\t\tif (damaged) OS.InvalidateRect (handle, rect, true);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tint rgn = OS.CreateRectRgn (0, 0, 0, 0);", "+\t\t\t\t\t\tint result = OS.GetUpdateRgn (handle, rgn, true);", "+\t\t\t\t\t\tOS.SendMessage (handle, OS.LVM_SETEXTENDEDLISTVIEWSTYLE, bits, 0);", "+\t\t\t\t\t\tOS.ValidateRect (handle, null);", "+\t\t\t\t\t\tif (result != OS.NULLREGION) OS.InvalidateRgn (handle, rgn, true);", "+\t\t\t\t\t\tOS.DeleteObject (rgn);", "+\t\t\t\t\t}", "+\t\t\t\t}", "-\t\tif (OS.IsWindowEnabled (handle)) {", "-\t\t\tControl control = findBackgroundControl ();", "-\t\t\tif (control != null && control.backgroundImage != null) {", "+\t}", "+\tif (OS.IsWindowVisible (handle) && OS.IsWindowEnabled (handle)) {", "+\t\tControl control = findBackgroundControl ();", "+\t\tif (control != null && control.backgroundImage != null) {", "+\t\t\tNMLVCUSTOMDRAW nmcd = new NMLVCUSTOMDRAW ();", "+\t\t\tOS.MoveMemory (nmcd, lParam, NMLVCUSTOMDRAW.sizeof);", "+\t\t\tRECT rect = new RECT ();", "+\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "+\t\t\tfillImageBackground (nmcd.hdc, control, rect);", "+\t\t} else {", "+\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) == OS.CLR_NONE) {", "-\t\t\t\tfillImageBackground (nmcd.hdc, control, rect);", "-\t\t\t} else {", "-\t\t\t\tif (OS.SendMessage (handle, OS.LVM_GETBKCOLOR, 0, 0) == OS.CLR_NONE) {", "-\t\t\t\t\tNMLVCUSTOMDRAW nmcd = new NMLVCUSTOMDRAW ();", "-\t\t\t\t\tOS.MoveMemory (nmcd, lParam, NMLVCUSTOMDRAW.sizeof);", "-\t\t\t\t\tRECT rect = new RECT ();", "-\t\t\t\t\tOS.SetRect (rect, nmcd.left, nmcd.top, nmcd.right, nmcd.bottom);", "-\t\t\t\t\tif (control == null) control = this;", "-\t\t\t\t\tfillBackground (nmcd.hdc, control.getBackgroundPixel (), rect);", "-\t\t\t\t}", "+\t\t\t\tif (control == null) control = this;", "+\t\t\t\tfillBackground (nmcd.hdc, control.getBackgroundPixel (), rect);"]}], "num": 8001}
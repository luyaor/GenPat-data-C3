{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6af2aeaab50642f61692dae4e84266a3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "28fd6ff45c16463fd0e016d4c8b05d29", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/graphics/ImageData.java", "commitBeforeChange": "c6b419091fbce98db829f94e0af757941ff81fa1", "commitAfterChange": "6e47399d655ea727123e0231062164f992ca780c", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": " public int getPixel(int x, int y)", "signatureAfterChange": " public int getPixel(int x, int y)", "diff": ["-\tif (depth == 1) {", "-\t\tindex = (y * bytesPerLine) + (x >> 3);", "-\t\ttheByte = data[index] & 0xFF;", "-\t\tmask = 1 << (7 - (x & 0x7));", "-\t\tif ((theByte & mask) == 0) {", "-\t\t\treturn 0;", "-\t\t} else {", "-\t\t\treturn 1;", "-\t\t}", "-\t}", "-\tif (depth == 2) {", "-\t\tindex = (y * bytesPerLine) + (x >> 2);", "-\t\ttheByte = data[index] & 0xFF;", "-\t\tint offset = 3 - (x % 4);", "-\t\tmask = 3 << (offset * 2);", "-\t\treturn (theByte & mask) >> (offset * 2);", "-\t}", "-\tif (depth == 4) {", "-\t\tindex = (y * bytesPerLine) + (x >> 1);", "-\t\ttheByte = data[index] & 0xFF;", "-\t\tif ((x & 0x1) == 0) {", "-\t\t\treturn theByte >> 4;", "-\t\t} else {", "-\t\t\treturn theByte & 0x0F;", "-\t\t}", "-\t}", "-\tif (depth == 8) {", "-\t\tindex = (y * bytesPerLine) + x ;", "-\t\treturn data[index] & 0xFF;", "-\t}", "-\tif (depth == 16) {", "-\t\tindex = (y * bytesPerLine) + (x * 2);", "-\t\treturn ((data[index+1] & 0xFF) << 8) + (data[index] & 0xFF);", "-\t}", "-\tif (depth == 24) {", "-\t\tindex = (y * bytesPerLine) + (x * 3);", "-\t\treturn ((data[index] & 0xFF) << 16) + ((data[index+1] & 0xFF) << 8) +", "-\t\t\t(data[index+2] & 0xFF);", "-\t}", "-\tif (depth == 32) {", "-\t\tindex = (y * bytesPerLine) + (x * 4);", "-\t\treturn ((data[index] & 0xFF) << 24) + ((data[index+1] & 0xFF) << 16) +", "-\t\t\t\t((data[index+2] & 0xFF) << 8) + (data[index+3] & 0xFF);", "+\tswitch (depth) {", "+\t\tcase 32:", "+\t\t\tindex = (y * bytesPerLine) + (x * 4);", "+\t\t\treturn ((data[index] & 0xFF) << 24) + ((data[index+1] & 0xFF) << 16) +", "+\t\t\t\t\t((data[index+2] & 0xFF) << 8) + (data[index+3] & 0xFF);", "+\t\tcase 24:", "+\t\t\tindex = (y * bytesPerLine) + (x * 3);", "+\t\t\treturn ((data[index] & 0xFF) << 16) + ((data[index+1] & 0xFF) << 8) +", "+\t\t\t\t(data[index+2] & 0xFF);", "+\t\tcase 16:", "+\t\t\tindex = (y * bytesPerLine) + (x * 2);", "+\t\t\treturn ((data[index+1] & 0xFF) << 8) + (data[index] & 0xFF);", "+\t\tcase 8:", "+\t\t\tindex = (y * bytesPerLine) + x ;", "+\t\t\treturn data[index] & 0xFF;", "+\t\tcase 4:", "+\t\t\tindex = (y * bytesPerLine) + (x >> 1);", "+\t\t\ttheByte = data[index] & 0xFF;", "+\t\t\tif ((x & 0x1) == 0) {", "+\t\t\t\treturn theByte >> 4;", "+\t\t\t} else {", "+\t\t\t\treturn theByte & 0x0F;", "+\t\t\t}", "+\t\tcase 2:", "+\t\t\tindex = (y * bytesPerLine) + (x >> 2);", "+\t\t\ttheByte = data[index] & 0xFF;", "+\t\t\tint offset = 3 - (x % 4);", "+\t\t\tmask = 3 << (offset * 2);", "+\t\t\treturn (theByte & mask) >> (offset * 2);", "+\t\tcase 1:", "+\t\t\tindex = (y * bytesPerLine) + (x >> 3);", "+\t\t\ttheByte = data[index] & 0xFF;", "+\t\t\tmask = 1 << (7 - (x & 0x7));", "+\t\t\tif ((theByte & mask) == 0) {", "+\t\t\t\treturn 0;", "+\t\t\t} else {", "+\t\t\t\treturn 1;", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b3d6b69bbe5c8eb2543212d50ff53c4d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/graphics/ImageData.java", "commitBeforeChange": "c6b419091fbce98db829f94e0af757941ff81fa1", "commitAfterChange": "6e47399d655ea727123e0231062164f992ca780c", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " public void setPixel(int x, int y, int pixelValue)", "signatureAfterChange": " public void setPixel(int x, int y, int pixelValue)", "diff": ["-\tif (depth == 1) {", "-\t\tindex = (y * bytesPerLine) + (x >> 3);", "-\t\ttheByte = data[index];", "-\t\tmask = 1 << (7 - (x & 0x7));", "-\t\tif ((pixelValue & 0x1) == 1) {", "-\t\t\tdata[index] = (byte)(theByte | mask);", "-\t\t} else {", "-\t\t\tdata[index] = (byte)(theByte & (mask ^ -1));", "-\t\t}", "-\t\treturn;", "-\t}", "-\tif (depth == 2) {", "-\t\tindex = (y * bytesPerLine) + (x >> 2);", "-\t\ttheByte = data[index];", "-\t\tint offset = 3 - (x % 4);", "-\t\tmask = 0xFF ^ (3 << (offset * 2));", "-\t\tdata[index] = (byte)((data[index] & mask) | (pixelValue << (offset * 2)));", "-\t\treturn;", "-\t}", "-\tif (depth == 4) {", "-\t\tindex = (y * bytesPerLine) + (x >> 1);", "-\t\tif ((x & 0x1) == 0) {", "-\t\t\tdata[index] = (byte)((data[index] & 0x0F) | ((pixelValue & 0x0F) << 4));", "-\t\t} else {", "-\t\t\tdata[index] = (byte)((data[index] & 0xF0) | (pixelValue & 0x0F));", "-\t\t}", "-\t\treturn;", "-\t}", "-\tif (depth == 8) {", "-\t\tindex = (y * bytesPerLine) + x ;", "-\t\tdata[index] = (byte)(pixelValue & 0xFF);", "-\t\treturn;", "-\t}", "-\tif (depth == 16) {", "-\t\tindex = (y * bytesPerLine) + (x * 2);", "-\t\tdata[index + 1] = (byte)((pixelValue >> 8) & 0xFF);", "-\t\tdata[index] = (byte)(pixelValue & 0xFF);", "-\t\treturn;", "-\t}", "-\tif (depth == 24) {", "-\t\tindex = (y * bytesPerLine) + (x * 3);", "-\t\tdata[index] = (byte)((pixelValue >> 16) & 0xFF);", "-\t\tdata[index + 1] = (byte)((pixelValue >> 8) & 0xFF);", "-\t\tdata[index + 2] = (byte)(pixelValue & 0xFF);", "-\t\treturn;", "-\t}", "-\tif (depth == 32) {", "-\t\tindex = (y * bytesPerLine) + (x * 4);", "-\t\tdata[index]  = (byte)((pixelValue >> 24) & 0xFF);", "-\t\tdata[index + 1] = (byte)((pixelValue >> 16) & 0xFF);", "-\t\tdata[index + 2] = (byte)((pixelValue >> 8) & 0xFF);", "-\t\tdata[index + 3] = (byte)(pixelValue & 0xFF);", "-\t\treturn;", "+\tswitch (depth) {", "+\t\tcase 32:", "+\t\t\tindex = (y * bytesPerLine) + (x * 4);", "+\t\t\tdata[index]  = (byte)((pixelValue >> 24) & 0xFF);", "+\t\t\tdata[index + 1] = (byte)((pixelValue >> 16) & 0xFF);", "+\t\t\tdata[index + 2] = (byte)((pixelValue >> 8) & 0xFF);", "+\t\t\tdata[index + 3] = (byte)(pixelValue & 0xFF);", "+\t\t\treturn;", "+\t\tcase 24:", "+\t\t\tindex = (y * bytesPerLine) + (x * 3);", "+\t\t\tdata[index] = (byte)((pixelValue >> 16) & 0xFF);", "+\t\t\tdata[index + 1] = (byte)((pixelValue >> 8) & 0xFF);", "+\t\t\tdata[index + 2] = (byte)(pixelValue & 0xFF);", "+\t\t\treturn;", "+\t\tcase 16:", "+\t\t\tindex = (y * bytesPerLine) + (x * 2);", "+\t\t\tdata[index + 1] = (byte)((pixelValue >> 8) & 0xFF);", "+\t\t\tdata[index] = (byte)(pixelValue & 0xFF);", "+\t\t\treturn;", "+\t\tcase 8:", "+\t\t\tindex = (y * bytesPerLine) + x ;", "+\t\t\tdata[index] = (byte)(pixelValue & 0xFF);", "+\t\t\treturn;", "+\t\tcase 4:", "+\t\t\tindex = (y * bytesPerLine) + (x >> 1);", "+\t\t\tif ((x & 0x1) == 0) {", "+\t\t\t\tdata[index] = (byte)((data[index] & 0x0F) | ((pixelValue & 0x0F) << 4));", "+\t\t\t} else {", "+\t\t\t\tdata[index] = (byte)((data[index] & 0xF0) | (pixelValue & 0x0F));", "+\t\t\t}", "+\t\t\treturn;", "+\t\tcase 2:", "+\t\t\tindex = (y * bytesPerLine) + (x >> 2);", "+\t\t\ttheByte = data[index];", "+\t\t\tint offset = 3 - (x % 4);", "+\t\t\tmask = 0xFF ^ (3 << (offset * 2));", "+\t\t\tdata[index] = (byte)((data[index] & mask) | (pixelValue << (offset * 2)));", "+\t\t\treturn;", "+\t\tcase 1:", "+\t\t\tindex = (y * bytesPerLine) + (x >> 3);", "+\t\t\ttheByte = data[index];", "+\t\t\tmask = 1 << (7 - (x & 0x7));", "+\t\t\tif ((pixelValue & 0x1) == 1) {", "+\t\t\t\tdata[index] = (byte)(theByte | mask);", "+\t\t\t} else {", "+\t\t\t\tdata[index] = (byte)(theByte & (mask ^ -1));", "+\t\t\t}", "+\t\t\treturn;"]}], "num": 52129}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4c2e582834bbd4b08d232c4a7747f6e1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a0fc77d87b083c8e2ee73b35d2b823ed", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "3eba119aced2cefa7acb911169b7c357a2c3094d", "commitAfterChange": "5b2613217108ad522e09f31e59950a1790e21738", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\tif (wHint == SWT.DEFAULT) wHint = 200;", "-\treturn computeNativeSize (scrolledHandle, wHint, hHint, changed);", "+\t", "+\t/* Compute the height based on the items */", "+\tint height;", "+\tGtkStyle st = new GtkStyle ();", "+\tOS.memmove (st, OS.gtk_widget_get_style (handle));", "+\tif (hHint != SWT.DEFAULT) {", "+\t\theight = hHint;", "+\t} else {", "+\t\theight = getHeaderHeight();", "+\t\theight += OS.GTK_CLIST_ROW_HEIGHT (handle) * getItemCount();", "+\t\theight += 2 * st.ythickness;", "+\t\tif ((style & SWT.H_SCROLL) != 0) height += 18; //WRONG, must obtain the real size", "+\t\t// FIXME - check for border", "+\t}", "+\t", "+\t/* Compute the width based on the items */", "+\tint width;", "+\tif (wHint != SWT.DEFAULT) {", "+\t\twidth = wHint;", "+\t} else {", "+\t\twidth = 2 * st.xthickness;", "+\t\tint count = getColumnCount();", "+\t\tfor (int i = 0; i<count; i++) width += getColumn(i).getWidth();", "+\t\tif ((style & SWT.V_SCROLL) != 0) width += 18; //WRONG, must obtain the real size", "+\t\t// FIXME - check for border", "+\t}", "+\t", "+\t/* In no event will we request ourselves smaller than the minimum OS size */", "+\tPoint minimum = computeNativeSize (scrolledHandle, wHint, hHint, changed);", "+\twidth = Math.max(width, minimum.x);", "+\theight = Math.max(height, minimum.y);", "+\t", "+\treturn new Point(width, height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2d5b00d0851665b7b196f022cc93a0f6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "7525d1f48dda5ff3504e3b7e8dd384d486286da6", "commitAfterChange": "cd48a7caccdd28b37397e786a825f582e7387a83", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["+", "+\t\tPoint border = null;", "+\t\tif ((style & SWT.BORDER) != 0 && (wHint != SWT.DEFAULT || hHint != SWT.DEFAULT)) {", "+\t\t\t/* determine the size of the cell without its border */", "+\t\t\tif ((style & SWT.SEARCH) != 0) {", "+\t\t\t\tint /*long*/ clazz = SWTSearchField.cellClass ();", "+\t\t\t\tNSCell emptyCell = new NSCell (OS.class_createInstance (clazz, 0));", "+\t\t\t\temptyCell.setBezeled (true);", "+\t\t\t\tNSSize emptySize = emptyCell.cellSize ();", "+\t\t\t\temptyCell.release ();", "+\t\t\t\tborder = new Point ((int)Math.ceil (emptySize.width), (int)Math.ceil (emptySize.height));\t\t\t\t", "+\t\t\t} else {", "+\t\t\t\tNSRect insets = widget.cell ().titleRectForBounds (new NSRect ());", "+\t\t\t\tborder = new Point (-(int)Math.ceil (insets.width), -(int)Math.ceil (insets.height));", "+\t\t\t}", "+\t\t\twidth -= border.x;", "+\t\t\theight -= border.y;", "+\t\t}", "+\t\tif (width <= 0) width = DEFAULT_WIDTH;", "+\t\tif (height <= 0) height = DEFAULT_HEIGHT;", "+\t\tif (wHint != SWT.DEFAULT) width = wHint;", "+\t\tif (hHint != SWT.DEFAULT) height = hHint;", "+\t\tif (border != null) {", "+\t\t\t/* re-add the border size (if any) now that wHint/hHint is taken */", "+\t\t\twidth += border.x;", "+\t\t\theight += border.y;", "+\t\t}", "+", "+\t\tif (width <= 0) width = DEFAULT_WIDTH;", "+\t\tif (height <= 0) height = DEFAULT_HEIGHT;", "+\t\tif (wHint != SWT.DEFAULT) width = wHint;", "+\t\tif (hHint != SWT.DEFAULT) height = hHint;", "+\t\tRectangle trim = computeTrim (0, 0, width, height);", "+\t\twidth = trim.width;", "+\t\theight = trim.height;", "-\tif (width <= 0) width = DEFAULT_WIDTH;", "-\tif (height <= 0) height = DEFAULT_HEIGHT;", "-\tif (wHint != SWT.DEFAULT) width = wHint;", "-\tif (hHint != SWT.DEFAULT) height = hHint;", "-\tRectangle trim = computeTrim (0, 0, width, height);", "-\twidth = trim.width;", "-\theight = trim.height;"]}], "num": 18657}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "42e2c8a79c2bb231e5e6c9e2c43fbe64", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5ef817c3af1b1033a0fdf2fac3bfcc1f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "a5c1cfcec95b92d93db65966120f9c3e9574da47", "commitAfterChange": "41bdae326eb353ce74e20d44ac4455a5c572579f", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public void create(Composite parent, int style)", "signatureAfterChange": "  public void create(Composite parent, int style)", "diff": ["-\tOleListener oleListener = new OleListener() {", "+\tfinal OleListener oleListener = new OleListener() {", "-\tsite.addEventListener(BeforeNavigate2, oleListener);", "-\tsite.addEventListener(CommandStateChange, oleListener);", "-\tsite.addEventListener(DocumentComplete, oleListener);", "-\tsite.addEventListener(NavigateComplete2, oleListener);", "-\tsite.addEventListener(NavigateError, oleListener);", "-\tsite.addEventListener(NewWindow2, oleListener);", "-\tsite.addEventListener(OnMenuBar, oleListener);", "-\tsite.addEventListener(OnStatusBar, oleListener);", "-\tsite.addEventListener(OnToolBar, oleListener);", "-\tsite.addEventListener(OnVisible, oleListener);", "-\tsite.addEventListener(ProgressChange, oleListener);", "-\tsite.addEventListener(StatusTextChange, oleListener);", "-\tsite.addEventListener(TitleChange, oleListener);", "-\tsite.addEventListener(WindowClosing, oleListener);", "-\tsite.addEventListener(WindowSetHeight, oleListener);", "-\tsite.addEventListener(WindowSetLeft, oleListener);", "-\tsite.addEventListener(WindowSetTop, oleListener);", "-\tsite.addEventListener(WindowSetWidth, oleListener);", "-\t", "+", "-\t", "+", "+", "+\t/*", "+\t* Navigate initially to about:blank, in order to be consistent with", "+\t* the other browser implementations which auto-navigate there on startup,", "+\t* and to work around IE bug http://support.microsoft.com/kb/320153.", "+\t* Do not add the oleListener callbacks until this navigate has completed", "+\t* so that clients will not receive events for this free navigation.", "+\t*/", "+\tnavigate(ABOUT_BLANK, null, null, true);", "+\tsite.addEventListener(DocumentComplete, new OleListener() {", "+\t\tpublic void handleEvent(OleEvent event) {", "+\t\t\tinitialNavigateComplete = true;", "+\t\t\tsite.removeEventListener(DocumentComplete, this);", "+", "+\t\t\tsite.addEventListener(BeforeNavigate2, oleListener);", "+\t\t\tsite.addEventListener(CommandStateChange, oleListener);", "+\t\t\tsite.addEventListener(DocumentComplete, oleListener);", "+\t\t\tsite.addEventListener(NavigateComplete2, oleListener);", "+\t\t\tsite.addEventListener(NavigateError, oleListener);", "+\t\t\tsite.addEventListener(NewWindow2, oleListener);", "+\t\t\tsite.addEventListener(OnMenuBar, oleListener);", "+\t\t\tsite.addEventListener(OnStatusBar, oleListener);", "+\t\t\tsite.addEventListener(OnToolBar, oleListener);", "+\t\t\tsite.addEventListener(OnVisible, oleListener);", "+\t\t\tsite.addEventListener(ProgressChange, oleListener);", "+\t\t\tsite.addEventListener(StatusTextChange, oleListener);", "+\t\t\tsite.addEventListener(TitleChange, oleListener);", "+\t\t\tsite.addEventListener(WindowClosing, oleListener);", "+\t\t\tsite.addEventListener(WindowSetHeight, oleListener);", "+\t\t\tsite.addEventListener(WindowSetLeft, oleListener);", "+\t\t\tsite.addEventListener(WindowSetTop, oleListener);", "+\t\t\tsite.addEventListener(WindowSetWidth, oleListener);", "+", "+\t\t\t/*", "+\t\t\t* If browser content was provided by the client before the", "+\t\t\t* initial navigate to about:blank completed then set it now.", "+\t\t\t*/", "+\t\t\tif (pendingText != null) {", "+\t\t\t\tsetText((String)pendingText[0], ((Boolean)pendingText[1]).booleanValue());", "+\t\t\t} else {", "+\t\t\t\tif (pendingUrl != null) {", "+\t\t\t\t\tsetUrl((String)pendingUrl[0], (String)pendingUrl[1], (String[])pendingUrl[2]);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tpendingText = pendingUrl = null;", "+\t\t}", "+\t});"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bb816fed42acffa34150a9b0db025646", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet296.java", "commitBeforeChange": "2ed6979adfb5e8e005bef4b4aef4e85d216f3136", "commitAfterChange": "84fc4a5134e1e202258f1c0839354ca457dcfb9c", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " \t public static void main (String[] args)", "signatureAfterChange": " \t public static void main (String[] args)", "diff": ["+\t/*", "+\t * The following listener scrolls the Tree one item at a time", "+\t * in response to MouseWheel events.", "+\t */", "+\ttree.addListener(SWT.MouseWheel, new Listener() {", "+\t\tpublic void handleEvent(Event event) {", "+\t\t\tPoint origin = sc.getOrigin();", "+\t\t\tif (event.count < 0) {", "+\t\t\t\torigin.y = Math.min(origin.y + tree.getItemHeight(), tree.getSize().y);", "+\t\t\t} else {", "+\t\t\t\torigin.y = Math.max(origin.y - tree.getItemHeight(), 0);", "+\t\t\t}", "+\t\t\tsc.setOrigin(origin);", "+\t\t}", "+\t});"]}], "num": 41328}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5748de0597eec13e31a6531a0b9787fb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b7fd8e620c9b5c8271e4d2cac1fe95e2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "6b31c0eed18de0d04a1940c687302d2c80ed3928", "commitAfterChange": "35d4101635c3eba5225d3cfcce67f526f793f806", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 18, "signatureBeforeChange": "  void initNative(String filename)", "signatureAfterChange": "  void initNative(String filename)", "diff": ["+\t\t\t", "+\t\t\tImageData data = getImageData();", "+\t\t\tint /*long*/ bitmapFormat = imageRep.bitmapFormat();", "+\t\t\tboolean alphaFirst = (bitmapFormat & OS.NSAlphaFirstBitmapFormat) != 0;", "+\t\t\t// If the alpha has only 0 or 255 (-1) for alpha values, compute the transparent pixel color instead", "+\t\t\t// of a continuous alpha range.", "+\t\t\tboolean hasTransparentPixel = true;", "+\t\t\tint transparentColor = -1;", "+\t\t\tint/*64*/ alphaOffset = 0;", "+\t\t\ttransparentScan: {", "+\t\t\t\tfor (int y = 0; y < height; y++) {", "+\t\t\t\t\tfor (int x = 0; x < width; x++) {", "+\t\t\t\t\t\tif (alphaData[alphaOffset] != 0 && alphaData[alphaOffset] != -1) {", "+\t\t\t\t\t\t\thasTransparentPixel = false;", "+\t\t\t\t\t\t\tbreak transparentScan;", "+\t\t\t\t\t\t}\t\t\t\t\t", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tif (alphaData[alphaOffset] == 0) {", "+\t\t\t\t\t\t\ttransparentColor = data.getPixel(x, y);", "+\t\t\t\t\t\t\tif (alphaFirst) transparentColor >>= 8;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\t", "+\t\t\t\t\t\talphaOffset += 1;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (hasTransparentPixel) this.transparentPixel = transparentColor;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e2ade393c80d6597a939bdecf1cf790d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "tests/org.eclipse.swt.tests/JUnit Tests/org/eclipse/swt/tests/junit/Test_org_eclipse_swt_graphics_ImageData.java", "commitBeforeChange": "156a66065c5aa36f961f5f6dcc808208536d5c1d", "commitAfterChange": "0d6738f372469d9527fdb6984c0f956cbb0c021a", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": "  public void test_getPixelII()", "signatureAfterChange": "  public void test_getPixelII()", "diff": ["+\tint width = 3;", "+\tint height = 3;", "+\tint depth = 4;", "+\tbyte pixelValue = 1;", "+\tbyte[] data = {(byte) ((pixelValue << 4) + pixelValue), (byte) (pixelValue << 4), (byte) ((pixelValue << 4) + pixelValue), (byte) (pixelValue << 4), (byte) ((pixelValue << 4) + pixelValue), (byte) (pixelValue << 4)}; ", "+\timageData = new ImageData(width, height, depth, new PaletteData(new RGB[] {new RGB(0, 0, 255), new RGB(111, 111, 111)}), 1, data);", "+\tfor (int y = 0; y < height; y++) {", "+\t\tfor (int x = 0; x < width; x++) {", "+\t\t\tint pixel = imageData.getPixel(x, y);", "+\t\t\tassertEquals(\"Bad pixel data\", pixelValue, pixel);", "+\t\t}", "+\t}"]}], "num": 11399}
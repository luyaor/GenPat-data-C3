{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e6df733525f2a62741cf1fb6af59e914", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5253f7249d00aabf270cec8a7accd9f6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "98b86bf34bfb26fea9d906f83757cf0c8fc5f7bd", "commitAfterChange": "ce138c7e1fb0d889814afbd2a7603dfa7d22605f", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void initNative(String filename)", "signatureAfterChange": "  void initNative(String filename)", "diff": ["+\t\tif (!nativeRep.isKindOfClass(OS.class_NSBitmapImageRep)) {", "+\t\t\treturn;", "+\t\t}", "+", "-", "-\t\tnativeImage.setSize(size);", "-\t\trep.setAlpha(false);", "-\t\tNSGraphicsContext context = NSGraphicsContext.graphicsContextWithBitmapImageRep(rep);", "-\t\tNSGraphicsContext.static_saveGraphicsState();", "-\t\tNSGraphicsContext.setCurrentContext(context);", "-\t\tnativeImage.drawInRect(rect, rect, OS.NSCompositeCopy, 1);", "- \t\tNSGraphicsContext.static_restoreGraphicsState();", "- \t\trep.setAlpha(hasAlpha);", "+", "+\t\t/* Compute the pixels */", "+\t\tint /*long*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "+\t\tint /*long*/ ctx = OS.CGBitmapContextCreate(rep.bitmapData(), width, height, 8, bpr, colorspace, OS.kCGImageAlphaNoneSkipFirst);", "+\t\tOS.CGColorSpaceRelease(colorspace);", "+\t\tNSGraphicsContext.static_saveGraphicsState();", "+\t\tNSGraphicsContext.setCurrentContext(NSGraphicsContext.graphicsContextWithGraphicsPort(ctx, false));", "+\t\tif (hasAlpha) OS.objc_msgSend(nativeRep.id, OS.sel_setAlpha_, 0);", "+\t\tnativeRep.drawInRect(rect);", "+\t\tif (hasAlpha) OS.objc_msgSend(nativeRep.id, OS.sel_setAlpha_, 1);", "+\t\tNSGraphicsContext.static_restoreGraphicsState();", "+\t\tOS.CGContextRelease(ctx);", "-\t\t\t// Compute any alpha by using CGImageBitmapContext.", "+\t\t\t/* Compute the alpha values */", "-\t\t\tnativeImage.drawInRect(rect, new NSRect(), OS.NSCompositeCopy, 1.0f);", "+\t\t\tnativeRep.drawInRect(rect);", "+\t\t\t/* Merge the alpha values with the pixels */", "+\t\t\tbyte[] srcData = new byte[height * bpr];", "+\t\t\tOS.memmove(srcData, rep.bitmapData(), srcData.length);", "+\t\t\tfor (int a = 0, p = 0; a < alphaData.length; a++, p += 4) {", "+\t\t\t\tsrcData[p] = alphaData[a];", "+\t\t\t}", "+\t\t\tOS.memmove(rep.bitmapData(), srcData, srcData.length);", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e21ddb02be259ba4cc942781ca7ad689", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Path.java", "commitBeforeChange": "bbaac398aa7c332bcc1c6e9a83fff323052d1d50", "commitAfterChange": "285453da18f62dadae94373334adf3e82d58cc3f", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": " public boolean contains(float x, float y, GC gc, boolean outline)", "signatureAfterChange": " public boolean contains(float x, float y, GC gc, boolean outline)", "diff": ["-\t\t//\tgc.checkGC(GC.LINE_CAP | GC.LINE_JOIN | GC.LINE_STYLE | GC.LINE_WIDTH);", "-\t\t//TODO outline", "-\t\tNSPoint point = new NSPoint();", "-\t\tpoint.x = x;", "-\t\tpoint.y = y;", "-\t\treturn handle.containsPoint(point);", "+\t\t//TODO - see windows", "+\t\tif (outline) {", "+\t\t\tint /*long*/ pixel = OS.malloc(4);", "+\t\t\tif (pixel == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\tint[] buffer = new int[]{0xFFFFFFFF};", "+\t\t\tOS.memmove(pixel, buffer, 4);", "+\t\t\tint /*long*/ colorspace = OS.CGColorSpaceCreateDeviceRGB();", "+\t\t\tint /*long*/ context = OS.CGBitmapContextCreate(pixel, 1, 1, 8, 4, colorspace, OS.kCGImageAlphaNoneSkipFirst);", "+\t\t\tOS.CGColorSpaceRelease(colorspace);", "+\t\t\tif (context == 0) {", "+\t\t\t\tOS.free(pixel);", "+\t\t\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "+\t\t\t}", "+\t\t\tGCData data = gc.data;", "+\t\t\tint capStyle = 0;", "+\t\t\tswitch (data.lineCap) {", "+\t\t\t\tcase SWT.CAP_ROUND: capStyle = OS.kCGLineCapRound; break;", "+\t\t\t\tcase SWT.CAP_FLAT: capStyle = OS.kCGLineCapButt; break;", "+\t\t\t\tcase SWT.CAP_SQUARE: capStyle = OS.kCGLineCapSquare; break;", "+\t\t\t}", "+\t\t\tOS.CGContextSetLineCap(context, capStyle);", "+\t\t\tint joinStyle = 0;", "+\t\t\tswitch (data.lineJoin) {", "+\t\t\t\tcase SWT.JOIN_MITER: joinStyle = OS.kCGLineJoinMiter; break;", "+\t\t\t\tcase SWT.JOIN_ROUND: joinStyle = OS.kCGLineJoinRound; break;", "+\t\t\t\tcase SWT.JOIN_BEVEL: joinStyle = OS.kCGLineJoinBevel; break;", "+\t\t\t}", "+\t\t\tOS.CGContextSetLineJoin(context, joinStyle);", "+\t\t\tOS.CGContextSetLineWidth(context, data.lineWidth);", "+\t\t\tOS.CGContextTranslateCTM(context, -x + 0.5f, -y + 0.5f);", "+\t\t\tint /*long*/ path = GC.createCGPathRef(handle);", "+\t\t\tOS.CGContextAddPath(context, path);", "+\t\t\tOS.CGPathRelease(path);", "+\t\t\tOS.CGContextStrokePath(context);", "+\t\t\tOS.CGContextRelease(context);", "+\t\t\tOS.memmove(buffer, pixel, 4);", "+\t\t\tOS.malloc(pixel);\t", "+\t\t\treturn buffer[0] != 0xFFFFFFFF;\t\t\t", "+\t\t} else {", "+\t\t\tNSPoint point = new NSPoint();", "+\t\t\tpoint.x = x;", "+\t\t\tpoint.y = y;", "+\t\t\treturn handle.containsPoint(point);", "+\t\t}"]}], "num": 57023}
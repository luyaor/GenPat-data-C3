{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "589973bc043ba25606c45cf05a2d831e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "58657d0a3abfbb51e03189d550323e61", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "9e4aa4f79d8d08d57d797296be9d3269723e755b", "commitAfterChange": "c7a37ce473beb9045c99b97900ef561257b98af2", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 37, "signatureBeforeChange": " \tpublic NSArray internal_accessibilityParameterizedAttributeNames(int childID)", "signatureAfterChange": " \tpublic NSArray internal_accessibilityParameterizedAttributeNames(int childID)", "diff": ["+\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "+\t\tevent.childID = childID;", "+\t\tevent.detail = -1;", "+\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "+\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "+\t\t\tlistener.getRole(event);", "+\t\t}", "+\t\t// No accessible listener is overriding the role of the control, so let Cocoa", "+\t\t// return the default set for the control.", "+\t\tif (event.detail == -1)", "+\t\t\treturn null;", "+\t\t", "-", "-\t\tif (accessibleTextListeners.size() > 0) {", "-\t\t\tfor (int i = 0; i < baseParameterizedAttributes.length; i++) {", "-\t\t\t\tif (!returnValue.containsObject(baseParameterizedAttributes[i])) {", "-\t\t\t\t\treturnValue.addObject(baseParameterizedAttributes[i]);", "-\t\t\t\t}", "-\t\t\t}", "-", "+\t\t", "+\t\tswitch(event.detail) {", "+\t\t\tcase ACC.ROLE_TEXT:", "+\t\t\t\treturnValue.addObject(OS.NSAccessibilityStringForRangeParameterizedAttribute);", "+\t\t\t\treturnValue.addObject(OS.NSAccessibilityRangeForLineParameterizedAttribute);", "+\t\t\t\treturnValue.addObject(OS.NSAccessibilityLineForIndexParameterizedAttribute);", "+\t\t\t\treturnValue.addObject(OS.NSAccessibilityBoundsForRangeParameterizedAttribute);", "+\t\t\t\tbreak;", "+\t\t\tcase ACC.ROLE_TABLE:", "+\t\t\t\tif (OS.VERSION >= 0x1060) returnValue.addObject(OS.NSAccessibilityCellForColumnAndRowParameterizedAttribute);", "+\t\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c26a2f087756ee9949df9e205a5dd57", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "bb50d013efc19825e8fad10d3794d4669d974d4f", "commitAfterChange": "3432d57cc04ef1f655fa110268dd9aa31a9cd42d", "methodNumberBeforeChange": 308, "methodNumberAfterChange": 342, "signatureBeforeChange": " \tint get_imageSize(int pHeight, int pWidth)", "signatureAfterChange": "  \tvoid checkUniqueID(int childID)", "diff": ["-\t/* IAccessibleImage::get_imageSize([out] pHeight, [out] pWidth) */", "-\tint get_imageSize(int /*long*/ pHeight, int /*long*/ pWidth) {", "-\t\t// TODO: does it make sense to just reuse getLocation?", "-\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "-\t\tfor (int i = 0; i < accessibleControlListeners.size(); i++) {", "-\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(i);", "-\t\t\tlistener.getLocation(event);", "-\t\t}", "-\t\tCOM.MoveMemory(pHeight, new int [] { event.height }, 4);", "-\t\tCOM.MoveMemory(pWidth, new int [] { event.width }, 4);", "-\t\treturn COM.S_OK;", "-\t}", "+", "+\tvoid checkUniqueID(int childID) {", "+\t\t/* If the application is using child ids, check whether there's a corresponding", "+\t\t * accessible, and if so, use the child id as that accessible's unique id. */", "+\t\tAccessibleControlEvent event = new AccessibleControlEvent(this);", "+\t\tevent.childID = childID;", "+\t\tfor (int l = 0; l < accessibleControlListeners.size(); l++) {", "+\t\t\tAccessibleControlListener listener = (AccessibleControlListener) accessibleControlListeners.elementAt(l);", "+\t\t\tlistener.getChild(event);", "+\t\t}", "+\t\tAccessible accessible = event.accessible;", "+\t\tif (accessible != null && accessible.uniqueID == -1) {", "+\t\t\taccessible.uniqueID = childID;", "+\t\t}", "+\t}"]}], "num": 19861}
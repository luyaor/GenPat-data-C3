{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fd3a2830cd1fd7b772f09f37e666f6fc", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f03bea072dc76d019c950fd12f19cab6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "a7206eed573d4459925f82f41be8140406ab7207", "commitAfterChange": "f413d9c6ba97decb96b3a0db1f8ba5ef3a107f45", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " public boolean sleep ()", "signatureAfterChange": " public boolean sleep ()", "diff": ["-\tint display_fd = OS.ConnectionNumber (xDisplay);", "-\tint max_fd = display_fd > read_fd ? display_fd : read_fd;", "+//\tint display_fd = OS.ConnectionNumber (xDisplay);", "+//\tint max_fd = display_fd > read_fd ? display_fd : read_fd;", "+//\tdo {", "+//\t\tOS.FD_ZERO (fd_set);", "+//\t\tOS.FD_SET (display_fd, fd_set);", "+//\t\tOS.FD_SET (read_fd, fd_set);", "+//\t\ttimeout [0] = 0;", "+//\t\ttimeout [1] = 100000;", "+//\t\tif (OS.select (max_fd + 1, fd_set, null, null, timeout) != 0) break;", "+//\t\tif (getMessageCount () != 0) return true;", "+//\t\tint xtContext = OS.XtDisplayToApplicationContext (xDisplay);", "+//\t\tif (OS.XtAppPending (xtContext) != 0) return true;", "+//\t} while (true);", "+//\treturn OS.FD_ISSET (display_fd, fd_set);", "+", "+\t//TODO need to sleep waiting for the next event", "+\tint xtContext = OS.XtDisplayToApplicationContext (xDisplay);", "-\t\tOS.FD_ZERO (fd_set);", "-\t\tOS.FD_SET (display_fd, fd_set);", "-\t\tOS.FD_SET (read_fd, fd_set);", "-\t\ttimeout [0] = 0;", "-\t\ttimeout [1] = 100000;", "-\t\tif (OS.select (max_fd + 1, fd_set, null, null, timeout) != 0) break;", "-\t\tif (getMessageCount () != 0) return true;", "-\t\tint xtContext = OS.XtDisplayToApplicationContext (xDisplay);", "+\t\tif (getMessageCount () != 0) break;", "+\t\ttry {", "+\t\t\tsynchronized (OS_LOCK) {", "+\t\t\t\tOS_LOCK.wait (50);", "+\t\t\t}", "+\t\t} catch (Exception e) {", "+\t\t\treturn false;", "+\t\t}", "-\treturn OS.FD_ISSET (display_fd, fd_set);", "+\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "414bf8cec7faa28114c2a25d79226e4b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "400a41972553b6a4188a913a649f045d7101753f", "commitAfterChange": "c4d7ef9fa9d180a8b347ee889da144e25eaab670", "methodNumberBeforeChange": 112, "methodNumberAfterChange": 112, "signatureBeforeChange": " public boolean sleep ()", "signatureAfterChange": " public boolean sleep ()", "diff": ["-//\tint display_fd = OS.ConnectionNumber (xDisplay);", "-//\tint max_fd = display_fd > read_fd ? display_fd : read_fd;", "-//\tdo {", "-//\t\tOS.FD_ZERO (fd_set);", "-//\t\tOS.FD_SET (display_fd, fd_set);", "-//\t\tOS.FD_SET (read_fd, fd_set);", "-//\t\ttimeout [0] = 0;", "-//\t\ttimeout [1] = 100000;", "-//\t\tif (OS.select (max_fd + 1, fd_set, null, null, timeout) != 0) break;", "-//\t\tif (getMessageCount () != 0) return true;", "-//\t\tint xtContext = OS.XtDisplayToApplicationContext (xDisplay);", "-//\t\tif (OS.XtAppPending (xtContext) != 0) return true;", "-//\t} while (true);", "-//\treturn OS.FD_ISSET (display_fd, fd_set);", "-", "-\t//TODO need to sleep waiting for the next event", "+\tint result;", "+\tint display_fd = OS.ConnectionNumber (xDisplay);", "+\tint max_fd = display_fd > read_fd ? display_fd : read_fd;", "-\t\tif (getMessageCount () != 0) break;", "-\t\tif (OS.XtAppPending (xtContext) != 0) return true;", "-\t\ttry {", "+\t\tOS.FD_ZERO (fd_set);", "+\t\tOS.FD_SET (display_fd, fd_set);", "+\t\tOS.FD_SET (read_fd, fd_set);", "+\t\ttimeout [0] = 0;", "+\t\ttimeout [1] = 100000;", "+\t\t/* Exit the OS lock to allow other threads to enter GTK */", "+\t\tint count = Callback.getEntryCount ();", "+\t\tfor (int i = 0; i < count; i++) {", "-\t\t\t\tOS_LOCK.wait (50);", "+\t\t\t\tOS.MonitorExit (OS_LOCK);", "-\t\t} catch (Exception e) {", "-\t\t\treturn false;", "-\t} while (true);", "-\treturn true;", "+\t\ttry {", "+\t\t\tresult = OS.select (max_fd + 1, fd_set, null, null, timeout);", "+\t\t} finally {", "+\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\tsynchronized (OS_LOCK) {", "+\t\t\t\t\tOS.MonitorEnter (OS_LOCK);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t} while (result == 0 && OS.XtAppPending (xtContext) == 0 && getMessageCount () == 0);", "+\treturn OS.FD_ISSET (display_fd, fd_set);"]}], "num": 44389}
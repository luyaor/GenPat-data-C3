{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "afbc0d3ed2628f503d9632ecc139055f", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "348ecdfb24ff70f4c0ba9d701f46e402", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/IE.java", "commitBeforeChange": "0a6811e80079fc0387e0cc87279a001c95b12743", "commitAfterChange": "def0218c22c8740186dfa86c4d354b293854c64b", "methodNumberBeforeChange": 19, "methodNumberAfterChange": 19, "signatureBeforeChange": "  void handleMouseEvent (OleEvent e)", "signatureAfterChange": "  void handleDOMEvent (OleEvent e)", "diff": ["-void handleMouseEvent (OleEvent e) {", "+void handleDOMEvent (OleEvent e) {", "+\tif (eventType.equals(EVENT_KEYDOWN)) {", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_KEYCODE });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tlastKeyCode = translateKey (pVarResult.getInt());", "+\t\tpVarResult.dispose();", "+", "+\t\tMSG msg = new MSG ();", "+\t\tint flags = OS.PM_NOREMOVE | OS.PM_NOYIELD;", "+\t\tif (OS.PeekMessage (msg, frame.handle, OS.WM_CHAR, OS.WM_CHAR, flags)) {", "+\t\t\t/* a keypress will be received for this key so don't send KeyDown here */", "+\t\t\tevent.dispose();", "+\t\t\treturn;", "+\t\t}", "+", "+\t\t/* if this is a repeating key then an event should not be fired for it */", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_REPEAT });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tboolean repeating = pVarResult.getBoolean();", "+\t\tpVarResult.dispose();", "+\t\tif (repeating) {", "+\t\t\tevent.dispose();", "+\t\t\treturn;", "+\t\t}", "+", "+\t\tint mask = 0;", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_ALTKEY });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tif (pVarResult.getBoolean()) mask |= SWT.ALT;", "+\t\tpVarResult.dispose();", "+", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_CTRLKEY });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tif (pVarResult.getBoolean()) mask |= SWT.CTRL;", "+\t\tpVarResult.dispose();", "+", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_SHIFTKEY });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tif (pVarResult.getBoolean()) mask |= SWT.SHIFT;", "+\t\tpVarResult.dispose();", "+", "+\t\tEvent keyEvent = new Event ();", "+\t\tkeyEvent.widget = browser;", "+\t\tkeyEvent.type = SWT.KeyDown;", "+\t\tkeyEvent.keyCode = lastKeyCode;", "+\t\tkeyEvent.stateMask = mask;", "+\t\tkeyEvent.stateMask &= ~lastKeyCode;\t\t/* remove current keydown if it's a state key */", "+\t\tbrowser.notifyListeners (keyEvent.type, keyEvent);", "+\t\tif (!keyEvent.doit) {", "+\t\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_RETURNVALUE });", "+\t\t\tdispIdMember = rgdispid[0];", "+\t\t\tVariant pVarFalse = new Variant(false);", "+\t\t\tevent.setProperty(dispIdMember, pVarFalse);", "+\t\t\tpVarFalse.dispose();", "+\t\t}", "+", "+\t\tevent.dispose();", "+\t\treturn;", "+\t}", "+", "+\tif (eventType.equals(EVENT_KEYPRESS)) {", "+\t\tint mask = 0;", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_CTRLKEY });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tif (pVarResult.getBoolean()) mask |= SWT.CTRL;", "+\t\tpVarResult.dispose();", "+", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_SHIFTKEY });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tif (pVarResult.getBoolean()) mask |= SWT.SHIFT;", "+\t\tpVarResult.dispose();", "+", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_ALTKEY });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tif (pVarResult.getBoolean()) mask |= SWT.ALT;", "+\t\tpVarResult.dispose();", "+", "+\t\t/* in the keypress event the keyCode actually corresponds to the character code */", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_KEYCODE });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tlastCharCode = pVarResult.getInt();", "+\t\tpVarResult.dispose();", "+", "+\t\tEvent keyEvent = new Event ();", "+\t\tkeyEvent.widget = browser;", "+\t\tkeyEvent.type = SWT.KeyDown;", "+\t\tkeyEvent.keyCode = lastKeyCode;", "+\t\tkeyEvent.character = (char)lastCharCode;", "+\t\tkeyEvent.stateMask = mask;", "+\t\tbrowser.notifyListeners (keyEvent.type, keyEvent);", "+\t\tif (!keyEvent.doit) {", "+\t\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_RETURNVALUE });", "+\t\t\tdispIdMember = rgdispid[0];", "+\t\t\tVariant pVarFalse = new Variant(false);", "+\t\t\tevent.setProperty(dispIdMember, pVarFalse);", "+\t\t\tpVarFalse.dispose();", "+\t\t}", "+", "+\t\tevent.dispose();", "+\t\treturn;", "+\t}", "+", "+\tif (eventType.equals(EVENT_KEYUP)) {", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_KEYCODE });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tint keyCode = translateKey (pVarResult.getInt());", "+\t\tpVarResult.dispose();", "+", "+\t\t/*", "+\t\t* if a key code could not be determined for this key then it's a", "+\t\t* key for which key events are not sent (eg.- the Windows key)", "+\t\t*/", "+\t\tif (keyCode == 0) {", "+\t\t\tlastKeyCode = lastCharCode = 0;", "+\t\t\tevent.dispose();", "+\t\t\treturn;", "+\t\t}", "+", "+\t\tif (keyCode != lastKeyCode) {", "+\t\t\t/* keyup does not correspond to the last keydown */", "+\t\t\tlastKeyCode = keyCode;", "+\t\t\tlastCharCode = 0;", "+\t\t}", "+", "+\t\tint mask = 0;", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_CTRLKEY });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tif (pVarResult.getBoolean()) mask |= SWT.CTRL;", "+\t\tpVarResult.dispose();", "+", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_ALTKEY });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tif (pVarResult.getBoolean()) mask |= SWT.ALT;", "+\t\tpVarResult.dispose();", "+", "+\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_SHIFTKEY });", "+\t\tdispIdMember = rgdispid[0];", "+\t\tpVarResult = event.getProperty(dispIdMember);", "+\t\tif (pVarResult.getBoolean()) mask |= SWT.SHIFT;", "+\t\tpVarResult.dispose();", "+", "+\t\tEvent keyEvent = new Event ();", "+\t\tkeyEvent.widget = browser;", "+\t\tkeyEvent.type = SWT.KeyUp;", "+\t\tkeyEvent.keyCode = lastKeyCode;", "+\t\tkeyEvent.character = (char)lastCharCode;", "+\t\tkeyEvent.stateMask = mask;", "+\t\tswitch (lastKeyCode) {", "+\t\t\tcase SWT.SHIFT:", "+\t\t\tcase SWT.CONTROL:", "+\t\t\tcase SWT.ALT:", "+\t\t\tcase SWT.COMMAND: {", "+\t\t\t\tkeyEvent.stateMask |= lastKeyCode;", "+\t\t\t}", "+\t\t}", "+\t\tbrowser.notifyListeners (keyEvent.type, keyEvent);", "+\t\tif (!keyEvent.doit) {", "+\t\t\trgdispid = event.getIDsOfNames(new String[] { PROPERTY_RETURNVALUE });", "+\t\t\tdispIdMember = rgdispid[0];", "+\t\t\tVariant pVarFalse = new Variant(false);", "+\t\t\tevent.setProperty(dispIdMember, pVarFalse);", "+\t\t\tpVarFalse.dispose();", "+\t\t}", "+", "+\t\tlastKeyCode = lastCharCode = 0;", "+\t\tevent.dispose();", "+\t\treturn;", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8411f9117c101f103a8e29e621a846a8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/win32/org/eclipse/swt/browser/WebSite.java", "commitBeforeChange": "7ea7044dce58068771791c523ae5bf28b951b0a6", "commitAfterChange": "216f5ab7fb691dae8d48f705c5a563bf2b62146e", "methodNumberBeforeChange": 96, "methodNumberAfterChange": 96, "signatureBeforeChange": "  Variant convertToJS (Object value)", "signatureAfterChange": "  Variant convertToJS (Object value)", "diff": ["+\t\t/* get IHTMLDocument2 */", "+\t\tIE browser = (IE)((Browser)getParent ().getParent ()).webBrowser;", "+\t\tOleAutomation auto = browser.auto;", "+\t\tint[] rgdispid = auto.getIDsOfNames (new String[] {\"Document\"}); //$NON-NLS-1$", "+\t\tif (rgdispid == null) return new Variant ();", "+\t\tVariant pVarResult = auto.getProperty (rgdispid[0]);", "+\t\tif (pVarResult == null) return new Variant ();", "+\t\tif (pVarResult.getType () == COM.VT_EMPTY) {", "+\t\t\tpVarResult.dispose ();", "+\t\t\treturn new Variant ();", "+\t\t}", "+\t\tOleAutomation document = pVarResult.getAutomation ();", "+\t\tpVarResult.dispose ();", "+", "+\t\t/* get IHTMLWindow2 */", "+\t\trgdispid = document.getIDsOfNames (new String[] {\"parentWindow\"}); //$NON-NLS-1$", "+\t\tif (rgdispid == null) {", "+\t\t\tdocument.dispose ();", "+\t\t\treturn new Variant ();", "+\t\t}", "+\t\tpVarResult = document.getProperty (rgdispid[0]);", "+\t\tif (pVarResult == null || pVarResult.getType () == COM.VT_EMPTY) {", "+\t\t\tif (pVarResult != null) pVarResult.dispose ();", "+\t\t\tdocument.dispose ();", "+\t\t\treturn new Variant ();\t", "+\t\t}", "+\t\tOleAutomation ihtmlWindow2 = pVarResult.getAutomation ();", "+\t\tpVarResult.dispose ();", "+\t\tdocument.dispose ();", "+", "+\t\t/* create a new JS array to be returned */", "+\t\trgdispid = ihtmlWindow2.getIDsOfNames (new String[] {\"Array\"}); //$NON-NLS-1$", "+\t\tif (rgdispid == null) {", "+\t\t\tihtmlWindow2.dispose ();", "+\t\t\treturn new Variant ();", "+\t\t}", "+\t\tVariant arrayType = ihtmlWindow2.getProperty (rgdispid[0]);", "+\t\tihtmlWindow2.dispose ();", "+\t\tIDispatch arrayTypeDispatch = arrayType.getDispatch ();", "+\t\tarrayType.dispose ();", "+", "+\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\tint rc = arrayTypeDispatch.QueryInterface (COM.IIDIDispatchEx, result);", "+\t\tif (rc != COM.S_OK) return new Variant ();", "+\t\tIDispatchEx arrayTypeDispatchEx = new IDispatchEx (result[0]);", "+\t\tresult[0] = 0;", "+\t\tint /*long*/ resultPtr = OS.GlobalAlloc (OS.GMEM_FIXED | OS.GMEM_ZEROINIT, VARIANT.sizeof);", "+\t\tDISPPARAMS params = new DISPPARAMS ();", "+\t\trc = arrayTypeDispatchEx.InvokeEx (COM.DISPID_VALUE, COM.LOCALE_USER_DEFAULT, COM.DISPATCH_CONSTRUCT, params, resultPtr, null, 0);", "+\t\tif (rc != COM.S_OK) {", "+\t\t\tOS.GlobalFree (resultPtr);", "+\t\t\treturn new Variant ();\t", "+\t\t}", "+\t\tVariant array = Variant.win32_new (resultPtr);", "+\t\tOS.GlobalFree (resultPtr);", "+", "+\t\t/* populate the array */", "-\t\tif (length > 0) {", "-\t\t\t/* get IHTMLDocument2 */", "-\t\t\tIE browser = (IE)((Browser)getParent ().getParent ()).webBrowser;", "-\t\t\tOleAutomation auto = browser.auto;", "-\t\t\tint[] rgdispid = auto.getIDsOfNames (new String[] {\"Document\"}); //$NON-NLS-1$", "-\t\t\tif (rgdispid == null) return new Variant ();", "-\t\t\tVariant pVarResult = auto.getProperty (rgdispid[0]);", "-\t\t\tif (pVarResult == null) return new Variant ();", "-\t\t\tif (pVarResult.getType () == COM.VT_EMPTY) {", "-\t\t\t\tpVarResult.dispose ();", "-\t\t\t\treturn new Variant ();", "-\t\t\t}", "-\t\t\tOleAutomation document = pVarResult.getAutomation ();", "-\t\t\tpVarResult.dispose ();", "-", "-\t\t\t/* get IHTMLWindow2 */", "-\t\t\trgdispid = document.getIDsOfNames (new String[] {\"parentWindow\"}); //$NON-NLS-1$", "-\t\t\tif (rgdispid == null) {", "-\t\t\t\tdocument.dispose ();", "-\t\t\t\treturn new Variant ();", "-\t\t\t}", "-\t\t\tpVarResult = document.getProperty (rgdispid[0]);", "-\t\t\tif (pVarResult == null || pVarResult.getType () == COM.VT_EMPTY) {", "-\t\t\t\tif (pVarResult != null) pVarResult.dispose ();", "-\t\t\t\tdocument.dispose ();", "-\t\t\t\treturn new Variant ();\t", "-\t\t\t}", "-\t\t\tOleAutomation ihtmlWindow2 = pVarResult.getAutomation ();", "-\t\t\tpVarResult.dispose ();", "-\t\t\tdocument.dispose ();", "-", "-\t\t\t/* create a new JS array to be returned */", "-\t\t\trgdispid = ihtmlWindow2.getIDsOfNames (new String[] {\"Array\"}); //$NON-NLS-1$", "-\t\t\tif (rgdispid == null) {", "-\t\t\t\tihtmlWindow2.dispose ();", "-\t\t\t\treturn new Variant ();", "-\t\t\t}", "-\t\t\tVariant arrayType = ihtmlWindow2.getProperty (rgdispid[0]);", "-\t\t\tihtmlWindow2.dispose ();", "-\t\t\tIDispatch arrayTypeDispatch = arrayType.getDispatch ();", "-\t\t\tarrayType.dispose ();", "-", "-\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\tint rc = arrayTypeDispatch.QueryInterface (COM.IIDIDispatchEx, result);", "-\t\t\tif (rc != COM.S_OK) return new Variant ();", "-\t\t\tIDispatchEx arrayTypeDispatchEx = new IDispatchEx (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tint /*long*/ resultPtr = OS.GlobalAlloc (OS.GMEM_FIXED | OS.GMEM_ZEROINIT, VARIANT.sizeof);", "-\t\t\tDISPPARAMS params = new DISPPARAMS ();", "-\t\t\trc = arrayTypeDispatchEx.InvokeEx (COM.DISPID_VALUE, COM.LOCALE_USER_DEFAULT, COM.DISPATCH_CONSTRUCT, params, resultPtr, null, 0);", "-\t\t\tif (rc != COM.S_OK) {", "-\t\t\t\tOS.GlobalFree (resultPtr);", "-\t\t\t\treturn new Variant ();\t", "-\t\t\t}", "-\t\t\tVariant array = Variant.win32_new (resultPtr);", "-\t\t\tOS.GlobalFree (resultPtr);", "-", "-\t\t\t/* populate the array */", "-\t\t\tauto = array.getAutomation ();", "-\t\t\tint[] rgdispids = auto.getIDsOfNames (new String[] {\"push\"}); //$NON-NLS-1$", "-\t\t\tif (rgdispids != null) {", "-\t\t\t\tfor (int i = 0; i < length; i++) {", "-\t\t\t\t\tObject currentObject = arrayValue[i];", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tVariant variant = convertToJS (currentObject);", "-\t\t\t\t\t\tauto.invoke (rgdispids[0], new Variant[] {variant});", "-\t\t\t\t\t\tvariant.dispose ();", "-\t\t\t\t\t} catch (SWTException e) {", "-\t\t\t\t\t\t/* invalid return value type */", "-\t\t\t\t\t\tauto.dispose ();", "-\t\t\t\t\t\tarray.dispose ();", "-\t\t\t\t\t\tthrow e;", "-\t\t\t\t\t}", "+\t\tauto = array.getAutomation ();", "+\t\tint[] rgdispids = auto.getIDsOfNames (new String[] {\"push\"}); //$NON-NLS-1$", "+\t\tif (rgdispids != null) {", "+\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\tObject currentObject = arrayValue[i];", "+\t\t\t\ttry {", "+\t\t\t\t\tVariant variant = convertToJS (currentObject);", "+\t\t\t\t\tauto.invoke (rgdispids[0], new Variant[] {variant});", "+\t\t\t\t\tvariant.dispose ();", "+\t\t\t\t} catch (SWTException e) {", "+\t\t\t\t\t/* invalid return value type */", "+\t\t\t\t\tauto.dispose ();", "+\t\t\t\t\tarray.dispose ();", "+\t\t\t\t\tthrow e;", "-\t\t\tauto.dispose ();", "-\t\t\treturn array;", "+\t\tauto.dispose ();", "+\t\treturn array;"]}], "num": 7136}
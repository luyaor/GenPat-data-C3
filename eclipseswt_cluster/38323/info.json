{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "17ebe0b49dd80f54b085b2d0f6a12ea3", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc6495e40ff4f01e14e354ea550bc500", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "0256418210990c9e8f7fef6b740018d8b9ac238b", "commitAfterChange": "1e86d180ad8e86da26dd9b591f9c39ecc198b3fe", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void setBackground(Color color)", "signatureAfterChange": " public void setBackground(Color color)", "diff": ["-//\tbyte red = (byte)((transparentPixel >> 16) & 0xFF);", "-//\tbyte green = (byte)((transparentPixel >> 8) & 0xFF);", "-//\tbyte blue = (byte)((transparentPixel >> 0) & 0xFF);", "-//\tbyte newRed = (byte)((int)(color.handle[0] * 255) & 0xFF);", "-//\tbyte newGreen = (byte)((int)(color.handle[1] * 255) & 0xFF);", "-//\tbyte newBlue = (byte)((int)(color.handle[2] * 255) & 0xFF);", "-//\tint height = OS.CGImageGetHeight(handle);", "-//\tint bpl = OS.CGImageGetBytesPerRow(handle);", "-//\tbyte[] line = new byte[bpl];", "-//\tfor (int i = 0, offset = 0; i < height; i++, offset += bpl) {", "-//\t\tOS.memmove(line, data + offset, bpl);", "-//\t\tfor (int j = 0; j  < line.length; j += 4) {", "-//\t\t\tif (line[j+ 1] == red && line[j + 2] == green && line[j + 3] == blue) {", "-//\t\t\t\tline[j + 1] = newRed;", "-//\t\t\t\tline[j + 2] = newGreen;", "-//\t\t\t\tline[j + 3] = newBlue;", "-//\t\t\t}", "-//\t\t}", "-//\t\tOS.memmove(data + offset, line, bpl);", "-//\t}", "-//\ttransparentPixel = (newRed & 0xFF) << 16 | (newGreen & 0xFF) << 8 | (newBlue & 0xFF);", "+\tbyte red = (byte)((transparentPixel >> 16) & 0xFF);", "+\tbyte green = (byte)((transparentPixel >> 8) & 0xFF);", "+\tbyte blue = (byte)((transparentPixel >> 0) & 0xFF);", "+\tbyte newRed = (byte)((int)(color.handle[0] * 255) & 0xFF);", "+\tbyte newGreen = (byte)((int)(color.handle[1] * 255) & 0xFF);", "+\tbyte newBlue = (byte)((int)(color.handle[2] * 255) & 0xFF);", "+\tint /*long*/ bpr = imageRep.bytesPerRow();", "+\tint /*long*/ data = imageRep.bitmapData();", "+\tbyte[] line = new byte[(int)bpr];", "+\tfor (int i = 0, offset = 0; i < height; i++, offset += bpr) {", "+\t\tOS.memmove(line, data + offset, bpr);", "+\t\tfor (int j = 0; j  < line.length; j += 4) {", "+\t\t\tif (line[j+ 1] == red && line[j + 2] == green && line[j + 3] == blue) {", "+\t\t\t\tline[j + 1] = newRed;", "+\t\t\t\tline[j + 2] = newGreen;", "+\t\t\t\tline[j + 3] = newBlue;", "+\t\t\t}", "+\t\t}", "+\t\tOS.memmove(data + offset, line, bpr);", "+\t}", "+\ttransparentPixel = (newRed & 0xFF) << 16 | (newGreen & 0xFF) << 8 | (newBlue & 0xFF);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3308813e61be4ef1df63bf0f09822a10", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "1e86d180ad8e86da26dd9b591f9c39ecc198b3fe", "commitAfterChange": "6a60fc0317f7258e120abee63248bb550abb5ce1", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " public void setBackground(Color color)", "signatureAfterChange": " public void setBackground(Color color)", "diff": ["-\tbyte red = (byte)((transparentPixel >> 16) & 0xFF);", "-\tbyte green = (byte)((transparentPixel >> 8) & 0xFF);", "-\tbyte blue = (byte)((transparentPixel >> 0) & 0xFF);", "-\tbyte newRed = (byte)((int)(color.handle[0] * 255) & 0xFF);", "-\tbyte newGreen = (byte)((int)(color.handle[1] * 255) & 0xFF);", "-\tbyte newBlue = (byte)((int)(color.handle[2] * 255) & 0xFF);", "-\tint /*long*/ bpr = imageRep.bytesPerRow();", "-\tint /*long*/ data = imageRep.bitmapData();", "-\tbyte[] line = new byte[(int)bpr];", "-\tfor (int i = 0, offset = 0; i < height; i++, offset += bpr) {", "-\t\tOS.memmove(line, data + offset, bpr);", "-\t\tfor (int j = 0; j  < line.length; j += 4) {", "-\t\t\tif (line[j+ 1] == red && line[j + 2] == green && line[j + 3] == blue) {", "-\t\t\t\tline[j + 1] = newRed;", "-\t\t\t\tline[j + 2] = newGreen;", "-\t\t\t\tline[j + 3] = newBlue;", "+\tNSAutoreleasePool pool = null;", "+\tif (!NSThread.isMainThread()) pool = (NSAutoreleasePool) new NSAutoreleasePool().alloc().init();", "+\ttry {", "+\t\tbyte red = (byte)((transparentPixel >> 16) & 0xFF);", "+\t\tbyte green = (byte)((transparentPixel >> 8) & 0xFF);", "+\t\tbyte blue = (byte)((transparentPixel >> 0) & 0xFF);", "+\t\tbyte newRed = (byte)((int)(color.handle[0] * 255) & 0xFF);", "+\t\tbyte newGreen = (byte)((int)(color.handle[1] * 255) & 0xFF);", "+\t\tbyte newBlue = (byte)((int)(color.handle[2] * 255) & 0xFF);", "+\t\tint /*long*/ bpr = imageRep.bytesPerRow();", "+\t\tint /*long*/ data = imageRep.bitmapData();", "+\t\tbyte[] line = new byte[(int)bpr];", "+\t\tfor (int i = 0, offset = 0; i < height; i++, offset += bpr) {", "+\t\t\tOS.memmove(line, data + offset, bpr);", "+\t\t\tfor (int j = 0; j  < line.length; j += 4) {", "+\t\t\t\tif (line[j+ 1] == red && line[j + 2] == green && line[j + 3] == blue) {", "+\t\t\t\t\tline[j + 1] = newRed;", "+\t\t\t\t\tline[j + 2] = newGreen;", "+\t\t\t\t\tline[j + 3] = newBlue;", "+\t\t\t\t}", "+\t\t\tOS.memmove(data + offset, line, bpr);", "-\t\tOS.memmove(data + offset, line, bpr);", "+\t\ttransparentPixel = (newRed & 0xFF) << 16 | (newGreen & 0xFF) << 8 | (newBlue & 0xFF);", "+\t} finally {", "+\t\tif (pool != null) pool.release();", "-\ttransparentPixel = (newRed & 0xFF) << 16 | (newGreen & 0xFF) << 8 | (newBlue & 0xFF);"]}], "num": 38323}
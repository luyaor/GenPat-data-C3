{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "182cc32d20f0cbff15a53a82dfa3784a", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ccb1a992009f0a77b8f3595ca2e2808", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledTextRenderer.java", "commitBeforeChange": "d7cf53a873d76e603f43a368e1d580ca30321619", "commitAfterChange": "321182c4d3e7f5c155a3d6ee888fa2858ea3e949", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": " void calculateLineHeight()", "signatureAfterChange": " void calculateLineHeight()", "diff": ["+\tFont originalFont = gc.getFont();", "+\tFontData[] fontData = originalFont.getFontData();", "+\tFont font;", "+\t// don't assume that bold and normal fonts have the same height", "+\t// fixes bug 41773", "+\tfor (int i = 0; i < fontData.length; i++) {", "+\t\tint fontStyle = fontData[i].getStyle(); ", "+\t\tif ((fontStyle & SWT.BOLD) == SWT.BOLD) {", "+\t\t\tfontData[i].setStyle(fontStyle ^ SWT.BOLD);", "+\t\t} else {", "+\t\t\tfontData[i].setStyle(fontStyle | SWT.BOLD);", "+\t\t} ", "+\t}", "+\tfont = new Font(getDevice(), fontData);", "+\tgc.setFont(font);", "+\tlineHeight = Math.max(lineHeight, gc.getFontMetrics().getHeight());", "+\tgc.setFont(originalFont);", "+\tfont.dispose();\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b75d718db40a70b2a473b76e5d37ebc0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/MessageBox.java", "commitBeforeChange": "e646d63679f090719f41ca9ae10e1610c95f97d4", "commitAfterChange": "ad1eb099ac54f0185340b5adb9ad7256c2fed7a2", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public int open ()", "signatureAfterChange": " public int open ()", "diff": ["+\t\t/*", "+\t\t* Bug in carbon. For some reason, RunStandardAlert() hangs when there are", "+\t\t* windows opened with kUtilityWindowClass group.  The fix is to temporarily", "+\t\t* put those windows in the kFloatingWindowClass group.", "+\t\t*/", "+\t\tShell [] shells = display.getShells ();", "+\t\tfor (int i = 0; i < shells.length; i++) {", "+\t\t\tShell shell = shells[i];", "+\t\t\tif ((shell.style & SWT.ON_TOP) != 0 && !shell.isDisposed () && shell.isVisible ()) {", "+\t\t\t\tOS.SetWindowGroup (shell.shellHandle, OS.GetWindowGroupOfClass (OS.kFloatingWindowClass));", "+\t\t\t} else {", "+\t\t\t\tshells[i] = null;", "+\t\t\t}", "+\t\t}", "+\t\tfor (int i = 0; i < shells.length; i++) {", "+\t\t\tShell shell = shells[i];", "+\t\t\tif (shell != null && !shell.isDisposed ()) {", "+\t\t\t\tOS.SetWindowGroup (shell.shellHandle, shell.getParentGroup ());", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "deccf84bdf3e53b89373214d7f18873e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/win32/org/eclipse/swt/printing/PrintDialog.java", "commitBeforeChange": "4cda2906245932c3af06926d23230e8786beff56", "commitAfterChange": "07f034a353c9ee532abe7fa95cef8c509291595d", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public PrinterData open()", "signatureAfterChange": " public PrinterData open()", "diff": ["-\tif (OS.PrintDlg(pd)) {\t\t// success", "+\t", "+\tDisplay display = parent.getDisplay();", "+\tShell [] shells = display.getShells();", "+\tif ((getStyle() & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "+\t\tfor (int i=0; i<shells.length; i++) {", "+\t\t\tif (shells[i].isEnabled()) {", "+\t\t\t\tshells[i].setEnabled(false);", "+\t\t\t} else {", "+\t\t\t\tshells[i] = null;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tPrinterData data = null;", "+\tboolean success = OS.PrintDlg(pd);", "+\tif ((getStyle() & (SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {", "+\t\tfor (int i=0; i<shells.length; i++) {", "+\t\t\tif (shells[i] != null && !shells[i].isDisposed ()) {", "+\t\t\t\tshells[i].setEnabled (true);", "+\t\t\t}", "+\t\t}", "+\t}", "+\t", "+\tif (success) {", "-\t\tPrinterData data = new PrinterData(driver, device);", "+\t\tdata = new PrinterData(driver, device);", "-\t\treturn data;", "-\treturn null;", "+\treturn data;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4fa9210c8eea2b5bcd2af56393639b21", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/TaskBar.java", "commitBeforeChange": "e75f9a9601f49a9f2f46f2af60c9c1dbeec1ab11", "commitAfterChange": "1a606235eed4952b3f545771da3e4f6926e0b3ab", "methodNumberBeforeChange": 17, "methodNumberAfterChange": 17, "signatureBeforeChange": "  void setMenu (Menu menu)", "signatureAfterChange": "  void setMenu (Menu menu)", "diff": ["-\t\tString directory = getDirectory (buffer);", "+\t\tString directory = null;", "+\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\tMenuItem item = items [i];", "+\t\t\tif (item.getImage () != null && item.getData (ICON_KEY) == null) {", "+\t\t\t\tdirectory = getDirectory (buffer);", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "-\t\t\t\t\t\tint /*long*/ poa2 = createShellLinkArray (subMenu.getItems (), directory);", "+\t\t\t\t\t\tMenuItem [] subItems = subMenu.getItems ();", "+\t\t\t\t\t\tif (directory == null) {", "+\t\t\t\t\t\t\tfor (int j = 0; j < subItems.length; j++) {", "+\t\t\t\t\t\t\t\tMenuItem subItem = subItems [j];", "+\t\t\t\t\t\t\t\tif (subItem.getImage () != null && subItem.getData (ICON_KEY) == null) {", "+\t\t\t\t\t\t\t\t\tdirectory = getDirectory (buffer);", "+\t\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tint /*long*/ poa2 = createShellLinkArray (subItems, directory);", "-\t\t\t\t\t\t\t\tbuffer = new char [length + 1];", "-\t\t\t\t\t\t\t\ttext.getChars (0, length, buffer, 0);", "+\t\t\t\t\t\t\t\tchar [] buffer2 = new char [length + 1];", "+\t\t\t\t\t\t\t\ttext.getChars (0, length, buffer2, 0);", "-\t\t\t\t\t\t\t\thr = OS.VtblCall (5, pDestList, buffer, poa2);", "+\t\t\t\t\t\t\t\thr = OS.VtblCall (5, pDestList, buffer2, poa2);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dbf851ff005f671dce43a0defa2bc324", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt.tools/Mac Generation/org/eclipse/swt/tools/internal/MacGenerator.java", "commitBeforeChange": "136f2358951f4d58d8c923aa1bafaa7930ed17ce", "commitAfterChange": "7abe1684a602cab346dcaed97fe33b2111882020", "methodNumberBeforeChange": 34, "methodNumberAfterChange": 34, "signatureBeforeChange": "  boolean isUnique(Node method, TreeMap methods)", "signatureAfterChange": "  boolean isUnique(Node method, TreeMap methods)", "diff": ["+\tString signature = \"\";", "+\tNodeList params = method.getChildNodes();", "+\tfor (int k = 0; k < params.getLength(); k++) {", "+\t\tNode param = params.item(k);", "+\t\tif (\"arg\".equals(param.getNodeName())) {", "+\t\t\tsignature += getJavaType(param);", "+\t\t}", "+\t}", "-\t\t\t\treturn false;", "+\t\t\t\tNodeList otherParams = other.getChildNodes();", "+\t\t\t\tString otherSignature = \"\";", "+\t\t\t\tfor (int k = 0; k < otherParams.getLength(); k++) {", "+\t\t\t\t\tNode param = otherParams.item(k);", "+\t\t\t\t\tif (\"arg\".equals(param.getNodeName())) {", "+\t\t\t\t\t\totherSignature += getJavaType(param);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tif (signature.equals(otherSignature)) {", "+\t\t\t\t\treturn false;", "+\t\t\t\t}"]}], "num": 29591}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9625c55d260aa46fe2a7dc3537a54ba0", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6fc55b423f78945019a4b80279a09c48", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "d43f2bf20caf593b61daadca64c4f1b0ca2db4ab", "commitAfterChange": "f5db7b7b752b8d0f98bc5200337224a2a4a66bb0", "methodNumberBeforeChange": 43, "methodNumberAfterChange": 43, "signatureBeforeChange": "  int canSetProperty (int iid, int propertyName, int _retVal)", "signatureAfterChange": "  int canSetProperty (int iid, int propertyName, int _retVal)", "diff": ["+\tint /*long*/[] result = new int /*long*/[1];", "+\tint rc = XPCOM.NS_GetServiceManager (result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\tresult[0] = 0;", "+\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);\t\t", "+\tserviceManager.Release ();", "+", "+\tnsIMemory memory = new nsIMemory (result[0]);", "+\tresult[0] = 0;", "-\tint /*long*/ ptr = C.malloc (bytes.length);", "+\tint /*long*/ ptr = memory.Alloc (bytes.length);", "+\tmemory.Release ();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e54ec798bf12f6c13d00353acadcc5a3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "d43f2bf20caf593b61daadca64c4f1b0ca2db4ab", "commitAfterChange": "f5db7b7b752b8d0f98bc5200337224a2a4a66bb0", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": "  int canCallMethod (int iid, int methodName, int _retVal)", "signatureAfterChange": "  int canCallMethod (int iid, int methodName, int _retVal)", "diff": ["+\tint /*long*/[] result = new int /*long*/[1];", "+\tint rc = XPCOM.NS_GetServiceManager (result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\tresult[0] = 0;", "+\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);\t\t", "+\tserviceManager.Release ();", "+", "+\tnsIMemory memory = new nsIMemory (result[0]);", "+\tresult[0] = 0;", "-\tint /*long*/ ptr = C.malloc (bytes.length);", "+\tint /*long*/ ptr = memory.Alloc (bytes.length);", "+\tmemory.Release ();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e5085a7b34ed19bf48e2df1c8a595aff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "d43f2bf20caf593b61daadca64c4f1b0ca2db4ab", "commitAfterChange": "f5db7b7b752b8d0f98bc5200337224a2a4a66bb0", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "  int canGetProperty (int iid, int propertyName, int _retVal)", "signatureAfterChange": "  int canGetProperty (int iid, int propertyName, int _retVal)", "diff": ["+\tint /*long*/[] result = new int /*long*/[1];", "+\tint rc = XPCOM.NS_GetServiceManager (result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\tresult[0] = 0;", "+\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);\t\t", "+\tserviceManager.Release ();", "+", "+\tnsIMemory memory = new nsIMemory (result[0]);", "+\tresult[0] = 0;", "-\tint /*long*/ ptr = C.malloc (bytes.length);", "+\tint /*long*/ ptr = memory.Alloc (bytes.length);", "+\tmemory.Release ();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5b2d2c674d8e7b9eda122569d6fe6d68", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "d43f2bf20caf593b61daadca64c4f1b0ca2db4ab", "commitAfterChange": "f5db7b7b752b8d0f98bc5200337224a2a4a66bb0", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 40, "signatureBeforeChange": "  int canCreateWrapper (int iid, int _retVal)", "signatureAfterChange": "  int canCreateWrapper (int iid, int _retVal)", "diff": ["+\tint /*long*/[] result = new int /*long*/[1];", "+\tint rc = XPCOM.NS_GetServiceManager (result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\tresult[0] = 0;", "+\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);\t\t", "+\tserviceManager.Release ();", "+", "+\tnsIMemory memory = new nsIMemory (result[0]);", "+\tresult[0] = 0;", "-\tint /*long*/ ptr = C.malloc (bytes.length);", "+\tint /*long*/ ptr = memory.Alloc (bytes.length);", "+\tmemory.Release ();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0cff9048a2bc3460987800480c8f0830", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/External.java", "commitBeforeChange": "d43f2bf20caf593b61daadca64c4f1b0ca2db4ab", "commitAfterChange": "f5db7b7b752b8d0f98bc5200337224a2a4a66bb0", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  int getClassDescription (int _retValue)", "signatureAfterChange": "  int getClassDescription (int _retValue)", "diff": ["+\tint /*long*/[] result = new int /*long*/[1];", "+\tint rc = XPCOM.NS_GetServiceManager (result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);", "+", "+\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\tresult[0] = 0;", "+\tbyte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_MEMORY_CONTRACTID, true);", "+\trc = serviceManager.GetServiceByContractID (aContractID, nsIMemory.NS_IMEMORY_IID, result);", "+\tif (rc != XPCOM.NS_OK) Mozilla.error (rc);", "+\tif (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);\t\t", "+\tserviceManager.Release ();", "+", "+\tnsIMemory memory = new nsIMemory (result[0]);", "+\tresult[0] = 0;", "-\tint /*long*/ ptr = C.malloc (bytes.length);", "+\tint /*long*/ ptr = memory.Alloc (bytes.length);", "+\tmemory.Release ();", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bf9bb71df5f5a8a322f558fd4413b090", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "b1a31ab4f172a1a2e228d0d4b5317b0bc24de7aa", "commitAfterChange": "b72bc1d2aeff462f0ad0e8ecfa6bc39ebd385109", "methodNumberBeforeChange": 118, "methodNumberAfterChange": 122, "signatureBeforeChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["+\t\tint /*long*/[] result = new int /*long*/[1];", "+", "+\t\t/*", "+\t\t* When navigating to a site that is known to have a bad certificate, request notification", "+\t\t* callbacks on the channel so that our nsIBadCertListener2 will be invoked.", "+\t\t*/", "+\t\tif (isRetrievingBadCert) {", "+\t\t\tisRetrievingBadCert = false;", "+\t\t\tnsIRequest request = new nsIRequest (aRequest);", "+\t\t\tint rc = request.QueryInterface (nsIChannel.NS_ICHANNEL_IID, result);", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\t\t\tnsIChannel channel = new nsIChannel (result[0]);", "+\t\t\tresult[0] = 0;", "+\t\t\trc = channel.SetNotificationCallbacks (interfaceRequestor.getAddress ());", "+\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\tchannel.Release ();", "+\t\t\treturn XPCOM.NS_OK;", "+\t\t}", "+", "-\t\tint /*long*/[] result = new int /*long*/[1];"]}], "num": 54192}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "594d9f56af999317e5d49201a26ef4ec", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e65fa03abeb2579ec74f810773d03b7c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/ViewForm.java", "commitBeforeChange": "ca153a6662892d20f6509d20fb02c74517090cba", "commitAfterChange": "996ac4b9a124a64638a57eca0ea22df1bd8417fb", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 10, "signatureBeforeChange": " public void layout (boolean changed)", "signatureAfterChange": " public void layout (boolean changed)", "diff": ["-\tint y = rect.y + marginHeight;", "-\t\t", "-\tif (showMax && maximized) {", "-\t\tif (topLeft != null && !topLeft.isDisposed()) {", "-\t\t\ttopLeft.setBounds(OFFSCREEN, OFFSCREEN, 0,0);", "-\t\t}", "-\t\tif (topCenter != null && !topCenter.isDisposed()) {", "-\t\t\t topCenter.setBounds(OFFSCREEN, OFFSCREEN, 0,0);", "-\t\t}", "-\t\tif (topRight != null && !topRight.isDisposed()) {", "-\t\t\t topRight.setBounds(OFFSCREEN, OFFSCREEN, 0,0);", "-\t\t}", "-\t} else {", "-\t\tPoint leftSize = new Point(0, 0);", "-\t\tif (topLeft != null && !topLeft.isDisposed()) {", "-\t\t\tleftSize = topLeft.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\t}", "-\t\tPoint centerSize = new Point(0, 0);", "-\t\tif (topCenter != null && !topCenter.isDisposed()) {", "-\t\t\t centerSize = topCenter.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\t}", "-\t\tPoint rightSize = new Point(0, 0);", "-\t\tif (topRight != null && !topRight.isDisposed()) {", "-\t\t\t rightSize = topRight.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\t}", "-\t\t", "-\t\tint minTopWidth = leftSize.x + centerSize.x + rightSize.x + 2*marginWidth;", "-\t\tint count = -1;", "-\t\tif (leftSize.x > 0) count++;", "-\t\tif (centerSize.x > 0) count++;", "-\t\tif (rightSize.x > 0) count++;", "-\t\tif (count > 0) minTopWidth += count * horizontalSpacing;", "-\t\t", "-\t\tboolean top = false;", "-\t\tint x = rect.x + rect.width - marginWidth;", "-\t\t", "-\t\tif (separateTopCenter || minTopWidth > rect.width) {", "-\t\t\tint topHeight = Math.max(rightSize.y, leftSize.y);", "-\t\t\tif (topRight != null && !topRight.isDisposed()) {", "-\t\t\t\ttop = true;", "-\t\t\t\tx -= rightSize.x;", "-\t\t\t\ttopRight.setBounds(x, y, rightSize.x, topHeight);", "-\t\t\t\tx -= horizontalSpacing;", "-\t\t\t}", "-\t\t\tif (topLeft != null && !topLeft.isDisposed()) {", "-\t\t\t\ttop = true;", "-\t\t\t\tleftSize = topLeft.computeSize(x - rect.x - marginWidth, SWT.DEFAULT);", "-\t\t\t\ttopLeft.setBounds(rect.x + marginWidth, y, leftSize.x, topHeight);", "-\t\t\t}", "-\t\t\tif (top)y += topHeight + verticalSpacing;", "-\t\t\tif (topCenter != null && !topCenter.isDisposed()) {", "-\t\t\t\ttop = true;", "-\t\t\t\tcenterSize = topCenter.computeSize(rect.width - 2 * marginWidth, SWT.DEFAULT);", "-\t\t\t\ttopCenter.setBounds(rect.x + rect.width - marginWidth - centerSize.x, y, centerSize.x, centerSize.y);", "-\t\t\t\ty += centerSize.y + verticalSpacing;", "-\t\t\t}\t\t", "-\t\t} else {", "-\t\t\tint topHeight = Math.max(rightSize.y, Math.max(centerSize.y, leftSize.y));", "-\t\t\tif (topRight != null && !topRight.isDisposed()) {", "-\t\t\t\ttop = true;", "-\t\t\t\tx -= rightSize.x;", "-\t\t\t\ttopRight.setBounds(x, y, rightSize.x, topHeight);", "-\t\t\t\tx -= horizontalSpacing;", "-\t\t\t}", "-\t\t\tif (topCenter != null && !topCenter.isDisposed()) {", "-\t\t\t\ttop = true;", "-\t\t\t\tx -= centerSize.x;", "-\t\t\t\ttopCenter.setBounds(x, y, centerSize.x, topHeight);", "-\t\t\t\tx -= horizontalSpacing;", "-\t\t\t}", "-\t\t\tif (topLeft != null && !topLeft.isDisposed()) {", "-\t\t\t\ttop = true;", "-\t\t\t\tleftSize = topLeft.computeSize(x - rect.x - marginWidth, topHeight);", "-\t\t\t\ttopLeft.setBounds(rect.x + marginWidth, y, leftSize.x, topHeight);", "-\t\t\t}", "-\t\t\tif (top)y += topHeight + verticalSpacing;", "-\t\t}", "+\t", "+\tPoint leftSize = new Point(0, 0);", "+\tif (topLeft != null && !topLeft.isDisposed()) {", "+\t\tleftSize = topLeft.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-", "-\tmaxRect = new Rectangle(0, 0, 0, 0);", "-\tif (showMax && (topLeft != null || topRight != null || topCenter != null)) {", "-\t\tmaxRect = new Rectangle(borderLeft, y, rect.width - borderLeft - borderRight, 6);", "-\t\ty += 7;", "+\tPoint centerSize = new Point(0, 0);", "+\tif (topCenter != null && !topCenter.isDisposed()) {", "+\t\t centerSize = topCenter.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\t}", "+\tPoint rightSize = new Point(0, 0);", "+\tif (topRight != null && !topRight.isDisposed()) {", "+\t\t rightSize = topRight.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\tint minTopWidth = leftSize.x + centerSize.x + rightSize.x + 2*marginWidth;", "+\tint count = -1;", "+\tif (leftSize.x > 0) count++;", "+\tif (centerSize.x > 0) count++;", "+\tif (rightSize.x > 0) count++;", "+\tif (count > 0) minTopWidth += count * horizontalSpacing;", "+\t\t", "+\tint x = rect.x + rect.width - marginWidth;", "+\tint y = rect.y + marginHeight;", "+\t", "+\tboolean top = false;", "+\tif (separateTopCenter || minTopWidth > rect.width) {", "+\t\tint topHeight = Math.max(rightSize.y, leftSize.y);", "+\t\tif (topRight != null && !topRight.isDisposed()) {", "+\t\t\ttop = true;", "+\t\t\tx -= rightSize.x;", "+\t\t\ttopRight.setBounds(x, y, rightSize.x, topHeight);", "+\t\t\tx -= horizontalSpacing;", "+\t\t}", "+\t\tif (topLeft != null && !topLeft.isDisposed()) {", "+\t\t\ttop = true;", "+\t\t\tleftSize = topLeft.computeSize(x - rect.x - marginWidth, SWT.DEFAULT);", "+\t\t\ttopLeft.setBounds(rect.x + marginWidth, y, leftSize.x, topHeight);", "+\t\t}", "+\t\tif (top)y += topHeight + verticalSpacing;", "+\t\tif (topCenter != null && !topCenter.isDisposed()) {", "+\t\t\ttop = true;", "+\t\t\tcenterSize = topCenter.computeSize(rect.width - 2 * marginWidth, SWT.DEFAULT);", "+\t\t\ttopCenter.setBounds(rect.x + rect.width - marginWidth - centerSize.x, y, centerSize.x, centerSize.y);", "+\t\t\ty += centerSize.y + verticalSpacing;", "+\t\t}\t\t", "+\t} else {", "+\t\tint topHeight = Math.max(rightSize.y, Math.max(centerSize.y, leftSize.y));", "+\t\tif (topRight != null && !topRight.isDisposed()) {", "+\t\t\ttop = true;", "+\t\t\tx -= rightSize.x;", "+\t\t\ttopRight.setBounds(x, y, rightSize.x, topHeight);", "+\t\t\tx -= horizontalSpacing;", "+\t\t}", "+\t\tif (topCenter != null && !topCenter.isDisposed()) {", "+\t\t\ttop = true;", "+\t\t\tx -= centerSize.x;", "+\t\t\ttopCenter.setBounds(x, y, centerSize.x, topHeight);", "+\t\t\tx -= horizontalSpacing;", "+\t\t}", "+\t\tif (topLeft != null && !topLeft.isDisposed()) {", "+\t\t\ttop = true;", "+\t\t\tleftSize = topLeft.computeSize(x - rect.x - marginWidth, topHeight);", "+\t\t\ttopLeft.setBounds(rect.x + marginWidth, y, leftSize.x, topHeight);", "+\t\t}", "+\t\tif (top)y += topHeight + verticalSpacing;", "+\t}", "+", "-\t\tcontent.setBounds(rect.x + marginWidth, y, rect.width - 2 * marginWidth, rect.y + rect.height - y - marginHeight);", "+\t\t content.setBounds(rect.x + marginWidth, y, rect.width - 2 * marginWidth, rect.y + rect.height - y - marginHeight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "070b17a70bf135e637490bc1d73b7c26", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/ViewForm.java", "commitBeforeChange": "907c4dd47a285571bf0d66e34d1a9323e15dd90b", "commitAfterChange": "e4b1a868ce731255239223c8ff6f43351c81a864", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 13, "signatureBeforeChange": " public void layout (boolean changed)", "signatureAfterChange": " public void layout (boolean changed)", "diff": ["-\t", "-\tPoint leftSize = new Point(0, 0);", "-\tif (topLeft != null && !topLeft.isDisposed()) {", "-\t\tleftSize = topLeft.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t}", "-\tPoint centerSize = new Point(0, 0);", "-\tif (topCenter != null && !topCenter.isDisposed()) {", "-\t\t centerSize = topCenter.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t}", "-\tPoint rightSize = new Point(0, 0);", "-\tif (topRight != null && !topRight.isDisposed()) {", "-\t\t rightSize = topRight.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t}", "-\t", "-\tint minTopWidth = leftSize.x + centerSize.x + rightSize.x + 2*marginWidth;", "-\tint count = -1;", "-\tif (leftSize.x > 0) count++;", "-\tif (centerSize.x > 0) count++;", "-\tif (rightSize.x > 0) count++;", "-\tif (count > 0) minTopWidth += count * horizontalSpacing;", "-\t\t", "-\tint x = rect.x + rect.width - marginWidth;", "-\t", "-\tboolean top = false;", "-\tif (separateTopCenter || minTopWidth > rect.width) {", "-\t\tint topHeight = Math.max(rightSize.y, leftSize.y);", "-\t\tif (topRight != null && !topRight.isDisposed()) {", "-\t\t\ttop = true;", "-\t\t\tx -= rightSize.x;", "-\t\t\ttopRight.setBounds(x, y, rightSize.x, topHeight);", "-\t\t\tx -= horizontalSpacing;", "-\t\t}", "+\t\t", "+\tif (showMax && maximized) {", "-\t\t\ttop = true;", "-\t\t\tleftSize = topLeft.computeSize(x - rect.x - marginWidth, SWT.DEFAULT);", "-\t\t\ttopLeft.setBounds(rect.x + marginWidth, y, leftSize.x, topHeight);", "+\t\t\ttopLeft.setBounds(OFFSCREEN, OFFSCREEN, 0,0);", "-\t\tif (top)y += topHeight + verticalSpacing;", "-\t\t\ttop = true;", "-\t\t\tcenterSize = topCenter.computeSize(rect.width - 2 * marginWidth, SWT.DEFAULT);", "-\t\t\ttopCenter.setBounds(rect.x + rect.width - marginWidth - centerSize.x, y, centerSize.x, centerSize.y);", "-\t\t\ty += centerSize.y + verticalSpacing;", "-\t\t}\t\t", "+\t\t\t topCenter.setBounds(OFFSCREEN, OFFSCREEN, 0,0);", "+\t\t}", "+\t\tif (topRight != null && !topRight.isDisposed()) {", "+\t\t\t topRight.setBounds(OFFSCREEN, OFFSCREEN, 0,0);", "+\t\t}", "-\t\tint topHeight = Math.max(rightSize.y, Math.max(centerSize.y, leftSize.y));", "-\t\tif (topRight != null && !topRight.isDisposed()) {", "-\t\t\ttop = true;", "-\t\t\tx -= rightSize.x;", "-\t\t\ttopRight.setBounds(x, y, rightSize.x, topHeight);", "-\t\t\tx -= horizontalSpacing;", "-\t\t}", "-\t\tif (topCenter != null && !topCenter.isDisposed()) {", "-\t\t\ttop = true;", "-\t\t\tx -= centerSize.x;", "-\t\t\ttopCenter.setBounds(x, y, centerSize.x, topHeight);", "-\t\t\tx -= horizontalSpacing;", "-\t\t}", "+\t\tPoint leftSize = new Point(0, 0);", "-\t\t\ttop = true;", "-\t\t\tleftSize = topLeft.computeSize(x - rect.x - marginWidth, topHeight);", "-\t\t\ttopLeft.setBounds(rect.x + marginWidth, y, leftSize.x, topHeight);", "+\t\t\tleftSize = topLeft.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\tif (top)y += topHeight + verticalSpacing;", "+\t\tPoint centerSize = new Point(0, 0);", "+\t\tif (topCenter != null && !topCenter.isDisposed()) {", "+\t\t\t centerSize = topCenter.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\t\t}", "+\t\tPoint rightSize = new Point(0, 0);", "+\t\tif (topRight != null && !topRight.isDisposed()) {", "+\t\t\t rightSize = topRight.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\t\t}", "+\t\t", "+\t\tint minTopWidth = leftSize.x + centerSize.x + rightSize.x + 2*marginWidth;", "+\t\tint count = -1;", "+\t\tif (leftSize.x > 0) count++;", "+\t\tif (centerSize.x > 0) count++;", "+\t\tif (rightSize.x > 0) count++;", "+\t\tif (count > 0) minTopWidth += count * horizontalSpacing;", "+\t\t", "+\t\tboolean top = false;", "+\t\tint x = rect.x + rect.width - marginWidth;", "+\t\t", "+\t\tif (separateTopCenter || minTopWidth > rect.width) {", "+\t\t\tint topHeight = Math.max(rightSize.y, leftSize.y);", "+\t\t\tif (topRight != null && !topRight.isDisposed()) {", "+\t\t\t\ttop = true;", "+\t\t\t\tx -= rightSize.x;", "+\t\t\t\ttopRight.setBounds(x, y, rightSize.x, topHeight);", "+\t\t\t\tx -= horizontalSpacing;", "+\t\t\t}", "+\t\t\tif (topLeft != null && !topLeft.isDisposed()) {", "+\t\t\t\ttop = true;", "+\t\t\t\tleftSize = topLeft.computeSize(x - rect.x - marginWidth, SWT.DEFAULT);", "+\t\t\t\ttopLeft.setBounds(rect.x + marginWidth, y, leftSize.x, topHeight);", "+\t\t\t}", "+\t\t\tif (top)y += topHeight + verticalSpacing;", "+\t\t\tif (topCenter != null && !topCenter.isDisposed()) {", "+\t\t\t\ttop = true;", "+\t\t\t\tcenterSize = topCenter.computeSize(rect.width - 2 * marginWidth, SWT.DEFAULT);", "+\t\t\t\ttopCenter.setBounds(rect.x + rect.width - marginWidth - centerSize.x, y, centerSize.x, centerSize.y);", "+\t\t\t\ty += centerSize.y + verticalSpacing;", "+\t\t\t}\t\t", "+\t\t} else {", "+\t\t\tint topHeight = Math.max(rightSize.y, Math.max(centerSize.y, leftSize.y));", "+\t\t\tif (topRight != null && !topRight.isDisposed()) {", "+\t\t\t\ttop = true;", "+\t\t\t\tx -= rightSize.x;", "+\t\t\t\ttopRight.setBounds(x, y, rightSize.x, topHeight);", "+\t\t\t\tx -= horizontalSpacing;", "+\t\t\t}", "+\t\t\tif (topCenter != null && !topCenter.isDisposed()) {", "+\t\t\t\ttop = true;", "+\t\t\t\tx -= centerSize.x;", "+\t\t\t\ttopCenter.setBounds(x, y, centerSize.x, topHeight);", "+\t\t\t\tx -= horizontalSpacing;", "+\t\t\t}", "+\t\t\tif (topLeft != null && !topLeft.isDisposed()) {", "+\t\t\t\ttop = true;", "+\t\t\t\tleftSize = topLeft.computeSize(x - rect.x - marginWidth, topHeight);", "+\t\t\t\ttopLeft.setBounds(rect.x + marginWidth, y, leftSize.x, topHeight);", "+\t\t\t}", "+\t\t\tif (top)y += topHeight + verticalSpacing;", "+\t\t}", "+\tmaxRect = new Rectangle(0, 0, 0, 0);", "+\tif (showMax && (topLeft != null || topRight != null || topCenter != null)) {", "+\t\tmaxRect = new Rectangle(borderLeft, y, rect.width - borderLeft - borderRight, 6);", "+\t\ty += 7;", "+\t}", "+\t", "-\t\t content.setBounds(rect.x + marginWidth, y, rect.width - 2 * marginWidth, rect.y + rect.height - y - marginHeight);", "+\t\tcontent.setBounds(rect.x + marginWidth, y, rect.width - 2 * marginWidth, rect.y + rect.height - y - marginHeight);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6113df84846a503478122af71ec68ff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/ViewForm2.java", "commitBeforeChange": "0400a55655308d3701672f788798c259d83fe3a0", "commitAfterChange": "8549b1db39ac8fd4bb7564c61e5b9a04b5efde6f", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " public void layout (boolean changed)", "signatureAfterChange": " public void layout (boolean changed)", "diff": ["-\t", "-\tPoint leftSize = new Point(0, 0);", "-\tif (topLeft != null && !topLeft.isDisposed()) {", "-\t\tleftSize = topLeft.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t}", "-\tPoint centerSize = new Point(0, 0);", "-\tif (topCenter != null && !topCenter.isDisposed()) {", "-\t\t centerSize = topCenter.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t}", "-\tPoint rightSize = new Point(0, 0);", "-\tif (topRight != null && !topRight.isDisposed()) {", "-\t\t rightSize = topRight.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t}", "-\t", "-\tint minTopWidth = leftSize.x + centerSize.x + rightSize.x + 2*marginWidth;", "-\tint count = -1;", "-\tif (leftSize.x > 0) count++;", "-\tif (centerSize.x > 0) count++;", "-\tif (rightSize.x > 0) count++;", "-\tif (count > 0) minTopWidth += count * horizontalSpacing;", "-\t\t", "-\tint x = rect.x + rect.width - marginWidth;", "-\t", "-\tboolean top = false;", "-\tif (separateTopCenter || minTopWidth > rect.width) {", "-\t\tint topHeight = Math.max(rightSize.y, leftSize.y);", "-\t\tif (topRight != null && !topRight.isDisposed()) {", "-\t\t\ttop = true;", "-\t\t\tx -= rightSize.x;", "-\t\t\ttopRight.setBounds(x, y, rightSize.x, topHeight);", "-\t\t\tx -= horizontalSpacing;", "-\t\t}", "+\t\t", "+\tif (showMin && minimized) {", "-\t\t\ttop = true;", "-\t\t\tleftSize = topLeft.computeSize(x - rect.x - marginWidth, SWT.DEFAULT);", "-\t\t\ttopLeft.setBounds(rect.x + marginWidth, y, leftSize.x, topHeight);", "+\t\t\ttopLeft.setBounds(OFFSCREEN, OFFSCREEN, 0,0);", "-\t\tif (top)y += topHeight + verticalSpacing;", "-\t\t\ttop = true;", "-\t\t\tcenterSize = topCenter.computeSize(rect.width - 2 * marginWidth, SWT.DEFAULT);", "-\t\t\ttopCenter.setBounds(rect.x + rect.width - marginWidth - centerSize.x, y, centerSize.x, centerSize.y);", "-\t\t\ty += centerSize.y + verticalSpacing;", "-\t\t}\t\t", "+\t\t\t topCenter.setBounds(OFFSCREEN, OFFSCREEN, 0,0);", "+\t\t}", "+\t\tif (topRight != null && !topRight.isDisposed()) {", "+\t\t\t topRight.setBounds(OFFSCREEN, OFFSCREEN, 0,0);", "+\t\t}", "-\t\tint topHeight = Math.max(rightSize.y, Math.max(centerSize.y, leftSize.y));", "-\t\tif (topRight != null && !topRight.isDisposed()) {", "-\t\t\ttop = true;", "-\t\t\tx -= rightSize.x;", "-\t\t\ttopRight.setBounds(x, y, rightSize.x, topHeight);", "-\t\t\tx -= horizontalSpacing;", "-\t\t}", "-\t\tif (topCenter != null && !topCenter.isDisposed()) {", "-\t\t\ttop = true;", "-\t\t\tx -= centerSize.x;", "-\t\t\ttopCenter.setBounds(x, y, centerSize.x, topHeight);", "-\t\t\tx -= horizontalSpacing;", "-\t\t}", "+\t\tPoint leftSize = new Point(0, 0);", "-\t\t\ttop = true;", "-\t\t\tleftSize = topLeft.computeSize(x - rect.x - marginWidth, topHeight);", "-\t\t\ttopLeft.setBounds(rect.x + marginWidth, y, leftSize.x, topHeight);", "+\t\t\tleftSize = topLeft.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "-\t\tif (top)y += topHeight + verticalSpacing;", "+\t\tPoint centerSize = new Point(0, 0);", "+\t\tif (topCenter != null && !topCenter.isDisposed()) {", "+\t\t\t centerSize = topCenter.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\t\t}", "+\t\tPoint rightSize = new Point(0, 0);", "+\t\tif (topRight != null && !topRight.isDisposed()) {", "+\t\t\t rightSize = topRight.computeSize(SWT.DEFAULT, SWT.DEFAULT);", "+\t\t}", "+\t\t", "+\t\tint minTopWidth = leftSize.x + centerSize.x + rightSize.x + 2*marginWidth;", "+\t\tint count = -1;", "+\t\tif (leftSize.x > 0) count++;", "+\t\tif (centerSize.x > 0) count++;", "+\t\tif (rightSize.x > 0) count++;", "+\t\tif (count > 0) minTopWidth += count * horizontalSpacing;", "+\t\t", "+\t\tboolean top = false;", "+\t\tint x = rect.x + rect.width - marginWidth;", "+\t\t", "+\t\tif (separateTopCenter || minTopWidth > rect.width) {", "+\t\t\tint topHeight = Math.max(rightSize.y, leftSize.y);", "+\t\t\tif (topRight != null && !topRight.isDisposed()) {", "+\t\t\t\ttop = true;", "+\t\t\t\tx -= rightSize.x;", "+\t\t\t\ttopRight.setBounds(x, y, rightSize.x, topHeight);", "+\t\t\t\tx -= horizontalSpacing;", "+\t\t\t}", "+\t\t\tif (topLeft != null && !topLeft.isDisposed()) {", "+\t\t\t\ttop = true;", "+\t\t\t\tleftSize = topLeft.computeSize(x - rect.x - marginWidth, SWT.DEFAULT);", "+\t\t\t\ttopLeft.setBounds(rect.x + marginWidth, y, leftSize.x, topHeight);", "+\t\t\t}", "+\t\t\tif (top)y += topHeight + verticalSpacing;", "+\t\t\tif (topCenter != null && !topCenter.isDisposed()) {", "+\t\t\t\ttop = true;", "+\t\t\t\tcenterSize = topCenter.computeSize(rect.width - 2 * marginWidth, SWT.DEFAULT);", "+\t\t\t\ttopCenter.setBounds(rect.x + rect.width - marginWidth - centerSize.x, y, centerSize.x, centerSize.y);", "+\t\t\t\ty += centerSize.y + verticalSpacing;", "+\t\t\t}\t\t", "+\t\t} else {", "+\t\t\tint topHeight = Math.max(rightSize.y, Math.max(centerSize.y, leftSize.y));", "+\t\t\tif (topRight != null && !topRight.isDisposed()) {", "+\t\t\t\ttop = true;", "+\t\t\t\tx -= rightSize.x;", "+\t\t\t\ttopRight.setBounds(x, y, rightSize.x, topHeight);", "+\t\t\t\tx -= horizontalSpacing;", "+\t\t\t}", "+\t\t\tif (topCenter != null && !topCenter.isDisposed()) {", "+\t\t\t\ttop = true;", "+\t\t\t\tx -= centerSize.x;", "+\t\t\t\ttopCenter.setBounds(x, y, centerSize.x, topHeight);", "+\t\t\t\tx -= horizontalSpacing;", "+\t\t\t}", "+\t\t\tif (topLeft != null && !topLeft.isDisposed()) {", "+\t\t\t\ttop = true;", "+\t\t\t\tleftSize = topLeft.computeSize(x - rect.x - marginWidth, topHeight);", "+\t\t\t\ttopLeft.setBounds(rect.x + marginWidth, y, leftSize.x, topHeight);", "+\t\t\t}", "+\t\t\tif (top)y += topHeight + verticalSpacing;", "+\t\t}", "+\tminRect = new Rectangle(0, 0, 0, 0);", "+\tif (showMin && (topLeft != null || topRight != null || topCenter != null)) {", "+\t\tminRect = new Rectangle(borderLeft, y, rect.width - borderLeft - borderRight, 6);", "+\t\ty += 7;", "+\t}", "+\t", "-\t\t content.setBounds(rect.x + marginWidth, y, rect.width - 2 * marginWidth, rect.y + rect.height - y - marginHeight);", "+\t\tcontent.setBounds(rect.x + marginWidth, y, rect.width - 2 * marginWidth, rect.y + rect.height - y - marginHeight);"]}], "num": 4426}
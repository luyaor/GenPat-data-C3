{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "294757a23211f15c5090b282f5443d57", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ee97335d0ffca060091de1b99a07c6cd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "d76ee7b6dcced78221a4c78dccee0ae41f3201c3", "commitAfterChange": "9213cc7759276dfbb4dc068628f524b49e86b501", "methodNumberBeforeChange": 23, "methodNumberAfterChange": 23, "signatureBeforeChange": " protected void release ()", "signatureAfterChange": " protected void release ()", "diff": ["-\tif (objects != null) {", "-\t\tfor (int i = 0; i < objects.length; i++) {", "-\t\t\tif (objects[i] != null) ((Resource)objects[i]).dispose();", "-\t\t}", "-\t}", "-\tif (TRACK & objects != null) {", "-\t\tfor (int i = 0; i < objects.length; i++) {", "-\t\t\tif (objects[i] != null) {", "-\t\t\t\tSystem.err.println(objects[i]);", "-\t\t\t\terrors[i].printStackTrace();", "+\tif (tracking) {", "+\t\tsynchronized (trackingLock) {", "+\t\t\tif (objects != null) {", "+\t\t\t\tfor (int i = 0; i < objects.length; i++) {", "+\t\t\t\t\tif (objects[i] != null) ((Resource)objects[i]).dispose();", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (TRACK & objects != null) {", "+\t\t\t\tfor (int i = 0; i < objects.length; i++) {", "+\t\t\t\t\tif (objects[i] != null) {", "+\t\t\t\t\t\tSystem.err.println(objects[i]);", "+\t\t\t\t\t\terrors[i].printStackTrace();", "+\t\t\t\t\t}", "+\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a61cada504ca0ddbe8f92c0d7f791c43", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/internal/image/PngHuffmanTable.java", "commitBeforeChange": "c8ee37b226ec26ccc7ca503d438005c23cc78913", "commitAfterChange": "47dc3f8abc95e84166365502a0f0491889cd46ca", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " \t private void generateTable(int[] lengths)", "signatureAfterChange": " \t private void generateTable(int[] lengths)", "diff": ["-\t// Sort the values. Primary key is code size. Secondary key is value.", "-\tfor (int i = 0; i < lengths.length - 1; i++) {", "-\t\tfor (int j = i + 1; j < lengths.length; j++) {", "-\t\t\tif (lengths[j] < lengths[i]", "-\t\t\t\t|| (lengths[j] == lengths[i]", "-\t\t\t\t&& codeValues[j] < codeValues[i]))", "-\t\t\t{", "-\t\t\t\tint tmp;", "-\t\t\t\ttmp = lengths[j];", "-\t\t\t\tlengths[j] = lengths[i];", "-\t\t\t\tlengths[i] = tmp;", "-\t\t\t\ttmp = codeValues[j];", "-\t\t\t\tcodeValues[j] = codeValues[i];", "-\t\t\t\tcodeValues[i] = tmp;", "+\t// Sort the values using shellsort. Primary key is code size. Secondary key is value.", "+\tint codeValuesTemp;", "+\tfor (int k = 0; k < 16; k++) {", "+\t\tfor (int h = incs[k], i = h; i < lengths.length; i++) {", "+\t\t\tint v = lengths[i];", "+\t\t\tcodeValuesTemp = codeValues[i];", "+\t\t\tint j = i;", "+\t\t\twhile (j >= h && (lengths[j - h] > v || (lengths[j - h] == v && codeValues[j - h] > codeValuesTemp))) {", "+\t\t\t\tlengths[j] = lengths[j - h];", "+\t\t\t\tcodeValues[j] = codeValues[j - h];", "+\t\t\t\tj -= h;", "+\t\t\tlengths[j] = v;", "+\t\t\tcodeValues[j] = codeValuesTemp;"]}], "num": 47444}
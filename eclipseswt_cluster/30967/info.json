{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3e85cfd38392e941f8f5117b460556ca", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a64da055075c204298be69099811af6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "65777ce3d2a96099cf20830ff9a4bd6c4c860e8f", "commitAfterChange": "ba852d737724ee92cb82b3435acad91de5d9d6c7", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 63, "signatureBeforeChange": " void shape (final int hdc, final StyleItem run)", "signatureAfterChange": " void shape (final int hdc, final StyleItem run)", "diff": ["-\tif (run.style != null && run.style.metrics != null) {", "-\t\tGlyphMetrics metrics = run.style.metrics;", "-\t\t/*", "-\t\t*  Bug in Windows, on a Japanese machine, Uniscribe returns glyphcount", "-\t\t*  equals zero for FFFC (possibly other unicode code points), the fix", "-\t\t*  is to make sure the glyph is at least one pixel wide.", "-\t\t*/", "-\t\trun.width = metrics.width * Math.max (1, run.glyphCount);", "-\t\trun.ascent = metrics.ascent;", "-\t\trun.descent = metrics.descent;", "-\t\trun.leading = 0;", "+\trun.width = abc[0] + abc[1] + abc[2];", "+\tTextStyle style = run.style;", "+\tif (style != null) {", "+\t\tOUTLINETEXTMETRIC lotm = null;", "+\t\tif (style.underline || style.strikeout) {", "+\t\t\tlotm = OS.IsUnicode ? (OUTLINETEXTMETRIC)new OUTLINETEXTMETRICW() : new OUTLINETEXTMETRICA();", "+\t\t\tif (OS.GetOutlineTextMetrics(hdc, OUTLINETEXTMETRIC.sizeof, lotm) == 0) {", "+\t\t\t\tlotm = null;", "+\t\t\t}", "+\t\t}", "+\t\tif (style.metrics != null) {", "+\t\t\tGlyphMetrics metrics = style.metrics;", "+\t\t\t/*", "+\t\t\t *  Bug in Windows, on a Japanese machine, Uniscribe returns glyphcount", "+\t\t\t *  equals zero for FFFC (possibly other unicode code points), the fix", "+\t\t\t *  is to make sure the glyph is at least one pixel wide.", "+\t\t\t */", "+\t\t\trun.width = metrics.width * Math.max (1, run.glyphCount);", "+\t\t\trun.ascent = metrics.ascent;", "+\t\t\trun.descent = metrics.descent;", "+\t\t\trun.leading = 0;", "+\t\t} else {", "+\t\t\tTEXTMETRIC lptm = null;", "+\t\t\tif (lotm != null) {", "+\t\t\t\tlptm = OS.IsUnicode ? (TEXTMETRIC)((OUTLINETEXTMETRICW)lotm).otmTextMetrics : ((OUTLINETEXTMETRICA)lotm).otmTextMetrics;", "+\t\t\t} else {", "+\t\t\t\tlptm = OS.IsUnicode ? (TEXTMETRIC)new TEXTMETRICW() : new TEXTMETRICA();", "+\t\t\t\tOS.GetTextMetrics(hdc, lptm);", "+\t\t\t}", "+\t\t\trun.ascent = lptm.tmAscent;", "+\t\t\trun.descent = lptm.tmDescent;", "+\t\t\trun.leading = lptm.tmInternalLeading;", "+\t\t}", "+\t\tif (lotm != null) {", "+\t\t\trun.underlinePos = lotm.otmsUnderscorePosition;", "+\t\t\trun.underlineThickness = lotm.otmsUnderscoreSize;", "+\t\t\trun.strikeoutPos = lotm.otmsStrikeoutPosition;", "+\t\t\trun.strikeoutThickness = lotm.otmsStrikeoutSize;", "+\t\t} else {", "+\t\t\trun.underlinePos = 1;", "+\t\t\trun.underlineThickness = 1;", "+\t\t\trun.strikeoutPos = run.ascent / 2;", "+\t\t\trun.strikeoutThickness = 1;", "+\t\t}", "+\t\trun.ascent += style.rise;", "+\t\trun.descent -= style.rise;", "-\t\trun.width = abc[0] + abc[1] + abc[2];", "-\t}", "-\tif (run.style != null) {", "-\t\trun.ascent += run.style.rise;", "-\t\trun.descent -= +run.style.rise;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1df59236a18a442d08f3a9c9176ce691", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "207de25d5374228c5bb4d27e6f86860848b0717b", "commitAfterChange": "6593dcf4066d4af124ce37d44831175f0d2999e2", "methodNumberBeforeChange": 114, "methodNumberAfterChange": 115, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["+\t\t\tint index = 0;", "+\t\t\tif (hwndHeader != 0) {", "+\t\t\t\tindex = OS.SendMessage (hwndHeader, OS.HDM_ORDERTOINDEX, 0, 0);", "+\t\t\t}", "-\t\t\t\tString string = item.text;", "-\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "-\t\t\t\tint byteCount = Math.min (buffer.length (), lptvdi.cchTextMax - 1) * TCHAR.sizeof;", "-\t\t\t\tOS.MoveMemory (lptvdi.pszText, buffer, byteCount);", "-\t\t\t\tOS.MoveMemory (lptvdi.pszText + byteCount, new byte [TCHAR.sizeof], TCHAR.sizeof);", "-\t\t\t\tlptvdi.cchTextMax = Math.min (lptvdi.cchTextMax, string.length () + 1);", "+\t\t\t\tString string = null;", "+\t\t\t\tif (index == 0) {", "+\t\t\t\t\tstring = item.text;", "+\t\t\t\t} else {", "+\t\t\t\t\tString [] strings  = item.strings;", "+\t\t\t\t\tif (strings != null) string = strings [index];", "+\t\t\t\t}", "+\t\t\t\tif (string != null) {", "+\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "+\t\t\t\t\tint byteCount = Math.min (buffer.length (), lptvdi.cchTextMax - 1) * TCHAR.sizeof;", "+\t\t\t\t\tOS.MoveMemory (lptvdi.pszText, buffer, byteCount);", "+\t\t\t\t\tOS.MoveMemory (lptvdi.pszText + byteCount, new byte [TCHAR.sizeof], TCHAR.sizeof);", "+\t\t\t\t\tlptvdi.cchTextMax = Math.min (lptvdi.cchTextMax, string.length () + 1);", "+\t\t\t\t}", "-\t\t\t\tImage image = item.image;", "+\t\t\t\tImage image = null;", "+\t\t\t\tif (index == 0) {", "+\t\t\t\t\timage = item.image;", "+\t\t\t\t} else {", "+\t\t\t\t\tImage [] images  = item.images;", "+\t\t\t\t\tif (images != null) image = images [index];", "+\t\t\t\t}", "-\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, 0, hdItem);", "+\t\t\t\t\t\t\t\tint index = OS.SendMessage (hwndHeader, OS.HDM_ORDERTOINDEX, 0, 0);", "+\t\t\t\t\t\t\t\tOS.SendMessage (hwndHeader, OS.HDM_GETITEM, index, hdItem);", "-\t\t\t\t\t\t\t\tImage image = item.images != null ? item.images [index] : null;", "+\t\t\t\t\t\t\t\tImage image = null;", "+\t\t\t\t\t\t\t\tif (index == 0) {", "+\t\t\t\t\t\t\t\t\timage = item.image;", "+\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\tImage [] images  = item.images;", "+\t\t\t\t\t\t\t\t\tif (images != null) image = images [index];", "+\t\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\t", "-\t\t\t\t\t\t\t\t\tif (item.strings != null && item.strings [index] != null) {", "+\t\t\t\t\t\t\t\t\tString string = null;", "+\t\t\t\t\t\t\t\t\tif (index == 0) {", "+\t\t\t\t\t\t\t\t\t\tstring = item.text;", "+\t\t\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\t\t\tString [] strings  = item.strings;", "+\t\t\t\t\t\t\t\t\t\tif (strings != null) string = strings [index];", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\tif (string != null) {", "-\t\t\t\t\t\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), item.strings [index], false);", "+\t\t\t\t\t\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "50ef89a3fd003cd0b8c2e4aca713ce4d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "f699db6750189f737837a9f6195bd87512c2c588", "commitAfterChange": "ece89cfb21571317fb6c86186d3424edb03c00a2", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 140, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "-\t\t\t\t\tint byteCount = Math.min (buffer.length (), plvfi.cchTextMax - 1) * TCHAR.sizeof;", "-\t\t\t\t\tOS.MoveMemory (plvfi.pszText, buffer, byteCount);", "-\t\t\t\t\tOS.MoveMemory (plvfi.pszText + byteCount, new byte [TCHAR.sizeof], TCHAR.sizeof);", "-\t\t\t\t\tplvfi.cchTextMax = Math.min (plvfi.cchTextMax, string.length () + 1);", "+", "+\t\t\t\t\tint length = Math.min (string.length (), plvfi.cchTextMax - 1);", "+\t\t\t\t\tchar [] chars = new char [length + 1];", "+\t\t\t\t\tstring.getChars (0, length, chars, 0);", "+\t\t\t\t\tif (OS.IsUnicode) {", "+\t\t\t\t\t\tOS.MoveMemory (plvfi.pszText, chars, chars.length * 2);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\t//TODO - UNTESTED", "+\t\t\t\t\t\tOS.WideCharToMultiByte (getCodePage (), 0, chars, chars.length, plvfi.pszText, plvfi.cchTextMax, null, null);", "+\t\t\t\t\t\tOS.MoveMemory (plvfi.pszText + plvfi.cchTextMax - 1, new byte [1], 1);", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+//\t\t\t\t\tTCHAR buffer = new TCHAR (getCodePage (), string, false);", "+//\t\t\t\t\tint byteCount = Math.min (buffer.length (), plvfi.cchTextMax - 1) * TCHAR.sizeof;", "+//\t\t\t\t\tOS.MoveMemory (plvfi.pszText, buffer, byteCount);", "+//\t\t\t\t\tOS.MoveMemory (plvfi.pszText + byteCount, new byte [TCHAR.sizeof], TCHAR.sizeof);", "+//\t\t\t\t\tplvfi.cchTextMax = Math.min (plvfi.cchTextMax, string.length () + 1);", "+\t\t\tboolean move = false;", "-\t\t\t\tif (image != null) plvfi.iImage = imageIndex (image);", "+\t\t\t\tif (image != null) {", "+\t\t\t\t\tplvfi.iImage = imageIndex (image);", "+\t\t\t\t\tmove = true;", "+\t\t\t\t}", "+\t\t\t\t\tmove = true;", "-\t\t\t\tif (plvfi.iSubItem == 0) plvfi.iIndent = item.imageIndent;", "+\t\t\t\tif (plvfi.iSubItem == 0) {", "+\t\t\t\t\tplvfi.iIndent = item.imageIndent;", "+\t\t\t\t\tmove = true;", "+\t\t\t\t}", "-\t\t\tOS.MoveMemory (lParam, plvfi, NMLVDISPINFO.sizeof);", "+\t\t\tif (move) OS.MoveMemory (lParam, plvfi, NMLVDISPINFO.sizeof);"]}], "num": 30967}
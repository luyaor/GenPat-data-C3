{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "6a5e47488583b25a8cf15b4d5070fc73", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e0ef22d46e5edb47d3b869e8d9b0a1e2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "91d12e7fb40e96dc6324f0e393e3f0f025792ace", "commitAfterChange": "14be55c4cbe46a16b7300921fd246420e99a1bad", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 59, "signatureBeforeChange": "  LRESULT sendMouseDownEvent (int type, int button, int msg, int wParam, int lParam)", "signatureAfterChange": "  LRESULT sendMouseDownEvent (int type, int button, int msg, int wParam, int lParam)", "diff": ["-\t* for the item will be set.  These bits are used when", "-\t* the table is multi-select to issue the selection", "-\t* event.  If the user did not click on an item, then", "-\t* set focus to the table so that it will come to the", "-\t* front and take focus in the work around below.", "+\t* for the item will be set.  If the user did not click on", "+\t* an item, then set focus to the table so that it will", "+\t* come to the front and take focus in the work around", "+\t* below.", "-\t* to detect the case when an item is reselected and issue", "-\t* the notification.", "-\t* ", "-\t* NOTE: This code runs for multi-select as well, ignoring", "-\t* the selection that is issed from WM_NOTIFY.", "+\t* to detect the case when an item is mark it as selected.", "-\tboolean wasSelected = false;", "-\t\twasSelected = (lvItem.state & OS.LVIS_SELECTED) != 0;", "-\t\tif (wasSelected) ignoreSelect = true;", "+\t\tif ((lvItem.state & OS.LVIS_SELECTED) != 0) wasSelected = true;", "-\tif (wasSelected) {", "-\t\tignoreSelect = false;", "-\t\tEvent event = new Event ();", "-\t\tevent.item = _getItem (pinfo.iItem);", "-\t\tpostEvent (SWT.Selection, event);", "-\t}", "-\t\t\tmouseDown = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "3e852929adf966ea5b45ce0157e7273e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT WebKit/gtk/org/eclipse/swt/browser/WebKit.java", "commitBeforeChange": "aca4917418214d96ac9b7a43bec740f7e4be9d3a", "commitAfterChange": "9016fc6598a59f4dfa82d3b23dcc770ade756add", "methodNumberBeforeChange": 45, "methodNumberAfterChange": 45, "signatureBeforeChange": "  public boolean setUrl (String url, String postData, String[] headers)", "signatureAfterChange": "  public boolean setUrl (String url, String postData, String[] headers)", "diff": ["+", "-\t* WebKit attempts to open the exact url string that is given to it, and", "-\t* will not infer an http protocol if it's not specified.  Detect the case", "-\t* of a non-local file and prepend the http:// protocol if it's needed.   ", "+\t* WebKitGTK attempts to open the exact url string that is passed to it and", "+\t* will not infer a protocol if it's not specified.  Detect the case of an", "+\t* invalid URL string and try to fix it by prepending an appropriate protocol.", "-\tif (url.charAt (0) != SEPARATOR_FILE) {", "-\t\t/* not a local file */", "+\ttry {", "+\t\tnew URL(url);", "+\t} catch (MalformedURLException e) {", "+\t\tString testUrl = null;", "+\t\tif (url.charAt (0) == SEPARATOR_FILE) {", "+\t\t\t/* appears to be a local file */", "+\t\t\ttestUrl = PROTOCOL_FILE + url; ", "+\t\t} else {", "+\t\t\ttestUrl = PROTOCOL_HTTP + url;", "+\t\t}", "-\t\t\tnew URL(url);", "-\t\t} catch (MalformedURLException e) {", "-\t\t\turl = PROTOCOL_HTTP + url;", "+\t\t\tnew URL (testUrl);", "+\t\t\turl = testUrl;\t\t/* adding the protocol made the url valid */", "+\t\t} catch (MalformedURLException e2) {", "+\t\t\t/* adding the protocol did not make the url valid, so do nothing */"]}], "num": 33438}
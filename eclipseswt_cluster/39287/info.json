{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b503a80327b5c73af60165284853c444", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "754177bf9d3acc69523183f16c433e29", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Cursor.java", "commitBeforeChange": "f664172a0e735d142051b2da26600fbd256e07a6", "commitAfterChange": "894e6297387f95786ffea31acd399cd5951b0afc", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Cursor(Device device, ImageData source, ImageData mask, int hotspotX, int hotspotY)", "signatureAfterChange": " public Cursor(Device device, ImageData source, ImageData mask, int hotspotX, int hotspotY)", "diff": ["+", "+\t/* Find the first non transparent pixel if cursor bigger than 16x16. */", "+\tint width = source.width;", "+\tint height = source.height;", "+\tint minX = 0, minY = 0;", "+\tif (width > 16 || height > 16) {", "+\t\tminX = width;", "+\t\tminY = height;", "+\t\tint maxX = 0, maxY = 0;", "+\t\tfor (int y = 0; y < height; y++) {", "+\t\t\tfor (int x = 0; x < width; x++) {", "+\t\t\t\tif (!(source.getPixel(x, y) == 1 && mask.getPixel(x, y) == 0)) {", "+\t\t\t\t\tminX = Math.min(minX, x);", "+\t\t\t\t\tminY = Math.min(minY, y);", "+\t\t\t\t\tmaxX = Math.max(maxX, x);", "+\t\t\t\t\tmaxY = Math.max(maxY, y);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\twidth = maxX - minX + 1;", "+\t\theight = maxY - minY + 1;", "+\t\t", "+\t\t/* Stretch cursor if still bigger than 16x16. */", "+\t\tif (width > 16 || height > 16) {", "+\t\t\tint newWidth = Math.min(width, 16);", "+\t\t\tint newHeight = Math.min(height, 16);", "+\t\t\tImageData newSource =", "+\t\t\t\tnew ImageData(newWidth, newHeight, source.depth, source.palette,", "+\t\t\t\t\t1, null, 0, null, null, -1, -1, source.type,", "+\t\t\t\t\tsource.x, source.y, source.disposalMethod, source.delayTime);", "+\t\t\tImageData newMask = new ImageData(newWidth, newHeight, mask.depth,", "+\t\t\t\t\tmask.palette, 1, null, 0, null, null, -1, -1, mask.type,", "+\t\t\t\t\tmask.x, mask.y, mask.disposalMethod, mask.delayTime);", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,", "+\t\t\t\tsource.data, source.depth, source.bytesPerLine, source.getByteOrder(), minX, minY, width, height, null, null, null,", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0, minX, minY,", "+\t\t\t\tnewSource.data, newSource.depth, newSource.bytesPerLine, newSource.getByteOrder(), 0, 0, newWidth, newHeight, null, null, null,", "+\t\t\t\tfalse, false);", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,", "+\t\t\t\tmask.data, mask.depth, mask.bytesPerLine, mask.getByteOrder(), minX, minY, width, height, null, null, null,", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0, minX, minY,", "+\t\t\t\tnewMask.data, newMask.depth, newMask.bytesPerLine, newMask.getByteOrder(), 0, 0, newWidth, newHeight, null, null, null,", "+\t\t\t\tfalse, false);", "+\t\t\twidth = newWidth;", "+\t\t\theight = newHeight;", "+\t\t\tminX = minY = 0;", "+\t\t\tsource = newSource;", "+\t\t\tmask = newMask;", "+\t\t}", "+\t}", "+", "-\tint width = Math.min(16, source.width);", "-\tint height = Math.min(16, source.height);", "-\tfor (int y= 0; y < height; y++) {", "+\tfor (int y = 0; y < height; y++) {", "-\t\t\tif (source.getPixel(x, y) == 0) {", "+\t\t\tif (source.getPixel(minX + x, minY + y) == 0) {", "-\t\t\t\tif (mask.getPixel(x, y) == 0) d |= bit;", "-\t\t\t} else if (mask.getPixel(x, y) != 0) {", "+\t\t\t\tif (mask.getPixel(minX + x, minY + y) == 0) d |= bit;", "+\t\t\t} else if (mask.getPixel(minX + x, minY + y) != 0) {", "-\tcursor.hotSpot_h = (short)Math.min(16, hotspotX);", "-\tcursor.hotSpot_v = (short)Math.min(16, hotspotY);", "+\tcursor.hotSpot_h = (short)Math.max(0, Math.min(15, hotspotY - minX));", "+\tcursor.hotSpot_v = (short)Math.max(0, Math.min(15, hotspotY - minY));"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc67751ae6ec2def1287aa94c8a9a403", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Cursor.java", "commitBeforeChange": "f664172a0e735d142051b2da26600fbd256e07a6", "commitAfterChange": "894e6297387f95786ffea31acd399cd5951b0afc", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public Cursor(Device device, ImageData source, int hotspotX, int hotspotY)", "signatureAfterChange": "  public Cursor(Device device, ImageData source, int hotspotX, int hotspotY)", "diff": ["+\t/* Find the first non transparent pixel if cursor bigger than 16x16. */", "+\tint width = source.width;", "+\tint height = source.height;", "+\tint minX = 0, minY = 0;", "+\tif (width > 16 || height > 16) {", "+\t\tminX = width;", "+\t\tminY = height;", "+\t\tint maxX = 0, maxY = 0;", "+\t\tfor (int y = 0; y < height; y++) {", "+\t\t\tfor (int x = 0; x < width; x++) {", "+\t\t\t\tif (!(source.getPixel(x, y) == 1 && mask.getPixel(x, y) == 0)) {", "+\t\t\t\t\tminX = Math.min(minX, x);", "+\t\t\t\t\tminY = Math.min(minY, y);", "+\t\t\t\t\tmaxX = Math.max(maxX, x);", "+\t\t\t\t\tmaxY = Math.max(maxY, y);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\t\twidth = maxX - minX + 1;", "+\t\theight = maxY - minY + 1;", "+\t\t", "+\t\t/* Stretch cursor if still bigger than 16x16. */", "+\t\tif (width > 16 || height > 16) {", "+\t\t\tint newWidth = Math.min(width, 16);", "+\t\t\tint newHeight = Math.min(height, 16);", "+\t\t\tImageData newSource =", "+\t\t\t\tnew ImageData(newWidth, newHeight, source.depth, source.palette,", "+\t\t\t\t\t1, null, 0, null, null, -1, -1, source.type,", "+\t\t\t\t\tsource.x, source.y, source.disposalMethod, source.delayTime);", "+\t\t\tImageData newMask = new ImageData(newWidth, newHeight, mask.depth,", "+\t\t\t\t\tmask.palette, 1, null, 0, null, null, -1, -1, mask.type,", "+\t\t\t\t\tmask.x, mask.y, mask.disposalMethod, mask.delayTime);", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,", "+\t\t\t\tsource.data, source.depth, source.bytesPerLine, source.getByteOrder(), minX, minY, width, height, null, null, null,", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0, minX, minY,", "+\t\t\t\tnewSource.data, newSource.depth, newSource.bytesPerLine, newSource.getByteOrder(), 0, 0, newWidth, newHeight, null, null, null,", "+\t\t\t\tfalse, false);", "+\t\t\tImageData.blit(ImageData.BLIT_SRC,", "+\t\t\t\tmask.data, mask.depth, mask.bytesPerLine, mask.getByteOrder(), minX, minY, width, height, null, null, null,", "+\t\t\t\tImageData.ALPHA_OPAQUE, null, 0, minX, minY,", "+\t\t\t\tnewMask.data, newMask.depth, newMask.bytesPerLine, newMask.getByteOrder(), 0, 0, newWidth, newHeight, null, null, null,", "+\t\t\t\tfalse, false);", "+\t\t\twidth = newWidth;", "+\t\t\theight = newHeight;", "+\t\t\tminX = minY = 0;", "+\t\t\tsource = newSource;", "+\t\t\tmask = newMask;", "+\t\t}", "+\t}", "+", "-\tint width = Math.min(16, source.width);", "-\tint height = Math.min(16, source.height);", "-\t\t\tif (source.getPixel(x, y) == 0) {", "-\t\t\t\tif (mask.getPixel(x, y) != 0) {", "+\t\t\tif (source.getPixel(x + minX, y + minY) == 0) {", "+\t\t\t\tif (mask.getPixel(x + minX, y + minY) != 0) {", "-\t\t\t\tif (mask.getPixel(x, y) != 0) m |= bit;", "+\t\t\t\tif (mask.getPixel(x + minX, y + minY) != 0) m |= bit;", "-\tcursor.hotSpot_h = (short)Math.min(16, hotspotX);", "-\tcursor.hotSpot_v = (short)Math.min(16, hotspotY);", "+\tcursor.hotSpot_h = (short)Math.max(0, Math.min(15, hotspotY - minX));", "+\tcursor.hotSpot_v = (short)Math.max(0, Math.min(15, hotspotY - minY));"]}], "num": 39287}
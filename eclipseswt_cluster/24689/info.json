{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "96e6db89224b7754dad998f57c360e6b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8c6cd741ee4556604132db1f15eeb15e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "dde13177ef0a600781280d0bc89a30c386da44e5", "commitAfterChange": "b00aa96ab6b0637a41597c9bf39ef65afefbd6ff", "methodNumberBeforeChange": 62, "methodNumberAfterChange": 63, "signatureBeforeChange": "  \tprivate boolean focus(boolean doClip, Rect bounds)", "signatureAfterChange": "  \tprivate boolean focus(boolean doClip, Rect bounds)", "diff": ["-\t\tint dx= 0, dy= 0;", "+\t\tint dx= 0;", "+\t\tint dy= 0;", "-\t\t\tOS.SetPt(p, (short)-dx, (short)-dy);", "+\t\t\tp.h= (short)-dx;", "+\t\t\tp.v= (short)-dy;", "-\t\t// calculate new clip based on the controls bound and GC clipping region", "+\t\t// calculate new clip based on the Control's bound and GC clipping region", "-\t\t\tMacUtil.getVisibleRegion(data.controlHandle, result, true);", "-\t\t\tOS.OffsetRgn(result, (short)-dx, (short)-dy);", "-\t\t\t// clip against damage ", "-\t\t\tif (fDamageRgn != 0) {", "-\t\t\t\tint dRgn= OS.NewRgn();", "-\t\t\t\tOS.CopyRgn(fDamageRgn, dRgn);", "-\t\t\t\tOS.SectRgn(result, dRgn, result);", "+\t\t\tif (fDamageRgn == 0) {", "+\t\t\t\t// since we've got no damage region", "+\t\t\t\t// we assume that focus has been called for direct drawing.", "+\t\t\t\t// We need to calculate the visible region of the control.", "+\t\t\t\tMacUtil.getVisibleRegion(data.controlHandle, result, fClipAgainstChildren); ", "+\t\t\t\tOS.OffsetRgn(result, (short)-dx, (short)-dy);", "+\t\t\t} else {", "+\t\t\t\t// the damage area takes the visible region of the Control into account", "+\t\t\t\tOS.CopyRgn(fDamageRgn, result);", "-\t\t\tif (data.clipRgn != 0) {", "+\t\t\tif (data.clipRgn != 0)", "-\t\t\t}", "+\t\t\t", "+\t\t\t// optionally extract clip bounds", "+\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fddcdde6a600f76cf04ebdf71c7eadd3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "e8bef9ab14352e9698addc0faf2065aa34cba25d", "commitAfterChange": "a2de40824747e79e35dcb436467af99e9221d7c5", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": " void setClientWindow (int window)", "signatureAfterChange": " void setClientWindow (int window)", "diff": ["-\t\tclientWindow = window;", "-\t\tsendClientEvent (0, OS.XEMBED_EMBEDDED_NOTIFY, 0, 0, 0);", "-\t\tOS.XtRegisterDrawable (xDisplay, clientWindow, handle);", "-\t\tOS.XSelectInput (xDisplay, clientWindow, OS.PropertyChangeMask);", "-\t\tupdateMapped ();\t\t", "-\t\tresizeClientWindow ();", "-\t\tShell shell = getShell ();", "-\t\tif (shell == display.getActiveShell ()) {", "-\t\t\tshell.bringToTop (true);", "-\t\t\tsendClientEvent (0, OS.XEMBED_WINDOW_ACTIVATE, 0, 0, 0);", "-\t\t\tif (this == display.getFocusControl ()) {", "-\t\t\t\tsendClientEvent (0, OS.XEMBED_FOCUS_IN, OS.XEMBED_FOCUS_CURRENT, 0, 0);", "+\t\tif (clientWindow == 0) {", "+\t\t\tclientWindow = window;", "+\t\t\tsendClientEvent (0, OS.XEMBED_EMBEDDED_NOTIFY, 0, 0, 0);", "+\t\t\tOS.XtRegisterDrawable (xDisplay, clientWindow, handle);", "+\t\t\tOS.XSelectInput (xDisplay, clientWindow, OS.PropertyChangeMask);", "+\t\t\tupdateMapped ();\t\t", "+\t\t\tresizeClientWindow ();", "+\t\t\tShell shell = getShell ();", "+\t\t\tif (shell == display.getActiveShell ()) {", "+\t\t\t\tshell.bringToTop (true);", "+\t\t\t\tsendClientEvent (0, OS.XEMBED_WINDOW_ACTIVATE, 0, 0, 0);", "+\t\t\t\tif (this == display.getFocusControl ()) {", "+\t\t\t\t\tsendClientEvent (0, OS.XEMBED_FOCUS_IN, OS.XEMBED_FOCUS_CURRENT, 0, 0);", "+\t\t\t\t}"]}], "num": 24689}
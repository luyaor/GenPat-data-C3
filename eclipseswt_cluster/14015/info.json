{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "84e8e9a1da72c7cb527a99f5620e7fa2", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "273167cdf20f9c40e404834bfb01d5f2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/TrayItem.java", "commitBeforeChange": "6d2109680e67f01ec005aa6e7ba9c30428f9e77a", "commitAfterChange": "dd2aca966bc039ce9a2eb77aaa5738d3e28bb872", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": "  void createHandle (int index)", "signatureAfterChange": "  void createHandle (int index)", "diff": ["-\tif (OS.GTK_VERSION >= OS.VERSION (2, 10, 0)) {", "-\t\thandle = OS.gtk_status_icon_new ();", "-\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\timageHandle = OS.gtk_image_new ();", "-\t\tOS.gtk_status_icon_set_visible (handle,true);", "-\t} else {", "-\t\thandle = OS.gtk_plug_new (0);", "-\t\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\timageHandle = OS.gtk_image_new ();", "-\t\tif (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);", "-\t\tOS.gtk_container_add (handle, imageHandle);", "-\t\tOS.gtk_widget_show (handle);", "-\t\tOS.gtk_widget_show (imageHandle);", "-\t\tlong /*int*/ id = OS.gtk_plug_get_id (handle);", "-\t\tint monitor = 0;", "-\t\tlong /*int*/ screen = OS.gdk_screen_get_default ();", "-\t\tif (screen != 0) {", "-\t\t\tmonitor = OS.gdk_screen_get_number (screen);", "-\t\t}", "-\t\tbyte [] trayBuffer = Converter.wcsToMbcs (null, \"_NET_SYSTEM_TRAY_S\" + monitor, true);", "-\t\tlong /*int*/ trayAtom = OS.gdk_atom_intern (trayBuffer, true);", "-\t\tlong /*int*/ xTrayAtom = OS.gdk_x11_atom_to_xatom (trayAtom);", "-\t\tlong /*int*/ xDisplay = OS.gdk_x11_display_get_xdisplay(OS.gdk_display_get_default());", "-\t\tlong /*int*/ trayWindow = OS.XGetSelectionOwner (xDisplay, xTrayAtom);", "-\t\tbyte [] messageBuffer = Converter.wcsToMbcs (null, \"_NET_SYSTEM_TRAY_OPCODE\", true);", "-\t\tlong /*int*/ messageAtom = OS.gdk_atom_intern (messageBuffer, true);", "-\t\tlong /*int*/ xMessageAtom = OS.gdk_x11_atom_to_xatom (messageAtom);", "-\t\tXClientMessageEvent event = new XClientMessageEvent ();", "-\t\tevent.type = OS.ClientMessage;", "-\t\tevent.window = trayWindow;", "-\t\tevent.message_type = xMessageAtom;", "-\t\tevent.format = 32;", "-\t\tevent.data [0] = OS.GDK_CURRENT_TIME;", "-\t\tevent.data [1] = OS.SYSTEM_TRAY_REQUEST_DOCK;", "-\t\tevent.data [2] = id;", "-\t\tlong /*int*/ clientEvent = OS.g_malloc (XClientMessageEvent.sizeof);", "-\t\tOS.memmove (clientEvent, event, XClientMessageEvent.sizeof);", "-\t\tOS.XSendEvent (xDisplay, trayWindow, false, OS.NoEventMask, clientEvent);", "-\t\tOS.g_free (clientEvent);", "-\t}", "+\thandle = OS.gtk_status_icon_new ();", "+\tif (handle == 0) error (SWT.ERROR_NO_HANDLES);", "+\timageHandle = OS.gtk_image_new ();", "+\tOS.gtk_status_icon_set_visible (handle,true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bbc40908fb769c695ec784456b4a5b35", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "272967205f3824ec29456112026262c64ae69dfa", "commitAfterChange": "fc62fa389f9358a82d98c59fbeba910f7ca8c593", "methodNumberBeforeChange": 187, "methodNumberAfterChange": 185, "signatureBeforeChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_LBUTTONDOWN (int wParam, int lParam)", "diff": ["-\tboolean dragging = false, mouseDown = true;", "-\tboolean dragDetect = hooks (SWT.DragDetect);", "-\tif (dragDetect) {", "-\t\tif (!OS.IsWinCE) {", "-\t\t\t/*", "-\t\t\t* Feature in Windows.  It's possible that the drag", "-\t\t\t* operation will not be started while the mouse is", "-\t\t\t* down, meaning that the mouse should be captured.", "-\t\t\t* This can happen when the user types the ESC key", "-\t\t\t* to cancel the drag.  The fix is to query the state", "-\t\t\t* of the mouse and capture the mouse accordingly.", "-\t\t\t*/", "-\t\t\tPOINT pt = new POINT ();", "-\t\t\tpt.x = (short) (lParam & 0xFFFF);", "-\t\t\tpt.y = (short) (lParam >> 16);", "-\t\t\tOS.ClientToScreen(handle, pt);", "-\t\t\tdragging = OS.DragDetect (handle, pt);", "-\t\t\tmouseDown = OS.GetKeyState (OS.VK_LBUTTON) < 0;", "-\t\t}", "-\t}", "-\tsendMouseEvent (SWT.MouseDown, 1, OS.WM_LBUTTONDOWN, wParam, lParam);", "-\tint result = callWindowProc (OS.WM_LBUTTONDOWN, wParam, lParam);\t", "-\tif (OS.IsPPC) {", "-\t\t/*", "-\t\t* Note: On WinCE PPC, only attempt to recognize the gesture for", "-\t\t* a context menu when the control contains a valid menu or there", "-\t\t* are listeners for the MenuDetect event.", "-\t\t*/", "-\t\tboolean hasMenu = menu != null && !menu.isDisposed ();", "-\t\tif (hasMenu || hooks (SWT.MenuDetect)) {", "-\t\t\tint x = (short) (lParam & 0xFFFF);", "-\t\t\tint y = (short) (lParam >> 16);", "-\t\t\tSHRGINFO shrg = new SHRGINFO ();", "-\t\t\tshrg.cbSize = SHRGINFO.sizeof;", "-\t\t\tshrg.hwndClient = handle;", "-\t\t\tshrg.ptDown_x = x;", "-\t\t\tshrg.ptDown_y = y; ", "-\t\t\tshrg.dwFlags = OS.SHRG_RETURNCMD;", "-\t\t\tint type = OS.SHRecognizeGesture (shrg);", "-\t\t\tif (type == OS.GN_CONTEXTMENU) showMenu (x, y);", "-\t\t}", "-\t}", "-\tif (mouseDown) {", "-\t\tif (OS.GetCapture () != handle) OS.SetCapture (handle);", "-\t}", "-\tif (dragging) {", "-\t\tEvent event = new Event ();", "-\t\tevent.x = (short) (lParam & 0xFFFF);", "-\t\tevent.y = (short) (lParam >> 16);", "-\t\tpostEvent (SWT.DragDetect, event);", "-\t} else {", "-\t\tif (dragDetect) {", "-\t\t\t/*", "-\t\t\t* Feature in Windows.  DragDetect() captures the mouse", "-\t\t\t* and tracks its movement until the user releases the", "-\t\t\t* left mouse button, presses the ESC key, or moves the", "-\t\t\t* mouse outside the drag rectangle.  If the user moves", "-\t\t\t* the mouse outside of the drag rectangle, DragDetect()", "-\t\t\t* returns true and a drag and drop operation can be", "-\t\t\t* started.  When the left mouse button is released or", "-\t\t\t* the ESC key is pressed, these events are consumed by", "-\t\t\t* DragDetect() so that application code that matches", "-\t\t\t* mouse down/up pairs or looks for the ESC key will not", "-\t\t\t* function properly.  The fix is to send these events", "-\t\t\t* when the drag has not started.", "-\t\t\t* ", "-\t\t\t* NOTE: For now, don't send a fake WM_KEYDOWN/WM_KEYUP", "-\t\t\t* events for the ESC key.  This would require computing", "-\t\t\t* wParam (the key) and lParam (the repeat count, scan code,", "-\t\t\t* extended-key flag, context code, previous key-state flag,", "-\t\t\t* and transition-state flag) which is non-trivial.", "-\t\t\t*/", "-\t\t\tif (OS.GetKeyState (OS.VK_ESCAPE) >= 0) {", "-\t\t\t\tOS.SendMessage (handle, OS.WM_LBUTTONUP, wParam, lParam);", "-\t\t\t}", "-\t\t}", "-\t}", "-\treturn new LRESULT (result);", "+\treturn wmLButtonDown (handle, wParam, lParam);"]}], "num": 14015}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "67ec5c7a338a4b3cfebbe0bacd417792", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "339673ef7a3aa84493d8e0d2938b9897", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 9, "signatureBeforeChange": " Point drawHorizontalItemConnector(GC gc, Point position)", "signatureAfterChange": " TreeItem[] computeAvailableDescendents ()", "diff": ["-Point drawHorizontalItemConnector(GC gc, Point position) {", "-\tint itemConnectorEndPos = position.x + getItemConnectorWidth() - 1;\t// -1 because the position of the last pixel needs to be calculated", "-", "-\tgc.drawLine(position.x, position.y, itemConnectorEndPos, position.y);", "-\treturn new Point(itemConnectorEndPos + 1, position.y);\t\t// + 1 in order to resume drawing after line not on end of line", "+TreeItem[] computeAvailableDescendents () {", "+\tif (!expanded) return new TreeItem[] {this};", "+\tint childCount = items.length;", "+\tTreeItem[][] childResults = new TreeItem[childCount][];", "+\tint count = 1;\t/* self */", "+\tfor (int i = 0; i < childCount; i++) {", "+\t\tchildResults[i] = items[i].computeAvailableDescendents ();", "+\t\tcount += childResults[i].length;", "+\t}", "+\tTreeItem[] result = new TreeItem[count];", "+\tint index = 0;", "+\tresult[index++] = this;", "+\tfor (int i = 0; i < childCount; i++) {", "+\t\tSystem.arraycopy (childResults[i], 0, result, index, childResults[i].length);", "+\t\tindex += childResults[i].length;", "+\t}", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0881f486e31ea004314755066942b61e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 41, "signatureBeforeChange": " Image internalGetImage (int columnIndex)", "signatureAfterChange": " TreeItem2 getVisibleItem(int searchIndex)", "diff": ["+ */", "+TreeItem2 getVisibleItem(int searchIndex) {", "+\tTreeItem2 child;", "+\tTreeItem2 foundItem = null;", "+\tEnumeration children = getChildren().elements();", "+", "+\tif (searchIndex == 0) {", "+\t\treturn this;", "+\t}", "+\telse\t\t\t\t\t", "+\tif (getExpanded() == false) { \t\t// trying to find a child when this item isn't expanded ? ", "+\t\treturn null;", "+\t}", "+", "+\t// Search for expanded items first. Count all subitems in the process.", "+\twhile (children.hasMoreElements() == true && foundItem == null) {", "+\t\tchild = (TreeItem2) children.nextElement();", "+\t\tsearchIndex--;", "+\t\tif (child.getExpanded() == true) {", "+\t\t\tsearchIndex -= child.getVisibleItemCount();\t// count children of all expanded items", "+\t\t}", "+\t\tif (searchIndex <= 0) {\t\t\t\t\t\t\t\t// is searched item past child ?", "+\t\t\t// add back children of current item (that's what we want to search)\t\t\t", "+\t\t\tfoundItem = child.getVisibleItem(searchIndex + child.getVisibleItemCount());", "+\t\t}", "+\t}", "+", "+\treturn foundItem;", "+}", "-Image internalGetImage (int columnIndex) {", "-\tif (images.length < columnIndex + 1) return null;", "-\treturn images[columnIndex];"]}], "num": 26164}
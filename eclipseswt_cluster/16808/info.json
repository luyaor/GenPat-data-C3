{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7623423615ff74702cc274877dab087b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e50ddae02fd0956f31d3f2be216c98b6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "696d4c6839a3fdb7542a08cdd2e26ba5b9f3b4f3", "commitAfterChange": "4d75e53887d6f16ac3e72237cdfb7f10eb7e69df", "methodNumberBeforeChange": 128, "methodNumberAfterChange": 128, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\tif (resizeCount != 0) {", "-\t\t\t\tOS.SendMessage (handle, OS.LVM_REDRAWITEMS, plvfi.iItem, plvfi.iItem);", "-\t\t\t\tbreak;", "+\t\t\t", "+\t\t\t/*", "+\t\t\t* When an item is being deleted from a virtual table, do not", "+\t\t\t* allow the application to provide data for a new item that", "+\t\t\t* becomes visible until the item has been removed from the", "+\t\t\t* items array.  Because arbitrary application code can run", "+\t\t\t* during the callback, the items array might be accessed", "+\t\t\t* in an inconsistent state.  Rather than answering the data", "+\t\t\t* right away, queue a redraw for later.", "+\t\t\t*/", "+\t\t\tif ((style & SWT.VIRTUAL) != 0) {", "+\t\t\t\tif (ignoreShrink) {", "+\t\t\t\t\tOS.SendMessage (handle, OS.LVM_REDRAWITEMS, plvfi.iItem, plvfi.iItem);", "+\t\t\t\t\tbreak;", "+\t\t\t\t}", "+\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "068b2d09994b7d8d4ee8c8c08c36c605", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "9f3f955d035544879b4768b5dbcbfc67ba4dd5b1", "commitAfterChange": "139638fcc176482ffe67b51f903acca1337cd21f", "methodNumberBeforeChange": 143, "methodNumberAfterChange": 143, "signatureBeforeChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmNotifyChild (int wParam, int lParam)", "diff": ["-\t\t\t\tif (items != null && lptvdi.lParam != -1) {", "-\t\t\t\t\tif (items [lptvdi.lParam] != null && items [lptvdi.lParam].cached) {", "-\t\t\t\t\t\tcheckVisible = false;", "+\t\t\t\t/*", "+\t\t\t\t* When an item is being deleted from a virtual tree, do not", "+\t\t\t\t* allow the application to provide data for a new item that", "+\t\t\t\t* becomes visible until the item has been removed from the", "+\t\t\t\t* items array.  Because arbitrary application code can run", "+\t\t\t\t* during the callback, the items array might be accessed", "+\t\t\t\t* in an inconsistent state.  Rather than answering the data", "+\t\t\t\t* right away, queue a redraw for later.", "+\t\t\t\t*/", "+\t\t\t\tif (!ignoreShrink) {", "+\t\t\t\t\tif (items != null && lptvdi.lParam != -1) {", "+\t\t\t\t\t\tif (items [lptvdi.lParam] != null && items [lptvdi.lParam].cached) {", "+\t\t\t\t\t\t\tcheckVisible = false;", "+\t\t\t\t\t\t}", "+\t\t\t\t\tif (ignoreShrink) {", "+\t\t\t\t\t\tOS.InvalidateRect (handle, rect, true);", "+\t\t\t\t\t\tbreak;", "+\t\t\t\t\t}"]}], "num": 16808}
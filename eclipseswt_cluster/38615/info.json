{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0566ab737de971ce68a83bd2e91e8264", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0be3495a464f49c9901ff2a417953f4a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "907c4dd47a285571bf0d66e34d1a9323e15dd90b", "commitAfterChange": "e4b1a868ce731255239223c8ff6f43351c81a864", "methodNumberBeforeChange": 65, "methodNumberAfterChange": 63, "signatureBeforeChange": " void onMouse(Event event)", "signatureAfterChange": " void onMouse(Event event)", "diff": ["-\t\t\t\tupdate();", "-\t\t\t\tupdate();", "-\t\t\t\tupdate();", "-\t\t\t\t\tupdate();", "-\t\t\t\t\tupdate();", "-\t\t\t\t\tupdate();", "-\t\t\t\t\tupdate();", "-\t\t\t\t\tupdate();", "-\t\t\t\tupdate();", "-\t\t\t\tupdate();", "-\t\t\t\tupdate();", "-\t\t\t\t\t\t\tupdate();", "-\t\t\t\t\t\t\tupdate();", "-\t\t\t\t\tupdate();", "-\t\t\t\t\tupdate();", "-\t\t\t\tupdate();", "-\t\t\t\tif (listListeners.length == 0) {", "+\t\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "+\t\t\t\te.widget = this;", "+\t\t\t\te.time = event.time;", "+\t\t\t\te.x = rect.x;", "+\t\t\t\te.y = rect.y;", "+\t\t\t\te.width = rect.width;", "+\t\t\t\te.height = rect.height;", "+\t\t\t\te.doit = true;", "+\t\t\t\tfor (int i = 0; i < folderListeners.length; i++) {", "+\t\t\t\t\tfolderListeners[i].showList(e);", "+\t\t\t\t}", "+\t\t\t\tif (e.doit && !isDisposed()) {", "-\t\t\t\t} else {", "-\t\t\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "-\t\t\t\t\te.widget = this;", "-\t\t\t\t\te.time = event.time;", "-\t\t\t\t\te.rect = rect;", "-\t\t\t\t\t", "-\t\t\t\t\tfor (int i = 0; i < listListeners.length; i++) {", "-\t\t\t\t\t\tlistListeners[i].showList(e);", "-\t\t\t\t\t}", "-\t\t\t\tupdate();", "-\t\t\t\tfor (int i = 0; i < minmaxListeners.length; i++) {", "+\t\t\t\tfor (int i = 0; i < folderListeners.length; i++) {", "-\t\t\t\t\t\tminmaxListeners[i].restore(e);", "+\t\t\t\t\t\tfolderListeners[i].restore(e);", "-\t\t\t\t\t\tminmaxListeners[i].minimize(e);", "+\t\t\t\t\t\tfolderListeners[i].minimize(e);", "-\t\t\t\tupdate();", "-\t\t\t\tfor (int i = 0; i < minmaxListeners.length; i++) {", "+\t\t\t\tfor (int i = 0; i < folderListeners.length; i++) {", "-\t\t\t\t\t\tminmaxListeners[i].restore(e);", "+\t\t\t\t\t\tfolderListeners[i].restore(e);", "-\t\t\t\t\t\tminmaxListeners[i].maximize(e);", "+\t\t\t\t\t\tfolderListeners[i].maximize(e);", "-\t\t\t\t\tupdate();", "-\t\t\t\t\tfor (int j = 0; j < closeListeners.length; j++) {", "-\t\t\t\t\t\tcloseListeners[j].itemClosed(e);", "+\t\t\t\t\tfor (int j = 0; j < folderListeners.length; j++) {", "+\t\t\t\t\t\tCTabFolder2Listener listener = folderListeners[j];", "+\t\t\t\t\t\tlistener.close(e);", "+\t\t\t\t\t}", "+\t\t\t\t\tfor (int j = 0; j < tabListeners.length; j++) {", "+\t\t\t\t\t\tCTabFolderListener listener = tabListeners[j];", "+\t\t\t\t\t\tlistener.itemClosed(e);", "-\t\t\t\t\tif (listListeners.length == 0) {", "+\t\t\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "+\t\t\t\t\te.widget = this;", "+\t\t\t\t\te.time = event.time;", "+\t\t\t\t\te.x = rect.x;", "+\t\t\t\t\te.y = rect.y;", "+\t\t\t\t\te.width = rect.width;", "+\t\t\t\t\te.height = rect.height;", "+\t\t\t\t\te.doit = true;", "+\t\t\t\t\tfor (int i = 0; i < folderListeners.length; i++) {", "+\t\t\t\t\t\tfolderListeners[i].showList(e);", "+\t\t\t\t\t}", "+\t\t\t\t\tif (e.doit && !isDisposed()) {", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tCTabFolderEvent e = new CTabFolderEvent(this);", "-\t\t\t\t\t\te.widget = this;", "-\t\t\t\t\t\te.time = event.time;", "-\t\t\t\t\t\te.rect = rect;", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tfor (int i = 0; i < listListeners.length; i++) {", "-\t\t\t\t\t\t\tlistListeners[i].showList(e);", "-\t\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "470070704411a4d734cd0235aef0eaec", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "73b51de8c84174e0e99b4c04bc9fd87166a96cec", "commitAfterChange": "7df940ae424cbd3c79310d7b9bc5d657b5781f6f", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public Image(Device device, Image srcImage, int flag)", "signatureAfterChange": " public Image(Device device, Image srcImage, int flag)", "diff": ["-\t\tint srcRowBytes= rowBytes(width, srcDepth);", "+\t\tif (srcBitsPerPixel == 1) {", "+\t\t\t/*", "+\t\t\t * Nothing we can reasonably do here except copy", "+\t\t\t * the bitmap; we can't make it a higher color depth.", "+\t\t\t * Short-circuit the rest of the code and return.", "+\t\t\t */", "+\t\t\tpixmap = duplicate(srcImage.pixmap);", "+\t\t\treturn;", "+\t\t}", "+\t\t", "+\t\tint srcRowBytes= rowBytes(width, srcDepth);", "-\t\t\t/*", "-\t\t\t * Nothing we can reasonably do here except copy", "-\t\t\t * the bitmap; we can't make it a higher color depth.", "-\t\t\t * Short-circuit the rest of the code and return.", "-\t\t\t */", "-\t\t\tpixmap = duplicate(srcImage.pixmap);", "+\t\t\t// should not happen; see above", "-\t\t\tSWT.error(SWT.ERROR_NOT_IMPLEMENTED);", "+\t\t\t//SWT.error(SWT.ERROR_NOT_IMPLEMENTED);", "+\t\t\tpixmap = duplicate(srcImage.pixmap);", "-\t\t\t\t\tsrcPixel = ((srcData[index + xIndex + 1] & 0xFF) << 8) | (srcData[index + xIndex] & 0xFF);", "+\t\t\t\t\tint ix= index + xIndex;", "+\t\t\t\t\tsrcPixel = ((srcData[ix + 1] & 0xFF) << 8) | (srcData[ix] & 0xFF);", "-\t\t\t\t\t\tdestData[index + xIndex] = zeroLow;", "-\t\t\t\t\t\tdestData[index + xIndex + 1] = zeroHigh;", "+\t\t\t\t\t\tdestData[ix] = zeroLow;", "+\t\t\t\t\t\tdestData[ix + 1] = zeroHigh;", "-\t\t\t\t\t\tdestData[index + xIndex] = oneLow;", "-\t\t\t\t\t\tdestData[index + xIndex + 1] = oneHigh;", "+\t\t\t\t\t\tdestData[ix] = oneLow;", "+\t\t\t\t\t\tdestData[ix + 1] = oneHigh;", "-\t\tif (!palette.isDirect) {", "-\t\t\t/* Convert the palette entries to gray. */", "-\t\t\tRGB [] rgbs = palette.getRGBs();", "-\t\t\tfor (int i=0; i<rgbs.length; i++) {", "-\t\t\t\tif (data.transparentPixel != i) {", "-\t\t\t\t\tRGB color = rgbs [i];", "-\t\t\t\t\tint red = color.red;", "-\t\t\t\t\tint green = color.green;", "-\t\t\t\t\tint blue = color.blue;", "-\t\t\t\t\tint intensity = (red+red+green+green+green+green+green+blue) >> 3;", "-\t\t\t\t\tcolor.red = color.green = color.blue = intensity;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tnewData.palette = new PaletteData(rgbs);", "-\t\t} else {", "+\t\tif (palette.isDirect) {", "-\t\t\tfor (int i=0; i<rgbs.length; i++) {", "-\t\t\t\trgbs[i] = new RGB(i, i, i);", "-\t\t\t}", "+\t\t\tfor (int i= 0; i < rgbs.length; i++)", "+\t\t\t\trgbs[i]= new RGB(i, i, i);", "+\t\t\t", "-\t\t\tfor (int y=0; y<height; y++) {", "+\t\t\tfor (int y= 0; y < height; y++) {", "-\t\t\t\tfor (int x=0; x<width; x++) {", "+\t\t\t\tfor (int x= 0; x < width; x++) {", "+\t\t} else {", "+\t\t\t/* Convert the palette entries to gray. */", "+\t\t\tRGB [] rgbs = palette.getRGBs();", "+\t\t\tfor (int i= 0; i < rgbs.length; i++) {", "+\t\t\t\tif (data.transparentPixel != i) {", "+\t\t\t\t\tRGB color = rgbs [i];", "+\t\t\t\t\tint red = color.red;", "+\t\t\t\t\tint green = color.green;", "+\t\t\t\t\tint blue = color.blue;", "+\t\t\t\t\tint intensity = (red+red+green+green+green+green+green+blue) >> 3;", "+\t\t\t\t\tcolor.red = color.green = color.blue = intensity;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tnewData.palette = new PaletteData(rgbs);", "+\t\t"]}], "num": 38615}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0d37d75f7bafcdeb9c012f8a5cb63dd1", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "87a3367da0347b2ef082033bc75a6f20", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "9ff10cb48f82b9ae865058d0bbaabcdfd7febeca", "commitAfterChange": "74127501f3b2eceb3db2c2e14c28ae868f8a3b22", "methodNumberBeforeChange": 64, "methodNumberAfterChange": 64, "signatureBeforeChange": "  boolean shape (int hdc, StyleItem run, char[] chars, int[] glyphCount, int maxGlyphs, SCRIPT_PROPERTIES sp)", "signatureAfterChange": "  boolean shape (int hdc, StyleItem run, char[] chars, int[] glyphCount, int maxGlyphs, boolean useCMAPcheck)", "diff": ["-boolean shape (int /*long*/ hdc, StyleItem run, char[] chars, int[] glyphCount, int maxGlyphs, SCRIPT_PROPERTIES sp) {", "-\tboolean useCMAPcheck = !sp.fComplex && !sp.fPrivateUseArea; ", "-\tSCRIPT_FONTPROPERTIES fp = new SCRIPT_FONTPROPERTIES ();", "-\tfp.cBytes = SCRIPT_FONTPROPERTIES.sizeof;", "-\tOS.ScriptGetFontProperties(hdc, run.psc, fp);", "+boolean shape (int /*long*/ hdc, StyleItem run, char[] chars, int[] glyphCount, int maxGlyphs, boolean useCMAPcheck) {", "+\tuseCMAPcheck = false;", "+//\t\tif (run.analysis.fNoGlyphIndex) return true;", "+\t\t", "+\t\tSCRIPT_FONTPROPERTIES fp = new SCRIPT_FONTPROPERTIES ();", "+\t\tfp.cBytes = SCRIPT_FONTPROPERTIES.sizeof;", "+\t\tOS.ScriptGetFontProperties(hdc, run.psc, fp);", "-\t\tif (i == glyphs.length) return true;", "+\t\tif (i == glyphs.length) ", "+\t\t\treturn true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4648d7f898c2a6c4ab4444c563cf27c0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "ccb3f7f0e08a5a4dde44acb96c8dac1d9f1ae48a", "commitAfterChange": "46122b3930811494ac5f7b01c7dfcc2d7b0f32a3", "methodNumberBeforeChange": 39, "methodNumberAfterChange": 39, "signatureBeforeChange": "  void doCommandBySelector (int id, int sel, int selector)", "signatureAfterChange": "  void doCommandBySelector (int id, int sel, int selector)", "diff": ["-\t\t\t// TODO is this workaround ok?", "-\t\t\t * multiple events for these keys, do not send a KeyDown if the", "-\t\t\t * selector is moveToBeginningOfParagraph or moveToEndOfParagraph.", "+\t\t\t * multiple events for these keys, do not send a KeyDown if we already sent one", "+\t\t\t * during this keystroke. ", "-\t\t\tif (selector == OS.sel_moveToBeginningOfParagraph_|| selector == OS.sel_moveToEndOfParagraph_) return;", "-", "-\t\t\tboolean [] consume = new boolean [1];", "-\t\t\tif (translateTraversal (nsEvent.keyCode (), nsEvent, consume)) return;", "-\t\t\tif (isDisposed ()) return;", "-\t\t\tif (!sendKeyEvent (nsEvent, SWT.KeyDown)) return;", "-\t\t\tif (consume [0]) return;", "+\t\t\tif (keyInputHappened == false) {", "+\t\t\t\tkeyInputHappened = true;", "+\t\t\t\tboolean [] consume = new boolean [1];", "+\t\t\t\tif (translateTraversal (nsEvent.keyCode (), nsEvent, consume)) return;", "+\t\t\t\tif (isDisposed ()) return;", "+\t\t\t\tif (!sendKeyEvent (nsEvent, SWT.KeyDown)) return;", "+\t\t\t\tif (consume [0]) return;", "+\t\t\t}"]}], "num": 18561}
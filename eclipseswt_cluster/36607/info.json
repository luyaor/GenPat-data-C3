{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4115e2e2270c1a1d504a6e73174e1edf", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79d8534e93c6a03f302443a57973cac4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/win32/org/eclipse/swt/program/Program.java", "commitBeforeChange": "9b1b438dec6e3b6589025bbb91c535ad43fe8233", "commitAfterChange": "5cf4ab8aaa9e31a9036338789b4c89320f79a417", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  static String getKeyValue (String string, boolean expand)", "signatureAfterChange": "  static String getKeyValue (String string, boolean expand)", "diff": ["+\t\tresult = \"\";", "-\t\tif (length == 0) {", "-\t\t\tresult = \"\";", "-\t\t} else {", "+\t\tif (length != 0) {", "-\t\t\t\t\tint nSize = OS.ExpandEnvironmentStrings (lpData, null, 0);", "-\t\t\t\t\tTCHAR lpDst = new TCHAR (0, nSize);", "-\t\t\t\t\tOS.ExpandEnvironmentStrings (lpData, lpDst, nSize);", "-\t\t\t\t\tresult = lpDst.toString (0, Math.max (0, nSize - 1));", "+\t\t\t\t\tlength = OS.ExpandEnvironmentStrings (lpData, null, 0);", "+\t\t\t\t\tif (length != 0) {", "+\t\t\t\t\t\tTCHAR lpDst = new TCHAR (0, length);", "+\t\t\t\t\t\tOS.ExpandEnvironmentStrings (lpData, lpDst, length);", "+\t\t\t\t\t\tresult = lpDst.toString (0, Math.max (0, length - 1));", "+\t\t\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b344689ed42434012b0b2db90c94894", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "c7a37ce473beb9045c99b97900ef561257b98af2", "commitAfterChange": "1a876750782f037ea9cd2cbd6b3dfc67d39d1b46", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 37, "signatureBeforeChange": "  \tstatic int atkTable_get_row_extent_at (int atkObject, int row, int column)", "signatureAfterChange": "  \tstatic int atkTable_get_row_extent_at (int atkObject, int row, int column)", "diff": ["-\t\tAccessible accessible = object.accessible;", "+\t\t\tAccessible accessible = object.accessible;", "-\t\t\tAccessibleTableEvent event = new AccessibleTableEvent(accessible);", "-\t\t\tevent.row = (int)/*64*/row;", "-\t\t\tevent.column = (int)/*64*/column;", "-\t\t\tfor (int i = 0, length = listeners.size(); i < length; i++) {", "-\t\t\t\tAccessibleTableListener listener = (AccessibleTableListener) listeners.elementAt(i);", "-\t\t\t\tlistener.getCell(event);", "-\t\t\t}", "-\t\t\tAccessible result = event.accessible;", "-\t\t\tif (result != null) {", "-\t\t\t\tlisteners = result.accessibleTableCellListeners;", "-\t\t\t\tAccessibleTableCellEvent cellEvent = new AccessibleTableCellEvent(result);", "-\t\t\t\tcellEvent.count = (int)/*64*/parentResult;", "-\t\t\t\tfor (int i = 0, length = listeners.size(); i < length; i++) {", "-\t\t\t\t\tAccessibleTableCellListener listener = (AccessibleTableCellListener) listeners.elementAt(i);", "-\t\t\t\t\tlistener.getRowSpan(cellEvent);", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleTableEvent event = new AccessibleTableEvent(accessible);", "+\t\t\t\tevent.row = (int)/*64*/row;", "+\t\t\t\tevent.column = (int)/*64*/column;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleTableListener listener = (AccessibleTableListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getCell(event);", "-\t\t\t\treturn cellEvent.count;", "+\t\t\t\tAccessible result = event.accessible;", "+\t\t\t\tif (result != null) {", "+\t\t\t\t\tlisteners = result.accessibleTableCellListeners;", "+\t\t\t\t\tlength = listeners.size();", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\tAccessibleTableCellEvent cellEvent = new AccessibleTableCellEvent(result);", "+\t\t\t\t\t\tcellEvent.count = (int)/*64*/parentResult;", "+\t\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\t\tAccessibleTableCellListener listener = (AccessibleTableCellListener) listeners.elementAt(i);", "+\t\t\t\t\t\t\tlistener.getRowSpan(cellEvent);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\treturn cellEvent.count;", "+\t\t\t\t\t}", "+\t\t\t\t}"]}], "num": 36607}
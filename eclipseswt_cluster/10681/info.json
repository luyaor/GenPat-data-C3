{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c964930f1beb47dd8049240c86bcc491", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "644aa82e7e9c3f81609cd7a9e229c668", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "5cc8edd08f6e6b95dad0c8fa8106f1fa83830fce", "commitAfterChange": "1216e74b895a4f8e4407e39be3f20d126c4af156", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 70, "signatureBeforeChange": "  void OnSelectedItemChanged (int args)", "signatureAfterChange": "  void OnSelectedItemChanged (int args)", "diff": ["+        default:", "+\t\t\tfor (int i = 0; i < selectedItemCount; i++) {", "+\t\t\t\tif (newItemRef == 0 || !OS.Object_Equals (newItemRef, selectedItems [i].handle)) {", "+\t\t\t\t\tOS.TreeViewItem_IsSelected (selectedItems [i].handle, false);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (newItem != null) {", "+\t\t\t\tOS.TreeViewItem_IsSelected (newItem.handle, true);", "+\t\t\t\tselectedItems = new TreeItem [] { newItem };", "+\t\t\t\tselectedItemCount = 1;", "+\t\t\t} else {", "+\t\t\t\tselectedItems = new TreeItem [0];", "+\t\t\t\tselectedItemCount = 0;", "+\t\t\t}", "+\t\t\tanchor = newItem;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a94b130e9d2598f5240d8ff0418fddb9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "f2f4dd506eea76a132736579a3bfc08133df01f5", "commitAfterChange": "ee03521325ddbdca252c8e728369c2d3c88672ed", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["+", "+\t\t\t/* Bug in Windows. When the expandos are visible (or in process of fading away)", "+\t\t\t * and the tree control is hidden the animation timer does not stop calling the ", "+\t\t\t * window proc till the tree is visible again. This can cause performance problems", "+\t\t\t * specially in cases there the application has several tree controls in this state.", "+\t\t\t * The fix is to detect a timer that repeats itself several times when the control", "+\t\t\t * is not visible and stop it. The timer is stopped by sending a fake mouse move event.", "+\t\t\t * ", "+\t\t\t * Note: Just killing the timer could cause some internal clean up task related to the ", "+\t\t\t * animation not to run.", "+\t\t\t */", "+\t\t\tint /*long*/ bits = OS.SendMessage (handle, OS.TVM_GETEXTENDEDSTYLE, 0, 0);", "+\t\t\tif ((bits & OS.TVS_EX_FADEINOUTEXPANDOS) != 0) {", "+\t\t\t\tif (!OS.IsWindowVisible (hwnd)) {", "+\t\t\t\t\tif (lastTimerID == wParam) {", "+\t\t\t\t\t\tlastTimerCount++;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tlastTimerCount = 0;", "+\t\t\t\t\t}", "+\t\t\t\t\tlastTimerID = wParam;", "+\t\t\t\t\tif (lastTimerCount >= TIMER_MAX_COUNT) {", "+\t\t\t\t\t\tOS.CallWindowProc (TreeProc, handle, OS.WM_MOUSEMOVE, 0, 0);", "+\t\t\t\t\t\tlastTimerID = -1;", "+\t\t\t\t\t\tlastTimerCount = 0;", "+\t\t\t\t\t}", "+\t\t\t\t} else {", "+\t\t\t\t\tlastTimerID = -1;", "+\t\t\t\t\tlastTimerCount = 0;", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 10681}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "b6906c98b306be6ec17613b79370da48", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "00786671e8227b2abe34a389d8738ee5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 27, "signatureBeforeChange": "  void selectRadio ()", "signatureAfterChange": "  static String removeMnemonicsAndShortcut(String s)", "diff": ["-void selectRadio () {", "-\tint index = 0;", "-\tMenuItem [] items = parent.getItems ();", "-\twhile (index < items.length && items [index] != this) index++;", "-\tint i = index - 1;", "-\twhile (i >= 0 && items [i].setRadioSelection (false)) --i;", "-\tint j = index + 1;", "-\twhile (j < items.length && items [j].setRadioSelection (false)) j++;", "-\tsetSelection (true);", "-}", "+", "+static String removeMnemonicsAndShortcut(String s) {", "+\tif (s.indexOf('&') >= 0 || s.indexOf('\\t') >= 0) {", "+\t\tStringBuffer sb= new StringBuffer();", "+\t\tint l= s.length();", "+\t\tfor (int i= 0; i < l; i++) {", "+\t\t\tchar c= s.charAt(i);", "+\t\t\tif (c == '\\t')", "+\t\t\t\tbreak;", "+\t\t\tif (c == '&') {", "+\t\t\t\tif (i+2 < l && s.charAt(i+2) == ' ') {", "+\t\t\t\t\tif (Character.isDigit(s.charAt(i+1)))", "+\t\t\t\t\t\ti+= 2;", "+\t\t\t\t}", "+\t\t\t} else {", "+\t\t\t\tsb.append(c);", "+\t\t\t}", "+\t\t}", "+\t\ts= sb.toString();", "+\t}", "+\treturn s;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5dc1dfe119817e1a466cfa6977c0805", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "857230dde8be1397ae2557844c139695d4aaa4a3", "commitAfterChange": "12d130cb4332a4845bcf0cce6120014733136f99", "methodNumberBeforeChange": 101, "methodNumberAfterChange": 65, "signatureBeforeChange": "  int gtk_map (int widget)", "signatureAfterChange": "  int fixedMapProc (int widget)", "diff": ["+int /*long*/ fixedMapProc (int /*long*/ widget) {", "+\tOS.GTK_WIDGET_SET_FLAGS (widget, OS.GTK_MAPPED);", "+\tint /*long*/ widgetList = OS.gtk_container_get_children (widget);", "+\tif (widgetList != 0) {", "+\t\tint /*long*/ widgets = widgetList;", "+\t\twhile (widgets != 0) {", "+\t\t\tint /*long*/ child = OS.g_list_data (widgets);", "+\t\t\tif (OS.GTK_WIDGET_VISIBLE (child) && OS.gtk_widget_get_child_visible (child) && !OS.GTK_WIDGET_MAPPED (child)) {", "+\t\t\t\tOS.gtk_widget_map (child);", "+\t\t\t}", "+\t\t\twidgets = OS.g_list_next (widgets);", "+\t\t}", "+\t\tOS.g_list_free (widgetList);", "+\t}", "+\tif ((OS.GTK_WIDGET_FLAGS (widget) & OS.GTK_NO_WINDOW) == 0) {", "+\t\tOS.gdk_window_show_unraised (OS.GTK_WIDGET_WINDOW (widget));", "+\t}", "+\treturn 0;", "+}", "-int /*long*/ gtk_map (int /*long*/ widget) {", "-\t/*", "-\t* Feature in GTK. The gdk window is raised to the top of the stack", "-\t* when gdk_window_show() is called. The fix is restore the stacking ", "-\t* order after the window  is mapped.", "-\t*/", "-\tint index = 0;", "-\tControl [] children = parent._getChildren ();", "-\twhile (index < children.length) {", "-\t\tif (children [index] == this) break;", "-\t\tindex++;", "-\t}", "-\tif (index == 0) {", "-\t\tsetZOrder (null, true);", "-\t} else {", "-\t\tsetZOrder (children [index - 1], false);", "-\t}", "-\treturn 0;", "-}"]}], "num": 6176}
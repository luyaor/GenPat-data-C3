{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "e237f32280c041d88008681f2dc979e1", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "080a6c288a1db0e1abb0fa51275d8aa0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "35be8ad5696880189b8973d12da83e42dd6fc194", "commitAfterChange": "3d12b10107474c7c107aa5097ed6447519f113dc", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": " public Browser(Composite parent, int style)", "signatureAfterChange": " public Browser(Composite parent, int style)", "diff": ["-\t\t\t\t\tshell.removeListener(SWT.Show, this);", "-\t\t\t\t\tshell.removeListener(SWT.Hide, this);", "-\t\t\t\t\tControl c = Browser.this;", "-\t\t\t\t\tdo {", "-\t\t\t\t\t\tc.removeListener(SWT.Show, this);", "-\t\t\t\t\t\tc.removeListener(SWT.Hide, this);", "-\t\t\t\t\t\tc = c.getParent();", "-\t\t\t\t\t} while (c != shell);", "-\t\t\t\tcase SWT.Hide: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug on Safari. The web view cannot be obscured by other views above it.", "-\t\t\t\t\t* This problem is specified in the apple documentation for HiWebViewCreate.", "-\t\t\t\t\t* The workaround is to hook Hide and Show events on the browser's parents", "-\t\t\t\t\t* and set its size to 0 in Hide and to restore its size in Show.", "-\t\t\t\t\t*/", "-\t\t\t\t\tCGRect bounds = new CGRect();", "-\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase SWT.Show: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug on Safari. The web view cannot be obscured by other views above it.", "-\t\t\t\t\t* This problem is specified in the apple documentation for HiWebViewCreate.", "-\t\t\t\t\t* The workaround is to hook Hide and Show events on the browser's parents", "-\t\t\t\t\t* and set its size to 0 in Hide and to restore its size in Show.", "-\t\t\t\t\t*/", "-\t\t\t\t\tCGRect bounds = new CGRect();", "-\t\t\t\t\tOS.HIViewGetFrame(handle, bounds);", "-\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\t\t* ", "-\t\t\t\t\t* Feature on Safari. The HIView ignores the call to update its position", "-\t\t\t\t\t* because it believes it has not changed. The workaround is to force", "-\t\t\t\t\t* it to reposition by changing its size and setting it back to the", "-\t\t\t\t\t* original value.", "-\t\t\t\t\t* ", "-\t\t\t\t\t/* If the widget is hidden, leave its size to 0,0 as set in the SWT.Hide callback */", "-\t\t\t\t\tif (!isVisible()) break;", "-\t\t\t\t\t* Note.  Setting negative width or height causes Safari to always", "-\t\t\t\t\t* display incorrectly even if further resize events are correct.", "+\t\t\t\t\t* Bug in Safari.  For some reason, the web view will display incorrectly or", "+\t\t\t\t\t* blank depending on its contents, if its size is set to a value smaller than", "+\t\t\t\t\t* MIN_SIZE. It will not display properly even after the size is made larger.", "+\t\t\t\t\t* The fix is to avoid setting sizes smaller than MIN_SIZE. ", "-\t\t\t\t\tif (bounds.width < 0) bounds.width = 0;", "-\t\t\t\t\tif (bounds.height < 0) bounds.height = 0;", "+\t\t\t\t\tif (bounds.width <= MIN_SIZE) bounds.width = MIN_SIZE;", "+\t\t\t\t\tif (bounds.height <= MIN_SIZE) bounds.height = MIN_SIZE;", "-\tshell.addListener(SWT.Show, listener);", "-\tshell.addListener(SWT.Hide, listener);", "-\tControl c = this;", "-\tdo {", "-\t\tc.addListener(SWT.Show, listener);", "-\t\tc.addListener(SWT.Hide, listener);", "-\t\tc = c.getParent();", "-\t} while (c != shell);", "-\tint[] keyboardMask = new int[] {OS.kEventClassKeyboard, OS.kEventRawKeyDown};", "+\tint[] mask = new int[] {", "+\t\tOS.kEventClassKeyboard, OS.kEventRawKeyDown,", "+\t\tOS.kEventClassControl, OS.kEventControlDraw,", "+\t\tOS.kEventClassTextInput, OS.kEventTextInputUnicodeForKeyEvent,", "+\t};", "-\tOS.InstallEventHandler(controlTarget, callback3Address, keyboardMask.length / 2, keyboardMask, webViewHandle, null);", "-\t\t", "-\tint[] textInputMask = new int[] { OS.kEventClassTextInput, OS.kEventTextInputUnicodeForKeyEvent };", "-\tint windowTarget = OS.GetWindowEventTarget(OS.GetControlOwner(handle));", "-\tOS.InstallEventHandler (windowTarget, callback3Address, textInputMask.length / 2, textInputMask, webViewHandle, null);", "+\tOS.InstallEventHandler(controlTarget, callback3Address, mask.length / 2, mask, webViewHandle, null);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9d35120aefc2d6e3dbd2f3a76775e483", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/carbon/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "e7ab60cfa38a8c3fdcd69ddcf2d3bdc3dd7d8859", "commitAfterChange": "cea7ad4f53311c6e11b8d036e80114124cd5665a", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t * Bug in Safari. The WebView does not receive mouse and key events when it is added", "-\t * to a visible top window.  It is assumed that Safari hooks its own event listener", "-\t * when the top window emits the kEventWindowShown event. The workaround is to send a", "-\t * fake kEventWindowShown event to the top window after the WebView has been added", "-\t * to the HIView (after the top window is visible) to give Safari a chance to hook", "-\t * events.", "-\t */", "+\t* Bug in Safari. The WebView does not draw properly if it is embedded as", "+\t* sub view of the browser handle.  The fix is to add the web view to the", "+\t* window root control and resize it on top of the browser handle.", "+\t* ", "+\t* Note that when reparent the browser is reparented, the web view has to", "+\t* be reparent by hand by hooking kEventControlOwningWindowChanged.", "+\t*/", "+\t/*", "+\t* Bug in Safari. The WebView does not receive mouse and key events when it is added", "+\t* to a visible top window.  It is assumed that Safari hooks its own event listener", "+\t* when the top window emits the kEventWindowShown event. The workaround is to send a", "+\t* fake kEventWindowShown event to the top window after the WebView has been added", "+\t* to the HIView (after the top window is visible) to give Safari a chance to hook", "+\t* events.", "+\t*/", "-\t\t\t\t\tShell shell = browser.getShell();", "-\t\t\t\t\tshell.removeListener(SWT.Resize, this);", "-\t\t\t\t\tshell.removeListener(SWT.Show, this);", "-\t\t\t\t\tshell.removeListener(SWT.Hide, this);", "-\t\t\t\t\tControl c = browser;", "-\t\t\t\t\tdo {", "-\t\t\t\t\t\tc.removeListener(SWT.Show, this);", "-\t\t\t\t\t\tc.removeListener(SWT.Hide, this);", "-\t\t\t\t\t\tc = c.getParent();", "-\t\t\t\t\t} while (c != shell);", "+\t\t\t\t\tOS.RemoveEventHandler(windowBoundsHandler);", "+\t\t\t\t\twindowBoundsHandler = 0;", "-\t\t\t\tcase SWT.Hide: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug on Safari. The web view cannot be obscured by other views above it.", "-\t\t\t\t\t* This problem is specified in the apple documentation for HiWebViewCreate.", "-\t\t\t\t\t* The workaround is to hook Hide and Show events on the browser's parents", "-\t\t\t\t\t* and set its size to 0 in Hide and to restore its size in Show.", "-\t\t\t\t\t*/", "-\t\t\t\t\tCGRect bounds = new CGRect();", "-\t\t\t\t\tbounds.x = bounds.y = -MIN_SIZE;", "-\t\t\t\t\tbounds.width = bounds.height = MIN_SIZE;", "-\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase SWT.Show: {", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Do not update size when it is not visible. Note that isVisible()", "-\t\t\t\t\t* cannot be used because SWT.Show is sent before the widget is", "-\t\t\t\t\t* actually visible. ", "-\t\t\t\t\t*/", "-\t\t\t\t\tShell shell = browser.getShell();", "-\t\t\t\t\tComposite parent = browser;", "-\t\t\t\t\twhile (parent != shell && (parent.getVisible() || parent == e.widget)) {", "-\t\t\t\t\t\tparent = parent.getParent();", "-\t\t\t\t\t}", "-\t\t\t\t\tif (!(parent.getVisible() || parent == e.widget)) return;", "-", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug on Safari. The web view cannot be obscured by other views above it.", "-\t\t\t\t\t* This problem is specified in the apple documentation for HiWebViewCreate.", "-\t\t\t\t\t* The workaround is to hook Hide and Show events on the browser's parents", "-\t\t\t\t\t* and set its size to 0 in Hide and to restore its size in Show.", "-\t\t\t\t\t*/", "-\t\t\t\t\tCGRect bounds = new CGRect();", "-\t\t\t\t\tOS.HIViewGetBounds(browser.handle, bounds);", "-\t\t\t\t\tint[] contentView = new int[1];", "-\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(browser.handle)), OS.kHIViewWindowContentID(), contentView);", "-\t\t\t\t\tOS.HIViewConvertRect(bounds, browser.handle, contentView[0]);", "-\t\t\t\t\t/* ", "-\t\t\t\t\t* Bug in Safari.  For some reason, the web view will display incorrectly or", "-\t\t\t\t\t* blank depending on its contents, if its size is set to a value smaller than", "-\t\t\t\t\t* MIN_SIZE. It will not display properly even after the size is made larger.", "-\t\t\t\t\t* The fix is to avoid setting sizes smaller than MIN_SIZE. ", "-\t\t\t\t\t*/", "-\t\t\t\t\tif (bounds.width <= MIN_SIZE) bounds.width = MIN_SIZE;", "-\t\t\t\t\tif (bounds.height <= MIN_SIZE) bounds.height = MIN_SIZE;", "-\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tcase SWT.Resize: {", "-\t\t\t\t\t/* Do not update size when it is not visible */", "-\t\t\t\t\tif (!browser.isVisible()) return;", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Bug on Safari. Resizing the height of a Shell containing a Browser at", "-\t\t\t\t\t* a fixed location causes the Browser to redraw at a wrong location.", "-\t\t\t\t\t* The web view is a HIView container that internally hosts", "-\t\t\t\t\t* a Cocoa NSView that uses a coordinates system with the origin at the", "-\t\t\t\t\t* bottom left corner of a window instead of the coordinates system used", "-\t\t\t\t\t* in Carbon that starts at the top left corner. The workaround is to", "-\t\t\t\t\t* reposition the web view every time the Shell of the Browser is resized.", "-\t\t\t\t\t*/", "-\t\t\t\t\tCGRect bounds = new CGRect();", "-\t\t\t\t\tOS.HIViewGetBounds(browser.handle, bounds);", "-\t\t\t\t\tint[] contentView = new int[1];", "-\t\t\t\t\tOS.HIViewFindByID(OS.HIViewGetRoot(OS.GetControlOwner(browser.handle)), OS.kHIViewWindowContentID(), contentView);", "-\t\t\t\t\tOS.HIViewConvertRect(bounds, browser.handle, contentView[0]);", "-\t\t\t\t\t/* ", "-\t\t\t\t\t* Bug in Safari.  For some reason, the web view will display incorrectly or", "-\t\t\t\t\t* blank depending on its contents, if its size is set to a value smaller than", "-\t\t\t\t\t* MIN_SIZE. It will not display properly even after the size is made larger.", "-\t\t\t\t\t* The fix is to avoid setting sizes smaller than MIN_SIZE. ", "-\t\t\t\t\t*/", "-\t\t\t\t\tif (bounds.width <= MIN_SIZE) bounds.width = MIN_SIZE;", "-\t\t\t\t\tif (bounds.height <= MIN_SIZE) bounds.height = MIN_SIZE;", "-\t\t\t\t\tif (e.widget == browser.getShell()) {", "-\t\t\t\t\t\tbounds.x++;", "-\t\t\t\t\t\t/* Note that the bounds needs to change */", "-\t\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\t\tbounds.x--;", "-\t\t\t\t\t}", "-\t\t\t\t\tOS.HIViewSetFrame(webViewHandle, bounds);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\tbrowser.addListener(SWT.Resize, listener);", "-\tShell shell = browser.getShell();", "-\tshell.addListener(SWT.Resize, listener);", "-\tshell.addListener(SWT.Show, listener);", "-\tshell.addListener(SWT.Hide, listener);", "-\tControl c = browser;", "-\tdo {", "-\t\tc.addListener(SWT.Show, listener);", "-\t\tc.addListener(SWT.Hide, listener);", "-\t\tc = c.getParent();", "-\t} while (c != shell);", "-\tint controlTarget = OS.GetControlEventTarget(webViewHandle);", "-\tOS.InstallEventHandler(controlTarget, callback3Address, mask.length / 2, mask, webViewHandle, null);", "+\tOS.InstallEventHandler(OS.GetControlEventTarget(webViewHandle), callback3Address, mask.length / 2, mask, webViewHandle, null);", "+\tint[] mask1 = new int[] {", "+\t\tOS.kEventClassControl, OS.kEventControlBoundsChanged,", "+\t\tOS.kEventClassControl, OS.kEventControlVisibilityChanged,", "+\t\tOS.kEventClassControl, OS.kEventControlOwningWindowChanged,", "+\t};", "+\tOS.InstallEventHandler(OS.GetControlEventTarget(browser.handle), callback3Address, mask1.length / 2, mask1, browser.handle, null);", "+\tint[] mask2 = new int[] {", "+\t\tOS.kEventClassWindow, OS.kEventWindowBoundsChanged,", "+\t};", "+\tint[] outRef = new int[1];", "+\tOS.InstallEventHandler(OS.GetWindowEventTarget(window), callback3Address, mask2.length / 2, mask2, browser.handle, outRef);", "+\twindowBoundsHandler = outRef[0];"]}], "num": 43066}
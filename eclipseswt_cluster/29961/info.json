{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4354160cdd7924bf365f7fc22e0df1cf", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5e18f63afabb13393e2f24dedd24460f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "c1197d63815159c7e5c24ace1200cf534bfcb22b", "commitAfterChange": "ec53a50dab87701b0c55de08a31a3f33b6914aab", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  void createRenderers (int columnHandle, int modelIndex, boolean check)", "signatureAfterChange": "  void createRenderers (int columnHandle, int modelIndex, boolean check, int columnStyle)", "diff": ["-void createRenderers (int columnHandle, int modelIndex, boolean check) {", "+void createRenderers (int columnHandle, int modelIndex, boolean check, int columnStyle) {", "-\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, checkRenderer, \"active\", 0);", "+\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, checkRenderer, \"active\", CHECKED_COLUMN);", "+\t\t", "+\t\t/*", "+\t\t* Feature in GTK. The inconsistent property only exists in GTK 2.2.x.", "+\t\t*/", "+\t\tif (OS.gtk_major_version () >= 2 || (OS.gtk_major_version () == 2 && OS.gtk_minor_version () >= 2)) {", "+\t\t\tOS.gtk_tree_view_column_add_attribute (columnHandle, checkRenderer, \"inconsistent\", GRAYED_COLUMN);", "+\t\t}", "-\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, false);", "-\tOS.gtk_tree_view_column_add_attribute (columnHandle, pixbufRenderer, \"pixbuf\", modelIndex);", "+\tint textRenderer = OS.gtk_cell_renderer_text_new ();", "+\tif (textRenderer == 0) error (SWT.ERROR_NO_HANDLES);", "+\t", "-\tint textRenderer = OS.gtk_cell_renderer_text_new ();", "-\tif (textRenderer == 0) error (SWT.ERROR_NO_HANDLES);", "-\tOS.gtk_tree_view_column_pack_start (columnHandle, textRenderer, true);", "+", "+\t/* Set alignment */", "+\tif ((columnStyle & SWT.RIGHT) != 0) {", "+\t\tOS.g_object_set (textRenderer, OS.xalign, 1f);", "+\t\tOS.g_object_set (pixbufRenderer, OS.xalign, 1f);", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, true);", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, textRenderer, false);", "+\t\tOS.gtk_tree_view_column_set_alignment (columnHandle, 1f);", "+\t} else if ((columnStyle & SWT.CENTER) != 0) {", "+\t\tOS.g_object_set (pixbufRenderer, OS.xalign, 1f);", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, true);", "+\t\tOS.gtk_tree_view_column_pack_end (columnHandle, textRenderer, true);", "+\t\tOS.gtk_tree_view_column_set_alignment (columnHandle, 0.5f);", "+\t} else {", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, pixbufRenderer, false);", "+\t\tOS.gtk_tree_view_column_pack_start (columnHandle, textRenderer, true);", "+\t\tOS.gtk_tree_view_column_set_alignment (columnHandle, 0f);", "+\t}", "+", "+\t/* Add attributes */", "+\tOS.gtk_tree_view_column_add_attribute (columnHandle, pixbufRenderer, \"pixbuf\", modelIndex);", "-\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, \"foreground-gdk\", 1);", "-\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, \"background-gdk\", 2);", "+\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, \"foreground-gdk\", FOREGROUND_COLUMN);", "+\tOS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, \"background-gdk\", BACKGROUND_COLUMN);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ec8a1745515f34345e1a1f7115539a2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "cc7a79cec8920b1b6175a6c2124e7f63a3823262", "commitAfterChange": "d8f34c9ec09bc11f5d7b71293f9d378725f3146c", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 9, "signatureBeforeChange": "  void removeColumn ()", "signatureAfterChange": " void createColumn (TreeColumn column, int index)", "diff": ["+}", "+void createColumn (TreeColumn column, int index) {", "+/*", "+* Bug in ATK. For some reason, ATK segments fault if ", "+* the GtkTreeView has a column and does not have items.", "+* The fix is to insert the column only when an item is ", "+* created.", "+*/", "+\t", "+\tint modelIndex = FIRST_COLUMN;", "+\tif (columnCount != 0) {", "+\t\tint modelLength = OS.gtk_tree_model_get_n_columns (modelHandle);", "+\t\tboolean [] usedColumns = new boolean [modelLength];", "+\t\tfor (int i=0; i<columnCount; i++) {", "+\t\t\tint columnIndex = columns [i].modelIndex;", "+\t\t\tfor (int j = 0; j < CELL_TYPES; j++) {", "+\t\t\t\tusedColumns [columnIndex + j] = true;", "+\t\t\t}", "+\t\t}", "+\t\twhile (modelIndex < modelLength) {", "+\t\t\tif (!usedColumns [modelIndex]) break;", "+\t\t\tmodelIndex++;", "+\t\t}", "+\t\tif (modelIndex == modelLength) {", "+\t\t\tint /*long*/ oldModel = modelHandle;", "+\t\t\tint /*long*/[] types = getColumnTypes (columnCount + 4); // grow by 4 rows at a time", "+\t\t\tint /*long*/ newModel = OS.gtk_tree_store_newv (types.length, types);", "+\t\t\tif (newModel == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\tcopyModel (oldModel, FIRST_COLUMN, newModel, FIRST_COLUMN, types, (int /*long*/)0, (int /*long*/)0, modelLength);", "+\t\t\tOS.gtk_tree_view_set_model (handle, newModel);", "+\t\t\tOS.g_object_unref (oldModel);", "+\t\t\tmodelHandle = newModel;", "+\t\t}", "+\t}", "+\tint /*long*/ columnHandle = OS.gtk_tree_view_column_new ();", "+\tif (columnHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\tif (index == 0 && columnCount > 0) {", "+\t\tTreeColumn checkColumn = columns [0];", "+\t\tcreateRenderers (checkColumn.handle, checkColumn.modelIndex, false, checkColumn.style);", "+\t}", "+\tcreateRenderers (columnHandle, modelIndex, index == 0, column == null ? 0 : column.style);", "+\tif ((style & SWT.VIRTUAL) == 0 && columnCount == 0) {", "+\t\tOS.gtk_tree_view_column_set_sizing (columnHandle, OS.GTK_TREE_VIEW_COLUMN_AUTOSIZE);", "+\t} else {", "+\t\tOS.gtk_tree_view_column_set_sizing (columnHandle, OS.GTK_TREE_VIEW_COLUMN_FIXED);", "+\t\tOS.gtk_tree_view_column_set_fixed_width (columnHandle, 10);", "+\t}", "+\tOS.gtk_tree_view_column_set_resizable (columnHandle, true);", "+\tOS.gtk_tree_view_column_set_clickable (columnHandle, true);", "+\tOS.gtk_tree_view_insert_column (handle, columnHandle, index);", "+\tif (column != null) {", "+\t\tcolumn.handle = columnHandle;", "+\t\tcolumn.modelIndex = modelIndex;", "+\t}", "+}", "-", "-void removeColumn () {", "-\tint /*long*/ column = OS.gtk_tree_view_get_column (handle, 0);", "-\tif (column == 0) return;", "-\tOS.gtk_tree_view_remove_column (handle, column);"]}], "num": 29961}
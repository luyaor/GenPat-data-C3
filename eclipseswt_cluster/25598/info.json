{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "5e8895b67b2e6eb51a95d209ab4edcbb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b061a5ef4133ece1381fbfd97e97d890", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "5a902dea6af2bf530917df6db13cb86bc207413e", "commitAfterChange": "cb9349c8fe54c4e535a82ed4f4dd8d55bc306228", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 13, "signatureBeforeChange": "\r public ImageData getImageData()", "signatureAfterChange": "\r public ImageData getImageData()", "diff": ["-\t\t\tbyte[] bmi = new byte[40 + numColors * 4];\r", "-\t\t\t/* DWORD biSize = 40 */\r", "-\t\t\tbmi[0] = 40; bmi[1] = bmi[2] = bmi[3] = 0;\r", "-\t\t\t/* LONG biWidth = width */\r", "-\t\t\tbmi[4] = (byte)(width & 0xFF);\r", "-\t\t\tbmi[5] = (byte)((width >> 8) & 0xFF);\r", "-\t\t\tbmi[6] = (byte)((width >> 16) & 0xFF);\r", "-\t\t\tbmi[7] = (byte)((width >> 24) & 0xFF);\r", "-\t\t\t/* LONG biHeight = height */\r", "-\t\t\tbmi[8] = (byte)(-height & 0xFF);\r", "-\t\t\tbmi[9] = (byte)((-height >> 8) & 0xFF);\r", "-\t\t\tbmi[10] = (byte)((-height >> 16) & 0xFF);\r", "-\t\t\tbmi[11] = (byte)((-height >> 24) & 0xFF);\r", "-\t\t\t/* WORD biPlanes = 1 */\r", "-\t\t\tbmi[12] = 1;\r", "-\t\t\tbmi[13] = 0;\r", "-\t\t\t/* WORD biBitCount = bm.bmPlanes * bm.bmBitsPixel */\r", "-\t\t\tbmi[14] = (byte)(depth & 0xFF);\r", "-\t\t\tbmi[15] = (byte)((depth >> 8) & 0xFF);\r", "-\t\t\t/* DWORD biCompression = BI_RGB = 0 */\r", "-\t\t\tbmi[16] = bmi[17] = bmi[18] = bmi[19] = 0;\r", "-\t\t\t/* DWORD biSizeImage = 0 (default) */\r", "-\t\t\tbmi[20] = bmi[21] = bmi[22] = bmi[23] = 0;\r", "-\t\t\t/* LONG biXPelsPerMeter = 0 */\r", "-\t\t\tbmi[24] = bmi[25] = bmi[26] = bmi[27] = 0;\r", "-\t\t\t/* LONG biYPelsPerMeter = 0 */\r", "-\t\t\tbmi[28] = bmi[29] = bmi[30] = bmi[31] = 0;\r", "-\t\t\t/* DWORD biClrUsed = 0 */\r", "-\t\t\tbmi[32] = bmi[33] = bmi[34] = bmi[35] = 0;\r", "-\t\t\t/* DWORD biClrImportant = 0 */\r", "-\t\t\tbmi[36] = bmi[37] = bmi[38] = bmi[39] = 0;\r", "-\r", "+\t\t\tBITMAPINFOHEADER bmiHeader = new BITMAPINFOHEADER();\r", "+\t\t\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;\r", "+\t\t\tbmiHeader.biWidth = width;\r", "+\t\t\tbmiHeader.biHeight = -height;\r", "+\t\t\tbmiHeader.biPlanes = 1;\r", "+\t\t\tbmiHeader.biBitCount = (short)depth;\r", "+\t\t\tbmiHeader.biCompression = OS.BI_RGB;\r", "+\t\t\tbyte[] bmi = new byte[BITMAPINFOHEADER.sizeof + numColors * 4];\r", "+\t\t\tOS.MoveMemory(bmi, bmiHeader, BITMAPINFOHEADER.sizeof);\r", "+\t\t\t\r", "-\t\t\timageSize = (bmi[20] & 0xFF) | ((bmi[21] & 0xFF) << 8) | ((bmi[22] & 0xFF) << 16) | ((bmi[23] & 0xFF) << 24);\r", "+\t\t\tOS.MoveMemory(bmiHeader, bmi, BITMAPINFOHEADER.sizeof);\r", "+\t\t\timageSize = bmiHeader.biSizeImage;\r", "-\t\t\t\tbmi = new byte[48];\r", "-\t\t\t\t/* DWORD biSize = 40 */\r", "-\t\t\t\tbmi[0] = 40; bmi[1] = bmi[2] = bmi[3] = 0;\r", "-\t\t\t\t/* LONG biWidth = width */\r", "-\t\t\t\tbmi[4] = (byte)(width & 0xFF);\r", "-\t\t\t\tbmi[5] = (byte)((width >> 8) & 0xFF);\r", "-\t\t\t\tbmi[6] = (byte)((width >> 16) & 0xFF);\r", "-\t\t\t\tbmi[7] = (byte)((width >> 24) & 0xFF);\r", "-\t\t\t\t/* LONG biHeight = height */\r", "-\t\t\t\tbmi[8] = (byte)(-height & 0xFF);\r", "-\t\t\t\tbmi[9] = (byte)((-height >> 8) & 0xFF);\r", "-\t\t\t\tbmi[10] = (byte)((-height >> 16) & 0xFF);\r", "-\t\t\t\tbmi[11] = (byte)((-height >> 24) & 0xFF);\r", "-\t\t\t\t/* WORD biPlanes = 1 */\r", "-\t\t\t\tbmi[12] = 1;\r", "-\t\t\t\tbmi[13] = 0;\r", "-\t\t\t\t/* WORD biBitCount = 1 */\r", "-\t\t\t\tbmi[14] = 1;\r", "-\t\t\t\tbmi[15] = 0;\r", "-\t\t\t\t/* DWORD biCompression = BI_RGB = 0 */\r", "-\t\t\t\tbmi[16] = bmi[17] = bmi[18] = bmi[19] = 0;\r", "-\t\t\t\t/* DWORD biSizeImage = 0 (default) */\r", "-\t\t\t\tbmi[20] = bmi[21] = bmi[22] = bmi[23] = 0;\r", "-\t\t\t\t/* LONG biXPelsPerMeter = 0 */\r", "-\t\t\t\tbmi[24] = bmi[25] = bmi[26] = bmi[27] = 0;\r", "-\t\t\t\t/* LONG biYPelsPerMeter = 0 */\r", "-\t\t\t\tbmi[28] = bmi[29] = bmi[30] = bmi[31] = 0;\r", "-\t\t\t\t/* DWORD biClrUsed = 0 */\r", "-\t\t\t\tbmi[32] = bmi[33] = bmi[34] = bmi[35] = 0;\r", "-\t\t\t\t/* DWORD biClrImportant = 0 */\r", "-\t\t\t\tbmi[36] = bmi[37] = bmi[38] = bmi[39] = 0;\r", "-\t\t\t\t/* First color black */\r", "-\t\t\t\tbmi[40] = bmi[41] = bmi[42] = bmi[43] = 0;\r", "-\t\t\t\t/* Second color white */\r", "-\t\t\t\tbmi[44] = bmi[45] = bmi[46] = (byte)0xFF;\r", "-\t\t\t\tbmi[47] = 0;\r", "+\t\t\t\tbmiHeader = new BITMAPINFOHEADER();\r", "+\t\t\t\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;\r", "+\t\t\t\tbmiHeader.biWidth = width;\r", "+\t\t\t\tbmiHeader.biHeight = -height;\r", "+\t\t\t\tbmiHeader.biPlanes = 1;\r", "+\t\t\t\tbmiHeader.biBitCount = 1;\r", "+\t\t\t\tbmiHeader.biCompression = OS.BI_RGB;\r", "+\t\t\t\tbmi = new byte[BITMAPINFOHEADER.sizeof + 8];\r", "+\t\t\t\tOS.MoveMemory(bmi, bmiHeader, BITMAPINFOHEADER.sizeof);\r", "+\t\t\t\t\r", "+\t\t\t\t/* First color black, second color white */\r", "+\t\t\t\tint offset = BITMAPINFOHEADER.sizeof;\r", "+\t\t\t\tbmi[offset + 4] = bmi[offset + 5] = bmi[offset + 6] = (byte)0xFF;\r", "+\t\t\t\tbmi[offset + 7] = 0;\r", "-\t\t\t\timageSize = (bmi[20] & 0xFF) | ((bmi[21] & 0xFF) << 8) | ((bmi[22] & 0xFF) << 16) | ((bmi[23] & 0xFF) << 24);\r", "+\t\t\t\tOS.MoveMemory(bmiHeader, bmi, BITMAPINFOHEADER.sizeof);\r", "+\t\t\t\timageSize = bmiHeader.biSizeImage;\r", "+\t\t\tBITMAPINFOHEADER bmiHeader = null;\r", "-\t\t\t\tbmi = new byte[40 + numColors * 4];\r", "-\t\t\t\t/* DWORD biSize = 40 */\r", "-\t\t\t\tbmi[0] = 40; bmi[1] = bmi[2] = bmi[3] = 0;\r", "-\t\t\t\t/* LONG biWidth = width */\r", "-\t\t\t\tbmi[4] = (byte)(width & 0xFF);\r", "-\t\t\t\tbmi[5] = (byte)((width >> 8) & 0xFF);\r", "-\t\t\t\tbmi[6] = (byte)((width >> 16) & 0xFF);\r", "-\t\t\t\tbmi[7] = (byte)((width >> 24) & 0xFF);\r", "-\t\t\t\t/* LONG biHeight = height */\r", "-\t\t\t\tbmi[8] = (byte)(-height & 0xFF);\r", "-\t\t\t\tbmi[9] = (byte)((-height >> 8) & 0xFF);\r", "-\t\t\t\tbmi[10] = (byte)((-height >> 16) & 0xFF);\r", "-\t\t\t\tbmi[11] = (byte)((-height >> 24) & 0xFF);\r", "-\t\t\t\t/* WORD biPlanes = 1 */\r", "-\t\t\t\tbmi[12] = 1;\r", "-\t\t\t\tbmi[13] = 0;\r", "-\t\t\t\t/* WORD biBitCount = bm.bmPlanes * bm.bmBitsPixel */\r", "-\t\t\t\tbmi[14] = (byte)(depth & 0xFF);\r", "-\t\t\t\tbmi[15] = (byte)((depth >> 8) & 0xFF);\r", "-\t\t\t\t/* DWORD biCompression = BI_RGB = 0 */\r", "-\t\t\t\tbmi[16] = bmi[17] = bmi[18] = bmi[19] = 0;\r", "-\t\t\t\t/* DWORD biSizeImage = 0 (default) */\r", "-\t\t\t\tbmi[20] = bmi[21] = bmi[22] = bmi[23] = 0;\r", "-\t\t\t\t/* LONG biXPelsPerMeter = 0 */\r", "-\t\t\t\tbmi[24] = bmi[25] = bmi[26] = bmi[27] = 0;\r", "-\t\t\t\t/* LONG biYPelsPerMeter = 0 */\r", "-\t\t\t\tbmi[28] = bmi[29] = bmi[30] = bmi[31] = 0;\r", "-\t\t\t\t/* DWORD biClrUsed = 0 */\r", "-\t\t\t\tbmi[32] = bmi[33] = bmi[34] = bmi[35] = 0;\r", "-\t\t\t\t/* DWORD biClrImportant = 0 */\r", "-\t\t\t\tbmi[36] = bmi[37] = bmi[38] = bmi[39] = 0;\r", "+\t\t\t\tbmiHeader = new BITMAPINFOHEADER();\r", "+\t\t\t\tbmiHeader.biSize = BITMAPINFOHEADER.sizeof;\r", "+\t\t\t\tbmiHeader.biWidth = width;\r", "+\t\t\t\tbmiHeader.biHeight = -height;\r", "+\t\t\t\tbmiHeader.biPlanes = 1;\r", "+\t\t\t\tbmiHeader.biBitCount = (short)depth;\r", "+\t\t\t\tbmiHeader.biCompression = OS.BI_RGB;\r", "+\t\t\t\tbmi = new byte[BITMAPINFOHEADER.sizeof + numColors * 4];\r", "+\t\t\t\tOS.MoveMemory(bmi, bmiHeader, BITMAPINFOHEADER.sizeof);\r", "-\t\t\t\timageSize = (bmi[20] & 0xFF) | ((bmi[21] & 0xFF) << 8) | ((bmi[22] & 0xFF) << 16) | ((bmi[23] & 0xFF) << 24);\r", "+\t\t\t\tOS.MoveMemory(bmiHeader, bmi, BITMAPINFOHEADER.sizeof);\r", "+\t\t\t\timageSize = bmiHeader.biSizeImage;\r", "-\t\t\t\t\tint srcIndex = 40;\r", "+\t\t\t\t\tint srcIndex = BITMAPINFOHEADER.sizeof;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "edd90b576bffd7100b44498ba532e711", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "03f23aa773469b8a3f3e0a770076508526525b40", "commitAfterChange": "1051f4ce684a4239d50c42e8ac0e4ce13591cb56", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 14, "signatureBeforeChange": " void drawBorder(GC gc)", "signatureAfterChange": " void drawBorder(GC gc)", "diff": ["-\t\tint y = onBottom ? size.y - borderBottom - tabHeight : tabHeight - SELECTION_BORDER + 1;", "+\t\tint y = onBottom ? size.y - borderBottom - tabHeight - HIGHLIGHT_HEADER : borderTop + tabHeight + 1;", "-\t\tint height = SELECTION_BORDER - 1;", "+\t\tint height = HIGHLIGHT_HEADER - 1;", "-\t\ty = (onBottom) ? size.y - borderBottom - tabHeight + SELECTION_BORDER - 1 : borderTop + tabHeight - SELECTION_BORDER;", "+\t\ty = (onBottom) ? size.y - borderBottom - tabHeight - 1 : borderTop + tabHeight;", "-\t\tint y = onBottom ? size.y - borderBottom - tabHeight : borderTop + tabHeight - SELECTION_BORDER + 1;", "+\t\tint y = onBottom ? size.y - borderBottom - tabHeight - HIGHLIGHT_HEADER : borderTop + tabHeight + 1;", "-\t\tint height = SELECTION_BORDER - 1;", "+\t\tint height = HIGHLIGHT_HEADER - 1;", "-\t\tdrawSelectionBackground(gc, y, shape);", "+\t\tdrawSelectionBackground(gc, shape);", "-\t\t\t", "-\t\t\tshape[index++] = itemY + SELECTION_BORDER - 1;", "+\t\t\tshape[index++] = itemY - 1;", "-\t\t\tshape[index++] = itemY + SELECTION_BORDER - 1;", "-\t\t\t", "+\t\t\tshape[index++] = itemY - 1;", "-\t\t\t\tshape[index++]=itemX + left[2*i];", "-\t\t\t\tshape[index++]=itemY + itemH + left[2*i+1]-1;", "+\t\t\t\tshape[index++] = itemX + left[2*i];", "+\t\t\t\tshape[index++] = itemY + itemH + left[2*i+1]-1;", "-\t\t\t\tshape[index++]=itemX + itemW - extra + right[2*i];", "-\t\t\t\tshape[index++]=itemY + right[2*i+1] - 2;", "-\t\t\t}\t", "+\t\t\t\tshape[index++] = itemX + itemW - extra + right[2*i];", "+\t\t\t\tshape[index++] = itemY + right[2*i+1] - 2;", "+\t\t\t}", "-\t\t\tint rightTabEdge = size.x - borderRight - chevronRect.width - closeRect.width - 1;", "+\t\t\tint rightTabEdge = size.x - borderRight - chevronRect.width - expandRect.width - closeRect.width - 1;", "-\t\t\t\t\t\ttemp = itemY + SELECTION_BORDER - 1;", "+\t\t\t\t\t\ttemp = itemY - 1;", "-\t\t\tshape[index++] = itemY + SELECTION_BORDER - 1;", "+\t\t\tshape[index++] = itemY - 1;", "-\t\t\tshape[index++] = itemY + SELECTION_BORDER - 1;", "+\t\t\tshape[index++] = itemY - 1;", "-\t\t\tshape[index++] = itemY + itemH - SELECTION_BORDER;", "+\t\t\tshape[index++] = itemY + itemH;", "-\t\t\tshape[index++] = itemY + itemH - SELECTION_BORDER;", "+\t\t\tshape[index++] = itemY + itemH;", "-\t\t\t\tshape[index++]=itemX + left[2*i];", "-\t\t\t\tshape[index++]=itemY + left[2*i+1];", "+\t\t\t\tshape[index++] = itemX + left[2*i];", "+\t\t\t\tshape[index++] = itemY + left[2*i+1];", "-\t\t\t\tshape[index++]=itemX + itemW - extra + right[2*i];", "-\t\t\t\tshape[index++]=itemY + right[2*i+1];", "+\t\t\t\tshape[index++] = itemX + itemW - extra + right[2*i];", "+\t\t\t\tshape[index++] = itemY + right[2*i+1];", "-\t\t\tint rightTabEdge = size.x - borderRight - chevronRect.width - closeRect.width - 1;", "+\t\t\tint rightTabEdge = size.x - borderRight - chevronRect.width - expandRect.width - closeRect.width - 1;", "-\t\t\t\t\t\ttemp = itemY + itemH - SELECTION_BORDER;", "+\t\t\t\t\t\ttemp = itemY + itemH;", "-\t\t\tshape[index++] = itemY + item.height - SELECTION_BORDER;", "+\t\t\tshape[index++] = itemY + itemH;", "-\t\t\tshape[index++] = itemY + item.height - SELECTION_BORDER;", "+\t\t\tshape[index++] = itemY + itemH;", "-\t//draw border around outside", "+\t//draw 1 pixel border around outside for flat look", "+\tif (borderLeft == 1) {", "+\t\tdrawFlatBorder(gc);", "+\t} else {", "+\t\tdraw3DBorder(gc);", "+\t}", "+}", "-\t\tgc.drawLine(0, borderTop - 1, 0, size.y - tabHeight - borderBottom + SELECTION_BORDER - 1); // left", "-\t\tgc.drawLine(size.x - borderRight, borderTop - 1, size.x - borderRight, size.y - tabHeight - borderBottom + SELECTION_BORDER - 1); // right", "-\t\tgc.drawLine(0, borderTop - 1, size.x - borderRight, borderTop - 1); // top", "-\t\t\tint x = 0;", "-\t\t\tint y = size.y - borderBottom - tabHeight + SELECTION_BORDER;", "-\t\t\tint height = tabHeight - SELECTION_BORDER - 1;", "-\t\tgc.drawLine(borderLeft - 1, borderTop + tabHeight - SELECTION_BORDER, borderLeft - 1, size.y - borderBottom); // left", "-\t\tgc.drawLine(size.x - borderRight, borderTop + tabHeight - SELECTION_BORDER, size.x - borderRight, size.y - borderBottom); // right", "-\t\tgc.drawLine(borderLeft - 1, size.y - borderBottom, size.x - borderRight, size.y - borderBottom); //bottom", "-\t\t\tint x = 0;", "-\t\t\tint height = tabHeight - SELECTION_BORDER - 1;", "-\t", "-\tif (borderRight == 1) return;", "-\t", "-\t// Draw drop shadow", "-\tif (onBottom) {", "-\t\tcolor = getParent().getBackground();", "-\t\tgc.setForeground(color);", "-\t\t", "-\t\tgc.drawLine(0, 0, 1, 0);//top left", "-\t\tgc.drawPoint(0, 1);//top left", "-\t\tgc.drawLine(size.x - borderRight + 1, size.y - tabHeight - borderBottom + SELECTION_BORDER - 2, size.x - borderRight + 1, size.y); //bottom right", "-\t\tgc.drawLine(size.x - borderRight + 2, size.y - tabHeight - borderBottom + SELECTION_BORDER - 2, size.x - borderRight + 2, size.y);//bottom right", "-\t\t", "-\t\tcolor = showBorder ? border2Color : getParent().getBackground();", "-\t\tgc.setForeground(color);", "-\t\t", "-\t\tgc.drawLine(size.x - borderRight + 1, borderTop - 1, size.x - borderRight + 1, size.y - tabHeight - borderBottom + SELECTION_BORDER - 2); // right 1", "-\t\tgc.drawLine(1, borderTop - 2, size.x - borderRight + 1, borderTop - 2); // top 1", "-\t\t", "-\t\tcolor = showBorder ? border3Color : getParent().getBackground();", "-\t\tgc.setForeground(color);", "-\t\t", "-\t\tgc.drawLine(size.x - borderRight + 2, borderTop - 2, size.x - borderRight + 2, size.y - tabHeight - borderBottom + SELECTION_BORDER - 3); // right 2", "-\t\tgc.drawLine(2, borderTop - 3, size.x - borderRight + 2, borderTop - 3); // top 2", "-\t\tcolor = getParent().getBackground();", "-\t\tgc.setForeground(color);", "-\t\t", "-\t\tgc.drawLine(size.x - 1, 0, size.x - 1, borderTop + tabHeight - SELECTION_BORDER + 1);//top right", "-\t\tgc.drawLine(size.x - 2, 0, size.x - 2, borderTop + tabHeight - SELECTION_BORDER);//top right", "-\t\tgc.drawPoint(0, size.y - borderBottom + 1); //bottom left", "-\t\tgc.drawLine(0, size.y - borderBottom + 2, 1, size.y - borderBottom + 2);//bottom left", "-\t\t", "-\t\tcolor = showBorder ? border2Color : getParent().getBackground();", "-\t\tgc.setForeground(color);", "-\t\t", "-\t\tgc.drawLine(size.x - borderRight + 1, borderTop + tabHeight - SELECTION_BORDER + 1, size.x - borderRight + 1, size.y - borderBottom + 1); // right 1", "-\t\tgc.drawLine(1, size.y - borderBottom + 1, size.x - borderRight + 1, size.y - borderBottom + 1); //bottom 1", "-\t\t", "-\t\tcolor = showBorder ? border3Color : getParent().getBackground();", "-\t\tgc.setForeground(color);", "-\t\t", "-\t\tgc.drawLine(size.x - borderRight + 2, borderTop + tabHeight - SELECTION_BORDER + 2, size.x - borderRight + 2, size.y - borderBottom + 2); // right 2", "-\t\tgc.drawLine(2, size.y - borderBottom + 2, size.x - borderRight + 2, size.y - borderBottom + 2); //bottom 2"]}], "num": 25598}
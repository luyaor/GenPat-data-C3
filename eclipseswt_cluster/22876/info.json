{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d257fac41badeed8b1cf5620b609ae3b", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "998ea8425ac12666eb8d449bc95eb1ae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon2/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "73df461e04188c5c8c9f867e48d65971dd874f96", "commitAfterChange": "f60b89c008aac38616733831910806211a6fecc1", "methodNumberBeforeChange": 68, "methodNumberAfterChange": 68, "signatureBeforeChange": "  void showIndex (int index)", "signatureAfterChange": "  void showIndex (int index)", "diff": ["-\t\t//TODO - doesn't work for SWT.CHECK", "+\t\tRectangle rect = getClientArea ();", "+\t\tif (rect.height < getItemHeight ()) {", "+\t\t\tshowIndex = index;", "+\t\t\treturn;", "+\t\t}", "+\t\tshowIndex = -1;", "+\t\tTableItem item = items [index];", "+\t\tRectangle itemRect = item.getBounds (0);", "+\t\tif (!itemRect.isEmpty()) {", "+\t\t\tif (rect.contains (itemRect.x, itemRect.y)", "+\t\t\t\t&& rect.contains (itemRect.x, itemRect.y + itemRect.height)) return;", "+\t\t}", "-\t\tshort [] width = new short [1];", "-\t\tOS.GetDataBrowserTableViewNamedColumnWidth (handle, id, width);", "-\t\tRect rect = new Rect (), inset = new Rect ();", "-\t\tOS.GetControlBounds (handle, rect);", "-\t\tOS.GetDataBrowserScrollBarInset (handle, inset);", "-\t\tOS.SetDataBrowserTableViewNamedColumnWidth (handle, id, (short)(rect.right - rect.left - inset.left - inset.right));", "-\t\tOS.RevealDataBrowserItem (handle, index + 1, COLUMN_ID, (byte) (OS.kDataBrowserRevealWithoutSelecting | OS.kDataBrowserRevealAndCenterInView));", "-\t\tOS.SetDataBrowserTableViewNamedColumnWidth (handle, id, (short)width [0]);", "+\t\tif ((style & SWT.CHECK) != 0) id = CHECK_COLUMN_ID;", "+\t\tOS.RevealDataBrowserItem (handle, index + 1, id, (byte) OS.kDataBrowserRevealWithoutSelecting);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2ff455d44001a93fb097c29248021173", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 37, "signatureBeforeChange": " public FontMetrics getFontMetrics()", "signatureAfterChange": " public FontMetrics getFontMetrics()", "diff": ["-\t", "-\ttry {", "-\t\tfocus(false, null);", "-\t\tinstallFont();", "-\t\tshort[] fontInfo= new short[4];", "-\t\tOS.GetFontInfo(fontInfo);\t// FontInfo", "-\t\tString s= \"abcdefghijklmnopqrstuvwxyz\";", "-\t\tint width= OS.TextWidth(s, data.font.fID, data.font.fSize, data.font.fFace) / 26;", "-\t\treturn FontMetrics.carbon_new(fontInfo[0], fontInfo[1], width, fontInfo[3], fontInfo[0]+fontInfo[1]);", "-\t} finally {", "-\t\tunfocus(false);\t", "-\t}", "+\tFont font = data.font;", "+\tFontInfo info = new FontInfo();", "+\tOS.FetchFontInfo(font.id, font.size, font.style, info);", "+\tFontMetrics fm = new FontMetrics();", "+\tfm.ascent = info.ascent;", "+\tfm.descent = info.descent;", "+\tfm.leading = info.leading;", "+\t/* This code is intentionaly comment. Not right for fixed width fonts. */", "+\t//fm.averageCharWidth = info.widMax / 3;", "+\tString s = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"; ", "+\tfm.averageCharWidth = stringExtent(s).x / s.length();", "+\tfm.height = fm.ascent + fm.descent;", "+\treturn fm;"]}], "num": 22876}
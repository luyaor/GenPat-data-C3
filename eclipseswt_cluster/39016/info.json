{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3ceb0c5b78e71f49db1eb49131fdffc4", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "273f99e9f3ea47037d6527f5ac29e39d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 50, "signatureBeforeChange": " void doPaint (Event event)", "signatureAfterChange": " void paint(Event event)", "diff": ["-}", "-void doPaint (Event event) {", "-\tGC gc = event.gc;", "-\tRectangle clipping = gc.getClipping ();", "-\tint numColumns = getColumnCount();", "-\tint startColumn = -1, endColumn = -1;", "-\tif (numColumns > 0) {", "-\t\tstartColumn = computeColumnIntersect(clipping.x, 0);", "-\t\tif (startColumn != -1) {\t/* the click fell within a column's bounds */", "-\t\t\tendColumn = computeColumnIntersect(clipping.x + clipping.width, startColumn);", "-\t\t\tif (endColumn == -1) endColumn = numColumns - 1;", "-\t\t}", "-\t} else {", "-\t\tstartColumn = endColumn = 0;", "-\t}", "-", "-\t/* repaint grid lines if necessary */", "-\tif (linesVisible) {", "-\t\tColor oldForeground = gc.getForeground();", "-\t\tif (numColumns > 0 && startColumn != -1) {", "-\t\t\tgc.setForeground(LineColor);", "-\t\t\t/* vertical column lines */", "-\t\t\tfor (int i = startColumn; i <= endColumn; i++) {", "-\t\t\t\tint x = columns[i].getX() + columns[i].width - 1;", "-\t\t\t\tgc.drawLine(x, clipping.y, x, clipping.y + clipping.height);", "-\t\t\t}", "-\t\t}", "-\t\t/* horizontal item lines */", "-\t\tint bottomY = clipping.y + clipping.height;", "-\t\tint rightX = clipping.x + clipping.width;", "-\t\tint headerHeight = getHeaderHeight();", "-\t\tint y = (clipping.y - headerHeight) / itemHeight * itemHeight + headerHeight;", "-\t\twhile (y <= bottomY) {", "-\t\t\tgc.drawLine(clipping.x, y, rightX, y);", "-\t\t\ty += itemHeight;", "-\t\t}", "-\t\tgc.setForeground(oldForeground);", "-\t}", "-\t", "-\t/* Determine the TreeItems to be painted */", "-\tint startIndex = (clipping.y - getHeaderHeight()) / itemHeight + topIndex;", "-\tif (!(0 <= startIndex && startIndex < availableItems.length)) return;\t/* no items to paint */", "-\tint endIndex = startIndex + Compatibility.ceil (clipping.height, itemHeight);", "-\tendIndex = Math.min (endIndex, availableItems.length - 1);", "-\tint current = 0;", "-\tfor (int i = startIndex; i <= endIndex; i++) {", "-\t\tTreeItem2 item = availableItems[i];", "-\t\tif (startColumn == -1) {", "-\t\t\t/* indicates that region to paint is to the right of the last column */", "-\t\t\titem.paint(gc, null, false);", "-\t\t} else {", "-\t\t\tif (numColumns == 0) {", "-\t\t\t\titem.paint(gc, null, true);", "-\t\t\t} else {", "-\t\t\t\tfor (int j = startColumn; j <= endColumn; j++) {", "-\t\t\t\t\titem.paint(gc, columns[j], true);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tif (isFocusControl()) {", "-\t\t\tif (focusItem == item) {", "-\t\t\t\tRectangle focusBounds = item.getFocusBounds();", "-\t\t\t\tgc.setClipping (focusBounds);", "-\t\t\t\tint oldStyle = gc.getLineStyle();", "-\t\t\t\tgc.setLineStyle(SWT.LINE_DOT);", "-\t\t\t\tgc.drawFocus(focusBounds.x, focusBounds.y, focusBounds.width, focusBounds.height);", "-\t\t\t\tgc.setLineStyle(oldStyle);", "-\t\t\t}", "-\t\t\tif (insertMarkItem == item) {", "-\t\t\t\tRectangle focusBounds = item.getFocusBounds();", "-\t\t\t\tgc.setClipping (focusBounds);", "-\t\t\t\tif (insertMarkPrecedes) {", "-\t\t\t\t\tgc.drawLine(focusBounds.x, focusBounds.y, focusBounds.x + focusBounds.width, focusBounds.y);", "-\t\t\t\t} else {", "-\t\t\t\t\tint y = focusBounds.y + focusBounds.height - 1;", "-\t\t\t\t\tgc.drawLine(focusBounds.x, y, focusBounds.x + focusBounds.width, y);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "-}", "+ */", "+void paint(Event event) {", "+\tint visibleRange[] = getIndexRange(event.getBounds());", "+\t", "+\tpaintItems(event.gc, visibleRange[0], visibleRange[1] + 1); // + 1 to paint the vertical line ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// connection the last item we really ", "+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// want to paint with the item after that.", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f7be5030edfd0cfc729a2dcc2d8d77cd", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder2.java", "commitBeforeChange": "65aaf6e9768e61429e9ffb0c0ae5577af65eba85", "commitAfterChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 16, "signatureBeforeChange": " void drawBorder(GC gc)", "signatureAfterChange": " void drawBody(Event event)", "diff": ["-void drawBorder(GC gc) {", "+}", "+void drawBody(Event event) {", "+\tGC gc = event.gc;", "+\tPoint size = getSize();", "+\t", "-\t\tColor parentBackground = getParent().getBackground();", "-\t\tColor color = borderColor1;", "-\t\tgc.setForeground(color);", "+\t\tgc.setForeground(borderColor1);", "+\t\tint x1 = borderLeft - 1;", "+\t\tint x2 = size.x - borderRight;", "+\t\tint y1 = onBottom ? borderTop - 1 : borderTop + tabHeight;", "+\t\tint y2 = onBottom ? size.y - tabHeight - borderBottom - 1 : size.y - borderBottom;", "+\t\tgc.drawLine(x1, y1, x1, y2); // left", "+\t\tgc.drawLine(x2, y1, x2, y2); // right", "-\t\t\tint x1 = 0;", "-\t\t\tint x2 = size.x - borderRight;", "-\t\t\tint y1 = borderTop - 1;", "-\t\t\tint y2 = size.y - tabHeight - borderBottom - 1;", "-\t\t\tgc.drawLine(x1, y1, x1, y2); // left", "-\t\t\tgc.drawLine(x2, y1, x2, y2); // right", "-\t\t\tif (single) {", "-\t\t\t\tint x = Math.max(0, borderLeft - 1);", "-\t\t\t\tint y = size.y - borderBottom - tabHeight;", "-\t\t\t\tint width = size.x - borderLeft - borderRight + 1;", "-\t\t\t\tint height = tabHeight - 1;", "-\t\t\t\tint[] shape = new int[BOTTOM_LEFT_OUTSIDE_CORNER.length + BOTTOM_RIGHT_OUTSIDE_CORNER.length + 4];", "-\t\t\t\tint index = 0;", "-\t\t\t\tshape[index++] = x;", "-\t\t\t\tshape[index++] = y;", "-\t\t\t\tfor (int i = 0; i < BOTTOM_LEFT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\t\tshape[index++] = x+BOTTOM_LEFT_OUTSIDE_CORNER[2*i];", "-\t\t\t\t\tshape[index++] = y+height+BOTTOM_LEFT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tfor (int i = 0; i < BOTTOM_RIGHT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\t\tshape[index++] = x+width+BOTTOM_RIGHT_OUTSIDE_CORNER[2*i];", "-\t\t\t\t\tshape[index++] = y+height+BOTTOM_RIGHT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tshape[index++] = x+width;", "-\t\t\t\tshape[index++] = y-1;", "-\t\t\t", "-\t\t\t\tantialias(shape, borderColor1.getRGB(), getBackground().getRGB(), parentBackground.getRGB(), gc);", "-\t\t\t\tgc.setForeground(borderColor1);", "-\t\t\t\tgc.drawPolyline(shape);", "-\t\t\t}", "-\t\t\tint x1 = borderLeft - 1;", "-\t\t\tint x2 = size.x - borderRight;", "-\t\t\tint y1 = borderTop + tabHeight;", "-\t\t\tint y2 = size.y - borderBottom;", "-\t\t\tgc.drawLine(x1, y1, x1, y2); // left", "-\t\t\tgc.drawLine(x2, y1, x2, y2); // right", "-\t\t\tgc.drawLine(x1, y2, x2, y2); //bottom", "-\t\t\tif (single) {", "-\t\t\t\tint x = Math.max(0, borderLeft - 1);", "-\t\t\t\tint y = borderTop;", "-\t\t\t\tint width = size.x - borderLeft - borderRight + 1;", "-\t\t\t\tint height = tabHeight - 1;", "-\t\t\t\tint[] shape = new int[TOP_LEFT_OUTSIDE_CORNER.length + TOP_RIGHT_OUTSIDE_CORNER.length + 4];", "-\t\t\t\tint index = 0;", "-\t\t\t\tshape[index++] = x;", "-\t\t\t\tshape[index++] = y+height;", "-\t\t\t\tfor (int i = 0; i < TOP_LEFT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\t\tshape[index++] = x+TOP_LEFT_OUTSIDE_CORNER[2*i];", "-\t\t\t\t\tshape[index++] = y+TOP_LEFT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tfor (int i = 0; i < TOP_RIGHT_OUTSIDE_CORNER.length/2; i++) {", "-\t\t\t\t\tshape[index++] = x+width+TOP_RIGHT_OUTSIDE_CORNER[2*i];", "-\t\t\t\t\tshape[index++] = y+TOP_RIGHT_OUTSIDE_CORNER[2*i+1];", "-\t\t\t\t}", "-\t\t\t\tshape[index++] = x+width;", "-\t\t\t\tshape[index++] = y+height+1;", "-\t\t\t\t", "-\t\t\t\tantialias(shape, borderColor1.getRGB(), getBackground().getRGB(), parentBackground.getRGB(), gc);", "-\t\t\t\tgc.setForeground(borderColor1);", "-\t\t\t\tgc.drawPolyline(shape);", "-\t\t\t}", "+\t\t\tgc.drawLine(x1, y2, x2, y2); // bottom"]}], "num": 39016}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0bb1ca020f17d9831d93c6e118e72030", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "635312235cfc2074afcd0edc6b1fe305", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "b41f60e899b20029f1cfe5a40036031007ced518", "commitAfterChange": "44f007d08589286b5159b2d9ba31e92bef22239b", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 53, "signatureBeforeChange": " void doArrowRight (int stateMask)", "signatureAfterChange": " void onArrowRight (int stateMask)", "diff": ["-}", "-void doArrowRight (int stateMask) {", "-\tif ((stateMask & SWT.CTRL) != 0) {", "-\t\t/* CTRL+Right Arrow, CTRL+Shift+Right Arrow */", "-\t\tScrollBar hBar = getHorizontalBar ();", "-\t\tint maximum = hBar.getMaximum ();", "-\t\tint clientWidth = getClientArea ().width;", "-\t\tif ((horizontalOffset + getClientArea ().width) == maximum) return;", "-\t\tint newSelection = Math.min (maximum - clientWidth, horizontalOffset + SIZE_HORIZONTALSCROLL);", "-\t\tRectangle clientArea = getClientArea ();", "-\t\tupdate ();", "-\t\tGC gc = new GC (this);", "-\t\tgc.copyArea (", "-\t\t\t0, 0,", "-\t\t\tclientArea.width, clientArea.height,", "-\t\t\thorizontalOffset - newSelection, 0);", "-\t\tgc.dispose ();", "-\t\tif (getHeaderVisible ()) {", "-\t\t\tclientArea = header.getClientArea ();", "-\t\t\theader.update ();", "-\t\t\tgc = new GC (header);", "-\t\t\tgc.copyArea (", "-\t\t\t\t0, 0,", "-\t\t\t\tclientArea.width, clientArea.height,", "-\t\t\t\thorizontalOffset - newSelection, 0);", "-\t\t\tgc.dispose();", "-\t\t}", "-\t\thorizontalOffset = newSelection;", "-\t\thBar.setSelection (horizontalOffset);", "-\t\treturn;", "-\t}", "-\t/* Right Arrow with no modifiers, Shift+Right Arrow */", "-\tTreeItem[] children = focusItem.items;", "-\tif (children.length == 0) return;", "-\tif (!focusItem.expanded) {", "-\t\tfocusItem.setExpanded (true);", "-\t\tEvent newEvent = new Event ();", "-\t\tnewEvent.item = focusItem;", "-\t\tinExpand = true;", "-\t\tsendEvent (SWT.Expand, newEvent);", "-\t\tinExpand = false;", "-\t\tif (isDisposed ()) return;", "-\t\tif (focusItem.items.length == 0) {", "-\t\t\tfocusItem.expanded = false;", "-\t\t}", "-\t\treturn;", "-\t}", "-\tselectItem (children [0], false);", "-\tsetFocusItem (children [0], true);", "-\tredrawItem (children [0].availableIndex, true);", "-\tshowItem (children [0]);", "-\tEvent newEvent = new Event ();", "-\tnewEvent.item = children [0];", "-\tsendEvent (SWT.Selection, newEvent);", "-}", "+}", "+void onArrowRight (int stateMask) {", "+\tif ((stateMask & SWT.CTRL) != 0) {", "+\t\t/* CTRL+Right Arrow, CTRL+Shift+Right Arrow */", "+\t\tScrollBar hBar = getHorizontalBar ();", "+\t\tint maximum = hBar.getMaximum ();", "+\t\tint clientWidth = getClientArea ().width;", "+\t\tif ((horizontalOffset + getClientArea ().width) == maximum) return;", "+\t\tint newSelection = Math.min (maximum - clientWidth, horizontalOffset + SIZE_HORIZONTALSCROLL);", "+\t\tRectangle clientArea = getClientArea ();", "+\t\tupdate ();", "+\t\tGC gc = new GC (this);", "+\t\tgc.copyArea (", "+\t\t\t0, 0,", "+\t\t\tclientArea.width, clientArea.height,", "+\t\t\thorizontalOffset - newSelection, 0);", "+\t\tgc.dispose ();", "+\t\tif (getHeaderVisible ()) {", "+\t\t\tclientArea = header.getClientArea ();", "+\t\t\theader.update ();", "+\t\t\tgc = new GC (header);", "+\t\t\tgc.copyArea (", "+\t\t\t\t0, 0,", "+\t\t\t\tclientArea.width, clientArea.height,", "+\t\t\t\thorizontalOffset - newSelection, 0);", "+\t\t\tgc.dispose();", "+\t\t}", "+\t\thorizontalOffset = newSelection;", "+\t\thBar.setSelection (horizontalOffset);", "+\t\treturn;", "+\t}", "+\t/* Right Arrow with no modifiers, Shift+Right Arrow */", "+\tTreeItem[] children = focusItem.items;", "+\tif (children.length == 0) return;", "+\tif (!focusItem.expanded) {", "+\t\tfocusItem.setExpanded (true);", "+\t\tEvent newEvent = new Event ();", "+\t\tnewEvent.item = focusItem;", "+\t\tinExpand = true;", "+\t\tsendEvent (SWT.Expand, newEvent);", "+\t\tinExpand = false;", "+\t\tif (isDisposed ()) return;", "+\t\tif (focusItem.items.length == 0) {", "+\t\t\tfocusItem.expanded = false;", "+\t\t}", "+\t\treturn;", "+\t}", "+\tselectItem (children [0], false);", "+\tsetFocusItem (children [0], true);", "+\tredrawItem (children [0].availableIndex, true);", "+\tshowItem (children [0]);", "+\tEvent newEvent = new Event ();", "+\tnewEvent.item = children [0];", "+\tsendEvent (SWT.Selection, newEvent);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e42075599e9923d5cca511acca8addfe", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "b41f60e899b20029f1cfe5a40036031007ced518", "commitAfterChange": "44f007d08589286b5159b2d9ba31e92bef22239b", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 52, "signatureBeforeChange": " void doArrowLeft (int stateMask)", "signatureAfterChange": " void onArrowLeft (int stateMask)", "diff": ["-}", "-void doArrowLeft (int stateMask) {", "-\tif ((stateMask & SWT.CTRL) != 0) {", "-\t\t/* CTRL+Left Arrow, CTRL+Shift+Left Arrow */", "-\t\tif (horizontalOffset == 0) return;", "-\t\tint newSelection = Math.max (0, horizontalOffset - SIZE_HORIZONTALSCROLL);", "-\t\tRectangle clientArea = getClientArea ();", "-\t\tupdate ();", "-\t\tGC gc = new GC (this);", "-\t\tgc.copyArea (", "-\t\t\t0, 0,", "-\t\t\tclientArea.width, clientArea.height,", "-\t\t\thorizontalOffset - newSelection, 0);", "-\t\tgc.dispose ();", "-\t\tif (getHeaderVisible ()) {", "-\t\t\theader.update ();", "-\t\t\tclientArea = header.getClientArea ();", "-\t\t\tgc = new GC (header);", "-\t\t\tgc.copyArea (", "-\t\t\t\t0, 0,", "-\t\t\t\tclientArea.width, clientArea.height,", "-\t\t\t\thorizontalOffset - newSelection, 0);", "-\t\t\tgc.dispose();", "-\t\t}", "-\t\thorizontalOffset = newSelection;", "-\t\tgetHorizontalBar ().setSelection (horizontalOffset);", "-\t\treturn;", "-\t}", "-\t/* Left Arrow with no modifiers, Shift+Left Arrow */", "-\tif (focusItem.expanded) {", "-\t\tfocusItem.setExpanded (false);", "-\t\tEvent newEvent = new Event ();", "-\t\tnewEvent.item = focusItem;", "-\t\tsendEvent (SWT.Collapse, newEvent);", "-\t\treturn;", "-\t}", "-\tTreeItem parentItem = focusItem.parentItem;", "-\tif (parentItem == null) return;", "-\t", "-\tselectItem (parentItem, false);", "-\tsetFocusItem (parentItem, true);", "-\tredrawItem (parentItem.availableIndex, true);", "-\tshowItem (parentItem);", "-\tEvent newEvent = new Event ();", "-\tnewEvent.item = this;", "-\tsendEvent (SWT.Selection, newEvent);", "-}", "+}", "+void onArrowLeft (int stateMask) {", "+\tif ((stateMask & SWT.CTRL) != 0) {", "+\t\t/* CTRL+Left Arrow, CTRL+Shift+Left Arrow */", "+\t\tif (horizontalOffset == 0) return;", "+\t\tint newSelection = Math.max (0, horizontalOffset - SIZE_HORIZONTALSCROLL);", "+\t\tRectangle clientArea = getClientArea ();", "+\t\tupdate ();", "+\t\tGC gc = new GC (this);", "+\t\tgc.copyArea (", "+\t\t\t0, 0,", "+\t\t\tclientArea.width, clientArea.height,", "+\t\t\thorizontalOffset - newSelection, 0);", "+\t\tgc.dispose ();", "+\t\tif (getHeaderVisible ()) {", "+\t\t\theader.update ();", "+\t\t\tclientArea = header.getClientArea ();", "+\t\t\tgc = new GC (header);", "+\t\t\tgc.copyArea (", "+\t\t\t\t0, 0,", "+\t\t\t\tclientArea.width, clientArea.height,", "+\t\t\t\thorizontalOffset - newSelection, 0);", "+\t\t\tgc.dispose();", "+\t\t}", "+\t\thorizontalOffset = newSelection;", "+\t\tgetHorizontalBar ().setSelection (horizontalOffset);", "+\t\treturn;", "+\t}", "+\t/* Left Arrow with no modifiers, Shift+Left Arrow */", "+\tif (focusItem.expanded) {", "+\t\tfocusItem.setExpanded (false);", "+\t\tEvent newEvent = new Event ();", "+\t\tnewEvent.item = focusItem;", "+\t\tsendEvent (SWT.Collapse, newEvent);", "+\t\treturn;", "+\t}", "+\tTreeItem parentItem = focusItem.parentItem;", "+\tif (parentItem == null) return;", "+\t", "+\tselectItem (parentItem, false);", "+\tsetFocusItem (parentItem, true);", "+\tredrawItem (parentItem.availableIndex, true);", "+\tshowItem (parentItem);", "+\tEvent newEvent = new Event ();", "+\tnewEvent.item = this;", "+\tsendEvent (SWT.Selection, newEvent);", "+}"]}], "num": 27488}
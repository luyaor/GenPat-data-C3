{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9620f8e0d8abeacd5bc12937c06378a7", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0673c66c8509ca20a2437461acb7c54e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/cocoa/org/eclipse/swt/browser/Safari.java", "commitBeforeChange": "4edc576de20a88abac088ae701d29ce3e54ede4f", "commitAfterChange": "c2ec875b36ecf39df432358c14d183b7d7f45fe0", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 50, "signatureBeforeChange": "  void decidePolicyForMIMEType(int type, int request, int frame, int listener)", "signatureAfterChange": "  void webView_decidePolicyForMIMEType_request_frame_decisionListener(int sender, int type, int request, int frame, int listenerID)", "diff": ["-void decidePolicyForMIMEType(int type, int request, int frame, int listener) {", "-\tboolean canShow = Cocoa.objc_msgSend(Cocoa.C_WebView, Cocoa.S_canShowMIMEType, type) != 0;", "-\tCocoa.objc_msgSend(listener, canShow ? Cocoa.S_use : Cocoa.S_download);", "+void webView_decidePolicyForMIMEType_request_frame_decisionListener(int sender, int type, int request, int frame, int listenerID) {", "+\tboolean canShow = WebView.canShowMIMEType(new NSString(type));", "+\tWebPolicyDecisionListener listener = new WebPolicyDecisionListener(listenerID);", "+\tif (canShow) {", "+\t\tlistener.use();", "+\t} else {", "+\t\tlistener.download();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4cc808e88858727bfe64969bd35152ae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "2cef3fa78da7f2885ce55fa509348982e00b2225", "commitAfterChange": "bbeab947327689cb203638e742e58f555e6c1b64", "methodNumberBeforeChange": 59, "methodNumberAfterChange": 72, "signatureBeforeChange": "  public void setSelectionBackground(Color[] colors, int[] percents)", "signatureAfterChange": " public void setBackground(Color[] colors, int[] percents, boolean vertical)", "diff": ["-", "-public void setSelectionBackground(Color[] colors, int[] percents) {", "+ */", "+public void setBackground(Color[] colors, int[] percents, boolean vertical) {", "-\t\t}", "-\t\tif (getDisplay().getDepth() < 15) {", "-\t\t\t// Don't use gradients on low color displays", "-\t\t\tcolors = new Color[] { colors[0] };", "-\t\t\tpercents = new int[] { };", "+\t\tif (getDisplay().getDepth() < 15) {", "+\t\t\t// Don't use gradients on low color displays", "+\t\t\tcolors = new Color[] {colors[0]};", "+\t\t\tpercents = new int[] {};", "+\t\t}", "-\tif (backgroundImage == null) {", "+\tif (bgImage == null) {", "-\t\t\tif (same) return;", "+\t\t\tif (same && this.gradientVertical == vertical) return;", "-\t\tbackgroundImage = null;", "+\t\tbgImage = null;", "-\t\tcloseBar.setBackground(background);", "+\t\tgradientVertical = false;", "+\t\tsetBackground((Color)null);", "-\t\tfor (int i = 0; i < colors.length; ++i)", "+\t\tfor (int i = 0; i < colors.length; ++i) {", "+\t\t}", "-\t\tfor (int i = 0; i < percents.length; ++i)", "+\t\tfor (int i = 0; i < percents.length; ++i) {", "-\t\tif (getDisplay().getDepth() < 15) closeBar.setBackground(background);", "-\t\telse closeBar.setBackground(gradientColors[gradientColors.length - 1]);", "+\t\t}", "+\t\tgradientVertical = vertical;", "+\t\tsetBackground(gradientColors[gradientColors.length-1]);", "-\tif (selectedIndex > -1) redrawTabArea(selectedIndex);", "+\tredraw();"]}], "num": 16713}
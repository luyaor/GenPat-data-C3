{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2edac8587b487aa9b1d908c31c8247c6", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9f92c2597aa77acaf5c2de906f64916a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.snippets/src/org/eclipse/swt/snippets/Snippet91.java", "commitBeforeChange": "4b6c0bb188dcf4c75e872791a1a96e0cf90ea5e8", "commitAfterChange": "70f671a7e48de4a3d784b4fa730d30a72b03432f", "methodNumberBeforeChange": 0, "methodNumberAfterChange": 0, "signatureBeforeChange": "  public static void main (String [] args)", "signatureAfterChange": "  public static void main (String [] args)", "diff": ["-\tDisplay display = Display.getDefault ();", "+\tfinal Display display = Display.getDefault ();", "-\t\t\tevent.feedback = DND.FEEDBACK_EXPAND | DND.FEEDBACK_SCROLL | DND.FEEDBACK_SELECT;", "+\t\t\tevent.feedback = DND.FEEDBACK_EXPAND | DND.FEEDBACK_SCROLL;", "+\t\t\tif (event.item != null) {", "+\t\t\t\tTreeItem item = (TreeItem)event.item;", "+\t\t\t\tPoint pt = display.map(null, tree, event.x, event.y);", "+\t\t\t\tRectangle bounds = item.getBounds();", "+\t\t\t\tif (pt.y < bounds.y + bounds.height/3) {", "+\t\t\t\t\tevent.feedback |= DND.FEEDBACK_INSERT_BEFORE;", "+\t\t\t\t} else if (pt.y > bounds.y + 2*bounds.height/3) {", "+\t\t\t\t\tevent.feedback |= DND.FEEDBACK_INSERT_AFTER;", "+\t\t\t\t} else {", "+\t\t\t\t\tevent.feedback |= DND.FEEDBACK_SELECT;", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\t\tTreeItem parent = (TreeItem)event.item;", "-\t\t\t\tTreeItem item = new TreeItem(parent, SWT.NONE);", "-\t\t\t\titem.setText(text);", "+\t\t\t\tTreeItem item = (TreeItem)event.item;", "+\t\t\t\tPoint pt = display.map(null, tree, event.x, event.y);", "+\t\t\t\tRectangle bounds = item.getBounds();", "+\t\t\t\tTreeItem parent = item.getParentItem();", "+\t\t\t\tif (parent != null) {", "+\t\t\t\t\tTreeItem[] items = parent.getItems();", "+\t\t\t\t\tint index = 0;", "+\t\t\t\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\t\t\t\tif (items[i] == item) {", "+\t\t\t\t\t\t\tindex = i;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (pt.y < bounds.y + bounds.height/3) {", "+\t\t\t\t\t\tTreeItem newItem = new TreeItem(parent, SWT.NONE, index);", "+\t\t\t\t\t\tnewItem.setText(text);", "+\t\t\t\t\t} else if (pt.y > bounds.y + 2*bounds.height/3) {", "+\t\t\t\t\t\tTreeItem newItem = new TreeItem(parent, SWT.NONE, index+1);", "+\t\t\t\t\t\tnewItem.setText(text);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tTreeItem newItem = new TreeItem(item, SWT.NONE);", "+\t\t\t\t\t\tnewItem.setText(text);", "+\t\t\t\t\t}", "+\t\t\t\t\t", "+\t\t\t\t} else {", "+\t\t\t\t\tTreeItem[] items = tree.getItems();", "+\t\t\t\t\tint index = 0;", "+\t\t\t\t\tfor (int i = 0; i < items.length; i++) {", "+\t\t\t\t\t\tif (items[i] == item) {", "+\t\t\t\t\t\t\tindex = i;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tif (pt.y < bounds.y + bounds.height/3) {", "+\t\t\t\t\t\tTreeItem newItem = new TreeItem(tree, SWT.NONE, index);", "+\t\t\t\t\t\tnewItem.setText(text);", "+\t\t\t\t\t} else if (pt.y > bounds.y + 2*bounds.height/3) {", "+\t\t\t\t\t\tTreeItem newItem = new TreeItem(tree, SWT.NONE, index+1);", "+\t\t\t\t\t\tnewItem.setText(text);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tTreeItem newItem = new TreeItem(item, SWT.NONE);", "+\t\t\t\t\t\tnewItem.setText(text);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\t", "+\t\t\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5320dfd379caae898f8ffa2bf4d38f82", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 52, "methodNumberAfterChange": 69, "signatureBeforeChange": " void redrawAfterModify(SelectableItem modifiedItem, int modifiedIndex)", "signatureAfterChange": " void removeColumn(TreeColumn column)", "diff": ["- */", "-void redrawAfterModify(SelectableItem modifiedItem, int modifiedIndex) {", "-\tint redrawStartY;", "-\tint redrawStopY;", "-\tint itemChildIndex = ((TreeItem) modifiedItem).getIndex();", "-\tint topIndex = getTopIndex();", "-\tint itemHeight = getItemHeight();", "-\tint redrawItemIndex;", "-\tint itemCount;", "-\tAbstractTreeItem parentItem = ((TreeItem) modifiedItem).getParentItem();", "-\tAbstractTreeItem redrawItem = null;", "-", "-\tif (redrawParentItem(modifiedItem) == false) {", "-\tif (parentItem == null) {\t\t\t\t\t\t\t// a root item is added/removed", "-\t\tparentItem = getRoot();", "-\titemCount = parentItem.getItemCount();", "-\t// redraw hierarchy decorations of preceeding item if the last item at a tree ", "-\t// level was added/removed", "-\t// otherwise, if the first item was removed, redraw the parent to update hierarchy icon", "-\tif (itemChildIndex > 0) {\t\t\t\t\t\t\t// more than one item left at this tree level", "-\t\t// added/removed last item at this tree level? have to test >=.", "-\t\t// when removing last item, item index is outside itemCount ", "-\t\tif (itemChildIndex >= itemCount - 1) { ", "-\t\t\tredrawItem = (AbstractTreeItem) parentItem.getChildren().elementAt(itemChildIndex - 1);", "-\telse ", "-\tif (getVisibleItemCount() > 0 && itemCount < 2) {\t// last item at this level removed/first item added?", "-\t\tredrawItem = parentItem;\t\t\t\t\t\t// redraw parent item to update hierarchy icon", "-\t}", "-\tif (redrawItem != null) {", "-\t\tredrawItemIndex = redrawItem.getVisibleIndex();", "-\t\tif (modifiedIndex == -1) {", "-\t\t\tmodifiedIndex = redrawItemIndex + 1;", "-\t\t}", "-\t\tredrawStartY = (redrawItemIndex - topIndex) * itemHeight;", "-\t\tredrawStopY = (modifiedIndex - topIndex) * itemHeight;", "-\t\tredraw(", "-\t\t\t0, ", "-\t\t\tredrawStartY, ", "-\t\t\tredrawItem.getCheckboxXPosition(), \t\t\t// only redraw up to and including hierarchy icon to avoid flashing", "-\t\t\tredrawStopY - redrawStartY, false);", "-\t}\t", "-\tif (modifiedIndex == 0) {\t\t\t\t\t\t\t\t\t\t\t// added/removed first item ?", "-\t\tredraw(0, 0, getClientArea().width, getItemHeight() * 2, false);// redraw new first two items to ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// fix vertical hierarchy line", "+void removeColumn(TreeColumn column) {", "+\tint numColumns = getColumnCount();", "+\tint index = column.getIndex();", "+", "+\tTreeColumn[] newColumns = new TreeColumn[columns.length - 1];", "+\tSystem.arraycopy(columns, 0, newColumns, 0, index);", "+\tSystem.arraycopy(columns, index + 1, newColumns, index, columns.length - index);", "+\tcolumns = newColumns;", "+\t", "+\tTreeColumn lastColumn = columns[columns.length - 1];", "+\tgetHorizontalBar().setMaximum(lastColumn.getX() + lastColumn.width);"]}], "num": 16781}
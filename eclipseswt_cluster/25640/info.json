{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "35c0e57e2024a27ce9e233bde04182d7", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94d1eaa493d282425a2fe40f50c8a439", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/TextTransfer.java", "commitBeforeChange": "67976c6abaf5a07314770e0734a67e21100216a3", "commitAfterChange": "8e7bdacd1dbbc7e29ab695539fe4d98a2a8aee35", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public void javaToNative (Object object, TransferData transferData)", "signatureAfterChange": " public void javaToNative (Object object, TransferData transferData)", "diff": ["-\tsuper.javaToNative(buffer, transferData);", "+\tif  (transferData.type ==  TYPEID1) { // COMPOUND_TEXT", "+\t\tint[] encoding = new int[1];", "+\t\tint[] format = new int[1];", "+\t\tint[] ctext = new int[1];", "+\t\tint[] length = new int[1];", "+\t\tboolean result = OS.gdk_utf8_to_compound_text(buffer, encoding, format, ctext, length);", "+\t\tif (!result) {", "+\t\t\ttransferData.result = 0;", "+\t\t} else {", "+\t\t\ttransferData.type = encoding[0];", "+\t\t\ttransferData.format = format[0];", "+\t\t\ttransferData.length = length[0];", "+\t\t\ttransferData.pValue = ctext[0];", "+\t\t\ttransferData.result = 1;", "+\t\t}", "+\t} else {", "+\t\tsuper.javaToNative(buffer, transferData);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "cf7deeef1354d31ad980f7c408b2a4a2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Widget.java", "commitBeforeChange": "8c0cfc19eca4f241c34603eca33803e9daafabd5", "commitAfterChange": "ad0b4f3d2956c80326dfb03508ef2a05c83adcca", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " void setKeyState (Event event, XKeyEvent xEvent)", "signatureAfterChange": " void setKeyState (Event event, XKeyEvent xEvent)", "diff": ["-\t\t* Feature in MOTIF. For some reason, XLookupString() fails ", "-\t\t* to translate both the keysym and the character when the", "-\t\t* control key is down.  For example, Ctrl+2 has the correct", "-\t\t* keysym value (50) but no character value, while Ctrl+/ has", "-\t\t* the keysym value (2F) but an invalid character value", "-\t\t* (1F).  It seems that Motif is applying the algorithm to", "-\t\t* convert a character to a control character for characters", "-\t\t* that are not valid control characters.  The fix is to test", "-\t\t* for 7-bit ASCII keysym values that fall outside of the", "-\t\t* the valid control character range and use the keysym value", "-\t\t* as the character, not the incorrect value that XLookupString()", "-\t\t* returns.  Even though lower case values are not strictly", "-\t\t* valid control characters, they are included in the range.", "-\t\t* ", "-\t\t* Some other cases include Ctrl+3..Ctr+8, Ctrl+[.", "-\t\t*/", "-\t\tif ((xEvent.state & OS.ControlMask) != 0) {", "-\t\t\tint key = keysym [0];", "-\t\t\tif (0 <= key && key <= 0x7F) {", "-\t\t\t\tif ('a' <= key && key <= 'z') {", "-\t\t\t\t\tkey -= 'a' - 'A';", "-\t\t\t\t}", "-\t\t\t\tif (!(64 <= key && key <= 95)) {", "-\t\t\t\t\tbuffer [0] = (byte) key;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\t", "-\t\t/*", "-\t\t* and Shift+F12 are not translated correctly by XLookupString.", "+\t\t* and Shift+F12 are not translated correctly by XLookupString().", "+\t\t* Feature in MOTIF. For some reason, XLookupString() fails ", "+\t\t* to translate both the keysym and the character when the", "+\t\t* control key is down.  For example, Ctrl+2 has the correct", "+\t\t* keysym value (50) but no character value, while Ctrl+/ has", "+\t\t* the keysym value (2F) but an invalid character value", "+\t\t* (1F).  It seems that Motif is applying the algorithm to", "+\t\t* convert a character to a control character for characters", "+\t\t* that are not valid control characters.  The fix is to test", "+\t\t* for 7-bit ASCII keysym values that fall outside of the", "+\t\t* the valid control character range and use the keysym value", "+\t\t* as the character, not the incorrect value that XLookupString()", "+\t\t* returns.  Even though lower case values are not strictly", "+\t\t* valid control characters, they are included in the range.", "+\t\t* ", "+\t\t* Some other cases include Ctrl+3..Ctr+8, Ctrl+[.", "+\t\t*/", "+\t\tint key = keysym [0];", "+\t\tif ((xEvent.state & OS.ControlMask) != 0 && (0 <= key && key <= 0x7F)) {", "+\t\t\tif ('a' <= key && key <= 'z') key -= 'a' - 'A';", "+\t\t\tif (!(64 <= key && key <= 95)) buffer [0] = (byte) key;", "+\t\t}", "+\t\t", "+\t\t/*", "+\t\tif (event.keyCode == 0) {", "+\t\t\tbyte [] buffer1 = new byte [5];", "+\t\t\tint [] keysym1 = new int [1];", "+\t\t\tint oldState = xEvent.state;", "+\t\t\txEvent.state = 0;", "+\t\t\tOS.XLookupString (xEvent, buffer1, buffer1.length, keysym1, null);", "+\t\t\txEvent.state = oldState;", "+\t\t\tif (buffer1 [0] != 0) {", "+\t\t\t\tchar [] result = Converter.mbcsToWcs (null, buffer1);", "+\t\t\t\tif (result.length != 0) event.keyCode = result [0];", "+\t\t\t}", "+\t\t}"]}], "num": 25640}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9ab65e0a531fccf06ef4f9061ff2dcf4", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d2c89a860499a2b1f46e91d155a30603", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Composite.java", "commitBeforeChange": "d34c95efdcf10af2458e871da91456b39b9b2bcc", "commitAfterChange": "3bb1d0d5b18ad64f312195905956ceba8e91d9dc", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 21, "signatureBeforeChange": "\r \r boolean setTabGroupFocus ()", "signatureAfterChange": "\r \r boolean setTabGroupFocus ()", "diff": ["+\r", "-\tif (!isVisible ()) return false;\r", "-\tControl [] children = _getChildren ();\r", "-\tif (children.length == 0) {\r", "-\t\treturn (hooks (SWT.KeyDown) || hooks (SWT.KeyUp)) && setTabItemFocus ();\r", "+\tif ((state & CANVAS) != 0) {\r", "+\t\tif (hooks (SWT.KeyDown) || hooks (SWT.KeyUp)) {\r", "+\t\t\tif (setTabItemFocus ()) return true;\r", "+\t\t}\r", "+\tControl [] children = _getChildren ();\r", "-\tfor (int i=0; i<children.length; i++) {\r", "-\t\tControl child = children [i];\r", "-\t\tif (child.isTabGroup () && child.setTabGroupFocus ()) return true;\r", "-\t}\r", "+}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b4c7c75e16443b83d6f8b65569d18435", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Group.java", "commitBeforeChange": "eaa8e2eac8ac701e127ee17d97923c410acc5476", "commitAfterChange": "536c62e9514131182a9b045fed1e7826bebf642b", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " boolean mnemonicHit (char key)", "signatureAfterChange": " boolean mnemonicHit (char key)", "diff": ["-\tControl [] children = _getChildren ();", "-\tfor (int i=0; i<children.length; i++) {", "-\t\tControl child = children [i];", "-\t\tif (child.setFocus ()) return true;", "-\t}", "-\treturn false;", "+\treturn setFocus ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "477e4221b92fb8962bec32d4a015617e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "7509f6eb76a4e7c74801a0c7d2fb90890e75f6a0", "commitAfterChange": "6bc87f293439c8125ddcc7de326fed808d8cd1a5", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 46, "signatureBeforeChange": " int getSelection (TreeItem[] result, TreeItem[] items, TreeItem[] selection, int index)", "signatureAfterChange": " int getSelection (TreeItem[] result, TreeItem[] items, int index)", "diff": ["-int getSelection (TreeItem[] result, TreeItem[] items, TreeItem[] selection, int index) {", "+int getSelection (TreeItem[] result, TreeItem[] items, int index) {", "-\t\tfor (int j = 0; j < selection.length; j++) {", "-\t\t\tif (selection [j] == item) {", "-\t\t\t\tresult [index++] = item;", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "+\t\tif (item.isSelected ()) result [index++] = item;", "-\t\tindex = getSelection (result, items [i].items, selection, index);", "+\t\tindex = getSelection (result, items [i].items, index);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2cc6385f7b4b8d3a6f2e64704b7b3d3c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/List.java", "commitBeforeChange": "441698ecc1c76f73e590da9afb5676ceb4571947", "commitAfterChange": "7e69644e833915ee961adff3b1882f037d334978", "methodNumberBeforeChange": 31, "methodNumberAfterChange": 30, "signatureBeforeChange": " public void remove (String string)", "signatureAfterChange": " public void remove (String string)", "diff": ["-\tfor (int i= 0; i < fData.size(); i++) {", "-\t\tPair p= (Pair) fData.get(i);", "-\t\tif (string.equals(p.fValue)) {", "-\t\t\tif (OS.RemoveDataBrowserItems(handle, OS.kDataBrowserNoItem, 1, new int[] { p.fId }, 0) == OS.kNoErr)", "-\t\t\t\treturn;", "-\t\t\terror (SWT.ERROR_ITEM_NOT_REMOVED);", "-\t\t}", "-\t}", "-\terror (SWT.ERROR_INVALID_ARGUMENT);", "+\tPair p= getPair(string);", "+\tif (p == null) error (SWT.ERROR_INVALID_ARGUMENT);", "+\tfData.remove(p);", "+\tif (OS.RemoveDataBrowserItems(handle, OS.kDataBrowserNoItem, 1, new int[] { p.fId }, 0) != OS.kNoErr)", "+\t\terror (SWT.ERROR_ITEM_NOT_REMOVED);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "686153c4c4482a2115dd8081567ec550", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 49, "methodNumberAfterChange": 37, "signatureBeforeChange": " int getSelectionIndex(TreeItem2 item)", "signatureAfterChange": " int getVisibleItemCount()", "diff": ["-int getSelectionIndex(TreeItem2 item) {", "-\tfor (int i = 0; i < selectedItems.length; i++) {", "-\t\tif (selectedItems[i] == item) return i;", "-\treturn -1;", "+ */", "+int getVisibleItemCount() {", "+\treturn getRoot().getVisibleItemCount();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ab39af416b9c15f39e6079882187b3b3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/PromptService2.java", "commitBeforeChange": "83784a0bd43bf551a0a4fb21e5409eeadecd384d", "commitAfterChange": "9a54c1aa04b815cd59a20141bb2dcedb14acb097", "methodNumberBeforeChange": 38, "methodNumberAfterChange": 38, "signatureBeforeChange": "  int Alert (int aParent, int aDialogTitle, int aText)", "signatureAfterChange": "  int Alert (int aParent, int aDialogTitle, int aText)", "diff": ["-\t* If mozilla is showing its errors with dialogs (as opposed to pages) then the only", "-\t* opportunity to detect that a page has an invalid certificate, without receiving", "-\t* all notification callbacks on the channel, is to detect the displaying of an alert", "-\t* whose message contains an internal cert error code.  If a such a message is", "-\t* detected then instead of showing it, re-navigate to the page with the invalid", "-\t* certificate so that the browser's nsIBadCertListener2 will be invoked.", "+\t* If mozilla is re-navigating to a page with a bad certificate in order", "+\t* to get its certificate info then do not show cert error message alerts.", "-\t\tfor (int i = 0; i < certErrorCodes.length; i++) {", "-\t\t\tif (textLabel.indexOf (certErrorCodes[i]) != -1) {", "-\t\t\t\tMozilla mozilla = (Mozilla)browser.webBrowser;", "-\t\t\t\tmozilla.isRetrievingBadCert = true;", "-\t\t\t\tbrowser.setUrl (mozilla.lastNavigateURL);", "-\t\t\t\treturn XPCOM.NS_OK;", "-\t\t\t}", "-\t\t}", "+\t\tMozilla mozilla = (Mozilla)browser.webBrowser;", "+\t\tif (mozilla.isRetrievingBadCert) return XPCOM.NS_OK;"]}], "num": 32784}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d1a14a038eaba316f94890562c16e8da", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ffca3f26d5f44d87ef26350bb91ff286", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "0ec16a191637037ae868aa23c8c55cf2d8a64f40", "commitAfterChange": "d78a1f304fc5886faf978adcf843b66da4334afd", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 17, "signatureBeforeChange": "  void destroyItem (TableColumn column)", "signatureAfterChange": "  void destroyItem (TableColumn column)", "diff": ["-/*\tint index = 0;", "+\tint index = 0;", "-\tWidgetTable.remove(column.handle);", "+\tint columnHandle = column.handle;", "-\tif (columnCount==0) {", "-\t\tfakeColumn = column.handle;", "-\t} else {", "-\t\tfor (int j=index+1; j<=columnCount; j++) {", "-\t\t\t", "+\tOS.gtk_tree_view_remove_column (handle, columnHandle);", "+\tif (columnCount == 0) {", "+\t\tint oldModel = modelHandle;", "+\t\tint[] types = getColumnTypes (1);", "+\t\tint newModel = OS.gtk_list_store_newv (types.length, types);", "+\t\tif (newModel == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\tint [] ptr = new int [1];", "+\t\tfor (int i=0; i<itemCount; i++) {", "+\t\t\tTableItem item = items [i];", "+\t\t\tint oldItem = item.handle;", "+\t\t\tint newItem = OS.g_malloc (OS.GtkTreeIter_sizeof ());", "+\t\t\tif (newItem == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\tOS.gtk_list_store_insert (newModel, newItem, i);", "+\t\t\tfor (int j=0; j<3; j++) {", "+\t\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, j, ptr, -1);", "+\t\t\t\tOS.gtk_list_store_set (newModel, newItem, j, ptr [0], -1);", "+\t\t\t}", "+\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex, ptr, -1);", "+\t\t\tOS.gtk_list_store_set (newModel, newItem, 3, ptr [0], -1);", "+\t\t\tOS.gtk_tree_model_get (oldModel, oldItem, column.modelIndex + 1, ptr, -1);", "+\t\t\tOS.gtk_list_store_set (newModel, newItem, 3 + 1, ptr [0], -1);", "+\t\t\tOS.g_free ( (ptr [0]));", "+\t\t\tOS.gtk_list_store_remove (oldModel, oldItem);", "+\t\t\tOS.g_free (oldItem);", "+\t\t\titem.handle = newItem;", "-\t\tOS.gtk_tree_view_remove_column(handle, column.handle);", "-\t\tOS.g_object_unref(column.handle);", "-\t}*/", "+\t\tOS.gtk_tree_view_set_model (handle, newModel);", "+\t\tOS.g_object_unref (oldModel);", "+\t\tmodelHandle = newModel;", "+\t\tcreateColumn (null, 0);", "+\t} else {", "+\t\tfor (int i=0; i<itemCount; i++) {", "+\t\t\tint item = items [i].handle;", "+\t\t\tint modelIndex = column.modelIndex;", "+\t\t\tOS.gtk_list_store_set (modelHandle, item, modelIndex, 0, -1);", "+\t\t\tOS.gtk_list_store_set (modelHandle, item, modelIndex + 1, (byte [])null, -1);", "+\t\t}", "+\t\tif (index == 0) {", "+\t\t\tTableColumn checkColumn = columns [0];", "+\t\t\tcreateRenderers (checkColumn.handle, checkColumn.modelIndex, true);", "+\t\t}", "+\t}", "+\tcolumn.handle = 0;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc7cdbd5a27ce4f65469664647916123", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/photon/org/eclipse/swt/dnd/Clipboard.java", "commitBeforeChange": "da5b2096f70170c1ee5967072f15746afe644075", "commitAfterChange": "e1a1a9a2764b9fd42d3fd4db27d8d960a32582f7", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": "\r public void setContents(Object[] data, Transfer[] transferAgents)", "signatureAfterChange": "\r public void setContents(Object[] data, Transfer[] transferAgents)", "diff": ["+\tif (display.isDisposed() ) return;\r", "+\t\r", "+\tif (data == null) {\r", "+\t\tint ig = OS.PhInputGroup(0);\r", "+\t\tif (OS.PhClipboardCopy((short)ig, 0, null) != 0) {\r", "+\t\t\tDND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);\r", "+\t\t}\r", "+\t\treturn;\r", "+\t}\r", "+\tif (transferAgents == null || data.length != transferAgents.length) {\r", "+\t\tDND.error(SWT.ERROR_INVALID_ARGUMENT);\r", "+\t}\r", "+\t\r", "+\tbyte[] clips = new byte[0];\r", "+\tint count = 0;\r", "+\tfor (int i = 0; i < transferAgents.length; i++) {\r", "+\t\tString[] names = transferAgents[i].getTypeNames();\r", "+\t\tint[] ids = transferAgents[i].getTypeIds();\r", "+\t\tfor (int j = 0; j < names.length; j++) {\r", "+\t\t\tTransferData transferData = new TransferData();\r", "+\t\t\ttransferData.type = ids[j];\r", "+\t\t\ttransferAgents[i].javaToNative(data[i], transferData);\r", "+\t\t\tPhClipHeader clip = new PhClipHeader();\r", "+\t\t\tclip.data = transferData.pData;\r", "+\t\t\tclip.length = (short)transferData.length;\r", "+\t\t\tbyte[] temp = Converter.wcsToMbcs(null, names[j], true);\r", "+\t\t\tbyte[] type = new byte[8];\r", "+\t\t\tSystem.arraycopy(temp, 0, type, 0, Math.min(type.length, temp.length));\r", "+\t\t\tclip.type_0 = type[0];\r", "+\t\t\tclip.type_1 = type[1];\r", "+\t\t\tclip.type_2 = type[2];\r", "+\t\t\tclip.type_3 = type[3];\r", "+\t\t\tclip.type_4 = type[4];\r", "+\t\t\tclip.type_5 = type[5];\r", "+\t\t\tclip.type_6 = type[6];\r", "+\t\t\tclip.type_7 = type[7];\r", "+\t\t\tbyte[] buffer = new byte[PhClipHeader.sizeof];\r", "+\t\t\tOS.memmove(buffer, clip, PhClipHeader.sizeof);\r", "+\t\t\tbyte[] newClips = new byte[clips.length + buffer.length];\r", "+\t\t\tSystem.arraycopy(clips, 0, newClips, 0, clips.length);\r", "+\t\t\tSystem.arraycopy(buffer, 0, newClips, clips.length, buffer.length);\r", "+\t\t\tclips = newClips;\r", "+\t\t\tcount++;\r", "+\t\t}\r", "+\t}\r", "+\t\r", "+\tif (count > 0){\r", "+\t\tint ig = OS.PhInputGroup(0);\r", "+\t\tif (OS.PhClipboardCopy((short)ig, count, clips) != 0) {\r", "+\t\t\tDND.error(DND.ERROR_CANNOT_SET_CLIPBOARD);\r", "+\t\t}\r", "+\t}\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4453dc077043413537a90412bc2da826", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/DragSource.java", "commitBeforeChange": "b796db7a88d068fbce3590cf91dcc3e9c7f9c320", "commitAfterChange": "37c57c08e60a278244a46818f49a47ece9a0e524", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  void drag(Event dragEvent)", "signatureAfterChange": "  void drag(Event dragEvent)", "diff": ["-void drag(Event dragEvent) {", "-//\tDNDEvent event = new DNDEvent();", "-//\tevent.widget = this;", "-//\tevent.x = dragEvent.x;", "-//\tevent.y = dragEvent.y;", "-//\tevent.time = dragEvent.time;", "-//\tevent.doit = true;", "-//\tnotifyListeners(DND.DragStart, event);", "-//\tif (!event.doit || transferAgents == null || transferAgents.length == 0) return;", "-//\t", "-//\tint[] theDrag = new int[1];", "-//\tif (OS.NewDrag(theDrag) != OS.noErr) {", "-//\t\tevent = new DNDEvent();", "-//\t\tevent.widget = this;", "-//\t\tevent.time = (int)System.currentTimeMillis();", "-//\t\tevent.doit = false;", "-//\t\tevent.detail = DND.DROP_NONE; ", "-//\t\tnotifyListeners(DND.DragEnd, event);", "-//\t\treturn;", "-//\t}", "-//\t", "-//\tPoint pt = new Point();", "-//\tOS.GetGlobalMouse (pt);", "-//", "-//\tfor (int i = 0; i < transferAgents.length; i++) {", "-//\t\tTransfer transfer = transferAgents[i];", "-//\t\tif (transfer != null) {", "-//\t\t\tint[] types = transfer.getTypeIds();", "-//\t\t\tif (transfer instanceof FileTransfer) {", "-//\t\t\t\tTransferData transferData = new TransferData();", "-//\t\t\t\ttransferData.type = types[0];", "-//\t\t\t\tDNDEvent event2 = new DNDEvent();", "-//\t\t\t\tevent2.widget = this;", "-//\t\t\t\tevent2.time = (int)System.currentTimeMillis(); ", "-//\t\t\t\tevent2.dataType = transferData; ", "-//\t\t\t\tnotifyListeners(DND.DragSetData, event2);", "-//\t\t\t\tif (event2.data != null) {", "-//\t\t\t\t\tfor (int j = 0; j < types.length; j++) {", "-//\t\t\t\t\t\ttransferData.type = types[j];", "-//\t\t\t\t\t\ttransfer.javaToNative(event2.data, transferData);", "-//\t\t\t\t\t\tif (transferData.result == OS.noErr) {", "-//\t\t\t\t\t\t\tfor (int k = 0; k < transferData.data.length; k++) {", "-//\t\t\t\t\t\t\t\tbyte[] datum = transferData.data[k];", "-//\t\t\t\t\t\t\t\tOS.AddDragItemFlavor(theDrag[0], 1 + k, types[j], datum, datum.length, 0);", "-//\t\t\t\t\t\t\t}", "-//\t\t\t\t\t\t}", "-//\t\t\t\t\t}", "-//\t\t\t\t}", "-//\t\t\t} else {", "-//\t\t\t\tfor (int j = 0; j < types.length; j++) {", "-//\t\t\t\t\tOS.AddDragItemFlavor(theDrag[0], 1, types[j], null, 0, 0);\t", "-//\t\t\t\t}\t", "-//\t\t\t}", "-//\t\t}", "-//\t}", "-//\t", "-//\tOS.SetDragSendProc(theDrag[0], DragSendDataProc.getAddress(), control.handle);", "-//\t", "-//\tint theRegion = 0;", "-//\tImage newImage = null;", "-//\ttry {\t", "-//\t\ttheRegion = OS.NewRgn();", "-//\t\tOS.SetRectRgn(theRegion, (short)(pt.h), (short)(pt.v), (short)(pt.h+20), (short)(pt.v+20));", "-//\t\t", "-//\t\tint operations = opToOsOp(getStyle());", "-//\t\t//set operations twice - local and not local", "-//\t\tOS.SetDragAllowableActions(theDrag[0], operations, true);", "-//\t\tOS.SetDragAllowableActions(theDrag[0], operations, false);", "-//\t\t", "-//\t\tImage image = event.image;", "-//\t\tif (image != null) {", "-//\t\t\tCGPoint imageOffsetPt = new CGPoint();", "-//\t\t\timageOffsetPt.x = 0;", "-//\t\t\timageOffsetPt.y = 0;", "-//\t\t\t/*", "-//\t\t\t* Bug in the Macintosh.  For  some reason, it seems that SetDragImageWithCGImage() ", "-//\t\t\t* expects an image with the alpha, otherwise the image does not draw.  The fix is", "-//\t\t\t* to make sure that the image has an alpha by creating a new image with alpha", "-//\t\t\t* when necessary.", "-//\t\t\t*/", "-//\t\t\tif (OS.CGImageGetAlphaInfo(image.handle) == OS.kCGImageAlphaNoneSkipFirst) {", "-//\t\t\t\tImageData data = image.getImageData();", "-//\t\t\t\tdata.alpha = 0xFF;", "-//\t\t\t\tnewImage = new Image(image.getDevice(), data);", "-//\t\t\t\timage = newImage;", "-//\t\t\t}", "-//\t\t\tOS.SetDragImageWithCGImage(theDrag[0], image.handle, imageOffsetPt, 0);", "-//\t\t}", "-//\t\tEventRecord theEvent = new EventRecord();", "-//\t\ttheEvent.message = OS.kEventMouseMoved;", "-//\t\ttheEvent.modifiers = (short)OS.GetCurrentEventKeyModifiers();", "-//\t\ttheEvent.what = (short)OS.osEvt;", "-//\t\ttheEvent.where_h = pt.h;", "-//\t\ttheEvent.where_v = pt.v;\t", "-//\t\tint result = OS.TrackDrag(theDrag[0], theEvent, theRegion);", "-//\t\tint operation = DND.DROP_NONE;", "-//\t\tif (result == OS.noErr) { ", "-//\t\t\tint[] outAction = new int[1];", "-//\t\t\tOS.GetDragDropAction(theDrag[0], outAction);", "-//\t\t\toperation = osOpToOp(outAction[0]);", "-//\t\t}\t", "-//\t\tevent = new DNDEvent();", "-//\t\tevent.widget = this;", "-//\t\tevent.time = (int)System.currentTimeMillis();", "-//\t\tevent.doit = result == OS.noErr;", "-//\t\tevent.detail = operation; ", "-//\t\tnotifyListeners(DND.DragEnd, event);", "-//\t} finally {\t", "-//\t\tif (theRegion != 0) OS.DisposeRgn(theRegion);", "-//\t\tif (newImage != null) newImage.dispose();", "-//\t}", "-//\tOS.DisposeDrag(theDrag[0]);", "+void drag(Event dragEvent) {", "+\tDNDEvent event = new DNDEvent();", "+\tevent.widget = this;", "+\tevent.x = dragEvent.x;", "+\tevent.y = dragEvent.y;", "+\tevent.time = dragEvent.time;", "+\tevent.doit = true;", "+\tnotifyListeners(DND.DragStart, event);", "+\tif (!event.doit || transferAgents == null || transferAgents.length == 0) return;", "+\t", "+\tNSPasteboard dragBoard = NSPasteboard.pasteboardWithName(OS.NSDragPboard);", "+\tNSMutableArray nativeTypeArray = NSMutableArray.arrayWithCapacity(10);", "+\t", "+\tfor (int i = 0; i < transferAgents.length; i++) {", "+\t\tTransfer transfer = transferAgents[i];", "+\t\tif (transfer != null) {", "+\t\t\tString[] typeNames = transfer.getTypeNames();", "+", "+\t\t\tfor (int j = 0; j < typeNames.length; j++) {", "+\t\t\t\tnativeTypeArray.addObject(NSString.stringWith(typeNames[j]));", "+\t\t\t}\t", "+\t\t}\t\t", "+\t}", "+", "+\tif (nativeTypeArray != null)", "+\t\tdragBoard.declareTypes(nativeTypeArray, dragSourceDelegate);", "+", "+\t// Start the drag here from the Control's view.", "+\tNSEvent currEvent = NSApplication.sharedApplication().currentEvent();", "+\tNSPoint pt = currEvent.locationInWindow();", "+\tNSPoint viewPt = control.view.convertPoint_fromView_(pt, null);", "+", "+\t// Save off the drag operations -- AppKit will call back to us to request them during the drag.", "+\tdragOperations = opToOsOp(getStyle());", "+\t", "+\t// Get the image for the drag. The drag should happen from the middle of the image.", "+\tNSImage dragImage = null;", "+\tImage newImage = null;", "+\ttry {\t", "+\t\tImage image = event.image;", "+\t\t", "+\t\t// If no image was provided, just create a trivial image. dragImage requires a non-null image.", "+\t\tif (image == null) {", "+\t\t\tnewImage = new Image(Display.getCurrent(), 1, 1);", "+\t\t\timage = newImage;", "+\t\t}", "+", "+\t\tdragImage = image.handle;", "+", "+\t\tNSSize imageSize = dragImage.size();", "+\t\tviewPt.x -= (imageSize.width / 2);", "+\t\tviewPt.y -= (imageSize.height / 2);", "+\t\t", "+\t\t// The third argument to dragImage is ignored as of 10.4.", "+\t\tNSSize ignored = new NSSize();", "+\t\tignored.width = 0;", "+\t\tignored.height = 0;", "+\t\t", "+\t\tdragStarted = false;", "+\t\tcontrol.view.dragImage(dragImage, viewPt, ignored, NSApplication.sharedApplication().currentEvent(), dragBoard, dragSourceDelegate, true);", "+", "+\t\t// If we actually dragged, dragStarted will be set to true in dragImage:beganAt:", "+\t\t// If not, send a DragEnd indicating nothing happened.", "+\t\tif (!dragStarted) {", "+\t\t\tSystem.out.println(\"Drag failed\");", "+\t\t\tevent = new DNDEvent();", "+\t\t\tevent.widget = this;", "+\t\t\tevent.time = (int)System.currentTimeMillis();", "+\t\t\tevent.doit = false;", "+\t\t\tevent.detail = DND.DROP_NONE; ", "+\t\t\tnotifyListeners(DND.DragEnd, event);", "+\t\t}", "+\t} finally {\t", "+\t\tif (newImage != null) newImage.dispose();", "+\t}", "+}"]}], "num": 20707}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "da5656019d72b15e455c1603ccf3db44", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2c8b3adc0ff8a4a89d6f4b30ad714e6e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Spinner.java", "commitBeforeChange": "3ab0551451280a6b62c6f6f642ac3addeaec90c2", "commitAfterChange": "388d4d62f45977d8cf59bdb3d84540e0aa3a278d", "methodNumberBeforeChange": 33, "methodNumberAfterChange": 49, "signatureBeforeChange": "  boolean sendKeyEvent (int type, Event event)", "signatureAfterChange": "  boolean shouldChangeTextInRange_replacementString(int id, int sel, int affectedCharRange, int replacementString)", "diff": ["-boolean sendKeyEvent (int type, Event event) {", "-\tif (!super.sendKeyEvent (type, event)) {", "-\t\treturn false;", "-\t}", "-\tif (type != SWT.KeyDown) return true;", "-\tif ((style & SWT.READ_ONLY) != 0) return true;", "-\tif (event.character == 0) return true;", "-\tif ((event.stateMask & SWT.COMMAND) != 0) return true;", "-//\tif (!hooks (SWT.Verify) && !filters (SWT.Verify)) return true;", "-\tString oldText = \"\", newText = \"\";", "-\tint /*long*/ charCount = 0;", "-\tcharCount = textView.stringValue().length();", "-\tNSText fieldEditor = textView.window().fieldEditor(false, textView);", "-\tNSRange selection = fieldEditor.selectedRange();", "-\tint /*long*/ start = selection.location, end = selection.location + selection.length;", "-\tswitch (event.character) {", "-\t\tcase SWT.BS:", "-\t\t\tif (start == end) {", "-\t\t\t\tif (start == 0) return true;", "-\t\t\t\tstart = Math.max (0, start - 1);", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase SWT.DEL:", "-\t\t\tif (start == end) {", "-\t\t\t\tif (start == charCount) return true;", "-\t\t\t\tend = Math.min (end + 1, charCount);", "-\t\t\t}", "-\t\t\tbreak;", "-\t\tcase SWT.CR:", "-\t\t\treturn true;", "-\t\tdefault:", "-\t\t\tif (event.character != '\\t' && event.character < 0x20) return true;", "-\t\t\toldText = new String (new char [] {event.character});", "-\t}", "-\tnewText = verifyText (oldText, start, end, event);", "-\tif (newText == null) return false;", "-\tif (charCount - (end - start) + newText.length () > textLimit) {", "-\t\treturn false;", "-\t}", "-\tif (newText != oldText) {", "-\t\tsetText (newText, start, end, false);", "-\t\tstart += newText.length ();", "-\t\tselection.location = start;", "-\t\tselection.length = 0;", "-\t\tfieldEditor.setSelectedRange(selection);", "-\t}", "-\t/*", "-\t* Post the modify event so that the character will be inserted", "-\t* into the widget when the modify event is delivered.  Normally,", "-\t* modify events are sent but it is safe to post the event here", "-\t* because this method is called from the event loop.", "-\t*/", "-\tpostEvent (SWT.Modify);", "-\treturn newText == oldText;\t", "-}", "+boolean shouldChangeTextInRange_replacementString(int /*long*/ id, int /*long*/ sel, int /*long*/ affectedCharRange, int /*long*/ replacementString) {", "+\tNSRange range = new NSRange();", "+\tOS.memmove(range, affectedCharRange, NSRange.sizeof);", "+\tboolean result = callSuperBoolean(id, sel, range, replacementString);", "+\tif (hooks (SWT.Verify)) {", "+\t\tString text = new NSString(replacementString).getString();", "+\t\tNSEvent currentEvent = display.application.currentEvent();", "+\t\tString newText = verifyText(text, (int)/*64*/range.location, (int)/*64*/(range.location+range.length), currentEvent);", "+\t\tif (newText == null) return false;", "+\t\tif (text != newText) {", "+\t\t\tint length = newText.length();", "+\t\t\tNSText fieldEditor = textView.currentEditor ();", "+\t\t\tNSRange selectedRange = fieldEditor.selectedRange();", "+\t\t\tif (textLimit != LIMIT) {", "+\t\t\t\tint /*long*/ charCount = fieldEditor.string().length();", "+\t\t\t\tif (charCount - selectedRange.length + length > textLimit) {", "+\t\t\t\t\tlength = (int)/*64*/(textLimit - charCount + selectedRange.length);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tchar [] buffer = new char [length];", "+\t\t\tnewText.getChars (0, buffer.length, buffer, 0);", "+\t\t\tNSString nsstring = NSString.stringWithCharacters (buffer, buffer.length);", "+\t\t\tfieldEditor.replaceCharactersInRange (fieldEditor.selectedRange (), nsstring);", "+\t\t\tresult = false;", "+\t\t}", "+\t\tif (!result) sendEvent (SWT.Modify);", "+\t}", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "828def55fd187c6addeeccc402ad1d0e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 92, "methodNumberAfterChange": 18, "signatureBeforeChange": " \t \tprivate int handleApplicationCallback(int nextHandler, int eRefHandle, int userData)", "signatureAfterChange": "  int commandProc (int nextHandler, int theEvent, int userData)", "diff": ["+", "+int commandProc (int nextHandler, int theEvent, int userData) {", "+\tint eventKind = OS.GetEventKind (theEvent);", "+\tHICommand command = new HICommand ();", "+\tOS.GetEventParameter (theEvent, OS.kEventParamDirectObject, OS.typeHICommand, null, HICommand.sizeof, null, command);", "+\tswitch (eventKind) {", "+\t\tcase OS.kEventProcessCommand: {", "+\t\t\tif (command.commandID == OS.kAEQuitApplication) {", "+\t\t\t\tclose ();", "+\t\t\t\treturn OS.noErr;", "+\t\t\t}", "+\t\t\tif ((command.attributes & OS.kHICommandFromMenu) != 0) {", "+\t\t\t\tif (userData != 0) {", "+\t\t\t\t\tWidget widget = WidgetTable.get (userData);", "+\t\t\t\t\tif (widget != null) return widget.commandProc (nextHandler, theEvent, userData);", "+\t\t\t\t} else {", "+\t\t\t\t\tint menuRef = command.menu_menuRef;", "+\t\t\t\t\tshort menuID = OS.GetMenuID (menuRef);", "+\t\t\t\t\tMenu menu = findMenu (menuID);", "+\t\t\t\t\tif (menu != null) {", "+\t\t\t\t\t\tint [] outCommandID = new int [1];", "+\t\t\t\t\t\tshort menuIndex = command.menu_menuItemIndex;", "+\t\t\t\t\t\tOS.GetMenuItemCommandID (menuRef, menuIndex, outCommandID);", "+\t\t\t\t\t\tMenuItem item = findMenuItem (outCommandID [0]);", "+\t\t\t\t\t\treturn item.kEventProcessCommand (nextHandler, theEvent, userData);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.HiliteMenu ((short) 0);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t}", "+\treturn OS.eventNotHandledErr;", "-\t", "-\tprivate int handleApplicationCallback(int nextHandler, int eRefHandle, int userData) {", "-\t", "-\t\tint eventClass= OS.GetEventClass(eRefHandle);", "-\t\tint eventKind= OS.GetEventKind(eRefHandle);", "-\t\t", "-\t\tswitch (eventClass) {", "-\t\t\t", "-\t\tcase OS.kEventClassAppleEvent:", "-\t\t", "-\t\t\t// check for 'quit' events", "-\t\t\tint[] aeclass= new int[1];", "-\t\t\tif (OS.GetEventParameter(eRefHandle, OS.kEventParamAEEventClass, OS.typeType, null, null, aeclass) == OS.kNoErr) {", "-\t\t\t\t// System.out.println(\"kEventClassAppleEvent: \" + MacUtil.toString(aeclass[0]));", "-\t\t\t\tint[] aetype= new int[1];", "-\t\t\t\tif (OS.GetEventParameter(eRefHandle, OS.kEventParamAEEventID, OS.typeType, null, null, aetype) == OS.kNoErr) {", "-\t\t\t\t\t//System.out.println(\"kEventParamAEEventID: \" + MacUtil.toString(aetype[0]));", "-\t\t\t\t\tif (aetype[0] == OS.kAEQuitApplication)", "-\t\t\t\t\t\tclose();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\t", "-\t\t\tOS.AEProcessAppleEvent(new MacEvent(eRefHandle).toOldMacEvent());", "-\t\t\tbreak;", "-\t\t\t", "-\t\tcase OS.kEventClassCommand:", "-\t\t", "-\t\t\tif (eventKind == OS.kEventProcessCommand) {", "-\t\t\t\tint[] rc= new int[4];", "-\t\t\t\tOS.GetEventHICommand(eRefHandle, rc);", "-\t\t\t\t", "-\t\t\t\tif (rc[1] == OS.kAEQuitApplication) {", "-\t\t\t\t\tclose();", "-\t\t\t\t\tOS.HiliteMenu((short)0);\t// unhighlight what MenuSelect (or MenuKey) hilited", "-\t\t\t\t\treturn OS.kNoErr;", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t// try to map the MenuRef to a SWT Menu", "-\t\t\t\tWidget w= findWidget (rc[2]);", "-\t\t\t\tif (w instanceof Menu) {", "-\t\t\t\t\tMenu menu= (Menu) w;", "-\t\t\t\t\tmenu.handleMenu(rc[3]);", "-\t\t\t\t\tOS.HiliteMenu((short)0);\t// unhighlight what MenuSelect (or MenuKey) hilited", "-\t\t\t\t\treturn OS.kNoErr;", "-\t\t\t\t}", "-\t\t\t\t", "-\t\t\t\t", "-\t\t\t\tOS.HiliteMenu((short)0);\t// unhighlight what MenuSelect (or MenuKey) hilited", "-\t\t\t\t// we do not return kNoErr here so that the default handler", "-\t\t\t\t// takes care of special menus like the Combo menu.", "-\t\t\t}", "-\t\t\tbreak;", "-\t\t", "-\t\tcase OS.kEventClassMouse:", "-\t\t\tswitch (eventKind) {", "-\t\t\t\t", "-\t\t\tcase OS.kEventMouseDown:", "-\t\t\t", "-\t\t\t\tfTrackedControl= 0;", "-\t\t\t\t", "-\t\t\t\thideToolTip();", "-\t", "-\t\t\t\tMacEvent mEvent= new MacEvent(eRefHandle);", "-\t\t\t\tMacPoint where= mEvent.getWhere();", "-\t\t\t\tint[] w= new int[1];", "-\t\t\t\tshort part= OS.FindWindow(where.getData(), w);", "-\t\t\t\t\t\t\t\t", "-\t\t\t\tOS.QDGlobalToLocalPoint(OS.GetWindowPort(w[0]), where.getData());", "-\t\t\t\t", "-\t\t\t\tif (part == OS.inMenuBar) {", "-\t\t\t\t\tOS.MenuSelect(mEvent.getWhere().getData());", "-\t\t\t\t\t//doMenuCommand(OS.MenuSelect(mEvent.getWhere().getData()));", "-\t\t\t\t\treturn OS.kNoErr;", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t\t", "-\t\t\tcase OS.kEventMouseDragged:", "-\t\t\tcase OS.kEventMouseUp:", "-\t\t\tcase OS.kEventMouseMoved:", "-\t\t\t\treturn handleMouseEvent(nextHandler, eRefHandle, eventKind, 0);", "-\t\t\t}", "-\t\t\tbreak;", "-\t\t\t\t\t\t", "-\t\tcase SWT_USER_EVENT:\t// SWT1 user event", "-\t\t\t//System.out.println(\"handleApplicationCallback: user event \" + eventKind);", "-\t\t\treturn OS.kNoErr;", "-\t\t\t", "-\t\tdefault:", "-\t\t\tSystem.out.println(\"handleApplicationCallback: unknown event class\" + MacUtil.toString(eventClass));", "-\t\t\tbreak;", "-\t\t}", "-\t\treturn OS.eventNotHandledErr;", "-\t}"]}], "num": 29782}
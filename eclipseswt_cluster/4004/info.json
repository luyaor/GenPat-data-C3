{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "bf02696050886b6c7119fbfcc4243728", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "78bef7b81df9fd82af3554cc9323f7ae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "c881851b05cec10d724ded28d73b52aced2b4e6a", "commitAfterChange": "7ee9370fb1f257b0959b64e9c229131ca3b8dbfc", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 6, "signatureBeforeChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int callWindowProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["-\t\tif (lockText && msg == OS.WM_SETTEXT) return 0;", "+\t\tif (lockText && msg == OS.WM_SETTEXT) {", "+\t\t\tint /*long*/ hHeap = OS.GetProcessHeap ();", "+\t\t\tint length = OS.GetWindowTextLength (handle);", "+\t\t\tTCHAR buffer = new TCHAR (getCodePage (), length + 1);", "+\t\t\tOS.GetWindowText (handle, buffer, length + 1);", "+\t\t\tint byteCount = buffer.length () * TCHAR.sizeof;", "+\t\t\tint /*long*/ pszText = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, byteCount);", "+\t\t\tOS.MoveMemory (pszText, buffer, byteCount); ", "+\t\t\tint /*long*/ code = OS.CallWindowProc (EditProc, hwndText, msg, wParam, pszText);", "+\t\t\tOS.HeapFree (hHeap, 0, pszText);", "+\t\t\treturn code; ", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8926450ec2f91db49d36dc8c9792d850", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "817eb7019a7873b3ff69c30dbb319366caa52607", "commitAfterChange": "04f741098908262879658189a871ef8b2168342b", "methodNumberBeforeChange": 74, "methodNumberAfterChange": 74, "signatureBeforeChange": "  LRESULT wmClipboard (int hwndText, int msg, int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmClipboard (int hwndText, int msg, int wParam, int lParam)", "diff": ["-\tboolean call = false, select = false;", "+\tboolean call = false;", "-\t\t\tselect = true;", "-\t\t\tif (select) {", "-\t\t\t\tOS.SendMessage (hwndText, OS.EM_SETSEL, start [0], end [0]);", "-\t\t\t}", "-\t\t\tOS.SendMessage (hwndText, OS.EM_REPLACESEL, 0, buffer);", "-\t\t\treturn LRESULT.ZERO;", "+\t\t\tif (msg == OS.WM_SETTEXT) {", "+\t\t\t\tint hHeap = OS.GetProcessHeap ();", "+\t\t\t\tint byteCount = buffer.length () * TCHAR.sizeof;", "+\t\t\t\tint pszText = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, byteCount);", "+\t\t\t\tOS.MoveMemory (pszText, buffer, byteCount); ", "+\t\t\t\tint code = OS.CallWindowProc (EditProc, hwndText, msg, wParam, pszText);", "+\t\t\t\tOS.HeapFree (hHeap, 0, pszText);", "+\t\t\t\treturn new LRESULT (code);", "+\t\t\t} else {", "+\t\t\t\tOS.SendMessage (hwndText, OS.EM_REPLACESEL, 0, buffer);", "+\t\t\t\treturn LRESULT.ZERO;", "+\t\t\t}"]}], "num": 4004}
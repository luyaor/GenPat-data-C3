{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4091aee335ed4276ff35173ff9af2f90", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9ce4c6fae0ff201bc211d609203a2529", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "9e3f807fbbd6bd940cb111f4c11c72e3b56a7027", "commitAfterChange": "eea9e8bab69f49c92599549df81708cadf055d28", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "  public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-\t// NEEDS WORK", "-\tint width = 100, height = 21;", "+\tint width = 0, height = 0;", "+\tint [] currentPort = new int [1];", "+\tshort themeFont = (short) OS.kThemeSystemFont;", "+\tif (font != null) {", "+\t\tthemeFont = OS.kThemeCurrentPortFont;", "+\t\tOS.GetPort (currentPort);", "+\t\tOS.SetPortWindowPort (OS.GetControlOwner (handle));", "+\t\tOS.TextFont (font.id);", "+\t\tOS.TextFace (font.style);", "+\t\tOS.TextSize (font.size);", "+\t}", "+\torg.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point ();", "-\t\torg.eclipse.swt.internal.carbon.Point ioBounds = new org.eclipse.swt.internal.carbon.Point ();", "-\t\tif (font == null) {", "-\t\t\tOS.GetThemeTextDimensions (ptr [0], (short)OS.kThemeSystemFont, OS.kThemeStateActive, false, ioBounds, null);", "-\t\t} else {", "-\t\t\tint [] currentPort = new int [1];", "-\t\t\tOS.GetPort (currentPort);", "-\t\t\tOS.SetPortWindowPort (OS.GetControlOwner (handle));", "-\t\t\tOS.TextFont (font.id);", "-\t\t\tOS.TextFace (font.style);", "-\t\t\tOS.TextSize (font.size);", "-\t\t\tOS.GetThemeTextDimensions (ptr [0], (short) OS.kThemeCurrentPortFont, OS.kThemeStateActive, false, ioBounds, null);", "-\t\t\tOS.SetPort (currentPort [0]);", "-\t\t}", "+\t\tOS.GetThemeTextDimensions (ptr [0], themeFont, OS.kThemeStateActive, false, ioBounds, null);", "+\tint count;", "+\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\tcount = OS.CountMenuItems (menuHandle);", "+\t} else {", "+\t\tcount = OS.HIComboBoxGetItemCount (handle);", "+\t}", "+\tfor (int i=0; i<count; i++) {", "+\t\tint result;", "+\t\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\t\tresult = OS.CopyMenuItemTextAsCFString(menuHandle, (short)(i+1), ptr);", "+\t\t} else {", "+\t\t\tresult = OS.HIComboBoxCopyTextItemAtIndex (handle, i, ptr);", "+\t\t}", "+\t\tif (result == OS.noErr) {", "+\t\t\tOS.GetThemeTextDimensions (ptr [0], themeFont, OS.kThemeStateActive, false, ioBounds, null);", "+\t\t\twidth = Math.max (width, ioBounds.h);", "+\t\t\tOS.CFRelease (ptr [0]);", "+\t\t}", "+\t}", "+\tif (font != null) {", "+\t\tOS.SetPort (currentPort [0]);", "+\t}", "+\tint [] metric = new int [1];", "+\tif ((style & SWT.READ_ONLY) != 0) {", "+\t\tOS.GetThemeMetric (OS.kThemeMetricDisclosureButtonWidth, metric);", "+\t\twidth += metric [0];", "+\t\t//NOT DONE", "+\t\twidth += 13;", "+\t} else {", "+\t\tOS.GetThemeMetric (OS.kThemeMetricComboBoxLargeDisclosureWidth, metric);", "+\t\twidth += metric [0];", "+\t}", "+\tOS.GetThemeMetric (OS.kThemeMetricEditTextWhitespace, metric);", "+\twidth += metric [0] * 2;", "+\theight += metric [0] * 2;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "10ca648d99ce870c287b6b70aaff649d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "fabfac354ba77dfbc16a5fdfaff79beee369b36f", "commitAfterChange": "77f06688bfac39a45b447aab335a7b06b05d1b28", "methodNumberBeforeChange": 30, "methodNumberAfterChange": 30, "signatureBeforeChange": "  int kEventMenuMeasureItemWidth (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventMenuMeasureItemWidth (int nextHandler, int theEvent, int userData)", "diff": ["-\t\t\tString accelText = item.text.substring (accelIndex);", "-\t\t\tint result = OS.CallNextEventHandler (nextHandler, theEvent);", "-\t\t\tchar [] buffer = new char [accelText.length ()];", "-\t\t\taccelText.getChars (0, buffer.length, buffer, 0);", "-\t\t\tint str = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "-\t\t\torg.eclipse.swt.internal.carbon.Point size = new org.eclipse.swt.internal.carbon.Point ();", "-\t\t\tOS.GetThemeTextDimensions (str, (short) OS.kThemeMenuItemCmdKeyFont, 0, false, size, null);", "-\t\t\tOS.CFRelease (str);", "-\t\t\tshort [] width = new short [1];", "-\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamMenuItemWidth, OS.typeSInt16, null, 2, null, width);", "-\t\t\twidth [0] += 5 + size.h;", "-\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamMenuItemWidth, OS.typeSInt16, 2, width);", "-\t\t\treturn result;", "+\t\t\tString accelText = item.text.substring (accelIndex + 1);", "+\t\t\tif (accelText.length () != 0) {", "+\t\t\t\tint result = OS.CallNextEventHandler (nextHandler, theEvent);", "+\t\t\t\tchar [] buffer = new char [accelText.length ()];", "+\t\t\t\taccelText.getChars (0, buffer.length, buffer, 0);", "+\t\t\t\tint str = OS.CFStringCreateWithCharacters (OS.kCFAllocatorDefault, buffer, buffer.length);", "+\t\t\t\torg.eclipse.swt.internal.carbon.Point size = new org.eclipse.swt.internal.carbon.Point ();", "+\t\t\t\tOS.GetThemeTextDimensions (str, (short) OS.kThemeMenuItemCmdKeyFont, 0, false, size, null);", "+\t\t\t\tOS.CFRelease (str);", "+\t\t\t\tshort [] width = new short [1];", "+\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamMenuItemWidth, OS.typeSInt16, null, 2, null, width);", "+\t\t\t\tint [] metric = new int [1];", "+\t\t\t\tOS.GetThemeMetric (OS.kThemeMetricMenuTextTrailingEdgeMargin, metric);", "+\t\t\t\twidth [0] += metric [0] + size.h;", "+\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamMenuItemWidth, OS.typeSInt16, 2, width);", "+\t\t\t\treturn result;", "+\t\t\t}"]}], "num": 2978}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "723a15107484c01a0877f2cc5932354e", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1db552a1740d00138783f8bc3072d0c4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem.java", "commitBeforeChange": "ee155d593cfda428fc88139d1e8da486bb5a73cf", "commitAfterChange": "59b2491032a801ab7176764808e4a778061c6b28", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 72, "signatureBeforeChange": " public void setImage (int columnIndex, Image value)", "signatureAfterChange": " public void setImage (int columnIndex, Image value)", "diff": ["+\t", "+\t/* ", "+\t * An image width change may affect the space available for the item text, so", "+\t * recompute the displayText if there are columns.", "+\t */", "+\tif (columns.length > 0) {", "+\t\tGC gc = new GC (parent);", "+\t\tgc.setFont (getFont (columnIndex));", "+\t\tcomputeDisplayText (columnIndex, gc);", "+\t\ttextWidths [columnIndex] = gc.textExtent (getDisplayText (columnIndex)).x;", "+\t\tgc.dispose ();", "+\t}", "+\t", "+\t\t\t\tif (columns.length > 0) {", "+\t\t\t\t\t/* ", "+\t\t\t\t\t * All column 0 cells will now have less room available for their texts,", "+\t\t\t\t\t * so all items must now recompute their column 0 displayTexts.", "+\t\t\t\t\t */", "+\t\t\t\t\tGC gc = new GC (parent);", "+\t\t\t\t\tTreeItem[] rootItems = parent.items;", "+\t\t\t\t\tfor (int i = 0; i < rootItems.length; i++) {", "+\t\t\t\t\t\trootItems [i].updateColumnWidth (columns [0], gc);", "+\t\t\t\t\t}", "+\t\t\t\t\tgc.dispose ();", "+\t\t\t\t}", "+\t\t\t/* ", "+\t\t\t * All column 0 cells will now have less room available for their texts,", "+\t\t\t * so all items must now recompute their column 0 displayTexts.", "+\t\t\t */", "+\t\t\tGC gc = new GC (parent);", "+\t\t\tTreeItem[] rootItems = parent.items;", "+\t\t\tfor (int i = 0; i < rootItems.length; i++) {", "+\t\t\t\trootItems [i].updateColumnWidth (columns [0], gc);", "+\t\t\t}", "+\t\t\tgc.dispose ();", "+\t\treturn;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d6f0ee6726f2256312dd5e9f4e46af25", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableColumn.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 27, "methodNumberAfterChange": 24, "signatureBeforeChange": " public void setImage(Image image)", "signatureAfterChange": " public void setImage (Image value)", "diff": ["+}", "+public void setImage (Image value) {", "+\tcheckWidget ();", "+\tif (value == image) return;", "+\tif (value != null && value.equals (image)) return;\t/* same value */", "+\tsuper.setImage (value);", "+\t/* An image width change may affect the space available for the column's displayText. */", "+\tGC gc = new GC (parent);", "+\tcomputeDisplayText (gc);", "+\tgc.dispose ();", "+\t", "+\t/*", "+\t * If this is the first image being put into the header then the header", "+\t * height may be adjusted, in which case a full redraw is needed.", "+\t */", "+\tif (parent.headerImageHeight == 0) {", "+\t\tint oldHeaderHeight = parent.getHeaderHeight ();", "+\t\tparent.setHeaderImageHeight (value.getBounds ().height);", "+\t\tif (oldHeaderHeight != parent.getHeaderHeight ()) {", "+\t\t\t/* parent header height changed */", "+\t\t\tparent.header.redraw ();", "+\t\t\tparent.redraw ();", "+\t\t\treturn;", "+\t", "+\tparent.header.redraw (getX (), 0, width, parent.getHeaderHeight (), false);", "-}", "-public void setImage(Image image) {", "-\tsuper.setImage(image);", "-\tHeader header = parent.getHeader();", "-\theader.setHeaderHeight();", "-\theader.redraw();", "-\tparent.redraw();", "-}"]}], "num": 5317}
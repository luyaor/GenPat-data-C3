{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "89163b3920c014553d0348a64172ca86", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ac768cbf9ccef211d88bb768c5696e8a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "7626dd6837c79b3d44c889ada194bd6cf6fefbaf", "commitAfterChange": "f490c340b8fb06c8878d22853dfd8ecb77079ee9", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 31, "signatureBeforeChange": "  void drawInteriorWithFrame_inView (int id, int sel, int cellFrame, int view)", "signatureAfterChange": "  void drawInteriorWithFrame_inView (int id, int sel, int cellFrame, int view)", "diff": ["+\tboolean hooksErase = hooks (SWT.EraseItem);", "+\tboolean hooksPaint = hooks (SWT.PaintItem);", "+\tboolean hooksMeasure = hooks (SWT.MeasureItem);", "-\tNSRange rowsRange = outlineView.rowsInRect (rect);", "-\tint rowIndex = (int)/*64*/rowsRange.location;", "+\tNSPoint pt = new NSPoint();", "+\tpt.x = rect.x + rect.width / 2;", "+\tpt.y = rect.y + rect.height / 2;", "+\tint rowIndex = (int)outlineView.rowAtPoint(pt);", "-\tid nsColumn = null;", "-\tint nsColumnIndex = 0;", "-\t\tNSIndexSet columnsSet = outlineView.columnIndexesInRect (rect);", "-\t\tif (columnsSet.count () == 0) return;\t/* can happen for 0-width column */", "-\t\tnsColumnIndex = (int)/*64*/columnsSet.firstIndex ();", "-\t\tNSArray nsColumns = outlineView.tableColumns ();", "-\t\tnsColumn = nsColumns.objectAtIndex (nsColumnIndex);", "-\t\tfor (int i = 0; i < columnCount; i++) {", "-\t\t\tif (columns[i].nsColumn.id == nsColumn.id) {", "-\t\t\t\tcolumnIndex = indexOf (columns[i]);", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "+\t\tcolumnIndex = (int)outlineView.columnAtPoint(pt);", "+\t\tif ((style & SWT.CHECK) != 0) columnIndex -= 1;", "-\tNSColor nsSelectionBackground = null;", "-\tNSColor nsSelectionForeground = null;", "-\tif (isSelected) {", "+\tColor selectionBackground = null;", "+\tColor selectionForeground = null;", "+\tif (isSelected && (hooksErase || hooksPaint)) {", "+\t\tNSColor nsSelectionForeground, nsSelectionBackground;", "+\t\tfloat /*double*/[] components = new float /*double*/[(int)/*64*/nsSelectionForeground.numberOfComponents ()];", "+\t\tnsSelectionForeground.getComponents (components);\t", "+\t\tselectionForeground = Color.cocoa_new (display, components);", "+\t\tcomponents = new float /*double*/[(int)/*64*/nsSelectionBackground.numberOfComponents ()];", "+\t\tnsSelectionBackground.getComponents (components);\t", "+\t\tselectionBackground = Color.cocoa_new (display, components);", "-", "-\tNSRect fullRect = new NSRect ();", "-\tfullRect.y = rect.y; fullRect.height = rect.height;", "+\t", "+\tNSSize contentSize = cell.cellSize();", "+\tNSSize spacing = outlineView.intercellSpacing();", "+\tint contentWidth = (int)Math.ceil (contentSize.width);", "+\tint itemHeight = (int)Math.ceil (outlineView.rowHeight() + spacing.height);", "+\t", "+\tNSRect cellRect = outlineView.rectOfColumn (columnIndex + ((style & SWT.CHECK) != 0 ? 1 : 0));", "+\tcellRect.y = rect.y;", "+\tcellRect.height = rect.height + spacing.height;", "-\t\tfullRect.x = rect.x;", "-\t\tif (item.customWidth != -1) {", "-\t\t\tfullRect.width = item.customWidth;", "-\t\t} else {", "-\t\t\tNSSize contentSize = cell.cellSizeForBounds (rect);", "-\t\t\tfullRect.width = contentSize.width;", "-\t\t}", "-\t} else {", "-\t\tNSSize spacing = outlineView.intercellSpacing ();", "-\t\tif (nsColumn.id == outlineView.outlineTableColumn ().id) {", "-\t\t\tNSRect columnRect = outlineView.rectOfColumn (nsColumnIndex);", "-\t\t\tfullRect.x = columnRect.x; fullRect.width = columnRect.width + spacing.width;", "-\t\t} else {", "-\t\t\tfullRect.x = rect.x;", "-\t\t\tfullRect.width = rect.width + spacing.width;", "-\t\t}", "+\t\tNSSize clientSize = scrollView.contentSize();", "+\t\tcellRect.width = clientSize.width - cellRect.x;", "-", "-\tif (hooks (SWT.EraseItem)) {", "-\t\tNSRect eraseItemRect = null;", "-\t\t// TODO how to handle rearranged columns?  The third clause below ensures that", "-\t\t// there are either 0 columns or that column 0 is still the first physical column.", "-\t\tif (columnIndex == 0 && (style & SWT.CHECK) != 0 && (columnCount == 0 || outlineView.columnWithIdentifier (columns[0].nsColumn) == 1)) {", "-\t\t\teraseItemRect = new NSRect ();", "-\t\t\teraseItemRect.y = fullRect.y;", "-\t\t\teraseItemRect.width = fullRect.x + fullRect.width;", "-\t\t\teraseItemRect.height = fullRect.height;", "-\t\t} else {", "-\t\t\teraseItemRect = fullRect;", "-\t\t}", "+\t", "+\tif (hooksMeasure) {", "-\t\tdata.paintRect = eraseItemRect;", "+\t\tdata.paintRect = cellRect;", "+\t\tGC gc = GC.cocoa_new (this, data);", "+\t\tgc.setFont (item.getFont (columnIndex));", "+\t\tEvent event = new Event ();", "+\t\tevent.item = item;", "+\t\tevent.gc = gc;", "+\t\tevent.index = columnIndex;", "+\t\tevent.width = contentWidth;", "+\t\tevent.height = itemHeight;", "+\t\tsendEvent (SWT.MeasureItem, event);", "+\t\tgc.dispose ();", "+\t\tif (isDisposed ()) return;", "+\t\tif (itemHeight < event.height) {", "+\t\t\toutlineView.setRowHeight (event.height);", "+\t\t}", "+\t\tif (columnCount == 0 && columnIndex == 0 && contentWidth != event.width) {", "+\t\t\tif (setScrollWidth (item)) {", "+\t\t\t\toutlineView.setNeedsDisplay(true);", "+\t\t\t}", "+\t\t}", "+\t}\t", "+", "+\tif (hooksErase) {", "+\t\tGCData data = new GCData ();", "+\t\tdata.paintRect = cellRect;", "-\t\t\tfloat /*double*/ [] components = new float /*double*/[(int)/*64*/nsSelectionForeground.numberOfComponents ()];", "-\t\t\tnsSelectionForeground.getComponents (components);\t", "-\t\t\tColor selectionForeground = Color.cocoa_new (display, components);", "-\t\t\tcomponents = new float /*double*/[(int)/*64*/nsSelectionBackground.numberOfComponents ()];", "-\t\t\tnsSelectionBackground.getComponents (components);\t", "-\t\t\tColor selectionBackground = Color.cocoa_new (display, components);", "-", "+\t\tgc.setClipping((int)cellRect.x, (int)cellRect.y, (int)cellRect.width, (int)cellRect.height);", "-\t\tevent.x = (int)eraseItemRect.x;", "-\t\tevent.y = (int)eraseItemRect.y;", "-\t\tevent.width = (int)eraseItemRect.width;", "-\t\tevent.height = (int)eraseItemRect.height;", "+\t\tevent.x = (int)cellRect.x;", "+\t\tevent.y = (int)cellRect.y;", "+\t\tevent.width = (int)cellRect.width;", "+\t\tevent.height = (int)cellRect.height;", "-\t\t\tNSRect selectionRect = new NSRect ();", "-\t\t\tselectionRect.y = rect.y; selectionRect.height = rect.height;", "-\t\t\tif (columnCount > 0) {", "-\t\t\t\tNSRect columnRect = outlineView.rectOfColumn (nsColumnIndex);", "-\t\t\t\tselectionRect.x = columnRect.x; selectionRect.width = columnRect.width;", "-\t\t\t} else {", "-\t\t\t\tNSRect rowRect = outlineView.rectOfRow (rowIndex);", "-\t\t\t\tif ((style & SWT.CHECK) != 0) {", "-\t\t\t\t\t/* highlighting at this stage draws over the checkbox, so don't include its column */", "-\t\t\t\t\tint checkWidth = (int)/*64*/checkColumn.width ();", "-\t\t\t\t\tselectionRect.x = checkWidth;", "-\t\t\t\t\tselectionRect.width = rowRect.width - checkWidth;", "-\t\t\t\t} else {", "-\t\t\t\t\tselectionRect.width = rowRect.width;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcallSuper (outlineView.id, OS.sel_highlightSelectionInClipRect_, selectionRect);", "+\t\t\tcellRect.height -= spacing.height;", "+\t\t\tcallSuper (outlineView.id, OS.sel_highlightSelectionInClipRect_, cellRect);", "+\t\t\tcellRect.height += spacing.height;", "-\t\tNSBezierPath.fillRect (fullRect);", "+\t\tNSBezierPath.fillRect (cellRect);", "-\tif (hooks (SWT.PaintItem)) {", "+\tif (hooksPaint) {", "-\t\tNSSize contentSize = cell.cellSizeForBounds (rect);", "-", "-\t\t// TODO how to handle rearranged columns?  The third clause below ensures that", "-\t\t// there are either 0 columns or that column 0 is still the first physical column.", "-\t\tif (columnIndex == 0 && (style & SWT.CHECK) != 0 && (columnCount == 0 || outlineView.columnWithIdentifier (columns[0].nsColumn) == 1)) {", "-\t\t\tNSRect gcRect = new NSRect ();", "-\t\t\tgcRect.y = fullRect.y;", "-\t\t\tgcRect.width = fullRect.x + fullRect.width;", "-\t\t\tgcRect.height = fullRect.height;", "-\t\t\tdata.paintRect = gcRect;", "-\t\t} else {", "-\t\t\tdata.paintRect = fullRect;", "-\t\t}", "+\t\tdata.paintRect = cellRect;", "-\t\t\tfloat /*double*/[] components = new float /*double*/[(int)/*64*/nsSelectionForeground.numberOfComponents ()];", "-\t\t\tnsSelectionForeground.getComponents (components);\t", "-\t\t\tColor selectionForeground = Color.cocoa_new (display, components);", "-\t\t\tcomponents = new float /*double*/[(int)/*64*/nsSelectionBackground.numberOfComponents ()];", "-\t\t\tnsSelectionBackground.getComponents (components);\t", "-\t\t\tColor selectionBackground = Color.cocoa_new (display, components);", "-", "+\t\tgc.setClipping((int)cellRect.x, (int)cellRect.y, (int)cellRect.width, (int)cellRect.height);", "-\t\tevent.width = (int)Math.ceil (contentSize.width);", "-\t\tevent.height = (int)Math.ceil (fullRect.height);", "+\t\tevent.width = contentWidth;", "+\t\tevent.height = itemHeight;", "-}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5e92fc7c6168cd021cda4ab003178f4", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Table.java", "commitBeforeChange": "7626dd6837c79b3d44c889ada194bd6cf6fefbaf", "commitAfterChange": "f490c340b8fb06c8878d22853dfd8ecb77079ee9", "methodNumberBeforeChange": 28, "methodNumberAfterChange": 31, "signatureBeforeChange": "  void drawInteriorWithFrame_inView (int id, int sel, int cellFrame, int view)", "signatureAfterChange": "  void drawInteriorWithFrame_inView (int id, int sel, int cellFrame, int view)", "diff": ["+\tboolean hooksErase = hooks (SWT.EraseItem);", "+\tboolean hooksPaint = hooks (SWT.PaintItem);", "+\tboolean hooksMeasure = hooks (SWT.MeasureItem);", "-\tNSTableView tableView = (NSTableView)this.view;", "+\tNSTableView outlineView = (NSTableView)this.view;", "-\tNSRange rowsRange = tableView.rowsInRect (rect);", "-\tint rowIndex = (int)/*64*/rowsRange.location;", "-\tTableItem item = items [rowIndex];", "+\tNSPoint pt = new NSPoint();", "+\tpt.x = rect.x + rect.width / 2;", "+\tpt.y = rect.y + rect.height / 2;", "+\tint rowIndex = (int)outlineView.rowAtPoint(pt);", "+\tTableItem item = _getItem (rowIndex);", "-\tint nsColumnIndex = 0;", "-\t\tNSIndexSet columnsSet = tableView.columnIndexesInRect (rect);", "-\t\tif (columnsSet.count () == 0) return;\t/* can happen for 0-width column */", "-\t\tnsColumnIndex = (int)/*64*/columnsSet.firstIndex ();", "-\t\tNSArray nsColumns = tableView.tableColumns ();", "-\t\tid nsColumn = nsColumns.objectAtIndex (nsColumnIndex);", "-\t\tfor (int i = 0; i < columnCount; i++) {", "-\t\t\tif (columns[i].nsColumn.id == nsColumn.id) {", "-\t\t\t\tcolumnIndex = indexOf (columns[i]);", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t}", "+\t\tcolumnIndex = (int)outlineView.columnAtPoint(pt);", "+\t\tif ((style & SWT.CHECK) != 0) columnIndex -= 1;", "-\tboolean isSelected = tableView.isRowSelected (rowIndex);", "+\tboolean isSelected = outlineView.isRowSelected (rowIndex);", "-\tNSColor nsSelectionBackground = null;", "-\tNSColor nsSelectionForeground = null;", "-\tif (isSelected) {", "+\tColor selectionBackground = null;", "+\tColor selectionForeground = null;", "+\tif (isSelected && (hooksErase || hooksPaint)) {", "+\t\tNSColor nsSelectionForeground, nsSelectionBackground;", "-\t\tnsSelectionBackground = cell.highlightColorInView (tableView);", "+\t\tnsSelectionBackground = cell.highlightColorInView (outlineView);", "+\t\tfloat /*double*/[] components = new float /*double*/[(int)/*64*/nsSelectionForeground.numberOfComponents ()];", "+\t\tnsSelectionForeground.getComponents (components);\t", "+\t\tselectionForeground = Color.cocoa_new (display, components);", "+\t\tcomponents = new float /*double*/[(int)/*64*/nsSelectionBackground.numberOfComponents ()];", "+\t\tnsSelectionBackground.getComponents (components);\t", "+\t\tselectionBackground = Color.cocoa_new (display, components);", "-", "-\tNSRect fullRect = new NSRect ();", "-\tfullRect.x = rect.x; fullRect.y = rect.y; fullRect.height = rect.height;", "+\t", "+\tNSSize contentSize = cell.cellSize();", "+\tNSSize spacing = outlineView.intercellSpacing();", "+\tint contentWidth = (int)Math.ceil (contentSize.width);", "+\tint itemHeight = (int)Math.ceil (outlineView.rowHeight() + spacing.height);", "+\t", "+\tNSRect cellRect = outlineView.rectOfColumn (columnIndex + ((style & SWT.CHECK) != 0 ? 1 : 0));", "+\tcellRect.y = rect.y;", "+\tcellRect.height = rect.height + spacing.height;", "-\t\tif (item.customWidth != -1) {", "-\t\t\tfullRect.width = item.customWidth;", "-\t\t} else {", "-\t\t\tNSSize contentSize = cell.cellSizeForBounds (rect);", "-\t\t\tfullRect.width = contentSize.width;", "-\t\t}", "-\t} else {", "-\t\tNSSize spacing = tableView.intercellSpacing ();", "-\t\tfullRect.width = rect.width + spacing.width;", "+\t\tNSSize clientSize = scrollView.contentSize();", "+\t\tcellRect.width = clientSize.width - cellRect.x;", "-", "-\tif (hooks (SWT.EraseItem)) {", "-\t\tNSRect eraseItemRect = null;", "-\t\t// TODO how to handle rearranged columns?  The third clause below ensures that", "-\t\t// there are either 0 columns or that column 0 is still the first physical column.", "-\t\tif (columnIndex == 0 && (style & SWT.CHECK) != 0 && (columnCount == 0 || tableView.columnWithIdentifier (columns[0].nsColumn) == 1)) {", "-\t\t\teraseItemRect = new NSRect ();", "-\t\t\teraseItemRect.y = fullRect.y;", "-\t\t\teraseItemRect.width = fullRect.x + fullRect.width;", "-\t\t\teraseItemRect.height = fullRect.height;", "-\t\t} else {", "-\t\t\teraseItemRect = fullRect;", "-\t\t}", "+\t", "+\tif (hooksMeasure) {", "-\t\tdata.paintRect = eraseItemRect;", "+\t\tdata.paintRect = cellRect;", "+\t\tGC gc = GC.cocoa_new (this, data);", "+\t\tgc.setFont (item.getFont (columnIndex));", "+\t\tEvent event = new Event ();", "+\t\tevent.item = item;", "+\t\tevent.gc = gc;", "+\t\tevent.index = columnIndex;", "+\t\tevent.width = contentWidth;", "+\t\tevent.height = itemHeight;", "+\t\tsendEvent (SWT.MeasureItem, event);", "+\t\tgc.dispose ();", "+\t\tif (isDisposed ()) return;", "+\t\tif (itemHeight < event.height) {", "+\t\t\toutlineView.setRowHeight (event.height);", "+\t\t}", "+\t\tif (columnCount == 0 && columnIndex == 0 && contentWidth != event.width) {", "+\t\t\tif (setScrollWidth (item)) {", "+\t\t\t\toutlineView.setNeedsDisplay(true);", "+\t\t\t}", "+\t\t}", "+\t}\t", "+", "+\tif (hooksErase) {", "+\t\tGCData data = new GCData ();", "+\t\tdata.paintRect = cellRect;", "-\t\t\tfloat /*double*/ [] components = new float /*double*/[(int)/*64*/nsSelectionForeground.numberOfComponents ()];", "-\t\t\tnsSelectionForeground.getComponents (components);\t", "-\t\t\tColor selectionForeground = Color.cocoa_new (display, components);", "-\t\t\tcomponents = new float /*double*/[(int)/*64*/nsSelectionBackground.numberOfComponents ()];", "-\t\t\tnsSelectionBackground.getComponents (components);\t", "-\t\t\tColor selectionBackground = Color.cocoa_new (display, components);", "-", "+\t\tgc.setClipping((int)cellRect.x, (int)cellRect.y, (int)cellRect.width, (int)cellRect.height);", "-\t\tevent.x = (int)eraseItemRect.x;", "-\t\tevent.y = (int)eraseItemRect.y;", "-\t\tevent.width = (int)eraseItemRect.width;", "-\t\tevent.height = (int)eraseItemRect.height;", "+\t\tevent.x = (int)cellRect.x;", "+\t\tevent.y = (int)cellRect.y;", "+\t\tevent.width = (int)cellRect.width;", "+\t\tevent.height = (int)cellRect.height;", "-", "-\t\t\tNSRect selectionRect = new NSRect ();", "-\t\t\tselectionRect.y = rect.y; selectionRect.height = rect.height;", "-\t\t\tif (columnCount > 0) {", "-\t\t\t\tNSRect columnRect = tableView.rectOfColumn (nsColumnIndex);", "-\t\t\t\tselectionRect.x = columnRect.x; selectionRect.width = columnRect.width;", "-\t\t\t} else {", "-\t\t\t\tNSRect rowRect = tableView.rectOfRow (rowIndex);", "-\t\t\t\tif ((style & SWT.CHECK) != 0) {", "-\t\t\t\t\t/* highlighting at this stage draws over the checkbox, so don't include its column */", "-\t\t\t\t\tint checkWidth = (int)/*64*/checkColumn.width ();", "-\t\t\t\t\tselectionRect.x = checkWidth;", "-\t\t\t\t\tselectionRect.width = rowRect.width - checkWidth;", "-\t\t\t\t} else {", "-\t\t\t\t\tselectionRect.width = rowRect.width;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tcallSuper (tableView.id, OS.sel_highlightSelectionInClipRect_, selectionRect);", "-\t\t}\t", "+\t\t\tcellRect.height -= spacing.height;", "+\t\t\tcallSuper (outlineView.id, OS.sel_highlightSelectionInClipRect_, cellRect);", "+\t\t\tcellRect.height += spacing.height;", "+\t\t}", "-\t\tNSBezierPath.fillRect (fullRect);", "+\t\tNSBezierPath.fillRect (cellRect);", "-\tif (hooks (SWT.PaintItem)) {", "+\tif (hooksPaint) {", "-\t\tNSSize contentSize = cell.cellSizeForBounds (rect);", "-", "-\t\t// TODO how to handle rearranged columns?  The third clause below ensures that", "-\t\t// there are either 0 columns or that column 0 is still the first physical column.", "-\t\tif (columnIndex == 0 && (style & SWT.CHECK) != 0 && (columnCount == 0 || tableView.columnWithIdentifier (columns[0].nsColumn) == 1)) {", "-\t\t\tNSRect gcRect = new NSRect ();", "-\t\t\tgcRect.y = fullRect.y;", "-\t\t\tgcRect.width = fullRect.x + fullRect.width;", "-\t\t\tgcRect.height = fullRect.height;", "-\t\t\tdata.paintRect = gcRect;", "-\t\t} else {", "-\t\t\tdata.paintRect = fullRect;", "-\t\t}", "+\t\tdata.paintRect = cellRect;", "-\t\t\tfloat /*double*/[] components = new float /*double*/[(int)/*64*/nsSelectionForeground.numberOfComponents ()];", "-\t\t\tnsSelectionForeground.getComponents (components);\t", "-\t\t\tColor selectionForeground = Color.cocoa_new (display, components);", "-\t\t\tcomponents = new float /*double*/[(int)/*64*/nsSelectionBackground.numberOfComponents ()];", "-\t\t\tnsSelectionBackground.getComponents (components);\t", "-\t\t\tColor selectionBackground = Color.cocoa_new (display, components);", "-", "+\t\tgc.setClipping((int)cellRect.x, (int)cellRect.y, (int)cellRect.width, (int)cellRect.height);", "-\t\tevent.width = (int)Math.ceil (contentSize.width);", "-\t\tevent.height = (int)Math.ceil (fullRect.height);", "+\t\tevent.width = contentWidth;", "+\t\tevent.height = itemHeight;", "+\t}", "+}"]}], "num": 61781}
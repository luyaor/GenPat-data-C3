{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "48ff269aced9cd62fe3a396e37aa520d", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8f3f08bb5b015b66b10793f60dcd17d6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "b197fadb3502216356123da9439cdb60982a1cd2", "commitAfterChange": "849f9fe02214fcd8662b26bd0db659c0d86c1384", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 24, "signatureBeforeChange": " void doPageUp(int stateMask)", "signatureAfterChange": " void doPageUp(int stateMask)", "diff": ["+\tint visibleItemCount = (getClientArea().height - getHeaderHeight()) / itemHeight;", "-\t\tint visibleItemCount = (getClientArea().height - getHeaderHeight()) / itemHeight;", "-\t// TODO handle modifier key cases", "+\tif ((stateMask & (SWT.CTRL | SWT.SHIFT)) == (SWT.CTRL | SWT.SHIFT)) {", "+\t\tint newTopIndex = Math.max (0, topIndex - visibleItemCount);", "+\t\tif (newTopIndex == topIndex) return;", "+\t\tsetTopItem(availableItems[newTopIndex]);", "+\t\treturn;", "+\t}", "+\tif ((style & SWT.SINGLE) != 0) {", "+\t\tif ((stateMask & SWT.SHIFT) != 0) {", "+\t\t\tint newFocusIndex = focusItem.availableIndex - visibleItemCount + 1;", "+\t\t\tnewFocusIndex = Math.max(newFocusIndex, 0);", "+\t\t\tTreeItem2 item = availableItems[newFocusIndex];", "+\t\t\tselectItem(item, false);", "+\t\t\tsetFocusItem(item, true);", "+\t\t\tshowItem(item);", "+\t\t\tredrawItem(item.availableIndex);", "+\t\t\treturn;", "+\t\t}", "+\t\tint newTopIndex = Math.max (0, topIndex - visibleItemCount);", "+\t\tif (newTopIndex == topIndex) return;", "+\t\tsetTopItem(availableItems[newTopIndex]);", "+\t\treturn;", "+\t}", "+\tif ((stateMask & SWT.CTRL) != 0) {", "+\t\tif (focusItem.availableIndex != topIndex) {", "+\t\t\tsetFocusItem(availableItems[topIndex], true);", "+\t\t\tredrawItem(topIndex);", "+\t\t\treturn;", "+\t\t}", "+\t\tif (focusItem.availableIndex == 0) return;\t\t/* at top */", "+\t\tint newTopIndex = Math.max(0, topIndex - visibleItemCount + 1);", "+\t\tsetFocusItem(availableItems[newTopIndex], false);", "+\t\tsetTopItem(availableItems[newTopIndex]);", "+\t\treturn;", "+\t}", "+\t/* SWT.SHIFT */", "+\tif (anchorItem == null) anchorItem = focusItem;", "+\tint anchorIndex = anchorItem.availableIndex;", "+\tint selectIndex = Math.max(0,focusItem.availableIndex - visibleItemCount + 1);", "+\tTreeItem2 selectedItem = availableItems[selectIndex];", "+\tTreeItem2[] newSelection = new TreeItem2 [Math.abs(anchorIndex - selectIndex) + 1];", "+\tint step = anchorIndex < selectIndex ? 1 : -1;", "+\tint writeIndex = 0;", "+\tfor (int i = anchorIndex; i != selectIndex; i += step) {", "+\t\tnewSelection[writeIndex++] = availableItems[i];", "+\t}", "+\tnewSelection[writeIndex] = availableItems[selectIndex];", "+\tsetSelection(newSelection);", "+\tsetFocusItem(selectedItem, true);", "+\tshowItem(selectedItem);", "+\tEvent newEvent = new Event();", "+\tnewEvent.item = selectedItem;", "+\tsendEvent(SWT.Selection, newEvent);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f5a071390f907ff85877d5cb9183a03d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "977d5e0f203ec4ef6c7d327c6fb00fb7e3a9fea1", "commitAfterChange": "d90c1dac39bb5b1c9da1307d0ac9b1f40b093e4c", "methodNumberBeforeChange": 21, "methodNumberAfterChange": 21, "signatureBeforeChange": " void doMouseDown(Event event)", "signatureAfterChange": " void doMouseDown(Event event)", "diff": ["+\tif ((event.stateMask & SWT.SHIFT) == 0) anchorItem = null;", "+", "-\t\t\t} else {", "-\t\t\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == 0) {", "-\t\t\t\t\tselectItem(selectedItem, false);", "-\t\t\t\t\tsetFocusItem(selectedItem, true);", "-\t\t\t\t\tEvent newEvent = new Event();", "-\t\t\t\t\tnewEvent.item = selectedItem;", "-\t\t\t\t\tsendEvent(SWT.Selection, newEvent);", "-\t\t\t\t\tredrawItem(selectedItem.availableIndex);", "-\t\t\t\t}", "+\t\t\t\treturn;", "-\t\t} else {\t/* item is selected */", "-\t\t\tif (event.button == 1) {", "-\t\t\t\t/* fire a selection event, though the selection did not change */", "-\t\t\t\tEvent newEvent = new Event();", "-\t\t\t\tnewEvent.item = selectedItem;", "-\t\t\t\tsendEvent(SWT.Selection, newEvent);", "-\t\t\t}", "-\t\t}", "-\t} else {\t/* SWT.MULTI */", "-\t\tif (!selectedItem.selected) {", "-\t\t\tif (event.button == 1) {", "-\t\t\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == SWT.SHIFT) {", "-\t\t\t\t\t// TODO do shift-select", "-\t\t\t\t} else {", "-\t\t\t\t\tselectItem(selectedItem, (event.stateMask & SWT.CTRL) != 0);", "-\t\t\t\t\tsetFocusItem(selectedItem, true);", "-\t\t\t\t\tEvent newEvent = new Event();", "-\t\t\t\t\tnewEvent.item = selectedItem;", "-\t\t\t\t\tsendEvent(SWT.Selection, newEvent);", "-\t\t\t\t\tredrawItem(selectedItem.availableIndex);", "-\t\t\t\t}", "-\t\t\t} else {\t/* button 3 */", "-\t\t\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == 0) {", "-\t\t\t\t\tselectItem(selectedItem, false);", "-\t\t\t\t\tsetFocusItem(selectedItem, true);", "-\t\t\t\t\tEvent newEvent = new Event();", "-\t\t\t\t\tnewEvent.item = selectedItem;", "-\t\t\t\t\tsendEvent(SWT.Selection, newEvent);", "-\t\t\t\t\tredrawItem(selectedItem.availableIndex);", "-\t\t\t\t}", "-\t\t\t}", "-\t\t} else {\t/* item is selected */", "-\t\t\tif (event.button != 1) return;", "-\t\t\tif ((event.stateMask & SWT.CTRL) != 0) {", "-\t\t\t\tremoveSelectedItem(getSelectionIndex(selectedItem));", "+\t\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == 0) {", "+\t\t\t\tselectItem(selectedItem, false);", "-\t\t\t\tredrawItem(selectedItem.availableIndex);", "-\t\t\t} else {", "-\t\t\t\tif ((event.stateMask & SWT.SHIFT) != 0) {", "-\t\t\t\t\t// TODO study this", "-\t\t\t\t} else {", "-\t\t\t\t\tselectItem(selectedItem, false);", "-\t\t\t\t\tsetFocusItem(selectedItem, true);", "-\t\t\t\t\tEvent newEvent = new Event();", "-\t\t\t\t\tnewEvent.item = selectedItem;", "-\t\t\t\t\tsendEvent(SWT.Selection, newEvent);", "-\t\t\t\t\tredrawItem(selectedItem.availableIndex);", "-\t\t\t\t}", "+\t\t\t\tredrawItem(selectedItem.availableIndex);", "+\t\t\t\treturn;", "-\t}\t\t", "+\t\t/* item is selected */", "+\t\tif (event.button == 1) {", "+\t\t\t/* fire a selection event, though the selection did not change */", "+\t\t\tEvent newEvent = new Event();", "+\t\t\tnewEvent.item = selectedItem;", "+\t\t\tsendEvent(SWT.Selection, newEvent);", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t/* SWT.MULTI */", "+\tif (!selectedItem.selected) {", "+\t\tif (event.button == 1) {", "+\t\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == SWT.SHIFT) {", "+\t\t\t\tif (anchorItem == null) anchorItem = focusItem;", "+\t\t\t\tint anchorIndex = anchorItem.availableIndex;", "+\t\t\t\tint selectIndex = selectedItem.availableIndex;", "+\t\t\t\tTreeItem2[] newSelection = new TreeItem2 [Math.abs(anchorIndex - selectIndex) + 1];", "+\t\t\t\tint step = anchorIndex < selectIndex ? 1 : -1;", "+\t\t\t\tint writeIndex = 0;", "+\t\t\t\tfor (int i = anchorIndex; i != selectIndex; i += step) {", "+\t\t\t\t\tnewSelection[writeIndex++] = availableItems[i];", "+\t\t\t\t}", "+\t\t\t\tnewSelection[writeIndex] = availableItems[selectIndex];", "+\t\t\t\tsetSelection(newSelection);", "+\t\t\t\tsetFocusItem(selectedItem, true);", "+\t\t\t\tEvent newEvent = new Event();", "+\t\t\t\tnewEvent.item = selectedItem;", "+\t\t\t\tsendEvent(SWT.Selection, newEvent);", "+\t\t\t\tredrawItems(Math.min(anchorIndex, selectIndex), Math.max(anchorIndex, selectIndex));", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\t\tselectItem(selectedItem, (event.stateMask & SWT.CTRL) != 0);", "+\t\t\tsetFocusItem(selectedItem, true);", "+\t\t\tEvent newEvent = new Event();", "+\t\t\tnewEvent.item = selectedItem;", "+\t\t\tsendEvent(SWT.Selection, newEvent);", "+\t\t\tredrawItem(selectedItem.availableIndex);", "+\t\t\treturn;", "+\t\t}", "+\t\t/* button 3 */", "+\t\tif ((event.stateMask & (SWT.CTRL | SWT.SHIFT)) == 0) {", "+\t\t\tselectItem(selectedItem, false);", "+\t\t\tsetFocusItem(selectedItem, true);", "+\t\t\tEvent newEvent = new Event();", "+\t\t\tnewEvent.item = selectedItem;", "+\t\t\tsendEvent(SWT.Selection, newEvent);", "+\t\t\tredrawItem(selectedItem.availableIndex);", "+\t\t\treturn;", "+\t\t}", "+\t}", "+\t/* item is selected */", "+\tif (event.button != 1) return;", "+\tif ((event.stateMask & SWT.CTRL) != 0) {", "+\t\tremoveSelectedItem(getSelectionIndex(selectedItem));", "+\t\tsetFocusItem(selectedItem, true);", "+\t\tredrawItem(selectedItem.availableIndex);", "+\t\tEvent newEvent = new Event();", "+\t\tnewEvent.item = selectedItem;", "+\t\tsendEvent(SWT.Selection, newEvent);", "+\t\treturn;", "+\t}", "+\tif ((event.stateMask & SWT.SHIFT) != 0) {", "+\t\tif (anchorItem == null) anchorItem = focusItem;", "+\t\tint anchorIndex = anchorItem.availableIndex;", "+\t\tint selectIndex = selectedItem.availableIndex;", "+\t\tTreeItem2[] newSelection = new TreeItem2 [Math.abs(anchorIndex - selectIndex) + 1];", "+\t\tint step = anchorIndex < selectIndex ? 1 : -1;", "+\t\tint writeIndex = 0;", "+\t\tfor (int i = anchorIndex; i != selectIndex; i += step) {", "+\t\t\tnewSelection[writeIndex++] = availableItems[i];", "+\t\t}", "+\t\tnewSelection[writeIndex] = availableItems[selectIndex];", "+\t\tsetSelection(newSelection);", "+\t\tsetFocusItem(selectedItem, true);", "+\t\tEvent newEvent = new Event();", "+\t\tnewEvent.item = selectedItem;", "+\t\tsendEvent(SWT.Selection, newEvent);", "+\t\tredrawItems(Math.min(anchorIndex, selectIndex), Math.max(anchorIndex, selectIndex));", "+\t\treturn;", "+\t}", "+\tselectItem(selectedItem, false);", "+\tsetFocusItem(selectedItem, true);", "+\tEvent newEvent = new Event();", "+\tnewEvent.item = selectedItem;", "+\tsendEvent(SWT.Selection, newEvent);", "+\tredrawItem(selectedItem.availableIndex);", "+\treturn;"]}], "num": 48759}
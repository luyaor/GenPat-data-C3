{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "151078ae08367621f11d06e362df068e", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7ec24f1f3892b66f7c60797d00f1c6e3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Browser/motif/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "aba7185e69c3de110fa2de3fb89398ad487363ce", "commitAfterChange": "d5e012b1070396caffdf72fd112844991f566742", "methodNumberBeforeChange": 108, "methodNumberAfterChange": 108, "signatureBeforeChange": " public boolean setText(String html)", "signatureAfterChange": " public boolean setText(String html)", "diff": ["-\t/* Convert the String containing HTML to an array of", "+\t/*", "+\t * Convert the String containing HTML to an array of", "-\t/* render HTML in memory */\t\t", "-\tInputStream inputStream = new InputStream(data);", "-\tinputStream.AddRef();", "-\tint rc = webBrowser.QueryInterface(nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result);", "-\tif (rc != XPCOM.NS_OK) error(rc);", "-\tif (result[0] == 0) error(XPCOM.NS_ERROR_NO_INTERFACE);", "-\t", "-\tnsIInterfaceRequestor interfaceRequestor = new nsIInterfaceRequestor(result[0]);", "-\tresult[0] = 0;", "-\trc = interfaceRequestor.GetInterface(nsIDocShell.NS_IDOCSHELL_IID, result);\t\t\t\t", "-\tif (rc != XPCOM.NS_OK) error(rc);", "-\tif (result[0] == 0) error(XPCOM.NS_ERROR_NO_INTERFACE);", "-\tinterfaceRequestor.Release();", "-\t", "-\tnsIDocShell docShell = new nsIDocShell(result[0]);", "-\tresult[0] = 0;", "-\t\t", "-\trc = XPCOM.NS_GetServiceManager(result);", "+\tint rc = XPCOM.NS_GetServiceManager(result);", "-\t", "+", "-\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "+\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\tserviceManager.Release();", "-\trc = XPCOM.NS_GetComponentManager(result);", "-\tif (rc != XPCOM.NS_OK) error(rc);", "-\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "-\tbyte[] buffer = \"text/plain\".getBytes(); //$NON-NLS-1$", "+\tbyte[] buffer = \"text/html\".getBytes(); //$NON-NLS-1$", "-\tbuffer = \"UTF-8\".getBytes(); //$NON-NLS-1$", "-\tbyte[] contentCharsetBuffer = new byte[buffer.length + 1];", "-\tSystem.arraycopy(buffer, 0, contentCharsetBuffer, 0, buffer.length);", "-\tint /*long*/ aContentCharset = XPCOM.nsEmbedCString_new(contentCharsetBuffer, contentCharsetBuffer.length);", "-", "-\t* Feature in Mozilla. LoadStream invokes the nsIInputStream argument", "-\t* through a different thread.  The callback mechanism must attach ", "-\t* a non java thread to the JVM otherwise the nsIInputStream Read and", "-\t* Close methods never get called.", "-\t*/", "-\trc = docShell.LoadStream(inputStream.getAddress(), uri.getAddress(), aContentType,  aContentCharset, 0);", "-\tif (rc != XPCOM.NS_OK) error(rc);", "+\t * First try to use nsIWebBrowserStream to set the text into the Browser, since this", "+\t * interface is frozen.  However, this may fail because this interface was only introduced", "+\t * as of mozilla 1.8; if this interface is not found then use the pre-1.8 approach of", "+\t * utilizing nsIDocShell instead. ", "+\t */", "+\tresult[0] = 0;", "+\trc = webBrowser.QueryInterface(nsIWebBrowserStream.NS_IWEBBROWSERSTREAM_IID, result);", "+\tif (rc == XPCOM.NS_OK) {", "+\t\tif (result[0] == 0) error(XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\tnsIWebBrowserStream stream = new nsIWebBrowserStream (result [0]);", "+\t\trc = stream.OpenStream(uri.getAddress(), aContentType);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\tXPCOM.nsEmbedCString_delete(aContentCharset);", "+\t\tchar[] charBuffer = new char[html.length() + 1];", "+\t\thtml.getChars(0, html.length(), charBuffer, 0);", "+\t\tint size = charBuffer.length * 2;", "+\t\tint /*long*/ ptr = XPCOM.PR_Malloc(size);", "+\t\tXPCOM.memmove(ptr, charBuffer, size);", "+\t\trc = stream.AppendToStream(ptr, html.length());", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\trc = stream.CloseStream();", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tXPCOM.PR_Free(ptr);", "+\t\tstream.Release();", "+\t} else {", "+\t\trc = webBrowser.QueryInterface(nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tif (result[0] == 0) error(XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\t", "+\t\tnsIInterfaceRequestor interfaceRequestor = new nsIInterfaceRequestor(result[0]);", "+\t\tresult[0] = 0;", "+\t\trc = interfaceRequestor.GetInterface(nsIDocShell.NS_IDOCSHELL_IID, result);\t\t\t\t", "+\t\tinterfaceRequestor.Release();", "+", "+\t\tnsIDocShell docShell = new nsIDocShell(result[0]);", "+\t\tresult[0] = 0;", "+\t\tbuffer = \"UTF-8\".getBytes(); //$NON-NLS-1$", "+\t\tbyte[] contentCharsetBuffer = new byte[buffer.length + 1];", "+\t\tSystem.arraycopy(buffer, 0, contentCharsetBuffer, 0, buffer.length);", "+\t\tint /*long*/ aContentCharset = XPCOM.nsEmbedCString_new(contentCharsetBuffer, contentCharsetBuffer.length);", "+", "+\t\t/*", "+\t\t* Feature in Mozilla. LoadStream invokes the nsIInputStream argument", "+\t\t* through a different thread.  The callback mechanism must attach ", "+\t\t* a non java thread to the JVM otherwise the nsIInputStream Read and", "+\t\t* Close methods never get called.", "+\t\t*/", "+\t\tInputStream inputStream = new InputStream(data);", "+\t\tinputStream.AddRef();", "+\t\trc = docShell.LoadStream(inputStream.getAddress(), uri.getAddress(), aContentType,  aContentCharset, 0);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tXPCOM.nsEmbedCString_delete(aContentCharset);", "+\t\tinputStream.Release();", "+\t\tdocShell.Release();", "+\t}", "+", "-\tinputStream.Release();", "-\tdocShell.Release();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ed8f44acb0cd67f321000104310900b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/gtk/org/eclipse/swt/browser/Browser.java", "commitBeforeChange": "1c0f8b0373f50c18674d6e6b47455869b506185e", "commitAfterChange": "1f7111328c5c9f15dcc13c0ffe298138a31b68ac", "methodNumberBeforeChange": 110, "methodNumberAfterChange": 110, "signatureBeforeChange": " public boolean setText(String html)", "signatureAfterChange": " public boolean setText(String html)", "diff": ["-\t/* Convert the String containing HTML to an array of", "+\t/*", "+\t * Convert the String containing HTML to an array of", "-\t/* render HTML in memory */\t\t", "-\tInputStream inputStream = new InputStream(data);", "-\tinputStream.AddRef();", "-\tint rc = webBrowser.QueryInterface(nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result);", "-\tif (rc != XPCOM.NS_OK) error(rc);", "-\tif (result[0] == 0) error(XPCOM.NS_ERROR_NO_INTERFACE);", "-\t", "-\tnsIInterfaceRequestor interfaceRequestor = new nsIInterfaceRequestor(result[0]);", "-\tresult[0] = 0;", "-\trc = interfaceRequestor.GetInterface(nsIDocShell.NS_IDOCSHELL_IID, result);\t\t\t\t", "-\tif (rc != XPCOM.NS_OK) error(rc);", "-\tif (result[0] == 0) error(XPCOM.NS_ERROR_NO_INTERFACE);", "-\tinterfaceRequestor.Release();", "-\t", "-\tnsIDocShell docShell = new nsIDocShell(result[0]);", "-\tresult[0] = 0;", "-\t\t", "-\trc = XPCOM.NS_GetServiceManager(result);", "+\tint rc = XPCOM.NS_GetServiceManager(result);", "-\t", "+", "-\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);\t\t", "+\tif (result[0] == 0) error(XPCOM.NS_NOINTERFACE);", "+\tserviceManager.Release();", "-\tbyte[] buffer = \"text/plain\".getBytes(); //$NON-NLS-1$", "+\tbyte[] buffer = \"text/html\".getBytes(); //$NON-NLS-1$", "-\tbuffer = \"UTF-8\".getBytes(); //$NON-NLS-1$", "-\tbyte[] contentCharsetBuffer = new byte[buffer.length + 1];", "-\tSystem.arraycopy(buffer, 0, contentCharsetBuffer, 0, buffer.length);", "-\tint /*long*/ aContentCharset = XPCOM.nsEmbedCString_new(contentCharsetBuffer, contentCharsetBuffer.length);", "-", "-\t* Feature in Mozilla. LoadStream invokes the nsIInputStream argument", "-\t* through a different thread.  The callback mechanism must attach ", "-\t* a non java thread to the JVM otherwise the nsIInputStream Read and", "-\t* Close methods never get called.", "-\t*/", "-\trc = docShell.LoadStream(inputStream.getAddress(), uri.getAddress(), aContentType,  aContentCharset, 0);", "-\tif (rc != XPCOM.NS_OK) error(rc);", "+\t * First try to use nsIWebBrowserStream to set the text into the Browser, since this", "+\t * interface is frozen.  However, this may fail because this interface was only introduced", "+\t * as of mozilla 1.8; if this interface is not found then use the pre-1.8 approach of", "+\t * utilizing nsIDocShell instead. ", "+\t */", "+\tresult[0] = 0;", "+\trc = webBrowser.QueryInterface(nsIWebBrowserStream.NS_IWEBBROWSERSTREAM_IID, result);", "+\tif (rc == XPCOM.NS_OK) {", "+\t\tif (result[0] == 0) error(XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\tnsIWebBrowserStream stream = new nsIWebBrowserStream (result [0]);", "+\t\trc = stream.OpenStream(uri.getAddress(), aContentType);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "-\tXPCOM.nsEmbedCString_delete(aContentCharset);", "+\t\tchar[] charBuffer = new char[html.length() + 1];", "+\t\thtml.getChars(0, html.length(), charBuffer, 0);", "+\t\tint size = charBuffer.length * 2;", "+\t\tint ptr = XPCOM.PR_Malloc(size);", "+\t\tXPCOM.memmove(ptr, charBuffer, size);", "+\t\trc = stream.AppendToStream(ptr, html.length());", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\trc = stream.CloseStream();", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tXPCOM.PR_Free(ptr);", "+\t\tstream.Release();", "+\t} else {", "+\t\trc = webBrowser.QueryInterface(nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tif (result[0] == 0) error(XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\t", "+\t\tnsIInterfaceRequestor interfaceRequestor = new nsIInterfaceRequestor(result[0]);", "+\t\tresult[0] = 0;", "+\t\trc = interfaceRequestor.GetInterface(nsIDocShell.NS_IDOCSHELL_IID, result);\t\t\t\t", "+\t\tinterfaceRequestor.Release();", "+", "+\t\tnsIDocShell docShell = new nsIDocShell(result[0]);", "+\t\tresult[0] = 0;", "+\t\tbuffer = \"UTF-8\".getBytes(); //$NON-NLS-1$", "+\t\tbyte[] contentCharsetBuffer = new byte[buffer.length + 1];", "+\t\tSystem.arraycopy(buffer, 0, contentCharsetBuffer, 0, buffer.length);", "+\t\tint /*long*/ aContentCharset = XPCOM.nsEmbedCString_new(contentCharsetBuffer, contentCharsetBuffer.length);", "+", "+\t\t/*", "+\t\t* Feature in Mozilla. LoadStream invokes the nsIInputStream argument", "+\t\t* through a different thread.  The callback mechanism must attach ", "+\t\t* a non java thread to the JVM otherwise the nsIInputStream Read and", "+\t\t* Close methods never get called.", "+\t\t*/", "+\t\tInputStream inputStream = new InputStream(data);", "+\t\tinputStream.AddRef();", "+\t\trc = docShell.LoadStream(inputStream.getAddress(), uri.getAddress(), aContentType,  aContentCharset, 0);", "+\t\tif (rc != XPCOM.NS_OK) error(rc);", "+\t\tXPCOM.nsEmbedCString_delete(aContentCharset);", "+\t\tinputStream.Release();", "+\t\tdocShell.Release();", "+\t}", "+", "-\tinputStream.Release();", "-\tdocShell.Release();"]}], "num": 54116}
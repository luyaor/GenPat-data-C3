{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "856134d2d671f6ce06df80489eb871ab", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8cafe36c7f2a03a7f15dbd2f02fe651a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "1587016128f120779b698d8ab37efa85ed9c8e7c", "commitAfterChange": "0ccce2455aaf79db752792a412e87db0472b05bc", "methodNumberBeforeChange": 177, "methodNumberAfterChange": 177, "signatureBeforeChange": "  int applicationNextEventMatchingMask (int id, int sel, int mask, int expiration, int mode, int dequeue)", "signatureAfterChange": "  int applicationNextEventMatchingMask (int id, int sel, int mask, int expiration, int mode, int dequeue)", "diff": ["+\t\t/*", "+\t\t * Feature of Cocoa.  When an NSComboBox's items list is visible it runs an event", "+\t\t * loop that will close the list in response to a processed NSApplicationDefined", "+\t\t * event.", "+\t\t *", "+\t\t * Mozilla-style Browsers are a common source of NSApplicationDefined events that", "+\t\t * will cause this to happen, which is not desirable in the context of SWT.  The", "+\t\t * workaround is to detect this case and to not return the event that would trigger", "+\t\t * this to happen.", "+\t\t */", "+\t\tif (comboPoppedUp && mozillaCount > 0 && dequeue != 0) {", "+\t\t\tNSEvent event = new NSEvent(result);", "+\t\t\tif (event.type() == OS.NSApplicationDefined) {", "+\t\t\t\treturn 0;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b41d5f10c58b5d49ff98d48b278a8bc6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "0c265790d48c978702367475ec1c694c7aa98881", "commitAfterChange": "420ecc6978c2595bdf9b71ed40b757930d738678", "methodNumberBeforeChange": 26, "methodNumberAfterChange": 26, "signatureBeforeChange": " public void setImage (Image image)", "signatureAfterChange": " public void setImage (Image image)", "diff": ["+", "+\t/*", "+\t * Feature in Cocoa.  If the NSImage object being set into the view is", "+\t * the same NSImage object that is already there then the new image is", "+\t * not taken.  This results in the view's image not changing even if the", "+\t * NSImage object's content has changed since it was last set into the", "+\t * view.  The workaround is to temporarily set the view's image to null", "+\t * so that the new image will then be taken.", "+\t */", "+\tif (image != null) {", "+\t\tNSImage current = imageView.image ();", "+\t\tif (current != null && current.id == image.handle.id) {", "+\t\t\timageView.setImage (null);", "+\t\t}", "+\t}"]}], "num": 6392}
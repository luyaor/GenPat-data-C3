{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d51aeee0b37bca9c8c74df58a93a52b8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "71ad606f5295e0d2fc288f2198681ee7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Link.java", "commitBeforeChange": "9cc053d556a94aaf25144992ddf0abdf8398b3f4", "commitAfterChange": "981f2e38ad5b71e9d71d5276dfd16a4ea80c1666", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 21, "signatureBeforeChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  boolean sendMouseEvent (int type, short button, int count, int detail, boolean send, int chord, short x, short y, int modifiers)", "diff": ["-", "-int kEventMouseDown (int nextHandler, int theEvent, int userData) {", "-\tint result = super.kEventMouseDown (nextHandler, theEvent, userData);", "-\tif (result == OS.noErr) return result;", "-\tshort [] button = new short [1];", "-\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button);", "-\tint [] clickCount = new int [1];", "-\tOS.GetEventParameter (theEvent, OS.kEventParamClickCount, OS.typeUInt32, null, 4, null, clickCount);", "-\tif (button [0] == 1 && clickCount [0] == 1) {", "-\t\tint x, y;", "-\t\tif (OS.HIVIEW) {", "-\t\t\tCGPoint pt = new CGPoint ();", "-\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamWindowMouseLocation, OS.typeHIPoint, null, CGPoint.sizeof, null, pt);", "-\t\t\tOS.HIViewConvertPoint (pt, 0, handle);", "-\t\t\tx = (int) pt.x;", "-\t\t\ty = (int) pt.y;", "-\t\t} else {", "-\t\t\tint sizeof = org.eclipse.swt.internal.carbon.Point.sizeof;", "-\t\t\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "-\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseLocation, OS.typeQDPoint, null, sizeof, null, pt);", "-\t\t\tRect rect = new Rect ();", "-\t\t\tint window = OS.GetControlOwner (handle);", "-\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "-\t\t\tx = pt.h - rect.left;", "-\t\t\ty = pt.v - rect.top;", "-\t\t\tOS.GetControlBounds (handle, rect);", "-\t\t\tx -= rect.left;", "-\t\t\ty -= rect.top;", "-\t\t}", "-\t\tint offset = layout.getOffset (x, y, null);", "-\t\tint oldSelectionX = selection.x;", "-\t\tint oldSelectionY = selection.y;", "-\t\tselection.x = offset;", "-\t\tselection.y = -1;", "-\t\tif (oldSelectionX != -1 && oldSelectionY != -1) {", "-\t\t\tif (oldSelectionX > oldSelectionY) {", "-\t\t\t\tint temp = oldSelectionX;", "-\t\t\t\toldSelectionX = oldSelectionY;", "-\t\t\t\toldSelectionY = temp;", "-\t\t\t}", "-\t\t\tRectangle rectangle = layout.getBounds (oldSelectionX, oldSelectionY);", "-\t\t\tredraw (rectangle.x, rectangle.y, rectangle.width, rectangle.height, false);", "-\t\t}\t\t", "-\t\tfor (int j = 0; j < offsets.length; j++) {", "-\t\t\tRectangle [] rects = getRectangles (j);", "-\t\t\tfor (int i = 0; i < rects.length; i++) {", "-\t\t\t\tRectangle rectangle = rects [i];", "-\t\t\t\tif (rectangle.contains (x, y)) {", "-\t\t\t\t\tfocusIndex = j;", "-\t\t\t\t\tredraw ();", "-\t\t\t\t\treturn result;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t}", "-\t", "-\tint window = OS.GetControlOwner (handle);", "-\tint port = OS.HIVIEW ? -1 : OS.GetWindowPort (window);", "-\tint [] outModifiers = new int [1];", "-\tshort [] outResult = new short [1];", "-\tCGPoint pt = new CGPoint ();", "-\tRect rect = new Rect ();", "-\torg.eclipse.swt.internal.carbon.Point outPt = new org.eclipse.swt.internal.carbon.Point ();", "-\twhile (outResult [0] != OS.kMouseTrackingMouseUp) {", "-\t\tOS.TrackMouseLocationWithOptions (port, 0, OS.kEventDurationForever, outPt, outModifiers, outResult);", "-\t\tswitch (outResult [0]) {", "-\t\t\tcase OS.kMouseTrackingMouseDown:", "-\t\t\tcase OS.kMouseTrackingMouseUp:", "-\t\t\tcase OS.kMouseTrackingMouseDragged: {", "-\t\t\t\tint chord = OS.GetCurrentEventButtonState ();", "-\t\t\t\tif ((chord & 0x01) != 0) {", "-\t\t\t\t\tint x, y;", "-\t\t\t\t\tif (OS.HIVIEW) {", "-\t\t\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowStructureRgn, rect);", "-\t\t\t\t\t\tpt.x = outPt.h - rect.left;", "-\t\t\t\t\t\tpt.y = outPt.v - rect.top;", "-\t\t\t\t\t\tOS.HIViewConvertPoint (pt, 0, handle);", "-\t\t\t\t\t\tx = (int) pt.x;", "-\t\t\t\t\t\ty = (int) pt.y;", "-\t\t\t\t\t} else {", "-\t\t\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "-\t\t\t\t\t\tx = outPt.h;", "-\t\t\t\t\t\ty = outPt.v;", "-\t\t\t\t\t\tOS.GetControlBounds (handle, rect);", "-\t\t\t\t\t\tx -= rect.left;", "-\t\t\t\t\t\ty -= rect.top;", "-\t\t\t\t\t}", "-\t\t\t\t\tint oldSelection = selection.y;", "-\t\t\t\t\tselection.y = layout.getOffset (x, y, null);", "-\t\t\t\t\tif (selection.y != oldSelection) {", "-\t\t\t\t\t\tint newSelection = selection.y;", "-\t\t\t\t\t\tif (oldSelection > newSelection) {", "-\t\t\t\t\t\t\tint temp = oldSelection;", "-\t\t\t\t\t\t\toldSelection = newSelection;", "-\t\t\t\t\t\t\tnewSelection = temp;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tRectangle rectangle = layout.getBounds (oldSelection, newSelection);", "-\t\t\t\t\t\tredraw (rectangle.x, rectangle.y, rectangle.width, rectangle.height, false);", "-\t\t\t\t\t\tif (!OS.HIVIEW) update ();", "-\t\t\t\t\t}", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tdefault:", "-\t\t\t\toutResult [0] = OS.kMouseTrackingMouseUp;", "-\t\t\t\tbreak;", "-\t\t}", "-\t}", "-\t", "+boolean sendMouseEvent (int type, short button, int count, int detail, boolean send, int chord, short x, short y, int modifiers) {", "+\tboolean result = super.sendMouseEvent (type, button, count, detail, send, chord, x, y, modifiers);", "+\tswitch (type) {", "+\t\tcase SWT.MouseDown:", "+\t\t\tif (button == 1 && count == 1) {", "+\t\t\t\tint offset = layout.getOffset (x, y, null);", "+\t\t\t\tint oldSelectionX = selection.x;", "+\t\t\t\tint oldSelectionY = selection.y;", "+\t\t\t\tselection.x = offset;", "+\t\t\t\tselection.y = -1;", "+\t\t\t\tif (oldSelectionX != -1 && oldSelectionY != -1) {", "+\t\t\t\t\tif (oldSelectionX > oldSelectionY) {", "+\t\t\t\t\t\tint temp = oldSelectionX;", "+\t\t\t\t\t\toldSelectionX = oldSelectionY;", "+\t\t\t\t\t\toldSelectionY = temp;", "+\t\t\t\t\t}", "+\t\t\t\t\tRectangle rectangle = layout.getBounds (oldSelectionX, oldSelectionY);", "+\t\t\t\t\tredraw (rectangle.x, rectangle.y, rectangle.width, rectangle.height, false);", "+\t\t\t\t}\t\t", "+\t\t\t\tfor (int j = 0; j < offsets.length; j++) {", "+\t\t\t\t\tRectangle [] rects = getRectangles (j);", "+\t\t\t\t\tfor (int i = 0; i < rects.length; i++) {", "+\t\t\t\t\t\tRectangle rectangle = rects [i];", "+\t\t\t\t\t\tif (rectangle.contains (x, y)) {", "+\t\t\t\t\t\t\tfocusIndex = j;", "+\t\t\t\t\t\t\tredraw ();", "+\t\t\t\t\t\t\treturn result;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase SWT.MouseMove:", "+\t\t\tif ((chord & 0x01) != 0) {", "+\t\t\t\tint oldSelection = selection.y;", "+\t\t\t\tselection.y = layout.getOffset (x, y, null);", "+\t\t\t\tif (selection.y != oldSelection) {", "+\t\t\t\t\tint newSelection = selection.y;", "+\t\t\t\t\tif (oldSelection > newSelection) {", "+\t\t\t\t\t\tint temp = oldSelection;", "+\t\t\t\t\t\toldSelection = newSelection;", "+\t\t\t\t\t\tnewSelection = temp;", "+\t\t\t\t\t}", "+\t\t\t\t\tRectangle rectangle = layout.getBounds (oldSelection, newSelection);", "+\t\t\t\t\tredraw (rectangle.x, rectangle.y, rectangle.width, rectangle.height, false);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tbreak;", "+\t}", "+\t", "+\treturn result;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "0090c46cc9303c8df4e16a1421a77f42", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "9cc053d556a94aaf25144992ddf0abdf8398b3f4", "commitAfterChange": "981f2e38ad5b71e9d71d5276dfd16a4ea80c1666", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 14, "signatureBeforeChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  boolean sendMouseEvent (int type, short button, int count, int detail, boolean send, int chord, short x, short y, int modifiers)", "diff": ["-", "-int kEventMouseDown (int nextHandler, int theEvent, int userData) {", "-\tint result = super.kEventMouseDown (nextHandler, theEvent, userData);", "-\tif (result == OS.noErr) return result;", "-", "-\tShell shell = getShell ();", "-\tshell.bringToTop (true);", "-\tif (isDisposed ()) return OS.noErr;", "-", "-\tdisplay.grabControl = null;", "-\tdisplay.runDeferredEvents ();", "-\t", "-\tRect rect = new Rect ();", "-\tOS.GetControlBounds (handle, rect);", "-\tint startX = rect.left;", "-\tint startY = rect.top;\t\t\t", "-\tint width = rect.right - rect.left;", "-\tint height = rect.bottom - rect.top;", "-\tif (!OS.HIVIEW) {", "-\t\tOS.GetControlBounds (parent.handle, rect);", "-\t\tstartX -= rect.left;", "-\t\tstartY -= rect.top;", "-\t}", "-\tEvent event = new Event ();", "-\tevent.x = startX;", "-\tevent.y = startY;", "-\tevent.width = width;", "-\tevent.height = height;", "-\tsendEvent (SWT.Selection, event);", "-\tif (isDisposed ()) return result;", "-\tif (!event.doit) return result;", "-\t", "-\tint offsetX, offsetY;", "-\tint window = OS.GetControlOwner (handle);", "-\tif (OS.HIVIEW) {", "-\t\tCGPoint pt = new CGPoint ();", "-\t\tOS.GetEventParameter (theEvent, OS.kEventParamWindowMouseLocation, OS.typeHIPoint, null, CGPoint.sizeof, null, pt);", "-\t\tOS.HIViewConvertPoint (pt, 0, handle);", "-\t\toffsetX = (int) pt.x;", "-\t\toffsetY = (int) pt.y;\t\t", "-\t} else {", "-\t\tint sizeof = org.eclipse.swt.internal.carbon.Point.sizeof;", "-\t\torg.eclipse.swt.internal.carbon.Point pt = new org.eclipse.swt.internal.carbon.Point ();", "-\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseLocation, OS.typeQDPoint, null, sizeof, null, pt);", "-\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "-\t\toffsetX = pt.h - rect.left;", "-\t\toffsetY = pt.v - rect.top;", "-\t\tOS.GetControlBounds (handle, rect);", "-\t\toffsetX -= rect.left;", "-\t\toffsetY -= rect.top;", "-\t}", "-", "-\tint port = OS.HIVIEW ? -1 : OS.GetWindowPort (window);", "-\tint [] outModifiers = new int [1];", "-\tshort [] outResult = new short [1];", "-\tCGPoint pt = new CGPoint ();", "-\torg.eclipse.swt.internal.carbon.Point outPt = new org.eclipse.swt.internal.carbon.Point ();", "-\twhile (outResult [0] != OS.kMouseTrackingMouseUp) {", "-\t\tOS.TrackMouseLocationWithOptions (port, 0, OS.kEventDurationForever, outPt, outModifiers, outResult);", "-\t\tswitch (outResult [0]) {", "-\t\t\tcase OS.kMouseTrackingMouseDown:", "-\t\t\tcase OS.kMouseTrackingMouseUp:", "-\t\t\tcase OS.kMouseTrackingMouseDragged: {", "-\t\t\t\tint x, y;", "-\t\t\t\tif (OS.HIVIEW) {", "-\t\t\t\t\tOS.GetWindowBounds (window, (short) OS.kWindowStructureRgn, rect);", "-\t\t\t\t\tpt.x = outPt.h - rect.left;", "-\t\t\t\t\tpt.y = outPt.v - rect.top;", "-\t\t\t\t\tOS.HIViewConvertPoint (pt, 0, parent.handle);", "-\t\t\t\t\tx = (int) pt.x;", "-\t\t\t\t\ty = (int) pt.y;", "-\t\t\t\t} else {", "-\t\t\t\t\tOS.GetControlBounds (parent.handle, rect);", "-\t\t\t\t\tx = outPt.h - rect.left;", "-\t\t\t\t\ty = outPt.v - rect.top;", "-\t\t\t\t}", "-\t\t\t\tint newX = startX, newY = startY;", "-\t\t\t\tif ((style & SWT.VERTICAL) != 0) {", "-\t\t\t\t\tint clientWidth = rect.right - rect.left;", "-\t\t\t\t\tnewX = Math.min (Math.max (0, x - offsetX), clientWidth - width);", "-\t\t\t\t} else {", "-\t\t\t\t\tint clientHeight = rect.bottom - rect.top;", "-\t\t\t\t\tnewY = Math.min (Math.max (0, y - offsetY), clientHeight - height);", "-\t\t\t\t}", "-\t\t\t\tevent = new Event ();", "-\t\t\t\tevent.x = newX;", "-\t\t\t\tevent.y = newY;", "-\t\t\t\tevent.width = width;", "-\t\t\t\tevent.height = height;", "-\t\t\t\tsendEvent (SWT.Selection, event);", "-\t\t\t\tif (isDisposed ()) return result;", "-\t\t\t\tif (event.doit) {", "-\t\t\t\t\tsetBounds (event.x, event.y, width, height);", "-\t\t\t\t\tif (isDisposed ()) return result;", "-\t\t\t\t\tif (!OS.HIVIEW) parent.update (true);", "-\t\t\t\t}", "-\t\t\t\tif (outResult [0] == OS.kMouseTrackingMouseUp)  {", "-\t\t\t\t\tOS.GetControlBounds (handle, rect);", "-\t\t\t\t\tshort [] button = new short [1];", "-\t\t\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button);", "-\t\t\t\t\tint chord = OS.GetCurrentEventButtonState ();", "-\t\t\t\t\tint modifiers = OS.GetCurrentEventKeyModifiers ();", "-\t\t\t\t\tsendMouseEvent (SWT.MouseUp, button [0], display.clickCount, true, chord, (short) (x - rect.left), (short) (y - rect.top), modifiers);", "-\t\t\t\t}", "-\t\t\t\tbreak;", "-\t\t\t}", "-\t\t\tdefault:", "-\t\t\t\toutResult [0] = OS.kMouseTrackingMouseUp;", "-\t\t\t\tbreak;", "-\t\t}", "-\t}", "+boolean sendMouseEvent (int type, short button, int count, int detail, boolean send, int chord, short x, short y, int modifiers) {", "+\tboolean result = super.sendMouseEvent (type, button, count, detail, send, chord, x, y, modifiers);", "+\tRect rect = new Rect ();", "+\tOS.GetControlBounds (handle, rect);", "+\tint controlX = rect.left;", "+\tint controlY = rect.top;", "+\tint width = rect.right - rect.left;", "+\tint height = rect.bottom - rect.top;", "+\tOS.GetControlBounds (parent.handle, rect);", "+\tif (!OS.HIVIEW) {", "+\t\tcontrolX -= rect.left;", "+\t\tcontrolY -= rect.top;", "+\t}", "+\tint parentWidth = rect.right - rect.left;", "+\tint parentHeight = rect.bottom - rect.top;", "+\tswitch (type) {", "+\t\tcase SWT.MouseDown:", "+\t\t\tif (button != 1 || count != 1) break;", "+\t\t\tstartX = x;", "+\t\t\tstartY = y;", "+\t\t\tEvent event = new Event ();", "+\t\t\tevent.x = controlX;", "+\t\t\tevent.y = controlY;", "+\t\t\tevent.width = width;", "+\t\t\tevent.height = height;", "+\t\t\tpostEvent (SWT.Selection, event);", "+\t\t\tif (isDisposed ()) return result;", "+\t\t\tif (event.doit) {", "+\t\t\t\tlastX = event.x;", "+\t\t\t\tlastY = event.y;", "+\t\t\t\tdragging = true;", "+\t\t\t\tsetBounds (event.x, event.y, width, height);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase SWT.MouseUp:", "+\t\t\tif (!dragging) break;", "+\t\t\tdragging = false;", "+\t\t\tevent = new Event ();", "+\t\t\tevent.x = lastX;", "+\t\t\tevent.y = lastY;", "+\t\t\tevent.width = width;", "+\t\t\tevent.height = height;", "+\t\t\tpostEvent (SWT.Selection, event);", "+\t\t\tif (isDisposed ()) return result;", "+\t\t\tif (event.doit) {", "+\t\t\t\tsetBounds (event.x, event.y, width, height);", "+\t\t\t}", "+\t\t\tbreak;", "+\t\tcase SWT.MouseMove:", "+\t\t\tif (!dragging) break;", "+\t\t\tint newX = lastX, newY = lastY;", "+\t\t\tif ((style & SWT.VERTICAL) != 0) {", "+\t\t\t\tnewX = Math.min (Math.max (0, x + controlX - startX), parentWidth - width);", "+\t\t\t} else {", "+\t\t\t\tnewY = Math.min (Math.max (0, y + controlY - startY), parentHeight - height);", "+\t\t\t}", "+\t\t\tif (newX == lastX && newY == lastY) return result;", "+\t\t\tevent = new Event ();", "+\t\t\tevent.x = newX;", "+\t\t\tevent.y = newY;", "+\t\t\tevent.width = width;", "+\t\t\tevent.height = height;", "+\t\t\tpostEvent (SWT.Selection, event);", "+\t\t\tif (isDisposed ()) return result;", "+\t\t\tif (event.doit) {", "+\t\t\t\tlastX = event.x;", "+\t\t\t\tlastY = event.y;", "+\t\t\t\tsetBounds (event.x, event.y, width, height);", "+\t\t\t}", "+\t\t\tbreak;", "+\t}", "+\treturn result;", "+}"]}], "num": 19886}
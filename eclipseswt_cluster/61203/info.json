{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "fc821756740a936feb2534d57408051d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9624f3fcbad3083ae46310f5bef82fe1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Combo.java", "commitBeforeChange": "40cc64959d5119bf3b04b67587b8994ada23e8e0", "commitAfterChange": "02b99d3aa6b86917194c42b95e6fbca04ab77b6a", "methodNumberBeforeChange": 89, "methodNumberAfterChange": 89, "signatureBeforeChange": "  LRESULT wmCommandChild (int wParam, int lParam)", "signatureAfterChange": "  LRESULT wmCommandChild (int wParam, int lParam)", "diff": ["+\t\tcase OS.EN_ALIGN_LTR_EC:", "+\t\tcase OS.EN_ALIGN_RTL_EC:", "+\t\t\tEvent event = new Event ();", "+\t\t\tevent.doit = true;", "+\t\t\tsendEvent (SWT.OrientationChange, event);", "+\t\t\tif (!event.doit) {", "+\t\t\t\tint /*long*/ hwnd = lParam;", "+\t\t\t\tint bits1 = OS.GetWindowLong (hwnd, OS.GWL_EXSTYLE);", "+\t\t\t\tint bits2 = OS.GetWindowLong (hwnd, OS.GWL_STYLE);", "+\t\t\t\tif (code == OS.EN_ALIGN_LTR_EC) {", "+\t\t\t\t\tbits1 |= (OS.WS_EX_RTLREADING | OS.WS_EX_RIGHT);", "+\t\t\t\t\tbits2 |= OS.ES_RIGHT;", "+\t\t\t\t} else {", "+\t\t\t\t\tbits1 &= ~(OS.WS_EX_RTLREADING | OS.WS_EX_RIGHT);", "+\t\t\t\t\tbits2 &= ~OS.ES_RIGHT;", "+\t\t\t\t}", "+\t\t\t\tOS.SetWindowLong (hwnd, OS.GWL_EXSTYLE, bits1);", "+\t\t\t\tOS.SetWindowLong (hwnd, OS.GWL_STYLE, bits2);", "+\t\t\t}", "+\t\t\tbreak;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "765534e8e04eb35023b2411ea94bfc17", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "a59d4f0fcd6ac77e4b0b411a02002b0581984050", "commitAfterChange": "e2b4ac8fc06ef616c8ab44b7a5fded395b0c30d0", "methodNumberBeforeChange": 70, "methodNumberAfterChange": 72, "signatureBeforeChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "signatureAfterChange": "  int messageProc (int hwnd, int msg, int wParam, int lParam)", "diff": ["+\t\tcase OS.WM_APP + 2:", "+\t\t\tboolean consumed = false;", "+\t\t\tMSG keyMsg = new MSG ();", "+\t\t\tOS.MoveMemory (keyMsg, lParam, MSG.sizeof);", "+\t\t\tControl control = findControl (keyMsg.hwnd);", "+\t\t\tif (control != null) {", "+\t\t\t\tkeyMsg.hwnd = control.handle;", "+\t\t\t\tconsumed = filterMessage (keyMsg);", "+\t\t\t\tif (!consumed) {", "+\t\t\t\t\tOS.TranslateMessage (keyMsg);", "+\t\t\t\t\tconsumed = OS.DispatchMessage (keyMsg) == 1;", "+\t\t\t\t\twhile (OS.PeekMessage (keyMsg, keyMsg.hwnd, OS.WM_KEYFIRST, OS.WM_KEYLAST, OS.PM_REMOVE)) {", "+\t\t\t\t\t\tconsumed |= OS.DispatchMessage (keyMsg) == 1;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tif (consumed) {", "+\t\t\t\tint hHeap = OS.GetProcessHeap ();", "+\t\t\t\tOS.HeapFree (hHeap, 0, lParam);", "+\t\t\t} else {", "+\t\t\t\tOS.PostMessage (embeddedHwnd, OS.WM_APP + 2, wParam, lParam);", "+\t\t\t}", "+\t\t\treturn 0;"]}], "num": 61203}
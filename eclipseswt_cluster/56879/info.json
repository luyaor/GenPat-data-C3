{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2459e3cc6a43e17f8645d2b4b6208b3a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dee33bba9911001b006bfa965116aee8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "3579a2ddd16250f990aade0121aaa1a5408189d3", "commitAfterChange": "bfeb9363264aadeff1b9dc0fbf580745ee5514cb", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": "\r void drawImageAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight, int depth)", "signatureAfterChange": "\r void drawImageAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight, int depth)", "diff": ["+\t\t\tint srcRedMask = xSrcImage.red_mask;\r", "+\t\t\tint srcGreenMask = xSrcImage.green_mask;\r", "+\t\t\tint srcBlueMask = xSrcImage.blue_mask;\r", "+\t\t\tint destRedMask = xDestImage.red_mask;\r", "+\t\t\tint destGreenMask = xDestImage.green_mask;\r", "+\t\t\tint destBlueMask = xDestImage.blue_mask;\r", "+\t\t\t\r", "+\t\t\t/*\r", "+\t\t\t* Feature in X.  XGetImage does not retrieve the RGB masks if the drawable\r", "+\t\t\t* is a Pixmap.  The fix is to detect that the masks are not valid and use\r", "+\t\t\t* the default visual masks instead.\r", "+\t\t\t* \r", "+\t\t\t* NOTE: It is safe to use the default Visual masks, since we always\r", "+\t\t\t* create images with these masks. \r", "+\t\t\t*/\r", "+\t\t\tint visual = OS.XDefaultVisual(xDisplay, OS.XDefaultScreen(xDisplay));\r", "+\t\t\tVisual xVisual = new Visual();\r", "+\t\t\tOS.memmove(xVisual, visual, Visual.sizeof);\r", "+\t\t\tif (srcRedMask == 0 && srcGreenMask == 0 && srcBlueMask == 0) {\r", "+\t\t\t\tsrcRedMask = xVisual.red_mask;\r", "+\t\t\t\tsrcGreenMask = xVisual.green_mask;\r", "+\t\t\t\tsrcBlueMask = xVisual.blue_mask;\r", "+\t\t\t}\r", "+\t\t\tif (destRedMask == 0 && destGreenMask == 0 && destBlueMask == 0) {\r", "+\t\t\t\tdestRedMask = xVisual.red_mask;\r", "+\t\t\t\tdestGreenMask = xVisual.green_mask;\r", "+\t\t\t\tdestBlueMask = xVisual.blue_mask;\r", "+\t\t\t}\r", "+\t\t\t\r", "-\t\t\t\tsrcData, xSrcImage.bits_per_pixel, xSrcImage.bytes_per_line, srcOrder, 0, 0, srcWidth, srcHeight, xDestImage.red_mask, xDestImage.green_mask, xDestImage.blue_mask,\r", "+\t\t\t\tsrcData, xSrcImage.bits_per_pixel, xSrcImage.bytes_per_line, srcOrder, 0, 0, srcWidth, srcHeight, srcRedMask, srcGreenMask, srcBlueMask,\r", "-\t\t\t\tdestData, xDestImage.bits_per_pixel, xDestImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, xDestImage.red_mask, xDestImage.green_mask, xDestImage.blue_mask,\r", "+\t\t\t\tdestData, xDestImage.bits_per_pixel, xDestImage.bytes_per_line, destOrder, 0, 0, destWidth, destHeight, destRedMask, destGreenMask, destBlueMask,\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "dc951378d55a57fa5f417c6e5e0e5951", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "ff7a7565646414b3418637259a20a7e8cc0d7d33", "commitAfterChange": "625d7442af2e067cc40f25eb22b19ef7acd83ba7", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": "\r \r void initializeWidgetFonts ()", "signatureAfterChange": "\r \r void initializeWidgetFonts ()", "diff": ["+\tString property = System.getProperty (\"swt.system.font\");\r", "+\tif (property != null) {\r", "+\t\tdefaultFont = Converter.wcsToMbcs (null, property, true);\r", "+\t\tTEXT_FONT = LIST_FONT = GAUGE_FONT = TITLE_FONT = defaultFont;\r", "+\t\tGROUP_FONT = Converter.wcsToMbcs (null, property + \"b\", true);\r", "+\t\treturn;\r", "+\t}\r", "+\t\r", "+\tint [] args = new int [] {OS.Pt_ARG_TITLE_FONT, 0, 0};\r", "+\tOS.PtGetResources (shellHandle, args.length / 3, args);\r", "+\tint length = OS.strlen (args [1]);\r", "+\tGROUP_FONT = TITLE_FONT = new byte [length + 1];\r", "+\tOS.memmove (TITLE_FONT, args [1], length);\r", "+\t\r", "-\tint [] args = {OS.Pt_ARG_LIST_FONT, 0, 0};\r", "+\targs = new int [] {OS.Pt_ARG_LIST_FONT, 0, 0};\r", "-\tint count = OS.strlen (args [1]);\r", "-\tLIST_FONT = new byte [count + 1];\r", "-\tOS.memmove (LIST_FONT, args [1], count);\r", "+\tlength = OS.strlen (args [1]);\r", "+\tLIST_FONT = new byte [length + 1];\r", "+\tOS.memmove (LIST_FONT, args [1], length);\r", "+\r", "-\tcount = OS.strlen (args [1]);\r", "-\tTEXT_FONT = new byte [count + 1];\r", "-\tOS.memmove (TEXT_FONT, args [1], count);\r", "+\tlength = OS.strlen (args [1]);\r", "+\tTEXT_FONT = new byte [length + 1];\r", "+\tOS.memmove (TEXT_FONT, args [1], length);\r", "+\t\r", "+\tint scrollHandle = OS.PtCreateWidget (OS.PtScrollbar (), shellHandle, 0, null);\r", "+\targs = new int [] {OS.Pt_ARG_GAUGE_FONT, 0, 0};\r", "+\tOS.PtGetResources (scrollHandle, args.length / 3, args);\r", "+\tlength = OS.strlen (args [1]);\r", "+\tGAUGE_FONT = new byte [length + 1];\r", "+\tOS.memmove (GAUGE_FONT, args [1], length);\r", "+\t\r"]}], "num": 56879}
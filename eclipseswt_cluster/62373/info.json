{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "114b09dde4f63c471092ce1c2e4a0710", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "ba61602b0a5bb98bf307bdbbb2f66464", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "c892e0aeb33d21436b946e3627f40a5d2a0ce2de", "commitAfterChange": "c16f373de1f1cde98e6cfe71beacc736f035717a", "methodNumberBeforeChange": 198, "methodNumberAfterChange": 198, "signatureBeforeChange": "  void restackWindow (long window, long sibling, boolean above)", "signatureAfterChange": "  void restackWindow (long window, long sibling, boolean above)", "diff": ["-\t    if (OS.GTK_VERSION >= OS.VERSION (2, 17, 11)) {", "-\t    \tOS.gdk_window_restack (window, sibling, above);", "-\t    } else {", "-\t    \t/*", "-\t\t\t* Feature in X. If the receiver is a top level, XConfigureWindow ()", "-\t\t\t* will fail (with a BadMatch error) for top level shells because top", "-\t\t\t* level shells are reparented by the window manager and do not share", "-\t\t\t* the same X window parent.  This is the correct behavior but it is", "-\t\t\t* unexpected.  The fix is to use XReconfigureWMWindow () instead.", "-\t\t\t* When the receiver is not a top level shell, XReconfigureWMWindow ()", "-\t\t\t* behaves the same as XConfigureWindow ().", "-\t\t\t*/", "-\t\t\tlong /*int*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);", "-\t\t\tlong /*int*/ xWindow = OS.gdk_x11_drawable_get_xid (window);", "-\t\t\tint xScreen = OS.XDefaultScreen (xDisplay);", "-\t\t\tint flags = OS.CWStackMode | OS.CWSibling;", "-\t\t\tXWindowChanges changes = new XWindowChanges ();", "-\t\t\tchanges.sibling = OS.gdk_x11_drawable_get_xid (sibling);", "-\t\t\tchanges.stack_mode = above ? OS.Above : OS.Below;", "-\t\t\tOS.XReconfigureWMWindow (xDisplay, xWindow, xScreen, flags, changes);", "-\t    }", "-\t}", "+   \tOS.gdk_window_restack (window, sibling, above);", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6ecec8595e12396aa5c9fbf12dc1318b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "ee1541799783b7a2d49deac3fcb18abcfaa6358c", "commitAfterChange": "613ef52a512ea94b5664ef2017085c02bc3c04da", "methodNumberBeforeChange": 139, "methodNumberAfterChange": 139, "signatureBeforeChange": " public void setEnabled (boolean enabled)", "signatureAfterChange": " public void setEnabled (boolean enabled)", "diff": ["+\tif (enabled) {", "+\t\tif (enableWindow != 0) {", "+\t\t\tOS.gdk_window_destroy (enableWindow);", "+\t\t\tenableWindow = 0;", "+\t\t}", "+\t} else {", "+\t\tOS.gtk_widget_realize (handle);", "+\t\tint /*long*/ parentHandle = parent.parentingHandle ();", "+\t\tint /*long*/ window = OS.GTK_WIDGET_WINDOW (parentHandle);", "+\t\tRectangle rect = getBounds ();", "+\t\tGdkWindowAttr attributes = new GdkWindowAttr ();", "+\t\tattributes.x = rect.x;", "+\t\tattributes.y = rect.y;", "+\t\tattributes.width = rect.width;", "+\t\tattributes.height = rect.height;", "+\t\tattributes.event_mask = (0xFFFFFFFF & ~OS.ExposureMask);", "+\t\tattributes.wclass = OS.GDK_INPUT_ONLY;", "+\t\tattributes.window_type = OS.GDK_WINDOW_CHILD;", "+\t\tenableWindow = OS.gdk_window_new (window, attributes, OS.GDK_WA_X | OS.GDK_WA_Y);", "+\t\tif (enableWindow != 0) {", "+\t\t\tOS.gdk_window_set_user_data (enableWindow, parentHandle);", "+\t\t\tif (!OS.GDK_WINDOWING_X11 ()) {", "+\t\t\t\tOS.gdk_window_raise (enableWindow);", "+\t\t\t} else {", "+\t\t\t\tint /*long*/ topHandle = topHandle ();", "+\t\t\t\tint /*long*/ topWindow = OS.GTK_WIDGET_WINDOW (topHandle);\t\t\t", "+\t\t\t\tint /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (topWindow);", "+\t\t\t\tint /*long*/ xWindow = OS.gdk_x11_drawable_get_xid (enableWindow);", "+\t\t\t\tint xScreen = OS.XDefaultScreen (xDisplay);", "+\t\t\t\tint flags = OS.CWStackMode | OS.CWSibling;\t\t\t", "+\t\t\t\tXWindowChanges changes = new XWindowChanges ();", "+\t\t\t\tchanges.sibling = OS.gdk_x11_drawable_get_xid (topWindow);", "+\t\t\t\tchanges.stack_mode = OS.Above;", "+\t\t\t\tOS.XReconfigureWMWindow (xDisplay, xWindow, xScreen, flags, changes);", "+\t\t\t}", "+\t\t\tOS.gdk_window_show (enableWindow);", "+\t\t}", "+\t}"]}], "num": 62373}
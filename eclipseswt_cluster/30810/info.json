{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4be87d1540513cbd1cfb25feec17f080", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2978c11f88985f22fc18d77a757e2426", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "b0d82207e08710fa83230725747e162f9d7baf93", "commitAfterChange": "3361092634871469737625ac5be2b68be2ef3d94", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["+\tisEmbedded = application.isRunning();", "-\t/*", "-\t * TODO: If an NSApplication is already running we don't want to create another NSApplication.", "-\t * But if we don't we won't get mouse events, since we currently need to subclass NSApplication and intercept sendEvent to", "-\t * deliver mouse events correctly to widgets.   ", "-\t */", "-\tif (!application.isRunning()) {", "+\tif (!isEmbedded) {", "+\t}", "-\t\tString className = \"SWTApplication\";", "-\t\tint /*long*/ cls;", "-\t\tif ((cls = OS.objc_lookUpClass (className)) == 0) {", "-\t\t\tClass clazz = getClass();", "-\t\t\tapplicationCallback2 = new Callback(clazz, \"applicationProc\", 2);", "-\t\t\tint /*long*/ proc2 = applicationCallback2.getAddress();", "-\t\t\tif (proc2 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\t\tapplicationCallback3 = new Callback(clazz, \"applicationProc\", 3);", "-\t\t\tint /*long*/ proc3 = applicationCallback3.getAddress();", "-\t\t\tif (proc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\t\tapplicationCallback6 = new Callback(clazz, \"applicationProc\", 6);", "-\t\t\tint /*long*/ proc6 = applicationCallback6.getAddress();", "-\t\t\tif (proc6 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\t\tcls = OS.objc_allocateClassPair(OS.class_NSApplication, className, 0);", "-\t\t\tOS.class_addMethod(cls, OS.sel_sendEvent_, proc3, \"@:@\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_nextEventMatchingMask_untilDate_inMode_dequeue_, proc6, \"@:i@@B\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_isRunning, proc2, \"@:\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_finishLaunching, proc2, \"@:\");", "-\t\t\tOS.objc_registerClassPair(cls);", "-\t\t}", "-\t\tapplicationClass = OS.object_setClass(application.id, cls);", "+\tString className = \"SWTApplication\";", "+\tint /*long*/ cls;", "+\tif ((cls = OS.objc_lookUpClass (className)) == 0) {", "+\t\tClass clazz = getClass();", "+\t\tapplicationCallback2 = new Callback(clazz, \"applicationProc\", 2);", "+\t\tint /*long*/ proc2 = applicationCallback2.getAddress();", "+\t\tif (proc2 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tapplicationCallback3 = new Callback(clazz, \"applicationProc\", 3);", "+\t\tint /*long*/ proc3 = applicationCallback3.getAddress();", "+\t\tif (proc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tapplicationCallback6 = new Callback(clazz, \"applicationProc\", 6);", "+\t\tint /*long*/ proc6 = applicationCallback6.getAddress();", "+\t\tif (proc6 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tcls = OS.objc_allocateClassPair(OS.object_getClass(application.id), className, 0);", "+\t\tOS.class_addMethod(cls, OS.sel_sendEvent_, proc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_nextEventMatchingMask_untilDate_inMode_dequeue_, proc6, \"@:i@@B\");", "+\t\tOS.class_addMethod(cls, OS.sel_isRunning, proc2, \"@:\");", "+\t\tOS.class_addMethod(cls, OS.sel_finishLaunching, proc2, \"@:\");", "+\t\tOS.objc_registerClassPair(cls);", "+\t}", "+\tapplicationClass = OS.object_setClass(application.id, cls);", "-\t\tclassName = \"SWTApplicationDelegate\";", "-\t\tif (OS.objc_lookUpClass (className) == 0) {", "-\t\t\tint /*long*/ appProc3 = applicationCallback3.getAddress();", "-\t\t\tif (appProc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\t\t\tcls = OS.objc_allocateClassPair(OS.class_NSObject, className, 0);", "-\t\t\tOS.class_addMethod(cls, OS.sel_applicationWillFinishLaunching_, appProc3, \"@:@\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_terminate_, appProc3, \"@:@\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_quitRequested_, appProc3, \"@:@\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_orderFrontStandardAboutPanel_, appProc3, \"@:@\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_hideOtherApplications_, appProc3, \"@:@\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_hide_, appProc3, \"@:@\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_unhideAllApplications_, appProc3, \"@:@\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_applicationDidBecomeActive_, appProc3, \"@:@\");", "-\t\t\tOS.class_addMethod(cls, OS.sel_applicationDidResignActive_, appProc3, \"@:@\");", "-\t\t\tOS.objc_registerClassPair(cls);", "-\t\t}", "+\tclassName = \"SWTApplicationDelegate\";", "+\tif (OS.objc_lookUpClass (className) == 0) {", "+\t\tint /*long*/ appProc3 = applicationCallback3.getAddress();", "+\t\tif (appProc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tcls = OS.objc_allocateClassPair(OS.class_NSObject, className, 0);", "+\t\tOS.class_addMethod(cls, OS.sel_applicationWillFinishLaunching_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_terminate_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_quitRequested_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_orderFrontStandardAboutPanel_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_hideOtherApplications_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_hide_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_unhideAllApplications_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_applicationDidBecomeActive_, appProc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_applicationDidResignActive_, appProc3, \"@:@\");", "+\t\tOS.objc_registerClassPair(cls);", "+\t}", "+\tif (!isEmbedded) {", "-\t} else {", "-\t\tisEmbedded = true;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8588da4c595f4b02c4761ced13264261", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "e73d120d5e37884ab50e6301a907bc6b240738dc", "commitAfterChange": "308fb225ca7c50dd338d7be0181861ac767a6584", "methodNumberBeforeChange": 22, "methodNumberAfterChange": 22, "signatureBeforeChange": "  void createDisplay (DeviceData data)", "signatureAfterChange": "  void createDisplay (DeviceData data)", "diff": ["-\t/*", "-\t* Feature in the Macintosh.  On OS 10.2, it is necessary", "-\t* to explicitly check in with the Process Manager and set", "-\t* the current process to be the front process in order for", "-\t* windows to come to the front by default.  The fix is call", "-\t* both GetCurrentProcess() and SetFrontProcess().", "-\t* ", "-\t* NOTE: It is not actually necessary to use the process", "-\t* serial number returned by GetCurrentProcess() in the", "-\t* call to SetFrontProcess() (ie. kCurrentProcess can be", "-\t* used) but both functions must be called in order for", "-\t* windows to come to the front.", "-\t*/", "-\tint [] psn = new int [2];", "-\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "-\t\tint /*long*/ ptr = OS.getenv (ascii (\"APP_NAME_\" + OS.getpid ()));", "-\t\tif (ptr  == 0 && APP_NAME != null) {", "-\t\t\tptr = NSString.stringWith(APP_NAME).UTF8String();\t", "-\t\t}", "-\t\tif (ptr != 0) OS.CPSSetProcessName (psn, ptr);", "-\t\tOS.TransformProcessType (psn, OS.kProcessTransformToForegroundApplication);", "-\t\tOS.SetFrontProcess (psn);", "-//\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid));", "-//\t\tif (ptr != 0) {", "-//\t\t\tint image = readImageRef (ptr);", "-//\t\t\tif (image != 0) {", "-//\t\t\t\tdockImage = image;", "-//\t\t\t\tOS.SetApplicationDockTileImage (dockImage);", "-//\t\t\t}", "-//\t\t}", "-\t}", "-\t", "-\t", "-\tapplicationCallback2 = new Callback(this, \"applicationProc\", 2);", "-\tint /*long*/ proc2 = applicationCallback2.getAddress();", "-\tif (proc2 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\tapplicationCallback3 = new Callback(this, \"applicationProc\", 3);", "-\tint /*long*/ proc3 = applicationCallback3.getAddress();", "-\tif (proc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\tapplicationCallback6 = new Callback(this, \"applicationProc\", 6);", "-\tint /*long*/ proc6 = applicationCallback6.getAddress();", "-\tif (proc6 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "-\tString className = \"SWTApplication\";", "-\tint /*long*/ cls = OS.objc_allocateClassPair(OS.class_NSApplication, className, 0);", "-\tOS.class_addMethod(cls, OS.sel_sendEvent_, proc3, \"@:@\");", "-\tOS.class_addMethod(cls, OS.sel_nextEventMatchingMask_untilDate_inMode_dequeue_, proc6, \"@:i@@B\");", "-\tOS.class_addMethod(cls, OS.sel_isRunning, proc2, \"@:\");", "-\tOS.objc_registerClassPair(cls);", "-\tapplicationClass = OS.object_setClass(application.id, cls);", "-//\tapplication = new NSApplication(OS.objc_msgSend(cls, OS.sel_sharedApplication));", "+", "+\tif (!application.isRunning()) {", "+\t\t/*", "+\t\t * Feature in the Macintosh.  On OS 10.2, it is necessary", "+\t\t * to explicitly check in with the Process Manager and set", "+\t\t * the current process to be the front process in order for", "+\t\t * windows to come to the front by default.  The fix is call", "+\t\t * both GetCurrentProcess() and SetFrontProcess().", "+\t\t * ", "+\t\t * NOTE: It is not actually necessary to use the process", "+\t\t * serial number returned by GetCurrentProcess() in the", "+\t\t * call to SetFrontProcess() (ie. kCurrentProcess can be", "+\t\t * used) but both functions must be called in order for", "+\t\t * windows to come to the front.", "+\t\t */", "+\t\tint [] psn = new int [2];", "+\t\tif (OS.GetCurrentProcess (psn) == OS.noErr) {", "+\t\t\tint /*long*/ ptr = OS.getenv (ascii (\"APP_NAME_\" + OS.getpid ()));", "+\t\t\tif (ptr  == 0 && APP_NAME != null) {", "+\t\t\t\tptr = NSString.stringWith(APP_NAME).UTF8String();\t", "+\t\t\t}", "+\t\t\tif (ptr != 0) OS.CPSSetProcessName (psn, ptr);", "+\t\t\tOS.TransformProcessType (psn, OS.kProcessTransformToForegroundApplication);", "+\t\t\tOS.SetFrontProcess (psn);", "+\t\t\t//\t\tptr = OS.getenv (ascii (\"APP_ICON_\" + pid));", "+\t\t\t//\t\tif (ptr != 0) {", "+\t\t\t//\t\t\tint image = readImageRef (ptr);", "+\t\t\t//\t\t\tif (image != 0) {", "+\t\t\t//\t\t\t\tdockImage = image;", "+\t\t\t//\t\t\t\tOS.SetApplicationDockTileImage (dockImage);", "+\t\t\t//\t\t\t}", "+\t\t\t//\t\t}", "+\t\t}", "+", "+\t\tapplicationCallback2 = new Callback(this, \"applicationProc\", 2);", "+\t\tint /*long*/ proc2 = applicationCallback2.getAddress();", "+\t\tif (proc2 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tapplicationCallback3 = new Callback(this, \"applicationProc\", 3);", "+\t\tint /*long*/ proc3 = applicationCallback3.getAddress();", "+\t\tif (proc3 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tapplicationCallback6 = new Callback(this, \"applicationProc\", 6);", "+\t\tint /*long*/ proc6 = applicationCallback6.getAddress();", "+\t\tif (proc6 == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);", "+\t\tString className = \"SWTApplication\";", "+\t\tint /*long*/ cls = OS.objc_allocateClassPair(OS.class_NSApplication, className, 0);", "+\t\tOS.class_addMethod(cls, OS.sel_sendEvent_, proc3, \"@:@\");", "+\t\tOS.class_addMethod(cls, OS.sel_nextEventMatchingMask_untilDate_inMode_dequeue_, proc6, \"@:i@@B\");", "+\t\tOS.class_addMethod(cls, OS.sel_isRunning, proc2, \"@:\");", "+\t\tOS.objc_registerClassPair(cls);", "+\t\tapplicationClass = OS.object_setClass(application.id, cls);", "+\t} else {", "+\t\tisEmbedded = true;", "+\t}", "+", "+\t//\tapplication = new NSApplication(OS.objc_msgSend(cls, OS.sel_sharedApplication));"]}], "num": 30810}
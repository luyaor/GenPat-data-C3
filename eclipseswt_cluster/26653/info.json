{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "4a3df097db38c6b29332d498eac22926", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9a18e2d37e9165fa25c4783bb6f3e20c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "374a9aef6d3cdbe23142c7622f439f5425ecaa80", "commitAfterChange": "ed307d3f65dabf3aa5aefbc1cbd79da8679af838", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 14, "signatureBeforeChange": " void createHandle (int index)", "signatureAfterChange": " void createHandle (int index)", "diff": ["-\tint windowActivationScope= -1;", "-", "-\tint decorations = OS.kWindowCompositingAttribute | OS.kWindowStandardHandlerAttribute;", "-", "-\t/* AW", "+\tint decorations = 0;", "+    /* AW", "+\tif (MacUtil.HIVIEW)", "+    \tdecorations |= OS.kWindowCompositingAttribute;", "+\t", "-\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.kWindowResizableAttribute;", "+\t\tif ((style & SWT.RESIZE) != 0) decorations |= OS.kWindowResizableAttribute | OS.kWindowLiveResizeAttribute;", "+\t\t//if ((style & SWT.BORDER) == 0) decorations |= OS.kWindowNoShadowAttribute;", "+\t//} else {", "+\t//\tdecorations |= OS.kWindowNoShadowAttribute;", "-\t// if resizable enable 'live resize'", "-\tif ((decorations & OS.kWindowResizableAttribute) != 0)", "-\t\tdecorations |= OS.kWindowLiveResizeAttribute;", "-\t", "-\t// determine modality", "+    /* AW", "+\tint inputMode = OS.MWM_INPUT_MODELESS;", "+\tif ((style & SWT.PRIMARY_MODAL) != 0) inputMode = OS.MWM_INPUT_PRIMARY_APPLICATION_MODAL;", "+\tif ((style & SWT.APPLICATION_MODAL) != 0) inputMode = OS.MWM_INPUT_FULL_APPLICATION_MODAL;", "+\tif ((style & SWT.SYSTEM_MODAL) != 0) inputMode = OS.MWM_INPUT_SYSTEM_MODAL;", "+    */", "+\tbyte [] appClass = display.appClass;", "+\tMacRect bounds= new MacRect(100, 100, 100, 100);", "-\tint themeBrush= OS.kThemeBrushDialogBackgroundActive;", "+\tshort themeBrush= OS.kThemeBrushDialogBackgroundActive;", "-\t\tif ((style & SWT.NO_TRIM) != 0) {", "-\t\t\twindowClass= OS.kSheetWindowClass;", "-\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "-\t\t} else {", "+        /* AW", "+\t\tint xDisplay = display.xDisplay;", "+\t\tint widgetClass = OS.TopLevelShellWidgetClass ();", "+\t\tshellHandle = OS.XtAppCreateShell (display.appName, appClass, widgetClass, xDisplay, argList1, argList1.length / 2);", "+        */", "+\t\tif ((style & SWT.NO_TRIM) != 0)", "+\t\t\twindowClass= OS.kHelpWindowClass;", "+\t\telse {", "+        /* AW", "+\t\tint widgetClass = OS.TransientShellWidgetClass ();", "+//\t\tif ((style & SWT.ON_TOP) != 0) {", "+//\t\t\twidgetClass = OS.OverrideShellWidgetClass ();", "+//\t\t}", "+        */", "-\t\t\twindowClass= OS.kSheetWindowClass;", "-\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "+\t\t\t//System.out.println(\"Shell.createHandle: SWT.NONE\");", "+\t\t\twindowClass= OS.kHelpWindowClass;", "-\t\t\twindowClass= OS.kSheetWindowClass;", "-\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "+\t\t\t//System.out.println(\"Shell.createHandle: SWT.NO_TRIM | SWT.ON_TOP\");", "+\t\t\twindowClass= OS.kHelpWindowClass;", "-\t\t\twindowClass= OS.kSheetWindowClass;", "-\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "+\t\t\t//System.out.println(\"Shell.createHandle: SWT.NO_TRIM\");", "+\t\t\twindowClass= OS.kHelpWindowClass;", "+\t\t\t//System.out.println(\"Shell.createHandle: kMovableModalWindowClass\");", "+\t\t\t//System.out.println(\"Shell.createHandle: kModalWindowClass\");", "-\t\t\twindowClass= OS.kSheetWindowClass;", "-\t\t\twindowActivationScope= OS.kWindowActivationScopeNone;", "+\t\t\t//System.out.println(\"Shell.createHandle: SWT.ON_TOP\");", "+\t\t\t//windowClass= OS.kFloatingWindowClass;", "+\t\t\twindowClass= OS.kHelpWindowClass;", "+\t\t\t//System.out.println(\"Shell.createHandle: kDocumentWindowClass\");", "-\t// check whether window class supports a given decoration", "-\tint allowedAttr= OS.GetAvailableWindowAttributes(windowClass);", "-\tif (decorations != (decorations & allowedAttr)) {", "-\t\tSystem.out.println(\"Shell.createHandle: some attributes are not supported\");", "-\t\tdecorations&= allowedAttr;\t", "+\t// check whether window class supports a given decoration ", "+\tif ((decorations & OS.kWindowCloseBoxAttribute) != 0 &&", "+\t\t\twindowClass != OS.kDocumentWindowClass &&", "+\t\t\t\twindowClass != OS.kFloatingWindowClass &&", "+\t\t\t\t\twindowClass != OS.kUtilityWindowClass) {", "+\t\tdecorations&= ~OS.kWindowCloseBoxAttribute;", "+\t}", "+\tif ((decorations & OS.kWindowFullZoomAttribute) != 0 &&", "+\t\t\twindowClass != OS.kDocumentWindowClass &&", "+\t\t\t\twindowClass != OS.kFloatingWindowClass &&", "+\t\t\t\t\twindowClass != OS.kUtilityWindowClass) {", "+\t\tdecorations&= ~OS.kWindowFullZoomAttribute;", "+\t}", "+\tif ((decorations & OS.kWindowCollapseBoxAttribute) != 0 &&", "+\t\t\twindowClass != OS.kDocumentWindowClass) {", "+\t\tdecorations&= ~OS.kWindowCollapseBoxAttribute;", "+\t}", "+\tif ((decorations & OS.kWindowCollapseBoxAttribute) != 0 &&", "+\t\t\twindowClass != OS.kDocumentWindowClass &&", "+\t\t\t\twindowClass != OS.kMovableModalWindowClass &&", "+\t\t\t\t\twindowClass != OS.kFloatingWindowClass &&", "+\t\t\t\t\t\twindowClass != OS.kUtilityWindowClass &&", "+\t\t\t\t\t\t\twindowClass != OS.kSheetWindowClass) {", "+\t\tdecorations&= ~OS.kWindowCollapseBoxAttribute;", "-\tRect bounds= new Rect();", "-\tOS.SetRect(bounds, (short)100, (short)100, (short)200, (short)200);", "-\tint rc= OS.CreateNewWindow(windowClass, decorations, bounds, wHandle);", "-\tif (rc != OS.noErr)", "-\t\tSystem.out.println(\"Shell.createHandle: can't create window: \" + rc);", "-\tshellHandle= wHandle[0];", "+\tif (OS.CreateNewWindow(windowClass, decorations | OS.kWindowStandardHandlerAttribute, bounds.getData(), wHandle) == OS.kNoErr)", "+\t\tshellHandle= wHandle[0];", "+\telse {", "+\t\tSystem.out.println(\"Shell.createHandle: can't create window with these attributes; creating default window\");", "+\t\tif (OS.CreateNewWindow(OS.kDocumentWindowClass, OS.kWindowStandardHandlerAttribute, bounds.getData(), wHandle) == OS.kNoErr)", "+\t\t\tshellHandle= wHandle[0];", "+\t}", "+", "-\tif (windowActivationScope != -1)\t", "-\t\tif (OS.SetWindowActivationScope(shellHandle, windowActivationScope) != OS.noErr)", "-\t\t\tSystem.out.println(\"Shell.createHandle: can't set activation scope\");", "-\t", "-\t\tOS.SetThemeWindowBackground(shellHandle, (short)themeBrush, false);", "+\t\tOS.SetThemeWindowBackground(shellHandle, themeBrush, false);", "+", "+\t/*", "+\t* Feature in Motif.  There is no way to get the single pixel", "+\t* border surrounding a TopLevelShell or a TransientShell.", "+\t* Also, attempts to set a border on either the shell handle", "+\t* or the main window handle fail.  The fix is to set the border", "+\t* on the client area.", "+\t*/", "+    /* AW", "+\tif ((style & (SWT.NO_TRIM | SWT.BORDER | SWT.RESIZE)) == 0) {", "+\t\tint [] argList2 = {OS.XmNborderWidth, 1};", "+\t\tOS.XtSetValues (handle, argList2, argList2.length / 2);", "+\t}", "+    */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f4a4c057c9626913c5cc0a0a7ed242de", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "25e0b9cefcf6aad913e775e22fb19b1e3de2a216", "commitAfterChange": "abdb7df6c5ef7f31dd770f626e22ad0d039e1629", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": " public FontData[] getFontList (String faceName, boolean scalable)", "signatureAfterChange": " public FontData[] getFontList (String faceName, boolean scalable)", "diff": ["-\tif (!scalable) return new FontData[0];", "-\tshort[] style = new short[1];", "-\tshort[] family = new short[1];", "-\tint[] fontCount = new int[1];", "-\tint[] actualLength = new int[1];", "-\tCFRange range = new CFRange();", "-\tOS.ATSUGetFontIDs(null, 0, fontCount);", "-\tint[] fontIDs = new int[fontCount[0]];", "-\tOS.ATSUGetFontIDs(fontIDs, fontIDs.length, fontCount);", "+\tif (!scalable) return new FontData[0];\t", "-\tFontData[] fds = new FontData[fontCount[0]];", "-\tfor (int i=0; i<fds.length; i++) {", "-\t\tint fontID = fontIDs[i];", "-\t\tint platformCode = OS.kFontUnicodePlatform, encoding = OS.kCFStringEncodingUnicode;", "-\t\tif (OS.ATSUFindFontName(fontID, OS.kFontFamilyName, platformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, 0, null, actualLength, null) != OS.noErr) {", "-\t\t\tplatformCode = OS.kFontNoPlatformCode;", "-\t\t\tencoding = OS.kCFStringEncodingMacRoman;", "-\t\t\tif (OS.ATSUFindFontName(fontID, OS.kFontFamilyName, platformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, 0, null, actualLength, null) != OS.noErr) {", "-\t\t\t\tcontinue;", "-\t\t\t}", "-\t\t}", "-\t\tbyte[] buffer = new byte[actualLength[0]];", "-\t\tOS.ATSUFindFontName(fontID, OS.kFontFamilyName, platformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, buffer.length, buffer, actualLength, null);", "-\t\tint ptr = OS.CFStringCreateWithBytes(0, buffer, buffer.length, encoding, false);", "-\t\tif (ptr != 0) {", "-\t\t\tint length = OS.CFStringGetLength(ptr);", "-\t\t\tif (length != 0) {", "-\t\t\t\tchar[] chars = new char[length];", "-\t\t\t\trange.length = length;", "-\t\t\t\tOS.CFStringGetCharacters(ptr, range, chars);", "-\t\t\t\tString name = new String(chars);", "-\t\t\t\tif (!name.startsWith(\".\")) {", "-\t\t\t\t\tif (faceName == null || Compatibility.equalsIgnoreCase(faceName, name)) {", "-\t\t\t\t\t\tOS.FMGetFontFamilyInstanceFromFont(fontID, family, style);", "-\t\t\t\t\t\tint s = SWT.NORMAL;", "-\t\t\t\t\t\tif ((style[0] & OS.italic) != 0) s |= SWT.ITALIC;", "-\t\t\t\t\t\tif ((style[0] & OS.bold) != 0) s |= SWT.BOLD;", "-\t\t\t\t\t\tFontData data = new FontData(name, 0, s);", "-\t\t\t\t\t\tfds[count++] = data;", "+\tint[] buffer = new int[1];", "+\tCFRange range = new CFRange ();", "+\tOS.ATSUGetFontIDs(null, 0, buffer);", "+\tFontData[] fds = new FontData[buffer[0]];", "+\tint status = OS.ATSFontIteratorCreate (OS.kATSFontContextLocal, 0, 0, OS.kATSOptionFlagsDefaultScope, buffer);", "+\tint iter = buffer[0];", "+\twhile (status == OS.noErr) {", "+\t\tstatus = OS.ATSFontIteratorNext(iter, buffer);", "+\t\tif (status == OS.noErr) {", "+\t\t\tint font = buffer[0];", "+\t\t\tif (OS.ATSFontGetName(font, 0, buffer) == OS.noErr) {", "+\t\t\t\trange.length = OS.CFStringGetLength(buffer[0]);", "+\t\t\t\tchar [] chars = new char[range.length];", "+\t\t\t\tOS.CFStringGetCharacters(buffer[0], range, chars);", "+\t\t\t\tOS.CFRelease(buffer[0]);", "+\t\t\t\tString atsName = new String(chars);", "+\t\t\t\tint platformCode = OS.kFontUnicodePlatform, encoding = OS.kCFStringEncodingUnicode;", "+\t\t\t\tif (OS.ATSUFindFontName(font, OS.kFontFamilyName, platformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, 0, null, buffer, null) != OS.noErr) {", "+\t\t\t\t\tplatformCode = OS.kFontNoPlatformCode;", "+\t\t\t\t\tencoding = OS.kCFStringEncodingMacRoman;", "+\t\t\t\t\tif (OS.ATSUFindFontName(font, OS.kFontFamilyName, platformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, 0, null, buffer, null) != OS.noErr) {", "+\t\t\t\t\t\tcontinue;", "+\t\t\t\tbyte[] bytes = new byte[buffer[0]];", "+\t\t\t\tOS.ATSUFindFontName(font, OS.kFontFamilyName, platformCode, OS.kFontNoScriptCode, OS.kFontNoLanguageCode, bytes.length, bytes, buffer, null);", "+\t\t\t\tint ptr = OS.CFStringCreateWithBytes(0, bytes, bytes.length, encoding, false);", "+\t\t\t\tif (ptr != 0) {", "+\t\t\t\t\trange.length = OS.CFStringGetLength(ptr);", "+\t\t\t\t\tif (range.length != 0) {", "+\t\t\t\t\t\tchars = new char[range.length];", "+\t\t\t\t\t\tOS.CFStringGetCharacters(ptr, range, chars);", "+\t\t\t\t\t\tString name = new String(chars);", "+\t\t\t\t\t\tif (!name.startsWith(\".\")) {", "+\t\t\t\t\t\t\tif (faceName == null || Compatibility.equalsIgnoreCase(faceName, name)) {", "+\t\t\t\t\t\t\t\tint s = SWT.NORMAL;", "+\t\t\t\t\t\t\t\tif (atsName.indexOf(\"Italic\") != -1) s |= SWT.ITALIC;", "+\t\t\t\t\t\t\t\tif (atsName.indexOf(\"Bold\") != -1) s |= SWT.BOLD;", "+\t\t\t\t\t\t\t\tFontData data = new FontData(name, 0, s);", "+\t\t\t\t\t\t\t\tdata.atsName = atsName;", "+\t\t\t\t\t\t\t\tif (count == fds.length) {", "+\t\t\t\t\t\t\t\t\tFontData[] newFDs = new FontData[count + 4];", "+\t\t\t\t\t\t\t\t\tSystem.arraycopy(fds, 0, newFDs, 0, count);", "+\t\t\t\t\t\t\t\t\tfds = newFDs;", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\tfds[count++] = data;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.CFRelease(ptr);", "+\t\t\t\t}", "-\t\t\tOS.CFRelease(ptr);", "+\t}", "+\tif (iter != 0) {", "+\t\tbuffer [0] = iter;", "+\t\tOS.ATSFontIteratorRelease (buffer);"]}], "num": 26653}
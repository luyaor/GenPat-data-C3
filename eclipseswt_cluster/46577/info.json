{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "27713226649242d3f306f645316bcadc", "detectedBy": ["DIFF_HIERARCHICAL", "AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6b758b79ef2f4e6e2e3e7e1adf6070b9", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Cursor.java", "commitBeforeChange": "1571b21a3b1e60f5ff0c7a9bc19396983f515d5e", "commitAfterChange": "d58fca053bfd8af0ab62017d6a7317d79cadaca3", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "  public Cursor(Device device, ImageData source, int hotspotX, int hotspotY)", "signatureAfterChange": "  public Cursor(Device device, ImageData source, int hotspotX, int hotspotY)", "diff": ["-\t/* Ensure depth and scanline pad are equal to 1 */", "-\tif (source.depth > 1 || source.scanlinePad != 1) {", "+\t/* Ensure depth is equal to 1 */", "+\tif (source.depth > 1) {", "-\t", "-\t/*", "-\t * Make sure the mask is padded properly. Unix requires icon masks", "-\t * to have a scanline pad of 1.", "-\t */", "-\tif (mask.scanlinePad != 1) {", "-\t\tint bytesPerLine = (mask.width + 7) / 8;", "-\t\tbyte[] newMaskData = new byte[bytesPerLine * mask.height];", "-\t\tImageData newMask = new ImageData(mask.width, mask.height, 1, mask.palette, 1, newMaskData);", "-\t\tint[] maskPixels = new int[mask.width];", "-\t\tfor (int y = 0; y < mask.height; y++) {", "-\t\t\tmask.getPixels(0, y, mask.width, maskPixels, 0);", "-\t\t\tnewMask.setPixels(0, y, newMask.width, maskPixels, 0);", "-\t\t}", "-\t\tmask = newMask;", "-\t}", "-\t", "-\t/* Swap the bits in each byte */", "+", "+\t/* Swap the bits in each byte and convert scanline pad to 2 */", "+\tsourceData = ImageData.convertPad(sourceData, source.width, source.height, source.depth, source.scanlinePad, 2);", "+\tmaskData = ImageData.convertPad(maskData, mask.width, mask.height, mask.depth, mask.scanlinePad, 2);", "+\t", "+\t/* Create bitmaps */"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "861040ab3bb9e316e83a7fa3b289374b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Cursor.java", "commitBeforeChange": "ef785e65c5666e705660b195ef7d2da7b6c1f35c", "commitAfterChange": "1571b21a3b1e60f5ff0c7a9bc19396983f515d5e", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": " public Cursor(Device device, ImageData source, int hotspotX, int hotspotY)", "signatureAfterChange": " public Cursor(Device device, ImageData source, int hotspotX, int hotspotY)", "diff": ["-\t/* Ensure depth and scanline pad are equal to 1 */", "-\tif (source.depth > 1 || source.scanlinePad != 1) {", "+\t/* Ensure depth is equal to 1 */", "+\tif (source.depth > 1) {", "-\t", "-\t/*", "-\t * Make sure the mask is padded properly. Unix requires icon masks", "-\t * to have a scanline pad of 1.", "-\t */", "-\tif (mask.scanlinePad != 1) {", "-\t\tint bytesPerLine = (mask.width + 7) / 8;", "-\t\tbyte[] newMaskData = new byte[bytesPerLine * mask.height];", "-\t\tImageData newMask = new ImageData(mask.width, mask.height, 1, mask.palette, 1, newMaskData);", "-\t\tint[] maskPixels = new int[mask.width];", "-\t\tfor (int y = 0; y < mask.height; y++) {", "-\t\t\tmask.getPixels(0, y, mask.width, maskPixels, 0);", "-\t\t\tnewMask.setPixels(0, y, newMask.width, maskPixels, 0);", "-\t\t}", "-\t\tmask = newMask;", "-\t}", "-\t/* Swap the bits in each byte */", "+\t/* Swap the bits in each byte and convert scanline pad to 2 */", "+\tsourceData = ImageData.convertPad(sourceData, source.width, source.height, source.depth, source.scanlinePad, 2);", "+\tmaskData = ImageData.convertPad(maskData, mask.width, mask.height, mask.depth, mask.scanlinePad, 2);", "+\t/* Create bitmaps */"]}], "num": 46577}
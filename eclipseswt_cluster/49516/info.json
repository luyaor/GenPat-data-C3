{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aefe718cb42094b6c5968c2b5c61629c", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6417bfdd69674e35e4ac9908f54067b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/win32/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "9c7d16bb18d3860d95141caf8c4f01bb13563f7e", "commitAfterChange": "be5aa41634cde1e04ae4d0c10fd398906519cd0c", "methodNumberBeforeChange": 272, "methodNumberAfterChange": 285, "signatureBeforeChange": " \tint put_accValue(int varChild, int szValue)", "signatureAfterChange": " \tint put_accValue(int varChild, int szValue)", "diff": ["-\t\t/* MSAA: this method is typically only used for edit controls. */", "+\t\t/* MSAA: this method is supported for some UI elements (usually edit controls). */", "+\t\tVARIANT v = getVARIANT(varChild);", "+\t\tif (v.vt != COM.VT_I4) return COM.E_INVALIDARG;", "-\t\tif (iaccessible != null) {", "-\t\t\t/* Currently, we don't expose this as API. Forward to the proxy. */", "+\t\tif (v.lVal == COM.CHILDID_SELF && accessibleEditableTextListeners.size() > 0) {", "+\t\t\t/*", "+\t\t\t * If the object supports AccessibleEditableTextListener.replaceText,", "+\t\t\t * then give the object a chance to handle this event.", "+\t\t\t */", "+\t\t\tAccessibleEditableTextEvent event = new AccessibleEditableTextEvent(this);", "+\t\t\tevent.start = 0;", "+\t\t\tevent.end = getCharacterCount();", "+\t\t\tif (event.end >= 0) {", "+\t\t\t\tint size = COM.SysStringByteLen(szValue);", "+\t\t\t\tchar [] buffer = new char [(size + 1) / 2];", "+\t\t\t\tOS.MoveMemory (buffer, szValue, size);", "+\t\t\t\tevent.string = new String (buffer);", "+\t\t\t\tfor (int i = 0; i < accessibleEditableTextListeners.size(); i++) {", "+\t\t\t\t\tAccessibleEditableTextListener listener = (AccessibleEditableTextListener) accessibleEditableTextListeners.elementAt(i);", "+\t\t\t\t\tlistener.replaceText(event);", "+\t\t\t\t}", "+\t\t\t\tif (event.result != null && event.result.equals(ACC.OK)) code = COM.S_OK;", "+\t\t\t\tif (DEBUG) print(this + \".IAccessible::put_accValue(\" + v.lVal + \", \\\"\" + event.string + \"\\\") returning \" + hresult(code));", "+\t\t\t}", "+\t\t}", "+\t\tif (code != COM.S_OK && iaccessible != null) {", "+\t\t\t/* If the object did not handle the event, then forward to the proxy. */", "+\t\t\tif (DEBUG) print(this + \".IAccessible::put_accValue(\" + v.lVal + \") returning \" + hresult(code) + \" from proxy\");"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa5c4c9880d021f6b12aaaadbcc416ae", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/cocoa/org/eclipse/swt/accessibility/Accessible.java", "commitBeforeChange": "18ce373e262126236e66fff74f7d2ddc7fffb312", "commitAfterChange": "41ad2a506242e46d3b0d85d794d3bd6a732e7252", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 80, "signatureBeforeChange": " \t \tid getStyleRangeForIndexAttribute (id parameter, int childID)", "signatureAfterChange": " \t \tid getStyleRangeForIndexAttribute (id parameter, int childID)", "diff": ["-\t\tid returnValue = null;", "+\t\tif (accessibleAttributeListeners.size() == 0) return null;", "-\t\tif (accessibleAttributeListeners.size() > 0) {", "-\t\t\tAccessibleTextAttributeEvent event = new AccessibleTextAttributeEvent(this);", "-\t\t\tevent.offset = (int) /*64*/ index;", "-\t\t\t", "-\t\t\t// Marker values -- if -1 after calling getTextAttributes, no one implemented it.", "-\t\t\tevent.start = event.end = -1;", "-\t\t\t", "-\t\t\tfor (int i = 0; i < accessibleAttributeListeners.size(); i++) {", "-\t\t\t\tAccessibleAttributeListener listener = (AccessibleAttributeListener) accessibleAttributeListeners.elementAt(i);", "-\t\t\t\tlistener.getTextAttributes(event);", "-\t\t\t}", "+\t\tAccessibleTextAttributeEvent event = new AccessibleTextAttributeEvent(this);", "+\t\tevent.offset = (int) /*64*/ index;", "-\t\t\tNSRange range = new NSRange();", "-\t\t\tif (event.start == -1 && event.end == -1) {", "-\t\t\t\trange.location = index;", "-\t\t\t\trange.length = 0;", "-\t\t\t} else {", "-\t\t\t\trange.location = event.start;", "-\t\t\t\trange.length = event.end - event.start;", "-\t\t\t}", "-\t\t\treturnValue = NSValue.valueWithRange(range);", "-\t\t} else {", "-\t\t\tNSRange range = new NSRange();", "+\t\t// Marker values -- if -1 after calling getTextAttributes, no one implemented it.", "+\t\tevent.start = event.end = -1;", "+", "+\t\tfor (int i = 0; i < accessibleAttributeListeners.size(); i++) {", "+\t\t\tAccessibleAttributeListener listener = (AccessibleAttributeListener) accessibleAttributeListeners.elementAt(i);", "+\t\t\tlistener.getTextAttributes(event);", "+\t\t}", "+", "+\t\tNSRange range = new NSRange();", "+\t\tif (event.start == -1 && event.end == -1) {", "-\t\t\treturnValue = NSValue.valueWithRange(range);", "+\t\t} else {", "+\t\t\trange.location = event.start;", "+\t\t\trange.length = event.end - event.start;", "-\t\treturn returnValue;", "+", "+\t\treturn NSValue.valueWithRange(range);"]}], "num": 49516}
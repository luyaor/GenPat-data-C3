{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45a7e14d6363e3a4e469f1672146833d", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d3b5a85af93781283891d2381feb5399", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "c8f03fe44f19567b38efadfccba773495882885b", "commitAfterChange": "460384db3fd88c27a6bcd31d10f9702c5446d162", "methodNumberBeforeChange": 69, "methodNumberAfterChange": 69, "signatureBeforeChange": "  LRESULT WM_ACTIVATE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_ACTIVATE (int wParam, int lParam)", "diff": ["-//\tint threadId = OS.GetWindowThreadProcessId (lParam, null);", "-//\tif (threadId != OS.GetCurrentThreadId ()) {", "-//\t\tint [] processID = new int [1];", "-//\t\tOS.GetWindowThreadProcessId (lParam, processID);", "-//\t\tif (processID [0] == OS.GetCurrentProcessId ()) {", "-//\t\t\tTCHAR buffer = new TCHAR (0, 128);", "-//\t\t\tOS.GetClassName (lParam, buffer, buffer.length ());", "-//\t\t\tString className = buffer.toString (0, buffer.strlen ());", "-//\t\t\t/*", "-//\t\t\t* Feature in AWT.  ", "-//\t\t\t*/", "-//\t\t\tif (className.startsWith (Display.AWT_WINDOW_CLASS_PREFIX)) {", "-//\t\t\t\t//OS.ReplyMessage (0);", "-//\t\t\t}", "-//\t\t\t/*", "-//\t\t\t* Feature in AWT.  When an AWT Window is activated,", "-//\t\t\t* for some reason, it seems to forward the WM_ACTIVATE", "-//\t\t\t* message to the parent.  Normally, the parent is an", "-//\t\t\t* AWT Frame.  When AWT is embedded in SWT, the SWT", "-//\t\t\t* shell gets the WM_ACTIVATE and assumes that it came", "-//\t\t\t* from Windows.  When an SWT shell is activated it", "-//\t\t\t* restores focus to the last control that had focus.", "-//\t\t\t* If this control is an embedded composite, it takes", "-//\t\t\t* focus from the AWT Window.  The fix is to ignore", "-//\t\t\t* WM_ACTIVATE messages that come from AWT Windows.", "-//\t\t\t*/", "-//\t\t\tif (OS.GetParent (lParam) == handle) {", "-//\t\t\t\tif (className.equals (Display.AWT_WINDOW_CLASS)) {", "-//\t\t\t\t\treturn LRESULT.ZERO;", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t}", "-//\t}", "+\t/*", "+\t* Feature in AWT.  When an AWT Window is activated,", "+\t* for some reason, it seems to forward the WM_ACTIVATE", "+\t* message to the parent.  Normally, the parent is an", "+\t* AWT Frame.  When AWT is embedded in SWT, the SWT", "+\t* shell gets the WM_ACTIVATE and assumes that it came", "+\t* from Windows.  When an SWT shell is activated it", "+\t* restores focus to the last control that had focus.", "+\t* If this control is an embedded composite, it takes", "+\t* focus from the AWT Window.  The fix is to ignore", "+\t* WM_ACTIVATE messages that come from AWT Windows.", "+\t*/", "+\tif (OS.GetParent (lParam) == handle) {", "+\t\tTCHAR buffer = new TCHAR (0, 128);", "+\t\tOS.GetClassName (lParam, buffer, buffer.length ());", "+\t\tString className = buffer.toString (0, buffer.strlen ());", "+\t\tif (className.equals (Display.AWT_WINDOW_CLASS)) {", "+\t\t\treturn LRESULT.ZERO;", "+\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d48675e21e111f92e7ee375376c8d778", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Decorations.java", "commitBeforeChange": "9590c886e5aa5dfa6590d62b81b13c52ec4149a6", "commitAfterChange": "eff4a91fc5004d296b6e06870a24dbbbada441e2", "methodNumberBeforeChange": 66, "methodNumberAfterChange": 66, "signatureBeforeChange": "  LRESULT WM_ACTIVATE (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_ACTIVATE (int wParam, int lParam)", "diff": ["+\t/*", "+\t* Feature in AWT.  When an AWT Window is activated,", "+\t* for some reason, it seems to forward the WM_ACTIVATE", "+\t* message to the parent.  Normally, the parent is an", "+\t* AWT Frame.  When AWT is embedded in SWT, the SWT", "+\t* shell gets the WM_ACTIVATE and assumes that it came", "+\t* from Windows.  When an SWT shell is activated it", "+\t* restores focus to the last control that had focus.", "+\t* If this control is an embedded composite, it takes", "+\t* focus from the AWT Window.  The fix is to ignore", "+\t* WM_ACTIVATE messages that come from AWT Windows.", "+\t*/", "+\tif (OS.GetParent (lParam) == handle) {", "+\t\tTCHAR buffer = new TCHAR (0, 128);", "+\t\tOS.GetClassName (lParam, buffer, buffer.length ());", "+\t\tString className = buffer.toString (0, buffer.strlen ());", "+\t\tif (className.equals (Display.AWT_WINDOW_CLASS)) {", "+\t\t\treturn LRESULT.ONE;", "+\t\t}", "+\t}"]}], "num": 56488}
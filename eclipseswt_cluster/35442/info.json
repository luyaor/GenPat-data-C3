{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "94f0fa9b1d91709cbd11a342369abe10", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9710b480ab0daa710e73fbfe6324b600", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/cocoa/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "b796db7a88d068fbce3590cf91dcc3e9c7f9c320", "commitAfterChange": "37c57c08e60a278244a46818f49a47ece9a0e524", "methodNumberBeforeChange": 14, "methodNumberAfterChange": 23, "signatureBeforeChange": "  boolean setEventData(int theDrag, DNDEvent event)", "signatureAfterChange": "  boolean setEventData(NSObject draggingState, DNDEvent event)", "diff": ["-boolean setEventData(int theDrag, DNDEvent event) {", "-//\tif (theDrag == 0) return false;", "-//\t", "-//\t// get allowed operations", "-//\tint style = getStyle();", "-//\tint[] outActions = new int[1];", "-//\tOS.GetDragAllowableActions(theDrag, outActions);", "-//\tint operations = osOpToOp(outActions[0]) & style;", "-//\tif (operations == DND.DROP_NONE) return false;", "-//\t", "-//\t//get current operation", "-//\tint operation =  getOperationFromKeyState(theDrag);", "-//\tkeyOperation = operation;", "-//\tif (operation == DND.DROP_DEFAULT) {", "-//\t\t if ((style & DND.DROP_DEFAULT) == 0) {", "-//\t\t\toperation = (operations & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;", "-//\t\t }", "-//\t} else {", "-//\t\tif ((operation & operations) == 0) operation = DND.DROP_NONE;", "-//\t}", "-//\t", "-//\t// get allowed transfer types", "-//\tshort[] numItems = new short[1];", "-//\tOS.CountDragItems(theDrag, numItems);", "-//\tint[] flavors = new int[10];", "-//\tint index = -1;", "-//\t//Get a unique list of flavors", "-//\tfor (short i = 0; i < numItems[0]; i++) {", "-//\t\tint[] theItemRef = new int[1];", "-//\t\tOS.GetDragItemReferenceNumber(theDrag, (short) (i+1), theItemRef);", "-//\t\tshort[] numFlavors = new short[1];", "-//\t\tOS.CountDragItemFlavors(theDrag, theItemRef[0], numFlavors);", "-//\t\tint[] theType = new int[1];", "-//\t\tfor (int j = 0; j < numFlavors[0]; j++) {", "-//\t\t\ttheType[0] = 0;", "-//\t\t\tif (OS.GetFlavorType(theDrag, theItemRef[0], (short) (j+1), theType) == OS.noErr) {", "-//\t\t\t\tboolean unique = true;", "-//\t\t\t\tfor (int k = 0; k < flavors.length; k++) {", "-//\t\t\t\t\tif (flavors[k] == theType[0]) {", "-//\t\t\t\t\t\tunique = false;", "-//\t\t\t\t\t\tbreak;", "-//\t\t\t\t\t}", "-//\t\t\t\t}", "-//\t\t\t\tif (unique) {", "-//\t\t\t\t\tif (index == flavors.length - 1) {", "-//\t\t\t\t\t\tint[] temp = new int[flavors.length + 10];", "-//\t\t\t\t\t\tSystem.arraycopy(flavors, 0, temp, 0, flavors.length);", "-//\t\t\t\t\t\tflavors = temp;", "-//\t\t\t\t\t}", "-//\t\t\t\t\tflavors[++index] = theType[0];", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t}", "-//\t}", "-//\tif (index == -1) return false;", "-//\t", "-//\tTransferData[] dataTypes = new TransferData[index+1];", "-//\tindex = -1;", "-//\tfor (int i = 0; i < dataTypes.length; i++) {", "-//\t\tif (flavors[i] != 0) {", "-//\t\t\tTransferData data = new TransferData();", "-//\t\t\tdata.type = flavors[i];", "-//\t\t\tfor (int j = 0; j < transferAgents.length; j++) {", "-//\t\t\t\tTransfer transfer = transferAgents[j];", "-//\t\t\t\tif (transfer != null && transfer.isSupportedType(data)) {", "-//\t\t\t\t\tdataTypes[++index] = data;", "-//\t\t\t\t\tbreak;", "-//\t\t\t\t}", "-//\t\t\t}", "-//\t\t}", "-//\t}", "-//\tif (index == -1) return false;", "-//\t", "-//\tif (index < dataTypes.length - 1) {", "-//\t\tTransferData[] temp = new TransferData[index + 1];", "-//\t\tSystem.arraycopy(dataTypes, 0, temp, 0, index + 1);", "-//\t\tdataTypes = temp;", "-//\t}", "-//", "-//\tPoint mouse = new Point();", "-//\tOS.GetDragMouse(theDrag, mouse, null);", "+boolean setEventData(NSObject draggingState, DNDEvent event) {", "+\tif (draggingState == null) return false;", "-\tint operation = DND.DROP_NONE;", "+\t// get allowed operations", "+\tint style = getStyle();", "+\tint allowedActions = draggingState.draggingSourceOperationMask();", "+\tint operations = osOpToOp(allowedActions) & style;", "+\tif (operations == DND.DROP_NONE) return false;", "+", "+\t// get current operation", "+\tint operation = getOperationFromKeyState();", "+\tkeyOperation = operation;", "+\tif (operation == DND.DROP_DEFAULT) {", "+\t\t if ((style & DND.DROP_DEFAULT) == 0) {", "+\t\t\toperation = (operations & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;", "+\t\t }", "+\t} else {", "+\t\tif ((operation & operations) == 0) operation = DND.DROP_NONE;", "+\t}", "+\t", "+\t", "+\t// get allowed transfer types", "+\tNSPasteboard dragPBoard = draggingState.draggingPasteboard();", "+\tNSArray draggedTypes = dragPBoard.types();", "+\tif (draggedTypes == null) return false;", "+\t", "+\tint draggedTypeCount = draggedTypes.count();", "+\t", "+\tTransferData[] dataTypes = new TransferData[draggedTypeCount];", "+\tint index = -1;", "+\tfor (int i = 0; i < draggedTypeCount; i++) {", "+\t\tid draggedType = draggedTypes.objectAtIndex(i);", "+\t\tNSString nativeDataType = new NSString(draggedType);", "+\t\tTransferData data = new TransferData();", "+\t\tdata.type = Transfer.registerType(nativeDataType.getString());", "+\t\t", "+\t\tfor (int j = 0; j < transferAgents.length; j++) {", "+\t\t\tTransfer transfer = transferAgents[j];", "+\t\t\tif (transfer != null && transfer.isSupportedType(data)) {", "+\t\t\t\tdataTypes[++index] = data;", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "+\t}", "+\tif (index == -1) return false;", "+\t", "+\tif (index < dataTypes.length - 1) {", "+\t\tTransferData[] temp = new TransferData[index + 1];", "+\t\tSystem.arraycopy(dataTypes, 0, temp, 0, index + 1);", "+\t\tdataTypes = temp;", "+\t}", "+", "+\t// Convert from window-relative to global coordinates, and flip it.", "+\tNSPoint mouse = draggingState.draggingLocation();", "+\tNSPoint globalMouse = draggingState.draggingDestinationWindow().convertBaseToScreen(mouse);", "+\tNSArray screens = NSScreen.screens();", "+\tNSRect screenRect = new NSScreen(screens.objectAtIndex(0)).frame();", "+\tglobalMouse.y = screenRect.height - globalMouse.y;", "-//\tevent.x = mouse.h;", "-//\tevent.y = mouse.v;", "+\tevent.x = (int)globalMouse.x;", "+\tevent.y = (int)globalMouse.y;", "-//\tevent.dataTypes = dataTypes;", "-//\tevent.dataType = dataTypes[0];", "-//\tevent.operations = operations;", "+\tevent.dataTypes = dataTypes;", "+\tevent.dataType = dataTypes[0];", "+\tevent.operations = operations;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e76b55363ec5964477906b32fb1c6b32", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Program/carbon/org/eclipse/swt/program/Program.java", "commitBeforeChange": "14581ca5a7841e362a4bb6a68c76d00675c70760", "commitAfterChange": "2882bbd7423650466596733b7f7109e5d58042c8", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 3, "signatureBeforeChange": " public static Program [] getPrograms ()", "signatureAfterChange": " public static Program [] getPrograms ()", "diff": ["-\treturn new Program [] {", "-\t\tgetProgram(\".html\"),", "-\t};", "+\tHashtable bundles = new Hashtable();", "+\tString[] extensions = getExtensions();", "+\tfor (int i = 0; i < extensions.length; i++) {", "+\t\tString extension = extensions[i];", "+\t\tchar[] chars = new char[extension.length() - 1];", "+\t\textension.getChars(1, extension.length(), chars, 0);", "+\t\tint ext = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, chars.length);", "+\t\tif (ext != 0) {", "+\t\t\tint utis = OS.UTTypeCreateAllIdentifiersForTag(OS.kUTTagClassFilenameExtension(), ext, 0);", "+\t\t\tif (utis != 0) {", "+\t\t\t\tint utiCount = OS.CFArrayGetCount(utis);", "+\t\t\t\tfor (int j = 0; j < utiCount; j++) {", "+\t\t\t\t\tint uti = OS.CFArrayGetValueAtIndex(utis, j);", "+\t\t\t\t\tif (uti != 0) {", "+\t\t\t\t\t\tint apps = OS.LSCopyAllRoleHandlersForContentType(uti, 0xFFFFFFFF);", "+\t\t\t\t\t\tif (apps != 0) {", "+\t\t\t\t\t\t\tint appCount = OS.CFArrayGetCount(apps);", "+\t\t\t\t\t\t\tfor (int k = 0; k < appCount; k++) {", "+\t\t\t\t\t\t\t\tint app = OS.CFArrayGetValueAtIndex(apps, k);", "+\t\t\t\t\t\t\t\tif (app != 0) {", "+\t\t\t\t\t\t\t\t\tint length = OS.CFStringGetLength(app);", "+\t\t\t\t\t\t\t\t\tif (length != 0) {", "+\t\t\t\t\t\t\t\t\t\tchar[] buffer= new char[length];", "+\t\t\t\t\t\t\t\t\t\tCFRange range = new CFRange();", "+\t\t\t\t\t\t\t\t\t\trange.length = length;", "+\t\t\t\t\t\t\t\t\t\tOS.CFStringGetCharacters(app, range, buffer);", "+\t\t\t\t\t\t\t\t\t\tString bundleID = new String(buffer);", "+\t\t\t\t\t\t\t\t\t\tif (bundles.get(bundleID) == null) {", "+\t\t\t\t\t\t\t\t\t\t\tbyte[] fsRef = new byte[80];", "+\t\t\t\t\t\t\t\t\t\t\tif (OS.LSFindApplicationForInfo(OS.kLSUnknownCreator, app,\t0, fsRef, null) == OS.noErr) {", "+\t\t\t\t\t\t\t\t\t\t\t\tProgram program = getProgram(fsRef);", "+\t\t\t\t\t\t\t\t\t\t\t\tbundles.put(bundleID, program);", "+\t\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tOS.CFRelease(apps);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tOS.CFRelease(utis);", "+\t\t\t}", "+\t\t\tOS.CFRelease(ext);", "+\t\t}", "+\t}", "+\tint count = 0;", "+\tProgram[] programs = new Program[bundles.size()];", "+\tEnumeration values = bundles.elements();", "+\twhile (values.hasMoreElements()) {", "+\t\tprograms[count++] = (Program)values.nextElement();", "+\t}", "+\treturn programs;"]}], "num": 35442}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "3805009935a3a24b3b33518f72a17cd1", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "117dcef554ed9dae4c2dd3aee37657bf", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "c4f17311b55f12173e13af22fbe9b7532cadaaec", "commitAfterChange": "f842226b7503c6c3a5f7116f813ed0cd9148a642", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 42, "signatureBeforeChange": " public Rectangle getClipping()", "signatureAfterChange": " public Rectangle getClipping()", "diff": ["-\tif (data.control == 0) {", "-\t\tint width = 0, height = 0;", "+\tRect bounds = new Rect();", "+\tint x = 0, y = 0, width = 0, height = 0;", "+\tif (data.control != 0) {", "+\t\tOS.GetControlBounds(data.control, bounds);", "+\t\twidth = bounds.right - bounds.left;", "+\t\theight = bounds.bottom - bounds.top;", "+\t} else {", "-\t\treturn new Rectangle(0, 0, width, height);", "-\tRect bounds = new Rect();", "-\tOS.GetControlBounds(data.control, bounds);", "-\tif (data.clipRgn == 0 && data.visibleRgn == 0) {", "-\t\tint width = bounds.right - bounds.left;", "-\t\tint height = bounds.bottom - bounds.top;", "-\t\treturn new Rectangle(0, 0, width, height);", "+\tif (data.clipRgn != 0 || data.visibleRgn != 0) {", "+\t\tint clipping = OS.NewRgn();", "+\t\tOS.SetRectRgn(clipping, (short)0, (short)0, (short)width, (short)height);", "+\t\tif (data.clipRgn != 0) OS.SectRgn(data.clipRgn, clipping, clipping);", "+\t\tif (data.visibleRgn != 0) {", "+\t\t\t// Note that bounds has the control bounds", "+\t\t\tOS.OffsetRgn(data.visibleRgn, (short)-bounds.left, (short)-bounds.top);", "+\t\t\tOS.SectRgn(data.visibleRgn, clipping, clipping);", "+\t\t\tOS.OffsetRgn(data.visibleRgn, bounds.left, bounds.top);", "+\t\t}", "+\t\tOS.GetRegionBounds(clipping, bounds);", "+\t\tx = bounds.left;", "+\t\ty = bounds.top;", "+\t\twidth = bounds.right - bounds.left;", "+\t\theight = bounds.bottom - bounds.top;", "+\t\tOS.DisposeRgn(clipping);", "-\tint clipping = OS.NewRgn();", "-\tOS.RectRgn(clipping, bounds);", "-\tOS.OffsetRgn(clipping, (short)-bounds.left, (short)-bounds.top);", "-\tif (data.clipRgn != 0) OS.SectRgn(data.clipRgn, clipping, clipping);", "-\tif (data.visibleRgn != 0) {", "-\t\tOS.OffsetRgn(data.visibleRgn, (short)-bounds.left, (short)-bounds.top);", "-\t\tOS.SectRgn(data.visibleRgn, clipping, clipping);", "-\t\tOS.OffsetRgn(data.visibleRgn, bounds.left, bounds.top);", "-\t}", "-\tOS.GetRegionBounds(clipping, bounds);", "-\tint width = bounds.right - bounds.left;", "-\tint height = bounds.bottom - bounds.top;", "-\tOS.DisposeRgn(clipping);", "-\treturn new Rectangle(bounds.left, bounds.top, width, height);", "+\treturn new Rectangle(x, y, width, height);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51702b7af1f319e33d021fadcba13c6f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Menu.java", "commitBeforeChange": "e033c0e2ebd55c296e80b4ffbe0e8fb51e6aeab5", "commitAfterChange": "2adc7bfc8aac13ddcf9312b69aa9703cfc6bc5cd", "methodNumberBeforeChange": 41, "methodNumberAfterChange": 41, "signatureBeforeChange": " public void setVisible (boolean visible)", "signatureAfterChange": " public void setVisible (boolean visible)", "diff": ["-\t/* AW", "-\tint hwndParent = parent.handle;", "-\t*/", "-\tif (!visible) {", "-\t\t/* AW", "-\t\tOS.SendMessage (hwndParent, OS.WM_CANCELMODE, 0, 0);", "-\t\t*/", "-\t\treturn;", "-\t}", "-\t/* AW", "-\tint flags = OS.TPM_LEFTBUTTON | OS.TPM_RIGHTBUTTON | OS.TPM_LEFTALIGN;", "-\t*/", "+\tif (!visible) return;", "-\t\t/* AW", "-\t\tint pos = OS.GetMessagePos ();", "-\t\tnX = (short) (pos & 0xFFFF);", "-\t\tnY = (short) (pos >> 16);", "-\t\t*/", "-\t\tSystem.out.println(\"Menu.setVisible: nyi\");", "+\t\tMacPoint where= new MacPoint();", "+\t\tOS.GetGlobalMouse (where.getData());", "+\t\tnX = where.getX(); nY = where.getY();", "-\t/*", "-\t* Feature in Windows.  It is legal use TrackPopupMenu ()", "-\t* to display an empty menu as long menu items are added", "-\t* inside of WM_INITPOPUPMENU.  If no items are added, then", "-\t* TrackPopupMenu () fails and does not send an indication", "-\t* that the menu has been closed.  This is not strictly a", "-\t* bug but leads to unwanted behavior when application code", "-\t* assumes that every WM_INITPOPUPMENU will eventually result", "-\t* in a WM_MENUSELECT, wParam=0xFFFF0000, lParam=0 to indicate", "-\t* that the menu has been closed.  The fix is to detect the", "-\t* case when TrackPopupMenu fails and the number of items in", "-\t* the menu is zero and issue a fake WM_MENUSELECT.", "-\t*/", "-\t/* AW", "-\tboolean success = OS.TrackPopupMenu (handle, flags, nX, nY, 0, hwndParent, null);", "-\tif (!success && GetMenuItemCount (handle) == 0) {", "-\t\tOS.SendMessage (hwndParent, OS.WM_MENUSELECT, 0xFFFF0000, 0);", "-\t}", "-\t*/", "-\tint defaultIndex= -1;", "-\tif (defaultItem != null)", "-\t\tdefaultIndex= indexOf(defaultItem);", "-\tgetDisplay().menuIsVisible(true);", "-\tint result= OS.PopUpMenuSelect(handle, (short)nY, (short)nX, (short)(defaultIndex+1));", "-\tgetDisplay().menuIsVisible(false);", "-\tshort menuID= OS.HiWord(result);", "-\tif (menuID != 0) {", "-\t\tSystem.out.println(\"Menu.setVisible: should not happen\");", "-\t\t/*", "-\t\tMenu menu= getShell().findMenu(menuID);", "-\t\tif (menu != null)", "-\t\t\tmenu.handleMenu(result);", "-\t\t*/", "-\t}", "+\tint index = defaultItem != null ? indexOf (defaultItem) + 1 : lastIndex;", "+\tDisplay d= getDisplay();", "+\td.fInContextMenu= true;", "+\tint result = OS.PopUpMenuSelect (handle, (short)nY, (short)nX, (short)(index));", "+\td.fInContextMenu= false;", "+\tlastIndex = OS.LoWord (result);"]}], "num": 3393}
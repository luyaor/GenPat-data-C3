{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "18825f099d4b6e07bf0fc4ccc5eb1bab", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a790000fa7758007920a7886c0a8aefa", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/carbon/org/eclipse/swt/printing/PrintDialog.java", "commitBeforeChange": "8f175c0902b6952b9ad454b26d734bc7107ccafe", "commitAfterChange": "389adb00dc3aaa9a8f5a87ca149390abf76b86aa", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public PrinterData open()", "signatureAfterChange": " public PrinterData open()", "diff": ["-\t\t\t\tOS.PMSessionPageSetupDialog(printSession, pageFormat, accepted);\t", "-\t\t\t\tif (accepted[0]) {\t\t", "-\t\t\t\t\tOS.PMSessionPrintDialog(printSession, printSettings, pageFormat, accepted);", "-\t\t\t\t\tif (accepted[0]) {", "-\t\t\t\t\t\tshort[] destType = new short[1];", "-\t\t\t\t\t\tOS.PMSessionGetDestinationType(printSession, printSettings, destType);", "-\t\t\t\t\t\tString name = Printer.getCurrentPrinterName(printSession);", "-\t\t\t\t\t\tString driver = Printer.DRIVER;", "-\t\t\t\t\t\tswitch (destType[0]) {", "-\t\t\t\t\t\t\tcase OS.kPMDestinationFax: driver = Printer.FAX_DRIVER; break;", "-\t\t\t\t\t\t\tcase OS.kPMDestinationFile: driver = Printer.FILE_DRIVER; break;", "-\t\t\t\t\t\t\tcase OS.kPMDestinationPreview: driver = Printer.PREVIEW_DRIVER; break;", "-\t\t\t\t\t\t\tcase OS.kPMDestinationPrinter: driver = Printer.PRINTER_DRIVER; break;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tPrinterData data = new PrinterData(driver, name);", "-\t\t\t\t\t\tif (destType[0] == OS.kPMDestinationFile) {", "-\t\t\t\t\t\t\tdata.printToFile = true;", "-\t\t\t\t\t\t\tOS.PMSessionCopyDestinationLocation(printSession, printSettings, buffer);", "-\t\t\t\t\t\t\tint fileName = OS.CFURLCopyFileSystemPath(buffer[0],OS.kCFURLPOSIXPathStyle);", "-\t\t\t\t\t\t\tOS.CFRelease(buffer[0]);", "-\t\t\t\t\t\t\tdata.fileName = Printer.getString(fileName);", "-\t\t\t\t\t\t\tOS.CFRelease(fileName);", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tOS.PMGetCopies(printSettings, buffer);", "-\t\t\t\t\t\tdata.copyCount = buffer[0];\t\t\t\t\t\t", "-\t\t\t\t\t\tOS.PMGetFirstPage(printSettings, buffer);", "-\t\t\t\t\t\tdata.startPage = buffer[0];", "-\t\t\t\t\t\tOS.PMGetLastPage(printSettings, buffer);", "-\t\t\t\t\t\tdata.endPage = buffer[0];", "-\t\t\t\t\t\tOS.PMGetPageRange(printSettings, null, buffer);", "-\t\t\t\t\t\tif (data.startPage == 1 && data.endPage == OS.kPMPrintAllPages) {", "-\t\t\t\t\t\t\tdata.scope = PrinterData.ALL_PAGES;", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tboolean[] collate = new boolean[1];", "-\t\t\t\t\t\tOS.PMGetCollate(printSettings, collate);", "-\t\t\t\t\t\tdata.collate = collate[0];", "-\t\t\t\t\t\t", "-\t\t\t\t\t\t/* Serialize settings */", "-\t\t\t\t\t\tint[] flatSettings = new int[1];", "-\t\t\t\t\t\tOS.PMFlattenPrintSettings(printSettings, flatSettings);", "-\t\t\t\t\t\tint[] flatFormat = new int[1];", "-\t\t\t\t\t\tOS.PMFlattenPageFormat(pageFormat, flatFormat);", "-\t\t\t\t\t\tint settingsLength = OS.GetHandleSize (flatSettings[0]);", "-\t\t\t\t\t\tint formatLength = OS.GetHandleSize (flatFormat[0]);", "-\t\t\t\t\t\tbyte[] otherData = data.otherData = new byte[settingsLength + formatLength + 8];", "-\t\t\t\t\t\tint offset = 0;", "-\t\t\t\t\t\toffset = Printer.packData(flatSettings[0], otherData, offset);", "-\t\t\t\t\t\toffset = Printer.packData(flatFormat[0], otherData, offset);", "-\t\t\t\t\t\tOS.DisposeHandle(flatSettings[0]);", "-\t\t\t\t\t\tOS.DisposeHandle(flatFormat[0]);", "-\t\t\t\t\t\t", "-\t\t\t\t\t\tscope = data.scope;", "-\t\t\t\t\t\tstartPage = data.startPage;", "-\t\t\t\t\t\tendPage = data.endPage;", "-\t\t\t\t\t\tprintToFile = data.printToFile;", "-\t\t\t\t\t\treturn data;", "+\t\t\t\tif (OS.VERSION >= 0x1050) {", "+\t\t\t\t\tint printDialogOptions = OS.kPMShowDefaultInlineItems | OS.kPMShowPageAttributesPDE;", "+\t\t\t\t\tOS.PMShowPrintDialogWithOptions(printSession, printSettings, pageFormat, printDialogOptions, accepted);", "+\t\t\t\t} else {", "+\t\t\t\t\tOS.PMSessionPageSetupDialog(printSession, pageFormat, accepted);\t", "+\t\t\t\t\tif (accepted[0]) OS.PMSessionPrintDialog(printSession, printSettings, pageFormat, accepted);", "+\t\t\t\t}", "+\t\t\t\tif (accepted[0]) {", "+\t\t\t\t\tshort[] destType = new short[1];", "+\t\t\t\t\tOS.PMSessionGetDestinationType(printSession, printSettings, destType);", "+\t\t\t\t\tString name = Printer.getCurrentPrinterName(printSession);", "+\t\t\t\t\tString driver = Printer.DRIVER;", "+\t\t\t\t\tswitch (destType[0]) {", "+\t\t\t\t\t\tcase OS.kPMDestinationFax: driver = Printer.FAX_DRIVER; break;", "+\t\t\t\t\t\tcase OS.kPMDestinationFile: driver = Printer.FILE_DRIVER; break;", "+\t\t\t\t\t\tcase OS.kPMDestinationPreview: driver = Printer.PREVIEW_DRIVER; break;", "+\t\t\t\t\t\tcase OS.kPMDestinationPrinter: driver = Printer.PRINTER_DRIVER; break;", "+\t\t\t\t\tPrinterData data = new PrinterData(driver, name);", "+\t\t\t\t\tif (destType[0] == OS.kPMDestinationFile) {", "+\t\t\t\t\t\tdata.printToFile = true;", "+\t\t\t\t\t\tOS.PMSessionCopyDestinationLocation(printSession, printSettings, buffer);", "+\t\t\t\t\t\tint fileName = OS.CFURLCopyFileSystemPath(buffer[0],OS.kCFURLPOSIXPathStyle);", "+\t\t\t\t\t\tOS.CFRelease(buffer[0]);", "+\t\t\t\t\t\tdata.fileName = Printer.getString(fileName);", "+\t\t\t\t\t\tOS.CFRelease(fileName);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.PMGetCopies(printSettings, buffer);", "+\t\t\t\t\tdata.copyCount = buffer[0];\t\t\t\t\t\t", "+\t\t\t\t\tOS.PMGetFirstPage(printSettings, buffer);", "+\t\t\t\t\tdata.startPage = buffer[0];", "+\t\t\t\t\tOS.PMGetLastPage(printSettings, buffer);", "+\t\t\t\t\tdata.endPage = buffer[0];", "+\t\t\t\t\tOS.PMGetPageRange(printSettings, null, buffer);", "+\t\t\t\t\tif (data.startPage == 1 && data.endPage == OS.kPMPrintAllPages) {", "+\t\t\t\t\t\tdata.scope = PrinterData.ALL_PAGES;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "+\t\t\t\t\t}", "+\t\t\t\t\tboolean[] collate = new boolean[1];", "+\t\t\t\t\tOS.PMGetCollate(printSettings, collate);", "+\t\t\t\t\tdata.collate = collate[0];", "+\t\t\t\t\t", "+\t\t\t\t\t/* Serialize settings */", "+\t\t\t\t\tint[] flatSettings = new int[1];", "+\t\t\t\t\tOS.PMFlattenPrintSettings(printSettings, flatSettings);", "+\t\t\t\t\tint[] flatFormat = new int[1];", "+\t\t\t\t\tOS.PMFlattenPageFormat(pageFormat, flatFormat);", "+\t\t\t\t\tint settingsLength = OS.GetHandleSize (flatSettings[0]);", "+\t\t\t\t\tint formatLength = OS.GetHandleSize (flatFormat[0]);", "+\t\t\t\t\tbyte[] otherData = data.otherData = new byte[settingsLength + formatLength + 8];", "+\t\t\t\t\tint offset = 0;", "+\t\t\t\t\toffset = Printer.packData(flatSettings[0], otherData, offset);", "+\t\t\t\t\toffset = Printer.packData(flatFormat[0], otherData, offset);", "+\t\t\t\t\tOS.DisposeHandle(flatSettings[0]);", "+\t\t\t\t\tOS.DisposeHandle(flatFormat[0]);", "+\t\t\t\t\t", "+\t\t\t\t\tscope = data.scope;", "+\t\t\t\t\tstartPage = data.startPage;", "+\t\t\t\t\tendPage = data.endPage;", "+\t\t\t\t\tprintToFile = data.printToFile;", "+\t\t\t\t\treturn data;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "11b30ccb89075cd70ee4b531d6ffe64b", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Printing/carbon/org/eclipse/swt/printing/PrintDialog.java", "commitBeforeChange": "8b58c269ee653fc8374b5b45a0e6d529e6a1ef82", "commitAfterChange": "f697c2f3c6cb12d162d7452013f38ec22841b4b0", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": " public PrinterData open()", "signatureAfterChange": " public PrinterData open()", "diff": ["-\t/* Return the first printer in the list */", "-\tPrinterData[] printers = Printer.getPrinterList();", "-\tif (printers.length > 0) return printers[0];", "+\tint[] buffer = new int[1];", "+\tif (OS.PMCreateSession(buffer) == OS.noErr) {", "+\t\tint printSession = buffer[0];", "+\t\tif (OS.PMCreatePrintSettings(buffer) == OS.noErr) {", "+\t\t\tint printSettings = buffer[0];", "+\t\t\tOS.PMSessionDefaultPrintSettings(printSession, printSettings);", "+\t\t\tif (OS.PMCreatePageFormat(buffer) == OS.noErr) {", "+\t\t\t\tint pageFormat = buffer[0];", "+\t\t\t\tOS.PMSessionDefaultPageFormat(printSession, pageFormat);", "+\t\t\t\tOS.PMSessionSetDestination(printSession, printSettings, (short) (printToFile ? OS.kPMDestinationFile : OS.kPMDestinationPrinter), 0, 0);", "+\t\t\t\tif (scope == PrinterData.PAGE_RANGE) {", "+\t\t\t\t\tOS.PMSetFirstPage(printSettings, startPage, false);", "+\t\t\t\t\tOS.PMSetLastPage(printSettings, endPage, false);", "+\t\t\t\t\tOS.PMSetPageRange(printSettings, startPage, endPage);", "+\t\t\t\t} else {", "+\t\t\t\t\tOS.PMSetPageRange(printSettings, 1, OS.kPMPrintAllPages);", "+\t\t\t\t}", "+\t\t\t\tboolean[] accepted = new boolean [1];", "+\t\t\t\tOS.PMSessionPageSetupDialog(printSession, pageFormat, accepted);\t", "+\t\t\t\tif (accepted[0]) {\t\t", "+\t\t\t\t\tOS.PMSessionPrintDialog(printSession, printSettings, pageFormat, accepted);", "+\t\t\t\t\tif (accepted[0]) {", "+\t\t\t\t\t\tString name = Printer.getCurrentPrinterName(printSession);", "+\t\t\t\t\t\tPrinterData data = new PrinterData(Printer.DRIVER, name);", "+\t\t\t\t\t\tshort[] destType = new short[1];", "+\t\t\t\t\t\tOS.PMSessionGetDestinationType(printSession, printSettings, destType);", "+\t\t\t\t\t\tif (destType [0] == OS.kPMDestinationFile) {", "+\t\t\t\t\t\t\tdata.printToFile = true;", "+\t\t\t\t\t\t\tOS.PMSessionCopyDestinationLocation(printSession, printSettings, buffer);", "+\t\t\t\t\t\t\tint fileName = OS.CFURLCopyFileSystemPath(buffer[0],OS.kCFURLPOSIXPathStyle);", "+\t\t\t\t\t\t\tOS.CFRelease(buffer[0]);", "+\t\t\t\t\t\t\tdata.fileName = Printer.getString(fileName);", "+\t\t\t\t\t\t\tOS.CFRelease(fileName);", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tOS.PMGetCopies(printSettings, buffer);", "+\t\t\t\t\t\tdata.copyCount = buffer[0];\t\t\t\t\t\t", "+\t\t\t\t\t\tOS.PMGetFirstPage(printSettings, buffer);", "+\t\t\t\t\t\tdata.startPage = buffer[0];", "+\t\t\t\t\t\tOS.PMGetLastPage(printSettings, buffer);", "+\t\t\t\t\t\tdata.endPage = buffer[0];", "+\t\t\t\t\t\tOS.PMGetPageRange(printSettings, null, buffer);", "+\t\t\t\t\t\tif (data.startPage == 1 && data.endPage == OS.kPMPrintAllPages) {", "+\t\t\t\t\t\t\tdata.scope = PrinterData.ALL_PAGES;", "+\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\tdata.scope = PrinterData.PAGE_RANGE;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tboolean[] collate = new boolean[1];", "+\t\t\t\t\t\tOS.PMGetCollate(printSettings, collate);", "+\t\t\t\t\t\tdata.collate = collate[0];", "+\t\t\t\t\t\t", "+\t\t\t\t\t\t/* Serialize settings */", "+\t\t\t\t\t\tint[] flatSettings = new int[1];", "+\t\t\t\t\t\tOS.PMFlattenPrintSettings(printSettings, flatSettings);", "+\t\t\t\t\t\tint[] flatFormat = new int[1];", "+\t\t\t\t\t\tOS.PMFlattenPageFormat(pageFormat, flatFormat);", "+\t\t\t\t\t\tint settingsLength = OS.GetHandleSize (flatSettings[0]);", "+\t\t\t\t\t\tint formatLength = OS.GetHandleSize (flatFormat[0]);", "+\t\t\t\t\t\tbyte[] otherData = data.otherData = new byte[settingsLength + formatLength + 8];", "+\t\t\t\t\t\tint offset = 0;", "+\t\t\t\t\t\toffset = Printer.packData(flatSettings[0], otherData, offset);", "+\t\t\t\t\t\toffset = Printer.packData(flatFormat[0], otherData, offset);", "+\t\t\t\t\t\tOS.DisposeHandle(flatSettings[0]);", "+\t\t\t\t\t\tOS.DisposeHandle(flatFormat[0]);", "+\t\t\t\t\t\t", "+\t\t\t\t\t\tscope = data.scope;", "+\t\t\t\t\t\tstartPage = data.startPage;", "+\t\t\t\t\t\tendPage = data.endPage;", "+\t\t\t\t\t\tprintToFile = data.printToFile;", "+\t\t\t\t\t\treturn data;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t\tOS.PMRelease(pageFormat);", "+\t\t\t}", "+\t\t\tOS.PMRelease(printSettings);", "+\t\t}", "+\t\tOS.PMRelease(printSession);", "+\t}"]}], "num": 18445}
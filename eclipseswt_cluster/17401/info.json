{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "587cfaf3ff364c8a4a4e0f40c153b7e9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "342583d4f8134c657f5b6b225f2f1db5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "e71979ddce40601be5242cafb3047257ce4832b4", "commitAfterChange": "9f77d34da8ea742407b09f5a6eb0074cca334552", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["-\t\ttry {", "-\t\t\tLibrary.loadLibrary (\"swt-xpcominit\"); //$NON-NLS-1$", "-\t\t\tinitLoaded = true;", "-\t\t} catch (UnsatisfiedLinkError e) {", "+\t\tString mozillaPath = System.getProperty (XULRUNNER_PATH);", "+\t\tboolean isXULRunner = false;", "+\t\tif (mozillaPath == null) {", "-\t\t\t\t/* ", "-\t\t\t\t * The initial loadLibrary attempt may have failed as a result of the user's", "-\t\t\t\t * system not having libstdc++.so.6 installed, so try to load the alternate", "-\t\t\t\t * swt xpcominit library that depends on libswtc++.so.5 instead.", "-\t\t\t\t */", "-\t\t\t\tLibrary.loadLibrary (\"swt-xpcominit-gcc3\"); //$NON-NLS-1$", "+\t\t\t\tLibrary.loadLibrary (\"swt-xpcominit\"); //$NON-NLS-1$", "-\t\t\t} catch (UnsatisfiedLinkError ex) {", "-\t\t\t\t/*", "-\t\t\t\t * If this library still failed to load then do not attempt to detect a", "-\t\t\t\t * xulrunner to use.  The Browser may still be usable if MOZILLA_FIVE_HOME", "-\t\t\t\t * points at a GRE. ", "+\t\t\t} catch (UnsatisfiedLinkError e) {", "+\t\t\t\ttry {", "+\t\t\t\t\t/* ", "+\t\t\t\t\t * The initial loadLibrary attempt may have failed as a result of the user's", "+\t\t\t\t\t * system not having libstdc++.so.6 installed, so try to load the alternate", "+\t\t\t\t\t * swt xpcominit library that depends on libswtc++.so.5 instead.", "+\t\t\t\t\t */", "+\t\t\t\t\tLibrary.loadLibrary (\"swt-xpcominit-gcc3\"); //$NON-NLS-1$", "+\t\t\t\t\tinitLoaded = true;", "+\t\t\t\t} catch (UnsatisfiedLinkError ex) {", "+\t\t\t\t\t/*", "+\t\t\t\t\t * If this library still failed to load then do not attempt to detect a", "+\t\t\t\t\t * xulrunner to use.  The Browser may still be usable if MOZILLA_FIVE_HOME", "+\t\t\t\t\t * points at a GRE. ", "+\t\t\t\t\t */", "+\t\t\t\t}", "+\t\t\t}", "+\t\t} else {", "+\t\t\tmozillaPath += SEPARATOR_OS + delegate.getLibraryName ();", "+\t\t\tif (System.getProperty (XULRUNNER_INITIALIZED) != null) {", "+\t\t\t\t/* ", "+\t\t\t\t * Another browser has already initialized xulrunner in this process,", "+\t\t\t\t * so just bind to it instead of trying to initialize a new one.", "+\t\t\t\tinitialized = true;", "+\t\t\t\tisXULRunner = true;", "-\t\t", "-\t\tboolean isXULRunner = false;", "-\t\tString mozillaPath = null;", "+", "-\t\tint /*long*/[] retVal = new int /*long*/[1];", "-\t\tnsEmbedString pathString = new nsEmbedString (mozillaPath);", "-\t\tint rc = XPCOM.NS_NewLocalFile (pathString.getAddress (), true, retVal);", "-\t\tpathString.dispose ();", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (rc);", "-\t\t}", "-\t\tif (retVal[0] == 0) {", "-\t\t\tbrowser.dispose ();", "-\t\t\terror (XPCOM.NS_ERROR_NULL_POINTER);", "-\t\t}", "+\t\tif (!initialized) {", "+\t\t\tint /*long*/[] retVal = new int /*long*/[1];", "+\t\t\tnsEmbedString pathString = new nsEmbedString (mozillaPath);", "+\t\t\tint rc = XPCOM.NS_NewLocalFile (pathString.getAddress (), true, retVal);", "+\t\t\tpathString.dispose ();", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (rc);", "+\t\t\t}", "+\t\t\tif (retVal[0] == 0) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\terror (XPCOM.NS_ERROR_NULL_POINTER);", "+\t\t\t}", "-\t\tnsIFile localFile = new nsILocalFile (retVal[0]);", "-\t\trc = XPCOM.NS_InitXPCOM2 (0, localFile.getAddress(), 0);", "-\t\tlocalFile.Release ();", "-\t\tif (rc != XPCOM.NS_OK) {", "-\t\t\tbrowser.dispose ();", "-\t\t\tSWT.error (SWT.ERROR_NO_HANDLES, null, \" [MOZILLA_FIVE_HOME may not point at an embeddable GRE] [NS_InitEmbedding \" + mozillaPath + \" error \" + rc + \"]\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\tnsIFile localFile = new nsILocalFile (retVal[0]);", "+\t\t\trc = XPCOM.NS_InitXPCOM2 (0, localFile.getAddress(), 0);", "+\t\t\tlocalFile.Release ();", "+\t\t\tif (rc != XPCOM.NS_OK) {", "+\t\t\t\tbrowser.dispose ();", "+\t\t\t\tSWT.error (SWT.ERROR_NO_HANDLES, null, \" [MOZILLA_FIVE_HOME may not point at an embeddable GRE] [NS_InitEmbedding \" + mozillaPath + \" error \" + rc + \"]\"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$", "+\t\t\t}", "+\t\t\tSystem.setProperty (XULRUNNER_PATH, mozillaPath); //$NON-NLS-1$", "+\t\t\tSystem.setProperty (XULRUNNER_INITIALIZED, \"true\"); //$NON-NLS-1$", "-\t\trc = XPCOM.NS_GetComponentManager (result);", "+\t\tint rc = XPCOM.NS_GetComponentManager (result);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e47aac44695cce90400134a3e7cb4885", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "12de0f7ac678212aa29b6056881b6834dba6f8ac", "commitAfterChange": "dcf63b805bd9f73d657e22a2eb20df591ffc4ab1", "methodNumberBeforeChange": 1, "methodNumberAfterChange": 1, "signatureBeforeChange": "  public void create (Composite parent, int style)", "signatureAfterChange": "  public void create (Composite parent, int style)", "diff": ["+", "+\t\tString greInitialized = System.getProperty (GRE_INITIALIZED); ", "+\t\tif (\"true\".equals (greInitialized)) { //$NON-NLS-1$", "+\t\t\t/* ", "+\t\t\t * Another browser has already initialized xulrunner in this process,", "+\t\t\t * so just bind to it instead of trying to initialize a new one.", "+\t\t\t */", "+\t\t\tInitialized = true;", "+\t\t}", "-\t\t\tString xulrunnerInitialized = System.getProperty (XULRUNNER_INITIALIZED); ", "-\t\t\tif (\"true\".equals (xulrunnerInitialized)) {", "-\t\t\t\t/* ", "-\t\t\t\t * Another browser has already initialized xulrunner in this process,", "-\t\t\t\t * so just bind to it instead of trying to initialize a new one.", "-\t\t\t\t */", "-\t\t\t\tInitialized = true;", "-\t\t\t}", "-\t\t\t\t\t\tXPCOMInit.XPCOMGlueShutdown ();", "+\t\t\t\t\t\tGlueStartupCount++;", "+\t\t\tGlueStartupCount++;", "-\t\t\tSystem.setProperty (XULRUNNER_PATH, mozillaPath);", "-\t\t\tSystem.setProperty (XULRUNNER_INITIALIZED, \"true\"); //$NON-NLS-1$", "+\t\t\tSystem.setProperty (GRE_INITIALIZED, \"true\"); //$NON-NLS-1$", "+\t\t\tif (IsXULRunner) {", "+\t\t\t\tSystem.setProperty (XULRUNNER_PATH, mozillaPath);", "+\t\t\t}", "-", "-\t\t\tdisplay.addListener (SWT.Dispose, new Listener () {", "-\t\t\t\tpublic void handleEvent (Event event) {", "-\t\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-", "-\t\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "-\t\t\t\t\tresult[0] = 0;\t\t", "-\t\t\t\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "-\t\t\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "-\t\t\t\t\tserviceManager.Release ();", "-", "-\t\t\t\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_BEFORE_CHANGE, true);", "-\t\t\t\t\tint length = SHUTDOWN_PERSIST.length ();", "-\t\t\t\t\tchar[] chars = new char [length + 1];", "-\t\t\t\t\tSHUTDOWN_PERSIST.getChars (0, length, chars, 0);", "-\t\t\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tobserverService.Release ();", "-\t\t\t\t}", "-\t\t\t});", "+\tif (display.getData (DISPOSE_LISTENER_HOOKED) == null) {", "+\t\tdisplay.setData (DISPOSE_LISTENER_HOOKED, DISPOSE_LISTENER_HOOKED);", "+\t\tdisplay.addListener (SWT.Dispose, new Listener () {", "+\t\t\tpublic void handleEvent (Event event) {", "+\t\t\t\tif (BrowserCount > 0) return; /* another display is still active */", "+", "+\t\t\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\t\t\tint rc = XPCOM.NS_GetServiceManager (result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+", "+\t\t\t\tnsIServiceManager serviceManager = new nsIServiceManager (result[0]);", "+\t\t\t\tresult[0] = 0;\t\t", "+\t\t\t\tbyte[] buffer = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_OBSERVER_CONTRACTID, true);", "+\t\t\t\trc = serviceManager.GetServiceByContractID (buffer, nsIObserverService.NS_IOBSERVERSERVICE_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_NOINTERFACE);", "+\t\t\t\tserviceManager.Release ();", "+", "+\t\t\t\tnsIObserverService observerService = new nsIObserverService (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tbuffer = MozillaDelegate.wcsToMbcs (null, PROFILE_BEFORE_CHANGE, true);", "+\t\t\t\tint length = SHUTDOWN_PERSIST.length ();", "+\t\t\t\tchar[] chars = new char [length + 1];", "+\t\t\t\tSHUTDOWN_PERSIST.getChars (0, length, chars, 0);", "+\t\t\t\trc = observerService.NotifyObservers (0, buffer, chars);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tobserverService.Release ();", "+", "+\t\t\t\tif (GlueStartupCount > 0) {", "+\t\t\t\t\tXPCOM.XPCOMGlueShutdown ();", "+\t\t\t\t\tif (GlueStartupCount > 1) {", "+\t\t\t\t\t\tXPCOMInit.XPCOMGlueShutdown ();", "+\t\t\t\t\t}", "+\t\t\t\t\tGlueStartupCount = 0;", "+\t\t\t\t}", "+\t\t\t\tInitialized = false;", "+\t\t\t}", "+\t\t});", "+\t}", "+"]}], "num": 17401}
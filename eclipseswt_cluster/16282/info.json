{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "7c4d17b372fadd3564519c4819607100", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "099c4b97dd3ca79435d18e313eaa741f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/common/org/eclipse/swt/widgets/EventTable.java", "commitBeforeChange": "7a5eebc09215b86b51b8ee6f40494ee145b8cad0", "commitAfterChange": "31ecf4c7627f293bfe8af2461ca0976f71d430cb", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  public void sendEvent (Event event)", "signatureAfterChange": "  public void sendEvent (Event event)", "diff": ["-\tlevel++;", "+\tlevel += level >= 0 ? 1 : -1;", "-\t\t--level;", "+\t\tboolean compact = level < 0;", "+\t\tlevel -= level >= 0 ? 1 : -1;", "+\t\tif (compact && level == 0) {", "+\t\t\tint index = 0;", "+\t\t\tfor (int i=0; i<types.length; i++) {", "+\t\t\t\tif (types [i] != 0) {", "+\t\t\t\t\ttypes [index] = types [i];", "+\t\t\t\t\tlisteners [index] = listeners [i];", "+\t\t\t\t\tindex++;", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tfor (int i=index; i<types.length; i++) {", "+\t\t\t\ttypes [i] = 0;", "+\t\t\t\tlisteners [i] = null;", "+\t\t\t}", "+\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "aa71a521a6b73716387faaeff2c7cc23", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Text.java", "commitBeforeChange": "b4dfa25ce1ddde6037308a5f9e2105a81151f900", "commitAfterChange": "474feb1e6562f3cbf9ab0a3a2fd5ce8b1c2b4d27", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 8, "signatureBeforeChange": "  void applySegments ()", "signatureAfterChange": "  void applySegments ()", "diff": ["+\tchar [] segmentsChars = event.segmentsChars;", "+\tchar [] segmentsCharsCrLf = segmentsChars == null ? null : Display.withCrLf(segmentsChars);", "+\tif (segmentsChars != segmentsCharsCrLf) {", "+\t\tint [] segmentsCrLf = new int [nSegments + Math.min (nSegments, segmentsCharsCrLf.length - segmentsChars.length)];", "+\t\tfor (int i = 0, c = 0; i < segmentsChars.length && i < nSegments; i++) {", "+\t\t\tif (segmentsChars [i] == '\\n' && segmentsCharsCrLf [i + c] == '\\r') {", "+\t\t\t\tsegmentsCrLf [i + c++] = segments [i];", "+\t\t\t}", "+\t\t\tsegmentsCrLf [i + c] = segments [i];", "+\t\t}", "+\t\tsegments = segmentsCrLf;", "+\t\tnSegments = segments.length;", "+\t\tsegmentsChars = segmentsCharsCrLf;", "+\t}", "+", "-\tchar [] segmentsChars = event.segmentsChars;"]}], "num": 16282}
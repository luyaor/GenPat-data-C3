{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "45530295bd8730d6539824f95f5ac234", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "9e1378c510cfb6fe7d59ac21b5927be2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/Device.java", "commitBeforeChange": "c738133a2fdbe3d60fd9dfabbfd9e737153e1aa5", "commitAfterChange": "c9992cb98fd2a837c866ff6f32642b9e42588c7e", "methodNumberBeforeChange": 12, "methodNumberAfterChange": 12, "signatureBeforeChange": " public FontData[] getFontList (String faceName, boolean scalable)", "signatureAfterChange": " public FontData[] getFontList (String faceName, boolean scalable)", "diff": ["-\t", "-\t/* Temporary code.", "-\t * For now, we know that on Pango at least three font families are guaranteed", "-\t * to be present: Sans, Serif, and Monspace.", "-\t */", "-\tif (scalable) return getScalableFontList(faceName);", "-\treturn getNonScalableFontList(faceName);", "-}", "+", "+\t//FIXME - check scalable flag", "+\tint[] family = new int[1];", "+\tint[] face = new int[1];", "+\tint[] families = new int[1];", "+\tint[] n_families = new int[1];", "+\tint[] faces = new int[1];", "+\tint[] n_faces = new int[1];", "+\tint context = OS.gdk_pango_context_get();", "+\tOS.pango_context_list_families(context, families, n_families);", "+\tint nFds = 0;", "+\tFontData[] fds = new FontData[faceName != null ? 4 : n_families[0]];", "+\tfor (int i=0; i<n_families[0]; i++) {", "+\t\tOS.memmove(family, families[0] + i * 4, 4);", "+\t\tOS.pango_font_family_list_faces(family[0], faces, n_faces);", "+\t\tfor (int j=0; j<n_faces[0]; j++) {", "+\t\t\tOS.memmove(face, faces[0] + j * 4, 4);", "+\t\t\tint fontDesc = OS.pango_font_face_describe(face[0]);", "+\t\t\tFont font = Font.gtk_new(this, fontDesc);", "+\t\t\tFontData data = font.getFontData()[0];", "+\t\t\tif (faceName == null || Compatibility.equalsIgnoreCase(faceName, data.name)) {", "+\t\t\t\tif (nFds == fds.length) {", "+\t\t\t\t\tFontData[] newFds = new FontData[fds.length + n_families[0]];", "+\t\t\t\t\tSystem.arraycopy(fds, 0, newFds, 0, nFds);", "+\t\t\t\t\tfds = newFds;", "+\t\t\t\t}", "+\t\t\t\tfds[nFds++] = data;", "+\t\t\t}", "+\t\t\tOS.pango_font_description_free(fontDesc);", "+\t\t}", "+\t\tOS.g_free(faces[0]);", "+\t}", "+\tOS.g_free(families[0]);", "+\tOS.g_object_unref(context);", "+", "+\tif (nFds == fds.length) return fds;", "+\tFontData[] result = new FontData[nFds];", "+\tSystem.arraycopy(fds, 0, result, 0, nFds);", "+\treturn result;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "597cccb292cc33ea4d2e0c936b825ac3", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "fc62fa389f9358a82d98c59fbeba910f7ca8c593", "commitAfterChange": "df18f6c76e1c63f3858dc94fb10d9c5c530eb389", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public void setMaximized (boolean maximized)", "signatureAfterChange": " public void setMaximized (boolean maximized)", "diff": ["-\tif (!OS.XtIsRealized (handle)) realizeWidget();", "+\tif (!OS.XtIsRealized (handle)) realizeWidget ();", "-\tif (xWindow != 0) {", "-\t\tint property = OS.XInternAtom (xDisplay, _NET_WM_STATE, true);", "-\t\tint maximizedHorz = OS.XInternAtom (xDisplay, _NET_WM_STATE_MAXIMIZED_HORZ, true);", "-\t\tint maximizedVert = OS.XInternAtom (xDisplay, _NET_WM_STATE_MAXIMIZED_VERT, true);", "-\t\tint[] atoms = new int[]{maximizedHorz, maximizedVert};", "-\t\tOS.XChangeProperty (xDisplay, xWindow, property, OS.XA_ATOM, 32, OS.PropModeReplace, atoms, atoms.length);", "+\tif (xWindow == 0) return;", "+\tint property = OS.XInternAtom (xDisplay, _NET_WM_STATE, true);", "+\tif (property == 0) return;", "+\tint hMaxAtom = OS.XInternAtom (xDisplay, _NET_WM_STATE_MAXIMIZED_HORZ, true);", "+\tint vMaxAtom = OS.XInternAtom (xDisplay, _NET_WM_STATE_MAXIMIZED_VERT, true);", "+\tif (hMaxAtom == 0 || vMaxAtom == 0) return;", "+\tint[] type = new int[1], format = new int[1], nitems = new int[1], bytes_after = new int[1], atomsPtr = new int[1];", "+\tOS.XGetWindowProperty (xDisplay, xWindow, property, 0, Integer.MAX_VALUE, false, OS.XA_ATOM, type, format, nitems, bytes_after, atomsPtr);", "+\tif (type [0] == OS.None) return;", "+\tint[] atoms = new int [nitems [0]];", "+\tOS.memmove (atoms, atomsPtr [0], nitems [0] * 4);", "+\t", "+\tif (maximized) {", "+\t\tboolean hasHmax = false;", "+\t\tboolean hasVmax = false;", "+\t\tfor (int i = 0; i < nitems [0]; i++) {", "+\t\t\tint atom = atoms [i];", "+\t\t\tif (atom == hMaxAtom) hasHmax = true;", "+\t\t\tif (atom == vMaxAtom) hasVmax = true;", "+\t\t}", "+\t\tif (!hasHmax) {", "+\t\t\tint[] temp = new int [atoms.length + 1];", "+\t\t\tSystem.arraycopy (atoms, 0, temp, 0, atoms.length);", "+\t\t\ttemp [atoms.length] = hMaxAtom;", "+\t\t\tatoms = temp;", "+\t\t}", "+\t\tif (!hasVmax) {", "+\t\t\tint[] temp = new int [atoms.length + 1];", "+\t\t\tSystem.arraycopy (atoms, 0, temp, 0, atoms.length);", "+\t\t\ttemp [atoms.length] = vMaxAtom;", "+\t\t\tatoms = temp;", "+\t\t}", "+\t} else {", "+\t\tint[] temp = new int [nitems [0]];", "+\t\tint index = 0;", "+\t\tfor (int i = 0; i < nitems [0]; i++) {", "+\t\t\tint atom = atoms [i];", "+\t\t\tif (atom != hMaxAtom && atom != vMaxAtom) {", "+\t\t\t\ttemp [index++] = atom;", "+\t\t\t}", "+\t\t}", "+\t\tatoms = new int [index];", "+\t\tSystem.arraycopy (temp, 0, atoms, 0, index);", "+", "+\tOS.XChangeProperty (xDisplay, xWindow, property, OS.XA_ATOM, 32, OS.PropModeReplace, atoms, atoms.length);"]}], "num": 42571}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "621598c7350b2b1aa8b95d764dd2bb86", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2925052e122ac87e7567410fe214c2c6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/MenuItem.java", "commitBeforeChange": "4837f43ad626833e44d944849690be12f17d2c70", "commitAfterChange": "d33484b9dbd12f2a7ff228ba91793eb6670c1b90", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 35, "signatureBeforeChange": " public void setMenu (Menu menu)", "signatureAfterChange": " public void setMenu (Menu menu)", "diff": ["-\tparent.destroyAccelerators ();\r", "+\t\r", "+\t/*", "+\t* Bug in Motif.  When XmNsubMenuId is set and the", "+\t* previous menu has accelerators, the time it takes", "+\t* to add any new accelerators increases exponentially.", "+\t* The fix is to remove the accelerators from the previous", "+\t* menu before setting the new one.", "+\t*/\r", "+\tboolean isActive = isAccelActive ();\r", "+\tif (isActive) removeAccelerators ();", "+\r", "-\tOS.XtSetValues (handle, argList, argList.length / 2);\r", "+\tOS.XtSetValues (handle, argList, argList.length / 2);", "+\t\r", "+\tif (isActive) addAccelerators ();\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "6c0dce630e0eb8467784f03d19e0adc8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "082681b66332177ea03672e4a3002a6e9aca5dfb", "commitAfterChange": "d29e369d5010d75bbca2f5d0e5a06752fb22a13d", "methodNumberBeforeChange": 167, "methodNumberAfterChange": 168, "signatureBeforeChange": "  int OnStateChange (long aWebProgress, long aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (long aWebProgress, long aRequest, int aStateFlags, int aStatus)", "diff": ["-\t* Feature of Mozilla.  When a redirect occurs to a site with an invalid", "-\t* certificate, no STATE_IS_DOCUMENT state transitions are received for the", "-\t* new location, and an immediate attempt is made to show the invalid", "-\t* certificate error.  However our invalid certificate handler must know", "-\t* the site with the invalid certificate, not the site that redirected to", "-\t* it.  The only opportunity to get this site before our invalid certificate", "-\t* handler is invoked is in the subsequent STATE_START | STATE_IS_REQUEST", "-\t* transition.  When this comes, if the request's name appears to be a", "-\t* url then take this to be the new site, in case our invalid certificate", "-\t* handler is about to be invoked.", "+\t* Feature of Mozilla.  When a redirect occurs, no STATE_IS_DOCUMENT state", "+\t* transitions or OnStartURIOpen() callbacks are received for the new", "+\t* location.  As a result, lastNavigateURL is left with the value of the old", "+\t* url (that was redirected from), and the client does not get an opportunity", "+\t* to veto the redirect.  The only opportunity to work around these omissions", "+\t* is in the subsequent STATE_START | STATE_IS_REQUEST state transition.", "+\t* When this comes, if the request's name appears to be a url then take it to", "+\t* be the new site (update lastNavigateURL), and send a \"changing\" LocationEvent", "+\t* to allow the redirect to be vetoed.", "-\t\t\tif (value.indexOf (\":/\") != -1) lastNavigateURL = value;\t//$NON-NLS-1$", "+\t\t\tif (value.indexOf (\":/\") != -1) { //$NON-NLS-1$", "+\t\t\t\tboolean doit = sendChangingEvent (value);", "+\t\t\t\tif (doit) {", "+\t\t\t\t\tlastNavigateURL = value;", "+\t\t\t\t} else {", "+\t\t\t\t\tstop ();", "+\t\t\t\t}", "+\t\t\t}"]}], "num": 9514}
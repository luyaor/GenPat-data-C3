{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "d92ee97282594affd9c624f777395a4b", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b13dc3d609ab9c92d9c00d905ee5f16e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "fb0ed33d9069b9fd0107f7de2f81037302ea46d7", "commitAfterChange": "84fc2c9805b2d2c52f9b3b56022cf3cd83acd074", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 38, "signatureBeforeChange": "\r \r boolean setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "signatureAfterChange": "\r \r boolean setBounds (int x, int y, int width, int height, boolean move, boolean resize)", "diff": ["-\tint [] args = {OS.Pt_ARG_WINDOW_RENDER_FLAGS, 0, 0};\r", "-\tOS.PtGetResources (shellHandle, args.length / 3, args);\r", "-\tint flags = args [1];\r", "-\tint [] left = new int [1], top = new int [1];\r", "-\tint [] right = new int [1], bottom = new int [1];\r", "-\tOS.PtFrameSize (flags, 0, left, top, right, bottom);\r", "-\tPhArea_t area = new PhArea_t ();\r", "-\tOS.PtWidgetArea (shellHandle, area);\r", "-\tint frameWidth = area.size_w + left [0] + right [0];\r", "-\tint frameHeight = area.size_h + top [0] + bottom [0];\r", "-\tif (!move) {\r", "-\t\tx = area.pos_x;\r", "-\t\ty = area.pos_y;\r", "+\t\r", "+\tboolean caretVisible = caret != null && caret.isVisible ();\r", "+\tif (caretVisible) caret.hideCaret ();\r", "+\t\r", "+\tif (resize) {\r", "+\t\t/* Get the trimings */\r", "+\t\tint [] args = {OS.Pt_ARG_WINDOW_RENDER_FLAGS, 0, 0};\r", "+\t\tOS.PtGetResources (shellHandle, args.length / 3, args);\r", "+\t\tint flags = args [1];\r", "+\t\tint [] left = new int [1], top = new int [1];\r", "+\t\tint [] right = new int [1], bottom = new int [1];\r", "+\t\tOS.PtFrameSize (flags, 0, left, top, right, bottom);\r", "+\t\twidth = Math.max (width - left [0] - right [0], 0);\r", "+\t\theight = Math.max (height - top [0] - bottom [0], 0);\r", "-\tif (!resize) {\r", "-\t\twidth = frameWidth;\r", "-\t\theight = frameHeight;\r", "+\t\r", "+\tPhArea_t oldArea = new PhArea_t ();\r", "+\tOS.PtWidgetArea (shellHandle, oldArea);\r", "+\t\r", "+\tif (move && resize) {\r", "+\t\tPhArea_t area = new PhArea_t ();\r", "+\t\tarea.pos_x = (short) x;\r", "+\t\tarea.pos_y = (short) y;\r", "+\t\tarea.size_w = (short) width;\r", "+\t\tarea.size_h = (short) height;\r", "+\t\tint ptr = OS.malloc (PhArea_t.sizeof);\r", "+\t\tOS.memmove (ptr, area, PhArea_t.sizeof);\r", "+\t\tOS.PtSetResource (shellHandle, OS.Pt_ARG_AREA, ptr, 0);\r", "+\t\tOS.free (ptr);\r", "+\t} else {\r", "+\t\tif (move) {\r", "+\t\t\tPhPoint_t pt = new PhPoint_t ();\r", "+\t\t\tpt.x = (short) x;\r", "+\t\t\tpt.y = (short) y;\r", "+\t\t\tint ptr = OS.malloc (PhPoint_t.sizeof);\r", "+\t\t\tOS.memmove (ptr, pt, PhPoint_t.sizeof);\r", "+\t\t\tOS.PtSetResource (shellHandle, OS.Pt_ARG_POS, ptr, 0);\r", "+\t\t\tOS.free (ptr);\r", "+\t\t} else if (resize) {\r", "+\t\t\tint [] args = {\r", "+\t\t\t\tOS.Pt_ARG_WIDTH, width, 0,\r", "+\t\t\t\tOS.Pt_ARG_HEIGHT, height, 0,\r", "+\t\t\t};\r", "+\t\t\tOS.PtSetResources (shellHandle, args.length / 3, args);\r", "+\t\t}\r", "-\tboolean sameOrigin = x == area.pos_x && y == area.pos_y;\r", "-\tboolean sameExtent = width == frameWidth && height == frameHeight;\r", "-\tarea.pos_x = (short) x;\r", "-\tarea.pos_y = (short) y;\r", "-\tarea.size_w = (short) (Math.max (width - left [0] - right [0], 0));\r", "-\tarea.size_h = (short) (Math.max (height - top [0] - bottom [0], 0));\r", "-\tint ptr = OS.malloc (PhArea_t.sizeof);\r", "-\tOS.memmove (ptr, area, PhArea_t.sizeof);\r", "-\tOS.PtSetResource (shellHandle, OS.Pt_ARG_AREA, ptr, 0);\r", "-\tOS.free (ptr);\r", "+\r", "+\t\tPhArea_t newArea = new PhArea_t ();\r", "+\t\tOS.PtWidgetArea (shellHandle, newArea);\r", "+\t\tboolean sameOrigin = oldArea.pos_x == newArea.pos_x && oldArea.pos_y == newArea.pos_y;\r", "+\t\tboolean sameExtent = oldArea.size_w == newArea.size_w && oldArea.size_h == newArea.size_h;\r", "-\t\t\tresizeBounds (width, height);\r", "+\t\t\tresizeBounds (newArea.size_w, newArea.size_h);\r", "+\t\t\tif (layout != null) layout (false);\r", "-\treturn !sameOrigin || !sameExtent;\r", "-}\r", "+\t\r", "+\tif (caretVisible) caret.showCaret ();\r", "+\t\r", "+\treturn move || resize;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "411bc97890ded28157dbafef332d51b7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 42, "methodNumberAfterChange": 49, "signatureBeforeChange": " int processMouseDown (MacMouseEvent mmEvent)", "signatureAfterChange": "  void updateText ()", "diff": ["-}", "-int processMouseDown (MacMouseEvent mmEvent) {", "-\tDisplay display = getDisplay ();", "-//\tShell shell = parent.getShell ();", "-\tdisplay.hideToolTip ();", "-\t", "-\t/* AW", "-\tXButtonEvent xEvent = new XButtonEvent ();", "-\tOS.memmove (xEvent, callData, XButtonEvent.sizeof);", "-\t*/", "-\tif (mmEvent.getButton() == 1) {", "-\t\tif (!set && (style & SWT.RADIO) == 0) {", "-\t\t\tsetDrawPressed (!set);", "-\t\t}", "-\t}", "-\t", "-\t/*", "-\t* Forward the mouse event to the parent.", "-\t* This is necessary so that mouse listeners", "-\t* in the parent will be called, despite the", "-\t* fact that the event did not really occur", "-\t* in X in the parent.  This is done to be", "-\t* compatible with Windows.", "-\t*/", "-\t/* AW", "-\tint [] argList = {OS.XmNx, 0, OS.XmNy, 0};", "-\tOS.XtGetValues (handle, argList, argList.length / 2);", "-\txEvent.window = OS.XtWindow (parent.handle);", "-\txEvent.x += argList [1];  xEvent.y += argList [3];", "-\tOS.memmove (callData, xEvent, XButtonEvent.sizeof);", "-\t*/", "-\tparent.processMouseDown (mmEvent);", "-\t/*", "-\t* It is possible that the shell may be", "-\t* disposed at this point.  If this happens", "-\t* don't send the activate and deactivate", "-\t* events.", "-\t*/\t", "-//\tif (!shell.isDisposed()) {", "-//\t\tshell.setActiveControl (parent);", "-//\t}", "-\treturn 0;", "-}", "+", "+void updateText () {", "+\tif (labelCIcon != 0) destroyCIcon (labelCIcon);", "+\tlabelCIcon = 0;", "+\tControlButtonContentInfo inContent = new ControlButtonContentInfo ();", "+\tif (text.length () > 0) {", "+\t\tchar [] buffer = new char [text.length ()];", "+\t\ttext.getChars (0, buffer.length, buffer, 0);", "+\t\tint i=0, j=0;", "+\t\twhile (i < buffer.length) {", "+\t\t\tif ((buffer [j++] = buffer [i++]) == Mnemonic) {", "+\t\t\t\tif (i == buffer.length) {continue;}", "+\t\t\t\tif (buffer [i] == Mnemonic) {i++; continue;}", "+\t\t\t\tj--;", "+\t\t\t}", "+\t\tFont font = parent.getFont ();", "+\t\tGC gc = new GC (parent);", "+\t\tPoint size = gc.stringExtent (text);", "+\t\tgc.dispose ();", "+\t\tDisplay display = getDisplay ();", "+\t\tImage image = new Image (display, size.x, size.y);", "+\t\tgc = new GC (image);", "+\t\tgc.setFont (font);", "+\t\tgc.drawString (text, 0, 0);", "+\t\tgc.dispose ();", "+\t\tImageData data = image.getImageData ();", "+\t\tdata.transparentPixel = 0xFFFFFFFF;", "+\t\timage.dispose ();", "+\t\timage = new Image (display, data, data.getTransparencyMask());", "+\t\tlabelCIcon = createCIcon (image);", "+\t\timage.dispose ();", "+\t\tinContent.contentType = (short) OS.kControlContentCIconHandle;", "+\t\tinContent.iconRef = labelCIcon;", "+\tOS.SetBevelButtonContentInfo (labelHandle, inContent);\t", "+\tredrawWidget (labelHandle);", "+\tPoint size = computeSize ();", "+\tsetSize (size.x, size.y, true);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "917b65ac2878bbf73697a25aeb363c45", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Sash.java", "commitBeforeChange": "abcda6211c0bcc3a908332242b9d1409108c82ba", "commitAfterChange": "04de3fc7ae68f9215fb3d4fcc47ca5754e572bac", "methodNumberBeforeChange": 6, "methodNumberAfterChange": 7, "signatureBeforeChange": "  int processMouseMove (int callData, int arg1, int int2)", "signatureAfterChange": "  int processMouseMove (int callData, int int1, int int2)", "diff": ["+", "+int processMouseMove (int callData, int int1, int int2) {", "+\tsuper.processMouseMove (callData, int1, int2);", "+\tint [] state = new int [1];", "+\tOS.gdk_event_get_state (callData, state);", "+\tif (!dragging || (state [0] & OS.GDK_BUTTON1_MASK) == 0) return 0;", "+\tint x = OS.GTK_WIDGET_X (handle);", "+\tint y = OS.GTK_WIDGET_Y (handle);", "+\tint width = OS.GTK_WIDGET_WIDTH (handle);", "+\tint height = OS.GTK_WIDGET_HEIGHT (handle);", "+\tint border = 0, parentBorder = 0;", "+\tint parentWidth = OS.GTK_WIDGET_WIDTH (parent.handle);", "+\tint parentHeight = OS.GTK_WIDGET_WIDTH (parent.handle);", "+\tdouble[] px = new double [1], py = new double [1];", "+\tOS.gdk_event_get_coords (callData, px, py);", "+\tint newX = lastX, newY = lastY;", "+\tif ((style & SWT.VERTICAL) != 0) {", "+\t\tnewX = Math.min (Math.max (0, (int)px [0] + x - startX - parentBorder), parentWidth - width);", "+\t} else {", "+\t\tnewY = Math.min (Math.max (0, (int)py[0] + y - startY - parentBorder), parentHeight - height);", "+\t}", "+\tif (newX == lastX && newY == lastY) return 0;", "+\tdrawBand (lastX, lastY, width, height);", "+\t/* The event must be sent because its doit flag is used. */", "+\tEvent event = new Event ();", "+\tevent.detail = SWT.DRAG;", "+\tevent.time = OS.gdk_event_get_time (callData);", "+\tevent.x = newX;  event.y = newY;", "+\tevent.width = width;  event.height = height;", "+\t/*", "+\t * It is possible (but unlikely) that client code could have disposed", "+\t * the widget in the selection event.  If this happens end the processing", "+\t * of this message by returning.", "+\t */", "+\tsendEvent (SWT.Selection, event);", "+\tif (isDisposed ()) return 0;", "+\tif (event.doit) {", "+\t\tlastX = event.x;  lastY = event.y;", "+//\t\tOS.XmUpdateDisplay (handle);", "+\t\tdrawBand (lastX, lastY, width, height);", "+\t}", "+\treturn 0;", "+}", "-", "-int processMouseMove (int callData, int arg1, int int2) {", "-\tsuper.processMouseMove (callData, arg1, int2);", "-\tif (!dragging) return 0;", "-\t", "-\t/* Get the coordinates where the event happened, relative to the receiver */", "-\tdouble[] px = new double[1];", "-\tdouble[] py = new double[1];", "-\tOS.gdk_event_get_coords(callData, px, py);", "-\tint x = (int)(px[0]);", "-\tint y = (int)(py[0]);", "-\t", "-\tint width = OS.GTK_WIDGET_WIDTH(handle);", "-\tint height = OS.GTK_WIDGET_HEIGHT(handle);", "-", "-\tif ((style & SWT.VERTICAL) != 0) {", "-\t\t/* Erase the old one */", "-\t\tint oldDrawX = originX + lastX;", "-\t\tdrawBand(oldDrawX, originY, width, height);", "-\t\t/* Draw the new */", "-\t\tint drawX = originX + x;", "-\t\tdrawBand(drawX, originY, width, height);", "-\t\tlastX = x;", "-\t} else {", "-\t\t/* Erase the old one */", "-\t\tint oldDrawY = originY + lastY;", "-\t\tdrawBand(originX, oldDrawY, width, height);", "-\t\t/* Draw the new */", "-\t\tint drawY = originY + y;", "-\t\tdrawBand(originX, drawY, width, height);", "-\t\tlastY = y;", "-\t}", "-\treturn 0;", "-}"]}], "num": 53558}
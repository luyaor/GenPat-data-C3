{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0df0e3561447e317368fbf868f508c7c", "detectedBy": ["AST_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "deaf0c77f6ff1e18151dfbc9e65e4820", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "48512dc20e32e369917d3e1ccfb92109c9724e7e", "commitAfterChange": "1942f64e0b774317e0a8e6ec44902bb736bb7790", "methodNumberBeforeChange": 99, "methodNumberAfterChange": 91, "signatureBeforeChange": " void sendKeyEvent (int type, GdkEventKey gdkEvent)", "signatureAfterChange": "  void sendKeyEvent (int type, int pEventKey)", "diff": ["-void sendKeyEvent (int type, GdkEventKey gdkEvent) {", "-\t/* Look up the keysym and character(s) */", "-\tint size = gdkEvent.length;", "-\tif (gdkEvent.keyval == 0 && size == 0) return;", "-\t/* If there is no composed string input by keypress, only send the keyvalue */ ", "-\tif (size == 0 ) {", "-\t\tEvent event = new Event ();", "-\t\tevent.time = gdkEvent.time;", "-//\t\tevent.character = (char) 0;  //no character sent", "-\t\tevent.keyCode = Display.translateKey (gdkEvent.keyval);", "+void sendKeyEvent (int type, int pEventKey) {", "+\tEvent event = new Event();", "+\tevent.time = OS.gdk_event_get_time(pEventKey);", "+\t", "+\tint size = OS.gdk_event_key_get_length(pEventKey);", "+\tif (size==0) {  /* No composed string - send the keyvalue */", "+\t\tint keyval = OS.gdk_event_key_get_keyval(pEventKey)\t;", "+\t\tif (keyval==0) return;", "+\t\tevent.keyCode = Display.translateKey (keyval);", "-\t\tif ((gdkEvent.state & OS.GDK_MOD1_MASK) != 0) event.stateMask |= SWT.ALT;", "-\t\tif ((gdkEvent.state & OS.GDK_SHIFT_MASK) != 0) event.stateMask |= SWT.SHIFT;", "-\t\tif ((gdkEvent.state & OS.GDK_CONTROL_MASK) != 0) event.stateMask |= SWT.CONTROL;", "-\t\tif ((gdkEvent.state & OS.GDK_BUTTON1_MASK) != 0) event.stateMask |= SWT.BUTTON1;", "-\t\tif ((gdkEvent.state & OS.GDK_BUTTON2_MASK) != 0) event.stateMask |= SWT.BUTTON2;", "-\t\tif ((gdkEvent.state & OS.GDK_BUTTON3_MASK) != 0) event.stateMask |= SWT.BUTTON3;", "+\t\tint[] pModifier = new int[1];", "+\t\tOS.gdk_event_get_state(pEventKey, pModifier);", "+\t\tint state = pModifier[0];", "+\t\tif ((state & OS.GDK_MOD1_MASK)    != 0) event.stateMask |= SWT.ALT;", "+\t\tif ((state & OS.GDK_SHIFT_MASK)   != 0) event.stateMask |= SWT.SHIFT;", "+\t\tif ((state & OS.GDK_CONTROL_MASK) != 0) event.stateMask |= SWT.CONTROL;", "+\t\tif ((state & OS.GDK_BUTTON1_MASK) != 0) event.stateMask |= SWT.BUTTON1;", "+\t\tif ((state & OS.GDK_BUTTON2_MASK) != 0) event.stateMask |= SWT.BUTTON2;", "+\t\tif ((state & OS.GDK_BUTTON3_MASK) != 0) event.stateMask |= SWT.BUTTON3;", "+\t\treturn;", "-\telse {\t", "-\t\tbyte [] buffer = new byte [size];", "-\t\tOS.memmove (buffer, gdkEvent.string, size);", "-\t\t/* Convert from MBCS to UNICODE and send the event */", "-\t\tchar [] result = Converter.mbcsToWcs (null, buffer);", "-\t\tfor (int i=0; i<result.length; i++) {", "-\t\t\tEvent event = new Event ();", "-\t\t\tevent.time = gdkEvent.time;", "-\t\t\tevent.character = result [i];", "-\t\t\tevent.keyCode = result [i]; //0; //no keyCode sent", "-\t\t\tif ((gdkEvent.state & OS.GDK_MOD1_MASK) != 0) event.stateMask |= SWT.ALT;", "-\t\t\tif ((gdkEvent.state & OS.GDK_SHIFT_MASK) != 0) event.stateMask |= SWT.SHIFT;", "-\t\t\tif ((gdkEvent.state & OS.GDK_CONTROL_MASK) != 0) event.stateMask |= SWT.CONTROL;", "-\t\t\tif ((gdkEvent.state & OS.GDK_BUTTON1_MASK) != 0) event.stateMask |= SWT.BUTTON1;", "-\t\t\tif ((gdkEvent.state & OS.GDK_BUTTON2_MASK) != 0) event.stateMask |= SWT.BUTTON2;", "-\t\t\tif ((gdkEvent.state & OS.GDK_BUTTON3_MASK) != 0) event.stateMask |= SWT.BUTTON3;", "-\t\t\tpostEvent (type, event);", "-\t\t}", "-\t}\t", "+", "+\tif (size==1) {", "+\t\tint keyval = OS.gdk_event_key_get_keyval(pEventKey)\t;", "+\t\tif (keyval==0) return;", "+\t\tevent.keyCode = keyval;", "+\t\tevent.character = (char) event.keyCode;  //no character sent", "+\t\tint[] pModifier = new int[1];", "+\t\tOS.gdk_event_get_state(pEventKey, pModifier);", "+\t\tint state = pModifier[0];", "+\t\tif ((state & OS.GDK_MOD1_MASK)    != 0) event.stateMask |= SWT.ALT;", "+\t\tif ((state & OS.GDK_SHIFT_MASK)   != 0) event.stateMask |= SWT.SHIFT;", "+\t\tif ((state & OS.GDK_CONTROL_MASK) != 0) event.stateMask |= SWT.CONTROL;", "+\t\tif ((state & OS.GDK_BUTTON1_MASK) != 0) event.stateMask |= SWT.BUTTON1;", "+\t\tif ((state & OS.GDK_BUTTON2_MASK) != 0) event.stateMask |= SWT.BUTTON2;", "+\t\tif ((state & OS.GDK_BUTTON3_MASK) != 0) event.stateMask |= SWT.BUTTON3;", "+\t\tpostEvent (type, event);", "+\t\treturn;", "+\t}", "+", "+\t/* Multi-byte key */", "+\t/* The implementation in the GTK1.2 stream, is not correct here. */", "+\terror(SWT.ERROR_NOT_IMPLEMENTED);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "321ead5383790111ece499c027e02f67", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TableItem.java", "commitBeforeChange": "ed6471c0ec0d0ee0c1436d2bdeadc8ba513ab4fd", "commitAfterChange": "034d8fba7f4ca7576ddaeee539a2fb56ee664327", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 13, "signatureBeforeChange": " public Rectangle getBounds(int index)", "signatureAfterChange": " public Rectangle getBounds (int columnIndex)", "diff": ["- */", "-public Rectangle getBounds(int index) {", "-\tcheckWidget();", "-\tTable parent = getParent ();", "+}", "+public Rectangle getBounds (int columnIndex) {", "+\tcheckWidget ();", "-\tRectangle itemBounds;", "-\tRectangle columnBounds;", "-\tRectangle checkboxBounds;", "-\tTableColumn column;", "-\tint itemIndex = parent.indexOf(this);", "-\tint itemHeight = parent.getItemHeight();", "-\tint gridLineWidth = parent.getLinesVisible() ? parent.getGridLineWidth() : 0;", "-\tint itemYPos;", "+\tTableColumn[] columns = parent.columns;", "+\tint columnCount = columns.length;", "+\tint validColumnCount = Math.max (1, columnCount);", "+\tif (!(0 <= columnIndex && columnIndex < validColumnCount)) {", "+\t\treturn new Rectangle (0, 0, 0, 0);", "+\t}", "+\t/*", "+\t * If there are no columns then this is the bounds of the receiver's content.", "+\t */", "+\tif (columnCount == 0) {", "+\t\tint width = getContentWidth (0);", "+\t\treturn new Rectangle (", "+\t\t\tgetContentX (0),", "+\t\t\tparent.getItemY (this),", "+\t\t\twidth,", "+\t\t\tparent.itemHeight - 1);", "+\t}", "-\tif (itemIndex == -1 || index < 0 || index >= parent.internalGetColumnCount()) {", "-\t\titemBounds = new Rectangle(0, 0, 0, 0);", "+\tTableColumn column = columns [columnIndex];", "+\tif (columnIndex == 0) {", "+\t\t/* ", "+\t\t * For column 0 this is bounds from the beginning of the content to the", "+\t\t * end of the column.", "+\t\t */", "+\t\tint x = getContentX (0);", "+\t\tint offset = x - column.getX ();", "+\t\tint width = Math.max (0, column.width - offset);\t\t/* max is for columns with small widths */", "+\t\treturn new Rectangle (x, parent.getItemY (this), width, parent.itemHeight - 1);", "-\telse {", "-\t\tcolumn = parent.internalGetColumn(index);", "-\t\tcolumnBounds = column.getBounds();", "-\t\titemYPos = columnBounds.y + itemHeight * itemIndex;", "-\t\titemBounds = new Rectangle(", "-\t\t\tcolumnBounds.x, itemYPos, ", "-\t\t\tcolumnBounds.width - gridLineWidth, itemHeight - gridLineWidth);", "-\t\tif (index == TableColumn.FIRST) {", "-\t\t\tif (isCheckable() == true) {", "-\t\t\t\tcheckboxBounds = getCheckboxBounds();", "-\t\t\t\titemBounds.x = checkboxBounds.x + checkboxBounds.width + CHECKBOX_PADDING;\t// add checkbox start, width and space behind checkbox", "-\t\t\t\titemBounds.width -= itemBounds.x;", "-\t\t\t}", "-\t\t\telse {", "-\t\t\t\tint imageIndent = getImageIndentPixel();", "-\t\t\t\titemBounds.x += imageIndent;", "-\t\t\t\titemBounds.width -= imageIndent;", "-\t\t\t}", "-\t\t}", "-\t}", "-\treturn itemBounds;", "+\t/*", "+\t * For columns > 0 this is the bounds of the table cell.", "+\t */", "+\treturn new Rectangle (column.getX (), parent.getItemY (this), column.width, parent.itemHeight - 1);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fe03a6984eb8b3fed1bcf7ec94d52471", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CTabFolder.java", "commitBeforeChange": "f9b2da66a3aa86a16bf7c87de7bf57c3a591dc41", "commitAfterChange": "ab3a0e2212badb4230b4950583046c2765ca9b1b", "methodNumberBeforeChange": 44, "methodNumberAfterChange": 45, "signatureBeforeChange": "\r  void layoutItems()", "signatureAfterChange": "\r boolean layoutItems()", "diff": ["- void layoutItems() {\r", "-\tif (isDisposed()) return;\r", "-\r", "+boolean layoutItems() {\r", "+\tif (isDisposed()) return false;\r", "-\tint tabHeight = getTabHeight();\r", "-\r", "-\tshortenedTabs = false;\r", "-\tif (items.length > 0) {\r", "-\t\tint[] widths = new int[items.length];\r", "-\t\tint totalWidth = 0;\r", "-\t\tGC gc = new GC(this);\r", "-\t\tfor (int i = 0; i < items.length; i++) {\r", "-\t\t\twidths[i] = items[i].preferredWidth(gc);\r", "-\t\t\ttotalWidth += widths[i];\r", "-\t\t}\r", "-\t\tgc.dispose();\r", "-\t\tif (totalWidth < (area.width - borderLeft - borderRight) ) {\r", "-\t\t\ttopTabIndex = 0;\r", "-\t\t} else {\r", "-\t\t\t\r", "-\t\t\tint oldAverageWidth = 0;\r", "-\t\t\tint averageWidth = (area.width - borderLeft - borderRight) / items.length;\r", "-\t\t\twhile (averageWidth > oldAverageWidth) {\r", "-\t\t\t\tint width = area.width - borderLeft - borderRight;\r", "-\t\t\t\tint count = items.length;\r", "-\t\t\t\tfor (int i = 0; i < items.length; i++) {\r", "-\t\t\t\t\tif (widths[i] < averageWidth) {\r", "-\t\t\t\t\t\twidth -= widths[i];\r", "-\t\t\t\t\t\tcount--;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\toldAverageWidth = averageWidth;\r", "-\t\t\t\tif (count > 0) {\r", "-\t\t\t\t\taverageWidth = width / count;\r", "-\t\t\t\t}\r", "-\t\t\t}\r", "-\t\t\tif (averageWidth > MIN_TAB_WIDTH * tabHeight) {\r", "-\t\t\t\tfor (int i = 0; i < items.length; i++) {\r", "-\t\t\t\t\tif (widths[i] > averageWidth) {\r", "-\t\t\t\t\t\twidths[i] = averageWidth;\r", "-\t\t\t\t\t}\r", "-\t\t\t\t}\r", "-\t\t\t\ttopTabIndex = 0;\r", "-\t\t\t\tshortenedTabs = true;\r", "-\t\t\t}\r", "-\t\t}\r", "-\t\tint x = area.x;\r", "-\t\tint y = area.y + borderTop;\r", "-\t\tif (onBottom) {\r", "-\t\t\ty = Math.max(0, area.y + area.height - borderBottom - tabHeight);\r", "-\t\t}\r", "-\t\tfor (int i = topTabIndex - 1; i>=0; i--) { \r", "-\t\t\t// if the first visible tab is not the first tab\r", "-\t\t\tCTabItem tab = items[i];\r", "-\t\t\ttab.width = widths[i];\r", "-\t\t\ttab.height = getTabHeight();\r", "-\t\t\tx -= tab.width; \r", "-\t\t\t// layout tab items from right to left thus making them invisible\r", "-\t\t\ttab.x = x;\r", "-\t\t\ttab.y = y;\r", "-\t\t}\r", "-\t\t\r", "-\t\tx = area.x + borderLeft;\r", "-\t\tfor (int i=topTabIndex; i<items.length; i++) {\r", "-\t\t\t// continue laying out remaining, visible items left to right \r", "-\t\t\tCTabItem tab = items[i];\r", "-\t\t\ttab.x = x;\r", "-\t\t\ttab.y = y;\r", "-\t\t\ttab.height = tabHeight;\r", "-\t\t\ttab.width = widths[i];\r", "-\t\t\tx = x + tab.width;\r", "-\t\t}\r", "-\t}\r", "+\tint tabHeight = getTabHeight();\r", "-\t// resize the scrollbar and close butotns\r", "-\tlayoutButtons();\r", "+\tif (area.width == 0 || area.height == 0 || items.length == 0) return false;\r", "+\t\r", "+\tshortenedTabs = false;\r", "+\tint[] widths = new int[items.length];\r", "+\tGC gc = new GC(this);\r", "+\tfor (int i = 0; i < items.length; i++) {\r", "+\t\twidths[i] = items[i].preferredWidth(gc);\r", "+\t}\r", "+\tgc.dispose();\r", "+\r", "+\tint oldAverageWidth = 0;\r", "+\tint averageWidth = (area.width - borderLeft - borderRight) / items.length;\r", "+\twhile (averageWidth > oldAverageWidth) {\r", "+\t\tint width = area.width - borderLeft - borderRight;\r", "+\t\tint count = items.length;\r", "+\t\tfor (int i = 0; i < items.length; i++) {\r", "+\t\t\tif (widths[i] < averageWidth) {\r", "+\t\t\t\twidth -= widths[i];\r", "+\t\t\t\tcount--;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\toldAverageWidth = averageWidth;\r", "+\t\tif (count > 0) {\r", "+\t\t\taverageWidth = width / count;\r", "+\t\t}\r", "+\t}\r", "+\tif (averageWidth > MIN_TAB_WIDTH * tabHeight) {\r", "+\t\tfor (int i = 0; i < items.length; i++) {\r", "+\t\t\tif (widths[i] > averageWidth) {\r", "+\t\t\t\twidths[i] = averageWidth;\r", "+\t\t\t}\r", "+\t\t}\r", "+\t\ttopTabIndex = 0;\r", "+\t\tshortenedTabs = true;\r", "+\t}\r", "+\r", "+\tboolean changed = false;\r", "+\tint totalWidth = 0;\r", "+\tfor (int i = 0; i < items.length; i++) { \r", "+\t\tCTabItem tab = items[i];\r", "+\t\tif (tab.height != tabHeight || tab.width != widths[i]) changed = true;\r", "+\t\ttab.height = tabHeight;\r", "+\t\ttab.width = widths[i];\r", "+\t\ttotalWidth += widths[i];\r", "+\t}\r", "+\t\r", "+\tif (setItemsLocation()) changed = true;\r", "+\t\r", "+\tint areaWidth = area.x + area.width - borderRight;\r", "+\tif (totalWidth <= areaWidth) {\r", "+\t\t// if all items can be displayed, show all items\r", "+\t\tif (topTabIndex != 0) {\r", "+\t\t\ttopTabIndex = 0;\r", "+\t\t\tsetItemsLocation();\r", "+\t\t\tchanged = true;\r", "+\t\t}\r", "+\t} else {\r", "+\t\t// Is there a gap after last item showing\r", "+\t\tCTabItem lastItem = items[items.length -1];\r", "+\t\tif (lastItem.x + lastItem.width < areaWidth) {\r", "+\t\t\tint scrollWidth = arrowBar.getSize().x;\r", "+\t\t\tint maxWidth = areaWidth;\r", "+\t\t\tif (scroll_leftVisible() || scroll_rightVisible()) {\r", "+\t\t\t\tmaxWidth -=  scrollWidth;\r", "+\t\t\t}\r", "+\t\t\twhile (topTabIndex > 0 && maxWidth - lastItem.x - lastItem.width > items[topTabIndex - 1].width) {\r", "+\t\t\t\ttopTabIndex--;\r", "+\t\t\t\tsetItemsLocation();\r", "+\t\t\t\tchanged = true;\r", "+\t\t\t\tmaxWidth = areaWidth;\r", "+\t\t\t\tif (scroll_leftVisible() || scroll_rightVisible()) {\r", "+\t\t\t\t\tmaxWidth -=  scrollWidth;\r", "+\t\t\t\t}\r", "+\t\t\t}\r", "+\t\t}\r", "+\t}\r", "+\treturn changed;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "49524735c3c546a413478a29b818dac6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 71, "signatureBeforeChange": " public void setFont (Font value)", "signatureAfterChange": " public void setFont(Font font)", "diff": ["-public void setFont (Font value) {", "-\tcheckWidget();", "-\tFont oldFont = getFont();", "-\tsuper.setFont(value);", "-\tFont font = getFont();", "-\tif (font.equals (oldFont)) return;", "-\t\t", "-\tGC gc = new GC(this);", "-\t", "-\t/* recompute the receiver's cached font height and item height values */", "-\tfontHeight = gc.getFontMetrics().getHeight();", "-\titemHeight = Math.max(fontHeight, imageHeight) + 2 * getCellPadding();", "-\tPoint headerSize = header.getSize();", "-\tint newHeaderHeight = Math.max(fontHeight, headerImageHeight) + 2 * getHeaderPadding();", "-\tif (headerSize.y != newHeaderHeight) {", "-\t\theader.setSize(headerSize.x, newHeaderHeight);", "-\t}", "-\t/* ", "-\t * Notify all columns of the font change so that they can recompute", "-\t * their cached string widths.", "-\t */", "-\tfor (int i = 0; i < columns.length; i++) {", "-\t\tcolumns[i].updateFont(gc);", "-\t/* ", "-\t * Notify all items of the font change so that those items that", "-\t * use the receiver's font can recompute their cached string widths.", "-\t */", "-\tfor (int i = 0; i < items.length; i++) {", "-\t\titems[i].updateFont(gc);", "-\t}", "-\t", "-\tgc.dispose();", "-\t", "-\tif (header.isVisible()) header.redraw();", "-\tredraw();", "-}", "+}", "+public void setFont(Font font) {", "+\tcheckWidget();", "+\tVector children = new Vector();", "+\tEnumeration elements;", "+\tAbstractTreeItem item;", "+", "+\tif (font != null && font.equals(getFont()) == true) {", "+\t\treturn;", "+\t}", "+\tsetRedraw(false);\t\t\t\t\t\t\t\t\t// disable redraw because itemChanged() triggers undesired redraw", "+\tresetItemData();\t", "+\tsuper.setFont(font);", "+", "+\t// Call itemChanged for all tree items", "+\telements = getRoot().getChildren().elements();", "+\twhile (elements.hasMoreElements() == true) {", "+\t\tchildren.addElement(elements.nextElement());", "+\t}", "+\t// traverse the tree depth first\t", "+\tint size;", "+\twhile ((size = children.size()) != 0) {", "+\t\titem = (AbstractTreeItem)children.elementAt(size - 1);", "+\t\tchildren.removeElementAt(size - 1);", "+\t\titemChanged(item, 0, getClientArea().width);", "+\t\telements = item.getChildren().elements();", "+\t\twhile (elements.hasMoreElements() == true) {", "+\t\t\tchildren.addElement(elements.nextElement());", "+\t\t}\t\t\t", "+\t}", "+\tsetRedraw(true);\t\t\t\t\t\t\t\t\t// re-enable redraw", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "77944a79fa618725822dd1236cb6b1be", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "b16a097ce1f227d4fd237cb6f8c0ba950eb50b9e", "commitAfterChange": "ad9e4c7cb4e85f9de20630936ecc2b154a562c71", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 21, "signatureBeforeChange": "  void createItem (TreeItem item, TreeItem parentItem, int index)", "signatureAfterChange": "  void createItem (TreeItem item, TreeItem parentItem, int index)", "diff": ["-\tint count = 0;", "-\tint id = items.length;", "-\tfor (int i=0; i<items.length; i++) {", "-\t\tif (items [i] == null) {", "-\t\t\tif (id == items.length) id = i;", "-\t\t} else {", "-\t\t\tif (items [i].parentItem == parentItem) count++;", "-\t\t}", "-\t}", "+\tint count = getItemCount (parentItem);", "-\titem.index = index;", "-\tif (index != count) {", "-\t\tfor (int i=0; i<items.length; i++) {", "-\t\t\tif (items [i] != null && items [i].parentItem == parentItem) {", "-\t\t\t\tif (items [i].index >= item.index) items [i].index++;", "-\t\t\t}", "-\t\t}", "-\t}", "-\tif (id == items.length) {", "-\t\tTreeItem [] newItems = new TreeItem [items.length + 4];", "+\tint id = _getId ();", "+\tif (id > items.length) {", "+\t\tTreeItem [] newItems = new TreeItem [id + 4];", "-\titems [id] = item;", "-\titem.id = id + 1;", "-\tint parentID = OS.kDataBrowserNoItem;", "-\tboolean expanded = true;", "-\tif (parentItem != null) {", "-\t\tparentID = parentItem.id;", "-\t\texpanded = parentItem.getExpanded ();", "+\titem.id = id;", "+\titems [id - 1] = item;", "+\tint [] ids = parentItem == null ? childIds : parentItem.childIds;", "+\tif (ids == null || index >= ids.length) {", "+\t\tint [] newIds = new int [index + 4];", "+\t\tif (ids != null) System.arraycopy (ids, 0, newIds, 0, ids.length);", "+\t\tids = newIds;", "+\t\tif (parentItem == null) {", "+\t\t\tchildIds = ids;", "+\t\t} else {", "+\t\t\tparentItem.childIds = ids;", "+\t\t}", "-\tif (expanded) {", "-\t\tif (OS.AddDataBrowserItems (handle, parentID, 1, new int[] {item.id}, OS.kDataBrowserItemNoProperty) != OS.noErr) {", "-\t\t\titems [id] = null;", "+\tSystem.arraycopy (ids, index, ids, index + 1, ids.length - index - 1);", "+\tids [index] = id;", "+\tif (parentItem == null || parentItem.getExpanded ()) {", "+\t\tint parentID = parentItem == null ? OS.kDataBrowserNoItem : parentItem.id;", "+\t\tif (OS.AddDataBrowserItems (handle, parentID, 1, new int [] {item.id}, OS.kDataBrowserItemNoProperty) != OS.noErr) {", "+\t\t\titems [id - 1] = null;", "+\t\t\tSystem.arraycopy (ids, index+1, ids, index, ids.length - index);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "658e01bd080a687462cb32c021f110ff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "b16a097ce1f227d4fd237cb6f8c0ba950eb50b9e", "commitAfterChange": "ad9e4c7cb4e85f9de20630936ecc2b154a562c71", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 66, "signatureBeforeChange": "  int itemNotificationProc (int browser, int id, int message)", "signatureAfterChange": "  int itemNotificationProc (int browser, int id, int message)", "diff": ["-\tint index = id - 1;", "-\tif (!(0 <= index && index < items.length)) return OS.noErr;", "-\tTreeItem item = items [index];", "+\tif (!(0 < id && id <= items.length)) return OS.noErr;", "-\t\t\t\tevent.item = item;", "+\t\t\t\tevent.item = _getItem (id, true);", "-\t\t\tevent.item = item;", "+\t\t\tevent.item = _getItem (id, true);", "-", "-\t\t\t\t\t* Bug in the Macintosh.  When the DataBroswer selection flags includes", "+\t\t\t\t\t* Bug in the Macintosh.  When the DataBrowser selection flags includes", "-\t\t\t\t  * two items are selected when SetDataBrowserSelectedItems() is called", "-\t\t\t\t  * with kDataBrowserItemsAssign to assign a new seletion despite the fact", "+\t\t\t\t\t* two items are selected when SetDataBrowserSelectedItems() is called", "+\t\t\t\t\t* with kDataBrowserItemsAssign to assign a new seletion despite the fact", "-\t\t\t\t\tevent.item = item;", "+\t\t\t\t\tevent.item = _getItem (id, true);", "+\t\t\tTreeItem item = _getItem (id, true);", "+\t\t\tint [] ids = item.childIds;", "+\t\t\tif (ids != null) {", "+\t\t\t\tfor (int i=0; i<item.itemCount; i++) {", "+\t\t\t\t\tint childId = ids [i];", "+\t\t\t\t\tif (childId != 0) {", "+\t\t\t\t\t\tif (childId > items.length || items [childId - 1] == null) ids [i] = 0;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\t\t\tsetScrollWidth ();", "+\t\t\tsetScrollWidth (true);", "+\t\t\tTreeItem item = _getItem (id, true);", "-\t\t\tint count = 0;", "-\t\t\tfor (int i=0; i<items.length; i++) {", "-\t\t\t\tif (items [i] != null && items [i].parentItem == item) count++;", "+\t\t\tint newIdCount = 0;", "+\t\t\tfor (int i=0; i<item.itemCount; i++) {", "+\t\t\t\tif (item.childIds [i] == 0) newIdCount++;", "-\t\t\tTreeItem [] newItems = new TreeItem [count];", "-\t\t\tint [] ids = new int [count];", "-\t\t\tfor (int i=0; i<items.length; i++) {", "-\t\t\t\tif (items [i] != null && items [i].parentItem == item) {", "-\t\t\t\t\tids [items [i].index] = items [i].id;", "-\t\t\t\t\tnewItems [items [i].index] = items [i];", "+\t\t\tif (newIdCount > 0) {", "+\t\t\t\tint [] newIds = _getIds (newIdCount);", "+\t\t\t\tint index = 0;", "+\t\t\t\tfor (int i=0; i<item.itemCount; i++) {", "+\t\t\t\t\tif (item.childIds [i] == 0) item.childIds [i] = newIds [index++];   ", "-\t\t\tOS.AddDataBrowserItems (handle, id, ids.length, ids, OS.kDataBrowserItemNoProperty);", "-\t\t\tvisibleCount += ids.length;", "-\t\t\tsetScrollWidth (newItems, false);", "+\t\t\tOS.AddDataBrowserItems (handle, id, item.itemCount, item.childIds, OS.kDataBrowserItemNoProperty);", "+\t\t\tvisibleCount += item.itemCount;", "+\t\t\tsetScrollWidth (false);"]}], "num": 55654}
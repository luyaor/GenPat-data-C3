{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "457684281cdb06e325769c2e3cbe28c6", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "597a2904e8b0bc2f7ef132d0fb56dd8e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/CBanner.java", "commitBeforeChange": "4f6cacc9f76349f45c7a4f16b88a3566ae23ff3b", "commitAfterChange": "8e878fd2cf08a4ff98d0bd94fbda608760fdcee1", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 9, "signatureBeforeChange": " public void layout (boolean changed)", "signatureAfterChange": " public void layout (boolean changed)", "diff": ["-\tPoint rightSize;", "-\tboolean drawCurve = left != null && right != null;", "-\tint curveWidth = drawCurve ? CURVE_WIDTH : 0;", "-\tint indentLeft = drawCurve ? INDENT_LEFT : 0;", "-\tint indentRight = drawCurve ? INDENT_RIGHT : 0;", "-\tint borderTop = drawCurve ? BORDER_TOP : 0;", "-\tint borderBottom = drawCurve ? BORDER_BOTTOM : 0;", "-\tif (right == null) {", "-\t\tint width = rightWidth == SWT.DEFAULT ? 0 : rightWidth;", "-\t\trightSize = new Point(width, 0);", "-\t} else {", "-\t\trightSize = right.computeSize(rightWidth, SWT.DEFAULT);", "+\tboolean noCurve = left == null || right == null;", "+\tPoint rightSize = new Point(0,0);", "+\tif (right != null) {", "+\t\tPoint trim = right.computeSize(rightWidth, SWT.DEFAULT);", "+\t\ttrim.x = trim.x - rightWidth;", "+\t\trightSize = right.computeSize(rightWidth == SWT.DEFAULT ? SWT.DEFAULT : rightWidth - trim.x, SWT.DEFAULT);", "-\tint width = size.x - curveWidth + indentLeft + indentRight - BORDER_LEFT - BORDER_RIGHT; ", "+\tint width = noCurve ? size.x : size.x - curveWidth + 2* curveIndent - BORDER_LEFT - BORDER_RIGHT; ", "-\tPoint leftSize = (left == null) ? new Point (0, 0) : left.computeSize(width, SWT.DEFAULT);", "+\tPoint leftSize = new Point(0, 0);", "+\tif (left != null) {", "+\t\tPoint trim = left.computeSize(width, SWT.DEFAULT);", "+\t\ttrim.x = trim.x - width;", "+\t\tleftSize = left.computeSize(width - trim.x, SWT.DEFAULT);", "+\t}", "-\tint x = BORDER_LEFT;", "+\tint x = noCurve ? 0 : BORDER_LEFT;", "-\t\tint height = Math.min(size.y - borderTop - borderBottom - 2*BORDER_STRIPE, leftSize.y);", "-\t\tint y = borderTop + BORDER_STRIPE;", "+\t\tint height = Math.min(noCurve ? size.y : size.y - BORDER_TOP - BORDER_BOTTOM - 2*BORDER_STRIPE, leftSize.y);", "+\t\tint y = noCurve ? 0 : BORDER_TOP + BORDER_STRIPE;", "-\tcurveStart = x - indentLeft;", "-\tx += curveWidth - indentLeft - indentRight;", "+\tif (!noCurve) {", "+\t\tcurveStart = x - curveIndent;", "+\t\tx += curveWidth - 2*curveIndent;", "+\t}", "-\t\tint height = Math.min(size.y - borderTop - borderBottom - 2*BORDER_STRIPE, rightSize.y);", "-\t\tint y = borderTop + BORDER_STRIPE;", "+\t\tint height = Math.min(noCurve ? size.y : size.y - BORDER_TOP - BORDER_BOTTOM - 2*BORDER_STRIPE, rightSize.y);", "+\t\tint y = noCurve ? 0 : BORDER_TOP + BORDER_STRIPE;", "-\t\tredraw(curveStart - CURVE_TAIL, 0, oldStart + CURVE_WIDTH - curveStart + CURVE_TAIL, size.y, false);", "+\t\tredraw(curveStart - CURVE_TAIL, 0, oldStart + curveWidth - curveStart + CURVE_TAIL + 5, size.y, false);", "-\t\tredraw(oldStart - CURVE_TAIL, 0, curveStart + CURVE_WIDTH - oldStart + CURVE_TAIL, size.y, false);", "+\t\tredraw(oldStart - CURVE_TAIL, 0, curveStart + curveWidth - oldStart + CURVE_TAIL + 5, size.y, false);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "5cf5fdb3145be5beb888b37cc8c204c2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/Image.java", "commitBeforeChange": "d063aea08192e0213a4b6532b27dc31f9dce6e1b", "commitAfterChange": "48ef0056097e65cbe2f990bf125c93e76b95da33", "methodNumberBeforeChange": 18, "methodNumberAfterChange": 15, "signatureBeforeChange": " void init(Device device, int width, int height)", "signatureAfterChange": "  void init(Device device, int width, int height)", "diff": ["+", "-\tif (device == null) device = Device.getDevice();", "-\tif (device == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);", "-\tthis.device = device;", "-\t/* Create the pixmap */", "-\tif (width <= 0 | height <= 0)", "-\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);", "-", "-\tthis.type = SWT.BITMAP;", "-\tthis.pixmap = createPixMap(width, height, device.fScreenDepth);", "-", "-\t/* Fill the bitmap with white */", "-    int[] offscreenGWorld= new int[1];", "-\tOS.NewGWorldFromPtr(offscreenGWorld, pixmap);", "-\tint gw= offscreenGWorld[0];", "-\tif (gw == 0) SWT.error (SWT.ERROR_NO_HANDLES);", "-", "-\tint[] savePort= new int[1];", "-\tint[] saveGWorld= new int[1];", "-\tOS.GetGWorld(savePort, saveGWorld);", "-\tOS.SetGWorld(gw, 0);", "-\tOS.EraseRect(new short[] { 0, 0, (short)height, (short)width } );", "-\tOS.SetGWorld(savePort[0], saveGWorld[0]);", "-\t", "-\tOS.DisposeGWorld(gw);", "-}", "+\tif (width <= 0 || height <= 0) {", "+\t\tSWT.error (SWT.ERROR_INVALID_ARGUMENT);", "+\tthis.device = device;", "+\tthis.type = SWT.BITMAP;", "+", "+\t/* Create the image */", "+\tint bpr = width * 4;", "+\tint dataSize = height * bpr;", "+\tdata = OS.NewPtr(dataSize);", "+\tif (data == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\tint provider = OS.CGDataProviderCreateWithData(0, data, dataSize, 0);", "+\tif (provider == 0) {", "+\t\tOS.DisposePtr(data);", "+\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "+\t}", "+\tint colorspace = device.colorspace;", "+\thandle = OS.CGImageCreate(width, height, 8, 32, bpr, colorspace, OS.kCGImageAlphaNoneSkipFirst, provider, null, false, 0);", "+\tOS.CGDataProviderRelease(provider);", "+\tif (handle == 0) {", "+\t\tOS.DisposePtr(data);", "+\t\tSWT.error(SWT.ERROR_NO_HANDLES);", "+\t}", "+\t\t", "+\t/* Fill the image with white */", "+\tint bpc = OS.CGImageGetBitsPerComponent(handle);", "+\tint context = OS.CGBitmapContextCreate(this.data, width, height, bpc, bpr, colorspace, OS.kCGImageAlphaNoneSkipFirst);", "+\tCGRect rect = new CGRect();", "+\trect.width = width; rect.height = height;", "+\tOS.CGContextSetRGBFillColor(context, 1, 1, 1, 1);", "+\tOS.CGContextFillRect(context, rect);", "+\tOS.CGContextRelease(context);", "+}"]}], "num": 20920}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a74e14445f7a504b2bd9721855f31956", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "af8a7cb7e79077dbbf9856bd1cca5f10", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Shell.java", "commitBeforeChange": "5bffa8f6bb253a044dd801151ec4b992e082a6aa", "commitAfterChange": "c2deeb4450cf9e760ad5d114d9513f6491d23aa4", "methodNumberBeforeChange": 78, "methodNumberAfterChange": 78, "signatureBeforeChange": "  LRESULT WM_SYSCOMMAND (int wParam, int lParam)", "signatureAfterChange": "  LRESULT WM_SYSCOMMAND (int wParam, int lParam)", "diff": ["-\t//This code is intentionally commented", "-//\tif (result != null) return result;", "-//\t/*", "-//\t* Feature in Windows.  When a window is minimized, the memory", "-//\t* for the working set of the process.  For applications that", "-//\t* use a lot of memory, when the window is restored, it can take", "-//\t* a long time (sometimes minutes) before the application becomes", "-//\t* responsive.   The fix is to intercept WM_SYSCOMMAND looking", "-//\t* for SC_MINIMIZE and use ShowWindow() with SW_SHOWMINIMIZED to", "-//\t* minimize the window rather than allowing the default window", "-//\t* proc to do it when more that 64Meg of memory is being used.", "-//\t* ", "-//\t* NOTE:  The default window proc activates the next top-level", "-//\t* window in the Z order while ShowWindow () with SW_SHOWMINIMIZED", "-//\t* does not.  There is no fix for this at this time.", "-//\t*/", "-//\tint cmd = wParam & 0xFFF0;", "-//\tswitch (cmd) {", "-//\t\tcase OS.SC_MINIMIZE:", "-//\t\t\tlong memory = Runtime.getRuntime ().totalMemory ();", "-//\t\t\tif (memory > 64000000) {", "-//\t\t\t\tOS.ShowWindow (handle, OS.SW_SHOWMINIMIZED);", "-//\t\t\t\treturn LRESULT.ZERO;", "-//\t\t\t}", "-//\t}", "+\tif (result != null) return result;", "+\t/*", "+\t* Feature in Windows.  When the last visible window in", "+\t* a process minimized, Windows swaps out the memory for", "+\t* the process.  The assumption is that the user can no", "+\t* longer interact with the window, so the memory can be", "+\t* released to other applications.  However, for programs", "+\t* that use a lot of memory, swapping the memory back in", "+\t* can take a long time, sometimes minutes.  The fix is", "+\t* to intercept WM_SYSCOMMAND looking for SC_MINIMIZE", "+\t* and use ShowWindow() with SW_SHOWMINIMIZED to minimize", "+\t* the window, rather than running the default window proc.", "+\t* ", "+\t* NOTE:  The default window proc activates the next top-level", "+\t* window in the Z order while ShowWindow () with SW_SHOWMINIMIZED", "+\t* does not.  There is no fix for this at this time.", "+\t*/", "+\tint cmd = wParam & 0xFFF0;", "+\tswitch (cmd) {", "+\t\tcase OS.SC_MINIMIZE:", "+\t\t\tlong memory = Runtime.getRuntime ().totalMemory ();", "+\t\t\tif (memory >= 64 * 10024 * 1024) {", "+\t\t\t\tOS.ShowWindow (handle, OS.SW_SHOWMINIMIZED);", "+\t\t\t\treturn LRESULT.ZERO;", "+\t\t\t}", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e33f51b2e4396274d9c1108aa08420ef", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/carbon/org/eclipse/swt/dnd/URLTransfer.java", "commitBeforeChange": "71b2aa620cf3f84c5bb16b09884caf7b1dd69cc7", "commitAfterChange": "f60812afa59a57f249f49f9d7dfd3c8681fd0b21", "methodNumberBeforeChange": 3, "methodNumberAfterChange": 3, "signatureBeforeChange": "\rpublic Object nativeToJava(TransferData transferData)", "signatureAfterChange": "\rpublic Object nativeToJava(TransferData transferData)", "diff": ["-/*******************************************************************************\r * Copyright (c) 20007 IBM Corporation and others.\r * All rights reserved. This program and the accompanying materials\r * are made available under the terms of the Eclipse Public License v1.0\r * which accompanies this distribution, and is available at\r * http://www.eclipse.org/legal/epl-v10.html\r *\r * Contributors:\r *     IBM Corporation - initial API and implementation\r *******************************************************************************/\rpackage org.eclipse.swt.dnd;\r\rimport org.eclipse.swt.internal.carbon.*;\r\r/**\r * The class <code>URLTransfer</code> provides a platform specific mechanism \r * for converting text in URL format represented as a java <code>String</code> \r * to a platform specific representation of the data and vice versa.  See \r * <code>Transfer</code> for additional information. The string  \r * must contain the fully specified url.\r * \r * <p>An example of a java <code>String[]</code> containing a URL is shown \r * below:</p>\r * \r * <code><pre>\r *     String url = \"http://www.eclipse.org\";\r * </code></pre>\r */\rpublic class URLTransfer extends ByteArrayTransfer {\r\r\tstatic URLTransfer _instance = new URLTransfer();\r\tstatic final String URL = \"url \"; //$NON-NLS-1$\r\tstatic final int URL_ID = registerType(URL);\r\tstatic final String URLN = \"urln\"; //$NON-NLS-1$\r\tstatic final int URLN_ID = registerType(URLN);\r\rprivate URLTransfer() {}\r\r/**\r * Returns the singleton instance of the URLTransfer class.\r *\r * @return the singleton instance of the URLTransfer class\r */\rpublic static URLTransfer getInstance () {\r\treturn _instance;\r}\r\r/**\r * This implementation of <code>javaToNative</code> converts a URL\r * represented by a java <code>String</code> to a platform specific representation.\r * For additional information see <code>Transfer#javaToNative</code>.\r * \r * @param object a java <code>String[]</code> containing a URL\r * @param transferData an empty <code>TransferData</code> object; this\r *  object will be filled in on return with the platform specific format of the data\r */\rpublic void javaToNative (Object object, TransferData transferData){\r\tif (!checkURL(object) || !isSupportedType(transferData)) {\r\t\tDND.error(DND.ERROR_INVALID_DATA);\r\t}\r\ttransferData.result = -1;\r\tString url = (String)object;\r\tint count = url.length();\r\tchar[] chars = new char[count];\r\turl.getChars(0, count, chars, 0);\r\tint cfstring = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, count);\r\tif (cfstring == 0) return;\r\ttry {\r\t\tCFRange range = new CFRange();\r\t\trange.length = chars.length;\r\t\tint encoding = OS.CFStringGetSystemEncoding();\r\t\tint[] size = new int[1];\r\t\tint numChars = OS.CFStringGetBytes(cfstring, range, encoding, (byte)'?', true, null, 0, size);\r\t\tif (numChars == 0 || size[0] == 0) return;\r\t\tbyte[] buffer = new byte[size[0]];\r\t\tnumChars = OS.CFStringGetBytes(cfstring, range, encoding, (byte)'?', true, buffer, size [0], size);\r\t\tif (numChars == 0) return;\r\t\ttransferData.data = new byte[][] {buffer};\r\t\ttransferData.result = 0;\r\t} finally {\r\t\tOS.CFRelease(cfstring);\r\t}\r}\r\r/**\r * This implementation of <code>nativeToJava</code> converts a platform specific \r * representation of a URL to a java <code>String</code>.\r * For additional information see <code>Transfer#nativeToJava</code>.\r * \r * @param transferData the platform specific representation of the data to be \r * converted\r * @return a java <code>String[]</code> containing a URL if the \r * conversion was successful; otherwise null\r */\rpublic Object nativeToJava(TransferData transferData){\r\tif (!isSupportedType(transferData) || transferData.data == null) return null;\r\tif (transferData.data.length == 0) return null;\r\tbyte[] buffer = transferData.data[0];\r\tint encoding = OS.CFStringGetSystemEncoding();\r\tint cfstring = OS.CFStringCreateWithBytes(OS.kCFAllocatorDefault, buffer, buffer.length, encoding, true);\r\tif (cfstring == 0) return null;\r\ttry {\r\t\tint length = OS.CFStringGetLength(cfstring);\r\t\tif (length == 0) return null;\r\t\tchar[] chars = new char[length];\r\t\tCFRange range = new CFRange();\r\t\trange.length = length;\r\t\tOS.CFStringGetCharacters(cfstring, range, chars);\r\t\treturn new String(chars);\r\t} finally {\r\t\tOS.CFRelease(cfstring);\r\t}\r}\r\rprotected int[] getTypeIds(){\r\treturn new int[] {URL_ID, URLN_ID};\r}\r\rprotected String[] getTypeNames(){\r\treturn new String[] {URL, URLN}; \r}\r\rboolean checkURL(Object object) {\r\treturn object != null && (object instanceof String) && ((String)object).length() > 0;\r}\r\rprotected boolean validate(Object object) {\r\treturn checkURL(object);\r}\r}\r", "\\ No newline at end of file", "+/*******************************************************************************\r * Copyright (c) 20007 IBM Corporation and others.\r * All rights reserved. This program and the accompanying materials\r * are made available under the terms of the Eclipse Public License v1.0\r * which accompanies this distribution, and is available at\r * http://www.eclipse.org/legal/epl-v10.html\r *\r * Contributors:\r *     IBM Corporation - initial API and implementation\r *******************************************************************************/\rpackage org.eclipse.swt.dnd;\r\rimport org.eclipse.swt.internal.carbon.*;\r\r/**\r * The class <code>URLTransfer</code> provides a platform specific mechanism \r * for converting text in URL format represented as a java <code>String</code> \r * to a platform specific representation of the data and vice versa.  See \r * <code>Transfer</code> for additional information. The string  \r * must contain the fully specified url.\r * \r * <p>An example of a java <code>String[]</code> containing a URL is shown \r * below:</p>\r * \r * <code><pre>\r *     String url = \"http://www.eclipse.org\";\r * </code></pre>\r */\rpublic class URLTransfer extends ByteArrayTransfer {\r\r\tstatic URLTransfer _instance = new URLTransfer();\r\tstatic final String URL = \"url \"; //$NON-NLS-1$\r\tstatic final int URL_ID = registerType(URL);\r\tstatic final String URLN = \"urln\"; //$NON-NLS-1$\r\tstatic final int URLN_ID = registerType(URLN);\r\rprivate URLTransfer() {}\r\r/**\r * Returns the singleton instance of the URLTransfer class.\r *\r * @return the singleton instance of the URLTransfer class\r */\rpublic static URLTransfer getInstance () {\r\treturn _instance;\r}\r\r/**\r * This implementation of <code>javaToNative</code> converts a URL\r * represented by a java <code>String</code> to a platform specific representation.\r * For additional information see <code>Transfer#javaToNative</code>.\r * \r * @param object a java <code>String[]</code> containing a URL\r * @param transferData an empty <code>TransferData</code> object; this\r *  object will be filled in on return with the platform specific format of the data\r */\rpublic void javaToNative (Object object, TransferData transferData){\r\tif (!checkURL(object) || !isSupportedType(transferData)) {\r\t\tDND.error(DND.ERROR_INVALID_DATA);\r\t}\r\ttransferData.result = -1;\r\tString url = (String)object;\r\tint count = url.length();\r\tchar[] chars = new char[count];\r\turl.getChars(0, count, chars, 0);\r\tint cfstring = OS.CFStringCreateWithCharacters(OS.kCFAllocatorDefault, chars, count);\r\tif (cfstring == 0) return;\r\ttry {\r\t\tCFRange range = new CFRange();\r\t\trange.length = chars.length;\r\t\tint encoding = OS.kCFStringEncodingUTF8;\r\t\tint[] size = new int[1];\r\t\tint numChars = OS.CFStringGetBytes(cfstring, range, encoding, (byte)'?', true, null, 0, size);\r\t\tif (numChars == 0 || size[0] == 0) return;\r\t\tbyte[] buffer = new byte[size[0]];\r\t\tnumChars = OS.CFStringGetBytes(cfstring, range, encoding, (byte)'?', true, buffer, size [0], size);\r\t\tif (numChars == 0) return;\r\t\ttransferData.data = new byte[][] {buffer};\r\t\ttransferData.result = 0;\r\t} finally {\r\t\tOS.CFRelease(cfstring);\r\t}\r}\r\r/**\r * This implementation of <code>nativeToJava</code> converts a platform specific \r * representation of a URL to a java <code>String</code>.\r * For additional information see <code>Transfer#nativeToJava</code>.\r * \r * @param transferData the platform specific representation of the data to be \r * converted\r * @return a java <code>String[]</code> containing a URL if the \r * conversion was successful; otherwise null\r */\rpublic Object nativeToJava(TransferData transferData){\r\tif (!isSupportedType(transferData) || transferData.data == null) return null;\r\tif (transferData.data.length == 0) return null;\r\tbyte[] buffer = transferData.data[0];\r\tint encoding = OS.kCFStringEncodingUTF8;\r\tint cfstring = OS.CFStringCreateWithBytes(OS.kCFAllocatorDefault, buffer, buffer.length, encoding, true);\r\tif (cfstring == 0) return null;\r\tchar[] unescapedChars = new char[] {'%'};\r\tint unescapedStr = OS.CFStringCreateWithCharacters(0, unescapedChars, unescapedChars.length);\r\tint str = OS.CFURLCreateStringByReplacingPercentEscapes(OS.kCFAllocatorDefault, cfstring, unescapedStr);\r\tOS.CFRelease(unescapedStr);\r\tOS.CFRelease(cfstring);\r\tif (str == 0) return null;\r\ttry {\r\t\tint length = OS.CFStringGetLength(str);\r\t\tif (length == 0) return null;\r\t\tchar[] chars = new char[length];\r\t\tCFRange range = new CFRange();\r\t\trange.length = length;\r\t\tOS.CFStringGetCharacters(str, range, chars);\r\t\treturn new String(chars);\r\t} finally {\r\t\tOS.CFRelease(str);\r\t}\r}\r\rprotected int[] getTypeIds(){\r\treturn new int[] {URL_ID, URLN_ID};\r}\r\rprotected String[] getTypeNames(){\r\treturn new String[] {URL, URLN}; \r}\r\rboolean checkURL(Object object) {\r\treturn object != null && (object instanceof String) && ((String)object).length() > 0;\r}\r\rprotected boolean validate(Object object) {\r\treturn checkURL(object);\r}\r}\r", "\\ No newline at end of file"]}], "num": 20207}
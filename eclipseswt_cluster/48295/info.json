{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "9699d776dfe5805e5363e3351a6d39dd", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "4e805e9ba378dbde56b6e5b570a12eff", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "9c473160f70ea03f9b06a110ca95335a7fd637d7", "commitAfterChange": "03f864053a819bb2c8e3afbda94c0e0bd4fb3b51", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 16, "signatureBeforeChange": "  static synchronized void checkDisplay (Thread thread, boolean multiple)", "signatureAfterChange": "  static void checkDisplay (Thread thread, boolean multiple)", "diff": ["-static synchronized void checkDisplay (Thread thread, boolean multiple) {", "-\tfor (int i=0; i<Displays.length; i++) {", "-\t\tif (Displays [i] != null) {", "-\t\t\tif (!multiple) SWT.error (SWT.ERROR_NOT_IMPLEMENTED, null, \" [multiple displays]\");", "-\t\t\tif (Displays [i].thread == thread) SWT.error (SWT.ERROR_THREAD_INVALID_ACCESS);", "+static void checkDisplay (Thread thread, boolean multiple) {", "+\tsynchronized (Device.class) {", "+\t\tfor (int i=0; i<Displays.length; i++) {", "+\t\t\tif (Displays [i] != null) {", "+\t\t\t\tif (!multiple) SWT.error (SWT.ERROR_NOT_IMPLEMENTED, null, \" [multiple displays]\");", "+\t\t\t\tif (Displays [i].thread == thread) SWT.error (SWT.ERROR_THREAD_INVALID_ACCESS);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "bd221b97ef8679c4db82ce2143c3d278", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "03f864053a819bb2c8e3afbda94c0e0bd4fb3b51", "commitAfterChange": "ce858f918bbe31cedabd008a4a19b9547bae0adc", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 25, "signatureBeforeChange": "  static synchronized void checkDisplay (Thread thread, boolean multiple)", "signatureAfterChange": "  static void checkDisplay (Thread thread, boolean multiple)", "diff": ["-static synchronized void checkDisplay (Thread thread, boolean multiple) {", "-\tfor (int i=0; i<Displays.length; i++) {", "-\t\tif (Displays [i] != null) {", "-\t\t\tif (!multiple) SWT.error (SWT.ERROR_NOT_IMPLEMENTED, null, \" [multiple displays]\");", "-\t\t\tif (Displays [i].thread == thread) SWT.error (SWT.ERROR_THREAD_INVALID_ACCESS);", "+static void checkDisplay (Thread thread, boolean multiple) {", "+\tsynchronized (Device.class) {", "+\t\tfor (int i=0; i<Displays.length; i++) {", "+\t\t\tif (Displays [i] != null) {", "+\t\t\t\tif (!multiple) SWT.error (SWT.ERROR_NOT_IMPLEMENTED, null, \" [multiple displays]\");", "+\t\t\t\tif (Displays [i].thread == thread) SWT.error (SWT.ERROR_THREAD_INVALID_ACCESS);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f0ec4a2025043b39a5bdb7a6ac0153ec", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "803e3e31d1057d7b2c9a4ca2fd094f15c4fdab0a", "commitAfterChange": "98b59845e52006919cc7fbceba0837163033848c", "methodNumberBeforeChange": 95, "methodNumberAfterChange": 95, "signatureBeforeChange": " public void wake ()", "signatureAfterChange": " public void wake ()", "diff": ["-\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "-\tif (thread == Thread.currentThread ()) return;", "-\twakeThread ();", "+\tsynchronized (Device.class) {", "+\t\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "+\t\tif (thread == Thread.currentThread ()) return;", "+\t\twakeThread ();", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "98799a48d530cd5c84aadaa388c51c93", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "98b59845e52006919cc7fbceba0837163033848c", "commitAfterChange": "0bc6123ef86527be2e97dc69f141ed93a42a5c55", "methodNumberBeforeChange": 15, "methodNumberAfterChange": 15, "signatureBeforeChange": "  static synchronized void checkDisplay (Thread thread, boolean multiple)", "signatureAfterChange": "  static void checkDisplay (Thread thread, boolean multiple)", "diff": ["-static synchronized void checkDisplay (Thread thread, boolean multiple) {", "-\tfor (int i=0; i<Displays.length; i++) {", "-\t\tif (Displays [i] != null) {", "-\t\t\tif (!multiple) SWT.error (SWT.ERROR_NOT_IMPLEMENTED, null, \" [multiple displays]\");", "-\t\t\tif (Displays [i].thread == thread) SWT.error (SWT.ERROR_THREAD_INVALID_ACCESS);", "+static void checkDisplay (Thread thread, boolean multiple) {", "+\tsynchronized (Device.class) {", "+\t\tfor (int i=0; i<Displays.length; i++) {", "+\t\t\tif (Displays [i] != null) {", "+\t\t\t\tif (!multiple) SWT.error (SWT.ERROR_NOT_IMPLEMENTED, null, \" [multiple displays]\");", "+\t\t\t\tif (Displays [i].thread == thread) SWT.error (SWT.ERROR_THREAD_INVALID_ACCESS);", "+\t\t\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "da9fe5141f183aaa86843d297471e86d", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "98b59845e52006919cc7fbceba0837163033848c", "commitAfterChange": "0bc6123ef86527be2e97dc69f141ed93a42a5c55", "methodNumberBeforeChange": 11, "methodNumberAfterChange": 11, "signatureBeforeChange": " public void asyncExec (Runnable runnable)", "signatureAfterChange": " public void asyncExec (Runnable runnable)", "diff": ["-\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "-\tsynchronizer.asyncExec (runnable);", "+\tsynchronized (Device.class) {", "+\t\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "+\t\tsynchronizer.asyncExec (runnable);", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "19891013eedabe7ff2c719d9b9a253e7", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/wpf/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "98b59845e52006919cc7fbceba0837163033848c", "commitAfterChange": "0bc6123ef86527be2e97dc69f141ed93a42a5c55", "methodNumberBeforeChange": 80, "methodNumberAfterChange": 80, "signatureBeforeChange": "  static synchronized void register (Display display)", "signatureAfterChange": "  static void register (Display display)", "diff": ["-static synchronized void register (Display display) {", "-\tfor (int i=0; i<Displays.length; i++) {", "-\t\tif (Displays [i] == null) {", "-\t\t\tDisplays [i] = display;", "-\t\t\treturn;", "+static void register (Display display) {", "+\tsynchronized (Device.class) {", "+\t\tfor (int i=0; i<Displays.length; i++) {", "+\t\t\tif (Displays [i] == null) {", "+\t\t\t\tDisplays [i] = display;", "+\t\t\t\treturn;", "+\t\t\t}", "+\t\tDisplay [] newDisplays = new Display [Displays.length + 4];", "+\t\tSystem.arraycopy (Displays, 0, newDisplays, 0, Displays.length);", "+\t\tnewDisplays [Displays.length] = display;", "+\t\tDisplays = newDisplays;", "-\tDisplay [] newDisplays = new Display [Displays.length + 4];", "-\tSystem.arraycopy (Displays, 0, newDisplays, 0, Displays.length);", "-\tnewDisplays [Displays.length] = display;", "-\tDisplays = newDisplays;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "29eaaa0a22558c6d39a7f7632873bea8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "9c473160f70ea03f9b06a110ca95335a7fd637d7", "commitAfterChange": "03f864053a819bb2c8e3afbda94c0e0bd4fb3b51", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " public boolean post (Event event)", "signatureAfterChange": " public boolean post (Event event)", "diff": ["-\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "-\tif (event == null) error (SWT.ERROR_NULL_ARGUMENT);", "-\tint type = event.type;", "-\tswitch (type){", "-\t\tcase SWT.KeyDown:", "-\t\tcase SWT.KeyUp: {", "-\t\t\tKEYBDINPUT inputs = new KEYBDINPUT ();", "-\t\t\tinputs.wVk = (short) untranslateKey (event.keyCode);", "-\t\t\tif (inputs.wVk == 0) {", "-\t\t\t\tchar key = event.character;", "-\t\t\t\tswitch (key) {", "-\t\t\t\t\tcase SWT.BS: inputs.wVk = (short) OS.VK_BACK; break;", "-\t\t\t\t\tcase SWT.CR: inputs.wVk = (short) OS.VK_RETURN; break;", "-\t\t\t\t\tcase SWT.DEL: inputs.wVk = (short) OS.VK_DELETE; break;", "-\t\t\t\t\tcase SWT.ESC: inputs.wVk = (short) OS.VK_ESCAPE; break;", "-\t\t\t\t\tcase SWT.TAB: inputs.wVk = (short) OS.VK_TAB; break;", "-\t\t\t\t\t/*", "-\t\t\t\t\t* Since there is no LF key on the keyboard, do not attempt", "-\t\t\t\t\t* to map LF to CR or attempt to post an LF key.", "-\t\t\t\t\t*/", "-//\t\t\t\t\tcase SWT.LF: inputs.wVk = (short) OS.VK_RETURN; break;", "-\t\t\t\t\tcase SWT.LF: return false;", "-\t\t\t\t\tdefault: {", "-\t\t\t\t\t\tif (OS.IsWinCE) {", "-\t\t\t\t\t\t\tinputs.wVk = (short)/*64*/OS.CharUpper ((short) key);", "-\t\t\t\t\t\t} else {", "-\t\t\t\t\t\t\tinputs.wVk = OS.VkKeyScan ((short) wcsToMbcs (key, 0));", "-\t\t\t\t\t\t\tif (inputs.wVk == -1) return false;", "-\t\t\t\t\t\t\tinputs.wVk &= 0xFF;", "+\tsynchronized (Device.class) {", "+\t\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "+\t\tif (event == null) error (SWT.ERROR_NULL_ARGUMENT);", "+\t\tint type = event.type;", "+\t\tswitch (type){", "+\t\t\tcase SWT.KeyDown:", "+\t\t\tcase SWT.KeyUp: {", "+\t\t\t\tKEYBDINPUT inputs = new KEYBDINPUT ();", "+\t\t\t\tinputs.wVk = (short) untranslateKey (event.keyCode);", "+\t\t\t\tif (inputs.wVk == 0) {", "+\t\t\t\t\tchar key = event.character;", "+\t\t\t\t\tswitch (key) {", "+\t\t\t\t\t\tcase SWT.BS: inputs.wVk = (short) OS.VK_BACK; break;", "+\t\t\t\t\t\tcase SWT.CR: inputs.wVk = (short) OS.VK_RETURN; break;", "+\t\t\t\t\t\tcase SWT.DEL: inputs.wVk = (short) OS.VK_DELETE; break;", "+\t\t\t\t\t\tcase SWT.ESC: inputs.wVk = (short) OS.VK_ESCAPE; break;", "+\t\t\t\t\t\tcase SWT.TAB: inputs.wVk = (short) OS.VK_TAB; break;", "+\t\t\t\t\t\t/*", "+\t\t\t\t\t\t* Since there is no LF key on the keyboard, do not attempt", "+\t\t\t\t\t\t* to map LF to CR or attempt to post an LF key.", "+\t\t\t\t\t\t*/", "+//\t\t\t\t\t\tcase SWT.LF: inputs.wVk = (short) OS.VK_RETURN; break;", "+\t\t\t\t\t\tcase SWT.LF: return false;", "+\t\t\t\t\t\tdefault: {", "+\t\t\t\t\t\t\tif (OS.IsWinCE) {", "+\t\t\t\t\t\t\t\tinputs.wVk = (short)/*64*/OS.CharUpper ((short) key);", "+\t\t\t\t\t\t\t} else {", "+\t\t\t\t\t\t\t\tinputs.wVk = OS.VkKeyScan ((short) wcsToMbcs (key, 0));", "+\t\t\t\t\t\t\t\tif (inputs.wVk == -1) return false;", "+\t\t\t\t\t\t\t\tinputs.wVk &= 0xFF;", "+\t\t\t\t\t\t\t}", "+\t\t\t\tinputs.dwFlags = type == SWT.KeyUp ? OS.KEYEVENTF_KEYUP : 0;", "+\t\t\t\tint /*long*/ hHeap = OS.GetProcessHeap ();", "+\t\t\t\tint /*long*/ pInputs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, INPUT.sizeof);", "+\t\t\t\tOS.MoveMemory(pInputs, new int[] {OS.INPUT_KEYBOARD}, 4);", "+\t\t\t\t//TODO - DWORD type of INPUT structure aligned to 8 bytes on 64 bit", "+\t\t\t\tOS.MoveMemory (pInputs + OS.PTR_SIZEOF, inputs, KEYBDINPUT.sizeof);", "+\t\t\t\tboolean result = OS.SendInput (1, pInputs, INPUT.sizeof) != 0;", "+\t\t\t\tOS.HeapFree (hHeap, 0, pInputs);", "+\t\t\t\treturn result;", "-\t\t\tinputs.dwFlags = type == SWT.KeyUp ? OS.KEYEVENTF_KEYUP : 0;", "-\t\t\tint /*long*/ hHeap = OS.GetProcessHeap ();", "-\t\t\tint /*long*/ pInputs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, INPUT.sizeof);", "-\t\t\tOS.MoveMemory(pInputs, new int[] {OS.INPUT_KEYBOARD}, 4);", "-\t\t\t//TODO - DWORD type of INPUT structure aligned to 8 bytes on 64 bit", "-\t\t\tOS.MoveMemory (pInputs + OS.PTR_SIZEOF, inputs, KEYBDINPUT.sizeof);", "-\t\t\tboolean result = OS.SendInput (1, pInputs, INPUT.sizeof) != 0;", "-\t\t\tOS.HeapFree (hHeap, 0, pInputs);", "-\t\t\treturn result;", "-\t\t}", "-\t\tcase SWT.MouseDown:", "-\t\tcase SWT.MouseMove:", "-\t\tcase SWT.MouseUp:", "-\t\tcase SWT.MouseWheel: {", "-\t\t\tMOUSEINPUT inputs = new MOUSEINPUT ();", "-\t\t\tif (type == SWT.MouseMove){", "-\t\t\t\tinputs.dwFlags = OS.MOUSEEVENTF_MOVE | OS.MOUSEEVENTF_ABSOLUTE;", "-\t\t\t\tint x= 0, y = 0, width = 0, height = 0;", "-\t\t\t\tif (OS.WIN32_VERSION >= OS.VERSION (5, 0)) {", "-\t\t\t\t\tinputs.dwFlags |= OS.MOUSEEVENTF_VIRTUALDESK;", "-\t\t\t\t\tx = OS.GetSystemMetrics (OS.SM_XVIRTUALSCREEN);", "-\t\t\t\t\ty = OS.GetSystemMetrics (OS.SM_YVIRTUALSCREEN);\t", "-\t\t\t\t\twidth = OS.GetSystemMetrics (OS.SM_CXVIRTUALSCREEN);", "-\t\t\t\t\theight = OS.GetSystemMetrics (OS.SM_CYVIRTUALSCREEN);", "-\t\t\t\t} else {", "-\t\t\t\t\twidth = OS.GetSystemMetrics (OS.SM_CXSCREEN);", "-\t\t\t\t\theight = OS.GetSystemMetrics (OS.SM_CYSCREEN);", "-\t\t\t\t}", "-\t\t\t\tinputs.dx = ((event.x - x) * 65535 + width - 2) / (width - 1);", "-\t\t\t\tinputs.dy = ((event.y - y) * 65535 + height - 2) / (height - 1);", "-\t\t\t} else {", "-\t\t\t\tif (type == SWT.MouseWheel) {", "-\t\t\t\t\tif (OS.WIN32_VERSION < OS.VERSION (5, 0)) return false;", "-\t\t\t\t\tinputs.dwFlags = OS.MOUSEEVENTF_WHEEL;", "-\t\t\t\t\tswitch (event.detail) {", "-\t\t\t\t\t\tcase SWT.SCROLL_PAGE:", "-\t\t\t\t\t\t\tinputs.mouseData = event.count * OS.WHEEL_DELTA;", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tcase SWT.SCROLL_LINE:", "-\t\t\t\t\t\t\tint [] value = new int [1];", "-\t\t\t\t\t\t\tOS.SystemParametersInfo (OS.SPI_GETWHEELSCROLLLINES, 0, value, 0);", "-\t\t\t\t\t\t\tinputs.mouseData = event.count * OS.WHEEL_DELTA / value [0];", "-\t\t\t\t\t\t\tbreak;", "-\t\t\t\t\t\tdefault: return false;", "+\t\t\tcase SWT.MouseDown:", "+\t\t\tcase SWT.MouseMove:", "+\t\t\tcase SWT.MouseUp:", "+\t\t\tcase SWT.MouseWheel: {", "+\t\t\t\tMOUSEINPUT inputs = new MOUSEINPUT ();", "+\t\t\t\tif (type == SWT.MouseMove){", "+\t\t\t\t\tinputs.dwFlags = OS.MOUSEEVENTF_MOVE | OS.MOUSEEVENTF_ABSOLUTE;", "+\t\t\t\t\tint x= 0, y = 0, width = 0, height = 0;", "+\t\t\t\t\tif (OS.WIN32_VERSION >= OS.VERSION (5, 0)) {", "+\t\t\t\t\t\tinputs.dwFlags |= OS.MOUSEEVENTF_VIRTUALDESK;", "+\t\t\t\t\t\tx = OS.GetSystemMetrics (OS.SM_XVIRTUALSCREEN);", "+\t\t\t\t\t\ty = OS.GetSystemMetrics (OS.SM_YVIRTUALSCREEN);\t", "+\t\t\t\t\t\twidth = OS.GetSystemMetrics (OS.SM_CXVIRTUALSCREEN);", "+\t\t\t\t\t\theight = OS.GetSystemMetrics (OS.SM_CYVIRTUALSCREEN);", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\twidth = OS.GetSystemMetrics (OS.SM_CXSCREEN);", "+\t\t\t\t\t\theight = OS.GetSystemMetrics (OS.SM_CYSCREEN);", "+\t\t\t\t\tinputs.dx = ((event.x - x) * 65535 + width - 2) / (width - 1);", "+\t\t\t\t\tinputs.dy = ((event.y - y) * 65535 + height - 2) / (height - 1);", "-\t\t\t\t\tswitch (event.button) {", "-\t\t\t\t\t\tcase 1: inputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_LEFTDOWN : OS.MOUSEEVENTF_LEFTUP; break;", "-\t\t\t\t\t\tcase 2: inputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_MIDDLEDOWN : OS.MOUSEEVENTF_MIDDLEUP; break;", "-\t\t\t\t\t\tcase 3: inputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_RIGHTDOWN : OS.MOUSEEVENTF_RIGHTUP; break;", "-\t\t\t\t\t\tcase 4: {", "-\t\t\t\t\t\t\tif (OS.WIN32_VERSION < OS.VERSION (5, 0)) return false;", "-\t\t\t\t\t\t\tinputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_XDOWN : OS.MOUSEEVENTF_XUP;", "-\t\t\t\t\t\t\tinputs.mouseData = OS.XBUTTON1;", "-\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\tif (type == SWT.MouseWheel) {", "+\t\t\t\t\t\tif (OS.WIN32_VERSION < OS.VERSION (5, 0)) return false;", "+\t\t\t\t\t\tinputs.dwFlags = OS.MOUSEEVENTF_WHEEL;", "+\t\t\t\t\t\tswitch (event.detail) {", "+\t\t\t\t\t\t\tcase SWT.SCROLL_PAGE:", "+\t\t\t\t\t\t\t\tinputs.mouseData = event.count * OS.WHEEL_DELTA;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tcase SWT.SCROLL_LINE:", "+\t\t\t\t\t\t\t\tint [] value = new int [1];", "+\t\t\t\t\t\t\t\tOS.SystemParametersInfo (OS.SPI_GETWHEELSCROLLLINES, 0, value, 0);", "+\t\t\t\t\t\t\t\tinputs.mouseData = event.count * OS.WHEEL_DELTA / value [0];", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\tdefault: return false;", "-\t\t\t\t\t\tcase 5: {", "-\t\t\t\t\t\t\tif (OS.WIN32_VERSION < OS.VERSION (5, 0)) return false;", "-\t\t\t\t\t\t\tinputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_XDOWN : OS.MOUSEEVENTF_XUP;", "-\t\t\t\t\t\t\tinputs.mouseData = OS.XBUTTON2;", "-\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t} else {", "+\t\t\t\t\t\tswitch (event.button) {", "+\t\t\t\t\t\t\tcase 1: inputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_LEFTDOWN : OS.MOUSEEVENTF_LEFTUP; break;", "+\t\t\t\t\t\t\tcase 2: inputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_MIDDLEDOWN : OS.MOUSEEVENTF_MIDDLEUP; break;", "+\t\t\t\t\t\t\tcase 3: inputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_RIGHTDOWN : OS.MOUSEEVENTF_RIGHTUP; break;", "+\t\t\t\t\t\t\tcase 4: {", "+\t\t\t\t\t\t\t\tif (OS.WIN32_VERSION < OS.VERSION (5, 0)) return false;", "+\t\t\t\t\t\t\t\tinputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_XDOWN : OS.MOUSEEVENTF_XUP;", "+\t\t\t\t\t\t\t\tinputs.mouseData = OS.XBUTTON1;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tcase 5: {", "+\t\t\t\t\t\t\t\tif (OS.WIN32_VERSION < OS.VERSION (5, 0)) return false;", "+\t\t\t\t\t\t\t\tinputs.dwFlags = type == SWT.MouseDown ? OS.MOUSEEVENTF_XDOWN : OS.MOUSEEVENTF_XUP;", "+\t\t\t\t\t\t\t\tinputs.mouseData = OS.XBUTTON2;", "+\t\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tdefault: return false;", "-\t\t\t\t\t\tdefault: return false;", "+\t\t\t\tint /*long*/ hHeap = OS.GetProcessHeap ();", "+\t\t\t\tint /*long*/ pInputs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, INPUT.sizeof);", "+\t\t\t\tOS.MoveMemory(pInputs, new int[] {OS.INPUT_MOUSE}, 4);", "+\t\t\t\t//TODO - DWORD type of INPUT structure aligned to 8 bytes on 64 bit", "+\t\t\t\tOS.MoveMemory (pInputs + OS.PTR_SIZEOF, inputs, MOUSEINPUT.sizeof);", "+\t\t\t\tboolean result = OS.SendInput (1, pInputs, INPUT.sizeof) != 0;", "+\t\t\t\tOS.HeapFree (hHeap, 0, pInputs);", "+\t\t\t\treturn result;", "-\t\t\tint /*long*/ hHeap = OS.GetProcessHeap ();", "-\t\t\tint /*long*/ pInputs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, INPUT.sizeof);", "-\t\t\tOS.MoveMemory(pInputs, new int[] {OS.INPUT_MOUSE}, 4);", "-\t\t\t//TODO - DWORD type of INPUT structure aligned to 8 bytes on 64 bit", "-\t\t\tOS.MoveMemory (pInputs + OS.PTR_SIZEOF, inputs, MOUSEINPUT.sizeof);", "-\t\t\tboolean result = OS.SendInput (1, pInputs, INPUT.sizeof) != 0;", "-\t\t\tOS.HeapFree (hHeap, 0, pInputs);", "-\t\t\treturn result;", "-\t\t}", "-\t} ", "-\treturn false;", "+\t\t} ", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b92d16774d0f456529f4b67ff26037d0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/photon/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "803e3e31d1057d7b2c9a4ca2fd094f15c4fdab0a", "commitAfterChange": "98b59845e52006919cc7fbceba0837163033848c", "methodNumberBeforeChange": 71, "methodNumberAfterChange": 71, "signatureBeforeChange": " public boolean post (Event event)", "signatureAfterChange": " public boolean post (Event event)", "diff": ["-\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "-\tif (event == null) error (SWT.ERROR_NULL_ARGUMENT);", "-\treturn false;", "+\tsynchronized (Device.class) {", "+\t\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "+\t\tif (event == null) error (SWT.ERROR_NULL_ARGUMENT);", "+\t\treturn false;", "+\t}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "2827e44571131d80b7d4c743d37d297e", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "9c473160f70ea03f9b06a110ca95335a7fd637d7", "commitAfterChange": "03f864053a819bb2c8e3afbda94c0e0bd4fb3b51", "methodNumberBeforeChange": 76, "methodNumberAfterChange": 76, "signatureBeforeChange": " public Thread getSyncThread ()", "signatureAfterChange": " public Thread getSyncThread ()", "diff": ["-\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "-\treturn synchronizer.syncThread;", "+\tsynchronized (Device.class) {", "+\t\tif (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);", "+\t\treturn synchronizer.syncThread;", "+\t}"]}], "num": 48295}
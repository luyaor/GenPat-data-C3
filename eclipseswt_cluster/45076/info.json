{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "a27de42a83326d62758c9781deae81f9", "detectedBy": ["AST_HIERARCHICAL", "AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b263c82c0c77754c6e904b88dadef12f", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Custom Widgets/common/org/eclipse/swt/custom/StyledText.java", "commitBeforeChange": "635a9e5d0a5f495ec272194dbb750eddc745876f", "commitAfterChange": "e83d77b7ddccf5500d06ea30a64ce0d090ac4b10", "methodNumberBeforeChange": 164, "methodNumberAfterChange": 136, "signatureBeforeChange": " \tpublic String getLine(int lineIndex)", "signatureAfterChange": " int getLinePixel(int lineIndex)", "diff": ["-\t */", "-\tpublic String getLine(int lineIndex) {", "-\t\tString line;", "-\t\t", "-\t\t// redirect call to logical content if there are no wrapped lines", "-\t\tif (visualLineCount == 0) {", "-\t\t\tline = logicalContent.getLine(lineIndex);", "-\t\t}", "-\t\telse {", "-\t\t\tif (lineIndex >= visualLineCount || lineIndex < 0) {", "-\t\t\t\tSWT.error(SWT.ERROR_INVALID_ARGUMENT);", "-\t\t\t}\t\t", "-\t\t\tline = logicalContent.getTextRange(visualLines[lineIndex][LINE_OFFSET], visualLines[lineIndex][LINE_LENGTH]);", "-\t\t}", "-\t    return line;", "-\t}", "+ */", "+int getLinePixel(int lineIndex) {", "+\tint lineCount = content.getLineCount();", "+\tif (lineIndex > lineCount) {", "+\t\tlineIndex = lineCount;", "+\t}", "+\tif (lineIndex < 0) {", "+\t\tlineIndex = 0;", "+\t}", "+\tif (isFixedLineHeight()) {", "+\t\tint lineHeight = renderer.getLineHeight();", "+\t\treturn lineIndex * lineHeight - getVerticalScrollOffset() + topMargin;", "+\t}", "+\t", "+\tif (lineIndex == topIndex) return partialHeight + topMargin;\t", "+\tint height = partialHeight;", "+\tif (lineIndex > topIndex) {", "+\t\tfor (int i = topIndex; i < lineIndex; i++) {", "+\t\t\theight += renderer.getLineHeight(i);", "+\t\t}", "+\t} else {", "+\t\tfor (int i = topIndex - 1; i >= lineIndex; i--) {", "+\t\t\theight -= renderer.getLineHeight(i);", "+\t\t}", "+\t}", "+\treturn height + topMargin;", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "94f1f43bcee4d9d2c27faec2169b5c11", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Drag and Drop/gtk/org/eclipse/swt/dnd/DropTarget.java", "commitBeforeChange": "4b10f2a3a24e7037b13a6b21d0386bf976be739d", "commitAfterChange": "616f5a4d963ffa9e332b664b81207bb1f17d8c21", "methodNumberBeforeChange": 24, "methodNumberAfterChange": 25, "signatureBeforeChange": "  boolean setEventData(int context, int x, int y, int time, DNDEvent event)", "signatureAfterChange": "  private boolean setEventData(int context, int x, int y, int time, DNDEvent event)", "diff": ["-boolean setEventData(int context, int x, int y, int time, DNDEvent event) {", "+private boolean setEventData(int context, int x, int y, int time, DNDEvent event) {", "+\t", "+\t// get allowed operations", "+\tint style = getStyle();", "+\tint operations = osOpToOp(dragContext.actions) & style;", "+\tif (operations == DND.DROP_NONE) return false;", "+\t", "+\t// get current operation", "+\tint operation = getOperationFromKeyState();", "+\tkeyOperation = operation;", "+\tif (operation== DND.DROP_DEFAULT) {", "+\t\tif ((style & DND.DROP_DEFAULT) == 0) {", "+\t\t\toperation = (operations & DND.DROP_MOVE) != 0 ? DND.DROP_MOVE : DND.DROP_NONE;", "+\t\t}", "+\t} else {", "+\t\tif ((operation & operations) == 0) operation = DND.DROP_NONE;", "+\t}", "+", "+\t// Get allowed transfer types", "-\tTransferData[] tdata = new TransferData[0];", "+\tTransferData[] dataTypes = new TransferData[0];", "-\t\tTransferData[] newTdata = new TransferData[tdata.length + 1];", "-\t\tSystem.arraycopy(tdata, 0, newTdata, 0, tdata.length);", "-\t\tnewTdata[tdata.length] = data;", "-\t\ttdata = newTdata;", "+\t\tfor (int j = 0; j < transferAgents.length; j++) {", "+\t\t\tif (transferAgents[j].isSupportedType(data)) {", "+\t\t\t\tTransferData[] newDataTypes = new TransferData[dataTypes.length + 1];", "+\t\t\t\tSystem.arraycopy(dataTypes, 0, newDataTypes, 0, dataTypes.length);", "+\t\t\t\tnewDataTypes[dataTypes.length] = data;", "+\t\t\t\tdataTypes = newDataTypes;\t", "+\t\t\t\tbreak;", "+\t\t\t}", "+\t\t}", "-\tif (tdata.length == 0) return false;", "+\tif (dataTypes.length == 0) return false;", "-", "+\t", "-\tevent.dataTypes\t= tdata;", "-\tint operations = osOpToOp(dragContext.actions);", "-\tif (operations == DND.DROP_COPY ||", "-\t    operations == DND.DROP_LINK || ", "-\t    operations == DND.DROP_MOVE || ", "-\t    operations == DND.DROP_NONE) {", "-\t\t\tevent.detail = operations;", "-\t} else {", "-\t\t\tevent.detail = DND.DROP_DEFAULT;", "-\t}", "-\tevent.operations = operations;", "+\tevent.feedback = DND.FEEDBACK_SELECT;", "+\tevent.dataTypes = dataTypes;", "+\tevent.dataType = dataTypes[0];", "+\tevent.operations = operations;", "+\tevent.detail = operation;"]}], "num": 45076}
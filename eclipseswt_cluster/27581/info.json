{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "09a52fd37b6ea2721c0c545f1c184bfb", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f8171601e54fcc0bb7e6c34d6f8a60cc", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "caa512aad37dedd16ed84b5d8b521cfb5fd78adc", "commitAfterChange": "30a9563f38681ae614bc8194165e01d676d62b8c", "methodNumberBeforeChange": 106, "methodNumberAfterChange": 110, "signatureBeforeChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["-\t\t/*", "-\t\t * Feature of XULRunner.  Activation and deactivation of the GRE must be", "-\t\t * performed by the embedder on non-Windows platforms.  Listen for focus", "-\t\t * events on the page being loaded so that activate and deactivate handling", "-\t\t * can be done as needed.", "-\t\t */", "-\t\tif (IsXULRunner) {", "-\t\t\tint /*long*/[] result = new int /*long*/[1];", "-\t\t\tint rc = webBrowser.GetContentDOMWindow (result);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t", "-\t\t\tnsIDOMWindow window = new nsIDOMWindow (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\trc = window.QueryInterface (nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t", "-\t\t\tnsIDOMEventTarget target = new nsIDOMEventTarget (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tnsEmbedString string = new nsEmbedString (XPCOM.DOMEVENT_FOCUS);", "-\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tstring.dispose ();", "-\t\t\tstring = new nsEmbedString (XPCOM.DOMEVENT_UNLOAD);", "-\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tstring.dispose ();", "-\t\t\ttarget.Release ();", "-", "-\t\t\t/* Listeners must be hooked in pages contained in frames */", "-\t\t\trc = window.GetFrames (result);", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\t\tnsIDOMWindowCollection frames = new nsIDOMWindowCollection (result[0]);", "-\t\t\tresult[0] = 0;", "-\t\t\tint[] frameCount = new int[1];", "-\t\t\trc = frames.GetLength (frameCount); /* PRUint32 */", "-\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\tint count = frameCount[0];", "-", "-\t\t\tif (count > 0) {", "-\t\t\t\tfor (int i = 0; i < count; i++) {", "-\t\t\t\t\trc = frames.Item (i, result);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t", "-\t\t\t\t\tnsIDOMWindow frame = new nsIDOMWindow (result[0]);", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\trc = frame.QueryInterface (nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "-\t\t\t\t\tframe.Release ();", "-\t", "-\t\t\t\t\ttarget = new nsIDOMEventTarget (result[0]);", "-\t\t\t\t\tresult[0] = 0;", "-\t\t\t\t\tstring = new nsEmbedString (XPCOM.DOMEVENT_FOCUS);", "-\t\t\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tstring.dispose ();", "-\t\t\t\t\tstring = new nsEmbedString (XPCOM.DOMEVENT_UNLOAD);", "-\t\t\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "-\t\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "-\t\t\t\t\tstring.dispose ();", "-\t\t\t\t\ttarget.Release ();", "-\t\t\t\t}", "-\t\t\t}", "-\t\t\tframes.Release ();", "-\t\t\twindow.Release ();", "-\t\t}", "+\t\thookDOMListeners ();"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "7d70312f0492172212c466fad9efa7be", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Mozilla/common/org/eclipse/swt/browser/Mozilla.java", "commitBeforeChange": "163cf0f05b0fcf27a13be2a0d956931bc7a0cf48", "commitAfterChange": "2bf3b9c1d25d7eeb1c0242f0368a35c87cf28fa9", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 106, "signatureBeforeChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "signatureAfterChange": "  int OnStateChange (int aWebProgress, int aRequest, int aStateFlags, int aStatus)", "diff": ["+\t} else if ((aStateFlags & nsIWebProgressListener.STATE_TRANSFERRING) != 0) {", "+\t\tint /*long*/[] result = new int /*long*/[1];", "+\t\tint rc = webBrowser.GetContentDOMWindow (result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+", "+\t\tnsIDOMWindow window = new nsIDOMWindow (result[0]);", "+\t\tresult[0] = 0;", "+\t\trc = window.QueryInterface (nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+", "+\t\tnsIDOMEventTarget target = new nsIDOMEventTarget (result[0]);", "+\t\tresult[0] = 0;", "+\t\tnsEmbedString string = new nsEmbedString (XPCOM.DOMEVENT_FOCUS);", "+\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tstring.dispose ();", "+\t\tstring = new nsEmbedString (XPCOM.DOMEVENT_UNLOAD);", "+\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tstring.dispose ();", "+\t\ttarget.Release ();", "+", "+\t\trc = window.GetFrames (result);", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\tnsIDOMWindowCollection frames = new nsIDOMWindowCollection (result[0]);", "+\t\tresult[0] = 0;", "+\t\tint[] frameCount = new int[1];", "+\t\trc = frames.GetLength (frameCount); /* PRUint32 */", "+\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\tint count = frameCount[0];", "+", "+\t\tif (count > 0) {", "+\t\t\tfor (int i = 0; i < count; i++) {", "+\t\t\t\trc = frames.Item (i, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+", "+\t\t\t\tnsIDOMWindow frame = new nsIDOMWindow (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\trc = frame.QueryInterface (nsIDOMEventTarget.NS_IDOMEVENTTARGET_IID, result);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tif (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);", "+\t\t\t\tframe.Release ();", "+", "+\t\t\t\ttarget = new nsIDOMEventTarget (result[0]);", "+\t\t\t\tresult[0] = 0;", "+\t\t\t\tstring = new nsEmbedString (XPCOM.DOMEVENT_FOCUS);", "+\t\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tstring.dispose ();", "+\t\t\t\tstring = new nsEmbedString (XPCOM.DOMEVENT_UNLOAD);", "+\t\t\t\trc = target.AddEventListener (string.getAddress (), domEventListener.getAddress (), false);", "+\t\t\t\tif (rc != XPCOM.NS_OK) error (rc);", "+\t\t\t\tstring.dispose ();", "+\t\t\t\ttarget.Release ();", "+\t\t\t}", "+\t\t}", "+\t\tframes.Release ();", "+\t\twindow.Release ();"]}], "num": 27581}
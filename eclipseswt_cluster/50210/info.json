{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "0413706d97e9708920eab6b2462a3eff", "detectedBy": ["DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "689fcef2ead74085f7c0a793a7c52e15", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/graphics/Font.java", "commitBeforeChange": "cd8ecb8a69ace1495a67c3b9bfd25402d9344085", "commitAfterChange": "f8eebc4a59a9df233459e3a90fd2ee42161294e2", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public FontData[] getFontData()", "signatureAfterChange": " public FontData[] getFontData()", "diff": ["-\tString[] xlfds = new String[0];", "-\t/* Go through each entry in the font list */", "-\twhile ((fontListEntry = OS.XmFontListNextEntry(context)) != 0) {", "-\t\tint fontPtr = OS.XmFontListEntryGetFont(fontListEntry, buffer);", "-\t\tif (buffer[0] == OS.XmFONT_IS_FONT) { ", "-\t\t\t/* FontList contains a single font */", "-\t\t\tOS.memmove(fontStruct,fontPtr,20 * 4);", "-\t\t\tint propPtr = fontStruct.properties;", "-\t\t\tfor (int i = 0; i < fontStruct.n_properties; i++) {", "-\t\t\t\t/* Reef through properties looking for XAFONT */", "-\t\t\t\tint[] prop = new int[2];", "-\t\t\t\tOS.memmove(prop, propPtr, 8);", "-\t\t\t\tif (prop[0] == OS.XA_FONT) {", "-\t\t\t\t\t/* Found it, prop[1] points to the string */", "-\t\t\t\t\tint ptr = OS.XmGetAtomName(xDisplay, prop[1]);", "-\t\t\t\t\tint length = OS.strlen(ptr);", "-\t\t\t\t\tbyte[] nameBuf = new byte[length];", "-\t\t\t\t\tOS.memmove(nameBuf, ptr, length);", "-\t\t\t\t\t/* Use the character encoding for the default locale */", "-\t\t\t\t\tString xlfd = new String(Converter.mbcsToWcs(null, nameBuf)).toLowerCase();", "-\t\t\t\t\t/* Add the xlfd to the array */", "-\t\t\t\t\tString[] newXlfds = new String[xlfds.length + 1];", "-\t\t\t\t\tSystem.arraycopy(xlfds, 0, newXlfds, 0, xlfds.length);", "-\t\t\t\t\tnewXlfds[newXlfds.length - 1] = xlfd;", "-\t\t\t\t\txlfds = newXlfds;", "-\t\t\t\t\tOS.XtFree(ptr);", "-\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t\tpropPtr += 8;", "-\t\t\t}", "-\t\t}", "-\t\telse { ", "-\t\t\t/* FontList contains a fontSet */", "-\t\t\tint nFonts = OS.XFontsOfFontSet(fontPtr,fontStructPtr,fontNamePtr);", "-\t\t\tint [] fontStructs = new int[nFonts];", "-\t\t\tOS.memmove(fontStructs,fontStructPtr[0],nFonts * 4);", "-\t\t\tfor (int i = 0; i < nFonts; i++) { // Go through each fontStruct in the font set.", "-\t\t\t\tOS.memmove(fontStruct,fontStructs[i],20 * 4);", "+\tFontData[] data = new FontData[0];", "+\ttry {", "+\t\t/* Go through each entry in the font list */", "+\t\twhile ((fontListEntry = OS.XmFontListNextEntry(context)) != 0) {", "+\t\t\tint fontPtr = OS.XmFontListEntryGetFont(fontListEntry, buffer);", "+\t\t\tif (buffer[0] == OS.XmFONT_IS_FONT) { ", "+\t\t\t\t/* FontList contains a single font */", "+\t\t\t\tOS.memmove(fontStruct,fontPtr,20 * 4);", "-\t\t\t\tfor (int j = 0; j < fontStruct.n_properties; j++) {", "-\t\t\t\t\t// Reef through properties looking for XAFONT", "+\t\t\t\tfor (int i = 0; i < fontStruct.n_properties; i++) {", "+\t\t\t\t\t/* Look through properties for XAFONT */", "+\t\t\t\t\t\tOS.XtFree(ptr);", "+\t\t\t\t\t\t/* Use the character encoding for the default locale */", "-\t\t\t\t\t\tString[] newXlfds = new String[xlfds.length + 1];", "-\t\t\t\t\t\tSystem.arraycopy(xlfds, 0, newXlfds, 0, xlfds.length);", "-\t\t\t\t\t\tnewXlfds[newXlfds.length - 1] = xlfd;", "-\t\t\t\t\t\txlfds = newXlfds;", "-\t\t\t\t\t\tOS.XFree(ptr);", "+\t\t\t\t\t\tFontData[] newData = new FontData[data.length + 1];", "+\t\t\t\t\t\tSystem.arraycopy(data, 0, newData, 0, data.length);", "+\t\t\t\t\t\tnewData[newData.length - 1] = FontData.motif_new(xlfd);", "+\t\t\t\t\t\tdata = newData;", "+\t\t\telse { ", "+\t\t\t\t/* FontList contains a fontSet */", "+\t\t\t\tint nFonts = OS.XFontsOfFontSet(fontPtr,fontStructPtr,fontNamePtr);", "+\t\t\t\tint [] fontStructs = new int[nFonts];", "+\t\t\t\tOS.memmove(fontStructs,fontStructPtr[0],nFonts * 4);", "+\t\t\t\tfor (int i = 0; i < nFonts; i++) { // Go through each fontStruct in the font set.", "+\t\t\t\t\tOS.memmove(fontStruct,fontStructs[i],20 * 4);", "+\t\t\t\t\tint propPtr = fontStruct.properties;", "+\t\t\t\t\tfor (int j = 0; j < fontStruct.n_properties; j++) {", "+\t\t\t\t\t\t// Look through properties for XAFONT", "+\t\t\t\t\t\tint[] prop = new int[2];", "+\t\t\t\t\t\tOS.memmove(prop, propPtr, 8);", "+\t\t\t\t\t\tif (prop[0] == OS.XA_FONT) {", "+\t\t\t\t\t\t\t/* Found it, prop[1] points to the string */", "+\t\t\t\t\t\t\tint ptr = OS.XmGetAtomName(xDisplay, prop[1]);", "+\t\t\t\t\t\t\tint length = OS.strlen(ptr);", "+\t\t\t\t\t\t\tbyte[] nameBuf = new byte[length];", "+\t\t\t\t\t\t\tOS.memmove(nameBuf, ptr, length);", "+\t\t\t\t\t\t\tOS.XFree(ptr);", "+\t\t\t\t\t\t\tString xlfd = new String(Converter.mbcsToWcs(null, nameBuf)).toLowerCase();", "+\t\t\t\t\t\t\t/* Add the xlfd to the array */", "+\t\t\t\t\t\t\tFontData[] newData = new FontData[data.length + 1];", "+\t\t\t\t\t\t\tSystem.arraycopy(data, 0, newData, 0, data.length);", "+\t\t\t\t\t\t\ttry {", "+\t\t\t\t\t\t\t\tnewData[newData.length - 1] = FontData.motif_new(xlfd);", "+\t\t\t\t\t\t\t} catch (Exception e) {", "+\t\t\t\t\t\t\t\t/*", "+\t\t\t\t\t\t\t\t * Some font servers, for example, xfstt, do not pass", "+\t\t\t\t\t\t\t\t * reasonable font properties to the client, so we", "+\t\t\t\t\t\t\t\t * cannot construct a FontData for these. Use the font", "+\t\t\t\t\t\t\t\t * name instead and return null if that fails.", "+\t\t\t\t\t\t\t\t */", "+\t\t\t\t\t\t\t\tint[] fontName = new int[1];", "+\t\t\t\t\t\t\t\tOS.memmove(fontName, fontNamePtr [0] + (i * 4), 4);", "+\t\t\t\t\t\t\t\tptr = fontName[0];", "+\t\t\t\t\t\t\t\tif (ptr != 0) {", "+\t\t\t\t\t\t\t\t\tlength = OS.strlen(ptr);", "+\t\t\t\t\t\t\t\t\tnameBuf = new byte[length];", "+\t\t\t\t\t\t\t\t\tOS.memmove(nameBuf, ptr, length);", "+\t\t\t\t\t\t\t\t\txlfd = new String(Converter.mbcsToWcs(null, nameBuf)).toLowerCase();", "+\t\t\t\t\t\t\t\t\tnewData[newData.length - 1] = FontData.motif_new(xlfd);", "+\t\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\t}", "+\t\t\t\t\t\t\tdata = newData;", "+\t\t\t\t\t\t\tbreak;", "+\t\t\t\t\t\t}", "+\t\t\t\t\t\tpropPtr += 8;", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\t}", "-\tOS.XmFontListFreeFontContext(context);", "-\tif (xlfds.length == 0) return null;", "-\tFontData[] fontData = new FontData[xlfds.length];", "-\t/* Construct each fontData out of the xlfd */", "-\ttry {", "-\t\tfor (int i = 0; i < xlfds.length; i++) {", "-\t\t\tfontData[i] = FontData.motif_new(xlfds[i]);", "-\t\t}", "+\t\tif (data.length == 0) return null;", "+\t} finally {", "+\t\tOS.XmFontListFreeFontContext(context);", "-\treturn fontData;", "+\treturn data;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e66f7e90a179f3563dd81831a1d27171", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/ColorDialog.java", "commitBeforeChange": "d81992ac3e894363b9e0990d7b4e1bfc6b231914", "commitAfterChange": "0edff76e3e3201d3f5843887fe8abb802322fd4f", "methodNumberBeforeChange": 4, "methodNumberAfterChange": 4, "signatureBeforeChange": " public RGB open ()", "signatureAfterChange": " public RGB open ()", "diff": ["+\t\t\trgba.alpha = 1;", "-\t\tOS.gtk_color_chooser_set_use_alpha (handle, false);", "-", "-\t\tlong /*int*/ colors = OS.g_malloc(GdkColor.sizeof * rgbs.length);", "-\t\tfor (int i=0; i<rgbs.length; i++) {", "-\t\t\tRGB rgb = rgbs[i];", "-\t\t\tif (rgb != null) {", "-\t\t\t\tcolor.red = (short)((rgb.red & 0xFF) | ((rgb.red & 0xFF) << 8));", "-\t\t\t\tcolor.green = (short)((rgb.green & 0xFF) | ((rgb.green & 0xFF) << 8));", "-\t\t\t\tcolor.blue = (short)((rgb.blue & 0xFF) | ((rgb.blue & 0xFF) << 8));", "-\t\t\t\tOS.memmove (colors + i * GdkColor.sizeof, color, GdkColor.sizeof);", "+\t\tif (OS.GTK_VERSION >= OS.VERSION (3, 4, 0)) {", "+\t\t\tint colorsPerRow = 9;", "+\t\t\tlong /*int*/ gdkRGBAS = OS.g_malloc(GdkRGBA.sizeof * rgbs.length);", "+\t\t\tfor (int i=0; i<rgbs.length; i++) {", "+\t\t\t\tRGB rgbS = rgbs[i];", "+\t\t\t\tif (rgbS != null) {", "+\t\t\t\t\trgba.red = (double) rgbS.red / 255;", "+\t\t\t\t\trgba.green = (double) rgbS.green / 255;", "+\t\t\t\t\trgba.blue = (double) rgbS.blue / 255;", "+\t\t\t\t\tOS.memmove (gdkRGBAS + i * GdkRGBA.sizeof, rgba, GdkRGBA.sizeof);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tOS.gtk_color_chooser_add_palette(handle, OS.GTK_ORIENTATION_HORIZONTAL, colorsPerRow,", "+\t\t\t\t\trgbs.length, gdkRGBAS);", "+\t\t\tOS.gtk_color_chooser_set_rgba (handle, rgba);", "+", "+", "+\t\t\tif (OS.gtk_color_chooser_get_use_alpha(handle)) {", "+\t\t\t\tOS.gtk_color_chooser_set_use_alpha (handle, false);", "+\t\t\t}", "+\t\t\tOS.g_free (gdkRGBAS);", "+\t\t} else {", "+\t\t\tlong /*int*/ gdkColors = OS.g_malloc(GdkColor.sizeof * rgbs.length);", "+\t\t\tfor (int i=0; i<rgbs.length; i++) {", "+\t\t\t\tRGB rgb = rgbs[i];", "+\t\t\t\tif (rgb != null) {", "+\t\t\t\t\tcolor.red = (short)((rgb.red & 0xFF) | ((rgb.red & 0xFF) << 8));", "+\t\t\t\t\tcolor.green = (short)((rgb.green & 0xFF) | ((rgb.green & 0xFF) << 8));", "+\t\t\t\t\tcolor.blue = (short)((rgb.blue & 0xFF) | ((rgb.blue & 0xFF) << 8));", "+\t\t\t\t\tOS.memmove (gdkColors + i * GdkColor.sizeof, color, GdkColor.sizeof);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\tlong /*int*/ strPtr = OS.gtk_color_selection_palette_to_string(gdkColors, rgbs.length);", "+\t\t\tint length = OS.strlen (strPtr);", "+", "+\t\t\tbuffer = new byte [length];", "+\t\t\tOS.memmove (buffer, strPtr, length);", "+\t\t\tString paletteString = new String (Converter.mbcsToWcs (null, buffer));", "+\t\t\tbuffer = Converter.wcsToMbcs (null, paletteString, true);", "+\t\t\tOS.g_free (gdkColors);", "+\t\t\tlong /*int*/ settings = OS.gtk_settings_get_default ();", "+\t\t\tif (settings != 0) {", "+\t\t\t\tOS.gtk_settings_set_string_property(settings, OS.gtk_color_palette, buffer, Converter.wcsToMbcs (null, \"gtk_color_selection_palette_to_string\", true));", "+", "-\t\tlong /*int*/ strPtr = OS.gtk_color_selection_palette_to_string(colors, rgbs.length);", "-\t\tint length = OS.strlen (strPtr);", "-\t\tbuffer = new byte [length];", "-\t\tOS.memmove (buffer, strPtr, length);", "-\t\tString paletteString = new String (Converter.mbcsToWcs (null, buffer));", "-\t\tbuffer = Converter.wcsToMbcs (null, paletteString, true);", "-\t\tOS.g_free (colors);", "-\t\tlong /*int*/ settings = OS.gtk_settings_get_default ();", "-\t\tif (settings != 0) {", "-\t\t\tOS.gtk_settings_set_string_property(settings, OS.gtk_color_palette, buffer, Converter.wcsToMbcs (null, \"gtk_color_selection_palette_to_string\", true));", "-\t\t}", "+", "-", "+", "+\t\t\tlong /*int*/ settings = OS.gtk_settings_get_default ();", "+\t\t\tif (settings != 0) {", "+", "+\t\t\t\tlong /*int*/ [] ptr = new long /*int*/ [1];", "+\t\t\t\tOS.g_object_get (settings, OS.gtk_color_palette, ptr, 0);", "+\t\t\t\tif (ptr [0] != 0) {", "+\t\t\t\t\tint length = OS.strlen (ptr [0]);", "+\t\t\t\t\tbuffer = new byte [length];", "+\t\t\t\t\tOS.memmove (buffer, ptr [0], length);", "+\t\t\t\t\tOS.g_free (ptr [0]);", "+\t\t\t\t\tString [] gdkColorStrings = null;", "+\t\t\t\t\tif (length > 0) {", "+\t\t\t\t\t\tString gtk_color_palette = new String(Converter.mbcsToWcs (null, buffer));", "+\t\t\t\t\t\tgdkColorStrings = splitString(gtk_color_palette, ':');", "+\t\t\t\t\t\tlength = gdkColorStrings.length;", "+\t\t\t\t\t}", "+\t\t\t\t\trgbs = new RGB [length];", "+\t\t\t\t\tfor (int i=0; i<length; i++) {", "+\t\t\t\t\t\tString colorString = gdkColorStrings[i];", "+\t\t\t\t\t\tbuffer = Converter.wcsToMbcs (null, colorString, true);", "+\t\t\t\t\t\tOS.gdk_color_parse(buffer, color);", "+\t\t\t\t\t\tint redI = (color.red >> 8) & 0xFF;", "+\t\t\t\t\t\tint greenI = (color.green >> 8) & 0xFF;", "+\t\t\t\t\t\tint blueI = (color.blue >> 8) & 0xFF;", "+\t\t\t\t\t\trgbs [i] = new RGB (redI, greenI, blueI);", "+\t\t\t\t\t}", "+\t\t\t\t}", "+\t\t\t}", "-\tlong /*int*/ settings = OS.gtk_settings_get_default ();", "-\tif (settings != 0) {", "-\t\tlong /*int*/ [] ptr = new long /*int*/ [1];", "-\t\tOS.g_object_get (settings, OS.gtk_color_palette, ptr, 0);", "-\t\tif (ptr [0] != 0) {", "-\t\t\tint length = OS.strlen (ptr [0]);", "-\t\t\tbuffer = new byte [length];", "-\t\t\tOS.memmove (buffer, ptr [0], length);", "-\t\t\tOS.g_free (ptr [0]);", "-\t\t\tString [] gdkColorStrings = null;", "-\t\t\tif (length > 0) {", "-\t\t\t\tString gtk_color_palette = new String(Converter.mbcsToWcs (null, buffer));", "-\t\t\t\tgdkColorStrings = splitString(gtk_color_palette, ':');", "-\t\t\t\tlength = gdkColorStrings.length;", "-\t\t\t}", "-\t\t\trgbs = new RGB [length];", "-\t\t\tfor (int i=0; i<length; i++) {", "-\t\t\t\tString colorString = gdkColorStrings[i];", "-\t\t\t\tbuffer = Converter.wcsToMbcs (null, colorString, true);", "-\t\t\t\tOS.gdk_color_parse(buffer, color);", "-\t\t\t\tint red = (color.red >> 8) & 0xFF;", "-\t\t\t\tint green = (color.green >> 8) & 0xFF;", "-\t\t\t\tint blue = (color.blue >> 8) & 0xFF;", "-\t\t\t\trgbs [i] = new RGB (red, green, blue);", "-\t\t\t}", "-\t\t}", "-\t}", "+", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d82c120e440457d4de948c884e3b694c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "06dc38e623afcc69453149a4908e940401d48a28", "commitAfterChange": "0f19e4967bd7565d0b817b526213289acd242b74", "methodNumberBeforeChange": 13, "methodNumberAfterChange": 2, "signatureBeforeChange": " String interpretOsAnswer(String osAnswer)", "signatureAfterChange": " String computeResult()", "diff": ["+String computeResult() {", "+\tGtkFileSelection selection = new GtkFileSelection ();", "+\tOS.memmove (selection, handle);", "+\tint /*long*/ entry = selection.selection_entry;", "+\tint /*long*/ entryText = OS.gtk_entry_get_text (entry);", "+\tint entryLength = OS.strlen (entryText);", "+\tif (entryLength == 0) {", "+\t\tint /*long*/ fileList = selection.file_list;", "+\t\tint /*long*/ listSelection = OS.gtk_tree_view_get_selection (fileList);", "+\t\tint /*long*/[] model = new int /*long*/[1];", "+\t\tint /*long*/ selectedList = OS.gtk_tree_selection_get_selected_rows (listSelection, model);", "+\t\tif (selectedList == 0) return null;", "+\t\tint listLength = OS.g_list_length (selectedList);", "+\t\tif (listLength == 0) {", "+\t\t\tOS.g_list_free (selectedList);", "+\t\t\treturn null;", "+\t\t}", "+\t\tint /*long*/ path = OS.g_list_nth_data (selectedList, 0);", "+\t\tint /*long*/ [] ptr = new int /*long*/[1];", "+\t\tint /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());", "+\t\tif (OS.gtk_tree_model_get_iter (model [0], iter, path)) {", "+\t\t\tOS.gtk_tree_model_get (model [0], iter, 0, ptr, -1);", "+\t\t}", "+\t\tOS.g_free (iter);", "+\t\tfor (int i = 0; i < listLength; i++) {", "+\t\t\tOS.gtk_tree_path_free (OS.g_list_nth_data (selectedList, i));", "+\t\t}", "+\t\tOS.g_list_free (selectedList);", "+\t\tif (ptr [0] == 0) return null;", "+\t\tint length = OS.strlen (ptr [0]);", "+\t\tbyte [] buffer = new byte [length];", "+\t\tOS.memmove (buffer, ptr [0], length);", "+\t\tOS.g_free (ptr [0]);", "+\t\tOS.gtk_entry_set_text (entry, buffer);", "+\t}", "+", "+\tint /*long*/ fileNamePtr = OS.gtk_file_selection_get_filename (handle);", "+\tint /*long*/ utf8Ptr = OS.g_filename_to_utf8 (fileNamePtr, -1, null, null, null);", "+\tint /*long*/ [] items_written = new int /*long*/ [1];", "+\tint /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);", "+\tentryLength = (int)/*64*/items_written [0];", "+\tchar [] buffer = new char [entryLength];", "+\tOS.memmove (buffer, utf16Ptr, entryLength * 2);", "+\tString osAnswer = new String (buffer);", "+\tOS.g_free (utf16Ptr);", "+\tOS.g_free (utf8Ptr);", "+", "+\tif (osAnswer == null) return null;", "+\tint separatorIndex = osAnswer.lastIndexOf (SEPARATOR);", "+\tif (separatorIndex+1 == osAnswer.length ()) return null;", "+\t", "+\tString answer = fullPath = osAnswer;", "+\tfileName = fullPath.substring (separatorIndex+1);", "+\tfilterPath = fullPath.substring (0, separatorIndex);", "+\tif ((style & SWT.MULTI) == 0) {", "+\t\tfileNames = new String[] {fileName};", "+\t} else {", "+\t\tint /*long*/ namesPtr = OS.gtk_file_selection_get_selections (handle);", "+\t\tint /*long*/ namesPtr1 = namesPtr;", "+\t\tint /*long*/ [] namePtr = new int /*long*/ [1];", "+\t\tOS.memmove (namePtr, namesPtr1, OS.PTR_SIZEOF);", "+\t\tint length = 0;", "+\t\twhile (namePtr[0] != 0) {", "+\t\t\tlength++;", "+\t\t\tnamesPtr1+=OS.PTR_SIZEOF;", "+\t\t\tOS.memmove(namePtr, namesPtr1, OS.PTR_SIZEOF);", "+\t\t}", "+\t\tfileNames = new String [length];", "+\t\tnamePtr = new int /*long*/ [length];", "+\t\tOS.memmove (namePtr, namesPtr, length * OS.PTR_SIZEOF);", "+\t\tfor (int i = 0; i < length; i++) {\t\t\t", "+\t\t\tutf8Ptr = OS.g_filename_to_utf8 (namePtr [i], -1, null, null, null);", "+\t\t\titems_written = new int /*long*/ [1];", "+\t\t\tutf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);", "+\t\t\tbuffer = new char [(int)/*64*/items_written [0]];", "+\t\t\tOS.memmove (buffer, utf16Ptr, items_written [0] * 2);", "+\t\t\tString name = new String (buffer);", "+\t\t\tfileNames [i] = name.substring (name.lastIndexOf (SEPARATOR) + 1);", "+\t\t\tOS.g_free (utf16Ptr);", "+\t\t\tOS.g_free (utf8Ptr);", "+\t\t}", "+\t\tOS.g_strfreev (namesPtr);", "+\t}", "+\treturn answer;", "+}", "-String interpretOsAnswer(String osAnswer) {", "-\tif (osAnswer==null) return null;", "-\tint separatorIndex = osAnswer.lastIndexOf (SEPARATOR);", "-\tif (separatorIndex+1 == osAnswer.length ()) return null;", "-\t", "-\tString answer = fullPath = osAnswer;", "-\tfileName = fullPath.substring (separatorIndex+1);", "-\tfilterPath = fullPath.substring (0, separatorIndex);", "-\tif ((style & SWT.MULTI) == 0) {", "-\t\tfileNames = new String[] {fileName};", "-\t} else {", "-\t\tint /*long*/ namesPtr = OS.gtk_file_selection_get_selections (handle);", "-\t\tint /*long*/ namesPtr1 = namesPtr;", "-\t\tint /*long*/ [] namePtr = new int /*long*/ [1];", "-\t\tOS.memmove (namePtr, namesPtr1, OS.PTR_SIZEOF);", "-\t\tint length = 0;", "-\t\twhile (namePtr[0] != 0) {", "-\t\t\tlength++;", "-\t\t\tnamesPtr1+=OS.PTR_SIZEOF;", "-\t\t\tOS.memmove(namePtr, namesPtr1, OS.PTR_SIZEOF);", "-\t\t}", "-\t\tfileNames = new String [length];", "-\t\tnamePtr = new int /*long*/ [length];", "-\t\tOS.memmove (namePtr, namesPtr, length * OS.PTR_SIZEOF);", "-\t\tfor (int i = 0; i < length; i++) {\t\t\t", "-\t\t\tint /*long*/ utf8Ptr = OS.g_filename_to_utf8 (namePtr [i], -1, null, null, null);", "-\t\t\tint /*long*/ [] items_written = new int /*long*/ [1];", "-\t\t\tint /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);", "-\t\t\tchar[] buffer = new char [(int)/*64*/items_written [0]];", "-\t\t\tOS.memmove (buffer, utf16Ptr, items_written [0] * 2);", "-\t\t\tString name = new String (buffer);", "-\t\t\tfileNames [i] = name.substring (name.lastIndexOf (SEPARATOR) + 1);", "-\t\t\tOS.g_free (utf16Ptr);", "-\t\t\tOS.g_free (utf8Ptr);", "-\t\t}", "-\t\tOS.g_strfreev (namesPtr);", "-\t}", "-\treturn answer;", "-}"]}], "num": 50210}
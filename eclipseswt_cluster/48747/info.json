{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "c4b9e9a048e25060127d29fca6d1e905", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "b6e9036252b76039015dd616bbedaed6", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "f7cd31b1879215ad672e8c13081e96f3f84b96fc", "commitAfterChange": "34306363c17d57637e95391d671fbf3578b1d25c", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 30, "signatureBeforeChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventMouseDown (int nextHandler, int theEvent, int userData)", "diff": ["+", "+\ttracking = false;", "-\torg.eclipse.swt.internal.carbon.Point outPt = new org.eclipse.swt.internal.carbon.Point ();", "-\tOS.GetGlobalMouse (outPt);", "-\tRect rect = new Rect ();", "-\tint window = OS.GetControlOwner (handle);", "-\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "-\tint x = outPt.h - rect.left;", "-\tint y = outPt.v - rect.top;", "-\tint [] theControl = new int [1];", "-\tOS.GetEventParameter (theEvent, OS.kEventParamDirectObject, OS.typeControlRef, null, 4, null, theControl);", "-\tOS.GetControlBounds (theControl [0], rect);", "-\tx -= rect.left;", "-\ty -=  rect.top;", "-\tshort [] button = new short [1];", "-\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button);", "-\tint chord = OS.GetCurrentEventButtonState ();", "-\tint modifiers = OS.GetCurrentEventKeyModifiers ();", "-\tparent.sendMouseEvent (SWT.MouseUp, button [0], chord, (short)x, (short)y, modifiers);", "+\tif (tracking) {", "+\t\torg.eclipse.swt.internal.carbon.Point outPt = new org.eclipse.swt.internal.carbon.Point ();", "+\t\tOS.GetGlobalMouse (outPt);", "+\t\tRect rect = new Rect ();", "+\t\tint window = OS.GetControlOwner (handle);", "+\t\tOS.GetWindowBounds (window, (short) OS.kWindowContentRgn, rect);", "+\t\tint x = outPt.h - rect.left;", "+\t\tint y = outPt.v - rect.top;", "+\t\tint [] theControl = new int [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamDirectObject, OS.typeControlRef, null, 4, null, theControl);", "+\t\tOS.GetControlBounds (theControl [0], rect);", "+\t\tx -= rect.left;", "+\t\ty -=  rect.top;", "+\t\tshort [] button = new short [1];", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseButton, OS.typeMouseButton, null, 2, null, button);", "+\t\tint chord = OS.GetCurrentEventButtonState ();", "+\t\tint modifiers = OS.GetCurrentEventKeyModifiers ();", "+\t\tparent.sendMouseEvent (SWT.MouseUp, button [0], chord, (short)x, (short)y, modifiers);", "+\t}", "+\ttracking = false;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "51cb400883e24c1894d71d525953ede8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/ToolItem.java", "commitBeforeChange": "be7a6b56ec36f2937282f99ce8f6d3a09d752bb5", "commitAfterChange": "388089e4bec9dc7b9e91ccd2ec44faabbba9290c", "methodNumberBeforeChange": 32, "methodNumberAfterChange": 32, "signatureBeforeChange": "  int kEventControlHitTest (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventControlHitTest (int nextHandler, int theEvent, int userData)", "diff": ["-\tif (OS.HIVIEW) {", "-\t\t/*", "-\t\t* Feature in the Macintosh.  When kWindowCompositingAttribute is", "-\t\t* set in the window, controls within the window are selected when", "-\t\t* any button is pressed, not just the left one.  When the control", "-\t\t* has a menu, this causes both selection and a menu to be displayed.", "-\t\t* The fix is to check for button two and avoid setting the part", "-\t\t* code, which stops the selection from happening.", "-\t\t*/\t\t", "-\t\tif (display.clickCountButton == 2) return OS.noErr;", "-\t\tint [] theControl = new int [1];", "-\t\tOS.GetEventParameter (theEvent, OS.kEventParamDirectObject, OS.typeControlRef, null, 4, null, theControl);", "-\t\tif (theControl [0] == labelHandle) {", "-\t\t\tCGRect rect = new CGRect ();", "-\t\t\tOS.HIViewGetBounds (labelHandle, rect);", "-\t\t\tCGPoint pt = new CGPoint ();", "-\t\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseLocation, OS.typeHIPoint, null, CGPoint.sizeof, null, pt);", "-\t\t\tif (OS.CGRectContainsPoint (rect, pt) != 0) {", "-\t\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamControlPart, OS.typeControlPartCode, 2, new short[]{(short)1});", "-\t\t\t\treturn OS.noErr;", "-\t\t\t}", "+\t/*", "+\t* Feature in the Macintosh.  When kWindowCompositingAttribute is", "+\t* set in the window, controls within the window are selected when", "+\t* any button is pressed, not just the left one.  When the control", "+\t* has a menu, this causes both selection and a menu to be displayed.", "+\t* The fix is to check for button two and avoid setting the part", "+\t* code, which stops the selection from happening.", "+\t*/\t\t", "+\tif (display.clickCountButton == 2) return OS.noErr;", "+\tint [] theControl = new int [1];", "+\tOS.GetEventParameter (theEvent, OS.kEventParamDirectObject, OS.typeControlRef, null, 4, null, theControl);", "+\tif (theControl [0] == labelHandle) {", "+\t\tCGRect rect = new CGRect ();", "+\t\tOS.HIViewGetBounds (labelHandle, rect);", "+\t\tCGPoint pt = new CGPoint ();", "+\t\tOS.GetEventParameter (theEvent, OS.kEventParamMouseLocation, OS.typeHIPoint, null, CGPoint.sizeof, null, pt);", "+\t\tif (OS.CGRectContainsPoint (rect, pt) != 0) {", "+\t\t\tOS.SetEventParameter (theEvent, OS.kEventParamControlPart, OS.typeControlPartCode, 2, new short[]{(short)1});", "+\t\t\treturn OS.noErr;"]}], "num": 48747}
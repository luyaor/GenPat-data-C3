{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "34fe775b3a9b4aea184f666518ccc9fe", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "886ca918e8c475736a39e70cb64d2789", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "df55805e4a74ab0fc8f545a1792d755c95a4e419", "commitAfterChange": "b178ded274cefa13fff8fc6fb8115ee14a844dc8", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": " public Rectangle getClipping()", "signatureAfterChange": " public Rectangle getClipping()", "diff": ["+\tlong /*int*/ rgn = 0;", "-\t\tlong /*int*/ rgn = OS.gdk_region_new();", "-\t\tGdkRectangle rect = new GdkRectangle();", "-\t\trect.width = width;", "-\t\trect.height = height;", "-\t\tOS.gdk_region_union_with_rect(rgn, rect);", "-\t\tif (damageRgn != 0) {", "-\t\t\tOS.gdk_region_intersect (rgn, damageRgn);", "-\t\t}", "-\t\t/* Intersect visible bounds with clipping */", "-\t\tif (clipRgn != 0) {", "-\t\t\t/* Convert clipping to device space if needed */", "-\t\t\tif (data.clippingTransform != null) {", "-\t\t\t\tclipRgn = convertRgn(clipRgn, data.clippingTransform);", "-\t\t\t\tOS.gdk_region_intersect(rgn, clipRgn);", "-\t\t\t\tOS.gdk_region_destroy(clipRgn);", "-\t\t\t} else {", "-\t\t\t\tOS.gdk_region_intersect(rgn, clipRgn);", "+\t\tif (OS.GTK_VERSION >= OS.VERSION(3, 0, 0)) {", "+\t\t\trgn = Cairo.cairo_region_create ();", "+\t\t\tcairo_rectangle_int_t rect = new cairo_rectangle_int_t ();", "+\t\t\trect.width = width;", "+\t\t\trect.height = height;", "+\t\t\tCairo.cairo_region_union_rectangle (rgn, rect);", "+\t\t\tif (damageRgn != 0) {", "+\t\t\t\tCairo.cairo_region_intersect (rgn, damageRgn);", "+\t\t\t/* Intersect visible bounds with clipping */", "+\t\t\tif (clipRgn != 0) {", "+\t\t\t\t/* Convert clipping to device space if needed */", "+\t\t\t\tif (data.clippingTransform != null) {", "+\t\t\t\t\tclipRgn = convertRgn(clipRgn, data.clippingTransform);", "+\t\t\t\t\tCairo.cairo_region_intersect (rgn, clipRgn);", "+\t\t\t\t\tCairo.cairo_region_destroy (clipRgn);", "+\t\t\t\t} else {", "+\t\t\t\t\tCairo.cairo_region_intersect (rgn, clipRgn);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t/* Convert to user space */", "+\t\t\tif (cairo != 0) {", "+\t\t\t\tdouble[] matrix = new double[6];", "+\t\t\t\tCairo.cairo_get_matrix(cairo, matrix);", "+\t\t\t\tCairo.cairo_matrix_invert(matrix);", "+\t\t\t\tclipRgn = convertRgn(rgn, matrix);", "+\t\t\t\tCairo.cairo_region_destroy (rgn);", "+\t\t\t\trgn = clipRgn;", "+\t\t\t}", "+\t\t\tCairo.cairo_region_get_extents (rgn, rect);", "+\t\t\tCairo.cairo_region_destroy (rgn);", "+\t\t\tx = rect.x;", "+\t\t\ty = rect.y;", "+\t\t\twidth = rect.width;", "+\t\t\theight = rect.height;", "+\t\t} else {", "+\t\t\trgn = OS.gdk_region_new ();", "+\t\t\tGdkRectangle rect = new GdkRectangle();", "+\t\t\trect.width = width;", "+\t\t\trect.height = height;", "+\t\t\tOS.gdk_region_union_with_rect(rgn, rect);", "+\t\t\tif (damageRgn != 0) {", "+\t\t\t\tOS.gdk_region_intersect (rgn, damageRgn);", "+\t\t\t}", "+\t\t\t/* Intersect visible bounds with clipping */", "+\t\t\tif (clipRgn != 0) {", "+\t\t\t\t/* Convert clipping to device space if needed */", "+\t\t\t\tif (data.clippingTransform != null) {", "+\t\t\t\t\tclipRgn = convertRgn(clipRgn, data.clippingTransform);", "+\t\t\t\t\tOS.gdk_region_intersect (rgn, clipRgn);", "+\t\t\t\t\tOS.gdk_region_destroy (clipRgn);", "+\t\t\t\t} else {", "+\t\t\t\t\tOS.gdk_region_intersect (rgn, clipRgn);", "+\t\t\t\t}", "+\t\t\t}", "+\t\t\t/* Convert to user space */", "+\t\t\tif (cairo != 0) {", "+\t\t\t\tdouble[] matrix = new double[6];", "+\t\t\t\tCairo.cairo_get_matrix(cairo, matrix);", "+\t\t\t\tCairo.cairo_matrix_invert(matrix);", "+\t\t\t\tclipRgn = convertRgn(rgn, matrix);", "+\t\t\t\tOS.gdk_region_destroy (rgn);", "+\t\t\t\trgn = clipRgn;", "+\t\t\t}", "+\t\t\tOS.gdk_region_get_clipbox(rgn, rect);", "+\t\t\tOS.gdk_region_destroy (rgn);", "+\t\t\tx = rect.x;", "+\t\t\ty = rect.y;", "+\t\t\twidth = rect.width;", "+\t\t\theight = rect.height;", "-\t\t/* Convert to user space */", "-\t\tif (cairo != 0) {", "-\t\t\tdouble[] matrix = new double[6];", "-\t\t\tCairo.cairo_get_matrix(cairo, matrix);", "-\t\t\tCairo.cairo_matrix_invert(matrix);", "-\t\t\tclipRgn = convertRgn(rgn, matrix);", "-\t\t\tOS.gdk_region_destroy(rgn);", "-\t\t\trgn = clipRgn;", "-\t\t}", "-\t\tOS.gdk_region_get_clipbox(rgn, rect);", "-\t\tOS.gdk_region_destroy(rgn);", "-\t\tx = rect.x;", "-\t\ty = rect.y;", "-\t\twidth = rect.width;", "-\t\theight = rect.height;", "+\t\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "95443a22b84a562e2a26799dc94d26b8", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/graphics/GC.java", "commitBeforeChange": "7b722c39e9b86fa678f49903da3064b0630bbe9d", "commitAfterChange": "80413969c76bb81e4c9325125446456624eddbae", "methodNumberBeforeChange": 51, "methodNumberAfterChange": 53, "signatureBeforeChange": " public Rectangle getClipping()", "signatureAfterChange": " public Rectangle getClipping()", "diff": ["-\tRect rect = new Rect();", "-\tint width = 0, height = 0;", "+\t/* Calculate visible bounds in device space*/", "+\tRect rect = null;", "+\tint x = 0, y = 0, width = 0, height = 0;", "+\t\tif (rect == null) rect = new Rect();", "+\t/* Intersect visible bounds with clipping in device space and then convert the user space */", "-\tif (clipRgn == 0) {", "-\t\treturn new Rectangle(0, 0, width, height);", "-\t} else {", "+\tif (clipRgn != 0 || data.inverseTransform != null) {", "-\t\tOS.SetRectRgn(rgn, (short)0, (short)0, (short)width, (short)height);", "-\t\tOS.SectRgn(rgn, clipRgn, rgn);", "+\t\tOS.SetRectRgn(rgn, (short)x, (short)y, (short)(x + width), (short)(y + height));", "+\t\t/* Intersect visible bounds with clipping */", "+\t\tif (clipRgn != 0) {", "+\t\t\t/* Convert clipping to device space if needed */", "+\t\t\tif (data.clippingTransform != null) {", "+\t\t\t\tclipRgn = convertRgn(clipRgn, data.clippingTransform);", "+\t\t\t\tOS.SectRgn(rgn, clipRgn, rgn);", "+\t\t\t\tOS.DisposeRgn(clipRgn);", "+\t\t\t} else {", "+\t\t\t\tOS.SectRgn(rgn, clipRgn, rgn);", "+\t\t\t}", "+\t\t}", "+\t\t/* Convert to user space */", "+\t\tif (data.inverseTransform != null) {", "+\t\t\tclipRgn = convertRgn(rgn, data.inverseTransform);", "+\t\t\tOS.DisposeRgn(rgn);", "+\t\t\trgn = clipRgn;", "+\t\t}", "+\t\tif (rect == null) rect = new Rect();", "-\t\treturn new Rectangle(rect.left, rect.top, rect.right - rect.left, rect.bottom - rect.top);", "+\t\tx = rect.left;", "+\t\ty = rect.top;", "+\t\twidth = rect.right - rect.left;", "+\t\theight = rect.bottom - rect.top;", "+\treturn new Rectangle(x, y, width, height);"]}], "num": 42188}
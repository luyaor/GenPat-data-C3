{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "ead81097be3ff68a2ec7fb7fa0df6cc4", "detectedBy": ["DIFF_HIERARCHICAL"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "c5cef749b13433a0544cac47e4e67b28", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Display.java", "commitBeforeChange": "ef390566d4164ae7a1f970e53f45de12a5265cf6", "commitAfterChange": "ee543bcb83fee603dbf808a397bfdb1dd9d1075a", "methodNumberBeforeChange": 103, "methodNumberAfterChange": 103, "signatureBeforeChange": " public boolean post (Event event)", "signatureAfterChange": " public boolean post (Event event)", "diff": ["-\t\t\tint hHeap = OS.GetProcessHeap ();", "-\t\t\tint pInputs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, INPUT.sizeof);", "+\t\t\tint /*long*/ hHeap = OS.GetProcessHeap ();", "+\t\t\tint /*long*/ pInputs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, INPUT.sizeof);", "-\t\t\tOS.MoveMemory (pInputs + 4, inputs, KEYBDINPUT.sizeof);", "+\t\t\t//TODO - DWORD type of INPUT structure aligned to 8 bytes on 64 bit", "+\t\t\tOS.MoveMemory (pInputs + OS.PTR_SIZEOF, inputs, KEYBDINPUT.sizeof);", "-\t\t\tint hHeap = OS.GetProcessHeap ();", "-\t\t\tint pInputs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, INPUT.sizeof);", "+\t\t\tint /*long*/ hHeap = OS.GetProcessHeap ();", "+\t\t\tint /*long*/ pInputs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY, INPUT.sizeof);", "-\t\t\tOS.MoveMemory (pInputs + 4, inputs, MOUSEINPUT.sizeof);", "+\t\t\t//TODO - DWORD type of INPUT structure aligned to 8 bytes on 64 bit", "+\t\t\tOS.MoveMemory (pInputs + OS.PTR_SIZEOF, inputs, MOUSEINPUT.sizeof);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "79cc3c1af430a453b234296d1f3d8e09", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/Control.java", "commitBeforeChange": "1034efdda128f80759c28bd972b3a2faf7fa970a", "commitAfterChange": "7c255c33f088ef04ac6271863f814fd0cde593d4", "methodNumberBeforeChange": 29, "methodNumberAfterChange": 29, "signatureBeforeChange": "  void checkGesture ()", "signatureAfterChange": "  void checkGesture ()", "diff": ["+\t\t\t/*", "+\t\t\t * Feature in Windows 7: All gestures are enabled by default except GID_ROTATE.", "+\t\t\t * Enable it explicitly by calling SetGestureConfig.", "+\t\t\t */", "-\t\t\tint /*long*/ pConfigs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY,  GESTURE_COUNT * GESTURECONFIG.sizeof);", "+\t\t\tint /*long*/ pConfigs = OS.HeapAlloc (hHeap, OS.HEAP_ZERO_MEMORY,  GESTURECONFIG.sizeof);", "-\t\t\t\tfor (int i = 0; i < GESTURE_COUNT; i++) {", "-\t\t\t\t\tconfig.dwID = i + OS.GID_ZOOM;", "-\t\t\t\t\tconfig.dwWant = 1;", "-\t\t\t\t\tconfig.dwBlock = 0;", "-\t\t\t\t\tOS.MoveMemory (pConfigs + i * GESTURECONFIG.sizeof, config, GESTURECONFIG.sizeof);", "-\t\t\t\t}", "-\t\t\t\tOS.SetGestureConfig (handle, 0, GESTURE_COUNT, pConfigs, GESTURECONFIG.sizeof);", "+\t\t\t\tconfig.dwID = OS.GID_ROTATE;", "+\t\t\t\tconfig.dwWant = 1;", "+\t\t\t\tconfig.dwBlock = 0;", "+\t\t\t\tOS.MoveMemory (pConfigs, config, GESTURECONFIG.sizeof);", "+\t\t\t\tOS.SetGestureConfig (handle, 0, 1, pConfigs, GESTURECONFIG.sizeof);"]}], "num": 24801}
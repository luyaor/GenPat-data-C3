{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "52287e0259e75da6f2424d472bbbe375", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "d915e11d637017ac484bbb87d05d4e51", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/FileDialog.java", "commitBeforeChange": "f07f5197267cd0d7e55053cf48ba00db344b0ff0", "commitAfterChange": "4f7be61157667f6d4556d661045cbc7b57cd3678", "methodNumberBeforeChange": 10, "methodNumberAfterChange": 10, "signatureBeforeChange": " public String open ()", "signatureAfterChange": " public String open ()", "diff": ["-\tint /*long*/ hwndOwner = 0;", "-\tif (parent != null) hwndOwner = parent.handle;", "-", "+\tint /*long*/ hwndOwner = parent.handle;", "+\tint /*long*/ hwndParent = parent.handle;", "+\t", "+\t/*", "+\t* Feature in Windows.  There is no API to set the orientation of a", "+\t* file dialog.  It is always inherited from the parent.  The fix is", "+\t* to create a hidden parent and set the orientation in the hidden", "+\t* parent for the dialog to inherit.", "+\t*/", "+\tboolean enabled = false;", "+\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION(4, 10)) {", "+\t\tint dialogOrientation = style & (SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT);", "+\t\tint parentOrientation = parent.style & (SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT);", "+\t\tif (dialogOrientation != parentOrientation) {", "+\t\t\tint exStyle = OS.WS_EX_NOINHERITLAYOUT;", "+\t\t\tif (dialogOrientation == SWT.RIGHT_TO_LEFT) exStyle |= OS.WS_EX_LAYOUTRTL;", "+\t\t\thwndOwner = OS.CreateWindowEx (", "+\t\t\t\texStyle,", "+\t\t\t\tShell.DialogClass,", "+\t\t\t\tnull,", "+\t\t\t\t0,", "+\t\t\t\tOS.CW_USEDEFAULT, 0, OS.CW_USEDEFAULT, 0,", "+\t\t\t\thwndParent,", "+\t\t\t\t0,", "+\t\t\t\tOS.GetModuleHandle (null),", "+\t\t\t\tnull);", "+\t\t\tenabled = OS.IsWindowEnabled (hwndParent);", "+\t\t\tif (enabled) OS.EnableWindow (hwndParent, false);", "+\t\t}", "+\t}", "+\t\t", "+\t/* Destroy the BIDI orientation window */", "+\tif (hwndParent != hwndOwner) {", "+\t\tif (enabled) OS.EnableWindow (hwndParent, true);", "+\t\tOS.SetActiveWindow (hwndParent);", "+\t\tOS.DestroyWindow (hwndOwner);", "+\t}", "+\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "8a7991a587c8d4910117d4117a1b0973", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/win32/org/eclipse/swt/widgets/FontDialog.java", "commitBeforeChange": "f07f5197267cd0d7e55053cf48ba00db344b0ff0", "commitAfterChange": "4f7be61157667f6d4556d661045cbc7b57cd3678", "methodNumberBeforeChange": 5, "methodNumberAfterChange": 5, "signatureBeforeChange": " public FontData open ()", "signatureAfterChange": " public FontData open ()", "diff": ["-\tint /*long*/ hwndOwner = 0;", "-\tif (parent != null) hwndOwner = parent.handle;", "-", "+\tint /*long*/ hwndOwner = parent.handle;", "+\tint /*long*/ hwndParent = parent.handle;", "+\t", "+\t/*", "+\t* Feature in Windows.  There is no API to set the orientation of a", "+\t* font dialog.  It is always inherited from the parent.  The fix is", "+\t* to create a hidden parent and set the orientation in the hidden", "+\t* parent for the dialog to inherit.", "+\t*/", "+\tboolean enabled = false;", "+\tif (!OS.IsWinCE && OS.WIN32_VERSION >= OS.VERSION(4, 10)) {", "+\t\tint dialogOrientation = style & (SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT);", "+\t\tint parentOrientation = parent.style & (SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT);", "+\t\tif (dialogOrientation != parentOrientation) {", "+\t\t\tint exStyle = OS.WS_EX_NOINHERITLAYOUT;", "+\t\t\tif (dialogOrientation == SWT.RIGHT_TO_LEFT) exStyle |= OS.WS_EX_LAYOUTRTL;", "+\t\t\thwndOwner = OS.CreateWindowEx (", "+\t\t\t\texStyle,", "+\t\t\t\tShell.DialogClass,", "+\t\t\t\tnull,", "+\t\t\t\t0,", "+\t\t\t\tOS.CW_USEDEFAULT, 0, OS.CW_USEDEFAULT, 0,", "+\t\t\t\thwndParent,", "+\t\t\t\t0,", "+\t\t\t\tOS.GetModuleHandle (null),", "+\t\t\t\tnull);", "+\t\t\tenabled = OS.IsWindowEnabled (hwndParent);", "+\t\t\tif (enabled) OS.EnableWindow (hwndParent, false);", "+\t\t}", "+\t}", "+\t\t", "+\t/* Destroy the BIDI orientation window */", "+\tif (hwndParent != hwndOwner) {", "+\t\tif (enabled) OS.EnableWindow (hwndParent, true);", "+\t\tOS.SetActiveWindow (hwndParent);", "+\t\tOS.DestroyWindow (hwndOwner);", "+\t}", "+"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "e70c3890475b5c449f6afad456c3c261", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "examples/org.eclipse.swt.examples/src/org/eclipse/swt/examples/imageanalyzer/ImageAnalyzer.java", "commitBeforeChange": "77b3fbb225bf670e0c417bef815fb7c859299e19", "commitAfterChange": "e0856b8b808f57d665e09a4e0393d4c9c1b2f815", "methodNumberBeforeChange": 57, "methodNumberAfterChange": 57, "signatureBeforeChange": "  \tvoid menuSaveAs()", "signatureAfterChange": "  \tvoid menuSaveAs()", "diff": ["-\t\tfileChooser.setFilterExtensions(new String[] { \"*.bmp\", \"*.gif\", \"*.ico\", \"*.jpg\", \"*.png\" });", "-\t\tfileChooser.setFilterNames(new String[] { \"BMP (*.bmp)\", \"GIF (*.gif)\", \"ICO (*.ico)\", \"JPEG (*.jpg)\", \"PNG (*.png)\" });", "+\t\tfileChooser.setFilterExtensions(saveFilterExtensions);", "+\t\tfileChooser.setFilterNames(saveFilterNames);", "-\t\t\tloader.data = new ImageData[] {imageData};", "+\t\t\tboolean multi = false;", "+\t\t\tif (loader.data.length > 1) {", "+\t\t\t\tMessageBox box = new MessageBox(shell, SWT.ICON_QUESTION | SWT.YES | SWT.NO | SWT.CANCEL);", "+\t\t\t\tbox.setMessage(createMsg(bundle.getString(\"Save_all\"), new Integer(loader.data.length)));", "+\t\t\t\tint result = box.open();", "+\t\t\t\tif (result == SWT.CANCEL) return;", "+\t\t\t\tif (result == SWT.YES) multi = true;", "+\t\t\t}", "+\t\t\t/* If the image has transparency but the user has transparency turned off,", "+\t\t\t * turn it off in the saved image. */", "+\t\t\tint transparentPixel = imageData.transparentPixel;", "+\t\t\tif (!multi && transparentPixel != -1 && !transparent) {", "+\t\t\t\timageData.transparentPixel = -1;", "+\t\t\t}", "+\t\t\t", "+\t\t\tif (!multi) loader.data = new ImageData[] {imageData};", "+\t\t\t/* Restore the previous transparency setting. */", "+\t\t\tif (!multi && transparentPixel != -1 && !transparent) {", "+\t\t\t\timageData.transparentPixel = transparentPixel;", "+\t\t\t}", "+"]}], "num": 25968}
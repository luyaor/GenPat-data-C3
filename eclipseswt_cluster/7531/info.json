{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "86a6c72856f53a7a3e2541dccce4392a", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "a92c9fec830afdcec940b89e1ae5de36", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/motif/org/eclipse/swt/widgets/Label.java", "commitBeforeChange": "3fb799dcaa7d449679ed92f9829fbed85aa6fd1d", "commitAfterChange": "6c0e3d76ce668620fd159ac504e2b5d9a48852be", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "\r public Point computeSize (int wHint, int hHint, boolean changed)", "signatureAfterChange": "\r public Point computeSize (int wHint, int hHint, boolean changed)", "diff": ["-*/\r", "-\tXtWidgetGeometry result = new XtWidgetGeometry ();\r", "-\tresult.request_mode = OS.CWWidth | OS.CWHeight;\r", "-\tint [] argList2 = {OS.XmNrecomputeSize, 1};\r", "-\tOS.XtSetValues(handle, argList2, argList2.length / 2);\r", "-\tOS.XtQueryGeometry (handle, null, result);\r", "-\tint [] argList3 = {OS.XmNrecomputeSize, 0};\r", "-\tOS.XtSetValues(handle, argList3, argList3.length / 2);\r", "-\twidth += result.width;\r", "-\theight += result.height;\r", "+\tint [] argList = {OS.XmNlabelType, 0};\r", "+\tOS.XtGetValues (handle, argList, argList.length / 2);\r", "+\tint labelType = argList [1];\r", "+\tif (labelType == OS.XmSTRING && (style & SWT.WRAP) != 0 && wHint != SWT.DEFAULT) {\r", "+\t\t/* If we are wrapping text, calculate the height based on wHint. */\r", "+\t\tint [] argList4 = {\r", "+\t\t\tOS.XmNfontList, 0,      /* 1 */\r", "+\t\t\tOS.XmNmarginTop, 0,     /* 3 */\r", "+\t\t\tOS.XmNmarginBottom, 0,  /* 5 */\r", "+\t\t\tOS.XmNmarginHeight, 0,  /* 7 */\r", "+\t\t};\r", "+\t\tOS.XtGetValues (handle, argList4, argList4.length / 2);\r", "+\t\tDisplay display = getDisplay ();\r", "+\t\tString string = display.wrapText (text, argList4 [1], wHint);\r", "+\t\tGC gc = new GC(this);\r", "+\t\tPoint extent = gc.textExtent(string);\r", "+\t\tgc.dispose();\r", "+\t\theight = extent.y + argList4 [3] + argList4 [5] + argList4 [7] * 2 + border * 2;\r", "+\t} else {\r", "+\t\t/* If we are not wrapping, ask the widget for its geometry. */\r", "+\t\tXtWidgetGeometry result = new XtWidgetGeometry ();\r", "+\t\tresult.request_mode = OS.CWWidth | OS.CWHeight;\r", "+\t\tint [] argList2 = {OS.XmNrecomputeSize, 1};\r", "+\t\tOS.XtSetValues(handle, argList2, argList2.length / 2);\r", "+\t\tOS.XtQueryGeometry (handle, null, result);\r", "+\t\tint [] argList3 = {OS.XmNrecomputeSize, 0};\r", "+\t\tOS.XtSetValues(handle, argList3, argList3.length / 2);\r", "+\t\twidth += result.width;\r", "+\t\theight += result.height;\r", "+\t}\r", "+\r", "-\t * Feature in Motif. If a button's labelType is XmSTRING but it\r", "+\t * Feature in Motif. If a label's labelType is XmSTRING but it\r", "-\tint [] argList = {OS.XmNlabelType, 0};\r", "-\tOS.XtGetValues (handle, argList, argList.length / 2);\r", "-\tif (argList [1] == OS.XmSTRING) {\r", "-\t\tint [] argList1 = {OS.XmNlabelString, 0};\r", "-\t\tOS.XtGetValues (handle, argList1, argList1.length / 2);\r", "-\t\tint xmString = argList1 [1];\r", "-\t\tif (OS.XmStringEmpty (xmString)) {\r", "-\t\t\theight += getFontHeight ();\r", "-\t\t\twidth = 0;\r", "-\t\t}\r", "+\tif (labelType == OS.XmSTRING && text.length () == 0) {\r", "+\t\theight += getFontHeight ();\r", "+\t\twidth = 0;\r"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "24fcf448ddd74b1e3303b82fd5584e76", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/cocoa/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "34cc11d9be7c6799a286a4b7f0c7efe8288cddc9", "commitAfterChange": "c9e6ebd32564e7c38d92ed3bd14ecff35522294d", "methodNumberBeforeChange": 7, "methodNumberAfterChange": 7, "signatureBeforeChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "signatureAfterChange": " public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Color selectionForeground, Color selectionBackground, int flags)", "diff": ["+\tNSColor selectionColor = null;", "+\tif (hasSelection || (flags & SWT.LAST_LINE_SELECTION) != 0) {", "+\t\tif (selectionBackground == null) selectionBackground = device.getSystemColor(SWT.COLOR_LIST_SELECTION);", "+\t\tselectionColor = NSColor.colorWithDeviceRed(selectionBackground.handle[0], selectionBackground.handle[1], selectionBackground.handle[2], selectionBackground.handle[3]);", "+\t}", "-\t\tif (selectionBackground == null) selectionBackground = device.getSystemColor(SWT.COLOR_LIST_SELECTION);", "-\t\tNSColor selectionColor = NSColor.colorWithDeviceRed(selectionBackground.handle[0], selectionBackground.handle[1], selectionBackground.handle[2], selectionBackground.handle[3]);", "-\t//TODO draw selection for flags (LAST_LINE_SELECTION and FULL_SELECTION)", "+\t//TODO draw selection for flags (DELIMITER_SELECTION)", "+\tif ((flags & SWT.LAST_LINE_SELECTION) != 0) {", "+\t\tNSRect bounds = lineBounds[lineBounds.length - 1];", "+\t\tNSRect rect = new NSRect();", "+\t\trect.x = pt.x + bounds.x + bounds.width;", "+\t\trect.y = y + bounds.y;", "+\t\trect.width = (flags & SWT.FULL_SELECTION) != 0 ? 0x7fffffff : bounds.height / 3;", "+\t\trect.height = bounds.height;", "+\t\tselectionColor.setFill();", "+\t\tNSBezierPath path = NSBezierPath.bezierPath();", "+\t\tpath.appendBezierPathWithRect(rect);", "+\t\tpath.fill();", "+\t}"]}], "num": 7531}
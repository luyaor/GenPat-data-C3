{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "568f0fd80954d609bf78f2fa91973365", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "f97664bfd23d2e7d64c6af24335102c1", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 46, "methodNumberAfterChange": 88, "signatureBeforeChange": " void itemChanged(SelectableItem changedItem, int repaintStartX, int repaintWidth)", "signatureAfterChange": " void updateHorizontalBar()", "diff": ["- */", "-void itemChanged(SelectableItem changedItem, int repaintStartX, int repaintWidth) {", "-\tint oldItemHeight = getItemHeight();\t", "-\tPoint oldImageExtent = getImageExtent();", "-\t", "-\tif (isExpandingItem(changedItem) == false) {", "-\t\tsuper.itemChanged(changedItem, repaintStartX, repaintWidth);", "-\t}", "-\telse {", "-\t\tcalculateItemHeight(changedItem);", "-\t}", "-\tif ((oldItemHeight != getItemHeight()) ||\t\t\t// only reset items if the item height or", "-\t\t(oldImageExtent != getImageExtent())) {\t\t\t// image size has changed. The latter will only change once, ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t// from null to a value-so it's safe to test using !=", "-\t\tgetRoot().reset();\t\t\t\t\t\t\t\t// reset cached data of all items in the receiver", "-\t\tresetHierarchyIndicatorRect();", "-\t\tredraw();\t\t\t\t\t\t\t\t\t\t// redraw all items if the image extent has changed. Fixes 1FRIHPZ\t\t", "-\t}", "-\telse {", "-\t\t((AbstractTreeItem) changedItem).reset();\t\t// reset the item that has changed when the tree item ", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t// height has not changed (otherwise the item caches old data)", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Fixes 1FF6B42", "-\t}", "-\tif (repaintWidth != 0) {", "-\t\tcalculateWidestShowingItem();", "-\t\tclaimRightFreeSpace();\t\t\t\t\t\t\t\t// otherwise scroll bar may be reset, but not horizontal offset", "-\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Fixes 1G4SBJ3", "-\t}", "-}", "+ */", "+void updateHorizontalBar() {", "+\t// TODO revisit", "+\t", "+\t/* the horizontal range is never affected by an item change if there are columns */", "+\tif (getColumnCount() > 0) return;", "+\t", "+\tScrollBar hBar = getHorizontalBar();", "+\tint maxX = 0;", "+\tfor (int i = 0; i < availableItems.length; i++) {", "+\t\tRectangle itemBounds = availableItems[i].getBounds ();", "+\t\tint rightmostX = itemBounds.x + itemBounds.width;", "+\t\tmaxX = Math.max (maxX, rightmostX);", "+\t}", "+\t", "+\thBar.setMaximum(maxX);", "+\tint thumb = Math.min(maxX, getClientArea().width);", "+\thBar.setThumb(thumb);", "+\t", "+\t/* reclaim any space now left on the right */", "+\tif (maxX < horizontalOffset + thumb) {", "+\t\thorizontalOffset = maxX - thumb;", "+\t\thBar.setSelection(horizontalOffset);", "+\t\tredraw();", "+\t}", "+\t", "+\t/* ", "+\t * The following is intentionally commented, for future reference", "+\t */", "+//\t\tif (nowAvailable) {", "+//\t\t\tif (rightX <= hBar.getMaximum()) return;", "+//\t\t\tint maximum = Math.max(1, rightX);", "+//\t\t\thBar.setMaximum(maximum);", "+//\t\t\thBar.setThumb(getClientArea().width);", "+//\t\t\treturn;", "+//\t\t}", "+//\t\t", "+//\t\t/* item has become unavailable */", "+//\t\tint barMaximum = hBar.getMaximum();", "+//\t\tif (rightX < barMaximum) return;", "+//\t\t", "+//\t\t/* compute new maximum value */", "+//\t\tint newMaxX = 1;", "+//\t\tfor (int i = 0; i < availableItems.length; i++) {", "+//\t\t\tint maxX = availableItems[i].getRightmostX();", "+//\t\t\tif (newMaxX < maxX) newMaxX = maxX;", "+//\t\t}", "+//\t\tif (newMaxX == barMaximum) return;", "+//\t\thBar.setMaximum(newMaxX);", "+//\t\thBar.setThumb(getClientArea().width);", "+//\t\t", "+//\t\t/* reclaim any space now left on the right side */", "+//\t\thorizontalOffset += newMaxX - barMaximum;", "+//\t\thBar.setSelection(horizontalOffset);", "+//\t\tredraw();", "+}"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "fc8bbaed16153abce083e3b76cd5b0a0", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/emulated/treetable/org/eclipse/swt/widgets/TreeItem2.java", "commitBeforeChange": "ed568a606dfba062e77bacc7c7f799741b60cbf4", "commitAfterChange": "3e04f21595fe557524d009b946647c76885ec76f", "methodNumberBeforeChange": 16, "methodNumberAfterChange": 52, "signatureBeforeChange": " public Rectangle getBounds (int columnIndex)", "signatureAfterChange": " public void setImage(Image newImage)", "diff": ["-}", "-public Rectangle getBounds (int columnIndex) {", "-\tcheckWidget ();", "-\tint columnCount = parent.getColumnCount ();", "-\tint validColumnCount = Math.max (1, parent.getColumnCount ());", "-\tif (!(0 <= columnIndex && columnIndex < validColumnCount)) {", "-\t\treturn new Rectangle (0, 0, 0, 0);", "-\t}", "-\t", "-\t/*", "-\t * If there are no columns then this is the bounds of the receiver from the", "-\t * beginning of its expander to the end of its text.", "-\t */", "-\tif (columnCount == 0) {", "-\t\tint x = getExpanderBounds ().x;", "-\t\tint width = getFocusX () + getTextPaintWidth (0) - x;", "-\t\treturn new Rectangle (x, parent.getItemY (this), width, parent.getItemHeight ());", "-\t}", "-\tTreeColumn column = parent.getColumn (columnIndex);", "-\treturn new Rectangle(column.getX (), parent.getItemY (this), column.getWidth (), parent.getItemHeight ());", "-}", "+}", "+public void setImage(Image newImage) {", "+\tcheckWidget();", "+\tTree2 parent = getParent();", "+\tImage oldImage = getImage();", "+\tboolean isSameImage;", "+\tint imageWidth = 0;", "+\tint redrawX = 0;", "+", "+\tsuper.setImage(newImage);\t", "+\tif (newImage != null && oldImage != null) {", "+\t\tisSameImage = newImage.equals(oldImage) && newImage.type == SWT.ICON;", "+\t}", "+\telse {", "+\t\tisSameImage = newImage == oldImage;", "+\t}", "+\tif (isSameImage == false) {", "+\t\tif (parent.getVisibleRedrawY(this) != -1) {", "+\t\t\tif (parent.getImageExtent() != null) {", "+\t\t\t\timageWidth = parent.getImageExtent().x;", "+\t\t\t}", "+\t\t\telse", "+\t\t\tif (newImage != null) {", "+\t\t\t\timageWidth = newImage.getBounds().width;", "+\t\t\t}", "+\t\t\tredrawX = getItemStartX();", "+\t\t}", "+\t\tparent.itemChanged(this, redrawX, imageWidth);", "+\t}", "+}"]}], "num": 40971}
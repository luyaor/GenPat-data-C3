{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "66e80fa23597155371c93f541dc432f8", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "09b9f76b2415145f26c807c1da55c05a", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "d5ef76abdc0a88a3a80daac9bfb6d535a8a1e9c9", "commitAfterChange": "6b10047f8b94d39fa2b2ab5637752108437a743e", "methodNumberBeforeChange": 102, "methodNumberAfterChange": 100, "signatureBeforeChange": "  \tvoid updateChildren ()", "signatureAfterChange": " \t \tvoid updateChildren ()", "diff": ["-", "+\t\tevent.childID = id;", "-\t\tif (event.children != null && event.children.length > 0) {", "-\t\t\tVector idsToKeep = new Vector (children.size ());", "-\t\t\tif (event.children [0] instanceof Integer) {", "-\t\t\t\t/*\tan array of child id's (Integers) was answered */", "-\t\t\t\tfor (int i = 0; i < event.children.length; i++) {", "-\t\t\t\t\tAccessibleObject object = getChildByIndex (i);", "-\t\t\t\t\tif (object == null) {", "-\t\t\t\t\t\tobject = AccessibleFactory.createChildAccessible (accessible, i);", "-\t\t\t\t\t\taddChild (object);", "-\t\t\t\t\t\tobject.index = i;", "-\t\t\t\t\t}", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tobject.id = ((Integer)event.children[i]).intValue ();", "-\t\t\t\t\t} catch (ClassCastException e) {", "-\t\t\t\t\t\t/* a non-ID value was given so don't set the ID */", "-\t\t\t\t\t}", "-\t\t\t\t\tidsToKeep.addElement (new LONG (object.handle));", "+\t\tObject[] children = event.children;", "+\t\tAccessibleObject[] oldChildren = this.children;", "+\t\tint count = children != null ? children.length : 0;", "+\t\tAccessibleObject[] newChildren = new AccessibleObject[count];", "+\t\tfor (int i = 0; i < count; i++) {", "+\t\t\tObject child = children [i];", "+\t\t\tAccessibleObject object = null;", "+\t\t\tif (child instanceof Integer) {", "+\t\t\t\tint id = ((Integer)child).intValue();", "+\t\t\t\tobject = oldChildren != null && i < oldChildren.length ? oldChildren [i] : null;", "+\t\t\t\tif (object == null || object.id != id) {", "+\t\t\t\t\tobject = AccessibleFactory.createChildAccessible (accessible, id);", "+\t\t\t\t\tobject.id = id;", "+\t\t\t\t} else {", "+\t\t\t\t\tOS.g_object_ref(object.handle);", "-\t\t\t} else {", "-\t\t\t\t/* an array of Accessible children was answered */", "-\t\t\t\tint childIndex = 0;", "-\t\t\t\tfor (int i = 0; i < event.children.length; i++) {", "-\t\t\t\t\tAccessibleObject object = null;", "-\t\t\t\t\ttry {", "-\t\t\t\t\t\tobject = ((Accessible)event.children [i]).getAccessibleObject();", "-\t\t\t\t\t} catch (ClassCastException e) {", "-\t\t\t\t\t\t/* a non-Accessible value was given so nothing to do here */ ", "-\t\t\t\t\t}", "-\t\t\t\t\tif (object != null) {", "-\t\t\t\t\t\tobject.index = childIndex++;", "-\t\t\t\t\t\tidsToKeep.addElement (new LONG (object.handle));", "-\t\t\t\t\t}", "-\t\t\t\t}", "+\t\t\t} else if (child instanceof Accessible) {", "+\t\t\t\tobject = ((Accessible)child).getAccessibleObject();", "+\t\t\t\tif (object != null)\tOS.g_object_ref(object.handle);", "-\t\t\t/* remove old children that were not provided as children anymore */", "-\t\t\tEnumeration ids = children.keys ();", "-\t\t\twhile (ids.hasMoreElements ()) {", "-\t\t\t\tLONG id = (LONG)ids.nextElement ();", "-\t\t\t\tif (!idsToKeep.contains (id)) {", "-\t\t\t\t\tAccessibleObject object = (AccessibleObject) children.get (id);", "-\t\t\t\t\tremoveChild (object, true);", "-\t\t\t\t}", "+\t\t\tif (object != null) {", "+\t\t\t\tobject.index = i;", "+\t\t\t\tobject.parent = this;", "+\t\t\t\tnewChildren[i] = object;", "+\t\tif (oldChildren != null) {", "+\t\t\tfor (int i = 0; i < oldChildren.length; i++) {", "+\t\t\t\tAccessibleObject object = oldChildren [i];", "+\t\t\t\tif (object != null) OS.g_object_unref(object.handle);", "+\t\t\t}", "+\t\t}", "+\t\tthis.children = newChildren;"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "89d00a32e79f2af3feb3c13490f58b6c", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "a397adb9835229656215e95243704829dfcbbeb5", "commitAfterChange": "def775014633899bdd73c908cbbdd1bf2fa7d5be", "methodNumberBeforeChange": 37, "methodNumberAfterChange": 36, "signatureBeforeChange": " \t \tvoid updateChildren ()", "signatureAfterChange": " \t \tvoid updateChildren ()", "diff": ["-\t\tif (accessible.getControlListeners ().length > 0) {", "-\t\t\tAccessibleControlListener[] listener = accessible.getControlListeners ();", "-\t\t\tAccessibleControlEvent event = new AccessibleControlEvent (this);", "-\t\t\tfor (int i = 0; i < listener.length; i++) {", "-\t\t\t\tlistener [i].getChildren (event);", "-\t\t\t}", "-\t\t\tif (event.children != null && event.children.length > 0) {", "-\t\t\t\tHashtable childrenCopy = (Hashtable)children.clone ();", "-\t\t\t\tif (event.children [0] instanceof Integer) {", "-\t\t\t\t\t//\tan array of child id's (Integers) was answered", "-\t\t\t\t\tAccessibleType childType = AccessibleType.getInstance ();", "-\t\t\t\t\tfor (int i = 0; i < event.children.length; i++) {", "-\t\t\t\t\t\tAccessibleObject object = getChildByIndex (i);", "-\t\t\t\t\t\tif (object == null) {", "-\t\t\t\t\t\t\tobject = new AccessibleObject (childType.handle, 0, accessible, childType.handle, true);", "-\t\t\t\t\t\t\tchildType.addInstance (object);", "-\t\t\t\t\t\t\taddChild (object);", "-\t\t\t\t\t\t\tobject.index = i;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tobject.id = ((Integer)event.children [i]).intValue ();", "-\t\t\t\t\t\t} catch (ClassCastException e) {", "-\t\t\t\t\t\t\t// a non-ID value was given so don't set the ID", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tchildrenCopy.remove (new Integer (object.handle));", "-\t\t\t\t\t}", "-\t\t\t\t} else {", "-\t\t\t\t\t// an array of Accessible children was answered", "-\t\t\t\t\tfor (int i = 0; i < event.children.length; i++) {", "-\t\t\t\t\t\tAccessibleObject object = null;", "-\t\t\t\t\t\ttry {", "-\t\t\t\t\t\t\tobject = ((Accessible)event.children [i]).accessibleObject;", "-\t\t\t\t\t\t} catch (ClassCastException e) {", "-\t\t\t\t\t\t\t// a non-Accessible value was given so nothing to do here ", "-\t\t\t\t\t\t}", "+\t\tAccessibleControlListener[] listeners = accessible.getControlListeners ();", "+\t\tif (listeners.length == 0) return;", "+", "+\t\tAccessibleControlEvent event = new AccessibleControlEvent (this);", "+\t\tfor (int i = 0; i < listeners.length; i++) {", "+\t\t\tlisteners [i].getChildren (event);", "+\t\t}", "+\t\tif (event.children != null && event.children.length > 0) {", "+\t\t\tHashtable childrenCopy = (Hashtable)children.clone ();", "+\t\t\tif (event.children [0] instanceof Integer) {", "+\t\t\t\t//\tan array of child id's (Integers) was answered", "+\t\t\t\tAccessibleType childType = AccessibleFactory.getChildType ();", "+\t\t\t\tfor (int i = 0; i < event.children.length; i++) {", "+\t\t\t\t\tAccessibleObject object = getChildByIndex (i);", "+\t\t\t\t\tif (object == null) {", "+\t\t\t\t\t\tobject = new AccessibleObject (childType.handle, 0, accessible, parentType, true);", "+\t\t\t\t\t\tAccessibleType.addInstance (object);", "+\t\t\t\t\t\taddChild (object);", "-\t\t\t\t\t\tchildrenCopy.remove (new Integer (object.handle));", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tobject.id = ((Integer)event.children[i]).intValue ();", "+\t\t\t\t\t} catch (ClassCastException e) {", "+\t\t\t\t\t\t// a non-ID value was given so don't set the ID", "+\t\t\t\t\t}", "+\t\t\t\t\tchildrenCopy.remove (new Integer (object.handle));", "-\t\t\t\t// remove previous children of self which were not answered", "-\t\t\t\tEnumeration childrenToRemove = childrenCopy.elements ();", "-\t\t\t\twhile (childrenToRemove.hasMoreElements ()) {", "-\t\t\t\t\tAccessibleObject object = (AccessibleObject) childrenToRemove.nextElement (); ", "-\t\t\t\t\tremoveChild (object, true);", "+\t\t\t} else {", "+\t\t\t\t// an array of Accessible children was answered", "+\t\t\t\tfor (int i = 0; i < event.children.length; i++) {", "+\t\t\t\t\tAccessibleObject object = null;", "+\t\t\t\t\ttry {", "+\t\t\t\t\t\tobject = ((Accessible)event.children [i]).accessibleObject;", "+\t\t\t\t\t} catch (ClassCastException e) {", "+\t\t\t\t\t\t// a non-Accessible value was given so nothing to do here ", "+\t\t\t\t\t}", "+\t\t\t\t\tobject.index = i;", "+\t\t\t\t\tchildrenCopy.remove (new Integer (object.handle));", "+\t\t\t// remove previous children of self which were not answered", "+\t\t\tEnumeration childrenToRemove = childrenCopy.elements ();", "+\t\t\twhile (childrenToRemove.hasMoreElements ()) {", "+\t\t\t\tAccessibleObject object = (AccessibleObject) childrenToRemove.nextElement (); ", "+\t\t\t\tremoveChild (object, true);", "+\t\t\t}"]}], "num": 38159}
{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "2385f7db6fcd8850a401c26e3a89c0bb", "detectedBy": ["AST_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "beeaba216293f83c5b8d9639209d8171", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/graphics/TextLayout.java", "commitBeforeChange": "62b114225776c09f8a6570dde053dd94358f28d9", "commitAfterChange": "88d0b371a82ed8f1081c2933382ac5c0ad56880e", "methodNumberBeforeChange": 2, "methodNumberAfterChange": 2, "signatureBeforeChange": "  void computeRuns ()", "signatureAfterChange": "  void computeRuns ()", "diff": ["-\tbyte[] buffer = Converter.wcsToMbcs(null, getSegmentsText(), false);", "+\tString segmentsText = getSegmentsText();", "+\tbyte[] buffer = Converter.wcsToMbcs(null, segmentsText, false);", "-\tif (styles.length == 2 && styles[0].style == null) return;", "+\tif (styles.length == 2 && styles[0].style == null && ascent == -1 && descent == -1) return;", "-\tPangoAttribute attribute = new PangoAttribute();\t", "+\tPangoAttribute attribute = new PangoAttribute();", "+\tif ((ascent != -1  || descent != -1) && segmentsText.length() > 0) {", "+\t\tint /*long*/ iter = OS.pango_layout_get_iter(layout);", "+\t\tif (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);", "+\t\tPangoRectangle rect = new PangoRectangle();", "+\t\tif (ascent != -1) rect.y =  -(ascent  * OS.PANGO_SCALE);", "+\t\trect.height = (Math.max(0, ascent) + Math.max(0, descent)) * OS.PANGO_SCALE;", "+\t\tint lineCount = OS.pango_layout_get_line_count(layout);", "+\t\tchar[] chars = new char[segmentsText.length() + lineCount];", "+\t\tint oldPos = 0, count = 0;", "+\t\tdo {", "+\t\t\tint /*long*/ attr = OS.pango_attr_shape_new (rect, rect);", "+\t\t\tOS.memmove (attribute, attr, PangoAttribute.sizeof);", "+\t\t\tint bytePos = OS.pango_layout_iter_get_index(iter);", "+\t\t\tattribute.start_index = bytePos + (count * 3);", "+\t\t\tattribute.end_index = bytePos+ 3 + (count * 3);", "+\t\t\tOS.memmove (attr, attribute, PangoAttribute.sizeof);", "+\t\t\tOS.pango_attr_list_insert(attrList, attr);", "+\t\t\tint pos = (int)/*64*/OS.g_utf8_pointer_to_offset(ptr, ptr + bytePos);", "+\t\t\tchars[pos + count] = OBJECT_REPLACEMENT_CHARACTER;", "+\t\t\tsegmentsText.getChars(oldPos, pos, chars,  oldPos + count);", "+\t\t\toldPos = pos;", "+\t\t\tcount++;", "+\t\t} while (OS.pango_layout_iter_next_line(iter));", "+\t\tOS.pango_layout_iter_free (iter);", "+\t\tsegmentsText.getChars(oldPos, segmentsText.length(), chars,  oldPos + count);", "+\t\tbuffer = Converter.wcsToMbcs(null, chars, false);", "+\t\tOS.pango_layout_set_text (layout, buffer, buffer.length);", "+\t\tptr = OS.pango_layout_get_text(layout);", "+\t}\t"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "1ec8a1745515f34345e1a1f7115539a2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/gtk/org/eclipse/swt/widgets/Tree.java", "commitBeforeChange": "cc7a79cec8920b1b6175a6c2124e7f63a3823262", "commitAfterChange": "d8f34c9ec09bc11f5d7b71293f9d378725f3146c", "methodNumberBeforeChange": 40, "methodNumberAfterChange": 9, "signatureBeforeChange": "  void removeColumn ()", "signatureAfterChange": " void createColumn (TreeColumn column, int index)", "diff": ["+}", "+void createColumn (TreeColumn column, int index) {", "+/*", "+* Bug in ATK. For some reason, ATK segments fault if ", "+* the GtkTreeView has a column and does not have items.", "+* The fix is to insert the column only when an item is ", "+* created.", "+*/", "+\t", "+\tint modelIndex = FIRST_COLUMN;", "+\tif (columnCount != 0) {", "+\t\tint modelLength = OS.gtk_tree_model_get_n_columns (modelHandle);", "+\t\tboolean [] usedColumns = new boolean [modelLength];", "+\t\tfor (int i=0; i<columnCount; i++) {", "+\t\t\tint columnIndex = columns [i].modelIndex;", "+\t\t\tfor (int j = 0; j < CELL_TYPES; j++) {", "+\t\t\t\tusedColumns [columnIndex + j] = true;", "+\t\t\t}", "+\t\t}", "+\t\twhile (modelIndex < modelLength) {", "+\t\t\tif (!usedColumns [modelIndex]) break;", "+\t\t\tmodelIndex++;", "+\t\t}", "+\t\tif (modelIndex == modelLength) {", "+\t\t\tint /*long*/ oldModel = modelHandle;", "+\t\t\tint /*long*/[] types = getColumnTypes (columnCount + 4); // grow by 4 rows at a time", "+\t\t\tint /*long*/ newModel = OS.gtk_tree_store_newv (types.length, types);", "+\t\t\tif (newModel == 0) error (SWT.ERROR_NO_HANDLES);", "+\t\t\tcopyModel (oldModel, FIRST_COLUMN, newModel, FIRST_COLUMN, types, (int /*long*/)0, (int /*long*/)0, modelLength);", "+\t\t\tOS.gtk_tree_view_set_model (handle, newModel);", "+\t\t\tOS.g_object_unref (oldModel);", "+\t\t\tmodelHandle = newModel;", "+\t\t}", "+\t}", "+\tint /*long*/ columnHandle = OS.gtk_tree_view_column_new ();", "+\tif (columnHandle == 0) error (SWT.ERROR_NO_HANDLES);", "+\tif (index == 0 && columnCount > 0) {", "+\t\tTreeColumn checkColumn = columns [0];", "+\t\tcreateRenderers (checkColumn.handle, checkColumn.modelIndex, false, checkColumn.style);", "+\t}", "+\tcreateRenderers (columnHandle, modelIndex, index == 0, column == null ? 0 : column.style);", "+\tif ((style & SWT.VIRTUAL) == 0 && columnCount == 0) {", "+\t\tOS.gtk_tree_view_column_set_sizing (columnHandle, OS.GTK_TREE_VIEW_COLUMN_AUTOSIZE);", "+\t} else {", "+\t\tOS.gtk_tree_view_column_set_sizing (columnHandle, OS.GTK_TREE_VIEW_COLUMN_FIXED);", "+\t\tOS.gtk_tree_view_column_set_fixed_width (columnHandle, 10);", "+\t}", "+\tOS.gtk_tree_view_column_set_resizable (columnHandle, true);", "+\tOS.gtk_tree_view_column_set_clickable (columnHandle, true);", "+\tOS.gtk_tree_view_insert_column (handle, columnHandle, index);", "+\tif (column != null) {", "+\t\tcolumn.handle = columnHandle;", "+\t\tcolumn.modelIndex = modelIndex;", "+\t}", "+}", "-", "-void removeColumn () {", "-\tint /*long*/ column = OS.gtk_tree_view_get_column (handle, 0);", "-\tif (column == 0) return;", "-\tOS.gtk_tree_view_remove_column (handle, column);"]}], "num": 50296}
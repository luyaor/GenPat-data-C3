{"@class": "de.fau.cs.inf2.cthree.data.Cluster", "id": "aaa0dacc31061554047d94979701ffd7", "detectedBy": ["DIFF_HIERARCHICAL", "DIFF_DBSCAN"], "members": [{"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "44418902066ce2037cccfd5d918c91e2", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT/carbon/org/eclipse/swt/widgets/Canvas.java", "commitBeforeChange": "4b7ac62e4c7abc2bdb8c97e1ee5fae6064a184d8", "commitAfterChange": "49a0d281d71c7b0b4f050c8585ea47184b029cc7", "methodNumberBeforeChange": 8, "methodNumberAfterChange": 9, "signatureBeforeChange": "  int kEventTextInputUpdateActiveInputArea (int nextHandler, int theEvent, int userData)", "signatureAfterChange": "  int kEventTextInputUpdateActiveInputArea (int nextHandler, int theEvent, int userData)", "diff": ["-\tif (!hooks(SWT.ImeComposition)) return OS.eventNotHandledErr;", "-\tint [] length = new int [1];", "-\tOS.GetEventParameter (theEvent, OS.kEventParamTextInputSendText, OS.typeUnicodeText, null, 0, length, (char [])null);", "-\tchar [] chars = new char [length [0]];", "-\tOS.GetEventParameter (theEvent, OS.kEventParamTextInputSendText, OS.typeUnicodeText, null, length [0], null, chars);", "-\tint [] fixed_length = new int [1];", "-\tOS.GetEventParameter (theEvent, OS.kEventParamTextInputSendFixLen, OS.typeLongInteger, null, 4, null, fixed_length);", "-\tint [] rangeSize = new int [1];", "-\tint index = 0;", "-\tint [] ranges = null;", "-\tTextStyle [] styles = null;", "-\tint rc = OS.GetEventParameter (theEvent, OS.kEventParamTextInputSendHiliteRng, OS.typeTextRangeArray, null, 0, rangeSize, (byte [])null);", "-\tif (rc == OS.noErr) {", "-\t\tint firstSelectedConverted = -1;", "-\t\tboolean hasConvertedText = false;", "-\t\tint textRanges = OS.NewPtr (rangeSize [0]);", "-\t\tOS.GetEventParameter (theEvent, OS.kEventParamTextInputSendHiliteRng, OS.typeTextRangeArray, null, rangeSize [0], null, textRanges);", "-\t\tshort [] nRanges = new short [1];", "-\t\tOS.memmove (nRanges, textRanges, 2);", "-\t\tint count = nRanges [0];", "-\t\tif (count > 0) {", "-\t\t\tTextRange range = new TextRange ();", "-\t\t\tranges = new int [(count - 1) * 2];", "-\t\t\tstyles = new TextStyle [count - 1];", "-\t\t\tfor (int i = 0, j = 0; i < count; i++) {", "-\t\t\t\tOS.memmove (range, textRanges + 2 + (i * TextRange.sizeof), TextRange.sizeof);", "-\t\t\t\tswitch (range.fHiliteStyle) {", "-\t\t\t\t\tcase OS.kCaretPosition: ", "-\t\t\t\t\t\tindex = range.fStart;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t\tcase OS.kConvertedText:\t", "-\t\t\t\t\tcase OS.kSelectedConvertedText:", "-\t\t\t\t\tcase OS.kSelectedRawText:", "-\t\t\t\t\tcase OS.kRawText:", "-\t\t\t\t\t\tranges [j * 2] = range.fStart / 2;", "-\t\t\t\t\t\tranges [j * 2 + 1] = range.fEnd / 2 - range.fStart / 2 + 0;", "-\t\t\t\t\t\tstyles [j] = new TextStyle ();", "-\t\t\t\t\t\tstyles [j].underline = true;", "-\t\t\t\t\t\tstyles [j].underlineStyle = UNDERLINE_IME_INPUT;", "-\t\t\t\t\t\tif (range.fHiliteStyle == OS.kConvertedText) {", "-\t\t\t\t\t\t\tstyles [j].underlineStyle = UNDERLINE_IME_CONVERTED;", "-\t\t\t\t\t\t\thasConvertedText = true;", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tif (range.fHiliteStyle == OS.kSelectedConvertedText) {", "-\t\t\t\t\t\t\tstyles [j].underlineStyle = UNDERLINE_IME_TARGET_CONVERTED;", "-\t\t\t\t\t\t\tif (firstSelectedConverted == -1) {", "-\t\t\t\t\t\t\t\tfirstSelectedConverted = range.fStart;", "-\t\t\t\t\t\t\t}", "-\t\t\t\t\t\t}", "-\t\t\t\t\t\tj++;", "-\t\t\t\t\t\tbreak;", "-\t\t\t\t}", "-\t\t\t}", "-\t\t}", "-\t\tOS.DisposePtr (textRanges);", "-\t\tif (hasConvertedText && firstSelectedConverted != -1) {", "-\t\t\tindex = firstSelectedConverted;", "-\t\t}", "+\tif (ime != null) {", "+\t\tint result = ime.kEventTextInputUpdateActiveInputArea (nextHandler, theEvent, userData);", "+\t\tif (result != OS.eventNotHandledErr) return result;", "-\tEvent event = new Event ();", "-\tevent.detail = SWT.COMPOSITION_CHANGED;", "-\tevent.text = new String(chars, 0, length [0] / 2);", "-\tevent.index = index / 2;", "-\tevent.count = fixed_length [0] != -1 ? fixed_length [0] / 2: length [0] / 2;", "-\tevent.ranges = ranges;", "-\tevent.styles = styles;", "-\tsendEvent (SWT.ImeComposition, event);", "-\tif (event.doit) {", "-\t\tif (fixed_length [0] == -1 || fixed_length [0] == length [0]) {", "-\t\t\tfor (int i=0; i<chars.length; i++) {", "-\t\t\t\tif (chars [i] == 0) break;", "-\t\t\t\tevent = new Event ();", "-\t\t\t\tevent.character = chars [i];", "-\t\t\t\tsendKeyEvent (SWT.KeyDown, event);", "-\t\t\t}", "-\t\t}", "-\t}", "-\treturn OS.noErr;", "+\treturn super.kEventTextInputUpdateActiveInputArea (nextHandler, theEvent, userData);"]}, {"@class": "de.fau.cs.inf2.cthree.data.CodeChange", "id": "36ac055abab72317e18a5f7ee2eb76e5", "repository": "http://git.eclipse.org/gitroot/platform/eclipse.platform.swt.git", "fileName": "bundles/org.eclipse.swt/Eclipse SWT Accessibility/gtk/org/eclipse/swt/accessibility/AccessibleObject.java", "commitBeforeChange": "30eaec187a22ddf0998c34e45a71b135fb6c6509", "commitAfterChange": "4e3ace7441083b52059381fc7315ed0ffaa59c75", "methodNumberBeforeChange": 25, "methodNumberAfterChange": 69, "signatureBeforeChange": "  \tstatic int atkText_get_selection (int atkObject, int selection_num, int start_offset, int end_offset)", "signatureAfterChange": "  \tstatic int atkText_get_selection (int atkObject, int selection_num, int start_offset, int end_offset)", "diff": ["-\t\tif (object == null) return 0;", "+\t\tint /*long*/ parentResult = 0;", "-\t\tif (ATK.g_type_is_a (object.parentType, ATK_TEXT_TYPE)) {", "-\t\t\tint /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (object.handle));", "-\t\t\tAtkTextIface textIface = new AtkTextIface ();", "-\t\t\tATK.memmove (textIface, superType);", "-\t\t\tif (textIface.get_selection != 0) {", "-\t\t\t\tATK.call (textIface.get_selection, object.handle, selection_num, start_offset, end_offset);", "+\t\tAtkTextIface iface = getTextIface (atkObject);", "+\t\tif (iface != null && iface.get_selection != 0) {", "+\t\t\tparentResult = ATK.call (iface.get_selection, atkObject, selection_num, start_offset, end_offset);", "+\t\t}", "+\t\tif (object != null) {", "+\t\t\tint[] parentStart = new int [1];", "+\t\t\tint[] parentEnd = new int [1];", "+\t\t\tOS.memmove (parentStart, start_offset, 4);", "+\t\t\tOS.memmove (parentEnd, end_offset, 4);", "+\t\t\tAccessible accessible = object.accessible;", "+\t\t\tVector listeners = accessible.accessibleTextExtendedListeners;", "+\t\t\tint length = listeners.size();", "+\t\t\tif (length > 0) {", "+\t\t\t\tAccessibleTextExtendedEvent event = new AccessibleTextExtendedEvent(accessible);", "+\t\t\t\tevent.index = (int)/*64*/selection_num;", "+\t\t\t\tevent.start = parentStart[0];", "+\t\t\t\tevent.end = parentEnd[0] - 1;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getSelection (event);", "+\t\t\t\t}", "+\t\t\t\tparentStart [0] = event.start;", "+\t\t\t\tparentEnd [0] = event.end + 1;", "+\t\t\t\tOS.memmove (start_offset, parentStart, 4);", "+\t\t\t\tOS.memmove (end_offset, parentEnd, 4);", "+\t\t\t\tevent.count = event.index = 0;", "+\t\t\t\tevent.type = ACC.TEXT_BOUNDARY_ALL;", "+\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\tAccessibleTextExtendedListener listener = (AccessibleTextExtendedListener) listeners.elementAt(i);", "+\t\t\t\t\tlistener.getText(event);", "+\t\t\t\t}", "+\t\t\t\treturn getStringPtr (event.result);", "+\t\t\t}", "+\t\t\tif (selection_num == 0) {", "+\t\t\t\tlisteners = accessible.accessibleTextListeners;", "+\t\t\t\tlength = listeners.size();", "+\t\t\t\tif (length > 0) {", "+\t\t\t\t\tAccessibleTextEvent event = new AccessibleTextEvent (accessible);", "+\t\t\t\t\tevent.childID = object.id;", "+\t\t\t\t\tevent.offset = parentStart [0];", "+\t\t\t\t\tevent.length = parentEnd [0] - parentStart [0];", "+\t\t\t\t\tfor (int i = 0; i < length; i++) {", "+\t\t\t\t\t\tAccessibleTextListener listener = (AccessibleTextListener) listeners.elementAt(i);", "+\t\t\t\t\t\tlistener.getSelectionRange (event);", "+\t\t\t\t\t}", "+\t\t\t\t\tOS.memmove (start_offset, new int[] {event.offset}, 4);", "+\t\t\t\t\tOS.memmove (end_offset, new int[] {event.offset + event.length}, 4);", "+\t\t\t\t\t//TODO return the selected text, should we free parent result", "+\t\t\t\t\treturn 0;", "+\t\t\t\t}", "-\t\tAccessibleTextListener[] listeners = object.getTextListeners ();", "-\t\tif (listeners.length == 0) return 0;", "-", "-\t\tAccessibleTextEvent event = new AccessibleTextEvent (object.accessible);", "-\t\tevent.childID = object.id;", "-\t\tint[] parentStart = new int [1];", "-\t\tint[] parentEnd = new int [1];", "-\t\tOS.memmove (parentStart, start_offset, 4);", "-\t\tOS.memmove (parentEnd, end_offset, 4);", "-\t\tevent.offset = parentStart [0];", "-\t\tevent.length = parentEnd [0] - parentStart [0];", "-\t\tfor (int i = 0; i < listeners.length; i++) {", "-\t\t\tlisteners [i].getSelectionRange (event);", "-\t\t}", "-\t\tOS.memmove (start_offset, new int[] {event.offset}, 4);", "-\t\tOS.memmove (end_offset, new int[] {event.offset + event.length}, 4);", "-\t\treturn 0;", "+\t\treturn parentResult;"]}], "num": 15896}